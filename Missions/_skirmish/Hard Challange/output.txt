// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 0 , 0 ) ;
   4: LD_INT 0
   6: PPUSH
   7: LD_INT 0
   9: PPUSH
  10: CALL_OW 86
// AnimateTrees ( true ) ;
  14: LD_INT 1
  16: PPUSH
  17: CALL_OW 573
// debug := 0 ;
  21: LD_ADDR_EXP 1
  25: PUSH
  26: LD_INT 0
  28: ST_TO_ADDR
// if debug then
  29: LD_EXP 1
  33: IFFALSE 55
// begin display_strings := Debug mode active! ;
  35: LD_ADDR_OWVAR 47
  39: PUSH
  40: LD_STRING Debug mode active!
  42: ST_TO_ADDR
// Your_Side := 1 ;
  43: LD_ADDR_OWVAR 2
  47: PUSH
  48: LD_INT 1
  50: ST_TO_ADDR
// TurnFogOff ;
  51: CALL_OW 537
// end ; Difficulty := GetMultiplayerSetting ( 0 ) ;
  55: LD_ADDR_OWVAR 67
  59: PUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 426
  67: ST_TO_ADDR
// if not Difficulty then
  68: LD_OWVAR 67
  72: NOT
  73: IFFALSE 83
// Difficulty := 2 ;
  75: LD_ADDR_OWVAR 67
  79: PUSH
  80: LD_INT 2
  82: ST_TO_ADDR
// depotConstructed := false ;
  83: LD_ADDR_EXP 2
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// PrepareTigers ( tiger_area ) ;
  91: LD_INT 8
  93: PPUSH
  94: CALL 10090 0 1
// PrepareApemans ( apeman_area ) ;
  98: LD_INT 9
 100: PPUSH
 101: CALL 10220 0 1
// PrepareRussian ;
 105: CALL 125 0 0
// PrepareAmerican ;
 109: CALL 11627 0 0
// if not debug then
 113: LD_EXP 1
 117: NOT
 118: IFFALSE 124
// Action ;
 120: CALL 13856 0 0
// end ;
 124: END
// export debug , depotConstructed ; end_of_file export ru_force , ru_group1 , ru_group2 , ru_tech_list , ru_towers_list , ru_weapon_list , ru_reserve , ru_attack_list ; export ru_lab_list , ru_heal_list , ru_blist , ru_buildings , ru_behemoth_mechanic , ru_spotted , ru_protector ; export need_buldozer , need_crane ; export function PrepareRussian ; var skill , i , un ; begin
 125: LD_INT 0
 127: PPUSH
 128: PPUSH
 129: PPUSH
 130: PPUSH
// uc_side := 3 ;
 131: LD_ADDR_OWVAR 20
 135: PUSH
 136: LD_INT 3
 138: ST_TO_ADDR
// uc_nation := nation_russian ;
 139: LD_ADDR_OWVAR 21
 143: PUSH
 144: LD_INT 3
 146: ST_TO_ADDR
// skill := [ 6 , 7 , 8 ] [ Difficulty ] ;
 147: LD_ADDR_VAR 0 2
 151: PUSH
 152: LD_INT 6
 154: PUSH
 155: LD_INT 7
 157: PUSH
 158: LD_INT 8
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_OWVAR 67
 170: ARRAY
 171: ST_TO_ADDR
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , 2000 ) ;
 172: LD_INT 2
 174: PPUSH
 175: CALL_OW 274
 179: PPUSH
 180: LD_INT 1
 182: PPUSH
 183: LD_INT 2000
 185: PPUSH
 186: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , 600 ) ;
 190: LD_INT 2
 192: PPUSH
 193: CALL_OW 274
 197: PPUSH
 198: LD_INT 2
 200: PPUSH
 201: LD_INT 600
 203: PPUSH
 204: CALL_OW 277
// SetResourceVisibility ( 33 , 4 , 3 ) ;
 208: LD_INT 33
 210: PPUSH
 211: LD_INT 4
 213: PPUSH
 214: LD_INT 3
 216: PPUSH
 217: CALL_OW 441
// SetResourceVisibility ( 37 , 3 , 3 ) ;
 221: LD_INT 37
 223: PPUSH
 224: LD_INT 3
 226: PPUSH
 227: LD_INT 3
 229: PPUSH
 230: CALL_OW 441
// ru_force := [ ] ;
 234: LD_ADDR_EXP 3
 238: PUSH
 239: EMPTY
 240: ST_TO_ADDR
// ru_group1 := [ ] ;
 241: LD_ADDR_EXP 4
 245: PUSH
 246: EMPTY
 247: ST_TO_ADDR
// ru_group2 := [ ] ;
 248: LD_ADDR_EXP 5
 252: PUSH
 253: EMPTY
 254: ST_TO_ADDR
// ru_reserve := [ ] ;
 255: LD_ADDR_EXP 9
 259: PUSH
 260: EMPTY
 261: ST_TO_ADDR
// ru_attack_list := [ ] ;
 262: LD_ADDR_EXP 10
 266: PUSH
 267: EMPTY
 268: ST_TO_ADDR
// ru_protector := [ ] ;
 269: LD_ADDR_EXP 17
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
 276: LD_ADDR_EXP 6
 280: PUSH
 281: LD_INT 48
 283: PUSH
 284: LD_INT 49
 286: PUSH
 287: LD_INT 50
 289: PUSH
 290: LD_INT 20
 292: PUSH
 293: LD_INT 1
 295: PUSH
 296: LD_INT 51
 298: PUSH
 299: LD_INT 52
 301: PUSH
 302: LD_INT 69
 304: PUSH
 305: LD_INT 39
 307: PUSH
 308: LD_INT 34
 310: PUSH
 311: LD_INT 40
 313: PUSH
 314: LD_INT 53
 316: PUSH
 317: LD_INT 71
 319: PUSH
 320: LD_INT 57
 322: PUSH
 323: LD_INT 58
 325: PUSH
 326: LD_INT 44
 328: PUSH
 329: LD_INT 32
 331: PUSH
 332: LD_INT 27
 334: PUSH
 335: LD_INT 23
 337: PUSH
 338: LD_INT 33
 340: PUSH
 341: LD_INT 59
 343: PUSH
 344: LD_INT 54
 346: PUSH
 347: LD_INT 55
 349: PUSH
 350: LD_INT 56
 352: PUSH
 353: LD_INT 63
 355: PUSH
 356: LD_INT 64
 358: PUSH
 359: LD_INT 65
 361: PUSH
 362: LD_INT 30
 364: PUSH
 365: LD_INT 31
 367: PUSH
 368: LD_INT 21
 370: PUSH
 371: LD_INT 22
 373: PUSH
 374: LD_INT 25
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: LIST
 386: LIST
 387: LIST
 388: LIST
 389: LIST
 390: LIST
 391: LIST
 392: LIST
 393: LIST
 394: LIST
 395: LIST
 396: LIST
 397: LIST
 398: LIST
 399: LIST
 400: LIST
 401: LIST
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: ST_TO_ADDR
// ru_towers_list := GetBuildingList ( 3 , b_turret ) ;
 411: LD_ADDR_EXP 7
 415: PUSH
 416: LD_INT 3
 418: PPUSH
 419: LD_INT 33
 421: PPUSH
 422: CALL 8309 0 2
 426: ST_TO_ADDR
// ru_weapon_list := [ ru_heavy_gun , ru_rocket_launcher , ru_rocket ] ;
 427: LD_ADDR_EXP 8
 431: PUSH
 432: LD_INT 46
 434: PUSH
 435: LD_INT 45
 437: PUSH
 438: LD_INT 47
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: LIST
 445: ST_TO_ADDR
// ru_blist := [ b_turret , 36 , 8 , 3 ] ;
 446: LD_ADDR_EXP 13
 450: PUSH
 451: LD_INT 33
 453: PUSH
 454: LD_INT 36
 456: PUSH
 457: LD_INT 8
 459: PUSH
 460: LD_INT 3
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: ST_TO_ADDR
// ru_buildings := [ ] ;
 469: LD_ADDR_EXP 14
 473: PUSH
 474: EMPTY
 475: ST_TO_ADDR
// ru_lab_list := [ [ GetX ( GetLabs ( 3 ) [ 1 ] ) , GetY ( GetLabs ( 3 ) [ 1 ] ) , GetDir ( GetLabs ( 3 ) [ 1 ] ) , GetLabKind ( GetLabs ( 3 ) [ 1 ] , 1 ) , GetLabKind ( GetLabs ( 3 ) [ 1 ] , 2 ) ] , [ 12 , 13 , 1 , b_lab_siberium , b_lab_spacetime ] ] ;
 476: LD_ADDR_EXP 11
 480: PUSH
 481: LD_INT 3
 483: PPUSH
 484: CALL 6358 0 1
 488: PUSH
 489: LD_INT 1
 491: ARRAY
 492: PPUSH
 493: CALL_OW 250
 497: PUSH
 498: LD_INT 3
 500: PPUSH
 501: CALL 6358 0 1
 505: PUSH
 506: LD_INT 1
 508: ARRAY
 509: PPUSH
 510: CALL_OW 251
 514: PUSH
 515: LD_INT 3
 517: PPUSH
 518: CALL 6358 0 1
 522: PUSH
 523: LD_INT 1
 525: ARRAY
 526: PPUSH
 527: CALL_OW 254
 531: PUSH
 532: LD_INT 3
 534: PPUSH
 535: CALL 6358 0 1
 539: PUSH
 540: LD_INT 1
 542: ARRAY
 543: PPUSH
 544: LD_INT 1
 546: PPUSH
 547: CALL_OW 268
 551: PUSH
 552: LD_INT 3
 554: PPUSH
 555: CALL 6358 0 1
 559: PUSH
 560: LD_INT 1
 562: ARRAY
 563: PPUSH
 564: LD_INT 2
 566: PPUSH
 567: CALL_OW 268
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: PUSH
 579: LD_INT 12
 581: PUSH
 582: LD_INT 13
 584: PUSH
 585: LD_INT 1
 587: PUSH
 588: LD_INT 11
 590: PUSH
 591: LD_INT 14
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: LIST
 598: LIST
 599: LIST
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: ST_TO_ADDR
// ru_heal_list := [ ] ;
 605: LD_ADDR_EXP 12
 609: PUSH
 610: EMPTY
 611: ST_TO_ADDR
// need_buldozer := false ;
 612: LD_ADDR_EXP 18
 616: PUSH
 617: LD_INT 0
 619: ST_TO_ADDR
// need_crane := true ;
 620: LD_ADDR_EXP 19
 624: PUSH
 625: LD_INT 1
 627: ST_TO_ADDR
// ru_spotted := false ;
 628: LD_ADDR_EXP 16
 632: PUSH
 633: LD_INT 0
 635: ST_TO_ADDR
// for i = 1 to 6 do
 636: LD_ADDR_VAR 0 3
 640: PUSH
 641: DOUBLE
 642: LD_INT 1
 644: DEC
 645: ST_TO_ADDR
 646: LD_INT 6
 648: PUSH
 649: FOR_TO
 650: IFFALSE 691
// begin PrepareHuman ( false , 4 , skill ) ;
 652: LD_INT 0
 654: PPUSH
 655: LD_INT 4
 657: PPUSH
 658: LD_VAR 0 2
 662: PPUSH
 663: CALL_OW 380
// un := CreateHuman ;
 667: LD_ADDR_VAR 0 4
 671: PUSH
 672: CALL_OW 44
 676: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
 677: LD_VAR 0 4
 681: PPUSH
 682: LD_INT 3
 684: PPUSH
 685: CALL_OW 52
// end ;
 689: GO 649
 691: POP
 692: POP
// for i = 1 to 6 do
 693: LD_ADDR_VAR 0 3
 697: PUSH
 698: DOUBLE
 699: LD_INT 1
 701: DEC
 702: ST_TO_ADDR
 703: LD_INT 6
 705: PUSH
 706: FOR_TO
 707: IFFALSE 748
// begin PrepareHuman ( false , 3 , skill ) ;
 709: LD_INT 0
 711: PPUSH
 712: LD_INT 3
 714: PPUSH
 715: LD_VAR 0 2
 719: PPUSH
 720: CALL_OW 380
// un := CreateHuman ;
 724: LD_ADDR_VAR 0 4
 728: PUSH
 729: CALL_OW 44
 733: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
 734: LD_VAR 0 4
 738: PPUSH
 739: LD_INT 14
 741: PPUSH
 742: CALL_OW 52
// end ;
 746: GO 706
 748: POP
 749: POP
// for i = 1 to 6 do
 750: LD_ADDR_VAR 0 3
 754: PUSH
 755: DOUBLE
 756: LD_INT 1
 758: DEC
 759: ST_TO_ADDR
 760: LD_INT 6
 762: PUSH
 763: FOR_TO
 764: IFFALSE 808
// begin PrepareHuman ( false , 2 , skill ) ;
 766: LD_INT 0
 768: PPUSH
 769: LD_INT 2
 771: PPUSH
 772: LD_VAR 0 2
 776: PPUSH
 777: CALL_OW 380
// un := CreateHuman ;
 781: LD_ADDR_VAR 0 4
 785: PUSH
 786: CALL_OW 44
 790: ST_TO_ADDR
// PlaceUnitArea ( un , ru_spawn , false ) ;
 791: LD_VAR 0 4
 795: PPUSH
 796: LD_INT 1
 798: PPUSH
 799: LD_INT 0
 801: PPUSH
 802: CALL_OW 49
// end ;
 806: GO 763
 808: POP
 809: POP
// for i = 1 to 6 do
 810: LD_ADDR_VAR 0 3
 814: PUSH
 815: DOUBLE
 816: LD_INT 1
 818: DEC
 819: ST_TO_ADDR
 820: LD_INT 6
 822: PUSH
 823: FOR_TO
 824: IFFALSE 902
// begin PrepareHuman ( false , 1 , skill ) ;
 826: LD_INT 0
 828: PPUSH
 829: LD_INT 1
 831: PPUSH
 832: LD_VAR 0 2
 836: PPUSH
 837: CALL_OW 380
// un := CreateHuman ;
 841: LD_ADDR_VAR 0 4
 845: PUSH
 846: CALL_OW 44
 850: ST_TO_ADDR
// PlaceUnitArea ( un , ru_spawn , false ) ;
 851: LD_VAR 0 4
 855: PPUSH
 856: LD_INT 1
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: CALL_OW 49
// ComEnterUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_barracks ] ) , un ) ) ;
 866: LD_VAR 0 4
 870: PPUSH
 871: LD_INT 30
 873: PUSH
 874: LD_INT 5
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: PPUSH
 881: CALL_OW 69
 885: PPUSH
 886: LD_VAR 0 4
 890: PPUSH
 891: CALL_OW 74
 895: PPUSH
 896: CALL_OW 120
// end ;
 900: GO 823
 902: POP
 903: POP
// for i = 1 to Difficulty do
 904: LD_ADDR_VAR 0 3
 908: PUSH
 909: DOUBLE
 910: LD_INT 1
 912: DEC
 913: ST_TO_ADDR
 914: LD_OWVAR 67
 918: PUSH
 919: FOR_TO
 920: IFFALSE 1031
// begin vc_chassis := ru_medium_tracked ;
 922: LD_ADDR_OWVAR 37
 926: PUSH
 927: LD_INT 22
 929: ST_TO_ADDR
// vc_engine := engine_siberite ;
 930: LD_ADDR_OWVAR 39
 934: PUSH
 935: LD_INT 3
 937: ST_TO_ADDR
// vc_control := control_computer ;
 938: LD_ADDR_OWVAR 38
 942: PUSH
 943: LD_INT 3
 945: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] ;
 946: LD_ADDR_OWVAR 40
 950: PUSH
 951: LD_INT 43
 953: PUSH
 954: LD_INT 45
 956: PUSH
 957: EMPTY
 958: LIST
 959: LIST
 960: PUSH
 961: LD_VAR 0 3
 965: PUSH
 966: LD_INT 2
 968: MOD
 969: PUSH
 970: LD_INT 1
 972: PLUS
 973: ARRAY
 974: ST_TO_ADDR
// un := CreateVehicle ;
 975: LD_ADDR_VAR 0 4
 979: PUSH
 980: CALL_OW 45
 984: ST_TO_ADDR
// PlaceUnitXYR ( un , 52 , 42 , 6 , false ) ;
 985: LD_VAR 0 4
 989: PPUSH
 990: LD_INT 52
 992: PPUSH
 993: LD_INT 42
 995: PPUSH
 996: LD_INT 6
 998: PPUSH
 999: LD_INT 0
1001: PPUSH
1002: CALL_OW 50
// ru_protector := Insert ( ru_protector , 1 , un ) ;
1006: LD_ADDR_EXP 17
1010: PUSH
1011: LD_EXP 17
1015: PPUSH
1016: LD_INT 1
1018: PPUSH
1019: LD_VAR 0 4
1023: PPUSH
1024: CALL_OW 2
1028: ST_TO_ADDR
// end ;
1029: GO 919
1031: POP
1032: POP
// end ;
1033: LD_VAR 0 1
1037: RET
// every 120 120$00 trigger Difficulty = 2 and GetBuilding ( 3 , b_factory ) do
1038: LD_OWVAR 67
1042: PUSH
1043: LD_INT 2
1045: EQUAL
1046: PUSH
1047: LD_INT 3
1049: PPUSH
1050: LD_INT 3
1052: PPUSH
1053: CALL 6209 0 2
1057: AND
1058: IFFALSE 1094
1060: GO 1062
1062: DISABLE
// ComProduce ( GetBuilding ( 3 , b_factory ) [ 1 ] , ru_heavy_tracked , engine_combustion , control_computer , ru_siberium_rocket ) ;
1063: LD_INT 3
1065: PPUSH
1066: LD_INT 3
1068: PPUSH
1069: CALL 6209 0 2
1073: PUSH
1074: LD_INT 1
1076: ARRAY
1077: PPUSH
1078: LD_INT 24
1080: PPUSH
1081: LD_INT 1
1083: PPUSH
1084: LD_INT 3
1086: PPUSH
1087: LD_INT 48
1089: PPUSH
1090: CALL 8082 0 5
1094: END
// every 100 100$00 trigger Difficulty = 3 and GetBuilding ( 3 , b_factory ) do
1095: LD_OWVAR 67
1099: PUSH
1100: LD_INT 3
1102: EQUAL
1103: PUSH
1104: LD_INT 3
1106: PPUSH
1107: LD_INT 3
1109: PPUSH
1110: CALL 6209 0 2
1114: AND
1115: IFFALSE 1151
1117: GO 1119
1119: DISABLE
// ComProduce ( GetBuilding ( 3 , b_factory ) [ 1 ] , ru_heavy_tracked , engine_combustion , control_computer , ru_siberium_rocket ) ;
1120: LD_INT 3
1122: PPUSH
1123: LD_INT 3
1125: PPUSH
1126: CALL 6209 0 2
1130: PUSH
1131: LD_INT 1
1133: ARRAY
1134: PPUSH
1135: LD_INT 24
1137: PPUSH
1138: LD_INT 1
1140: PPUSH
1141: LD_INT 3
1143: PPUSH
1144: LD_INT 48
1146: PPUSH
1147: CALL 8082 0 5
1151: END
// every 0 0$01 trigger ru_protector do var i ;
1152: LD_EXP 17
1156: IFFALSE 1327
1158: GO 1160
1160: DISABLE
1161: LD_INT 0
1163: PPUSH
// begin enable ;
1164: ENABLE
// if FilterUnitsInArea ( ru_protect_area , [ f_enemy , 3 ] ) then
1165: LD_INT 14
1167: PPUSH
1168: LD_INT 81
1170: PUSH
1171: LD_INT 3
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: PPUSH
1178: CALL_OW 70
1182: IFFALSE 1257
// begin for i = 1 to ru_protector do
1184: LD_ADDR_VAR 0 1
1188: PUSH
1189: DOUBLE
1190: LD_INT 1
1192: DEC
1193: ST_TO_ADDR
1194: LD_EXP 17
1198: PUSH
1199: FOR_TO
1200: IFFALSE 1253
// ComAttackUnit ( ru_protector [ i ] , NearestUnitToUnit ( FilterUnitsInArea ( ru_protect_area , [ f_enemy , 3 ] ) , ru_protector [ i ] ) ) ;
1202: LD_EXP 17
1206: PUSH
1207: LD_VAR 0 1
1211: ARRAY
1212: PPUSH
1213: LD_INT 14
1215: PPUSH
1216: LD_INT 81
1218: PUSH
1219: LD_INT 3
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: PPUSH
1226: CALL_OW 70
1230: PPUSH
1231: LD_EXP 17
1235: PUSH
1236: LD_VAR 0 1
1240: ARRAY
1241: PPUSH
1242: CALL_OW 74
1246: PPUSH
1247: CALL_OW 115
1251: GO 1199
1253: POP
1254: POP
// end else
1255: GO 1327
// for i = 1 to ru_protector do
1257: LD_ADDR_VAR 0 1
1261: PUSH
1262: DOUBLE
1263: LD_INT 1
1265: DEC
1266: ST_TO_ADDR
1267: LD_EXP 17
1271: PUSH
1272: FOR_TO
1273: IFFALSE 1325
// if GetDistUnitXY ( ru_protector [ i ] , 49 , 39 ) > 10 then
1275: LD_EXP 17
1279: PUSH
1280: LD_VAR 0 1
1284: ARRAY
1285: PPUSH
1286: LD_INT 49
1288: PPUSH
1289: LD_INT 39
1291: PPUSH
1292: CALL_OW 297
1296: PUSH
1297: LD_INT 10
1299: GREATER
1300: IFFALSE 1323
// ComMoveXY ( ru_protector [ i ] , 49 , 39 ) ;
1302: LD_EXP 17
1306: PUSH
1307: LD_VAR 0 1
1311: ARRAY
1312: PPUSH
1313: LD_INT 49
1315: PPUSH
1316: LD_INT 39
1318: PPUSH
1319: CALL_OW 111
1323: GO 1272
1325: POP
1326: POP
// end ;
1327: PPOPN 1
1329: END
// every 0 0$01 trigger tick > [ 2 2$00 , 1 1$00 , 0 0$30 ] [ Difficulty ] do
1330: LD_OWVAR 1
1334: PUSH
1335: LD_INT 4200
1337: PUSH
1338: LD_INT 2100
1340: PUSH
1341: LD_INT 1050
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: LIST
1348: PUSH
1349: LD_OWVAR 67
1353: ARRAY
1354: GREATER
1355: IFFALSE 1368
1357: GO 1359
1359: DISABLE
// need_buldozer := true ;
1360: LD_ADDR_EXP 18
1364: PUSH
1365: LD_INT 1
1367: ST_TO_ADDR
1368: END
// export ru_sold , ru_eng , ru_mech , ru_sci , ru_bazz , ru_base_personel , ru_bulldozers , ru_crans , ru_cargos ; every 0 0$01 do
1369: GO 1371
1371: DISABLE
// begin enable ;
1372: ENABLE
// ru_sold := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
1373: LD_ADDR_EXP 20
1377: PUSH
1378: LD_INT 22
1380: PUSH
1381: LD_INT 3
1383: PUSH
1384: EMPTY
1385: LIST
1386: LIST
1387: PUSH
1388: LD_INT 25
1390: PUSH
1391: LD_INT 1
1393: PUSH
1394: EMPTY
1395: LIST
1396: LIST
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PPUSH
1402: CALL_OW 69
1406: ST_TO_ADDR
// ru_eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
1407: LD_ADDR_EXP 21
1411: PUSH
1412: LD_INT 22
1414: PUSH
1415: LD_INT 3
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: PUSH
1422: LD_INT 25
1424: PUSH
1425: LD_INT 2
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: PPUSH
1436: CALL_OW 69
1440: ST_TO_ADDR
// ru_mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
1441: LD_ADDR_EXP 22
1445: PUSH
1446: LD_INT 22
1448: PUSH
1449: LD_INT 3
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: PUSH
1456: LD_INT 25
1458: PUSH
1459: LD_INT 3
1461: PUSH
1462: EMPTY
1463: LIST
1464: LIST
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: PPUSH
1470: CALL_OW 69
1474: ST_TO_ADDR
// ru_sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
1475: LD_ADDR_EXP 23
1479: PUSH
1480: LD_INT 22
1482: PUSH
1483: LD_INT 3
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: PUSH
1490: LD_INT 25
1492: PUSH
1493: LD_INT 4
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PPUSH
1504: CALL_OW 69
1508: ST_TO_ADDR
// ru_bazz := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
1509: LD_ADDR_EXP 24
1513: PUSH
1514: LD_INT 22
1516: PUSH
1517: LD_INT 3
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PUSH
1524: LD_INT 25
1526: PUSH
1527: LD_INT 9
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: PPUSH
1538: CALL_OW 69
1542: ST_TO_ADDR
// ru_base_personel := FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
1543: LD_ADDR_EXP 25
1547: PUSH
1548: LD_INT 2
1550: PPUSH
1551: LD_INT 22
1553: PUSH
1554: LD_INT 3
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: PUSH
1561: LD_INT 21
1563: PUSH
1564: LD_INT 1
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: PPUSH
1575: CALL_OW 70
1579: ST_TO_ADDR
// ru_bulldozers := FilterAllUnits ( [ f_weapon , ru_bulldozer ] ) ;
1580: LD_ADDR_EXP 26
1584: PUSH
1585: LD_INT 34
1587: PUSH
1588: LD_INT 53
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PPUSH
1595: CALL_OW 69
1599: ST_TO_ADDR
// ru_crans := FilterAllUnits ( [ f_weapon , ru_crane ] ) ;
1600: LD_ADDR_EXP 27
1604: PUSH
1605: LD_INT 34
1607: PUSH
1608: LD_INT 52
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PPUSH
1615: CALL_OW 69
1619: ST_TO_ADDR
// ru_cargos := FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) ;
1620: LD_ADDR_EXP 28
1624: PUSH
1625: LD_INT 34
1627: PUSH
1628: LD_INT 51
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: PPUSH
1635: CALL_OW 69
1639: ST_TO_ADDR
// ru_buildings := GetBuildingsList ( 3 , - 1 ) ;
1640: LD_ADDR_EXP 14
1644: PUSH
1645: LD_INT 3
1647: PPUSH
1648: LD_INT 1
1650: NEG
1651: PPUSH
1652: CALL 10608 0 2
1656: ST_TO_ADDR
// end ;
1657: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) and game_status or debug do var i , j , un , b , p , l , fac , lab , list , c ;
1658: LD_INT 22
1660: PUSH
1661: LD_INT 3
1663: PUSH
1664: EMPTY
1665: LIST
1666: LIST
1667: PPUSH
1668: CALL_OW 69
1672: PUSH
1673: LD_EXP 29
1677: AND
1678: PUSH
1679: LD_EXP 1
1683: OR
1684: IFFALSE 5233
1686: GO 1688
1688: DISABLE
1689: LD_INT 0
1691: PPUSH
1692: PPUSH
1693: PPUSH
1694: PPUSH
1695: PPUSH
1696: PPUSH
1697: PPUSH
1698: PPUSH
1699: PPUSH
1700: PPUSH
// begin enable ;
1701: ENABLE
// for i = 1 to ru_eng do
1702: LD_ADDR_VAR 0 1
1706: PUSH
1707: DOUBLE
1708: LD_INT 1
1710: DEC
1711: ST_TO_ADDR
1712: LD_EXP 21
1716: PUSH
1717: FOR_TO
1718: IFFALSE 1781
// if not HasTask ( ru_eng [ i ] ) and not IsInUnit ( ru_eng [ i ] ) then
1720: LD_EXP 21
1724: PUSH
1725: LD_VAR 0 1
1729: ARRAY
1730: PPUSH
1731: CALL_OW 314
1735: NOT
1736: PUSH
1737: LD_EXP 21
1741: PUSH
1742: LD_VAR 0 1
1746: ARRAY
1747: PPUSH
1748: CALL_OW 310
1752: NOT
1753: AND
1754: IFFALSE 1779
// ComEnterUnit ( ru_eng [ i ] , MyBase ( 3 ) ) ;
1756: LD_EXP 21
1760: PUSH
1761: LD_VAR 0 1
1765: ARRAY
1766: PPUSH
1767: LD_INT 3
1769: PPUSH
1770: CALL 6118 0 1
1774: PPUSH
1775: CALL_OW 120
1779: GO 1717
1781: POP
1782: POP
// if FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
1783: LD_INT 2
1785: PPUSH
1786: LD_INT 22
1788: PUSH
1789: LD_INT 3
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: PUSH
1796: LD_INT 21
1798: PUSH
1799: LD_INT 3
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: PUSH
1806: LD_INT 3
1808: PUSH
1809: LD_INT 24
1811: PUSH
1812: LD_INT 1000
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: PPUSH
1828: CALL_OW 70
1832: IFFALSE 1999
// begin b := FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
1834: LD_ADDR_VAR 0 4
1838: PUSH
1839: LD_INT 2
1841: PPUSH
1842: LD_INT 22
1844: PUSH
1845: LD_INT 3
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: PUSH
1852: LD_INT 21
1854: PUSH
1855: LD_INT 3
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: PUSH
1862: LD_INT 3
1864: PUSH
1865: LD_INT 24
1867: PUSH
1868: LD_INT 1000
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: PPUSH
1884: CALL_OW 70
1888: ST_TO_ADDR
// for i = 1 to ru_eng do
1889: LD_ADDR_VAR 0 1
1893: PUSH
1894: DOUBLE
1895: LD_INT 1
1897: DEC
1898: ST_TO_ADDR
1899: LD_EXP 21
1903: PUSH
1904: FOR_TO
1905: IFFALSE 1997
// begin if IsInUnit ( ru_eng [ i ] ) then
1907: LD_EXP 21
1911: PUSH
1912: LD_VAR 0 1
1916: ARRAY
1917: PPUSH
1918: CALL_OW 310
1922: IFFALSE 1941
// ComExitBuilding ( ru_eng [ i ] ) else
1924: LD_EXP 21
1928: PUSH
1929: LD_VAR 0 1
1933: ARRAY
1934: PPUSH
1935: CALL_OW 122
1939: GO 1995
// if not WantRepair ( ru_eng [ i ] ) then
1941: LD_EXP 21
1945: PUSH
1946: LD_VAR 0 1
1950: ARRAY
1951: PPUSH
1952: CALL 10534 0 1
1956: NOT
1957: IFFALSE 1995
// ComRepairBuilding ( ru_eng [ i ] , NearestUnitToUnit ( b , ru_eng [ i ] ) ) ;
1959: LD_EXP 21
1963: PUSH
1964: LD_VAR 0 1
1968: ARRAY
1969: PPUSH
1970: LD_VAR 0 4
1974: PPUSH
1975: LD_EXP 21
1979: PUSH
1980: LD_VAR 0 1
1984: ARRAY
1985: PPUSH
1986: CALL_OW 74
1990: PPUSH
1991: CALL_OW 130
// end ;
1995: GO 1904
1997: POP
1998: POP
// end ; if EnemyNearbyBase ( your_side , 38 , 26 ) = false and EnemyNearbyBase ( your_side , 29 , 37 ) = false then
1999: LD_OWVAR 2
2003: PPUSH
2004: LD_INT 38
2006: PPUSH
2007: LD_INT 26
2009: PPUSH
2010: CALL 5451 0 3
2014: PUSH
2015: LD_INT 0
2017: EQUAL
2018: PUSH
2019: LD_OWVAR 2
2023: PPUSH
2024: LD_INT 29
2026: PPUSH
2027: LD_INT 37
2029: PPUSH
2030: CALL 5451 0 3
2034: PUSH
2035: LD_INT 0
2037: EQUAL
2038: AND
2039: IFFALSE 2176
// begin if ru_blist > 0 then
2041: LD_EXP 13
2045: PUSH
2046: LD_INT 0
2048: GREATER
2049: IFFALSE 2176
// begin for i = 1 to ru_eng do
2051: LD_ADDR_VAR 0 1
2055: PUSH
2056: DOUBLE
2057: LD_INT 1
2059: DEC
2060: ST_TO_ADDR
2061: LD_EXP 21
2065: PUSH
2066: FOR_TO
2067: IFFALSE 2174
// if IsInUnit ( ru_eng [ i ] ) then
2069: LD_EXP 21
2073: PUSH
2074: LD_VAR 0 1
2078: ARRAY
2079: PPUSH
2080: CALL_OW 310
2084: IFFALSE 2103
// ComExitBuilding ( ru_eng [ i ] ) else
2086: LD_EXP 21
2090: PUSH
2091: LD_VAR 0 1
2095: ARRAY
2096: PPUSH
2097: CALL_OW 122
2101: GO 2172
// if not HasTask ( ru_eng [ i ] ) then
2103: LD_EXP 21
2107: PUSH
2108: LD_VAR 0 1
2112: ARRAY
2113: PPUSH
2114: CALL_OW 314
2118: NOT
2119: IFFALSE 2172
// ComBuild ( ru_eng [ i ] , ru_blist [ 1 ] , ru_blist [ 2 ] , ru_blist [ 3 ] , ru_blist [ 4 ] ) ;
2121: LD_EXP 21
2125: PUSH
2126: LD_VAR 0 1
2130: ARRAY
2131: PPUSH
2132: LD_EXP 13
2136: PUSH
2137: LD_INT 1
2139: ARRAY
2140: PPUSH
2141: LD_EXP 13
2145: PUSH
2146: LD_INT 2
2148: ARRAY
2149: PPUSH
2150: LD_EXP 13
2154: PUSH
2155: LD_INT 3
2157: ARRAY
2158: PPUSH
2159: LD_EXP 13
2163: PUSH
2164: LD_INT 4
2166: ARRAY
2167: PPUSH
2168: CALL_OW 145
2172: GO 2066
2174: POP
2175: POP
// end ; end ; ru_heal_list := NeedHeal ( 3 , ru_heal_list , ru_behemoth_mechanic ) ;
2176: LD_ADDR_EXP 12
2180: PUSH
2181: LD_INT 3
2183: PPUSH
2184: LD_EXP 12
2188: PPUSH
2189: LD_EXP 15
2193: PPUSH
2194: CALL 9125 0 3
2198: ST_TO_ADDR
// if debug then
2199: LD_EXP 1
2203: IFFALSE 2215
// display_strings := ru_heal_list ;
2205: LD_ADDR_OWVAR 47
2209: PUSH
2210: LD_EXP 12
2214: ST_TO_ADDR
// for i = 1 to ru_sci do
2215: LD_ADDR_VAR 0 1
2219: PUSH
2220: DOUBLE
2221: LD_INT 1
2223: DEC
2224: ST_TO_ADDR
2225: LD_EXP 23
2229: PUSH
2230: FOR_TO
2231: IFFALSE 2563
// begin if ru_heal_list then
2233: LD_EXP 12
2237: IFFALSE 2476
// begin list := ru_heal_list ;
2239: LD_ADDR_VAR 0 9
2243: PUSH
2244: LD_EXP 12
2248: ST_TO_ADDR
// if IsInUnit ( ru_sci [ i ] ) then
2249: LD_EXP 23
2253: PUSH
2254: LD_VAR 0 1
2258: ARRAY
2259: PPUSH
2260: CALL_OW 310
2264: IFFALSE 2281
// ComExitBuilding ( ru_sci [ i ] ) ;
2266: LD_EXP 23
2270: PUSH
2271: LD_VAR 0 1
2275: ARRAY
2276: PPUSH
2277: CALL_OW 122
// for p = 1 to list do
2281: LD_ADDR_VAR 0 5
2285: PUSH
2286: DOUBLE
2287: LD_INT 1
2289: DEC
2290: ST_TO_ADDR
2291: LD_VAR 0 9
2295: PUSH
2296: FOR_TO
2297: IFFALSE 2472
// begin if GetTag ( list [ p ] ) = 100 and not WantHeal ( ru_sci [ i ] , 100 ) then
2299: LD_VAR 0 9
2303: PUSH
2304: LD_VAR 0 5
2308: ARRAY
2309: PPUSH
2310: CALL_OW 110
2314: PUSH
2315: LD_INT 100
2317: EQUAL
2318: PUSH
2319: LD_EXP 23
2323: PUSH
2324: LD_VAR 0 1
2328: ARRAY
2329: PPUSH
2330: LD_INT 100
2332: PPUSH
2333: CALL 73451 0 2
2337: NOT
2338: AND
2339: IFFALSE 2367
// ComHeal ( ru_sci [ i ] , list [ p ] ) ;
2341: LD_EXP 23
2345: PUSH
2346: LD_VAR 0 1
2350: ARRAY
2351: PPUSH
2352: LD_VAR 0 9
2356: PUSH
2357: LD_VAR 0 5
2361: ARRAY
2362: PPUSH
2363: CALL_OW 128
// if GetTag ( list [ p ] ) > 100 then
2367: LD_VAR 0 9
2371: PUSH
2372: LD_VAR 0 5
2376: ARRAY
2377: PPUSH
2378: CALL_OW 110
2382: PUSH
2383: LD_INT 100
2385: GREATER
2386: IFFALSE 2414
// AddComHeal ( ru_sci [ i ] , list [ p ] ) ;
2388: LD_EXP 23
2392: PUSH
2393: LD_VAR 0 1
2397: ARRAY
2398: PPUSH
2399: LD_VAR 0 9
2403: PUSH
2404: LD_VAR 0 5
2408: ARRAY
2409: PPUSH
2410: CALL_OW 188
// if not IsInArea ( list [ p ] , ru_heal_area ) then
2414: LD_VAR 0 9
2418: PUSH
2419: LD_VAR 0 5
2423: ARRAY
2424: PPUSH
2425: LD_INT 4
2427: PPUSH
2428: CALL_OW 308
2432: NOT
2433: IFFALSE 2455
// ComMoveToArea ( list [ p ] , ru_heal_area ) else
2435: LD_VAR 0 9
2439: PUSH
2440: LD_VAR 0 5
2444: ARRAY
2445: PPUSH
2446: LD_INT 4
2448: PPUSH
2449: CALL_OW 113
2453: GO 2470
// ComHold ( list [ p ] ) ;
2455: LD_VAR 0 9
2459: PUSH
2460: LD_VAR 0 5
2464: ARRAY
2465: PPUSH
2466: CALL_OW 140
// end ;
2470: GO 2296
2472: POP
2473: POP
// end else
2474: GO 2561
// if not HasTask ( ru_sci [ i ] ) and not IsInUnit ( ru_sci [ i ] ) and ru_heal_list = 0 then
2476: LD_EXP 23
2480: PUSH
2481: LD_VAR 0 1
2485: ARRAY
2486: PPUSH
2487: CALL_OW 314
2491: NOT
2492: PUSH
2493: LD_EXP 23
2497: PUSH
2498: LD_VAR 0 1
2502: ARRAY
2503: PPUSH
2504: CALL_OW 310
2508: NOT
2509: AND
2510: PUSH
2511: LD_EXP 12
2515: PUSH
2516: LD_INT 0
2518: EQUAL
2519: AND
2520: IFFALSE 2561
// ComEnterUnit ( ru_sci [ i ] , NearestUnitToUnit ( GetLabs ( 3 ) , ru_sci [ i ] ) ) ;
2522: LD_EXP 23
2526: PUSH
2527: LD_VAR 0 1
2531: ARRAY
2532: PPUSH
2533: LD_INT 3
2535: PPUSH
2536: CALL 6358 0 1
2540: PPUSH
2541: LD_EXP 23
2545: PUSH
2546: LD_VAR 0 1
2550: ARRAY
2551: PPUSH
2552: CALL_OW 74
2556: PPUSH
2557: CALL_OW 120
// end ;
2561: GO 2230
2563: POP
2564: POP
// if CheckTechList ( 3 , ru_tech_list ) then
2565: LD_INT 3
2567: PPUSH
2568: LD_EXP 6
2572: PPUSH
2573: CALL 6499 0 2
2577: IFFALSE 2591
// ResearchTechList ( 3 , ru_tech_list ) ;
2579: LD_INT 3
2581: PPUSH
2582: LD_EXP 6
2586: PPUSH
2587: CALL 6574 0 2
// ComBuildLabList ( ru_eng , ru_lab_list ) ;
2591: LD_EXP 21
2595: PPUSH
2596: LD_EXP 11
2600: PPUSH
2601: CALL 8481 0 2
// lab := GetLabs ( 3 ) ;
2605: LD_ADDR_VAR 0 8
2609: PUSH
2610: LD_INT 3
2612: PPUSH
2613: CALL 6358 0 1
2617: ST_TO_ADDR
// if lab and ru_heal_list = 0 then
2618: LD_VAR 0 8
2622: PUSH
2623: LD_EXP 12
2627: PUSH
2628: LD_INT 0
2630: EQUAL
2631: AND
2632: IFFALSE 2759
// for i = 1 to lab do
2634: LD_ADDR_VAR 0 1
2638: PUSH
2639: DOUBLE
2640: LD_INT 1
2642: DEC
2643: ST_TO_ADDR
2644: LD_VAR 0 8
2648: PUSH
2649: FOR_TO
2650: IFFALSE 2757
// if BuildingStatus ( lab [ i ] ) = bs_need_people then
2652: LD_VAR 0 8
2656: PUSH
2657: LD_VAR 0 1
2661: ARRAY
2662: PPUSH
2663: CALL_OW 461
2667: PUSH
2668: LD_INT 6
2670: EQUAL
2671: IFFALSE 2755
// begin for p = 1 to ru_sci do
2673: LD_ADDR_VAR 0 5
2677: PUSH
2678: DOUBLE
2679: LD_INT 1
2681: DEC
2682: ST_TO_ADDR
2683: LD_EXP 23
2687: PUSH
2688: FOR_TO
2689: IFFALSE 2753
// if IsInUnit ( ru_sci [ p ] ) then
2691: LD_EXP 23
2695: PUSH
2696: LD_VAR 0 5
2700: ARRAY
2701: PPUSH
2702: CALL_OW 310
2706: IFFALSE 2725
// ComExitBuilding ( ru_sci [ p ] ) else
2708: LD_EXP 23
2712: PUSH
2713: LD_VAR 0 5
2717: ARRAY
2718: PPUSH
2719: CALL_OW 122
2723: GO 2751
// ComEnterUnit ( ru_sci [ p ] , lab [ i ] ) ;
2725: LD_EXP 23
2729: PUSH
2730: LD_VAR 0 5
2734: ARRAY
2735: PPUSH
2736: LD_VAR 0 8
2740: PUSH
2741: LD_VAR 0 1
2745: ARRAY
2746: PPUSH
2747: CALL_OW 120
2751: GO 2688
2753: POP
2754: POP
// end ;
2755: GO 2649
2757: POP
2758: POP
// if GetTowers ( 3 ) < 5 then
2759: LD_INT 3
2761: PPUSH
2762: CALL 6913 0 1
2766: PUSH
2767: LD_INT 5
2769: LESS
2770: IFFALSE 2788
// CheckTowersStatus ( ru_eng , ru_towers_list ) else
2772: LD_EXP 21
2776: PPUSH
2777: LD_EXP 7
2781: PPUSH
2782: CALL 7521 0 2
2786: GO 2800
// CheckWeaponOnTowers ( 3 , ru_weapon_list ) ;
2788: LD_INT 3
2790: PPUSH
2791: LD_EXP 8
2795: PPUSH
2796: CALL 7812 0 2
// if GetBuilding ( 3 , b_factory ) then
2800: LD_INT 3
2802: PPUSH
2803: LD_INT 3
2805: PPUSH
2806: CALL 6209 0 2
2810: IFFALSE 3080
// if BuildingStatus ( GetBuilding ( 3 , b_factory ) [ 1 ] ) = bs_idle then
2812: LD_INT 3
2814: PPUSH
2815: LD_INT 3
2817: PPUSH
2818: CALL 6209 0 2
2822: PUSH
2823: LD_INT 1
2825: ARRAY
2826: PPUSH
2827: CALL_OW 461
2831: PUSH
2832: LD_INT 2
2834: EQUAL
2835: IFFALSE 3080
// begin fac := GetBuilding ( 3 , b_factory ) [ 1 ] ;
2837: LD_ADDR_VAR 0 7
2841: PUSH
2842: LD_INT 3
2844: PPUSH
2845: LD_INT 3
2847: PPUSH
2848: CALL 6209 0 2
2852: PUSH
2853: LD_INT 1
2855: ARRAY
2856: ST_TO_ADDR
// if GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) = 0 and need_buldozer then
2857: LD_INT 3
2859: PPUSH
2860: LD_INT 24
2862: PPUSH
2863: LD_INT 53
2865: PPUSH
2866: CALL 7960 0 3
2870: PUSH
2871: LD_INT 0
2873: EQUAL
2874: PUSH
2875: LD_EXP 18
2879: AND
2880: IFFALSE 2903
// ComProduce ( fac , ru_heavy_tracked , engine_combustion , control_manual , ru_bulldozer ) ;
2882: LD_VAR 0 7
2886: PPUSH
2887: LD_INT 24
2889: PPUSH
2890: LD_INT 1
2892: PPUSH
2893: LD_INT 1
2895: PPUSH
2896: LD_INT 53
2898: PPUSH
2899: CALL 8082 0 5
// if GetVehicle ( 3 , ru_medium_tracked , ru_crane ) = 0 and need_crane then
2903: LD_INT 3
2905: PPUSH
2906: LD_INT 22
2908: PPUSH
2909: LD_INT 52
2911: PPUSH
2912: CALL 7960 0 3
2916: PUSH
2917: LD_INT 0
2919: EQUAL
2920: PUSH
2921: LD_EXP 19
2925: AND
2926: IFFALSE 2949
// ComProduce ( fac , ru_medium_tracked , engine_combustion , control_computer , ru_crane ) ;
2928: LD_VAR 0 7
2932: PPUSH
2933: LD_INT 22
2935: PPUSH
2936: LD_INT 1
2938: PPUSH
2939: LD_INT 3
2941: PPUSH
2942: LD_INT 52
2944: PPUSH
2945: CALL 8082 0 5
// if GetVehicle ( 3 , ru_medium_tracked , ru_time_lapser ) < 4 and GetTech ( tech_lapser , 3 ) = state_researched then
2949: LD_INT 3
2951: PPUSH
2952: LD_INT 22
2954: PPUSH
2955: LD_INT 49
2957: PPUSH
2958: CALL 7960 0 3
2962: PUSH
2963: LD_INT 4
2965: LESS
2966: PUSH
2967: LD_INT 31
2969: PPUSH
2970: LD_INT 3
2972: PPUSH
2973: CALL_OW 321
2977: PUSH
2978: LD_INT 2
2980: EQUAL
2981: AND
2982: IFFALSE 3005
// ComProduce ( fac , ru_medium_tracked , engine_combustion , control_computer , ru_time_lapser ) ;
2984: LD_VAR 0 7
2988: PPUSH
2989: LD_INT 22
2991: PPUSH
2992: LD_INT 1
2994: PPUSH
2995: LD_INT 3
2997: PPUSH
2998: LD_INT 49
3000: PPUSH
3001: CALL 8082 0 5
// if ru_reserve < [ 5 , 6 , 7 ] [ Difficulty ] then
3005: LD_EXP 9
3009: PUSH
3010: LD_INT 5
3012: PUSH
3013: LD_INT 6
3015: PUSH
3016: LD_INT 7
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: LIST
3023: PUSH
3024: LD_OWVAR 67
3028: ARRAY
3029: LESS
3030: IFFALSE 3080
// begin ComProduce ( fac , ru_heavy_tracked , engine_combustion , control_computer , [ ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_heavy_gun ] [ Rand ( 1 , 4 ) ] ) ;
3032: LD_VAR 0 7
3036: PPUSH
3037: LD_INT 24
3039: PPUSH
3040: LD_INT 1
3042: PPUSH
3043: LD_INT 3
3045: PPUSH
3046: LD_INT 46
3048: PUSH
3049: LD_INT 45
3051: PUSH
3052: LD_INT 47
3054: PUSH
3055: LD_INT 46
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: PUSH
3064: LD_INT 1
3066: PPUSH
3067: LD_INT 4
3069: PPUSH
3070: CALL_OW 12
3074: ARRAY
3075: PPUSH
3076: CALL 8082 0 5
// end ; end ; if GetBaseSource ( MyBase ( 3 ) ) [ 1 ] > 250 and GetBaseSource ( MyBase ( 3 ) ) [ 3 ] > 50 and GetTech ( tech_behemoth , 3 ) = state_researched and GetBehemoth ( 3 ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_time_lapser ] ] ) > 3 and EnemyNearbyBase ( your_side , 51 , 42 ) = false then
3080: LD_INT 3
3082: PPUSH
3083: CALL 6118 0 1
3087: PPUSH
3088: CALL 5810 0 1
3092: PUSH
3093: LD_INT 1
3095: ARRAY
3096: PUSH
3097: LD_INT 250
3099: GREATER
3100: PUSH
3101: LD_INT 3
3103: PPUSH
3104: CALL 6118 0 1
3108: PPUSH
3109: CALL 5810 0 1
3113: PUSH
3114: LD_INT 3
3116: ARRAY
3117: PUSH
3118: LD_INT 50
3120: GREATER
3121: AND
3122: PUSH
3123: LD_INT 23
3125: PPUSH
3126: LD_INT 3
3128: PPUSH
3129: CALL_OW 321
3133: PUSH
3134: LD_INT 2
3136: EQUAL
3137: AND
3138: PUSH
3139: LD_INT 3
3141: PPUSH
3142: CALL 11332 0 1
3146: PUSH
3147: LD_INT 0
3149: EQUAL
3150: AND
3151: PUSH
3152: LD_INT 22
3154: PUSH
3155: LD_INT 3
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: PUSH
3162: LD_INT 34
3164: PUSH
3165: LD_INT 49
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: PPUSH
3176: CALL_OW 69
3180: PUSH
3181: LD_INT 3
3183: GREATER
3184: AND
3185: PUSH
3186: LD_OWVAR 2
3190: PPUSH
3191: LD_INT 51
3193: PPUSH
3194: LD_INT 42
3196: PPUSH
3197: CALL 5451 0 3
3201: PUSH
3202: LD_INT 0
3204: EQUAL
3205: AND
3206: IFFALSE 3291
// begin for i = 1 to ru_mech do
3208: LD_ADDR_VAR 0 1
3212: PUSH
3213: DOUBLE
3214: LD_INT 1
3216: DEC
3217: ST_TO_ADDR
3218: LD_EXP 22
3222: PUSH
3223: FOR_TO
3224: IFFALSE 3289
// begin if IsInUnit ( ru_mech [ i ] ) then
3226: LD_EXP 22
3230: PUSH
3231: LD_VAR 0 1
3235: ARRAY
3236: PPUSH
3237: CALL_OW 310
3241: IFFALSE 3260
// ComExitBuilding ( ru_mech [ i ] ) else
3243: LD_EXP 22
3247: PUSH
3248: LD_VAR 0 1
3252: ARRAY
3253: PPUSH
3254: CALL_OW 122
3258: GO 3287
// ComBuildBehemoth ( ru_mech [ i ] , b_behemoth , 51 , 43 , 0 ) ;
3260: LD_EXP 22
3264: PUSH
3265: LD_VAR 0 1
3269: ARRAY
3270: PPUSH
3271: LD_INT 37
3273: PPUSH
3274: LD_INT 51
3276: PPUSH
3277: LD_INT 43
3279: PPUSH
3280: LD_INT 0
3282: PPUSH
3283: CALL_OW 170
// end ;
3287: GO 3223
3289: POP
3290: POP
// end ; if tick >= [ 45 45$00 , 40 40$00 , 34 34$00 ] [ Difficulty ] then
3291: LD_OWVAR 1
3295: PUSH
3296: LD_INT 94500
3298: PUSH
3299: LD_INT 84000
3301: PUSH
3302: LD_INT 71400
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: LIST
3309: PUSH
3310: LD_OWVAR 67
3314: ARRAY
3315: GREATEREQUAL
3316: IFFALSE 3372
// begin if tick mod [ 9 9$00 , 8 8$00 , 7 7$00 ] [ Difficulty ] = 0 then
3318: LD_OWVAR 1
3322: PUSH
3323: LD_INT 18900
3325: PUSH
3326: LD_INT 16800
3328: PUSH
3329: LD_INT 14700
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: LIST
3336: PUSH
3337: LD_OWVAR 67
3341: ARRAY
3342: MOD
3343: PUSH
3344: LD_INT 0
3346: EQUAL
3347: IFFALSE 3372
// if ru_reserve then
3349: LD_EXP 9
3353: IFFALSE 3372
// begin ru_attack_list := ru_reserve ;
3355: LD_ADDR_EXP 10
3359: PUSH
3360: LD_EXP 9
3364: ST_TO_ADDR
// ru_reserve := [ ] ;
3365: LD_ADDR_EXP 9
3369: PUSH
3370: EMPTY
3371: ST_TO_ADDR
// end ; end ; if ru_attack_list then
3372: LD_EXP 10
3376: IFFALSE 3480
// begin for i = 1 to ru_attack_list do
3378: LD_ADDR_VAR 0 1
3382: PUSH
3383: DOUBLE
3384: LD_INT 1
3386: DEC
3387: ST_TO_ADDR
3388: LD_EXP 10
3392: PUSH
3393: FOR_TO
3394: IFFALSE 3478
// if GetLives ( ru_attack_list [ i ] ) >= 250 then
3396: LD_EXP 10
3400: PUSH
3401: LD_VAR 0 1
3405: ARRAY
3406: PPUSH
3407: CALL_OW 256
3411: PUSH
3412: LD_INT 250
3414: GREATEREQUAL
3415: IFFALSE 3476
// ComAttackUnit ( ru_attack_list [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( ru_attack_list [ i ] ) ] ) , ru_attack_list [ i ] ) ) ;
3417: LD_EXP 10
3421: PUSH
3422: LD_VAR 0 1
3426: ARRAY
3427: PPUSH
3428: LD_INT 81
3430: PUSH
3431: LD_EXP 10
3435: PUSH
3436: LD_VAR 0 1
3440: ARRAY
3441: PPUSH
3442: CALL_OW 255
3446: PUSH
3447: EMPTY
3448: LIST
3449: LIST
3450: PPUSH
3451: CALL_OW 69
3455: PPUSH
3456: LD_EXP 10
3460: PUSH
3461: LD_VAR 0 1
3465: ARRAY
3466: PPUSH
3467: CALL_OW 74
3471: PPUSH
3472: CALL_OW 115
3476: GO 3393
3478: POP
3479: POP
// end ; if GetBehemoth ( 3 ) then
3480: LD_INT 3
3482: PPUSH
3483: CALL 11332 0 1
3487: IFFALSE 3859
// begin if ru_mech >= 4 then
3489: LD_EXP 22
3493: PUSH
3494: LD_INT 4
3496: GREATEREQUAL
3497: IFFALSE 3548
// ru_behemoth_mechanic := [ ru_mech [ 1 ] , ru_mech [ 2 ] , ru_mech [ 3 ] , ru_mech [ 4 ] ] else
3499: LD_ADDR_EXP 15
3503: PUSH
3504: LD_EXP 22
3508: PUSH
3509: LD_INT 1
3511: ARRAY
3512: PUSH
3513: LD_EXP 22
3517: PUSH
3518: LD_INT 2
3520: ARRAY
3521: PUSH
3522: LD_EXP 22
3526: PUSH
3527: LD_INT 3
3529: ARRAY
3530: PUSH
3531: LD_EXP 22
3535: PUSH
3536: LD_INT 4
3538: ARRAY
3539: PUSH
3540: EMPTY
3541: LIST
3542: LIST
3543: LIST
3544: LIST
3545: ST_TO_ADDR
3546: GO 3558
// ru_behemoth_mechanic := ru_mech ;
3548: LD_ADDR_EXP 15
3552: PUSH
3553: LD_EXP 22
3557: ST_TO_ADDR
// for i = 1 to ru_mech do
3558: LD_ADDR_VAR 0 1
3562: PUSH
3563: DOUBLE
3564: LD_INT 1
3566: DEC
3567: ST_TO_ADDR
3568: LD_EXP 22
3572: PUSH
3573: FOR_TO
3574: IFFALSE 3628
// if IsInUnit ( ru_mech [ i ] ) and ru_mech [ i ] in ru_behemoth_mechanic then
3576: LD_EXP 22
3580: PUSH
3581: LD_VAR 0 1
3585: ARRAY
3586: PPUSH
3587: CALL_OW 310
3591: PUSH
3592: LD_EXP 22
3596: PUSH
3597: LD_VAR 0 1
3601: ARRAY
3602: PUSH
3603: LD_EXP 15
3607: IN
3608: AND
3609: IFFALSE 3626
// ComExitBuilding ( ru_mech [ i ] ) ;
3611: LD_EXP 22
3615: PUSH
3616: LD_VAR 0 1
3620: ARRAY
3621: PPUSH
3622: CALL_OW 122
3626: GO 3573
3628: POP
3629: POP
// if UnitsInside ( ru_fac ) = 0 then
3630: LD_INT 14
3632: PPUSH
3633: CALL_OW 313
3637: PUSH
3638: LD_INT 0
3640: EQUAL
3641: IFFALSE 3708
// begin InitHc_All ;
3643: CALL_OW 584
// for i := 1 to 5 do
3647: LD_ADDR_VAR 0 1
3651: PUSH
3652: DOUBLE
3653: LD_INT 1
3655: DEC
3656: ST_TO_ADDR
3657: LD_INT 5
3659: PUSH
3660: FOR_TO
3661: IFFALSE 3706
// begin uc_side := 3 ;
3663: LD_ADDR_OWVAR 20
3667: PUSH
3668: LD_INT 3
3670: ST_TO_ADDR
// uc_nation := 3 ;
3671: LD_ADDR_OWVAR 21
3675: PUSH
3676: LD_INT 3
3678: ST_TO_ADDR
// PrepareHuman ( false , 3 , 7 ) ;
3679: LD_INT 0
3681: PPUSH
3682: LD_INT 3
3684: PPUSH
3685: LD_INT 7
3687: PPUSH
3688: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_fac ) ;
3692: CALL_OW 44
3696: PPUSH
3697: LD_INT 14
3699: PPUSH
3700: CALL_OW 52
// end ;
3704: GO 3660
3706: POP
3707: POP
// end ; if FilterUnitsInArea ( alt_base , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) > 0 then
3708: LD_INT 12
3710: PPUSH
3711: LD_INT 22
3713: PUSH
3714: LD_INT 1
3716: PUSH
3717: EMPTY
3718: LIST
3719: LIST
3720: PUSH
3721: LD_INT 21
3723: PUSH
3724: LD_INT 3
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: PPUSH
3735: CALL_OW 70
3739: PUSH
3740: LD_INT 0
3742: GREATER
3743: IFFALSE 3803
// BehemothAttack ( GetBehemoth ( 3 ) [ 1 ] , FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_weapon , ru_time_lapser ] ] ) , ru_behemoth_mechanic , 97 , 9 ) else
3745: LD_INT 3
3747: PPUSH
3748: CALL 11332 0 1
3752: PUSH
3753: LD_INT 1
3755: ARRAY
3756: PPUSH
3757: LD_INT 21
3759: PUSH
3760: LD_INT 2
3762: PUSH
3763: EMPTY
3764: LIST
3765: LIST
3766: PUSH
3767: LD_INT 34
3769: PUSH
3770: LD_INT 49
3772: PUSH
3773: EMPTY
3774: LIST
3775: LIST
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: PPUSH
3781: CALL_OW 69
3785: PPUSH
3786: LD_EXP 15
3790: PPUSH
3791: LD_INT 97
3793: PPUSH
3794: LD_INT 9
3796: PPUSH
3797: CALL 10829 0 5
3801: GO 3859
// BehemothAttack ( GetBehemoth ( 3 ) [ 1 ] , FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_weapon , ru_time_lapser ] ] ) , ru_behemoth_mechanic , 153 , 102 ) ;
3803: LD_INT 3
3805: PPUSH
3806: CALL 11332 0 1
3810: PUSH
3811: LD_INT 1
3813: ARRAY
3814: PPUSH
3815: LD_INT 21
3817: PUSH
3818: LD_INT 2
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: PUSH
3825: LD_INT 34
3827: PUSH
3828: LD_INT 49
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: PUSH
3835: EMPTY
3836: LIST
3837: LIST
3838: PPUSH
3839: CALL_OW 69
3843: PPUSH
3844: LD_EXP 15
3848: PPUSH
3849: LD_INT 153
3851: PPUSH
3852: LD_INT 102
3854: PPUSH
3855: CALL 10829 0 5
// end ; if ru_bazz = 0 and GetTech ( tech_bazooka , 3 ) = state_researched then
3859: LD_EXP 24
3863: PUSH
3864: LD_INT 0
3866: EQUAL
3867: PUSH
3868: LD_INT 44
3870: PPUSH
3871: LD_INT 3
3873: PPUSH
3874: CALL_OW 321
3878: PUSH
3879: LD_INT 2
3881: EQUAL
3882: AND
3883: IFFALSE 3894
// ComChangeClassToBazooker ( ru_sold ) ;
3885: LD_EXP 20
3889: PPUSH
3890: CALL 9766 0 1
// if ru_bazz then
3894: LD_EXP 24
3898: IFFALSE 3912
// IntBazooka ( ru_bazz , 1 ) ;
3900: LD_EXP 24
3904: PPUSH
3905: LD_INT 1
3907: PPUSH
3908: CALL 9485 0 2
// if GetResourceVisibility ( 67 , 39 , 3 ) = false and GetTech ( tech_SibDet , 3 ) = state_researched then
3912: LD_INT 67
3914: PPUSH
3915: LD_INT 39
3917: PPUSH
3918: LD_INT 3
3920: PPUSH
3921: CALL_OW 440
3925: PUSH
3926: LD_INT 0
3928: EQUAL
3929: PUSH
3930: LD_INT 20
3932: PPUSH
3933: LD_INT 3
3935: PPUSH
3936: CALL_OW 321
3940: PUSH
3941: LD_INT 2
3943: EQUAL
3944: AND
3945: IFFALSE 3966
// ComFindDeposit ( ru_sci [ 1 ] , 67 , 39 ) ;
3947: LD_EXP 23
3951: PUSH
3952: LD_INT 1
3954: ARRAY
3955: PPUSH
3956: LD_INT 67
3958: PPUSH
3959: LD_INT 39
3961: PPUSH
3962: CALL 9064 0 3
// if GetResourceVisibility ( 89 , 66 , 3 ) = false then
3966: LD_INT 89
3968: PPUSH
3969: LD_INT 66
3971: PPUSH
3972: LD_INT 3
3974: PPUSH
3975: CALL_OW 440
3979: PUSH
3980: LD_INT 0
3982: EQUAL
3983: IFFALSE 4004
// ComFindDeposit ( ru_sci [ 1 ] , 87 , 60 ) ;
3985: LD_EXP 23
3989: PUSH
3990: LD_INT 1
3992: ARRAY
3993: PPUSH
3994: LD_INT 87
3996: PPUSH
3997: LD_INT 60
3999: PPUSH
4000: CALL 9064 0 3
// if GetResourceVisibility ( 104 , 94 , 3 ) = false and GetTech ( tech_SibDet , 3 ) = state_researched then
4004: LD_INT 104
4006: PPUSH
4007: LD_INT 94
4009: PPUSH
4010: LD_INT 3
4012: PPUSH
4013: CALL_OW 440
4017: PUSH
4018: LD_INT 0
4020: EQUAL
4021: PUSH
4022: LD_INT 20
4024: PPUSH
4025: LD_INT 3
4027: PPUSH
4028: CALL_OW 321
4032: PUSH
4033: LD_INT 2
4035: EQUAL
4036: AND
4037: IFFALSE 4058
// ComFindDeposit ( ru_sci [ 1 ] , 104 , 94 ) ;
4039: LD_EXP 23
4043: PUSH
4044: LD_INT 1
4046: ARRAY
4047: PPUSH
4048: LD_INT 104
4050: PPUSH
4051: LD_INT 94
4053: PPUSH
4054: CALL 9064 0 3
// if GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) = 1 and need_buldozer then
4058: LD_INT 3
4060: PPUSH
4061: LD_INT 24
4063: PPUSH
4064: LD_INT 53
4066: PPUSH
4067: CALL 7960 0 3
4071: PUSH
4072: LD_INT 1
4074: EQUAL
4075: PUSH
4076: LD_EXP 18
4080: AND
4081: IFFALSE 4222
// begin need_buldozer := false ;
4083: LD_ADDR_EXP 18
4087: PUSH
4088: LD_INT 0
4090: ST_TO_ADDR
// ComMoveXY ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 67 , 39 ) ;
4091: LD_INT 3
4093: PPUSH
4094: LD_INT 24
4096: PPUSH
4097: LD_INT 53
4099: PPUSH
4100: CALL 7960 0 3
4104: PUSH
4105: LD_INT 1
4107: ARRAY
4108: PPUSH
4109: LD_INT 67
4111: PPUSH
4112: LD_INT 39
4114: PPUSH
4115: CALL_OW 111
// AddComMoveXY ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 71 , 10 ) ;
4119: LD_INT 3
4121: PPUSH
4122: LD_INT 24
4124: PPUSH
4125: LD_INT 53
4127: PPUSH
4128: CALL 7960 0 3
4132: PUSH
4133: LD_INT 1
4135: ARRAY
4136: PPUSH
4137: LD_INT 71
4139: PPUSH
4140: LD_INT 10
4142: PPUSH
4143: CALL_OW 171
// CutTreeInArea ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , cut_area ) ;
4147: LD_INT 3
4149: PPUSH
4150: LD_INT 24
4152: PPUSH
4153: LD_INT 53
4155: PPUSH
4156: CALL 7960 0 3
4160: PUSH
4161: LD_INT 1
4163: ARRAY
4164: PPUSH
4165: LD_INT 15
4167: PPUSH
4168: CALL 5551 0 2
// AddComWait ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 0 0$10 ) ;
4172: LD_INT 3
4174: PPUSH
4175: LD_INT 24
4177: PPUSH
4178: LD_INT 53
4180: PPUSH
4181: CALL 7960 0 3
4185: PUSH
4186: LD_INT 1
4188: ARRAY
4189: PPUSH
4190: LD_INT 350
4192: PPUSH
4193: CALL_OW 202
// AddComRecycle ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , ru_fac ) ;
4197: LD_INT 3
4199: PPUSH
4200: LD_INT 24
4202: PPUSH
4203: LD_INT 53
4205: PPUSH
4206: CALL 7960 0 3
4210: PUSH
4211: LD_INT 1
4213: ARRAY
4214: PPUSH
4215: LD_INT 14
4217: PPUSH
4218: CALL_OW 228
// end ; if GetResourceVisibility ( 67 , 39 , 3 ) and HexInfo ( 67 , 39 ) = 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot and EnemyNearbyBase ( 1 , 79 , 45 ) = false then
4222: LD_INT 67
4224: PPUSH
4225: LD_INT 39
4227: PPUSH
4228: LD_INT 3
4230: PPUSH
4231: CALL_OW 440
4235: PUSH
4236: LD_INT 67
4238: PPUSH
4239: LD_INT 39
4241: PPUSH
4242: CALL_OW 428
4246: PUSH
4247: LD_INT 0
4249: EQUAL
4250: AND
4251: PUSH
4252: LD_INT 79
4254: PPUSH
4255: LD_INT 45
4257: PPUSH
4258: CALL_OW 428
4262: PPUSH
4263: CALL_OW 266
4267: PUSH
4268: LD_INT 0
4270: EQUAL
4271: AND
4272: PUSH
4273: LD_INT 1
4275: PPUSH
4276: LD_INT 79
4278: PPUSH
4279: LD_INT 45
4281: PPUSH
4282: CALL 5451 0 3
4286: PUSH
4287: LD_INT 0
4289: EQUAL
4290: AND
4291: IFFALSE 4394
// begin for i = 1 to ru_eng do
4293: LD_ADDR_VAR 0 1
4297: PUSH
4298: DOUBLE
4299: LD_INT 1
4301: DEC
4302: ST_TO_ADDR
4303: LD_EXP 21
4307: PUSH
4308: FOR_TO
4309: IFFALSE 4392
// if IsInUnit ( ru_eng [ i ] ) then
4311: LD_EXP 21
4315: PUSH
4316: LD_VAR 0 1
4320: ARRAY
4321: PPUSH
4322: CALL_OW 310
4326: IFFALSE 4345
// ComExitBuilding ( ru_eng [ i ] ) else
4328: LD_EXP 21
4332: PUSH
4333: LD_VAR 0 1
4337: ARRAY
4338: PPUSH
4339: CALL_OW 122
4343: GO 4390
// if not HasTask ( ru_eng [ i ] ) then
4345: LD_EXP 21
4349: PUSH
4350: LD_VAR 0 1
4354: ARRAY
4355: PPUSH
4356: CALL_OW 314
4360: NOT
4361: IFFALSE 4390
// ComBuild ( ru_eng [ i ] , b_siberite_mine , 67 , 39 , 3 ) ;
4363: LD_EXP 21
4367: PUSH
4368: LD_VAR 0 1
4372: ARRAY
4373: PPUSH
4374: LD_INT 30
4376: PPUSH
4377: LD_INT 67
4379: PPUSH
4380: LD_INT 39
4382: PPUSH
4383: LD_INT 3
4385: PPUSH
4386: CALL_OW 145
4390: GO 4308
4392: POP
4393: POP
// end ; if EnemyNearbyBase ( 1 , 79 , 45 ) = false then
4394: LD_INT 1
4396: PPUSH
4397: LD_INT 79
4399: PPUSH
4400: LD_INT 45
4402: PPUSH
4403: CALL 5451 0 3
4407: PUSH
4408: LD_INT 0
4410: EQUAL
4411: IFFALSE 4607
// begin if HexInfo ( 79 , 45 ) = 0 then
4413: LD_INT 79
4415: PPUSH
4416: LD_INT 45
4418: PPUSH
4419: CALL_OW 428
4423: PUSH
4424: LD_INT 0
4426: EQUAL
4427: IFFALSE 4449
// ComBuildDepot ( ru_eng , 79 , 45 , 3 ) else
4429: LD_EXP 21
4433: PPUSH
4434: LD_INT 79
4436: PPUSH
4437: LD_INT 45
4439: PPUSH
4440: LD_INT 3
4442: PPUSH
4443: CALL 6975 0 4
4447: GO 4607
// if HexInfo ( 89 , 66 ) = 0 and GetResourceVisibility ( 89 , 66 , 3 ) then
4449: LD_INT 89
4451: PPUSH
4452: LD_INT 66
4454: PPUSH
4455: CALL_OW 428
4459: PUSH
4460: LD_INT 0
4462: EQUAL
4463: PUSH
4464: LD_INT 89
4466: PPUSH
4467: LD_INT 66
4469: PPUSH
4470: LD_INT 3
4472: PPUSH
4473: CALL_OW 440
4477: AND
4478: IFFALSE 4607
// begin SetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , mat_cans , 100 ) ;
4480: LD_INT 79
4482: PPUSH
4483: LD_INT 45
4485: PPUSH
4486: CALL_OW 428
4490: PPUSH
4491: CALL_OW 274
4495: PPUSH
4496: LD_INT 1
4498: PPUSH
4499: LD_INT 100
4501: PPUSH
4502: CALL_OW 277
// for i = 1 to ru_eng do
4506: LD_ADDR_VAR 0 1
4510: PUSH
4511: DOUBLE
4512: LD_INT 1
4514: DEC
4515: ST_TO_ADDR
4516: LD_EXP 21
4520: PUSH
4521: FOR_TO
4522: IFFALSE 4605
// if IsInUnit ( ru_eng [ i ] ) then
4524: LD_EXP 21
4528: PUSH
4529: LD_VAR 0 1
4533: ARRAY
4534: PPUSH
4535: CALL_OW 310
4539: IFFALSE 4558
// ComExitBuilding ( ru_eng [ i ] ) else
4541: LD_EXP 21
4545: PUSH
4546: LD_VAR 0 1
4550: ARRAY
4551: PPUSH
4552: CALL_OW 122
4556: GO 4603
// if not HasTask ( ru_eng [ i ] ) then
4558: LD_EXP 21
4562: PUSH
4563: LD_VAR 0 1
4567: ARRAY
4568: PPUSH
4569: CALL_OW 314
4573: NOT
4574: IFFALSE 4603
// ComBuild ( ru_eng [ i ] , b_oil_mine , 89 , 66 , 3 ) ;
4576: LD_EXP 21
4580: PUSH
4581: LD_VAR 0 1
4585: ARRAY
4586: PPUSH
4587: LD_INT 29
4589: PPUSH
4590: LD_INT 89
4592: PPUSH
4593: LD_INT 66
4595: PPUSH
4596: LD_INT 3
4598: PPUSH
4599: CALL_OW 145
4603: GO 4521
4605: POP
4606: POP
// end ; end ; if GetBuilding ( 3 , b_oil_mine ) = 0 and EnemyNearbyBase ( 1 , 36 , 6 ) = false and Cost ( MyBase ( 3 ) , b_oil_mine ) then
4607: LD_INT 3
4609: PPUSH
4610: LD_INT 29
4612: PPUSH
4613: CALL 6209 0 2
4617: PUSH
4618: LD_INT 0
4620: EQUAL
4621: PUSH
4622: LD_INT 1
4624: PPUSH
4625: LD_INT 36
4627: PPUSH
4628: LD_INT 6
4630: PPUSH
4631: CALL 5451 0 3
4635: PUSH
4636: LD_INT 0
4638: EQUAL
4639: AND
4640: PUSH
4641: LD_INT 3
4643: PPUSH
4644: CALL 6118 0 1
4648: PPUSH
4649: LD_INT 29
4651: PPUSH
4652: CALL 5694 0 2
4656: AND
4657: IFFALSE 4760
// begin for i = 1 to ru_eng do
4659: LD_ADDR_VAR 0 1
4663: PUSH
4664: DOUBLE
4665: LD_INT 1
4667: DEC
4668: ST_TO_ADDR
4669: LD_EXP 21
4673: PUSH
4674: FOR_TO
4675: IFFALSE 4758
// begin if IsInUnit ( ru_eng [ i ] ) then
4677: LD_EXP 21
4681: PUSH
4682: LD_VAR 0 1
4686: ARRAY
4687: PPUSH
4688: CALL_OW 310
4692: IFFALSE 4711
// ComExitBuilding ( ru_eng [ i ] ) else
4694: LD_EXP 21
4698: PUSH
4699: LD_VAR 0 1
4703: ARRAY
4704: PPUSH
4705: CALL_OW 122
4709: GO 4756
// if not HasTask ( ru_eng [ i ] ) then
4711: LD_EXP 21
4715: PUSH
4716: LD_VAR 0 1
4720: ARRAY
4721: PPUSH
4722: CALL_OW 314
4726: NOT
4727: IFFALSE 4756
// begin AddComBuild ( ru_eng [ i ] , b_oil_mine , 33 , 4 , 0 ) ;
4729: LD_EXP 21
4733: PUSH
4734: LD_VAR 0 1
4738: ARRAY
4739: PPUSH
4740: LD_INT 29
4742: PPUSH
4743: LD_INT 33
4745: PPUSH
4746: LD_INT 4
4748: PPUSH
4749: LD_INT 0
4751: PPUSH
4752: CALL_OW 205
// end ; end ;
4756: GO 4674
4758: POP
4759: POP
// end ; if ru_eng and HexInfo ( 79 , 45 ) > 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot then
4760: LD_EXP 21
4764: PUSH
4765: LD_INT 79
4767: PPUSH
4768: LD_INT 45
4770: PPUSH
4771: CALL_OW 428
4775: PUSH
4776: LD_INT 0
4778: GREATER
4779: AND
4780: PUSH
4781: LD_INT 79
4783: PPUSH
4784: LD_INT 45
4786: PPUSH
4787: CALL_OW 428
4791: PPUSH
4792: CALL_OW 266
4796: PUSH
4797: LD_INT 0
4799: EQUAL
4800: AND
4801: IFFALSE 4961
// if GetSide ( HexInfo ( 79 , 45 ) ) = 3 and EnemyNearbyBase ( 1 , 79 , 45 ) = false and GetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , 3 ) >= 10 then
4803: LD_INT 79
4805: PPUSH
4806: LD_INT 45
4808: PPUSH
4809: CALL_OW 428
4813: PPUSH
4814: CALL_OW 255
4818: PUSH
4819: LD_INT 3
4821: EQUAL
4822: PUSH
4823: LD_INT 1
4825: PPUSH
4826: LD_INT 79
4828: PPUSH
4829: LD_INT 45
4831: PPUSH
4832: CALL 5451 0 3
4836: PUSH
4837: LD_INT 0
4839: EQUAL
4840: AND
4841: PUSH
4842: LD_INT 79
4844: PPUSH
4845: LD_INT 45
4847: PPUSH
4848: CALL_OW 428
4852: PPUSH
4853: CALL_OW 274
4857: PPUSH
4858: LD_INT 3
4860: PPUSH
4861: CALL_OW 275
4865: PUSH
4866: LD_INT 10
4868: GREATEREQUAL
4869: AND
4870: IFFALSE 4961
// begin if IsInUnit ( ru_eng [ 1 ] ) then
4872: LD_EXP 21
4876: PUSH
4877: LD_INT 1
4879: ARRAY
4880: PPUSH
4881: CALL_OW 310
4885: IFFALSE 4902
// ComExitBuilding ( ru_eng [ 1 ] ) else
4887: LD_EXP 21
4891: PUSH
4892: LD_INT 1
4894: ARRAY
4895: PPUSH
4896: CALL_OW 122
4900: GO 4961
// if not HasTask ( ru_eng [ 1 ] ) then
4902: LD_EXP 21
4906: PUSH
4907: LD_INT 1
4909: ARRAY
4910: PPUSH
4911: CALL_OW 314
4915: NOT
4916: IFFALSE 4961
// begin ComTransport ( ru_eng [ 1 ] , HexInfo ( 79 , 45 ) , 3 ) ;
4918: LD_EXP 21
4922: PUSH
4923: LD_INT 1
4925: ARRAY
4926: PPUSH
4927: LD_INT 79
4929: PPUSH
4930: LD_INT 45
4932: PPUSH
4933: CALL_OW 428
4937: PPUSH
4938: LD_INT 3
4940: PPUSH
4941: CALL_OW 151
// AddComGive ( ru_eng [ 1 ] , ru_depot ) ;
4945: LD_EXP 21
4949: PUSH
4950: LD_INT 1
4952: ARRAY
4953: PPUSH
4954: LD_INT 2
4956: PPUSH
4957: CALL_OW 221
// end ; end ; if ru_eng > 2 and HexInfo ( 79 , 45 ) > 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot then
4961: LD_EXP 21
4965: PUSH
4966: LD_INT 2
4968: GREATER
4969: PUSH
4970: LD_INT 79
4972: PPUSH
4973: LD_INT 45
4975: PPUSH
4976: CALL_OW 428
4980: PUSH
4981: LD_INT 0
4983: GREATER
4984: AND
4985: PUSH
4986: LD_INT 79
4988: PPUSH
4989: LD_INT 45
4991: PPUSH
4992: CALL_OW 428
4996: PPUSH
4997: CALL_OW 266
5001: PUSH
5002: LD_INT 0
5004: EQUAL
5005: AND
5006: IFFALSE 5166
// if GetSide ( HexInfo ( 79 , 45 ) ) = 3 and EnemyNearbyBase ( 1 , 79 , 45 ) = false and GetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , 1 ) > 20 then
5008: LD_INT 79
5010: PPUSH
5011: LD_INT 45
5013: PPUSH
5014: CALL_OW 428
5018: PPUSH
5019: CALL_OW 255
5023: PUSH
5024: LD_INT 3
5026: EQUAL
5027: PUSH
5028: LD_INT 1
5030: PPUSH
5031: LD_INT 79
5033: PPUSH
5034: LD_INT 45
5036: PPUSH
5037: CALL 5451 0 3
5041: PUSH
5042: LD_INT 0
5044: EQUAL
5045: AND
5046: PUSH
5047: LD_INT 79
5049: PPUSH
5050: LD_INT 45
5052: PPUSH
5053: CALL_OW 428
5057: PPUSH
5058: CALL_OW 274
5062: PPUSH
5063: LD_INT 1
5065: PPUSH
5066: CALL_OW 275
5070: PUSH
5071: LD_INT 20
5073: GREATER
5074: AND
5075: IFFALSE 5166
// begin if IsInUnit ( ru_eng [ 2 ] ) then
5077: LD_EXP 21
5081: PUSH
5082: LD_INT 2
5084: ARRAY
5085: PPUSH
5086: CALL_OW 310
5090: IFFALSE 5107
// ComExitBuilding ( ru_eng [ 2 ] ) else
5092: LD_EXP 21
5096: PUSH
5097: LD_INT 2
5099: ARRAY
5100: PPUSH
5101: CALL_OW 122
5105: GO 5166
// if not HasTask ( ru_eng [ 2 ] ) then
5107: LD_EXP 21
5111: PUSH
5112: LD_INT 2
5114: ARRAY
5115: PPUSH
5116: CALL_OW 314
5120: NOT
5121: IFFALSE 5166
// begin ComTransport ( ru_eng [ 2 ] , HexInfo ( 79 , 45 ) , 1 ) ;
5123: LD_EXP 21
5127: PUSH
5128: LD_INT 2
5130: ARRAY
5131: PPUSH
5132: LD_INT 79
5134: PPUSH
5135: LD_INT 45
5137: PPUSH
5138: CALL_OW 428
5142: PPUSH
5143: LD_INT 1
5145: PPUSH
5146: CALL_OW 151
// AddComGive ( ru_eng [ 2 ] , ru_depot ) ;
5150: LD_EXP 21
5154: PUSH
5155: LD_INT 2
5157: ARRAY
5158: PPUSH
5159: LD_INT 2
5161: PPUSH
5162: CALL_OW 221
// end ; end ; if EnemyNearbyBase ( 1 , 59 , 60 ) = false and EnemyNearbyBase ( 1 , 67 , 76 ) = false and EnemyNearbyBase ( 1 , 79 , 100 ) = false then
5166: LD_INT 1
5168: PPUSH
5169: LD_INT 59
5171: PPUSH
5172: LD_INT 60
5174: PPUSH
5175: CALL 5451 0 3
5179: PUSH
5180: LD_INT 0
5182: EQUAL
5183: PUSH
5184: LD_INT 1
5186: PPUSH
5187: LD_INT 67
5189: PPUSH
5190: LD_INT 76
5192: PPUSH
5193: CALL 5451 0 3
5197: PUSH
5198: LD_INT 0
5200: EQUAL
5201: AND
5202: PUSH
5203: LD_INT 1
5205: PPUSH
5206: LD_INT 79
5208: PPUSH
5209: LD_INT 100
5211: PPUSH
5212: CALL 5451 0 3
5216: PUSH
5217: LD_INT 0
5219: EQUAL
5220: AND
5221: IFFALSE 5233
// CollectCrates ( 3 , west_crates ) ;
5223: LD_INT 3
5225: PPUSH
5226: LD_INT 13
5228: PPUSH
5229: CALL 11376 0 2
// end ;
5233: PPOPN 10
5235: END
// every 4 4$00 + 2 2$00 trigger tick <= 53 53$00 or not helps_arrive do var veh ;
5236: LD_OWVAR 1
5240: PUSH
5241: LD_INT 111300
5243: LESSEQUAL
5244: PUSH
5245: LD_EXP 30
5249: NOT
5250: OR
5251: IFFALSE 5448
5253: GO 5255
5255: DISABLE
5256: LD_INT 0
5258: PPUSH
// begin enable ;
5259: ENABLE
// uc_nation := 3 ;
5260: LD_ADDR_OWVAR 21
5264: PUSH
5265: LD_INT 3
5267: ST_TO_ADDR
// uc_side := 3 ;
5268: LD_ADDR_OWVAR 20
5272: PUSH
5273: LD_INT 3
5275: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
5276: LD_ADDR_OWVAR 37
5280: PUSH
5281: LD_INT 22
5283: ST_TO_ADDR
// vc_engine := engine_siberite ;
5284: LD_ADDR_OWVAR 39
5288: PUSH
5289: LD_INT 3
5291: ST_TO_ADDR
// vc_control := control_computer ;
5292: LD_ADDR_OWVAR 38
5296: PUSH
5297: LD_INT 3
5299: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
5300: LD_ADDR_OWVAR 40
5304: PUSH
5305: LD_INT 51
5307: ST_TO_ADDR
// veh := CreateVehicle ;
5308: LD_ADDR_VAR 0 1
5312: PUSH
5313: CALL_OW 45
5317: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5318: LD_VAR 0 1
5322: PPUSH
5323: LD_INT 4
5325: PPUSH
5326: CALL_OW 233
// PlaceUnitArea ( veh , upper_road_area , false ) ;
5330: LD_VAR 0 1
5334: PPUSH
5335: LD_INT 10
5337: PPUSH
5338: LD_INT 0
5340: PPUSH
5341: CALL_OW 49
// SetCargo ( veh , [ 1 , 2 , 3 , 2 ] [ Rand ( 1 , 4 ) ] , 100 ) ;
5345: LD_VAR 0 1
5349: PPUSH
5350: LD_INT 1
5352: PUSH
5353: LD_INT 2
5355: PUSH
5356: LD_INT 3
5358: PUSH
5359: LD_INT 2
5361: PUSH
5362: EMPTY
5363: LIST
5364: LIST
5365: LIST
5366: LIST
5367: PUSH
5368: LD_INT 1
5370: PPUSH
5371: LD_INT 4
5373: PPUSH
5374: CALL_OW 12
5378: ARRAY
5379: PPUSH
5380: LD_INT 100
5382: PPUSH
5383: CALL_OW 290
// ComGive ( veh , ru_depot ) ;
5387: LD_VAR 0 1
5391: PPUSH
5392: LD_INT 2
5394: PPUSH
5395: CALL_OW 161
// AddComMoveToArea ( veh , upper_road_area ) ;
5399: LD_VAR 0 1
5403: PPUSH
5404: LD_INT 10
5406: PPUSH
5407: CALL_OW 173
// Wait ( 0 0$10 ) ;
5411: LD_INT 350
5413: PPUSH
5414: CALL_OW 67
// repeat Wait ( 0 0$01 ) ;
5418: LD_INT 35
5420: PPUSH
5421: CALL_OW 67
// until IsInArea ( veh , upper_road_area ) ;
5425: LD_VAR 0 1
5429: PPUSH
5430: LD_INT 10
5432: PPUSH
5433: CALL_OW 308
5437: IFFALSE 5418
// RemoveUnit ( veh ) ;
5439: LD_VAR 0 1
5443: PPUSH
5444: CALL_OW 64
// end ; end_of_file
5448: PPOPN 1
5450: END
// export function EnemyNearbyBase ( side , x , y ) ; var i ; begin
5451: LD_INT 0
5453: PPUSH
5454: PPUSH
// i := NearestUnitToXY ( FilterAllUnits ( [ f_side , side ] ) , x , y ) ;
5455: LD_ADDR_VAR 0 5
5459: PUSH
5460: LD_INT 22
5462: PUSH
5463: LD_VAR 0 1
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: PPUSH
5472: CALL_OW 69
5476: PPUSH
5477: LD_VAR 0 2
5481: PPUSH
5482: LD_VAR 0 3
5486: PPUSH
5487: CALL_OW 73
5491: ST_TO_ADDR
// result := GetDistUnitXY ( i , x , y ) < 15 or FilterUnitsInArea ( ru_base_area , [ f_side , side ] ) > 0 ;
5492: LD_ADDR_VAR 0 4
5496: PUSH
5497: LD_VAR 0 5
5501: PPUSH
5502: LD_VAR 0 2
5506: PPUSH
5507: LD_VAR 0 3
5511: PPUSH
5512: CALL_OW 297
5516: PUSH
5517: LD_INT 15
5519: LESS
5520: PUSH
5521: LD_INT 2
5523: PPUSH
5524: LD_INT 22
5526: PUSH
5527: LD_VAR 0 1
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: PPUSH
5536: CALL_OW 70
5540: PUSH
5541: LD_INT 0
5543: GREATER
5544: OR
5545: ST_TO_ADDR
// end ;
5546: LD_VAR 0 4
5550: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
5551: LD_INT 0
5553: PPUSH
5554: PPUSH
// area = ListEnvironmentArea ( area ) ;
5555: LD_ADDR_VAR 0 2
5559: PUSH
5560: LD_VAR 0 2
5564: PPUSH
5565: CALL_OW 353
5569: ST_TO_ADDR
// if bulldozer > 0 then
5570: LD_VAR 0 1
5574: PUSH
5575: LD_INT 0
5577: GREATER
5578: IFFALSE 5689
// for i = 1 to area do
5580: LD_ADDR_VAR 0 4
5584: PUSH
5585: DOUBLE
5586: LD_INT 1
5588: DEC
5589: ST_TO_ADDR
5590: LD_VAR 0 2
5594: PUSH
5595: FOR_TO
5596: IFFALSE 5687
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
5598: LD_VAR 0 2
5602: PUSH
5603: LD_VAR 0 4
5607: ARRAY
5608: PUSH
5609: LD_INT 1
5611: ARRAY
5612: PPUSH
5613: LD_VAR 0 2
5617: PUSH
5618: LD_VAR 0 4
5622: ARRAY
5623: PUSH
5624: LD_INT 2
5626: ARRAY
5627: PPUSH
5628: CALL_OW 351
5632: IFFALSE 5685
// if not HasTask ( bulldozer ) then
5634: LD_VAR 0 1
5638: PPUSH
5639: CALL_OW 314
5643: NOT
5644: IFFALSE 5685
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
5646: LD_VAR 0 1
5650: PPUSH
5651: LD_VAR 0 2
5655: PUSH
5656: LD_VAR 0 4
5660: ARRAY
5661: PUSH
5662: LD_INT 1
5664: ARRAY
5665: PPUSH
5666: LD_VAR 0 2
5670: PUSH
5671: LD_VAR 0 4
5675: ARRAY
5676: PUSH
5677: LD_INT 2
5679: ARRAY
5680: PPUSH
5681: CALL_OW 171
5685: GO 5595
5687: POP
5688: POP
// end ;
5689: LD_VAR 0 3
5693: RET
// export function Cost ( bdepot , btype ) ; var pom , cost ; begin
5694: LD_INT 0
5696: PPUSH
5697: PPUSH
5698: PPUSH
// pom := GetBase ( bdepot ) ;
5699: LD_ADDR_VAR 0 4
5703: PUSH
5704: LD_VAR 0 1
5708: PPUSH
5709: CALL_OW 274
5713: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
5714: LD_ADDR_VAR 0 5
5718: PUSH
5719: LD_VAR 0 2
5723: PPUSH
5724: LD_VAR 0 1
5728: PPUSH
5729: CALL_OW 248
5733: PPUSH
5734: CALL_OW 450
5738: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
5739: LD_VAR 0 4
5743: PPUSH
5744: LD_INT 1
5746: PPUSH
5747: CALL_OW 275
5751: PUSH
5752: LD_VAR 0 5
5756: PUSH
5757: LD_INT 1
5759: ARRAY
5760: GREATEREQUAL
5761: PUSH
5762: LD_VAR 0 4
5766: PPUSH
5767: LD_INT 3
5769: PPUSH
5770: CALL_OW 275
5774: PUSH
5775: LD_VAR 0 5
5779: PUSH
5780: LD_INT 3
5782: ARRAY
5783: GREATEREQUAL
5784: AND
5785: IFFALSE 5797
// result := true else
5787: LD_ADDR_VAR 0 3
5791: PUSH
5792: LD_INT 1
5794: ST_TO_ADDR
5795: GO 5805
// result := false ;
5797: LD_ADDR_VAR 0 3
5801: PUSH
5802: LD_INT 0
5804: ST_TO_ADDR
// end ;
5805: LD_VAR 0 3
5809: RET
// export function GetBaseSource ( bdepot ) ; var pom , sor ; begin
5810: LD_INT 0
5812: PPUSH
5813: PPUSH
5814: PPUSH
// pom := GetBase ( bdepot ) ;
5815: LD_ADDR_VAR 0 3
5819: PUSH
5820: LD_VAR 0 1
5824: PPUSH
5825: CALL_OW 274
5829: ST_TO_ADDR
// sor := [ ] ;
5830: LD_ADDR_VAR 0 4
5834: PUSH
5835: EMPTY
5836: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_cans ) ;
5837: LD_ADDR_VAR 0 4
5841: PUSH
5842: LD_VAR 0 4
5846: PUSH
5847: LD_VAR 0 3
5851: PPUSH
5852: LD_INT 1
5854: PPUSH
5855: CALL_OW 275
5859: ADD
5860: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_oil ) ;
5861: LD_ADDR_VAR 0 4
5865: PUSH
5866: LD_VAR 0 4
5870: PUSH
5871: LD_VAR 0 3
5875: PPUSH
5876: LD_INT 2
5878: PPUSH
5879: CALL_OW 275
5883: ADD
5884: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_siberit ) ;
5885: LD_ADDR_VAR 0 4
5889: PUSH
5890: LD_VAR 0 4
5894: PUSH
5895: LD_VAR 0 3
5899: PPUSH
5900: LD_INT 3
5902: PPUSH
5903: CALL_OW 275
5907: ADD
5908: ST_TO_ADDR
// result := sor ;
5909: LD_ADDR_VAR 0 2
5913: PUSH
5914: LD_VAR 0 4
5918: ST_TO_ADDR
// end ;
5919: LD_VAR 0 2
5923: RET
// export function Hex ( x , y ) ; begin
5924: LD_INT 0
5926: PPUSH
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
5927: LD_VAR 0 1
5931: PPUSH
5932: LD_VAR 0 2
5936: PPUSH
5937: CALL_OW 488
5941: PUSH
5942: LD_VAR 0 1
5946: PPUSH
5947: LD_VAR 0 2
5951: PPUSH
5952: CALL_OW 428
5956: PUSH
5957: LD_INT 0
5959: EQUAL
5960: AND
5961: IFFALSE 5973
// result := true else
5963: LD_ADDR_VAR 0 3
5967: PUSH
5968: LD_INT 1
5970: ST_TO_ADDR
5971: GO 5981
// result := false ;
5973: LD_ADDR_VAR 0 3
5977: PUSH
5978: LD_INT 0
5980: ST_TO_ADDR
// end ;
5981: LD_VAR 0 3
5985: RET
// export function NeedBuilding ( side , btype ) ; begin
5986: LD_INT 0
5988: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] , [ f_not , [ f_constructed ] ] ] ) = 0 then
5989: LD_INT 22
5991: PUSH
5992: LD_VAR 0 1
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: PUSH
6001: LD_INT 30
6003: PUSH
6004: LD_VAR 0 2
6008: PUSH
6009: EMPTY
6010: LIST
6011: LIST
6012: PUSH
6013: LD_INT 3
6015: PUSH
6016: LD_INT 57
6018: PUSH
6019: EMPTY
6020: LIST
6021: PUSH
6022: EMPTY
6023: LIST
6024: LIST
6025: PUSH
6026: EMPTY
6027: LIST
6028: LIST
6029: LIST
6030: PPUSH
6031: CALL_OW 69
6035: PUSH
6036: LD_INT 0
6038: EQUAL
6039: IFFALSE 6051
// result := true else
6041: LD_ADDR_VAR 0 3
6045: PUSH
6046: LD_INT 1
6048: ST_TO_ADDR
6049: GO 6059
// result := false ;
6051: LD_ADDR_VAR 0 3
6055: PUSH
6056: LD_INT 0
6058: ST_TO_ADDR
// end ;
6059: LD_VAR 0 3
6063: RET
// export function NeedBase ( side ) ; begin
6064: LD_INT 0
6066: PPUSH
// if NeedBuilding ( side , b_depot ) and NeedBuilding ( side , b_warehouse ) then
6067: LD_VAR 0 1
6071: PPUSH
6072: LD_INT 0
6074: PPUSH
6075: CALL 5986 0 2
6079: PUSH
6080: LD_VAR 0 1
6084: PPUSH
6085: LD_INT 1
6087: PPUSH
6088: CALL 5986 0 2
6092: AND
6093: IFFALSE 6105
// result := true else
6095: LD_ADDR_VAR 0 2
6099: PUSH
6100: LD_INT 1
6102: ST_TO_ADDR
6103: GO 6113
// result := false ;
6105: LD_ADDR_VAR 0 2
6109: PUSH
6110: LD_INT 0
6112: ST_TO_ADDR
// end ;
6113: LD_VAR 0 2
6117: RET
// export function MyBase ( side ) ; begin
6118: LD_INT 0
6120: PPUSH
// if not NeedBase ( side ) then
6121: LD_VAR 0 1
6125: PPUSH
6126: CALL 6064 0 1
6130: NOT
6131: IFFALSE 6196
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ] ) [ 1 ] else
6133: LD_ADDR_VAR 0 2
6137: PUSH
6138: LD_INT 22
6140: PUSH
6141: LD_VAR 0 1
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PUSH
6150: LD_INT 2
6152: PUSH
6153: LD_INT 30
6155: PUSH
6156: LD_INT 0
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: LD_INT 30
6165: PUSH
6166: LD_INT 1
6168: PUSH
6169: EMPTY
6170: LIST
6171: LIST
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: LIST
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: EMPTY
6183: LIST
6184: PPUSH
6185: CALL_OW 69
6189: PUSH
6190: LD_INT 1
6192: ARRAY
6193: ST_TO_ADDR
6194: GO 6204
// result := false ;
6196: LD_ADDR_VAR 0 2
6200: PUSH
6201: LD_INT 0
6203: ST_TO_ADDR
// end ;
6204: LD_VAR 0 2
6208: RET
// export function GetBuilding ( side , btype ) ; begin
6209: LD_INT 0
6211: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) > 0 then
6212: LD_INT 22
6214: PUSH
6215: LD_VAR 0 1
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: LD_INT 30
6226: PUSH
6227: LD_VAR 0 2
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: PPUSH
6240: CALL_OW 69
6244: PUSH
6245: LD_INT 0
6247: GREATER
6248: IFFALSE 6290
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) else
6250: LD_ADDR_VAR 0 3
6254: PUSH
6255: LD_INT 22
6257: PUSH
6258: LD_VAR 0 1
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PUSH
6267: LD_INT 30
6269: PUSH
6270: LD_VAR 0 2
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PPUSH
6283: CALL_OW 69
6287: ST_TO_ADDR
6288: GO 6298
// result := false ;
6290: LD_ADDR_VAR 0 3
6294: PUSH
6295: LD_INT 0
6297: ST_TO_ADDR
// end ;
6298: LD_VAR 0 3
6302: RET
// export function GetCrates ( side ) ; begin
6303: LD_INT 0
6305: PPUSH
// result := 0 ;
6306: LD_ADDR_VAR 0 2
6310: PUSH
6311: LD_INT 0
6313: ST_TO_ADDR
// if MyBase ( side ) then
6314: LD_VAR 0 1
6318: PPUSH
6319: CALL 6118 0 1
6323: IFFALSE 6353
// result := GetResourceType ( GetBase ( MyBase ( side ) ) , mat_cans ) ;
6325: LD_ADDR_VAR 0 2
6329: PUSH
6330: LD_VAR 0 1
6334: PPUSH
6335: CALL 6118 0 1
6339: PPUSH
6340: CALL_OW 274
6344: PPUSH
6345: LD_INT 1
6347: PPUSH
6348: CALL_OW 275
6352: ST_TO_ADDR
// end ;
6353: LD_VAR 0 2
6357: RET
// export function GetLabs ( side ) ; begin
6358: LD_INT 0
6360: PPUSH
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] ] ] ] ) ;
6361: LD_ADDR_VAR 0 2
6365: PUSH
6366: LD_INT 22
6368: PUSH
6369: LD_VAR 0 1
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: PUSH
6378: LD_INT 2
6380: PUSH
6381: LD_INT 30
6383: PUSH
6384: LD_INT 6
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: PUSH
6391: LD_INT 30
6393: PUSH
6394: LD_INT 8
6396: PUSH
6397: EMPTY
6398: LIST
6399: LIST
6400: PUSH
6401: LD_INT 30
6403: PUSH
6404: LD_INT 7
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: PUSH
6417: EMPTY
6418: LIST
6419: LIST
6420: PUSH
6421: EMPTY
6422: LIST
6423: PPUSH
6424: CALL_OW 69
6428: ST_TO_ADDR
// end ;
6429: LD_VAR 0 2
6433: RET
// export function GetLabKinds ( lab ) ; var kind1 , kind2 ; begin
6434: LD_INT 0
6436: PPUSH
6437: PPUSH
6438: PPUSH
// kind1 := GetLabKind ( lab , 1 ) ;
6439: LD_ADDR_VAR 0 3
6443: PUSH
6444: LD_VAR 0 1
6448: PPUSH
6449: LD_INT 1
6451: PPUSH
6452: CALL_OW 268
6456: ST_TO_ADDR
// kind2 := GetLabKind ( lab , 2 ) ;
6457: LD_ADDR_VAR 0 4
6461: PUSH
6462: LD_VAR 0 1
6466: PPUSH
6467: LD_INT 2
6469: PPUSH
6470: CALL_OW 268
6474: ST_TO_ADDR
// result := [ kind1 , kind2 ] ;
6475: LD_ADDR_VAR 0 2
6479: PUSH
6480: LD_VAR 0 3
6484: PUSH
6485: LD_VAR 0 4
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: ST_TO_ADDR
// end ;
6494: LD_VAR 0 2
6498: RET
// export function CheckTechList ( side , tlist ) ; var i ; begin
6499: LD_INT 0
6501: PPUSH
6502: PPUSH
// result := false ;
6503: LD_ADDR_VAR 0 3
6507: PUSH
6508: LD_INT 0
6510: ST_TO_ADDR
// for i = 1 to tlist do
6511: LD_ADDR_VAR 0 4
6515: PUSH
6516: DOUBLE
6517: LD_INT 1
6519: DEC
6520: ST_TO_ADDR
6521: LD_VAR 0 2
6525: PUSH
6526: FOR_TO
6527: IFFALSE 6567
// if GetTech ( tlist [ i ] , side ) <> state_researched then
6529: LD_VAR 0 2
6533: PUSH
6534: LD_VAR 0 4
6538: ARRAY
6539: PPUSH
6540: LD_VAR 0 1
6544: PPUSH
6545: CALL_OW 321
6549: PUSH
6550: LD_INT 2
6552: NONEQUAL
6553: IFFALSE 6565
// begin result := true ;
6555: LD_ADDR_VAR 0 3
6559: PUSH
6560: LD_INT 1
6562: ST_TO_ADDR
// break ;
6563: GO 6567
// end ;
6565: GO 6526
6567: POP
6568: POP
// end ;
6569: LD_VAR 0 3
6573: RET
// export function ResearchTechList ( side , tlist ) ; var i , lab , pom , tmp , list , mylab , basic_tech ; begin
6574: LD_INT 0
6576: PPUSH
6577: PPUSH
6578: PPUSH
6579: PPUSH
6580: PPUSH
6581: PPUSH
6582: PPUSH
6583: PPUSH
// lab := GetLabs ( side ) ;
6584: LD_ADDR_VAR 0 5
6588: PUSH
6589: LD_VAR 0 1
6593: PPUSH
6594: CALL 6358 0 1
6598: ST_TO_ADDR
// tmp := 0 ;
6599: LD_ADDR_VAR 0 7
6603: PUSH
6604: LD_INT 0
6606: ST_TO_ADDR
// list := [ ] ;
6607: LD_ADDR_VAR 0 8
6611: PUSH
6612: EMPTY
6613: ST_TO_ADDR
// basic_tech := [ 35 , 45 , 46 , 47 , 1 , 2 , 48 , 49 , 50 , 20 ] ;
6614: LD_ADDR_VAR 0 10
6618: PUSH
6619: LD_INT 35
6621: PUSH
6622: LD_INT 45
6624: PUSH
6625: LD_INT 46
6627: PUSH
6628: LD_INT 47
6630: PUSH
6631: LD_INT 1
6633: PUSH
6634: LD_INT 2
6636: PUSH
6637: LD_INT 48
6639: PUSH
6640: LD_INT 49
6642: PUSH
6643: LD_INT 50
6645: PUSH
6646: LD_INT 20
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: ST_TO_ADDR
// for i = 1 to tlist do
6661: LD_ADDR_VAR 0 4
6665: PUSH
6666: DOUBLE
6667: LD_INT 1
6669: DEC
6670: ST_TO_ADDR
6671: LD_VAR 0 2
6675: PUSH
6676: FOR_TO
6677: IFFALSE 6729
// if GetTech ( tlist [ i ] , side ) <> state_researched then
6679: LD_VAR 0 2
6683: PUSH
6684: LD_VAR 0 4
6688: ARRAY
6689: PPUSH
6690: LD_VAR 0 1
6694: PPUSH
6695: CALL_OW 321
6699: PUSH
6700: LD_INT 2
6702: NONEQUAL
6703: IFFALSE 6727
// list := list ^ tlist [ i ] ;
6705: LD_ADDR_VAR 0 8
6709: PUSH
6710: LD_VAR 0 8
6714: PUSH
6715: LD_VAR 0 2
6719: PUSH
6720: LD_VAR 0 4
6724: ARRAY
6725: ADD
6726: ST_TO_ADDR
6727: GO 6676
6729: POP
6730: POP
// if list then
6731: LD_VAR 0 8
6735: IFFALSE 6900
// begin for i = 1 to lab do
6737: LD_ADDR_VAR 0 4
6741: PUSH
6742: DOUBLE
6743: LD_INT 1
6745: DEC
6746: ST_TO_ADDR
6747: LD_VAR 0 5
6751: PUSH
6752: FOR_TO
6753: IFFALSE 6823
// if ( list [ 1 ] in basic_tech ) or ( GetTechLab ( list [ 1 ] ) in GetLabKinds ( lab [ i ] ) ) then
6755: LD_VAR 0 8
6759: PUSH
6760: LD_INT 1
6762: ARRAY
6763: PUSH
6764: LD_VAR 0 10
6768: IN
6769: PUSH
6770: LD_VAR 0 8
6774: PUSH
6775: LD_INT 1
6777: ARRAY
6778: PPUSH
6779: CALL_OW 481
6783: PUSH
6784: LD_VAR 0 5
6788: PUSH
6789: LD_VAR 0 4
6793: ARRAY
6794: PPUSH
6795: CALL 6434 0 1
6799: IN
6800: OR
6801: IFFALSE 6821
// begin mylab := lab [ i ] ;
6803: LD_ADDR_VAR 0 9
6807: PUSH
6808: LD_VAR 0 5
6812: PUSH
6813: LD_VAR 0 4
6817: ARRAY
6818: ST_TO_ADDR
// break ;
6819: GO 6823
// end ;
6821: GO 6752
6823: POP
6824: POP
// if mylab then
6825: LD_VAR 0 9
6829: IFFALSE 6890
// begin if BuildingStatus ( mylab ) = bs_idle then
6831: LD_VAR 0 9
6835: PPUSH
6836: CALL_OW 461
6840: PUSH
6841: LD_INT 2
6843: EQUAL
6844: IFFALSE 6888
// for i = 1 to list do
6846: LD_ADDR_VAR 0 4
6850: PUSH
6851: DOUBLE
6852: LD_INT 1
6854: DEC
6855: ST_TO_ADDR
6856: LD_VAR 0 8
6860: PUSH
6861: FOR_TO
6862: IFFALSE 6886
// AddComResearch ( mylab , list [ i ] ) ;
6864: LD_VAR 0 9
6868: PPUSH
6869: LD_VAR 0 8
6873: PUSH
6874: LD_VAR 0 4
6878: ARRAY
6879: PPUSH
6880: CALL_OW 184
6884: GO 6861
6886: POP
6887: POP
// end else
6888: GO 6898
// result := false ;
6890: LD_ADDR_VAR 0 3
6894: PUSH
6895: LD_INT 0
6897: ST_TO_ADDR
// end else
6898: GO 6908
// result := false ;
6900: LD_ADDR_VAR 0 3
6904: PUSH
6905: LD_INT 0
6907: ST_TO_ADDR
// end ;
6908: LD_VAR 0 3
6912: RET
// export function GetTowers ( side ) ; begin
6913: LD_INT 0
6915: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
6916: LD_ADDR_VAR 0 2
6920: PUSH
6921: LD_INT 22
6923: PUSH
6924: LD_VAR 0 1
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PUSH
6933: LD_INT 2
6935: PUSH
6936: LD_INT 30
6938: PUSH
6939: LD_INT 32
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: PUSH
6946: LD_INT 30
6948: PUSH
6949: LD_INT 33
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: LIST
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PPUSH
6965: CALL_OW 69
6969: ST_TO_ADDR
// end ;
6970: LD_VAR 0 2
6974: RET
// export function ComBuildDepot ( plist , x , y , d ) ; var i ; begin
6975: LD_INT 0
6977: PPUSH
6978: PPUSH
// if Hex ( x , y ) then
6979: LD_VAR 0 2
6983: PPUSH
6984: LD_VAR 0 3
6988: PPUSH
6989: CALL 5924 0 2
6993: IFFALSE 7068
// for i = 1 to plist do
6995: LD_ADDR_VAR 0 6
6999: PUSH
7000: DOUBLE
7001: LD_INT 1
7003: DEC
7004: ST_TO_ADDR
7005: LD_VAR 0 1
7009: PUSH
7010: FOR_TO
7011: IFFALSE 7066
// if not HasTask ( plist [ i ] ) then
7013: LD_VAR 0 1
7017: PUSH
7018: LD_VAR 0 6
7022: ARRAY
7023: PPUSH
7024: CALL_OW 314
7028: NOT
7029: IFFALSE 7064
// ComBuild ( plist [ i ] , b_depot , x , y , d ) ;
7031: LD_VAR 0 1
7035: PUSH
7036: LD_VAR 0 6
7040: ARRAY
7041: PPUSH
7042: LD_INT 0
7044: PPUSH
7045: LD_VAR 0 2
7049: PPUSH
7050: LD_VAR 0 3
7054: PPUSH
7055: LD_VAR 0 4
7059: PPUSH
7060: CALL_OW 145
7064: GO 7010
7066: POP
7067: POP
// end ;
7068: LD_VAR 0 5
7072: RET
// export function ComBuildWarehouse ( plist , bident ) ; var i ; begin
7073: LD_INT 0
7075: PPUSH
7076: PPUSH
// if GetBType ( bident ) = b_depot and Cost ( bident , b_warehouse ) and not BuildingsInProgress ( GetSide ( plist [ 1 ] ) ) then
7077: LD_VAR 0 2
7081: PPUSH
7082: CALL_OW 266
7086: PUSH
7087: LD_INT 0
7089: EQUAL
7090: PUSH
7091: LD_VAR 0 2
7095: PPUSH
7096: LD_INT 1
7098: PPUSH
7099: CALL 5694 0 2
7103: AND
7104: PUSH
7105: LD_VAR 0 1
7109: PUSH
7110: LD_INT 1
7112: ARRAY
7113: PPUSH
7114: CALL_OW 255
7118: PPUSH
7119: CALL_OW 345
7123: NOT
7124: AND
7125: IFFALSE 7221
// begin ComUpgrade ( bident ) ;
7127: LD_VAR 0 2
7131: PPUSH
7132: CALL_OW 146
// for i = 1 to plist do
7136: LD_ADDR_VAR 0 4
7140: PUSH
7141: DOUBLE
7142: LD_INT 1
7144: DEC
7145: ST_TO_ADDR
7146: LD_VAR 0 1
7150: PUSH
7151: FOR_TO
7152: IFFALSE 7209
// if not HasTask ( plist [ i ] ) then
7154: LD_VAR 0 1
7158: PUSH
7159: LD_VAR 0 4
7163: ARRAY
7164: PPUSH
7165: CALL_OW 314
7169: NOT
7170: IFFALSE 7207
// ComMoveXY ( plist [ i ] , GetX ( bident ) , GetY ( bident ) ) ;
7172: LD_VAR 0 1
7176: PUSH
7177: LD_VAR 0 4
7181: ARRAY
7182: PPUSH
7183: LD_VAR 0 2
7187: PPUSH
7188: CALL_OW 250
7192: PPUSH
7193: LD_VAR 0 2
7197: PPUSH
7198: CALL_OW 251
7202: PPUSH
7203: CALL_OW 111
7207: GO 7151
7209: POP
7210: POP
// result := true ;
7211: LD_ADDR_VAR 0 3
7215: PUSH
7216: LD_INT 1
7218: ST_TO_ADDR
// end else
7219: GO 7229
// result := false ;
7221: LD_ADDR_VAR 0 3
7225: PUSH
7226: LD_INT 0
7228: ST_TO_ADDR
// end ;
7229: LD_VAR 0 3
7233: RET
// export function ComBuildLab ( plist , x , y , d ) ; var i ; begin
7234: LD_INT 0
7236: PPUSH
7237: PPUSH
// if GetCrates ( GetSide ( plist [ 1 ] ) ) >= 20 and Hex ( x , y ) then
7238: LD_VAR 0 1
7242: PUSH
7243: LD_INT 1
7245: ARRAY
7246: PPUSH
7247: CALL_OW 255
7251: PPUSH
7252: CALL 6303 0 1
7256: PUSH
7257: LD_INT 20
7259: GREATEREQUAL
7260: PUSH
7261: LD_VAR 0 2
7265: PPUSH
7266: LD_VAR 0 3
7270: PPUSH
7271: CALL 5924 0 2
7275: AND
7276: IFFALSE 7361
// begin for i = 1 to plist do
7278: LD_ADDR_VAR 0 6
7282: PUSH
7283: DOUBLE
7284: LD_INT 1
7286: DEC
7287: ST_TO_ADDR
7288: LD_VAR 0 1
7292: PUSH
7293: FOR_TO
7294: IFFALSE 7349
// if not HasTask ( plist [ i ] ) then
7296: LD_VAR 0 1
7300: PUSH
7301: LD_VAR 0 6
7305: ARRAY
7306: PPUSH
7307: CALL_OW 314
7311: NOT
7312: IFFALSE 7347
// ComBuild ( plist [ i ] , b_lab , x , y , d ) ;
7314: LD_VAR 0 1
7318: PUSH
7319: LD_VAR 0 6
7323: ARRAY
7324: PPUSH
7325: LD_INT 6
7327: PPUSH
7328: LD_VAR 0 2
7332: PPUSH
7333: LD_VAR 0 3
7337: PPUSH
7338: LD_VAR 0 4
7342: PPUSH
7343: CALL_OW 145
7347: GO 7293
7349: POP
7350: POP
// result := true ;
7351: LD_ADDR_VAR 0 5
7355: PUSH
7356: LD_INT 1
7358: ST_TO_ADDR
// end else
7359: GO 7369
// result := false ;
7361: LD_ADDR_VAR 0 5
7365: PUSH
7366: LD_INT 0
7368: ST_TO_ADDR
// end ;
7369: LD_VAR 0 5
7373: RET
// export function ComBuildLabKind ( lab , bkind1 , bkind2 ) ; begin
7374: LD_INT 0
7376: PPUSH
// if GetLabKind ( lab , 1 ) = b_lab_basic and GetLabKind ( lab , 2 ) = b_lab_basic then
7377: LD_VAR 0 1
7381: PPUSH
7382: LD_INT 1
7384: PPUSH
7385: CALL_OW 268
7389: PUSH
7390: LD_INT 9
7392: EQUAL
7393: PUSH
7394: LD_VAR 0 1
7398: PPUSH
7399: LD_INT 2
7401: PPUSH
7402: CALL_OW 268
7406: PUSH
7407: LD_INT 9
7409: EQUAL
7410: AND
7411: IFFALSE 7508
// begin if Cost ( lab , bkind1 ) and Cost ( lab , bkind2 ) and BuildingStatus ( lab ) = bs_idle then
7413: LD_VAR 0 1
7417: PPUSH
7418: LD_VAR 0 2
7422: PPUSH
7423: CALL 5694 0 2
7427: PUSH
7428: LD_VAR 0 1
7432: PPUSH
7433: LD_VAR 0 3
7437: PPUSH
7438: CALL 5694 0 2
7442: AND
7443: PUSH
7444: LD_VAR 0 1
7448: PPUSH
7449: CALL_OW 461
7453: PUSH
7454: LD_INT 2
7456: EQUAL
7457: AND
7458: IFFALSE 7498
// begin ComUpgradeLab ( lab , bkind1 ) ;
7460: LD_VAR 0 1
7464: PPUSH
7465: LD_VAR 0 2
7469: PPUSH
7470: CALL_OW 147
// AddComUpgradeLab ( lab , bkind2 ) ;
7474: LD_VAR 0 1
7478: PPUSH
7479: LD_VAR 0 3
7483: PPUSH
7484: CALL_OW 207
// result := true ;
7488: LD_ADDR_VAR 0 4
7492: PUSH
7493: LD_INT 1
7495: ST_TO_ADDR
// end else
7496: GO 7506
// result := false ;
7498: LD_ADDR_VAR 0 4
7502: PUSH
7503: LD_INT 0
7505: ST_TO_ADDR
// end else
7506: GO 7516
// result := false ;
7508: LD_ADDR_VAR 0 4
7512: PUSH
7513: LD_INT 0
7515: ST_TO_ADDR
// end ;
7516: LD_VAR 0 4
7520: RET
// export function CheckTowersStatus ( plist , tlist ) ; var i , tmp , p , c ; begin
7521: LD_INT 0
7523: PPUSH
7524: PPUSH
7525: PPUSH
7526: PPUSH
7527: PPUSH
// p := 1 ;
7528: LD_ADDR_VAR 0 6
7532: PUSH
7533: LD_INT 1
7535: ST_TO_ADDR
// for i = 1 to ( tlist / 4 ) do
7536: LD_ADDR_VAR 0 4
7540: PUSH
7541: DOUBLE
7542: LD_INT 1
7544: DEC
7545: ST_TO_ADDR
7546: LD_VAR 0 2
7550: PUSH
7551: LD_INT 4
7553: DIVREAL
7554: PUSH
7555: FOR_TO
7556: IFFALSE 7805
// begin if HexInfo ( tlist [ p + 1 ] , tlist [ p + 2 ] ) = 0 and Hex ( tlist [ p + 1 ] , tlist [ p + 2 ] ) and GetCrates ( GetSide ( plist [ 1 ] ) ) >= 20 then
7558: LD_VAR 0 2
7562: PUSH
7563: LD_VAR 0 6
7567: PUSH
7568: LD_INT 1
7570: PLUS
7571: ARRAY
7572: PPUSH
7573: LD_VAR 0 2
7577: PUSH
7578: LD_VAR 0 6
7582: PUSH
7583: LD_INT 2
7585: PLUS
7586: ARRAY
7587: PPUSH
7588: CALL_OW 428
7592: PUSH
7593: LD_INT 0
7595: EQUAL
7596: PUSH
7597: LD_VAR 0 2
7601: PUSH
7602: LD_VAR 0 6
7606: PUSH
7607: LD_INT 1
7609: PLUS
7610: ARRAY
7611: PPUSH
7612: LD_VAR 0 2
7616: PUSH
7617: LD_VAR 0 6
7621: PUSH
7622: LD_INT 2
7624: PLUS
7625: ARRAY
7626: PPUSH
7627: CALL 5924 0 2
7631: AND
7632: PUSH
7633: LD_VAR 0 1
7637: PUSH
7638: LD_INT 1
7640: ARRAY
7641: PPUSH
7642: CALL_OW 255
7646: PPUSH
7647: CALL 6303 0 1
7651: PUSH
7652: LD_INT 20
7654: GREATEREQUAL
7655: AND
7656: IFFALSE 7773
// begin for c = 1 to plist do
7658: LD_ADDR_VAR 0 7
7662: PUSH
7663: DOUBLE
7664: LD_INT 1
7666: DEC
7667: ST_TO_ADDR
7668: LD_VAR 0 1
7672: PUSH
7673: FOR_TO
7674: IFFALSE 7767
// if not HasTask ( plist [ c ] ) then
7676: LD_VAR 0 1
7680: PUSH
7681: LD_VAR 0 7
7685: ARRAY
7686: PPUSH
7687: CALL_OW 314
7691: NOT
7692: IFFALSE 7765
// ComBuild ( plist [ c ] , tlist [ p ] , tlist [ p + 1 ] , tlist [ p + 2 ] , tlist [ p + 3 ] ) ;
7694: LD_VAR 0 1
7698: PUSH
7699: LD_VAR 0 7
7703: ARRAY
7704: PPUSH
7705: LD_VAR 0 2
7709: PUSH
7710: LD_VAR 0 6
7714: ARRAY
7715: PPUSH
7716: LD_VAR 0 2
7720: PUSH
7721: LD_VAR 0 6
7725: PUSH
7726: LD_INT 1
7728: PLUS
7729: ARRAY
7730: PPUSH
7731: LD_VAR 0 2
7735: PUSH
7736: LD_VAR 0 6
7740: PUSH
7741: LD_INT 2
7743: PLUS
7744: ARRAY
7745: PPUSH
7746: LD_VAR 0 2
7750: PUSH
7751: LD_VAR 0 6
7755: PUSH
7756: LD_INT 3
7758: PLUS
7759: ARRAY
7760: PPUSH
7761: CALL_OW 145
7765: GO 7673
7767: POP
7768: POP
// break ;
7769: GO 7805
// end else
7771: GO 7803
// if ( p + 4 < tlist ) then
7773: LD_VAR 0 6
7777: PUSH
7778: LD_INT 4
7780: PLUS
7781: PUSH
7782: LD_VAR 0 2
7786: LESS
7787: IFFALSE 7803
// p := p + 4 ;
7789: LD_ADDR_VAR 0 6
7793: PUSH
7794: LD_VAR 0 6
7798: PUSH
7799: LD_INT 4
7801: PLUS
7802: ST_TO_ADDR
// end ;
7803: GO 7555
7805: POP
7806: POP
// end ;
7807: LD_VAR 0 3
7811: RET
// export function CheckWeaponOnTowers ( side , wlist ) ; var i , tmp , fac ; begin
7812: LD_INT 0
7814: PPUSH
7815: PPUSH
7816: PPUSH
7817: PPUSH
// tmp := GetTowers ( side ) ;
7818: LD_ADDR_VAR 0 5
7822: PUSH
7823: LD_VAR 0 1
7827: PPUSH
7828: CALL 6913 0 1
7832: ST_TO_ADDR
// fac := GetBuilding ( side , b_factory ) [ 1 ] ;
7833: LD_ADDR_VAR 0 6
7837: PUSH
7838: LD_VAR 0 1
7842: PPUSH
7843: LD_INT 3
7845: PPUSH
7846: CALL 6209 0 2
7850: PUSH
7851: LD_INT 1
7853: ARRAY
7854: ST_TO_ADDR
// if fac then
7855: LD_VAR 0 6
7859: IFFALSE 7955
// for i = 1 to tmp do
7861: LD_ADDR_VAR 0 4
7865: PUSH
7866: DOUBLE
7867: LD_INT 1
7869: DEC
7870: ST_TO_ADDR
7871: LD_VAR 0 5
7875: PUSH
7876: FOR_TO
7877: IFFALSE 7953
// if GetBWeapon ( tmp [ i ] ) = 0 then
7879: LD_VAR 0 5
7883: PUSH
7884: LD_VAR 0 4
7888: ARRAY
7889: PPUSH
7890: CALL_OW 269
7894: PUSH
7895: LD_INT 0
7897: EQUAL
7898: IFFALSE 7951
// begin if BuildingStatus ( fac ) = bs_idle then
7900: LD_VAR 0 6
7904: PPUSH
7905: CALL_OW 461
7909: PUSH
7910: LD_INT 2
7912: EQUAL
7913: IFFALSE 7949
// ComPlaceWeapon ( tmp [ i ] , wlist [ Rand ( 1 , wlist ) ] ) ;
7915: LD_VAR 0 5
7919: PUSH
7920: LD_VAR 0 4
7924: ARRAY
7925: PPUSH
7926: LD_VAR 0 2
7930: PUSH
7931: LD_INT 1
7933: PPUSH
7934: LD_VAR 0 2
7938: PPUSH
7939: CALL_OW 12
7943: ARRAY
7944: PPUSH
7945: CALL_OW 148
// break ;
7949: GO 7953
// end ;
7951: GO 7876
7953: POP
7954: POP
// end ;
7955: LD_VAR 0 3
7959: RET
// export function GetVehicle ( side , chassis , weapon ) ; begin
7960: LD_INT 0
7962: PPUSH
// if FilterAllUnits ( [ [ [ f_side , side ] , [ f_weapon , weapon ] , [ f_chassis , chassis ] ] ] ) then
7963: LD_INT 22
7965: PUSH
7966: LD_VAR 0 1
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: PUSH
7975: LD_INT 34
7977: PUSH
7978: LD_VAR 0 3
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: PUSH
7987: LD_INT 31
7989: PUSH
7990: LD_VAR 0 2
7994: PUSH
7995: EMPTY
7996: LIST
7997: LIST
7998: PUSH
7999: EMPTY
8000: LIST
8001: LIST
8002: LIST
8003: PUSH
8004: EMPTY
8005: LIST
8006: PPUSH
8007: CALL_OW 69
8011: IFFALSE 8069
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_weapon , weapon ] , [ f_chassis , chassis ] ] ] ) else
8013: LD_ADDR_VAR 0 4
8017: PUSH
8018: LD_INT 22
8020: PUSH
8021: LD_VAR 0 1
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: PUSH
8030: LD_INT 34
8032: PUSH
8033: LD_VAR 0 3
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: PUSH
8042: LD_INT 31
8044: PUSH
8045: LD_VAR 0 2
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: LIST
8058: PUSH
8059: EMPTY
8060: LIST
8061: PPUSH
8062: CALL_OW 69
8066: ST_TO_ADDR
8067: GO 8077
// result := false ;
8069: LD_ADDR_VAR 0 4
8073: PUSH
8074: LD_INT 0
8076: ST_TO_ADDR
// end ;
8077: LD_VAR 0 4
8081: RET
// export function ComProduce ( factory , chassis , engine , control , weapon ) ; begin
8082: LD_INT 0
8084: PPUSH
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) and CostOfVehicle ( chassis , engine , control , weapon ) [ 1 ] <= GetBaseSource ( factory ) [ 1 ] and CostOfVehicle ( chassis , engine , control , weapon ) [ 2 ] <= GetBaseSource ( factory ) [ 2 ] and CostOfVehicle ( chassis , engine , control , weapon ) [ 3 ] <= GetBaseSource ( factory ) [ 3 ] then
8085: LD_VAR 0 1
8089: PPUSH
8090: LD_VAR 0 2
8094: PPUSH
8095: LD_VAR 0 3
8099: PPUSH
8100: LD_VAR 0 4
8104: PPUSH
8105: LD_VAR 0 5
8109: PPUSH
8110: CALL_OW 448
8114: PUSH
8115: LD_VAR 0 2
8119: PPUSH
8120: LD_VAR 0 3
8124: PPUSH
8125: LD_VAR 0 4
8129: PPUSH
8130: LD_VAR 0 5
8134: PPUSH
8135: CALL_OW 449
8139: PUSH
8140: LD_INT 1
8142: ARRAY
8143: PUSH
8144: LD_VAR 0 1
8148: PPUSH
8149: CALL 5810 0 1
8153: PUSH
8154: LD_INT 1
8156: ARRAY
8157: LESSEQUAL
8158: AND
8159: PUSH
8160: LD_VAR 0 2
8164: PPUSH
8165: LD_VAR 0 3
8169: PPUSH
8170: LD_VAR 0 4
8174: PPUSH
8175: LD_VAR 0 5
8179: PPUSH
8180: CALL_OW 449
8184: PUSH
8185: LD_INT 2
8187: ARRAY
8188: PUSH
8189: LD_VAR 0 1
8193: PPUSH
8194: CALL 5810 0 1
8198: PUSH
8199: LD_INT 2
8201: ARRAY
8202: LESSEQUAL
8203: AND
8204: PUSH
8205: LD_VAR 0 2
8209: PPUSH
8210: LD_VAR 0 3
8214: PPUSH
8215: LD_VAR 0 4
8219: PPUSH
8220: LD_VAR 0 5
8224: PPUSH
8225: CALL_OW 449
8229: PUSH
8230: LD_INT 3
8232: ARRAY
8233: PUSH
8234: LD_VAR 0 1
8238: PPUSH
8239: CALL 5810 0 1
8243: PUSH
8244: LD_INT 3
8246: ARRAY
8247: LESSEQUAL
8248: AND
8249: IFFALSE 8296
// begin if debug then
8251: LD_EXP 1
8255: IFFALSE 8265
// display_strings := Factory work! ;
8257: LD_ADDR_OWVAR 47
8261: PUSH
8262: LD_STRING Factory work!
8264: ST_TO_ADDR
// ComConstruct ( factory , chassis , engine , control , weapon ) ;
8265: LD_VAR 0 1
8269: PPUSH
8270: LD_VAR 0 2
8274: PPUSH
8275: LD_VAR 0 3
8279: PPUSH
8280: LD_VAR 0 4
8284: PPUSH
8285: LD_VAR 0 5
8289: PPUSH
8290: CALL_OW 125
// end else
8294: GO 8304
// result := false ;
8296: LD_ADDR_VAR 0 6
8300: PUSH
8301: LD_INT 0
8303: ST_TO_ADDR
// end ;
8304: LD_VAR 0 6
8308: RET
// export function GetBuildingList ( side , type ) ; var i , tmp , filter ; begin
8309: LD_INT 0
8311: PPUSH
8312: PPUSH
8313: PPUSH
8314: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , type ] ] ) ;
8315: LD_ADDR_VAR 0 6
8319: PUSH
8320: LD_INT 22
8322: PUSH
8323: LD_VAR 0 1
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: PUSH
8332: LD_INT 30
8334: PUSH
8335: LD_VAR 0 2
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: PUSH
8344: EMPTY
8345: LIST
8346: LIST
8347: PPUSH
8348: CALL_OW 69
8352: ST_TO_ADDR
// tmp := [ ] ;
8353: LD_ADDR_VAR 0 5
8357: PUSH
8358: EMPTY
8359: ST_TO_ADDR
// for i = 1 to filter do
8360: LD_ADDR_VAR 0 4
8364: PUSH
8365: DOUBLE
8366: LD_INT 1
8368: DEC
8369: ST_TO_ADDR
8370: LD_VAR 0 6
8374: PUSH
8375: FOR_TO
8376: IFFALSE 8464
// begin tmp := tmp ^ [ [ GetBType ( filter [ i ] ) , GetX ( filter [ i ] ) , GetY ( filter [ i ] ) , GetDir ( filter [ i ] ) ] ] ;
8378: LD_ADDR_VAR 0 5
8382: PUSH
8383: LD_VAR 0 5
8387: PUSH
8388: LD_VAR 0 6
8392: PUSH
8393: LD_VAR 0 4
8397: ARRAY
8398: PPUSH
8399: CALL_OW 266
8403: PUSH
8404: LD_VAR 0 6
8408: PUSH
8409: LD_VAR 0 4
8413: ARRAY
8414: PPUSH
8415: CALL_OW 250
8419: PUSH
8420: LD_VAR 0 6
8424: PUSH
8425: LD_VAR 0 4
8429: ARRAY
8430: PPUSH
8431: CALL_OW 251
8435: PUSH
8436: LD_VAR 0 6
8440: PUSH
8441: LD_VAR 0 4
8445: ARRAY
8446: PPUSH
8447: CALL_OW 254
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: PUSH
8458: EMPTY
8459: LIST
8460: ADD
8461: ST_TO_ADDR
// end ;
8462: GO 8375
8464: POP
8465: POP
// result := tmp ;
8466: LD_ADDR_VAR 0 3
8470: PUSH
8471: LD_VAR 0 5
8475: ST_TO_ADDR
// end ;
8476: LD_VAR 0 3
8480: RET
// export function ComBuildLabList ( plist , list ) ; var i , p ; begin
8481: LD_INT 0
8483: PPUSH
8484: PPUSH
8485: PPUSH
// for i = 1 to list do
8486: LD_ADDR_VAR 0 4
8490: PUSH
8491: DOUBLE
8492: LD_INT 1
8494: DEC
8495: ST_TO_ADDR
8496: LD_VAR 0 2
8500: PUSH
8501: FOR_TO
8502: IFFALSE 9057
// begin if HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) > 0 then
8504: LD_VAR 0 2
8508: PUSH
8509: LD_VAR 0 4
8513: ARRAY
8514: PUSH
8515: LD_INT 1
8517: ARRAY
8518: PPUSH
8519: LD_VAR 0 2
8523: PUSH
8524: LD_VAR 0 4
8528: ARRAY
8529: PUSH
8530: LD_INT 2
8532: ARRAY
8533: PPUSH
8534: CALL_OW 428
8538: PUSH
8539: LD_INT 0
8541: GREATER
8542: IFFALSE 8828
// begin if GetNation ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) = nation_russian then
8544: LD_VAR 0 2
8548: PUSH
8549: LD_VAR 0 4
8553: ARRAY
8554: PUSH
8555: LD_INT 1
8557: ARRAY
8558: PPUSH
8559: LD_VAR 0 2
8563: PUSH
8564: LD_VAR 0 4
8568: ARRAY
8569: PUSH
8570: LD_INT 2
8572: ARRAY
8573: PPUSH
8574: CALL_OW 428
8578: PPUSH
8579: CALL_OW 248
8583: PUSH
8584: LD_INT 3
8586: EQUAL
8587: IFFALSE 8713
// begin if GetResourceType ( GetBase ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) , 3 ) >= 15 then
8589: LD_VAR 0 2
8593: PUSH
8594: LD_VAR 0 4
8598: ARRAY
8599: PUSH
8600: LD_INT 1
8602: ARRAY
8603: PPUSH
8604: LD_VAR 0 2
8608: PUSH
8609: LD_VAR 0 4
8613: ARRAY
8614: PUSH
8615: LD_INT 2
8617: ARRAY
8618: PPUSH
8619: CALL_OW 428
8623: PPUSH
8624: CALL_OW 274
8628: PPUSH
8629: LD_INT 3
8631: PPUSH
8632: CALL_OW 275
8636: PUSH
8637: LD_INT 15
8639: GREATEREQUAL
8640: IFFALSE 8711
// ComBuildLabKind ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) , list [ i ] [ 4 ] , list [ i ] [ 5 ] ) ;
8642: LD_VAR 0 2
8646: PUSH
8647: LD_VAR 0 4
8651: ARRAY
8652: PUSH
8653: LD_INT 1
8655: ARRAY
8656: PPUSH
8657: LD_VAR 0 2
8661: PUSH
8662: LD_VAR 0 4
8666: ARRAY
8667: PUSH
8668: LD_INT 2
8670: ARRAY
8671: PPUSH
8672: CALL_OW 428
8676: PPUSH
8677: LD_VAR 0 2
8681: PUSH
8682: LD_VAR 0 4
8686: ARRAY
8687: PUSH
8688: LD_INT 4
8690: ARRAY
8691: PPUSH
8692: LD_VAR 0 2
8696: PUSH
8697: LD_VAR 0 4
8701: ARRAY
8702: PUSH
8703: LD_INT 5
8705: ARRAY
8706: PPUSH
8707: CALL 7374 0 3
// end else
8711: GO 8782
// ComBuildLabKind ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) , list [ i ] [ 4 ] , list [ i ] [ 5 ] ) ;
8713: LD_VAR 0 2
8717: PUSH
8718: LD_VAR 0 4
8722: ARRAY
8723: PUSH
8724: LD_INT 1
8726: ARRAY
8727: PPUSH
8728: LD_VAR 0 2
8732: PUSH
8733: LD_VAR 0 4
8737: ARRAY
8738: PUSH
8739: LD_INT 2
8741: ARRAY
8742: PPUSH
8743: CALL_OW 428
8747: PPUSH
8748: LD_VAR 0 2
8752: PUSH
8753: LD_VAR 0 4
8757: ARRAY
8758: PUSH
8759: LD_INT 4
8761: ARRAY
8762: PPUSH
8763: LD_VAR 0 2
8767: PUSH
8768: LD_VAR 0 4
8772: ARRAY
8773: PUSH
8774: LD_INT 5
8776: ARRAY
8777: PPUSH
8778: CALL 7374 0 3
// ComCompleteUpgrade ( plist , HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) ;
8782: LD_VAR 0 1
8786: PPUSH
8787: LD_VAR 0 2
8791: PUSH
8792: LD_VAR 0 4
8796: ARRAY
8797: PUSH
8798: LD_INT 1
8800: ARRAY
8801: PPUSH
8802: LD_VAR 0 2
8806: PUSH
8807: LD_VAR 0 4
8811: ARRAY
8812: PUSH
8813: LD_INT 2
8815: ARRAY
8816: PPUSH
8817: CALL_OW 428
8821: PPUSH
8822: CALL 10326 0 2
// end else
8826: GO 9055
// if Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , b_lab ) and Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , list [ i ] [ 4 ] ) and Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , list [ i ] [ 5 ] ) then
8828: LD_VAR 0 1
8832: PUSH
8833: LD_INT 1
8835: ARRAY
8836: PPUSH
8837: CALL_OW 255
8841: PPUSH
8842: CALL 6118 0 1
8846: PPUSH
8847: LD_INT 6
8849: PPUSH
8850: CALL 5694 0 2
8854: PUSH
8855: LD_VAR 0 1
8859: PUSH
8860: LD_INT 1
8862: ARRAY
8863: PPUSH
8864: CALL_OW 255
8868: PPUSH
8869: CALL 6118 0 1
8873: PPUSH
8874: LD_VAR 0 2
8878: PUSH
8879: LD_VAR 0 4
8883: ARRAY
8884: PUSH
8885: LD_INT 4
8887: ARRAY
8888: PPUSH
8889: CALL 5694 0 2
8893: AND
8894: PUSH
8895: LD_VAR 0 1
8899: PUSH
8900: LD_INT 1
8902: ARRAY
8903: PPUSH
8904: CALL_OW 255
8908: PPUSH
8909: CALL 6118 0 1
8913: PPUSH
8914: LD_VAR 0 2
8918: PUSH
8919: LD_VAR 0 4
8923: ARRAY
8924: PUSH
8925: LD_INT 5
8927: ARRAY
8928: PPUSH
8929: CALL 5694 0 2
8933: AND
8934: IFFALSE 9055
// for p = 1 to plist do
8936: LD_ADDR_VAR 0 5
8940: PUSH
8941: DOUBLE
8942: LD_INT 1
8944: DEC
8945: ST_TO_ADDR
8946: LD_VAR 0 1
8950: PUSH
8951: FOR_TO
8952: IFFALSE 9053
// if IsInUnit ( plist [ p ] ) then
8954: LD_VAR 0 1
8958: PUSH
8959: LD_VAR 0 5
8963: ARRAY
8964: PPUSH
8965: CALL_OW 310
8969: IFFALSE 8988
// ComExitBuilding ( plist [ p ] ) else
8971: LD_VAR 0 1
8975: PUSH
8976: LD_VAR 0 5
8980: ARRAY
8981: PPUSH
8982: CALL_OW 122
8986: GO 9051
// ComBuild ( plist [ p ] , b_lab , list [ i ] [ 1 ] , list [ i ] [ 2 ] , list [ i ] [ 3 ] ) ;
8988: LD_VAR 0 1
8992: PUSH
8993: LD_VAR 0 5
8997: ARRAY
8998: PPUSH
8999: LD_INT 6
9001: PPUSH
9002: LD_VAR 0 2
9006: PUSH
9007: LD_VAR 0 4
9011: ARRAY
9012: PUSH
9013: LD_INT 1
9015: ARRAY
9016: PPUSH
9017: LD_VAR 0 2
9021: PUSH
9022: LD_VAR 0 4
9026: ARRAY
9027: PUSH
9028: LD_INT 2
9030: ARRAY
9031: PPUSH
9032: LD_VAR 0 2
9036: PUSH
9037: LD_VAR 0 4
9041: ARRAY
9042: PUSH
9043: LD_INT 3
9045: ARRAY
9046: PPUSH
9047: CALL_OW 145
9051: GO 8951
9053: POP
9054: POP
// end ;
9055: GO 8501
9057: POP
9058: POP
// end ;
9059: LD_VAR 0 3
9063: RET
// export function ComFindDeposit ( sci , x , y ) ; begin
9064: LD_INT 0
9066: PPUSH
// if IsInUnit ( sci ) then
9067: LD_VAR 0 1
9071: PPUSH
9072: CALL_OW 310
9076: IFFALSE 9089
// ComExitBuilding ( sci ) else
9078: LD_VAR 0 1
9082: PPUSH
9083: CALL_OW 122
9087: GO 9120
// if not HasTask ( sci ) then
9089: LD_VAR 0 1
9093: PPUSH
9094: CALL_OW 314
9098: NOT
9099: IFFALSE 9120
// begin ComMoveXY ( sci , x , y ) ;
9101: LD_VAR 0 1
9105: PPUSH
9106: LD_VAR 0 2
9110: PPUSH
9111: LD_VAR 0 3
9115: PPUSH
9116: CALL_OW 111
// end ; end ;
9120: LD_VAR 0 4
9124: RET
// export function NeedHeal ( side , tag_list , list ) ; var i , filter , tmp ; begin
9125: LD_INT 0
9127: PPUSH
9128: PPUSH
9129: PPUSH
9130: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) diff list ;
9131: LD_ADDR_VAR 0 6
9135: PUSH
9136: LD_INT 22
9138: PUSH
9139: LD_VAR 0 1
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: PUSH
9148: LD_INT 21
9150: PUSH
9151: LD_INT 1
9153: PUSH
9154: EMPTY
9155: LIST
9156: LIST
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: PPUSH
9162: CALL_OW 69
9166: PUSH
9167: LD_VAR 0 3
9171: DIFF
9172: ST_TO_ADDR
// tmp := tag_list ;
9173: LD_ADDR_VAR 0 7
9177: PUSH
9178: LD_VAR 0 2
9182: ST_TO_ADDR
// for i = 1 to filter do
9183: LD_ADDR_VAR 0 5
9187: PUSH
9188: DOUBLE
9189: LD_INT 1
9191: DEC
9192: ST_TO_ADDR
9193: LD_VAR 0 6
9197: PUSH
9198: FOR_TO
9199: IFFALSE 9468
// begin if GetLives ( filter [ i ] ) = 1000 and GetTag ( filter [ i ] ) >= 100 then
9201: LD_VAR 0 6
9205: PUSH
9206: LD_VAR 0 5
9210: ARRAY
9211: PPUSH
9212: CALL_OW 256
9216: PUSH
9217: LD_INT 1000
9219: EQUAL
9220: PUSH
9221: LD_VAR 0 6
9225: PUSH
9226: LD_VAR 0 5
9230: ARRAY
9231: PPUSH
9232: CALL_OW 110
9236: PUSH
9237: LD_INT 100
9239: GREATEREQUAL
9240: AND
9241: IFFALSE 9283
// begin SetTag ( filter [ i ] , 0 ) ;
9243: LD_VAR 0 6
9247: PUSH
9248: LD_VAR 0 5
9252: ARRAY
9253: PPUSH
9254: LD_INT 0
9256: PPUSH
9257: CALL_OW 109
// tmp := tmp diff filter [ i ] ;
9261: LD_ADDR_VAR 0 7
9265: PUSH
9266: LD_VAR 0 7
9270: PUSH
9271: LD_VAR 0 6
9275: PUSH
9276: LD_VAR 0 5
9280: ARRAY
9281: DIFF
9282: ST_TO_ADDR
// end ; if GetLives ( filter [ i ] ) < 1000 then
9283: LD_VAR 0 6
9287: PUSH
9288: LD_VAR 0 5
9292: ARRAY
9293: PPUSH
9294: CALL_OW 256
9298: PUSH
9299: LD_INT 1000
9301: LESS
9302: IFFALSE 9466
// begin if not filter [ i ] in tmp then
9304: LD_VAR 0 6
9308: PUSH
9309: LD_VAR 0 5
9313: ARRAY
9314: PUSH
9315: LD_VAR 0 7
9319: IN
9320: NOT
9321: IFFALSE 9345
// tmp := tmp ^ filter [ i ] ;
9323: LD_ADDR_VAR 0 7
9327: PUSH
9328: LD_VAR 0 7
9332: PUSH
9333: LD_VAR 0 6
9337: PUSH
9338: LD_VAR 0 5
9342: ARRAY
9343: ADD
9344: ST_TO_ADDR
// if GetLives ( filter [ i ] ) < 250 then
9345: LD_VAR 0 6
9349: PUSH
9350: LD_VAR 0 5
9354: ARRAY
9355: PPUSH
9356: CALL_OW 256
9360: PUSH
9361: LD_INT 250
9363: LESS
9364: IFFALSE 9386
// SetTag ( filter [ i ] , 100 ) else
9366: LD_VAR 0 6
9370: PUSH
9371: LD_VAR 0 5
9375: ARRAY
9376: PPUSH
9377: LD_INT 100
9379: PPUSH
9380: CALL_OW 109
9384: GO 9466
// if GetLives ( filter [ i ] ) < 500 then
9386: LD_VAR 0 6
9390: PUSH
9391: LD_VAR 0 5
9395: ARRAY
9396: PPUSH
9397: CALL_OW 256
9401: PUSH
9402: LD_INT 500
9404: LESS
9405: IFFALSE 9427
// SetTag ( filter [ i ] , 101 ) else
9407: LD_VAR 0 6
9411: PUSH
9412: LD_VAR 0 5
9416: ARRAY
9417: PPUSH
9418: LD_INT 101
9420: PPUSH
9421: CALL_OW 109
9425: GO 9466
// if GetLives ( filter [ i ] ) < 1000 then
9427: LD_VAR 0 6
9431: PUSH
9432: LD_VAR 0 5
9436: ARRAY
9437: PPUSH
9438: CALL_OW 256
9442: PUSH
9443: LD_INT 1000
9445: LESS
9446: IFFALSE 9466
// SetTag ( filter [ i ] , 102 ) ;
9448: LD_VAR 0 6
9452: PUSH
9453: LD_VAR 0 5
9457: ARRAY
9458: PPUSH
9459: LD_INT 102
9461: PPUSH
9462: CALL_OW 109
// end ; end ;
9466: GO 9198
9468: POP
9469: POP
// result := tmp ;
9470: LD_ADDR_VAR 0 4
9474: PUSH
9475: LD_VAR 0 7
9479: ST_TO_ADDR
// end ;
9480: LD_VAR 0 4
9484: RET
// export function IntBazooka ( list , side ) ; var ta , c , i , filter ; begin
9485: LD_INT 0
9487: PPUSH
9488: PPUSH
9489: PPUSH
9490: PPUSH
9491: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9492: LD_ADDR_VAR 0 7
9496: PUSH
9497: LD_INT 22
9499: PUSH
9500: LD_VAR 0 2
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PUSH
9509: LD_INT 3
9511: PUSH
9512: LD_INT 21
9514: PUSH
9515: LD_INT 3
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PPUSH
9530: CALL_OW 69
9534: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
9535: LD_ADDR_VAR 0 5
9539: PUSH
9540: LD_INT 1
9542: PPUSH
9543: LD_INT 3
9545: PPUSH
9546: CALL_OW 12
9550: ST_TO_ADDR
// if filter > 0 then
9551: LD_VAR 0 7
9555: PUSH
9556: LD_INT 0
9558: GREATER
9559: IFFALSE 9761
// for i = 1 to list do
9561: LD_ADDR_VAR 0 6
9565: PUSH
9566: DOUBLE
9567: LD_INT 1
9569: DEC
9570: ST_TO_ADDR
9571: LD_VAR 0 1
9575: PUSH
9576: FOR_TO
9577: IFFALSE 9759
// for ta in filter do
9579: LD_ADDR_VAR 0 4
9583: PUSH
9584: LD_VAR 0 7
9588: PUSH
9589: FOR_IN
9590: IFFALSE 9755
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
9592: LD_VAR 0 1
9596: PUSH
9597: LD_VAR 0 6
9601: ARRAY
9602: PPUSH
9603: LD_VAR 0 4
9607: PPUSH
9608: CALL_OW 296
9612: PUSH
9613: LD_INT 13
9615: LESSEQUAL
9616: IFFALSE 9753
// begin case c of 1 :
9618: LD_VAR 0 5
9622: PUSH
9623: LD_INT 1
9625: DOUBLE
9626: EQUAL
9627: IFTRUE 9631
9629: GO 9669
9631: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
9632: LD_VAR 0 1
9636: PUSH
9637: LD_VAR 0 6
9641: ARRAY
9642: PPUSH
9643: LD_VAR 0 4
9647: PPUSH
9648: CALL_OW 250
9652: PPUSH
9653: LD_VAR 0 4
9657: PPUSH
9658: CALL_OW 251
9662: PPUSH
9663: CALL_OW 154
9667: GO 9753
9669: LD_INT 2
9671: DOUBLE
9672: EQUAL
9673: IFTRUE 9677
9675: GO 9741
9677: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
9678: LD_VAR 0 1
9682: PUSH
9683: LD_VAR 0 6
9687: ARRAY
9688: PPUSH
9689: LD_VAR 0 4
9693: PPUSH
9694: CALL_OW 250
9698: PUSH
9699: LD_INT 1
9701: NEG
9702: PPUSH
9703: LD_INT 1
9705: PPUSH
9706: CALL_OW 12
9710: PLUS
9711: PPUSH
9712: LD_VAR 0 4
9716: PPUSH
9717: CALL_OW 251
9721: PUSH
9722: LD_INT 1
9724: NEG
9725: PPUSH
9726: LD_INT 1
9728: PPUSH
9729: CALL_OW 12
9733: PLUS
9734: PPUSH
9735: CALL_OW 153
9739: GO 9753
9741: LD_INT 3
9743: DOUBLE
9744: EQUAL
9745: IFTRUE 9749
9747: GO 9752
9749: POP
// ; end ;
9750: GO 9753
9752: POP
// end ; end ;
9753: GO 9589
9755: POP
9756: POP
9757: GO 9576
9759: POP
9760: POP
// end ;
9761: LD_VAR 0 3
9765: RET
// export function ComChangeClassToBazooker ( plist ) ; var i ; begin
9766: LD_INT 0
9768: PPUSH
9769: PPUSH
// for i = 1 to plist do
9770: LD_ADDR_VAR 0 3
9774: PUSH
9775: DOUBLE
9776: LD_INT 1
9778: DEC
9779: ST_TO_ADDR
9780: LD_VAR 0 1
9784: PUSH
9785: FOR_TO
9786: IFFALSE 9988
// if not IsInUnit ( plist [ i ] ) in FilterAllUnits ( [ [ f_btype , b_barracks ] ] ) then
9788: LD_VAR 0 1
9792: PUSH
9793: LD_VAR 0 3
9797: ARRAY
9798: PPUSH
9799: CALL_OW 310
9803: PUSH
9804: LD_INT 30
9806: PUSH
9807: LD_INT 5
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: PUSH
9814: EMPTY
9815: LIST
9816: PPUSH
9817: CALL_OW 69
9821: IN
9822: NOT
9823: IFFALSE 9968
// begin if IsInUnit ( plist [ i ] ) then
9825: LD_VAR 0 1
9829: PUSH
9830: LD_VAR 0 3
9834: ARRAY
9835: PPUSH
9836: CALL_OW 310
9840: IFFALSE 9859
// ComExitBuilding ( plist [ i ] ) else
9842: LD_VAR 0 1
9846: PUSH
9847: LD_VAR 0 3
9851: ARRAY
9852: PPUSH
9853: CALL_OW 122
9857: GO 9966
// if not HasTask ( plist [ i ] ) then
9859: LD_VAR 0 1
9863: PUSH
9864: LD_VAR 0 3
9868: ARRAY
9869: PPUSH
9870: CALL_OW 314
9874: NOT
9875: IFFALSE 9966
// begin ComEnterUnit ( plist [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , GetSide ( plist [ 1 ] ) ] , [ f_btype , b_barracks ] ] ) , plist [ i ] ) ) ;
9877: LD_VAR 0 1
9881: PUSH
9882: LD_VAR 0 3
9886: ARRAY
9887: PPUSH
9888: LD_INT 22
9890: PUSH
9891: LD_VAR 0 1
9895: PUSH
9896: LD_INT 1
9898: ARRAY
9899: PPUSH
9900: CALL_OW 255
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: PUSH
9909: LD_INT 30
9911: PUSH
9912: LD_INT 5
9914: PUSH
9915: EMPTY
9916: LIST
9917: LIST
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: PPUSH
9923: CALL_OW 69
9927: PPUSH
9928: LD_VAR 0 1
9932: PUSH
9933: LD_VAR 0 3
9937: ARRAY
9938: PPUSH
9939: CALL_OW 74
9943: PPUSH
9944: CALL_OW 120
// AddComChangeProfession ( plist [ i ] , 9 ) ;
9948: LD_VAR 0 1
9952: PUSH
9953: LD_VAR 0 3
9957: ARRAY
9958: PPUSH
9959: LD_INT 9
9961: PPUSH
9962: CALL_OW 183
// end ; end else
9966: GO 9986
// ComChangeProfession ( plist [ i ] , 9 ) ;
9968: LD_VAR 0 1
9972: PUSH
9973: LD_VAR 0 3
9977: ARRAY
9978: PPUSH
9979: LD_INT 9
9981: PPUSH
9982: CALL_OW 123
9986: GO 9785
9988: POP
9989: POP
// end ;
9990: LD_VAR 0 2
9994: RET
// export function GetHuman ( side ) ; begin
9995: LD_INT 0
9997: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
9998: LD_ADDR_VAR 0 2
10002: PUSH
10003: LD_INT 22
10005: PUSH
10006: LD_VAR 0 1
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PUSH
10015: LD_INT 21
10017: PUSH
10018: LD_INT 1
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: PUSH
10025: LD_INT 2
10027: PUSH
10028: LD_INT 25
10030: PUSH
10031: LD_INT 1
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: PUSH
10038: LD_INT 25
10040: PUSH
10041: LD_INT 2
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PUSH
10048: LD_INT 25
10050: PUSH
10051: LD_INT 3
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: PUSH
10058: LD_INT 25
10060: PUSH
10061: LD_INT 4
10063: PUSH
10064: EMPTY
10065: LIST
10066: LIST
10067: PUSH
10068: EMPTY
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: LIST
10079: PPUSH
10080: CALL_OW 69
10084: ST_TO_ADDR
// end ;
10085: LD_VAR 0 2
10089: RET
// export function PrepareTigers ( area ) ; var tiger , i ; begin
10090: LD_INT 0
10092: PPUSH
10093: PPUSH
10094: PPUSH
// uc_side := 0 ;
10095: LD_ADDR_OWVAR 20
10099: PUSH
10100: LD_INT 0
10102: ST_TO_ADDR
// uc_nation := 0 ;
10103: LD_ADDR_OWVAR 21
10107: PUSH
10108: LD_INT 0
10110: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
10111: LD_ADDR_VAR 0 4
10115: PUSH
10116: DOUBLE
10117: LD_INT 1
10119: DEC
10120: ST_TO_ADDR
10121: LD_INT 4
10123: PUSH
10124: LD_INT 5
10126: PUSH
10127: LD_INT 6
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: LIST
10134: PUSH
10135: LD_OWVAR 67
10139: ARRAY
10140: PUSH
10141: FOR_TO
10142: IFFALSE 10213
// begin hc_class = class_tiger ;
10144: LD_ADDR_OWVAR 28
10148: PUSH
10149: LD_INT 14
10151: ST_TO_ADDR
// hc_gallery = sandnature ;
10152: LD_ADDR_OWVAR 33
10156: PUSH
10157: LD_STRING sandnature
10159: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 50 ) ;
10160: LD_ADDR_OWVAR 35
10164: PUSH
10165: LD_INT 0
10167: PPUSH
10168: LD_INT 50
10170: PPUSH
10171: CALL_OW 12
10175: ST_TO_ADDR
// hc_face_number = 3 ;
10176: LD_ADDR_OWVAR 34
10180: PUSH
10181: LD_INT 3
10183: ST_TO_ADDR
// tiger := CreateHuman ;
10184: LD_ADDR_VAR 0 3
10188: PUSH
10189: CALL_OW 44
10193: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
10194: LD_VAR 0 3
10198: PPUSH
10199: LD_VAR 0 1
10203: PPUSH
10204: LD_INT 0
10206: PPUSH
10207: CALL_OW 49
// end ;
10211: GO 10141
10213: POP
10214: POP
// end ;
10215: LD_VAR 0 2
10219: RET
// export function PrepareApemans ( area ) ; var ape , i ; begin
10220: LD_INT 0
10222: PPUSH
10223: PPUSH
10224: PPUSH
// uc_side := 0 ;
10225: LD_ADDR_OWVAR 20
10229: PUSH
10230: LD_INT 0
10232: ST_TO_ADDR
// uc_nation := 0 ;
10233: LD_ADDR_OWVAR 21
10237: PUSH
10238: LD_INT 0
10240: ST_TO_ADDR
// for i = 1 to 8 do
10241: LD_ADDR_VAR 0 4
10245: PUSH
10246: DOUBLE
10247: LD_INT 1
10249: DEC
10250: ST_TO_ADDR
10251: LD_INT 8
10253: PUSH
10254: FOR_TO
10255: IFFALSE 10319
// begin hc_class = class_apeman ;
10257: LD_ADDR_OWVAR 28
10261: PUSH
10262: LD_INT 12
10264: ST_TO_ADDR
// hc_gallery =  ;
10265: LD_ADDR_OWVAR 33
10269: PUSH
10270: LD_STRING 
10272: ST_TO_ADDR
// hc_agressivity = Rand ( - 2 , 2 ) ;
10273: LD_ADDR_OWVAR 35
10277: PUSH
10278: LD_INT 2
10280: NEG
10281: PPUSH
10282: LD_INT 2
10284: PPUSH
10285: CALL_OW 12
10289: ST_TO_ADDR
// ape := CreateHuman ;
10290: LD_ADDR_VAR 0 3
10294: PUSH
10295: CALL_OW 44
10299: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
10300: LD_VAR 0 3
10304: PPUSH
10305: LD_VAR 0 1
10309: PPUSH
10310: LD_INT 0
10312: PPUSH
10313: CALL_OW 49
// end ;
10317: GO 10254
10319: POP
10320: POP
// end ;
10321: LD_VAR 0 2
10325: RET
// export function ComCompleteUpgrade ( plist , b ) ; var i ; begin
10326: LD_INT 0
10328: PPUSH
10329: PPUSH
// if BuildingStatus ( b ) = bs_build then
10330: LD_VAR 0 2
10334: PPUSH
10335: CALL_OW 461
10339: PUSH
10340: LD_INT 1
10342: EQUAL
10343: IFFALSE 10529
// for i = 1 to plist do
10345: LD_ADDR_VAR 0 4
10349: PUSH
10350: DOUBLE
10351: LD_INT 1
10353: DEC
10354: ST_TO_ADDR
10355: LD_VAR 0 1
10359: PUSH
10360: FOR_TO
10361: IFFALSE 10527
// if IsInUnit ( plist [ i ] ) then
10363: LD_VAR 0 1
10367: PUSH
10368: LD_VAR 0 4
10372: ARRAY
10373: PPUSH
10374: CALL_OW 310
10378: IFFALSE 10461
// begin ComExitBuilding ( plist [ i ] ) ;
10380: LD_VAR 0 1
10384: PUSH
10385: LD_VAR 0 4
10389: ARRAY
10390: PPUSH
10391: CALL_OW 122
// AddTaskList ( plist [ i ] , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10395: LD_VAR 0 1
10399: PUSH
10400: LD_VAR 0 4
10404: ARRAY
10405: PPUSH
10406: LD_STRING h
10408: PUSH
10409: LD_VAR 0 2
10413: PPUSH
10414: CALL_OW 250
10418: PUSH
10419: LD_VAR 0 2
10423: PPUSH
10424: CALL_OW 251
10428: PUSH
10429: LD_VAR 0 2
10433: PUSH
10434: LD_INT 0
10436: PUSH
10437: LD_INT 0
10439: PUSH
10440: LD_INT 0
10442: PUSH
10443: EMPTY
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: PUSH
10452: EMPTY
10453: LIST
10454: PPUSH
10455: CALL_OW 447
// end else
10459: GO 10525
// SetTaskList ( plist [ i ] , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10461: LD_VAR 0 1
10465: PUSH
10466: LD_VAR 0 4
10470: ARRAY
10471: PPUSH
10472: LD_STRING h
10474: PUSH
10475: LD_VAR 0 2
10479: PPUSH
10480: CALL_OW 250
10484: PUSH
10485: LD_VAR 0 2
10489: PPUSH
10490: CALL_OW 251
10494: PUSH
10495: LD_VAR 0 2
10499: PUSH
10500: LD_INT 0
10502: PUSH
10503: LD_INT 0
10505: PUSH
10506: LD_INT 0
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: PUSH
10518: EMPTY
10519: LIST
10520: PPUSH
10521: CALL_OW 446
10525: GO 10360
10527: POP
10528: POP
// end ;
10529: LD_VAR 0 3
10533: RET
// export function WantRepair ( eng ) ; begin
10534: LD_INT 0
10536: PPUSH
// if GetTaskList ( eng ) > 0 then
10537: LD_VAR 0 1
10541: PPUSH
10542: CALL_OW 437
10546: PUSH
10547: LD_INT 0
10549: GREATER
10550: IFFALSE 10595
// begin if GetTaskList ( eng ) [ 1 ] [ 1 ] = o then
10552: LD_VAR 0 1
10556: PPUSH
10557: CALL_OW 437
10561: PUSH
10562: LD_INT 1
10564: ARRAY
10565: PUSH
10566: LD_INT 1
10568: ARRAY
10569: PUSH
10570: LD_STRING o
10572: EQUAL
10573: IFFALSE 10585
// result := true else
10575: LD_ADDR_VAR 0 2
10579: PUSH
10580: LD_INT 1
10582: ST_TO_ADDR
10583: GO 10593
// result := false ;
10585: LD_ADDR_VAR 0 2
10589: PUSH
10590: LD_INT 0
10592: ST_TO_ADDR
// end else
10593: GO 10603
// result := false ;
10595: LD_ADDR_VAR 0 2
10599: PUSH
10600: LD_INT 0
10602: ST_TO_ADDR
// end ;
10603: LD_VAR 0 2
10607: RET
// export function GetBuildingsList ( side , btype ) ; var i , tmp , list ; begin
10608: LD_INT 0
10610: PPUSH
10611: PPUSH
10612: PPUSH
10613: PPUSH
// if btype = - 1 then
10614: LD_VAR 0 2
10618: PUSH
10619: LD_INT 1
10621: NEG
10622: EQUAL
10623: IFFALSE 10663
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) else
10625: LD_ADDR_VAR 0 5
10629: PUSH
10630: LD_INT 22
10632: PUSH
10633: LD_VAR 0 1
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PUSH
10642: LD_INT 21
10644: PUSH
10645: LD_INT 3
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PPUSH
10656: CALL_OW 69
10660: ST_TO_ADDR
10661: GO 10701
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
10663: LD_ADDR_VAR 0 5
10667: PUSH
10668: LD_INT 22
10670: PUSH
10671: LD_VAR 0 1
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: PUSH
10680: LD_INT 30
10682: PUSH
10683: LD_VAR 0 2
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PPUSH
10696: CALL_OW 69
10700: ST_TO_ADDR
// list := [ ] ;
10701: LD_ADDR_VAR 0 6
10705: PUSH
10706: EMPTY
10707: ST_TO_ADDR
// for i = 1 to tmp do
10708: LD_ADDR_VAR 0 4
10712: PUSH
10713: DOUBLE
10714: LD_INT 1
10716: DEC
10717: ST_TO_ADDR
10718: LD_VAR 0 5
10722: PUSH
10723: FOR_TO
10724: IFFALSE 10812
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
10726: LD_ADDR_VAR 0 6
10730: PUSH
10731: LD_VAR 0 6
10735: PUSH
10736: LD_VAR 0 5
10740: PUSH
10741: LD_VAR 0 4
10745: ARRAY
10746: PPUSH
10747: CALL_OW 266
10751: PUSH
10752: LD_VAR 0 5
10756: PUSH
10757: LD_VAR 0 4
10761: ARRAY
10762: PPUSH
10763: CALL_OW 250
10767: PUSH
10768: LD_VAR 0 5
10772: PUSH
10773: LD_VAR 0 4
10777: ARRAY
10778: PPUSH
10779: CALL_OW 251
10783: PUSH
10784: LD_VAR 0 5
10788: PUSH
10789: LD_VAR 0 4
10793: ARRAY
10794: PPUSH
10795: CALL_OW 254
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: PUSH
10806: EMPTY
10807: LIST
10808: ADD
10809: ST_TO_ADDR
10810: GO 10723
10812: POP
10813: POP
// result = list ;
10814: LD_ADDR_VAR 0 3
10818: PUSH
10819: LD_VAR 0 6
10823: ST_TO_ADDR
// end ;
10824: LD_VAR 0 3
10828: RET
// export function BehemothAttack ( behemoth , time_lapsers_list , mechanic_list , x , y ) ; var i , p , dist ; begin
10829: LD_INT 0
10831: PPUSH
10832: PPUSH
10833: PPUSH
10834: PPUSH
// if GetDistUnits ( behemoth , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( behemoth ) ] ) , behemoth ) ) < 18 then
10835: LD_VAR 0 1
10839: PPUSH
10840: LD_INT 81
10842: PUSH
10843: LD_VAR 0 1
10847: PPUSH
10848: CALL_OW 255
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: PPUSH
10857: CALL_OW 69
10861: PPUSH
10862: LD_VAR 0 1
10866: PPUSH
10867: CALL_OW 74
10871: PPUSH
10872: CALL_OW 296
10876: PUSH
10877: LD_INT 18
10879: LESS
10880: IFFALSE 10925
// ComAttackUnit ( behemoth , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( behemoth ) ] ) , behemoth ) ) else
10882: LD_VAR 0 1
10886: PPUSH
10887: LD_INT 81
10889: PUSH
10890: LD_VAR 0 1
10894: PPUSH
10895: CALL_OW 255
10899: PUSH
10900: EMPTY
10901: LIST
10902: LIST
10903: PPUSH
10904: CALL_OW 69
10908: PPUSH
10909: LD_VAR 0 1
10913: PPUSH
10914: CALL_OW 74
10918: PPUSH
10919: CALL_OW 115
10923: GO 10944
// ComMoveXY ( behemoth , x , y ) ;
10925: LD_VAR 0 1
10929: PPUSH
10930: LD_VAR 0 4
10934: PPUSH
10935: LD_VAR 0 5
10939: PPUSH
10940: CALL_OW 111
// if time_lapsers_list > 0 then
10944: LD_VAR 0 2
10948: PUSH
10949: LD_INT 0
10951: GREATER
10952: IFFALSE 11142
// begin for i = 1 to time_lapsers_list do
10954: LD_ADDR_VAR 0 7
10958: PUSH
10959: DOUBLE
10960: LD_INT 1
10962: DEC
10963: ST_TO_ADDR
10964: LD_VAR 0 2
10968: PUSH
10969: FOR_TO
10970: IFFALSE 11140
// begin if GetLives ( time_lapsers_list [ i ] ) >= 250 and GetDistUnits ( time_lapsers_list [ i ] , behemoth ) > 9 then
10972: LD_VAR 0 2
10976: PUSH
10977: LD_VAR 0 7
10981: ARRAY
10982: PPUSH
10983: CALL_OW 256
10987: PUSH
10988: LD_INT 250
10990: GREATEREQUAL
10991: PUSH
10992: LD_VAR 0 2
10996: PUSH
10997: LD_VAR 0 7
11001: ARRAY
11002: PPUSH
11003: LD_VAR 0 1
11007: PPUSH
11008: CALL_OW 296
11012: PUSH
11013: LD_INT 9
11015: GREATER
11016: AND
11017: IFFALSE 11054
// ComMoveXY ( time_lapsers_list [ i ] , GetX ( behemoth ) , GetY ( behemoth ) ) ;
11019: LD_VAR 0 2
11023: PUSH
11024: LD_VAR 0 7
11028: ARRAY
11029: PPUSH
11030: LD_VAR 0 1
11034: PPUSH
11035: CALL_OW 250
11039: PPUSH
11040: LD_VAR 0 1
11044: PPUSH
11045: CALL_OW 251
11049: PPUSH
11050: CALL_OW 111
// if GetLives ( time_lapsers_list [ i ] ) < 500 and GetLives ( behemoth ) > 700 then
11054: LD_VAR 0 2
11058: PUSH
11059: LD_VAR 0 7
11063: ARRAY
11064: PPUSH
11065: CALL_OW 256
11069: PUSH
11070: LD_INT 500
11072: LESS
11073: PUSH
11074: LD_VAR 0 1
11078: PPUSH
11079: CALL_OW 256
11083: PUSH
11084: LD_INT 700
11086: GREATER
11087: AND
11088: IFFALSE 11138
// for p = 1 to mechanic_list do
11090: LD_ADDR_VAR 0 8
11094: PUSH
11095: DOUBLE
11096: LD_INT 1
11098: DEC
11099: ST_TO_ADDR
11100: LD_VAR 0 3
11104: PUSH
11105: FOR_TO
11106: IFFALSE 11136
// ComRepairVehicle ( mechanic_list [ p ] , time_lapsers_list [ i ] ) ;
11108: LD_VAR 0 3
11112: PUSH
11113: LD_VAR 0 8
11117: ARRAY
11118: PPUSH
11119: LD_VAR 0 2
11123: PUSH
11124: LD_VAR 0 7
11128: ARRAY
11129: PPUSH
11130: CALL_OW 129
11134: GO 11105
11136: POP
11137: POP
// end ;
11138: GO 10969
11140: POP
11141: POP
// end ; if mechanic_list then
11142: LD_VAR 0 3
11146: IFFALSE 11327
// begin for i = 1 to mechanic_list do
11148: LD_ADDR_VAR 0 7
11152: PUSH
11153: DOUBLE
11154: LD_INT 1
11156: DEC
11157: ST_TO_ADDR
11158: LD_VAR 0 3
11162: PUSH
11163: FOR_TO
11164: IFFALSE 11325
// begin if GetLives ( mechanic_list [ i ] ) < 333 then
11166: LD_VAR 0 3
11170: PUSH
11171: LD_VAR 0 7
11175: ARRAY
11176: PPUSH
11177: CALL_OW 256
11181: PUSH
11182: LD_INT 333
11184: LESS
11185: IFFALSE 11209
// ru_behemoth_mechanic := ru_behemoth_mechanic diff mechanic_list [ i ] ;
11187: LD_ADDR_EXP 15
11191: PUSH
11192: LD_EXP 15
11196: PUSH
11197: LD_VAR 0 3
11201: PUSH
11202: LD_VAR 0 7
11206: ARRAY
11207: DIFF
11208: ST_TO_ADDR
// if GetDistUnits ( mechanic_list [ i ] , behemoth ) > 9 and not HasTask ( mechanic_list [ i ] ) then
11209: LD_VAR 0 3
11213: PUSH
11214: LD_VAR 0 7
11218: ARRAY
11219: PPUSH
11220: LD_VAR 0 1
11224: PPUSH
11225: CALL_OW 296
11229: PUSH
11230: LD_INT 9
11232: GREATER
11233: PUSH
11234: LD_VAR 0 3
11238: PUSH
11239: LD_VAR 0 7
11243: ARRAY
11244: PPUSH
11245: CALL_OW 314
11249: NOT
11250: AND
11251: IFFALSE 11288
// ComMoveXY ( mechanic_list [ i ] , GetX ( behemoth ) , GetY ( behemoth ) ) ;
11253: LD_VAR 0 3
11257: PUSH
11258: LD_VAR 0 7
11262: ARRAY
11263: PPUSH
11264: LD_VAR 0 1
11268: PPUSH
11269: CALL_OW 250
11273: PPUSH
11274: LD_VAR 0 1
11278: PPUSH
11279: CALL_OW 251
11283: PPUSH
11284: CALL_OW 111
// if GetLives ( behemoth ) < 700 then
11288: LD_VAR 0 1
11292: PPUSH
11293: CALL_OW 256
11297: PUSH
11298: LD_INT 700
11300: LESS
11301: IFFALSE 11323
// ComRepairVehicle ( mechanic_list [ i ] , behemoth ) ;
11303: LD_VAR 0 3
11307: PUSH
11308: LD_VAR 0 7
11312: ARRAY
11313: PPUSH
11314: LD_VAR 0 1
11318: PPUSH
11319: CALL_OW 129
// end ;
11323: GO 11163
11325: POP
11326: POP
// end ; end ;
11327: LD_VAR 0 6
11331: RET
// export function GetBehemoth ( side ) ; begin
11332: LD_INT 0
11334: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
11335: LD_ADDR_VAR 0 2
11339: PUSH
11340: LD_INT 22
11342: PUSH
11343: LD_VAR 0 1
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: PUSH
11352: LD_INT 31
11354: PUSH
11355: LD_INT 25
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: PPUSH
11366: CALL_OW 69
11370: ST_TO_ADDR
// end ;
11371: LD_VAR 0 2
11375: RET
// export function CollectCrates ( side , area ) ; var cargo , engs , skr , i , am ; begin
11376: LD_INT 0
11378: PPUSH
11379: PPUSH
11380: PPUSH
11381: PPUSH
11382: PPUSH
11383: PPUSH
// skr = GetListOfCratesInArea ( area ) ;
11384: LD_ADDR_VAR 0 6
11388: PUSH
11389: LD_VAR 0 2
11393: PPUSH
11394: CALL_OW 435
11398: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
11399: LD_ADDR_VAR 0 5
11403: PUSH
11404: LD_INT 22
11406: PUSH
11407: LD_VAR 0 1
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: PUSH
11416: LD_INT 2
11418: PUSH
11419: LD_INT 25
11421: PUSH
11422: LD_INT 2
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: PUSH
11429: LD_INT 25
11431: PUSH
11432: LD_INT 16
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: LIST
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PPUSH
11448: CALL_OW 69
11452: ST_TO_ADDR
// if skr then
11453: LD_VAR 0 6
11457: IFFALSE 11622
// begin if engs then
11459: LD_VAR 0 5
11463: IFFALSE 11622
// begin am := GetResourceAmountXY ( skr [ 1 ] , skr [ 2 ] ) ;
11465: LD_ADDR_VAR 0 8
11469: PUSH
11470: LD_VAR 0 6
11474: PUSH
11475: LD_INT 1
11477: ARRAY
11478: PPUSH
11479: LD_VAR 0 6
11483: PUSH
11484: LD_INT 2
11486: ARRAY
11487: PPUSH
11488: CALL_OW 284
11492: ST_TO_ADDR
// if am > engs then
11493: LD_VAR 0 8
11497: PUSH
11498: LD_VAR 0 5
11502: GREATER
11503: IFFALSE 11515
// am := engs ;
11505: LD_ADDR_VAR 0 8
11509: PUSH
11510: LD_VAR 0 5
11514: ST_TO_ADDR
// for i = 1 to am do
11515: LD_ADDR_VAR 0 7
11519: PUSH
11520: DOUBLE
11521: LD_INT 1
11523: DEC
11524: ST_TO_ADDR
11525: LD_VAR 0 8
11529: PUSH
11530: FOR_TO
11531: IFFALSE 11620
// begin if IsInUnit ( engs [ i ] ) then
11533: LD_VAR 0 5
11537: PUSH
11538: LD_VAR 0 7
11542: ARRAY
11543: PPUSH
11544: CALL_OW 310
11548: IFFALSE 11567
// ComExitBuilding ( engs [ i ] ) else
11550: LD_VAR 0 5
11554: PUSH
11555: LD_VAR 0 7
11559: ARRAY
11560: PPUSH
11561: CALL_OW 122
11565: GO 11618
// if not HasTask ( engs [ i ] ) then
11567: LD_VAR 0 5
11571: PUSH
11572: LD_VAR 0 7
11576: ARRAY
11577: PPUSH
11578: CALL_OW 314
11582: NOT
11583: IFFALSE 11618
// ComCollect ( engs [ i ] , skr [ 1 ] , skr [ 2 ] ) ;
11585: LD_VAR 0 5
11589: PUSH
11590: LD_VAR 0 7
11594: ARRAY
11595: PPUSH
11596: LD_VAR 0 6
11600: PUSH
11601: LD_INT 1
11603: ARRAY
11604: PPUSH
11605: LD_VAR 0 6
11609: PUSH
11610: LD_INT 2
11612: ARRAY
11613: PPUSH
11614: CALL_OW 117
// end ;
11618: GO 11530
11620: POP
11621: POP
// end ; end ; end ; end_of_file
11622: LD_VAR 0 3
11626: RET
// export game_status ; export helps_arrive , helps_can_arrive ; export beta_come , gamma_come , zeta_come , mine_ck , sib_bomb_constructed , mine_constructed ; export guyA , guyB ; export function PrepareAmerican ; var skill ; begin
11627: LD_INT 0
11629: PPUSH
11630: PPUSH
// uc_side := 1 ;
11631: LD_ADDR_OWVAR 20
11635: PUSH
11636: LD_INT 1
11638: ST_TO_ADDR
// uc_nation := 1 ;
11639: LD_ADDR_OWVAR 21
11643: PUSH
11644: LD_INT 1
11646: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
11647: LD_ADDR_VAR 0 2
11651: PUSH
11652: LD_INT 6
11654: PUSH
11655: LD_INT 5
11657: PUSH
11658: LD_INT 4
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: LIST
11665: PUSH
11666: LD_OWVAR 67
11670: ARRAY
11671: ST_TO_ADDR
// game_status := false ;
11672: LD_ADDR_EXP 29
11676: PUSH
11677: LD_INT 0
11679: ST_TO_ADDR
// helps_arrive := false ;
11680: LD_ADDR_EXP 30
11684: PUSH
11685: LD_INT 0
11687: ST_TO_ADDR
// helps_can_arrive := false ;
11688: LD_ADDR_EXP 31
11692: PUSH
11693: LD_INT 0
11695: ST_TO_ADDR
// beta_come := false ;
11696: LD_ADDR_EXP 32
11700: PUSH
11701: LD_INT 0
11703: ST_TO_ADDR
// gamma_come := false ;
11704: LD_ADDR_EXP 33
11708: PUSH
11709: LD_INT 0
11711: ST_TO_ADDR
// zeta_come := false ;
11712: LD_ADDR_EXP 34
11716: PUSH
11717: LD_INT 0
11719: ST_TO_ADDR
// mine_ck := false ;
11720: LD_ADDR_EXP 35
11724: PUSH
11725: LD_INT 0
11727: ST_TO_ADDR
// sib_bomb_constructed := false ;
11728: LD_ADDR_EXP 36
11732: PUSH
11733: LD_INT 0
11735: ST_TO_ADDR
// mine_constructed := false ;
11736: LD_ADDR_EXP 37
11740: PUSH
11741: LD_INT 0
11743: ST_TO_ADDR
// SetResourceType ( GetBase ( us_dep1 ) , mat_cans , [ 200 , 100 , 70 ] [ Difficulty ] ) ;
11744: LD_INT 35
11746: PPUSH
11747: CALL_OW 274
11751: PPUSH
11752: LD_INT 1
11754: PPUSH
11755: LD_INT 200
11757: PUSH
11758: LD_INT 100
11760: PUSH
11761: LD_INT 70
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: LIST
11768: PUSH
11769: LD_OWVAR 67
11773: ARRAY
11774: PPUSH
11775: CALL_OW 277
// SetSide ( us_dep1 , 4 ) ;
11779: LD_INT 35
11781: PPUSH
11782: LD_INT 4
11784: PPUSH
11785: CALL_OW 235
// hc_importance := 100 ;
11789: LD_ADDR_OWVAR 32
11793: PUSH
11794: LD_INT 100
11796: ST_TO_ADDR
// PrepareHuman ( sex_male , 2 , skill + 1 ) ;
11797: LD_INT 1
11799: PPUSH
11800: LD_INT 2
11802: PPUSH
11803: LD_VAR 0 2
11807: PUSH
11808: LD_INT 1
11810: PLUS
11811: PPUSH
11812: CALL_OW 380
// hc_gallery := hardch ;
11816: LD_ADDR_OWVAR 33
11820: PUSH
11821: LD_STRING hardch
11823: ST_TO_ADDR
// hc_face_number := 1 ;
11824: LD_ADDR_OWVAR 34
11828: PUSH
11829: LD_INT 1
11831: ST_TO_ADDR
// guyA := CreateHuman ;
11832: LD_ADDR_EXP 38
11836: PUSH
11837: CALL_OW 44
11841: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
11842: LD_INT 1
11844: PPUSH
11845: LD_INT 1
11847: PPUSH
11848: LD_VAR 0 2
11852: PPUSH
11853: CALL_OW 380
// hc_face_number := 2 ;
11857: LD_ADDR_OWVAR 34
11861: PUSH
11862: LD_INT 2
11864: ST_TO_ADDR
// guyB := CreateHuman ;
11865: LD_ADDR_EXP 39
11869: PUSH
11870: CALL_OW 44
11874: ST_TO_ADDR
// hc_importance := 0 ;
11875: LD_ADDR_OWVAR 32
11879: PUSH
11880: LD_INT 0
11882: ST_TO_ADDR
// hc_gallery :=  ;
11883: LD_ADDR_OWVAR 33
11887: PUSH
11888: LD_STRING 
11890: ST_TO_ADDR
// end ;
11891: LD_VAR 0 1
11895: RET
// export Beta_Squad ; export function AddBetaSquad ( num ) ; var i , un , sold , sci , mech , tank , cargo , skill ; begin
11896: LD_INT 0
11898: PPUSH
11899: PPUSH
11900: PPUSH
11901: PPUSH
11902: PPUSH
11903: PPUSH
11904: PPUSH
11905: PPUSH
11906: PPUSH
// uc_side := 4 ;
11907: LD_ADDR_OWVAR 20
11911: PUSH
11912: LD_INT 4
11914: ST_TO_ADDR
// uc_nation := 1 ;
11915: LD_ADDR_OWVAR 21
11919: PUSH
11920: LD_INT 1
11922: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
11923: LD_ADDR_VAR 0 10
11927: PUSH
11928: LD_INT 6
11930: PUSH
11931: LD_INT 5
11933: PUSH
11934: LD_INT 4
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: LIST
11941: PUSH
11942: LD_OWVAR 67
11946: ARRAY
11947: ST_TO_ADDR
// Beta_Squad := [ ] ;
11948: LD_ADDR_EXP 40
11952: PUSH
11953: EMPTY
11954: ST_TO_ADDR
// case num of 1 :
11955: LD_VAR 0 1
11959: PUSH
11960: LD_INT 1
11962: DOUBLE
11963: EQUAL
11964: IFTRUE 11968
11966: GO 12011
11968: POP
// begin sold := 2 ;
11969: LD_ADDR_VAR 0 5
11973: PUSH
11974: LD_INT 2
11976: ST_TO_ADDR
// sci := 1 ;
11977: LD_ADDR_VAR 0 6
11981: PUSH
11982: LD_INT 1
11984: ST_TO_ADDR
// mech := 2 ;
11985: LD_ADDR_VAR 0 7
11989: PUSH
11990: LD_INT 2
11992: ST_TO_ADDR
// tank := 1 ;
11993: LD_ADDR_VAR 0 8
11997: PUSH
11998: LD_INT 1
12000: ST_TO_ADDR
// cargo := 1 ;
12001: LD_ADDR_VAR 0 9
12005: PUSH
12006: LD_INT 1
12008: ST_TO_ADDR
// end ; 2 :
12009: GO 12114
12011: LD_INT 2
12013: DOUBLE
12014: EQUAL
12015: IFTRUE 12019
12017: GO 12062
12019: POP
// begin sold := 2 ;
12020: LD_ADDR_VAR 0 5
12024: PUSH
12025: LD_INT 2
12027: ST_TO_ADDR
// sci := 1 ;
12028: LD_ADDR_VAR 0 6
12032: PUSH
12033: LD_INT 1
12035: ST_TO_ADDR
// mech := 1 ;
12036: LD_ADDR_VAR 0 7
12040: PUSH
12041: LD_INT 1
12043: ST_TO_ADDR
// tank := 1 ;
12044: LD_ADDR_VAR 0 8
12048: PUSH
12049: LD_INT 1
12051: ST_TO_ADDR
// cargo := 0 ;
12052: LD_ADDR_VAR 0 9
12056: PUSH
12057: LD_INT 0
12059: ST_TO_ADDR
// end ; 3 :
12060: GO 12114
12062: LD_INT 3
12064: DOUBLE
12065: EQUAL
12066: IFTRUE 12070
12068: GO 12113
12070: POP
// begin sold := 1 ;
12071: LD_ADDR_VAR 0 5
12075: PUSH
12076: LD_INT 1
12078: ST_TO_ADDR
// sci := 1 ;
12079: LD_ADDR_VAR 0 6
12083: PUSH
12084: LD_INT 1
12086: ST_TO_ADDR
// mech := 1 ;
12087: LD_ADDR_VAR 0 7
12091: PUSH
12092: LD_INT 1
12094: ST_TO_ADDR
// tank := 1 ;
12095: LD_ADDR_VAR 0 8
12099: PUSH
12100: LD_INT 1
12102: ST_TO_ADDR
// cargo := 0 ;
12103: LD_ADDR_VAR 0 9
12107: PUSH
12108: LD_INT 0
12110: ST_TO_ADDR
// end ; end ;
12111: GO 12114
12113: POP
// for i = 1 to sold do
12114: LD_ADDR_VAR 0 3
12118: PUSH
12119: DOUBLE
12120: LD_INT 1
12122: DEC
12123: ST_TO_ADDR
12124: LD_VAR 0 5
12128: PUSH
12129: FOR_TO
12130: IFFALSE 12202
// begin if i = 1 then
12132: LD_VAR 0 3
12136: PUSH
12137: LD_INT 1
12139: EQUAL
12140: IFFALSE 12159
// PrepareHuman ( sex_male , 1 , skill ) else
12142: LD_INT 1
12144: PPUSH
12145: LD_INT 1
12147: PPUSH
12148: LD_VAR 0 10
12152: PPUSH
12153: CALL_OW 380
12157: GO 12174
// PrepareHuman ( false , 1 , skill ) ;
12159: LD_INT 0
12161: PPUSH
12162: LD_INT 1
12164: PPUSH
12165: LD_VAR 0 10
12169: PPUSH
12170: CALL_OW 380
// un := CreateHuman ;
12174: LD_ADDR_VAR 0 4
12178: PUSH
12179: CALL_OW 44
12183: ST_TO_ADDR
// Beta_Squad := Beta_Squad ^ un ;
12184: LD_ADDR_EXP 40
12188: PUSH
12189: LD_EXP 40
12193: PUSH
12194: LD_VAR 0 4
12198: ADD
12199: ST_TO_ADDR
// end ;
12200: GO 12129
12202: POP
12203: POP
// for i = 1 to mech do
12204: LD_ADDR_VAR 0 3
12208: PUSH
12209: DOUBLE
12210: LD_INT 1
12212: DEC
12213: ST_TO_ADDR
12214: LD_VAR 0 7
12218: PUSH
12219: FOR_TO
12220: IFFALSE 12277
// begin PrepareHuman ( false , 3 , skill ) ;
12222: LD_INT 0
12224: PPUSH
12225: LD_INT 3
12227: PPUSH
12228: LD_VAR 0 10
12232: PPUSH
12233: CALL_OW 380
// un := CreateHuman ;
12237: LD_ADDR_VAR 0 4
12241: PUSH
12242: CALL_OW 44
12246: ST_TO_ADDR
// SetTag ( un , 3 ) ;
12247: LD_VAR 0 4
12251: PPUSH
12252: LD_INT 3
12254: PPUSH
12255: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12259: LD_ADDR_EXP 40
12263: PUSH
12264: LD_EXP 40
12268: PUSH
12269: LD_VAR 0 4
12273: ADD
12274: ST_TO_ADDR
// end ;
12275: GO 12219
12277: POP
12278: POP
// for i = 1 to sci do
12279: LD_ADDR_VAR 0 3
12283: PUSH
12284: DOUBLE
12285: LD_INT 1
12287: DEC
12288: ST_TO_ADDR
12289: LD_VAR 0 6
12293: PUSH
12294: FOR_TO
12295: IFFALSE 12340
// begin PrepareHuman ( false , 4 , skill ) ;
12297: LD_INT 0
12299: PPUSH
12300: LD_INT 4
12302: PPUSH
12303: LD_VAR 0 10
12307: PPUSH
12308: CALL_OW 380
// un := CreateHuman ;
12312: LD_ADDR_VAR 0 4
12316: PUSH
12317: CALL_OW 44
12321: ST_TO_ADDR
// Beta_Squad := Beta_Squad ^ un ;
12322: LD_ADDR_EXP 40
12326: PUSH
12327: LD_EXP 40
12331: PUSH
12332: LD_VAR 0 4
12336: ADD
12337: ST_TO_ADDR
// end ;
12338: GO 12294
12340: POP
12341: POP
// for i = 1 to tank do
12342: LD_ADDR_VAR 0 3
12346: PUSH
12347: DOUBLE
12348: LD_INT 1
12350: DEC
12351: ST_TO_ADDR
12352: LD_VAR 0 8
12356: PUSH
12357: FOR_TO
12358: IFFALSE 12471
// begin Randomize ;
12360: CALL_OW 10
// vc_chassis := us_medium_tracked ;
12364: LD_ADDR_OWVAR 37
12368: PUSH
12369: LD_INT 3
12371: ST_TO_ADDR
// vc_engine := engine_solar ;
12372: LD_ADDR_OWVAR 39
12376: PUSH
12377: LD_INT 2
12379: ST_TO_ADDR
// vc_control := control_manual ;
12380: LD_ADDR_OWVAR 38
12384: PUSH
12385: LD_INT 1
12387: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ Rand ( 1 , 2 ) ] ;
12388: LD_ADDR_OWVAR 40
12392: PUSH
12393: LD_INT 4
12395: PUSH
12396: LD_INT 5
12398: PUSH
12399: EMPTY
12400: LIST
12401: LIST
12402: PUSH
12403: LD_INT 1
12405: PPUSH
12406: LD_INT 2
12408: PPUSH
12409: CALL_OW 12
12413: ARRAY
12414: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
12415: LD_ADDR_OWVAR 41
12419: PUSH
12420: LD_INT 35
12422: PPUSH
12423: LD_INT 55
12425: PPUSH
12426: CALL_OW 12
12430: ST_TO_ADDR
// un := CreateVehicle ;
12431: LD_ADDR_VAR 0 4
12435: PUSH
12436: CALL_OW 45
12440: ST_TO_ADDR
// SetTag ( un , 5 ) ;
12441: LD_VAR 0 4
12445: PPUSH
12446: LD_INT 5
12448: PPUSH
12449: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12453: LD_ADDR_EXP 40
12457: PUSH
12458: LD_EXP 40
12462: PUSH
12463: LD_VAR 0 4
12467: ADD
12468: ST_TO_ADDR
// end ;
12469: GO 12357
12471: POP
12472: POP
// if cargo then
12473: LD_VAR 0 9
12477: IFFALSE 12580
// begin vc_chassis := us_medium_tracked ;
12479: LD_ADDR_OWVAR 37
12483: PUSH
12484: LD_INT 3
12486: ST_TO_ADDR
// vc_engine := engine_solar ;
12487: LD_ADDR_OWVAR 39
12491: PUSH
12492: LD_INT 2
12494: ST_TO_ADDR
// vc_control := control_manual ;
12495: LD_ADDR_OWVAR 38
12499: PUSH
12500: LD_INT 1
12502: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
12503: LD_ADDR_OWVAR 40
12507: PUSH
12508: LD_INT 12
12510: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
12511: LD_ADDR_OWVAR 41
12515: PUSH
12516: LD_INT 35
12518: PPUSH
12519: LD_INT 55
12521: PPUSH
12522: CALL_OW 12
12526: ST_TO_ADDR
// un := CreateVehicle ;
12527: LD_ADDR_VAR 0 4
12531: PUSH
12532: CALL_OW 45
12536: ST_TO_ADDR
// SetTag ( un , 5 ) ;
12537: LD_VAR 0 4
12541: PPUSH
12542: LD_INT 5
12544: PPUSH
12545: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12549: LD_ADDR_EXP 40
12553: PUSH
12554: LD_EXP 40
12558: PUSH
12559: LD_VAR 0 4
12563: ADD
12564: ST_TO_ADDR
// SetCargo ( un , mat_cans , 60 ) ;
12565: LD_VAR 0 4
12569: PPUSH
12570: LD_INT 1
12572: PPUSH
12573: LD_INT 60
12575: PPUSH
12576: CALL_OW 290
// end ; end ;
12580: LD_VAR 0 2
12584: RET
// export Gamma_Squad ; export function AddGammaSquad ( num ) ; var i , un , sold , eng , sci , mech , tank , cargo , skill ; begin
12585: LD_INT 0
12587: PPUSH
12588: PPUSH
12589: PPUSH
12590: PPUSH
12591: PPUSH
12592: PPUSH
12593: PPUSH
12594: PPUSH
12595: PPUSH
12596: PPUSH
// uc_side := 4 ;
12597: LD_ADDR_OWVAR 20
12601: PUSH
12602: LD_INT 4
12604: ST_TO_ADDR
// uc_nation := 1 ;
12605: LD_ADDR_OWVAR 21
12609: PUSH
12610: LD_INT 1
12612: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
12613: LD_ADDR_VAR 0 11
12617: PUSH
12618: LD_INT 6
12620: PUSH
12621: LD_INT 5
12623: PUSH
12624: LD_INT 4
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: LIST
12631: PUSH
12632: LD_OWVAR 67
12636: ARRAY
12637: ST_TO_ADDR
// Gamma_Squad := [ ] ;
12638: LD_ADDR_EXP 41
12642: PUSH
12643: EMPTY
12644: ST_TO_ADDR
// case num of 1 :
12645: LD_VAR 0 1
12649: PUSH
12650: LD_INT 1
12652: DOUBLE
12653: EQUAL
12654: IFTRUE 12658
12656: GO 12709
12658: POP
// begin sold := 2 ;
12659: LD_ADDR_VAR 0 5
12663: PUSH
12664: LD_INT 2
12666: ST_TO_ADDR
// eng := 2 ;
12667: LD_ADDR_VAR 0 6
12671: PUSH
12672: LD_INT 2
12674: ST_TO_ADDR
// sci := 0 ;
12675: LD_ADDR_VAR 0 7
12679: PUSH
12680: LD_INT 0
12682: ST_TO_ADDR
// mech := 1 ;
12683: LD_ADDR_VAR 0 8
12687: PUSH
12688: LD_INT 1
12690: ST_TO_ADDR
// tank := 0 ;
12691: LD_ADDR_VAR 0 9
12695: PUSH
12696: LD_INT 0
12698: ST_TO_ADDR
// cargo := 1 ;
12699: LD_ADDR_VAR 0 10
12703: PUSH
12704: LD_INT 1
12706: ST_TO_ADDR
// end ; 2 :
12707: GO 12828
12709: LD_INT 2
12711: DOUBLE
12712: EQUAL
12713: IFTRUE 12717
12715: GO 12768
12717: POP
// begin sold := 1 ;
12718: LD_ADDR_VAR 0 5
12722: PUSH
12723: LD_INT 1
12725: ST_TO_ADDR
// eng := 2 ;
12726: LD_ADDR_VAR 0 6
12730: PUSH
12731: LD_INT 2
12733: ST_TO_ADDR
// sci := 0 ;
12734: LD_ADDR_VAR 0 7
12738: PUSH
12739: LD_INT 0
12741: ST_TO_ADDR
// mech := 1 ;
12742: LD_ADDR_VAR 0 8
12746: PUSH
12747: LD_INT 1
12749: ST_TO_ADDR
// tank := 0 ;
12750: LD_ADDR_VAR 0 9
12754: PUSH
12755: LD_INT 0
12757: ST_TO_ADDR
// cargo := 1 ;
12758: LD_ADDR_VAR 0 10
12762: PUSH
12763: LD_INT 1
12765: ST_TO_ADDR
// end ; 3 :
12766: GO 12828
12768: LD_INT 3
12770: DOUBLE
12771: EQUAL
12772: IFTRUE 12776
12774: GO 12827
12776: POP
// begin sold := 1 ;
12777: LD_ADDR_VAR 0 5
12781: PUSH
12782: LD_INT 1
12784: ST_TO_ADDR
// eng := 1 ;
12785: LD_ADDR_VAR 0 6
12789: PUSH
12790: LD_INT 1
12792: ST_TO_ADDR
// sci := 0 ;
12793: LD_ADDR_VAR 0 7
12797: PUSH
12798: LD_INT 0
12800: ST_TO_ADDR
// mech := 1 ;
12801: LD_ADDR_VAR 0 8
12805: PUSH
12806: LD_INT 1
12808: ST_TO_ADDR
// tank := 0 ;
12809: LD_ADDR_VAR 0 9
12813: PUSH
12814: LD_INT 0
12816: ST_TO_ADDR
// cargo := 1 ;
12817: LD_ADDR_VAR 0 10
12821: PUSH
12822: LD_INT 1
12824: ST_TO_ADDR
// end ; end ;
12825: GO 12828
12827: POP
// for i = 1 to sold do
12828: LD_ADDR_VAR 0 3
12832: PUSH
12833: DOUBLE
12834: LD_INT 1
12836: DEC
12837: ST_TO_ADDR
12838: LD_VAR 0 5
12842: PUSH
12843: FOR_TO
12844: IFFALSE 12916
// begin if i = 1 then
12846: LD_VAR 0 3
12850: PUSH
12851: LD_INT 1
12853: EQUAL
12854: IFFALSE 12873
// PrepareHuman ( sex_male , 1 , skill ) else
12856: LD_INT 1
12858: PPUSH
12859: LD_INT 1
12861: PPUSH
12862: LD_VAR 0 11
12866: PPUSH
12867: CALL_OW 380
12871: GO 12888
// PrepareHuman ( false , 1 , skill ) ;
12873: LD_INT 0
12875: PPUSH
12876: LD_INT 1
12878: PPUSH
12879: LD_VAR 0 11
12883: PPUSH
12884: CALL_OW 380
// un := CreateHuman ;
12888: LD_ADDR_VAR 0 4
12892: PUSH
12893: CALL_OW 44
12897: ST_TO_ADDR
// Gamma_Squad := Gamma_Squad ^ un ;
12898: LD_ADDR_EXP 41
12902: PUSH
12903: LD_EXP 41
12907: PUSH
12908: LD_VAR 0 4
12912: ADD
12913: ST_TO_ADDR
// end ;
12914: GO 12843
12916: POP
12917: POP
// for i = 1 to mech do
12918: LD_ADDR_VAR 0 3
12922: PUSH
12923: DOUBLE
12924: LD_INT 1
12926: DEC
12927: ST_TO_ADDR
12928: LD_VAR 0 8
12932: PUSH
12933: FOR_TO
12934: IFFALSE 12991
// begin PrepareHuman ( false , 3 , skill ) ;
12936: LD_INT 0
12938: PPUSH
12939: LD_INT 3
12941: PPUSH
12942: LD_VAR 0 11
12946: PPUSH
12947: CALL_OW 380
// un := CreateHuman ;
12951: LD_ADDR_VAR 0 4
12955: PUSH
12956: CALL_OW 44
12960: ST_TO_ADDR
// SetTag ( un , 3 ) ;
12961: LD_VAR 0 4
12965: PPUSH
12966: LD_INT 3
12968: PPUSH
12969: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
12973: LD_ADDR_EXP 41
12977: PUSH
12978: LD_EXP 41
12982: PUSH
12983: LD_VAR 0 4
12987: ADD
12988: ST_TO_ADDR
// end ;
12989: GO 12933
12991: POP
12992: POP
// for i = 1 to eng do
12993: LD_ADDR_VAR 0 3
12997: PUSH
12998: DOUBLE
12999: LD_INT 1
13001: DEC
13002: ST_TO_ADDR
13003: LD_VAR 0 6
13007: PUSH
13008: FOR_TO
13009: IFFALSE 13054
// begin PrepareHuman ( false , 2 , skill ) ;
13011: LD_INT 0
13013: PPUSH
13014: LD_INT 2
13016: PPUSH
13017: LD_VAR 0 11
13021: PPUSH
13022: CALL_OW 380
// un := CreateHuman ;
13026: LD_ADDR_VAR 0 4
13030: PUSH
13031: CALL_OW 44
13035: ST_TO_ADDR
// Gamma_Squad := Gamma_Squad ^ un ;
13036: LD_ADDR_EXP 41
13040: PUSH
13041: LD_EXP 41
13045: PUSH
13046: LD_VAR 0 4
13050: ADD
13051: ST_TO_ADDR
// end ;
13052: GO 13008
13054: POP
13055: POP
// for i = 1 to tank do
13056: LD_ADDR_VAR 0 3
13060: PUSH
13061: DOUBLE
13062: LD_INT 1
13064: DEC
13065: ST_TO_ADDR
13066: LD_VAR 0 9
13070: PUSH
13071: FOR_TO
13072: IFFALSE 13185
// begin Randomize ;
13074: CALL_OW 10
// vc_chassis := us_medium_wheeled ;
13078: LD_ADDR_OWVAR 37
13082: PUSH
13083: LD_INT 2
13085: ST_TO_ADDR
// vc_engine := engine_siberite ;
13086: LD_ADDR_OWVAR 39
13090: PUSH
13091: LD_INT 3
13093: ST_TO_ADDR
// vc_control := control_manual ;
13094: LD_ADDR_OWVAR 38
13098: PUSH
13099: LD_INT 1
13101: ST_TO_ADDR
// vc_weapon := [ us_rocket_launcher , us_laser ] [ Rand ( 1 , 2 ) ] ;
13102: LD_ADDR_OWVAR 40
13106: PUSH
13107: LD_INT 7
13109: PUSH
13110: LD_INT 9
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: PUSH
13117: LD_INT 1
13119: PPUSH
13120: LD_INT 2
13122: PPUSH
13123: CALL_OW 12
13127: ARRAY
13128: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13129: LD_ADDR_OWVAR 41
13133: PUSH
13134: LD_INT 35
13136: PPUSH
13137: LD_INT 55
13139: PPUSH
13140: CALL_OW 12
13144: ST_TO_ADDR
// un := CreateVehicle ;
13145: LD_ADDR_VAR 0 4
13149: PUSH
13150: CALL_OW 45
13154: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13155: LD_VAR 0 4
13159: PPUSH
13160: LD_INT 5
13162: PPUSH
13163: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
13167: LD_ADDR_EXP 41
13171: PUSH
13172: LD_EXP 41
13176: PUSH
13177: LD_VAR 0 4
13181: ADD
13182: ST_TO_ADDR
// end ;
13183: GO 13071
13185: POP
13186: POP
// if cargo then
13187: LD_VAR 0 10
13191: IFFALSE 13309
// begin vc_chassis := us_medium_tracked ;
13193: LD_ADDR_OWVAR 37
13197: PUSH
13198: LD_INT 3
13200: ST_TO_ADDR
// vc_engine := engine_combustion ;
13201: LD_ADDR_OWVAR 39
13205: PUSH
13206: LD_INT 1
13208: ST_TO_ADDR
// vc_control := control_manual ;
13209: LD_ADDR_OWVAR 38
13213: PUSH
13214: LD_INT 1
13216: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
13217: LD_ADDR_OWVAR 40
13221: PUSH
13222: LD_INT 12
13224: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13225: LD_ADDR_OWVAR 41
13229: PUSH
13230: LD_INT 35
13232: PPUSH
13233: LD_INT 55
13235: PPUSH
13236: CALL_OW 12
13240: ST_TO_ADDR
// un := CreateVehicle ;
13241: LD_ADDR_VAR 0 4
13245: PUSH
13246: CALL_OW 45
13250: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13251: LD_VAR 0 4
13255: PPUSH
13256: LD_INT 5
13258: PPUSH
13259: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
13263: LD_ADDR_EXP 41
13267: PUSH
13268: LD_EXP 41
13272: PUSH
13273: LD_VAR 0 4
13277: ADD
13278: ST_TO_ADDR
// SetCargo ( un , 3 , 30 ) ;
13279: LD_VAR 0 4
13283: PPUSH
13284: LD_INT 3
13286: PPUSH
13287: LD_INT 30
13289: PPUSH
13290: CALL_OW 290
// SetCargo ( un , 1 , 40 ) ;
13294: LD_VAR 0 4
13298: PPUSH
13299: LD_INT 1
13301: PPUSH
13302: LD_INT 40
13304: PPUSH
13305: CALL_OW 290
// end ; end ;
13309: LD_VAR 0 2
13313: RET
// export Zeta_Squad ; export function AddZetaSquad ( ) ; var i , un , sold , eng , sci , mech , tank , cargo , skill ; begin
13314: LD_INT 0
13316: PPUSH
13317: PPUSH
13318: PPUSH
13319: PPUSH
13320: PPUSH
13321: PPUSH
13322: PPUSH
13323: PPUSH
13324: PPUSH
13325: PPUSH
// uc_side := 4 ;
13326: LD_ADDR_OWVAR 20
13330: PUSH
13331: LD_INT 4
13333: ST_TO_ADDR
// uc_nation := 1 ;
13334: LD_ADDR_OWVAR 21
13338: PUSH
13339: LD_INT 1
13341: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
13342: LD_ADDR_VAR 0 10
13346: PUSH
13347: LD_INT 6
13349: PUSH
13350: LD_INT 5
13352: PUSH
13353: LD_INT 4
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: LIST
13360: PUSH
13361: LD_OWVAR 67
13365: ARRAY
13366: ST_TO_ADDR
// Zeta_Squad := [ ] ;
13367: LD_ADDR_EXP 42
13371: PUSH
13372: EMPTY
13373: ST_TO_ADDR
// sold := 1 ;
13374: LD_ADDR_VAR 0 4
13378: PUSH
13379: LD_INT 1
13381: ST_TO_ADDR
// eng := 0 ;
13382: LD_ADDR_VAR 0 5
13386: PUSH
13387: LD_INT 0
13389: ST_TO_ADDR
// sci := 0 ;
13390: LD_ADDR_VAR 0 6
13394: PUSH
13395: LD_INT 0
13397: ST_TO_ADDR
// mech := 3 ;
13398: LD_ADDR_VAR 0 7
13402: PUSH
13403: LD_INT 3
13405: ST_TO_ADDR
// tank := 3 ;
13406: LD_ADDR_VAR 0 8
13410: PUSH
13411: LD_INT 3
13413: ST_TO_ADDR
// cargo := 0 ;
13414: LD_ADDR_VAR 0 9
13418: PUSH
13419: LD_INT 0
13421: ST_TO_ADDR
// for i = 1 to sold do
13422: LD_ADDR_VAR 0 2
13426: PUSH
13427: DOUBLE
13428: LD_INT 1
13430: DEC
13431: ST_TO_ADDR
13432: LD_VAR 0 4
13436: PUSH
13437: FOR_TO
13438: IFFALSE 13510
// begin if i = 1 then
13440: LD_VAR 0 2
13444: PUSH
13445: LD_INT 1
13447: EQUAL
13448: IFFALSE 13467
// PrepareHuman ( sex_male , 1 , skill ) else
13450: LD_INT 1
13452: PPUSH
13453: LD_INT 1
13455: PPUSH
13456: LD_VAR 0 10
13460: PPUSH
13461: CALL_OW 380
13465: GO 13482
// PrepareHuman ( false , 1 , skill ) ;
13467: LD_INT 0
13469: PPUSH
13470: LD_INT 1
13472: PPUSH
13473: LD_VAR 0 10
13477: PPUSH
13478: CALL_OW 380
// un := CreateHuman ;
13482: LD_ADDR_VAR 0 3
13486: PUSH
13487: CALL_OW 44
13491: ST_TO_ADDR
// Zeta_Squad := Zeta_Squad ^ un ;
13492: LD_ADDR_EXP 42
13496: PUSH
13497: LD_EXP 42
13501: PUSH
13502: LD_VAR 0 3
13506: ADD
13507: ST_TO_ADDR
// end ;
13508: GO 13437
13510: POP
13511: POP
// for i = 1 to mech do
13512: LD_ADDR_VAR 0 2
13516: PUSH
13517: DOUBLE
13518: LD_INT 1
13520: DEC
13521: ST_TO_ADDR
13522: LD_VAR 0 7
13526: PUSH
13527: FOR_TO
13528: IFFALSE 13585
// begin PrepareHuman ( false , 3 , skill ) ;
13530: LD_INT 0
13532: PPUSH
13533: LD_INT 3
13535: PPUSH
13536: LD_VAR 0 10
13540: PPUSH
13541: CALL_OW 380
// un := CreateHuman ;
13545: LD_ADDR_VAR 0 3
13549: PUSH
13550: CALL_OW 44
13554: ST_TO_ADDR
// SetTag ( un , 3 ) ;
13555: LD_VAR 0 3
13559: PPUSH
13560: LD_INT 3
13562: PPUSH
13563: CALL_OW 109
// Zeta_Squad := Zeta_Squad ^ un ;
13567: LD_ADDR_EXP 42
13571: PUSH
13572: LD_EXP 42
13576: PUSH
13577: LD_VAR 0 3
13581: ADD
13582: ST_TO_ADDR
// end ;
13583: GO 13527
13585: POP
13586: POP
// for i = 1 to tank do
13587: LD_ADDR_VAR 0 2
13591: PUSH
13592: DOUBLE
13593: LD_INT 1
13595: DEC
13596: ST_TO_ADDR
13597: LD_VAR 0 8
13601: PUSH
13602: FOR_TO
13603: IFFALSE 13849
// begin Randomize ;
13605: CALL_OW 10
// if i < 3 then
13609: LD_VAR 0 2
13613: PUSH
13614: LD_INT 3
13616: LESS
13617: IFFALSE 13726
// begin vc_chassis := us_medium_tracked ;
13619: LD_ADDR_OWVAR 37
13623: PUSH
13624: LD_INT 3
13626: ST_TO_ADDR
// vc_engine := engine_combustion ;
13627: LD_ADDR_OWVAR 39
13631: PUSH
13632: LD_INT 1
13634: ST_TO_ADDR
// vc_control := control_manual ;
13635: LD_ADDR_OWVAR 38
13639: PUSH
13640: LD_INT 1
13642: ST_TO_ADDR
// vc_weapon := [ us_light_gun , us_laser ] [ Rand ( 1 , 2 ) ] ;
13643: LD_ADDR_OWVAR 40
13647: PUSH
13648: LD_INT 3
13650: PUSH
13651: LD_INT 9
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: PUSH
13658: LD_INT 1
13660: PPUSH
13661: LD_INT 2
13663: PPUSH
13664: CALL_OW 12
13668: ARRAY
13669: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13670: LD_ADDR_OWVAR 41
13674: PUSH
13675: LD_INT 35
13677: PPUSH
13678: LD_INT 55
13680: PPUSH
13681: CALL_OW 12
13685: ST_TO_ADDR
// un := CreateVehicle ;
13686: LD_ADDR_VAR 0 3
13690: PUSH
13691: CALL_OW 45
13695: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13696: LD_VAR 0 3
13700: PPUSH
13701: LD_INT 5
13703: PPUSH
13704: CALL_OW 109
// Zeta_Squad := Zeta_Squad ^ un ;
13708: LD_ADDR_EXP 42
13712: PUSH
13713: LD_EXP 42
13717: PUSH
13718: LD_VAR 0 3
13722: ADD
13723: ST_TO_ADDR
// end else
13724: GO 13847
// begin uc_nation := 3 ;
13726: LD_ADDR_OWVAR 21
13730: PUSH
13731: LD_INT 3
13733: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
13734: LD_ADDR_OWVAR 37
13738: PUSH
13739: LD_INT 22
13741: ST_TO_ADDR
// vc_engine := engine_combustion ;
13742: LD_ADDR_OWVAR 39
13746: PUSH
13747: LD_INT 1
13749: ST_TO_ADDR
// vc_control := control_manual ;
13750: LD_ADDR_OWVAR 38
13754: PUSH
13755: LD_INT 1
13757: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
13758: LD_ADDR_OWVAR 40
13762: PUSH
13763: LD_INT 51
13765: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13766: LD_ADDR_OWVAR 41
13770: PUSH
13771: LD_INT 35
13773: PPUSH
13774: LD_INT 55
13776: PPUSH
13777: CALL_OW 12
13781: ST_TO_ADDR
// un := CreateVehicle ;
13782: LD_ADDR_VAR 0 3
13786: PUSH
13787: CALL_OW 45
13791: ST_TO_ADDR
// SetLives ( un , 496 ) ;
13792: LD_VAR 0 3
13796: PPUSH
13797: LD_INT 496
13799: PPUSH
13800: CALL_OW 234
// SetTag ( un , 5 ) ;
13804: LD_VAR 0 3
13808: PPUSH
13809: LD_INT 5
13811: PPUSH
13812: CALL_OW 109
// SetCargo ( un , mat_oil , 100 ) ;
13816: LD_VAR 0 3
13820: PPUSH
13821: LD_INT 2
13823: PPUSH
13824: LD_INT 100
13826: PPUSH
13827: CALL_OW 290
// Zeta_Squad := Zeta_Squad ^ un ;
13831: LD_ADDR_EXP 42
13835: PUSH
13836: LD_EXP 42
13840: PUSH
13841: LD_VAR 0 3
13845: ADD
13846: ST_TO_ADDR
// end ; end ;
13847: GO 13602
13849: POP
13850: POP
// end ; end_of_file
13851: LD_VAR 0 1
13855: RET
// export function Action ; begin
13856: LD_INT 0
13858: PPUSH
// InGameOn ;
13859: CALL_OW 8
// CenterNowOnXY ( 151 , 107 ) ;
13863: LD_INT 151
13865: PPUSH
13866: LD_INT 107
13868: PPUSH
13869: CALL_OW 86
// PlaceUnitXY ( guyA , 171 , 108 , false ) ;
13873: LD_EXP 38
13877: PPUSH
13878: LD_INT 171
13880: PPUSH
13881: LD_INT 108
13883: PPUSH
13884: LD_INT 0
13886: PPUSH
13887: CALL_OW 48
// PlaceUnitXY ( guyB , 172 , 110 , false ) ;
13891: LD_EXP 39
13895: PPUSH
13896: LD_INT 172
13898: PPUSH
13899: LD_INT 110
13901: PPUSH
13902: LD_INT 0
13904: PPUSH
13905: CALL_OW 48
// ComMoveXY ( guyA , 156 , 107 ) ;
13909: LD_EXP 38
13913: PPUSH
13914: LD_INT 156
13916: PPUSH
13917: LD_INT 107
13919: PPUSH
13920: CALL_OW 111
// ComMoveXY ( guyB , 154 , 105 ) ;
13924: LD_EXP 39
13928: PPUSH
13929: LD_INT 154
13931: PPUSH
13932: LD_INT 105
13934: PPUSH
13935: CALL_OW 111
// repeat Wait ( 0 0$0.1 ) ;
13939: LD_INT 4
13941: PPUSH
13942: CALL_OW 67
// until GetX ( guyA ) = 156 and GetY ( guyA ) = 107 ;
13946: LD_EXP 38
13950: PPUSH
13951: CALL_OW 250
13955: PUSH
13956: LD_INT 156
13958: EQUAL
13959: PUSH
13960: LD_EXP 38
13964: PPUSH
13965: CALL_OW 251
13969: PUSH
13970: LD_INT 107
13972: EQUAL
13973: AND
13974: IFFALSE 13939
// ComTurnUnit ( [ guyA , guyB ] , us_dep1 ) ;
13976: LD_EXP 38
13980: PUSH
13981: LD_EXP 39
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: PPUSH
13990: LD_INT 35
13992: PPUSH
13993: CALL_OW 119
// Say ( guyA , D1-A-1 ) ;
13997: LD_EXP 38
14001: PPUSH
14002: LD_STRING D1-A-1
14004: PPUSH
14005: CALL_OW 88
// Say ( guyB , D1-B-1 ) ;
14009: LD_EXP 39
14013: PPUSH
14014: LD_STRING D1-B-1
14016: PPUSH
14017: CALL_OW 88
// Say ( guyA , D1-A-2 ) ;
14021: LD_EXP 38
14025: PPUSH
14026: LD_STRING D1-A-2
14028: PPUSH
14029: CALL_OW 88
// Say ( guyB , D1-B-2 ) ;
14033: LD_EXP 39
14037: PPUSH
14038: LD_STRING D1-B-2
14040: PPUSH
14041: CALL_OW 88
// ComMoveXY ( [ guyA , guyB ] , 147 , 108 ) ;
14045: LD_EXP 38
14049: PUSH
14050: LD_EXP 39
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: PPUSH
14059: LD_INT 147
14061: PPUSH
14062: LD_INT 108
14064: PPUSH
14065: CALL_OW 111
// Say ( guyA , D1-A-3 ) ;
14069: LD_EXP 38
14073: PPUSH
14074: LD_STRING D1-A-3
14076: PPUSH
14077: CALL_OW 88
// repeat Wait ( 0 0$0.1 ) ;
14081: LD_INT 4
14083: PPUSH
14084: CALL_OW 67
// until GetDistUnits ( guyA , us_dep1 ) < 8 ;
14088: LD_EXP 38
14092: PPUSH
14093: LD_INT 35
14095: PPUSH
14096: CALL_OW 296
14100: PUSH
14101: LD_INT 8
14103: LESS
14104: IFFALSE 14081
// ComTurnUnit ( guyA , guyB ) ;
14106: LD_EXP 38
14110: PPUSH
14111: LD_EXP 39
14115: PPUSH
14116: CALL_OW 119
// ComTurnUnit ( guyB , guyA ) ;
14120: LD_EXP 39
14124: PPUSH
14125: LD_EXP 38
14129: PPUSH
14130: CALL_OW 119
// Say ( guyA , D1-A-10 ) ;
14134: LD_EXP 38
14138: PPUSH
14139: LD_STRING D1-A-10
14141: PPUSH
14142: CALL_OW 88
// Say ( guyB , D1-B-10 ) ;
14146: LD_EXP 39
14150: PPUSH
14151: LD_STRING D1-B-10
14153: PPUSH
14154: CALL_OW 88
// Say ( guyA , D1-A-11 ) ;
14158: LD_EXP 38
14162: PPUSH
14163: LD_STRING D1-A-11
14165: PPUSH
14166: CALL_OW 88
// Say ( guyB , D1-B-11 ) ;
14170: LD_EXP 39
14174: PPUSH
14175: LD_STRING D1-B-11
14177: PPUSH
14178: CALL_OW 88
// Say ( guyA , D1-A-12 ) ;
14182: LD_EXP 38
14186: PPUSH
14187: LD_STRING D1-A-12
14189: PPUSH
14190: CALL_OW 88
// Say ( guyB , D1-B-12 ) ;
14194: LD_EXP 39
14198: PPUSH
14199: LD_STRING D1-B-12
14201: PPUSH
14202: CALL_OW 88
// Say ( guyA , D1-A-13 ) ;
14206: LD_EXP 38
14210: PPUSH
14211: LD_STRING D1-A-13
14213: PPUSH
14214: CALL_OW 88
// Say ( guyB , D1-B-13 ) ;
14218: LD_EXP 39
14222: PPUSH
14223: LD_STRING D1-B-13
14225: PPUSH
14226: CALL_OW 88
// Say ( guyA , D1-A-14 ) ;
14230: LD_EXP 38
14234: PPUSH
14235: LD_STRING D1-A-14
14237: PPUSH
14238: CALL_OW 88
// Say ( guyB , D1-B-14 ) ;
14242: LD_EXP 39
14246: PPUSH
14247: LD_STRING D1-B-14
14249: PPUSH
14250: CALL_OW 88
// Say ( guyA , D1-A-15 ) ;
14254: LD_EXP 38
14258: PPUSH
14259: LD_STRING D1-A-15
14261: PPUSH
14262: CALL_OW 88
// Say ( guyB , D1-B-15 ) ;
14266: LD_EXP 39
14270: PPUSH
14271: LD_STRING D1-B-15
14273: PPUSH
14274: CALL_OW 88
// Say ( guyA , D1-A-16 ) ;
14278: LD_EXP 38
14282: PPUSH
14283: LD_STRING D1-A-16
14285: PPUSH
14286: CALL_OW 88
// Say ( guyB , D1-B-16 ) ;
14290: LD_EXP 39
14294: PPUSH
14295: LD_STRING D1-B-16
14297: PPUSH
14298: CALL_OW 88
// Say ( guyA , D1-A-17 ) ;
14302: LD_EXP 38
14306: PPUSH
14307: LD_STRING D1-A-17
14309: PPUSH
14310: CALL_OW 88
// Say ( guyB , D1-B-17 ) ;
14314: LD_EXP 39
14318: PPUSH
14319: LD_STRING D1-B-17
14321: PPUSH
14322: CALL_OW 88
// Say ( guyA , D1-A-18 ) ;
14326: LD_EXP 38
14330: PPUSH
14331: LD_STRING D1-A-18
14333: PPUSH
14334: CALL_OW 88
// SetSide ( us_dep1 , 1 ) ;
14338: LD_INT 35
14340: PPUSH
14341: LD_INT 1
14343: PPUSH
14344: CALL_OW 235
// ComEnterUnit ( [ guyA , guyB ] , us_dep1 ) ;
14348: LD_EXP 38
14352: PUSH
14353: LD_EXP 39
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PPUSH
14362: LD_INT 35
14364: PPUSH
14365: CALL_OW 120
// repeat Wait ( 0 0$0.1 ) ;
14369: LD_INT 4
14371: PPUSH
14372: CALL_OW 67
// until IsInUnit ( guyA ) ;
14376: LD_EXP 38
14380: PPUSH
14381: CALL_OW 310
14385: IFFALSE 14369
// Wait ( 0 0$02 ) ;
14387: LD_INT 70
14389: PPUSH
14390: CALL_OW 67
// Say ( guyA , D1-A-19 ) ;
14394: LD_EXP 38
14398: PPUSH
14399: LD_STRING D1-A-19
14401: PPUSH
14402: CALL_OW 88
// Say ( guyB , D1-B-19 ) ;
14406: LD_EXP 39
14410: PPUSH
14411: LD_STRING D1-B-19
14413: PPUSH
14414: CALL_OW 88
// Say ( guyA , D1-A-20 ) ;
14418: LD_EXP 38
14422: PPUSH
14423: LD_STRING D1-A-20
14425: PPUSH
14426: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
14430: LD_INT 10
14432: PPUSH
14433: CALL_OW 67
// Say ( guyB , D1-B-20 ) ;
14437: LD_EXP 39
14441: PPUSH
14442: LD_STRING D1-B-20
14444: PPUSH
14445: CALL_OW 88
// Say ( guyA , D1-A-21 ) ;
14449: LD_EXP 38
14453: PPUSH
14454: LD_STRING D1-A-21
14456: PPUSH
14457: CALL_OW 88
// Say ( guyB , D1-B-21 ) ;
14461: LD_EXP 39
14465: PPUSH
14466: LD_STRING D1-B-21
14468: PPUSH
14469: CALL_OW 88
// Say ( guyA , D1-A-22 ) ;
14473: LD_EXP 38
14477: PPUSH
14478: LD_STRING D1-A-22
14480: PPUSH
14481: CALL_OW 88
// Say ( guyB , D1-B-22 ) ;
14485: LD_EXP 39
14489: PPUSH
14490: LD_STRING D1-B-22
14492: PPUSH
14493: CALL_OW 88
// Say ( guyA , D1-A-23 ) ;
14497: LD_EXP 38
14501: PPUSH
14502: LD_STRING D1-A-23
14504: PPUSH
14505: CALL_OW 88
// Say ( guyB , D1-B-23 ) ;
14509: LD_EXP 39
14513: PPUSH
14514: LD_STRING D1-B-23
14516: PPUSH
14517: CALL_OW 88
// Say ( guyA , D1-A-24 ) ;
14521: LD_EXP 38
14525: PPUSH
14526: LD_STRING D1-A-24
14528: PPUSH
14529: CALL_OW 88
// InGameOff ;
14533: CALL_OW 9
// ChangeMissionObjectives ( M_main ) ;
14537: LD_STRING M_main
14539: PPUSH
14540: CALL_OW 337
// ChangeSideFog ( 4 , 1 ) ;
14544: LD_INT 4
14546: PPUSH
14547: LD_INT 1
14549: PPUSH
14550: CALL_OW 343
// game_status := true ;
14554: LD_ADDR_EXP 29
14558: PUSH
14559: LD_INT 1
14561: ST_TO_ADDR
// end ;
14562: LD_VAR 0 1
14566: RET
// every 0 0$01 trigger GetLabs ( 1 ) > 0 do
14567: LD_INT 1
14569: PPUSH
14570: CALL 6358 0 1
14574: PUSH
14575: LD_INT 0
14577: GREATER
14578: IFFALSE 14680
14580: GO 14582
14582: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
14583: LD_INT 35
14585: PPUSH
14586: CALL_OW 67
// until BuildingStatus ( GetLabs ( 1 ) [ 1 ] ) <> bs_build ;
14590: LD_INT 1
14592: PPUSH
14593: CALL 6358 0 1
14597: PUSH
14598: LD_INT 1
14600: ARRAY
14601: PPUSH
14602: CALL_OW 461
14606: PUSH
14607: LD_INT 1
14609: NONEQUAL
14610: IFFALSE 14583
// if IsLive ( guyA ) and IsLive ( guyB ) and not helps_arrive then
14612: LD_EXP 38
14616: PPUSH
14617: CALL_OW 300
14621: PUSH
14622: LD_EXP 39
14626: PPUSH
14627: CALL_OW 300
14631: AND
14632: PUSH
14633: LD_EXP 30
14637: NOT
14638: AND
14639: IFFALSE 14665
// begin Say ( guyA , DL-A-1 ) ;
14641: LD_EXP 38
14645: PPUSH
14646: LD_STRING DL-A-1
14648: PPUSH
14649: CALL_OW 88
// Say ( guyB , DL-B-1 ) ;
14653: LD_EXP 39
14657: PPUSH
14658: LD_STRING DL-B-1
14660: PPUSH
14661: CALL_OW 88
// end ; if not helps_can_arrive then
14665: LD_EXP 31
14669: NOT
14670: IFFALSE 14680
// helps_can_arrive := true ;
14672: LD_ADDR_EXP 31
14676: PUSH
14677: LD_INT 1
14679: ST_TO_ADDR
// end ;
14680: END
// every 0 0$01 trigger GetLabs ( 1 ) > 0 and IsLive ( guyA ) and IsLive ( guyB ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman ] ] ) = 0 and See ( 1 , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , guyA ) ) do
14681: LD_INT 1
14683: PPUSH
14684: CALL 6358 0 1
14688: PUSH
14689: LD_INT 0
14691: GREATER
14692: PUSH
14693: LD_EXP 38
14697: PPUSH
14698: CALL_OW 300
14702: AND
14703: PUSH
14704: LD_EXP 39
14708: PPUSH
14709: CALL_OW 300
14713: AND
14714: PUSH
14715: LD_INT 22
14717: PUSH
14718: LD_INT 1
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PUSH
14725: LD_INT 25
14727: PUSH
14728: LD_INT 12
14730: PUSH
14731: EMPTY
14732: LIST
14733: LIST
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PPUSH
14739: CALL_OW 69
14743: PUSH
14744: LD_INT 0
14746: EQUAL
14747: AND
14748: PUSH
14749: LD_INT 1
14751: PPUSH
14752: LD_INT 25
14754: PUSH
14755: LD_INT 12
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: PPUSH
14762: CALL_OW 69
14766: PPUSH
14767: LD_EXP 38
14771: PPUSH
14772: CALL_OW 74
14776: PPUSH
14777: CALL_OW 292
14781: AND
14782: IFFALSE 14823
14784: GO 14786
14786: DISABLE
// begin Say ( guyA , DA-A-1 ) ;
14787: LD_EXP 38
14791: PPUSH
14792: LD_STRING DA-A-1
14794: PPUSH
14795: CALL_OW 88
// Say ( guyB , DA-B-1 ) ;
14799: LD_EXP 39
14803: PPUSH
14804: LD_STRING DA-B-1
14806: PPUSH
14807: CALL_OW 88
// Say ( guyA , DA-A-2 ) ;
14811: LD_EXP 38
14815: PPUSH
14816: LD_STRING DA-A-2
14818: PPUSH
14819: CALL_OW 88
// end ;
14823: END
// every 0 0$01 trigger game_status and GetDistUnitArea ( guyA , forest_path ) < 7 do
14824: LD_EXP 29
14828: PUSH
14829: LD_EXP 38
14833: PPUSH
14834: LD_INT 6
14836: PPUSH
14837: CALL_OW 299
14841: PUSH
14842: LD_INT 7
14844: LESS
14845: AND
14846: IFFALSE 14899
14848: GO 14850
14850: DISABLE
// begin CenterNowOnXY ( 117 , 50 ) ;
14851: LD_INT 117
14853: PPUSH
14854: LD_INT 50
14856: PPUSH
14857: CALL_OW 86
// Say ( GetHuman ( 1 ) [ 2 ] , D5-A-1 ) ;
14861: LD_INT 1
14863: PPUSH
14864: CALL 9995 0 1
14868: PUSH
14869: LD_INT 2
14871: ARRAY
14872: PPUSH
14873: LD_STRING D5-A-1
14875: PPUSH
14876: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 1 ] , D5-B-1 ) ;
14880: LD_INT 1
14882: PPUSH
14883: CALL 9995 0 1
14887: PUSH
14888: LD_INT 1
14890: ARRAY
14891: PPUSH
14892: LD_STRING D5-B-1
14894: PPUSH
14895: CALL_OW 88
// end ;
14899: END
// every 0 0$01 trigger FilterUnitsInArea ( river , [ f_side , 1 ] ) > 0 do
14900: LD_INT 7
14902: PPUSH
14903: LD_INT 22
14905: PUSH
14906: LD_INT 1
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: PPUSH
14913: CALL_OW 70
14917: PUSH
14918: LD_INT 0
14920: GREATER
14921: IFFALSE 15066
14923: GO 14925
14925: DISABLE
// begin Wait ( 0 0$03 ) ;
14926: LD_INT 105
14928: PPUSH
14929: CALL_OW 67
// DialogueOn ;
14933: CALL_OW 6
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-1 ) ;
14937: LD_INT 1
14939: PPUSH
14940: CALL 9995 0 1
14944: PUSH
14945: LD_INT 1
14947: ARRAY
14948: PPUSH
14949: LD_STRING D6-A-1
14951: PPUSH
14952: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D6-B-1 ) ;
14956: LD_INT 1
14958: PPUSH
14959: CALL 9995 0 1
14963: PUSH
14964: LD_INT 2
14966: ARRAY
14967: PPUSH
14968: LD_STRING D6-B-1
14970: PPUSH
14971: CALL_OW 88
// PlaceSeeing ( 95 , 8 , 1 , 20 ) ;
14975: LD_INT 95
14977: PPUSH
14978: LD_INT 8
14980: PPUSH
14981: LD_INT 1
14983: PPUSH
14984: LD_INT 20
14986: PPUSH
14987: CALL_OW 330
// DWait ( 0 0$0.3 ) ;
14991: LD_INT 10
14993: PPUSH
14994: CALL_OW 68
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-2 ) ;
14998: LD_INT 1
15000: PPUSH
15001: CALL 9995 0 1
15005: PUSH
15006: LD_INT 1
15008: ARRAY
15009: PPUSH
15010: LD_STRING D6-A-2
15012: PPUSH
15013: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D6-B-2 ) ;
15017: LD_INT 1
15019: PPUSH
15020: CALL 9995 0 1
15024: PUSH
15025: LD_INT 2
15027: ARRAY
15028: PPUSH
15029: LD_STRING D6-B-2
15031: PPUSH
15032: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-3 ) ;
15036: LD_INT 1
15038: PPUSH
15039: CALL 9995 0 1
15043: PUSH
15044: LD_INT 1
15046: ARRAY
15047: PPUSH
15048: LD_STRING D6-A-3
15050: PPUSH
15051: CALL_OW 88
// DialogueOff ;
15055: CALL_OW 7
// ChangeMissionObjectives ( M_base ) ;
15059: LD_STRING M_base
15061: PPUSH
15062: CALL_OW 337
// end ;
15066: END
// every 0 0$01 trigger not helps_arrive and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) > 0 do
15067: LD_EXP 30
15071: NOT
15072: PUSH
15073: LD_INT 22
15075: PUSH
15076: LD_INT 3
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: PUSH
15083: LD_INT 21
15085: PUSH
15086: LD_INT 2
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PPUSH
15097: CALL_OW 69
15101: PUSH
15102: LD_INT 0
15104: GREATER
15105: AND
15106: IFFALSE 15239
15108: GO 15110
15110: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
15111: LD_INT 35
15113: PPUSH
15114: CALL_OW 67
// until GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) , GetHuman ( 1 ) [ 1 ] ) , GetHuman ( 1 ) [ 1 ] ) < 7 ;
15118: LD_INT 22
15120: PUSH
15121: LD_INT 3
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: PUSH
15128: LD_INT 21
15130: PUSH
15131: LD_INT 2
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: PUSH
15138: EMPTY
15139: LIST
15140: LIST
15141: PPUSH
15142: CALL_OW 69
15146: PPUSH
15147: LD_INT 1
15149: PPUSH
15150: CALL 9995 0 1
15154: PUSH
15155: LD_INT 1
15157: ARRAY
15158: PPUSH
15159: CALL_OW 74
15163: PPUSH
15164: LD_INT 1
15166: PPUSH
15167: CALL 9995 0 1
15171: PUSH
15172: LD_INT 1
15174: ARRAY
15175: PPUSH
15176: CALL_OW 296
15180: PUSH
15181: LD_INT 7
15183: LESS
15184: IFFALSE 15111
// Say ( GetHuman ( 1 ) [ 1 ] , DR-A-1 ) ;
15186: LD_INT 1
15188: PPUSH
15189: CALL 9995 0 1
15193: PUSH
15194: LD_INT 1
15196: ARRAY
15197: PPUSH
15198: LD_STRING DR-A-1
15200: PPUSH
15201: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , DR-B-1 ) ;
15205: LD_INT 1
15207: PPUSH
15208: CALL 9995 0 1
15212: PUSH
15213: LD_INT 2
15215: ARRAY
15216: PPUSH
15217: LD_STRING DR-B-1
15219: PPUSH
15220: CALL_OW 88
// Wait ( 3 3$00 ) ;
15224: LD_INT 6300
15226: PPUSH
15227: CALL_OW 67
// ru_spotted := true ;
15231: LD_ADDR_EXP 16
15235: PUSH
15236: LD_INT 1
15238: ST_TO_ADDR
// end ;
15239: END
// every 0 0$01 trigger not IsLive ( us_dep1 ) do
15240: LD_INT 35
15242: PPUSH
15243: CALL_OW 300
15247: NOT
15248: IFFALSE 15272
15250: GO 15252
15252: DISABLE
// Say ( GetHuman ( 1 ) [ 1 ] , DDR-A-1 ) ;
15253: LD_INT 1
15255: PPUSH
15256: CALL 9995 0 1
15260: PUSH
15261: LD_INT 1
15263: ARRAY
15264: PPUSH
15265: LD_STRING DDR-A-1
15267: PPUSH
15268: CALL_OW 88
15272: END
// every 0 0$05 trigger GetBuilding ( 1 , b_siberite_mine ) do
15273: LD_INT 1
15275: PPUSH
15276: LD_INT 30
15278: PPUSH
15279: CALL 6209 0 2
15283: IFFALSE 15365
15285: GO 15287
15287: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
15288: LD_INT 35
15290: PPUSH
15291: CALL_OW 67
// until BuildingStatus ( GetBuilding ( 1 , b_siberite_mine ) [ 1 ] ) <> bs_build ;
15295: LD_INT 1
15297: PPUSH
15298: LD_INT 30
15300: PPUSH
15301: CALL 6209 0 2
15305: PUSH
15306: LD_INT 1
15308: ARRAY
15309: PPUSH
15310: CALL_OW 461
15314: PUSH
15315: LD_INT 1
15317: NONEQUAL
15318: IFFALSE 15288
// Say ( GetHuman ( 1 ) [ 1 ] , D8-A-1 ) ;
15320: LD_INT 1
15322: PPUSH
15323: CALL 9995 0 1
15327: PUSH
15328: LD_INT 1
15330: ARRAY
15331: PPUSH
15332: LD_STRING D8-A-1
15334: PPUSH
15335: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D8-B-1 ) ;
15339: LD_INT 1
15341: PPUSH
15342: CALL 9995 0 1
15346: PUSH
15347: LD_INT 2
15349: ARRAY
15350: PPUSH
15351: LD_STRING D8-B-1
15353: PPUSH
15354: CALL_OW 88
// ChangeMissionObjectives ( M_mineok ) ;
15358: LD_STRING M_mineok
15360: PPUSH
15361: CALL_OW 337
// end ;
15365: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) > 1 or ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) = 1 and not IsLive ( us_dep1 ) ) do
15366: LD_INT 22
15368: PUSH
15369: LD_INT 1
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PUSH
15376: LD_INT 30
15378: PUSH
15379: LD_INT 0
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: PUSH
15386: LD_INT 3
15388: PUSH
15389: LD_INT 57
15391: PUSH
15392: EMPTY
15393: LIST
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: LIST
15403: PPUSH
15404: CALL_OW 69
15408: PUSH
15409: LD_INT 1
15411: GREATER
15412: PUSH
15413: LD_INT 22
15415: PUSH
15416: LD_INT 1
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PUSH
15423: LD_INT 30
15425: PUSH
15426: LD_INT 0
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PUSH
15433: LD_INT 3
15435: PUSH
15436: LD_INT 57
15438: PUSH
15439: EMPTY
15440: LIST
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: LIST
15450: PPUSH
15451: CALL_OW 69
15455: PUSH
15456: LD_INT 1
15458: EQUAL
15459: PUSH
15460: LD_INT 35
15462: PPUSH
15463: CALL_OW 300
15467: NOT
15468: AND
15469: OR
15470: IFFALSE 15522
15472: GO 15474
15474: DISABLE
// begin Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , D7-A-1 ) ;
15475: LD_INT 22
15477: PUSH
15478: LD_INT 1
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: LD_INT 25
15487: PUSH
15488: LD_INT 2
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PPUSH
15499: CALL_OW 69
15503: PUSH
15504: LD_INT 1
15506: ARRAY
15507: PPUSH
15508: LD_STRING D7-A-1
15510: PPUSH
15511: CALL_OW 88
// ChangeMissionObjectives ( M_baseok ) ;
15515: LD_STRING M_baseok
15517: PPUSH
15518: CALL_OW 337
// end ;
15522: END
// every 0 0$01 trigger mine_ck do
15523: LD_EXP 35
15527: IFFALSE 15558
15529: GO 15531
15531: DISABLE
// begin Say ( GetHuman ( 1 ) [ 1 ] , D9-A-1 ) ;
15532: LD_INT 1
15534: PPUSH
15535: CALL 9995 0 1
15539: PUSH
15540: LD_INT 1
15542: ARRAY
15543: PPUSH
15544: LD_STRING D9-A-1
15546: PPUSH
15547: CALL_OW 88
// ChangeMissionObjectives ( M_minedest ) ;
15551: LD_STRING M_minedest
15553: PPUSH
15554: CALL_OW 337
// end ;
15558: END
// every 7 7$00 trigger game_status do var time , i , un , r , to_veh ;
15559: LD_EXP 29
15563: IFFALSE 16069
15565: GO 15567
15567: DISABLE
15568: LD_INT 0
15570: PPUSH
15571: PPUSH
15572: PPUSH
15573: PPUSH
15574: PPUSH
// begin AddBetaSquad ( Difficulty ) ;
15575: LD_OWVAR 67
15579: PPUSH
15580: CALL 11896 0 1
// if not helps_can_arrive then
15584: LD_EXP 31
15588: NOT
15589: IFFALSE 15617
// begin SayRadio ( Beta_Squad [ 1 ] , DB-Delay ) ;
15591: LD_EXP 40
15595: PUSH
15596: LD_INT 1
15598: ARRAY
15599: PPUSH
15600: LD_STRING DB-Delay
15602: PPUSH
15603: CALL_OW 94
// time := 10 10$00 ;
15607: LD_ADDR_VAR 0 1
15611: PUSH
15612: LD_INT 21000
15614: ST_TO_ADDR
// end else
15615: GO 15625
// time := 3 3$00 ;
15617: LD_ADDR_VAR 0 1
15621: PUSH
15622: LD_INT 6300
15624: ST_TO_ADDR
// repeat begin time := time - 0 0$01 ;
15625: LD_ADDR_VAR 0 1
15629: PUSH
15630: LD_VAR 0 1
15634: PUSH
15635: LD_INT 35
15637: MINUS
15638: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
15639: LD_INT 35
15641: PPUSH
15642: CALL_OW 67
// end until time = 0 0$00 ;
15646: LD_VAR 0 1
15650: PUSH
15651: LD_INT 0
15653: EQUAL
15654: IFFALSE 15625
// helps_arrive := true ;
15656: LD_ADDR_EXP 30
15660: PUSH
15661: LD_INT 1
15663: ST_TO_ADDR
// if IsLive ( guyA ) then
15664: LD_EXP 38
15668: PPUSH
15669: CALL_OW 300
15673: IFFALSE 15687
// r := guyA else
15675: LD_ADDR_VAR 0 4
15679: PUSH
15680: LD_EXP 38
15684: ST_TO_ADDR
15685: GO 15697
// r := guyB ;
15687: LD_ADDR_VAR 0 4
15691: PUSH
15692: LD_EXP 39
15696: ST_TO_ADDR
// SayRadio ( Beta_Squad [ 1 ] , D2-A-1 ) ;
15697: LD_EXP 40
15701: PUSH
15702: LD_INT 1
15704: ARRAY
15705: PPUSH
15706: LD_STRING D2-A-1
15708: PPUSH
15709: CALL_OW 94
// Say ( r , D2-B-1 ) ;
15713: LD_VAR 0 4
15717: PPUSH
15718: LD_STRING D2-B-1
15720: PPUSH
15721: CALL_OW 88
// SayRadio ( Beta_Squad [ 1 ] , D2-A-2 ) ;
15725: LD_EXP 40
15729: PUSH
15730: LD_INT 1
15732: ARRAY
15733: PPUSH
15734: LD_STRING D2-A-2
15736: PPUSH
15737: CALL_OW 94
// Say ( r , D2-B-2 ) ;
15741: LD_VAR 0 4
15745: PPUSH
15746: LD_STRING D2-B-2
15748: PPUSH
15749: CALL_OW 88
// SayRadio ( Beta_Squad [ 1 ] , D2-A-3 ) ;
15753: LD_EXP 40
15757: PUSH
15758: LD_INT 1
15760: ARRAY
15761: PPUSH
15762: LD_STRING D2-A-3
15764: PPUSH
15765: CALL_OW 94
// Say ( r , D2-B-3 ) ;
15769: LD_VAR 0 4
15773: PPUSH
15774: LD_STRING D2-B-3
15776: PPUSH
15777: CALL_OW 88
// to_veh := [ ] ;
15781: LD_ADDR_VAR 0 5
15785: PUSH
15786: EMPTY
15787: ST_TO_ADDR
// for i = 1 to Beta_Squad do
15788: LD_ADDR_VAR 0 2
15792: PUSH
15793: DOUBLE
15794: LD_INT 1
15796: DEC
15797: ST_TO_ADDR
15798: LD_EXP 40
15802: PUSH
15803: FOR_TO
15804: IFFALSE 16067
// begin if GetTag ( Beta_Squad [ i ] ) = 3 then
15806: LD_EXP 40
15810: PUSH
15811: LD_VAR 0 2
15815: ARRAY
15816: PPUSH
15817: CALL_OW 110
15821: PUSH
15822: LD_INT 3
15824: EQUAL
15825: IFFALSE 15851
// to_veh := to_veh ^ Beta_Squad [ i ] else
15827: LD_ADDR_VAR 0 5
15831: PUSH
15832: LD_VAR 0 5
15836: PUSH
15837: LD_EXP 40
15841: PUSH
15842: LD_VAR 0 2
15846: ARRAY
15847: ADD
15848: ST_TO_ADDR
15849: GO 15976
// if GetTag ( Beta_Squad [ i ] ) = 5 then
15851: LD_EXP 40
15855: PUSH
15856: LD_VAR 0 2
15860: ARRAY
15861: PPUSH
15862: CALL_OW 110
15866: PUSH
15867: LD_INT 5
15869: EQUAL
15870: IFFALSE 15955
// begin SetDir ( Beta_Squad [ i ] , 4 ) ;
15872: LD_EXP 40
15876: PUSH
15877: LD_VAR 0 2
15881: ARRAY
15882: PPUSH
15883: LD_INT 4
15885: PPUSH
15886: CALL_OW 233
// PlaceUnitArea ( Beta_Squad [ i ] , road_vehicle , false ) ;
15890: LD_EXP 40
15894: PUSH
15895: LD_VAR 0 2
15899: ARRAY
15900: PPUSH
15901: LD_INT 5
15903: PPUSH
15904: LD_INT 0
15906: PPUSH
15907: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Beta_Squad [ i ] ) ;
15911: LD_VAR 0 5
15915: PUSH
15916: LD_INT 1
15918: ARRAY
15919: PPUSH
15920: LD_EXP 40
15924: PUSH
15925: LD_VAR 0 2
15929: ARRAY
15930: PPUSH
15931: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
15935: LD_ADDR_VAR 0 5
15939: PUSH
15940: LD_VAR 0 5
15944: PPUSH
15945: LD_INT 1
15947: PPUSH
15948: CALL_OW 3
15952: ST_TO_ADDR
// end else
15953: GO 15976
// PlaceUnitArea ( Beta_Squad [ i ] , road_vehicle , false ) ;
15955: LD_EXP 40
15959: PUSH
15960: LD_VAR 0 2
15964: ARRAY
15965: PPUSH
15966: LD_INT 5
15968: PPUSH
15969: LD_INT 0
15971: PPUSH
15972: CALL_OW 49
// ComMoveXY ( Beta_Squad [ i ] , 165 , 105 ) ;
15976: LD_EXP 40
15980: PUSH
15981: LD_VAR 0 2
15985: ARRAY
15986: PPUSH
15987: LD_INT 165
15989: PPUSH
15990: LD_INT 105
15992: PPUSH
15993: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
15997: LD_INT 70
15999: PPUSH
16000: LD_INT 140
16002: PPUSH
16003: CALL_OW 12
16007: PPUSH
16008: CALL_OW 67
// SetSide ( Beta_Squad [ i ] , 1 ) ;
16012: LD_EXP 40
16016: PUSH
16017: LD_VAR 0 2
16021: ARRAY
16022: PPUSH
16023: LD_INT 1
16025: PPUSH
16026: CALL_OW 235
// if i = 1 then
16030: LD_VAR 0 2
16034: PUSH
16035: LD_INT 1
16037: EQUAL
16038: IFFALSE 16050
// CenterNowOnXY ( 168 , 109 ) ;
16040: LD_INT 168
16042: PPUSH
16043: LD_INT 109
16045: PPUSH
16046: CALL_OW 86
// ComStop ( Beta_Squad [ i ] ) ;
16050: LD_EXP 40
16054: PUSH
16055: LD_VAR 0 2
16059: ARRAY
16060: PPUSH
16061: CALL_OW 141
// end ;
16065: GO 15803
16067: POP
16068: POP
// end ;
16069: PPOPN 5
16071: END
// every 0 0$10 trigger helps_arrive do var i , to_veh ;
16072: LD_EXP 30
16076: IFFALSE 17105
16078: GO 16080
16080: DISABLE
16081: LD_INT 0
16083: PPUSH
16084: PPUSH
// begin Wait ( 5 5$00 ) ;
16085: LD_INT 10500
16087: PPUSH
16088: CALL_OW 67
// AddGammaSquad ( Difficulty ) ;
16092: LD_OWVAR 67
16096: PPUSH
16097: CALL 12585 0 1
// to_veh := [ ] ;
16101: LD_ADDR_VAR 0 2
16105: PUSH
16106: EMPTY
16107: ST_TO_ADDR
// for i = 1 to Gamma_Squad do
16108: LD_ADDR_VAR 0 1
16112: PUSH
16113: DOUBLE
16114: LD_INT 1
16116: DEC
16117: ST_TO_ADDR
16118: LD_EXP 41
16122: PUSH
16123: FOR_TO
16124: IFFALSE 16352
// begin if GetTag ( Gamma_Squad [ i ] ) = 3 then
16126: LD_EXP 41
16130: PUSH
16131: LD_VAR 0 1
16135: ARRAY
16136: PPUSH
16137: CALL_OW 110
16141: PUSH
16142: LD_INT 3
16144: EQUAL
16145: IFFALSE 16171
// to_veh := to_veh ^ Gamma_Squad [ i ] else
16147: LD_ADDR_VAR 0 2
16151: PUSH
16152: LD_VAR 0 2
16156: PUSH
16157: LD_EXP 41
16161: PUSH
16162: LD_VAR 0 1
16166: ARRAY
16167: ADD
16168: ST_TO_ADDR
16169: GO 16296
// if GetTag ( Gamma_Squad [ i ] ) = 5 then
16171: LD_EXP 41
16175: PUSH
16176: LD_VAR 0 1
16180: ARRAY
16181: PPUSH
16182: CALL_OW 110
16186: PUSH
16187: LD_INT 5
16189: EQUAL
16190: IFFALSE 16275
// begin SetDir ( Gamma_Squad [ i ] , 4 ) ;
16192: LD_EXP 41
16196: PUSH
16197: LD_VAR 0 1
16201: ARRAY
16202: PPUSH
16203: LD_INT 4
16205: PPUSH
16206: CALL_OW 233
// PlaceUnitArea ( Gamma_Squad [ i ] , road_vehicle , false ) ;
16210: LD_EXP 41
16214: PUSH
16215: LD_VAR 0 1
16219: ARRAY
16220: PPUSH
16221: LD_INT 5
16223: PPUSH
16224: LD_INT 0
16226: PPUSH
16227: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Gamma_Squad [ i ] ) ;
16231: LD_VAR 0 2
16235: PUSH
16236: LD_INT 1
16238: ARRAY
16239: PPUSH
16240: LD_EXP 41
16244: PUSH
16245: LD_VAR 0 1
16249: ARRAY
16250: PPUSH
16251: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
16255: LD_ADDR_VAR 0 2
16259: PUSH
16260: LD_VAR 0 2
16264: PPUSH
16265: LD_INT 1
16267: PPUSH
16268: CALL_OW 3
16272: ST_TO_ADDR
// end else
16273: GO 16296
// PlaceUnitArea ( Gamma_Squad [ i ] , road_vehicle , false ) ;
16275: LD_EXP 41
16279: PUSH
16280: LD_VAR 0 1
16284: ARRAY
16285: PPUSH
16286: LD_INT 5
16288: PPUSH
16289: LD_INT 0
16291: PPUSH
16292: CALL_OW 49
// ComMoveXY ( Gamma_Squad [ i ] , 164 , 104 ) ;
16296: LD_EXP 41
16300: PUSH
16301: LD_VAR 0 1
16305: ARRAY
16306: PPUSH
16307: LD_INT 164
16309: PPUSH
16310: LD_INT 104
16312: PPUSH
16313: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
16317: LD_INT 70
16319: PPUSH
16320: LD_INT 140
16322: PPUSH
16323: CALL_OW 12
16327: PPUSH
16328: CALL_OW 67
// SetSide ( Gamma_Squad [ i ] , 1 ) ;
16332: LD_EXP 41
16336: PUSH
16337: LD_VAR 0 1
16341: ARRAY
16342: PPUSH
16343: LD_INT 1
16345: PPUSH
16346: CALL_OW 235
// end ;
16350: GO 16123
16352: POP
16353: POP
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-1 ) ;
16354: LD_EXP 41
16358: PUSH
16359: LD_INT 1
16361: ARRAY
16362: PPUSH
16363: LD_STRING D3-A-1
16365: PPUSH
16366: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-1 ) ;
16370: LD_INT 1
16372: PPUSH
16373: CALL 9995 0 1
16377: PUSH
16378: LD_INT 1
16380: ARRAY
16381: PPUSH
16382: LD_STRING D3-B-1
16384: PPUSH
16385: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-2 ) ;
16389: LD_EXP 41
16393: PUSH
16394: LD_INT 1
16396: ARRAY
16397: PPUSH
16398: LD_STRING D3-A-2
16400: PPUSH
16401: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-2 ) ;
16405: LD_INT 1
16407: PPUSH
16408: CALL 9995 0 1
16412: PUSH
16413: LD_INT 1
16415: ARRAY
16416: PPUSH
16417: LD_STRING D3-B-2
16419: PPUSH
16420: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-3 ) ;
16424: LD_EXP 41
16428: PUSH
16429: LD_INT 1
16431: ARRAY
16432: PPUSH
16433: LD_STRING D3-A-3
16435: PPUSH
16436: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-3 ) ;
16440: LD_INT 1
16442: PPUSH
16443: CALL 9995 0 1
16447: PUSH
16448: LD_INT 1
16450: ARRAY
16451: PPUSH
16452: LD_STRING D3-B-3
16454: PPUSH
16455: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-4 ) ;
16459: LD_EXP 41
16463: PUSH
16464: LD_INT 1
16466: ARRAY
16467: PPUSH
16468: LD_STRING D3-A-4
16470: PPUSH
16471: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-4 ) ;
16475: LD_INT 1
16477: PPUSH
16478: CALL 9995 0 1
16482: PUSH
16483: LD_INT 1
16485: ARRAY
16486: PPUSH
16487: LD_STRING D3-B-4
16489: PPUSH
16490: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-5 ) ;
16494: LD_EXP 41
16498: PUSH
16499: LD_INT 1
16501: ARRAY
16502: PPUSH
16503: LD_STRING D3-A-5
16505: PPUSH
16506: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-5 ) ;
16510: LD_INT 1
16512: PPUSH
16513: CALL 9995 0 1
16517: PUSH
16518: LD_INT 1
16520: ARRAY
16521: PPUSH
16522: LD_STRING D3-B-5
16524: PPUSH
16525: CALL_OW 88
// for i = 1 to Gamma_Squad do
16529: LD_ADDR_VAR 0 1
16533: PUSH
16534: DOUBLE
16535: LD_INT 1
16537: DEC
16538: ST_TO_ADDR
16539: LD_EXP 41
16543: PUSH
16544: FOR_TO
16545: IFFALSE 16567
// SetSide ( Gamma_Squad [ i ] , 1 ) ;
16547: LD_EXP 41
16551: PUSH
16552: LD_VAR 0 1
16556: ARRAY
16557: PPUSH
16558: LD_INT 1
16560: PPUSH
16561: CALL_OW 235
16565: GO 16544
16567: POP
16568: POP
// Wait ( [ 3 3$00 , 5 5$00 , 5 5$30 ] [ Difficulty ] ) ;
16569: LD_INT 6300
16571: PUSH
16572: LD_INT 10500
16574: PUSH
16575: LD_INT 11550
16577: PUSH
16578: EMPTY
16579: LIST
16580: LIST
16581: LIST
16582: PUSH
16583: LD_OWVAR 67
16587: ARRAY
16588: PPUSH
16589: CALL_OW 67
// AddZetaSquad ;
16593: CALL 13314 0 0
// Wait ( 0 0$10 ) ;
16597: LD_INT 350
16599: PPUSH
16600: CALL_OW 67
// to_veh := [ ] ;
16604: LD_ADDR_VAR 0 2
16608: PUSH
16609: EMPTY
16610: ST_TO_ADDR
// for i = 1 to Zeta_Squad do
16611: LD_ADDR_VAR 0 1
16615: PUSH
16616: DOUBLE
16617: LD_INT 1
16619: DEC
16620: ST_TO_ADDR
16621: LD_EXP 42
16625: PUSH
16626: FOR_TO
16627: IFFALSE 16837
// begin if GetTag ( Zeta_Squad [ i ] ) = 3 then
16629: LD_EXP 42
16633: PUSH
16634: LD_VAR 0 1
16638: ARRAY
16639: PPUSH
16640: CALL_OW 110
16644: PUSH
16645: LD_INT 3
16647: EQUAL
16648: IFFALSE 16674
// to_veh := to_veh ^ Zeta_Squad [ i ] else
16650: LD_ADDR_VAR 0 2
16654: PUSH
16655: LD_VAR 0 2
16659: PUSH
16660: LD_EXP 42
16664: PUSH
16665: LD_VAR 0 1
16669: ARRAY
16670: ADD
16671: ST_TO_ADDR
16672: GO 16799
// if GetTag ( Zeta_Squad [ i ] ) = 5 then
16674: LD_EXP 42
16678: PUSH
16679: LD_VAR 0 1
16683: ARRAY
16684: PPUSH
16685: CALL_OW 110
16689: PUSH
16690: LD_INT 5
16692: EQUAL
16693: IFFALSE 16778
// begin SetDir ( Zeta_Squad [ i ] , 4 ) ;
16695: LD_EXP 42
16699: PUSH
16700: LD_VAR 0 1
16704: ARRAY
16705: PPUSH
16706: LD_INT 4
16708: PPUSH
16709: CALL_OW 233
// PlaceUnitArea ( Zeta_Squad [ i ] , road_vehicle , false ) ;
16713: LD_EXP 42
16717: PUSH
16718: LD_VAR 0 1
16722: ARRAY
16723: PPUSH
16724: LD_INT 5
16726: PPUSH
16727: LD_INT 0
16729: PPUSH
16730: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Zeta_Squad [ i ] ) ;
16734: LD_VAR 0 2
16738: PUSH
16739: LD_INT 1
16741: ARRAY
16742: PPUSH
16743: LD_EXP 42
16747: PUSH
16748: LD_VAR 0 1
16752: ARRAY
16753: PPUSH
16754: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
16758: LD_ADDR_VAR 0 2
16762: PUSH
16763: LD_VAR 0 2
16767: PPUSH
16768: LD_INT 1
16770: PPUSH
16771: CALL_OW 3
16775: ST_TO_ADDR
// end else
16776: GO 16799
// PlaceUnitArea ( Zeta_Squad [ i ] , road_vehicle , false ) ;
16778: LD_EXP 42
16782: PUSH
16783: LD_VAR 0 1
16787: ARRAY
16788: PPUSH
16789: LD_INT 5
16791: PPUSH
16792: LD_INT 0
16794: PPUSH
16795: CALL_OW 49
// ComMoveXY ( Zeta_Squad [ i ] , 165 , 105 ) ;
16799: LD_EXP 42
16803: PUSH
16804: LD_VAR 0 1
16808: ARRAY
16809: PPUSH
16810: LD_INT 165
16812: PPUSH
16813: LD_INT 105
16815: PPUSH
16816: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
16820: LD_INT 70
16822: PPUSH
16823: LD_INT 140
16825: PPUSH
16826: CALL_OW 12
16830: PPUSH
16831: CALL_OW 67
// end ;
16835: GO 16626
16837: POP
16838: POP
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-1 ) ;
16839: LD_EXP 42
16843: PUSH
16844: LD_INT 1
16846: ARRAY
16847: PPUSH
16848: LD_STRING D4-A-1
16850: PPUSH
16851: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-1 ) ;
16855: LD_INT 1
16857: PPUSH
16858: CALL 9995 0 1
16862: PUSH
16863: LD_INT 1
16865: ARRAY
16866: PPUSH
16867: LD_STRING D4-B-1
16869: PPUSH
16870: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-2 ) ;
16874: LD_EXP 42
16878: PUSH
16879: LD_INT 1
16881: ARRAY
16882: PPUSH
16883: LD_STRING D4-A-2
16885: PPUSH
16886: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-2 ) ;
16890: LD_INT 1
16892: PPUSH
16893: CALL 9995 0 1
16897: PUSH
16898: LD_INT 1
16900: ARRAY
16901: PPUSH
16902: LD_STRING D4-B-2
16904: PPUSH
16905: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-3 ) ;
16909: LD_EXP 42
16913: PUSH
16914: LD_INT 1
16916: ARRAY
16917: PPUSH
16918: LD_STRING D4-A-3
16920: PPUSH
16921: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-3 ) ;
16925: LD_INT 1
16927: PPUSH
16928: CALL 9995 0 1
16932: PUSH
16933: LD_INT 1
16935: ARRAY
16936: PPUSH
16937: LD_STRING D4-B-3
16939: PPUSH
16940: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-4 ) ;
16944: LD_EXP 42
16948: PUSH
16949: LD_INT 1
16951: ARRAY
16952: PPUSH
16953: LD_STRING D4-A-4
16955: PPUSH
16956: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-4 ) ;
16960: LD_INT 1
16962: PPUSH
16963: CALL 9995 0 1
16967: PUSH
16968: LD_INT 1
16970: ARRAY
16971: PPUSH
16972: LD_STRING D4-B-4
16974: PPUSH
16975: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-5 ) ;
16979: LD_EXP 42
16983: PUSH
16984: LD_INT 1
16986: ARRAY
16987: PPUSH
16988: LD_STRING D4-A-5
16990: PPUSH
16991: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-5 ) ;
16995: LD_INT 1
16997: PPUSH
16998: CALL 9995 0 1
17002: PUSH
17003: LD_INT 1
17005: ARRAY
17006: PPUSH
17007: LD_STRING D4-B-5
17009: PPUSH
17010: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-6 ) ;
17014: LD_EXP 42
17018: PUSH
17019: LD_INT 1
17021: ARRAY
17022: PPUSH
17023: LD_STRING D4-A-6
17025: PPUSH
17026: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-6 ) ;
17030: LD_INT 1
17032: PPUSH
17033: CALL 9995 0 1
17037: PUSH
17038: LD_INT 1
17040: ARRAY
17041: PPUSH
17042: LD_STRING D4-B-6
17044: PPUSH
17045: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-7 ) ;
17049: LD_EXP 42
17053: PUSH
17054: LD_INT 1
17056: ARRAY
17057: PPUSH
17058: LD_STRING D4-A-7
17060: PPUSH
17061: CALL_OW 94
// for i = 1 to Zeta_Squad do
17065: LD_ADDR_VAR 0 1
17069: PUSH
17070: DOUBLE
17071: LD_INT 1
17073: DEC
17074: ST_TO_ADDR
17075: LD_EXP 42
17079: PUSH
17080: FOR_TO
17081: IFFALSE 17103
// SetSide ( Zeta_Squad [ i ] , 1 ) ;
17083: LD_EXP 42
17087: PUSH
17088: LD_VAR 0 1
17092: ARRAY
17093: PPUSH
17094: LD_INT 1
17096: PPUSH
17097: CALL_OW 235
17101: GO 17080
17103: POP
17104: POP
// end ;
17105: PPOPN 2
17107: END
// every 0 0$01 trigger FilterUnitsInArea ( rus_spot , [ f_side , your_side ] ) > 0 do
17108: LD_INT 11
17110: PPUSH
17111: LD_INT 22
17113: PUSH
17114: LD_OWVAR 2
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: PPUSH
17123: CALL_OW 70
17127: PUSH
17128: LD_INT 0
17130: GREATER
17131: IFFALSE 17156
17133: GO 17135
17135: DISABLE
// begin Say ( guyA , D10-A-1 ) ;
17136: LD_EXP 38
17140: PPUSH
17141: LD_STRING D10-A-1
17143: PPUSH
17144: CALL_OW 88
// ru_spotted := true ;
17148: LD_ADDR_EXP 16
17152: PUSH
17153: LD_INT 1
17155: ST_TO_ADDR
// end ;
17156: END
// every 0 0$01 trigger IsDead ( guyA ) or IsDead ( guyB ) do
17157: LD_EXP 38
17161: PPUSH
17162: CALL_OW 301
17166: PUSH
17167: LD_EXP 39
17171: PPUSH
17172: CALL_OW 301
17176: OR
17177: IFFALSE 17189
17179: GO 17181
17181: DISABLE
// begin YouLost ( DieP ) ;
17182: LD_STRING DieP
17184: PPUSH
17185: CALL_OW 104
// end ;
17189: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) do
17190: LD_INT 34
17192: PUSH
17193: LD_INT 8
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: PPUSH
17200: CALL_OW 69
17204: IFFALSE 17217
17206: GO 17208
17208: DISABLE
// sib_bomb_constructed := true ;
17209: LD_ADDR_EXP 36
17213: PUSH
17214: LD_INT 1
17216: ST_TO_ADDR
17217: END
// every 0 0$01 trigger game_status and FilterAllUnits ( [ f_side , 3 ] ) = 0 do var i ;
17218: LD_EXP 29
17222: PUSH
17223: LD_INT 22
17225: PUSH
17226: LD_INT 3
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PPUSH
17233: CALL_OW 69
17237: PUSH
17238: LD_INT 0
17240: EQUAL
17241: AND
17242: IFFALSE 17445
17244: GO 17246
17246: DISABLE
17247: LD_INT 0
17249: PPUSH
// begin game_status := false ;
17250: LD_ADDR_EXP 29
17254: PUSH
17255: LD_INT 0
17257: ST_TO_ADDR
// if not depotConstructed then
17258: LD_EXP 2
17262: NOT
17263: IFFALSE 17272
// SetAchievement ( ACH_NODEPOT ) ;
17265: LD_STRING ACH_NODEPOT
17267: PPUSH
17268: CALL_OW 543
// if Difficulty = 3 then
17272: LD_OWVAR 67
17276: PUSH
17277: LD_INT 3
17279: EQUAL
17280: IFFALSE 17289
// SetAchievement ( ACH_HARD ) ;
17282: LD_STRING ACH_HARD
17284: PPUSH
17285: CALL_OW 543
// if ( ( tick / 35 ) / 60 ) < [ 70 , 60 , 50 ] [ Difficulty ] then
17289: LD_OWVAR 1
17293: PUSH
17294: LD_INT 35
17296: DIVREAL
17297: PUSH
17298: LD_INT 60
17300: DIVREAL
17301: PUSH
17302: LD_INT 70
17304: PUSH
17305: LD_INT 60
17307: PUSH
17308: LD_INT 50
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: LIST
17315: PUSH
17316: LD_OWVAR 67
17320: ARRAY
17321: LESS
17322: IFFALSE 17336
// AddMedal ( play , 1 ) else
17324: LD_STRING play
17326: PPUSH
17327: LD_INT 1
17329: PPUSH
17330: CALL_OW 101
17334: GO 17347
// AddMedal ( play , - 1 ) ;
17336: LD_STRING play
17338: PPUSH
17339: LD_INT 1
17341: NEG
17342: PPUSH
17343: CALL_OW 101
// if sib_bomb_constructed then
17347: LD_EXP 36
17351: IFFALSE 17365
// AddMedal ( sibbomb , 1 ) else
17353: LD_STRING sibbomb
17355: PPUSH
17356: LD_INT 1
17358: PPUSH
17359: CALL_OW 101
17363: GO 17376
// AddMedal ( sibbomb , - 1 ) ;
17365: LD_STRING sibbomb
17367: PPUSH
17368: LD_INT 1
17370: NEG
17371: PPUSH
17372: CALL_OW 101
// if mine_constructed and not mine_ck then
17376: LD_EXP 37
17380: PUSH
17381: LD_EXP 35
17385: NOT
17386: AND
17387: IFFALSE 17399
// AddMedal ( mine , 1 ) ;
17389: LD_STRING mine
17391: PPUSH
17392: LD_INT 1
17394: PPUSH
17395: CALL_OW 101
// if mine_ck then
17399: LD_EXP 35
17403: IFFALSE 17416
// AddMedal ( mine , - 1 ) ;
17405: LD_STRING mine
17407: PPUSH
17408: LD_INT 1
17410: NEG
17411: PPUSH
17412: CALL_OW 101
// if not mine_constructed then
17416: LD_EXP 37
17420: NOT
17421: IFFALSE 17434
// AddMedal ( mine , - 2 ) ;
17423: LD_STRING mine
17425: PPUSH
17426: LD_INT 2
17428: NEG
17429: PPUSH
17430: CALL_OW 101
// GiveMedals ( Main ) ;
17434: LD_STRING Main
17436: PPUSH
17437: CALL_OW 102
// YouWin ;
17441: CALL_OW 103
// end ; end_of_file
17445: PPOPN 1
17447: END
// every 0 0$03 trigger game_status do var time ;
17448: LD_EXP 29
17452: IFFALSE 17617
17454: GO 17456
17456: DISABLE
17457: LD_INT 0
17459: PPUSH
// begin time := [ 0 0$30 , 0 0$45 , 1 1$00 ] [ Difficulty ] ;
17460: LD_ADDR_VAR 0 1
17464: PUSH
17465: LD_INT 1050
17467: PUSH
17468: LD_INT 1575
17470: PUSH
17471: LD_INT 2100
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: LIST
17478: PUSH
17479: LD_OWVAR 67
17483: ARRAY
17484: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$12 ) ) ;
17485: LD_VAR 0 1
17489: PUSH
17490: LD_INT 0
17492: PPUSH
17493: LD_INT 420
17495: PPUSH
17496: CALL_OW 12
17500: PLUS
17501: PPUSH
17502: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
17506: LD_INT 1
17508: PPUSH
17509: LD_INT 5
17511: PPUSH
17512: CALL_OW 12
17516: PPUSH
17517: LD_INT 1
17519: PPUSH
17520: CALL_OW 57
// Wait ( Rand ( 0 0$03 , 0 0$30 ) ) ;
17524: LD_INT 105
17526: PPUSH
17527: LD_INT 1050
17529: PPUSH
17530: CALL_OW 12
17534: PPUSH
17535: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 148 , 107 , 20 , true ) ;
17539: LD_INT 1
17541: PPUSH
17542: LD_INT 5
17544: PPUSH
17545: CALL_OW 12
17549: PPUSH
17550: LD_INT 148
17552: PPUSH
17553: LD_INT 107
17555: PPUSH
17556: LD_INT 20
17558: PPUSH
17559: LD_INT 1
17561: PPUSH
17562: CALL_OW 56
// if tick mod [ 21 21$00 , 18 18$00 , 16 16$00 ] [ Difficulty ] then
17566: LD_OWVAR 1
17570: PUSH
17571: LD_INT 44100
17573: PUSH
17574: LD_INT 37800
17576: PUSH
17577: LD_INT 33600
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: LIST
17584: PUSH
17585: LD_OWVAR 67
17589: ARRAY
17590: MOD
17591: IFFALSE 17607
// time := time + 0 0$20 ;
17593: LD_ADDR_VAR 0 1
17597: PUSH
17598: LD_VAR 0 1
17602: PUSH
17603: LD_INT 700
17605: PLUS
17606: ST_TO_ADDR
// end until game_status = false ;
17607: LD_EXP 29
17611: PUSH
17612: LD_INT 0
17614: EQUAL
17615: IFFALSE 17485
// end ;
17617: PPOPN 1
17619: END
// every 0 0$03 trigger game_status do var time ;
17620: LD_EXP 29
17624: IFFALSE 17778
17626: GO 17628
17628: DISABLE
17629: LD_INT 0
17631: PPUSH
// begin time := [ 0 0$20 , 0 0$25 , 0 0$40 ] [ Difficulty ] ;
17632: LD_ADDR_VAR 0 1
17636: PUSH
17637: LD_INT 700
17639: PUSH
17640: LD_INT 875
17642: PUSH
17643: LD_INT 1400
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: LIST
17650: PUSH
17651: LD_OWVAR 67
17655: ARRAY
17656: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$11 ) ) ;
17657: LD_VAR 0 1
17661: PUSH
17662: LD_INT 0
17664: PPUSH
17665: LD_INT 385
17667: PPUSH
17668: CALL_OW 12
17672: PLUS
17673: PPUSH
17674: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 102 , 6 , 25 , true ) ;
17678: LD_INT 1
17680: PPUSH
17681: LD_INT 5
17683: PPUSH
17684: CALL_OW 12
17688: PPUSH
17689: LD_INT 102
17691: PPUSH
17692: LD_INT 6
17694: PPUSH
17695: LD_INT 25
17697: PPUSH
17698: LD_INT 1
17700: PPUSH
17701: CALL_OW 56
// if tick mod [ 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] then
17705: LD_OWVAR 1
17709: PUSH
17710: LD_INT 52500
17712: PUSH
17713: LD_INT 46200
17715: PUSH
17716: LD_INT 42000
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: LIST
17723: PUSH
17724: LD_OWVAR 67
17728: ARRAY
17729: MOD
17730: IFFALSE 17746
// time := time + 0 0$25 ;
17732: LD_ADDR_VAR 0 1
17736: PUSH
17737: LD_VAR 0 1
17741: PUSH
17742: LD_INT 875
17744: PLUS
17745: ST_TO_ADDR
// if tick mod 110 110$00 = 0 then
17746: LD_OWVAR 1
17750: PUSH
17751: LD_INT 231000
17753: MOD
17754: PUSH
17755: LD_INT 0
17757: EQUAL
17758: IFFALSE 17768
// time := 0 0$30 ;
17760: LD_ADDR_VAR 0 1
17764: PUSH
17765: LD_INT 1050
17767: ST_TO_ADDR
// end until game_status = false ;
17768: LD_EXP 29
17772: PUSH
17773: LD_INT 0
17775: EQUAL
17776: IFFALSE 17657
// end ;
17778: PPOPN 1
17780: END
// every 0 0$03 trigger game_status do var time ;
17781: LD_EXP 29
17785: IFFALSE 17921
17787: GO 17789
17789: DISABLE
17790: LD_INT 0
17792: PPUSH
// begin time := [ 0 0$30 , 0 0$45 , 0 0$50 ] [ Difficulty ] ;
17793: LD_ADDR_VAR 0 1
17797: PUSH
17798: LD_INT 1050
17800: PUSH
17801: LD_INT 1575
17803: PUSH
17804: LD_INT 1750
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: LIST
17811: PUSH
17812: LD_OWVAR 67
17816: ARRAY
17817: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$11 ) ) ;
17818: LD_VAR 0 1
17822: PUSH
17823: LD_INT 0
17825: PPUSH
17826: LD_INT 385
17828: PPUSH
17829: CALL_OW 12
17833: PLUS
17834: PPUSH
17835: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 51 , 74 , 25 , true ) ;
17839: LD_INT 1
17841: PPUSH
17842: LD_INT 5
17844: PPUSH
17845: CALL_OW 12
17849: PPUSH
17850: LD_INT 51
17852: PPUSH
17853: LD_INT 74
17855: PPUSH
17856: LD_INT 25
17858: PPUSH
17859: LD_INT 1
17861: PPUSH
17862: CALL_OW 56
// if tick mod [ 40 40$00 , 50 50$00 , 65 65$00 ] [ Difficulty ] = 0 then
17866: LD_OWVAR 1
17870: PUSH
17871: LD_INT 84000
17873: PUSH
17874: LD_INT 105000
17876: PUSH
17877: LD_INT 136500
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: LIST
17884: PUSH
17885: LD_OWVAR 67
17889: ARRAY
17890: MOD
17891: PUSH
17892: LD_INT 0
17894: EQUAL
17895: IFFALSE 17911
// time := time + 0 0$15 ;
17897: LD_ADDR_VAR 0 1
17901: PUSH
17902: LD_VAR 0 1
17906: PUSH
17907: LD_INT 525
17909: PLUS
17910: ST_TO_ADDR
// end until game_status = false ;
17911: LD_EXP 29
17915: PUSH
17916: LD_INT 0
17918: EQUAL
17919: IFFALSE 17818
// end ; end_of_file
17921: PPOPN 1
17923: END
// every 0 0$01 trigger not debug do
17924: LD_EXP 1
17928: NOT
17929: IFFALSE 17952
17931: GO 17933
17933: DISABLE
// begin enable ;
17934: ENABLE
// Display_Strings := [ #tick , tick ] ;
17935: LD_ADDR_OWVAR 47
17939: PUSH
17940: LD_STRING #tick
17942: PUSH
17943: LD_OWVAR 1
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: ST_TO_ADDR
// end ; end_of_file
17952: END
// on VehicleConstructed ( un , fac ) do begin SOS_VehicleConstructed ( un , fac ) ;
17953: LD_VAR 0 1
17957: PPUSH
17958: LD_VAR 0 2
17962: PPUSH
17963: CALL 34667 0 2
// if GetSide ( un ) = 3 and un in FilterAllUnits ( [ [ f_or , [ f_weapon , ru_heavy_gun ] , [ f_weapon , ru_rocket ] , [ f_weapon , ru_rocket_launcher ] ] ] ) then
17967: LD_VAR 0 1
17971: PPUSH
17972: CALL_OW 255
17976: PUSH
17977: LD_INT 3
17979: EQUAL
17980: PUSH
17981: LD_VAR 0 1
17985: PUSH
17986: LD_INT 2
17988: PUSH
17989: LD_INT 34
17991: PUSH
17992: LD_INT 46
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: PUSH
17999: LD_INT 34
18001: PUSH
18002: LD_INT 47
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: PUSH
18009: LD_INT 34
18011: PUSH
18012: LD_INT 45
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: PUSH
18025: EMPTY
18026: LIST
18027: PPUSH
18028: CALL_OW 69
18032: IN
18033: AND
18034: IFFALSE 18052
// ru_reserve := ru_reserve ^ un ;
18036: LD_ADDR_EXP 9
18040: PUSH
18041: LD_EXP 9
18045: PUSH
18046: LD_VAR 0 1
18050: ADD
18051: ST_TO_ADDR
// if GetSide ( un ) = 3 and not GetWeapon ( un ) in [ ru_siberium_rocket , ru_crane ] then
18052: LD_VAR 0 1
18056: PPUSH
18057: CALL_OW 255
18061: PUSH
18062: LD_INT 3
18064: EQUAL
18065: PUSH
18066: LD_VAR 0 1
18070: PPUSH
18071: CALL_OW 264
18075: PUSH
18076: LD_INT 48
18078: PUSH
18079: LD_INT 52
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: IN
18086: NOT
18087: AND
18088: IFFALSE 18105
// ComMoveXY ( un , 65 , 60 ) ;
18090: LD_VAR 0 1
18094: PPUSH
18095: LD_INT 65
18097: PPUSH
18098: LD_INT 60
18100: PPUSH
18101: CALL_OW 111
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) then
18105: LD_VAR 0 1
18109: PUSH
18110: LD_INT 22
18112: PUSH
18113: LD_INT 3
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PUSH
18120: LD_INT 34
18122: PUSH
18123: LD_INT 48
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: PPUSH
18134: CALL_OW 69
18138: IN
18139: IFFALSE 18192
// if FilterUnitsInArea ( alt_base , [ f_side , 1 ] ) then
18141: LD_INT 12
18143: PPUSH
18144: LD_INT 22
18146: PUSH
18147: LD_INT 1
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PPUSH
18154: CALL_OW 70
18158: IFFALSE 18177
// ComAttackPlace ( un , 98 , 10 ) else
18160: LD_VAR 0 1
18164: PPUSH
18165: LD_INT 98
18167: PPUSH
18168: LD_INT 10
18170: PPUSH
18171: CALL_OW 116
18175: GO 18192
// ComAttackPlace ( un , 134 , 99 ) ;
18177: LD_VAR 0 1
18181: PPUSH
18182: LD_INT 134
18184: PPUSH
18185: LD_INT 99
18187: PPUSH
18188: CALL_OW 116
// end ;
18192: PPOPN 2
18194: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18195: LD_VAR 0 1
18199: PPUSH
18200: CALL 34547 0 1
// if GetChassis ( un ) = 25 then
18204: LD_VAR 0 1
18208: PPUSH
18209: CALL_OW 265
18213: PUSH
18214: LD_INT 25
18216: EQUAL
18217: IFFALSE 18226
// SetAchievement ( ACH_BEH ) ;
18219: LD_STRING ACH_BEH
18221: PPUSH
18222: CALL_OW 543
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not GetBType ( un ) in [ b_depot , b_oil_mine , b_siberite_mine , b_oil_power ] then
18226: LD_VAR 0 1
18230: PUSH
18231: LD_INT 22
18233: PUSH
18234: LD_INT 3
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: PUSH
18241: LD_INT 21
18243: PUSH
18244: LD_INT 3
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: PPUSH
18255: CALL_OW 69
18259: IN
18260: PUSH
18261: LD_VAR 0 1
18265: PPUSH
18266: CALL_OW 266
18270: PUSH
18271: LD_INT 0
18273: PUSH
18274: LD_INT 29
18276: PUSH
18277: LD_INT 30
18279: PUSH
18280: LD_INT 26
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: IN
18289: NOT
18290: AND
18291: IFFALSE 18377
// begin ru_blist := ru_blist ^ GetBType ( un ) ;
18293: LD_ADDR_EXP 13
18297: PUSH
18298: LD_EXP 13
18302: PUSH
18303: LD_VAR 0 1
18307: PPUSH
18308: CALL_OW 266
18312: ADD
18313: ST_TO_ADDR
// ru_blist := ru_blist ^ GetX ( un ) ;
18314: LD_ADDR_EXP 13
18318: PUSH
18319: LD_EXP 13
18323: PUSH
18324: LD_VAR 0 1
18328: PPUSH
18329: CALL_OW 250
18333: ADD
18334: ST_TO_ADDR
// ru_blist := ru_blist ^ GetY ( un ) ;
18335: LD_ADDR_EXP 13
18339: PUSH
18340: LD_EXP 13
18344: PUSH
18345: LD_VAR 0 1
18349: PPUSH
18350: CALL_OW 251
18354: ADD
18355: ST_TO_ADDR
// ru_blist := ru_blist ^ GetDir ( un ) ;
18356: LD_ADDR_EXP 13
18360: PUSH
18361: LD_EXP 13
18365: PUSH
18366: LD_VAR 0 1
18370: PPUSH
18371: CALL_OW 254
18375: ADD
18376: ST_TO_ADDR
// end ; if un in ru_attack_list then
18377: LD_VAR 0 1
18381: PUSH
18382: LD_EXP 10
18386: IN
18387: IFFALSE 18405
// ru_attack_list := ru_attack_list diff un ;
18389: LD_ADDR_EXP 10
18393: PUSH
18394: LD_EXP 10
18398: PUSH
18399: LD_VAR 0 1
18403: DIFF
18404: ST_TO_ADDR
// if un in ru_protector then
18405: LD_VAR 0 1
18409: PUSH
18410: LD_EXP 17
18414: IN
18415: IFFALSE 18433
// ru_protector := ru_protector diff un ;
18417: LD_ADDR_EXP 17
18421: PUSH
18422: LD_EXP 17
18426: PUSH
18427: LD_VAR 0 1
18431: DIFF
18432: ST_TO_ADDR
// if GetBType ( un ) = b_siberite_mine and GetSide ( un ) = 1 then
18433: LD_VAR 0 1
18437: PPUSH
18438: CALL_OW 266
18442: PUSH
18443: LD_INT 30
18445: EQUAL
18446: PUSH
18447: LD_VAR 0 1
18451: PPUSH
18452: CALL_OW 255
18456: PUSH
18457: LD_INT 1
18459: EQUAL
18460: AND
18461: IFFALSE 18471
// mine_ck := true ;
18463: LD_ADDR_EXP 35
18467: PUSH
18468: LD_INT 1
18470: ST_TO_ADDR
// end ;
18471: PPOPN 1
18473: END
// on BuildingComplete ( un ) do var i ;
18474: LD_INT 0
18476: PPUSH
// begin if GetSide ( un ) = 1 and GetBType ( un ) = b_depot then
18477: LD_VAR 0 1
18481: PPUSH
18482: CALL_OW 255
18486: PUSH
18487: LD_INT 1
18489: EQUAL
18490: PUSH
18491: LD_VAR 0 1
18495: PPUSH
18496: CALL_OW 266
18500: PUSH
18501: LD_INT 0
18503: EQUAL
18504: AND
18505: IFFALSE 18515
// depotConstructed := true ;
18507: LD_ADDR_EXP 2
18511: PUSH
18512: LD_INT 1
18514: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetBType ( un ) = b_siberite_mine then
18515: LD_VAR 0 1
18519: PPUSH
18520: CALL_OW 255
18524: PUSH
18525: LD_INT 1
18527: EQUAL
18528: PUSH
18529: LD_VAR 0 1
18533: PPUSH
18534: CALL_OW 266
18538: PUSH
18539: LD_INT 30
18541: EQUAL
18542: AND
18543: IFFALSE 18553
// mine_constructed := true ;
18545: LD_ADDR_EXP 37
18549: PUSH
18550: LD_INT 1
18552: ST_TO_ADDR
// if GetSide ( un ) = 3 and GetBType ( un ) = b_depot then
18553: LD_VAR 0 1
18557: PPUSH
18558: CALL_OW 255
18562: PUSH
18563: LD_INT 3
18565: EQUAL
18566: PUSH
18567: LD_VAR 0 1
18571: PPUSH
18572: CALL_OW 266
18576: PUSH
18577: LD_INT 0
18579: EQUAL
18580: AND
18581: IFFALSE 18638
// begin for i = 1 to 2 do
18583: LD_ADDR_VAR 0 2
18587: PUSH
18588: DOUBLE
18589: LD_INT 1
18591: DEC
18592: ST_TO_ADDR
18593: LD_INT 2
18595: PUSH
18596: FOR_TO
18597: IFFALSE 18636
// begin ComExitBuilding ( ru_sold [ i ] ) ;
18599: LD_EXP 20
18603: PUSH
18604: LD_VAR 0 2
18608: ARRAY
18609: PPUSH
18610: CALL_OW 122
// AddComEnterUnit ( ru_sold [ i ] , un ) ;
18614: LD_EXP 20
18618: PUSH
18619: LD_VAR 0 2
18623: ARRAY
18624: PPUSH
18625: LD_VAR 0 1
18629: PPUSH
18630: CALL_OW 180
// end ;
18634: GO 18596
18636: POP
18637: POP
// end ; if GetSide ( un ) = 3 and GetBType ( un ) in ru_blist then
18638: LD_VAR 0 1
18642: PPUSH
18643: CALL_OW 255
18647: PUSH
18648: LD_INT 3
18650: EQUAL
18651: PUSH
18652: LD_VAR 0 1
18656: PPUSH
18657: CALL_OW 266
18661: PUSH
18662: LD_EXP 13
18666: IN
18667: AND
18668: IFFALSE 18708
// for i = 1 to 4 do
18670: LD_ADDR_VAR 0 2
18674: PUSH
18675: DOUBLE
18676: LD_INT 1
18678: DEC
18679: ST_TO_ADDR
18680: LD_INT 4
18682: PUSH
18683: FOR_TO
18684: IFFALSE 18706
// ru_blist := Delete ( ru_blist , 1 ) ;
18686: LD_ADDR_EXP 13
18690: PUSH
18691: LD_EXP 13
18695: PPUSH
18696: LD_INT 1
18698: PPUSH
18699: CALL_OW 3
18703: ST_TO_ADDR
18704: GO 18683
18706: POP
18707: POP
// end ;
18708: PPOPN 2
18710: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
18711: LD_VAR 0 1
18715: PPUSH
18716: LD_VAR 0 2
18720: PPUSH
18721: LD_VAR 0 3
18725: PPUSH
18726: CALL 34643 0 3
// end ;
18730: PPOPN 3
18732: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
18733: LD_VAR 0 1
18737: PPUSH
18738: CALL 34651 0 1
// end ; end_of_file end_of_file
18742: PPOPN 1
18744: END
// export globalGameSaveCounter ; every 0 0$1 do
18745: GO 18747
18747: DISABLE
// begin enable ;
18748: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18749: LD_STRING updateTimer(
18751: PUSH
18752: LD_OWVAR 1
18756: STR
18757: PUSH
18758: LD_STRING );
18760: STR
18761: PPUSH
18762: CALL_OW 559
// end ;
18766: END
// every 0 0$1 do
18767: GO 18769
18769: DISABLE
// begin globalGameSaveCounter := 0 ;
18770: LD_ADDR_EXP 43
18774: PUSH
18775: LD_INT 0
18777: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
18778: LD_STRING setGameSaveCounter(0)
18780: PPUSH
18781: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
18785: LD_STRING initStreamRollete();
18787: PPUSH
18788: CALL_OW 559
// InitStreamMode ;
18792: CALL 20118 0 0
// DefineStreamItems ( false ) ;
18796: LD_INT 0
18798: PPUSH
18799: CALL 20582 0 1
// end ;
18803: END
// export function SOS_MapStart ( ) ; begin
18804: LD_INT 0
18806: PPUSH
// if streamModeActive then
18807: LD_EXP 44
18811: IFFALSE 18820
// DefineStreamItems ( true ) ;
18813: LD_INT 1
18815: PPUSH
18816: CALL 20582 0 1
// UpdateLuaVariables ( ) ;
18820: CALL 18837 0 0
// UpdateFactoryWaypoints ( ) ;
18824: CALL 33451 0 0
// UpdateWarehouseGatheringPoints ( ) ;
18828: CALL 33708 0 0
// end ;
18832: LD_VAR 0 1
18836: RET
// function UpdateLuaVariables ( ) ; begin
18837: LD_INT 0
18839: PPUSH
// if globalGameSaveCounter then
18840: LD_EXP 43
18844: IFFALSE 18878
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
18846: LD_ADDR_EXP 43
18850: PUSH
18851: LD_EXP 43
18855: PPUSH
18856: CALL 77518 0 1
18860: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
18861: LD_STRING setGameSaveCounter(
18863: PUSH
18864: LD_EXP 43
18868: STR
18869: PUSH
18870: LD_STRING )
18872: STR
18873: PPUSH
18874: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
18878: LD_STRING setGameDifficulty(
18880: PUSH
18881: LD_OWVAR 67
18885: STR
18886: PUSH
18887: LD_STRING )
18889: STR
18890: PPUSH
18891: CALL_OW 559
// end ;
18895: LD_VAR 0 1
18899: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18900: LD_INT 0
18902: PPUSH
// if p2 = stream_mode then
18903: LD_VAR 0 2
18907: PUSH
18908: LD_INT 100
18910: EQUAL
18911: IFFALSE 19914
// begin if not StreamModeActive then
18913: LD_EXP 44
18917: NOT
18918: IFFALSE 18928
// StreamModeActive := true ;
18920: LD_ADDR_EXP 44
18924: PUSH
18925: LD_INT 1
18927: ST_TO_ADDR
// if p3 = 0 then
18928: LD_VAR 0 3
18932: PUSH
18933: LD_INT 0
18935: EQUAL
18936: IFFALSE 18942
// InitStreamMode ;
18938: CALL 20118 0 0
// if p3 = 1 then
18942: LD_VAR 0 3
18946: PUSH
18947: LD_INT 1
18949: EQUAL
18950: IFFALSE 18960
// sRocket := true ;
18952: LD_ADDR_EXP 49
18956: PUSH
18957: LD_INT 1
18959: ST_TO_ADDR
// if p3 = 2 then
18960: LD_VAR 0 3
18964: PUSH
18965: LD_INT 2
18967: EQUAL
18968: IFFALSE 18978
// sSpeed := true ;
18970: LD_ADDR_EXP 48
18974: PUSH
18975: LD_INT 1
18977: ST_TO_ADDR
// if p3 = 3 then
18978: LD_VAR 0 3
18982: PUSH
18983: LD_INT 3
18985: EQUAL
18986: IFFALSE 18996
// sEngine := true ;
18988: LD_ADDR_EXP 50
18992: PUSH
18993: LD_INT 1
18995: ST_TO_ADDR
// if p3 = 4 then
18996: LD_VAR 0 3
19000: PUSH
19001: LD_INT 4
19003: EQUAL
19004: IFFALSE 19014
// sSpec := true ;
19006: LD_ADDR_EXP 47
19010: PUSH
19011: LD_INT 1
19013: ST_TO_ADDR
// if p3 = 5 then
19014: LD_VAR 0 3
19018: PUSH
19019: LD_INT 5
19021: EQUAL
19022: IFFALSE 19032
// sLevel := true ;
19024: LD_ADDR_EXP 51
19028: PUSH
19029: LD_INT 1
19031: ST_TO_ADDR
// if p3 = 6 then
19032: LD_VAR 0 3
19036: PUSH
19037: LD_INT 6
19039: EQUAL
19040: IFFALSE 19050
// sArmoury := true ;
19042: LD_ADDR_EXP 52
19046: PUSH
19047: LD_INT 1
19049: ST_TO_ADDR
// if p3 = 7 then
19050: LD_VAR 0 3
19054: PUSH
19055: LD_INT 7
19057: EQUAL
19058: IFFALSE 19068
// sRadar := true ;
19060: LD_ADDR_EXP 53
19064: PUSH
19065: LD_INT 1
19067: ST_TO_ADDR
// if p3 = 8 then
19068: LD_VAR 0 3
19072: PUSH
19073: LD_INT 8
19075: EQUAL
19076: IFFALSE 19086
// sBunker := true ;
19078: LD_ADDR_EXP 54
19082: PUSH
19083: LD_INT 1
19085: ST_TO_ADDR
// if p3 = 9 then
19086: LD_VAR 0 3
19090: PUSH
19091: LD_INT 9
19093: EQUAL
19094: IFFALSE 19104
// sHack := true ;
19096: LD_ADDR_EXP 55
19100: PUSH
19101: LD_INT 1
19103: ST_TO_ADDR
// if p3 = 10 then
19104: LD_VAR 0 3
19108: PUSH
19109: LD_INT 10
19111: EQUAL
19112: IFFALSE 19122
// sFire := true ;
19114: LD_ADDR_EXP 56
19118: PUSH
19119: LD_INT 1
19121: ST_TO_ADDR
// if p3 = 11 then
19122: LD_VAR 0 3
19126: PUSH
19127: LD_INT 11
19129: EQUAL
19130: IFFALSE 19140
// sRefresh := true ;
19132: LD_ADDR_EXP 57
19136: PUSH
19137: LD_INT 1
19139: ST_TO_ADDR
// if p3 = 12 then
19140: LD_VAR 0 3
19144: PUSH
19145: LD_INT 12
19147: EQUAL
19148: IFFALSE 19158
// sExp := true ;
19150: LD_ADDR_EXP 58
19154: PUSH
19155: LD_INT 1
19157: ST_TO_ADDR
// if p3 = 13 then
19158: LD_VAR 0 3
19162: PUSH
19163: LD_INT 13
19165: EQUAL
19166: IFFALSE 19176
// sDepot := true ;
19168: LD_ADDR_EXP 59
19172: PUSH
19173: LD_INT 1
19175: ST_TO_ADDR
// if p3 = 14 then
19176: LD_VAR 0 3
19180: PUSH
19181: LD_INT 14
19183: EQUAL
19184: IFFALSE 19194
// sFlag := true ;
19186: LD_ADDR_EXP 60
19190: PUSH
19191: LD_INT 1
19193: ST_TO_ADDR
// if p3 = 15 then
19194: LD_VAR 0 3
19198: PUSH
19199: LD_INT 15
19201: EQUAL
19202: IFFALSE 19212
// sKamikadze := true ;
19204: LD_ADDR_EXP 68
19208: PUSH
19209: LD_INT 1
19211: ST_TO_ADDR
// if p3 = 16 then
19212: LD_VAR 0 3
19216: PUSH
19217: LD_INT 16
19219: EQUAL
19220: IFFALSE 19230
// sTroll := true ;
19222: LD_ADDR_EXP 69
19226: PUSH
19227: LD_INT 1
19229: ST_TO_ADDR
// if p3 = 17 then
19230: LD_VAR 0 3
19234: PUSH
19235: LD_INT 17
19237: EQUAL
19238: IFFALSE 19248
// sSlow := true ;
19240: LD_ADDR_EXP 70
19244: PUSH
19245: LD_INT 1
19247: ST_TO_ADDR
// if p3 = 18 then
19248: LD_VAR 0 3
19252: PUSH
19253: LD_INT 18
19255: EQUAL
19256: IFFALSE 19266
// sLack := true ;
19258: LD_ADDR_EXP 71
19262: PUSH
19263: LD_INT 1
19265: ST_TO_ADDR
// if p3 = 19 then
19266: LD_VAR 0 3
19270: PUSH
19271: LD_INT 19
19273: EQUAL
19274: IFFALSE 19284
// sTank := true ;
19276: LD_ADDR_EXP 73
19280: PUSH
19281: LD_INT 1
19283: ST_TO_ADDR
// if p3 = 20 then
19284: LD_VAR 0 3
19288: PUSH
19289: LD_INT 20
19291: EQUAL
19292: IFFALSE 19302
// sRemote := true ;
19294: LD_ADDR_EXP 74
19298: PUSH
19299: LD_INT 1
19301: ST_TO_ADDR
// if p3 = 21 then
19302: LD_VAR 0 3
19306: PUSH
19307: LD_INT 21
19309: EQUAL
19310: IFFALSE 19320
// sPowell := true ;
19312: LD_ADDR_EXP 75
19316: PUSH
19317: LD_INT 1
19319: ST_TO_ADDR
// if p3 = 22 then
19320: LD_VAR 0 3
19324: PUSH
19325: LD_INT 22
19327: EQUAL
19328: IFFALSE 19338
// sTeleport := true ;
19330: LD_ADDR_EXP 78
19334: PUSH
19335: LD_INT 1
19337: ST_TO_ADDR
// if p3 = 23 then
19338: LD_VAR 0 3
19342: PUSH
19343: LD_INT 23
19345: EQUAL
19346: IFFALSE 19356
// sOilTower := true ;
19348: LD_ADDR_EXP 80
19352: PUSH
19353: LD_INT 1
19355: ST_TO_ADDR
// if p3 = 24 then
19356: LD_VAR 0 3
19360: PUSH
19361: LD_INT 24
19363: EQUAL
19364: IFFALSE 19374
// sShovel := true ;
19366: LD_ADDR_EXP 81
19370: PUSH
19371: LD_INT 1
19373: ST_TO_ADDR
// if p3 = 25 then
19374: LD_VAR 0 3
19378: PUSH
19379: LD_INT 25
19381: EQUAL
19382: IFFALSE 19392
// sSheik := true ;
19384: LD_ADDR_EXP 82
19388: PUSH
19389: LD_INT 1
19391: ST_TO_ADDR
// if p3 = 26 then
19392: LD_VAR 0 3
19396: PUSH
19397: LD_INT 26
19399: EQUAL
19400: IFFALSE 19410
// sEarthquake := true ;
19402: LD_ADDR_EXP 84
19406: PUSH
19407: LD_INT 1
19409: ST_TO_ADDR
// if p3 = 27 then
19410: LD_VAR 0 3
19414: PUSH
19415: LD_INT 27
19417: EQUAL
19418: IFFALSE 19428
// sAI := true ;
19420: LD_ADDR_EXP 85
19424: PUSH
19425: LD_INT 1
19427: ST_TO_ADDR
// if p3 = 28 then
19428: LD_VAR 0 3
19432: PUSH
19433: LD_INT 28
19435: EQUAL
19436: IFFALSE 19446
// sCargo := true ;
19438: LD_ADDR_EXP 88
19442: PUSH
19443: LD_INT 1
19445: ST_TO_ADDR
// if p3 = 29 then
19446: LD_VAR 0 3
19450: PUSH
19451: LD_INT 29
19453: EQUAL
19454: IFFALSE 19464
// sDLaser := true ;
19456: LD_ADDR_EXP 89
19460: PUSH
19461: LD_INT 1
19463: ST_TO_ADDR
// if p3 = 30 then
19464: LD_VAR 0 3
19468: PUSH
19469: LD_INT 30
19471: EQUAL
19472: IFFALSE 19482
// sExchange := true ;
19474: LD_ADDR_EXP 90
19478: PUSH
19479: LD_INT 1
19481: ST_TO_ADDR
// if p3 = 31 then
19482: LD_VAR 0 3
19486: PUSH
19487: LD_INT 31
19489: EQUAL
19490: IFFALSE 19500
// sFac := true ;
19492: LD_ADDR_EXP 91
19496: PUSH
19497: LD_INT 1
19499: ST_TO_ADDR
// if p3 = 32 then
19500: LD_VAR 0 3
19504: PUSH
19505: LD_INT 32
19507: EQUAL
19508: IFFALSE 19518
// sPower := true ;
19510: LD_ADDR_EXP 92
19514: PUSH
19515: LD_INT 1
19517: ST_TO_ADDR
// if p3 = 33 then
19518: LD_VAR 0 3
19522: PUSH
19523: LD_INT 33
19525: EQUAL
19526: IFFALSE 19536
// sRandom := true ;
19528: LD_ADDR_EXP 93
19532: PUSH
19533: LD_INT 1
19535: ST_TO_ADDR
// if p3 = 34 then
19536: LD_VAR 0 3
19540: PUSH
19541: LD_INT 34
19543: EQUAL
19544: IFFALSE 19554
// sShield := true ;
19546: LD_ADDR_EXP 94
19550: PUSH
19551: LD_INT 1
19553: ST_TO_ADDR
// if p3 = 35 then
19554: LD_VAR 0 3
19558: PUSH
19559: LD_INT 35
19561: EQUAL
19562: IFFALSE 19572
// sTime := true ;
19564: LD_ADDR_EXP 95
19568: PUSH
19569: LD_INT 1
19571: ST_TO_ADDR
// if p3 = 36 then
19572: LD_VAR 0 3
19576: PUSH
19577: LD_INT 36
19579: EQUAL
19580: IFFALSE 19590
// sTools := true ;
19582: LD_ADDR_EXP 96
19586: PUSH
19587: LD_INT 1
19589: ST_TO_ADDR
// if p3 = 101 then
19590: LD_VAR 0 3
19594: PUSH
19595: LD_INT 101
19597: EQUAL
19598: IFFALSE 19608
// sSold := true ;
19600: LD_ADDR_EXP 61
19604: PUSH
19605: LD_INT 1
19607: ST_TO_ADDR
// if p3 = 102 then
19608: LD_VAR 0 3
19612: PUSH
19613: LD_INT 102
19615: EQUAL
19616: IFFALSE 19626
// sDiff := true ;
19618: LD_ADDR_EXP 62
19622: PUSH
19623: LD_INT 1
19625: ST_TO_ADDR
// if p3 = 103 then
19626: LD_VAR 0 3
19630: PUSH
19631: LD_INT 103
19633: EQUAL
19634: IFFALSE 19644
// sFog := true ;
19636: LD_ADDR_EXP 65
19640: PUSH
19641: LD_INT 1
19643: ST_TO_ADDR
// if p3 = 104 then
19644: LD_VAR 0 3
19648: PUSH
19649: LD_INT 104
19651: EQUAL
19652: IFFALSE 19662
// sReset := true ;
19654: LD_ADDR_EXP 66
19658: PUSH
19659: LD_INT 1
19661: ST_TO_ADDR
// if p3 = 105 then
19662: LD_VAR 0 3
19666: PUSH
19667: LD_INT 105
19669: EQUAL
19670: IFFALSE 19680
// sSun := true ;
19672: LD_ADDR_EXP 67
19676: PUSH
19677: LD_INT 1
19679: ST_TO_ADDR
// if p3 = 106 then
19680: LD_VAR 0 3
19684: PUSH
19685: LD_INT 106
19687: EQUAL
19688: IFFALSE 19698
// sTiger := true ;
19690: LD_ADDR_EXP 63
19694: PUSH
19695: LD_INT 1
19697: ST_TO_ADDR
// if p3 = 107 then
19698: LD_VAR 0 3
19702: PUSH
19703: LD_INT 107
19705: EQUAL
19706: IFFALSE 19716
// sBomb := true ;
19708: LD_ADDR_EXP 64
19712: PUSH
19713: LD_INT 1
19715: ST_TO_ADDR
// if p3 = 108 then
19716: LD_VAR 0 3
19720: PUSH
19721: LD_INT 108
19723: EQUAL
19724: IFFALSE 19734
// sWound := true ;
19726: LD_ADDR_EXP 72
19730: PUSH
19731: LD_INT 1
19733: ST_TO_ADDR
// if p3 = 109 then
19734: LD_VAR 0 3
19738: PUSH
19739: LD_INT 109
19741: EQUAL
19742: IFFALSE 19752
// sBetray := true ;
19744: LD_ADDR_EXP 76
19748: PUSH
19749: LD_INT 1
19751: ST_TO_ADDR
// if p3 = 110 then
19752: LD_VAR 0 3
19756: PUSH
19757: LD_INT 110
19759: EQUAL
19760: IFFALSE 19770
// sContamin := true ;
19762: LD_ADDR_EXP 77
19766: PUSH
19767: LD_INT 1
19769: ST_TO_ADDR
// if p3 = 111 then
19770: LD_VAR 0 3
19774: PUSH
19775: LD_INT 111
19777: EQUAL
19778: IFFALSE 19788
// sOil := true ;
19780: LD_ADDR_EXP 79
19784: PUSH
19785: LD_INT 1
19787: ST_TO_ADDR
// if p3 = 112 then
19788: LD_VAR 0 3
19792: PUSH
19793: LD_INT 112
19795: EQUAL
19796: IFFALSE 19806
// sStu := true ;
19798: LD_ADDR_EXP 83
19802: PUSH
19803: LD_INT 1
19805: ST_TO_ADDR
// if p3 = 113 then
19806: LD_VAR 0 3
19810: PUSH
19811: LD_INT 113
19813: EQUAL
19814: IFFALSE 19824
// sBazooka := true ;
19816: LD_ADDR_EXP 86
19820: PUSH
19821: LD_INT 1
19823: ST_TO_ADDR
// if p3 = 114 then
19824: LD_VAR 0 3
19828: PUSH
19829: LD_INT 114
19831: EQUAL
19832: IFFALSE 19842
// sMortar := true ;
19834: LD_ADDR_EXP 87
19838: PUSH
19839: LD_INT 1
19841: ST_TO_ADDR
// if p3 = 115 then
19842: LD_VAR 0 3
19846: PUSH
19847: LD_INT 115
19849: EQUAL
19850: IFFALSE 19860
// sRanger := true ;
19852: LD_ADDR_EXP 97
19856: PUSH
19857: LD_INT 1
19859: ST_TO_ADDR
// if p3 = 116 then
19860: LD_VAR 0 3
19864: PUSH
19865: LD_INT 116
19867: EQUAL
19868: IFFALSE 19878
// sComputer := true ;
19870: LD_ADDR_EXP 98
19874: PUSH
19875: LD_INT 1
19877: ST_TO_ADDR
// if p3 = 117 then
19878: LD_VAR 0 3
19882: PUSH
19883: LD_INT 117
19885: EQUAL
19886: IFFALSE 19896
// s30 := true ;
19888: LD_ADDR_EXP 99
19892: PUSH
19893: LD_INT 1
19895: ST_TO_ADDR
// if p3 = 118 then
19896: LD_VAR 0 3
19900: PUSH
19901: LD_INT 118
19903: EQUAL
19904: IFFALSE 19914
// s60 := true ;
19906: LD_ADDR_EXP 100
19910: PUSH
19911: LD_INT 1
19913: ST_TO_ADDR
// end ; if p2 = hack_mode then
19914: LD_VAR 0 2
19918: PUSH
19919: LD_INT 101
19921: EQUAL
19922: IFFALSE 20050
// begin case p3 of 1 :
19924: LD_VAR 0 3
19928: PUSH
19929: LD_INT 1
19931: DOUBLE
19932: EQUAL
19933: IFTRUE 19937
19935: GO 19944
19937: POP
// hHackUnlimitedResources ; 2 :
19938: CALL 32197 0 0
19942: GO 20050
19944: LD_INT 2
19946: DOUBLE
19947: EQUAL
19948: IFTRUE 19952
19950: GO 19959
19952: POP
// hHackSetLevel10 ; 3 :
19953: CALL 32330 0 0
19957: GO 20050
19959: LD_INT 3
19961: DOUBLE
19962: EQUAL
19963: IFTRUE 19967
19965: GO 19974
19967: POP
// hHackSetLevel10YourUnits ; 4 :
19968: CALL 32415 0 0
19972: GO 20050
19974: LD_INT 4
19976: DOUBLE
19977: EQUAL
19978: IFTRUE 19982
19980: GO 19989
19982: POP
// hHackInvincible ; 5 :
19983: CALL 32863 0 0
19987: GO 20050
19989: LD_INT 5
19991: DOUBLE
19992: EQUAL
19993: IFTRUE 19997
19995: GO 20004
19997: POP
// hHackInvisible ; 6 :
19998: CALL 32974 0 0
20002: GO 20050
20004: LD_INT 6
20006: DOUBLE
20007: EQUAL
20008: IFTRUE 20012
20010: GO 20019
20012: POP
// hHackChangeYourSide ; 7 :
20013: CALL 33031 0 0
20017: GO 20050
20019: LD_INT 7
20021: DOUBLE
20022: EQUAL
20023: IFTRUE 20027
20025: GO 20034
20027: POP
// hHackChangeUnitSide ; 8 :
20028: CALL 33073 0 0
20032: GO 20050
20034: LD_INT 8
20036: DOUBLE
20037: EQUAL
20038: IFTRUE 20042
20040: GO 20049
20042: POP
// hHackFog ; end ;
20043: CALL 33174 0 0
20047: GO 20050
20049: POP
// end ; if p2 = game_save_mode then
20050: LD_VAR 0 2
20054: PUSH
20055: LD_INT 102
20057: EQUAL
20058: IFFALSE 20113
// begin if p3 = 1 then
20060: LD_VAR 0 3
20064: PUSH
20065: LD_INT 1
20067: EQUAL
20068: IFFALSE 20080
// globalGameSaveCounter := p4 ;
20070: LD_ADDR_EXP 43
20074: PUSH
20075: LD_VAR 0 4
20079: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
20080: LD_VAR 0 3
20084: PUSH
20085: LD_INT 2
20087: EQUAL
20088: PUSH
20089: LD_EXP 43
20093: AND
20094: IFFALSE 20113
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20096: LD_STRING setGameSaveCounter(
20098: PUSH
20099: LD_EXP 43
20103: STR
20104: PUSH
20105: LD_STRING )
20107: STR
20108: PPUSH
20109: CALL_OW 559
// end ; end ;
20113: LD_VAR 0 7
20117: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
20118: LD_INT 0
20120: PPUSH
// streamModeActive := false ;
20121: LD_ADDR_EXP 44
20125: PUSH
20126: LD_INT 0
20128: ST_TO_ADDR
// normalCounter := 36 ;
20129: LD_ADDR_EXP 45
20133: PUSH
20134: LD_INT 36
20136: ST_TO_ADDR
// hardcoreCounter := 18 ;
20137: LD_ADDR_EXP 46
20141: PUSH
20142: LD_INT 18
20144: ST_TO_ADDR
// sRocket := false ;
20145: LD_ADDR_EXP 49
20149: PUSH
20150: LD_INT 0
20152: ST_TO_ADDR
// sSpeed := false ;
20153: LD_ADDR_EXP 48
20157: PUSH
20158: LD_INT 0
20160: ST_TO_ADDR
// sEngine := false ;
20161: LD_ADDR_EXP 50
20165: PUSH
20166: LD_INT 0
20168: ST_TO_ADDR
// sSpec := false ;
20169: LD_ADDR_EXP 47
20173: PUSH
20174: LD_INT 0
20176: ST_TO_ADDR
// sLevel := false ;
20177: LD_ADDR_EXP 51
20181: PUSH
20182: LD_INT 0
20184: ST_TO_ADDR
// sArmoury := false ;
20185: LD_ADDR_EXP 52
20189: PUSH
20190: LD_INT 0
20192: ST_TO_ADDR
// sRadar := false ;
20193: LD_ADDR_EXP 53
20197: PUSH
20198: LD_INT 0
20200: ST_TO_ADDR
// sBunker := false ;
20201: LD_ADDR_EXP 54
20205: PUSH
20206: LD_INT 0
20208: ST_TO_ADDR
// sHack := false ;
20209: LD_ADDR_EXP 55
20213: PUSH
20214: LD_INT 0
20216: ST_TO_ADDR
// sFire := false ;
20217: LD_ADDR_EXP 56
20221: PUSH
20222: LD_INT 0
20224: ST_TO_ADDR
// sRefresh := false ;
20225: LD_ADDR_EXP 57
20229: PUSH
20230: LD_INT 0
20232: ST_TO_ADDR
// sExp := false ;
20233: LD_ADDR_EXP 58
20237: PUSH
20238: LD_INT 0
20240: ST_TO_ADDR
// sDepot := false ;
20241: LD_ADDR_EXP 59
20245: PUSH
20246: LD_INT 0
20248: ST_TO_ADDR
// sFlag := false ;
20249: LD_ADDR_EXP 60
20253: PUSH
20254: LD_INT 0
20256: ST_TO_ADDR
// sKamikadze := false ;
20257: LD_ADDR_EXP 68
20261: PUSH
20262: LD_INT 0
20264: ST_TO_ADDR
// sTroll := false ;
20265: LD_ADDR_EXP 69
20269: PUSH
20270: LD_INT 0
20272: ST_TO_ADDR
// sSlow := false ;
20273: LD_ADDR_EXP 70
20277: PUSH
20278: LD_INT 0
20280: ST_TO_ADDR
// sLack := false ;
20281: LD_ADDR_EXP 71
20285: PUSH
20286: LD_INT 0
20288: ST_TO_ADDR
// sTank := false ;
20289: LD_ADDR_EXP 73
20293: PUSH
20294: LD_INT 0
20296: ST_TO_ADDR
// sRemote := false ;
20297: LD_ADDR_EXP 74
20301: PUSH
20302: LD_INT 0
20304: ST_TO_ADDR
// sPowell := false ;
20305: LD_ADDR_EXP 75
20309: PUSH
20310: LD_INT 0
20312: ST_TO_ADDR
// sTeleport := false ;
20313: LD_ADDR_EXP 78
20317: PUSH
20318: LD_INT 0
20320: ST_TO_ADDR
// sOilTower := false ;
20321: LD_ADDR_EXP 80
20325: PUSH
20326: LD_INT 0
20328: ST_TO_ADDR
// sShovel := false ;
20329: LD_ADDR_EXP 81
20333: PUSH
20334: LD_INT 0
20336: ST_TO_ADDR
// sSheik := false ;
20337: LD_ADDR_EXP 82
20341: PUSH
20342: LD_INT 0
20344: ST_TO_ADDR
// sEarthquake := false ;
20345: LD_ADDR_EXP 84
20349: PUSH
20350: LD_INT 0
20352: ST_TO_ADDR
// sAI := false ;
20353: LD_ADDR_EXP 85
20357: PUSH
20358: LD_INT 0
20360: ST_TO_ADDR
// sCargo := false ;
20361: LD_ADDR_EXP 88
20365: PUSH
20366: LD_INT 0
20368: ST_TO_ADDR
// sDLaser := false ;
20369: LD_ADDR_EXP 89
20373: PUSH
20374: LD_INT 0
20376: ST_TO_ADDR
// sExchange := false ;
20377: LD_ADDR_EXP 90
20381: PUSH
20382: LD_INT 0
20384: ST_TO_ADDR
// sFac := false ;
20385: LD_ADDR_EXP 91
20389: PUSH
20390: LD_INT 0
20392: ST_TO_ADDR
// sPower := false ;
20393: LD_ADDR_EXP 92
20397: PUSH
20398: LD_INT 0
20400: ST_TO_ADDR
// sRandom := false ;
20401: LD_ADDR_EXP 93
20405: PUSH
20406: LD_INT 0
20408: ST_TO_ADDR
// sShield := false ;
20409: LD_ADDR_EXP 94
20413: PUSH
20414: LD_INT 0
20416: ST_TO_ADDR
// sTime := false ;
20417: LD_ADDR_EXP 95
20421: PUSH
20422: LD_INT 0
20424: ST_TO_ADDR
// sTools := false ;
20425: LD_ADDR_EXP 96
20429: PUSH
20430: LD_INT 0
20432: ST_TO_ADDR
// sSold := false ;
20433: LD_ADDR_EXP 61
20437: PUSH
20438: LD_INT 0
20440: ST_TO_ADDR
// sDiff := false ;
20441: LD_ADDR_EXP 62
20445: PUSH
20446: LD_INT 0
20448: ST_TO_ADDR
// sFog := false ;
20449: LD_ADDR_EXP 65
20453: PUSH
20454: LD_INT 0
20456: ST_TO_ADDR
// sReset := false ;
20457: LD_ADDR_EXP 66
20461: PUSH
20462: LD_INT 0
20464: ST_TO_ADDR
// sSun := false ;
20465: LD_ADDR_EXP 67
20469: PUSH
20470: LD_INT 0
20472: ST_TO_ADDR
// sTiger := false ;
20473: LD_ADDR_EXP 63
20477: PUSH
20478: LD_INT 0
20480: ST_TO_ADDR
// sBomb := false ;
20481: LD_ADDR_EXP 64
20485: PUSH
20486: LD_INT 0
20488: ST_TO_ADDR
// sWound := false ;
20489: LD_ADDR_EXP 72
20493: PUSH
20494: LD_INT 0
20496: ST_TO_ADDR
// sBetray := false ;
20497: LD_ADDR_EXP 76
20501: PUSH
20502: LD_INT 0
20504: ST_TO_ADDR
// sContamin := false ;
20505: LD_ADDR_EXP 77
20509: PUSH
20510: LD_INT 0
20512: ST_TO_ADDR
// sOil := false ;
20513: LD_ADDR_EXP 79
20517: PUSH
20518: LD_INT 0
20520: ST_TO_ADDR
// sStu := false ;
20521: LD_ADDR_EXP 83
20525: PUSH
20526: LD_INT 0
20528: ST_TO_ADDR
// sBazooka := false ;
20529: LD_ADDR_EXP 86
20533: PUSH
20534: LD_INT 0
20536: ST_TO_ADDR
// sMortar := false ;
20537: LD_ADDR_EXP 87
20541: PUSH
20542: LD_INT 0
20544: ST_TO_ADDR
// sRanger := false ;
20545: LD_ADDR_EXP 97
20549: PUSH
20550: LD_INT 0
20552: ST_TO_ADDR
// sComputer := false ;
20553: LD_ADDR_EXP 98
20557: PUSH
20558: LD_INT 0
20560: ST_TO_ADDR
// s30 := false ;
20561: LD_ADDR_EXP 99
20565: PUSH
20566: LD_INT 0
20568: ST_TO_ADDR
// s60 := false ;
20569: LD_ADDR_EXP 100
20573: PUSH
20574: LD_INT 0
20576: ST_TO_ADDR
// end ;
20577: LD_VAR 0 1
20581: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20582: LD_INT 0
20584: PPUSH
20585: PPUSH
20586: PPUSH
20587: PPUSH
20588: PPUSH
20589: PPUSH
20590: PPUSH
// result := [ ] ;
20591: LD_ADDR_VAR 0 2
20595: PUSH
20596: EMPTY
20597: ST_TO_ADDR
// if campaign_id = 1 then
20598: LD_OWVAR 69
20602: PUSH
20603: LD_INT 1
20605: EQUAL
20606: IFFALSE 23772
// begin case mission_number of 1 :
20608: LD_OWVAR 70
20612: PUSH
20613: LD_INT 1
20615: DOUBLE
20616: EQUAL
20617: IFTRUE 20621
20619: GO 20697
20621: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20622: LD_ADDR_VAR 0 2
20626: PUSH
20627: LD_INT 2
20629: PUSH
20630: LD_INT 4
20632: PUSH
20633: LD_INT 11
20635: PUSH
20636: LD_INT 12
20638: PUSH
20639: LD_INT 15
20641: PUSH
20642: LD_INT 16
20644: PUSH
20645: LD_INT 22
20647: PUSH
20648: LD_INT 23
20650: PUSH
20651: LD_INT 26
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: PUSH
20665: LD_INT 101
20667: PUSH
20668: LD_INT 102
20670: PUSH
20671: LD_INT 106
20673: PUSH
20674: LD_INT 116
20676: PUSH
20677: LD_INT 117
20679: PUSH
20680: LD_INT 118
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: ST_TO_ADDR
20695: GO 23770
20697: LD_INT 2
20699: DOUBLE
20700: EQUAL
20701: IFTRUE 20705
20703: GO 20789
20705: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20706: LD_ADDR_VAR 0 2
20710: PUSH
20711: LD_INT 2
20713: PUSH
20714: LD_INT 4
20716: PUSH
20717: LD_INT 11
20719: PUSH
20720: LD_INT 12
20722: PUSH
20723: LD_INT 15
20725: PUSH
20726: LD_INT 16
20728: PUSH
20729: LD_INT 22
20731: PUSH
20732: LD_INT 23
20734: PUSH
20735: LD_INT 26
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: PUSH
20749: LD_INT 101
20751: PUSH
20752: LD_INT 102
20754: PUSH
20755: LD_INT 105
20757: PUSH
20758: LD_INT 106
20760: PUSH
20761: LD_INT 108
20763: PUSH
20764: LD_INT 116
20766: PUSH
20767: LD_INT 117
20769: PUSH
20770: LD_INT 118
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: ST_TO_ADDR
20787: GO 23770
20789: LD_INT 3
20791: DOUBLE
20792: EQUAL
20793: IFTRUE 20797
20795: GO 20885
20797: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20798: LD_ADDR_VAR 0 2
20802: PUSH
20803: LD_INT 2
20805: PUSH
20806: LD_INT 4
20808: PUSH
20809: LD_INT 5
20811: PUSH
20812: LD_INT 11
20814: PUSH
20815: LD_INT 12
20817: PUSH
20818: LD_INT 15
20820: PUSH
20821: LD_INT 16
20823: PUSH
20824: LD_INT 22
20826: PUSH
20827: LD_INT 26
20829: PUSH
20830: LD_INT 36
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: PUSH
20845: LD_INT 101
20847: PUSH
20848: LD_INT 102
20850: PUSH
20851: LD_INT 105
20853: PUSH
20854: LD_INT 106
20856: PUSH
20857: LD_INT 108
20859: PUSH
20860: LD_INT 116
20862: PUSH
20863: LD_INT 117
20865: PUSH
20866: LD_INT 118
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: ST_TO_ADDR
20883: GO 23770
20885: LD_INT 4
20887: DOUBLE
20888: EQUAL
20889: IFTRUE 20893
20891: GO 20989
20893: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20894: LD_ADDR_VAR 0 2
20898: PUSH
20899: LD_INT 2
20901: PUSH
20902: LD_INT 4
20904: PUSH
20905: LD_INT 5
20907: PUSH
20908: LD_INT 8
20910: PUSH
20911: LD_INT 11
20913: PUSH
20914: LD_INT 12
20916: PUSH
20917: LD_INT 15
20919: PUSH
20920: LD_INT 16
20922: PUSH
20923: LD_INT 22
20925: PUSH
20926: LD_INT 23
20928: PUSH
20929: LD_INT 26
20931: PUSH
20932: LD_INT 36
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: PUSH
20949: LD_INT 101
20951: PUSH
20952: LD_INT 102
20954: PUSH
20955: LD_INT 105
20957: PUSH
20958: LD_INT 106
20960: PUSH
20961: LD_INT 108
20963: PUSH
20964: LD_INT 116
20966: PUSH
20967: LD_INT 117
20969: PUSH
20970: LD_INT 118
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: ST_TO_ADDR
20987: GO 23770
20989: LD_INT 5
20991: DOUBLE
20992: EQUAL
20993: IFTRUE 20997
20995: GO 21109
20997: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20998: LD_ADDR_VAR 0 2
21002: PUSH
21003: LD_INT 2
21005: PUSH
21006: LD_INT 4
21008: PUSH
21009: LD_INT 5
21011: PUSH
21012: LD_INT 6
21014: PUSH
21015: LD_INT 8
21017: PUSH
21018: LD_INT 11
21020: PUSH
21021: LD_INT 12
21023: PUSH
21024: LD_INT 15
21026: PUSH
21027: LD_INT 16
21029: PUSH
21030: LD_INT 22
21032: PUSH
21033: LD_INT 23
21035: PUSH
21036: LD_INT 25
21038: PUSH
21039: LD_INT 26
21041: PUSH
21042: LD_INT 36
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: PUSH
21061: LD_INT 101
21063: PUSH
21064: LD_INT 102
21066: PUSH
21067: LD_INT 105
21069: PUSH
21070: LD_INT 106
21072: PUSH
21073: LD_INT 108
21075: PUSH
21076: LD_INT 109
21078: PUSH
21079: LD_INT 112
21081: PUSH
21082: LD_INT 116
21084: PUSH
21085: LD_INT 117
21087: PUSH
21088: LD_INT 118
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: ST_TO_ADDR
21107: GO 23770
21109: LD_INT 6
21111: DOUBLE
21112: EQUAL
21113: IFTRUE 21117
21115: GO 21249
21117: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21118: LD_ADDR_VAR 0 2
21122: PUSH
21123: LD_INT 2
21125: PUSH
21126: LD_INT 4
21128: PUSH
21129: LD_INT 5
21131: PUSH
21132: LD_INT 6
21134: PUSH
21135: LD_INT 8
21137: PUSH
21138: LD_INT 11
21140: PUSH
21141: LD_INT 12
21143: PUSH
21144: LD_INT 15
21146: PUSH
21147: LD_INT 16
21149: PUSH
21150: LD_INT 20
21152: PUSH
21153: LD_INT 21
21155: PUSH
21156: LD_INT 22
21158: PUSH
21159: LD_INT 23
21161: PUSH
21162: LD_INT 25
21164: PUSH
21165: LD_INT 26
21167: PUSH
21168: LD_INT 30
21170: PUSH
21171: LD_INT 31
21173: PUSH
21174: LD_INT 32
21176: PUSH
21177: LD_INT 36
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: PUSH
21201: LD_INT 101
21203: PUSH
21204: LD_INT 102
21206: PUSH
21207: LD_INT 105
21209: PUSH
21210: LD_INT 106
21212: PUSH
21213: LD_INT 108
21215: PUSH
21216: LD_INT 109
21218: PUSH
21219: LD_INT 112
21221: PUSH
21222: LD_INT 116
21224: PUSH
21225: LD_INT 117
21227: PUSH
21228: LD_INT 118
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: ST_TO_ADDR
21247: GO 23770
21249: LD_INT 7
21251: DOUBLE
21252: EQUAL
21253: IFTRUE 21257
21255: GO 21369
21257: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21258: LD_ADDR_VAR 0 2
21262: PUSH
21263: LD_INT 2
21265: PUSH
21266: LD_INT 4
21268: PUSH
21269: LD_INT 5
21271: PUSH
21272: LD_INT 7
21274: PUSH
21275: LD_INT 11
21277: PUSH
21278: LD_INT 12
21280: PUSH
21281: LD_INT 15
21283: PUSH
21284: LD_INT 16
21286: PUSH
21287: LD_INT 20
21289: PUSH
21290: LD_INT 21
21292: PUSH
21293: LD_INT 22
21295: PUSH
21296: LD_INT 23
21298: PUSH
21299: LD_INT 25
21301: PUSH
21302: LD_INT 26
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: PUSH
21321: LD_INT 101
21323: PUSH
21324: LD_INT 102
21326: PUSH
21327: LD_INT 103
21329: PUSH
21330: LD_INT 105
21332: PUSH
21333: LD_INT 106
21335: PUSH
21336: LD_INT 108
21338: PUSH
21339: LD_INT 112
21341: PUSH
21342: LD_INT 116
21344: PUSH
21345: LD_INT 117
21347: PUSH
21348: LD_INT 118
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: ST_TO_ADDR
21367: GO 23770
21369: LD_INT 8
21371: DOUBLE
21372: EQUAL
21373: IFTRUE 21377
21375: GO 21517
21377: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21378: LD_ADDR_VAR 0 2
21382: PUSH
21383: LD_INT 2
21385: PUSH
21386: LD_INT 4
21388: PUSH
21389: LD_INT 5
21391: PUSH
21392: LD_INT 6
21394: PUSH
21395: LD_INT 7
21397: PUSH
21398: LD_INT 8
21400: PUSH
21401: LD_INT 11
21403: PUSH
21404: LD_INT 12
21406: PUSH
21407: LD_INT 15
21409: PUSH
21410: LD_INT 16
21412: PUSH
21413: LD_INT 20
21415: PUSH
21416: LD_INT 21
21418: PUSH
21419: LD_INT 22
21421: PUSH
21422: LD_INT 23
21424: PUSH
21425: LD_INT 25
21427: PUSH
21428: LD_INT 26
21430: PUSH
21431: LD_INT 30
21433: PUSH
21434: LD_INT 31
21436: PUSH
21437: LD_INT 32
21439: PUSH
21440: LD_INT 36
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: PUSH
21465: LD_INT 101
21467: PUSH
21468: LD_INT 102
21470: PUSH
21471: LD_INT 103
21473: PUSH
21474: LD_INT 105
21476: PUSH
21477: LD_INT 106
21479: PUSH
21480: LD_INT 108
21482: PUSH
21483: LD_INT 109
21485: PUSH
21486: LD_INT 112
21488: PUSH
21489: LD_INT 116
21491: PUSH
21492: LD_INT 117
21494: PUSH
21495: LD_INT 118
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: ST_TO_ADDR
21515: GO 23770
21517: LD_INT 9
21519: DOUBLE
21520: EQUAL
21521: IFTRUE 21525
21523: GO 21673
21525: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21526: LD_ADDR_VAR 0 2
21530: PUSH
21531: LD_INT 2
21533: PUSH
21534: LD_INT 4
21536: PUSH
21537: LD_INT 5
21539: PUSH
21540: LD_INT 6
21542: PUSH
21543: LD_INT 7
21545: PUSH
21546: LD_INT 8
21548: PUSH
21549: LD_INT 11
21551: PUSH
21552: LD_INT 12
21554: PUSH
21555: LD_INT 15
21557: PUSH
21558: LD_INT 16
21560: PUSH
21561: LD_INT 20
21563: PUSH
21564: LD_INT 21
21566: PUSH
21567: LD_INT 22
21569: PUSH
21570: LD_INT 23
21572: PUSH
21573: LD_INT 25
21575: PUSH
21576: LD_INT 26
21578: PUSH
21579: LD_INT 28
21581: PUSH
21582: LD_INT 30
21584: PUSH
21585: LD_INT 31
21587: PUSH
21588: LD_INT 32
21590: PUSH
21591: LD_INT 36
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: PUSH
21617: LD_INT 101
21619: PUSH
21620: LD_INT 102
21622: PUSH
21623: LD_INT 103
21625: PUSH
21626: LD_INT 105
21628: PUSH
21629: LD_INT 106
21631: PUSH
21632: LD_INT 108
21634: PUSH
21635: LD_INT 109
21637: PUSH
21638: LD_INT 112
21640: PUSH
21641: LD_INT 114
21643: PUSH
21644: LD_INT 116
21646: PUSH
21647: LD_INT 117
21649: PUSH
21650: LD_INT 118
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: ST_TO_ADDR
21671: GO 23770
21673: LD_INT 10
21675: DOUBLE
21676: EQUAL
21677: IFTRUE 21681
21679: GO 21877
21681: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21682: LD_ADDR_VAR 0 2
21686: PUSH
21687: LD_INT 2
21689: PUSH
21690: LD_INT 4
21692: PUSH
21693: LD_INT 5
21695: PUSH
21696: LD_INT 6
21698: PUSH
21699: LD_INT 7
21701: PUSH
21702: LD_INT 8
21704: PUSH
21705: LD_INT 9
21707: PUSH
21708: LD_INT 10
21710: PUSH
21711: LD_INT 11
21713: PUSH
21714: LD_INT 12
21716: PUSH
21717: LD_INT 13
21719: PUSH
21720: LD_INT 14
21722: PUSH
21723: LD_INT 15
21725: PUSH
21726: LD_INT 16
21728: PUSH
21729: LD_INT 17
21731: PUSH
21732: LD_INT 18
21734: PUSH
21735: LD_INT 19
21737: PUSH
21738: LD_INT 20
21740: PUSH
21741: LD_INT 21
21743: PUSH
21744: LD_INT 22
21746: PUSH
21747: LD_INT 23
21749: PUSH
21750: LD_INT 24
21752: PUSH
21753: LD_INT 25
21755: PUSH
21756: LD_INT 26
21758: PUSH
21759: LD_INT 28
21761: PUSH
21762: LD_INT 30
21764: PUSH
21765: LD_INT 31
21767: PUSH
21768: LD_INT 32
21770: PUSH
21771: LD_INT 36
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 101
21807: PUSH
21808: LD_INT 102
21810: PUSH
21811: LD_INT 103
21813: PUSH
21814: LD_INT 104
21816: PUSH
21817: LD_INT 105
21819: PUSH
21820: LD_INT 106
21822: PUSH
21823: LD_INT 107
21825: PUSH
21826: LD_INT 108
21828: PUSH
21829: LD_INT 109
21831: PUSH
21832: LD_INT 110
21834: PUSH
21835: LD_INT 111
21837: PUSH
21838: LD_INT 112
21840: PUSH
21841: LD_INT 114
21843: PUSH
21844: LD_INT 116
21846: PUSH
21847: LD_INT 117
21849: PUSH
21850: LD_INT 118
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: ST_TO_ADDR
21875: GO 23770
21877: LD_INT 11
21879: DOUBLE
21880: EQUAL
21881: IFTRUE 21885
21883: GO 22089
21885: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21886: LD_ADDR_VAR 0 2
21890: PUSH
21891: LD_INT 2
21893: PUSH
21894: LD_INT 3
21896: PUSH
21897: LD_INT 4
21899: PUSH
21900: LD_INT 5
21902: PUSH
21903: LD_INT 6
21905: PUSH
21906: LD_INT 7
21908: PUSH
21909: LD_INT 8
21911: PUSH
21912: LD_INT 9
21914: PUSH
21915: LD_INT 10
21917: PUSH
21918: LD_INT 11
21920: PUSH
21921: LD_INT 12
21923: PUSH
21924: LD_INT 13
21926: PUSH
21927: LD_INT 14
21929: PUSH
21930: LD_INT 15
21932: PUSH
21933: LD_INT 16
21935: PUSH
21936: LD_INT 17
21938: PUSH
21939: LD_INT 18
21941: PUSH
21942: LD_INT 19
21944: PUSH
21945: LD_INT 20
21947: PUSH
21948: LD_INT 21
21950: PUSH
21951: LD_INT 22
21953: PUSH
21954: LD_INT 23
21956: PUSH
21957: LD_INT 24
21959: PUSH
21960: LD_INT 25
21962: PUSH
21963: LD_INT 26
21965: PUSH
21966: LD_INT 28
21968: PUSH
21969: LD_INT 30
21971: PUSH
21972: LD_INT 31
21974: PUSH
21975: LD_INT 32
21977: PUSH
21978: LD_INT 34
21980: PUSH
21981: LD_INT 36
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: PUSH
22017: LD_INT 101
22019: PUSH
22020: LD_INT 102
22022: PUSH
22023: LD_INT 103
22025: PUSH
22026: LD_INT 104
22028: PUSH
22029: LD_INT 105
22031: PUSH
22032: LD_INT 106
22034: PUSH
22035: LD_INT 107
22037: PUSH
22038: LD_INT 108
22040: PUSH
22041: LD_INT 109
22043: PUSH
22044: LD_INT 110
22046: PUSH
22047: LD_INT 111
22049: PUSH
22050: LD_INT 112
22052: PUSH
22053: LD_INT 114
22055: PUSH
22056: LD_INT 116
22058: PUSH
22059: LD_INT 117
22061: PUSH
22062: LD_INT 118
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: ST_TO_ADDR
22087: GO 23770
22089: LD_INT 12
22091: DOUBLE
22092: EQUAL
22093: IFTRUE 22097
22095: GO 22317
22097: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22098: LD_ADDR_VAR 0 2
22102: PUSH
22103: LD_INT 1
22105: PUSH
22106: LD_INT 2
22108: PUSH
22109: LD_INT 3
22111: PUSH
22112: LD_INT 4
22114: PUSH
22115: LD_INT 5
22117: PUSH
22118: LD_INT 6
22120: PUSH
22121: LD_INT 7
22123: PUSH
22124: LD_INT 8
22126: PUSH
22127: LD_INT 9
22129: PUSH
22130: LD_INT 10
22132: PUSH
22133: LD_INT 11
22135: PUSH
22136: LD_INT 12
22138: PUSH
22139: LD_INT 13
22141: PUSH
22142: LD_INT 14
22144: PUSH
22145: LD_INT 15
22147: PUSH
22148: LD_INT 16
22150: PUSH
22151: LD_INT 17
22153: PUSH
22154: LD_INT 18
22156: PUSH
22157: LD_INT 19
22159: PUSH
22160: LD_INT 20
22162: PUSH
22163: LD_INT 21
22165: PUSH
22166: LD_INT 22
22168: PUSH
22169: LD_INT 23
22171: PUSH
22172: LD_INT 24
22174: PUSH
22175: LD_INT 25
22177: PUSH
22178: LD_INT 26
22180: PUSH
22181: LD_INT 27
22183: PUSH
22184: LD_INT 28
22186: PUSH
22187: LD_INT 30
22189: PUSH
22190: LD_INT 31
22192: PUSH
22193: LD_INT 32
22195: PUSH
22196: LD_INT 33
22198: PUSH
22199: LD_INT 34
22201: PUSH
22202: LD_INT 36
22204: PUSH
22205: EMPTY
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: PUSH
22241: LD_INT 101
22243: PUSH
22244: LD_INT 102
22246: PUSH
22247: LD_INT 103
22249: PUSH
22250: LD_INT 104
22252: PUSH
22253: LD_INT 105
22255: PUSH
22256: LD_INT 106
22258: PUSH
22259: LD_INT 107
22261: PUSH
22262: LD_INT 108
22264: PUSH
22265: LD_INT 109
22267: PUSH
22268: LD_INT 110
22270: PUSH
22271: LD_INT 111
22273: PUSH
22274: LD_INT 112
22276: PUSH
22277: LD_INT 113
22279: PUSH
22280: LD_INT 114
22282: PUSH
22283: LD_INT 116
22285: PUSH
22286: LD_INT 117
22288: PUSH
22289: LD_INT 118
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: ST_TO_ADDR
22315: GO 23770
22317: LD_INT 13
22319: DOUBLE
22320: EQUAL
22321: IFTRUE 22325
22323: GO 22533
22325: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22326: LD_ADDR_VAR 0 2
22330: PUSH
22331: LD_INT 1
22333: PUSH
22334: LD_INT 2
22336: PUSH
22337: LD_INT 3
22339: PUSH
22340: LD_INT 4
22342: PUSH
22343: LD_INT 5
22345: PUSH
22346: LD_INT 8
22348: PUSH
22349: LD_INT 9
22351: PUSH
22352: LD_INT 10
22354: PUSH
22355: LD_INT 11
22357: PUSH
22358: LD_INT 12
22360: PUSH
22361: LD_INT 14
22363: PUSH
22364: LD_INT 15
22366: PUSH
22367: LD_INT 16
22369: PUSH
22370: LD_INT 17
22372: PUSH
22373: LD_INT 18
22375: PUSH
22376: LD_INT 19
22378: PUSH
22379: LD_INT 20
22381: PUSH
22382: LD_INT 21
22384: PUSH
22385: LD_INT 22
22387: PUSH
22388: LD_INT 23
22390: PUSH
22391: LD_INT 24
22393: PUSH
22394: LD_INT 25
22396: PUSH
22397: LD_INT 26
22399: PUSH
22400: LD_INT 27
22402: PUSH
22403: LD_INT 28
22405: PUSH
22406: LD_INT 30
22408: PUSH
22409: LD_INT 31
22411: PUSH
22412: LD_INT 32
22414: PUSH
22415: LD_INT 33
22417: PUSH
22418: LD_INT 34
22420: PUSH
22421: LD_INT 36
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: PUSH
22457: LD_INT 101
22459: PUSH
22460: LD_INT 102
22462: PUSH
22463: LD_INT 103
22465: PUSH
22466: LD_INT 104
22468: PUSH
22469: LD_INT 105
22471: PUSH
22472: LD_INT 106
22474: PUSH
22475: LD_INT 107
22477: PUSH
22478: LD_INT 108
22480: PUSH
22481: LD_INT 109
22483: PUSH
22484: LD_INT 110
22486: PUSH
22487: LD_INT 111
22489: PUSH
22490: LD_INT 112
22492: PUSH
22493: LD_INT 113
22495: PUSH
22496: LD_INT 114
22498: PUSH
22499: LD_INT 116
22501: PUSH
22502: LD_INT 117
22504: PUSH
22505: LD_INT 118
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: PUSH
22527: EMPTY
22528: LIST
22529: LIST
22530: ST_TO_ADDR
22531: GO 23770
22533: LD_INT 14
22535: DOUBLE
22536: EQUAL
22537: IFTRUE 22541
22539: GO 22765
22541: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22542: LD_ADDR_VAR 0 2
22546: PUSH
22547: LD_INT 1
22549: PUSH
22550: LD_INT 2
22552: PUSH
22553: LD_INT 3
22555: PUSH
22556: LD_INT 4
22558: PUSH
22559: LD_INT 5
22561: PUSH
22562: LD_INT 6
22564: PUSH
22565: LD_INT 7
22567: PUSH
22568: LD_INT 8
22570: PUSH
22571: LD_INT 9
22573: PUSH
22574: LD_INT 10
22576: PUSH
22577: LD_INT 11
22579: PUSH
22580: LD_INT 12
22582: PUSH
22583: LD_INT 13
22585: PUSH
22586: LD_INT 14
22588: PUSH
22589: LD_INT 15
22591: PUSH
22592: LD_INT 16
22594: PUSH
22595: LD_INT 17
22597: PUSH
22598: LD_INT 18
22600: PUSH
22601: LD_INT 19
22603: PUSH
22604: LD_INT 20
22606: PUSH
22607: LD_INT 21
22609: PUSH
22610: LD_INT 22
22612: PUSH
22613: LD_INT 23
22615: PUSH
22616: LD_INT 24
22618: PUSH
22619: LD_INT 25
22621: PUSH
22622: LD_INT 26
22624: PUSH
22625: LD_INT 27
22627: PUSH
22628: LD_INT 28
22630: PUSH
22631: LD_INT 29
22633: PUSH
22634: LD_INT 30
22636: PUSH
22637: LD_INT 31
22639: PUSH
22640: LD_INT 32
22642: PUSH
22643: LD_INT 33
22645: PUSH
22646: LD_INT 34
22648: PUSH
22649: LD_INT 36
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: PUSH
22689: LD_INT 101
22691: PUSH
22692: LD_INT 102
22694: PUSH
22695: LD_INT 103
22697: PUSH
22698: LD_INT 104
22700: PUSH
22701: LD_INT 105
22703: PUSH
22704: LD_INT 106
22706: PUSH
22707: LD_INT 107
22709: PUSH
22710: LD_INT 108
22712: PUSH
22713: LD_INT 109
22715: PUSH
22716: LD_INT 110
22718: PUSH
22719: LD_INT 111
22721: PUSH
22722: LD_INT 112
22724: PUSH
22725: LD_INT 113
22727: PUSH
22728: LD_INT 114
22730: PUSH
22731: LD_INT 116
22733: PUSH
22734: LD_INT 117
22736: PUSH
22737: LD_INT 118
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: ST_TO_ADDR
22763: GO 23770
22765: LD_INT 15
22767: DOUBLE
22768: EQUAL
22769: IFTRUE 22773
22771: GO 22997
22773: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22774: LD_ADDR_VAR 0 2
22778: PUSH
22779: LD_INT 1
22781: PUSH
22782: LD_INT 2
22784: PUSH
22785: LD_INT 3
22787: PUSH
22788: LD_INT 4
22790: PUSH
22791: LD_INT 5
22793: PUSH
22794: LD_INT 6
22796: PUSH
22797: LD_INT 7
22799: PUSH
22800: LD_INT 8
22802: PUSH
22803: LD_INT 9
22805: PUSH
22806: LD_INT 10
22808: PUSH
22809: LD_INT 11
22811: PUSH
22812: LD_INT 12
22814: PUSH
22815: LD_INT 13
22817: PUSH
22818: LD_INT 14
22820: PUSH
22821: LD_INT 15
22823: PUSH
22824: LD_INT 16
22826: PUSH
22827: LD_INT 17
22829: PUSH
22830: LD_INT 18
22832: PUSH
22833: LD_INT 19
22835: PUSH
22836: LD_INT 20
22838: PUSH
22839: LD_INT 21
22841: PUSH
22842: LD_INT 22
22844: PUSH
22845: LD_INT 23
22847: PUSH
22848: LD_INT 24
22850: PUSH
22851: LD_INT 25
22853: PUSH
22854: LD_INT 26
22856: PUSH
22857: LD_INT 27
22859: PUSH
22860: LD_INT 28
22862: PUSH
22863: LD_INT 29
22865: PUSH
22866: LD_INT 30
22868: PUSH
22869: LD_INT 31
22871: PUSH
22872: LD_INT 32
22874: PUSH
22875: LD_INT 33
22877: PUSH
22878: LD_INT 34
22880: PUSH
22881: LD_INT 36
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: PUSH
22921: LD_INT 101
22923: PUSH
22924: LD_INT 102
22926: PUSH
22927: LD_INT 103
22929: PUSH
22930: LD_INT 104
22932: PUSH
22933: LD_INT 105
22935: PUSH
22936: LD_INT 106
22938: PUSH
22939: LD_INT 107
22941: PUSH
22942: LD_INT 108
22944: PUSH
22945: LD_INT 109
22947: PUSH
22948: LD_INT 110
22950: PUSH
22951: LD_INT 111
22953: PUSH
22954: LD_INT 112
22956: PUSH
22957: LD_INT 113
22959: PUSH
22960: LD_INT 114
22962: PUSH
22963: LD_INT 116
22965: PUSH
22966: LD_INT 117
22968: PUSH
22969: LD_INT 118
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: ST_TO_ADDR
22995: GO 23770
22997: LD_INT 16
22999: DOUBLE
23000: EQUAL
23001: IFTRUE 23005
23003: GO 23141
23005: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23006: LD_ADDR_VAR 0 2
23010: PUSH
23011: LD_INT 2
23013: PUSH
23014: LD_INT 4
23016: PUSH
23017: LD_INT 5
23019: PUSH
23020: LD_INT 7
23022: PUSH
23023: LD_INT 11
23025: PUSH
23026: LD_INT 12
23028: PUSH
23029: LD_INT 15
23031: PUSH
23032: LD_INT 16
23034: PUSH
23035: LD_INT 20
23037: PUSH
23038: LD_INT 21
23040: PUSH
23041: LD_INT 22
23043: PUSH
23044: LD_INT 23
23046: PUSH
23047: LD_INT 25
23049: PUSH
23050: LD_INT 26
23052: PUSH
23053: LD_INT 30
23055: PUSH
23056: LD_INT 31
23058: PUSH
23059: LD_INT 32
23061: PUSH
23062: LD_INT 33
23064: PUSH
23065: LD_INT 34
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: PUSH
23089: LD_INT 101
23091: PUSH
23092: LD_INT 102
23094: PUSH
23095: LD_INT 103
23097: PUSH
23098: LD_INT 106
23100: PUSH
23101: LD_INT 108
23103: PUSH
23104: LD_INT 112
23106: PUSH
23107: LD_INT 113
23109: PUSH
23110: LD_INT 114
23112: PUSH
23113: LD_INT 116
23115: PUSH
23116: LD_INT 117
23118: PUSH
23119: LD_INT 118
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: PUSH
23135: EMPTY
23136: LIST
23137: LIST
23138: ST_TO_ADDR
23139: GO 23770
23141: LD_INT 17
23143: DOUBLE
23144: EQUAL
23145: IFTRUE 23149
23147: GO 23373
23149: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23150: LD_ADDR_VAR 0 2
23154: PUSH
23155: LD_INT 1
23157: PUSH
23158: LD_INT 2
23160: PUSH
23161: LD_INT 3
23163: PUSH
23164: LD_INT 4
23166: PUSH
23167: LD_INT 5
23169: PUSH
23170: LD_INT 6
23172: PUSH
23173: LD_INT 7
23175: PUSH
23176: LD_INT 8
23178: PUSH
23179: LD_INT 9
23181: PUSH
23182: LD_INT 10
23184: PUSH
23185: LD_INT 11
23187: PUSH
23188: LD_INT 12
23190: PUSH
23191: LD_INT 13
23193: PUSH
23194: LD_INT 14
23196: PUSH
23197: LD_INT 15
23199: PUSH
23200: LD_INT 16
23202: PUSH
23203: LD_INT 17
23205: PUSH
23206: LD_INT 18
23208: PUSH
23209: LD_INT 19
23211: PUSH
23212: LD_INT 20
23214: PUSH
23215: LD_INT 21
23217: PUSH
23218: LD_INT 22
23220: PUSH
23221: LD_INT 23
23223: PUSH
23224: LD_INT 24
23226: PUSH
23227: LD_INT 25
23229: PUSH
23230: LD_INT 26
23232: PUSH
23233: LD_INT 27
23235: PUSH
23236: LD_INT 28
23238: PUSH
23239: LD_INT 29
23241: PUSH
23242: LD_INT 30
23244: PUSH
23245: LD_INT 31
23247: PUSH
23248: LD_INT 32
23250: PUSH
23251: LD_INT 33
23253: PUSH
23254: LD_INT 34
23256: PUSH
23257: LD_INT 36
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: PUSH
23297: LD_INT 101
23299: PUSH
23300: LD_INT 102
23302: PUSH
23303: LD_INT 103
23305: PUSH
23306: LD_INT 104
23308: PUSH
23309: LD_INT 105
23311: PUSH
23312: LD_INT 106
23314: PUSH
23315: LD_INT 107
23317: PUSH
23318: LD_INT 108
23320: PUSH
23321: LD_INT 109
23323: PUSH
23324: LD_INT 110
23326: PUSH
23327: LD_INT 111
23329: PUSH
23330: LD_INT 112
23332: PUSH
23333: LD_INT 113
23335: PUSH
23336: LD_INT 114
23338: PUSH
23339: LD_INT 116
23341: PUSH
23342: LD_INT 117
23344: PUSH
23345: LD_INT 118
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: ST_TO_ADDR
23371: GO 23770
23373: LD_INT 18
23375: DOUBLE
23376: EQUAL
23377: IFTRUE 23381
23379: GO 23529
23381: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23382: LD_ADDR_VAR 0 2
23386: PUSH
23387: LD_INT 2
23389: PUSH
23390: LD_INT 4
23392: PUSH
23393: LD_INT 5
23395: PUSH
23396: LD_INT 7
23398: PUSH
23399: LD_INT 11
23401: PUSH
23402: LD_INT 12
23404: PUSH
23405: LD_INT 15
23407: PUSH
23408: LD_INT 16
23410: PUSH
23411: LD_INT 20
23413: PUSH
23414: LD_INT 21
23416: PUSH
23417: LD_INT 22
23419: PUSH
23420: LD_INT 23
23422: PUSH
23423: LD_INT 25
23425: PUSH
23426: LD_INT 26
23428: PUSH
23429: LD_INT 30
23431: PUSH
23432: LD_INT 31
23434: PUSH
23435: LD_INT 32
23437: PUSH
23438: LD_INT 33
23440: PUSH
23441: LD_INT 34
23443: PUSH
23444: LD_INT 35
23446: PUSH
23447: LD_INT 36
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: PUSH
23473: LD_INT 101
23475: PUSH
23476: LD_INT 102
23478: PUSH
23479: LD_INT 103
23481: PUSH
23482: LD_INT 106
23484: PUSH
23485: LD_INT 108
23487: PUSH
23488: LD_INT 112
23490: PUSH
23491: LD_INT 113
23493: PUSH
23494: LD_INT 114
23496: PUSH
23497: LD_INT 115
23499: PUSH
23500: LD_INT 116
23502: PUSH
23503: LD_INT 117
23505: PUSH
23506: LD_INT 118
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: ST_TO_ADDR
23527: GO 23770
23529: LD_INT 19
23531: DOUBLE
23532: EQUAL
23533: IFTRUE 23537
23535: GO 23769
23537: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23538: LD_ADDR_VAR 0 2
23542: PUSH
23543: LD_INT 1
23545: PUSH
23546: LD_INT 2
23548: PUSH
23549: LD_INT 3
23551: PUSH
23552: LD_INT 4
23554: PUSH
23555: LD_INT 5
23557: PUSH
23558: LD_INT 6
23560: PUSH
23561: LD_INT 7
23563: PUSH
23564: LD_INT 8
23566: PUSH
23567: LD_INT 9
23569: PUSH
23570: LD_INT 10
23572: PUSH
23573: LD_INT 11
23575: PUSH
23576: LD_INT 12
23578: PUSH
23579: LD_INT 13
23581: PUSH
23582: LD_INT 14
23584: PUSH
23585: LD_INT 15
23587: PUSH
23588: LD_INT 16
23590: PUSH
23591: LD_INT 17
23593: PUSH
23594: LD_INT 18
23596: PUSH
23597: LD_INT 19
23599: PUSH
23600: LD_INT 20
23602: PUSH
23603: LD_INT 21
23605: PUSH
23606: LD_INT 22
23608: PUSH
23609: LD_INT 23
23611: PUSH
23612: LD_INT 24
23614: PUSH
23615: LD_INT 25
23617: PUSH
23618: LD_INT 26
23620: PUSH
23621: LD_INT 27
23623: PUSH
23624: LD_INT 28
23626: PUSH
23627: LD_INT 29
23629: PUSH
23630: LD_INT 30
23632: PUSH
23633: LD_INT 31
23635: PUSH
23636: LD_INT 32
23638: PUSH
23639: LD_INT 33
23641: PUSH
23642: LD_INT 34
23644: PUSH
23645: LD_INT 35
23647: PUSH
23648: LD_INT 36
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: PUSH
23689: LD_INT 101
23691: PUSH
23692: LD_INT 102
23694: PUSH
23695: LD_INT 103
23697: PUSH
23698: LD_INT 104
23700: PUSH
23701: LD_INT 105
23703: PUSH
23704: LD_INT 106
23706: PUSH
23707: LD_INT 107
23709: PUSH
23710: LD_INT 108
23712: PUSH
23713: LD_INT 109
23715: PUSH
23716: LD_INT 110
23718: PUSH
23719: LD_INT 111
23721: PUSH
23722: LD_INT 112
23724: PUSH
23725: LD_INT 113
23727: PUSH
23728: LD_INT 114
23730: PUSH
23731: LD_INT 115
23733: PUSH
23734: LD_INT 116
23736: PUSH
23737: LD_INT 117
23739: PUSH
23740: LD_INT 118
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: ST_TO_ADDR
23767: GO 23770
23769: POP
// end else
23770: GO 24001
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23772: LD_ADDR_VAR 0 2
23776: PUSH
23777: LD_INT 1
23779: PUSH
23780: LD_INT 2
23782: PUSH
23783: LD_INT 3
23785: PUSH
23786: LD_INT 4
23788: PUSH
23789: LD_INT 5
23791: PUSH
23792: LD_INT 6
23794: PUSH
23795: LD_INT 7
23797: PUSH
23798: LD_INT 8
23800: PUSH
23801: LD_INT 9
23803: PUSH
23804: LD_INT 10
23806: PUSH
23807: LD_INT 11
23809: PUSH
23810: LD_INT 12
23812: PUSH
23813: LD_INT 13
23815: PUSH
23816: LD_INT 14
23818: PUSH
23819: LD_INT 15
23821: PUSH
23822: LD_INT 16
23824: PUSH
23825: LD_INT 17
23827: PUSH
23828: LD_INT 18
23830: PUSH
23831: LD_INT 19
23833: PUSH
23834: LD_INT 20
23836: PUSH
23837: LD_INT 21
23839: PUSH
23840: LD_INT 22
23842: PUSH
23843: LD_INT 23
23845: PUSH
23846: LD_INT 24
23848: PUSH
23849: LD_INT 25
23851: PUSH
23852: LD_INT 26
23854: PUSH
23855: LD_INT 27
23857: PUSH
23858: LD_INT 28
23860: PUSH
23861: LD_INT 29
23863: PUSH
23864: LD_INT 30
23866: PUSH
23867: LD_INT 31
23869: PUSH
23870: LD_INT 32
23872: PUSH
23873: LD_INT 33
23875: PUSH
23876: LD_INT 34
23878: PUSH
23879: LD_INT 35
23881: PUSH
23882: LD_INT 36
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: PUSH
23923: LD_INT 101
23925: PUSH
23926: LD_INT 102
23928: PUSH
23929: LD_INT 103
23931: PUSH
23932: LD_INT 104
23934: PUSH
23935: LD_INT 105
23937: PUSH
23938: LD_INT 106
23940: PUSH
23941: LD_INT 107
23943: PUSH
23944: LD_INT 108
23946: PUSH
23947: LD_INT 109
23949: PUSH
23950: LD_INT 110
23952: PUSH
23953: LD_INT 111
23955: PUSH
23956: LD_INT 112
23958: PUSH
23959: LD_INT 113
23961: PUSH
23962: LD_INT 114
23964: PUSH
23965: LD_INT 115
23967: PUSH
23968: LD_INT 116
23970: PUSH
23971: LD_INT 117
23973: PUSH
23974: LD_INT 118
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: ST_TO_ADDR
// if result then
24001: LD_VAR 0 2
24005: IFFALSE 24791
// begin normal :=  ;
24007: LD_ADDR_VAR 0 5
24011: PUSH
24012: LD_STRING 
24014: ST_TO_ADDR
// hardcore :=  ;
24015: LD_ADDR_VAR 0 6
24019: PUSH
24020: LD_STRING 
24022: ST_TO_ADDR
// active :=  ;
24023: LD_ADDR_VAR 0 7
24027: PUSH
24028: LD_STRING 
24030: ST_TO_ADDR
// for i = 1 to normalCounter do
24031: LD_ADDR_VAR 0 8
24035: PUSH
24036: DOUBLE
24037: LD_INT 1
24039: DEC
24040: ST_TO_ADDR
24041: LD_EXP 45
24045: PUSH
24046: FOR_TO
24047: IFFALSE 24148
// begin tmp := 0 ;
24049: LD_ADDR_VAR 0 3
24053: PUSH
24054: LD_STRING 0
24056: ST_TO_ADDR
// if result [ 1 ] then
24057: LD_VAR 0 2
24061: PUSH
24062: LD_INT 1
24064: ARRAY
24065: IFFALSE 24130
// if result [ 1 ] [ 1 ] = i then
24067: LD_VAR 0 2
24071: PUSH
24072: LD_INT 1
24074: ARRAY
24075: PUSH
24076: LD_INT 1
24078: ARRAY
24079: PUSH
24080: LD_VAR 0 8
24084: EQUAL
24085: IFFALSE 24130
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24087: LD_ADDR_VAR 0 2
24091: PUSH
24092: LD_VAR 0 2
24096: PPUSH
24097: LD_INT 1
24099: PPUSH
24100: LD_VAR 0 2
24104: PUSH
24105: LD_INT 1
24107: ARRAY
24108: PPUSH
24109: LD_INT 1
24111: PPUSH
24112: CALL_OW 3
24116: PPUSH
24117: CALL_OW 1
24121: ST_TO_ADDR
// tmp := 1 ;
24122: LD_ADDR_VAR 0 3
24126: PUSH
24127: LD_STRING 1
24129: ST_TO_ADDR
// end ; normal := normal & tmp ;
24130: LD_ADDR_VAR 0 5
24134: PUSH
24135: LD_VAR 0 5
24139: PUSH
24140: LD_VAR 0 3
24144: STR
24145: ST_TO_ADDR
// end ;
24146: GO 24046
24148: POP
24149: POP
// for i = 1 to hardcoreCounter do
24150: LD_ADDR_VAR 0 8
24154: PUSH
24155: DOUBLE
24156: LD_INT 1
24158: DEC
24159: ST_TO_ADDR
24160: LD_EXP 46
24164: PUSH
24165: FOR_TO
24166: IFFALSE 24271
// begin tmp := 0 ;
24168: LD_ADDR_VAR 0 3
24172: PUSH
24173: LD_STRING 0
24175: ST_TO_ADDR
// if result [ 2 ] then
24176: LD_VAR 0 2
24180: PUSH
24181: LD_INT 2
24183: ARRAY
24184: IFFALSE 24253
// if result [ 2 ] [ 1 ] = 100 + i then
24186: LD_VAR 0 2
24190: PUSH
24191: LD_INT 2
24193: ARRAY
24194: PUSH
24195: LD_INT 1
24197: ARRAY
24198: PUSH
24199: LD_INT 100
24201: PUSH
24202: LD_VAR 0 8
24206: PLUS
24207: EQUAL
24208: IFFALSE 24253
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24210: LD_ADDR_VAR 0 2
24214: PUSH
24215: LD_VAR 0 2
24219: PPUSH
24220: LD_INT 2
24222: PPUSH
24223: LD_VAR 0 2
24227: PUSH
24228: LD_INT 2
24230: ARRAY
24231: PPUSH
24232: LD_INT 1
24234: PPUSH
24235: CALL_OW 3
24239: PPUSH
24240: CALL_OW 1
24244: ST_TO_ADDR
// tmp := 1 ;
24245: LD_ADDR_VAR 0 3
24249: PUSH
24250: LD_STRING 1
24252: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24253: LD_ADDR_VAR 0 6
24257: PUSH
24258: LD_VAR 0 6
24262: PUSH
24263: LD_VAR 0 3
24267: STR
24268: ST_TO_ADDR
// end ;
24269: GO 24165
24271: POP
24272: POP
// if isGameLoad then
24273: LD_VAR 0 1
24277: IFFALSE 24752
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24279: LD_ADDR_VAR 0 4
24283: PUSH
24284: LD_EXP 49
24288: PUSH
24289: LD_EXP 48
24293: PUSH
24294: LD_EXP 50
24298: PUSH
24299: LD_EXP 47
24303: PUSH
24304: LD_EXP 51
24308: PUSH
24309: LD_EXP 52
24313: PUSH
24314: LD_EXP 53
24318: PUSH
24319: LD_EXP 54
24323: PUSH
24324: LD_EXP 55
24328: PUSH
24329: LD_EXP 56
24333: PUSH
24334: LD_EXP 57
24338: PUSH
24339: LD_EXP 58
24343: PUSH
24344: LD_EXP 59
24348: PUSH
24349: LD_EXP 60
24353: PUSH
24354: LD_EXP 68
24358: PUSH
24359: LD_EXP 69
24363: PUSH
24364: LD_EXP 70
24368: PUSH
24369: LD_EXP 71
24373: PUSH
24374: LD_EXP 73
24378: PUSH
24379: LD_EXP 74
24383: PUSH
24384: LD_EXP 75
24388: PUSH
24389: LD_EXP 78
24393: PUSH
24394: LD_EXP 80
24398: PUSH
24399: LD_EXP 81
24403: PUSH
24404: LD_EXP 82
24408: PUSH
24409: LD_EXP 84
24413: PUSH
24414: LD_EXP 85
24418: PUSH
24419: LD_EXP 88
24423: PUSH
24424: LD_EXP 89
24428: PUSH
24429: LD_EXP 90
24433: PUSH
24434: LD_EXP 91
24438: PUSH
24439: LD_EXP 92
24443: PUSH
24444: LD_EXP 93
24448: PUSH
24449: LD_EXP 94
24453: PUSH
24454: LD_EXP 95
24458: PUSH
24459: LD_EXP 96
24463: PUSH
24464: LD_EXP 61
24468: PUSH
24469: LD_EXP 62
24473: PUSH
24474: LD_EXP 65
24478: PUSH
24479: LD_EXP 66
24483: PUSH
24484: LD_EXP 67
24488: PUSH
24489: LD_EXP 63
24493: PUSH
24494: LD_EXP 64
24498: PUSH
24499: LD_EXP 72
24503: PUSH
24504: LD_EXP 76
24508: PUSH
24509: LD_EXP 77
24513: PUSH
24514: LD_EXP 79
24518: PUSH
24519: LD_EXP 83
24523: PUSH
24524: LD_EXP 86
24528: PUSH
24529: LD_EXP 87
24533: PUSH
24534: LD_EXP 97
24538: PUSH
24539: LD_EXP 98
24543: PUSH
24544: LD_EXP 99
24548: PUSH
24549: LD_EXP 100
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: ST_TO_ADDR
// tmp :=  ;
24610: LD_ADDR_VAR 0 3
24614: PUSH
24615: LD_STRING 
24617: ST_TO_ADDR
// for i = 1 to normalCounter do
24618: LD_ADDR_VAR 0 8
24622: PUSH
24623: DOUBLE
24624: LD_INT 1
24626: DEC
24627: ST_TO_ADDR
24628: LD_EXP 45
24632: PUSH
24633: FOR_TO
24634: IFFALSE 24670
// begin if flags [ i ] then
24636: LD_VAR 0 4
24640: PUSH
24641: LD_VAR 0 8
24645: ARRAY
24646: IFFALSE 24668
// tmp := tmp & i & ; ;
24648: LD_ADDR_VAR 0 3
24652: PUSH
24653: LD_VAR 0 3
24657: PUSH
24658: LD_VAR 0 8
24662: STR
24663: PUSH
24664: LD_STRING ;
24666: STR
24667: ST_TO_ADDR
// end ;
24668: GO 24633
24670: POP
24671: POP
// for i = 1 to hardcoreCounter do
24672: LD_ADDR_VAR 0 8
24676: PUSH
24677: DOUBLE
24678: LD_INT 1
24680: DEC
24681: ST_TO_ADDR
24682: LD_EXP 46
24686: PUSH
24687: FOR_TO
24688: IFFALSE 24734
// begin if flags [ normalCounter + i ] then
24690: LD_VAR 0 4
24694: PUSH
24695: LD_EXP 45
24699: PUSH
24700: LD_VAR 0 8
24704: PLUS
24705: ARRAY
24706: IFFALSE 24732
// tmp := tmp & ( 100 + i ) & ; ;
24708: LD_ADDR_VAR 0 3
24712: PUSH
24713: LD_VAR 0 3
24717: PUSH
24718: LD_INT 100
24720: PUSH
24721: LD_VAR 0 8
24725: PLUS
24726: STR
24727: PUSH
24728: LD_STRING ;
24730: STR
24731: ST_TO_ADDR
// end ;
24732: GO 24687
24734: POP
24735: POP
// if tmp then
24736: LD_VAR 0 3
24740: IFFALSE 24752
// active := tmp ;
24742: LD_ADDR_VAR 0 7
24746: PUSH
24747: LD_VAR 0 3
24751: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24752: LD_STRING getStreamItemsFromMission("
24754: PUSH
24755: LD_VAR 0 5
24759: STR
24760: PUSH
24761: LD_STRING ","
24763: STR
24764: PUSH
24765: LD_VAR 0 6
24769: STR
24770: PUSH
24771: LD_STRING ","
24773: STR
24774: PUSH
24775: LD_VAR 0 7
24779: STR
24780: PUSH
24781: LD_STRING ")
24783: STR
24784: PPUSH
24785: CALL_OW 559
// end else
24789: GO 24798
// ToLua ( getStreamItemsFromMission("","","") ) ;
24791: LD_STRING getStreamItemsFromMission("","","")
24793: PPUSH
24794: CALL_OW 559
// end ;
24798: LD_VAR 0 2
24802: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24803: LD_EXP 44
24807: PUSH
24808: LD_EXP 49
24812: AND
24813: IFFALSE 24937
24815: GO 24817
24817: DISABLE
24818: LD_INT 0
24820: PPUSH
24821: PPUSH
// begin enable ;
24822: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24823: LD_ADDR_VAR 0 2
24827: PUSH
24828: LD_INT 22
24830: PUSH
24831: LD_OWVAR 2
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 2
24842: PUSH
24843: LD_INT 34
24845: PUSH
24846: LD_INT 7
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: LD_INT 34
24855: PUSH
24856: LD_INT 45
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: LD_INT 34
24865: PUSH
24866: LD_INT 28
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: PUSH
24873: LD_INT 34
24875: PUSH
24876: LD_INT 47
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PPUSH
24894: CALL_OW 69
24898: ST_TO_ADDR
// if not tmp then
24899: LD_VAR 0 2
24903: NOT
24904: IFFALSE 24908
// exit ;
24906: GO 24937
// for i in tmp do
24908: LD_ADDR_VAR 0 1
24912: PUSH
24913: LD_VAR 0 2
24917: PUSH
24918: FOR_IN
24919: IFFALSE 24935
// begin SetLives ( i , 0 ) ;
24921: LD_VAR 0 1
24925: PPUSH
24926: LD_INT 0
24928: PPUSH
24929: CALL_OW 234
// end ;
24933: GO 24918
24935: POP
24936: POP
// end ;
24937: PPOPN 2
24939: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24940: LD_EXP 44
24944: PUSH
24945: LD_EXP 50
24949: AND
24950: IFFALSE 25034
24952: GO 24954
24954: DISABLE
24955: LD_INT 0
24957: PPUSH
24958: PPUSH
// begin enable ;
24959: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24960: LD_ADDR_VAR 0 2
24964: PUSH
24965: LD_INT 22
24967: PUSH
24968: LD_OWVAR 2
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PUSH
24977: LD_INT 32
24979: PUSH
24980: LD_INT 3
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PPUSH
24991: CALL_OW 69
24995: ST_TO_ADDR
// if not tmp then
24996: LD_VAR 0 2
25000: NOT
25001: IFFALSE 25005
// exit ;
25003: GO 25034
// for i in tmp do
25005: LD_ADDR_VAR 0 1
25009: PUSH
25010: LD_VAR 0 2
25014: PUSH
25015: FOR_IN
25016: IFFALSE 25032
// begin SetLives ( i , 0 ) ;
25018: LD_VAR 0 1
25022: PPUSH
25023: LD_INT 0
25025: PPUSH
25026: CALL_OW 234
// end ;
25030: GO 25015
25032: POP
25033: POP
// end ;
25034: PPOPN 2
25036: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25037: LD_EXP 44
25041: PUSH
25042: LD_EXP 47
25046: AND
25047: IFFALSE 25140
25049: GO 25051
25051: DISABLE
25052: LD_INT 0
25054: PPUSH
// begin enable ;
25055: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25056: LD_ADDR_VAR 0 1
25060: PUSH
25061: LD_INT 22
25063: PUSH
25064: LD_OWVAR 2
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: LD_INT 2
25075: PUSH
25076: LD_INT 25
25078: PUSH
25079: LD_INT 5
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PUSH
25086: LD_INT 25
25088: PUSH
25089: LD_INT 9
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PUSH
25096: LD_INT 25
25098: PUSH
25099: LD_INT 8
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PPUSH
25116: CALL_OW 69
25120: PUSH
25121: FOR_IN
25122: IFFALSE 25138
// begin SetClass ( i , 1 ) ;
25124: LD_VAR 0 1
25128: PPUSH
25129: LD_INT 1
25131: PPUSH
25132: CALL_OW 336
// end ;
25136: GO 25121
25138: POP
25139: POP
// end ;
25140: PPOPN 1
25142: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25143: LD_EXP 44
25147: PUSH
25148: LD_EXP 48
25152: AND
25153: PUSH
25154: LD_OWVAR 65
25158: PUSH
25159: LD_INT 7
25161: LESS
25162: AND
25163: IFFALSE 25177
25165: GO 25167
25167: DISABLE
// begin enable ;
25168: ENABLE
// game_speed := 7 ;
25169: LD_ADDR_OWVAR 65
25173: PUSH
25174: LD_INT 7
25176: ST_TO_ADDR
// end ;
25177: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25178: LD_EXP 44
25182: PUSH
25183: LD_EXP 51
25187: AND
25188: IFFALSE 25390
25190: GO 25192
25192: DISABLE
25193: LD_INT 0
25195: PPUSH
25196: PPUSH
25197: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25198: LD_ADDR_VAR 0 3
25202: PUSH
25203: LD_INT 81
25205: PUSH
25206: LD_OWVAR 2
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 21
25217: PUSH
25218: LD_INT 1
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: PPUSH
25229: CALL_OW 69
25233: ST_TO_ADDR
// if not tmp then
25234: LD_VAR 0 3
25238: NOT
25239: IFFALSE 25243
// exit ;
25241: GO 25390
// if tmp > 5 then
25243: LD_VAR 0 3
25247: PUSH
25248: LD_INT 5
25250: GREATER
25251: IFFALSE 25263
// k := 5 else
25253: LD_ADDR_VAR 0 2
25257: PUSH
25258: LD_INT 5
25260: ST_TO_ADDR
25261: GO 25273
// k := tmp ;
25263: LD_ADDR_VAR 0 2
25267: PUSH
25268: LD_VAR 0 3
25272: ST_TO_ADDR
// for i := 1 to k do
25273: LD_ADDR_VAR 0 1
25277: PUSH
25278: DOUBLE
25279: LD_INT 1
25281: DEC
25282: ST_TO_ADDR
25283: LD_VAR 0 2
25287: PUSH
25288: FOR_TO
25289: IFFALSE 25388
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25291: LD_VAR 0 3
25295: PUSH
25296: LD_VAR 0 1
25300: ARRAY
25301: PPUSH
25302: LD_VAR 0 1
25306: PUSH
25307: LD_INT 4
25309: MOD
25310: PUSH
25311: LD_INT 1
25313: PLUS
25314: PPUSH
25315: CALL_OW 259
25319: PUSH
25320: LD_INT 10
25322: LESS
25323: IFFALSE 25386
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25325: LD_VAR 0 3
25329: PUSH
25330: LD_VAR 0 1
25334: ARRAY
25335: PPUSH
25336: LD_VAR 0 1
25340: PUSH
25341: LD_INT 4
25343: MOD
25344: PUSH
25345: LD_INT 1
25347: PLUS
25348: PPUSH
25349: LD_VAR 0 3
25353: PUSH
25354: LD_VAR 0 1
25358: ARRAY
25359: PPUSH
25360: LD_VAR 0 1
25364: PUSH
25365: LD_INT 4
25367: MOD
25368: PUSH
25369: LD_INT 1
25371: PLUS
25372: PPUSH
25373: CALL_OW 259
25377: PUSH
25378: LD_INT 1
25380: PLUS
25381: PPUSH
25382: CALL_OW 237
25386: GO 25288
25388: POP
25389: POP
// end ;
25390: PPOPN 3
25392: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25393: LD_EXP 44
25397: PUSH
25398: LD_EXP 52
25402: AND
25403: IFFALSE 25423
25405: GO 25407
25407: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25408: LD_INT 4
25410: PPUSH
25411: LD_OWVAR 2
25415: PPUSH
25416: LD_INT 0
25418: PPUSH
25419: CALL_OW 324
25423: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25424: LD_EXP 44
25428: PUSH
25429: LD_EXP 81
25433: AND
25434: IFFALSE 25454
25436: GO 25438
25438: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25439: LD_INT 19
25441: PPUSH
25442: LD_OWVAR 2
25446: PPUSH
25447: LD_INT 0
25449: PPUSH
25450: CALL_OW 324
25454: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25455: LD_EXP 44
25459: PUSH
25460: LD_EXP 53
25464: AND
25465: IFFALSE 25567
25467: GO 25469
25469: DISABLE
25470: LD_INT 0
25472: PPUSH
25473: PPUSH
// begin enable ;
25474: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25475: LD_ADDR_VAR 0 2
25479: PUSH
25480: LD_INT 22
25482: PUSH
25483: LD_OWVAR 2
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PUSH
25492: LD_INT 2
25494: PUSH
25495: LD_INT 34
25497: PUSH
25498: LD_INT 11
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: LD_INT 34
25507: PUSH
25508: LD_INT 30
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: LIST
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PPUSH
25524: CALL_OW 69
25528: ST_TO_ADDR
// if not tmp then
25529: LD_VAR 0 2
25533: NOT
25534: IFFALSE 25538
// exit ;
25536: GO 25567
// for i in tmp do
25538: LD_ADDR_VAR 0 1
25542: PUSH
25543: LD_VAR 0 2
25547: PUSH
25548: FOR_IN
25549: IFFALSE 25565
// begin SetLives ( i , 0 ) ;
25551: LD_VAR 0 1
25555: PPUSH
25556: LD_INT 0
25558: PPUSH
25559: CALL_OW 234
// end ;
25563: GO 25548
25565: POP
25566: POP
// end ;
25567: PPOPN 2
25569: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25570: LD_EXP 44
25574: PUSH
25575: LD_EXP 54
25579: AND
25580: IFFALSE 25600
25582: GO 25584
25584: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25585: LD_INT 32
25587: PPUSH
25588: LD_OWVAR 2
25592: PPUSH
25593: LD_INT 0
25595: PPUSH
25596: CALL_OW 324
25600: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25601: LD_EXP 44
25605: PUSH
25606: LD_EXP 55
25610: AND
25611: IFFALSE 25792
25613: GO 25615
25615: DISABLE
25616: LD_INT 0
25618: PPUSH
25619: PPUSH
25620: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25621: LD_ADDR_VAR 0 2
25625: PUSH
25626: LD_INT 22
25628: PUSH
25629: LD_OWVAR 2
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: LD_INT 33
25640: PUSH
25641: LD_INT 3
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PPUSH
25652: CALL_OW 69
25656: ST_TO_ADDR
// if not tmp then
25657: LD_VAR 0 2
25661: NOT
25662: IFFALSE 25666
// exit ;
25664: GO 25792
// side := 0 ;
25666: LD_ADDR_VAR 0 3
25670: PUSH
25671: LD_INT 0
25673: ST_TO_ADDR
// for i := 1 to 8 do
25674: LD_ADDR_VAR 0 1
25678: PUSH
25679: DOUBLE
25680: LD_INT 1
25682: DEC
25683: ST_TO_ADDR
25684: LD_INT 8
25686: PUSH
25687: FOR_TO
25688: IFFALSE 25736
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25690: LD_OWVAR 2
25694: PUSH
25695: LD_VAR 0 1
25699: NONEQUAL
25700: PUSH
25701: LD_OWVAR 2
25705: PPUSH
25706: LD_VAR 0 1
25710: PPUSH
25711: CALL_OW 81
25715: PUSH
25716: LD_INT 2
25718: EQUAL
25719: AND
25720: IFFALSE 25734
// begin side := i ;
25722: LD_ADDR_VAR 0 3
25726: PUSH
25727: LD_VAR 0 1
25731: ST_TO_ADDR
// break ;
25732: GO 25736
// end ;
25734: GO 25687
25736: POP
25737: POP
// if not side then
25738: LD_VAR 0 3
25742: NOT
25743: IFFALSE 25747
// exit ;
25745: GO 25792
// for i := 1 to tmp do
25747: LD_ADDR_VAR 0 1
25751: PUSH
25752: DOUBLE
25753: LD_INT 1
25755: DEC
25756: ST_TO_ADDR
25757: LD_VAR 0 2
25761: PUSH
25762: FOR_TO
25763: IFFALSE 25790
// if Prob ( 60 ) then
25765: LD_INT 60
25767: PPUSH
25768: CALL_OW 13
25772: IFFALSE 25788
// SetSide ( i , side ) ;
25774: LD_VAR 0 1
25778: PPUSH
25779: LD_VAR 0 3
25783: PPUSH
25784: CALL_OW 235
25788: GO 25762
25790: POP
25791: POP
// end ;
25792: PPOPN 3
25794: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25795: LD_EXP 44
25799: PUSH
25800: LD_EXP 57
25804: AND
25805: IFFALSE 25924
25807: GO 25809
25809: DISABLE
25810: LD_INT 0
25812: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25813: LD_ADDR_VAR 0 1
25817: PUSH
25818: LD_INT 22
25820: PUSH
25821: LD_OWVAR 2
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: PUSH
25830: LD_INT 21
25832: PUSH
25833: LD_INT 1
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: PUSH
25840: LD_INT 3
25842: PUSH
25843: LD_INT 23
25845: PUSH
25846: LD_INT 0
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: LIST
25861: PPUSH
25862: CALL_OW 69
25866: PUSH
25867: FOR_IN
25868: IFFALSE 25922
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25870: LD_VAR 0 1
25874: PPUSH
25875: CALL_OW 257
25879: PUSH
25880: LD_INT 1
25882: PUSH
25883: LD_INT 2
25885: PUSH
25886: LD_INT 3
25888: PUSH
25889: LD_INT 4
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: IN
25898: IFFALSE 25920
// SetClass ( un , rand ( 1 , 4 ) ) ;
25900: LD_VAR 0 1
25904: PPUSH
25905: LD_INT 1
25907: PPUSH
25908: LD_INT 4
25910: PPUSH
25911: CALL_OW 12
25915: PPUSH
25916: CALL_OW 336
25920: GO 25867
25922: POP
25923: POP
// end ;
25924: PPOPN 1
25926: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25927: LD_EXP 44
25931: PUSH
25932: LD_EXP 56
25936: AND
25937: IFFALSE 26016
25939: GO 25941
25941: DISABLE
25942: LD_INT 0
25944: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25945: LD_ADDR_VAR 0 1
25949: PUSH
25950: LD_INT 22
25952: PUSH
25953: LD_OWVAR 2
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: LD_INT 21
25964: PUSH
25965: LD_INT 3
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: PPUSH
25976: CALL_OW 69
25980: ST_TO_ADDR
// if not tmp then
25981: LD_VAR 0 1
25985: NOT
25986: IFFALSE 25990
// exit ;
25988: GO 26016
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25990: LD_VAR 0 1
25994: PUSH
25995: LD_INT 1
25997: PPUSH
25998: LD_VAR 0 1
26002: PPUSH
26003: CALL_OW 12
26007: ARRAY
26008: PPUSH
26009: LD_INT 100
26011: PPUSH
26012: CALL_OW 234
// end ;
26016: PPOPN 1
26018: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26019: LD_EXP 44
26023: PUSH
26024: LD_EXP 58
26028: AND
26029: IFFALSE 26127
26031: GO 26033
26033: DISABLE
26034: LD_INT 0
26036: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26037: LD_ADDR_VAR 0 1
26041: PUSH
26042: LD_INT 22
26044: PUSH
26045: LD_OWVAR 2
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 21
26056: PUSH
26057: LD_INT 1
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PPUSH
26068: CALL_OW 69
26072: ST_TO_ADDR
// if not tmp then
26073: LD_VAR 0 1
26077: NOT
26078: IFFALSE 26082
// exit ;
26080: GO 26127
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26082: LD_VAR 0 1
26086: PUSH
26087: LD_INT 1
26089: PPUSH
26090: LD_VAR 0 1
26094: PPUSH
26095: CALL_OW 12
26099: ARRAY
26100: PPUSH
26101: LD_INT 1
26103: PPUSH
26104: LD_INT 4
26106: PPUSH
26107: CALL_OW 12
26111: PPUSH
26112: LD_INT 3000
26114: PPUSH
26115: LD_INT 9000
26117: PPUSH
26118: CALL_OW 12
26122: PPUSH
26123: CALL_OW 492
// end ;
26127: PPOPN 1
26129: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26130: LD_EXP 44
26134: PUSH
26135: LD_EXP 59
26139: AND
26140: IFFALSE 26160
26142: GO 26144
26144: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26145: LD_INT 1
26147: PPUSH
26148: LD_OWVAR 2
26152: PPUSH
26153: LD_INT 0
26155: PPUSH
26156: CALL_OW 324
26160: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26161: LD_EXP 44
26165: PUSH
26166: LD_EXP 60
26170: AND
26171: IFFALSE 26254
26173: GO 26175
26175: DISABLE
26176: LD_INT 0
26178: PPUSH
26179: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26180: LD_ADDR_VAR 0 2
26184: PUSH
26185: LD_INT 22
26187: PUSH
26188: LD_OWVAR 2
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: PUSH
26197: LD_INT 21
26199: PUSH
26200: LD_INT 3
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PPUSH
26211: CALL_OW 69
26215: ST_TO_ADDR
// if not tmp then
26216: LD_VAR 0 2
26220: NOT
26221: IFFALSE 26225
// exit ;
26223: GO 26254
// for i in tmp do
26225: LD_ADDR_VAR 0 1
26229: PUSH
26230: LD_VAR 0 2
26234: PUSH
26235: FOR_IN
26236: IFFALSE 26252
// SetBLevel ( i , 10 ) ;
26238: LD_VAR 0 1
26242: PPUSH
26243: LD_INT 10
26245: PPUSH
26246: CALL_OW 241
26250: GO 26235
26252: POP
26253: POP
// end ;
26254: PPOPN 2
26256: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26257: LD_EXP 44
26261: PUSH
26262: LD_EXP 61
26266: AND
26267: IFFALSE 26378
26269: GO 26271
26271: DISABLE
26272: LD_INT 0
26274: PPUSH
26275: PPUSH
26276: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26277: LD_ADDR_VAR 0 3
26281: PUSH
26282: LD_INT 22
26284: PUSH
26285: LD_OWVAR 2
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PUSH
26294: LD_INT 25
26296: PUSH
26297: LD_INT 1
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: PPUSH
26308: CALL_OW 69
26312: ST_TO_ADDR
// if not tmp then
26313: LD_VAR 0 3
26317: NOT
26318: IFFALSE 26322
// exit ;
26320: GO 26378
// un := tmp [ rand ( 1 , tmp ) ] ;
26322: LD_ADDR_VAR 0 2
26326: PUSH
26327: LD_VAR 0 3
26331: PUSH
26332: LD_INT 1
26334: PPUSH
26335: LD_VAR 0 3
26339: PPUSH
26340: CALL_OW 12
26344: ARRAY
26345: ST_TO_ADDR
// if Crawls ( un ) then
26346: LD_VAR 0 2
26350: PPUSH
26351: CALL_OW 318
26355: IFFALSE 26366
// ComWalk ( un ) ;
26357: LD_VAR 0 2
26361: PPUSH
26362: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26366: LD_VAR 0 2
26370: PPUSH
26371: LD_INT 5
26373: PPUSH
26374: CALL_OW 336
// end ;
26378: PPOPN 3
26380: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26381: LD_EXP 44
26385: PUSH
26386: LD_EXP 62
26390: AND
26391: PUSH
26392: LD_OWVAR 67
26396: PUSH
26397: LD_INT 4
26399: LESS
26400: AND
26401: IFFALSE 26420
26403: GO 26405
26405: DISABLE
// begin Difficulty := Difficulty + 1 ;
26406: LD_ADDR_OWVAR 67
26410: PUSH
26411: LD_OWVAR 67
26415: PUSH
26416: LD_INT 1
26418: PLUS
26419: ST_TO_ADDR
// end ;
26420: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26421: LD_EXP 44
26425: PUSH
26426: LD_EXP 63
26430: AND
26431: IFFALSE 26534
26433: GO 26435
26435: DISABLE
26436: LD_INT 0
26438: PPUSH
// begin for i := 1 to 5 do
26439: LD_ADDR_VAR 0 1
26443: PUSH
26444: DOUBLE
26445: LD_INT 1
26447: DEC
26448: ST_TO_ADDR
26449: LD_INT 5
26451: PUSH
26452: FOR_TO
26453: IFFALSE 26532
// begin uc_nation := nation_nature ;
26455: LD_ADDR_OWVAR 21
26459: PUSH
26460: LD_INT 0
26462: ST_TO_ADDR
// uc_side := 0 ;
26463: LD_ADDR_OWVAR 20
26467: PUSH
26468: LD_INT 0
26470: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26471: LD_ADDR_OWVAR 29
26475: PUSH
26476: LD_INT 12
26478: PUSH
26479: LD_INT 12
26481: PUSH
26482: EMPTY
26483: LIST
26484: LIST
26485: ST_TO_ADDR
// hc_agressivity := 20 ;
26486: LD_ADDR_OWVAR 35
26490: PUSH
26491: LD_INT 20
26493: ST_TO_ADDR
// hc_class := class_tiger ;
26494: LD_ADDR_OWVAR 28
26498: PUSH
26499: LD_INT 14
26501: ST_TO_ADDR
// hc_gallery :=  ;
26502: LD_ADDR_OWVAR 33
26506: PUSH
26507: LD_STRING 
26509: ST_TO_ADDR
// hc_name :=  ;
26510: LD_ADDR_OWVAR 26
26514: PUSH
26515: LD_STRING 
26517: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26518: CALL_OW 44
26522: PPUSH
26523: LD_INT 0
26525: PPUSH
26526: CALL_OW 51
// end ;
26530: GO 26452
26532: POP
26533: POP
// end ;
26534: PPOPN 1
26536: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26537: LD_EXP 44
26541: PUSH
26542: LD_EXP 64
26546: AND
26547: IFFALSE 26556
26549: GO 26551
26551: DISABLE
// StreamSibBomb ;
26552: CALL 26557 0 0
26556: END
// export function StreamSibBomb ; var i , x , y ; begin
26557: LD_INT 0
26559: PPUSH
26560: PPUSH
26561: PPUSH
26562: PPUSH
// result := false ;
26563: LD_ADDR_VAR 0 1
26567: PUSH
26568: LD_INT 0
26570: ST_TO_ADDR
// for i := 1 to 16 do
26571: LD_ADDR_VAR 0 2
26575: PUSH
26576: DOUBLE
26577: LD_INT 1
26579: DEC
26580: ST_TO_ADDR
26581: LD_INT 16
26583: PUSH
26584: FOR_TO
26585: IFFALSE 26784
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26587: LD_ADDR_VAR 0 3
26591: PUSH
26592: LD_INT 10
26594: PUSH
26595: LD_INT 20
26597: PUSH
26598: LD_INT 30
26600: PUSH
26601: LD_INT 40
26603: PUSH
26604: LD_INT 50
26606: PUSH
26607: LD_INT 60
26609: PUSH
26610: LD_INT 70
26612: PUSH
26613: LD_INT 80
26615: PUSH
26616: LD_INT 90
26618: PUSH
26619: LD_INT 100
26621: PUSH
26622: LD_INT 110
26624: PUSH
26625: LD_INT 120
26627: PUSH
26628: LD_INT 130
26630: PUSH
26631: LD_INT 140
26633: PUSH
26634: LD_INT 150
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 1
26656: PPUSH
26657: LD_INT 15
26659: PPUSH
26660: CALL_OW 12
26664: ARRAY
26665: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26666: LD_ADDR_VAR 0 4
26670: PUSH
26671: LD_INT 10
26673: PUSH
26674: LD_INT 20
26676: PUSH
26677: LD_INT 30
26679: PUSH
26680: LD_INT 40
26682: PUSH
26683: LD_INT 50
26685: PUSH
26686: LD_INT 60
26688: PUSH
26689: LD_INT 70
26691: PUSH
26692: LD_INT 80
26694: PUSH
26695: LD_INT 90
26697: PUSH
26698: LD_INT 100
26700: PUSH
26701: LD_INT 110
26703: PUSH
26704: LD_INT 120
26706: PUSH
26707: LD_INT 130
26709: PUSH
26710: LD_INT 140
26712: PUSH
26713: LD_INT 150
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: PUSH
26733: LD_INT 1
26735: PPUSH
26736: LD_INT 15
26738: PPUSH
26739: CALL_OW 12
26743: ARRAY
26744: ST_TO_ADDR
// if ValidHex ( x , y ) then
26745: LD_VAR 0 3
26749: PPUSH
26750: LD_VAR 0 4
26754: PPUSH
26755: CALL_OW 488
26759: IFFALSE 26782
// begin result := [ x , y ] ;
26761: LD_ADDR_VAR 0 1
26765: PUSH
26766: LD_VAR 0 3
26770: PUSH
26771: LD_VAR 0 4
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: ST_TO_ADDR
// break ;
26780: GO 26784
// end ; end ;
26782: GO 26584
26784: POP
26785: POP
// if result then
26786: LD_VAR 0 1
26790: IFFALSE 26850
// begin ToLua ( playSibBomb() ) ;
26792: LD_STRING playSibBomb()
26794: PPUSH
26795: CALL_OW 559
// wait ( 0 0$14 ) ;
26799: LD_INT 490
26801: PPUSH
26802: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26806: LD_VAR 0 1
26810: PUSH
26811: LD_INT 1
26813: ARRAY
26814: PPUSH
26815: LD_VAR 0 1
26819: PUSH
26820: LD_INT 2
26822: ARRAY
26823: PPUSH
26824: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26828: LD_VAR 0 1
26832: PUSH
26833: LD_INT 1
26835: ARRAY
26836: PPUSH
26837: LD_VAR 0 1
26841: PUSH
26842: LD_INT 2
26844: ARRAY
26845: PPUSH
26846: CALL_OW 429
// end ; end ;
26850: LD_VAR 0 1
26854: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26855: LD_EXP 44
26859: PUSH
26860: LD_EXP 66
26864: AND
26865: IFFALSE 26877
26867: GO 26869
26869: DISABLE
// YouLost (  ) ;
26870: LD_STRING 
26872: PPUSH
26873: CALL_OW 104
26877: END
// every 0 0$1 trigger StreamModeActive and sFog do
26878: LD_EXP 44
26882: PUSH
26883: LD_EXP 65
26887: AND
26888: IFFALSE 26902
26890: GO 26892
26892: DISABLE
// FogOff ( your_side ) ;
26893: LD_OWVAR 2
26897: PPUSH
26898: CALL_OW 344
26902: END
// every 0 0$1 trigger StreamModeActive and sSun do
26903: LD_EXP 44
26907: PUSH
26908: LD_EXP 67
26912: AND
26913: IFFALSE 26941
26915: GO 26917
26917: DISABLE
// begin solar_recharge_percent := 0 ;
26918: LD_ADDR_OWVAR 79
26922: PUSH
26923: LD_INT 0
26925: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26926: LD_INT 10500
26928: PPUSH
26929: CALL_OW 67
// solar_recharge_percent := 100 ;
26933: LD_ADDR_OWVAR 79
26937: PUSH
26938: LD_INT 100
26940: ST_TO_ADDR
// end ;
26941: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26942: LD_EXP 44
26946: PUSH
26947: LD_EXP 68
26951: AND
26952: IFFALSE 27191
26954: GO 26956
26956: DISABLE
26957: LD_INT 0
26959: PPUSH
26960: PPUSH
26961: PPUSH
// begin tmp := [ ] ;
26962: LD_ADDR_VAR 0 3
26966: PUSH
26967: EMPTY
26968: ST_TO_ADDR
// for i := 1 to 6 do
26969: LD_ADDR_VAR 0 1
26973: PUSH
26974: DOUBLE
26975: LD_INT 1
26977: DEC
26978: ST_TO_ADDR
26979: LD_INT 6
26981: PUSH
26982: FOR_TO
26983: IFFALSE 27088
// begin uc_nation := nation_nature ;
26985: LD_ADDR_OWVAR 21
26989: PUSH
26990: LD_INT 0
26992: ST_TO_ADDR
// uc_side := 0 ;
26993: LD_ADDR_OWVAR 20
26997: PUSH
26998: LD_INT 0
27000: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27001: LD_ADDR_OWVAR 29
27005: PUSH
27006: LD_INT 12
27008: PUSH
27009: LD_INT 12
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: ST_TO_ADDR
// hc_agressivity := 20 ;
27016: LD_ADDR_OWVAR 35
27020: PUSH
27021: LD_INT 20
27023: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27024: LD_ADDR_OWVAR 28
27028: PUSH
27029: LD_INT 17
27031: ST_TO_ADDR
// hc_gallery :=  ;
27032: LD_ADDR_OWVAR 33
27036: PUSH
27037: LD_STRING 
27039: ST_TO_ADDR
// hc_name :=  ;
27040: LD_ADDR_OWVAR 26
27044: PUSH
27045: LD_STRING 
27047: ST_TO_ADDR
// un := CreateHuman ;
27048: LD_ADDR_VAR 0 2
27052: PUSH
27053: CALL_OW 44
27057: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27058: LD_VAR 0 2
27062: PPUSH
27063: LD_INT 1
27065: PPUSH
27066: CALL_OW 51
// tmp := tmp ^ un ;
27070: LD_ADDR_VAR 0 3
27074: PUSH
27075: LD_VAR 0 3
27079: PUSH
27080: LD_VAR 0 2
27084: ADD
27085: ST_TO_ADDR
// end ;
27086: GO 26982
27088: POP
27089: POP
// repeat wait ( 0 0$1 ) ;
27090: LD_INT 35
27092: PPUSH
27093: CALL_OW 67
// for un in tmp do
27097: LD_ADDR_VAR 0 2
27101: PUSH
27102: LD_VAR 0 3
27106: PUSH
27107: FOR_IN
27108: IFFALSE 27182
// begin if IsDead ( un ) then
27110: LD_VAR 0 2
27114: PPUSH
27115: CALL_OW 301
27119: IFFALSE 27139
// begin tmp := tmp diff un ;
27121: LD_ADDR_VAR 0 3
27125: PUSH
27126: LD_VAR 0 3
27130: PUSH
27131: LD_VAR 0 2
27135: DIFF
27136: ST_TO_ADDR
// continue ;
27137: GO 27107
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27139: LD_VAR 0 2
27143: PPUSH
27144: LD_INT 3
27146: PUSH
27147: LD_INT 22
27149: PUSH
27150: LD_INT 0
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PPUSH
27161: CALL_OW 69
27165: PPUSH
27166: LD_VAR 0 2
27170: PPUSH
27171: CALL_OW 74
27175: PPUSH
27176: CALL_OW 115
// end ;
27180: GO 27107
27182: POP
27183: POP
// until not tmp ;
27184: LD_VAR 0 3
27188: NOT
27189: IFFALSE 27090
// end ;
27191: PPOPN 3
27193: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27194: LD_EXP 44
27198: PUSH
27199: LD_EXP 69
27203: AND
27204: IFFALSE 27258
27206: GO 27208
27208: DISABLE
// begin ToLua ( displayTroll(); ) ;
27209: LD_STRING displayTroll();
27211: PPUSH
27212: CALL_OW 559
// wait ( 3 3$00 ) ;
27216: LD_INT 6300
27218: PPUSH
27219: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27223: LD_STRING hideTroll();
27225: PPUSH
27226: CALL_OW 559
// wait ( 1 1$00 ) ;
27230: LD_INT 2100
27232: PPUSH
27233: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27237: LD_STRING displayTroll();
27239: PPUSH
27240: CALL_OW 559
// wait ( 1 1$00 ) ;
27244: LD_INT 2100
27246: PPUSH
27247: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27251: LD_STRING hideTroll();
27253: PPUSH
27254: CALL_OW 559
// end ;
27258: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27259: LD_EXP 44
27263: PUSH
27264: LD_EXP 70
27268: AND
27269: IFFALSE 27332
27271: GO 27273
27273: DISABLE
27274: LD_INT 0
27276: PPUSH
// begin p := 0 ;
27277: LD_ADDR_VAR 0 1
27281: PUSH
27282: LD_INT 0
27284: ST_TO_ADDR
// repeat game_speed := 1 ;
27285: LD_ADDR_OWVAR 65
27289: PUSH
27290: LD_INT 1
27292: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27293: LD_INT 35
27295: PPUSH
27296: CALL_OW 67
// p := p + 1 ;
27300: LD_ADDR_VAR 0 1
27304: PUSH
27305: LD_VAR 0 1
27309: PUSH
27310: LD_INT 1
27312: PLUS
27313: ST_TO_ADDR
// until p >= 60 ;
27314: LD_VAR 0 1
27318: PUSH
27319: LD_INT 60
27321: GREATEREQUAL
27322: IFFALSE 27285
// game_speed := 4 ;
27324: LD_ADDR_OWVAR 65
27328: PUSH
27329: LD_INT 4
27331: ST_TO_ADDR
// end ;
27332: PPOPN 1
27334: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27335: LD_EXP 44
27339: PUSH
27340: LD_EXP 71
27344: AND
27345: IFFALSE 27491
27347: GO 27349
27349: DISABLE
27350: LD_INT 0
27352: PPUSH
27353: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27354: LD_ADDR_VAR 0 1
27358: PUSH
27359: LD_INT 22
27361: PUSH
27362: LD_OWVAR 2
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: PUSH
27371: LD_INT 2
27373: PUSH
27374: LD_INT 30
27376: PUSH
27377: LD_INT 0
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: LD_INT 30
27386: PUSH
27387: LD_INT 1
27389: PUSH
27390: EMPTY
27391: LIST
27392: LIST
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: LIST
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PPUSH
27403: CALL_OW 69
27407: ST_TO_ADDR
// if not depot then
27408: LD_VAR 0 1
27412: NOT
27413: IFFALSE 27417
// exit ;
27415: GO 27491
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27417: LD_ADDR_VAR 0 2
27421: PUSH
27422: LD_VAR 0 1
27426: PUSH
27427: LD_INT 1
27429: PPUSH
27430: LD_VAR 0 1
27434: PPUSH
27435: CALL_OW 12
27439: ARRAY
27440: PPUSH
27441: CALL_OW 274
27445: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27446: LD_VAR 0 2
27450: PPUSH
27451: LD_INT 1
27453: PPUSH
27454: LD_INT 0
27456: PPUSH
27457: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27461: LD_VAR 0 2
27465: PPUSH
27466: LD_INT 2
27468: PPUSH
27469: LD_INT 0
27471: PPUSH
27472: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27476: LD_VAR 0 2
27480: PPUSH
27481: LD_INT 3
27483: PPUSH
27484: LD_INT 0
27486: PPUSH
27487: CALL_OW 277
// end ;
27491: PPOPN 2
27493: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27494: LD_EXP 44
27498: PUSH
27499: LD_EXP 72
27503: AND
27504: IFFALSE 27601
27506: GO 27508
27508: DISABLE
27509: LD_INT 0
27511: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27512: LD_ADDR_VAR 0 1
27516: PUSH
27517: LD_INT 22
27519: PUSH
27520: LD_OWVAR 2
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: PUSH
27529: LD_INT 21
27531: PUSH
27532: LD_INT 1
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: LD_INT 3
27541: PUSH
27542: LD_INT 23
27544: PUSH
27545: LD_INT 0
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: LIST
27560: PPUSH
27561: CALL_OW 69
27565: ST_TO_ADDR
// if not tmp then
27566: LD_VAR 0 1
27570: NOT
27571: IFFALSE 27575
// exit ;
27573: GO 27601
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27575: LD_VAR 0 1
27579: PUSH
27580: LD_INT 1
27582: PPUSH
27583: LD_VAR 0 1
27587: PPUSH
27588: CALL_OW 12
27592: ARRAY
27593: PPUSH
27594: LD_INT 200
27596: PPUSH
27597: CALL_OW 234
// end ;
27601: PPOPN 1
27603: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27604: LD_EXP 44
27608: PUSH
27609: LD_EXP 73
27613: AND
27614: IFFALSE 27693
27616: GO 27618
27618: DISABLE
27619: LD_INT 0
27621: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27622: LD_ADDR_VAR 0 1
27626: PUSH
27627: LD_INT 22
27629: PUSH
27630: LD_OWVAR 2
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: LD_INT 21
27641: PUSH
27642: LD_INT 2
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PPUSH
27653: CALL_OW 69
27657: ST_TO_ADDR
// if not tmp then
27658: LD_VAR 0 1
27662: NOT
27663: IFFALSE 27667
// exit ;
27665: GO 27693
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27667: LD_VAR 0 1
27671: PUSH
27672: LD_INT 1
27674: PPUSH
27675: LD_VAR 0 1
27679: PPUSH
27680: CALL_OW 12
27684: ARRAY
27685: PPUSH
27686: LD_INT 60
27688: PPUSH
27689: CALL_OW 234
// end ;
27693: PPOPN 1
27695: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27696: LD_EXP 44
27700: PUSH
27701: LD_EXP 74
27705: AND
27706: IFFALSE 27805
27708: GO 27710
27710: DISABLE
27711: LD_INT 0
27713: PPUSH
27714: PPUSH
// begin enable ;
27715: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27716: LD_ADDR_VAR 0 1
27720: PUSH
27721: LD_INT 22
27723: PUSH
27724: LD_OWVAR 2
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: LD_INT 61
27735: PUSH
27736: EMPTY
27737: LIST
27738: PUSH
27739: LD_INT 33
27741: PUSH
27742: LD_INT 2
27744: PUSH
27745: EMPTY
27746: LIST
27747: LIST
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: LIST
27753: PPUSH
27754: CALL_OW 69
27758: ST_TO_ADDR
// if not tmp then
27759: LD_VAR 0 1
27763: NOT
27764: IFFALSE 27768
// exit ;
27766: GO 27805
// for i in tmp do
27768: LD_ADDR_VAR 0 2
27772: PUSH
27773: LD_VAR 0 1
27777: PUSH
27778: FOR_IN
27779: IFFALSE 27803
// if IsControledBy ( i ) then
27781: LD_VAR 0 2
27785: PPUSH
27786: CALL_OW 312
27790: IFFALSE 27801
// ComUnlink ( i ) ;
27792: LD_VAR 0 2
27796: PPUSH
27797: CALL_OW 136
27801: GO 27778
27803: POP
27804: POP
// end ;
27805: PPOPN 2
27807: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27808: LD_EXP 44
27812: PUSH
27813: LD_EXP 75
27817: AND
27818: IFFALSE 27958
27820: GO 27822
27822: DISABLE
27823: LD_INT 0
27825: PPUSH
27826: PPUSH
// begin ToLua ( displayPowell(); ) ;
27827: LD_STRING displayPowell();
27829: PPUSH
27830: CALL_OW 559
// uc_side := 0 ;
27834: LD_ADDR_OWVAR 20
27838: PUSH
27839: LD_INT 0
27841: ST_TO_ADDR
// uc_nation := 2 ;
27842: LD_ADDR_OWVAR 21
27846: PUSH
27847: LD_INT 2
27849: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27850: LD_ADDR_OWVAR 37
27854: PUSH
27855: LD_INT 14
27857: ST_TO_ADDR
// vc_engine := engine_siberite ;
27858: LD_ADDR_OWVAR 39
27862: PUSH
27863: LD_INT 3
27865: ST_TO_ADDR
// vc_control := control_apeman ;
27866: LD_ADDR_OWVAR 38
27870: PUSH
27871: LD_INT 5
27873: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27874: LD_ADDR_OWVAR 40
27878: PUSH
27879: LD_INT 29
27881: ST_TO_ADDR
// un := CreateVehicle ;
27882: LD_ADDR_VAR 0 2
27886: PUSH
27887: CALL_OW 45
27891: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27892: LD_VAR 0 2
27896: PPUSH
27897: LD_INT 1
27899: PPUSH
27900: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27904: LD_INT 35
27906: PPUSH
27907: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27911: LD_VAR 0 2
27915: PPUSH
27916: LD_INT 22
27918: PUSH
27919: LD_OWVAR 2
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PPUSH
27928: CALL_OW 69
27932: PPUSH
27933: LD_VAR 0 2
27937: PPUSH
27938: CALL_OW 74
27942: PPUSH
27943: CALL_OW 115
// until IsDead ( un ) ;
27947: LD_VAR 0 2
27951: PPUSH
27952: CALL_OW 301
27956: IFFALSE 27904
// end ;
27958: PPOPN 2
27960: END
// every 0 0$1 trigger StreamModeActive and sStu do
27961: LD_EXP 44
27965: PUSH
27966: LD_EXP 83
27970: AND
27971: IFFALSE 27987
27973: GO 27975
27975: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27976: LD_STRING displayStucuk();
27978: PPUSH
27979: CALL_OW 559
// ResetFog ;
27983: CALL_OW 335
// end ;
27987: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27988: LD_EXP 44
27992: PUSH
27993: LD_EXP 76
27997: AND
27998: IFFALSE 28139
28000: GO 28002
28002: DISABLE
28003: LD_INT 0
28005: PPUSH
28006: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28007: LD_ADDR_VAR 0 2
28011: PUSH
28012: LD_INT 22
28014: PUSH
28015: LD_OWVAR 2
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: PUSH
28024: LD_INT 21
28026: PUSH
28027: LD_INT 1
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: PPUSH
28038: CALL_OW 69
28042: ST_TO_ADDR
// if not tmp then
28043: LD_VAR 0 2
28047: NOT
28048: IFFALSE 28052
// exit ;
28050: GO 28139
// un := tmp [ rand ( 1 , tmp ) ] ;
28052: LD_ADDR_VAR 0 1
28056: PUSH
28057: LD_VAR 0 2
28061: PUSH
28062: LD_INT 1
28064: PPUSH
28065: LD_VAR 0 2
28069: PPUSH
28070: CALL_OW 12
28074: ARRAY
28075: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28076: LD_VAR 0 1
28080: PPUSH
28081: LD_INT 0
28083: PPUSH
28084: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28088: LD_VAR 0 1
28092: PPUSH
28093: LD_OWVAR 3
28097: PUSH
28098: LD_VAR 0 1
28102: DIFF
28103: PPUSH
28104: LD_VAR 0 1
28108: PPUSH
28109: CALL_OW 74
28113: PPUSH
28114: CALL_OW 115
// wait ( 0 0$20 ) ;
28118: LD_INT 700
28120: PPUSH
28121: CALL_OW 67
// SetSide ( un , your_side ) ;
28125: LD_VAR 0 1
28129: PPUSH
28130: LD_OWVAR 2
28134: PPUSH
28135: CALL_OW 235
// end ;
28139: PPOPN 2
28141: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28142: LD_EXP 44
28146: PUSH
28147: LD_EXP 77
28151: AND
28152: IFFALSE 28258
28154: GO 28156
28156: DISABLE
28157: LD_INT 0
28159: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28160: LD_ADDR_VAR 0 1
28164: PUSH
28165: LD_INT 22
28167: PUSH
28168: LD_OWVAR 2
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 2
28179: PUSH
28180: LD_INT 30
28182: PUSH
28183: LD_INT 0
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 30
28192: PUSH
28193: LD_INT 1
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: LIST
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PPUSH
28209: CALL_OW 69
28213: ST_TO_ADDR
// if not depot then
28214: LD_VAR 0 1
28218: NOT
28219: IFFALSE 28223
// exit ;
28221: GO 28258
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28223: LD_VAR 0 1
28227: PUSH
28228: LD_INT 1
28230: ARRAY
28231: PPUSH
28232: CALL_OW 250
28236: PPUSH
28237: LD_VAR 0 1
28241: PUSH
28242: LD_INT 1
28244: ARRAY
28245: PPUSH
28246: CALL_OW 251
28250: PPUSH
28251: LD_INT 70
28253: PPUSH
28254: CALL_OW 495
// end ;
28258: PPOPN 1
28260: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28261: LD_EXP 44
28265: PUSH
28266: LD_EXP 78
28270: AND
28271: IFFALSE 28482
28273: GO 28275
28275: DISABLE
28276: LD_INT 0
28278: PPUSH
28279: PPUSH
28280: PPUSH
28281: PPUSH
28282: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28283: LD_ADDR_VAR 0 5
28287: PUSH
28288: LD_INT 22
28290: PUSH
28291: LD_OWVAR 2
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: LD_INT 21
28302: PUSH
28303: LD_INT 1
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: PPUSH
28314: CALL_OW 69
28318: ST_TO_ADDR
// if not tmp then
28319: LD_VAR 0 5
28323: NOT
28324: IFFALSE 28328
// exit ;
28326: GO 28482
// for i in tmp do
28328: LD_ADDR_VAR 0 1
28332: PUSH
28333: LD_VAR 0 5
28337: PUSH
28338: FOR_IN
28339: IFFALSE 28480
// begin d := rand ( 0 , 5 ) ;
28341: LD_ADDR_VAR 0 4
28345: PUSH
28346: LD_INT 0
28348: PPUSH
28349: LD_INT 5
28351: PPUSH
28352: CALL_OW 12
28356: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28357: LD_ADDR_VAR 0 2
28361: PUSH
28362: LD_VAR 0 1
28366: PPUSH
28367: CALL_OW 250
28371: PPUSH
28372: LD_VAR 0 4
28376: PPUSH
28377: LD_INT 3
28379: PPUSH
28380: LD_INT 12
28382: PPUSH
28383: CALL_OW 12
28387: PPUSH
28388: CALL_OW 272
28392: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28393: LD_ADDR_VAR 0 3
28397: PUSH
28398: LD_VAR 0 1
28402: PPUSH
28403: CALL_OW 251
28407: PPUSH
28408: LD_VAR 0 4
28412: PPUSH
28413: LD_INT 3
28415: PPUSH
28416: LD_INT 12
28418: PPUSH
28419: CALL_OW 12
28423: PPUSH
28424: CALL_OW 273
28428: ST_TO_ADDR
// if ValidHex ( x , y ) then
28429: LD_VAR 0 2
28433: PPUSH
28434: LD_VAR 0 3
28438: PPUSH
28439: CALL_OW 488
28443: IFFALSE 28478
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28445: LD_VAR 0 1
28449: PPUSH
28450: LD_VAR 0 2
28454: PPUSH
28455: LD_VAR 0 3
28459: PPUSH
28460: LD_INT 3
28462: PPUSH
28463: LD_INT 6
28465: PPUSH
28466: CALL_OW 12
28470: PPUSH
28471: LD_INT 1
28473: PPUSH
28474: CALL_OW 483
// end ;
28478: GO 28338
28480: POP
28481: POP
// end ;
28482: PPOPN 5
28484: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28485: LD_EXP 44
28489: PUSH
28490: LD_EXP 79
28494: AND
28495: IFFALSE 28589
28497: GO 28499
28499: DISABLE
28500: LD_INT 0
28502: PPUSH
28503: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28504: LD_ADDR_VAR 0 2
28508: PUSH
28509: LD_INT 22
28511: PUSH
28512: LD_OWVAR 2
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 32
28523: PUSH
28524: LD_INT 1
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 21
28533: PUSH
28534: LD_INT 2
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: LIST
28545: PPUSH
28546: CALL_OW 69
28550: ST_TO_ADDR
// if not tmp then
28551: LD_VAR 0 2
28555: NOT
28556: IFFALSE 28560
// exit ;
28558: GO 28589
// for i in tmp do
28560: LD_ADDR_VAR 0 1
28564: PUSH
28565: LD_VAR 0 2
28569: PUSH
28570: FOR_IN
28571: IFFALSE 28587
// SetFuel ( i , 0 ) ;
28573: LD_VAR 0 1
28577: PPUSH
28578: LD_INT 0
28580: PPUSH
28581: CALL_OW 240
28585: GO 28570
28587: POP
28588: POP
// end ;
28589: PPOPN 2
28591: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28592: LD_EXP 44
28596: PUSH
28597: LD_EXP 80
28601: AND
28602: IFFALSE 28668
28604: GO 28606
28606: DISABLE
28607: LD_INT 0
28609: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28610: LD_ADDR_VAR 0 1
28614: PUSH
28615: LD_INT 22
28617: PUSH
28618: LD_OWVAR 2
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 30
28629: PUSH
28630: LD_INT 29
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PPUSH
28641: CALL_OW 69
28645: ST_TO_ADDR
// if not tmp then
28646: LD_VAR 0 1
28650: NOT
28651: IFFALSE 28655
// exit ;
28653: GO 28668
// DestroyUnit ( tmp [ 1 ] ) ;
28655: LD_VAR 0 1
28659: PUSH
28660: LD_INT 1
28662: ARRAY
28663: PPUSH
28664: CALL_OW 65
// end ;
28668: PPOPN 1
28670: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28671: LD_EXP 44
28675: PUSH
28676: LD_EXP 82
28680: AND
28681: IFFALSE 28810
28683: GO 28685
28685: DISABLE
28686: LD_INT 0
28688: PPUSH
// begin uc_side := 0 ;
28689: LD_ADDR_OWVAR 20
28693: PUSH
28694: LD_INT 0
28696: ST_TO_ADDR
// uc_nation := nation_arabian ;
28697: LD_ADDR_OWVAR 21
28701: PUSH
28702: LD_INT 2
28704: ST_TO_ADDR
// hc_gallery :=  ;
28705: LD_ADDR_OWVAR 33
28709: PUSH
28710: LD_STRING 
28712: ST_TO_ADDR
// hc_name :=  ;
28713: LD_ADDR_OWVAR 26
28717: PUSH
28718: LD_STRING 
28720: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28721: LD_INT 1
28723: PPUSH
28724: LD_INT 11
28726: PPUSH
28727: LD_INT 10
28729: PPUSH
28730: CALL_OW 380
// un := CreateHuman ;
28734: LD_ADDR_VAR 0 1
28738: PUSH
28739: CALL_OW 44
28743: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28744: LD_VAR 0 1
28748: PPUSH
28749: LD_INT 1
28751: PPUSH
28752: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28756: LD_INT 35
28758: PPUSH
28759: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28763: LD_VAR 0 1
28767: PPUSH
28768: LD_INT 22
28770: PUSH
28771: LD_OWVAR 2
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PPUSH
28780: CALL_OW 69
28784: PPUSH
28785: LD_VAR 0 1
28789: PPUSH
28790: CALL_OW 74
28794: PPUSH
28795: CALL_OW 115
// until IsDead ( un ) ;
28799: LD_VAR 0 1
28803: PPUSH
28804: CALL_OW 301
28808: IFFALSE 28756
// end ;
28810: PPOPN 1
28812: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28813: LD_EXP 44
28817: PUSH
28818: LD_EXP 84
28822: AND
28823: IFFALSE 28835
28825: GO 28827
28827: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28828: LD_STRING earthquake(getX(game), 0, 32)
28830: PPUSH
28831: CALL_OW 559
28835: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28836: LD_EXP 44
28840: PUSH
28841: LD_EXP 85
28845: AND
28846: IFFALSE 28937
28848: GO 28850
28850: DISABLE
28851: LD_INT 0
28853: PPUSH
// begin enable ;
28854: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28855: LD_ADDR_VAR 0 1
28859: PUSH
28860: LD_INT 22
28862: PUSH
28863: LD_OWVAR 2
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 21
28874: PUSH
28875: LD_INT 2
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 33
28884: PUSH
28885: LD_INT 3
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: LIST
28896: PPUSH
28897: CALL_OW 69
28901: ST_TO_ADDR
// if not tmp then
28902: LD_VAR 0 1
28906: NOT
28907: IFFALSE 28911
// exit ;
28909: GO 28937
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28911: LD_VAR 0 1
28915: PUSH
28916: LD_INT 1
28918: PPUSH
28919: LD_VAR 0 1
28923: PPUSH
28924: CALL_OW 12
28928: ARRAY
28929: PPUSH
28930: LD_INT 1
28932: PPUSH
28933: CALL_OW 234
// end ;
28937: PPOPN 1
28939: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28940: LD_EXP 44
28944: PUSH
28945: LD_EXP 86
28949: AND
28950: IFFALSE 29091
28952: GO 28954
28954: DISABLE
28955: LD_INT 0
28957: PPUSH
28958: PPUSH
28959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28960: LD_ADDR_VAR 0 3
28964: PUSH
28965: LD_INT 22
28967: PUSH
28968: LD_OWVAR 2
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 25
28979: PUSH
28980: LD_INT 1
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PPUSH
28991: CALL_OW 69
28995: ST_TO_ADDR
// if not tmp then
28996: LD_VAR 0 3
29000: NOT
29001: IFFALSE 29005
// exit ;
29003: GO 29091
// un := tmp [ rand ( 1 , tmp ) ] ;
29005: LD_ADDR_VAR 0 2
29009: PUSH
29010: LD_VAR 0 3
29014: PUSH
29015: LD_INT 1
29017: PPUSH
29018: LD_VAR 0 3
29022: PPUSH
29023: CALL_OW 12
29027: ARRAY
29028: ST_TO_ADDR
// if Crawls ( un ) then
29029: LD_VAR 0 2
29033: PPUSH
29034: CALL_OW 318
29038: IFFALSE 29049
// ComWalk ( un ) ;
29040: LD_VAR 0 2
29044: PPUSH
29045: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29049: LD_VAR 0 2
29053: PPUSH
29054: LD_INT 9
29056: PPUSH
29057: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29061: LD_INT 28
29063: PPUSH
29064: LD_OWVAR 2
29068: PPUSH
29069: LD_INT 2
29071: PPUSH
29072: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29076: LD_INT 29
29078: PPUSH
29079: LD_OWVAR 2
29083: PPUSH
29084: LD_INT 2
29086: PPUSH
29087: CALL_OW 322
// end ;
29091: PPOPN 3
29093: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29094: LD_EXP 44
29098: PUSH
29099: LD_EXP 87
29103: AND
29104: IFFALSE 29215
29106: GO 29108
29108: DISABLE
29109: LD_INT 0
29111: PPUSH
29112: PPUSH
29113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29114: LD_ADDR_VAR 0 3
29118: PUSH
29119: LD_INT 22
29121: PUSH
29122: LD_OWVAR 2
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 25
29133: PUSH
29134: LD_INT 1
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PPUSH
29145: CALL_OW 69
29149: ST_TO_ADDR
// if not tmp then
29150: LD_VAR 0 3
29154: NOT
29155: IFFALSE 29159
// exit ;
29157: GO 29215
// un := tmp [ rand ( 1 , tmp ) ] ;
29159: LD_ADDR_VAR 0 2
29163: PUSH
29164: LD_VAR 0 3
29168: PUSH
29169: LD_INT 1
29171: PPUSH
29172: LD_VAR 0 3
29176: PPUSH
29177: CALL_OW 12
29181: ARRAY
29182: ST_TO_ADDR
// if Crawls ( un ) then
29183: LD_VAR 0 2
29187: PPUSH
29188: CALL_OW 318
29192: IFFALSE 29203
// ComWalk ( un ) ;
29194: LD_VAR 0 2
29198: PPUSH
29199: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29203: LD_VAR 0 2
29207: PPUSH
29208: LD_INT 8
29210: PPUSH
29211: CALL_OW 336
// end ;
29215: PPOPN 3
29217: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29218: LD_EXP 44
29222: PUSH
29223: LD_EXP 88
29227: AND
29228: IFFALSE 29372
29230: GO 29232
29232: DISABLE
29233: LD_INT 0
29235: PPUSH
29236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29237: LD_ADDR_VAR 0 2
29241: PUSH
29242: LD_INT 22
29244: PUSH
29245: LD_OWVAR 2
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: LD_INT 21
29256: PUSH
29257: LD_INT 2
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: PUSH
29264: LD_INT 2
29266: PUSH
29267: LD_INT 34
29269: PUSH
29270: LD_INT 12
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 34
29279: PUSH
29280: LD_INT 51
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 34
29289: PUSH
29290: LD_INT 32
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: LIST
29307: PPUSH
29308: CALL_OW 69
29312: ST_TO_ADDR
// if not tmp then
29313: LD_VAR 0 2
29317: NOT
29318: IFFALSE 29322
// exit ;
29320: GO 29372
// for i in tmp do
29322: LD_ADDR_VAR 0 1
29326: PUSH
29327: LD_VAR 0 2
29331: PUSH
29332: FOR_IN
29333: IFFALSE 29370
// if GetCargo ( i , mat_artifact ) = 0 then
29335: LD_VAR 0 1
29339: PPUSH
29340: LD_INT 4
29342: PPUSH
29343: CALL_OW 289
29347: PUSH
29348: LD_INT 0
29350: EQUAL
29351: IFFALSE 29368
// SetCargo ( i , mat_siberit , 100 ) ;
29353: LD_VAR 0 1
29357: PPUSH
29358: LD_INT 3
29360: PPUSH
29361: LD_INT 100
29363: PPUSH
29364: CALL_OW 290
29368: GO 29332
29370: POP
29371: POP
// end ;
29372: PPOPN 2
29374: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29375: LD_EXP 44
29379: PUSH
29380: LD_EXP 89
29384: AND
29385: IFFALSE 29568
29387: GO 29389
29389: DISABLE
29390: LD_INT 0
29392: PPUSH
29393: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29394: LD_ADDR_VAR 0 2
29398: PUSH
29399: LD_INT 22
29401: PUSH
29402: LD_OWVAR 2
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PPUSH
29411: CALL_OW 69
29415: ST_TO_ADDR
// if not tmp then
29416: LD_VAR 0 2
29420: NOT
29421: IFFALSE 29425
// exit ;
29423: GO 29568
// for i := 1 to 2 do
29425: LD_ADDR_VAR 0 1
29429: PUSH
29430: DOUBLE
29431: LD_INT 1
29433: DEC
29434: ST_TO_ADDR
29435: LD_INT 2
29437: PUSH
29438: FOR_TO
29439: IFFALSE 29566
// begin uc_side := your_side ;
29441: LD_ADDR_OWVAR 20
29445: PUSH
29446: LD_OWVAR 2
29450: ST_TO_ADDR
// uc_nation := nation_american ;
29451: LD_ADDR_OWVAR 21
29455: PUSH
29456: LD_INT 1
29458: ST_TO_ADDR
// vc_chassis := us_morphling ;
29459: LD_ADDR_OWVAR 37
29463: PUSH
29464: LD_INT 5
29466: ST_TO_ADDR
// vc_engine := engine_siberite ;
29467: LD_ADDR_OWVAR 39
29471: PUSH
29472: LD_INT 3
29474: ST_TO_ADDR
// vc_control := control_computer ;
29475: LD_ADDR_OWVAR 38
29479: PUSH
29480: LD_INT 3
29482: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29483: LD_ADDR_OWVAR 40
29487: PUSH
29488: LD_INT 10
29490: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29491: LD_VAR 0 2
29495: PUSH
29496: LD_INT 1
29498: ARRAY
29499: PPUSH
29500: CALL_OW 310
29504: NOT
29505: IFFALSE 29552
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29507: CALL_OW 45
29511: PPUSH
29512: LD_VAR 0 2
29516: PUSH
29517: LD_INT 1
29519: ARRAY
29520: PPUSH
29521: CALL_OW 250
29525: PPUSH
29526: LD_VAR 0 2
29530: PUSH
29531: LD_INT 1
29533: ARRAY
29534: PPUSH
29535: CALL_OW 251
29539: PPUSH
29540: LD_INT 12
29542: PPUSH
29543: LD_INT 1
29545: PPUSH
29546: CALL_OW 50
29550: GO 29564
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29552: CALL_OW 45
29556: PPUSH
29557: LD_INT 1
29559: PPUSH
29560: CALL_OW 51
// end ;
29564: GO 29438
29566: POP
29567: POP
// end ;
29568: PPOPN 2
29570: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29571: LD_EXP 44
29575: PUSH
29576: LD_EXP 90
29580: AND
29581: IFFALSE 29803
29583: GO 29585
29585: DISABLE
29586: LD_INT 0
29588: PPUSH
29589: PPUSH
29590: PPUSH
29591: PPUSH
29592: PPUSH
29593: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29594: LD_ADDR_VAR 0 6
29598: PUSH
29599: LD_INT 22
29601: PUSH
29602: LD_OWVAR 2
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 21
29613: PUSH
29614: LD_INT 1
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 3
29623: PUSH
29624: LD_INT 23
29626: PUSH
29627: LD_INT 0
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: LIST
29642: PPUSH
29643: CALL_OW 69
29647: ST_TO_ADDR
// if not tmp then
29648: LD_VAR 0 6
29652: NOT
29653: IFFALSE 29657
// exit ;
29655: GO 29803
// s1 := rand ( 1 , 4 ) ;
29657: LD_ADDR_VAR 0 2
29661: PUSH
29662: LD_INT 1
29664: PPUSH
29665: LD_INT 4
29667: PPUSH
29668: CALL_OW 12
29672: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29673: LD_ADDR_VAR 0 4
29677: PUSH
29678: LD_VAR 0 6
29682: PUSH
29683: LD_INT 1
29685: ARRAY
29686: PPUSH
29687: LD_VAR 0 2
29691: PPUSH
29692: CALL_OW 259
29696: ST_TO_ADDR
// if s1 = 1 then
29697: LD_VAR 0 2
29701: PUSH
29702: LD_INT 1
29704: EQUAL
29705: IFFALSE 29725
// s2 := rand ( 2 , 4 ) else
29707: LD_ADDR_VAR 0 3
29711: PUSH
29712: LD_INT 2
29714: PPUSH
29715: LD_INT 4
29717: PPUSH
29718: CALL_OW 12
29722: ST_TO_ADDR
29723: GO 29733
// s2 := 1 ;
29725: LD_ADDR_VAR 0 3
29729: PUSH
29730: LD_INT 1
29732: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29733: LD_ADDR_VAR 0 5
29737: PUSH
29738: LD_VAR 0 6
29742: PUSH
29743: LD_INT 1
29745: ARRAY
29746: PPUSH
29747: LD_VAR 0 3
29751: PPUSH
29752: CALL_OW 259
29756: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29757: LD_VAR 0 6
29761: PUSH
29762: LD_INT 1
29764: ARRAY
29765: PPUSH
29766: LD_VAR 0 2
29770: PPUSH
29771: LD_VAR 0 5
29775: PPUSH
29776: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29780: LD_VAR 0 6
29784: PUSH
29785: LD_INT 1
29787: ARRAY
29788: PPUSH
29789: LD_VAR 0 3
29793: PPUSH
29794: LD_VAR 0 4
29798: PPUSH
29799: CALL_OW 237
// end ;
29803: PPOPN 6
29805: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29806: LD_EXP 44
29810: PUSH
29811: LD_EXP 91
29815: AND
29816: IFFALSE 29895
29818: GO 29820
29820: DISABLE
29821: LD_INT 0
29823: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29824: LD_ADDR_VAR 0 1
29828: PUSH
29829: LD_INT 22
29831: PUSH
29832: LD_OWVAR 2
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: LD_INT 30
29843: PUSH
29844: LD_INT 3
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PPUSH
29855: CALL_OW 69
29859: ST_TO_ADDR
// if not tmp then
29860: LD_VAR 0 1
29864: NOT
29865: IFFALSE 29869
// exit ;
29867: GO 29895
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29869: LD_VAR 0 1
29873: PUSH
29874: LD_INT 1
29876: PPUSH
29877: LD_VAR 0 1
29881: PPUSH
29882: CALL_OW 12
29886: ARRAY
29887: PPUSH
29888: LD_INT 1
29890: PPUSH
29891: CALL_OW 234
// end ;
29895: PPOPN 1
29897: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29898: LD_EXP 44
29902: PUSH
29903: LD_EXP 92
29907: AND
29908: IFFALSE 30020
29910: GO 29912
29912: DISABLE
29913: LD_INT 0
29915: PPUSH
29916: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29917: LD_ADDR_VAR 0 2
29921: PUSH
29922: LD_INT 22
29924: PUSH
29925: LD_OWVAR 2
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: LD_INT 2
29936: PUSH
29937: LD_INT 30
29939: PUSH
29940: LD_INT 27
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 30
29949: PUSH
29950: LD_INT 26
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: LD_INT 30
29959: PUSH
29960: LD_INT 28
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: PPUSH
29977: CALL_OW 69
29981: ST_TO_ADDR
// if not tmp then
29982: LD_VAR 0 2
29986: NOT
29987: IFFALSE 29991
// exit ;
29989: GO 30020
// for i in tmp do
29991: LD_ADDR_VAR 0 1
29995: PUSH
29996: LD_VAR 0 2
30000: PUSH
30001: FOR_IN
30002: IFFALSE 30018
// SetLives ( i , 1 ) ;
30004: LD_VAR 0 1
30008: PPUSH
30009: LD_INT 1
30011: PPUSH
30012: CALL_OW 234
30016: GO 30001
30018: POP
30019: POP
// end ;
30020: PPOPN 2
30022: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30023: LD_EXP 44
30027: PUSH
30028: LD_EXP 93
30032: AND
30033: IFFALSE 30320
30035: GO 30037
30037: DISABLE
30038: LD_INT 0
30040: PPUSH
30041: PPUSH
30042: PPUSH
// begin i := rand ( 1 , 7 ) ;
30043: LD_ADDR_VAR 0 1
30047: PUSH
30048: LD_INT 1
30050: PPUSH
30051: LD_INT 7
30053: PPUSH
30054: CALL_OW 12
30058: ST_TO_ADDR
// case i of 1 :
30059: LD_VAR 0 1
30063: PUSH
30064: LD_INT 1
30066: DOUBLE
30067: EQUAL
30068: IFTRUE 30072
30070: GO 30082
30072: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30073: LD_STRING earthquake(getX(game), 0, 32)
30075: PPUSH
30076: CALL_OW 559
30080: GO 30320
30082: LD_INT 2
30084: DOUBLE
30085: EQUAL
30086: IFTRUE 30090
30088: GO 30104
30090: POP
// begin ToLua ( displayStucuk(); ) ;
30091: LD_STRING displayStucuk();
30093: PPUSH
30094: CALL_OW 559
// ResetFog ;
30098: CALL_OW 335
// end ; 3 :
30102: GO 30320
30104: LD_INT 3
30106: DOUBLE
30107: EQUAL
30108: IFTRUE 30112
30110: GO 30216
30112: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30113: LD_ADDR_VAR 0 2
30117: PUSH
30118: LD_INT 22
30120: PUSH
30121: LD_OWVAR 2
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 25
30132: PUSH
30133: LD_INT 1
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PPUSH
30144: CALL_OW 69
30148: ST_TO_ADDR
// if not tmp then
30149: LD_VAR 0 2
30153: NOT
30154: IFFALSE 30158
// exit ;
30156: GO 30320
// un := tmp [ rand ( 1 , tmp ) ] ;
30158: LD_ADDR_VAR 0 3
30162: PUSH
30163: LD_VAR 0 2
30167: PUSH
30168: LD_INT 1
30170: PPUSH
30171: LD_VAR 0 2
30175: PPUSH
30176: CALL_OW 12
30180: ARRAY
30181: ST_TO_ADDR
// if Crawls ( un ) then
30182: LD_VAR 0 3
30186: PPUSH
30187: CALL_OW 318
30191: IFFALSE 30202
// ComWalk ( un ) ;
30193: LD_VAR 0 3
30197: PPUSH
30198: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30202: LD_VAR 0 3
30206: PPUSH
30207: LD_INT 8
30209: PPUSH
30210: CALL_OW 336
// end ; 4 :
30214: GO 30320
30216: LD_INT 4
30218: DOUBLE
30219: EQUAL
30220: IFTRUE 30224
30222: GO 30298
30224: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30225: LD_ADDR_VAR 0 2
30229: PUSH
30230: LD_INT 22
30232: PUSH
30233: LD_OWVAR 2
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 30
30244: PUSH
30245: LD_INT 29
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PPUSH
30256: CALL_OW 69
30260: ST_TO_ADDR
// if not tmp then
30261: LD_VAR 0 2
30265: NOT
30266: IFFALSE 30270
// exit ;
30268: GO 30320
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30270: LD_VAR 0 2
30274: PUSH
30275: LD_INT 1
30277: ARRAY
30278: PPUSH
30279: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30283: LD_VAR 0 2
30287: PUSH
30288: LD_INT 1
30290: ARRAY
30291: PPUSH
30292: CALL_OW 65
// end ; 5 .. 7 :
30296: GO 30320
30298: LD_INT 5
30300: DOUBLE
30301: GREATEREQUAL
30302: IFFALSE 30310
30304: LD_INT 7
30306: DOUBLE
30307: LESSEQUAL
30308: IFTRUE 30312
30310: GO 30319
30312: POP
// StreamSibBomb ; end ;
30313: CALL 26557 0 0
30317: GO 30320
30319: POP
// end ;
30320: PPOPN 3
30322: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30323: LD_EXP 44
30327: PUSH
30328: LD_EXP 94
30332: AND
30333: IFFALSE 30489
30335: GO 30337
30337: DISABLE
30338: LD_INT 0
30340: PPUSH
30341: PPUSH
30342: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30343: LD_ADDR_VAR 0 2
30347: PUSH
30348: LD_INT 81
30350: PUSH
30351: LD_OWVAR 2
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 2
30362: PUSH
30363: LD_INT 21
30365: PUSH
30366: LD_INT 1
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: PUSH
30373: LD_INT 21
30375: PUSH
30376: LD_INT 2
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: LIST
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PPUSH
30392: CALL_OW 69
30396: ST_TO_ADDR
// if not tmp then
30397: LD_VAR 0 2
30401: NOT
30402: IFFALSE 30406
// exit ;
30404: GO 30489
// p := 0 ;
30406: LD_ADDR_VAR 0 3
30410: PUSH
30411: LD_INT 0
30413: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30414: LD_INT 35
30416: PPUSH
30417: CALL_OW 67
// p := p + 1 ;
30421: LD_ADDR_VAR 0 3
30425: PUSH
30426: LD_VAR 0 3
30430: PUSH
30431: LD_INT 1
30433: PLUS
30434: ST_TO_ADDR
// for i in tmp do
30435: LD_ADDR_VAR 0 1
30439: PUSH
30440: LD_VAR 0 2
30444: PUSH
30445: FOR_IN
30446: IFFALSE 30477
// if GetLives ( i ) < 1000 then
30448: LD_VAR 0 1
30452: PPUSH
30453: CALL_OW 256
30457: PUSH
30458: LD_INT 1000
30460: LESS
30461: IFFALSE 30475
// SetLives ( i , 1000 ) ;
30463: LD_VAR 0 1
30467: PPUSH
30468: LD_INT 1000
30470: PPUSH
30471: CALL_OW 234
30475: GO 30445
30477: POP
30478: POP
// until p > 20 ;
30479: LD_VAR 0 3
30483: PUSH
30484: LD_INT 20
30486: GREATER
30487: IFFALSE 30414
// end ;
30489: PPOPN 3
30491: END
// every 0 0$1 trigger StreamModeActive and sTime do
30492: LD_EXP 44
30496: PUSH
30497: LD_EXP 95
30501: AND
30502: IFFALSE 30537
30504: GO 30506
30506: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30507: LD_INT 28
30509: PPUSH
30510: LD_OWVAR 2
30514: PPUSH
30515: LD_INT 2
30517: PPUSH
30518: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30522: LD_INT 30
30524: PPUSH
30525: LD_OWVAR 2
30529: PPUSH
30530: LD_INT 2
30532: PPUSH
30533: CALL_OW 322
// end ;
30537: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30538: LD_EXP 44
30542: PUSH
30543: LD_EXP 96
30547: AND
30548: IFFALSE 30669
30550: GO 30552
30552: DISABLE
30553: LD_INT 0
30555: PPUSH
30556: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30557: LD_ADDR_VAR 0 2
30561: PUSH
30562: LD_INT 22
30564: PUSH
30565: LD_OWVAR 2
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 21
30576: PUSH
30577: LD_INT 1
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: PUSH
30584: LD_INT 3
30586: PUSH
30587: LD_INT 23
30589: PUSH
30590: LD_INT 0
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: LIST
30605: PPUSH
30606: CALL_OW 69
30610: ST_TO_ADDR
// if not tmp then
30611: LD_VAR 0 2
30615: NOT
30616: IFFALSE 30620
// exit ;
30618: GO 30669
// for i in tmp do
30620: LD_ADDR_VAR 0 1
30624: PUSH
30625: LD_VAR 0 2
30629: PUSH
30630: FOR_IN
30631: IFFALSE 30667
// begin if Crawls ( i ) then
30633: LD_VAR 0 1
30637: PPUSH
30638: CALL_OW 318
30642: IFFALSE 30653
// ComWalk ( i ) ;
30644: LD_VAR 0 1
30648: PPUSH
30649: CALL_OW 138
// SetClass ( i , 2 ) ;
30653: LD_VAR 0 1
30657: PPUSH
30658: LD_INT 2
30660: PPUSH
30661: CALL_OW 336
// end ;
30665: GO 30630
30667: POP
30668: POP
// end ;
30669: PPOPN 2
30671: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30672: LD_EXP 44
30676: PUSH
30677: LD_EXP 97
30681: AND
30682: IFFALSE 30970
30684: GO 30686
30686: DISABLE
30687: LD_INT 0
30689: PPUSH
30690: PPUSH
30691: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30692: LD_OWVAR 2
30696: PPUSH
30697: LD_INT 9
30699: PPUSH
30700: LD_INT 1
30702: PPUSH
30703: LD_INT 1
30705: PPUSH
30706: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30710: LD_INT 9
30712: PPUSH
30713: LD_OWVAR 2
30717: PPUSH
30718: CALL_OW 343
// uc_side := 9 ;
30722: LD_ADDR_OWVAR 20
30726: PUSH
30727: LD_INT 9
30729: ST_TO_ADDR
// uc_nation := 2 ;
30730: LD_ADDR_OWVAR 21
30734: PUSH
30735: LD_INT 2
30737: ST_TO_ADDR
// hc_name := Dark Warrior ;
30738: LD_ADDR_OWVAR 26
30742: PUSH
30743: LD_STRING Dark Warrior
30745: ST_TO_ADDR
// hc_gallery :=  ;
30746: LD_ADDR_OWVAR 33
30750: PUSH
30751: LD_STRING 
30753: ST_TO_ADDR
// hc_noskilllimit := true ;
30754: LD_ADDR_OWVAR 76
30758: PUSH
30759: LD_INT 1
30761: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30762: LD_ADDR_OWVAR 31
30766: PUSH
30767: LD_INT 30
30769: PUSH
30770: LD_INT 30
30772: PUSH
30773: LD_INT 30
30775: PUSH
30776: LD_INT 30
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: ST_TO_ADDR
// un := CreateHuman ;
30785: LD_ADDR_VAR 0 3
30789: PUSH
30790: CALL_OW 44
30794: ST_TO_ADDR
// hc_noskilllimit := false ;
30795: LD_ADDR_OWVAR 76
30799: PUSH
30800: LD_INT 0
30802: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30803: LD_VAR 0 3
30807: PPUSH
30808: LD_INT 1
30810: PPUSH
30811: CALL_OW 51
// ToLua ( playRanger() ) ;
30815: LD_STRING playRanger()
30817: PPUSH
30818: CALL_OW 559
// p := 0 ;
30822: LD_ADDR_VAR 0 2
30826: PUSH
30827: LD_INT 0
30829: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30830: LD_INT 35
30832: PPUSH
30833: CALL_OW 67
// p := p + 1 ;
30837: LD_ADDR_VAR 0 2
30841: PUSH
30842: LD_VAR 0 2
30846: PUSH
30847: LD_INT 1
30849: PLUS
30850: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30851: LD_VAR 0 3
30855: PPUSH
30856: CALL_OW 256
30860: PUSH
30861: LD_INT 1000
30863: LESS
30864: IFFALSE 30878
// SetLives ( un , 1000 ) ;
30866: LD_VAR 0 3
30870: PPUSH
30871: LD_INT 1000
30873: PPUSH
30874: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30878: LD_VAR 0 3
30882: PPUSH
30883: LD_INT 81
30885: PUSH
30886: LD_OWVAR 2
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 91
30897: PUSH
30898: LD_VAR 0 3
30902: PUSH
30903: LD_INT 30
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: LIST
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PPUSH
30915: CALL_OW 69
30919: PPUSH
30920: LD_VAR 0 3
30924: PPUSH
30925: CALL_OW 74
30929: PPUSH
30930: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30934: LD_VAR 0 2
30938: PUSH
30939: LD_INT 80
30941: GREATER
30942: PUSH
30943: LD_VAR 0 3
30947: PPUSH
30948: CALL_OW 301
30952: OR
30953: IFFALSE 30830
// if un then
30955: LD_VAR 0 3
30959: IFFALSE 30970
// RemoveUnit ( un ) ;
30961: LD_VAR 0 3
30965: PPUSH
30966: CALL_OW 64
// end ;
30970: PPOPN 3
30972: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30973: LD_EXP 98
30977: IFFALSE 31093
30979: GO 30981
30981: DISABLE
30982: LD_INT 0
30984: PPUSH
30985: PPUSH
30986: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30987: LD_ADDR_VAR 0 2
30991: PUSH
30992: LD_INT 81
30994: PUSH
30995: LD_OWVAR 2
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: PUSH
31004: LD_INT 21
31006: PUSH
31007: LD_INT 1
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PPUSH
31018: CALL_OW 69
31022: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31023: LD_STRING playComputer()
31025: PPUSH
31026: CALL_OW 559
// if not tmp then
31030: LD_VAR 0 2
31034: NOT
31035: IFFALSE 31039
// exit ;
31037: GO 31093
// for i in tmp do
31039: LD_ADDR_VAR 0 1
31043: PUSH
31044: LD_VAR 0 2
31048: PUSH
31049: FOR_IN
31050: IFFALSE 31091
// for j := 1 to 4 do
31052: LD_ADDR_VAR 0 3
31056: PUSH
31057: DOUBLE
31058: LD_INT 1
31060: DEC
31061: ST_TO_ADDR
31062: LD_INT 4
31064: PUSH
31065: FOR_TO
31066: IFFALSE 31087
// SetSkill ( i , j , 10 ) ;
31068: LD_VAR 0 1
31072: PPUSH
31073: LD_VAR 0 3
31077: PPUSH
31078: LD_INT 10
31080: PPUSH
31081: CALL_OW 237
31085: GO 31065
31087: POP
31088: POP
31089: GO 31049
31091: POP
31092: POP
// end ;
31093: PPOPN 3
31095: END
// every 0 0$1 trigger s30 do var i , tmp ;
31096: LD_EXP 99
31100: IFFALSE 31169
31102: GO 31104
31104: DISABLE
31105: LD_INT 0
31107: PPUSH
31108: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31109: LD_ADDR_VAR 0 2
31113: PUSH
31114: LD_INT 22
31116: PUSH
31117: LD_OWVAR 2
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PPUSH
31126: CALL_OW 69
31130: ST_TO_ADDR
// if not tmp then
31131: LD_VAR 0 2
31135: NOT
31136: IFFALSE 31140
// exit ;
31138: GO 31169
// for i in tmp do
31140: LD_ADDR_VAR 0 1
31144: PUSH
31145: LD_VAR 0 2
31149: PUSH
31150: FOR_IN
31151: IFFALSE 31167
// SetLives ( i , 300 ) ;
31153: LD_VAR 0 1
31157: PPUSH
31158: LD_INT 300
31160: PPUSH
31161: CALL_OW 234
31165: GO 31150
31167: POP
31168: POP
// end ;
31169: PPOPN 2
31171: END
// every 0 0$1 trigger s60 do var i , tmp ;
31172: LD_EXP 100
31176: IFFALSE 31245
31178: GO 31180
31180: DISABLE
31181: LD_INT 0
31183: PPUSH
31184: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31185: LD_ADDR_VAR 0 2
31189: PUSH
31190: LD_INT 22
31192: PUSH
31193: LD_OWVAR 2
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PPUSH
31202: CALL_OW 69
31206: ST_TO_ADDR
// if not tmp then
31207: LD_VAR 0 2
31211: NOT
31212: IFFALSE 31216
// exit ;
31214: GO 31245
// for i in tmp do
31216: LD_ADDR_VAR 0 1
31220: PUSH
31221: LD_VAR 0 2
31225: PUSH
31226: FOR_IN
31227: IFFALSE 31243
// SetLives ( i , 600 ) ;
31229: LD_VAR 0 1
31233: PPUSH
31234: LD_INT 600
31236: PPUSH
31237: CALL_OW 234
31241: GO 31226
31243: POP
31244: POP
// end ;
31245: PPOPN 2
31247: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31248: LD_INT 0
31250: PPUSH
// case cmd of 301 :
31251: LD_VAR 0 1
31255: PUSH
31256: LD_INT 301
31258: DOUBLE
31259: EQUAL
31260: IFTRUE 31264
31262: GO 31296
31264: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31265: LD_VAR 0 6
31269: PPUSH
31270: LD_VAR 0 7
31274: PPUSH
31275: LD_VAR 0 8
31279: PPUSH
31280: LD_VAR 0 4
31284: PPUSH
31285: LD_VAR 0 5
31289: PPUSH
31290: CALL 32505 0 5
31294: GO 31417
31296: LD_INT 302
31298: DOUBLE
31299: EQUAL
31300: IFTRUE 31304
31302: GO 31341
31304: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31305: LD_VAR 0 6
31309: PPUSH
31310: LD_VAR 0 7
31314: PPUSH
31315: LD_VAR 0 8
31319: PPUSH
31320: LD_VAR 0 9
31324: PPUSH
31325: LD_VAR 0 4
31329: PPUSH
31330: LD_VAR 0 5
31334: PPUSH
31335: CALL 32596 0 6
31339: GO 31417
31341: LD_INT 303
31343: DOUBLE
31344: EQUAL
31345: IFTRUE 31349
31347: GO 31386
31349: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31350: LD_VAR 0 6
31354: PPUSH
31355: LD_VAR 0 7
31359: PPUSH
31360: LD_VAR 0 8
31364: PPUSH
31365: LD_VAR 0 9
31369: PPUSH
31370: LD_VAR 0 4
31374: PPUSH
31375: LD_VAR 0 5
31379: PPUSH
31380: CALL 31422 0 6
31384: GO 31417
31386: LD_INT 304
31388: DOUBLE
31389: EQUAL
31390: IFTRUE 31394
31392: GO 31416
31394: POP
// hHackTeleport ( unit , x , y ) ; end ;
31395: LD_VAR 0 2
31399: PPUSH
31400: LD_VAR 0 4
31404: PPUSH
31405: LD_VAR 0 5
31409: PPUSH
31410: CALL 33189 0 3
31414: GO 31417
31416: POP
// end ;
31417: LD_VAR 0 12
31421: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31422: LD_INT 0
31424: PPUSH
31425: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31426: LD_VAR 0 1
31430: PUSH
31431: LD_INT 1
31433: LESS
31434: PUSH
31435: LD_VAR 0 1
31439: PUSH
31440: LD_INT 3
31442: GREATER
31443: OR
31444: PUSH
31445: LD_VAR 0 5
31449: PPUSH
31450: LD_VAR 0 6
31454: PPUSH
31455: CALL_OW 428
31459: OR
31460: IFFALSE 31464
// exit ;
31462: GO 32192
// uc_side := your_side ;
31464: LD_ADDR_OWVAR 20
31468: PUSH
31469: LD_OWVAR 2
31473: ST_TO_ADDR
// uc_nation := nation ;
31474: LD_ADDR_OWVAR 21
31478: PUSH
31479: LD_VAR 0 1
31483: ST_TO_ADDR
// bc_level = 1 ;
31484: LD_ADDR_OWVAR 43
31488: PUSH
31489: LD_INT 1
31491: ST_TO_ADDR
// case btype of 1 :
31492: LD_VAR 0 2
31496: PUSH
31497: LD_INT 1
31499: DOUBLE
31500: EQUAL
31501: IFTRUE 31505
31503: GO 31516
31505: POP
// bc_type := b_depot ; 2 :
31506: LD_ADDR_OWVAR 42
31510: PUSH
31511: LD_INT 0
31513: ST_TO_ADDR
31514: GO 32136
31516: LD_INT 2
31518: DOUBLE
31519: EQUAL
31520: IFTRUE 31524
31522: GO 31535
31524: POP
// bc_type := b_warehouse ; 3 :
31525: LD_ADDR_OWVAR 42
31529: PUSH
31530: LD_INT 1
31532: ST_TO_ADDR
31533: GO 32136
31535: LD_INT 3
31537: DOUBLE
31538: EQUAL
31539: IFTRUE 31543
31541: GO 31554
31543: POP
// bc_type := b_lab ; 4 .. 9 :
31544: LD_ADDR_OWVAR 42
31548: PUSH
31549: LD_INT 6
31551: ST_TO_ADDR
31552: GO 32136
31554: LD_INT 4
31556: DOUBLE
31557: GREATEREQUAL
31558: IFFALSE 31566
31560: LD_INT 9
31562: DOUBLE
31563: LESSEQUAL
31564: IFTRUE 31568
31566: GO 31628
31568: POP
// begin bc_type := b_lab_half ;
31569: LD_ADDR_OWVAR 42
31573: PUSH
31574: LD_INT 7
31576: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31577: LD_ADDR_OWVAR 44
31581: PUSH
31582: LD_INT 10
31584: PUSH
31585: LD_INT 11
31587: PUSH
31588: LD_INT 12
31590: PUSH
31591: LD_INT 15
31593: PUSH
31594: LD_INT 14
31596: PUSH
31597: LD_INT 13
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: PUSH
31608: LD_VAR 0 2
31612: PUSH
31613: LD_INT 3
31615: MINUS
31616: ARRAY
31617: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
31618: LD_ADDR_OWVAR 45
31622: PUSH
31623: LD_INT 9
31625: ST_TO_ADDR
// end ; 10 .. 13 :
31626: GO 32136
31628: LD_INT 10
31630: DOUBLE
31631: GREATEREQUAL
31632: IFFALSE 31640
31634: LD_INT 13
31636: DOUBLE
31637: LESSEQUAL
31638: IFTRUE 31642
31640: GO 31719
31642: POP
// begin bc_type := b_lab_full ;
31643: LD_ADDR_OWVAR 42
31647: PUSH
31648: LD_INT 8
31650: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31651: LD_ADDR_OWVAR 44
31655: PUSH
31656: LD_INT 10
31658: PUSH
31659: LD_INT 12
31661: PUSH
31662: LD_INT 14
31664: PUSH
31665: LD_INT 13
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: PUSH
31674: LD_VAR 0 2
31678: PUSH
31679: LD_INT 9
31681: MINUS
31682: ARRAY
31683: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31684: LD_ADDR_OWVAR 45
31688: PUSH
31689: LD_INT 11
31691: PUSH
31692: LD_INT 15
31694: PUSH
31695: LD_INT 12
31697: PUSH
31698: LD_INT 15
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: PUSH
31707: LD_VAR 0 2
31711: PUSH
31712: LD_INT 9
31714: MINUS
31715: ARRAY
31716: ST_TO_ADDR
// end ; 14 :
31717: GO 32136
31719: LD_INT 14
31721: DOUBLE
31722: EQUAL
31723: IFTRUE 31727
31725: GO 31738
31727: POP
// bc_type := b_workshop ; 15 :
31728: LD_ADDR_OWVAR 42
31732: PUSH
31733: LD_INT 2
31735: ST_TO_ADDR
31736: GO 32136
31738: LD_INT 15
31740: DOUBLE
31741: EQUAL
31742: IFTRUE 31746
31744: GO 31757
31746: POP
// bc_type := b_factory ; 16 :
31747: LD_ADDR_OWVAR 42
31751: PUSH
31752: LD_INT 3
31754: ST_TO_ADDR
31755: GO 32136
31757: LD_INT 16
31759: DOUBLE
31760: EQUAL
31761: IFTRUE 31765
31763: GO 31776
31765: POP
// bc_type := b_ext_gun ; 17 :
31766: LD_ADDR_OWVAR 42
31770: PUSH
31771: LD_INT 17
31773: ST_TO_ADDR
31774: GO 32136
31776: LD_INT 17
31778: DOUBLE
31779: EQUAL
31780: IFTRUE 31784
31782: GO 31812
31784: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31785: LD_ADDR_OWVAR 42
31789: PUSH
31790: LD_INT 19
31792: PUSH
31793: LD_INT 23
31795: PUSH
31796: LD_INT 19
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: LIST
31803: PUSH
31804: LD_VAR 0 1
31808: ARRAY
31809: ST_TO_ADDR
31810: GO 32136
31812: LD_INT 18
31814: DOUBLE
31815: EQUAL
31816: IFTRUE 31820
31818: GO 31831
31820: POP
// bc_type := b_ext_radar ; 19 :
31821: LD_ADDR_OWVAR 42
31825: PUSH
31826: LD_INT 20
31828: ST_TO_ADDR
31829: GO 32136
31831: LD_INT 19
31833: DOUBLE
31834: EQUAL
31835: IFTRUE 31839
31837: GO 31850
31839: POP
// bc_type := b_ext_radio ; 20 :
31840: LD_ADDR_OWVAR 42
31844: PUSH
31845: LD_INT 22
31847: ST_TO_ADDR
31848: GO 32136
31850: LD_INT 20
31852: DOUBLE
31853: EQUAL
31854: IFTRUE 31858
31856: GO 31869
31858: POP
// bc_type := b_ext_siberium ; 21 :
31859: LD_ADDR_OWVAR 42
31863: PUSH
31864: LD_INT 21
31866: ST_TO_ADDR
31867: GO 32136
31869: LD_INT 21
31871: DOUBLE
31872: EQUAL
31873: IFTRUE 31877
31875: GO 31888
31877: POP
// bc_type := b_ext_computer ; 22 :
31878: LD_ADDR_OWVAR 42
31882: PUSH
31883: LD_INT 24
31885: ST_TO_ADDR
31886: GO 32136
31888: LD_INT 22
31890: DOUBLE
31891: EQUAL
31892: IFTRUE 31896
31894: GO 31907
31896: POP
// bc_type := b_ext_track ; 23 :
31897: LD_ADDR_OWVAR 42
31901: PUSH
31902: LD_INT 16
31904: ST_TO_ADDR
31905: GO 32136
31907: LD_INT 23
31909: DOUBLE
31910: EQUAL
31911: IFTRUE 31915
31913: GO 31926
31915: POP
// bc_type := b_ext_laser ; 24 :
31916: LD_ADDR_OWVAR 42
31920: PUSH
31921: LD_INT 25
31923: ST_TO_ADDR
31924: GO 32136
31926: LD_INT 24
31928: DOUBLE
31929: EQUAL
31930: IFTRUE 31934
31932: GO 31945
31934: POP
// bc_type := b_control_tower ; 25 :
31935: LD_ADDR_OWVAR 42
31939: PUSH
31940: LD_INT 36
31942: ST_TO_ADDR
31943: GO 32136
31945: LD_INT 25
31947: DOUBLE
31948: EQUAL
31949: IFTRUE 31953
31951: GO 31964
31953: POP
// bc_type := b_breastwork ; 26 :
31954: LD_ADDR_OWVAR 42
31958: PUSH
31959: LD_INT 31
31961: ST_TO_ADDR
31962: GO 32136
31964: LD_INT 26
31966: DOUBLE
31967: EQUAL
31968: IFTRUE 31972
31970: GO 31983
31972: POP
// bc_type := b_bunker ; 27 :
31973: LD_ADDR_OWVAR 42
31977: PUSH
31978: LD_INT 32
31980: ST_TO_ADDR
31981: GO 32136
31983: LD_INT 27
31985: DOUBLE
31986: EQUAL
31987: IFTRUE 31991
31989: GO 32002
31991: POP
// bc_type := b_turret ; 28 :
31992: LD_ADDR_OWVAR 42
31996: PUSH
31997: LD_INT 33
31999: ST_TO_ADDR
32000: GO 32136
32002: LD_INT 28
32004: DOUBLE
32005: EQUAL
32006: IFTRUE 32010
32008: GO 32021
32010: POP
// bc_type := b_armoury ; 29 :
32011: LD_ADDR_OWVAR 42
32015: PUSH
32016: LD_INT 4
32018: ST_TO_ADDR
32019: GO 32136
32021: LD_INT 29
32023: DOUBLE
32024: EQUAL
32025: IFTRUE 32029
32027: GO 32040
32029: POP
// bc_type := b_barracks ; 30 :
32030: LD_ADDR_OWVAR 42
32034: PUSH
32035: LD_INT 5
32037: ST_TO_ADDR
32038: GO 32136
32040: LD_INT 30
32042: DOUBLE
32043: EQUAL
32044: IFTRUE 32048
32046: GO 32059
32048: POP
// bc_type := b_solar_power ; 31 :
32049: LD_ADDR_OWVAR 42
32053: PUSH
32054: LD_INT 27
32056: ST_TO_ADDR
32057: GO 32136
32059: LD_INT 31
32061: DOUBLE
32062: EQUAL
32063: IFTRUE 32067
32065: GO 32078
32067: POP
// bc_type := b_oil_power ; 32 :
32068: LD_ADDR_OWVAR 42
32072: PUSH
32073: LD_INT 26
32075: ST_TO_ADDR
32076: GO 32136
32078: LD_INT 32
32080: DOUBLE
32081: EQUAL
32082: IFTRUE 32086
32084: GO 32097
32086: POP
// bc_type := b_siberite_power ; 33 :
32087: LD_ADDR_OWVAR 42
32091: PUSH
32092: LD_INT 28
32094: ST_TO_ADDR
32095: GO 32136
32097: LD_INT 33
32099: DOUBLE
32100: EQUAL
32101: IFTRUE 32105
32103: GO 32116
32105: POP
// bc_type := b_oil_mine ; 34 :
32106: LD_ADDR_OWVAR 42
32110: PUSH
32111: LD_INT 29
32113: ST_TO_ADDR
32114: GO 32136
32116: LD_INT 34
32118: DOUBLE
32119: EQUAL
32120: IFTRUE 32124
32122: GO 32135
32124: POP
// bc_type := b_siberite_mine ; end ;
32125: LD_ADDR_OWVAR 42
32129: PUSH
32130: LD_INT 30
32132: ST_TO_ADDR
32133: GO 32136
32135: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32136: LD_ADDR_VAR 0 8
32140: PUSH
32141: LD_VAR 0 5
32145: PPUSH
32146: LD_VAR 0 6
32150: PPUSH
32151: LD_VAR 0 3
32155: PPUSH
32156: CALL_OW 47
32160: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32161: LD_OWVAR 42
32165: PUSH
32166: LD_INT 32
32168: PUSH
32169: LD_INT 33
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: IN
32176: IFFALSE 32192
// PlaceWeaponTurret ( b , weapon ) ;
32178: LD_VAR 0 8
32182: PPUSH
32183: LD_VAR 0 4
32187: PPUSH
32188: CALL_OW 431
// end ;
32192: LD_VAR 0 7
32196: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32197: LD_INT 0
32199: PPUSH
32200: PPUSH
32201: PPUSH
32202: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32203: LD_ADDR_VAR 0 4
32207: PUSH
32208: LD_INT 22
32210: PUSH
32211: LD_OWVAR 2
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: LD_INT 2
32222: PUSH
32223: LD_INT 30
32225: PUSH
32226: LD_INT 0
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 30
32235: PUSH
32236: LD_INT 1
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: LIST
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PPUSH
32252: CALL_OW 69
32256: ST_TO_ADDR
// if not tmp then
32257: LD_VAR 0 4
32261: NOT
32262: IFFALSE 32266
// exit ;
32264: GO 32325
// for i in tmp do
32266: LD_ADDR_VAR 0 2
32270: PUSH
32271: LD_VAR 0 4
32275: PUSH
32276: FOR_IN
32277: IFFALSE 32323
// for j = 1 to 3 do
32279: LD_ADDR_VAR 0 3
32283: PUSH
32284: DOUBLE
32285: LD_INT 1
32287: DEC
32288: ST_TO_ADDR
32289: LD_INT 3
32291: PUSH
32292: FOR_TO
32293: IFFALSE 32319
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32295: LD_VAR 0 2
32299: PPUSH
32300: CALL_OW 274
32304: PPUSH
32305: LD_VAR 0 3
32309: PPUSH
32310: LD_INT 99999
32312: PPUSH
32313: CALL_OW 277
32317: GO 32292
32319: POP
32320: POP
32321: GO 32276
32323: POP
32324: POP
// end ;
32325: LD_VAR 0 1
32329: RET
// export function hHackSetLevel10 ; var i , j ; begin
32330: LD_INT 0
32332: PPUSH
32333: PPUSH
32334: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32335: LD_ADDR_VAR 0 2
32339: PUSH
32340: LD_INT 21
32342: PUSH
32343: LD_INT 1
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PPUSH
32350: CALL_OW 69
32354: PUSH
32355: FOR_IN
32356: IFFALSE 32408
// if IsSelected ( i ) then
32358: LD_VAR 0 2
32362: PPUSH
32363: CALL_OW 306
32367: IFFALSE 32406
// begin for j := 1 to 4 do
32369: LD_ADDR_VAR 0 3
32373: PUSH
32374: DOUBLE
32375: LD_INT 1
32377: DEC
32378: ST_TO_ADDR
32379: LD_INT 4
32381: PUSH
32382: FOR_TO
32383: IFFALSE 32404
// SetSkill ( i , j , 10 ) ;
32385: LD_VAR 0 2
32389: PPUSH
32390: LD_VAR 0 3
32394: PPUSH
32395: LD_INT 10
32397: PPUSH
32398: CALL_OW 237
32402: GO 32382
32404: POP
32405: POP
// end ;
32406: GO 32355
32408: POP
32409: POP
// end ;
32410: LD_VAR 0 1
32414: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32415: LD_INT 0
32417: PPUSH
32418: PPUSH
32419: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32420: LD_ADDR_VAR 0 2
32424: PUSH
32425: LD_INT 22
32427: PUSH
32428: LD_OWVAR 2
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 21
32439: PUSH
32440: LD_INT 1
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PPUSH
32451: CALL_OW 69
32455: PUSH
32456: FOR_IN
32457: IFFALSE 32498
// begin for j := 1 to 4 do
32459: LD_ADDR_VAR 0 3
32463: PUSH
32464: DOUBLE
32465: LD_INT 1
32467: DEC
32468: ST_TO_ADDR
32469: LD_INT 4
32471: PUSH
32472: FOR_TO
32473: IFFALSE 32494
// SetSkill ( i , j , 10 ) ;
32475: LD_VAR 0 2
32479: PPUSH
32480: LD_VAR 0 3
32484: PPUSH
32485: LD_INT 10
32487: PPUSH
32488: CALL_OW 237
32492: GO 32472
32494: POP
32495: POP
// end ;
32496: GO 32456
32498: POP
32499: POP
// end ;
32500: LD_VAR 0 1
32504: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32505: LD_INT 0
32507: PPUSH
// uc_side := your_side ;
32508: LD_ADDR_OWVAR 20
32512: PUSH
32513: LD_OWVAR 2
32517: ST_TO_ADDR
// uc_nation := nation ;
32518: LD_ADDR_OWVAR 21
32522: PUSH
32523: LD_VAR 0 1
32527: ST_TO_ADDR
// InitHc ;
32528: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32532: LD_INT 0
32534: PPUSH
32535: LD_VAR 0 2
32539: PPUSH
32540: LD_VAR 0 3
32544: PPUSH
32545: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32549: LD_VAR 0 4
32553: PPUSH
32554: LD_VAR 0 5
32558: PPUSH
32559: CALL_OW 428
32563: PUSH
32564: LD_INT 0
32566: EQUAL
32567: IFFALSE 32591
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32569: CALL_OW 44
32573: PPUSH
32574: LD_VAR 0 4
32578: PPUSH
32579: LD_VAR 0 5
32583: PPUSH
32584: LD_INT 1
32586: PPUSH
32587: CALL_OW 48
// end ;
32591: LD_VAR 0 6
32595: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32596: LD_INT 0
32598: PPUSH
32599: PPUSH
// uc_side := your_side ;
32600: LD_ADDR_OWVAR 20
32604: PUSH
32605: LD_OWVAR 2
32609: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32610: LD_VAR 0 1
32614: PUSH
32615: LD_INT 1
32617: PUSH
32618: LD_INT 2
32620: PUSH
32621: LD_INT 3
32623: PUSH
32624: LD_INT 4
32626: PUSH
32627: LD_INT 5
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: IN
32637: IFFALSE 32649
// uc_nation := nation_american else
32639: LD_ADDR_OWVAR 21
32643: PUSH
32644: LD_INT 1
32646: ST_TO_ADDR
32647: GO 32692
// if chassis in [ 11 , 12 , 13 , 14 ] then
32649: LD_VAR 0 1
32653: PUSH
32654: LD_INT 11
32656: PUSH
32657: LD_INT 12
32659: PUSH
32660: LD_INT 13
32662: PUSH
32663: LD_INT 14
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: IN
32672: IFFALSE 32684
// uc_nation := nation_arabian else
32674: LD_ADDR_OWVAR 21
32678: PUSH
32679: LD_INT 2
32681: ST_TO_ADDR
32682: GO 32692
// uc_nation := nation_russian ;
32684: LD_ADDR_OWVAR 21
32688: PUSH
32689: LD_INT 3
32691: ST_TO_ADDR
// vc_chassis := chassis ;
32692: LD_ADDR_OWVAR 37
32696: PUSH
32697: LD_VAR 0 1
32701: ST_TO_ADDR
// vc_engine := engine ;
32702: LD_ADDR_OWVAR 39
32706: PUSH
32707: LD_VAR 0 2
32711: ST_TO_ADDR
// vc_control := control ;
32712: LD_ADDR_OWVAR 38
32716: PUSH
32717: LD_VAR 0 3
32721: ST_TO_ADDR
// vc_weapon := weapon ;
32722: LD_ADDR_OWVAR 40
32726: PUSH
32727: LD_VAR 0 4
32731: ST_TO_ADDR
// un := CreateVehicle ;
32732: LD_ADDR_VAR 0 8
32736: PUSH
32737: CALL_OW 45
32741: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32742: LD_VAR 0 8
32746: PPUSH
32747: LD_INT 0
32749: PPUSH
32750: LD_INT 5
32752: PPUSH
32753: CALL_OW 12
32757: PPUSH
32758: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32762: LD_VAR 0 8
32766: PPUSH
32767: LD_VAR 0 5
32771: PPUSH
32772: LD_VAR 0 6
32776: PPUSH
32777: LD_INT 1
32779: PPUSH
32780: CALL_OW 48
// end ;
32784: LD_VAR 0 7
32788: RET
// export hInvincible ; every 1 do
32789: GO 32791
32791: DISABLE
// hInvincible := [ ] ;
32792: LD_ADDR_EXP 101
32796: PUSH
32797: EMPTY
32798: ST_TO_ADDR
32799: END
// every 10 do var i ;
32800: GO 32802
32802: DISABLE
32803: LD_INT 0
32805: PPUSH
// begin enable ;
32806: ENABLE
// if not hInvincible then
32807: LD_EXP 101
32811: NOT
32812: IFFALSE 32816
// exit ;
32814: GO 32860
// for i in hInvincible do
32816: LD_ADDR_VAR 0 1
32820: PUSH
32821: LD_EXP 101
32825: PUSH
32826: FOR_IN
32827: IFFALSE 32858
// if GetLives ( i ) < 1000 then
32829: LD_VAR 0 1
32833: PPUSH
32834: CALL_OW 256
32838: PUSH
32839: LD_INT 1000
32841: LESS
32842: IFFALSE 32856
// SetLives ( i , 1000 ) ;
32844: LD_VAR 0 1
32848: PPUSH
32849: LD_INT 1000
32851: PPUSH
32852: CALL_OW 234
32856: GO 32826
32858: POP
32859: POP
// end ;
32860: PPOPN 1
32862: END
// export function hHackInvincible ; var i ; begin
32863: LD_INT 0
32865: PPUSH
32866: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32867: LD_ADDR_VAR 0 2
32871: PUSH
32872: LD_INT 2
32874: PUSH
32875: LD_INT 21
32877: PUSH
32878: LD_INT 1
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: PUSH
32885: LD_INT 21
32887: PUSH
32888: LD_INT 2
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: LIST
32899: PPUSH
32900: CALL_OW 69
32904: PUSH
32905: FOR_IN
32906: IFFALSE 32967
// if IsSelected ( i ) then
32908: LD_VAR 0 2
32912: PPUSH
32913: CALL_OW 306
32917: IFFALSE 32965
// begin if i in hInvincible then
32919: LD_VAR 0 2
32923: PUSH
32924: LD_EXP 101
32928: IN
32929: IFFALSE 32949
// hInvincible := hInvincible diff i else
32931: LD_ADDR_EXP 101
32935: PUSH
32936: LD_EXP 101
32940: PUSH
32941: LD_VAR 0 2
32945: DIFF
32946: ST_TO_ADDR
32947: GO 32965
// hInvincible := hInvincible union i ;
32949: LD_ADDR_EXP 101
32953: PUSH
32954: LD_EXP 101
32958: PUSH
32959: LD_VAR 0 2
32963: UNION
32964: ST_TO_ADDR
// end ;
32965: GO 32905
32967: POP
32968: POP
// end ;
32969: LD_VAR 0 1
32973: RET
// export function hHackInvisible ; var i , j ; begin
32974: LD_INT 0
32976: PPUSH
32977: PPUSH
32978: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32979: LD_ADDR_VAR 0 2
32983: PUSH
32984: LD_INT 21
32986: PUSH
32987: LD_INT 1
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PPUSH
32994: CALL_OW 69
32998: PUSH
32999: FOR_IN
33000: IFFALSE 33024
// if IsSelected ( i ) then
33002: LD_VAR 0 2
33006: PPUSH
33007: CALL_OW 306
33011: IFFALSE 33022
// ComForceInvisible ( i ) ;
33013: LD_VAR 0 2
33017: PPUSH
33018: CALL_OW 496
33022: GO 32999
33024: POP
33025: POP
// end ;
33026: LD_VAR 0 1
33030: RET
// export function hHackChangeYourSide ; begin
33031: LD_INT 0
33033: PPUSH
// if your_side = 8 then
33034: LD_OWVAR 2
33038: PUSH
33039: LD_INT 8
33041: EQUAL
33042: IFFALSE 33054
// your_side := 0 else
33044: LD_ADDR_OWVAR 2
33048: PUSH
33049: LD_INT 0
33051: ST_TO_ADDR
33052: GO 33068
// your_side := your_side + 1 ;
33054: LD_ADDR_OWVAR 2
33058: PUSH
33059: LD_OWVAR 2
33063: PUSH
33064: LD_INT 1
33066: PLUS
33067: ST_TO_ADDR
// end ;
33068: LD_VAR 0 1
33072: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33073: LD_INT 0
33075: PPUSH
33076: PPUSH
33077: PPUSH
// for i in all_units do
33078: LD_ADDR_VAR 0 2
33082: PUSH
33083: LD_OWVAR 3
33087: PUSH
33088: FOR_IN
33089: IFFALSE 33167
// if IsSelected ( i ) then
33091: LD_VAR 0 2
33095: PPUSH
33096: CALL_OW 306
33100: IFFALSE 33165
// begin j := GetSide ( i ) ;
33102: LD_ADDR_VAR 0 3
33106: PUSH
33107: LD_VAR 0 2
33111: PPUSH
33112: CALL_OW 255
33116: ST_TO_ADDR
// if j = 8 then
33117: LD_VAR 0 3
33121: PUSH
33122: LD_INT 8
33124: EQUAL
33125: IFFALSE 33137
// j := 0 else
33127: LD_ADDR_VAR 0 3
33131: PUSH
33132: LD_INT 0
33134: ST_TO_ADDR
33135: GO 33151
// j := j + 1 ;
33137: LD_ADDR_VAR 0 3
33141: PUSH
33142: LD_VAR 0 3
33146: PUSH
33147: LD_INT 1
33149: PLUS
33150: ST_TO_ADDR
// SetSide ( i , j ) ;
33151: LD_VAR 0 2
33155: PPUSH
33156: LD_VAR 0 3
33160: PPUSH
33161: CALL_OW 235
// end ;
33165: GO 33088
33167: POP
33168: POP
// end ;
33169: LD_VAR 0 1
33173: RET
// export function hHackFog ; begin
33174: LD_INT 0
33176: PPUSH
// FogOff ( true ) ;
33177: LD_INT 1
33179: PPUSH
33180: CALL_OW 344
// end ;
33184: LD_VAR 0 1
33188: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33189: LD_INT 0
33191: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33192: LD_VAR 0 1
33196: PPUSH
33197: LD_VAR 0 2
33201: PPUSH
33202: LD_VAR 0 3
33206: PPUSH
33207: LD_INT 1
33209: PPUSH
33210: LD_INT 1
33212: PPUSH
33213: CALL_OW 483
// CenterOnXY ( x , y ) ;
33217: LD_VAR 0 2
33221: PPUSH
33222: LD_VAR 0 3
33226: PPUSH
33227: CALL_OW 84
// end ;
33231: LD_VAR 0 4
33235: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33236: LD_INT 0
33238: PPUSH
33239: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33240: LD_VAR 0 1
33244: NOT
33245: PUSH
33246: LD_VAR 0 2
33250: PPUSH
33251: LD_VAR 0 3
33255: PPUSH
33256: CALL_OW 488
33260: NOT
33261: OR
33262: PUSH
33263: LD_VAR 0 1
33267: PPUSH
33268: CALL_OW 266
33272: PUSH
33273: LD_INT 3
33275: NONEQUAL
33276: PUSH
33277: LD_VAR 0 1
33281: PPUSH
33282: CALL_OW 247
33286: PUSH
33287: LD_INT 1
33289: EQUAL
33290: NOT
33291: AND
33292: OR
33293: IFFALSE 33297
// exit ;
33295: GO 33446
// if GetType ( factory ) = unit_human then
33297: LD_VAR 0 1
33301: PPUSH
33302: CALL_OW 247
33306: PUSH
33307: LD_INT 1
33309: EQUAL
33310: IFFALSE 33327
// factory := IsInUnit ( factory ) ;
33312: LD_ADDR_VAR 0 1
33316: PUSH
33317: LD_VAR 0 1
33321: PPUSH
33322: CALL_OW 310
33326: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33327: LD_VAR 0 1
33331: PPUSH
33332: CALL_OW 266
33336: PUSH
33337: LD_INT 3
33339: NONEQUAL
33340: IFFALSE 33344
// exit ;
33342: GO 33446
// if HexInfo ( x , y ) = factory then
33344: LD_VAR 0 2
33348: PPUSH
33349: LD_VAR 0 3
33353: PPUSH
33354: CALL_OW 428
33358: PUSH
33359: LD_VAR 0 1
33363: EQUAL
33364: IFFALSE 33391
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33366: LD_ADDR_EXP 102
33370: PUSH
33371: LD_EXP 102
33375: PPUSH
33376: LD_VAR 0 1
33380: PPUSH
33381: LD_INT 0
33383: PPUSH
33384: CALL_OW 1
33388: ST_TO_ADDR
33389: GO 33442
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33391: LD_ADDR_EXP 102
33395: PUSH
33396: LD_EXP 102
33400: PPUSH
33401: LD_VAR 0 1
33405: PPUSH
33406: LD_VAR 0 1
33410: PPUSH
33411: CALL_OW 255
33415: PUSH
33416: LD_VAR 0 1
33420: PUSH
33421: LD_VAR 0 2
33425: PUSH
33426: LD_VAR 0 3
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: PPUSH
33437: CALL_OW 1
33441: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33442: CALL 33451 0 0
// end ;
33446: LD_VAR 0 4
33450: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33451: LD_INT 0
33453: PPUSH
33454: PPUSH
33455: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33456: LD_STRING resetFactoryWaypoint();
33458: PPUSH
33459: CALL_OW 559
// if factoryWaypoints then
33463: LD_EXP 102
33467: IFFALSE 33593
// begin list := PrepareArray ( factoryWaypoints ) ;
33469: LD_ADDR_VAR 0 3
33473: PUSH
33474: LD_EXP 102
33478: PPUSH
33479: CALL 79915 0 1
33483: ST_TO_ADDR
// for i := 1 to list do
33484: LD_ADDR_VAR 0 2
33488: PUSH
33489: DOUBLE
33490: LD_INT 1
33492: DEC
33493: ST_TO_ADDR
33494: LD_VAR 0 3
33498: PUSH
33499: FOR_TO
33500: IFFALSE 33591
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33502: LD_STRING setFactoryWaypointXY(
33504: PUSH
33505: LD_VAR 0 3
33509: PUSH
33510: LD_VAR 0 2
33514: ARRAY
33515: PUSH
33516: LD_INT 1
33518: ARRAY
33519: STR
33520: PUSH
33521: LD_STRING ,
33523: STR
33524: PUSH
33525: LD_VAR 0 3
33529: PUSH
33530: LD_VAR 0 2
33534: ARRAY
33535: PUSH
33536: LD_INT 2
33538: ARRAY
33539: STR
33540: PUSH
33541: LD_STRING ,
33543: STR
33544: PUSH
33545: LD_VAR 0 3
33549: PUSH
33550: LD_VAR 0 2
33554: ARRAY
33555: PUSH
33556: LD_INT 3
33558: ARRAY
33559: STR
33560: PUSH
33561: LD_STRING ,
33563: STR
33564: PUSH
33565: LD_VAR 0 3
33569: PUSH
33570: LD_VAR 0 2
33574: ARRAY
33575: PUSH
33576: LD_INT 4
33578: ARRAY
33579: STR
33580: PUSH
33581: LD_STRING )
33583: STR
33584: PPUSH
33585: CALL_OW 559
33589: GO 33499
33591: POP
33592: POP
// end ; end ;
33593: LD_VAR 0 1
33597: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33598: LD_INT 0
33600: PPUSH
// if HexInfo ( x , y ) = warehouse then
33601: LD_VAR 0 2
33605: PPUSH
33606: LD_VAR 0 3
33610: PPUSH
33611: CALL_OW 428
33615: PUSH
33616: LD_VAR 0 1
33620: EQUAL
33621: IFFALSE 33648
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33623: LD_ADDR_EXP 103
33627: PUSH
33628: LD_EXP 103
33632: PPUSH
33633: LD_VAR 0 1
33637: PPUSH
33638: LD_INT 0
33640: PPUSH
33641: CALL_OW 1
33645: ST_TO_ADDR
33646: GO 33699
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33648: LD_ADDR_EXP 103
33652: PUSH
33653: LD_EXP 103
33657: PPUSH
33658: LD_VAR 0 1
33662: PPUSH
33663: LD_VAR 0 1
33667: PPUSH
33668: CALL_OW 255
33672: PUSH
33673: LD_VAR 0 1
33677: PUSH
33678: LD_VAR 0 2
33682: PUSH
33683: LD_VAR 0 3
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: PPUSH
33694: CALL_OW 1
33698: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
33699: CALL 33708 0 0
// end ;
33703: LD_VAR 0 4
33707: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
33708: LD_INT 0
33710: PPUSH
33711: PPUSH
33712: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
33713: LD_STRING resetWarehouseGatheringPoints();
33715: PPUSH
33716: CALL_OW 559
// if warehouseGatheringPoints then
33720: LD_EXP 103
33724: IFFALSE 33850
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
33726: LD_ADDR_VAR 0 3
33730: PUSH
33731: LD_EXP 103
33735: PPUSH
33736: CALL 79915 0 1
33740: ST_TO_ADDR
// for i := 1 to list do
33741: LD_ADDR_VAR 0 2
33745: PUSH
33746: DOUBLE
33747: LD_INT 1
33749: DEC
33750: ST_TO_ADDR
33751: LD_VAR 0 3
33755: PUSH
33756: FOR_TO
33757: IFFALSE 33848
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33759: LD_STRING setWarehouseGatheringPointXY(
33761: PUSH
33762: LD_VAR 0 3
33766: PUSH
33767: LD_VAR 0 2
33771: ARRAY
33772: PUSH
33773: LD_INT 1
33775: ARRAY
33776: STR
33777: PUSH
33778: LD_STRING ,
33780: STR
33781: PUSH
33782: LD_VAR 0 3
33786: PUSH
33787: LD_VAR 0 2
33791: ARRAY
33792: PUSH
33793: LD_INT 2
33795: ARRAY
33796: STR
33797: PUSH
33798: LD_STRING ,
33800: STR
33801: PUSH
33802: LD_VAR 0 3
33806: PUSH
33807: LD_VAR 0 2
33811: ARRAY
33812: PUSH
33813: LD_INT 3
33815: ARRAY
33816: STR
33817: PUSH
33818: LD_STRING ,
33820: STR
33821: PUSH
33822: LD_VAR 0 3
33826: PUSH
33827: LD_VAR 0 2
33831: ARRAY
33832: PUSH
33833: LD_INT 4
33835: ARRAY
33836: STR
33837: PUSH
33838: LD_STRING )
33840: STR
33841: PPUSH
33842: CALL_OW 559
33846: GO 33756
33848: POP
33849: POP
// end ; end ;
33850: LD_VAR 0 1
33854: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
33855: LD_EXP 103
33859: IFFALSE 34544
33861: GO 33863
33863: DISABLE
33864: LD_INT 0
33866: PPUSH
33867: PPUSH
33868: PPUSH
33869: PPUSH
33870: PPUSH
33871: PPUSH
33872: PPUSH
33873: PPUSH
33874: PPUSH
// begin enable ;
33875: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
33876: LD_ADDR_VAR 0 3
33880: PUSH
33881: LD_EXP 103
33885: PPUSH
33886: CALL 79915 0 1
33890: ST_TO_ADDR
// if not list then
33891: LD_VAR 0 3
33895: NOT
33896: IFFALSE 33900
// exit ;
33898: GO 34544
// for i := 1 to list do
33900: LD_ADDR_VAR 0 1
33904: PUSH
33905: DOUBLE
33906: LD_INT 1
33908: DEC
33909: ST_TO_ADDR
33910: LD_VAR 0 3
33914: PUSH
33915: FOR_TO
33916: IFFALSE 34542
// begin depot := list [ i ] [ 2 ] ;
33918: LD_ADDR_VAR 0 8
33922: PUSH
33923: LD_VAR 0 3
33927: PUSH
33928: LD_VAR 0 1
33932: ARRAY
33933: PUSH
33934: LD_INT 2
33936: ARRAY
33937: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
33938: LD_ADDR_VAR 0 5
33942: PUSH
33943: LD_VAR 0 3
33947: PUSH
33948: LD_VAR 0 1
33952: ARRAY
33953: PUSH
33954: LD_INT 1
33956: ARRAY
33957: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
33958: LD_VAR 0 8
33962: PPUSH
33963: CALL_OW 301
33967: PUSH
33968: LD_VAR 0 5
33972: PUSH
33973: LD_VAR 0 8
33977: PPUSH
33978: CALL_OW 255
33982: NONEQUAL
33983: OR
33984: IFFALSE 34013
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
33986: LD_ADDR_EXP 103
33990: PUSH
33991: LD_EXP 103
33995: PPUSH
33996: LD_VAR 0 8
34000: PPUSH
34001: LD_INT 0
34003: PPUSH
34004: CALL_OW 1
34008: ST_TO_ADDR
// exit ;
34009: POP
34010: POP
34011: GO 34544
// end ; x := list [ i ] [ 3 ] ;
34013: LD_ADDR_VAR 0 6
34017: PUSH
34018: LD_VAR 0 3
34022: PUSH
34023: LD_VAR 0 1
34027: ARRAY
34028: PUSH
34029: LD_INT 3
34031: ARRAY
34032: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34033: LD_ADDR_VAR 0 7
34037: PUSH
34038: LD_VAR 0 3
34042: PUSH
34043: LD_VAR 0 1
34047: ARRAY
34048: PUSH
34049: LD_INT 4
34051: ARRAY
34052: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34053: LD_ADDR_VAR 0 9
34057: PUSH
34058: LD_VAR 0 6
34062: PPUSH
34063: LD_VAR 0 7
34067: PPUSH
34068: LD_INT 16
34070: PPUSH
34071: CALL 78503 0 3
34075: ST_TO_ADDR
// if not cratesNearbyPoint then
34076: LD_VAR 0 9
34080: NOT
34081: IFFALSE 34087
// exit ;
34083: POP
34084: POP
34085: GO 34544
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34087: LD_ADDR_VAR 0 4
34091: PUSH
34092: LD_INT 22
34094: PUSH
34095: LD_VAR 0 5
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 3
34106: PUSH
34107: LD_INT 60
34109: PUSH
34110: EMPTY
34111: LIST
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 91
34119: PUSH
34120: LD_VAR 0 8
34124: PUSH
34125: LD_INT 6
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: LIST
34132: PUSH
34133: LD_INT 2
34135: PUSH
34136: LD_INT 25
34138: PUSH
34139: LD_INT 2
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 25
34148: PUSH
34149: LD_INT 16
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: LIST
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: PPUSH
34167: CALL_OW 69
34171: PUSH
34172: LD_VAR 0 8
34176: PPUSH
34177: CALL_OW 313
34181: PPUSH
34182: LD_INT 3
34184: PUSH
34185: LD_INT 60
34187: PUSH
34188: EMPTY
34189: LIST
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: PUSH
34195: LD_INT 2
34197: PUSH
34198: LD_INT 25
34200: PUSH
34201: LD_INT 2
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: PUSH
34208: LD_INT 25
34210: PUSH
34211: LD_INT 16
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: LIST
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: PPUSH
34227: CALL_OW 72
34231: UNION
34232: ST_TO_ADDR
// if tmp then
34233: LD_VAR 0 4
34237: IFFALSE 34317
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34239: LD_ADDR_VAR 0 4
34243: PUSH
34244: LD_VAR 0 4
34248: PPUSH
34249: LD_INT 3
34251: PPUSH
34252: CALL 76472 0 2
34256: ST_TO_ADDR
// for j in tmp do
34257: LD_ADDR_VAR 0 2
34261: PUSH
34262: LD_VAR 0 4
34266: PUSH
34267: FOR_IN
34268: IFFALSE 34311
// begin if IsInUnit ( j ) then
34270: LD_VAR 0 2
34274: PPUSH
34275: CALL_OW 310
34279: IFFALSE 34290
// ComExit ( j ) ;
34281: LD_VAR 0 2
34285: PPUSH
34286: CALL 76555 0 1
// AddComCollect ( j , x , y ) ;
34290: LD_VAR 0 2
34294: PPUSH
34295: LD_VAR 0 6
34299: PPUSH
34300: LD_VAR 0 7
34304: PPUSH
34305: CALL_OW 177
// end ;
34309: GO 34267
34311: POP
34312: POP
// exit ;
34313: POP
34314: POP
34315: GO 34544
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34317: LD_ADDR_VAR 0 4
34321: PUSH
34322: LD_INT 22
34324: PUSH
34325: LD_VAR 0 5
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 91
34336: PUSH
34337: LD_VAR 0 8
34341: PUSH
34342: LD_INT 8
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 2
34352: PUSH
34353: LD_INT 34
34355: PUSH
34356: LD_INT 12
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: PUSH
34363: LD_INT 34
34365: PUSH
34366: LD_INT 51
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: PUSH
34373: LD_INT 34
34375: PUSH
34376: LD_INT 32
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: LD_INT 34
34385: PUSH
34386: LD_INT 89
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: LIST
34404: PPUSH
34405: CALL_OW 69
34409: ST_TO_ADDR
// if tmp then
34410: LD_VAR 0 4
34414: IFFALSE 34540
// begin for j in tmp do
34416: LD_ADDR_VAR 0 2
34420: PUSH
34421: LD_VAR 0 4
34425: PUSH
34426: FOR_IN
34427: IFFALSE 34538
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34429: LD_VAR 0 2
34433: PPUSH
34434: CALL_OW 262
34438: PUSH
34439: LD_INT 3
34441: EQUAL
34442: PUSH
34443: LD_VAR 0 2
34447: PPUSH
34448: CALL_OW 261
34452: PUSH
34453: LD_INT 20
34455: GREATER
34456: OR
34457: PUSH
34458: LD_VAR 0 2
34462: PPUSH
34463: CALL_OW 314
34467: NOT
34468: AND
34469: PUSH
34470: LD_VAR 0 2
34474: PPUSH
34475: CALL_OW 263
34479: PUSH
34480: LD_INT 1
34482: NONEQUAL
34483: PUSH
34484: LD_VAR 0 2
34488: PPUSH
34489: CALL_OW 311
34493: OR
34494: AND
34495: IFFALSE 34536
// begin ComCollect ( j , x , y ) ;
34497: LD_VAR 0 2
34501: PPUSH
34502: LD_VAR 0 6
34506: PPUSH
34507: LD_VAR 0 7
34511: PPUSH
34512: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34516: LD_VAR 0 2
34520: PPUSH
34521: LD_VAR 0 8
34525: PPUSH
34526: CALL_OW 172
// exit ;
34530: POP
34531: POP
34532: POP
34533: POP
34534: GO 34544
// end ;
34536: GO 34426
34538: POP
34539: POP
// end ; end ;
34540: GO 33915
34542: POP
34543: POP
// end ; end_of_file
34544: PPOPN 9
34546: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34547: LD_INT 0
34549: PPUSH
34550: PPUSH
34551: PPUSH
34552: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34553: LD_VAR 0 1
34557: PPUSH
34558: CALL_OW 264
34562: PUSH
34563: LD_INT 91
34565: EQUAL
34566: IFFALSE 34638
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34568: LD_INT 68
34570: PPUSH
34571: LD_VAR 0 1
34575: PPUSH
34576: CALL_OW 255
34580: PPUSH
34581: CALL_OW 321
34585: PUSH
34586: LD_INT 2
34588: EQUAL
34589: IFFALSE 34601
// eff := 70 else
34591: LD_ADDR_VAR 0 4
34595: PUSH
34596: LD_INT 70
34598: ST_TO_ADDR
34599: GO 34609
// eff := 30 ;
34601: LD_ADDR_VAR 0 4
34605: PUSH
34606: LD_INT 30
34608: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34609: LD_VAR 0 1
34613: PPUSH
34614: CALL_OW 250
34618: PPUSH
34619: LD_VAR 0 1
34623: PPUSH
34624: CALL_OW 251
34628: PPUSH
34629: LD_VAR 0 4
34633: PPUSH
34634: CALL_OW 495
// end ; end ;
34638: LD_VAR 0 2
34642: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34643: LD_INT 0
34645: PPUSH
// end ;
34646: LD_VAR 0 4
34650: RET
// export function SOS_Command ( cmd ) ; begin
34651: LD_INT 0
34653: PPUSH
// end ;
34654: LD_VAR 0 2
34658: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34659: LD_INT 0
34661: PPUSH
// end ;
34662: LD_VAR 0 6
34666: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34667: LD_INT 0
34669: PPUSH
34670: PPUSH
// if not vehicle or not factory then
34671: LD_VAR 0 1
34675: NOT
34676: PUSH
34677: LD_VAR 0 2
34681: NOT
34682: OR
34683: IFFALSE 34687
// exit ;
34685: GO 34918
// if factoryWaypoints >= factory then
34687: LD_EXP 102
34691: PUSH
34692: LD_VAR 0 2
34696: GREATEREQUAL
34697: IFFALSE 34918
// if factoryWaypoints [ factory ] then
34699: LD_EXP 102
34703: PUSH
34704: LD_VAR 0 2
34708: ARRAY
34709: IFFALSE 34918
// begin if GetControl ( vehicle ) = control_manual then
34711: LD_VAR 0 1
34715: PPUSH
34716: CALL_OW 263
34720: PUSH
34721: LD_INT 1
34723: EQUAL
34724: IFFALSE 34805
// begin driver := IsDrivenBy ( vehicle ) ;
34726: LD_ADDR_VAR 0 4
34730: PUSH
34731: LD_VAR 0 1
34735: PPUSH
34736: CALL_OW 311
34740: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34741: LD_VAR 0 4
34745: PPUSH
34746: LD_EXP 102
34750: PUSH
34751: LD_VAR 0 2
34755: ARRAY
34756: PUSH
34757: LD_INT 3
34759: ARRAY
34760: PPUSH
34761: LD_EXP 102
34765: PUSH
34766: LD_VAR 0 2
34770: ARRAY
34771: PUSH
34772: LD_INT 4
34774: ARRAY
34775: PPUSH
34776: CALL_OW 171
// AddComExitVehicle ( driver ) ;
34780: LD_VAR 0 4
34784: PPUSH
34785: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
34789: LD_VAR 0 4
34793: PPUSH
34794: LD_VAR 0 2
34798: PPUSH
34799: CALL_OW 180
// end else
34803: GO 34918
// if GetControl ( vehicle ) = control_remote then
34805: LD_VAR 0 1
34809: PPUSH
34810: CALL_OW 263
34814: PUSH
34815: LD_INT 2
34817: EQUAL
34818: IFFALSE 34879
// begin wait ( 0 0$2 ) ;
34820: LD_INT 70
34822: PPUSH
34823: CALL_OW 67
// if Connect ( vehicle ) then
34827: LD_VAR 0 1
34831: PPUSH
34832: CALL 46776 0 1
34836: IFFALSE 34877
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34838: LD_VAR 0 1
34842: PPUSH
34843: LD_EXP 102
34847: PUSH
34848: LD_VAR 0 2
34852: ARRAY
34853: PUSH
34854: LD_INT 3
34856: ARRAY
34857: PPUSH
34858: LD_EXP 102
34862: PUSH
34863: LD_VAR 0 2
34867: ARRAY
34868: PUSH
34869: LD_INT 4
34871: ARRAY
34872: PPUSH
34873: CALL_OW 171
// end else
34877: GO 34918
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34879: LD_VAR 0 1
34883: PPUSH
34884: LD_EXP 102
34888: PUSH
34889: LD_VAR 0 2
34893: ARRAY
34894: PUSH
34895: LD_INT 3
34897: ARRAY
34898: PPUSH
34899: LD_EXP 102
34903: PUSH
34904: LD_VAR 0 2
34908: ARRAY
34909: PUSH
34910: LD_INT 4
34912: ARRAY
34913: PPUSH
34914: CALL_OW 171
// end ; end ;
34918: LD_VAR 0 3
34922: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34923: LD_INT 0
34925: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34926: LD_VAR 0 1
34930: PUSH
34931: LD_INT 250
34933: EQUAL
34934: PUSH
34935: LD_VAR 0 2
34939: PPUSH
34940: CALL_OW 264
34944: PUSH
34945: LD_INT 81
34947: EQUAL
34948: AND
34949: IFFALSE 34970
// MinerPlaceMine ( unit , x , y ) ;
34951: LD_VAR 0 2
34955: PPUSH
34956: LD_VAR 0 4
34960: PPUSH
34961: LD_VAR 0 5
34965: PPUSH
34966: CALL 37355 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34970: LD_VAR 0 1
34974: PUSH
34975: LD_INT 251
34977: EQUAL
34978: PUSH
34979: LD_VAR 0 2
34983: PPUSH
34984: CALL_OW 264
34988: PUSH
34989: LD_INT 81
34991: EQUAL
34992: AND
34993: IFFALSE 35014
// MinerDetonateMine ( unit , x , y ) ;
34995: LD_VAR 0 2
34999: PPUSH
35000: LD_VAR 0 4
35004: PPUSH
35005: LD_VAR 0 5
35009: PPUSH
35010: CALL 37630 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35014: LD_VAR 0 1
35018: PUSH
35019: LD_INT 252
35021: EQUAL
35022: PUSH
35023: LD_VAR 0 2
35027: PPUSH
35028: CALL_OW 264
35032: PUSH
35033: LD_INT 81
35035: EQUAL
35036: AND
35037: IFFALSE 35058
// MinerCreateMinefield ( unit , x , y ) ;
35039: LD_VAR 0 2
35043: PPUSH
35044: LD_VAR 0 4
35048: PPUSH
35049: LD_VAR 0 5
35053: PPUSH
35054: CALL 38047 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35058: LD_VAR 0 1
35062: PUSH
35063: LD_INT 253
35065: EQUAL
35066: PUSH
35067: LD_VAR 0 2
35071: PPUSH
35072: CALL_OW 257
35076: PUSH
35077: LD_INT 5
35079: EQUAL
35080: AND
35081: IFFALSE 35102
// ComBinocular ( unit , x , y ) ;
35083: LD_VAR 0 2
35087: PPUSH
35088: LD_VAR 0 4
35092: PPUSH
35093: LD_VAR 0 5
35097: PPUSH
35098: CALL 38416 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35102: LD_VAR 0 1
35106: PUSH
35107: LD_INT 254
35109: EQUAL
35110: PUSH
35111: LD_VAR 0 2
35115: PPUSH
35116: CALL_OW 264
35120: PUSH
35121: LD_INT 99
35123: EQUAL
35124: AND
35125: PUSH
35126: LD_VAR 0 3
35130: PPUSH
35131: CALL_OW 263
35135: PUSH
35136: LD_INT 3
35138: EQUAL
35139: AND
35140: IFFALSE 35156
// HackDestroyVehicle ( unit , selectedUnit ) ;
35142: LD_VAR 0 2
35146: PPUSH
35147: LD_VAR 0 3
35151: PPUSH
35152: CALL 36719 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35156: LD_VAR 0 1
35160: PUSH
35161: LD_INT 255
35163: EQUAL
35164: PUSH
35165: LD_VAR 0 2
35169: PPUSH
35170: CALL_OW 264
35174: PUSH
35175: LD_INT 14
35177: PUSH
35178: LD_INT 53
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: IN
35185: AND
35186: PUSH
35187: LD_VAR 0 4
35191: PPUSH
35192: LD_VAR 0 5
35196: PPUSH
35197: CALL_OW 488
35201: AND
35202: IFFALSE 35226
// CutTreeXYR ( unit , x , y , 12 ) ;
35204: LD_VAR 0 2
35208: PPUSH
35209: LD_VAR 0 4
35213: PPUSH
35214: LD_VAR 0 5
35218: PPUSH
35219: LD_INT 12
35221: PPUSH
35222: CALL 35289 0 4
// if cmd = 256 then
35226: LD_VAR 0 1
35230: PUSH
35231: LD_INT 256
35233: EQUAL
35234: IFFALSE 35255
// SetFactoryWaypoint ( unit , x , y ) ;
35236: LD_VAR 0 2
35240: PPUSH
35241: LD_VAR 0 4
35245: PPUSH
35246: LD_VAR 0 5
35250: PPUSH
35251: CALL 33236 0 3
// if cmd = 257 then
35255: LD_VAR 0 1
35259: PUSH
35260: LD_INT 257
35262: EQUAL
35263: IFFALSE 35284
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35265: LD_VAR 0 2
35269: PPUSH
35270: LD_VAR 0 4
35274: PPUSH
35275: LD_VAR 0 5
35279: PPUSH
35280: CALL 33598 0 3
// end ;
35284: LD_VAR 0 6
35288: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35289: LD_INT 0
35291: PPUSH
35292: PPUSH
35293: PPUSH
35294: PPUSH
35295: PPUSH
35296: PPUSH
35297: PPUSH
35298: PPUSH
35299: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35300: LD_VAR 0 1
35304: NOT
35305: PUSH
35306: LD_VAR 0 2
35310: PPUSH
35311: LD_VAR 0 3
35315: PPUSH
35316: CALL_OW 488
35320: NOT
35321: OR
35322: PUSH
35323: LD_VAR 0 4
35327: NOT
35328: OR
35329: IFFALSE 35333
// exit ;
35331: GO 35673
// list := [ ] ;
35333: LD_ADDR_VAR 0 13
35337: PUSH
35338: EMPTY
35339: ST_TO_ADDR
// if x - r < 0 then
35340: LD_VAR 0 2
35344: PUSH
35345: LD_VAR 0 4
35349: MINUS
35350: PUSH
35351: LD_INT 0
35353: LESS
35354: IFFALSE 35366
// min_x := 0 else
35356: LD_ADDR_VAR 0 7
35360: PUSH
35361: LD_INT 0
35363: ST_TO_ADDR
35364: GO 35382
// min_x := x - r ;
35366: LD_ADDR_VAR 0 7
35370: PUSH
35371: LD_VAR 0 2
35375: PUSH
35376: LD_VAR 0 4
35380: MINUS
35381: ST_TO_ADDR
// if y - r < 0 then
35382: LD_VAR 0 3
35386: PUSH
35387: LD_VAR 0 4
35391: MINUS
35392: PUSH
35393: LD_INT 0
35395: LESS
35396: IFFALSE 35408
// min_y := 0 else
35398: LD_ADDR_VAR 0 8
35402: PUSH
35403: LD_INT 0
35405: ST_TO_ADDR
35406: GO 35424
// min_y := y - r ;
35408: LD_ADDR_VAR 0 8
35412: PUSH
35413: LD_VAR 0 3
35417: PUSH
35418: LD_VAR 0 4
35422: MINUS
35423: ST_TO_ADDR
// max_x := x + r ;
35424: LD_ADDR_VAR 0 9
35428: PUSH
35429: LD_VAR 0 2
35433: PUSH
35434: LD_VAR 0 4
35438: PLUS
35439: ST_TO_ADDR
// max_y := y + r ;
35440: LD_ADDR_VAR 0 10
35444: PUSH
35445: LD_VAR 0 3
35449: PUSH
35450: LD_VAR 0 4
35454: PLUS
35455: ST_TO_ADDR
// for _x = min_x to max_x do
35456: LD_ADDR_VAR 0 11
35460: PUSH
35461: DOUBLE
35462: LD_VAR 0 7
35466: DEC
35467: ST_TO_ADDR
35468: LD_VAR 0 9
35472: PUSH
35473: FOR_TO
35474: IFFALSE 35591
// for _y = min_y to max_y do
35476: LD_ADDR_VAR 0 12
35480: PUSH
35481: DOUBLE
35482: LD_VAR 0 8
35486: DEC
35487: ST_TO_ADDR
35488: LD_VAR 0 10
35492: PUSH
35493: FOR_TO
35494: IFFALSE 35587
// begin if not ValidHex ( _x , _y ) then
35496: LD_VAR 0 11
35500: PPUSH
35501: LD_VAR 0 12
35505: PPUSH
35506: CALL_OW 488
35510: NOT
35511: IFFALSE 35515
// continue ;
35513: GO 35493
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35515: LD_VAR 0 11
35519: PPUSH
35520: LD_VAR 0 12
35524: PPUSH
35525: CALL_OW 351
35529: PUSH
35530: LD_VAR 0 11
35534: PPUSH
35535: LD_VAR 0 12
35539: PPUSH
35540: CALL_OW 554
35544: AND
35545: IFFALSE 35585
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35547: LD_ADDR_VAR 0 13
35551: PUSH
35552: LD_VAR 0 13
35556: PPUSH
35557: LD_VAR 0 13
35561: PUSH
35562: LD_INT 1
35564: PLUS
35565: PPUSH
35566: LD_VAR 0 11
35570: PUSH
35571: LD_VAR 0 12
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PPUSH
35580: CALL_OW 2
35584: ST_TO_ADDR
// end ;
35585: GO 35493
35587: POP
35588: POP
35589: GO 35473
35591: POP
35592: POP
// if not list then
35593: LD_VAR 0 13
35597: NOT
35598: IFFALSE 35602
// exit ;
35600: GO 35673
// for i in list do
35602: LD_ADDR_VAR 0 6
35606: PUSH
35607: LD_VAR 0 13
35611: PUSH
35612: FOR_IN
35613: IFFALSE 35671
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35615: LD_VAR 0 1
35619: PPUSH
35620: LD_STRING M
35622: PUSH
35623: LD_VAR 0 6
35627: PUSH
35628: LD_INT 1
35630: ARRAY
35631: PUSH
35632: LD_VAR 0 6
35636: PUSH
35637: LD_INT 2
35639: ARRAY
35640: PUSH
35641: LD_INT 0
35643: PUSH
35644: LD_INT 0
35646: PUSH
35647: LD_INT 0
35649: PUSH
35650: LD_INT 0
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: PUSH
35662: EMPTY
35663: LIST
35664: PPUSH
35665: CALL_OW 447
35669: GO 35612
35671: POP
35672: POP
// end ;
35673: LD_VAR 0 5
35677: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35678: LD_EXP 105
35682: NOT
35683: IFFALSE 35733
35685: GO 35687
35687: DISABLE
// begin initHack := true ;
35688: LD_ADDR_EXP 105
35692: PUSH
35693: LD_INT 1
35695: ST_TO_ADDR
// hackTanks := [ ] ;
35696: LD_ADDR_EXP 106
35700: PUSH
35701: EMPTY
35702: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35703: LD_ADDR_EXP 107
35707: PUSH
35708: EMPTY
35709: ST_TO_ADDR
// hackLimit := 3 ;
35710: LD_ADDR_EXP 108
35714: PUSH
35715: LD_INT 3
35717: ST_TO_ADDR
// hackDist := 12 ;
35718: LD_ADDR_EXP 109
35722: PUSH
35723: LD_INT 12
35725: ST_TO_ADDR
// hackCounter := [ ] ;
35726: LD_ADDR_EXP 110
35730: PUSH
35731: EMPTY
35732: ST_TO_ADDR
// end ;
35733: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35734: LD_EXP 105
35738: PUSH
35739: LD_INT 34
35741: PUSH
35742: LD_INT 99
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: PPUSH
35749: CALL_OW 69
35753: AND
35754: IFFALSE 36007
35756: GO 35758
35758: DISABLE
35759: LD_INT 0
35761: PPUSH
35762: PPUSH
// begin enable ;
35763: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35764: LD_ADDR_VAR 0 1
35768: PUSH
35769: LD_INT 34
35771: PUSH
35772: LD_INT 99
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PPUSH
35779: CALL_OW 69
35783: PUSH
35784: FOR_IN
35785: IFFALSE 36005
// begin if not i in hackTanks then
35787: LD_VAR 0 1
35791: PUSH
35792: LD_EXP 106
35796: IN
35797: NOT
35798: IFFALSE 35881
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35800: LD_ADDR_EXP 106
35804: PUSH
35805: LD_EXP 106
35809: PPUSH
35810: LD_EXP 106
35814: PUSH
35815: LD_INT 1
35817: PLUS
35818: PPUSH
35819: LD_VAR 0 1
35823: PPUSH
35824: CALL_OW 1
35828: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35829: LD_ADDR_EXP 107
35833: PUSH
35834: LD_EXP 107
35838: PPUSH
35839: LD_EXP 107
35843: PUSH
35844: LD_INT 1
35846: PLUS
35847: PPUSH
35848: EMPTY
35849: PPUSH
35850: CALL_OW 1
35854: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35855: LD_ADDR_EXP 110
35859: PUSH
35860: LD_EXP 110
35864: PPUSH
35865: LD_EXP 110
35869: PUSH
35870: LD_INT 1
35872: PLUS
35873: PPUSH
35874: EMPTY
35875: PPUSH
35876: CALL_OW 1
35880: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35881: LD_VAR 0 1
35885: PPUSH
35886: CALL_OW 302
35890: NOT
35891: IFFALSE 35904
// begin HackUnlinkAll ( i ) ;
35893: LD_VAR 0 1
35897: PPUSH
35898: CALL 36010 0 1
// continue ;
35902: GO 35784
// end ; HackCheckCapturedStatus ( i ) ;
35904: LD_VAR 0 1
35908: PPUSH
35909: CALL 36453 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35913: LD_ADDR_VAR 0 2
35917: PUSH
35918: LD_INT 81
35920: PUSH
35921: LD_VAR 0 1
35925: PPUSH
35926: CALL_OW 255
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: PUSH
35935: LD_INT 33
35937: PUSH
35938: LD_INT 3
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: LD_INT 91
35947: PUSH
35948: LD_VAR 0 1
35952: PUSH
35953: LD_EXP 109
35957: PUSH
35958: EMPTY
35959: LIST
35960: LIST
35961: LIST
35962: PUSH
35963: LD_INT 50
35965: PUSH
35966: EMPTY
35967: LIST
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: LIST
35973: LIST
35974: PPUSH
35975: CALL_OW 69
35979: ST_TO_ADDR
// if not tmp then
35980: LD_VAR 0 2
35984: NOT
35985: IFFALSE 35989
// continue ;
35987: GO 35784
// HackLink ( i , tmp ) ;
35989: LD_VAR 0 1
35993: PPUSH
35994: LD_VAR 0 2
35998: PPUSH
35999: CALL 36146 0 2
// end ;
36003: GO 35784
36005: POP
36006: POP
// end ;
36007: PPOPN 2
36009: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36010: LD_INT 0
36012: PPUSH
36013: PPUSH
36014: PPUSH
// if not hack in hackTanks then
36015: LD_VAR 0 1
36019: PUSH
36020: LD_EXP 106
36024: IN
36025: NOT
36026: IFFALSE 36030
// exit ;
36028: GO 36141
// index := GetElementIndex ( hackTanks , hack ) ;
36030: LD_ADDR_VAR 0 4
36034: PUSH
36035: LD_EXP 106
36039: PPUSH
36040: LD_VAR 0 1
36044: PPUSH
36045: CALL 43583 0 2
36049: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36050: LD_EXP 107
36054: PUSH
36055: LD_VAR 0 4
36059: ARRAY
36060: IFFALSE 36141
// begin for i in hackTanksCaptured [ index ] do
36062: LD_ADDR_VAR 0 3
36066: PUSH
36067: LD_EXP 107
36071: PUSH
36072: LD_VAR 0 4
36076: ARRAY
36077: PUSH
36078: FOR_IN
36079: IFFALSE 36105
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36081: LD_VAR 0 3
36085: PUSH
36086: LD_INT 1
36088: ARRAY
36089: PPUSH
36090: LD_VAR 0 3
36094: PUSH
36095: LD_INT 2
36097: ARRAY
36098: PPUSH
36099: CALL_OW 235
36103: GO 36078
36105: POP
36106: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36107: LD_ADDR_EXP 107
36111: PUSH
36112: LD_EXP 107
36116: PPUSH
36117: LD_VAR 0 4
36121: PPUSH
36122: EMPTY
36123: PPUSH
36124: CALL_OW 1
36128: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36129: LD_VAR 0 1
36133: PPUSH
36134: LD_INT 0
36136: PPUSH
36137: CALL_OW 505
// end ; end ;
36141: LD_VAR 0 2
36145: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36146: LD_INT 0
36148: PPUSH
36149: PPUSH
36150: PPUSH
// if not hack in hackTanks or not vehicles then
36151: LD_VAR 0 1
36155: PUSH
36156: LD_EXP 106
36160: IN
36161: NOT
36162: PUSH
36163: LD_VAR 0 2
36167: NOT
36168: OR
36169: IFFALSE 36173
// exit ;
36171: GO 36448
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36173: LD_ADDR_VAR 0 2
36177: PUSH
36178: LD_VAR 0 1
36182: PPUSH
36183: LD_VAR 0 2
36187: PPUSH
36188: LD_INT 1
36190: PPUSH
36191: LD_INT 1
36193: PPUSH
36194: CALL 44233 0 4
36198: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36199: LD_ADDR_VAR 0 5
36203: PUSH
36204: LD_EXP 106
36208: PPUSH
36209: LD_VAR 0 1
36213: PPUSH
36214: CALL 43583 0 2
36218: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36219: LD_EXP 107
36223: PUSH
36224: LD_VAR 0 5
36228: ARRAY
36229: PUSH
36230: LD_EXP 108
36234: LESS
36235: IFFALSE 36424
// begin for i := 1 to vehicles do
36237: LD_ADDR_VAR 0 4
36241: PUSH
36242: DOUBLE
36243: LD_INT 1
36245: DEC
36246: ST_TO_ADDR
36247: LD_VAR 0 2
36251: PUSH
36252: FOR_TO
36253: IFFALSE 36422
// begin if hackTanksCaptured [ index ] = hackLimit then
36255: LD_EXP 107
36259: PUSH
36260: LD_VAR 0 5
36264: ARRAY
36265: PUSH
36266: LD_EXP 108
36270: EQUAL
36271: IFFALSE 36275
// break ;
36273: GO 36422
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36275: LD_ADDR_EXP 110
36279: PUSH
36280: LD_EXP 110
36284: PPUSH
36285: LD_VAR 0 5
36289: PPUSH
36290: LD_EXP 110
36294: PUSH
36295: LD_VAR 0 5
36299: ARRAY
36300: PUSH
36301: LD_INT 1
36303: PLUS
36304: PPUSH
36305: CALL_OW 1
36309: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36310: LD_ADDR_EXP 107
36314: PUSH
36315: LD_EXP 107
36319: PPUSH
36320: LD_VAR 0 5
36324: PUSH
36325: LD_EXP 107
36329: PUSH
36330: LD_VAR 0 5
36334: ARRAY
36335: PUSH
36336: LD_INT 1
36338: PLUS
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PPUSH
36344: LD_VAR 0 2
36348: PUSH
36349: LD_VAR 0 4
36353: ARRAY
36354: PUSH
36355: LD_VAR 0 2
36359: PUSH
36360: LD_VAR 0 4
36364: ARRAY
36365: PPUSH
36366: CALL_OW 255
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PPUSH
36375: CALL 43798 0 3
36379: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36380: LD_VAR 0 2
36384: PUSH
36385: LD_VAR 0 4
36389: ARRAY
36390: PPUSH
36391: LD_VAR 0 1
36395: PPUSH
36396: CALL_OW 255
36400: PPUSH
36401: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36405: LD_VAR 0 2
36409: PUSH
36410: LD_VAR 0 4
36414: ARRAY
36415: PPUSH
36416: CALL_OW 141
// end ;
36420: GO 36252
36422: POP
36423: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36424: LD_VAR 0 1
36428: PPUSH
36429: LD_EXP 107
36433: PUSH
36434: LD_VAR 0 5
36438: ARRAY
36439: PUSH
36440: LD_INT 0
36442: PLUS
36443: PPUSH
36444: CALL_OW 505
// end ;
36448: LD_VAR 0 3
36452: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36453: LD_INT 0
36455: PPUSH
36456: PPUSH
36457: PPUSH
36458: PPUSH
// if not hack in hackTanks then
36459: LD_VAR 0 1
36463: PUSH
36464: LD_EXP 106
36468: IN
36469: NOT
36470: IFFALSE 36474
// exit ;
36472: GO 36714
// index := GetElementIndex ( hackTanks , hack ) ;
36474: LD_ADDR_VAR 0 4
36478: PUSH
36479: LD_EXP 106
36483: PPUSH
36484: LD_VAR 0 1
36488: PPUSH
36489: CALL 43583 0 2
36493: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36494: LD_ADDR_VAR 0 3
36498: PUSH
36499: DOUBLE
36500: LD_EXP 107
36504: PUSH
36505: LD_VAR 0 4
36509: ARRAY
36510: INC
36511: ST_TO_ADDR
36512: LD_INT 1
36514: PUSH
36515: FOR_DOWNTO
36516: IFFALSE 36688
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36518: LD_ADDR_VAR 0 5
36522: PUSH
36523: LD_EXP 107
36527: PUSH
36528: LD_VAR 0 4
36532: ARRAY
36533: PUSH
36534: LD_VAR 0 3
36538: ARRAY
36539: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36540: LD_VAR 0 5
36544: PUSH
36545: LD_INT 1
36547: ARRAY
36548: PPUSH
36549: CALL_OW 302
36553: NOT
36554: PUSH
36555: LD_VAR 0 5
36559: PUSH
36560: LD_INT 1
36562: ARRAY
36563: PPUSH
36564: CALL_OW 255
36568: PUSH
36569: LD_VAR 0 1
36573: PPUSH
36574: CALL_OW 255
36578: NONEQUAL
36579: OR
36580: IFFALSE 36686
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36582: LD_VAR 0 5
36586: PUSH
36587: LD_INT 1
36589: ARRAY
36590: PPUSH
36591: CALL_OW 305
36595: PUSH
36596: LD_VAR 0 5
36600: PUSH
36601: LD_INT 1
36603: ARRAY
36604: PPUSH
36605: CALL_OW 255
36609: PUSH
36610: LD_VAR 0 1
36614: PPUSH
36615: CALL_OW 255
36619: EQUAL
36620: AND
36621: IFFALSE 36645
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36623: LD_VAR 0 5
36627: PUSH
36628: LD_INT 1
36630: ARRAY
36631: PPUSH
36632: LD_VAR 0 5
36636: PUSH
36637: LD_INT 2
36639: ARRAY
36640: PPUSH
36641: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36645: LD_ADDR_EXP 107
36649: PUSH
36650: LD_EXP 107
36654: PPUSH
36655: LD_VAR 0 4
36659: PPUSH
36660: LD_EXP 107
36664: PUSH
36665: LD_VAR 0 4
36669: ARRAY
36670: PPUSH
36671: LD_VAR 0 3
36675: PPUSH
36676: CALL_OW 3
36680: PPUSH
36681: CALL_OW 1
36685: ST_TO_ADDR
// end ; end ;
36686: GO 36515
36688: POP
36689: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36690: LD_VAR 0 1
36694: PPUSH
36695: LD_EXP 107
36699: PUSH
36700: LD_VAR 0 4
36704: ARRAY
36705: PUSH
36706: LD_INT 0
36708: PLUS
36709: PPUSH
36710: CALL_OW 505
// end ;
36714: LD_VAR 0 2
36718: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36719: LD_INT 0
36721: PPUSH
36722: PPUSH
36723: PPUSH
36724: PPUSH
// if not hack in hackTanks then
36725: LD_VAR 0 1
36729: PUSH
36730: LD_EXP 106
36734: IN
36735: NOT
36736: IFFALSE 36740
// exit ;
36738: GO 36825
// index := GetElementIndex ( hackTanks , hack ) ;
36740: LD_ADDR_VAR 0 5
36744: PUSH
36745: LD_EXP 106
36749: PPUSH
36750: LD_VAR 0 1
36754: PPUSH
36755: CALL 43583 0 2
36759: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36760: LD_ADDR_VAR 0 4
36764: PUSH
36765: DOUBLE
36766: LD_INT 1
36768: DEC
36769: ST_TO_ADDR
36770: LD_EXP 107
36774: PUSH
36775: LD_VAR 0 5
36779: ARRAY
36780: PUSH
36781: FOR_TO
36782: IFFALSE 36823
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36784: LD_EXP 107
36788: PUSH
36789: LD_VAR 0 5
36793: ARRAY
36794: PUSH
36795: LD_VAR 0 4
36799: ARRAY
36800: PUSH
36801: LD_INT 1
36803: ARRAY
36804: PUSH
36805: LD_VAR 0 2
36809: EQUAL
36810: IFFALSE 36821
// KillUnit ( vehicle ) ;
36812: LD_VAR 0 2
36816: PPUSH
36817: CALL_OW 66
36821: GO 36781
36823: POP
36824: POP
// end ;
36825: LD_VAR 0 3
36829: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36830: LD_EXP 111
36834: NOT
36835: IFFALSE 36870
36837: GO 36839
36839: DISABLE
// begin initMiner := true ;
36840: LD_ADDR_EXP 111
36844: PUSH
36845: LD_INT 1
36847: ST_TO_ADDR
// minersList := [ ] ;
36848: LD_ADDR_EXP 112
36852: PUSH
36853: EMPTY
36854: ST_TO_ADDR
// minerMinesList := [ ] ;
36855: LD_ADDR_EXP 113
36859: PUSH
36860: EMPTY
36861: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36862: LD_ADDR_EXP 114
36866: PUSH
36867: LD_INT 5
36869: ST_TO_ADDR
// end ;
36870: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36871: LD_EXP 111
36875: PUSH
36876: LD_INT 34
36878: PUSH
36879: LD_INT 81
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: PPUSH
36886: CALL_OW 69
36890: AND
36891: IFFALSE 37352
36893: GO 36895
36895: DISABLE
36896: LD_INT 0
36898: PPUSH
36899: PPUSH
36900: PPUSH
36901: PPUSH
// begin enable ;
36902: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36903: LD_ADDR_VAR 0 1
36907: PUSH
36908: LD_INT 34
36910: PUSH
36911: LD_INT 81
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PPUSH
36918: CALL_OW 69
36922: PUSH
36923: FOR_IN
36924: IFFALSE 36996
// begin if not i in minersList then
36926: LD_VAR 0 1
36930: PUSH
36931: LD_EXP 112
36935: IN
36936: NOT
36937: IFFALSE 36994
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36939: LD_ADDR_EXP 112
36943: PUSH
36944: LD_EXP 112
36948: PPUSH
36949: LD_EXP 112
36953: PUSH
36954: LD_INT 1
36956: PLUS
36957: PPUSH
36958: LD_VAR 0 1
36962: PPUSH
36963: CALL_OW 1
36967: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36968: LD_ADDR_EXP 113
36972: PUSH
36973: LD_EXP 113
36977: PPUSH
36978: LD_EXP 113
36982: PUSH
36983: LD_INT 1
36985: PLUS
36986: PPUSH
36987: EMPTY
36988: PPUSH
36989: CALL_OW 1
36993: ST_TO_ADDR
// end end ;
36994: GO 36923
36996: POP
36997: POP
// for i := minerMinesList downto 1 do
36998: LD_ADDR_VAR 0 1
37002: PUSH
37003: DOUBLE
37004: LD_EXP 113
37008: INC
37009: ST_TO_ADDR
37010: LD_INT 1
37012: PUSH
37013: FOR_DOWNTO
37014: IFFALSE 37350
// begin if IsLive ( minersList [ i ] ) then
37016: LD_EXP 112
37020: PUSH
37021: LD_VAR 0 1
37025: ARRAY
37026: PPUSH
37027: CALL_OW 300
37031: IFFALSE 37059
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37033: LD_EXP 112
37037: PUSH
37038: LD_VAR 0 1
37042: ARRAY
37043: PPUSH
37044: LD_EXP 113
37048: PUSH
37049: LD_VAR 0 1
37053: ARRAY
37054: PPUSH
37055: CALL_OW 505
// if not minerMinesList [ i ] then
37059: LD_EXP 113
37063: PUSH
37064: LD_VAR 0 1
37068: ARRAY
37069: NOT
37070: IFFALSE 37074
// continue ;
37072: GO 37013
// for j := minerMinesList [ i ] downto 1 do
37074: LD_ADDR_VAR 0 2
37078: PUSH
37079: DOUBLE
37080: LD_EXP 113
37084: PUSH
37085: LD_VAR 0 1
37089: ARRAY
37090: INC
37091: ST_TO_ADDR
37092: LD_INT 1
37094: PUSH
37095: FOR_DOWNTO
37096: IFFALSE 37346
// begin side := GetSide ( minersList [ i ] ) ;
37098: LD_ADDR_VAR 0 3
37102: PUSH
37103: LD_EXP 112
37107: PUSH
37108: LD_VAR 0 1
37112: ARRAY
37113: PPUSH
37114: CALL_OW 255
37118: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37119: LD_ADDR_VAR 0 4
37123: PUSH
37124: LD_EXP 113
37128: PUSH
37129: LD_VAR 0 1
37133: ARRAY
37134: PUSH
37135: LD_VAR 0 2
37139: ARRAY
37140: PUSH
37141: LD_INT 1
37143: ARRAY
37144: PPUSH
37145: LD_EXP 113
37149: PUSH
37150: LD_VAR 0 1
37154: ARRAY
37155: PUSH
37156: LD_VAR 0 2
37160: ARRAY
37161: PUSH
37162: LD_INT 2
37164: ARRAY
37165: PPUSH
37166: CALL_OW 428
37170: ST_TO_ADDR
// if not tmp then
37171: LD_VAR 0 4
37175: NOT
37176: IFFALSE 37180
// continue ;
37178: GO 37095
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37180: LD_VAR 0 4
37184: PUSH
37185: LD_INT 81
37187: PUSH
37188: LD_VAR 0 3
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PPUSH
37197: CALL_OW 69
37201: IN
37202: PUSH
37203: LD_EXP 113
37207: PUSH
37208: LD_VAR 0 1
37212: ARRAY
37213: PUSH
37214: LD_VAR 0 2
37218: ARRAY
37219: PUSH
37220: LD_INT 1
37222: ARRAY
37223: PPUSH
37224: LD_EXP 113
37228: PUSH
37229: LD_VAR 0 1
37233: ARRAY
37234: PUSH
37235: LD_VAR 0 2
37239: ARRAY
37240: PUSH
37241: LD_INT 2
37243: ARRAY
37244: PPUSH
37245: CALL_OW 458
37249: AND
37250: IFFALSE 37344
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37252: LD_EXP 113
37256: PUSH
37257: LD_VAR 0 1
37261: ARRAY
37262: PUSH
37263: LD_VAR 0 2
37267: ARRAY
37268: PUSH
37269: LD_INT 1
37271: ARRAY
37272: PPUSH
37273: LD_EXP 113
37277: PUSH
37278: LD_VAR 0 1
37282: ARRAY
37283: PUSH
37284: LD_VAR 0 2
37288: ARRAY
37289: PUSH
37290: LD_INT 2
37292: ARRAY
37293: PPUSH
37294: LD_VAR 0 3
37298: PPUSH
37299: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37303: LD_ADDR_EXP 113
37307: PUSH
37308: LD_EXP 113
37312: PPUSH
37313: LD_VAR 0 1
37317: PPUSH
37318: LD_EXP 113
37322: PUSH
37323: LD_VAR 0 1
37327: ARRAY
37328: PPUSH
37329: LD_VAR 0 2
37333: PPUSH
37334: CALL_OW 3
37338: PPUSH
37339: CALL_OW 1
37343: ST_TO_ADDR
// end ; end ;
37344: GO 37095
37346: POP
37347: POP
// end ;
37348: GO 37013
37350: POP
37351: POP
// end ;
37352: PPOPN 4
37354: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37355: LD_INT 0
37357: PPUSH
37358: PPUSH
// result := false ;
37359: LD_ADDR_VAR 0 4
37363: PUSH
37364: LD_INT 0
37366: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37367: LD_VAR 0 1
37371: PPUSH
37372: CALL_OW 264
37376: PUSH
37377: LD_INT 81
37379: EQUAL
37380: NOT
37381: IFFALSE 37385
// exit ;
37383: GO 37625
// index := GetElementIndex ( minersList , unit ) ;
37385: LD_ADDR_VAR 0 5
37389: PUSH
37390: LD_EXP 112
37394: PPUSH
37395: LD_VAR 0 1
37399: PPUSH
37400: CALL 43583 0 2
37404: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37405: LD_EXP 113
37409: PUSH
37410: LD_VAR 0 5
37414: ARRAY
37415: PUSH
37416: LD_EXP 114
37420: GREATEREQUAL
37421: IFFALSE 37425
// exit ;
37423: GO 37625
// ComMoveXY ( unit , x , y ) ;
37425: LD_VAR 0 1
37429: PPUSH
37430: LD_VAR 0 2
37434: PPUSH
37435: LD_VAR 0 3
37439: PPUSH
37440: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37444: LD_INT 35
37446: PPUSH
37447: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37451: LD_VAR 0 1
37455: PPUSH
37456: LD_VAR 0 2
37460: PPUSH
37461: LD_VAR 0 3
37465: PPUSH
37466: CALL 74967 0 3
37470: NOT
37471: PUSH
37472: LD_VAR 0 1
37476: PPUSH
37477: CALL_OW 314
37481: AND
37482: IFFALSE 37486
// exit ;
37484: GO 37625
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37486: LD_VAR 0 2
37490: PPUSH
37491: LD_VAR 0 3
37495: PPUSH
37496: CALL_OW 428
37500: PUSH
37501: LD_VAR 0 1
37505: EQUAL
37506: PUSH
37507: LD_VAR 0 1
37511: PPUSH
37512: CALL_OW 314
37516: NOT
37517: AND
37518: IFFALSE 37444
// PlaySoundXY ( x , y , PlantMine ) ;
37520: LD_VAR 0 2
37524: PPUSH
37525: LD_VAR 0 3
37529: PPUSH
37530: LD_STRING PlantMine
37532: PPUSH
37533: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37537: LD_VAR 0 2
37541: PPUSH
37542: LD_VAR 0 3
37546: PPUSH
37547: LD_VAR 0 1
37551: PPUSH
37552: CALL_OW 255
37556: PPUSH
37557: LD_INT 0
37559: PPUSH
37560: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37564: LD_ADDR_EXP 113
37568: PUSH
37569: LD_EXP 113
37573: PPUSH
37574: LD_VAR 0 5
37578: PUSH
37579: LD_EXP 113
37583: PUSH
37584: LD_VAR 0 5
37588: ARRAY
37589: PUSH
37590: LD_INT 1
37592: PLUS
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PPUSH
37598: LD_VAR 0 2
37602: PUSH
37603: LD_VAR 0 3
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PPUSH
37612: CALL 43798 0 3
37616: ST_TO_ADDR
// result := true ;
37617: LD_ADDR_VAR 0 4
37621: PUSH
37622: LD_INT 1
37624: ST_TO_ADDR
// end ;
37625: LD_VAR 0 4
37629: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37630: LD_INT 0
37632: PPUSH
37633: PPUSH
37634: PPUSH
// if not unit in minersList then
37635: LD_VAR 0 1
37639: PUSH
37640: LD_EXP 112
37644: IN
37645: NOT
37646: IFFALSE 37650
// exit ;
37648: GO 38042
// index := GetElementIndex ( minersList , unit ) ;
37650: LD_ADDR_VAR 0 6
37654: PUSH
37655: LD_EXP 112
37659: PPUSH
37660: LD_VAR 0 1
37664: PPUSH
37665: CALL 43583 0 2
37669: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37670: LD_ADDR_VAR 0 5
37674: PUSH
37675: DOUBLE
37676: LD_EXP 113
37680: PUSH
37681: LD_VAR 0 6
37685: ARRAY
37686: INC
37687: ST_TO_ADDR
37688: LD_INT 1
37690: PUSH
37691: FOR_DOWNTO
37692: IFFALSE 37853
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37694: LD_EXP 113
37698: PUSH
37699: LD_VAR 0 6
37703: ARRAY
37704: PUSH
37705: LD_VAR 0 5
37709: ARRAY
37710: PUSH
37711: LD_INT 1
37713: ARRAY
37714: PUSH
37715: LD_VAR 0 2
37719: EQUAL
37720: PUSH
37721: LD_EXP 113
37725: PUSH
37726: LD_VAR 0 6
37730: ARRAY
37731: PUSH
37732: LD_VAR 0 5
37736: ARRAY
37737: PUSH
37738: LD_INT 2
37740: ARRAY
37741: PUSH
37742: LD_VAR 0 3
37746: EQUAL
37747: AND
37748: IFFALSE 37851
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37750: LD_EXP 113
37754: PUSH
37755: LD_VAR 0 6
37759: ARRAY
37760: PUSH
37761: LD_VAR 0 5
37765: ARRAY
37766: PUSH
37767: LD_INT 1
37769: ARRAY
37770: PPUSH
37771: LD_EXP 113
37775: PUSH
37776: LD_VAR 0 6
37780: ARRAY
37781: PUSH
37782: LD_VAR 0 5
37786: ARRAY
37787: PUSH
37788: LD_INT 2
37790: ARRAY
37791: PPUSH
37792: LD_VAR 0 1
37796: PPUSH
37797: CALL_OW 255
37801: PPUSH
37802: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37806: LD_ADDR_EXP 113
37810: PUSH
37811: LD_EXP 113
37815: PPUSH
37816: LD_VAR 0 6
37820: PPUSH
37821: LD_EXP 113
37825: PUSH
37826: LD_VAR 0 6
37830: ARRAY
37831: PPUSH
37832: LD_VAR 0 5
37836: PPUSH
37837: CALL_OW 3
37841: PPUSH
37842: CALL_OW 1
37846: ST_TO_ADDR
// exit ;
37847: POP
37848: POP
37849: GO 38042
// end ; end ;
37851: GO 37691
37853: POP
37854: POP
// for i := minerMinesList [ index ] downto 1 do
37855: LD_ADDR_VAR 0 5
37859: PUSH
37860: DOUBLE
37861: LD_EXP 113
37865: PUSH
37866: LD_VAR 0 6
37870: ARRAY
37871: INC
37872: ST_TO_ADDR
37873: LD_INT 1
37875: PUSH
37876: FOR_DOWNTO
37877: IFFALSE 38040
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37879: LD_EXP 113
37883: PUSH
37884: LD_VAR 0 6
37888: ARRAY
37889: PUSH
37890: LD_VAR 0 5
37894: ARRAY
37895: PUSH
37896: LD_INT 1
37898: ARRAY
37899: PPUSH
37900: LD_EXP 113
37904: PUSH
37905: LD_VAR 0 6
37909: ARRAY
37910: PUSH
37911: LD_VAR 0 5
37915: ARRAY
37916: PUSH
37917: LD_INT 2
37919: ARRAY
37920: PPUSH
37921: LD_VAR 0 2
37925: PPUSH
37926: LD_VAR 0 3
37930: PPUSH
37931: CALL_OW 298
37935: PUSH
37936: LD_INT 6
37938: LESS
37939: IFFALSE 38038
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37941: LD_EXP 113
37945: PUSH
37946: LD_VAR 0 6
37950: ARRAY
37951: PUSH
37952: LD_VAR 0 5
37956: ARRAY
37957: PUSH
37958: LD_INT 1
37960: ARRAY
37961: PPUSH
37962: LD_EXP 113
37966: PUSH
37967: LD_VAR 0 6
37971: ARRAY
37972: PUSH
37973: LD_VAR 0 5
37977: ARRAY
37978: PUSH
37979: LD_INT 2
37981: ARRAY
37982: PPUSH
37983: LD_VAR 0 1
37987: PPUSH
37988: CALL_OW 255
37992: PPUSH
37993: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37997: LD_ADDR_EXP 113
38001: PUSH
38002: LD_EXP 113
38006: PPUSH
38007: LD_VAR 0 6
38011: PPUSH
38012: LD_EXP 113
38016: PUSH
38017: LD_VAR 0 6
38021: ARRAY
38022: PPUSH
38023: LD_VAR 0 5
38027: PPUSH
38028: CALL_OW 3
38032: PPUSH
38033: CALL_OW 1
38037: ST_TO_ADDR
// end ; end ;
38038: GO 37876
38040: POP
38041: POP
// end ;
38042: LD_VAR 0 4
38046: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38047: LD_INT 0
38049: PPUSH
38050: PPUSH
38051: PPUSH
38052: PPUSH
38053: PPUSH
38054: PPUSH
38055: PPUSH
38056: PPUSH
38057: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38058: LD_VAR 0 1
38062: PPUSH
38063: CALL_OW 264
38067: PUSH
38068: LD_INT 81
38070: EQUAL
38071: NOT
38072: PUSH
38073: LD_VAR 0 1
38077: PUSH
38078: LD_EXP 112
38082: IN
38083: NOT
38084: OR
38085: IFFALSE 38089
// exit ;
38087: GO 38411
// index := GetElementIndex ( minersList , unit ) ;
38089: LD_ADDR_VAR 0 6
38093: PUSH
38094: LD_EXP 112
38098: PPUSH
38099: LD_VAR 0 1
38103: PPUSH
38104: CALL 43583 0 2
38108: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38109: LD_ADDR_VAR 0 8
38113: PUSH
38114: LD_EXP 114
38118: PUSH
38119: LD_EXP 113
38123: PUSH
38124: LD_VAR 0 6
38128: ARRAY
38129: MINUS
38130: ST_TO_ADDR
// if not minesFreeAmount then
38131: LD_VAR 0 8
38135: NOT
38136: IFFALSE 38140
// exit ;
38138: GO 38411
// tmp := [ ] ;
38140: LD_ADDR_VAR 0 7
38144: PUSH
38145: EMPTY
38146: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38147: LD_ADDR_VAR 0 5
38151: PUSH
38152: DOUBLE
38153: LD_INT 1
38155: DEC
38156: ST_TO_ADDR
38157: LD_VAR 0 8
38161: PUSH
38162: FOR_TO
38163: IFFALSE 38358
// begin _d := rand ( 0 , 5 ) ;
38165: LD_ADDR_VAR 0 11
38169: PUSH
38170: LD_INT 0
38172: PPUSH
38173: LD_INT 5
38175: PPUSH
38176: CALL_OW 12
38180: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38181: LD_ADDR_VAR 0 12
38185: PUSH
38186: LD_INT 2
38188: PPUSH
38189: LD_INT 6
38191: PPUSH
38192: CALL_OW 12
38196: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38197: LD_ADDR_VAR 0 9
38201: PUSH
38202: LD_VAR 0 2
38206: PPUSH
38207: LD_VAR 0 11
38211: PPUSH
38212: LD_VAR 0 12
38216: PPUSH
38217: CALL_OW 272
38221: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38222: LD_ADDR_VAR 0 10
38226: PUSH
38227: LD_VAR 0 3
38231: PPUSH
38232: LD_VAR 0 11
38236: PPUSH
38237: LD_VAR 0 12
38241: PPUSH
38242: CALL_OW 273
38246: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38247: LD_VAR 0 9
38251: PPUSH
38252: LD_VAR 0 10
38256: PPUSH
38257: CALL_OW 488
38261: PUSH
38262: LD_VAR 0 9
38266: PUSH
38267: LD_VAR 0 10
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: LD_VAR 0 7
38280: IN
38281: NOT
38282: AND
38283: PUSH
38284: LD_VAR 0 9
38288: PPUSH
38289: LD_VAR 0 10
38293: PPUSH
38294: CALL_OW 458
38298: NOT
38299: AND
38300: IFFALSE 38342
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38302: LD_ADDR_VAR 0 7
38306: PUSH
38307: LD_VAR 0 7
38311: PPUSH
38312: LD_VAR 0 7
38316: PUSH
38317: LD_INT 1
38319: PLUS
38320: PPUSH
38321: LD_VAR 0 9
38325: PUSH
38326: LD_VAR 0 10
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PPUSH
38335: CALL_OW 1
38339: ST_TO_ADDR
38340: GO 38356
// i := i - 1 ;
38342: LD_ADDR_VAR 0 5
38346: PUSH
38347: LD_VAR 0 5
38351: PUSH
38352: LD_INT 1
38354: MINUS
38355: ST_TO_ADDR
// end ;
38356: GO 38162
38358: POP
38359: POP
// for i in tmp do
38360: LD_ADDR_VAR 0 5
38364: PUSH
38365: LD_VAR 0 7
38369: PUSH
38370: FOR_IN
38371: IFFALSE 38409
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38373: LD_VAR 0 1
38377: PPUSH
38378: LD_VAR 0 5
38382: PUSH
38383: LD_INT 1
38385: ARRAY
38386: PPUSH
38387: LD_VAR 0 5
38391: PUSH
38392: LD_INT 2
38394: ARRAY
38395: PPUSH
38396: CALL 37355 0 3
38400: NOT
38401: IFFALSE 38407
// exit ;
38403: POP
38404: POP
38405: GO 38411
38407: GO 38370
38409: POP
38410: POP
// end ;
38411: LD_VAR 0 4
38415: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38416: LD_INT 0
38418: PPUSH
38419: PPUSH
38420: PPUSH
38421: PPUSH
38422: PPUSH
38423: PPUSH
38424: PPUSH
// if not GetClass ( unit ) = class_sniper then
38425: LD_VAR 0 1
38429: PPUSH
38430: CALL_OW 257
38434: PUSH
38435: LD_INT 5
38437: EQUAL
38438: NOT
38439: IFFALSE 38443
// exit ;
38441: GO 38831
// dist := 8 ;
38443: LD_ADDR_VAR 0 5
38447: PUSH
38448: LD_INT 8
38450: ST_TO_ADDR
// viewRange := 12 ;
38451: LD_ADDR_VAR 0 7
38455: PUSH
38456: LD_INT 12
38458: ST_TO_ADDR
// side := GetSide ( unit ) ;
38459: LD_ADDR_VAR 0 6
38463: PUSH
38464: LD_VAR 0 1
38468: PPUSH
38469: CALL_OW 255
38473: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38474: LD_INT 61
38476: PPUSH
38477: LD_VAR 0 6
38481: PPUSH
38482: CALL_OW 321
38486: PUSH
38487: LD_INT 2
38489: EQUAL
38490: IFFALSE 38500
// viewRange := 16 ;
38492: LD_ADDR_VAR 0 7
38496: PUSH
38497: LD_INT 16
38499: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38500: LD_VAR 0 1
38504: PPUSH
38505: LD_VAR 0 2
38509: PPUSH
38510: LD_VAR 0 3
38514: PPUSH
38515: CALL_OW 297
38519: PUSH
38520: LD_VAR 0 5
38524: GREATER
38525: IFFALSE 38604
// begin ComMoveXY ( unit , x , y ) ;
38527: LD_VAR 0 1
38531: PPUSH
38532: LD_VAR 0 2
38536: PPUSH
38537: LD_VAR 0 3
38541: PPUSH
38542: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38546: LD_INT 35
38548: PPUSH
38549: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38553: LD_VAR 0 1
38557: PPUSH
38558: LD_VAR 0 2
38562: PPUSH
38563: LD_VAR 0 3
38567: PPUSH
38568: CALL 74967 0 3
38572: NOT
38573: IFFALSE 38577
// exit ;
38575: GO 38831
// until GetDistUnitXY ( unit , x , y ) < dist ;
38577: LD_VAR 0 1
38581: PPUSH
38582: LD_VAR 0 2
38586: PPUSH
38587: LD_VAR 0 3
38591: PPUSH
38592: CALL_OW 297
38596: PUSH
38597: LD_VAR 0 5
38601: LESS
38602: IFFALSE 38546
// end ; ComTurnXY ( unit , x , y ) ;
38604: LD_VAR 0 1
38608: PPUSH
38609: LD_VAR 0 2
38613: PPUSH
38614: LD_VAR 0 3
38618: PPUSH
38619: CALL_OW 118
// wait ( 5 ) ;
38623: LD_INT 5
38625: PPUSH
38626: CALL_OW 67
// _d := GetDir ( unit ) ;
38630: LD_ADDR_VAR 0 10
38634: PUSH
38635: LD_VAR 0 1
38639: PPUSH
38640: CALL_OW 254
38644: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38645: LD_ADDR_VAR 0 8
38649: PUSH
38650: LD_VAR 0 1
38654: PPUSH
38655: CALL_OW 250
38659: PPUSH
38660: LD_VAR 0 10
38664: PPUSH
38665: LD_VAR 0 5
38669: PPUSH
38670: CALL_OW 272
38674: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38675: LD_ADDR_VAR 0 9
38679: PUSH
38680: LD_VAR 0 1
38684: PPUSH
38685: CALL_OW 251
38689: PPUSH
38690: LD_VAR 0 10
38694: PPUSH
38695: LD_VAR 0 5
38699: PPUSH
38700: CALL_OW 273
38704: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38705: LD_VAR 0 8
38709: PPUSH
38710: LD_VAR 0 9
38714: PPUSH
38715: CALL_OW 488
38719: NOT
38720: IFFALSE 38724
// exit ;
38722: GO 38831
// ComAnimCustom ( unit , 1 ) ;
38724: LD_VAR 0 1
38728: PPUSH
38729: LD_INT 1
38731: PPUSH
38732: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38736: LD_VAR 0 8
38740: PPUSH
38741: LD_VAR 0 9
38745: PPUSH
38746: LD_VAR 0 6
38750: PPUSH
38751: LD_VAR 0 7
38755: PPUSH
38756: CALL_OW 330
// repeat wait ( 1 ) ;
38760: LD_INT 1
38762: PPUSH
38763: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
38767: LD_VAR 0 1
38771: PPUSH
38772: CALL_OW 316
38776: PUSH
38777: LD_VAR 0 1
38781: PPUSH
38782: CALL_OW 314
38786: OR
38787: PUSH
38788: LD_VAR 0 1
38792: PPUSH
38793: CALL_OW 302
38797: NOT
38798: OR
38799: PUSH
38800: LD_VAR 0 1
38804: PPUSH
38805: CALL_OW 301
38809: OR
38810: IFFALSE 38760
// RemoveSeeing ( _x , _y , side ) ;
38812: LD_VAR 0 8
38816: PPUSH
38817: LD_VAR 0 9
38821: PPUSH
38822: LD_VAR 0 6
38826: PPUSH
38827: CALL_OW 331
// end ; end_of_file
38831: LD_VAR 0 4
38835: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38836: LD_INT 0
38838: PPUSH
38839: PPUSH
// if exist_mode then
38840: LD_VAR 0 2
38844: IFFALSE 38869
// unit := CreateCharacter ( prefix & ident ) else
38846: LD_ADDR_VAR 0 5
38850: PUSH
38851: LD_VAR 0 3
38855: PUSH
38856: LD_VAR 0 1
38860: STR
38861: PPUSH
38862: CALL_OW 34
38866: ST_TO_ADDR
38867: GO 38884
// unit := NewCharacter ( ident ) ;
38869: LD_ADDR_VAR 0 5
38873: PUSH
38874: LD_VAR 0 1
38878: PPUSH
38879: CALL_OW 25
38883: ST_TO_ADDR
// result := unit ;
38884: LD_ADDR_VAR 0 4
38888: PUSH
38889: LD_VAR 0 5
38893: ST_TO_ADDR
// end ;
38894: LD_VAR 0 4
38898: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38899: LD_INT 0
38901: PPUSH
38902: PPUSH
// if not side or not nation then
38903: LD_VAR 0 1
38907: NOT
38908: PUSH
38909: LD_VAR 0 2
38913: NOT
38914: OR
38915: IFFALSE 38919
// exit ;
38917: GO 39687
// case nation of nation_american :
38919: LD_VAR 0 2
38923: PUSH
38924: LD_INT 1
38926: DOUBLE
38927: EQUAL
38928: IFTRUE 38932
38930: GO 39146
38932: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38933: LD_ADDR_VAR 0 4
38937: PUSH
38938: LD_INT 35
38940: PUSH
38941: LD_INT 45
38943: PUSH
38944: LD_INT 46
38946: PUSH
38947: LD_INT 47
38949: PUSH
38950: LD_INT 82
38952: PUSH
38953: LD_INT 83
38955: PUSH
38956: LD_INT 84
38958: PUSH
38959: LD_INT 85
38961: PUSH
38962: LD_INT 86
38964: PUSH
38965: LD_INT 1
38967: PUSH
38968: LD_INT 2
38970: PUSH
38971: LD_INT 6
38973: PUSH
38974: LD_INT 15
38976: PUSH
38977: LD_INT 16
38979: PUSH
38980: LD_INT 7
38982: PUSH
38983: LD_INT 12
38985: PUSH
38986: LD_INT 13
38988: PUSH
38989: LD_INT 10
38991: PUSH
38992: LD_INT 14
38994: PUSH
38995: LD_INT 20
38997: PUSH
38998: LD_INT 21
39000: PUSH
39001: LD_INT 22
39003: PUSH
39004: LD_INT 25
39006: PUSH
39007: LD_INT 32
39009: PUSH
39010: LD_INT 27
39012: PUSH
39013: LD_INT 36
39015: PUSH
39016: LD_INT 69
39018: PUSH
39019: LD_INT 39
39021: PUSH
39022: LD_INT 34
39024: PUSH
39025: LD_INT 40
39027: PUSH
39028: LD_INT 48
39030: PUSH
39031: LD_INT 49
39033: PUSH
39034: LD_INT 50
39036: PUSH
39037: LD_INT 51
39039: PUSH
39040: LD_INT 52
39042: PUSH
39043: LD_INT 53
39045: PUSH
39046: LD_INT 54
39048: PUSH
39049: LD_INT 55
39051: PUSH
39052: LD_INT 56
39054: PUSH
39055: LD_INT 57
39057: PUSH
39058: LD_INT 58
39060: PUSH
39061: LD_INT 59
39063: PUSH
39064: LD_INT 60
39066: PUSH
39067: LD_INT 61
39069: PUSH
39070: LD_INT 62
39072: PUSH
39073: LD_INT 80
39075: PUSH
39076: LD_INT 82
39078: PUSH
39079: LD_INT 83
39081: PUSH
39082: LD_INT 84
39084: PUSH
39085: LD_INT 85
39087: PUSH
39088: LD_INT 86
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: ST_TO_ADDR
39144: GO 39611
39146: LD_INT 2
39148: DOUBLE
39149: EQUAL
39150: IFTRUE 39154
39152: GO 39380
39154: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39155: LD_ADDR_VAR 0 4
39159: PUSH
39160: LD_INT 35
39162: PUSH
39163: LD_INT 45
39165: PUSH
39166: LD_INT 46
39168: PUSH
39169: LD_INT 47
39171: PUSH
39172: LD_INT 82
39174: PUSH
39175: LD_INT 83
39177: PUSH
39178: LD_INT 84
39180: PUSH
39181: LD_INT 85
39183: PUSH
39184: LD_INT 87
39186: PUSH
39187: LD_INT 70
39189: PUSH
39190: LD_INT 1
39192: PUSH
39193: LD_INT 11
39195: PUSH
39196: LD_INT 3
39198: PUSH
39199: LD_INT 4
39201: PUSH
39202: LD_INT 5
39204: PUSH
39205: LD_INT 6
39207: PUSH
39208: LD_INT 15
39210: PUSH
39211: LD_INT 18
39213: PUSH
39214: LD_INT 7
39216: PUSH
39217: LD_INT 17
39219: PUSH
39220: LD_INT 8
39222: PUSH
39223: LD_INT 20
39225: PUSH
39226: LD_INT 21
39228: PUSH
39229: LD_INT 22
39231: PUSH
39232: LD_INT 72
39234: PUSH
39235: LD_INT 26
39237: PUSH
39238: LD_INT 69
39240: PUSH
39241: LD_INT 39
39243: PUSH
39244: LD_INT 40
39246: PUSH
39247: LD_INT 41
39249: PUSH
39250: LD_INT 42
39252: PUSH
39253: LD_INT 43
39255: PUSH
39256: LD_INT 48
39258: PUSH
39259: LD_INT 49
39261: PUSH
39262: LD_INT 50
39264: PUSH
39265: LD_INT 51
39267: PUSH
39268: LD_INT 52
39270: PUSH
39271: LD_INT 53
39273: PUSH
39274: LD_INT 54
39276: PUSH
39277: LD_INT 55
39279: PUSH
39280: LD_INT 56
39282: PUSH
39283: LD_INT 60
39285: PUSH
39286: LD_INT 61
39288: PUSH
39289: LD_INT 62
39291: PUSH
39292: LD_INT 66
39294: PUSH
39295: LD_INT 67
39297: PUSH
39298: LD_INT 68
39300: PUSH
39301: LD_INT 81
39303: PUSH
39304: LD_INT 82
39306: PUSH
39307: LD_INT 83
39309: PUSH
39310: LD_INT 84
39312: PUSH
39313: LD_INT 85
39315: PUSH
39316: LD_INT 87
39318: PUSH
39319: LD_INT 88
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: ST_TO_ADDR
39378: GO 39611
39380: LD_INT 3
39382: DOUBLE
39383: EQUAL
39384: IFTRUE 39388
39386: GO 39610
39388: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39389: LD_ADDR_VAR 0 4
39393: PUSH
39394: LD_INT 46
39396: PUSH
39397: LD_INT 47
39399: PUSH
39400: LD_INT 1
39402: PUSH
39403: LD_INT 2
39405: PUSH
39406: LD_INT 82
39408: PUSH
39409: LD_INT 83
39411: PUSH
39412: LD_INT 84
39414: PUSH
39415: LD_INT 85
39417: PUSH
39418: LD_INT 86
39420: PUSH
39421: LD_INT 11
39423: PUSH
39424: LD_INT 9
39426: PUSH
39427: LD_INT 20
39429: PUSH
39430: LD_INT 19
39432: PUSH
39433: LD_INT 21
39435: PUSH
39436: LD_INT 24
39438: PUSH
39439: LD_INT 22
39441: PUSH
39442: LD_INT 25
39444: PUSH
39445: LD_INT 28
39447: PUSH
39448: LD_INT 29
39450: PUSH
39451: LD_INT 30
39453: PUSH
39454: LD_INT 31
39456: PUSH
39457: LD_INT 37
39459: PUSH
39460: LD_INT 38
39462: PUSH
39463: LD_INT 32
39465: PUSH
39466: LD_INT 27
39468: PUSH
39469: LD_INT 33
39471: PUSH
39472: LD_INT 69
39474: PUSH
39475: LD_INT 39
39477: PUSH
39478: LD_INT 34
39480: PUSH
39481: LD_INT 40
39483: PUSH
39484: LD_INT 71
39486: PUSH
39487: LD_INT 23
39489: PUSH
39490: LD_INT 44
39492: PUSH
39493: LD_INT 48
39495: PUSH
39496: LD_INT 49
39498: PUSH
39499: LD_INT 50
39501: PUSH
39502: LD_INT 51
39504: PUSH
39505: LD_INT 52
39507: PUSH
39508: LD_INT 53
39510: PUSH
39511: LD_INT 54
39513: PUSH
39514: LD_INT 55
39516: PUSH
39517: LD_INT 56
39519: PUSH
39520: LD_INT 57
39522: PUSH
39523: LD_INT 58
39525: PUSH
39526: LD_INT 59
39528: PUSH
39529: LD_INT 63
39531: PUSH
39532: LD_INT 64
39534: PUSH
39535: LD_INT 65
39537: PUSH
39538: LD_INT 82
39540: PUSH
39541: LD_INT 83
39543: PUSH
39544: LD_INT 84
39546: PUSH
39547: LD_INT 85
39549: PUSH
39550: LD_INT 86
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: ST_TO_ADDR
39608: GO 39611
39610: POP
// if state > - 1 and state < 3 then
39611: LD_VAR 0 3
39615: PUSH
39616: LD_INT 1
39618: NEG
39619: GREATER
39620: PUSH
39621: LD_VAR 0 3
39625: PUSH
39626: LD_INT 3
39628: LESS
39629: AND
39630: IFFALSE 39687
// for i in result do
39632: LD_ADDR_VAR 0 5
39636: PUSH
39637: LD_VAR 0 4
39641: PUSH
39642: FOR_IN
39643: IFFALSE 39685
// if GetTech ( i , side ) <> state then
39645: LD_VAR 0 5
39649: PPUSH
39650: LD_VAR 0 1
39654: PPUSH
39655: CALL_OW 321
39659: PUSH
39660: LD_VAR 0 3
39664: NONEQUAL
39665: IFFALSE 39683
// result := result diff i ;
39667: LD_ADDR_VAR 0 4
39671: PUSH
39672: LD_VAR 0 4
39676: PUSH
39677: LD_VAR 0 5
39681: DIFF
39682: ST_TO_ADDR
39683: GO 39642
39685: POP
39686: POP
// end ;
39687: LD_VAR 0 4
39691: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39692: LD_INT 0
39694: PPUSH
39695: PPUSH
39696: PPUSH
// result := true ;
39697: LD_ADDR_VAR 0 3
39701: PUSH
39702: LD_INT 1
39704: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39705: LD_ADDR_VAR 0 5
39709: PUSH
39710: LD_VAR 0 2
39714: PPUSH
39715: CALL_OW 480
39719: ST_TO_ADDR
// if not tmp then
39720: LD_VAR 0 5
39724: NOT
39725: IFFALSE 39729
// exit ;
39727: GO 39778
// for i in tmp do
39729: LD_ADDR_VAR 0 4
39733: PUSH
39734: LD_VAR 0 5
39738: PUSH
39739: FOR_IN
39740: IFFALSE 39776
// if GetTech ( i , side ) <> state_researched then
39742: LD_VAR 0 4
39746: PPUSH
39747: LD_VAR 0 1
39751: PPUSH
39752: CALL_OW 321
39756: PUSH
39757: LD_INT 2
39759: NONEQUAL
39760: IFFALSE 39774
// begin result := false ;
39762: LD_ADDR_VAR 0 3
39766: PUSH
39767: LD_INT 0
39769: ST_TO_ADDR
// exit ;
39770: POP
39771: POP
39772: GO 39778
// end ;
39774: GO 39739
39776: POP
39777: POP
// end ;
39778: LD_VAR 0 3
39782: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39783: LD_INT 0
39785: PPUSH
39786: PPUSH
39787: PPUSH
39788: PPUSH
39789: PPUSH
39790: PPUSH
39791: PPUSH
39792: PPUSH
39793: PPUSH
39794: PPUSH
39795: PPUSH
39796: PPUSH
39797: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39798: LD_VAR 0 1
39802: NOT
39803: PUSH
39804: LD_VAR 0 1
39808: PPUSH
39809: CALL_OW 257
39813: PUSH
39814: LD_INT 9
39816: NONEQUAL
39817: OR
39818: IFFALSE 39822
// exit ;
39820: GO 40395
// side := GetSide ( unit ) ;
39822: LD_ADDR_VAR 0 9
39826: PUSH
39827: LD_VAR 0 1
39831: PPUSH
39832: CALL_OW 255
39836: ST_TO_ADDR
// tech_space := tech_spacanom ;
39837: LD_ADDR_VAR 0 12
39841: PUSH
39842: LD_INT 29
39844: ST_TO_ADDR
// tech_time := tech_taurad ;
39845: LD_ADDR_VAR 0 13
39849: PUSH
39850: LD_INT 28
39852: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39853: LD_ADDR_VAR 0 11
39857: PUSH
39858: LD_VAR 0 1
39862: PPUSH
39863: CALL_OW 310
39867: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39868: LD_VAR 0 11
39872: PPUSH
39873: CALL_OW 247
39877: PUSH
39878: LD_INT 2
39880: EQUAL
39881: IFFALSE 39885
// exit ;
39883: GO 40395
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39885: LD_ADDR_VAR 0 8
39889: PUSH
39890: LD_INT 81
39892: PUSH
39893: LD_VAR 0 9
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 3
39904: PUSH
39905: LD_INT 21
39907: PUSH
39908: LD_INT 3
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PPUSH
39923: CALL_OW 69
39927: ST_TO_ADDR
// if not tmp then
39928: LD_VAR 0 8
39932: NOT
39933: IFFALSE 39937
// exit ;
39935: GO 40395
// if in_unit then
39937: LD_VAR 0 11
39941: IFFALSE 39965
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39943: LD_ADDR_VAR 0 10
39947: PUSH
39948: LD_VAR 0 8
39952: PPUSH
39953: LD_VAR 0 11
39957: PPUSH
39958: CALL_OW 74
39962: ST_TO_ADDR
39963: GO 39985
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39965: LD_ADDR_VAR 0 10
39969: PUSH
39970: LD_VAR 0 8
39974: PPUSH
39975: LD_VAR 0 1
39979: PPUSH
39980: CALL_OW 74
39984: ST_TO_ADDR
// if not enemy then
39985: LD_VAR 0 10
39989: NOT
39990: IFFALSE 39994
// exit ;
39992: GO 40395
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39994: LD_VAR 0 11
39998: PUSH
39999: LD_VAR 0 11
40003: PPUSH
40004: LD_VAR 0 10
40008: PPUSH
40009: CALL_OW 296
40013: PUSH
40014: LD_INT 13
40016: GREATER
40017: AND
40018: PUSH
40019: LD_VAR 0 1
40023: PPUSH
40024: LD_VAR 0 10
40028: PPUSH
40029: CALL_OW 296
40033: PUSH
40034: LD_INT 12
40036: GREATER
40037: OR
40038: IFFALSE 40042
// exit ;
40040: GO 40395
// missile := [ 1 ] ;
40042: LD_ADDR_VAR 0 14
40046: PUSH
40047: LD_INT 1
40049: PUSH
40050: EMPTY
40051: LIST
40052: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40053: LD_VAR 0 9
40057: PPUSH
40058: LD_VAR 0 12
40062: PPUSH
40063: CALL_OW 325
40067: IFFALSE 40096
// missile := Replace ( missile , missile + 1 , 2 ) ;
40069: LD_ADDR_VAR 0 14
40073: PUSH
40074: LD_VAR 0 14
40078: PPUSH
40079: LD_VAR 0 14
40083: PUSH
40084: LD_INT 1
40086: PLUS
40087: PPUSH
40088: LD_INT 2
40090: PPUSH
40091: CALL_OW 1
40095: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40096: LD_VAR 0 9
40100: PPUSH
40101: LD_VAR 0 13
40105: PPUSH
40106: CALL_OW 325
40110: PUSH
40111: LD_VAR 0 10
40115: PPUSH
40116: CALL_OW 255
40120: PPUSH
40121: LD_VAR 0 13
40125: PPUSH
40126: CALL_OW 325
40130: NOT
40131: AND
40132: IFFALSE 40161
// missile := Replace ( missile , missile + 1 , 3 ) ;
40134: LD_ADDR_VAR 0 14
40138: PUSH
40139: LD_VAR 0 14
40143: PPUSH
40144: LD_VAR 0 14
40148: PUSH
40149: LD_INT 1
40151: PLUS
40152: PPUSH
40153: LD_INT 3
40155: PPUSH
40156: CALL_OW 1
40160: ST_TO_ADDR
// if missile < 2 then
40161: LD_VAR 0 14
40165: PUSH
40166: LD_INT 2
40168: LESS
40169: IFFALSE 40173
// exit ;
40171: GO 40395
// x := GetX ( enemy ) ;
40173: LD_ADDR_VAR 0 4
40177: PUSH
40178: LD_VAR 0 10
40182: PPUSH
40183: CALL_OW 250
40187: ST_TO_ADDR
// y := GetY ( enemy ) ;
40188: LD_ADDR_VAR 0 5
40192: PUSH
40193: LD_VAR 0 10
40197: PPUSH
40198: CALL_OW 251
40202: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40203: LD_ADDR_VAR 0 6
40207: PUSH
40208: LD_VAR 0 4
40212: PUSH
40213: LD_INT 1
40215: NEG
40216: PPUSH
40217: LD_INT 1
40219: PPUSH
40220: CALL_OW 12
40224: PLUS
40225: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40226: LD_ADDR_VAR 0 7
40230: PUSH
40231: LD_VAR 0 5
40235: PUSH
40236: LD_INT 1
40238: NEG
40239: PPUSH
40240: LD_INT 1
40242: PPUSH
40243: CALL_OW 12
40247: PLUS
40248: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40249: LD_VAR 0 6
40253: PPUSH
40254: LD_VAR 0 7
40258: PPUSH
40259: CALL_OW 488
40263: NOT
40264: IFFALSE 40286
// begin _x := x ;
40266: LD_ADDR_VAR 0 6
40270: PUSH
40271: LD_VAR 0 4
40275: ST_TO_ADDR
// _y := y ;
40276: LD_ADDR_VAR 0 7
40280: PUSH
40281: LD_VAR 0 5
40285: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40286: LD_ADDR_VAR 0 3
40290: PUSH
40291: LD_INT 1
40293: PPUSH
40294: LD_VAR 0 14
40298: PPUSH
40299: CALL_OW 12
40303: ST_TO_ADDR
// case i of 1 :
40304: LD_VAR 0 3
40308: PUSH
40309: LD_INT 1
40311: DOUBLE
40312: EQUAL
40313: IFTRUE 40317
40315: GO 40334
40317: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40318: LD_VAR 0 1
40322: PPUSH
40323: LD_VAR 0 10
40327: PPUSH
40328: CALL_OW 115
40332: GO 40395
40334: LD_INT 2
40336: DOUBLE
40337: EQUAL
40338: IFTRUE 40342
40340: GO 40364
40342: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40343: LD_VAR 0 1
40347: PPUSH
40348: LD_VAR 0 6
40352: PPUSH
40353: LD_VAR 0 7
40357: PPUSH
40358: CALL_OW 153
40362: GO 40395
40364: LD_INT 3
40366: DOUBLE
40367: EQUAL
40368: IFTRUE 40372
40370: GO 40394
40372: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40373: LD_VAR 0 1
40377: PPUSH
40378: LD_VAR 0 6
40382: PPUSH
40383: LD_VAR 0 7
40387: PPUSH
40388: CALL_OW 154
40392: GO 40395
40394: POP
// end ;
40395: LD_VAR 0 2
40399: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40400: LD_INT 0
40402: PPUSH
40403: PPUSH
40404: PPUSH
40405: PPUSH
40406: PPUSH
40407: PPUSH
// if not unit or not building then
40408: LD_VAR 0 1
40412: NOT
40413: PUSH
40414: LD_VAR 0 2
40418: NOT
40419: OR
40420: IFFALSE 40424
// exit ;
40422: GO 40582
// x := GetX ( building ) ;
40424: LD_ADDR_VAR 0 5
40428: PUSH
40429: LD_VAR 0 2
40433: PPUSH
40434: CALL_OW 250
40438: ST_TO_ADDR
// y := GetY ( building ) ;
40439: LD_ADDR_VAR 0 6
40443: PUSH
40444: LD_VAR 0 2
40448: PPUSH
40449: CALL_OW 251
40453: ST_TO_ADDR
// for i = 0 to 5 do
40454: LD_ADDR_VAR 0 4
40458: PUSH
40459: DOUBLE
40460: LD_INT 0
40462: DEC
40463: ST_TO_ADDR
40464: LD_INT 5
40466: PUSH
40467: FOR_TO
40468: IFFALSE 40580
// begin _x := ShiftX ( x , i , 3 ) ;
40470: LD_ADDR_VAR 0 7
40474: PUSH
40475: LD_VAR 0 5
40479: PPUSH
40480: LD_VAR 0 4
40484: PPUSH
40485: LD_INT 3
40487: PPUSH
40488: CALL_OW 272
40492: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40493: LD_ADDR_VAR 0 8
40497: PUSH
40498: LD_VAR 0 6
40502: PPUSH
40503: LD_VAR 0 4
40507: PPUSH
40508: LD_INT 3
40510: PPUSH
40511: CALL_OW 273
40515: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40516: LD_VAR 0 7
40520: PPUSH
40521: LD_VAR 0 8
40525: PPUSH
40526: CALL_OW 488
40530: NOT
40531: IFFALSE 40535
// continue ;
40533: GO 40467
// if HexInfo ( _x , _y ) = 0 then
40535: LD_VAR 0 7
40539: PPUSH
40540: LD_VAR 0 8
40544: PPUSH
40545: CALL_OW 428
40549: PUSH
40550: LD_INT 0
40552: EQUAL
40553: IFFALSE 40578
// begin ComMoveXY ( unit , _x , _y ) ;
40555: LD_VAR 0 1
40559: PPUSH
40560: LD_VAR 0 7
40564: PPUSH
40565: LD_VAR 0 8
40569: PPUSH
40570: CALL_OW 111
// exit ;
40574: POP
40575: POP
40576: GO 40582
// end ; end ;
40578: GO 40467
40580: POP
40581: POP
// end ;
40582: LD_VAR 0 3
40586: RET
// export function ScanBase ( side , base_area ) ; begin
40587: LD_INT 0
40589: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40590: LD_ADDR_VAR 0 3
40594: PUSH
40595: LD_VAR 0 2
40599: PPUSH
40600: LD_INT 81
40602: PUSH
40603: LD_VAR 0 1
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PPUSH
40612: CALL_OW 70
40616: ST_TO_ADDR
// end ;
40617: LD_VAR 0 3
40621: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40622: LD_INT 0
40624: PPUSH
40625: PPUSH
40626: PPUSH
40627: PPUSH
// result := false ;
40628: LD_ADDR_VAR 0 2
40632: PUSH
40633: LD_INT 0
40635: ST_TO_ADDR
// side := GetSide ( unit ) ;
40636: LD_ADDR_VAR 0 3
40640: PUSH
40641: LD_VAR 0 1
40645: PPUSH
40646: CALL_OW 255
40650: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40651: LD_ADDR_VAR 0 4
40655: PUSH
40656: LD_VAR 0 1
40660: PPUSH
40661: CALL_OW 248
40665: ST_TO_ADDR
// case nat of 1 :
40666: LD_VAR 0 4
40670: PUSH
40671: LD_INT 1
40673: DOUBLE
40674: EQUAL
40675: IFTRUE 40679
40677: GO 40690
40679: POP
// tech := tech_lassight ; 2 :
40680: LD_ADDR_VAR 0 5
40684: PUSH
40685: LD_INT 12
40687: ST_TO_ADDR
40688: GO 40729
40690: LD_INT 2
40692: DOUBLE
40693: EQUAL
40694: IFTRUE 40698
40696: GO 40709
40698: POP
// tech := tech_mortar ; 3 :
40699: LD_ADDR_VAR 0 5
40703: PUSH
40704: LD_INT 41
40706: ST_TO_ADDR
40707: GO 40729
40709: LD_INT 3
40711: DOUBLE
40712: EQUAL
40713: IFTRUE 40717
40715: GO 40728
40717: POP
// tech := tech_bazooka ; end ;
40718: LD_ADDR_VAR 0 5
40722: PUSH
40723: LD_INT 44
40725: ST_TO_ADDR
40726: GO 40729
40728: POP
// if Researched ( side , tech ) then
40729: LD_VAR 0 3
40733: PPUSH
40734: LD_VAR 0 5
40738: PPUSH
40739: CALL_OW 325
40743: IFFALSE 40770
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40745: LD_ADDR_VAR 0 2
40749: PUSH
40750: LD_INT 5
40752: PUSH
40753: LD_INT 8
40755: PUSH
40756: LD_INT 9
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: LIST
40763: PUSH
40764: LD_VAR 0 4
40768: ARRAY
40769: ST_TO_ADDR
// end ;
40770: LD_VAR 0 2
40774: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40775: LD_INT 0
40777: PPUSH
40778: PPUSH
40779: PPUSH
// if not mines then
40780: LD_VAR 0 2
40784: NOT
40785: IFFALSE 40789
// exit ;
40787: GO 40933
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40789: LD_ADDR_VAR 0 5
40793: PUSH
40794: LD_INT 81
40796: PUSH
40797: LD_VAR 0 1
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 3
40808: PUSH
40809: LD_INT 21
40811: PUSH
40812: LD_INT 3
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PPUSH
40827: CALL_OW 69
40831: ST_TO_ADDR
// for i in mines do
40832: LD_ADDR_VAR 0 4
40836: PUSH
40837: LD_VAR 0 2
40841: PUSH
40842: FOR_IN
40843: IFFALSE 40931
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40845: LD_VAR 0 4
40849: PUSH
40850: LD_INT 1
40852: ARRAY
40853: PPUSH
40854: LD_VAR 0 4
40858: PUSH
40859: LD_INT 2
40861: ARRAY
40862: PPUSH
40863: CALL_OW 458
40867: NOT
40868: IFFALSE 40872
// continue ;
40870: GO 40842
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40872: LD_VAR 0 4
40876: PUSH
40877: LD_INT 1
40879: ARRAY
40880: PPUSH
40881: LD_VAR 0 4
40885: PUSH
40886: LD_INT 2
40888: ARRAY
40889: PPUSH
40890: CALL_OW 428
40894: PUSH
40895: LD_VAR 0 5
40899: IN
40900: IFFALSE 40929
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40902: LD_VAR 0 4
40906: PUSH
40907: LD_INT 1
40909: ARRAY
40910: PPUSH
40911: LD_VAR 0 4
40915: PUSH
40916: LD_INT 2
40918: ARRAY
40919: PPUSH
40920: LD_VAR 0 1
40924: PPUSH
40925: CALL_OW 456
// end ;
40929: GO 40842
40931: POP
40932: POP
// end ;
40933: LD_VAR 0 3
40937: RET
// export function Count ( array ) ; begin
40938: LD_INT 0
40940: PPUSH
// result := array + 0 ;
40941: LD_ADDR_VAR 0 2
40945: PUSH
40946: LD_VAR 0 1
40950: PUSH
40951: LD_INT 0
40953: PLUS
40954: ST_TO_ADDR
// end ;
40955: LD_VAR 0 2
40959: RET
// export function IsEmpty ( building ) ; begin
40960: LD_INT 0
40962: PPUSH
// if not building then
40963: LD_VAR 0 1
40967: NOT
40968: IFFALSE 40972
// exit ;
40970: GO 41015
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40972: LD_ADDR_VAR 0 2
40976: PUSH
40977: LD_VAR 0 1
40981: PUSH
40982: LD_INT 22
40984: PUSH
40985: LD_VAR 0 1
40989: PPUSH
40990: CALL_OW 255
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 58
41001: PUSH
41002: EMPTY
41003: LIST
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PPUSH
41009: CALL_OW 69
41013: IN
41014: ST_TO_ADDR
// end ;
41015: LD_VAR 0 2
41019: RET
// export function IsNotFull ( building ) ; var places ; begin
41020: LD_INT 0
41022: PPUSH
41023: PPUSH
// if not building then
41024: LD_VAR 0 1
41028: NOT
41029: IFFALSE 41033
// exit ;
41031: GO 41061
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
41033: LD_ADDR_VAR 0 2
41037: PUSH
41038: LD_VAR 0 1
41042: PPUSH
41043: LD_INT 3
41045: PUSH
41046: LD_INT 62
41048: PUSH
41049: EMPTY
41050: LIST
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PPUSH
41056: CALL_OW 72
41060: ST_TO_ADDR
// end ;
41061: LD_VAR 0 2
41065: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41066: LD_INT 0
41068: PPUSH
41069: PPUSH
41070: PPUSH
41071: PPUSH
// tmp := [ ] ;
41072: LD_ADDR_VAR 0 3
41076: PUSH
41077: EMPTY
41078: ST_TO_ADDR
// list := [ ] ;
41079: LD_ADDR_VAR 0 5
41083: PUSH
41084: EMPTY
41085: ST_TO_ADDR
// for i = 16 to 25 do
41086: LD_ADDR_VAR 0 4
41090: PUSH
41091: DOUBLE
41092: LD_INT 16
41094: DEC
41095: ST_TO_ADDR
41096: LD_INT 25
41098: PUSH
41099: FOR_TO
41100: IFFALSE 41173
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41102: LD_ADDR_VAR 0 3
41106: PUSH
41107: LD_VAR 0 3
41111: PUSH
41112: LD_INT 22
41114: PUSH
41115: LD_VAR 0 1
41119: PPUSH
41120: CALL_OW 255
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 91
41131: PUSH
41132: LD_VAR 0 1
41136: PUSH
41137: LD_INT 6
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 30
41147: PUSH
41148: LD_VAR 0 4
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: LIST
41161: PUSH
41162: EMPTY
41163: LIST
41164: PPUSH
41165: CALL_OW 69
41169: ADD
41170: ST_TO_ADDR
41171: GO 41099
41173: POP
41174: POP
// for i = 1 to tmp do
41175: LD_ADDR_VAR 0 4
41179: PUSH
41180: DOUBLE
41181: LD_INT 1
41183: DEC
41184: ST_TO_ADDR
41185: LD_VAR 0 3
41189: PUSH
41190: FOR_TO
41191: IFFALSE 41279
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41193: LD_ADDR_VAR 0 5
41197: PUSH
41198: LD_VAR 0 5
41202: PUSH
41203: LD_VAR 0 3
41207: PUSH
41208: LD_VAR 0 4
41212: ARRAY
41213: PPUSH
41214: CALL_OW 266
41218: PUSH
41219: LD_VAR 0 3
41223: PUSH
41224: LD_VAR 0 4
41228: ARRAY
41229: PPUSH
41230: CALL_OW 250
41234: PUSH
41235: LD_VAR 0 3
41239: PUSH
41240: LD_VAR 0 4
41244: ARRAY
41245: PPUSH
41246: CALL_OW 251
41250: PUSH
41251: LD_VAR 0 3
41255: PUSH
41256: LD_VAR 0 4
41260: ARRAY
41261: PPUSH
41262: CALL_OW 254
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: PUSH
41273: EMPTY
41274: LIST
41275: ADD
41276: ST_TO_ADDR
41277: GO 41190
41279: POP
41280: POP
// result := list ;
41281: LD_ADDR_VAR 0 2
41285: PUSH
41286: LD_VAR 0 5
41290: ST_TO_ADDR
// end ;
41291: LD_VAR 0 2
41295: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41296: LD_INT 0
41298: PPUSH
41299: PPUSH
41300: PPUSH
41301: PPUSH
41302: PPUSH
41303: PPUSH
41304: PPUSH
// if not factory then
41305: LD_VAR 0 1
41309: NOT
41310: IFFALSE 41314
// exit ;
41312: GO 41907
// if control = control_apeman then
41314: LD_VAR 0 4
41318: PUSH
41319: LD_INT 5
41321: EQUAL
41322: IFFALSE 41431
// begin tmp := UnitsInside ( factory ) ;
41324: LD_ADDR_VAR 0 8
41328: PUSH
41329: LD_VAR 0 1
41333: PPUSH
41334: CALL_OW 313
41338: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41339: LD_VAR 0 8
41343: PPUSH
41344: LD_INT 25
41346: PUSH
41347: LD_INT 12
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PPUSH
41354: CALL_OW 72
41358: NOT
41359: IFFALSE 41369
// control := control_manual ;
41361: LD_ADDR_VAR 0 4
41365: PUSH
41366: LD_INT 1
41368: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41369: LD_ADDR_VAR 0 8
41373: PUSH
41374: LD_VAR 0 1
41378: PPUSH
41379: CALL 41066 0 1
41383: ST_TO_ADDR
// if tmp then
41384: LD_VAR 0 8
41388: IFFALSE 41431
// begin for i in tmp do
41390: LD_ADDR_VAR 0 7
41394: PUSH
41395: LD_VAR 0 8
41399: PUSH
41400: FOR_IN
41401: IFFALSE 41429
// if i [ 1 ] = b_ext_radio then
41403: LD_VAR 0 7
41407: PUSH
41408: LD_INT 1
41410: ARRAY
41411: PUSH
41412: LD_INT 22
41414: EQUAL
41415: IFFALSE 41427
// begin control := control_remote ;
41417: LD_ADDR_VAR 0 4
41421: PUSH
41422: LD_INT 2
41424: ST_TO_ADDR
// break ;
41425: GO 41429
// end ;
41427: GO 41400
41429: POP
41430: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41431: LD_VAR 0 1
41435: PPUSH
41436: LD_VAR 0 2
41440: PPUSH
41441: LD_VAR 0 3
41445: PPUSH
41446: LD_VAR 0 4
41450: PPUSH
41451: LD_VAR 0 5
41455: PPUSH
41456: CALL_OW 448
41460: IFFALSE 41495
// begin result := [ chassis , engine , control , weapon ] ;
41462: LD_ADDR_VAR 0 6
41466: PUSH
41467: LD_VAR 0 2
41471: PUSH
41472: LD_VAR 0 3
41476: PUSH
41477: LD_VAR 0 4
41481: PUSH
41482: LD_VAR 0 5
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: ST_TO_ADDR
// exit ;
41493: GO 41907
// end ; _chassis := AvailableChassisList ( factory ) ;
41495: LD_ADDR_VAR 0 9
41499: PUSH
41500: LD_VAR 0 1
41504: PPUSH
41505: CALL_OW 475
41509: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41510: LD_ADDR_VAR 0 11
41514: PUSH
41515: LD_VAR 0 1
41519: PPUSH
41520: CALL_OW 476
41524: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41525: LD_ADDR_VAR 0 12
41529: PUSH
41530: LD_VAR 0 1
41534: PPUSH
41535: CALL_OW 477
41539: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41540: LD_ADDR_VAR 0 10
41544: PUSH
41545: LD_VAR 0 1
41549: PPUSH
41550: CALL_OW 478
41554: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41555: LD_VAR 0 9
41559: NOT
41560: PUSH
41561: LD_VAR 0 11
41565: NOT
41566: OR
41567: PUSH
41568: LD_VAR 0 12
41572: NOT
41573: OR
41574: PUSH
41575: LD_VAR 0 10
41579: NOT
41580: OR
41581: IFFALSE 41616
// begin result := [ chassis , engine , control , weapon ] ;
41583: LD_ADDR_VAR 0 6
41587: PUSH
41588: LD_VAR 0 2
41592: PUSH
41593: LD_VAR 0 3
41597: PUSH
41598: LD_VAR 0 4
41602: PUSH
41603: LD_VAR 0 5
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: ST_TO_ADDR
// exit ;
41614: GO 41907
// end ; if not chassis in _chassis then
41616: LD_VAR 0 2
41620: PUSH
41621: LD_VAR 0 9
41625: IN
41626: NOT
41627: IFFALSE 41653
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41629: LD_ADDR_VAR 0 2
41633: PUSH
41634: LD_VAR 0 9
41638: PUSH
41639: LD_INT 1
41641: PPUSH
41642: LD_VAR 0 9
41646: PPUSH
41647: CALL_OW 12
41651: ARRAY
41652: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41653: LD_VAR 0 2
41657: PPUSH
41658: LD_VAR 0 3
41662: PPUSH
41663: CALL 41912 0 2
41667: NOT
41668: IFFALSE 41727
// repeat engine := _engine [ 1 ] ;
41670: LD_ADDR_VAR 0 3
41674: PUSH
41675: LD_VAR 0 11
41679: PUSH
41680: LD_INT 1
41682: ARRAY
41683: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41684: LD_ADDR_VAR 0 11
41688: PUSH
41689: LD_VAR 0 11
41693: PPUSH
41694: LD_INT 1
41696: PPUSH
41697: CALL_OW 3
41701: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41702: LD_VAR 0 2
41706: PPUSH
41707: LD_VAR 0 3
41711: PPUSH
41712: CALL 41912 0 2
41716: PUSH
41717: LD_VAR 0 11
41721: PUSH
41722: EMPTY
41723: EQUAL
41724: OR
41725: IFFALSE 41670
// if not control in _control then
41727: LD_VAR 0 4
41731: PUSH
41732: LD_VAR 0 12
41736: IN
41737: NOT
41738: IFFALSE 41764
// control := _control [ rand ( 1 , _control ) ] ;
41740: LD_ADDR_VAR 0 4
41744: PUSH
41745: LD_VAR 0 12
41749: PUSH
41750: LD_INT 1
41752: PPUSH
41753: LD_VAR 0 12
41757: PPUSH
41758: CALL_OW 12
41762: ARRAY
41763: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41764: LD_VAR 0 2
41768: PPUSH
41769: LD_VAR 0 5
41773: PPUSH
41774: CALL 42132 0 2
41778: NOT
41779: IFFALSE 41838
// repeat weapon := _weapon [ 1 ] ;
41781: LD_ADDR_VAR 0 5
41785: PUSH
41786: LD_VAR 0 10
41790: PUSH
41791: LD_INT 1
41793: ARRAY
41794: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41795: LD_ADDR_VAR 0 10
41799: PUSH
41800: LD_VAR 0 10
41804: PPUSH
41805: LD_INT 1
41807: PPUSH
41808: CALL_OW 3
41812: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41813: LD_VAR 0 2
41817: PPUSH
41818: LD_VAR 0 5
41822: PPUSH
41823: CALL 42132 0 2
41827: PUSH
41828: LD_VAR 0 10
41832: PUSH
41833: EMPTY
41834: EQUAL
41835: OR
41836: IFFALSE 41781
// result := [ ] ;
41838: LD_ADDR_VAR 0 6
41842: PUSH
41843: EMPTY
41844: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41845: LD_VAR 0 1
41849: PPUSH
41850: LD_VAR 0 2
41854: PPUSH
41855: LD_VAR 0 3
41859: PPUSH
41860: LD_VAR 0 4
41864: PPUSH
41865: LD_VAR 0 5
41869: PPUSH
41870: CALL_OW 448
41874: IFFALSE 41907
// result := [ chassis , engine , control , weapon ] ;
41876: LD_ADDR_VAR 0 6
41880: PUSH
41881: LD_VAR 0 2
41885: PUSH
41886: LD_VAR 0 3
41890: PUSH
41891: LD_VAR 0 4
41895: PUSH
41896: LD_VAR 0 5
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: ST_TO_ADDR
// end ;
41907: LD_VAR 0 6
41911: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41912: LD_INT 0
41914: PPUSH
// if not chassis or not engine then
41915: LD_VAR 0 1
41919: NOT
41920: PUSH
41921: LD_VAR 0 2
41925: NOT
41926: OR
41927: IFFALSE 41931
// exit ;
41929: GO 42127
// case engine of engine_solar :
41931: LD_VAR 0 2
41935: PUSH
41936: LD_INT 2
41938: DOUBLE
41939: EQUAL
41940: IFTRUE 41944
41942: GO 41982
41944: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41945: LD_ADDR_VAR 0 3
41949: PUSH
41950: LD_INT 11
41952: PUSH
41953: LD_INT 12
41955: PUSH
41956: LD_INT 13
41958: PUSH
41959: LD_INT 14
41961: PUSH
41962: LD_INT 1
41964: PUSH
41965: LD_INT 2
41967: PUSH
41968: LD_INT 3
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: ST_TO_ADDR
41980: GO 42111
41982: LD_INT 1
41984: DOUBLE
41985: EQUAL
41986: IFTRUE 41990
41988: GO 42052
41990: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41991: LD_ADDR_VAR 0 3
41995: PUSH
41996: LD_INT 11
41998: PUSH
41999: LD_INT 12
42001: PUSH
42002: LD_INT 13
42004: PUSH
42005: LD_INT 14
42007: PUSH
42008: LD_INT 1
42010: PUSH
42011: LD_INT 2
42013: PUSH
42014: LD_INT 3
42016: PUSH
42017: LD_INT 4
42019: PUSH
42020: LD_INT 5
42022: PUSH
42023: LD_INT 21
42025: PUSH
42026: LD_INT 23
42028: PUSH
42029: LD_INT 22
42031: PUSH
42032: LD_INT 24
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: ST_TO_ADDR
42050: GO 42111
42052: LD_INT 3
42054: DOUBLE
42055: EQUAL
42056: IFTRUE 42060
42058: GO 42110
42060: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42061: LD_ADDR_VAR 0 3
42065: PUSH
42066: LD_INT 13
42068: PUSH
42069: LD_INT 14
42071: PUSH
42072: LD_INT 2
42074: PUSH
42075: LD_INT 3
42077: PUSH
42078: LD_INT 4
42080: PUSH
42081: LD_INT 5
42083: PUSH
42084: LD_INT 21
42086: PUSH
42087: LD_INT 22
42089: PUSH
42090: LD_INT 23
42092: PUSH
42093: LD_INT 24
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: ST_TO_ADDR
42108: GO 42111
42110: POP
// result := ( chassis in result ) ;
42111: LD_ADDR_VAR 0 3
42115: PUSH
42116: LD_VAR 0 1
42120: PUSH
42121: LD_VAR 0 3
42125: IN
42126: ST_TO_ADDR
// end ;
42127: LD_VAR 0 3
42131: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42132: LD_INT 0
42134: PPUSH
// if not chassis or not weapon then
42135: LD_VAR 0 1
42139: NOT
42140: PUSH
42141: LD_VAR 0 2
42145: NOT
42146: OR
42147: IFFALSE 42151
// exit ;
42149: GO 43211
// case weapon of us_machine_gun :
42151: LD_VAR 0 2
42155: PUSH
42156: LD_INT 2
42158: DOUBLE
42159: EQUAL
42160: IFTRUE 42164
42162: GO 42194
42164: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42165: LD_ADDR_VAR 0 3
42169: PUSH
42170: LD_INT 1
42172: PUSH
42173: LD_INT 2
42175: PUSH
42176: LD_INT 3
42178: PUSH
42179: LD_INT 4
42181: PUSH
42182: LD_INT 5
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: ST_TO_ADDR
42192: GO 43195
42194: LD_INT 3
42196: DOUBLE
42197: EQUAL
42198: IFTRUE 42202
42200: GO 42232
42202: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42203: LD_ADDR_VAR 0 3
42207: PUSH
42208: LD_INT 1
42210: PUSH
42211: LD_INT 2
42213: PUSH
42214: LD_INT 3
42216: PUSH
42217: LD_INT 4
42219: PUSH
42220: LD_INT 5
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: ST_TO_ADDR
42230: GO 43195
42232: LD_INT 11
42234: DOUBLE
42235: EQUAL
42236: IFTRUE 42240
42238: GO 42270
42240: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42241: LD_ADDR_VAR 0 3
42245: PUSH
42246: LD_INT 1
42248: PUSH
42249: LD_INT 2
42251: PUSH
42252: LD_INT 3
42254: PUSH
42255: LD_INT 4
42257: PUSH
42258: LD_INT 5
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: ST_TO_ADDR
42268: GO 43195
42270: LD_INT 4
42272: DOUBLE
42273: EQUAL
42274: IFTRUE 42278
42276: GO 42304
42278: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42279: LD_ADDR_VAR 0 3
42283: PUSH
42284: LD_INT 2
42286: PUSH
42287: LD_INT 3
42289: PUSH
42290: LD_INT 4
42292: PUSH
42293: LD_INT 5
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: ST_TO_ADDR
42302: GO 43195
42304: LD_INT 5
42306: DOUBLE
42307: EQUAL
42308: IFTRUE 42312
42310: GO 42338
42312: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42313: LD_ADDR_VAR 0 3
42317: PUSH
42318: LD_INT 2
42320: PUSH
42321: LD_INT 3
42323: PUSH
42324: LD_INT 4
42326: PUSH
42327: LD_INT 5
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: ST_TO_ADDR
42336: GO 43195
42338: LD_INT 9
42340: DOUBLE
42341: EQUAL
42342: IFTRUE 42346
42344: GO 42372
42346: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42347: LD_ADDR_VAR 0 3
42351: PUSH
42352: LD_INT 2
42354: PUSH
42355: LD_INT 3
42357: PUSH
42358: LD_INT 4
42360: PUSH
42361: LD_INT 5
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: ST_TO_ADDR
42370: GO 43195
42372: LD_INT 7
42374: DOUBLE
42375: EQUAL
42376: IFTRUE 42380
42378: GO 42406
42380: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42381: LD_ADDR_VAR 0 3
42385: PUSH
42386: LD_INT 2
42388: PUSH
42389: LD_INT 3
42391: PUSH
42392: LD_INT 4
42394: PUSH
42395: LD_INT 5
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: ST_TO_ADDR
42404: GO 43195
42406: LD_INT 12
42408: DOUBLE
42409: EQUAL
42410: IFTRUE 42414
42412: GO 42440
42414: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42415: LD_ADDR_VAR 0 3
42419: PUSH
42420: LD_INT 2
42422: PUSH
42423: LD_INT 3
42425: PUSH
42426: LD_INT 4
42428: PUSH
42429: LD_INT 5
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: ST_TO_ADDR
42438: GO 43195
42440: LD_INT 13
42442: DOUBLE
42443: EQUAL
42444: IFTRUE 42448
42446: GO 42474
42448: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42449: LD_ADDR_VAR 0 3
42453: PUSH
42454: LD_INT 2
42456: PUSH
42457: LD_INT 3
42459: PUSH
42460: LD_INT 4
42462: PUSH
42463: LD_INT 5
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: ST_TO_ADDR
42472: GO 43195
42474: LD_INT 14
42476: DOUBLE
42477: EQUAL
42478: IFTRUE 42482
42480: GO 42500
42482: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42483: LD_ADDR_VAR 0 3
42487: PUSH
42488: LD_INT 4
42490: PUSH
42491: LD_INT 5
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: ST_TO_ADDR
42498: GO 43195
42500: LD_INT 6
42502: DOUBLE
42503: EQUAL
42504: IFTRUE 42508
42506: GO 42526
42508: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42509: LD_ADDR_VAR 0 3
42513: PUSH
42514: LD_INT 4
42516: PUSH
42517: LD_INT 5
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: ST_TO_ADDR
42524: GO 43195
42526: LD_INT 10
42528: DOUBLE
42529: EQUAL
42530: IFTRUE 42534
42532: GO 42552
42534: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42535: LD_ADDR_VAR 0 3
42539: PUSH
42540: LD_INT 4
42542: PUSH
42543: LD_INT 5
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: ST_TO_ADDR
42550: GO 43195
42552: LD_INT 22
42554: DOUBLE
42555: EQUAL
42556: IFTRUE 42560
42558: GO 42586
42560: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42561: LD_ADDR_VAR 0 3
42565: PUSH
42566: LD_INT 11
42568: PUSH
42569: LD_INT 12
42571: PUSH
42572: LD_INT 13
42574: PUSH
42575: LD_INT 14
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: ST_TO_ADDR
42584: GO 43195
42586: LD_INT 23
42588: DOUBLE
42589: EQUAL
42590: IFTRUE 42594
42592: GO 42620
42594: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42595: LD_ADDR_VAR 0 3
42599: PUSH
42600: LD_INT 11
42602: PUSH
42603: LD_INT 12
42605: PUSH
42606: LD_INT 13
42608: PUSH
42609: LD_INT 14
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: ST_TO_ADDR
42618: GO 43195
42620: LD_INT 24
42622: DOUBLE
42623: EQUAL
42624: IFTRUE 42628
42626: GO 42654
42628: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42629: LD_ADDR_VAR 0 3
42633: PUSH
42634: LD_INT 11
42636: PUSH
42637: LD_INT 12
42639: PUSH
42640: LD_INT 13
42642: PUSH
42643: LD_INT 14
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: ST_TO_ADDR
42652: GO 43195
42654: LD_INT 30
42656: DOUBLE
42657: EQUAL
42658: IFTRUE 42662
42660: GO 42688
42662: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42663: LD_ADDR_VAR 0 3
42667: PUSH
42668: LD_INT 11
42670: PUSH
42671: LD_INT 12
42673: PUSH
42674: LD_INT 13
42676: PUSH
42677: LD_INT 14
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: ST_TO_ADDR
42686: GO 43195
42688: LD_INT 25
42690: DOUBLE
42691: EQUAL
42692: IFTRUE 42696
42694: GO 42714
42696: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42697: LD_ADDR_VAR 0 3
42701: PUSH
42702: LD_INT 13
42704: PUSH
42705: LD_INT 14
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: ST_TO_ADDR
42712: GO 43195
42714: LD_INT 27
42716: DOUBLE
42717: EQUAL
42718: IFTRUE 42722
42720: GO 42740
42722: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42723: LD_ADDR_VAR 0 3
42727: PUSH
42728: LD_INT 13
42730: PUSH
42731: LD_INT 14
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: ST_TO_ADDR
42738: GO 43195
42740: LD_INT 92
42742: DOUBLE
42743: EQUAL
42744: IFTRUE 42748
42746: GO 42774
42748: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42749: LD_ADDR_VAR 0 3
42753: PUSH
42754: LD_INT 11
42756: PUSH
42757: LD_INT 12
42759: PUSH
42760: LD_INT 13
42762: PUSH
42763: LD_INT 14
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: ST_TO_ADDR
42772: GO 43195
42774: LD_INT 28
42776: DOUBLE
42777: EQUAL
42778: IFTRUE 42782
42780: GO 42800
42782: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42783: LD_ADDR_VAR 0 3
42787: PUSH
42788: LD_INT 13
42790: PUSH
42791: LD_INT 14
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: ST_TO_ADDR
42798: GO 43195
42800: LD_INT 29
42802: DOUBLE
42803: EQUAL
42804: IFTRUE 42808
42806: GO 42826
42808: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42809: LD_ADDR_VAR 0 3
42813: PUSH
42814: LD_INT 13
42816: PUSH
42817: LD_INT 14
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: ST_TO_ADDR
42824: GO 43195
42826: LD_INT 31
42828: DOUBLE
42829: EQUAL
42830: IFTRUE 42834
42832: GO 42852
42834: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42835: LD_ADDR_VAR 0 3
42839: PUSH
42840: LD_INT 13
42842: PUSH
42843: LD_INT 14
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: ST_TO_ADDR
42850: GO 43195
42852: LD_INT 26
42854: DOUBLE
42855: EQUAL
42856: IFTRUE 42860
42858: GO 42878
42860: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42861: LD_ADDR_VAR 0 3
42865: PUSH
42866: LD_INT 13
42868: PUSH
42869: LD_INT 14
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: ST_TO_ADDR
42876: GO 43195
42878: LD_INT 42
42880: DOUBLE
42881: EQUAL
42882: IFTRUE 42886
42884: GO 42912
42886: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42887: LD_ADDR_VAR 0 3
42891: PUSH
42892: LD_INT 21
42894: PUSH
42895: LD_INT 22
42897: PUSH
42898: LD_INT 23
42900: PUSH
42901: LD_INT 24
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: ST_TO_ADDR
42910: GO 43195
42912: LD_INT 43
42914: DOUBLE
42915: EQUAL
42916: IFTRUE 42920
42918: GO 42946
42920: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42921: LD_ADDR_VAR 0 3
42925: PUSH
42926: LD_INT 21
42928: PUSH
42929: LD_INT 22
42931: PUSH
42932: LD_INT 23
42934: PUSH
42935: LD_INT 24
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: ST_TO_ADDR
42944: GO 43195
42946: LD_INT 44
42948: DOUBLE
42949: EQUAL
42950: IFTRUE 42954
42952: GO 42980
42954: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42955: LD_ADDR_VAR 0 3
42959: PUSH
42960: LD_INT 21
42962: PUSH
42963: LD_INT 22
42965: PUSH
42966: LD_INT 23
42968: PUSH
42969: LD_INT 24
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: ST_TO_ADDR
42978: GO 43195
42980: LD_INT 45
42982: DOUBLE
42983: EQUAL
42984: IFTRUE 42988
42986: GO 43014
42988: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42989: LD_ADDR_VAR 0 3
42993: PUSH
42994: LD_INT 21
42996: PUSH
42997: LD_INT 22
42999: PUSH
43000: LD_INT 23
43002: PUSH
43003: LD_INT 24
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: ST_TO_ADDR
43012: GO 43195
43014: LD_INT 49
43016: DOUBLE
43017: EQUAL
43018: IFTRUE 43022
43020: GO 43048
43022: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43023: LD_ADDR_VAR 0 3
43027: PUSH
43028: LD_INT 21
43030: PUSH
43031: LD_INT 22
43033: PUSH
43034: LD_INT 23
43036: PUSH
43037: LD_INT 24
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: ST_TO_ADDR
43046: GO 43195
43048: LD_INT 51
43050: DOUBLE
43051: EQUAL
43052: IFTRUE 43056
43054: GO 43082
43056: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43057: LD_ADDR_VAR 0 3
43061: PUSH
43062: LD_INT 21
43064: PUSH
43065: LD_INT 22
43067: PUSH
43068: LD_INT 23
43070: PUSH
43071: LD_INT 24
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: LIST
43078: LIST
43079: ST_TO_ADDR
43080: GO 43195
43082: LD_INT 52
43084: DOUBLE
43085: EQUAL
43086: IFTRUE 43090
43088: GO 43116
43090: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43091: LD_ADDR_VAR 0 3
43095: PUSH
43096: LD_INT 21
43098: PUSH
43099: LD_INT 22
43101: PUSH
43102: LD_INT 23
43104: PUSH
43105: LD_INT 24
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: ST_TO_ADDR
43114: GO 43195
43116: LD_INT 53
43118: DOUBLE
43119: EQUAL
43120: IFTRUE 43124
43122: GO 43142
43124: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43125: LD_ADDR_VAR 0 3
43129: PUSH
43130: LD_INT 23
43132: PUSH
43133: LD_INT 24
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: ST_TO_ADDR
43140: GO 43195
43142: LD_INT 46
43144: DOUBLE
43145: EQUAL
43146: IFTRUE 43150
43148: GO 43168
43150: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43151: LD_ADDR_VAR 0 3
43155: PUSH
43156: LD_INT 23
43158: PUSH
43159: LD_INT 24
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: ST_TO_ADDR
43166: GO 43195
43168: LD_INT 47
43170: DOUBLE
43171: EQUAL
43172: IFTRUE 43176
43174: GO 43194
43176: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43177: LD_ADDR_VAR 0 3
43181: PUSH
43182: LD_INT 23
43184: PUSH
43185: LD_INT 24
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: ST_TO_ADDR
43192: GO 43195
43194: POP
// result := ( chassis in result ) ;
43195: LD_ADDR_VAR 0 3
43199: PUSH
43200: LD_VAR 0 1
43204: PUSH
43205: LD_VAR 0 3
43209: IN
43210: ST_TO_ADDR
// end ;
43211: LD_VAR 0 3
43215: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43216: LD_INT 0
43218: PPUSH
43219: PPUSH
43220: PPUSH
43221: PPUSH
43222: PPUSH
43223: PPUSH
43224: PPUSH
// result := array ;
43225: LD_ADDR_VAR 0 5
43229: PUSH
43230: LD_VAR 0 1
43234: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43235: LD_VAR 0 1
43239: NOT
43240: PUSH
43241: LD_VAR 0 2
43245: NOT
43246: OR
43247: PUSH
43248: LD_VAR 0 3
43252: NOT
43253: OR
43254: PUSH
43255: LD_VAR 0 2
43259: PUSH
43260: LD_VAR 0 1
43264: GREATER
43265: OR
43266: PUSH
43267: LD_VAR 0 3
43271: PUSH
43272: LD_VAR 0 1
43276: GREATER
43277: OR
43278: IFFALSE 43282
// exit ;
43280: GO 43578
// if direction then
43282: LD_VAR 0 4
43286: IFFALSE 43350
// begin d := 1 ;
43288: LD_ADDR_VAR 0 9
43292: PUSH
43293: LD_INT 1
43295: ST_TO_ADDR
// if i_from > i_to then
43296: LD_VAR 0 2
43300: PUSH
43301: LD_VAR 0 3
43305: GREATER
43306: IFFALSE 43332
// length := ( array - i_from ) + i_to else
43308: LD_ADDR_VAR 0 11
43312: PUSH
43313: LD_VAR 0 1
43317: PUSH
43318: LD_VAR 0 2
43322: MINUS
43323: PUSH
43324: LD_VAR 0 3
43328: PLUS
43329: ST_TO_ADDR
43330: GO 43348
// length := i_to - i_from ;
43332: LD_ADDR_VAR 0 11
43336: PUSH
43337: LD_VAR 0 3
43341: PUSH
43342: LD_VAR 0 2
43346: MINUS
43347: ST_TO_ADDR
// end else
43348: GO 43411
// begin d := - 1 ;
43350: LD_ADDR_VAR 0 9
43354: PUSH
43355: LD_INT 1
43357: NEG
43358: ST_TO_ADDR
// if i_from > i_to then
43359: LD_VAR 0 2
43363: PUSH
43364: LD_VAR 0 3
43368: GREATER
43369: IFFALSE 43389
// length := i_from - i_to else
43371: LD_ADDR_VAR 0 11
43375: PUSH
43376: LD_VAR 0 2
43380: PUSH
43381: LD_VAR 0 3
43385: MINUS
43386: ST_TO_ADDR
43387: GO 43411
// length := ( array - i_to ) + i_from ;
43389: LD_ADDR_VAR 0 11
43393: PUSH
43394: LD_VAR 0 1
43398: PUSH
43399: LD_VAR 0 3
43403: MINUS
43404: PUSH
43405: LD_VAR 0 2
43409: PLUS
43410: ST_TO_ADDR
// end ; if not length then
43411: LD_VAR 0 11
43415: NOT
43416: IFFALSE 43420
// exit ;
43418: GO 43578
// tmp := array ;
43420: LD_ADDR_VAR 0 10
43424: PUSH
43425: LD_VAR 0 1
43429: ST_TO_ADDR
// for i = 1 to length do
43430: LD_ADDR_VAR 0 6
43434: PUSH
43435: DOUBLE
43436: LD_INT 1
43438: DEC
43439: ST_TO_ADDR
43440: LD_VAR 0 11
43444: PUSH
43445: FOR_TO
43446: IFFALSE 43566
// begin for j = 1 to array do
43448: LD_ADDR_VAR 0 7
43452: PUSH
43453: DOUBLE
43454: LD_INT 1
43456: DEC
43457: ST_TO_ADDR
43458: LD_VAR 0 1
43462: PUSH
43463: FOR_TO
43464: IFFALSE 43552
// begin k := j + d ;
43466: LD_ADDR_VAR 0 8
43470: PUSH
43471: LD_VAR 0 7
43475: PUSH
43476: LD_VAR 0 9
43480: PLUS
43481: ST_TO_ADDR
// if k > array then
43482: LD_VAR 0 8
43486: PUSH
43487: LD_VAR 0 1
43491: GREATER
43492: IFFALSE 43502
// k := 1 ;
43494: LD_ADDR_VAR 0 8
43498: PUSH
43499: LD_INT 1
43501: ST_TO_ADDR
// if not k then
43502: LD_VAR 0 8
43506: NOT
43507: IFFALSE 43519
// k := array ;
43509: LD_ADDR_VAR 0 8
43513: PUSH
43514: LD_VAR 0 1
43518: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43519: LD_ADDR_VAR 0 10
43523: PUSH
43524: LD_VAR 0 10
43528: PPUSH
43529: LD_VAR 0 8
43533: PPUSH
43534: LD_VAR 0 1
43538: PUSH
43539: LD_VAR 0 7
43543: ARRAY
43544: PPUSH
43545: CALL_OW 1
43549: ST_TO_ADDR
// end ;
43550: GO 43463
43552: POP
43553: POP
// array := tmp ;
43554: LD_ADDR_VAR 0 1
43558: PUSH
43559: LD_VAR 0 10
43563: ST_TO_ADDR
// end ;
43564: GO 43445
43566: POP
43567: POP
// result := array ;
43568: LD_ADDR_VAR 0 5
43572: PUSH
43573: LD_VAR 0 1
43577: ST_TO_ADDR
// end ;
43578: LD_VAR 0 5
43582: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43583: LD_INT 0
43585: PPUSH
43586: PPUSH
// result := 0 ;
43587: LD_ADDR_VAR 0 3
43591: PUSH
43592: LD_INT 0
43594: ST_TO_ADDR
// if not array or not value in array then
43595: LD_VAR 0 1
43599: NOT
43600: PUSH
43601: LD_VAR 0 2
43605: PUSH
43606: LD_VAR 0 1
43610: IN
43611: NOT
43612: OR
43613: IFFALSE 43617
// exit ;
43615: GO 43671
// for i = 1 to array do
43617: LD_ADDR_VAR 0 4
43621: PUSH
43622: DOUBLE
43623: LD_INT 1
43625: DEC
43626: ST_TO_ADDR
43627: LD_VAR 0 1
43631: PUSH
43632: FOR_TO
43633: IFFALSE 43669
// if value = array [ i ] then
43635: LD_VAR 0 2
43639: PUSH
43640: LD_VAR 0 1
43644: PUSH
43645: LD_VAR 0 4
43649: ARRAY
43650: EQUAL
43651: IFFALSE 43667
// begin result := i ;
43653: LD_ADDR_VAR 0 3
43657: PUSH
43658: LD_VAR 0 4
43662: ST_TO_ADDR
// exit ;
43663: POP
43664: POP
43665: GO 43671
// end ;
43667: GO 43632
43669: POP
43670: POP
// end ;
43671: LD_VAR 0 3
43675: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43676: LD_INT 0
43678: PPUSH
// vc_chassis := chassis ;
43679: LD_ADDR_OWVAR 37
43683: PUSH
43684: LD_VAR 0 1
43688: ST_TO_ADDR
// vc_engine := engine ;
43689: LD_ADDR_OWVAR 39
43693: PUSH
43694: LD_VAR 0 2
43698: ST_TO_ADDR
// vc_control := control ;
43699: LD_ADDR_OWVAR 38
43703: PUSH
43704: LD_VAR 0 3
43708: ST_TO_ADDR
// vc_weapon := weapon ;
43709: LD_ADDR_OWVAR 40
43713: PUSH
43714: LD_VAR 0 4
43718: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43719: LD_ADDR_OWVAR 41
43723: PUSH
43724: LD_VAR 0 5
43728: ST_TO_ADDR
// end ;
43729: LD_VAR 0 6
43733: RET
// export function WantPlant ( unit ) ; var task ; begin
43734: LD_INT 0
43736: PPUSH
43737: PPUSH
// result := false ;
43738: LD_ADDR_VAR 0 2
43742: PUSH
43743: LD_INT 0
43745: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43746: LD_ADDR_VAR 0 3
43750: PUSH
43751: LD_VAR 0 1
43755: PPUSH
43756: CALL_OW 437
43760: ST_TO_ADDR
// if task then
43761: LD_VAR 0 3
43765: IFFALSE 43793
// if task [ 1 ] [ 1 ] = p then
43767: LD_VAR 0 3
43771: PUSH
43772: LD_INT 1
43774: ARRAY
43775: PUSH
43776: LD_INT 1
43778: ARRAY
43779: PUSH
43780: LD_STRING p
43782: EQUAL
43783: IFFALSE 43793
// result := true ;
43785: LD_ADDR_VAR 0 2
43789: PUSH
43790: LD_INT 1
43792: ST_TO_ADDR
// end ;
43793: LD_VAR 0 2
43797: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43798: LD_INT 0
43800: PPUSH
43801: PPUSH
43802: PPUSH
43803: PPUSH
// if pos < 1 then
43804: LD_VAR 0 2
43808: PUSH
43809: LD_INT 1
43811: LESS
43812: IFFALSE 43816
// exit ;
43814: GO 44119
// if pos = 1 then
43816: LD_VAR 0 2
43820: PUSH
43821: LD_INT 1
43823: EQUAL
43824: IFFALSE 43857
// result := Replace ( arr , pos [ 1 ] , value ) else
43826: LD_ADDR_VAR 0 4
43830: PUSH
43831: LD_VAR 0 1
43835: PPUSH
43836: LD_VAR 0 2
43840: PUSH
43841: LD_INT 1
43843: ARRAY
43844: PPUSH
43845: LD_VAR 0 3
43849: PPUSH
43850: CALL_OW 1
43854: ST_TO_ADDR
43855: GO 44119
// begin tmp := arr ;
43857: LD_ADDR_VAR 0 6
43861: PUSH
43862: LD_VAR 0 1
43866: ST_TO_ADDR
// s_arr := [ tmp ] ;
43867: LD_ADDR_VAR 0 7
43871: PUSH
43872: LD_VAR 0 6
43876: PUSH
43877: EMPTY
43878: LIST
43879: ST_TO_ADDR
// for i = 1 to pos - 1 do
43880: LD_ADDR_VAR 0 5
43884: PUSH
43885: DOUBLE
43886: LD_INT 1
43888: DEC
43889: ST_TO_ADDR
43890: LD_VAR 0 2
43894: PUSH
43895: LD_INT 1
43897: MINUS
43898: PUSH
43899: FOR_TO
43900: IFFALSE 43945
// begin tmp := tmp [ pos [ i ] ] ;
43902: LD_ADDR_VAR 0 6
43906: PUSH
43907: LD_VAR 0 6
43911: PUSH
43912: LD_VAR 0 2
43916: PUSH
43917: LD_VAR 0 5
43921: ARRAY
43922: ARRAY
43923: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43924: LD_ADDR_VAR 0 7
43928: PUSH
43929: LD_VAR 0 7
43933: PUSH
43934: LD_VAR 0 6
43938: PUSH
43939: EMPTY
43940: LIST
43941: ADD
43942: ST_TO_ADDR
// end ;
43943: GO 43899
43945: POP
43946: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43947: LD_ADDR_VAR 0 6
43951: PUSH
43952: LD_VAR 0 6
43956: PPUSH
43957: LD_VAR 0 2
43961: PUSH
43962: LD_VAR 0 2
43966: ARRAY
43967: PPUSH
43968: LD_VAR 0 3
43972: PPUSH
43973: CALL_OW 1
43977: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43978: LD_ADDR_VAR 0 7
43982: PUSH
43983: LD_VAR 0 7
43987: PPUSH
43988: LD_VAR 0 7
43992: PPUSH
43993: LD_VAR 0 6
43997: PPUSH
43998: CALL_OW 1
44002: ST_TO_ADDR
// for i = s_arr downto 2 do
44003: LD_ADDR_VAR 0 5
44007: PUSH
44008: DOUBLE
44009: LD_VAR 0 7
44013: INC
44014: ST_TO_ADDR
44015: LD_INT 2
44017: PUSH
44018: FOR_DOWNTO
44019: IFFALSE 44103
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44021: LD_ADDR_VAR 0 6
44025: PUSH
44026: LD_VAR 0 7
44030: PUSH
44031: LD_VAR 0 5
44035: PUSH
44036: LD_INT 1
44038: MINUS
44039: ARRAY
44040: PPUSH
44041: LD_VAR 0 2
44045: PUSH
44046: LD_VAR 0 5
44050: PUSH
44051: LD_INT 1
44053: MINUS
44054: ARRAY
44055: PPUSH
44056: LD_VAR 0 7
44060: PUSH
44061: LD_VAR 0 5
44065: ARRAY
44066: PPUSH
44067: CALL_OW 1
44071: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44072: LD_ADDR_VAR 0 7
44076: PUSH
44077: LD_VAR 0 7
44081: PPUSH
44082: LD_VAR 0 5
44086: PUSH
44087: LD_INT 1
44089: MINUS
44090: PPUSH
44091: LD_VAR 0 6
44095: PPUSH
44096: CALL_OW 1
44100: ST_TO_ADDR
// end ;
44101: GO 44018
44103: POP
44104: POP
// result := s_arr [ 1 ] ;
44105: LD_ADDR_VAR 0 4
44109: PUSH
44110: LD_VAR 0 7
44114: PUSH
44115: LD_INT 1
44117: ARRAY
44118: ST_TO_ADDR
// end ; end ;
44119: LD_VAR 0 4
44123: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44124: LD_INT 0
44126: PPUSH
44127: PPUSH
// if not list then
44128: LD_VAR 0 1
44132: NOT
44133: IFFALSE 44137
// exit ;
44135: GO 44228
// i := list [ pos1 ] ;
44137: LD_ADDR_VAR 0 5
44141: PUSH
44142: LD_VAR 0 1
44146: PUSH
44147: LD_VAR 0 2
44151: ARRAY
44152: ST_TO_ADDR
// if not i then
44153: LD_VAR 0 5
44157: NOT
44158: IFFALSE 44162
// exit ;
44160: GO 44228
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44162: LD_ADDR_VAR 0 1
44166: PUSH
44167: LD_VAR 0 1
44171: PPUSH
44172: LD_VAR 0 2
44176: PPUSH
44177: LD_VAR 0 1
44181: PUSH
44182: LD_VAR 0 3
44186: ARRAY
44187: PPUSH
44188: CALL_OW 1
44192: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44193: LD_ADDR_VAR 0 1
44197: PUSH
44198: LD_VAR 0 1
44202: PPUSH
44203: LD_VAR 0 3
44207: PPUSH
44208: LD_VAR 0 5
44212: PPUSH
44213: CALL_OW 1
44217: ST_TO_ADDR
// result := list ;
44218: LD_ADDR_VAR 0 4
44222: PUSH
44223: LD_VAR 0 1
44227: ST_TO_ADDR
// end ;
44228: LD_VAR 0 4
44232: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44233: LD_INT 0
44235: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44236: LD_ADDR_VAR 0 5
44240: PUSH
44241: LD_VAR 0 1
44245: PPUSH
44246: CALL_OW 250
44250: PPUSH
44251: LD_VAR 0 1
44255: PPUSH
44256: CALL_OW 251
44260: PPUSH
44261: LD_VAR 0 2
44265: PPUSH
44266: LD_VAR 0 3
44270: PPUSH
44271: LD_VAR 0 4
44275: PPUSH
44276: CALL 44286 0 5
44280: ST_TO_ADDR
// end ;
44281: LD_VAR 0 5
44285: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44286: LD_INT 0
44288: PPUSH
44289: PPUSH
44290: PPUSH
44291: PPUSH
// if not list then
44292: LD_VAR 0 3
44296: NOT
44297: IFFALSE 44301
// exit ;
44299: GO 44689
// result := [ ] ;
44301: LD_ADDR_VAR 0 6
44305: PUSH
44306: EMPTY
44307: ST_TO_ADDR
// for i in list do
44308: LD_ADDR_VAR 0 7
44312: PUSH
44313: LD_VAR 0 3
44317: PUSH
44318: FOR_IN
44319: IFFALSE 44521
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44321: LD_ADDR_VAR 0 9
44325: PUSH
44326: LD_VAR 0 7
44330: PPUSH
44331: LD_VAR 0 1
44335: PPUSH
44336: LD_VAR 0 2
44340: PPUSH
44341: CALL_OW 297
44345: ST_TO_ADDR
// if not result then
44346: LD_VAR 0 6
44350: NOT
44351: IFFALSE 44377
// result := [ [ i , tmp ] ] else
44353: LD_ADDR_VAR 0 6
44357: PUSH
44358: LD_VAR 0 7
44362: PUSH
44363: LD_VAR 0 9
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: EMPTY
44373: LIST
44374: ST_TO_ADDR
44375: GO 44519
// begin if result [ result ] [ 2 ] < tmp then
44377: LD_VAR 0 6
44381: PUSH
44382: LD_VAR 0 6
44386: ARRAY
44387: PUSH
44388: LD_INT 2
44390: ARRAY
44391: PUSH
44392: LD_VAR 0 9
44396: LESS
44397: IFFALSE 44439
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44399: LD_ADDR_VAR 0 6
44403: PUSH
44404: LD_VAR 0 6
44408: PPUSH
44409: LD_VAR 0 6
44413: PUSH
44414: LD_INT 1
44416: PLUS
44417: PPUSH
44418: LD_VAR 0 7
44422: PUSH
44423: LD_VAR 0 9
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PPUSH
44432: CALL_OW 2
44436: ST_TO_ADDR
44437: GO 44519
// for j = 1 to result do
44439: LD_ADDR_VAR 0 8
44443: PUSH
44444: DOUBLE
44445: LD_INT 1
44447: DEC
44448: ST_TO_ADDR
44449: LD_VAR 0 6
44453: PUSH
44454: FOR_TO
44455: IFFALSE 44517
// begin if tmp < result [ j ] [ 2 ] then
44457: LD_VAR 0 9
44461: PUSH
44462: LD_VAR 0 6
44466: PUSH
44467: LD_VAR 0 8
44471: ARRAY
44472: PUSH
44473: LD_INT 2
44475: ARRAY
44476: LESS
44477: IFFALSE 44515
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44479: LD_ADDR_VAR 0 6
44483: PUSH
44484: LD_VAR 0 6
44488: PPUSH
44489: LD_VAR 0 8
44493: PPUSH
44494: LD_VAR 0 7
44498: PUSH
44499: LD_VAR 0 9
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PPUSH
44508: CALL_OW 2
44512: ST_TO_ADDR
// break ;
44513: GO 44517
// end ; end ;
44515: GO 44454
44517: POP
44518: POP
// end ; end ;
44519: GO 44318
44521: POP
44522: POP
// if result and not asc then
44523: LD_VAR 0 6
44527: PUSH
44528: LD_VAR 0 4
44532: NOT
44533: AND
44534: IFFALSE 44609
// begin tmp := result ;
44536: LD_ADDR_VAR 0 9
44540: PUSH
44541: LD_VAR 0 6
44545: ST_TO_ADDR
// for i = tmp downto 1 do
44546: LD_ADDR_VAR 0 7
44550: PUSH
44551: DOUBLE
44552: LD_VAR 0 9
44556: INC
44557: ST_TO_ADDR
44558: LD_INT 1
44560: PUSH
44561: FOR_DOWNTO
44562: IFFALSE 44607
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44564: LD_ADDR_VAR 0 6
44568: PUSH
44569: LD_VAR 0 6
44573: PPUSH
44574: LD_VAR 0 9
44578: PUSH
44579: LD_VAR 0 7
44583: MINUS
44584: PUSH
44585: LD_INT 1
44587: PLUS
44588: PPUSH
44589: LD_VAR 0 9
44593: PUSH
44594: LD_VAR 0 7
44598: ARRAY
44599: PPUSH
44600: CALL_OW 1
44604: ST_TO_ADDR
44605: GO 44561
44607: POP
44608: POP
// end ; tmp := [ ] ;
44609: LD_ADDR_VAR 0 9
44613: PUSH
44614: EMPTY
44615: ST_TO_ADDR
// if mode then
44616: LD_VAR 0 5
44620: IFFALSE 44689
// begin for i = 1 to result do
44622: LD_ADDR_VAR 0 7
44626: PUSH
44627: DOUBLE
44628: LD_INT 1
44630: DEC
44631: ST_TO_ADDR
44632: LD_VAR 0 6
44636: PUSH
44637: FOR_TO
44638: IFFALSE 44677
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44640: LD_ADDR_VAR 0 9
44644: PUSH
44645: LD_VAR 0 9
44649: PPUSH
44650: LD_VAR 0 7
44654: PPUSH
44655: LD_VAR 0 6
44659: PUSH
44660: LD_VAR 0 7
44664: ARRAY
44665: PUSH
44666: LD_INT 1
44668: ARRAY
44669: PPUSH
44670: CALL_OW 1
44674: ST_TO_ADDR
44675: GO 44637
44677: POP
44678: POP
// result := tmp ;
44679: LD_ADDR_VAR 0 6
44683: PUSH
44684: LD_VAR 0 9
44688: ST_TO_ADDR
// end ; end ;
44689: LD_VAR 0 6
44693: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44694: LD_INT 0
44696: PPUSH
44697: PPUSH
44698: PPUSH
44699: PPUSH
44700: PPUSH
44701: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44702: LD_ADDR_VAR 0 5
44706: PUSH
44707: LD_INT 0
44709: PUSH
44710: LD_INT 0
44712: PUSH
44713: LD_INT 0
44715: PUSH
44716: EMPTY
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: ST_TO_ADDR
// if not x or not y then
44724: LD_VAR 0 2
44728: NOT
44729: PUSH
44730: LD_VAR 0 3
44734: NOT
44735: OR
44736: IFFALSE 44740
// exit ;
44738: GO 46390
// if not range then
44740: LD_VAR 0 4
44744: NOT
44745: IFFALSE 44755
// range := 10 ;
44747: LD_ADDR_VAR 0 4
44751: PUSH
44752: LD_INT 10
44754: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44755: LD_ADDR_VAR 0 8
44759: PUSH
44760: LD_INT 81
44762: PUSH
44763: LD_VAR 0 1
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 92
44774: PUSH
44775: LD_VAR 0 2
44779: PUSH
44780: LD_VAR 0 3
44784: PUSH
44785: LD_VAR 0 4
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 3
44798: PUSH
44799: LD_INT 21
44801: PUSH
44802: LD_INT 3
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: LIST
44817: PPUSH
44818: CALL_OW 69
44822: ST_TO_ADDR
// if not tmp then
44823: LD_VAR 0 8
44827: NOT
44828: IFFALSE 44832
// exit ;
44830: GO 46390
// for i in tmp do
44832: LD_ADDR_VAR 0 6
44836: PUSH
44837: LD_VAR 0 8
44841: PUSH
44842: FOR_IN
44843: IFFALSE 46365
// begin points := [ 0 , 0 , 0 ] ;
44845: LD_ADDR_VAR 0 9
44849: PUSH
44850: LD_INT 0
44852: PUSH
44853: LD_INT 0
44855: PUSH
44856: LD_INT 0
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: LIST
44863: ST_TO_ADDR
// bpoints := 1 ;
44864: LD_ADDR_VAR 0 10
44868: PUSH
44869: LD_INT 1
44871: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44872: LD_VAR 0 6
44876: PPUSH
44877: CALL_OW 247
44881: PUSH
44882: LD_INT 1
44884: DOUBLE
44885: EQUAL
44886: IFTRUE 44890
44888: GO 45468
44890: POP
// begin if GetClass ( i ) = 1 then
44891: LD_VAR 0 6
44895: PPUSH
44896: CALL_OW 257
44900: PUSH
44901: LD_INT 1
44903: EQUAL
44904: IFFALSE 44925
// points := [ 10 , 5 , 3 ] ;
44906: LD_ADDR_VAR 0 9
44910: PUSH
44911: LD_INT 10
44913: PUSH
44914: LD_INT 5
44916: PUSH
44917: LD_INT 3
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: LIST
44924: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44925: LD_VAR 0 6
44929: PPUSH
44930: CALL_OW 257
44934: PUSH
44935: LD_INT 2
44937: PUSH
44938: LD_INT 3
44940: PUSH
44941: LD_INT 4
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: LIST
44948: IN
44949: IFFALSE 44970
// points := [ 3 , 2 , 1 ] ;
44951: LD_ADDR_VAR 0 9
44955: PUSH
44956: LD_INT 3
44958: PUSH
44959: LD_INT 2
44961: PUSH
44962: LD_INT 1
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: LIST
44969: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44970: LD_VAR 0 6
44974: PPUSH
44975: CALL_OW 257
44979: PUSH
44980: LD_INT 5
44982: EQUAL
44983: IFFALSE 45004
// points := [ 130 , 5 , 2 ] ;
44985: LD_ADDR_VAR 0 9
44989: PUSH
44990: LD_INT 130
44992: PUSH
44993: LD_INT 5
44995: PUSH
44996: LD_INT 2
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: LIST
45003: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45004: LD_VAR 0 6
45008: PPUSH
45009: CALL_OW 257
45013: PUSH
45014: LD_INT 8
45016: EQUAL
45017: IFFALSE 45038
// points := [ 35 , 35 , 30 ] ;
45019: LD_ADDR_VAR 0 9
45023: PUSH
45024: LD_INT 35
45026: PUSH
45027: LD_INT 35
45029: PUSH
45030: LD_INT 30
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: LIST
45037: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45038: LD_VAR 0 6
45042: PPUSH
45043: CALL_OW 257
45047: PUSH
45048: LD_INT 9
45050: EQUAL
45051: IFFALSE 45072
// points := [ 20 , 55 , 40 ] ;
45053: LD_ADDR_VAR 0 9
45057: PUSH
45058: LD_INT 20
45060: PUSH
45061: LD_INT 55
45063: PUSH
45064: LD_INT 40
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: LIST
45071: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45072: LD_VAR 0 6
45076: PPUSH
45077: CALL_OW 257
45081: PUSH
45082: LD_INT 12
45084: PUSH
45085: LD_INT 16
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: IN
45092: IFFALSE 45113
// points := [ 5 , 3 , 2 ] ;
45094: LD_ADDR_VAR 0 9
45098: PUSH
45099: LD_INT 5
45101: PUSH
45102: LD_INT 3
45104: PUSH
45105: LD_INT 2
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: LIST
45112: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45113: LD_VAR 0 6
45117: PPUSH
45118: CALL_OW 257
45122: PUSH
45123: LD_INT 17
45125: EQUAL
45126: IFFALSE 45147
// points := [ 100 , 50 , 75 ] ;
45128: LD_ADDR_VAR 0 9
45132: PUSH
45133: LD_INT 100
45135: PUSH
45136: LD_INT 50
45138: PUSH
45139: LD_INT 75
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: LIST
45146: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45147: LD_VAR 0 6
45151: PPUSH
45152: CALL_OW 257
45156: PUSH
45157: LD_INT 15
45159: EQUAL
45160: IFFALSE 45181
// points := [ 10 , 5 , 3 ] ;
45162: LD_ADDR_VAR 0 9
45166: PUSH
45167: LD_INT 10
45169: PUSH
45170: LD_INT 5
45172: PUSH
45173: LD_INT 3
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: LIST
45180: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45181: LD_VAR 0 6
45185: PPUSH
45186: CALL_OW 257
45190: PUSH
45191: LD_INT 14
45193: EQUAL
45194: IFFALSE 45215
// points := [ 10 , 0 , 0 ] ;
45196: LD_ADDR_VAR 0 9
45200: PUSH
45201: LD_INT 10
45203: PUSH
45204: LD_INT 0
45206: PUSH
45207: LD_INT 0
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: LIST
45214: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45215: LD_VAR 0 6
45219: PPUSH
45220: CALL_OW 257
45224: PUSH
45225: LD_INT 11
45227: EQUAL
45228: IFFALSE 45249
// points := [ 30 , 10 , 5 ] ;
45230: LD_ADDR_VAR 0 9
45234: PUSH
45235: LD_INT 30
45237: PUSH
45238: LD_INT 10
45240: PUSH
45241: LD_INT 5
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: LIST
45248: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45249: LD_VAR 0 1
45253: PPUSH
45254: LD_INT 5
45256: PPUSH
45257: CALL_OW 321
45261: PUSH
45262: LD_INT 2
45264: EQUAL
45265: IFFALSE 45282
// bpoints := bpoints * 1.8 ;
45267: LD_ADDR_VAR 0 10
45271: PUSH
45272: LD_VAR 0 10
45276: PUSH
45277: LD_REAL  1.80000000000000E+0000
45280: MUL
45281: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45282: LD_VAR 0 6
45286: PPUSH
45287: CALL_OW 257
45291: PUSH
45292: LD_INT 1
45294: PUSH
45295: LD_INT 2
45297: PUSH
45298: LD_INT 3
45300: PUSH
45301: LD_INT 4
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: IN
45310: PUSH
45311: LD_VAR 0 1
45315: PPUSH
45316: LD_INT 51
45318: PPUSH
45319: CALL_OW 321
45323: PUSH
45324: LD_INT 2
45326: EQUAL
45327: AND
45328: IFFALSE 45345
// bpoints := bpoints * 1.2 ;
45330: LD_ADDR_VAR 0 10
45334: PUSH
45335: LD_VAR 0 10
45339: PUSH
45340: LD_REAL  1.20000000000000E+0000
45343: MUL
45344: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45345: LD_VAR 0 6
45349: PPUSH
45350: CALL_OW 257
45354: PUSH
45355: LD_INT 5
45357: PUSH
45358: LD_INT 7
45360: PUSH
45361: LD_INT 9
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: LIST
45368: IN
45369: PUSH
45370: LD_VAR 0 1
45374: PPUSH
45375: LD_INT 52
45377: PPUSH
45378: CALL_OW 321
45382: PUSH
45383: LD_INT 2
45385: EQUAL
45386: AND
45387: IFFALSE 45404
// bpoints := bpoints * 1.5 ;
45389: LD_ADDR_VAR 0 10
45393: PUSH
45394: LD_VAR 0 10
45398: PUSH
45399: LD_REAL  1.50000000000000E+0000
45402: MUL
45403: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45404: LD_VAR 0 1
45408: PPUSH
45409: LD_INT 66
45411: PPUSH
45412: CALL_OW 321
45416: PUSH
45417: LD_INT 2
45419: EQUAL
45420: IFFALSE 45437
// bpoints := bpoints * 1.1 ;
45422: LD_ADDR_VAR 0 10
45426: PUSH
45427: LD_VAR 0 10
45431: PUSH
45432: LD_REAL  1.10000000000000E+0000
45435: MUL
45436: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45437: LD_ADDR_VAR 0 10
45441: PUSH
45442: LD_VAR 0 10
45446: PUSH
45447: LD_VAR 0 6
45451: PPUSH
45452: LD_INT 1
45454: PPUSH
45455: CALL_OW 259
45459: PUSH
45460: LD_REAL  1.15000000000000E+0000
45463: MUL
45464: MUL
45465: ST_TO_ADDR
// end ; unit_vehicle :
45466: GO 46294
45468: LD_INT 2
45470: DOUBLE
45471: EQUAL
45472: IFTRUE 45476
45474: GO 46282
45476: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45477: LD_VAR 0 6
45481: PPUSH
45482: CALL_OW 264
45486: PUSH
45487: LD_INT 2
45489: PUSH
45490: LD_INT 42
45492: PUSH
45493: LD_INT 24
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: LIST
45500: IN
45501: IFFALSE 45522
// points := [ 25 , 5 , 3 ] ;
45503: LD_ADDR_VAR 0 9
45507: PUSH
45508: LD_INT 25
45510: PUSH
45511: LD_INT 5
45513: PUSH
45514: LD_INT 3
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: LIST
45521: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45522: LD_VAR 0 6
45526: PPUSH
45527: CALL_OW 264
45531: PUSH
45532: LD_INT 4
45534: PUSH
45535: LD_INT 43
45537: PUSH
45538: LD_INT 25
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: LIST
45545: IN
45546: IFFALSE 45567
// points := [ 40 , 15 , 5 ] ;
45548: LD_ADDR_VAR 0 9
45552: PUSH
45553: LD_INT 40
45555: PUSH
45556: LD_INT 15
45558: PUSH
45559: LD_INT 5
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: LIST
45566: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45567: LD_VAR 0 6
45571: PPUSH
45572: CALL_OW 264
45576: PUSH
45577: LD_INT 3
45579: PUSH
45580: LD_INT 23
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: IN
45587: IFFALSE 45608
// points := [ 7 , 25 , 8 ] ;
45589: LD_ADDR_VAR 0 9
45593: PUSH
45594: LD_INT 7
45596: PUSH
45597: LD_INT 25
45599: PUSH
45600: LD_INT 8
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: LIST
45607: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45608: LD_VAR 0 6
45612: PPUSH
45613: CALL_OW 264
45617: PUSH
45618: LD_INT 5
45620: PUSH
45621: LD_INT 27
45623: PUSH
45624: LD_INT 44
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: LIST
45631: IN
45632: IFFALSE 45653
// points := [ 14 , 50 , 16 ] ;
45634: LD_ADDR_VAR 0 9
45638: PUSH
45639: LD_INT 14
45641: PUSH
45642: LD_INT 50
45644: PUSH
45645: LD_INT 16
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: LIST
45652: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45653: LD_VAR 0 6
45657: PPUSH
45658: CALL_OW 264
45662: PUSH
45663: LD_INT 6
45665: PUSH
45666: LD_INT 46
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: IN
45673: IFFALSE 45694
// points := [ 32 , 120 , 70 ] ;
45675: LD_ADDR_VAR 0 9
45679: PUSH
45680: LD_INT 32
45682: PUSH
45683: LD_INT 120
45685: PUSH
45686: LD_INT 70
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: LIST
45693: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45694: LD_VAR 0 6
45698: PPUSH
45699: CALL_OW 264
45703: PUSH
45704: LD_INT 7
45706: PUSH
45707: LD_INT 28
45709: PUSH
45710: LD_INT 45
45712: PUSH
45713: LD_INT 92
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: IN
45722: IFFALSE 45743
// points := [ 35 , 20 , 45 ] ;
45724: LD_ADDR_VAR 0 9
45728: PUSH
45729: LD_INT 35
45731: PUSH
45732: LD_INT 20
45734: PUSH
45735: LD_INT 45
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: LIST
45742: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45743: LD_VAR 0 6
45747: PPUSH
45748: CALL_OW 264
45752: PUSH
45753: LD_INT 47
45755: PUSH
45756: EMPTY
45757: LIST
45758: IN
45759: IFFALSE 45780
// points := [ 67 , 45 , 75 ] ;
45761: LD_ADDR_VAR 0 9
45765: PUSH
45766: LD_INT 67
45768: PUSH
45769: LD_INT 45
45771: PUSH
45772: LD_INT 75
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: LIST
45779: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45780: LD_VAR 0 6
45784: PPUSH
45785: CALL_OW 264
45789: PUSH
45790: LD_INT 26
45792: PUSH
45793: EMPTY
45794: LIST
45795: IN
45796: IFFALSE 45817
// points := [ 120 , 30 , 80 ] ;
45798: LD_ADDR_VAR 0 9
45802: PUSH
45803: LD_INT 120
45805: PUSH
45806: LD_INT 30
45808: PUSH
45809: LD_INT 80
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: LIST
45816: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45817: LD_VAR 0 6
45821: PPUSH
45822: CALL_OW 264
45826: PUSH
45827: LD_INT 22
45829: PUSH
45830: EMPTY
45831: LIST
45832: IN
45833: IFFALSE 45854
// points := [ 40 , 1 , 1 ] ;
45835: LD_ADDR_VAR 0 9
45839: PUSH
45840: LD_INT 40
45842: PUSH
45843: LD_INT 1
45845: PUSH
45846: LD_INT 1
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: LIST
45853: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45854: LD_VAR 0 6
45858: PPUSH
45859: CALL_OW 264
45863: PUSH
45864: LD_INT 29
45866: PUSH
45867: EMPTY
45868: LIST
45869: IN
45870: IFFALSE 45891
// points := [ 70 , 200 , 400 ] ;
45872: LD_ADDR_VAR 0 9
45876: PUSH
45877: LD_INT 70
45879: PUSH
45880: LD_INT 200
45882: PUSH
45883: LD_INT 400
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: LIST
45890: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45891: LD_VAR 0 6
45895: PPUSH
45896: CALL_OW 264
45900: PUSH
45901: LD_INT 14
45903: PUSH
45904: LD_INT 53
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: IN
45911: IFFALSE 45932
// points := [ 40 , 10 , 20 ] ;
45913: LD_ADDR_VAR 0 9
45917: PUSH
45918: LD_INT 40
45920: PUSH
45921: LD_INT 10
45923: PUSH
45924: LD_INT 20
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: LIST
45931: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45932: LD_VAR 0 6
45936: PPUSH
45937: CALL_OW 264
45941: PUSH
45942: LD_INT 9
45944: PUSH
45945: EMPTY
45946: LIST
45947: IN
45948: IFFALSE 45969
// points := [ 5 , 70 , 20 ] ;
45950: LD_ADDR_VAR 0 9
45954: PUSH
45955: LD_INT 5
45957: PUSH
45958: LD_INT 70
45960: PUSH
45961: LD_INT 20
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: LIST
45968: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45969: LD_VAR 0 6
45973: PPUSH
45974: CALL_OW 264
45978: PUSH
45979: LD_INT 10
45981: PUSH
45982: EMPTY
45983: LIST
45984: IN
45985: IFFALSE 46006
// points := [ 35 , 110 , 70 ] ;
45987: LD_ADDR_VAR 0 9
45991: PUSH
45992: LD_INT 35
45994: PUSH
45995: LD_INT 110
45997: PUSH
45998: LD_INT 70
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: LIST
46005: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46006: LD_VAR 0 6
46010: PPUSH
46011: CALL_OW 265
46015: PUSH
46016: LD_INT 25
46018: EQUAL
46019: IFFALSE 46040
// points := [ 80 , 65 , 100 ] ;
46021: LD_ADDR_VAR 0 9
46025: PUSH
46026: LD_INT 80
46028: PUSH
46029: LD_INT 65
46031: PUSH
46032: LD_INT 100
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: LIST
46039: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46040: LD_VAR 0 6
46044: PPUSH
46045: CALL_OW 263
46049: PUSH
46050: LD_INT 1
46052: EQUAL
46053: IFFALSE 46088
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46055: LD_ADDR_VAR 0 10
46059: PUSH
46060: LD_VAR 0 10
46064: PUSH
46065: LD_VAR 0 6
46069: PPUSH
46070: CALL_OW 311
46074: PPUSH
46075: LD_INT 3
46077: PPUSH
46078: CALL_OW 259
46082: PUSH
46083: LD_INT 4
46085: MUL
46086: MUL
46087: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46088: LD_VAR 0 6
46092: PPUSH
46093: CALL_OW 263
46097: PUSH
46098: LD_INT 2
46100: EQUAL
46101: IFFALSE 46152
// begin j := IsControledBy ( i ) ;
46103: LD_ADDR_VAR 0 7
46107: PUSH
46108: LD_VAR 0 6
46112: PPUSH
46113: CALL_OW 312
46117: ST_TO_ADDR
// if j then
46118: LD_VAR 0 7
46122: IFFALSE 46152
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46124: LD_ADDR_VAR 0 10
46128: PUSH
46129: LD_VAR 0 10
46133: PUSH
46134: LD_VAR 0 7
46138: PPUSH
46139: LD_INT 3
46141: PPUSH
46142: CALL_OW 259
46146: PUSH
46147: LD_INT 3
46149: MUL
46150: MUL
46151: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46152: LD_VAR 0 6
46156: PPUSH
46157: CALL_OW 264
46161: PUSH
46162: LD_INT 5
46164: PUSH
46165: LD_INT 6
46167: PUSH
46168: LD_INT 46
46170: PUSH
46171: LD_INT 44
46173: PUSH
46174: LD_INT 47
46176: PUSH
46177: LD_INT 45
46179: PUSH
46180: LD_INT 28
46182: PUSH
46183: LD_INT 7
46185: PUSH
46186: LD_INT 27
46188: PUSH
46189: LD_INT 29
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: IN
46204: PUSH
46205: LD_VAR 0 1
46209: PPUSH
46210: LD_INT 52
46212: PPUSH
46213: CALL_OW 321
46217: PUSH
46218: LD_INT 2
46220: EQUAL
46221: AND
46222: IFFALSE 46239
// bpoints := bpoints * 1.2 ;
46224: LD_ADDR_VAR 0 10
46228: PUSH
46229: LD_VAR 0 10
46233: PUSH
46234: LD_REAL  1.20000000000000E+0000
46237: MUL
46238: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46239: LD_VAR 0 6
46243: PPUSH
46244: CALL_OW 264
46248: PUSH
46249: LD_INT 6
46251: PUSH
46252: LD_INT 46
46254: PUSH
46255: LD_INT 47
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: LIST
46262: IN
46263: IFFALSE 46280
// bpoints := bpoints * 1.2 ;
46265: LD_ADDR_VAR 0 10
46269: PUSH
46270: LD_VAR 0 10
46274: PUSH
46275: LD_REAL  1.20000000000000E+0000
46278: MUL
46279: ST_TO_ADDR
// end ; unit_building :
46280: GO 46294
46282: LD_INT 3
46284: DOUBLE
46285: EQUAL
46286: IFTRUE 46290
46288: GO 46293
46290: POP
// ; end ;
46291: GO 46294
46293: POP
// for j = 1 to 3 do
46294: LD_ADDR_VAR 0 7
46298: PUSH
46299: DOUBLE
46300: LD_INT 1
46302: DEC
46303: ST_TO_ADDR
46304: LD_INT 3
46306: PUSH
46307: FOR_TO
46308: IFFALSE 46361
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46310: LD_ADDR_VAR 0 5
46314: PUSH
46315: LD_VAR 0 5
46319: PPUSH
46320: LD_VAR 0 7
46324: PPUSH
46325: LD_VAR 0 5
46329: PUSH
46330: LD_VAR 0 7
46334: ARRAY
46335: PUSH
46336: LD_VAR 0 9
46340: PUSH
46341: LD_VAR 0 7
46345: ARRAY
46346: PUSH
46347: LD_VAR 0 10
46351: MUL
46352: PLUS
46353: PPUSH
46354: CALL_OW 1
46358: ST_TO_ADDR
46359: GO 46307
46361: POP
46362: POP
// end ;
46363: GO 44842
46365: POP
46366: POP
// result := Replace ( result , 4 , tmp ) ;
46367: LD_ADDR_VAR 0 5
46371: PUSH
46372: LD_VAR 0 5
46376: PPUSH
46377: LD_INT 4
46379: PPUSH
46380: LD_VAR 0 8
46384: PPUSH
46385: CALL_OW 1
46389: ST_TO_ADDR
// end ;
46390: LD_VAR 0 5
46394: RET
// export function DangerAtRange ( unit , range ) ; begin
46395: LD_INT 0
46397: PPUSH
// if not unit then
46398: LD_VAR 0 1
46402: NOT
46403: IFFALSE 46407
// exit ;
46405: GO 46452
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46407: LD_ADDR_VAR 0 3
46411: PUSH
46412: LD_VAR 0 1
46416: PPUSH
46417: CALL_OW 255
46421: PPUSH
46422: LD_VAR 0 1
46426: PPUSH
46427: CALL_OW 250
46431: PPUSH
46432: LD_VAR 0 1
46436: PPUSH
46437: CALL_OW 251
46441: PPUSH
46442: LD_VAR 0 2
46446: PPUSH
46447: CALL 44694 0 4
46451: ST_TO_ADDR
// end ;
46452: LD_VAR 0 3
46456: RET
// export function DangerInArea ( side , area ) ; begin
46457: LD_INT 0
46459: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46460: LD_ADDR_VAR 0 3
46464: PUSH
46465: LD_VAR 0 2
46469: PPUSH
46470: LD_INT 81
46472: PUSH
46473: LD_VAR 0 1
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PPUSH
46482: CALL_OW 70
46486: ST_TO_ADDR
// end ;
46487: LD_VAR 0 3
46491: RET
// export function IsExtension ( b ) ; begin
46492: LD_INT 0
46494: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46495: LD_ADDR_VAR 0 2
46499: PUSH
46500: LD_VAR 0 1
46504: PUSH
46505: LD_INT 23
46507: PUSH
46508: LD_INT 20
46510: PUSH
46511: LD_INT 22
46513: PUSH
46514: LD_INT 17
46516: PUSH
46517: LD_INT 24
46519: PUSH
46520: LD_INT 21
46522: PUSH
46523: LD_INT 19
46525: PUSH
46526: LD_INT 16
46528: PUSH
46529: LD_INT 25
46531: PUSH
46532: LD_INT 18
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: IN
46547: ST_TO_ADDR
// end ;
46548: LD_VAR 0 2
46552: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46553: LD_INT 0
46555: PPUSH
46556: PPUSH
46557: PPUSH
// result := [ ] ;
46558: LD_ADDR_VAR 0 4
46562: PUSH
46563: EMPTY
46564: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46565: LD_ADDR_VAR 0 5
46569: PUSH
46570: LD_VAR 0 2
46574: PPUSH
46575: LD_INT 21
46577: PUSH
46578: LD_INT 3
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PPUSH
46585: CALL_OW 70
46589: ST_TO_ADDR
// if not tmp then
46590: LD_VAR 0 5
46594: NOT
46595: IFFALSE 46599
// exit ;
46597: GO 46663
// if checkLink then
46599: LD_VAR 0 3
46603: IFFALSE 46653
// begin for i in tmp do
46605: LD_ADDR_VAR 0 6
46609: PUSH
46610: LD_VAR 0 5
46614: PUSH
46615: FOR_IN
46616: IFFALSE 46651
// if GetBase ( i ) <> base then
46618: LD_VAR 0 6
46622: PPUSH
46623: CALL_OW 274
46627: PUSH
46628: LD_VAR 0 1
46632: NONEQUAL
46633: IFFALSE 46649
// ComLinkToBase ( base , i ) ;
46635: LD_VAR 0 1
46639: PPUSH
46640: LD_VAR 0 6
46644: PPUSH
46645: CALL_OW 169
46649: GO 46615
46651: POP
46652: POP
// end ; result := tmp ;
46653: LD_ADDR_VAR 0 4
46657: PUSH
46658: LD_VAR 0 5
46662: ST_TO_ADDR
// end ;
46663: LD_VAR 0 4
46667: RET
// export function ComComplete ( units , b ) ; var i ; begin
46668: LD_INT 0
46670: PPUSH
46671: PPUSH
// if not units then
46672: LD_VAR 0 1
46676: NOT
46677: IFFALSE 46681
// exit ;
46679: GO 46771
// for i in units do
46681: LD_ADDR_VAR 0 4
46685: PUSH
46686: LD_VAR 0 1
46690: PUSH
46691: FOR_IN
46692: IFFALSE 46769
// if BuildingStatus ( b ) = bs_build then
46694: LD_VAR 0 2
46698: PPUSH
46699: CALL_OW 461
46703: PUSH
46704: LD_INT 1
46706: EQUAL
46707: IFFALSE 46767
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46709: LD_VAR 0 4
46713: PPUSH
46714: LD_STRING h
46716: PUSH
46717: LD_VAR 0 2
46721: PPUSH
46722: CALL_OW 250
46726: PUSH
46727: LD_VAR 0 2
46731: PPUSH
46732: CALL_OW 251
46736: PUSH
46737: LD_VAR 0 2
46741: PUSH
46742: LD_INT 0
46744: PUSH
46745: LD_INT 0
46747: PUSH
46748: LD_INT 0
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: PUSH
46760: EMPTY
46761: LIST
46762: PPUSH
46763: CALL_OW 446
46767: GO 46691
46769: POP
46770: POP
// end ;
46771: LD_VAR 0 3
46775: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46776: LD_INT 0
46778: PPUSH
46779: PPUSH
46780: PPUSH
46781: PPUSH
46782: PPUSH
46783: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46784: LD_VAR 0 1
46788: NOT
46789: PUSH
46790: LD_VAR 0 1
46794: PPUSH
46795: CALL_OW 263
46799: PUSH
46800: LD_INT 2
46802: NONEQUAL
46803: OR
46804: IFFALSE 46808
// exit ;
46806: GO 47124
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46808: LD_ADDR_VAR 0 6
46812: PUSH
46813: LD_INT 22
46815: PUSH
46816: LD_VAR 0 1
46820: PPUSH
46821: CALL_OW 255
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 2
46832: PUSH
46833: LD_INT 30
46835: PUSH
46836: LD_INT 36
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 34
46845: PUSH
46846: LD_INT 31
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: LIST
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PPUSH
46862: CALL_OW 69
46866: ST_TO_ADDR
// if not tmp then
46867: LD_VAR 0 6
46871: NOT
46872: IFFALSE 46876
// exit ;
46874: GO 47124
// result := [ ] ;
46876: LD_ADDR_VAR 0 2
46880: PUSH
46881: EMPTY
46882: ST_TO_ADDR
// for i in tmp do
46883: LD_ADDR_VAR 0 3
46887: PUSH
46888: LD_VAR 0 6
46892: PUSH
46893: FOR_IN
46894: IFFALSE 46965
// begin t := UnitsInside ( i ) ;
46896: LD_ADDR_VAR 0 4
46900: PUSH
46901: LD_VAR 0 3
46905: PPUSH
46906: CALL_OW 313
46910: ST_TO_ADDR
// if t then
46911: LD_VAR 0 4
46915: IFFALSE 46963
// for j in t do
46917: LD_ADDR_VAR 0 7
46921: PUSH
46922: LD_VAR 0 4
46926: PUSH
46927: FOR_IN
46928: IFFALSE 46961
// result := Replace ( result , result + 1 , j ) ;
46930: LD_ADDR_VAR 0 2
46934: PUSH
46935: LD_VAR 0 2
46939: PPUSH
46940: LD_VAR 0 2
46944: PUSH
46945: LD_INT 1
46947: PLUS
46948: PPUSH
46949: LD_VAR 0 7
46953: PPUSH
46954: CALL_OW 1
46958: ST_TO_ADDR
46959: GO 46927
46961: POP
46962: POP
// end ;
46963: GO 46893
46965: POP
46966: POP
// if not result then
46967: LD_VAR 0 2
46971: NOT
46972: IFFALSE 46976
// exit ;
46974: GO 47124
// mech := result [ 1 ] ;
46976: LD_ADDR_VAR 0 5
46980: PUSH
46981: LD_VAR 0 2
46985: PUSH
46986: LD_INT 1
46988: ARRAY
46989: ST_TO_ADDR
// if result > 1 then
46990: LD_VAR 0 2
46994: PUSH
46995: LD_INT 1
46997: GREATER
46998: IFFALSE 47110
// begin for i = 2 to result do
47000: LD_ADDR_VAR 0 3
47004: PUSH
47005: DOUBLE
47006: LD_INT 2
47008: DEC
47009: ST_TO_ADDR
47010: LD_VAR 0 2
47014: PUSH
47015: FOR_TO
47016: IFFALSE 47108
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47018: LD_ADDR_VAR 0 4
47022: PUSH
47023: LD_VAR 0 2
47027: PUSH
47028: LD_VAR 0 3
47032: ARRAY
47033: PPUSH
47034: LD_INT 3
47036: PPUSH
47037: CALL_OW 259
47041: PUSH
47042: LD_VAR 0 2
47046: PUSH
47047: LD_VAR 0 3
47051: ARRAY
47052: PPUSH
47053: CALL_OW 432
47057: MINUS
47058: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47059: LD_VAR 0 4
47063: PUSH
47064: LD_VAR 0 5
47068: PPUSH
47069: LD_INT 3
47071: PPUSH
47072: CALL_OW 259
47076: PUSH
47077: LD_VAR 0 5
47081: PPUSH
47082: CALL_OW 432
47086: MINUS
47087: GREATEREQUAL
47088: IFFALSE 47106
// mech := result [ i ] ;
47090: LD_ADDR_VAR 0 5
47094: PUSH
47095: LD_VAR 0 2
47099: PUSH
47100: LD_VAR 0 3
47104: ARRAY
47105: ST_TO_ADDR
// end ;
47106: GO 47015
47108: POP
47109: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47110: LD_VAR 0 1
47114: PPUSH
47115: LD_VAR 0 5
47119: PPUSH
47120: CALL_OW 135
// end ;
47124: LD_VAR 0 2
47128: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47129: LD_INT 0
47131: PPUSH
47132: PPUSH
47133: PPUSH
47134: PPUSH
47135: PPUSH
47136: PPUSH
47137: PPUSH
47138: PPUSH
47139: PPUSH
47140: PPUSH
47141: PPUSH
47142: PPUSH
47143: PPUSH
// result := [ ] ;
47144: LD_ADDR_VAR 0 7
47148: PUSH
47149: EMPTY
47150: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47151: LD_VAR 0 1
47155: PPUSH
47156: CALL_OW 266
47160: PUSH
47161: LD_INT 0
47163: PUSH
47164: LD_INT 1
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: IN
47171: NOT
47172: IFFALSE 47176
// exit ;
47174: GO 48810
// if name then
47176: LD_VAR 0 3
47180: IFFALSE 47196
// SetBName ( base_dep , name ) ;
47182: LD_VAR 0 1
47186: PPUSH
47187: LD_VAR 0 3
47191: PPUSH
47192: CALL_OW 500
// base := GetBase ( base_dep ) ;
47196: LD_ADDR_VAR 0 15
47200: PUSH
47201: LD_VAR 0 1
47205: PPUSH
47206: CALL_OW 274
47210: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47211: LD_ADDR_VAR 0 16
47215: PUSH
47216: LD_VAR 0 1
47220: PPUSH
47221: CALL_OW 255
47225: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47226: LD_ADDR_VAR 0 17
47230: PUSH
47231: LD_VAR 0 1
47235: PPUSH
47236: CALL_OW 248
47240: ST_TO_ADDR
// if sources then
47241: LD_VAR 0 5
47245: IFFALSE 47292
// for i = 1 to 3 do
47247: LD_ADDR_VAR 0 8
47251: PUSH
47252: DOUBLE
47253: LD_INT 1
47255: DEC
47256: ST_TO_ADDR
47257: LD_INT 3
47259: PUSH
47260: FOR_TO
47261: IFFALSE 47290
// AddResourceType ( base , i , sources [ i ] ) ;
47263: LD_VAR 0 15
47267: PPUSH
47268: LD_VAR 0 8
47272: PPUSH
47273: LD_VAR 0 5
47277: PUSH
47278: LD_VAR 0 8
47282: ARRAY
47283: PPUSH
47284: CALL_OW 276
47288: GO 47260
47290: POP
47291: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47292: LD_ADDR_VAR 0 18
47296: PUSH
47297: LD_VAR 0 15
47301: PPUSH
47302: LD_VAR 0 2
47306: PPUSH
47307: LD_INT 1
47309: PPUSH
47310: CALL 46553 0 3
47314: ST_TO_ADDR
// InitHc ;
47315: CALL_OW 19
// InitUc ;
47319: CALL_OW 18
// uc_side := side ;
47323: LD_ADDR_OWVAR 20
47327: PUSH
47328: LD_VAR 0 16
47332: ST_TO_ADDR
// uc_nation := nation ;
47333: LD_ADDR_OWVAR 21
47337: PUSH
47338: LD_VAR 0 17
47342: ST_TO_ADDR
// if buildings then
47343: LD_VAR 0 18
47347: IFFALSE 48669
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47349: LD_ADDR_VAR 0 19
47353: PUSH
47354: LD_VAR 0 18
47358: PPUSH
47359: LD_INT 2
47361: PUSH
47362: LD_INT 30
47364: PUSH
47365: LD_INT 29
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 30
47374: PUSH
47375: LD_INT 30
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: LIST
47386: PPUSH
47387: CALL_OW 72
47391: ST_TO_ADDR
// if tmp then
47392: LD_VAR 0 19
47396: IFFALSE 47444
// for i in tmp do
47398: LD_ADDR_VAR 0 8
47402: PUSH
47403: LD_VAR 0 19
47407: PUSH
47408: FOR_IN
47409: IFFALSE 47442
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47411: LD_VAR 0 8
47415: PPUSH
47416: CALL_OW 250
47420: PPUSH
47421: LD_VAR 0 8
47425: PPUSH
47426: CALL_OW 251
47430: PPUSH
47431: LD_VAR 0 16
47435: PPUSH
47436: CALL_OW 441
47440: GO 47408
47442: POP
47443: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47444: LD_VAR 0 18
47448: PPUSH
47449: LD_INT 2
47451: PUSH
47452: LD_INT 30
47454: PUSH
47455: LD_INT 32
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 30
47464: PUSH
47465: LD_INT 33
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: LIST
47476: PPUSH
47477: CALL_OW 72
47481: IFFALSE 47569
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47483: LD_ADDR_VAR 0 8
47487: PUSH
47488: LD_VAR 0 18
47492: PPUSH
47493: LD_INT 2
47495: PUSH
47496: LD_INT 30
47498: PUSH
47499: LD_INT 32
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 30
47508: PUSH
47509: LD_INT 33
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: LIST
47520: PPUSH
47521: CALL_OW 72
47525: PUSH
47526: FOR_IN
47527: IFFALSE 47567
// begin if not GetBWeapon ( i ) then
47529: LD_VAR 0 8
47533: PPUSH
47534: CALL_OW 269
47538: NOT
47539: IFFALSE 47565
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47541: LD_VAR 0 8
47545: PPUSH
47546: LD_VAR 0 8
47550: PPUSH
47551: LD_VAR 0 2
47555: PPUSH
47556: CALL 48815 0 2
47560: PPUSH
47561: CALL_OW 431
// end ;
47565: GO 47526
47567: POP
47568: POP
// end ; for i = 1 to personel do
47569: LD_ADDR_VAR 0 8
47573: PUSH
47574: DOUBLE
47575: LD_INT 1
47577: DEC
47578: ST_TO_ADDR
47579: LD_VAR 0 6
47583: PUSH
47584: FOR_TO
47585: IFFALSE 48649
// begin if i > 4 then
47587: LD_VAR 0 8
47591: PUSH
47592: LD_INT 4
47594: GREATER
47595: IFFALSE 47599
// break ;
47597: GO 48649
// case i of 1 :
47599: LD_VAR 0 8
47603: PUSH
47604: LD_INT 1
47606: DOUBLE
47607: EQUAL
47608: IFTRUE 47612
47610: GO 47692
47612: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47613: LD_ADDR_VAR 0 12
47617: PUSH
47618: LD_VAR 0 18
47622: PPUSH
47623: LD_INT 22
47625: PUSH
47626: LD_VAR 0 16
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 58
47637: PUSH
47638: EMPTY
47639: LIST
47640: PUSH
47641: LD_INT 2
47643: PUSH
47644: LD_INT 30
47646: PUSH
47647: LD_INT 32
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 30
47656: PUSH
47657: LD_INT 4
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 30
47666: PUSH
47667: LD_INT 5
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: LIST
47684: PPUSH
47685: CALL_OW 72
47689: ST_TO_ADDR
47690: GO 47914
47692: LD_INT 2
47694: DOUBLE
47695: EQUAL
47696: IFTRUE 47700
47698: GO 47762
47700: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47701: LD_ADDR_VAR 0 12
47705: PUSH
47706: LD_VAR 0 18
47710: PPUSH
47711: LD_INT 22
47713: PUSH
47714: LD_VAR 0 16
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 2
47725: PUSH
47726: LD_INT 30
47728: PUSH
47729: LD_INT 0
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 30
47738: PUSH
47739: LD_INT 1
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: LIST
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PPUSH
47755: CALL_OW 72
47759: ST_TO_ADDR
47760: GO 47914
47762: LD_INT 3
47764: DOUBLE
47765: EQUAL
47766: IFTRUE 47770
47768: GO 47832
47770: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47771: LD_ADDR_VAR 0 12
47775: PUSH
47776: LD_VAR 0 18
47780: PPUSH
47781: LD_INT 22
47783: PUSH
47784: LD_VAR 0 16
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 2
47795: PUSH
47796: LD_INT 30
47798: PUSH
47799: LD_INT 2
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 30
47808: PUSH
47809: LD_INT 3
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: LIST
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PPUSH
47825: CALL_OW 72
47829: ST_TO_ADDR
47830: GO 47914
47832: LD_INT 4
47834: DOUBLE
47835: EQUAL
47836: IFTRUE 47840
47838: GO 47913
47840: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47841: LD_ADDR_VAR 0 12
47845: PUSH
47846: LD_VAR 0 18
47850: PPUSH
47851: LD_INT 22
47853: PUSH
47854: LD_VAR 0 16
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 2
47865: PUSH
47866: LD_INT 30
47868: PUSH
47869: LD_INT 6
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 30
47878: PUSH
47879: LD_INT 7
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 30
47888: PUSH
47889: LD_INT 8
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PPUSH
47906: CALL_OW 72
47910: ST_TO_ADDR
47911: GO 47914
47913: POP
// if i = 1 then
47914: LD_VAR 0 8
47918: PUSH
47919: LD_INT 1
47921: EQUAL
47922: IFFALSE 48033
// begin tmp := [ ] ;
47924: LD_ADDR_VAR 0 19
47928: PUSH
47929: EMPTY
47930: ST_TO_ADDR
// for j in f do
47931: LD_ADDR_VAR 0 9
47935: PUSH
47936: LD_VAR 0 12
47940: PUSH
47941: FOR_IN
47942: IFFALSE 48015
// if GetBType ( j ) = b_bunker then
47944: LD_VAR 0 9
47948: PPUSH
47949: CALL_OW 266
47953: PUSH
47954: LD_INT 32
47956: EQUAL
47957: IFFALSE 47984
// tmp := Insert ( tmp , 1 , j ) else
47959: LD_ADDR_VAR 0 19
47963: PUSH
47964: LD_VAR 0 19
47968: PPUSH
47969: LD_INT 1
47971: PPUSH
47972: LD_VAR 0 9
47976: PPUSH
47977: CALL_OW 2
47981: ST_TO_ADDR
47982: GO 48013
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47984: LD_ADDR_VAR 0 19
47988: PUSH
47989: LD_VAR 0 19
47993: PPUSH
47994: LD_VAR 0 19
47998: PUSH
47999: LD_INT 1
48001: PLUS
48002: PPUSH
48003: LD_VAR 0 9
48007: PPUSH
48008: CALL_OW 2
48012: ST_TO_ADDR
48013: GO 47941
48015: POP
48016: POP
// if tmp then
48017: LD_VAR 0 19
48021: IFFALSE 48033
// f := tmp ;
48023: LD_ADDR_VAR 0 12
48027: PUSH
48028: LD_VAR 0 19
48032: ST_TO_ADDR
// end ; x := personel [ i ] ;
48033: LD_ADDR_VAR 0 13
48037: PUSH
48038: LD_VAR 0 6
48042: PUSH
48043: LD_VAR 0 8
48047: ARRAY
48048: ST_TO_ADDR
// if x = - 1 then
48049: LD_VAR 0 13
48053: PUSH
48054: LD_INT 1
48056: NEG
48057: EQUAL
48058: IFFALSE 48267
// begin for j in f do
48060: LD_ADDR_VAR 0 9
48064: PUSH
48065: LD_VAR 0 12
48069: PUSH
48070: FOR_IN
48071: IFFALSE 48263
// repeat InitHc ;
48073: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48077: LD_VAR 0 9
48081: PPUSH
48082: CALL_OW 266
48086: PUSH
48087: LD_INT 5
48089: EQUAL
48090: IFFALSE 48160
// begin if UnitsInside ( j ) < 3 then
48092: LD_VAR 0 9
48096: PPUSH
48097: CALL_OW 313
48101: PUSH
48102: LD_INT 3
48104: LESS
48105: IFFALSE 48141
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48107: LD_INT 0
48109: PPUSH
48110: LD_INT 5
48112: PUSH
48113: LD_INT 8
48115: PUSH
48116: LD_INT 9
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: LIST
48123: PUSH
48124: LD_VAR 0 17
48128: ARRAY
48129: PPUSH
48130: LD_VAR 0 4
48134: PPUSH
48135: CALL_OW 380
48139: GO 48158
// PrepareHuman ( false , i , skill ) ;
48141: LD_INT 0
48143: PPUSH
48144: LD_VAR 0 8
48148: PPUSH
48149: LD_VAR 0 4
48153: PPUSH
48154: CALL_OW 380
// end else
48158: GO 48177
// PrepareHuman ( false , i , skill ) ;
48160: LD_INT 0
48162: PPUSH
48163: LD_VAR 0 8
48167: PPUSH
48168: LD_VAR 0 4
48172: PPUSH
48173: CALL_OW 380
// un := CreateHuman ;
48177: LD_ADDR_VAR 0 14
48181: PUSH
48182: CALL_OW 44
48186: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48187: LD_ADDR_VAR 0 7
48191: PUSH
48192: LD_VAR 0 7
48196: PPUSH
48197: LD_INT 1
48199: PPUSH
48200: LD_VAR 0 14
48204: PPUSH
48205: CALL_OW 2
48209: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48210: LD_VAR 0 14
48214: PPUSH
48215: LD_VAR 0 9
48219: PPUSH
48220: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48224: LD_VAR 0 9
48228: PPUSH
48229: CALL_OW 313
48233: PUSH
48234: LD_INT 6
48236: EQUAL
48237: PUSH
48238: LD_VAR 0 9
48242: PPUSH
48243: CALL_OW 266
48247: PUSH
48248: LD_INT 32
48250: PUSH
48251: LD_INT 31
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: IN
48258: OR
48259: IFFALSE 48073
48261: GO 48070
48263: POP
48264: POP
// end else
48265: GO 48647
// for j = 1 to x do
48267: LD_ADDR_VAR 0 9
48271: PUSH
48272: DOUBLE
48273: LD_INT 1
48275: DEC
48276: ST_TO_ADDR
48277: LD_VAR 0 13
48281: PUSH
48282: FOR_TO
48283: IFFALSE 48645
// begin InitHc ;
48285: CALL_OW 19
// if not f then
48289: LD_VAR 0 12
48293: NOT
48294: IFFALSE 48383
// begin PrepareHuman ( false , i , skill ) ;
48296: LD_INT 0
48298: PPUSH
48299: LD_VAR 0 8
48303: PPUSH
48304: LD_VAR 0 4
48308: PPUSH
48309: CALL_OW 380
// un := CreateHuman ;
48313: LD_ADDR_VAR 0 14
48317: PUSH
48318: CALL_OW 44
48322: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48323: LD_ADDR_VAR 0 7
48327: PUSH
48328: LD_VAR 0 7
48332: PPUSH
48333: LD_INT 1
48335: PPUSH
48336: LD_VAR 0 14
48340: PPUSH
48341: CALL_OW 2
48345: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48346: LD_VAR 0 14
48350: PPUSH
48351: LD_VAR 0 1
48355: PPUSH
48356: CALL_OW 250
48360: PPUSH
48361: LD_VAR 0 1
48365: PPUSH
48366: CALL_OW 251
48370: PPUSH
48371: LD_INT 10
48373: PPUSH
48374: LD_INT 0
48376: PPUSH
48377: CALL_OW 50
// continue ;
48381: GO 48282
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48383: LD_VAR 0 12
48387: PUSH
48388: LD_INT 1
48390: ARRAY
48391: PPUSH
48392: CALL_OW 313
48396: PUSH
48397: LD_VAR 0 12
48401: PUSH
48402: LD_INT 1
48404: ARRAY
48405: PPUSH
48406: CALL_OW 266
48410: PUSH
48411: LD_INT 32
48413: PUSH
48414: LD_INT 31
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: IN
48421: AND
48422: PUSH
48423: LD_VAR 0 12
48427: PUSH
48428: LD_INT 1
48430: ARRAY
48431: PPUSH
48432: CALL_OW 313
48436: PUSH
48437: LD_INT 6
48439: EQUAL
48440: OR
48441: IFFALSE 48461
// f := Delete ( f , 1 ) ;
48443: LD_ADDR_VAR 0 12
48447: PUSH
48448: LD_VAR 0 12
48452: PPUSH
48453: LD_INT 1
48455: PPUSH
48456: CALL_OW 3
48460: ST_TO_ADDR
// if not f then
48461: LD_VAR 0 12
48465: NOT
48466: IFFALSE 48484
// begin x := x + 2 ;
48468: LD_ADDR_VAR 0 13
48472: PUSH
48473: LD_VAR 0 13
48477: PUSH
48478: LD_INT 2
48480: PLUS
48481: ST_TO_ADDR
// continue ;
48482: GO 48282
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48484: LD_VAR 0 12
48488: PUSH
48489: LD_INT 1
48491: ARRAY
48492: PPUSH
48493: CALL_OW 266
48497: PUSH
48498: LD_INT 5
48500: EQUAL
48501: IFFALSE 48575
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48503: LD_VAR 0 12
48507: PUSH
48508: LD_INT 1
48510: ARRAY
48511: PPUSH
48512: CALL_OW 313
48516: PUSH
48517: LD_INT 3
48519: LESS
48520: IFFALSE 48556
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48522: LD_INT 0
48524: PPUSH
48525: LD_INT 5
48527: PUSH
48528: LD_INT 8
48530: PUSH
48531: LD_INT 9
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: LIST
48538: PUSH
48539: LD_VAR 0 17
48543: ARRAY
48544: PPUSH
48545: LD_VAR 0 4
48549: PPUSH
48550: CALL_OW 380
48554: GO 48573
// PrepareHuman ( false , i , skill ) ;
48556: LD_INT 0
48558: PPUSH
48559: LD_VAR 0 8
48563: PPUSH
48564: LD_VAR 0 4
48568: PPUSH
48569: CALL_OW 380
// end else
48573: GO 48592
// PrepareHuman ( false , i , skill ) ;
48575: LD_INT 0
48577: PPUSH
48578: LD_VAR 0 8
48582: PPUSH
48583: LD_VAR 0 4
48587: PPUSH
48588: CALL_OW 380
// un := CreateHuman ;
48592: LD_ADDR_VAR 0 14
48596: PUSH
48597: CALL_OW 44
48601: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48602: LD_ADDR_VAR 0 7
48606: PUSH
48607: LD_VAR 0 7
48611: PPUSH
48612: LD_INT 1
48614: PPUSH
48615: LD_VAR 0 14
48619: PPUSH
48620: CALL_OW 2
48624: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48625: LD_VAR 0 14
48629: PPUSH
48630: LD_VAR 0 12
48634: PUSH
48635: LD_INT 1
48637: ARRAY
48638: PPUSH
48639: CALL_OW 52
// end ;
48643: GO 48282
48645: POP
48646: POP
// end ;
48647: GO 47584
48649: POP
48650: POP
// result := result ^ buildings ;
48651: LD_ADDR_VAR 0 7
48655: PUSH
48656: LD_VAR 0 7
48660: PUSH
48661: LD_VAR 0 18
48665: ADD
48666: ST_TO_ADDR
// end else
48667: GO 48810
// begin for i = 1 to personel do
48669: LD_ADDR_VAR 0 8
48673: PUSH
48674: DOUBLE
48675: LD_INT 1
48677: DEC
48678: ST_TO_ADDR
48679: LD_VAR 0 6
48683: PUSH
48684: FOR_TO
48685: IFFALSE 48808
// begin if i > 4 then
48687: LD_VAR 0 8
48691: PUSH
48692: LD_INT 4
48694: GREATER
48695: IFFALSE 48699
// break ;
48697: GO 48808
// x := personel [ i ] ;
48699: LD_ADDR_VAR 0 13
48703: PUSH
48704: LD_VAR 0 6
48708: PUSH
48709: LD_VAR 0 8
48713: ARRAY
48714: ST_TO_ADDR
// if x = - 1 then
48715: LD_VAR 0 13
48719: PUSH
48720: LD_INT 1
48722: NEG
48723: EQUAL
48724: IFFALSE 48728
// continue ;
48726: GO 48684
// PrepareHuman ( false , i , skill ) ;
48728: LD_INT 0
48730: PPUSH
48731: LD_VAR 0 8
48735: PPUSH
48736: LD_VAR 0 4
48740: PPUSH
48741: CALL_OW 380
// un := CreateHuman ;
48745: LD_ADDR_VAR 0 14
48749: PUSH
48750: CALL_OW 44
48754: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48755: LD_VAR 0 14
48759: PPUSH
48760: LD_VAR 0 1
48764: PPUSH
48765: CALL_OW 250
48769: PPUSH
48770: LD_VAR 0 1
48774: PPUSH
48775: CALL_OW 251
48779: PPUSH
48780: LD_INT 10
48782: PPUSH
48783: LD_INT 0
48785: PPUSH
48786: CALL_OW 50
// result := result ^ un ;
48790: LD_ADDR_VAR 0 7
48794: PUSH
48795: LD_VAR 0 7
48799: PUSH
48800: LD_VAR 0 14
48804: ADD
48805: ST_TO_ADDR
// end ;
48806: GO 48684
48808: POP
48809: POP
// end ; end ;
48810: LD_VAR 0 7
48814: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48815: LD_INT 0
48817: PPUSH
48818: PPUSH
48819: PPUSH
48820: PPUSH
48821: PPUSH
48822: PPUSH
48823: PPUSH
48824: PPUSH
48825: PPUSH
48826: PPUSH
48827: PPUSH
48828: PPUSH
48829: PPUSH
48830: PPUSH
48831: PPUSH
48832: PPUSH
// result := false ;
48833: LD_ADDR_VAR 0 3
48837: PUSH
48838: LD_INT 0
48840: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48841: LD_VAR 0 1
48845: NOT
48846: PUSH
48847: LD_VAR 0 1
48851: PPUSH
48852: CALL_OW 266
48856: PUSH
48857: LD_INT 32
48859: PUSH
48860: LD_INT 33
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: IN
48867: NOT
48868: OR
48869: IFFALSE 48873
// exit ;
48871: GO 49982
// nat := GetNation ( tower ) ;
48873: LD_ADDR_VAR 0 12
48877: PUSH
48878: LD_VAR 0 1
48882: PPUSH
48883: CALL_OW 248
48887: ST_TO_ADDR
// side := GetSide ( tower ) ;
48888: LD_ADDR_VAR 0 16
48892: PUSH
48893: LD_VAR 0 1
48897: PPUSH
48898: CALL_OW 255
48902: ST_TO_ADDR
// x := GetX ( tower ) ;
48903: LD_ADDR_VAR 0 10
48907: PUSH
48908: LD_VAR 0 1
48912: PPUSH
48913: CALL_OW 250
48917: ST_TO_ADDR
// y := GetY ( tower ) ;
48918: LD_ADDR_VAR 0 11
48922: PUSH
48923: LD_VAR 0 1
48927: PPUSH
48928: CALL_OW 251
48932: ST_TO_ADDR
// if not x or not y then
48933: LD_VAR 0 10
48937: NOT
48938: PUSH
48939: LD_VAR 0 11
48943: NOT
48944: OR
48945: IFFALSE 48949
// exit ;
48947: GO 49982
// weapon := 0 ;
48949: LD_ADDR_VAR 0 18
48953: PUSH
48954: LD_INT 0
48956: ST_TO_ADDR
// fac_list := [ ] ;
48957: LD_ADDR_VAR 0 17
48961: PUSH
48962: EMPTY
48963: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48964: LD_ADDR_VAR 0 6
48968: PUSH
48969: LD_VAR 0 1
48973: PPUSH
48974: CALL_OW 274
48978: PPUSH
48979: LD_VAR 0 2
48983: PPUSH
48984: LD_INT 0
48986: PPUSH
48987: CALL 46553 0 3
48991: PPUSH
48992: LD_INT 30
48994: PUSH
48995: LD_INT 3
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PPUSH
49002: CALL_OW 72
49006: ST_TO_ADDR
// if not factories then
49007: LD_VAR 0 6
49011: NOT
49012: IFFALSE 49016
// exit ;
49014: GO 49982
// for i in factories do
49016: LD_ADDR_VAR 0 8
49020: PUSH
49021: LD_VAR 0 6
49025: PUSH
49026: FOR_IN
49027: IFFALSE 49052
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49029: LD_ADDR_VAR 0 17
49033: PUSH
49034: LD_VAR 0 17
49038: PUSH
49039: LD_VAR 0 8
49043: PPUSH
49044: CALL_OW 478
49048: UNION
49049: ST_TO_ADDR
49050: GO 49026
49052: POP
49053: POP
// if not fac_list then
49054: LD_VAR 0 17
49058: NOT
49059: IFFALSE 49063
// exit ;
49061: GO 49982
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49063: LD_ADDR_VAR 0 5
49067: PUSH
49068: LD_INT 4
49070: PUSH
49071: LD_INT 5
49073: PUSH
49074: LD_INT 9
49076: PUSH
49077: LD_INT 10
49079: PUSH
49080: LD_INT 6
49082: PUSH
49083: LD_INT 7
49085: PUSH
49086: LD_INT 11
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 27
49100: PUSH
49101: LD_INT 28
49103: PUSH
49104: LD_INT 26
49106: PUSH
49107: LD_INT 30
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 43
49118: PUSH
49119: LD_INT 44
49121: PUSH
49122: LD_INT 46
49124: PUSH
49125: LD_INT 45
49127: PUSH
49128: LD_INT 47
49130: PUSH
49131: LD_INT 49
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: LIST
49146: PUSH
49147: LD_VAR 0 12
49151: ARRAY
49152: ST_TO_ADDR
// list := list isect fac_list ;
49153: LD_ADDR_VAR 0 5
49157: PUSH
49158: LD_VAR 0 5
49162: PUSH
49163: LD_VAR 0 17
49167: ISECT
49168: ST_TO_ADDR
// if not list then
49169: LD_VAR 0 5
49173: NOT
49174: IFFALSE 49178
// exit ;
49176: GO 49982
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49178: LD_VAR 0 12
49182: PUSH
49183: LD_INT 3
49185: EQUAL
49186: PUSH
49187: LD_INT 49
49189: PUSH
49190: LD_VAR 0 5
49194: IN
49195: AND
49196: PUSH
49197: LD_INT 31
49199: PPUSH
49200: LD_VAR 0 16
49204: PPUSH
49205: CALL_OW 321
49209: PUSH
49210: LD_INT 2
49212: EQUAL
49213: AND
49214: IFFALSE 49274
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49216: LD_INT 22
49218: PUSH
49219: LD_VAR 0 16
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 35
49230: PUSH
49231: LD_INT 49
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 91
49240: PUSH
49241: LD_VAR 0 1
49245: PUSH
49246: LD_INT 10
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: LIST
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: LIST
49258: PPUSH
49259: CALL_OW 69
49263: NOT
49264: IFFALSE 49274
// weapon := ru_time_lapser ;
49266: LD_ADDR_VAR 0 18
49270: PUSH
49271: LD_INT 49
49273: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49274: LD_VAR 0 12
49278: PUSH
49279: LD_INT 1
49281: PUSH
49282: LD_INT 2
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: IN
49289: PUSH
49290: LD_INT 11
49292: PUSH
49293: LD_VAR 0 5
49297: IN
49298: PUSH
49299: LD_INT 30
49301: PUSH
49302: LD_VAR 0 5
49306: IN
49307: OR
49308: AND
49309: PUSH
49310: LD_INT 6
49312: PPUSH
49313: LD_VAR 0 16
49317: PPUSH
49318: CALL_OW 321
49322: PUSH
49323: LD_INT 2
49325: EQUAL
49326: AND
49327: IFFALSE 49492
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49329: LD_INT 22
49331: PUSH
49332: LD_VAR 0 16
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 2
49343: PUSH
49344: LD_INT 35
49346: PUSH
49347: LD_INT 11
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 35
49356: PUSH
49357: LD_INT 30
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 91
49371: PUSH
49372: LD_VAR 0 1
49376: PUSH
49377: LD_INT 18
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: LIST
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: LIST
49389: PPUSH
49390: CALL_OW 69
49394: NOT
49395: PUSH
49396: LD_INT 22
49398: PUSH
49399: LD_VAR 0 16
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 2
49410: PUSH
49411: LD_INT 30
49413: PUSH
49414: LD_INT 32
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 30
49423: PUSH
49424: LD_INT 33
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 91
49438: PUSH
49439: LD_VAR 0 1
49443: PUSH
49444: LD_INT 12
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: LIST
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: LIST
49456: PUSH
49457: EMPTY
49458: LIST
49459: PPUSH
49460: CALL_OW 69
49464: PUSH
49465: LD_INT 2
49467: GREATER
49468: AND
49469: IFFALSE 49492
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49471: LD_ADDR_VAR 0 18
49475: PUSH
49476: LD_INT 11
49478: PUSH
49479: LD_INT 30
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_VAR 0 12
49490: ARRAY
49491: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49492: LD_VAR 0 18
49496: NOT
49497: PUSH
49498: LD_INT 40
49500: PPUSH
49501: LD_VAR 0 16
49505: PPUSH
49506: CALL_OW 321
49510: PUSH
49511: LD_INT 2
49513: EQUAL
49514: AND
49515: PUSH
49516: LD_INT 7
49518: PUSH
49519: LD_VAR 0 5
49523: IN
49524: PUSH
49525: LD_INT 28
49527: PUSH
49528: LD_VAR 0 5
49532: IN
49533: OR
49534: PUSH
49535: LD_INT 45
49537: PUSH
49538: LD_VAR 0 5
49542: IN
49543: OR
49544: AND
49545: IFFALSE 49799
// begin hex := GetHexInfo ( x , y ) ;
49547: LD_ADDR_VAR 0 4
49551: PUSH
49552: LD_VAR 0 10
49556: PPUSH
49557: LD_VAR 0 11
49561: PPUSH
49562: CALL_OW 546
49566: ST_TO_ADDR
// if hex [ 1 ] then
49567: LD_VAR 0 4
49571: PUSH
49572: LD_INT 1
49574: ARRAY
49575: IFFALSE 49579
// exit ;
49577: GO 49982
// height := hex [ 2 ] ;
49579: LD_ADDR_VAR 0 15
49583: PUSH
49584: LD_VAR 0 4
49588: PUSH
49589: LD_INT 2
49591: ARRAY
49592: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49593: LD_ADDR_VAR 0 14
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: LD_INT 2
49603: PUSH
49604: LD_INT 3
49606: PUSH
49607: LD_INT 5
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: ST_TO_ADDR
// for i in tmp do
49616: LD_ADDR_VAR 0 8
49620: PUSH
49621: LD_VAR 0 14
49625: PUSH
49626: FOR_IN
49627: IFFALSE 49797
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49629: LD_ADDR_VAR 0 9
49633: PUSH
49634: LD_VAR 0 10
49638: PPUSH
49639: LD_VAR 0 8
49643: PPUSH
49644: LD_INT 5
49646: PPUSH
49647: CALL_OW 272
49651: PUSH
49652: LD_VAR 0 11
49656: PPUSH
49657: LD_VAR 0 8
49661: PPUSH
49662: LD_INT 5
49664: PPUSH
49665: CALL_OW 273
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49674: LD_VAR 0 9
49678: PUSH
49679: LD_INT 1
49681: ARRAY
49682: PPUSH
49683: LD_VAR 0 9
49687: PUSH
49688: LD_INT 2
49690: ARRAY
49691: PPUSH
49692: CALL_OW 488
49696: IFFALSE 49795
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49698: LD_ADDR_VAR 0 4
49702: PUSH
49703: LD_VAR 0 9
49707: PUSH
49708: LD_INT 1
49710: ARRAY
49711: PPUSH
49712: LD_VAR 0 9
49716: PUSH
49717: LD_INT 2
49719: ARRAY
49720: PPUSH
49721: CALL_OW 546
49725: ST_TO_ADDR
// if hex [ 1 ] then
49726: LD_VAR 0 4
49730: PUSH
49731: LD_INT 1
49733: ARRAY
49734: IFFALSE 49738
// continue ;
49736: GO 49626
// h := hex [ 2 ] ;
49738: LD_ADDR_VAR 0 13
49742: PUSH
49743: LD_VAR 0 4
49747: PUSH
49748: LD_INT 2
49750: ARRAY
49751: ST_TO_ADDR
// if h + 7 < height then
49752: LD_VAR 0 13
49756: PUSH
49757: LD_INT 7
49759: PLUS
49760: PUSH
49761: LD_VAR 0 15
49765: LESS
49766: IFFALSE 49795
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49768: LD_ADDR_VAR 0 18
49772: PUSH
49773: LD_INT 7
49775: PUSH
49776: LD_INT 28
49778: PUSH
49779: LD_INT 45
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: LIST
49786: PUSH
49787: LD_VAR 0 12
49791: ARRAY
49792: ST_TO_ADDR
// break ;
49793: GO 49797
// end ; end ; end ;
49795: GO 49626
49797: POP
49798: POP
// end ; if not weapon then
49799: LD_VAR 0 18
49803: NOT
49804: IFFALSE 49864
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49806: LD_ADDR_VAR 0 5
49810: PUSH
49811: LD_VAR 0 5
49815: PUSH
49816: LD_INT 11
49818: PUSH
49819: LD_INT 30
49821: PUSH
49822: LD_INT 49
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: LIST
49829: DIFF
49830: ST_TO_ADDR
// if not list then
49831: LD_VAR 0 5
49835: NOT
49836: IFFALSE 49840
// exit ;
49838: GO 49982
// weapon := list [ rand ( 1 , list ) ] ;
49840: LD_ADDR_VAR 0 18
49844: PUSH
49845: LD_VAR 0 5
49849: PUSH
49850: LD_INT 1
49852: PPUSH
49853: LD_VAR 0 5
49857: PPUSH
49858: CALL_OW 12
49862: ARRAY
49863: ST_TO_ADDR
// end ; if weapon then
49864: LD_VAR 0 18
49868: IFFALSE 49982
// begin tmp := CostOfWeapon ( weapon ) ;
49870: LD_ADDR_VAR 0 14
49874: PUSH
49875: LD_VAR 0 18
49879: PPUSH
49880: CALL_OW 451
49884: ST_TO_ADDR
// j := GetBase ( tower ) ;
49885: LD_ADDR_VAR 0 9
49889: PUSH
49890: LD_VAR 0 1
49894: PPUSH
49895: CALL_OW 274
49899: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49900: LD_VAR 0 9
49904: PPUSH
49905: LD_INT 1
49907: PPUSH
49908: CALL_OW 275
49912: PUSH
49913: LD_VAR 0 14
49917: PUSH
49918: LD_INT 1
49920: ARRAY
49921: GREATEREQUAL
49922: PUSH
49923: LD_VAR 0 9
49927: PPUSH
49928: LD_INT 2
49930: PPUSH
49931: CALL_OW 275
49935: PUSH
49936: LD_VAR 0 14
49940: PUSH
49941: LD_INT 2
49943: ARRAY
49944: GREATEREQUAL
49945: AND
49946: PUSH
49947: LD_VAR 0 9
49951: PPUSH
49952: LD_INT 3
49954: PPUSH
49955: CALL_OW 275
49959: PUSH
49960: LD_VAR 0 14
49964: PUSH
49965: LD_INT 3
49967: ARRAY
49968: GREATEREQUAL
49969: AND
49970: IFFALSE 49982
// result := weapon ;
49972: LD_ADDR_VAR 0 3
49976: PUSH
49977: LD_VAR 0 18
49981: ST_TO_ADDR
// end ; end ;
49982: LD_VAR 0 3
49986: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49987: LD_INT 0
49989: PPUSH
49990: PPUSH
// result := true ;
49991: LD_ADDR_VAR 0 3
49995: PUSH
49996: LD_INT 1
49998: ST_TO_ADDR
// if array1 = array2 then
49999: LD_VAR 0 1
50003: PUSH
50004: LD_VAR 0 2
50008: EQUAL
50009: IFFALSE 50069
// begin for i = 1 to array1 do
50011: LD_ADDR_VAR 0 4
50015: PUSH
50016: DOUBLE
50017: LD_INT 1
50019: DEC
50020: ST_TO_ADDR
50021: LD_VAR 0 1
50025: PUSH
50026: FOR_TO
50027: IFFALSE 50065
// if array1 [ i ] <> array2 [ i ] then
50029: LD_VAR 0 1
50033: PUSH
50034: LD_VAR 0 4
50038: ARRAY
50039: PUSH
50040: LD_VAR 0 2
50044: PUSH
50045: LD_VAR 0 4
50049: ARRAY
50050: NONEQUAL
50051: IFFALSE 50063
// begin result := false ;
50053: LD_ADDR_VAR 0 3
50057: PUSH
50058: LD_INT 0
50060: ST_TO_ADDR
// break ;
50061: GO 50065
// end ;
50063: GO 50026
50065: POP
50066: POP
// end else
50067: GO 50077
// result := false ;
50069: LD_ADDR_VAR 0 3
50073: PUSH
50074: LD_INT 0
50076: ST_TO_ADDR
// end ;
50077: LD_VAR 0 3
50081: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50082: LD_INT 0
50084: PPUSH
50085: PPUSH
// if not array1 or not array2 then
50086: LD_VAR 0 1
50090: NOT
50091: PUSH
50092: LD_VAR 0 2
50096: NOT
50097: OR
50098: IFFALSE 50102
// exit ;
50100: GO 50166
// result := true ;
50102: LD_ADDR_VAR 0 3
50106: PUSH
50107: LD_INT 1
50109: ST_TO_ADDR
// for i = 1 to array1 do
50110: LD_ADDR_VAR 0 4
50114: PUSH
50115: DOUBLE
50116: LD_INT 1
50118: DEC
50119: ST_TO_ADDR
50120: LD_VAR 0 1
50124: PUSH
50125: FOR_TO
50126: IFFALSE 50164
// if array1 [ i ] <> array2 [ i ] then
50128: LD_VAR 0 1
50132: PUSH
50133: LD_VAR 0 4
50137: ARRAY
50138: PUSH
50139: LD_VAR 0 2
50143: PUSH
50144: LD_VAR 0 4
50148: ARRAY
50149: NONEQUAL
50150: IFFALSE 50162
// begin result := false ;
50152: LD_ADDR_VAR 0 3
50156: PUSH
50157: LD_INT 0
50159: ST_TO_ADDR
// break ;
50160: GO 50164
// end ;
50162: GO 50125
50164: POP
50165: POP
// end ;
50166: LD_VAR 0 3
50170: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50171: LD_INT 0
50173: PPUSH
50174: PPUSH
50175: PPUSH
// pom := GetBase ( fac ) ;
50176: LD_ADDR_VAR 0 5
50180: PUSH
50181: LD_VAR 0 1
50185: PPUSH
50186: CALL_OW 274
50190: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50191: LD_ADDR_VAR 0 4
50195: PUSH
50196: LD_VAR 0 2
50200: PUSH
50201: LD_INT 1
50203: ARRAY
50204: PPUSH
50205: LD_VAR 0 2
50209: PUSH
50210: LD_INT 2
50212: ARRAY
50213: PPUSH
50214: LD_VAR 0 2
50218: PUSH
50219: LD_INT 3
50221: ARRAY
50222: PPUSH
50223: LD_VAR 0 2
50227: PUSH
50228: LD_INT 4
50230: ARRAY
50231: PPUSH
50232: CALL_OW 449
50236: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50237: LD_ADDR_VAR 0 3
50241: PUSH
50242: LD_VAR 0 5
50246: PPUSH
50247: LD_INT 1
50249: PPUSH
50250: CALL_OW 275
50254: PUSH
50255: LD_VAR 0 4
50259: PUSH
50260: LD_INT 1
50262: ARRAY
50263: GREATEREQUAL
50264: PUSH
50265: LD_VAR 0 5
50269: PPUSH
50270: LD_INT 2
50272: PPUSH
50273: CALL_OW 275
50277: PUSH
50278: LD_VAR 0 4
50282: PUSH
50283: LD_INT 2
50285: ARRAY
50286: GREATEREQUAL
50287: AND
50288: PUSH
50289: LD_VAR 0 5
50293: PPUSH
50294: LD_INT 3
50296: PPUSH
50297: CALL_OW 275
50301: PUSH
50302: LD_VAR 0 4
50306: PUSH
50307: LD_INT 3
50309: ARRAY
50310: GREATEREQUAL
50311: AND
50312: ST_TO_ADDR
// end ;
50313: LD_VAR 0 3
50317: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50318: LD_INT 0
50320: PPUSH
50321: PPUSH
50322: PPUSH
50323: PPUSH
// pom := GetBase ( building ) ;
50324: LD_ADDR_VAR 0 3
50328: PUSH
50329: LD_VAR 0 1
50333: PPUSH
50334: CALL_OW 274
50338: ST_TO_ADDR
// if not pom then
50339: LD_VAR 0 3
50343: NOT
50344: IFFALSE 50348
// exit ;
50346: GO 50518
// btype := GetBType ( building ) ;
50348: LD_ADDR_VAR 0 5
50352: PUSH
50353: LD_VAR 0 1
50357: PPUSH
50358: CALL_OW 266
50362: ST_TO_ADDR
// if btype = b_armoury then
50363: LD_VAR 0 5
50367: PUSH
50368: LD_INT 4
50370: EQUAL
50371: IFFALSE 50381
// btype := b_barracks ;
50373: LD_ADDR_VAR 0 5
50377: PUSH
50378: LD_INT 5
50380: ST_TO_ADDR
// if btype = b_depot then
50381: LD_VAR 0 5
50385: PUSH
50386: LD_INT 0
50388: EQUAL
50389: IFFALSE 50399
// btype := b_warehouse ;
50391: LD_ADDR_VAR 0 5
50395: PUSH
50396: LD_INT 1
50398: ST_TO_ADDR
// if btype = b_workshop then
50399: LD_VAR 0 5
50403: PUSH
50404: LD_INT 2
50406: EQUAL
50407: IFFALSE 50417
// btype := b_factory ;
50409: LD_ADDR_VAR 0 5
50413: PUSH
50414: LD_INT 3
50416: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50417: LD_ADDR_VAR 0 4
50421: PUSH
50422: LD_VAR 0 5
50426: PPUSH
50427: LD_VAR 0 1
50431: PPUSH
50432: CALL_OW 248
50436: PPUSH
50437: CALL_OW 450
50441: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50442: LD_ADDR_VAR 0 2
50446: PUSH
50447: LD_VAR 0 3
50451: PPUSH
50452: LD_INT 1
50454: PPUSH
50455: CALL_OW 275
50459: PUSH
50460: LD_VAR 0 4
50464: PUSH
50465: LD_INT 1
50467: ARRAY
50468: GREATEREQUAL
50469: PUSH
50470: LD_VAR 0 3
50474: PPUSH
50475: LD_INT 2
50477: PPUSH
50478: CALL_OW 275
50482: PUSH
50483: LD_VAR 0 4
50487: PUSH
50488: LD_INT 2
50490: ARRAY
50491: GREATEREQUAL
50492: AND
50493: PUSH
50494: LD_VAR 0 3
50498: PPUSH
50499: LD_INT 3
50501: PPUSH
50502: CALL_OW 275
50506: PUSH
50507: LD_VAR 0 4
50511: PUSH
50512: LD_INT 3
50514: ARRAY
50515: GREATEREQUAL
50516: AND
50517: ST_TO_ADDR
// end ;
50518: LD_VAR 0 2
50522: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50523: LD_INT 0
50525: PPUSH
50526: PPUSH
50527: PPUSH
// pom := GetBase ( building ) ;
50528: LD_ADDR_VAR 0 4
50532: PUSH
50533: LD_VAR 0 1
50537: PPUSH
50538: CALL_OW 274
50542: ST_TO_ADDR
// if not pom then
50543: LD_VAR 0 4
50547: NOT
50548: IFFALSE 50552
// exit ;
50550: GO 50653
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50552: LD_ADDR_VAR 0 5
50556: PUSH
50557: LD_VAR 0 2
50561: PPUSH
50562: LD_VAR 0 1
50566: PPUSH
50567: CALL_OW 248
50571: PPUSH
50572: CALL_OW 450
50576: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50577: LD_ADDR_VAR 0 3
50581: PUSH
50582: LD_VAR 0 4
50586: PPUSH
50587: LD_INT 1
50589: PPUSH
50590: CALL_OW 275
50594: PUSH
50595: LD_VAR 0 5
50599: PUSH
50600: LD_INT 1
50602: ARRAY
50603: GREATEREQUAL
50604: PUSH
50605: LD_VAR 0 4
50609: PPUSH
50610: LD_INT 2
50612: PPUSH
50613: CALL_OW 275
50617: PUSH
50618: LD_VAR 0 5
50622: PUSH
50623: LD_INT 2
50625: ARRAY
50626: GREATEREQUAL
50627: AND
50628: PUSH
50629: LD_VAR 0 4
50633: PPUSH
50634: LD_INT 3
50636: PPUSH
50637: CALL_OW 275
50641: PUSH
50642: LD_VAR 0 5
50646: PUSH
50647: LD_INT 3
50649: ARRAY
50650: GREATEREQUAL
50651: AND
50652: ST_TO_ADDR
// end ;
50653: LD_VAR 0 3
50657: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50658: LD_INT 0
50660: PPUSH
50661: PPUSH
50662: PPUSH
50663: PPUSH
50664: PPUSH
50665: PPUSH
50666: PPUSH
50667: PPUSH
50668: PPUSH
50669: PPUSH
50670: PPUSH
// result := false ;
50671: LD_ADDR_VAR 0 8
50675: PUSH
50676: LD_INT 0
50678: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50679: LD_VAR 0 5
50683: NOT
50684: PUSH
50685: LD_VAR 0 1
50689: NOT
50690: OR
50691: PUSH
50692: LD_VAR 0 2
50696: NOT
50697: OR
50698: PUSH
50699: LD_VAR 0 3
50703: NOT
50704: OR
50705: IFFALSE 50709
// exit ;
50707: GO 51523
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50709: LD_ADDR_VAR 0 14
50713: PUSH
50714: LD_VAR 0 1
50718: PPUSH
50719: LD_VAR 0 2
50723: PPUSH
50724: LD_VAR 0 3
50728: PPUSH
50729: LD_VAR 0 4
50733: PPUSH
50734: LD_VAR 0 5
50738: PUSH
50739: LD_INT 1
50741: ARRAY
50742: PPUSH
50743: CALL_OW 248
50747: PPUSH
50748: LD_INT 0
50750: PPUSH
50751: CALL 52776 0 6
50755: ST_TO_ADDR
// if not hexes then
50756: LD_VAR 0 14
50760: NOT
50761: IFFALSE 50765
// exit ;
50763: GO 51523
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50765: LD_ADDR_VAR 0 17
50769: PUSH
50770: LD_VAR 0 5
50774: PPUSH
50775: LD_INT 22
50777: PUSH
50778: LD_VAR 0 13
50782: PPUSH
50783: CALL_OW 255
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 2
50794: PUSH
50795: LD_INT 30
50797: PUSH
50798: LD_INT 0
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 30
50807: PUSH
50808: LD_INT 1
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: LIST
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PPUSH
50824: CALL_OW 72
50828: ST_TO_ADDR
// for i = 1 to hexes do
50829: LD_ADDR_VAR 0 9
50833: PUSH
50834: DOUBLE
50835: LD_INT 1
50837: DEC
50838: ST_TO_ADDR
50839: LD_VAR 0 14
50843: PUSH
50844: FOR_TO
50845: IFFALSE 51521
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50847: LD_ADDR_VAR 0 13
50851: PUSH
50852: LD_VAR 0 14
50856: PUSH
50857: LD_VAR 0 9
50861: ARRAY
50862: PUSH
50863: LD_INT 1
50865: ARRAY
50866: PPUSH
50867: LD_VAR 0 14
50871: PUSH
50872: LD_VAR 0 9
50876: ARRAY
50877: PUSH
50878: LD_INT 2
50880: ARRAY
50881: PPUSH
50882: CALL_OW 428
50886: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50887: LD_VAR 0 14
50891: PUSH
50892: LD_VAR 0 9
50896: ARRAY
50897: PUSH
50898: LD_INT 1
50900: ARRAY
50901: PPUSH
50902: LD_VAR 0 14
50906: PUSH
50907: LD_VAR 0 9
50911: ARRAY
50912: PUSH
50913: LD_INT 2
50915: ARRAY
50916: PPUSH
50917: CALL_OW 351
50921: PUSH
50922: LD_VAR 0 14
50926: PUSH
50927: LD_VAR 0 9
50931: ARRAY
50932: PUSH
50933: LD_INT 1
50935: ARRAY
50936: PPUSH
50937: LD_VAR 0 14
50941: PUSH
50942: LD_VAR 0 9
50946: ARRAY
50947: PUSH
50948: LD_INT 2
50950: ARRAY
50951: PPUSH
50952: CALL_OW 488
50956: NOT
50957: OR
50958: PUSH
50959: LD_VAR 0 13
50963: PPUSH
50964: CALL_OW 247
50968: PUSH
50969: LD_INT 3
50971: EQUAL
50972: OR
50973: IFFALSE 50979
// exit ;
50975: POP
50976: POP
50977: GO 51523
// if not tmp then
50979: LD_VAR 0 13
50983: NOT
50984: IFFALSE 50988
// continue ;
50986: GO 50844
// result := true ;
50988: LD_ADDR_VAR 0 8
50992: PUSH
50993: LD_INT 1
50995: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50996: LD_VAR 0 6
51000: PUSH
51001: LD_VAR 0 13
51005: PPUSH
51006: CALL_OW 247
51010: PUSH
51011: LD_INT 2
51013: EQUAL
51014: AND
51015: PUSH
51016: LD_VAR 0 13
51020: PPUSH
51021: CALL_OW 263
51025: PUSH
51026: LD_INT 1
51028: EQUAL
51029: AND
51030: IFFALSE 51194
// begin if IsDrivenBy ( tmp ) then
51032: LD_VAR 0 13
51036: PPUSH
51037: CALL_OW 311
51041: IFFALSE 51045
// continue ;
51043: GO 50844
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51045: LD_VAR 0 6
51049: PPUSH
51050: LD_INT 3
51052: PUSH
51053: LD_INT 60
51055: PUSH
51056: EMPTY
51057: LIST
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 3
51065: PUSH
51066: LD_INT 55
51068: PUSH
51069: EMPTY
51070: LIST
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PPUSH
51080: CALL_OW 72
51084: IFFALSE 51192
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51086: LD_ADDR_VAR 0 18
51090: PUSH
51091: LD_VAR 0 6
51095: PPUSH
51096: LD_INT 3
51098: PUSH
51099: LD_INT 60
51101: PUSH
51102: EMPTY
51103: LIST
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 3
51111: PUSH
51112: LD_INT 55
51114: PUSH
51115: EMPTY
51116: LIST
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PPUSH
51126: CALL_OW 72
51130: PUSH
51131: LD_INT 1
51133: ARRAY
51134: ST_TO_ADDR
// if IsInUnit ( driver ) then
51135: LD_VAR 0 18
51139: PPUSH
51140: CALL_OW 310
51144: IFFALSE 51155
// ComExit ( driver ) ;
51146: LD_VAR 0 18
51150: PPUSH
51151: CALL 76555 0 1
// AddComEnterUnit ( driver , tmp ) ;
51155: LD_VAR 0 18
51159: PPUSH
51160: LD_VAR 0 13
51164: PPUSH
51165: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51169: LD_VAR 0 18
51173: PPUSH
51174: LD_VAR 0 7
51178: PPUSH
51179: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51183: LD_VAR 0 18
51187: PPUSH
51188: CALL_OW 181
// end ; continue ;
51192: GO 50844
// end ; if not cleaners or not tmp in cleaners then
51194: LD_VAR 0 6
51198: NOT
51199: PUSH
51200: LD_VAR 0 13
51204: PUSH
51205: LD_VAR 0 6
51209: IN
51210: NOT
51211: OR
51212: IFFALSE 51519
// begin if dep then
51214: LD_VAR 0 17
51218: IFFALSE 51354
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51220: LD_ADDR_VAR 0 16
51224: PUSH
51225: LD_VAR 0 17
51229: PUSH
51230: LD_INT 1
51232: ARRAY
51233: PPUSH
51234: CALL_OW 250
51238: PPUSH
51239: LD_VAR 0 17
51243: PUSH
51244: LD_INT 1
51246: ARRAY
51247: PPUSH
51248: CALL_OW 254
51252: PPUSH
51253: LD_INT 5
51255: PPUSH
51256: CALL_OW 272
51260: PUSH
51261: LD_VAR 0 17
51265: PUSH
51266: LD_INT 1
51268: ARRAY
51269: PPUSH
51270: CALL_OW 251
51274: PPUSH
51275: LD_VAR 0 17
51279: PUSH
51280: LD_INT 1
51282: ARRAY
51283: PPUSH
51284: CALL_OW 254
51288: PPUSH
51289: LD_INT 5
51291: PPUSH
51292: CALL_OW 273
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51301: LD_VAR 0 16
51305: PUSH
51306: LD_INT 1
51308: ARRAY
51309: PPUSH
51310: LD_VAR 0 16
51314: PUSH
51315: LD_INT 2
51317: ARRAY
51318: PPUSH
51319: CALL_OW 488
51323: IFFALSE 51354
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51325: LD_VAR 0 13
51329: PPUSH
51330: LD_VAR 0 16
51334: PUSH
51335: LD_INT 1
51337: ARRAY
51338: PPUSH
51339: LD_VAR 0 16
51343: PUSH
51344: LD_INT 2
51346: ARRAY
51347: PPUSH
51348: CALL_OW 111
// continue ;
51352: GO 50844
// end ; end ; r := GetDir ( tmp ) ;
51354: LD_ADDR_VAR 0 15
51358: PUSH
51359: LD_VAR 0 13
51363: PPUSH
51364: CALL_OW 254
51368: ST_TO_ADDR
// if r = 5 then
51369: LD_VAR 0 15
51373: PUSH
51374: LD_INT 5
51376: EQUAL
51377: IFFALSE 51387
// r := 0 ;
51379: LD_ADDR_VAR 0 15
51383: PUSH
51384: LD_INT 0
51386: ST_TO_ADDR
// for j = r to 5 do
51387: LD_ADDR_VAR 0 10
51391: PUSH
51392: DOUBLE
51393: LD_VAR 0 15
51397: DEC
51398: ST_TO_ADDR
51399: LD_INT 5
51401: PUSH
51402: FOR_TO
51403: IFFALSE 51517
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51405: LD_ADDR_VAR 0 11
51409: PUSH
51410: LD_VAR 0 13
51414: PPUSH
51415: CALL_OW 250
51419: PPUSH
51420: LD_VAR 0 10
51424: PPUSH
51425: LD_INT 2
51427: PPUSH
51428: CALL_OW 272
51432: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51433: LD_ADDR_VAR 0 12
51437: PUSH
51438: LD_VAR 0 13
51442: PPUSH
51443: CALL_OW 251
51447: PPUSH
51448: LD_VAR 0 10
51452: PPUSH
51453: LD_INT 2
51455: PPUSH
51456: CALL_OW 273
51460: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51461: LD_VAR 0 11
51465: PPUSH
51466: LD_VAR 0 12
51470: PPUSH
51471: CALL_OW 488
51475: PUSH
51476: LD_VAR 0 11
51480: PPUSH
51481: LD_VAR 0 12
51485: PPUSH
51486: CALL_OW 428
51490: NOT
51491: AND
51492: IFFALSE 51515
// begin ComMoveXY ( tmp , _x , _y ) ;
51494: LD_VAR 0 13
51498: PPUSH
51499: LD_VAR 0 11
51503: PPUSH
51504: LD_VAR 0 12
51508: PPUSH
51509: CALL_OW 111
// break ;
51513: GO 51517
// end ; end ;
51515: GO 51402
51517: POP
51518: POP
// end ; end ;
51519: GO 50844
51521: POP
51522: POP
// end ;
51523: LD_VAR 0 8
51527: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51528: LD_INT 0
51530: PPUSH
// result := true ;
51531: LD_ADDR_VAR 0 3
51535: PUSH
51536: LD_INT 1
51538: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51539: LD_VAR 0 2
51543: PUSH
51544: LD_INT 24
51546: DOUBLE
51547: EQUAL
51548: IFTRUE 51558
51550: LD_INT 33
51552: DOUBLE
51553: EQUAL
51554: IFTRUE 51558
51556: GO 51583
51558: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51559: LD_ADDR_VAR 0 3
51563: PUSH
51564: LD_INT 32
51566: PPUSH
51567: LD_VAR 0 1
51571: PPUSH
51572: CALL_OW 321
51576: PUSH
51577: LD_INT 2
51579: EQUAL
51580: ST_TO_ADDR
51581: GO 51899
51583: LD_INT 20
51585: DOUBLE
51586: EQUAL
51587: IFTRUE 51591
51589: GO 51616
51591: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51592: LD_ADDR_VAR 0 3
51596: PUSH
51597: LD_INT 6
51599: PPUSH
51600: LD_VAR 0 1
51604: PPUSH
51605: CALL_OW 321
51609: PUSH
51610: LD_INT 2
51612: EQUAL
51613: ST_TO_ADDR
51614: GO 51899
51616: LD_INT 22
51618: DOUBLE
51619: EQUAL
51620: IFTRUE 51630
51622: LD_INT 36
51624: DOUBLE
51625: EQUAL
51626: IFTRUE 51630
51628: GO 51655
51630: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51631: LD_ADDR_VAR 0 3
51635: PUSH
51636: LD_INT 15
51638: PPUSH
51639: LD_VAR 0 1
51643: PPUSH
51644: CALL_OW 321
51648: PUSH
51649: LD_INT 2
51651: EQUAL
51652: ST_TO_ADDR
51653: GO 51899
51655: LD_INT 30
51657: DOUBLE
51658: EQUAL
51659: IFTRUE 51663
51661: GO 51688
51663: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51664: LD_ADDR_VAR 0 3
51668: PUSH
51669: LD_INT 20
51671: PPUSH
51672: LD_VAR 0 1
51676: PPUSH
51677: CALL_OW 321
51681: PUSH
51682: LD_INT 2
51684: EQUAL
51685: ST_TO_ADDR
51686: GO 51899
51688: LD_INT 28
51690: DOUBLE
51691: EQUAL
51692: IFTRUE 51702
51694: LD_INT 21
51696: DOUBLE
51697: EQUAL
51698: IFTRUE 51702
51700: GO 51727
51702: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51703: LD_ADDR_VAR 0 3
51707: PUSH
51708: LD_INT 21
51710: PPUSH
51711: LD_VAR 0 1
51715: PPUSH
51716: CALL_OW 321
51720: PUSH
51721: LD_INT 2
51723: EQUAL
51724: ST_TO_ADDR
51725: GO 51899
51727: LD_INT 16
51729: DOUBLE
51730: EQUAL
51731: IFTRUE 51735
51733: GO 51760
51735: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51736: LD_ADDR_VAR 0 3
51740: PUSH
51741: LD_INT 84
51743: PPUSH
51744: LD_VAR 0 1
51748: PPUSH
51749: CALL_OW 321
51753: PUSH
51754: LD_INT 2
51756: EQUAL
51757: ST_TO_ADDR
51758: GO 51899
51760: LD_INT 19
51762: DOUBLE
51763: EQUAL
51764: IFTRUE 51774
51766: LD_INT 23
51768: DOUBLE
51769: EQUAL
51770: IFTRUE 51774
51772: GO 51799
51774: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51775: LD_ADDR_VAR 0 3
51779: PUSH
51780: LD_INT 83
51782: PPUSH
51783: LD_VAR 0 1
51787: PPUSH
51788: CALL_OW 321
51792: PUSH
51793: LD_INT 2
51795: EQUAL
51796: ST_TO_ADDR
51797: GO 51899
51799: LD_INT 17
51801: DOUBLE
51802: EQUAL
51803: IFTRUE 51807
51805: GO 51832
51807: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51808: LD_ADDR_VAR 0 3
51812: PUSH
51813: LD_INT 39
51815: PPUSH
51816: LD_VAR 0 1
51820: PPUSH
51821: CALL_OW 321
51825: PUSH
51826: LD_INT 2
51828: EQUAL
51829: ST_TO_ADDR
51830: GO 51899
51832: LD_INT 18
51834: DOUBLE
51835: EQUAL
51836: IFTRUE 51840
51838: GO 51865
51840: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51841: LD_ADDR_VAR 0 3
51845: PUSH
51846: LD_INT 40
51848: PPUSH
51849: LD_VAR 0 1
51853: PPUSH
51854: CALL_OW 321
51858: PUSH
51859: LD_INT 2
51861: EQUAL
51862: ST_TO_ADDR
51863: GO 51899
51865: LD_INT 27
51867: DOUBLE
51868: EQUAL
51869: IFTRUE 51873
51871: GO 51898
51873: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51874: LD_ADDR_VAR 0 3
51878: PUSH
51879: LD_INT 35
51881: PPUSH
51882: LD_VAR 0 1
51886: PPUSH
51887: CALL_OW 321
51891: PUSH
51892: LD_INT 2
51894: EQUAL
51895: ST_TO_ADDR
51896: GO 51899
51898: POP
// end ;
51899: LD_VAR 0 3
51903: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
51904: LD_INT 0
51906: PPUSH
51907: PPUSH
51908: PPUSH
51909: PPUSH
51910: PPUSH
51911: PPUSH
51912: PPUSH
51913: PPUSH
51914: PPUSH
51915: PPUSH
51916: PPUSH
// result := false ;
51917: LD_ADDR_VAR 0 6
51921: PUSH
51922: LD_INT 0
51924: ST_TO_ADDR
// if btype = b_depot then
51925: LD_VAR 0 2
51929: PUSH
51930: LD_INT 0
51932: EQUAL
51933: IFFALSE 51945
// begin result := true ;
51935: LD_ADDR_VAR 0 6
51939: PUSH
51940: LD_INT 1
51942: ST_TO_ADDR
// exit ;
51943: GO 52771
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51945: LD_VAR 0 1
51949: NOT
51950: PUSH
51951: LD_VAR 0 1
51955: PPUSH
51956: CALL_OW 266
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: LD_INT 1
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: IN
51971: NOT
51972: OR
51973: PUSH
51974: LD_VAR 0 2
51978: NOT
51979: OR
51980: PUSH
51981: LD_VAR 0 5
51985: PUSH
51986: LD_INT 0
51988: PUSH
51989: LD_INT 1
51991: PUSH
51992: LD_INT 2
51994: PUSH
51995: LD_INT 3
51997: PUSH
51998: LD_INT 4
52000: PUSH
52001: LD_INT 5
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: IN
52012: NOT
52013: OR
52014: PUSH
52015: LD_VAR 0 3
52019: PPUSH
52020: LD_VAR 0 4
52024: PPUSH
52025: CALL_OW 488
52029: NOT
52030: OR
52031: IFFALSE 52035
// exit ;
52033: GO 52771
// side := GetSide ( depot ) ;
52035: LD_ADDR_VAR 0 9
52039: PUSH
52040: LD_VAR 0 1
52044: PPUSH
52045: CALL_OW 255
52049: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52050: LD_VAR 0 9
52054: PPUSH
52055: LD_VAR 0 2
52059: PPUSH
52060: CALL 51528 0 2
52064: NOT
52065: IFFALSE 52069
// exit ;
52067: GO 52771
// pom := GetBase ( depot ) ;
52069: LD_ADDR_VAR 0 10
52073: PUSH
52074: LD_VAR 0 1
52078: PPUSH
52079: CALL_OW 274
52083: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52084: LD_ADDR_VAR 0 11
52088: PUSH
52089: LD_VAR 0 2
52093: PPUSH
52094: LD_VAR 0 1
52098: PPUSH
52099: CALL_OW 248
52103: PPUSH
52104: CALL_OW 450
52108: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52109: LD_VAR 0 10
52113: PPUSH
52114: LD_INT 1
52116: PPUSH
52117: CALL_OW 275
52121: PUSH
52122: LD_VAR 0 11
52126: PUSH
52127: LD_INT 1
52129: ARRAY
52130: GREATEREQUAL
52131: PUSH
52132: LD_VAR 0 10
52136: PPUSH
52137: LD_INT 2
52139: PPUSH
52140: CALL_OW 275
52144: PUSH
52145: LD_VAR 0 11
52149: PUSH
52150: LD_INT 2
52152: ARRAY
52153: GREATEREQUAL
52154: AND
52155: PUSH
52156: LD_VAR 0 10
52160: PPUSH
52161: LD_INT 3
52163: PPUSH
52164: CALL_OW 275
52168: PUSH
52169: LD_VAR 0 11
52173: PUSH
52174: LD_INT 3
52176: ARRAY
52177: GREATEREQUAL
52178: AND
52179: NOT
52180: IFFALSE 52184
// exit ;
52182: GO 52771
// if GetBType ( depot ) = b_depot then
52184: LD_VAR 0 1
52188: PPUSH
52189: CALL_OW 266
52193: PUSH
52194: LD_INT 0
52196: EQUAL
52197: IFFALSE 52209
// dist := 28 else
52199: LD_ADDR_VAR 0 14
52203: PUSH
52204: LD_INT 28
52206: ST_TO_ADDR
52207: GO 52217
// dist := 36 ;
52209: LD_ADDR_VAR 0 14
52213: PUSH
52214: LD_INT 36
52216: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52217: LD_VAR 0 1
52221: PPUSH
52222: LD_VAR 0 3
52226: PPUSH
52227: LD_VAR 0 4
52231: PPUSH
52232: CALL_OW 297
52236: PUSH
52237: LD_VAR 0 14
52241: GREATER
52242: IFFALSE 52246
// exit ;
52244: GO 52771
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52246: LD_ADDR_VAR 0 12
52250: PUSH
52251: LD_VAR 0 2
52255: PPUSH
52256: LD_VAR 0 3
52260: PPUSH
52261: LD_VAR 0 4
52265: PPUSH
52266: LD_VAR 0 5
52270: PPUSH
52271: LD_VAR 0 1
52275: PPUSH
52276: CALL_OW 248
52280: PPUSH
52281: LD_INT 0
52283: PPUSH
52284: CALL 52776 0 6
52288: ST_TO_ADDR
// if not hexes then
52289: LD_VAR 0 12
52293: NOT
52294: IFFALSE 52298
// exit ;
52296: GO 52771
// hex := GetHexInfo ( x , y ) ;
52298: LD_ADDR_VAR 0 15
52302: PUSH
52303: LD_VAR 0 3
52307: PPUSH
52308: LD_VAR 0 4
52312: PPUSH
52313: CALL_OW 546
52317: ST_TO_ADDR
// if hex [ 1 ] then
52318: LD_VAR 0 15
52322: PUSH
52323: LD_INT 1
52325: ARRAY
52326: IFFALSE 52330
// exit ;
52328: GO 52771
// height := hex [ 2 ] ;
52330: LD_ADDR_VAR 0 13
52334: PUSH
52335: LD_VAR 0 15
52339: PUSH
52340: LD_INT 2
52342: ARRAY
52343: ST_TO_ADDR
// for i = 1 to hexes do
52344: LD_ADDR_VAR 0 7
52348: PUSH
52349: DOUBLE
52350: LD_INT 1
52352: DEC
52353: ST_TO_ADDR
52354: LD_VAR 0 12
52358: PUSH
52359: FOR_TO
52360: IFFALSE 52690
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52362: LD_VAR 0 12
52366: PUSH
52367: LD_VAR 0 7
52371: ARRAY
52372: PUSH
52373: LD_INT 1
52375: ARRAY
52376: PPUSH
52377: LD_VAR 0 12
52381: PUSH
52382: LD_VAR 0 7
52386: ARRAY
52387: PUSH
52388: LD_INT 2
52390: ARRAY
52391: PPUSH
52392: CALL_OW 488
52396: NOT
52397: PUSH
52398: LD_VAR 0 12
52402: PUSH
52403: LD_VAR 0 7
52407: ARRAY
52408: PUSH
52409: LD_INT 1
52411: ARRAY
52412: PPUSH
52413: LD_VAR 0 12
52417: PUSH
52418: LD_VAR 0 7
52422: ARRAY
52423: PUSH
52424: LD_INT 2
52426: ARRAY
52427: PPUSH
52428: CALL_OW 428
52432: PUSH
52433: LD_INT 0
52435: GREATER
52436: OR
52437: PUSH
52438: LD_VAR 0 12
52442: PUSH
52443: LD_VAR 0 7
52447: ARRAY
52448: PUSH
52449: LD_INT 1
52451: ARRAY
52452: PPUSH
52453: LD_VAR 0 12
52457: PUSH
52458: LD_VAR 0 7
52462: ARRAY
52463: PUSH
52464: LD_INT 2
52466: ARRAY
52467: PPUSH
52468: CALL_OW 351
52472: OR
52473: IFFALSE 52479
// exit ;
52475: POP
52476: POP
52477: GO 52771
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52479: LD_ADDR_VAR 0 8
52483: PUSH
52484: LD_VAR 0 12
52488: PUSH
52489: LD_VAR 0 7
52493: ARRAY
52494: PUSH
52495: LD_INT 1
52497: ARRAY
52498: PPUSH
52499: LD_VAR 0 12
52503: PUSH
52504: LD_VAR 0 7
52508: ARRAY
52509: PUSH
52510: LD_INT 2
52512: ARRAY
52513: PPUSH
52514: CALL_OW 546
52518: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52519: LD_VAR 0 8
52523: PUSH
52524: LD_INT 1
52526: ARRAY
52527: PUSH
52528: LD_VAR 0 8
52532: PUSH
52533: LD_INT 2
52535: ARRAY
52536: PUSH
52537: LD_VAR 0 13
52541: PUSH
52542: LD_INT 2
52544: PLUS
52545: GREATER
52546: OR
52547: PUSH
52548: LD_VAR 0 8
52552: PUSH
52553: LD_INT 2
52555: ARRAY
52556: PUSH
52557: LD_VAR 0 13
52561: PUSH
52562: LD_INT 2
52564: MINUS
52565: LESS
52566: OR
52567: PUSH
52568: LD_VAR 0 8
52572: PUSH
52573: LD_INT 3
52575: ARRAY
52576: PUSH
52577: LD_INT 0
52579: PUSH
52580: LD_INT 8
52582: PUSH
52583: LD_INT 9
52585: PUSH
52586: LD_INT 10
52588: PUSH
52589: LD_INT 11
52591: PUSH
52592: LD_INT 12
52594: PUSH
52595: LD_INT 13
52597: PUSH
52598: LD_INT 16
52600: PUSH
52601: LD_INT 17
52603: PUSH
52604: LD_INT 18
52606: PUSH
52607: LD_INT 19
52609: PUSH
52610: LD_INT 20
52612: PUSH
52613: LD_INT 21
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: IN
52631: NOT
52632: OR
52633: PUSH
52634: LD_VAR 0 8
52638: PUSH
52639: LD_INT 5
52641: ARRAY
52642: NOT
52643: OR
52644: PUSH
52645: LD_VAR 0 8
52649: PUSH
52650: LD_INT 6
52652: ARRAY
52653: PUSH
52654: LD_INT 1
52656: PUSH
52657: LD_INT 2
52659: PUSH
52660: LD_INT 7
52662: PUSH
52663: LD_INT 9
52665: PUSH
52666: LD_INT 10
52668: PUSH
52669: LD_INT 11
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: IN
52680: NOT
52681: OR
52682: IFFALSE 52688
// exit ;
52684: POP
52685: POP
52686: GO 52771
// end ;
52688: GO 52359
52690: POP
52691: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52692: LD_VAR 0 9
52696: PPUSH
52697: LD_VAR 0 3
52701: PPUSH
52702: LD_VAR 0 4
52706: PPUSH
52707: LD_INT 20
52709: PPUSH
52710: CALL 44694 0 4
52714: PUSH
52715: LD_INT 4
52717: ARRAY
52718: IFFALSE 52722
// exit ;
52720: GO 52771
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52722: LD_VAR 0 2
52726: PUSH
52727: LD_INT 29
52729: PUSH
52730: LD_INT 30
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: IN
52737: PUSH
52738: LD_VAR 0 3
52742: PPUSH
52743: LD_VAR 0 4
52747: PPUSH
52748: LD_VAR 0 9
52752: PPUSH
52753: CALL_OW 440
52757: NOT
52758: AND
52759: IFFALSE 52763
// exit ;
52761: GO 52771
// result := true ;
52763: LD_ADDR_VAR 0 6
52767: PUSH
52768: LD_INT 1
52770: ST_TO_ADDR
// end ;
52771: LD_VAR 0 6
52775: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52776: LD_INT 0
52778: PPUSH
52779: PPUSH
52780: PPUSH
52781: PPUSH
52782: PPUSH
52783: PPUSH
52784: PPUSH
52785: PPUSH
52786: PPUSH
52787: PPUSH
52788: PPUSH
52789: PPUSH
52790: PPUSH
52791: PPUSH
52792: PPUSH
52793: PPUSH
52794: PPUSH
52795: PPUSH
52796: PPUSH
52797: PPUSH
52798: PPUSH
52799: PPUSH
52800: PPUSH
52801: PPUSH
52802: PPUSH
52803: PPUSH
52804: PPUSH
52805: PPUSH
52806: PPUSH
52807: PPUSH
52808: PPUSH
52809: PPUSH
52810: PPUSH
52811: PPUSH
52812: PPUSH
52813: PPUSH
52814: PPUSH
52815: PPUSH
52816: PPUSH
52817: PPUSH
52818: PPUSH
52819: PPUSH
52820: PPUSH
52821: PPUSH
52822: PPUSH
52823: PPUSH
52824: PPUSH
52825: PPUSH
52826: PPUSH
52827: PPUSH
52828: PPUSH
52829: PPUSH
52830: PPUSH
52831: PPUSH
52832: PPUSH
52833: PPUSH
52834: PPUSH
52835: PPUSH
// result = [ ] ;
52836: LD_ADDR_VAR 0 7
52840: PUSH
52841: EMPTY
52842: ST_TO_ADDR
// temp_list = [ ] ;
52843: LD_ADDR_VAR 0 9
52847: PUSH
52848: EMPTY
52849: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52850: LD_VAR 0 4
52854: PUSH
52855: LD_INT 0
52857: PUSH
52858: LD_INT 1
52860: PUSH
52861: LD_INT 2
52863: PUSH
52864: LD_INT 3
52866: PUSH
52867: LD_INT 4
52869: PUSH
52870: LD_INT 5
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: IN
52881: NOT
52882: PUSH
52883: LD_VAR 0 1
52887: PUSH
52888: LD_INT 0
52890: PUSH
52891: LD_INT 1
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: IN
52898: PUSH
52899: LD_VAR 0 5
52903: PUSH
52904: LD_INT 1
52906: PUSH
52907: LD_INT 2
52909: PUSH
52910: LD_INT 3
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: LIST
52917: IN
52918: NOT
52919: AND
52920: OR
52921: IFFALSE 52925
// exit ;
52923: GO 71316
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52925: LD_VAR 0 1
52929: PUSH
52930: LD_INT 6
52932: PUSH
52933: LD_INT 7
52935: PUSH
52936: LD_INT 8
52938: PUSH
52939: LD_INT 13
52941: PUSH
52942: LD_INT 12
52944: PUSH
52945: LD_INT 15
52947: PUSH
52948: LD_INT 11
52950: PUSH
52951: LD_INT 14
52953: PUSH
52954: LD_INT 10
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: IN
52968: IFFALSE 52978
// btype = b_lab ;
52970: LD_ADDR_VAR 0 1
52974: PUSH
52975: LD_INT 6
52977: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52978: LD_VAR 0 6
52982: PUSH
52983: LD_INT 0
52985: PUSH
52986: LD_INT 1
52988: PUSH
52989: LD_INT 2
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: LIST
52996: IN
52997: NOT
52998: PUSH
52999: LD_VAR 0 1
53003: PUSH
53004: LD_INT 0
53006: PUSH
53007: LD_INT 1
53009: PUSH
53010: LD_INT 2
53012: PUSH
53013: LD_INT 3
53015: PUSH
53016: LD_INT 6
53018: PUSH
53019: LD_INT 36
53021: PUSH
53022: LD_INT 4
53024: PUSH
53025: LD_INT 5
53027: PUSH
53028: LD_INT 31
53030: PUSH
53031: LD_INT 32
53033: PUSH
53034: LD_INT 33
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: IN
53050: NOT
53051: PUSH
53052: LD_VAR 0 6
53056: PUSH
53057: LD_INT 1
53059: EQUAL
53060: AND
53061: OR
53062: PUSH
53063: LD_VAR 0 1
53067: PUSH
53068: LD_INT 2
53070: PUSH
53071: LD_INT 3
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: IN
53078: NOT
53079: PUSH
53080: LD_VAR 0 6
53084: PUSH
53085: LD_INT 2
53087: EQUAL
53088: AND
53089: OR
53090: IFFALSE 53100
// mode = 0 ;
53092: LD_ADDR_VAR 0 6
53096: PUSH
53097: LD_INT 0
53099: ST_TO_ADDR
// case mode of 0 :
53100: LD_VAR 0 6
53104: PUSH
53105: LD_INT 0
53107: DOUBLE
53108: EQUAL
53109: IFTRUE 53113
53111: GO 64566
53113: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53114: LD_ADDR_VAR 0 11
53118: PUSH
53119: LD_INT 0
53121: PUSH
53122: LD_INT 0
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 0
53131: PUSH
53132: LD_INT 1
53134: NEG
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 1
53142: PUSH
53143: LD_INT 0
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 1
53152: PUSH
53153: LD_INT 1
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 0
53162: PUSH
53163: LD_INT 1
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 1
53172: NEG
53173: PUSH
53174: LD_INT 0
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 1
53183: NEG
53184: PUSH
53185: LD_INT 1
53187: NEG
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 1
53195: NEG
53196: PUSH
53197: LD_INT 2
53199: NEG
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 0
53207: PUSH
53208: LD_INT 2
53210: NEG
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 1
53218: PUSH
53219: LD_INT 1
53221: NEG
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 1
53229: PUSH
53230: LD_INT 2
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 0
53239: PUSH
53240: LD_INT 2
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 1
53249: NEG
53250: PUSH
53251: LD_INT 1
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 1
53260: PUSH
53261: LD_INT 3
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 0
53270: PUSH
53271: LD_INT 3
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 1
53280: NEG
53281: PUSH
53282: LD_INT 2
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53307: LD_ADDR_VAR 0 12
53311: PUSH
53312: LD_INT 0
53314: PUSH
53315: LD_INT 0
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 0
53324: PUSH
53325: LD_INT 1
53327: NEG
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 1
53335: PUSH
53336: LD_INT 0
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 1
53345: PUSH
53346: LD_INT 1
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 0
53355: PUSH
53356: LD_INT 1
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 1
53365: NEG
53366: PUSH
53367: LD_INT 0
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 1
53376: NEG
53377: PUSH
53378: LD_INT 1
53380: NEG
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 1
53388: PUSH
53389: LD_INT 1
53391: NEG
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 2
53399: PUSH
53400: LD_INT 0
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 2
53409: PUSH
53410: LD_INT 1
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 1
53419: NEG
53420: PUSH
53421: LD_INT 1
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 2
53430: NEG
53431: PUSH
53432: LD_INT 0
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 2
53441: NEG
53442: PUSH
53443: LD_INT 1
53445: NEG
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 2
53453: NEG
53454: PUSH
53455: LD_INT 1
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 3
53464: NEG
53465: PUSH
53466: LD_INT 0
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 3
53475: NEG
53476: PUSH
53477: LD_INT 1
53479: NEG
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53503: LD_ADDR_VAR 0 13
53507: PUSH
53508: LD_INT 0
53510: PUSH
53511: LD_INT 0
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 0
53520: PUSH
53521: LD_INT 1
53523: NEG
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 1
53531: PUSH
53532: LD_INT 0
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 1
53541: PUSH
53542: LD_INT 1
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 0
53551: PUSH
53552: LD_INT 1
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 1
53561: NEG
53562: PUSH
53563: LD_INT 0
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 1
53572: NEG
53573: PUSH
53574: LD_INT 1
53576: NEG
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 1
53584: NEG
53585: PUSH
53586: LD_INT 2
53588: NEG
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 2
53596: PUSH
53597: LD_INT 1
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 2
53606: PUSH
53607: LD_INT 2
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 1
53616: PUSH
53617: LD_INT 2
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 2
53626: NEG
53627: PUSH
53628: LD_INT 1
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 2
53638: NEG
53639: PUSH
53640: LD_INT 2
53642: NEG
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 2
53650: NEG
53651: PUSH
53652: LD_INT 3
53654: NEG
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 3
53662: NEG
53663: PUSH
53664: LD_INT 2
53666: NEG
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 3
53674: NEG
53675: PUSH
53676: LD_INT 3
53678: NEG
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53702: LD_ADDR_VAR 0 14
53706: PUSH
53707: LD_INT 0
53709: PUSH
53710: LD_INT 0
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 0
53719: PUSH
53720: LD_INT 1
53722: NEG
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 1
53730: PUSH
53731: LD_INT 0
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 1
53740: PUSH
53741: LD_INT 1
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 0
53750: PUSH
53751: LD_INT 1
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 1
53760: NEG
53761: PUSH
53762: LD_INT 0
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 1
53771: NEG
53772: PUSH
53773: LD_INT 1
53775: NEG
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 1
53783: NEG
53784: PUSH
53785: LD_INT 2
53787: NEG
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 0
53795: PUSH
53796: LD_INT 2
53798: NEG
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 1
53806: PUSH
53807: LD_INT 1
53809: NEG
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 1
53817: PUSH
53818: LD_INT 2
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 0
53827: PUSH
53828: LD_INT 2
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 1
53837: NEG
53838: PUSH
53839: LD_INT 1
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 1
53848: NEG
53849: PUSH
53850: LD_INT 3
53852: NEG
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 0
53860: PUSH
53861: LD_INT 3
53863: NEG
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 1
53871: PUSH
53872: LD_INT 2
53874: NEG
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53898: LD_ADDR_VAR 0 15
53902: PUSH
53903: LD_INT 0
53905: PUSH
53906: LD_INT 0
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 0
53915: PUSH
53916: LD_INT 1
53918: NEG
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 1
53926: PUSH
53927: LD_INT 0
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 1
53936: PUSH
53937: LD_INT 1
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 0
53946: PUSH
53947: LD_INT 1
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 1
53956: NEG
53957: PUSH
53958: LD_INT 0
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 1
53967: NEG
53968: PUSH
53969: LD_INT 1
53971: NEG
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 1
53979: PUSH
53980: LD_INT 1
53982: NEG
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 2
53990: PUSH
53991: LD_INT 0
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 2
54000: PUSH
54001: LD_INT 1
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 1
54010: NEG
54011: PUSH
54012: LD_INT 1
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 2
54021: NEG
54022: PUSH
54023: LD_INT 0
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 2
54032: NEG
54033: PUSH
54034: LD_INT 1
54036: NEG
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 2
54044: PUSH
54045: LD_INT 1
54047: NEG
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 3
54055: PUSH
54056: LD_INT 0
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 3
54065: PUSH
54066: LD_INT 1
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54091: LD_ADDR_VAR 0 16
54095: PUSH
54096: LD_INT 0
54098: PUSH
54099: LD_INT 0
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 0
54108: PUSH
54109: LD_INT 1
54111: NEG
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 1
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 1
54129: PUSH
54130: LD_INT 1
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 0
54139: PUSH
54140: LD_INT 1
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 1
54149: NEG
54150: PUSH
54151: LD_INT 0
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 1
54160: NEG
54161: PUSH
54162: LD_INT 1
54164: NEG
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 1
54172: NEG
54173: PUSH
54174: LD_INT 2
54176: NEG
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 2
54184: PUSH
54185: LD_INT 1
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 2
54194: PUSH
54195: LD_INT 2
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 1
54204: PUSH
54205: LD_INT 2
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 2
54214: NEG
54215: PUSH
54216: LD_INT 1
54218: NEG
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 2
54226: NEG
54227: PUSH
54228: LD_INT 2
54230: NEG
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 3
54238: PUSH
54239: LD_INT 2
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 3
54248: PUSH
54249: LD_INT 3
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 2
54258: PUSH
54259: LD_INT 3
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54284: LD_ADDR_VAR 0 17
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: LD_INT 0
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 0
54301: PUSH
54302: LD_INT 1
54304: NEG
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 1
54312: PUSH
54313: LD_INT 0
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 1
54322: PUSH
54323: LD_INT 1
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 0
54332: PUSH
54333: LD_INT 1
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 1
54342: NEG
54343: PUSH
54344: LD_INT 0
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 1
54353: NEG
54354: PUSH
54355: LD_INT 1
54357: NEG
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 1
54365: NEG
54366: PUSH
54367: LD_INT 2
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 0
54377: PUSH
54378: LD_INT 2
54380: NEG
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 1
54388: PUSH
54389: LD_INT 1
54391: NEG
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 2
54399: PUSH
54400: LD_INT 0
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 2
54409: PUSH
54410: LD_INT 1
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 2
54419: PUSH
54420: LD_INT 2
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 1
54429: PUSH
54430: LD_INT 2
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 0
54439: PUSH
54440: LD_INT 2
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 1
54449: NEG
54450: PUSH
54451: LD_INT 1
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 2
54460: NEG
54461: PUSH
54462: LD_INT 0
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 2
54471: NEG
54472: PUSH
54473: LD_INT 1
54475: NEG
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 2
54483: NEG
54484: PUSH
54485: LD_INT 2
54487: NEG
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54514: LD_ADDR_VAR 0 18
54518: PUSH
54519: LD_INT 0
54521: PUSH
54522: LD_INT 0
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 0
54531: PUSH
54532: LD_INT 1
54534: NEG
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 1
54542: PUSH
54543: LD_INT 0
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 1
54552: PUSH
54553: LD_INT 1
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 0
54562: PUSH
54563: LD_INT 1
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 1
54572: NEG
54573: PUSH
54574: LD_INT 0
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 1
54583: NEG
54584: PUSH
54585: LD_INT 1
54587: NEG
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 1
54595: NEG
54596: PUSH
54597: LD_INT 2
54599: NEG
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 0
54607: PUSH
54608: LD_INT 2
54610: NEG
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 1
54618: PUSH
54619: LD_INT 1
54621: NEG
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 2
54629: PUSH
54630: LD_INT 0
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 2
54639: PUSH
54640: LD_INT 1
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 2
54649: PUSH
54650: LD_INT 2
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 1
54659: PUSH
54660: LD_INT 2
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 0
54669: PUSH
54670: LD_INT 2
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 1
54679: NEG
54680: PUSH
54681: LD_INT 1
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 2
54690: NEG
54691: PUSH
54692: LD_INT 0
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 2
54701: NEG
54702: PUSH
54703: LD_INT 1
54705: NEG
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 2
54713: NEG
54714: PUSH
54715: LD_INT 2
54717: NEG
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54744: LD_ADDR_VAR 0 19
54748: PUSH
54749: LD_INT 0
54751: PUSH
54752: LD_INT 0
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 0
54761: PUSH
54762: LD_INT 1
54764: NEG
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: PUSH
54773: LD_INT 0
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 1
54782: PUSH
54783: LD_INT 1
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 0
54792: PUSH
54793: LD_INT 1
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 1
54802: NEG
54803: PUSH
54804: LD_INT 0
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 1
54813: NEG
54814: PUSH
54815: LD_INT 1
54817: NEG
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 1
54825: NEG
54826: PUSH
54827: LD_INT 2
54829: NEG
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 0
54837: PUSH
54838: LD_INT 2
54840: NEG
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 1
54848: PUSH
54849: LD_INT 1
54851: NEG
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 2
54859: PUSH
54860: LD_INT 0
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 2
54869: PUSH
54870: LD_INT 1
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 2
54879: PUSH
54880: LD_INT 2
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 1
54889: PUSH
54890: LD_INT 2
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 0
54899: PUSH
54900: LD_INT 2
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 1
54909: NEG
54910: PUSH
54911: LD_INT 1
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 2
54920: NEG
54921: PUSH
54922: LD_INT 0
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 2
54931: NEG
54932: PUSH
54933: LD_INT 1
54935: NEG
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 2
54943: NEG
54944: PUSH
54945: LD_INT 2
54947: NEG
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54974: LD_ADDR_VAR 0 20
54978: PUSH
54979: LD_INT 0
54981: PUSH
54982: LD_INT 0
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 0
54991: PUSH
54992: LD_INT 1
54994: NEG
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 1
55002: PUSH
55003: LD_INT 0
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 1
55012: PUSH
55013: LD_INT 1
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 0
55022: PUSH
55023: LD_INT 1
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 1
55032: NEG
55033: PUSH
55034: LD_INT 0
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 1
55043: NEG
55044: PUSH
55045: LD_INT 1
55047: NEG
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 1
55055: NEG
55056: PUSH
55057: LD_INT 2
55059: NEG
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 0
55067: PUSH
55068: LD_INT 2
55070: NEG
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 1
55078: PUSH
55079: LD_INT 1
55081: NEG
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 2
55089: PUSH
55090: LD_INT 0
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 2
55099: PUSH
55100: LD_INT 1
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 2
55109: PUSH
55110: LD_INT 2
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 1
55119: PUSH
55120: LD_INT 2
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 0
55129: PUSH
55130: LD_INT 2
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 1
55139: NEG
55140: PUSH
55141: LD_INT 1
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 2
55150: NEG
55151: PUSH
55152: LD_INT 0
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 2
55161: NEG
55162: PUSH
55163: LD_INT 1
55165: NEG
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 2
55173: NEG
55174: PUSH
55175: LD_INT 2
55177: NEG
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55204: LD_ADDR_VAR 0 21
55208: PUSH
55209: LD_INT 0
55211: PUSH
55212: LD_INT 0
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 0
55221: PUSH
55222: LD_INT 1
55224: NEG
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 1
55232: PUSH
55233: LD_INT 0
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 1
55242: PUSH
55243: LD_INT 1
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 0
55252: PUSH
55253: LD_INT 1
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 1
55262: NEG
55263: PUSH
55264: LD_INT 0
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 1
55273: NEG
55274: PUSH
55275: LD_INT 1
55277: NEG
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 1
55285: NEG
55286: PUSH
55287: LD_INT 2
55289: NEG
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 0
55297: PUSH
55298: LD_INT 2
55300: NEG
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 1
55308: PUSH
55309: LD_INT 1
55311: NEG
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 2
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 2
55329: PUSH
55330: LD_INT 1
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 2
55339: PUSH
55340: LD_INT 2
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 1
55349: PUSH
55350: LD_INT 2
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 0
55359: PUSH
55360: LD_INT 2
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 1
55369: NEG
55370: PUSH
55371: LD_INT 1
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 2
55380: NEG
55381: PUSH
55382: LD_INT 0
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 2
55391: NEG
55392: PUSH
55393: LD_INT 1
55395: NEG
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 2
55403: NEG
55404: PUSH
55405: LD_INT 2
55407: NEG
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55434: LD_ADDR_VAR 0 22
55438: PUSH
55439: LD_INT 0
55441: PUSH
55442: LD_INT 0
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 0
55451: PUSH
55452: LD_INT 1
55454: NEG
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 1
55462: PUSH
55463: LD_INT 0
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 1
55472: PUSH
55473: LD_INT 1
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 0
55482: PUSH
55483: LD_INT 1
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 1
55492: NEG
55493: PUSH
55494: LD_INT 0
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 1
55503: NEG
55504: PUSH
55505: LD_INT 1
55507: NEG
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 1
55515: NEG
55516: PUSH
55517: LD_INT 2
55519: NEG
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 0
55527: PUSH
55528: LD_INT 2
55530: NEG
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 1
55538: PUSH
55539: LD_INT 1
55541: NEG
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 2
55549: PUSH
55550: LD_INT 0
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 2
55559: PUSH
55560: LD_INT 1
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 2
55569: PUSH
55570: LD_INT 2
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 1
55579: PUSH
55580: LD_INT 2
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 0
55589: PUSH
55590: LD_INT 2
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 1
55599: NEG
55600: PUSH
55601: LD_INT 1
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 2
55610: NEG
55611: PUSH
55612: LD_INT 0
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 2
55621: NEG
55622: PUSH
55623: LD_INT 1
55625: NEG
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 2
55633: NEG
55634: PUSH
55635: LD_INT 2
55637: NEG
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55664: LD_ADDR_VAR 0 23
55668: PUSH
55669: LD_INT 0
55671: PUSH
55672: LD_INT 0
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 0
55681: PUSH
55682: LD_INT 1
55684: NEG
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 1
55692: PUSH
55693: LD_INT 0
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 1
55702: PUSH
55703: LD_INT 1
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 0
55712: PUSH
55713: LD_INT 1
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 1
55722: NEG
55723: PUSH
55724: LD_INT 0
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 1
55733: NEG
55734: PUSH
55735: LD_INT 1
55737: NEG
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 1
55745: NEG
55746: PUSH
55747: LD_INT 2
55749: NEG
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 0
55757: PUSH
55758: LD_INT 2
55760: NEG
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 1
55768: PUSH
55769: LD_INT 1
55771: NEG
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 2
55779: PUSH
55780: LD_INT 0
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 2
55789: PUSH
55790: LD_INT 1
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 2
55799: PUSH
55800: LD_INT 2
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 1
55809: PUSH
55810: LD_INT 2
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 0
55819: PUSH
55820: LD_INT 2
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 1
55829: NEG
55830: PUSH
55831: LD_INT 1
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 2
55840: NEG
55841: PUSH
55842: LD_INT 0
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 2
55851: NEG
55852: PUSH
55853: LD_INT 1
55855: NEG
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 2
55863: NEG
55864: PUSH
55865: LD_INT 2
55867: NEG
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 2
55875: NEG
55876: PUSH
55877: LD_INT 3
55879: NEG
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 1
55887: NEG
55888: PUSH
55889: LD_INT 3
55891: NEG
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 1
55899: PUSH
55900: LD_INT 2
55902: NEG
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 2
55910: PUSH
55911: LD_INT 1
55913: NEG
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55944: LD_ADDR_VAR 0 24
55948: PUSH
55949: LD_INT 0
55951: PUSH
55952: LD_INT 0
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 0
55961: PUSH
55962: LD_INT 1
55964: NEG
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 1
55972: PUSH
55973: LD_INT 0
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 1
55982: PUSH
55983: LD_INT 1
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 0
55992: PUSH
55993: LD_INT 1
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 1
56002: NEG
56003: PUSH
56004: LD_INT 0
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 1
56013: NEG
56014: PUSH
56015: LD_INT 1
56017: NEG
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 1
56025: NEG
56026: PUSH
56027: LD_INT 2
56029: NEG
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 0
56037: PUSH
56038: LD_INT 2
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 1
56048: PUSH
56049: LD_INT 1
56051: NEG
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 2
56059: PUSH
56060: LD_INT 0
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 2
56069: PUSH
56070: LD_INT 1
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 2
56079: PUSH
56080: LD_INT 2
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 1
56089: PUSH
56090: LD_INT 2
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 0
56099: PUSH
56100: LD_INT 2
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 1
56109: NEG
56110: PUSH
56111: LD_INT 1
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 2
56120: NEG
56121: PUSH
56122: LD_INT 0
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 2
56131: NEG
56132: PUSH
56133: LD_INT 1
56135: NEG
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 2
56143: NEG
56144: PUSH
56145: LD_INT 2
56147: NEG
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 1
56155: PUSH
56156: LD_INT 2
56158: NEG
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 2
56166: PUSH
56167: LD_INT 1
56169: NEG
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 3
56177: PUSH
56178: LD_INT 1
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 3
56187: PUSH
56188: LD_INT 2
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56220: LD_ADDR_VAR 0 25
56224: PUSH
56225: LD_INT 0
56227: PUSH
56228: LD_INT 0
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 0
56237: PUSH
56238: LD_INT 1
56240: NEG
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 1
56248: PUSH
56249: LD_INT 0
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 1
56258: PUSH
56259: LD_INT 1
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 0
56268: PUSH
56269: LD_INT 1
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 1
56278: NEG
56279: PUSH
56280: LD_INT 0
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 1
56289: NEG
56290: PUSH
56291: LD_INT 1
56293: NEG
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 1
56301: NEG
56302: PUSH
56303: LD_INT 2
56305: NEG
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 0
56313: PUSH
56314: LD_INT 2
56316: NEG
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 1
56324: PUSH
56325: LD_INT 1
56327: NEG
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 2
56335: PUSH
56336: LD_INT 0
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 2
56345: PUSH
56346: LD_INT 1
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 2
56355: PUSH
56356: LD_INT 2
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 1
56365: PUSH
56366: LD_INT 2
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 0
56375: PUSH
56376: LD_INT 2
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 1
56385: NEG
56386: PUSH
56387: LD_INT 1
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 2
56396: NEG
56397: PUSH
56398: LD_INT 0
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 2
56407: NEG
56408: PUSH
56409: LD_INT 1
56411: NEG
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 2
56419: NEG
56420: PUSH
56421: LD_INT 2
56423: NEG
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 3
56431: PUSH
56432: LD_INT 1
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 3
56441: PUSH
56442: LD_INT 2
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 2
56451: PUSH
56452: LD_INT 3
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 1
56461: PUSH
56462: LD_INT 3
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56494: LD_ADDR_VAR 0 26
56498: PUSH
56499: LD_INT 0
56501: PUSH
56502: LD_INT 0
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 0
56511: PUSH
56512: LD_INT 1
56514: NEG
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 1
56522: PUSH
56523: LD_INT 0
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 1
56532: PUSH
56533: LD_INT 1
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 0
56542: PUSH
56543: LD_INT 1
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 1
56552: NEG
56553: PUSH
56554: LD_INT 0
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 1
56563: NEG
56564: PUSH
56565: LD_INT 1
56567: NEG
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 1
56575: NEG
56576: PUSH
56577: LD_INT 2
56579: NEG
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 0
56587: PUSH
56588: LD_INT 2
56590: NEG
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 1
56598: PUSH
56599: LD_INT 1
56601: NEG
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 2
56609: PUSH
56610: LD_INT 0
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 2
56619: PUSH
56620: LD_INT 1
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 2
56629: PUSH
56630: LD_INT 2
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 1
56639: PUSH
56640: LD_INT 2
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 0
56649: PUSH
56650: LD_INT 2
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 1
56659: NEG
56660: PUSH
56661: LD_INT 1
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 2
56670: NEG
56671: PUSH
56672: LD_INT 0
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 2
56681: NEG
56682: PUSH
56683: LD_INT 1
56685: NEG
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 2
56693: NEG
56694: PUSH
56695: LD_INT 2
56697: NEG
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 2
56705: PUSH
56706: LD_INT 3
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 1
56715: PUSH
56716: LD_INT 3
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 1
56725: NEG
56726: PUSH
56727: LD_INT 2
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 2
56736: NEG
56737: PUSH
56738: LD_INT 1
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56770: LD_ADDR_VAR 0 27
56774: PUSH
56775: LD_INT 0
56777: PUSH
56778: LD_INT 0
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 0
56787: PUSH
56788: LD_INT 1
56790: NEG
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 1
56798: PUSH
56799: LD_INT 0
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 1
56808: PUSH
56809: LD_INT 1
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 0
56818: PUSH
56819: LD_INT 1
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 1
56828: NEG
56829: PUSH
56830: LD_INT 0
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 1
56839: NEG
56840: PUSH
56841: LD_INT 1
56843: NEG
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 1
56851: NEG
56852: PUSH
56853: LD_INT 2
56855: NEG
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 0
56863: PUSH
56864: LD_INT 2
56866: NEG
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 1
56874: PUSH
56875: LD_INT 1
56877: NEG
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 2
56885: PUSH
56886: LD_INT 0
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 2
56895: PUSH
56896: LD_INT 1
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 2
56905: PUSH
56906: LD_INT 2
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 1
56915: PUSH
56916: LD_INT 2
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 0
56925: PUSH
56926: LD_INT 2
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 1
56935: NEG
56936: PUSH
56937: LD_INT 1
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 2
56946: NEG
56947: PUSH
56948: LD_INT 0
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 2
56957: NEG
56958: PUSH
56959: LD_INT 1
56961: NEG
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 2
56969: NEG
56970: PUSH
56971: LD_INT 2
56973: NEG
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 1
56981: NEG
56982: PUSH
56983: LD_INT 2
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 2
56992: NEG
56993: PUSH
56994: LD_INT 1
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 3
57003: NEG
57004: PUSH
57005: LD_INT 1
57007: NEG
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 3
57015: NEG
57016: PUSH
57017: LD_INT 2
57019: NEG
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57050: LD_ADDR_VAR 0 28
57054: PUSH
57055: LD_INT 0
57057: PUSH
57058: LD_INT 0
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 0
57067: PUSH
57068: LD_INT 1
57070: NEG
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 1
57078: PUSH
57079: LD_INT 0
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 1
57088: PUSH
57089: LD_INT 1
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 0
57098: PUSH
57099: LD_INT 1
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 1
57108: NEG
57109: PUSH
57110: LD_INT 0
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 1
57119: NEG
57120: PUSH
57121: LD_INT 1
57123: NEG
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 1
57131: NEG
57132: PUSH
57133: LD_INT 2
57135: NEG
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 0
57143: PUSH
57144: LD_INT 2
57146: NEG
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 1
57154: PUSH
57155: LD_INT 1
57157: NEG
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 2
57165: PUSH
57166: LD_INT 0
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 2
57175: PUSH
57176: LD_INT 1
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 2
57185: PUSH
57186: LD_INT 2
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 1
57195: PUSH
57196: LD_INT 2
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: LD_INT 2
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 1
57215: NEG
57216: PUSH
57217: LD_INT 1
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 2
57226: NEG
57227: PUSH
57228: LD_INT 0
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 2
57237: NEG
57238: PUSH
57239: LD_INT 1
57241: NEG
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 2
57249: NEG
57250: PUSH
57251: LD_INT 2
57253: NEG
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 2
57261: NEG
57262: PUSH
57263: LD_INT 3
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 1
57273: NEG
57274: PUSH
57275: LD_INT 3
57277: NEG
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 3
57285: NEG
57286: PUSH
57287: LD_INT 1
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 3
57297: NEG
57298: PUSH
57299: LD_INT 2
57301: NEG
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57332: LD_ADDR_VAR 0 29
57336: PUSH
57337: LD_INT 0
57339: PUSH
57340: LD_INT 0
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 0
57349: PUSH
57350: LD_INT 1
57352: NEG
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 1
57360: PUSH
57361: LD_INT 0
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 1
57370: PUSH
57371: LD_INT 1
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 0
57380: PUSH
57381: LD_INT 1
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 1
57390: NEG
57391: PUSH
57392: LD_INT 0
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 1
57401: NEG
57402: PUSH
57403: LD_INT 1
57405: NEG
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 1
57413: NEG
57414: PUSH
57415: LD_INT 2
57417: NEG
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 0
57425: PUSH
57426: LD_INT 2
57428: NEG
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 1
57436: PUSH
57437: LD_INT 1
57439: NEG
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 2
57447: PUSH
57448: LD_INT 0
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 2
57457: PUSH
57458: LD_INT 1
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 1
57467: PUSH
57468: LD_INT 2
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 0
57477: PUSH
57478: LD_INT 2
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 1
57487: NEG
57488: PUSH
57489: LD_INT 1
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 2
57498: NEG
57499: PUSH
57500: LD_INT 1
57502: NEG
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 2
57510: NEG
57511: PUSH
57512: LD_INT 2
57514: NEG
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 2
57522: NEG
57523: PUSH
57524: LD_INT 3
57526: NEG
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 2
57534: PUSH
57535: LD_INT 1
57537: NEG
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 3
57545: PUSH
57546: LD_INT 1
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 1
57555: PUSH
57556: LD_INT 3
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 1
57565: NEG
57566: PUSH
57567: LD_INT 2
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 3
57576: NEG
57577: PUSH
57578: LD_INT 2
57580: NEG
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57611: LD_ADDR_VAR 0 30
57615: PUSH
57616: LD_INT 0
57618: PUSH
57619: LD_INT 0
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 0
57628: PUSH
57629: LD_INT 1
57631: NEG
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 1
57639: PUSH
57640: LD_INT 0
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 1
57649: PUSH
57650: LD_INT 1
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 0
57659: PUSH
57660: LD_INT 1
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 1
57669: NEG
57670: PUSH
57671: LD_INT 0
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 1
57680: NEG
57681: PUSH
57682: LD_INT 1
57684: NEG
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 1
57692: NEG
57693: PUSH
57694: LD_INT 2
57696: NEG
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 0
57704: PUSH
57705: LD_INT 2
57707: NEG
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 1
57715: PUSH
57716: LD_INT 1
57718: NEG
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 2
57726: PUSH
57727: LD_INT 0
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 2
57736: PUSH
57737: LD_INT 1
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 2
57746: PUSH
57747: LD_INT 2
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 1
57756: PUSH
57757: LD_INT 2
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 1
57766: NEG
57767: PUSH
57768: LD_INT 1
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 2
57777: NEG
57778: PUSH
57779: LD_INT 0
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 2
57788: NEG
57789: PUSH
57790: LD_INT 1
57792: NEG
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 1
57800: NEG
57801: PUSH
57802: LD_INT 3
57804: NEG
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 1
57812: PUSH
57813: LD_INT 2
57815: NEG
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 3
57823: PUSH
57824: LD_INT 2
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 2
57833: PUSH
57834: LD_INT 3
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 2
57843: NEG
57844: PUSH
57845: LD_INT 1
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 3
57854: NEG
57855: PUSH
57856: LD_INT 1
57858: NEG
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57889: LD_ADDR_VAR 0 31
57893: PUSH
57894: LD_INT 0
57896: PUSH
57897: LD_INT 0
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 0
57906: PUSH
57907: LD_INT 1
57909: NEG
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 1
57917: PUSH
57918: LD_INT 0
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 1
57927: PUSH
57928: LD_INT 1
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 0
57937: PUSH
57938: LD_INT 1
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 1
57947: NEG
57948: PUSH
57949: LD_INT 0
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 1
57958: NEG
57959: PUSH
57960: LD_INT 1
57962: NEG
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 1
57970: NEG
57971: PUSH
57972: LD_INT 2
57974: NEG
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 1
57982: PUSH
57983: LD_INT 1
57985: NEG
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 2
57993: PUSH
57994: LD_INT 0
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 2
58003: PUSH
58004: LD_INT 1
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 2
58013: PUSH
58014: LD_INT 2
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 1
58023: PUSH
58024: LD_INT 2
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 0
58033: PUSH
58034: LD_INT 2
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 1
58043: NEG
58044: PUSH
58045: LD_INT 1
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 2
58054: NEG
58055: PUSH
58056: LD_INT 1
58058: NEG
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 2
58066: NEG
58067: PUSH
58068: LD_INT 2
58070: NEG
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 2
58078: NEG
58079: PUSH
58080: LD_INT 3
58082: NEG
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 2
58090: PUSH
58091: LD_INT 1
58093: NEG
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 3
58101: PUSH
58102: LD_INT 1
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 1
58111: PUSH
58112: LD_INT 3
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 1
58121: NEG
58122: PUSH
58123: LD_INT 2
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 3
58132: NEG
58133: PUSH
58134: LD_INT 2
58136: NEG
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58167: LD_ADDR_VAR 0 32
58171: PUSH
58172: LD_INT 0
58174: PUSH
58175: LD_INT 0
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 0
58184: PUSH
58185: LD_INT 1
58187: NEG
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 1
58195: PUSH
58196: LD_INT 0
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 1
58205: PUSH
58206: LD_INT 1
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 0
58215: PUSH
58216: LD_INT 1
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 1
58225: NEG
58226: PUSH
58227: LD_INT 0
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 1
58236: NEG
58237: PUSH
58238: LD_INT 1
58240: NEG
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 1
58248: NEG
58249: PUSH
58250: LD_INT 2
58252: NEG
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 0
58260: PUSH
58261: LD_INT 2
58263: NEG
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 1
58271: PUSH
58272: LD_INT 1
58274: NEG
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 2
58282: PUSH
58283: LD_INT 1
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 2
58292: PUSH
58293: LD_INT 2
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 1
58302: PUSH
58303: LD_INT 2
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 0
58312: PUSH
58313: LD_INT 2
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 1
58322: NEG
58323: PUSH
58324: LD_INT 1
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 2
58333: NEG
58334: PUSH
58335: LD_INT 0
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 2
58344: NEG
58345: PUSH
58346: LD_INT 1
58348: NEG
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 1
58356: NEG
58357: PUSH
58358: LD_INT 3
58360: NEG
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 1
58368: PUSH
58369: LD_INT 2
58371: NEG
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 3
58379: PUSH
58380: LD_INT 2
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 2
58389: PUSH
58390: LD_INT 3
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 2
58399: NEG
58400: PUSH
58401: LD_INT 1
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 3
58410: NEG
58411: PUSH
58412: LD_INT 1
58414: NEG
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58445: LD_ADDR_VAR 0 33
58449: PUSH
58450: LD_INT 0
58452: PUSH
58453: LD_INT 0
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 0
58462: PUSH
58463: LD_INT 1
58465: NEG
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 1
58473: PUSH
58474: LD_INT 0
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 1
58483: PUSH
58484: LD_INT 1
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 0
58493: PUSH
58494: LD_INT 1
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 1
58503: NEG
58504: PUSH
58505: LD_INT 0
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 1
58514: NEG
58515: PUSH
58516: LD_INT 1
58518: NEG
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 1
58526: NEG
58527: PUSH
58528: LD_INT 2
58530: NEG
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 1
58538: PUSH
58539: LD_INT 1
58541: NEG
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 2
58549: PUSH
58550: LD_INT 0
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 2
58559: PUSH
58560: LD_INT 1
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 1
58569: PUSH
58570: LD_INT 2
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 0
58579: PUSH
58580: LD_INT 2
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 1
58589: NEG
58590: PUSH
58591: LD_INT 1
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 2
58600: NEG
58601: PUSH
58602: LD_INT 0
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 2
58611: NEG
58612: PUSH
58613: LD_INT 1
58615: NEG
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 2
58623: NEG
58624: PUSH
58625: LD_INT 2
58627: NEG
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 2
58635: NEG
58636: PUSH
58637: LD_INT 3
58639: NEG
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 2
58647: PUSH
58648: LD_INT 1
58650: NEG
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 3
58658: PUSH
58659: LD_INT 1
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 1
58668: PUSH
58669: LD_INT 3
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 1
58678: NEG
58679: PUSH
58680: LD_INT 2
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 3
58689: NEG
58690: PUSH
58691: LD_INT 2
58693: NEG
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58724: LD_ADDR_VAR 0 34
58728: PUSH
58729: LD_INT 0
58731: PUSH
58732: LD_INT 0
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 0
58741: PUSH
58742: LD_INT 1
58744: NEG
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 1
58752: PUSH
58753: LD_INT 0
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 1
58762: PUSH
58763: LD_INT 1
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 0
58772: PUSH
58773: LD_INT 1
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 1
58782: NEG
58783: PUSH
58784: LD_INT 0
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 1
58793: NEG
58794: PUSH
58795: LD_INT 1
58797: NEG
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 1
58805: NEG
58806: PUSH
58807: LD_INT 2
58809: NEG
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 0
58817: PUSH
58818: LD_INT 2
58820: NEG
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 1
58828: PUSH
58829: LD_INT 1
58831: NEG
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 2
58839: PUSH
58840: LD_INT 1
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 2
58849: PUSH
58850: LD_INT 2
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 1
58859: PUSH
58860: LD_INT 2
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 1
58869: NEG
58870: PUSH
58871: LD_INT 1
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 2
58880: NEG
58881: PUSH
58882: LD_INT 0
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 2
58891: NEG
58892: PUSH
58893: LD_INT 1
58895: NEG
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 2
58903: NEG
58904: PUSH
58905: LD_INT 2
58907: NEG
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 1
58915: NEG
58916: PUSH
58917: LD_INT 3
58919: NEG
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 1
58927: PUSH
58928: LD_INT 2
58930: NEG
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 3
58938: PUSH
58939: LD_INT 2
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 2
58948: PUSH
58949: LD_INT 3
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 2
58958: NEG
58959: PUSH
58960: LD_INT 1
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 3
58969: NEG
58970: PUSH
58971: LD_INT 1
58973: NEG
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59004: LD_ADDR_VAR 0 35
59008: PUSH
59009: LD_INT 0
59011: PUSH
59012: LD_INT 0
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 0
59021: PUSH
59022: LD_INT 1
59024: NEG
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 1
59032: PUSH
59033: LD_INT 0
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 1
59042: PUSH
59043: LD_INT 1
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 0
59052: PUSH
59053: LD_INT 1
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 1
59062: NEG
59063: PUSH
59064: LD_INT 0
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 1
59073: NEG
59074: PUSH
59075: LD_INT 1
59077: NEG
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 2
59085: PUSH
59086: LD_INT 1
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 2
59095: NEG
59096: PUSH
59097: LD_INT 1
59099: NEG
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59116: LD_ADDR_VAR 0 36
59120: PUSH
59121: LD_INT 0
59123: PUSH
59124: LD_INT 0
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 0
59133: PUSH
59134: LD_INT 1
59136: NEG
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 1
59144: PUSH
59145: LD_INT 0
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 1
59154: PUSH
59155: LD_INT 1
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 0
59164: PUSH
59165: LD_INT 1
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 1
59174: NEG
59175: PUSH
59176: LD_INT 0
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 1
59185: NEG
59186: PUSH
59187: LD_INT 1
59189: NEG
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 1
59197: NEG
59198: PUSH
59199: LD_INT 2
59201: NEG
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 1
59209: PUSH
59210: LD_INT 2
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59228: LD_ADDR_VAR 0 37
59232: PUSH
59233: LD_INT 0
59235: PUSH
59236: LD_INT 0
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 0
59245: PUSH
59246: LD_INT 1
59248: NEG
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 1
59256: PUSH
59257: LD_INT 0
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 1
59266: PUSH
59267: LD_INT 1
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 0
59276: PUSH
59277: LD_INT 1
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 1
59286: NEG
59287: PUSH
59288: LD_INT 0
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 1
59297: NEG
59298: PUSH
59299: LD_INT 1
59301: NEG
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 1
59309: PUSH
59310: LD_INT 1
59312: NEG
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 1
59320: NEG
59321: PUSH
59322: LD_INT 1
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59340: LD_ADDR_VAR 0 38
59344: PUSH
59345: LD_INT 0
59347: PUSH
59348: LD_INT 0
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 0
59357: PUSH
59358: LD_INT 1
59360: NEG
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 1
59368: PUSH
59369: LD_INT 0
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 1
59378: PUSH
59379: LD_INT 1
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 0
59388: PUSH
59389: LD_INT 1
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 1
59398: NEG
59399: PUSH
59400: LD_INT 0
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 1
59409: NEG
59410: PUSH
59411: LD_INT 1
59413: NEG
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 2
59421: PUSH
59422: LD_INT 1
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 2
59431: NEG
59432: PUSH
59433: LD_INT 1
59435: NEG
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: LIST
59450: LIST
59451: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59452: LD_ADDR_VAR 0 39
59456: PUSH
59457: LD_INT 0
59459: PUSH
59460: LD_INT 0
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 0
59469: PUSH
59470: LD_INT 1
59472: NEG
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 1
59480: PUSH
59481: LD_INT 0
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 1
59490: PUSH
59491: LD_INT 1
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 0
59500: PUSH
59501: LD_INT 1
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 1
59510: NEG
59511: PUSH
59512: LD_INT 0
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 1
59521: NEG
59522: PUSH
59523: LD_INT 1
59525: NEG
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 1
59533: NEG
59534: PUSH
59535: LD_INT 2
59537: NEG
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 1
59545: PUSH
59546: LD_INT 2
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59564: LD_ADDR_VAR 0 40
59568: PUSH
59569: LD_INT 0
59571: PUSH
59572: LD_INT 0
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 0
59581: PUSH
59582: LD_INT 1
59584: NEG
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 1
59592: PUSH
59593: LD_INT 0
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 1
59602: PUSH
59603: LD_INT 1
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 0
59612: PUSH
59613: LD_INT 1
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 1
59622: NEG
59623: PUSH
59624: LD_INT 0
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 1
59633: NEG
59634: PUSH
59635: LD_INT 1
59637: NEG
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 1
59645: PUSH
59646: LD_INT 1
59648: NEG
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 1
59656: NEG
59657: PUSH
59658: LD_INT 1
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59676: LD_ADDR_VAR 0 41
59680: PUSH
59681: LD_INT 0
59683: PUSH
59684: LD_INT 0
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 0
59693: PUSH
59694: LD_INT 1
59696: NEG
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 1
59704: PUSH
59705: LD_INT 0
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 1
59714: PUSH
59715: LD_INT 1
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 0
59724: PUSH
59725: LD_INT 1
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 1
59734: NEG
59735: PUSH
59736: LD_INT 0
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 1
59745: NEG
59746: PUSH
59747: LD_INT 1
59749: NEG
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 1
59757: NEG
59758: PUSH
59759: LD_INT 2
59761: NEG
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 1
59769: PUSH
59770: LD_INT 1
59772: NEG
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 2
59780: PUSH
59781: LD_INT 0
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 2
59790: PUSH
59791: LD_INT 1
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 2
59800: PUSH
59801: LD_INT 2
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 1
59810: PUSH
59811: LD_INT 2
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 1
59820: NEG
59821: PUSH
59822: LD_INT 1
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 2
59831: NEG
59832: PUSH
59833: LD_INT 0
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 2
59842: NEG
59843: PUSH
59844: LD_INT 1
59846: NEG
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 2
59854: NEG
59855: PUSH
59856: LD_INT 2
59858: NEG
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 2
59866: NEG
59867: PUSH
59868: LD_INT 3
59870: NEG
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 2
59878: PUSH
59879: LD_INT 1
59881: NEG
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 3
59889: PUSH
59890: LD_INT 0
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 3
59899: PUSH
59900: LD_INT 1
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 3
59909: PUSH
59910: LD_INT 2
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 3
59919: PUSH
59920: LD_INT 3
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 2
59929: PUSH
59930: LD_INT 3
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 2
59939: NEG
59940: PUSH
59941: LD_INT 1
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 3
59950: NEG
59951: PUSH
59952: LD_INT 0
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 3
59961: NEG
59962: PUSH
59963: LD_INT 1
59965: NEG
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 3
59973: NEG
59974: PUSH
59975: LD_INT 2
59977: NEG
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 3
59985: NEG
59986: PUSH
59987: LD_INT 3
59989: NEG
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60026: LD_ADDR_VAR 0 42
60030: PUSH
60031: LD_INT 0
60033: PUSH
60034: LD_INT 0
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 0
60043: PUSH
60044: LD_INT 1
60046: NEG
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 1
60054: PUSH
60055: LD_INT 0
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 1
60064: PUSH
60065: LD_INT 1
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 0
60074: PUSH
60075: LD_INT 1
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 1
60084: NEG
60085: PUSH
60086: LD_INT 0
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 1
60095: NEG
60096: PUSH
60097: LD_INT 1
60099: NEG
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 1
60107: NEG
60108: PUSH
60109: LD_INT 2
60111: NEG
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 0
60119: PUSH
60120: LD_INT 2
60122: NEG
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 1
60130: PUSH
60131: LD_INT 1
60133: NEG
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 2
60141: PUSH
60142: LD_INT 1
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 2
60151: PUSH
60152: LD_INT 2
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 1
60161: PUSH
60162: LD_INT 2
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 0
60171: PUSH
60172: LD_INT 2
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 1
60181: NEG
60182: PUSH
60183: LD_INT 1
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 2
60192: NEG
60193: PUSH
60194: LD_INT 1
60196: NEG
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 2
60204: NEG
60205: PUSH
60206: LD_INT 2
60208: NEG
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 2
60216: NEG
60217: PUSH
60218: LD_INT 3
60220: NEG
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 1
60228: NEG
60229: PUSH
60230: LD_INT 3
60232: NEG
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 0
60240: PUSH
60241: LD_INT 3
60243: NEG
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 1
60251: PUSH
60252: LD_INT 2
60254: NEG
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 3
60262: PUSH
60263: LD_INT 2
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 3
60272: PUSH
60273: LD_INT 3
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 2
60282: PUSH
60283: LD_INT 3
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 1
60292: PUSH
60293: LD_INT 3
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 0
60302: PUSH
60303: LD_INT 3
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 1
60312: NEG
60313: PUSH
60314: LD_INT 2
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 3
60323: NEG
60324: PUSH
60325: LD_INT 2
60327: NEG
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 3
60335: NEG
60336: PUSH
60337: LD_INT 3
60339: NEG
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60376: LD_ADDR_VAR 0 43
60380: PUSH
60381: LD_INT 0
60383: PUSH
60384: LD_INT 0
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 0
60393: PUSH
60394: LD_INT 1
60396: NEG
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 1
60404: PUSH
60405: LD_INT 0
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 1
60414: PUSH
60415: LD_INT 1
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 0
60424: PUSH
60425: LD_INT 1
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 1
60434: NEG
60435: PUSH
60436: LD_INT 0
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 1
60445: NEG
60446: PUSH
60447: LD_INT 1
60449: NEG
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 1
60457: NEG
60458: PUSH
60459: LD_INT 2
60461: NEG
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 0
60469: PUSH
60470: LD_INT 2
60472: NEG
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 1
60480: PUSH
60481: LD_INT 1
60483: NEG
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 2
60491: PUSH
60492: LD_INT 0
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 2
60501: PUSH
60502: LD_INT 1
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 1
60511: PUSH
60512: LD_INT 2
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 0
60521: PUSH
60522: LD_INT 2
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 1
60531: NEG
60532: PUSH
60533: LD_INT 1
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 2
60542: NEG
60543: PUSH
60544: LD_INT 0
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 2
60553: NEG
60554: PUSH
60555: LD_INT 1
60557: NEG
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 1
60565: NEG
60566: PUSH
60567: LD_INT 3
60569: NEG
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 0
60577: PUSH
60578: LD_INT 3
60580: NEG
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 1
60588: PUSH
60589: LD_INT 2
60591: NEG
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 2
60599: PUSH
60600: LD_INT 1
60602: NEG
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 3
60610: PUSH
60611: LD_INT 0
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 3
60620: PUSH
60621: LD_INT 1
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 1
60630: PUSH
60631: LD_INT 3
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 0
60640: PUSH
60641: LD_INT 3
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 1
60650: NEG
60651: PUSH
60652: LD_INT 2
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 2
60661: NEG
60662: PUSH
60663: LD_INT 1
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 3
60672: NEG
60673: PUSH
60674: LD_INT 0
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 3
60683: NEG
60684: PUSH
60685: LD_INT 1
60687: NEG
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60724: LD_ADDR_VAR 0 44
60728: PUSH
60729: LD_INT 0
60731: PUSH
60732: LD_INT 0
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 0
60741: PUSH
60742: LD_INT 1
60744: NEG
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 1
60752: PUSH
60753: LD_INT 0
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 1
60762: PUSH
60763: LD_INT 1
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 0
60772: PUSH
60773: LD_INT 1
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 1
60782: NEG
60783: PUSH
60784: LD_INT 0
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 1
60793: NEG
60794: PUSH
60795: LD_INT 1
60797: NEG
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 1
60805: NEG
60806: PUSH
60807: LD_INT 2
60809: NEG
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 1
60817: PUSH
60818: LD_INT 1
60820: NEG
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 2
60828: PUSH
60829: LD_INT 0
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 2
60838: PUSH
60839: LD_INT 1
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 2
60848: PUSH
60849: LD_INT 2
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 1
60858: PUSH
60859: LD_INT 2
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 1
60868: NEG
60869: PUSH
60870: LD_INT 1
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 2
60879: NEG
60880: PUSH
60881: LD_INT 0
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 2
60890: NEG
60891: PUSH
60892: LD_INT 1
60894: NEG
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 2
60902: NEG
60903: PUSH
60904: LD_INT 2
60906: NEG
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 2
60914: NEG
60915: PUSH
60916: LD_INT 3
60918: NEG
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 2
60926: PUSH
60927: LD_INT 1
60929: NEG
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 3
60937: PUSH
60938: LD_INT 0
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 3
60947: PUSH
60948: LD_INT 1
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 3
60957: PUSH
60958: LD_INT 2
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 3
60967: PUSH
60968: LD_INT 3
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 2
60977: PUSH
60978: LD_INT 3
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 2
60987: NEG
60988: PUSH
60989: LD_INT 1
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 3
60998: NEG
60999: PUSH
61000: LD_INT 0
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 3
61009: NEG
61010: PUSH
61011: LD_INT 1
61013: NEG
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 3
61021: NEG
61022: PUSH
61023: LD_INT 2
61025: NEG
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 3
61033: NEG
61034: PUSH
61035: LD_INT 3
61037: NEG
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61074: LD_ADDR_VAR 0 45
61078: PUSH
61079: LD_INT 0
61081: PUSH
61082: LD_INT 0
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 0
61091: PUSH
61092: LD_INT 1
61094: NEG
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 1
61102: PUSH
61103: LD_INT 0
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 1
61112: PUSH
61113: LD_INT 1
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: LD_INT 0
61122: PUSH
61123: LD_INT 1
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 1
61132: NEG
61133: PUSH
61134: LD_INT 0
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 1
61143: NEG
61144: PUSH
61145: LD_INT 1
61147: NEG
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 1
61155: NEG
61156: PUSH
61157: LD_INT 2
61159: NEG
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 0
61167: PUSH
61168: LD_INT 2
61170: NEG
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 1
61178: PUSH
61179: LD_INT 1
61181: NEG
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 2
61189: PUSH
61190: LD_INT 1
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 2
61199: PUSH
61200: LD_INT 2
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 1
61209: PUSH
61210: LD_INT 2
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 0
61219: PUSH
61220: LD_INT 2
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 1
61229: NEG
61230: PUSH
61231: LD_INT 1
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 2
61240: NEG
61241: PUSH
61242: LD_INT 1
61244: NEG
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 2
61252: NEG
61253: PUSH
61254: LD_INT 2
61256: NEG
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 2
61264: NEG
61265: PUSH
61266: LD_INT 3
61268: NEG
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 1
61276: NEG
61277: PUSH
61278: LD_INT 3
61280: NEG
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 0
61288: PUSH
61289: LD_INT 3
61291: NEG
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 1
61299: PUSH
61300: LD_INT 2
61302: NEG
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 3
61310: PUSH
61311: LD_INT 2
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 3
61320: PUSH
61321: LD_INT 3
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 2
61330: PUSH
61331: LD_INT 3
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 1
61340: PUSH
61341: LD_INT 3
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 0
61350: PUSH
61351: LD_INT 3
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 1
61360: NEG
61361: PUSH
61362: LD_INT 2
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: PUSH
61369: LD_INT 3
61371: NEG
61372: PUSH
61373: LD_INT 2
61375: NEG
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 3
61383: NEG
61384: PUSH
61385: LD_INT 3
61387: NEG
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61424: LD_ADDR_VAR 0 46
61428: PUSH
61429: LD_INT 0
61431: PUSH
61432: LD_INT 0
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 0
61441: PUSH
61442: LD_INT 1
61444: NEG
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 1
61452: PUSH
61453: LD_INT 0
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 1
61462: PUSH
61463: LD_INT 1
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 0
61472: PUSH
61473: LD_INT 1
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 1
61482: NEG
61483: PUSH
61484: LD_INT 0
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 1
61493: NEG
61494: PUSH
61495: LD_INT 1
61497: NEG
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 1
61505: NEG
61506: PUSH
61507: LD_INT 2
61509: NEG
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 0
61517: PUSH
61518: LD_INT 2
61520: NEG
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 1
61528: PUSH
61529: LD_INT 1
61531: NEG
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 2
61539: PUSH
61540: LD_INT 0
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 2
61549: PUSH
61550: LD_INT 1
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 1
61559: PUSH
61560: LD_INT 2
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 0
61569: PUSH
61570: LD_INT 2
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 1
61579: NEG
61580: PUSH
61581: LD_INT 1
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 2
61590: NEG
61591: PUSH
61592: LD_INT 0
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 2
61601: NEG
61602: PUSH
61603: LD_INT 1
61605: NEG
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 1
61613: NEG
61614: PUSH
61615: LD_INT 3
61617: NEG
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 0
61625: PUSH
61626: LD_INT 3
61628: NEG
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 1
61636: PUSH
61637: LD_INT 2
61639: NEG
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 2
61647: PUSH
61648: LD_INT 1
61650: NEG
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 3
61658: PUSH
61659: LD_INT 0
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 3
61668: PUSH
61669: LD_INT 1
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 1
61678: PUSH
61679: LD_INT 3
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 0
61688: PUSH
61689: LD_INT 3
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: LD_INT 1
61698: NEG
61699: PUSH
61700: LD_INT 2
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 2
61709: NEG
61710: PUSH
61711: LD_INT 1
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 3
61720: NEG
61721: PUSH
61722: LD_INT 0
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 3
61731: NEG
61732: PUSH
61733: LD_INT 1
61735: NEG
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61772: LD_ADDR_VAR 0 47
61776: PUSH
61777: LD_INT 0
61779: PUSH
61780: LD_INT 0
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 0
61789: PUSH
61790: LD_INT 1
61792: NEG
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 1
61800: PUSH
61801: LD_INT 0
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 1
61810: PUSH
61811: LD_INT 1
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 0
61820: PUSH
61821: LD_INT 1
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 1
61830: NEG
61831: PUSH
61832: LD_INT 0
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 1
61841: NEG
61842: PUSH
61843: LD_INT 1
61845: NEG
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 1
61853: NEG
61854: PUSH
61855: LD_INT 2
61857: NEG
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 0
61865: PUSH
61866: LD_INT 2
61868: NEG
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 1
61876: PUSH
61877: LD_INT 1
61879: NEG
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 2
61887: NEG
61888: PUSH
61889: LD_INT 1
61891: NEG
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 2
61899: NEG
61900: PUSH
61901: LD_INT 2
61903: NEG
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61923: LD_ADDR_VAR 0 48
61927: PUSH
61928: LD_INT 0
61930: PUSH
61931: LD_INT 0
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 0
61940: PUSH
61941: LD_INT 1
61943: NEG
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: LD_INT 1
61951: PUSH
61952: LD_INT 0
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 1
61961: PUSH
61962: LD_INT 1
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 0
61971: PUSH
61972: LD_INT 1
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 1
61981: NEG
61982: PUSH
61983: LD_INT 0
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 1
61992: NEG
61993: PUSH
61994: LD_INT 1
61996: NEG
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: LD_INT 1
62004: NEG
62005: PUSH
62006: LD_INT 2
62008: NEG
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 0
62016: PUSH
62017: LD_INT 2
62019: NEG
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 1
62027: PUSH
62028: LD_INT 1
62030: NEG
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 2
62038: PUSH
62039: LD_INT 0
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 2
62048: PUSH
62049: LD_INT 1
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62070: LD_ADDR_VAR 0 49
62074: PUSH
62075: LD_INT 0
62077: PUSH
62078: LD_INT 0
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 0
62087: PUSH
62088: LD_INT 1
62090: NEG
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 1
62098: PUSH
62099: LD_INT 0
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 1
62108: PUSH
62109: LD_INT 1
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: LD_INT 0
62118: PUSH
62119: LD_INT 1
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 1
62128: NEG
62129: PUSH
62130: LD_INT 0
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 1
62139: NEG
62140: PUSH
62141: LD_INT 1
62143: NEG
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 1
62151: PUSH
62152: LD_INT 1
62154: NEG
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 2
62162: PUSH
62163: LD_INT 0
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 2
62172: PUSH
62173: LD_INT 1
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 2
62182: PUSH
62183: LD_INT 2
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 1
62192: PUSH
62193: LD_INT 2
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62214: LD_ADDR_VAR 0 50
62218: PUSH
62219: LD_INT 0
62221: PUSH
62222: LD_INT 0
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 0
62231: PUSH
62232: LD_INT 1
62234: NEG
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 1
62242: PUSH
62243: LD_INT 0
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: PUSH
62250: LD_INT 1
62252: PUSH
62253: LD_INT 1
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 0
62262: PUSH
62263: LD_INT 1
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 1
62272: NEG
62273: PUSH
62274: LD_INT 0
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 1
62283: NEG
62284: PUSH
62285: LD_INT 1
62287: NEG
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 2
62295: PUSH
62296: LD_INT 1
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 2
62305: PUSH
62306: LD_INT 2
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 1
62315: PUSH
62316: LD_INT 2
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 0
62325: PUSH
62326: LD_INT 2
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 1
62335: NEG
62336: PUSH
62337: LD_INT 1
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62358: LD_ADDR_VAR 0 51
62362: PUSH
62363: LD_INT 0
62365: PUSH
62366: LD_INT 0
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 0
62375: PUSH
62376: LD_INT 1
62378: NEG
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 1
62386: PUSH
62387: LD_INT 0
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 1
62396: PUSH
62397: LD_INT 1
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 0
62406: PUSH
62407: LD_INT 1
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 1
62416: NEG
62417: PUSH
62418: LD_INT 0
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 1
62427: NEG
62428: PUSH
62429: LD_INT 1
62431: NEG
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 1
62439: PUSH
62440: LD_INT 2
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 0
62449: PUSH
62450: LD_INT 2
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 1
62459: NEG
62460: PUSH
62461: LD_INT 1
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 2
62470: NEG
62471: PUSH
62472: LD_INT 0
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 2
62481: NEG
62482: PUSH
62483: LD_INT 1
62485: NEG
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62505: LD_ADDR_VAR 0 52
62509: PUSH
62510: LD_INT 0
62512: PUSH
62513: LD_INT 0
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 0
62522: PUSH
62523: LD_INT 1
62525: NEG
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 1
62533: PUSH
62534: LD_INT 0
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 1
62543: PUSH
62544: LD_INT 1
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: LD_INT 0
62553: PUSH
62554: LD_INT 1
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 1
62563: NEG
62564: PUSH
62565: LD_INT 0
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 1
62574: NEG
62575: PUSH
62576: LD_INT 1
62578: NEG
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 1
62586: NEG
62587: PUSH
62588: LD_INT 2
62590: NEG
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 1
62598: NEG
62599: PUSH
62600: LD_INT 1
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 2
62609: NEG
62610: PUSH
62611: LD_INT 0
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 2
62620: NEG
62621: PUSH
62622: LD_INT 1
62624: NEG
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: LD_INT 2
62632: NEG
62633: PUSH
62634: LD_INT 2
62636: NEG
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62656: LD_ADDR_VAR 0 53
62660: PUSH
62661: LD_INT 0
62663: PUSH
62664: LD_INT 0
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 0
62673: PUSH
62674: LD_INT 1
62676: NEG
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 1
62684: PUSH
62685: LD_INT 0
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 1
62694: PUSH
62695: LD_INT 1
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: PUSH
62702: LD_INT 0
62704: PUSH
62705: LD_INT 1
62707: PUSH
62708: EMPTY
62709: LIST
62710: LIST
62711: PUSH
62712: LD_INT 1
62714: NEG
62715: PUSH
62716: LD_INT 0
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 1
62725: NEG
62726: PUSH
62727: LD_INT 1
62729: NEG
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 1
62737: NEG
62738: PUSH
62739: LD_INT 2
62741: NEG
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 0
62749: PUSH
62750: LD_INT 2
62752: NEG
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: PUSH
62758: LD_INT 1
62760: PUSH
62761: LD_INT 1
62763: NEG
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PUSH
62769: LD_INT 2
62771: PUSH
62772: LD_INT 0
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: LD_INT 2
62781: PUSH
62782: LD_INT 1
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 2
62791: PUSH
62792: LD_INT 2
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: PUSH
62799: LD_INT 1
62801: PUSH
62802: LD_INT 2
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: LD_INT 0
62811: PUSH
62812: LD_INT 2
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_INT 1
62821: NEG
62822: PUSH
62823: LD_INT 1
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 2
62832: NEG
62833: PUSH
62834: LD_INT 0
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: LD_INT 2
62843: NEG
62844: PUSH
62845: LD_INT 1
62847: NEG
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 2
62855: NEG
62856: PUSH
62857: LD_INT 2
62859: NEG
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62886: LD_ADDR_VAR 0 54
62890: PUSH
62891: LD_INT 0
62893: PUSH
62894: LD_INT 0
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 0
62903: PUSH
62904: LD_INT 1
62906: NEG
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: PUSH
62912: LD_INT 1
62914: PUSH
62915: LD_INT 0
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 1
62924: PUSH
62925: LD_INT 1
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 0
62934: PUSH
62935: LD_INT 1
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 1
62944: NEG
62945: PUSH
62946: LD_INT 0
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: PUSH
62953: LD_INT 1
62955: NEG
62956: PUSH
62957: LD_INT 1
62959: NEG
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 1
62967: NEG
62968: PUSH
62969: LD_INT 2
62971: NEG
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 0
62979: PUSH
62980: LD_INT 2
62982: NEG
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: LD_INT 1
62990: PUSH
62991: LD_INT 1
62993: NEG
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: PUSH
62999: LD_INT 2
63001: PUSH
63002: LD_INT 0
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 2
63011: PUSH
63012: LD_INT 1
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: LD_INT 2
63021: PUSH
63022: LD_INT 2
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: LD_INT 1
63031: PUSH
63032: LD_INT 2
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 0
63041: PUSH
63042: LD_INT 2
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 1
63051: NEG
63052: PUSH
63053: LD_INT 1
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 2
63062: NEG
63063: PUSH
63064: LD_INT 0
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 2
63073: NEG
63074: PUSH
63075: LD_INT 1
63077: NEG
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 2
63085: NEG
63086: PUSH
63087: LD_INT 2
63089: NEG
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: LIST
63113: LIST
63114: LIST
63115: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63116: LD_ADDR_VAR 0 55
63120: PUSH
63121: LD_INT 0
63123: PUSH
63124: LD_INT 0
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_INT 0
63133: PUSH
63134: LD_INT 1
63136: NEG
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: LD_INT 1
63144: PUSH
63145: LD_INT 0
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: PUSH
63152: LD_INT 1
63154: PUSH
63155: LD_INT 1
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PUSH
63162: LD_INT 0
63164: PUSH
63165: LD_INT 1
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 1
63174: NEG
63175: PUSH
63176: LD_INT 0
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 1
63185: NEG
63186: PUSH
63187: LD_INT 1
63189: NEG
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 1
63197: NEG
63198: PUSH
63199: LD_INT 2
63201: NEG
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: PUSH
63207: LD_INT 0
63209: PUSH
63210: LD_INT 2
63212: NEG
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 1
63220: PUSH
63221: LD_INT 1
63223: NEG
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 2
63231: PUSH
63232: LD_INT 0
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: LD_INT 2
63241: PUSH
63242: LD_INT 1
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 2
63251: PUSH
63252: LD_INT 2
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 1
63261: PUSH
63262: LD_INT 2
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 0
63271: PUSH
63272: LD_INT 2
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 1
63281: NEG
63282: PUSH
63283: LD_INT 1
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: LD_INT 2
63292: NEG
63293: PUSH
63294: LD_INT 0
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: LD_INT 2
63303: NEG
63304: PUSH
63305: LD_INT 1
63307: NEG
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 2
63315: NEG
63316: PUSH
63317: LD_INT 2
63319: NEG
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63346: LD_ADDR_VAR 0 56
63350: PUSH
63351: LD_INT 0
63353: PUSH
63354: LD_INT 0
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PUSH
63361: LD_INT 0
63363: PUSH
63364: LD_INT 1
63366: NEG
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: PUSH
63372: LD_INT 1
63374: PUSH
63375: LD_INT 0
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: PUSH
63382: LD_INT 1
63384: PUSH
63385: LD_INT 1
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: PUSH
63392: LD_INT 0
63394: PUSH
63395: LD_INT 1
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: LD_INT 1
63404: NEG
63405: PUSH
63406: LD_INT 0
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: LD_INT 1
63415: NEG
63416: PUSH
63417: LD_INT 1
63419: NEG
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 1
63427: NEG
63428: PUSH
63429: LD_INT 2
63431: NEG
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 0
63439: PUSH
63440: LD_INT 2
63442: NEG
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 1
63450: PUSH
63451: LD_INT 1
63453: NEG
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 2
63461: PUSH
63462: LD_INT 0
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 2
63471: PUSH
63472: LD_INT 1
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: LD_INT 2
63481: PUSH
63482: LD_INT 2
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 1
63491: PUSH
63492: LD_INT 2
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 0
63501: PUSH
63502: LD_INT 2
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 1
63511: NEG
63512: PUSH
63513: LD_INT 1
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: PUSH
63520: LD_INT 2
63522: NEG
63523: PUSH
63524: LD_INT 0
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: PUSH
63531: LD_INT 2
63533: NEG
63534: PUSH
63535: LD_INT 1
63537: NEG
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: LD_INT 2
63545: NEG
63546: PUSH
63547: LD_INT 2
63549: NEG
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: LIST
63573: LIST
63574: LIST
63575: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63576: LD_ADDR_VAR 0 57
63580: PUSH
63581: LD_INT 0
63583: PUSH
63584: LD_INT 0
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 0
63593: PUSH
63594: LD_INT 1
63596: NEG
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 1
63604: PUSH
63605: LD_INT 0
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: LD_INT 1
63614: PUSH
63615: LD_INT 1
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PUSH
63622: LD_INT 0
63624: PUSH
63625: LD_INT 1
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: LD_INT 1
63634: NEG
63635: PUSH
63636: LD_INT 0
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PUSH
63643: LD_INT 1
63645: NEG
63646: PUSH
63647: LD_INT 1
63649: NEG
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 1
63657: NEG
63658: PUSH
63659: LD_INT 2
63661: NEG
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: LD_INT 0
63669: PUSH
63670: LD_INT 2
63672: NEG
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 1
63680: PUSH
63681: LD_INT 1
63683: NEG
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: LD_INT 2
63691: PUSH
63692: LD_INT 0
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: PUSH
63699: LD_INT 2
63701: PUSH
63702: LD_INT 1
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 2
63711: PUSH
63712: LD_INT 2
63714: PUSH
63715: EMPTY
63716: LIST
63717: LIST
63718: PUSH
63719: LD_INT 1
63721: PUSH
63722: LD_INT 2
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 0
63731: PUSH
63732: LD_INT 2
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: LD_INT 1
63741: NEG
63742: PUSH
63743: LD_INT 1
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: PUSH
63750: LD_INT 2
63752: NEG
63753: PUSH
63754: LD_INT 0
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: PUSH
63761: LD_INT 2
63763: NEG
63764: PUSH
63765: LD_INT 1
63767: NEG
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: PUSH
63773: LD_INT 2
63775: NEG
63776: PUSH
63777: LD_INT 2
63779: NEG
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: LIST
63789: LIST
63790: LIST
63791: LIST
63792: LIST
63793: LIST
63794: LIST
63795: LIST
63796: LIST
63797: LIST
63798: LIST
63799: LIST
63800: LIST
63801: LIST
63802: LIST
63803: LIST
63804: LIST
63805: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63806: LD_ADDR_VAR 0 58
63810: PUSH
63811: LD_INT 0
63813: PUSH
63814: LD_INT 0
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 0
63823: PUSH
63824: LD_INT 1
63826: NEG
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 1
63834: PUSH
63835: LD_INT 0
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: LD_INT 1
63844: PUSH
63845: LD_INT 1
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 0
63854: PUSH
63855: LD_INT 1
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: LD_INT 1
63864: NEG
63865: PUSH
63866: LD_INT 0
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: PUSH
63873: LD_INT 1
63875: NEG
63876: PUSH
63877: LD_INT 1
63879: NEG
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 1
63887: NEG
63888: PUSH
63889: LD_INT 2
63891: NEG
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 0
63899: PUSH
63900: LD_INT 2
63902: NEG
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 1
63910: PUSH
63911: LD_INT 1
63913: NEG
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: LD_INT 2
63921: PUSH
63922: LD_INT 0
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 2
63931: PUSH
63932: LD_INT 1
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: PUSH
63939: LD_INT 2
63941: PUSH
63942: LD_INT 2
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PUSH
63949: LD_INT 1
63951: PUSH
63952: LD_INT 2
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 0
63961: PUSH
63962: LD_INT 2
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: LD_INT 1
63971: NEG
63972: PUSH
63973: LD_INT 1
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: LD_INT 2
63982: NEG
63983: PUSH
63984: LD_INT 0
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: PUSH
63991: LD_INT 2
63993: NEG
63994: PUSH
63995: LD_INT 1
63997: NEG
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: PUSH
64003: LD_INT 2
64005: NEG
64006: PUSH
64007: LD_INT 2
64009: NEG
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: LIST
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64036: LD_ADDR_VAR 0 59
64040: PUSH
64041: LD_INT 0
64043: PUSH
64044: LD_INT 0
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: PUSH
64051: LD_INT 0
64053: PUSH
64054: LD_INT 1
64056: NEG
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: LD_INT 1
64064: PUSH
64065: LD_INT 0
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: PUSH
64072: LD_INT 1
64074: PUSH
64075: LD_INT 1
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 0
64084: PUSH
64085: LD_INT 1
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: LD_INT 1
64094: NEG
64095: PUSH
64096: LD_INT 0
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: LD_INT 1
64105: NEG
64106: PUSH
64107: LD_INT 1
64109: NEG
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: LIST
64119: LIST
64120: LIST
64121: LIST
64122: LIST
64123: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64124: LD_ADDR_VAR 0 60
64128: PUSH
64129: LD_INT 0
64131: PUSH
64132: LD_INT 0
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: PUSH
64139: LD_INT 0
64141: PUSH
64142: LD_INT 1
64144: NEG
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: LD_INT 1
64152: PUSH
64153: LD_INT 0
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 1
64162: PUSH
64163: LD_INT 1
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 0
64172: PUSH
64173: LD_INT 1
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 1
64182: NEG
64183: PUSH
64184: LD_INT 0
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: PUSH
64191: LD_INT 1
64193: NEG
64194: PUSH
64195: LD_INT 1
64197: NEG
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64212: LD_ADDR_VAR 0 61
64216: PUSH
64217: LD_INT 0
64219: PUSH
64220: LD_INT 0
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: LD_INT 0
64229: PUSH
64230: LD_INT 1
64232: NEG
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: LD_INT 1
64240: PUSH
64241: LD_INT 0
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: LD_INT 1
64250: PUSH
64251: LD_INT 1
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 0
64260: PUSH
64261: LD_INT 1
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 1
64270: NEG
64271: PUSH
64272: LD_INT 0
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 1
64281: NEG
64282: PUSH
64283: LD_INT 1
64285: NEG
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: LIST
64295: LIST
64296: LIST
64297: LIST
64298: LIST
64299: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64300: LD_ADDR_VAR 0 62
64304: PUSH
64305: LD_INT 0
64307: PUSH
64308: LD_INT 0
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: PUSH
64315: LD_INT 0
64317: PUSH
64318: LD_INT 1
64320: NEG
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 1
64328: PUSH
64329: LD_INT 0
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 1
64338: PUSH
64339: LD_INT 1
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: PUSH
64346: LD_INT 0
64348: PUSH
64349: LD_INT 1
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: PUSH
64356: LD_INT 1
64358: NEG
64359: PUSH
64360: LD_INT 0
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: LD_INT 1
64369: NEG
64370: PUSH
64371: LD_INT 1
64373: NEG
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: LIST
64387: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64388: LD_ADDR_VAR 0 63
64392: PUSH
64393: LD_INT 0
64395: PUSH
64396: LD_INT 0
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 0
64405: PUSH
64406: LD_INT 1
64408: NEG
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: LD_INT 1
64416: PUSH
64417: LD_INT 0
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 1
64426: PUSH
64427: LD_INT 1
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 0
64436: PUSH
64437: LD_INT 1
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 1
64446: NEG
64447: PUSH
64448: LD_INT 0
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: LD_INT 1
64457: NEG
64458: PUSH
64459: LD_INT 1
64461: NEG
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64476: LD_ADDR_VAR 0 64
64480: PUSH
64481: LD_INT 0
64483: PUSH
64484: LD_INT 0
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: LD_INT 0
64493: PUSH
64494: LD_INT 1
64496: NEG
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 1
64504: PUSH
64505: LD_INT 0
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 1
64514: PUSH
64515: LD_INT 1
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 0
64524: PUSH
64525: LD_INT 1
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 1
64534: NEG
64535: PUSH
64536: LD_INT 0
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: PUSH
64543: LD_INT 1
64545: NEG
64546: PUSH
64547: LD_INT 1
64549: NEG
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: LIST
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: ST_TO_ADDR
// end ; 1 :
64564: GO 70461
64566: LD_INT 1
64568: DOUBLE
64569: EQUAL
64570: IFTRUE 64574
64572: GO 67197
64574: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64575: LD_ADDR_VAR 0 11
64579: PUSH
64580: LD_INT 1
64582: NEG
64583: PUSH
64584: LD_INT 3
64586: NEG
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: LD_INT 0
64594: PUSH
64595: LD_INT 3
64597: NEG
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 1
64605: PUSH
64606: LD_INT 2
64608: NEG
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: LIST
64618: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64619: LD_ADDR_VAR 0 12
64623: PUSH
64624: LD_INT 2
64626: PUSH
64627: LD_INT 1
64629: NEG
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 3
64637: PUSH
64638: LD_INT 0
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 3
64647: PUSH
64648: LD_INT 1
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: LIST
64659: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64660: LD_ADDR_VAR 0 13
64664: PUSH
64665: LD_INT 3
64667: PUSH
64668: LD_INT 2
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: PUSH
64675: LD_INT 3
64677: PUSH
64678: LD_INT 3
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: PUSH
64685: LD_INT 2
64687: PUSH
64688: LD_INT 3
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: LIST
64699: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64700: LD_ADDR_VAR 0 14
64704: PUSH
64705: LD_INT 1
64707: PUSH
64708: LD_INT 3
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: PUSH
64715: LD_INT 0
64717: PUSH
64718: LD_INT 3
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: LD_INT 1
64727: NEG
64728: PUSH
64729: LD_INT 2
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: LIST
64740: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64741: LD_ADDR_VAR 0 15
64745: PUSH
64746: LD_INT 2
64748: NEG
64749: PUSH
64750: LD_INT 1
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: LD_INT 3
64759: NEG
64760: PUSH
64761: LD_INT 0
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: PUSH
64768: LD_INT 3
64770: NEG
64771: PUSH
64772: LD_INT 1
64774: NEG
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: PUSH
64780: EMPTY
64781: LIST
64782: LIST
64783: LIST
64784: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64785: LD_ADDR_VAR 0 16
64789: PUSH
64790: LD_INT 2
64792: NEG
64793: PUSH
64794: LD_INT 3
64796: NEG
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: LD_INT 3
64804: NEG
64805: PUSH
64806: LD_INT 2
64808: NEG
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: PUSH
64814: LD_INT 3
64816: NEG
64817: PUSH
64818: LD_INT 3
64820: NEG
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: LIST
64830: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64831: LD_ADDR_VAR 0 17
64835: PUSH
64836: LD_INT 1
64838: NEG
64839: PUSH
64840: LD_INT 3
64842: NEG
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: PUSH
64848: LD_INT 0
64850: PUSH
64851: LD_INT 3
64853: NEG
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: PUSH
64859: LD_INT 1
64861: PUSH
64862: LD_INT 2
64864: NEG
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: LIST
64874: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64875: LD_ADDR_VAR 0 18
64879: PUSH
64880: LD_INT 2
64882: PUSH
64883: LD_INT 1
64885: NEG
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: LD_INT 3
64893: PUSH
64894: LD_INT 0
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: LD_INT 3
64903: PUSH
64904: LD_INT 1
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: LIST
64915: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64916: LD_ADDR_VAR 0 19
64920: PUSH
64921: LD_INT 3
64923: PUSH
64924: LD_INT 2
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: PUSH
64931: LD_INT 3
64933: PUSH
64934: LD_INT 3
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: PUSH
64941: LD_INT 2
64943: PUSH
64944: LD_INT 3
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: LIST
64955: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64956: LD_ADDR_VAR 0 20
64960: PUSH
64961: LD_INT 1
64963: PUSH
64964: LD_INT 3
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 0
64973: PUSH
64974: LD_INT 3
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: PUSH
64981: LD_INT 1
64983: NEG
64984: PUSH
64985: LD_INT 2
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: LIST
64996: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64997: LD_ADDR_VAR 0 21
65001: PUSH
65002: LD_INT 2
65004: NEG
65005: PUSH
65006: LD_INT 1
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_INT 3
65015: NEG
65016: PUSH
65017: LD_INT 0
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PUSH
65024: LD_INT 3
65026: NEG
65027: PUSH
65028: LD_INT 1
65030: NEG
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: LIST
65040: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65041: LD_ADDR_VAR 0 22
65045: PUSH
65046: LD_INT 2
65048: NEG
65049: PUSH
65050: LD_INT 3
65052: NEG
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: PUSH
65058: LD_INT 3
65060: NEG
65061: PUSH
65062: LD_INT 2
65064: NEG
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 3
65072: NEG
65073: PUSH
65074: LD_INT 3
65076: NEG
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: LIST
65086: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65087: LD_ADDR_VAR 0 23
65091: PUSH
65092: LD_INT 0
65094: PUSH
65095: LD_INT 3
65097: NEG
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: PUSH
65103: LD_INT 1
65105: NEG
65106: PUSH
65107: LD_INT 4
65109: NEG
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: LD_INT 1
65117: PUSH
65118: LD_INT 3
65120: NEG
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: LIST
65130: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65131: LD_ADDR_VAR 0 24
65135: PUSH
65136: LD_INT 3
65138: PUSH
65139: LD_INT 0
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: PUSH
65146: LD_INT 3
65148: PUSH
65149: LD_INT 1
65151: NEG
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: LD_INT 4
65159: PUSH
65160: LD_INT 1
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: LIST
65171: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65172: LD_ADDR_VAR 0 25
65176: PUSH
65177: LD_INT 3
65179: PUSH
65180: LD_INT 3
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: PUSH
65187: LD_INT 4
65189: PUSH
65190: LD_INT 3
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 3
65199: PUSH
65200: LD_INT 4
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: LIST
65211: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65212: LD_ADDR_VAR 0 26
65216: PUSH
65217: LD_INT 0
65219: PUSH
65220: LD_INT 3
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 1
65229: PUSH
65230: LD_INT 4
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: LD_INT 1
65239: NEG
65240: PUSH
65241: LD_INT 3
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: LIST
65252: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65253: LD_ADDR_VAR 0 27
65257: PUSH
65258: LD_INT 3
65260: NEG
65261: PUSH
65262: LD_INT 0
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 3
65271: NEG
65272: PUSH
65273: LD_INT 1
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: PUSH
65280: LD_INT 4
65282: NEG
65283: PUSH
65284: LD_INT 1
65286: NEG
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: LIST
65296: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65297: LD_ADDR_VAR 0 28
65301: PUSH
65302: LD_INT 3
65304: NEG
65305: PUSH
65306: LD_INT 3
65308: NEG
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PUSH
65314: LD_INT 3
65316: NEG
65317: PUSH
65318: LD_INT 4
65320: NEG
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 4
65328: NEG
65329: PUSH
65330: LD_INT 3
65332: NEG
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: PUSH
65338: EMPTY
65339: LIST
65340: LIST
65341: LIST
65342: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65343: LD_ADDR_VAR 0 29
65347: PUSH
65348: LD_INT 1
65350: NEG
65351: PUSH
65352: LD_INT 3
65354: NEG
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 0
65362: PUSH
65363: LD_INT 3
65365: NEG
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: LD_INT 1
65373: PUSH
65374: LD_INT 2
65376: NEG
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: PUSH
65382: LD_INT 1
65384: NEG
65385: PUSH
65386: LD_INT 4
65388: NEG
65389: PUSH
65390: EMPTY
65391: LIST
65392: LIST
65393: PUSH
65394: LD_INT 0
65396: PUSH
65397: LD_INT 4
65399: NEG
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: PUSH
65405: LD_INT 1
65407: PUSH
65408: LD_INT 3
65410: NEG
65411: PUSH
65412: EMPTY
65413: LIST
65414: LIST
65415: PUSH
65416: LD_INT 1
65418: NEG
65419: PUSH
65420: LD_INT 5
65422: NEG
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: PUSH
65428: LD_INT 0
65430: PUSH
65431: LD_INT 5
65433: NEG
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: LD_INT 1
65441: PUSH
65442: LD_INT 4
65444: NEG
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: LD_INT 1
65452: NEG
65453: PUSH
65454: LD_INT 6
65456: NEG
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: PUSH
65462: LD_INT 0
65464: PUSH
65465: LD_INT 6
65467: NEG
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: PUSH
65473: LD_INT 1
65475: PUSH
65476: LD_INT 5
65478: NEG
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: LIST
65488: LIST
65489: LIST
65490: LIST
65491: LIST
65492: LIST
65493: LIST
65494: LIST
65495: LIST
65496: LIST
65497: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65498: LD_ADDR_VAR 0 30
65502: PUSH
65503: LD_INT 2
65505: PUSH
65506: LD_INT 1
65508: NEG
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: PUSH
65514: LD_INT 3
65516: PUSH
65517: LD_INT 0
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 3
65526: PUSH
65527: LD_INT 1
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: PUSH
65534: LD_INT 3
65536: PUSH
65537: LD_INT 1
65539: NEG
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: PUSH
65545: LD_INT 4
65547: PUSH
65548: LD_INT 0
65550: PUSH
65551: EMPTY
65552: LIST
65553: LIST
65554: PUSH
65555: LD_INT 4
65557: PUSH
65558: LD_INT 1
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: PUSH
65565: LD_INT 4
65567: PUSH
65568: LD_INT 1
65570: NEG
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: PUSH
65576: LD_INT 5
65578: PUSH
65579: LD_INT 0
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: PUSH
65586: LD_INT 5
65588: PUSH
65589: LD_INT 1
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: PUSH
65596: LD_INT 5
65598: PUSH
65599: LD_INT 1
65601: NEG
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: LD_INT 6
65609: PUSH
65610: LD_INT 0
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: LD_INT 6
65619: PUSH
65620: LD_INT 1
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: LIST
65639: LIST
65640: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65641: LD_ADDR_VAR 0 31
65645: PUSH
65646: LD_INT 3
65648: PUSH
65649: LD_INT 2
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: LD_INT 3
65658: PUSH
65659: LD_INT 3
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: PUSH
65666: LD_INT 2
65668: PUSH
65669: LD_INT 3
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PUSH
65676: LD_INT 4
65678: PUSH
65679: LD_INT 3
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: LD_INT 4
65688: PUSH
65689: LD_INT 4
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: LD_INT 3
65698: PUSH
65699: LD_INT 4
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PUSH
65706: LD_INT 5
65708: PUSH
65709: LD_INT 4
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: PUSH
65716: LD_INT 5
65718: PUSH
65719: LD_INT 5
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: LD_INT 4
65728: PUSH
65729: LD_INT 5
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: PUSH
65736: LD_INT 6
65738: PUSH
65739: LD_INT 5
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: LD_INT 6
65748: PUSH
65749: LD_INT 6
65751: PUSH
65752: EMPTY
65753: LIST
65754: LIST
65755: PUSH
65756: LD_INT 5
65758: PUSH
65759: LD_INT 6
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: LIST
65770: LIST
65771: LIST
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: LIST
65777: LIST
65778: LIST
65779: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65780: LD_ADDR_VAR 0 32
65784: PUSH
65785: LD_INT 1
65787: PUSH
65788: LD_INT 3
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: PUSH
65795: LD_INT 0
65797: PUSH
65798: LD_INT 3
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PUSH
65805: LD_INT 1
65807: NEG
65808: PUSH
65809: LD_INT 2
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: PUSH
65816: LD_INT 1
65818: PUSH
65819: LD_INT 4
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: PUSH
65826: LD_INT 0
65828: PUSH
65829: LD_INT 4
65831: PUSH
65832: EMPTY
65833: LIST
65834: LIST
65835: PUSH
65836: LD_INT 1
65838: NEG
65839: PUSH
65840: LD_INT 3
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: PUSH
65847: LD_INT 1
65849: PUSH
65850: LD_INT 5
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: PUSH
65857: LD_INT 0
65859: PUSH
65860: LD_INT 5
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: PUSH
65867: LD_INT 1
65869: NEG
65870: PUSH
65871: LD_INT 4
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: PUSH
65878: LD_INT 1
65880: PUSH
65881: LD_INT 6
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: PUSH
65888: LD_INT 0
65890: PUSH
65891: LD_INT 6
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: PUSH
65898: LD_INT 1
65900: NEG
65901: PUSH
65902: LD_INT 5
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: LIST
65917: LIST
65918: LIST
65919: LIST
65920: LIST
65921: LIST
65922: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65923: LD_ADDR_VAR 0 33
65927: PUSH
65928: LD_INT 2
65930: NEG
65931: PUSH
65932: LD_INT 1
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: LD_INT 3
65941: NEG
65942: PUSH
65943: LD_INT 0
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 3
65952: NEG
65953: PUSH
65954: LD_INT 1
65956: NEG
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: LD_INT 3
65964: NEG
65965: PUSH
65966: LD_INT 1
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: PUSH
65973: LD_INT 4
65975: NEG
65976: PUSH
65977: LD_INT 0
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: LD_INT 4
65986: NEG
65987: PUSH
65988: LD_INT 1
65990: NEG
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: PUSH
65996: LD_INT 4
65998: NEG
65999: PUSH
66000: LD_INT 1
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: PUSH
66007: LD_INT 5
66009: NEG
66010: PUSH
66011: LD_INT 0
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: PUSH
66018: LD_INT 5
66020: NEG
66021: PUSH
66022: LD_INT 1
66024: NEG
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PUSH
66030: LD_INT 5
66032: NEG
66033: PUSH
66034: LD_INT 1
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: PUSH
66041: LD_INT 6
66043: NEG
66044: PUSH
66045: LD_INT 0
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PUSH
66052: LD_INT 6
66054: NEG
66055: PUSH
66056: LD_INT 1
66058: NEG
66059: PUSH
66060: EMPTY
66061: LIST
66062: LIST
66063: PUSH
66064: EMPTY
66065: LIST
66066: LIST
66067: LIST
66068: LIST
66069: LIST
66070: LIST
66071: LIST
66072: LIST
66073: LIST
66074: LIST
66075: LIST
66076: LIST
66077: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66078: LD_ADDR_VAR 0 34
66082: PUSH
66083: LD_INT 2
66085: NEG
66086: PUSH
66087: LD_INT 3
66089: NEG
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: PUSH
66095: LD_INT 3
66097: NEG
66098: PUSH
66099: LD_INT 2
66101: NEG
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: PUSH
66107: LD_INT 3
66109: NEG
66110: PUSH
66111: LD_INT 3
66113: NEG
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: PUSH
66119: LD_INT 3
66121: NEG
66122: PUSH
66123: LD_INT 4
66125: NEG
66126: PUSH
66127: EMPTY
66128: LIST
66129: LIST
66130: PUSH
66131: LD_INT 4
66133: NEG
66134: PUSH
66135: LD_INT 3
66137: NEG
66138: PUSH
66139: EMPTY
66140: LIST
66141: LIST
66142: PUSH
66143: LD_INT 4
66145: NEG
66146: PUSH
66147: LD_INT 4
66149: NEG
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: PUSH
66155: LD_INT 4
66157: NEG
66158: PUSH
66159: LD_INT 5
66161: NEG
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: PUSH
66167: LD_INT 5
66169: NEG
66170: PUSH
66171: LD_INT 4
66173: NEG
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: LD_INT 5
66181: NEG
66182: PUSH
66183: LD_INT 5
66185: NEG
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: PUSH
66191: LD_INT 5
66193: NEG
66194: PUSH
66195: LD_INT 6
66197: NEG
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: PUSH
66203: LD_INT 6
66205: NEG
66206: PUSH
66207: LD_INT 5
66209: NEG
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: PUSH
66215: LD_INT 6
66217: NEG
66218: PUSH
66219: LD_INT 6
66221: NEG
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: PUSH
66227: EMPTY
66228: LIST
66229: LIST
66230: LIST
66231: LIST
66232: LIST
66233: LIST
66234: LIST
66235: LIST
66236: LIST
66237: LIST
66238: LIST
66239: LIST
66240: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66241: LD_ADDR_VAR 0 41
66245: PUSH
66246: LD_INT 0
66248: PUSH
66249: LD_INT 2
66251: NEG
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: LD_INT 1
66259: NEG
66260: PUSH
66261: LD_INT 3
66263: NEG
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: PUSH
66269: LD_INT 1
66271: PUSH
66272: LD_INT 2
66274: NEG
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: LIST
66284: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66285: LD_ADDR_VAR 0 42
66289: PUSH
66290: LD_INT 2
66292: PUSH
66293: LD_INT 0
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 2
66302: PUSH
66303: LD_INT 1
66305: NEG
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: LD_INT 3
66313: PUSH
66314: LD_INT 1
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: LIST
66325: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66326: LD_ADDR_VAR 0 43
66330: PUSH
66331: LD_INT 2
66333: PUSH
66334: LD_INT 2
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: PUSH
66341: LD_INT 3
66343: PUSH
66344: LD_INT 2
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: PUSH
66351: LD_INT 2
66353: PUSH
66354: LD_INT 3
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: LIST
66365: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66366: LD_ADDR_VAR 0 44
66370: PUSH
66371: LD_INT 0
66373: PUSH
66374: LD_INT 2
66376: PUSH
66377: EMPTY
66378: LIST
66379: LIST
66380: PUSH
66381: LD_INT 1
66383: PUSH
66384: LD_INT 3
66386: PUSH
66387: EMPTY
66388: LIST
66389: LIST
66390: PUSH
66391: LD_INT 1
66393: NEG
66394: PUSH
66395: LD_INT 2
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: LIST
66406: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66407: LD_ADDR_VAR 0 45
66411: PUSH
66412: LD_INT 2
66414: NEG
66415: PUSH
66416: LD_INT 0
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: LD_INT 2
66425: NEG
66426: PUSH
66427: LD_INT 1
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: PUSH
66434: LD_INT 3
66436: NEG
66437: PUSH
66438: LD_INT 1
66440: NEG
66441: PUSH
66442: EMPTY
66443: LIST
66444: LIST
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: LIST
66450: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66451: LD_ADDR_VAR 0 46
66455: PUSH
66456: LD_INT 2
66458: NEG
66459: PUSH
66460: LD_INT 2
66462: NEG
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: PUSH
66468: LD_INT 2
66470: NEG
66471: PUSH
66472: LD_INT 3
66474: NEG
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: PUSH
66480: LD_INT 3
66482: NEG
66483: PUSH
66484: LD_INT 2
66486: NEG
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: LIST
66496: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66497: LD_ADDR_VAR 0 47
66501: PUSH
66502: LD_INT 2
66504: NEG
66505: PUSH
66506: LD_INT 3
66508: NEG
66509: PUSH
66510: EMPTY
66511: LIST
66512: LIST
66513: PUSH
66514: LD_INT 1
66516: NEG
66517: PUSH
66518: LD_INT 3
66520: NEG
66521: PUSH
66522: EMPTY
66523: LIST
66524: LIST
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66530: LD_ADDR_VAR 0 48
66534: PUSH
66535: LD_INT 1
66537: PUSH
66538: LD_INT 2
66540: NEG
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: PUSH
66546: LD_INT 2
66548: PUSH
66549: LD_INT 1
66551: NEG
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66561: LD_ADDR_VAR 0 49
66565: PUSH
66566: LD_INT 3
66568: PUSH
66569: LD_INT 1
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: LD_INT 3
66578: PUSH
66579: LD_INT 2
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66590: LD_ADDR_VAR 0 50
66594: PUSH
66595: LD_INT 2
66597: PUSH
66598: LD_INT 3
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: PUSH
66605: LD_INT 1
66607: PUSH
66608: LD_INT 3
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66619: LD_ADDR_VAR 0 51
66623: PUSH
66624: LD_INT 1
66626: NEG
66627: PUSH
66628: LD_INT 2
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: PUSH
66635: LD_INT 2
66637: NEG
66638: PUSH
66639: LD_INT 1
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66650: LD_ADDR_VAR 0 52
66654: PUSH
66655: LD_INT 3
66657: NEG
66658: PUSH
66659: LD_INT 1
66661: NEG
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: PUSH
66667: LD_INT 3
66669: NEG
66670: PUSH
66671: LD_INT 2
66673: NEG
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66683: LD_ADDR_VAR 0 53
66687: PUSH
66688: LD_INT 1
66690: NEG
66691: PUSH
66692: LD_INT 3
66694: NEG
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: LD_INT 0
66702: PUSH
66703: LD_INT 3
66705: NEG
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: LD_INT 1
66713: PUSH
66714: LD_INT 2
66716: NEG
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PUSH
66722: EMPTY
66723: LIST
66724: LIST
66725: LIST
66726: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66727: LD_ADDR_VAR 0 54
66731: PUSH
66732: LD_INT 2
66734: PUSH
66735: LD_INT 1
66737: NEG
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: PUSH
66743: LD_INT 3
66745: PUSH
66746: LD_INT 0
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: LD_INT 3
66755: PUSH
66756: LD_INT 1
66758: PUSH
66759: EMPTY
66760: LIST
66761: LIST
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: LIST
66767: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66768: LD_ADDR_VAR 0 55
66772: PUSH
66773: LD_INT 3
66775: PUSH
66776: LD_INT 2
66778: PUSH
66779: EMPTY
66780: LIST
66781: LIST
66782: PUSH
66783: LD_INT 3
66785: PUSH
66786: LD_INT 3
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: PUSH
66793: LD_INT 2
66795: PUSH
66796: LD_INT 3
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: LIST
66807: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66808: LD_ADDR_VAR 0 56
66812: PUSH
66813: LD_INT 1
66815: PUSH
66816: LD_INT 3
66818: PUSH
66819: EMPTY
66820: LIST
66821: LIST
66822: PUSH
66823: LD_INT 0
66825: PUSH
66826: LD_INT 3
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: PUSH
66833: LD_INT 1
66835: NEG
66836: PUSH
66837: LD_INT 2
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: LIST
66848: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66849: LD_ADDR_VAR 0 57
66853: PUSH
66854: LD_INT 2
66856: NEG
66857: PUSH
66858: LD_INT 1
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: PUSH
66865: LD_INT 3
66867: NEG
66868: PUSH
66869: LD_INT 0
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 3
66878: NEG
66879: PUSH
66880: LD_INT 1
66882: NEG
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: LIST
66892: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66893: LD_ADDR_VAR 0 58
66897: PUSH
66898: LD_INT 2
66900: NEG
66901: PUSH
66902: LD_INT 3
66904: NEG
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: LD_INT 3
66912: NEG
66913: PUSH
66914: LD_INT 2
66916: NEG
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: PUSH
66922: LD_INT 3
66924: NEG
66925: PUSH
66926: LD_INT 3
66928: NEG
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: LIST
66938: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66939: LD_ADDR_VAR 0 59
66943: PUSH
66944: LD_INT 1
66946: NEG
66947: PUSH
66948: LD_INT 2
66950: NEG
66951: PUSH
66952: EMPTY
66953: LIST
66954: LIST
66955: PUSH
66956: LD_INT 0
66958: PUSH
66959: LD_INT 2
66961: NEG
66962: PUSH
66963: EMPTY
66964: LIST
66965: LIST
66966: PUSH
66967: LD_INT 1
66969: PUSH
66970: LD_INT 1
66972: NEG
66973: PUSH
66974: EMPTY
66975: LIST
66976: LIST
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: LIST
66982: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66983: LD_ADDR_VAR 0 60
66987: PUSH
66988: LD_INT 1
66990: PUSH
66991: LD_INT 1
66993: NEG
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: LD_INT 2
67001: PUSH
67002: LD_INT 0
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 2
67011: PUSH
67012: LD_INT 1
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: LIST
67023: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67024: LD_ADDR_VAR 0 61
67028: PUSH
67029: LD_INT 2
67031: PUSH
67032: LD_INT 1
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: LD_INT 2
67041: PUSH
67042: LD_INT 2
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 1
67051: PUSH
67052: LD_INT 2
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: LIST
67063: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67064: LD_ADDR_VAR 0 62
67068: PUSH
67069: LD_INT 1
67071: PUSH
67072: LD_INT 2
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: PUSH
67079: LD_INT 0
67081: PUSH
67082: LD_INT 2
67084: PUSH
67085: EMPTY
67086: LIST
67087: LIST
67088: PUSH
67089: LD_INT 1
67091: NEG
67092: PUSH
67093: LD_INT 1
67095: PUSH
67096: EMPTY
67097: LIST
67098: LIST
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: LIST
67104: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67105: LD_ADDR_VAR 0 63
67109: PUSH
67110: LD_INT 1
67112: NEG
67113: PUSH
67114: LD_INT 1
67116: PUSH
67117: EMPTY
67118: LIST
67119: LIST
67120: PUSH
67121: LD_INT 2
67123: NEG
67124: PUSH
67125: LD_INT 0
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: LD_INT 2
67134: NEG
67135: PUSH
67136: LD_INT 1
67138: NEG
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: LIST
67148: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67149: LD_ADDR_VAR 0 64
67153: PUSH
67154: LD_INT 1
67156: NEG
67157: PUSH
67158: LD_INT 2
67160: NEG
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: PUSH
67166: LD_INT 2
67168: NEG
67169: PUSH
67170: LD_INT 1
67172: NEG
67173: PUSH
67174: EMPTY
67175: LIST
67176: LIST
67177: PUSH
67178: LD_INT 2
67180: NEG
67181: PUSH
67182: LD_INT 2
67184: NEG
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: LIST
67194: ST_TO_ADDR
// end ; 2 :
67195: GO 70461
67197: LD_INT 2
67199: DOUBLE
67200: EQUAL
67201: IFTRUE 67205
67203: GO 70460
67205: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67206: LD_ADDR_VAR 0 29
67210: PUSH
67211: LD_INT 4
67213: PUSH
67214: LD_INT 0
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: PUSH
67221: LD_INT 4
67223: PUSH
67224: LD_INT 1
67226: NEG
67227: PUSH
67228: EMPTY
67229: LIST
67230: LIST
67231: PUSH
67232: LD_INT 5
67234: PUSH
67235: LD_INT 0
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: PUSH
67242: LD_INT 5
67244: PUSH
67245: LD_INT 1
67247: PUSH
67248: EMPTY
67249: LIST
67250: LIST
67251: PUSH
67252: LD_INT 4
67254: PUSH
67255: LD_INT 1
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: PUSH
67262: LD_INT 3
67264: PUSH
67265: LD_INT 0
67267: PUSH
67268: EMPTY
67269: LIST
67270: LIST
67271: PUSH
67272: LD_INT 3
67274: PUSH
67275: LD_INT 1
67277: NEG
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: PUSH
67283: LD_INT 3
67285: PUSH
67286: LD_INT 2
67288: NEG
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: PUSH
67294: LD_INT 5
67296: PUSH
67297: LD_INT 2
67299: PUSH
67300: EMPTY
67301: LIST
67302: LIST
67303: PUSH
67304: LD_INT 3
67306: PUSH
67307: LD_INT 3
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: PUSH
67314: LD_INT 3
67316: PUSH
67317: LD_INT 2
67319: PUSH
67320: EMPTY
67321: LIST
67322: LIST
67323: PUSH
67324: LD_INT 4
67326: PUSH
67327: LD_INT 3
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: PUSH
67334: LD_INT 4
67336: PUSH
67337: LD_INT 4
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: PUSH
67344: LD_INT 3
67346: PUSH
67347: LD_INT 4
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: PUSH
67354: LD_INT 2
67356: PUSH
67357: LD_INT 3
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: PUSH
67364: LD_INT 2
67366: PUSH
67367: LD_INT 2
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: PUSH
67374: LD_INT 4
67376: PUSH
67377: LD_INT 2
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: PUSH
67384: LD_INT 2
67386: PUSH
67387: LD_INT 4
67389: PUSH
67390: EMPTY
67391: LIST
67392: LIST
67393: PUSH
67394: LD_INT 0
67396: PUSH
67397: LD_INT 4
67399: PUSH
67400: EMPTY
67401: LIST
67402: LIST
67403: PUSH
67404: LD_INT 0
67406: PUSH
67407: LD_INT 3
67409: PUSH
67410: EMPTY
67411: LIST
67412: LIST
67413: PUSH
67414: LD_INT 1
67416: PUSH
67417: LD_INT 4
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: PUSH
67424: LD_INT 1
67426: PUSH
67427: LD_INT 5
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: PUSH
67434: LD_INT 0
67436: PUSH
67437: LD_INT 5
67439: PUSH
67440: EMPTY
67441: LIST
67442: LIST
67443: PUSH
67444: LD_INT 1
67446: NEG
67447: PUSH
67448: LD_INT 4
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: PUSH
67455: LD_INT 1
67457: NEG
67458: PUSH
67459: LD_INT 3
67461: PUSH
67462: EMPTY
67463: LIST
67464: LIST
67465: PUSH
67466: LD_INT 2
67468: PUSH
67469: LD_INT 5
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: PUSH
67476: LD_INT 2
67478: NEG
67479: PUSH
67480: LD_INT 3
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: PUSH
67487: LD_INT 3
67489: NEG
67490: PUSH
67491: LD_INT 0
67493: PUSH
67494: EMPTY
67495: LIST
67496: LIST
67497: PUSH
67498: LD_INT 3
67500: NEG
67501: PUSH
67502: LD_INT 1
67504: NEG
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: PUSH
67510: LD_INT 2
67512: NEG
67513: PUSH
67514: LD_INT 0
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: PUSH
67521: LD_INT 2
67523: NEG
67524: PUSH
67525: LD_INT 1
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PUSH
67532: LD_INT 3
67534: NEG
67535: PUSH
67536: LD_INT 1
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: PUSH
67543: LD_INT 4
67545: NEG
67546: PUSH
67547: LD_INT 0
67549: PUSH
67550: EMPTY
67551: LIST
67552: LIST
67553: PUSH
67554: LD_INT 4
67556: NEG
67557: PUSH
67558: LD_INT 1
67560: NEG
67561: PUSH
67562: EMPTY
67563: LIST
67564: LIST
67565: PUSH
67566: LD_INT 4
67568: NEG
67569: PUSH
67570: LD_INT 2
67572: NEG
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: PUSH
67578: LD_INT 2
67580: NEG
67581: PUSH
67582: LD_INT 2
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: PUSH
67589: LD_INT 4
67591: NEG
67592: PUSH
67593: LD_INT 4
67595: NEG
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: PUSH
67601: LD_INT 4
67603: NEG
67604: PUSH
67605: LD_INT 5
67607: NEG
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: PUSH
67613: LD_INT 3
67615: NEG
67616: PUSH
67617: LD_INT 4
67619: NEG
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: PUSH
67625: LD_INT 3
67627: NEG
67628: PUSH
67629: LD_INT 3
67631: NEG
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: PUSH
67637: LD_INT 4
67639: NEG
67640: PUSH
67641: LD_INT 3
67643: NEG
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: PUSH
67649: LD_INT 5
67651: NEG
67652: PUSH
67653: LD_INT 4
67655: NEG
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: PUSH
67661: LD_INT 5
67663: NEG
67664: PUSH
67665: LD_INT 5
67667: NEG
67668: PUSH
67669: EMPTY
67670: LIST
67671: LIST
67672: PUSH
67673: LD_INT 3
67675: NEG
67676: PUSH
67677: LD_INT 5
67679: NEG
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: PUSH
67685: LD_INT 5
67687: NEG
67688: PUSH
67689: LD_INT 3
67691: NEG
67692: PUSH
67693: EMPTY
67694: LIST
67695: LIST
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: LIST
67701: LIST
67702: LIST
67703: LIST
67704: LIST
67705: LIST
67706: LIST
67707: LIST
67708: LIST
67709: LIST
67710: LIST
67711: LIST
67712: LIST
67713: LIST
67714: LIST
67715: LIST
67716: LIST
67717: LIST
67718: LIST
67719: LIST
67720: LIST
67721: LIST
67722: LIST
67723: LIST
67724: LIST
67725: LIST
67726: LIST
67727: LIST
67728: LIST
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: LIST
67735: LIST
67736: LIST
67737: LIST
67738: LIST
67739: LIST
67740: LIST
67741: LIST
67742: LIST
67743: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67744: LD_ADDR_VAR 0 30
67748: PUSH
67749: LD_INT 4
67751: PUSH
67752: LD_INT 4
67754: PUSH
67755: EMPTY
67756: LIST
67757: LIST
67758: PUSH
67759: LD_INT 4
67761: PUSH
67762: LD_INT 3
67764: PUSH
67765: EMPTY
67766: LIST
67767: LIST
67768: PUSH
67769: LD_INT 5
67771: PUSH
67772: LD_INT 4
67774: PUSH
67775: EMPTY
67776: LIST
67777: LIST
67778: PUSH
67779: LD_INT 5
67781: PUSH
67782: LD_INT 5
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: PUSH
67789: LD_INT 4
67791: PUSH
67792: LD_INT 5
67794: PUSH
67795: EMPTY
67796: LIST
67797: LIST
67798: PUSH
67799: LD_INT 3
67801: PUSH
67802: LD_INT 4
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: PUSH
67809: LD_INT 3
67811: PUSH
67812: LD_INT 3
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: PUSH
67819: LD_INT 5
67821: PUSH
67822: LD_INT 3
67824: PUSH
67825: EMPTY
67826: LIST
67827: LIST
67828: PUSH
67829: LD_INT 3
67831: PUSH
67832: LD_INT 5
67834: PUSH
67835: EMPTY
67836: LIST
67837: LIST
67838: PUSH
67839: LD_INT 0
67841: PUSH
67842: LD_INT 3
67844: PUSH
67845: EMPTY
67846: LIST
67847: LIST
67848: PUSH
67849: LD_INT 0
67851: PUSH
67852: LD_INT 2
67854: PUSH
67855: EMPTY
67856: LIST
67857: LIST
67858: PUSH
67859: LD_INT 1
67861: PUSH
67862: LD_INT 3
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: PUSH
67869: LD_INT 1
67871: PUSH
67872: LD_INT 4
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: PUSH
67879: LD_INT 0
67881: PUSH
67882: LD_INT 4
67884: PUSH
67885: EMPTY
67886: LIST
67887: LIST
67888: PUSH
67889: LD_INT 1
67891: NEG
67892: PUSH
67893: LD_INT 3
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: PUSH
67900: LD_INT 1
67902: NEG
67903: PUSH
67904: LD_INT 2
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: PUSH
67911: LD_INT 2
67913: PUSH
67914: LD_INT 4
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: PUSH
67921: LD_INT 2
67923: NEG
67924: PUSH
67925: LD_INT 2
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: LD_INT 4
67934: NEG
67935: PUSH
67936: LD_INT 0
67938: PUSH
67939: EMPTY
67940: LIST
67941: LIST
67942: PUSH
67943: LD_INT 4
67945: NEG
67946: PUSH
67947: LD_INT 1
67949: NEG
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: PUSH
67955: LD_INT 3
67957: NEG
67958: PUSH
67959: LD_INT 0
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: LD_INT 3
67968: NEG
67969: PUSH
67970: LD_INT 1
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: PUSH
67977: LD_INT 4
67979: NEG
67980: PUSH
67981: LD_INT 1
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: LD_INT 5
67990: NEG
67991: PUSH
67992: LD_INT 0
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: PUSH
67999: LD_INT 5
68001: NEG
68002: PUSH
68003: LD_INT 1
68005: NEG
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: PUSH
68011: LD_INT 5
68013: NEG
68014: PUSH
68015: LD_INT 2
68017: NEG
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: PUSH
68023: LD_INT 3
68025: NEG
68026: PUSH
68027: LD_INT 2
68029: PUSH
68030: EMPTY
68031: LIST
68032: LIST
68033: PUSH
68034: LD_INT 3
68036: NEG
68037: PUSH
68038: LD_INT 3
68040: NEG
68041: PUSH
68042: EMPTY
68043: LIST
68044: LIST
68045: PUSH
68046: LD_INT 3
68048: NEG
68049: PUSH
68050: LD_INT 4
68052: NEG
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: PUSH
68058: LD_INT 2
68060: NEG
68061: PUSH
68062: LD_INT 3
68064: NEG
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: PUSH
68070: LD_INT 2
68072: NEG
68073: PUSH
68074: LD_INT 2
68076: NEG
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: PUSH
68082: LD_INT 3
68084: NEG
68085: PUSH
68086: LD_INT 2
68088: NEG
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: PUSH
68094: LD_INT 4
68096: NEG
68097: PUSH
68098: LD_INT 3
68100: NEG
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: PUSH
68106: LD_INT 4
68108: NEG
68109: PUSH
68110: LD_INT 4
68112: NEG
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: PUSH
68118: LD_INT 2
68120: NEG
68121: PUSH
68122: LD_INT 4
68124: NEG
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: PUSH
68130: LD_INT 4
68132: NEG
68133: PUSH
68134: LD_INT 2
68136: NEG
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: PUSH
68142: LD_INT 0
68144: PUSH
68145: LD_INT 4
68147: NEG
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: PUSH
68153: LD_INT 0
68155: PUSH
68156: LD_INT 5
68158: NEG
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: PUSH
68164: LD_INT 1
68166: PUSH
68167: LD_INT 4
68169: NEG
68170: PUSH
68171: EMPTY
68172: LIST
68173: LIST
68174: PUSH
68175: LD_INT 1
68177: PUSH
68178: LD_INT 3
68180: NEG
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: PUSH
68186: LD_INT 0
68188: PUSH
68189: LD_INT 3
68191: NEG
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: PUSH
68197: LD_INT 1
68199: NEG
68200: PUSH
68201: LD_INT 4
68203: NEG
68204: PUSH
68205: EMPTY
68206: LIST
68207: LIST
68208: PUSH
68209: LD_INT 1
68211: NEG
68212: PUSH
68213: LD_INT 5
68215: NEG
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: LD_INT 2
68223: PUSH
68224: LD_INT 3
68226: NEG
68227: PUSH
68228: EMPTY
68229: LIST
68230: LIST
68231: PUSH
68232: LD_INT 2
68234: NEG
68235: PUSH
68236: LD_INT 5
68238: NEG
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: EMPTY
68245: LIST
68246: LIST
68247: LIST
68248: LIST
68249: LIST
68250: LIST
68251: LIST
68252: LIST
68253: LIST
68254: LIST
68255: LIST
68256: LIST
68257: LIST
68258: LIST
68259: LIST
68260: LIST
68261: LIST
68262: LIST
68263: LIST
68264: LIST
68265: LIST
68266: LIST
68267: LIST
68268: LIST
68269: LIST
68270: LIST
68271: LIST
68272: LIST
68273: LIST
68274: LIST
68275: LIST
68276: LIST
68277: LIST
68278: LIST
68279: LIST
68280: LIST
68281: LIST
68282: LIST
68283: LIST
68284: LIST
68285: LIST
68286: LIST
68287: LIST
68288: LIST
68289: LIST
68290: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68291: LD_ADDR_VAR 0 31
68295: PUSH
68296: LD_INT 0
68298: PUSH
68299: LD_INT 4
68301: PUSH
68302: EMPTY
68303: LIST
68304: LIST
68305: PUSH
68306: LD_INT 0
68308: PUSH
68309: LD_INT 3
68311: PUSH
68312: EMPTY
68313: LIST
68314: LIST
68315: PUSH
68316: LD_INT 1
68318: PUSH
68319: LD_INT 4
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: PUSH
68326: LD_INT 1
68328: PUSH
68329: LD_INT 5
68331: PUSH
68332: EMPTY
68333: LIST
68334: LIST
68335: PUSH
68336: LD_INT 0
68338: PUSH
68339: LD_INT 5
68341: PUSH
68342: EMPTY
68343: LIST
68344: LIST
68345: PUSH
68346: LD_INT 1
68348: NEG
68349: PUSH
68350: LD_INT 4
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: PUSH
68357: LD_INT 1
68359: NEG
68360: PUSH
68361: LD_INT 3
68363: PUSH
68364: EMPTY
68365: LIST
68366: LIST
68367: PUSH
68368: LD_INT 2
68370: PUSH
68371: LD_INT 5
68373: PUSH
68374: EMPTY
68375: LIST
68376: LIST
68377: PUSH
68378: LD_INT 2
68380: NEG
68381: PUSH
68382: LD_INT 3
68384: PUSH
68385: EMPTY
68386: LIST
68387: LIST
68388: PUSH
68389: LD_INT 3
68391: NEG
68392: PUSH
68393: LD_INT 0
68395: PUSH
68396: EMPTY
68397: LIST
68398: LIST
68399: PUSH
68400: LD_INT 3
68402: NEG
68403: PUSH
68404: LD_INT 1
68406: NEG
68407: PUSH
68408: EMPTY
68409: LIST
68410: LIST
68411: PUSH
68412: LD_INT 2
68414: NEG
68415: PUSH
68416: LD_INT 0
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: PUSH
68423: LD_INT 2
68425: NEG
68426: PUSH
68427: LD_INT 1
68429: PUSH
68430: EMPTY
68431: LIST
68432: LIST
68433: PUSH
68434: LD_INT 3
68436: NEG
68437: PUSH
68438: LD_INT 1
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: PUSH
68445: LD_INT 4
68447: NEG
68448: PUSH
68449: LD_INT 0
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: PUSH
68456: LD_INT 4
68458: NEG
68459: PUSH
68460: LD_INT 1
68462: NEG
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: PUSH
68468: LD_INT 4
68470: NEG
68471: PUSH
68472: LD_INT 2
68474: NEG
68475: PUSH
68476: EMPTY
68477: LIST
68478: LIST
68479: PUSH
68480: LD_INT 2
68482: NEG
68483: PUSH
68484: LD_INT 2
68486: PUSH
68487: EMPTY
68488: LIST
68489: LIST
68490: PUSH
68491: LD_INT 4
68493: NEG
68494: PUSH
68495: LD_INT 4
68497: NEG
68498: PUSH
68499: EMPTY
68500: LIST
68501: LIST
68502: PUSH
68503: LD_INT 4
68505: NEG
68506: PUSH
68507: LD_INT 5
68509: NEG
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: LD_INT 3
68517: NEG
68518: PUSH
68519: LD_INT 4
68521: NEG
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: PUSH
68527: LD_INT 3
68529: NEG
68530: PUSH
68531: LD_INT 3
68533: NEG
68534: PUSH
68535: EMPTY
68536: LIST
68537: LIST
68538: PUSH
68539: LD_INT 4
68541: NEG
68542: PUSH
68543: LD_INT 3
68545: NEG
68546: PUSH
68547: EMPTY
68548: LIST
68549: LIST
68550: PUSH
68551: LD_INT 5
68553: NEG
68554: PUSH
68555: LD_INT 4
68557: NEG
68558: PUSH
68559: EMPTY
68560: LIST
68561: LIST
68562: PUSH
68563: LD_INT 5
68565: NEG
68566: PUSH
68567: LD_INT 5
68569: NEG
68570: PUSH
68571: EMPTY
68572: LIST
68573: LIST
68574: PUSH
68575: LD_INT 3
68577: NEG
68578: PUSH
68579: LD_INT 5
68581: NEG
68582: PUSH
68583: EMPTY
68584: LIST
68585: LIST
68586: PUSH
68587: LD_INT 5
68589: NEG
68590: PUSH
68591: LD_INT 3
68593: NEG
68594: PUSH
68595: EMPTY
68596: LIST
68597: LIST
68598: PUSH
68599: LD_INT 0
68601: PUSH
68602: LD_INT 3
68604: NEG
68605: PUSH
68606: EMPTY
68607: LIST
68608: LIST
68609: PUSH
68610: LD_INT 0
68612: PUSH
68613: LD_INT 4
68615: NEG
68616: PUSH
68617: EMPTY
68618: LIST
68619: LIST
68620: PUSH
68621: LD_INT 1
68623: PUSH
68624: LD_INT 3
68626: NEG
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: PUSH
68632: LD_INT 1
68634: PUSH
68635: LD_INT 2
68637: NEG
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: PUSH
68643: LD_INT 0
68645: PUSH
68646: LD_INT 2
68648: NEG
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: PUSH
68654: LD_INT 1
68656: NEG
68657: PUSH
68658: LD_INT 3
68660: NEG
68661: PUSH
68662: EMPTY
68663: LIST
68664: LIST
68665: PUSH
68666: LD_INT 1
68668: NEG
68669: PUSH
68670: LD_INT 4
68672: NEG
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: LD_INT 2
68680: PUSH
68681: LD_INT 2
68683: NEG
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: PUSH
68689: LD_INT 2
68691: NEG
68692: PUSH
68693: LD_INT 4
68695: NEG
68696: PUSH
68697: EMPTY
68698: LIST
68699: LIST
68700: PUSH
68701: LD_INT 4
68703: PUSH
68704: LD_INT 0
68706: PUSH
68707: EMPTY
68708: LIST
68709: LIST
68710: PUSH
68711: LD_INT 4
68713: PUSH
68714: LD_INT 1
68716: NEG
68717: PUSH
68718: EMPTY
68719: LIST
68720: LIST
68721: PUSH
68722: LD_INT 5
68724: PUSH
68725: LD_INT 0
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: PUSH
68732: LD_INT 5
68734: PUSH
68735: LD_INT 1
68737: PUSH
68738: EMPTY
68739: LIST
68740: LIST
68741: PUSH
68742: LD_INT 4
68744: PUSH
68745: LD_INT 1
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: PUSH
68752: LD_INT 3
68754: PUSH
68755: LD_INT 0
68757: PUSH
68758: EMPTY
68759: LIST
68760: LIST
68761: PUSH
68762: LD_INT 3
68764: PUSH
68765: LD_INT 1
68767: NEG
68768: PUSH
68769: EMPTY
68770: LIST
68771: LIST
68772: PUSH
68773: LD_INT 3
68775: PUSH
68776: LD_INT 2
68778: NEG
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: PUSH
68784: LD_INT 5
68786: PUSH
68787: LD_INT 2
68789: PUSH
68790: EMPTY
68791: LIST
68792: LIST
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: LIST
68798: LIST
68799: LIST
68800: LIST
68801: LIST
68802: LIST
68803: LIST
68804: LIST
68805: LIST
68806: LIST
68807: LIST
68808: LIST
68809: LIST
68810: LIST
68811: LIST
68812: LIST
68813: LIST
68814: LIST
68815: LIST
68816: LIST
68817: LIST
68818: LIST
68819: LIST
68820: LIST
68821: LIST
68822: LIST
68823: LIST
68824: LIST
68825: LIST
68826: LIST
68827: LIST
68828: LIST
68829: LIST
68830: LIST
68831: LIST
68832: LIST
68833: LIST
68834: LIST
68835: LIST
68836: LIST
68837: LIST
68838: LIST
68839: LIST
68840: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68841: LD_ADDR_VAR 0 32
68845: PUSH
68846: LD_INT 4
68848: NEG
68849: PUSH
68850: LD_INT 0
68852: PUSH
68853: EMPTY
68854: LIST
68855: LIST
68856: PUSH
68857: LD_INT 4
68859: NEG
68860: PUSH
68861: LD_INT 1
68863: NEG
68864: PUSH
68865: EMPTY
68866: LIST
68867: LIST
68868: PUSH
68869: LD_INT 3
68871: NEG
68872: PUSH
68873: LD_INT 0
68875: PUSH
68876: EMPTY
68877: LIST
68878: LIST
68879: PUSH
68880: LD_INT 3
68882: NEG
68883: PUSH
68884: LD_INT 1
68886: PUSH
68887: EMPTY
68888: LIST
68889: LIST
68890: PUSH
68891: LD_INT 4
68893: NEG
68894: PUSH
68895: LD_INT 1
68897: PUSH
68898: EMPTY
68899: LIST
68900: LIST
68901: PUSH
68902: LD_INT 5
68904: NEG
68905: PUSH
68906: LD_INT 0
68908: PUSH
68909: EMPTY
68910: LIST
68911: LIST
68912: PUSH
68913: LD_INT 5
68915: NEG
68916: PUSH
68917: LD_INT 1
68919: NEG
68920: PUSH
68921: EMPTY
68922: LIST
68923: LIST
68924: PUSH
68925: LD_INT 5
68927: NEG
68928: PUSH
68929: LD_INT 2
68931: NEG
68932: PUSH
68933: EMPTY
68934: LIST
68935: LIST
68936: PUSH
68937: LD_INT 3
68939: NEG
68940: PUSH
68941: LD_INT 2
68943: PUSH
68944: EMPTY
68945: LIST
68946: LIST
68947: PUSH
68948: LD_INT 3
68950: NEG
68951: PUSH
68952: LD_INT 3
68954: NEG
68955: PUSH
68956: EMPTY
68957: LIST
68958: LIST
68959: PUSH
68960: LD_INT 3
68962: NEG
68963: PUSH
68964: LD_INT 4
68966: NEG
68967: PUSH
68968: EMPTY
68969: LIST
68970: LIST
68971: PUSH
68972: LD_INT 2
68974: NEG
68975: PUSH
68976: LD_INT 3
68978: NEG
68979: PUSH
68980: EMPTY
68981: LIST
68982: LIST
68983: PUSH
68984: LD_INT 2
68986: NEG
68987: PUSH
68988: LD_INT 2
68990: NEG
68991: PUSH
68992: EMPTY
68993: LIST
68994: LIST
68995: PUSH
68996: LD_INT 3
68998: NEG
68999: PUSH
69000: LD_INT 2
69002: NEG
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: PUSH
69008: LD_INT 4
69010: NEG
69011: PUSH
69012: LD_INT 3
69014: NEG
69015: PUSH
69016: EMPTY
69017: LIST
69018: LIST
69019: PUSH
69020: LD_INT 4
69022: NEG
69023: PUSH
69024: LD_INT 4
69026: NEG
69027: PUSH
69028: EMPTY
69029: LIST
69030: LIST
69031: PUSH
69032: LD_INT 2
69034: NEG
69035: PUSH
69036: LD_INT 4
69038: NEG
69039: PUSH
69040: EMPTY
69041: LIST
69042: LIST
69043: PUSH
69044: LD_INT 4
69046: NEG
69047: PUSH
69048: LD_INT 2
69050: NEG
69051: PUSH
69052: EMPTY
69053: LIST
69054: LIST
69055: PUSH
69056: LD_INT 0
69058: PUSH
69059: LD_INT 4
69061: NEG
69062: PUSH
69063: EMPTY
69064: LIST
69065: LIST
69066: PUSH
69067: LD_INT 0
69069: PUSH
69070: LD_INT 5
69072: NEG
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: PUSH
69078: LD_INT 1
69080: PUSH
69081: LD_INT 4
69083: NEG
69084: PUSH
69085: EMPTY
69086: LIST
69087: LIST
69088: PUSH
69089: LD_INT 1
69091: PUSH
69092: LD_INT 3
69094: NEG
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: PUSH
69100: LD_INT 0
69102: PUSH
69103: LD_INT 3
69105: NEG
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: PUSH
69111: LD_INT 1
69113: NEG
69114: PUSH
69115: LD_INT 4
69117: NEG
69118: PUSH
69119: EMPTY
69120: LIST
69121: LIST
69122: PUSH
69123: LD_INT 1
69125: NEG
69126: PUSH
69127: LD_INT 5
69129: NEG
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: PUSH
69135: LD_INT 2
69137: PUSH
69138: LD_INT 3
69140: NEG
69141: PUSH
69142: EMPTY
69143: LIST
69144: LIST
69145: PUSH
69146: LD_INT 2
69148: NEG
69149: PUSH
69150: LD_INT 5
69152: NEG
69153: PUSH
69154: EMPTY
69155: LIST
69156: LIST
69157: PUSH
69158: LD_INT 3
69160: PUSH
69161: LD_INT 0
69163: PUSH
69164: EMPTY
69165: LIST
69166: LIST
69167: PUSH
69168: LD_INT 3
69170: PUSH
69171: LD_INT 1
69173: NEG
69174: PUSH
69175: EMPTY
69176: LIST
69177: LIST
69178: PUSH
69179: LD_INT 4
69181: PUSH
69182: LD_INT 0
69184: PUSH
69185: EMPTY
69186: LIST
69187: LIST
69188: PUSH
69189: LD_INT 4
69191: PUSH
69192: LD_INT 1
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: PUSH
69199: LD_INT 3
69201: PUSH
69202: LD_INT 1
69204: PUSH
69205: EMPTY
69206: LIST
69207: LIST
69208: PUSH
69209: LD_INT 2
69211: PUSH
69212: LD_INT 0
69214: PUSH
69215: EMPTY
69216: LIST
69217: LIST
69218: PUSH
69219: LD_INT 2
69221: PUSH
69222: LD_INT 1
69224: NEG
69225: PUSH
69226: EMPTY
69227: LIST
69228: LIST
69229: PUSH
69230: LD_INT 2
69232: PUSH
69233: LD_INT 2
69235: NEG
69236: PUSH
69237: EMPTY
69238: LIST
69239: LIST
69240: PUSH
69241: LD_INT 4
69243: PUSH
69244: LD_INT 2
69246: PUSH
69247: EMPTY
69248: LIST
69249: LIST
69250: PUSH
69251: LD_INT 4
69253: PUSH
69254: LD_INT 4
69256: PUSH
69257: EMPTY
69258: LIST
69259: LIST
69260: PUSH
69261: LD_INT 4
69263: PUSH
69264: LD_INT 3
69266: PUSH
69267: EMPTY
69268: LIST
69269: LIST
69270: PUSH
69271: LD_INT 5
69273: PUSH
69274: LD_INT 4
69276: PUSH
69277: EMPTY
69278: LIST
69279: LIST
69280: PUSH
69281: LD_INT 5
69283: PUSH
69284: LD_INT 5
69286: PUSH
69287: EMPTY
69288: LIST
69289: LIST
69290: PUSH
69291: LD_INT 4
69293: PUSH
69294: LD_INT 5
69296: PUSH
69297: EMPTY
69298: LIST
69299: LIST
69300: PUSH
69301: LD_INT 3
69303: PUSH
69304: LD_INT 4
69306: PUSH
69307: EMPTY
69308: LIST
69309: LIST
69310: PUSH
69311: LD_INT 3
69313: PUSH
69314: LD_INT 3
69316: PUSH
69317: EMPTY
69318: LIST
69319: LIST
69320: PUSH
69321: LD_INT 5
69323: PUSH
69324: LD_INT 3
69326: PUSH
69327: EMPTY
69328: LIST
69329: LIST
69330: PUSH
69331: LD_INT 3
69333: PUSH
69334: LD_INT 5
69336: PUSH
69337: EMPTY
69338: LIST
69339: LIST
69340: PUSH
69341: EMPTY
69342: LIST
69343: LIST
69344: LIST
69345: LIST
69346: LIST
69347: LIST
69348: LIST
69349: LIST
69350: LIST
69351: LIST
69352: LIST
69353: LIST
69354: LIST
69355: LIST
69356: LIST
69357: LIST
69358: LIST
69359: LIST
69360: LIST
69361: LIST
69362: LIST
69363: LIST
69364: LIST
69365: LIST
69366: LIST
69367: LIST
69368: LIST
69369: LIST
69370: LIST
69371: LIST
69372: LIST
69373: LIST
69374: LIST
69375: LIST
69376: LIST
69377: LIST
69378: LIST
69379: LIST
69380: LIST
69381: LIST
69382: LIST
69383: LIST
69384: LIST
69385: LIST
69386: LIST
69387: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69388: LD_ADDR_VAR 0 33
69392: PUSH
69393: LD_INT 4
69395: NEG
69396: PUSH
69397: LD_INT 4
69399: NEG
69400: PUSH
69401: EMPTY
69402: LIST
69403: LIST
69404: PUSH
69405: LD_INT 4
69407: NEG
69408: PUSH
69409: LD_INT 5
69411: NEG
69412: PUSH
69413: EMPTY
69414: LIST
69415: LIST
69416: PUSH
69417: LD_INT 3
69419: NEG
69420: PUSH
69421: LD_INT 4
69423: NEG
69424: PUSH
69425: EMPTY
69426: LIST
69427: LIST
69428: PUSH
69429: LD_INT 3
69431: NEG
69432: PUSH
69433: LD_INT 3
69435: NEG
69436: PUSH
69437: EMPTY
69438: LIST
69439: LIST
69440: PUSH
69441: LD_INT 4
69443: NEG
69444: PUSH
69445: LD_INT 3
69447: NEG
69448: PUSH
69449: EMPTY
69450: LIST
69451: LIST
69452: PUSH
69453: LD_INT 5
69455: NEG
69456: PUSH
69457: LD_INT 4
69459: NEG
69460: PUSH
69461: EMPTY
69462: LIST
69463: LIST
69464: PUSH
69465: LD_INT 5
69467: NEG
69468: PUSH
69469: LD_INT 5
69471: NEG
69472: PUSH
69473: EMPTY
69474: LIST
69475: LIST
69476: PUSH
69477: LD_INT 3
69479: NEG
69480: PUSH
69481: LD_INT 5
69483: NEG
69484: PUSH
69485: EMPTY
69486: LIST
69487: LIST
69488: PUSH
69489: LD_INT 5
69491: NEG
69492: PUSH
69493: LD_INT 3
69495: NEG
69496: PUSH
69497: EMPTY
69498: LIST
69499: LIST
69500: PUSH
69501: LD_INT 0
69503: PUSH
69504: LD_INT 3
69506: NEG
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: PUSH
69512: LD_INT 0
69514: PUSH
69515: LD_INT 4
69517: NEG
69518: PUSH
69519: EMPTY
69520: LIST
69521: LIST
69522: PUSH
69523: LD_INT 1
69525: PUSH
69526: LD_INT 3
69528: NEG
69529: PUSH
69530: EMPTY
69531: LIST
69532: LIST
69533: PUSH
69534: LD_INT 1
69536: PUSH
69537: LD_INT 2
69539: NEG
69540: PUSH
69541: EMPTY
69542: LIST
69543: LIST
69544: PUSH
69545: LD_INT 0
69547: PUSH
69548: LD_INT 2
69550: NEG
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: PUSH
69556: LD_INT 1
69558: NEG
69559: PUSH
69560: LD_INT 3
69562: NEG
69563: PUSH
69564: EMPTY
69565: LIST
69566: LIST
69567: PUSH
69568: LD_INT 1
69570: NEG
69571: PUSH
69572: LD_INT 4
69574: NEG
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: PUSH
69580: LD_INT 2
69582: PUSH
69583: LD_INT 2
69585: NEG
69586: PUSH
69587: EMPTY
69588: LIST
69589: LIST
69590: PUSH
69591: LD_INT 2
69593: NEG
69594: PUSH
69595: LD_INT 4
69597: NEG
69598: PUSH
69599: EMPTY
69600: LIST
69601: LIST
69602: PUSH
69603: LD_INT 4
69605: PUSH
69606: LD_INT 0
69608: PUSH
69609: EMPTY
69610: LIST
69611: LIST
69612: PUSH
69613: LD_INT 4
69615: PUSH
69616: LD_INT 1
69618: NEG
69619: PUSH
69620: EMPTY
69621: LIST
69622: LIST
69623: PUSH
69624: LD_INT 5
69626: PUSH
69627: LD_INT 0
69629: PUSH
69630: EMPTY
69631: LIST
69632: LIST
69633: PUSH
69634: LD_INT 5
69636: PUSH
69637: LD_INT 1
69639: PUSH
69640: EMPTY
69641: LIST
69642: LIST
69643: PUSH
69644: LD_INT 4
69646: PUSH
69647: LD_INT 1
69649: PUSH
69650: EMPTY
69651: LIST
69652: LIST
69653: PUSH
69654: LD_INT 3
69656: PUSH
69657: LD_INT 0
69659: PUSH
69660: EMPTY
69661: LIST
69662: LIST
69663: PUSH
69664: LD_INT 3
69666: PUSH
69667: LD_INT 1
69669: NEG
69670: PUSH
69671: EMPTY
69672: LIST
69673: LIST
69674: PUSH
69675: LD_INT 3
69677: PUSH
69678: LD_INT 2
69680: NEG
69681: PUSH
69682: EMPTY
69683: LIST
69684: LIST
69685: PUSH
69686: LD_INT 5
69688: PUSH
69689: LD_INT 2
69691: PUSH
69692: EMPTY
69693: LIST
69694: LIST
69695: PUSH
69696: LD_INT 3
69698: PUSH
69699: LD_INT 3
69701: PUSH
69702: EMPTY
69703: LIST
69704: LIST
69705: PUSH
69706: LD_INT 3
69708: PUSH
69709: LD_INT 2
69711: PUSH
69712: EMPTY
69713: LIST
69714: LIST
69715: PUSH
69716: LD_INT 4
69718: PUSH
69719: LD_INT 3
69721: PUSH
69722: EMPTY
69723: LIST
69724: LIST
69725: PUSH
69726: LD_INT 4
69728: PUSH
69729: LD_INT 4
69731: PUSH
69732: EMPTY
69733: LIST
69734: LIST
69735: PUSH
69736: LD_INT 3
69738: PUSH
69739: LD_INT 4
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: PUSH
69746: LD_INT 2
69748: PUSH
69749: LD_INT 3
69751: PUSH
69752: EMPTY
69753: LIST
69754: LIST
69755: PUSH
69756: LD_INT 2
69758: PUSH
69759: LD_INT 2
69761: PUSH
69762: EMPTY
69763: LIST
69764: LIST
69765: PUSH
69766: LD_INT 4
69768: PUSH
69769: LD_INT 2
69771: PUSH
69772: EMPTY
69773: LIST
69774: LIST
69775: PUSH
69776: LD_INT 2
69778: PUSH
69779: LD_INT 4
69781: PUSH
69782: EMPTY
69783: LIST
69784: LIST
69785: PUSH
69786: LD_INT 0
69788: PUSH
69789: LD_INT 4
69791: PUSH
69792: EMPTY
69793: LIST
69794: LIST
69795: PUSH
69796: LD_INT 0
69798: PUSH
69799: LD_INT 3
69801: PUSH
69802: EMPTY
69803: LIST
69804: LIST
69805: PUSH
69806: LD_INT 1
69808: PUSH
69809: LD_INT 4
69811: PUSH
69812: EMPTY
69813: LIST
69814: LIST
69815: PUSH
69816: LD_INT 1
69818: PUSH
69819: LD_INT 5
69821: PUSH
69822: EMPTY
69823: LIST
69824: LIST
69825: PUSH
69826: LD_INT 0
69828: PUSH
69829: LD_INT 5
69831: PUSH
69832: EMPTY
69833: LIST
69834: LIST
69835: PUSH
69836: LD_INT 1
69838: NEG
69839: PUSH
69840: LD_INT 4
69842: PUSH
69843: EMPTY
69844: LIST
69845: LIST
69846: PUSH
69847: LD_INT 1
69849: NEG
69850: PUSH
69851: LD_INT 3
69853: PUSH
69854: EMPTY
69855: LIST
69856: LIST
69857: PUSH
69858: LD_INT 2
69860: PUSH
69861: LD_INT 5
69863: PUSH
69864: EMPTY
69865: LIST
69866: LIST
69867: PUSH
69868: LD_INT 2
69870: NEG
69871: PUSH
69872: LD_INT 3
69874: PUSH
69875: EMPTY
69876: LIST
69877: LIST
69878: PUSH
69879: EMPTY
69880: LIST
69881: LIST
69882: LIST
69883: LIST
69884: LIST
69885: LIST
69886: LIST
69887: LIST
69888: LIST
69889: LIST
69890: LIST
69891: LIST
69892: LIST
69893: LIST
69894: LIST
69895: LIST
69896: LIST
69897: LIST
69898: LIST
69899: LIST
69900: LIST
69901: LIST
69902: LIST
69903: LIST
69904: LIST
69905: LIST
69906: LIST
69907: LIST
69908: LIST
69909: LIST
69910: LIST
69911: LIST
69912: LIST
69913: LIST
69914: LIST
69915: LIST
69916: LIST
69917: LIST
69918: LIST
69919: LIST
69920: LIST
69921: LIST
69922: LIST
69923: LIST
69924: LIST
69925: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69926: LD_ADDR_VAR 0 34
69930: PUSH
69931: LD_INT 0
69933: PUSH
69934: LD_INT 4
69936: NEG
69937: PUSH
69938: EMPTY
69939: LIST
69940: LIST
69941: PUSH
69942: LD_INT 0
69944: PUSH
69945: LD_INT 5
69947: NEG
69948: PUSH
69949: EMPTY
69950: LIST
69951: LIST
69952: PUSH
69953: LD_INT 1
69955: PUSH
69956: LD_INT 4
69958: NEG
69959: PUSH
69960: EMPTY
69961: LIST
69962: LIST
69963: PUSH
69964: LD_INT 1
69966: PUSH
69967: LD_INT 3
69969: NEG
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: PUSH
69975: LD_INT 0
69977: PUSH
69978: LD_INT 3
69980: NEG
69981: PUSH
69982: EMPTY
69983: LIST
69984: LIST
69985: PUSH
69986: LD_INT 1
69988: NEG
69989: PUSH
69990: LD_INT 4
69992: NEG
69993: PUSH
69994: EMPTY
69995: LIST
69996: LIST
69997: PUSH
69998: LD_INT 1
70000: NEG
70001: PUSH
70002: LD_INT 5
70004: NEG
70005: PUSH
70006: EMPTY
70007: LIST
70008: LIST
70009: PUSH
70010: LD_INT 2
70012: PUSH
70013: LD_INT 3
70015: NEG
70016: PUSH
70017: EMPTY
70018: LIST
70019: LIST
70020: PUSH
70021: LD_INT 2
70023: NEG
70024: PUSH
70025: LD_INT 5
70027: NEG
70028: PUSH
70029: EMPTY
70030: LIST
70031: LIST
70032: PUSH
70033: LD_INT 3
70035: PUSH
70036: LD_INT 0
70038: PUSH
70039: EMPTY
70040: LIST
70041: LIST
70042: PUSH
70043: LD_INT 3
70045: PUSH
70046: LD_INT 1
70048: NEG
70049: PUSH
70050: EMPTY
70051: LIST
70052: LIST
70053: PUSH
70054: LD_INT 4
70056: PUSH
70057: LD_INT 0
70059: PUSH
70060: EMPTY
70061: LIST
70062: LIST
70063: PUSH
70064: LD_INT 4
70066: PUSH
70067: LD_INT 1
70069: PUSH
70070: EMPTY
70071: LIST
70072: LIST
70073: PUSH
70074: LD_INT 3
70076: PUSH
70077: LD_INT 1
70079: PUSH
70080: EMPTY
70081: LIST
70082: LIST
70083: PUSH
70084: LD_INT 2
70086: PUSH
70087: LD_INT 0
70089: PUSH
70090: EMPTY
70091: LIST
70092: LIST
70093: PUSH
70094: LD_INT 2
70096: PUSH
70097: LD_INT 1
70099: NEG
70100: PUSH
70101: EMPTY
70102: LIST
70103: LIST
70104: PUSH
70105: LD_INT 2
70107: PUSH
70108: LD_INT 2
70110: NEG
70111: PUSH
70112: EMPTY
70113: LIST
70114: LIST
70115: PUSH
70116: LD_INT 4
70118: PUSH
70119: LD_INT 2
70121: PUSH
70122: EMPTY
70123: LIST
70124: LIST
70125: PUSH
70126: LD_INT 4
70128: PUSH
70129: LD_INT 4
70131: PUSH
70132: EMPTY
70133: LIST
70134: LIST
70135: PUSH
70136: LD_INT 4
70138: PUSH
70139: LD_INT 3
70141: PUSH
70142: EMPTY
70143: LIST
70144: LIST
70145: PUSH
70146: LD_INT 5
70148: PUSH
70149: LD_INT 4
70151: PUSH
70152: EMPTY
70153: LIST
70154: LIST
70155: PUSH
70156: LD_INT 5
70158: PUSH
70159: LD_INT 5
70161: PUSH
70162: EMPTY
70163: LIST
70164: LIST
70165: PUSH
70166: LD_INT 4
70168: PUSH
70169: LD_INT 5
70171: PUSH
70172: EMPTY
70173: LIST
70174: LIST
70175: PUSH
70176: LD_INT 3
70178: PUSH
70179: LD_INT 4
70181: PUSH
70182: EMPTY
70183: LIST
70184: LIST
70185: PUSH
70186: LD_INT 3
70188: PUSH
70189: LD_INT 3
70191: PUSH
70192: EMPTY
70193: LIST
70194: LIST
70195: PUSH
70196: LD_INT 5
70198: PUSH
70199: LD_INT 3
70201: PUSH
70202: EMPTY
70203: LIST
70204: LIST
70205: PUSH
70206: LD_INT 3
70208: PUSH
70209: LD_INT 5
70211: PUSH
70212: EMPTY
70213: LIST
70214: LIST
70215: PUSH
70216: LD_INT 0
70218: PUSH
70219: LD_INT 3
70221: PUSH
70222: EMPTY
70223: LIST
70224: LIST
70225: PUSH
70226: LD_INT 0
70228: PUSH
70229: LD_INT 2
70231: PUSH
70232: EMPTY
70233: LIST
70234: LIST
70235: PUSH
70236: LD_INT 1
70238: PUSH
70239: LD_INT 3
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: PUSH
70246: LD_INT 1
70248: PUSH
70249: LD_INT 4
70251: PUSH
70252: EMPTY
70253: LIST
70254: LIST
70255: PUSH
70256: LD_INT 0
70258: PUSH
70259: LD_INT 4
70261: PUSH
70262: EMPTY
70263: LIST
70264: LIST
70265: PUSH
70266: LD_INT 1
70268: NEG
70269: PUSH
70270: LD_INT 3
70272: PUSH
70273: EMPTY
70274: LIST
70275: LIST
70276: PUSH
70277: LD_INT 1
70279: NEG
70280: PUSH
70281: LD_INT 2
70283: PUSH
70284: EMPTY
70285: LIST
70286: LIST
70287: PUSH
70288: LD_INT 2
70290: PUSH
70291: LD_INT 4
70293: PUSH
70294: EMPTY
70295: LIST
70296: LIST
70297: PUSH
70298: LD_INT 2
70300: NEG
70301: PUSH
70302: LD_INT 2
70304: PUSH
70305: EMPTY
70306: LIST
70307: LIST
70308: PUSH
70309: LD_INT 4
70311: NEG
70312: PUSH
70313: LD_INT 0
70315: PUSH
70316: EMPTY
70317: LIST
70318: LIST
70319: PUSH
70320: LD_INT 4
70322: NEG
70323: PUSH
70324: LD_INT 1
70326: NEG
70327: PUSH
70328: EMPTY
70329: LIST
70330: LIST
70331: PUSH
70332: LD_INT 3
70334: NEG
70335: PUSH
70336: LD_INT 0
70338: PUSH
70339: EMPTY
70340: LIST
70341: LIST
70342: PUSH
70343: LD_INT 3
70345: NEG
70346: PUSH
70347: LD_INT 1
70349: PUSH
70350: EMPTY
70351: LIST
70352: LIST
70353: PUSH
70354: LD_INT 4
70356: NEG
70357: PUSH
70358: LD_INT 1
70360: PUSH
70361: EMPTY
70362: LIST
70363: LIST
70364: PUSH
70365: LD_INT 5
70367: NEG
70368: PUSH
70369: LD_INT 0
70371: PUSH
70372: EMPTY
70373: LIST
70374: LIST
70375: PUSH
70376: LD_INT 5
70378: NEG
70379: PUSH
70380: LD_INT 1
70382: NEG
70383: PUSH
70384: EMPTY
70385: LIST
70386: LIST
70387: PUSH
70388: LD_INT 5
70390: NEG
70391: PUSH
70392: LD_INT 2
70394: NEG
70395: PUSH
70396: EMPTY
70397: LIST
70398: LIST
70399: PUSH
70400: LD_INT 3
70402: NEG
70403: PUSH
70404: LD_INT 2
70406: PUSH
70407: EMPTY
70408: LIST
70409: LIST
70410: PUSH
70411: EMPTY
70412: LIST
70413: LIST
70414: LIST
70415: LIST
70416: LIST
70417: LIST
70418: LIST
70419: LIST
70420: LIST
70421: LIST
70422: LIST
70423: LIST
70424: LIST
70425: LIST
70426: LIST
70427: LIST
70428: LIST
70429: LIST
70430: LIST
70431: LIST
70432: LIST
70433: LIST
70434: LIST
70435: LIST
70436: LIST
70437: LIST
70438: LIST
70439: LIST
70440: LIST
70441: LIST
70442: LIST
70443: LIST
70444: LIST
70445: LIST
70446: LIST
70447: LIST
70448: LIST
70449: LIST
70450: LIST
70451: LIST
70452: LIST
70453: LIST
70454: LIST
70455: LIST
70456: LIST
70457: ST_TO_ADDR
// end ; end ;
70458: GO 70461
70460: POP
// case btype of b_depot , b_warehouse :
70461: LD_VAR 0 1
70465: PUSH
70466: LD_INT 0
70468: DOUBLE
70469: EQUAL
70470: IFTRUE 70480
70472: LD_INT 1
70474: DOUBLE
70475: EQUAL
70476: IFTRUE 70480
70478: GO 70681
70480: POP
// case nation of nation_american :
70481: LD_VAR 0 5
70485: PUSH
70486: LD_INT 1
70488: DOUBLE
70489: EQUAL
70490: IFTRUE 70494
70492: GO 70550
70494: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70495: LD_ADDR_VAR 0 9
70499: PUSH
70500: LD_VAR 0 11
70504: PUSH
70505: LD_VAR 0 12
70509: PUSH
70510: LD_VAR 0 13
70514: PUSH
70515: LD_VAR 0 14
70519: PUSH
70520: LD_VAR 0 15
70524: PUSH
70525: LD_VAR 0 16
70529: PUSH
70530: EMPTY
70531: LIST
70532: LIST
70533: LIST
70534: LIST
70535: LIST
70536: LIST
70537: PUSH
70538: LD_VAR 0 4
70542: PUSH
70543: LD_INT 1
70545: PLUS
70546: ARRAY
70547: ST_TO_ADDR
70548: GO 70679
70550: LD_INT 2
70552: DOUBLE
70553: EQUAL
70554: IFTRUE 70558
70556: GO 70614
70558: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70559: LD_ADDR_VAR 0 9
70563: PUSH
70564: LD_VAR 0 17
70568: PUSH
70569: LD_VAR 0 18
70573: PUSH
70574: LD_VAR 0 19
70578: PUSH
70579: LD_VAR 0 20
70583: PUSH
70584: LD_VAR 0 21
70588: PUSH
70589: LD_VAR 0 22
70593: PUSH
70594: EMPTY
70595: LIST
70596: LIST
70597: LIST
70598: LIST
70599: LIST
70600: LIST
70601: PUSH
70602: LD_VAR 0 4
70606: PUSH
70607: LD_INT 1
70609: PLUS
70610: ARRAY
70611: ST_TO_ADDR
70612: GO 70679
70614: LD_INT 3
70616: DOUBLE
70617: EQUAL
70618: IFTRUE 70622
70620: GO 70678
70622: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70623: LD_ADDR_VAR 0 9
70627: PUSH
70628: LD_VAR 0 23
70632: PUSH
70633: LD_VAR 0 24
70637: PUSH
70638: LD_VAR 0 25
70642: PUSH
70643: LD_VAR 0 26
70647: PUSH
70648: LD_VAR 0 27
70652: PUSH
70653: LD_VAR 0 28
70657: PUSH
70658: EMPTY
70659: LIST
70660: LIST
70661: LIST
70662: LIST
70663: LIST
70664: LIST
70665: PUSH
70666: LD_VAR 0 4
70670: PUSH
70671: LD_INT 1
70673: PLUS
70674: ARRAY
70675: ST_TO_ADDR
70676: GO 70679
70678: POP
70679: GO 71234
70681: LD_INT 2
70683: DOUBLE
70684: EQUAL
70685: IFTRUE 70695
70687: LD_INT 3
70689: DOUBLE
70690: EQUAL
70691: IFTRUE 70695
70693: GO 70751
70695: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70696: LD_ADDR_VAR 0 9
70700: PUSH
70701: LD_VAR 0 29
70705: PUSH
70706: LD_VAR 0 30
70710: PUSH
70711: LD_VAR 0 31
70715: PUSH
70716: LD_VAR 0 32
70720: PUSH
70721: LD_VAR 0 33
70725: PUSH
70726: LD_VAR 0 34
70730: PUSH
70731: EMPTY
70732: LIST
70733: LIST
70734: LIST
70735: LIST
70736: LIST
70737: LIST
70738: PUSH
70739: LD_VAR 0 4
70743: PUSH
70744: LD_INT 1
70746: PLUS
70747: ARRAY
70748: ST_TO_ADDR
70749: GO 71234
70751: LD_INT 16
70753: DOUBLE
70754: EQUAL
70755: IFTRUE 70813
70757: LD_INT 17
70759: DOUBLE
70760: EQUAL
70761: IFTRUE 70813
70763: LD_INT 18
70765: DOUBLE
70766: EQUAL
70767: IFTRUE 70813
70769: LD_INT 19
70771: DOUBLE
70772: EQUAL
70773: IFTRUE 70813
70775: LD_INT 22
70777: DOUBLE
70778: EQUAL
70779: IFTRUE 70813
70781: LD_INT 20
70783: DOUBLE
70784: EQUAL
70785: IFTRUE 70813
70787: LD_INT 21
70789: DOUBLE
70790: EQUAL
70791: IFTRUE 70813
70793: LD_INT 23
70795: DOUBLE
70796: EQUAL
70797: IFTRUE 70813
70799: LD_INT 24
70801: DOUBLE
70802: EQUAL
70803: IFTRUE 70813
70805: LD_INT 25
70807: DOUBLE
70808: EQUAL
70809: IFTRUE 70813
70811: GO 70869
70813: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70814: LD_ADDR_VAR 0 9
70818: PUSH
70819: LD_VAR 0 35
70823: PUSH
70824: LD_VAR 0 36
70828: PUSH
70829: LD_VAR 0 37
70833: PUSH
70834: LD_VAR 0 38
70838: PUSH
70839: LD_VAR 0 39
70843: PUSH
70844: LD_VAR 0 40
70848: PUSH
70849: EMPTY
70850: LIST
70851: LIST
70852: LIST
70853: LIST
70854: LIST
70855: LIST
70856: PUSH
70857: LD_VAR 0 4
70861: PUSH
70862: LD_INT 1
70864: PLUS
70865: ARRAY
70866: ST_TO_ADDR
70867: GO 71234
70869: LD_INT 6
70871: DOUBLE
70872: EQUAL
70873: IFTRUE 70925
70875: LD_INT 7
70877: DOUBLE
70878: EQUAL
70879: IFTRUE 70925
70881: LD_INT 8
70883: DOUBLE
70884: EQUAL
70885: IFTRUE 70925
70887: LD_INT 13
70889: DOUBLE
70890: EQUAL
70891: IFTRUE 70925
70893: LD_INT 12
70895: DOUBLE
70896: EQUAL
70897: IFTRUE 70925
70899: LD_INT 15
70901: DOUBLE
70902: EQUAL
70903: IFTRUE 70925
70905: LD_INT 11
70907: DOUBLE
70908: EQUAL
70909: IFTRUE 70925
70911: LD_INT 14
70913: DOUBLE
70914: EQUAL
70915: IFTRUE 70925
70917: LD_INT 10
70919: DOUBLE
70920: EQUAL
70921: IFTRUE 70925
70923: GO 70981
70925: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70926: LD_ADDR_VAR 0 9
70930: PUSH
70931: LD_VAR 0 41
70935: PUSH
70936: LD_VAR 0 42
70940: PUSH
70941: LD_VAR 0 43
70945: PUSH
70946: LD_VAR 0 44
70950: PUSH
70951: LD_VAR 0 45
70955: PUSH
70956: LD_VAR 0 46
70960: PUSH
70961: EMPTY
70962: LIST
70963: LIST
70964: LIST
70965: LIST
70966: LIST
70967: LIST
70968: PUSH
70969: LD_VAR 0 4
70973: PUSH
70974: LD_INT 1
70976: PLUS
70977: ARRAY
70978: ST_TO_ADDR
70979: GO 71234
70981: LD_INT 36
70983: DOUBLE
70984: EQUAL
70985: IFTRUE 70989
70987: GO 71045
70989: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70990: LD_ADDR_VAR 0 9
70994: PUSH
70995: LD_VAR 0 47
70999: PUSH
71000: LD_VAR 0 48
71004: PUSH
71005: LD_VAR 0 49
71009: PUSH
71010: LD_VAR 0 50
71014: PUSH
71015: LD_VAR 0 51
71019: PUSH
71020: LD_VAR 0 52
71024: PUSH
71025: EMPTY
71026: LIST
71027: LIST
71028: LIST
71029: LIST
71030: LIST
71031: LIST
71032: PUSH
71033: LD_VAR 0 4
71037: PUSH
71038: LD_INT 1
71040: PLUS
71041: ARRAY
71042: ST_TO_ADDR
71043: GO 71234
71045: LD_INT 4
71047: DOUBLE
71048: EQUAL
71049: IFTRUE 71071
71051: LD_INT 5
71053: DOUBLE
71054: EQUAL
71055: IFTRUE 71071
71057: LD_INT 34
71059: DOUBLE
71060: EQUAL
71061: IFTRUE 71071
71063: LD_INT 37
71065: DOUBLE
71066: EQUAL
71067: IFTRUE 71071
71069: GO 71127
71071: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71072: LD_ADDR_VAR 0 9
71076: PUSH
71077: LD_VAR 0 53
71081: PUSH
71082: LD_VAR 0 54
71086: PUSH
71087: LD_VAR 0 55
71091: PUSH
71092: LD_VAR 0 56
71096: PUSH
71097: LD_VAR 0 57
71101: PUSH
71102: LD_VAR 0 58
71106: PUSH
71107: EMPTY
71108: LIST
71109: LIST
71110: LIST
71111: LIST
71112: LIST
71113: LIST
71114: PUSH
71115: LD_VAR 0 4
71119: PUSH
71120: LD_INT 1
71122: PLUS
71123: ARRAY
71124: ST_TO_ADDR
71125: GO 71234
71127: LD_INT 31
71129: DOUBLE
71130: EQUAL
71131: IFTRUE 71177
71133: LD_INT 32
71135: DOUBLE
71136: EQUAL
71137: IFTRUE 71177
71139: LD_INT 33
71141: DOUBLE
71142: EQUAL
71143: IFTRUE 71177
71145: LD_INT 27
71147: DOUBLE
71148: EQUAL
71149: IFTRUE 71177
71151: LD_INT 26
71153: DOUBLE
71154: EQUAL
71155: IFTRUE 71177
71157: LD_INT 28
71159: DOUBLE
71160: EQUAL
71161: IFTRUE 71177
71163: LD_INT 29
71165: DOUBLE
71166: EQUAL
71167: IFTRUE 71177
71169: LD_INT 30
71171: DOUBLE
71172: EQUAL
71173: IFTRUE 71177
71175: GO 71233
71177: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71178: LD_ADDR_VAR 0 9
71182: PUSH
71183: LD_VAR 0 59
71187: PUSH
71188: LD_VAR 0 60
71192: PUSH
71193: LD_VAR 0 61
71197: PUSH
71198: LD_VAR 0 62
71202: PUSH
71203: LD_VAR 0 63
71207: PUSH
71208: LD_VAR 0 64
71212: PUSH
71213: EMPTY
71214: LIST
71215: LIST
71216: LIST
71217: LIST
71218: LIST
71219: LIST
71220: PUSH
71221: LD_VAR 0 4
71225: PUSH
71226: LD_INT 1
71228: PLUS
71229: ARRAY
71230: ST_TO_ADDR
71231: GO 71234
71233: POP
// temp_list2 = [ ] ;
71234: LD_ADDR_VAR 0 10
71238: PUSH
71239: EMPTY
71240: ST_TO_ADDR
// for i in temp_list do
71241: LD_ADDR_VAR 0 8
71245: PUSH
71246: LD_VAR 0 9
71250: PUSH
71251: FOR_IN
71252: IFFALSE 71304
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71254: LD_ADDR_VAR 0 10
71258: PUSH
71259: LD_VAR 0 10
71263: PUSH
71264: LD_VAR 0 8
71268: PUSH
71269: LD_INT 1
71271: ARRAY
71272: PUSH
71273: LD_VAR 0 2
71277: PLUS
71278: PUSH
71279: LD_VAR 0 8
71283: PUSH
71284: LD_INT 2
71286: ARRAY
71287: PUSH
71288: LD_VAR 0 3
71292: PLUS
71293: PUSH
71294: EMPTY
71295: LIST
71296: LIST
71297: PUSH
71298: EMPTY
71299: LIST
71300: ADD
71301: ST_TO_ADDR
71302: GO 71251
71304: POP
71305: POP
// result = temp_list2 ;
71306: LD_ADDR_VAR 0 7
71310: PUSH
71311: LD_VAR 0 10
71315: ST_TO_ADDR
// end ;
71316: LD_VAR 0 7
71320: RET
// export function EnemyInRange ( unit , dist ) ; begin
71321: LD_INT 0
71323: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71324: LD_ADDR_VAR 0 3
71328: PUSH
71329: LD_VAR 0 1
71333: PPUSH
71334: CALL_OW 255
71338: PPUSH
71339: LD_VAR 0 1
71343: PPUSH
71344: CALL_OW 250
71348: PPUSH
71349: LD_VAR 0 1
71353: PPUSH
71354: CALL_OW 251
71358: PPUSH
71359: LD_VAR 0 2
71363: PPUSH
71364: CALL 44694 0 4
71368: PUSH
71369: LD_INT 4
71371: ARRAY
71372: ST_TO_ADDR
// end ;
71373: LD_VAR 0 3
71377: RET
// export function PlayerSeeMe ( unit ) ; begin
71378: LD_INT 0
71380: PPUSH
// result := See ( your_side , unit ) ;
71381: LD_ADDR_VAR 0 2
71385: PUSH
71386: LD_OWVAR 2
71390: PPUSH
71391: LD_VAR 0 1
71395: PPUSH
71396: CALL_OW 292
71400: ST_TO_ADDR
// end ;
71401: LD_VAR 0 2
71405: RET
// export function ReverseDir ( unit ) ; begin
71406: LD_INT 0
71408: PPUSH
// if not unit then
71409: LD_VAR 0 1
71413: NOT
71414: IFFALSE 71418
// exit ;
71416: GO 71441
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71418: LD_ADDR_VAR 0 2
71422: PUSH
71423: LD_VAR 0 1
71427: PPUSH
71428: CALL_OW 254
71432: PUSH
71433: LD_INT 3
71435: PLUS
71436: PUSH
71437: LD_INT 6
71439: MOD
71440: ST_TO_ADDR
// end ;
71441: LD_VAR 0 2
71445: RET
// export function ReverseArray ( array ) ; var i ; begin
71446: LD_INT 0
71448: PPUSH
71449: PPUSH
// if not array then
71450: LD_VAR 0 1
71454: NOT
71455: IFFALSE 71459
// exit ;
71457: GO 71514
// result := [ ] ;
71459: LD_ADDR_VAR 0 2
71463: PUSH
71464: EMPTY
71465: ST_TO_ADDR
// for i := array downto 1 do
71466: LD_ADDR_VAR 0 3
71470: PUSH
71471: DOUBLE
71472: LD_VAR 0 1
71476: INC
71477: ST_TO_ADDR
71478: LD_INT 1
71480: PUSH
71481: FOR_DOWNTO
71482: IFFALSE 71512
// result := Join ( result , array [ i ] ) ;
71484: LD_ADDR_VAR 0 2
71488: PUSH
71489: LD_VAR 0 2
71493: PPUSH
71494: LD_VAR 0 1
71498: PUSH
71499: LD_VAR 0 3
71503: ARRAY
71504: PPUSH
71505: CALL 76157 0 2
71509: ST_TO_ADDR
71510: GO 71481
71512: POP
71513: POP
// end ;
71514: LD_VAR 0 2
71518: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
71519: LD_INT 0
71521: PPUSH
71522: PPUSH
71523: PPUSH
71524: PPUSH
71525: PPUSH
71526: PPUSH
// if not unit or not hexes then
71527: LD_VAR 0 1
71531: NOT
71532: PUSH
71533: LD_VAR 0 2
71537: NOT
71538: OR
71539: IFFALSE 71543
// exit ;
71541: GO 71666
// dist := 9999 ;
71543: LD_ADDR_VAR 0 5
71547: PUSH
71548: LD_INT 9999
71550: ST_TO_ADDR
// for i = 1 to hexes do
71551: LD_ADDR_VAR 0 4
71555: PUSH
71556: DOUBLE
71557: LD_INT 1
71559: DEC
71560: ST_TO_ADDR
71561: LD_VAR 0 2
71565: PUSH
71566: FOR_TO
71567: IFFALSE 71654
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71569: LD_ADDR_VAR 0 6
71573: PUSH
71574: LD_VAR 0 1
71578: PPUSH
71579: LD_VAR 0 2
71583: PUSH
71584: LD_VAR 0 4
71588: ARRAY
71589: PUSH
71590: LD_INT 1
71592: ARRAY
71593: PPUSH
71594: LD_VAR 0 2
71598: PUSH
71599: LD_VAR 0 4
71603: ARRAY
71604: PUSH
71605: LD_INT 2
71607: ARRAY
71608: PPUSH
71609: CALL_OW 297
71613: ST_TO_ADDR
// if tdist < dist then
71614: LD_VAR 0 6
71618: PUSH
71619: LD_VAR 0 5
71623: LESS
71624: IFFALSE 71652
// begin hex := hexes [ i ] ;
71626: LD_ADDR_VAR 0 8
71630: PUSH
71631: LD_VAR 0 2
71635: PUSH
71636: LD_VAR 0 4
71640: ARRAY
71641: ST_TO_ADDR
// dist := tdist ;
71642: LD_ADDR_VAR 0 5
71646: PUSH
71647: LD_VAR 0 6
71651: ST_TO_ADDR
// end ; end ;
71652: GO 71566
71654: POP
71655: POP
// result := hex ;
71656: LD_ADDR_VAR 0 3
71660: PUSH
71661: LD_VAR 0 8
71665: ST_TO_ADDR
// end ;
71666: LD_VAR 0 3
71670: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71671: LD_INT 0
71673: PPUSH
71674: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71675: LD_VAR 0 1
71679: NOT
71680: PUSH
71681: LD_VAR 0 1
71685: PUSH
71686: LD_INT 21
71688: PUSH
71689: LD_INT 2
71691: PUSH
71692: EMPTY
71693: LIST
71694: LIST
71695: PUSH
71696: LD_INT 23
71698: PUSH
71699: LD_INT 2
71701: PUSH
71702: EMPTY
71703: LIST
71704: LIST
71705: PUSH
71706: EMPTY
71707: LIST
71708: LIST
71709: PPUSH
71710: CALL_OW 69
71714: IN
71715: NOT
71716: OR
71717: IFFALSE 71721
// exit ;
71719: GO 71768
// for i = 1 to 3 do
71721: LD_ADDR_VAR 0 3
71725: PUSH
71726: DOUBLE
71727: LD_INT 1
71729: DEC
71730: ST_TO_ADDR
71731: LD_INT 3
71733: PUSH
71734: FOR_TO
71735: IFFALSE 71766
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71737: LD_VAR 0 1
71741: PPUSH
71742: CALL_OW 250
71746: PPUSH
71747: LD_VAR 0 1
71751: PPUSH
71752: CALL_OW 251
71756: PPUSH
71757: LD_INT 1
71759: PPUSH
71760: CALL_OW 453
71764: GO 71734
71766: POP
71767: POP
// end ;
71768: LD_VAR 0 2
71772: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71773: LD_INT 0
71775: PPUSH
71776: PPUSH
71777: PPUSH
71778: PPUSH
71779: PPUSH
71780: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71781: LD_VAR 0 1
71785: NOT
71786: PUSH
71787: LD_VAR 0 2
71791: NOT
71792: OR
71793: PUSH
71794: LD_VAR 0 1
71798: PPUSH
71799: CALL_OW 314
71803: OR
71804: IFFALSE 71808
// exit ;
71806: GO 72275
// if GetLives ( i ) < 250 then
71808: LD_VAR 0 4
71812: PPUSH
71813: CALL_OW 256
71817: PUSH
71818: LD_INT 250
71820: LESS
71821: IFFALSE 71834
// begin ComAutodestruct ( i ) ;
71823: LD_VAR 0 4
71827: PPUSH
71828: CALL 71671 0 1
// exit ;
71832: GO 72275
// end ; x := GetX ( enemy_unit ) ;
71834: LD_ADDR_VAR 0 7
71838: PUSH
71839: LD_VAR 0 2
71843: PPUSH
71844: CALL_OW 250
71848: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71849: LD_ADDR_VAR 0 8
71853: PUSH
71854: LD_VAR 0 2
71858: PPUSH
71859: CALL_OW 251
71863: ST_TO_ADDR
// if not x or not y then
71864: LD_VAR 0 7
71868: NOT
71869: PUSH
71870: LD_VAR 0 8
71874: NOT
71875: OR
71876: IFFALSE 71880
// exit ;
71878: GO 72275
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71880: LD_ADDR_VAR 0 6
71884: PUSH
71885: LD_VAR 0 7
71889: PPUSH
71890: LD_INT 0
71892: PPUSH
71893: LD_INT 4
71895: PPUSH
71896: CALL_OW 272
71900: PUSH
71901: LD_VAR 0 8
71905: PPUSH
71906: LD_INT 0
71908: PPUSH
71909: LD_INT 4
71911: PPUSH
71912: CALL_OW 273
71916: PUSH
71917: EMPTY
71918: LIST
71919: LIST
71920: PUSH
71921: LD_VAR 0 7
71925: PPUSH
71926: LD_INT 1
71928: PPUSH
71929: LD_INT 4
71931: PPUSH
71932: CALL_OW 272
71936: PUSH
71937: LD_VAR 0 8
71941: PPUSH
71942: LD_INT 1
71944: PPUSH
71945: LD_INT 4
71947: PPUSH
71948: CALL_OW 273
71952: PUSH
71953: EMPTY
71954: LIST
71955: LIST
71956: PUSH
71957: LD_VAR 0 7
71961: PPUSH
71962: LD_INT 2
71964: PPUSH
71965: LD_INT 4
71967: PPUSH
71968: CALL_OW 272
71972: PUSH
71973: LD_VAR 0 8
71977: PPUSH
71978: LD_INT 2
71980: PPUSH
71981: LD_INT 4
71983: PPUSH
71984: CALL_OW 273
71988: PUSH
71989: EMPTY
71990: LIST
71991: LIST
71992: PUSH
71993: LD_VAR 0 7
71997: PPUSH
71998: LD_INT 3
72000: PPUSH
72001: LD_INT 4
72003: PPUSH
72004: CALL_OW 272
72008: PUSH
72009: LD_VAR 0 8
72013: PPUSH
72014: LD_INT 3
72016: PPUSH
72017: LD_INT 4
72019: PPUSH
72020: CALL_OW 273
72024: PUSH
72025: EMPTY
72026: LIST
72027: LIST
72028: PUSH
72029: LD_VAR 0 7
72033: PPUSH
72034: LD_INT 4
72036: PPUSH
72037: LD_INT 4
72039: PPUSH
72040: CALL_OW 272
72044: PUSH
72045: LD_VAR 0 8
72049: PPUSH
72050: LD_INT 4
72052: PPUSH
72053: LD_INT 4
72055: PPUSH
72056: CALL_OW 273
72060: PUSH
72061: EMPTY
72062: LIST
72063: LIST
72064: PUSH
72065: LD_VAR 0 7
72069: PPUSH
72070: LD_INT 5
72072: PPUSH
72073: LD_INT 4
72075: PPUSH
72076: CALL_OW 272
72080: PUSH
72081: LD_VAR 0 8
72085: PPUSH
72086: LD_INT 5
72088: PPUSH
72089: LD_INT 4
72091: PPUSH
72092: CALL_OW 273
72096: PUSH
72097: EMPTY
72098: LIST
72099: LIST
72100: PUSH
72101: EMPTY
72102: LIST
72103: LIST
72104: LIST
72105: LIST
72106: LIST
72107: LIST
72108: ST_TO_ADDR
// for i = tmp downto 1 do
72109: LD_ADDR_VAR 0 4
72113: PUSH
72114: DOUBLE
72115: LD_VAR 0 6
72119: INC
72120: ST_TO_ADDR
72121: LD_INT 1
72123: PUSH
72124: FOR_DOWNTO
72125: IFFALSE 72226
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72127: LD_VAR 0 6
72131: PUSH
72132: LD_VAR 0 4
72136: ARRAY
72137: PUSH
72138: LD_INT 1
72140: ARRAY
72141: PPUSH
72142: LD_VAR 0 6
72146: PUSH
72147: LD_VAR 0 4
72151: ARRAY
72152: PUSH
72153: LD_INT 2
72155: ARRAY
72156: PPUSH
72157: CALL_OW 488
72161: NOT
72162: PUSH
72163: LD_VAR 0 6
72167: PUSH
72168: LD_VAR 0 4
72172: ARRAY
72173: PUSH
72174: LD_INT 1
72176: ARRAY
72177: PPUSH
72178: LD_VAR 0 6
72182: PUSH
72183: LD_VAR 0 4
72187: ARRAY
72188: PUSH
72189: LD_INT 2
72191: ARRAY
72192: PPUSH
72193: CALL_OW 428
72197: PUSH
72198: LD_INT 0
72200: NONEQUAL
72201: OR
72202: IFFALSE 72224
// tmp := Delete ( tmp , i ) ;
72204: LD_ADDR_VAR 0 6
72208: PUSH
72209: LD_VAR 0 6
72213: PPUSH
72214: LD_VAR 0 4
72218: PPUSH
72219: CALL_OW 3
72223: ST_TO_ADDR
72224: GO 72124
72226: POP
72227: POP
// j := GetClosestHex ( unit , tmp ) ;
72228: LD_ADDR_VAR 0 5
72232: PUSH
72233: LD_VAR 0 1
72237: PPUSH
72238: LD_VAR 0 6
72242: PPUSH
72243: CALL 71519 0 2
72247: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72248: LD_VAR 0 1
72252: PPUSH
72253: LD_VAR 0 5
72257: PUSH
72258: LD_INT 1
72260: ARRAY
72261: PPUSH
72262: LD_VAR 0 5
72266: PUSH
72267: LD_INT 2
72269: ARRAY
72270: PPUSH
72271: CALL_OW 111
// end ;
72275: LD_VAR 0 3
72279: RET
// export function PrepareApemanSoldier ( ) ; begin
72280: LD_INT 0
72282: PPUSH
// uc_nation := 0 ;
72283: LD_ADDR_OWVAR 21
72287: PUSH
72288: LD_INT 0
72290: ST_TO_ADDR
// hc_sex := sex_male ;
72291: LD_ADDR_OWVAR 27
72295: PUSH
72296: LD_INT 1
72298: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72299: LD_ADDR_OWVAR 28
72303: PUSH
72304: LD_INT 15
72306: ST_TO_ADDR
// hc_gallery :=  ;
72307: LD_ADDR_OWVAR 33
72311: PUSH
72312: LD_STRING 
72314: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72315: LD_ADDR_OWVAR 31
72319: PUSH
72320: LD_INT 0
72322: PPUSH
72323: LD_INT 3
72325: PPUSH
72326: CALL_OW 12
72330: PUSH
72331: LD_INT 0
72333: PPUSH
72334: LD_INT 3
72336: PPUSH
72337: CALL_OW 12
72341: PUSH
72342: LD_INT 0
72344: PUSH
72345: LD_INT 0
72347: PUSH
72348: EMPTY
72349: LIST
72350: LIST
72351: LIST
72352: LIST
72353: ST_TO_ADDR
// end ;
72354: LD_VAR 0 1
72358: RET
// export function PrepareApemanEngineer ( ) ; begin
72359: LD_INT 0
72361: PPUSH
// uc_nation := 0 ;
72362: LD_ADDR_OWVAR 21
72366: PUSH
72367: LD_INT 0
72369: ST_TO_ADDR
// hc_sex := sex_male ;
72370: LD_ADDR_OWVAR 27
72374: PUSH
72375: LD_INT 1
72377: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72378: LD_ADDR_OWVAR 28
72382: PUSH
72383: LD_INT 16
72385: ST_TO_ADDR
// hc_gallery :=  ;
72386: LD_ADDR_OWVAR 33
72390: PUSH
72391: LD_STRING 
72393: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72394: LD_ADDR_OWVAR 31
72398: PUSH
72399: LD_INT 0
72401: PPUSH
72402: LD_INT 3
72404: PPUSH
72405: CALL_OW 12
72409: PUSH
72410: LD_INT 0
72412: PPUSH
72413: LD_INT 3
72415: PPUSH
72416: CALL_OW 12
72420: PUSH
72421: LD_INT 0
72423: PUSH
72424: LD_INT 0
72426: PUSH
72427: EMPTY
72428: LIST
72429: LIST
72430: LIST
72431: LIST
72432: ST_TO_ADDR
// end ;
72433: LD_VAR 0 1
72437: RET
// export function PrepareApeman ( agressivity ) ; begin
72438: LD_INT 0
72440: PPUSH
// uc_side := 0 ;
72441: LD_ADDR_OWVAR 20
72445: PUSH
72446: LD_INT 0
72448: ST_TO_ADDR
// uc_nation := 0 ;
72449: LD_ADDR_OWVAR 21
72453: PUSH
72454: LD_INT 0
72456: ST_TO_ADDR
// hc_sex := sex_male ;
72457: LD_ADDR_OWVAR 27
72461: PUSH
72462: LD_INT 1
72464: ST_TO_ADDR
// hc_class := class_apeman ;
72465: LD_ADDR_OWVAR 28
72469: PUSH
72470: LD_INT 12
72472: ST_TO_ADDR
// hc_gallery :=  ;
72473: LD_ADDR_OWVAR 33
72477: PUSH
72478: LD_STRING 
72480: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72481: LD_ADDR_OWVAR 35
72485: PUSH
72486: LD_VAR 0 1
72490: NEG
72491: PPUSH
72492: LD_VAR 0 1
72496: PPUSH
72497: CALL_OW 12
72501: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72502: LD_ADDR_OWVAR 31
72506: PUSH
72507: LD_INT 0
72509: PPUSH
72510: LD_INT 3
72512: PPUSH
72513: CALL_OW 12
72517: PUSH
72518: LD_INT 0
72520: PPUSH
72521: LD_INT 3
72523: PPUSH
72524: CALL_OW 12
72528: PUSH
72529: LD_INT 0
72531: PUSH
72532: LD_INT 0
72534: PUSH
72535: EMPTY
72536: LIST
72537: LIST
72538: LIST
72539: LIST
72540: ST_TO_ADDR
// end ;
72541: LD_VAR 0 2
72545: RET
// export function PrepareTiger ( agressivity ) ; begin
72546: LD_INT 0
72548: PPUSH
// uc_side := 0 ;
72549: LD_ADDR_OWVAR 20
72553: PUSH
72554: LD_INT 0
72556: ST_TO_ADDR
// uc_nation := 0 ;
72557: LD_ADDR_OWVAR 21
72561: PUSH
72562: LD_INT 0
72564: ST_TO_ADDR
// hc_class := class_tiger ;
72565: LD_ADDR_OWVAR 28
72569: PUSH
72570: LD_INT 14
72572: ST_TO_ADDR
// hc_gallery :=  ;
72573: LD_ADDR_OWVAR 33
72577: PUSH
72578: LD_STRING 
72580: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72581: LD_ADDR_OWVAR 35
72585: PUSH
72586: LD_VAR 0 1
72590: NEG
72591: PPUSH
72592: LD_VAR 0 1
72596: PPUSH
72597: CALL_OW 12
72601: ST_TO_ADDR
// end ;
72602: LD_VAR 0 2
72606: RET
// export function PrepareEnchidna ( ) ; begin
72607: LD_INT 0
72609: PPUSH
// uc_side := 0 ;
72610: LD_ADDR_OWVAR 20
72614: PUSH
72615: LD_INT 0
72617: ST_TO_ADDR
// uc_nation := 0 ;
72618: LD_ADDR_OWVAR 21
72622: PUSH
72623: LD_INT 0
72625: ST_TO_ADDR
// hc_class := class_baggie ;
72626: LD_ADDR_OWVAR 28
72630: PUSH
72631: LD_INT 13
72633: ST_TO_ADDR
// hc_gallery :=  ;
72634: LD_ADDR_OWVAR 33
72638: PUSH
72639: LD_STRING 
72641: ST_TO_ADDR
// end ;
72642: LD_VAR 0 1
72646: RET
// export function PrepareFrog ( ) ; begin
72647: LD_INT 0
72649: PPUSH
// uc_side := 0 ;
72650: LD_ADDR_OWVAR 20
72654: PUSH
72655: LD_INT 0
72657: ST_TO_ADDR
// uc_nation := 0 ;
72658: LD_ADDR_OWVAR 21
72662: PUSH
72663: LD_INT 0
72665: ST_TO_ADDR
// hc_class := class_frog ;
72666: LD_ADDR_OWVAR 28
72670: PUSH
72671: LD_INT 19
72673: ST_TO_ADDR
// hc_gallery :=  ;
72674: LD_ADDR_OWVAR 33
72678: PUSH
72679: LD_STRING 
72681: ST_TO_ADDR
// end ;
72682: LD_VAR 0 1
72686: RET
// export function PrepareFish ( ) ; begin
72687: LD_INT 0
72689: PPUSH
// uc_side := 0 ;
72690: LD_ADDR_OWVAR 20
72694: PUSH
72695: LD_INT 0
72697: ST_TO_ADDR
// uc_nation := 0 ;
72698: LD_ADDR_OWVAR 21
72702: PUSH
72703: LD_INT 0
72705: ST_TO_ADDR
// hc_class := class_fish ;
72706: LD_ADDR_OWVAR 28
72710: PUSH
72711: LD_INT 20
72713: ST_TO_ADDR
// hc_gallery :=  ;
72714: LD_ADDR_OWVAR 33
72718: PUSH
72719: LD_STRING 
72721: ST_TO_ADDR
// end ;
72722: LD_VAR 0 1
72726: RET
// export function PrepareBird ( ) ; begin
72727: LD_INT 0
72729: PPUSH
// uc_side := 0 ;
72730: LD_ADDR_OWVAR 20
72734: PUSH
72735: LD_INT 0
72737: ST_TO_ADDR
// uc_nation := 0 ;
72738: LD_ADDR_OWVAR 21
72742: PUSH
72743: LD_INT 0
72745: ST_TO_ADDR
// hc_class := class_phororhacos ;
72746: LD_ADDR_OWVAR 28
72750: PUSH
72751: LD_INT 18
72753: ST_TO_ADDR
// hc_gallery :=  ;
72754: LD_ADDR_OWVAR 33
72758: PUSH
72759: LD_STRING 
72761: ST_TO_ADDR
// end ;
72762: LD_VAR 0 1
72766: RET
// export function PrepareHorse ( ) ; begin
72767: LD_INT 0
72769: PPUSH
// uc_side := 0 ;
72770: LD_ADDR_OWVAR 20
72774: PUSH
72775: LD_INT 0
72777: ST_TO_ADDR
// uc_nation := 0 ;
72778: LD_ADDR_OWVAR 21
72782: PUSH
72783: LD_INT 0
72785: ST_TO_ADDR
// hc_class := class_horse ;
72786: LD_ADDR_OWVAR 28
72790: PUSH
72791: LD_INT 21
72793: ST_TO_ADDR
// hc_gallery :=  ;
72794: LD_ADDR_OWVAR 33
72798: PUSH
72799: LD_STRING 
72801: ST_TO_ADDR
// end ;
72802: LD_VAR 0 1
72806: RET
// export function PrepareMastodont ( ) ; begin
72807: LD_INT 0
72809: PPUSH
// uc_side := 0 ;
72810: LD_ADDR_OWVAR 20
72814: PUSH
72815: LD_INT 0
72817: ST_TO_ADDR
// uc_nation := 0 ;
72818: LD_ADDR_OWVAR 21
72822: PUSH
72823: LD_INT 0
72825: ST_TO_ADDR
// vc_chassis := class_mastodont ;
72826: LD_ADDR_OWVAR 37
72830: PUSH
72831: LD_INT 31
72833: ST_TO_ADDR
// vc_control := control_rider ;
72834: LD_ADDR_OWVAR 38
72838: PUSH
72839: LD_INT 4
72841: ST_TO_ADDR
// end ;
72842: LD_VAR 0 1
72846: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72847: LD_INT 0
72849: PPUSH
72850: PPUSH
72851: PPUSH
// uc_side = 0 ;
72852: LD_ADDR_OWVAR 20
72856: PUSH
72857: LD_INT 0
72859: ST_TO_ADDR
// uc_nation = 0 ;
72860: LD_ADDR_OWVAR 21
72864: PUSH
72865: LD_INT 0
72867: ST_TO_ADDR
// InitHc_All ( ) ;
72868: CALL_OW 584
// InitVc ;
72872: CALL_OW 20
// if mastodonts then
72876: LD_VAR 0 6
72880: IFFALSE 72947
// for i = 1 to mastodonts do
72882: LD_ADDR_VAR 0 11
72886: PUSH
72887: DOUBLE
72888: LD_INT 1
72890: DEC
72891: ST_TO_ADDR
72892: LD_VAR 0 6
72896: PUSH
72897: FOR_TO
72898: IFFALSE 72945
// begin vc_chassis := 31 ;
72900: LD_ADDR_OWVAR 37
72904: PUSH
72905: LD_INT 31
72907: ST_TO_ADDR
// vc_control := control_rider ;
72908: LD_ADDR_OWVAR 38
72912: PUSH
72913: LD_INT 4
72915: ST_TO_ADDR
// animal := CreateVehicle ;
72916: LD_ADDR_VAR 0 12
72920: PUSH
72921: CALL_OW 45
72925: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72926: LD_VAR 0 12
72930: PPUSH
72931: LD_VAR 0 8
72935: PPUSH
72936: LD_INT 0
72938: PPUSH
72939: CALL 75075 0 3
// end ;
72943: GO 72897
72945: POP
72946: POP
// if horses then
72947: LD_VAR 0 5
72951: IFFALSE 73018
// for i = 1 to horses do
72953: LD_ADDR_VAR 0 11
72957: PUSH
72958: DOUBLE
72959: LD_INT 1
72961: DEC
72962: ST_TO_ADDR
72963: LD_VAR 0 5
72967: PUSH
72968: FOR_TO
72969: IFFALSE 73016
// begin hc_class := 21 ;
72971: LD_ADDR_OWVAR 28
72975: PUSH
72976: LD_INT 21
72978: ST_TO_ADDR
// hc_gallery :=  ;
72979: LD_ADDR_OWVAR 33
72983: PUSH
72984: LD_STRING 
72986: ST_TO_ADDR
// animal := CreateHuman ;
72987: LD_ADDR_VAR 0 12
72991: PUSH
72992: CALL_OW 44
72996: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72997: LD_VAR 0 12
73001: PPUSH
73002: LD_VAR 0 8
73006: PPUSH
73007: LD_INT 0
73009: PPUSH
73010: CALL 75075 0 3
// end ;
73014: GO 72968
73016: POP
73017: POP
// if birds then
73018: LD_VAR 0 1
73022: IFFALSE 73089
// for i = 1 to birds do
73024: LD_ADDR_VAR 0 11
73028: PUSH
73029: DOUBLE
73030: LD_INT 1
73032: DEC
73033: ST_TO_ADDR
73034: LD_VAR 0 1
73038: PUSH
73039: FOR_TO
73040: IFFALSE 73087
// begin hc_class := 18 ;
73042: LD_ADDR_OWVAR 28
73046: PUSH
73047: LD_INT 18
73049: ST_TO_ADDR
// hc_gallery =  ;
73050: LD_ADDR_OWVAR 33
73054: PUSH
73055: LD_STRING 
73057: ST_TO_ADDR
// animal := CreateHuman ;
73058: LD_ADDR_VAR 0 12
73062: PUSH
73063: CALL_OW 44
73067: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73068: LD_VAR 0 12
73072: PPUSH
73073: LD_VAR 0 8
73077: PPUSH
73078: LD_INT 0
73080: PPUSH
73081: CALL 75075 0 3
// end ;
73085: GO 73039
73087: POP
73088: POP
// if tigers then
73089: LD_VAR 0 2
73093: IFFALSE 73177
// for i = 1 to tigers do
73095: LD_ADDR_VAR 0 11
73099: PUSH
73100: DOUBLE
73101: LD_INT 1
73103: DEC
73104: ST_TO_ADDR
73105: LD_VAR 0 2
73109: PUSH
73110: FOR_TO
73111: IFFALSE 73175
// begin hc_class = class_tiger ;
73113: LD_ADDR_OWVAR 28
73117: PUSH
73118: LD_INT 14
73120: ST_TO_ADDR
// hc_gallery =  ;
73121: LD_ADDR_OWVAR 33
73125: PUSH
73126: LD_STRING 
73128: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73129: LD_ADDR_OWVAR 35
73133: PUSH
73134: LD_INT 7
73136: NEG
73137: PPUSH
73138: LD_INT 7
73140: PPUSH
73141: CALL_OW 12
73145: ST_TO_ADDR
// animal := CreateHuman ;
73146: LD_ADDR_VAR 0 12
73150: PUSH
73151: CALL_OW 44
73155: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73156: LD_VAR 0 12
73160: PPUSH
73161: LD_VAR 0 8
73165: PPUSH
73166: LD_INT 0
73168: PPUSH
73169: CALL 75075 0 3
// end ;
73173: GO 73110
73175: POP
73176: POP
// if apemans then
73177: LD_VAR 0 3
73181: IFFALSE 73304
// for i = 1 to apemans do
73183: LD_ADDR_VAR 0 11
73187: PUSH
73188: DOUBLE
73189: LD_INT 1
73191: DEC
73192: ST_TO_ADDR
73193: LD_VAR 0 3
73197: PUSH
73198: FOR_TO
73199: IFFALSE 73302
// begin hc_class = class_apeman ;
73201: LD_ADDR_OWVAR 28
73205: PUSH
73206: LD_INT 12
73208: ST_TO_ADDR
// hc_gallery =  ;
73209: LD_ADDR_OWVAR 33
73213: PUSH
73214: LD_STRING 
73216: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73217: LD_ADDR_OWVAR 35
73221: PUSH
73222: LD_INT 2
73224: NEG
73225: PPUSH
73226: LD_INT 2
73228: PPUSH
73229: CALL_OW 12
73233: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73234: LD_ADDR_OWVAR 31
73238: PUSH
73239: LD_INT 1
73241: PPUSH
73242: LD_INT 3
73244: PPUSH
73245: CALL_OW 12
73249: PUSH
73250: LD_INT 1
73252: PPUSH
73253: LD_INT 3
73255: PPUSH
73256: CALL_OW 12
73260: PUSH
73261: LD_INT 0
73263: PUSH
73264: LD_INT 0
73266: PUSH
73267: EMPTY
73268: LIST
73269: LIST
73270: LIST
73271: LIST
73272: ST_TO_ADDR
// animal := CreateHuman ;
73273: LD_ADDR_VAR 0 12
73277: PUSH
73278: CALL_OW 44
73282: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73283: LD_VAR 0 12
73287: PPUSH
73288: LD_VAR 0 8
73292: PPUSH
73293: LD_INT 0
73295: PPUSH
73296: CALL 75075 0 3
// end ;
73300: GO 73198
73302: POP
73303: POP
// if enchidnas then
73304: LD_VAR 0 4
73308: IFFALSE 73375
// for i = 1 to enchidnas do
73310: LD_ADDR_VAR 0 11
73314: PUSH
73315: DOUBLE
73316: LD_INT 1
73318: DEC
73319: ST_TO_ADDR
73320: LD_VAR 0 4
73324: PUSH
73325: FOR_TO
73326: IFFALSE 73373
// begin hc_class = 13 ;
73328: LD_ADDR_OWVAR 28
73332: PUSH
73333: LD_INT 13
73335: ST_TO_ADDR
// hc_gallery =  ;
73336: LD_ADDR_OWVAR 33
73340: PUSH
73341: LD_STRING 
73343: ST_TO_ADDR
// animal := CreateHuman ;
73344: LD_ADDR_VAR 0 12
73348: PUSH
73349: CALL_OW 44
73353: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73354: LD_VAR 0 12
73358: PPUSH
73359: LD_VAR 0 8
73363: PPUSH
73364: LD_INT 0
73366: PPUSH
73367: CALL 75075 0 3
// end ;
73371: GO 73325
73373: POP
73374: POP
// if fishes then
73375: LD_VAR 0 7
73379: IFFALSE 73446
// for i = 1 to fishes do
73381: LD_ADDR_VAR 0 11
73385: PUSH
73386: DOUBLE
73387: LD_INT 1
73389: DEC
73390: ST_TO_ADDR
73391: LD_VAR 0 7
73395: PUSH
73396: FOR_TO
73397: IFFALSE 73444
// begin hc_class = 20 ;
73399: LD_ADDR_OWVAR 28
73403: PUSH
73404: LD_INT 20
73406: ST_TO_ADDR
// hc_gallery =  ;
73407: LD_ADDR_OWVAR 33
73411: PUSH
73412: LD_STRING 
73414: ST_TO_ADDR
// animal := CreateHuman ;
73415: LD_ADDR_VAR 0 12
73419: PUSH
73420: CALL_OW 44
73424: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73425: LD_VAR 0 12
73429: PPUSH
73430: LD_VAR 0 9
73434: PPUSH
73435: LD_INT 0
73437: PPUSH
73438: CALL 75075 0 3
// end ;
73442: GO 73396
73444: POP
73445: POP
// end ;
73446: LD_VAR 0 10
73450: RET
// export function WantHeal ( sci , unit ) ; begin
73451: LD_INT 0
73453: PPUSH
// if GetTaskList ( sci ) > 0 then
73454: LD_VAR 0 1
73458: PPUSH
73459: CALL_OW 437
73463: PUSH
73464: LD_INT 0
73466: GREATER
73467: IFFALSE 73537
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73469: LD_VAR 0 1
73473: PPUSH
73474: CALL_OW 437
73478: PUSH
73479: LD_INT 1
73481: ARRAY
73482: PUSH
73483: LD_INT 1
73485: ARRAY
73486: PUSH
73487: LD_STRING l
73489: EQUAL
73490: PUSH
73491: LD_VAR 0 1
73495: PPUSH
73496: CALL_OW 437
73500: PUSH
73501: LD_INT 1
73503: ARRAY
73504: PUSH
73505: LD_INT 4
73507: ARRAY
73508: PUSH
73509: LD_VAR 0 2
73513: EQUAL
73514: AND
73515: IFFALSE 73527
// result := true else
73517: LD_ADDR_VAR 0 3
73521: PUSH
73522: LD_INT 1
73524: ST_TO_ADDR
73525: GO 73535
// result := false ;
73527: LD_ADDR_VAR 0 3
73531: PUSH
73532: LD_INT 0
73534: ST_TO_ADDR
// end else
73535: GO 73545
// result := false ;
73537: LD_ADDR_VAR 0 3
73541: PUSH
73542: LD_INT 0
73544: ST_TO_ADDR
// end ;
73545: LD_VAR 0 3
73549: RET
// export function HealTarget ( sci ) ; begin
73550: LD_INT 0
73552: PPUSH
// if not sci then
73553: LD_VAR 0 1
73557: NOT
73558: IFFALSE 73562
// exit ;
73560: GO 73627
// result := 0 ;
73562: LD_ADDR_VAR 0 2
73566: PUSH
73567: LD_INT 0
73569: ST_TO_ADDR
// if GetTaskList ( sci ) then
73570: LD_VAR 0 1
73574: PPUSH
73575: CALL_OW 437
73579: IFFALSE 73627
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73581: LD_VAR 0 1
73585: PPUSH
73586: CALL_OW 437
73590: PUSH
73591: LD_INT 1
73593: ARRAY
73594: PUSH
73595: LD_INT 1
73597: ARRAY
73598: PUSH
73599: LD_STRING l
73601: EQUAL
73602: IFFALSE 73627
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73604: LD_ADDR_VAR 0 2
73608: PUSH
73609: LD_VAR 0 1
73613: PPUSH
73614: CALL_OW 437
73618: PUSH
73619: LD_INT 1
73621: ARRAY
73622: PUSH
73623: LD_INT 4
73625: ARRAY
73626: ST_TO_ADDR
// end ;
73627: LD_VAR 0 2
73631: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73632: LD_INT 0
73634: PPUSH
73635: PPUSH
73636: PPUSH
73637: PPUSH
// if not base_units then
73638: LD_VAR 0 1
73642: NOT
73643: IFFALSE 73647
// exit ;
73645: GO 73734
// result := false ;
73647: LD_ADDR_VAR 0 2
73651: PUSH
73652: LD_INT 0
73654: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73655: LD_ADDR_VAR 0 5
73659: PUSH
73660: LD_VAR 0 1
73664: PPUSH
73665: LD_INT 21
73667: PUSH
73668: LD_INT 3
73670: PUSH
73671: EMPTY
73672: LIST
73673: LIST
73674: PPUSH
73675: CALL_OW 72
73679: ST_TO_ADDR
// if not tmp then
73680: LD_VAR 0 5
73684: NOT
73685: IFFALSE 73689
// exit ;
73687: GO 73734
// for i in tmp do
73689: LD_ADDR_VAR 0 3
73693: PUSH
73694: LD_VAR 0 5
73698: PUSH
73699: FOR_IN
73700: IFFALSE 73732
// begin result := EnemyInRange ( i , 22 ) ;
73702: LD_ADDR_VAR 0 2
73706: PUSH
73707: LD_VAR 0 3
73711: PPUSH
73712: LD_INT 22
73714: PPUSH
73715: CALL 71321 0 2
73719: ST_TO_ADDR
// if result then
73720: LD_VAR 0 2
73724: IFFALSE 73730
// exit ;
73726: POP
73727: POP
73728: GO 73734
// end ;
73730: GO 73699
73732: POP
73733: POP
// end ;
73734: LD_VAR 0 2
73738: RET
// export function FilterByTag ( units , tag ) ; begin
73739: LD_INT 0
73741: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
73742: LD_ADDR_VAR 0 3
73746: PUSH
73747: LD_VAR 0 1
73751: PPUSH
73752: LD_INT 120
73754: PUSH
73755: LD_VAR 0 2
73759: PUSH
73760: EMPTY
73761: LIST
73762: LIST
73763: PPUSH
73764: CALL_OW 72
73768: ST_TO_ADDR
// end ;
73769: LD_VAR 0 3
73773: RET
// export function IsDriver ( un ) ; begin
73774: LD_INT 0
73776: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73777: LD_ADDR_VAR 0 2
73781: PUSH
73782: LD_VAR 0 1
73786: PUSH
73787: LD_INT 55
73789: PUSH
73790: EMPTY
73791: LIST
73792: PPUSH
73793: CALL_OW 69
73797: IN
73798: ST_TO_ADDR
// end ;
73799: LD_VAR 0 2
73803: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73804: LD_INT 0
73806: PPUSH
73807: PPUSH
// list := [ ] ;
73808: LD_ADDR_VAR 0 5
73812: PUSH
73813: EMPTY
73814: ST_TO_ADDR
// case d of 0 :
73815: LD_VAR 0 3
73819: PUSH
73820: LD_INT 0
73822: DOUBLE
73823: EQUAL
73824: IFTRUE 73828
73826: GO 73961
73828: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73829: LD_ADDR_VAR 0 5
73833: PUSH
73834: LD_VAR 0 1
73838: PUSH
73839: LD_INT 4
73841: MINUS
73842: PUSH
73843: LD_VAR 0 2
73847: PUSH
73848: LD_INT 4
73850: MINUS
73851: PUSH
73852: LD_INT 2
73854: PUSH
73855: EMPTY
73856: LIST
73857: LIST
73858: LIST
73859: PUSH
73860: LD_VAR 0 1
73864: PUSH
73865: LD_INT 3
73867: MINUS
73868: PUSH
73869: LD_VAR 0 2
73873: PUSH
73874: LD_INT 1
73876: PUSH
73877: EMPTY
73878: LIST
73879: LIST
73880: LIST
73881: PUSH
73882: LD_VAR 0 1
73886: PUSH
73887: LD_INT 4
73889: PLUS
73890: PUSH
73891: LD_VAR 0 2
73895: PUSH
73896: LD_INT 4
73898: PUSH
73899: EMPTY
73900: LIST
73901: LIST
73902: LIST
73903: PUSH
73904: LD_VAR 0 1
73908: PUSH
73909: LD_INT 3
73911: PLUS
73912: PUSH
73913: LD_VAR 0 2
73917: PUSH
73918: LD_INT 3
73920: PLUS
73921: PUSH
73922: LD_INT 5
73924: PUSH
73925: EMPTY
73926: LIST
73927: LIST
73928: LIST
73929: PUSH
73930: LD_VAR 0 1
73934: PUSH
73935: LD_VAR 0 2
73939: PUSH
73940: LD_INT 4
73942: PLUS
73943: PUSH
73944: LD_INT 0
73946: PUSH
73947: EMPTY
73948: LIST
73949: LIST
73950: LIST
73951: PUSH
73952: EMPTY
73953: LIST
73954: LIST
73955: LIST
73956: LIST
73957: LIST
73958: ST_TO_ADDR
// end ; 1 :
73959: GO 74659
73961: LD_INT 1
73963: DOUBLE
73964: EQUAL
73965: IFTRUE 73969
73967: GO 74102
73969: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
73970: LD_ADDR_VAR 0 5
73974: PUSH
73975: LD_VAR 0 1
73979: PUSH
73980: LD_VAR 0 2
73984: PUSH
73985: LD_INT 4
73987: MINUS
73988: PUSH
73989: LD_INT 3
73991: PUSH
73992: EMPTY
73993: LIST
73994: LIST
73995: LIST
73996: PUSH
73997: LD_VAR 0 1
74001: PUSH
74002: LD_INT 3
74004: MINUS
74005: PUSH
74006: LD_VAR 0 2
74010: PUSH
74011: LD_INT 3
74013: MINUS
74014: PUSH
74015: LD_INT 2
74017: PUSH
74018: EMPTY
74019: LIST
74020: LIST
74021: LIST
74022: PUSH
74023: LD_VAR 0 1
74027: PUSH
74028: LD_INT 4
74030: MINUS
74031: PUSH
74032: LD_VAR 0 2
74036: PUSH
74037: LD_INT 1
74039: PUSH
74040: EMPTY
74041: LIST
74042: LIST
74043: LIST
74044: PUSH
74045: LD_VAR 0 1
74049: PUSH
74050: LD_VAR 0 2
74054: PUSH
74055: LD_INT 3
74057: PLUS
74058: PUSH
74059: LD_INT 0
74061: PUSH
74062: EMPTY
74063: LIST
74064: LIST
74065: LIST
74066: PUSH
74067: LD_VAR 0 1
74071: PUSH
74072: LD_INT 4
74074: PLUS
74075: PUSH
74076: LD_VAR 0 2
74080: PUSH
74081: LD_INT 4
74083: PLUS
74084: PUSH
74085: LD_INT 5
74087: PUSH
74088: EMPTY
74089: LIST
74090: LIST
74091: LIST
74092: PUSH
74093: EMPTY
74094: LIST
74095: LIST
74096: LIST
74097: LIST
74098: LIST
74099: ST_TO_ADDR
// end ; 2 :
74100: GO 74659
74102: LD_INT 2
74104: DOUBLE
74105: EQUAL
74106: IFTRUE 74110
74108: GO 74239
74110: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74111: LD_ADDR_VAR 0 5
74115: PUSH
74116: LD_VAR 0 1
74120: PUSH
74121: LD_VAR 0 2
74125: PUSH
74126: LD_INT 3
74128: MINUS
74129: PUSH
74130: LD_INT 3
74132: PUSH
74133: EMPTY
74134: LIST
74135: LIST
74136: LIST
74137: PUSH
74138: LD_VAR 0 1
74142: PUSH
74143: LD_INT 4
74145: PLUS
74146: PUSH
74147: LD_VAR 0 2
74151: PUSH
74152: LD_INT 4
74154: PUSH
74155: EMPTY
74156: LIST
74157: LIST
74158: LIST
74159: PUSH
74160: LD_VAR 0 1
74164: PUSH
74165: LD_VAR 0 2
74169: PUSH
74170: LD_INT 4
74172: PLUS
74173: PUSH
74174: LD_INT 0
74176: PUSH
74177: EMPTY
74178: LIST
74179: LIST
74180: LIST
74181: PUSH
74182: LD_VAR 0 1
74186: PUSH
74187: LD_INT 3
74189: MINUS
74190: PUSH
74191: LD_VAR 0 2
74195: PUSH
74196: LD_INT 1
74198: PUSH
74199: EMPTY
74200: LIST
74201: LIST
74202: LIST
74203: PUSH
74204: LD_VAR 0 1
74208: PUSH
74209: LD_INT 4
74211: MINUS
74212: PUSH
74213: LD_VAR 0 2
74217: PUSH
74218: LD_INT 4
74220: MINUS
74221: PUSH
74222: LD_INT 2
74224: PUSH
74225: EMPTY
74226: LIST
74227: LIST
74228: LIST
74229: PUSH
74230: EMPTY
74231: LIST
74232: LIST
74233: LIST
74234: LIST
74235: LIST
74236: ST_TO_ADDR
// end ; 3 :
74237: GO 74659
74239: LD_INT 3
74241: DOUBLE
74242: EQUAL
74243: IFTRUE 74247
74245: GO 74380
74247: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74248: LD_ADDR_VAR 0 5
74252: PUSH
74253: LD_VAR 0 1
74257: PUSH
74258: LD_INT 3
74260: PLUS
74261: PUSH
74262: LD_VAR 0 2
74266: PUSH
74267: LD_INT 4
74269: PUSH
74270: EMPTY
74271: LIST
74272: LIST
74273: LIST
74274: PUSH
74275: LD_VAR 0 1
74279: PUSH
74280: LD_INT 4
74282: PLUS
74283: PUSH
74284: LD_VAR 0 2
74288: PUSH
74289: LD_INT 4
74291: PLUS
74292: PUSH
74293: LD_INT 5
74295: PUSH
74296: EMPTY
74297: LIST
74298: LIST
74299: LIST
74300: PUSH
74301: LD_VAR 0 1
74305: PUSH
74306: LD_INT 4
74308: MINUS
74309: PUSH
74310: LD_VAR 0 2
74314: PUSH
74315: LD_INT 1
74317: PUSH
74318: EMPTY
74319: LIST
74320: LIST
74321: LIST
74322: PUSH
74323: LD_VAR 0 1
74327: PUSH
74328: LD_VAR 0 2
74332: PUSH
74333: LD_INT 4
74335: MINUS
74336: PUSH
74337: LD_INT 3
74339: PUSH
74340: EMPTY
74341: LIST
74342: LIST
74343: LIST
74344: PUSH
74345: LD_VAR 0 1
74349: PUSH
74350: LD_INT 3
74352: MINUS
74353: PUSH
74354: LD_VAR 0 2
74358: PUSH
74359: LD_INT 3
74361: MINUS
74362: PUSH
74363: LD_INT 2
74365: PUSH
74366: EMPTY
74367: LIST
74368: LIST
74369: LIST
74370: PUSH
74371: EMPTY
74372: LIST
74373: LIST
74374: LIST
74375: LIST
74376: LIST
74377: ST_TO_ADDR
// end ; 4 :
74378: GO 74659
74380: LD_INT 4
74382: DOUBLE
74383: EQUAL
74384: IFTRUE 74388
74386: GO 74521
74388: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74389: LD_ADDR_VAR 0 5
74393: PUSH
74394: LD_VAR 0 1
74398: PUSH
74399: LD_VAR 0 2
74403: PUSH
74404: LD_INT 4
74406: PLUS
74407: PUSH
74408: LD_INT 0
74410: PUSH
74411: EMPTY
74412: LIST
74413: LIST
74414: LIST
74415: PUSH
74416: LD_VAR 0 1
74420: PUSH
74421: LD_INT 3
74423: PLUS
74424: PUSH
74425: LD_VAR 0 2
74429: PUSH
74430: LD_INT 3
74432: PLUS
74433: PUSH
74434: LD_INT 5
74436: PUSH
74437: EMPTY
74438: LIST
74439: LIST
74440: LIST
74441: PUSH
74442: LD_VAR 0 1
74446: PUSH
74447: LD_INT 4
74449: PLUS
74450: PUSH
74451: LD_VAR 0 2
74455: PUSH
74456: LD_INT 4
74458: PUSH
74459: EMPTY
74460: LIST
74461: LIST
74462: LIST
74463: PUSH
74464: LD_VAR 0 1
74468: PUSH
74469: LD_VAR 0 2
74473: PUSH
74474: LD_INT 3
74476: MINUS
74477: PUSH
74478: LD_INT 3
74480: PUSH
74481: EMPTY
74482: LIST
74483: LIST
74484: LIST
74485: PUSH
74486: LD_VAR 0 1
74490: PUSH
74491: LD_INT 4
74493: MINUS
74494: PUSH
74495: LD_VAR 0 2
74499: PUSH
74500: LD_INT 4
74502: MINUS
74503: PUSH
74504: LD_INT 2
74506: PUSH
74507: EMPTY
74508: LIST
74509: LIST
74510: LIST
74511: PUSH
74512: EMPTY
74513: LIST
74514: LIST
74515: LIST
74516: LIST
74517: LIST
74518: ST_TO_ADDR
// end ; 5 :
74519: GO 74659
74521: LD_INT 5
74523: DOUBLE
74524: EQUAL
74525: IFTRUE 74529
74527: GO 74658
74529: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74530: LD_ADDR_VAR 0 5
74534: PUSH
74535: LD_VAR 0 1
74539: PUSH
74540: LD_INT 4
74542: MINUS
74543: PUSH
74544: LD_VAR 0 2
74548: PUSH
74549: LD_INT 1
74551: PUSH
74552: EMPTY
74553: LIST
74554: LIST
74555: LIST
74556: PUSH
74557: LD_VAR 0 1
74561: PUSH
74562: LD_VAR 0 2
74566: PUSH
74567: LD_INT 4
74569: MINUS
74570: PUSH
74571: LD_INT 3
74573: PUSH
74574: EMPTY
74575: LIST
74576: LIST
74577: LIST
74578: PUSH
74579: LD_VAR 0 1
74583: PUSH
74584: LD_INT 4
74586: PLUS
74587: PUSH
74588: LD_VAR 0 2
74592: PUSH
74593: LD_INT 4
74595: PLUS
74596: PUSH
74597: LD_INT 5
74599: PUSH
74600: EMPTY
74601: LIST
74602: LIST
74603: LIST
74604: PUSH
74605: LD_VAR 0 1
74609: PUSH
74610: LD_INT 3
74612: PLUS
74613: PUSH
74614: LD_VAR 0 2
74618: PUSH
74619: LD_INT 4
74621: PUSH
74622: EMPTY
74623: LIST
74624: LIST
74625: LIST
74626: PUSH
74627: LD_VAR 0 1
74631: PUSH
74632: LD_VAR 0 2
74636: PUSH
74637: LD_INT 3
74639: PLUS
74640: PUSH
74641: LD_INT 0
74643: PUSH
74644: EMPTY
74645: LIST
74646: LIST
74647: LIST
74648: PUSH
74649: EMPTY
74650: LIST
74651: LIST
74652: LIST
74653: LIST
74654: LIST
74655: ST_TO_ADDR
// end ; end ;
74656: GO 74659
74658: POP
// result := list ;
74659: LD_ADDR_VAR 0 4
74663: PUSH
74664: LD_VAR 0 5
74668: ST_TO_ADDR
// end ;
74669: LD_VAR 0 4
74673: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74674: LD_INT 0
74676: PPUSH
74677: PPUSH
74678: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74679: LD_VAR 0 1
74683: NOT
74684: PUSH
74685: LD_VAR 0 2
74689: PUSH
74690: LD_INT 1
74692: PUSH
74693: LD_INT 2
74695: PUSH
74696: LD_INT 3
74698: PUSH
74699: LD_INT 4
74701: PUSH
74702: EMPTY
74703: LIST
74704: LIST
74705: LIST
74706: LIST
74707: IN
74708: NOT
74709: OR
74710: IFFALSE 74714
// exit ;
74712: GO 74797
// tmp := [ ] ;
74714: LD_ADDR_VAR 0 5
74718: PUSH
74719: EMPTY
74720: ST_TO_ADDR
// for i in units do
74721: LD_ADDR_VAR 0 4
74725: PUSH
74726: LD_VAR 0 1
74730: PUSH
74731: FOR_IN
74732: IFFALSE 74766
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
74734: LD_ADDR_VAR 0 5
74738: PUSH
74739: LD_VAR 0 5
74743: PPUSH
74744: LD_VAR 0 4
74748: PPUSH
74749: LD_VAR 0 2
74753: PPUSH
74754: CALL_OW 259
74758: PPUSH
74759: CALL 76157 0 2
74763: ST_TO_ADDR
74764: GO 74731
74766: POP
74767: POP
// if not tmp then
74768: LD_VAR 0 5
74772: NOT
74773: IFFALSE 74777
// exit ;
74775: GO 74797
// result := SortListByListDesc ( units , tmp ) ;
74777: LD_ADDR_VAR 0 3
74781: PUSH
74782: LD_VAR 0 1
74786: PPUSH
74787: LD_VAR 0 5
74791: PPUSH
74792: CALL_OW 77
74796: ST_TO_ADDR
// end ;
74797: LD_VAR 0 3
74801: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74802: LD_INT 0
74804: PPUSH
74805: PPUSH
74806: PPUSH
// result := false ;
74807: LD_ADDR_VAR 0 3
74811: PUSH
74812: LD_INT 0
74814: ST_TO_ADDR
// if not building then
74815: LD_VAR 0 2
74819: NOT
74820: IFFALSE 74824
// exit ;
74822: GO 74962
// x := GetX ( building ) ;
74824: LD_ADDR_VAR 0 4
74828: PUSH
74829: LD_VAR 0 2
74833: PPUSH
74834: CALL_OW 250
74838: ST_TO_ADDR
// y := GetY ( building ) ;
74839: LD_ADDR_VAR 0 5
74843: PUSH
74844: LD_VAR 0 2
74848: PPUSH
74849: CALL_OW 251
74853: ST_TO_ADDR
// if not x or not y then
74854: LD_VAR 0 4
74858: NOT
74859: PUSH
74860: LD_VAR 0 5
74864: NOT
74865: OR
74866: IFFALSE 74870
// exit ;
74868: GO 74962
// if GetTaskList ( unit ) then
74870: LD_VAR 0 1
74874: PPUSH
74875: CALL_OW 437
74879: IFFALSE 74962
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74881: LD_STRING e
74883: PUSH
74884: LD_VAR 0 1
74888: PPUSH
74889: CALL_OW 437
74893: PUSH
74894: LD_INT 1
74896: ARRAY
74897: PUSH
74898: LD_INT 1
74900: ARRAY
74901: EQUAL
74902: PUSH
74903: LD_VAR 0 4
74907: PUSH
74908: LD_VAR 0 1
74912: PPUSH
74913: CALL_OW 437
74917: PUSH
74918: LD_INT 1
74920: ARRAY
74921: PUSH
74922: LD_INT 2
74924: ARRAY
74925: EQUAL
74926: AND
74927: PUSH
74928: LD_VAR 0 5
74932: PUSH
74933: LD_VAR 0 1
74937: PPUSH
74938: CALL_OW 437
74942: PUSH
74943: LD_INT 1
74945: ARRAY
74946: PUSH
74947: LD_INT 3
74949: ARRAY
74950: EQUAL
74951: AND
74952: IFFALSE 74962
// result := true end ;
74954: LD_ADDR_VAR 0 3
74958: PUSH
74959: LD_INT 1
74961: ST_TO_ADDR
// end ;
74962: LD_VAR 0 3
74966: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
74967: LD_INT 0
74969: PPUSH
// result := false ;
74970: LD_ADDR_VAR 0 4
74974: PUSH
74975: LD_INT 0
74977: ST_TO_ADDR
// if GetTaskList ( unit ) then
74978: LD_VAR 0 1
74982: PPUSH
74983: CALL_OW 437
74987: IFFALSE 75070
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74989: LD_STRING M
74991: PUSH
74992: LD_VAR 0 1
74996: PPUSH
74997: CALL_OW 437
75001: PUSH
75002: LD_INT 1
75004: ARRAY
75005: PUSH
75006: LD_INT 1
75008: ARRAY
75009: EQUAL
75010: PUSH
75011: LD_VAR 0 2
75015: PUSH
75016: LD_VAR 0 1
75020: PPUSH
75021: CALL_OW 437
75025: PUSH
75026: LD_INT 1
75028: ARRAY
75029: PUSH
75030: LD_INT 2
75032: ARRAY
75033: EQUAL
75034: AND
75035: PUSH
75036: LD_VAR 0 3
75040: PUSH
75041: LD_VAR 0 1
75045: PPUSH
75046: CALL_OW 437
75050: PUSH
75051: LD_INT 1
75053: ARRAY
75054: PUSH
75055: LD_INT 3
75057: ARRAY
75058: EQUAL
75059: AND
75060: IFFALSE 75070
// result := true ;
75062: LD_ADDR_VAR 0 4
75066: PUSH
75067: LD_INT 1
75069: ST_TO_ADDR
// end ; end ;
75070: LD_VAR 0 4
75074: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75075: LD_INT 0
75077: PPUSH
75078: PPUSH
75079: PPUSH
75080: PPUSH
// if not unit or not area then
75081: LD_VAR 0 1
75085: NOT
75086: PUSH
75087: LD_VAR 0 2
75091: NOT
75092: OR
75093: IFFALSE 75097
// exit ;
75095: GO 75260
// tmp := AreaToList ( area , i ) ;
75097: LD_ADDR_VAR 0 6
75101: PUSH
75102: LD_VAR 0 2
75106: PPUSH
75107: LD_VAR 0 5
75111: PPUSH
75112: CALL_OW 517
75116: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75117: LD_ADDR_VAR 0 5
75121: PUSH
75122: DOUBLE
75123: LD_INT 1
75125: DEC
75126: ST_TO_ADDR
75127: LD_VAR 0 6
75131: PUSH
75132: LD_INT 1
75134: ARRAY
75135: PUSH
75136: FOR_TO
75137: IFFALSE 75258
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75139: LD_ADDR_VAR 0 7
75143: PUSH
75144: LD_VAR 0 6
75148: PUSH
75149: LD_INT 1
75151: ARRAY
75152: PUSH
75153: LD_VAR 0 5
75157: ARRAY
75158: PUSH
75159: LD_VAR 0 6
75163: PUSH
75164: LD_INT 2
75166: ARRAY
75167: PUSH
75168: LD_VAR 0 5
75172: ARRAY
75173: PUSH
75174: EMPTY
75175: LIST
75176: LIST
75177: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
75178: LD_INT 92
75180: PUSH
75181: LD_VAR 0 7
75185: PUSH
75186: LD_INT 1
75188: ARRAY
75189: PUSH
75190: LD_VAR 0 7
75194: PUSH
75195: LD_INT 2
75197: ARRAY
75198: PUSH
75199: LD_INT 3
75201: PUSH
75202: EMPTY
75203: LIST
75204: LIST
75205: LIST
75206: LIST
75207: PPUSH
75208: CALL_OW 69
75212: PUSH
75213: LD_INT 0
75215: EQUAL
75216: IFFALSE 75256
// begin PlaceUnitArea ( unit , area , mode ) ;
75218: LD_VAR 0 1
75222: PPUSH
75223: LD_VAR 0 2
75227: PPUSH
75228: LD_VAR 0 3
75232: PPUSH
75233: CALL_OW 49
// result := IsPlaced ( unit ) ;
75237: LD_ADDR_VAR 0 4
75241: PUSH
75242: LD_VAR 0 1
75246: PPUSH
75247: CALL_OW 305
75251: ST_TO_ADDR
// exit ;
75252: POP
75253: POP
75254: GO 75260
// end ; end ;
75256: GO 75136
75258: POP
75259: POP
// end ;
75260: LD_VAR 0 4
75264: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75265: LD_INT 0
75267: PPUSH
75268: PPUSH
75269: PPUSH
// if not side or side > 8 then
75270: LD_VAR 0 1
75274: NOT
75275: PUSH
75276: LD_VAR 0 1
75280: PUSH
75281: LD_INT 8
75283: GREATER
75284: OR
75285: IFFALSE 75289
// exit ;
75287: GO 75476
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75289: LD_ADDR_VAR 0 4
75293: PUSH
75294: LD_INT 22
75296: PUSH
75297: LD_VAR 0 1
75301: PUSH
75302: EMPTY
75303: LIST
75304: LIST
75305: PUSH
75306: LD_INT 21
75308: PUSH
75309: LD_INT 3
75311: PUSH
75312: EMPTY
75313: LIST
75314: LIST
75315: PUSH
75316: EMPTY
75317: LIST
75318: LIST
75319: PPUSH
75320: CALL_OW 69
75324: ST_TO_ADDR
// if not tmp then
75325: LD_VAR 0 4
75329: NOT
75330: IFFALSE 75334
// exit ;
75332: GO 75476
// enable_addtolog := true ;
75334: LD_ADDR_OWVAR 81
75338: PUSH
75339: LD_INT 1
75341: ST_TO_ADDR
// AddToLog ( [ ) ;
75342: LD_STRING [
75344: PPUSH
75345: CALL_OW 561
// for i in tmp do
75349: LD_ADDR_VAR 0 3
75353: PUSH
75354: LD_VAR 0 4
75358: PUSH
75359: FOR_IN
75360: IFFALSE 75467
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75362: LD_STRING [
75364: PUSH
75365: LD_VAR 0 3
75369: PPUSH
75370: CALL_OW 266
75374: STR
75375: PUSH
75376: LD_STRING , 
75378: STR
75379: PUSH
75380: LD_VAR 0 3
75384: PPUSH
75385: CALL_OW 250
75389: STR
75390: PUSH
75391: LD_STRING , 
75393: STR
75394: PUSH
75395: LD_VAR 0 3
75399: PPUSH
75400: CALL_OW 251
75404: STR
75405: PUSH
75406: LD_STRING , 
75408: STR
75409: PUSH
75410: LD_VAR 0 3
75414: PPUSH
75415: CALL_OW 254
75419: STR
75420: PUSH
75421: LD_STRING , 
75423: STR
75424: PUSH
75425: LD_VAR 0 3
75429: PPUSH
75430: LD_INT 1
75432: PPUSH
75433: CALL_OW 268
75437: STR
75438: PUSH
75439: LD_STRING , 
75441: STR
75442: PUSH
75443: LD_VAR 0 3
75447: PPUSH
75448: LD_INT 2
75450: PPUSH
75451: CALL_OW 268
75455: STR
75456: PUSH
75457: LD_STRING ],
75459: STR
75460: PPUSH
75461: CALL_OW 561
// end ;
75465: GO 75359
75467: POP
75468: POP
// AddToLog ( ]; ) ;
75469: LD_STRING ];
75471: PPUSH
75472: CALL_OW 561
// end ;
75476: LD_VAR 0 2
75480: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75481: LD_INT 0
75483: PPUSH
75484: PPUSH
75485: PPUSH
75486: PPUSH
75487: PPUSH
// if not area or not rate or not max then
75488: LD_VAR 0 1
75492: NOT
75493: PUSH
75494: LD_VAR 0 2
75498: NOT
75499: OR
75500: PUSH
75501: LD_VAR 0 4
75505: NOT
75506: OR
75507: IFFALSE 75511
// exit ;
75509: GO 75700
// while 1 do
75511: LD_INT 1
75513: IFFALSE 75700
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75515: LD_ADDR_VAR 0 9
75519: PUSH
75520: LD_VAR 0 1
75524: PPUSH
75525: LD_INT 1
75527: PPUSH
75528: CALL_OW 287
75532: PUSH
75533: LD_INT 10
75535: MUL
75536: ST_TO_ADDR
// r := rate / 10 ;
75537: LD_ADDR_VAR 0 7
75541: PUSH
75542: LD_VAR 0 2
75546: PUSH
75547: LD_INT 10
75549: DIVREAL
75550: ST_TO_ADDR
// time := 1 1$00 ;
75551: LD_ADDR_VAR 0 8
75555: PUSH
75556: LD_INT 2100
75558: ST_TO_ADDR
// if amount < min then
75559: LD_VAR 0 9
75563: PUSH
75564: LD_VAR 0 3
75568: LESS
75569: IFFALSE 75587
// r := r * 2 else
75571: LD_ADDR_VAR 0 7
75575: PUSH
75576: LD_VAR 0 7
75580: PUSH
75581: LD_INT 2
75583: MUL
75584: ST_TO_ADDR
75585: GO 75613
// if amount > max then
75587: LD_VAR 0 9
75591: PUSH
75592: LD_VAR 0 4
75596: GREATER
75597: IFFALSE 75613
// r := r / 2 ;
75599: LD_ADDR_VAR 0 7
75603: PUSH
75604: LD_VAR 0 7
75608: PUSH
75609: LD_INT 2
75611: DIVREAL
75612: ST_TO_ADDR
// time := time / r ;
75613: LD_ADDR_VAR 0 8
75617: PUSH
75618: LD_VAR 0 8
75622: PUSH
75623: LD_VAR 0 7
75627: DIVREAL
75628: ST_TO_ADDR
// if time < 0 then
75629: LD_VAR 0 8
75633: PUSH
75634: LD_INT 0
75636: LESS
75637: IFFALSE 75654
// time := time * - 1 ;
75639: LD_ADDR_VAR 0 8
75643: PUSH
75644: LD_VAR 0 8
75648: PUSH
75649: LD_INT 1
75651: NEG
75652: MUL
75653: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
75654: LD_VAR 0 8
75658: PUSH
75659: LD_INT 35
75661: PPUSH
75662: LD_INT 875
75664: PPUSH
75665: CALL_OW 12
75669: PLUS
75670: PPUSH
75671: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75675: LD_INT 1
75677: PPUSH
75678: LD_INT 5
75680: PPUSH
75681: CALL_OW 12
75685: PPUSH
75686: LD_VAR 0 1
75690: PPUSH
75691: LD_INT 1
75693: PPUSH
75694: CALL_OW 55
// end ;
75698: GO 75511
// end ;
75700: LD_VAR 0 5
75704: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75705: LD_INT 0
75707: PPUSH
75708: PPUSH
75709: PPUSH
75710: PPUSH
75711: PPUSH
75712: PPUSH
75713: PPUSH
75714: PPUSH
// if not turrets or not factories then
75715: LD_VAR 0 1
75719: NOT
75720: PUSH
75721: LD_VAR 0 2
75725: NOT
75726: OR
75727: IFFALSE 75731
// exit ;
75729: GO 76038
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75731: LD_ADDR_VAR 0 10
75735: PUSH
75736: LD_INT 5
75738: PUSH
75739: LD_INT 6
75741: PUSH
75742: EMPTY
75743: LIST
75744: LIST
75745: PUSH
75746: LD_INT 2
75748: PUSH
75749: LD_INT 4
75751: PUSH
75752: EMPTY
75753: LIST
75754: LIST
75755: PUSH
75756: LD_INT 3
75758: PUSH
75759: LD_INT 5
75761: PUSH
75762: EMPTY
75763: LIST
75764: LIST
75765: PUSH
75766: EMPTY
75767: LIST
75768: LIST
75769: LIST
75770: PUSH
75771: LD_INT 24
75773: PUSH
75774: LD_INT 25
75776: PUSH
75777: EMPTY
75778: LIST
75779: LIST
75780: PUSH
75781: LD_INT 23
75783: PUSH
75784: LD_INT 27
75786: PUSH
75787: EMPTY
75788: LIST
75789: LIST
75790: PUSH
75791: EMPTY
75792: LIST
75793: LIST
75794: PUSH
75795: LD_INT 42
75797: PUSH
75798: LD_INT 43
75800: PUSH
75801: EMPTY
75802: LIST
75803: LIST
75804: PUSH
75805: LD_INT 44
75807: PUSH
75808: LD_INT 46
75810: PUSH
75811: EMPTY
75812: LIST
75813: LIST
75814: PUSH
75815: LD_INT 45
75817: PUSH
75818: LD_INT 47
75820: PUSH
75821: EMPTY
75822: LIST
75823: LIST
75824: PUSH
75825: EMPTY
75826: LIST
75827: LIST
75828: LIST
75829: PUSH
75830: EMPTY
75831: LIST
75832: LIST
75833: LIST
75834: ST_TO_ADDR
// result := [ ] ;
75835: LD_ADDR_VAR 0 3
75839: PUSH
75840: EMPTY
75841: ST_TO_ADDR
// for i in turrets do
75842: LD_ADDR_VAR 0 4
75846: PUSH
75847: LD_VAR 0 1
75851: PUSH
75852: FOR_IN
75853: IFFALSE 76036
// begin nat := GetNation ( i ) ;
75855: LD_ADDR_VAR 0 7
75859: PUSH
75860: LD_VAR 0 4
75864: PPUSH
75865: CALL_OW 248
75869: ST_TO_ADDR
// weapon := 0 ;
75870: LD_ADDR_VAR 0 8
75874: PUSH
75875: LD_INT 0
75877: ST_TO_ADDR
// if not nat then
75878: LD_VAR 0 7
75882: NOT
75883: IFFALSE 75887
// continue ;
75885: GO 75852
// for j in list [ nat ] do
75887: LD_ADDR_VAR 0 5
75891: PUSH
75892: LD_VAR 0 10
75896: PUSH
75897: LD_VAR 0 7
75901: ARRAY
75902: PUSH
75903: FOR_IN
75904: IFFALSE 75945
// if GetBWeapon ( i ) = j [ 1 ] then
75906: LD_VAR 0 4
75910: PPUSH
75911: CALL_OW 269
75915: PUSH
75916: LD_VAR 0 5
75920: PUSH
75921: LD_INT 1
75923: ARRAY
75924: EQUAL
75925: IFFALSE 75943
// begin weapon := j [ 2 ] ;
75927: LD_ADDR_VAR 0 8
75931: PUSH
75932: LD_VAR 0 5
75936: PUSH
75937: LD_INT 2
75939: ARRAY
75940: ST_TO_ADDR
// break ;
75941: GO 75945
// end ;
75943: GO 75903
75945: POP
75946: POP
// if not weapon then
75947: LD_VAR 0 8
75951: NOT
75952: IFFALSE 75956
// continue ;
75954: GO 75852
// for k in factories do
75956: LD_ADDR_VAR 0 6
75960: PUSH
75961: LD_VAR 0 2
75965: PUSH
75966: FOR_IN
75967: IFFALSE 76032
// begin weapons := AvailableWeaponList ( k ) ;
75969: LD_ADDR_VAR 0 9
75973: PUSH
75974: LD_VAR 0 6
75978: PPUSH
75979: CALL_OW 478
75983: ST_TO_ADDR
// if not weapons then
75984: LD_VAR 0 9
75988: NOT
75989: IFFALSE 75993
// continue ;
75991: GO 75966
// if weapon in weapons then
75993: LD_VAR 0 8
75997: PUSH
75998: LD_VAR 0 9
76002: IN
76003: IFFALSE 76030
// begin result := [ i , weapon ] ;
76005: LD_ADDR_VAR 0 3
76009: PUSH
76010: LD_VAR 0 4
76014: PUSH
76015: LD_VAR 0 8
76019: PUSH
76020: EMPTY
76021: LIST
76022: LIST
76023: ST_TO_ADDR
// exit ;
76024: POP
76025: POP
76026: POP
76027: POP
76028: GO 76038
// end ; end ;
76030: GO 75966
76032: POP
76033: POP
// end ;
76034: GO 75852
76036: POP
76037: POP
// end ;
76038: LD_VAR 0 3
76042: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76043: LD_INT 0
76045: PPUSH
// if not side or side > 8 then
76046: LD_VAR 0 3
76050: NOT
76051: PUSH
76052: LD_VAR 0 3
76056: PUSH
76057: LD_INT 8
76059: GREATER
76060: OR
76061: IFFALSE 76065
// exit ;
76063: GO 76124
// if not range then
76065: LD_VAR 0 4
76069: NOT
76070: IFFALSE 76081
// range := - 12 ;
76072: LD_ADDR_VAR 0 4
76076: PUSH
76077: LD_INT 12
76079: NEG
76080: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76081: LD_VAR 0 1
76085: PPUSH
76086: LD_VAR 0 2
76090: PPUSH
76091: LD_VAR 0 3
76095: PPUSH
76096: LD_VAR 0 4
76100: PPUSH
76101: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76105: LD_VAR 0 1
76109: PPUSH
76110: LD_VAR 0 2
76114: PPUSH
76115: LD_VAR 0 3
76119: PPUSH
76120: CALL_OW 331
// end ;
76124: LD_VAR 0 5
76128: RET
// export function Video ( mode ) ; begin
76129: LD_INT 0
76131: PPUSH
// ingame_video = mode ;
76132: LD_ADDR_OWVAR 52
76136: PUSH
76137: LD_VAR 0 1
76141: ST_TO_ADDR
// interface_hidden = mode ;
76142: LD_ADDR_OWVAR 54
76146: PUSH
76147: LD_VAR 0 1
76151: ST_TO_ADDR
// end ;
76152: LD_VAR 0 2
76156: RET
// export function Join ( array , element ) ; begin
76157: LD_INT 0
76159: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76160: LD_ADDR_VAR 0 3
76164: PUSH
76165: LD_VAR 0 1
76169: PPUSH
76170: LD_VAR 0 1
76174: PUSH
76175: LD_INT 1
76177: PLUS
76178: PPUSH
76179: LD_VAR 0 2
76183: PPUSH
76184: CALL_OW 1
76188: ST_TO_ADDR
// end ;
76189: LD_VAR 0 3
76193: RET
// export function JoinUnion ( array , element ) ; begin
76194: LD_INT 0
76196: PPUSH
// result := array union element ;
76197: LD_ADDR_VAR 0 3
76201: PUSH
76202: LD_VAR 0 1
76206: PUSH
76207: LD_VAR 0 2
76211: UNION
76212: ST_TO_ADDR
// end ;
76213: LD_VAR 0 3
76217: RET
// export function GetBehemoths ( side ) ; begin
76218: LD_INT 0
76220: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76221: LD_ADDR_VAR 0 2
76225: PUSH
76226: LD_INT 22
76228: PUSH
76229: LD_VAR 0 1
76233: PUSH
76234: EMPTY
76235: LIST
76236: LIST
76237: PUSH
76238: LD_INT 31
76240: PUSH
76241: LD_INT 25
76243: PUSH
76244: EMPTY
76245: LIST
76246: LIST
76247: PUSH
76248: EMPTY
76249: LIST
76250: LIST
76251: PPUSH
76252: CALL_OW 69
76256: ST_TO_ADDR
// end ;
76257: LD_VAR 0 2
76261: RET
// export function Shuffle ( array ) ; var i , index ; begin
76262: LD_INT 0
76264: PPUSH
76265: PPUSH
76266: PPUSH
// result := [ ] ;
76267: LD_ADDR_VAR 0 2
76271: PUSH
76272: EMPTY
76273: ST_TO_ADDR
// if not array then
76274: LD_VAR 0 1
76278: NOT
76279: IFFALSE 76283
// exit ;
76281: GO 76382
// Randomize ;
76283: CALL_OW 10
// for i = array downto 1 do
76287: LD_ADDR_VAR 0 3
76291: PUSH
76292: DOUBLE
76293: LD_VAR 0 1
76297: INC
76298: ST_TO_ADDR
76299: LD_INT 1
76301: PUSH
76302: FOR_DOWNTO
76303: IFFALSE 76380
// begin index := rand ( 1 , array ) ;
76305: LD_ADDR_VAR 0 4
76309: PUSH
76310: LD_INT 1
76312: PPUSH
76313: LD_VAR 0 1
76317: PPUSH
76318: CALL_OW 12
76322: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76323: LD_ADDR_VAR 0 2
76327: PUSH
76328: LD_VAR 0 2
76332: PPUSH
76333: LD_VAR 0 2
76337: PUSH
76338: LD_INT 1
76340: PLUS
76341: PPUSH
76342: LD_VAR 0 1
76346: PUSH
76347: LD_VAR 0 4
76351: ARRAY
76352: PPUSH
76353: CALL_OW 2
76357: ST_TO_ADDR
// array := Delete ( array , index ) ;
76358: LD_ADDR_VAR 0 1
76362: PUSH
76363: LD_VAR 0 1
76367: PPUSH
76368: LD_VAR 0 4
76372: PPUSH
76373: CALL_OW 3
76377: ST_TO_ADDR
// end ;
76378: GO 76302
76380: POP
76381: POP
// end ;
76382: LD_VAR 0 2
76386: RET
// export function GetBaseMaterials ( base ) ; begin
76387: LD_INT 0
76389: PPUSH
// result := [ 0 , 0 , 0 ] ;
76390: LD_ADDR_VAR 0 2
76394: PUSH
76395: LD_INT 0
76397: PUSH
76398: LD_INT 0
76400: PUSH
76401: LD_INT 0
76403: PUSH
76404: EMPTY
76405: LIST
76406: LIST
76407: LIST
76408: ST_TO_ADDR
// if not base then
76409: LD_VAR 0 1
76413: NOT
76414: IFFALSE 76418
// exit ;
76416: GO 76467
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76418: LD_ADDR_VAR 0 2
76422: PUSH
76423: LD_VAR 0 1
76427: PPUSH
76428: LD_INT 1
76430: PPUSH
76431: CALL_OW 275
76435: PUSH
76436: LD_VAR 0 1
76440: PPUSH
76441: LD_INT 2
76443: PPUSH
76444: CALL_OW 275
76448: PUSH
76449: LD_VAR 0 1
76453: PPUSH
76454: LD_INT 3
76456: PPUSH
76457: CALL_OW 275
76461: PUSH
76462: EMPTY
76463: LIST
76464: LIST
76465: LIST
76466: ST_TO_ADDR
// end ;
76467: LD_VAR 0 2
76471: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76472: LD_INT 0
76474: PPUSH
76475: PPUSH
// result := array ;
76476: LD_ADDR_VAR 0 3
76480: PUSH
76481: LD_VAR 0 1
76485: ST_TO_ADDR
// if size >= result then
76486: LD_VAR 0 2
76490: PUSH
76491: LD_VAR 0 3
76495: GREATEREQUAL
76496: IFFALSE 76500
// exit ;
76498: GO 76550
// if size then
76500: LD_VAR 0 2
76504: IFFALSE 76550
// for i := array downto size do
76506: LD_ADDR_VAR 0 4
76510: PUSH
76511: DOUBLE
76512: LD_VAR 0 1
76516: INC
76517: ST_TO_ADDR
76518: LD_VAR 0 2
76522: PUSH
76523: FOR_DOWNTO
76524: IFFALSE 76548
// result := Delete ( result , result ) ;
76526: LD_ADDR_VAR 0 3
76530: PUSH
76531: LD_VAR 0 3
76535: PPUSH
76536: LD_VAR 0 3
76540: PPUSH
76541: CALL_OW 3
76545: ST_TO_ADDR
76546: GO 76523
76548: POP
76549: POP
// end ;
76550: LD_VAR 0 3
76554: RET
// export function ComExit ( unit ) ; var tmp ; begin
76555: LD_INT 0
76557: PPUSH
76558: PPUSH
// if not IsInUnit ( unit ) then
76559: LD_VAR 0 1
76563: PPUSH
76564: CALL_OW 310
76568: NOT
76569: IFFALSE 76573
// exit ;
76571: GO 76633
// tmp := IsInUnit ( unit ) ;
76573: LD_ADDR_VAR 0 3
76577: PUSH
76578: LD_VAR 0 1
76582: PPUSH
76583: CALL_OW 310
76587: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76588: LD_VAR 0 3
76592: PPUSH
76593: CALL_OW 247
76597: PUSH
76598: LD_INT 2
76600: EQUAL
76601: IFFALSE 76614
// ComExitVehicle ( unit ) else
76603: LD_VAR 0 1
76607: PPUSH
76608: CALL_OW 121
76612: GO 76623
// ComExitBuilding ( unit ) ;
76614: LD_VAR 0 1
76618: PPUSH
76619: CALL_OW 122
// result := tmp ;
76623: LD_ADDR_VAR 0 2
76627: PUSH
76628: LD_VAR 0 3
76632: ST_TO_ADDR
// end ;
76633: LD_VAR 0 2
76637: RET
// export function ComExitAll ( units ) ; var i ; begin
76638: LD_INT 0
76640: PPUSH
76641: PPUSH
// if not units then
76642: LD_VAR 0 1
76646: NOT
76647: IFFALSE 76651
// exit ;
76649: GO 76677
// for i in units do
76651: LD_ADDR_VAR 0 3
76655: PUSH
76656: LD_VAR 0 1
76660: PUSH
76661: FOR_IN
76662: IFFALSE 76675
// ComExit ( i ) ;
76664: LD_VAR 0 3
76668: PPUSH
76669: CALL 76555 0 1
76673: GO 76661
76675: POP
76676: POP
// end ;
76677: LD_VAR 0 2
76681: RET
// export function ResetHc ; begin
76682: LD_INT 0
76684: PPUSH
// InitHc ;
76685: CALL_OW 19
// hc_importance := 0 ;
76689: LD_ADDR_OWVAR 32
76693: PUSH
76694: LD_INT 0
76696: ST_TO_ADDR
// end ;
76697: LD_VAR 0 1
76701: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76702: LD_INT 0
76704: PPUSH
76705: PPUSH
76706: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76707: LD_ADDR_VAR 0 6
76711: PUSH
76712: LD_VAR 0 1
76716: PUSH
76717: LD_VAR 0 3
76721: PLUS
76722: PUSH
76723: LD_INT 2
76725: DIV
76726: ST_TO_ADDR
// if _x < 0 then
76727: LD_VAR 0 6
76731: PUSH
76732: LD_INT 0
76734: LESS
76735: IFFALSE 76752
// _x := _x * - 1 ;
76737: LD_ADDR_VAR 0 6
76741: PUSH
76742: LD_VAR 0 6
76746: PUSH
76747: LD_INT 1
76749: NEG
76750: MUL
76751: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76752: LD_ADDR_VAR 0 7
76756: PUSH
76757: LD_VAR 0 2
76761: PUSH
76762: LD_VAR 0 4
76766: PLUS
76767: PUSH
76768: LD_INT 2
76770: DIV
76771: ST_TO_ADDR
// if _y < 0 then
76772: LD_VAR 0 7
76776: PUSH
76777: LD_INT 0
76779: LESS
76780: IFFALSE 76797
// _y := _y * - 1 ;
76782: LD_ADDR_VAR 0 7
76786: PUSH
76787: LD_VAR 0 7
76791: PUSH
76792: LD_INT 1
76794: NEG
76795: MUL
76796: ST_TO_ADDR
// result := [ _x , _y ] ;
76797: LD_ADDR_VAR 0 5
76801: PUSH
76802: LD_VAR 0 6
76806: PUSH
76807: LD_VAR 0 7
76811: PUSH
76812: EMPTY
76813: LIST
76814: LIST
76815: ST_TO_ADDR
// end ;
76816: LD_VAR 0 5
76820: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76821: LD_INT 0
76823: PPUSH
76824: PPUSH
76825: PPUSH
76826: PPUSH
// task := GetTaskList ( unit ) ;
76827: LD_ADDR_VAR 0 7
76831: PUSH
76832: LD_VAR 0 1
76836: PPUSH
76837: CALL_OW 437
76841: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76842: LD_VAR 0 7
76846: NOT
76847: PUSH
76848: LD_VAR 0 1
76852: PPUSH
76853: LD_VAR 0 2
76857: PPUSH
76858: CALL_OW 308
76862: NOT
76863: AND
76864: IFFALSE 76868
// exit ;
76866: GO 76986
// if IsInArea ( unit , area ) then
76868: LD_VAR 0 1
76872: PPUSH
76873: LD_VAR 0 2
76877: PPUSH
76878: CALL_OW 308
76882: IFFALSE 76900
// begin ComMoveToArea ( unit , goAway ) ;
76884: LD_VAR 0 1
76888: PPUSH
76889: LD_VAR 0 3
76893: PPUSH
76894: CALL_OW 113
// exit ;
76898: GO 76986
// end ; if task [ 1 ] [ 1 ] <> M then
76900: LD_VAR 0 7
76904: PUSH
76905: LD_INT 1
76907: ARRAY
76908: PUSH
76909: LD_INT 1
76911: ARRAY
76912: PUSH
76913: LD_STRING M
76915: NONEQUAL
76916: IFFALSE 76920
// exit ;
76918: GO 76986
// x := task [ 1 ] [ 2 ] ;
76920: LD_ADDR_VAR 0 5
76924: PUSH
76925: LD_VAR 0 7
76929: PUSH
76930: LD_INT 1
76932: ARRAY
76933: PUSH
76934: LD_INT 2
76936: ARRAY
76937: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76938: LD_ADDR_VAR 0 6
76942: PUSH
76943: LD_VAR 0 7
76947: PUSH
76948: LD_INT 1
76950: ARRAY
76951: PUSH
76952: LD_INT 3
76954: ARRAY
76955: ST_TO_ADDR
// if InArea ( x , y , area ) then
76956: LD_VAR 0 5
76960: PPUSH
76961: LD_VAR 0 6
76965: PPUSH
76966: LD_VAR 0 2
76970: PPUSH
76971: CALL_OW 309
76975: IFFALSE 76986
// ComStop ( unit ) ;
76977: LD_VAR 0 1
76981: PPUSH
76982: CALL_OW 141
// end ;
76986: LD_VAR 0 4
76990: RET
// export function Abs ( value ) ; begin
76991: LD_INT 0
76993: PPUSH
// result := value ;
76994: LD_ADDR_VAR 0 2
76998: PUSH
76999: LD_VAR 0 1
77003: ST_TO_ADDR
// if value < 0 then
77004: LD_VAR 0 1
77008: PUSH
77009: LD_INT 0
77011: LESS
77012: IFFALSE 77029
// result := value * - 1 ;
77014: LD_ADDR_VAR 0 2
77018: PUSH
77019: LD_VAR 0 1
77023: PUSH
77024: LD_INT 1
77026: NEG
77027: MUL
77028: ST_TO_ADDR
// end ;
77029: LD_VAR 0 2
77033: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77034: LD_INT 0
77036: PPUSH
77037: PPUSH
77038: PPUSH
77039: PPUSH
77040: PPUSH
77041: PPUSH
77042: PPUSH
77043: PPUSH
// if not unit or not building then
77044: LD_VAR 0 1
77048: NOT
77049: PUSH
77050: LD_VAR 0 2
77054: NOT
77055: OR
77056: IFFALSE 77060
// exit ;
77058: GO 77286
// x := GetX ( building ) ;
77060: LD_ADDR_VAR 0 4
77064: PUSH
77065: LD_VAR 0 2
77069: PPUSH
77070: CALL_OW 250
77074: ST_TO_ADDR
// y := GetY ( building ) ;
77075: LD_ADDR_VAR 0 6
77079: PUSH
77080: LD_VAR 0 2
77084: PPUSH
77085: CALL_OW 251
77089: ST_TO_ADDR
// d := GetDir ( building ) ;
77090: LD_ADDR_VAR 0 8
77094: PUSH
77095: LD_VAR 0 2
77099: PPUSH
77100: CALL_OW 254
77104: ST_TO_ADDR
// r := 4 ;
77105: LD_ADDR_VAR 0 9
77109: PUSH
77110: LD_INT 4
77112: ST_TO_ADDR
// for i := 1 to 5 do
77113: LD_ADDR_VAR 0 10
77117: PUSH
77118: DOUBLE
77119: LD_INT 1
77121: DEC
77122: ST_TO_ADDR
77123: LD_INT 5
77125: PUSH
77126: FOR_TO
77127: IFFALSE 77284
// begin _x := ShiftX ( x , d , r + i ) ;
77129: LD_ADDR_VAR 0 5
77133: PUSH
77134: LD_VAR 0 4
77138: PPUSH
77139: LD_VAR 0 8
77143: PPUSH
77144: LD_VAR 0 9
77148: PUSH
77149: LD_VAR 0 10
77153: PLUS
77154: PPUSH
77155: CALL_OW 272
77159: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77160: LD_ADDR_VAR 0 7
77164: PUSH
77165: LD_VAR 0 6
77169: PPUSH
77170: LD_VAR 0 8
77174: PPUSH
77175: LD_VAR 0 9
77179: PUSH
77180: LD_VAR 0 10
77184: PLUS
77185: PPUSH
77186: CALL_OW 273
77190: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77191: LD_VAR 0 5
77195: PPUSH
77196: LD_VAR 0 7
77200: PPUSH
77201: CALL_OW 488
77205: PUSH
77206: LD_VAR 0 5
77210: PPUSH
77211: LD_VAR 0 7
77215: PPUSH
77216: CALL_OW 428
77220: PPUSH
77221: CALL_OW 247
77225: PUSH
77226: LD_INT 3
77228: PUSH
77229: LD_INT 2
77231: PUSH
77232: EMPTY
77233: LIST
77234: LIST
77235: IN
77236: NOT
77237: AND
77238: IFFALSE 77282
// begin ComMoveXY ( unit , _x , _y ) ;
77240: LD_VAR 0 1
77244: PPUSH
77245: LD_VAR 0 5
77249: PPUSH
77250: LD_VAR 0 7
77254: PPUSH
77255: CALL_OW 111
// result := [ _x , _y ] ;
77259: LD_ADDR_VAR 0 3
77263: PUSH
77264: LD_VAR 0 5
77268: PUSH
77269: LD_VAR 0 7
77273: PUSH
77274: EMPTY
77275: LIST
77276: LIST
77277: ST_TO_ADDR
// exit ;
77278: POP
77279: POP
77280: GO 77286
// end ; end ;
77282: GO 77126
77284: POP
77285: POP
// end ;
77286: LD_VAR 0 3
77290: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77291: LD_INT 0
77293: PPUSH
77294: PPUSH
77295: PPUSH
// result := 0 ;
77296: LD_ADDR_VAR 0 3
77300: PUSH
77301: LD_INT 0
77303: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77304: LD_VAR 0 1
77308: PUSH
77309: LD_INT 0
77311: LESS
77312: PUSH
77313: LD_VAR 0 1
77317: PUSH
77318: LD_INT 8
77320: GREATER
77321: OR
77322: PUSH
77323: LD_VAR 0 2
77327: PUSH
77328: LD_INT 0
77330: LESS
77331: OR
77332: PUSH
77333: LD_VAR 0 2
77337: PUSH
77338: LD_INT 8
77340: GREATER
77341: OR
77342: IFFALSE 77346
// exit ;
77344: GO 77421
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77346: LD_ADDR_VAR 0 4
77350: PUSH
77351: LD_INT 22
77353: PUSH
77354: LD_VAR 0 2
77358: PUSH
77359: EMPTY
77360: LIST
77361: LIST
77362: PPUSH
77363: CALL_OW 69
77367: PUSH
77368: FOR_IN
77369: IFFALSE 77419
// begin un := UnitShoot ( i ) ;
77371: LD_ADDR_VAR 0 5
77375: PUSH
77376: LD_VAR 0 4
77380: PPUSH
77381: CALL_OW 504
77385: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77386: LD_VAR 0 5
77390: PPUSH
77391: CALL_OW 255
77395: PUSH
77396: LD_VAR 0 1
77400: EQUAL
77401: IFFALSE 77417
// begin result := un ;
77403: LD_ADDR_VAR 0 3
77407: PUSH
77408: LD_VAR 0 5
77412: ST_TO_ADDR
// exit ;
77413: POP
77414: POP
77415: GO 77421
// end ; end ;
77417: GO 77368
77419: POP
77420: POP
// end ;
77421: LD_VAR 0 3
77425: RET
// export function GetCargoBay ( units ) ; begin
77426: LD_INT 0
77428: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77429: LD_ADDR_VAR 0 2
77433: PUSH
77434: LD_VAR 0 1
77438: PPUSH
77439: LD_INT 2
77441: PUSH
77442: LD_INT 34
77444: PUSH
77445: LD_INT 12
77447: PUSH
77448: EMPTY
77449: LIST
77450: LIST
77451: PUSH
77452: LD_INT 34
77454: PUSH
77455: LD_INT 51
77457: PUSH
77458: EMPTY
77459: LIST
77460: LIST
77461: PUSH
77462: LD_INT 34
77464: PUSH
77465: LD_INT 32
77467: PUSH
77468: EMPTY
77469: LIST
77470: LIST
77471: PUSH
77472: LD_INT 34
77474: PUSH
77475: LD_INT 89
77477: PUSH
77478: EMPTY
77479: LIST
77480: LIST
77481: PUSH
77482: EMPTY
77483: LIST
77484: LIST
77485: LIST
77486: LIST
77487: LIST
77488: PPUSH
77489: CALL_OW 72
77493: ST_TO_ADDR
// end ;
77494: LD_VAR 0 2
77498: RET
// export function Negate ( value ) ; begin
77499: LD_INT 0
77501: PPUSH
// result := not value ;
77502: LD_ADDR_VAR 0 2
77506: PUSH
77507: LD_VAR 0 1
77511: NOT
77512: ST_TO_ADDR
// end ;
77513: LD_VAR 0 2
77517: RET
// export function Inc ( value ) ; begin
77518: LD_INT 0
77520: PPUSH
// result := value + 1 ;
77521: LD_ADDR_VAR 0 2
77525: PUSH
77526: LD_VAR 0 1
77530: PUSH
77531: LD_INT 1
77533: PLUS
77534: ST_TO_ADDR
// end ;
77535: LD_VAR 0 2
77539: RET
// export function Dec ( value ) ; begin
77540: LD_INT 0
77542: PPUSH
// result := value - 1 ;
77543: LD_ADDR_VAR 0 2
77547: PUSH
77548: LD_VAR 0 1
77552: PUSH
77553: LD_INT 1
77555: MINUS
77556: ST_TO_ADDR
// end ;
77557: LD_VAR 0 2
77561: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77562: LD_INT 0
77564: PPUSH
77565: PPUSH
77566: PPUSH
77567: PPUSH
77568: PPUSH
77569: PPUSH
77570: PPUSH
77571: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77572: LD_VAR 0 1
77576: PPUSH
77577: LD_VAR 0 2
77581: PPUSH
77582: CALL_OW 488
77586: NOT
77587: PUSH
77588: LD_VAR 0 3
77592: PPUSH
77593: LD_VAR 0 4
77597: PPUSH
77598: CALL_OW 488
77602: NOT
77603: OR
77604: IFFALSE 77617
// begin result := - 1 ;
77606: LD_ADDR_VAR 0 5
77610: PUSH
77611: LD_INT 1
77613: NEG
77614: ST_TO_ADDR
// exit ;
77615: GO 77852
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
77617: LD_ADDR_VAR 0 12
77621: PUSH
77622: LD_VAR 0 1
77626: PPUSH
77627: LD_VAR 0 2
77631: PPUSH
77632: LD_VAR 0 3
77636: PPUSH
77637: LD_VAR 0 4
77641: PPUSH
77642: CALL 76702 0 4
77646: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
77647: LD_ADDR_VAR 0 11
77651: PUSH
77652: LD_VAR 0 1
77656: PPUSH
77657: LD_VAR 0 2
77661: PPUSH
77662: LD_VAR 0 12
77666: PUSH
77667: LD_INT 1
77669: ARRAY
77670: PPUSH
77671: LD_VAR 0 12
77675: PUSH
77676: LD_INT 2
77678: ARRAY
77679: PPUSH
77680: CALL_OW 298
77684: ST_TO_ADDR
// distance := 9999 ;
77685: LD_ADDR_VAR 0 10
77689: PUSH
77690: LD_INT 9999
77692: ST_TO_ADDR
// for i := 0 to 5 do
77693: LD_ADDR_VAR 0 6
77697: PUSH
77698: DOUBLE
77699: LD_INT 0
77701: DEC
77702: ST_TO_ADDR
77703: LD_INT 5
77705: PUSH
77706: FOR_TO
77707: IFFALSE 77850
// begin _x := ShiftX ( x1 , i , centerDist ) ;
77709: LD_ADDR_VAR 0 7
77713: PUSH
77714: LD_VAR 0 1
77718: PPUSH
77719: LD_VAR 0 6
77723: PPUSH
77724: LD_VAR 0 11
77728: PPUSH
77729: CALL_OW 272
77733: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
77734: LD_ADDR_VAR 0 8
77738: PUSH
77739: LD_VAR 0 2
77743: PPUSH
77744: LD_VAR 0 6
77748: PPUSH
77749: LD_VAR 0 11
77753: PPUSH
77754: CALL_OW 273
77758: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77759: LD_VAR 0 7
77763: PPUSH
77764: LD_VAR 0 8
77768: PPUSH
77769: CALL_OW 488
77773: NOT
77774: IFFALSE 77778
// continue ;
77776: GO 77706
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
77778: LD_ADDR_VAR 0 9
77782: PUSH
77783: LD_VAR 0 12
77787: PUSH
77788: LD_INT 1
77790: ARRAY
77791: PPUSH
77792: LD_VAR 0 12
77796: PUSH
77797: LD_INT 2
77799: ARRAY
77800: PPUSH
77801: LD_VAR 0 7
77805: PPUSH
77806: LD_VAR 0 8
77810: PPUSH
77811: CALL_OW 298
77815: ST_TO_ADDR
// if tmp < distance then
77816: LD_VAR 0 9
77820: PUSH
77821: LD_VAR 0 10
77825: LESS
77826: IFFALSE 77848
// begin result := i ;
77828: LD_ADDR_VAR 0 5
77832: PUSH
77833: LD_VAR 0 6
77837: ST_TO_ADDR
// distance := tmp ;
77838: LD_ADDR_VAR 0 10
77842: PUSH
77843: LD_VAR 0 9
77847: ST_TO_ADDR
// end ; end ;
77848: GO 77706
77850: POP
77851: POP
// end ;
77852: LD_VAR 0 5
77856: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77857: LD_INT 0
77859: PPUSH
77860: PPUSH
// if not driver or not IsInUnit ( driver ) then
77861: LD_VAR 0 1
77865: NOT
77866: PUSH
77867: LD_VAR 0 1
77871: PPUSH
77872: CALL_OW 310
77876: NOT
77877: OR
77878: IFFALSE 77882
// exit ;
77880: GO 77972
// vehicle := IsInUnit ( driver ) ;
77882: LD_ADDR_VAR 0 3
77886: PUSH
77887: LD_VAR 0 1
77891: PPUSH
77892: CALL_OW 310
77896: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77897: LD_VAR 0 1
77901: PPUSH
77902: LD_STRING \
77904: PUSH
77905: LD_INT 0
77907: PUSH
77908: LD_INT 0
77910: PUSH
77911: LD_INT 0
77913: PUSH
77914: LD_INT 0
77916: PUSH
77917: LD_INT 0
77919: PUSH
77920: LD_INT 0
77922: PUSH
77923: EMPTY
77924: LIST
77925: LIST
77926: LIST
77927: LIST
77928: LIST
77929: LIST
77930: LIST
77931: PUSH
77932: LD_STRING E
77934: PUSH
77935: LD_INT 0
77937: PUSH
77938: LD_INT 0
77940: PUSH
77941: LD_VAR 0 3
77945: PUSH
77946: LD_INT 0
77948: PUSH
77949: LD_INT 0
77951: PUSH
77952: LD_INT 0
77954: PUSH
77955: EMPTY
77956: LIST
77957: LIST
77958: LIST
77959: LIST
77960: LIST
77961: LIST
77962: LIST
77963: PUSH
77964: EMPTY
77965: LIST
77966: LIST
77967: PPUSH
77968: CALL_OW 446
// end ;
77972: LD_VAR 0 2
77976: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77977: LD_INT 0
77979: PPUSH
77980: PPUSH
// if not driver or not IsInUnit ( driver ) then
77981: LD_VAR 0 1
77985: NOT
77986: PUSH
77987: LD_VAR 0 1
77991: PPUSH
77992: CALL_OW 310
77996: NOT
77997: OR
77998: IFFALSE 78002
// exit ;
78000: GO 78092
// vehicle := IsInUnit ( driver ) ;
78002: LD_ADDR_VAR 0 3
78006: PUSH
78007: LD_VAR 0 1
78011: PPUSH
78012: CALL_OW 310
78016: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78017: LD_VAR 0 1
78021: PPUSH
78022: LD_STRING \
78024: PUSH
78025: LD_INT 0
78027: PUSH
78028: LD_INT 0
78030: PUSH
78031: LD_INT 0
78033: PUSH
78034: LD_INT 0
78036: PUSH
78037: LD_INT 0
78039: PUSH
78040: LD_INT 0
78042: PUSH
78043: EMPTY
78044: LIST
78045: LIST
78046: LIST
78047: LIST
78048: LIST
78049: LIST
78050: LIST
78051: PUSH
78052: LD_STRING E
78054: PUSH
78055: LD_INT 0
78057: PUSH
78058: LD_INT 0
78060: PUSH
78061: LD_VAR 0 3
78065: PUSH
78066: LD_INT 0
78068: PUSH
78069: LD_INT 0
78071: PUSH
78072: LD_INT 0
78074: PUSH
78075: EMPTY
78076: LIST
78077: LIST
78078: LIST
78079: LIST
78080: LIST
78081: LIST
78082: LIST
78083: PUSH
78084: EMPTY
78085: LIST
78086: LIST
78087: PPUSH
78088: CALL_OW 447
// end ;
78092: LD_VAR 0 2
78096: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78097: LD_INT 0
78099: PPUSH
78100: PPUSH
78101: PPUSH
// tmp := [ ] ;
78102: LD_ADDR_VAR 0 5
78106: PUSH
78107: EMPTY
78108: ST_TO_ADDR
// for i in units do
78109: LD_ADDR_VAR 0 4
78113: PUSH
78114: LD_VAR 0 1
78118: PUSH
78119: FOR_IN
78120: IFFALSE 78158
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78122: LD_ADDR_VAR 0 5
78126: PUSH
78127: LD_VAR 0 5
78131: PPUSH
78132: LD_VAR 0 5
78136: PUSH
78137: LD_INT 1
78139: PLUS
78140: PPUSH
78141: LD_VAR 0 4
78145: PPUSH
78146: CALL_OW 256
78150: PPUSH
78151: CALL_OW 2
78155: ST_TO_ADDR
78156: GO 78119
78158: POP
78159: POP
// if not tmp then
78160: LD_VAR 0 5
78164: NOT
78165: IFFALSE 78169
// exit ;
78167: GO 78217
// if asc then
78169: LD_VAR 0 2
78173: IFFALSE 78197
// result := SortListByListAsc ( units , tmp ) else
78175: LD_ADDR_VAR 0 3
78179: PUSH
78180: LD_VAR 0 1
78184: PPUSH
78185: LD_VAR 0 5
78189: PPUSH
78190: CALL_OW 76
78194: ST_TO_ADDR
78195: GO 78217
// result := SortListByListDesc ( units , tmp ) ;
78197: LD_ADDR_VAR 0 3
78201: PUSH
78202: LD_VAR 0 1
78206: PPUSH
78207: LD_VAR 0 5
78211: PPUSH
78212: CALL_OW 77
78216: ST_TO_ADDR
// end ;
78217: LD_VAR 0 3
78221: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78222: LD_INT 0
78224: PPUSH
78225: PPUSH
// task := GetTaskList ( mech ) ;
78226: LD_ADDR_VAR 0 4
78230: PUSH
78231: LD_VAR 0 1
78235: PPUSH
78236: CALL_OW 437
78240: ST_TO_ADDR
// if not task then
78241: LD_VAR 0 4
78245: NOT
78246: IFFALSE 78250
// exit ;
78248: GO 78292
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78250: LD_ADDR_VAR 0 3
78254: PUSH
78255: LD_VAR 0 4
78259: PUSH
78260: LD_INT 1
78262: ARRAY
78263: PUSH
78264: LD_INT 1
78266: ARRAY
78267: PUSH
78268: LD_STRING r
78270: EQUAL
78271: PUSH
78272: LD_VAR 0 4
78276: PUSH
78277: LD_INT 1
78279: ARRAY
78280: PUSH
78281: LD_INT 4
78283: ARRAY
78284: PUSH
78285: LD_VAR 0 2
78289: EQUAL
78290: AND
78291: ST_TO_ADDR
// end ;
78292: LD_VAR 0 3
78296: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78297: LD_INT 0
78299: PPUSH
// SetDir ( unit , d ) ;
78300: LD_VAR 0 1
78304: PPUSH
78305: LD_VAR 0 4
78309: PPUSH
78310: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
78314: LD_VAR 0 1
78318: PPUSH
78319: LD_VAR 0 2
78323: PPUSH
78324: LD_VAR 0 3
78328: PPUSH
78329: LD_VAR 0 5
78333: PPUSH
78334: CALL_OW 48
// end ;
78338: LD_VAR 0 6
78342: RET
// export function ToNaturalNumber ( number ) ; begin
78343: LD_INT 0
78345: PPUSH
// result := number div 1 ;
78346: LD_ADDR_VAR 0 2
78350: PUSH
78351: LD_VAR 0 1
78355: PUSH
78356: LD_INT 1
78358: DIV
78359: ST_TO_ADDR
// if number < 0 then
78360: LD_VAR 0 1
78364: PUSH
78365: LD_INT 0
78367: LESS
78368: IFFALSE 78378
// result := 0 ;
78370: LD_ADDR_VAR 0 2
78374: PUSH
78375: LD_INT 0
78377: ST_TO_ADDR
// end ;
78378: LD_VAR 0 2
78382: RET
// export function SortByClass ( units , class ) ; var un ; begin
78383: LD_INT 0
78385: PPUSH
78386: PPUSH
// if not units or not class then
78387: LD_VAR 0 1
78391: NOT
78392: PUSH
78393: LD_VAR 0 2
78397: NOT
78398: OR
78399: IFFALSE 78403
// exit ;
78401: GO 78498
// result := [ ] ;
78403: LD_ADDR_VAR 0 3
78407: PUSH
78408: EMPTY
78409: ST_TO_ADDR
// for un in units do
78410: LD_ADDR_VAR 0 4
78414: PUSH
78415: LD_VAR 0 1
78419: PUSH
78420: FOR_IN
78421: IFFALSE 78496
// if GetClass ( un ) = class then
78423: LD_VAR 0 4
78427: PPUSH
78428: CALL_OW 257
78432: PUSH
78433: LD_VAR 0 2
78437: EQUAL
78438: IFFALSE 78465
// result := Insert ( result , 1 , un ) else
78440: LD_ADDR_VAR 0 3
78444: PUSH
78445: LD_VAR 0 3
78449: PPUSH
78450: LD_INT 1
78452: PPUSH
78453: LD_VAR 0 4
78457: PPUSH
78458: CALL_OW 2
78462: ST_TO_ADDR
78463: GO 78494
// result := Replace ( result , result + 1 , un ) ;
78465: LD_ADDR_VAR 0 3
78469: PUSH
78470: LD_VAR 0 3
78474: PPUSH
78475: LD_VAR 0 3
78479: PUSH
78480: LD_INT 1
78482: PLUS
78483: PPUSH
78484: LD_VAR 0 4
78488: PPUSH
78489: CALL_OW 1
78493: ST_TO_ADDR
78494: GO 78420
78496: POP
78497: POP
// end ;
78498: LD_VAR 0 3
78502: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78503: LD_INT 0
78505: PPUSH
78506: PPUSH
78507: PPUSH
78508: PPUSH
78509: PPUSH
78510: PPUSH
78511: PPUSH
// result := [ ] ;
78512: LD_ADDR_VAR 0 4
78516: PUSH
78517: EMPTY
78518: ST_TO_ADDR
// if x - r < 0 then
78519: LD_VAR 0 1
78523: PUSH
78524: LD_VAR 0 3
78528: MINUS
78529: PUSH
78530: LD_INT 0
78532: LESS
78533: IFFALSE 78545
// min_x := 0 else
78535: LD_ADDR_VAR 0 8
78539: PUSH
78540: LD_INT 0
78542: ST_TO_ADDR
78543: GO 78561
// min_x := x - r ;
78545: LD_ADDR_VAR 0 8
78549: PUSH
78550: LD_VAR 0 1
78554: PUSH
78555: LD_VAR 0 3
78559: MINUS
78560: ST_TO_ADDR
// if y - r < 0 then
78561: LD_VAR 0 2
78565: PUSH
78566: LD_VAR 0 3
78570: MINUS
78571: PUSH
78572: LD_INT 0
78574: LESS
78575: IFFALSE 78587
// min_y := 0 else
78577: LD_ADDR_VAR 0 7
78581: PUSH
78582: LD_INT 0
78584: ST_TO_ADDR
78585: GO 78603
// min_y := y - r ;
78587: LD_ADDR_VAR 0 7
78591: PUSH
78592: LD_VAR 0 2
78596: PUSH
78597: LD_VAR 0 3
78601: MINUS
78602: ST_TO_ADDR
// max_x := x + r ;
78603: LD_ADDR_VAR 0 9
78607: PUSH
78608: LD_VAR 0 1
78612: PUSH
78613: LD_VAR 0 3
78617: PLUS
78618: ST_TO_ADDR
// max_y := y + r ;
78619: LD_ADDR_VAR 0 10
78623: PUSH
78624: LD_VAR 0 2
78628: PUSH
78629: LD_VAR 0 3
78633: PLUS
78634: ST_TO_ADDR
// for _x = min_x to max_x do
78635: LD_ADDR_VAR 0 5
78639: PUSH
78640: DOUBLE
78641: LD_VAR 0 8
78645: DEC
78646: ST_TO_ADDR
78647: LD_VAR 0 9
78651: PUSH
78652: FOR_TO
78653: IFFALSE 78754
// for _y = min_y to max_y do
78655: LD_ADDR_VAR 0 6
78659: PUSH
78660: DOUBLE
78661: LD_VAR 0 7
78665: DEC
78666: ST_TO_ADDR
78667: LD_VAR 0 10
78671: PUSH
78672: FOR_TO
78673: IFFALSE 78750
// begin if not ValidHex ( _x , _y ) then
78675: LD_VAR 0 5
78679: PPUSH
78680: LD_VAR 0 6
78684: PPUSH
78685: CALL_OW 488
78689: NOT
78690: IFFALSE 78694
// continue ;
78692: GO 78672
// if GetResourceTypeXY ( _x , _y ) then
78694: LD_VAR 0 5
78698: PPUSH
78699: LD_VAR 0 6
78703: PPUSH
78704: CALL_OW 283
78708: IFFALSE 78748
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
78710: LD_ADDR_VAR 0 4
78714: PUSH
78715: LD_VAR 0 4
78719: PPUSH
78720: LD_VAR 0 4
78724: PUSH
78725: LD_INT 1
78727: PLUS
78728: PPUSH
78729: LD_VAR 0 5
78733: PUSH
78734: LD_VAR 0 6
78738: PUSH
78739: EMPTY
78740: LIST
78741: LIST
78742: PPUSH
78743: CALL_OW 1
78747: ST_TO_ADDR
// end ;
78748: GO 78672
78750: POP
78751: POP
78752: GO 78652
78754: POP
78755: POP
// end ;
78756: LD_VAR 0 4
78760: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
78761: LD_INT 0
78763: PPUSH
78764: PPUSH
78765: PPUSH
78766: PPUSH
78767: PPUSH
78768: PPUSH
78769: PPUSH
78770: PPUSH
// if not units then
78771: LD_VAR 0 1
78775: NOT
78776: IFFALSE 78780
// exit ;
78778: GO 79304
// result := UnitFilter ( units , [ f_ok ] ) ;
78780: LD_ADDR_VAR 0 3
78784: PUSH
78785: LD_VAR 0 1
78789: PPUSH
78790: LD_INT 50
78792: PUSH
78793: EMPTY
78794: LIST
78795: PPUSH
78796: CALL_OW 72
78800: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
78801: LD_ADDR_VAR 0 8
78805: PUSH
78806: LD_VAR 0 1
78810: PUSH
78811: LD_INT 1
78813: ARRAY
78814: PPUSH
78815: CALL_OW 255
78819: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
78820: LD_ADDR_VAR 0 10
78824: PUSH
78825: LD_INT 29
78827: PUSH
78828: LD_INT 91
78830: PUSH
78831: LD_INT 49
78833: PUSH
78834: EMPTY
78835: LIST
78836: LIST
78837: LIST
78838: ST_TO_ADDR
// if not result then
78839: LD_VAR 0 3
78843: NOT
78844: IFFALSE 78848
// exit ;
78846: GO 79304
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
78848: LD_ADDR_VAR 0 5
78852: PUSH
78853: LD_INT 81
78855: PUSH
78856: LD_VAR 0 8
78860: PUSH
78861: EMPTY
78862: LIST
78863: LIST
78864: PPUSH
78865: CALL_OW 69
78869: ST_TO_ADDR
// for i in result do
78870: LD_ADDR_VAR 0 4
78874: PUSH
78875: LD_VAR 0 3
78879: PUSH
78880: FOR_IN
78881: IFFALSE 79302
// begin tag := GetTag ( i ) + 1 ;
78883: LD_ADDR_VAR 0 9
78887: PUSH
78888: LD_VAR 0 4
78892: PPUSH
78893: CALL_OW 110
78897: PUSH
78898: LD_INT 1
78900: PLUS
78901: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
78902: LD_ADDR_VAR 0 7
78906: PUSH
78907: LD_VAR 0 4
78911: PPUSH
78912: CALL_OW 250
78916: PPUSH
78917: LD_VAR 0 4
78921: PPUSH
78922: CALL_OW 251
78926: PPUSH
78927: LD_INT 6
78929: PPUSH
78930: CALL 78503 0 3
78934: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
78935: LD_VAR 0 4
78939: PPUSH
78940: CALL_OW 247
78944: PUSH
78945: LD_INT 2
78947: EQUAL
78948: PUSH
78949: LD_VAR 0 7
78953: AND
78954: PUSH
78955: LD_VAR 0 4
78959: PPUSH
78960: CALL_OW 264
78964: PUSH
78965: LD_VAR 0 10
78969: IN
78970: NOT
78971: AND
78972: IFFALSE 79011
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
78974: LD_VAR 0 4
78978: PPUSH
78979: LD_VAR 0 7
78983: PUSH
78984: LD_INT 1
78986: ARRAY
78987: PUSH
78988: LD_INT 1
78990: ARRAY
78991: PPUSH
78992: LD_VAR 0 7
78996: PUSH
78997: LD_INT 1
78999: ARRAY
79000: PUSH
79001: LD_INT 2
79003: ARRAY
79004: PPUSH
79005: CALL_OW 116
79009: GO 79300
// if path > tag then
79011: LD_VAR 0 2
79015: PUSH
79016: LD_VAR 0 9
79020: GREATER
79021: IFFALSE 79229
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79023: LD_ADDR_VAR 0 6
79027: PUSH
79028: LD_VAR 0 5
79032: PPUSH
79033: LD_INT 91
79035: PUSH
79036: LD_VAR 0 4
79040: PUSH
79041: LD_INT 8
79043: PUSH
79044: EMPTY
79045: LIST
79046: LIST
79047: LIST
79048: PPUSH
79049: CALL_OW 72
79053: ST_TO_ADDR
// if nearEnemy then
79054: LD_VAR 0 6
79058: IFFALSE 79127
// begin if GetWeapon ( i ) = ru_time_lapser then
79060: LD_VAR 0 4
79064: PPUSH
79065: CALL_OW 264
79069: PUSH
79070: LD_INT 49
79072: EQUAL
79073: IFFALSE 79101
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79075: LD_VAR 0 4
79079: PPUSH
79080: LD_VAR 0 6
79084: PPUSH
79085: LD_VAR 0 4
79089: PPUSH
79090: CALL_OW 74
79094: PPUSH
79095: CALL_OW 112
79099: GO 79125
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79101: LD_VAR 0 4
79105: PPUSH
79106: LD_VAR 0 6
79110: PPUSH
79111: LD_VAR 0 4
79115: PPUSH
79116: CALL_OW 74
79120: PPUSH
79121: CALL 80229 0 2
// end else
79125: GO 79227
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79127: LD_VAR 0 4
79131: PPUSH
79132: LD_VAR 0 2
79136: PUSH
79137: LD_VAR 0 9
79141: ARRAY
79142: PUSH
79143: LD_INT 1
79145: ARRAY
79146: PPUSH
79147: LD_VAR 0 2
79151: PUSH
79152: LD_VAR 0 9
79156: ARRAY
79157: PUSH
79158: LD_INT 2
79160: ARRAY
79161: PPUSH
79162: CALL_OW 297
79166: PUSH
79167: LD_INT 6
79169: GREATER
79170: IFFALSE 79213
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79172: LD_VAR 0 4
79176: PPUSH
79177: LD_VAR 0 2
79181: PUSH
79182: LD_VAR 0 9
79186: ARRAY
79187: PUSH
79188: LD_INT 1
79190: ARRAY
79191: PPUSH
79192: LD_VAR 0 2
79196: PUSH
79197: LD_VAR 0 9
79201: ARRAY
79202: PUSH
79203: LD_INT 2
79205: ARRAY
79206: PPUSH
79207: CALL_OW 114
79211: GO 79227
// SetTag ( i , tag ) ;
79213: LD_VAR 0 4
79217: PPUSH
79218: LD_VAR 0 9
79222: PPUSH
79223: CALL_OW 109
// end else
79227: GO 79300
// if enemy then
79229: LD_VAR 0 5
79233: IFFALSE 79300
// begin if GetWeapon ( i ) = ru_time_lapser then
79235: LD_VAR 0 4
79239: PPUSH
79240: CALL_OW 264
79244: PUSH
79245: LD_INT 49
79247: EQUAL
79248: IFFALSE 79276
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79250: LD_VAR 0 4
79254: PPUSH
79255: LD_VAR 0 5
79259: PPUSH
79260: LD_VAR 0 4
79264: PPUSH
79265: CALL_OW 74
79269: PPUSH
79270: CALL_OW 112
79274: GO 79300
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79276: LD_VAR 0 4
79280: PPUSH
79281: LD_VAR 0 5
79285: PPUSH
79286: LD_VAR 0 4
79290: PPUSH
79291: CALL_OW 74
79295: PPUSH
79296: CALL 80229 0 2
// end ; end ;
79300: GO 78880
79302: POP
79303: POP
// end ;
79304: LD_VAR 0 3
79308: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79309: LD_INT 0
79311: PPUSH
79312: PPUSH
79313: PPUSH
// if not unit or IsInUnit ( unit ) then
79314: LD_VAR 0 1
79318: NOT
79319: PUSH
79320: LD_VAR 0 1
79324: PPUSH
79325: CALL_OW 310
79329: OR
79330: IFFALSE 79334
// exit ;
79332: GO 79425
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79334: LD_ADDR_VAR 0 4
79338: PUSH
79339: LD_VAR 0 1
79343: PPUSH
79344: CALL_OW 250
79348: PPUSH
79349: LD_VAR 0 2
79353: PPUSH
79354: LD_INT 1
79356: PPUSH
79357: CALL_OW 272
79361: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79362: LD_ADDR_VAR 0 5
79366: PUSH
79367: LD_VAR 0 1
79371: PPUSH
79372: CALL_OW 251
79376: PPUSH
79377: LD_VAR 0 2
79381: PPUSH
79382: LD_INT 1
79384: PPUSH
79385: CALL_OW 273
79389: ST_TO_ADDR
// if ValidHex ( x , y ) then
79390: LD_VAR 0 4
79394: PPUSH
79395: LD_VAR 0 5
79399: PPUSH
79400: CALL_OW 488
79404: IFFALSE 79425
// ComTurnXY ( unit , x , y ) ;
79406: LD_VAR 0 1
79410: PPUSH
79411: LD_VAR 0 4
79415: PPUSH
79416: LD_VAR 0 5
79420: PPUSH
79421: CALL_OW 118
// end ;
79425: LD_VAR 0 3
79429: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79430: LD_INT 0
79432: PPUSH
79433: PPUSH
// result := false ;
79434: LD_ADDR_VAR 0 3
79438: PUSH
79439: LD_INT 0
79441: ST_TO_ADDR
// if not units then
79442: LD_VAR 0 2
79446: NOT
79447: IFFALSE 79451
// exit ;
79449: GO 79496
// for i in units do
79451: LD_ADDR_VAR 0 4
79455: PUSH
79456: LD_VAR 0 2
79460: PUSH
79461: FOR_IN
79462: IFFALSE 79494
// if See ( side , i ) then
79464: LD_VAR 0 1
79468: PPUSH
79469: LD_VAR 0 4
79473: PPUSH
79474: CALL_OW 292
79478: IFFALSE 79492
// begin result := true ;
79480: LD_ADDR_VAR 0 3
79484: PUSH
79485: LD_INT 1
79487: ST_TO_ADDR
// exit ;
79488: POP
79489: POP
79490: GO 79496
// end ;
79492: GO 79461
79494: POP
79495: POP
// end ;
79496: LD_VAR 0 3
79500: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79501: LD_INT 0
79503: PPUSH
79504: PPUSH
79505: PPUSH
79506: PPUSH
// if not unit or not points then
79507: LD_VAR 0 1
79511: NOT
79512: PUSH
79513: LD_VAR 0 2
79517: NOT
79518: OR
79519: IFFALSE 79523
// exit ;
79521: GO 79613
// dist := 99999 ;
79523: LD_ADDR_VAR 0 5
79527: PUSH
79528: LD_INT 99999
79530: ST_TO_ADDR
// for i in points do
79531: LD_ADDR_VAR 0 4
79535: PUSH
79536: LD_VAR 0 2
79540: PUSH
79541: FOR_IN
79542: IFFALSE 79611
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79544: LD_ADDR_VAR 0 6
79548: PUSH
79549: LD_VAR 0 1
79553: PPUSH
79554: LD_VAR 0 4
79558: PUSH
79559: LD_INT 1
79561: ARRAY
79562: PPUSH
79563: LD_VAR 0 4
79567: PUSH
79568: LD_INT 2
79570: ARRAY
79571: PPUSH
79572: CALL_OW 297
79576: ST_TO_ADDR
// if tmpDist < dist then
79577: LD_VAR 0 6
79581: PUSH
79582: LD_VAR 0 5
79586: LESS
79587: IFFALSE 79609
// begin result := i ;
79589: LD_ADDR_VAR 0 3
79593: PUSH
79594: LD_VAR 0 4
79598: ST_TO_ADDR
// dist := tmpDist ;
79599: LD_ADDR_VAR 0 5
79603: PUSH
79604: LD_VAR 0 6
79608: ST_TO_ADDR
// end ; end ;
79609: GO 79541
79611: POP
79612: POP
// end ;
79613: LD_VAR 0 3
79617: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
79618: LD_INT 0
79620: PPUSH
// uc_side := side ;
79621: LD_ADDR_OWVAR 20
79625: PUSH
79626: LD_VAR 0 1
79630: ST_TO_ADDR
// uc_nation := 3 ;
79631: LD_ADDR_OWVAR 21
79635: PUSH
79636: LD_INT 3
79638: ST_TO_ADDR
// vc_chassis := 25 ;
79639: LD_ADDR_OWVAR 37
79643: PUSH
79644: LD_INT 25
79646: ST_TO_ADDR
// vc_engine := engine_siberite ;
79647: LD_ADDR_OWVAR 39
79651: PUSH
79652: LD_INT 3
79654: ST_TO_ADDR
// vc_control := control_computer ;
79655: LD_ADDR_OWVAR 38
79659: PUSH
79660: LD_INT 3
79662: ST_TO_ADDR
// vc_weapon := 59 ;
79663: LD_ADDR_OWVAR 40
79667: PUSH
79668: LD_INT 59
79670: ST_TO_ADDR
// result := CreateVehicle ;
79671: LD_ADDR_VAR 0 5
79675: PUSH
79676: CALL_OW 45
79680: ST_TO_ADDR
// SetDir ( result , d ) ;
79681: LD_VAR 0 5
79685: PPUSH
79686: LD_VAR 0 4
79690: PPUSH
79691: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
79695: LD_VAR 0 5
79699: PPUSH
79700: LD_VAR 0 2
79704: PPUSH
79705: LD_VAR 0 3
79709: PPUSH
79710: LD_INT 0
79712: PPUSH
79713: CALL_OW 48
// end ;
79717: LD_VAR 0 5
79721: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
79722: LD_INT 0
79724: PPUSH
79725: PPUSH
79726: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
79727: LD_ADDR_VAR 0 2
79731: PUSH
79732: LD_INT 0
79734: PUSH
79735: LD_INT 0
79737: PUSH
79738: LD_INT 0
79740: PUSH
79741: LD_INT 0
79743: PUSH
79744: EMPTY
79745: LIST
79746: LIST
79747: LIST
79748: LIST
79749: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
79750: LD_VAR 0 1
79754: NOT
79755: PUSH
79756: LD_VAR 0 1
79760: PPUSH
79761: CALL_OW 264
79765: PUSH
79766: LD_INT 12
79768: PUSH
79769: LD_INT 51
79771: PUSH
79772: LD_INT 32
79774: PUSH
79775: LD_INT 89
79777: PUSH
79778: EMPTY
79779: LIST
79780: LIST
79781: LIST
79782: LIST
79783: IN
79784: NOT
79785: OR
79786: IFFALSE 79790
// exit ;
79788: GO 79888
// for i := 1 to 3 do
79790: LD_ADDR_VAR 0 3
79794: PUSH
79795: DOUBLE
79796: LD_INT 1
79798: DEC
79799: ST_TO_ADDR
79800: LD_INT 3
79802: PUSH
79803: FOR_TO
79804: IFFALSE 79886
// begin tmp := GetCargo ( cargo , i ) ;
79806: LD_ADDR_VAR 0 4
79810: PUSH
79811: LD_VAR 0 1
79815: PPUSH
79816: LD_VAR 0 3
79820: PPUSH
79821: CALL_OW 289
79825: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
79826: LD_ADDR_VAR 0 2
79830: PUSH
79831: LD_VAR 0 2
79835: PPUSH
79836: LD_VAR 0 3
79840: PPUSH
79841: LD_VAR 0 4
79845: PPUSH
79846: CALL_OW 1
79850: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
79851: LD_ADDR_VAR 0 2
79855: PUSH
79856: LD_VAR 0 2
79860: PPUSH
79861: LD_INT 4
79863: PPUSH
79864: LD_VAR 0 2
79868: PUSH
79869: LD_INT 4
79871: ARRAY
79872: PUSH
79873: LD_VAR 0 4
79877: PLUS
79878: PPUSH
79879: CALL_OW 1
79883: ST_TO_ADDR
// end ;
79884: GO 79803
79886: POP
79887: POP
// end ;
79888: LD_VAR 0 2
79892: RET
// export function Length ( array ) ; begin
79893: LD_INT 0
79895: PPUSH
// result := array + 0 ;
79896: LD_ADDR_VAR 0 2
79900: PUSH
79901: LD_VAR 0 1
79905: PUSH
79906: LD_INT 0
79908: PLUS
79909: ST_TO_ADDR
// end ;
79910: LD_VAR 0 2
79914: RET
// export function PrepareArray ( array ) ; begin
79915: LD_INT 0
79917: PPUSH
// result := array diff 0 ;
79918: LD_ADDR_VAR 0 2
79922: PUSH
79923: LD_VAR 0 1
79927: PUSH
79928: LD_INT 0
79930: DIFF
79931: ST_TO_ADDR
// if not result [ 1 ] then
79932: LD_VAR 0 2
79936: PUSH
79937: LD_INT 1
79939: ARRAY
79940: NOT
79941: IFFALSE 79961
// result := Delete ( result , 1 ) ;
79943: LD_ADDR_VAR 0 2
79947: PUSH
79948: LD_VAR 0 2
79952: PPUSH
79953: LD_INT 1
79955: PPUSH
79956: CALL_OW 3
79960: ST_TO_ADDR
// end ;
79961: LD_VAR 0 2
79965: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
79966: LD_INT 0
79968: PPUSH
79969: PPUSH
79970: PPUSH
79971: PPUSH
// sibRocketRange := 25 ;
79972: LD_ADDR_VAR 0 6
79976: PUSH
79977: LD_INT 25
79979: ST_TO_ADDR
// result := false ;
79980: LD_ADDR_VAR 0 4
79984: PUSH
79985: LD_INT 0
79987: ST_TO_ADDR
// for i := 0 to 5 do
79988: LD_ADDR_VAR 0 5
79992: PUSH
79993: DOUBLE
79994: LD_INT 0
79996: DEC
79997: ST_TO_ADDR
79998: LD_INT 5
80000: PUSH
80001: FOR_TO
80002: IFFALSE 80069
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
80004: LD_VAR 0 1
80008: PPUSH
80009: LD_VAR 0 5
80013: PPUSH
80014: LD_VAR 0 6
80018: PPUSH
80019: CALL_OW 272
80023: PPUSH
80024: LD_VAR 0 2
80028: PPUSH
80029: LD_VAR 0 5
80033: PPUSH
80034: LD_VAR 0 6
80038: PPUSH
80039: CALL_OW 273
80043: PPUSH
80044: LD_VAR 0 3
80048: PPUSH
80049: CALL_OW 309
80053: IFFALSE 80067
// begin result := true ;
80055: LD_ADDR_VAR 0 4
80059: PUSH
80060: LD_INT 1
80062: ST_TO_ADDR
// exit ;
80063: POP
80064: POP
80065: GO 80071
// end ;
80067: GO 80001
80069: POP
80070: POP
// end ;
80071: LD_VAR 0 4
80075: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
80076: LD_INT 0
80078: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
80079: LD_VAR 0 1
80083: PPUSH
80084: LD_VAR 0 2
80088: PPUSH
80089: LD_INT 0
80091: PPUSH
80092: LD_INT 0
80094: PPUSH
80095: LD_INT 1
80097: PPUSH
80098: LD_INT 0
80100: PPUSH
80101: CALL_OW 587
// end ;
80105: LD_VAR 0 3
80109: RET
// export function CenterOnNow ( unit ) ; begin
80110: LD_INT 0
80112: PPUSH
// result := IsInUnit ( unit ) ;
80113: LD_ADDR_VAR 0 2
80117: PUSH
80118: LD_VAR 0 1
80122: PPUSH
80123: CALL_OW 310
80127: ST_TO_ADDR
// if not result then
80128: LD_VAR 0 2
80132: NOT
80133: IFFALSE 80145
// result := unit ;
80135: LD_ADDR_VAR 0 2
80139: PUSH
80140: LD_VAR 0 1
80144: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
80145: LD_VAR 0 1
80149: PPUSH
80150: CALL_OW 87
// end ;
80154: LD_VAR 0 2
80158: RET
// export function ComMoveHex ( unit , hex ) ; begin
80159: LD_INT 0
80161: PPUSH
// if not hex then
80162: LD_VAR 0 2
80166: NOT
80167: IFFALSE 80171
// exit ;
80169: GO 80224
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
80171: LD_VAR 0 2
80175: PUSH
80176: LD_INT 1
80178: ARRAY
80179: PPUSH
80180: LD_VAR 0 2
80184: PUSH
80185: LD_INT 2
80187: ARRAY
80188: PPUSH
80189: CALL_OW 428
80193: IFFALSE 80197
// exit ;
80195: GO 80224
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
80197: LD_VAR 0 1
80201: PPUSH
80202: LD_VAR 0 2
80206: PUSH
80207: LD_INT 1
80209: ARRAY
80210: PPUSH
80211: LD_VAR 0 2
80215: PUSH
80216: LD_INT 2
80218: ARRAY
80219: PPUSH
80220: CALL_OW 111
// end ;
80224: LD_VAR 0 3
80228: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
80229: LD_INT 0
80231: PPUSH
80232: PPUSH
80233: PPUSH
// if not unit or not enemy then
80234: LD_VAR 0 1
80238: NOT
80239: PUSH
80240: LD_VAR 0 2
80244: NOT
80245: OR
80246: IFFALSE 80250
// exit ;
80248: GO 80374
// x := GetX ( enemy ) ;
80250: LD_ADDR_VAR 0 4
80254: PUSH
80255: LD_VAR 0 2
80259: PPUSH
80260: CALL_OW 250
80264: ST_TO_ADDR
// y := GetY ( enemy ) ;
80265: LD_ADDR_VAR 0 5
80269: PUSH
80270: LD_VAR 0 2
80274: PPUSH
80275: CALL_OW 251
80279: ST_TO_ADDR
// if ValidHex ( x , y ) then
80280: LD_VAR 0 4
80284: PPUSH
80285: LD_VAR 0 5
80289: PPUSH
80290: CALL_OW 488
80294: IFFALSE 80374
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
80296: LD_VAR 0 2
80300: PPUSH
80301: CALL_OW 247
80305: PUSH
80306: LD_INT 3
80308: PUSH
80309: LD_INT 2
80311: PUSH
80312: EMPTY
80313: LIST
80314: LIST
80315: IN
80316: PUSH
80317: LD_VAR 0 1
80321: PPUSH
80322: CALL_OW 255
80326: PPUSH
80327: LD_VAR 0 2
80331: PPUSH
80332: CALL_OW 292
80336: AND
80337: IFFALSE 80355
// ComAttackUnit ( unit , enemy ) else
80339: LD_VAR 0 1
80343: PPUSH
80344: LD_VAR 0 2
80348: PPUSH
80349: CALL_OW 115
80353: GO 80374
// ComAgressiveMove ( unit , x , y ) ;
80355: LD_VAR 0 1
80359: PPUSH
80360: LD_VAR 0 4
80364: PPUSH
80365: LD_VAR 0 5
80369: PPUSH
80370: CALL_OW 114
// end ; end_of_file
80374: LD_VAR 0 3
80378: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
80379: LD_VAR 0 1
80383: PUSH
80384: LD_INT 200
80386: DOUBLE
80387: GREATEREQUAL
80388: IFFALSE 80396
80390: LD_INT 299
80392: DOUBLE
80393: LESSEQUAL
80394: IFTRUE 80398
80396: GO 80430
80398: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80399: LD_VAR 0 1
80403: PPUSH
80404: LD_VAR 0 2
80408: PPUSH
80409: LD_VAR 0 3
80413: PPUSH
80414: LD_VAR 0 4
80418: PPUSH
80419: LD_VAR 0 5
80423: PPUSH
80424: CALL 34923 0 5
80428: GO 80507
80430: LD_INT 300
80432: DOUBLE
80433: GREATEREQUAL
80434: IFFALSE 80442
80436: LD_INT 399
80438: DOUBLE
80439: LESSEQUAL
80440: IFTRUE 80444
80442: GO 80506
80444: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
80445: LD_VAR 0 1
80449: PPUSH
80450: LD_VAR 0 2
80454: PPUSH
80455: LD_VAR 0 3
80459: PPUSH
80460: LD_VAR 0 4
80464: PPUSH
80465: LD_VAR 0 5
80469: PPUSH
80470: LD_VAR 0 6
80474: PPUSH
80475: LD_VAR 0 7
80479: PPUSH
80480: LD_VAR 0 8
80484: PPUSH
80485: LD_VAR 0 9
80489: PPUSH
80490: LD_VAR 0 10
80494: PPUSH
80495: LD_VAR 0 11
80499: PPUSH
80500: CALL 31248 0 11
80504: GO 80507
80506: POP
// end ;
80507: PPOPN 11
80509: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
80510: LD_VAR 0 1
80514: PPUSH
80515: LD_VAR 0 2
80519: PPUSH
80520: LD_VAR 0 3
80524: PPUSH
80525: LD_VAR 0 4
80529: PPUSH
80530: LD_VAR 0 5
80534: PPUSH
80535: CALL 34659 0 5
// end ; end_of_file
80539: PPOPN 5
80541: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80542: LD_VAR 0 1
80546: PPUSH
80547: LD_VAR 0 2
80551: PPUSH
80552: LD_VAR 0 3
80556: PPUSH
80557: LD_VAR 0 4
80561: PPUSH
80562: LD_VAR 0 5
80566: PPUSH
80567: LD_VAR 0 6
80571: PPUSH
80572: CALL 18900 0 6
// end ;
80576: PPOPN 6
80578: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
80579: LD_INT 0
80581: PPUSH
// begin if not units then
80582: LD_VAR 0 1
80586: NOT
80587: IFFALSE 80591
// exit ;
80589: GO 80591
// end ;
80591: PPOPN 7
80593: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
80594: CALL 18804 0 0
// end ;
80598: PPOPN 1
80600: END
