// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 0 , 0 ) ;
   4: LD_INT 0
   6: PPUSH
   7: LD_INT 0
   9: PPUSH
  10: CALL_OW 86
// AnimateTrees ( true ) ;
  14: LD_INT 1
  16: PPUSH
  17: CALL_OW 573
// debug := 0 ;
  21: LD_ADDR_EXP 1
  25: PUSH
  26: LD_INT 0
  28: ST_TO_ADDR
// if debug then
  29: LD_EXP 1
  33: IFFALSE 55
// begin display_strings := Debug mode active! ;
  35: LD_ADDR_OWVAR 47
  39: PUSH
  40: LD_STRING Debug mode active!
  42: ST_TO_ADDR
// Your_Side := 1 ;
  43: LD_ADDR_OWVAR 2
  47: PUSH
  48: LD_INT 1
  50: ST_TO_ADDR
// TurnFogOff ;
  51: CALL_OW 537
// end ; Difficulty := GetMultiplayerSetting ( 0 ) ;
  55: LD_ADDR_OWVAR 67
  59: PUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 426
  67: ST_TO_ADDR
// if not Difficulty then
  68: LD_OWVAR 67
  72: NOT
  73: IFFALSE 83
// Difficulty := 2 ;
  75: LD_ADDR_OWVAR 67
  79: PUSH
  80: LD_INT 2
  82: ST_TO_ADDR
// depotConstructed := false ;
  83: LD_ADDR_EXP 2
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// PrepareTigers ( tiger_area ) ;
  91: LD_INT 8
  93: PPUSH
  94: CALL 10090 0 1
// PrepareApemans ( apeman_area ) ;
  98: LD_INT 9
 100: PPUSH
 101: CALL 10220 0 1
// PrepareRussian ;
 105: CALL 125 0 0
// PrepareAmerican ;
 109: CALL 11627 0 0
// if not debug then
 113: LD_EXP 1
 117: NOT
 118: IFFALSE 124
// Action ;
 120: CALL 13856 0 0
// end ;
 124: END
// export debug , depotConstructed ; end_of_file export ru_force , ru_group1 , ru_group2 , ru_tech_list , ru_towers_list , ru_weapon_list , ru_reserve , ru_attack_list ; export ru_lab_list , ru_heal_list , ru_blist , ru_buildings , ru_behemoth_mechanic , ru_spotted , ru_protector ; export need_buldozer , need_crane ; export function PrepareRussian ; var skill , i , un ; begin
 125: LD_INT 0
 127: PPUSH
 128: PPUSH
 129: PPUSH
 130: PPUSH
// uc_side := 3 ;
 131: LD_ADDR_OWVAR 20
 135: PUSH
 136: LD_INT 3
 138: ST_TO_ADDR
// uc_nation := nation_russian ;
 139: LD_ADDR_OWVAR 21
 143: PUSH
 144: LD_INT 3
 146: ST_TO_ADDR
// skill := [ 6 , 7 , 8 ] [ Difficulty ] ;
 147: LD_ADDR_VAR 0 2
 151: PUSH
 152: LD_INT 6
 154: PUSH
 155: LD_INT 7
 157: PUSH
 158: LD_INT 8
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_OWVAR 67
 170: ARRAY
 171: ST_TO_ADDR
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , 2000 ) ;
 172: LD_INT 2
 174: PPUSH
 175: CALL_OW 274
 179: PPUSH
 180: LD_INT 1
 182: PPUSH
 183: LD_INT 2000
 185: PPUSH
 186: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , 600 ) ;
 190: LD_INT 2
 192: PPUSH
 193: CALL_OW 274
 197: PPUSH
 198: LD_INT 2
 200: PPUSH
 201: LD_INT 600
 203: PPUSH
 204: CALL_OW 277
// SetResourceVisibility ( 33 , 4 , 3 ) ;
 208: LD_INT 33
 210: PPUSH
 211: LD_INT 4
 213: PPUSH
 214: LD_INT 3
 216: PPUSH
 217: CALL_OW 441
// SetResourceVisibility ( 37 , 3 , 3 ) ;
 221: LD_INT 37
 223: PPUSH
 224: LD_INT 3
 226: PPUSH
 227: LD_INT 3
 229: PPUSH
 230: CALL_OW 441
// ru_force := [ ] ;
 234: LD_ADDR_EXP 3
 238: PUSH
 239: EMPTY
 240: ST_TO_ADDR
// ru_group1 := [ ] ;
 241: LD_ADDR_EXP 4
 245: PUSH
 246: EMPTY
 247: ST_TO_ADDR
// ru_group2 := [ ] ;
 248: LD_ADDR_EXP 5
 252: PUSH
 253: EMPTY
 254: ST_TO_ADDR
// ru_reserve := [ ] ;
 255: LD_ADDR_EXP 9
 259: PUSH
 260: EMPTY
 261: ST_TO_ADDR
// ru_attack_list := [ ] ;
 262: LD_ADDR_EXP 10
 266: PUSH
 267: EMPTY
 268: ST_TO_ADDR
// ru_protector := [ ] ;
 269: LD_ADDR_EXP 17
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
 276: LD_ADDR_EXP 6
 280: PUSH
 281: LD_INT 48
 283: PUSH
 284: LD_INT 49
 286: PUSH
 287: LD_INT 50
 289: PUSH
 290: LD_INT 20
 292: PUSH
 293: LD_INT 1
 295: PUSH
 296: LD_INT 51
 298: PUSH
 299: LD_INT 52
 301: PUSH
 302: LD_INT 69
 304: PUSH
 305: LD_INT 39
 307: PUSH
 308: LD_INT 34
 310: PUSH
 311: LD_INT 40
 313: PUSH
 314: LD_INT 53
 316: PUSH
 317: LD_INT 71
 319: PUSH
 320: LD_INT 57
 322: PUSH
 323: LD_INT 58
 325: PUSH
 326: LD_INT 44
 328: PUSH
 329: LD_INT 32
 331: PUSH
 332: LD_INT 27
 334: PUSH
 335: LD_INT 23
 337: PUSH
 338: LD_INT 33
 340: PUSH
 341: LD_INT 59
 343: PUSH
 344: LD_INT 54
 346: PUSH
 347: LD_INT 55
 349: PUSH
 350: LD_INT 56
 352: PUSH
 353: LD_INT 63
 355: PUSH
 356: LD_INT 64
 358: PUSH
 359: LD_INT 65
 361: PUSH
 362: LD_INT 30
 364: PUSH
 365: LD_INT 31
 367: PUSH
 368: LD_INT 21
 370: PUSH
 371: LD_INT 22
 373: PUSH
 374: LD_INT 25
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: LIST
 386: LIST
 387: LIST
 388: LIST
 389: LIST
 390: LIST
 391: LIST
 392: LIST
 393: LIST
 394: LIST
 395: LIST
 396: LIST
 397: LIST
 398: LIST
 399: LIST
 400: LIST
 401: LIST
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: ST_TO_ADDR
// ru_towers_list := GetBuildingList ( 3 , b_turret ) ;
 411: LD_ADDR_EXP 7
 415: PUSH
 416: LD_INT 3
 418: PPUSH
 419: LD_INT 33
 421: PPUSH
 422: CALL 8309 0 2
 426: ST_TO_ADDR
// ru_weapon_list := [ ru_heavy_gun , ru_rocket_launcher , ru_rocket ] ;
 427: LD_ADDR_EXP 8
 431: PUSH
 432: LD_INT 46
 434: PUSH
 435: LD_INT 45
 437: PUSH
 438: LD_INT 47
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: LIST
 445: ST_TO_ADDR
// ru_blist := [ b_turret , 36 , 8 , 3 ] ;
 446: LD_ADDR_EXP 13
 450: PUSH
 451: LD_INT 33
 453: PUSH
 454: LD_INT 36
 456: PUSH
 457: LD_INT 8
 459: PUSH
 460: LD_INT 3
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: ST_TO_ADDR
// ru_buildings := [ ] ;
 469: LD_ADDR_EXP 14
 473: PUSH
 474: EMPTY
 475: ST_TO_ADDR
// ru_lab_list := [ [ GetX ( GetLabs ( 3 ) [ 1 ] ) , GetY ( GetLabs ( 3 ) [ 1 ] ) , GetDir ( GetLabs ( 3 ) [ 1 ] ) , GetLabKind ( GetLabs ( 3 ) [ 1 ] , 1 ) , GetLabKind ( GetLabs ( 3 ) [ 1 ] , 2 ) ] , [ 12 , 13 , 1 , b_lab_siberium , b_lab_spacetime ] ] ;
 476: LD_ADDR_EXP 11
 480: PUSH
 481: LD_INT 3
 483: PPUSH
 484: CALL 6358 0 1
 488: PUSH
 489: LD_INT 1
 491: ARRAY
 492: PPUSH
 493: CALL_OW 250
 497: PUSH
 498: LD_INT 3
 500: PPUSH
 501: CALL 6358 0 1
 505: PUSH
 506: LD_INT 1
 508: ARRAY
 509: PPUSH
 510: CALL_OW 251
 514: PUSH
 515: LD_INT 3
 517: PPUSH
 518: CALL 6358 0 1
 522: PUSH
 523: LD_INT 1
 525: ARRAY
 526: PPUSH
 527: CALL_OW 254
 531: PUSH
 532: LD_INT 3
 534: PPUSH
 535: CALL 6358 0 1
 539: PUSH
 540: LD_INT 1
 542: ARRAY
 543: PPUSH
 544: LD_INT 1
 546: PPUSH
 547: CALL_OW 268
 551: PUSH
 552: LD_INT 3
 554: PPUSH
 555: CALL 6358 0 1
 559: PUSH
 560: LD_INT 1
 562: ARRAY
 563: PPUSH
 564: LD_INT 2
 566: PPUSH
 567: CALL_OW 268
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: PUSH
 579: LD_INT 12
 581: PUSH
 582: LD_INT 13
 584: PUSH
 585: LD_INT 1
 587: PUSH
 588: LD_INT 11
 590: PUSH
 591: LD_INT 14
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: LIST
 598: LIST
 599: LIST
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: ST_TO_ADDR
// ru_heal_list := [ ] ;
 605: LD_ADDR_EXP 12
 609: PUSH
 610: EMPTY
 611: ST_TO_ADDR
// need_buldozer := false ;
 612: LD_ADDR_EXP 18
 616: PUSH
 617: LD_INT 0
 619: ST_TO_ADDR
// need_crane := true ;
 620: LD_ADDR_EXP 19
 624: PUSH
 625: LD_INT 1
 627: ST_TO_ADDR
// ru_spotted := false ;
 628: LD_ADDR_EXP 16
 632: PUSH
 633: LD_INT 0
 635: ST_TO_ADDR
// for i = 1 to 6 do
 636: LD_ADDR_VAR 0 3
 640: PUSH
 641: DOUBLE
 642: LD_INT 1
 644: DEC
 645: ST_TO_ADDR
 646: LD_INT 6
 648: PUSH
 649: FOR_TO
 650: IFFALSE 691
// begin PrepareHuman ( false , 4 , skill ) ;
 652: LD_INT 0
 654: PPUSH
 655: LD_INT 4
 657: PPUSH
 658: LD_VAR 0 2
 662: PPUSH
 663: CALL_OW 380
// un := CreateHuman ;
 667: LD_ADDR_VAR 0 4
 671: PUSH
 672: CALL_OW 44
 676: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
 677: LD_VAR 0 4
 681: PPUSH
 682: LD_INT 3
 684: PPUSH
 685: CALL_OW 52
// end ;
 689: GO 649
 691: POP
 692: POP
// for i = 1 to 6 do
 693: LD_ADDR_VAR 0 3
 697: PUSH
 698: DOUBLE
 699: LD_INT 1
 701: DEC
 702: ST_TO_ADDR
 703: LD_INT 6
 705: PUSH
 706: FOR_TO
 707: IFFALSE 748
// begin PrepareHuman ( false , 3 , skill ) ;
 709: LD_INT 0
 711: PPUSH
 712: LD_INT 3
 714: PPUSH
 715: LD_VAR 0 2
 719: PPUSH
 720: CALL_OW 380
// un := CreateHuman ;
 724: LD_ADDR_VAR 0 4
 728: PUSH
 729: CALL_OW 44
 733: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
 734: LD_VAR 0 4
 738: PPUSH
 739: LD_INT 14
 741: PPUSH
 742: CALL_OW 52
// end ;
 746: GO 706
 748: POP
 749: POP
// for i = 1 to 6 do
 750: LD_ADDR_VAR 0 3
 754: PUSH
 755: DOUBLE
 756: LD_INT 1
 758: DEC
 759: ST_TO_ADDR
 760: LD_INT 6
 762: PUSH
 763: FOR_TO
 764: IFFALSE 808
// begin PrepareHuman ( false , 2 , skill ) ;
 766: LD_INT 0
 768: PPUSH
 769: LD_INT 2
 771: PPUSH
 772: LD_VAR 0 2
 776: PPUSH
 777: CALL_OW 380
// un := CreateHuman ;
 781: LD_ADDR_VAR 0 4
 785: PUSH
 786: CALL_OW 44
 790: ST_TO_ADDR
// PlaceUnitArea ( un , ru_spawn , false ) ;
 791: LD_VAR 0 4
 795: PPUSH
 796: LD_INT 1
 798: PPUSH
 799: LD_INT 0
 801: PPUSH
 802: CALL_OW 49
// end ;
 806: GO 763
 808: POP
 809: POP
// for i = 1 to 6 do
 810: LD_ADDR_VAR 0 3
 814: PUSH
 815: DOUBLE
 816: LD_INT 1
 818: DEC
 819: ST_TO_ADDR
 820: LD_INT 6
 822: PUSH
 823: FOR_TO
 824: IFFALSE 902
// begin PrepareHuman ( false , 1 , skill ) ;
 826: LD_INT 0
 828: PPUSH
 829: LD_INT 1
 831: PPUSH
 832: LD_VAR 0 2
 836: PPUSH
 837: CALL_OW 380
// un := CreateHuman ;
 841: LD_ADDR_VAR 0 4
 845: PUSH
 846: CALL_OW 44
 850: ST_TO_ADDR
// PlaceUnitArea ( un , ru_spawn , false ) ;
 851: LD_VAR 0 4
 855: PPUSH
 856: LD_INT 1
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: CALL_OW 49
// ComEnterUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_barracks ] ) , un ) ) ;
 866: LD_VAR 0 4
 870: PPUSH
 871: LD_INT 30
 873: PUSH
 874: LD_INT 5
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: PPUSH
 881: CALL_OW 69
 885: PPUSH
 886: LD_VAR 0 4
 890: PPUSH
 891: CALL_OW 74
 895: PPUSH
 896: CALL_OW 120
// end ;
 900: GO 823
 902: POP
 903: POP
// for i = 1 to Difficulty do
 904: LD_ADDR_VAR 0 3
 908: PUSH
 909: DOUBLE
 910: LD_INT 1
 912: DEC
 913: ST_TO_ADDR
 914: LD_OWVAR 67
 918: PUSH
 919: FOR_TO
 920: IFFALSE 1031
// begin vc_chassis := ru_medium_tracked ;
 922: LD_ADDR_OWVAR 37
 926: PUSH
 927: LD_INT 22
 929: ST_TO_ADDR
// vc_engine := engine_siberite ;
 930: LD_ADDR_OWVAR 39
 934: PUSH
 935: LD_INT 3
 937: ST_TO_ADDR
// vc_control := control_computer ;
 938: LD_ADDR_OWVAR 38
 942: PUSH
 943: LD_INT 3
 945: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] ;
 946: LD_ADDR_OWVAR 40
 950: PUSH
 951: LD_INT 43
 953: PUSH
 954: LD_INT 45
 956: PUSH
 957: EMPTY
 958: LIST
 959: LIST
 960: PUSH
 961: LD_VAR 0 3
 965: PUSH
 966: LD_INT 2
 968: MOD
 969: PUSH
 970: LD_INT 1
 972: PLUS
 973: ARRAY
 974: ST_TO_ADDR
// un := CreateVehicle ;
 975: LD_ADDR_VAR 0 4
 979: PUSH
 980: CALL_OW 45
 984: ST_TO_ADDR
// PlaceUnitXYR ( un , 52 , 42 , 6 , false ) ;
 985: LD_VAR 0 4
 989: PPUSH
 990: LD_INT 52
 992: PPUSH
 993: LD_INT 42
 995: PPUSH
 996: LD_INT 6
 998: PPUSH
 999: LD_INT 0
1001: PPUSH
1002: CALL_OW 50
// ru_protector := Insert ( ru_protector , 1 , un ) ;
1006: LD_ADDR_EXP 17
1010: PUSH
1011: LD_EXP 17
1015: PPUSH
1016: LD_INT 1
1018: PPUSH
1019: LD_VAR 0 4
1023: PPUSH
1024: CALL_OW 2
1028: ST_TO_ADDR
// end ;
1029: GO 919
1031: POP
1032: POP
// end ;
1033: LD_VAR 0 1
1037: RET
// every 120 120$00 trigger Difficulty = 2 and GetBuilding ( 3 , b_factory ) do
1038: LD_OWVAR 67
1042: PUSH
1043: LD_INT 2
1045: EQUAL
1046: PUSH
1047: LD_INT 3
1049: PPUSH
1050: LD_INT 3
1052: PPUSH
1053: CALL 6209 0 2
1057: AND
1058: IFFALSE 1094
1060: GO 1062
1062: DISABLE
// ComProduce ( GetBuilding ( 3 , b_factory ) [ 1 ] , ru_heavy_tracked , engine_combustion , control_computer , ru_siberium_rocket ) ;
1063: LD_INT 3
1065: PPUSH
1066: LD_INT 3
1068: PPUSH
1069: CALL 6209 0 2
1073: PUSH
1074: LD_INT 1
1076: ARRAY
1077: PPUSH
1078: LD_INT 24
1080: PPUSH
1081: LD_INT 1
1083: PPUSH
1084: LD_INT 3
1086: PPUSH
1087: LD_INT 48
1089: PPUSH
1090: CALL 8082 0 5
1094: END
// every 100 100$00 trigger Difficulty = 3 and GetBuilding ( 3 , b_factory ) do
1095: LD_OWVAR 67
1099: PUSH
1100: LD_INT 3
1102: EQUAL
1103: PUSH
1104: LD_INT 3
1106: PPUSH
1107: LD_INT 3
1109: PPUSH
1110: CALL 6209 0 2
1114: AND
1115: IFFALSE 1151
1117: GO 1119
1119: DISABLE
// ComProduce ( GetBuilding ( 3 , b_factory ) [ 1 ] , ru_heavy_tracked , engine_combustion , control_computer , ru_siberium_rocket ) ;
1120: LD_INT 3
1122: PPUSH
1123: LD_INT 3
1125: PPUSH
1126: CALL 6209 0 2
1130: PUSH
1131: LD_INT 1
1133: ARRAY
1134: PPUSH
1135: LD_INT 24
1137: PPUSH
1138: LD_INT 1
1140: PPUSH
1141: LD_INT 3
1143: PPUSH
1144: LD_INT 48
1146: PPUSH
1147: CALL 8082 0 5
1151: END
// every 0 0$01 trigger ru_protector do var i ;
1152: LD_EXP 17
1156: IFFALSE 1327
1158: GO 1160
1160: DISABLE
1161: LD_INT 0
1163: PPUSH
// begin enable ;
1164: ENABLE
// if FilterUnitsInArea ( ru_protect_area , [ f_enemy , 3 ] ) then
1165: LD_INT 14
1167: PPUSH
1168: LD_INT 81
1170: PUSH
1171: LD_INT 3
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: PPUSH
1178: CALL_OW 70
1182: IFFALSE 1257
// begin for i = 1 to ru_protector do
1184: LD_ADDR_VAR 0 1
1188: PUSH
1189: DOUBLE
1190: LD_INT 1
1192: DEC
1193: ST_TO_ADDR
1194: LD_EXP 17
1198: PUSH
1199: FOR_TO
1200: IFFALSE 1253
// ComAttackUnit ( ru_protector [ i ] , NearestUnitToUnit ( FilterUnitsInArea ( ru_protect_area , [ f_enemy , 3 ] ) , ru_protector [ i ] ) ) ;
1202: LD_EXP 17
1206: PUSH
1207: LD_VAR 0 1
1211: ARRAY
1212: PPUSH
1213: LD_INT 14
1215: PPUSH
1216: LD_INT 81
1218: PUSH
1219: LD_INT 3
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: PPUSH
1226: CALL_OW 70
1230: PPUSH
1231: LD_EXP 17
1235: PUSH
1236: LD_VAR 0 1
1240: ARRAY
1241: PPUSH
1242: CALL_OW 74
1246: PPUSH
1247: CALL_OW 115
1251: GO 1199
1253: POP
1254: POP
// end else
1255: GO 1327
// for i = 1 to ru_protector do
1257: LD_ADDR_VAR 0 1
1261: PUSH
1262: DOUBLE
1263: LD_INT 1
1265: DEC
1266: ST_TO_ADDR
1267: LD_EXP 17
1271: PUSH
1272: FOR_TO
1273: IFFALSE 1325
// if GetDistUnitXY ( ru_protector [ i ] , 49 , 39 ) > 10 then
1275: LD_EXP 17
1279: PUSH
1280: LD_VAR 0 1
1284: ARRAY
1285: PPUSH
1286: LD_INT 49
1288: PPUSH
1289: LD_INT 39
1291: PPUSH
1292: CALL_OW 297
1296: PUSH
1297: LD_INT 10
1299: GREATER
1300: IFFALSE 1323
// ComMoveXY ( ru_protector [ i ] , 49 , 39 ) ;
1302: LD_EXP 17
1306: PUSH
1307: LD_VAR 0 1
1311: ARRAY
1312: PPUSH
1313: LD_INT 49
1315: PPUSH
1316: LD_INT 39
1318: PPUSH
1319: CALL_OW 111
1323: GO 1272
1325: POP
1326: POP
// end ;
1327: PPOPN 1
1329: END
// every 0 0$01 trigger tick > [ 2 2$00 , 1 1$00 , 0 0$30 ] [ Difficulty ] do
1330: LD_OWVAR 1
1334: PUSH
1335: LD_INT 4200
1337: PUSH
1338: LD_INT 2100
1340: PUSH
1341: LD_INT 1050
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: LIST
1348: PUSH
1349: LD_OWVAR 67
1353: ARRAY
1354: GREATER
1355: IFFALSE 1368
1357: GO 1359
1359: DISABLE
// need_buldozer := true ;
1360: LD_ADDR_EXP 18
1364: PUSH
1365: LD_INT 1
1367: ST_TO_ADDR
1368: END
// export ru_sold , ru_eng , ru_mech , ru_sci , ru_bazz , ru_base_personel , ru_bulldozers , ru_crans , ru_cargos ; every 0 0$01 do
1369: GO 1371
1371: DISABLE
// begin enable ;
1372: ENABLE
// ru_sold := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
1373: LD_ADDR_EXP 20
1377: PUSH
1378: LD_INT 22
1380: PUSH
1381: LD_INT 3
1383: PUSH
1384: EMPTY
1385: LIST
1386: LIST
1387: PUSH
1388: LD_INT 25
1390: PUSH
1391: LD_INT 1
1393: PUSH
1394: EMPTY
1395: LIST
1396: LIST
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PPUSH
1402: CALL_OW 69
1406: ST_TO_ADDR
// ru_eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
1407: LD_ADDR_EXP 21
1411: PUSH
1412: LD_INT 22
1414: PUSH
1415: LD_INT 3
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: PUSH
1422: LD_INT 25
1424: PUSH
1425: LD_INT 2
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: PPUSH
1436: CALL_OW 69
1440: ST_TO_ADDR
// ru_mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
1441: LD_ADDR_EXP 22
1445: PUSH
1446: LD_INT 22
1448: PUSH
1449: LD_INT 3
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: PUSH
1456: LD_INT 25
1458: PUSH
1459: LD_INT 3
1461: PUSH
1462: EMPTY
1463: LIST
1464: LIST
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: PPUSH
1470: CALL_OW 69
1474: ST_TO_ADDR
// ru_sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
1475: LD_ADDR_EXP 23
1479: PUSH
1480: LD_INT 22
1482: PUSH
1483: LD_INT 3
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: PUSH
1490: LD_INT 25
1492: PUSH
1493: LD_INT 4
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PPUSH
1504: CALL_OW 69
1508: ST_TO_ADDR
// ru_bazz := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
1509: LD_ADDR_EXP 24
1513: PUSH
1514: LD_INT 22
1516: PUSH
1517: LD_INT 3
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PUSH
1524: LD_INT 25
1526: PUSH
1527: LD_INT 9
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: PPUSH
1538: CALL_OW 69
1542: ST_TO_ADDR
// ru_base_personel := FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
1543: LD_ADDR_EXP 25
1547: PUSH
1548: LD_INT 2
1550: PPUSH
1551: LD_INT 22
1553: PUSH
1554: LD_INT 3
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: PUSH
1561: LD_INT 21
1563: PUSH
1564: LD_INT 1
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: PPUSH
1575: CALL_OW 70
1579: ST_TO_ADDR
// ru_bulldozers := FilterAllUnits ( [ f_weapon , ru_bulldozer ] ) ;
1580: LD_ADDR_EXP 26
1584: PUSH
1585: LD_INT 34
1587: PUSH
1588: LD_INT 53
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PPUSH
1595: CALL_OW 69
1599: ST_TO_ADDR
// ru_crans := FilterAllUnits ( [ f_weapon , ru_crane ] ) ;
1600: LD_ADDR_EXP 27
1604: PUSH
1605: LD_INT 34
1607: PUSH
1608: LD_INT 52
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PPUSH
1615: CALL_OW 69
1619: ST_TO_ADDR
// ru_cargos := FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) ;
1620: LD_ADDR_EXP 28
1624: PUSH
1625: LD_INT 34
1627: PUSH
1628: LD_INT 51
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: PPUSH
1635: CALL_OW 69
1639: ST_TO_ADDR
// ru_buildings := GetBuildingsList ( 3 , - 1 ) ;
1640: LD_ADDR_EXP 14
1644: PUSH
1645: LD_INT 3
1647: PPUSH
1648: LD_INT 1
1650: NEG
1651: PPUSH
1652: CALL 10608 0 2
1656: ST_TO_ADDR
// end ;
1657: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) and game_status or debug do var i , j , un , b , p , l , fac , lab , list , c ;
1658: LD_INT 22
1660: PUSH
1661: LD_INT 3
1663: PUSH
1664: EMPTY
1665: LIST
1666: LIST
1667: PPUSH
1668: CALL_OW 69
1672: PUSH
1673: LD_EXP 29
1677: AND
1678: PUSH
1679: LD_EXP 1
1683: OR
1684: IFFALSE 5233
1686: GO 1688
1688: DISABLE
1689: LD_INT 0
1691: PPUSH
1692: PPUSH
1693: PPUSH
1694: PPUSH
1695: PPUSH
1696: PPUSH
1697: PPUSH
1698: PPUSH
1699: PPUSH
1700: PPUSH
// begin enable ;
1701: ENABLE
// for i = 1 to ru_eng do
1702: LD_ADDR_VAR 0 1
1706: PUSH
1707: DOUBLE
1708: LD_INT 1
1710: DEC
1711: ST_TO_ADDR
1712: LD_EXP 21
1716: PUSH
1717: FOR_TO
1718: IFFALSE 1781
// if not HasTask ( ru_eng [ i ] ) and not IsInUnit ( ru_eng [ i ] ) then
1720: LD_EXP 21
1724: PUSH
1725: LD_VAR 0 1
1729: ARRAY
1730: PPUSH
1731: CALL_OW 314
1735: NOT
1736: PUSH
1737: LD_EXP 21
1741: PUSH
1742: LD_VAR 0 1
1746: ARRAY
1747: PPUSH
1748: CALL_OW 310
1752: NOT
1753: AND
1754: IFFALSE 1779
// ComEnterUnit ( ru_eng [ i ] , MyBase ( 3 ) ) ;
1756: LD_EXP 21
1760: PUSH
1761: LD_VAR 0 1
1765: ARRAY
1766: PPUSH
1767: LD_INT 3
1769: PPUSH
1770: CALL 6118 0 1
1774: PPUSH
1775: CALL_OW 120
1779: GO 1717
1781: POP
1782: POP
// if FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
1783: LD_INT 2
1785: PPUSH
1786: LD_INT 22
1788: PUSH
1789: LD_INT 3
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: PUSH
1796: LD_INT 21
1798: PUSH
1799: LD_INT 3
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: PUSH
1806: LD_INT 3
1808: PUSH
1809: LD_INT 24
1811: PUSH
1812: LD_INT 1000
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: PPUSH
1828: CALL_OW 70
1832: IFFALSE 1999
// begin b := FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
1834: LD_ADDR_VAR 0 4
1838: PUSH
1839: LD_INT 2
1841: PPUSH
1842: LD_INT 22
1844: PUSH
1845: LD_INT 3
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: PUSH
1852: LD_INT 21
1854: PUSH
1855: LD_INT 3
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: PUSH
1862: LD_INT 3
1864: PUSH
1865: LD_INT 24
1867: PUSH
1868: LD_INT 1000
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: PPUSH
1884: CALL_OW 70
1888: ST_TO_ADDR
// for i = 1 to ru_eng do
1889: LD_ADDR_VAR 0 1
1893: PUSH
1894: DOUBLE
1895: LD_INT 1
1897: DEC
1898: ST_TO_ADDR
1899: LD_EXP 21
1903: PUSH
1904: FOR_TO
1905: IFFALSE 1997
// begin if IsInUnit ( ru_eng [ i ] ) then
1907: LD_EXP 21
1911: PUSH
1912: LD_VAR 0 1
1916: ARRAY
1917: PPUSH
1918: CALL_OW 310
1922: IFFALSE 1941
// ComExitBuilding ( ru_eng [ i ] ) else
1924: LD_EXP 21
1928: PUSH
1929: LD_VAR 0 1
1933: ARRAY
1934: PPUSH
1935: CALL_OW 122
1939: GO 1995
// if not WantRepair ( ru_eng [ i ] ) then
1941: LD_EXP 21
1945: PUSH
1946: LD_VAR 0 1
1950: ARRAY
1951: PPUSH
1952: CALL 10534 0 1
1956: NOT
1957: IFFALSE 1995
// ComRepairBuilding ( ru_eng [ i ] , NearestUnitToUnit ( b , ru_eng [ i ] ) ) ;
1959: LD_EXP 21
1963: PUSH
1964: LD_VAR 0 1
1968: ARRAY
1969: PPUSH
1970: LD_VAR 0 4
1974: PPUSH
1975: LD_EXP 21
1979: PUSH
1980: LD_VAR 0 1
1984: ARRAY
1985: PPUSH
1986: CALL_OW 74
1990: PPUSH
1991: CALL_OW 130
// end ;
1995: GO 1904
1997: POP
1998: POP
// end ; if EnemyNearbyBase ( your_side , 38 , 26 ) = false and EnemyNearbyBase ( your_side , 29 , 37 ) = false then
1999: LD_OWVAR 2
2003: PPUSH
2004: LD_INT 38
2006: PPUSH
2007: LD_INT 26
2009: PPUSH
2010: CALL 5451 0 3
2014: PUSH
2015: LD_INT 0
2017: EQUAL
2018: PUSH
2019: LD_OWVAR 2
2023: PPUSH
2024: LD_INT 29
2026: PPUSH
2027: LD_INT 37
2029: PPUSH
2030: CALL 5451 0 3
2034: PUSH
2035: LD_INT 0
2037: EQUAL
2038: AND
2039: IFFALSE 2176
// begin if ru_blist > 0 then
2041: LD_EXP 13
2045: PUSH
2046: LD_INT 0
2048: GREATER
2049: IFFALSE 2176
// begin for i = 1 to ru_eng do
2051: LD_ADDR_VAR 0 1
2055: PUSH
2056: DOUBLE
2057: LD_INT 1
2059: DEC
2060: ST_TO_ADDR
2061: LD_EXP 21
2065: PUSH
2066: FOR_TO
2067: IFFALSE 2174
// if IsInUnit ( ru_eng [ i ] ) then
2069: LD_EXP 21
2073: PUSH
2074: LD_VAR 0 1
2078: ARRAY
2079: PPUSH
2080: CALL_OW 310
2084: IFFALSE 2103
// ComExitBuilding ( ru_eng [ i ] ) else
2086: LD_EXP 21
2090: PUSH
2091: LD_VAR 0 1
2095: ARRAY
2096: PPUSH
2097: CALL_OW 122
2101: GO 2172
// if not HasTask ( ru_eng [ i ] ) then
2103: LD_EXP 21
2107: PUSH
2108: LD_VAR 0 1
2112: ARRAY
2113: PPUSH
2114: CALL_OW 314
2118: NOT
2119: IFFALSE 2172
// ComBuild ( ru_eng [ i ] , ru_blist [ 1 ] , ru_blist [ 2 ] , ru_blist [ 3 ] , ru_blist [ 4 ] ) ;
2121: LD_EXP 21
2125: PUSH
2126: LD_VAR 0 1
2130: ARRAY
2131: PPUSH
2132: LD_EXP 13
2136: PUSH
2137: LD_INT 1
2139: ARRAY
2140: PPUSH
2141: LD_EXP 13
2145: PUSH
2146: LD_INT 2
2148: ARRAY
2149: PPUSH
2150: LD_EXP 13
2154: PUSH
2155: LD_INT 3
2157: ARRAY
2158: PPUSH
2159: LD_EXP 13
2163: PUSH
2164: LD_INT 4
2166: ARRAY
2167: PPUSH
2168: CALL_OW 145
2172: GO 2066
2174: POP
2175: POP
// end ; end ; ru_heal_list := NeedHeal ( 3 , ru_heal_list , ru_behemoth_mechanic ) ;
2176: LD_ADDR_EXP 12
2180: PUSH
2181: LD_INT 3
2183: PPUSH
2184: LD_EXP 12
2188: PPUSH
2189: LD_EXP 15
2193: PPUSH
2194: CALL 9125 0 3
2198: ST_TO_ADDR
// if debug then
2199: LD_EXP 1
2203: IFFALSE 2215
// display_strings := ru_heal_list ;
2205: LD_ADDR_OWVAR 47
2209: PUSH
2210: LD_EXP 12
2214: ST_TO_ADDR
// for i = 1 to ru_sci do
2215: LD_ADDR_VAR 0 1
2219: PUSH
2220: DOUBLE
2221: LD_INT 1
2223: DEC
2224: ST_TO_ADDR
2225: LD_EXP 23
2229: PUSH
2230: FOR_TO
2231: IFFALSE 2563
// begin if ru_heal_list then
2233: LD_EXP 12
2237: IFFALSE 2476
// begin list := ru_heal_list ;
2239: LD_ADDR_VAR 0 9
2243: PUSH
2244: LD_EXP 12
2248: ST_TO_ADDR
// if IsInUnit ( ru_sci [ i ] ) then
2249: LD_EXP 23
2253: PUSH
2254: LD_VAR 0 1
2258: ARRAY
2259: PPUSH
2260: CALL_OW 310
2264: IFFALSE 2281
// ComExitBuilding ( ru_sci [ i ] ) ;
2266: LD_EXP 23
2270: PUSH
2271: LD_VAR 0 1
2275: ARRAY
2276: PPUSH
2277: CALL_OW 122
// for p = 1 to list do
2281: LD_ADDR_VAR 0 5
2285: PUSH
2286: DOUBLE
2287: LD_INT 1
2289: DEC
2290: ST_TO_ADDR
2291: LD_VAR 0 9
2295: PUSH
2296: FOR_TO
2297: IFFALSE 2472
// begin if GetTag ( list [ p ] ) = 100 and not WantHeal ( ru_sci [ i ] , 100 ) then
2299: LD_VAR 0 9
2303: PUSH
2304: LD_VAR 0 5
2308: ARRAY
2309: PPUSH
2310: CALL_OW 110
2314: PUSH
2315: LD_INT 100
2317: EQUAL
2318: PUSH
2319: LD_EXP 23
2323: PUSH
2324: LD_VAR 0 1
2328: ARRAY
2329: PPUSH
2330: LD_INT 100
2332: PPUSH
2333: CALL 74430 0 2
2337: NOT
2338: AND
2339: IFFALSE 2367
// ComHeal ( ru_sci [ i ] , list [ p ] ) ;
2341: LD_EXP 23
2345: PUSH
2346: LD_VAR 0 1
2350: ARRAY
2351: PPUSH
2352: LD_VAR 0 9
2356: PUSH
2357: LD_VAR 0 5
2361: ARRAY
2362: PPUSH
2363: CALL_OW 128
// if GetTag ( list [ p ] ) > 100 then
2367: LD_VAR 0 9
2371: PUSH
2372: LD_VAR 0 5
2376: ARRAY
2377: PPUSH
2378: CALL_OW 110
2382: PUSH
2383: LD_INT 100
2385: GREATER
2386: IFFALSE 2414
// AddComHeal ( ru_sci [ i ] , list [ p ] ) ;
2388: LD_EXP 23
2392: PUSH
2393: LD_VAR 0 1
2397: ARRAY
2398: PPUSH
2399: LD_VAR 0 9
2403: PUSH
2404: LD_VAR 0 5
2408: ARRAY
2409: PPUSH
2410: CALL_OW 188
// if not IsInArea ( list [ p ] , ru_heal_area ) then
2414: LD_VAR 0 9
2418: PUSH
2419: LD_VAR 0 5
2423: ARRAY
2424: PPUSH
2425: LD_INT 4
2427: PPUSH
2428: CALL_OW 308
2432: NOT
2433: IFFALSE 2455
// ComMoveToArea ( list [ p ] , ru_heal_area ) else
2435: LD_VAR 0 9
2439: PUSH
2440: LD_VAR 0 5
2444: ARRAY
2445: PPUSH
2446: LD_INT 4
2448: PPUSH
2449: CALL_OW 113
2453: GO 2470
// ComHold ( list [ p ] ) ;
2455: LD_VAR 0 9
2459: PUSH
2460: LD_VAR 0 5
2464: ARRAY
2465: PPUSH
2466: CALL_OW 140
// end ;
2470: GO 2296
2472: POP
2473: POP
// end else
2474: GO 2561
// if not HasTask ( ru_sci [ i ] ) and not IsInUnit ( ru_sci [ i ] ) and ru_heal_list = 0 then
2476: LD_EXP 23
2480: PUSH
2481: LD_VAR 0 1
2485: ARRAY
2486: PPUSH
2487: CALL_OW 314
2491: NOT
2492: PUSH
2493: LD_EXP 23
2497: PUSH
2498: LD_VAR 0 1
2502: ARRAY
2503: PPUSH
2504: CALL_OW 310
2508: NOT
2509: AND
2510: PUSH
2511: LD_EXP 12
2515: PUSH
2516: LD_INT 0
2518: EQUAL
2519: AND
2520: IFFALSE 2561
// ComEnterUnit ( ru_sci [ i ] , NearestUnitToUnit ( GetLabs ( 3 ) , ru_sci [ i ] ) ) ;
2522: LD_EXP 23
2526: PUSH
2527: LD_VAR 0 1
2531: ARRAY
2532: PPUSH
2533: LD_INT 3
2535: PPUSH
2536: CALL 6358 0 1
2540: PPUSH
2541: LD_EXP 23
2545: PUSH
2546: LD_VAR 0 1
2550: ARRAY
2551: PPUSH
2552: CALL_OW 74
2556: PPUSH
2557: CALL_OW 120
// end ;
2561: GO 2230
2563: POP
2564: POP
// if CheckTechList ( 3 , ru_tech_list ) then
2565: LD_INT 3
2567: PPUSH
2568: LD_EXP 6
2572: PPUSH
2573: CALL 6499 0 2
2577: IFFALSE 2591
// ResearchTechList ( 3 , ru_tech_list ) ;
2579: LD_INT 3
2581: PPUSH
2582: LD_EXP 6
2586: PPUSH
2587: CALL 6574 0 2
// ComBuildLabList ( ru_eng , ru_lab_list ) ;
2591: LD_EXP 21
2595: PPUSH
2596: LD_EXP 11
2600: PPUSH
2601: CALL 8481 0 2
// lab := GetLabs ( 3 ) ;
2605: LD_ADDR_VAR 0 8
2609: PUSH
2610: LD_INT 3
2612: PPUSH
2613: CALL 6358 0 1
2617: ST_TO_ADDR
// if lab and ru_heal_list = 0 then
2618: LD_VAR 0 8
2622: PUSH
2623: LD_EXP 12
2627: PUSH
2628: LD_INT 0
2630: EQUAL
2631: AND
2632: IFFALSE 2759
// for i = 1 to lab do
2634: LD_ADDR_VAR 0 1
2638: PUSH
2639: DOUBLE
2640: LD_INT 1
2642: DEC
2643: ST_TO_ADDR
2644: LD_VAR 0 8
2648: PUSH
2649: FOR_TO
2650: IFFALSE 2757
// if BuildingStatus ( lab [ i ] ) = bs_need_people then
2652: LD_VAR 0 8
2656: PUSH
2657: LD_VAR 0 1
2661: ARRAY
2662: PPUSH
2663: CALL_OW 461
2667: PUSH
2668: LD_INT 6
2670: EQUAL
2671: IFFALSE 2755
// begin for p = 1 to ru_sci do
2673: LD_ADDR_VAR 0 5
2677: PUSH
2678: DOUBLE
2679: LD_INT 1
2681: DEC
2682: ST_TO_ADDR
2683: LD_EXP 23
2687: PUSH
2688: FOR_TO
2689: IFFALSE 2753
// if IsInUnit ( ru_sci [ p ] ) then
2691: LD_EXP 23
2695: PUSH
2696: LD_VAR 0 5
2700: ARRAY
2701: PPUSH
2702: CALL_OW 310
2706: IFFALSE 2725
// ComExitBuilding ( ru_sci [ p ] ) else
2708: LD_EXP 23
2712: PUSH
2713: LD_VAR 0 5
2717: ARRAY
2718: PPUSH
2719: CALL_OW 122
2723: GO 2751
// ComEnterUnit ( ru_sci [ p ] , lab [ i ] ) ;
2725: LD_EXP 23
2729: PUSH
2730: LD_VAR 0 5
2734: ARRAY
2735: PPUSH
2736: LD_VAR 0 8
2740: PUSH
2741: LD_VAR 0 1
2745: ARRAY
2746: PPUSH
2747: CALL_OW 120
2751: GO 2688
2753: POP
2754: POP
// end ;
2755: GO 2649
2757: POP
2758: POP
// if GetTowers ( 3 ) < 5 then
2759: LD_INT 3
2761: PPUSH
2762: CALL 6913 0 1
2766: PUSH
2767: LD_INT 5
2769: LESS
2770: IFFALSE 2788
// CheckTowersStatus ( ru_eng , ru_towers_list ) else
2772: LD_EXP 21
2776: PPUSH
2777: LD_EXP 7
2781: PPUSH
2782: CALL 7521 0 2
2786: GO 2800
// CheckWeaponOnTowers ( 3 , ru_weapon_list ) ;
2788: LD_INT 3
2790: PPUSH
2791: LD_EXP 8
2795: PPUSH
2796: CALL 7812 0 2
// if GetBuilding ( 3 , b_factory ) then
2800: LD_INT 3
2802: PPUSH
2803: LD_INT 3
2805: PPUSH
2806: CALL 6209 0 2
2810: IFFALSE 3080
// if BuildingStatus ( GetBuilding ( 3 , b_factory ) [ 1 ] ) = bs_idle then
2812: LD_INT 3
2814: PPUSH
2815: LD_INT 3
2817: PPUSH
2818: CALL 6209 0 2
2822: PUSH
2823: LD_INT 1
2825: ARRAY
2826: PPUSH
2827: CALL_OW 461
2831: PUSH
2832: LD_INT 2
2834: EQUAL
2835: IFFALSE 3080
// begin fac := GetBuilding ( 3 , b_factory ) [ 1 ] ;
2837: LD_ADDR_VAR 0 7
2841: PUSH
2842: LD_INT 3
2844: PPUSH
2845: LD_INT 3
2847: PPUSH
2848: CALL 6209 0 2
2852: PUSH
2853: LD_INT 1
2855: ARRAY
2856: ST_TO_ADDR
// if GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) = 0 and need_buldozer then
2857: LD_INT 3
2859: PPUSH
2860: LD_INT 24
2862: PPUSH
2863: LD_INT 53
2865: PPUSH
2866: CALL 7960 0 3
2870: PUSH
2871: LD_INT 0
2873: EQUAL
2874: PUSH
2875: LD_EXP 18
2879: AND
2880: IFFALSE 2903
// ComProduce ( fac , ru_heavy_tracked , engine_combustion , control_manual , ru_bulldozer ) ;
2882: LD_VAR 0 7
2886: PPUSH
2887: LD_INT 24
2889: PPUSH
2890: LD_INT 1
2892: PPUSH
2893: LD_INT 1
2895: PPUSH
2896: LD_INT 53
2898: PPUSH
2899: CALL 8082 0 5
// if GetVehicle ( 3 , ru_medium_tracked , ru_crane ) = 0 and need_crane then
2903: LD_INT 3
2905: PPUSH
2906: LD_INT 22
2908: PPUSH
2909: LD_INT 52
2911: PPUSH
2912: CALL 7960 0 3
2916: PUSH
2917: LD_INT 0
2919: EQUAL
2920: PUSH
2921: LD_EXP 19
2925: AND
2926: IFFALSE 2949
// ComProduce ( fac , ru_medium_tracked , engine_combustion , control_computer , ru_crane ) ;
2928: LD_VAR 0 7
2932: PPUSH
2933: LD_INT 22
2935: PPUSH
2936: LD_INT 1
2938: PPUSH
2939: LD_INT 3
2941: PPUSH
2942: LD_INT 52
2944: PPUSH
2945: CALL 8082 0 5
// if GetVehicle ( 3 , ru_medium_tracked , ru_time_lapser ) < 4 and GetTech ( tech_lapser , 3 ) = state_researched then
2949: LD_INT 3
2951: PPUSH
2952: LD_INT 22
2954: PPUSH
2955: LD_INT 49
2957: PPUSH
2958: CALL 7960 0 3
2962: PUSH
2963: LD_INT 4
2965: LESS
2966: PUSH
2967: LD_INT 31
2969: PPUSH
2970: LD_INT 3
2972: PPUSH
2973: CALL_OW 321
2977: PUSH
2978: LD_INT 2
2980: EQUAL
2981: AND
2982: IFFALSE 3005
// ComProduce ( fac , ru_medium_tracked , engine_combustion , control_computer , ru_time_lapser ) ;
2984: LD_VAR 0 7
2988: PPUSH
2989: LD_INT 22
2991: PPUSH
2992: LD_INT 1
2994: PPUSH
2995: LD_INT 3
2997: PPUSH
2998: LD_INT 49
3000: PPUSH
3001: CALL 8082 0 5
// if ru_reserve < [ 5 , 6 , 7 ] [ Difficulty ] then
3005: LD_EXP 9
3009: PUSH
3010: LD_INT 5
3012: PUSH
3013: LD_INT 6
3015: PUSH
3016: LD_INT 7
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: LIST
3023: PUSH
3024: LD_OWVAR 67
3028: ARRAY
3029: LESS
3030: IFFALSE 3080
// begin ComProduce ( fac , ru_heavy_tracked , engine_combustion , control_computer , [ ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_heavy_gun ] [ Rand ( 1 , 4 ) ] ) ;
3032: LD_VAR 0 7
3036: PPUSH
3037: LD_INT 24
3039: PPUSH
3040: LD_INT 1
3042: PPUSH
3043: LD_INT 3
3045: PPUSH
3046: LD_INT 46
3048: PUSH
3049: LD_INT 45
3051: PUSH
3052: LD_INT 47
3054: PUSH
3055: LD_INT 46
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: PUSH
3064: LD_INT 1
3066: PPUSH
3067: LD_INT 4
3069: PPUSH
3070: CALL_OW 12
3074: ARRAY
3075: PPUSH
3076: CALL 8082 0 5
// end ; end ; if GetBaseSource ( MyBase ( 3 ) ) [ 1 ] > 250 and GetBaseSource ( MyBase ( 3 ) ) [ 3 ] > 50 and GetTech ( tech_behemoth , 3 ) = state_researched and GetBehemoth ( 3 ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_time_lapser ] ] ) > 3 and EnemyNearbyBase ( your_side , 51 , 42 ) = false then
3080: LD_INT 3
3082: PPUSH
3083: CALL 6118 0 1
3087: PPUSH
3088: CALL 5810 0 1
3092: PUSH
3093: LD_INT 1
3095: ARRAY
3096: PUSH
3097: LD_INT 250
3099: GREATER
3100: PUSH
3101: LD_INT 3
3103: PPUSH
3104: CALL 6118 0 1
3108: PPUSH
3109: CALL 5810 0 1
3113: PUSH
3114: LD_INT 3
3116: ARRAY
3117: PUSH
3118: LD_INT 50
3120: GREATER
3121: AND
3122: PUSH
3123: LD_INT 23
3125: PPUSH
3126: LD_INT 3
3128: PPUSH
3129: CALL_OW 321
3133: PUSH
3134: LD_INT 2
3136: EQUAL
3137: AND
3138: PUSH
3139: LD_INT 3
3141: PPUSH
3142: CALL 11332 0 1
3146: PUSH
3147: LD_INT 0
3149: EQUAL
3150: AND
3151: PUSH
3152: LD_INT 22
3154: PUSH
3155: LD_INT 3
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: PUSH
3162: LD_INT 34
3164: PUSH
3165: LD_INT 49
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: PPUSH
3176: CALL_OW 69
3180: PUSH
3181: LD_INT 3
3183: GREATER
3184: AND
3185: PUSH
3186: LD_OWVAR 2
3190: PPUSH
3191: LD_INT 51
3193: PPUSH
3194: LD_INT 42
3196: PPUSH
3197: CALL 5451 0 3
3201: PUSH
3202: LD_INT 0
3204: EQUAL
3205: AND
3206: IFFALSE 3291
// begin for i = 1 to ru_mech do
3208: LD_ADDR_VAR 0 1
3212: PUSH
3213: DOUBLE
3214: LD_INT 1
3216: DEC
3217: ST_TO_ADDR
3218: LD_EXP 22
3222: PUSH
3223: FOR_TO
3224: IFFALSE 3289
// begin if IsInUnit ( ru_mech [ i ] ) then
3226: LD_EXP 22
3230: PUSH
3231: LD_VAR 0 1
3235: ARRAY
3236: PPUSH
3237: CALL_OW 310
3241: IFFALSE 3260
// ComExitBuilding ( ru_mech [ i ] ) else
3243: LD_EXP 22
3247: PUSH
3248: LD_VAR 0 1
3252: ARRAY
3253: PPUSH
3254: CALL_OW 122
3258: GO 3287
// ComBuildBehemoth ( ru_mech [ i ] , b_behemoth , 51 , 43 , 0 ) ;
3260: LD_EXP 22
3264: PUSH
3265: LD_VAR 0 1
3269: ARRAY
3270: PPUSH
3271: LD_INT 37
3273: PPUSH
3274: LD_INT 51
3276: PPUSH
3277: LD_INT 43
3279: PPUSH
3280: LD_INT 0
3282: PPUSH
3283: CALL_OW 170
// end ;
3287: GO 3223
3289: POP
3290: POP
// end ; if tick >= [ 45 45$00 , 40 40$00 , 34 34$00 ] [ Difficulty ] then
3291: LD_OWVAR 1
3295: PUSH
3296: LD_INT 94500
3298: PUSH
3299: LD_INT 84000
3301: PUSH
3302: LD_INT 71400
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: LIST
3309: PUSH
3310: LD_OWVAR 67
3314: ARRAY
3315: GREATEREQUAL
3316: IFFALSE 3372
// begin if tick mod [ 9 9$00 , 8 8$00 , 7 7$00 ] [ Difficulty ] = 0 then
3318: LD_OWVAR 1
3322: PUSH
3323: LD_INT 18900
3325: PUSH
3326: LD_INT 16800
3328: PUSH
3329: LD_INT 14700
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: LIST
3336: PUSH
3337: LD_OWVAR 67
3341: ARRAY
3342: MOD
3343: PUSH
3344: LD_INT 0
3346: EQUAL
3347: IFFALSE 3372
// if ru_reserve then
3349: LD_EXP 9
3353: IFFALSE 3372
// begin ru_attack_list := ru_reserve ;
3355: LD_ADDR_EXP 10
3359: PUSH
3360: LD_EXP 9
3364: ST_TO_ADDR
// ru_reserve := [ ] ;
3365: LD_ADDR_EXP 9
3369: PUSH
3370: EMPTY
3371: ST_TO_ADDR
// end ; end ; if ru_attack_list then
3372: LD_EXP 10
3376: IFFALSE 3480
// begin for i = 1 to ru_attack_list do
3378: LD_ADDR_VAR 0 1
3382: PUSH
3383: DOUBLE
3384: LD_INT 1
3386: DEC
3387: ST_TO_ADDR
3388: LD_EXP 10
3392: PUSH
3393: FOR_TO
3394: IFFALSE 3478
// if GetLives ( ru_attack_list [ i ] ) >= 250 then
3396: LD_EXP 10
3400: PUSH
3401: LD_VAR 0 1
3405: ARRAY
3406: PPUSH
3407: CALL_OW 256
3411: PUSH
3412: LD_INT 250
3414: GREATEREQUAL
3415: IFFALSE 3476
// ComAttackUnit ( ru_attack_list [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( ru_attack_list [ i ] ) ] ) , ru_attack_list [ i ] ) ) ;
3417: LD_EXP 10
3421: PUSH
3422: LD_VAR 0 1
3426: ARRAY
3427: PPUSH
3428: LD_INT 81
3430: PUSH
3431: LD_EXP 10
3435: PUSH
3436: LD_VAR 0 1
3440: ARRAY
3441: PPUSH
3442: CALL_OW 255
3446: PUSH
3447: EMPTY
3448: LIST
3449: LIST
3450: PPUSH
3451: CALL_OW 69
3455: PPUSH
3456: LD_EXP 10
3460: PUSH
3461: LD_VAR 0 1
3465: ARRAY
3466: PPUSH
3467: CALL_OW 74
3471: PPUSH
3472: CALL_OW 115
3476: GO 3393
3478: POP
3479: POP
// end ; if GetBehemoth ( 3 ) then
3480: LD_INT 3
3482: PPUSH
3483: CALL 11332 0 1
3487: IFFALSE 3859
// begin if ru_mech >= 4 then
3489: LD_EXP 22
3493: PUSH
3494: LD_INT 4
3496: GREATEREQUAL
3497: IFFALSE 3548
// ru_behemoth_mechanic := [ ru_mech [ 1 ] , ru_mech [ 2 ] , ru_mech [ 3 ] , ru_mech [ 4 ] ] else
3499: LD_ADDR_EXP 15
3503: PUSH
3504: LD_EXP 22
3508: PUSH
3509: LD_INT 1
3511: ARRAY
3512: PUSH
3513: LD_EXP 22
3517: PUSH
3518: LD_INT 2
3520: ARRAY
3521: PUSH
3522: LD_EXP 22
3526: PUSH
3527: LD_INT 3
3529: ARRAY
3530: PUSH
3531: LD_EXP 22
3535: PUSH
3536: LD_INT 4
3538: ARRAY
3539: PUSH
3540: EMPTY
3541: LIST
3542: LIST
3543: LIST
3544: LIST
3545: ST_TO_ADDR
3546: GO 3558
// ru_behemoth_mechanic := ru_mech ;
3548: LD_ADDR_EXP 15
3552: PUSH
3553: LD_EXP 22
3557: ST_TO_ADDR
// for i = 1 to ru_mech do
3558: LD_ADDR_VAR 0 1
3562: PUSH
3563: DOUBLE
3564: LD_INT 1
3566: DEC
3567: ST_TO_ADDR
3568: LD_EXP 22
3572: PUSH
3573: FOR_TO
3574: IFFALSE 3628
// if IsInUnit ( ru_mech [ i ] ) and ru_mech [ i ] in ru_behemoth_mechanic then
3576: LD_EXP 22
3580: PUSH
3581: LD_VAR 0 1
3585: ARRAY
3586: PPUSH
3587: CALL_OW 310
3591: PUSH
3592: LD_EXP 22
3596: PUSH
3597: LD_VAR 0 1
3601: ARRAY
3602: PUSH
3603: LD_EXP 15
3607: IN
3608: AND
3609: IFFALSE 3626
// ComExitBuilding ( ru_mech [ i ] ) ;
3611: LD_EXP 22
3615: PUSH
3616: LD_VAR 0 1
3620: ARRAY
3621: PPUSH
3622: CALL_OW 122
3626: GO 3573
3628: POP
3629: POP
// if UnitsInside ( ru_fac ) = 0 then
3630: LD_INT 14
3632: PPUSH
3633: CALL_OW 313
3637: PUSH
3638: LD_INT 0
3640: EQUAL
3641: IFFALSE 3708
// begin InitHc_All ;
3643: CALL_OW 584
// for i := 1 to 5 do
3647: LD_ADDR_VAR 0 1
3651: PUSH
3652: DOUBLE
3653: LD_INT 1
3655: DEC
3656: ST_TO_ADDR
3657: LD_INT 5
3659: PUSH
3660: FOR_TO
3661: IFFALSE 3706
// begin uc_side := 3 ;
3663: LD_ADDR_OWVAR 20
3667: PUSH
3668: LD_INT 3
3670: ST_TO_ADDR
// uc_nation := 3 ;
3671: LD_ADDR_OWVAR 21
3675: PUSH
3676: LD_INT 3
3678: ST_TO_ADDR
// PrepareHuman ( false , 3 , 7 ) ;
3679: LD_INT 0
3681: PPUSH
3682: LD_INT 3
3684: PPUSH
3685: LD_INT 7
3687: PPUSH
3688: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_fac ) ;
3692: CALL_OW 44
3696: PPUSH
3697: LD_INT 14
3699: PPUSH
3700: CALL_OW 52
// end ;
3704: GO 3660
3706: POP
3707: POP
// end ; if FilterUnitsInArea ( alt_base , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) > 0 then
3708: LD_INT 12
3710: PPUSH
3711: LD_INT 22
3713: PUSH
3714: LD_INT 1
3716: PUSH
3717: EMPTY
3718: LIST
3719: LIST
3720: PUSH
3721: LD_INT 21
3723: PUSH
3724: LD_INT 3
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: PPUSH
3735: CALL_OW 70
3739: PUSH
3740: LD_INT 0
3742: GREATER
3743: IFFALSE 3803
// BehemothAttack ( GetBehemoth ( 3 ) [ 1 ] , FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_weapon , ru_time_lapser ] ] ) , ru_behemoth_mechanic , 97 , 9 ) else
3745: LD_INT 3
3747: PPUSH
3748: CALL 11332 0 1
3752: PUSH
3753: LD_INT 1
3755: ARRAY
3756: PPUSH
3757: LD_INT 21
3759: PUSH
3760: LD_INT 2
3762: PUSH
3763: EMPTY
3764: LIST
3765: LIST
3766: PUSH
3767: LD_INT 34
3769: PUSH
3770: LD_INT 49
3772: PUSH
3773: EMPTY
3774: LIST
3775: LIST
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: PPUSH
3781: CALL_OW 69
3785: PPUSH
3786: LD_EXP 15
3790: PPUSH
3791: LD_INT 97
3793: PPUSH
3794: LD_INT 9
3796: PPUSH
3797: CALL 10829 0 5
3801: GO 3859
// BehemothAttack ( GetBehemoth ( 3 ) [ 1 ] , FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_weapon , ru_time_lapser ] ] ) , ru_behemoth_mechanic , 153 , 102 ) ;
3803: LD_INT 3
3805: PPUSH
3806: CALL 11332 0 1
3810: PUSH
3811: LD_INT 1
3813: ARRAY
3814: PPUSH
3815: LD_INT 21
3817: PUSH
3818: LD_INT 2
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: PUSH
3825: LD_INT 34
3827: PUSH
3828: LD_INT 49
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: PUSH
3835: EMPTY
3836: LIST
3837: LIST
3838: PPUSH
3839: CALL_OW 69
3843: PPUSH
3844: LD_EXP 15
3848: PPUSH
3849: LD_INT 153
3851: PPUSH
3852: LD_INT 102
3854: PPUSH
3855: CALL 10829 0 5
// end ; if ru_bazz = 0 and GetTech ( tech_bazooka , 3 ) = state_researched then
3859: LD_EXP 24
3863: PUSH
3864: LD_INT 0
3866: EQUAL
3867: PUSH
3868: LD_INT 44
3870: PPUSH
3871: LD_INT 3
3873: PPUSH
3874: CALL_OW 321
3878: PUSH
3879: LD_INT 2
3881: EQUAL
3882: AND
3883: IFFALSE 3894
// ComChangeClassToBazooker ( ru_sold ) ;
3885: LD_EXP 20
3889: PPUSH
3890: CALL 9766 0 1
// if ru_bazz then
3894: LD_EXP 24
3898: IFFALSE 3912
// IntBazooka ( ru_bazz , 1 ) ;
3900: LD_EXP 24
3904: PPUSH
3905: LD_INT 1
3907: PPUSH
3908: CALL 9485 0 2
// if GetResourceVisibility ( 67 , 39 , 3 ) = false and GetTech ( tech_SibDet , 3 ) = state_researched then
3912: LD_INT 67
3914: PPUSH
3915: LD_INT 39
3917: PPUSH
3918: LD_INT 3
3920: PPUSH
3921: CALL_OW 440
3925: PUSH
3926: LD_INT 0
3928: EQUAL
3929: PUSH
3930: LD_INT 20
3932: PPUSH
3933: LD_INT 3
3935: PPUSH
3936: CALL_OW 321
3940: PUSH
3941: LD_INT 2
3943: EQUAL
3944: AND
3945: IFFALSE 3966
// ComFindDeposit ( ru_sci [ 1 ] , 67 , 39 ) ;
3947: LD_EXP 23
3951: PUSH
3952: LD_INT 1
3954: ARRAY
3955: PPUSH
3956: LD_INT 67
3958: PPUSH
3959: LD_INT 39
3961: PPUSH
3962: CALL 9064 0 3
// if GetResourceVisibility ( 89 , 66 , 3 ) = false then
3966: LD_INT 89
3968: PPUSH
3969: LD_INT 66
3971: PPUSH
3972: LD_INT 3
3974: PPUSH
3975: CALL_OW 440
3979: PUSH
3980: LD_INT 0
3982: EQUAL
3983: IFFALSE 4004
// ComFindDeposit ( ru_sci [ 1 ] , 87 , 60 ) ;
3985: LD_EXP 23
3989: PUSH
3990: LD_INT 1
3992: ARRAY
3993: PPUSH
3994: LD_INT 87
3996: PPUSH
3997: LD_INT 60
3999: PPUSH
4000: CALL 9064 0 3
// if GetResourceVisibility ( 104 , 94 , 3 ) = false and GetTech ( tech_SibDet , 3 ) = state_researched then
4004: LD_INT 104
4006: PPUSH
4007: LD_INT 94
4009: PPUSH
4010: LD_INT 3
4012: PPUSH
4013: CALL_OW 440
4017: PUSH
4018: LD_INT 0
4020: EQUAL
4021: PUSH
4022: LD_INT 20
4024: PPUSH
4025: LD_INT 3
4027: PPUSH
4028: CALL_OW 321
4032: PUSH
4033: LD_INT 2
4035: EQUAL
4036: AND
4037: IFFALSE 4058
// ComFindDeposit ( ru_sci [ 1 ] , 104 , 94 ) ;
4039: LD_EXP 23
4043: PUSH
4044: LD_INT 1
4046: ARRAY
4047: PPUSH
4048: LD_INT 104
4050: PPUSH
4051: LD_INT 94
4053: PPUSH
4054: CALL 9064 0 3
// if GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) = 1 and need_buldozer then
4058: LD_INT 3
4060: PPUSH
4061: LD_INT 24
4063: PPUSH
4064: LD_INT 53
4066: PPUSH
4067: CALL 7960 0 3
4071: PUSH
4072: LD_INT 1
4074: EQUAL
4075: PUSH
4076: LD_EXP 18
4080: AND
4081: IFFALSE 4222
// begin need_buldozer := false ;
4083: LD_ADDR_EXP 18
4087: PUSH
4088: LD_INT 0
4090: ST_TO_ADDR
// ComMoveXY ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 67 , 39 ) ;
4091: LD_INT 3
4093: PPUSH
4094: LD_INT 24
4096: PPUSH
4097: LD_INT 53
4099: PPUSH
4100: CALL 7960 0 3
4104: PUSH
4105: LD_INT 1
4107: ARRAY
4108: PPUSH
4109: LD_INT 67
4111: PPUSH
4112: LD_INT 39
4114: PPUSH
4115: CALL_OW 111
// AddComMoveXY ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 71 , 10 ) ;
4119: LD_INT 3
4121: PPUSH
4122: LD_INT 24
4124: PPUSH
4125: LD_INT 53
4127: PPUSH
4128: CALL 7960 0 3
4132: PUSH
4133: LD_INT 1
4135: ARRAY
4136: PPUSH
4137: LD_INT 71
4139: PPUSH
4140: LD_INT 10
4142: PPUSH
4143: CALL_OW 171
// CutTreeInArea ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , cut_area ) ;
4147: LD_INT 3
4149: PPUSH
4150: LD_INT 24
4152: PPUSH
4153: LD_INT 53
4155: PPUSH
4156: CALL 7960 0 3
4160: PUSH
4161: LD_INT 1
4163: ARRAY
4164: PPUSH
4165: LD_INT 15
4167: PPUSH
4168: CALL 5551 0 2
// AddComWait ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 0 0$10 ) ;
4172: LD_INT 3
4174: PPUSH
4175: LD_INT 24
4177: PPUSH
4178: LD_INT 53
4180: PPUSH
4181: CALL 7960 0 3
4185: PUSH
4186: LD_INT 1
4188: ARRAY
4189: PPUSH
4190: LD_INT 350
4192: PPUSH
4193: CALL_OW 202
// AddComRecycle ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , ru_fac ) ;
4197: LD_INT 3
4199: PPUSH
4200: LD_INT 24
4202: PPUSH
4203: LD_INT 53
4205: PPUSH
4206: CALL 7960 0 3
4210: PUSH
4211: LD_INT 1
4213: ARRAY
4214: PPUSH
4215: LD_INT 14
4217: PPUSH
4218: CALL_OW 228
// end ; if GetResourceVisibility ( 67 , 39 , 3 ) and HexInfo ( 67 , 39 ) = 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot and EnemyNearbyBase ( 1 , 79 , 45 ) = false then
4222: LD_INT 67
4224: PPUSH
4225: LD_INT 39
4227: PPUSH
4228: LD_INT 3
4230: PPUSH
4231: CALL_OW 440
4235: PUSH
4236: LD_INT 67
4238: PPUSH
4239: LD_INT 39
4241: PPUSH
4242: CALL_OW 428
4246: PUSH
4247: LD_INT 0
4249: EQUAL
4250: AND
4251: PUSH
4252: LD_INT 79
4254: PPUSH
4255: LD_INT 45
4257: PPUSH
4258: CALL_OW 428
4262: PPUSH
4263: CALL_OW 266
4267: PUSH
4268: LD_INT 0
4270: EQUAL
4271: AND
4272: PUSH
4273: LD_INT 1
4275: PPUSH
4276: LD_INT 79
4278: PPUSH
4279: LD_INT 45
4281: PPUSH
4282: CALL 5451 0 3
4286: PUSH
4287: LD_INT 0
4289: EQUAL
4290: AND
4291: IFFALSE 4394
// begin for i = 1 to ru_eng do
4293: LD_ADDR_VAR 0 1
4297: PUSH
4298: DOUBLE
4299: LD_INT 1
4301: DEC
4302: ST_TO_ADDR
4303: LD_EXP 21
4307: PUSH
4308: FOR_TO
4309: IFFALSE 4392
// if IsInUnit ( ru_eng [ i ] ) then
4311: LD_EXP 21
4315: PUSH
4316: LD_VAR 0 1
4320: ARRAY
4321: PPUSH
4322: CALL_OW 310
4326: IFFALSE 4345
// ComExitBuilding ( ru_eng [ i ] ) else
4328: LD_EXP 21
4332: PUSH
4333: LD_VAR 0 1
4337: ARRAY
4338: PPUSH
4339: CALL_OW 122
4343: GO 4390
// if not HasTask ( ru_eng [ i ] ) then
4345: LD_EXP 21
4349: PUSH
4350: LD_VAR 0 1
4354: ARRAY
4355: PPUSH
4356: CALL_OW 314
4360: NOT
4361: IFFALSE 4390
// ComBuild ( ru_eng [ i ] , b_siberite_mine , 67 , 39 , 3 ) ;
4363: LD_EXP 21
4367: PUSH
4368: LD_VAR 0 1
4372: ARRAY
4373: PPUSH
4374: LD_INT 30
4376: PPUSH
4377: LD_INT 67
4379: PPUSH
4380: LD_INT 39
4382: PPUSH
4383: LD_INT 3
4385: PPUSH
4386: CALL_OW 145
4390: GO 4308
4392: POP
4393: POP
// end ; if EnemyNearbyBase ( 1 , 79 , 45 ) = false then
4394: LD_INT 1
4396: PPUSH
4397: LD_INT 79
4399: PPUSH
4400: LD_INT 45
4402: PPUSH
4403: CALL 5451 0 3
4407: PUSH
4408: LD_INT 0
4410: EQUAL
4411: IFFALSE 4607
// begin if HexInfo ( 79 , 45 ) = 0 then
4413: LD_INT 79
4415: PPUSH
4416: LD_INT 45
4418: PPUSH
4419: CALL_OW 428
4423: PUSH
4424: LD_INT 0
4426: EQUAL
4427: IFFALSE 4449
// ComBuildDepot ( ru_eng , 79 , 45 , 3 ) else
4429: LD_EXP 21
4433: PPUSH
4434: LD_INT 79
4436: PPUSH
4437: LD_INT 45
4439: PPUSH
4440: LD_INT 3
4442: PPUSH
4443: CALL 6975 0 4
4447: GO 4607
// if HexInfo ( 89 , 66 ) = 0 and GetResourceVisibility ( 89 , 66 , 3 ) then
4449: LD_INT 89
4451: PPUSH
4452: LD_INT 66
4454: PPUSH
4455: CALL_OW 428
4459: PUSH
4460: LD_INT 0
4462: EQUAL
4463: PUSH
4464: LD_INT 89
4466: PPUSH
4467: LD_INT 66
4469: PPUSH
4470: LD_INT 3
4472: PPUSH
4473: CALL_OW 440
4477: AND
4478: IFFALSE 4607
// begin SetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , mat_cans , 100 ) ;
4480: LD_INT 79
4482: PPUSH
4483: LD_INT 45
4485: PPUSH
4486: CALL_OW 428
4490: PPUSH
4491: CALL_OW 274
4495: PPUSH
4496: LD_INT 1
4498: PPUSH
4499: LD_INT 100
4501: PPUSH
4502: CALL_OW 277
// for i = 1 to ru_eng do
4506: LD_ADDR_VAR 0 1
4510: PUSH
4511: DOUBLE
4512: LD_INT 1
4514: DEC
4515: ST_TO_ADDR
4516: LD_EXP 21
4520: PUSH
4521: FOR_TO
4522: IFFALSE 4605
// if IsInUnit ( ru_eng [ i ] ) then
4524: LD_EXP 21
4528: PUSH
4529: LD_VAR 0 1
4533: ARRAY
4534: PPUSH
4535: CALL_OW 310
4539: IFFALSE 4558
// ComExitBuilding ( ru_eng [ i ] ) else
4541: LD_EXP 21
4545: PUSH
4546: LD_VAR 0 1
4550: ARRAY
4551: PPUSH
4552: CALL_OW 122
4556: GO 4603
// if not HasTask ( ru_eng [ i ] ) then
4558: LD_EXP 21
4562: PUSH
4563: LD_VAR 0 1
4567: ARRAY
4568: PPUSH
4569: CALL_OW 314
4573: NOT
4574: IFFALSE 4603
// ComBuild ( ru_eng [ i ] , b_oil_mine , 89 , 66 , 3 ) ;
4576: LD_EXP 21
4580: PUSH
4581: LD_VAR 0 1
4585: ARRAY
4586: PPUSH
4587: LD_INT 29
4589: PPUSH
4590: LD_INT 89
4592: PPUSH
4593: LD_INT 66
4595: PPUSH
4596: LD_INT 3
4598: PPUSH
4599: CALL_OW 145
4603: GO 4521
4605: POP
4606: POP
// end ; end ; if GetBuilding ( 3 , b_oil_mine ) = 0 and EnemyNearbyBase ( 1 , 36 , 6 ) = false and Cost ( MyBase ( 3 ) , b_oil_mine ) then
4607: LD_INT 3
4609: PPUSH
4610: LD_INT 29
4612: PPUSH
4613: CALL 6209 0 2
4617: PUSH
4618: LD_INT 0
4620: EQUAL
4621: PUSH
4622: LD_INT 1
4624: PPUSH
4625: LD_INT 36
4627: PPUSH
4628: LD_INT 6
4630: PPUSH
4631: CALL 5451 0 3
4635: PUSH
4636: LD_INT 0
4638: EQUAL
4639: AND
4640: PUSH
4641: LD_INT 3
4643: PPUSH
4644: CALL 6118 0 1
4648: PPUSH
4649: LD_INT 29
4651: PPUSH
4652: CALL 5694 0 2
4656: AND
4657: IFFALSE 4760
// begin for i = 1 to ru_eng do
4659: LD_ADDR_VAR 0 1
4663: PUSH
4664: DOUBLE
4665: LD_INT 1
4667: DEC
4668: ST_TO_ADDR
4669: LD_EXP 21
4673: PUSH
4674: FOR_TO
4675: IFFALSE 4758
// begin if IsInUnit ( ru_eng [ i ] ) then
4677: LD_EXP 21
4681: PUSH
4682: LD_VAR 0 1
4686: ARRAY
4687: PPUSH
4688: CALL_OW 310
4692: IFFALSE 4711
// ComExitBuilding ( ru_eng [ i ] ) else
4694: LD_EXP 21
4698: PUSH
4699: LD_VAR 0 1
4703: ARRAY
4704: PPUSH
4705: CALL_OW 122
4709: GO 4756
// if not HasTask ( ru_eng [ i ] ) then
4711: LD_EXP 21
4715: PUSH
4716: LD_VAR 0 1
4720: ARRAY
4721: PPUSH
4722: CALL_OW 314
4726: NOT
4727: IFFALSE 4756
// begin AddComBuild ( ru_eng [ i ] , b_oil_mine , 33 , 4 , 0 ) ;
4729: LD_EXP 21
4733: PUSH
4734: LD_VAR 0 1
4738: ARRAY
4739: PPUSH
4740: LD_INT 29
4742: PPUSH
4743: LD_INT 33
4745: PPUSH
4746: LD_INT 4
4748: PPUSH
4749: LD_INT 0
4751: PPUSH
4752: CALL_OW 205
// end ; end ;
4756: GO 4674
4758: POP
4759: POP
// end ; if ru_eng and HexInfo ( 79 , 45 ) > 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot then
4760: LD_EXP 21
4764: PUSH
4765: LD_INT 79
4767: PPUSH
4768: LD_INT 45
4770: PPUSH
4771: CALL_OW 428
4775: PUSH
4776: LD_INT 0
4778: GREATER
4779: AND
4780: PUSH
4781: LD_INT 79
4783: PPUSH
4784: LD_INT 45
4786: PPUSH
4787: CALL_OW 428
4791: PPUSH
4792: CALL_OW 266
4796: PUSH
4797: LD_INT 0
4799: EQUAL
4800: AND
4801: IFFALSE 4961
// if GetSide ( HexInfo ( 79 , 45 ) ) = 3 and EnemyNearbyBase ( 1 , 79 , 45 ) = false and GetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , 3 ) >= 10 then
4803: LD_INT 79
4805: PPUSH
4806: LD_INT 45
4808: PPUSH
4809: CALL_OW 428
4813: PPUSH
4814: CALL_OW 255
4818: PUSH
4819: LD_INT 3
4821: EQUAL
4822: PUSH
4823: LD_INT 1
4825: PPUSH
4826: LD_INT 79
4828: PPUSH
4829: LD_INT 45
4831: PPUSH
4832: CALL 5451 0 3
4836: PUSH
4837: LD_INT 0
4839: EQUAL
4840: AND
4841: PUSH
4842: LD_INT 79
4844: PPUSH
4845: LD_INT 45
4847: PPUSH
4848: CALL_OW 428
4852: PPUSH
4853: CALL_OW 274
4857: PPUSH
4858: LD_INT 3
4860: PPUSH
4861: CALL_OW 275
4865: PUSH
4866: LD_INT 10
4868: GREATEREQUAL
4869: AND
4870: IFFALSE 4961
// begin if IsInUnit ( ru_eng [ 1 ] ) then
4872: LD_EXP 21
4876: PUSH
4877: LD_INT 1
4879: ARRAY
4880: PPUSH
4881: CALL_OW 310
4885: IFFALSE 4902
// ComExitBuilding ( ru_eng [ 1 ] ) else
4887: LD_EXP 21
4891: PUSH
4892: LD_INT 1
4894: ARRAY
4895: PPUSH
4896: CALL_OW 122
4900: GO 4961
// if not HasTask ( ru_eng [ 1 ] ) then
4902: LD_EXP 21
4906: PUSH
4907: LD_INT 1
4909: ARRAY
4910: PPUSH
4911: CALL_OW 314
4915: NOT
4916: IFFALSE 4961
// begin ComTransport ( ru_eng [ 1 ] , HexInfo ( 79 , 45 ) , 3 ) ;
4918: LD_EXP 21
4922: PUSH
4923: LD_INT 1
4925: ARRAY
4926: PPUSH
4927: LD_INT 79
4929: PPUSH
4930: LD_INT 45
4932: PPUSH
4933: CALL_OW 428
4937: PPUSH
4938: LD_INT 3
4940: PPUSH
4941: CALL_OW 151
// AddComGive ( ru_eng [ 1 ] , ru_depot ) ;
4945: LD_EXP 21
4949: PUSH
4950: LD_INT 1
4952: ARRAY
4953: PPUSH
4954: LD_INT 2
4956: PPUSH
4957: CALL_OW 221
// end ; end ; if ru_eng > 2 and HexInfo ( 79 , 45 ) > 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot then
4961: LD_EXP 21
4965: PUSH
4966: LD_INT 2
4968: GREATER
4969: PUSH
4970: LD_INT 79
4972: PPUSH
4973: LD_INT 45
4975: PPUSH
4976: CALL_OW 428
4980: PUSH
4981: LD_INT 0
4983: GREATER
4984: AND
4985: PUSH
4986: LD_INT 79
4988: PPUSH
4989: LD_INT 45
4991: PPUSH
4992: CALL_OW 428
4996: PPUSH
4997: CALL_OW 266
5001: PUSH
5002: LD_INT 0
5004: EQUAL
5005: AND
5006: IFFALSE 5166
// if GetSide ( HexInfo ( 79 , 45 ) ) = 3 and EnemyNearbyBase ( 1 , 79 , 45 ) = false and GetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , 1 ) > 20 then
5008: LD_INT 79
5010: PPUSH
5011: LD_INT 45
5013: PPUSH
5014: CALL_OW 428
5018: PPUSH
5019: CALL_OW 255
5023: PUSH
5024: LD_INT 3
5026: EQUAL
5027: PUSH
5028: LD_INT 1
5030: PPUSH
5031: LD_INT 79
5033: PPUSH
5034: LD_INT 45
5036: PPUSH
5037: CALL 5451 0 3
5041: PUSH
5042: LD_INT 0
5044: EQUAL
5045: AND
5046: PUSH
5047: LD_INT 79
5049: PPUSH
5050: LD_INT 45
5052: PPUSH
5053: CALL_OW 428
5057: PPUSH
5058: CALL_OW 274
5062: PPUSH
5063: LD_INT 1
5065: PPUSH
5066: CALL_OW 275
5070: PUSH
5071: LD_INT 20
5073: GREATER
5074: AND
5075: IFFALSE 5166
// begin if IsInUnit ( ru_eng [ 2 ] ) then
5077: LD_EXP 21
5081: PUSH
5082: LD_INT 2
5084: ARRAY
5085: PPUSH
5086: CALL_OW 310
5090: IFFALSE 5107
// ComExitBuilding ( ru_eng [ 2 ] ) else
5092: LD_EXP 21
5096: PUSH
5097: LD_INT 2
5099: ARRAY
5100: PPUSH
5101: CALL_OW 122
5105: GO 5166
// if not HasTask ( ru_eng [ 2 ] ) then
5107: LD_EXP 21
5111: PUSH
5112: LD_INT 2
5114: ARRAY
5115: PPUSH
5116: CALL_OW 314
5120: NOT
5121: IFFALSE 5166
// begin ComTransport ( ru_eng [ 2 ] , HexInfo ( 79 , 45 ) , 1 ) ;
5123: LD_EXP 21
5127: PUSH
5128: LD_INT 2
5130: ARRAY
5131: PPUSH
5132: LD_INT 79
5134: PPUSH
5135: LD_INT 45
5137: PPUSH
5138: CALL_OW 428
5142: PPUSH
5143: LD_INT 1
5145: PPUSH
5146: CALL_OW 151
// AddComGive ( ru_eng [ 2 ] , ru_depot ) ;
5150: LD_EXP 21
5154: PUSH
5155: LD_INT 2
5157: ARRAY
5158: PPUSH
5159: LD_INT 2
5161: PPUSH
5162: CALL_OW 221
// end ; end ; if EnemyNearbyBase ( 1 , 59 , 60 ) = false and EnemyNearbyBase ( 1 , 67 , 76 ) = false and EnemyNearbyBase ( 1 , 79 , 100 ) = false then
5166: LD_INT 1
5168: PPUSH
5169: LD_INT 59
5171: PPUSH
5172: LD_INT 60
5174: PPUSH
5175: CALL 5451 0 3
5179: PUSH
5180: LD_INT 0
5182: EQUAL
5183: PUSH
5184: LD_INT 1
5186: PPUSH
5187: LD_INT 67
5189: PPUSH
5190: LD_INT 76
5192: PPUSH
5193: CALL 5451 0 3
5197: PUSH
5198: LD_INT 0
5200: EQUAL
5201: AND
5202: PUSH
5203: LD_INT 1
5205: PPUSH
5206: LD_INT 79
5208: PPUSH
5209: LD_INT 100
5211: PPUSH
5212: CALL 5451 0 3
5216: PUSH
5217: LD_INT 0
5219: EQUAL
5220: AND
5221: IFFALSE 5233
// CollectCrates ( 3 , west_crates ) ;
5223: LD_INT 3
5225: PPUSH
5226: LD_INT 13
5228: PPUSH
5229: CALL 11376 0 2
// end ;
5233: PPOPN 10
5235: END
// every 4 4$00 + 2 2$00 trigger tick <= 53 53$00 or not helps_arrive do var veh ;
5236: LD_OWVAR 1
5240: PUSH
5241: LD_INT 111300
5243: LESSEQUAL
5244: PUSH
5245: LD_EXP 30
5249: NOT
5250: OR
5251: IFFALSE 5448
5253: GO 5255
5255: DISABLE
5256: LD_INT 0
5258: PPUSH
// begin enable ;
5259: ENABLE
// uc_nation := 3 ;
5260: LD_ADDR_OWVAR 21
5264: PUSH
5265: LD_INT 3
5267: ST_TO_ADDR
// uc_side := 3 ;
5268: LD_ADDR_OWVAR 20
5272: PUSH
5273: LD_INT 3
5275: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
5276: LD_ADDR_OWVAR 37
5280: PUSH
5281: LD_INT 22
5283: ST_TO_ADDR
// vc_engine := engine_siberite ;
5284: LD_ADDR_OWVAR 39
5288: PUSH
5289: LD_INT 3
5291: ST_TO_ADDR
// vc_control := control_computer ;
5292: LD_ADDR_OWVAR 38
5296: PUSH
5297: LD_INT 3
5299: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
5300: LD_ADDR_OWVAR 40
5304: PUSH
5305: LD_INT 51
5307: ST_TO_ADDR
// veh := CreateVehicle ;
5308: LD_ADDR_VAR 0 1
5312: PUSH
5313: CALL_OW 45
5317: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5318: LD_VAR 0 1
5322: PPUSH
5323: LD_INT 4
5325: PPUSH
5326: CALL_OW 233
// PlaceUnitArea ( veh , upper_road_area , false ) ;
5330: LD_VAR 0 1
5334: PPUSH
5335: LD_INT 10
5337: PPUSH
5338: LD_INT 0
5340: PPUSH
5341: CALL_OW 49
// SetCargo ( veh , [ 1 , 2 , 3 , 2 ] [ Rand ( 1 , 4 ) ] , 100 ) ;
5345: LD_VAR 0 1
5349: PPUSH
5350: LD_INT 1
5352: PUSH
5353: LD_INT 2
5355: PUSH
5356: LD_INT 3
5358: PUSH
5359: LD_INT 2
5361: PUSH
5362: EMPTY
5363: LIST
5364: LIST
5365: LIST
5366: LIST
5367: PUSH
5368: LD_INT 1
5370: PPUSH
5371: LD_INT 4
5373: PPUSH
5374: CALL_OW 12
5378: ARRAY
5379: PPUSH
5380: LD_INT 100
5382: PPUSH
5383: CALL_OW 290
// ComGive ( veh , ru_depot ) ;
5387: LD_VAR 0 1
5391: PPUSH
5392: LD_INT 2
5394: PPUSH
5395: CALL_OW 161
// AddComMoveToArea ( veh , upper_road_area ) ;
5399: LD_VAR 0 1
5403: PPUSH
5404: LD_INT 10
5406: PPUSH
5407: CALL_OW 173
// Wait ( 0 0$10 ) ;
5411: LD_INT 350
5413: PPUSH
5414: CALL_OW 67
// repeat Wait ( 0 0$01 ) ;
5418: LD_INT 35
5420: PPUSH
5421: CALL_OW 67
// until IsInArea ( veh , upper_road_area ) ;
5425: LD_VAR 0 1
5429: PPUSH
5430: LD_INT 10
5432: PPUSH
5433: CALL_OW 308
5437: IFFALSE 5418
// RemoveUnit ( veh ) ;
5439: LD_VAR 0 1
5443: PPUSH
5444: CALL_OW 64
// end ; end_of_file
5448: PPOPN 1
5450: END
// export function EnemyNearbyBase ( side , x , y ) ; var i ; begin
5451: LD_INT 0
5453: PPUSH
5454: PPUSH
// i := NearestUnitToXY ( FilterAllUnits ( [ f_side , side ] ) , x , y ) ;
5455: LD_ADDR_VAR 0 5
5459: PUSH
5460: LD_INT 22
5462: PUSH
5463: LD_VAR 0 1
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: PPUSH
5472: CALL_OW 69
5476: PPUSH
5477: LD_VAR 0 2
5481: PPUSH
5482: LD_VAR 0 3
5486: PPUSH
5487: CALL_OW 73
5491: ST_TO_ADDR
// result := GetDistUnitXY ( i , x , y ) < 15 or FilterUnitsInArea ( ru_base_area , [ f_side , side ] ) > 0 ;
5492: LD_ADDR_VAR 0 4
5496: PUSH
5497: LD_VAR 0 5
5501: PPUSH
5502: LD_VAR 0 2
5506: PPUSH
5507: LD_VAR 0 3
5511: PPUSH
5512: CALL_OW 297
5516: PUSH
5517: LD_INT 15
5519: LESS
5520: PUSH
5521: LD_INT 2
5523: PPUSH
5524: LD_INT 22
5526: PUSH
5527: LD_VAR 0 1
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: PPUSH
5536: CALL_OW 70
5540: PUSH
5541: LD_INT 0
5543: GREATER
5544: OR
5545: ST_TO_ADDR
// end ;
5546: LD_VAR 0 4
5550: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
5551: LD_INT 0
5553: PPUSH
5554: PPUSH
// area = ListEnvironmentArea ( area ) ;
5555: LD_ADDR_VAR 0 2
5559: PUSH
5560: LD_VAR 0 2
5564: PPUSH
5565: CALL_OW 353
5569: ST_TO_ADDR
// if bulldozer > 0 then
5570: LD_VAR 0 1
5574: PUSH
5575: LD_INT 0
5577: GREATER
5578: IFFALSE 5689
// for i = 1 to area do
5580: LD_ADDR_VAR 0 4
5584: PUSH
5585: DOUBLE
5586: LD_INT 1
5588: DEC
5589: ST_TO_ADDR
5590: LD_VAR 0 2
5594: PUSH
5595: FOR_TO
5596: IFFALSE 5687
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
5598: LD_VAR 0 2
5602: PUSH
5603: LD_VAR 0 4
5607: ARRAY
5608: PUSH
5609: LD_INT 1
5611: ARRAY
5612: PPUSH
5613: LD_VAR 0 2
5617: PUSH
5618: LD_VAR 0 4
5622: ARRAY
5623: PUSH
5624: LD_INT 2
5626: ARRAY
5627: PPUSH
5628: CALL_OW 351
5632: IFFALSE 5685
// if not HasTask ( bulldozer ) then
5634: LD_VAR 0 1
5638: PPUSH
5639: CALL_OW 314
5643: NOT
5644: IFFALSE 5685
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
5646: LD_VAR 0 1
5650: PPUSH
5651: LD_VAR 0 2
5655: PUSH
5656: LD_VAR 0 4
5660: ARRAY
5661: PUSH
5662: LD_INT 1
5664: ARRAY
5665: PPUSH
5666: LD_VAR 0 2
5670: PUSH
5671: LD_VAR 0 4
5675: ARRAY
5676: PUSH
5677: LD_INT 2
5679: ARRAY
5680: PPUSH
5681: CALL_OW 171
5685: GO 5595
5687: POP
5688: POP
// end ;
5689: LD_VAR 0 3
5693: RET
// export function Cost ( bdepot , btype ) ; var pom , cost ; begin
5694: LD_INT 0
5696: PPUSH
5697: PPUSH
5698: PPUSH
// pom := GetBase ( bdepot ) ;
5699: LD_ADDR_VAR 0 4
5703: PUSH
5704: LD_VAR 0 1
5708: PPUSH
5709: CALL_OW 274
5713: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
5714: LD_ADDR_VAR 0 5
5718: PUSH
5719: LD_VAR 0 2
5723: PPUSH
5724: LD_VAR 0 1
5728: PPUSH
5729: CALL_OW 248
5733: PPUSH
5734: CALL_OW 450
5738: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
5739: LD_VAR 0 4
5743: PPUSH
5744: LD_INT 1
5746: PPUSH
5747: CALL_OW 275
5751: PUSH
5752: LD_VAR 0 5
5756: PUSH
5757: LD_INT 1
5759: ARRAY
5760: GREATEREQUAL
5761: PUSH
5762: LD_VAR 0 4
5766: PPUSH
5767: LD_INT 3
5769: PPUSH
5770: CALL_OW 275
5774: PUSH
5775: LD_VAR 0 5
5779: PUSH
5780: LD_INT 3
5782: ARRAY
5783: GREATEREQUAL
5784: AND
5785: IFFALSE 5797
// result := true else
5787: LD_ADDR_VAR 0 3
5791: PUSH
5792: LD_INT 1
5794: ST_TO_ADDR
5795: GO 5805
// result := false ;
5797: LD_ADDR_VAR 0 3
5801: PUSH
5802: LD_INT 0
5804: ST_TO_ADDR
// end ;
5805: LD_VAR 0 3
5809: RET
// export function GetBaseSource ( bdepot ) ; var pom , sor ; begin
5810: LD_INT 0
5812: PPUSH
5813: PPUSH
5814: PPUSH
// pom := GetBase ( bdepot ) ;
5815: LD_ADDR_VAR 0 3
5819: PUSH
5820: LD_VAR 0 1
5824: PPUSH
5825: CALL_OW 274
5829: ST_TO_ADDR
// sor := [ ] ;
5830: LD_ADDR_VAR 0 4
5834: PUSH
5835: EMPTY
5836: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_cans ) ;
5837: LD_ADDR_VAR 0 4
5841: PUSH
5842: LD_VAR 0 4
5846: PUSH
5847: LD_VAR 0 3
5851: PPUSH
5852: LD_INT 1
5854: PPUSH
5855: CALL_OW 275
5859: ADD
5860: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_oil ) ;
5861: LD_ADDR_VAR 0 4
5865: PUSH
5866: LD_VAR 0 4
5870: PUSH
5871: LD_VAR 0 3
5875: PPUSH
5876: LD_INT 2
5878: PPUSH
5879: CALL_OW 275
5883: ADD
5884: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_siberit ) ;
5885: LD_ADDR_VAR 0 4
5889: PUSH
5890: LD_VAR 0 4
5894: PUSH
5895: LD_VAR 0 3
5899: PPUSH
5900: LD_INT 3
5902: PPUSH
5903: CALL_OW 275
5907: ADD
5908: ST_TO_ADDR
// result := sor ;
5909: LD_ADDR_VAR 0 2
5913: PUSH
5914: LD_VAR 0 4
5918: ST_TO_ADDR
// end ;
5919: LD_VAR 0 2
5923: RET
// export function Hex ( x , y ) ; begin
5924: LD_INT 0
5926: PPUSH
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
5927: LD_VAR 0 1
5931: PPUSH
5932: LD_VAR 0 2
5936: PPUSH
5937: CALL_OW 488
5941: PUSH
5942: LD_VAR 0 1
5946: PPUSH
5947: LD_VAR 0 2
5951: PPUSH
5952: CALL_OW 428
5956: PUSH
5957: LD_INT 0
5959: EQUAL
5960: AND
5961: IFFALSE 5973
// result := true else
5963: LD_ADDR_VAR 0 3
5967: PUSH
5968: LD_INT 1
5970: ST_TO_ADDR
5971: GO 5981
// result := false ;
5973: LD_ADDR_VAR 0 3
5977: PUSH
5978: LD_INT 0
5980: ST_TO_ADDR
// end ;
5981: LD_VAR 0 3
5985: RET
// export function NeedBuilding ( side , btype ) ; begin
5986: LD_INT 0
5988: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] , [ f_not , [ f_constructed ] ] ] ) = 0 then
5989: LD_INT 22
5991: PUSH
5992: LD_VAR 0 1
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: PUSH
6001: LD_INT 30
6003: PUSH
6004: LD_VAR 0 2
6008: PUSH
6009: EMPTY
6010: LIST
6011: LIST
6012: PUSH
6013: LD_INT 3
6015: PUSH
6016: LD_INT 57
6018: PUSH
6019: EMPTY
6020: LIST
6021: PUSH
6022: EMPTY
6023: LIST
6024: LIST
6025: PUSH
6026: EMPTY
6027: LIST
6028: LIST
6029: LIST
6030: PPUSH
6031: CALL_OW 69
6035: PUSH
6036: LD_INT 0
6038: EQUAL
6039: IFFALSE 6051
// result := true else
6041: LD_ADDR_VAR 0 3
6045: PUSH
6046: LD_INT 1
6048: ST_TO_ADDR
6049: GO 6059
// result := false ;
6051: LD_ADDR_VAR 0 3
6055: PUSH
6056: LD_INT 0
6058: ST_TO_ADDR
// end ;
6059: LD_VAR 0 3
6063: RET
// export function NeedBase ( side ) ; begin
6064: LD_INT 0
6066: PPUSH
// if NeedBuilding ( side , b_depot ) and NeedBuilding ( side , b_warehouse ) then
6067: LD_VAR 0 1
6071: PPUSH
6072: LD_INT 0
6074: PPUSH
6075: CALL 5986 0 2
6079: PUSH
6080: LD_VAR 0 1
6084: PPUSH
6085: LD_INT 1
6087: PPUSH
6088: CALL 5986 0 2
6092: AND
6093: IFFALSE 6105
// result := true else
6095: LD_ADDR_VAR 0 2
6099: PUSH
6100: LD_INT 1
6102: ST_TO_ADDR
6103: GO 6113
// result := false ;
6105: LD_ADDR_VAR 0 2
6109: PUSH
6110: LD_INT 0
6112: ST_TO_ADDR
// end ;
6113: LD_VAR 0 2
6117: RET
// export function MyBase ( side ) ; begin
6118: LD_INT 0
6120: PPUSH
// if not NeedBase ( side ) then
6121: LD_VAR 0 1
6125: PPUSH
6126: CALL 6064 0 1
6130: NOT
6131: IFFALSE 6196
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ] ) [ 1 ] else
6133: LD_ADDR_VAR 0 2
6137: PUSH
6138: LD_INT 22
6140: PUSH
6141: LD_VAR 0 1
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PUSH
6150: LD_INT 2
6152: PUSH
6153: LD_INT 30
6155: PUSH
6156: LD_INT 0
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: LD_INT 30
6165: PUSH
6166: LD_INT 1
6168: PUSH
6169: EMPTY
6170: LIST
6171: LIST
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: LIST
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: EMPTY
6183: LIST
6184: PPUSH
6185: CALL_OW 69
6189: PUSH
6190: LD_INT 1
6192: ARRAY
6193: ST_TO_ADDR
6194: GO 6204
// result := false ;
6196: LD_ADDR_VAR 0 2
6200: PUSH
6201: LD_INT 0
6203: ST_TO_ADDR
// end ;
6204: LD_VAR 0 2
6208: RET
// export function GetBuilding ( side , btype ) ; begin
6209: LD_INT 0
6211: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) > 0 then
6212: LD_INT 22
6214: PUSH
6215: LD_VAR 0 1
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: LD_INT 30
6226: PUSH
6227: LD_VAR 0 2
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: PPUSH
6240: CALL_OW 69
6244: PUSH
6245: LD_INT 0
6247: GREATER
6248: IFFALSE 6290
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) else
6250: LD_ADDR_VAR 0 3
6254: PUSH
6255: LD_INT 22
6257: PUSH
6258: LD_VAR 0 1
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PUSH
6267: LD_INT 30
6269: PUSH
6270: LD_VAR 0 2
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PPUSH
6283: CALL_OW 69
6287: ST_TO_ADDR
6288: GO 6298
// result := false ;
6290: LD_ADDR_VAR 0 3
6294: PUSH
6295: LD_INT 0
6297: ST_TO_ADDR
// end ;
6298: LD_VAR 0 3
6302: RET
// export function GetCrates ( side ) ; begin
6303: LD_INT 0
6305: PPUSH
// result := 0 ;
6306: LD_ADDR_VAR 0 2
6310: PUSH
6311: LD_INT 0
6313: ST_TO_ADDR
// if MyBase ( side ) then
6314: LD_VAR 0 1
6318: PPUSH
6319: CALL 6118 0 1
6323: IFFALSE 6353
// result := GetResourceType ( GetBase ( MyBase ( side ) ) , mat_cans ) ;
6325: LD_ADDR_VAR 0 2
6329: PUSH
6330: LD_VAR 0 1
6334: PPUSH
6335: CALL 6118 0 1
6339: PPUSH
6340: CALL_OW 274
6344: PPUSH
6345: LD_INT 1
6347: PPUSH
6348: CALL_OW 275
6352: ST_TO_ADDR
// end ;
6353: LD_VAR 0 2
6357: RET
// export function GetLabs ( side ) ; begin
6358: LD_INT 0
6360: PPUSH
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] ] ] ] ) ;
6361: LD_ADDR_VAR 0 2
6365: PUSH
6366: LD_INT 22
6368: PUSH
6369: LD_VAR 0 1
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: PUSH
6378: LD_INT 2
6380: PUSH
6381: LD_INT 30
6383: PUSH
6384: LD_INT 6
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: PUSH
6391: LD_INT 30
6393: PUSH
6394: LD_INT 8
6396: PUSH
6397: EMPTY
6398: LIST
6399: LIST
6400: PUSH
6401: LD_INT 30
6403: PUSH
6404: LD_INT 7
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: PUSH
6417: EMPTY
6418: LIST
6419: LIST
6420: PUSH
6421: EMPTY
6422: LIST
6423: PPUSH
6424: CALL_OW 69
6428: ST_TO_ADDR
// end ;
6429: LD_VAR 0 2
6433: RET
// export function GetLabKinds ( lab ) ; var kind1 , kind2 ; begin
6434: LD_INT 0
6436: PPUSH
6437: PPUSH
6438: PPUSH
// kind1 := GetLabKind ( lab , 1 ) ;
6439: LD_ADDR_VAR 0 3
6443: PUSH
6444: LD_VAR 0 1
6448: PPUSH
6449: LD_INT 1
6451: PPUSH
6452: CALL_OW 268
6456: ST_TO_ADDR
// kind2 := GetLabKind ( lab , 2 ) ;
6457: LD_ADDR_VAR 0 4
6461: PUSH
6462: LD_VAR 0 1
6466: PPUSH
6467: LD_INT 2
6469: PPUSH
6470: CALL_OW 268
6474: ST_TO_ADDR
// result := [ kind1 , kind2 ] ;
6475: LD_ADDR_VAR 0 2
6479: PUSH
6480: LD_VAR 0 3
6484: PUSH
6485: LD_VAR 0 4
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: ST_TO_ADDR
// end ;
6494: LD_VAR 0 2
6498: RET
// export function CheckTechList ( side , tlist ) ; var i ; begin
6499: LD_INT 0
6501: PPUSH
6502: PPUSH
// result := false ;
6503: LD_ADDR_VAR 0 3
6507: PUSH
6508: LD_INT 0
6510: ST_TO_ADDR
// for i = 1 to tlist do
6511: LD_ADDR_VAR 0 4
6515: PUSH
6516: DOUBLE
6517: LD_INT 1
6519: DEC
6520: ST_TO_ADDR
6521: LD_VAR 0 2
6525: PUSH
6526: FOR_TO
6527: IFFALSE 6567
// if GetTech ( tlist [ i ] , side ) <> state_researched then
6529: LD_VAR 0 2
6533: PUSH
6534: LD_VAR 0 4
6538: ARRAY
6539: PPUSH
6540: LD_VAR 0 1
6544: PPUSH
6545: CALL_OW 321
6549: PUSH
6550: LD_INT 2
6552: NONEQUAL
6553: IFFALSE 6565
// begin result := true ;
6555: LD_ADDR_VAR 0 3
6559: PUSH
6560: LD_INT 1
6562: ST_TO_ADDR
// break ;
6563: GO 6567
// end ;
6565: GO 6526
6567: POP
6568: POP
// end ;
6569: LD_VAR 0 3
6573: RET
// export function ResearchTechList ( side , tlist ) ; var i , lab , pom , tmp , list , mylab , basic_tech ; begin
6574: LD_INT 0
6576: PPUSH
6577: PPUSH
6578: PPUSH
6579: PPUSH
6580: PPUSH
6581: PPUSH
6582: PPUSH
6583: PPUSH
// lab := GetLabs ( side ) ;
6584: LD_ADDR_VAR 0 5
6588: PUSH
6589: LD_VAR 0 1
6593: PPUSH
6594: CALL 6358 0 1
6598: ST_TO_ADDR
// tmp := 0 ;
6599: LD_ADDR_VAR 0 7
6603: PUSH
6604: LD_INT 0
6606: ST_TO_ADDR
// list := [ ] ;
6607: LD_ADDR_VAR 0 8
6611: PUSH
6612: EMPTY
6613: ST_TO_ADDR
// basic_tech := [ 35 , 45 , 46 , 47 , 1 , 2 , 48 , 49 , 50 , 20 ] ;
6614: LD_ADDR_VAR 0 10
6618: PUSH
6619: LD_INT 35
6621: PUSH
6622: LD_INT 45
6624: PUSH
6625: LD_INT 46
6627: PUSH
6628: LD_INT 47
6630: PUSH
6631: LD_INT 1
6633: PUSH
6634: LD_INT 2
6636: PUSH
6637: LD_INT 48
6639: PUSH
6640: LD_INT 49
6642: PUSH
6643: LD_INT 50
6645: PUSH
6646: LD_INT 20
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: ST_TO_ADDR
// for i = 1 to tlist do
6661: LD_ADDR_VAR 0 4
6665: PUSH
6666: DOUBLE
6667: LD_INT 1
6669: DEC
6670: ST_TO_ADDR
6671: LD_VAR 0 2
6675: PUSH
6676: FOR_TO
6677: IFFALSE 6729
// if GetTech ( tlist [ i ] , side ) <> state_researched then
6679: LD_VAR 0 2
6683: PUSH
6684: LD_VAR 0 4
6688: ARRAY
6689: PPUSH
6690: LD_VAR 0 1
6694: PPUSH
6695: CALL_OW 321
6699: PUSH
6700: LD_INT 2
6702: NONEQUAL
6703: IFFALSE 6727
// list := list ^ tlist [ i ] ;
6705: LD_ADDR_VAR 0 8
6709: PUSH
6710: LD_VAR 0 8
6714: PUSH
6715: LD_VAR 0 2
6719: PUSH
6720: LD_VAR 0 4
6724: ARRAY
6725: ADD
6726: ST_TO_ADDR
6727: GO 6676
6729: POP
6730: POP
// if list then
6731: LD_VAR 0 8
6735: IFFALSE 6900
// begin for i = 1 to lab do
6737: LD_ADDR_VAR 0 4
6741: PUSH
6742: DOUBLE
6743: LD_INT 1
6745: DEC
6746: ST_TO_ADDR
6747: LD_VAR 0 5
6751: PUSH
6752: FOR_TO
6753: IFFALSE 6823
// if ( list [ 1 ] in basic_tech ) or ( GetTechLab ( list [ 1 ] ) in GetLabKinds ( lab [ i ] ) ) then
6755: LD_VAR 0 8
6759: PUSH
6760: LD_INT 1
6762: ARRAY
6763: PUSH
6764: LD_VAR 0 10
6768: IN
6769: PUSH
6770: LD_VAR 0 8
6774: PUSH
6775: LD_INT 1
6777: ARRAY
6778: PPUSH
6779: CALL_OW 481
6783: PUSH
6784: LD_VAR 0 5
6788: PUSH
6789: LD_VAR 0 4
6793: ARRAY
6794: PPUSH
6795: CALL 6434 0 1
6799: IN
6800: OR
6801: IFFALSE 6821
// begin mylab := lab [ i ] ;
6803: LD_ADDR_VAR 0 9
6807: PUSH
6808: LD_VAR 0 5
6812: PUSH
6813: LD_VAR 0 4
6817: ARRAY
6818: ST_TO_ADDR
// break ;
6819: GO 6823
// end ;
6821: GO 6752
6823: POP
6824: POP
// if mylab then
6825: LD_VAR 0 9
6829: IFFALSE 6890
// begin if BuildingStatus ( mylab ) = bs_idle then
6831: LD_VAR 0 9
6835: PPUSH
6836: CALL_OW 461
6840: PUSH
6841: LD_INT 2
6843: EQUAL
6844: IFFALSE 6888
// for i = 1 to list do
6846: LD_ADDR_VAR 0 4
6850: PUSH
6851: DOUBLE
6852: LD_INT 1
6854: DEC
6855: ST_TO_ADDR
6856: LD_VAR 0 8
6860: PUSH
6861: FOR_TO
6862: IFFALSE 6886
// AddComResearch ( mylab , list [ i ] ) ;
6864: LD_VAR 0 9
6868: PPUSH
6869: LD_VAR 0 8
6873: PUSH
6874: LD_VAR 0 4
6878: ARRAY
6879: PPUSH
6880: CALL_OW 184
6884: GO 6861
6886: POP
6887: POP
// end else
6888: GO 6898
// result := false ;
6890: LD_ADDR_VAR 0 3
6894: PUSH
6895: LD_INT 0
6897: ST_TO_ADDR
// end else
6898: GO 6908
// result := false ;
6900: LD_ADDR_VAR 0 3
6904: PUSH
6905: LD_INT 0
6907: ST_TO_ADDR
// end ;
6908: LD_VAR 0 3
6912: RET
// export function GetTowers ( side ) ; begin
6913: LD_INT 0
6915: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
6916: LD_ADDR_VAR 0 2
6920: PUSH
6921: LD_INT 22
6923: PUSH
6924: LD_VAR 0 1
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PUSH
6933: LD_INT 2
6935: PUSH
6936: LD_INT 30
6938: PUSH
6939: LD_INT 32
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: PUSH
6946: LD_INT 30
6948: PUSH
6949: LD_INT 33
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: LIST
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PPUSH
6965: CALL_OW 69
6969: ST_TO_ADDR
// end ;
6970: LD_VAR 0 2
6974: RET
// export function ComBuildDepot ( plist , x , y , d ) ; var i ; begin
6975: LD_INT 0
6977: PPUSH
6978: PPUSH
// if Hex ( x , y ) then
6979: LD_VAR 0 2
6983: PPUSH
6984: LD_VAR 0 3
6988: PPUSH
6989: CALL 5924 0 2
6993: IFFALSE 7068
// for i = 1 to plist do
6995: LD_ADDR_VAR 0 6
6999: PUSH
7000: DOUBLE
7001: LD_INT 1
7003: DEC
7004: ST_TO_ADDR
7005: LD_VAR 0 1
7009: PUSH
7010: FOR_TO
7011: IFFALSE 7066
// if not HasTask ( plist [ i ] ) then
7013: LD_VAR 0 1
7017: PUSH
7018: LD_VAR 0 6
7022: ARRAY
7023: PPUSH
7024: CALL_OW 314
7028: NOT
7029: IFFALSE 7064
// ComBuild ( plist [ i ] , b_depot , x , y , d ) ;
7031: LD_VAR 0 1
7035: PUSH
7036: LD_VAR 0 6
7040: ARRAY
7041: PPUSH
7042: LD_INT 0
7044: PPUSH
7045: LD_VAR 0 2
7049: PPUSH
7050: LD_VAR 0 3
7054: PPUSH
7055: LD_VAR 0 4
7059: PPUSH
7060: CALL_OW 145
7064: GO 7010
7066: POP
7067: POP
// end ;
7068: LD_VAR 0 5
7072: RET
// export function ComBuildWarehouse ( plist , bident ) ; var i ; begin
7073: LD_INT 0
7075: PPUSH
7076: PPUSH
// if GetBType ( bident ) = b_depot and Cost ( bident , b_warehouse ) and not BuildingsInProgress ( GetSide ( plist [ 1 ] ) ) then
7077: LD_VAR 0 2
7081: PPUSH
7082: CALL_OW 266
7086: PUSH
7087: LD_INT 0
7089: EQUAL
7090: PUSH
7091: LD_VAR 0 2
7095: PPUSH
7096: LD_INT 1
7098: PPUSH
7099: CALL 5694 0 2
7103: AND
7104: PUSH
7105: LD_VAR 0 1
7109: PUSH
7110: LD_INT 1
7112: ARRAY
7113: PPUSH
7114: CALL_OW 255
7118: PPUSH
7119: CALL_OW 345
7123: NOT
7124: AND
7125: IFFALSE 7221
// begin ComUpgrade ( bident ) ;
7127: LD_VAR 0 2
7131: PPUSH
7132: CALL_OW 146
// for i = 1 to plist do
7136: LD_ADDR_VAR 0 4
7140: PUSH
7141: DOUBLE
7142: LD_INT 1
7144: DEC
7145: ST_TO_ADDR
7146: LD_VAR 0 1
7150: PUSH
7151: FOR_TO
7152: IFFALSE 7209
// if not HasTask ( plist [ i ] ) then
7154: LD_VAR 0 1
7158: PUSH
7159: LD_VAR 0 4
7163: ARRAY
7164: PPUSH
7165: CALL_OW 314
7169: NOT
7170: IFFALSE 7207
// ComMoveXY ( plist [ i ] , GetX ( bident ) , GetY ( bident ) ) ;
7172: LD_VAR 0 1
7176: PUSH
7177: LD_VAR 0 4
7181: ARRAY
7182: PPUSH
7183: LD_VAR 0 2
7187: PPUSH
7188: CALL_OW 250
7192: PPUSH
7193: LD_VAR 0 2
7197: PPUSH
7198: CALL_OW 251
7202: PPUSH
7203: CALL_OW 111
7207: GO 7151
7209: POP
7210: POP
// result := true ;
7211: LD_ADDR_VAR 0 3
7215: PUSH
7216: LD_INT 1
7218: ST_TO_ADDR
// end else
7219: GO 7229
// result := false ;
7221: LD_ADDR_VAR 0 3
7225: PUSH
7226: LD_INT 0
7228: ST_TO_ADDR
// end ;
7229: LD_VAR 0 3
7233: RET
// export function ComBuildLab ( plist , x , y , d ) ; var i ; begin
7234: LD_INT 0
7236: PPUSH
7237: PPUSH
// if GetCrates ( GetSide ( plist [ 1 ] ) ) >= 20 and Hex ( x , y ) then
7238: LD_VAR 0 1
7242: PUSH
7243: LD_INT 1
7245: ARRAY
7246: PPUSH
7247: CALL_OW 255
7251: PPUSH
7252: CALL 6303 0 1
7256: PUSH
7257: LD_INT 20
7259: GREATEREQUAL
7260: PUSH
7261: LD_VAR 0 2
7265: PPUSH
7266: LD_VAR 0 3
7270: PPUSH
7271: CALL 5924 0 2
7275: AND
7276: IFFALSE 7361
// begin for i = 1 to plist do
7278: LD_ADDR_VAR 0 6
7282: PUSH
7283: DOUBLE
7284: LD_INT 1
7286: DEC
7287: ST_TO_ADDR
7288: LD_VAR 0 1
7292: PUSH
7293: FOR_TO
7294: IFFALSE 7349
// if not HasTask ( plist [ i ] ) then
7296: LD_VAR 0 1
7300: PUSH
7301: LD_VAR 0 6
7305: ARRAY
7306: PPUSH
7307: CALL_OW 314
7311: NOT
7312: IFFALSE 7347
// ComBuild ( plist [ i ] , b_lab , x , y , d ) ;
7314: LD_VAR 0 1
7318: PUSH
7319: LD_VAR 0 6
7323: ARRAY
7324: PPUSH
7325: LD_INT 6
7327: PPUSH
7328: LD_VAR 0 2
7332: PPUSH
7333: LD_VAR 0 3
7337: PPUSH
7338: LD_VAR 0 4
7342: PPUSH
7343: CALL_OW 145
7347: GO 7293
7349: POP
7350: POP
// result := true ;
7351: LD_ADDR_VAR 0 5
7355: PUSH
7356: LD_INT 1
7358: ST_TO_ADDR
// end else
7359: GO 7369
// result := false ;
7361: LD_ADDR_VAR 0 5
7365: PUSH
7366: LD_INT 0
7368: ST_TO_ADDR
// end ;
7369: LD_VAR 0 5
7373: RET
// export function ComBuildLabKind ( lab , bkind1 , bkind2 ) ; begin
7374: LD_INT 0
7376: PPUSH
// if GetLabKind ( lab , 1 ) = b_lab_basic and GetLabKind ( lab , 2 ) = b_lab_basic then
7377: LD_VAR 0 1
7381: PPUSH
7382: LD_INT 1
7384: PPUSH
7385: CALL_OW 268
7389: PUSH
7390: LD_INT 9
7392: EQUAL
7393: PUSH
7394: LD_VAR 0 1
7398: PPUSH
7399: LD_INT 2
7401: PPUSH
7402: CALL_OW 268
7406: PUSH
7407: LD_INT 9
7409: EQUAL
7410: AND
7411: IFFALSE 7508
// begin if Cost ( lab , bkind1 ) and Cost ( lab , bkind2 ) and BuildingStatus ( lab ) = bs_idle then
7413: LD_VAR 0 1
7417: PPUSH
7418: LD_VAR 0 2
7422: PPUSH
7423: CALL 5694 0 2
7427: PUSH
7428: LD_VAR 0 1
7432: PPUSH
7433: LD_VAR 0 3
7437: PPUSH
7438: CALL 5694 0 2
7442: AND
7443: PUSH
7444: LD_VAR 0 1
7448: PPUSH
7449: CALL_OW 461
7453: PUSH
7454: LD_INT 2
7456: EQUAL
7457: AND
7458: IFFALSE 7498
// begin ComUpgradeLab ( lab , bkind1 ) ;
7460: LD_VAR 0 1
7464: PPUSH
7465: LD_VAR 0 2
7469: PPUSH
7470: CALL_OW 147
// AddComUpgradeLab ( lab , bkind2 ) ;
7474: LD_VAR 0 1
7478: PPUSH
7479: LD_VAR 0 3
7483: PPUSH
7484: CALL_OW 207
// result := true ;
7488: LD_ADDR_VAR 0 4
7492: PUSH
7493: LD_INT 1
7495: ST_TO_ADDR
// end else
7496: GO 7506
// result := false ;
7498: LD_ADDR_VAR 0 4
7502: PUSH
7503: LD_INT 0
7505: ST_TO_ADDR
// end else
7506: GO 7516
// result := false ;
7508: LD_ADDR_VAR 0 4
7512: PUSH
7513: LD_INT 0
7515: ST_TO_ADDR
// end ;
7516: LD_VAR 0 4
7520: RET
// export function CheckTowersStatus ( plist , tlist ) ; var i , tmp , p , c ; begin
7521: LD_INT 0
7523: PPUSH
7524: PPUSH
7525: PPUSH
7526: PPUSH
7527: PPUSH
// p := 1 ;
7528: LD_ADDR_VAR 0 6
7532: PUSH
7533: LD_INT 1
7535: ST_TO_ADDR
// for i = 1 to ( tlist / 4 ) do
7536: LD_ADDR_VAR 0 4
7540: PUSH
7541: DOUBLE
7542: LD_INT 1
7544: DEC
7545: ST_TO_ADDR
7546: LD_VAR 0 2
7550: PUSH
7551: LD_INT 4
7553: DIVREAL
7554: PUSH
7555: FOR_TO
7556: IFFALSE 7805
// begin if HexInfo ( tlist [ p + 1 ] , tlist [ p + 2 ] ) = 0 and Hex ( tlist [ p + 1 ] , tlist [ p + 2 ] ) and GetCrates ( GetSide ( plist [ 1 ] ) ) >= 20 then
7558: LD_VAR 0 2
7562: PUSH
7563: LD_VAR 0 6
7567: PUSH
7568: LD_INT 1
7570: PLUS
7571: ARRAY
7572: PPUSH
7573: LD_VAR 0 2
7577: PUSH
7578: LD_VAR 0 6
7582: PUSH
7583: LD_INT 2
7585: PLUS
7586: ARRAY
7587: PPUSH
7588: CALL_OW 428
7592: PUSH
7593: LD_INT 0
7595: EQUAL
7596: PUSH
7597: LD_VAR 0 2
7601: PUSH
7602: LD_VAR 0 6
7606: PUSH
7607: LD_INT 1
7609: PLUS
7610: ARRAY
7611: PPUSH
7612: LD_VAR 0 2
7616: PUSH
7617: LD_VAR 0 6
7621: PUSH
7622: LD_INT 2
7624: PLUS
7625: ARRAY
7626: PPUSH
7627: CALL 5924 0 2
7631: AND
7632: PUSH
7633: LD_VAR 0 1
7637: PUSH
7638: LD_INT 1
7640: ARRAY
7641: PPUSH
7642: CALL_OW 255
7646: PPUSH
7647: CALL 6303 0 1
7651: PUSH
7652: LD_INT 20
7654: GREATEREQUAL
7655: AND
7656: IFFALSE 7773
// begin for c = 1 to plist do
7658: LD_ADDR_VAR 0 7
7662: PUSH
7663: DOUBLE
7664: LD_INT 1
7666: DEC
7667: ST_TO_ADDR
7668: LD_VAR 0 1
7672: PUSH
7673: FOR_TO
7674: IFFALSE 7767
// if not HasTask ( plist [ c ] ) then
7676: LD_VAR 0 1
7680: PUSH
7681: LD_VAR 0 7
7685: ARRAY
7686: PPUSH
7687: CALL_OW 314
7691: NOT
7692: IFFALSE 7765
// ComBuild ( plist [ c ] , tlist [ p ] , tlist [ p + 1 ] , tlist [ p + 2 ] , tlist [ p + 3 ] ) ;
7694: LD_VAR 0 1
7698: PUSH
7699: LD_VAR 0 7
7703: ARRAY
7704: PPUSH
7705: LD_VAR 0 2
7709: PUSH
7710: LD_VAR 0 6
7714: ARRAY
7715: PPUSH
7716: LD_VAR 0 2
7720: PUSH
7721: LD_VAR 0 6
7725: PUSH
7726: LD_INT 1
7728: PLUS
7729: ARRAY
7730: PPUSH
7731: LD_VAR 0 2
7735: PUSH
7736: LD_VAR 0 6
7740: PUSH
7741: LD_INT 2
7743: PLUS
7744: ARRAY
7745: PPUSH
7746: LD_VAR 0 2
7750: PUSH
7751: LD_VAR 0 6
7755: PUSH
7756: LD_INT 3
7758: PLUS
7759: ARRAY
7760: PPUSH
7761: CALL_OW 145
7765: GO 7673
7767: POP
7768: POP
// break ;
7769: GO 7805
// end else
7771: GO 7803
// if ( p + 4 < tlist ) then
7773: LD_VAR 0 6
7777: PUSH
7778: LD_INT 4
7780: PLUS
7781: PUSH
7782: LD_VAR 0 2
7786: LESS
7787: IFFALSE 7803
// p := p + 4 ;
7789: LD_ADDR_VAR 0 6
7793: PUSH
7794: LD_VAR 0 6
7798: PUSH
7799: LD_INT 4
7801: PLUS
7802: ST_TO_ADDR
// end ;
7803: GO 7555
7805: POP
7806: POP
// end ;
7807: LD_VAR 0 3
7811: RET
// export function CheckWeaponOnTowers ( side , wlist ) ; var i , tmp , fac ; begin
7812: LD_INT 0
7814: PPUSH
7815: PPUSH
7816: PPUSH
7817: PPUSH
// tmp := GetTowers ( side ) ;
7818: LD_ADDR_VAR 0 5
7822: PUSH
7823: LD_VAR 0 1
7827: PPUSH
7828: CALL 6913 0 1
7832: ST_TO_ADDR
// fac := GetBuilding ( side , b_factory ) [ 1 ] ;
7833: LD_ADDR_VAR 0 6
7837: PUSH
7838: LD_VAR 0 1
7842: PPUSH
7843: LD_INT 3
7845: PPUSH
7846: CALL 6209 0 2
7850: PUSH
7851: LD_INT 1
7853: ARRAY
7854: ST_TO_ADDR
// if fac then
7855: LD_VAR 0 6
7859: IFFALSE 7955
// for i = 1 to tmp do
7861: LD_ADDR_VAR 0 4
7865: PUSH
7866: DOUBLE
7867: LD_INT 1
7869: DEC
7870: ST_TO_ADDR
7871: LD_VAR 0 5
7875: PUSH
7876: FOR_TO
7877: IFFALSE 7953
// if GetBWeapon ( tmp [ i ] ) = 0 then
7879: LD_VAR 0 5
7883: PUSH
7884: LD_VAR 0 4
7888: ARRAY
7889: PPUSH
7890: CALL_OW 269
7894: PUSH
7895: LD_INT 0
7897: EQUAL
7898: IFFALSE 7951
// begin if BuildingStatus ( fac ) = bs_idle then
7900: LD_VAR 0 6
7904: PPUSH
7905: CALL_OW 461
7909: PUSH
7910: LD_INT 2
7912: EQUAL
7913: IFFALSE 7949
// ComPlaceWeapon ( tmp [ i ] , wlist [ Rand ( 1 , wlist ) ] ) ;
7915: LD_VAR 0 5
7919: PUSH
7920: LD_VAR 0 4
7924: ARRAY
7925: PPUSH
7926: LD_VAR 0 2
7930: PUSH
7931: LD_INT 1
7933: PPUSH
7934: LD_VAR 0 2
7938: PPUSH
7939: CALL_OW 12
7943: ARRAY
7944: PPUSH
7945: CALL_OW 148
// break ;
7949: GO 7953
// end ;
7951: GO 7876
7953: POP
7954: POP
// end ;
7955: LD_VAR 0 3
7959: RET
// export function GetVehicle ( side , chassis , weapon ) ; begin
7960: LD_INT 0
7962: PPUSH
// if FilterAllUnits ( [ [ [ f_side , side ] , [ f_weapon , weapon ] , [ f_chassis , chassis ] ] ] ) then
7963: LD_INT 22
7965: PUSH
7966: LD_VAR 0 1
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: PUSH
7975: LD_INT 34
7977: PUSH
7978: LD_VAR 0 3
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: PUSH
7987: LD_INT 31
7989: PUSH
7990: LD_VAR 0 2
7994: PUSH
7995: EMPTY
7996: LIST
7997: LIST
7998: PUSH
7999: EMPTY
8000: LIST
8001: LIST
8002: LIST
8003: PUSH
8004: EMPTY
8005: LIST
8006: PPUSH
8007: CALL_OW 69
8011: IFFALSE 8069
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_weapon , weapon ] , [ f_chassis , chassis ] ] ] ) else
8013: LD_ADDR_VAR 0 4
8017: PUSH
8018: LD_INT 22
8020: PUSH
8021: LD_VAR 0 1
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: PUSH
8030: LD_INT 34
8032: PUSH
8033: LD_VAR 0 3
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: PUSH
8042: LD_INT 31
8044: PUSH
8045: LD_VAR 0 2
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: LIST
8058: PUSH
8059: EMPTY
8060: LIST
8061: PPUSH
8062: CALL_OW 69
8066: ST_TO_ADDR
8067: GO 8077
// result := false ;
8069: LD_ADDR_VAR 0 4
8073: PUSH
8074: LD_INT 0
8076: ST_TO_ADDR
// end ;
8077: LD_VAR 0 4
8081: RET
// export function ComProduce ( factory , chassis , engine , control , weapon ) ; begin
8082: LD_INT 0
8084: PPUSH
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) and CostOfVehicle ( chassis , engine , control , weapon ) [ 1 ] <= GetBaseSource ( factory ) [ 1 ] and CostOfVehicle ( chassis , engine , control , weapon ) [ 2 ] <= GetBaseSource ( factory ) [ 2 ] and CostOfVehicle ( chassis , engine , control , weapon ) [ 3 ] <= GetBaseSource ( factory ) [ 3 ] then
8085: LD_VAR 0 1
8089: PPUSH
8090: LD_VAR 0 2
8094: PPUSH
8095: LD_VAR 0 3
8099: PPUSH
8100: LD_VAR 0 4
8104: PPUSH
8105: LD_VAR 0 5
8109: PPUSH
8110: CALL_OW 448
8114: PUSH
8115: LD_VAR 0 2
8119: PPUSH
8120: LD_VAR 0 3
8124: PPUSH
8125: LD_VAR 0 4
8129: PPUSH
8130: LD_VAR 0 5
8134: PPUSH
8135: CALL_OW 449
8139: PUSH
8140: LD_INT 1
8142: ARRAY
8143: PUSH
8144: LD_VAR 0 1
8148: PPUSH
8149: CALL 5810 0 1
8153: PUSH
8154: LD_INT 1
8156: ARRAY
8157: LESSEQUAL
8158: AND
8159: PUSH
8160: LD_VAR 0 2
8164: PPUSH
8165: LD_VAR 0 3
8169: PPUSH
8170: LD_VAR 0 4
8174: PPUSH
8175: LD_VAR 0 5
8179: PPUSH
8180: CALL_OW 449
8184: PUSH
8185: LD_INT 2
8187: ARRAY
8188: PUSH
8189: LD_VAR 0 1
8193: PPUSH
8194: CALL 5810 0 1
8198: PUSH
8199: LD_INT 2
8201: ARRAY
8202: LESSEQUAL
8203: AND
8204: PUSH
8205: LD_VAR 0 2
8209: PPUSH
8210: LD_VAR 0 3
8214: PPUSH
8215: LD_VAR 0 4
8219: PPUSH
8220: LD_VAR 0 5
8224: PPUSH
8225: CALL_OW 449
8229: PUSH
8230: LD_INT 3
8232: ARRAY
8233: PUSH
8234: LD_VAR 0 1
8238: PPUSH
8239: CALL 5810 0 1
8243: PUSH
8244: LD_INT 3
8246: ARRAY
8247: LESSEQUAL
8248: AND
8249: IFFALSE 8296
// begin if debug then
8251: LD_EXP 1
8255: IFFALSE 8265
// display_strings := Factory work! ;
8257: LD_ADDR_OWVAR 47
8261: PUSH
8262: LD_STRING Factory work!
8264: ST_TO_ADDR
// ComConstruct ( factory , chassis , engine , control , weapon ) ;
8265: LD_VAR 0 1
8269: PPUSH
8270: LD_VAR 0 2
8274: PPUSH
8275: LD_VAR 0 3
8279: PPUSH
8280: LD_VAR 0 4
8284: PPUSH
8285: LD_VAR 0 5
8289: PPUSH
8290: CALL_OW 125
// end else
8294: GO 8304
// result := false ;
8296: LD_ADDR_VAR 0 6
8300: PUSH
8301: LD_INT 0
8303: ST_TO_ADDR
// end ;
8304: LD_VAR 0 6
8308: RET
// export function GetBuildingList ( side , type ) ; var i , tmp , filter ; begin
8309: LD_INT 0
8311: PPUSH
8312: PPUSH
8313: PPUSH
8314: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , type ] ] ) ;
8315: LD_ADDR_VAR 0 6
8319: PUSH
8320: LD_INT 22
8322: PUSH
8323: LD_VAR 0 1
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: PUSH
8332: LD_INT 30
8334: PUSH
8335: LD_VAR 0 2
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: PUSH
8344: EMPTY
8345: LIST
8346: LIST
8347: PPUSH
8348: CALL_OW 69
8352: ST_TO_ADDR
// tmp := [ ] ;
8353: LD_ADDR_VAR 0 5
8357: PUSH
8358: EMPTY
8359: ST_TO_ADDR
// for i = 1 to filter do
8360: LD_ADDR_VAR 0 4
8364: PUSH
8365: DOUBLE
8366: LD_INT 1
8368: DEC
8369: ST_TO_ADDR
8370: LD_VAR 0 6
8374: PUSH
8375: FOR_TO
8376: IFFALSE 8464
// begin tmp := tmp ^ [ [ GetBType ( filter [ i ] ) , GetX ( filter [ i ] ) , GetY ( filter [ i ] ) , GetDir ( filter [ i ] ) ] ] ;
8378: LD_ADDR_VAR 0 5
8382: PUSH
8383: LD_VAR 0 5
8387: PUSH
8388: LD_VAR 0 6
8392: PUSH
8393: LD_VAR 0 4
8397: ARRAY
8398: PPUSH
8399: CALL_OW 266
8403: PUSH
8404: LD_VAR 0 6
8408: PUSH
8409: LD_VAR 0 4
8413: ARRAY
8414: PPUSH
8415: CALL_OW 250
8419: PUSH
8420: LD_VAR 0 6
8424: PUSH
8425: LD_VAR 0 4
8429: ARRAY
8430: PPUSH
8431: CALL_OW 251
8435: PUSH
8436: LD_VAR 0 6
8440: PUSH
8441: LD_VAR 0 4
8445: ARRAY
8446: PPUSH
8447: CALL_OW 254
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: PUSH
8458: EMPTY
8459: LIST
8460: ADD
8461: ST_TO_ADDR
// end ;
8462: GO 8375
8464: POP
8465: POP
// result := tmp ;
8466: LD_ADDR_VAR 0 3
8470: PUSH
8471: LD_VAR 0 5
8475: ST_TO_ADDR
// end ;
8476: LD_VAR 0 3
8480: RET
// export function ComBuildLabList ( plist , list ) ; var i , p ; begin
8481: LD_INT 0
8483: PPUSH
8484: PPUSH
8485: PPUSH
// for i = 1 to list do
8486: LD_ADDR_VAR 0 4
8490: PUSH
8491: DOUBLE
8492: LD_INT 1
8494: DEC
8495: ST_TO_ADDR
8496: LD_VAR 0 2
8500: PUSH
8501: FOR_TO
8502: IFFALSE 9057
// begin if HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) > 0 then
8504: LD_VAR 0 2
8508: PUSH
8509: LD_VAR 0 4
8513: ARRAY
8514: PUSH
8515: LD_INT 1
8517: ARRAY
8518: PPUSH
8519: LD_VAR 0 2
8523: PUSH
8524: LD_VAR 0 4
8528: ARRAY
8529: PUSH
8530: LD_INT 2
8532: ARRAY
8533: PPUSH
8534: CALL_OW 428
8538: PUSH
8539: LD_INT 0
8541: GREATER
8542: IFFALSE 8828
// begin if GetNation ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) = nation_russian then
8544: LD_VAR 0 2
8548: PUSH
8549: LD_VAR 0 4
8553: ARRAY
8554: PUSH
8555: LD_INT 1
8557: ARRAY
8558: PPUSH
8559: LD_VAR 0 2
8563: PUSH
8564: LD_VAR 0 4
8568: ARRAY
8569: PUSH
8570: LD_INT 2
8572: ARRAY
8573: PPUSH
8574: CALL_OW 428
8578: PPUSH
8579: CALL_OW 248
8583: PUSH
8584: LD_INT 3
8586: EQUAL
8587: IFFALSE 8713
// begin if GetResourceType ( GetBase ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) , 3 ) >= 15 then
8589: LD_VAR 0 2
8593: PUSH
8594: LD_VAR 0 4
8598: ARRAY
8599: PUSH
8600: LD_INT 1
8602: ARRAY
8603: PPUSH
8604: LD_VAR 0 2
8608: PUSH
8609: LD_VAR 0 4
8613: ARRAY
8614: PUSH
8615: LD_INT 2
8617: ARRAY
8618: PPUSH
8619: CALL_OW 428
8623: PPUSH
8624: CALL_OW 274
8628: PPUSH
8629: LD_INT 3
8631: PPUSH
8632: CALL_OW 275
8636: PUSH
8637: LD_INT 15
8639: GREATEREQUAL
8640: IFFALSE 8711
// ComBuildLabKind ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) , list [ i ] [ 4 ] , list [ i ] [ 5 ] ) ;
8642: LD_VAR 0 2
8646: PUSH
8647: LD_VAR 0 4
8651: ARRAY
8652: PUSH
8653: LD_INT 1
8655: ARRAY
8656: PPUSH
8657: LD_VAR 0 2
8661: PUSH
8662: LD_VAR 0 4
8666: ARRAY
8667: PUSH
8668: LD_INT 2
8670: ARRAY
8671: PPUSH
8672: CALL_OW 428
8676: PPUSH
8677: LD_VAR 0 2
8681: PUSH
8682: LD_VAR 0 4
8686: ARRAY
8687: PUSH
8688: LD_INT 4
8690: ARRAY
8691: PPUSH
8692: LD_VAR 0 2
8696: PUSH
8697: LD_VAR 0 4
8701: ARRAY
8702: PUSH
8703: LD_INT 5
8705: ARRAY
8706: PPUSH
8707: CALL 7374 0 3
// end else
8711: GO 8782
// ComBuildLabKind ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) , list [ i ] [ 4 ] , list [ i ] [ 5 ] ) ;
8713: LD_VAR 0 2
8717: PUSH
8718: LD_VAR 0 4
8722: ARRAY
8723: PUSH
8724: LD_INT 1
8726: ARRAY
8727: PPUSH
8728: LD_VAR 0 2
8732: PUSH
8733: LD_VAR 0 4
8737: ARRAY
8738: PUSH
8739: LD_INT 2
8741: ARRAY
8742: PPUSH
8743: CALL_OW 428
8747: PPUSH
8748: LD_VAR 0 2
8752: PUSH
8753: LD_VAR 0 4
8757: ARRAY
8758: PUSH
8759: LD_INT 4
8761: ARRAY
8762: PPUSH
8763: LD_VAR 0 2
8767: PUSH
8768: LD_VAR 0 4
8772: ARRAY
8773: PUSH
8774: LD_INT 5
8776: ARRAY
8777: PPUSH
8778: CALL 7374 0 3
// ComCompleteUpgrade ( plist , HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) ;
8782: LD_VAR 0 1
8786: PPUSH
8787: LD_VAR 0 2
8791: PUSH
8792: LD_VAR 0 4
8796: ARRAY
8797: PUSH
8798: LD_INT 1
8800: ARRAY
8801: PPUSH
8802: LD_VAR 0 2
8806: PUSH
8807: LD_VAR 0 4
8811: ARRAY
8812: PUSH
8813: LD_INT 2
8815: ARRAY
8816: PPUSH
8817: CALL_OW 428
8821: PPUSH
8822: CALL 10326 0 2
// end else
8826: GO 9055
// if Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , b_lab ) and Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , list [ i ] [ 4 ] ) and Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , list [ i ] [ 5 ] ) then
8828: LD_VAR 0 1
8832: PUSH
8833: LD_INT 1
8835: ARRAY
8836: PPUSH
8837: CALL_OW 255
8841: PPUSH
8842: CALL 6118 0 1
8846: PPUSH
8847: LD_INT 6
8849: PPUSH
8850: CALL 5694 0 2
8854: PUSH
8855: LD_VAR 0 1
8859: PUSH
8860: LD_INT 1
8862: ARRAY
8863: PPUSH
8864: CALL_OW 255
8868: PPUSH
8869: CALL 6118 0 1
8873: PPUSH
8874: LD_VAR 0 2
8878: PUSH
8879: LD_VAR 0 4
8883: ARRAY
8884: PUSH
8885: LD_INT 4
8887: ARRAY
8888: PPUSH
8889: CALL 5694 0 2
8893: AND
8894: PUSH
8895: LD_VAR 0 1
8899: PUSH
8900: LD_INT 1
8902: ARRAY
8903: PPUSH
8904: CALL_OW 255
8908: PPUSH
8909: CALL 6118 0 1
8913: PPUSH
8914: LD_VAR 0 2
8918: PUSH
8919: LD_VAR 0 4
8923: ARRAY
8924: PUSH
8925: LD_INT 5
8927: ARRAY
8928: PPUSH
8929: CALL 5694 0 2
8933: AND
8934: IFFALSE 9055
// for p = 1 to plist do
8936: LD_ADDR_VAR 0 5
8940: PUSH
8941: DOUBLE
8942: LD_INT 1
8944: DEC
8945: ST_TO_ADDR
8946: LD_VAR 0 1
8950: PUSH
8951: FOR_TO
8952: IFFALSE 9053
// if IsInUnit ( plist [ p ] ) then
8954: LD_VAR 0 1
8958: PUSH
8959: LD_VAR 0 5
8963: ARRAY
8964: PPUSH
8965: CALL_OW 310
8969: IFFALSE 8988
// ComExitBuilding ( plist [ p ] ) else
8971: LD_VAR 0 1
8975: PUSH
8976: LD_VAR 0 5
8980: ARRAY
8981: PPUSH
8982: CALL_OW 122
8986: GO 9051
// ComBuild ( plist [ p ] , b_lab , list [ i ] [ 1 ] , list [ i ] [ 2 ] , list [ i ] [ 3 ] ) ;
8988: LD_VAR 0 1
8992: PUSH
8993: LD_VAR 0 5
8997: ARRAY
8998: PPUSH
8999: LD_INT 6
9001: PPUSH
9002: LD_VAR 0 2
9006: PUSH
9007: LD_VAR 0 4
9011: ARRAY
9012: PUSH
9013: LD_INT 1
9015: ARRAY
9016: PPUSH
9017: LD_VAR 0 2
9021: PUSH
9022: LD_VAR 0 4
9026: ARRAY
9027: PUSH
9028: LD_INT 2
9030: ARRAY
9031: PPUSH
9032: LD_VAR 0 2
9036: PUSH
9037: LD_VAR 0 4
9041: ARRAY
9042: PUSH
9043: LD_INT 3
9045: ARRAY
9046: PPUSH
9047: CALL_OW 145
9051: GO 8951
9053: POP
9054: POP
// end ;
9055: GO 8501
9057: POP
9058: POP
// end ;
9059: LD_VAR 0 3
9063: RET
// export function ComFindDeposit ( sci , x , y ) ; begin
9064: LD_INT 0
9066: PPUSH
// if IsInUnit ( sci ) then
9067: LD_VAR 0 1
9071: PPUSH
9072: CALL_OW 310
9076: IFFALSE 9089
// ComExitBuilding ( sci ) else
9078: LD_VAR 0 1
9082: PPUSH
9083: CALL_OW 122
9087: GO 9120
// if not HasTask ( sci ) then
9089: LD_VAR 0 1
9093: PPUSH
9094: CALL_OW 314
9098: NOT
9099: IFFALSE 9120
// begin ComMoveXY ( sci , x , y ) ;
9101: LD_VAR 0 1
9105: PPUSH
9106: LD_VAR 0 2
9110: PPUSH
9111: LD_VAR 0 3
9115: PPUSH
9116: CALL_OW 111
// end ; end ;
9120: LD_VAR 0 4
9124: RET
// export function NeedHeal ( side , tag_list , list ) ; var i , filter , tmp ; begin
9125: LD_INT 0
9127: PPUSH
9128: PPUSH
9129: PPUSH
9130: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) diff list ;
9131: LD_ADDR_VAR 0 6
9135: PUSH
9136: LD_INT 22
9138: PUSH
9139: LD_VAR 0 1
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: PUSH
9148: LD_INT 21
9150: PUSH
9151: LD_INT 1
9153: PUSH
9154: EMPTY
9155: LIST
9156: LIST
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: PPUSH
9162: CALL_OW 69
9166: PUSH
9167: LD_VAR 0 3
9171: DIFF
9172: ST_TO_ADDR
// tmp := tag_list ;
9173: LD_ADDR_VAR 0 7
9177: PUSH
9178: LD_VAR 0 2
9182: ST_TO_ADDR
// for i = 1 to filter do
9183: LD_ADDR_VAR 0 5
9187: PUSH
9188: DOUBLE
9189: LD_INT 1
9191: DEC
9192: ST_TO_ADDR
9193: LD_VAR 0 6
9197: PUSH
9198: FOR_TO
9199: IFFALSE 9468
// begin if GetLives ( filter [ i ] ) = 1000 and GetTag ( filter [ i ] ) >= 100 then
9201: LD_VAR 0 6
9205: PUSH
9206: LD_VAR 0 5
9210: ARRAY
9211: PPUSH
9212: CALL_OW 256
9216: PUSH
9217: LD_INT 1000
9219: EQUAL
9220: PUSH
9221: LD_VAR 0 6
9225: PUSH
9226: LD_VAR 0 5
9230: ARRAY
9231: PPUSH
9232: CALL_OW 110
9236: PUSH
9237: LD_INT 100
9239: GREATEREQUAL
9240: AND
9241: IFFALSE 9283
// begin SetTag ( filter [ i ] , 0 ) ;
9243: LD_VAR 0 6
9247: PUSH
9248: LD_VAR 0 5
9252: ARRAY
9253: PPUSH
9254: LD_INT 0
9256: PPUSH
9257: CALL_OW 109
// tmp := tmp diff filter [ i ] ;
9261: LD_ADDR_VAR 0 7
9265: PUSH
9266: LD_VAR 0 7
9270: PUSH
9271: LD_VAR 0 6
9275: PUSH
9276: LD_VAR 0 5
9280: ARRAY
9281: DIFF
9282: ST_TO_ADDR
// end ; if GetLives ( filter [ i ] ) < 1000 then
9283: LD_VAR 0 6
9287: PUSH
9288: LD_VAR 0 5
9292: ARRAY
9293: PPUSH
9294: CALL_OW 256
9298: PUSH
9299: LD_INT 1000
9301: LESS
9302: IFFALSE 9466
// begin if not filter [ i ] in tmp then
9304: LD_VAR 0 6
9308: PUSH
9309: LD_VAR 0 5
9313: ARRAY
9314: PUSH
9315: LD_VAR 0 7
9319: IN
9320: NOT
9321: IFFALSE 9345
// tmp := tmp ^ filter [ i ] ;
9323: LD_ADDR_VAR 0 7
9327: PUSH
9328: LD_VAR 0 7
9332: PUSH
9333: LD_VAR 0 6
9337: PUSH
9338: LD_VAR 0 5
9342: ARRAY
9343: ADD
9344: ST_TO_ADDR
// if GetLives ( filter [ i ] ) < 250 then
9345: LD_VAR 0 6
9349: PUSH
9350: LD_VAR 0 5
9354: ARRAY
9355: PPUSH
9356: CALL_OW 256
9360: PUSH
9361: LD_INT 250
9363: LESS
9364: IFFALSE 9386
// SetTag ( filter [ i ] , 100 ) else
9366: LD_VAR 0 6
9370: PUSH
9371: LD_VAR 0 5
9375: ARRAY
9376: PPUSH
9377: LD_INT 100
9379: PPUSH
9380: CALL_OW 109
9384: GO 9466
// if GetLives ( filter [ i ] ) < 500 then
9386: LD_VAR 0 6
9390: PUSH
9391: LD_VAR 0 5
9395: ARRAY
9396: PPUSH
9397: CALL_OW 256
9401: PUSH
9402: LD_INT 500
9404: LESS
9405: IFFALSE 9427
// SetTag ( filter [ i ] , 101 ) else
9407: LD_VAR 0 6
9411: PUSH
9412: LD_VAR 0 5
9416: ARRAY
9417: PPUSH
9418: LD_INT 101
9420: PPUSH
9421: CALL_OW 109
9425: GO 9466
// if GetLives ( filter [ i ] ) < 1000 then
9427: LD_VAR 0 6
9431: PUSH
9432: LD_VAR 0 5
9436: ARRAY
9437: PPUSH
9438: CALL_OW 256
9442: PUSH
9443: LD_INT 1000
9445: LESS
9446: IFFALSE 9466
// SetTag ( filter [ i ] , 102 ) ;
9448: LD_VAR 0 6
9452: PUSH
9453: LD_VAR 0 5
9457: ARRAY
9458: PPUSH
9459: LD_INT 102
9461: PPUSH
9462: CALL_OW 109
// end ; end ;
9466: GO 9198
9468: POP
9469: POP
// result := tmp ;
9470: LD_ADDR_VAR 0 4
9474: PUSH
9475: LD_VAR 0 7
9479: ST_TO_ADDR
// end ;
9480: LD_VAR 0 4
9484: RET
// export function IntBazooka ( list , side ) ; var ta , c , i , filter ; begin
9485: LD_INT 0
9487: PPUSH
9488: PPUSH
9489: PPUSH
9490: PPUSH
9491: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9492: LD_ADDR_VAR 0 7
9496: PUSH
9497: LD_INT 22
9499: PUSH
9500: LD_VAR 0 2
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PUSH
9509: LD_INT 3
9511: PUSH
9512: LD_INT 21
9514: PUSH
9515: LD_INT 3
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PPUSH
9530: CALL_OW 69
9534: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
9535: LD_ADDR_VAR 0 5
9539: PUSH
9540: LD_INT 1
9542: PPUSH
9543: LD_INT 3
9545: PPUSH
9546: CALL_OW 12
9550: ST_TO_ADDR
// if filter > 0 then
9551: LD_VAR 0 7
9555: PUSH
9556: LD_INT 0
9558: GREATER
9559: IFFALSE 9761
// for i = 1 to list do
9561: LD_ADDR_VAR 0 6
9565: PUSH
9566: DOUBLE
9567: LD_INT 1
9569: DEC
9570: ST_TO_ADDR
9571: LD_VAR 0 1
9575: PUSH
9576: FOR_TO
9577: IFFALSE 9759
// for ta in filter do
9579: LD_ADDR_VAR 0 4
9583: PUSH
9584: LD_VAR 0 7
9588: PUSH
9589: FOR_IN
9590: IFFALSE 9755
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
9592: LD_VAR 0 1
9596: PUSH
9597: LD_VAR 0 6
9601: ARRAY
9602: PPUSH
9603: LD_VAR 0 4
9607: PPUSH
9608: CALL_OW 296
9612: PUSH
9613: LD_INT 13
9615: LESSEQUAL
9616: IFFALSE 9753
// begin case c of 1 :
9618: LD_VAR 0 5
9622: PUSH
9623: LD_INT 1
9625: DOUBLE
9626: EQUAL
9627: IFTRUE 9631
9629: GO 9669
9631: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
9632: LD_VAR 0 1
9636: PUSH
9637: LD_VAR 0 6
9641: ARRAY
9642: PPUSH
9643: LD_VAR 0 4
9647: PPUSH
9648: CALL_OW 250
9652: PPUSH
9653: LD_VAR 0 4
9657: PPUSH
9658: CALL_OW 251
9662: PPUSH
9663: CALL_OW 154
9667: GO 9753
9669: LD_INT 2
9671: DOUBLE
9672: EQUAL
9673: IFTRUE 9677
9675: GO 9741
9677: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
9678: LD_VAR 0 1
9682: PUSH
9683: LD_VAR 0 6
9687: ARRAY
9688: PPUSH
9689: LD_VAR 0 4
9693: PPUSH
9694: CALL_OW 250
9698: PUSH
9699: LD_INT 1
9701: NEG
9702: PPUSH
9703: LD_INT 1
9705: PPUSH
9706: CALL_OW 12
9710: PLUS
9711: PPUSH
9712: LD_VAR 0 4
9716: PPUSH
9717: CALL_OW 251
9721: PUSH
9722: LD_INT 1
9724: NEG
9725: PPUSH
9726: LD_INT 1
9728: PPUSH
9729: CALL_OW 12
9733: PLUS
9734: PPUSH
9735: CALL_OW 153
9739: GO 9753
9741: LD_INT 3
9743: DOUBLE
9744: EQUAL
9745: IFTRUE 9749
9747: GO 9752
9749: POP
// ; end ;
9750: GO 9753
9752: POP
// end ; end ;
9753: GO 9589
9755: POP
9756: POP
9757: GO 9576
9759: POP
9760: POP
// end ;
9761: LD_VAR 0 3
9765: RET
// export function ComChangeClassToBazooker ( plist ) ; var i ; begin
9766: LD_INT 0
9768: PPUSH
9769: PPUSH
// for i = 1 to plist do
9770: LD_ADDR_VAR 0 3
9774: PUSH
9775: DOUBLE
9776: LD_INT 1
9778: DEC
9779: ST_TO_ADDR
9780: LD_VAR 0 1
9784: PUSH
9785: FOR_TO
9786: IFFALSE 9988
// if not IsInUnit ( plist [ i ] ) in FilterAllUnits ( [ [ f_btype , b_barracks ] ] ) then
9788: LD_VAR 0 1
9792: PUSH
9793: LD_VAR 0 3
9797: ARRAY
9798: PPUSH
9799: CALL_OW 310
9803: PUSH
9804: LD_INT 30
9806: PUSH
9807: LD_INT 5
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: PUSH
9814: EMPTY
9815: LIST
9816: PPUSH
9817: CALL_OW 69
9821: IN
9822: NOT
9823: IFFALSE 9968
// begin if IsInUnit ( plist [ i ] ) then
9825: LD_VAR 0 1
9829: PUSH
9830: LD_VAR 0 3
9834: ARRAY
9835: PPUSH
9836: CALL_OW 310
9840: IFFALSE 9859
// ComExitBuilding ( plist [ i ] ) else
9842: LD_VAR 0 1
9846: PUSH
9847: LD_VAR 0 3
9851: ARRAY
9852: PPUSH
9853: CALL_OW 122
9857: GO 9966
// if not HasTask ( plist [ i ] ) then
9859: LD_VAR 0 1
9863: PUSH
9864: LD_VAR 0 3
9868: ARRAY
9869: PPUSH
9870: CALL_OW 314
9874: NOT
9875: IFFALSE 9966
// begin ComEnterUnit ( plist [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , GetSide ( plist [ 1 ] ) ] , [ f_btype , b_barracks ] ] ) , plist [ i ] ) ) ;
9877: LD_VAR 0 1
9881: PUSH
9882: LD_VAR 0 3
9886: ARRAY
9887: PPUSH
9888: LD_INT 22
9890: PUSH
9891: LD_VAR 0 1
9895: PUSH
9896: LD_INT 1
9898: ARRAY
9899: PPUSH
9900: CALL_OW 255
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: PUSH
9909: LD_INT 30
9911: PUSH
9912: LD_INT 5
9914: PUSH
9915: EMPTY
9916: LIST
9917: LIST
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: PPUSH
9923: CALL_OW 69
9927: PPUSH
9928: LD_VAR 0 1
9932: PUSH
9933: LD_VAR 0 3
9937: ARRAY
9938: PPUSH
9939: CALL_OW 74
9943: PPUSH
9944: CALL_OW 120
// AddComChangeProfession ( plist [ i ] , 9 ) ;
9948: LD_VAR 0 1
9952: PUSH
9953: LD_VAR 0 3
9957: ARRAY
9958: PPUSH
9959: LD_INT 9
9961: PPUSH
9962: CALL_OW 183
// end ; end else
9966: GO 9986
// ComChangeProfession ( plist [ i ] , 9 ) ;
9968: LD_VAR 0 1
9972: PUSH
9973: LD_VAR 0 3
9977: ARRAY
9978: PPUSH
9979: LD_INT 9
9981: PPUSH
9982: CALL_OW 123
9986: GO 9785
9988: POP
9989: POP
// end ;
9990: LD_VAR 0 2
9994: RET
// export function GetHuman ( side ) ; begin
9995: LD_INT 0
9997: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
9998: LD_ADDR_VAR 0 2
10002: PUSH
10003: LD_INT 22
10005: PUSH
10006: LD_VAR 0 1
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PUSH
10015: LD_INT 21
10017: PUSH
10018: LD_INT 1
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: PUSH
10025: LD_INT 2
10027: PUSH
10028: LD_INT 25
10030: PUSH
10031: LD_INT 1
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: PUSH
10038: LD_INT 25
10040: PUSH
10041: LD_INT 2
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PUSH
10048: LD_INT 25
10050: PUSH
10051: LD_INT 3
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: PUSH
10058: LD_INT 25
10060: PUSH
10061: LD_INT 4
10063: PUSH
10064: EMPTY
10065: LIST
10066: LIST
10067: PUSH
10068: EMPTY
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: LIST
10079: PPUSH
10080: CALL_OW 69
10084: ST_TO_ADDR
// end ;
10085: LD_VAR 0 2
10089: RET
// export function PrepareTigers ( area ) ; var tiger , i ; begin
10090: LD_INT 0
10092: PPUSH
10093: PPUSH
10094: PPUSH
// uc_side := 0 ;
10095: LD_ADDR_OWVAR 20
10099: PUSH
10100: LD_INT 0
10102: ST_TO_ADDR
// uc_nation := 0 ;
10103: LD_ADDR_OWVAR 21
10107: PUSH
10108: LD_INT 0
10110: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
10111: LD_ADDR_VAR 0 4
10115: PUSH
10116: DOUBLE
10117: LD_INT 1
10119: DEC
10120: ST_TO_ADDR
10121: LD_INT 4
10123: PUSH
10124: LD_INT 5
10126: PUSH
10127: LD_INT 6
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: LIST
10134: PUSH
10135: LD_OWVAR 67
10139: ARRAY
10140: PUSH
10141: FOR_TO
10142: IFFALSE 10213
// begin hc_class = class_tiger ;
10144: LD_ADDR_OWVAR 28
10148: PUSH
10149: LD_INT 14
10151: ST_TO_ADDR
// hc_gallery = sandnature ;
10152: LD_ADDR_OWVAR 33
10156: PUSH
10157: LD_STRING sandnature
10159: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 50 ) ;
10160: LD_ADDR_OWVAR 35
10164: PUSH
10165: LD_INT 0
10167: PPUSH
10168: LD_INT 50
10170: PPUSH
10171: CALL_OW 12
10175: ST_TO_ADDR
// hc_face_number = 3 ;
10176: LD_ADDR_OWVAR 34
10180: PUSH
10181: LD_INT 3
10183: ST_TO_ADDR
// tiger := CreateHuman ;
10184: LD_ADDR_VAR 0 3
10188: PUSH
10189: CALL_OW 44
10193: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
10194: LD_VAR 0 3
10198: PPUSH
10199: LD_VAR 0 1
10203: PPUSH
10204: LD_INT 0
10206: PPUSH
10207: CALL_OW 49
// end ;
10211: GO 10141
10213: POP
10214: POP
// end ;
10215: LD_VAR 0 2
10219: RET
// export function PrepareApemans ( area ) ; var ape , i ; begin
10220: LD_INT 0
10222: PPUSH
10223: PPUSH
10224: PPUSH
// uc_side := 0 ;
10225: LD_ADDR_OWVAR 20
10229: PUSH
10230: LD_INT 0
10232: ST_TO_ADDR
// uc_nation := 0 ;
10233: LD_ADDR_OWVAR 21
10237: PUSH
10238: LD_INT 0
10240: ST_TO_ADDR
// for i = 1 to 8 do
10241: LD_ADDR_VAR 0 4
10245: PUSH
10246: DOUBLE
10247: LD_INT 1
10249: DEC
10250: ST_TO_ADDR
10251: LD_INT 8
10253: PUSH
10254: FOR_TO
10255: IFFALSE 10319
// begin hc_class = class_apeman ;
10257: LD_ADDR_OWVAR 28
10261: PUSH
10262: LD_INT 12
10264: ST_TO_ADDR
// hc_gallery =  ;
10265: LD_ADDR_OWVAR 33
10269: PUSH
10270: LD_STRING 
10272: ST_TO_ADDR
// hc_agressivity = Rand ( - 2 , 2 ) ;
10273: LD_ADDR_OWVAR 35
10277: PUSH
10278: LD_INT 2
10280: NEG
10281: PPUSH
10282: LD_INT 2
10284: PPUSH
10285: CALL_OW 12
10289: ST_TO_ADDR
// ape := CreateHuman ;
10290: LD_ADDR_VAR 0 3
10294: PUSH
10295: CALL_OW 44
10299: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
10300: LD_VAR 0 3
10304: PPUSH
10305: LD_VAR 0 1
10309: PPUSH
10310: LD_INT 0
10312: PPUSH
10313: CALL_OW 49
// end ;
10317: GO 10254
10319: POP
10320: POP
// end ;
10321: LD_VAR 0 2
10325: RET
// export function ComCompleteUpgrade ( plist , b ) ; var i ; begin
10326: LD_INT 0
10328: PPUSH
10329: PPUSH
// if BuildingStatus ( b ) = bs_build then
10330: LD_VAR 0 2
10334: PPUSH
10335: CALL_OW 461
10339: PUSH
10340: LD_INT 1
10342: EQUAL
10343: IFFALSE 10529
// for i = 1 to plist do
10345: LD_ADDR_VAR 0 4
10349: PUSH
10350: DOUBLE
10351: LD_INT 1
10353: DEC
10354: ST_TO_ADDR
10355: LD_VAR 0 1
10359: PUSH
10360: FOR_TO
10361: IFFALSE 10527
// if IsInUnit ( plist [ i ] ) then
10363: LD_VAR 0 1
10367: PUSH
10368: LD_VAR 0 4
10372: ARRAY
10373: PPUSH
10374: CALL_OW 310
10378: IFFALSE 10461
// begin ComExitBuilding ( plist [ i ] ) ;
10380: LD_VAR 0 1
10384: PUSH
10385: LD_VAR 0 4
10389: ARRAY
10390: PPUSH
10391: CALL_OW 122
// AddTaskList ( plist [ i ] , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10395: LD_VAR 0 1
10399: PUSH
10400: LD_VAR 0 4
10404: ARRAY
10405: PPUSH
10406: LD_STRING h
10408: PUSH
10409: LD_VAR 0 2
10413: PPUSH
10414: CALL_OW 250
10418: PUSH
10419: LD_VAR 0 2
10423: PPUSH
10424: CALL_OW 251
10428: PUSH
10429: LD_VAR 0 2
10433: PUSH
10434: LD_INT 0
10436: PUSH
10437: LD_INT 0
10439: PUSH
10440: LD_INT 0
10442: PUSH
10443: EMPTY
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: PUSH
10452: EMPTY
10453: LIST
10454: PPUSH
10455: CALL_OW 447
// end else
10459: GO 10525
// SetTaskList ( plist [ i ] , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10461: LD_VAR 0 1
10465: PUSH
10466: LD_VAR 0 4
10470: ARRAY
10471: PPUSH
10472: LD_STRING h
10474: PUSH
10475: LD_VAR 0 2
10479: PPUSH
10480: CALL_OW 250
10484: PUSH
10485: LD_VAR 0 2
10489: PPUSH
10490: CALL_OW 251
10494: PUSH
10495: LD_VAR 0 2
10499: PUSH
10500: LD_INT 0
10502: PUSH
10503: LD_INT 0
10505: PUSH
10506: LD_INT 0
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: PUSH
10518: EMPTY
10519: LIST
10520: PPUSH
10521: CALL_OW 446
10525: GO 10360
10527: POP
10528: POP
// end ;
10529: LD_VAR 0 3
10533: RET
// export function WantRepair ( eng ) ; begin
10534: LD_INT 0
10536: PPUSH
// if GetTaskList ( eng ) > 0 then
10537: LD_VAR 0 1
10541: PPUSH
10542: CALL_OW 437
10546: PUSH
10547: LD_INT 0
10549: GREATER
10550: IFFALSE 10595
// begin if GetTaskList ( eng ) [ 1 ] [ 1 ] = o then
10552: LD_VAR 0 1
10556: PPUSH
10557: CALL_OW 437
10561: PUSH
10562: LD_INT 1
10564: ARRAY
10565: PUSH
10566: LD_INT 1
10568: ARRAY
10569: PUSH
10570: LD_STRING o
10572: EQUAL
10573: IFFALSE 10585
// result := true else
10575: LD_ADDR_VAR 0 2
10579: PUSH
10580: LD_INT 1
10582: ST_TO_ADDR
10583: GO 10593
// result := false ;
10585: LD_ADDR_VAR 0 2
10589: PUSH
10590: LD_INT 0
10592: ST_TO_ADDR
// end else
10593: GO 10603
// result := false ;
10595: LD_ADDR_VAR 0 2
10599: PUSH
10600: LD_INT 0
10602: ST_TO_ADDR
// end ;
10603: LD_VAR 0 2
10607: RET
// export function GetBuildingsList ( side , btype ) ; var i , tmp , list ; begin
10608: LD_INT 0
10610: PPUSH
10611: PPUSH
10612: PPUSH
10613: PPUSH
// if btype = - 1 then
10614: LD_VAR 0 2
10618: PUSH
10619: LD_INT 1
10621: NEG
10622: EQUAL
10623: IFFALSE 10663
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) else
10625: LD_ADDR_VAR 0 5
10629: PUSH
10630: LD_INT 22
10632: PUSH
10633: LD_VAR 0 1
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PUSH
10642: LD_INT 21
10644: PUSH
10645: LD_INT 3
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PPUSH
10656: CALL_OW 69
10660: ST_TO_ADDR
10661: GO 10701
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
10663: LD_ADDR_VAR 0 5
10667: PUSH
10668: LD_INT 22
10670: PUSH
10671: LD_VAR 0 1
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: PUSH
10680: LD_INT 30
10682: PUSH
10683: LD_VAR 0 2
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PPUSH
10696: CALL_OW 69
10700: ST_TO_ADDR
// list := [ ] ;
10701: LD_ADDR_VAR 0 6
10705: PUSH
10706: EMPTY
10707: ST_TO_ADDR
// for i = 1 to tmp do
10708: LD_ADDR_VAR 0 4
10712: PUSH
10713: DOUBLE
10714: LD_INT 1
10716: DEC
10717: ST_TO_ADDR
10718: LD_VAR 0 5
10722: PUSH
10723: FOR_TO
10724: IFFALSE 10812
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
10726: LD_ADDR_VAR 0 6
10730: PUSH
10731: LD_VAR 0 6
10735: PUSH
10736: LD_VAR 0 5
10740: PUSH
10741: LD_VAR 0 4
10745: ARRAY
10746: PPUSH
10747: CALL_OW 266
10751: PUSH
10752: LD_VAR 0 5
10756: PUSH
10757: LD_VAR 0 4
10761: ARRAY
10762: PPUSH
10763: CALL_OW 250
10767: PUSH
10768: LD_VAR 0 5
10772: PUSH
10773: LD_VAR 0 4
10777: ARRAY
10778: PPUSH
10779: CALL_OW 251
10783: PUSH
10784: LD_VAR 0 5
10788: PUSH
10789: LD_VAR 0 4
10793: ARRAY
10794: PPUSH
10795: CALL_OW 254
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: PUSH
10806: EMPTY
10807: LIST
10808: ADD
10809: ST_TO_ADDR
10810: GO 10723
10812: POP
10813: POP
// result = list ;
10814: LD_ADDR_VAR 0 3
10818: PUSH
10819: LD_VAR 0 6
10823: ST_TO_ADDR
// end ;
10824: LD_VAR 0 3
10828: RET
// export function BehemothAttack ( behemoth , time_lapsers_list , mechanic_list , x , y ) ; var i , p , dist ; begin
10829: LD_INT 0
10831: PPUSH
10832: PPUSH
10833: PPUSH
10834: PPUSH
// if GetDistUnits ( behemoth , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( behemoth ) ] ) , behemoth ) ) < 18 then
10835: LD_VAR 0 1
10839: PPUSH
10840: LD_INT 81
10842: PUSH
10843: LD_VAR 0 1
10847: PPUSH
10848: CALL_OW 255
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: PPUSH
10857: CALL_OW 69
10861: PPUSH
10862: LD_VAR 0 1
10866: PPUSH
10867: CALL_OW 74
10871: PPUSH
10872: CALL_OW 296
10876: PUSH
10877: LD_INT 18
10879: LESS
10880: IFFALSE 10925
// ComAttackUnit ( behemoth , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( behemoth ) ] ) , behemoth ) ) else
10882: LD_VAR 0 1
10886: PPUSH
10887: LD_INT 81
10889: PUSH
10890: LD_VAR 0 1
10894: PPUSH
10895: CALL_OW 255
10899: PUSH
10900: EMPTY
10901: LIST
10902: LIST
10903: PPUSH
10904: CALL_OW 69
10908: PPUSH
10909: LD_VAR 0 1
10913: PPUSH
10914: CALL_OW 74
10918: PPUSH
10919: CALL_OW 115
10923: GO 10944
// ComMoveXY ( behemoth , x , y ) ;
10925: LD_VAR 0 1
10929: PPUSH
10930: LD_VAR 0 4
10934: PPUSH
10935: LD_VAR 0 5
10939: PPUSH
10940: CALL_OW 111
// if time_lapsers_list > 0 then
10944: LD_VAR 0 2
10948: PUSH
10949: LD_INT 0
10951: GREATER
10952: IFFALSE 11142
// begin for i = 1 to time_lapsers_list do
10954: LD_ADDR_VAR 0 7
10958: PUSH
10959: DOUBLE
10960: LD_INT 1
10962: DEC
10963: ST_TO_ADDR
10964: LD_VAR 0 2
10968: PUSH
10969: FOR_TO
10970: IFFALSE 11140
// begin if GetLives ( time_lapsers_list [ i ] ) >= 250 and GetDistUnits ( time_lapsers_list [ i ] , behemoth ) > 9 then
10972: LD_VAR 0 2
10976: PUSH
10977: LD_VAR 0 7
10981: ARRAY
10982: PPUSH
10983: CALL_OW 256
10987: PUSH
10988: LD_INT 250
10990: GREATEREQUAL
10991: PUSH
10992: LD_VAR 0 2
10996: PUSH
10997: LD_VAR 0 7
11001: ARRAY
11002: PPUSH
11003: LD_VAR 0 1
11007: PPUSH
11008: CALL_OW 296
11012: PUSH
11013: LD_INT 9
11015: GREATER
11016: AND
11017: IFFALSE 11054
// ComMoveXY ( time_lapsers_list [ i ] , GetX ( behemoth ) , GetY ( behemoth ) ) ;
11019: LD_VAR 0 2
11023: PUSH
11024: LD_VAR 0 7
11028: ARRAY
11029: PPUSH
11030: LD_VAR 0 1
11034: PPUSH
11035: CALL_OW 250
11039: PPUSH
11040: LD_VAR 0 1
11044: PPUSH
11045: CALL_OW 251
11049: PPUSH
11050: CALL_OW 111
// if GetLives ( time_lapsers_list [ i ] ) < 500 and GetLives ( behemoth ) > 700 then
11054: LD_VAR 0 2
11058: PUSH
11059: LD_VAR 0 7
11063: ARRAY
11064: PPUSH
11065: CALL_OW 256
11069: PUSH
11070: LD_INT 500
11072: LESS
11073: PUSH
11074: LD_VAR 0 1
11078: PPUSH
11079: CALL_OW 256
11083: PUSH
11084: LD_INT 700
11086: GREATER
11087: AND
11088: IFFALSE 11138
// for p = 1 to mechanic_list do
11090: LD_ADDR_VAR 0 8
11094: PUSH
11095: DOUBLE
11096: LD_INT 1
11098: DEC
11099: ST_TO_ADDR
11100: LD_VAR 0 3
11104: PUSH
11105: FOR_TO
11106: IFFALSE 11136
// ComRepairVehicle ( mechanic_list [ p ] , time_lapsers_list [ i ] ) ;
11108: LD_VAR 0 3
11112: PUSH
11113: LD_VAR 0 8
11117: ARRAY
11118: PPUSH
11119: LD_VAR 0 2
11123: PUSH
11124: LD_VAR 0 7
11128: ARRAY
11129: PPUSH
11130: CALL_OW 129
11134: GO 11105
11136: POP
11137: POP
// end ;
11138: GO 10969
11140: POP
11141: POP
// end ; if mechanic_list then
11142: LD_VAR 0 3
11146: IFFALSE 11327
// begin for i = 1 to mechanic_list do
11148: LD_ADDR_VAR 0 7
11152: PUSH
11153: DOUBLE
11154: LD_INT 1
11156: DEC
11157: ST_TO_ADDR
11158: LD_VAR 0 3
11162: PUSH
11163: FOR_TO
11164: IFFALSE 11325
// begin if GetLives ( mechanic_list [ i ] ) < 333 then
11166: LD_VAR 0 3
11170: PUSH
11171: LD_VAR 0 7
11175: ARRAY
11176: PPUSH
11177: CALL_OW 256
11181: PUSH
11182: LD_INT 333
11184: LESS
11185: IFFALSE 11209
// ru_behemoth_mechanic := ru_behemoth_mechanic diff mechanic_list [ i ] ;
11187: LD_ADDR_EXP 15
11191: PUSH
11192: LD_EXP 15
11196: PUSH
11197: LD_VAR 0 3
11201: PUSH
11202: LD_VAR 0 7
11206: ARRAY
11207: DIFF
11208: ST_TO_ADDR
// if GetDistUnits ( mechanic_list [ i ] , behemoth ) > 9 and not HasTask ( mechanic_list [ i ] ) then
11209: LD_VAR 0 3
11213: PUSH
11214: LD_VAR 0 7
11218: ARRAY
11219: PPUSH
11220: LD_VAR 0 1
11224: PPUSH
11225: CALL_OW 296
11229: PUSH
11230: LD_INT 9
11232: GREATER
11233: PUSH
11234: LD_VAR 0 3
11238: PUSH
11239: LD_VAR 0 7
11243: ARRAY
11244: PPUSH
11245: CALL_OW 314
11249: NOT
11250: AND
11251: IFFALSE 11288
// ComMoveXY ( mechanic_list [ i ] , GetX ( behemoth ) , GetY ( behemoth ) ) ;
11253: LD_VAR 0 3
11257: PUSH
11258: LD_VAR 0 7
11262: ARRAY
11263: PPUSH
11264: LD_VAR 0 1
11268: PPUSH
11269: CALL_OW 250
11273: PPUSH
11274: LD_VAR 0 1
11278: PPUSH
11279: CALL_OW 251
11283: PPUSH
11284: CALL_OW 111
// if GetLives ( behemoth ) < 700 then
11288: LD_VAR 0 1
11292: PPUSH
11293: CALL_OW 256
11297: PUSH
11298: LD_INT 700
11300: LESS
11301: IFFALSE 11323
// ComRepairVehicle ( mechanic_list [ i ] , behemoth ) ;
11303: LD_VAR 0 3
11307: PUSH
11308: LD_VAR 0 7
11312: ARRAY
11313: PPUSH
11314: LD_VAR 0 1
11318: PPUSH
11319: CALL_OW 129
// end ;
11323: GO 11163
11325: POP
11326: POP
// end ; end ;
11327: LD_VAR 0 6
11331: RET
// export function GetBehemoth ( side ) ; begin
11332: LD_INT 0
11334: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
11335: LD_ADDR_VAR 0 2
11339: PUSH
11340: LD_INT 22
11342: PUSH
11343: LD_VAR 0 1
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: PUSH
11352: LD_INT 31
11354: PUSH
11355: LD_INT 25
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: PPUSH
11366: CALL_OW 69
11370: ST_TO_ADDR
// end ;
11371: LD_VAR 0 2
11375: RET
// export function CollectCrates ( side , area ) ; var cargo , engs , skr , i , am ; begin
11376: LD_INT 0
11378: PPUSH
11379: PPUSH
11380: PPUSH
11381: PPUSH
11382: PPUSH
11383: PPUSH
// skr = GetListOfCratesInArea ( area ) ;
11384: LD_ADDR_VAR 0 6
11388: PUSH
11389: LD_VAR 0 2
11393: PPUSH
11394: CALL_OW 435
11398: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
11399: LD_ADDR_VAR 0 5
11403: PUSH
11404: LD_INT 22
11406: PUSH
11407: LD_VAR 0 1
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: PUSH
11416: LD_INT 2
11418: PUSH
11419: LD_INT 25
11421: PUSH
11422: LD_INT 2
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: PUSH
11429: LD_INT 25
11431: PUSH
11432: LD_INT 16
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: LIST
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PPUSH
11448: CALL_OW 69
11452: ST_TO_ADDR
// if skr then
11453: LD_VAR 0 6
11457: IFFALSE 11622
// begin if engs then
11459: LD_VAR 0 5
11463: IFFALSE 11622
// begin am := GetResourceAmountXY ( skr [ 1 ] , skr [ 2 ] ) ;
11465: LD_ADDR_VAR 0 8
11469: PUSH
11470: LD_VAR 0 6
11474: PUSH
11475: LD_INT 1
11477: ARRAY
11478: PPUSH
11479: LD_VAR 0 6
11483: PUSH
11484: LD_INT 2
11486: ARRAY
11487: PPUSH
11488: CALL_OW 284
11492: ST_TO_ADDR
// if am > engs then
11493: LD_VAR 0 8
11497: PUSH
11498: LD_VAR 0 5
11502: GREATER
11503: IFFALSE 11515
// am := engs ;
11505: LD_ADDR_VAR 0 8
11509: PUSH
11510: LD_VAR 0 5
11514: ST_TO_ADDR
// for i = 1 to am do
11515: LD_ADDR_VAR 0 7
11519: PUSH
11520: DOUBLE
11521: LD_INT 1
11523: DEC
11524: ST_TO_ADDR
11525: LD_VAR 0 8
11529: PUSH
11530: FOR_TO
11531: IFFALSE 11620
// begin if IsInUnit ( engs [ i ] ) then
11533: LD_VAR 0 5
11537: PUSH
11538: LD_VAR 0 7
11542: ARRAY
11543: PPUSH
11544: CALL_OW 310
11548: IFFALSE 11567
// ComExitBuilding ( engs [ i ] ) else
11550: LD_VAR 0 5
11554: PUSH
11555: LD_VAR 0 7
11559: ARRAY
11560: PPUSH
11561: CALL_OW 122
11565: GO 11618
// if not HasTask ( engs [ i ] ) then
11567: LD_VAR 0 5
11571: PUSH
11572: LD_VAR 0 7
11576: ARRAY
11577: PPUSH
11578: CALL_OW 314
11582: NOT
11583: IFFALSE 11618
// ComCollect ( engs [ i ] , skr [ 1 ] , skr [ 2 ] ) ;
11585: LD_VAR 0 5
11589: PUSH
11590: LD_VAR 0 7
11594: ARRAY
11595: PPUSH
11596: LD_VAR 0 6
11600: PUSH
11601: LD_INT 1
11603: ARRAY
11604: PPUSH
11605: LD_VAR 0 6
11609: PUSH
11610: LD_INT 2
11612: ARRAY
11613: PPUSH
11614: CALL_OW 117
// end ;
11618: GO 11530
11620: POP
11621: POP
// end ; end ; end ; end_of_file
11622: LD_VAR 0 3
11626: RET
// export game_status ; export helps_arrive , helps_can_arrive ; export beta_come , gamma_come , zeta_come , mine_ck , sib_bomb_constructed , mine_constructed ; export guyA , guyB ; export function PrepareAmerican ; var skill ; begin
11627: LD_INT 0
11629: PPUSH
11630: PPUSH
// uc_side := 1 ;
11631: LD_ADDR_OWVAR 20
11635: PUSH
11636: LD_INT 1
11638: ST_TO_ADDR
// uc_nation := 1 ;
11639: LD_ADDR_OWVAR 21
11643: PUSH
11644: LD_INT 1
11646: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
11647: LD_ADDR_VAR 0 2
11651: PUSH
11652: LD_INT 6
11654: PUSH
11655: LD_INT 5
11657: PUSH
11658: LD_INT 4
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: LIST
11665: PUSH
11666: LD_OWVAR 67
11670: ARRAY
11671: ST_TO_ADDR
// game_status := false ;
11672: LD_ADDR_EXP 29
11676: PUSH
11677: LD_INT 0
11679: ST_TO_ADDR
// helps_arrive := false ;
11680: LD_ADDR_EXP 30
11684: PUSH
11685: LD_INT 0
11687: ST_TO_ADDR
// helps_can_arrive := false ;
11688: LD_ADDR_EXP 31
11692: PUSH
11693: LD_INT 0
11695: ST_TO_ADDR
// beta_come := false ;
11696: LD_ADDR_EXP 32
11700: PUSH
11701: LD_INT 0
11703: ST_TO_ADDR
// gamma_come := false ;
11704: LD_ADDR_EXP 33
11708: PUSH
11709: LD_INT 0
11711: ST_TO_ADDR
// zeta_come := false ;
11712: LD_ADDR_EXP 34
11716: PUSH
11717: LD_INT 0
11719: ST_TO_ADDR
// mine_ck := false ;
11720: LD_ADDR_EXP 35
11724: PUSH
11725: LD_INT 0
11727: ST_TO_ADDR
// sib_bomb_constructed := false ;
11728: LD_ADDR_EXP 36
11732: PUSH
11733: LD_INT 0
11735: ST_TO_ADDR
// mine_constructed := false ;
11736: LD_ADDR_EXP 37
11740: PUSH
11741: LD_INT 0
11743: ST_TO_ADDR
// SetResourceType ( GetBase ( us_dep1 ) , mat_cans , [ 200 , 100 , 70 ] [ Difficulty ] ) ;
11744: LD_INT 35
11746: PPUSH
11747: CALL_OW 274
11751: PPUSH
11752: LD_INT 1
11754: PPUSH
11755: LD_INT 200
11757: PUSH
11758: LD_INT 100
11760: PUSH
11761: LD_INT 70
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: LIST
11768: PUSH
11769: LD_OWVAR 67
11773: ARRAY
11774: PPUSH
11775: CALL_OW 277
// SetSide ( us_dep1 , 4 ) ;
11779: LD_INT 35
11781: PPUSH
11782: LD_INT 4
11784: PPUSH
11785: CALL_OW 235
// hc_importance := 100 ;
11789: LD_ADDR_OWVAR 32
11793: PUSH
11794: LD_INT 100
11796: ST_TO_ADDR
// PrepareHuman ( sex_male , 2 , skill + 1 ) ;
11797: LD_INT 1
11799: PPUSH
11800: LD_INT 2
11802: PPUSH
11803: LD_VAR 0 2
11807: PUSH
11808: LD_INT 1
11810: PLUS
11811: PPUSH
11812: CALL_OW 380
// hc_gallery := hardch ;
11816: LD_ADDR_OWVAR 33
11820: PUSH
11821: LD_STRING hardch
11823: ST_TO_ADDR
// hc_face_number := 1 ;
11824: LD_ADDR_OWVAR 34
11828: PUSH
11829: LD_INT 1
11831: ST_TO_ADDR
// guyA := CreateHuman ;
11832: LD_ADDR_EXP 38
11836: PUSH
11837: CALL_OW 44
11841: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
11842: LD_INT 1
11844: PPUSH
11845: LD_INT 1
11847: PPUSH
11848: LD_VAR 0 2
11852: PPUSH
11853: CALL_OW 380
// hc_face_number := 2 ;
11857: LD_ADDR_OWVAR 34
11861: PUSH
11862: LD_INT 2
11864: ST_TO_ADDR
// guyB := CreateHuman ;
11865: LD_ADDR_EXP 39
11869: PUSH
11870: CALL_OW 44
11874: ST_TO_ADDR
// hc_importance := 0 ;
11875: LD_ADDR_OWVAR 32
11879: PUSH
11880: LD_INT 0
11882: ST_TO_ADDR
// hc_gallery :=  ;
11883: LD_ADDR_OWVAR 33
11887: PUSH
11888: LD_STRING 
11890: ST_TO_ADDR
// end ;
11891: LD_VAR 0 1
11895: RET
// export Beta_Squad ; export function AddBetaSquad ( num ) ; var i , un , sold , sci , mech , tank , cargo , skill ; begin
11896: LD_INT 0
11898: PPUSH
11899: PPUSH
11900: PPUSH
11901: PPUSH
11902: PPUSH
11903: PPUSH
11904: PPUSH
11905: PPUSH
11906: PPUSH
// uc_side := 4 ;
11907: LD_ADDR_OWVAR 20
11911: PUSH
11912: LD_INT 4
11914: ST_TO_ADDR
// uc_nation := 1 ;
11915: LD_ADDR_OWVAR 21
11919: PUSH
11920: LD_INT 1
11922: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
11923: LD_ADDR_VAR 0 10
11927: PUSH
11928: LD_INT 6
11930: PUSH
11931: LD_INT 5
11933: PUSH
11934: LD_INT 4
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: LIST
11941: PUSH
11942: LD_OWVAR 67
11946: ARRAY
11947: ST_TO_ADDR
// Beta_Squad := [ ] ;
11948: LD_ADDR_EXP 40
11952: PUSH
11953: EMPTY
11954: ST_TO_ADDR
// case num of 1 :
11955: LD_VAR 0 1
11959: PUSH
11960: LD_INT 1
11962: DOUBLE
11963: EQUAL
11964: IFTRUE 11968
11966: GO 12011
11968: POP
// begin sold := 2 ;
11969: LD_ADDR_VAR 0 5
11973: PUSH
11974: LD_INT 2
11976: ST_TO_ADDR
// sci := 1 ;
11977: LD_ADDR_VAR 0 6
11981: PUSH
11982: LD_INT 1
11984: ST_TO_ADDR
// mech := 2 ;
11985: LD_ADDR_VAR 0 7
11989: PUSH
11990: LD_INT 2
11992: ST_TO_ADDR
// tank := 1 ;
11993: LD_ADDR_VAR 0 8
11997: PUSH
11998: LD_INT 1
12000: ST_TO_ADDR
// cargo := 1 ;
12001: LD_ADDR_VAR 0 9
12005: PUSH
12006: LD_INT 1
12008: ST_TO_ADDR
// end ; 2 :
12009: GO 12114
12011: LD_INT 2
12013: DOUBLE
12014: EQUAL
12015: IFTRUE 12019
12017: GO 12062
12019: POP
// begin sold := 2 ;
12020: LD_ADDR_VAR 0 5
12024: PUSH
12025: LD_INT 2
12027: ST_TO_ADDR
// sci := 1 ;
12028: LD_ADDR_VAR 0 6
12032: PUSH
12033: LD_INT 1
12035: ST_TO_ADDR
// mech := 1 ;
12036: LD_ADDR_VAR 0 7
12040: PUSH
12041: LD_INT 1
12043: ST_TO_ADDR
// tank := 1 ;
12044: LD_ADDR_VAR 0 8
12048: PUSH
12049: LD_INT 1
12051: ST_TO_ADDR
// cargo := 0 ;
12052: LD_ADDR_VAR 0 9
12056: PUSH
12057: LD_INT 0
12059: ST_TO_ADDR
// end ; 3 :
12060: GO 12114
12062: LD_INT 3
12064: DOUBLE
12065: EQUAL
12066: IFTRUE 12070
12068: GO 12113
12070: POP
// begin sold := 1 ;
12071: LD_ADDR_VAR 0 5
12075: PUSH
12076: LD_INT 1
12078: ST_TO_ADDR
// sci := 1 ;
12079: LD_ADDR_VAR 0 6
12083: PUSH
12084: LD_INT 1
12086: ST_TO_ADDR
// mech := 1 ;
12087: LD_ADDR_VAR 0 7
12091: PUSH
12092: LD_INT 1
12094: ST_TO_ADDR
// tank := 1 ;
12095: LD_ADDR_VAR 0 8
12099: PUSH
12100: LD_INT 1
12102: ST_TO_ADDR
// cargo := 0 ;
12103: LD_ADDR_VAR 0 9
12107: PUSH
12108: LD_INT 0
12110: ST_TO_ADDR
// end ; end ;
12111: GO 12114
12113: POP
// for i = 1 to sold do
12114: LD_ADDR_VAR 0 3
12118: PUSH
12119: DOUBLE
12120: LD_INT 1
12122: DEC
12123: ST_TO_ADDR
12124: LD_VAR 0 5
12128: PUSH
12129: FOR_TO
12130: IFFALSE 12202
// begin if i = 1 then
12132: LD_VAR 0 3
12136: PUSH
12137: LD_INT 1
12139: EQUAL
12140: IFFALSE 12159
// PrepareHuman ( sex_male , 1 , skill ) else
12142: LD_INT 1
12144: PPUSH
12145: LD_INT 1
12147: PPUSH
12148: LD_VAR 0 10
12152: PPUSH
12153: CALL_OW 380
12157: GO 12174
// PrepareHuman ( false , 1 , skill ) ;
12159: LD_INT 0
12161: PPUSH
12162: LD_INT 1
12164: PPUSH
12165: LD_VAR 0 10
12169: PPUSH
12170: CALL_OW 380
// un := CreateHuman ;
12174: LD_ADDR_VAR 0 4
12178: PUSH
12179: CALL_OW 44
12183: ST_TO_ADDR
// Beta_Squad := Beta_Squad ^ un ;
12184: LD_ADDR_EXP 40
12188: PUSH
12189: LD_EXP 40
12193: PUSH
12194: LD_VAR 0 4
12198: ADD
12199: ST_TO_ADDR
// end ;
12200: GO 12129
12202: POP
12203: POP
// for i = 1 to mech do
12204: LD_ADDR_VAR 0 3
12208: PUSH
12209: DOUBLE
12210: LD_INT 1
12212: DEC
12213: ST_TO_ADDR
12214: LD_VAR 0 7
12218: PUSH
12219: FOR_TO
12220: IFFALSE 12277
// begin PrepareHuman ( false , 3 , skill ) ;
12222: LD_INT 0
12224: PPUSH
12225: LD_INT 3
12227: PPUSH
12228: LD_VAR 0 10
12232: PPUSH
12233: CALL_OW 380
// un := CreateHuman ;
12237: LD_ADDR_VAR 0 4
12241: PUSH
12242: CALL_OW 44
12246: ST_TO_ADDR
// SetTag ( un , 3 ) ;
12247: LD_VAR 0 4
12251: PPUSH
12252: LD_INT 3
12254: PPUSH
12255: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12259: LD_ADDR_EXP 40
12263: PUSH
12264: LD_EXP 40
12268: PUSH
12269: LD_VAR 0 4
12273: ADD
12274: ST_TO_ADDR
// end ;
12275: GO 12219
12277: POP
12278: POP
// for i = 1 to sci do
12279: LD_ADDR_VAR 0 3
12283: PUSH
12284: DOUBLE
12285: LD_INT 1
12287: DEC
12288: ST_TO_ADDR
12289: LD_VAR 0 6
12293: PUSH
12294: FOR_TO
12295: IFFALSE 12340
// begin PrepareHuman ( false , 4 , skill ) ;
12297: LD_INT 0
12299: PPUSH
12300: LD_INT 4
12302: PPUSH
12303: LD_VAR 0 10
12307: PPUSH
12308: CALL_OW 380
// un := CreateHuman ;
12312: LD_ADDR_VAR 0 4
12316: PUSH
12317: CALL_OW 44
12321: ST_TO_ADDR
// Beta_Squad := Beta_Squad ^ un ;
12322: LD_ADDR_EXP 40
12326: PUSH
12327: LD_EXP 40
12331: PUSH
12332: LD_VAR 0 4
12336: ADD
12337: ST_TO_ADDR
// end ;
12338: GO 12294
12340: POP
12341: POP
// for i = 1 to tank do
12342: LD_ADDR_VAR 0 3
12346: PUSH
12347: DOUBLE
12348: LD_INT 1
12350: DEC
12351: ST_TO_ADDR
12352: LD_VAR 0 8
12356: PUSH
12357: FOR_TO
12358: IFFALSE 12471
// begin Randomize ;
12360: CALL_OW 10
// vc_chassis := us_medium_tracked ;
12364: LD_ADDR_OWVAR 37
12368: PUSH
12369: LD_INT 3
12371: ST_TO_ADDR
// vc_engine := engine_solar ;
12372: LD_ADDR_OWVAR 39
12376: PUSH
12377: LD_INT 2
12379: ST_TO_ADDR
// vc_control := control_manual ;
12380: LD_ADDR_OWVAR 38
12384: PUSH
12385: LD_INT 1
12387: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ Rand ( 1 , 2 ) ] ;
12388: LD_ADDR_OWVAR 40
12392: PUSH
12393: LD_INT 4
12395: PUSH
12396: LD_INT 5
12398: PUSH
12399: EMPTY
12400: LIST
12401: LIST
12402: PUSH
12403: LD_INT 1
12405: PPUSH
12406: LD_INT 2
12408: PPUSH
12409: CALL_OW 12
12413: ARRAY
12414: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
12415: LD_ADDR_OWVAR 41
12419: PUSH
12420: LD_INT 35
12422: PPUSH
12423: LD_INT 55
12425: PPUSH
12426: CALL_OW 12
12430: ST_TO_ADDR
// un := CreateVehicle ;
12431: LD_ADDR_VAR 0 4
12435: PUSH
12436: CALL_OW 45
12440: ST_TO_ADDR
// SetTag ( un , 5 ) ;
12441: LD_VAR 0 4
12445: PPUSH
12446: LD_INT 5
12448: PPUSH
12449: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12453: LD_ADDR_EXP 40
12457: PUSH
12458: LD_EXP 40
12462: PUSH
12463: LD_VAR 0 4
12467: ADD
12468: ST_TO_ADDR
// end ;
12469: GO 12357
12471: POP
12472: POP
// if cargo then
12473: LD_VAR 0 9
12477: IFFALSE 12580
// begin vc_chassis := us_medium_tracked ;
12479: LD_ADDR_OWVAR 37
12483: PUSH
12484: LD_INT 3
12486: ST_TO_ADDR
// vc_engine := engine_solar ;
12487: LD_ADDR_OWVAR 39
12491: PUSH
12492: LD_INT 2
12494: ST_TO_ADDR
// vc_control := control_manual ;
12495: LD_ADDR_OWVAR 38
12499: PUSH
12500: LD_INT 1
12502: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
12503: LD_ADDR_OWVAR 40
12507: PUSH
12508: LD_INT 12
12510: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
12511: LD_ADDR_OWVAR 41
12515: PUSH
12516: LD_INT 35
12518: PPUSH
12519: LD_INT 55
12521: PPUSH
12522: CALL_OW 12
12526: ST_TO_ADDR
// un := CreateVehicle ;
12527: LD_ADDR_VAR 0 4
12531: PUSH
12532: CALL_OW 45
12536: ST_TO_ADDR
// SetTag ( un , 5 ) ;
12537: LD_VAR 0 4
12541: PPUSH
12542: LD_INT 5
12544: PPUSH
12545: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12549: LD_ADDR_EXP 40
12553: PUSH
12554: LD_EXP 40
12558: PUSH
12559: LD_VAR 0 4
12563: ADD
12564: ST_TO_ADDR
// SetCargo ( un , mat_cans , 60 ) ;
12565: LD_VAR 0 4
12569: PPUSH
12570: LD_INT 1
12572: PPUSH
12573: LD_INT 60
12575: PPUSH
12576: CALL_OW 290
// end ; end ;
12580: LD_VAR 0 2
12584: RET
// export Gamma_Squad ; export function AddGammaSquad ( num ) ; var i , un , sold , eng , sci , mech , tank , cargo , skill ; begin
12585: LD_INT 0
12587: PPUSH
12588: PPUSH
12589: PPUSH
12590: PPUSH
12591: PPUSH
12592: PPUSH
12593: PPUSH
12594: PPUSH
12595: PPUSH
12596: PPUSH
// uc_side := 4 ;
12597: LD_ADDR_OWVAR 20
12601: PUSH
12602: LD_INT 4
12604: ST_TO_ADDR
// uc_nation := 1 ;
12605: LD_ADDR_OWVAR 21
12609: PUSH
12610: LD_INT 1
12612: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
12613: LD_ADDR_VAR 0 11
12617: PUSH
12618: LD_INT 6
12620: PUSH
12621: LD_INT 5
12623: PUSH
12624: LD_INT 4
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: LIST
12631: PUSH
12632: LD_OWVAR 67
12636: ARRAY
12637: ST_TO_ADDR
// Gamma_Squad := [ ] ;
12638: LD_ADDR_EXP 41
12642: PUSH
12643: EMPTY
12644: ST_TO_ADDR
// case num of 1 :
12645: LD_VAR 0 1
12649: PUSH
12650: LD_INT 1
12652: DOUBLE
12653: EQUAL
12654: IFTRUE 12658
12656: GO 12709
12658: POP
// begin sold := 2 ;
12659: LD_ADDR_VAR 0 5
12663: PUSH
12664: LD_INT 2
12666: ST_TO_ADDR
// eng := 2 ;
12667: LD_ADDR_VAR 0 6
12671: PUSH
12672: LD_INT 2
12674: ST_TO_ADDR
// sci := 0 ;
12675: LD_ADDR_VAR 0 7
12679: PUSH
12680: LD_INT 0
12682: ST_TO_ADDR
// mech := 1 ;
12683: LD_ADDR_VAR 0 8
12687: PUSH
12688: LD_INT 1
12690: ST_TO_ADDR
// tank := 0 ;
12691: LD_ADDR_VAR 0 9
12695: PUSH
12696: LD_INT 0
12698: ST_TO_ADDR
// cargo := 1 ;
12699: LD_ADDR_VAR 0 10
12703: PUSH
12704: LD_INT 1
12706: ST_TO_ADDR
// end ; 2 :
12707: GO 12828
12709: LD_INT 2
12711: DOUBLE
12712: EQUAL
12713: IFTRUE 12717
12715: GO 12768
12717: POP
// begin sold := 1 ;
12718: LD_ADDR_VAR 0 5
12722: PUSH
12723: LD_INT 1
12725: ST_TO_ADDR
// eng := 2 ;
12726: LD_ADDR_VAR 0 6
12730: PUSH
12731: LD_INT 2
12733: ST_TO_ADDR
// sci := 0 ;
12734: LD_ADDR_VAR 0 7
12738: PUSH
12739: LD_INT 0
12741: ST_TO_ADDR
// mech := 1 ;
12742: LD_ADDR_VAR 0 8
12746: PUSH
12747: LD_INT 1
12749: ST_TO_ADDR
// tank := 0 ;
12750: LD_ADDR_VAR 0 9
12754: PUSH
12755: LD_INT 0
12757: ST_TO_ADDR
// cargo := 1 ;
12758: LD_ADDR_VAR 0 10
12762: PUSH
12763: LD_INT 1
12765: ST_TO_ADDR
// end ; 3 :
12766: GO 12828
12768: LD_INT 3
12770: DOUBLE
12771: EQUAL
12772: IFTRUE 12776
12774: GO 12827
12776: POP
// begin sold := 1 ;
12777: LD_ADDR_VAR 0 5
12781: PUSH
12782: LD_INT 1
12784: ST_TO_ADDR
// eng := 1 ;
12785: LD_ADDR_VAR 0 6
12789: PUSH
12790: LD_INT 1
12792: ST_TO_ADDR
// sci := 0 ;
12793: LD_ADDR_VAR 0 7
12797: PUSH
12798: LD_INT 0
12800: ST_TO_ADDR
// mech := 1 ;
12801: LD_ADDR_VAR 0 8
12805: PUSH
12806: LD_INT 1
12808: ST_TO_ADDR
// tank := 0 ;
12809: LD_ADDR_VAR 0 9
12813: PUSH
12814: LD_INT 0
12816: ST_TO_ADDR
// cargo := 1 ;
12817: LD_ADDR_VAR 0 10
12821: PUSH
12822: LD_INT 1
12824: ST_TO_ADDR
// end ; end ;
12825: GO 12828
12827: POP
// for i = 1 to sold do
12828: LD_ADDR_VAR 0 3
12832: PUSH
12833: DOUBLE
12834: LD_INT 1
12836: DEC
12837: ST_TO_ADDR
12838: LD_VAR 0 5
12842: PUSH
12843: FOR_TO
12844: IFFALSE 12916
// begin if i = 1 then
12846: LD_VAR 0 3
12850: PUSH
12851: LD_INT 1
12853: EQUAL
12854: IFFALSE 12873
// PrepareHuman ( sex_male , 1 , skill ) else
12856: LD_INT 1
12858: PPUSH
12859: LD_INT 1
12861: PPUSH
12862: LD_VAR 0 11
12866: PPUSH
12867: CALL_OW 380
12871: GO 12888
// PrepareHuman ( false , 1 , skill ) ;
12873: LD_INT 0
12875: PPUSH
12876: LD_INT 1
12878: PPUSH
12879: LD_VAR 0 11
12883: PPUSH
12884: CALL_OW 380
// un := CreateHuman ;
12888: LD_ADDR_VAR 0 4
12892: PUSH
12893: CALL_OW 44
12897: ST_TO_ADDR
// Gamma_Squad := Gamma_Squad ^ un ;
12898: LD_ADDR_EXP 41
12902: PUSH
12903: LD_EXP 41
12907: PUSH
12908: LD_VAR 0 4
12912: ADD
12913: ST_TO_ADDR
// end ;
12914: GO 12843
12916: POP
12917: POP
// for i = 1 to mech do
12918: LD_ADDR_VAR 0 3
12922: PUSH
12923: DOUBLE
12924: LD_INT 1
12926: DEC
12927: ST_TO_ADDR
12928: LD_VAR 0 8
12932: PUSH
12933: FOR_TO
12934: IFFALSE 12991
// begin PrepareHuman ( false , 3 , skill ) ;
12936: LD_INT 0
12938: PPUSH
12939: LD_INT 3
12941: PPUSH
12942: LD_VAR 0 11
12946: PPUSH
12947: CALL_OW 380
// un := CreateHuman ;
12951: LD_ADDR_VAR 0 4
12955: PUSH
12956: CALL_OW 44
12960: ST_TO_ADDR
// SetTag ( un , 3 ) ;
12961: LD_VAR 0 4
12965: PPUSH
12966: LD_INT 3
12968: PPUSH
12969: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
12973: LD_ADDR_EXP 41
12977: PUSH
12978: LD_EXP 41
12982: PUSH
12983: LD_VAR 0 4
12987: ADD
12988: ST_TO_ADDR
// end ;
12989: GO 12933
12991: POP
12992: POP
// for i = 1 to eng do
12993: LD_ADDR_VAR 0 3
12997: PUSH
12998: DOUBLE
12999: LD_INT 1
13001: DEC
13002: ST_TO_ADDR
13003: LD_VAR 0 6
13007: PUSH
13008: FOR_TO
13009: IFFALSE 13054
// begin PrepareHuman ( false , 2 , skill ) ;
13011: LD_INT 0
13013: PPUSH
13014: LD_INT 2
13016: PPUSH
13017: LD_VAR 0 11
13021: PPUSH
13022: CALL_OW 380
// un := CreateHuman ;
13026: LD_ADDR_VAR 0 4
13030: PUSH
13031: CALL_OW 44
13035: ST_TO_ADDR
// Gamma_Squad := Gamma_Squad ^ un ;
13036: LD_ADDR_EXP 41
13040: PUSH
13041: LD_EXP 41
13045: PUSH
13046: LD_VAR 0 4
13050: ADD
13051: ST_TO_ADDR
// end ;
13052: GO 13008
13054: POP
13055: POP
// for i = 1 to tank do
13056: LD_ADDR_VAR 0 3
13060: PUSH
13061: DOUBLE
13062: LD_INT 1
13064: DEC
13065: ST_TO_ADDR
13066: LD_VAR 0 9
13070: PUSH
13071: FOR_TO
13072: IFFALSE 13185
// begin Randomize ;
13074: CALL_OW 10
// vc_chassis := us_medium_wheeled ;
13078: LD_ADDR_OWVAR 37
13082: PUSH
13083: LD_INT 2
13085: ST_TO_ADDR
// vc_engine := engine_siberite ;
13086: LD_ADDR_OWVAR 39
13090: PUSH
13091: LD_INT 3
13093: ST_TO_ADDR
// vc_control := control_manual ;
13094: LD_ADDR_OWVAR 38
13098: PUSH
13099: LD_INT 1
13101: ST_TO_ADDR
// vc_weapon := [ us_rocket_launcher , us_laser ] [ Rand ( 1 , 2 ) ] ;
13102: LD_ADDR_OWVAR 40
13106: PUSH
13107: LD_INT 7
13109: PUSH
13110: LD_INT 9
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: PUSH
13117: LD_INT 1
13119: PPUSH
13120: LD_INT 2
13122: PPUSH
13123: CALL_OW 12
13127: ARRAY
13128: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13129: LD_ADDR_OWVAR 41
13133: PUSH
13134: LD_INT 35
13136: PPUSH
13137: LD_INT 55
13139: PPUSH
13140: CALL_OW 12
13144: ST_TO_ADDR
// un := CreateVehicle ;
13145: LD_ADDR_VAR 0 4
13149: PUSH
13150: CALL_OW 45
13154: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13155: LD_VAR 0 4
13159: PPUSH
13160: LD_INT 5
13162: PPUSH
13163: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
13167: LD_ADDR_EXP 41
13171: PUSH
13172: LD_EXP 41
13176: PUSH
13177: LD_VAR 0 4
13181: ADD
13182: ST_TO_ADDR
// end ;
13183: GO 13071
13185: POP
13186: POP
// if cargo then
13187: LD_VAR 0 10
13191: IFFALSE 13309
// begin vc_chassis := us_medium_tracked ;
13193: LD_ADDR_OWVAR 37
13197: PUSH
13198: LD_INT 3
13200: ST_TO_ADDR
// vc_engine := engine_combustion ;
13201: LD_ADDR_OWVAR 39
13205: PUSH
13206: LD_INT 1
13208: ST_TO_ADDR
// vc_control := control_manual ;
13209: LD_ADDR_OWVAR 38
13213: PUSH
13214: LD_INT 1
13216: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
13217: LD_ADDR_OWVAR 40
13221: PUSH
13222: LD_INT 12
13224: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13225: LD_ADDR_OWVAR 41
13229: PUSH
13230: LD_INT 35
13232: PPUSH
13233: LD_INT 55
13235: PPUSH
13236: CALL_OW 12
13240: ST_TO_ADDR
// un := CreateVehicle ;
13241: LD_ADDR_VAR 0 4
13245: PUSH
13246: CALL_OW 45
13250: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13251: LD_VAR 0 4
13255: PPUSH
13256: LD_INT 5
13258: PPUSH
13259: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
13263: LD_ADDR_EXP 41
13267: PUSH
13268: LD_EXP 41
13272: PUSH
13273: LD_VAR 0 4
13277: ADD
13278: ST_TO_ADDR
// SetCargo ( un , 3 , 30 ) ;
13279: LD_VAR 0 4
13283: PPUSH
13284: LD_INT 3
13286: PPUSH
13287: LD_INT 30
13289: PPUSH
13290: CALL_OW 290
// SetCargo ( un , 1 , 40 ) ;
13294: LD_VAR 0 4
13298: PPUSH
13299: LD_INT 1
13301: PPUSH
13302: LD_INT 40
13304: PPUSH
13305: CALL_OW 290
// end ; end ;
13309: LD_VAR 0 2
13313: RET
// export Zeta_Squad ; export function AddZetaSquad ( ) ; var i , un , sold , eng , sci , mech , tank , cargo , skill ; begin
13314: LD_INT 0
13316: PPUSH
13317: PPUSH
13318: PPUSH
13319: PPUSH
13320: PPUSH
13321: PPUSH
13322: PPUSH
13323: PPUSH
13324: PPUSH
13325: PPUSH
// uc_side := 4 ;
13326: LD_ADDR_OWVAR 20
13330: PUSH
13331: LD_INT 4
13333: ST_TO_ADDR
// uc_nation := 1 ;
13334: LD_ADDR_OWVAR 21
13338: PUSH
13339: LD_INT 1
13341: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
13342: LD_ADDR_VAR 0 10
13346: PUSH
13347: LD_INT 6
13349: PUSH
13350: LD_INT 5
13352: PUSH
13353: LD_INT 4
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: LIST
13360: PUSH
13361: LD_OWVAR 67
13365: ARRAY
13366: ST_TO_ADDR
// Zeta_Squad := [ ] ;
13367: LD_ADDR_EXP 42
13371: PUSH
13372: EMPTY
13373: ST_TO_ADDR
// sold := 1 ;
13374: LD_ADDR_VAR 0 4
13378: PUSH
13379: LD_INT 1
13381: ST_TO_ADDR
// eng := 0 ;
13382: LD_ADDR_VAR 0 5
13386: PUSH
13387: LD_INT 0
13389: ST_TO_ADDR
// sci := 0 ;
13390: LD_ADDR_VAR 0 6
13394: PUSH
13395: LD_INT 0
13397: ST_TO_ADDR
// mech := 3 ;
13398: LD_ADDR_VAR 0 7
13402: PUSH
13403: LD_INT 3
13405: ST_TO_ADDR
// tank := 3 ;
13406: LD_ADDR_VAR 0 8
13410: PUSH
13411: LD_INT 3
13413: ST_TO_ADDR
// cargo := 0 ;
13414: LD_ADDR_VAR 0 9
13418: PUSH
13419: LD_INT 0
13421: ST_TO_ADDR
// for i = 1 to sold do
13422: LD_ADDR_VAR 0 2
13426: PUSH
13427: DOUBLE
13428: LD_INT 1
13430: DEC
13431: ST_TO_ADDR
13432: LD_VAR 0 4
13436: PUSH
13437: FOR_TO
13438: IFFALSE 13510
// begin if i = 1 then
13440: LD_VAR 0 2
13444: PUSH
13445: LD_INT 1
13447: EQUAL
13448: IFFALSE 13467
// PrepareHuman ( sex_male , 1 , skill ) else
13450: LD_INT 1
13452: PPUSH
13453: LD_INT 1
13455: PPUSH
13456: LD_VAR 0 10
13460: PPUSH
13461: CALL_OW 380
13465: GO 13482
// PrepareHuman ( false , 1 , skill ) ;
13467: LD_INT 0
13469: PPUSH
13470: LD_INT 1
13472: PPUSH
13473: LD_VAR 0 10
13477: PPUSH
13478: CALL_OW 380
// un := CreateHuman ;
13482: LD_ADDR_VAR 0 3
13486: PUSH
13487: CALL_OW 44
13491: ST_TO_ADDR
// Zeta_Squad := Zeta_Squad ^ un ;
13492: LD_ADDR_EXP 42
13496: PUSH
13497: LD_EXP 42
13501: PUSH
13502: LD_VAR 0 3
13506: ADD
13507: ST_TO_ADDR
// end ;
13508: GO 13437
13510: POP
13511: POP
// for i = 1 to mech do
13512: LD_ADDR_VAR 0 2
13516: PUSH
13517: DOUBLE
13518: LD_INT 1
13520: DEC
13521: ST_TO_ADDR
13522: LD_VAR 0 7
13526: PUSH
13527: FOR_TO
13528: IFFALSE 13585
// begin PrepareHuman ( false , 3 , skill ) ;
13530: LD_INT 0
13532: PPUSH
13533: LD_INT 3
13535: PPUSH
13536: LD_VAR 0 10
13540: PPUSH
13541: CALL_OW 380
// un := CreateHuman ;
13545: LD_ADDR_VAR 0 3
13549: PUSH
13550: CALL_OW 44
13554: ST_TO_ADDR
// SetTag ( un , 3 ) ;
13555: LD_VAR 0 3
13559: PPUSH
13560: LD_INT 3
13562: PPUSH
13563: CALL_OW 109
// Zeta_Squad := Zeta_Squad ^ un ;
13567: LD_ADDR_EXP 42
13571: PUSH
13572: LD_EXP 42
13576: PUSH
13577: LD_VAR 0 3
13581: ADD
13582: ST_TO_ADDR
// end ;
13583: GO 13527
13585: POP
13586: POP
// for i = 1 to tank do
13587: LD_ADDR_VAR 0 2
13591: PUSH
13592: DOUBLE
13593: LD_INT 1
13595: DEC
13596: ST_TO_ADDR
13597: LD_VAR 0 8
13601: PUSH
13602: FOR_TO
13603: IFFALSE 13849
// begin Randomize ;
13605: CALL_OW 10
// if i < 3 then
13609: LD_VAR 0 2
13613: PUSH
13614: LD_INT 3
13616: LESS
13617: IFFALSE 13726
// begin vc_chassis := us_medium_tracked ;
13619: LD_ADDR_OWVAR 37
13623: PUSH
13624: LD_INT 3
13626: ST_TO_ADDR
// vc_engine := engine_combustion ;
13627: LD_ADDR_OWVAR 39
13631: PUSH
13632: LD_INT 1
13634: ST_TO_ADDR
// vc_control := control_manual ;
13635: LD_ADDR_OWVAR 38
13639: PUSH
13640: LD_INT 1
13642: ST_TO_ADDR
// vc_weapon := [ us_light_gun , us_laser ] [ Rand ( 1 , 2 ) ] ;
13643: LD_ADDR_OWVAR 40
13647: PUSH
13648: LD_INT 3
13650: PUSH
13651: LD_INT 9
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: PUSH
13658: LD_INT 1
13660: PPUSH
13661: LD_INT 2
13663: PPUSH
13664: CALL_OW 12
13668: ARRAY
13669: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13670: LD_ADDR_OWVAR 41
13674: PUSH
13675: LD_INT 35
13677: PPUSH
13678: LD_INT 55
13680: PPUSH
13681: CALL_OW 12
13685: ST_TO_ADDR
// un := CreateVehicle ;
13686: LD_ADDR_VAR 0 3
13690: PUSH
13691: CALL_OW 45
13695: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13696: LD_VAR 0 3
13700: PPUSH
13701: LD_INT 5
13703: PPUSH
13704: CALL_OW 109
// Zeta_Squad := Zeta_Squad ^ un ;
13708: LD_ADDR_EXP 42
13712: PUSH
13713: LD_EXP 42
13717: PUSH
13718: LD_VAR 0 3
13722: ADD
13723: ST_TO_ADDR
// end else
13724: GO 13847
// begin uc_nation := 3 ;
13726: LD_ADDR_OWVAR 21
13730: PUSH
13731: LD_INT 3
13733: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
13734: LD_ADDR_OWVAR 37
13738: PUSH
13739: LD_INT 22
13741: ST_TO_ADDR
// vc_engine := engine_combustion ;
13742: LD_ADDR_OWVAR 39
13746: PUSH
13747: LD_INT 1
13749: ST_TO_ADDR
// vc_control := control_manual ;
13750: LD_ADDR_OWVAR 38
13754: PUSH
13755: LD_INT 1
13757: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
13758: LD_ADDR_OWVAR 40
13762: PUSH
13763: LD_INT 51
13765: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13766: LD_ADDR_OWVAR 41
13770: PUSH
13771: LD_INT 35
13773: PPUSH
13774: LD_INT 55
13776: PPUSH
13777: CALL_OW 12
13781: ST_TO_ADDR
// un := CreateVehicle ;
13782: LD_ADDR_VAR 0 3
13786: PUSH
13787: CALL_OW 45
13791: ST_TO_ADDR
// SetLives ( un , 496 ) ;
13792: LD_VAR 0 3
13796: PPUSH
13797: LD_INT 496
13799: PPUSH
13800: CALL_OW 234
// SetTag ( un , 5 ) ;
13804: LD_VAR 0 3
13808: PPUSH
13809: LD_INT 5
13811: PPUSH
13812: CALL_OW 109
// SetCargo ( un , mat_oil , 100 ) ;
13816: LD_VAR 0 3
13820: PPUSH
13821: LD_INT 2
13823: PPUSH
13824: LD_INT 100
13826: PPUSH
13827: CALL_OW 290
// Zeta_Squad := Zeta_Squad ^ un ;
13831: LD_ADDR_EXP 42
13835: PUSH
13836: LD_EXP 42
13840: PUSH
13841: LD_VAR 0 3
13845: ADD
13846: ST_TO_ADDR
// end ; end ;
13847: GO 13602
13849: POP
13850: POP
// end ; end_of_file
13851: LD_VAR 0 1
13855: RET
// export function Action ; begin
13856: LD_INT 0
13858: PPUSH
// InGameOn ;
13859: CALL_OW 8
// CenterNowOnXY ( 151 , 107 ) ;
13863: LD_INT 151
13865: PPUSH
13866: LD_INT 107
13868: PPUSH
13869: CALL_OW 86
// PlaceUnitXY ( guyA , 171 , 108 , false ) ;
13873: LD_EXP 38
13877: PPUSH
13878: LD_INT 171
13880: PPUSH
13881: LD_INT 108
13883: PPUSH
13884: LD_INT 0
13886: PPUSH
13887: CALL_OW 48
// PlaceUnitXY ( guyB , 172 , 110 , false ) ;
13891: LD_EXP 39
13895: PPUSH
13896: LD_INT 172
13898: PPUSH
13899: LD_INT 110
13901: PPUSH
13902: LD_INT 0
13904: PPUSH
13905: CALL_OW 48
// ComMoveXY ( guyA , 156 , 107 ) ;
13909: LD_EXP 38
13913: PPUSH
13914: LD_INT 156
13916: PPUSH
13917: LD_INT 107
13919: PPUSH
13920: CALL_OW 111
// ComMoveXY ( guyB , 154 , 105 ) ;
13924: LD_EXP 39
13928: PPUSH
13929: LD_INT 154
13931: PPUSH
13932: LD_INT 105
13934: PPUSH
13935: CALL_OW 111
// repeat Wait ( 0 0$0.1 ) ;
13939: LD_INT 4
13941: PPUSH
13942: CALL_OW 67
// until GetX ( guyA ) = 156 and GetY ( guyA ) = 107 ;
13946: LD_EXP 38
13950: PPUSH
13951: CALL_OW 250
13955: PUSH
13956: LD_INT 156
13958: EQUAL
13959: PUSH
13960: LD_EXP 38
13964: PPUSH
13965: CALL_OW 251
13969: PUSH
13970: LD_INT 107
13972: EQUAL
13973: AND
13974: IFFALSE 13939
// ComTurnUnit ( [ guyA , guyB ] , us_dep1 ) ;
13976: LD_EXP 38
13980: PUSH
13981: LD_EXP 39
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: PPUSH
13990: LD_INT 35
13992: PPUSH
13993: CALL_OW 119
// Say ( guyA , D1-A-1 ) ;
13997: LD_EXP 38
14001: PPUSH
14002: LD_STRING D1-A-1
14004: PPUSH
14005: CALL_OW 88
// Say ( guyB , D1-B-1 ) ;
14009: LD_EXP 39
14013: PPUSH
14014: LD_STRING D1-B-1
14016: PPUSH
14017: CALL_OW 88
// Say ( guyA , D1-A-2 ) ;
14021: LD_EXP 38
14025: PPUSH
14026: LD_STRING D1-A-2
14028: PPUSH
14029: CALL_OW 88
// Say ( guyB , D1-B-2 ) ;
14033: LD_EXP 39
14037: PPUSH
14038: LD_STRING D1-B-2
14040: PPUSH
14041: CALL_OW 88
// ComMoveXY ( [ guyA , guyB ] , 147 , 108 ) ;
14045: LD_EXP 38
14049: PUSH
14050: LD_EXP 39
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: PPUSH
14059: LD_INT 147
14061: PPUSH
14062: LD_INT 108
14064: PPUSH
14065: CALL_OW 111
// Say ( guyA , D1-A-3 ) ;
14069: LD_EXP 38
14073: PPUSH
14074: LD_STRING D1-A-3
14076: PPUSH
14077: CALL_OW 88
// repeat Wait ( 0 0$0.1 ) ;
14081: LD_INT 4
14083: PPUSH
14084: CALL_OW 67
// until GetDistUnits ( guyA , us_dep1 ) < 8 ;
14088: LD_EXP 38
14092: PPUSH
14093: LD_INT 35
14095: PPUSH
14096: CALL_OW 296
14100: PUSH
14101: LD_INT 8
14103: LESS
14104: IFFALSE 14081
// ComTurnUnit ( guyA , guyB ) ;
14106: LD_EXP 38
14110: PPUSH
14111: LD_EXP 39
14115: PPUSH
14116: CALL_OW 119
// ComTurnUnit ( guyB , guyA ) ;
14120: LD_EXP 39
14124: PPUSH
14125: LD_EXP 38
14129: PPUSH
14130: CALL_OW 119
// Say ( guyA , D1-A-10 ) ;
14134: LD_EXP 38
14138: PPUSH
14139: LD_STRING D1-A-10
14141: PPUSH
14142: CALL_OW 88
// Say ( guyB , D1-B-10 ) ;
14146: LD_EXP 39
14150: PPUSH
14151: LD_STRING D1-B-10
14153: PPUSH
14154: CALL_OW 88
// Say ( guyA , D1-A-11 ) ;
14158: LD_EXP 38
14162: PPUSH
14163: LD_STRING D1-A-11
14165: PPUSH
14166: CALL_OW 88
// Say ( guyB , D1-B-11 ) ;
14170: LD_EXP 39
14174: PPUSH
14175: LD_STRING D1-B-11
14177: PPUSH
14178: CALL_OW 88
// Say ( guyA , D1-A-12 ) ;
14182: LD_EXP 38
14186: PPUSH
14187: LD_STRING D1-A-12
14189: PPUSH
14190: CALL_OW 88
// Say ( guyB , D1-B-12 ) ;
14194: LD_EXP 39
14198: PPUSH
14199: LD_STRING D1-B-12
14201: PPUSH
14202: CALL_OW 88
// Say ( guyA , D1-A-13 ) ;
14206: LD_EXP 38
14210: PPUSH
14211: LD_STRING D1-A-13
14213: PPUSH
14214: CALL_OW 88
// Say ( guyB , D1-B-13 ) ;
14218: LD_EXP 39
14222: PPUSH
14223: LD_STRING D1-B-13
14225: PPUSH
14226: CALL_OW 88
// Say ( guyA , D1-A-14 ) ;
14230: LD_EXP 38
14234: PPUSH
14235: LD_STRING D1-A-14
14237: PPUSH
14238: CALL_OW 88
// Say ( guyB , D1-B-14 ) ;
14242: LD_EXP 39
14246: PPUSH
14247: LD_STRING D1-B-14
14249: PPUSH
14250: CALL_OW 88
// Say ( guyA , D1-A-15 ) ;
14254: LD_EXP 38
14258: PPUSH
14259: LD_STRING D1-A-15
14261: PPUSH
14262: CALL_OW 88
// Say ( guyB , D1-B-15 ) ;
14266: LD_EXP 39
14270: PPUSH
14271: LD_STRING D1-B-15
14273: PPUSH
14274: CALL_OW 88
// Say ( guyA , D1-A-16 ) ;
14278: LD_EXP 38
14282: PPUSH
14283: LD_STRING D1-A-16
14285: PPUSH
14286: CALL_OW 88
// Say ( guyB , D1-B-16 ) ;
14290: LD_EXP 39
14294: PPUSH
14295: LD_STRING D1-B-16
14297: PPUSH
14298: CALL_OW 88
// Say ( guyA , D1-A-17 ) ;
14302: LD_EXP 38
14306: PPUSH
14307: LD_STRING D1-A-17
14309: PPUSH
14310: CALL_OW 88
// Say ( guyB , D1-B-17 ) ;
14314: LD_EXP 39
14318: PPUSH
14319: LD_STRING D1-B-17
14321: PPUSH
14322: CALL_OW 88
// Say ( guyA , D1-A-18 ) ;
14326: LD_EXP 38
14330: PPUSH
14331: LD_STRING D1-A-18
14333: PPUSH
14334: CALL_OW 88
// SetSide ( us_dep1 , 1 ) ;
14338: LD_INT 35
14340: PPUSH
14341: LD_INT 1
14343: PPUSH
14344: CALL_OW 235
// ComEnterUnit ( [ guyA , guyB ] , us_dep1 ) ;
14348: LD_EXP 38
14352: PUSH
14353: LD_EXP 39
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PPUSH
14362: LD_INT 35
14364: PPUSH
14365: CALL_OW 120
// repeat Wait ( 0 0$0.1 ) ;
14369: LD_INT 4
14371: PPUSH
14372: CALL_OW 67
// until IsInUnit ( guyA ) ;
14376: LD_EXP 38
14380: PPUSH
14381: CALL_OW 310
14385: IFFALSE 14369
// Wait ( 0 0$02 ) ;
14387: LD_INT 70
14389: PPUSH
14390: CALL_OW 67
// Say ( guyA , D1-A-19 ) ;
14394: LD_EXP 38
14398: PPUSH
14399: LD_STRING D1-A-19
14401: PPUSH
14402: CALL_OW 88
// Say ( guyB , D1-B-19 ) ;
14406: LD_EXP 39
14410: PPUSH
14411: LD_STRING D1-B-19
14413: PPUSH
14414: CALL_OW 88
// Say ( guyA , D1-A-20 ) ;
14418: LD_EXP 38
14422: PPUSH
14423: LD_STRING D1-A-20
14425: PPUSH
14426: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
14430: LD_INT 10
14432: PPUSH
14433: CALL_OW 67
// Say ( guyB , D1-B-20 ) ;
14437: LD_EXP 39
14441: PPUSH
14442: LD_STRING D1-B-20
14444: PPUSH
14445: CALL_OW 88
// Say ( guyA , D1-A-21 ) ;
14449: LD_EXP 38
14453: PPUSH
14454: LD_STRING D1-A-21
14456: PPUSH
14457: CALL_OW 88
// Say ( guyB , D1-B-21 ) ;
14461: LD_EXP 39
14465: PPUSH
14466: LD_STRING D1-B-21
14468: PPUSH
14469: CALL_OW 88
// Say ( guyA , D1-A-22 ) ;
14473: LD_EXP 38
14477: PPUSH
14478: LD_STRING D1-A-22
14480: PPUSH
14481: CALL_OW 88
// Say ( guyB , D1-B-22 ) ;
14485: LD_EXP 39
14489: PPUSH
14490: LD_STRING D1-B-22
14492: PPUSH
14493: CALL_OW 88
// Say ( guyA , D1-A-23 ) ;
14497: LD_EXP 38
14501: PPUSH
14502: LD_STRING D1-A-23
14504: PPUSH
14505: CALL_OW 88
// Say ( guyB , D1-B-23 ) ;
14509: LD_EXP 39
14513: PPUSH
14514: LD_STRING D1-B-23
14516: PPUSH
14517: CALL_OW 88
// Say ( guyA , D1-A-24 ) ;
14521: LD_EXP 38
14525: PPUSH
14526: LD_STRING D1-A-24
14528: PPUSH
14529: CALL_OW 88
// InGameOff ;
14533: CALL_OW 9
// ChangeMissionObjectives ( M_main ) ;
14537: LD_STRING M_main
14539: PPUSH
14540: CALL_OW 337
// ChangeSideFog ( 4 , 1 ) ;
14544: LD_INT 4
14546: PPUSH
14547: LD_INT 1
14549: PPUSH
14550: CALL_OW 343
// game_status := true ;
14554: LD_ADDR_EXP 29
14558: PUSH
14559: LD_INT 1
14561: ST_TO_ADDR
// end ;
14562: LD_VAR 0 1
14566: RET
// every 0 0$01 trigger GetLabs ( 1 ) > 0 do
14567: LD_INT 1
14569: PPUSH
14570: CALL 6358 0 1
14574: PUSH
14575: LD_INT 0
14577: GREATER
14578: IFFALSE 14680
14580: GO 14582
14582: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
14583: LD_INT 35
14585: PPUSH
14586: CALL_OW 67
// until BuildingStatus ( GetLabs ( 1 ) [ 1 ] ) <> bs_build ;
14590: LD_INT 1
14592: PPUSH
14593: CALL 6358 0 1
14597: PUSH
14598: LD_INT 1
14600: ARRAY
14601: PPUSH
14602: CALL_OW 461
14606: PUSH
14607: LD_INT 1
14609: NONEQUAL
14610: IFFALSE 14583
// if IsLive ( guyA ) and IsLive ( guyB ) and not helps_arrive then
14612: LD_EXP 38
14616: PPUSH
14617: CALL_OW 300
14621: PUSH
14622: LD_EXP 39
14626: PPUSH
14627: CALL_OW 300
14631: AND
14632: PUSH
14633: LD_EXP 30
14637: NOT
14638: AND
14639: IFFALSE 14665
// begin Say ( guyA , DL-A-1 ) ;
14641: LD_EXP 38
14645: PPUSH
14646: LD_STRING DL-A-1
14648: PPUSH
14649: CALL_OW 88
// Say ( guyB , DL-B-1 ) ;
14653: LD_EXP 39
14657: PPUSH
14658: LD_STRING DL-B-1
14660: PPUSH
14661: CALL_OW 88
// end ; if not helps_can_arrive then
14665: LD_EXP 31
14669: NOT
14670: IFFALSE 14680
// helps_can_arrive := true ;
14672: LD_ADDR_EXP 31
14676: PUSH
14677: LD_INT 1
14679: ST_TO_ADDR
// end ;
14680: END
// every 0 0$01 trigger GetLabs ( 1 ) > 0 and IsLive ( guyA ) and IsLive ( guyB ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman ] ] ) = 0 and See ( 1 , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , guyA ) ) do
14681: LD_INT 1
14683: PPUSH
14684: CALL 6358 0 1
14688: PUSH
14689: LD_INT 0
14691: GREATER
14692: PUSH
14693: LD_EXP 38
14697: PPUSH
14698: CALL_OW 300
14702: AND
14703: PUSH
14704: LD_EXP 39
14708: PPUSH
14709: CALL_OW 300
14713: AND
14714: PUSH
14715: LD_INT 22
14717: PUSH
14718: LD_INT 1
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PUSH
14725: LD_INT 25
14727: PUSH
14728: LD_INT 12
14730: PUSH
14731: EMPTY
14732: LIST
14733: LIST
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PPUSH
14739: CALL_OW 69
14743: PUSH
14744: LD_INT 0
14746: EQUAL
14747: AND
14748: PUSH
14749: LD_INT 1
14751: PPUSH
14752: LD_INT 25
14754: PUSH
14755: LD_INT 12
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: PPUSH
14762: CALL_OW 69
14766: PPUSH
14767: LD_EXP 38
14771: PPUSH
14772: CALL_OW 74
14776: PPUSH
14777: CALL_OW 292
14781: AND
14782: IFFALSE 14823
14784: GO 14786
14786: DISABLE
// begin Say ( guyA , DA-A-1 ) ;
14787: LD_EXP 38
14791: PPUSH
14792: LD_STRING DA-A-1
14794: PPUSH
14795: CALL_OW 88
// Say ( guyB , DA-B-1 ) ;
14799: LD_EXP 39
14803: PPUSH
14804: LD_STRING DA-B-1
14806: PPUSH
14807: CALL_OW 88
// Say ( guyA , DA-A-2 ) ;
14811: LD_EXP 38
14815: PPUSH
14816: LD_STRING DA-A-2
14818: PPUSH
14819: CALL_OW 88
// end ;
14823: END
// every 0 0$01 trigger game_status and GetDistUnitArea ( guyA , forest_path ) < 7 do
14824: LD_EXP 29
14828: PUSH
14829: LD_EXP 38
14833: PPUSH
14834: LD_INT 6
14836: PPUSH
14837: CALL_OW 299
14841: PUSH
14842: LD_INT 7
14844: LESS
14845: AND
14846: IFFALSE 14899
14848: GO 14850
14850: DISABLE
// begin CenterNowOnXY ( 117 , 50 ) ;
14851: LD_INT 117
14853: PPUSH
14854: LD_INT 50
14856: PPUSH
14857: CALL_OW 86
// Say ( GetHuman ( 1 ) [ 2 ] , D5-A-1 ) ;
14861: LD_INT 1
14863: PPUSH
14864: CALL 9995 0 1
14868: PUSH
14869: LD_INT 2
14871: ARRAY
14872: PPUSH
14873: LD_STRING D5-A-1
14875: PPUSH
14876: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 1 ] , D5-B-1 ) ;
14880: LD_INT 1
14882: PPUSH
14883: CALL 9995 0 1
14887: PUSH
14888: LD_INT 1
14890: ARRAY
14891: PPUSH
14892: LD_STRING D5-B-1
14894: PPUSH
14895: CALL_OW 88
// end ;
14899: END
// every 0 0$01 trigger FilterUnitsInArea ( river , [ f_side , 1 ] ) > 0 do
14900: LD_INT 7
14902: PPUSH
14903: LD_INT 22
14905: PUSH
14906: LD_INT 1
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: PPUSH
14913: CALL_OW 70
14917: PUSH
14918: LD_INT 0
14920: GREATER
14921: IFFALSE 15066
14923: GO 14925
14925: DISABLE
// begin Wait ( 0 0$03 ) ;
14926: LD_INT 105
14928: PPUSH
14929: CALL_OW 67
// DialogueOn ;
14933: CALL_OW 6
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-1 ) ;
14937: LD_INT 1
14939: PPUSH
14940: CALL 9995 0 1
14944: PUSH
14945: LD_INT 1
14947: ARRAY
14948: PPUSH
14949: LD_STRING D6-A-1
14951: PPUSH
14952: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D6-B-1 ) ;
14956: LD_INT 1
14958: PPUSH
14959: CALL 9995 0 1
14963: PUSH
14964: LD_INT 2
14966: ARRAY
14967: PPUSH
14968: LD_STRING D6-B-1
14970: PPUSH
14971: CALL_OW 88
// PlaceSeeing ( 95 , 8 , 1 , 20 ) ;
14975: LD_INT 95
14977: PPUSH
14978: LD_INT 8
14980: PPUSH
14981: LD_INT 1
14983: PPUSH
14984: LD_INT 20
14986: PPUSH
14987: CALL_OW 330
// DWait ( 0 0$0.3 ) ;
14991: LD_INT 10
14993: PPUSH
14994: CALL_OW 68
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-2 ) ;
14998: LD_INT 1
15000: PPUSH
15001: CALL 9995 0 1
15005: PUSH
15006: LD_INT 1
15008: ARRAY
15009: PPUSH
15010: LD_STRING D6-A-2
15012: PPUSH
15013: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D6-B-2 ) ;
15017: LD_INT 1
15019: PPUSH
15020: CALL 9995 0 1
15024: PUSH
15025: LD_INT 2
15027: ARRAY
15028: PPUSH
15029: LD_STRING D6-B-2
15031: PPUSH
15032: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-3 ) ;
15036: LD_INT 1
15038: PPUSH
15039: CALL 9995 0 1
15043: PUSH
15044: LD_INT 1
15046: ARRAY
15047: PPUSH
15048: LD_STRING D6-A-3
15050: PPUSH
15051: CALL_OW 88
// DialogueOff ;
15055: CALL_OW 7
// ChangeMissionObjectives ( M_base ) ;
15059: LD_STRING M_base
15061: PPUSH
15062: CALL_OW 337
// end ;
15066: END
// every 0 0$01 trigger not helps_arrive and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) > 0 do
15067: LD_EXP 30
15071: NOT
15072: PUSH
15073: LD_INT 22
15075: PUSH
15076: LD_INT 3
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: PUSH
15083: LD_INT 21
15085: PUSH
15086: LD_INT 2
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PPUSH
15097: CALL_OW 69
15101: PUSH
15102: LD_INT 0
15104: GREATER
15105: AND
15106: IFFALSE 15239
15108: GO 15110
15110: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
15111: LD_INT 35
15113: PPUSH
15114: CALL_OW 67
// until GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) , GetHuman ( 1 ) [ 1 ] ) , GetHuman ( 1 ) [ 1 ] ) < 7 ;
15118: LD_INT 22
15120: PUSH
15121: LD_INT 3
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: PUSH
15128: LD_INT 21
15130: PUSH
15131: LD_INT 2
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: PUSH
15138: EMPTY
15139: LIST
15140: LIST
15141: PPUSH
15142: CALL_OW 69
15146: PPUSH
15147: LD_INT 1
15149: PPUSH
15150: CALL 9995 0 1
15154: PUSH
15155: LD_INT 1
15157: ARRAY
15158: PPUSH
15159: CALL_OW 74
15163: PPUSH
15164: LD_INT 1
15166: PPUSH
15167: CALL 9995 0 1
15171: PUSH
15172: LD_INT 1
15174: ARRAY
15175: PPUSH
15176: CALL_OW 296
15180: PUSH
15181: LD_INT 7
15183: LESS
15184: IFFALSE 15111
// Say ( GetHuman ( 1 ) [ 1 ] , DR-A-1 ) ;
15186: LD_INT 1
15188: PPUSH
15189: CALL 9995 0 1
15193: PUSH
15194: LD_INT 1
15196: ARRAY
15197: PPUSH
15198: LD_STRING DR-A-1
15200: PPUSH
15201: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , DR-B-1 ) ;
15205: LD_INT 1
15207: PPUSH
15208: CALL 9995 0 1
15212: PUSH
15213: LD_INT 2
15215: ARRAY
15216: PPUSH
15217: LD_STRING DR-B-1
15219: PPUSH
15220: CALL_OW 88
// Wait ( 3 3$00 ) ;
15224: LD_INT 6300
15226: PPUSH
15227: CALL_OW 67
// ru_spotted := true ;
15231: LD_ADDR_EXP 16
15235: PUSH
15236: LD_INT 1
15238: ST_TO_ADDR
// end ;
15239: END
// every 0 0$01 trigger not IsLive ( us_dep1 ) do
15240: LD_INT 35
15242: PPUSH
15243: CALL_OW 300
15247: NOT
15248: IFFALSE 15272
15250: GO 15252
15252: DISABLE
// Say ( GetHuman ( 1 ) [ 1 ] , DDR-A-1 ) ;
15253: LD_INT 1
15255: PPUSH
15256: CALL 9995 0 1
15260: PUSH
15261: LD_INT 1
15263: ARRAY
15264: PPUSH
15265: LD_STRING DDR-A-1
15267: PPUSH
15268: CALL_OW 88
15272: END
// every 0 0$05 trigger GetBuilding ( 1 , b_siberite_mine ) do
15273: LD_INT 1
15275: PPUSH
15276: LD_INT 30
15278: PPUSH
15279: CALL 6209 0 2
15283: IFFALSE 15365
15285: GO 15287
15287: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
15288: LD_INT 35
15290: PPUSH
15291: CALL_OW 67
// until BuildingStatus ( GetBuilding ( 1 , b_siberite_mine ) [ 1 ] ) <> bs_build ;
15295: LD_INT 1
15297: PPUSH
15298: LD_INT 30
15300: PPUSH
15301: CALL 6209 0 2
15305: PUSH
15306: LD_INT 1
15308: ARRAY
15309: PPUSH
15310: CALL_OW 461
15314: PUSH
15315: LD_INT 1
15317: NONEQUAL
15318: IFFALSE 15288
// Say ( GetHuman ( 1 ) [ 1 ] , D8-A-1 ) ;
15320: LD_INT 1
15322: PPUSH
15323: CALL 9995 0 1
15327: PUSH
15328: LD_INT 1
15330: ARRAY
15331: PPUSH
15332: LD_STRING D8-A-1
15334: PPUSH
15335: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D8-B-1 ) ;
15339: LD_INT 1
15341: PPUSH
15342: CALL 9995 0 1
15346: PUSH
15347: LD_INT 2
15349: ARRAY
15350: PPUSH
15351: LD_STRING D8-B-1
15353: PPUSH
15354: CALL_OW 88
// ChangeMissionObjectives ( M_mineok ) ;
15358: LD_STRING M_mineok
15360: PPUSH
15361: CALL_OW 337
// end ;
15365: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) > 1 or ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) = 1 and not IsLive ( us_dep1 ) ) do
15366: LD_INT 22
15368: PUSH
15369: LD_INT 1
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PUSH
15376: LD_INT 30
15378: PUSH
15379: LD_INT 0
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: PUSH
15386: LD_INT 3
15388: PUSH
15389: LD_INT 57
15391: PUSH
15392: EMPTY
15393: LIST
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: LIST
15403: PPUSH
15404: CALL_OW 69
15408: PUSH
15409: LD_INT 1
15411: GREATER
15412: PUSH
15413: LD_INT 22
15415: PUSH
15416: LD_INT 1
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PUSH
15423: LD_INT 30
15425: PUSH
15426: LD_INT 0
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PUSH
15433: LD_INT 3
15435: PUSH
15436: LD_INT 57
15438: PUSH
15439: EMPTY
15440: LIST
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: LIST
15450: PPUSH
15451: CALL_OW 69
15455: PUSH
15456: LD_INT 1
15458: EQUAL
15459: PUSH
15460: LD_INT 35
15462: PPUSH
15463: CALL_OW 300
15467: NOT
15468: AND
15469: OR
15470: IFFALSE 15522
15472: GO 15474
15474: DISABLE
// begin Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , D7-A-1 ) ;
15475: LD_INT 22
15477: PUSH
15478: LD_INT 1
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: LD_INT 25
15487: PUSH
15488: LD_INT 2
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PPUSH
15499: CALL_OW 69
15503: PUSH
15504: LD_INT 1
15506: ARRAY
15507: PPUSH
15508: LD_STRING D7-A-1
15510: PPUSH
15511: CALL_OW 88
// ChangeMissionObjectives ( M_baseok ) ;
15515: LD_STRING M_baseok
15517: PPUSH
15518: CALL_OW 337
// end ;
15522: END
// every 0 0$01 trigger mine_ck do
15523: LD_EXP 35
15527: IFFALSE 15558
15529: GO 15531
15531: DISABLE
// begin Say ( GetHuman ( 1 ) [ 1 ] , D9-A-1 ) ;
15532: LD_INT 1
15534: PPUSH
15535: CALL 9995 0 1
15539: PUSH
15540: LD_INT 1
15542: ARRAY
15543: PPUSH
15544: LD_STRING D9-A-1
15546: PPUSH
15547: CALL_OW 88
// ChangeMissionObjectives ( M_minedest ) ;
15551: LD_STRING M_minedest
15553: PPUSH
15554: CALL_OW 337
// end ;
15558: END
// every 7 7$00 trigger game_status do var time , i , un , r , to_veh ;
15559: LD_EXP 29
15563: IFFALSE 16069
15565: GO 15567
15567: DISABLE
15568: LD_INT 0
15570: PPUSH
15571: PPUSH
15572: PPUSH
15573: PPUSH
15574: PPUSH
// begin AddBetaSquad ( Difficulty ) ;
15575: LD_OWVAR 67
15579: PPUSH
15580: CALL 11896 0 1
// if not helps_can_arrive then
15584: LD_EXP 31
15588: NOT
15589: IFFALSE 15617
// begin SayRadio ( Beta_Squad [ 1 ] , DB-Delay ) ;
15591: LD_EXP 40
15595: PUSH
15596: LD_INT 1
15598: ARRAY
15599: PPUSH
15600: LD_STRING DB-Delay
15602: PPUSH
15603: CALL_OW 94
// time := 10 10$00 ;
15607: LD_ADDR_VAR 0 1
15611: PUSH
15612: LD_INT 21000
15614: ST_TO_ADDR
// end else
15615: GO 15625
// time := 3 3$00 ;
15617: LD_ADDR_VAR 0 1
15621: PUSH
15622: LD_INT 6300
15624: ST_TO_ADDR
// repeat begin time := time - 0 0$01 ;
15625: LD_ADDR_VAR 0 1
15629: PUSH
15630: LD_VAR 0 1
15634: PUSH
15635: LD_INT 35
15637: MINUS
15638: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
15639: LD_INT 35
15641: PPUSH
15642: CALL_OW 67
// end until time = 0 0$00 ;
15646: LD_VAR 0 1
15650: PUSH
15651: LD_INT 0
15653: EQUAL
15654: IFFALSE 15625
// helps_arrive := true ;
15656: LD_ADDR_EXP 30
15660: PUSH
15661: LD_INT 1
15663: ST_TO_ADDR
// if IsLive ( guyA ) then
15664: LD_EXP 38
15668: PPUSH
15669: CALL_OW 300
15673: IFFALSE 15687
// r := guyA else
15675: LD_ADDR_VAR 0 4
15679: PUSH
15680: LD_EXP 38
15684: ST_TO_ADDR
15685: GO 15697
// r := guyB ;
15687: LD_ADDR_VAR 0 4
15691: PUSH
15692: LD_EXP 39
15696: ST_TO_ADDR
// SayRadio ( Beta_Squad [ 1 ] , D2-A-1 ) ;
15697: LD_EXP 40
15701: PUSH
15702: LD_INT 1
15704: ARRAY
15705: PPUSH
15706: LD_STRING D2-A-1
15708: PPUSH
15709: CALL_OW 94
// Say ( r , D2-B-1 ) ;
15713: LD_VAR 0 4
15717: PPUSH
15718: LD_STRING D2-B-1
15720: PPUSH
15721: CALL_OW 88
// SayRadio ( Beta_Squad [ 1 ] , D2-A-2 ) ;
15725: LD_EXP 40
15729: PUSH
15730: LD_INT 1
15732: ARRAY
15733: PPUSH
15734: LD_STRING D2-A-2
15736: PPUSH
15737: CALL_OW 94
// Say ( r , D2-B-2 ) ;
15741: LD_VAR 0 4
15745: PPUSH
15746: LD_STRING D2-B-2
15748: PPUSH
15749: CALL_OW 88
// SayRadio ( Beta_Squad [ 1 ] , D2-A-3 ) ;
15753: LD_EXP 40
15757: PUSH
15758: LD_INT 1
15760: ARRAY
15761: PPUSH
15762: LD_STRING D2-A-3
15764: PPUSH
15765: CALL_OW 94
// Say ( r , D2-B-3 ) ;
15769: LD_VAR 0 4
15773: PPUSH
15774: LD_STRING D2-B-3
15776: PPUSH
15777: CALL_OW 88
// to_veh := [ ] ;
15781: LD_ADDR_VAR 0 5
15785: PUSH
15786: EMPTY
15787: ST_TO_ADDR
// for i = 1 to Beta_Squad do
15788: LD_ADDR_VAR 0 2
15792: PUSH
15793: DOUBLE
15794: LD_INT 1
15796: DEC
15797: ST_TO_ADDR
15798: LD_EXP 40
15802: PUSH
15803: FOR_TO
15804: IFFALSE 16067
// begin if GetTag ( Beta_Squad [ i ] ) = 3 then
15806: LD_EXP 40
15810: PUSH
15811: LD_VAR 0 2
15815: ARRAY
15816: PPUSH
15817: CALL_OW 110
15821: PUSH
15822: LD_INT 3
15824: EQUAL
15825: IFFALSE 15851
// to_veh := to_veh ^ Beta_Squad [ i ] else
15827: LD_ADDR_VAR 0 5
15831: PUSH
15832: LD_VAR 0 5
15836: PUSH
15837: LD_EXP 40
15841: PUSH
15842: LD_VAR 0 2
15846: ARRAY
15847: ADD
15848: ST_TO_ADDR
15849: GO 15976
// if GetTag ( Beta_Squad [ i ] ) = 5 then
15851: LD_EXP 40
15855: PUSH
15856: LD_VAR 0 2
15860: ARRAY
15861: PPUSH
15862: CALL_OW 110
15866: PUSH
15867: LD_INT 5
15869: EQUAL
15870: IFFALSE 15955
// begin SetDir ( Beta_Squad [ i ] , 4 ) ;
15872: LD_EXP 40
15876: PUSH
15877: LD_VAR 0 2
15881: ARRAY
15882: PPUSH
15883: LD_INT 4
15885: PPUSH
15886: CALL_OW 233
// PlaceUnitArea ( Beta_Squad [ i ] , road_vehicle , false ) ;
15890: LD_EXP 40
15894: PUSH
15895: LD_VAR 0 2
15899: ARRAY
15900: PPUSH
15901: LD_INT 5
15903: PPUSH
15904: LD_INT 0
15906: PPUSH
15907: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Beta_Squad [ i ] ) ;
15911: LD_VAR 0 5
15915: PUSH
15916: LD_INT 1
15918: ARRAY
15919: PPUSH
15920: LD_EXP 40
15924: PUSH
15925: LD_VAR 0 2
15929: ARRAY
15930: PPUSH
15931: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
15935: LD_ADDR_VAR 0 5
15939: PUSH
15940: LD_VAR 0 5
15944: PPUSH
15945: LD_INT 1
15947: PPUSH
15948: CALL_OW 3
15952: ST_TO_ADDR
// end else
15953: GO 15976
// PlaceUnitArea ( Beta_Squad [ i ] , road_vehicle , false ) ;
15955: LD_EXP 40
15959: PUSH
15960: LD_VAR 0 2
15964: ARRAY
15965: PPUSH
15966: LD_INT 5
15968: PPUSH
15969: LD_INT 0
15971: PPUSH
15972: CALL_OW 49
// ComMoveXY ( Beta_Squad [ i ] , 165 , 105 ) ;
15976: LD_EXP 40
15980: PUSH
15981: LD_VAR 0 2
15985: ARRAY
15986: PPUSH
15987: LD_INT 165
15989: PPUSH
15990: LD_INT 105
15992: PPUSH
15993: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
15997: LD_INT 70
15999: PPUSH
16000: LD_INT 140
16002: PPUSH
16003: CALL_OW 12
16007: PPUSH
16008: CALL_OW 67
// SetSide ( Beta_Squad [ i ] , 1 ) ;
16012: LD_EXP 40
16016: PUSH
16017: LD_VAR 0 2
16021: ARRAY
16022: PPUSH
16023: LD_INT 1
16025: PPUSH
16026: CALL_OW 235
// if i = 1 then
16030: LD_VAR 0 2
16034: PUSH
16035: LD_INT 1
16037: EQUAL
16038: IFFALSE 16050
// CenterNowOnXY ( 168 , 109 ) ;
16040: LD_INT 168
16042: PPUSH
16043: LD_INT 109
16045: PPUSH
16046: CALL_OW 86
// ComStop ( Beta_Squad [ i ] ) ;
16050: LD_EXP 40
16054: PUSH
16055: LD_VAR 0 2
16059: ARRAY
16060: PPUSH
16061: CALL_OW 141
// end ;
16065: GO 15803
16067: POP
16068: POP
// end ;
16069: PPOPN 5
16071: END
// every 0 0$10 trigger helps_arrive do var i , to_veh ;
16072: LD_EXP 30
16076: IFFALSE 17105
16078: GO 16080
16080: DISABLE
16081: LD_INT 0
16083: PPUSH
16084: PPUSH
// begin Wait ( 5 5$00 ) ;
16085: LD_INT 10500
16087: PPUSH
16088: CALL_OW 67
// AddGammaSquad ( Difficulty ) ;
16092: LD_OWVAR 67
16096: PPUSH
16097: CALL 12585 0 1
// to_veh := [ ] ;
16101: LD_ADDR_VAR 0 2
16105: PUSH
16106: EMPTY
16107: ST_TO_ADDR
// for i = 1 to Gamma_Squad do
16108: LD_ADDR_VAR 0 1
16112: PUSH
16113: DOUBLE
16114: LD_INT 1
16116: DEC
16117: ST_TO_ADDR
16118: LD_EXP 41
16122: PUSH
16123: FOR_TO
16124: IFFALSE 16352
// begin if GetTag ( Gamma_Squad [ i ] ) = 3 then
16126: LD_EXP 41
16130: PUSH
16131: LD_VAR 0 1
16135: ARRAY
16136: PPUSH
16137: CALL_OW 110
16141: PUSH
16142: LD_INT 3
16144: EQUAL
16145: IFFALSE 16171
// to_veh := to_veh ^ Gamma_Squad [ i ] else
16147: LD_ADDR_VAR 0 2
16151: PUSH
16152: LD_VAR 0 2
16156: PUSH
16157: LD_EXP 41
16161: PUSH
16162: LD_VAR 0 1
16166: ARRAY
16167: ADD
16168: ST_TO_ADDR
16169: GO 16296
// if GetTag ( Gamma_Squad [ i ] ) = 5 then
16171: LD_EXP 41
16175: PUSH
16176: LD_VAR 0 1
16180: ARRAY
16181: PPUSH
16182: CALL_OW 110
16186: PUSH
16187: LD_INT 5
16189: EQUAL
16190: IFFALSE 16275
// begin SetDir ( Gamma_Squad [ i ] , 4 ) ;
16192: LD_EXP 41
16196: PUSH
16197: LD_VAR 0 1
16201: ARRAY
16202: PPUSH
16203: LD_INT 4
16205: PPUSH
16206: CALL_OW 233
// PlaceUnitArea ( Gamma_Squad [ i ] , road_vehicle , false ) ;
16210: LD_EXP 41
16214: PUSH
16215: LD_VAR 0 1
16219: ARRAY
16220: PPUSH
16221: LD_INT 5
16223: PPUSH
16224: LD_INT 0
16226: PPUSH
16227: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Gamma_Squad [ i ] ) ;
16231: LD_VAR 0 2
16235: PUSH
16236: LD_INT 1
16238: ARRAY
16239: PPUSH
16240: LD_EXP 41
16244: PUSH
16245: LD_VAR 0 1
16249: ARRAY
16250: PPUSH
16251: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
16255: LD_ADDR_VAR 0 2
16259: PUSH
16260: LD_VAR 0 2
16264: PPUSH
16265: LD_INT 1
16267: PPUSH
16268: CALL_OW 3
16272: ST_TO_ADDR
// end else
16273: GO 16296
// PlaceUnitArea ( Gamma_Squad [ i ] , road_vehicle , false ) ;
16275: LD_EXP 41
16279: PUSH
16280: LD_VAR 0 1
16284: ARRAY
16285: PPUSH
16286: LD_INT 5
16288: PPUSH
16289: LD_INT 0
16291: PPUSH
16292: CALL_OW 49
// ComMoveXY ( Gamma_Squad [ i ] , 164 , 104 ) ;
16296: LD_EXP 41
16300: PUSH
16301: LD_VAR 0 1
16305: ARRAY
16306: PPUSH
16307: LD_INT 164
16309: PPUSH
16310: LD_INT 104
16312: PPUSH
16313: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
16317: LD_INT 70
16319: PPUSH
16320: LD_INT 140
16322: PPUSH
16323: CALL_OW 12
16327: PPUSH
16328: CALL_OW 67
// SetSide ( Gamma_Squad [ i ] , 1 ) ;
16332: LD_EXP 41
16336: PUSH
16337: LD_VAR 0 1
16341: ARRAY
16342: PPUSH
16343: LD_INT 1
16345: PPUSH
16346: CALL_OW 235
// end ;
16350: GO 16123
16352: POP
16353: POP
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-1 ) ;
16354: LD_EXP 41
16358: PUSH
16359: LD_INT 1
16361: ARRAY
16362: PPUSH
16363: LD_STRING D3-A-1
16365: PPUSH
16366: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-1 ) ;
16370: LD_INT 1
16372: PPUSH
16373: CALL 9995 0 1
16377: PUSH
16378: LD_INT 1
16380: ARRAY
16381: PPUSH
16382: LD_STRING D3-B-1
16384: PPUSH
16385: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-2 ) ;
16389: LD_EXP 41
16393: PUSH
16394: LD_INT 1
16396: ARRAY
16397: PPUSH
16398: LD_STRING D3-A-2
16400: PPUSH
16401: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-2 ) ;
16405: LD_INT 1
16407: PPUSH
16408: CALL 9995 0 1
16412: PUSH
16413: LD_INT 1
16415: ARRAY
16416: PPUSH
16417: LD_STRING D3-B-2
16419: PPUSH
16420: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-3 ) ;
16424: LD_EXP 41
16428: PUSH
16429: LD_INT 1
16431: ARRAY
16432: PPUSH
16433: LD_STRING D3-A-3
16435: PPUSH
16436: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-3 ) ;
16440: LD_INT 1
16442: PPUSH
16443: CALL 9995 0 1
16447: PUSH
16448: LD_INT 1
16450: ARRAY
16451: PPUSH
16452: LD_STRING D3-B-3
16454: PPUSH
16455: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-4 ) ;
16459: LD_EXP 41
16463: PUSH
16464: LD_INT 1
16466: ARRAY
16467: PPUSH
16468: LD_STRING D3-A-4
16470: PPUSH
16471: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-4 ) ;
16475: LD_INT 1
16477: PPUSH
16478: CALL 9995 0 1
16482: PUSH
16483: LD_INT 1
16485: ARRAY
16486: PPUSH
16487: LD_STRING D3-B-4
16489: PPUSH
16490: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-5 ) ;
16494: LD_EXP 41
16498: PUSH
16499: LD_INT 1
16501: ARRAY
16502: PPUSH
16503: LD_STRING D3-A-5
16505: PPUSH
16506: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-5 ) ;
16510: LD_INT 1
16512: PPUSH
16513: CALL 9995 0 1
16517: PUSH
16518: LD_INT 1
16520: ARRAY
16521: PPUSH
16522: LD_STRING D3-B-5
16524: PPUSH
16525: CALL_OW 88
// for i = 1 to Gamma_Squad do
16529: LD_ADDR_VAR 0 1
16533: PUSH
16534: DOUBLE
16535: LD_INT 1
16537: DEC
16538: ST_TO_ADDR
16539: LD_EXP 41
16543: PUSH
16544: FOR_TO
16545: IFFALSE 16567
// SetSide ( Gamma_Squad [ i ] , 1 ) ;
16547: LD_EXP 41
16551: PUSH
16552: LD_VAR 0 1
16556: ARRAY
16557: PPUSH
16558: LD_INT 1
16560: PPUSH
16561: CALL_OW 235
16565: GO 16544
16567: POP
16568: POP
// Wait ( [ 3 3$00 , 5 5$00 , 5 5$30 ] [ Difficulty ] ) ;
16569: LD_INT 6300
16571: PUSH
16572: LD_INT 10500
16574: PUSH
16575: LD_INT 11550
16577: PUSH
16578: EMPTY
16579: LIST
16580: LIST
16581: LIST
16582: PUSH
16583: LD_OWVAR 67
16587: ARRAY
16588: PPUSH
16589: CALL_OW 67
// AddZetaSquad ;
16593: CALL 13314 0 0
// Wait ( 0 0$10 ) ;
16597: LD_INT 350
16599: PPUSH
16600: CALL_OW 67
// to_veh := [ ] ;
16604: LD_ADDR_VAR 0 2
16608: PUSH
16609: EMPTY
16610: ST_TO_ADDR
// for i = 1 to Zeta_Squad do
16611: LD_ADDR_VAR 0 1
16615: PUSH
16616: DOUBLE
16617: LD_INT 1
16619: DEC
16620: ST_TO_ADDR
16621: LD_EXP 42
16625: PUSH
16626: FOR_TO
16627: IFFALSE 16837
// begin if GetTag ( Zeta_Squad [ i ] ) = 3 then
16629: LD_EXP 42
16633: PUSH
16634: LD_VAR 0 1
16638: ARRAY
16639: PPUSH
16640: CALL_OW 110
16644: PUSH
16645: LD_INT 3
16647: EQUAL
16648: IFFALSE 16674
// to_veh := to_veh ^ Zeta_Squad [ i ] else
16650: LD_ADDR_VAR 0 2
16654: PUSH
16655: LD_VAR 0 2
16659: PUSH
16660: LD_EXP 42
16664: PUSH
16665: LD_VAR 0 1
16669: ARRAY
16670: ADD
16671: ST_TO_ADDR
16672: GO 16799
// if GetTag ( Zeta_Squad [ i ] ) = 5 then
16674: LD_EXP 42
16678: PUSH
16679: LD_VAR 0 1
16683: ARRAY
16684: PPUSH
16685: CALL_OW 110
16689: PUSH
16690: LD_INT 5
16692: EQUAL
16693: IFFALSE 16778
// begin SetDir ( Zeta_Squad [ i ] , 4 ) ;
16695: LD_EXP 42
16699: PUSH
16700: LD_VAR 0 1
16704: ARRAY
16705: PPUSH
16706: LD_INT 4
16708: PPUSH
16709: CALL_OW 233
// PlaceUnitArea ( Zeta_Squad [ i ] , road_vehicle , false ) ;
16713: LD_EXP 42
16717: PUSH
16718: LD_VAR 0 1
16722: ARRAY
16723: PPUSH
16724: LD_INT 5
16726: PPUSH
16727: LD_INT 0
16729: PPUSH
16730: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Zeta_Squad [ i ] ) ;
16734: LD_VAR 0 2
16738: PUSH
16739: LD_INT 1
16741: ARRAY
16742: PPUSH
16743: LD_EXP 42
16747: PUSH
16748: LD_VAR 0 1
16752: ARRAY
16753: PPUSH
16754: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
16758: LD_ADDR_VAR 0 2
16762: PUSH
16763: LD_VAR 0 2
16767: PPUSH
16768: LD_INT 1
16770: PPUSH
16771: CALL_OW 3
16775: ST_TO_ADDR
// end else
16776: GO 16799
// PlaceUnitArea ( Zeta_Squad [ i ] , road_vehicle , false ) ;
16778: LD_EXP 42
16782: PUSH
16783: LD_VAR 0 1
16787: ARRAY
16788: PPUSH
16789: LD_INT 5
16791: PPUSH
16792: LD_INT 0
16794: PPUSH
16795: CALL_OW 49
// ComMoveXY ( Zeta_Squad [ i ] , 165 , 105 ) ;
16799: LD_EXP 42
16803: PUSH
16804: LD_VAR 0 1
16808: ARRAY
16809: PPUSH
16810: LD_INT 165
16812: PPUSH
16813: LD_INT 105
16815: PPUSH
16816: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
16820: LD_INT 70
16822: PPUSH
16823: LD_INT 140
16825: PPUSH
16826: CALL_OW 12
16830: PPUSH
16831: CALL_OW 67
// end ;
16835: GO 16626
16837: POP
16838: POP
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-1 ) ;
16839: LD_EXP 42
16843: PUSH
16844: LD_INT 1
16846: ARRAY
16847: PPUSH
16848: LD_STRING D4-A-1
16850: PPUSH
16851: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-1 ) ;
16855: LD_INT 1
16857: PPUSH
16858: CALL 9995 0 1
16862: PUSH
16863: LD_INT 1
16865: ARRAY
16866: PPUSH
16867: LD_STRING D4-B-1
16869: PPUSH
16870: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-2 ) ;
16874: LD_EXP 42
16878: PUSH
16879: LD_INT 1
16881: ARRAY
16882: PPUSH
16883: LD_STRING D4-A-2
16885: PPUSH
16886: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-2 ) ;
16890: LD_INT 1
16892: PPUSH
16893: CALL 9995 0 1
16897: PUSH
16898: LD_INT 1
16900: ARRAY
16901: PPUSH
16902: LD_STRING D4-B-2
16904: PPUSH
16905: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-3 ) ;
16909: LD_EXP 42
16913: PUSH
16914: LD_INT 1
16916: ARRAY
16917: PPUSH
16918: LD_STRING D4-A-3
16920: PPUSH
16921: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-3 ) ;
16925: LD_INT 1
16927: PPUSH
16928: CALL 9995 0 1
16932: PUSH
16933: LD_INT 1
16935: ARRAY
16936: PPUSH
16937: LD_STRING D4-B-3
16939: PPUSH
16940: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-4 ) ;
16944: LD_EXP 42
16948: PUSH
16949: LD_INT 1
16951: ARRAY
16952: PPUSH
16953: LD_STRING D4-A-4
16955: PPUSH
16956: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-4 ) ;
16960: LD_INT 1
16962: PPUSH
16963: CALL 9995 0 1
16967: PUSH
16968: LD_INT 1
16970: ARRAY
16971: PPUSH
16972: LD_STRING D4-B-4
16974: PPUSH
16975: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-5 ) ;
16979: LD_EXP 42
16983: PUSH
16984: LD_INT 1
16986: ARRAY
16987: PPUSH
16988: LD_STRING D4-A-5
16990: PPUSH
16991: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-5 ) ;
16995: LD_INT 1
16997: PPUSH
16998: CALL 9995 0 1
17002: PUSH
17003: LD_INT 1
17005: ARRAY
17006: PPUSH
17007: LD_STRING D4-B-5
17009: PPUSH
17010: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-6 ) ;
17014: LD_EXP 42
17018: PUSH
17019: LD_INT 1
17021: ARRAY
17022: PPUSH
17023: LD_STRING D4-A-6
17025: PPUSH
17026: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-6 ) ;
17030: LD_INT 1
17032: PPUSH
17033: CALL 9995 0 1
17037: PUSH
17038: LD_INT 1
17040: ARRAY
17041: PPUSH
17042: LD_STRING D4-B-6
17044: PPUSH
17045: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-7 ) ;
17049: LD_EXP 42
17053: PUSH
17054: LD_INT 1
17056: ARRAY
17057: PPUSH
17058: LD_STRING D4-A-7
17060: PPUSH
17061: CALL_OW 94
// for i = 1 to Zeta_Squad do
17065: LD_ADDR_VAR 0 1
17069: PUSH
17070: DOUBLE
17071: LD_INT 1
17073: DEC
17074: ST_TO_ADDR
17075: LD_EXP 42
17079: PUSH
17080: FOR_TO
17081: IFFALSE 17103
// SetSide ( Zeta_Squad [ i ] , 1 ) ;
17083: LD_EXP 42
17087: PUSH
17088: LD_VAR 0 1
17092: ARRAY
17093: PPUSH
17094: LD_INT 1
17096: PPUSH
17097: CALL_OW 235
17101: GO 17080
17103: POP
17104: POP
// end ;
17105: PPOPN 2
17107: END
// every 0 0$01 trigger FilterUnitsInArea ( rus_spot , [ f_side , your_side ] ) > 0 do
17108: LD_INT 11
17110: PPUSH
17111: LD_INT 22
17113: PUSH
17114: LD_OWVAR 2
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: PPUSH
17123: CALL_OW 70
17127: PUSH
17128: LD_INT 0
17130: GREATER
17131: IFFALSE 17156
17133: GO 17135
17135: DISABLE
// begin Say ( guyA , D10-A-1 ) ;
17136: LD_EXP 38
17140: PPUSH
17141: LD_STRING D10-A-1
17143: PPUSH
17144: CALL_OW 88
// ru_spotted := true ;
17148: LD_ADDR_EXP 16
17152: PUSH
17153: LD_INT 1
17155: ST_TO_ADDR
// end ;
17156: END
// every 0 0$01 trigger IsDead ( guyA ) or IsDead ( guyB ) do
17157: LD_EXP 38
17161: PPUSH
17162: CALL_OW 301
17166: PUSH
17167: LD_EXP 39
17171: PPUSH
17172: CALL_OW 301
17176: OR
17177: IFFALSE 17189
17179: GO 17181
17181: DISABLE
// begin YouLost ( DieP ) ;
17182: LD_STRING DieP
17184: PPUSH
17185: CALL_OW 104
// end ;
17189: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) do
17190: LD_INT 34
17192: PUSH
17193: LD_INT 8
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: PPUSH
17200: CALL_OW 69
17204: IFFALSE 17217
17206: GO 17208
17208: DISABLE
// sib_bomb_constructed := true ;
17209: LD_ADDR_EXP 36
17213: PUSH
17214: LD_INT 1
17216: ST_TO_ADDR
17217: END
// every 0 0$01 trigger game_status and FilterAllUnits ( [ f_side , 3 ] ) = 0 do var i ;
17218: LD_EXP 29
17222: PUSH
17223: LD_INT 22
17225: PUSH
17226: LD_INT 3
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PPUSH
17233: CALL_OW 69
17237: PUSH
17238: LD_INT 0
17240: EQUAL
17241: AND
17242: IFFALSE 17445
17244: GO 17246
17246: DISABLE
17247: LD_INT 0
17249: PPUSH
// begin game_status := false ;
17250: LD_ADDR_EXP 29
17254: PUSH
17255: LD_INT 0
17257: ST_TO_ADDR
// if not depotConstructed then
17258: LD_EXP 2
17262: NOT
17263: IFFALSE 17272
// SetAchievement ( ACH_NODEPOT ) ;
17265: LD_STRING ACH_NODEPOT
17267: PPUSH
17268: CALL_OW 543
// if Difficulty = 3 then
17272: LD_OWVAR 67
17276: PUSH
17277: LD_INT 3
17279: EQUAL
17280: IFFALSE 17289
// SetAchievement ( ACH_HARD ) ;
17282: LD_STRING ACH_HARD
17284: PPUSH
17285: CALL_OW 543
// if ( ( tick / 35 ) / 60 ) < [ 70 , 60 , 50 ] [ Difficulty ] then
17289: LD_OWVAR 1
17293: PUSH
17294: LD_INT 35
17296: DIVREAL
17297: PUSH
17298: LD_INT 60
17300: DIVREAL
17301: PUSH
17302: LD_INT 70
17304: PUSH
17305: LD_INT 60
17307: PUSH
17308: LD_INT 50
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: LIST
17315: PUSH
17316: LD_OWVAR 67
17320: ARRAY
17321: LESS
17322: IFFALSE 17336
// AddMedal ( play , 1 ) else
17324: LD_STRING play
17326: PPUSH
17327: LD_INT 1
17329: PPUSH
17330: CALL_OW 101
17334: GO 17347
// AddMedal ( play , - 1 ) ;
17336: LD_STRING play
17338: PPUSH
17339: LD_INT 1
17341: NEG
17342: PPUSH
17343: CALL_OW 101
// if sib_bomb_constructed then
17347: LD_EXP 36
17351: IFFALSE 17365
// AddMedal ( sibbomb , 1 ) else
17353: LD_STRING sibbomb
17355: PPUSH
17356: LD_INT 1
17358: PPUSH
17359: CALL_OW 101
17363: GO 17376
// AddMedal ( sibbomb , - 1 ) ;
17365: LD_STRING sibbomb
17367: PPUSH
17368: LD_INT 1
17370: NEG
17371: PPUSH
17372: CALL_OW 101
// if mine_constructed and not mine_ck then
17376: LD_EXP 37
17380: PUSH
17381: LD_EXP 35
17385: NOT
17386: AND
17387: IFFALSE 17399
// AddMedal ( mine , 1 ) ;
17389: LD_STRING mine
17391: PPUSH
17392: LD_INT 1
17394: PPUSH
17395: CALL_OW 101
// if mine_ck then
17399: LD_EXP 35
17403: IFFALSE 17416
// AddMedal ( mine , - 1 ) ;
17405: LD_STRING mine
17407: PPUSH
17408: LD_INT 1
17410: NEG
17411: PPUSH
17412: CALL_OW 101
// if not mine_constructed then
17416: LD_EXP 37
17420: NOT
17421: IFFALSE 17434
// AddMedal ( mine , - 2 ) ;
17423: LD_STRING mine
17425: PPUSH
17426: LD_INT 2
17428: NEG
17429: PPUSH
17430: CALL_OW 101
// GiveMedals ( Main ) ;
17434: LD_STRING Main
17436: PPUSH
17437: CALL_OW 102
// YouWin ;
17441: CALL_OW 103
// end ; end_of_file
17445: PPOPN 1
17447: END
// every 0 0$03 trigger game_status do var time ;
17448: LD_EXP 29
17452: IFFALSE 17617
17454: GO 17456
17456: DISABLE
17457: LD_INT 0
17459: PPUSH
// begin time := [ 0 0$30 , 0 0$45 , 1 1$00 ] [ Difficulty ] ;
17460: LD_ADDR_VAR 0 1
17464: PUSH
17465: LD_INT 1050
17467: PUSH
17468: LD_INT 1575
17470: PUSH
17471: LD_INT 2100
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: LIST
17478: PUSH
17479: LD_OWVAR 67
17483: ARRAY
17484: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$12 ) ) ;
17485: LD_VAR 0 1
17489: PUSH
17490: LD_INT 0
17492: PPUSH
17493: LD_INT 420
17495: PPUSH
17496: CALL_OW 12
17500: PLUS
17501: PPUSH
17502: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
17506: LD_INT 1
17508: PPUSH
17509: LD_INT 5
17511: PPUSH
17512: CALL_OW 12
17516: PPUSH
17517: LD_INT 1
17519: PPUSH
17520: CALL_OW 57
// Wait ( Rand ( 0 0$03 , 0 0$30 ) ) ;
17524: LD_INT 105
17526: PPUSH
17527: LD_INT 1050
17529: PPUSH
17530: CALL_OW 12
17534: PPUSH
17535: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 148 , 107 , 20 , true ) ;
17539: LD_INT 1
17541: PPUSH
17542: LD_INT 5
17544: PPUSH
17545: CALL_OW 12
17549: PPUSH
17550: LD_INT 148
17552: PPUSH
17553: LD_INT 107
17555: PPUSH
17556: LD_INT 20
17558: PPUSH
17559: LD_INT 1
17561: PPUSH
17562: CALL_OW 56
// if tick mod [ 21 21$00 , 18 18$00 , 16 16$00 ] [ Difficulty ] then
17566: LD_OWVAR 1
17570: PUSH
17571: LD_INT 44100
17573: PUSH
17574: LD_INT 37800
17576: PUSH
17577: LD_INT 33600
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: LIST
17584: PUSH
17585: LD_OWVAR 67
17589: ARRAY
17590: MOD
17591: IFFALSE 17607
// time := time + 0 0$20 ;
17593: LD_ADDR_VAR 0 1
17597: PUSH
17598: LD_VAR 0 1
17602: PUSH
17603: LD_INT 700
17605: PLUS
17606: ST_TO_ADDR
// end until game_status = false ;
17607: LD_EXP 29
17611: PUSH
17612: LD_INT 0
17614: EQUAL
17615: IFFALSE 17485
// end ;
17617: PPOPN 1
17619: END
// every 0 0$03 trigger game_status do var time ;
17620: LD_EXP 29
17624: IFFALSE 17778
17626: GO 17628
17628: DISABLE
17629: LD_INT 0
17631: PPUSH
// begin time := [ 0 0$20 , 0 0$25 , 0 0$40 ] [ Difficulty ] ;
17632: LD_ADDR_VAR 0 1
17636: PUSH
17637: LD_INT 700
17639: PUSH
17640: LD_INT 875
17642: PUSH
17643: LD_INT 1400
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: LIST
17650: PUSH
17651: LD_OWVAR 67
17655: ARRAY
17656: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$11 ) ) ;
17657: LD_VAR 0 1
17661: PUSH
17662: LD_INT 0
17664: PPUSH
17665: LD_INT 385
17667: PPUSH
17668: CALL_OW 12
17672: PLUS
17673: PPUSH
17674: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 102 , 6 , 25 , true ) ;
17678: LD_INT 1
17680: PPUSH
17681: LD_INT 5
17683: PPUSH
17684: CALL_OW 12
17688: PPUSH
17689: LD_INT 102
17691: PPUSH
17692: LD_INT 6
17694: PPUSH
17695: LD_INT 25
17697: PPUSH
17698: LD_INT 1
17700: PPUSH
17701: CALL_OW 56
// if tick mod [ 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] then
17705: LD_OWVAR 1
17709: PUSH
17710: LD_INT 52500
17712: PUSH
17713: LD_INT 46200
17715: PUSH
17716: LD_INT 42000
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: LIST
17723: PUSH
17724: LD_OWVAR 67
17728: ARRAY
17729: MOD
17730: IFFALSE 17746
// time := time + 0 0$25 ;
17732: LD_ADDR_VAR 0 1
17736: PUSH
17737: LD_VAR 0 1
17741: PUSH
17742: LD_INT 875
17744: PLUS
17745: ST_TO_ADDR
// if tick mod 110 110$00 = 0 then
17746: LD_OWVAR 1
17750: PUSH
17751: LD_INT 231000
17753: MOD
17754: PUSH
17755: LD_INT 0
17757: EQUAL
17758: IFFALSE 17768
// time := 0 0$30 ;
17760: LD_ADDR_VAR 0 1
17764: PUSH
17765: LD_INT 1050
17767: ST_TO_ADDR
// end until game_status = false ;
17768: LD_EXP 29
17772: PUSH
17773: LD_INT 0
17775: EQUAL
17776: IFFALSE 17657
// end ;
17778: PPOPN 1
17780: END
// every 0 0$03 trigger game_status do var time ;
17781: LD_EXP 29
17785: IFFALSE 17921
17787: GO 17789
17789: DISABLE
17790: LD_INT 0
17792: PPUSH
// begin time := [ 0 0$30 , 0 0$45 , 0 0$50 ] [ Difficulty ] ;
17793: LD_ADDR_VAR 0 1
17797: PUSH
17798: LD_INT 1050
17800: PUSH
17801: LD_INT 1575
17803: PUSH
17804: LD_INT 1750
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: LIST
17811: PUSH
17812: LD_OWVAR 67
17816: ARRAY
17817: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$11 ) ) ;
17818: LD_VAR 0 1
17822: PUSH
17823: LD_INT 0
17825: PPUSH
17826: LD_INT 385
17828: PPUSH
17829: CALL_OW 12
17833: PLUS
17834: PPUSH
17835: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 51 , 74 , 25 , true ) ;
17839: LD_INT 1
17841: PPUSH
17842: LD_INT 5
17844: PPUSH
17845: CALL_OW 12
17849: PPUSH
17850: LD_INT 51
17852: PPUSH
17853: LD_INT 74
17855: PPUSH
17856: LD_INT 25
17858: PPUSH
17859: LD_INT 1
17861: PPUSH
17862: CALL_OW 56
// if tick mod [ 40 40$00 , 50 50$00 , 65 65$00 ] [ Difficulty ] = 0 then
17866: LD_OWVAR 1
17870: PUSH
17871: LD_INT 84000
17873: PUSH
17874: LD_INT 105000
17876: PUSH
17877: LD_INT 136500
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: LIST
17884: PUSH
17885: LD_OWVAR 67
17889: ARRAY
17890: MOD
17891: PUSH
17892: LD_INT 0
17894: EQUAL
17895: IFFALSE 17911
// time := time + 0 0$15 ;
17897: LD_ADDR_VAR 0 1
17901: PUSH
17902: LD_VAR 0 1
17906: PUSH
17907: LD_INT 525
17909: PLUS
17910: ST_TO_ADDR
// end until game_status = false ;
17911: LD_EXP 29
17915: PUSH
17916: LD_INT 0
17918: EQUAL
17919: IFFALSE 17818
// end ; end_of_file
17921: PPOPN 1
17923: END
// every 0 0$01 trigger not debug do
17924: LD_EXP 1
17928: NOT
17929: IFFALSE 17952
17931: GO 17933
17933: DISABLE
// begin enable ;
17934: ENABLE
// Display_Strings := [ #tick , tick ] ;
17935: LD_ADDR_OWVAR 47
17939: PUSH
17940: LD_STRING #tick
17942: PUSH
17943: LD_OWVAR 1
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: ST_TO_ADDR
// end ; end_of_file
17952: END
// on VehicleConstructed ( un , fac ) do begin SOS_VehicleConstructed ( un , fac ) ;
17953: LD_VAR 0 1
17957: PPUSH
17958: LD_VAR 0 2
17962: PPUSH
17963: CALL 34684 0 2
// if GetSide ( un ) = 3 and un in FilterAllUnits ( [ [ f_or , [ f_weapon , ru_heavy_gun ] , [ f_weapon , ru_rocket ] , [ f_weapon , ru_rocket_launcher ] ] ] ) then
17967: LD_VAR 0 1
17971: PPUSH
17972: CALL_OW 255
17976: PUSH
17977: LD_INT 3
17979: EQUAL
17980: PUSH
17981: LD_VAR 0 1
17985: PUSH
17986: LD_INT 2
17988: PUSH
17989: LD_INT 34
17991: PUSH
17992: LD_INT 46
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: PUSH
17999: LD_INT 34
18001: PUSH
18002: LD_INT 47
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: PUSH
18009: LD_INT 34
18011: PUSH
18012: LD_INT 45
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: PUSH
18025: EMPTY
18026: LIST
18027: PPUSH
18028: CALL_OW 69
18032: IN
18033: AND
18034: IFFALSE 18052
// ru_reserve := ru_reserve ^ un ;
18036: LD_ADDR_EXP 9
18040: PUSH
18041: LD_EXP 9
18045: PUSH
18046: LD_VAR 0 1
18050: ADD
18051: ST_TO_ADDR
// if GetSide ( un ) = 3 and not GetWeapon ( un ) in [ ru_siberium_rocket , ru_crane ] then
18052: LD_VAR 0 1
18056: PPUSH
18057: CALL_OW 255
18061: PUSH
18062: LD_INT 3
18064: EQUAL
18065: PUSH
18066: LD_VAR 0 1
18070: PPUSH
18071: CALL_OW 264
18075: PUSH
18076: LD_INT 48
18078: PUSH
18079: LD_INT 52
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: IN
18086: NOT
18087: AND
18088: IFFALSE 18105
// ComMoveXY ( un , 65 , 60 ) ;
18090: LD_VAR 0 1
18094: PPUSH
18095: LD_INT 65
18097: PPUSH
18098: LD_INT 60
18100: PPUSH
18101: CALL_OW 111
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) then
18105: LD_VAR 0 1
18109: PUSH
18110: LD_INT 22
18112: PUSH
18113: LD_INT 3
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PUSH
18120: LD_INT 34
18122: PUSH
18123: LD_INT 48
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: PPUSH
18134: CALL_OW 69
18138: IN
18139: IFFALSE 18192
// if FilterUnitsInArea ( alt_base , [ f_side , 1 ] ) then
18141: LD_INT 12
18143: PPUSH
18144: LD_INT 22
18146: PUSH
18147: LD_INT 1
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PPUSH
18154: CALL_OW 70
18158: IFFALSE 18177
// ComAttackPlace ( un , 98 , 10 ) else
18160: LD_VAR 0 1
18164: PPUSH
18165: LD_INT 98
18167: PPUSH
18168: LD_INT 10
18170: PPUSH
18171: CALL_OW 116
18175: GO 18192
// ComAttackPlace ( un , 134 , 99 ) ;
18177: LD_VAR 0 1
18181: PPUSH
18182: LD_INT 134
18184: PPUSH
18185: LD_INT 99
18187: PPUSH
18188: CALL_OW 116
// end ;
18192: PPOPN 2
18194: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18195: LD_VAR 0 1
18199: PPUSH
18200: CALL 34564 0 1
// if GetChassis ( un ) = 25 then
18204: LD_VAR 0 1
18208: PPUSH
18209: CALL_OW 265
18213: PUSH
18214: LD_INT 25
18216: EQUAL
18217: IFFALSE 18226
// SetAchievement ( ACH_BEH ) ;
18219: LD_STRING ACH_BEH
18221: PPUSH
18222: CALL_OW 543
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not GetBType ( un ) in [ b_depot , b_oil_mine , b_siberite_mine , b_oil_power ] then
18226: LD_VAR 0 1
18230: PUSH
18231: LD_INT 22
18233: PUSH
18234: LD_INT 3
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: PUSH
18241: LD_INT 21
18243: PUSH
18244: LD_INT 3
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: PPUSH
18255: CALL_OW 69
18259: IN
18260: PUSH
18261: LD_VAR 0 1
18265: PPUSH
18266: CALL_OW 266
18270: PUSH
18271: LD_INT 0
18273: PUSH
18274: LD_INT 29
18276: PUSH
18277: LD_INT 30
18279: PUSH
18280: LD_INT 26
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: IN
18289: NOT
18290: AND
18291: IFFALSE 18377
// begin ru_blist := ru_blist ^ GetBType ( un ) ;
18293: LD_ADDR_EXP 13
18297: PUSH
18298: LD_EXP 13
18302: PUSH
18303: LD_VAR 0 1
18307: PPUSH
18308: CALL_OW 266
18312: ADD
18313: ST_TO_ADDR
// ru_blist := ru_blist ^ GetX ( un ) ;
18314: LD_ADDR_EXP 13
18318: PUSH
18319: LD_EXP 13
18323: PUSH
18324: LD_VAR 0 1
18328: PPUSH
18329: CALL_OW 250
18333: ADD
18334: ST_TO_ADDR
// ru_blist := ru_blist ^ GetY ( un ) ;
18335: LD_ADDR_EXP 13
18339: PUSH
18340: LD_EXP 13
18344: PUSH
18345: LD_VAR 0 1
18349: PPUSH
18350: CALL_OW 251
18354: ADD
18355: ST_TO_ADDR
// ru_blist := ru_blist ^ GetDir ( un ) ;
18356: LD_ADDR_EXP 13
18360: PUSH
18361: LD_EXP 13
18365: PUSH
18366: LD_VAR 0 1
18370: PPUSH
18371: CALL_OW 254
18375: ADD
18376: ST_TO_ADDR
// end ; if un in ru_attack_list then
18377: LD_VAR 0 1
18381: PUSH
18382: LD_EXP 10
18386: IN
18387: IFFALSE 18405
// ru_attack_list := ru_attack_list diff un ;
18389: LD_ADDR_EXP 10
18393: PUSH
18394: LD_EXP 10
18398: PUSH
18399: LD_VAR 0 1
18403: DIFF
18404: ST_TO_ADDR
// if un in ru_protector then
18405: LD_VAR 0 1
18409: PUSH
18410: LD_EXP 17
18414: IN
18415: IFFALSE 18433
// ru_protector := ru_protector diff un ;
18417: LD_ADDR_EXP 17
18421: PUSH
18422: LD_EXP 17
18426: PUSH
18427: LD_VAR 0 1
18431: DIFF
18432: ST_TO_ADDR
// if GetBType ( un ) = b_siberite_mine and GetSide ( un ) = 1 then
18433: LD_VAR 0 1
18437: PPUSH
18438: CALL_OW 266
18442: PUSH
18443: LD_INT 30
18445: EQUAL
18446: PUSH
18447: LD_VAR 0 1
18451: PPUSH
18452: CALL_OW 255
18456: PUSH
18457: LD_INT 1
18459: EQUAL
18460: AND
18461: IFFALSE 18471
// mine_ck := true ;
18463: LD_ADDR_EXP 35
18467: PUSH
18468: LD_INT 1
18470: ST_TO_ADDR
// end ;
18471: PPOPN 1
18473: END
// on BuildingComplete ( un ) do var i ;
18474: LD_INT 0
18476: PPUSH
// begin if GetSide ( un ) = 1 and GetBType ( un ) = b_depot then
18477: LD_VAR 0 1
18481: PPUSH
18482: CALL_OW 255
18486: PUSH
18487: LD_INT 1
18489: EQUAL
18490: PUSH
18491: LD_VAR 0 1
18495: PPUSH
18496: CALL_OW 266
18500: PUSH
18501: LD_INT 0
18503: EQUAL
18504: AND
18505: IFFALSE 18515
// depotConstructed := true ;
18507: LD_ADDR_EXP 2
18511: PUSH
18512: LD_INT 1
18514: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetBType ( un ) = b_siberite_mine then
18515: LD_VAR 0 1
18519: PPUSH
18520: CALL_OW 255
18524: PUSH
18525: LD_INT 1
18527: EQUAL
18528: PUSH
18529: LD_VAR 0 1
18533: PPUSH
18534: CALL_OW 266
18538: PUSH
18539: LD_INT 30
18541: EQUAL
18542: AND
18543: IFFALSE 18553
// mine_constructed := true ;
18545: LD_ADDR_EXP 37
18549: PUSH
18550: LD_INT 1
18552: ST_TO_ADDR
// if GetSide ( un ) = 3 and GetBType ( un ) = b_depot then
18553: LD_VAR 0 1
18557: PPUSH
18558: CALL_OW 255
18562: PUSH
18563: LD_INT 3
18565: EQUAL
18566: PUSH
18567: LD_VAR 0 1
18571: PPUSH
18572: CALL_OW 266
18576: PUSH
18577: LD_INT 0
18579: EQUAL
18580: AND
18581: IFFALSE 18638
// begin for i = 1 to 2 do
18583: LD_ADDR_VAR 0 2
18587: PUSH
18588: DOUBLE
18589: LD_INT 1
18591: DEC
18592: ST_TO_ADDR
18593: LD_INT 2
18595: PUSH
18596: FOR_TO
18597: IFFALSE 18636
// begin ComExitBuilding ( ru_sold [ i ] ) ;
18599: LD_EXP 20
18603: PUSH
18604: LD_VAR 0 2
18608: ARRAY
18609: PPUSH
18610: CALL_OW 122
// AddComEnterUnit ( ru_sold [ i ] , un ) ;
18614: LD_EXP 20
18618: PUSH
18619: LD_VAR 0 2
18623: ARRAY
18624: PPUSH
18625: LD_VAR 0 1
18629: PPUSH
18630: CALL_OW 180
// end ;
18634: GO 18596
18636: POP
18637: POP
// end ; if GetSide ( un ) = 3 and GetBType ( un ) in ru_blist then
18638: LD_VAR 0 1
18642: PPUSH
18643: CALL_OW 255
18647: PUSH
18648: LD_INT 3
18650: EQUAL
18651: PUSH
18652: LD_VAR 0 1
18656: PPUSH
18657: CALL_OW 266
18661: PUSH
18662: LD_EXP 13
18666: IN
18667: AND
18668: IFFALSE 18708
// for i = 1 to 4 do
18670: LD_ADDR_VAR 0 2
18674: PUSH
18675: DOUBLE
18676: LD_INT 1
18678: DEC
18679: ST_TO_ADDR
18680: LD_INT 4
18682: PUSH
18683: FOR_TO
18684: IFFALSE 18706
// ru_blist := Delete ( ru_blist , 1 ) ;
18686: LD_ADDR_EXP 13
18690: PUSH
18691: LD_EXP 13
18695: PPUSH
18696: LD_INT 1
18698: PPUSH
18699: CALL_OW 3
18703: ST_TO_ADDR
18704: GO 18683
18706: POP
18707: POP
// end ;
18708: PPOPN 2
18710: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
18711: LD_VAR 0 1
18715: PPUSH
18716: LD_VAR 0 2
18720: PPUSH
18721: LD_VAR 0 3
18725: PPUSH
18726: CALL 34660 0 3
// end ;
18730: PPOPN 3
18732: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
18733: LD_VAR 0 1
18737: PPUSH
18738: CALL 34668 0 1
// end ; end_of_file end_of_file
18742: PPOPN 1
18744: END
// export globalGameSaveCounter ; every 0 0$1 do
18745: GO 18747
18747: DISABLE
// begin enable ;
18748: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18749: LD_STRING updateTimer(
18751: PUSH
18752: LD_OWVAR 1
18756: STR
18757: PUSH
18758: LD_STRING );
18760: STR
18761: PPUSH
18762: CALL_OW 559
// end ;
18766: END
// every 0 0$1 do
18767: GO 18769
18769: DISABLE
// begin globalGameSaveCounter := 0 ;
18770: LD_ADDR_EXP 43
18774: PUSH
18775: LD_INT 0
18777: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
18778: LD_STRING setGameSaveCounter(0)
18780: PPUSH
18781: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
18785: LD_STRING initStreamRollete();
18787: PPUSH
18788: CALL_OW 559
// InitStreamMode ;
18792: CALL 20135 0 0
// DefineStreamItems ( false ) ;
18796: LD_INT 0
18798: PPUSH
18799: CALL 20599 0 1
// end ;
18803: END
// export function SOS_MapStart ( ) ; begin
18804: LD_INT 0
18806: PPUSH
// if streamModeActive then
18807: LD_EXP 44
18811: IFFALSE 18820
// DefineStreamItems ( true ) ;
18813: LD_INT 1
18815: PPUSH
18816: CALL 20599 0 1
// UpdateLuaVariables ( ) ;
18820: CALL 18837 0 0
// UpdateFactoryWaypoints ( ) ;
18824: CALL 33468 0 0
// UpdateWarehouseGatheringPoints ( ) ;
18828: CALL 33725 0 0
// end ;
18832: LD_VAR 0 1
18836: RET
// function UpdateLuaVariables ( ) ; begin
18837: LD_INT 0
18839: PPUSH
// if globalGameSaveCounter then
18840: LD_EXP 43
18844: IFFALSE 18878
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
18846: LD_ADDR_EXP 43
18850: PUSH
18851: LD_EXP 43
18855: PPUSH
18856: CALL 78510 0 1
18860: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
18861: LD_STRING setGameSaveCounter(
18863: PUSH
18864: LD_EXP 43
18868: STR
18869: PUSH
18870: LD_STRING )
18872: STR
18873: PPUSH
18874: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
18878: LD_STRING setGameDifficulty(
18880: PUSH
18881: LD_OWVAR 67
18885: STR
18886: PUSH
18887: LD_STRING )
18889: STR
18890: PPUSH
18891: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
18895: LD_STRING displayDifficulty(
18897: PUSH
18898: LD_OWVAR 67
18902: STR
18903: PUSH
18904: LD_STRING )
18906: STR
18907: PPUSH
18908: CALL_OW 559
// end ;
18912: LD_VAR 0 1
18916: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18917: LD_INT 0
18919: PPUSH
// if p2 = stream_mode then
18920: LD_VAR 0 2
18924: PUSH
18925: LD_INT 100
18927: EQUAL
18928: IFFALSE 19931
// begin if not StreamModeActive then
18930: LD_EXP 44
18934: NOT
18935: IFFALSE 18945
// StreamModeActive := true ;
18937: LD_ADDR_EXP 44
18941: PUSH
18942: LD_INT 1
18944: ST_TO_ADDR
// if p3 = 0 then
18945: LD_VAR 0 3
18949: PUSH
18950: LD_INT 0
18952: EQUAL
18953: IFFALSE 18959
// InitStreamMode ;
18955: CALL 20135 0 0
// if p3 = 1 then
18959: LD_VAR 0 3
18963: PUSH
18964: LD_INT 1
18966: EQUAL
18967: IFFALSE 18977
// sRocket := true ;
18969: LD_ADDR_EXP 49
18973: PUSH
18974: LD_INT 1
18976: ST_TO_ADDR
// if p3 = 2 then
18977: LD_VAR 0 3
18981: PUSH
18982: LD_INT 2
18984: EQUAL
18985: IFFALSE 18995
// sSpeed := true ;
18987: LD_ADDR_EXP 48
18991: PUSH
18992: LD_INT 1
18994: ST_TO_ADDR
// if p3 = 3 then
18995: LD_VAR 0 3
18999: PUSH
19000: LD_INT 3
19002: EQUAL
19003: IFFALSE 19013
// sEngine := true ;
19005: LD_ADDR_EXP 50
19009: PUSH
19010: LD_INT 1
19012: ST_TO_ADDR
// if p3 = 4 then
19013: LD_VAR 0 3
19017: PUSH
19018: LD_INT 4
19020: EQUAL
19021: IFFALSE 19031
// sSpec := true ;
19023: LD_ADDR_EXP 47
19027: PUSH
19028: LD_INT 1
19030: ST_TO_ADDR
// if p3 = 5 then
19031: LD_VAR 0 3
19035: PUSH
19036: LD_INT 5
19038: EQUAL
19039: IFFALSE 19049
// sLevel := true ;
19041: LD_ADDR_EXP 51
19045: PUSH
19046: LD_INT 1
19048: ST_TO_ADDR
// if p3 = 6 then
19049: LD_VAR 0 3
19053: PUSH
19054: LD_INT 6
19056: EQUAL
19057: IFFALSE 19067
// sArmoury := true ;
19059: LD_ADDR_EXP 52
19063: PUSH
19064: LD_INT 1
19066: ST_TO_ADDR
// if p3 = 7 then
19067: LD_VAR 0 3
19071: PUSH
19072: LD_INT 7
19074: EQUAL
19075: IFFALSE 19085
// sRadar := true ;
19077: LD_ADDR_EXP 53
19081: PUSH
19082: LD_INT 1
19084: ST_TO_ADDR
// if p3 = 8 then
19085: LD_VAR 0 3
19089: PUSH
19090: LD_INT 8
19092: EQUAL
19093: IFFALSE 19103
// sBunker := true ;
19095: LD_ADDR_EXP 54
19099: PUSH
19100: LD_INT 1
19102: ST_TO_ADDR
// if p3 = 9 then
19103: LD_VAR 0 3
19107: PUSH
19108: LD_INT 9
19110: EQUAL
19111: IFFALSE 19121
// sHack := true ;
19113: LD_ADDR_EXP 55
19117: PUSH
19118: LD_INT 1
19120: ST_TO_ADDR
// if p3 = 10 then
19121: LD_VAR 0 3
19125: PUSH
19126: LD_INT 10
19128: EQUAL
19129: IFFALSE 19139
// sFire := true ;
19131: LD_ADDR_EXP 56
19135: PUSH
19136: LD_INT 1
19138: ST_TO_ADDR
// if p3 = 11 then
19139: LD_VAR 0 3
19143: PUSH
19144: LD_INT 11
19146: EQUAL
19147: IFFALSE 19157
// sRefresh := true ;
19149: LD_ADDR_EXP 57
19153: PUSH
19154: LD_INT 1
19156: ST_TO_ADDR
// if p3 = 12 then
19157: LD_VAR 0 3
19161: PUSH
19162: LD_INT 12
19164: EQUAL
19165: IFFALSE 19175
// sExp := true ;
19167: LD_ADDR_EXP 58
19171: PUSH
19172: LD_INT 1
19174: ST_TO_ADDR
// if p3 = 13 then
19175: LD_VAR 0 3
19179: PUSH
19180: LD_INT 13
19182: EQUAL
19183: IFFALSE 19193
// sDepot := true ;
19185: LD_ADDR_EXP 59
19189: PUSH
19190: LD_INT 1
19192: ST_TO_ADDR
// if p3 = 14 then
19193: LD_VAR 0 3
19197: PUSH
19198: LD_INT 14
19200: EQUAL
19201: IFFALSE 19211
// sFlag := true ;
19203: LD_ADDR_EXP 60
19207: PUSH
19208: LD_INT 1
19210: ST_TO_ADDR
// if p3 = 15 then
19211: LD_VAR 0 3
19215: PUSH
19216: LD_INT 15
19218: EQUAL
19219: IFFALSE 19229
// sKamikadze := true ;
19221: LD_ADDR_EXP 68
19225: PUSH
19226: LD_INT 1
19228: ST_TO_ADDR
// if p3 = 16 then
19229: LD_VAR 0 3
19233: PUSH
19234: LD_INT 16
19236: EQUAL
19237: IFFALSE 19247
// sTroll := true ;
19239: LD_ADDR_EXP 69
19243: PUSH
19244: LD_INT 1
19246: ST_TO_ADDR
// if p3 = 17 then
19247: LD_VAR 0 3
19251: PUSH
19252: LD_INT 17
19254: EQUAL
19255: IFFALSE 19265
// sSlow := true ;
19257: LD_ADDR_EXP 70
19261: PUSH
19262: LD_INT 1
19264: ST_TO_ADDR
// if p3 = 18 then
19265: LD_VAR 0 3
19269: PUSH
19270: LD_INT 18
19272: EQUAL
19273: IFFALSE 19283
// sLack := true ;
19275: LD_ADDR_EXP 71
19279: PUSH
19280: LD_INT 1
19282: ST_TO_ADDR
// if p3 = 19 then
19283: LD_VAR 0 3
19287: PUSH
19288: LD_INT 19
19290: EQUAL
19291: IFFALSE 19301
// sTank := true ;
19293: LD_ADDR_EXP 73
19297: PUSH
19298: LD_INT 1
19300: ST_TO_ADDR
// if p3 = 20 then
19301: LD_VAR 0 3
19305: PUSH
19306: LD_INT 20
19308: EQUAL
19309: IFFALSE 19319
// sRemote := true ;
19311: LD_ADDR_EXP 74
19315: PUSH
19316: LD_INT 1
19318: ST_TO_ADDR
// if p3 = 21 then
19319: LD_VAR 0 3
19323: PUSH
19324: LD_INT 21
19326: EQUAL
19327: IFFALSE 19337
// sPowell := true ;
19329: LD_ADDR_EXP 75
19333: PUSH
19334: LD_INT 1
19336: ST_TO_ADDR
// if p3 = 22 then
19337: LD_VAR 0 3
19341: PUSH
19342: LD_INT 22
19344: EQUAL
19345: IFFALSE 19355
// sTeleport := true ;
19347: LD_ADDR_EXP 78
19351: PUSH
19352: LD_INT 1
19354: ST_TO_ADDR
// if p3 = 23 then
19355: LD_VAR 0 3
19359: PUSH
19360: LD_INT 23
19362: EQUAL
19363: IFFALSE 19373
// sOilTower := true ;
19365: LD_ADDR_EXP 80
19369: PUSH
19370: LD_INT 1
19372: ST_TO_ADDR
// if p3 = 24 then
19373: LD_VAR 0 3
19377: PUSH
19378: LD_INT 24
19380: EQUAL
19381: IFFALSE 19391
// sShovel := true ;
19383: LD_ADDR_EXP 81
19387: PUSH
19388: LD_INT 1
19390: ST_TO_ADDR
// if p3 = 25 then
19391: LD_VAR 0 3
19395: PUSH
19396: LD_INT 25
19398: EQUAL
19399: IFFALSE 19409
// sSheik := true ;
19401: LD_ADDR_EXP 82
19405: PUSH
19406: LD_INT 1
19408: ST_TO_ADDR
// if p3 = 26 then
19409: LD_VAR 0 3
19413: PUSH
19414: LD_INT 26
19416: EQUAL
19417: IFFALSE 19427
// sEarthquake := true ;
19419: LD_ADDR_EXP 84
19423: PUSH
19424: LD_INT 1
19426: ST_TO_ADDR
// if p3 = 27 then
19427: LD_VAR 0 3
19431: PUSH
19432: LD_INT 27
19434: EQUAL
19435: IFFALSE 19445
// sAI := true ;
19437: LD_ADDR_EXP 85
19441: PUSH
19442: LD_INT 1
19444: ST_TO_ADDR
// if p3 = 28 then
19445: LD_VAR 0 3
19449: PUSH
19450: LD_INT 28
19452: EQUAL
19453: IFFALSE 19463
// sCargo := true ;
19455: LD_ADDR_EXP 88
19459: PUSH
19460: LD_INT 1
19462: ST_TO_ADDR
// if p3 = 29 then
19463: LD_VAR 0 3
19467: PUSH
19468: LD_INT 29
19470: EQUAL
19471: IFFALSE 19481
// sDLaser := true ;
19473: LD_ADDR_EXP 89
19477: PUSH
19478: LD_INT 1
19480: ST_TO_ADDR
// if p3 = 30 then
19481: LD_VAR 0 3
19485: PUSH
19486: LD_INT 30
19488: EQUAL
19489: IFFALSE 19499
// sExchange := true ;
19491: LD_ADDR_EXP 90
19495: PUSH
19496: LD_INT 1
19498: ST_TO_ADDR
// if p3 = 31 then
19499: LD_VAR 0 3
19503: PUSH
19504: LD_INT 31
19506: EQUAL
19507: IFFALSE 19517
// sFac := true ;
19509: LD_ADDR_EXP 91
19513: PUSH
19514: LD_INT 1
19516: ST_TO_ADDR
// if p3 = 32 then
19517: LD_VAR 0 3
19521: PUSH
19522: LD_INT 32
19524: EQUAL
19525: IFFALSE 19535
// sPower := true ;
19527: LD_ADDR_EXP 92
19531: PUSH
19532: LD_INT 1
19534: ST_TO_ADDR
// if p3 = 33 then
19535: LD_VAR 0 3
19539: PUSH
19540: LD_INT 33
19542: EQUAL
19543: IFFALSE 19553
// sRandom := true ;
19545: LD_ADDR_EXP 93
19549: PUSH
19550: LD_INT 1
19552: ST_TO_ADDR
// if p3 = 34 then
19553: LD_VAR 0 3
19557: PUSH
19558: LD_INT 34
19560: EQUAL
19561: IFFALSE 19571
// sShield := true ;
19563: LD_ADDR_EXP 94
19567: PUSH
19568: LD_INT 1
19570: ST_TO_ADDR
// if p3 = 35 then
19571: LD_VAR 0 3
19575: PUSH
19576: LD_INT 35
19578: EQUAL
19579: IFFALSE 19589
// sTime := true ;
19581: LD_ADDR_EXP 95
19585: PUSH
19586: LD_INT 1
19588: ST_TO_ADDR
// if p3 = 36 then
19589: LD_VAR 0 3
19593: PUSH
19594: LD_INT 36
19596: EQUAL
19597: IFFALSE 19607
// sTools := true ;
19599: LD_ADDR_EXP 96
19603: PUSH
19604: LD_INT 1
19606: ST_TO_ADDR
// if p3 = 101 then
19607: LD_VAR 0 3
19611: PUSH
19612: LD_INT 101
19614: EQUAL
19615: IFFALSE 19625
// sSold := true ;
19617: LD_ADDR_EXP 61
19621: PUSH
19622: LD_INT 1
19624: ST_TO_ADDR
// if p3 = 102 then
19625: LD_VAR 0 3
19629: PUSH
19630: LD_INT 102
19632: EQUAL
19633: IFFALSE 19643
// sDiff := true ;
19635: LD_ADDR_EXP 62
19639: PUSH
19640: LD_INT 1
19642: ST_TO_ADDR
// if p3 = 103 then
19643: LD_VAR 0 3
19647: PUSH
19648: LD_INT 103
19650: EQUAL
19651: IFFALSE 19661
// sFog := true ;
19653: LD_ADDR_EXP 65
19657: PUSH
19658: LD_INT 1
19660: ST_TO_ADDR
// if p3 = 104 then
19661: LD_VAR 0 3
19665: PUSH
19666: LD_INT 104
19668: EQUAL
19669: IFFALSE 19679
// sReset := true ;
19671: LD_ADDR_EXP 66
19675: PUSH
19676: LD_INT 1
19678: ST_TO_ADDR
// if p3 = 105 then
19679: LD_VAR 0 3
19683: PUSH
19684: LD_INT 105
19686: EQUAL
19687: IFFALSE 19697
// sSun := true ;
19689: LD_ADDR_EXP 67
19693: PUSH
19694: LD_INT 1
19696: ST_TO_ADDR
// if p3 = 106 then
19697: LD_VAR 0 3
19701: PUSH
19702: LD_INT 106
19704: EQUAL
19705: IFFALSE 19715
// sTiger := true ;
19707: LD_ADDR_EXP 63
19711: PUSH
19712: LD_INT 1
19714: ST_TO_ADDR
// if p3 = 107 then
19715: LD_VAR 0 3
19719: PUSH
19720: LD_INT 107
19722: EQUAL
19723: IFFALSE 19733
// sBomb := true ;
19725: LD_ADDR_EXP 64
19729: PUSH
19730: LD_INT 1
19732: ST_TO_ADDR
// if p3 = 108 then
19733: LD_VAR 0 3
19737: PUSH
19738: LD_INT 108
19740: EQUAL
19741: IFFALSE 19751
// sWound := true ;
19743: LD_ADDR_EXP 72
19747: PUSH
19748: LD_INT 1
19750: ST_TO_ADDR
// if p3 = 109 then
19751: LD_VAR 0 3
19755: PUSH
19756: LD_INT 109
19758: EQUAL
19759: IFFALSE 19769
// sBetray := true ;
19761: LD_ADDR_EXP 76
19765: PUSH
19766: LD_INT 1
19768: ST_TO_ADDR
// if p3 = 110 then
19769: LD_VAR 0 3
19773: PUSH
19774: LD_INT 110
19776: EQUAL
19777: IFFALSE 19787
// sContamin := true ;
19779: LD_ADDR_EXP 77
19783: PUSH
19784: LD_INT 1
19786: ST_TO_ADDR
// if p3 = 111 then
19787: LD_VAR 0 3
19791: PUSH
19792: LD_INT 111
19794: EQUAL
19795: IFFALSE 19805
// sOil := true ;
19797: LD_ADDR_EXP 79
19801: PUSH
19802: LD_INT 1
19804: ST_TO_ADDR
// if p3 = 112 then
19805: LD_VAR 0 3
19809: PUSH
19810: LD_INT 112
19812: EQUAL
19813: IFFALSE 19823
// sStu := true ;
19815: LD_ADDR_EXP 83
19819: PUSH
19820: LD_INT 1
19822: ST_TO_ADDR
// if p3 = 113 then
19823: LD_VAR 0 3
19827: PUSH
19828: LD_INT 113
19830: EQUAL
19831: IFFALSE 19841
// sBazooka := true ;
19833: LD_ADDR_EXP 86
19837: PUSH
19838: LD_INT 1
19840: ST_TO_ADDR
// if p3 = 114 then
19841: LD_VAR 0 3
19845: PUSH
19846: LD_INT 114
19848: EQUAL
19849: IFFALSE 19859
// sMortar := true ;
19851: LD_ADDR_EXP 87
19855: PUSH
19856: LD_INT 1
19858: ST_TO_ADDR
// if p3 = 115 then
19859: LD_VAR 0 3
19863: PUSH
19864: LD_INT 115
19866: EQUAL
19867: IFFALSE 19877
// sRanger := true ;
19869: LD_ADDR_EXP 97
19873: PUSH
19874: LD_INT 1
19876: ST_TO_ADDR
// if p3 = 116 then
19877: LD_VAR 0 3
19881: PUSH
19882: LD_INT 116
19884: EQUAL
19885: IFFALSE 19895
// sComputer := true ;
19887: LD_ADDR_EXP 98
19891: PUSH
19892: LD_INT 1
19894: ST_TO_ADDR
// if p3 = 117 then
19895: LD_VAR 0 3
19899: PUSH
19900: LD_INT 117
19902: EQUAL
19903: IFFALSE 19913
// s30 := true ;
19905: LD_ADDR_EXP 99
19909: PUSH
19910: LD_INT 1
19912: ST_TO_ADDR
// if p3 = 118 then
19913: LD_VAR 0 3
19917: PUSH
19918: LD_INT 118
19920: EQUAL
19921: IFFALSE 19931
// s60 := true ;
19923: LD_ADDR_EXP 100
19927: PUSH
19928: LD_INT 1
19930: ST_TO_ADDR
// end ; if p2 = hack_mode then
19931: LD_VAR 0 2
19935: PUSH
19936: LD_INT 101
19938: EQUAL
19939: IFFALSE 20067
// begin case p3 of 1 :
19941: LD_VAR 0 3
19945: PUSH
19946: LD_INT 1
19948: DOUBLE
19949: EQUAL
19950: IFTRUE 19954
19952: GO 19961
19954: POP
// hHackUnlimitedResources ; 2 :
19955: CALL 32214 0 0
19959: GO 20067
19961: LD_INT 2
19963: DOUBLE
19964: EQUAL
19965: IFTRUE 19969
19967: GO 19976
19969: POP
// hHackSetLevel10 ; 3 :
19970: CALL 32347 0 0
19974: GO 20067
19976: LD_INT 3
19978: DOUBLE
19979: EQUAL
19980: IFTRUE 19984
19982: GO 19991
19984: POP
// hHackSetLevel10YourUnits ; 4 :
19985: CALL 32432 0 0
19989: GO 20067
19991: LD_INT 4
19993: DOUBLE
19994: EQUAL
19995: IFTRUE 19999
19997: GO 20006
19999: POP
// hHackInvincible ; 5 :
20000: CALL 32880 0 0
20004: GO 20067
20006: LD_INT 5
20008: DOUBLE
20009: EQUAL
20010: IFTRUE 20014
20012: GO 20021
20014: POP
// hHackInvisible ; 6 :
20015: CALL 32991 0 0
20019: GO 20067
20021: LD_INT 6
20023: DOUBLE
20024: EQUAL
20025: IFTRUE 20029
20027: GO 20036
20029: POP
// hHackChangeYourSide ; 7 :
20030: CALL 33048 0 0
20034: GO 20067
20036: LD_INT 7
20038: DOUBLE
20039: EQUAL
20040: IFTRUE 20044
20042: GO 20051
20044: POP
// hHackChangeUnitSide ; 8 :
20045: CALL 33090 0 0
20049: GO 20067
20051: LD_INT 8
20053: DOUBLE
20054: EQUAL
20055: IFTRUE 20059
20057: GO 20066
20059: POP
// hHackFog ; end ;
20060: CALL 33191 0 0
20064: GO 20067
20066: POP
// end ; if p2 = game_save_mode then
20067: LD_VAR 0 2
20071: PUSH
20072: LD_INT 102
20074: EQUAL
20075: IFFALSE 20130
// begin if p3 = 1 then
20077: LD_VAR 0 3
20081: PUSH
20082: LD_INT 1
20084: EQUAL
20085: IFFALSE 20097
// globalGameSaveCounter := p4 ;
20087: LD_ADDR_EXP 43
20091: PUSH
20092: LD_VAR 0 4
20096: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
20097: LD_VAR 0 3
20101: PUSH
20102: LD_INT 2
20104: EQUAL
20105: PUSH
20106: LD_EXP 43
20110: AND
20111: IFFALSE 20130
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20113: LD_STRING setGameSaveCounter(
20115: PUSH
20116: LD_EXP 43
20120: STR
20121: PUSH
20122: LD_STRING )
20124: STR
20125: PPUSH
20126: CALL_OW 559
// end ; end ;
20130: LD_VAR 0 7
20134: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
20135: LD_INT 0
20137: PPUSH
// streamModeActive := false ;
20138: LD_ADDR_EXP 44
20142: PUSH
20143: LD_INT 0
20145: ST_TO_ADDR
// normalCounter := 36 ;
20146: LD_ADDR_EXP 45
20150: PUSH
20151: LD_INT 36
20153: ST_TO_ADDR
// hardcoreCounter := 18 ;
20154: LD_ADDR_EXP 46
20158: PUSH
20159: LD_INT 18
20161: ST_TO_ADDR
// sRocket := false ;
20162: LD_ADDR_EXP 49
20166: PUSH
20167: LD_INT 0
20169: ST_TO_ADDR
// sSpeed := false ;
20170: LD_ADDR_EXP 48
20174: PUSH
20175: LD_INT 0
20177: ST_TO_ADDR
// sEngine := false ;
20178: LD_ADDR_EXP 50
20182: PUSH
20183: LD_INT 0
20185: ST_TO_ADDR
// sSpec := false ;
20186: LD_ADDR_EXP 47
20190: PUSH
20191: LD_INT 0
20193: ST_TO_ADDR
// sLevel := false ;
20194: LD_ADDR_EXP 51
20198: PUSH
20199: LD_INT 0
20201: ST_TO_ADDR
// sArmoury := false ;
20202: LD_ADDR_EXP 52
20206: PUSH
20207: LD_INT 0
20209: ST_TO_ADDR
// sRadar := false ;
20210: LD_ADDR_EXP 53
20214: PUSH
20215: LD_INT 0
20217: ST_TO_ADDR
// sBunker := false ;
20218: LD_ADDR_EXP 54
20222: PUSH
20223: LD_INT 0
20225: ST_TO_ADDR
// sHack := false ;
20226: LD_ADDR_EXP 55
20230: PUSH
20231: LD_INT 0
20233: ST_TO_ADDR
// sFire := false ;
20234: LD_ADDR_EXP 56
20238: PUSH
20239: LD_INT 0
20241: ST_TO_ADDR
// sRefresh := false ;
20242: LD_ADDR_EXP 57
20246: PUSH
20247: LD_INT 0
20249: ST_TO_ADDR
// sExp := false ;
20250: LD_ADDR_EXP 58
20254: PUSH
20255: LD_INT 0
20257: ST_TO_ADDR
// sDepot := false ;
20258: LD_ADDR_EXP 59
20262: PUSH
20263: LD_INT 0
20265: ST_TO_ADDR
// sFlag := false ;
20266: LD_ADDR_EXP 60
20270: PUSH
20271: LD_INT 0
20273: ST_TO_ADDR
// sKamikadze := false ;
20274: LD_ADDR_EXP 68
20278: PUSH
20279: LD_INT 0
20281: ST_TO_ADDR
// sTroll := false ;
20282: LD_ADDR_EXP 69
20286: PUSH
20287: LD_INT 0
20289: ST_TO_ADDR
// sSlow := false ;
20290: LD_ADDR_EXP 70
20294: PUSH
20295: LD_INT 0
20297: ST_TO_ADDR
// sLack := false ;
20298: LD_ADDR_EXP 71
20302: PUSH
20303: LD_INT 0
20305: ST_TO_ADDR
// sTank := false ;
20306: LD_ADDR_EXP 73
20310: PUSH
20311: LD_INT 0
20313: ST_TO_ADDR
// sRemote := false ;
20314: LD_ADDR_EXP 74
20318: PUSH
20319: LD_INT 0
20321: ST_TO_ADDR
// sPowell := false ;
20322: LD_ADDR_EXP 75
20326: PUSH
20327: LD_INT 0
20329: ST_TO_ADDR
// sTeleport := false ;
20330: LD_ADDR_EXP 78
20334: PUSH
20335: LD_INT 0
20337: ST_TO_ADDR
// sOilTower := false ;
20338: LD_ADDR_EXP 80
20342: PUSH
20343: LD_INT 0
20345: ST_TO_ADDR
// sShovel := false ;
20346: LD_ADDR_EXP 81
20350: PUSH
20351: LD_INT 0
20353: ST_TO_ADDR
// sSheik := false ;
20354: LD_ADDR_EXP 82
20358: PUSH
20359: LD_INT 0
20361: ST_TO_ADDR
// sEarthquake := false ;
20362: LD_ADDR_EXP 84
20366: PUSH
20367: LD_INT 0
20369: ST_TO_ADDR
// sAI := false ;
20370: LD_ADDR_EXP 85
20374: PUSH
20375: LD_INT 0
20377: ST_TO_ADDR
// sCargo := false ;
20378: LD_ADDR_EXP 88
20382: PUSH
20383: LD_INT 0
20385: ST_TO_ADDR
// sDLaser := false ;
20386: LD_ADDR_EXP 89
20390: PUSH
20391: LD_INT 0
20393: ST_TO_ADDR
// sExchange := false ;
20394: LD_ADDR_EXP 90
20398: PUSH
20399: LD_INT 0
20401: ST_TO_ADDR
// sFac := false ;
20402: LD_ADDR_EXP 91
20406: PUSH
20407: LD_INT 0
20409: ST_TO_ADDR
// sPower := false ;
20410: LD_ADDR_EXP 92
20414: PUSH
20415: LD_INT 0
20417: ST_TO_ADDR
// sRandom := false ;
20418: LD_ADDR_EXP 93
20422: PUSH
20423: LD_INT 0
20425: ST_TO_ADDR
// sShield := false ;
20426: LD_ADDR_EXP 94
20430: PUSH
20431: LD_INT 0
20433: ST_TO_ADDR
// sTime := false ;
20434: LD_ADDR_EXP 95
20438: PUSH
20439: LD_INT 0
20441: ST_TO_ADDR
// sTools := false ;
20442: LD_ADDR_EXP 96
20446: PUSH
20447: LD_INT 0
20449: ST_TO_ADDR
// sSold := false ;
20450: LD_ADDR_EXP 61
20454: PUSH
20455: LD_INT 0
20457: ST_TO_ADDR
// sDiff := false ;
20458: LD_ADDR_EXP 62
20462: PUSH
20463: LD_INT 0
20465: ST_TO_ADDR
// sFog := false ;
20466: LD_ADDR_EXP 65
20470: PUSH
20471: LD_INT 0
20473: ST_TO_ADDR
// sReset := false ;
20474: LD_ADDR_EXP 66
20478: PUSH
20479: LD_INT 0
20481: ST_TO_ADDR
// sSun := false ;
20482: LD_ADDR_EXP 67
20486: PUSH
20487: LD_INT 0
20489: ST_TO_ADDR
// sTiger := false ;
20490: LD_ADDR_EXP 63
20494: PUSH
20495: LD_INT 0
20497: ST_TO_ADDR
// sBomb := false ;
20498: LD_ADDR_EXP 64
20502: PUSH
20503: LD_INT 0
20505: ST_TO_ADDR
// sWound := false ;
20506: LD_ADDR_EXP 72
20510: PUSH
20511: LD_INT 0
20513: ST_TO_ADDR
// sBetray := false ;
20514: LD_ADDR_EXP 76
20518: PUSH
20519: LD_INT 0
20521: ST_TO_ADDR
// sContamin := false ;
20522: LD_ADDR_EXP 77
20526: PUSH
20527: LD_INT 0
20529: ST_TO_ADDR
// sOil := false ;
20530: LD_ADDR_EXP 79
20534: PUSH
20535: LD_INT 0
20537: ST_TO_ADDR
// sStu := false ;
20538: LD_ADDR_EXP 83
20542: PUSH
20543: LD_INT 0
20545: ST_TO_ADDR
// sBazooka := false ;
20546: LD_ADDR_EXP 86
20550: PUSH
20551: LD_INT 0
20553: ST_TO_ADDR
// sMortar := false ;
20554: LD_ADDR_EXP 87
20558: PUSH
20559: LD_INT 0
20561: ST_TO_ADDR
// sRanger := false ;
20562: LD_ADDR_EXP 97
20566: PUSH
20567: LD_INT 0
20569: ST_TO_ADDR
// sComputer := false ;
20570: LD_ADDR_EXP 98
20574: PUSH
20575: LD_INT 0
20577: ST_TO_ADDR
// s30 := false ;
20578: LD_ADDR_EXP 99
20582: PUSH
20583: LD_INT 0
20585: ST_TO_ADDR
// s60 := false ;
20586: LD_ADDR_EXP 100
20590: PUSH
20591: LD_INT 0
20593: ST_TO_ADDR
// end ;
20594: LD_VAR 0 1
20598: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20599: LD_INT 0
20601: PPUSH
20602: PPUSH
20603: PPUSH
20604: PPUSH
20605: PPUSH
20606: PPUSH
20607: PPUSH
// result := [ ] ;
20608: LD_ADDR_VAR 0 2
20612: PUSH
20613: EMPTY
20614: ST_TO_ADDR
// if campaign_id = 1 then
20615: LD_OWVAR 69
20619: PUSH
20620: LD_INT 1
20622: EQUAL
20623: IFFALSE 23789
// begin case mission_number of 1 :
20625: LD_OWVAR 70
20629: PUSH
20630: LD_INT 1
20632: DOUBLE
20633: EQUAL
20634: IFTRUE 20638
20636: GO 20714
20638: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20639: LD_ADDR_VAR 0 2
20643: PUSH
20644: LD_INT 2
20646: PUSH
20647: LD_INT 4
20649: PUSH
20650: LD_INT 11
20652: PUSH
20653: LD_INT 12
20655: PUSH
20656: LD_INT 15
20658: PUSH
20659: LD_INT 16
20661: PUSH
20662: LD_INT 22
20664: PUSH
20665: LD_INT 23
20667: PUSH
20668: LD_INT 26
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: PUSH
20682: LD_INT 101
20684: PUSH
20685: LD_INT 102
20687: PUSH
20688: LD_INT 106
20690: PUSH
20691: LD_INT 116
20693: PUSH
20694: LD_INT 117
20696: PUSH
20697: LD_INT 118
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: ST_TO_ADDR
20712: GO 23787
20714: LD_INT 2
20716: DOUBLE
20717: EQUAL
20718: IFTRUE 20722
20720: GO 20806
20722: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20723: LD_ADDR_VAR 0 2
20727: PUSH
20728: LD_INT 2
20730: PUSH
20731: LD_INT 4
20733: PUSH
20734: LD_INT 11
20736: PUSH
20737: LD_INT 12
20739: PUSH
20740: LD_INT 15
20742: PUSH
20743: LD_INT 16
20745: PUSH
20746: LD_INT 22
20748: PUSH
20749: LD_INT 23
20751: PUSH
20752: LD_INT 26
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: PUSH
20766: LD_INT 101
20768: PUSH
20769: LD_INT 102
20771: PUSH
20772: LD_INT 105
20774: PUSH
20775: LD_INT 106
20777: PUSH
20778: LD_INT 108
20780: PUSH
20781: LD_INT 116
20783: PUSH
20784: LD_INT 117
20786: PUSH
20787: LD_INT 118
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: ST_TO_ADDR
20804: GO 23787
20806: LD_INT 3
20808: DOUBLE
20809: EQUAL
20810: IFTRUE 20814
20812: GO 20902
20814: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20815: LD_ADDR_VAR 0 2
20819: PUSH
20820: LD_INT 2
20822: PUSH
20823: LD_INT 4
20825: PUSH
20826: LD_INT 5
20828: PUSH
20829: LD_INT 11
20831: PUSH
20832: LD_INT 12
20834: PUSH
20835: LD_INT 15
20837: PUSH
20838: LD_INT 16
20840: PUSH
20841: LD_INT 22
20843: PUSH
20844: LD_INT 26
20846: PUSH
20847: LD_INT 36
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: PUSH
20862: LD_INT 101
20864: PUSH
20865: LD_INT 102
20867: PUSH
20868: LD_INT 105
20870: PUSH
20871: LD_INT 106
20873: PUSH
20874: LD_INT 108
20876: PUSH
20877: LD_INT 116
20879: PUSH
20880: LD_INT 117
20882: PUSH
20883: LD_INT 118
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: ST_TO_ADDR
20900: GO 23787
20902: LD_INT 4
20904: DOUBLE
20905: EQUAL
20906: IFTRUE 20910
20908: GO 21006
20910: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20911: LD_ADDR_VAR 0 2
20915: PUSH
20916: LD_INT 2
20918: PUSH
20919: LD_INT 4
20921: PUSH
20922: LD_INT 5
20924: PUSH
20925: LD_INT 8
20927: PUSH
20928: LD_INT 11
20930: PUSH
20931: LD_INT 12
20933: PUSH
20934: LD_INT 15
20936: PUSH
20937: LD_INT 16
20939: PUSH
20940: LD_INT 22
20942: PUSH
20943: LD_INT 23
20945: PUSH
20946: LD_INT 26
20948: PUSH
20949: LD_INT 36
20951: PUSH
20952: EMPTY
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: PUSH
20966: LD_INT 101
20968: PUSH
20969: LD_INT 102
20971: PUSH
20972: LD_INT 105
20974: PUSH
20975: LD_INT 106
20977: PUSH
20978: LD_INT 108
20980: PUSH
20981: LD_INT 116
20983: PUSH
20984: LD_INT 117
20986: PUSH
20987: LD_INT 118
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: ST_TO_ADDR
21004: GO 23787
21006: LD_INT 5
21008: DOUBLE
21009: EQUAL
21010: IFTRUE 21014
21012: GO 21126
21014: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21015: LD_ADDR_VAR 0 2
21019: PUSH
21020: LD_INT 2
21022: PUSH
21023: LD_INT 4
21025: PUSH
21026: LD_INT 5
21028: PUSH
21029: LD_INT 6
21031: PUSH
21032: LD_INT 8
21034: PUSH
21035: LD_INT 11
21037: PUSH
21038: LD_INT 12
21040: PUSH
21041: LD_INT 15
21043: PUSH
21044: LD_INT 16
21046: PUSH
21047: LD_INT 22
21049: PUSH
21050: LD_INT 23
21052: PUSH
21053: LD_INT 25
21055: PUSH
21056: LD_INT 26
21058: PUSH
21059: LD_INT 36
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: PUSH
21078: LD_INT 101
21080: PUSH
21081: LD_INT 102
21083: PUSH
21084: LD_INT 105
21086: PUSH
21087: LD_INT 106
21089: PUSH
21090: LD_INT 108
21092: PUSH
21093: LD_INT 109
21095: PUSH
21096: LD_INT 112
21098: PUSH
21099: LD_INT 116
21101: PUSH
21102: LD_INT 117
21104: PUSH
21105: LD_INT 118
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: ST_TO_ADDR
21124: GO 23787
21126: LD_INT 6
21128: DOUBLE
21129: EQUAL
21130: IFTRUE 21134
21132: GO 21266
21134: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21135: LD_ADDR_VAR 0 2
21139: PUSH
21140: LD_INT 2
21142: PUSH
21143: LD_INT 4
21145: PUSH
21146: LD_INT 5
21148: PUSH
21149: LD_INT 6
21151: PUSH
21152: LD_INT 8
21154: PUSH
21155: LD_INT 11
21157: PUSH
21158: LD_INT 12
21160: PUSH
21161: LD_INT 15
21163: PUSH
21164: LD_INT 16
21166: PUSH
21167: LD_INT 20
21169: PUSH
21170: LD_INT 21
21172: PUSH
21173: LD_INT 22
21175: PUSH
21176: LD_INT 23
21178: PUSH
21179: LD_INT 25
21181: PUSH
21182: LD_INT 26
21184: PUSH
21185: LD_INT 30
21187: PUSH
21188: LD_INT 31
21190: PUSH
21191: LD_INT 32
21193: PUSH
21194: LD_INT 36
21196: PUSH
21197: EMPTY
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: PUSH
21218: LD_INT 101
21220: PUSH
21221: LD_INT 102
21223: PUSH
21224: LD_INT 105
21226: PUSH
21227: LD_INT 106
21229: PUSH
21230: LD_INT 108
21232: PUSH
21233: LD_INT 109
21235: PUSH
21236: LD_INT 112
21238: PUSH
21239: LD_INT 116
21241: PUSH
21242: LD_INT 117
21244: PUSH
21245: LD_INT 118
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: ST_TO_ADDR
21264: GO 23787
21266: LD_INT 7
21268: DOUBLE
21269: EQUAL
21270: IFTRUE 21274
21272: GO 21386
21274: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21275: LD_ADDR_VAR 0 2
21279: PUSH
21280: LD_INT 2
21282: PUSH
21283: LD_INT 4
21285: PUSH
21286: LD_INT 5
21288: PUSH
21289: LD_INT 7
21291: PUSH
21292: LD_INT 11
21294: PUSH
21295: LD_INT 12
21297: PUSH
21298: LD_INT 15
21300: PUSH
21301: LD_INT 16
21303: PUSH
21304: LD_INT 20
21306: PUSH
21307: LD_INT 21
21309: PUSH
21310: LD_INT 22
21312: PUSH
21313: LD_INT 23
21315: PUSH
21316: LD_INT 25
21318: PUSH
21319: LD_INT 26
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: PUSH
21338: LD_INT 101
21340: PUSH
21341: LD_INT 102
21343: PUSH
21344: LD_INT 103
21346: PUSH
21347: LD_INT 105
21349: PUSH
21350: LD_INT 106
21352: PUSH
21353: LD_INT 108
21355: PUSH
21356: LD_INT 112
21358: PUSH
21359: LD_INT 116
21361: PUSH
21362: LD_INT 117
21364: PUSH
21365: LD_INT 118
21367: PUSH
21368: EMPTY
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: PUSH
21380: EMPTY
21381: LIST
21382: LIST
21383: ST_TO_ADDR
21384: GO 23787
21386: LD_INT 8
21388: DOUBLE
21389: EQUAL
21390: IFTRUE 21394
21392: GO 21534
21394: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21395: LD_ADDR_VAR 0 2
21399: PUSH
21400: LD_INT 2
21402: PUSH
21403: LD_INT 4
21405: PUSH
21406: LD_INT 5
21408: PUSH
21409: LD_INT 6
21411: PUSH
21412: LD_INT 7
21414: PUSH
21415: LD_INT 8
21417: PUSH
21418: LD_INT 11
21420: PUSH
21421: LD_INT 12
21423: PUSH
21424: LD_INT 15
21426: PUSH
21427: LD_INT 16
21429: PUSH
21430: LD_INT 20
21432: PUSH
21433: LD_INT 21
21435: PUSH
21436: LD_INT 22
21438: PUSH
21439: LD_INT 23
21441: PUSH
21442: LD_INT 25
21444: PUSH
21445: LD_INT 26
21447: PUSH
21448: LD_INT 30
21450: PUSH
21451: LD_INT 31
21453: PUSH
21454: LD_INT 32
21456: PUSH
21457: LD_INT 36
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: PUSH
21482: LD_INT 101
21484: PUSH
21485: LD_INT 102
21487: PUSH
21488: LD_INT 103
21490: PUSH
21491: LD_INT 105
21493: PUSH
21494: LD_INT 106
21496: PUSH
21497: LD_INT 108
21499: PUSH
21500: LD_INT 109
21502: PUSH
21503: LD_INT 112
21505: PUSH
21506: LD_INT 116
21508: PUSH
21509: LD_INT 117
21511: PUSH
21512: LD_INT 118
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: PUSH
21528: EMPTY
21529: LIST
21530: LIST
21531: ST_TO_ADDR
21532: GO 23787
21534: LD_INT 9
21536: DOUBLE
21537: EQUAL
21538: IFTRUE 21542
21540: GO 21690
21542: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21543: LD_ADDR_VAR 0 2
21547: PUSH
21548: LD_INT 2
21550: PUSH
21551: LD_INT 4
21553: PUSH
21554: LD_INT 5
21556: PUSH
21557: LD_INT 6
21559: PUSH
21560: LD_INT 7
21562: PUSH
21563: LD_INT 8
21565: PUSH
21566: LD_INT 11
21568: PUSH
21569: LD_INT 12
21571: PUSH
21572: LD_INT 15
21574: PUSH
21575: LD_INT 16
21577: PUSH
21578: LD_INT 20
21580: PUSH
21581: LD_INT 21
21583: PUSH
21584: LD_INT 22
21586: PUSH
21587: LD_INT 23
21589: PUSH
21590: LD_INT 25
21592: PUSH
21593: LD_INT 26
21595: PUSH
21596: LD_INT 28
21598: PUSH
21599: LD_INT 30
21601: PUSH
21602: LD_INT 31
21604: PUSH
21605: LD_INT 32
21607: PUSH
21608: LD_INT 36
21610: PUSH
21611: EMPTY
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: PUSH
21634: LD_INT 101
21636: PUSH
21637: LD_INT 102
21639: PUSH
21640: LD_INT 103
21642: PUSH
21643: LD_INT 105
21645: PUSH
21646: LD_INT 106
21648: PUSH
21649: LD_INT 108
21651: PUSH
21652: LD_INT 109
21654: PUSH
21655: LD_INT 112
21657: PUSH
21658: LD_INT 114
21660: PUSH
21661: LD_INT 116
21663: PUSH
21664: LD_INT 117
21666: PUSH
21667: LD_INT 118
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: ST_TO_ADDR
21688: GO 23787
21690: LD_INT 10
21692: DOUBLE
21693: EQUAL
21694: IFTRUE 21698
21696: GO 21894
21698: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21699: LD_ADDR_VAR 0 2
21703: PUSH
21704: LD_INT 2
21706: PUSH
21707: LD_INT 4
21709: PUSH
21710: LD_INT 5
21712: PUSH
21713: LD_INT 6
21715: PUSH
21716: LD_INT 7
21718: PUSH
21719: LD_INT 8
21721: PUSH
21722: LD_INT 9
21724: PUSH
21725: LD_INT 10
21727: PUSH
21728: LD_INT 11
21730: PUSH
21731: LD_INT 12
21733: PUSH
21734: LD_INT 13
21736: PUSH
21737: LD_INT 14
21739: PUSH
21740: LD_INT 15
21742: PUSH
21743: LD_INT 16
21745: PUSH
21746: LD_INT 17
21748: PUSH
21749: LD_INT 18
21751: PUSH
21752: LD_INT 19
21754: PUSH
21755: LD_INT 20
21757: PUSH
21758: LD_INT 21
21760: PUSH
21761: LD_INT 22
21763: PUSH
21764: LD_INT 23
21766: PUSH
21767: LD_INT 24
21769: PUSH
21770: LD_INT 25
21772: PUSH
21773: LD_INT 26
21775: PUSH
21776: LD_INT 28
21778: PUSH
21779: LD_INT 30
21781: PUSH
21782: LD_INT 31
21784: PUSH
21785: LD_INT 32
21787: PUSH
21788: LD_INT 36
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: PUSH
21822: LD_INT 101
21824: PUSH
21825: LD_INT 102
21827: PUSH
21828: LD_INT 103
21830: PUSH
21831: LD_INT 104
21833: PUSH
21834: LD_INT 105
21836: PUSH
21837: LD_INT 106
21839: PUSH
21840: LD_INT 107
21842: PUSH
21843: LD_INT 108
21845: PUSH
21846: LD_INT 109
21848: PUSH
21849: LD_INT 110
21851: PUSH
21852: LD_INT 111
21854: PUSH
21855: LD_INT 112
21857: PUSH
21858: LD_INT 114
21860: PUSH
21861: LD_INT 116
21863: PUSH
21864: LD_INT 117
21866: PUSH
21867: LD_INT 118
21869: PUSH
21870: EMPTY
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: ST_TO_ADDR
21892: GO 23787
21894: LD_INT 11
21896: DOUBLE
21897: EQUAL
21898: IFTRUE 21902
21900: GO 22106
21902: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21903: LD_ADDR_VAR 0 2
21907: PUSH
21908: LD_INT 2
21910: PUSH
21911: LD_INT 3
21913: PUSH
21914: LD_INT 4
21916: PUSH
21917: LD_INT 5
21919: PUSH
21920: LD_INT 6
21922: PUSH
21923: LD_INT 7
21925: PUSH
21926: LD_INT 8
21928: PUSH
21929: LD_INT 9
21931: PUSH
21932: LD_INT 10
21934: PUSH
21935: LD_INT 11
21937: PUSH
21938: LD_INT 12
21940: PUSH
21941: LD_INT 13
21943: PUSH
21944: LD_INT 14
21946: PUSH
21947: LD_INT 15
21949: PUSH
21950: LD_INT 16
21952: PUSH
21953: LD_INT 17
21955: PUSH
21956: LD_INT 18
21958: PUSH
21959: LD_INT 19
21961: PUSH
21962: LD_INT 20
21964: PUSH
21965: LD_INT 21
21967: PUSH
21968: LD_INT 22
21970: PUSH
21971: LD_INT 23
21973: PUSH
21974: LD_INT 24
21976: PUSH
21977: LD_INT 25
21979: PUSH
21980: LD_INT 26
21982: PUSH
21983: LD_INT 28
21985: PUSH
21986: LD_INT 30
21988: PUSH
21989: LD_INT 31
21991: PUSH
21992: LD_INT 32
21994: PUSH
21995: LD_INT 34
21997: PUSH
21998: LD_INT 36
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: PUSH
22034: LD_INT 101
22036: PUSH
22037: LD_INT 102
22039: PUSH
22040: LD_INT 103
22042: PUSH
22043: LD_INT 104
22045: PUSH
22046: LD_INT 105
22048: PUSH
22049: LD_INT 106
22051: PUSH
22052: LD_INT 107
22054: PUSH
22055: LD_INT 108
22057: PUSH
22058: LD_INT 109
22060: PUSH
22061: LD_INT 110
22063: PUSH
22064: LD_INT 111
22066: PUSH
22067: LD_INT 112
22069: PUSH
22070: LD_INT 114
22072: PUSH
22073: LD_INT 116
22075: PUSH
22076: LD_INT 117
22078: PUSH
22079: LD_INT 118
22081: PUSH
22082: EMPTY
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: ST_TO_ADDR
22104: GO 23787
22106: LD_INT 12
22108: DOUBLE
22109: EQUAL
22110: IFTRUE 22114
22112: GO 22334
22114: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22115: LD_ADDR_VAR 0 2
22119: PUSH
22120: LD_INT 1
22122: PUSH
22123: LD_INT 2
22125: PUSH
22126: LD_INT 3
22128: PUSH
22129: LD_INT 4
22131: PUSH
22132: LD_INT 5
22134: PUSH
22135: LD_INT 6
22137: PUSH
22138: LD_INT 7
22140: PUSH
22141: LD_INT 8
22143: PUSH
22144: LD_INT 9
22146: PUSH
22147: LD_INT 10
22149: PUSH
22150: LD_INT 11
22152: PUSH
22153: LD_INT 12
22155: PUSH
22156: LD_INT 13
22158: PUSH
22159: LD_INT 14
22161: PUSH
22162: LD_INT 15
22164: PUSH
22165: LD_INT 16
22167: PUSH
22168: LD_INT 17
22170: PUSH
22171: LD_INT 18
22173: PUSH
22174: LD_INT 19
22176: PUSH
22177: LD_INT 20
22179: PUSH
22180: LD_INT 21
22182: PUSH
22183: LD_INT 22
22185: PUSH
22186: LD_INT 23
22188: PUSH
22189: LD_INT 24
22191: PUSH
22192: LD_INT 25
22194: PUSH
22195: LD_INT 26
22197: PUSH
22198: LD_INT 27
22200: PUSH
22201: LD_INT 28
22203: PUSH
22204: LD_INT 30
22206: PUSH
22207: LD_INT 31
22209: PUSH
22210: LD_INT 32
22212: PUSH
22213: LD_INT 33
22215: PUSH
22216: LD_INT 34
22218: PUSH
22219: LD_INT 36
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: PUSH
22258: LD_INT 101
22260: PUSH
22261: LD_INT 102
22263: PUSH
22264: LD_INT 103
22266: PUSH
22267: LD_INT 104
22269: PUSH
22270: LD_INT 105
22272: PUSH
22273: LD_INT 106
22275: PUSH
22276: LD_INT 107
22278: PUSH
22279: LD_INT 108
22281: PUSH
22282: LD_INT 109
22284: PUSH
22285: LD_INT 110
22287: PUSH
22288: LD_INT 111
22290: PUSH
22291: LD_INT 112
22293: PUSH
22294: LD_INT 113
22296: PUSH
22297: LD_INT 114
22299: PUSH
22300: LD_INT 116
22302: PUSH
22303: LD_INT 117
22305: PUSH
22306: LD_INT 118
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: ST_TO_ADDR
22332: GO 23787
22334: LD_INT 13
22336: DOUBLE
22337: EQUAL
22338: IFTRUE 22342
22340: GO 22550
22342: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22343: LD_ADDR_VAR 0 2
22347: PUSH
22348: LD_INT 1
22350: PUSH
22351: LD_INT 2
22353: PUSH
22354: LD_INT 3
22356: PUSH
22357: LD_INT 4
22359: PUSH
22360: LD_INT 5
22362: PUSH
22363: LD_INT 8
22365: PUSH
22366: LD_INT 9
22368: PUSH
22369: LD_INT 10
22371: PUSH
22372: LD_INT 11
22374: PUSH
22375: LD_INT 12
22377: PUSH
22378: LD_INT 14
22380: PUSH
22381: LD_INT 15
22383: PUSH
22384: LD_INT 16
22386: PUSH
22387: LD_INT 17
22389: PUSH
22390: LD_INT 18
22392: PUSH
22393: LD_INT 19
22395: PUSH
22396: LD_INT 20
22398: PUSH
22399: LD_INT 21
22401: PUSH
22402: LD_INT 22
22404: PUSH
22405: LD_INT 23
22407: PUSH
22408: LD_INT 24
22410: PUSH
22411: LD_INT 25
22413: PUSH
22414: LD_INT 26
22416: PUSH
22417: LD_INT 27
22419: PUSH
22420: LD_INT 28
22422: PUSH
22423: LD_INT 30
22425: PUSH
22426: LD_INT 31
22428: PUSH
22429: LD_INT 32
22431: PUSH
22432: LD_INT 33
22434: PUSH
22435: LD_INT 34
22437: PUSH
22438: LD_INT 36
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: PUSH
22474: LD_INT 101
22476: PUSH
22477: LD_INT 102
22479: PUSH
22480: LD_INT 103
22482: PUSH
22483: LD_INT 104
22485: PUSH
22486: LD_INT 105
22488: PUSH
22489: LD_INT 106
22491: PUSH
22492: LD_INT 107
22494: PUSH
22495: LD_INT 108
22497: PUSH
22498: LD_INT 109
22500: PUSH
22501: LD_INT 110
22503: PUSH
22504: LD_INT 111
22506: PUSH
22507: LD_INT 112
22509: PUSH
22510: LD_INT 113
22512: PUSH
22513: LD_INT 114
22515: PUSH
22516: LD_INT 116
22518: PUSH
22519: LD_INT 117
22521: PUSH
22522: LD_INT 118
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: ST_TO_ADDR
22548: GO 23787
22550: LD_INT 14
22552: DOUBLE
22553: EQUAL
22554: IFTRUE 22558
22556: GO 22782
22558: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22559: LD_ADDR_VAR 0 2
22563: PUSH
22564: LD_INT 1
22566: PUSH
22567: LD_INT 2
22569: PUSH
22570: LD_INT 3
22572: PUSH
22573: LD_INT 4
22575: PUSH
22576: LD_INT 5
22578: PUSH
22579: LD_INT 6
22581: PUSH
22582: LD_INT 7
22584: PUSH
22585: LD_INT 8
22587: PUSH
22588: LD_INT 9
22590: PUSH
22591: LD_INT 10
22593: PUSH
22594: LD_INT 11
22596: PUSH
22597: LD_INT 12
22599: PUSH
22600: LD_INT 13
22602: PUSH
22603: LD_INT 14
22605: PUSH
22606: LD_INT 15
22608: PUSH
22609: LD_INT 16
22611: PUSH
22612: LD_INT 17
22614: PUSH
22615: LD_INT 18
22617: PUSH
22618: LD_INT 19
22620: PUSH
22621: LD_INT 20
22623: PUSH
22624: LD_INT 21
22626: PUSH
22627: LD_INT 22
22629: PUSH
22630: LD_INT 23
22632: PUSH
22633: LD_INT 24
22635: PUSH
22636: LD_INT 25
22638: PUSH
22639: LD_INT 26
22641: PUSH
22642: LD_INT 27
22644: PUSH
22645: LD_INT 28
22647: PUSH
22648: LD_INT 29
22650: PUSH
22651: LD_INT 30
22653: PUSH
22654: LD_INT 31
22656: PUSH
22657: LD_INT 32
22659: PUSH
22660: LD_INT 33
22662: PUSH
22663: LD_INT 34
22665: PUSH
22666: LD_INT 36
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: PUSH
22706: LD_INT 101
22708: PUSH
22709: LD_INT 102
22711: PUSH
22712: LD_INT 103
22714: PUSH
22715: LD_INT 104
22717: PUSH
22718: LD_INT 105
22720: PUSH
22721: LD_INT 106
22723: PUSH
22724: LD_INT 107
22726: PUSH
22727: LD_INT 108
22729: PUSH
22730: LD_INT 109
22732: PUSH
22733: LD_INT 110
22735: PUSH
22736: LD_INT 111
22738: PUSH
22739: LD_INT 112
22741: PUSH
22742: LD_INT 113
22744: PUSH
22745: LD_INT 114
22747: PUSH
22748: LD_INT 116
22750: PUSH
22751: LD_INT 117
22753: PUSH
22754: LD_INT 118
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: ST_TO_ADDR
22780: GO 23787
22782: LD_INT 15
22784: DOUBLE
22785: EQUAL
22786: IFTRUE 22790
22788: GO 23014
22790: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22791: LD_ADDR_VAR 0 2
22795: PUSH
22796: LD_INT 1
22798: PUSH
22799: LD_INT 2
22801: PUSH
22802: LD_INT 3
22804: PUSH
22805: LD_INT 4
22807: PUSH
22808: LD_INT 5
22810: PUSH
22811: LD_INT 6
22813: PUSH
22814: LD_INT 7
22816: PUSH
22817: LD_INT 8
22819: PUSH
22820: LD_INT 9
22822: PUSH
22823: LD_INT 10
22825: PUSH
22826: LD_INT 11
22828: PUSH
22829: LD_INT 12
22831: PUSH
22832: LD_INT 13
22834: PUSH
22835: LD_INT 14
22837: PUSH
22838: LD_INT 15
22840: PUSH
22841: LD_INT 16
22843: PUSH
22844: LD_INT 17
22846: PUSH
22847: LD_INT 18
22849: PUSH
22850: LD_INT 19
22852: PUSH
22853: LD_INT 20
22855: PUSH
22856: LD_INT 21
22858: PUSH
22859: LD_INT 22
22861: PUSH
22862: LD_INT 23
22864: PUSH
22865: LD_INT 24
22867: PUSH
22868: LD_INT 25
22870: PUSH
22871: LD_INT 26
22873: PUSH
22874: LD_INT 27
22876: PUSH
22877: LD_INT 28
22879: PUSH
22880: LD_INT 29
22882: PUSH
22883: LD_INT 30
22885: PUSH
22886: LD_INT 31
22888: PUSH
22889: LD_INT 32
22891: PUSH
22892: LD_INT 33
22894: PUSH
22895: LD_INT 34
22897: PUSH
22898: LD_INT 36
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: PUSH
22938: LD_INT 101
22940: PUSH
22941: LD_INT 102
22943: PUSH
22944: LD_INT 103
22946: PUSH
22947: LD_INT 104
22949: PUSH
22950: LD_INT 105
22952: PUSH
22953: LD_INT 106
22955: PUSH
22956: LD_INT 107
22958: PUSH
22959: LD_INT 108
22961: PUSH
22962: LD_INT 109
22964: PUSH
22965: LD_INT 110
22967: PUSH
22968: LD_INT 111
22970: PUSH
22971: LD_INT 112
22973: PUSH
22974: LD_INT 113
22976: PUSH
22977: LD_INT 114
22979: PUSH
22980: LD_INT 116
22982: PUSH
22983: LD_INT 117
22985: PUSH
22986: LD_INT 118
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: ST_TO_ADDR
23012: GO 23787
23014: LD_INT 16
23016: DOUBLE
23017: EQUAL
23018: IFTRUE 23022
23020: GO 23158
23022: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23023: LD_ADDR_VAR 0 2
23027: PUSH
23028: LD_INT 2
23030: PUSH
23031: LD_INT 4
23033: PUSH
23034: LD_INT 5
23036: PUSH
23037: LD_INT 7
23039: PUSH
23040: LD_INT 11
23042: PUSH
23043: LD_INT 12
23045: PUSH
23046: LD_INT 15
23048: PUSH
23049: LD_INT 16
23051: PUSH
23052: LD_INT 20
23054: PUSH
23055: LD_INT 21
23057: PUSH
23058: LD_INT 22
23060: PUSH
23061: LD_INT 23
23063: PUSH
23064: LD_INT 25
23066: PUSH
23067: LD_INT 26
23069: PUSH
23070: LD_INT 30
23072: PUSH
23073: LD_INT 31
23075: PUSH
23076: LD_INT 32
23078: PUSH
23079: LD_INT 33
23081: PUSH
23082: LD_INT 34
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: PUSH
23106: LD_INT 101
23108: PUSH
23109: LD_INT 102
23111: PUSH
23112: LD_INT 103
23114: PUSH
23115: LD_INT 106
23117: PUSH
23118: LD_INT 108
23120: PUSH
23121: LD_INT 112
23123: PUSH
23124: LD_INT 113
23126: PUSH
23127: LD_INT 114
23129: PUSH
23130: LD_INT 116
23132: PUSH
23133: LD_INT 117
23135: PUSH
23136: LD_INT 118
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: PUSH
23152: EMPTY
23153: LIST
23154: LIST
23155: ST_TO_ADDR
23156: GO 23787
23158: LD_INT 17
23160: DOUBLE
23161: EQUAL
23162: IFTRUE 23166
23164: GO 23390
23166: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23167: LD_ADDR_VAR 0 2
23171: PUSH
23172: LD_INT 1
23174: PUSH
23175: LD_INT 2
23177: PUSH
23178: LD_INT 3
23180: PUSH
23181: LD_INT 4
23183: PUSH
23184: LD_INT 5
23186: PUSH
23187: LD_INT 6
23189: PUSH
23190: LD_INT 7
23192: PUSH
23193: LD_INT 8
23195: PUSH
23196: LD_INT 9
23198: PUSH
23199: LD_INT 10
23201: PUSH
23202: LD_INT 11
23204: PUSH
23205: LD_INT 12
23207: PUSH
23208: LD_INT 13
23210: PUSH
23211: LD_INT 14
23213: PUSH
23214: LD_INT 15
23216: PUSH
23217: LD_INT 16
23219: PUSH
23220: LD_INT 17
23222: PUSH
23223: LD_INT 18
23225: PUSH
23226: LD_INT 19
23228: PUSH
23229: LD_INT 20
23231: PUSH
23232: LD_INT 21
23234: PUSH
23235: LD_INT 22
23237: PUSH
23238: LD_INT 23
23240: PUSH
23241: LD_INT 24
23243: PUSH
23244: LD_INT 25
23246: PUSH
23247: LD_INT 26
23249: PUSH
23250: LD_INT 27
23252: PUSH
23253: LD_INT 28
23255: PUSH
23256: LD_INT 29
23258: PUSH
23259: LD_INT 30
23261: PUSH
23262: LD_INT 31
23264: PUSH
23265: LD_INT 32
23267: PUSH
23268: LD_INT 33
23270: PUSH
23271: LD_INT 34
23273: PUSH
23274: LD_INT 36
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: PUSH
23314: LD_INT 101
23316: PUSH
23317: LD_INT 102
23319: PUSH
23320: LD_INT 103
23322: PUSH
23323: LD_INT 104
23325: PUSH
23326: LD_INT 105
23328: PUSH
23329: LD_INT 106
23331: PUSH
23332: LD_INT 107
23334: PUSH
23335: LD_INT 108
23337: PUSH
23338: LD_INT 109
23340: PUSH
23341: LD_INT 110
23343: PUSH
23344: LD_INT 111
23346: PUSH
23347: LD_INT 112
23349: PUSH
23350: LD_INT 113
23352: PUSH
23353: LD_INT 114
23355: PUSH
23356: LD_INT 116
23358: PUSH
23359: LD_INT 117
23361: PUSH
23362: LD_INT 118
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: ST_TO_ADDR
23388: GO 23787
23390: LD_INT 18
23392: DOUBLE
23393: EQUAL
23394: IFTRUE 23398
23396: GO 23546
23398: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23399: LD_ADDR_VAR 0 2
23403: PUSH
23404: LD_INT 2
23406: PUSH
23407: LD_INT 4
23409: PUSH
23410: LD_INT 5
23412: PUSH
23413: LD_INT 7
23415: PUSH
23416: LD_INT 11
23418: PUSH
23419: LD_INT 12
23421: PUSH
23422: LD_INT 15
23424: PUSH
23425: LD_INT 16
23427: PUSH
23428: LD_INT 20
23430: PUSH
23431: LD_INT 21
23433: PUSH
23434: LD_INT 22
23436: PUSH
23437: LD_INT 23
23439: PUSH
23440: LD_INT 25
23442: PUSH
23443: LD_INT 26
23445: PUSH
23446: LD_INT 30
23448: PUSH
23449: LD_INT 31
23451: PUSH
23452: LD_INT 32
23454: PUSH
23455: LD_INT 33
23457: PUSH
23458: LD_INT 34
23460: PUSH
23461: LD_INT 35
23463: PUSH
23464: LD_INT 36
23466: PUSH
23467: EMPTY
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: PUSH
23490: LD_INT 101
23492: PUSH
23493: LD_INT 102
23495: PUSH
23496: LD_INT 103
23498: PUSH
23499: LD_INT 106
23501: PUSH
23502: LD_INT 108
23504: PUSH
23505: LD_INT 112
23507: PUSH
23508: LD_INT 113
23510: PUSH
23511: LD_INT 114
23513: PUSH
23514: LD_INT 115
23516: PUSH
23517: LD_INT 116
23519: PUSH
23520: LD_INT 117
23522: PUSH
23523: LD_INT 118
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: ST_TO_ADDR
23544: GO 23787
23546: LD_INT 19
23548: DOUBLE
23549: EQUAL
23550: IFTRUE 23554
23552: GO 23786
23554: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23555: LD_ADDR_VAR 0 2
23559: PUSH
23560: LD_INT 1
23562: PUSH
23563: LD_INT 2
23565: PUSH
23566: LD_INT 3
23568: PUSH
23569: LD_INT 4
23571: PUSH
23572: LD_INT 5
23574: PUSH
23575: LD_INT 6
23577: PUSH
23578: LD_INT 7
23580: PUSH
23581: LD_INT 8
23583: PUSH
23584: LD_INT 9
23586: PUSH
23587: LD_INT 10
23589: PUSH
23590: LD_INT 11
23592: PUSH
23593: LD_INT 12
23595: PUSH
23596: LD_INT 13
23598: PUSH
23599: LD_INT 14
23601: PUSH
23602: LD_INT 15
23604: PUSH
23605: LD_INT 16
23607: PUSH
23608: LD_INT 17
23610: PUSH
23611: LD_INT 18
23613: PUSH
23614: LD_INT 19
23616: PUSH
23617: LD_INT 20
23619: PUSH
23620: LD_INT 21
23622: PUSH
23623: LD_INT 22
23625: PUSH
23626: LD_INT 23
23628: PUSH
23629: LD_INT 24
23631: PUSH
23632: LD_INT 25
23634: PUSH
23635: LD_INT 26
23637: PUSH
23638: LD_INT 27
23640: PUSH
23641: LD_INT 28
23643: PUSH
23644: LD_INT 29
23646: PUSH
23647: LD_INT 30
23649: PUSH
23650: LD_INT 31
23652: PUSH
23653: LD_INT 32
23655: PUSH
23656: LD_INT 33
23658: PUSH
23659: LD_INT 34
23661: PUSH
23662: LD_INT 35
23664: PUSH
23665: LD_INT 36
23667: PUSH
23668: EMPTY
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 101
23708: PUSH
23709: LD_INT 102
23711: PUSH
23712: LD_INT 103
23714: PUSH
23715: LD_INT 104
23717: PUSH
23718: LD_INT 105
23720: PUSH
23721: LD_INT 106
23723: PUSH
23724: LD_INT 107
23726: PUSH
23727: LD_INT 108
23729: PUSH
23730: LD_INT 109
23732: PUSH
23733: LD_INT 110
23735: PUSH
23736: LD_INT 111
23738: PUSH
23739: LD_INT 112
23741: PUSH
23742: LD_INT 113
23744: PUSH
23745: LD_INT 114
23747: PUSH
23748: LD_INT 115
23750: PUSH
23751: LD_INT 116
23753: PUSH
23754: LD_INT 117
23756: PUSH
23757: LD_INT 118
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: PUSH
23780: EMPTY
23781: LIST
23782: LIST
23783: ST_TO_ADDR
23784: GO 23787
23786: POP
// end else
23787: GO 24018
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23789: LD_ADDR_VAR 0 2
23793: PUSH
23794: LD_INT 1
23796: PUSH
23797: LD_INT 2
23799: PUSH
23800: LD_INT 3
23802: PUSH
23803: LD_INT 4
23805: PUSH
23806: LD_INT 5
23808: PUSH
23809: LD_INT 6
23811: PUSH
23812: LD_INT 7
23814: PUSH
23815: LD_INT 8
23817: PUSH
23818: LD_INT 9
23820: PUSH
23821: LD_INT 10
23823: PUSH
23824: LD_INT 11
23826: PUSH
23827: LD_INT 12
23829: PUSH
23830: LD_INT 13
23832: PUSH
23833: LD_INT 14
23835: PUSH
23836: LD_INT 15
23838: PUSH
23839: LD_INT 16
23841: PUSH
23842: LD_INT 17
23844: PUSH
23845: LD_INT 18
23847: PUSH
23848: LD_INT 19
23850: PUSH
23851: LD_INT 20
23853: PUSH
23854: LD_INT 21
23856: PUSH
23857: LD_INT 22
23859: PUSH
23860: LD_INT 23
23862: PUSH
23863: LD_INT 24
23865: PUSH
23866: LD_INT 25
23868: PUSH
23869: LD_INT 26
23871: PUSH
23872: LD_INT 27
23874: PUSH
23875: LD_INT 28
23877: PUSH
23878: LD_INT 29
23880: PUSH
23881: LD_INT 30
23883: PUSH
23884: LD_INT 31
23886: PUSH
23887: LD_INT 32
23889: PUSH
23890: LD_INT 33
23892: PUSH
23893: LD_INT 34
23895: PUSH
23896: LD_INT 35
23898: PUSH
23899: LD_INT 36
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: PUSH
23940: LD_INT 101
23942: PUSH
23943: LD_INT 102
23945: PUSH
23946: LD_INT 103
23948: PUSH
23949: LD_INT 104
23951: PUSH
23952: LD_INT 105
23954: PUSH
23955: LD_INT 106
23957: PUSH
23958: LD_INT 107
23960: PUSH
23961: LD_INT 108
23963: PUSH
23964: LD_INT 109
23966: PUSH
23967: LD_INT 110
23969: PUSH
23970: LD_INT 111
23972: PUSH
23973: LD_INT 112
23975: PUSH
23976: LD_INT 113
23978: PUSH
23979: LD_INT 114
23981: PUSH
23982: LD_INT 115
23984: PUSH
23985: LD_INT 116
23987: PUSH
23988: LD_INT 117
23990: PUSH
23991: LD_INT 118
23993: PUSH
23994: EMPTY
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: ST_TO_ADDR
// if result then
24018: LD_VAR 0 2
24022: IFFALSE 24808
// begin normal :=  ;
24024: LD_ADDR_VAR 0 5
24028: PUSH
24029: LD_STRING 
24031: ST_TO_ADDR
// hardcore :=  ;
24032: LD_ADDR_VAR 0 6
24036: PUSH
24037: LD_STRING 
24039: ST_TO_ADDR
// active :=  ;
24040: LD_ADDR_VAR 0 7
24044: PUSH
24045: LD_STRING 
24047: ST_TO_ADDR
// for i = 1 to normalCounter do
24048: LD_ADDR_VAR 0 8
24052: PUSH
24053: DOUBLE
24054: LD_INT 1
24056: DEC
24057: ST_TO_ADDR
24058: LD_EXP 45
24062: PUSH
24063: FOR_TO
24064: IFFALSE 24165
// begin tmp := 0 ;
24066: LD_ADDR_VAR 0 3
24070: PUSH
24071: LD_STRING 0
24073: ST_TO_ADDR
// if result [ 1 ] then
24074: LD_VAR 0 2
24078: PUSH
24079: LD_INT 1
24081: ARRAY
24082: IFFALSE 24147
// if result [ 1 ] [ 1 ] = i then
24084: LD_VAR 0 2
24088: PUSH
24089: LD_INT 1
24091: ARRAY
24092: PUSH
24093: LD_INT 1
24095: ARRAY
24096: PUSH
24097: LD_VAR 0 8
24101: EQUAL
24102: IFFALSE 24147
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24104: LD_ADDR_VAR 0 2
24108: PUSH
24109: LD_VAR 0 2
24113: PPUSH
24114: LD_INT 1
24116: PPUSH
24117: LD_VAR 0 2
24121: PUSH
24122: LD_INT 1
24124: ARRAY
24125: PPUSH
24126: LD_INT 1
24128: PPUSH
24129: CALL_OW 3
24133: PPUSH
24134: CALL_OW 1
24138: ST_TO_ADDR
// tmp := 1 ;
24139: LD_ADDR_VAR 0 3
24143: PUSH
24144: LD_STRING 1
24146: ST_TO_ADDR
// end ; normal := normal & tmp ;
24147: LD_ADDR_VAR 0 5
24151: PUSH
24152: LD_VAR 0 5
24156: PUSH
24157: LD_VAR 0 3
24161: STR
24162: ST_TO_ADDR
// end ;
24163: GO 24063
24165: POP
24166: POP
// for i = 1 to hardcoreCounter do
24167: LD_ADDR_VAR 0 8
24171: PUSH
24172: DOUBLE
24173: LD_INT 1
24175: DEC
24176: ST_TO_ADDR
24177: LD_EXP 46
24181: PUSH
24182: FOR_TO
24183: IFFALSE 24288
// begin tmp := 0 ;
24185: LD_ADDR_VAR 0 3
24189: PUSH
24190: LD_STRING 0
24192: ST_TO_ADDR
// if result [ 2 ] then
24193: LD_VAR 0 2
24197: PUSH
24198: LD_INT 2
24200: ARRAY
24201: IFFALSE 24270
// if result [ 2 ] [ 1 ] = 100 + i then
24203: LD_VAR 0 2
24207: PUSH
24208: LD_INT 2
24210: ARRAY
24211: PUSH
24212: LD_INT 1
24214: ARRAY
24215: PUSH
24216: LD_INT 100
24218: PUSH
24219: LD_VAR 0 8
24223: PLUS
24224: EQUAL
24225: IFFALSE 24270
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24227: LD_ADDR_VAR 0 2
24231: PUSH
24232: LD_VAR 0 2
24236: PPUSH
24237: LD_INT 2
24239: PPUSH
24240: LD_VAR 0 2
24244: PUSH
24245: LD_INT 2
24247: ARRAY
24248: PPUSH
24249: LD_INT 1
24251: PPUSH
24252: CALL_OW 3
24256: PPUSH
24257: CALL_OW 1
24261: ST_TO_ADDR
// tmp := 1 ;
24262: LD_ADDR_VAR 0 3
24266: PUSH
24267: LD_STRING 1
24269: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24270: LD_ADDR_VAR 0 6
24274: PUSH
24275: LD_VAR 0 6
24279: PUSH
24280: LD_VAR 0 3
24284: STR
24285: ST_TO_ADDR
// end ;
24286: GO 24182
24288: POP
24289: POP
// if isGameLoad then
24290: LD_VAR 0 1
24294: IFFALSE 24769
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24296: LD_ADDR_VAR 0 4
24300: PUSH
24301: LD_EXP 49
24305: PUSH
24306: LD_EXP 48
24310: PUSH
24311: LD_EXP 50
24315: PUSH
24316: LD_EXP 47
24320: PUSH
24321: LD_EXP 51
24325: PUSH
24326: LD_EXP 52
24330: PUSH
24331: LD_EXP 53
24335: PUSH
24336: LD_EXP 54
24340: PUSH
24341: LD_EXP 55
24345: PUSH
24346: LD_EXP 56
24350: PUSH
24351: LD_EXP 57
24355: PUSH
24356: LD_EXP 58
24360: PUSH
24361: LD_EXP 59
24365: PUSH
24366: LD_EXP 60
24370: PUSH
24371: LD_EXP 68
24375: PUSH
24376: LD_EXP 69
24380: PUSH
24381: LD_EXP 70
24385: PUSH
24386: LD_EXP 71
24390: PUSH
24391: LD_EXP 73
24395: PUSH
24396: LD_EXP 74
24400: PUSH
24401: LD_EXP 75
24405: PUSH
24406: LD_EXP 78
24410: PUSH
24411: LD_EXP 80
24415: PUSH
24416: LD_EXP 81
24420: PUSH
24421: LD_EXP 82
24425: PUSH
24426: LD_EXP 84
24430: PUSH
24431: LD_EXP 85
24435: PUSH
24436: LD_EXP 88
24440: PUSH
24441: LD_EXP 89
24445: PUSH
24446: LD_EXP 90
24450: PUSH
24451: LD_EXP 91
24455: PUSH
24456: LD_EXP 92
24460: PUSH
24461: LD_EXP 93
24465: PUSH
24466: LD_EXP 94
24470: PUSH
24471: LD_EXP 95
24475: PUSH
24476: LD_EXP 96
24480: PUSH
24481: LD_EXP 61
24485: PUSH
24486: LD_EXP 62
24490: PUSH
24491: LD_EXP 65
24495: PUSH
24496: LD_EXP 66
24500: PUSH
24501: LD_EXP 67
24505: PUSH
24506: LD_EXP 63
24510: PUSH
24511: LD_EXP 64
24515: PUSH
24516: LD_EXP 72
24520: PUSH
24521: LD_EXP 76
24525: PUSH
24526: LD_EXP 77
24530: PUSH
24531: LD_EXP 79
24535: PUSH
24536: LD_EXP 83
24540: PUSH
24541: LD_EXP 86
24545: PUSH
24546: LD_EXP 87
24550: PUSH
24551: LD_EXP 97
24555: PUSH
24556: LD_EXP 98
24560: PUSH
24561: LD_EXP 99
24565: PUSH
24566: LD_EXP 100
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: ST_TO_ADDR
// tmp :=  ;
24627: LD_ADDR_VAR 0 3
24631: PUSH
24632: LD_STRING 
24634: ST_TO_ADDR
// for i = 1 to normalCounter do
24635: LD_ADDR_VAR 0 8
24639: PUSH
24640: DOUBLE
24641: LD_INT 1
24643: DEC
24644: ST_TO_ADDR
24645: LD_EXP 45
24649: PUSH
24650: FOR_TO
24651: IFFALSE 24687
// begin if flags [ i ] then
24653: LD_VAR 0 4
24657: PUSH
24658: LD_VAR 0 8
24662: ARRAY
24663: IFFALSE 24685
// tmp := tmp & i & ; ;
24665: LD_ADDR_VAR 0 3
24669: PUSH
24670: LD_VAR 0 3
24674: PUSH
24675: LD_VAR 0 8
24679: STR
24680: PUSH
24681: LD_STRING ;
24683: STR
24684: ST_TO_ADDR
// end ;
24685: GO 24650
24687: POP
24688: POP
// for i = 1 to hardcoreCounter do
24689: LD_ADDR_VAR 0 8
24693: PUSH
24694: DOUBLE
24695: LD_INT 1
24697: DEC
24698: ST_TO_ADDR
24699: LD_EXP 46
24703: PUSH
24704: FOR_TO
24705: IFFALSE 24751
// begin if flags [ normalCounter + i ] then
24707: LD_VAR 0 4
24711: PUSH
24712: LD_EXP 45
24716: PUSH
24717: LD_VAR 0 8
24721: PLUS
24722: ARRAY
24723: IFFALSE 24749
// tmp := tmp & ( 100 + i ) & ; ;
24725: LD_ADDR_VAR 0 3
24729: PUSH
24730: LD_VAR 0 3
24734: PUSH
24735: LD_INT 100
24737: PUSH
24738: LD_VAR 0 8
24742: PLUS
24743: STR
24744: PUSH
24745: LD_STRING ;
24747: STR
24748: ST_TO_ADDR
// end ;
24749: GO 24704
24751: POP
24752: POP
// if tmp then
24753: LD_VAR 0 3
24757: IFFALSE 24769
// active := tmp ;
24759: LD_ADDR_VAR 0 7
24763: PUSH
24764: LD_VAR 0 3
24768: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24769: LD_STRING getStreamItemsFromMission("
24771: PUSH
24772: LD_VAR 0 5
24776: STR
24777: PUSH
24778: LD_STRING ","
24780: STR
24781: PUSH
24782: LD_VAR 0 6
24786: STR
24787: PUSH
24788: LD_STRING ","
24790: STR
24791: PUSH
24792: LD_VAR 0 7
24796: STR
24797: PUSH
24798: LD_STRING ")
24800: STR
24801: PPUSH
24802: CALL_OW 559
// end else
24806: GO 24815
// ToLua ( getStreamItemsFromMission("","","") ) ;
24808: LD_STRING getStreamItemsFromMission("","","")
24810: PPUSH
24811: CALL_OW 559
// end ;
24815: LD_VAR 0 2
24819: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24820: LD_EXP 44
24824: PUSH
24825: LD_EXP 49
24829: AND
24830: IFFALSE 24954
24832: GO 24834
24834: DISABLE
24835: LD_INT 0
24837: PPUSH
24838: PPUSH
// begin enable ;
24839: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24840: LD_ADDR_VAR 0 2
24844: PUSH
24845: LD_INT 22
24847: PUSH
24848: LD_OWVAR 2
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 2
24859: PUSH
24860: LD_INT 34
24862: PUSH
24863: LD_INT 7
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 34
24872: PUSH
24873: LD_INT 45
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 34
24882: PUSH
24883: LD_INT 28
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: LD_INT 34
24892: PUSH
24893: LD_INT 47
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: PPUSH
24911: CALL_OW 69
24915: ST_TO_ADDR
// if not tmp then
24916: LD_VAR 0 2
24920: NOT
24921: IFFALSE 24925
// exit ;
24923: GO 24954
// for i in tmp do
24925: LD_ADDR_VAR 0 1
24929: PUSH
24930: LD_VAR 0 2
24934: PUSH
24935: FOR_IN
24936: IFFALSE 24952
// begin SetLives ( i , 0 ) ;
24938: LD_VAR 0 1
24942: PPUSH
24943: LD_INT 0
24945: PPUSH
24946: CALL_OW 234
// end ;
24950: GO 24935
24952: POP
24953: POP
// end ;
24954: PPOPN 2
24956: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24957: LD_EXP 44
24961: PUSH
24962: LD_EXP 50
24966: AND
24967: IFFALSE 25051
24969: GO 24971
24971: DISABLE
24972: LD_INT 0
24974: PPUSH
24975: PPUSH
// begin enable ;
24976: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24977: LD_ADDR_VAR 0 2
24981: PUSH
24982: LD_INT 22
24984: PUSH
24985: LD_OWVAR 2
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: PUSH
24994: LD_INT 32
24996: PUSH
24997: LD_INT 3
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: PPUSH
25008: CALL_OW 69
25012: ST_TO_ADDR
// if not tmp then
25013: LD_VAR 0 2
25017: NOT
25018: IFFALSE 25022
// exit ;
25020: GO 25051
// for i in tmp do
25022: LD_ADDR_VAR 0 1
25026: PUSH
25027: LD_VAR 0 2
25031: PUSH
25032: FOR_IN
25033: IFFALSE 25049
// begin SetLives ( i , 0 ) ;
25035: LD_VAR 0 1
25039: PPUSH
25040: LD_INT 0
25042: PPUSH
25043: CALL_OW 234
// end ;
25047: GO 25032
25049: POP
25050: POP
// end ;
25051: PPOPN 2
25053: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25054: LD_EXP 44
25058: PUSH
25059: LD_EXP 47
25063: AND
25064: IFFALSE 25157
25066: GO 25068
25068: DISABLE
25069: LD_INT 0
25071: PPUSH
// begin enable ;
25072: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25073: LD_ADDR_VAR 0 1
25077: PUSH
25078: LD_INT 22
25080: PUSH
25081: LD_OWVAR 2
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_INT 2
25092: PUSH
25093: LD_INT 25
25095: PUSH
25096: LD_INT 5
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PUSH
25103: LD_INT 25
25105: PUSH
25106: LD_INT 9
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PUSH
25113: LD_INT 25
25115: PUSH
25116: LD_INT 8
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PPUSH
25133: CALL_OW 69
25137: PUSH
25138: FOR_IN
25139: IFFALSE 25155
// begin SetClass ( i , 1 ) ;
25141: LD_VAR 0 1
25145: PPUSH
25146: LD_INT 1
25148: PPUSH
25149: CALL_OW 336
// end ;
25153: GO 25138
25155: POP
25156: POP
// end ;
25157: PPOPN 1
25159: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25160: LD_EXP 44
25164: PUSH
25165: LD_EXP 48
25169: AND
25170: PUSH
25171: LD_OWVAR 65
25175: PUSH
25176: LD_INT 7
25178: LESS
25179: AND
25180: IFFALSE 25194
25182: GO 25184
25184: DISABLE
// begin enable ;
25185: ENABLE
// game_speed := 7 ;
25186: LD_ADDR_OWVAR 65
25190: PUSH
25191: LD_INT 7
25193: ST_TO_ADDR
// end ;
25194: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25195: LD_EXP 44
25199: PUSH
25200: LD_EXP 51
25204: AND
25205: IFFALSE 25407
25207: GO 25209
25209: DISABLE
25210: LD_INT 0
25212: PPUSH
25213: PPUSH
25214: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25215: LD_ADDR_VAR 0 3
25219: PUSH
25220: LD_INT 81
25222: PUSH
25223: LD_OWVAR 2
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PUSH
25232: LD_INT 21
25234: PUSH
25235: LD_INT 1
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: PPUSH
25246: CALL_OW 69
25250: ST_TO_ADDR
// if not tmp then
25251: LD_VAR 0 3
25255: NOT
25256: IFFALSE 25260
// exit ;
25258: GO 25407
// if tmp > 5 then
25260: LD_VAR 0 3
25264: PUSH
25265: LD_INT 5
25267: GREATER
25268: IFFALSE 25280
// k := 5 else
25270: LD_ADDR_VAR 0 2
25274: PUSH
25275: LD_INT 5
25277: ST_TO_ADDR
25278: GO 25290
// k := tmp ;
25280: LD_ADDR_VAR 0 2
25284: PUSH
25285: LD_VAR 0 3
25289: ST_TO_ADDR
// for i := 1 to k do
25290: LD_ADDR_VAR 0 1
25294: PUSH
25295: DOUBLE
25296: LD_INT 1
25298: DEC
25299: ST_TO_ADDR
25300: LD_VAR 0 2
25304: PUSH
25305: FOR_TO
25306: IFFALSE 25405
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25308: LD_VAR 0 3
25312: PUSH
25313: LD_VAR 0 1
25317: ARRAY
25318: PPUSH
25319: LD_VAR 0 1
25323: PUSH
25324: LD_INT 4
25326: MOD
25327: PUSH
25328: LD_INT 1
25330: PLUS
25331: PPUSH
25332: CALL_OW 259
25336: PUSH
25337: LD_INT 10
25339: LESS
25340: IFFALSE 25403
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25342: LD_VAR 0 3
25346: PUSH
25347: LD_VAR 0 1
25351: ARRAY
25352: PPUSH
25353: LD_VAR 0 1
25357: PUSH
25358: LD_INT 4
25360: MOD
25361: PUSH
25362: LD_INT 1
25364: PLUS
25365: PPUSH
25366: LD_VAR 0 3
25370: PUSH
25371: LD_VAR 0 1
25375: ARRAY
25376: PPUSH
25377: LD_VAR 0 1
25381: PUSH
25382: LD_INT 4
25384: MOD
25385: PUSH
25386: LD_INT 1
25388: PLUS
25389: PPUSH
25390: CALL_OW 259
25394: PUSH
25395: LD_INT 1
25397: PLUS
25398: PPUSH
25399: CALL_OW 237
25403: GO 25305
25405: POP
25406: POP
// end ;
25407: PPOPN 3
25409: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25410: LD_EXP 44
25414: PUSH
25415: LD_EXP 52
25419: AND
25420: IFFALSE 25440
25422: GO 25424
25424: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25425: LD_INT 4
25427: PPUSH
25428: LD_OWVAR 2
25432: PPUSH
25433: LD_INT 0
25435: PPUSH
25436: CALL_OW 324
25440: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25441: LD_EXP 44
25445: PUSH
25446: LD_EXP 81
25450: AND
25451: IFFALSE 25471
25453: GO 25455
25455: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25456: LD_INT 19
25458: PPUSH
25459: LD_OWVAR 2
25463: PPUSH
25464: LD_INT 0
25466: PPUSH
25467: CALL_OW 324
25471: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25472: LD_EXP 44
25476: PUSH
25477: LD_EXP 53
25481: AND
25482: IFFALSE 25584
25484: GO 25486
25486: DISABLE
25487: LD_INT 0
25489: PPUSH
25490: PPUSH
// begin enable ;
25491: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25492: LD_ADDR_VAR 0 2
25496: PUSH
25497: LD_INT 22
25499: PUSH
25500: LD_OWVAR 2
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: LD_INT 2
25511: PUSH
25512: LD_INT 34
25514: PUSH
25515: LD_INT 11
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PUSH
25522: LD_INT 34
25524: PUSH
25525: LD_INT 30
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: LIST
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: PPUSH
25541: CALL_OW 69
25545: ST_TO_ADDR
// if not tmp then
25546: LD_VAR 0 2
25550: NOT
25551: IFFALSE 25555
// exit ;
25553: GO 25584
// for i in tmp do
25555: LD_ADDR_VAR 0 1
25559: PUSH
25560: LD_VAR 0 2
25564: PUSH
25565: FOR_IN
25566: IFFALSE 25582
// begin SetLives ( i , 0 ) ;
25568: LD_VAR 0 1
25572: PPUSH
25573: LD_INT 0
25575: PPUSH
25576: CALL_OW 234
// end ;
25580: GO 25565
25582: POP
25583: POP
// end ;
25584: PPOPN 2
25586: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25587: LD_EXP 44
25591: PUSH
25592: LD_EXP 54
25596: AND
25597: IFFALSE 25617
25599: GO 25601
25601: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25602: LD_INT 32
25604: PPUSH
25605: LD_OWVAR 2
25609: PPUSH
25610: LD_INT 0
25612: PPUSH
25613: CALL_OW 324
25617: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25618: LD_EXP 44
25622: PUSH
25623: LD_EXP 55
25627: AND
25628: IFFALSE 25809
25630: GO 25632
25632: DISABLE
25633: LD_INT 0
25635: PPUSH
25636: PPUSH
25637: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25638: LD_ADDR_VAR 0 2
25642: PUSH
25643: LD_INT 22
25645: PUSH
25646: LD_OWVAR 2
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: LD_INT 33
25657: PUSH
25658: LD_INT 3
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PPUSH
25669: CALL_OW 69
25673: ST_TO_ADDR
// if not tmp then
25674: LD_VAR 0 2
25678: NOT
25679: IFFALSE 25683
// exit ;
25681: GO 25809
// side := 0 ;
25683: LD_ADDR_VAR 0 3
25687: PUSH
25688: LD_INT 0
25690: ST_TO_ADDR
// for i := 1 to 8 do
25691: LD_ADDR_VAR 0 1
25695: PUSH
25696: DOUBLE
25697: LD_INT 1
25699: DEC
25700: ST_TO_ADDR
25701: LD_INT 8
25703: PUSH
25704: FOR_TO
25705: IFFALSE 25753
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25707: LD_OWVAR 2
25711: PUSH
25712: LD_VAR 0 1
25716: NONEQUAL
25717: PUSH
25718: LD_OWVAR 2
25722: PPUSH
25723: LD_VAR 0 1
25727: PPUSH
25728: CALL_OW 81
25732: PUSH
25733: LD_INT 2
25735: EQUAL
25736: AND
25737: IFFALSE 25751
// begin side := i ;
25739: LD_ADDR_VAR 0 3
25743: PUSH
25744: LD_VAR 0 1
25748: ST_TO_ADDR
// break ;
25749: GO 25753
// end ;
25751: GO 25704
25753: POP
25754: POP
// if not side then
25755: LD_VAR 0 3
25759: NOT
25760: IFFALSE 25764
// exit ;
25762: GO 25809
// for i := 1 to tmp do
25764: LD_ADDR_VAR 0 1
25768: PUSH
25769: DOUBLE
25770: LD_INT 1
25772: DEC
25773: ST_TO_ADDR
25774: LD_VAR 0 2
25778: PUSH
25779: FOR_TO
25780: IFFALSE 25807
// if Prob ( 60 ) then
25782: LD_INT 60
25784: PPUSH
25785: CALL_OW 13
25789: IFFALSE 25805
// SetSide ( i , side ) ;
25791: LD_VAR 0 1
25795: PPUSH
25796: LD_VAR 0 3
25800: PPUSH
25801: CALL_OW 235
25805: GO 25779
25807: POP
25808: POP
// end ;
25809: PPOPN 3
25811: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25812: LD_EXP 44
25816: PUSH
25817: LD_EXP 57
25821: AND
25822: IFFALSE 25941
25824: GO 25826
25826: DISABLE
25827: LD_INT 0
25829: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25830: LD_ADDR_VAR 0 1
25834: PUSH
25835: LD_INT 22
25837: PUSH
25838: LD_OWVAR 2
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: LD_INT 21
25849: PUSH
25850: LD_INT 1
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: PUSH
25857: LD_INT 3
25859: PUSH
25860: LD_INT 23
25862: PUSH
25863: LD_INT 0
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: LIST
25878: PPUSH
25879: CALL_OW 69
25883: PUSH
25884: FOR_IN
25885: IFFALSE 25939
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25887: LD_VAR 0 1
25891: PPUSH
25892: CALL_OW 257
25896: PUSH
25897: LD_INT 1
25899: PUSH
25900: LD_INT 2
25902: PUSH
25903: LD_INT 3
25905: PUSH
25906: LD_INT 4
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: IN
25915: IFFALSE 25937
// SetClass ( un , rand ( 1 , 4 ) ) ;
25917: LD_VAR 0 1
25921: PPUSH
25922: LD_INT 1
25924: PPUSH
25925: LD_INT 4
25927: PPUSH
25928: CALL_OW 12
25932: PPUSH
25933: CALL_OW 336
25937: GO 25884
25939: POP
25940: POP
// end ;
25941: PPOPN 1
25943: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25944: LD_EXP 44
25948: PUSH
25949: LD_EXP 56
25953: AND
25954: IFFALSE 26033
25956: GO 25958
25958: DISABLE
25959: LD_INT 0
25961: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25962: LD_ADDR_VAR 0 1
25966: PUSH
25967: LD_INT 22
25969: PUSH
25970: LD_OWVAR 2
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PUSH
25979: LD_INT 21
25981: PUSH
25982: LD_INT 3
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PPUSH
25993: CALL_OW 69
25997: ST_TO_ADDR
// if not tmp then
25998: LD_VAR 0 1
26002: NOT
26003: IFFALSE 26007
// exit ;
26005: GO 26033
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26007: LD_VAR 0 1
26011: PUSH
26012: LD_INT 1
26014: PPUSH
26015: LD_VAR 0 1
26019: PPUSH
26020: CALL_OW 12
26024: ARRAY
26025: PPUSH
26026: LD_INT 100
26028: PPUSH
26029: CALL_OW 234
// end ;
26033: PPOPN 1
26035: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26036: LD_EXP 44
26040: PUSH
26041: LD_EXP 58
26045: AND
26046: IFFALSE 26144
26048: GO 26050
26050: DISABLE
26051: LD_INT 0
26053: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26054: LD_ADDR_VAR 0 1
26058: PUSH
26059: LD_INT 22
26061: PUSH
26062: LD_OWVAR 2
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: LD_INT 21
26073: PUSH
26074: LD_INT 1
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: PPUSH
26085: CALL_OW 69
26089: ST_TO_ADDR
// if not tmp then
26090: LD_VAR 0 1
26094: NOT
26095: IFFALSE 26099
// exit ;
26097: GO 26144
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26099: LD_VAR 0 1
26103: PUSH
26104: LD_INT 1
26106: PPUSH
26107: LD_VAR 0 1
26111: PPUSH
26112: CALL_OW 12
26116: ARRAY
26117: PPUSH
26118: LD_INT 1
26120: PPUSH
26121: LD_INT 4
26123: PPUSH
26124: CALL_OW 12
26128: PPUSH
26129: LD_INT 3000
26131: PPUSH
26132: LD_INT 9000
26134: PPUSH
26135: CALL_OW 12
26139: PPUSH
26140: CALL_OW 492
// end ;
26144: PPOPN 1
26146: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26147: LD_EXP 44
26151: PUSH
26152: LD_EXP 59
26156: AND
26157: IFFALSE 26177
26159: GO 26161
26161: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26162: LD_INT 1
26164: PPUSH
26165: LD_OWVAR 2
26169: PPUSH
26170: LD_INT 0
26172: PPUSH
26173: CALL_OW 324
26177: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26178: LD_EXP 44
26182: PUSH
26183: LD_EXP 60
26187: AND
26188: IFFALSE 26271
26190: GO 26192
26192: DISABLE
26193: LD_INT 0
26195: PPUSH
26196: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26197: LD_ADDR_VAR 0 2
26201: PUSH
26202: LD_INT 22
26204: PUSH
26205: LD_OWVAR 2
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: PUSH
26214: LD_INT 21
26216: PUSH
26217: LD_INT 3
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PPUSH
26228: CALL_OW 69
26232: ST_TO_ADDR
// if not tmp then
26233: LD_VAR 0 2
26237: NOT
26238: IFFALSE 26242
// exit ;
26240: GO 26271
// for i in tmp do
26242: LD_ADDR_VAR 0 1
26246: PUSH
26247: LD_VAR 0 2
26251: PUSH
26252: FOR_IN
26253: IFFALSE 26269
// SetBLevel ( i , 10 ) ;
26255: LD_VAR 0 1
26259: PPUSH
26260: LD_INT 10
26262: PPUSH
26263: CALL_OW 241
26267: GO 26252
26269: POP
26270: POP
// end ;
26271: PPOPN 2
26273: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26274: LD_EXP 44
26278: PUSH
26279: LD_EXP 61
26283: AND
26284: IFFALSE 26395
26286: GO 26288
26288: DISABLE
26289: LD_INT 0
26291: PPUSH
26292: PPUSH
26293: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26294: LD_ADDR_VAR 0 3
26298: PUSH
26299: LD_INT 22
26301: PUSH
26302: LD_OWVAR 2
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: LD_INT 25
26313: PUSH
26314: LD_INT 1
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PPUSH
26325: CALL_OW 69
26329: ST_TO_ADDR
// if not tmp then
26330: LD_VAR 0 3
26334: NOT
26335: IFFALSE 26339
// exit ;
26337: GO 26395
// un := tmp [ rand ( 1 , tmp ) ] ;
26339: LD_ADDR_VAR 0 2
26343: PUSH
26344: LD_VAR 0 3
26348: PUSH
26349: LD_INT 1
26351: PPUSH
26352: LD_VAR 0 3
26356: PPUSH
26357: CALL_OW 12
26361: ARRAY
26362: ST_TO_ADDR
// if Crawls ( un ) then
26363: LD_VAR 0 2
26367: PPUSH
26368: CALL_OW 318
26372: IFFALSE 26383
// ComWalk ( un ) ;
26374: LD_VAR 0 2
26378: PPUSH
26379: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26383: LD_VAR 0 2
26387: PPUSH
26388: LD_INT 5
26390: PPUSH
26391: CALL_OW 336
// end ;
26395: PPOPN 3
26397: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26398: LD_EXP 44
26402: PUSH
26403: LD_EXP 62
26407: AND
26408: PUSH
26409: LD_OWVAR 67
26413: PUSH
26414: LD_INT 4
26416: LESS
26417: AND
26418: IFFALSE 26437
26420: GO 26422
26422: DISABLE
// begin Difficulty := Difficulty + 1 ;
26423: LD_ADDR_OWVAR 67
26427: PUSH
26428: LD_OWVAR 67
26432: PUSH
26433: LD_INT 1
26435: PLUS
26436: ST_TO_ADDR
// end ;
26437: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26438: LD_EXP 44
26442: PUSH
26443: LD_EXP 63
26447: AND
26448: IFFALSE 26551
26450: GO 26452
26452: DISABLE
26453: LD_INT 0
26455: PPUSH
// begin for i := 1 to 5 do
26456: LD_ADDR_VAR 0 1
26460: PUSH
26461: DOUBLE
26462: LD_INT 1
26464: DEC
26465: ST_TO_ADDR
26466: LD_INT 5
26468: PUSH
26469: FOR_TO
26470: IFFALSE 26549
// begin uc_nation := nation_nature ;
26472: LD_ADDR_OWVAR 21
26476: PUSH
26477: LD_INT 0
26479: ST_TO_ADDR
// uc_side := 0 ;
26480: LD_ADDR_OWVAR 20
26484: PUSH
26485: LD_INT 0
26487: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26488: LD_ADDR_OWVAR 29
26492: PUSH
26493: LD_INT 12
26495: PUSH
26496: LD_INT 12
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: ST_TO_ADDR
// hc_agressivity := 20 ;
26503: LD_ADDR_OWVAR 35
26507: PUSH
26508: LD_INT 20
26510: ST_TO_ADDR
// hc_class := class_tiger ;
26511: LD_ADDR_OWVAR 28
26515: PUSH
26516: LD_INT 14
26518: ST_TO_ADDR
// hc_gallery :=  ;
26519: LD_ADDR_OWVAR 33
26523: PUSH
26524: LD_STRING 
26526: ST_TO_ADDR
// hc_name :=  ;
26527: LD_ADDR_OWVAR 26
26531: PUSH
26532: LD_STRING 
26534: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26535: CALL_OW 44
26539: PPUSH
26540: LD_INT 0
26542: PPUSH
26543: CALL_OW 51
// end ;
26547: GO 26469
26549: POP
26550: POP
// end ;
26551: PPOPN 1
26553: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26554: LD_EXP 44
26558: PUSH
26559: LD_EXP 64
26563: AND
26564: IFFALSE 26573
26566: GO 26568
26568: DISABLE
// StreamSibBomb ;
26569: CALL 26574 0 0
26573: END
// export function StreamSibBomb ; var i , x , y ; begin
26574: LD_INT 0
26576: PPUSH
26577: PPUSH
26578: PPUSH
26579: PPUSH
// result := false ;
26580: LD_ADDR_VAR 0 1
26584: PUSH
26585: LD_INT 0
26587: ST_TO_ADDR
// for i := 1 to 16 do
26588: LD_ADDR_VAR 0 2
26592: PUSH
26593: DOUBLE
26594: LD_INT 1
26596: DEC
26597: ST_TO_ADDR
26598: LD_INT 16
26600: PUSH
26601: FOR_TO
26602: IFFALSE 26801
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26604: LD_ADDR_VAR 0 3
26608: PUSH
26609: LD_INT 10
26611: PUSH
26612: LD_INT 20
26614: PUSH
26615: LD_INT 30
26617: PUSH
26618: LD_INT 40
26620: PUSH
26621: LD_INT 50
26623: PUSH
26624: LD_INT 60
26626: PUSH
26627: LD_INT 70
26629: PUSH
26630: LD_INT 80
26632: PUSH
26633: LD_INT 90
26635: PUSH
26636: LD_INT 100
26638: PUSH
26639: LD_INT 110
26641: PUSH
26642: LD_INT 120
26644: PUSH
26645: LD_INT 130
26647: PUSH
26648: LD_INT 140
26650: PUSH
26651: LD_INT 150
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: PUSH
26671: LD_INT 1
26673: PPUSH
26674: LD_INT 15
26676: PPUSH
26677: CALL_OW 12
26681: ARRAY
26682: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26683: LD_ADDR_VAR 0 4
26687: PUSH
26688: LD_INT 10
26690: PUSH
26691: LD_INT 20
26693: PUSH
26694: LD_INT 30
26696: PUSH
26697: LD_INT 40
26699: PUSH
26700: LD_INT 50
26702: PUSH
26703: LD_INT 60
26705: PUSH
26706: LD_INT 70
26708: PUSH
26709: LD_INT 80
26711: PUSH
26712: LD_INT 90
26714: PUSH
26715: LD_INT 100
26717: PUSH
26718: LD_INT 110
26720: PUSH
26721: LD_INT 120
26723: PUSH
26724: LD_INT 130
26726: PUSH
26727: LD_INT 140
26729: PUSH
26730: LD_INT 150
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: PUSH
26750: LD_INT 1
26752: PPUSH
26753: LD_INT 15
26755: PPUSH
26756: CALL_OW 12
26760: ARRAY
26761: ST_TO_ADDR
// if ValidHex ( x , y ) then
26762: LD_VAR 0 3
26766: PPUSH
26767: LD_VAR 0 4
26771: PPUSH
26772: CALL_OW 488
26776: IFFALSE 26799
// begin result := [ x , y ] ;
26778: LD_ADDR_VAR 0 1
26782: PUSH
26783: LD_VAR 0 3
26787: PUSH
26788: LD_VAR 0 4
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: ST_TO_ADDR
// break ;
26797: GO 26801
// end ; end ;
26799: GO 26601
26801: POP
26802: POP
// if result then
26803: LD_VAR 0 1
26807: IFFALSE 26867
// begin ToLua ( playSibBomb() ) ;
26809: LD_STRING playSibBomb()
26811: PPUSH
26812: CALL_OW 559
// wait ( 0 0$14 ) ;
26816: LD_INT 490
26818: PPUSH
26819: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26823: LD_VAR 0 1
26827: PUSH
26828: LD_INT 1
26830: ARRAY
26831: PPUSH
26832: LD_VAR 0 1
26836: PUSH
26837: LD_INT 2
26839: ARRAY
26840: PPUSH
26841: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26845: LD_VAR 0 1
26849: PUSH
26850: LD_INT 1
26852: ARRAY
26853: PPUSH
26854: LD_VAR 0 1
26858: PUSH
26859: LD_INT 2
26861: ARRAY
26862: PPUSH
26863: CALL_OW 429
// end ; end ;
26867: LD_VAR 0 1
26871: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26872: LD_EXP 44
26876: PUSH
26877: LD_EXP 66
26881: AND
26882: IFFALSE 26894
26884: GO 26886
26886: DISABLE
// YouLost (  ) ;
26887: LD_STRING 
26889: PPUSH
26890: CALL_OW 104
26894: END
// every 0 0$1 trigger StreamModeActive and sFog do
26895: LD_EXP 44
26899: PUSH
26900: LD_EXP 65
26904: AND
26905: IFFALSE 26919
26907: GO 26909
26909: DISABLE
// FogOff ( your_side ) ;
26910: LD_OWVAR 2
26914: PPUSH
26915: CALL_OW 344
26919: END
// every 0 0$1 trigger StreamModeActive and sSun do
26920: LD_EXP 44
26924: PUSH
26925: LD_EXP 67
26929: AND
26930: IFFALSE 26958
26932: GO 26934
26934: DISABLE
// begin solar_recharge_percent := 0 ;
26935: LD_ADDR_OWVAR 79
26939: PUSH
26940: LD_INT 0
26942: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26943: LD_INT 10500
26945: PPUSH
26946: CALL_OW 67
// solar_recharge_percent := 100 ;
26950: LD_ADDR_OWVAR 79
26954: PUSH
26955: LD_INT 100
26957: ST_TO_ADDR
// end ;
26958: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26959: LD_EXP 44
26963: PUSH
26964: LD_EXP 68
26968: AND
26969: IFFALSE 27208
26971: GO 26973
26973: DISABLE
26974: LD_INT 0
26976: PPUSH
26977: PPUSH
26978: PPUSH
// begin tmp := [ ] ;
26979: LD_ADDR_VAR 0 3
26983: PUSH
26984: EMPTY
26985: ST_TO_ADDR
// for i := 1 to 6 do
26986: LD_ADDR_VAR 0 1
26990: PUSH
26991: DOUBLE
26992: LD_INT 1
26994: DEC
26995: ST_TO_ADDR
26996: LD_INT 6
26998: PUSH
26999: FOR_TO
27000: IFFALSE 27105
// begin uc_nation := nation_nature ;
27002: LD_ADDR_OWVAR 21
27006: PUSH
27007: LD_INT 0
27009: ST_TO_ADDR
// uc_side := 0 ;
27010: LD_ADDR_OWVAR 20
27014: PUSH
27015: LD_INT 0
27017: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27018: LD_ADDR_OWVAR 29
27022: PUSH
27023: LD_INT 12
27025: PUSH
27026: LD_INT 12
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: ST_TO_ADDR
// hc_agressivity := 20 ;
27033: LD_ADDR_OWVAR 35
27037: PUSH
27038: LD_INT 20
27040: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27041: LD_ADDR_OWVAR 28
27045: PUSH
27046: LD_INT 17
27048: ST_TO_ADDR
// hc_gallery :=  ;
27049: LD_ADDR_OWVAR 33
27053: PUSH
27054: LD_STRING 
27056: ST_TO_ADDR
// hc_name :=  ;
27057: LD_ADDR_OWVAR 26
27061: PUSH
27062: LD_STRING 
27064: ST_TO_ADDR
// un := CreateHuman ;
27065: LD_ADDR_VAR 0 2
27069: PUSH
27070: CALL_OW 44
27074: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27075: LD_VAR 0 2
27079: PPUSH
27080: LD_INT 1
27082: PPUSH
27083: CALL_OW 51
// tmp := tmp ^ un ;
27087: LD_ADDR_VAR 0 3
27091: PUSH
27092: LD_VAR 0 3
27096: PUSH
27097: LD_VAR 0 2
27101: ADD
27102: ST_TO_ADDR
// end ;
27103: GO 26999
27105: POP
27106: POP
// repeat wait ( 0 0$1 ) ;
27107: LD_INT 35
27109: PPUSH
27110: CALL_OW 67
// for un in tmp do
27114: LD_ADDR_VAR 0 2
27118: PUSH
27119: LD_VAR 0 3
27123: PUSH
27124: FOR_IN
27125: IFFALSE 27199
// begin if IsDead ( un ) then
27127: LD_VAR 0 2
27131: PPUSH
27132: CALL_OW 301
27136: IFFALSE 27156
// begin tmp := tmp diff un ;
27138: LD_ADDR_VAR 0 3
27142: PUSH
27143: LD_VAR 0 3
27147: PUSH
27148: LD_VAR 0 2
27152: DIFF
27153: ST_TO_ADDR
// continue ;
27154: GO 27124
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27156: LD_VAR 0 2
27160: PPUSH
27161: LD_INT 3
27163: PUSH
27164: LD_INT 22
27166: PUSH
27167: LD_INT 0
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: PPUSH
27178: CALL_OW 69
27182: PPUSH
27183: LD_VAR 0 2
27187: PPUSH
27188: CALL_OW 74
27192: PPUSH
27193: CALL_OW 115
// end ;
27197: GO 27124
27199: POP
27200: POP
// until not tmp ;
27201: LD_VAR 0 3
27205: NOT
27206: IFFALSE 27107
// end ;
27208: PPOPN 3
27210: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27211: LD_EXP 44
27215: PUSH
27216: LD_EXP 69
27220: AND
27221: IFFALSE 27275
27223: GO 27225
27225: DISABLE
// begin ToLua ( displayTroll(); ) ;
27226: LD_STRING displayTroll();
27228: PPUSH
27229: CALL_OW 559
// wait ( 3 3$00 ) ;
27233: LD_INT 6300
27235: PPUSH
27236: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27240: LD_STRING hideTroll();
27242: PPUSH
27243: CALL_OW 559
// wait ( 1 1$00 ) ;
27247: LD_INT 2100
27249: PPUSH
27250: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27254: LD_STRING displayTroll();
27256: PPUSH
27257: CALL_OW 559
// wait ( 1 1$00 ) ;
27261: LD_INT 2100
27263: PPUSH
27264: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27268: LD_STRING hideTroll();
27270: PPUSH
27271: CALL_OW 559
// end ;
27275: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27276: LD_EXP 44
27280: PUSH
27281: LD_EXP 70
27285: AND
27286: IFFALSE 27349
27288: GO 27290
27290: DISABLE
27291: LD_INT 0
27293: PPUSH
// begin p := 0 ;
27294: LD_ADDR_VAR 0 1
27298: PUSH
27299: LD_INT 0
27301: ST_TO_ADDR
// repeat game_speed := 1 ;
27302: LD_ADDR_OWVAR 65
27306: PUSH
27307: LD_INT 1
27309: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27310: LD_INT 35
27312: PPUSH
27313: CALL_OW 67
// p := p + 1 ;
27317: LD_ADDR_VAR 0 1
27321: PUSH
27322: LD_VAR 0 1
27326: PUSH
27327: LD_INT 1
27329: PLUS
27330: ST_TO_ADDR
// until p >= 60 ;
27331: LD_VAR 0 1
27335: PUSH
27336: LD_INT 60
27338: GREATEREQUAL
27339: IFFALSE 27302
// game_speed := 4 ;
27341: LD_ADDR_OWVAR 65
27345: PUSH
27346: LD_INT 4
27348: ST_TO_ADDR
// end ;
27349: PPOPN 1
27351: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27352: LD_EXP 44
27356: PUSH
27357: LD_EXP 71
27361: AND
27362: IFFALSE 27508
27364: GO 27366
27366: DISABLE
27367: LD_INT 0
27369: PPUSH
27370: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27371: LD_ADDR_VAR 0 1
27375: PUSH
27376: LD_INT 22
27378: PUSH
27379: LD_OWVAR 2
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 2
27390: PUSH
27391: LD_INT 30
27393: PUSH
27394: LD_INT 0
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_INT 30
27403: PUSH
27404: LD_INT 1
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: LIST
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: PPUSH
27420: CALL_OW 69
27424: ST_TO_ADDR
// if not depot then
27425: LD_VAR 0 1
27429: NOT
27430: IFFALSE 27434
// exit ;
27432: GO 27508
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27434: LD_ADDR_VAR 0 2
27438: PUSH
27439: LD_VAR 0 1
27443: PUSH
27444: LD_INT 1
27446: PPUSH
27447: LD_VAR 0 1
27451: PPUSH
27452: CALL_OW 12
27456: ARRAY
27457: PPUSH
27458: CALL_OW 274
27462: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27463: LD_VAR 0 2
27467: PPUSH
27468: LD_INT 1
27470: PPUSH
27471: LD_INT 0
27473: PPUSH
27474: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27478: LD_VAR 0 2
27482: PPUSH
27483: LD_INT 2
27485: PPUSH
27486: LD_INT 0
27488: PPUSH
27489: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27493: LD_VAR 0 2
27497: PPUSH
27498: LD_INT 3
27500: PPUSH
27501: LD_INT 0
27503: PPUSH
27504: CALL_OW 277
// end ;
27508: PPOPN 2
27510: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27511: LD_EXP 44
27515: PUSH
27516: LD_EXP 72
27520: AND
27521: IFFALSE 27618
27523: GO 27525
27525: DISABLE
27526: LD_INT 0
27528: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27529: LD_ADDR_VAR 0 1
27533: PUSH
27534: LD_INT 22
27536: PUSH
27537: LD_OWVAR 2
27541: PUSH
27542: EMPTY
27543: LIST
27544: LIST
27545: PUSH
27546: LD_INT 21
27548: PUSH
27549: LD_INT 1
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PUSH
27556: LD_INT 3
27558: PUSH
27559: LD_INT 23
27561: PUSH
27562: LD_INT 0
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: LIST
27577: PPUSH
27578: CALL_OW 69
27582: ST_TO_ADDR
// if not tmp then
27583: LD_VAR 0 1
27587: NOT
27588: IFFALSE 27592
// exit ;
27590: GO 27618
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27592: LD_VAR 0 1
27596: PUSH
27597: LD_INT 1
27599: PPUSH
27600: LD_VAR 0 1
27604: PPUSH
27605: CALL_OW 12
27609: ARRAY
27610: PPUSH
27611: LD_INT 200
27613: PPUSH
27614: CALL_OW 234
// end ;
27618: PPOPN 1
27620: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27621: LD_EXP 44
27625: PUSH
27626: LD_EXP 73
27630: AND
27631: IFFALSE 27710
27633: GO 27635
27635: DISABLE
27636: LD_INT 0
27638: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27639: LD_ADDR_VAR 0 1
27643: PUSH
27644: LD_INT 22
27646: PUSH
27647: LD_OWVAR 2
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: PUSH
27656: LD_INT 21
27658: PUSH
27659: LD_INT 2
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: PPUSH
27670: CALL_OW 69
27674: ST_TO_ADDR
// if not tmp then
27675: LD_VAR 0 1
27679: NOT
27680: IFFALSE 27684
// exit ;
27682: GO 27710
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27684: LD_VAR 0 1
27688: PUSH
27689: LD_INT 1
27691: PPUSH
27692: LD_VAR 0 1
27696: PPUSH
27697: CALL_OW 12
27701: ARRAY
27702: PPUSH
27703: LD_INT 60
27705: PPUSH
27706: CALL_OW 234
// end ;
27710: PPOPN 1
27712: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27713: LD_EXP 44
27717: PUSH
27718: LD_EXP 74
27722: AND
27723: IFFALSE 27822
27725: GO 27727
27727: DISABLE
27728: LD_INT 0
27730: PPUSH
27731: PPUSH
// begin enable ;
27732: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27733: LD_ADDR_VAR 0 1
27737: PUSH
27738: LD_INT 22
27740: PUSH
27741: LD_OWVAR 2
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: PUSH
27750: LD_INT 61
27752: PUSH
27753: EMPTY
27754: LIST
27755: PUSH
27756: LD_INT 33
27758: PUSH
27759: LD_INT 2
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: EMPTY
27767: LIST
27768: LIST
27769: LIST
27770: PPUSH
27771: CALL_OW 69
27775: ST_TO_ADDR
// if not tmp then
27776: LD_VAR 0 1
27780: NOT
27781: IFFALSE 27785
// exit ;
27783: GO 27822
// for i in tmp do
27785: LD_ADDR_VAR 0 2
27789: PUSH
27790: LD_VAR 0 1
27794: PUSH
27795: FOR_IN
27796: IFFALSE 27820
// if IsControledBy ( i ) then
27798: LD_VAR 0 2
27802: PPUSH
27803: CALL_OW 312
27807: IFFALSE 27818
// ComUnlink ( i ) ;
27809: LD_VAR 0 2
27813: PPUSH
27814: CALL_OW 136
27818: GO 27795
27820: POP
27821: POP
// end ;
27822: PPOPN 2
27824: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27825: LD_EXP 44
27829: PUSH
27830: LD_EXP 75
27834: AND
27835: IFFALSE 27975
27837: GO 27839
27839: DISABLE
27840: LD_INT 0
27842: PPUSH
27843: PPUSH
// begin ToLua ( displayPowell(); ) ;
27844: LD_STRING displayPowell();
27846: PPUSH
27847: CALL_OW 559
// uc_side := 0 ;
27851: LD_ADDR_OWVAR 20
27855: PUSH
27856: LD_INT 0
27858: ST_TO_ADDR
// uc_nation := 2 ;
27859: LD_ADDR_OWVAR 21
27863: PUSH
27864: LD_INT 2
27866: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27867: LD_ADDR_OWVAR 37
27871: PUSH
27872: LD_INT 14
27874: ST_TO_ADDR
// vc_engine := engine_siberite ;
27875: LD_ADDR_OWVAR 39
27879: PUSH
27880: LD_INT 3
27882: ST_TO_ADDR
// vc_control := control_apeman ;
27883: LD_ADDR_OWVAR 38
27887: PUSH
27888: LD_INT 5
27890: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27891: LD_ADDR_OWVAR 40
27895: PUSH
27896: LD_INT 29
27898: ST_TO_ADDR
// un := CreateVehicle ;
27899: LD_ADDR_VAR 0 2
27903: PUSH
27904: CALL_OW 45
27908: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27909: LD_VAR 0 2
27913: PPUSH
27914: LD_INT 1
27916: PPUSH
27917: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27921: LD_INT 35
27923: PPUSH
27924: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27928: LD_VAR 0 2
27932: PPUSH
27933: LD_INT 22
27935: PUSH
27936: LD_OWVAR 2
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: PPUSH
27945: CALL_OW 69
27949: PPUSH
27950: LD_VAR 0 2
27954: PPUSH
27955: CALL_OW 74
27959: PPUSH
27960: CALL_OW 115
// until IsDead ( un ) ;
27964: LD_VAR 0 2
27968: PPUSH
27969: CALL_OW 301
27973: IFFALSE 27921
// end ;
27975: PPOPN 2
27977: END
// every 0 0$1 trigger StreamModeActive and sStu do
27978: LD_EXP 44
27982: PUSH
27983: LD_EXP 83
27987: AND
27988: IFFALSE 28004
27990: GO 27992
27992: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27993: LD_STRING displayStucuk();
27995: PPUSH
27996: CALL_OW 559
// ResetFog ;
28000: CALL_OW 335
// end ;
28004: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28005: LD_EXP 44
28009: PUSH
28010: LD_EXP 76
28014: AND
28015: IFFALSE 28156
28017: GO 28019
28019: DISABLE
28020: LD_INT 0
28022: PPUSH
28023: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28024: LD_ADDR_VAR 0 2
28028: PUSH
28029: LD_INT 22
28031: PUSH
28032: LD_OWVAR 2
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: PUSH
28041: LD_INT 21
28043: PUSH
28044: LD_INT 1
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PPUSH
28055: CALL_OW 69
28059: ST_TO_ADDR
// if not tmp then
28060: LD_VAR 0 2
28064: NOT
28065: IFFALSE 28069
// exit ;
28067: GO 28156
// un := tmp [ rand ( 1 , tmp ) ] ;
28069: LD_ADDR_VAR 0 1
28073: PUSH
28074: LD_VAR 0 2
28078: PUSH
28079: LD_INT 1
28081: PPUSH
28082: LD_VAR 0 2
28086: PPUSH
28087: CALL_OW 12
28091: ARRAY
28092: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28093: LD_VAR 0 1
28097: PPUSH
28098: LD_INT 0
28100: PPUSH
28101: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28105: LD_VAR 0 1
28109: PPUSH
28110: LD_OWVAR 3
28114: PUSH
28115: LD_VAR 0 1
28119: DIFF
28120: PPUSH
28121: LD_VAR 0 1
28125: PPUSH
28126: CALL_OW 74
28130: PPUSH
28131: CALL_OW 115
// wait ( 0 0$20 ) ;
28135: LD_INT 700
28137: PPUSH
28138: CALL_OW 67
// SetSide ( un , your_side ) ;
28142: LD_VAR 0 1
28146: PPUSH
28147: LD_OWVAR 2
28151: PPUSH
28152: CALL_OW 235
// end ;
28156: PPOPN 2
28158: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28159: LD_EXP 44
28163: PUSH
28164: LD_EXP 77
28168: AND
28169: IFFALSE 28275
28171: GO 28173
28173: DISABLE
28174: LD_INT 0
28176: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28177: LD_ADDR_VAR 0 1
28181: PUSH
28182: LD_INT 22
28184: PUSH
28185: LD_OWVAR 2
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: LD_INT 2
28196: PUSH
28197: LD_INT 30
28199: PUSH
28200: LD_INT 0
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: LD_INT 30
28209: PUSH
28210: LD_INT 1
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: LIST
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PPUSH
28226: CALL_OW 69
28230: ST_TO_ADDR
// if not depot then
28231: LD_VAR 0 1
28235: NOT
28236: IFFALSE 28240
// exit ;
28238: GO 28275
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28240: LD_VAR 0 1
28244: PUSH
28245: LD_INT 1
28247: ARRAY
28248: PPUSH
28249: CALL_OW 250
28253: PPUSH
28254: LD_VAR 0 1
28258: PUSH
28259: LD_INT 1
28261: ARRAY
28262: PPUSH
28263: CALL_OW 251
28267: PPUSH
28268: LD_INT 70
28270: PPUSH
28271: CALL_OW 495
// end ;
28275: PPOPN 1
28277: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28278: LD_EXP 44
28282: PUSH
28283: LD_EXP 78
28287: AND
28288: IFFALSE 28499
28290: GO 28292
28292: DISABLE
28293: LD_INT 0
28295: PPUSH
28296: PPUSH
28297: PPUSH
28298: PPUSH
28299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28300: LD_ADDR_VAR 0 5
28304: PUSH
28305: LD_INT 22
28307: PUSH
28308: LD_OWVAR 2
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: LD_INT 21
28319: PUSH
28320: LD_INT 1
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PPUSH
28331: CALL_OW 69
28335: ST_TO_ADDR
// if not tmp then
28336: LD_VAR 0 5
28340: NOT
28341: IFFALSE 28345
// exit ;
28343: GO 28499
// for i in tmp do
28345: LD_ADDR_VAR 0 1
28349: PUSH
28350: LD_VAR 0 5
28354: PUSH
28355: FOR_IN
28356: IFFALSE 28497
// begin d := rand ( 0 , 5 ) ;
28358: LD_ADDR_VAR 0 4
28362: PUSH
28363: LD_INT 0
28365: PPUSH
28366: LD_INT 5
28368: PPUSH
28369: CALL_OW 12
28373: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28374: LD_ADDR_VAR 0 2
28378: PUSH
28379: LD_VAR 0 1
28383: PPUSH
28384: CALL_OW 250
28388: PPUSH
28389: LD_VAR 0 4
28393: PPUSH
28394: LD_INT 3
28396: PPUSH
28397: LD_INT 12
28399: PPUSH
28400: CALL_OW 12
28404: PPUSH
28405: CALL_OW 272
28409: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28410: LD_ADDR_VAR 0 3
28414: PUSH
28415: LD_VAR 0 1
28419: PPUSH
28420: CALL_OW 251
28424: PPUSH
28425: LD_VAR 0 4
28429: PPUSH
28430: LD_INT 3
28432: PPUSH
28433: LD_INT 12
28435: PPUSH
28436: CALL_OW 12
28440: PPUSH
28441: CALL_OW 273
28445: ST_TO_ADDR
// if ValidHex ( x , y ) then
28446: LD_VAR 0 2
28450: PPUSH
28451: LD_VAR 0 3
28455: PPUSH
28456: CALL_OW 488
28460: IFFALSE 28495
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28462: LD_VAR 0 1
28466: PPUSH
28467: LD_VAR 0 2
28471: PPUSH
28472: LD_VAR 0 3
28476: PPUSH
28477: LD_INT 3
28479: PPUSH
28480: LD_INT 6
28482: PPUSH
28483: CALL_OW 12
28487: PPUSH
28488: LD_INT 1
28490: PPUSH
28491: CALL_OW 483
// end ;
28495: GO 28355
28497: POP
28498: POP
// end ;
28499: PPOPN 5
28501: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28502: LD_EXP 44
28506: PUSH
28507: LD_EXP 79
28511: AND
28512: IFFALSE 28606
28514: GO 28516
28516: DISABLE
28517: LD_INT 0
28519: PPUSH
28520: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28521: LD_ADDR_VAR 0 2
28525: PUSH
28526: LD_INT 22
28528: PUSH
28529: LD_OWVAR 2
28533: PUSH
28534: EMPTY
28535: LIST
28536: LIST
28537: PUSH
28538: LD_INT 32
28540: PUSH
28541: LD_INT 1
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: PUSH
28548: LD_INT 21
28550: PUSH
28551: LD_INT 2
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: LIST
28562: PPUSH
28563: CALL_OW 69
28567: ST_TO_ADDR
// if not tmp then
28568: LD_VAR 0 2
28572: NOT
28573: IFFALSE 28577
// exit ;
28575: GO 28606
// for i in tmp do
28577: LD_ADDR_VAR 0 1
28581: PUSH
28582: LD_VAR 0 2
28586: PUSH
28587: FOR_IN
28588: IFFALSE 28604
// SetFuel ( i , 0 ) ;
28590: LD_VAR 0 1
28594: PPUSH
28595: LD_INT 0
28597: PPUSH
28598: CALL_OW 240
28602: GO 28587
28604: POP
28605: POP
// end ;
28606: PPOPN 2
28608: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28609: LD_EXP 44
28613: PUSH
28614: LD_EXP 80
28618: AND
28619: IFFALSE 28685
28621: GO 28623
28623: DISABLE
28624: LD_INT 0
28626: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28627: LD_ADDR_VAR 0 1
28631: PUSH
28632: LD_INT 22
28634: PUSH
28635: LD_OWVAR 2
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PUSH
28644: LD_INT 30
28646: PUSH
28647: LD_INT 29
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PPUSH
28658: CALL_OW 69
28662: ST_TO_ADDR
// if not tmp then
28663: LD_VAR 0 1
28667: NOT
28668: IFFALSE 28672
// exit ;
28670: GO 28685
// DestroyUnit ( tmp [ 1 ] ) ;
28672: LD_VAR 0 1
28676: PUSH
28677: LD_INT 1
28679: ARRAY
28680: PPUSH
28681: CALL_OW 65
// end ;
28685: PPOPN 1
28687: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28688: LD_EXP 44
28692: PUSH
28693: LD_EXP 82
28697: AND
28698: IFFALSE 28827
28700: GO 28702
28702: DISABLE
28703: LD_INT 0
28705: PPUSH
// begin uc_side := 0 ;
28706: LD_ADDR_OWVAR 20
28710: PUSH
28711: LD_INT 0
28713: ST_TO_ADDR
// uc_nation := nation_arabian ;
28714: LD_ADDR_OWVAR 21
28718: PUSH
28719: LD_INT 2
28721: ST_TO_ADDR
// hc_gallery :=  ;
28722: LD_ADDR_OWVAR 33
28726: PUSH
28727: LD_STRING 
28729: ST_TO_ADDR
// hc_name :=  ;
28730: LD_ADDR_OWVAR 26
28734: PUSH
28735: LD_STRING 
28737: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28738: LD_INT 1
28740: PPUSH
28741: LD_INT 11
28743: PPUSH
28744: LD_INT 10
28746: PPUSH
28747: CALL_OW 380
// un := CreateHuman ;
28751: LD_ADDR_VAR 0 1
28755: PUSH
28756: CALL_OW 44
28760: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28761: LD_VAR 0 1
28765: PPUSH
28766: LD_INT 1
28768: PPUSH
28769: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28773: LD_INT 35
28775: PPUSH
28776: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28780: LD_VAR 0 1
28784: PPUSH
28785: LD_INT 22
28787: PUSH
28788: LD_OWVAR 2
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PPUSH
28797: CALL_OW 69
28801: PPUSH
28802: LD_VAR 0 1
28806: PPUSH
28807: CALL_OW 74
28811: PPUSH
28812: CALL_OW 115
// until IsDead ( un ) ;
28816: LD_VAR 0 1
28820: PPUSH
28821: CALL_OW 301
28825: IFFALSE 28773
// end ;
28827: PPOPN 1
28829: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28830: LD_EXP 44
28834: PUSH
28835: LD_EXP 84
28839: AND
28840: IFFALSE 28852
28842: GO 28844
28844: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28845: LD_STRING earthquake(getX(game), 0, 32)
28847: PPUSH
28848: CALL_OW 559
28852: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28853: LD_EXP 44
28857: PUSH
28858: LD_EXP 85
28862: AND
28863: IFFALSE 28954
28865: GO 28867
28867: DISABLE
28868: LD_INT 0
28870: PPUSH
// begin enable ;
28871: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28872: LD_ADDR_VAR 0 1
28876: PUSH
28877: LD_INT 22
28879: PUSH
28880: LD_OWVAR 2
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 21
28891: PUSH
28892: LD_INT 2
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 33
28901: PUSH
28902: LD_INT 3
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: LIST
28913: PPUSH
28914: CALL_OW 69
28918: ST_TO_ADDR
// if not tmp then
28919: LD_VAR 0 1
28923: NOT
28924: IFFALSE 28928
// exit ;
28926: GO 28954
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28928: LD_VAR 0 1
28932: PUSH
28933: LD_INT 1
28935: PPUSH
28936: LD_VAR 0 1
28940: PPUSH
28941: CALL_OW 12
28945: ARRAY
28946: PPUSH
28947: LD_INT 1
28949: PPUSH
28950: CALL_OW 234
// end ;
28954: PPOPN 1
28956: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28957: LD_EXP 44
28961: PUSH
28962: LD_EXP 86
28966: AND
28967: IFFALSE 29108
28969: GO 28971
28971: DISABLE
28972: LD_INT 0
28974: PPUSH
28975: PPUSH
28976: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28977: LD_ADDR_VAR 0 3
28981: PUSH
28982: LD_INT 22
28984: PUSH
28985: LD_OWVAR 2
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PUSH
28994: LD_INT 25
28996: PUSH
28997: LD_INT 1
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PPUSH
29008: CALL_OW 69
29012: ST_TO_ADDR
// if not tmp then
29013: LD_VAR 0 3
29017: NOT
29018: IFFALSE 29022
// exit ;
29020: GO 29108
// un := tmp [ rand ( 1 , tmp ) ] ;
29022: LD_ADDR_VAR 0 2
29026: PUSH
29027: LD_VAR 0 3
29031: PUSH
29032: LD_INT 1
29034: PPUSH
29035: LD_VAR 0 3
29039: PPUSH
29040: CALL_OW 12
29044: ARRAY
29045: ST_TO_ADDR
// if Crawls ( un ) then
29046: LD_VAR 0 2
29050: PPUSH
29051: CALL_OW 318
29055: IFFALSE 29066
// ComWalk ( un ) ;
29057: LD_VAR 0 2
29061: PPUSH
29062: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29066: LD_VAR 0 2
29070: PPUSH
29071: LD_INT 9
29073: PPUSH
29074: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29078: LD_INT 28
29080: PPUSH
29081: LD_OWVAR 2
29085: PPUSH
29086: LD_INT 2
29088: PPUSH
29089: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29093: LD_INT 29
29095: PPUSH
29096: LD_OWVAR 2
29100: PPUSH
29101: LD_INT 2
29103: PPUSH
29104: CALL_OW 322
// end ;
29108: PPOPN 3
29110: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29111: LD_EXP 44
29115: PUSH
29116: LD_EXP 87
29120: AND
29121: IFFALSE 29232
29123: GO 29125
29125: DISABLE
29126: LD_INT 0
29128: PPUSH
29129: PPUSH
29130: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29131: LD_ADDR_VAR 0 3
29135: PUSH
29136: LD_INT 22
29138: PUSH
29139: LD_OWVAR 2
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: PUSH
29148: LD_INT 25
29150: PUSH
29151: LD_INT 1
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PPUSH
29162: CALL_OW 69
29166: ST_TO_ADDR
// if not tmp then
29167: LD_VAR 0 3
29171: NOT
29172: IFFALSE 29176
// exit ;
29174: GO 29232
// un := tmp [ rand ( 1 , tmp ) ] ;
29176: LD_ADDR_VAR 0 2
29180: PUSH
29181: LD_VAR 0 3
29185: PUSH
29186: LD_INT 1
29188: PPUSH
29189: LD_VAR 0 3
29193: PPUSH
29194: CALL_OW 12
29198: ARRAY
29199: ST_TO_ADDR
// if Crawls ( un ) then
29200: LD_VAR 0 2
29204: PPUSH
29205: CALL_OW 318
29209: IFFALSE 29220
// ComWalk ( un ) ;
29211: LD_VAR 0 2
29215: PPUSH
29216: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29220: LD_VAR 0 2
29224: PPUSH
29225: LD_INT 8
29227: PPUSH
29228: CALL_OW 336
// end ;
29232: PPOPN 3
29234: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29235: LD_EXP 44
29239: PUSH
29240: LD_EXP 88
29244: AND
29245: IFFALSE 29389
29247: GO 29249
29249: DISABLE
29250: LD_INT 0
29252: PPUSH
29253: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29254: LD_ADDR_VAR 0 2
29258: PUSH
29259: LD_INT 22
29261: PUSH
29262: LD_OWVAR 2
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: PUSH
29271: LD_INT 21
29273: PUSH
29274: LD_INT 2
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: LD_INT 2
29283: PUSH
29284: LD_INT 34
29286: PUSH
29287: LD_INT 12
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: LD_INT 34
29296: PUSH
29297: LD_INT 51
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 34
29306: PUSH
29307: LD_INT 32
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: LIST
29318: LIST
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: LIST
29324: PPUSH
29325: CALL_OW 69
29329: ST_TO_ADDR
// if not tmp then
29330: LD_VAR 0 2
29334: NOT
29335: IFFALSE 29339
// exit ;
29337: GO 29389
// for i in tmp do
29339: LD_ADDR_VAR 0 1
29343: PUSH
29344: LD_VAR 0 2
29348: PUSH
29349: FOR_IN
29350: IFFALSE 29387
// if GetCargo ( i , mat_artifact ) = 0 then
29352: LD_VAR 0 1
29356: PPUSH
29357: LD_INT 4
29359: PPUSH
29360: CALL_OW 289
29364: PUSH
29365: LD_INT 0
29367: EQUAL
29368: IFFALSE 29385
// SetCargo ( i , mat_siberit , 100 ) ;
29370: LD_VAR 0 1
29374: PPUSH
29375: LD_INT 3
29377: PPUSH
29378: LD_INT 100
29380: PPUSH
29381: CALL_OW 290
29385: GO 29349
29387: POP
29388: POP
// end ;
29389: PPOPN 2
29391: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29392: LD_EXP 44
29396: PUSH
29397: LD_EXP 89
29401: AND
29402: IFFALSE 29585
29404: GO 29406
29406: DISABLE
29407: LD_INT 0
29409: PPUSH
29410: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29411: LD_ADDR_VAR 0 2
29415: PUSH
29416: LD_INT 22
29418: PUSH
29419: LD_OWVAR 2
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: PPUSH
29428: CALL_OW 69
29432: ST_TO_ADDR
// if not tmp then
29433: LD_VAR 0 2
29437: NOT
29438: IFFALSE 29442
// exit ;
29440: GO 29585
// for i := 1 to 2 do
29442: LD_ADDR_VAR 0 1
29446: PUSH
29447: DOUBLE
29448: LD_INT 1
29450: DEC
29451: ST_TO_ADDR
29452: LD_INT 2
29454: PUSH
29455: FOR_TO
29456: IFFALSE 29583
// begin uc_side := your_side ;
29458: LD_ADDR_OWVAR 20
29462: PUSH
29463: LD_OWVAR 2
29467: ST_TO_ADDR
// uc_nation := nation_american ;
29468: LD_ADDR_OWVAR 21
29472: PUSH
29473: LD_INT 1
29475: ST_TO_ADDR
// vc_chassis := us_morphling ;
29476: LD_ADDR_OWVAR 37
29480: PUSH
29481: LD_INT 5
29483: ST_TO_ADDR
// vc_engine := engine_siberite ;
29484: LD_ADDR_OWVAR 39
29488: PUSH
29489: LD_INT 3
29491: ST_TO_ADDR
// vc_control := control_computer ;
29492: LD_ADDR_OWVAR 38
29496: PUSH
29497: LD_INT 3
29499: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29500: LD_ADDR_OWVAR 40
29504: PUSH
29505: LD_INT 10
29507: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29508: LD_VAR 0 2
29512: PUSH
29513: LD_INT 1
29515: ARRAY
29516: PPUSH
29517: CALL_OW 310
29521: NOT
29522: IFFALSE 29569
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29524: CALL_OW 45
29528: PPUSH
29529: LD_VAR 0 2
29533: PUSH
29534: LD_INT 1
29536: ARRAY
29537: PPUSH
29538: CALL_OW 250
29542: PPUSH
29543: LD_VAR 0 2
29547: PUSH
29548: LD_INT 1
29550: ARRAY
29551: PPUSH
29552: CALL_OW 251
29556: PPUSH
29557: LD_INT 12
29559: PPUSH
29560: LD_INT 1
29562: PPUSH
29563: CALL_OW 50
29567: GO 29581
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29569: CALL_OW 45
29573: PPUSH
29574: LD_INT 1
29576: PPUSH
29577: CALL_OW 51
// end ;
29581: GO 29455
29583: POP
29584: POP
// end ;
29585: PPOPN 2
29587: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29588: LD_EXP 44
29592: PUSH
29593: LD_EXP 90
29597: AND
29598: IFFALSE 29820
29600: GO 29602
29602: DISABLE
29603: LD_INT 0
29605: PPUSH
29606: PPUSH
29607: PPUSH
29608: PPUSH
29609: PPUSH
29610: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29611: LD_ADDR_VAR 0 6
29615: PUSH
29616: LD_INT 22
29618: PUSH
29619: LD_OWVAR 2
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 21
29630: PUSH
29631: LD_INT 1
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: LD_INT 3
29640: PUSH
29641: LD_INT 23
29643: PUSH
29644: LD_INT 0
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: LIST
29659: PPUSH
29660: CALL_OW 69
29664: ST_TO_ADDR
// if not tmp then
29665: LD_VAR 0 6
29669: NOT
29670: IFFALSE 29674
// exit ;
29672: GO 29820
// s1 := rand ( 1 , 4 ) ;
29674: LD_ADDR_VAR 0 2
29678: PUSH
29679: LD_INT 1
29681: PPUSH
29682: LD_INT 4
29684: PPUSH
29685: CALL_OW 12
29689: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29690: LD_ADDR_VAR 0 4
29694: PUSH
29695: LD_VAR 0 6
29699: PUSH
29700: LD_INT 1
29702: ARRAY
29703: PPUSH
29704: LD_VAR 0 2
29708: PPUSH
29709: CALL_OW 259
29713: ST_TO_ADDR
// if s1 = 1 then
29714: LD_VAR 0 2
29718: PUSH
29719: LD_INT 1
29721: EQUAL
29722: IFFALSE 29742
// s2 := rand ( 2 , 4 ) else
29724: LD_ADDR_VAR 0 3
29728: PUSH
29729: LD_INT 2
29731: PPUSH
29732: LD_INT 4
29734: PPUSH
29735: CALL_OW 12
29739: ST_TO_ADDR
29740: GO 29750
// s2 := 1 ;
29742: LD_ADDR_VAR 0 3
29746: PUSH
29747: LD_INT 1
29749: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29750: LD_ADDR_VAR 0 5
29754: PUSH
29755: LD_VAR 0 6
29759: PUSH
29760: LD_INT 1
29762: ARRAY
29763: PPUSH
29764: LD_VAR 0 3
29768: PPUSH
29769: CALL_OW 259
29773: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29774: LD_VAR 0 6
29778: PUSH
29779: LD_INT 1
29781: ARRAY
29782: PPUSH
29783: LD_VAR 0 2
29787: PPUSH
29788: LD_VAR 0 5
29792: PPUSH
29793: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29797: LD_VAR 0 6
29801: PUSH
29802: LD_INT 1
29804: ARRAY
29805: PPUSH
29806: LD_VAR 0 3
29810: PPUSH
29811: LD_VAR 0 4
29815: PPUSH
29816: CALL_OW 237
// end ;
29820: PPOPN 6
29822: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29823: LD_EXP 44
29827: PUSH
29828: LD_EXP 91
29832: AND
29833: IFFALSE 29912
29835: GO 29837
29837: DISABLE
29838: LD_INT 0
29840: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29841: LD_ADDR_VAR 0 1
29845: PUSH
29846: LD_INT 22
29848: PUSH
29849: LD_OWVAR 2
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 30
29860: PUSH
29861: LD_INT 3
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PPUSH
29872: CALL_OW 69
29876: ST_TO_ADDR
// if not tmp then
29877: LD_VAR 0 1
29881: NOT
29882: IFFALSE 29886
// exit ;
29884: GO 29912
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29886: LD_VAR 0 1
29890: PUSH
29891: LD_INT 1
29893: PPUSH
29894: LD_VAR 0 1
29898: PPUSH
29899: CALL_OW 12
29903: ARRAY
29904: PPUSH
29905: LD_INT 1
29907: PPUSH
29908: CALL_OW 234
// end ;
29912: PPOPN 1
29914: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29915: LD_EXP 44
29919: PUSH
29920: LD_EXP 92
29924: AND
29925: IFFALSE 30037
29927: GO 29929
29929: DISABLE
29930: LD_INT 0
29932: PPUSH
29933: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29934: LD_ADDR_VAR 0 2
29938: PUSH
29939: LD_INT 22
29941: PUSH
29942: LD_OWVAR 2
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: LD_INT 2
29953: PUSH
29954: LD_INT 30
29956: PUSH
29957: LD_INT 27
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PUSH
29964: LD_INT 30
29966: PUSH
29967: LD_INT 26
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: PUSH
29974: LD_INT 30
29976: PUSH
29977: LD_INT 28
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: PUSH
29990: EMPTY
29991: LIST
29992: LIST
29993: PPUSH
29994: CALL_OW 69
29998: ST_TO_ADDR
// if not tmp then
29999: LD_VAR 0 2
30003: NOT
30004: IFFALSE 30008
// exit ;
30006: GO 30037
// for i in tmp do
30008: LD_ADDR_VAR 0 1
30012: PUSH
30013: LD_VAR 0 2
30017: PUSH
30018: FOR_IN
30019: IFFALSE 30035
// SetLives ( i , 1 ) ;
30021: LD_VAR 0 1
30025: PPUSH
30026: LD_INT 1
30028: PPUSH
30029: CALL_OW 234
30033: GO 30018
30035: POP
30036: POP
// end ;
30037: PPOPN 2
30039: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30040: LD_EXP 44
30044: PUSH
30045: LD_EXP 93
30049: AND
30050: IFFALSE 30337
30052: GO 30054
30054: DISABLE
30055: LD_INT 0
30057: PPUSH
30058: PPUSH
30059: PPUSH
// begin i := rand ( 1 , 7 ) ;
30060: LD_ADDR_VAR 0 1
30064: PUSH
30065: LD_INT 1
30067: PPUSH
30068: LD_INT 7
30070: PPUSH
30071: CALL_OW 12
30075: ST_TO_ADDR
// case i of 1 :
30076: LD_VAR 0 1
30080: PUSH
30081: LD_INT 1
30083: DOUBLE
30084: EQUAL
30085: IFTRUE 30089
30087: GO 30099
30089: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30090: LD_STRING earthquake(getX(game), 0, 32)
30092: PPUSH
30093: CALL_OW 559
30097: GO 30337
30099: LD_INT 2
30101: DOUBLE
30102: EQUAL
30103: IFTRUE 30107
30105: GO 30121
30107: POP
// begin ToLua ( displayStucuk(); ) ;
30108: LD_STRING displayStucuk();
30110: PPUSH
30111: CALL_OW 559
// ResetFog ;
30115: CALL_OW 335
// end ; 3 :
30119: GO 30337
30121: LD_INT 3
30123: DOUBLE
30124: EQUAL
30125: IFTRUE 30129
30127: GO 30233
30129: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30130: LD_ADDR_VAR 0 2
30134: PUSH
30135: LD_INT 22
30137: PUSH
30138: LD_OWVAR 2
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: LD_INT 25
30149: PUSH
30150: LD_INT 1
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: PPUSH
30161: CALL_OW 69
30165: ST_TO_ADDR
// if not tmp then
30166: LD_VAR 0 2
30170: NOT
30171: IFFALSE 30175
// exit ;
30173: GO 30337
// un := tmp [ rand ( 1 , tmp ) ] ;
30175: LD_ADDR_VAR 0 3
30179: PUSH
30180: LD_VAR 0 2
30184: PUSH
30185: LD_INT 1
30187: PPUSH
30188: LD_VAR 0 2
30192: PPUSH
30193: CALL_OW 12
30197: ARRAY
30198: ST_TO_ADDR
// if Crawls ( un ) then
30199: LD_VAR 0 3
30203: PPUSH
30204: CALL_OW 318
30208: IFFALSE 30219
// ComWalk ( un ) ;
30210: LD_VAR 0 3
30214: PPUSH
30215: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30219: LD_VAR 0 3
30223: PPUSH
30224: LD_INT 8
30226: PPUSH
30227: CALL_OW 336
// end ; 4 :
30231: GO 30337
30233: LD_INT 4
30235: DOUBLE
30236: EQUAL
30237: IFTRUE 30241
30239: GO 30315
30241: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30242: LD_ADDR_VAR 0 2
30246: PUSH
30247: LD_INT 22
30249: PUSH
30250: LD_OWVAR 2
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: LD_INT 30
30261: PUSH
30262: LD_INT 29
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PPUSH
30273: CALL_OW 69
30277: ST_TO_ADDR
// if not tmp then
30278: LD_VAR 0 2
30282: NOT
30283: IFFALSE 30287
// exit ;
30285: GO 30337
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30287: LD_VAR 0 2
30291: PUSH
30292: LD_INT 1
30294: ARRAY
30295: PPUSH
30296: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30300: LD_VAR 0 2
30304: PUSH
30305: LD_INT 1
30307: ARRAY
30308: PPUSH
30309: CALL_OW 65
// end ; 5 .. 7 :
30313: GO 30337
30315: LD_INT 5
30317: DOUBLE
30318: GREATEREQUAL
30319: IFFALSE 30327
30321: LD_INT 7
30323: DOUBLE
30324: LESSEQUAL
30325: IFTRUE 30329
30327: GO 30336
30329: POP
// StreamSibBomb ; end ;
30330: CALL 26574 0 0
30334: GO 30337
30336: POP
// end ;
30337: PPOPN 3
30339: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30340: LD_EXP 44
30344: PUSH
30345: LD_EXP 94
30349: AND
30350: IFFALSE 30506
30352: GO 30354
30354: DISABLE
30355: LD_INT 0
30357: PPUSH
30358: PPUSH
30359: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30360: LD_ADDR_VAR 0 2
30364: PUSH
30365: LD_INT 81
30367: PUSH
30368: LD_OWVAR 2
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: LD_INT 2
30379: PUSH
30380: LD_INT 21
30382: PUSH
30383: LD_INT 1
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: LD_INT 21
30392: PUSH
30393: LD_INT 2
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: LIST
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PPUSH
30409: CALL_OW 69
30413: ST_TO_ADDR
// if not tmp then
30414: LD_VAR 0 2
30418: NOT
30419: IFFALSE 30423
// exit ;
30421: GO 30506
// p := 0 ;
30423: LD_ADDR_VAR 0 3
30427: PUSH
30428: LD_INT 0
30430: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30431: LD_INT 35
30433: PPUSH
30434: CALL_OW 67
// p := p + 1 ;
30438: LD_ADDR_VAR 0 3
30442: PUSH
30443: LD_VAR 0 3
30447: PUSH
30448: LD_INT 1
30450: PLUS
30451: ST_TO_ADDR
// for i in tmp do
30452: LD_ADDR_VAR 0 1
30456: PUSH
30457: LD_VAR 0 2
30461: PUSH
30462: FOR_IN
30463: IFFALSE 30494
// if GetLives ( i ) < 1000 then
30465: LD_VAR 0 1
30469: PPUSH
30470: CALL_OW 256
30474: PUSH
30475: LD_INT 1000
30477: LESS
30478: IFFALSE 30492
// SetLives ( i , 1000 ) ;
30480: LD_VAR 0 1
30484: PPUSH
30485: LD_INT 1000
30487: PPUSH
30488: CALL_OW 234
30492: GO 30462
30494: POP
30495: POP
// until p > 20 ;
30496: LD_VAR 0 3
30500: PUSH
30501: LD_INT 20
30503: GREATER
30504: IFFALSE 30431
// end ;
30506: PPOPN 3
30508: END
// every 0 0$1 trigger StreamModeActive and sTime do
30509: LD_EXP 44
30513: PUSH
30514: LD_EXP 95
30518: AND
30519: IFFALSE 30554
30521: GO 30523
30523: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30524: LD_INT 28
30526: PPUSH
30527: LD_OWVAR 2
30531: PPUSH
30532: LD_INT 2
30534: PPUSH
30535: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30539: LD_INT 30
30541: PPUSH
30542: LD_OWVAR 2
30546: PPUSH
30547: LD_INT 2
30549: PPUSH
30550: CALL_OW 322
// end ;
30554: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30555: LD_EXP 44
30559: PUSH
30560: LD_EXP 96
30564: AND
30565: IFFALSE 30686
30567: GO 30569
30569: DISABLE
30570: LD_INT 0
30572: PPUSH
30573: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30574: LD_ADDR_VAR 0 2
30578: PUSH
30579: LD_INT 22
30581: PUSH
30582: LD_OWVAR 2
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: PUSH
30591: LD_INT 21
30593: PUSH
30594: LD_INT 1
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: LD_INT 3
30603: PUSH
30604: LD_INT 23
30606: PUSH
30607: LD_INT 0
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: LIST
30622: PPUSH
30623: CALL_OW 69
30627: ST_TO_ADDR
// if not tmp then
30628: LD_VAR 0 2
30632: NOT
30633: IFFALSE 30637
// exit ;
30635: GO 30686
// for i in tmp do
30637: LD_ADDR_VAR 0 1
30641: PUSH
30642: LD_VAR 0 2
30646: PUSH
30647: FOR_IN
30648: IFFALSE 30684
// begin if Crawls ( i ) then
30650: LD_VAR 0 1
30654: PPUSH
30655: CALL_OW 318
30659: IFFALSE 30670
// ComWalk ( i ) ;
30661: LD_VAR 0 1
30665: PPUSH
30666: CALL_OW 138
// SetClass ( i , 2 ) ;
30670: LD_VAR 0 1
30674: PPUSH
30675: LD_INT 2
30677: PPUSH
30678: CALL_OW 336
// end ;
30682: GO 30647
30684: POP
30685: POP
// end ;
30686: PPOPN 2
30688: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30689: LD_EXP 44
30693: PUSH
30694: LD_EXP 97
30698: AND
30699: IFFALSE 30987
30701: GO 30703
30703: DISABLE
30704: LD_INT 0
30706: PPUSH
30707: PPUSH
30708: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30709: LD_OWVAR 2
30713: PPUSH
30714: LD_INT 9
30716: PPUSH
30717: LD_INT 1
30719: PPUSH
30720: LD_INT 1
30722: PPUSH
30723: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30727: LD_INT 9
30729: PPUSH
30730: LD_OWVAR 2
30734: PPUSH
30735: CALL_OW 343
// uc_side := 9 ;
30739: LD_ADDR_OWVAR 20
30743: PUSH
30744: LD_INT 9
30746: ST_TO_ADDR
// uc_nation := 2 ;
30747: LD_ADDR_OWVAR 21
30751: PUSH
30752: LD_INT 2
30754: ST_TO_ADDR
// hc_name := Dark Warrior ;
30755: LD_ADDR_OWVAR 26
30759: PUSH
30760: LD_STRING Dark Warrior
30762: ST_TO_ADDR
// hc_gallery :=  ;
30763: LD_ADDR_OWVAR 33
30767: PUSH
30768: LD_STRING 
30770: ST_TO_ADDR
// hc_noskilllimit := true ;
30771: LD_ADDR_OWVAR 76
30775: PUSH
30776: LD_INT 1
30778: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30779: LD_ADDR_OWVAR 31
30783: PUSH
30784: LD_INT 30
30786: PUSH
30787: LD_INT 30
30789: PUSH
30790: LD_INT 30
30792: PUSH
30793: LD_INT 30
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: ST_TO_ADDR
// un := CreateHuman ;
30802: LD_ADDR_VAR 0 3
30806: PUSH
30807: CALL_OW 44
30811: ST_TO_ADDR
// hc_noskilllimit := false ;
30812: LD_ADDR_OWVAR 76
30816: PUSH
30817: LD_INT 0
30819: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30820: LD_VAR 0 3
30824: PPUSH
30825: LD_INT 1
30827: PPUSH
30828: CALL_OW 51
// ToLua ( playRanger() ) ;
30832: LD_STRING playRanger()
30834: PPUSH
30835: CALL_OW 559
// p := 0 ;
30839: LD_ADDR_VAR 0 2
30843: PUSH
30844: LD_INT 0
30846: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30847: LD_INT 35
30849: PPUSH
30850: CALL_OW 67
// p := p + 1 ;
30854: LD_ADDR_VAR 0 2
30858: PUSH
30859: LD_VAR 0 2
30863: PUSH
30864: LD_INT 1
30866: PLUS
30867: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30868: LD_VAR 0 3
30872: PPUSH
30873: CALL_OW 256
30877: PUSH
30878: LD_INT 1000
30880: LESS
30881: IFFALSE 30895
// SetLives ( un , 1000 ) ;
30883: LD_VAR 0 3
30887: PPUSH
30888: LD_INT 1000
30890: PPUSH
30891: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30895: LD_VAR 0 3
30899: PPUSH
30900: LD_INT 81
30902: PUSH
30903: LD_OWVAR 2
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PUSH
30912: LD_INT 91
30914: PUSH
30915: LD_VAR 0 3
30919: PUSH
30920: LD_INT 30
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: LIST
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: PPUSH
30932: CALL_OW 69
30936: PPUSH
30937: LD_VAR 0 3
30941: PPUSH
30942: CALL_OW 74
30946: PPUSH
30947: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30951: LD_VAR 0 2
30955: PUSH
30956: LD_INT 80
30958: GREATER
30959: PUSH
30960: LD_VAR 0 3
30964: PPUSH
30965: CALL_OW 301
30969: OR
30970: IFFALSE 30847
// if un then
30972: LD_VAR 0 3
30976: IFFALSE 30987
// RemoveUnit ( un ) ;
30978: LD_VAR 0 3
30982: PPUSH
30983: CALL_OW 64
// end ;
30987: PPOPN 3
30989: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30990: LD_EXP 98
30994: IFFALSE 31110
30996: GO 30998
30998: DISABLE
30999: LD_INT 0
31001: PPUSH
31002: PPUSH
31003: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31004: LD_ADDR_VAR 0 2
31008: PUSH
31009: LD_INT 81
31011: PUSH
31012: LD_OWVAR 2
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PUSH
31021: LD_INT 21
31023: PUSH
31024: LD_INT 1
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: PPUSH
31035: CALL_OW 69
31039: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31040: LD_STRING playComputer()
31042: PPUSH
31043: CALL_OW 559
// if not tmp then
31047: LD_VAR 0 2
31051: NOT
31052: IFFALSE 31056
// exit ;
31054: GO 31110
// for i in tmp do
31056: LD_ADDR_VAR 0 1
31060: PUSH
31061: LD_VAR 0 2
31065: PUSH
31066: FOR_IN
31067: IFFALSE 31108
// for j := 1 to 4 do
31069: LD_ADDR_VAR 0 3
31073: PUSH
31074: DOUBLE
31075: LD_INT 1
31077: DEC
31078: ST_TO_ADDR
31079: LD_INT 4
31081: PUSH
31082: FOR_TO
31083: IFFALSE 31104
// SetSkill ( i , j , 10 ) ;
31085: LD_VAR 0 1
31089: PPUSH
31090: LD_VAR 0 3
31094: PPUSH
31095: LD_INT 10
31097: PPUSH
31098: CALL_OW 237
31102: GO 31082
31104: POP
31105: POP
31106: GO 31066
31108: POP
31109: POP
// end ;
31110: PPOPN 3
31112: END
// every 0 0$1 trigger s30 do var i , tmp ;
31113: LD_EXP 99
31117: IFFALSE 31186
31119: GO 31121
31121: DISABLE
31122: LD_INT 0
31124: PPUSH
31125: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31126: LD_ADDR_VAR 0 2
31130: PUSH
31131: LD_INT 22
31133: PUSH
31134: LD_OWVAR 2
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PPUSH
31143: CALL_OW 69
31147: ST_TO_ADDR
// if not tmp then
31148: LD_VAR 0 2
31152: NOT
31153: IFFALSE 31157
// exit ;
31155: GO 31186
// for i in tmp do
31157: LD_ADDR_VAR 0 1
31161: PUSH
31162: LD_VAR 0 2
31166: PUSH
31167: FOR_IN
31168: IFFALSE 31184
// SetLives ( i , 300 ) ;
31170: LD_VAR 0 1
31174: PPUSH
31175: LD_INT 300
31177: PPUSH
31178: CALL_OW 234
31182: GO 31167
31184: POP
31185: POP
// end ;
31186: PPOPN 2
31188: END
// every 0 0$1 trigger s60 do var i , tmp ;
31189: LD_EXP 100
31193: IFFALSE 31262
31195: GO 31197
31197: DISABLE
31198: LD_INT 0
31200: PPUSH
31201: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31202: LD_ADDR_VAR 0 2
31206: PUSH
31207: LD_INT 22
31209: PUSH
31210: LD_OWVAR 2
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PPUSH
31219: CALL_OW 69
31223: ST_TO_ADDR
// if not tmp then
31224: LD_VAR 0 2
31228: NOT
31229: IFFALSE 31233
// exit ;
31231: GO 31262
// for i in tmp do
31233: LD_ADDR_VAR 0 1
31237: PUSH
31238: LD_VAR 0 2
31242: PUSH
31243: FOR_IN
31244: IFFALSE 31260
// SetLives ( i , 600 ) ;
31246: LD_VAR 0 1
31250: PPUSH
31251: LD_INT 600
31253: PPUSH
31254: CALL_OW 234
31258: GO 31243
31260: POP
31261: POP
// end ;
31262: PPOPN 2
31264: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31265: LD_INT 0
31267: PPUSH
// case cmd of 301 :
31268: LD_VAR 0 1
31272: PUSH
31273: LD_INT 301
31275: DOUBLE
31276: EQUAL
31277: IFTRUE 31281
31279: GO 31313
31281: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31282: LD_VAR 0 6
31286: PPUSH
31287: LD_VAR 0 7
31291: PPUSH
31292: LD_VAR 0 8
31296: PPUSH
31297: LD_VAR 0 4
31301: PPUSH
31302: LD_VAR 0 5
31306: PPUSH
31307: CALL 32522 0 5
31311: GO 31434
31313: LD_INT 302
31315: DOUBLE
31316: EQUAL
31317: IFTRUE 31321
31319: GO 31358
31321: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31322: LD_VAR 0 6
31326: PPUSH
31327: LD_VAR 0 7
31331: PPUSH
31332: LD_VAR 0 8
31336: PPUSH
31337: LD_VAR 0 9
31341: PPUSH
31342: LD_VAR 0 4
31346: PPUSH
31347: LD_VAR 0 5
31351: PPUSH
31352: CALL 32613 0 6
31356: GO 31434
31358: LD_INT 303
31360: DOUBLE
31361: EQUAL
31362: IFTRUE 31366
31364: GO 31403
31366: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31367: LD_VAR 0 6
31371: PPUSH
31372: LD_VAR 0 7
31376: PPUSH
31377: LD_VAR 0 8
31381: PPUSH
31382: LD_VAR 0 9
31386: PPUSH
31387: LD_VAR 0 4
31391: PPUSH
31392: LD_VAR 0 5
31396: PPUSH
31397: CALL 31439 0 6
31401: GO 31434
31403: LD_INT 304
31405: DOUBLE
31406: EQUAL
31407: IFTRUE 31411
31409: GO 31433
31411: POP
// hHackTeleport ( unit , x , y ) ; end ;
31412: LD_VAR 0 2
31416: PPUSH
31417: LD_VAR 0 4
31421: PPUSH
31422: LD_VAR 0 5
31426: PPUSH
31427: CALL 33206 0 3
31431: GO 31434
31433: POP
// end ;
31434: LD_VAR 0 12
31438: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31439: LD_INT 0
31441: PPUSH
31442: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31443: LD_VAR 0 1
31447: PUSH
31448: LD_INT 1
31450: LESS
31451: PUSH
31452: LD_VAR 0 1
31456: PUSH
31457: LD_INT 3
31459: GREATER
31460: OR
31461: PUSH
31462: LD_VAR 0 5
31466: PPUSH
31467: LD_VAR 0 6
31471: PPUSH
31472: CALL_OW 428
31476: OR
31477: IFFALSE 31481
// exit ;
31479: GO 32209
// uc_side := your_side ;
31481: LD_ADDR_OWVAR 20
31485: PUSH
31486: LD_OWVAR 2
31490: ST_TO_ADDR
// uc_nation := nation ;
31491: LD_ADDR_OWVAR 21
31495: PUSH
31496: LD_VAR 0 1
31500: ST_TO_ADDR
// bc_level = 1 ;
31501: LD_ADDR_OWVAR 43
31505: PUSH
31506: LD_INT 1
31508: ST_TO_ADDR
// case btype of 1 :
31509: LD_VAR 0 2
31513: PUSH
31514: LD_INT 1
31516: DOUBLE
31517: EQUAL
31518: IFTRUE 31522
31520: GO 31533
31522: POP
// bc_type := b_depot ; 2 :
31523: LD_ADDR_OWVAR 42
31527: PUSH
31528: LD_INT 0
31530: ST_TO_ADDR
31531: GO 32153
31533: LD_INT 2
31535: DOUBLE
31536: EQUAL
31537: IFTRUE 31541
31539: GO 31552
31541: POP
// bc_type := b_warehouse ; 3 :
31542: LD_ADDR_OWVAR 42
31546: PUSH
31547: LD_INT 1
31549: ST_TO_ADDR
31550: GO 32153
31552: LD_INT 3
31554: DOUBLE
31555: EQUAL
31556: IFTRUE 31560
31558: GO 31571
31560: POP
// bc_type := b_lab ; 4 .. 9 :
31561: LD_ADDR_OWVAR 42
31565: PUSH
31566: LD_INT 6
31568: ST_TO_ADDR
31569: GO 32153
31571: LD_INT 4
31573: DOUBLE
31574: GREATEREQUAL
31575: IFFALSE 31583
31577: LD_INT 9
31579: DOUBLE
31580: LESSEQUAL
31581: IFTRUE 31585
31583: GO 31645
31585: POP
// begin bc_type := b_lab_half ;
31586: LD_ADDR_OWVAR 42
31590: PUSH
31591: LD_INT 7
31593: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31594: LD_ADDR_OWVAR 44
31598: PUSH
31599: LD_INT 10
31601: PUSH
31602: LD_INT 11
31604: PUSH
31605: LD_INT 12
31607: PUSH
31608: LD_INT 15
31610: PUSH
31611: LD_INT 14
31613: PUSH
31614: LD_INT 13
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: PUSH
31625: LD_VAR 0 2
31629: PUSH
31630: LD_INT 3
31632: MINUS
31633: ARRAY
31634: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
31635: LD_ADDR_OWVAR 45
31639: PUSH
31640: LD_INT 9
31642: ST_TO_ADDR
// end ; 10 .. 13 :
31643: GO 32153
31645: LD_INT 10
31647: DOUBLE
31648: GREATEREQUAL
31649: IFFALSE 31657
31651: LD_INT 13
31653: DOUBLE
31654: LESSEQUAL
31655: IFTRUE 31659
31657: GO 31736
31659: POP
// begin bc_type := b_lab_full ;
31660: LD_ADDR_OWVAR 42
31664: PUSH
31665: LD_INT 8
31667: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31668: LD_ADDR_OWVAR 44
31672: PUSH
31673: LD_INT 10
31675: PUSH
31676: LD_INT 12
31678: PUSH
31679: LD_INT 14
31681: PUSH
31682: LD_INT 13
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: LIST
31689: LIST
31690: PUSH
31691: LD_VAR 0 2
31695: PUSH
31696: LD_INT 9
31698: MINUS
31699: ARRAY
31700: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31701: LD_ADDR_OWVAR 45
31705: PUSH
31706: LD_INT 11
31708: PUSH
31709: LD_INT 15
31711: PUSH
31712: LD_INT 12
31714: PUSH
31715: LD_INT 15
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: PUSH
31724: LD_VAR 0 2
31728: PUSH
31729: LD_INT 9
31731: MINUS
31732: ARRAY
31733: ST_TO_ADDR
// end ; 14 :
31734: GO 32153
31736: LD_INT 14
31738: DOUBLE
31739: EQUAL
31740: IFTRUE 31744
31742: GO 31755
31744: POP
// bc_type := b_workshop ; 15 :
31745: LD_ADDR_OWVAR 42
31749: PUSH
31750: LD_INT 2
31752: ST_TO_ADDR
31753: GO 32153
31755: LD_INT 15
31757: DOUBLE
31758: EQUAL
31759: IFTRUE 31763
31761: GO 31774
31763: POP
// bc_type := b_factory ; 16 :
31764: LD_ADDR_OWVAR 42
31768: PUSH
31769: LD_INT 3
31771: ST_TO_ADDR
31772: GO 32153
31774: LD_INT 16
31776: DOUBLE
31777: EQUAL
31778: IFTRUE 31782
31780: GO 31793
31782: POP
// bc_type := b_ext_gun ; 17 :
31783: LD_ADDR_OWVAR 42
31787: PUSH
31788: LD_INT 17
31790: ST_TO_ADDR
31791: GO 32153
31793: LD_INT 17
31795: DOUBLE
31796: EQUAL
31797: IFTRUE 31801
31799: GO 31829
31801: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31802: LD_ADDR_OWVAR 42
31806: PUSH
31807: LD_INT 19
31809: PUSH
31810: LD_INT 23
31812: PUSH
31813: LD_INT 19
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: LIST
31820: PUSH
31821: LD_VAR 0 1
31825: ARRAY
31826: ST_TO_ADDR
31827: GO 32153
31829: LD_INT 18
31831: DOUBLE
31832: EQUAL
31833: IFTRUE 31837
31835: GO 31848
31837: POP
// bc_type := b_ext_radar ; 19 :
31838: LD_ADDR_OWVAR 42
31842: PUSH
31843: LD_INT 20
31845: ST_TO_ADDR
31846: GO 32153
31848: LD_INT 19
31850: DOUBLE
31851: EQUAL
31852: IFTRUE 31856
31854: GO 31867
31856: POP
// bc_type := b_ext_radio ; 20 :
31857: LD_ADDR_OWVAR 42
31861: PUSH
31862: LD_INT 22
31864: ST_TO_ADDR
31865: GO 32153
31867: LD_INT 20
31869: DOUBLE
31870: EQUAL
31871: IFTRUE 31875
31873: GO 31886
31875: POP
// bc_type := b_ext_siberium ; 21 :
31876: LD_ADDR_OWVAR 42
31880: PUSH
31881: LD_INT 21
31883: ST_TO_ADDR
31884: GO 32153
31886: LD_INT 21
31888: DOUBLE
31889: EQUAL
31890: IFTRUE 31894
31892: GO 31905
31894: POP
// bc_type := b_ext_computer ; 22 :
31895: LD_ADDR_OWVAR 42
31899: PUSH
31900: LD_INT 24
31902: ST_TO_ADDR
31903: GO 32153
31905: LD_INT 22
31907: DOUBLE
31908: EQUAL
31909: IFTRUE 31913
31911: GO 31924
31913: POP
// bc_type := b_ext_track ; 23 :
31914: LD_ADDR_OWVAR 42
31918: PUSH
31919: LD_INT 16
31921: ST_TO_ADDR
31922: GO 32153
31924: LD_INT 23
31926: DOUBLE
31927: EQUAL
31928: IFTRUE 31932
31930: GO 31943
31932: POP
// bc_type := b_ext_laser ; 24 :
31933: LD_ADDR_OWVAR 42
31937: PUSH
31938: LD_INT 25
31940: ST_TO_ADDR
31941: GO 32153
31943: LD_INT 24
31945: DOUBLE
31946: EQUAL
31947: IFTRUE 31951
31949: GO 31962
31951: POP
// bc_type := b_control_tower ; 25 :
31952: LD_ADDR_OWVAR 42
31956: PUSH
31957: LD_INT 36
31959: ST_TO_ADDR
31960: GO 32153
31962: LD_INT 25
31964: DOUBLE
31965: EQUAL
31966: IFTRUE 31970
31968: GO 31981
31970: POP
// bc_type := b_breastwork ; 26 :
31971: LD_ADDR_OWVAR 42
31975: PUSH
31976: LD_INT 31
31978: ST_TO_ADDR
31979: GO 32153
31981: LD_INT 26
31983: DOUBLE
31984: EQUAL
31985: IFTRUE 31989
31987: GO 32000
31989: POP
// bc_type := b_bunker ; 27 :
31990: LD_ADDR_OWVAR 42
31994: PUSH
31995: LD_INT 32
31997: ST_TO_ADDR
31998: GO 32153
32000: LD_INT 27
32002: DOUBLE
32003: EQUAL
32004: IFTRUE 32008
32006: GO 32019
32008: POP
// bc_type := b_turret ; 28 :
32009: LD_ADDR_OWVAR 42
32013: PUSH
32014: LD_INT 33
32016: ST_TO_ADDR
32017: GO 32153
32019: LD_INT 28
32021: DOUBLE
32022: EQUAL
32023: IFTRUE 32027
32025: GO 32038
32027: POP
// bc_type := b_armoury ; 29 :
32028: LD_ADDR_OWVAR 42
32032: PUSH
32033: LD_INT 4
32035: ST_TO_ADDR
32036: GO 32153
32038: LD_INT 29
32040: DOUBLE
32041: EQUAL
32042: IFTRUE 32046
32044: GO 32057
32046: POP
// bc_type := b_barracks ; 30 :
32047: LD_ADDR_OWVAR 42
32051: PUSH
32052: LD_INT 5
32054: ST_TO_ADDR
32055: GO 32153
32057: LD_INT 30
32059: DOUBLE
32060: EQUAL
32061: IFTRUE 32065
32063: GO 32076
32065: POP
// bc_type := b_solar_power ; 31 :
32066: LD_ADDR_OWVAR 42
32070: PUSH
32071: LD_INT 27
32073: ST_TO_ADDR
32074: GO 32153
32076: LD_INT 31
32078: DOUBLE
32079: EQUAL
32080: IFTRUE 32084
32082: GO 32095
32084: POP
// bc_type := b_oil_power ; 32 :
32085: LD_ADDR_OWVAR 42
32089: PUSH
32090: LD_INT 26
32092: ST_TO_ADDR
32093: GO 32153
32095: LD_INT 32
32097: DOUBLE
32098: EQUAL
32099: IFTRUE 32103
32101: GO 32114
32103: POP
// bc_type := b_siberite_power ; 33 :
32104: LD_ADDR_OWVAR 42
32108: PUSH
32109: LD_INT 28
32111: ST_TO_ADDR
32112: GO 32153
32114: LD_INT 33
32116: DOUBLE
32117: EQUAL
32118: IFTRUE 32122
32120: GO 32133
32122: POP
// bc_type := b_oil_mine ; 34 :
32123: LD_ADDR_OWVAR 42
32127: PUSH
32128: LD_INT 29
32130: ST_TO_ADDR
32131: GO 32153
32133: LD_INT 34
32135: DOUBLE
32136: EQUAL
32137: IFTRUE 32141
32139: GO 32152
32141: POP
// bc_type := b_siberite_mine ; end ;
32142: LD_ADDR_OWVAR 42
32146: PUSH
32147: LD_INT 30
32149: ST_TO_ADDR
32150: GO 32153
32152: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32153: LD_ADDR_VAR 0 8
32157: PUSH
32158: LD_VAR 0 5
32162: PPUSH
32163: LD_VAR 0 6
32167: PPUSH
32168: LD_VAR 0 3
32172: PPUSH
32173: CALL_OW 47
32177: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32178: LD_OWVAR 42
32182: PUSH
32183: LD_INT 32
32185: PUSH
32186: LD_INT 33
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: IN
32193: IFFALSE 32209
// PlaceWeaponTurret ( b , weapon ) ;
32195: LD_VAR 0 8
32199: PPUSH
32200: LD_VAR 0 4
32204: PPUSH
32205: CALL_OW 431
// end ;
32209: LD_VAR 0 7
32213: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32214: LD_INT 0
32216: PPUSH
32217: PPUSH
32218: PPUSH
32219: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32220: LD_ADDR_VAR 0 4
32224: PUSH
32225: LD_INT 22
32227: PUSH
32228: LD_OWVAR 2
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PUSH
32237: LD_INT 2
32239: PUSH
32240: LD_INT 30
32242: PUSH
32243: LD_INT 0
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 30
32252: PUSH
32253: LD_INT 1
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: LIST
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PPUSH
32269: CALL_OW 69
32273: ST_TO_ADDR
// if not tmp then
32274: LD_VAR 0 4
32278: NOT
32279: IFFALSE 32283
// exit ;
32281: GO 32342
// for i in tmp do
32283: LD_ADDR_VAR 0 2
32287: PUSH
32288: LD_VAR 0 4
32292: PUSH
32293: FOR_IN
32294: IFFALSE 32340
// for j = 1 to 3 do
32296: LD_ADDR_VAR 0 3
32300: PUSH
32301: DOUBLE
32302: LD_INT 1
32304: DEC
32305: ST_TO_ADDR
32306: LD_INT 3
32308: PUSH
32309: FOR_TO
32310: IFFALSE 32336
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32312: LD_VAR 0 2
32316: PPUSH
32317: CALL_OW 274
32321: PPUSH
32322: LD_VAR 0 3
32326: PPUSH
32327: LD_INT 99999
32329: PPUSH
32330: CALL_OW 277
32334: GO 32309
32336: POP
32337: POP
32338: GO 32293
32340: POP
32341: POP
// end ;
32342: LD_VAR 0 1
32346: RET
// export function hHackSetLevel10 ; var i , j ; begin
32347: LD_INT 0
32349: PPUSH
32350: PPUSH
32351: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32352: LD_ADDR_VAR 0 2
32356: PUSH
32357: LD_INT 21
32359: PUSH
32360: LD_INT 1
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PPUSH
32367: CALL_OW 69
32371: PUSH
32372: FOR_IN
32373: IFFALSE 32425
// if IsSelected ( i ) then
32375: LD_VAR 0 2
32379: PPUSH
32380: CALL_OW 306
32384: IFFALSE 32423
// begin for j := 1 to 4 do
32386: LD_ADDR_VAR 0 3
32390: PUSH
32391: DOUBLE
32392: LD_INT 1
32394: DEC
32395: ST_TO_ADDR
32396: LD_INT 4
32398: PUSH
32399: FOR_TO
32400: IFFALSE 32421
// SetSkill ( i , j , 10 ) ;
32402: LD_VAR 0 2
32406: PPUSH
32407: LD_VAR 0 3
32411: PPUSH
32412: LD_INT 10
32414: PPUSH
32415: CALL_OW 237
32419: GO 32399
32421: POP
32422: POP
// end ;
32423: GO 32372
32425: POP
32426: POP
// end ;
32427: LD_VAR 0 1
32431: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32432: LD_INT 0
32434: PPUSH
32435: PPUSH
32436: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32437: LD_ADDR_VAR 0 2
32441: PUSH
32442: LD_INT 22
32444: PUSH
32445: LD_OWVAR 2
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PUSH
32454: LD_INT 21
32456: PUSH
32457: LD_INT 1
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PPUSH
32468: CALL_OW 69
32472: PUSH
32473: FOR_IN
32474: IFFALSE 32515
// begin for j := 1 to 4 do
32476: LD_ADDR_VAR 0 3
32480: PUSH
32481: DOUBLE
32482: LD_INT 1
32484: DEC
32485: ST_TO_ADDR
32486: LD_INT 4
32488: PUSH
32489: FOR_TO
32490: IFFALSE 32511
// SetSkill ( i , j , 10 ) ;
32492: LD_VAR 0 2
32496: PPUSH
32497: LD_VAR 0 3
32501: PPUSH
32502: LD_INT 10
32504: PPUSH
32505: CALL_OW 237
32509: GO 32489
32511: POP
32512: POP
// end ;
32513: GO 32473
32515: POP
32516: POP
// end ;
32517: LD_VAR 0 1
32521: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32522: LD_INT 0
32524: PPUSH
// uc_side := your_side ;
32525: LD_ADDR_OWVAR 20
32529: PUSH
32530: LD_OWVAR 2
32534: ST_TO_ADDR
// uc_nation := nation ;
32535: LD_ADDR_OWVAR 21
32539: PUSH
32540: LD_VAR 0 1
32544: ST_TO_ADDR
// InitHc ;
32545: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32549: LD_INT 0
32551: PPUSH
32552: LD_VAR 0 2
32556: PPUSH
32557: LD_VAR 0 3
32561: PPUSH
32562: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32566: LD_VAR 0 4
32570: PPUSH
32571: LD_VAR 0 5
32575: PPUSH
32576: CALL_OW 428
32580: PUSH
32581: LD_INT 0
32583: EQUAL
32584: IFFALSE 32608
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32586: CALL_OW 44
32590: PPUSH
32591: LD_VAR 0 4
32595: PPUSH
32596: LD_VAR 0 5
32600: PPUSH
32601: LD_INT 1
32603: PPUSH
32604: CALL_OW 48
// end ;
32608: LD_VAR 0 6
32612: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32613: LD_INT 0
32615: PPUSH
32616: PPUSH
// uc_side := your_side ;
32617: LD_ADDR_OWVAR 20
32621: PUSH
32622: LD_OWVAR 2
32626: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32627: LD_VAR 0 1
32631: PUSH
32632: LD_INT 1
32634: PUSH
32635: LD_INT 2
32637: PUSH
32638: LD_INT 3
32640: PUSH
32641: LD_INT 4
32643: PUSH
32644: LD_INT 5
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: IN
32654: IFFALSE 32666
// uc_nation := nation_american else
32656: LD_ADDR_OWVAR 21
32660: PUSH
32661: LD_INT 1
32663: ST_TO_ADDR
32664: GO 32709
// if chassis in [ 11 , 12 , 13 , 14 ] then
32666: LD_VAR 0 1
32670: PUSH
32671: LD_INT 11
32673: PUSH
32674: LD_INT 12
32676: PUSH
32677: LD_INT 13
32679: PUSH
32680: LD_INT 14
32682: PUSH
32683: EMPTY
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: IN
32689: IFFALSE 32701
// uc_nation := nation_arabian else
32691: LD_ADDR_OWVAR 21
32695: PUSH
32696: LD_INT 2
32698: ST_TO_ADDR
32699: GO 32709
// uc_nation := nation_russian ;
32701: LD_ADDR_OWVAR 21
32705: PUSH
32706: LD_INT 3
32708: ST_TO_ADDR
// vc_chassis := chassis ;
32709: LD_ADDR_OWVAR 37
32713: PUSH
32714: LD_VAR 0 1
32718: ST_TO_ADDR
// vc_engine := engine ;
32719: LD_ADDR_OWVAR 39
32723: PUSH
32724: LD_VAR 0 2
32728: ST_TO_ADDR
// vc_control := control ;
32729: LD_ADDR_OWVAR 38
32733: PUSH
32734: LD_VAR 0 3
32738: ST_TO_ADDR
// vc_weapon := weapon ;
32739: LD_ADDR_OWVAR 40
32743: PUSH
32744: LD_VAR 0 4
32748: ST_TO_ADDR
// un := CreateVehicle ;
32749: LD_ADDR_VAR 0 8
32753: PUSH
32754: CALL_OW 45
32758: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32759: LD_VAR 0 8
32763: PPUSH
32764: LD_INT 0
32766: PPUSH
32767: LD_INT 5
32769: PPUSH
32770: CALL_OW 12
32774: PPUSH
32775: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32779: LD_VAR 0 8
32783: PPUSH
32784: LD_VAR 0 5
32788: PPUSH
32789: LD_VAR 0 6
32793: PPUSH
32794: LD_INT 1
32796: PPUSH
32797: CALL_OW 48
// end ;
32801: LD_VAR 0 7
32805: RET
// export hInvincible ; every 1 do
32806: GO 32808
32808: DISABLE
// hInvincible := [ ] ;
32809: LD_ADDR_EXP 101
32813: PUSH
32814: EMPTY
32815: ST_TO_ADDR
32816: END
// every 10 do var i ;
32817: GO 32819
32819: DISABLE
32820: LD_INT 0
32822: PPUSH
// begin enable ;
32823: ENABLE
// if not hInvincible then
32824: LD_EXP 101
32828: NOT
32829: IFFALSE 32833
// exit ;
32831: GO 32877
// for i in hInvincible do
32833: LD_ADDR_VAR 0 1
32837: PUSH
32838: LD_EXP 101
32842: PUSH
32843: FOR_IN
32844: IFFALSE 32875
// if GetLives ( i ) < 1000 then
32846: LD_VAR 0 1
32850: PPUSH
32851: CALL_OW 256
32855: PUSH
32856: LD_INT 1000
32858: LESS
32859: IFFALSE 32873
// SetLives ( i , 1000 ) ;
32861: LD_VAR 0 1
32865: PPUSH
32866: LD_INT 1000
32868: PPUSH
32869: CALL_OW 234
32873: GO 32843
32875: POP
32876: POP
// end ;
32877: PPOPN 1
32879: END
// export function hHackInvincible ; var i ; begin
32880: LD_INT 0
32882: PPUSH
32883: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32884: LD_ADDR_VAR 0 2
32888: PUSH
32889: LD_INT 2
32891: PUSH
32892: LD_INT 21
32894: PUSH
32895: LD_INT 1
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: LD_INT 21
32904: PUSH
32905: LD_INT 2
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: LIST
32916: PPUSH
32917: CALL_OW 69
32921: PUSH
32922: FOR_IN
32923: IFFALSE 32984
// if IsSelected ( i ) then
32925: LD_VAR 0 2
32929: PPUSH
32930: CALL_OW 306
32934: IFFALSE 32982
// begin if i in hInvincible then
32936: LD_VAR 0 2
32940: PUSH
32941: LD_EXP 101
32945: IN
32946: IFFALSE 32966
// hInvincible := hInvincible diff i else
32948: LD_ADDR_EXP 101
32952: PUSH
32953: LD_EXP 101
32957: PUSH
32958: LD_VAR 0 2
32962: DIFF
32963: ST_TO_ADDR
32964: GO 32982
// hInvincible := hInvincible union i ;
32966: LD_ADDR_EXP 101
32970: PUSH
32971: LD_EXP 101
32975: PUSH
32976: LD_VAR 0 2
32980: UNION
32981: ST_TO_ADDR
// end ;
32982: GO 32922
32984: POP
32985: POP
// end ;
32986: LD_VAR 0 1
32990: RET
// export function hHackInvisible ; var i , j ; begin
32991: LD_INT 0
32993: PPUSH
32994: PPUSH
32995: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32996: LD_ADDR_VAR 0 2
33000: PUSH
33001: LD_INT 21
33003: PUSH
33004: LD_INT 1
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PPUSH
33011: CALL_OW 69
33015: PUSH
33016: FOR_IN
33017: IFFALSE 33041
// if IsSelected ( i ) then
33019: LD_VAR 0 2
33023: PPUSH
33024: CALL_OW 306
33028: IFFALSE 33039
// ComForceInvisible ( i ) ;
33030: LD_VAR 0 2
33034: PPUSH
33035: CALL_OW 496
33039: GO 33016
33041: POP
33042: POP
// end ;
33043: LD_VAR 0 1
33047: RET
// export function hHackChangeYourSide ; begin
33048: LD_INT 0
33050: PPUSH
// if your_side = 8 then
33051: LD_OWVAR 2
33055: PUSH
33056: LD_INT 8
33058: EQUAL
33059: IFFALSE 33071
// your_side := 0 else
33061: LD_ADDR_OWVAR 2
33065: PUSH
33066: LD_INT 0
33068: ST_TO_ADDR
33069: GO 33085
// your_side := your_side + 1 ;
33071: LD_ADDR_OWVAR 2
33075: PUSH
33076: LD_OWVAR 2
33080: PUSH
33081: LD_INT 1
33083: PLUS
33084: ST_TO_ADDR
// end ;
33085: LD_VAR 0 1
33089: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33090: LD_INT 0
33092: PPUSH
33093: PPUSH
33094: PPUSH
// for i in all_units do
33095: LD_ADDR_VAR 0 2
33099: PUSH
33100: LD_OWVAR 3
33104: PUSH
33105: FOR_IN
33106: IFFALSE 33184
// if IsSelected ( i ) then
33108: LD_VAR 0 2
33112: PPUSH
33113: CALL_OW 306
33117: IFFALSE 33182
// begin j := GetSide ( i ) ;
33119: LD_ADDR_VAR 0 3
33123: PUSH
33124: LD_VAR 0 2
33128: PPUSH
33129: CALL_OW 255
33133: ST_TO_ADDR
// if j = 8 then
33134: LD_VAR 0 3
33138: PUSH
33139: LD_INT 8
33141: EQUAL
33142: IFFALSE 33154
// j := 0 else
33144: LD_ADDR_VAR 0 3
33148: PUSH
33149: LD_INT 0
33151: ST_TO_ADDR
33152: GO 33168
// j := j + 1 ;
33154: LD_ADDR_VAR 0 3
33158: PUSH
33159: LD_VAR 0 3
33163: PUSH
33164: LD_INT 1
33166: PLUS
33167: ST_TO_ADDR
// SetSide ( i , j ) ;
33168: LD_VAR 0 2
33172: PPUSH
33173: LD_VAR 0 3
33177: PPUSH
33178: CALL_OW 235
// end ;
33182: GO 33105
33184: POP
33185: POP
// end ;
33186: LD_VAR 0 1
33190: RET
// export function hHackFog ; begin
33191: LD_INT 0
33193: PPUSH
// FogOff ( true ) ;
33194: LD_INT 1
33196: PPUSH
33197: CALL_OW 344
// end ;
33201: LD_VAR 0 1
33205: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33206: LD_INT 0
33208: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33209: LD_VAR 0 1
33213: PPUSH
33214: LD_VAR 0 2
33218: PPUSH
33219: LD_VAR 0 3
33223: PPUSH
33224: LD_INT 1
33226: PPUSH
33227: LD_INT 1
33229: PPUSH
33230: CALL_OW 483
// CenterOnXY ( x , y ) ;
33234: LD_VAR 0 2
33238: PPUSH
33239: LD_VAR 0 3
33243: PPUSH
33244: CALL_OW 84
// end ;
33248: LD_VAR 0 4
33252: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33253: LD_INT 0
33255: PPUSH
33256: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33257: LD_VAR 0 1
33261: NOT
33262: PUSH
33263: LD_VAR 0 2
33267: PPUSH
33268: LD_VAR 0 3
33272: PPUSH
33273: CALL_OW 488
33277: NOT
33278: OR
33279: PUSH
33280: LD_VAR 0 1
33284: PPUSH
33285: CALL_OW 266
33289: PUSH
33290: LD_INT 3
33292: NONEQUAL
33293: PUSH
33294: LD_VAR 0 1
33298: PPUSH
33299: CALL_OW 247
33303: PUSH
33304: LD_INT 1
33306: EQUAL
33307: NOT
33308: AND
33309: OR
33310: IFFALSE 33314
// exit ;
33312: GO 33463
// if GetType ( factory ) = unit_human then
33314: LD_VAR 0 1
33318: PPUSH
33319: CALL_OW 247
33323: PUSH
33324: LD_INT 1
33326: EQUAL
33327: IFFALSE 33344
// factory := IsInUnit ( factory ) ;
33329: LD_ADDR_VAR 0 1
33333: PUSH
33334: LD_VAR 0 1
33338: PPUSH
33339: CALL_OW 310
33343: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33344: LD_VAR 0 1
33348: PPUSH
33349: CALL_OW 266
33353: PUSH
33354: LD_INT 3
33356: NONEQUAL
33357: IFFALSE 33361
// exit ;
33359: GO 33463
// if HexInfo ( x , y ) = factory then
33361: LD_VAR 0 2
33365: PPUSH
33366: LD_VAR 0 3
33370: PPUSH
33371: CALL_OW 428
33375: PUSH
33376: LD_VAR 0 1
33380: EQUAL
33381: IFFALSE 33408
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33383: LD_ADDR_EXP 102
33387: PUSH
33388: LD_EXP 102
33392: PPUSH
33393: LD_VAR 0 1
33397: PPUSH
33398: LD_INT 0
33400: PPUSH
33401: CALL_OW 1
33405: ST_TO_ADDR
33406: GO 33459
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33408: LD_ADDR_EXP 102
33412: PUSH
33413: LD_EXP 102
33417: PPUSH
33418: LD_VAR 0 1
33422: PPUSH
33423: LD_VAR 0 1
33427: PPUSH
33428: CALL_OW 255
33432: PUSH
33433: LD_VAR 0 1
33437: PUSH
33438: LD_VAR 0 2
33442: PUSH
33443: LD_VAR 0 3
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: PPUSH
33454: CALL_OW 1
33458: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33459: CALL 33468 0 0
// end ;
33463: LD_VAR 0 4
33467: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33468: LD_INT 0
33470: PPUSH
33471: PPUSH
33472: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33473: LD_STRING resetFactoryWaypoint();
33475: PPUSH
33476: CALL_OW 559
// if factoryWaypoints then
33480: LD_EXP 102
33484: IFFALSE 33610
// begin list := PrepareArray ( factoryWaypoints ) ;
33486: LD_ADDR_VAR 0 3
33490: PUSH
33491: LD_EXP 102
33495: PPUSH
33496: CALL 80907 0 1
33500: ST_TO_ADDR
// for i := 1 to list do
33501: LD_ADDR_VAR 0 2
33505: PUSH
33506: DOUBLE
33507: LD_INT 1
33509: DEC
33510: ST_TO_ADDR
33511: LD_VAR 0 3
33515: PUSH
33516: FOR_TO
33517: IFFALSE 33608
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33519: LD_STRING setFactoryWaypointXY(
33521: PUSH
33522: LD_VAR 0 3
33526: PUSH
33527: LD_VAR 0 2
33531: ARRAY
33532: PUSH
33533: LD_INT 1
33535: ARRAY
33536: STR
33537: PUSH
33538: LD_STRING ,
33540: STR
33541: PUSH
33542: LD_VAR 0 3
33546: PUSH
33547: LD_VAR 0 2
33551: ARRAY
33552: PUSH
33553: LD_INT 2
33555: ARRAY
33556: STR
33557: PUSH
33558: LD_STRING ,
33560: STR
33561: PUSH
33562: LD_VAR 0 3
33566: PUSH
33567: LD_VAR 0 2
33571: ARRAY
33572: PUSH
33573: LD_INT 3
33575: ARRAY
33576: STR
33577: PUSH
33578: LD_STRING ,
33580: STR
33581: PUSH
33582: LD_VAR 0 3
33586: PUSH
33587: LD_VAR 0 2
33591: ARRAY
33592: PUSH
33593: LD_INT 4
33595: ARRAY
33596: STR
33597: PUSH
33598: LD_STRING )
33600: STR
33601: PPUSH
33602: CALL_OW 559
33606: GO 33516
33608: POP
33609: POP
// end ; end ;
33610: LD_VAR 0 1
33614: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33615: LD_INT 0
33617: PPUSH
// if HexInfo ( x , y ) = warehouse then
33618: LD_VAR 0 2
33622: PPUSH
33623: LD_VAR 0 3
33627: PPUSH
33628: CALL_OW 428
33632: PUSH
33633: LD_VAR 0 1
33637: EQUAL
33638: IFFALSE 33665
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33640: LD_ADDR_EXP 103
33644: PUSH
33645: LD_EXP 103
33649: PPUSH
33650: LD_VAR 0 1
33654: PPUSH
33655: LD_INT 0
33657: PPUSH
33658: CALL_OW 1
33662: ST_TO_ADDR
33663: GO 33716
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33665: LD_ADDR_EXP 103
33669: PUSH
33670: LD_EXP 103
33674: PPUSH
33675: LD_VAR 0 1
33679: PPUSH
33680: LD_VAR 0 1
33684: PPUSH
33685: CALL_OW 255
33689: PUSH
33690: LD_VAR 0 1
33694: PUSH
33695: LD_VAR 0 2
33699: PUSH
33700: LD_VAR 0 3
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: PPUSH
33711: CALL_OW 1
33715: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
33716: CALL 33725 0 0
// end ;
33720: LD_VAR 0 4
33724: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
33725: LD_INT 0
33727: PPUSH
33728: PPUSH
33729: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
33730: LD_STRING resetWarehouseGatheringPoints();
33732: PPUSH
33733: CALL_OW 559
// if warehouseGatheringPoints then
33737: LD_EXP 103
33741: IFFALSE 33867
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
33743: LD_ADDR_VAR 0 3
33747: PUSH
33748: LD_EXP 103
33752: PPUSH
33753: CALL 80907 0 1
33757: ST_TO_ADDR
// for i := 1 to list do
33758: LD_ADDR_VAR 0 2
33762: PUSH
33763: DOUBLE
33764: LD_INT 1
33766: DEC
33767: ST_TO_ADDR
33768: LD_VAR 0 3
33772: PUSH
33773: FOR_TO
33774: IFFALSE 33865
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33776: LD_STRING setWarehouseGatheringPointXY(
33778: PUSH
33779: LD_VAR 0 3
33783: PUSH
33784: LD_VAR 0 2
33788: ARRAY
33789: PUSH
33790: LD_INT 1
33792: ARRAY
33793: STR
33794: PUSH
33795: LD_STRING ,
33797: STR
33798: PUSH
33799: LD_VAR 0 3
33803: PUSH
33804: LD_VAR 0 2
33808: ARRAY
33809: PUSH
33810: LD_INT 2
33812: ARRAY
33813: STR
33814: PUSH
33815: LD_STRING ,
33817: STR
33818: PUSH
33819: LD_VAR 0 3
33823: PUSH
33824: LD_VAR 0 2
33828: ARRAY
33829: PUSH
33830: LD_INT 3
33832: ARRAY
33833: STR
33834: PUSH
33835: LD_STRING ,
33837: STR
33838: PUSH
33839: LD_VAR 0 3
33843: PUSH
33844: LD_VAR 0 2
33848: ARRAY
33849: PUSH
33850: LD_INT 4
33852: ARRAY
33853: STR
33854: PUSH
33855: LD_STRING )
33857: STR
33858: PPUSH
33859: CALL_OW 559
33863: GO 33773
33865: POP
33866: POP
// end ; end ;
33867: LD_VAR 0 1
33871: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
33872: LD_EXP 103
33876: IFFALSE 34561
33878: GO 33880
33880: DISABLE
33881: LD_INT 0
33883: PPUSH
33884: PPUSH
33885: PPUSH
33886: PPUSH
33887: PPUSH
33888: PPUSH
33889: PPUSH
33890: PPUSH
33891: PPUSH
// begin enable ;
33892: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
33893: LD_ADDR_VAR 0 3
33897: PUSH
33898: LD_EXP 103
33902: PPUSH
33903: CALL 80907 0 1
33907: ST_TO_ADDR
// if not list then
33908: LD_VAR 0 3
33912: NOT
33913: IFFALSE 33917
// exit ;
33915: GO 34561
// for i := 1 to list do
33917: LD_ADDR_VAR 0 1
33921: PUSH
33922: DOUBLE
33923: LD_INT 1
33925: DEC
33926: ST_TO_ADDR
33927: LD_VAR 0 3
33931: PUSH
33932: FOR_TO
33933: IFFALSE 34559
// begin depot := list [ i ] [ 2 ] ;
33935: LD_ADDR_VAR 0 8
33939: PUSH
33940: LD_VAR 0 3
33944: PUSH
33945: LD_VAR 0 1
33949: ARRAY
33950: PUSH
33951: LD_INT 2
33953: ARRAY
33954: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
33955: LD_ADDR_VAR 0 5
33959: PUSH
33960: LD_VAR 0 3
33964: PUSH
33965: LD_VAR 0 1
33969: ARRAY
33970: PUSH
33971: LD_INT 1
33973: ARRAY
33974: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
33975: LD_VAR 0 8
33979: PPUSH
33980: CALL_OW 301
33984: PUSH
33985: LD_VAR 0 5
33989: PUSH
33990: LD_VAR 0 8
33994: PPUSH
33995: CALL_OW 255
33999: NONEQUAL
34000: OR
34001: IFFALSE 34030
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34003: LD_ADDR_EXP 103
34007: PUSH
34008: LD_EXP 103
34012: PPUSH
34013: LD_VAR 0 8
34017: PPUSH
34018: LD_INT 0
34020: PPUSH
34021: CALL_OW 1
34025: ST_TO_ADDR
// exit ;
34026: POP
34027: POP
34028: GO 34561
// end ; x := list [ i ] [ 3 ] ;
34030: LD_ADDR_VAR 0 6
34034: PUSH
34035: LD_VAR 0 3
34039: PUSH
34040: LD_VAR 0 1
34044: ARRAY
34045: PUSH
34046: LD_INT 3
34048: ARRAY
34049: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34050: LD_ADDR_VAR 0 7
34054: PUSH
34055: LD_VAR 0 3
34059: PUSH
34060: LD_VAR 0 1
34064: ARRAY
34065: PUSH
34066: LD_INT 4
34068: ARRAY
34069: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34070: LD_ADDR_VAR 0 9
34074: PUSH
34075: LD_VAR 0 6
34079: PPUSH
34080: LD_VAR 0 7
34084: PPUSH
34085: LD_INT 16
34087: PPUSH
34088: CALL 79495 0 3
34092: ST_TO_ADDR
// if not cratesNearbyPoint then
34093: LD_VAR 0 9
34097: NOT
34098: IFFALSE 34104
// exit ;
34100: POP
34101: POP
34102: GO 34561
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34104: LD_ADDR_VAR 0 4
34108: PUSH
34109: LD_INT 22
34111: PUSH
34112: LD_VAR 0 5
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: PUSH
34121: LD_INT 3
34123: PUSH
34124: LD_INT 60
34126: PUSH
34127: EMPTY
34128: LIST
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 91
34136: PUSH
34137: LD_VAR 0 8
34141: PUSH
34142: LD_INT 6
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 2
34152: PUSH
34153: LD_INT 25
34155: PUSH
34156: LD_INT 2
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 25
34165: PUSH
34166: LD_INT 16
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: LIST
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: PPUSH
34184: CALL_OW 69
34188: PUSH
34189: LD_VAR 0 8
34193: PPUSH
34194: CALL_OW 313
34198: PPUSH
34199: LD_INT 3
34201: PUSH
34202: LD_INT 60
34204: PUSH
34205: EMPTY
34206: LIST
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 2
34214: PUSH
34215: LD_INT 25
34217: PUSH
34218: LD_INT 2
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PUSH
34225: LD_INT 25
34227: PUSH
34228: LD_INT 16
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: LIST
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PPUSH
34244: CALL_OW 72
34248: UNION
34249: ST_TO_ADDR
// if tmp then
34250: LD_VAR 0 4
34254: IFFALSE 34334
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34256: LD_ADDR_VAR 0 4
34260: PUSH
34261: LD_VAR 0 4
34265: PPUSH
34266: LD_INT 3
34268: PPUSH
34269: CALL 77464 0 2
34273: ST_TO_ADDR
// for j in tmp do
34274: LD_ADDR_VAR 0 2
34278: PUSH
34279: LD_VAR 0 4
34283: PUSH
34284: FOR_IN
34285: IFFALSE 34328
// begin if IsInUnit ( j ) then
34287: LD_VAR 0 2
34291: PPUSH
34292: CALL_OW 310
34296: IFFALSE 34307
// ComExit ( j ) ;
34298: LD_VAR 0 2
34302: PPUSH
34303: CALL 77547 0 1
// AddComCollect ( j , x , y ) ;
34307: LD_VAR 0 2
34311: PPUSH
34312: LD_VAR 0 6
34316: PPUSH
34317: LD_VAR 0 7
34321: PPUSH
34322: CALL_OW 177
// end ;
34326: GO 34284
34328: POP
34329: POP
// exit ;
34330: POP
34331: POP
34332: GO 34561
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34334: LD_ADDR_VAR 0 4
34338: PUSH
34339: LD_INT 22
34341: PUSH
34342: LD_VAR 0 5
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: PUSH
34351: LD_INT 91
34353: PUSH
34354: LD_VAR 0 8
34358: PUSH
34359: LD_INT 8
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: LIST
34366: PUSH
34367: LD_INT 2
34369: PUSH
34370: LD_INT 34
34372: PUSH
34373: LD_INT 12
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 34
34382: PUSH
34383: LD_INT 51
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 34
34392: PUSH
34393: LD_INT 32
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 34
34402: PUSH
34403: LD_INT 89
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: LIST
34421: PPUSH
34422: CALL_OW 69
34426: ST_TO_ADDR
// if tmp then
34427: LD_VAR 0 4
34431: IFFALSE 34557
// begin for j in tmp do
34433: LD_ADDR_VAR 0 2
34437: PUSH
34438: LD_VAR 0 4
34442: PUSH
34443: FOR_IN
34444: IFFALSE 34555
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34446: LD_VAR 0 2
34450: PPUSH
34451: CALL_OW 262
34455: PUSH
34456: LD_INT 3
34458: EQUAL
34459: PUSH
34460: LD_VAR 0 2
34464: PPUSH
34465: CALL_OW 261
34469: PUSH
34470: LD_INT 20
34472: GREATER
34473: OR
34474: PUSH
34475: LD_VAR 0 2
34479: PPUSH
34480: CALL_OW 314
34484: NOT
34485: AND
34486: PUSH
34487: LD_VAR 0 2
34491: PPUSH
34492: CALL_OW 263
34496: PUSH
34497: LD_INT 1
34499: NONEQUAL
34500: PUSH
34501: LD_VAR 0 2
34505: PPUSH
34506: CALL_OW 311
34510: OR
34511: AND
34512: IFFALSE 34553
// begin ComCollect ( j , x , y ) ;
34514: LD_VAR 0 2
34518: PPUSH
34519: LD_VAR 0 6
34523: PPUSH
34524: LD_VAR 0 7
34528: PPUSH
34529: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34533: LD_VAR 0 2
34537: PPUSH
34538: LD_VAR 0 8
34542: PPUSH
34543: CALL_OW 172
// exit ;
34547: POP
34548: POP
34549: POP
34550: POP
34551: GO 34561
// end ;
34553: GO 34443
34555: POP
34556: POP
// end ; end ;
34557: GO 33932
34559: POP
34560: POP
// end ; end_of_file
34561: PPOPN 9
34563: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34564: LD_INT 0
34566: PPUSH
34567: PPUSH
34568: PPUSH
34569: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34570: LD_VAR 0 1
34574: PPUSH
34575: CALL_OW 264
34579: PUSH
34580: LD_INT 91
34582: EQUAL
34583: IFFALSE 34655
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34585: LD_INT 68
34587: PPUSH
34588: LD_VAR 0 1
34592: PPUSH
34593: CALL_OW 255
34597: PPUSH
34598: CALL_OW 321
34602: PUSH
34603: LD_INT 2
34605: EQUAL
34606: IFFALSE 34618
// eff := 70 else
34608: LD_ADDR_VAR 0 4
34612: PUSH
34613: LD_INT 70
34615: ST_TO_ADDR
34616: GO 34626
// eff := 30 ;
34618: LD_ADDR_VAR 0 4
34622: PUSH
34623: LD_INT 30
34625: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34626: LD_VAR 0 1
34630: PPUSH
34631: CALL_OW 250
34635: PPUSH
34636: LD_VAR 0 1
34640: PPUSH
34641: CALL_OW 251
34645: PPUSH
34646: LD_VAR 0 4
34650: PPUSH
34651: CALL_OW 495
// end ; end ;
34655: LD_VAR 0 2
34659: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34660: LD_INT 0
34662: PPUSH
// end ;
34663: LD_VAR 0 4
34667: RET
// export function SOS_Command ( cmd ) ; begin
34668: LD_INT 0
34670: PPUSH
// end ;
34671: LD_VAR 0 2
34675: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34676: LD_INT 0
34678: PPUSH
// end ;
34679: LD_VAR 0 6
34683: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34684: LD_INT 0
34686: PPUSH
34687: PPUSH
// if not vehicle or not factory then
34688: LD_VAR 0 1
34692: NOT
34693: PUSH
34694: LD_VAR 0 2
34698: NOT
34699: OR
34700: IFFALSE 34704
// exit ;
34702: GO 34935
// if factoryWaypoints >= factory then
34704: LD_EXP 102
34708: PUSH
34709: LD_VAR 0 2
34713: GREATEREQUAL
34714: IFFALSE 34935
// if factoryWaypoints [ factory ] then
34716: LD_EXP 102
34720: PUSH
34721: LD_VAR 0 2
34725: ARRAY
34726: IFFALSE 34935
// begin if GetControl ( vehicle ) = control_manual then
34728: LD_VAR 0 1
34732: PPUSH
34733: CALL_OW 263
34737: PUSH
34738: LD_INT 1
34740: EQUAL
34741: IFFALSE 34822
// begin driver := IsDrivenBy ( vehicle ) ;
34743: LD_ADDR_VAR 0 4
34747: PUSH
34748: LD_VAR 0 1
34752: PPUSH
34753: CALL_OW 311
34757: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34758: LD_VAR 0 4
34762: PPUSH
34763: LD_EXP 102
34767: PUSH
34768: LD_VAR 0 2
34772: ARRAY
34773: PUSH
34774: LD_INT 3
34776: ARRAY
34777: PPUSH
34778: LD_EXP 102
34782: PUSH
34783: LD_VAR 0 2
34787: ARRAY
34788: PUSH
34789: LD_INT 4
34791: ARRAY
34792: PPUSH
34793: CALL_OW 171
// AddComExitVehicle ( driver ) ;
34797: LD_VAR 0 4
34801: PPUSH
34802: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
34806: LD_VAR 0 4
34810: PPUSH
34811: LD_VAR 0 2
34815: PPUSH
34816: CALL_OW 180
// end else
34820: GO 34935
// if GetControl ( vehicle ) = control_remote then
34822: LD_VAR 0 1
34826: PPUSH
34827: CALL_OW 263
34831: PUSH
34832: LD_INT 2
34834: EQUAL
34835: IFFALSE 34896
// begin wait ( 0 0$2 ) ;
34837: LD_INT 70
34839: PPUSH
34840: CALL_OW 67
// if Connect ( vehicle ) then
34844: LD_VAR 0 1
34848: PPUSH
34849: CALL 47766 0 1
34853: IFFALSE 34894
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34855: LD_VAR 0 1
34859: PPUSH
34860: LD_EXP 102
34864: PUSH
34865: LD_VAR 0 2
34869: ARRAY
34870: PUSH
34871: LD_INT 3
34873: ARRAY
34874: PPUSH
34875: LD_EXP 102
34879: PUSH
34880: LD_VAR 0 2
34884: ARRAY
34885: PUSH
34886: LD_INT 4
34888: ARRAY
34889: PPUSH
34890: CALL_OW 171
// end else
34894: GO 34935
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34896: LD_VAR 0 1
34900: PPUSH
34901: LD_EXP 102
34905: PUSH
34906: LD_VAR 0 2
34910: ARRAY
34911: PUSH
34912: LD_INT 3
34914: ARRAY
34915: PPUSH
34916: LD_EXP 102
34920: PUSH
34921: LD_VAR 0 2
34925: ARRAY
34926: PUSH
34927: LD_INT 4
34929: ARRAY
34930: PPUSH
34931: CALL_OW 171
// end ; end ;
34935: LD_VAR 0 3
34939: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34940: LD_INT 0
34942: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34943: LD_VAR 0 1
34947: PUSH
34948: LD_INT 250
34950: EQUAL
34951: PUSH
34952: LD_VAR 0 2
34956: PPUSH
34957: CALL_OW 264
34961: PUSH
34962: LD_INT 81
34964: EQUAL
34965: AND
34966: IFFALSE 34987
// MinerPlaceMine ( unit , x , y ) ;
34968: LD_VAR 0 2
34972: PPUSH
34973: LD_VAR 0 4
34977: PPUSH
34978: LD_VAR 0 5
34982: PPUSH
34983: CALL 37977 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34987: LD_VAR 0 1
34991: PUSH
34992: LD_INT 251
34994: EQUAL
34995: PUSH
34996: LD_VAR 0 2
35000: PPUSH
35001: CALL_OW 264
35005: PUSH
35006: LD_INT 81
35008: EQUAL
35009: AND
35010: IFFALSE 35031
// MinerDetonateMine ( unit , x , y ) ;
35012: LD_VAR 0 2
35016: PPUSH
35017: LD_VAR 0 4
35021: PPUSH
35022: LD_VAR 0 5
35026: PPUSH
35027: CALL 38252 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35031: LD_VAR 0 1
35035: PUSH
35036: LD_INT 252
35038: EQUAL
35039: PUSH
35040: LD_VAR 0 2
35044: PPUSH
35045: CALL_OW 264
35049: PUSH
35050: LD_INT 81
35052: EQUAL
35053: AND
35054: IFFALSE 35075
// MinerCreateMinefield ( unit , x , y ) ;
35056: LD_VAR 0 2
35060: PPUSH
35061: LD_VAR 0 4
35065: PPUSH
35066: LD_VAR 0 5
35070: PPUSH
35071: CALL 38669 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35075: LD_VAR 0 1
35079: PUSH
35080: LD_INT 253
35082: EQUAL
35083: PUSH
35084: LD_VAR 0 2
35088: PPUSH
35089: CALL_OW 257
35093: PUSH
35094: LD_INT 5
35096: EQUAL
35097: AND
35098: IFFALSE 35119
// ComBinocular ( unit , x , y ) ;
35100: LD_VAR 0 2
35104: PPUSH
35105: LD_VAR 0 4
35109: PPUSH
35110: LD_VAR 0 5
35114: PPUSH
35115: CALL 39038 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35119: LD_VAR 0 1
35123: PUSH
35124: LD_INT 254
35126: EQUAL
35127: PUSH
35128: LD_VAR 0 2
35132: PPUSH
35133: CALL_OW 264
35137: PUSH
35138: LD_INT 99
35140: EQUAL
35141: AND
35142: PUSH
35143: LD_VAR 0 3
35147: PPUSH
35148: CALL_OW 263
35152: PUSH
35153: LD_INT 3
35155: EQUAL
35156: AND
35157: IFFALSE 35173
// HackDestroyVehicle ( unit , selectedUnit ) ;
35159: LD_VAR 0 2
35163: PPUSH
35164: LD_VAR 0 3
35168: PPUSH
35169: CALL 37341 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35173: LD_VAR 0 1
35177: PUSH
35178: LD_INT 255
35180: EQUAL
35181: PUSH
35182: LD_VAR 0 2
35186: PPUSH
35187: CALL_OW 264
35191: PUSH
35192: LD_INT 14
35194: PUSH
35195: LD_INT 53
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: IN
35202: AND
35203: PUSH
35204: LD_VAR 0 4
35208: PPUSH
35209: LD_VAR 0 5
35213: PPUSH
35214: CALL_OW 488
35218: AND
35219: IFFALSE 35243
// CutTreeXYR ( unit , x , y , 12 ) ;
35221: LD_VAR 0 2
35225: PPUSH
35226: LD_VAR 0 4
35230: PPUSH
35231: LD_VAR 0 5
35235: PPUSH
35236: LD_INT 12
35238: PPUSH
35239: CALL 35338 0 4
// if cmd = 256 then
35243: LD_VAR 0 1
35247: PUSH
35248: LD_INT 256
35250: EQUAL
35251: IFFALSE 35272
// SetFactoryWaypoint ( unit , x , y ) ;
35253: LD_VAR 0 2
35257: PPUSH
35258: LD_VAR 0 4
35262: PPUSH
35263: LD_VAR 0 5
35267: PPUSH
35268: CALL 33253 0 3
// if cmd = 257 then
35272: LD_VAR 0 1
35276: PUSH
35277: LD_INT 257
35279: EQUAL
35280: IFFALSE 35301
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35282: LD_VAR 0 2
35286: PPUSH
35287: LD_VAR 0 4
35291: PPUSH
35292: LD_VAR 0 5
35296: PPUSH
35297: CALL 33615 0 3
// if cmd = 258 then
35301: LD_VAR 0 1
35305: PUSH
35306: LD_INT 258
35308: EQUAL
35309: IFFALSE 35333
// BurnTreeXYR ( unit , x , y , 8 ) ;
35311: LD_VAR 0 2
35315: PPUSH
35316: LD_VAR 0 4
35320: PPUSH
35321: LD_VAR 0 5
35325: PPUSH
35326: LD_INT 8
35328: PPUSH
35329: CALL 35732 0 4
// end ;
35333: LD_VAR 0 6
35337: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35338: LD_INT 0
35340: PPUSH
35341: PPUSH
35342: PPUSH
35343: PPUSH
35344: PPUSH
35345: PPUSH
35346: PPUSH
35347: PPUSH
35348: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
35349: LD_VAR 0 1
35353: PPUSH
35354: CALL_OW 302
35358: NOT
35359: PUSH
35360: LD_VAR 0 2
35364: PPUSH
35365: LD_VAR 0 3
35369: PPUSH
35370: CALL_OW 488
35374: NOT
35375: OR
35376: PUSH
35377: LD_VAR 0 4
35381: NOT
35382: OR
35383: IFFALSE 35387
// exit ;
35385: GO 35727
// list := [ ] ;
35387: LD_ADDR_VAR 0 13
35391: PUSH
35392: EMPTY
35393: ST_TO_ADDR
// if x - r < 0 then
35394: LD_VAR 0 2
35398: PUSH
35399: LD_VAR 0 4
35403: MINUS
35404: PUSH
35405: LD_INT 0
35407: LESS
35408: IFFALSE 35420
// min_x := 0 else
35410: LD_ADDR_VAR 0 7
35414: PUSH
35415: LD_INT 0
35417: ST_TO_ADDR
35418: GO 35436
// min_x := x - r ;
35420: LD_ADDR_VAR 0 7
35424: PUSH
35425: LD_VAR 0 2
35429: PUSH
35430: LD_VAR 0 4
35434: MINUS
35435: ST_TO_ADDR
// if y - r < 0 then
35436: LD_VAR 0 3
35440: PUSH
35441: LD_VAR 0 4
35445: MINUS
35446: PUSH
35447: LD_INT 0
35449: LESS
35450: IFFALSE 35462
// min_y := 0 else
35452: LD_ADDR_VAR 0 8
35456: PUSH
35457: LD_INT 0
35459: ST_TO_ADDR
35460: GO 35478
// min_y := y - r ;
35462: LD_ADDR_VAR 0 8
35466: PUSH
35467: LD_VAR 0 3
35471: PUSH
35472: LD_VAR 0 4
35476: MINUS
35477: ST_TO_ADDR
// max_x := x + r ;
35478: LD_ADDR_VAR 0 9
35482: PUSH
35483: LD_VAR 0 2
35487: PUSH
35488: LD_VAR 0 4
35492: PLUS
35493: ST_TO_ADDR
// max_y := y + r ;
35494: LD_ADDR_VAR 0 10
35498: PUSH
35499: LD_VAR 0 3
35503: PUSH
35504: LD_VAR 0 4
35508: PLUS
35509: ST_TO_ADDR
// for _x = min_x to max_x do
35510: LD_ADDR_VAR 0 11
35514: PUSH
35515: DOUBLE
35516: LD_VAR 0 7
35520: DEC
35521: ST_TO_ADDR
35522: LD_VAR 0 9
35526: PUSH
35527: FOR_TO
35528: IFFALSE 35645
// for _y = min_y to max_y do
35530: LD_ADDR_VAR 0 12
35534: PUSH
35535: DOUBLE
35536: LD_VAR 0 8
35540: DEC
35541: ST_TO_ADDR
35542: LD_VAR 0 10
35546: PUSH
35547: FOR_TO
35548: IFFALSE 35641
// begin if not ValidHex ( _x , _y ) then
35550: LD_VAR 0 11
35554: PPUSH
35555: LD_VAR 0 12
35559: PPUSH
35560: CALL_OW 488
35564: NOT
35565: IFFALSE 35569
// continue ;
35567: GO 35547
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35569: LD_VAR 0 11
35573: PPUSH
35574: LD_VAR 0 12
35578: PPUSH
35579: CALL_OW 351
35583: PUSH
35584: LD_VAR 0 11
35588: PPUSH
35589: LD_VAR 0 12
35593: PPUSH
35594: CALL_OW 554
35598: AND
35599: IFFALSE 35639
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35601: LD_ADDR_VAR 0 13
35605: PUSH
35606: LD_VAR 0 13
35610: PPUSH
35611: LD_VAR 0 13
35615: PUSH
35616: LD_INT 1
35618: PLUS
35619: PPUSH
35620: LD_VAR 0 11
35624: PUSH
35625: LD_VAR 0 12
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: PPUSH
35634: CALL_OW 2
35638: ST_TO_ADDR
// end ;
35639: GO 35547
35641: POP
35642: POP
35643: GO 35527
35645: POP
35646: POP
// if not list then
35647: LD_VAR 0 13
35651: NOT
35652: IFFALSE 35656
// exit ;
35654: GO 35727
// for i in list do
35656: LD_ADDR_VAR 0 6
35660: PUSH
35661: LD_VAR 0 13
35665: PUSH
35666: FOR_IN
35667: IFFALSE 35725
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35669: LD_VAR 0 1
35673: PPUSH
35674: LD_STRING M
35676: PUSH
35677: LD_VAR 0 6
35681: PUSH
35682: LD_INT 1
35684: ARRAY
35685: PUSH
35686: LD_VAR 0 6
35690: PUSH
35691: LD_INT 2
35693: ARRAY
35694: PUSH
35695: LD_INT 0
35697: PUSH
35698: LD_INT 0
35700: PUSH
35701: LD_INT 0
35703: PUSH
35704: LD_INT 0
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: PUSH
35716: EMPTY
35717: LIST
35718: PPUSH
35719: CALL_OW 447
35723: GO 35666
35725: POP
35726: POP
// end ;
35727: LD_VAR 0 5
35731: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
35732: LD_INT 0
35734: PPUSH
35735: PPUSH
35736: PPUSH
35737: PPUSH
35738: PPUSH
35739: PPUSH
35740: PPUSH
35741: PPUSH
35742: PPUSH
35743: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
35744: LD_VAR 0 1
35748: PPUSH
35749: CALL_OW 302
35753: NOT
35754: PUSH
35755: LD_VAR 0 2
35759: PPUSH
35760: LD_VAR 0 3
35764: PPUSH
35765: CALL_OW 488
35769: NOT
35770: OR
35771: PUSH
35772: LD_VAR 0 4
35776: NOT
35777: OR
35778: IFFALSE 35782
// exit ;
35780: GO 36295
// list := [ ] ;
35782: LD_ADDR_VAR 0 13
35786: PUSH
35787: EMPTY
35788: ST_TO_ADDR
// if x - r < 0 then
35789: LD_VAR 0 2
35793: PUSH
35794: LD_VAR 0 4
35798: MINUS
35799: PUSH
35800: LD_INT 0
35802: LESS
35803: IFFALSE 35815
// min_x := 0 else
35805: LD_ADDR_VAR 0 7
35809: PUSH
35810: LD_INT 0
35812: ST_TO_ADDR
35813: GO 35831
// min_x := x - r ;
35815: LD_ADDR_VAR 0 7
35819: PUSH
35820: LD_VAR 0 2
35824: PUSH
35825: LD_VAR 0 4
35829: MINUS
35830: ST_TO_ADDR
// if y - r < 0 then
35831: LD_VAR 0 3
35835: PUSH
35836: LD_VAR 0 4
35840: MINUS
35841: PUSH
35842: LD_INT 0
35844: LESS
35845: IFFALSE 35857
// min_y := 0 else
35847: LD_ADDR_VAR 0 8
35851: PUSH
35852: LD_INT 0
35854: ST_TO_ADDR
35855: GO 35873
// min_y := y - r ;
35857: LD_ADDR_VAR 0 8
35861: PUSH
35862: LD_VAR 0 3
35866: PUSH
35867: LD_VAR 0 4
35871: MINUS
35872: ST_TO_ADDR
// max_x := x + r ;
35873: LD_ADDR_VAR 0 9
35877: PUSH
35878: LD_VAR 0 2
35882: PUSH
35883: LD_VAR 0 4
35887: PLUS
35888: ST_TO_ADDR
// max_y := y + r ;
35889: LD_ADDR_VAR 0 10
35893: PUSH
35894: LD_VAR 0 3
35898: PUSH
35899: LD_VAR 0 4
35903: PLUS
35904: ST_TO_ADDR
// for _x = min_x to max_x do
35905: LD_ADDR_VAR 0 11
35909: PUSH
35910: DOUBLE
35911: LD_VAR 0 7
35915: DEC
35916: ST_TO_ADDR
35917: LD_VAR 0 9
35921: PUSH
35922: FOR_TO
35923: IFFALSE 36040
// for _y = min_y to max_y do
35925: LD_ADDR_VAR 0 12
35929: PUSH
35930: DOUBLE
35931: LD_VAR 0 8
35935: DEC
35936: ST_TO_ADDR
35937: LD_VAR 0 10
35941: PUSH
35942: FOR_TO
35943: IFFALSE 36036
// begin if not ValidHex ( _x , _y ) then
35945: LD_VAR 0 11
35949: PPUSH
35950: LD_VAR 0 12
35954: PPUSH
35955: CALL_OW 488
35959: NOT
35960: IFFALSE 35964
// continue ;
35962: GO 35942
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35964: LD_VAR 0 11
35968: PPUSH
35969: LD_VAR 0 12
35973: PPUSH
35974: CALL_OW 351
35978: PUSH
35979: LD_VAR 0 11
35983: PPUSH
35984: LD_VAR 0 12
35988: PPUSH
35989: CALL_OW 554
35993: AND
35994: IFFALSE 36034
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35996: LD_ADDR_VAR 0 13
36000: PUSH
36001: LD_VAR 0 13
36005: PPUSH
36006: LD_VAR 0 13
36010: PUSH
36011: LD_INT 1
36013: PLUS
36014: PPUSH
36015: LD_VAR 0 11
36019: PUSH
36020: LD_VAR 0 12
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: PPUSH
36029: CALL_OW 2
36033: ST_TO_ADDR
// end ;
36034: GO 35942
36036: POP
36037: POP
36038: GO 35922
36040: POP
36041: POP
// if not list then
36042: LD_VAR 0 13
36046: NOT
36047: IFFALSE 36051
// exit ;
36049: GO 36295
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
36051: LD_ADDR_VAR 0 13
36055: PUSH
36056: LD_VAR 0 1
36060: PPUSH
36061: LD_VAR 0 13
36065: PPUSH
36066: LD_INT 1
36068: PPUSH
36069: LD_INT 1
36071: PPUSH
36072: CALL 44908 0 4
36076: ST_TO_ADDR
// ComStop ( flame ) ;
36077: LD_VAR 0 1
36081: PPUSH
36082: CALL_OW 141
// for i in list do
36086: LD_ADDR_VAR 0 6
36090: PUSH
36091: LD_VAR 0 13
36095: PUSH
36096: FOR_IN
36097: IFFALSE 36128
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
36099: LD_VAR 0 1
36103: PPUSH
36104: LD_VAR 0 6
36108: PUSH
36109: LD_INT 1
36111: ARRAY
36112: PPUSH
36113: LD_VAR 0 6
36117: PUSH
36118: LD_INT 2
36120: ARRAY
36121: PPUSH
36122: CALL_OW 176
36126: GO 36096
36128: POP
36129: POP
// repeat wait ( 0 0$1 ) ;
36130: LD_INT 35
36132: PPUSH
36133: CALL_OW 67
// task := GetTaskList ( flame ) ;
36137: LD_ADDR_VAR 0 14
36141: PUSH
36142: LD_VAR 0 1
36146: PPUSH
36147: CALL_OW 437
36151: ST_TO_ADDR
// if not task then
36152: LD_VAR 0 14
36156: NOT
36157: IFFALSE 36161
// exit ;
36159: GO 36295
// if task [ 1 ] [ 1 ] <> | then
36161: LD_VAR 0 14
36165: PUSH
36166: LD_INT 1
36168: ARRAY
36169: PUSH
36170: LD_INT 1
36172: ARRAY
36173: PUSH
36174: LD_STRING |
36176: NONEQUAL
36177: IFFALSE 36181
// exit ;
36179: GO 36295
// _x := task [ 1 ] [ 2 ] ;
36181: LD_ADDR_VAR 0 11
36185: PUSH
36186: LD_VAR 0 14
36190: PUSH
36191: LD_INT 1
36193: ARRAY
36194: PUSH
36195: LD_INT 2
36197: ARRAY
36198: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
36199: LD_ADDR_VAR 0 12
36203: PUSH
36204: LD_VAR 0 14
36208: PUSH
36209: LD_INT 1
36211: ARRAY
36212: PUSH
36213: LD_INT 3
36215: ARRAY
36216: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
36217: LD_VAR 0 11
36221: PPUSH
36222: LD_VAR 0 12
36226: PPUSH
36227: CALL_OW 351
36231: NOT
36232: PUSH
36233: LD_VAR 0 11
36237: PPUSH
36238: LD_VAR 0 12
36242: PPUSH
36243: CALL_OW 554
36247: NOT
36248: OR
36249: IFFALSE 36283
// begin task := Delete ( task , 1 ) ;
36251: LD_ADDR_VAR 0 14
36255: PUSH
36256: LD_VAR 0 14
36260: PPUSH
36261: LD_INT 1
36263: PPUSH
36264: CALL_OW 3
36268: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
36269: LD_VAR 0 1
36273: PPUSH
36274: LD_VAR 0 14
36278: PPUSH
36279: CALL_OW 446
// end ; until not HasTask ( flame ) ;
36283: LD_VAR 0 1
36287: PPUSH
36288: CALL_OW 314
36292: NOT
36293: IFFALSE 36130
// end ;
36295: LD_VAR 0 5
36299: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36300: LD_EXP 105
36304: NOT
36305: IFFALSE 36355
36307: GO 36309
36309: DISABLE
// begin initHack := true ;
36310: LD_ADDR_EXP 105
36314: PUSH
36315: LD_INT 1
36317: ST_TO_ADDR
// hackTanks := [ ] ;
36318: LD_ADDR_EXP 106
36322: PUSH
36323: EMPTY
36324: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36325: LD_ADDR_EXP 107
36329: PUSH
36330: EMPTY
36331: ST_TO_ADDR
// hackLimit := 3 ;
36332: LD_ADDR_EXP 108
36336: PUSH
36337: LD_INT 3
36339: ST_TO_ADDR
// hackDist := 12 ;
36340: LD_ADDR_EXP 109
36344: PUSH
36345: LD_INT 12
36347: ST_TO_ADDR
// hackCounter := [ ] ;
36348: LD_ADDR_EXP 110
36352: PUSH
36353: EMPTY
36354: ST_TO_ADDR
// end ;
36355: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36356: LD_EXP 105
36360: PUSH
36361: LD_INT 34
36363: PUSH
36364: LD_INT 99
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: PPUSH
36371: CALL_OW 69
36375: AND
36376: IFFALSE 36629
36378: GO 36380
36380: DISABLE
36381: LD_INT 0
36383: PPUSH
36384: PPUSH
// begin enable ;
36385: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36386: LD_ADDR_VAR 0 1
36390: PUSH
36391: LD_INT 34
36393: PUSH
36394: LD_INT 99
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PPUSH
36401: CALL_OW 69
36405: PUSH
36406: FOR_IN
36407: IFFALSE 36627
// begin if not i in hackTanks then
36409: LD_VAR 0 1
36413: PUSH
36414: LD_EXP 106
36418: IN
36419: NOT
36420: IFFALSE 36503
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36422: LD_ADDR_EXP 106
36426: PUSH
36427: LD_EXP 106
36431: PPUSH
36432: LD_EXP 106
36436: PUSH
36437: LD_INT 1
36439: PLUS
36440: PPUSH
36441: LD_VAR 0 1
36445: PPUSH
36446: CALL_OW 1
36450: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36451: LD_ADDR_EXP 107
36455: PUSH
36456: LD_EXP 107
36460: PPUSH
36461: LD_EXP 107
36465: PUSH
36466: LD_INT 1
36468: PLUS
36469: PPUSH
36470: EMPTY
36471: PPUSH
36472: CALL_OW 1
36476: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36477: LD_ADDR_EXP 110
36481: PUSH
36482: LD_EXP 110
36486: PPUSH
36487: LD_EXP 110
36491: PUSH
36492: LD_INT 1
36494: PLUS
36495: PPUSH
36496: EMPTY
36497: PPUSH
36498: CALL_OW 1
36502: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36503: LD_VAR 0 1
36507: PPUSH
36508: CALL_OW 302
36512: NOT
36513: IFFALSE 36526
// begin HackUnlinkAll ( i ) ;
36515: LD_VAR 0 1
36519: PPUSH
36520: CALL 36632 0 1
// continue ;
36524: GO 36406
// end ; HackCheckCapturedStatus ( i ) ;
36526: LD_VAR 0 1
36530: PPUSH
36531: CALL 37075 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36535: LD_ADDR_VAR 0 2
36539: PUSH
36540: LD_INT 81
36542: PUSH
36543: LD_VAR 0 1
36547: PPUSH
36548: CALL_OW 255
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 33
36559: PUSH
36560: LD_INT 3
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: PUSH
36567: LD_INT 91
36569: PUSH
36570: LD_VAR 0 1
36574: PUSH
36575: LD_EXP 109
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: LIST
36584: PUSH
36585: LD_INT 50
36587: PUSH
36588: EMPTY
36589: LIST
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: LIST
36595: LIST
36596: PPUSH
36597: CALL_OW 69
36601: ST_TO_ADDR
// if not tmp then
36602: LD_VAR 0 2
36606: NOT
36607: IFFALSE 36611
// continue ;
36609: GO 36406
// HackLink ( i , tmp ) ;
36611: LD_VAR 0 1
36615: PPUSH
36616: LD_VAR 0 2
36620: PPUSH
36621: CALL 36768 0 2
// end ;
36625: GO 36406
36627: POP
36628: POP
// end ;
36629: PPOPN 2
36631: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36632: LD_INT 0
36634: PPUSH
36635: PPUSH
36636: PPUSH
// if not hack in hackTanks then
36637: LD_VAR 0 1
36641: PUSH
36642: LD_EXP 106
36646: IN
36647: NOT
36648: IFFALSE 36652
// exit ;
36650: GO 36763
// index := GetElementIndex ( hackTanks , hack ) ;
36652: LD_ADDR_VAR 0 4
36656: PUSH
36657: LD_EXP 106
36661: PPUSH
36662: LD_VAR 0 1
36666: PPUSH
36667: CALL 44205 0 2
36671: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36672: LD_EXP 107
36676: PUSH
36677: LD_VAR 0 4
36681: ARRAY
36682: IFFALSE 36763
// begin for i in hackTanksCaptured [ index ] do
36684: LD_ADDR_VAR 0 3
36688: PUSH
36689: LD_EXP 107
36693: PUSH
36694: LD_VAR 0 4
36698: ARRAY
36699: PUSH
36700: FOR_IN
36701: IFFALSE 36727
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36703: LD_VAR 0 3
36707: PUSH
36708: LD_INT 1
36710: ARRAY
36711: PPUSH
36712: LD_VAR 0 3
36716: PUSH
36717: LD_INT 2
36719: ARRAY
36720: PPUSH
36721: CALL_OW 235
36725: GO 36700
36727: POP
36728: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36729: LD_ADDR_EXP 107
36733: PUSH
36734: LD_EXP 107
36738: PPUSH
36739: LD_VAR 0 4
36743: PPUSH
36744: EMPTY
36745: PPUSH
36746: CALL_OW 1
36750: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36751: LD_VAR 0 1
36755: PPUSH
36756: LD_INT 0
36758: PPUSH
36759: CALL_OW 505
// end ; end ;
36763: LD_VAR 0 2
36767: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36768: LD_INT 0
36770: PPUSH
36771: PPUSH
36772: PPUSH
// if not hack in hackTanks or not vehicles then
36773: LD_VAR 0 1
36777: PUSH
36778: LD_EXP 106
36782: IN
36783: NOT
36784: PUSH
36785: LD_VAR 0 2
36789: NOT
36790: OR
36791: IFFALSE 36795
// exit ;
36793: GO 37070
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36795: LD_ADDR_VAR 0 2
36799: PUSH
36800: LD_VAR 0 1
36804: PPUSH
36805: LD_VAR 0 2
36809: PPUSH
36810: LD_INT 1
36812: PPUSH
36813: LD_INT 1
36815: PPUSH
36816: CALL 44855 0 4
36820: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36821: LD_ADDR_VAR 0 5
36825: PUSH
36826: LD_EXP 106
36830: PPUSH
36831: LD_VAR 0 1
36835: PPUSH
36836: CALL 44205 0 2
36840: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36841: LD_EXP 107
36845: PUSH
36846: LD_VAR 0 5
36850: ARRAY
36851: PUSH
36852: LD_EXP 108
36856: LESS
36857: IFFALSE 37046
// begin for i := 1 to vehicles do
36859: LD_ADDR_VAR 0 4
36863: PUSH
36864: DOUBLE
36865: LD_INT 1
36867: DEC
36868: ST_TO_ADDR
36869: LD_VAR 0 2
36873: PUSH
36874: FOR_TO
36875: IFFALSE 37044
// begin if hackTanksCaptured [ index ] = hackLimit then
36877: LD_EXP 107
36881: PUSH
36882: LD_VAR 0 5
36886: ARRAY
36887: PUSH
36888: LD_EXP 108
36892: EQUAL
36893: IFFALSE 36897
// break ;
36895: GO 37044
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36897: LD_ADDR_EXP 110
36901: PUSH
36902: LD_EXP 110
36906: PPUSH
36907: LD_VAR 0 5
36911: PPUSH
36912: LD_EXP 110
36916: PUSH
36917: LD_VAR 0 5
36921: ARRAY
36922: PUSH
36923: LD_INT 1
36925: PLUS
36926: PPUSH
36927: CALL_OW 1
36931: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36932: LD_ADDR_EXP 107
36936: PUSH
36937: LD_EXP 107
36941: PPUSH
36942: LD_VAR 0 5
36946: PUSH
36947: LD_EXP 107
36951: PUSH
36952: LD_VAR 0 5
36956: ARRAY
36957: PUSH
36958: LD_INT 1
36960: PLUS
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PPUSH
36966: LD_VAR 0 2
36970: PUSH
36971: LD_VAR 0 4
36975: ARRAY
36976: PUSH
36977: LD_VAR 0 2
36981: PUSH
36982: LD_VAR 0 4
36986: ARRAY
36987: PPUSH
36988: CALL_OW 255
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: PPUSH
36997: CALL 44420 0 3
37001: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37002: LD_VAR 0 2
37006: PUSH
37007: LD_VAR 0 4
37011: ARRAY
37012: PPUSH
37013: LD_VAR 0 1
37017: PPUSH
37018: CALL_OW 255
37022: PPUSH
37023: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37027: LD_VAR 0 2
37031: PUSH
37032: LD_VAR 0 4
37036: ARRAY
37037: PPUSH
37038: CALL_OW 141
// end ;
37042: GO 36874
37044: POP
37045: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37046: LD_VAR 0 1
37050: PPUSH
37051: LD_EXP 107
37055: PUSH
37056: LD_VAR 0 5
37060: ARRAY
37061: PUSH
37062: LD_INT 0
37064: PLUS
37065: PPUSH
37066: CALL_OW 505
// end ;
37070: LD_VAR 0 3
37074: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37075: LD_INT 0
37077: PPUSH
37078: PPUSH
37079: PPUSH
37080: PPUSH
// if not hack in hackTanks then
37081: LD_VAR 0 1
37085: PUSH
37086: LD_EXP 106
37090: IN
37091: NOT
37092: IFFALSE 37096
// exit ;
37094: GO 37336
// index := GetElementIndex ( hackTanks , hack ) ;
37096: LD_ADDR_VAR 0 4
37100: PUSH
37101: LD_EXP 106
37105: PPUSH
37106: LD_VAR 0 1
37110: PPUSH
37111: CALL 44205 0 2
37115: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37116: LD_ADDR_VAR 0 3
37120: PUSH
37121: DOUBLE
37122: LD_EXP 107
37126: PUSH
37127: LD_VAR 0 4
37131: ARRAY
37132: INC
37133: ST_TO_ADDR
37134: LD_INT 1
37136: PUSH
37137: FOR_DOWNTO
37138: IFFALSE 37310
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37140: LD_ADDR_VAR 0 5
37144: PUSH
37145: LD_EXP 107
37149: PUSH
37150: LD_VAR 0 4
37154: ARRAY
37155: PUSH
37156: LD_VAR 0 3
37160: ARRAY
37161: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37162: LD_VAR 0 5
37166: PUSH
37167: LD_INT 1
37169: ARRAY
37170: PPUSH
37171: CALL_OW 302
37175: NOT
37176: PUSH
37177: LD_VAR 0 5
37181: PUSH
37182: LD_INT 1
37184: ARRAY
37185: PPUSH
37186: CALL_OW 255
37190: PUSH
37191: LD_VAR 0 1
37195: PPUSH
37196: CALL_OW 255
37200: NONEQUAL
37201: OR
37202: IFFALSE 37308
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37204: LD_VAR 0 5
37208: PUSH
37209: LD_INT 1
37211: ARRAY
37212: PPUSH
37213: CALL_OW 305
37217: PUSH
37218: LD_VAR 0 5
37222: PUSH
37223: LD_INT 1
37225: ARRAY
37226: PPUSH
37227: CALL_OW 255
37231: PUSH
37232: LD_VAR 0 1
37236: PPUSH
37237: CALL_OW 255
37241: EQUAL
37242: AND
37243: IFFALSE 37267
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37245: LD_VAR 0 5
37249: PUSH
37250: LD_INT 1
37252: ARRAY
37253: PPUSH
37254: LD_VAR 0 5
37258: PUSH
37259: LD_INT 2
37261: ARRAY
37262: PPUSH
37263: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37267: LD_ADDR_EXP 107
37271: PUSH
37272: LD_EXP 107
37276: PPUSH
37277: LD_VAR 0 4
37281: PPUSH
37282: LD_EXP 107
37286: PUSH
37287: LD_VAR 0 4
37291: ARRAY
37292: PPUSH
37293: LD_VAR 0 3
37297: PPUSH
37298: CALL_OW 3
37302: PPUSH
37303: CALL_OW 1
37307: ST_TO_ADDR
// end ; end ;
37308: GO 37137
37310: POP
37311: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37312: LD_VAR 0 1
37316: PPUSH
37317: LD_EXP 107
37321: PUSH
37322: LD_VAR 0 4
37326: ARRAY
37327: PUSH
37328: LD_INT 0
37330: PLUS
37331: PPUSH
37332: CALL_OW 505
// end ;
37336: LD_VAR 0 2
37340: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37341: LD_INT 0
37343: PPUSH
37344: PPUSH
37345: PPUSH
37346: PPUSH
// if not hack in hackTanks then
37347: LD_VAR 0 1
37351: PUSH
37352: LD_EXP 106
37356: IN
37357: NOT
37358: IFFALSE 37362
// exit ;
37360: GO 37447
// index := GetElementIndex ( hackTanks , hack ) ;
37362: LD_ADDR_VAR 0 5
37366: PUSH
37367: LD_EXP 106
37371: PPUSH
37372: LD_VAR 0 1
37376: PPUSH
37377: CALL 44205 0 2
37381: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37382: LD_ADDR_VAR 0 4
37386: PUSH
37387: DOUBLE
37388: LD_INT 1
37390: DEC
37391: ST_TO_ADDR
37392: LD_EXP 107
37396: PUSH
37397: LD_VAR 0 5
37401: ARRAY
37402: PUSH
37403: FOR_TO
37404: IFFALSE 37445
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37406: LD_EXP 107
37410: PUSH
37411: LD_VAR 0 5
37415: ARRAY
37416: PUSH
37417: LD_VAR 0 4
37421: ARRAY
37422: PUSH
37423: LD_INT 1
37425: ARRAY
37426: PUSH
37427: LD_VAR 0 2
37431: EQUAL
37432: IFFALSE 37443
// KillUnit ( vehicle ) ;
37434: LD_VAR 0 2
37438: PPUSH
37439: CALL_OW 66
37443: GO 37403
37445: POP
37446: POP
// end ;
37447: LD_VAR 0 3
37451: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37452: LD_EXP 111
37456: NOT
37457: IFFALSE 37492
37459: GO 37461
37461: DISABLE
// begin initMiner := true ;
37462: LD_ADDR_EXP 111
37466: PUSH
37467: LD_INT 1
37469: ST_TO_ADDR
// minersList := [ ] ;
37470: LD_ADDR_EXP 112
37474: PUSH
37475: EMPTY
37476: ST_TO_ADDR
// minerMinesList := [ ] ;
37477: LD_ADDR_EXP 113
37481: PUSH
37482: EMPTY
37483: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37484: LD_ADDR_EXP 114
37488: PUSH
37489: LD_INT 5
37491: ST_TO_ADDR
// end ;
37492: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37493: LD_EXP 111
37497: PUSH
37498: LD_INT 34
37500: PUSH
37501: LD_INT 81
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PPUSH
37508: CALL_OW 69
37512: AND
37513: IFFALSE 37974
37515: GO 37517
37517: DISABLE
37518: LD_INT 0
37520: PPUSH
37521: PPUSH
37522: PPUSH
37523: PPUSH
// begin enable ;
37524: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37525: LD_ADDR_VAR 0 1
37529: PUSH
37530: LD_INT 34
37532: PUSH
37533: LD_INT 81
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PPUSH
37540: CALL_OW 69
37544: PUSH
37545: FOR_IN
37546: IFFALSE 37618
// begin if not i in minersList then
37548: LD_VAR 0 1
37552: PUSH
37553: LD_EXP 112
37557: IN
37558: NOT
37559: IFFALSE 37616
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37561: LD_ADDR_EXP 112
37565: PUSH
37566: LD_EXP 112
37570: PPUSH
37571: LD_EXP 112
37575: PUSH
37576: LD_INT 1
37578: PLUS
37579: PPUSH
37580: LD_VAR 0 1
37584: PPUSH
37585: CALL_OW 1
37589: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37590: LD_ADDR_EXP 113
37594: PUSH
37595: LD_EXP 113
37599: PPUSH
37600: LD_EXP 113
37604: PUSH
37605: LD_INT 1
37607: PLUS
37608: PPUSH
37609: EMPTY
37610: PPUSH
37611: CALL_OW 1
37615: ST_TO_ADDR
// end end ;
37616: GO 37545
37618: POP
37619: POP
// for i := minerMinesList downto 1 do
37620: LD_ADDR_VAR 0 1
37624: PUSH
37625: DOUBLE
37626: LD_EXP 113
37630: INC
37631: ST_TO_ADDR
37632: LD_INT 1
37634: PUSH
37635: FOR_DOWNTO
37636: IFFALSE 37972
// begin if IsLive ( minersList [ i ] ) then
37638: LD_EXP 112
37642: PUSH
37643: LD_VAR 0 1
37647: ARRAY
37648: PPUSH
37649: CALL_OW 300
37653: IFFALSE 37681
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37655: LD_EXP 112
37659: PUSH
37660: LD_VAR 0 1
37664: ARRAY
37665: PPUSH
37666: LD_EXP 113
37670: PUSH
37671: LD_VAR 0 1
37675: ARRAY
37676: PPUSH
37677: CALL_OW 505
// if not minerMinesList [ i ] then
37681: LD_EXP 113
37685: PUSH
37686: LD_VAR 0 1
37690: ARRAY
37691: NOT
37692: IFFALSE 37696
// continue ;
37694: GO 37635
// for j := minerMinesList [ i ] downto 1 do
37696: LD_ADDR_VAR 0 2
37700: PUSH
37701: DOUBLE
37702: LD_EXP 113
37706: PUSH
37707: LD_VAR 0 1
37711: ARRAY
37712: INC
37713: ST_TO_ADDR
37714: LD_INT 1
37716: PUSH
37717: FOR_DOWNTO
37718: IFFALSE 37968
// begin side := GetSide ( minersList [ i ] ) ;
37720: LD_ADDR_VAR 0 3
37724: PUSH
37725: LD_EXP 112
37729: PUSH
37730: LD_VAR 0 1
37734: ARRAY
37735: PPUSH
37736: CALL_OW 255
37740: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37741: LD_ADDR_VAR 0 4
37745: PUSH
37746: LD_EXP 113
37750: PUSH
37751: LD_VAR 0 1
37755: ARRAY
37756: PUSH
37757: LD_VAR 0 2
37761: ARRAY
37762: PUSH
37763: LD_INT 1
37765: ARRAY
37766: PPUSH
37767: LD_EXP 113
37771: PUSH
37772: LD_VAR 0 1
37776: ARRAY
37777: PUSH
37778: LD_VAR 0 2
37782: ARRAY
37783: PUSH
37784: LD_INT 2
37786: ARRAY
37787: PPUSH
37788: CALL_OW 428
37792: ST_TO_ADDR
// if not tmp then
37793: LD_VAR 0 4
37797: NOT
37798: IFFALSE 37802
// continue ;
37800: GO 37717
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37802: LD_VAR 0 4
37806: PUSH
37807: LD_INT 81
37809: PUSH
37810: LD_VAR 0 3
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PPUSH
37819: CALL_OW 69
37823: IN
37824: PUSH
37825: LD_EXP 113
37829: PUSH
37830: LD_VAR 0 1
37834: ARRAY
37835: PUSH
37836: LD_VAR 0 2
37840: ARRAY
37841: PUSH
37842: LD_INT 1
37844: ARRAY
37845: PPUSH
37846: LD_EXP 113
37850: PUSH
37851: LD_VAR 0 1
37855: ARRAY
37856: PUSH
37857: LD_VAR 0 2
37861: ARRAY
37862: PUSH
37863: LD_INT 2
37865: ARRAY
37866: PPUSH
37867: CALL_OW 458
37871: AND
37872: IFFALSE 37966
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37874: LD_EXP 113
37878: PUSH
37879: LD_VAR 0 1
37883: ARRAY
37884: PUSH
37885: LD_VAR 0 2
37889: ARRAY
37890: PUSH
37891: LD_INT 1
37893: ARRAY
37894: PPUSH
37895: LD_EXP 113
37899: PUSH
37900: LD_VAR 0 1
37904: ARRAY
37905: PUSH
37906: LD_VAR 0 2
37910: ARRAY
37911: PUSH
37912: LD_INT 2
37914: ARRAY
37915: PPUSH
37916: LD_VAR 0 3
37920: PPUSH
37921: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37925: LD_ADDR_EXP 113
37929: PUSH
37930: LD_EXP 113
37934: PPUSH
37935: LD_VAR 0 1
37939: PPUSH
37940: LD_EXP 113
37944: PUSH
37945: LD_VAR 0 1
37949: ARRAY
37950: PPUSH
37951: LD_VAR 0 2
37955: PPUSH
37956: CALL_OW 3
37960: PPUSH
37961: CALL_OW 1
37965: ST_TO_ADDR
// end ; end ;
37966: GO 37717
37968: POP
37969: POP
// end ;
37970: GO 37635
37972: POP
37973: POP
// end ;
37974: PPOPN 4
37976: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37977: LD_INT 0
37979: PPUSH
37980: PPUSH
// result := false ;
37981: LD_ADDR_VAR 0 4
37985: PUSH
37986: LD_INT 0
37988: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37989: LD_VAR 0 1
37993: PPUSH
37994: CALL_OW 264
37998: PUSH
37999: LD_INT 81
38001: EQUAL
38002: NOT
38003: IFFALSE 38007
// exit ;
38005: GO 38247
// index := GetElementIndex ( minersList , unit ) ;
38007: LD_ADDR_VAR 0 5
38011: PUSH
38012: LD_EXP 112
38016: PPUSH
38017: LD_VAR 0 1
38021: PPUSH
38022: CALL 44205 0 2
38026: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38027: LD_EXP 113
38031: PUSH
38032: LD_VAR 0 5
38036: ARRAY
38037: PUSH
38038: LD_EXP 114
38042: GREATEREQUAL
38043: IFFALSE 38047
// exit ;
38045: GO 38247
// ComMoveXY ( unit , x , y ) ;
38047: LD_VAR 0 1
38051: PPUSH
38052: LD_VAR 0 2
38056: PPUSH
38057: LD_VAR 0 3
38061: PPUSH
38062: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38066: LD_INT 35
38068: PPUSH
38069: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38073: LD_VAR 0 1
38077: PPUSH
38078: LD_VAR 0 2
38082: PPUSH
38083: LD_VAR 0 3
38087: PPUSH
38088: CALL 75946 0 3
38092: NOT
38093: PUSH
38094: LD_VAR 0 1
38098: PPUSH
38099: CALL_OW 314
38103: AND
38104: IFFALSE 38108
// exit ;
38106: GO 38247
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38108: LD_VAR 0 2
38112: PPUSH
38113: LD_VAR 0 3
38117: PPUSH
38118: CALL_OW 428
38122: PUSH
38123: LD_VAR 0 1
38127: EQUAL
38128: PUSH
38129: LD_VAR 0 1
38133: PPUSH
38134: CALL_OW 314
38138: NOT
38139: AND
38140: IFFALSE 38066
// PlaySoundXY ( x , y , PlantMine ) ;
38142: LD_VAR 0 2
38146: PPUSH
38147: LD_VAR 0 3
38151: PPUSH
38152: LD_STRING PlantMine
38154: PPUSH
38155: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38159: LD_VAR 0 2
38163: PPUSH
38164: LD_VAR 0 3
38168: PPUSH
38169: LD_VAR 0 1
38173: PPUSH
38174: CALL_OW 255
38178: PPUSH
38179: LD_INT 0
38181: PPUSH
38182: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38186: LD_ADDR_EXP 113
38190: PUSH
38191: LD_EXP 113
38195: PPUSH
38196: LD_VAR 0 5
38200: PUSH
38201: LD_EXP 113
38205: PUSH
38206: LD_VAR 0 5
38210: ARRAY
38211: PUSH
38212: LD_INT 1
38214: PLUS
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PPUSH
38220: LD_VAR 0 2
38224: PUSH
38225: LD_VAR 0 3
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PPUSH
38234: CALL 44420 0 3
38238: ST_TO_ADDR
// result := true ;
38239: LD_ADDR_VAR 0 4
38243: PUSH
38244: LD_INT 1
38246: ST_TO_ADDR
// end ;
38247: LD_VAR 0 4
38251: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38252: LD_INT 0
38254: PPUSH
38255: PPUSH
38256: PPUSH
// if not unit in minersList then
38257: LD_VAR 0 1
38261: PUSH
38262: LD_EXP 112
38266: IN
38267: NOT
38268: IFFALSE 38272
// exit ;
38270: GO 38664
// index := GetElementIndex ( minersList , unit ) ;
38272: LD_ADDR_VAR 0 6
38276: PUSH
38277: LD_EXP 112
38281: PPUSH
38282: LD_VAR 0 1
38286: PPUSH
38287: CALL 44205 0 2
38291: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38292: LD_ADDR_VAR 0 5
38296: PUSH
38297: DOUBLE
38298: LD_EXP 113
38302: PUSH
38303: LD_VAR 0 6
38307: ARRAY
38308: INC
38309: ST_TO_ADDR
38310: LD_INT 1
38312: PUSH
38313: FOR_DOWNTO
38314: IFFALSE 38475
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38316: LD_EXP 113
38320: PUSH
38321: LD_VAR 0 6
38325: ARRAY
38326: PUSH
38327: LD_VAR 0 5
38331: ARRAY
38332: PUSH
38333: LD_INT 1
38335: ARRAY
38336: PUSH
38337: LD_VAR 0 2
38341: EQUAL
38342: PUSH
38343: LD_EXP 113
38347: PUSH
38348: LD_VAR 0 6
38352: ARRAY
38353: PUSH
38354: LD_VAR 0 5
38358: ARRAY
38359: PUSH
38360: LD_INT 2
38362: ARRAY
38363: PUSH
38364: LD_VAR 0 3
38368: EQUAL
38369: AND
38370: IFFALSE 38473
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38372: LD_EXP 113
38376: PUSH
38377: LD_VAR 0 6
38381: ARRAY
38382: PUSH
38383: LD_VAR 0 5
38387: ARRAY
38388: PUSH
38389: LD_INT 1
38391: ARRAY
38392: PPUSH
38393: LD_EXP 113
38397: PUSH
38398: LD_VAR 0 6
38402: ARRAY
38403: PUSH
38404: LD_VAR 0 5
38408: ARRAY
38409: PUSH
38410: LD_INT 2
38412: ARRAY
38413: PPUSH
38414: LD_VAR 0 1
38418: PPUSH
38419: CALL_OW 255
38423: PPUSH
38424: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38428: LD_ADDR_EXP 113
38432: PUSH
38433: LD_EXP 113
38437: PPUSH
38438: LD_VAR 0 6
38442: PPUSH
38443: LD_EXP 113
38447: PUSH
38448: LD_VAR 0 6
38452: ARRAY
38453: PPUSH
38454: LD_VAR 0 5
38458: PPUSH
38459: CALL_OW 3
38463: PPUSH
38464: CALL_OW 1
38468: ST_TO_ADDR
// exit ;
38469: POP
38470: POP
38471: GO 38664
// end ; end ;
38473: GO 38313
38475: POP
38476: POP
// for i := minerMinesList [ index ] downto 1 do
38477: LD_ADDR_VAR 0 5
38481: PUSH
38482: DOUBLE
38483: LD_EXP 113
38487: PUSH
38488: LD_VAR 0 6
38492: ARRAY
38493: INC
38494: ST_TO_ADDR
38495: LD_INT 1
38497: PUSH
38498: FOR_DOWNTO
38499: IFFALSE 38662
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38501: LD_EXP 113
38505: PUSH
38506: LD_VAR 0 6
38510: ARRAY
38511: PUSH
38512: LD_VAR 0 5
38516: ARRAY
38517: PUSH
38518: LD_INT 1
38520: ARRAY
38521: PPUSH
38522: LD_EXP 113
38526: PUSH
38527: LD_VAR 0 6
38531: ARRAY
38532: PUSH
38533: LD_VAR 0 5
38537: ARRAY
38538: PUSH
38539: LD_INT 2
38541: ARRAY
38542: PPUSH
38543: LD_VAR 0 2
38547: PPUSH
38548: LD_VAR 0 3
38552: PPUSH
38553: CALL_OW 298
38557: PUSH
38558: LD_INT 6
38560: LESS
38561: IFFALSE 38660
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38563: LD_EXP 113
38567: PUSH
38568: LD_VAR 0 6
38572: ARRAY
38573: PUSH
38574: LD_VAR 0 5
38578: ARRAY
38579: PUSH
38580: LD_INT 1
38582: ARRAY
38583: PPUSH
38584: LD_EXP 113
38588: PUSH
38589: LD_VAR 0 6
38593: ARRAY
38594: PUSH
38595: LD_VAR 0 5
38599: ARRAY
38600: PUSH
38601: LD_INT 2
38603: ARRAY
38604: PPUSH
38605: LD_VAR 0 1
38609: PPUSH
38610: CALL_OW 255
38614: PPUSH
38615: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38619: LD_ADDR_EXP 113
38623: PUSH
38624: LD_EXP 113
38628: PPUSH
38629: LD_VAR 0 6
38633: PPUSH
38634: LD_EXP 113
38638: PUSH
38639: LD_VAR 0 6
38643: ARRAY
38644: PPUSH
38645: LD_VAR 0 5
38649: PPUSH
38650: CALL_OW 3
38654: PPUSH
38655: CALL_OW 1
38659: ST_TO_ADDR
// end ; end ;
38660: GO 38498
38662: POP
38663: POP
// end ;
38664: LD_VAR 0 4
38668: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38669: LD_INT 0
38671: PPUSH
38672: PPUSH
38673: PPUSH
38674: PPUSH
38675: PPUSH
38676: PPUSH
38677: PPUSH
38678: PPUSH
38679: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38680: LD_VAR 0 1
38684: PPUSH
38685: CALL_OW 264
38689: PUSH
38690: LD_INT 81
38692: EQUAL
38693: NOT
38694: PUSH
38695: LD_VAR 0 1
38699: PUSH
38700: LD_EXP 112
38704: IN
38705: NOT
38706: OR
38707: IFFALSE 38711
// exit ;
38709: GO 39033
// index := GetElementIndex ( minersList , unit ) ;
38711: LD_ADDR_VAR 0 6
38715: PUSH
38716: LD_EXP 112
38720: PPUSH
38721: LD_VAR 0 1
38725: PPUSH
38726: CALL 44205 0 2
38730: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38731: LD_ADDR_VAR 0 8
38735: PUSH
38736: LD_EXP 114
38740: PUSH
38741: LD_EXP 113
38745: PUSH
38746: LD_VAR 0 6
38750: ARRAY
38751: MINUS
38752: ST_TO_ADDR
// if not minesFreeAmount then
38753: LD_VAR 0 8
38757: NOT
38758: IFFALSE 38762
// exit ;
38760: GO 39033
// tmp := [ ] ;
38762: LD_ADDR_VAR 0 7
38766: PUSH
38767: EMPTY
38768: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38769: LD_ADDR_VAR 0 5
38773: PUSH
38774: DOUBLE
38775: LD_INT 1
38777: DEC
38778: ST_TO_ADDR
38779: LD_VAR 0 8
38783: PUSH
38784: FOR_TO
38785: IFFALSE 38980
// begin _d := rand ( 0 , 5 ) ;
38787: LD_ADDR_VAR 0 11
38791: PUSH
38792: LD_INT 0
38794: PPUSH
38795: LD_INT 5
38797: PPUSH
38798: CALL_OW 12
38802: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38803: LD_ADDR_VAR 0 12
38807: PUSH
38808: LD_INT 2
38810: PPUSH
38811: LD_INT 6
38813: PPUSH
38814: CALL_OW 12
38818: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38819: LD_ADDR_VAR 0 9
38823: PUSH
38824: LD_VAR 0 2
38828: PPUSH
38829: LD_VAR 0 11
38833: PPUSH
38834: LD_VAR 0 12
38838: PPUSH
38839: CALL_OW 272
38843: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38844: LD_ADDR_VAR 0 10
38848: PUSH
38849: LD_VAR 0 3
38853: PPUSH
38854: LD_VAR 0 11
38858: PPUSH
38859: LD_VAR 0 12
38863: PPUSH
38864: CALL_OW 273
38868: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38869: LD_VAR 0 9
38873: PPUSH
38874: LD_VAR 0 10
38878: PPUSH
38879: CALL_OW 488
38883: PUSH
38884: LD_VAR 0 9
38888: PUSH
38889: LD_VAR 0 10
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_VAR 0 7
38902: IN
38903: NOT
38904: AND
38905: PUSH
38906: LD_VAR 0 9
38910: PPUSH
38911: LD_VAR 0 10
38915: PPUSH
38916: CALL_OW 458
38920: NOT
38921: AND
38922: IFFALSE 38964
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38924: LD_ADDR_VAR 0 7
38928: PUSH
38929: LD_VAR 0 7
38933: PPUSH
38934: LD_VAR 0 7
38938: PUSH
38939: LD_INT 1
38941: PLUS
38942: PPUSH
38943: LD_VAR 0 9
38947: PUSH
38948: LD_VAR 0 10
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: PPUSH
38957: CALL_OW 1
38961: ST_TO_ADDR
38962: GO 38978
// i := i - 1 ;
38964: LD_ADDR_VAR 0 5
38968: PUSH
38969: LD_VAR 0 5
38973: PUSH
38974: LD_INT 1
38976: MINUS
38977: ST_TO_ADDR
// end ;
38978: GO 38784
38980: POP
38981: POP
// for i in tmp do
38982: LD_ADDR_VAR 0 5
38986: PUSH
38987: LD_VAR 0 7
38991: PUSH
38992: FOR_IN
38993: IFFALSE 39031
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38995: LD_VAR 0 1
38999: PPUSH
39000: LD_VAR 0 5
39004: PUSH
39005: LD_INT 1
39007: ARRAY
39008: PPUSH
39009: LD_VAR 0 5
39013: PUSH
39014: LD_INT 2
39016: ARRAY
39017: PPUSH
39018: CALL 37977 0 3
39022: NOT
39023: IFFALSE 39029
// exit ;
39025: POP
39026: POP
39027: GO 39033
39029: GO 38992
39031: POP
39032: POP
// end ;
39033: LD_VAR 0 4
39037: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39038: LD_INT 0
39040: PPUSH
39041: PPUSH
39042: PPUSH
39043: PPUSH
39044: PPUSH
39045: PPUSH
39046: PPUSH
// if not GetClass ( unit ) = class_sniper then
39047: LD_VAR 0 1
39051: PPUSH
39052: CALL_OW 257
39056: PUSH
39057: LD_INT 5
39059: EQUAL
39060: NOT
39061: IFFALSE 39065
// exit ;
39063: GO 39453
// dist := 8 ;
39065: LD_ADDR_VAR 0 5
39069: PUSH
39070: LD_INT 8
39072: ST_TO_ADDR
// viewRange := 12 ;
39073: LD_ADDR_VAR 0 7
39077: PUSH
39078: LD_INT 12
39080: ST_TO_ADDR
// side := GetSide ( unit ) ;
39081: LD_ADDR_VAR 0 6
39085: PUSH
39086: LD_VAR 0 1
39090: PPUSH
39091: CALL_OW 255
39095: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39096: LD_INT 61
39098: PPUSH
39099: LD_VAR 0 6
39103: PPUSH
39104: CALL_OW 321
39108: PUSH
39109: LD_INT 2
39111: EQUAL
39112: IFFALSE 39122
// viewRange := 16 ;
39114: LD_ADDR_VAR 0 7
39118: PUSH
39119: LD_INT 16
39121: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39122: LD_VAR 0 1
39126: PPUSH
39127: LD_VAR 0 2
39131: PPUSH
39132: LD_VAR 0 3
39136: PPUSH
39137: CALL_OW 297
39141: PUSH
39142: LD_VAR 0 5
39146: GREATER
39147: IFFALSE 39226
// begin ComMoveXY ( unit , x , y ) ;
39149: LD_VAR 0 1
39153: PPUSH
39154: LD_VAR 0 2
39158: PPUSH
39159: LD_VAR 0 3
39163: PPUSH
39164: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39168: LD_INT 35
39170: PPUSH
39171: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39175: LD_VAR 0 1
39179: PPUSH
39180: LD_VAR 0 2
39184: PPUSH
39185: LD_VAR 0 3
39189: PPUSH
39190: CALL 75946 0 3
39194: NOT
39195: IFFALSE 39199
// exit ;
39197: GO 39453
// until GetDistUnitXY ( unit , x , y ) < dist ;
39199: LD_VAR 0 1
39203: PPUSH
39204: LD_VAR 0 2
39208: PPUSH
39209: LD_VAR 0 3
39213: PPUSH
39214: CALL_OW 297
39218: PUSH
39219: LD_VAR 0 5
39223: LESS
39224: IFFALSE 39168
// end ; ComTurnXY ( unit , x , y ) ;
39226: LD_VAR 0 1
39230: PPUSH
39231: LD_VAR 0 2
39235: PPUSH
39236: LD_VAR 0 3
39240: PPUSH
39241: CALL_OW 118
// wait ( 5 ) ;
39245: LD_INT 5
39247: PPUSH
39248: CALL_OW 67
// _d := GetDir ( unit ) ;
39252: LD_ADDR_VAR 0 10
39256: PUSH
39257: LD_VAR 0 1
39261: PPUSH
39262: CALL_OW 254
39266: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39267: LD_ADDR_VAR 0 8
39271: PUSH
39272: LD_VAR 0 1
39276: PPUSH
39277: CALL_OW 250
39281: PPUSH
39282: LD_VAR 0 10
39286: PPUSH
39287: LD_VAR 0 5
39291: PPUSH
39292: CALL_OW 272
39296: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39297: LD_ADDR_VAR 0 9
39301: PUSH
39302: LD_VAR 0 1
39306: PPUSH
39307: CALL_OW 251
39311: PPUSH
39312: LD_VAR 0 10
39316: PPUSH
39317: LD_VAR 0 5
39321: PPUSH
39322: CALL_OW 273
39326: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39327: LD_VAR 0 8
39331: PPUSH
39332: LD_VAR 0 9
39336: PPUSH
39337: CALL_OW 488
39341: NOT
39342: IFFALSE 39346
// exit ;
39344: GO 39453
// ComAnimCustom ( unit , 1 ) ;
39346: LD_VAR 0 1
39350: PPUSH
39351: LD_INT 1
39353: PPUSH
39354: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39358: LD_VAR 0 8
39362: PPUSH
39363: LD_VAR 0 9
39367: PPUSH
39368: LD_VAR 0 6
39372: PPUSH
39373: LD_VAR 0 7
39377: PPUSH
39378: CALL_OW 330
// repeat wait ( 1 ) ;
39382: LD_INT 1
39384: PPUSH
39385: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39389: LD_VAR 0 1
39393: PPUSH
39394: CALL_OW 316
39398: PUSH
39399: LD_VAR 0 1
39403: PPUSH
39404: CALL_OW 314
39408: OR
39409: PUSH
39410: LD_VAR 0 1
39414: PPUSH
39415: CALL_OW 302
39419: NOT
39420: OR
39421: PUSH
39422: LD_VAR 0 1
39426: PPUSH
39427: CALL_OW 301
39431: OR
39432: IFFALSE 39382
// RemoveSeeing ( _x , _y , side ) ;
39434: LD_VAR 0 8
39438: PPUSH
39439: LD_VAR 0 9
39443: PPUSH
39444: LD_VAR 0 6
39448: PPUSH
39449: CALL_OW 331
// end ; end_of_file
39453: LD_VAR 0 4
39457: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39458: LD_INT 0
39460: PPUSH
39461: PPUSH
// if exist_mode then
39462: LD_VAR 0 2
39466: IFFALSE 39491
// unit := CreateCharacter ( prefix & ident ) else
39468: LD_ADDR_VAR 0 5
39472: PUSH
39473: LD_VAR 0 3
39477: PUSH
39478: LD_VAR 0 1
39482: STR
39483: PPUSH
39484: CALL_OW 34
39488: ST_TO_ADDR
39489: GO 39506
// unit := NewCharacter ( ident ) ;
39491: LD_ADDR_VAR 0 5
39495: PUSH
39496: LD_VAR 0 1
39500: PPUSH
39501: CALL_OW 25
39505: ST_TO_ADDR
// result := unit ;
39506: LD_ADDR_VAR 0 4
39510: PUSH
39511: LD_VAR 0 5
39515: ST_TO_ADDR
// end ;
39516: LD_VAR 0 4
39520: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39521: LD_INT 0
39523: PPUSH
39524: PPUSH
// if not side or not nation then
39525: LD_VAR 0 1
39529: NOT
39530: PUSH
39531: LD_VAR 0 2
39535: NOT
39536: OR
39537: IFFALSE 39541
// exit ;
39539: GO 40309
// case nation of nation_american :
39541: LD_VAR 0 2
39545: PUSH
39546: LD_INT 1
39548: DOUBLE
39549: EQUAL
39550: IFTRUE 39554
39552: GO 39768
39554: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39555: LD_ADDR_VAR 0 4
39559: PUSH
39560: LD_INT 35
39562: PUSH
39563: LD_INT 45
39565: PUSH
39566: LD_INT 46
39568: PUSH
39569: LD_INT 47
39571: PUSH
39572: LD_INT 82
39574: PUSH
39575: LD_INT 83
39577: PUSH
39578: LD_INT 84
39580: PUSH
39581: LD_INT 85
39583: PUSH
39584: LD_INT 86
39586: PUSH
39587: LD_INT 1
39589: PUSH
39590: LD_INT 2
39592: PUSH
39593: LD_INT 6
39595: PUSH
39596: LD_INT 15
39598: PUSH
39599: LD_INT 16
39601: PUSH
39602: LD_INT 7
39604: PUSH
39605: LD_INT 12
39607: PUSH
39608: LD_INT 13
39610: PUSH
39611: LD_INT 10
39613: PUSH
39614: LD_INT 14
39616: PUSH
39617: LD_INT 20
39619: PUSH
39620: LD_INT 21
39622: PUSH
39623: LD_INT 22
39625: PUSH
39626: LD_INT 25
39628: PUSH
39629: LD_INT 32
39631: PUSH
39632: LD_INT 27
39634: PUSH
39635: LD_INT 36
39637: PUSH
39638: LD_INT 69
39640: PUSH
39641: LD_INT 39
39643: PUSH
39644: LD_INT 34
39646: PUSH
39647: LD_INT 40
39649: PUSH
39650: LD_INT 48
39652: PUSH
39653: LD_INT 49
39655: PUSH
39656: LD_INT 50
39658: PUSH
39659: LD_INT 51
39661: PUSH
39662: LD_INT 52
39664: PUSH
39665: LD_INT 53
39667: PUSH
39668: LD_INT 54
39670: PUSH
39671: LD_INT 55
39673: PUSH
39674: LD_INT 56
39676: PUSH
39677: LD_INT 57
39679: PUSH
39680: LD_INT 58
39682: PUSH
39683: LD_INT 59
39685: PUSH
39686: LD_INT 60
39688: PUSH
39689: LD_INT 61
39691: PUSH
39692: LD_INT 62
39694: PUSH
39695: LD_INT 80
39697: PUSH
39698: LD_INT 82
39700: PUSH
39701: LD_INT 83
39703: PUSH
39704: LD_INT 84
39706: PUSH
39707: LD_INT 85
39709: PUSH
39710: LD_INT 86
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: ST_TO_ADDR
39766: GO 40233
39768: LD_INT 2
39770: DOUBLE
39771: EQUAL
39772: IFTRUE 39776
39774: GO 40002
39776: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39777: LD_ADDR_VAR 0 4
39781: PUSH
39782: LD_INT 35
39784: PUSH
39785: LD_INT 45
39787: PUSH
39788: LD_INT 46
39790: PUSH
39791: LD_INT 47
39793: PUSH
39794: LD_INT 82
39796: PUSH
39797: LD_INT 83
39799: PUSH
39800: LD_INT 84
39802: PUSH
39803: LD_INT 85
39805: PUSH
39806: LD_INT 87
39808: PUSH
39809: LD_INT 70
39811: PUSH
39812: LD_INT 1
39814: PUSH
39815: LD_INT 11
39817: PUSH
39818: LD_INT 3
39820: PUSH
39821: LD_INT 4
39823: PUSH
39824: LD_INT 5
39826: PUSH
39827: LD_INT 6
39829: PUSH
39830: LD_INT 15
39832: PUSH
39833: LD_INT 18
39835: PUSH
39836: LD_INT 7
39838: PUSH
39839: LD_INT 17
39841: PUSH
39842: LD_INT 8
39844: PUSH
39845: LD_INT 20
39847: PUSH
39848: LD_INT 21
39850: PUSH
39851: LD_INT 22
39853: PUSH
39854: LD_INT 72
39856: PUSH
39857: LD_INT 26
39859: PUSH
39860: LD_INT 69
39862: PUSH
39863: LD_INT 39
39865: PUSH
39866: LD_INT 40
39868: PUSH
39869: LD_INT 41
39871: PUSH
39872: LD_INT 42
39874: PUSH
39875: LD_INT 43
39877: PUSH
39878: LD_INT 48
39880: PUSH
39881: LD_INT 49
39883: PUSH
39884: LD_INT 50
39886: PUSH
39887: LD_INT 51
39889: PUSH
39890: LD_INT 52
39892: PUSH
39893: LD_INT 53
39895: PUSH
39896: LD_INT 54
39898: PUSH
39899: LD_INT 55
39901: PUSH
39902: LD_INT 56
39904: PUSH
39905: LD_INT 60
39907: PUSH
39908: LD_INT 61
39910: PUSH
39911: LD_INT 62
39913: PUSH
39914: LD_INT 66
39916: PUSH
39917: LD_INT 67
39919: PUSH
39920: LD_INT 68
39922: PUSH
39923: LD_INT 81
39925: PUSH
39926: LD_INT 82
39928: PUSH
39929: LD_INT 83
39931: PUSH
39932: LD_INT 84
39934: PUSH
39935: LD_INT 85
39937: PUSH
39938: LD_INT 87
39940: PUSH
39941: LD_INT 88
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: LIST
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: ST_TO_ADDR
40000: GO 40233
40002: LD_INT 3
40004: DOUBLE
40005: EQUAL
40006: IFTRUE 40010
40008: GO 40232
40010: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40011: LD_ADDR_VAR 0 4
40015: PUSH
40016: LD_INT 46
40018: PUSH
40019: LD_INT 47
40021: PUSH
40022: LD_INT 1
40024: PUSH
40025: LD_INT 2
40027: PUSH
40028: LD_INT 82
40030: PUSH
40031: LD_INT 83
40033: PUSH
40034: LD_INT 84
40036: PUSH
40037: LD_INT 85
40039: PUSH
40040: LD_INT 86
40042: PUSH
40043: LD_INT 11
40045: PUSH
40046: LD_INT 9
40048: PUSH
40049: LD_INT 20
40051: PUSH
40052: LD_INT 19
40054: PUSH
40055: LD_INT 21
40057: PUSH
40058: LD_INT 24
40060: PUSH
40061: LD_INT 22
40063: PUSH
40064: LD_INT 25
40066: PUSH
40067: LD_INT 28
40069: PUSH
40070: LD_INT 29
40072: PUSH
40073: LD_INT 30
40075: PUSH
40076: LD_INT 31
40078: PUSH
40079: LD_INT 37
40081: PUSH
40082: LD_INT 38
40084: PUSH
40085: LD_INT 32
40087: PUSH
40088: LD_INT 27
40090: PUSH
40091: LD_INT 33
40093: PUSH
40094: LD_INT 69
40096: PUSH
40097: LD_INT 39
40099: PUSH
40100: LD_INT 34
40102: PUSH
40103: LD_INT 40
40105: PUSH
40106: LD_INT 71
40108: PUSH
40109: LD_INT 23
40111: PUSH
40112: LD_INT 44
40114: PUSH
40115: LD_INT 48
40117: PUSH
40118: LD_INT 49
40120: PUSH
40121: LD_INT 50
40123: PUSH
40124: LD_INT 51
40126: PUSH
40127: LD_INT 52
40129: PUSH
40130: LD_INT 53
40132: PUSH
40133: LD_INT 54
40135: PUSH
40136: LD_INT 55
40138: PUSH
40139: LD_INT 56
40141: PUSH
40142: LD_INT 57
40144: PUSH
40145: LD_INT 58
40147: PUSH
40148: LD_INT 59
40150: PUSH
40151: LD_INT 63
40153: PUSH
40154: LD_INT 64
40156: PUSH
40157: LD_INT 65
40159: PUSH
40160: LD_INT 82
40162: PUSH
40163: LD_INT 83
40165: PUSH
40166: LD_INT 84
40168: PUSH
40169: LD_INT 85
40171: PUSH
40172: LD_INT 86
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: LIST
40183: LIST
40184: LIST
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: ST_TO_ADDR
40230: GO 40233
40232: POP
// if state > - 1 and state < 3 then
40233: LD_VAR 0 3
40237: PUSH
40238: LD_INT 1
40240: NEG
40241: GREATER
40242: PUSH
40243: LD_VAR 0 3
40247: PUSH
40248: LD_INT 3
40250: LESS
40251: AND
40252: IFFALSE 40309
// for i in result do
40254: LD_ADDR_VAR 0 5
40258: PUSH
40259: LD_VAR 0 4
40263: PUSH
40264: FOR_IN
40265: IFFALSE 40307
// if GetTech ( i , side ) <> state then
40267: LD_VAR 0 5
40271: PPUSH
40272: LD_VAR 0 1
40276: PPUSH
40277: CALL_OW 321
40281: PUSH
40282: LD_VAR 0 3
40286: NONEQUAL
40287: IFFALSE 40305
// result := result diff i ;
40289: LD_ADDR_VAR 0 4
40293: PUSH
40294: LD_VAR 0 4
40298: PUSH
40299: LD_VAR 0 5
40303: DIFF
40304: ST_TO_ADDR
40305: GO 40264
40307: POP
40308: POP
// end ;
40309: LD_VAR 0 4
40313: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40314: LD_INT 0
40316: PPUSH
40317: PPUSH
40318: PPUSH
// result := true ;
40319: LD_ADDR_VAR 0 3
40323: PUSH
40324: LD_INT 1
40326: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40327: LD_ADDR_VAR 0 5
40331: PUSH
40332: LD_VAR 0 2
40336: PPUSH
40337: CALL_OW 480
40341: ST_TO_ADDR
// if not tmp then
40342: LD_VAR 0 5
40346: NOT
40347: IFFALSE 40351
// exit ;
40349: GO 40400
// for i in tmp do
40351: LD_ADDR_VAR 0 4
40355: PUSH
40356: LD_VAR 0 5
40360: PUSH
40361: FOR_IN
40362: IFFALSE 40398
// if GetTech ( i , side ) <> state_researched then
40364: LD_VAR 0 4
40368: PPUSH
40369: LD_VAR 0 1
40373: PPUSH
40374: CALL_OW 321
40378: PUSH
40379: LD_INT 2
40381: NONEQUAL
40382: IFFALSE 40396
// begin result := false ;
40384: LD_ADDR_VAR 0 3
40388: PUSH
40389: LD_INT 0
40391: ST_TO_ADDR
// exit ;
40392: POP
40393: POP
40394: GO 40400
// end ;
40396: GO 40361
40398: POP
40399: POP
// end ;
40400: LD_VAR 0 3
40404: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40405: LD_INT 0
40407: PPUSH
40408: PPUSH
40409: PPUSH
40410: PPUSH
40411: PPUSH
40412: PPUSH
40413: PPUSH
40414: PPUSH
40415: PPUSH
40416: PPUSH
40417: PPUSH
40418: PPUSH
40419: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40420: LD_VAR 0 1
40424: NOT
40425: PUSH
40426: LD_VAR 0 1
40430: PPUSH
40431: CALL_OW 257
40435: PUSH
40436: LD_INT 9
40438: NONEQUAL
40439: OR
40440: IFFALSE 40444
// exit ;
40442: GO 41017
// side := GetSide ( unit ) ;
40444: LD_ADDR_VAR 0 9
40448: PUSH
40449: LD_VAR 0 1
40453: PPUSH
40454: CALL_OW 255
40458: ST_TO_ADDR
// tech_space := tech_spacanom ;
40459: LD_ADDR_VAR 0 12
40463: PUSH
40464: LD_INT 29
40466: ST_TO_ADDR
// tech_time := tech_taurad ;
40467: LD_ADDR_VAR 0 13
40471: PUSH
40472: LD_INT 28
40474: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40475: LD_ADDR_VAR 0 11
40479: PUSH
40480: LD_VAR 0 1
40484: PPUSH
40485: CALL_OW 310
40489: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40490: LD_VAR 0 11
40494: PPUSH
40495: CALL_OW 247
40499: PUSH
40500: LD_INT 2
40502: EQUAL
40503: IFFALSE 40507
// exit ;
40505: GO 41017
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40507: LD_ADDR_VAR 0 8
40511: PUSH
40512: LD_INT 81
40514: PUSH
40515: LD_VAR 0 9
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 3
40526: PUSH
40527: LD_INT 21
40529: PUSH
40530: LD_INT 3
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PPUSH
40545: CALL_OW 69
40549: ST_TO_ADDR
// if not tmp then
40550: LD_VAR 0 8
40554: NOT
40555: IFFALSE 40559
// exit ;
40557: GO 41017
// if in_unit then
40559: LD_VAR 0 11
40563: IFFALSE 40587
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40565: LD_ADDR_VAR 0 10
40569: PUSH
40570: LD_VAR 0 8
40574: PPUSH
40575: LD_VAR 0 11
40579: PPUSH
40580: CALL_OW 74
40584: ST_TO_ADDR
40585: GO 40607
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40587: LD_ADDR_VAR 0 10
40591: PUSH
40592: LD_VAR 0 8
40596: PPUSH
40597: LD_VAR 0 1
40601: PPUSH
40602: CALL_OW 74
40606: ST_TO_ADDR
// if not enemy then
40607: LD_VAR 0 10
40611: NOT
40612: IFFALSE 40616
// exit ;
40614: GO 41017
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40616: LD_VAR 0 11
40620: PUSH
40621: LD_VAR 0 11
40625: PPUSH
40626: LD_VAR 0 10
40630: PPUSH
40631: CALL_OW 296
40635: PUSH
40636: LD_INT 13
40638: GREATER
40639: AND
40640: PUSH
40641: LD_VAR 0 1
40645: PPUSH
40646: LD_VAR 0 10
40650: PPUSH
40651: CALL_OW 296
40655: PUSH
40656: LD_INT 12
40658: GREATER
40659: OR
40660: IFFALSE 40664
// exit ;
40662: GO 41017
// missile := [ 1 ] ;
40664: LD_ADDR_VAR 0 14
40668: PUSH
40669: LD_INT 1
40671: PUSH
40672: EMPTY
40673: LIST
40674: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40675: LD_VAR 0 9
40679: PPUSH
40680: LD_VAR 0 12
40684: PPUSH
40685: CALL_OW 325
40689: IFFALSE 40718
// missile := Replace ( missile , missile + 1 , 2 ) ;
40691: LD_ADDR_VAR 0 14
40695: PUSH
40696: LD_VAR 0 14
40700: PPUSH
40701: LD_VAR 0 14
40705: PUSH
40706: LD_INT 1
40708: PLUS
40709: PPUSH
40710: LD_INT 2
40712: PPUSH
40713: CALL_OW 1
40717: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40718: LD_VAR 0 9
40722: PPUSH
40723: LD_VAR 0 13
40727: PPUSH
40728: CALL_OW 325
40732: PUSH
40733: LD_VAR 0 10
40737: PPUSH
40738: CALL_OW 255
40742: PPUSH
40743: LD_VAR 0 13
40747: PPUSH
40748: CALL_OW 325
40752: NOT
40753: AND
40754: IFFALSE 40783
// missile := Replace ( missile , missile + 1 , 3 ) ;
40756: LD_ADDR_VAR 0 14
40760: PUSH
40761: LD_VAR 0 14
40765: PPUSH
40766: LD_VAR 0 14
40770: PUSH
40771: LD_INT 1
40773: PLUS
40774: PPUSH
40775: LD_INT 3
40777: PPUSH
40778: CALL_OW 1
40782: ST_TO_ADDR
// if missile < 2 then
40783: LD_VAR 0 14
40787: PUSH
40788: LD_INT 2
40790: LESS
40791: IFFALSE 40795
// exit ;
40793: GO 41017
// x := GetX ( enemy ) ;
40795: LD_ADDR_VAR 0 4
40799: PUSH
40800: LD_VAR 0 10
40804: PPUSH
40805: CALL_OW 250
40809: ST_TO_ADDR
// y := GetY ( enemy ) ;
40810: LD_ADDR_VAR 0 5
40814: PUSH
40815: LD_VAR 0 10
40819: PPUSH
40820: CALL_OW 251
40824: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40825: LD_ADDR_VAR 0 6
40829: PUSH
40830: LD_VAR 0 4
40834: PUSH
40835: LD_INT 1
40837: NEG
40838: PPUSH
40839: LD_INT 1
40841: PPUSH
40842: CALL_OW 12
40846: PLUS
40847: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40848: LD_ADDR_VAR 0 7
40852: PUSH
40853: LD_VAR 0 5
40857: PUSH
40858: LD_INT 1
40860: NEG
40861: PPUSH
40862: LD_INT 1
40864: PPUSH
40865: CALL_OW 12
40869: PLUS
40870: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40871: LD_VAR 0 6
40875: PPUSH
40876: LD_VAR 0 7
40880: PPUSH
40881: CALL_OW 488
40885: NOT
40886: IFFALSE 40908
// begin _x := x ;
40888: LD_ADDR_VAR 0 6
40892: PUSH
40893: LD_VAR 0 4
40897: ST_TO_ADDR
// _y := y ;
40898: LD_ADDR_VAR 0 7
40902: PUSH
40903: LD_VAR 0 5
40907: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40908: LD_ADDR_VAR 0 3
40912: PUSH
40913: LD_INT 1
40915: PPUSH
40916: LD_VAR 0 14
40920: PPUSH
40921: CALL_OW 12
40925: ST_TO_ADDR
// case i of 1 :
40926: LD_VAR 0 3
40930: PUSH
40931: LD_INT 1
40933: DOUBLE
40934: EQUAL
40935: IFTRUE 40939
40937: GO 40956
40939: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40940: LD_VAR 0 1
40944: PPUSH
40945: LD_VAR 0 10
40949: PPUSH
40950: CALL_OW 115
40954: GO 41017
40956: LD_INT 2
40958: DOUBLE
40959: EQUAL
40960: IFTRUE 40964
40962: GO 40986
40964: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40965: LD_VAR 0 1
40969: PPUSH
40970: LD_VAR 0 6
40974: PPUSH
40975: LD_VAR 0 7
40979: PPUSH
40980: CALL_OW 153
40984: GO 41017
40986: LD_INT 3
40988: DOUBLE
40989: EQUAL
40990: IFTRUE 40994
40992: GO 41016
40994: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40995: LD_VAR 0 1
40999: PPUSH
41000: LD_VAR 0 6
41004: PPUSH
41005: LD_VAR 0 7
41009: PPUSH
41010: CALL_OW 154
41014: GO 41017
41016: POP
// end ;
41017: LD_VAR 0 2
41021: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41022: LD_INT 0
41024: PPUSH
41025: PPUSH
41026: PPUSH
41027: PPUSH
41028: PPUSH
41029: PPUSH
// if not unit or not building then
41030: LD_VAR 0 1
41034: NOT
41035: PUSH
41036: LD_VAR 0 2
41040: NOT
41041: OR
41042: IFFALSE 41046
// exit ;
41044: GO 41204
// x := GetX ( building ) ;
41046: LD_ADDR_VAR 0 5
41050: PUSH
41051: LD_VAR 0 2
41055: PPUSH
41056: CALL_OW 250
41060: ST_TO_ADDR
// y := GetY ( building ) ;
41061: LD_ADDR_VAR 0 6
41065: PUSH
41066: LD_VAR 0 2
41070: PPUSH
41071: CALL_OW 251
41075: ST_TO_ADDR
// for i = 0 to 5 do
41076: LD_ADDR_VAR 0 4
41080: PUSH
41081: DOUBLE
41082: LD_INT 0
41084: DEC
41085: ST_TO_ADDR
41086: LD_INT 5
41088: PUSH
41089: FOR_TO
41090: IFFALSE 41202
// begin _x := ShiftX ( x , i , 3 ) ;
41092: LD_ADDR_VAR 0 7
41096: PUSH
41097: LD_VAR 0 5
41101: PPUSH
41102: LD_VAR 0 4
41106: PPUSH
41107: LD_INT 3
41109: PPUSH
41110: CALL_OW 272
41114: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41115: LD_ADDR_VAR 0 8
41119: PUSH
41120: LD_VAR 0 6
41124: PPUSH
41125: LD_VAR 0 4
41129: PPUSH
41130: LD_INT 3
41132: PPUSH
41133: CALL_OW 273
41137: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41138: LD_VAR 0 7
41142: PPUSH
41143: LD_VAR 0 8
41147: PPUSH
41148: CALL_OW 488
41152: NOT
41153: IFFALSE 41157
// continue ;
41155: GO 41089
// if HexInfo ( _x , _y ) = 0 then
41157: LD_VAR 0 7
41161: PPUSH
41162: LD_VAR 0 8
41166: PPUSH
41167: CALL_OW 428
41171: PUSH
41172: LD_INT 0
41174: EQUAL
41175: IFFALSE 41200
// begin ComMoveXY ( unit , _x , _y ) ;
41177: LD_VAR 0 1
41181: PPUSH
41182: LD_VAR 0 7
41186: PPUSH
41187: LD_VAR 0 8
41191: PPUSH
41192: CALL_OW 111
// exit ;
41196: POP
41197: POP
41198: GO 41204
// end ; end ;
41200: GO 41089
41202: POP
41203: POP
// end ;
41204: LD_VAR 0 3
41208: RET
// export function ScanBase ( side , base_area ) ; begin
41209: LD_INT 0
41211: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41212: LD_ADDR_VAR 0 3
41216: PUSH
41217: LD_VAR 0 2
41221: PPUSH
41222: LD_INT 81
41224: PUSH
41225: LD_VAR 0 1
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PPUSH
41234: CALL_OW 70
41238: ST_TO_ADDR
// end ;
41239: LD_VAR 0 3
41243: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41244: LD_INT 0
41246: PPUSH
41247: PPUSH
41248: PPUSH
41249: PPUSH
// result := false ;
41250: LD_ADDR_VAR 0 2
41254: PUSH
41255: LD_INT 0
41257: ST_TO_ADDR
// side := GetSide ( unit ) ;
41258: LD_ADDR_VAR 0 3
41262: PUSH
41263: LD_VAR 0 1
41267: PPUSH
41268: CALL_OW 255
41272: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41273: LD_ADDR_VAR 0 4
41277: PUSH
41278: LD_VAR 0 1
41282: PPUSH
41283: CALL_OW 248
41287: ST_TO_ADDR
// case nat of 1 :
41288: LD_VAR 0 4
41292: PUSH
41293: LD_INT 1
41295: DOUBLE
41296: EQUAL
41297: IFTRUE 41301
41299: GO 41312
41301: POP
// tech := tech_lassight ; 2 :
41302: LD_ADDR_VAR 0 5
41306: PUSH
41307: LD_INT 12
41309: ST_TO_ADDR
41310: GO 41351
41312: LD_INT 2
41314: DOUBLE
41315: EQUAL
41316: IFTRUE 41320
41318: GO 41331
41320: POP
// tech := tech_mortar ; 3 :
41321: LD_ADDR_VAR 0 5
41325: PUSH
41326: LD_INT 41
41328: ST_TO_ADDR
41329: GO 41351
41331: LD_INT 3
41333: DOUBLE
41334: EQUAL
41335: IFTRUE 41339
41337: GO 41350
41339: POP
// tech := tech_bazooka ; end ;
41340: LD_ADDR_VAR 0 5
41344: PUSH
41345: LD_INT 44
41347: ST_TO_ADDR
41348: GO 41351
41350: POP
// if Researched ( side , tech ) then
41351: LD_VAR 0 3
41355: PPUSH
41356: LD_VAR 0 5
41360: PPUSH
41361: CALL_OW 325
41365: IFFALSE 41392
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41367: LD_ADDR_VAR 0 2
41371: PUSH
41372: LD_INT 5
41374: PUSH
41375: LD_INT 8
41377: PUSH
41378: LD_INT 9
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: LIST
41385: PUSH
41386: LD_VAR 0 4
41390: ARRAY
41391: ST_TO_ADDR
// end ;
41392: LD_VAR 0 2
41396: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41397: LD_INT 0
41399: PPUSH
41400: PPUSH
41401: PPUSH
// if not mines then
41402: LD_VAR 0 2
41406: NOT
41407: IFFALSE 41411
// exit ;
41409: GO 41555
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41411: LD_ADDR_VAR 0 5
41415: PUSH
41416: LD_INT 81
41418: PUSH
41419: LD_VAR 0 1
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 3
41430: PUSH
41431: LD_INT 21
41433: PUSH
41434: LD_INT 3
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PPUSH
41449: CALL_OW 69
41453: ST_TO_ADDR
// for i in mines do
41454: LD_ADDR_VAR 0 4
41458: PUSH
41459: LD_VAR 0 2
41463: PUSH
41464: FOR_IN
41465: IFFALSE 41553
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41467: LD_VAR 0 4
41471: PUSH
41472: LD_INT 1
41474: ARRAY
41475: PPUSH
41476: LD_VAR 0 4
41480: PUSH
41481: LD_INT 2
41483: ARRAY
41484: PPUSH
41485: CALL_OW 458
41489: NOT
41490: IFFALSE 41494
// continue ;
41492: GO 41464
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41494: LD_VAR 0 4
41498: PUSH
41499: LD_INT 1
41501: ARRAY
41502: PPUSH
41503: LD_VAR 0 4
41507: PUSH
41508: LD_INT 2
41510: ARRAY
41511: PPUSH
41512: CALL_OW 428
41516: PUSH
41517: LD_VAR 0 5
41521: IN
41522: IFFALSE 41551
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41524: LD_VAR 0 4
41528: PUSH
41529: LD_INT 1
41531: ARRAY
41532: PPUSH
41533: LD_VAR 0 4
41537: PUSH
41538: LD_INT 2
41540: ARRAY
41541: PPUSH
41542: LD_VAR 0 1
41546: PPUSH
41547: CALL_OW 456
// end ;
41551: GO 41464
41553: POP
41554: POP
// end ;
41555: LD_VAR 0 3
41559: RET
// export function Count ( array ) ; begin
41560: LD_INT 0
41562: PPUSH
// result := array + 0 ;
41563: LD_ADDR_VAR 0 2
41567: PUSH
41568: LD_VAR 0 1
41572: PUSH
41573: LD_INT 0
41575: PLUS
41576: ST_TO_ADDR
// end ;
41577: LD_VAR 0 2
41581: RET
// export function IsEmpty ( building ) ; begin
41582: LD_INT 0
41584: PPUSH
// if not building then
41585: LD_VAR 0 1
41589: NOT
41590: IFFALSE 41594
// exit ;
41592: GO 41637
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41594: LD_ADDR_VAR 0 2
41598: PUSH
41599: LD_VAR 0 1
41603: PUSH
41604: LD_INT 22
41606: PUSH
41607: LD_VAR 0 1
41611: PPUSH
41612: CALL_OW 255
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 58
41623: PUSH
41624: EMPTY
41625: LIST
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PPUSH
41631: CALL_OW 69
41635: IN
41636: ST_TO_ADDR
// end ;
41637: LD_VAR 0 2
41641: RET
// export function IsNotFull ( building ) ; var places ; begin
41642: LD_INT 0
41644: PPUSH
41645: PPUSH
// if not building then
41646: LD_VAR 0 1
41650: NOT
41651: IFFALSE 41655
// exit ;
41653: GO 41683
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
41655: LD_ADDR_VAR 0 2
41659: PUSH
41660: LD_VAR 0 1
41664: PPUSH
41665: LD_INT 3
41667: PUSH
41668: LD_INT 62
41670: PUSH
41671: EMPTY
41672: LIST
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PPUSH
41678: CALL_OW 72
41682: ST_TO_ADDR
// end ;
41683: LD_VAR 0 2
41687: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41688: LD_INT 0
41690: PPUSH
41691: PPUSH
41692: PPUSH
41693: PPUSH
// tmp := [ ] ;
41694: LD_ADDR_VAR 0 3
41698: PUSH
41699: EMPTY
41700: ST_TO_ADDR
// list := [ ] ;
41701: LD_ADDR_VAR 0 5
41705: PUSH
41706: EMPTY
41707: ST_TO_ADDR
// for i = 16 to 25 do
41708: LD_ADDR_VAR 0 4
41712: PUSH
41713: DOUBLE
41714: LD_INT 16
41716: DEC
41717: ST_TO_ADDR
41718: LD_INT 25
41720: PUSH
41721: FOR_TO
41722: IFFALSE 41795
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41724: LD_ADDR_VAR 0 3
41728: PUSH
41729: LD_VAR 0 3
41733: PUSH
41734: LD_INT 22
41736: PUSH
41737: LD_VAR 0 1
41741: PPUSH
41742: CALL_OW 255
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 91
41753: PUSH
41754: LD_VAR 0 1
41758: PUSH
41759: LD_INT 6
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 30
41769: PUSH
41770: LD_VAR 0 4
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: LIST
41783: PUSH
41784: EMPTY
41785: LIST
41786: PPUSH
41787: CALL_OW 69
41791: ADD
41792: ST_TO_ADDR
41793: GO 41721
41795: POP
41796: POP
// for i = 1 to tmp do
41797: LD_ADDR_VAR 0 4
41801: PUSH
41802: DOUBLE
41803: LD_INT 1
41805: DEC
41806: ST_TO_ADDR
41807: LD_VAR 0 3
41811: PUSH
41812: FOR_TO
41813: IFFALSE 41901
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41815: LD_ADDR_VAR 0 5
41819: PUSH
41820: LD_VAR 0 5
41824: PUSH
41825: LD_VAR 0 3
41829: PUSH
41830: LD_VAR 0 4
41834: ARRAY
41835: PPUSH
41836: CALL_OW 266
41840: PUSH
41841: LD_VAR 0 3
41845: PUSH
41846: LD_VAR 0 4
41850: ARRAY
41851: PPUSH
41852: CALL_OW 250
41856: PUSH
41857: LD_VAR 0 3
41861: PUSH
41862: LD_VAR 0 4
41866: ARRAY
41867: PPUSH
41868: CALL_OW 251
41872: PUSH
41873: LD_VAR 0 3
41877: PUSH
41878: LD_VAR 0 4
41882: ARRAY
41883: PPUSH
41884: CALL_OW 254
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: PUSH
41895: EMPTY
41896: LIST
41897: ADD
41898: ST_TO_ADDR
41899: GO 41812
41901: POP
41902: POP
// result := list ;
41903: LD_ADDR_VAR 0 2
41907: PUSH
41908: LD_VAR 0 5
41912: ST_TO_ADDR
// end ;
41913: LD_VAR 0 2
41917: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41918: LD_INT 0
41920: PPUSH
41921: PPUSH
41922: PPUSH
41923: PPUSH
41924: PPUSH
41925: PPUSH
41926: PPUSH
// if not factory then
41927: LD_VAR 0 1
41931: NOT
41932: IFFALSE 41936
// exit ;
41934: GO 42529
// if control = control_apeman then
41936: LD_VAR 0 4
41940: PUSH
41941: LD_INT 5
41943: EQUAL
41944: IFFALSE 42053
// begin tmp := UnitsInside ( factory ) ;
41946: LD_ADDR_VAR 0 8
41950: PUSH
41951: LD_VAR 0 1
41955: PPUSH
41956: CALL_OW 313
41960: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41961: LD_VAR 0 8
41965: PPUSH
41966: LD_INT 25
41968: PUSH
41969: LD_INT 12
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PPUSH
41976: CALL_OW 72
41980: NOT
41981: IFFALSE 41991
// control := control_manual ;
41983: LD_ADDR_VAR 0 4
41987: PUSH
41988: LD_INT 1
41990: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41991: LD_ADDR_VAR 0 8
41995: PUSH
41996: LD_VAR 0 1
42000: PPUSH
42001: CALL 41688 0 1
42005: ST_TO_ADDR
// if tmp then
42006: LD_VAR 0 8
42010: IFFALSE 42053
// begin for i in tmp do
42012: LD_ADDR_VAR 0 7
42016: PUSH
42017: LD_VAR 0 8
42021: PUSH
42022: FOR_IN
42023: IFFALSE 42051
// if i [ 1 ] = b_ext_radio then
42025: LD_VAR 0 7
42029: PUSH
42030: LD_INT 1
42032: ARRAY
42033: PUSH
42034: LD_INT 22
42036: EQUAL
42037: IFFALSE 42049
// begin control := control_remote ;
42039: LD_ADDR_VAR 0 4
42043: PUSH
42044: LD_INT 2
42046: ST_TO_ADDR
// break ;
42047: GO 42051
// end ;
42049: GO 42022
42051: POP
42052: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42053: LD_VAR 0 1
42057: PPUSH
42058: LD_VAR 0 2
42062: PPUSH
42063: LD_VAR 0 3
42067: PPUSH
42068: LD_VAR 0 4
42072: PPUSH
42073: LD_VAR 0 5
42077: PPUSH
42078: CALL_OW 448
42082: IFFALSE 42117
// begin result := [ chassis , engine , control , weapon ] ;
42084: LD_ADDR_VAR 0 6
42088: PUSH
42089: LD_VAR 0 2
42093: PUSH
42094: LD_VAR 0 3
42098: PUSH
42099: LD_VAR 0 4
42103: PUSH
42104: LD_VAR 0 5
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: ST_TO_ADDR
// exit ;
42115: GO 42529
// end ; _chassis := AvailableChassisList ( factory ) ;
42117: LD_ADDR_VAR 0 9
42121: PUSH
42122: LD_VAR 0 1
42126: PPUSH
42127: CALL_OW 475
42131: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42132: LD_ADDR_VAR 0 11
42136: PUSH
42137: LD_VAR 0 1
42141: PPUSH
42142: CALL_OW 476
42146: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42147: LD_ADDR_VAR 0 12
42151: PUSH
42152: LD_VAR 0 1
42156: PPUSH
42157: CALL_OW 477
42161: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42162: LD_ADDR_VAR 0 10
42166: PUSH
42167: LD_VAR 0 1
42171: PPUSH
42172: CALL_OW 478
42176: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42177: LD_VAR 0 9
42181: NOT
42182: PUSH
42183: LD_VAR 0 11
42187: NOT
42188: OR
42189: PUSH
42190: LD_VAR 0 12
42194: NOT
42195: OR
42196: PUSH
42197: LD_VAR 0 10
42201: NOT
42202: OR
42203: IFFALSE 42238
// begin result := [ chassis , engine , control , weapon ] ;
42205: LD_ADDR_VAR 0 6
42209: PUSH
42210: LD_VAR 0 2
42214: PUSH
42215: LD_VAR 0 3
42219: PUSH
42220: LD_VAR 0 4
42224: PUSH
42225: LD_VAR 0 5
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: ST_TO_ADDR
// exit ;
42236: GO 42529
// end ; if not chassis in _chassis then
42238: LD_VAR 0 2
42242: PUSH
42243: LD_VAR 0 9
42247: IN
42248: NOT
42249: IFFALSE 42275
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42251: LD_ADDR_VAR 0 2
42255: PUSH
42256: LD_VAR 0 9
42260: PUSH
42261: LD_INT 1
42263: PPUSH
42264: LD_VAR 0 9
42268: PPUSH
42269: CALL_OW 12
42273: ARRAY
42274: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42275: LD_VAR 0 2
42279: PPUSH
42280: LD_VAR 0 3
42284: PPUSH
42285: CALL 42534 0 2
42289: NOT
42290: IFFALSE 42349
// repeat engine := _engine [ 1 ] ;
42292: LD_ADDR_VAR 0 3
42296: PUSH
42297: LD_VAR 0 11
42301: PUSH
42302: LD_INT 1
42304: ARRAY
42305: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42306: LD_ADDR_VAR 0 11
42310: PUSH
42311: LD_VAR 0 11
42315: PPUSH
42316: LD_INT 1
42318: PPUSH
42319: CALL_OW 3
42323: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42324: LD_VAR 0 2
42328: PPUSH
42329: LD_VAR 0 3
42333: PPUSH
42334: CALL 42534 0 2
42338: PUSH
42339: LD_VAR 0 11
42343: PUSH
42344: EMPTY
42345: EQUAL
42346: OR
42347: IFFALSE 42292
// if not control in _control then
42349: LD_VAR 0 4
42353: PUSH
42354: LD_VAR 0 12
42358: IN
42359: NOT
42360: IFFALSE 42386
// control := _control [ rand ( 1 , _control ) ] ;
42362: LD_ADDR_VAR 0 4
42366: PUSH
42367: LD_VAR 0 12
42371: PUSH
42372: LD_INT 1
42374: PPUSH
42375: LD_VAR 0 12
42379: PPUSH
42380: CALL_OW 12
42384: ARRAY
42385: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42386: LD_VAR 0 2
42390: PPUSH
42391: LD_VAR 0 5
42395: PPUSH
42396: CALL 42754 0 2
42400: NOT
42401: IFFALSE 42460
// repeat weapon := _weapon [ 1 ] ;
42403: LD_ADDR_VAR 0 5
42407: PUSH
42408: LD_VAR 0 10
42412: PUSH
42413: LD_INT 1
42415: ARRAY
42416: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42417: LD_ADDR_VAR 0 10
42421: PUSH
42422: LD_VAR 0 10
42426: PPUSH
42427: LD_INT 1
42429: PPUSH
42430: CALL_OW 3
42434: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42435: LD_VAR 0 2
42439: PPUSH
42440: LD_VAR 0 5
42444: PPUSH
42445: CALL 42754 0 2
42449: PUSH
42450: LD_VAR 0 10
42454: PUSH
42455: EMPTY
42456: EQUAL
42457: OR
42458: IFFALSE 42403
// result := [ ] ;
42460: LD_ADDR_VAR 0 6
42464: PUSH
42465: EMPTY
42466: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42467: LD_VAR 0 1
42471: PPUSH
42472: LD_VAR 0 2
42476: PPUSH
42477: LD_VAR 0 3
42481: PPUSH
42482: LD_VAR 0 4
42486: PPUSH
42487: LD_VAR 0 5
42491: PPUSH
42492: CALL_OW 448
42496: IFFALSE 42529
// result := [ chassis , engine , control , weapon ] ;
42498: LD_ADDR_VAR 0 6
42502: PUSH
42503: LD_VAR 0 2
42507: PUSH
42508: LD_VAR 0 3
42512: PUSH
42513: LD_VAR 0 4
42517: PUSH
42518: LD_VAR 0 5
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: ST_TO_ADDR
// end ;
42529: LD_VAR 0 6
42533: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42534: LD_INT 0
42536: PPUSH
// if not chassis or not engine then
42537: LD_VAR 0 1
42541: NOT
42542: PUSH
42543: LD_VAR 0 2
42547: NOT
42548: OR
42549: IFFALSE 42553
// exit ;
42551: GO 42749
// case engine of engine_solar :
42553: LD_VAR 0 2
42557: PUSH
42558: LD_INT 2
42560: DOUBLE
42561: EQUAL
42562: IFTRUE 42566
42564: GO 42604
42566: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42567: LD_ADDR_VAR 0 3
42571: PUSH
42572: LD_INT 11
42574: PUSH
42575: LD_INT 12
42577: PUSH
42578: LD_INT 13
42580: PUSH
42581: LD_INT 14
42583: PUSH
42584: LD_INT 1
42586: PUSH
42587: LD_INT 2
42589: PUSH
42590: LD_INT 3
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: ST_TO_ADDR
42602: GO 42733
42604: LD_INT 1
42606: DOUBLE
42607: EQUAL
42608: IFTRUE 42612
42610: GO 42674
42612: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42613: LD_ADDR_VAR 0 3
42617: PUSH
42618: LD_INT 11
42620: PUSH
42621: LD_INT 12
42623: PUSH
42624: LD_INT 13
42626: PUSH
42627: LD_INT 14
42629: PUSH
42630: LD_INT 1
42632: PUSH
42633: LD_INT 2
42635: PUSH
42636: LD_INT 3
42638: PUSH
42639: LD_INT 4
42641: PUSH
42642: LD_INT 5
42644: PUSH
42645: LD_INT 21
42647: PUSH
42648: LD_INT 23
42650: PUSH
42651: LD_INT 22
42653: PUSH
42654: LD_INT 24
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: ST_TO_ADDR
42672: GO 42733
42674: LD_INT 3
42676: DOUBLE
42677: EQUAL
42678: IFTRUE 42682
42680: GO 42732
42682: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42683: LD_ADDR_VAR 0 3
42687: PUSH
42688: LD_INT 13
42690: PUSH
42691: LD_INT 14
42693: PUSH
42694: LD_INT 2
42696: PUSH
42697: LD_INT 3
42699: PUSH
42700: LD_INT 4
42702: PUSH
42703: LD_INT 5
42705: PUSH
42706: LD_INT 21
42708: PUSH
42709: LD_INT 22
42711: PUSH
42712: LD_INT 23
42714: PUSH
42715: LD_INT 24
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: ST_TO_ADDR
42730: GO 42733
42732: POP
// result := ( chassis in result ) ;
42733: LD_ADDR_VAR 0 3
42737: PUSH
42738: LD_VAR 0 1
42742: PUSH
42743: LD_VAR 0 3
42747: IN
42748: ST_TO_ADDR
// end ;
42749: LD_VAR 0 3
42753: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42754: LD_INT 0
42756: PPUSH
// if not chassis or not weapon then
42757: LD_VAR 0 1
42761: NOT
42762: PUSH
42763: LD_VAR 0 2
42767: NOT
42768: OR
42769: IFFALSE 42773
// exit ;
42771: GO 43833
// case weapon of us_machine_gun :
42773: LD_VAR 0 2
42777: PUSH
42778: LD_INT 2
42780: DOUBLE
42781: EQUAL
42782: IFTRUE 42786
42784: GO 42816
42786: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42787: LD_ADDR_VAR 0 3
42791: PUSH
42792: LD_INT 1
42794: PUSH
42795: LD_INT 2
42797: PUSH
42798: LD_INT 3
42800: PUSH
42801: LD_INT 4
42803: PUSH
42804: LD_INT 5
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: ST_TO_ADDR
42814: GO 43817
42816: LD_INT 3
42818: DOUBLE
42819: EQUAL
42820: IFTRUE 42824
42822: GO 42854
42824: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42825: LD_ADDR_VAR 0 3
42829: PUSH
42830: LD_INT 1
42832: PUSH
42833: LD_INT 2
42835: PUSH
42836: LD_INT 3
42838: PUSH
42839: LD_INT 4
42841: PUSH
42842: LD_INT 5
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: ST_TO_ADDR
42852: GO 43817
42854: LD_INT 11
42856: DOUBLE
42857: EQUAL
42858: IFTRUE 42862
42860: GO 42892
42862: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42863: LD_ADDR_VAR 0 3
42867: PUSH
42868: LD_INT 1
42870: PUSH
42871: LD_INT 2
42873: PUSH
42874: LD_INT 3
42876: PUSH
42877: LD_INT 4
42879: PUSH
42880: LD_INT 5
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: ST_TO_ADDR
42890: GO 43817
42892: LD_INT 4
42894: DOUBLE
42895: EQUAL
42896: IFTRUE 42900
42898: GO 42926
42900: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42901: LD_ADDR_VAR 0 3
42905: PUSH
42906: LD_INT 2
42908: PUSH
42909: LD_INT 3
42911: PUSH
42912: LD_INT 4
42914: PUSH
42915: LD_INT 5
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: ST_TO_ADDR
42924: GO 43817
42926: LD_INT 5
42928: DOUBLE
42929: EQUAL
42930: IFTRUE 42934
42932: GO 42960
42934: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42935: LD_ADDR_VAR 0 3
42939: PUSH
42940: LD_INT 2
42942: PUSH
42943: LD_INT 3
42945: PUSH
42946: LD_INT 4
42948: PUSH
42949: LD_INT 5
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: ST_TO_ADDR
42958: GO 43817
42960: LD_INT 9
42962: DOUBLE
42963: EQUAL
42964: IFTRUE 42968
42966: GO 42994
42968: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42969: LD_ADDR_VAR 0 3
42973: PUSH
42974: LD_INT 2
42976: PUSH
42977: LD_INT 3
42979: PUSH
42980: LD_INT 4
42982: PUSH
42983: LD_INT 5
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: ST_TO_ADDR
42992: GO 43817
42994: LD_INT 7
42996: DOUBLE
42997: EQUAL
42998: IFTRUE 43002
43000: GO 43028
43002: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43003: LD_ADDR_VAR 0 3
43007: PUSH
43008: LD_INT 2
43010: PUSH
43011: LD_INT 3
43013: PUSH
43014: LD_INT 4
43016: PUSH
43017: LD_INT 5
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: ST_TO_ADDR
43026: GO 43817
43028: LD_INT 12
43030: DOUBLE
43031: EQUAL
43032: IFTRUE 43036
43034: GO 43062
43036: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43037: LD_ADDR_VAR 0 3
43041: PUSH
43042: LD_INT 2
43044: PUSH
43045: LD_INT 3
43047: PUSH
43048: LD_INT 4
43050: PUSH
43051: LD_INT 5
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: ST_TO_ADDR
43060: GO 43817
43062: LD_INT 13
43064: DOUBLE
43065: EQUAL
43066: IFTRUE 43070
43068: GO 43096
43070: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43071: LD_ADDR_VAR 0 3
43075: PUSH
43076: LD_INT 2
43078: PUSH
43079: LD_INT 3
43081: PUSH
43082: LD_INT 4
43084: PUSH
43085: LD_INT 5
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: ST_TO_ADDR
43094: GO 43817
43096: LD_INT 14
43098: DOUBLE
43099: EQUAL
43100: IFTRUE 43104
43102: GO 43122
43104: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43105: LD_ADDR_VAR 0 3
43109: PUSH
43110: LD_INT 4
43112: PUSH
43113: LD_INT 5
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: ST_TO_ADDR
43120: GO 43817
43122: LD_INT 6
43124: DOUBLE
43125: EQUAL
43126: IFTRUE 43130
43128: GO 43148
43130: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43131: LD_ADDR_VAR 0 3
43135: PUSH
43136: LD_INT 4
43138: PUSH
43139: LD_INT 5
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: ST_TO_ADDR
43146: GO 43817
43148: LD_INT 10
43150: DOUBLE
43151: EQUAL
43152: IFTRUE 43156
43154: GO 43174
43156: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43157: LD_ADDR_VAR 0 3
43161: PUSH
43162: LD_INT 4
43164: PUSH
43165: LD_INT 5
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: ST_TO_ADDR
43172: GO 43817
43174: LD_INT 22
43176: DOUBLE
43177: EQUAL
43178: IFTRUE 43182
43180: GO 43208
43182: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43183: LD_ADDR_VAR 0 3
43187: PUSH
43188: LD_INT 11
43190: PUSH
43191: LD_INT 12
43193: PUSH
43194: LD_INT 13
43196: PUSH
43197: LD_INT 14
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: ST_TO_ADDR
43206: GO 43817
43208: LD_INT 23
43210: DOUBLE
43211: EQUAL
43212: IFTRUE 43216
43214: GO 43242
43216: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43217: LD_ADDR_VAR 0 3
43221: PUSH
43222: LD_INT 11
43224: PUSH
43225: LD_INT 12
43227: PUSH
43228: LD_INT 13
43230: PUSH
43231: LD_INT 14
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: ST_TO_ADDR
43240: GO 43817
43242: LD_INT 24
43244: DOUBLE
43245: EQUAL
43246: IFTRUE 43250
43248: GO 43276
43250: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43251: LD_ADDR_VAR 0 3
43255: PUSH
43256: LD_INT 11
43258: PUSH
43259: LD_INT 12
43261: PUSH
43262: LD_INT 13
43264: PUSH
43265: LD_INT 14
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: ST_TO_ADDR
43274: GO 43817
43276: LD_INT 30
43278: DOUBLE
43279: EQUAL
43280: IFTRUE 43284
43282: GO 43310
43284: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43285: LD_ADDR_VAR 0 3
43289: PUSH
43290: LD_INT 11
43292: PUSH
43293: LD_INT 12
43295: PUSH
43296: LD_INT 13
43298: PUSH
43299: LD_INT 14
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: ST_TO_ADDR
43308: GO 43817
43310: LD_INT 25
43312: DOUBLE
43313: EQUAL
43314: IFTRUE 43318
43316: GO 43336
43318: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43319: LD_ADDR_VAR 0 3
43323: PUSH
43324: LD_INT 13
43326: PUSH
43327: LD_INT 14
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: ST_TO_ADDR
43334: GO 43817
43336: LD_INT 27
43338: DOUBLE
43339: EQUAL
43340: IFTRUE 43344
43342: GO 43362
43344: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43345: LD_ADDR_VAR 0 3
43349: PUSH
43350: LD_INT 13
43352: PUSH
43353: LD_INT 14
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: ST_TO_ADDR
43360: GO 43817
43362: LD_INT 92
43364: DOUBLE
43365: EQUAL
43366: IFTRUE 43370
43368: GO 43396
43370: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43371: LD_ADDR_VAR 0 3
43375: PUSH
43376: LD_INT 11
43378: PUSH
43379: LD_INT 12
43381: PUSH
43382: LD_INT 13
43384: PUSH
43385: LD_INT 14
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: ST_TO_ADDR
43394: GO 43817
43396: LD_INT 28
43398: DOUBLE
43399: EQUAL
43400: IFTRUE 43404
43402: GO 43422
43404: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43405: LD_ADDR_VAR 0 3
43409: PUSH
43410: LD_INT 13
43412: PUSH
43413: LD_INT 14
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: ST_TO_ADDR
43420: GO 43817
43422: LD_INT 29
43424: DOUBLE
43425: EQUAL
43426: IFTRUE 43430
43428: GO 43448
43430: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43431: LD_ADDR_VAR 0 3
43435: PUSH
43436: LD_INT 13
43438: PUSH
43439: LD_INT 14
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: ST_TO_ADDR
43446: GO 43817
43448: LD_INT 31
43450: DOUBLE
43451: EQUAL
43452: IFTRUE 43456
43454: GO 43474
43456: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43457: LD_ADDR_VAR 0 3
43461: PUSH
43462: LD_INT 13
43464: PUSH
43465: LD_INT 14
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: ST_TO_ADDR
43472: GO 43817
43474: LD_INT 26
43476: DOUBLE
43477: EQUAL
43478: IFTRUE 43482
43480: GO 43500
43482: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43483: LD_ADDR_VAR 0 3
43487: PUSH
43488: LD_INT 13
43490: PUSH
43491: LD_INT 14
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: ST_TO_ADDR
43498: GO 43817
43500: LD_INT 42
43502: DOUBLE
43503: EQUAL
43504: IFTRUE 43508
43506: GO 43534
43508: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43509: LD_ADDR_VAR 0 3
43513: PUSH
43514: LD_INT 21
43516: PUSH
43517: LD_INT 22
43519: PUSH
43520: LD_INT 23
43522: PUSH
43523: LD_INT 24
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: ST_TO_ADDR
43532: GO 43817
43534: LD_INT 43
43536: DOUBLE
43537: EQUAL
43538: IFTRUE 43542
43540: GO 43568
43542: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43543: LD_ADDR_VAR 0 3
43547: PUSH
43548: LD_INT 21
43550: PUSH
43551: LD_INT 22
43553: PUSH
43554: LD_INT 23
43556: PUSH
43557: LD_INT 24
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: ST_TO_ADDR
43566: GO 43817
43568: LD_INT 44
43570: DOUBLE
43571: EQUAL
43572: IFTRUE 43576
43574: GO 43602
43576: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43577: LD_ADDR_VAR 0 3
43581: PUSH
43582: LD_INT 21
43584: PUSH
43585: LD_INT 22
43587: PUSH
43588: LD_INT 23
43590: PUSH
43591: LD_INT 24
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: ST_TO_ADDR
43600: GO 43817
43602: LD_INT 45
43604: DOUBLE
43605: EQUAL
43606: IFTRUE 43610
43608: GO 43636
43610: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43611: LD_ADDR_VAR 0 3
43615: PUSH
43616: LD_INT 21
43618: PUSH
43619: LD_INT 22
43621: PUSH
43622: LD_INT 23
43624: PUSH
43625: LD_INT 24
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: ST_TO_ADDR
43634: GO 43817
43636: LD_INT 49
43638: DOUBLE
43639: EQUAL
43640: IFTRUE 43644
43642: GO 43670
43644: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43645: LD_ADDR_VAR 0 3
43649: PUSH
43650: LD_INT 21
43652: PUSH
43653: LD_INT 22
43655: PUSH
43656: LD_INT 23
43658: PUSH
43659: LD_INT 24
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: ST_TO_ADDR
43668: GO 43817
43670: LD_INT 51
43672: DOUBLE
43673: EQUAL
43674: IFTRUE 43678
43676: GO 43704
43678: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43679: LD_ADDR_VAR 0 3
43683: PUSH
43684: LD_INT 21
43686: PUSH
43687: LD_INT 22
43689: PUSH
43690: LD_INT 23
43692: PUSH
43693: LD_INT 24
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: ST_TO_ADDR
43702: GO 43817
43704: LD_INT 52
43706: DOUBLE
43707: EQUAL
43708: IFTRUE 43712
43710: GO 43738
43712: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43713: LD_ADDR_VAR 0 3
43717: PUSH
43718: LD_INT 21
43720: PUSH
43721: LD_INT 22
43723: PUSH
43724: LD_INT 23
43726: PUSH
43727: LD_INT 24
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: ST_TO_ADDR
43736: GO 43817
43738: LD_INT 53
43740: DOUBLE
43741: EQUAL
43742: IFTRUE 43746
43744: GO 43764
43746: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43747: LD_ADDR_VAR 0 3
43751: PUSH
43752: LD_INT 23
43754: PUSH
43755: LD_INT 24
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: ST_TO_ADDR
43762: GO 43817
43764: LD_INT 46
43766: DOUBLE
43767: EQUAL
43768: IFTRUE 43772
43770: GO 43790
43772: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43773: LD_ADDR_VAR 0 3
43777: PUSH
43778: LD_INT 23
43780: PUSH
43781: LD_INT 24
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: ST_TO_ADDR
43788: GO 43817
43790: LD_INT 47
43792: DOUBLE
43793: EQUAL
43794: IFTRUE 43798
43796: GO 43816
43798: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43799: LD_ADDR_VAR 0 3
43803: PUSH
43804: LD_INT 23
43806: PUSH
43807: LD_INT 24
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: ST_TO_ADDR
43814: GO 43817
43816: POP
// result := ( chassis in result ) ;
43817: LD_ADDR_VAR 0 3
43821: PUSH
43822: LD_VAR 0 1
43826: PUSH
43827: LD_VAR 0 3
43831: IN
43832: ST_TO_ADDR
// end ;
43833: LD_VAR 0 3
43837: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43838: LD_INT 0
43840: PPUSH
43841: PPUSH
43842: PPUSH
43843: PPUSH
43844: PPUSH
43845: PPUSH
43846: PPUSH
// result := array ;
43847: LD_ADDR_VAR 0 5
43851: PUSH
43852: LD_VAR 0 1
43856: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43857: LD_VAR 0 1
43861: NOT
43862: PUSH
43863: LD_VAR 0 2
43867: NOT
43868: OR
43869: PUSH
43870: LD_VAR 0 3
43874: NOT
43875: OR
43876: PUSH
43877: LD_VAR 0 2
43881: PUSH
43882: LD_VAR 0 1
43886: GREATER
43887: OR
43888: PUSH
43889: LD_VAR 0 3
43893: PUSH
43894: LD_VAR 0 1
43898: GREATER
43899: OR
43900: IFFALSE 43904
// exit ;
43902: GO 44200
// if direction then
43904: LD_VAR 0 4
43908: IFFALSE 43972
// begin d := 1 ;
43910: LD_ADDR_VAR 0 9
43914: PUSH
43915: LD_INT 1
43917: ST_TO_ADDR
// if i_from > i_to then
43918: LD_VAR 0 2
43922: PUSH
43923: LD_VAR 0 3
43927: GREATER
43928: IFFALSE 43954
// length := ( array - i_from ) + i_to else
43930: LD_ADDR_VAR 0 11
43934: PUSH
43935: LD_VAR 0 1
43939: PUSH
43940: LD_VAR 0 2
43944: MINUS
43945: PUSH
43946: LD_VAR 0 3
43950: PLUS
43951: ST_TO_ADDR
43952: GO 43970
// length := i_to - i_from ;
43954: LD_ADDR_VAR 0 11
43958: PUSH
43959: LD_VAR 0 3
43963: PUSH
43964: LD_VAR 0 2
43968: MINUS
43969: ST_TO_ADDR
// end else
43970: GO 44033
// begin d := - 1 ;
43972: LD_ADDR_VAR 0 9
43976: PUSH
43977: LD_INT 1
43979: NEG
43980: ST_TO_ADDR
// if i_from > i_to then
43981: LD_VAR 0 2
43985: PUSH
43986: LD_VAR 0 3
43990: GREATER
43991: IFFALSE 44011
// length := i_from - i_to else
43993: LD_ADDR_VAR 0 11
43997: PUSH
43998: LD_VAR 0 2
44002: PUSH
44003: LD_VAR 0 3
44007: MINUS
44008: ST_TO_ADDR
44009: GO 44033
// length := ( array - i_to ) + i_from ;
44011: LD_ADDR_VAR 0 11
44015: PUSH
44016: LD_VAR 0 1
44020: PUSH
44021: LD_VAR 0 3
44025: MINUS
44026: PUSH
44027: LD_VAR 0 2
44031: PLUS
44032: ST_TO_ADDR
// end ; if not length then
44033: LD_VAR 0 11
44037: NOT
44038: IFFALSE 44042
// exit ;
44040: GO 44200
// tmp := array ;
44042: LD_ADDR_VAR 0 10
44046: PUSH
44047: LD_VAR 0 1
44051: ST_TO_ADDR
// for i = 1 to length do
44052: LD_ADDR_VAR 0 6
44056: PUSH
44057: DOUBLE
44058: LD_INT 1
44060: DEC
44061: ST_TO_ADDR
44062: LD_VAR 0 11
44066: PUSH
44067: FOR_TO
44068: IFFALSE 44188
// begin for j = 1 to array do
44070: LD_ADDR_VAR 0 7
44074: PUSH
44075: DOUBLE
44076: LD_INT 1
44078: DEC
44079: ST_TO_ADDR
44080: LD_VAR 0 1
44084: PUSH
44085: FOR_TO
44086: IFFALSE 44174
// begin k := j + d ;
44088: LD_ADDR_VAR 0 8
44092: PUSH
44093: LD_VAR 0 7
44097: PUSH
44098: LD_VAR 0 9
44102: PLUS
44103: ST_TO_ADDR
// if k > array then
44104: LD_VAR 0 8
44108: PUSH
44109: LD_VAR 0 1
44113: GREATER
44114: IFFALSE 44124
// k := 1 ;
44116: LD_ADDR_VAR 0 8
44120: PUSH
44121: LD_INT 1
44123: ST_TO_ADDR
// if not k then
44124: LD_VAR 0 8
44128: NOT
44129: IFFALSE 44141
// k := array ;
44131: LD_ADDR_VAR 0 8
44135: PUSH
44136: LD_VAR 0 1
44140: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44141: LD_ADDR_VAR 0 10
44145: PUSH
44146: LD_VAR 0 10
44150: PPUSH
44151: LD_VAR 0 8
44155: PPUSH
44156: LD_VAR 0 1
44160: PUSH
44161: LD_VAR 0 7
44165: ARRAY
44166: PPUSH
44167: CALL_OW 1
44171: ST_TO_ADDR
// end ;
44172: GO 44085
44174: POP
44175: POP
// array := tmp ;
44176: LD_ADDR_VAR 0 1
44180: PUSH
44181: LD_VAR 0 10
44185: ST_TO_ADDR
// end ;
44186: GO 44067
44188: POP
44189: POP
// result := array ;
44190: LD_ADDR_VAR 0 5
44194: PUSH
44195: LD_VAR 0 1
44199: ST_TO_ADDR
// end ;
44200: LD_VAR 0 5
44204: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44205: LD_INT 0
44207: PPUSH
44208: PPUSH
// result := 0 ;
44209: LD_ADDR_VAR 0 3
44213: PUSH
44214: LD_INT 0
44216: ST_TO_ADDR
// if not array or not value in array then
44217: LD_VAR 0 1
44221: NOT
44222: PUSH
44223: LD_VAR 0 2
44227: PUSH
44228: LD_VAR 0 1
44232: IN
44233: NOT
44234: OR
44235: IFFALSE 44239
// exit ;
44237: GO 44293
// for i = 1 to array do
44239: LD_ADDR_VAR 0 4
44243: PUSH
44244: DOUBLE
44245: LD_INT 1
44247: DEC
44248: ST_TO_ADDR
44249: LD_VAR 0 1
44253: PUSH
44254: FOR_TO
44255: IFFALSE 44291
// if value = array [ i ] then
44257: LD_VAR 0 2
44261: PUSH
44262: LD_VAR 0 1
44266: PUSH
44267: LD_VAR 0 4
44271: ARRAY
44272: EQUAL
44273: IFFALSE 44289
// begin result := i ;
44275: LD_ADDR_VAR 0 3
44279: PUSH
44280: LD_VAR 0 4
44284: ST_TO_ADDR
// exit ;
44285: POP
44286: POP
44287: GO 44293
// end ;
44289: GO 44254
44291: POP
44292: POP
// end ;
44293: LD_VAR 0 3
44297: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44298: LD_INT 0
44300: PPUSH
// vc_chassis := chassis ;
44301: LD_ADDR_OWVAR 37
44305: PUSH
44306: LD_VAR 0 1
44310: ST_TO_ADDR
// vc_engine := engine ;
44311: LD_ADDR_OWVAR 39
44315: PUSH
44316: LD_VAR 0 2
44320: ST_TO_ADDR
// vc_control := control ;
44321: LD_ADDR_OWVAR 38
44325: PUSH
44326: LD_VAR 0 3
44330: ST_TO_ADDR
// vc_weapon := weapon ;
44331: LD_ADDR_OWVAR 40
44335: PUSH
44336: LD_VAR 0 4
44340: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44341: LD_ADDR_OWVAR 41
44345: PUSH
44346: LD_VAR 0 5
44350: ST_TO_ADDR
// end ;
44351: LD_VAR 0 6
44355: RET
// export function WantPlant ( unit ) ; var task ; begin
44356: LD_INT 0
44358: PPUSH
44359: PPUSH
// result := false ;
44360: LD_ADDR_VAR 0 2
44364: PUSH
44365: LD_INT 0
44367: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44368: LD_ADDR_VAR 0 3
44372: PUSH
44373: LD_VAR 0 1
44377: PPUSH
44378: CALL_OW 437
44382: ST_TO_ADDR
// if task then
44383: LD_VAR 0 3
44387: IFFALSE 44415
// if task [ 1 ] [ 1 ] = p then
44389: LD_VAR 0 3
44393: PUSH
44394: LD_INT 1
44396: ARRAY
44397: PUSH
44398: LD_INT 1
44400: ARRAY
44401: PUSH
44402: LD_STRING p
44404: EQUAL
44405: IFFALSE 44415
// result := true ;
44407: LD_ADDR_VAR 0 2
44411: PUSH
44412: LD_INT 1
44414: ST_TO_ADDR
// end ;
44415: LD_VAR 0 2
44419: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44420: LD_INT 0
44422: PPUSH
44423: PPUSH
44424: PPUSH
44425: PPUSH
// if pos < 1 then
44426: LD_VAR 0 2
44430: PUSH
44431: LD_INT 1
44433: LESS
44434: IFFALSE 44438
// exit ;
44436: GO 44741
// if pos = 1 then
44438: LD_VAR 0 2
44442: PUSH
44443: LD_INT 1
44445: EQUAL
44446: IFFALSE 44479
// result := Replace ( arr , pos [ 1 ] , value ) else
44448: LD_ADDR_VAR 0 4
44452: PUSH
44453: LD_VAR 0 1
44457: PPUSH
44458: LD_VAR 0 2
44462: PUSH
44463: LD_INT 1
44465: ARRAY
44466: PPUSH
44467: LD_VAR 0 3
44471: PPUSH
44472: CALL_OW 1
44476: ST_TO_ADDR
44477: GO 44741
// begin tmp := arr ;
44479: LD_ADDR_VAR 0 6
44483: PUSH
44484: LD_VAR 0 1
44488: ST_TO_ADDR
// s_arr := [ tmp ] ;
44489: LD_ADDR_VAR 0 7
44493: PUSH
44494: LD_VAR 0 6
44498: PUSH
44499: EMPTY
44500: LIST
44501: ST_TO_ADDR
// for i = 1 to pos - 1 do
44502: LD_ADDR_VAR 0 5
44506: PUSH
44507: DOUBLE
44508: LD_INT 1
44510: DEC
44511: ST_TO_ADDR
44512: LD_VAR 0 2
44516: PUSH
44517: LD_INT 1
44519: MINUS
44520: PUSH
44521: FOR_TO
44522: IFFALSE 44567
// begin tmp := tmp [ pos [ i ] ] ;
44524: LD_ADDR_VAR 0 6
44528: PUSH
44529: LD_VAR 0 6
44533: PUSH
44534: LD_VAR 0 2
44538: PUSH
44539: LD_VAR 0 5
44543: ARRAY
44544: ARRAY
44545: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44546: LD_ADDR_VAR 0 7
44550: PUSH
44551: LD_VAR 0 7
44555: PUSH
44556: LD_VAR 0 6
44560: PUSH
44561: EMPTY
44562: LIST
44563: ADD
44564: ST_TO_ADDR
// end ;
44565: GO 44521
44567: POP
44568: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44569: LD_ADDR_VAR 0 6
44573: PUSH
44574: LD_VAR 0 6
44578: PPUSH
44579: LD_VAR 0 2
44583: PUSH
44584: LD_VAR 0 2
44588: ARRAY
44589: PPUSH
44590: LD_VAR 0 3
44594: PPUSH
44595: CALL_OW 1
44599: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44600: LD_ADDR_VAR 0 7
44604: PUSH
44605: LD_VAR 0 7
44609: PPUSH
44610: LD_VAR 0 7
44614: PPUSH
44615: LD_VAR 0 6
44619: PPUSH
44620: CALL_OW 1
44624: ST_TO_ADDR
// for i = s_arr downto 2 do
44625: LD_ADDR_VAR 0 5
44629: PUSH
44630: DOUBLE
44631: LD_VAR 0 7
44635: INC
44636: ST_TO_ADDR
44637: LD_INT 2
44639: PUSH
44640: FOR_DOWNTO
44641: IFFALSE 44725
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44643: LD_ADDR_VAR 0 6
44647: PUSH
44648: LD_VAR 0 7
44652: PUSH
44653: LD_VAR 0 5
44657: PUSH
44658: LD_INT 1
44660: MINUS
44661: ARRAY
44662: PPUSH
44663: LD_VAR 0 2
44667: PUSH
44668: LD_VAR 0 5
44672: PUSH
44673: LD_INT 1
44675: MINUS
44676: ARRAY
44677: PPUSH
44678: LD_VAR 0 7
44682: PUSH
44683: LD_VAR 0 5
44687: ARRAY
44688: PPUSH
44689: CALL_OW 1
44693: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44694: LD_ADDR_VAR 0 7
44698: PUSH
44699: LD_VAR 0 7
44703: PPUSH
44704: LD_VAR 0 5
44708: PUSH
44709: LD_INT 1
44711: MINUS
44712: PPUSH
44713: LD_VAR 0 6
44717: PPUSH
44718: CALL_OW 1
44722: ST_TO_ADDR
// end ;
44723: GO 44640
44725: POP
44726: POP
// result := s_arr [ 1 ] ;
44727: LD_ADDR_VAR 0 4
44731: PUSH
44732: LD_VAR 0 7
44736: PUSH
44737: LD_INT 1
44739: ARRAY
44740: ST_TO_ADDR
// end ; end ;
44741: LD_VAR 0 4
44745: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44746: LD_INT 0
44748: PPUSH
44749: PPUSH
// if not list then
44750: LD_VAR 0 1
44754: NOT
44755: IFFALSE 44759
// exit ;
44757: GO 44850
// i := list [ pos1 ] ;
44759: LD_ADDR_VAR 0 5
44763: PUSH
44764: LD_VAR 0 1
44768: PUSH
44769: LD_VAR 0 2
44773: ARRAY
44774: ST_TO_ADDR
// if not i then
44775: LD_VAR 0 5
44779: NOT
44780: IFFALSE 44784
// exit ;
44782: GO 44850
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44784: LD_ADDR_VAR 0 1
44788: PUSH
44789: LD_VAR 0 1
44793: PPUSH
44794: LD_VAR 0 2
44798: PPUSH
44799: LD_VAR 0 1
44803: PUSH
44804: LD_VAR 0 3
44808: ARRAY
44809: PPUSH
44810: CALL_OW 1
44814: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44815: LD_ADDR_VAR 0 1
44819: PUSH
44820: LD_VAR 0 1
44824: PPUSH
44825: LD_VAR 0 3
44829: PPUSH
44830: LD_VAR 0 5
44834: PPUSH
44835: CALL_OW 1
44839: ST_TO_ADDR
// result := list ;
44840: LD_ADDR_VAR 0 4
44844: PUSH
44845: LD_VAR 0 1
44849: ST_TO_ADDR
// end ;
44850: LD_VAR 0 4
44854: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44855: LD_INT 0
44857: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44858: LD_ADDR_VAR 0 5
44862: PUSH
44863: LD_VAR 0 1
44867: PPUSH
44868: CALL_OW 250
44872: PPUSH
44873: LD_VAR 0 1
44877: PPUSH
44878: CALL_OW 251
44882: PPUSH
44883: LD_VAR 0 2
44887: PPUSH
44888: LD_VAR 0 3
44892: PPUSH
44893: LD_VAR 0 4
44897: PPUSH
44898: CALL 45276 0 5
44902: ST_TO_ADDR
// end ;
44903: LD_VAR 0 5
44907: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
44908: LD_INT 0
44910: PPUSH
44911: PPUSH
44912: PPUSH
44913: PPUSH
// if not list or not unit then
44914: LD_VAR 0 2
44918: NOT
44919: PUSH
44920: LD_VAR 0 1
44924: NOT
44925: OR
44926: IFFALSE 44930
// exit ;
44928: GO 45271
// result := [ ] ;
44930: LD_ADDR_VAR 0 5
44934: PUSH
44935: EMPTY
44936: ST_TO_ADDR
// for i in list do
44937: LD_ADDR_VAR 0 6
44941: PUSH
44942: LD_VAR 0 2
44946: PUSH
44947: FOR_IN
44948: IFFALSE 45166
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44950: LD_ADDR_VAR 0 8
44954: PUSH
44955: LD_VAR 0 1
44959: PPUSH
44960: LD_VAR 0 6
44964: PUSH
44965: LD_INT 1
44967: ARRAY
44968: PPUSH
44969: LD_VAR 0 6
44973: PUSH
44974: LD_INT 2
44976: ARRAY
44977: PPUSH
44978: CALL_OW 297
44982: ST_TO_ADDR
// if not Count ( result ) then
44983: LD_VAR 0 5
44987: PPUSH
44988: CALL 41560 0 1
44992: NOT
44993: IFFALSE 45026
// begin result := Join ( result , [ i , tmp ] ) ;
44995: LD_ADDR_VAR 0 5
44999: PUSH
45000: LD_VAR 0 5
45004: PPUSH
45005: LD_VAR 0 6
45009: PUSH
45010: LD_VAR 0 8
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PPUSH
45019: CALL 77149 0 2
45023: ST_TO_ADDR
// continue ;
45024: GO 44947
// end ; if result [ result ] [ 2 ] <= tmp then
45026: LD_VAR 0 5
45030: PUSH
45031: LD_VAR 0 5
45035: ARRAY
45036: PUSH
45037: LD_INT 2
45039: ARRAY
45040: PUSH
45041: LD_VAR 0 8
45045: LESSEQUAL
45046: IFFALSE 45079
// result := Join ( result , [ i , tmp ] ) else
45048: LD_ADDR_VAR 0 5
45052: PUSH
45053: LD_VAR 0 5
45057: PPUSH
45058: LD_VAR 0 6
45062: PUSH
45063: LD_VAR 0 8
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PPUSH
45072: CALL 77149 0 2
45076: ST_TO_ADDR
45077: GO 45164
// begin for j := 1 to Count ( result ) do
45079: LD_ADDR_VAR 0 7
45083: PUSH
45084: DOUBLE
45085: LD_INT 1
45087: DEC
45088: ST_TO_ADDR
45089: LD_VAR 0 5
45093: PPUSH
45094: CALL 41560 0 1
45098: PUSH
45099: FOR_TO
45100: IFFALSE 45162
// begin if tmp < result [ j ] [ 2 ] then
45102: LD_VAR 0 8
45106: PUSH
45107: LD_VAR 0 5
45111: PUSH
45112: LD_VAR 0 7
45116: ARRAY
45117: PUSH
45118: LD_INT 2
45120: ARRAY
45121: LESS
45122: IFFALSE 45160
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45124: LD_ADDR_VAR 0 5
45128: PUSH
45129: LD_VAR 0 5
45133: PPUSH
45134: LD_VAR 0 7
45138: PPUSH
45139: LD_VAR 0 6
45143: PUSH
45144: LD_VAR 0 8
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PPUSH
45153: CALL_OW 2
45157: ST_TO_ADDR
// break ;
45158: GO 45162
// end ; end ;
45160: GO 45099
45162: POP
45163: POP
// end ; end ;
45164: GO 44947
45166: POP
45167: POP
// if result and not asc then
45168: LD_VAR 0 5
45172: PUSH
45173: LD_VAR 0 3
45177: NOT
45178: AND
45179: IFFALSE 45196
// result := ReverseArray ( result ) ;
45181: LD_ADDR_VAR 0 5
45185: PUSH
45186: LD_VAR 0 5
45190: PPUSH
45191: CALL 72436 0 1
45195: ST_TO_ADDR
// tmp := [ ] ;
45196: LD_ADDR_VAR 0 8
45200: PUSH
45201: EMPTY
45202: ST_TO_ADDR
// if mode then
45203: LD_VAR 0 4
45207: IFFALSE 45271
// begin for i := 1 to result do
45209: LD_ADDR_VAR 0 6
45213: PUSH
45214: DOUBLE
45215: LD_INT 1
45217: DEC
45218: ST_TO_ADDR
45219: LD_VAR 0 5
45223: PUSH
45224: FOR_TO
45225: IFFALSE 45259
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
45227: LD_ADDR_VAR 0 8
45231: PUSH
45232: LD_VAR 0 8
45236: PPUSH
45237: LD_VAR 0 5
45241: PUSH
45242: LD_VAR 0 6
45246: ARRAY
45247: PUSH
45248: LD_INT 1
45250: ARRAY
45251: PPUSH
45252: CALL 77149 0 2
45256: ST_TO_ADDR
45257: GO 45224
45259: POP
45260: POP
// result := tmp ;
45261: LD_ADDR_VAR 0 5
45265: PUSH
45266: LD_VAR 0 8
45270: ST_TO_ADDR
// end ; end ;
45271: LD_VAR 0 5
45275: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45276: LD_INT 0
45278: PPUSH
45279: PPUSH
45280: PPUSH
45281: PPUSH
// if not list then
45282: LD_VAR 0 3
45286: NOT
45287: IFFALSE 45291
// exit ;
45289: GO 45679
// result := [ ] ;
45291: LD_ADDR_VAR 0 6
45295: PUSH
45296: EMPTY
45297: ST_TO_ADDR
// for i in list do
45298: LD_ADDR_VAR 0 7
45302: PUSH
45303: LD_VAR 0 3
45307: PUSH
45308: FOR_IN
45309: IFFALSE 45511
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45311: LD_ADDR_VAR 0 9
45315: PUSH
45316: LD_VAR 0 7
45320: PPUSH
45321: LD_VAR 0 1
45325: PPUSH
45326: LD_VAR 0 2
45330: PPUSH
45331: CALL_OW 297
45335: ST_TO_ADDR
// if not result then
45336: LD_VAR 0 6
45340: NOT
45341: IFFALSE 45367
// result := [ [ i , tmp ] ] else
45343: LD_ADDR_VAR 0 6
45347: PUSH
45348: LD_VAR 0 7
45352: PUSH
45353: LD_VAR 0 9
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: EMPTY
45363: LIST
45364: ST_TO_ADDR
45365: GO 45509
// begin if result [ result ] [ 2 ] < tmp then
45367: LD_VAR 0 6
45371: PUSH
45372: LD_VAR 0 6
45376: ARRAY
45377: PUSH
45378: LD_INT 2
45380: ARRAY
45381: PUSH
45382: LD_VAR 0 9
45386: LESS
45387: IFFALSE 45429
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45389: LD_ADDR_VAR 0 6
45393: PUSH
45394: LD_VAR 0 6
45398: PPUSH
45399: LD_VAR 0 6
45403: PUSH
45404: LD_INT 1
45406: PLUS
45407: PPUSH
45408: LD_VAR 0 7
45412: PUSH
45413: LD_VAR 0 9
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PPUSH
45422: CALL_OW 2
45426: ST_TO_ADDR
45427: GO 45509
// for j = 1 to result do
45429: LD_ADDR_VAR 0 8
45433: PUSH
45434: DOUBLE
45435: LD_INT 1
45437: DEC
45438: ST_TO_ADDR
45439: LD_VAR 0 6
45443: PUSH
45444: FOR_TO
45445: IFFALSE 45507
// begin if tmp < result [ j ] [ 2 ] then
45447: LD_VAR 0 9
45451: PUSH
45452: LD_VAR 0 6
45456: PUSH
45457: LD_VAR 0 8
45461: ARRAY
45462: PUSH
45463: LD_INT 2
45465: ARRAY
45466: LESS
45467: IFFALSE 45505
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45469: LD_ADDR_VAR 0 6
45473: PUSH
45474: LD_VAR 0 6
45478: PPUSH
45479: LD_VAR 0 8
45483: PPUSH
45484: LD_VAR 0 7
45488: PUSH
45489: LD_VAR 0 9
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PPUSH
45498: CALL_OW 2
45502: ST_TO_ADDR
// break ;
45503: GO 45507
// end ; end ;
45505: GO 45444
45507: POP
45508: POP
// end ; end ;
45509: GO 45308
45511: POP
45512: POP
// if result and not asc then
45513: LD_VAR 0 6
45517: PUSH
45518: LD_VAR 0 4
45522: NOT
45523: AND
45524: IFFALSE 45599
// begin tmp := result ;
45526: LD_ADDR_VAR 0 9
45530: PUSH
45531: LD_VAR 0 6
45535: ST_TO_ADDR
// for i = tmp downto 1 do
45536: LD_ADDR_VAR 0 7
45540: PUSH
45541: DOUBLE
45542: LD_VAR 0 9
45546: INC
45547: ST_TO_ADDR
45548: LD_INT 1
45550: PUSH
45551: FOR_DOWNTO
45552: IFFALSE 45597
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45554: LD_ADDR_VAR 0 6
45558: PUSH
45559: LD_VAR 0 6
45563: PPUSH
45564: LD_VAR 0 9
45568: PUSH
45569: LD_VAR 0 7
45573: MINUS
45574: PUSH
45575: LD_INT 1
45577: PLUS
45578: PPUSH
45579: LD_VAR 0 9
45583: PUSH
45584: LD_VAR 0 7
45588: ARRAY
45589: PPUSH
45590: CALL_OW 1
45594: ST_TO_ADDR
45595: GO 45551
45597: POP
45598: POP
// end ; tmp := [ ] ;
45599: LD_ADDR_VAR 0 9
45603: PUSH
45604: EMPTY
45605: ST_TO_ADDR
// if mode then
45606: LD_VAR 0 5
45610: IFFALSE 45679
// begin for i = 1 to result do
45612: LD_ADDR_VAR 0 7
45616: PUSH
45617: DOUBLE
45618: LD_INT 1
45620: DEC
45621: ST_TO_ADDR
45622: LD_VAR 0 6
45626: PUSH
45627: FOR_TO
45628: IFFALSE 45667
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45630: LD_ADDR_VAR 0 9
45634: PUSH
45635: LD_VAR 0 9
45639: PPUSH
45640: LD_VAR 0 7
45644: PPUSH
45645: LD_VAR 0 6
45649: PUSH
45650: LD_VAR 0 7
45654: ARRAY
45655: PUSH
45656: LD_INT 1
45658: ARRAY
45659: PPUSH
45660: CALL_OW 1
45664: ST_TO_ADDR
45665: GO 45627
45667: POP
45668: POP
// result := tmp ;
45669: LD_ADDR_VAR 0 6
45673: PUSH
45674: LD_VAR 0 9
45678: ST_TO_ADDR
// end ; end ;
45679: LD_VAR 0 6
45683: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45684: LD_INT 0
45686: PPUSH
45687: PPUSH
45688: PPUSH
45689: PPUSH
45690: PPUSH
45691: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45692: LD_ADDR_VAR 0 5
45696: PUSH
45697: LD_INT 0
45699: PUSH
45700: LD_INT 0
45702: PUSH
45703: LD_INT 0
45705: PUSH
45706: EMPTY
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: ST_TO_ADDR
// if not x or not y then
45714: LD_VAR 0 2
45718: NOT
45719: PUSH
45720: LD_VAR 0 3
45724: NOT
45725: OR
45726: IFFALSE 45730
// exit ;
45728: GO 47380
// if not range then
45730: LD_VAR 0 4
45734: NOT
45735: IFFALSE 45745
// range := 10 ;
45737: LD_ADDR_VAR 0 4
45741: PUSH
45742: LD_INT 10
45744: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45745: LD_ADDR_VAR 0 8
45749: PUSH
45750: LD_INT 81
45752: PUSH
45753: LD_VAR 0 1
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 92
45764: PUSH
45765: LD_VAR 0 2
45769: PUSH
45770: LD_VAR 0 3
45774: PUSH
45775: LD_VAR 0 4
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 3
45788: PUSH
45789: LD_INT 21
45791: PUSH
45792: LD_INT 3
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: LIST
45807: PPUSH
45808: CALL_OW 69
45812: ST_TO_ADDR
// if not tmp then
45813: LD_VAR 0 8
45817: NOT
45818: IFFALSE 45822
// exit ;
45820: GO 47380
// for i in tmp do
45822: LD_ADDR_VAR 0 6
45826: PUSH
45827: LD_VAR 0 8
45831: PUSH
45832: FOR_IN
45833: IFFALSE 47355
// begin points := [ 0 , 0 , 0 ] ;
45835: LD_ADDR_VAR 0 9
45839: PUSH
45840: LD_INT 0
45842: PUSH
45843: LD_INT 0
45845: PUSH
45846: LD_INT 0
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: LIST
45853: ST_TO_ADDR
// bpoints := 1 ;
45854: LD_ADDR_VAR 0 10
45858: PUSH
45859: LD_INT 1
45861: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45862: LD_VAR 0 6
45866: PPUSH
45867: CALL_OW 247
45871: PUSH
45872: LD_INT 1
45874: DOUBLE
45875: EQUAL
45876: IFTRUE 45880
45878: GO 46458
45880: POP
// begin if GetClass ( i ) = 1 then
45881: LD_VAR 0 6
45885: PPUSH
45886: CALL_OW 257
45890: PUSH
45891: LD_INT 1
45893: EQUAL
45894: IFFALSE 45915
// points := [ 10 , 5 , 3 ] ;
45896: LD_ADDR_VAR 0 9
45900: PUSH
45901: LD_INT 10
45903: PUSH
45904: LD_INT 5
45906: PUSH
45907: LD_INT 3
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: LIST
45914: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45915: LD_VAR 0 6
45919: PPUSH
45920: CALL_OW 257
45924: PUSH
45925: LD_INT 2
45927: PUSH
45928: LD_INT 3
45930: PUSH
45931: LD_INT 4
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: LIST
45938: IN
45939: IFFALSE 45960
// points := [ 3 , 2 , 1 ] ;
45941: LD_ADDR_VAR 0 9
45945: PUSH
45946: LD_INT 3
45948: PUSH
45949: LD_INT 2
45951: PUSH
45952: LD_INT 1
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: LIST
45959: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45960: LD_VAR 0 6
45964: PPUSH
45965: CALL_OW 257
45969: PUSH
45970: LD_INT 5
45972: EQUAL
45973: IFFALSE 45994
// points := [ 130 , 5 , 2 ] ;
45975: LD_ADDR_VAR 0 9
45979: PUSH
45980: LD_INT 130
45982: PUSH
45983: LD_INT 5
45985: PUSH
45986: LD_INT 2
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: LIST
45993: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45994: LD_VAR 0 6
45998: PPUSH
45999: CALL_OW 257
46003: PUSH
46004: LD_INT 8
46006: EQUAL
46007: IFFALSE 46028
// points := [ 35 , 35 , 30 ] ;
46009: LD_ADDR_VAR 0 9
46013: PUSH
46014: LD_INT 35
46016: PUSH
46017: LD_INT 35
46019: PUSH
46020: LD_INT 30
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: LIST
46027: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46028: LD_VAR 0 6
46032: PPUSH
46033: CALL_OW 257
46037: PUSH
46038: LD_INT 9
46040: EQUAL
46041: IFFALSE 46062
// points := [ 20 , 55 , 40 ] ;
46043: LD_ADDR_VAR 0 9
46047: PUSH
46048: LD_INT 20
46050: PUSH
46051: LD_INT 55
46053: PUSH
46054: LD_INT 40
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: LIST
46061: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46062: LD_VAR 0 6
46066: PPUSH
46067: CALL_OW 257
46071: PUSH
46072: LD_INT 12
46074: PUSH
46075: LD_INT 16
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: IN
46082: IFFALSE 46103
// points := [ 5 , 3 , 2 ] ;
46084: LD_ADDR_VAR 0 9
46088: PUSH
46089: LD_INT 5
46091: PUSH
46092: LD_INT 3
46094: PUSH
46095: LD_INT 2
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: LIST
46102: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46103: LD_VAR 0 6
46107: PPUSH
46108: CALL_OW 257
46112: PUSH
46113: LD_INT 17
46115: EQUAL
46116: IFFALSE 46137
// points := [ 100 , 50 , 75 ] ;
46118: LD_ADDR_VAR 0 9
46122: PUSH
46123: LD_INT 100
46125: PUSH
46126: LD_INT 50
46128: PUSH
46129: LD_INT 75
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: LIST
46136: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46137: LD_VAR 0 6
46141: PPUSH
46142: CALL_OW 257
46146: PUSH
46147: LD_INT 15
46149: EQUAL
46150: IFFALSE 46171
// points := [ 10 , 5 , 3 ] ;
46152: LD_ADDR_VAR 0 9
46156: PUSH
46157: LD_INT 10
46159: PUSH
46160: LD_INT 5
46162: PUSH
46163: LD_INT 3
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: LIST
46170: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46171: LD_VAR 0 6
46175: PPUSH
46176: CALL_OW 257
46180: PUSH
46181: LD_INT 14
46183: EQUAL
46184: IFFALSE 46205
// points := [ 10 , 0 , 0 ] ;
46186: LD_ADDR_VAR 0 9
46190: PUSH
46191: LD_INT 10
46193: PUSH
46194: LD_INT 0
46196: PUSH
46197: LD_INT 0
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: LIST
46204: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46205: LD_VAR 0 6
46209: PPUSH
46210: CALL_OW 257
46214: PUSH
46215: LD_INT 11
46217: EQUAL
46218: IFFALSE 46239
// points := [ 30 , 10 , 5 ] ;
46220: LD_ADDR_VAR 0 9
46224: PUSH
46225: LD_INT 30
46227: PUSH
46228: LD_INT 10
46230: PUSH
46231: LD_INT 5
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: LIST
46238: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46239: LD_VAR 0 1
46243: PPUSH
46244: LD_INT 5
46246: PPUSH
46247: CALL_OW 321
46251: PUSH
46252: LD_INT 2
46254: EQUAL
46255: IFFALSE 46272
// bpoints := bpoints * 1.8 ;
46257: LD_ADDR_VAR 0 10
46261: PUSH
46262: LD_VAR 0 10
46266: PUSH
46267: LD_REAL  1.80000000000000E+0000
46270: MUL
46271: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46272: LD_VAR 0 6
46276: PPUSH
46277: CALL_OW 257
46281: PUSH
46282: LD_INT 1
46284: PUSH
46285: LD_INT 2
46287: PUSH
46288: LD_INT 3
46290: PUSH
46291: LD_INT 4
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: IN
46300: PUSH
46301: LD_VAR 0 1
46305: PPUSH
46306: LD_INT 51
46308: PPUSH
46309: CALL_OW 321
46313: PUSH
46314: LD_INT 2
46316: EQUAL
46317: AND
46318: IFFALSE 46335
// bpoints := bpoints * 1.2 ;
46320: LD_ADDR_VAR 0 10
46324: PUSH
46325: LD_VAR 0 10
46329: PUSH
46330: LD_REAL  1.20000000000000E+0000
46333: MUL
46334: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46335: LD_VAR 0 6
46339: PPUSH
46340: CALL_OW 257
46344: PUSH
46345: LD_INT 5
46347: PUSH
46348: LD_INT 7
46350: PUSH
46351: LD_INT 9
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: LIST
46358: IN
46359: PUSH
46360: LD_VAR 0 1
46364: PPUSH
46365: LD_INT 52
46367: PPUSH
46368: CALL_OW 321
46372: PUSH
46373: LD_INT 2
46375: EQUAL
46376: AND
46377: IFFALSE 46394
// bpoints := bpoints * 1.5 ;
46379: LD_ADDR_VAR 0 10
46383: PUSH
46384: LD_VAR 0 10
46388: PUSH
46389: LD_REAL  1.50000000000000E+0000
46392: MUL
46393: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46394: LD_VAR 0 1
46398: PPUSH
46399: LD_INT 66
46401: PPUSH
46402: CALL_OW 321
46406: PUSH
46407: LD_INT 2
46409: EQUAL
46410: IFFALSE 46427
// bpoints := bpoints * 1.1 ;
46412: LD_ADDR_VAR 0 10
46416: PUSH
46417: LD_VAR 0 10
46421: PUSH
46422: LD_REAL  1.10000000000000E+0000
46425: MUL
46426: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46427: LD_ADDR_VAR 0 10
46431: PUSH
46432: LD_VAR 0 10
46436: PUSH
46437: LD_VAR 0 6
46441: PPUSH
46442: LD_INT 1
46444: PPUSH
46445: CALL_OW 259
46449: PUSH
46450: LD_REAL  1.15000000000000E+0000
46453: MUL
46454: MUL
46455: ST_TO_ADDR
// end ; unit_vehicle :
46456: GO 47284
46458: LD_INT 2
46460: DOUBLE
46461: EQUAL
46462: IFTRUE 46466
46464: GO 47272
46466: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46467: LD_VAR 0 6
46471: PPUSH
46472: CALL_OW 264
46476: PUSH
46477: LD_INT 2
46479: PUSH
46480: LD_INT 42
46482: PUSH
46483: LD_INT 24
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: LIST
46490: IN
46491: IFFALSE 46512
// points := [ 25 , 5 , 3 ] ;
46493: LD_ADDR_VAR 0 9
46497: PUSH
46498: LD_INT 25
46500: PUSH
46501: LD_INT 5
46503: PUSH
46504: LD_INT 3
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: LIST
46511: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46512: LD_VAR 0 6
46516: PPUSH
46517: CALL_OW 264
46521: PUSH
46522: LD_INT 4
46524: PUSH
46525: LD_INT 43
46527: PUSH
46528: LD_INT 25
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: LIST
46535: IN
46536: IFFALSE 46557
// points := [ 40 , 15 , 5 ] ;
46538: LD_ADDR_VAR 0 9
46542: PUSH
46543: LD_INT 40
46545: PUSH
46546: LD_INT 15
46548: PUSH
46549: LD_INT 5
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: LIST
46556: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46557: LD_VAR 0 6
46561: PPUSH
46562: CALL_OW 264
46566: PUSH
46567: LD_INT 3
46569: PUSH
46570: LD_INT 23
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: IN
46577: IFFALSE 46598
// points := [ 7 , 25 , 8 ] ;
46579: LD_ADDR_VAR 0 9
46583: PUSH
46584: LD_INT 7
46586: PUSH
46587: LD_INT 25
46589: PUSH
46590: LD_INT 8
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: LIST
46597: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46598: LD_VAR 0 6
46602: PPUSH
46603: CALL_OW 264
46607: PUSH
46608: LD_INT 5
46610: PUSH
46611: LD_INT 27
46613: PUSH
46614: LD_INT 44
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: LIST
46621: IN
46622: IFFALSE 46643
// points := [ 14 , 50 , 16 ] ;
46624: LD_ADDR_VAR 0 9
46628: PUSH
46629: LD_INT 14
46631: PUSH
46632: LD_INT 50
46634: PUSH
46635: LD_INT 16
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: LIST
46642: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46643: LD_VAR 0 6
46647: PPUSH
46648: CALL_OW 264
46652: PUSH
46653: LD_INT 6
46655: PUSH
46656: LD_INT 46
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: IN
46663: IFFALSE 46684
// points := [ 32 , 120 , 70 ] ;
46665: LD_ADDR_VAR 0 9
46669: PUSH
46670: LD_INT 32
46672: PUSH
46673: LD_INT 120
46675: PUSH
46676: LD_INT 70
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: LIST
46683: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46684: LD_VAR 0 6
46688: PPUSH
46689: CALL_OW 264
46693: PUSH
46694: LD_INT 7
46696: PUSH
46697: LD_INT 28
46699: PUSH
46700: LD_INT 45
46702: PUSH
46703: LD_INT 92
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: IN
46712: IFFALSE 46733
// points := [ 35 , 20 , 45 ] ;
46714: LD_ADDR_VAR 0 9
46718: PUSH
46719: LD_INT 35
46721: PUSH
46722: LD_INT 20
46724: PUSH
46725: LD_INT 45
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: LIST
46732: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46733: LD_VAR 0 6
46737: PPUSH
46738: CALL_OW 264
46742: PUSH
46743: LD_INT 47
46745: PUSH
46746: EMPTY
46747: LIST
46748: IN
46749: IFFALSE 46770
// points := [ 67 , 45 , 75 ] ;
46751: LD_ADDR_VAR 0 9
46755: PUSH
46756: LD_INT 67
46758: PUSH
46759: LD_INT 45
46761: PUSH
46762: LD_INT 75
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: LIST
46769: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46770: LD_VAR 0 6
46774: PPUSH
46775: CALL_OW 264
46779: PUSH
46780: LD_INT 26
46782: PUSH
46783: EMPTY
46784: LIST
46785: IN
46786: IFFALSE 46807
// points := [ 120 , 30 , 80 ] ;
46788: LD_ADDR_VAR 0 9
46792: PUSH
46793: LD_INT 120
46795: PUSH
46796: LD_INT 30
46798: PUSH
46799: LD_INT 80
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: LIST
46806: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46807: LD_VAR 0 6
46811: PPUSH
46812: CALL_OW 264
46816: PUSH
46817: LD_INT 22
46819: PUSH
46820: EMPTY
46821: LIST
46822: IN
46823: IFFALSE 46844
// points := [ 40 , 1 , 1 ] ;
46825: LD_ADDR_VAR 0 9
46829: PUSH
46830: LD_INT 40
46832: PUSH
46833: LD_INT 1
46835: PUSH
46836: LD_INT 1
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: LIST
46843: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46844: LD_VAR 0 6
46848: PPUSH
46849: CALL_OW 264
46853: PUSH
46854: LD_INT 29
46856: PUSH
46857: EMPTY
46858: LIST
46859: IN
46860: IFFALSE 46881
// points := [ 70 , 200 , 400 ] ;
46862: LD_ADDR_VAR 0 9
46866: PUSH
46867: LD_INT 70
46869: PUSH
46870: LD_INT 200
46872: PUSH
46873: LD_INT 400
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: LIST
46880: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46881: LD_VAR 0 6
46885: PPUSH
46886: CALL_OW 264
46890: PUSH
46891: LD_INT 14
46893: PUSH
46894: LD_INT 53
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: IN
46901: IFFALSE 46922
// points := [ 40 , 10 , 20 ] ;
46903: LD_ADDR_VAR 0 9
46907: PUSH
46908: LD_INT 40
46910: PUSH
46911: LD_INT 10
46913: PUSH
46914: LD_INT 20
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: LIST
46921: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46922: LD_VAR 0 6
46926: PPUSH
46927: CALL_OW 264
46931: PUSH
46932: LD_INT 9
46934: PUSH
46935: EMPTY
46936: LIST
46937: IN
46938: IFFALSE 46959
// points := [ 5 , 70 , 20 ] ;
46940: LD_ADDR_VAR 0 9
46944: PUSH
46945: LD_INT 5
46947: PUSH
46948: LD_INT 70
46950: PUSH
46951: LD_INT 20
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: LIST
46958: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46959: LD_VAR 0 6
46963: PPUSH
46964: CALL_OW 264
46968: PUSH
46969: LD_INT 10
46971: PUSH
46972: EMPTY
46973: LIST
46974: IN
46975: IFFALSE 46996
// points := [ 35 , 110 , 70 ] ;
46977: LD_ADDR_VAR 0 9
46981: PUSH
46982: LD_INT 35
46984: PUSH
46985: LD_INT 110
46987: PUSH
46988: LD_INT 70
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: LIST
46995: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46996: LD_VAR 0 6
47000: PPUSH
47001: CALL_OW 265
47005: PUSH
47006: LD_INT 25
47008: EQUAL
47009: IFFALSE 47030
// points := [ 80 , 65 , 100 ] ;
47011: LD_ADDR_VAR 0 9
47015: PUSH
47016: LD_INT 80
47018: PUSH
47019: LD_INT 65
47021: PUSH
47022: LD_INT 100
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: LIST
47029: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47030: LD_VAR 0 6
47034: PPUSH
47035: CALL_OW 263
47039: PUSH
47040: LD_INT 1
47042: EQUAL
47043: IFFALSE 47078
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47045: LD_ADDR_VAR 0 10
47049: PUSH
47050: LD_VAR 0 10
47054: PUSH
47055: LD_VAR 0 6
47059: PPUSH
47060: CALL_OW 311
47064: PPUSH
47065: LD_INT 3
47067: PPUSH
47068: CALL_OW 259
47072: PUSH
47073: LD_INT 4
47075: MUL
47076: MUL
47077: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47078: LD_VAR 0 6
47082: PPUSH
47083: CALL_OW 263
47087: PUSH
47088: LD_INT 2
47090: EQUAL
47091: IFFALSE 47142
// begin j := IsControledBy ( i ) ;
47093: LD_ADDR_VAR 0 7
47097: PUSH
47098: LD_VAR 0 6
47102: PPUSH
47103: CALL_OW 312
47107: ST_TO_ADDR
// if j then
47108: LD_VAR 0 7
47112: IFFALSE 47142
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47114: LD_ADDR_VAR 0 10
47118: PUSH
47119: LD_VAR 0 10
47123: PUSH
47124: LD_VAR 0 7
47128: PPUSH
47129: LD_INT 3
47131: PPUSH
47132: CALL_OW 259
47136: PUSH
47137: LD_INT 3
47139: MUL
47140: MUL
47141: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47142: LD_VAR 0 6
47146: PPUSH
47147: CALL_OW 264
47151: PUSH
47152: LD_INT 5
47154: PUSH
47155: LD_INT 6
47157: PUSH
47158: LD_INT 46
47160: PUSH
47161: LD_INT 44
47163: PUSH
47164: LD_INT 47
47166: PUSH
47167: LD_INT 45
47169: PUSH
47170: LD_INT 28
47172: PUSH
47173: LD_INT 7
47175: PUSH
47176: LD_INT 27
47178: PUSH
47179: LD_INT 29
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: IN
47194: PUSH
47195: LD_VAR 0 1
47199: PPUSH
47200: LD_INT 52
47202: PPUSH
47203: CALL_OW 321
47207: PUSH
47208: LD_INT 2
47210: EQUAL
47211: AND
47212: IFFALSE 47229
// bpoints := bpoints * 1.2 ;
47214: LD_ADDR_VAR 0 10
47218: PUSH
47219: LD_VAR 0 10
47223: PUSH
47224: LD_REAL  1.20000000000000E+0000
47227: MUL
47228: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47229: LD_VAR 0 6
47233: PPUSH
47234: CALL_OW 264
47238: PUSH
47239: LD_INT 6
47241: PUSH
47242: LD_INT 46
47244: PUSH
47245: LD_INT 47
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: LIST
47252: IN
47253: IFFALSE 47270
// bpoints := bpoints * 1.2 ;
47255: LD_ADDR_VAR 0 10
47259: PUSH
47260: LD_VAR 0 10
47264: PUSH
47265: LD_REAL  1.20000000000000E+0000
47268: MUL
47269: ST_TO_ADDR
// end ; unit_building :
47270: GO 47284
47272: LD_INT 3
47274: DOUBLE
47275: EQUAL
47276: IFTRUE 47280
47278: GO 47283
47280: POP
// ; end ;
47281: GO 47284
47283: POP
// for j = 1 to 3 do
47284: LD_ADDR_VAR 0 7
47288: PUSH
47289: DOUBLE
47290: LD_INT 1
47292: DEC
47293: ST_TO_ADDR
47294: LD_INT 3
47296: PUSH
47297: FOR_TO
47298: IFFALSE 47351
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47300: LD_ADDR_VAR 0 5
47304: PUSH
47305: LD_VAR 0 5
47309: PPUSH
47310: LD_VAR 0 7
47314: PPUSH
47315: LD_VAR 0 5
47319: PUSH
47320: LD_VAR 0 7
47324: ARRAY
47325: PUSH
47326: LD_VAR 0 9
47330: PUSH
47331: LD_VAR 0 7
47335: ARRAY
47336: PUSH
47337: LD_VAR 0 10
47341: MUL
47342: PLUS
47343: PPUSH
47344: CALL_OW 1
47348: ST_TO_ADDR
47349: GO 47297
47351: POP
47352: POP
// end ;
47353: GO 45832
47355: POP
47356: POP
// result := Replace ( result , 4 , tmp ) ;
47357: LD_ADDR_VAR 0 5
47361: PUSH
47362: LD_VAR 0 5
47366: PPUSH
47367: LD_INT 4
47369: PPUSH
47370: LD_VAR 0 8
47374: PPUSH
47375: CALL_OW 1
47379: ST_TO_ADDR
// end ;
47380: LD_VAR 0 5
47384: RET
// export function DangerAtRange ( unit , range ) ; begin
47385: LD_INT 0
47387: PPUSH
// if not unit then
47388: LD_VAR 0 1
47392: NOT
47393: IFFALSE 47397
// exit ;
47395: GO 47442
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47397: LD_ADDR_VAR 0 3
47401: PUSH
47402: LD_VAR 0 1
47406: PPUSH
47407: CALL_OW 255
47411: PPUSH
47412: LD_VAR 0 1
47416: PPUSH
47417: CALL_OW 250
47421: PPUSH
47422: LD_VAR 0 1
47426: PPUSH
47427: CALL_OW 251
47431: PPUSH
47432: LD_VAR 0 2
47436: PPUSH
47437: CALL 45684 0 4
47441: ST_TO_ADDR
// end ;
47442: LD_VAR 0 3
47446: RET
// export function DangerInArea ( side , area ) ; begin
47447: LD_INT 0
47449: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47450: LD_ADDR_VAR 0 3
47454: PUSH
47455: LD_VAR 0 2
47459: PPUSH
47460: LD_INT 81
47462: PUSH
47463: LD_VAR 0 1
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PPUSH
47472: CALL_OW 70
47476: ST_TO_ADDR
// end ;
47477: LD_VAR 0 3
47481: RET
// export function IsExtension ( b ) ; begin
47482: LD_INT 0
47484: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47485: LD_ADDR_VAR 0 2
47489: PUSH
47490: LD_VAR 0 1
47494: PUSH
47495: LD_INT 23
47497: PUSH
47498: LD_INT 20
47500: PUSH
47501: LD_INT 22
47503: PUSH
47504: LD_INT 17
47506: PUSH
47507: LD_INT 24
47509: PUSH
47510: LD_INT 21
47512: PUSH
47513: LD_INT 19
47515: PUSH
47516: LD_INT 16
47518: PUSH
47519: LD_INT 25
47521: PUSH
47522: LD_INT 18
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: IN
47537: ST_TO_ADDR
// end ;
47538: LD_VAR 0 2
47542: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47543: LD_INT 0
47545: PPUSH
47546: PPUSH
47547: PPUSH
// result := [ ] ;
47548: LD_ADDR_VAR 0 4
47552: PUSH
47553: EMPTY
47554: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47555: LD_ADDR_VAR 0 5
47559: PUSH
47560: LD_VAR 0 2
47564: PPUSH
47565: LD_INT 21
47567: PUSH
47568: LD_INT 3
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PPUSH
47575: CALL_OW 70
47579: ST_TO_ADDR
// if not tmp then
47580: LD_VAR 0 5
47584: NOT
47585: IFFALSE 47589
// exit ;
47587: GO 47653
// if checkLink then
47589: LD_VAR 0 3
47593: IFFALSE 47643
// begin for i in tmp do
47595: LD_ADDR_VAR 0 6
47599: PUSH
47600: LD_VAR 0 5
47604: PUSH
47605: FOR_IN
47606: IFFALSE 47641
// if GetBase ( i ) <> base then
47608: LD_VAR 0 6
47612: PPUSH
47613: CALL_OW 274
47617: PUSH
47618: LD_VAR 0 1
47622: NONEQUAL
47623: IFFALSE 47639
// ComLinkToBase ( base , i ) ;
47625: LD_VAR 0 1
47629: PPUSH
47630: LD_VAR 0 6
47634: PPUSH
47635: CALL_OW 169
47639: GO 47605
47641: POP
47642: POP
// end ; result := tmp ;
47643: LD_ADDR_VAR 0 4
47647: PUSH
47648: LD_VAR 0 5
47652: ST_TO_ADDR
// end ;
47653: LD_VAR 0 4
47657: RET
// export function ComComplete ( units , b ) ; var i ; begin
47658: LD_INT 0
47660: PPUSH
47661: PPUSH
// if not units then
47662: LD_VAR 0 1
47666: NOT
47667: IFFALSE 47671
// exit ;
47669: GO 47761
// for i in units do
47671: LD_ADDR_VAR 0 4
47675: PUSH
47676: LD_VAR 0 1
47680: PUSH
47681: FOR_IN
47682: IFFALSE 47759
// if BuildingStatus ( b ) = bs_build then
47684: LD_VAR 0 2
47688: PPUSH
47689: CALL_OW 461
47693: PUSH
47694: LD_INT 1
47696: EQUAL
47697: IFFALSE 47757
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47699: LD_VAR 0 4
47703: PPUSH
47704: LD_STRING h
47706: PUSH
47707: LD_VAR 0 2
47711: PPUSH
47712: CALL_OW 250
47716: PUSH
47717: LD_VAR 0 2
47721: PPUSH
47722: CALL_OW 251
47726: PUSH
47727: LD_VAR 0 2
47731: PUSH
47732: LD_INT 0
47734: PUSH
47735: LD_INT 0
47737: PUSH
47738: LD_INT 0
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: PUSH
47750: EMPTY
47751: LIST
47752: PPUSH
47753: CALL_OW 446
47757: GO 47681
47759: POP
47760: POP
// end ;
47761: LD_VAR 0 3
47765: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47766: LD_INT 0
47768: PPUSH
47769: PPUSH
47770: PPUSH
47771: PPUSH
47772: PPUSH
47773: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47774: LD_VAR 0 1
47778: NOT
47779: PUSH
47780: LD_VAR 0 1
47784: PPUSH
47785: CALL_OW 263
47789: PUSH
47790: LD_INT 2
47792: NONEQUAL
47793: OR
47794: IFFALSE 47798
// exit ;
47796: GO 48114
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47798: LD_ADDR_VAR 0 6
47802: PUSH
47803: LD_INT 22
47805: PUSH
47806: LD_VAR 0 1
47810: PPUSH
47811: CALL_OW 255
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 2
47822: PUSH
47823: LD_INT 30
47825: PUSH
47826: LD_INT 36
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 34
47835: PUSH
47836: LD_INT 31
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: LIST
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PPUSH
47852: CALL_OW 69
47856: ST_TO_ADDR
// if not tmp then
47857: LD_VAR 0 6
47861: NOT
47862: IFFALSE 47866
// exit ;
47864: GO 48114
// result := [ ] ;
47866: LD_ADDR_VAR 0 2
47870: PUSH
47871: EMPTY
47872: ST_TO_ADDR
// for i in tmp do
47873: LD_ADDR_VAR 0 3
47877: PUSH
47878: LD_VAR 0 6
47882: PUSH
47883: FOR_IN
47884: IFFALSE 47955
// begin t := UnitsInside ( i ) ;
47886: LD_ADDR_VAR 0 4
47890: PUSH
47891: LD_VAR 0 3
47895: PPUSH
47896: CALL_OW 313
47900: ST_TO_ADDR
// if t then
47901: LD_VAR 0 4
47905: IFFALSE 47953
// for j in t do
47907: LD_ADDR_VAR 0 7
47911: PUSH
47912: LD_VAR 0 4
47916: PUSH
47917: FOR_IN
47918: IFFALSE 47951
// result := Replace ( result , result + 1 , j ) ;
47920: LD_ADDR_VAR 0 2
47924: PUSH
47925: LD_VAR 0 2
47929: PPUSH
47930: LD_VAR 0 2
47934: PUSH
47935: LD_INT 1
47937: PLUS
47938: PPUSH
47939: LD_VAR 0 7
47943: PPUSH
47944: CALL_OW 1
47948: ST_TO_ADDR
47949: GO 47917
47951: POP
47952: POP
// end ;
47953: GO 47883
47955: POP
47956: POP
// if not result then
47957: LD_VAR 0 2
47961: NOT
47962: IFFALSE 47966
// exit ;
47964: GO 48114
// mech := result [ 1 ] ;
47966: LD_ADDR_VAR 0 5
47970: PUSH
47971: LD_VAR 0 2
47975: PUSH
47976: LD_INT 1
47978: ARRAY
47979: ST_TO_ADDR
// if result > 1 then
47980: LD_VAR 0 2
47984: PUSH
47985: LD_INT 1
47987: GREATER
47988: IFFALSE 48100
// begin for i = 2 to result do
47990: LD_ADDR_VAR 0 3
47994: PUSH
47995: DOUBLE
47996: LD_INT 2
47998: DEC
47999: ST_TO_ADDR
48000: LD_VAR 0 2
48004: PUSH
48005: FOR_TO
48006: IFFALSE 48098
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48008: LD_ADDR_VAR 0 4
48012: PUSH
48013: LD_VAR 0 2
48017: PUSH
48018: LD_VAR 0 3
48022: ARRAY
48023: PPUSH
48024: LD_INT 3
48026: PPUSH
48027: CALL_OW 259
48031: PUSH
48032: LD_VAR 0 2
48036: PUSH
48037: LD_VAR 0 3
48041: ARRAY
48042: PPUSH
48043: CALL_OW 432
48047: MINUS
48048: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48049: LD_VAR 0 4
48053: PUSH
48054: LD_VAR 0 5
48058: PPUSH
48059: LD_INT 3
48061: PPUSH
48062: CALL_OW 259
48066: PUSH
48067: LD_VAR 0 5
48071: PPUSH
48072: CALL_OW 432
48076: MINUS
48077: GREATEREQUAL
48078: IFFALSE 48096
// mech := result [ i ] ;
48080: LD_ADDR_VAR 0 5
48084: PUSH
48085: LD_VAR 0 2
48089: PUSH
48090: LD_VAR 0 3
48094: ARRAY
48095: ST_TO_ADDR
// end ;
48096: GO 48005
48098: POP
48099: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48100: LD_VAR 0 1
48104: PPUSH
48105: LD_VAR 0 5
48109: PPUSH
48110: CALL_OW 135
// end ;
48114: LD_VAR 0 2
48118: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48119: LD_INT 0
48121: PPUSH
48122: PPUSH
48123: PPUSH
48124: PPUSH
48125: PPUSH
48126: PPUSH
48127: PPUSH
48128: PPUSH
48129: PPUSH
48130: PPUSH
48131: PPUSH
48132: PPUSH
48133: PPUSH
// result := [ ] ;
48134: LD_ADDR_VAR 0 7
48138: PUSH
48139: EMPTY
48140: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48141: LD_VAR 0 1
48145: PPUSH
48146: CALL_OW 266
48150: PUSH
48151: LD_INT 0
48153: PUSH
48154: LD_INT 1
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: IN
48161: NOT
48162: IFFALSE 48166
// exit ;
48164: GO 49800
// if name then
48166: LD_VAR 0 3
48170: IFFALSE 48186
// SetBName ( base_dep , name ) ;
48172: LD_VAR 0 1
48176: PPUSH
48177: LD_VAR 0 3
48181: PPUSH
48182: CALL_OW 500
// base := GetBase ( base_dep ) ;
48186: LD_ADDR_VAR 0 15
48190: PUSH
48191: LD_VAR 0 1
48195: PPUSH
48196: CALL_OW 274
48200: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48201: LD_ADDR_VAR 0 16
48205: PUSH
48206: LD_VAR 0 1
48210: PPUSH
48211: CALL_OW 255
48215: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48216: LD_ADDR_VAR 0 17
48220: PUSH
48221: LD_VAR 0 1
48225: PPUSH
48226: CALL_OW 248
48230: ST_TO_ADDR
// if sources then
48231: LD_VAR 0 5
48235: IFFALSE 48282
// for i = 1 to 3 do
48237: LD_ADDR_VAR 0 8
48241: PUSH
48242: DOUBLE
48243: LD_INT 1
48245: DEC
48246: ST_TO_ADDR
48247: LD_INT 3
48249: PUSH
48250: FOR_TO
48251: IFFALSE 48280
// AddResourceType ( base , i , sources [ i ] ) ;
48253: LD_VAR 0 15
48257: PPUSH
48258: LD_VAR 0 8
48262: PPUSH
48263: LD_VAR 0 5
48267: PUSH
48268: LD_VAR 0 8
48272: ARRAY
48273: PPUSH
48274: CALL_OW 276
48278: GO 48250
48280: POP
48281: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48282: LD_ADDR_VAR 0 18
48286: PUSH
48287: LD_VAR 0 15
48291: PPUSH
48292: LD_VAR 0 2
48296: PPUSH
48297: LD_INT 1
48299: PPUSH
48300: CALL 47543 0 3
48304: ST_TO_ADDR
// InitHc ;
48305: CALL_OW 19
// InitUc ;
48309: CALL_OW 18
// uc_side := side ;
48313: LD_ADDR_OWVAR 20
48317: PUSH
48318: LD_VAR 0 16
48322: ST_TO_ADDR
// uc_nation := nation ;
48323: LD_ADDR_OWVAR 21
48327: PUSH
48328: LD_VAR 0 17
48332: ST_TO_ADDR
// if buildings then
48333: LD_VAR 0 18
48337: IFFALSE 49659
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48339: LD_ADDR_VAR 0 19
48343: PUSH
48344: LD_VAR 0 18
48348: PPUSH
48349: LD_INT 2
48351: PUSH
48352: LD_INT 30
48354: PUSH
48355: LD_INT 29
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 30
48364: PUSH
48365: LD_INT 30
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: LIST
48376: PPUSH
48377: CALL_OW 72
48381: ST_TO_ADDR
// if tmp then
48382: LD_VAR 0 19
48386: IFFALSE 48434
// for i in tmp do
48388: LD_ADDR_VAR 0 8
48392: PUSH
48393: LD_VAR 0 19
48397: PUSH
48398: FOR_IN
48399: IFFALSE 48432
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48401: LD_VAR 0 8
48405: PPUSH
48406: CALL_OW 250
48410: PPUSH
48411: LD_VAR 0 8
48415: PPUSH
48416: CALL_OW 251
48420: PPUSH
48421: LD_VAR 0 16
48425: PPUSH
48426: CALL_OW 441
48430: GO 48398
48432: POP
48433: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48434: LD_VAR 0 18
48438: PPUSH
48439: LD_INT 2
48441: PUSH
48442: LD_INT 30
48444: PUSH
48445: LD_INT 32
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 30
48454: PUSH
48455: LD_INT 33
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: LIST
48466: PPUSH
48467: CALL_OW 72
48471: IFFALSE 48559
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48473: LD_ADDR_VAR 0 8
48477: PUSH
48478: LD_VAR 0 18
48482: PPUSH
48483: LD_INT 2
48485: PUSH
48486: LD_INT 30
48488: PUSH
48489: LD_INT 32
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 30
48498: PUSH
48499: LD_INT 33
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: LIST
48510: PPUSH
48511: CALL_OW 72
48515: PUSH
48516: FOR_IN
48517: IFFALSE 48557
// begin if not GetBWeapon ( i ) then
48519: LD_VAR 0 8
48523: PPUSH
48524: CALL_OW 269
48528: NOT
48529: IFFALSE 48555
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48531: LD_VAR 0 8
48535: PPUSH
48536: LD_VAR 0 8
48540: PPUSH
48541: LD_VAR 0 2
48545: PPUSH
48546: CALL 49805 0 2
48550: PPUSH
48551: CALL_OW 431
// end ;
48555: GO 48516
48557: POP
48558: POP
// end ; for i = 1 to personel do
48559: LD_ADDR_VAR 0 8
48563: PUSH
48564: DOUBLE
48565: LD_INT 1
48567: DEC
48568: ST_TO_ADDR
48569: LD_VAR 0 6
48573: PUSH
48574: FOR_TO
48575: IFFALSE 49639
// begin if i > 4 then
48577: LD_VAR 0 8
48581: PUSH
48582: LD_INT 4
48584: GREATER
48585: IFFALSE 48589
// break ;
48587: GO 49639
// case i of 1 :
48589: LD_VAR 0 8
48593: PUSH
48594: LD_INT 1
48596: DOUBLE
48597: EQUAL
48598: IFTRUE 48602
48600: GO 48682
48602: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48603: LD_ADDR_VAR 0 12
48607: PUSH
48608: LD_VAR 0 18
48612: PPUSH
48613: LD_INT 22
48615: PUSH
48616: LD_VAR 0 16
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 58
48627: PUSH
48628: EMPTY
48629: LIST
48630: PUSH
48631: LD_INT 2
48633: PUSH
48634: LD_INT 30
48636: PUSH
48637: LD_INT 32
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 30
48646: PUSH
48647: LD_INT 4
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 30
48656: PUSH
48657: LD_INT 5
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: LIST
48674: PPUSH
48675: CALL_OW 72
48679: ST_TO_ADDR
48680: GO 48904
48682: LD_INT 2
48684: DOUBLE
48685: EQUAL
48686: IFTRUE 48690
48688: GO 48752
48690: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48691: LD_ADDR_VAR 0 12
48695: PUSH
48696: LD_VAR 0 18
48700: PPUSH
48701: LD_INT 22
48703: PUSH
48704: LD_VAR 0 16
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 2
48715: PUSH
48716: LD_INT 30
48718: PUSH
48719: LD_INT 0
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 30
48728: PUSH
48729: LD_INT 1
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: LIST
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PPUSH
48745: CALL_OW 72
48749: ST_TO_ADDR
48750: GO 48904
48752: LD_INT 3
48754: DOUBLE
48755: EQUAL
48756: IFTRUE 48760
48758: GO 48822
48760: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48761: LD_ADDR_VAR 0 12
48765: PUSH
48766: LD_VAR 0 18
48770: PPUSH
48771: LD_INT 22
48773: PUSH
48774: LD_VAR 0 16
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 2
48785: PUSH
48786: LD_INT 30
48788: PUSH
48789: LD_INT 2
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 30
48798: PUSH
48799: LD_INT 3
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: LIST
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PPUSH
48815: CALL_OW 72
48819: ST_TO_ADDR
48820: GO 48904
48822: LD_INT 4
48824: DOUBLE
48825: EQUAL
48826: IFTRUE 48830
48828: GO 48903
48830: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48831: LD_ADDR_VAR 0 12
48835: PUSH
48836: LD_VAR 0 18
48840: PPUSH
48841: LD_INT 22
48843: PUSH
48844: LD_VAR 0 16
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 2
48855: PUSH
48856: LD_INT 30
48858: PUSH
48859: LD_INT 6
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 30
48868: PUSH
48869: LD_INT 7
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 30
48878: PUSH
48879: LD_INT 8
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PPUSH
48896: CALL_OW 72
48900: ST_TO_ADDR
48901: GO 48904
48903: POP
// if i = 1 then
48904: LD_VAR 0 8
48908: PUSH
48909: LD_INT 1
48911: EQUAL
48912: IFFALSE 49023
// begin tmp := [ ] ;
48914: LD_ADDR_VAR 0 19
48918: PUSH
48919: EMPTY
48920: ST_TO_ADDR
// for j in f do
48921: LD_ADDR_VAR 0 9
48925: PUSH
48926: LD_VAR 0 12
48930: PUSH
48931: FOR_IN
48932: IFFALSE 49005
// if GetBType ( j ) = b_bunker then
48934: LD_VAR 0 9
48938: PPUSH
48939: CALL_OW 266
48943: PUSH
48944: LD_INT 32
48946: EQUAL
48947: IFFALSE 48974
// tmp := Insert ( tmp , 1 , j ) else
48949: LD_ADDR_VAR 0 19
48953: PUSH
48954: LD_VAR 0 19
48958: PPUSH
48959: LD_INT 1
48961: PPUSH
48962: LD_VAR 0 9
48966: PPUSH
48967: CALL_OW 2
48971: ST_TO_ADDR
48972: GO 49003
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48974: LD_ADDR_VAR 0 19
48978: PUSH
48979: LD_VAR 0 19
48983: PPUSH
48984: LD_VAR 0 19
48988: PUSH
48989: LD_INT 1
48991: PLUS
48992: PPUSH
48993: LD_VAR 0 9
48997: PPUSH
48998: CALL_OW 2
49002: ST_TO_ADDR
49003: GO 48931
49005: POP
49006: POP
// if tmp then
49007: LD_VAR 0 19
49011: IFFALSE 49023
// f := tmp ;
49013: LD_ADDR_VAR 0 12
49017: PUSH
49018: LD_VAR 0 19
49022: ST_TO_ADDR
// end ; x := personel [ i ] ;
49023: LD_ADDR_VAR 0 13
49027: PUSH
49028: LD_VAR 0 6
49032: PUSH
49033: LD_VAR 0 8
49037: ARRAY
49038: ST_TO_ADDR
// if x = - 1 then
49039: LD_VAR 0 13
49043: PUSH
49044: LD_INT 1
49046: NEG
49047: EQUAL
49048: IFFALSE 49257
// begin for j in f do
49050: LD_ADDR_VAR 0 9
49054: PUSH
49055: LD_VAR 0 12
49059: PUSH
49060: FOR_IN
49061: IFFALSE 49253
// repeat InitHc ;
49063: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49067: LD_VAR 0 9
49071: PPUSH
49072: CALL_OW 266
49076: PUSH
49077: LD_INT 5
49079: EQUAL
49080: IFFALSE 49150
// begin if UnitsInside ( j ) < 3 then
49082: LD_VAR 0 9
49086: PPUSH
49087: CALL_OW 313
49091: PUSH
49092: LD_INT 3
49094: LESS
49095: IFFALSE 49131
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49097: LD_INT 0
49099: PPUSH
49100: LD_INT 5
49102: PUSH
49103: LD_INT 8
49105: PUSH
49106: LD_INT 9
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: LIST
49113: PUSH
49114: LD_VAR 0 17
49118: ARRAY
49119: PPUSH
49120: LD_VAR 0 4
49124: PPUSH
49125: CALL_OW 380
49129: GO 49148
// PrepareHuman ( false , i , skill ) ;
49131: LD_INT 0
49133: PPUSH
49134: LD_VAR 0 8
49138: PPUSH
49139: LD_VAR 0 4
49143: PPUSH
49144: CALL_OW 380
// end else
49148: GO 49167
// PrepareHuman ( false , i , skill ) ;
49150: LD_INT 0
49152: PPUSH
49153: LD_VAR 0 8
49157: PPUSH
49158: LD_VAR 0 4
49162: PPUSH
49163: CALL_OW 380
// un := CreateHuman ;
49167: LD_ADDR_VAR 0 14
49171: PUSH
49172: CALL_OW 44
49176: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49177: LD_ADDR_VAR 0 7
49181: PUSH
49182: LD_VAR 0 7
49186: PPUSH
49187: LD_INT 1
49189: PPUSH
49190: LD_VAR 0 14
49194: PPUSH
49195: CALL_OW 2
49199: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49200: LD_VAR 0 14
49204: PPUSH
49205: LD_VAR 0 9
49209: PPUSH
49210: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49214: LD_VAR 0 9
49218: PPUSH
49219: CALL_OW 313
49223: PUSH
49224: LD_INT 6
49226: EQUAL
49227: PUSH
49228: LD_VAR 0 9
49232: PPUSH
49233: CALL_OW 266
49237: PUSH
49238: LD_INT 32
49240: PUSH
49241: LD_INT 31
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: IN
49248: OR
49249: IFFALSE 49063
49251: GO 49060
49253: POP
49254: POP
// end else
49255: GO 49637
// for j = 1 to x do
49257: LD_ADDR_VAR 0 9
49261: PUSH
49262: DOUBLE
49263: LD_INT 1
49265: DEC
49266: ST_TO_ADDR
49267: LD_VAR 0 13
49271: PUSH
49272: FOR_TO
49273: IFFALSE 49635
// begin InitHc ;
49275: CALL_OW 19
// if not f then
49279: LD_VAR 0 12
49283: NOT
49284: IFFALSE 49373
// begin PrepareHuman ( false , i , skill ) ;
49286: LD_INT 0
49288: PPUSH
49289: LD_VAR 0 8
49293: PPUSH
49294: LD_VAR 0 4
49298: PPUSH
49299: CALL_OW 380
// un := CreateHuman ;
49303: LD_ADDR_VAR 0 14
49307: PUSH
49308: CALL_OW 44
49312: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49313: LD_ADDR_VAR 0 7
49317: PUSH
49318: LD_VAR 0 7
49322: PPUSH
49323: LD_INT 1
49325: PPUSH
49326: LD_VAR 0 14
49330: PPUSH
49331: CALL_OW 2
49335: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49336: LD_VAR 0 14
49340: PPUSH
49341: LD_VAR 0 1
49345: PPUSH
49346: CALL_OW 250
49350: PPUSH
49351: LD_VAR 0 1
49355: PPUSH
49356: CALL_OW 251
49360: PPUSH
49361: LD_INT 10
49363: PPUSH
49364: LD_INT 0
49366: PPUSH
49367: CALL_OW 50
// continue ;
49371: GO 49272
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49373: LD_VAR 0 12
49377: PUSH
49378: LD_INT 1
49380: ARRAY
49381: PPUSH
49382: CALL_OW 313
49386: PUSH
49387: LD_VAR 0 12
49391: PUSH
49392: LD_INT 1
49394: ARRAY
49395: PPUSH
49396: CALL_OW 266
49400: PUSH
49401: LD_INT 32
49403: PUSH
49404: LD_INT 31
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: IN
49411: AND
49412: PUSH
49413: LD_VAR 0 12
49417: PUSH
49418: LD_INT 1
49420: ARRAY
49421: PPUSH
49422: CALL_OW 313
49426: PUSH
49427: LD_INT 6
49429: EQUAL
49430: OR
49431: IFFALSE 49451
// f := Delete ( f , 1 ) ;
49433: LD_ADDR_VAR 0 12
49437: PUSH
49438: LD_VAR 0 12
49442: PPUSH
49443: LD_INT 1
49445: PPUSH
49446: CALL_OW 3
49450: ST_TO_ADDR
// if not f then
49451: LD_VAR 0 12
49455: NOT
49456: IFFALSE 49474
// begin x := x + 2 ;
49458: LD_ADDR_VAR 0 13
49462: PUSH
49463: LD_VAR 0 13
49467: PUSH
49468: LD_INT 2
49470: PLUS
49471: ST_TO_ADDR
// continue ;
49472: GO 49272
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49474: LD_VAR 0 12
49478: PUSH
49479: LD_INT 1
49481: ARRAY
49482: PPUSH
49483: CALL_OW 266
49487: PUSH
49488: LD_INT 5
49490: EQUAL
49491: IFFALSE 49565
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49493: LD_VAR 0 12
49497: PUSH
49498: LD_INT 1
49500: ARRAY
49501: PPUSH
49502: CALL_OW 313
49506: PUSH
49507: LD_INT 3
49509: LESS
49510: IFFALSE 49546
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49512: LD_INT 0
49514: PPUSH
49515: LD_INT 5
49517: PUSH
49518: LD_INT 8
49520: PUSH
49521: LD_INT 9
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: LIST
49528: PUSH
49529: LD_VAR 0 17
49533: ARRAY
49534: PPUSH
49535: LD_VAR 0 4
49539: PPUSH
49540: CALL_OW 380
49544: GO 49563
// PrepareHuman ( false , i , skill ) ;
49546: LD_INT 0
49548: PPUSH
49549: LD_VAR 0 8
49553: PPUSH
49554: LD_VAR 0 4
49558: PPUSH
49559: CALL_OW 380
// end else
49563: GO 49582
// PrepareHuman ( false , i , skill ) ;
49565: LD_INT 0
49567: PPUSH
49568: LD_VAR 0 8
49572: PPUSH
49573: LD_VAR 0 4
49577: PPUSH
49578: CALL_OW 380
// un := CreateHuman ;
49582: LD_ADDR_VAR 0 14
49586: PUSH
49587: CALL_OW 44
49591: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49592: LD_ADDR_VAR 0 7
49596: PUSH
49597: LD_VAR 0 7
49601: PPUSH
49602: LD_INT 1
49604: PPUSH
49605: LD_VAR 0 14
49609: PPUSH
49610: CALL_OW 2
49614: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49615: LD_VAR 0 14
49619: PPUSH
49620: LD_VAR 0 12
49624: PUSH
49625: LD_INT 1
49627: ARRAY
49628: PPUSH
49629: CALL_OW 52
// end ;
49633: GO 49272
49635: POP
49636: POP
// end ;
49637: GO 48574
49639: POP
49640: POP
// result := result ^ buildings ;
49641: LD_ADDR_VAR 0 7
49645: PUSH
49646: LD_VAR 0 7
49650: PUSH
49651: LD_VAR 0 18
49655: ADD
49656: ST_TO_ADDR
// end else
49657: GO 49800
// begin for i = 1 to personel do
49659: LD_ADDR_VAR 0 8
49663: PUSH
49664: DOUBLE
49665: LD_INT 1
49667: DEC
49668: ST_TO_ADDR
49669: LD_VAR 0 6
49673: PUSH
49674: FOR_TO
49675: IFFALSE 49798
// begin if i > 4 then
49677: LD_VAR 0 8
49681: PUSH
49682: LD_INT 4
49684: GREATER
49685: IFFALSE 49689
// break ;
49687: GO 49798
// x := personel [ i ] ;
49689: LD_ADDR_VAR 0 13
49693: PUSH
49694: LD_VAR 0 6
49698: PUSH
49699: LD_VAR 0 8
49703: ARRAY
49704: ST_TO_ADDR
// if x = - 1 then
49705: LD_VAR 0 13
49709: PUSH
49710: LD_INT 1
49712: NEG
49713: EQUAL
49714: IFFALSE 49718
// continue ;
49716: GO 49674
// PrepareHuman ( false , i , skill ) ;
49718: LD_INT 0
49720: PPUSH
49721: LD_VAR 0 8
49725: PPUSH
49726: LD_VAR 0 4
49730: PPUSH
49731: CALL_OW 380
// un := CreateHuman ;
49735: LD_ADDR_VAR 0 14
49739: PUSH
49740: CALL_OW 44
49744: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49745: LD_VAR 0 14
49749: PPUSH
49750: LD_VAR 0 1
49754: PPUSH
49755: CALL_OW 250
49759: PPUSH
49760: LD_VAR 0 1
49764: PPUSH
49765: CALL_OW 251
49769: PPUSH
49770: LD_INT 10
49772: PPUSH
49773: LD_INT 0
49775: PPUSH
49776: CALL_OW 50
// result := result ^ un ;
49780: LD_ADDR_VAR 0 7
49784: PUSH
49785: LD_VAR 0 7
49789: PUSH
49790: LD_VAR 0 14
49794: ADD
49795: ST_TO_ADDR
// end ;
49796: GO 49674
49798: POP
49799: POP
// end ; end ;
49800: LD_VAR 0 7
49804: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49805: LD_INT 0
49807: PPUSH
49808: PPUSH
49809: PPUSH
49810: PPUSH
49811: PPUSH
49812: PPUSH
49813: PPUSH
49814: PPUSH
49815: PPUSH
49816: PPUSH
49817: PPUSH
49818: PPUSH
49819: PPUSH
49820: PPUSH
49821: PPUSH
49822: PPUSH
// result := false ;
49823: LD_ADDR_VAR 0 3
49827: PUSH
49828: LD_INT 0
49830: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49831: LD_VAR 0 1
49835: NOT
49836: PUSH
49837: LD_VAR 0 1
49841: PPUSH
49842: CALL_OW 266
49846: PUSH
49847: LD_INT 32
49849: PUSH
49850: LD_INT 33
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: IN
49857: NOT
49858: OR
49859: IFFALSE 49863
// exit ;
49861: GO 50972
// nat := GetNation ( tower ) ;
49863: LD_ADDR_VAR 0 12
49867: PUSH
49868: LD_VAR 0 1
49872: PPUSH
49873: CALL_OW 248
49877: ST_TO_ADDR
// side := GetSide ( tower ) ;
49878: LD_ADDR_VAR 0 16
49882: PUSH
49883: LD_VAR 0 1
49887: PPUSH
49888: CALL_OW 255
49892: ST_TO_ADDR
// x := GetX ( tower ) ;
49893: LD_ADDR_VAR 0 10
49897: PUSH
49898: LD_VAR 0 1
49902: PPUSH
49903: CALL_OW 250
49907: ST_TO_ADDR
// y := GetY ( tower ) ;
49908: LD_ADDR_VAR 0 11
49912: PUSH
49913: LD_VAR 0 1
49917: PPUSH
49918: CALL_OW 251
49922: ST_TO_ADDR
// if not x or not y then
49923: LD_VAR 0 10
49927: NOT
49928: PUSH
49929: LD_VAR 0 11
49933: NOT
49934: OR
49935: IFFALSE 49939
// exit ;
49937: GO 50972
// weapon := 0 ;
49939: LD_ADDR_VAR 0 18
49943: PUSH
49944: LD_INT 0
49946: ST_TO_ADDR
// fac_list := [ ] ;
49947: LD_ADDR_VAR 0 17
49951: PUSH
49952: EMPTY
49953: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49954: LD_ADDR_VAR 0 6
49958: PUSH
49959: LD_VAR 0 1
49963: PPUSH
49964: CALL_OW 274
49968: PPUSH
49969: LD_VAR 0 2
49973: PPUSH
49974: LD_INT 0
49976: PPUSH
49977: CALL 47543 0 3
49981: PPUSH
49982: LD_INT 30
49984: PUSH
49985: LD_INT 3
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PPUSH
49992: CALL_OW 72
49996: ST_TO_ADDR
// if not factories then
49997: LD_VAR 0 6
50001: NOT
50002: IFFALSE 50006
// exit ;
50004: GO 50972
// for i in factories do
50006: LD_ADDR_VAR 0 8
50010: PUSH
50011: LD_VAR 0 6
50015: PUSH
50016: FOR_IN
50017: IFFALSE 50042
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50019: LD_ADDR_VAR 0 17
50023: PUSH
50024: LD_VAR 0 17
50028: PUSH
50029: LD_VAR 0 8
50033: PPUSH
50034: CALL_OW 478
50038: UNION
50039: ST_TO_ADDR
50040: GO 50016
50042: POP
50043: POP
// if not fac_list then
50044: LD_VAR 0 17
50048: NOT
50049: IFFALSE 50053
// exit ;
50051: GO 50972
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50053: LD_ADDR_VAR 0 5
50057: PUSH
50058: LD_INT 4
50060: PUSH
50061: LD_INT 5
50063: PUSH
50064: LD_INT 9
50066: PUSH
50067: LD_INT 10
50069: PUSH
50070: LD_INT 6
50072: PUSH
50073: LD_INT 7
50075: PUSH
50076: LD_INT 11
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 27
50090: PUSH
50091: LD_INT 28
50093: PUSH
50094: LD_INT 26
50096: PUSH
50097: LD_INT 30
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 43
50108: PUSH
50109: LD_INT 44
50111: PUSH
50112: LD_INT 46
50114: PUSH
50115: LD_INT 45
50117: PUSH
50118: LD_INT 47
50120: PUSH
50121: LD_INT 49
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: LIST
50136: PUSH
50137: LD_VAR 0 12
50141: ARRAY
50142: ST_TO_ADDR
// list := list isect fac_list ;
50143: LD_ADDR_VAR 0 5
50147: PUSH
50148: LD_VAR 0 5
50152: PUSH
50153: LD_VAR 0 17
50157: ISECT
50158: ST_TO_ADDR
// if not list then
50159: LD_VAR 0 5
50163: NOT
50164: IFFALSE 50168
// exit ;
50166: GO 50972
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50168: LD_VAR 0 12
50172: PUSH
50173: LD_INT 3
50175: EQUAL
50176: PUSH
50177: LD_INT 49
50179: PUSH
50180: LD_VAR 0 5
50184: IN
50185: AND
50186: PUSH
50187: LD_INT 31
50189: PPUSH
50190: LD_VAR 0 16
50194: PPUSH
50195: CALL_OW 321
50199: PUSH
50200: LD_INT 2
50202: EQUAL
50203: AND
50204: IFFALSE 50264
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50206: LD_INT 22
50208: PUSH
50209: LD_VAR 0 16
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 35
50220: PUSH
50221: LD_INT 49
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 91
50230: PUSH
50231: LD_VAR 0 1
50235: PUSH
50236: LD_INT 10
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: LIST
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: LIST
50248: PPUSH
50249: CALL_OW 69
50253: NOT
50254: IFFALSE 50264
// weapon := ru_time_lapser ;
50256: LD_ADDR_VAR 0 18
50260: PUSH
50261: LD_INT 49
50263: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50264: LD_VAR 0 12
50268: PUSH
50269: LD_INT 1
50271: PUSH
50272: LD_INT 2
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: IN
50279: PUSH
50280: LD_INT 11
50282: PUSH
50283: LD_VAR 0 5
50287: IN
50288: PUSH
50289: LD_INT 30
50291: PUSH
50292: LD_VAR 0 5
50296: IN
50297: OR
50298: AND
50299: PUSH
50300: LD_INT 6
50302: PPUSH
50303: LD_VAR 0 16
50307: PPUSH
50308: CALL_OW 321
50312: PUSH
50313: LD_INT 2
50315: EQUAL
50316: AND
50317: IFFALSE 50482
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50319: LD_INT 22
50321: PUSH
50322: LD_VAR 0 16
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 2
50333: PUSH
50334: LD_INT 35
50336: PUSH
50337: LD_INT 11
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 35
50346: PUSH
50347: LD_INT 30
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 91
50361: PUSH
50362: LD_VAR 0 1
50366: PUSH
50367: LD_INT 18
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: LIST
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: LIST
50379: PPUSH
50380: CALL_OW 69
50384: NOT
50385: PUSH
50386: LD_INT 22
50388: PUSH
50389: LD_VAR 0 16
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 2
50400: PUSH
50401: LD_INT 30
50403: PUSH
50404: LD_INT 32
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 30
50413: PUSH
50414: LD_INT 33
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 91
50428: PUSH
50429: LD_VAR 0 1
50433: PUSH
50434: LD_INT 12
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: LIST
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: LIST
50446: PUSH
50447: EMPTY
50448: LIST
50449: PPUSH
50450: CALL_OW 69
50454: PUSH
50455: LD_INT 2
50457: GREATER
50458: AND
50459: IFFALSE 50482
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50461: LD_ADDR_VAR 0 18
50465: PUSH
50466: LD_INT 11
50468: PUSH
50469: LD_INT 30
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_VAR 0 12
50480: ARRAY
50481: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50482: LD_VAR 0 18
50486: NOT
50487: PUSH
50488: LD_INT 40
50490: PPUSH
50491: LD_VAR 0 16
50495: PPUSH
50496: CALL_OW 321
50500: PUSH
50501: LD_INT 2
50503: EQUAL
50504: AND
50505: PUSH
50506: LD_INT 7
50508: PUSH
50509: LD_VAR 0 5
50513: IN
50514: PUSH
50515: LD_INT 28
50517: PUSH
50518: LD_VAR 0 5
50522: IN
50523: OR
50524: PUSH
50525: LD_INT 45
50527: PUSH
50528: LD_VAR 0 5
50532: IN
50533: OR
50534: AND
50535: IFFALSE 50789
// begin hex := GetHexInfo ( x , y ) ;
50537: LD_ADDR_VAR 0 4
50541: PUSH
50542: LD_VAR 0 10
50546: PPUSH
50547: LD_VAR 0 11
50551: PPUSH
50552: CALL_OW 546
50556: ST_TO_ADDR
// if hex [ 1 ] then
50557: LD_VAR 0 4
50561: PUSH
50562: LD_INT 1
50564: ARRAY
50565: IFFALSE 50569
// exit ;
50567: GO 50972
// height := hex [ 2 ] ;
50569: LD_ADDR_VAR 0 15
50573: PUSH
50574: LD_VAR 0 4
50578: PUSH
50579: LD_INT 2
50581: ARRAY
50582: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50583: LD_ADDR_VAR 0 14
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: LD_INT 2
50593: PUSH
50594: LD_INT 3
50596: PUSH
50597: LD_INT 5
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: ST_TO_ADDR
// for i in tmp do
50606: LD_ADDR_VAR 0 8
50610: PUSH
50611: LD_VAR 0 14
50615: PUSH
50616: FOR_IN
50617: IFFALSE 50787
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50619: LD_ADDR_VAR 0 9
50623: PUSH
50624: LD_VAR 0 10
50628: PPUSH
50629: LD_VAR 0 8
50633: PPUSH
50634: LD_INT 5
50636: PPUSH
50637: CALL_OW 272
50641: PUSH
50642: LD_VAR 0 11
50646: PPUSH
50647: LD_VAR 0 8
50651: PPUSH
50652: LD_INT 5
50654: PPUSH
50655: CALL_OW 273
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50664: LD_VAR 0 9
50668: PUSH
50669: LD_INT 1
50671: ARRAY
50672: PPUSH
50673: LD_VAR 0 9
50677: PUSH
50678: LD_INT 2
50680: ARRAY
50681: PPUSH
50682: CALL_OW 488
50686: IFFALSE 50785
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50688: LD_ADDR_VAR 0 4
50692: PUSH
50693: LD_VAR 0 9
50697: PUSH
50698: LD_INT 1
50700: ARRAY
50701: PPUSH
50702: LD_VAR 0 9
50706: PUSH
50707: LD_INT 2
50709: ARRAY
50710: PPUSH
50711: CALL_OW 546
50715: ST_TO_ADDR
// if hex [ 1 ] then
50716: LD_VAR 0 4
50720: PUSH
50721: LD_INT 1
50723: ARRAY
50724: IFFALSE 50728
// continue ;
50726: GO 50616
// h := hex [ 2 ] ;
50728: LD_ADDR_VAR 0 13
50732: PUSH
50733: LD_VAR 0 4
50737: PUSH
50738: LD_INT 2
50740: ARRAY
50741: ST_TO_ADDR
// if h + 7 < height then
50742: LD_VAR 0 13
50746: PUSH
50747: LD_INT 7
50749: PLUS
50750: PUSH
50751: LD_VAR 0 15
50755: LESS
50756: IFFALSE 50785
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50758: LD_ADDR_VAR 0 18
50762: PUSH
50763: LD_INT 7
50765: PUSH
50766: LD_INT 28
50768: PUSH
50769: LD_INT 45
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: LIST
50776: PUSH
50777: LD_VAR 0 12
50781: ARRAY
50782: ST_TO_ADDR
// break ;
50783: GO 50787
// end ; end ; end ;
50785: GO 50616
50787: POP
50788: POP
// end ; if not weapon then
50789: LD_VAR 0 18
50793: NOT
50794: IFFALSE 50854
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50796: LD_ADDR_VAR 0 5
50800: PUSH
50801: LD_VAR 0 5
50805: PUSH
50806: LD_INT 11
50808: PUSH
50809: LD_INT 30
50811: PUSH
50812: LD_INT 49
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: LIST
50819: DIFF
50820: ST_TO_ADDR
// if not list then
50821: LD_VAR 0 5
50825: NOT
50826: IFFALSE 50830
// exit ;
50828: GO 50972
// weapon := list [ rand ( 1 , list ) ] ;
50830: LD_ADDR_VAR 0 18
50834: PUSH
50835: LD_VAR 0 5
50839: PUSH
50840: LD_INT 1
50842: PPUSH
50843: LD_VAR 0 5
50847: PPUSH
50848: CALL_OW 12
50852: ARRAY
50853: ST_TO_ADDR
// end ; if weapon then
50854: LD_VAR 0 18
50858: IFFALSE 50972
// begin tmp := CostOfWeapon ( weapon ) ;
50860: LD_ADDR_VAR 0 14
50864: PUSH
50865: LD_VAR 0 18
50869: PPUSH
50870: CALL_OW 451
50874: ST_TO_ADDR
// j := GetBase ( tower ) ;
50875: LD_ADDR_VAR 0 9
50879: PUSH
50880: LD_VAR 0 1
50884: PPUSH
50885: CALL_OW 274
50889: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50890: LD_VAR 0 9
50894: PPUSH
50895: LD_INT 1
50897: PPUSH
50898: CALL_OW 275
50902: PUSH
50903: LD_VAR 0 14
50907: PUSH
50908: LD_INT 1
50910: ARRAY
50911: GREATEREQUAL
50912: PUSH
50913: LD_VAR 0 9
50917: PPUSH
50918: LD_INT 2
50920: PPUSH
50921: CALL_OW 275
50925: PUSH
50926: LD_VAR 0 14
50930: PUSH
50931: LD_INT 2
50933: ARRAY
50934: GREATEREQUAL
50935: AND
50936: PUSH
50937: LD_VAR 0 9
50941: PPUSH
50942: LD_INT 3
50944: PPUSH
50945: CALL_OW 275
50949: PUSH
50950: LD_VAR 0 14
50954: PUSH
50955: LD_INT 3
50957: ARRAY
50958: GREATEREQUAL
50959: AND
50960: IFFALSE 50972
// result := weapon ;
50962: LD_ADDR_VAR 0 3
50966: PUSH
50967: LD_VAR 0 18
50971: ST_TO_ADDR
// end ; end ;
50972: LD_VAR 0 3
50976: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50977: LD_INT 0
50979: PPUSH
50980: PPUSH
// result := true ;
50981: LD_ADDR_VAR 0 3
50985: PUSH
50986: LD_INT 1
50988: ST_TO_ADDR
// if array1 = array2 then
50989: LD_VAR 0 1
50993: PUSH
50994: LD_VAR 0 2
50998: EQUAL
50999: IFFALSE 51059
// begin for i = 1 to array1 do
51001: LD_ADDR_VAR 0 4
51005: PUSH
51006: DOUBLE
51007: LD_INT 1
51009: DEC
51010: ST_TO_ADDR
51011: LD_VAR 0 1
51015: PUSH
51016: FOR_TO
51017: IFFALSE 51055
// if array1 [ i ] <> array2 [ i ] then
51019: LD_VAR 0 1
51023: PUSH
51024: LD_VAR 0 4
51028: ARRAY
51029: PUSH
51030: LD_VAR 0 2
51034: PUSH
51035: LD_VAR 0 4
51039: ARRAY
51040: NONEQUAL
51041: IFFALSE 51053
// begin result := false ;
51043: LD_ADDR_VAR 0 3
51047: PUSH
51048: LD_INT 0
51050: ST_TO_ADDR
// break ;
51051: GO 51055
// end ;
51053: GO 51016
51055: POP
51056: POP
// end else
51057: GO 51067
// result := false ;
51059: LD_ADDR_VAR 0 3
51063: PUSH
51064: LD_INT 0
51066: ST_TO_ADDR
// end ;
51067: LD_VAR 0 3
51071: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51072: LD_INT 0
51074: PPUSH
51075: PPUSH
// if not array1 or not array2 then
51076: LD_VAR 0 1
51080: NOT
51081: PUSH
51082: LD_VAR 0 2
51086: NOT
51087: OR
51088: IFFALSE 51092
// exit ;
51090: GO 51156
// result := true ;
51092: LD_ADDR_VAR 0 3
51096: PUSH
51097: LD_INT 1
51099: ST_TO_ADDR
// for i = 1 to array1 do
51100: LD_ADDR_VAR 0 4
51104: PUSH
51105: DOUBLE
51106: LD_INT 1
51108: DEC
51109: ST_TO_ADDR
51110: LD_VAR 0 1
51114: PUSH
51115: FOR_TO
51116: IFFALSE 51154
// if array1 [ i ] <> array2 [ i ] then
51118: LD_VAR 0 1
51122: PUSH
51123: LD_VAR 0 4
51127: ARRAY
51128: PUSH
51129: LD_VAR 0 2
51133: PUSH
51134: LD_VAR 0 4
51138: ARRAY
51139: NONEQUAL
51140: IFFALSE 51152
// begin result := false ;
51142: LD_ADDR_VAR 0 3
51146: PUSH
51147: LD_INT 0
51149: ST_TO_ADDR
// break ;
51150: GO 51154
// end ;
51152: GO 51115
51154: POP
51155: POP
// end ;
51156: LD_VAR 0 3
51160: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51161: LD_INT 0
51163: PPUSH
51164: PPUSH
51165: PPUSH
// pom := GetBase ( fac ) ;
51166: LD_ADDR_VAR 0 5
51170: PUSH
51171: LD_VAR 0 1
51175: PPUSH
51176: CALL_OW 274
51180: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51181: LD_ADDR_VAR 0 4
51185: PUSH
51186: LD_VAR 0 2
51190: PUSH
51191: LD_INT 1
51193: ARRAY
51194: PPUSH
51195: LD_VAR 0 2
51199: PUSH
51200: LD_INT 2
51202: ARRAY
51203: PPUSH
51204: LD_VAR 0 2
51208: PUSH
51209: LD_INT 3
51211: ARRAY
51212: PPUSH
51213: LD_VAR 0 2
51217: PUSH
51218: LD_INT 4
51220: ARRAY
51221: PPUSH
51222: CALL_OW 449
51226: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51227: LD_ADDR_VAR 0 3
51231: PUSH
51232: LD_VAR 0 5
51236: PPUSH
51237: LD_INT 1
51239: PPUSH
51240: CALL_OW 275
51244: PUSH
51245: LD_VAR 0 4
51249: PUSH
51250: LD_INT 1
51252: ARRAY
51253: GREATEREQUAL
51254: PUSH
51255: LD_VAR 0 5
51259: PPUSH
51260: LD_INT 2
51262: PPUSH
51263: CALL_OW 275
51267: PUSH
51268: LD_VAR 0 4
51272: PUSH
51273: LD_INT 2
51275: ARRAY
51276: GREATEREQUAL
51277: AND
51278: PUSH
51279: LD_VAR 0 5
51283: PPUSH
51284: LD_INT 3
51286: PPUSH
51287: CALL_OW 275
51291: PUSH
51292: LD_VAR 0 4
51296: PUSH
51297: LD_INT 3
51299: ARRAY
51300: GREATEREQUAL
51301: AND
51302: ST_TO_ADDR
// end ;
51303: LD_VAR 0 3
51307: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51308: LD_INT 0
51310: PPUSH
51311: PPUSH
51312: PPUSH
51313: PPUSH
// pom := GetBase ( building ) ;
51314: LD_ADDR_VAR 0 3
51318: PUSH
51319: LD_VAR 0 1
51323: PPUSH
51324: CALL_OW 274
51328: ST_TO_ADDR
// if not pom then
51329: LD_VAR 0 3
51333: NOT
51334: IFFALSE 51338
// exit ;
51336: GO 51508
// btype := GetBType ( building ) ;
51338: LD_ADDR_VAR 0 5
51342: PUSH
51343: LD_VAR 0 1
51347: PPUSH
51348: CALL_OW 266
51352: ST_TO_ADDR
// if btype = b_armoury then
51353: LD_VAR 0 5
51357: PUSH
51358: LD_INT 4
51360: EQUAL
51361: IFFALSE 51371
// btype := b_barracks ;
51363: LD_ADDR_VAR 0 5
51367: PUSH
51368: LD_INT 5
51370: ST_TO_ADDR
// if btype = b_depot then
51371: LD_VAR 0 5
51375: PUSH
51376: LD_INT 0
51378: EQUAL
51379: IFFALSE 51389
// btype := b_warehouse ;
51381: LD_ADDR_VAR 0 5
51385: PUSH
51386: LD_INT 1
51388: ST_TO_ADDR
// if btype = b_workshop then
51389: LD_VAR 0 5
51393: PUSH
51394: LD_INT 2
51396: EQUAL
51397: IFFALSE 51407
// btype := b_factory ;
51399: LD_ADDR_VAR 0 5
51403: PUSH
51404: LD_INT 3
51406: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51407: LD_ADDR_VAR 0 4
51411: PUSH
51412: LD_VAR 0 5
51416: PPUSH
51417: LD_VAR 0 1
51421: PPUSH
51422: CALL_OW 248
51426: PPUSH
51427: CALL_OW 450
51431: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51432: LD_ADDR_VAR 0 2
51436: PUSH
51437: LD_VAR 0 3
51441: PPUSH
51442: LD_INT 1
51444: PPUSH
51445: CALL_OW 275
51449: PUSH
51450: LD_VAR 0 4
51454: PUSH
51455: LD_INT 1
51457: ARRAY
51458: GREATEREQUAL
51459: PUSH
51460: LD_VAR 0 3
51464: PPUSH
51465: LD_INT 2
51467: PPUSH
51468: CALL_OW 275
51472: PUSH
51473: LD_VAR 0 4
51477: PUSH
51478: LD_INT 2
51480: ARRAY
51481: GREATEREQUAL
51482: AND
51483: PUSH
51484: LD_VAR 0 3
51488: PPUSH
51489: LD_INT 3
51491: PPUSH
51492: CALL_OW 275
51496: PUSH
51497: LD_VAR 0 4
51501: PUSH
51502: LD_INT 3
51504: ARRAY
51505: GREATEREQUAL
51506: AND
51507: ST_TO_ADDR
// end ;
51508: LD_VAR 0 2
51512: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51513: LD_INT 0
51515: PPUSH
51516: PPUSH
51517: PPUSH
// pom := GetBase ( building ) ;
51518: LD_ADDR_VAR 0 4
51522: PUSH
51523: LD_VAR 0 1
51527: PPUSH
51528: CALL_OW 274
51532: ST_TO_ADDR
// if not pom then
51533: LD_VAR 0 4
51537: NOT
51538: IFFALSE 51542
// exit ;
51540: GO 51643
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51542: LD_ADDR_VAR 0 5
51546: PUSH
51547: LD_VAR 0 2
51551: PPUSH
51552: LD_VAR 0 1
51556: PPUSH
51557: CALL_OW 248
51561: PPUSH
51562: CALL_OW 450
51566: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51567: LD_ADDR_VAR 0 3
51571: PUSH
51572: LD_VAR 0 4
51576: PPUSH
51577: LD_INT 1
51579: PPUSH
51580: CALL_OW 275
51584: PUSH
51585: LD_VAR 0 5
51589: PUSH
51590: LD_INT 1
51592: ARRAY
51593: GREATEREQUAL
51594: PUSH
51595: LD_VAR 0 4
51599: PPUSH
51600: LD_INT 2
51602: PPUSH
51603: CALL_OW 275
51607: PUSH
51608: LD_VAR 0 5
51612: PUSH
51613: LD_INT 2
51615: ARRAY
51616: GREATEREQUAL
51617: AND
51618: PUSH
51619: LD_VAR 0 4
51623: PPUSH
51624: LD_INT 3
51626: PPUSH
51627: CALL_OW 275
51631: PUSH
51632: LD_VAR 0 5
51636: PUSH
51637: LD_INT 3
51639: ARRAY
51640: GREATEREQUAL
51641: AND
51642: ST_TO_ADDR
// end ;
51643: LD_VAR 0 3
51647: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51648: LD_INT 0
51650: PPUSH
51651: PPUSH
51652: PPUSH
51653: PPUSH
51654: PPUSH
51655: PPUSH
51656: PPUSH
51657: PPUSH
51658: PPUSH
51659: PPUSH
51660: PPUSH
// result := false ;
51661: LD_ADDR_VAR 0 8
51665: PUSH
51666: LD_INT 0
51668: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51669: LD_VAR 0 5
51673: NOT
51674: PUSH
51675: LD_VAR 0 1
51679: NOT
51680: OR
51681: PUSH
51682: LD_VAR 0 2
51686: NOT
51687: OR
51688: PUSH
51689: LD_VAR 0 3
51693: NOT
51694: OR
51695: IFFALSE 51699
// exit ;
51697: GO 52513
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51699: LD_ADDR_VAR 0 14
51703: PUSH
51704: LD_VAR 0 1
51708: PPUSH
51709: LD_VAR 0 2
51713: PPUSH
51714: LD_VAR 0 3
51718: PPUSH
51719: LD_VAR 0 4
51723: PPUSH
51724: LD_VAR 0 5
51728: PUSH
51729: LD_INT 1
51731: ARRAY
51732: PPUSH
51733: CALL_OW 248
51737: PPUSH
51738: LD_INT 0
51740: PPUSH
51741: CALL 53766 0 6
51745: ST_TO_ADDR
// if not hexes then
51746: LD_VAR 0 14
51750: NOT
51751: IFFALSE 51755
// exit ;
51753: GO 52513
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51755: LD_ADDR_VAR 0 17
51759: PUSH
51760: LD_VAR 0 5
51764: PPUSH
51765: LD_INT 22
51767: PUSH
51768: LD_VAR 0 13
51772: PPUSH
51773: CALL_OW 255
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 2
51784: PUSH
51785: LD_INT 30
51787: PUSH
51788: LD_INT 0
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 30
51797: PUSH
51798: LD_INT 1
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: LIST
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PPUSH
51814: CALL_OW 72
51818: ST_TO_ADDR
// for i = 1 to hexes do
51819: LD_ADDR_VAR 0 9
51823: PUSH
51824: DOUBLE
51825: LD_INT 1
51827: DEC
51828: ST_TO_ADDR
51829: LD_VAR 0 14
51833: PUSH
51834: FOR_TO
51835: IFFALSE 52511
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51837: LD_ADDR_VAR 0 13
51841: PUSH
51842: LD_VAR 0 14
51846: PUSH
51847: LD_VAR 0 9
51851: ARRAY
51852: PUSH
51853: LD_INT 1
51855: ARRAY
51856: PPUSH
51857: LD_VAR 0 14
51861: PUSH
51862: LD_VAR 0 9
51866: ARRAY
51867: PUSH
51868: LD_INT 2
51870: ARRAY
51871: PPUSH
51872: CALL_OW 428
51876: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51877: LD_VAR 0 14
51881: PUSH
51882: LD_VAR 0 9
51886: ARRAY
51887: PUSH
51888: LD_INT 1
51890: ARRAY
51891: PPUSH
51892: LD_VAR 0 14
51896: PUSH
51897: LD_VAR 0 9
51901: ARRAY
51902: PUSH
51903: LD_INT 2
51905: ARRAY
51906: PPUSH
51907: CALL_OW 351
51911: PUSH
51912: LD_VAR 0 14
51916: PUSH
51917: LD_VAR 0 9
51921: ARRAY
51922: PUSH
51923: LD_INT 1
51925: ARRAY
51926: PPUSH
51927: LD_VAR 0 14
51931: PUSH
51932: LD_VAR 0 9
51936: ARRAY
51937: PUSH
51938: LD_INT 2
51940: ARRAY
51941: PPUSH
51942: CALL_OW 488
51946: NOT
51947: OR
51948: PUSH
51949: LD_VAR 0 13
51953: PPUSH
51954: CALL_OW 247
51958: PUSH
51959: LD_INT 3
51961: EQUAL
51962: OR
51963: IFFALSE 51969
// exit ;
51965: POP
51966: POP
51967: GO 52513
// if not tmp then
51969: LD_VAR 0 13
51973: NOT
51974: IFFALSE 51978
// continue ;
51976: GO 51834
// result := true ;
51978: LD_ADDR_VAR 0 8
51982: PUSH
51983: LD_INT 1
51985: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51986: LD_VAR 0 6
51990: PUSH
51991: LD_VAR 0 13
51995: PPUSH
51996: CALL_OW 247
52000: PUSH
52001: LD_INT 2
52003: EQUAL
52004: AND
52005: PUSH
52006: LD_VAR 0 13
52010: PPUSH
52011: CALL_OW 263
52015: PUSH
52016: LD_INT 1
52018: EQUAL
52019: AND
52020: IFFALSE 52184
// begin if IsDrivenBy ( tmp ) then
52022: LD_VAR 0 13
52026: PPUSH
52027: CALL_OW 311
52031: IFFALSE 52035
// continue ;
52033: GO 51834
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52035: LD_VAR 0 6
52039: PPUSH
52040: LD_INT 3
52042: PUSH
52043: LD_INT 60
52045: PUSH
52046: EMPTY
52047: LIST
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 3
52055: PUSH
52056: LD_INT 55
52058: PUSH
52059: EMPTY
52060: LIST
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PPUSH
52070: CALL_OW 72
52074: IFFALSE 52182
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52076: LD_ADDR_VAR 0 18
52080: PUSH
52081: LD_VAR 0 6
52085: PPUSH
52086: LD_INT 3
52088: PUSH
52089: LD_INT 60
52091: PUSH
52092: EMPTY
52093: LIST
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 3
52101: PUSH
52102: LD_INT 55
52104: PUSH
52105: EMPTY
52106: LIST
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PPUSH
52116: CALL_OW 72
52120: PUSH
52121: LD_INT 1
52123: ARRAY
52124: ST_TO_ADDR
// if IsInUnit ( driver ) then
52125: LD_VAR 0 18
52129: PPUSH
52130: CALL_OW 310
52134: IFFALSE 52145
// ComExit ( driver ) ;
52136: LD_VAR 0 18
52140: PPUSH
52141: CALL 77547 0 1
// AddComEnterUnit ( driver , tmp ) ;
52145: LD_VAR 0 18
52149: PPUSH
52150: LD_VAR 0 13
52154: PPUSH
52155: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52159: LD_VAR 0 18
52163: PPUSH
52164: LD_VAR 0 7
52168: PPUSH
52169: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52173: LD_VAR 0 18
52177: PPUSH
52178: CALL_OW 181
// end ; continue ;
52182: GO 51834
// end ; if not cleaners or not tmp in cleaners then
52184: LD_VAR 0 6
52188: NOT
52189: PUSH
52190: LD_VAR 0 13
52194: PUSH
52195: LD_VAR 0 6
52199: IN
52200: NOT
52201: OR
52202: IFFALSE 52509
// begin if dep then
52204: LD_VAR 0 17
52208: IFFALSE 52344
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52210: LD_ADDR_VAR 0 16
52214: PUSH
52215: LD_VAR 0 17
52219: PUSH
52220: LD_INT 1
52222: ARRAY
52223: PPUSH
52224: CALL_OW 250
52228: PPUSH
52229: LD_VAR 0 17
52233: PUSH
52234: LD_INT 1
52236: ARRAY
52237: PPUSH
52238: CALL_OW 254
52242: PPUSH
52243: LD_INT 5
52245: PPUSH
52246: CALL_OW 272
52250: PUSH
52251: LD_VAR 0 17
52255: PUSH
52256: LD_INT 1
52258: ARRAY
52259: PPUSH
52260: CALL_OW 251
52264: PPUSH
52265: LD_VAR 0 17
52269: PUSH
52270: LD_INT 1
52272: ARRAY
52273: PPUSH
52274: CALL_OW 254
52278: PPUSH
52279: LD_INT 5
52281: PPUSH
52282: CALL_OW 273
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52291: LD_VAR 0 16
52295: PUSH
52296: LD_INT 1
52298: ARRAY
52299: PPUSH
52300: LD_VAR 0 16
52304: PUSH
52305: LD_INT 2
52307: ARRAY
52308: PPUSH
52309: CALL_OW 488
52313: IFFALSE 52344
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52315: LD_VAR 0 13
52319: PPUSH
52320: LD_VAR 0 16
52324: PUSH
52325: LD_INT 1
52327: ARRAY
52328: PPUSH
52329: LD_VAR 0 16
52333: PUSH
52334: LD_INT 2
52336: ARRAY
52337: PPUSH
52338: CALL_OW 111
// continue ;
52342: GO 51834
// end ; end ; r := GetDir ( tmp ) ;
52344: LD_ADDR_VAR 0 15
52348: PUSH
52349: LD_VAR 0 13
52353: PPUSH
52354: CALL_OW 254
52358: ST_TO_ADDR
// if r = 5 then
52359: LD_VAR 0 15
52363: PUSH
52364: LD_INT 5
52366: EQUAL
52367: IFFALSE 52377
// r := 0 ;
52369: LD_ADDR_VAR 0 15
52373: PUSH
52374: LD_INT 0
52376: ST_TO_ADDR
// for j = r to 5 do
52377: LD_ADDR_VAR 0 10
52381: PUSH
52382: DOUBLE
52383: LD_VAR 0 15
52387: DEC
52388: ST_TO_ADDR
52389: LD_INT 5
52391: PUSH
52392: FOR_TO
52393: IFFALSE 52507
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52395: LD_ADDR_VAR 0 11
52399: PUSH
52400: LD_VAR 0 13
52404: PPUSH
52405: CALL_OW 250
52409: PPUSH
52410: LD_VAR 0 10
52414: PPUSH
52415: LD_INT 2
52417: PPUSH
52418: CALL_OW 272
52422: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52423: LD_ADDR_VAR 0 12
52427: PUSH
52428: LD_VAR 0 13
52432: PPUSH
52433: CALL_OW 251
52437: PPUSH
52438: LD_VAR 0 10
52442: PPUSH
52443: LD_INT 2
52445: PPUSH
52446: CALL_OW 273
52450: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52451: LD_VAR 0 11
52455: PPUSH
52456: LD_VAR 0 12
52460: PPUSH
52461: CALL_OW 488
52465: PUSH
52466: LD_VAR 0 11
52470: PPUSH
52471: LD_VAR 0 12
52475: PPUSH
52476: CALL_OW 428
52480: NOT
52481: AND
52482: IFFALSE 52505
// begin ComMoveXY ( tmp , _x , _y ) ;
52484: LD_VAR 0 13
52488: PPUSH
52489: LD_VAR 0 11
52493: PPUSH
52494: LD_VAR 0 12
52498: PPUSH
52499: CALL_OW 111
// break ;
52503: GO 52507
// end ; end ;
52505: GO 52392
52507: POP
52508: POP
// end ; end ;
52509: GO 51834
52511: POP
52512: POP
// end ;
52513: LD_VAR 0 8
52517: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52518: LD_INT 0
52520: PPUSH
// result := true ;
52521: LD_ADDR_VAR 0 3
52525: PUSH
52526: LD_INT 1
52528: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52529: LD_VAR 0 2
52533: PUSH
52534: LD_INT 24
52536: DOUBLE
52537: EQUAL
52538: IFTRUE 52548
52540: LD_INT 33
52542: DOUBLE
52543: EQUAL
52544: IFTRUE 52548
52546: GO 52573
52548: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52549: LD_ADDR_VAR 0 3
52553: PUSH
52554: LD_INT 32
52556: PPUSH
52557: LD_VAR 0 1
52561: PPUSH
52562: CALL_OW 321
52566: PUSH
52567: LD_INT 2
52569: EQUAL
52570: ST_TO_ADDR
52571: GO 52889
52573: LD_INT 20
52575: DOUBLE
52576: EQUAL
52577: IFTRUE 52581
52579: GO 52606
52581: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52582: LD_ADDR_VAR 0 3
52586: PUSH
52587: LD_INT 6
52589: PPUSH
52590: LD_VAR 0 1
52594: PPUSH
52595: CALL_OW 321
52599: PUSH
52600: LD_INT 2
52602: EQUAL
52603: ST_TO_ADDR
52604: GO 52889
52606: LD_INT 22
52608: DOUBLE
52609: EQUAL
52610: IFTRUE 52620
52612: LD_INT 36
52614: DOUBLE
52615: EQUAL
52616: IFTRUE 52620
52618: GO 52645
52620: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52621: LD_ADDR_VAR 0 3
52625: PUSH
52626: LD_INT 15
52628: PPUSH
52629: LD_VAR 0 1
52633: PPUSH
52634: CALL_OW 321
52638: PUSH
52639: LD_INT 2
52641: EQUAL
52642: ST_TO_ADDR
52643: GO 52889
52645: LD_INT 30
52647: DOUBLE
52648: EQUAL
52649: IFTRUE 52653
52651: GO 52678
52653: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52654: LD_ADDR_VAR 0 3
52658: PUSH
52659: LD_INT 20
52661: PPUSH
52662: LD_VAR 0 1
52666: PPUSH
52667: CALL_OW 321
52671: PUSH
52672: LD_INT 2
52674: EQUAL
52675: ST_TO_ADDR
52676: GO 52889
52678: LD_INT 28
52680: DOUBLE
52681: EQUAL
52682: IFTRUE 52692
52684: LD_INT 21
52686: DOUBLE
52687: EQUAL
52688: IFTRUE 52692
52690: GO 52717
52692: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52693: LD_ADDR_VAR 0 3
52697: PUSH
52698: LD_INT 21
52700: PPUSH
52701: LD_VAR 0 1
52705: PPUSH
52706: CALL_OW 321
52710: PUSH
52711: LD_INT 2
52713: EQUAL
52714: ST_TO_ADDR
52715: GO 52889
52717: LD_INT 16
52719: DOUBLE
52720: EQUAL
52721: IFTRUE 52725
52723: GO 52750
52725: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52726: LD_ADDR_VAR 0 3
52730: PUSH
52731: LD_INT 84
52733: PPUSH
52734: LD_VAR 0 1
52738: PPUSH
52739: CALL_OW 321
52743: PUSH
52744: LD_INT 2
52746: EQUAL
52747: ST_TO_ADDR
52748: GO 52889
52750: LD_INT 19
52752: DOUBLE
52753: EQUAL
52754: IFTRUE 52764
52756: LD_INT 23
52758: DOUBLE
52759: EQUAL
52760: IFTRUE 52764
52762: GO 52789
52764: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52765: LD_ADDR_VAR 0 3
52769: PUSH
52770: LD_INT 83
52772: PPUSH
52773: LD_VAR 0 1
52777: PPUSH
52778: CALL_OW 321
52782: PUSH
52783: LD_INT 2
52785: EQUAL
52786: ST_TO_ADDR
52787: GO 52889
52789: LD_INT 17
52791: DOUBLE
52792: EQUAL
52793: IFTRUE 52797
52795: GO 52822
52797: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52798: LD_ADDR_VAR 0 3
52802: PUSH
52803: LD_INT 39
52805: PPUSH
52806: LD_VAR 0 1
52810: PPUSH
52811: CALL_OW 321
52815: PUSH
52816: LD_INT 2
52818: EQUAL
52819: ST_TO_ADDR
52820: GO 52889
52822: LD_INT 18
52824: DOUBLE
52825: EQUAL
52826: IFTRUE 52830
52828: GO 52855
52830: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52831: LD_ADDR_VAR 0 3
52835: PUSH
52836: LD_INT 40
52838: PPUSH
52839: LD_VAR 0 1
52843: PPUSH
52844: CALL_OW 321
52848: PUSH
52849: LD_INT 2
52851: EQUAL
52852: ST_TO_ADDR
52853: GO 52889
52855: LD_INT 27
52857: DOUBLE
52858: EQUAL
52859: IFTRUE 52863
52861: GO 52888
52863: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52864: LD_ADDR_VAR 0 3
52868: PUSH
52869: LD_INT 35
52871: PPUSH
52872: LD_VAR 0 1
52876: PPUSH
52877: CALL_OW 321
52881: PUSH
52882: LD_INT 2
52884: EQUAL
52885: ST_TO_ADDR
52886: GO 52889
52888: POP
// end ;
52889: LD_VAR 0 3
52893: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52894: LD_INT 0
52896: PPUSH
52897: PPUSH
52898: PPUSH
52899: PPUSH
52900: PPUSH
52901: PPUSH
52902: PPUSH
52903: PPUSH
52904: PPUSH
52905: PPUSH
52906: PPUSH
// result := false ;
52907: LD_ADDR_VAR 0 6
52911: PUSH
52912: LD_INT 0
52914: ST_TO_ADDR
// if btype = b_depot then
52915: LD_VAR 0 2
52919: PUSH
52920: LD_INT 0
52922: EQUAL
52923: IFFALSE 52935
// begin result := true ;
52925: LD_ADDR_VAR 0 6
52929: PUSH
52930: LD_INT 1
52932: ST_TO_ADDR
// exit ;
52933: GO 53761
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52935: LD_VAR 0 1
52939: NOT
52940: PUSH
52941: LD_VAR 0 1
52945: PPUSH
52946: CALL_OW 266
52950: PUSH
52951: LD_INT 0
52953: PUSH
52954: LD_INT 1
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: IN
52961: NOT
52962: OR
52963: PUSH
52964: LD_VAR 0 2
52968: NOT
52969: OR
52970: PUSH
52971: LD_VAR 0 5
52975: PUSH
52976: LD_INT 0
52978: PUSH
52979: LD_INT 1
52981: PUSH
52982: LD_INT 2
52984: PUSH
52985: LD_INT 3
52987: PUSH
52988: LD_INT 4
52990: PUSH
52991: LD_INT 5
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: IN
53002: NOT
53003: OR
53004: PUSH
53005: LD_VAR 0 3
53009: PPUSH
53010: LD_VAR 0 4
53014: PPUSH
53015: CALL_OW 488
53019: NOT
53020: OR
53021: IFFALSE 53025
// exit ;
53023: GO 53761
// side := GetSide ( depot ) ;
53025: LD_ADDR_VAR 0 9
53029: PUSH
53030: LD_VAR 0 1
53034: PPUSH
53035: CALL_OW 255
53039: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
53040: LD_VAR 0 9
53044: PPUSH
53045: LD_VAR 0 2
53049: PPUSH
53050: CALL 52518 0 2
53054: NOT
53055: IFFALSE 53059
// exit ;
53057: GO 53761
// pom := GetBase ( depot ) ;
53059: LD_ADDR_VAR 0 10
53063: PUSH
53064: LD_VAR 0 1
53068: PPUSH
53069: CALL_OW 274
53073: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53074: LD_ADDR_VAR 0 11
53078: PUSH
53079: LD_VAR 0 2
53083: PPUSH
53084: LD_VAR 0 1
53088: PPUSH
53089: CALL_OW 248
53093: PPUSH
53094: CALL_OW 450
53098: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53099: LD_VAR 0 10
53103: PPUSH
53104: LD_INT 1
53106: PPUSH
53107: CALL_OW 275
53111: PUSH
53112: LD_VAR 0 11
53116: PUSH
53117: LD_INT 1
53119: ARRAY
53120: GREATEREQUAL
53121: PUSH
53122: LD_VAR 0 10
53126: PPUSH
53127: LD_INT 2
53129: PPUSH
53130: CALL_OW 275
53134: PUSH
53135: LD_VAR 0 11
53139: PUSH
53140: LD_INT 2
53142: ARRAY
53143: GREATEREQUAL
53144: AND
53145: PUSH
53146: LD_VAR 0 10
53150: PPUSH
53151: LD_INT 3
53153: PPUSH
53154: CALL_OW 275
53158: PUSH
53159: LD_VAR 0 11
53163: PUSH
53164: LD_INT 3
53166: ARRAY
53167: GREATEREQUAL
53168: AND
53169: NOT
53170: IFFALSE 53174
// exit ;
53172: GO 53761
// if GetBType ( depot ) = b_depot then
53174: LD_VAR 0 1
53178: PPUSH
53179: CALL_OW 266
53183: PUSH
53184: LD_INT 0
53186: EQUAL
53187: IFFALSE 53199
// dist := 28 else
53189: LD_ADDR_VAR 0 14
53193: PUSH
53194: LD_INT 28
53196: ST_TO_ADDR
53197: GO 53207
// dist := 36 ;
53199: LD_ADDR_VAR 0 14
53203: PUSH
53204: LD_INT 36
53206: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53207: LD_VAR 0 1
53211: PPUSH
53212: LD_VAR 0 3
53216: PPUSH
53217: LD_VAR 0 4
53221: PPUSH
53222: CALL_OW 297
53226: PUSH
53227: LD_VAR 0 14
53231: GREATER
53232: IFFALSE 53236
// exit ;
53234: GO 53761
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53236: LD_ADDR_VAR 0 12
53240: PUSH
53241: LD_VAR 0 2
53245: PPUSH
53246: LD_VAR 0 3
53250: PPUSH
53251: LD_VAR 0 4
53255: PPUSH
53256: LD_VAR 0 5
53260: PPUSH
53261: LD_VAR 0 1
53265: PPUSH
53266: CALL_OW 248
53270: PPUSH
53271: LD_INT 0
53273: PPUSH
53274: CALL 53766 0 6
53278: ST_TO_ADDR
// if not hexes then
53279: LD_VAR 0 12
53283: NOT
53284: IFFALSE 53288
// exit ;
53286: GO 53761
// hex := GetHexInfo ( x , y ) ;
53288: LD_ADDR_VAR 0 15
53292: PUSH
53293: LD_VAR 0 3
53297: PPUSH
53298: LD_VAR 0 4
53302: PPUSH
53303: CALL_OW 546
53307: ST_TO_ADDR
// if hex [ 1 ] then
53308: LD_VAR 0 15
53312: PUSH
53313: LD_INT 1
53315: ARRAY
53316: IFFALSE 53320
// exit ;
53318: GO 53761
// height := hex [ 2 ] ;
53320: LD_ADDR_VAR 0 13
53324: PUSH
53325: LD_VAR 0 15
53329: PUSH
53330: LD_INT 2
53332: ARRAY
53333: ST_TO_ADDR
// for i = 1 to hexes do
53334: LD_ADDR_VAR 0 7
53338: PUSH
53339: DOUBLE
53340: LD_INT 1
53342: DEC
53343: ST_TO_ADDR
53344: LD_VAR 0 12
53348: PUSH
53349: FOR_TO
53350: IFFALSE 53680
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53352: LD_VAR 0 12
53356: PUSH
53357: LD_VAR 0 7
53361: ARRAY
53362: PUSH
53363: LD_INT 1
53365: ARRAY
53366: PPUSH
53367: LD_VAR 0 12
53371: PUSH
53372: LD_VAR 0 7
53376: ARRAY
53377: PUSH
53378: LD_INT 2
53380: ARRAY
53381: PPUSH
53382: CALL_OW 488
53386: NOT
53387: PUSH
53388: LD_VAR 0 12
53392: PUSH
53393: LD_VAR 0 7
53397: ARRAY
53398: PUSH
53399: LD_INT 1
53401: ARRAY
53402: PPUSH
53403: LD_VAR 0 12
53407: PUSH
53408: LD_VAR 0 7
53412: ARRAY
53413: PUSH
53414: LD_INT 2
53416: ARRAY
53417: PPUSH
53418: CALL_OW 428
53422: PUSH
53423: LD_INT 0
53425: GREATER
53426: OR
53427: PUSH
53428: LD_VAR 0 12
53432: PUSH
53433: LD_VAR 0 7
53437: ARRAY
53438: PUSH
53439: LD_INT 1
53441: ARRAY
53442: PPUSH
53443: LD_VAR 0 12
53447: PUSH
53448: LD_VAR 0 7
53452: ARRAY
53453: PUSH
53454: LD_INT 2
53456: ARRAY
53457: PPUSH
53458: CALL_OW 351
53462: OR
53463: IFFALSE 53469
// exit ;
53465: POP
53466: POP
53467: GO 53761
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53469: LD_ADDR_VAR 0 8
53473: PUSH
53474: LD_VAR 0 12
53478: PUSH
53479: LD_VAR 0 7
53483: ARRAY
53484: PUSH
53485: LD_INT 1
53487: ARRAY
53488: PPUSH
53489: LD_VAR 0 12
53493: PUSH
53494: LD_VAR 0 7
53498: ARRAY
53499: PUSH
53500: LD_INT 2
53502: ARRAY
53503: PPUSH
53504: CALL_OW 546
53508: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53509: LD_VAR 0 8
53513: PUSH
53514: LD_INT 1
53516: ARRAY
53517: PUSH
53518: LD_VAR 0 8
53522: PUSH
53523: LD_INT 2
53525: ARRAY
53526: PUSH
53527: LD_VAR 0 13
53531: PUSH
53532: LD_INT 2
53534: PLUS
53535: GREATER
53536: OR
53537: PUSH
53538: LD_VAR 0 8
53542: PUSH
53543: LD_INT 2
53545: ARRAY
53546: PUSH
53547: LD_VAR 0 13
53551: PUSH
53552: LD_INT 2
53554: MINUS
53555: LESS
53556: OR
53557: PUSH
53558: LD_VAR 0 8
53562: PUSH
53563: LD_INT 3
53565: ARRAY
53566: PUSH
53567: LD_INT 0
53569: PUSH
53570: LD_INT 8
53572: PUSH
53573: LD_INT 9
53575: PUSH
53576: LD_INT 10
53578: PUSH
53579: LD_INT 11
53581: PUSH
53582: LD_INT 12
53584: PUSH
53585: LD_INT 13
53587: PUSH
53588: LD_INT 16
53590: PUSH
53591: LD_INT 17
53593: PUSH
53594: LD_INT 18
53596: PUSH
53597: LD_INT 19
53599: PUSH
53600: LD_INT 20
53602: PUSH
53603: LD_INT 21
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: IN
53621: NOT
53622: OR
53623: PUSH
53624: LD_VAR 0 8
53628: PUSH
53629: LD_INT 5
53631: ARRAY
53632: NOT
53633: OR
53634: PUSH
53635: LD_VAR 0 8
53639: PUSH
53640: LD_INT 6
53642: ARRAY
53643: PUSH
53644: LD_INT 1
53646: PUSH
53647: LD_INT 2
53649: PUSH
53650: LD_INT 7
53652: PUSH
53653: LD_INT 9
53655: PUSH
53656: LD_INT 10
53658: PUSH
53659: LD_INT 11
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: IN
53670: NOT
53671: OR
53672: IFFALSE 53678
// exit ;
53674: POP
53675: POP
53676: GO 53761
// end ;
53678: GO 53349
53680: POP
53681: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53682: LD_VAR 0 9
53686: PPUSH
53687: LD_VAR 0 3
53691: PPUSH
53692: LD_VAR 0 4
53696: PPUSH
53697: LD_INT 20
53699: PPUSH
53700: CALL 45684 0 4
53704: PUSH
53705: LD_INT 4
53707: ARRAY
53708: IFFALSE 53712
// exit ;
53710: GO 53761
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53712: LD_VAR 0 2
53716: PUSH
53717: LD_INT 29
53719: PUSH
53720: LD_INT 30
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: IN
53727: PUSH
53728: LD_VAR 0 3
53732: PPUSH
53733: LD_VAR 0 4
53737: PPUSH
53738: LD_VAR 0 9
53742: PPUSH
53743: CALL_OW 440
53747: NOT
53748: AND
53749: IFFALSE 53753
// exit ;
53751: GO 53761
// result := true ;
53753: LD_ADDR_VAR 0 6
53757: PUSH
53758: LD_INT 1
53760: ST_TO_ADDR
// end ;
53761: LD_VAR 0 6
53765: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53766: LD_INT 0
53768: PPUSH
53769: PPUSH
53770: PPUSH
53771: PPUSH
53772: PPUSH
53773: PPUSH
53774: PPUSH
53775: PPUSH
53776: PPUSH
53777: PPUSH
53778: PPUSH
53779: PPUSH
53780: PPUSH
53781: PPUSH
53782: PPUSH
53783: PPUSH
53784: PPUSH
53785: PPUSH
53786: PPUSH
53787: PPUSH
53788: PPUSH
53789: PPUSH
53790: PPUSH
53791: PPUSH
53792: PPUSH
53793: PPUSH
53794: PPUSH
53795: PPUSH
53796: PPUSH
53797: PPUSH
53798: PPUSH
53799: PPUSH
53800: PPUSH
53801: PPUSH
53802: PPUSH
53803: PPUSH
53804: PPUSH
53805: PPUSH
53806: PPUSH
53807: PPUSH
53808: PPUSH
53809: PPUSH
53810: PPUSH
53811: PPUSH
53812: PPUSH
53813: PPUSH
53814: PPUSH
53815: PPUSH
53816: PPUSH
53817: PPUSH
53818: PPUSH
53819: PPUSH
53820: PPUSH
53821: PPUSH
53822: PPUSH
53823: PPUSH
53824: PPUSH
53825: PPUSH
// result = [ ] ;
53826: LD_ADDR_VAR 0 7
53830: PUSH
53831: EMPTY
53832: ST_TO_ADDR
// temp_list = [ ] ;
53833: LD_ADDR_VAR 0 9
53837: PUSH
53838: EMPTY
53839: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53840: LD_VAR 0 4
53844: PUSH
53845: LD_INT 0
53847: PUSH
53848: LD_INT 1
53850: PUSH
53851: LD_INT 2
53853: PUSH
53854: LD_INT 3
53856: PUSH
53857: LD_INT 4
53859: PUSH
53860: LD_INT 5
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: IN
53871: NOT
53872: PUSH
53873: LD_VAR 0 1
53877: PUSH
53878: LD_INT 0
53880: PUSH
53881: LD_INT 1
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: IN
53888: PUSH
53889: LD_VAR 0 5
53893: PUSH
53894: LD_INT 1
53896: PUSH
53897: LD_INT 2
53899: PUSH
53900: LD_INT 3
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: LIST
53907: IN
53908: NOT
53909: AND
53910: OR
53911: IFFALSE 53915
// exit ;
53913: GO 72306
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53915: LD_VAR 0 1
53919: PUSH
53920: LD_INT 6
53922: PUSH
53923: LD_INT 7
53925: PUSH
53926: LD_INT 8
53928: PUSH
53929: LD_INT 13
53931: PUSH
53932: LD_INT 12
53934: PUSH
53935: LD_INT 15
53937: PUSH
53938: LD_INT 11
53940: PUSH
53941: LD_INT 14
53943: PUSH
53944: LD_INT 10
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: IN
53958: IFFALSE 53968
// btype = b_lab ;
53960: LD_ADDR_VAR 0 1
53964: PUSH
53965: LD_INT 6
53967: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53968: LD_VAR 0 6
53972: PUSH
53973: LD_INT 0
53975: PUSH
53976: LD_INT 1
53978: PUSH
53979: LD_INT 2
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: LIST
53986: IN
53987: NOT
53988: PUSH
53989: LD_VAR 0 1
53993: PUSH
53994: LD_INT 0
53996: PUSH
53997: LD_INT 1
53999: PUSH
54000: LD_INT 2
54002: PUSH
54003: LD_INT 3
54005: PUSH
54006: LD_INT 6
54008: PUSH
54009: LD_INT 36
54011: PUSH
54012: LD_INT 4
54014: PUSH
54015: LD_INT 5
54017: PUSH
54018: LD_INT 31
54020: PUSH
54021: LD_INT 32
54023: PUSH
54024: LD_INT 33
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: IN
54040: NOT
54041: PUSH
54042: LD_VAR 0 6
54046: PUSH
54047: LD_INT 1
54049: EQUAL
54050: AND
54051: OR
54052: PUSH
54053: LD_VAR 0 1
54057: PUSH
54058: LD_INT 2
54060: PUSH
54061: LD_INT 3
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: IN
54068: NOT
54069: PUSH
54070: LD_VAR 0 6
54074: PUSH
54075: LD_INT 2
54077: EQUAL
54078: AND
54079: OR
54080: IFFALSE 54090
// mode = 0 ;
54082: LD_ADDR_VAR 0 6
54086: PUSH
54087: LD_INT 0
54089: ST_TO_ADDR
// case mode of 0 :
54090: LD_VAR 0 6
54094: PUSH
54095: LD_INT 0
54097: DOUBLE
54098: EQUAL
54099: IFTRUE 54103
54101: GO 65556
54103: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54104: LD_ADDR_VAR 0 11
54108: PUSH
54109: LD_INT 0
54111: PUSH
54112: LD_INT 0
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 0
54121: PUSH
54122: LD_INT 1
54124: NEG
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 1
54132: PUSH
54133: LD_INT 0
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 1
54142: PUSH
54143: LD_INT 1
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 0
54152: PUSH
54153: LD_INT 1
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 1
54162: NEG
54163: PUSH
54164: LD_INT 0
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 1
54173: NEG
54174: PUSH
54175: LD_INT 1
54177: NEG
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 1
54185: NEG
54186: PUSH
54187: LD_INT 2
54189: NEG
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 0
54197: PUSH
54198: LD_INT 2
54200: NEG
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 1
54208: PUSH
54209: LD_INT 1
54211: NEG
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 1
54219: PUSH
54220: LD_INT 2
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 0
54229: PUSH
54230: LD_INT 2
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 1
54239: NEG
54240: PUSH
54241: LD_INT 1
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 1
54250: PUSH
54251: LD_INT 3
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 0
54260: PUSH
54261: LD_INT 3
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 1
54270: NEG
54271: PUSH
54272: LD_INT 2
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54297: LD_ADDR_VAR 0 12
54301: PUSH
54302: LD_INT 0
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 0
54314: PUSH
54315: LD_INT 1
54317: NEG
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 1
54325: PUSH
54326: LD_INT 0
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 1
54335: PUSH
54336: LD_INT 1
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 0
54345: PUSH
54346: LD_INT 1
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 1
54355: NEG
54356: PUSH
54357: LD_INT 0
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 1
54366: NEG
54367: PUSH
54368: LD_INT 1
54370: NEG
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 1
54378: PUSH
54379: LD_INT 1
54381: NEG
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 2
54389: PUSH
54390: LD_INT 0
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 2
54399: PUSH
54400: LD_INT 1
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 1
54409: NEG
54410: PUSH
54411: LD_INT 1
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 2
54420: NEG
54421: PUSH
54422: LD_INT 0
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 2
54431: NEG
54432: PUSH
54433: LD_INT 1
54435: NEG
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 2
54443: NEG
54444: PUSH
54445: LD_INT 1
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 3
54454: NEG
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 3
54465: NEG
54466: PUSH
54467: LD_INT 1
54469: NEG
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54493: LD_ADDR_VAR 0 13
54497: PUSH
54498: LD_INT 0
54500: PUSH
54501: LD_INT 0
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 0
54510: PUSH
54511: LD_INT 1
54513: NEG
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 1
54521: PUSH
54522: LD_INT 0
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 1
54531: PUSH
54532: LD_INT 1
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 0
54541: PUSH
54542: LD_INT 1
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 1
54551: NEG
54552: PUSH
54553: LD_INT 0
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 1
54562: NEG
54563: PUSH
54564: LD_INT 1
54566: NEG
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 1
54574: NEG
54575: PUSH
54576: LD_INT 2
54578: NEG
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 2
54586: PUSH
54587: LD_INT 1
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 2
54596: PUSH
54597: LD_INT 2
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 1
54606: PUSH
54607: LD_INT 2
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 2
54616: NEG
54617: PUSH
54618: LD_INT 1
54620: NEG
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 2
54628: NEG
54629: PUSH
54630: LD_INT 2
54632: NEG
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 2
54640: NEG
54641: PUSH
54642: LD_INT 3
54644: NEG
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 3
54652: NEG
54653: PUSH
54654: LD_INT 2
54656: NEG
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 3
54664: NEG
54665: PUSH
54666: LD_INT 3
54668: NEG
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54692: LD_ADDR_VAR 0 14
54696: PUSH
54697: LD_INT 0
54699: PUSH
54700: LD_INT 0
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 0
54709: PUSH
54710: LD_INT 1
54712: NEG
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 1
54720: PUSH
54721: LD_INT 0
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 1
54730: PUSH
54731: LD_INT 1
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 0
54740: PUSH
54741: LD_INT 1
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 1
54750: NEG
54751: PUSH
54752: LD_INT 0
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 1
54761: NEG
54762: PUSH
54763: LD_INT 1
54765: NEG
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 1
54773: NEG
54774: PUSH
54775: LD_INT 2
54777: NEG
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 0
54785: PUSH
54786: LD_INT 2
54788: NEG
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 1
54796: PUSH
54797: LD_INT 1
54799: NEG
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 1
54807: PUSH
54808: LD_INT 2
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 0
54817: PUSH
54818: LD_INT 2
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 1
54827: NEG
54828: PUSH
54829: LD_INT 1
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 1
54838: NEG
54839: PUSH
54840: LD_INT 3
54842: NEG
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 0
54850: PUSH
54851: LD_INT 3
54853: NEG
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 1
54861: PUSH
54862: LD_INT 2
54864: NEG
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54888: LD_ADDR_VAR 0 15
54892: PUSH
54893: LD_INT 0
54895: PUSH
54896: LD_INT 0
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 0
54905: PUSH
54906: LD_INT 1
54908: NEG
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 1
54916: PUSH
54917: LD_INT 0
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 1
54926: PUSH
54927: LD_INT 1
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 0
54936: PUSH
54937: LD_INT 1
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 1
54946: NEG
54947: PUSH
54948: LD_INT 0
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 1
54957: NEG
54958: PUSH
54959: LD_INT 1
54961: NEG
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 1
54969: PUSH
54970: LD_INT 1
54972: NEG
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 2
54980: PUSH
54981: LD_INT 0
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 2
54990: PUSH
54991: LD_INT 1
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 1
55000: NEG
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 2
55011: NEG
55012: PUSH
55013: LD_INT 0
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 2
55022: NEG
55023: PUSH
55024: LD_INT 1
55026: NEG
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 2
55034: PUSH
55035: LD_INT 1
55037: NEG
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 3
55045: PUSH
55046: LD_INT 0
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 3
55055: PUSH
55056: LD_INT 1
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55081: LD_ADDR_VAR 0 16
55085: PUSH
55086: LD_INT 0
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 0
55098: PUSH
55099: LD_INT 1
55101: NEG
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 1
55109: PUSH
55110: LD_INT 0
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 1
55119: PUSH
55120: LD_INT 1
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 0
55129: PUSH
55130: LD_INT 1
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 1
55139: NEG
55140: PUSH
55141: LD_INT 0
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 1
55150: NEG
55151: PUSH
55152: LD_INT 1
55154: NEG
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 1
55162: NEG
55163: PUSH
55164: LD_INT 2
55166: NEG
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 2
55174: PUSH
55175: LD_INT 1
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 2
55184: PUSH
55185: LD_INT 2
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 1
55194: PUSH
55195: LD_INT 2
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 2
55204: NEG
55205: PUSH
55206: LD_INT 1
55208: NEG
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 2
55216: NEG
55217: PUSH
55218: LD_INT 2
55220: NEG
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 3
55228: PUSH
55229: LD_INT 2
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 3
55238: PUSH
55239: LD_INT 3
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 2
55248: PUSH
55249: LD_INT 3
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55274: LD_ADDR_VAR 0 17
55278: PUSH
55279: LD_INT 0
55281: PUSH
55282: LD_INT 0
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 0
55291: PUSH
55292: LD_INT 1
55294: NEG
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 1
55302: PUSH
55303: LD_INT 0
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: LD_INT 1
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: LD_INT 1
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: LD_INT 0
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 1
55343: NEG
55344: PUSH
55345: LD_INT 1
55347: NEG
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 1
55355: NEG
55356: PUSH
55357: LD_INT 2
55359: NEG
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 0
55367: PUSH
55368: LD_INT 2
55370: NEG
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 1
55378: PUSH
55379: LD_INT 1
55381: NEG
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 2
55389: PUSH
55390: LD_INT 0
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 2
55399: PUSH
55400: LD_INT 1
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 2
55409: PUSH
55410: LD_INT 2
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 1
55419: PUSH
55420: LD_INT 2
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 0
55429: PUSH
55430: LD_INT 2
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 1
55439: NEG
55440: PUSH
55441: LD_INT 1
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 2
55450: NEG
55451: PUSH
55452: LD_INT 0
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 2
55461: NEG
55462: PUSH
55463: LD_INT 1
55465: NEG
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 2
55473: NEG
55474: PUSH
55475: LD_INT 2
55477: NEG
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55504: LD_ADDR_VAR 0 18
55508: PUSH
55509: LD_INT 0
55511: PUSH
55512: LD_INT 0
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 0
55521: PUSH
55522: LD_INT 1
55524: NEG
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 1
55532: PUSH
55533: LD_INT 0
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 1
55542: PUSH
55543: LD_INT 1
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 0
55552: PUSH
55553: LD_INT 1
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 1
55562: NEG
55563: PUSH
55564: LD_INT 0
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 1
55573: NEG
55574: PUSH
55575: LD_INT 1
55577: NEG
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 1
55585: NEG
55586: PUSH
55587: LD_INT 2
55589: NEG
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 0
55597: PUSH
55598: LD_INT 2
55600: NEG
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 1
55608: PUSH
55609: LD_INT 1
55611: NEG
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 2
55619: PUSH
55620: LD_INT 0
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 2
55629: PUSH
55630: LD_INT 1
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 2
55639: PUSH
55640: LD_INT 2
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 1
55649: PUSH
55650: LD_INT 2
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 0
55659: PUSH
55660: LD_INT 2
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 1
55669: NEG
55670: PUSH
55671: LD_INT 1
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 2
55680: NEG
55681: PUSH
55682: LD_INT 0
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 2
55691: NEG
55692: PUSH
55693: LD_INT 1
55695: NEG
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 2
55703: NEG
55704: PUSH
55705: LD_INT 2
55707: NEG
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55734: LD_ADDR_VAR 0 19
55738: PUSH
55739: LD_INT 0
55741: PUSH
55742: LD_INT 0
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 0
55751: PUSH
55752: LD_INT 1
55754: NEG
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 1
55762: PUSH
55763: LD_INT 0
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 1
55772: PUSH
55773: LD_INT 1
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 0
55782: PUSH
55783: LD_INT 1
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: PUSH
55794: LD_INT 0
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 1
55803: NEG
55804: PUSH
55805: LD_INT 1
55807: NEG
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 1
55815: NEG
55816: PUSH
55817: LD_INT 2
55819: NEG
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 0
55827: PUSH
55828: LD_INT 2
55830: NEG
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 1
55838: PUSH
55839: LD_INT 1
55841: NEG
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 2
55849: PUSH
55850: LD_INT 0
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 2
55859: PUSH
55860: LD_INT 1
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 2
55869: PUSH
55870: LD_INT 2
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 1
55879: PUSH
55880: LD_INT 2
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 0
55889: PUSH
55890: LD_INT 2
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 1
55899: NEG
55900: PUSH
55901: LD_INT 1
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 2
55910: NEG
55911: PUSH
55912: LD_INT 0
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 2
55921: NEG
55922: PUSH
55923: LD_INT 1
55925: NEG
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 2
55933: NEG
55934: PUSH
55935: LD_INT 2
55937: NEG
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55964: LD_ADDR_VAR 0 20
55968: PUSH
55969: LD_INT 0
55971: PUSH
55972: LD_INT 0
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 0
55981: PUSH
55982: LD_INT 1
55984: NEG
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 1
55992: PUSH
55993: LD_INT 0
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 1
56002: PUSH
56003: LD_INT 1
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 0
56012: PUSH
56013: LD_INT 1
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 1
56022: NEG
56023: PUSH
56024: LD_INT 0
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 1
56033: NEG
56034: PUSH
56035: LD_INT 1
56037: NEG
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 1
56045: NEG
56046: PUSH
56047: LD_INT 2
56049: NEG
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 0
56057: PUSH
56058: LD_INT 2
56060: NEG
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 1
56068: PUSH
56069: LD_INT 1
56071: NEG
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 2
56079: PUSH
56080: LD_INT 0
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 2
56089: PUSH
56090: LD_INT 1
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 2
56099: PUSH
56100: LD_INT 2
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 1
56109: PUSH
56110: LD_INT 2
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 0
56119: PUSH
56120: LD_INT 2
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 1
56129: NEG
56130: PUSH
56131: LD_INT 1
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 2
56140: NEG
56141: PUSH
56142: LD_INT 0
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 2
56151: NEG
56152: PUSH
56153: LD_INT 1
56155: NEG
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 2
56163: NEG
56164: PUSH
56165: LD_INT 2
56167: NEG
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56194: LD_ADDR_VAR 0 21
56198: PUSH
56199: LD_INT 0
56201: PUSH
56202: LD_INT 0
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 0
56211: PUSH
56212: LD_INT 1
56214: NEG
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 1
56222: PUSH
56223: LD_INT 0
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 1
56232: PUSH
56233: LD_INT 1
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 0
56242: PUSH
56243: LD_INT 1
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 1
56252: NEG
56253: PUSH
56254: LD_INT 0
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 1
56263: NEG
56264: PUSH
56265: LD_INT 1
56267: NEG
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 1
56275: NEG
56276: PUSH
56277: LD_INT 2
56279: NEG
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 0
56287: PUSH
56288: LD_INT 2
56290: NEG
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 1
56298: PUSH
56299: LD_INT 1
56301: NEG
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 2
56309: PUSH
56310: LD_INT 0
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 2
56319: PUSH
56320: LD_INT 1
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 2
56329: PUSH
56330: LD_INT 2
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 1
56339: PUSH
56340: LD_INT 2
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 0
56349: PUSH
56350: LD_INT 2
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 1
56359: NEG
56360: PUSH
56361: LD_INT 1
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 2
56370: NEG
56371: PUSH
56372: LD_INT 0
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 2
56381: NEG
56382: PUSH
56383: LD_INT 1
56385: NEG
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 2
56393: NEG
56394: PUSH
56395: LD_INT 2
56397: NEG
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56424: LD_ADDR_VAR 0 22
56428: PUSH
56429: LD_INT 0
56431: PUSH
56432: LD_INT 0
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 0
56441: PUSH
56442: LD_INT 1
56444: NEG
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 1
56452: PUSH
56453: LD_INT 0
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 1
56462: PUSH
56463: LD_INT 1
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 0
56472: PUSH
56473: LD_INT 1
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 1
56482: NEG
56483: PUSH
56484: LD_INT 0
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 1
56493: NEG
56494: PUSH
56495: LD_INT 1
56497: NEG
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 1
56505: NEG
56506: PUSH
56507: LD_INT 2
56509: NEG
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 0
56517: PUSH
56518: LD_INT 2
56520: NEG
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 1
56528: PUSH
56529: LD_INT 1
56531: NEG
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 2
56539: PUSH
56540: LD_INT 0
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 2
56549: PUSH
56550: LD_INT 1
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 2
56559: PUSH
56560: LD_INT 2
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 1
56569: PUSH
56570: LD_INT 2
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 0
56579: PUSH
56580: LD_INT 2
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 1
56589: NEG
56590: PUSH
56591: LD_INT 1
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 2
56600: NEG
56601: PUSH
56602: LD_INT 0
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 2
56611: NEG
56612: PUSH
56613: LD_INT 1
56615: NEG
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 2
56623: NEG
56624: PUSH
56625: LD_INT 2
56627: NEG
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56654: LD_ADDR_VAR 0 23
56658: PUSH
56659: LD_INT 0
56661: PUSH
56662: LD_INT 0
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 0
56671: PUSH
56672: LD_INT 1
56674: NEG
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 1
56682: PUSH
56683: LD_INT 0
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 1
56692: PUSH
56693: LD_INT 1
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 0
56702: PUSH
56703: LD_INT 1
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 1
56712: NEG
56713: PUSH
56714: LD_INT 0
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 1
56723: NEG
56724: PUSH
56725: LD_INT 1
56727: NEG
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 1
56735: NEG
56736: PUSH
56737: LD_INT 2
56739: NEG
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 0
56747: PUSH
56748: LD_INT 2
56750: NEG
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 1
56758: PUSH
56759: LD_INT 1
56761: NEG
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 2
56769: PUSH
56770: LD_INT 0
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 2
56779: PUSH
56780: LD_INT 1
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 2
56789: PUSH
56790: LD_INT 2
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 1
56799: PUSH
56800: LD_INT 2
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 0
56809: PUSH
56810: LD_INT 2
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 1
56819: NEG
56820: PUSH
56821: LD_INT 1
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 2
56830: NEG
56831: PUSH
56832: LD_INT 0
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 2
56841: NEG
56842: PUSH
56843: LD_INT 1
56845: NEG
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 2
56853: NEG
56854: PUSH
56855: LD_INT 2
56857: NEG
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 2
56865: NEG
56866: PUSH
56867: LD_INT 3
56869: NEG
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 1
56877: NEG
56878: PUSH
56879: LD_INT 3
56881: NEG
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 1
56889: PUSH
56890: LD_INT 2
56892: NEG
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 2
56900: PUSH
56901: LD_INT 1
56903: NEG
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56934: LD_ADDR_VAR 0 24
56938: PUSH
56939: LD_INT 0
56941: PUSH
56942: LD_INT 0
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 0
56951: PUSH
56952: LD_INT 1
56954: NEG
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 1
56962: PUSH
56963: LD_INT 0
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 1
56972: PUSH
56973: LD_INT 1
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 0
56982: PUSH
56983: LD_INT 1
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 1
56992: NEG
56993: PUSH
56994: LD_INT 0
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 1
57003: NEG
57004: PUSH
57005: LD_INT 1
57007: NEG
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 1
57015: NEG
57016: PUSH
57017: LD_INT 2
57019: NEG
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 0
57027: PUSH
57028: LD_INT 2
57030: NEG
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 1
57038: PUSH
57039: LD_INT 1
57041: NEG
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 2
57049: PUSH
57050: LD_INT 0
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 2
57059: PUSH
57060: LD_INT 1
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 2
57069: PUSH
57070: LD_INT 2
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 1
57079: PUSH
57080: LD_INT 2
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 0
57089: PUSH
57090: LD_INT 2
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 1
57099: NEG
57100: PUSH
57101: LD_INT 1
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 2
57110: NEG
57111: PUSH
57112: LD_INT 0
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 2
57121: NEG
57122: PUSH
57123: LD_INT 1
57125: NEG
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 2
57133: NEG
57134: PUSH
57135: LD_INT 2
57137: NEG
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 1
57145: PUSH
57146: LD_INT 2
57148: NEG
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 2
57156: PUSH
57157: LD_INT 1
57159: NEG
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 3
57167: PUSH
57168: LD_INT 1
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 3
57177: PUSH
57178: LD_INT 2
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57210: LD_ADDR_VAR 0 25
57214: PUSH
57215: LD_INT 0
57217: PUSH
57218: LD_INT 0
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 0
57227: PUSH
57228: LD_INT 1
57230: NEG
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 1
57238: PUSH
57239: LD_INT 0
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 1
57248: PUSH
57249: LD_INT 1
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 0
57258: PUSH
57259: LD_INT 1
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 1
57268: NEG
57269: PUSH
57270: LD_INT 0
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 1
57279: NEG
57280: PUSH
57281: LD_INT 1
57283: NEG
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 1
57291: NEG
57292: PUSH
57293: LD_INT 2
57295: NEG
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 0
57303: PUSH
57304: LD_INT 2
57306: NEG
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 1
57314: PUSH
57315: LD_INT 1
57317: NEG
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 2
57325: PUSH
57326: LD_INT 0
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 2
57335: PUSH
57336: LD_INT 1
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 2
57345: PUSH
57346: LD_INT 2
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 1
57355: PUSH
57356: LD_INT 2
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 0
57365: PUSH
57366: LD_INT 2
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 1
57375: NEG
57376: PUSH
57377: LD_INT 1
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 2
57386: NEG
57387: PUSH
57388: LD_INT 0
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 2
57397: NEG
57398: PUSH
57399: LD_INT 1
57401: NEG
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 2
57409: NEG
57410: PUSH
57411: LD_INT 2
57413: NEG
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 3
57421: PUSH
57422: LD_INT 1
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 3
57431: PUSH
57432: LD_INT 2
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 2
57441: PUSH
57442: LD_INT 3
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 1
57451: PUSH
57452: LD_INT 3
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57484: LD_ADDR_VAR 0 26
57488: PUSH
57489: LD_INT 0
57491: PUSH
57492: LD_INT 0
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 0
57501: PUSH
57502: LD_INT 1
57504: NEG
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 1
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 1
57522: PUSH
57523: LD_INT 1
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 0
57532: PUSH
57533: LD_INT 1
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 1
57542: NEG
57543: PUSH
57544: LD_INT 0
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 1
57553: NEG
57554: PUSH
57555: LD_INT 1
57557: NEG
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 1
57565: NEG
57566: PUSH
57567: LD_INT 2
57569: NEG
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 0
57577: PUSH
57578: LD_INT 2
57580: NEG
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 1
57588: PUSH
57589: LD_INT 1
57591: NEG
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 2
57599: PUSH
57600: LD_INT 0
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 2
57609: PUSH
57610: LD_INT 1
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 2
57619: PUSH
57620: LD_INT 2
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 1
57629: PUSH
57630: LD_INT 2
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 0
57639: PUSH
57640: LD_INT 2
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 1
57649: NEG
57650: PUSH
57651: LD_INT 1
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 2
57660: NEG
57661: PUSH
57662: LD_INT 0
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 2
57671: NEG
57672: PUSH
57673: LD_INT 1
57675: NEG
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 2
57683: NEG
57684: PUSH
57685: LD_INT 2
57687: NEG
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 2
57695: PUSH
57696: LD_INT 3
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 1
57705: PUSH
57706: LD_INT 3
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 1
57715: NEG
57716: PUSH
57717: LD_INT 2
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 2
57726: NEG
57727: PUSH
57728: LD_INT 1
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57760: LD_ADDR_VAR 0 27
57764: PUSH
57765: LD_INT 0
57767: PUSH
57768: LD_INT 0
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 0
57777: PUSH
57778: LD_INT 1
57780: NEG
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 1
57788: PUSH
57789: LD_INT 0
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 1
57798: PUSH
57799: LD_INT 1
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 0
57808: PUSH
57809: LD_INT 1
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 1
57818: NEG
57819: PUSH
57820: LD_INT 0
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 1
57829: NEG
57830: PUSH
57831: LD_INT 1
57833: NEG
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 1
57841: NEG
57842: PUSH
57843: LD_INT 2
57845: NEG
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 0
57853: PUSH
57854: LD_INT 2
57856: NEG
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 1
57864: PUSH
57865: LD_INT 1
57867: NEG
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 2
57875: PUSH
57876: LD_INT 0
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 2
57885: PUSH
57886: LD_INT 1
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 2
57895: PUSH
57896: LD_INT 2
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 1
57905: PUSH
57906: LD_INT 2
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 0
57915: PUSH
57916: LD_INT 2
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 1
57925: NEG
57926: PUSH
57927: LD_INT 1
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 2
57936: NEG
57937: PUSH
57938: LD_INT 0
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 2
57947: NEG
57948: PUSH
57949: LD_INT 1
57951: NEG
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 2
57959: NEG
57960: PUSH
57961: LD_INT 2
57963: NEG
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 1
57971: NEG
57972: PUSH
57973: LD_INT 2
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 2
57982: NEG
57983: PUSH
57984: LD_INT 1
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 3
57993: NEG
57994: PUSH
57995: LD_INT 1
57997: NEG
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 3
58005: NEG
58006: PUSH
58007: LD_INT 2
58009: NEG
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58040: LD_ADDR_VAR 0 28
58044: PUSH
58045: LD_INT 0
58047: PUSH
58048: LD_INT 0
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 0
58057: PUSH
58058: LD_INT 1
58060: NEG
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 1
58068: PUSH
58069: LD_INT 0
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 1
58078: PUSH
58079: LD_INT 1
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 0
58088: PUSH
58089: LD_INT 1
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 1
58098: NEG
58099: PUSH
58100: LD_INT 0
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 1
58109: NEG
58110: PUSH
58111: LD_INT 1
58113: NEG
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 1
58121: NEG
58122: PUSH
58123: LD_INT 2
58125: NEG
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 0
58133: PUSH
58134: LD_INT 2
58136: NEG
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 1
58144: PUSH
58145: LD_INT 1
58147: NEG
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 2
58155: PUSH
58156: LD_INT 0
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 2
58165: PUSH
58166: LD_INT 1
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 2
58175: PUSH
58176: LD_INT 2
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 1
58185: PUSH
58186: LD_INT 2
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 0
58195: PUSH
58196: LD_INT 2
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 1
58205: NEG
58206: PUSH
58207: LD_INT 1
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 2
58216: NEG
58217: PUSH
58218: LD_INT 0
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 2
58227: NEG
58228: PUSH
58229: LD_INT 1
58231: NEG
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 2
58239: NEG
58240: PUSH
58241: LD_INT 2
58243: NEG
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 2
58251: NEG
58252: PUSH
58253: LD_INT 3
58255: NEG
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 1
58263: NEG
58264: PUSH
58265: LD_INT 3
58267: NEG
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 3
58275: NEG
58276: PUSH
58277: LD_INT 1
58279: NEG
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 3
58287: NEG
58288: PUSH
58289: LD_INT 2
58291: NEG
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58322: LD_ADDR_VAR 0 29
58326: PUSH
58327: LD_INT 0
58329: PUSH
58330: LD_INT 0
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 0
58339: PUSH
58340: LD_INT 1
58342: NEG
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 1
58350: PUSH
58351: LD_INT 0
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 1
58360: PUSH
58361: LD_INT 1
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 0
58370: PUSH
58371: LD_INT 1
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 1
58380: NEG
58381: PUSH
58382: LD_INT 0
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 1
58391: NEG
58392: PUSH
58393: LD_INT 1
58395: NEG
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 1
58403: NEG
58404: PUSH
58405: LD_INT 2
58407: NEG
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 0
58415: PUSH
58416: LD_INT 2
58418: NEG
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 1
58426: PUSH
58427: LD_INT 1
58429: NEG
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 2
58437: PUSH
58438: LD_INT 0
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 2
58447: PUSH
58448: LD_INT 1
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 1
58457: PUSH
58458: LD_INT 2
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 0
58467: PUSH
58468: LD_INT 2
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 1
58477: NEG
58478: PUSH
58479: LD_INT 1
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 2
58488: NEG
58489: PUSH
58490: LD_INT 1
58492: NEG
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 2
58500: NEG
58501: PUSH
58502: LD_INT 2
58504: NEG
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 2
58512: NEG
58513: PUSH
58514: LD_INT 3
58516: NEG
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 2
58524: PUSH
58525: LD_INT 1
58527: NEG
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 3
58535: PUSH
58536: LD_INT 1
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 1
58545: PUSH
58546: LD_INT 3
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 1
58555: NEG
58556: PUSH
58557: LD_INT 2
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 3
58566: NEG
58567: PUSH
58568: LD_INT 2
58570: NEG
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58601: LD_ADDR_VAR 0 30
58605: PUSH
58606: LD_INT 0
58608: PUSH
58609: LD_INT 0
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 0
58618: PUSH
58619: LD_INT 1
58621: NEG
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 1
58629: PUSH
58630: LD_INT 0
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 1
58639: PUSH
58640: LD_INT 1
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 0
58649: PUSH
58650: LD_INT 1
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 1
58659: NEG
58660: PUSH
58661: LD_INT 0
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 1
58670: NEG
58671: PUSH
58672: LD_INT 1
58674: NEG
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 1
58682: NEG
58683: PUSH
58684: LD_INT 2
58686: NEG
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 0
58694: PUSH
58695: LD_INT 2
58697: NEG
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 1
58705: PUSH
58706: LD_INT 1
58708: NEG
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 2
58716: PUSH
58717: LD_INT 0
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 2
58726: PUSH
58727: LD_INT 1
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 2
58736: PUSH
58737: LD_INT 2
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 1
58746: PUSH
58747: LD_INT 2
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 1
58756: NEG
58757: PUSH
58758: LD_INT 1
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 2
58767: NEG
58768: PUSH
58769: LD_INT 0
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 2
58778: NEG
58779: PUSH
58780: LD_INT 1
58782: NEG
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 1
58790: NEG
58791: PUSH
58792: LD_INT 3
58794: NEG
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 1
58802: PUSH
58803: LD_INT 2
58805: NEG
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 3
58813: PUSH
58814: LD_INT 2
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 2
58823: PUSH
58824: LD_INT 3
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 2
58833: NEG
58834: PUSH
58835: LD_INT 1
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 3
58844: NEG
58845: PUSH
58846: LD_INT 1
58848: NEG
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58879: LD_ADDR_VAR 0 31
58883: PUSH
58884: LD_INT 0
58886: PUSH
58887: LD_INT 0
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 0
58896: PUSH
58897: LD_INT 1
58899: NEG
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 1
58907: PUSH
58908: LD_INT 0
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 1
58917: PUSH
58918: LD_INT 1
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 0
58927: PUSH
58928: LD_INT 1
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 1
58937: NEG
58938: PUSH
58939: LD_INT 0
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 1
58948: NEG
58949: PUSH
58950: LD_INT 1
58952: NEG
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 1
58960: NEG
58961: PUSH
58962: LD_INT 2
58964: NEG
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 1
58972: PUSH
58973: LD_INT 1
58975: NEG
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 2
58983: PUSH
58984: LD_INT 0
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 2
58993: PUSH
58994: LD_INT 1
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 2
59003: PUSH
59004: LD_INT 2
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 1
59013: PUSH
59014: LD_INT 2
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 0
59023: PUSH
59024: LD_INT 2
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 1
59033: NEG
59034: PUSH
59035: LD_INT 1
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 2
59044: NEG
59045: PUSH
59046: LD_INT 1
59048: NEG
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 2
59056: NEG
59057: PUSH
59058: LD_INT 2
59060: NEG
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 2
59068: NEG
59069: PUSH
59070: LD_INT 3
59072: NEG
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 2
59080: PUSH
59081: LD_INT 1
59083: NEG
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 3
59091: PUSH
59092: LD_INT 1
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 1
59101: PUSH
59102: LD_INT 3
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 1
59111: NEG
59112: PUSH
59113: LD_INT 2
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 3
59122: NEG
59123: PUSH
59124: LD_INT 2
59126: NEG
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59157: LD_ADDR_VAR 0 32
59161: PUSH
59162: LD_INT 0
59164: PUSH
59165: LD_INT 0
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 0
59174: PUSH
59175: LD_INT 1
59177: NEG
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 1
59185: PUSH
59186: LD_INT 0
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 1
59195: PUSH
59196: LD_INT 1
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 0
59205: PUSH
59206: LD_INT 1
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 1
59215: NEG
59216: PUSH
59217: LD_INT 0
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 1
59226: NEG
59227: PUSH
59228: LD_INT 1
59230: NEG
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 1
59238: NEG
59239: PUSH
59240: LD_INT 2
59242: NEG
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 0
59250: PUSH
59251: LD_INT 2
59253: NEG
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 1
59261: PUSH
59262: LD_INT 1
59264: NEG
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 2
59272: PUSH
59273: LD_INT 1
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 2
59282: PUSH
59283: LD_INT 2
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 1
59292: PUSH
59293: LD_INT 2
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 0
59302: PUSH
59303: LD_INT 2
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 1
59312: NEG
59313: PUSH
59314: LD_INT 1
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 2
59323: NEG
59324: PUSH
59325: LD_INT 0
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 2
59334: NEG
59335: PUSH
59336: LD_INT 1
59338: NEG
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 1
59346: NEG
59347: PUSH
59348: LD_INT 3
59350: NEG
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 1
59358: PUSH
59359: LD_INT 2
59361: NEG
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 3
59369: PUSH
59370: LD_INT 2
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 2
59379: PUSH
59380: LD_INT 3
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 2
59389: NEG
59390: PUSH
59391: LD_INT 1
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 3
59400: NEG
59401: PUSH
59402: LD_INT 1
59404: NEG
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59435: LD_ADDR_VAR 0 33
59439: PUSH
59440: LD_INT 0
59442: PUSH
59443: LD_INT 0
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 0
59452: PUSH
59453: LD_INT 1
59455: NEG
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 1
59463: PUSH
59464: LD_INT 0
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 1
59473: PUSH
59474: LD_INT 1
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 0
59483: PUSH
59484: LD_INT 1
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 1
59493: NEG
59494: PUSH
59495: LD_INT 0
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 1
59504: NEG
59505: PUSH
59506: LD_INT 1
59508: NEG
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 1
59516: NEG
59517: PUSH
59518: LD_INT 2
59520: NEG
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 1
59528: PUSH
59529: LD_INT 1
59531: NEG
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 2
59539: PUSH
59540: LD_INT 0
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 2
59549: PUSH
59550: LD_INT 1
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 1
59559: PUSH
59560: LD_INT 2
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 0
59569: PUSH
59570: LD_INT 2
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 1
59579: NEG
59580: PUSH
59581: LD_INT 1
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 2
59590: NEG
59591: PUSH
59592: LD_INT 0
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 2
59601: NEG
59602: PUSH
59603: LD_INT 1
59605: NEG
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 2
59613: NEG
59614: PUSH
59615: LD_INT 2
59617: NEG
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 2
59625: NEG
59626: PUSH
59627: LD_INT 3
59629: NEG
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 2
59637: PUSH
59638: LD_INT 1
59640: NEG
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 3
59648: PUSH
59649: LD_INT 1
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 1
59658: PUSH
59659: LD_INT 3
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 1
59668: NEG
59669: PUSH
59670: LD_INT 2
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 3
59679: NEG
59680: PUSH
59681: LD_INT 2
59683: NEG
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59714: LD_ADDR_VAR 0 34
59718: PUSH
59719: LD_INT 0
59721: PUSH
59722: LD_INT 0
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 0
59731: PUSH
59732: LD_INT 1
59734: NEG
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 1
59742: PUSH
59743: LD_INT 0
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 1
59752: PUSH
59753: LD_INT 1
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 0
59762: PUSH
59763: LD_INT 1
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 1
59772: NEG
59773: PUSH
59774: LD_INT 0
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 1
59783: NEG
59784: PUSH
59785: LD_INT 1
59787: NEG
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 1
59795: NEG
59796: PUSH
59797: LD_INT 2
59799: NEG
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 0
59807: PUSH
59808: LD_INT 2
59810: NEG
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 1
59818: PUSH
59819: LD_INT 1
59821: NEG
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 2
59829: PUSH
59830: LD_INT 1
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 2
59839: PUSH
59840: LD_INT 2
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 1
59849: PUSH
59850: LD_INT 2
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 1
59859: NEG
59860: PUSH
59861: LD_INT 1
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 2
59870: NEG
59871: PUSH
59872: LD_INT 0
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 2
59881: NEG
59882: PUSH
59883: LD_INT 1
59885: NEG
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 2
59893: NEG
59894: PUSH
59895: LD_INT 2
59897: NEG
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 1
59905: NEG
59906: PUSH
59907: LD_INT 3
59909: NEG
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 1
59917: PUSH
59918: LD_INT 2
59920: NEG
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 3
59928: PUSH
59929: LD_INT 2
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 2
59938: PUSH
59939: LD_INT 3
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 2
59948: NEG
59949: PUSH
59950: LD_INT 1
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 3
59959: NEG
59960: PUSH
59961: LD_INT 1
59963: NEG
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59994: LD_ADDR_VAR 0 35
59998: PUSH
59999: LD_INT 0
60001: PUSH
60002: LD_INT 0
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 0
60011: PUSH
60012: LD_INT 1
60014: NEG
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 1
60022: PUSH
60023: LD_INT 0
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 1
60032: PUSH
60033: LD_INT 1
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 0
60042: PUSH
60043: LD_INT 1
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 1
60052: NEG
60053: PUSH
60054: LD_INT 0
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 1
60063: NEG
60064: PUSH
60065: LD_INT 1
60067: NEG
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 2
60075: PUSH
60076: LD_INT 1
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 2
60085: NEG
60086: PUSH
60087: LD_INT 1
60089: NEG
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60106: LD_ADDR_VAR 0 36
60110: PUSH
60111: LD_INT 0
60113: PUSH
60114: LD_INT 0
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 0
60123: PUSH
60124: LD_INT 1
60126: NEG
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 1
60134: PUSH
60135: LD_INT 0
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 1
60144: PUSH
60145: LD_INT 1
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 0
60154: PUSH
60155: LD_INT 1
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 1
60164: NEG
60165: PUSH
60166: LD_INT 0
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 1
60175: NEG
60176: PUSH
60177: LD_INT 1
60179: NEG
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 1
60187: NEG
60188: PUSH
60189: LD_INT 2
60191: NEG
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 1
60199: PUSH
60200: LD_INT 2
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60218: LD_ADDR_VAR 0 37
60222: PUSH
60223: LD_INT 0
60225: PUSH
60226: LD_INT 0
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 0
60235: PUSH
60236: LD_INT 1
60238: NEG
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 1
60246: PUSH
60247: LD_INT 0
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 1
60256: PUSH
60257: LD_INT 1
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 0
60266: PUSH
60267: LD_INT 1
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 1
60276: NEG
60277: PUSH
60278: LD_INT 0
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 1
60287: NEG
60288: PUSH
60289: LD_INT 1
60291: NEG
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 1
60299: PUSH
60300: LD_INT 1
60302: NEG
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 1
60310: NEG
60311: PUSH
60312: LD_INT 1
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60330: LD_ADDR_VAR 0 38
60334: PUSH
60335: LD_INT 0
60337: PUSH
60338: LD_INT 0
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 0
60347: PUSH
60348: LD_INT 1
60350: NEG
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 1
60358: PUSH
60359: LD_INT 0
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 1
60368: PUSH
60369: LD_INT 1
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 0
60378: PUSH
60379: LD_INT 1
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 1
60388: NEG
60389: PUSH
60390: LD_INT 0
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 1
60399: NEG
60400: PUSH
60401: LD_INT 1
60403: NEG
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 2
60411: PUSH
60412: LD_INT 1
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 2
60421: NEG
60422: PUSH
60423: LD_INT 1
60425: NEG
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60442: LD_ADDR_VAR 0 39
60446: PUSH
60447: LD_INT 0
60449: PUSH
60450: LD_INT 0
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 0
60459: PUSH
60460: LD_INT 1
60462: NEG
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 1
60470: PUSH
60471: LD_INT 0
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 1
60480: PUSH
60481: LD_INT 1
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 0
60490: PUSH
60491: LD_INT 1
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 1
60500: NEG
60501: PUSH
60502: LD_INT 0
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 1
60511: NEG
60512: PUSH
60513: LD_INT 1
60515: NEG
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 1
60523: NEG
60524: PUSH
60525: LD_INT 2
60527: NEG
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 1
60535: PUSH
60536: LD_INT 2
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60554: LD_ADDR_VAR 0 40
60558: PUSH
60559: LD_INT 0
60561: PUSH
60562: LD_INT 0
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 0
60571: PUSH
60572: LD_INT 1
60574: NEG
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 1
60582: PUSH
60583: LD_INT 0
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 1
60592: PUSH
60593: LD_INT 1
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 0
60602: PUSH
60603: LD_INT 1
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 1
60612: NEG
60613: PUSH
60614: LD_INT 0
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 1
60623: NEG
60624: PUSH
60625: LD_INT 1
60627: NEG
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 1
60635: PUSH
60636: LD_INT 1
60638: NEG
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 1
60646: NEG
60647: PUSH
60648: LD_INT 1
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60666: LD_ADDR_VAR 0 41
60670: PUSH
60671: LD_INT 0
60673: PUSH
60674: LD_INT 0
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 0
60683: PUSH
60684: LD_INT 1
60686: NEG
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 1
60694: PUSH
60695: LD_INT 0
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 1
60704: PUSH
60705: LD_INT 1
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 0
60714: PUSH
60715: LD_INT 1
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 1
60724: NEG
60725: PUSH
60726: LD_INT 0
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 1
60735: NEG
60736: PUSH
60737: LD_INT 1
60739: NEG
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 1
60747: NEG
60748: PUSH
60749: LD_INT 2
60751: NEG
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 1
60759: PUSH
60760: LD_INT 1
60762: NEG
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 2
60770: PUSH
60771: LD_INT 0
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PUSH
60778: LD_INT 2
60780: PUSH
60781: LD_INT 1
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 2
60790: PUSH
60791: LD_INT 2
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 1
60800: PUSH
60801: LD_INT 2
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 1
60810: NEG
60811: PUSH
60812: LD_INT 1
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 2
60821: NEG
60822: PUSH
60823: LD_INT 0
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 2
60832: NEG
60833: PUSH
60834: LD_INT 1
60836: NEG
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 2
60844: NEG
60845: PUSH
60846: LD_INT 2
60848: NEG
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 2
60856: NEG
60857: PUSH
60858: LD_INT 3
60860: NEG
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 2
60868: PUSH
60869: LD_INT 1
60871: NEG
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 3
60879: PUSH
60880: LD_INT 0
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 3
60889: PUSH
60890: LD_INT 1
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 3
60899: PUSH
60900: LD_INT 2
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: LD_INT 3
60909: PUSH
60910: LD_INT 3
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 2
60919: PUSH
60920: LD_INT 3
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 2
60929: NEG
60930: PUSH
60931: LD_INT 1
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 3
60940: NEG
60941: PUSH
60942: LD_INT 0
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 3
60951: NEG
60952: PUSH
60953: LD_INT 1
60955: NEG
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 3
60963: NEG
60964: PUSH
60965: LD_INT 2
60967: NEG
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 3
60975: NEG
60976: PUSH
60977: LD_INT 3
60979: NEG
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61016: LD_ADDR_VAR 0 42
61020: PUSH
61021: LD_INT 0
61023: PUSH
61024: LD_INT 0
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 0
61033: PUSH
61034: LD_INT 1
61036: NEG
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 1
61044: PUSH
61045: LD_INT 0
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 1
61054: PUSH
61055: LD_INT 1
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 0
61064: PUSH
61065: LD_INT 1
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 1
61074: NEG
61075: PUSH
61076: LD_INT 0
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 1
61085: NEG
61086: PUSH
61087: LD_INT 1
61089: NEG
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 1
61097: NEG
61098: PUSH
61099: LD_INT 2
61101: NEG
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 0
61109: PUSH
61110: LD_INT 2
61112: NEG
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 1
61120: PUSH
61121: LD_INT 1
61123: NEG
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 2
61131: PUSH
61132: LD_INT 1
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 2
61141: PUSH
61142: LD_INT 2
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 1
61151: PUSH
61152: LD_INT 2
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 0
61161: PUSH
61162: LD_INT 2
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 1
61171: NEG
61172: PUSH
61173: LD_INT 1
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 2
61182: NEG
61183: PUSH
61184: LD_INT 1
61186: NEG
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 2
61194: NEG
61195: PUSH
61196: LD_INT 2
61198: NEG
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 2
61206: NEG
61207: PUSH
61208: LD_INT 3
61210: NEG
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 1
61218: NEG
61219: PUSH
61220: LD_INT 3
61222: NEG
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 0
61230: PUSH
61231: LD_INT 3
61233: NEG
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 1
61241: PUSH
61242: LD_INT 2
61244: NEG
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 3
61252: PUSH
61253: LD_INT 2
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 3
61262: PUSH
61263: LD_INT 3
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 2
61272: PUSH
61273: LD_INT 3
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 1
61282: PUSH
61283: LD_INT 3
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 0
61292: PUSH
61293: LD_INT 3
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 1
61302: NEG
61303: PUSH
61304: LD_INT 2
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 3
61313: NEG
61314: PUSH
61315: LD_INT 2
61317: NEG
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 3
61325: NEG
61326: PUSH
61327: LD_INT 3
61329: NEG
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61366: LD_ADDR_VAR 0 43
61370: PUSH
61371: LD_INT 0
61373: PUSH
61374: LD_INT 0
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 0
61383: PUSH
61384: LD_INT 1
61386: NEG
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 1
61394: PUSH
61395: LD_INT 0
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 1
61404: PUSH
61405: LD_INT 1
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 0
61414: PUSH
61415: LD_INT 1
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 1
61424: NEG
61425: PUSH
61426: LD_INT 0
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 1
61435: NEG
61436: PUSH
61437: LD_INT 1
61439: NEG
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 1
61447: NEG
61448: PUSH
61449: LD_INT 2
61451: NEG
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 0
61459: PUSH
61460: LD_INT 2
61462: NEG
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 1
61470: PUSH
61471: LD_INT 1
61473: NEG
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 2
61481: PUSH
61482: LD_INT 0
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 2
61491: PUSH
61492: LD_INT 1
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: LD_INT 1
61501: PUSH
61502: LD_INT 2
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 0
61511: PUSH
61512: LD_INT 2
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 1
61521: NEG
61522: PUSH
61523: LD_INT 1
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 2
61532: NEG
61533: PUSH
61534: LD_INT 0
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 2
61543: NEG
61544: PUSH
61545: LD_INT 1
61547: NEG
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 1
61555: NEG
61556: PUSH
61557: LD_INT 3
61559: NEG
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 0
61567: PUSH
61568: LD_INT 3
61570: NEG
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 1
61578: PUSH
61579: LD_INT 2
61581: NEG
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 2
61589: PUSH
61590: LD_INT 1
61592: NEG
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 3
61600: PUSH
61601: LD_INT 0
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 3
61610: PUSH
61611: LD_INT 1
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 1
61620: PUSH
61621: LD_INT 3
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 0
61630: PUSH
61631: LD_INT 3
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 1
61640: NEG
61641: PUSH
61642: LD_INT 2
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 2
61651: NEG
61652: PUSH
61653: LD_INT 1
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 3
61662: NEG
61663: PUSH
61664: LD_INT 0
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 3
61673: NEG
61674: PUSH
61675: LD_INT 1
61677: NEG
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61714: LD_ADDR_VAR 0 44
61718: PUSH
61719: LD_INT 0
61721: PUSH
61722: LD_INT 0
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 0
61731: PUSH
61732: LD_INT 1
61734: NEG
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: PUSH
61740: LD_INT 1
61742: PUSH
61743: LD_INT 0
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 1
61752: PUSH
61753: LD_INT 1
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 0
61762: PUSH
61763: LD_INT 1
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 1
61772: NEG
61773: PUSH
61774: LD_INT 0
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 1
61783: NEG
61784: PUSH
61785: LD_INT 1
61787: NEG
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 1
61795: NEG
61796: PUSH
61797: LD_INT 2
61799: NEG
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 1
61807: PUSH
61808: LD_INT 1
61810: NEG
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 2
61818: PUSH
61819: LD_INT 0
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 2
61828: PUSH
61829: LD_INT 1
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 2
61838: PUSH
61839: LD_INT 2
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 1
61848: PUSH
61849: LD_INT 2
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 1
61858: NEG
61859: PUSH
61860: LD_INT 1
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 2
61869: NEG
61870: PUSH
61871: LD_INT 0
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: LD_INT 2
61880: NEG
61881: PUSH
61882: LD_INT 1
61884: NEG
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 2
61892: NEG
61893: PUSH
61894: LD_INT 2
61896: NEG
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 2
61904: NEG
61905: PUSH
61906: LD_INT 3
61908: NEG
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 2
61916: PUSH
61917: LD_INT 1
61919: NEG
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 3
61927: PUSH
61928: LD_INT 0
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 3
61937: PUSH
61938: LD_INT 1
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 3
61947: PUSH
61948: LD_INT 2
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 3
61957: PUSH
61958: LD_INT 3
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 2
61967: PUSH
61968: LD_INT 3
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 2
61977: NEG
61978: PUSH
61979: LD_INT 1
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 3
61988: NEG
61989: PUSH
61990: LD_INT 0
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 3
61999: NEG
62000: PUSH
62001: LD_INT 1
62003: NEG
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 3
62011: NEG
62012: PUSH
62013: LD_INT 2
62015: NEG
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 3
62023: NEG
62024: PUSH
62025: LD_INT 3
62027: NEG
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62064: LD_ADDR_VAR 0 45
62068: PUSH
62069: LD_INT 0
62071: PUSH
62072: LD_INT 0
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 0
62081: PUSH
62082: LD_INT 1
62084: NEG
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 1
62092: PUSH
62093: LD_INT 0
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 1
62102: PUSH
62103: LD_INT 1
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: LD_INT 0
62112: PUSH
62113: LD_INT 1
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 1
62122: NEG
62123: PUSH
62124: LD_INT 0
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 1
62133: NEG
62134: PUSH
62135: LD_INT 1
62137: NEG
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 1
62145: NEG
62146: PUSH
62147: LD_INT 2
62149: NEG
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 0
62157: PUSH
62158: LD_INT 2
62160: NEG
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: PUSH
62166: LD_INT 1
62168: PUSH
62169: LD_INT 1
62171: NEG
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 2
62179: PUSH
62180: LD_INT 1
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 2
62189: PUSH
62190: LD_INT 2
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 1
62199: PUSH
62200: LD_INT 2
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_INT 0
62209: PUSH
62210: LD_INT 2
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 1
62219: NEG
62220: PUSH
62221: LD_INT 1
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 2
62230: NEG
62231: PUSH
62232: LD_INT 1
62234: NEG
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 2
62242: NEG
62243: PUSH
62244: LD_INT 2
62246: NEG
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 2
62254: NEG
62255: PUSH
62256: LD_INT 3
62258: NEG
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 1
62266: NEG
62267: PUSH
62268: LD_INT 3
62270: NEG
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: LD_INT 0
62278: PUSH
62279: LD_INT 3
62281: NEG
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: PUSH
62287: LD_INT 1
62289: PUSH
62290: LD_INT 2
62292: NEG
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 3
62300: PUSH
62301: LD_INT 2
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: LD_INT 3
62310: PUSH
62311: LD_INT 3
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 2
62320: PUSH
62321: LD_INT 3
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: PUSH
62328: LD_INT 1
62330: PUSH
62331: LD_INT 3
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 0
62340: PUSH
62341: LD_INT 3
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 1
62350: NEG
62351: PUSH
62352: LD_INT 2
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 3
62361: NEG
62362: PUSH
62363: LD_INT 2
62365: NEG
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: PUSH
62371: LD_INT 3
62373: NEG
62374: PUSH
62375: LD_INT 3
62377: NEG
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: LIST
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: LIST
62413: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62414: LD_ADDR_VAR 0 46
62418: PUSH
62419: LD_INT 0
62421: PUSH
62422: LD_INT 0
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 0
62431: PUSH
62432: LD_INT 1
62434: NEG
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 1
62442: PUSH
62443: LD_INT 0
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PUSH
62450: LD_INT 1
62452: PUSH
62453: LD_INT 1
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PUSH
62460: LD_INT 0
62462: PUSH
62463: LD_INT 1
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 1
62472: NEG
62473: PUSH
62474: LD_INT 0
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 1
62483: NEG
62484: PUSH
62485: LD_INT 1
62487: NEG
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: LD_INT 1
62495: NEG
62496: PUSH
62497: LD_INT 2
62499: NEG
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 0
62507: PUSH
62508: LD_INT 2
62510: NEG
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 1
62518: PUSH
62519: LD_INT 1
62521: NEG
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: LD_INT 2
62529: PUSH
62530: LD_INT 0
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: LD_INT 2
62539: PUSH
62540: LD_INT 1
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 1
62549: PUSH
62550: LD_INT 2
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 0
62559: PUSH
62560: LD_INT 2
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 1
62569: NEG
62570: PUSH
62571: LD_INT 1
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: LD_INT 2
62580: NEG
62581: PUSH
62582: LD_INT 0
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: PUSH
62589: LD_INT 2
62591: NEG
62592: PUSH
62593: LD_INT 1
62595: NEG
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 1
62603: NEG
62604: PUSH
62605: LD_INT 3
62607: NEG
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 0
62615: PUSH
62616: LD_INT 3
62618: NEG
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 1
62626: PUSH
62627: LD_INT 2
62629: NEG
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 2
62637: PUSH
62638: LD_INT 1
62640: NEG
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 3
62648: PUSH
62649: LD_INT 0
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 3
62658: PUSH
62659: LD_INT 1
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 1
62668: PUSH
62669: LD_INT 3
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 0
62678: PUSH
62679: LD_INT 3
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 1
62688: NEG
62689: PUSH
62690: LD_INT 2
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: LD_INT 2
62699: NEG
62700: PUSH
62701: LD_INT 1
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 3
62710: NEG
62711: PUSH
62712: LD_INT 0
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 3
62721: NEG
62722: PUSH
62723: LD_INT 1
62725: NEG
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: LIST
62754: LIST
62755: LIST
62756: LIST
62757: LIST
62758: LIST
62759: LIST
62760: LIST
62761: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62762: LD_ADDR_VAR 0 47
62766: PUSH
62767: LD_INT 0
62769: PUSH
62770: LD_INT 0
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: LD_INT 0
62779: PUSH
62780: LD_INT 1
62782: NEG
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: LD_INT 1
62790: PUSH
62791: LD_INT 0
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 1
62800: PUSH
62801: LD_INT 1
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: LD_INT 0
62810: PUSH
62811: LD_INT 1
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: LD_INT 1
62820: NEG
62821: PUSH
62822: LD_INT 0
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: LD_INT 1
62831: NEG
62832: PUSH
62833: LD_INT 1
62835: NEG
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: LD_INT 1
62843: NEG
62844: PUSH
62845: LD_INT 2
62847: NEG
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 0
62855: PUSH
62856: LD_INT 2
62858: NEG
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 1
62866: PUSH
62867: LD_INT 1
62869: NEG
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 2
62877: NEG
62878: PUSH
62879: LD_INT 1
62881: NEG
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: LD_INT 2
62889: NEG
62890: PUSH
62891: LD_INT 2
62893: NEG
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62913: LD_ADDR_VAR 0 48
62917: PUSH
62918: LD_INT 0
62920: PUSH
62921: LD_INT 0
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: LD_INT 0
62930: PUSH
62931: LD_INT 1
62933: NEG
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: LD_INT 1
62941: PUSH
62942: LD_INT 0
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: LD_INT 1
62951: PUSH
62952: LD_INT 1
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 0
62961: PUSH
62962: LD_INT 1
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 1
62971: NEG
62972: PUSH
62973: LD_INT 0
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 1
62982: NEG
62983: PUSH
62984: LD_INT 1
62986: NEG
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: LD_INT 1
62994: NEG
62995: PUSH
62996: LD_INT 2
62998: NEG
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 0
63006: PUSH
63007: LD_INT 2
63009: NEG
63010: PUSH
63011: EMPTY
63012: LIST
63013: LIST
63014: PUSH
63015: LD_INT 1
63017: PUSH
63018: LD_INT 1
63020: NEG
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 2
63028: PUSH
63029: LD_INT 0
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 2
63038: PUSH
63039: LD_INT 1
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63060: LD_ADDR_VAR 0 49
63064: PUSH
63065: LD_INT 0
63067: PUSH
63068: LD_INT 0
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: PUSH
63075: LD_INT 0
63077: PUSH
63078: LD_INT 1
63080: NEG
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PUSH
63086: LD_INT 1
63088: PUSH
63089: LD_INT 0
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: PUSH
63096: LD_INT 1
63098: PUSH
63099: LD_INT 1
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: LD_INT 0
63108: PUSH
63109: LD_INT 1
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: LD_INT 1
63118: NEG
63119: PUSH
63120: LD_INT 0
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: PUSH
63127: LD_INT 1
63129: NEG
63130: PUSH
63131: LD_INT 1
63133: NEG
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: LD_INT 1
63141: PUSH
63142: LD_INT 1
63144: NEG
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: LD_INT 2
63152: PUSH
63153: LD_INT 0
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 2
63162: PUSH
63163: LD_INT 1
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: LD_INT 2
63172: PUSH
63173: LD_INT 2
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: LD_INT 1
63182: PUSH
63183: LD_INT 2
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63204: LD_ADDR_VAR 0 50
63208: PUSH
63209: LD_INT 0
63211: PUSH
63212: LD_INT 0
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 0
63221: PUSH
63222: LD_INT 1
63224: NEG
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PUSH
63230: LD_INT 1
63232: PUSH
63233: LD_INT 0
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 1
63242: PUSH
63243: LD_INT 1
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: PUSH
63250: LD_INT 0
63252: PUSH
63253: LD_INT 1
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: LD_INT 1
63262: NEG
63263: PUSH
63264: LD_INT 0
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: LD_INT 1
63273: NEG
63274: PUSH
63275: LD_INT 1
63277: NEG
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 2
63285: PUSH
63286: LD_INT 1
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 2
63295: PUSH
63296: LD_INT 2
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: LD_INT 1
63305: PUSH
63306: LD_INT 2
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 0
63315: PUSH
63316: LD_INT 2
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PUSH
63323: LD_INT 1
63325: NEG
63326: PUSH
63327: LD_INT 1
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: LIST
63347: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63348: LD_ADDR_VAR 0 51
63352: PUSH
63353: LD_INT 0
63355: PUSH
63356: LD_INT 0
63358: PUSH
63359: EMPTY
63360: LIST
63361: LIST
63362: PUSH
63363: LD_INT 0
63365: PUSH
63366: LD_INT 1
63368: NEG
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 1
63376: PUSH
63377: LD_INT 0
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: PUSH
63384: LD_INT 1
63386: PUSH
63387: LD_INT 1
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: PUSH
63394: LD_INT 0
63396: PUSH
63397: LD_INT 1
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: PUSH
63404: LD_INT 1
63406: NEG
63407: PUSH
63408: LD_INT 0
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 1
63417: NEG
63418: PUSH
63419: LD_INT 1
63421: NEG
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 1
63429: PUSH
63430: LD_INT 2
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 0
63439: PUSH
63440: LD_INT 2
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 1
63449: NEG
63450: PUSH
63451: LD_INT 1
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: LD_INT 2
63460: NEG
63461: PUSH
63462: LD_INT 0
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 2
63471: NEG
63472: PUSH
63473: LD_INT 1
63475: NEG
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63495: LD_ADDR_VAR 0 52
63499: PUSH
63500: LD_INT 0
63502: PUSH
63503: LD_INT 0
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: LD_INT 0
63512: PUSH
63513: LD_INT 1
63515: NEG
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: PUSH
63521: LD_INT 1
63523: PUSH
63524: LD_INT 0
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: PUSH
63531: LD_INT 1
63533: PUSH
63534: LD_INT 1
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 0
63543: PUSH
63544: LD_INT 1
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: PUSH
63551: LD_INT 1
63553: NEG
63554: PUSH
63555: LD_INT 0
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: PUSH
63562: LD_INT 1
63564: NEG
63565: PUSH
63566: LD_INT 1
63568: NEG
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: LD_INT 1
63576: NEG
63577: PUSH
63578: LD_INT 2
63580: NEG
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 1
63588: NEG
63589: PUSH
63590: LD_INT 1
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: LD_INT 2
63599: NEG
63600: PUSH
63601: LD_INT 0
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 2
63610: NEG
63611: PUSH
63612: LD_INT 1
63614: NEG
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 2
63622: NEG
63623: PUSH
63624: LD_INT 2
63626: NEG
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63646: LD_ADDR_VAR 0 53
63650: PUSH
63651: LD_INT 0
63653: PUSH
63654: LD_INT 0
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 0
63663: PUSH
63664: LD_INT 1
63666: NEG
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 1
63674: PUSH
63675: LD_INT 0
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: LD_INT 1
63684: PUSH
63685: LD_INT 1
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 0
63694: PUSH
63695: LD_INT 1
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 1
63704: NEG
63705: PUSH
63706: LD_INT 0
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 1
63715: NEG
63716: PUSH
63717: LD_INT 1
63719: NEG
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: PUSH
63725: LD_INT 1
63727: NEG
63728: PUSH
63729: LD_INT 2
63731: NEG
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 0
63739: PUSH
63740: LD_INT 2
63742: NEG
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PUSH
63748: LD_INT 1
63750: PUSH
63751: LD_INT 1
63753: NEG
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: LD_INT 2
63761: PUSH
63762: LD_INT 0
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 2
63771: PUSH
63772: LD_INT 1
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: LD_INT 2
63781: PUSH
63782: LD_INT 2
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: LD_INT 1
63791: PUSH
63792: LD_INT 2
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 0
63801: PUSH
63802: LD_INT 2
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: LD_INT 1
63811: NEG
63812: PUSH
63813: LD_INT 1
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 2
63822: NEG
63823: PUSH
63824: LD_INT 0
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 2
63833: NEG
63834: PUSH
63835: LD_INT 1
63837: NEG
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: LD_INT 2
63845: NEG
63846: PUSH
63847: LD_INT 2
63849: NEG
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: LIST
63873: LIST
63874: LIST
63875: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63876: LD_ADDR_VAR 0 54
63880: PUSH
63881: LD_INT 0
63883: PUSH
63884: LD_INT 0
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: LD_INT 0
63893: PUSH
63894: LD_INT 1
63896: NEG
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: PUSH
63902: LD_INT 1
63904: PUSH
63905: LD_INT 0
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: LD_INT 1
63914: PUSH
63915: LD_INT 1
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 0
63924: PUSH
63925: LD_INT 1
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 1
63934: NEG
63935: PUSH
63936: LD_INT 0
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: LD_INT 1
63945: NEG
63946: PUSH
63947: LD_INT 1
63949: NEG
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 1
63957: NEG
63958: PUSH
63959: LD_INT 2
63961: NEG
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 0
63969: PUSH
63970: LD_INT 2
63972: NEG
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: PUSH
63978: LD_INT 1
63980: PUSH
63981: LD_INT 1
63983: NEG
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: LD_INT 2
63991: PUSH
63992: LD_INT 0
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: LD_INT 2
64001: PUSH
64002: LD_INT 1
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 2
64011: PUSH
64012: LD_INT 2
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: LD_INT 1
64021: PUSH
64022: LD_INT 2
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 0
64031: PUSH
64032: LD_INT 2
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: PUSH
64039: LD_INT 1
64041: NEG
64042: PUSH
64043: LD_INT 1
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PUSH
64050: LD_INT 2
64052: NEG
64053: PUSH
64054: LD_INT 0
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PUSH
64061: LD_INT 2
64063: NEG
64064: PUSH
64065: LD_INT 1
64067: NEG
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 2
64075: NEG
64076: PUSH
64077: LD_INT 2
64079: NEG
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64106: LD_ADDR_VAR 0 55
64110: PUSH
64111: LD_INT 0
64113: PUSH
64114: LD_INT 0
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_INT 0
64123: PUSH
64124: LD_INT 1
64126: NEG
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PUSH
64132: LD_INT 1
64134: PUSH
64135: LD_INT 0
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PUSH
64142: LD_INT 1
64144: PUSH
64145: LD_INT 1
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: LD_INT 0
64154: PUSH
64155: LD_INT 1
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: PUSH
64162: LD_INT 1
64164: NEG
64165: PUSH
64166: LD_INT 0
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: PUSH
64173: LD_INT 1
64175: NEG
64176: PUSH
64177: LD_INT 1
64179: NEG
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: LD_INT 1
64187: NEG
64188: PUSH
64189: LD_INT 2
64191: NEG
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: PUSH
64197: LD_INT 0
64199: PUSH
64200: LD_INT 2
64202: NEG
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: LD_INT 1
64210: PUSH
64211: LD_INT 1
64213: NEG
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: LD_INT 2
64221: PUSH
64222: LD_INT 0
64224: PUSH
64225: EMPTY
64226: LIST
64227: LIST
64228: PUSH
64229: LD_INT 2
64231: PUSH
64232: LD_INT 1
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: PUSH
64239: LD_INT 2
64241: PUSH
64242: LD_INT 2
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 1
64251: PUSH
64252: LD_INT 2
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: LD_INT 0
64261: PUSH
64262: LD_INT 2
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: LD_INT 1
64271: NEG
64272: PUSH
64273: LD_INT 1
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: LD_INT 2
64282: NEG
64283: PUSH
64284: LD_INT 0
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 2
64293: NEG
64294: PUSH
64295: LD_INT 1
64297: NEG
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: LD_INT 2
64305: NEG
64306: PUSH
64307: LD_INT 2
64309: NEG
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: LIST
64319: LIST
64320: LIST
64321: LIST
64322: LIST
64323: LIST
64324: LIST
64325: LIST
64326: LIST
64327: LIST
64328: LIST
64329: LIST
64330: LIST
64331: LIST
64332: LIST
64333: LIST
64334: LIST
64335: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64336: LD_ADDR_VAR 0 56
64340: PUSH
64341: LD_INT 0
64343: PUSH
64344: LD_INT 0
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: LD_INT 0
64353: PUSH
64354: LD_INT 1
64356: NEG
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: LD_INT 1
64364: PUSH
64365: LD_INT 0
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 1
64374: PUSH
64375: LD_INT 1
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: LD_INT 0
64384: PUSH
64385: LD_INT 1
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 1
64394: NEG
64395: PUSH
64396: LD_INT 0
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 1
64405: NEG
64406: PUSH
64407: LD_INT 1
64409: NEG
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 1
64417: NEG
64418: PUSH
64419: LD_INT 2
64421: NEG
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 0
64429: PUSH
64430: LD_INT 2
64432: NEG
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: PUSH
64438: LD_INT 1
64440: PUSH
64441: LD_INT 1
64443: NEG
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: PUSH
64449: LD_INT 2
64451: PUSH
64452: LD_INT 0
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: LD_INT 2
64461: PUSH
64462: LD_INT 1
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: PUSH
64469: LD_INT 2
64471: PUSH
64472: LD_INT 2
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: LD_INT 1
64481: PUSH
64482: LD_INT 2
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 0
64491: PUSH
64492: LD_INT 2
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_INT 1
64501: NEG
64502: PUSH
64503: LD_INT 1
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: LD_INT 2
64512: NEG
64513: PUSH
64514: LD_INT 0
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 2
64523: NEG
64524: PUSH
64525: LD_INT 1
64527: NEG
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 2
64535: NEG
64536: PUSH
64537: LD_INT 2
64539: NEG
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: LIST
64555: LIST
64556: LIST
64557: LIST
64558: LIST
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: LIST
64564: LIST
64565: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64566: LD_ADDR_VAR 0 57
64570: PUSH
64571: LD_INT 0
64573: PUSH
64574: LD_INT 0
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: LD_INT 0
64583: PUSH
64584: LD_INT 1
64586: NEG
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: LD_INT 1
64594: PUSH
64595: LD_INT 0
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: PUSH
64602: LD_INT 1
64604: PUSH
64605: LD_INT 1
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 0
64614: PUSH
64615: LD_INT 1
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: LD_INT 1
64624: NEG
64625: PUSH
64626: LD_INT 0
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: LD_INT 1
64635: NEG
64636: PUSH
64637: LD_INT 1
64639: NEG
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 1
64647: NEG
64648: PUSH
64649: LD_INT 2
64651: NEG
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: LD_INT 0
64659: PUSH
64660: LD_INT 2
64662: NEG
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: PUSH
64668: LD_INT 1
64670: PUSH
64671: LD_INT 1
64673: NEG
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: PUSH
64679: LD_INT 2
64681: PUSH
64682: LD_INT 0
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 2
64691: PUSH
64692: LD_INT 1
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 2
64701: PUSH
64702: LD_INT 2
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: LD_INT 1
64711: PUSH
64712: LD_INT 2
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: LD_INT 0
64721: PUSH
64722: LD_INT 2
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 1
64731: NEG
64732: PUSH
64733: LD_INT 1
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: LD_INT 2
64742: NEG
64743: PUSH
64744: LD_INT 0
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: PUSH
64751: LD_INT 2
64753: NEG
64754: PUSH
64755: LD_INT 1
64757: NEG
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: PUSH
64763: LD_INT 2
64765: NEG
64766: PUSH
64767: LD_INT 2
64769: NEG
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: LIST
64779: LIST
64780: LIST
64781: LIST
64782: LIST
64783: LIST
64784: LIST
64785: LIST
64786: LIST
64787: LIST
64788: LIST
64789: LIST
64790: LIST
64791: LIST
64792: LIST
64793: LIST
64794: LIST
64795: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64796: LD_ADDR_VAR 0 58
64800: PUSH
64801: LD_INT 0
64803: PUSH
64804: LD_INT 0
64806: PUSH
64807: EMPTY
64808: LIST
64809: LIST
64810: PUSH
64811: LD_INT 0
64813: PUSH
64814: LD_INT 1
64816: NEG
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: PUSH
64822: LD_INT 1
64824: PUSH
64825: LD_INT 0
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: PUSH
64832: LD_INT 1
64834: PUSH
64835: LD_INT 1
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: LD_INT 0
64844: PUSH
64845: LD_INT 1
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: LD_INT 1
64854: NEG
64855: PUSH
64856: LD_INT 0
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: PUSH
64863: LD_INT 1
64865: NEG
64866: PUSH
64867: LD_INT 1
64869: NEG
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: LD_INT 1
64877: NEG
64878: PUSH
64879: LD_INT 2
64881: NEG
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: LD_INT 0
64889: PUSH
64890: LD_INT 2
64892: NEG
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: PUSH
64898: LD_INT 1
64900: PUSH
64901: LD_INT 1
64903: NEG
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: PUSH
64909: LD_INT 2
64911: PUSH
64912: LD_INT 0
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: PUSH
64919: LD_INT 2
64921: PUSH
64922: LD_INT 1
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 2
64931: PUSH
64932: LD_INT 2
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 1
64941: PUSH
64942: LD_INT 2
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PUSH
64949: LD_INT 0
64951: PUSH
64952: LD_INT 2
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: PUSH
64959: LD_INT 1
64961: NEG
64962: PUSH
64963: LD_INT 1
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: PUSH
64970: LD_INT 2
64972: NEG
64973: PUSH
64974: LD_INT 0
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: PUSH
64981: LD_INT 2
64983: NEG
64984: PUSH
64985: LD_INT 1
64987: NEG
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: PUSH
64993: LD_INT 2
64995: NEG
64996: PUSH
64997: LD_INT 2
64999: NEG
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: PUSH
65005: EMPTY
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: LIST
65016: LIST
65017: LIST
65018: LIST
65019: LIST
65020: LIST
65021: LIST
65022: LIST
65023: LIST
65024: LIST
65025: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65026: LD_ADDR_VAR 0 59
65030: PUSH
65031: LD_INT 0
65033: PUSH
65034: LD_INT 0
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: LD_INT 0
65043: PUSH
65044: LD_INT 1
65046: NEG
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: LD_INT 1
65054: PUSH
65055: LD_INT 0
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PUSH
65062: LD_INT 1
65064: PUSH
65065: LD_INT 1
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: PUSH
65072: LD_INT 0
65074: PUSH
65075: LD_INT 1
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: LD_INT 1
65084: NEG
65085: PUSH
65086: LD_INT 0
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: LD_INT 1
65095: NEG
65096: PUSH
65097: LD_INT 1
65099: NEG
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: LIST
65109: LIST
65110: LIST
65111: LIST
65112: LIST
65113: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65114: LD_ADDR_VAR 0 60
65118: PUSH
65119: LD_INT 0
65121: PUSH
65122: LD_INT 0
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: PUSH
65129: LD_INT 0
65131: PUSH
65132: LD_INT 1
65134: NEG
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: PUSH
65140: LD_INT 1
65142: PUSH
65143: LD_INT 0
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PUSH
65150: LD_INT 1
65152: PUSH
65153: LD_INT 1
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: PUSH
65160: LD_INT 0
65162: PUSH
65163: LD_INT 1
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: PUSH
65170: LD_INT 1
65172: NEG
65173: PUSH
65174: LD_INT 0
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: LD_INT 1
65183: NEG
65184: PUSH
65185: LD_INT 1
65187: NEG
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: LIST
65197: LIST
65198: LIST
65199: LIST
65200: LIST
65201: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65202: LD_ADDR_VAR 0 61
65206: PUSH
65207: LD_INT 0
65209: PUSH
65210: LD_INT 0
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: PUSH
65217: LD_INT 0
65219: PUSH
65220: LD_INT 1
65222: NEG
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PUSH
65228: LD_INT 1
65230: PUSH
65231: LD_INT 0
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: LD_INT 1
65240: PUSH
65241: LD_INT 1
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: LD_INT 0
65250: PUSH
65251: LD_INT 1
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: PUSH
65258: LD_INT 1
65260: NEG
65261: PUSH
65262: LD_INT 0
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 1
65271: NEG
65272: PUSH
65273: LD_INT 1
65275: NEG
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65290: LD_ADDR_VAR 0 62
65294: PUSH
65295: LD_INT 0
65297: PUSH
65298: LD_INT 0
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: PUSH
65305: LD_INT 0
65307: PUSH
65308: LD_INT 1
65310: NEG
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: LD_INT 1
65318: PUSH
65319: LD_INT 0
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 1
65328: PUSH
65329: LD_INT 1
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PUSH
65336: LD_INT 0
65338: PUSH
65339: LD_INT 1
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: LD_INT 1
65348: NEG
65349: PUSH
65350: LD_INT 0
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 1
65359: NEG
65360: PUSH
65361: LD_INT 1
65363: NEG
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: EMPTY
65370: LIST
65371: LIST
65372: LIST
65373: LIST
65374: LIST
65375: LIST
65376: LIST
65377: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65378: LD_ADDR_VAR 0 63
65382: PUSH
65383: LD_INT 0
65385: PUSH
65386: LD_INT 0
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: PUSH
65393: LD_INT 0
65395: PUSH
65396: LD_INT 1
65398: NEG
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: PUSH
65404: LD_INT 1
65406: PUSH
65407: LD_INT 0
65409: PUSH
65410: EMPTY
65411: LIST
65412: LIST
65413: PUSH
65414: LD_INT 1
65416: PUSH
65417: LD_INT 1
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: LD_INT 0
65426: PUSH
65427: LD_INT 1
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PUSH
65434: LD_INT 1
65436: NEG
65437: PUSH
65438: LD_INT 0
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: PUSH
65445: LD_INT 1
65447: NEG
65448: PUSH
65449: LD_INT 1
65451: NEG
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: EMPTY
65458: LIST
65459: LIST
65460: LIST
65461: LIST
65462: LIST
65463: LIST
65464: LIST
65465: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65466: LD_ADDR_VAR 0 64
65470: PUSH
65471: LD_INT 0
65473: PUSH
65474: LD_INT 0
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: LD_INT 0
65483: PUSH
65484: LD_INT 1
65486: NEG
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: LD_INT 1
65494: PUSH
65495: LD_INT 0
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: LD_INT 1
65504: PUSH
65505: LD_INT 1
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: PUSH
65512: LD_INT 0
65514: PUSH
65515: LD_INT 1
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: PUSH
65522: LD_INT 1
65524: NEG
65525: PUSH
65526: LD_INT 0
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: PUSH
65533: LD_INT 1
65535: NEG
65536: PUSH
65537: LD_INT 1
65539: NEG
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: ST_TO_ADDR
// end ; 1 :
65554: GO 71451
65556: LD_INT 1
65558: DOUBLE
65559: EQUAL
65560: IFTRUE 65564
65562: GO 68187
65564: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65565: LD_ADDR_VAR 0 11
65569: PUSH
65570: LD_INT 1
65572: NEG
65573: PUSH
65574: LD_INT 3
65576: NEG
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PUSH
65582: LD_INT 0
65584: PUSH
65585: LD_INT 3
65587: NEG
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: LD_INT 1
65595: PUSH
65596: LD_INT 2
65598: NEG
65599: PUSH
65600: EMPTY
65601: LIST
65602: LIST
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: LIST
65608: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65609: LD_ADDR_VAR 0 12
65613: PUSH
65614: LD_INT 2
65616: PUSH
65617: LD_INT 1
65619: NEG
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 3
65627: PUSH
65628: LD_INT 0
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 3
65637: PUSH
65638: LD_INT 1
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: EMPTY
65646: LIST
65647: LIST
65648: LIST
65649: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65650: LD_ADDR_VAR 0 13
65654: PUSH
65655: LD_INT 3
65657: PUSH
65658: LD_INT 2
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PUSH
65665: LD_INT 3
65667: PUSH
65668: LD_INT 3
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PUSH
65675: LD_INT 2
65677: PUSH
65678: LD_INT 3
65680: PUSH
65681: EMPTY
65682: LIST
65683: LIST
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: LIST
65689: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65690: LD_ADDR_VAR 0 14
65694: PUSH
65695: LD_INT 1
65697: PUSH
65698: LD_INT 3
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: PUSH
65705: LD_INT 0
65707: PUSH
65708: LD_INT 3
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: LD_INT 1
65717: NEG
65718: PUSH
65719: LD_INT 2
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: LIST
65730: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65731: LD_ADDR_VAR 0 15
65735: PUSH
65736: LD_INT 2
65738: NEG
65739: PUSH
65740: LD_INT 1
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: PUSH
65747: LD_INT 3
65749: NEG
65750: PUSH
65751: LD_INT 0
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 3
65760: NEG
65761: PUSH
65762: LD_INT 1
65764: NEG
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: LIST
65774: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65775: LD_ADDR_VAR 0 16
65779: PUSH
65780: LD_INT 2
65782: NEG
65783: PUSH
65784: LD_INT 3
65786: NEG
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: PUSH
65792: LD_INT 3
65794: NEG
65795: PUSH
65796: LD_INT 2
65798: NEG
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: PUSH
65804: LD_INT 3
65806: NEG
65807: PUSH
65808: LD_INT 3
65810: NEG
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: LIST
65820: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65821: LD_ADDR_VAR 0 17
65825: PUSH
65826: LD_INT 1
65828: NEG
65829: PUSH
65830: LD_INT 3
65832: NEG
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 0
65840: PUSH
65841: LD_INT 3
65843: NEG
65844: PUSH
65845: EMPTY
65846: LIST
65847: LIST
65848: PUSH
65849: LD_INT 1
65851: PUSH
65852: LD_INT 2
65854: NEG
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: LIST
65864: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65865: LD_ADDR_VAR 0 18
65869: PUSH
65870: LD_INT 2
65872: PUSH
65873: LD_INT 1
65875: NEG
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: PUSH
65881: LD_INT 3
65883: PUSH
65884: LD_INT 0
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: PUSH
65891: LD_INT 3
65893: PUSH
65894: LD_INT 1
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: PUSH
65901: EMPTY
65902: LIST
65903: LIST
65904: LIST
65905: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65906: LD_ADDR_VAR 0 19
65910: PUSH
65911: LD_INT 3
65913: PUSH
65914: LD_INT 2
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: PUSH
65921: LD_INT 3
65923: PUSH
65924: LD_INT 3
65926: PUSH
65927: EMPTY
65928: LIST
65929: LIST
65930: PUSH
65931: LD_INT 2
65933: PUSH
65934: LD_INT 3
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: LIST
65945: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65946: LD_ADDR_VAR 0 20
65950: PUSH
65951: LD_INT 1
65953: PUSH
65954: LD_INT 3
65956: PUSH
65957: EMPTY
65958: LIST
65959: LIST
65960: PUSH
65961: LD_INT 0
65963: PUSH
65964: LD_INT 3
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: PUSH
65971: LD_INT 1
65973: NEG
65974: PUSH
65975: LD_INT 2
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: LIST
65986: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65987: LD_ADDR_VAR 0 21
65991: PUSH
65992: LD_INT 2
65994: NEG
65995: PUSH
65996: LD_INT 1
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: PUSH
66003: LD_INT 3
66005: NEG
66006: PUSH
66007: LD_INT 0
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PUSH
66014: LD_INT 3
66016: NEG
66017: PUSH
66018: LD_INT 1
66020: NEG
66021: PUSH
66022: EMPTY
66023: LIST
66024: LIST
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: LIST
66030: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66031: LD_ADDR_VAR 0 22
66035: PUSH
66036: LD_INT 2
66038: NEG
66039: PUSH
66040: LD_INT 3
66042: NEG
66043: PUSH
66044: EMPTY
66045: LIST
66046: LIST
66047: PUSH
66048: LD_INT 3
66050: NEG
66051: PUSH
66052: LD_INT 2
66054: NEG
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: LD_INT 3
66062: NEG
66063: PUSH
66064: LD_INT 3
66066: NEG
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: EMPTY
66073: LIST
66074: LIST
66075: LIST
66076: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66077: LD_ADDR_VAR 0 23
66081: PUSH
66082: LD_INT 0
66084: PUSH
66085: LD_INT 3
66087: NEG
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: PUSH
66093: LD_INT 1
66095: NEG
66096: PUSH
66097: LD_INT 4
66099: NEG
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: PUSH
66105: LD_INT 1
66107: PUSH
66108: LD_INT 3
66110: NEG
66111: PUSH
66112: EMPTY
66113: LIST
66114: LIST
66115: PUSH
66116: EMPTY
66117: LIST
66118: LIST
66119: LIST
66120: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66121: LD_ADDR_VAR 0 24
66125: PUSH
66126: LD_INT 3
66128: PUSH
66129: LD_INT 0
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: PUSH
66136: LD_INT 3
66138: PUSH
66139: LD_INT 1
66141: NEG
66142: PUSH
66143: EMPTY
66144: LIST
66145: LIST
66146: PUSH
66147: LD_INT 4
66149: PUSH
66150: LD_INT 1
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: PUSH
66157: EMPTY
66158: LIST
66159: LIST
66160: LIST
66161: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66162: LD_ADDR_VAR 0 25
66166: PUSH
66167: LD_INT 3
66169: PUSH
66170: LD_INT 3
66172: PUSH
66173: EMPTY
66174: LIST
66175: LIST
66176: PUSH
66177: LD_INT 4
66179: PUSH
66180: LD_INT 3
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: PUSH
66187: LD_INT 3
66189: PUSH
66190: LD_INT 4
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: LIST
66201: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66202: LD_ADDR_VAR 0 26
66206: PUSH
66207: LD_INT 0
66209: PUSH
66210: LD_INT 3
66212: PUSH
66213: EMPTY
66214: LIST
66215: LIST
66216: PUSH
66217: LD_INT 1
66219: PUSH
66220: LD_INT 4
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: PUSH
66227: LD_INT 1
66229: NEG
66230: PUSH
66231: LD_INT 3
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: LIST
66242: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66243: LD_ADDR_VAR 0 27
66247: PUSH
66248: LD_INT 3
66250: NEG
66251: PUSH
66252: LD_INT 0
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: PUSH
66259: LD_INT 3
66261: NEG
66262: PUSH
66263: LD_INT 1
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: LD_INT 4
66272: NEG
66273: PUSH
66274: LD_INT 1
66276: NEG
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: PUSH
66282: EMPTY
66283: LIST
66284: LIST
66285: LIST
66286: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66287: LD_ADDR_VAR 0 28
66291: PUSH
66292: LD_INT 3
66294: NEG
66295: PUSH
66296: LD_INT 3
66298: NEG
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: PUSH
66304: LD_INT 3
66306: NEG
66307: PUSH
66308: LD_INT 4
66310: NEG
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: PUSH
66316: LD_INT 4
66318: NEG
66319: PUSH
66320: LD_INT 3
66322: NEG
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: PUSH
66328: EMPTY
66329: LIST
66330: LIST
66331: LIST
66332: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66333: LD_ADDR_VAR 0 29
66337: PUSH
66338: LD_INT 1
66340: NEG
66341: PUSH
66342: LD_INT 3
66344: NEG
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: PUSH
66350: LD_INT 0
66352: PUSH
66353: LD_INT 3
66355: NEG
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: PUSH
66361: LD_INT 1
66363: PUSH
66364: LD_INT 2
66366: NEG
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 1
66374: NEG
66375: PUSH
66376: LD_INT 4
66378: NEG
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: LD_INT 0
66386: PUSH
66387: LD_INT 4
66389: NEG
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: PUSH
66395: LD_INT 1
66397: PUSH
66398: LD_INT 3
66400: NEG
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: PUSH
66406: LD_INT 1
66408: NEG
66409: PUSH
66410: LD_INT 5
66412: NEG
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: PUSH
66418: LD_INT 0
66420: PUSH
66421: LD_INT 5
66423: NEG
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: PUSH
66429: LD_INT 1
66431: PUSH
66432: LD_INT 4
66434: NEG
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PUSH
66440: LD_INT 1
66442: NEG
66443: PUSH
66444: LD_INT 6
66446: NEG
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: PUSH
66452: LD_INT 0
66454: PUSH
66455: LD_INT 6
66457: NEG
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: PUSH
66463: LD_INT 1
66465: PUSH
66466: LD_INT 5
66468: NEG
66469: PUSH
66470: EMPTY
66471: LIST
66472: LIST
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: LIST
66478: LIST
66479: LIST
66480: LIST
66481: LIST
66482: LIST
66483: LIST
66484: LIST
66485: LIST
66486: LIST
66487: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66488: LD_ADDR_VAR 0 30
66492: PUSH
66493: LD_INT 2
66495: PUSH
66496: LD_INT 1
66498: NEG
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: PUSH
66504: LD_INT 3
66506: PUSH
66507: LD_INT 0
66509: PUSH
66510: EMPTY
66511: LIST
66512: LIST
66513: PUSH
66514: LD_INT 3
66516: PUSH
66517: LD_INT 1
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: PUSH
66524: LD_INT 3
66526: PUSH
66527: LD_INT 1
66529: NEG
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: LD_INT 4
66537: PUSH
66538: LD_INT 0
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: PUSH
66545: LD_INT 4
66547: PUSH
66548: LD_INT 1
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: PUSH
66555: LD_INT 4
66557: PUSH
66558: LD_INT 1
66560: NEG
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: PUSH
66566: LD_INT 5
66568: PUSH
66569: LD_INT 0
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: LD_INT 5
66578: PUSH
66579: LD_INT 1
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: PUSH
66586: LD_INT 5
66588: PUSH
66589: LD_INT 1
66591: NEG
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: PUSH
66597: LD_INT 6
66599: PUSH
66600: LD_INT 0
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: PUSH
66607: LD_INT 6
66609: PUSH
66610: LD_INT 1
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: LIST
66623: LIST
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66631: LD_ADDR_VAR 0 31
66635: PUSH
66636: LD_INT 3
66638: PUSH
66639: LD_INT 2
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: PUSH
66646: LD_INT 3
66648: PUSH
66649: LD_INT 3
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PUSH
66656: LD_INT 2
66658: PUSH
66659: LD_INT 3
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: PUSH
66666: LD_INT 4
66668: PUSH
66669: LD_INT 3
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: PUSH
66676: LD_INT 4
66678: PUSH
66679: LD_INT 4
66681: PUSH
66682: EMPTY
66683: LIST
66684: LIST
66685: PUSH
66686: LD_INT 3
66688: PUSH
66689: LD_INT 4
66691: PUSH
66692: EMPTY
66693: LIST
66694: LIST
66695: PUSH
66696: LD_INT 5
66698: PUSH
66699: LD_INT 4
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: PUSH
66706: LD_INT 5
66708: PUSH
66709: LD_INT 5
66711: PUSH
66712: EMPTY
66713: LIST
66714: LIST
66715: PUSH
66716: LD_INT 4
66718: PUSH
66719: LD_INT 5
66721: PUSH
66722: EMPTY
66723: LIST
66724: LIST
66725: PUSH
66726: LD_INT 6
66728: PUSH
66729: LD_INT 5
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: PUSH
66736: LD_INT 6
66738: PUSH
66739: LD_INT 6
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 5
66748: PUSH
66749: LD_INT 6
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: EMPTY
66757: LIST
66758: LIST
66759: LIST
66760: LIST
66761: LIST
66762: LIST
66763: LIST
66764: LIST
66765: LIST
66766: LIST
66767: LIST
66768: LIST
66769: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66770: LD_ADDR_VAR 0 32
66774: PUSH
66775: LD_INT 1
66777: PUSH
66778: LD_INT 3
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: PUSH
66785: LD_INT 0
66787: PUSH
66788: LD_INT 3
66790: PUSH
66791: EMPTY
66792: LIST
66793: LIST
66794: PUSH
66795: LD_INT 1
66797: NEG
66798: PUSH
66799: LD_INT 2
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: PUSH
66806: LD_INT 1
66808: PUSH
66809: LD_INT 4
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: PUSH
66816: LD_INT 0
66818: PUSH
66819: LD_INT 4
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: PUSH
66826: LD_INT 1
66828: NEG
66829: PUSH
66830: LD_INT 3
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 1
66839: PUSH
66840: LD_INT 5
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: PUSH
66847: LD_INT 0
66849: PUSH
66850: LD_INT 5
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: PUSH
66857: LD_INT 1
66859: NEG
66860: PUSH
66861: LD_INT 4
66863: PUSH
66864: EMPTY
66865: LIST
66866: LIST
66867: PUSH
66868: LD_INT 1
66870: PUSH
66871: LD_INT 6
66873: PUSH
66874: EMPTY
66875: LIST
66876: LIST
66877: PUSH
66878: LD_INT 0
66880: PUSH
66881: LD_INT 6
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: PUSH
66888: LD_INT 1
66890: NEG
66891: PUSH
66892: LD_INT 5
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: LIST
66903: LIST
66904: LIST
66905: LIST
66906: LIST
66907: LIST
66908: LIST
66909: LIST
66910: LIST
66911: LIST
66912: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66913: LD_ADDR_VAR 0 33
66917: PUSH
66918: LD_INT 2
66920: NEG
66921: PUSH
66922: LD_INT 1
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: PUSH
66929: LD_INT 3
66931: NEG
66932: PUSH
66933: LD_INT 0
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: PUSH
66940: LD_INT 3
66942: NEG
66943: PUSH
66944: LD_INT 1
66946: NEG
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: LD_INT 3
66954: NEG
66955: PUSH
66956: LD_INT 1
66958: PUSH
66959: EMPTY
66960: LIST
66961: LIST
66962: PUSH
66963: LD_INT 4
66965: NEG
66966: PUSH
66967: LD_INT 0
66969: PUSH
66970: EMPTY
66971: LIST
66972: LIST
66973: PUSH
66974: LD_INT 4
66976: NEG
66977: PUSH
66978: LD_INT 1
66980: NEG
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: PUSH
66986: LD_INT 4
66988: NEG
66989: PUSH
66990: LD_INT 1
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: PUSH
66997: LD_INT 5
66999: NEG
67000: PUSH
67001: LD_INT 0
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: PUSH
67008: LD_INT 5
67010: NEG
67011: PUSH
67012: LD_INT 1
67014: NEG
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: PUSH
67020: LD_INT 5
67022: NEG
67023: PUSH
67024: LD_INT 1
67026: PUSH
67027: EMPTY
67028: LIST
67029: LIST
67030: PUSH
67031: LD_INT 6
67033: NEG
67034: PUSH
67035: LD_INT 0
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: PUSH
67042: LD_INT 6
67044: NEG
67045: PUSH
67046: LD_INT 1
67048: NEG
67049: PUSH
67050: EMPTY
67051: LIST
67052: LIST
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: LIST
67058: LIST
67059: LIST
67060: LIST
67061: LIST
67062: LIST
67063: LIST
67064: LIST
67065: LIST
67066: LIST
67067: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67068: LD_ADDR_VAR 0 34
67072: PUSH
67073: LD_INT 2
67075: NEG
67076: PUSH
67077: LD_INT 3
67079: NEG
67080: PUSH
67081: EMPTY
67082: LIST
67083: LIST
67084: PUSH
67085: LD_INT 3
67087: NEG
67088: PUSH
67089: LD_INT 2
67091: NEG
67092: PUSH
67093: EMPTY
67094: LIST
67095: LIST
67096: PUSH
67097: LD_INT 3
67099: NEG
67100: PUSH
67101: LD_INT 3
67103: NEG
67104: PUSH
67105: EMPTY
67106: LIST
67107: LIST
67108: PUSH
67109: LD_INT 3
67111: NEG
67112: PUSH
67113: LD_INT 4
67115: NEG
67116: PUSH
67117: EMPTY
67118: LIST
67119: LIST
67120: PUSH
67121: LD_INT 4
67123: NEG
67124: PUSH
67125: LD_INT 3
67127: NEG
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: PUSH
67133: LD_INT 4
67135: NEG
67136: PUSH
67137: LD_INT 4
67139: NEG
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: LD_INT 4
67147: NEG
67148: PUSH
67149: LD_INT 5
67151: NEG
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: PUSH
67157: LD_INT 5
67159: NEG
67160: PUSH
67161: LD_INT 4
67163: NEG
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: PUSH
67169: LD_INT 5
67171: NEG
67172: PUSH
67173: LD_INT 5
67175: NEG
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: LD_INT 5
67183: NEG
67184: PUSH
67185: LD_INT 6
67187: NEG
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: PUSH
67193: LD_INT 6
67195: NEG
67196: PUSH
67197: LD_INT 5
67199: NEG
67200: PUSH
67201: EMPTY
67202: LIST
67203: LIST
67204: PUSH
67205: LD_INT 6
67207: NEG
67208: PUSH
67209: LD_INT 6
67211: NEG
67212: PUSH
67213: EMPTY
67214: LIST
67215: LIST
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: LIST
67221: LIST
67222: LIST
67223: LIST
67224: LIST
67225: LIST
67226: LIST
67227: LIST
67228: LIST
67229: LIST
67230: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67231: LD_ADDR_VAR 0 41
67235: PUSH
67236: LD_INT 0
67238: PUSH
67239: LD_INT 2
67241: NEG
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: PUSH
67247: LD_INT 1
67249: NEG
67250: PUSH
67251: LD_INT 3
67253: NEG
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: PUSH
67259: LD_INT 1
67261: PUSH
67262: LD_INT 2
67264: NEG
67265: PUSH
67266: EMPTY
67267: LIST
67268: LIST
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: LIST
67274: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67275: LD_ADDR_VAR 0 42
67279: PUSH
67280: LD_INT 2
67282: PUSH
67283: LD_INT 0
67285: PUSH
67286: EMPTY
67287: LIST
67288: LIST
67289: PUSH
67290: LD_INT 2
67292: PUSH
67293: LD_INT 1
67295: NEG
67296: PUSH
67297: EMPTY
67298: LIST
67299: LIST
67300: PUSH
67301: LD_INT 3
67303: PUSH
67304: LD_INT 1
67306: PUSH
67307: EMPTY
67308: LIST
67309: LIST
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: LIST
67315: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67316: LD_ADDR_VAR 0 43
67320: PUSH
67321: LD_INT 2
67323: PUSH
67324: LD_INT 2
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: PUSH
67331: LD_INT 3
67333: PUSH
67334: LD_INT 2
67336: PUSH
67337: EMPTY
67338: LIST
67339: LIST
67340: PUSH
67341: LD_INT 2
67343: PUSH
67344: LD_INT 3
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: PUSH
67351: EMPTY
67352: LIST
67353: LIST
67354: LIST
67355: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67356: LD_ADDR_VAR 0 44
67360: PUSH
67361: LD_INT 0
67363: PUSH
67364: LD_INT 2
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: PUSH
67371: LD_INT 1
67373: PUSH
67374: LD_INT 3
67376: PUSH
67377: EMPTY
67378: LIST
67379: LIST
67380: PUSH
67381: LD_INT 1
67383: NEG
67384: PUSH
67385: LD_INT 2
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: PUSH
67392: EMPTY
67393: LIST
67394: LIST
67395: LIST
67396: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67397: LD_ADDR_VAR 0 45
67401: PUSH
67402: LD_INT 2
67404: NEG
67405: PUSH
67406: LD_INT 0
67408: PUSH
67409: EMPTY
67410: LIST
67411: LIST
67412: PUSH
67413: LD_INT 2
67415: NEG
67416: PUSH
67417: LD_INT 1
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: PUSH
67424: LD_INT 3
67426: NEG
67427: PUSH
67428: LD_INT 1
67430: NEG
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: PUSH
67436: EMPTY
67437: LIST
67438: LIST
67439: LIST
67440: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67441: LD_ADDR_VAR 0 46
67445: PUSH
67446: LD_INT 2
67448: NEG
67449: PUSH
67450: LD_INT 2
67452: NEG
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: PUSH
67458: LD_INT 2
67460: NEG
67461: PUSH
67462: LD_INT 3
67464: NEG
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: PUSH
67470: LD_INT 3
67472: NEG
67473: PUSH
67474: LD_INT 2
67476: NEG
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: LIST
67486: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67487: LD_ADDR_VAR 0 47
67491: PUSH
67492: LD_INT 2
67494: NEG
67495: PUSH
67496: LD_INT 3
67498: NEG
67499: PUSH
67500: EMPTY
67501: LIST
67502: LIST
67503: PUSH
67504: LD_INT 1
67506: NEG
67507: PUSH
67508: LD_INT 3
67510: NEG
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67520: LD_ADDR_VAR 0 48
67524: PUSH
67525: LD_INT 1
67527: PUSH
67528: LD_INT 2
67530: NEG
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: PUSH
67536: LD_INT 2
67538: PUSH
67539: LD_INT 1
67541: NEG
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67551: LD_ADDR_VAR 0 49
67555: PUSH
67556: LD_INT 3
67558: PUSH
67559: LD_INT 1
67561: PUSH
67562: EMPTY
67563: LIST
67564: LIST
67565: PUSH
67566: LD_INT 3
67568: PUSH
67569: LD_INT 2
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67580: LD_ADDR_VAR 0 50
67584: PUSH
67585: LD_INT 2
67587: PUSH
67588: LD_INT 3
67590: PUSH
67591: EMPTY
67592: LIST
67593: LIST
67594: PUSH
67595: LD_INT 1
67597: PUSH
67598: LD_INT 3
67600: PUSH
67601: EMPTY
67602: LIST
67603: LIST
67604: PUSH
67605: EMPTY
67606: LIST
67607: LIST
67608: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67609: LD_ADDR_VAR 0 51
67613: PUSH
67614: LD_INT 1
67616: NEG
67617: PUSH
67618: LD_INT 2
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: PUSH
67625: LD_INT 2
67627: NEG
67628: PUSH
67629: LD_INT 1
67631: PUSH
67632: EMPTY
67633: LIST
67634: LIST
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67640: LD_ADDR_VAR 0 52
67644: PUSH
67645: LD_INT 3
67647: NEG
67648: PUSH
67649: LD_INT 1
67651: NEG
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: PUSH
67657: LD_INT 3
67659: NEG
67660: PUSH
67661: LD_INT 2
67663: NEG
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: PUSH
67669: EMPTY
67670: LIST
67671: LIST
67672: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67673: LD_ADDR_VAR 0 53
67677: PUSH
67678: LD_INT 1
67680: NEG
67681: PUSH
67682: LD_INT 3
67684: NEG
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: PUSH
67690: LD_INT 0
67692: PUSH
67693: LD_INT 3
67695: NEG
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: PUSH
67701: LD_INT 1
67703: PUSH
67704: LD_INT 2
67706: NEG
67707: PUSH
67708: EMPTY
67709: LIST
67710: LIST
67711: PUSH
67712: EMPTY
67713: LIST
67714: LIST
67715: LIST
67716: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67717: LD_ADDR_VAR 0 54
67721: PUSH
67722: LD_INT 2
67724: PUSH
67725: LD_INT 1
67727: NEG
67728: PUSH
67729: EMPTY
67730: LIST
67731: LIST
67732: PUSH
67733: LD_INT 3
67735: PUSH
67736: LD_INT 0
67738: PUSH
67739: EMPTY
67740: LIST
67741: LIST
67742: PUSH
67743: LD_INT 3
67745: PUSH
67746: LD_INT 1
67748: PUSH
67749: EMPTY
67750: LIST
67751: LIST
67752: PUSH
67753: EMPTY
67754: LIST
67755: LIST
67756: LIST
67757: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67758: LD_ADDR_VAR 0 55
67762: PUSH
67763: LD_INT 3
67765: PUSH
67766: LD_INT 2
67768: PUSH
67769: EMPTY
67770: LIST
67771: LIST
67772: PUSH
67773: LD_INT 3
67775: PUSH
67776: LD_INT 3
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: PUSH
67783: LD_INT 2
67785: PUSH
67786: LD_INT 3
67788: PUSH
67789: EMPTY
67790: LIST
67791: LIST
67792: PUSH
67793: EMPTY
67794: LIST
67795: LIST
67796: LIST
67797: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67798: LD_ADDR_VAR 0 56
67802: PUSH
67803: LD_INT 1
67805: PUSH
67806: LD_INT 3
67808: PUSH
67809: EMPTY
67810: LIST
67811: LIST
67812: PUSH
67813: LD_INT 0
67815: PUSH
67816: LD_INT 3
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: PUSH
67823: LD_INT 1
67825: NEG
67826: PUSH
67827: LD_INT 2
67829: PUSH
67830: EMPTY
67831: LIST
67832: LIST
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: LIST
67838: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67839: LD_ADDR_VAR 0 57
67843: PUSH
67844: LD_INT 2
67846: NEG
67847: PUSH
67848: LD_INT 1
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: PUSH
67855: LD_INT 3
67857: NEG
67858: PUSH
67859: LD_INT 0
67861: PUSH
67862: EMPTY
67863: LIST
67864: LIST
67865: PUSH
67866: LD_INT 3
67868: NEG
67869: PUSH
67870: LD_INT 1
67872: NEG
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: PUSH
67878: EMPTY
67879: LIST
67880: LIST
67881: LIST
67882: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67883: LD_ADDR_VAR 0 58
67887: PUSH
67888: LD_INT 2
67890: NEG
67891: PUSH
67892: LD_INT 3
67894: NEG
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: PUSH
67900: LD_INT 3
67902: NEG
67903: PUSH
67904: LD_INT 2
67906: NEG
67907: PUSH
67908: EMPTY
67909: LIST
67910: LIST
67911: PUSH
67912: LD_INT 3
67914: NEG
67915: PUSH
67916: LD_INT 3
67918: NEG
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PUSH
67924: EMPTY
67925: LIST
67926: LIST
67927: LIST
67928: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67929: LD_ADDR_VAR 0 59
67933: PUSH
67934: LD_INT 1
67936: NEG
67937: PUSH
67938: LD_INT 2
67940: NEG
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: PUSH
67946: LD_INT 0
67948: PUSH
67949: LD_INT 2
67951: NEG
67952: PUSH
67953: EMPTY
67954: LIST
67955: LIST
67956: PUSH
67957: LD_INT 1
67959: PUSH
67960: LD_INT 1
67962: NEG
67963: PUSH
67964: EMPTY
67965: LIST
67966: LIST
67967: PUSH
67968: EMPTY
67969: LIST
67970: LIST
67971: LIST
67972: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67973: LD_ADDR_VAR 0 60
67977: PUSH
67978: LD_INT 1
67980: PUSH
67981: LD_INT 1
67983: NEG
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: PUSH
67989: LD_INT 2
67991: PUSH
67992: LD_INT 0
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: PUSH
67999: LD_INT 2
68001: PUSH
68002: LD_INT 1
68004: PUSH
68005: EMPTY
68006: LIST
68007: LIST
68008: PUSH
68009: EMPTY
68010: LIST
68011: LIST
68012: LIST
68013: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68014: LD_ADDR_VAR 0 61
68018: PUSH
68019: LD_INT 2
68021: PUSH
68022: LD_INT 1
68024: PUSH
68025: EMPTY
68026: LIST
68027: LIST
68028: PUSH
68029: LD_INT 2
68031: PUSH
68032: LD_INT 2
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PUSH
68039: LD_INT 1
68041: PUSH
68042: LD_INT 2
68044: PUSH
68045: EMPTY
68046: LIST
68047: LIST
68048: PUSH
68049: EMPTY
68050: LIST
68051: LIST
68052: LIST
68053: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68054: LD_ADDR_VAR 0 62
68058: PUSH
68059: LD_INT 1
68061: PUSH
68062: LD_INT 2
68064: PUSH
68065: EMPTY
68066: LIST
68067: LIST
68068: PUSH
68069: LD_INT 0
68071: PUSH
68072: LD_INT 2
68074: PUSH
68075: EMPTY
68076: LIST
68077: LIST
68078: PUSH
68079: LD_INT 1
68081: NEG
68082: PUSH
68083: LD_INT 1
68085: PUSH
68086: EMPTY
68087: LIST
68088: LIST
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: LIST
68094: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68095: LD_ADDR_VAR 0 63
68099: PUSH
68100: LD_INT 1
68102: NEG
68103: PUSH
68104: LD_INT 1
68106: PUSH
68107: EMPTY
68108: LIST
68109: LIST
68110: PUSH
68111: LD_INT 2
68113: NEG
68114: PUSH
68115: LD_INT 0
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: PUSH
68122: LD_INT 2
68124: NEG
68125: PUSH
68126: LD_INT 1
68128: NEG
68129: PUSH
68130: EMPTY
68131: LIST
68132: LIST
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: LIST
68138: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68139: LD_ADDR_VAR 0 64
68143: PUSH
68144: LD_INT 1
68146: NEG
68147: PUSH
68148: LD_INT 2
68150: NEG
68151: PUSH
68152: EMPTY
68153: LIST
68154: LIST
68155: PUSH
68156: LD_INT 2
68158: NEG
68159: PUSH
68160: LD_INT 1
68162: NEG
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: PUSH
68168: LD_INT 2
68170: NEG
68171: PUSH
68172: LD_INT 2
68174: NEG
68175: PUSH
68176: EMPTY
68177: LIST
68178: LIST
68179: PUSH
68180: EMPTY
68181: LIST
68182: LIST
68183: LIST
68184: ST_TO_ADDR
// end ; 2 :
68185: GO 71451
68187: LD_INT 2
68189: DOUBLE
68190: EQUAL
68191: IFTRUE 68195
68193: GO 71450
68195: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68196: LD_ADDR_VAR 0 29
68200: PUSH
68201: LD_INT 4
68203: PUSH
68204: LD_INT 0
68206: PUSH
68207: EMPTY
68208: LIST
68209: LIST
68210: PUSH
68211: LD_INT 4
68213: PUSH
68214: LD_INT 1
68216: NEG
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: PUSH
68222: LD_INT 5
68224: PUSH
68225: LD_INT 0
68227: PUSH
68228: EMPTY
68229: LIST
68230: LIST
68231: PUSH
68232: LD_INT 5
68234: PUSH
68235: LD_INT 1
68237: PUSH
68238: EMPTY
68239: LIST
68240: LIST
68241: PUSH
68242: LD_INT 4
68244: PUSH
68245: LD_INT 1
68247: PUSH
68248: EMPTY
68249: LIST
68250: LIST
68251: PUSH
68252: LD_INT 3
68254: PUSH
68255: LD_INT 0
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: PUSH
68262: LD_INT 3
68264: PUSH
68265: LD_INT 1
68267: NEG
68268: PUSH
68269: EMPTY
68270: LIST
68271: LIST
68272: PUSH
68273: LD_INT 3
68275: PUSH
68276: LD_INT 2
68278: NEG
68279: PUSH
68280: EMPTY
68281: LIST
68282: LIST
68283: PUSH
68284: LD_INT 5
68286: PUSH
68287: LD_INT 2
68289: PUSH
68290: EMPTY
68291: LIST
68292: LIST
68293: PUSH
68294: LD_INT 3
68296: PUSH
68297: LD_INT 3
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: PUSH
68304: LD_INT 3
68306: PUSH
68307: LD_INT 2
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: PUSH
68314: LD_INT 4
68316: PUSH
68317: LD_INT 3
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: PUSH
68324: LD_INT 4
68326: PUSH
68327: LD_INT 4
68329: PUSH
68330: EMPTY
68331: LIST
68332: LIST
68333: PUSH
68334: LD_INT 3
68336: PUSH
68337: LD_INT 4
68339: PUSH
68340: EMPTY
68341: LIST
68342: LIST
68343: PUSH
68344: LD_INT 2
68346: PUSH
68347: LD_INT 3
68349: PUSH
68350: EMPTY
68351: LIST
68352: LIST
68353: PUSH
68354: LD_INT 2
68356: PUSH
68357: LD_INT 2
68359: PUSH
68360: EMPTY
68361: LIST
68362: LIST
68363: PUSH
68364: LD_INT 4
68366: PUSH
68367: LD_INT 2
68369: PUSH
68370: EMPTY
68371: LIST
68372: LIST
68373: PUSH
68374: LD_INT 2
68376: PUSH
68377: LD_INT 4
68379: PUSH
68380: EMPTY
68381: LIST
68382: LIST
68383: PUSH
68384: LD_INT 0
68386: PUSH
68387: LD_INT 4
68389: PUSH
68390: EMPTY
68391: LIST
68392: LIST
68393: PUSH
68394: LD_INT 0
68396: PUSH
68397: LD_INT 3
68399: PUSH
68400: EMPTY
68401: LIST
68402: LIST
68403: PUSH
68404: LD_INT 1
68406: PUSH
68407: LD_INT 4
68409: PUSH
68410: EMPTY
68411: LIST
68412: LIST
68413: PUSH
68414: LD_INT 1
68416: PUSH
68417: LD_INT 5
68419: PUSH
68420: EMPTY
68421: LIST
68422: LIST
68423: PUSH
68424: LD_INT 0
68426: PUSH
68427: LD_INT 5
68429: PUSH
68430: EMPTY
68431: LIST
68432: LIST
68433: PUSH
68434: LD_INT 1
68436: NEG
68437: PUSH
68438: LD_INT 4
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: PUSH
68445: LD_INT 1
68447: NEG
68448: PUSH
68449: LD_INT 3
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: PUSH
68456: LD_INT 2
68458: PUSH
68459: LD_INT 5
68461: PUSH
68462: EMPTY
68463: LIST
68464: LIST
68465: PUSH
68466: LD_INT 2
68468: NEG
68469: PUSH
68470: LD_INT 3
68472: PUSH
68473: EMPTY
68474: LIST
68475: LIST
68476: PUSH
68477: LD_INT 3
68479: NEG
68480: PUSH
68481: LD_INT 0
68483: PUSH
68484: EMPTY
68485: LIST
68486: LIST
68487: PUSH
68488: LD_INT 3
68490: NEG
68491: PUSH
68492: LD_INT 1
68494: NEG
68495: PUSH
68496: EMPTY
68497: LIST
68498: LIST
68499: PUSH
68500: LD_INT 2
68502: NEG
68503: PUSH
68504: LD_INT 0
68506: PUSH
68507: EMPTY
68508: LIST
68509: LIST
68510: PUSH
68511: LD_INT 2
68513: NEG
68514: PUSH
68515: LD_INT 1
68517: PUSH
68518: EMPTY
68519: LIST
68520: LIST
68521: PUSH
68522: LD_INT 3
68524: NEG
68525: PUSH
68526: LD_INT 1
68528: PUSH
68529: EMPTY
68530: LIST
68531: LIST
68532: PUSH
68533: LD_INT 4
68535: NEG
68536: PUSH
68537: LD_INT 0
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: PUSH
68544: LD_INT 4
68546: NEG
68547: PUSH
68548: LD_INT 1
68550: NEG
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: PUSH
68556: LD_INT 4
68558: NEG
68559: PUSH
68560: LD_INT 2
68562: NEG
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: PUSH
68568: LD_INT 2
68570: NEG
68571: PUSH
68572: LD_INT 2
68574: PUSH
68575: EMPTY
68576: LIST
68577: LIST
68578: PUSH
68579: LD_INT 4
68581: NEG
68582: PUSH
68583: LD_INT 4
68585: NEG
68586: PUSH
68587: EMPTY
68588: LIST
68589: LIST
68590: PUSH
68591: LD_INT 4
68593: NEG
68594: PUSH
68595: LD_INT 5
68597: NEG
68598: PUSH
68599: EMPTY
68600: LIST
68601: LIST
68602: PUSH
68603: LD_INT 3
68605: NEG
68606: PUSH
68607: LD_INT 4
68609: NEG
68610: PUSH
68611: EMPTY
68612: LIST
68613: LIST
68614: PUSH
68615: LD_INT 3
68617: NEG
68618: PUSH
68619: LD_INT 3
68621: NEG
68622: PUSH
68623: EMPTY
68624: LIST
68625: LIST
68626: PUSH
68627: LD_INT 4
68629: NEG
68630: PUSH
68631: LD_INT 3
68633: NEG
68634: PUSH
68635: EMPTY
68636: LIST
68637: LIST
68638: PUSH
68639: LD_INT 5
68641: NEG
68642: PUSH
68643: LD_INT 4
68645: NEG
68646: PUSH
68647: EMPTY
68648: LIST
68649: LIST
68650: PUSH
68651: LD_INT 5
68653: NEG
68654: PUSH
68655: LD_INT 5
68657: NEG
68658: PUSH
68659: EMPTY
68660: LIST
68661: LIST
68662: PUSH
68663: LD_INT 3
68665: NEG
68666: PUSH
68667: LD_INT 5
68669: NEG
68670: PUSH
68671: EMPTY
68672: LIST
68673: LIST
68674: PUSH
68675: LD_INT 5
68677: NEG
68678: PUSH
68679: LD_INT 3
68681: NEG
68682: PUSH
68683: EMPTY
68684: LIST
68685: LIST
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: LIST
68691: LIST
68692: LIST
68693: LIST
68694: LIST
68695: LIST
68696: LIST
68697: LIST
68698: LIST
68699: LIST
68700: LIST
68701: LIST
68702: LIST
68703: LIST
68704: LIST
68705: LIST
68706: LIST
68707: LIST
68708: LIST
68709: LIST
68710: LIST
68711: LIST
68712: LIST
68713: LIST
68714: LIST
68715: LIST
68716: LIST
68717: LIST
68718: LIST
68719: LIST
68720: LIST
68721: LIST
68722: LIST
68723: LIST
68724: LIST
68725: LIST
68726: LIST
68727: LIST
68728: LIST
68729: LIST
68730: LIST
68731: LIST
68732: LIST
68733: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68734: LD_ADDR_VAR 0 30
68738: PUSH
68739: LD_INT 4
68741: PUSH
68742: LD_INT 4
68744: PUSH
68745: EMPTY
68746: LIST
68747: LIST
68748: PUSH
68749: LD_INT 4
68751: PUSH
68752: LD_INT 3
68754: PUSH
68755: EMPTY
68756: LIST
68757: LIST
68758: PUSH
68759: LD_INT 5
68761: PUSH
68762: LD_INT 4
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: PUSH
68769: LD_INT 5
68771: PUSH
68772: LD_INT 5
68774: PUSH
68775: EMPTY
68776: LIST
68777: LIST
68778: PUSH
68779: LD_INT 4
68781: PUSH
68782: LD_INT 5
68784: PUSH
68785: EMPTY
68786: LIST
68787: LIST
68788: PUSH
68789: LD_INT 3
68791: PUSH
68792: LD_INT 4
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: PUSH
68799: LD_INT 3
68801: PUSH
68802: LD_INT 3
68804: PUSH
68805: EMPTY
68806: LIST
68807: LIST
68808: PUSH
68809: LD_INT 5
68811: PUSH
68812: LD_INT 3
68814: PUSH
68815: EMPTY
68816: LIST
68817: LIST
68818: PUSH
68819: LD_INT 3
68821: PUSH
68822: LD_INT 5
68824: PUSH
68825: EMPTY
68826: LIST
68827: LIST
68828: PUSH
68829: LD_INT 0
68831: PUSH
68832: LD_INT 3
68834: PUSH
68835: EMPTY
68836: LIST
68837: LIST
68838: PUSH
68839: LD_INT 0
68841: PUSH
68842: LD_INT 2
68844: PUSH
68845: EMPTY
68846: LIST
68847: LIST
68848: PUSH
68849: LD_INT 1
68851: PUSH
68852: LD_INT 3
68854: PUSH
68855: EMPTY
68856: LIST
68857: LIST
68858: PUSH
68859: LD_INT 1
68861: PUSH
68862: LD_INT 4
68864: PUSH
68865: EMPTY
68866: LIST
68867: LIST
68868: PUSH
68869: LD_INT 0
68871: PUSH
68872: LD_INT 4
68874: PUSH
68875: EMPTY
68876: LIST
68877: LIST
68878: PUSH
68879: LD_INT 1
68881: NEG
68882: PUSH
68883: LD_INT 3
68885: PUSH
68886: EMPTY
68887: LIST
68888: LIST
68889: PUSH
68890: LD_INT 1
68892: NEG
68893: PUSH
68894: LD_INT 2
68896: PUSH
68897: EMPTY
68898: LIST
68899: LIST
68900: PUSH
68901: LD_INT 2
68903: PUSH
68904: LD_INT 4
68906: PUSH
68907: EMPTY
68908: LIST
68909: LIST
68910: PUSH
68911: LD_INT 2
68913: NEG
68914: PUSH
68915: LD_INT 2
68917: PUSH
68918: EMPTY
68919: LIST
68920: LIST
68921: PUSH
68922: LD_INT 4
68924: NEG
68925: PUSH
68926: LD_INT 0
68928: PUSH
68929: EMPTY
68930: LIST
68931: LIST
68932: PUSH
68933: LD_INT 4
68935: NEG
68936: PUSH
68937: LD_INT 1
68939: NEG
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: PUSH
68945: LD_INT 3
68947: NEG
68948: PUSH
68949: LD_INT 0
68951: PUSH
68952: EMPTY
68953: LIST
68954: LIST
68955: PUSH
68956: LD_INT 3
68958: NEG
68959: PUSH
68960: LD_INT 1
68962: PUSH
68963: EMPTY
68964: LIST
68965: LIST
68966: PUSH
68967: LD_INT 4
68969: NEG
68970: PUSH
68971: LD_INT 1
68973: PUSH
68974: EMPTY
68975: LIST
68976: LIST
68977: PUSH
68978: LD_INT 5
68980: NEG
68981: PUSH
68982: LD_INT 0
68984: PUSH
68985: EMPTY
68986: LIST
68987: LIST
68988: PUSH
68989: LD_INT 5
68991: NEG
68992: PUSH
68993: LD_INT 1
68995: NEG
68996: PUSH
68997: EMPTY
68998: LIST
68999: LIST
69000: PUSH
69001: LD_INT 5
69003: NEG
69004: PUSH
69005: LD_INT 2
69007: NEG
69008: PUSH
69009: EMPTY
69010: LIST
69011: LIST
69012: PUSH
69013: LD_INT 3
69015: NEG
69016: PUSH
69017: LD_INT 2
69019: PUSH
69020: EMPTY
69021: LIST
69022: LIST
69023: PUSH
69024: LD_INT 3
69026: NEG
69027: PUSH
69028: LD_INT 3
69030: NEG
69031: PUSH
69032: EMPTY
69033: LIST
69034: LIST
69035: PUSH
69036: LD_INT 3
69038: NEG
69039: PUSH
69040: LD_INT 4
69042: NEG
69043: PUSH
69044: EMPTY
69045: LIST
69046: LIST
69047: PUSH
69048: LD_INT 2
69050: NEG
69051: PUSH
69052: LD_INT 3
69054: NEG
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: PUSH
69060: LD_INT 2
69062: NEG
69063: PUSH
69064: LD_INT 2
69066: NEG
69067: PUSH
69068: EMPTY
69069: LIST
69070: LIST
69071: PUSH
69072: LD_INT 3
69074: NEG
69075: PUSH
69076: LD_INT 2
69078: NEG
69079: PUSH
69080: EMPTY
69081: LIST
69082: LIST
69083: PUSH
69084: LD_INT 4
69086: NEG
69087: PUSH
69088: LD_INT 3
69090: NEG
69091: PUSH
69092: EMPTY
69093: LIST
69094: LIST
69095: PUSH
69096: LD_INT 4
69098: NEG
69099: PUSH
69100: LD_INT 4
69102: NEG
69103: PUSH
69104: EMPTY
69105: LIST
69106: LIST
69107: PUSH
69108: LD_INT 2
69110: NEG
69111: PUSH
69112: LD_INT 4
69114: NEG
69115: PUSH
69116: EMPTY
69117: LIST
69118: LIST
69119: PUSH
69120: LD_INT 4
69122: NEG
69123: PUSH
69124: LD_INT 2
69126: NEG
69127: PUSH
69128: EMPTY
69129: LIST
69130: LIST
69131: PUSH
69132: LD_INT 0
69134: PUSH
69135: LD_INT 4
69137: NEG
69138: PUSH
69139: EMPTY
69140: LIST
69141: LIST
69142: PUSH
69143: LD_INT 0
69145: PUSH
69146: LD_INT 5
69148: NEG
69149: PUSH
69150: EMPTY
69151: LIST
69152: LIST
69153: PUSH
69154: LD_INT 1
69156: PUSH
69157: LD_INT 4
69159: NEG
69160: PUSH
69161: EMPTY
69162: LIST
69163: LIST
69164: PUSH
69165: LD_INT 1
69167: PUSH
69168: LD_INT 3
69170: NEG
69171: PUSH
69172: EMPTY
69173: LIST
69174: LIST
69175: PUSH
69176: LD_INT 0
69178: PUSH
69179: LD_INT 3
69181: NEG
69182: PUSH
69183: EMPTY
69184: LIST
69185: LIST
69186: PUSH
69187: LD_INT 1
69189: NEG
69190: PUSH
69191: LD_INT 4
69193: NEG
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: PUSH
69199: LD_INT 1
69201: NEG
69202: PUSH
69203: LD_INT 5
69205: NEG
69206: PUSH
69207: EMPTY
69208: LIST
69209: LIST
69210: PUSH
69211: LD_INT 2
69213: PUSH
69214: LD_INT 3
69216: NEG
69217: PUSH
69218: EMPTY
69219: LIST
69220: LIST
69221: PUSH
69222: LD_INT 2
69224: NEG
69225: PUSH
69226: LD_INT 5
69228: NEG
69229: PUSH
69230: EMPTY
69231: LIST
69232: LIST
69233: PUSH
69234: EMPTY
69235: LIST
69236: LIST
69237: LIST
69238: LIST
69239: LIST
69240: LIST
69241: LIST
69242: LIST
69243: LIST
69244: LIST
69245: LIST
69246: LIST
69247: LIST
69248: LIST
69249: LIST
69250: LIST
69251: LIST
69252: LIST
69253: LIST
69254: LIST
69255: LIST
69256: LIST
69257: LIST
69258: LIST
69259: LIST
69260: LIST
69261: LIST
69262: LIST
69263: LIST
69264: LIST
69265: LIST
69266: LIST
69267: LIST
69268: LIST
69269: LIST
69270: LIST
69271: LIST
69272: LIST
69273: LIST
69274: LIST
69275: LIST
69276: LIST
69277: LIST
69278: LIST
69279: LIST
69280: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69281: LD_ADDR_VAR 0 31
69285: PUSH
69286: LD_INT 0
69288: PUSH
69289: LD_INT 4
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: PUSH
69296: LD_INT 0
69298: PUSH
69299: LD_INT 3
69301: PUSH
69302: EMPTY
69303: LIST
69304: LIST
69305: PUSH
69306: LD_INT 1
69308: PUSH
69309: LD_INT 4
69311: PUSH
69312: EMPTY
69313: LIST
69314: LIST
69315: PUSH
69316: LD_INT 1
69318: PUSH
69319: LD_INT 5
69321: PUSH
69322: EMPTY
69323: LIST
69324: LIST
69325: PUSH
69326: LD_INT 0
69328: PUSH
69329: LD_INT 5
69331: PUSH
69332: EMPTY
69333: LIST
69334: LIST
69335: PUSH
69336: LD_INT 1
69338: NEG
69339: PUSH
69340: LD_INT 4
69342: PUSH
69343: EMPTY
69344: LIST
69345: LIST
69346: PUSH
69347: LD_INT 1
69349: NEG
69350: PUSH
69351: LD_INT 3
69353: PUSH
69354: EMPTY
69355: LIST
69356: LIST
69357: PUSH
69358: LD_INT 2
69360: PUSH
69361: LD_INT 5
69363: PUSH
69364: EMPTY
69365: LIST
69366: LIST
69367: PUSH
69368: LD_INT 2
69370: NEG
69371: PUSH
69372: LD_INT 3
69374: PUSH
69375: EMPTY
69376: LIST
69377: LIST
69378: PUSH
69379: LD_INT 3
69381: NEG
69382: PUSH
69383: LD_INT 0
69385: PUSH
69386: EMPTY
69387: LIST
69388: LIST
69389: PUSH
69390: LD_INT 3
69392: NEG
69393: PUSH
69394: LD_INT 1
69396: NEG
69397: PUSH
69398: EMPTY
69399: LIST
69400: LIST
69401: PUSH
69402: LD_INT 2
69404: NEG
69405: PUSH
69406: LD_INT 0
69408: PUSH
69409: EMPTY
69410: LIST
69411: LIST
69412: PUSH
69413: LD_INT 2
69415: NEG
69416: PUSH
69417: LD_INT 1
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: PUSH
69424: LD_INT 3
69426: NEG
69427: PUSH
69428: LD_INT 1
69430: PUSH
69431: EMPTY
69432: LIST
69433: LIST
69434: PUSH
69435: LD_INT 4
69437: NEG
69438: PUSH
69439: LD_INT 0
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PUSH
69446: LD_INT 4
69448: NEG
69449: PUSH
69450: LD_INT 1
69452: NEG
69453: PUSH
69454: EMPTY
69455: LIST
69456: LIST
69457: PUSH
69458: LD_INT 4
69460: NEG
69461: PUSH
69462: LD_INT 2
69464: NEG
69465: PUSH
69466: EMPTY
69467: LIST
69468: LIST
69469: PUSH
69470: LD_INT 2
69472: NEG
69473: PUSH
69474: LD_INT 2
69476: PUSH
69477: EMPTY
69478: LIST
69479: LIST
69480: PUSH
69481: LD_INT 4
69483: NEG
69484: PUSH
69485: LD_INT 4
69487: NEG
69488: PUSH
69489: EMPTY
69490: LIST
69491: LIST
69492: PUSH
69493: LD_INT 4
69495: NEG
69496: PUSH
69497: LD_INT 5
69499: NEG
69500: PUSH
69501: EMPTY
69502: LIST
69503: LIST
69504: PUSH
69505: LD_INT 3
69507: NEG
69508: PUSH
69509: LD_INT 4
69511: NEG
69512: PUSH
69513: EMPTY
69514: LIST
69515: LIST
69516: PUSH
69517: LD_INT 3
69519: NEG
69520: PUSH
69521: LD_INT 3
69523: NEG
69524: PUSH
69525: EMPTY
69526: LIST
69527: LIST
69528: PUSH
69529: LD_INT 4
69531: NEG
69532: PUSH
69533: LD_INT 3
69535: NEG
69536: PUSH
69537: EMPTY
69538: LIST
69539: LIST
69540: PUSH
69541: LD_INT 5
69543: NEG
69544: PUSH
69545: LD_INT 4
69547: NEG
69548: PUSH
69549: EMPTY
69550: LIST
69551: LIST
69552: PUSH
69553: LD_INT 5
69555: NEG
69556: PUSH
69557: LD_INT 5
69559: NEG
69560: PUSH
69561: EMPTY
69562: LIST
69563: LIST
69564: PUSH
69565: LD_INT 3
69567: NEG
69568: PUSH
69569: LD_INT 5
69571: NEG
69572: PUSH
69573: EMPTY
69574: LIST
69575: LIST
69576: PUSH
69577: LD_INT 5
69579: NEG
69580: PUSH
69581: LD_INT 3
69583: NEG
69584: PUSH
69585: EMPTY
69586: LIST
69587: LIST
69588: PUSH
69589: LD_INT 0
69591: PUSH
69592: LD_INT 3
69594: NEG
69595: PUSH
69596: EMPTY
69597: LIST
69598: LIST
69599: PUSH
69600: LD_INT 0
69602: PUSH
69603: LD_INT 4
69605: NEG
69606: PUSH
69607: EMPTY
69608: LIST
69609: LIST
69610: PUSH
69611: LD_INT 1
69613: PUSH
69614: LD_INT 3
69616: NEG
69617: PUSH
69618: EMPTY
69619: LIST
69620: LIST
69621: PUSH
69622: LD_INT 1
69624: PUSH
69625: LD_INT 2
69627: NEG
69628: PUSH
69629: EMPTY
69630: LIST
69631: LIST
69632: PUSH
69633: LD_INT 0
69635: PUSH
69636: LD_INT 2
69638: NEG
69639: PUSH
69640: EMPTY
69641: LIST
69642: LIST
69643: PUSH
69644: LD_INT 1
69646: NEG
69647: PUSH
69648: LD_INT 3
69650: NEG
69651: PUSH
69652: EMPTY
69653: LIST
69654: LIST
69655: PUSH
69656: LD_INT 1
69658: NEG
69659: PUSH
69660: LD_INT 4
69662: NEG
69663: PUSH
69664: EMPTY
69665: LIST
69666: LIST
69667: PUSH
69668: LD_INT 2
69670: PUSH
69671: LD_INT 2
69673: NEG
69674: PUSH
69675: EMPTY
69676: LIST
69677: LIST
69678: PUSH
69679: LD_INT 2
69681: NEG
69682: PUSH
69683: LD_INT 4
69685: NEG
69686: PUSH
69687: EMPTY
69688: LIST
69689: LIST
69690: PUSH
69691: LD_INT 4
69693: PUSH
69694: LD_INT 0
69696: PUSH
69697: EMPTY
69698: LIST
69699: LIST
69700: PUSH
69701: LD_INT 4
69703: PUSH
69704: LD_INT 1
69706: NEG
69707: PUSH
69708: EMPTY
69709: LIST
69710: LIST
69711: PUSH
69712: LD_INT 5
69714: PUSH
69715: LD_INT 0
69717: PUSH
69718: EMPTY
69719: LIST
69720: LIST
69721: PUSH
69722: LD_INT 5
69724: PUSH
69725: LD_INT 1
69727: PUSH
69728: EMPTY
69729: LIST
69730: LIST
69731: PUSH
69732: LD_INT 4
69734: PUSH
69735: LD_INT 1
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: PUSH
69742: LD_INT 3
69744: PUSH
69745: LD_INT 0
69747: PUSH
69748: EMPTY
69749: LIST
69750: LIST
69751: PUSH
69752: LD_INT 3
69754: PUSH
69755: LD_INT 1
69757: NEG
69758: PUSH
69759: EMPTY
69760: LIST
69761: LIST
69762: PUSH
69763: LD_INT 3
69765: PUSH
69766: LD_INT 2
69768: NEG
69769: PUSH
69770: EMPTY
69771: LIST
69772: LIST
69773: PUSH
69774: LD_INT 5
69776: PUSH
69777: LD_INT 2
69779: PUSH
69780: EMPTY
69781: LIST
69782: LIST
69783: PUSH
69784: EMPTY
69785: LIST
69786: LIST
69787: LIST
69788: LIST
69789: LIST
69790: LIST
69791: LIST
69792: LIST
69793: LIST
69794: LIST
69795: LIST
69796: LIST
69797: LIST
69798: LIST
69799: LIST
69800: LIST
69801: LIST
69802: LIST
69803: LIST
69804: LIST
69805: LIST
69806: LIST
69807: LIST
69808: LIST
69809: LIST
69810: LIST
69811: LIST
69812: LIST
69813: LIST
69814: LIST
69815: LIST
69816: LIST
69817: LIST
69818: LIST
69819: LIST
69820: LIST
69821: LIST
69822: LIST
69823: LIST
69824: LIST
69825: LIST
69826: LIST
69827: LIST
69828: LIST
69829: LIST
69830: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69831: LD_ADDR_VAR 0 32
69835: PUSH
69836: LD_INT 4
69838: NEG
69839: PUSH
69840: LD_INT 0
69842: PUSH
69843: EMPTY
69844: LIST
69845: LIST
69846: PUSH
69847: LD_INT 4
69849: NEG
69850: PUSH
69851: LD_INT 1
69853: NEG
69854: PUSH
69855: EMPTY
69856: LIST
69857: LIST
69858: PUSH
69859: LD_INT 3
69861: NEG
69862: PUSH
69863: LD_INT 0
69865: PUSH
69866: EMPTY
69867: LIST
69868: LIST
69869: PUSH
69870: LD_INT 3
69872: NEG
69873: PUSH
69874: LD_INT 1
69876: PUSH
69877: EMPTY
69878: LIST
69879: LIST
69880: PUSH
69881: LD_INT 4
69883: NEG
69884: PUSH
69885: LD_INT 1
69887: PUSH
69888: EMPTY
69889: LIST
69890: LIST
69891: PUSH
69892: LD_INT 5
69894: NEG
69895: PUSH
69896: LD_INT 0
69898: PUSH
69899: EMPTY
69900: LIST
69901: LIST
69902: PUSH
69903: LD_INT 5
69905: NEG
69906: PUSH
69907: LD_INT 1
69909: NEG
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: PUSH
69915: LD_INT 5
69917: NEG
69918: PUSH
69919: LD_INT 2
69921: NEG
69922: PUSH
69923: EMPTY
69924: LIST
69925: LIST
69926: PUSH
69927: LD_INT 3
69929: NEG
69930: PUSH
69931: LD_INT 2
69933: PUSH
69934: EMPTY
69935: LIST
69936: LIST
69937: PUSH
69938: LD_INT 3
69940: NEG
69941: PUSH
69942: LD_INT 3
69944: NEG
69945: PUSH
69946: EMPTY
69947: LIST
69948: LIST
69949: PUSH
69950: LD_INT 3
69952: NEG
69953: PUSH
69954: LD_INT 4
69956: NEG
69957: PUSH
69958: EMPTY
69959: LIST
69960: LIST
69961: PUSH
69962: LD_INT 2
69964: NEG
69965: PUSH
69966: LD_INT 3
69968: NEG
69969: PUSH
69970: EMPTY
69971: LIST
69972: LIST
69973: PUSH
69974: LD_INT 2
69976: NEG
69977: PUSH
69978: LD_INT 2
69980: NEG
69981: PUSH
69982: EMPTY
69983: LIST
69984: LIST
69985: PUSH
69986: LD_INT 3
69988: NEG
69989: PUSH
69990: LD_INT 2
69992: NEG
69993: PUSH
69994: EMPTY
69995: LIST
69996: LIST
69997: PUSH
69998: LD_INT 4
70000: NEG
70001: PUSH
70002: LD_INT 3
70004: NEG
70005: PUSH
70006: EMPTY
70007: LIST
70008: LIST
70009: PUSH
70010: LD_INT 4
70012: NEG
70013: PUSH
70014: LD_INT 4
70016: NEG
70017: PUSH
70018: EMPTY
70019: LIST
70020: LIST
70021: PUSH
70022: LD_INT 2
70024: NEG
70025: PUSH
70026: LD_INT 4
70028: NEG
70029: PUSH
70030: EMPTY
70031: LIST
70032: LIST
70033: PUSH
70034: LD_INT 4
70036: NEG
70037: PUSH
70038: LD_INT 2
70040: NEG
70041: PUSH
70042: EMPTY
70043: LIST
70044: LIST
70045: PUSH
70046: LD_INT 0
70048: PUSH
70049: LD_INT 4
70051: NEG
70052: PUSH
70053: EMPTY
70054: LIST
70055: LIST
70056: PUSH
70057: LD_INT 0
70059: PUSH
70060: LD_INT 5
70062: NEG
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: PUSH
70068: LD_INT 1
70070: PUSH
70071: LD_INT 4
70073: NEG
70074: PUSH
70075: EMPTY
70076: LIST
70077: LIST
70078: PUSH
70079: LD_INT 1
70081: PUSH
70082: LD_INT 3
70084: NEG
70085: PUSH
70086: EMPTY
70087: LIST
70088: LIST
70089: PUSH
70090: LD_INT 0
70092: PUSH
70093: LD_INT 3
70095: NEG
70096: PUSH
70097: EMPTY
70098: LIST
70099: LIST
70100: PUSH
70101: LD_INT 1
70103: NEG
70104: PUSH
70105: LD_INT 4
70107: NEG
70108: PUSH
70109: EMPTY
70110: LIST
70111: LIST
70112: PUSH
70113: LD_INT 1
70115: NEG
70116: PUSH
70117: LD_INT 5
70119: NEG
70120: PUSH
70121: EMPTY
70122: LIST
70123: LIST
70124: PUSH
70125: LD_INT 2
70127: PUSH
70128: LD_INT 3
70130: NEG
70131: PUSH
70132: EMPTY
70133: LIST
70134: LIST
70135: PUSH
70136: LD_INT 2
70138: NEG
70139: PUSH
70140: LD_INT 5
70142: NEG
70143: PUSH
70144: EMPTY
70145: LIST
70146: LIST
70147: PUSH
70148: LD_INT 3
70150: PUSH
70151: LD_INT 0
70153: PUSH
70154: EMPTY
70155: LIST
70156: LIST
70157: PUSH
70158: LD_INT 3
70160: PUSH
70161: LD_INT 1
70163: NEG
70164: PUSH
70165: EMPTY
70166: LIST
70167: LIST
70168: PUSH
70169: LD_INT 4
70171: PUSH
70172: LD_INT 0
70174: PUSH
70175: EMPTY
70176: LIST
70177: LIST
70178: PUSH
70179: LD_INT 4
70181: PUSH
70182: LD_INT 1
70184: PUSH
70185: EMPTY
70186: LIST
70187: LIST
70188: PUSH
70189: LD_INT 3
70191: PUSH
70192: LD_INT 1
70194: PUSH
70195: EMPTY
70196: LIST
70197: LIST
70198: PUSH
70199: LD_INT 2
70201: PUSH
70202: LD_INT 0
70204: PUSH
70205: EMPTY
70206: LIST
70207: LIST
70208: PUSH
70209: LD_INT 2
70211: PUSH
70212: LD_INT 1
70214: NEG
70215: PUSH
70216: EMPTY
70217: LIST
70218: LIST
70219: PUSH
70220: LD_INT 2
70222: PUSH
70223: LD_INT 2
70225: NEG
70226: PUSH
70227: EMPTY
70228: LIST
70229: LIST
70230: PUSH
70231: LD_INT 4
70233: PUSH
70234: LD_INT 2
70236: PUSH
70237: EMPTY
70238: LIST
70239: LIST
70240: PUSH
70241: LD_INT 4
70243: PUSH
70244: LD_INT 4
70246: PUSH
70247: EMPTY
70248: LIST
70249: LIST
70250: PUSH
70251: LD_INT 4
70253: PUSH
70254: LD_INT 3
70256: PUSH
70257: EMPTY
70258: LIST
70259: LIST
70260: PUSH
70261: LD_INT 5
70263: PUSH
70264: LD_INT 4
70266: PUSH
70267: EMPTY
70268: LIST
70269: LIST
70270: PUSH
70271: LD_INT 5
70273: PUSH
70274: LD_INT 5
70276: PUSH
70277: EMPTY
70278: LIST
70279: LIST
70280: PUSH
70281: LD_INT 4
70283: PUSH
70284: LD_INT 5
70286: PUSH
70287: EMPTY
70288: LIST
70289: LIST
70290: PUSH
70291: LD_INT 3
70293: PUSH
70294: LD_INT 4
70296: PUSH
70297: EMPTY
70298: LIST
70299: LIST
70300: PUSH
70301: LD_INT 3
70303: PUSH
70304: LD_INT 3
70306: PUSH
70307: EMPTY
70308: LIST
70309: LIST
70310: PUSH
70311: LD_INT 5
70313: PUSH
70314: LD_INT 3
70316: PUSH
70317: EMPTY
70318: LIST
70319: LIST
70320: PUSH
70321: LD_INT 3
70323: PUSH
70324: LD_INT 5
70326: PUSH
70327: EMPTY
70328: LIST
70329: LIST
70330: PUSH
70331: EMPTY
70332: LIST
70333: LIST
70334: LIST
70335: LIST
70336: LIST
70337: LIST
70338: LIST
70339: LIST
70340: LIST
70341: LIST
70342: LIST
70343: LIST
70344: LIST
70345: LIST
70346: LIST
70347: LIST
70348: LIST
70349: LIST
70350: LIST
70351: LIST
70352: LIST
70353: LIST
70354: LIST
70355: LIST
70356: LIST
70357: LIST
70358: LIST
70359: LIST
70360: LIST
70361: LIST
70362: LIST
70363: LIST
70364: LIST
70365: LIST
70366: LIST
70367: LIST
70368: LIST
70369: LIST
70370: LIST
70371: LIST
70372: LIST
70373: LIST
70374: LIST
70375: LIST
70376: LIST
70377: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70378: LD_ADDR_VAR 0 33
70382: PUSH
70383: LD_INT 4
70385: NEG
70386: PUSH
70387: LD_INT 4
70389: NEG
70390: PUSH
70391: EMPTY
70392: LIST
70393: LIST
70394: PUSH
70395: LD_INT 4
70397: NEG
70398: PUSH
70399: LD_INT 5
70401: NEG
70402: PUSH
70403: EMPTY
70404: LIST
70405: LIST
70406: PUSH
70407: LD_INT 3
70409: NEG
70410: PUSH
70411: LD_INT 4
70413: NEG
70414: PUSH
70415: EMPTY
70416: LIST
70417: LIST
70418: PUSH
70419: LD_INT 3
70421: NEG
70422: PUSH
70423: LD_INT 3
70425: NEG
70426: PUSH
70427: EMPTY
70428: LIST
70429: LIST
70430: PUSH
70431: LD_INT 4
70433: NEG
70434: PUSH
70435: LD_INT 3
70437: NEG
70438: PUSH
70439: EMPTY
70440: LIST
70441: LIST
70442: PUSH
70443: LD_INT 5
70445: NEG
70446: PUSH
70447: LD_INT 4
70449: NEG
70450: PUSH
70451: EMPTY
70452: LIST
70453: LIST
70454: PUSH
70455: LD_INT 5
70457: NEG
70458: PUSH
70459: LD_INT 5
70461: NEG
70462: PUSH
70463: EMPTY
70464: LIST
70465: LIST
70466: PUSH
70467: LD_INT 3
70469: NEG
70470: PUSH
70471: LD_INT 5
70473: NEG
70474: PUSH
70475: EMPTY
70476: LIST
70477: LIST
70478: PUSH
70479: LD_INT 5
70481: NEG
70482: PUSH
70483: LD_INT 3
70485: NEG
70486: PUSH
70487: EMPTY
70488: LIST
70489: LIST
70490: PUSH
70491: LD_INT 0
70493: PUSH
70494: LD_INT 3
70496: NEG
70497: PUSH
70498: EMPTY
70499: LIST
70500: LIST
70501: PUSH
70502: LD_INT 0
70504: PUSH
70505: LD_INT 4
70507: NEG
70508: PUSH
70509: EMPTY
70510: LIST
70511: LIST
70512: PUSH
70513: LD_INT 1
70515: PUSH
70516: LD_INT 3
70518: NEG
70519: PUSH
70520: EMPTY
70521: LIST
70522: LIST
70523: PUSH
70524: LD_INT 1
70526: PUSH
70527: LD_INT 2
70529: NEG
70530: PUSH
70531: EMPTY
70532: LIST
70533: LIST
70534: PUSH
70535: LD_INT 0
70537: PUSH
70538: LD_INT 2
70540: NEG
70541: PUSH
70542: EMPTY
70543: LIST
70544: LIST
70545: PUSH
70546: LD_INT 1
70548: NEG
70549: PUSH
70550: LD_INT 3
70552: NEG
70553: PUSH
70554: EMPTY
70555: LIST
70556: LIST
70557: PUSH
70558: LD_INT 1
70560: NEG
70561: PUSH
70562: LD_INT 4
70564: NEG
70565: PUSH
70566: EMPTY
70567: LIST
70568: LIST
70569: PUSH
70570: LD_INT 2
70572: PUSH
70573: LD_INT 2
70575: NEG
70576: PUSH
70577: EMPTY
70578: LIST
70579: LIST
70580: PUSH
70581: LD_INT 2
70583: NEG
70584: PUSH
70585: LD_INT 4
70587: NEG
70588: PUSH
70589: EMPTY
70590: LIST
70591: LIST
70592: PUSH
70593: LD_INT 4
70595: PUSH
70596: LD_INT 0
70598: PUSH
70599: EMPTY
70600: LIST
70601: LIST
70602: PUSH
70603: LD_INT 4
70605: PUSH
70606: LD_INT 1
70608: NEG
70609: PUSH
70610: EMPTY
70611: LIST
70612: LIST
70613: PUSH
70614: LD_INT 5
70616: PUSH
70617: LD_INT 0
70619: PUSH
70620: EMPTY
70621: LIST
70622: LIST
70623: PUSH
70624: LD_INT 5
70626: PUSH
70627: LD_INT 1
70629: PUSH
70630: EMPTY
70631: LIST
70632: LIST
70633: PUSH
70634: LD_INT 4
70636: PUSH
70637: LD_INT 1
70639: PUSH
70640: EMPTY
70641: LIST
70642: LIST
70643: PUSH
70644: LD_INT 3
70646: PUSH
70647: LD_INT 0
70649: PUSH
70650: EMPTY
70651: LIST
70652: LIST
70653: PUSH
70654: LD_INT 3
70656: PUSH
70657: LD_INT 1
70659: NEG
70660: PUSH
70661: EMPTY
70662: LIST
70663: LIST
70664: PUSH
70665: LD_INT 3
70667: PUSH
70668: LD_INT 2
70670: NEG
70671: PUSH
70672: EMPTY
70673: LIST
70674: LIST
70675: PUSH
70676: LD_INT 5
70678: PUSH
70679: LD_INT 2
70681: PUSH
70682: EMPTY
70683: LIST
70684: LIST
70685: PUSH
70686: LD_INT 3
70688: PUSH
70689: LD_INT 3
70691: PUSH
70692: EMPTY
70693: LIST
70694: LIST
70695: PUSH
70696: LD_INT 3
70698: PUSH
70699: LD_INT 2
70701: PUSH
70702: EMPTY
70703: LIST
70704: LIST
70705: PUSH
70706: LD_INT 4
70708: PUSH
70709: LD_INT 3
70711: PUSH
70712: EMPTY
70713: LIST
70714: LIST
70715: PUSH
70716: LD_INT 4
70718: PUSH
70719: LD_INT 4
70721: PUSH
70722: EMPTY
70723: LIST
70724: LIST
70725: PUSH
70726: LD_INT 3
70728: PUSH
70729: LD_INT 4
70731: PUSH
70732: EMPTY
70733: LIST
70734: LIST
70735: PUSH
70736: LD_INT 2
70738: PUSH
70739: LD_INT 3
70741: PUSH
70742: EMPTY
70743: LIST
70744: LIST
70745: PUSH
70746: LD_INT 2
70748: PUSH
70749: LD_INT 2
70751: PUSH
70752: EMPTY
70753: LIST
70754: LIST
70755: PUSH
70756: LD_INT 4
70758: PUSH
70759: LD_INT 2
70761: PUSH
70762: EMPTY
70763: LIST
70764: LIST
70765: PUSH
70766: LD_INT 2
70768: PUSH
70769: LD_INT 4
70771: PUSH
70772: EMPTY
70773: LIST
70774: LIST
70775: PUSH
70776: LD_INT 0
70778: PUSH
70779: LD_INT 4
70781: PUSH
70782: EMPTY
70783: LIST
70784: LIST
70785: PUSH
70786: LD_INT 0
70788: PUSH
70789: LD_INT 3
70791: PUSH
70792: EMPTY
70793: LIST
70794: LIST
70795: PUSH
70796: LD_INT 1
70798: PUSH
70799: LD_INT 4
70801: PUSH
70802: EMPTY
70803: LIST
70804: LIST
70805: PUSH
70806: LD_INT 1
70808: PUSH
70809: LD_INT 5
70811: PUSH
70812: EMPTY
70813: LIST
70814: LIST
70815: PUSH
70816: LD_INT 0
70818: PUSH
70819: LD_INT 5
70821: PUSH
70822: EMPTY
70823: LIST
70824: LIST
70825: PUSH
70826: LD_INT 1
70828: NEG
70829: PUSH
70830: LD_INT 4
70832: PUSH
70833: EMPTY
70834: LIST
70835: LIST
70836: PUSH
70837: LD_INT 1
70839: NEG
70840: PUSH
70841: LD_INT 3
70843: PUSH
70844: EMPTY
70845: LIST
70846: LIST
70847: PUSH
70848: LD_INT 2
70850: PUSH
70851: LD_INT 5
70853: PUSH
70854: EMPTY
70855: LIST
70856: LIST
70857: PUSH
70858: LD_INT 2
70860: NEG
70861: PUSH
70862: LD_INT 3
70864: PUSH
70865: EMPTY
70866: LIST
70867: LIST
70868: PUSH
70869: EMPTY
70870: LIST
70871: LIST
70872: LIST
70873: LIST
70874: LIST
70875: LIST
70876: LIST
70877: LIST
70878: LIST
70879: LIST
70880: LIST
70881: LIST
70882: LIST
70883: LIST
70884: LIST
70885: LIST
70886: LIST
70887: LIST
70888: LIST
70889: LIST
70890: LIST
70891: LIST
70892: LIST
70893: LIST
70894: LIST
70895: LIST
70896: LIST
70897: LIST
70898: LIST
70899: LIST
70900: LIST
70901: LIST
70902: LIST
70903: LIST
70904: LIST
70905: LIST
70906: LIST
70907: LIST
70908: LIST
70909: LIST
70910: LIST
70911: LIST
70912: LIST
70913: LIST
70914: LIST
70915: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70916: LD_ADDR_VAR 0 34
70920: PUSH
70921: LD_INT 0
70923: PUSH
70924: LD_INT 4
70926: NEG
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: PUSH
70932: LD_INT 0
70934: PUSH
70935: LD_INT 5
70937: NEG
70938: PUSH
70939: EMPTY
70940: LIST
70941: LIST
70942: PUSH
70943: LD_INT 1
70945: PUSH
70946: LD_INT 4
70948: NEG
70949: PUSH
70950: EMPTY
70951: LIST
70952: LIST
70953: PUSH
70954: LD_INT 1
70956: PUSH
70957: LD_INT 3
70959: NEG
70960: PUSH
70961: EMPTY
70962: LIST
70963: LIST
70964: PUSH
70965: LD_INT 0
70967: PUSH
70968: LD_INT 3
70970: NEG
70971: PUSH
70972: EMPTY
70973: LIST
70974: LIST
70975: PUSH
70976: LD_INT 1
70978: NEG
70979: PUSH
70980: LD_INT 4
70982: NEG
70983: PUSH
70984: EMPTY
70985: LIST
70986: LIST
70987: PUSH
70988: LD_INT 1
70990: NEG
70991: PUSH
70992: LD_INT 5
70994: NEG
70995: PUSH
70996: EMPTY
70997: LIST
70998: LIST
70999: PUSH
71000: LD_INT 2
71002: PUSH
71003: LD_INT 3
71005: NEG
71006: PUSH
71007: EMPTY
71008: LIST
71009: LIST
71010: PUSH
71011: LD_INT 2
71013: NEG
71014: PUSH
71015: LD_INT 5
71017: NEG
71018: PUSH
71019: EMPTY
71020: LIST
71021: LIST
71022: PUSH
71023: LD_INT 3
71025: PUSH
71026: LD_INT 0
71028: PUSH
71029: EMPTY
71030: LIST
71031: LIST
71032: PUSH
71033: LD_INT 3
71035: PUSH
71036: LD_INT 1
71038: NEG
71039: PUSH
71040: EMPTY
71041: LIST
71042: LIST
71043: PUSH
71044: LD_INT 4
71046: PUSH
71047: LD_INT 0
71049: PUSH
71050: EMPTY
71051: LIST
71052: LIST
71053: PUSH
71054: LD_INT 4
71056: PUSH
71057: LD_INT 1
71059: PUSH
71060: EMPTY
71061: LIST
71062: LIST
71063: PUSH
71064: LD_INT 3
71066: PUSH
71067: LD_INT 1
71069: PUSH
71070: EMPTY
71071: LIST
71072: LIST
71073: PUSH
71074: LD_INT 2
71076: PUSH
71077: LD_INT 0
71079: PUSH
71080: EMPTY
71081: LIST
71082: LIST
71083: PUSH
71084: LD_INT 2
71086: PUSH
71087: LD_INT 1
71089: NEG
71090: PUSH
71091: EMPTY
71092: LIST
71093: LIST
71094: PUSH
71095: LD_INT 2
71097: PUSH
71098: LD_INT 2
71100: NEG
71101: PUSH
71102: EMPTY
71103: LIST
71104: LIST
71105: PUSH
71106: LD_INT 4
71108: PUSH
71109: LD_INT 2
71111: PUSH
71112: EMPTY
71113: LIST
71114: LIST
71115: PUSH
71116: LD_INT 4
71118: PUSH
71119: LD_INT 4
71121: PUSH
71122: EMPTY
71123: LIST
71124: LIST
71125: PUSH
71126: LD_INT 4
71128: PUSH
71129: LD_INT 3
71131: PUSH
71132: EMPTY
71133: LIST
71134: LIST
71135: PUSH
71136: LD_INT 5
71138: PUSH
71139: LD_INT 4
71141: PUSH
71142: EMPTY
71143: LIST
71144: LIST
71145: PUSH
71146: LD_INT 5
71148: PUSH
71149: LD_INT 5
71151: PUSH
71152: EMPTY
71153: LIST
71154: LIST
71155: PUSH
71156: LD_INT 4
71158: PUSH
71159: LD_INT 5
71161: PUSH
71162: EMPTY
71163: LIST
71164: LIST
71165: PUSH
71166: LD_INT 3
71168: PUSH
71169: LD_INT 4
71171: PUSH
71172: EMPTY
71173: LIST
71174: LIST
71175: PUSH
71176: LD_INT 3
71178: PUSH
71179: LD_INT 3
71181: PUSH
71182: EMPTY
71183: LIST
71184: LIST
71185: PUSH
71186: LD_INT 5
71188: PUSH
71189: LD_INT 3
71191: PUSH
71192: EMPTY
71193: LIST
71194: LIST
71195: PUSH
71196: LD_INT 3
71198: PUSH
71199: LD_INT 5
71201: PUSH
71202: EMPTY
71203: LIST
71204: LIST
71205: PUSH
71206: LD_INT 0
71208: PUSH
71209: LD_INT 3
71211: PUSH
71212: EMPTY
71213: LIST
71214: LIST
71215: PUSH
71216: LD_INT 0
71218: PUSH
71219: LD_INT 2
71221: PUSH
71222: EMPTY
71223: LIST
71224: LIST
71225: PUSH
71226: LD_INT 1
71228: PUSH
71229: LD_INT 3
71231: PUSH
71232: EMPTY
71233: LIST
71234: LIST
71235: PUSH
71236: LD_INT 1
71238: PUSH
71239: LD_INT 4
71241: PUSH
71242: EMPTY
71243: LIST
71244: LIST
71245: PUSH
71246: LD_INT 0
71248: PUSH
71249: LD_INT 4
71251: PUSH
71252: EMPTY
71253: LIST
71254: LIST
71255: PUSH
71256: LD_INT 1
71258: NEG
71259: PUSH
71260: LD_INT 3
71262: PUSH
71263: EMPTY
71264: LIST
71265: LIST
71266: PUSH
71267: LD_INT 1
71269: NEG
71270: PUSH
71271: LD_INT 2
71273: PUSH
71274: EMPTY
71275: LIST
71276: LIST
71277: PUSH
71278: LD_INT 2
71280: PUSH
71281: LD_INT 4
71283: PUSH
71284: EMPTY
71285: LIST
71286: LIST
71287: PUSH
71288: LD_INT 2
71290: NEG
71291: PUSH
71292: LD_INT 2
71294: PUSH
71295: EMPTY
71296: LIST
71297: LIST
71298: PUSH
71299: LD_INT 4
71301: NEG
71302: PUSH
71303: LD_INT 0
71305: PUSH
71306: EMPTY
71307: LIST
71308: LIST
71309: PUSH
71310: LD_INT 4
71312: NEG
71313: PUSH
71314: LD_INT 1
71316: NEG
71317: PUSH
71318: EMPTY
71319: LIST
71320: LIST
71321: PUSH
71322: LD_INT 3
71324: NEG
71325: PUSH
71326: LD_INT 0
71328: PUSH
71329: EMPTY
71330: LIST
71331: LIST
71332: PUSH
71333: LD_INT 3
71335: NEG
71336: PUSH
71337: LD_INT 1
71339: PUSH
71340: EMPTY
71341: LIST
71342: LIST
71343: PUSH
71344: LD_INT 4
71346: NEG
71347: PUSH
71348: LD_INT 1
71350: PUSH
71351: EMPTY
71352: LIST
71353: LIST
71354: PUSH
71355: LD_INT 5
71357: NEG
71358: PUSH
71359: LD_INT 0
71361: PUSH
71362: EMPTY
71363: LIST
71364: LIST
71365: PUSH
71366: LD_INT 5
71368: NEG
71369: PUSH
71370: LD_INT 1
71372: NEG
71373: PUSH
71374: EMPTY
71375: LIST
71376: LIST
71377: PUSH
71378: LD_INT 5
71380: NEG
71381: PUSH
71382: LD_INT 2
71384: NEG
71385: PUSH
71386: EMPTY
71387: LIST
71388: LIST
71389: PUSH
71390: LD_INT 3
71392: NEG
71393: PUSH
71394: LD_INT 2
71396: PUSH
71397: EMPTY
71398: LIST
71399: LIST
71400: PUSH
71401: EMPTY
71402: LIST
71403: LIST
71404: LIST
71405: LIST
71406: LIST
71407: LIST
71408: LIST
71409: LIST
71410: LIST
71411: LIST
71412: LIST
71413: LIST
71414: LIST
71415: LIST
71416: LIST
71417: LIST
71418: LIST
71419: LIST
71420: LIST
71421: LIST
71422: LIST
71423: LIST
71424: LIST
71425: LIST
71426: LIST
71427: LIST
71428: LIST
71429: LIST
71430: LIST
71431: LIST
71432: LIST
71433: LIST
71434: LIST
71435: LIST
71436: LIST
71437: LIST
71438: LIST
71439: LIST
71440: LIST
71441: LIST
71442: LIST
71443: LIST
71444: LIST
71445: LIST
71446: LIST
71447: ST_TO_ADDR
// end ; end ;
71448: GO 71451
71450: POP
// case btype of b_depot , b_warehouse :
71451: LD_VAR 0 1
71455: PUSH
71456: LD_INT 0
71458: DOUBLE
71459: EQUAL
71460: IFTRUE 71470
71462: LD_INT 1
71464: DOUBLE
71465: EQUAL
71466: IFTRUE 71470
71468: GO 71671
71470: POP
// case nation of nation_american :
71471: LD_VAR 0 5
71475: PUSH
71476: LD_INT 1
71478: DOUBLE
71479: EQUAL
71480: IFTRUE 71484
71482: GO 71540
71484: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71485: LD_ADDR_VAR 0 9
71489: PUSH
71490: LD_VAR 0 11
71494: PUSH
71495: LD_VAR 0 12
71499: PUSH
71500: LD_VAR 0 13
71504: PUSH
71505: LD_VAR 0 14
71509: PUSH
71510: LD_VAR 0 15
71514: PUSH
71515: LD_VAR 0 16
71519: PUSH
71520: EMPTY
71521: LIST
71522: LIST
71523: LIST
71524: LIST
71525: LIST
71526: LIST
71527: PUSH
71528: LD_VAR 0 4
71532: PUSH
71533: LD_INT 1
71535: PLUS
71536: ARRAY
71537: ST_TO_ADDR
71538: GO 71669
71540: LD_INT 2
71542: DOUBLE
71543: EQUAL
71544: IFTRUE 71548
71546: GO 71604
71548: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71549: LD_ADDR_VAR 0 9
71553: PUSH
71554: LD_VAR 0 17
71558: PUSH
71559: LD_VAR 0 18
71563: PUSH
71564: LD_VAR 0 19
71568: PUSH
71569: LD_VAR 0 20
71573: PUSH
71574: LD_VAR 0 21
71578: PUSH
71579: LD_VAR 0 22
71583: PUSH
71584: EMPTY
71585: LIST
71586: LIST
71587: LIST
71588: LIST
71589: LIST
71590: LIST
71591: PUSH
71592: LD_VAR 0 4
71596: PUSH
71597: LD_INT 1
71599: PLUS
71600: ARRAY
71601: ST_TO_ADDR
71602: GO 71669
71604: LD_INT 3
71606: DOUBLE
71607: EQUAL
71608: IFTRUE 71612
71610: GO 71668
71612: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71613: LD_ADDR_VAR 0 9
71617: PUSH
71618: LD_VAR 0 23
71622: PUSH
71623: LD_VAR 0 24
71627: PUSH
71628: LD_VAR 0 25
71632: PUSH
71633: LD_VAR 0 26
71637: PUSH
71638: LD_VAR 0 27
71642: PUSH
71643: LD_VAR 0 28
71647: PUSH
71648: EMPTY
71649: LIST
71650: LIST
71651: LIST
71652: LIST
71653: LIST
71654: LIST
71655: PUSH
71656: LD_VAR 0 4
71660: PUSH
71661: LD_INT 1
71663: PLUS
71664: ARRAY
71665: ST_TO_ADDR
71666: GO 71669
71668: POP
71669: GO 72224
71671: LD_INT 2
71673: DOUBLE
71674: EQUAL
71675: IFTRUE 71685
71677: LD_INT 3
71679: DOUBLE
71680: EQUAL
71681: IFTRUE 71685
71683: GO 71741
71685: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71686: LD_ADDR_VAR 0 9
71690: PUSH
71691: LD_VAR 0 29
71695: PUSH
71696: LD_VAR 0 30
71700: PUSH
71701: LD_VAR 0 31
71705: PUSH
71706: LD_VAR 0 32
71710: PUSH
71711: LD_VAR 0 33
71715: PUSH
71716: LD_VAR 0 34
71720: PUSH
71721: EMPTY
71722: LIST
71723: LIST
71724: LIST
71725: LIST
71726: LIST
71727: LIST
71728: PUSH
71729: LD_VAR 0 4
71733: PUSH
71734: LD_INT 1
71736: PLUS
71737: ARRAY
71738: ST_TO_ADDR
71739: GO 72224
71741: LD_INT 16
71743: DOUBLE
71744: EQUAL
71745: IFTRUE 71803
71747: LD_INT 17
71749: DOUBLE
71750: EQUAL
71751: IFTRUE 71803
71753: LD_INT 18
71755: DOUBLE
71756: EQUAL
71757: IFTRUE 71803
71759: LD_INT 19
71761: DOUBLE
71762: EQUAL
71763: IFTRUE 71803
71765: LD_INT 22
71767: DOUBLE
71768: EQUAL
71769: IFTRUE 71803
71771: LD_INT 20
71773: DOUBLE
71774: EQUAL
71775: IFTRUE 71803
71777: LD_INT 21
71779: DOUBLE
71780: EQUAL
71781: IFTRUE 71803
71783: LD_INT 23
71785: DOUBLE
71786: EQUAL
71787: IFTRUE 71803
71789: LD_INT 24
71791: DOUBLE
71792: EQUAL
71793: IFTRUE 71803
71795: LD_INT 25
71797: DOUBLE
71798: EQUAL
71799: IFTRUE 71803
71801: GO 71859
71803: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71804: LD_ADDR_VAR 0 9
71808: PUSH
71809: LD_VAR 0 35
71813: PUSH
71814: LD_VAR 0 36
71818: PUSH
71819: LD_VAR 0 37
71823: PUSH
71824: LD_VAR 0 38
71828: PUSH
71829: LD_VAR 0 39
71833: PUSH
71834: LD_VAR 0 40
71838: PUSH
71839: EMPTY
71840: LIST
71841: LIST
71842: LIST
71843: LIST
71844: LIST
71845: LIST
71846: PUSH
71847: LD_VAR 0 4
71851: PUSH
71852: LD_INT 1
71854: PLUS
71855: ARRAY
71856: ST_TO_ADDR
71857: GO 72224
71859: LD_INT 6
71861: DOUBLE
71862: EQUAL
71863: IFTRUE 71915
71865: LD_INT 7
71867: DOUBLE
71868: EQUAL
71869: IFTRUE 71915
71871: LD_INT 8
71873: DOUBLE
71874: EQUAL
71875: IFTRUE 71915
71877: LD_INT 13
71879: DOUBLE
71880: EQUAL
71881: IFTRUE 71915
71883: LD_INT 12
71885: DOUBLE
71886: EQUAL
71887: IFTRUE 71915
71889: LD_INT 15
71891: DOUBLE
71892: EQUAL
71893: IFTRUE 71915
71895: LD_INT 11
71897: DOUBLE
71898: EQUAL
71899: IFTRUE 71915
71901: LD_INT 14
71903: DOUBLE
71904: EQUAL
71905: IFTRUE 71915
71907: LD_INT 10
71909: DOUBLE
71910: EQUAL
71911: IFTRUE 71915
71913: GO 71971
71915: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71916: LD_ADDR_VAR 0 9
71920: PUSH
71921: LD_VAR 0 41
71925: PUSH
71926: LD_VAR 0 42
71930: PUSH
71931: LD_VAR 0 43
71935: PUSH
71936: LD_VAR 0 44
71940: PUSH
71941: LD_VAR 0 45
71945: PUSH
71946: LD_VAR 0 46
71950: PUSH
71951: EMPTY
71952: LIST
71953: LIST
71954: LIST
71955: LIST
71956: LIST
71957: LIST
71958: PUSH
71959: LD_VAR 0 4
71963: PUSH
71964: LD_INT 1
71966: PLUS
71967: ARRAY
71968: ST_TO_ADDR
71969: GO 72224
71971: LD_INT 36
71973: DOUBLE
71974: EQUAL
71975: IFTRUE 71979
71977: GO 72035
71979: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71980: LD_ADDR_VAR 0 9
71984: PUSH
71985: LD_VAR 0 47
71989: PUSH
71990: LD_VAR 0 48
71994: PUSH
71995: LD_VAR 0 49
71999: PUSH
72000: LD_VAR 0 50
72004: PUSH
72005: LD_VAR 0 51
72009: PUSH
72010: LD_VAR 0 52
72014: PUSH
72015: EMPTY
72016: LIST
72017: LIST
72018: LIST
72019: LIST
72020: LIST
72021: LIST
72022: PUSH
72023: LD_VAR 0 4
72027: PUSH
72028: LD_INT 1
72030: PLUS
72031: ARRAY
72032: ST_TO_ADDR
72033: GO 72224
72035: LD_INT 4
72037: DOUBLE
72038: EQUAL
72039: IFTRUE 72061
72041: LD_INT 5
72043: DOUBLE
72044: EQUAL
72045: IFTRUE 72061
72047: LD_INT 34
72049: DOUBLE
72050: EQUAL
72051: IFTRUE 72061
72053: LD_INT 37
72055: DOUBLE
72056: EQUAL
72057: IFTRUE 72061
72059: GO 72117
72061: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72062: LD_ADDR_VAR 0 9
72066: PUSH
72067: LD_VAR 0 53
72071: PUSH
72072: LD_VAR 0 54
72076: PUSH
72077: LD_VAR 0 55
72081: PUSH
72082: LD_VAR 0 56
72086: PUSH
72087: LD_VAR 0 57
72091: PUSH
72092: LD_VAR 0 58
72096: PUSH
72097: EMPTY
72098: LIST
72099: LIST
72100: LIST
72101: LIST
72102: LIST
72103: LIST
72104: PUSH
72105: LD_VAR 0 4
72109: PUSH
72110: LD_INT 1
72112: PLUS
72113: ARRAY
72114: ST_TO_ADDR
72115: GO 72224
72117: LD_INT 31
72119: DOUBLE
72120: EQUAL
72121: IFTRUE 72167
72123: LD_INT 32
72125: DOUBLE
72126: EQUAL
72127: IFTRUE 72167
72129: LD_INT 33
72131: DOUBLE
72132: EQUAL
72133: IFTRUE 72167
72135: LD_INT 27
72137: DOUBLE
72138: EQUAL
72139: IFTRUE 72167
72141: LD_INT 26
72143: DOUBLE
72144: EQUAL
72145: IFTRUE 72167
72147: LD_INT 28
72149: DOUBLE
72150: EQUAL
72151: IFTRUE 72167
72153: LD_INT 29
72155: DOUBLE
72156: EQUAL
72157: IFTRUE 72167
72159: LD_INT 30
72161: DOUBLE
72162: EQUAL
72163: IFTRUE 72167
72165: GO 72223
72167: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72168: LD_ADDR_VAR 0 9
72172: PUSH
72173: LD_VAR 0 59
72177: PUSH
72178: LD_VAR 0 60
72182: PUSH
72183: LD_VAR 0 61
72187: PUSH
72188: LD_VAR 0 62
72192: PUSH
72193: LD_VAR 0 63
72197: PUSH
72198: LD_VAR 0 64
72202: PUSH
72203: EMPTY
72204: LIST
72205: LIST
72206: LIST
72207: LIST
72208: LIST
72209: LIST
72210: PUSH
72211: LD_VAR 0 4
72215: PUSH
72216: LD_INT 1
72218: PLUS
72219: ARRAY
72220: ST_TO_ADDR
72221: GO 72224
72223: POP
// temp_list2 = [ ] ;
72224: LD_ADDR_VAR 0 10
72228: PUSH
72229: EMPTY
72230: ST_TO_ADDR
// for i in temp_list do
72231: LD_ADDR_VAR 0 8
72235: PUSH
72236: LD_VAR 0 9
72240: PUSH
72241: FOR_IN
72242: IFFALSE 72294
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72244: LD_ADDR_VAR 0 10
72248: PUSH
72249: LD_VAR 0 10
72253: PUSH
72254: LD_VAR 0 8
72258: PUSH
72259: LD_INT 1
72261: ARRAY
72262: PUSH
72263: LD_VAR 0 2
72267: PLUS
72268: PUSH
72269: LD_VAR 0 8
72273: PUSH
72274: LD_INT 2
72276: ARRAY
72277: PUSH
72278: LD_VAR 0 3
72282: PLUS
72283: PUSH
72284: EMPTY
72285: LIST
72286: LIST
72287: PUSH
72288: EMPTY
72289: LIST
72290: ADD
72291: ST_TO_ADDR
72292: GO 72241
72294: POP
72295: POP
// result = temp_list2 ;
72296: LD_ADDR_VAR 0 7
72300: PUSH
72301: LD_VAR 0 10
72305: ST_TO_ADDR
// end ;
72306: LD_VAR 0 7
72310: RET
// export function EnemyInRange ( unit , dist ) ; begin
72311: LD_INT 0
72313: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72314: LD_ADDR_VAR 0 3
72318: PUSH
72319: LD_VAR 0 1
72323: PPUSH
72324: CALL_OW 255
72328: PPUSH
72329: LD_VAR 0 1
72333: PPUSH
72334: CALL_OW 250
72338: PPUSH
72339: LD_VAR 0 1
72343: PPUSH
72344: CALL_OW 251
72348: PPUSH
72349: LD_VAR 0 2
72353: PPUSH
72354: CALL 45684 0 4
72358: PUSH
72359: LD_INT 4
72361: ARRAY
72362: ST_TO_ADDR
// end ;
72363: LD_VAR 0 3
72367: RET
// export function PlayerSeeMe ( unit ) ; begin
72368: LD_INT 0
72370: PPUSH
// result := See ( your_side , unit ) ;
72371: LD_ADDR_VAR 0 2
72375: PUSH
72376: LD_OWVAR 2
72380: PPUSH
72381: LD_VAR 0 1
72385: PPUSH
72386: CALL_OW 292
72390: ST_TO_ADDR
// end ;
72391: LD_VAR 0 2
72395: RET
// export function ReverseDir ( unit ) ; begin
72396: LD_INT 0
72398: PPUSH
// if not unit then
72399: LD_VAR 0 1
72403: NOT
72404: IFFALSE 72408
// exit ;
72406: GO 72431
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72408: LD_ADDR_VAR 0 2
72412: PUSH
72413: LD_VAR 0 1
72417: PPUSH
72418: CALL_OW 254
72422: PUSH
72423: LD_INT 3
72425: PLUS
72426: PUSH
72427: LD_INT 6
72429: MOD
72430: ST_TO_ADDR
// end ;
72431: LD_VAR 0 2
72435: RET
// export function ReverseArray ( array ) ; var i ; begin
72436: LD_INT 0
72438: PPUSH
72439: PPUSH
// if not array then
72440: LD_VAR 0 1
72444: NOT
72445: IFFALSE 72449
// exit ;
72447: GO 72504
// result := [ ] ;
72449: LD_ADDR_VAR 0 2
72453: PUSH
72454: EMPTY
72455: ST_TO_ADDR
// for i := array downto 1 do
72456: LD_ADDR_VAR 0 3
72460: PUSH
72461: DOUBLE
72462: LD_VAR 0 1
72466: INC
72467: ST_TO_ADDR
72468: LD_INT 1
72470: PUSH
72471: FOR_DOWNTO
72472: IFFALSE 72502
// result := Join ( result , array [ i ] ) ;
72474: LD_ADDR_VAR 0 2
72478: PUSH
72479: LD_VAR 0 2
72483: PPUSH
72484: LD_VAR 0 1
72488: PUSH
72489: LD_VAR 0 3
72493: ARRAY
72494: PPUSH
72495: CALL 77149 0 2
72499: ST_TO_ADDR
72500: GO 72471
72502: POP
72503: POP
// end ;
72504: LD_VAR 0 2
72508: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
72509: LD_INT 0
72511: PPUSH
72512: PPUSH
72513: PPUSH
72514: PPUSH
72515: PPUSH
72516: PPUSH
// if not unit or not hexes then
72517: LD_VAR 0 1
72521: NOT
72522: PUSH
72523: LD_VAR 0 2
72527: NOT
72528: OR
72529: IFFALSE 72533
// exit ;
72531: GO 72656
// dist := 9999 ;
72533: LD_ADDR_VAR 0 5
72537: PUSH
72538: LD_INT 9999
72540: ST_TO_ADDR
// for i = 1 to hexes do
72541: LD_ADDR_VAR 0 4
72545: PUSH
72546: DOUBLE
72547: LD_INT 1
72549: DEC
72550: ST_TO_ADDR
72551: LD_VAR 0 2
72555: PUSH
72556: FOR_TO
72557: IFFALSE 72644
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72559: LD_ADDR_VAR 0 6
72563: PUSH
72564: LD_VAR 0 1
72568: PPUSH
72569: LD_VAR 0 2
72573: PUSH
72574: LD_VAR 0 4
72578: ARRAY
72579: PUSH
72580: LD_INT 1
72582: ARRAY
72583: PPUSH
72584: LD_VAR 0 2
72588: PUSH
72589: LD_VAR 0 4
72593: ARRAY
72594: PUSH
72595: LD_INT 2
72597: ARRAY
72598: PPUSH
72599: CALL_OW 297
72603: ST_TO_ADDR
// if tdist < dist then
72604: LD_VAR 0 6
72608: PUSH
72609: LD_VAR 0 5
72613: LESS
72614: IFFALSE 72642
// begin hex := hexes [ i ] ;
72616: LD_ADDR_VAR 0 8
72620: PUSH
72621: LD_VAR 0 2
72625: PUSH
72626: LD_VAR 0 4
72630: ARRAY
72631: ST_TO_ADDR
// dist := tdist ;
72632: LD_ADDR_VAR 0 5
72636: PUSH
72637: LD_VAR 0 6
72641: ST_TO_ADDR
// end ; end ;
72642: GO 72556
72644: POP
72645: POP
// result := hex ;
72646: LD_ADDR_VAR 0 3
72650: PUSH
72651: LD_VAR 0 8
72655: ST_TO_ADDR
// end ;
72656: LD_VAR 0 3
72660: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72661: LD_INT 0
72663: PPUSH
72664: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72665: LD_VAR 0 1
72669: NOT
72670: PUSH
72671: LD_VAR 0 1
72675: PUSH
72676: LD_INT 21
72678: PUSH
72679: LD_INT 2
72681: PUSH
72682: EMPTY
72683: LIST
72684: LIST
72685: PUSH
72686: LD_INT 23
72688: PUSH
72689: LD_INT 2
72691: PUSH
72692: EMPTY
72693: LIST
72694: LIST
72695: PUSH
72696: EMPTY
72697: LIST
72698: LIST
72699: PPUSH
72700: CALL_OW 69
72704: IN
72705: NOT
72706: OR
72707: IFFALSE 72711
// exit ;
72709: GO 72758
// for i = 1 to 3 do
72711: LD_ADDR_VAR 0 3
72715: PUSH
72716: DOUBLE
72717: LD_INT 1
72719: DEC
72720: ST_TO_ADDR
72721: LD_INT 3
72723: PUSH
72724: FOR_TO
72725: IFFALSE 72756
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72727: LD_VAR 0 1
72731: PPUSH
72732: CALL_OW 250
72736: PPUSH
72737: LD_VAR 0 1
72741: PPUSH
72742: CALL_OW 251
72746: PPUSH
72747: LD_INT 1
72749: PPUSH
72750: CALL_OW 453
72754: GO 72724
72756: POP
72757: POP
// end ;
72758: LD_VAR 0 2
72762: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72763: LD_INT 0
72765: PPUSH
72766: PPUSH
72767: PPUSH
72768: PPUSH
72769: PPUSH
72770: PPUSH
// if not unit or not enemy_unit then
72771: LD_VAR 0 1
72775: NOT
72776: PUSH
72777: LD_VAR 0 2
72781: NOT
72782: OR
72783: IFFALSE 72787
// exit ;
72785: GO 73254
// if GetLives ( i ) < 250 then
72787: LD_VAR 0 4
72791: PPUSH
72792: CALL_OW 256
72796: PUSH
72797: LD_INT 250
72799: LESS
72800: IFFALSE 72813
// begin ComAutodestruct ( i ) ;
72802: LD_VAR 0 4
72806: PPUSH
72807: CALL 72661 0 1
// exit ;
72811: GO 73254
// end ; x := GetX ( enemy_unit ) ;
72813: LD_ADDR_VAR 0 7
72817: PUSH
72818: LD_VAR 0 2
72822: PPUSH
72823: CALL_OW 250
72827: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72828: LD_ADDR_VAR 0 8
72832: PUSH
72833: LD_VAR 0 2
72837: PPUSH
72838: CALL_OW 251
72842: ST_TO_ADDR
// if not x or not y then
72843: LD_VAR 0 7
72847: NOT
72848: PUSH
72849: LD_VAR 0 8
72853: NOT
72854: OR
72855: IFFALSE 72859
// exit ;
72857: GO 73254
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72859: LD_ADDR_VAR 0 6
72863: PUSH
72864: LD_VAR 0 7
72868: PPUSH
72869: LD_INT 0
72871: PPUSH
72872: LD_INT 4
72874: PPUSH
72875: CALL_OW 272
72879: PUSH
72880: LD_VAR 0 8
72884: PPUSH
72885: LD_INT 0
72887: PPUSH
72888: LD_INT 4
72890: PPUSH
72891: CALL_OW 273
72895: PUSH
72896: EMPTY
72897: LIST
72898: LIST
72899: PUSH
72900: LD_VAR 0 7
72904: PPUSH
72905: LD_INT 1
72907: PPUSH
72908: LD_INT 4
72910: PPUSH
72911: CALL_OW 272
72915: PUSH
72916: LD_VAR 0 8
72920: PPUSH
72921: LD_INT 1
72923: PPUSH
72924: LD_INT 4
72926: PPUSH
72927: CALL_OW 273
72931: PUSH
72932: EMPTY
72933: LIST
72934: LIST
72935: PUSH
72936: LD_VAR 0 7
72940: PPUSH
72941: LD_INT 2
72943: PPUSH
72944: LD_INT 4
72946: PPUSH
72947: CALL_OW 272
72951: PUSH
72952: LD_VAR 0 8
72956: PPUSH
72957: LD_INT 2
72959: PPUSH
72960: LD_INT 4
72962: PPUSH
72963: CALL_OW 273
72967: PUSH
72968: EMPTY
72969: LIST
72970: LIST
72971: PUSH
72972: LD_VAR 0 7
72976: PPUSH
72977: LD_INT 3
72979: PPUSH
72980: LD_INT 4
72982: PPUSH
72983: CALL_OW 272
72987: PUSH
72988: LD_VAR 0 8
72992: PPUSH
72993: LD_INT 3
72995: PPUSH
72996: LD_INT 4
72998: PPUSH
72999: CALL_OW 273
73003: PUSH
73004: EMPTY
73005: LIST
73006: LIST
73007: PUSH
73008: LD_VAR 0 7
73012: PPUSH
73013: LD_INT 4
73015: PPUSH
73016: LD_INT 4
73018: PPUSH
73019: CALL_OW 272
73023: PUSH
73024: LD_VAR 0 8
73028: PPUSH
73029: LD_INT 4
73031: PPUSH
73032: LD_INT 4
73034: PPUSH
73035: CALL_OW 273
73039: PUSH
73040: EMPTY
73041: LIST
73042: LIST
73043: PUSH
73044: LD_VAR 0 7
73048: PPUSH
73049: LD_INT 5
73051: PPUSH
73052: LD_INT 4
73054: PPUSH
73055: CALL_OW 272
73059: PUSH
73060: LD_VAR 0 8
73064: PPUSH
73065: LD_INT 5
73067: PPUSH
73068: LD_INT 4
73070: PPUSH
73071: CALL_OW 273
73075: PUSH
73076: EMPTY
73077: LIST
73078: LIST
73079: PUSH
73080: EMPTY
73081: LIST
73082: LIST
73083: LIST
73084: LIST
73085: LIST
73086: LIST
73087: ST_TO_ADDR
// for i = tmp downto 1 do
73088: LD_ADDR_VAR 0 4
73092: PUSH
73093: DOUBLE
73094: LD_VAR 0 6
73098: INC
73099: ST_TO_ADDR
73100: LD_INT 1
73102: PUSH
73103: FOR_DOWNTO
73104: IFFALSE 73205
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73106: LD_VAR 0 6
73110: PUSH
73111: LD_VAR 0 4
73115: ARRAY
73116: PUSH
73117: LD_INT 1
73119: ARRAY
73120: PPUSH
73121: LD_VAR 0 6
73125: PUSH
73126: LD_VAR 0 4
73130: ARRAY
73131: PUSH
73132: LD_INT 2
73134: ARRAY
73135: PPUSH
73136: CALL_OW 488
73140: NOT
73141: PUSH
73142: LD_VAR 0 6
73146: PUSH
73147: LD_VAR 0 4
73151: ARRAY
73152: PUSH
73153: LD_INT 1
73155: ARRAY
73156: PPUSH
73157: LD_VAR 0 6
73161: PUSH
73162: LD_VAR 0 4
73166: ARRAY
73167: PUSH
73168: LD_INT 2
73170: ARRAY
73171: PPUSH
73172: CALL_OW 428
73176: PUSH
73177: LD_INT 0
73179: NONEQUAL
73180: OR
73181: IFFALSE 73203
// tmp := Delete ( tmp , i ) ;
73183: LD_ADDR_VAR 0 6
73187: PUSH
73188: LD_VAR 0 6
73192: PPUSH
73193: LD_VAR 0 4
73197: PPUSH
73198: CALL_OW 3
73202: ST_TO_ADDR
73203: GO 73103
73205: POP
73206: POP
// j := GetClosestHex ( unit , tmp ) ;
73207: LD_ADDR_VAR 0 5
73211: PUSH
73212: LD_VAR 0 1
73216: PPUSH
73217: LD_VAR 0 6
73221: PPUSH
73222: CALL 72509 0 2
73226: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73227: LD_VAR 0 1
73231: PPUSH
73232: LD_VAR 0 5
73236: PUSH
73237: LD_INT 1
73239: ARRAY
73240: PPUSH
73241: LD_VAR 0 5
73245: PUSH
73246: LD_INT 2
73248: ARRAY
73249: PPUSH
73250: CALL_OW 111
// end ;
73254: LD_VAR 0 3
73258: RET
// export function PrepareApemanSoldier ( ) ; begin
73259: LD_INT 0
73261: PPUSH
// uc_nation := 0 ;
73262: LD_ADDR_OWVAR 21
73266: PUSH
73267: LD_INT 0
73269: ST_TO_ADDR
// hc_sex := sex_male ;
73270: LD_ADDR_OWVAR 27
73274: PUSH
73275: LD_INT 1
73277: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73278: LD_ADDR_OWVAR 28
73282: PUSH
73283: LD_INT 15
73285: ST_TO_ADDR
// hc_gallery :=  ;
73286: LD_ADDR_OWVAR 33
73290: PUSH
73291: LD_STRING 
73293: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73294: LD_ADDR_OWVAR 31
73298: PUSH
73299: LD_INT 0
73301: PPUSH
73302: LD_INT 3
73304: PPUSH
73305: CALL_OW 12
73309: PUSH
73310: LD_INT 0
73312: PPUSH
73313: LD_INT 3
73315: PPUSH
73316: CALL_OW 12
73320: PUSH
73321: LD_INT 0
73323: PUSH
73324: LD_INT 0
73326: PUSH
73327: EMPTY
73328: LIST
73329: LIST
73330: LIST
73331: LIST
73332: ST_TO_ADDR
// end ;
73333: LD_VAR 0 1
73337: RET
// export function PrepareApemanEngineer ( ) ; begin
73338: LD_INT 0
73340: PPUSH
// uc_nation := 0 ;
73341: LD_ADDR_OWVAR 21
73345: PUSH
73346: LD_INT 0
73348: ST_TO_ADDR
// hc_sex := sex_male ;
73349: LD_ADDR_OWVAR 27
73353: PUSH
73354: LD_INT 1
73356: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73357: LD_ADDR_OWVAR 28
73361: PUSH
73362: LD_INT 16
73364: ST_TO_ADDR
// hc_gallery :=  ;
73365: LD_ADDR_OWVAR 33
73369: PUSH
73370: LD_STRING 
73372: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73373: LD_ADDR_OWVAR 31
73377: PUSH
73378: LD_INT 0
73380: PPUSH
73381: LD_INT 3
73383: PPUSH
73384: CALL_OW 12
73388: PUSH
73389: LD_INT 0
73391: PPUSH
73392: LD_INT 3
73394: PPUSH
73395: CALL_OW 12
73399: PUSH
73400: LD_INT 0
73402: PUSH
73403: LD_INT 0
73405: PUSH
73406: EMPTY
73407: LIST
73408: LIST
73409: LIST
73410: LIST
73411: ST_TO_ADDR
// end ;
73412: LD_VAR 0 1
73416: RET
// export function PrepareApeman ( agressivity ) ; begin
73417: LD_INT 0
73419: PPUSH
// uc_side := 0 ;
73420: LD_ADDR_OWVAR 20
73424: PUSH
73425: LD_INT 0
73427: ST_TO_ADDR
// uc_nation := 0 ;
73428: LD_ADDR_OWVAR 21
73432: PUSH
73433: LD_INT 0
73435: ST_TO_ADDR
// hc_sex := sex_male ;
73436: LD_ADDR_OWVAR 27
73440: PUSH
73441: LD_INT 1
73443: ST_TO_ADDR
// hc_class := class_apeman ;
73444: LD_ADDR_OWVAR 28
73448: PUSH
73449: LD_INT 12
73451: ST_TO_ADDR
// hc_gallery :=  ;
73452: LD_ADDR_OWVAR 33
73456: PUSH
73457: LD_STRING 
73459: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73460: LD_ADDR_OWVAR 35
73464: PUSH
73465: LD_VAR 0 1
73469: NEG
73470: PPUSH
73471: LD_VAR 0 1
73475: PPUSH
73476: CALL_OW 12
73480: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73481: LD_ADDR_OWVAR 31
73485: PUSH
73486: LD_INT 0
73488: PPUSH
73489: LD_INT 3
73491: PPUSH
73492: CALL_OW 12
73496: PUSH
73497: LD_INT 0
73499: PPUSH
73500: LD_INT 3
73502: PPUSH
73503: CALL_OW 12
73507: PUSH
73508: LD_INT 0
73510: PUSH
73511: LD_INT 0
73513: PUSH
73514: EMPTY
73515: LIST
73516: LIST
73517: LIST
73518: LIST
73519: ST_TO_ADDR
// end ;
73520: LD_VAR 0 2
73524: RET
// export function PrepareTiger ( agressivity ) ; begin
73525: LD_INT 0
73527: PPUSH
// uc_side := 0 ;
73528: LD_ADDR_OWVAR 20
73532: PUSH
73533: LD_INT 0
73535: ST_TO_ADDR
// uc_nation := 0 ;
73536: LD_ADDR_OWVAR 21
73540: PUSH
73541: LD_INT 0
73543: ST_TO_ADDR
// hc_class := class_tiger ;
73544: LD_ADDR_OWVAR 28
73548: PUSH
73549: LD_INT 14
73551: ST_TO_ADDR
// hc_gallery :=  ;
73552: LD_ADDR_OWVAR 33
73556: PUSH
73557: LD_STRING 
73559: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73560: LD_ADDR_OWVAR 35
73564: PUSH
73565: LD_VAR 0 1
73569: NEG
73570: PPUSH
73571: LD_VAR 0 1
73575: PPUSH
73576: CALL_OW 12
73580: ST_TO_ADDR
// end ;
73581: LD_VAR 0 2
73585: RET
// export function PrepareEnchidna ( ) ; begin
73586: LD_INT 0
73588: PPUSH
// uc_side := 0 ;
73589: LD_ADDR_OWVAR 20
73593: PUSH
73594: LD_INT 0
73596: ST_TO_ADDR
// uc_nation := 0 ;
73597: LD_ADDR_OWVAR 21
73601: PUSH
73602: LD_INT 0
73604: ST_TO_ADDR
// hc_class := class_baggie ;
73605: LD_ADDR_OWVAR 28
73609: PUSH
73610: LD_INT 13
73612: ST_TO_ADDR
// hc_gallery :=  ;
73613: LD_ADDR_OWVAR 33
73617: PUSH
73618: LD_STRING 
73620: ST_TO_ADDR
// end ;
73621: LD_VAR 0 1
73625: RET
// export function PrepareFrog ( ) ; begin
73626: LD_INT 0
73628: PPUSH
// uc_side := 0 ;
73629: LD_ADDR_OWVAR 20
73633: PUSH
73634: LD_INT 0
73636: ST_TO_ADDR
// uc_nation := 0 ;
73637: LD_ADDR_OWVAR 21
73641: PUSH
73642: LD_INT 0
73644: ST_TO_ADDR
// hc_class := class_frog ;
73645: LD_ADDR_OWVAR 28
73649: PUSH
73650: LD_INT 19
73652: ST_TO_ADDR
// hc_gallery :=  ;
73653: LD_ADDR_OWVAR 33
73657: PUSH
73658: LD_STRING 
73660: ST_TO_ADDR
// end ;
73661: LD_VAR 0 1
73665: RET
// export function PrepareFish ( ) ; begin
73666: LD_INT 0
73668: PPUSH
// uc_side := 0 ;
73669: LD_ADDR_OWVAR 20
73673: PUSH
73674: LD_INT 0
73676: ST_TO_ADDR
// uc_nation := 0 ;
73677: LD_ADDR_OWVAR 21
73681: PUSH
73682: LD_INT 0
73684: ST_TO_ADDR
// hc_class := class_fish ;
73685: LD_ADDR_OWVAR 28
73689: PUSH
73690: LD_INT 20
73692: ST_TO_ADDR
// hc_gallery :=  ;
73693: LD_ADDR_OWVAR 33
73697: PUSH
73698: LD_STRING 
73700: ST_TO_ADDR
// end ;
73701: LD_VAR 0 1
73705: RET
// export function PrepareBird ( ) ; begin
73706: LD_INT 0
73708: PPUSH
// uc_side := 0 ;
73709: LD_ADDR_OWVAR 20
73713: PUSH
73714: LD_INT 0
73716: ST_TO_ADDR
// uc_nation := 0 ;
73717: LD_ADDR_OWVAR 21
73721: PUSH
73722: LD_INT 0
73724: ST_TO_ADDR
// hc_class := class_phororhacos ;
73725: LD_ADDR_OWVAR 28
73729: PUSH
73730: LD_INT 18
73732: ST_TO_ADDR
// hc_gallery :=  ;
73733: LD_ADDR_OWVAR 33
73737: PUSH
73738: LD_STRING 
73740: ST_TO_ADDR
// end ;
73741: LD_VAR 0 1
73745: RET
// export function PrepareHorse ( ) ; begin
73746: LD_INT 0
73748: PPUSH
// uc_side := 0 ;
73749: LD_ADDR_OWVAR 20
73753: PUSH
73754: LD_INT 0
73756: ST_TO_ADDR
// uc_nation := 0 ;
73757: LD_ADDR_OWVAR 21
73761: PUSH
73762: LD_INT 0
73764: ST_TO_ADDR
// hc_class := class_horse ;
73765: LD_ADDR_OWVAR 28
73769: PUSH
73770: LD_INT 21
73772: ST_TO_ADDR
// hc_gallery :=  ;
73773: LD_ADDR_OWVAR 33
73777: PUSH
73778: LD_STRING 
73780: ST_TO_ADDR
// end ;
73781: LD_VAR 0 1
73785: RET
// export function PrepareMastodont ( ) ; begin
73786: LD_INT 0
73788: PPUSH
// uc_side := 0 ;
73789: LD_ADDR_OWVAR 20
73793: PUSH
73794: LD_INT 0
73796: ST_TO_ADDR
// uc_nation := 0 ;
73797: LD_ADDR_OWVAR 21
73801: PUSH
73802: LD_INT 0
73804: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73805: LD_ADDR_OWVAR 37
73809: PUSH
73810: LD_INT 31
73812: ST_TO_ADDR
// vc_control := control_rider ;
73813: LD_ADDR_OWVAR 38
73817: PUSH
73818: LD_INT 4
73820: ST_TO_ADDR
// end ;
73821: LD_VAR 0 1
73825: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73826: LD_INT 0
73828: PPUSH
73829: PPUSH
73830: PPUSH
// uc_side = 0 ;
73831: LD_ADDR_OWVAR 20
73835: PUSH
73836: LD_INT 0
73838: ST_TO_ADDR
// uc_nation = 0 ;
73839: LD_ADDR_OWVAR 21
73843: PUSH
73844: LD_INT 0
73846: ST_TO_ADDR
// InitHc_All ( ) ;
73847: CALL_OW 584
// InitVc ;
73851: CALL_OW 20
// if mastodonts then
73855: LD_VAR 0 6
73859: IFFALSE 73926
// for i = 1 to mastodonts do
73861: LD_ADDR_VAR 0 11
73865: PUSH
73866: DOUBLE
73867: LD_INT 1
73869: DEC
73870: ST_TO_ADDR
73871: LD_VAR 0 6
73875: PUSH
73876: FOR_TO
73877: IFFALSE 73924
// begin vc_chassis := 31 ;
73879: LD_ADDR_OWVAR 37
73883: PUSH
73884: LD_INT 31
73886: ST_TO_ADDR
// vc_control := control_rider ;
73887: LD_ADDR_OWVAR 38
73891: PUSH
73892: LD_INT 4
73894: ST_TO_ADDR
// animal := CreateVehicle ;
73895: LD_ADDR_VAR 0 12
73899: PUSH
73900: CALL_OW 45
73904: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73905: LD_VAR 0 12
73909: PPUSH
73910: LD_VAR 0 8
73914: PPUSH
73915: LD_INT 0
73917: PPUSH
73918: CALL 76054 0 3
// end ;
73922: GO 73876
73924: POP
73925: POP
// if horses then
73926: LD_VAR 0 5
73930: IFFALSE 73997
// for i = 1 to horses do
73932: LD_ADDR_VAR 0 11
73936: PUSH
73937: DOUBLE
73938: LD_INT 1
73940: DEC
73941: ST_TO_ADDR
73942: LD_VAR 0 5
73946: PUSH
73947: FOR_TO
73948: IFFALSE 73995
// begin hc_class := 21 ;
73950: LD_ADDR_OWVAR 28
73954: PUSH
73955: LD_INT 21
73957: ST_TO_ADDR
// hc_gallery :=  ;
73958: LD_ADDR_OWVAR 33
73962: PUSH
73963: LD_STRING 
73965: ST_TO_ADDR
// animal := CreateHuman ;
73966: LD_ADDR_VAR 0 12
73970: PUSH
73971: CALL_OW 44
73975: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73976: LD_VAR 0 12
73980: PPUSH
73981: LD_VAR 0 8
73985: PPUSH
73986: LD_INT 0
73988: PPUSH
73989: CALL 76054 0 3
// end ;
73993: GO 73947
73995: POP
73996: POP
// if birds then
73997: LD_VAR 0 1
74001: IFFALSE 74068
// for i = 1 to birds do
74003: LD_ADDR_VAR 0 11
74007: PUSH
74008: DOUBLE
74009: LD_INT 1
74011: DEC
74012: ST_TO_ADDR
74013: LD_VAR 0 1
74017: PUSH
74018: FOR_TO
74019: IFFALSE 74066
// begin hc_class := 18 ;
74021: LD_ADDR_OWVAR 28
74025: PUSH
74026: LD_INT 18
74028: ST_TO_ADDR
// hc_gallery =  ;
74029: LD_ADDR_OWVAR 33
74033: PUSH
74034: LD_STRING 
74036: ST_TO_ADDR
// animal := CreateHuman ;
74037: LD_ADDR_VAR 0 12
74041: PUSH
74042: CALL_OW 44
74046: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74047: LD_VAR 0 12
74051: PPUSH
74052: LD_VAR 0 8
74056: PPUSH
74057: LD_INT 0
74059: PPUSH
74060: CALL 76054 0 3
// end ;
74064: GO 74018
74066: POP
74067: POP
// if tigers then
74068: LD_VAR 0 2
74072: IFFALSE 74156
// for i = 1 to tigers do
74074: LD_ADDR_VAR 0 11
74078: PUSH
74079: DOUBLE
74080: LD_INT 1
74082: DEC
74083: ST_TO_ADDR
74084: LD_VAR 0 2
74088: PUSH
74089: FOR_TO
74090: IFFALSE 74154
// begin hc_class = class_tiger ;
74092: LD_ADDR_OWVAR 28
74096: PUSH
74097: LD_INT 14
74099: ST_TO_ADDR
// hc_gallery =  ;
74100: LD_ADDR_OWVAR 33
74104: PUSH
74105: LD_STRING 
74107: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74108: LD_ADDR_OWVAR 35
74112: PUSH
74113: LD_INT 7
74115: NEG
74116: PPUSH
74117: LD_INT 7
74119: PPUSH
74120: CALL_OW 12
74124: ST_TO_ADDR
// animal := CreateHuman ;
74125: LD_ADDR_VAR 0 12
74129: PUSH
74130: CALL_OW 44
74134: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74135: LD_VAR 0 12
74139: PPUSH
74140: LD_VAR 0 8
74144: PPUSH
74145: LD_INT 0
74147: PPUSH
74148: CALL 76054 0 3
// end ;
74152: GO 74089
74154: POP
74155: POP
// if apemans then
74156: LD_VAR 0 3
74160: IFFALSE 74283
// for i = 1 to apemans do
74162: LD_ADDR_VAR 0 11
74166: PUSH
74167: DOUBLE
74168: LD_INT 1
74170: DEC
74171: ST_TO_ADDR
74172: LD_VAR 0 3
74176: PUSH
74177: FOR_TO
74178: IFFALSE 74281
// begin hc_class = class_apeman ;
74180: LD_ADDR_OWVAR 28
74184: PUSH
74185: LD_INT 12
74187: ST_TO_ADDR
// hc_gallery =  ;
74188: LD_ADDR_OWVAR 33
74192: PUSH
74193: LD_STRING 
74195: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74196: LD_ADDR_OWVAR 35
74200: PUSH
74201: LD_INT 2
74203: NEG
74204: PPUSH
74205: LD_INT 2
74207: PPUSH
74208: CALL_OW 12
74212: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74213: LD_ADDR_OWVAR 31
74217: PUSH
74218: LD_INT 1
74220: PPUSH
74221: LD_INT 3
74223: PPUSH
74224: CALL_OW 12
74228: PUSH
74229: LD_INT 1
74231: PPUSH
74232: LD_INT 3
74234: PPUSH
74235: CALL_OW 12
74239: PUSH
74240: LD_INT 0
74242: PUSH
74243: LD_INT 0
74245: PUSH
74246: EMPTY
74247: LIST
74248: LIST
74249: LIST
74250: LIST
74251: ST_TO_ADDR
// animal := CreateHuman ;
74252: LD_ADDR_VAR 0 12
74256: PUSH
74257: CALL_OW 44
74261: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74262: LD_VAR 0 12
74266: PPUSH
74267: LD_VAR 0 8
74271: PPUSH
74272: LD_INT 0
74274: PPUSH
74275: CALL 76054 0 3
// end ;
74279: GO 74177
74281: POP
74282: POP
// if enchidnas then
74283: LD_VAR 0 4
74287: IFFALSE 74354
// for i = 1 to enchidnas do
74289: LD_ADDR_VAR 0 11
74293: PUSH
74294: DOUBLE
74295: LD_INT 1
74297: DEC
74298: ST_TO_ADDR
74299: LD_VAR 0 4
74303: PUSH
74304: FOR_TO
74305: IFFALSE 74352
// begin hc_class = 13 ;
74307: LD_ADDR_OWVAR 28
74311: PUSH
74312: LD_INT 13
74314: ST_TO_ADDR
// hc_gallery =  ;
74315: LD_ADDR_OWVAR 33
74319: PUSH
74320: LD_STRING 
74322: ST_TO_ADDR
// animal := CreateHuman ;
74323: LD_ADDR_VAR 0 12
74327: PUSH
74328: CALL_OW 44
74332: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74333: LD_VAR 0 12
74337: PPUSH
74338: LD_VAR 0 8
74342: PPUSH
74343: LD_INT 0
74345: PPUSH
74346: CALL 76054 0 3
// end ;
74350: GO 74304
74352: POP
74353: POP
// if fishes then
74354: LD_VAR 0 7
74358: IFFALSE 74425
// for i = 1 to fishes do
74360: LD_ADDR_VAR 0 11
74364: PUSH
74365: DOUBLE
74366: LD_INT 1
74368: DEC
74369: ST_TO_ADDR
74370: LD_VAR 0 7
74374: PUSH
74375: FOR_TO
74376: IFFALSE 74423
// begin hc_class = 20 ;
74378: LD_ADDR_OWVAR 28
74382: PUSH
74383: LD_INT 20
74385: ST_TO_ADDR
// hc_gallery =  ;
74386: LD_ADDR_OWVAR 33
74390: PUSH
74391: LD_STRING 
74393: ST_TO_ADDR
// animal := CreateHuman ;
74394: LD_ADDR_VAR 0 12
74398: PUSH
74399: CALL_OW 44
74403: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74404: LD_VAR 0 12
74408: PPUSH
74409: LD_VAR 0 9
74413: PPUSH
74414: LD_INT 0
74416: PPUSH
74417: CALL 76054 0 3
// end ;
74421: GO 74375
74423: POP
74424: POP
// end ;
74425: LD_VAR 0 10
74429: RET
// export function WantHeal ( sci , unit ) ; begin
74430: LD_INT 0
74432: PPUSH
// if GetTaskList ( sci ) > 0 then
74433: LD_VAR 0 1
74437: PPUSH
74438: CALL_OW 437
74442: PUSH
74443: LD_INT 0
74445: GREATER
74446: IFFALSE 74516
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74448: LD_VAR 0 1
74452: PPUSH
74453: CALL_OW 437
74457: PUSH
74458: LD_INT 1
74460: ARRAY
74461: PUSH
74462: LD_INT 1
74464: ARRAY
74465: PUSH
74466: LD_STRING l
74468: EQUAL
74469: PUSH
74470: LD_VAR 0 1
74474: PPUSH
74475: CALL_OW 437
74479: PUSH
74480: LD_INT 1
74482: ARRAY
74483: PUSH
74484: LD_INT 4
74486: ARRAY
74487: PUSH
74488: LD_VAR 0 2
74492: EQUAL
74493: AND
74494: IFFALSE 74506
// result := true else
74496: LD_ADDR_VAR 0 3
74500: PUSH
74501: LD_INT 1
74503: ST_TO_ADDR
74504: GO 74514
// result := false ;
74506: LD_ADDR_VAR 0 3
74510: PUSH
74511: LD_INT 0
74513: ST_TO_ADDR
// end else
74514: GO 74524
// result := false ;
74516: LD_ADDR_VAR 0 3
74520: PUSH
74521: LD_INT 0
74523: ST_TO_ADDR
// end ;
74524: LD_VAR 0 3
74528: RET
// export function HealTarget ( sci ) ; begin
74529: LD_INT 0
74531: PPUSH
// if not sci then
74532: LD_VAR 0 1
74536: NOT
74537: IFFALSE 74541
// exit ;
74539: GO 74606
// result := 0 ;
74541: LD_ADDR_VAR 0 2
74545: PUSH
74546: LD_INT 0
74548: ST_TO_ADDR
// if GetTaskList ( sci ) then
74549: LD_VAR 0 1
74553: PPUSH
74554: CALL_OW 437
74558: IFFALSE 74606
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74560: LD_VAR 0 1
74564: PPUSH
74565: CALL_OW 437
74569: PUSH
74570: LD_INT 1
74572: ARRAY
74573: PUSH
74574: LD_INT 1
74576: ARRAY
74577: PUSH
74578: LD_STRING l
74580: EQUAL
74581: IFFALSE 74606
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74583: LD_ADDR_VAR 0 2
74587: PUSH
74588: LD_VAR 0 1
74592: PPUSH
74593: CALL_OW 437
74597: PUSH
74598: LD_INT 1
74600: ARRAY
74601: PUSH
74602: LD_INT 4
74604: ARRAY
74605: ST_TO_ADDR
// end ;
74606: LD_VAR 0 2
74610: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74611: LD_INT 0
74613: PPUSH
74614: PPUSH
74615: PPUSH
74616: PPUSH
// if not base_units then
74617: LD_VAR 0 1
74621: NOT
74622: IFFALSE 74626
// exit ;
74624: GO 74713
// result := false ;
74626: LD_ADDR_VAR 0 2
74630: PUSH
74631: LD_INT 0
74633: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74634: LD_ADDR_VAR 0 5
74638: PUSH
74639: LD_VAR 0 1
74643: PPUSH
74644: LD_INT 21
74646: PUSH
74647: LD_INT 3
74649: PUSH
74650: EMPTY
74651: LIST
74652: LIST
74653: PPUSH
74654: CALL_OW 72
74658: ST_TO_ADDR
// if not tmp then
74659: LD_VAR 0 5
74663: NOT
74664: IFFALSE 74668
// exit ;
74666: GO 74713
// for i in tmp do
74668: LD_ADDR_VAR 0 3
74672: PUSH
74673: LD_VAR 0 5
74677: PUSH
74678: FOR_IN
74679: IFFALSE 74711
// begin result := EnemyInRange ( i , 22 ) ;
74681: LD_ADDR_VAR 0 2
74685: PUSH
74686: LD_VAR 0 3
74690: PPUSH
74691: LD_INT 22
74693: PPUSH
74694: CALL 72311 0 2
74698: ST_TO_ADDR
// if result then
74699: LD_VAR 0 2
74703: IFFALSE 74709
// exit ;
74705: POP
74706: POP
74707: GO 74713
// end ;
74709: GO 74678
74711: POP
74712: POP
// end ;
74713: LD_VAR 0 2
74717: RET
// export function FilterByTag ( units , tag ) ; begin
74718: LD_INT 0
74720: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74721: LD_ADDR_VAR 0 3
74725: PUSH
74726: LD_VAR 0 1
74730: PPUSH
74731: LD_INT 120
74733: PUSH
74734: LD_VAR 0 2
74738: PUSH
74739: EMPTY
74740: LIST
74741: LIST
74742: PPUSH
74743: CALL_OW 72
74747: ST_TO_ADDR
// end ;
74748: LD_VAR 0 3
74752: RET
// export function IsDriver ( un ) ; begin
74753: LD_INT 0
74755: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74756: LD_ADDR_VAR 0 2
74760: PUSH
74761: LD_VAR 0 1
74765: PUSH
74766: LD_INT 55
74768: PUSH
74769: EMPTY
74770: LIST
74771: PPUSH
74772: CALL_OW 69
74776: IN
74777: ST_TO_ADDR
// end ;
74778: LD_VAR 0 2
74782: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74783: LD_INT 0
74785: PPUSH
74786: PPUSH
// list := [ ] ;
74787: LD_ADDR_VAR 0 5
74791: PUSH
74792: EMPTY
74793: ST_TO_ADDR
// case d of 0 :
74794: LD_VAR 0 3
74798: PUSH
74799: LD_INT 0
74801: DOUBLE
74802: EQUAL
74803: IFTRUE 74807
74805: GO 74940
74807: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74808: LD_ADDR_VAR 0 5
74812: PUSH
74813: LD_VAR 0 1
74817: PUSH
74818: LD_INT 4
74820: MINUS
74821: PUSH
74822: LD_VAR 0 2
74826: PUSH
74827: LD_INT 4
74829: MINUS
74830: PUSH
74831: LD_INT 2
74833: PUSH
74834: EMPTY
74835: LIST
74836: LIST
74837: LIST
74838: PUSH
74839: LD_VAR 0 1
74843: PUSH
74844: LD_INT 3
74846: MINUS
74847: PUSH
74848: LD_VAR 0 2
74852: PUSH
74853: LD_INT 1
74855: PUSH
74856: EMPTY
74857: LIST
74858: LIST
74859: LIST
74860: PUSH
74861: LD_VAR 0 1
74865: PUSH
74866: LD_INT 4
74868: PLUS
74869: PUSH
74870: LD_VAR 0 2
74874: PUSH
74875: LD_INT 4
74877: PUSH
74878: EMPTY
74879: LIST
74880: LIST
74881: LIST
74882: PUSH
74883: LD_VAR 0 1
74887: PUSH
74888: LD_INT 3
74890: PLUS
74891: PUSH
74892: LD_VAR 0 2
74896: PUSH
74897: LD_INT 3
74899: PLUS
74900: PUSH
74901: LD_INT 5
74903: PUSH
74904: EMPTY
74905: LIST
74906: LIST
74907: LIST
74908: PUSH
74909: LD_VAR 0 1
74913: PUSH
74914: LD_VAR 0 2
74918: PUSH
74919: LD_INT 4
74921: PLUS
74922: PUSH
74923: LD_INT 0
74925: PUSH
74926: EMPTY
74927: LIST
74928: LIST
74929: LIST
74930: PUSH
74931: EMPTY
74932: LIST
74933: LIST
74934: LIST
74935: LIST
74936: LIST
74937: ST_TO_ADDR
// end ; 1 :
74938: GO 75638
74940: LD_INT 1
74942: DOUBLE
74943: EQUAL
74944: IFTRUE 74948
74946: GO 75081
74948: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74949: LD_ADDR_VAR 0 5
74953: PUSH
74954: LD_VAR 0 1
74958: PUSH
74959: LD_VAR 0 2
74963: PUSH
74964: LD_INT 4
74966: MINUS
74967: PUSH
74968: LD_INT 3
74970: PUSH
74971: EMPTY
74972: LIST
74973: LIST
74974: LIST
74975: PUSH
74976: LD_VAR 0 1
74980: PUSH
74981: LD_INT 3
74983: MINUS
74984: PUSH
74985: LD_VAR 0 2
74989: PUSH
74990: LD_INT 3
74992: MINUS
74993: PUSH
74994: LD_INT 2
74996: PUSH
74997: EMPTY
74998: LIST
74999: LIST
75000: LIST
75001: PUSH
75002: LD_VAR 0 1
75006: PUSH
75007: LD_INT 4
75009: MINUS
75010: PUSH
75011: LD_VAR 0 2
75015: PUSH
75016: LD_INT 1
75018: PUSH
75019: EMPTY
75020: LIST
75021: LIST
75022: LIST
75023: PUSH
75024: LD_VAR 0 1
75028: PUSH
75029: LD_VAR 0 2
75033: PUSH
75034: LD_INT 3
75036: PLUS
75037: PUSH
75038: LD_INT 0
75040: PUSH
75041: EMPTY
75042: LIST
75043: LIST
75044: LIST
75045: PUSH
75046: LD_VAR 0 1
75050: PUSH
75051: LD_INT 4
75053: PLUS
75054: PUSH
75055: LD_VAR 0 2
75059: PUSH
75060: LD_INT 4
75062: PLUS
75063: PUSH
75064: LD_INT 5
75066: PUSH
75067: EMPTY
75068: LIST
75069: LIST
75070: LIST
75071: PUSH
75072: EMPTY
75073: LIST
75074: LIST
75075: LIST
75076: LIST
75077: LIST
75078: ST_TO_ADDR
// end ; 2 :
75079: GO 75638
75081: LD_INT 2
75083: DOUBLE
75084: EQUAL
75085: IFTRUE 75089
75087: GO 75218
75089: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75090: LD_ADDR_VAR 0 5
75094: PUSH
75095: LD_VAR 0 1
75099: PUSH
75100: LD_VAR 0 2
75104: PUSH
75105: LD_INT 3
75107: MINUS
75108: PUSH
75109: LD_INT 3
75111: PUSH
75112: EMPTY
75113: LIST
75114: LIST
75115: LIST
75116: PUSH
75117: LD_VAR 0 1
75121: PUSH
75122: LD_INT 4
75124: PLUS
75125: PUSH
75126: LD_VAR 0 2
75130: PUSH
75131: LD_INT 4
75133: PUSH
75134: EMPTY
75135: LIST
75136: LIST
75137: LIST
75138: PUSH
75139: LD_VAR 0 1
75143: PUSH
75144: LD_VAR 0 2
75148: PUSH
75149: LD_INT 4
75151: PLUS
75152: PUSH
75153: LD_INT 0
75155: PUSH
75156: EMPTY
75157: LIST
75158: LIST
75159: LIST
75160: PUSH
75161: LD_VAR 0 1
75165: PUSH
75166: LD_INT 3
75168: MINUS
75169: PUSH
75170: LD_VAR 0 2
75174: PUSH
75175: LD_INT 1
75177: PUSH
75178: EMPTY
75179: LIST
75180: LIST
75181: LIST
75182: PUSH
75183: LD_VAR 0 1
75187: PUSH
75188: LD_INT 4
75190: MINUS
75191: PUSH
75192: LD_VAR 0 2
75196: PUSH
75197: LD_INT 4
75199: MINUS
75200: PUSH
75201: LD_INT 2
75203: PUSH
75204: EMPTY
75205: LIST
75206: LIST
75207: LIST
75208: PUSH
75209: EMPTY
75210: LIST
75211: LIST
75212: LIST
75213: LIST
75214: LIST
75215: ST_TO_ADDR
// end ; 3 :
75216: GO 75638
75218: LD_INT 3
75220: DOUBLE
75221: EQUAL
75222: IFTRUE 75226
75224: GO 75359
75226: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75227: LD_ADDR_VAR 0 5
75231: PUSH
75232: LD_VAR 0 1
75236: PUSH
75237: LD_INT 3
75239: PLUS
75240: PUSH
75241: LD_VAR 0 2
75245: PUSH
75246: LD_INT 4
75248: PUSH
75249: EMPTY
75250: LIST
75251: LIST
75252: LIST
75253: PUSH
75254: LD_VAR 0 1
75258: PUSH
75259: LD_INT 4
75261: PLUS
75262: PUSH
75263: LD_VAR 0 2
75267: PUSH
75268: LD_INT 4
75270: PLUS
75271: PUSH
75272: LD_INT 5
75274: PUSH
75275: EMPTY
75276: LIST
75277: LIST
75278: LIST
75279: PUSH
75280: LD_VAR 0 1
75284: PUSH
75285: LD_INT 4
75287: MINUS
75288: PUSH
75289: LD_VAR 0 2
75293: PUSH
75294: LD_INT 1
75296: PUSH
75297: EMPTY
75298: LIST
75299: LIST
75300: LIST
75301: PUSH
75302: LD_VAR 0 1
75306: PUSH
75307: LD_VAR 0 2
75311: PUSH
75312: LD_INT 4
75314: MINUS
75315: PUSH
75316: LD_INT 3
75318: PUSH
75319: EMPTY
75320: LIST
75321: LIST
75322: LIST
75323: PUSH
75324: LD_VAR 0 1
75328: PUSH
75329: LD_INT 3
75331: MINUS
75332: PUSH
75333: LD_VAR 0 2
75337: PUSH
75338: LD_INT 3
75340: MINUS
75341: PUSH
75342: LD_INT 2
75344: PUSH
75345: EMPTY
75346: LIST
75347: LIST
75348: LIST
75349: PUSH
75350: EMPTY
75351: LIST
75352: LIST
75353: LIST
75354: LIST
75355: LIST
75356: ST_TO_ADDR
// end ; 4 :
75357: GO 75638
75359: LD_INT 4
75361: DOUBLE
75362: EQUAL
75363: IFTRUE 75367
75365: GO 75500
75367: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75368: LD_ADDR_VAR 0 5
75372: PUSH
75373: LD_VAR 0 1
75377: PUSH
75378: LD_VAR 0 2
75382: PUSH
75383: LD_INT 4
75385: PLUS
75386: PUSH
75387: LD_INT 0
75389: PUSH
75390: EMPTY
75391: LIST
75392: LIST
75393: LIST
75394: PUSH
75395: LD_VAR 0 1
75399: PUSH
75400: LD_INT 3
75402: PLUS
75403: PUSH
75404: LD_VAR 0 2
75408: PUSH
75409: LD_INT 3
75411: PLUS
75412: PUSH
75413: LD_INT 5
75415: PUSH
75416: EMPTY
75417: LIST
75418: LIST
75419: LIST
75420: PUSH
75421: LD_VAR 0 1
75425: PUSH
75426: LD_INT 4
75428: PLUS
75429: PUSH
75430: LD_VAR 0 2
75434: PUSH
75435: LD_INT 4
75437: PUSH
75438: EMPTY
75439: LIST
75440: LIST
75441: LIST
75442: PUSH
75443: LD_VAR 0 1
75447: PUSH
75448: LD_VAR 0 2
75452: PUSH
75453: LD_INT 3
75455: MINUS
75456: PUSH
75457: LD_INT 3
75459: PUSH
75460: EMPTY
75461: LIST
75462: LIST
75463: LIST
75464: PUSH
75465: LD_VAR 0 1
75469: PUSH
75470: LD_INT 4
75472: MINUS
75473: PUSH
75474: LD_VAR 0 2
75478: PUSH
75479: LD_INT 4
75481: MINUS
75482: PUSH
75483: LD_INT 2
75485: PUSH
75486: EMPTY
75487: LIST
75488: LIST
75489: LIST
75490: PUSH
75491: EMPTY
75492: LIST
75493: LIST
75494: LIST
75495: LIST
75496: LIST
75497: ST_TO_ADDR
// end ; 5 :
75498: GO 75638
75500: LD_INT 5
75502: DOUBLE
75503: EQUAL
75504: IFTRUE 75508
75506: GO 75637
75508: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75509: LD_ADDR_VAR 0 5
75513: PUSH
75514: LD_VAR 0 1
75518: PUSH
75519: LD_INT 4
75521: MINUS
75522: PUSH
75523: LD_VAR 0 2
75527: PUSH
75528: LD_INT 1
75530: PUSH
75531: EMPTY
75532: LIST
75533: LIST
75534: LIST
75535: PUSH
75536: LD_VAR 0 1
75540: PUSH
75541: LD_VAR 0 2
75545: PUSH
75546: LD_INT 4
75548: MINUS
75549: PUSH
75550: LD_INT 3
75552: PUSH
75553: EMPTY
75554: LIST
75555: LIST
75556: LIST
75557: PUSH
75558: LD_VAR 0 1
75562: PUSH
75563: LD_INT 4
75565: PLUS
75566: PUSH
75567: LD_VAR 0 2
75571: PUSH
75572: LD_INT 4
75574: PLUS
75575: PUSH
75576: LD_INT 5
75578: PUSH
75579: EMPTY
75580: LIST
75581: LIST
75582: LIST
75583: PUSH
75584: LD_VAR 0 1
75588: PUSH
75589: LD_INT 3
75591: PLUS
75592: PUSH
75593: LD_VAR 0 2
75597: PUSH
75598: LD_INT 4
75600: PUSH
75601: EMPTY
75602: LIST
75603: LIST
75604: LIST
75605: PUSH
75606: LD_VAR 0 1
75610: PUSH
75611: LD_VAR 0 2
75615: PUSH
75616: LD_INT 3
75618: PLUS
75619: PUSH
75620: LD_INT 0
75622: PUSH
75623: EMPTY
75624: LIST
75625: LIST
75626: LIST
75627: PUSH
75628: EMPTY
75629: LIST
75630: LIST
75631: LIST
75632: LIST
75633: LIST
75634: ST_TO_ADDR
// end ; end ;
75635: GO 75638
75637: POP
// result := list ;
75638: LD_ADDR_VAR 0 4
75642: PUSH
75643: LD_VAR 0 5
75647: ST_TO_ADDR
// end ;
75648: LD_VAR 0 4
75652: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75653: LD_INT 0
75655: PPUSH
75656: PPUSH
75657: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75658: LD_VAR 0 1
75662: NOT
75663: PUSH
75664: LD_VAR 0 2
75668: PUSH
75669: LD_INT 1
75671: PUSH
75672: LD_INT 2
75674: PUSH
75675: LD_INT 3
75677: PUSH
75678: LD_INT 4
75680: PUSH
75681: EMPTY
75682: LIST
75683: LIST
75684: LIST
75685: LIST
75686: IN
75687: NOT
75688: OR
75689: IFFALSE 75693
// exit ;
75691: GO 75776
// tmp := [ ] ;
75693: LD_ADDR_VAR 0 5
75697: PUSH
75698: EMPTY
75699: ST_TO_ADDR
// for i in units do
75700: LD_ADDR_VAR 0 4
75704: PUSH
75705: LD_VAR 0 1
75709: PUSH
75710: FOR_IN
75711: IFFALSE 75745
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
75713: LD_ADDR_VAR 0 5
75717: PUSH
75718: LD_VAR 0 5
75722: PPUSH
75723: LD_VAR 0 4
75727: PPUSH
75728: LD_VAR 0 2
75732: PPUSH
75733: CALL_OW 259
75737: PPUSH
75738: CALL 77149 0 2
75742: ST_TO_ADDR
75743: GO 75710
75745: POP
75746: POP
// if not tmp then
75747: LD_VAR 0 5
75751: NOT
75752: IFFALSE 75756
// exit ;
75754: GO 75776
// result := SortListByListDesc ( units , tmp ) ;
75756: LD_ADDR_VAR 0 3
75760: PUSH
75761: LD_VAR 0 1
75765: PPUSH
75766: LD_VAR 0 5
75770: PPUSH
75771: CALL_OW 77
75775: ST_TO_ADDR
// end ;
75776: LD_VAR 0 3
75780: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75781: LD_INT 0
75783: PPUSH
75784: PPUSH
75785: PPUSH
// result := false ;
75786: LD_ADDR_VAR 0 3
75790: PUSH
75791: LD_INT 0
75793: ST_TO_ADDR
// if not building then
75794: LD_VAR 0 2
75798: NOT
75799: IFFALSE 75803
// exit ;
75801: GO 75941
// x := GetX ( building ) ;
75803: LD_ADDR_VAR 0 4
75807: PUSH
75808: LD_VAR 0 2
75812: PPUSH
75813: CALL_OW 250
75817: ST_TO_ADDR
// y := GetY ( building ) ;
75818: LD_ADDR_VAR 0 5
75822: PUSH
75823: LD_VAR 0 2
75827: PPUSH
75828: CALL_OW 251
75832: ST_TO_ADDR
// if not x or not y then
75833: LD_VAR 0 4
75837: NOT
75838: PUSH
75839: LD_VAR 0 5
75843: NOT
75844: OR
75845: IFFALSE 75849
// exit ;
75847: GO 75941
// if GetTaskList ( unit ) then
75849: LD_VAR 0 1
75853: PPUSH
75854: CALL_OW 437
75858: IFFALSE 75941
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75860: LD_STRING e
75862: PUSH
75863: LD_VAR 0 1
75867: PPUSH
75868: CALL_OW 437
75872: PUSH
75873: LD_INT 1
75875: ARRAY
75876: PUSH
75877: LD_INT 1
75879: ARRAY
75880: EQUAL
75881: PUSH
75882: LD_VAR 0 4
75886: PUSH
75887: LD_VAR 0 1
75891: PPUSH
75892: CALL_OW 437
75896: PUSH
75897: LD_INT 1
75899: ARRAY
75900: PUSH
75901: LD_INT 2
75903: ARRAY
75904: EQUAL
75905: AND
75906: PUSH
75907: LD_VAR 0 5
75911: PUSH
75912: LD_VAR 0 1
75916: PPUSH
75917: CALL_OW 437
75921: PUSH
75922: LD_INT 1
75924: ARRAY
75925: PUSH
75926: LD_INT 3
75928: ARRAY
75929: EQUAL
75930: AND
75931: IFFALSE 75941
// result := true end ;
75933: LD_ADDR_VAR 0 3
75937: PUSH
75938: LD_INT 1
75940: ST_TO_ADDR
// end ;
75941: LD_VAR 0 3
75945: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75946: LD_INT 0
75948: PPUSH
// result := false ;
75949: LD_ADDR_VAR 0 4
75953: PUSH
75954: LD_INT 0
75956: ST_TO_ADDR
// if GetTaskList ( unit ) then
75957: LD_VAR 0 1
75961: PPUSH
75962: CALL_OW 437
75966: IFFALSE 76049
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75968: LD_STRING M
75970: PUSH
75971: LD_VAR 0 1
75975: PPUSH
75976: CALL_OW 437
75980: PUSH
75981: LD_INT 1
75983: ARRAY
75984: PUSH
75985: LD_INT 1
75987: ARRAY
75988: EQUAL
75989: PUSH
75990: LD_VAR 0 2
75994: PUSH
75995: LD_VAR 0 1
75999: PPUSH
76000: CALL_OW 437
76004: PUSH
76005: LD_INT 1
76007: ARRAY
76008: PUSH
76009: LD_INT 2
76011: ARRAY
76012: EQUAL
76013: AND
76014: PUSH
76015: LD_VAR 0 3
76019: PUSH
76020: LD_VAR 0 1
76024: PPUSH
76025: CALL_OW 437
76029: PUSH
76030: LD_INT 1
76032: ARRAY
76033: PUSH
76034: LD_INT 3
76036: ARRAY
76037: EQUAL
76038: AND
76039: IFFALSE 76049
// result := true ;
76041: LD_ADDR_VAR 0 4
76045: PUSH
76046: LD_INT 1
76048: ST_TO_ADDR
// end ; end ;
76049: LD_VAR 0 4
76053: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76054: LD_INT 0
76056: PPUSH
76057: PPUSH
76058: PPUSH
76059: PPUSH
// if not unit or not area then
76060: LD_VAR 0 1
76064: NOT
76065: PUSH
76066: LD_VAR 0 2
76070: NOT
76071: OR
76072: IFFALSE 76076
// exit ;
76074: GO 76252
// tmp := AreaToList ( area , i ) ;
76076: LD_ADDR_VAR 0 6
76080: PUSH
76081: LD_VAR 0 2
76085: PPUSH
76086: LD_VAR 0 5
76090: PPUSH
76091: CALL_OW 517
76095: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76096: LD_ADDR_VAR 0 5
76100: PUSH
76101: DOUBLE
76102: LD_INT 1
76104: DEC
76105: ST_TO_ADDR
76106: LD_VAR 0 6
76110: PUSH
76111: LD_INT 1
76113: ARRAY
76114: PUSH
76115: FOR_TO
76116: IFFALSE 76250
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76118: LD_ADDR_VAR 0 7
76122: PUSH
76123: LD_VAR 0 6
76127: PUSH
76128: LD_INT 1
76130: ARRAY
76131: PUSH
76132: LD_VAR 0 5
76136: ARRAY
76137: PUSH
76138: LD_VAR 0 6
76142: PUSH
76143: LD_INT 2
76145: ARRAY
76146: PUSH
76147: LD_VAR 0 5
76151: ARRAY
76152: PUSH
76153: EMPTY
76154: LIST
76155: LIST
76156: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
76157: LD_INT 92
76159: PUSH
76160: LD_VAR 0 7
76164: PUSH
76165: LD_INT 1
76167: ARRAY
76168: PUSH
76169: LD_VAR 0 7
76173: PUSH
76174: LD_INT 2
76176: ARRAY
76177: PUSH
76178: LD_INT 2
76180: PUSH
76181: EMPTY
76182: LIST
76183: LIST
76184: LIST
76185: LIST
76186: PPUSH
76187: CALL_OW 69
76191: PUSH
76192: LD_INT 0
76194: EQUAL
76195: IFFALSE 76248
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
76197: LD_VAR 0 1
76201: PPUSH
76202: LD_VAR 0 7
76206: PUSH
76207: LD_INT 1
76209: ARRAY
76210: PPUSH
76211: LD_VAR 0 7
76215: PUSH
76216: LD_INT 2
76218: ARRAY
76219: PPUSH
76220: LD_VAR 0 3
76224: PPUSH
76225: CALL_OW 48
// result := IsPlaced ( unit ) ;
76229: LD_ADDR_VAR 0 4
76233: PUSH
76234: LD_VAR 0 1
76238: PPUSH
76239: CALL_OW 305
76243: ST_TO_ADDR
// exit ;
76244: POP
76245: POP
76246: GO 76252
// end ; end ;
76248: GO 76115
76250: POP
76251: POP
// end ;
76252: LD_VAR 0 4
76256: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76257: LD_INT 0
76259: PPUSH
76260: PPUSH
76261: PPUSH
// if not side or side > 8 then
76262: LD_VAR 0 1
76266: NOT
76267: PUSH
76268: LD_VAR 0 1
76272: PUSH
76273: LD_INT 8
76275: GREATER
76276: OR
76277: IFFALSE 76281
// exit ;
76279: GO 76468
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76281: LD_ADDR_VAR 0 4
76285: PUSH
76286: LD_INT 22
76288: PUSH
76289: LD_VAR 0 1
76293: PUSH
76294: EMPTY
76295: LIST
76296: LIST
76297: PUSH
76298: LD_INT 21
76300: PUSH
76301: LD_INT 3
76303: PUSH
76304: EMPTY
76305: LIST
76306: LIST
76307: PUSH
76308: EMPTY
76309: LIST
76310: LIST
76311: PPUSH
76312: CALL_OW 69
76316: ST_TO_ADDR
// if not tmp then
76317: LD_VAR 0 4
76321: NOT
76322: IFFALSE 76326
// exit ;
76324: GO 76468
// enable_addtolog := true ;
76326: LD_ADDR_OWVAR 81
76330: PUSH
76331: LD_INT 1
76333: ST_TO_ADDR
// AddToLog ( [ ) ;
76334: LD_STRING [
76336: PPUSH
76337: CALL_OW 561
// for i in tmp do
76341: LD_ADDR_VAR 0 3
76345: PUSH
76346: LD_VAR 0 4
76350: PUSH
76351: FOR_IN
76352: IFFALSE 76459
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76354: LD_STRING [
76356: PUSH
76357: LD_VAR 0 3
76361: PPUSH
76362: CALL_OW 266
76366: STR
76367: PUSH
76368: LD_STRING , 
76370: STR
76371: PUSH
76372: LD_VAR 0 3
76376: PPUSH
76377: CALL_OW 250
76381: STR
76382: PUSH
76383: LD_STRING , 
76385: STR
76386: PUSH
76387: LD_VAR 0 3
76391: PPUSH
76392: CALL_OW 251
76396: STR
76397: PUSH
76398: LD_STRING , 
76400: STR
76401: PUSH
76402: LD_VAR 0 3
76406: PPUSH
76407: CALL_OW 254
76411: STR
76412: PUSH
76413: LD_STRING , 
76415: STR
76416: PUSH
76417: LD_VAR 0 3
76421: PPUSH
76422: LD_INT 1
76424: PPUSH
76425: CALL_OW 268
76429: STR
76430: PUSH
76431: LD_STRING , 
76433: STR
76434: PUSH
76435: LD_VAR 0 3
76439: PPUSH
76440: LD_INT 2
76442: PPUSH
76443: CALL_OW 268
76447: STR
76448: PUSH
76449: LD_STRING ],
76451: STR
76452: PPUSH
76453: CALL_OW 561
// end ;
76457: GO 76351
76459: POP
76460: POP
// AddToLog ( ]; ) ;
76461: LD_STRING ];
76463: PPUSH
76464: CALL_OW 561
// end ;
76468: LD_VAR 0 2
76472: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76473: LD_INT 0
76475: PPUSH
76476: PPUSH
76477: PPUSH
76478: PPUSH
76479: PPUSH
// if not area or not rate or not max then
76480: LD_VAR 0 1
76484: NOT
76485: PUSH
76486: LD_VAR 0 2
76490: NOT
76491: OR
76492: PUSH
76493: LD_VAR 0 4
76497: NOT
76498: OR
76499: IFFALSE 76503
// exit ;
76501: GO 76692
// while 1 do
76503: LD_INT 1
76505: IFFALSE 76692
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76507: LD_ADDR_VAR 0 9
76511: PUSH
76512: LD_VAR 0 1
76516: PPUSH
76517: LD_INT 1
76519: PPUSH
76520: CALL_OW 287
76524: PUSH
76525: LD_INT 10
76527: MUL
76528: ST_TO_ADDR
// r := rate / 10 ;
76529: LD_ADDR_VAR 0 7
76533: PUSH
76534: LD_VAR 0 2
76538: PUSH
76539: LD_INT 10
76541: DIVREAL
76542: ST_TO_ADDR
// time := 1 1$00 ;
76543: LD_ADDR_VAR 0 8
76547: PUSH
76548: LD_INT 2100
76550: ST_TO_ADDR
// if amount < min then
76551: LD_VAR 0 9
76555: PUSH
76556: LD_VAR 0 3
76560: LESS
76561: IFFALSE 76579
// r := r * 2 else
76563: LD_ADDR_VAR 0 7
76567: PUSH
76568: LD_VAR 0 7
76572: PUSH
76573: LD_INT 2
76575: MUL
76576: ST_TO_ADDR
76577: GO 76605
// if amount > max then
76579: LD_VAR 0 9
76583: PUSH
76584: LD_VAR 0 4
76588: GREATER
76589: IFFALSE 76605
// r := r / 2 ;
76591: LD_ADDR_VAR 0 7
76595: PUSH
76596: LD_VAR 0 7
76600: PUSH
76601: LD_INT 2
76603: DIVREAL
76604: ST_TO_ADDR
// time := time / r ;
76605: LD_ADDR_VAR 0 8
76609: PUSH
76610: LD_VAR 0 8
76614: PUSH
76615: LD_VAR 0 7
76619: DIVREAL
76620: ST_TO_ADDR
// if time < 0 then
76621: LD_VAR 0 8
76625: PUSH
76626: LD_INT 0
76628: LESS
76629: IFFALSE 76646
// time := time * - 1 ;
76631: LD_ADDR_VAR 0 8
76635: PUSH
76636: LD_VAR 0 8
76640: PUSH
76641: LD_INT 1
76643: NEG
76644: MUL
76645: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76646: LD_VAR 0 8
76650: PUSH
76651: LD_INT 35
76653: PPUSH
76654: LD_INT 875
76656: PPUSH
76657: CALL_OW 12
76661: PLUS
76662: PPUSH
76663: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76667: LD_INT 1
76669: PPUSH
76670: LD_INT 5
76672: PPUSH
76673: CALL_OW 12
76677: PPUSH
76678: LD_VAR 0 1
76682: PPUSH
76683: LD_INT 1
76685: PPUSH
76686: CALL_OW 55
// end ;
76690: GO 76503
// end ;
76692: LD_VAR 0 5
76696: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76697: LD_INT 0
76699: PPUSH
76700: PPUSH
76701: PPUSH
76702: PPUSH
76703: PPUSH
76704: PPUSH
76705: PPUSH
76706: PPUSH
// if not turrets or not factories then
76707: LD_VAR 0 1
76711: NOT
76712: PUSH
76713: LD_VAR 0 2
76717: NOT
76718: OR
76719: IFFALSE 76723
// exit ;
76721: GO 77030
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76723: LD_ADDR_VAR 0 10
76727: PUSH
76728: LD_INT 5
76730: PUSH
76731: LD_INT 6
76733: PUSH
76734: EMPTY
76735: LIST
76736: LIST
76737: PUSH
76738: LD_INT 2
76740: PUSH
76741: LD_INT 4
76743: PUSH
76744: EMPTY
76745: LIST
76746: LIST
76747: PUSH
76748: LD_INT 3
76750: PUSH
76751: LD_INT 5
76753: PUSH
76754: EMPTY
76755: LIST
76756: LIST
76757: PUSH
76758: EMPTY
76759: LIST
76760: LIST
76761: LIST
76762: PUSH
76763: LD_INT 24
76765: PUSH
76766: LD_INT 25
76768: PUSH
76769: EMPTY
76770: LIST
76771: LIST
76772: PUSH
76773: LD_INT 23
76775: PUSH
76776: LD_INT 27
76778: PUSH
76779: EMPTY
76780: LIST
76781: LIST
76782: PUSH
76783: EMPTY
76784: LIST
76785: LIST
76786: PUSH
76787: LD_INT 42
76789: PUSH
76790: LD_INT 43
76792: PUSH
76793: EMPTY
76794: LIST
76795: LIST
76796: PUSH
76797: LD_INT 44
76799: PUSH
76800: LD_INT 46
76802: PUSH
76803: EMPTY
76804: LIST
76805: LIST
76806: PUSH
76807: LD_INT 45
76809: PUSH
76810: LD_INT 47
76812: PUSH
76813: EMPTY
76814: LIST
76815: LIST
76816: PUSH
76817: EMPTY
76818: LIST
76819: LIST
76820: LIST
76821: PUSH
76822: EMPTY
76823: LIST
76824: LIST
76825: LIST
76826: ST_TO_ADDR
// result := [ ] ;
76827: LD_ADDR_VAR 0 3
76831: PUSH
76832: EMPTY
76833: ST_TO_ADDR
// for i in turrets do
76834: LD_ADDR_VAR 0 4
76838: PUSH
76839: LD_VAR 0 1
76843: PUSH
76844: FOR_IN
76845: IFFALSE 77028
// begin nat := GetNation ( i ) ;
76847: LD_ADDR_VAR 0 7
76851: PUSH
76852: LD_VAR 0 4
76856: PPUSH
76857: CALL_OW 248
76861: ST_TO_ADDR
// weapon := 0 ;
76862: LD_ADDR_VAR 0 8
76866: PUSH
76867: LD_INT 0
76869: ST_TO_ADDR
// if not nat then
76870: LD_VAR 0 7
76874: NOT
76875: IFFALSE 76879
// continue ;
76877: GO 76844
// for j in list [ nat ] do
76879: LD_ADDR_VAR 0 5
76883: PUSH
76884: LD_VAR 0 10
76888: PUSH
76889: LD_VAR 0 7
76893: ARRAY
76894: PUSH
76895: FOR_IN
76896: IFFALSE 76937
// if GetBWeapon ( i ) = j [ 1 ] then
76898: LD_VAR 0 4
76902: PPUSH
76903: CALL_OW 269
76907: PUSH
76908: LD_VAR 0 5
76912: PUSH
76913: LD_INT 1
76915: ARRAY
76916: EQUAL
76917: IFFALSE 76935
// begin weapon := j [ 2 ] ;
76919: LD_ADDR_VAR 0 8
76923: PUSH
76924: LD_VAR 0 5
76928: PUSH
76929: LD_INT 2
76931: ARRAY
76932: ST_TO_ADDR
// break ;
76933: GO 76937
// end ;
76935: GO 76895
76937: POP
76938: POP
// if not weapon then
76939: LD_VAR 0 8
76943: NOT
76944: IFFALSE 76948
// continue ;
76946: GO 76844
// for k in factories do
76948: LD_ADDR_VAR 0 6
76952: PUSH
76953: LD_VAR 0 2
76957: PUSH
76958: FOR_IN
76959: IFFALSE 77024
// begin weapons := AvailableWeaponList ( k ) ;
76961: LD_ADDR_VAR 0 9
76965: PUSH
76966: LD_VAR 0 6
76970: PPUSH
76971: CALL_OW 478
76975: ST_TO_ADDR
// if not weapons then
76976: LD_VAR 0 9
76980: NOT
76981: IFFALSE 76985
// continue ;
76983: GO 76958
// if weapon in weapons then
76985: LD_VAR 0 8
76989: PUSH
76990: LD_VAR 0 9
76994: IN
76995: IFFALSE 77022
// begin result := [ i , weapon ] ;
76997: LD_ADDR_VAR 0 3
77001: PUSH
77002: LD_VAR 0 4
77006: PUSH
77007: LD_VAR 0 8
77011: PUSH
77012: EMPTY
77013: LIST
77014: LIST
77015: ST_TO_ADDR
// exit ;
77016: POP
77017: POP
77018: POP
77019: POP
77020: GO 77030
// end ; end ;
77022: GO 76958
77024: POP
77025: POP
// end ;
77026: GO 76844
77028: POP
77029: POP
// end ;
77030: LD_VAR 0 3
77034: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77035: LD_INT 0
77037: PPUSH
// if not side or side > 8 then
77038: LD_VAR 0 3
77042: NOT
77043: PUSH
77044: LD_VAR 0 3
77048: PUSH
77049: LD_INT 8
77051: GREATER
77052: OR
77053: IFFALSE 77057
// exit ;
77055: GO 77116
// if not range then
77057: LD_VAR 0 4
77061: NOT
77062: IFFALSE 77073
// range := - 12 ;
77064: LD_ADDR_VAR 0 4
77068: PUSH
77069: LD_INT 12
77071: NEG
77072: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77073: LD_VAR 0 1
77077: PPUSH
77078: LD_VAR 0 2
77082: PPUSH
77083: LD_VAR 0 3
77087: PPUSH
77088: LD_VAR 0 4
77092: PPUSH
77093: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
77097: LD_VAR 0 1
77101: PPUSH
77102: LD_VAR 0 2
77106: PPUSH
77107: LD_VAR 0 3
77111: PPUSH
77112: CALL_OW 331
// end ;
77116: LD_VAR 0 5
77120: RET
// export function Video ( mode ) ; begin
77121: LD_INT 0
77123: PPUSH
// ingame_video = mode ;
77124: LD_ADDR_OWVAR 52
77128: PUSH
77129: LD_VAR 0 1
77133: ST_TO_ADDR
// interface_hidden = mode ;
77134: LD_ADDR_OWVAR 54
77138: PUSH
77139: LD_VAR 0 1
77143: ST_TO_ADDR
// end ;
77144: LD_VAR 0 2
77148: RET
// export function Join ( array , element ) ; begin
77149: LD_INT 0
77151: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77152: LD_ADDR_VAR 0 3
77156: PUSH
77157: LD_VAR 0 1
77161: PPUSH
77162: LD_VAR 0 1
77166: PUSH
77167: LD_INT 1
77169: PLUS
77170: PPUSH
77171: LD_VAR 0 2
77175: PPUSH
77176: CALL_OW 1
77180: ST_TO_ADDR
// end ;
77181: LD_VAR 0 3
77185: RET
// export function JoinUnion ( array , element ) ; begin
77186: LD_INT 0
77188: PPUSH
// result := array union element ;
77189: LD_ADDR_VAR 0 3
77193: PUSH
77194: LD_VAR 0 1
77198: PUSH
77199: LD_VAR 0 2
77203: UNION
77204: ST_TO_ADDR
// end ;
77205: LD_VAR 0 3
77209: RET
// export function GetBehemoths ( side ) ; begin
77210: LD_INT 0
77212: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
77213: LD_ADDR_VAR 0 2
77217: PUSH
77218: LD_INT 22
77220: PUSH
77221: LD_VAR 0 1
77225: PUSH
77226: EMPTY
77227: LIST
77228: LIST
77229: PUSH
77230: LD_INT 31
77232: PUSH
77233: LD_INT 25
77235: PUSH
77236: EMPTY
77237: LIST
77238: LIST
77239: PUSH
77240: EMPTY
77241: LIST
77242: LIST
77243: PPUSH
77244: CALL_OW 69
77248: ST_TO_ADDR
// end ;
77249: LD_VAR 0 2
77253: RET
// export function Shuffle ( array ) ; var i , index ; begin
77254: LD_INT 0
77256: PPUSH
77257: PPUSH
77258: PPUSH
// result := [ ] ;
77259: LD_ADDR_VAR 0 2
77263: PUSH
77264: EMPTY
77265: ST_TO_ADDR
// if not array then
77266: LD_VAR 0 1
77270: NOT
77271: IFFALSE 77275
// exit ;
77273: GO 77374
// Randomize ;
77275: CALL_OW 10
// for i = array downto 1 do
77279: LD_ADDR_VAR 0 3
77283: PUSH
77284: DOUBLE
77285: LD_VAR 0 1
77289: INC
77290: ST_TO_ADDR
77291: LD_INT 1
77293: PUSH
77294: FOR_DOWNTO
77295: IFFALSE 77372
// begin index := rand ( 1 , array ) ;
77297: LD_ADDR_VAR 0 4
77301: PUSH
77302: LD_INT 1
77304: PPUSH
77305: LD_VAR 0 1
77309: PPUSH
77310: CALL_OW 12
77314: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77315: LD_ADDR_VAR 0 2
77319: PUSH
77320: LD_VAR 0 2
77324: PPUSH
77325: LD_VAR 0 2
77329: PUSH
77330: LD_INT 1
77332: PLUS
77333: PPUSH
77334: LD_VAR 0 1
77338: PUSH
77339: LD_VAR 0 4
77343: ARRAY
77344: PPUSH
77345: CALL_OW 2
77349: ST_TO_ADDR
// array := Delete ( array , index ) ;
77350: LD_ADDR_VAR 0 1
77354: PUSH
77355: LD_VAR 0 1
77359: PPUSH
77360: LD_VAR 0 4
77364: PPUSH
77365: CALL_OW 3
77369: ST_TO_ADDR
// end ;
77370: GO 77294
77372: POP
77373: POP
// end ;
77374: LD_VAR 0 2
77378: RET
// export function GetBaseMaterials ( base ) ; begin
77379: LD_INT 0
77381: PPUSH
// result := [ 0 , 0 , 0 ] ;
77382: LD_ADDR_VAR 0 2
77386: PUSH
77387: LD_INT 0
77389: PUSH
77390: LD_INT 0
77392: PUSH
77393: LD_INT 0
77395: PUSH
77396: EMPTY
77397: LIST
77398: LIST
77399: LIST
77400: ST_TO_ADDR
// if not base then
77401: LD_VAR 0 1
77405: NOT
77406: IFFALSE 77410
// exit ;
77408: GO 77459
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77410: LD_ADDR_VAR 0 2
77414: PUSH
77415: LD_VAR 0 1
77419: PPUSH
77420: LD_INT 1
77422: PPUSH
77423: CALL_OW 275
77427: PUSH
77428: LD_VAR 0 1
77432: PPUSH
77433: LD_INT 2
77435: PPUSH
77436: CALL_OW 275
77440: PUSH
77441: LD_VAR 0 1
77445: PPUSH
77446: LD_INT 3
77448: PPUSH
77449: CALL_OW 275
77453: PUSH
77454: EMPTY
77455: LIST
77456: LIST
77457: LIST
77458: ST_TO_ADDR
// end ;
77459: LD_VAR 0 2
77463: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77464: LD_INT 0
77466: PPUSH
77467: PPUSH
// result := array ;
77468: LD_ADDR_VAR 0 3
77472: PUSH
77473: LD_VAR 0 1
77477: ST_TO_ADDR
// if size >= result then
77478: LD_VAR 0 2
77482: PUSH
77483: LD_VAR 0 3
77487: GREATEREQUAL
77488: IFFALSE 77492
// exit ;
77490: GO 77542
// if size then
77492: LD_VAR 0 2
77496: IFFALSE 77542
// for i := array downto size do
77498: LD_ADDR_VAR 0 4
77502: PUSH
77503: DOUBLE
77504: LD_VAR 0 1
77508: INC
77509: ST_TO_ADDR
77510: LD_VAR 0 2
77514: PUSH
77515: FOR_DOWNTO
77516: IFFALSE 77540
// result := Delete ( result , result ) ;
77518: LD_ADDR_VAR 0 3
77522: PUSH
77523: LD_VAR 0 3
77527: PPUSH
77528: LD_VAR 0 3
77532: PPUSH
77533: CALL_OW 3
77537: ST_TO_ADDR
77538: GO 77515
77540: POP
77541: POP
// end ;
77542: LD_VAR 0 3
77546: RET
// export function ComExit ( unit ) ; var tmp ; begin
77547: LD_INT 0
77549: PPUSH
77550: PPUSH
// if not IsInUnit ( unit ) then
77551: LD_VAR 0 1
77555: PPUSH
77556: CALL_OW 310
77560: NOT
77561: IFFALSE 77565
// exit ;
77563: GO 77625
// tmp := IsInUnit ( unit ) ;
77565: LD_ADDR_VAR 0 3
77569: PUSH
77570: LD_VAR 0 1
77574: PPUSH
77575: CALL_OW 310
77579: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77580: LD_VAR 0 3
77584: PPUSH
77585: CALL_OW 247
77589: PUSH
77590: LD_INT 2
77592: EQUAL
77593: IFFALSE 77606
// ComExitVehicle ( unit ) else
77595: LD_VAR 0 1
77599: PPUSH
77600: CALL_OW 121
77604: GO 77615
// ComExitBuilding ( unit ) ;
77606: LD_VAR 0 1
77610: PPUSH
77611: CALL_OW 122
// result := tmp ;
77615: LD_ADDR_VAR 0 2
77619: PUSH
77620: LD_VAR 0 3
77624: ST_TO_ADDR
// end ;
77625: LD_VAR 0 2
77629: RET
// export function ComExitAll ( units ) ; var i ; begin
77630: LD_INT 0
77632: PPUSH
77633: PPUSH
// if not units then
77634: LD_VAR 0 1
77638: NOT
77639: IFFALSE 77643
// exit ;
77641: GO 77669
// for i in units do
77643: LD_ADDR_VAR 0 3
77647: PUSH
77648: LD_VAR 0 1
77652: PUSH
77653: FOR_IN
77654: IFFALSE 77667
// ComExit ( i ) ;
77656: LD_VAR 0 3
77660: PPUSH
77661: CALL 77547 0 1
77665: GO 77653
77667: POP
77668: POP
// end ;
77669: LD_VAR 0 2
77673: RET
// export function ResetHc ; begin
77674: LD_INT 0
77676: PPUSH
// InitHc ;
77677: CALL_OW 19
// hc_importance := 0 ;
77681: LD_ADDR_OWVAR 32
77685: PUSH
77686: LD_INT 0
77688: ST_TO_ADDR
// end ;
77689: LD_VAR 0 1
77693: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77694: LD_INT 0
77696: PPUSH
77697: PPUSH
77698: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77699: LD_ADDR_VAR 0 6
77703: PUSH
77704: LD_VAR 0 1
77708: PUSH
77709: LD_VAR 0 3
77713: PLUS
77714: PUSH
77715: LD_INT 2
77717: DIV
77718: ST_TO_ADDR
// if _x < 0 then
77719: LD_VAR 0 6
77723: PUSH
77724: LD_INT 0
77726: LESS
77727: IFFALSE 77744
// _x := _x * - 1 ;
77729: LD_ADDR_VAR 0 6
77733: PUSH
77734: LD_VAR 0 6
77738: PUSH
77739: LD_INT 1
77741: NEG
77742: MUL
77743: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77744: LD_ADDR_VAR 0 7
77748: PUSH
77749: LD_VAR 0 2
77753: PUSH
77754: LD_VAR 0 4
77758: PLUS
77759: PUSH
77760: LD_INT 2
77762: DIV
77763: ST_TO_ADDR
// if _y < 0 then
77764: LD_VAR 0 7
77768: PUSH
77769: LD_INT 0
77771: LESS
77772: IFFALSE 77789
// _y := _y * - 1 ;
77774: LD_ADDR_VAR 0 7
77778: PUSH
77779: LD_VAR 0 7
77783: PUSH
77784: LD_INT 1
77786: NEG
77787: MUL
77788: ST_TO_ADDR
// result := [ _x , _y ] ;
77789: LD_ADDR_VAR 0 5
77793: PUSH
77794: LD_VAR 0 6
77798: PUSH
77799: LD_VAR 0 7
77803: PUSH
77804: EMPTY
77805: LIST
77806: LIST
77807: ST_TO_ADDR
// end ;
77808: LD_VAR 0 5
77812: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77813: LD_INT 0
77815: PPUSH
77816: PPUSH
77817: PPUSH
77818: PPUSH
// task := GetTaskList ( unit ) ;
77819: LD_ADDR_VAR 0 7
77823: PUSH
77824: LD_VAR 0 1
77828: PPUSH
77829: CALL_OW 437
77833: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77834: LD_VAR 0 7
77838: NOT
77839: PUSH
77840: LD_VAR 0 1
77844: PPUSH
77845: LD_VAR 0 2
77849: PPUSH
77850: CALL_OW 308
77854: NOT
77855: AND
77856: IFFALSE 77860
// exit ;
77858: GO 77978
// if IsInArea ( unit , area ) then
77860: LD_VAR 0 1
77864: PPUSH
77865: LD_VAR 0 2
77869: PPUSH
77870: CALL_OW 308
77874: IFFALSE 77892
// begin ComMoveToArea ( unit , goAway ) ;
77876: LD_VAR 0 1
77880: PPUSH
77881: LD_VAR 0 3
77885: PPUSH
77886: CALL_OW 113
// exit ;
77890: GO 77978
// end ; if task [ 1 ] [ 1 ] <> M then
77892: LD_VAR 0 7
77896: PUSH
77897: LD_INT 1
77899: ARRAY
77900: PUSH
77901: LD_INT 1
77903: ARRAY
77904: PUSH
77905: LD_STRING M
77907: NONEQUAL
77908: IFFALSE 77912
// exit ;
77910: GO 77978
// x := task [ 1 ] [ 2 ] ;
77912: LD_ADDR_VAR 0 5
77916: PUSH
77917: LD_VAR 0 7
77921: PUSH
77922: LD_INT 1
77924: ARRAY
77925: PUSH
77926: LD_INT 2
77928: ARRAY
77929: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77930: LD_ADDR_VAR 0 6
77934: PUSH
77935: LD_VAR 0 7
77939: PUSH
77940: LD_INT 1
77942: ARRAY
77943: PUSH
77944: LD_INT 3
77946: ARRAY
77947: ST_TO_ADDR
// if InArea ( x , y , area ) then
77948: LD_VAR 0 5
77952: PPUSH
77953: LD_VAR 0 6
77957: PPUSH
77958: LD_VAR 0 2
77962: PPUSH
77963: CALL_OW 309
77967: IFFALSE 77978
// ComStop ( unit ) ;
77969: LD_VAR 0 1
77973: PPUSH
77974: CALL_OW 141
// end ;
77978: LD_VAR 0 4
77982: RET
// export function Abs ( value ) ; begin
77983: LD_INT 0
77985: PPUSH
// result := value ;
77986: LD_ADDR_VAR 0 2
77990: PUSH
77991: LD_VAR 0 1
77995: ST_TO_ADDR
// if value < 0 then
77996: LD_VAR 0 1
78000: PUSH
78001: LD_INT 0
78003: LESS
78004: IFFALSE 78021
// result := value * - 1 ;
78006: LD_ADDR_VAR 0 2
78010: PUSH
78011: LD_VAR 0 1
78015: PUSH
78016: LD_INT 1
78018: NEG
78019: MUL
78020: ST_TO_ADDR
// end ;
78021: LD_VAR 0 2
78025: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
78026: LD_INT 0
78028: PPUSH
78029: PPUSH
78030: PPUSH
78031: PPUSH
78032: PPUSH
78033: PPUSH
78034: PPUSH
78035: PPUSH
// if not unit or not building then
78036: LD_VAR 0 1
78040: NOT
78041: PUSH
78042: LD_VAR 0 2
78046: NOT
78047: OR
78048: IFFALSE 78052
// exit ;
78050: GO 78278
// x := GetX ( building ) ;
78052: LD_ADDR_VAR 0 4
78056: PUSH
78057: LD_VAR 0 2
78061: PPUSH
78062: CALL_OW 250
78066: ST_TO_ADDR
// y := GetY ( building ) ;
78067: LD_ADDR_VAR 0 6
78071: PUSH
78072: LD_VAR 0 2
78076: PPUSH
78077: CALL_OW 251
78081: ST_TO_ADDR
// d := GetDir ( building ) ;
78082: LD_ADDR_VAR 0 8
78086: PUSH
78087: LD_VAR 0 2
78091: PPUSH
78092: CALL_OW 254
78096: ST_TO_ADDR
// r := 4 ;
78097: LD_ADDR_VAR 0 9
78101: PUSH
78102: LD_INT 4
78104: ST_TO_ADDR
// for i := 1 to 5 do
78105: LD_ADDR_VAR 0 10
78109: PUSH
78110: DOUBLE
78111: LD_INT 1
78113: DEC
78114: ST_TO_ADDR
78115: LD_INT 5
78117: PUSH
78118: FOR_TO
78119: IFFALSE 78276
// begin _x := ShiftX ( x , d , r + i ) ;
78121: LD_ADDR_VAR 0 5
78125: PUSH
78126: LD_VAR 0 4
78130: PPUSH
78131: LD_VAR 0 8
78135: PPUSH
78136: LD_VAR 0 9
78140: PUSH
78141: LD_VAR 0 10
78145: PLUS
78146: PPUSH
78147: CALL_OW 272
78151: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78152: LD_ADDR_VAR 0 7
78156: PUSH
78157: LD_VAR 0 6
78161: PPUSH
78162: LD_VAR 0 8
78166: PPUSH
78167: LD_VAR 0 9
78171: PUSH
78172: LD_VAR 0 10
78176: PLUS
78177: PPUSH
78178: CALL_OW 273
78182: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78183: LD_VAR 0 5
78187: PPUSH
78188: LD_VAR 0 7
78192: PPUSH
78193: CALL_OW 488
78197: PUSH
78198: LD_VAR 0 5
78202: PPUSH
78203: LD_VAR 0 7
78207: PPUSH
78208: CALL_OW 428
78212: PPUSH
78213: CALL_OW 247
78217: PUSH
78218: LD_INT 3
78220: PUSH
78221: LD_INT 2
78223: PUSH
78224: EMPTY
78225: LIST
78226: LIST
78227: IN
78228: NOT
78229: AND
78230: IFFALSE 78274
// begin ComMoveXY ( unit , _x , _y ) ;
78232: LD_VAR 0 1
78236: PPUSH
78237: LD_VAR 0 5
78241: PPUSH
78242: LD_VAR 0 7
78246: PPUSH
78247: CALL_OW 111
// result := [ _x , _y ] ;
78251: LD_ADDR_VAR 0 3
78255: PUSH
78256: LD_VAR 0 5
78260: PUSH
78261: LD_VAR 0 7
78265: PUSH
78266: EMPTY
78267: LIST
78268: LIST
78269: ST_TO_ADDR
// exit ;
78270: POP
78271: POP
78272: GO 78278
// end ; end ;
78274: GO 78118
78276: POP
78277: POP
// end ;
78278: LD_VAR 0 3
78282: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78283: LD_INT 0
78285: PPUSH
78286: PPUSH
78287: PPUSH
// result := 0 ;
78288: LD_ADDR_VAR 0 3
78292: PUSH
78293: LD_INT 0
78295: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78296: LD_VAR 0 1
78300: PUSH
78301: LD_INT 0
78303: LESS
78304: PUSH
78305: LD_VAR 0 1
78309: PUSH
78310: LD_INT 8
78312: GREATER
78313: OR
78314: PUSH
78315: LD_VAR 0 2
78319: PUSH
78320: LD_INT 0
78322: LESS
78323: OR
78324: PUSH
78325: LD_VAR 0 2
78329: PUSH
78330: LD_INT 8
78332: GREATER
78333: OR
78334: IFFALSE 78338
// exit ;
78336: GO 78413
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78338: LD_ADDR_VAR 0 4
78342: PUSH
78343: LD_INT 22
78345: PUSH
78346: LD_VAR 0 2
78350: PUSH
78351: EMPTY
78352: LIST
78353: LIST
78354: PPUSH
78355: CALL_OW 69
78359: PUSH
78360: FOR_IN
78361: IFFALSE 78411
// begin un := UnitShoot ( i ) ;
78363: LD_ADDR_VAR 0 5
78367: PUSH
78368: LD_VAR 0 4
78372: PPUSH
78373: CALL_OW 504
78377: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78378: LD_VAR 0 5
78382: PPUSH
78383: CALL_OW 255
78387: PUSH
78388: LD_VAR 0 1
78392: EQUAL
78393: IFFALSE 78409
// begin result := un ;
78395: LD_ADDR_VAR 0 3
78399: PUSH
78400: LD_VAR 0 5
78404: ST_TO_ADDR
// exit ;
78405: POP
78406: POP
78407: GO 78413
// end ; end ;
78409: GO 78360
78411: POP
78412: POP
// end ;
78413: LD_VAR 0 3
78417: RET
// export function GetCargoBay ( units ) ; begin
78418: LD_INT 0
78420: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78421: LD_ADDR_VAR 0 2
78425: PUSH
78426: LD_VAR 0 1
78430: PPUSH
78431: LD_INT 2
78433: PUSH
78434: LD_INT 34
78436: PUSH
78437: LD_INT 12
78439: PUSH
78440: EMPTY
78441: LIST
78442: LIST
78443: PUSH
78444: LD_INT 34
78446: PUSH
78447: LD_INT 51
78449: PUSH
78450: EMPTY
78451: LIST
78452: LIST
78453: PUSH
78454: LD_INT 34
78456: PUSH
78457: LD_INT 32
78459: PUSH
78460: EMPTY
78461: LIST
78462: LIST
78463: PUSH
78464: LD_INT 34
78466: PUSH
78467: LD_INT 89
78469: PUSH
78470: EMPTY
78471: LIST
78472: LIST
78473: PUSH
78474: EMPTY
78475: LIST
78476: LIST
78477: LIST
78478: LIST
78479: LIST
78480: PPUSH
78481: CALL_OW 72
78485: ST_TO_ADDR
// end ;
78486: LD_VAR 0 2
78490: RET
// export function Negate ( value ) ; begin
78491: LD_INT 0
78493: PPUSH
// result := not value ;
78494: LD_ADDR_VAR 0 2
78498: PUSH
78499: LD_VAR 0 1
78503: NOT
78504: ST_TO_ADDR
// end ;
78505: LD_VAR 0 2
78509: RET
// export function Inc ( value ) ; begin
78510: LD_INT 0
78512: PPUSH
// result := value + 1 ;
78513: LD_ADDR_VAR 0 2
78517: PUSH
78518: LD_VAR 0 1
78522: PUSH
78523: LD_INT 1
78525: PLUS
78526: ST_TO_ADDR
// end ;
78527: LD_VAR 0 2
78531: RET
// export function Dec ( value ) ; begin
78532: LD_INT 0
78534: PPUSH
// result := value - 1 ;
78535: LD_ADDR_VAR 0 2
78539: PUSH
78540: LD_VAR 0 1
78544: PUSH
78545: LD_INT 1
78547: MINUS
78548: ST_TO_ADDR
// end ;
78549: LD_VAR 0 2
78553: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78554: LD_INT 0
78556: PPUSH
78557: PPUSH
78558: PPUSH
78559: PPUSH
78560: PPUSH
78561: PPUSH
78562: PPUSH
78563: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78564: LD_VAR 0 1
78568: PPUSH
78569: LD_VAR 0 2
78573: PPUSH
78574: CALL_OW 488
78578: NOT
78579: PUSH
78580: LD_VAR 0 3
78584: PPUSH
78585: LD_VAR 0 4
78589: PPUSH
78590: CALL_OW 488
78594: NOT
78595: OR
78596: IFFALSE 78609
// begin result := - 1 ;
78598: LD_ADDR_VAR 0 5
78602: PUSH
78603: LD_INT 1
78605: NEG
78606: ST_TO_ADDR
// exit ;
78607: GO 78844
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78609: LD_ADDR_VAR 0 12
78613: PUSH
78614: LD_VAR 0 1
78618: PPUSH
78619: LD_VAR 0 2
78623: PPUSH
78624: LD_VAR 0 3
78628: PPUSH
78629: LD_VAR 0 4
78633: PPUSH
78634: CALL 77694 0 4
78638: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78639: LD_ADDR_VAR 0 11
78643: PUSH
78644: LD_VAR 0 1
78648: PPUSH
78649: LD_VAR 0 2
78653: PPUSH
78654: LD_VAR 0 12
78658: PUSH
78659: LD_INT 1
78661: ARRAY
78662: PPUSH
78663: LD_VAR 0 12
78667: PUSH
78668: LD_INT 2
78670: ARRAY
78671: PPUSH
78672: CALL_OW 298
78676: ST_TO_ADDR
// distance := 9999 ;
78677: LD_ADDR_VAR 0 10
78681: PUSH
78682: LD_INT 9999
78684: ST_TO_ADDR
// for i := 0 to 5 do
78685: LD_ADDR_VAR 0 6
78689: PUSH
78690: DOUBLE
78691: LD_INT 0
78693: DEC
78694: ST_TO_ADDR
78695: LD_INT 5
78697: PUSH
78698: FOR_TO
78699: IFFALSE 78842
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78701: LD_ADDR_VAR 0 7
78705: PUSH
78706: LD_VAR 0 1
78710: PPUSH
78711: LD_VAR 0 6
78715: PPUSH
78716: LD_VAR 0 11
78720: PPUSH
78721: CALL_OW 272
78725: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78726: LD_ADDR_VAR 0 8
78730: PUSH
78731: LD_VAR 0 2
78735: PPUSH
78736: LD_VAR 0 6
78740: PPUSH
78741: LD_VAR 0 11
78745: PPUSH
78746: CALL_OW 273
78750: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78751: LD_VAR 0 7
78755: PPUSH
78756: LD_VAR 0 8
78760: PPUSH
78761: CALL_OW 488
78765: NOT
78766: IFFALSE 78770
// continue ;
78768: GO 78698
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78770: LD_ADDR_VAR 0 9
78774: PUSH
78775: LD_VAR 0 12
78779: PUSH
78780: LD_INT 1
78782: ARRAY
78783: PPUSH
78784: LD_VAR 0 12
78788: PUSH
78789: LD_INT 2
78791: ARRAY
78792: PPUSH
78793: LD_VAR 0 7
78797: PPUSH
78798: LD_VAR 0 8
78802: PPUSH
78803: CALL_OW 298
78807: ST_TO_ADDR
// if tmp < distance then
78808: LD_VAR 0 9
78812: PUSH
78813: LD_VAR 0 10
78817: LESS
78818: IFFALSE 78840
// begin result := i ;
78820: LD_ADDR_VAR 0 5
78824: PUSH
78825: LD_VAR 0 6
78829: ST_TO_ADDR
// distance := tmp ;
78830: LD_ADDR_VAR 0 10
78834: PUSH
78835: LD_VAR 0 9
78839: ST_TO_ADDR
// end ; end ;
78840: GO 78698
78842: POP
78843: POP
// end ;
78844: LD_VAR 0 5
78848: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78849: LD_INT 0
78851: PPUSH
78852: PPUSH
// if not driver or not IsInUnit ( driver ) then
78853: LD_VAR 0 1
78857: NOT
78858: PUSH
78859: LD_VAR 0 1
78863: PPUSH
78864: CALL_OW 310
78868: NOT
78869: OR
78870: IFFALSE 78874
// exit ;
78872: GO 78964
// vehicle := IsInUnit ( driver ) ;
78874: LD_ADDR_VAR 0 3
78878: PUSH
78879: LD_VAR 0 1
78883: PPUSH
78884: CALL_OW 310
78888: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78889: LD_VAR 0 1
78893: PPUSH
78894: LD_STRING \
78896: PUSH
78897: LD_INT 0
78899: PUSH
78900: LD_INT 0
78902: PUSH
78903: LD_INT 0
78905: PUSH
78906: LD_INT 0
78908: PUSH
78909: LD_INT 0
78911: PUSH
78912: LD_INT 0
78914: PUSH
78915: EMPTY
78916: LIST
78917: LIST
78918: LIST
78919: LIST
78920: LIST
78921: LIST
78922: LIST
78923: PUSH
78924: LD_STRING E
78926: PUSH
78927: LD_INT 0
78929: PUSH
78930: LD_INT 0
78932: PUSH
78933: LD_VAR 0 3
78937: PUSH
78938: LD_INT 0
78940: PUSH
78941: LD_INT 0
78943: PUSH
78944: LD_INT 0
78946: PUSH
78947: EMPTY
78948: LIST
78949: LIST
78950: LIST
78951: LIST
78952: LIST
78953: LIST
78954: LIST
78955: PUSH
78956: EMPTY
78957: LIST
78958: LIST
78959: PPUSH
78960: CALL_OW 446
// end ;
78964: LD_VAR 0 2
78968: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78969: LD_INT 0
78971: PPUSH
78972: PPUSH
// if not driver or not IsInUnit ( driver ) then
78973: LD_VAR 0 1
78977: NOT
78978: PUSH
78979: LD_VAR 0 1
78983: PPUSH
78984: CALL_OW 310
78988: NOT
78989: OR
78990: IFFALSE 78994
// exit ;
78992: GO 79084
// vehicle := IsInUnit ( driver ) ;
78994: LD_ADDR_VAR 0 3
78998: PUSH
78999: LD_VAR 0 1
79003: PPUSH
79004: CALL_OW 310
79008: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79009: LD_VAR 0 1
79013: PPUSH
79014: LD_STRING \
79016: PUSH
79017: LD_INT 0
79019: PUSH
79020: LD_INT 0
79022: PUSH
79023: LD_INT 0
79025: PUSH
79026: LD_INT 0
79028: PUSH
79029: LD_INT 0
79031: PUSH
79032: LD_INT 0
79034: PUSH
79035: EMPTY
79036: LIST
79037: LIST
79038: LIST
79039: LIST
79040: LIST
79041: LIST
79042: LIST
79043: PUSH
79044: LD_STRING E
79046: PUSH
79047: LD_INT 0
79049: PUSH
79050: LD_INT 0
79052: PUSH
79053: LD_VAR 0 3
79057: PUSH
79058: LD_INT 0
79060: PUSH
79061: LD_INT 0
79063: PUSH
79064: LD_INT 0
79066: PUSH
79067: EMPTY
79068: LIST
79069: LIST
79070: LIST
79071: LIST
79072: LIST
79073: LIST
79074: LIST
79075: PUSH
79076: EMPTY
79077: LIST
79078: LIST
79079: PPUSH
79080: CALL_OW 447
// end ;
79084: LD_VAR 0 2
79088: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
79089: LD_INT 0
79091: PPUSH
79092: PPUSH
79093: PPUSH
// tmp := [ ] ;
79094: LD_ADDR_VAR 0 5
79098: PUSH
79099: EMPTY
79100: ST_TO_ADDR
// for i in units do
79101: LD_ADDR_VAR 0 4
79105: PUSH
79106: LD_VAR 0 1
79110: PUSH
79111: FOR_IN
79112: IFFALSE 79150
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
79114: LD_ADDR_VAR 0 5
79118: PUSH
79119: LD_VAR 0 5
79123: PPUSH
79124: LD_VAR 0 5
79128: PUSH
79129: LD_INT 1
79131: PLUS
79132: PPUSH
79133: LD_VAR 0 4
79137: PPUSH
79138: CALL_OW 256
79142: PPUSH
79143: CALL_OW 2
79147: ST_TO_ADDR
79148: GO 79111
79150: POP
79151: POP
// if not tmp then
79152: LD_VAR 0 5
79156: NOT
79157: IFFALSE 79161
// exit ;
79159: GO 79209
// if asc then
79161: LD_VAR 0 2
79165: IFFALSE 79189
// result := SortListByListAsc ( units , tmp ) else
79167: LD_ADDR_VAR 0 3
79171: PUSH
79172: LD_VAR 0 1
79176: PPUSH
79177: LD_VAR 0 5
79181: PPUSH
79182: CALL_OW 76
79186: ST_TO_ADDR
79187: GO 79209
// result := SortListByListDesc ( units , tmp ) ;
79189: LD_ADDR_VAR 0 3
79193: PUSH
79194: LD_VAR 0 1
79198: PPUSH
79199: LD_VAR 0 5
79203: PPUSH
79204: CALL_OW 77
79208: ST_TO_ADDR
// end ;
79209: LD_VAR 0 3
79213: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79214: LD_INT 0
79216: PPUSH
79217: PPUSH
// task := GetTaskList ( mech ) ;
79218: LD_ADDR_VAR 0 4
79222: PUSH
79223: LD_VAR 0 1
79227: PPUSH
79228: CALL_OW 437
79232: ST_TO_ADDR
// if not task then
79233: LD_VAR 0 4
79237: NOT
79238: IFFALSE 79242
// exit ;
79240: GO 79284
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79242: LD_ADDR_VAR 0 3
79246: PUSH
79247: LD_VAR 0 4
79251: PUSH
79252: LD_INT 1
79254: ARRAY
79255: PUSH
79256: LD_INT 1
79258: ARRAY
79259: PUSH
79260: LD_STRING r
79262: EQUAL
79263: PUSH
79264: LD_VAR 0 4
79268: PUSH
79269: LD_INT 1
79271: ARRAY
79272: PUSH
79273: LD_INT 4
79275: ARRAY
79276: PUSH
79277: LD_VAR 0 2
79281: EQUAL
79282: AND
79283: ST_TO_ADDR
// end ;
79284: LD_VAR 0 3
79288: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79289: LD_INT 0
79291: PPUSH
// SetDir ( unit , d ) ;
79292: LD_VAR 0 1
79296: PPUSH
79297: LD_VAR 0 4
79301: PPUSH
79302: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79306: LD_VAR 0 1
79310: PPUSH
79311: LD_VAR 0 2
79315: PPUSH
79316: LD_VAR 0 3
79320: PPUSH
79321: LD_VAR 0 5
79325: PPUSH
79326: CALL_OW 48
// end ;
79330: LD_VAR 0 6
79334: RET
// export function ToNaturalNumber ( number ) ; begin
79335: LD_INT 0
79337: PPUSH
// result := number div 1 ;
79338: LD_ADDR_VAR 0 2
79342: PUSH
79343: LD_VAR 0 1
79347: PUSH
79348: LD_INT 1
79350: DIV
79351: ST_TO_ADDR
// if number < 0 then
79352: LD_VAR 0 1
79356: PUSH
79357: LD_INT 0
79359: LESS
79360: IFFALSE 79370
// result := 0 ;
79362: LD_ADDR_VAR 0 2
79366: PUSH
79367: LD_INT 0
79369: ST_TO_ADDR
// end ;
79370: LD_VAR 0 2
79374: RET
// export function SortByClass ( units , class ) ; var un ; begin
79375: LD_INT 0
79377: PPUSH
79378: PPUSH
// if not units or not class then
79379: LD_VAR 0 1
79383: NOT
79384: PUSH
79385: LD_VAR 0 2
79389: NOT
79390: OR
79391: IFFALSE 79395
// exit ;
79393: GO 79490
// result := [ ] ;
79395: LD_ADDR_VAR 0 3
79399: PUSH
79400: EMPTY
79401: ST_TO_ADDR
// for un in units do
79402: LD_ADDR_VAR 0 4
79406: PUSH
79407: LD_VAR 0 1
79411: PUSH
79412: FOR_IN
79413: IFFALSE 79488
// if GetClass ( un ) = class then
79415: LD_VAR 0 4
79419: PPUSH
79420: CALL_OW 257
79424: PUSH
79425: LD_VAR 0 2
79429: EQUAL
79430: IFFALSE 79457
// result := Insert ( result , 1 , un ) else
79432: LD_ADDR_VAR 0 3
79436: PUSH
79437: LD_VAR 0 3
79441: PPUSH
79442: LD_INT 1
79444: PPUSH
79445: LD_VAR 0 4
79449: PPUSH
79450: CALL_OW 2
79454: ST_TO_ADDR
79455: GO 79486
// result := Replace ( result , result + 1 , un ) ;
79457: LD_ADDR_VAR 0 3
79461: PUSH
79462: LD_VAR 0 3
79466: PPUSH
79467: LD_VAR 0 3
79471: PUSH
79472: LD_INT 1
79474: PLUS
79475: PPUSH
79476: LD_VAR 0 4
79480: PPUSH
79481: CALL_OW 1
79485: ST_TO_ADDR
79486: GO 79412
79488: POP
79489: POP
// end ;
79490: LD_VAR 0 3
79494: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79495: LD_INT 0
79497: PPUSH
79498: PPUSH
79499: PPUSH
79500: PPUSH
79501: PPUSH
79502: PPUSH
79503: PPUSH
// result := [ ] ;
79504: LD_ADDR_VAR 0 4
79508: PUSH
79509: EMPTY
79510: ST_TO_ADDR
// if x - r < 0 then
79511: LD_VAR 0 1
79515: PUSH
79516: LD_VAR 0 3
79520: MINUS
79521: PUSH
79522: LD_INT 0
79524: LESS
79525: IFFALSE 79537
// min_x := 0 else
79527: LD_ADDR_VAR 0 8
79531: PUSH
79532: LD_INT 0
79534: ST_TO_ADDR
79535: GO 79553
// min_x := x - r ;
79537: LD_ADDR_VAR 0 8
79541: PUSH
79542: LD_VAR 0 1
79546: PUSH
79547: LD_VAR 0 3
79551: MINUS
79552: ST_TO_ADDR
// if y - r < 0 then
79553: LD_VAR 0 2
79557: PUSH
79558: LD_VAR 0 3
79562: MINUS
79563: PUSH
79564: LD_INT 0
79566: LESS
79567: IFFALSE 79579
// min_y := 0 else
79569: LD_ADDR_VAR 0 7
79573: PUSH
79574: LD_INT 0
79576: ST_TO_ADDR
79577: GO 79595
// min_y := y - r ;
79579: LD_ADDR_VAR 0 7
79583: PUSH
79584: LD_VAR 0 2
79588: PUSH
79589: LD_VAR 0 3
79593: MINUS
79594: ST_TO_ADDR
// max_x := x + r ;
79595: LD_ADDR_VAR 0 9
79599: PUSH
79600: LD_VAR 0 1
79604: PUSH
79605: LD_VAR 0 3
79609: PLUS
79610: ST_TO_ADDR
// max_y := y + r ;
79611: LD_ADDR_VAR 0 10
79615: PUSH
79616: LD_VAR 0 2
79620: PUSH
79621: LD_VAR 0 3
79625: PLUS
79626: ST_TO_ADDR
// for _x = min_x to max_x do
79627: LD_ADDR_VAR 0 5
79631: PUSH
79632: DOUBLE
79633: LD_VAR 0 8
79637: DEC
79638: ST_TO_ADDR
79639: LD_VAR 0 9
79643: PUSH
79644: FOR_TO
79645: IFFALSE 79746
// for _y = min_y to max_y do
79647: LD_ADDR_VAR 0 6
79651: PUSH
79652: DOUBLE
79653: LD_VAR 0 7
79657: DEC
79658: ST_TO_ADDR
79659: LD_VAR 0 10
79663: PUSH
79664: FOR_TO
79665: IFFALSE 79742
// begin if not ValidHex ( _x , _y ) then
79667: LD_VAR 0 5
79671: PPUSH
79672: LD_VAR 0 6
79676: PPUSH
79677: CALL_OW 488
79681: NOT
79682: IFFALSE 79686
// continue ;
79684: GO 79664
// if GetResourceTypeXY ( _x , _y ) then
79686: LD_VAR 0 5
79690: PPUSH
79691: LD_VAR 0 6
79695: PPUSH
79696: CALL_OW 283
79700: IFFALSE 79740
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79702: LD_ADDR_VAR 0 4
79706: PUSH
79707: LD_VAR 0 4
79711: PPUSH
79712: LD_VAR 0 4
79716: PUSH
79717: LD_INT 1
79719: PLUS
79720: PPUSH
79721: LD_VAR 0 5
79725: PUSH
79726: LD_VAR 0 6
79730: PUSH
79731: EMPTY
79732: LIST
79733: LIST
79734: PPUSH
79735: CALL_OW 1
79739: ST_TO_ADDR
// end ;
79740: GO 79664
79742: POP
79743: POP
79744: GO 79644
79746: POP
79747: POP
// end ;
79748: LD_VAR 0 4
79752: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79753: LD_INT 0
79755: PPUSH
79756: PPUSH
79757: PPUSH
79758: PPUSH
79759: PPUSH
79760: PPUSH
79761: PPUSH
79762: PPUSH
// if not units then
79763: LD_VAR 0 1
79767: NOT
79768: IFFALSE 79772
// exit ;
79770: GO 80296
// result := UnitFilter ( units , [ f_ok ] ) ;
79772: LD_ADDR_VAR 0 3
79776: PUSH
79777: LD_VAR 0 1
79781: PPUSH
79782: LD_INT 50
79784: PUSH
79785: EMPTY
79786: LIST
79787: PPUSH
79788: CALL_OW 72
79792: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79793: LD_ADDR_VAR 0 8
79797: PUSH
79798: LD_VAR 0 1
79802: PUSH
79803: LD_INT 1
79805: ARRAY
79806: PPUSH
79807: CALL_OW 255
79811: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79812: LD_ADDR_VAR 0 10
79816: PUSH
79817: LD_INT 29
79819: PUSH
79820: LD_INT 91
79822: PUSH
79823: LD_INT 49
79825: PUSH
79826: EMPTY
79827: LIST
79828: LIST
79829: LIST
79830: ST_TO_ADDR
// if not result then
79831: LD_VAR 0 3
79835: NOT
79836: IFFALSE 79840
// exit ;
79838: GO 80296
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79840: LD_ADDR_VAR 0 5
79844: PUSH
79845: LD_INT 81
79847: PUSH
79848: LD_VAR 0 8
79852: PUSH
79853: EMPTY
79854: LIST
79855: LIST
79856: PPUSH
79857: CALL_OW 69
79861: ST_TO_ADDR
// for i in result do
79862: LD_ADDR_VAR 0 4
79866: PUSH
79867: LD_VAR 0 3
79871: PUSH
79872: FOR_IN
79873: IFFALSE 80294
// begin tag := GetTag ( i ) + 1 ;
79875: LD_ADDR_VAR 0 9
79879: PUSH
79880: LD_VAR 0 4
79884: PPUSH
79885: CALL_OW 110
79889: PUSH
79890: LD_INT 1
79892: PLUS
79893: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79894: LD_ADDR_VAR 0 7
79898: PUSH
79899: LD_VAR 0 4
79903: PPUSH
79904: CALL_OW 250
79908: PPUSH
79909: LD_VAR 0 4
79913: PPUSH
79914: CALL_OW 251
79918: PPUSH
79919: LD_INT 6
79921: PPUSH
79922: CALL 79495 0 3
79926: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79927: LD_VAR 0 4
79931: PPUSH
79932: CALL_OW 247
79936: PUSH
79937: LD_INT 2
79939: EQUAL
79940: PUSH
79941: LD_VAR 0 7
79945: AND
79946: PUSH
79947: LD_VAR 0 4
79951: PPUSH
79952: CALL_OW 264
79956: PUSH
79957: LD_VAR 0 10
79961: IN
79962: NOT
79963: AND
79964: IFFALSE 80003
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79966: LD_VAR 0 4
79970: PPUSH
79971: LD_VAR 0 7
79975: PUSH
79976: LD_INT 1
79978: ARRAY
79979: PUSH
79980: LD_INT 1
79982: ARRAY
79983: PPUSH
79984: LD_VAR 0 7
79988: PUSH
79989: LD_INT 1
79991: ARRAY
79992: PUSH
79993: LD_INT 2
79995: ARRAY
79996: PPUSH
79997: CALL_OW 116
80001: GO 80292
// if path > tag then
80003: LD_VAR 0 2
80007: PUSH
80008: LD_VAR 0 9
80012: GREATER
80013: IFFALSE 80221
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
80015: LD_ADDR_VAR 0 6
80019: PUSH
80020: LD_VAR 0 5
80024: PPUSH
80025: LD_INT 91
80027: PUSH
80028: LD_VAR 0 4
80032: PUSH
80033: LD_INT 8
80035: PUSH
80036: EMPTY
80037: LIST
80038: LIST
80039: LIST
80040: PPUSH
80041: CALL_OW 72
80045: ST_TO_ADDR
// if nearEnemy then
80046: LD_VAR 0 6
80050: IFFALSE 80119
// begin if GetWeapon ( i ) = ru_time_lapser then
80052: LD_VAR 0 4
80056: PPUSH
80057: CALL_OW 264
80061: PUSH
80062: LD_INT 49
80064: EQUAL
80065: IFFALSE 80093
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
80067: LD_VAR 0 4
80071: PPUSH
80072: LD_VAR 0 6
80076: PPUSH
80077: LD_VAR 0 4
80081: PPUSH
80082: CALL_OW 74
80086: PPUSH
80087: CALL_OW 112
80091: GO 80117
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
80093: LD_VAR 0 4
80097: PPUSH
80098: LD_VAR 0 6
80102: PPUSH
80103: LD_VAR 0 4
80107: PPUSH
80108: CALL_OW 74
80112: PPUSH
80113: CALL 81221 0 2
// end else
80117: GO 80219
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
80119: LD_VAR 0 4
80123: PPUSH
80124: LD_VAR 0 2
80128: PUSH
80129: LD_VAR 0 9
80133: ARRAY
80134: PUSH
80135: LD_INT 1
80137: ARRAY
80138: PPUSH
80139: LD_VAR 0 2
80143: PUSH
80144: LD_VAR 0 9
80148: ARRAY
80149: PUSH
80150: LD_INT 2
80152: ARRAY
80153: PPUSH
80154: CALL_OW 297
80158: PUSH
80159: LD_INT 6
80161: GREATER
80162: IFFALSE 80205
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
80164: LD_VAR 0 4
80168: PPUSH
80169: LD_VAR 0 2
80173: PUSH
80174: LD_VAR 0 9
80178: ARRAY
80179: PUSH
80180: LD_INT 1
80182: ARRAY
80183: PPUSH
80184: LD_VAR 0 2
80188: PUSH
80189: LD_VAR 0 9
80193: ARRAY
80194: PUSH
80195: LD_INT 2
80197: ARRAY
80198: PPUSH
80199: CALL_OW 114
80203: GO 80219
// SetTag ( i , tag ) ;
80205: LD_VAR 0 4
80209: PPUSH
80210: LD_VAR 0 9
80214: PPUSH
80215: CALL_OW 109
// end else
80219: GO 80292
// if enemy then
80221: LD_VAR 0 5
80225: IFFALSE 80292
// begin if GetWeapon ( i ) = ru_time_lapser then
80227: LD_VAR 0 4
80231: PPUSH
80232: CALL_OW 264
80236: PUSH
80237: LD_INT 49
80239: EQUAL
80240: IFFALSE 80268
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80242: LD_VAR 0 4
80246: PPUSH
80247: LD_VAR 0 5
80251: PPUSH
80252: LD_VAR 0 4
80256: PPUSH
80257: CALL_OW 74
80261: PPUSH
80262: CALL_OW 112
80266: GO 80292
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80268: LD_VAR 0 4
80272: PPUSH
80273: LD_VAR 0 5
80277: PPUSH
80278: LD_VAR 0 4
80282: PPUSH
80283: CALL_OW 74
80287: PPUSH
80288: CALL 81221 0 2
// end ; end ;
80292: GO 79872
80294: POP
80295: POP
// end ;
80296: LD_VAR 0 3
80300: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80301: LD_INT 0
80303: PPUSH
80304: PPUSH
80305: PPUSH
// if not unit or IsInUnit ( unit ) then
80306: LD_VAR 0 1
80310: NOT
80311: PUSH
80312: LD_VAR 0 1
80316: PPUSH
80317: CALL_OW 310
80321: OR
80322: IFFALSE 80326
// exit ;
80324: GO 80417
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80326: LD_ADDR_VAR 0 4
80330: PUSH
80331: LD_VAR 0 1
80335: PPUSH
80336: CALL_OW 250
80340: PPUSH
80341: LD_VAR 0 2
80345: PPUSH
80346: LD_INT 1
80348: PPUSH
80349: CALL_OW 272
80353: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80354: LD_ADDR_VAR 0 5
80358: PUSH
80359: LD_VAR 0 1
80363: PPUSH
80364: CALL_OW 251
80368: PPUSH
80369: LD_VAR 0 2
80373: PPUSH
80374: LD_INT 1
80376: PPUSH
80377: CALL_OW 273
80381: ST_TO_ADDR
// if ValidHex ( x , y ) then
80382: LD_VAR 0 4
80386: PPUSH
80387: LD_VAR 0 5
80391: PPUSH
80392: CALL_OW 488
80396: IFFALSE 80417
// ComTurnXY ( unit , x , y ) ;
80398: LD_VAR 0 1
80402: PPUSH
80403: LD_VAR 0 4
80407: PPUSH
80408: LD_VAR 0 5
80412: PPUSH
80413: CALL_OW 118
// end ;
80417: LD_VAR 0 3
80421: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80422: LD_INT 0
80424: PPUSH
80425: PPUSH
// result := false ;
80426: LD_ADDR_VAR 0 3
80430: PUSH
80431: LD_INT 0
80433: ST_TO_ADDR
// if not units then
80434: LD_VAR 0 2
80438: NOT
80439: IFFALSE 80443
// exit ;
80441: GO 80488
// for i in units do
80443: LD_ADDR_VAR 0 4
80447: PUSH
80448: LD_VAR 0 2
80452: PUSH
80453: FOR_IN
80454: IFFALSE 80486
// if See ( side , i ) then
80456: LD_VAR 0 1
80460: PPUSH
80461: LD_VAR 0 4
80465: PPUSH
80466: CALL_OW 292
80470: IFFALSE 80484
// begin result := true ;
80472: LD_ADDR_VAR 0 3
80476: PUSH
80477: LD_INT 1
80479: ST_TO_ADDR
// exit ;
80480: POP
80481: POP
80482: GO 80488
// end ;
80484: GO 80453
80486: POP
80487: POP
// end ;
80488: LD_VAR 0 3
80492: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80493: LD_INT 0
80495: PPUSH
80496: PPUSH
80497: PPUSH
80498: PPUSH
// if not unit or not points then
80499: LD_VAR 0 1
80503: NOT
80504: PUSH
80505: LD_VAR 0 2
80509: NOT
80510: OR
80511: IFFALSE 80515
// exit ;
80513: GO 80605
// dist := 99999 ;
80515: LD_ADDR_VAR 0 5
80519: PUSH
80520: LD_INT 99999
80522: ST_TO_ADDR
// for i in points do
80523: LD_ADDR_VAR 0 4
80527: PUSH
80528: LD_VAR 0 2
80532: PUSH
80533: FOR_IN
80534: IFFALSE 80603
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80536: LD_ADDR_VAR 0 6
80540: PUSH
80541: LD_VAR 0 1
80545: PPUSH
80546: LD_VAR 0 4
80550: PUSH
80551: LD_INT 1
80553: ARRAY
80554: PPUSH
80555: LD_VAR 0 4
80559: PUSH
80560: LD_INT 2
80562: ARRAY
80563: PPUSH
80564: CALL_OW 297
80568: ST_TO_ADDR
// if tmpDist < dist then
80569: LD_VAR 0 6
80573: PUSH
80574: LD_VAR 0 5
80578: LESS
80579: IFFALSE 80601
// begin result := i ;
80581: LD_ADDR_VAR 0 3
80585: PUSH
80586: LD_VAR 0 4
80590: ST_TO_ADDR
// dist := tmpDist ;
80591: LD_ADDR_VAR 0 5
80595: PUSH
80596: LD_VAR 0 6
80600: ST_TO_ADDR
// end ; end ;
80601: GO 80533
80603: POP
80604: POP
// end ;
80605: LD_VAR 0 3
80609: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80610: LD_INT 0
80612: PPUSH
// uc_side := side ;
80613: LD_ADDR_OWVAR 20
80617: PUSH
80618: LD_VAR 0 1
80622: ST_TO_ADDR
// uc_nation := 3 ;
80623: LD_ADDR_OWVAR 21
80627: PUSH
80628: LD_INT 3
80630: ST_TO_ADDR
// vc_chassis := 25 ;
80631: LD_ADDR_OWVAR 37
80635: PUSH
80636: LD_INT 25
80638: ST_TO_ADDR
// vc_engine := engine_siberite ;
80639: LD_ADDR_OWVAR 39
80643: PUSH
80644: LD_INT 3
80646: ST_TO_ADDR
// vc_control := control_computer ;
80647: LD_ADDR_OWVAR 38
80651: PUSH
80652: LD_INT 3
80654: ST_TO_ADDR
// vc_weapon := 59 ;
80655: LD_ADDR_OWVAR 40
80659: PUSH
80660: LD_INT 59
80662: ST_TO_ADDR
// result := CreateVehicle ;
80663: LD_ADDR_VAR 0 5
80667: PUSH
80668: CALL_OW 45
80672: ST_TO_ADDR
// SetDir ( result , d ) ;
80673: LD_VAR 0 5
80677: PPUSH
80678: LD_VAR 0 4
80682: PPUSH
80683: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80687: LD_VAR 0 5
80691: PPUSH
80692: LD_VAR 0 2
80696: PPUSH
80697: LD_VAR 0 3
80701: PPUSH
80702: LD_INT 0
80704: PPUSH
80705: CALL_OW 48
// end ;
80709: LD_VAR 0 5
80713: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80714: LD_INT 0
80716: PPUSH
80717: PPUSH
80718: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80719: LD_ADDR_VAR 0 2
80723: PUSH
80724: LD_INT 0
80726: PUSH
80727: LD_INT 0
80729: PUSH
80730: LD_INT 0
80732: PUSH
80733: LD_INT 0
80735: PUSH
80736: EMPTY
80737: LIST
80738: LIST
80739: LIST
80740: LIST
80741: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80742: LD_VAR 0 1
80746: NOT
80747: PUSH
80748: LD_VAR 0 1
80752: PPUSH
80753: CALL_OW 264
80757: PUSH
80758: LD_INT 12
80760: PUSH
80761: LD_INT 51
80763: PUSH
80764: LD_INT 32
80766: PUSH
80767: LD_INT 89
80769: PUSH
80770: EMPTY
80771: LIST
80772: LIST
80773: LIST
80774: LIST
80775: IN
80776: NOT
80777: OR
80778: IFFALSE 80782
// exit ;
80780: GO 80880
// for i := 1 to 3 do
80782: LD_ADDR_VAR 0 3
80786: PUSH
80787: DOUBLE
80788: LD_INT 1
80790: DEC
80791: ST_TO_ADDR
80792: LD_INT 3
80794: PUSH
80795: FOR_TO
80796: IFFALSE 80878
// begin tmp := GetCargo ( cargo , i ) ;
80798: LD_ADDR_VAR 0 4
80802: PUSH
80803: LD_VAR 0 1
80807: PPUSH
80808: LD_VAR 0 3
80812: PPUSH
80813: CALL_OW 289
80817: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80818: LD_ADDR_VAR 0 2
80822: PUSH
80823: LD_VAR 0 2
80827: PPUSH
80828: LD_VAR 0 3
80832: PPUSH
80833: LD_VAR 0 4
80837: PPUSH
80838: CALL_OW 1
80842: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80843: LD_ADDR_VAR 0 2
80847: PUSH
80848: LD_VAR 0 2
80852: PPUSH
80853: LD_INT 4
80855: PPUSH
80856: LD_VAR 0 2
80860: PUSH
80861: LD_INT 4
80863: ARRAY
80864: PUSH
80865: LD_VAR 0 4
80869: PLUS
80870: PPUSH
80871: CALL_OW 1
80875: ST_TO_ADDR
// end ;
80876: GO 80795
80878: POP
80879: POP
// end ;
80880: LD_VAR 0 2
80884: RET
// export function Length ( array ) ; begin
80885: LD_INT 0
80887: PPUSH
// result := array + 0 ;
80888: LD_ADDR_VAR 0 2
80892: PUSH
80893: LD_VAR 0 1
80897: PUSH
80898: LD_INT 0
80900: PLUS
80901: ST_TO_ADDR
// end ;
80902: LD_VAR 0 2
80906: RET
// export function PrepareArray ( array ) ; begin
80907: LD_INT 0
80909: PPUSH
// result := array diff 0 ;
80910: LD_ADDR_VAR 0 2
80914: PUSH
80915: LD_VAR 0 1
80919: PUSH
80920: LD_INT 0
80922: DIFF
80923: ST_TO_ADDR
// if not result [ 1 ] then
80924: LD_VAR 0 2
80928: PUSH
80929: LD_INT 1
80931: ARRAY
80932: NOT
80933: IFFALSE 80953
// result := Delete ( result , 1 ) ;
80935: LD_ADDR_VAR 0 2
80939: PUSH
80940: LD_VAR 0 2
80944: PPUSH
80945: LD_INT 1
80947: PPUSH
80948: CALL_OW 3
80952: ST_TO_ADDR
// end ;
80953: LD_VAR 0 2
80957: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
80958: LD_INT 0
80960: PPUSH
80961: PPUSH
80962: PPUSH
80963: PPUSH
// sibRocketRange := 25 ;
80964: LD_ADDR_VAR 0 6
80968: PUSH
80969: LD_INT 25
80971: ST_TO_ADDR
// result := false ;
80972: LD_ADDR_VAR 0 4
80976: PUSH
80977: LD_INT 0
80979: ST_TO_ADDR
// for i := 0 to 5 do
80980: LD_ADDR_VAR 0 5
80984: PUSH
80985: DOUBLE
80986: LD_INT 0
80988: DEC
80989: ST_TO_ADDR
80990: LD_INT 5
80992: PUSH
80993: FOR_TO
80994: IFFALSE 81061
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
80996: LD_VAR 0 1
81000: PPUSH
81001: LD_VAR 0 5
81005: PPUSH
81006: LD_VAR 0 6
81010: PPUSH
81011: CALL_OW 272
81015: PPUSH
81016: LD_VAR 0 2
81020: PPUSH
81021: LD_VAR 0 5
81025: PPUSH
81026: LD_VAR 0 6
81030: PPUSH
81031: CALL_OW 273
81035: PPUSH
81036: LD_VAR 0 3
81040: PPUSH
81041: CALL_OW 309
81045: IFFALSE 81059
// begin result := true ;
81047: LD_ADDR_VAR 0 4
81051: PUSH
81052: LD_INT 1
81054: ST_TO_ADDR
// exit ;
81055: POP
81056: POP
81057: GO 81063
// end ;
81059: GO 80993
81061: POP
81062: POP
// end ;
81063: LD_VAR 0 4
81067: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
81068: LD_INT 0
81070: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
81071: LD_VAR 0 1
81075: PPUSH
81076: LD_VAR 0 2
81080: PPUSH
81081: LD_INT 0
81083: PPUSH
81084: LD_INT 0
81086: PPUSH
81087: LD_INT 1
81089: PPUSH
81090: LD_INT 0
81092: PPUSH
81093: CALL_OW 587
// end ;
81097: LD_VAR 0 3
81101: RET
// export function CenterOnNow ( unit ) ; begin
81102: LD_INT 0
81104: PPUSH
// result := IsInUnit ( unit ) ;
81105: LD_ADDR_VAR 0 2
81109: PUSH
81110: LD_VAR 0 1
81114: PPUSH
81115: CALL_OW 310
81119: ST_TO_ADDR
// if not result then
81120: LD_VAR 0 2
81124: NOT
81125: IFFALSE 81137
// result := unit ;
81127: LD_ADDR_VAR 0 2
81131: PUSH
81132: LD_VAR 0 1
81136: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
81137: LD_VAR 0 1
81141: PPUSH
81142: CALL_OW 87
// end ;
81146: LD_VAR 0 2
81150: RET
// export function ComMoveHex ( unit , hex ) ; begin
81151: LD_INT 0
81153: PPUSH
// if not hex then
81154: LD_VAR 0 2
81158: NOT
81159: IFFALSE 81163
// exit ;
81161: GO 81216
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
81163: LD_VAR 0 2
81167: PUSH
81168: LD_INT 1
81170: ARRAY
81171: PPUSH
81172: LD_VAR 0 2
81176: PUSH
81177: LD_INT 2
81179: ARRAY
81180: PPUSH
81181: CALL_OW 428
81185: IFFALSE 81189
// exit ;
81187: GO 81216
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
81189: LD_VAR 0 1
81193: PPUSH
81194: LD_VAR 0 2
81198: PUSH
81199: LD_INT 1
81201: ARRAY
81202: PPUSH
81203: LD_VAR 0 2
81207: PUSH
81208: LD_INT 2
81210: ARRAY
81211: PPUSH
81212: CALL_OW 111
// end ;
81216: LD_VAR 0 3
81220: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
81221: LD_INT 0
81223: PPUSH
81224: PPUSH
81225: PPUSH
// if not unit or not enemy then
81226: LD_VAR 0 1
81230: NOT
81231: PUSH
81232: LD_VAR 0 2
81236: NOT
81237: OR
81238: IFFALSE 81242
// exit ;
81240: GO 81366
// x := GetX ( enemy ) ;
81242: LD_ADDR_VAR 0 4
81246: PUSH
81247: LD_VAR 0 2
81251: PPUSH
81252: CALL_OW 250
81256: ST_TO_ADDR
// y := GetY ( enemy ) ;
81257: LD_ADDR_VAR 0 5
81261: PUSH
81262: LD_VAR 0 2
81266: PPUSH
81267: CALL_OW 251
81271: ST_TO_ADDR
// if ValidHex ( x , y ) then
81272: LD_VAR 0 4
81276: PPUSH
81277: LD_VAR 0 5
81281: PPUSH
81282: CALL_OW 488
81286: IFFALSE 81366
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
81288: LD_VAR 0 2
81292: PPUSH
81293: CALL_OW 247
81297: PUSH
81298: LD_INT 3
81300: PUSH
81301: LD_INT 2
81303: PUSH
81304: EMPTY
81305: LIST
81306: LIST
81307: IN
81308: PUSH
81309: LD_VAR 0 1
81313: PPUSH
81314: CALL_OW 255
81318: PPUSH
81319: LD_VAR 0 2
81323: PPUSH
81324: CALL_OW 292
81328: OR
81329: IFFALSE 81347
// ComAttackUnit ( unit , enemy ) else
81331: LD_VAR 0 1
81335: PPUSH
81336: LD_VAR 0 2
81340: PPUSH
81341: CALL_OW 115
81345: GO 81366
// ComAgressiveMove ( unit , x , y ) ;
81347: LD_VAR 0 1
81351: PPUSH
81352: LD_VAR 0 4
81356: PPUSH
81357: LD_VAR 0 5
81361: PPUSH
81362: CALL_OW 114
// end ;
81366: LD_VAR 0 3
81370: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
81371: LD_INT 0
81373: PPUSH
81374: PPUSH
81375: PPUSH
// list := AreaToList ( area , 0 ) ;
81376: LD_ADDR_VAR 0 5
81380: PUSH
81381: LD_VAR 0 1
81385: PPUSH
81386: LD_INT 0
81388: PPUSH
81389: CALL_OW 517
81393: ST_TO_ADDR
// if not list then
81394: LD_VAR 0 5
81398: NOT
81399: IFFALSE 81403
// exit ;
81401: GO 81533
// if all then
81403: LD_VAR 0 2
81407: IFFALSE 81495
// begin for i := 1 to list [ 1 ] do
81409: LD_ADDR_VAR 0 4
81413: PUSH
81414: DOUBLE
81415: LD_INT 1
81417: DEC
81418: ST_TO_ADDR
81419: LD_VAR 0 5
81423: PUSH
81424: LD_INT 1
81426: ARRAY
81427: PUSH
81428: FOR_TO
81429: IFFALSE 81491
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
81431: LD_ADDR_VAR 0 3
81435: PUSH
81436: LD_VAR 0 3
81440: PPUSH
81441: LD_VAR 0 3
81445: PUSH
81446: LD_INT 1
81448: PLUS
81449: PPUSH
81450: LD_VAR 0 5
81454: PUSH
81455: LD_INT 1
81457: ARRAY
81458: PUSH
81459: LD_VAR 0 4
81463: ARRAY
81464: PUSH
81465: LD_VAR 0 5
81469: PUSH
81470: LD_INT 2
81472: ARRAY
81473: PUSH
81474: LD_VAR 0 4
81478: ARRAY
81479: PUSH
81480: EMPTY
81481: LIST
81482: LIST
81483: PPUSH
81484: CALL_OW 1
81488: ST_TO_ADDR
81489: GO 81428
81491: POP
81492: POP
// exit ;
81493: GO 81533
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
81495: LD_ADDR_VAR 0 3
81499: PUSH
81500: LD_VAR 0 5
81504: PUSH
81505: LD_INT 1
81507: ARRAY
81508: PUSH
81509: LD_INT 1
81511: ARRAY
81512: PUSH
81513: LD_VAR 0 5
81517: PUSH
81518: LD_INT 2
81520: ARRAY
81521: PUSH
81522: LD_INT 1
81524: ARRAY
81525: PUSH
81526: EMPTY
81527: LIST
81528: LIST
81529: PUSH
81530: EMPTY
81531: LIST
81532: ST_TO_ADDR
// end ;
81533: LD_VAR 0 3
81537: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
81538: LD_INT 0
81540: PPUSH
81541: PPUSH
// list := AreaToList ( area , 0 ) ;
81542: LD_ADDR_VAR 0 4
81546: PUSH
81547: LD_VAR 0 1
81551: PPUSH
81552: LD_INT 0
81554: PPUSH
81555: CALL_OW 517
81559: ST_TO_ADDR
// if not list then
81560: LD_VAR 0 4
81564: NOT
81565: IFFALSE 81569
// exit ;
81567: GO 81610
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
81569: LD_ADDR_VAR 0 3
81573: PUSH
81574: LD_VAR 0 4
81578: PUSH
81579: LD_INT 1
81581: ARRAY
81582: PUSH
81583: LD_INT 1
81585: ARRAY
81586: PUSH
81587: LD_VAR 0 4
81591: PUSH
81592: LD_INT 2
81594: ARRAY
81595: PUSH
81596: LD_INT 1
81598: ARRAY
81599: PUSH
81600: LD_VAR 0 2
81604: PUSH
81605: EMPTY
81606: LIST
81607: LIST
81608: LIST
81609: ST_TO_ADDR
// end ;
81610: LD_VAR 0 3
81614: RET
// export function First ( array ) ; begin
81615: LD_INT 0
81617: PPUSH
// if not array then
81618: LD_VAR 0 1
81622: NOT
81623: IFFALSE 81627
// exit ;
81625: GO 81641
// result := array [ 1 ] ;
81627: LD_ADDR_VAR 0 2
81631: PUSH
81632: LD_VAR 0 1
81636: PUSH
81637: LD_INT 1
81639: ARRAY
81640: ST_TO_ADDR
// end ;
81641: LD_VAR 0 2
81645: RET
// export function Last ( array ) ; begin
81646: LD_INT 0
81648: PPUSH
// if not array then
81649: LD_VAR 0 1
81653: NOT
81654: IFFALSE 81658
// exit ;
81656: GO 81674
// result := array [ array ] ;
81658: LD_ADDR_VAR 0 2
81662: PUSH
81663: LD_VAR 0 1
81667: PUSH
81668: LD_VAR 0 1
81672: ARRAY
81673: ST_TO_ADDR
// end ;
81674: LD_VAR 0 2
81678: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
81679: LD_INT 0
81681: PPUSH
81682: PPUSH
// result := [ ] ;
81683: LD_ADDR_VAR 0 5
81687: PUSH
81688: EMPTY
81689: ST_TO_ADDR
// if not array then
81690: LD_VAR 0 1
81694: NOT
81695: IFFALSE 81699
// exit ;
81697: GO 81811
// for i := 1 to array do
81699: LD_ADDR_VAR 0 6
81703: PUSH
81704: DOUBLE
81705: LD_INT 1
81707: DEC
81708: ST_TO_ADDR
81709: LD_VAR 0 1
81713: PUSH
81714: FOR_TO
81715: IFFALSE 81809
// if array [ i ] [ index ] = value then
81717: LD_VAR 0 1
81721: PUSH
81722: LD_VAR 0 6
81726: ARRAY
81727: PUSH
81728: LD_VAR 0 2
81732: ARRAY
81733: PUSH
81734: LD_VAR 0 3
81738: EQUAL
81739: IFFALSE 81807
// begin if indexColumn then
81741: LD_VAR 0 4
81745: IFFALSE 81781
// result := Join ( result , array [ i ] [ indexColumn ] ) else
81747: LD_ADDR_VAR 0 5
81751: PUSH
81752: LD_VAR 0 5
81756: PPUSH
81757: LD_VAR 0 1
81761: PUSH
81762: LD_VAR 0 6
81766: ARRAY
81767: PUSH
81768: LD_VAR 0 4
81772: ARRAY
81773: PPUSH
81774: CALL 77149 0 2
81778: ST_TO_ADDR
81779: GO 81807
// result := Join ( result , array [ i ] ) ;
81781: LD_ADDR_VAR 0 5
81785: PUSH
81786: LD_VAR 0 5
81790: PPUSH
81791: LD_VAR 0 1
81795: PUSH
81796: LD_VAR 0 6
81800: ARRAY
81801: PPUSH
81802: CALL 77149 0 2
81806: ST_TO_ADDR
// end ;
81807: GO 81714
81809: POP
81810: POP
// end ;
81811: LD_VAR 0 5
81815: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
81816: LD_INT 0
81818: PPUSH
81819: PPUSH
81820: PPUSH
// if btype = b_depot then
81821: LD_VAR 0 2
81825: PUSH
81826: LD_INT 0
81828: EQUAL
81829: IFFALSE 81841
// begin result := true ;
81831: LD_ADDR_VAR 0 3
81835: PUSH
81836: LD_INT 1
81838: ST_TO_ADDR
// exit ;
81839: GO 81957
// end ; pom := GetBase ( depot ) ;
81841: LD_ADDR_VAR 0 4
81845: PUSH
81846: LD_VAR 0 1
81850: PPUSH
81851: CALL_OW 274
81855: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
81856: LD_ADDR_VAR 0 5
81860: PUSH
81861: LD_VAR 0 2
81865: PPUSH
81866: LD_VAR 0 1
81870: PPUSH
81871: CALL_OW 248
81875: PPUSH
81876: CALL_OW 450
81880: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
81881: LD_ADDR_VAR 0 3
81885: PUSH
81886: LD_VAR 0 4
81890: PPUSH
81891: LD_INT 1
81893: PPUSH
81894: CALL_OW 275
81898: PUSH
81899: LD_VAR 0 5
81903: PUSH
81904: LD_INT 1
81906: ARRAY
81907: GREATEREQUAL
81908: PUSH
81909: LD_VAR 0 4
81913: PPUSH
81914: LD_INT 2
81916: PPUSH
81917: CALL_OW 275
81921: PUSH
81922: LD_VAR 0 5
81926: PUSH
81927: LD_INT 2
81929: ARRAY
81930: GREATEREQUAL
81931: AND
81932: PUSH
81933: LD_VAR 0 4
81937: PPUSH
81938: LD_INT 3
81940: PPUSH
81941: CALL_OW 275
81945: PUSH
81946: LD_VAR 0 5
81950: PUSH
81951: LD_INT 3
81953: ARRAY
81954: GREATEREQUAL
81955: AND
81956: ST_TO_ADDR
// end ;
81957: LD_VAR 0 3
81961: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
81962: LD_INT 0
81964: PPUSH
// if not vehicles or not parkingPoint then
81965: LD_VAR 0 1
81969: NOT
81970: PUSH
81971: LD_VAR 0 2
81975: NOT
81976: OR
81977: IFFALSE 81981
// exit ;
81979: GO 82079
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
81981: LD_ADDR_VAR 0 1
81985: PUSH
81986: LD_VAR 0 1
81990: PPUSH
81991: LD_INT 50
81993: PUSH
81994: EMPTY
81995: LIST
81996: PUSH
81997: LD_INT 3
81999: PUSH
82000: LD_INT 92
82002: PUSH
82003: LD_VAR 0 2
82007: PUSH
82008: LD_INT 1
82010: ARRAY
82011: PUSH
82012: LD_VAR 0 2
82016: PUSH
82017: LD_INT 2
82019: ARRAY
82020: PUSH
82021: LD_INT 8
82023: PUSH
82024: EMPTY
82025: LIST
82026: LIST
82027: LIST
82028: LIST
82029: PUSH
82030: EMPTY
82031: LIST
82032: LIST
82033: PUSH
82034: EMPTY
82035: LIST
82036: LIST
82037: PPUSH
82038: CALL_OW 72
82042: ST_TO_ADDR
// if not vehicles then
82043: LD_VAR 0 1
82047: NOT
82048: IFFALSE 82052
// exit ;
82050: GO 82079
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
82052: LD_VAR 0 1
82056: PPUSH
82057: LD_VAR 0 2
82061: PUSH
82062: LD_INT 1
82064: ARRAY
82065: PPUSH
82066: LD_VAR 0 2
82070: PUSH
82071: LD_INT 2
82073: ARRAY
82074: PPUSH
82075: CALL_OW 111
// end ;
82079: LD_VAR 0 3
82083: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
82084: LD_INT 0
82086: PPUSH
82087: PPUSH
82088: PPUSH
// if not side or not area then
82089: LD_VAR 0 1
82093: NOT
82094: PUSH
82095: LD_VAR 0 2
82099: NOT
82100: OR
82101: IFFALSE 82105
// exit ;
82103: GO 82224
// tmp := AreaToList ( area , 0 ) ;
82105: LD_ADDR_VAR 0 5
82109: PUSH
82110: LD_VAR 0 2
82114: PPUSH
82115: LD_INT 0
82117: PPUSH
82118: CALL_OW 517
82122: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
82123: LD_ADDR_VAR 0 4
82127: PUSH
82128: DOUBLE
82129: LD_INT 1
82131: DEC
82132: ST_TO_ADDR
82133: LD_VAR 0 5
82137: PUSH
82138: LD_INT 1
82140: ARRAY
82141: PUSH
82142: FOR_TO
82143: IFFALSE 82222
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
82145: LD_VAR 0 5
82149: PUSH
82150: LD_INT 1
82152: ARRAY
82153: PUSH
82154: LD_VAR 0 4
82158: ARRAY
82159: PPUSH
82160: LD_VAR 0 5
82164: PUSH
82165: LD_INT 2
82167: ARRAY
82168: PUSH
82169: LD_VAR 0 4
82173: ARRAY
82174: PPUSH
82175: CALL_OW 351
82179: IFFALSE 82220
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
82181: LD_VAR 0 5
82185: PUSH
82186: LD_INT 1
82188: ARRAY
82189: PUSH
82190: LD_VAR 0 4
82194: ARRAY
82195: PPUSH
82196: LD_VAR 0 5
82200: PUSH
82201: LD_INT 2
82203: ARRAY
82204: PUSH
82205: LD_VAR 0 4
82209: ARRAY
82210: PPUSH
82211: LD_VAR 0 1
82215: PPUSH
82216: CALL_OW 244
// end ;
82220: GO 82142
82222: POP
82223: POP
// end ; end_of_file
82224: LD_VAR 0 3
82228: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
82229: LD_VAR 0 1
82233: PUSH
82234: LD_INT 200
82236: DOUBLE
82237: GREATEREQUAL
82238: IFFALSE 82246
82240: LD_INT 299
82242: DOUBLE
82243: LESSEQUAL
82244: IFTRUE 82248
82246: GO 82280
82248: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
82249: LD_VAR 0 1
82253: PPUSH
82254: LD_VAR 0 2
82258: PPUSH
82259: LD_VAR 0 3
82263: PPUSH
82264: LD_VAR 0 4
82268: PPUSH
82269: LD_VAR 0 5
82273: PPUSH
82274: CALL 34940 0 5
82278: GO 82357
82280: LD_INT 300
82282: DOUBLE
82283: GREATEREQUAL
82284: IFFALSE 82292
82286: LD_INT 399
82288: DOUBLE
82289: LESSEQUAL
82290: IFTRUE 82294
82292: GO 82356
82294: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
82295: LD_VAR 0 1
82299: PPUSH
82300: LD_VAR 0 2
82304: PPUSH
82305: LD_VAR 0 3
82309: PPUSH
82310: LD_VAR 0 4
82314: PPUSH
82315: LD_VAR 0 5
82319: PPUSH
82320: LD_VAR 0 6
82324: PPUSH
82325: LD_VAR 0 7
82329: PPUSH
82330: LD_VAR 0 8
82334: PPUSH
82335: LD_VAR 0 9
82339: PPUSH
82340: LD_VAR 0 10
82344: PPUSH
82345: LD_VAR 0 11
82349: PPUSH
82350: CALL 31265 0 11
82354: GO 82357
82356: POP
// end ;
82357: PPOPN 11
82359: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
82360: LD_VAR 0 1
82364: PPUSH
82365: LD_VAR 0 2
82369: PPUSH
82370: LD_VAR 0 3
82374: PPUSH
82375: LD_VAR 0 4
82379: PPUSH
82380: LD_VAR 0 5
82384: PPUSH
82385: CALL 34676 0 5
// end ; end_of_file
82389: PPOPN 5
82391: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
82392: LD_VAR 0 1
82396: PPUSH
82397: LD_VAR 0 2
82401: PPUSH
82402: LD_VAR 0 3
82406: PPUSH
82407: LD_VAR 0 4
82411: PPUSH
82412: LD_VAR 0 5
82416: PPUSH
82417: LD_VAR 0 6
82421: PPUSH
82422: CALL 18917 0 6
// end ;
82426: PPOPN 6
82428: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
82429: LD_INT 0
82431: PPUSH
// begin if not units then
82432: LD_VAR 0 1
82436: NOT
82437: IFFALSE 82441
// exit ;
82439: GO 82441
// end ;
82441: PPOPN 7
82443: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
82444: CALL 18804 0 0
// end ;
82448: PPOPN 1
82450: END
