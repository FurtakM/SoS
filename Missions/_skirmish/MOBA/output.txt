// export test ; starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 45 , 59 ) ;
   4: LD_INT 45
   6: PPUSH
   7: LD_INT 59
   9: PPUSH
  10: CALL_OW 86
// Welcome ;
  14: CALL 44 0 0
// if test then
  18: LD_EXP 1
  22: IFFALSE 31
// FogOff ( 1 ) ;
  24: LD_INT 1
  26: PPUSH
  27: CALL_OW 344
// InitEnemy ( ) ;
  31: CALL 9566 0 0
// InitCost ( ) ;
  35: CALL 9358 0 0
// PrepareGame ;
  39: CALL 161 0 0
// end ;
  43: END
// function Welcome ; begin
  44: LD_INT 0
  46: PPUSH
// case Query ( MOBA ) of 1 :
  47: LD_STRING MOBA
  49: PPUSH
  50: CALL_OW 97
  54: PUSH
  55: LD_INT 1
  57: DOUBLE
  58: EQUAL
  59: IFTRUE 63
  61: GO 66
  63: POP
// ; end ;
  64: GO 67
  66: POP
// test := false ;
  67: LD_ADDR_EXP 1
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// end ;
  75: LD_VAR 0 1
  79: RET
// export function Lost ; begin
  80: LD_INT 0
  82: PPUSH
// YouLost ( MOBAl ) ;
  83: LD_STRING MOBAl
  85: PPUSH
  86: CALL_OW 104
// end ;
  90: LD_VAR 0 1
  94: RET
// export function Win ; begin
  95: LD_INT 0
  97: PPUSH
// case Query ( MOBAw ) of 1 :
  98: LD_STRING MOBAw
 100: PPUSH
 101: CALL_OW 97
 105: PUSH
 106: LD_INT 1
 108: DOUBLE
 109: EQUAL
 110: IFTRUE 114
 112: GO 121
 114: POP
// YouWin ; end ;
 115: CALL_OW 103
 119: GO 122
 121: POP
// end ;
 122: LD_VAR 0 1
 126: RET
// every 35 trigger test do
 127: LD_EXP 1
 131: IFFALSE 160
 133: GO 135
 135: DISABLE
// begin enable ;
 136: ENABLE
// display_strings := [ tick / 35 , enemy_source ] ;
 137: LD_ADDR_OWVAR 47
 141: PUSH
 142: LD_OWVAR 1
 146: PUSH
 147: LD_INT 35
 149: DIVREAL
 150: PUSH
 151: LD_EXP 5
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: ST_TO_ADDR
// end ;
 160: END
// export your_crane , enemy_crane , your_source , enemy_source , sides_pom , game_time , your_skills , enemy_skills , main_skills ; function PrepareGame ; var i , tab ; begin
 161: LD_INT 0
 163: PPUSH
 164: PPUSH
 165: PPUSH
// ChangeSideFog ( 1 , 6 ) ;
 166: LD_INT 1
 168: PPUSH
 169: LD_INT 6
 171: PPUSH
 172: CALL_OW 343
// SetAttitude ( 1 , 6 , att_friend , true ) ;
 176: LD_INT 1
 178: PPUSH
 179: LD_INT 6
 181: PPUSH
 182: LD_INT 1
 184: PPUSH
 185: LD_INT 1
 187: PPUSH
 188: CALL_OW 80
// SetAttitude ( 2 , 3 , att_friend , true ) ;
 192: LD_INT 2
 194: PPUSH
 195: LD_INT 3
 197: PPUSH
 198: LD_INT 1
 200: PPUSH
 201: LD_INT 1
 203: PPUSH
 204: CALL_OW 80
// PlaceSeeing ( 49 , 59 , your_side , 40 ) ;
 208: LD_INT 49
 210: PPUSH
 211: LD_INT 59
 213: PPUSH
 214: LD_OWVAR 2
 218: PPUSH
 219: LD_INT 40
 221: PPUSH
 222: CALL_OW 330
// uc_nation := 1 ;
 226: LD_ADDR_OWVAR 21
 230: PUSH
 231: LD_INT 1
 233: ST_TO_ADDR
// tab := [ player1 , player2 ] ;
 234: LD_ADDR_VAR 0 3
 238: PUSH
 239: LD_INT 1
 241: PUSH
 242: LD_INT 2
 244: PUSH
 245: EMPTY
 246: LIST
 247: LIST
 248: ST_TO_ADDR
// sides_pom := [ 6 , 3 ] ;
 249: LD_ADDR_EXP 6
 253: PUSH
 254: LD_INT 6
 256: PUSH
 257: LD_INT 3
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: ST_TO_ADDR
// your_source := 0 ;
 264: LD_ADDR_EXP 4
 268: PUSH
 269: LD_INT 0
 271: ST_TO_ADDR
// enemy_source := 0 ;
 272: LD_ADDR_EXP 5
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// your_skills := [ 0 , 0 , 0 , 0 ] ;
 280: LD_ADDR_EXP 8
 284: PUSH
 285: LD_INT 0
 287: PUSH
 288: LD_INT 0
 290: PUSH
 291: LD_INT 0
 293: PUSH
 294: LD_INT 0
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: LIST
 301: LIST
 302: ST_TO_ADDR
// enemy_skills := [ 0 , 0 , 0 , 0 ] ;
 303: LD_ADDR_EXP 9
 307: PUSH
 308: LD_INT 0
 310: PUSH
 311: LD_INT 0
 313: PUSH
 314: LD_INT 0
 316: PUSH
 317: LD_INT 0
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: LIST
 324: LIST
 325: ST_TO_ADDR
// main_skills := [ your_skills , enemy_skills ] ;
 326: LD_ADDR_EXP 10
 330: PUSH
 331: LD_EXP 8
 335: PUSH
 336: LD_EXP 9
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: ST_TO_ADDR
// for i = 1 to 2 do
 345: LD_ADDR_VAR 0 2
 349: PUSH
 350: DOUBLE
 351: LD_INT 1
 353: DEC
 354: ST_TO_ADDR
 355: LD_INT 2
 357: PUSH
 358: FOR_TO
 359: IFFALSE 518
// begin uc_side := i ;
 361: LD_ADDR_OWVAR 20
 365: PUSH
 366: LD_VAR 0 2
 370: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
 371: LD_ADDR_OWVAR 37
 375: PUSH
 376: LD_INT 2
 378: ST_TO_ADDR
// vc_engine := engine_siberite ;
 379: LD_ADDR_OWVAR 39
 383: PUSH
 384: LD_INT 3
 386: ST_TO_ADDR
// vc_control := control_computer ;
 387: LD_ADDR_OWVAR 38
 391: PUSH
 392: LD_INT 3
 394: ST_TO_ADDR
// vc_weapon := us_crane ;
 395: LD_ADDR_OWVAR 40
 399: PUSH
 400: LD_INT 13
 402: ST_TO_ADDR
// if i = 1 then
 403: LD_VAR 0 2
 407: PUSH
 408: LD_INT 1
 410: EQUAL
 411: IFFALSE 448
// begin your_crane = CreateVehicle ;
 413: LD_ADDR_EXP 2
 417: PUSH
 418: CALL_OW 45
 422: ST_TO_ADDR
// PlaceUnitArea ( your_crane , tab [ i ] , false ) ;
 423: LD_EXP 2
 427: PPUSH
 428: LD_VAR 0 3
 432: PUSH
 433: LD_VAR 0 2
 437: ARRAY
 438: PPUSH
 439: LD_INT 0
 441: PPUSH
 442: CALL_OW 49
// end else
 446: GO 516
// begin vc_control := control_manual ;
 448: LD_ADDR_OWVAR 38
 452: PUSH
 453: LD_INT 1
 455: ST_TO_ADDR
// enemy_crane = CreateVehicle ;
 456: LD_ADDR_EXP 3
 460: PUSH
 461: CALL_OW 45
 465: ST_TO_ADDR
// PlaceUnitArea ( enemy_crane , tab [ i ] , false ) ;
 466: LD_EXP 3
 470: PPUSH
 471: LD_VAR 0 3
 475: PUSH
 476: LD_VAR 0 2
 480: ARRAY
 481: PPUSH
 482: LD_INT 0
 484: PPUSH
 485: CALL_OW 49
// PrepareHuman ( sex_male , 3 , 10 ) ;
 489: LD_INT 1
 491: PPUSH
 492: LD_INT 3
 494: PPUSH
 495: LD_INT 10
 497: PPUSH
 498: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , enemy_crane ) ;
 502: CALL_OW 44
 506: PPUSH
 507: LD_EXP 3
 511: PPUSH
 512: CALL_OW 52
// end ; end ;
 516: GO 358
 518: POP
 519: POP
// end ; end_of_file
 520: LD_VAR 0 1
 524: RET
// on BuildingStarted ( b , builder ) do var your_depot , enemy_depot ;
 525: LD_INT 0
 527: PPUSH
 528: PPUSH
// begin SetWorkingProgress ( b , 100 ) ;
 529: LD_VAR 0 1
 533: PPUSH
 534: LD_INT 100
 536: PPUSH
 537: CALL_OW 329
// Wait ( 2 ) ;
 541: LD_INT 2
 543: PPUSH
 544: CALL_OW 67
// SetLives ( b , 1000 ) ;
 548: LD_VAR 0 1
 552: PPUSH
 553: LD_INT 1000
 555: PPUSH
 556: CALL_OW 234
// if GetBType ( b ) = b_depot then
 560: LD_VAR 0 1
 564: PPUSH
 565: CALL_OW 266
 569: PUSH
 570: LD_INT 0
 572: EQUAL
 573: IFFALSE 739
// begin SetRestrict ( b_depot , GetSide ( b ) , state_disabled ) ;
 575: LD_INT 0
 577: PPUSH
 578: LD_VAR 0 1
 582: PPUSH
 583: CALL_OW 255
 587: PPUSH
 588: LD_INT 0
 590: PPUSH
 591: CALL_OW 324
// if GetSide ( b ) = 1 then
 595: LD_VAR 0 1
 599: PPUSH
 600: CALL_OW 255
 604: PUSH
 605: LD_INT 1
 607: EQUAL
 608: IFFALSE 668
// begin your_depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ;
 610: LD_ADDR_VAR 0 3
 614: PUSH
 615: LD_INT 22
 617: PUSH
 618: LD_OWVAR 2
 622: PUSH
 623: EMPTY
 624: LIST
 625: LIST
 626: PUSH
 627: LD_INT 2
 629: PUSH
 630: LD_INT 30
 632: PUSH
 633: LD_INT 0
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: PUSH
 640: LD_INT 30
 642: PUSH
 643: LD_INT 1
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: PUSH
 650: EMPTY
 651: LIST
 652: LIST
 653: LIST
 654: PUSH
 655: EMPTY
 656: LIST
 657: LIST
 658: PPUSH
 659: CALL_OW 69
 663: PUSH
 664: LD_INT 1
 666: ARRAY
 667: ST_TO_ADDR
// end ; if GetSide ( b ) = 2 then
 668: LD_VAR 0 1
 672: PPUSH
 673: CALL_OW 255
 677: PUSH
 678: LD_INT 2
 680: EQUAL
 681: IFFALSE 739
// enemy_depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ;
 683: LD_ADDR_VAR 0 4
 687: PUSH
 688: LD_INT 22
 690: PUSH
 691: LD_INT 2
 693: PUSH
 694: EMPTY
 695: LIST
 696: LIST
 697: PUSH
 698: LD_INT 2
 700: PUSH
 701: LD_INT 30
 703: PUSH
 704: LD_INT 0
 706: PUSH
 707: EMPTY
 708: LIST
 709: LIST
 710: PUSH
 711: LD_INT 30
 713: PUSH
 714: LD_INT 1
 716: PUSH
 717: EMPTY
 718: LIST
 719: LIST
 720: PUSH
 721: EMPTY
 722: LIST
 723: LIST
 724: LIST
 725: PUSH
 726: EMPTY
 727: LIST
 728: LIST
 729: PPUSH
 730: CALL_OW 69
 734: PUSH
 735: LD_INT 1
 737: ARRAY
 738: ST_TO_ADDR
// end ; case GetBType ( b ) of b_armoury :
 739: LD_VAR 0 1
 743: PPUSH
 744: CALL_OW 266
 748: PUSH
 749: LD_INT 4
 751: DOUBLE
 752: EQUAL
 753: IFTRUE 757
 755: GO 870
 757: POP
// begin if GetSide ( b ) = 2 then
 758: LD_VAR 0 1
 762: PPUSH
 763: CALL_OW 255
 767: PUSH
 768: LD_INT 2
 770: EQUAL
 771: IFFALSE 808
// begin enemy_source := enemy_source - armoury_cost ;
 773: LD_ADDR_EXP 5
 777: PUSH
 778: LD_EXP 5
 782: PUSH
 783: LD_EXP 12
 787: MINUS
 788: ST_TO_ADDR
// SetResourceType ( enemy_depot , mat_cans , enemy_source ) ;
 789: LD_VAR 0 4
 793: PPUSH
 794: LD_INT 1
 796: PPUSH
 797: LD_EXP 5
 801: PPUSH
 802: CALL_OW 277
// end else
 806: GO 868
// if GetSide ( b ) = 1 then
 808: LD_VAR 0 1
 812: PPUSH
 813: CALL_OW 255
 817: PUSH
 818: LD_INT 1
 820: EQUAL
 821: IFFALSE 868
// begin if your_source >= armoury_cost then
 823: LD_EXP 4
 827: PUSH
 828: LD_EXP 12
 832: GREATEREQUAL
 833: IFFALSE 868
// begin your_source := your_source - armoury_cost ;
 835: LD_ADDR_EXP 4
 839: PUSH
 840: LD_EXP 4
 844: PUSH
 845: LD_EXP 12
 849: MINUS
 850: ST_TO_ADDR
// SetResourceType ( your_depot , mat_cans , your_source ) ;
 851: LD_VAR 0 3
 855: PPUSH
 856: LD_INT 1
 858: PPUSH
 859: LD_EXP 4
 863: PPUSH
 864: CALL_OW 277
// end ; end ; end ; b_workshop :
 868: GO 1718
 870: LD_INT 2
 872: DOUBLE
 873: EQUAL
 874: IFTRUE 878
 876: GO 991
 878: POP
// begin if GetSide ( b ) = 2 then
 879: LD_VAR 0 1
 883: PPUSH
 884: CALL_OW 255
 888: PUSH
 889: LD_INT 2
 891: EQUAL
 892: IFFALSE 929
// begin enemy_source := enemy_source - work_cost ;
 894: LD_ADDR_EXP 5
 898: PUSH
 899: LD_EXP 5
 903: PUSH
 904: LD_EXP 19
 908: MINUS
 909: ST_TO_ADDR
// SetResourceType ( enemy_depot , mat_cans , enemy_source ) ;
 910: LD_VAR 0 4
 914: PPUSH
 915: LD_INT 1
 917: PPUSH
 918: LD_EXP 5
 922: PPUSH
 923: CALL_OW 277
// end else
 927: GO 989
// if GetSide ( b ) = 1 then
 929: LD_VAR 0 1
 933: PPUSH
 934: CALL_OW 255
 938: PUSH
 939: LD_INT 1
 941: EQUAL
 942: IFFALSE 989
// begin if your_source >= work_cost then
 944: LD_EXP 4
 948: PUSH
 949: LD_EXP 19
 953: GREATEREQUAL
 954: IFFALSE 989
// begin your_source := your_source - work_cost ;
 956: LD_ADDR_EXP 4
 960: PUSH
 961: LD_EXP 4
 965: PUSH
 966: LD_EXP 19
 970: MINUS
 971: ST_TO_ADDR
// SetResourceType ( your_depot , mat_cans , your_source ) ;
 972: LD_VAR 0 3
 976: PPUSH
 977: LD_INT 1
 979: PPUSH
 980: LD_EXP 4
 984: PPUSH
 985: CALL_OW 277
// end ; end ; end ; b_lab :
 989: GO 1718
 991: LD_INT 6
 993: DOUBLE
 994: EQUAL
 995: IFTRUE 999
 997: GO 1112
 999: POP
// begin if GetSide ( b ) = 2 then
1000: LD_VAR 0 1
1004: PPUSH
1005: CALL_OW 255
1009: PUSH
1010: LD_INT 2
1012: EQUAL
1013: IFFALSE 1050
// begin enemy_source := enemy_source - lab_cost ;
1015: LD_ADDR_EXP 5
1019: PUSH
1020: LD_EXP 5
1024: PUSH
1025: LD_EXP 14
1029: MINUS
1030: ST_TO_ADDR
// SetResourceType ( enemy_depot , mat_cans , enemy_source ) ;
1031: LD_VAR 0 4
1035: PPUSH
1036: LD_INT 1
1038: PPUSH
1039: LD_EXP 5
1043: PPUSH
1044: CALL_OW 277
// end else
1048: GO 1110
// if GetSide ( b ) = 1 then
1050: LD_VAR 0 1
1054: PPUSH
1055: CALL_OW 255
1059: PUSH
1060: LD_INT 1
1062: EQUAL
1063: IFFALSE 1110
// begin if your_source >= lab_cost then
1065: LD_EXP 4
1069: PUSH
1070: LD_EXP 14
1074: GREATEREQUAL
1075: IFFALSE 1110
// begin your_source := your_source - lab_cost ;
1077: LD_ADDR_EXP 4
1081: PUSH
1082: LD_EXP 4
1086: PUSH
1087: LD_EXP 14
1091: MINUS
1092: ST_TO_ADDR
// SetResourceType ( your_depot , mat_cans , your_source ) ;
1093: LD_VAR 0 3
1097: PPUSH
1098: LD_INT 1
1100: PPUSH
1101: LD_EXP 4
1105: PPUSH
1106: CALL_OW 277
// end ; end ; end ; b_breastwork :
1110: GO 1718
1112: LD_INT 31
1114: DOUBLE
1115: EQUAL
1116: IFTRUE 1120
1118: GO 1233
1120: POP
// begin if GetSide ( b ) = 2 then
1121: LD_VAR 0 1
1125: PPUSH
1126: CALL_OW 255
1130: PUSH
1131: LD_INT 2
1133: EQUAL
1134: IFFALSE 1171
// begin enemy_source := enemy_source - bunker_cost ;
1136: LD_ADDR_EXP 5
1140: PUSH
1141: LD_EXP 5
1145: PUSH
1146: LD_EXP 29
1150: MINUS
1151: ST_TO_ADDR
// SetResourceType ( enemy_depot , mat_cans , enemy_source ) ;
1152: LD_VAR 0 4
1156: PPUSH
1157: LD_INT 1
1159: PPUSH
1160: LD_EXP 5
1164: PPUSH
1165: CALL_OW 277
// end else
1169: GO 1231
// if GetSide ( b ) = 1 then
1171: LD_VAR 0 1
1175: PPUSH
1176: CALL_OW 255
1180: PUSH
1181: LD_INT 1
1183: EQUAL
1184: IFFALSE 1231
// begin if your_source >= bunker_cost then
1186: LD_EXP 4
1190: PUSH
1191: LD_EXP 29
1195: GREATEREQUAL
1196: IFFALSE 1231
// begin your_source := your_source - bunker_cost ;
1198: LD_ADDR_EXP 4
1202: PUSH
1203: LD_EXP 4
1207: PUSH
1208: LD_EXP 29
1212: MINUS
1213: ST_TO_ADDR
// SetResourceType ( your_depot , mat_cans , your_source ) ;
1214: LD_VAR 0 3
1218: PPUSH
1219: LD_INT 1
1221: PPUSH
1222: LD_EXP 4
1226: PPUSH
1227: CALL_OW 277
// end ; end ; end ; b_bunker :
1231: GO 1718
1233: LD_INT 32
1235: DOUBLE
1236: EQUAL
1237: IFTRUE 1241
1239: GO 1354
1241: POP
// begin if GetSide ( b ) = 2 then
1242: LD_VAR 0 1
1246: PPUSH
1247: CALL_OW 255
1251: PUSH
1252: LD_INT 2
1254: EQUAL
1255: IFFALSE 1292
// begin enemy_source := enemy_source - lab_cost ;
1257: LD_ADDR_EXP 5
1261: PUSH
1262: LD_EXP 5
1266: PUSH
1267: LD_EXP 14
1271: MINUS
1272: ST_TO_ADDR
// SetResourceType ( enemy_depot , mat_cans , enemy_source ) ;
1273: LD_VAR 0 4
1277: PPUSH
1278: LD_INT 1
1280: PPUSH
1281: LD_EXP 5
1285: PPUSH
1286: CALL_OW 277
// end else
1290: GO 1352
// if GetSide ( b ) = 1 then
1292: LD_VAR 0 1
1296: PPUSH
1297: CALL_OW 255
1301: PUSH
1302: LD_INT 1
1304: EQUAL
1305: IFFALSE 1352
// begin if your_source >= lab_cost then
1307: LD_EXP 4
1311: PUSH
1312: LD_EXP 14
1316: GREATEREQUAL
1317: IFFALSE 1352
// begin your_source := your_source - lab_cost ;
1319: LD_ADDR_EXP 4
1323: PUSH
1324: LD_EXP 4
1328: PUSH
1329: LD_EXP 14
1333: MINUS
1334: ST_TO_ADDR
// SetResourceType ( your_depot , mat_cans , your_source ) ;
1335: LD_VAR 0 3
1339: PPUSH
1340: LD_INT 1
1342: PPUSH
1343: LD_EXP 4
1347: PPUSH
1348: CALL_OW 277
// end ; end ; end ; b_solar_power :
1352: GO 1718
1354: LD_INT 27
1356: DOUBLE
1357: EQUAL
1358: IFTRUE 1362
1360: GO 1475
1362: POP
// begin if GetSide ( b ) = 2 then
1363: LD_VAR 0 1
1367: PPUSH
1368: CALL_OW 255
1372: PUSH
1373: LD_INT 2
1375: EQUAL
1376: IFFALSE 1413
// begin enemy_source := enemy_source - solar_cost ;
1378: LD_ADDR_EXP 5
1382: PUSH
1383: LD_EXP 5
1387: PUSH
1388: LD_EXP 33
1392: MINUS
1393: ST_TO_ADDR
// SetResourceType ( enemy_depot , mat_cans , enemy_source ) ;
1394: LD_VAR 0 4
1398: PPUSH
1399: LD_INT 1
1401: PPUSH
1402: LD_EXP 5
1406: PPUSH
1407: CALL_OW 277
// end else
1411: GO 1473
// if GetSide ( b ) = 1 then
1413: LD_VAR 0 1
1417: PPUSH
1418: CALL_OW 255
1422: PUSH
1423: LD_INT 1
1425: EQUAL
1426: IFFALSE 1473
// begin if your_source >= solar_cost then
1428: LD_EXP 4
1432: PUSH
1433: LD_EXP 33
1437: GREATEREQUAL
1438: IFFALSE 1473
// begin your_source := your_source - solar_cost ;
1440: LD_ADDR_EXP 4
1444: PUSH
1445: LD_EXP 4
1449: PUSH
1450: LD_EXP 33
1454: MINUS
1455: ST_TO_ADDR
// SetResourceType ( your_depot , mat_cans , your_source ) ;
1456: LD_VAR 0 3
1460: PPUSH
1461: LD_INT 1
1463: PPUSH
1464: LD_EXP 4
1468: PPUSH
1469: CALL_OW 277
// end ; end ; end ; b_oil_power :
1473: GO 1718
1475: LD_INT 26
1477: DOUBLE
1478: EQUAL
1479: IFTRUE 1483
1481: GO 1596
1483: POP
// begin if GetSide ( b ) = 2 then
1484: LD_VAR 0 1
1488: PPUSH
1489: CALL_OW 255
1493: PUSH
1494: LD_INT 2
1496: EQUAL
1497: IFFALSE 1534
// begin enemy_source := enemy_source - oil_cost ;
1499: LD_ADDR_EXP 5
1503: PUSH
1504: LD_EXP 5
1508: PUSH
1509: LD_EXP 35
1513: MINUS
1514: ST_TO_ADDR
// SetResourceType ( enemy_depot , mat_cans , enemy_source ) ;
1515: LD_VAR 0 4
1519: PPUSH
1520: LD_INT 1
1522: PPUSH
1523: LD_EXP 5
1527: PPUSH
1528: CALL_OW 277
// end else
1532: GO 1594
// if GetSide ( b ) = 1 then
1534: LD_VAR 0 1
1538: PPUSH
1539: CALL_OW 255
1543: PUSH
1544: LD_INT 1
1546: EQUAL
1547: IFFALSE 1594
// begin if your_source >= oil_cost then
1549: LD_EXP 4
1553: PUSH
1554: LD_EXP 35
1558: GREATEREQUAL
1559: IFFALSE 1594
// begin your_source := your_source - oil_cost ;
1561: LD_ADDR_EXP 4
1565: PUSH
1566: LD_EXP 4
1570: PUSH
1571: LD_EXP 35
1575: MINUS
1576: ST_TO_ADDR
// SetResourceType ( your_depot , mat_cans , your_source ) ;
1577: LD_VAR 0 3
1581: PPUSH
1582: LD_INT 1
1584: PPUSH
1585: LD_EXP 4
1589: PPUSH
1590: CALL_OW 277
// end ; end ; end ; b_siberite_power :
1594: GO 1718
1596: LD_INT 28
1598: DOUBLE
1599: EQUAL
1600: IFTRUE 1604
1602: GO 1717
1604: POP
// begin if GetSide ( b ) = 2 then
1605: LD_VAR 0 1
1609: PPUSH
1610: CALL_OW 255
1614: PUSH
1615: LD_INT 2
1617: EQUAL
1618: IFFALSE 1655
// begin enemy_source := enemy_source - sib_cost ;
1620: LD_ADDR_EXP 5
1624: PUSH
1625: LD_EXP 5
1629: PUSH
1630: LD_EXP 34
1634: MINUS
1635: ST_TO_ADDR
// SetResourceType ( enemy_depot , mat_cans , enemy_source ) ;
1636: LD_VAR 0 4
1640: PPUSH
1641: LD_INT 1
1643: PPUSH
1644: LD_EXP 5
1648: PPUSH
1649: CALL_OW 277
// end else
1653: GO 1715
// if GetSide ( b ) = 1 then
1655: LD_VAR 0 1
1659: PPUSH
1660: CALL_OW 255
1664: PUSH
1665: LD_INT 1
1667: EQUAL
1668: IFFALSE 1715
// begin if your_source >= sib_cost then
1670: LD_EXP 4
1674: PUSH
1675: LD_EXP 34
1679: GREATEREQUAL
1680: IFFALSE 1715
// begin your_source := your_source - sib_cost ;
1682: LD_ADDR_EXP 4
1686: PUSH
1687: LD_EXP 4
1691: PUSH
1692: LD_EXP 34
1696: MINUS
1697: ST_TO_ADDR
// SetResourceType ( your_depot , mat_cans , your_source ) ;
1698: LD_VAR 0 3
1702: PPUSH
1703: LD_INT 1
1705: PPUSH
1706: LD_EXP 4
1710: PPUSH
1711: CALL_OW 277
// end ; end ; end ; end ;
1715: GO 1718
1717: POP
// end ;
1718: PPOPN 4
1720: END
// on UpgradeComplete ( b ) do var your_depot , enemy_depot ;
1721: LD_INT 0
1723: PPUSH
1724: PPUSH
// begin your_depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ;
1725: LD_ADDR_VAR 0 2
1729: PUSH
1730: LD_INT 22
1732: PUSH
1733: LD_OWVAR 2
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: PUSH
1742: LD_INT 2
1744: PUSH
1745: LD_INT 30
1747: PUSH
1748: LD_INT 0
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: PUSH
1755: LD_INT 30
1757: PUSH
1758: LD_INT 1
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: PUSH
1765: EMPTY
1766: LIST
1767: LIST
1768: LIST
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: PPUSH
1774: CALL_OW 69
1778: PUSH
1779: LD_INT 1
1781: ARRAY
1782: ST_TO_ADDR
// enemy_depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ;
1783: LD_ADDR_VAR 0 3
1787: PUSH
1788: LD_INT 22
1790: PUSH
1791: LD_INT 2
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: PUSH
1798: LD_INT 2
1800: PUSH
1801: LD_INT 30
1803: PUSH
1804: LD_INT 0
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: PUSH
1811: LD_INT 30
1813: PUSH
1814: LD_INT 1
1816: PUSH
1817: EMPTY
1818: LIST
1819: LIST
1820: PUSH
1821: EMPTY
1822: LIST
1823: LIST
1824: LIST
1825: PUSH
1826: EMPTY
1827: LIST
1828: LIST
1829: PPUSH
1830: CALL_OW 69
1834: PUSH
1835: LD_INT 1
1837: ARRAY
1838: ST_TO_ADDR
// if GetBType ( b ) = b_warehouse then
1839: LD_VAR 0 1
1843: PPUSH
1844: CALL_OW 266
1848: PUSH
1849: LD_INT 1
1851: EQUAL
1852: IFFALSE 1868
// begin UnlockBuildings ( GetSide ( b ) ) ;
1854: LD_VAR 0 1
1858: PPUSH
1859: CALL_OW 255
1863: PPUSH
1864: CALL 9312 0 1
// end ; case GetBType ( b ) of b_warehouse :
1868: LD_VAR 0 1
1872: PPUSH
1873: CALL_OW 266
1877: PUSH
1878: LD_INT 1
1880: DOUBLE
1881: EQUAL
1882: IFTRUE 1886
1884: GO 1999
1886: POP
// begin if GetSide ( b ) = 2 then
1887: LD_VAR 0 1
1891: PPUSH
1892: CALL_OW 255
1896: PUSH
1897: LD_INT 2
1899: EQUAL
1900: IFFALSE 1937
// begin enemy_source := enemy_source - depot_cost ;
1902: LD_ADDR_EXP 5
1906: PUSH
1907: LD_EXP 5
1911: PUSH
1912: LD_EXP 11
1916: MINUS
1917: ST_TO_ADDR
// SetResourceType ( enemy_depot , mat_cans , enemy_source ) ;
1918: LD_VAR 0 3
1922: PPUSH
1923: LD_INT 1
1925: PPUSH
1926: LD_EXP 5
1930: PPUSH
1931: CALL_OW 277
// end else
1935: GO 1997
// if GetSide ( b ) = 1 then
1937: LD_VAR 0 1
1941: PPUSH
1942: CALL_OW 255
1946: PUSH
1947: LD_INT 1
1949: EQUAL
1950: IFFALSE 1997
// begin if your_source >= depot_cost then
1952: LD_EXP 4
1956: PUSH
1957: LD_EXP 11
1961: GREATEREQUAL
1962: IFFALSE 1997
// begin your_source := your_source - depot_cost ;
1964: LD_ADDR_EXP 4
1968: PUSH
1969: LD_EXP 4
1973: PUSH
1974: LD_EXP 11
1978: MINUS
1979: ST_TO_ADDR
// SetResourceType ( your_depot , mat_cans , your_source ) ;
1980: LD_VAR 0 2
1984: PPUSH
1985: LD_INT 1
1987: PPUSH
1988: LD_EXP 4
1992: PPUSH
1993: CALL_OW 277
// end ; end ; end ; b_barracks :
1997: GO 2363
1999: LD_INT 5
2001: DOUBLE
2002: EQUAL
2003: IFTRUE 2007
2005: GO 2120
2007: POP
// begin if GetSide ( b ) = 2 then
2008: LD_VAR 0 1
2012: PPUSH
2013: CALL_OW 255
2017: PUSH
2018: LD_INT 2
2020: EQUAL
2021: IFFALSE 2058
// begin enemy_source := enemy_source - barracks_cost ;
2023: LD_ADDR_EXP 5
2027: PUSH
2028: LD_EXP 5
2032: PUSH
2033: LD_EXP 13
2037: MINUS
2038: ST_TO_ADDR
// SetResourceType ( enemy_depot , mat_cans , enemy_source ) ;
2039: LD_VAR 0 3
2043: PPUSH
2044: LD_INT 1
2046: PPUSH
2047: LD_EXP 5
2051: PPUSH
2052: CALL_OW 277
// end else
2056: GO 2118
// if GetSide ( b ) = 1 then
2058: LD_VAR 0 1
2062: PPUSH
2063: CALL_OW 255
2067: PUSH
2068: LD_INT 1
2070: EQUAL
2071: IFFALSE 2118
// begin if your_source >= barracks_cost then
2073: LD_EXP 4
2077: PUSH
2078: LD_EXP 13
2082: GREATEREQUAL
2083: IFFALSE 2118
// begin your_source := your_source - barracks_cost ;
2085: LD_ADDR_EXP 4
2089: PUSH
2090: LD_EXP 4
2094: PUSH
2095: LD_EXP 13
2099: MINUS
2100: ST_TO_ADDR
// SetResourceType ( your_depot , mat_cans , your_source ) ;
2101: LD_VAR 0 2
2105: PPUSH
2106: LD_INT 1
2108: PPUSH
2109: LD_EXP 4
2113: PPUSH
2114: CALL_OW 277
// end ; end ; end ; b_factory :
2118: GO 2363
2120: LD_INT 3
2122: DOUBLE
2123: EQUAL
2124: IFTRUE 2128
2126: GO 2241
2128: POP
// begin if GetSide ( b ) = 2 then
2129: LD_VAR 0 1
2133: PPUSH
2134: CALL_OW 255
2138: PUSH
2139: LD_INT 2
2141: EQUAL
2142: IFFALSE 2179
// begin enemy_source := enemy_source - fac_cost ;
2144: LD_ADDR_EXP 5
2148: PUSH
2149: LD_EXP 5
2153: PUSH
2154: LD_EXP 20
2158: MINUS
2159: ST_TO_ADDR
// SetResourceType ( enemy_depot , mat_cans , enemy_source ) ;
2160: LD_VAR 0 3
2164: PPUSH
2165: LD_INT 1
2167: PPUSH
2168: LD_EXP 5
2172: PPUSH
2173: CALL_OW 277
// end else
2177: GO 2239
// if GetSide ( b ) = 1 then
2179: LD_VAR 0 1
2183: PPUSH
2184: CALL_OW 255
2188: PUSH
2189: LD_INT 1
2191: EQUAL
2192: IFFALSE 2239
// begin if your_source >= fac_cost then
2194: LD_EXP 4
2198: PUSH
2199: LD_EXP 20
2203: GREATEREQUAL
2204: IFFALSE 2239
// begin your_source := your_source - fac_cost ;
2206: LD_ADDR_EXP 4
2210: PUSH
2211: LD_EXP 4
2215: PUSH
2216: LD_EXP 20
2220: MINUS
2221: ST_TO_ADDR
// SetResourceType ( your_depot , mat_cans , your_source ) ;
2222: LD_VAR 0 2
2226: PPUSH
2227: LD_INT 1
2229: PPUSH
2230: LD_EXP 4
2234: PPUSH
2235: CALL_OW 277
// end ; end ; end ; b_lab_weapon :
2239: GO 2363
2241: LD_INT 10
2243: DOUBLE
2244: EQUAL
2245: IFTRUE 2249
2247: GO 2362
2249: POP
// begin if GetSide ( b ) = 2 then
2250: LD_VAR 0 1
2254: PPUSH
2255: CALL_OW 255
2259: PUSH
2260: LD_INT 2
2262: EQUAL
2263: IFFALSE 2300
// begin enemy_source := enemy_source - labw_cost ;
2265: LD_ADDR_EXP 5
2269: PUSH
2270: LD_EXP 5
2274: PUSH
2275: LD_EXP 15
2279: MINUS
2280: ST_TO_ADDR
// SetResourceType ( enemy_depot , mat_cans , enemy_source ) ;
2281: LD_VAR 0 3
2285: PPUSH
2286: LD_INT 1
2288: PPUSH
2289: LD_EXP 5
2293: PPUSH
2294: CALL_OW 277
// end else
2298: GO 2360
// if GetSide ( b ) = 1 then
2300: LD_VAR 0 1
2304: PPUSH
2305: CALL_OW 255
2309: PUSH
2310: LD_INT 1
2312: EQUAL
2313: IFFALSE 2360
// begin if your_source >= labw_cost then
2315: LD_EXP 4
2319: PUSH
2320: LD_EXP 15
2324: GREATEREQUAL
2325: IFFALSE 2360
// begin your_source := your_source - labw_cost ;
2327: LD_ADDR_EXP 4
2331: PUSH
2332: LD_EXP 4
2336: PUSH
2337: LD_EXP 15
2341: MINUS
2342: ST_TO_ADDR
// SetResourceType ( your_depot , mat_cans , your_source ) ;
2343: LD_VAR 0 2
2347: PPUSH
2348: LD_INT 1
2350: PPUSH
2351: LD_EXP 4
2355: PPUSH
2356: CALL_OW 277
// end ; end ; end ; end ;
2360: GO 2363
2362: POP
// end ;
2363: PPOPN 3
2365: END
// on LeaveBuilding ( b , un ) do begin if GetSide ( un ) = your_side then
2366: LD_VAR 0 2
2370: PPUSH
2371: CALL_OW 255
2375: PUSH
2376: LD_OWVAR 2
2380: EQUAL
2381: IFFALSE 2397
// SetSide ( un , 6 ) else
2383: LD_VAR 0 2
2387: PPUSH
2388: LD_INT 6
2390: PPUSH
2391: CALL_OW 235
2395: GO 2409
// SetSide ( un , 3 ) ;
2397: LD_VAR 0 2
2401: PPUSH
2402: LD_INT 3
2404: PPUSH
2405: CALL_OW 235
// end ;
2409: PPOPN 2
2411: END
// on UnitDestroyed ( un ) do var i , depot ;
2412: LD_INT 0
2414: PPUSH
2415: PPUSH
// begin RemoveUnit ( un ) ;
2416: LD_VAR 0 1
2420: PPUSH
2421: CALL_OW 64
// if GetClass ( un ) = class_apeman then
2425: LD_VAR 0 1
2429: PPUSH
2430: CALL_OW 257
2434: PUSH
2435: LD_INT 12
2437: EQUAL
2438: IFFALSE 2654
// begin if GetSide ( un ) = 3 then
2440: LD_VAR 0 1
2444: PPUSH
2445: CALL_OW 255
2449: PUSH
2450: LD_INT 3
2452: EQUAL
2453: IFFALSE 2547
// begin your_source := your_source + 5 ;
2455: LD_ADDR_EXP 4
2459: PUSH
2460: LD_EXP 4
2464: PUSH
2465: LD_INT 5
2467: PLUS
2468: ST_TO_ADDR
// depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) [ 1 ] ;
2469: LD_ADDR_VAR 0 3
2473: PUSH
2474: LD_INT 22
2476: PUSH
2477: LD_INT 1
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: PUSH
2484: LD_INT 2
2486: PUSH
2487: LD_INT 30
2489: PUSH
2490: LD_INT 1
2492: PUSH
2493: EMPTY
2494: LIST
2495: LIST
2496: PUSH
2497: LD_INT 30
2499: PUSH
2500: LD_INT 0
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: PUSH
2507: EMPTY
2508: LIST
2509: LIST
2510: LIST
2511: PUSH
2512: EMPTY
2513: LIST
2514: LIST
2515: PPUSH
2516: CALL_OW 69
2520: PUSH
2521: LD_INT 1
2523: ARRAY
2524: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , your_source ) ;
2525: LD_VAR 0 3
2529: PPUSH
2530: CALL_OW 274
2534: PPUSH
2535: LD_INT 1
2537: PPUSH
2538: LD_EXP 4
2542: PPUSH
2543: CALL_OW 277
// end ; if GetSide ( un ) = 6 then
2547: LD_VAR 0 1
2551: PPUSH
2552: CALL_OW 255
2556: PUSH
2557: LD_INT 6
2559: EQUAL
2560: IFFALSE 2654
// begin enemy_source := enemy_source + 5 ;
2562: LD_ADDR_EXP 5
2566: PUSH
2567: LD_EXP 5
2571: PUSH
2572: LD_INT 5
2574: PLUS
2575: ST_TO_ADDR
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) [ 1 ] ;
2576: LD_ADDR_VAR 0 3
2580: PUSH
2581: LD_INT 22
2583: PUSH
2584: LD_INT 2
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: PUSH
2591: LD_INT 2
2593: PUSH
2594: LD_INT 30
2596: PUSH
2597: LD_INT 1
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PUSH
2604: LD_INT 30
2606: PUSH
2607: LD_INT 0
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: PUSH
2614: EMPTY
2615: LIST
2616: LIST
2617: LIST
2618: PUSH
2619: EMPTY
2620: LIST
2621: LIST
2622: PPUSH
2623: CALL_OW 69
2627: PUSH
2628: LD_INT 1
2630: ARRAY
2631: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , enemy_source ) ;
2632: LD_VAR 0 3
2636: PPUSH
2637: CALL_OW 274
2641: PPUSH
2642: LD_INT 1
2644: PPUSH
2645: LD_EXP 5
2649: PPUSH
2650: CALL_OW 277
// end ; end ; if GetClass ( un ) = class_apeman_soldier then
2654: LD_VAR 0 1
2658: PPUSH
2659: CALL_OW 257
2663: PUSH
2664: LD_INT 15
2666: EQUAL
2667: IFFALSE 2883
// begin if GetSide ( un ) = 3 then
2669: LD_VAR 0 1
2673: PPUSH
2674: CALL_OW 255
2678: PUSH
2679: LD_INT 3
2681: EQUAL
2682: IFFALSE 2776
// begin your_source := your_source + 10 ;
2684: LD_ADDR_EXP 4
2688: PUSH
2689: LD_EXP 4
2693: PUSH
2694: LD_INT 10
2696: PLUS
2697: ST_TO_ADDR
// depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) [ 1 ] ;
2698: LD_ADDR_VAR 0 3
2702: PUSH
2703: LD_INT 22
2705: PUSH
2706: LD_INT 1
2708: PUSH
2709: EMPTY
2710: LIST
2711: LIST
2712: PUSH
2713: LD_INT 2
2715: PUSH
2716: LD_INT 30
2718: PUSH
2719: LD_INT 1
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: PUSH
2726: LD_INT 30
2728: PUSH
2729: LD_INT 0
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: PUSH
2736: EMPTY
2737: LIST
2738: LIST
2739: LIST
2740: PUSH
2741: EMPTY
2742: LIST
2743: LIST
2744: PPUSH
2745: CALL_OW 69
2749: PUSH
2750: LD_INT 1
2752: ARRAY
2753: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , your_source ) ;
2754: LD_VAR 0 3
2758: PPUSH
2759: CALL_OW 274
2763: PPUSH
2764: LD_INT 1
2766: PPUSH
2767: LD_EXP 4
2771: PPUSH
2772: CALL_OW 277
// end ; if GetSide ( un ) = 6 then
2776: LD_VAR 0 1
2780: PPUSH
2781: CALL_OW 255
2785: PUSH
2786: LD_INT 6
2788: EQUAL
2789: IFFALSE 2883
// begin enemy_source := enemy_source + 10 ;
2791: LD_ADDR_EXP 5
2795: PUSH
2796: LD_EXP 5
2800: PUSH
2801: LD_INT 10
2803: PLUS
2804: ST_TO_ADDR
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) [ 1 ] ;
2805: LD_ADDR_VAR 0 3
2809: PUSH
2810: LD_INT 22
2812: PUSH
2813: LD_INT 2
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: PUSH
2820: LD_INT 2
2822: PUSH
2823: LD_INT 30
2825: PUSH
2826: LD_INT 1
2828: PUSH
2829: EMPTY
2830: LIST
2831: LIST
2832: PUSH
2833: LD_INT 30
2835: PUSH
2836: LD_INT 0
2838: PUSH
2839: EMPTY
2840: LIST
2841: LIST
2842: PUSH
2843: EMPTY
2844: LIST
2845: LIST
2846: LIST
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PPUSH
2852: CALL_OW 69
2856: PUSH
2857: LD_INT 1
2859: ARRAY
2860: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , enemy_source ) ;
2861: LD_VAR 0 3
2865: PPUSH
2866: CALL_OW 274
2870: PPUSH
2871: LD_INT 1
2873: PPUSH
2874: LD_EXP 5
2878: PPUSH
2879: CALL_OW 277
// end ; end ; if GetClass ( un ) = class_soldier then
2883: LD_VAR 0 1
2887: PPUSH
2888: CALL_OW 257
2892: PUSH
2893: LD_INT 1
2895: EQUAL
2896: IFFALSE 3112
// begin if GetSide ( un ) = 3 then
2898: LD_VAR 0 1
2902: PPUSH
2903: CALL_OW 255
2907: PUSH
2908: LD_INT 3
2910: EQUAL
2911: IFFALSE 3005
// begin your_source := your_source + 20 ;
2913: LD_ADDR_EXP 4
2917: PUSH
2918: LD_EXP 4
2922: PUSH
2923: LD_INT 20
2925: PLUS
2926: ST_TO_ADDR
// depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) [ 1 ] ;
2927: LD_ADDR_VAR 0 3
2931: PUSH
2932: LD_INT 22
2934: PUSH
2935: LD_INT 1
2937: PUSH
2938: EMPTY
2939: LIST
2940: LIST
2941: PUSH
2942: LD_INT 2
2944: PUSH
2945: LD_INT 30
2947: PUSH
2948: LD_INT 1
2950: PUSH
2951: EMPTY
2952: LIST
2953: LIST
2954: PUSH
2955: LD_INT 30
2957: PUSH
2958: LD_INT 0
2960: PUSH
2961: EMPTY
2962: LIST
2963: LIST
2964: PUSH
2965: EMPTY
2966: LIST
2967: LIST
2968: LIST
2969: PUSH
2970: EMPTY
2971: LIST
2972: LIST
2973: PPUSH
2974: CALL_OW 69
2978: PUSH
2979: LD_INT 1
2981: ARRAY
2982: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , your_source ) ;
2983: LD_VAR 0 3
2987: PPUSH
2988: CALL_OW 274
2992: PPUSH
2993: LD_INT 1
2995: PPUSH
2996: LD_EXP 4
3000: PPUSH
3001: CALL_OW 277
// end ; if GetSide ( un ) = 6 then
3005: LD_VAR 0 1
3009: PPUSH
3010: CALL_OW 255
3014: PUSH
3015: LD_INT 6
3017: EQUAL
3018: IFFALSE 3112
// begin enemy_source := enemy_source + 20 ;
3020: LD_ADDR_EXP 5
3024: PUSH
3025: LD_EXP 5
3029: PUSH
3030: LD_INT 20
3032: PLUS
3033: ST_TO_ADDR
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) [ 1 ] ;
3034: LD_ADDR_VAR 0 3
3038: PUSH
3039: LD_INT 22
3041: PUSH
3042: LD_INT 2
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PUSH
3049: LD_INT 2
3051: PUSH
3052: LD_INT 30
3054: PUSH
3055: LD_INT 1
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: PUSH
3062: LD_INT 30
3064: PUSH
3065: LD_INT 0
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: PUSH
3072: EMPTY
3073: LIST
3074: LIST
3075: LIST
3076: PUSH
3077: EMPTY
3078: LIST
3079: LIST
3080: PPUSH
3081: CALL_OW 69
3085: PUSH
3086: LD_INT 1
3088: ARRAY
3089: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , enemy_source ) ;
3090: LD_VAR 0 3
3094: PPUSH
3095: CALL_OW 274
3099: PPUSH
3100: LD_INT 1
3102: PPUSH
3103: LD_EXP 5
3107: PPUSH
3108: CALL_OW 277
// end ; end ; if GetClass ( un ) = class_sniper then
3112: LD_VAR 0 1
3116: PPUSH
3117: CALL_OW 257
3121: PUSH
3122: LD_INT 5
3124: EQUAL
3125: IFFALSE 3341
// begin if GetSide ( un ) = 3 then
3127: LD_VAR 0 1
3131: PPUSH
3132: CALL_OW 255
3136: PUSH
3137: LD_INT 3
3139: EQUAL
3140: IFFALSE 3234
// begin your_source := your_source + 40 ;
3142: LD_ADDR_EXP 4
3146: PUSH
3147: LD_EXP 4
3151: PUSH
3152: LD_INT 40
3154: PLUS
3155: ST_TO_ADDR
// depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) [ 1 ] ;
3156: LD_ADDR_VAR 0 3
3160: PUSH
3161: LD_INT 22
3163: PUSH
3164: LD_INT 1
3166: PUSH
3167: EMPTY
3168: LIST
3169: LIST
3170: PUSH
3171: LD_INT 2
3173: PUSH
3174: LD_INT 30
3176: PUSH
3177: LD_INT 1
3179: PUSH
3180: EMPTY
3181: LIST
3182: LIST
3183: PUSH
3184: LD_INT 30
3186: PUSH
3187: LD_INT 0
3189: PUSH
3190: EMPTY
3191: LIST
3192: LIST
3193: PUSH
3194: EMPTY
3195: LIST
3196: LIST
3197: LIST
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PPUSH
3203: CALL_OW 69
3207: PUSH
3208: LD_INT 1
3210: ARRAY
3211: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , your_source ) ;
3212: LD_VAR 0 3
3216: PPUSH
3217: CALL_OW 274
3221: PPUSH
3222: LD_INT 1
3224: PPUSH
3225: LD_EXP 4
3229: PPUSH
3230: CALL_OW 277
// end ; if GetSide ( un ) = 6 then
3234: LD_VAR 0 1
3238: PPUSH
3239: CALL_OW 255
3243: PUSH
3244: LD_INT 6
3246: EQUAL
3247: IFFALSE 3341
// begin enemy_source := enemy_source + 40 ;
3249: LD_ADDR_EXP 5
3253: PUSH
3254: LD_EXP 5
3258: PUSH
3259: LD_INT 40
3261: PLUS
3262: ST_TO_ADDR
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) [ 1 ] ;
3263: LD_ADDR_VAR 0 3
3267: PUSH
3268: LD_INT 22
3270: PUSH
3271: LD_INT 2
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: PUSH
3278: LD_INT 2
3280: PUSH
3281: LD_INT 30
3283: PUSH
3284: LD_INT 1
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PUSH
3291: LD_INT 30
3293: PUSH
3294: LD_INT 0
3296: PUSH
3297: EMPTY
3298: LIST
3299: LIST
3300: PUSH
3301: EMPTY
3302: LIST
3303: LIST
3304: LIST
3305: PUSH
3306: EMPTY
3307: LIST
3308: LIST
3309: PPUSH
3310: CALL_OW 69
3314: PUSH
3315: LD_INT 1
3317: ARRAY
3318: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , enemy_source ) ;
3319: LD_VAR 0 3
3323: PPUSH
3324: CALL_OW 274
3328: PPUSH
3329: LD_INT 1
3331: PPUSH
3332: LD_EXP 5
3336: PPUSH
3337: CALL_OW 277
// end ; end ; if GetChassis ( un ) = us_light_wheeled then
3341: LD_VAR 0 1
3345: PPUSH
3346: CALL_OW 265
3350: PUSH
3351: LD_INT 1
3353: EQUAL
3354: IFFALSE 3570
// begin if GetSide ( un ) = 3 then
3356: LD_VAR 0 1
3360: PPUSH
3361: CALL_OW 255
3365: PUSH
3366: LD_INT 3
3368: EQUAL
3369: IFFALSE 3463
// begin your_source := your_source + 35 ;
3371: LD_ADDR_EXP 4
3375: PUSH
3376: LD_EXP 4
3380: PUSH
3381: LD_INT 35
3383: PLUS
3384: ST_TO_ADDR
// depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) [ 1 ] ;
3385: LD_ADDR_VAR 0 3
3389: PUSH
3390: LD_INT 22
3392: PUSH
3393: LD_INT 1
3395: PUSH
3396: EMPTY
3397: LIST
3398: LIST
3399: PUSH
3400: LD_INT 2
3402: PUSH
3403: LD_INT 30
3405: PUSH
3406: LD_INT 1
3408: PUSH
3409: EMPTY
3410: LIST
3411: LIST
3412: PUSH
3413: LD_INT 30
3415: PUSH
3416: LD_INT 0
3418: PUSH
3419: EMPTY
3420: LIST
3421: LIST
3422: PUSH
3423: EMPTY
3424: LIST
3425: LIST
3426: LIST
3427: PUSH
3428: EMPTY
3429: LIST
3430: LIST
3431: PPUSH
3432: CALL_OW 69
3436: PUSH
3437: LD_INT 1
3439: ARRAY
3440: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , your_source ) ;
3441: LD_VAR 0 3
3445: PPUSH
3446: CALL_OW 274
3450: PPUSH
3451: LD_INT 1
3453: PPUSH
3454: LD_EXP 4
3458: PPUSH
3459: CALL_OW 277
// end ; if GetSide ( un ) = 6 then
3463: LD_VAR 0 1
3467: PPUSH
3468: CALL_OW 255
3472: PUSH
3473: LD_INT 6
3475: EQUAL
3476: IFFALSE 3570
// begin enemy_source := enemy_source + 35 ;
3478: LD_ADDR_EXP 5
3482: PUSH
3483: LD_EXP 5
3487: PUSH
3488: LD_INT 35
3490: PLUS
3491: ST_TO_ADDR
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) [ 1 ] ;
3492: LD_ADDR_VAR 0 3
3496: PUSH
3497: LD_INT 22
3499: PUSH
3500: LD_INT 2
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: PUSH
3507: LD_INT 2
3509: PUSH
3510: LD_INT 30
3512: PUSH
3513: LD_INT 1
3515: PUSH
3516: EMPTY
3517: LIST
3518: LIST
3519: PUSH
3520: LD_INT 30
3522: PUSH
3523: LD_INT 0
3525: PUSH
3526: EMPTY
3527: LIST
3528: LIST
3529: PUSH
3530: EMPTY
3531: LIST
3532: LIST
3533: LIST
3534: PUSH
3535: EMPTY
3536: LIST
3537: LIST
3538: PPUSH
3539: CALL_OW 69
3543: PUSH
3544: LD_INT 1
3546: ARRAY
3547: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , enemy_source ) ;
3548: LD_VAR 0 3
3552: PPUSH
3553: CALL_OW 274
3557: PPUSH
3558: LD_INT 1
3560: PPUSH
3561: LD_EXP 5
3565: PPUSH
3566: CALL_OW 277
// end ; end ; if GetChassis ( un ) = us_medium_wheeled then
3570: LD_VAR 0 1
3574: PPUSH
3575: CALL_OW 265
3579: PUSH
3580: LD_INT 2
3582: EQUAL
3583: IFFALSE 3799
// begin if GetSide ( un ) = 3 then
3585: LD_VAR 0 1
3589: PPUSH
3590: CALL_OW 255
3594: PUSH
3595: LD_INT 3
3597: EQUAL
3598: IFFALSE 3692
// begin your_source := your_source + 75 ;
3600: LD_ADDR_EXP 4
3604: PUSH
3605: LD_EXP 4
3609: PUSH
3610: LD_INT 75
3612: PLUS
3613: ST_TO_ADDR
// depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) [ 1 ] ;
3614: LD_ADDR_VAR 0 3
3618: PUSH
3619: LD_INT 22
3621: PUSH
3622: LD_INT 1
3624: PUSH
3625: EMPTY
3626: LIST
3627: LIST
3628: PUSH
3629: LD_INT 2
3631: PUSH
3632: LD_INT 30
3634: PUSH
3635: LD_INT 1
3637: PUSH
3638: EMPTY
3639: LIST
3640: LIST
3641: PUSH
3642: LD_INT 30
3644: PUSH
3645: LD_INT 0
3647: PUSH
3648: EMPTY
3649: LIST
3650: LIST
3651: PUSH
3652: EMPTY
3653: LIST
3654: LIST
3655: LIST
3656: PUSH
3657: EMPTY
3658: LIST
3659: LIST
3660: PPUSH
3661: CALL_OW 69
3665: PUSH
3666: LD_INT 1
3668: ARRAY
3669: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , your_source ) ;
3670: LD_VAR 0 3
3674: PPUSH
3675: CALL_OW 274
3679: PPUSH
3680: LD_INT 1
3682: PPUSH
3683: LD_EXP 4
3687: PPUSH
3688: CALL_OW 277
// end ; if GetSide ( un ) = 6 then
3692: LD_VAR 0 1
3696: PPUSH
3697: CALL_OW 255
3701: PUSH
3702: LD_INT 6
3704: EQUAL
3705: IFFALSE 3799
// begin enemy_source := enemy_source + 75 ;
3707: LD_ADDR_EXP 5
3711: PUSH
3712: LD_EXP 5
3716: PUSH
3717: LD_INT 75
3719: PLUS
3720: ST_TO_ADDR
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) [ 1 ] ;
3721: LD_ADDR_VAR 0 3
3725: PUSH
3726: LD_INT 22
3728: PUSH
3729: LD_INT 2
3731: PUSH
3732: EMPTY
3733: LIST
3734: LIST
3735: PUSH
3736: LD_INT 2
3738: PUSH
3739: LD_INT 30
3741: PUSH
3742: LD_INT 1
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: PUSH
3749: LD_INT 30
3751: PUSH
3752: LD_INT 0
3754: PUSH
3755: EMPTY
3756: LIST
3757: LIST
3758: PUSH
3759: EMPTY
3760: LIST
3761: LIST
3762: LIST
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: PPUSH
3768: CALL_OW 69
3772: PUSH
3773: LD_INT 1
3775: ARRAY
3776: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , enemy_source ) ;
3777: LD_VAR 0 3
3781: PPUSH
3782: CALL_OW 274
3786: PPUSH
3787: LD_INT 1
3789: PPUSH
3790: LD_EXP 5
3794: PPUSH
3795: CALL_OW 277
// end ; end ; if GetChassis ( un ) = us_heavy_tracked then
3799: LD_VAR 0 1
3803: PPUSH
3804: CALL_OW 265
3808: PUSH
3809: LD_INT 4
3811: EQUAL
3812: IFFALSE 4028
// begin if GetSide ( un ) = 3 then
3814: LD_VAR 0 1
3818: PPUSH
3819: CALL_OW 255
3823: PUSH
3824: LD_INT 3
3826: EQUAL
3827: IFFALSE 3921
// begin your_source := your_source + 135 ;
3829: LD_ADDR_EXP 4
3833: PUSH
3834: LD_EXP 4
3838: PUSH
3839: LD_INT 135
3841: PLUS
3842: ST_TO_ADDR
// depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) [ 1 ] ;
3843: LD_ADDR_VAR 0 3
3847: PUSH
3848: LD_INT 22
3850: PUSH
3851: LD_INT 1
3853: PUSH
3854: EMPTY
3855: LIST
3856: LIST
3857: PUSH
3858: LD_INT 2
3860: PUSH
3861: LD_INT 30
3863: PUSH
3864: LD_INT 1
3866: PUSH
3867: EMPTY
3868: LIST
3869: LIST
3870: PUSH
3871: LD_INT 30
3873: PUSH
3874: LD_INT 0
3876: PUSH
3877: EMPTY
3878: LIST
3879: LIST
3880: PUSH
3881: EMPTY
3882: LIST
3883: LIST
3884: LIST
3885: PUSH
3886: EMPTY
3887: LIST
3888: LIST
3889: PPUSH
3890: CALL_OW 69
3894: PUSH
3895: LD_INT 1
3897: ARRAY
3898: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , your_source ) ;
3899: LD_VAR 0 3
3903: PPUSH
3904: CALL_OW 274
3908: PPUSH
3909: LD_INT 1
3911: PPUSH
3912: LD_EXP 4
3916: PPUSH
3917: CALL_OW 277
// end ; if GetSide ( un ) = 6 then
3921: LD_VAR 0 1
3925: PPUSH
3926: CALL_OW 255
3930: PUSH
3931: LD_INT 6
3933: EQUAL
3934: IFFALSE 4028
// begin enemy_source := enemy_source + 135 ;
3936: LD_ADDR_EXP 5
3940: PUSH
3941: LD_EXP 5
3945: PUSH
3946: LD_INT 135
3948: PLUS
3949: ST_TO_ADDR
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) [ 1 ] ;
3950: LD_ADDR_VAR 0 3
3954: PUSH
3955: LD_INT 22
3957: PUSH
3958: LD_INT 2
3960: PUSH
3961: EMPTY
3962: LIST
3963: LIST
3964: PUSH
3965: LD_INT 2
3967: PUSH
3968: LD_INT 30
3970: PUSH
3971: LD_INT 1
3973: PUSH
3974: EMPTY
3975: LIST
3976: LIST
3977: PUSH
3978: LD_INT 30
3980: PUSH
3981: LD_INT 0
3983: PUSH
3984: EMPTY
3985: LIST
3986: LIST
3987: PUSH
3988: EMPTY
3989: LIST
3990: LIST
3991: LIST
3992: PUSH
3993: EMPTY
3994: LIST
3995: LIST
3996: PPUSH
3997: CALL_OW 69
4001: PUSH
4002: LD_INT 1
4004: ARRAY
4005: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , enemy_source ) ;
4006: LD_VAR 0 3
4010: PPUSH
4011: CALL_OW 274
4015: PPUSH
4016: LD_INT 1
4018: PPUSH
4019: LD_EXP 5
4023: PPUSH
4024: CALL_OW 277
// end ; end ; end ;
4028: PPOPN 3
4030: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_lab ] ] ) > 0 do var filter , i ;
4031: LD_INT 22
4033: PUSH
4034: LD_OWVAR 2
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: PUSH
4043: LD_INT 30
4045: PUSH
4046: LD_INT 6
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: PUSH
4053: EMPTY
4054: LIST
4055: LIST
4056: PPUSH
4057: CALL_OW 69
4061: PUSH
4062: LD_INT 0
4064: GREATER
4065: IFFALSE 4189
4067: GO 4069
4069: DISABLE
4070: LD_INT 0
4072: PPUSH
4073: PPUSH
// begin enable ;
4074: ENABLE
// filter := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
4075: LD_ADDR_VAR 0 1
4079: PUSH
4080: LD_INT 22
4082: PUSH
4083: LD_OWVAR 2
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: PUSH
4092: LD_INT 21
4094: PUSH
4095: LD_INT 1
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: PPUSH
4106: CALL_OW 69
4110: ST_TO_ADDR
// for i = 1 to filter do
4111: LD_ADDR_VAR 0 2
4115: PUSH
4116: DOUBLE
4117: LD_INT 1
4119: DEC
4120: ST_TO_ADDR
4121: LD_VAR 0 1
4125: PUSH
4126: FOR_TO
4127: IFFALSE 4187
// if GetLives ( filter [ i ] ) < 900 then
4129: LD_VAR 0 1
4133: PUSH
4134: LD_VAR 0 2
4138: ARRAY
4139: PPUSH
4140: CALL_OW 256
4144: PUSH
4145: LD_INT 900
4147: LESS
4148: IFFALSE 4185
// SetLives ( filter [ i ] , GetLives ( filter [ i ] ) + 60 ) ;
4150: LD_VAR 0 1
4154: PUSH
4155: LD_VAR 0 2
4159: ARRAY
4160: PPUSH
4161: LD_VAR 0 1
4165: PUSH
4166: LD_VAR 0 2
4170: ARRAY
4171: PPUSH
4172: CALL_OW 256
4176: PUSH
4177: LD_INT 60
4179: PLUS
4180: PPUSH
4181: CALL_OW 234
4185: GO 4126
4187: POP
4188: POP
// end ;
4189: PPOPN 2
4191: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) > 0 do var filter , i ;
4192: LD_INT 22
4194: PUSH
4195: LD_INT 2
4197: PUSH
4198: EMPTY
4199: LIST
4200: LIST
4201: PUSH
4202: LD_INT 30
4204: PUSH
4205: LD_INT 6
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PPUSH
4216: CALL_OW 69
4220: PUSH
4221: LD_INT 0
4223: GREATER
4224: IFFALSE 4346
4226: GO 4228
4228: DISABLE
4229: LD_INT 0
4231: PPUSH
4232: PPUSH
// begin enable ;
4233: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
4234: LD_ADDR_VAR 0 1
4238: PUSH
4239: LD_INT 22
4241: PUSH
4242: LD_INT 2
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: PUSH
4249: LD_INT 21
4251: PUSH
4252: LD_INT 1
4254: PUSH
4255: EMPTY
4256: LIST
4257: LIST
4258: PUSH
4259: EMPTY
4260: LIST
4261: LIST
4262: PPUSH
4263: CALL_OW 69
4267: ST_TO_ADDR
// for i = 1 to filter do
4268: LD_ADDR_VAR 0 2
4272: PUSH
4273: DOUBLE
4274: LD_INT 1
4276: DEC
4277: ST_TO_ADDR
4278: LD_VAR 0 1
4282: PUSH
4283: FOR_TO
4284: IFFALSE 4344
// if GetLives ( filter [ i ] ) < 980 then
4286: LD_VAR 0 1
4290: PUSH
4291: LD_VAR 0 2
4295: ARRAY
4296: PPUSH
4297: CALL_OW 256
4301: PUSH
4302: LD_INT 980
4304: LESS
4305: IFFALSE 4342
// SetLives ( filter [ i ] , GetLives ( filter [ i ] ) + 20 ) ;
4307: LD_VAR 0 1
4311: PUSH
4312: LD_VAR 0 2
4316: ARRAY
4317: PPUSH
4318: LD_VAR 0 1
4322: PUSH
4323: LD_VAR 0 2
4327: ARRAY
4328: PPUSH
4329: CALL_OW 256
4333: PUSH
4334: LD_INT 20
4336: PLUS
4337: PPUSH
4338: CALL_OW 234
4342: GO 4283
4344: POP
4345: POP
// end ;
4346: PPOPN 2
4348: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] ] ) > 0 do var filter , i ;
4349: LD_INT 22
4351: PUSH
4352: LD_OWVAR 2
4356: PUSH
4357: EMPTY
4358: LIST
4359: LIST
4360: PUSH
4361: EMPTY
4362: LIST
4363: PPUSH
4364: CALL_OW 69
4368: PUSH
4369: LD_INT 0
4371: GREATER
4372: IFFALSE 4496
4374: GO 4376
4376: DISABLE
4377: LD_INT 0
4379: PPUSH
4380: PPUSH
// begin enable ;
4381: ENABLE
// filter := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
4382: LD_ADDR_VAR 0 1
4386: PUSH
4387: LD_INT 22
4389: PUSH
4390: LD_OWVAR 2
4394: PUSH
4395: EMPTY
4396: LIST
4397: LIST
4398: PUSH
4399: LD_INT 21
4401: PUSH
4402: LD_INT 3
4404: PUSH
4405: EMPTY
4406: LIST
4407: LIST
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: PPUSH
4413: CALL_OW 69
4417: ST_TO_ADDR
// for i = 1 to filter do
4418: LD_ADDR_VAR 0 2
4422: PUSH
4423: DOUBLE
4424: LD_INT 1
4426: DEC
4427: ST_TO_ADDR
4428: LD_VAR 0 1
4432: PUSH
4433: FOR_TO
4434: IFFALSE 4494
// if GetLives ( filter [ i ] ) < 999 then
4436: LD_VAR 0 1
4440: PUSH
4441: LD_VAR 0 2
4445: ARRAY
4446: PPUSH
4447: CALL_OW 256
4451: PUSH
4452: LD_INT 999
4454: LESS
4455: IFFALSE 4492
// SetLives ( filter [ i ] , GetLives ( filter [ i ] ) + 1 ) ;
4457: LD_VAR 0 1
4461: PUSH
4462: LD_VAR 0 2
4466: ARRAY
4467: PPUSH
4468: LD_VAR 0 1
4472: PUSH
4473: LD_VAR 0 2
4477: ARRAY
4478: PPUSH
4479: CALL_OW 256
4483: PUSH
4484: LD_INT 1
4486: PLUS
4487: PPUSH
4488: CALL_OW 234
4492: GO 4433
4494: POP
4495: POP
// end ;
4496: PPOPN 2
4498: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 2 ] ] ) > 0 do var filter , i ;
4499: LD_INT 22
4501: PUSH
4502: LD_INT 2
4504: PUSH
4505: EMPTY
4506: LIST
4507: LIST
4508: PUSH
4509: EMPTY
4510: LIST
4511: PPUSH
4512: CALL_OW 69
4516: PUSH
4517: LD_INT 0
4519: GREATER
4520: IFFALSE 4642
4522: GO 4524
4524: DISABLE
4525: LD_INT 0
4527: PPUSH
4528: PPUSH
// begin enable ;
4529: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) ;
4530: LD_ADDR_VAR 0 1
4534: PUSH
4535: LD_INT 22
4537: PUSH
4538: LD_INT 2
4540: PUSH
4541: EMPTY
4542: LIST
4543: LIST
4544: PUSH
4545: LD_INT 21
4547: PUSH
4548: LD_INT 3
4550: PUSH
4551: EMPTY
4552: LIST
4553: LIST
4554: PUSH
4555: EMPTY
4556: LIST
4557: LIST
4558: PPUSH
4559: CALL_OW 69
4563: ST_TO_ADDR
// for i = 1 to filter do
4564: LD_ADDR_VAR 0 2
4568: PUSH
4569: DOUBLE
4570: LD_INT 1
4572: DEC
4573: ST_TO_ADDR
4574: LD_VAR 0 1
4578: PUSH
4579: FOR_TO
4580: IFFALSE 4640
// if GetLives ( filter [ i ] ) < 999 then
4582: LD_VAR 0 1
4586: PUSH
4587: LD_VAR 0 2
4591: ARRAY
4592: PPUSH
4593: CALL_OW 256
4597: PUSH
4598: LD_INT 999
4600: LESS
4601: IFFALSE 4638
// SetLives ( filter [ i ] , GetLives ( filter [ i ] ) + 1 ) ;
4603: LD_VAR 0 1
4607: PUSH
4608: LD_VAR 0 2
4612: ARRAY
4613: PPUSH
4614: LD_VAR 0 1
4618: PUSH
4619: LD_VAR 0 2
4623: ARRAY
4624: PPUSH
4625: CALL_OW 256
4629: PUSH
4630: LD_INT 1
4632: PLUS
4633: PPUSH
4634: CALL_OW 234
4638: GO 4579
4640: POP
4641: POP
// end ;
4642: PPOPN 2
4644: END
// every 10 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) > 0 do var war ;
4645: LD_INT 22
4647: PUSH
4648: LD_OWVAR 2
4652: PUSH
4653: EMPTY
4654: LIST
4655: LIST
4656: PUSH
4657: LD_INT 2
4659: PUSH
4660: LD_INT 30
4662: PUSH
4663: LD_INT 1
4665: PUSH
4666: EMPTY
4667: LIST
4668: LIST
4669: PUSH
4670: LD_INT 30
4672: PUSH
4673: LD_INT 0
4675: PUSH
4676: EMPTY
4677: LIST
4678: LIST
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: LIST
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: PPUSH
4689: CALL_OW 69
4693: PUSH
4694: LD_INT 0
4696: GREATER
4697: IFFALSE 5818
4699: GO 4701
4701: DISABLE
4702: LD_INT 0
4704: PPUSH
// begin enable ;
4705: ENABLE
// if FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) > 0 then
4706: LD_INT 22
4708: PUSH
4709: LD_OWVAR 2
4713: PUSH
4714: EMPTY
4715: LIST
4716: LIST
4717: PUSH
4718: LD_INT 30
4720: PUSH
4721: LD_INT 1
4723: PUSH
4724: EMPTY
4725: LIST
4726: LIST
4727: PUSH
4728: EMPTY
4729: LIST
4730: LIST
4731: PPUSH
4732: CALL_OW 69
4736: PUSH
4737: LD_INT 0
4739: GREATER
4740: IFFALSE 4752
// war := true else
4742: LD_ADDR_VAR 0 1
4746: PUSH
4747: LD_INT 1
4749: ST_TO_ADDR
4750: GO 4760
// war := false ;
4752: LD_ADDR_VAR 0 1
4756: PUSH
4757: LD_INT 0
4759: ST_TO_ADDR
// if your_source >= depot_cost then
4760: LD_EXP 4
4764: PUSH
4765: LD_EXP 11
4769: GREATEREQUAL
4770: IFFALSE 4789
// SetRestrict ( b_warehouse , your_side , state_enabled ) else
4772: LD_INT 1
4774: PPUSH
4775: LD_OWVAR 2
4779: PPUSH
4780: LD_INT 1
4782: PPUSH
4783: CALL_OW 324
4787: GO 4804
// SetRestrict ( b_warehouse , your_side , state_disabled ) ;
4789: LD_INT 1
4791: PPUSH
4792: LD_OWVAR 2
4796: PPUSH
4797: LD_INT 0
4799: PPUSH
4800: CALL_OW 324
// if your_source >= armoury_cost then
4804: LD_EXP 4
4808: PUSH
4809: LD_EXP 12
4813: GREATEREQUAL
4814: IFFALSE 4833
// SetRestrict ( b_armoury , your_side , state_enabled ) else
4816: LD_INT 4
4818: PPUSH
4819: LD_OWVAR 2
4823: PPUSH
4824: LD_INT 1
4826: PPUSH
4827: CALL_OW 324
4831: GO 4848
// SetRestrict ( b_armoury , your_side , state_disabled ) ;
4833: LD_INT 4
4835: PPUSH
4836: LD_OWVAR 2
4840: PPUSH
4841: LD_INT 0
4843: PPUSH
4844: CALL_OW 324
// if your_source >= barracks_cost and war then
4848: LD_EXP 4
4852: PUSH
4853: LD_EXP 13
4857: GREATEREQUAL
4858: PUSH
4859: LD_VAR 0 1
4863: AND
4864: IFFALSE 4883
// SetRestrict ( b_barracks , your_side , state_enabled ) else
4866: LD_INT 5
4868: PPUSH
4869: LD_OWVAR 2
4873: PPUSH
4874: LD_INT 1
4876: PPUSH
4877: CALL_OW 324
4881: GO 4898
// SetRestrict ( b_barracks , your_side , state_disabled ) ;
4883: LD_INT 5
4885: PPUSH
4886: LD_OWVAR 2
4890: PPUSH
4891: LD_INT 0
4893: PPUSH
4894: CALL_OW 324
// if your_source >= lab_cost then
4898: LD_EXP 4
4902: PUSH
4903: LD_EXP 14
4907: GREATEREQUAL
4908: IFFALSE 4927
// SetRestrict ( b_lab , your_side , state_enabled ) else
4910: LD_INT 6
4912: PPUSH
4913: LD_OWVAR 2
4917: PPUSH
4918: LD_INT 1
4920: PPUSH
4921: CALL_OW 324
4925: GO 4942
// SetRestrict ( b_lab , your_side , state_disabled ) ;
4927: LD_INT 6
4929: PPUSH
4930: LD_OWVAR 2
4934: PPUSH
4935: LD_INT 0
4937: PPUSH
4938: CALL_OW 324
// if your_source >= labw_cost and war then
4942: LD_EXP 4
4946: PUSH
4947: LD_EXP 15
4951: GREATEREQUAL
4952: PUSH
4953: LD_VAR 0 1
4957: AND
4958: IFFALSE 4977
// SetRestrict ( b_lab_weapon , your_side , state_enabled ) else
4960: LD_INT 10
4962: PPUSH
4963: LD_OWVAR 2
4967: PPUSH
4968: LD_INT 1
4970: PPUSH
4971: CALL_OW 324
4975: GO 4992
// SetRestrict ( b_lab_weapon , your_side , state_disabled ) ;
4977: LD_INT 10
4979: PPUSH
4980: LD_OWVAR 2
4984: PPUSH
4985: LD_INT 0
4987: PPUSH
4988: CALL_OW 324
// if your_source >= labo_cost and war then
4992: LD_EXP 4
4996: PUSH
4997: LD_EXP 18
5001: GREATEREQUAL
5002: PUSH
5003: LD_VAR 0 1
5007: AND
5008: IFFALSE 5027
// SetRestrict ( b_lab_opto , your_side , state_enabled ) else
5010: LD_INT 15
5012: PPUSH
5013: LD_OWVAR 2
5017: PPUSH
5018: LD_INT 1
5020: PPUSH
5021: CALL_OW 324
5025: GO 5042
// SetRestrict ( b_lab_opto , your_side , state_disabled ) ;
5027: LD_INT 15
5029: PPUSH
5030: LD_OWVAR 2
5034: PPUSH
5035: LD_INT 0
5037: PPUSH
5038: CALL_OW 324
// if your_source >= labc_cost and war then
5042: LD_EXP 4
5046: PUSH
5047: LD_EXP 17
5051: GREATEREQUAL
5052: PUSH
5053: LD_VAR 0 1
5057: AND
5058: IFFALSE 5077
// SetRestrict ( b_lab_computer , your_side , state_enabled ) else
5060: LD_INT 12
5062: PPUSH
5063: LD_OWVAR 2
5067: PPUSH
5068: LD_INT 1
5070: PPUSH
5071: CALL_OW 324
5075: GO 5092
// SetRestrict ( b_lab_computer , your_side , state_disabled ) ;
5077: LD_INT 12
5079: PPUSH
5080: LD_OWVAR 2
5084: PPUSH
5085: LD_INT 0
5087: PPUSH
5088: CALL_OW 324
// if your_source >= labs_cost and war then
5092: LD_EXP 4
5096: PUSH
5097: LD_EXP 16
5101: GREATEREQUAL
5102: PUSH
5103: LD_VAR 0 1
5107: AND
5108: IFFALSE 5127
// SetRestrict ( b_lab_siberium , your_side , state_enabled ) else
5110: LD_INT 11
5112: PPUSH
5113: LD_OWVAR 2
5117: PPUSH
5118: LD_INT 1
5120: PPUSH
5121: CALL_OW 324
5125: GO 5142
// SetRestrict ( b_lab_siberium , your_side , state_disabled ) ;
5127: LD_INT 11
5129: PPUSH
5130: LD_OWVAR 2
5134: PPUSH
5135: LD_INT 0
5137: PPUSH
5138: CALL_OW 324
// if your_source >= work_cost then
5142: LD_EXP 4
5146: PUSH
5147: LD_EXP 19
5151: GREATEREQUAL
5152: IFFALSE 5171
// SetRestrict ( b_workshop , your_side , state_enabled ) else
5154: LD_INT 2
5156: PPUSH
5157: LD_OWVAR 2
5161: PPUSH
5162: LD_INT 1
5164: PPUSH
5165: CALL_OW 324
5169: GO 5186
// SetRestrict ( b_workshop , your_side , state_disabled ) ;
5171: LD_INT 2
5173: PPUSH
5174: LD_OWVAR 2
5178: PPUSH
5179: LD_INT 0
5181: PPUSH
5182: CALL_OW 324
// if your_source >= fac_cost and war then
5186: LD_EXP 4
5190: PUSH
5191: LD_EXP 20
5195: GREATEREQUAL
5196: PUSH
5197: LD_VAR 0 1
5201: AND
5202: IFFALSE 5221
// SetRestrict ( b_factory , your_side , state_enabled ) else
5204: LD_INT 3
5206: PPUSH
5207: LD_OWVAR 2
5211: PPUSH
5212: LD_INT 1
5214: PPUSH
5215: CALL_OW 324
5219: GO 5236
// SetRestrict ( b_factory , your_side , state_disabled ) ;
5221: LD_INT 3
5223: PPUSH
5224: LD_OWVAR 2
5228: PPUSH
5229: LD_INT 0
5231: PPUSH
5232: CALL_OW 324
// if your_source >= faclaser_cost and war then
5236: LD_EXP 4
5240: PUSH
5241: LD_EXP 21
5245: GREATEREQUAL
5246: PUSH
5247: LD_VAR 0 1
5251: AND
5252: IFFALSE 5271
// SetRestrict ( b_ext_laser , your_side , state_enabled ) else
5254: LD_INT 25
5256: PPUSH
5257: LD_OWVAR 2
5261: PPUSH
5262: LD_INT 1
5264: PPUSH
5265: CALL_OW 324
5269: GO 5286
// SetRestrict ( b_ext_laser , your_side , state_disabled ) ;
5271: LD_INT 25
5273: PPUSH
5274: LD_OWVAR 2
5278: PPUSH
5279: LD_INT 0
5281: PPUSH
5282: CALL_OW 324
// if your_source >= facgun_cost and war then
5286: LD_EXP 4
5290: PUSH
5291: LD_EXP 26
5295: GREATEREQUAL
5296: PUSH
5297: LD_VAR 0 1
5301: AND
5302: IFFALSE 5321
// SetRestrict ( b_ext_gun , your_side , state_enabled ) else
5304: LD_INT 17
5306: PPUSH
5307: LD_OWVAR 2
5311: PPUSH
5312: LD_INT 1
5314: PPUSH
5315: CALL_OW 324
5319: GO 5336
// SetRestrict ( b_ext_gun , your_side , state_disabled ) ;
5321: LD_INT 17
5323: PPUSH
5324: LD_OWVAR 2
5328: PPUSH
5329: LD_INT 0
5331: PPUSH
5332: CALL_OW 324
// if your_source >= facrocket_cost and war then
5336: LD_EXP 4
5340: PUSH
5341: LD_EXP 27
5345: GREATEREQUAL
5346: PUSH
5347: LD_VAR 0 1
5351: AND
5352: IFFALSE 5371
// SetRestrict ( b_ext_rocket , your_side , state_enabled ) else
5354: LD_INT 18
5356: PPUSH
5357: LD_OWVAR 2
5361: PPUSH
5362: LD_INT 1
5364: PPUSH
5365: CALL_OW 324
5369: GO 5386
// SetRestrict ( b_ext_rocket , your_side , state_disabled ) ;
5371: LD_INT 18
5373: PPUSH
5374: LD_OWVAR 2
5378: PPUSH
5379: LD_INT 0
5381: PPUSH
5382: CALL_OW 324
// if your_source >= facradar_cost and war then
5386: LD_EXP 4
5390: PUSH
5391: LD_EXP 22
5395: GREATEREQUAL
5396: PUSH
5397: LD_VAR 0 1
5401: AND
5402: IFFALSE 5421
// SetRestrict ( b_ext_radar , your_side , state_enabled ) else
5404: LD_INT 20
5406: PPUSH
5407: LD_OWVAR 2
5411: PPUSH
5412: LD_INT 1
5414: PPUSH
5415: CALL_OW 324
5419: GO 5436
// SetRestrict ( b_ext_radar , your_side , state_disabled ) ;
5421: LD_INT 20
5423: PPUSH
5424: LD_OWVAR 2
5428: PPUSH
5429: LD_INT 0
5431: PPUSH
5432: CALL_OW 324
// if your_source >= factrack_cost and war then
5436: LD_EXP 4
5440: PUSH
5441: LD_EXP 23
5445: GREATEREQUAL
5446: PUSH
5447: LD_VAR 0 1
5451: AND
5452: IFFALSE 5471
// SetRestrict ( b_ext_track , your_side , state_enabled ) else
5454: LD_INT 16
5456: PPUSH
5457: LD_OWVAR 2
5461: PPUSH
5462: LD_INT 1
5464: PPUSH
5465: CALL_OW 324
5469: GO 5486
// SetRestrict ( b_ext_track , your_side , state_disabled ) ;
5471: LD_INT 16
5473: PPUSH
5474: LD_OWVAR 2
5478: PPUSH
5479: LD_INT 0
5481: PPUSH
5482: CALL_OW 324
// if your_source >= facnon_cost and war then
5486: LD_EXP 4
5490: PUSH
5491: LD_EXP 32
5495: GREATEREQUAL
5496: PUSH
5497: LD_VAR 0 1
5501: AND
5502: IFFALSE 5521
// SetRestrict ( b_ext_noncombat , your_side , state_enabled ) else
5504: LD_INT 19
5506: PPUSH
5507: LD_OWVAR 2
5511: PPUSH
5512: LD_INT 1
5514: PPUSH
5515: CALL_OW 324
5519: GO 5536
// SetRestrict ( b_ext_noncombat , your_side , state_disabled ) ;
5521: LD_INT 19
5523: PPUSH
5524: LD_OWVAR 2
5528: PPUSH
5529: LD_INT 0
5531: PPUSH
5532: CALL_OW 324
// if your_source >= faccomp_cost and war then
5536: LD_EXP 4
5540: PUSH
5541: LD_EXP 24
5545: GREATEREQUAL
5546: PUSH
5547: LD_VAR 0 1
5551: AND
5552: IFFALSE 5571
// SetRestrict ( b_ext_computer , your_side , state_enabled ) else
5554: LD_INT 24
5556: PPUSH
5557: LD_OWVAR 2
5561: PPUSH
5562: LD_INT 1
5564: PPUSH
5565: CALL_OW 324
5569: GO 5586
// SetRestrict ( b_ext_computer , your_side , state_disabled ) ;
5571: LD_INT 24
5573: PPUSH
5574: LD_OWVAR 2
5578: PPUSH
5579: LD_INT 0
5581: PPUSH
5582: CALL_OW 324
// if your_source >= facsib_cost and war then
5586: LD_EXP 4
5590: PUSH
5591: LD_EXP 25
5595: GREATEREQUAL
5596: PUSH
5597: LD_VAR 0 1
5601: AND
5602: IFFALSE 5621
// SetRestrict ( b_ext_siberium , your_side , state_enabled ) else
5604: LD_INT 21
5606: PPUSH
5607: LD_OWVAR 2
5611: PPUSH
5612: LD_INT 1
5614: PPUSH
5615: CALL_OW 324
5619: GO 5636
// SetRestrict ( b_ext_siberium , your_side , state_disabled ) ;
5621: LD_INT 21
5623: PPUSH
5624: LD_OWVAR 2
5628: PPUSH
5629: LD_INT 0
5631: PPUSH
5632: CALL_OW 324
// if your_source >= ct_cost and war then
5636: LD_EXP 4
5640: PUSH
5641: LD_EXP 28
5645: GREATEREQUAL
5646: PUSH
5647: LD_VAR 0 1
5651: AND
5652: IFFALSE 5671
// SetRestrict ( b_control_tower , your_side , state_enabled ) else
5654: LD_INT 36
5656: PPUSH
5657: LD_OWVAR 2
5661: PPUSH
5662: LD_INT 1
5664: PPUSH
5665: CALL_OW 324
5669: GO 5686
// SetRestrict ( b_control_tower , your_side , state_disabled ) ;
5671: LD_INT 36
5673: PPUSH
5674: LD_OWVAR 2
5678: PPUSH
5679: LD_INT 0
5681: PPUSH
5682: CALL_OW 324
// if your_source >= bunker_cost then
5686: LD_EXP 4
5690: PUSH
5691: LD_EXP 29
5695: GREATEREQUAL
5696: IFFALSE 5715
// SetRestrict ( b_breastwork , your_side , state_enabled ) else
5698: LD_INT 31
5700: PPUSH
5701: LD_OWVAR 2
5705: PPUSH
5706: LD_INT 1
5708: PPUSH
5709: CALL_OW 324
5713: GO 5730
// SetRestrict ( b_breastwork , your_side , state_disabled ) ;
5715: LD_INT 31
5717: PPUSH
5718: LD_OWVAR 2
5722: PPUSH
5723: LD_INT 0
5725: PPUSH
5726: CALL_OW 324
// if your_source >= mtower_cost then
5730: LD_EXP 4
5734: PUSH
5735: LD_EXP 30
5739: GREATEREQUAL
5740: IFFALSE 5759
// SetRestrict ( b_bunker , your_side , state_enabled ) else
5742: LD_INT 32
5744: PPUSH
5745: LD_OWVAR 2
5749: PPUSH
5750: LD_INT 1
5752: PPUSH
5753: CALL_OW 324
5757: GO 5774
// SetRestrict ( b_bunker , your_side , state_disabled ) ;
5759: LD_INT 32
5761: PPUSH
5762: LD_OWVAR 2
5766: PPUSH
5767: LD_INT 0
5769: PPUSH
5770: CALL_OW 324
// if your_source >= atower_cost then
5774: LD_EXP 4
5778: PUSH
5779: LD_EXP 31
5783: GREATEREQUAL
5784: IFFALSE 5803
// SetRestrict ( b_turret , your_side , state_enabled ) else
5786: LD_INT 33
5788: PPUSH
5789: LD_OWVAR 2
5793: PPUSH
5794: LD_INT 1
5796: PPUSH
5797: CALL_OW 324
5801: GO 5818
// SetRestrict ( b_turret , your_side , state_disabled ) ;
5803: LD_INT 33
5805: PPUSH
5806: LD_OWVAR 2
5810: PPUSH
5811: LD_INT 0
5813: PPUSH
5814: CALL_OW 324
// end ;
5818: PPOPN 1
5820: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do var your_depot ;
5821: LD_INT 22
5823: PUSH
5824: LD_OWVAR 2
5828: PUSH
5829: EMPTY
5830: LIST
5831: LIST
5832: PUSH
5833: LD_INT 2
5835: PUSH
5836: LD_INT 30
5838: PUSH
5839: LD_INT 0
5841: PUSH
5842: EMPTY
5843: LIST
5844: LIST
5845: PUSH
5846: LD_INT 30
5848: PUSH
5849: LD_INT 1
5851: PUSH
5852: EMPTY
5853: LIST
5854: LIST
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: LIST
5860: PUSH
5861: EMPTY
5862: LIST
5863: LIST
5864: PPUSH
5865: CALL_OW 69
5869: IFFALSE 5955
5871: GO 5873
5873: DISABLE
5874: LD_INT 0
5876: PPUSH
// begin your_depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ;
5877: LD_ADDR_VAR 0 1
5881: PUSH
5882: LD_INT 22
5884: PUSH
5885: LD_OWVAR 2
5889: PUSH
5890: EMPTY
5891: LIST
5892: LIST
5893: PUSH
5894: LD_INT 2
5896: PUSH
5897: LD_INT 30
5899: PUSH
5900: LD_INT 0
5902: PUSH
5903: EMPTY
5904: LIST
5905: LIST
5906: PUSH
5907: LD_INT 30
5909: PUSH
5910: LD_INT 1
5912: PUSH
5913: EMPTY
5914: LIST
5915: LIST
5916: PUSH
5917: EMPTY
5918: LIST
5919: LIST
5920: LIST
5921: PUSH
5922: EMPTY
5923: LIST
5924: LIST
5925: PPUSH
5926: CALL_OW 69
5930: PUSH
5931: LD_INT 1
5933: ARRAY
5934: ST_TO_ADDR
// SetArtifactUse ( your_side , art_use_sibexplosion , art_instant , your_depot ) ;
5935: LD_OWVAR 2
5939: PPUSH
5940: LD_INT 5
5942: PPUSH
5943: LD_INT 2
5945: PPUSH
5946: LD_VAR 0 1
5950: PPUSH
5951: CALL_OW 468
// end ;
5955: PPOPN 1
5957: END
// on ArtifactUsed ( p1 , p2 , p3 , p4 ) do var your_depot ;
5958: LD_INT 0
5960: PPUSH
// begin if p1 = your_side then
5961: LD_VAR 0 1
5965: PUSH
5966: LD_OWVAR 2
5970: EQUAL
5971: IFFALSE 6129
// begin your_depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ;
5973: LD_ADDR_VAR 0 5
5977: PUSH
5978: LD_INT 22
5980: PUSH
5981: LD_OWVAR 2
5985: PUSH
5986: EMPTY
5987: LIST
5988: LIST
5989: PUSH
5990: LD_INT 2
5992: PUSH
5993: LD_INT 30
5995: PUSH
5996: LD_INT 0
5998: PUSH
5999: EMPTY
6000: LIST
6001: LIST
6002: PUSH
6003: LD_INT 30
6005: PUSH
6006: LD_INT 1
6008: PUSH
6009: EMPTY
6010: LIST
6011: LIST
6012: PUSH
6013: EMPTY
6014: LIST
6015: LIST
6016: LIST
6017: PUSH
6018: EMPTY
6019: LIST
6020: LIST
6021: PPUSH
6022: CALL_OW 69
6026: PUSH
6027: LD_INT 1
6029: ARRAY
6030: ST_TO_ADDR
// if GetResourceType ( GetBase ( your_depot ) , mat_cans ) > 100 then
6031: LD_VAR 0 5
6035: PPUSH
6036: CALL_OW 274
6040: PPUSH
6041: LD_INT 1
6043: PPUSH
6044: CALL_OW 275
6048: PUSH
6049: LD_INT 100
6051: GREATER
6052: IFFALSE 6129
// begin your_source := your_source - 100 ;
6054: LD_ADDR_EXP 4
6058: PUSH
6059: LD_EXP 4
6063: PUSH
6064: LD_INT 100
6066: MINUS
6067: ST_TO_ADDR
// SetResourceType ( GetBase ( your_depot ) , 1 , your_source ) ;
6068: LD_VAR 0 5
6072: PPUSH
6073: CALL_OW 274
6077: PPUSH
6078: LD_INT 1
6080: PPUSH
6081: LD_EXP 4
6085: PPUSH
6086: CALL_OW 277
// SetResourceType ( GetBase ( your_depot ) , 3 , GetResourceType ( GetBase ( your_depot ) , mat_siberit ) + 10 ) ;
6090: LD_VAR 0 5
6094: PPUSH
6095: CALL_OW 274
6099: PPUSH
6100: LD_INT 3
6102: PPUSH
6103: LD_VAR 0 5
6107: PPUSH
6108: CALL_OW 274
6112: PPUSH
6113: LD_INT 3
6115: PPUSH
6116: CALL_OW 275
6120: PUSH
6121: LD_INT 10
6123: PLUS
6124: PPUSH
6125: CALL_OW 277
// end ; end ; end ;
6129: PPOPN 5
6131: END
// on ResearchStarted ( tech , lab ) do var your_depot , enemy_depot ;
6132: LD_INT 0
6134: PPUSH
6135: PPUSH
// begin your_depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ;
6136: LD_ADDR_VAR 0 3
6140: PUSH
6141: LD_INT 22
6143: PUSH
6144: LD_OWVAR 2
6148: PUSH
6149: EMPTY
6150: LIST
6151: LIST
6152: PUSH
6153: LD_INT 2
6155: PUSH
6156: LD_INT 30
6158: PUSH
6159: LD_INT 0
6161: PUSH
6162: EMPTY
6163: LIST
6164: LIST
6165: PUSH
6166: LD_INT 30
6168: PUSH
6169: LD_INT 1
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: PUSH
6176: EMPTY
6177: LIST
6178: LIST
6179: LIST
6180: PUSH
6181: EMPTY
6182: LIST
6183: LIST
6184: PPUSH
6185: CALL_OW 69
6189: PUSH
6190: LD_INT 1
6192: ARRAY
6193: ST_TO_ADDR
// enemy_depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ;
6194: LD_ADDR_VAR 0 4
6198: PUSH
6199: LD_INT 22
6201: PUSH
6202: LD_INT 2
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: LD_INT 2
6211: PUSH
6212: LD_INT 30
6214: PUSH
6215: LD_INT 0
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: PUSH
6222: LD_INT 30
6224: PUSH
6225: LD_INT 1
6227: PUSH
6228: EMPTY
6229: LIST
6230: LIST
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: LIST
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PPUSH
6241: CALL_OW 69
6245: PUSH
6246: LD_INT 1
6248: ARRAY
6249: ST_TO_ADDR
// if GetSide ( lab ) = your_side then
6250: LD_VAR 0 2
6254: PPUSH
6255: CALL_OW 255
6259: PUSH
6260: LD_OWVAR 2
6264: EQUAL
6265: IFFALSE 6348
// begin if GetResourceType ( GetBase ( your_depot ) , 3 ) >= 10 then
6267: LD_VAR 0 3
6271: PPUSH
6272: CALL_OW 274
6276: PPUSH
6277: LD_INT 3
6279: PPUSH
6280: CALL_OW 275
6284: PUSH
6285: LD_INT 10
6287: GREATEREQUAL
6288: IFFALSE 6346
// begin SetResourceType ( GetBase ( your_depot ) , 3 , GetResourceType ( GetBase ( your_depot ) , 3 ) - 10 ) ;
6290: LD_VAR 0 3
6294: PPUSH
6295: CALL_OW 274
6299: PPUSH
6300: LD_INT 3
6302: PPUSH
6303: LD_VAR 0 3
6307: PPUSH
6308: CALL_OW 274
6312: PPUSH
6313: LD_INT 3
6315: PPUSH
6316: CALL_OW 275
6320: PUSH
6321: LD_INT 10
6323: MINUS
6324: PPUSH
6325: CALL_OW 277
// SetTechProgress ( tech , your_side , 100 ) ;
6329: LD_VAR 0 1
6333: PPUSH
6334: LD_OWVAR 2
6338: PPUSH
6339: LD_INT 100
6341: PPUSH
6342: CALL_OW 327
// end ; end else
6346: GO 6420
// begin if GetResourceType ( GetBase ( enemy_depot ) , 3 ) >= 10 then
6348: LD_VAR 0 4
6352: PPUSH
6353: CALL_OW 274
6357: PPUSH
6358: LD_INT 3
6360: PPUSH
6361: CALL_OW 275
6365: PUSH
6366: LD_INT 10
6368: GREATEREQUAL
6369: IFFALSE 6420
// begin SetResourceType ( GetBase ( enemy_depot ) , 3 , GetResourceType ( enemy_depot , 3 ) - 10 ) ;
6371: LD_VAR 0 4
6375: PPUSH
6376: CALL_OW 274
6380: PPUSH
6381: LD_INT 3
6383: PPUSH
6384: LD_VAR 0 4
6388: PPUSH
6389: LD_INT 3
6391: PPUSH
6392: CALL_OW 275
6396: PUSH
6397: LD_INT 10
6399: MINUS
6400: PPUSH
6401: CALL_OW 277
// SetTechProgress ( tech , 2 , 100 ) ;
6405: LD_VAR 0 1
6409: PPUSH
6410: LD_INT 2
6412: PPUSH
6413: LD_INT 100
6415: PPUSH
6416: CALL_OW 327
// end ; end ; end ;
6420: PPOPN 4
6422: END
// every 0 0$35 trigger FilterAllUnits ( [ [ [ f_empty ] , [ f_lives , 250 ] , [ f_side , your_side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ] ) > 0 do var filter , un ;
6423: LD_INT 58
6425: PUSH
6426: EMPTY
6427: LIST
6428: PUSH
6429: LD_INT 24
6431: PUSH
6432: LD_INT 250
6434: PUSH
6435: EMPTY
6436: LIST
6437: LIST
6438: PUSH
6439: LD_INT 22
6441: PUSH
6442: LD_OWVAR 2
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PUSH
6451: LD_INT 2
6453: PUSH
6454: LD_INT 30
6456: PUSH
6457: LD_INT 32
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: PUSH
6464: LD_INT 30
6466: PUSH
6467: LD_INT 31
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: PUSH
6474: EMPTY
6475: LIST
6476: LIST
6477: LIST
6478: PUSH
6479: EMPTY
6480: LIST
6481: LIST
6482: LIST
6483: LIST
6484: PUSH
6485: EMPTY
6486: LIST
6487: PPUSH
6488: CALL_OW 69
6492: PUSH
6493: LD_INT 0
6495: GREATER
6496: IFFALSE 6633
6498: GO 6500
6500: DISABLE
6501: LD_INT 0
6503: PPUSH
6504: PPUSH
// begin enable ;
6505: ENABLE
// filter := FilterAllUnits ( [ [ [ f_empty ] , [ f_lives , 250 ] , [ f_side , your_side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ] ) ;
6506: LD_ADDR_VAR 0 1
6510: PUSH
6511: LD_INT 58
6513: PUSH
6514: EMPTY
6515: LIST
6516: PUSH
6517: LD_INT 24
6519: PUSH
6520: LD_INT 250
6522: PUSH
6523: EMPTY
6524: LIST
6525: LIST
6526: PUSH
6527: LD_INT 22
6529: PUSH
6530: LD_OWVAR 2
6534: PUSH
6535: EMPTY
6536: LIST
6537: LIST
6538: PUSH
6539: LD_INT 2
6541: PUSH
6542: LD_INT 30
6544: PUSH
6545: LD_INT 32
6547: PUSH
6548: EMPTY
6549: LIST
6550: LIST
6551: PUSH
6552: LD_INT 30
6554: PUSH
6555: LD_INT 31
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: PUSH
6562: EMPTY
6563: LIST
6564: LIST
6565: LIST
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: LIST
6571: LIST
6572: PUSH
6573: EMPTY
6574: LIST
6575: PPUSH
6576: CALL_OW 69
6580: ST_TO_ADDR
// uc_side := 1 ;
6581: LD_ADDR_OWVAR 20
6585: PUSH
6586: LD_INT 1
6588: ST_TO_ADDR
// uc_nation := 1 ;
6589: LD_ADDR_OWVAR 21
6593: PUSH
6594: LD_INT 1
6596: ST_TO_ADDR
// hc_class := 1 ;
6597: LD_ADDR_OWVAR 28
6601: PUSH
6602: LD_INT 1
6604: ST_TO_ADDR
// un := CreateHuman ;
6605: LD_ADDR_VAR 0 2
6609: PUSH
6610: CALL_OW 44
6614: ST_TO_ADDR
// PlaceHumanInUnit ( un , filter [ 1 ] ) ;
6615: LD_VAR 0 2
6619: PPUSH
6620: LD_VAR 0 1
6624: PUSH
6625: LD_INT 1
6627: ARRAY
6628: PPUSH
6629: CALL_OW 52
// end ;
6633: PPOPN 2
6635: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) > 0 do var fac , i ;
6636: LD_INT 2
6638: PUSH
6639: LD_INT 30
6641: PUSH
6642: LD_INT 2
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: PUSH
6649: LD_INT 30
6651: PUSH
6652: LD_INT 3
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: PUSH
6659: EMPTY
6660: LIST
6661: LIST
6662: LIST
6663: PUSH
6664: EMPTY
6665: LIST
6666: PPUSH
6667: CALL_OW 69
6671: PUSH
6672: LD_INT 0
6674: GREATER
6675: IFFALSE 6787
6677: GO 6679
6679: DISABLE
6680: LD_INT 0
6682: PPUSH
6683: PPUSH
// begin enable ;
6684: ENABLE
// fac := FilterAllUnits ( [ [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
6685: LD_ADDR_VAR 0 1
6689: PUSH
6690: LD_INT 2
6692: PUSH
6693: LD_INT 30
6695: PUSH
6696: LD_INT 2
6698: PUSH
6699: EMPTY
6700: LIST
6701: LIST
6702: PUSH
6703: LD_INT 30
6705: PUSH
6706: LD_INT 3
6708: PUSH
6709: EMPTY
6710: LIST
6711: LIST
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: LIST
6717: PUSH
6718: EMPTY
6719: LIST
6720: PPUSH
6721: CALL_OW 69
6725: ST_TO_ADDR
// for i = 1 to fac do
6726: LD_ADDR_VAR 0 2
6730: PUSH
6731: DOUBLE
6732: LD_INT 1
6734: DEC
6735: ST_TO_ADDR
6736: LD_VAR 0 1
6740: PUSH
6741: FOR_TO
6742: IFFALSE 6785
// if BuildingStatus ( fac [ i ] ) <> bs_idle then
6744: LD_VAR 0 1
6748: PUSH
6749: LD_VAR 0 2
6753: ARRAY
6754: PPUSH
6755: CALL_OW 461
6759: PUSH
6760: LD_INT 2
6762: NONEQUAL
6763: IFFALSE 6783
// SetWorkingProgress ( fac [ i ] , 100 ) ;
6765: LD_VAR 0 1
6769: PUSH
6770: LD_VAR 0 2
6774: ARRAY
6775: PPUSH
6776: LD_INT 100
6778: PPUSH
6779: CALL_OW 329
6783: GO 6741
6785: POP
6786: POP
// end ;
6787: PPOPN 2
6789: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , us_crane ] ) > 0 do var crane , i ;
6790: LD_INT 34
6792: PUSH
6793: LD_INT 13
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: PPUSH
6800: CALL_OW 69
6804: PUSH
6805: LD_INT 0
6807: GREATER
6808: IFFALSE 6916
6810: GO 6812
6812: DISABLE
6813: LD_INT 0
6815: PPUSH
6816: PPUSH
// begin enable ;
6817: ENABLE
// crane := FilterAllUnits ( [ f_weapon , us_crane ] ) ;
6818: LD_ADDR_VAR 0 1
6822: PUSH
6823: LD_INT 34
6825: PUSH
6826: LD_INT 13
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PPUSH
6833: CALL_OW 69
6837: ST_TO_ADDR
// for i = 1 to crane do
6838: LD_ADDR_VAR 0 2
6842: PUSH
6843: DOUBLE
6844: LD_INT 1
6846: DEC
6847: ST_TO_ADDR
6848: LD_VAR 0 1
6852: PUSH
6853: FOR_TO
6854: IFFALSE 6914
// if GetLives ( crane [ i ] ) < 999 then
6856: LD_VAR 0 1
6860: PUSH
6861: LD_VAR 0 2
6865: ARRAY
6866: PPUSH
6867: CALL_OW 256
6871: PUSH
6872: LD_INT 999
6874: LESS
6875: IFFALSE 6912
// SetLives ( crane [ i ] , GetLives ( crane [ i ] ) + 1 ) ;
6877: LD_VAR 0 1
6881: PUSH
6882: LD_VAR 0 2
6886: ARRAY
6887: PPUSH
6888: LD_VAR 0 1
6892: PUSH
6893: LD_VAR 0 2
6897: ARRAY
6898: PPUSH
6899: CALL_OW 256
6903: PUSH
6904: LD_INT 1
6906: PLUS
6907: PPUSH
6908: CALL_OW 234
6912: GO 6853
6914: POP
6915: POP
// end ;
6916: PPOPN 2
6918: END
// every 0 0$35 trigger FilterAllUnits ( [ [ f_empty ] , [ f_side , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) > 0 do var filter , un ;
6919: LD_INT 58
6921: PUSH
6922: EMPTY
6923: LIST
6924: PUSH
6925: LD_INT 22
6927: PUSH
6928: LD_INT 2
6930: PUSH
6931: EMPTY
6932: LIST
6933: LIST
6934: PUSH
6935: LD_INT 2
6937: PUSH
6938: LD_INT 30
6940: PUSH
6941: LD_INT 32
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: PUSH
6948: LD_INT 30
6950: PUSH
6951: LD_INT 31
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: PUSH
6958: EMPTY
6959: LIST
6960: LIST
6961: LIST
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: LIST
6967: PPUSH
6968: CALL_OW 69
6972: PUSH
6973: LD_INT 0
6975: GREATER
6976: IFFALSE 7097
6978: GO 6980
6980: DISABLE
6981: LD_INT 0
6983: PPUSH
6984: PPUSH
// begin enable ;
6985: ENABLE
// filter := FilterAllUnits ( [ [ f_empty ] , [ f_side , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
6986: LD_ADDR_VAR 0 1
6990: PUSH
6991: LD_INT 58
6993: PUSH
6994: EMPTY
6995: LIST
6996: PUSH
6997: LD_INT 22
6999: PUSH
7000: LD_INT 2
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: PUSH
7007: LD_INT 2
7009: PUSH
7010: LD_INT 30
7012: PUSH
7013: LD_INT 32
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: PUSH
7020: LD_INT 30
7022: PUSH
7023: LD_INT 31
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: LIST
7034: PUSH
7035: EMPTY
7036: LIST
7037: LIST
7038: LIST
7039: PPUSH
7040: CALL_OW 69
7044: ST_TO_ADDR
// uc_side := 2 ;
7045: LD_ADDR_OWVAR 20
7049: PUSH
7050: LD_INT 2
7052: ST_TO_ADDR
// uc_nation := 1 ;
7053: LD_ADDR_OWVAR 21
7057: PUSH
7058: LD_INT 1
7060: ST_TO_ADDR
// hc_class := 1 ;
7061: LD_ADDR_OWVAR 28
7065: PUSH
7066: LD_INT 1
7068: ST_TO_ADDR
// un := CreateHuman ;
7069: LD_ADDR_VAR 0 2
7073: PUSH
7074: CALL_OW 44
7078: ST_TO_ADDR
// PlaceHumanInUnit ( un , filter [ 1 ] ) ;
7079: LD_VAR 0 2
7083: PPUSH
7084: LD_VAR 0 1
7088: PUSH
7089: LD_INT 1
7091: ARRAY
7092: PPUSH
7093: CALL_OW 52
// end ;
7097: PPOPN 2
7099: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_or , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman ] ] ] ) > 0 do var filter , i ;
7100: LD_INT 2
7102: PUSH
7103: LD_INT 25
7105: PUSH
7106: LD_INT 15
7108: PUSH
7109: EMPTY
7110: LIST
7111: LIST
7112: PUSH
7113: LD_INT 25
7115: PUSH
7116: LD_INT 12
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: LIST
7127: PUSH
7128: EMPTY
7129: LIST
7130: PPUSH
7131: CALL_OW 69
7135: PUSH
7136: LD_INT 0
7138: GREATER
7139: IFFALSE 7266
7141: GO 7143
7143: DISABLE
7144: LD_INT 0
7146: PPUSH
7147: PPUSH
// begin enable ;
7148: ENABLE
// filter := FilterAllUnits ( [ [ f_or , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman ] ] ] ) ;
7149: LD_ADDR_VAR 0 1
7153: PUSH
7154: LD_INT 2
7156: PUSH
7157: LD_INT 25
7159: PUSH
7160: LD_INT 15
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: PUSH
7167: LD_INT 25
7169: PUSH
7170: LD_INT 12
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: LIST
7181: PUSH
7182: EMPTY
7183: LIST
7184: PPUSH
7185: CALL_OW 69
7189: ST_TO_ADDR
// for i = 1 to filter do
7190: LD_ADDR_VAR 0 2
7194: PUSH
7195: DOUBLE
7196: LD_INT 1
7198: DEC
7199: ST_TO_ADDR
7200: LD_VAR 0 1
7204: PUSH
7205: FOR_TO
7206: IFFALSE 7264
// if not HasTask ( filter [ i ] ) and GetLives ( filter [ i ] ) < 3 then
7208: LD_VAR 0 1
7212: PUSH
7213: LD_VAR 0 2
7217: ARRAY
7218: PPUSH
7219: CALL_OW 314
7223: NOT
7224: PUSH
7225: LD_VAR 0 1
7229: PUSH
7230: LD_VAR 0 2
7234: ARRAY
7235: PPUSH
7236: CALL_OW 256
7240: PUSH
7241: LD_INT 3
7243: LESS
7244: AND
7245: IFFALSE 7262
// RemoveUnit ( filter [ i ] ) ;
7247: LD_VAR 0 1
7251: PUSH
7252: LD_VAR 0 2
7256: ARRAY
7257: PPUSH
7258: CALL_OW 64
7262: GO 7205
7264: POP
7265: POP
// end ;
7266: PPOPN 2
7268: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 2 ] ) = 0 do
7269: LD_INT 22
7271: PUSH
7272: LD_INT 2
7274: PUSH
7275: EMPTY
7276: LIST
7277: LIST
7278: PPUSH
7279: CALL_OW 69
7283: PUSH
7284: LD_INT 0
7286: EQUAL
7287: IFFALSE 7296
7289: GO 7291
7291: DISABLE
// begin Win ;
7292: CALL 95 0 0
// end ;
7296: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , your_side ] ) = 0 do
7297: LD_INT 22
7299: PUSH
7300: LD_OWVAR 2
7304: PUSH
7305: EMPTY
7306: LIST
7307: LIST
7308: PPUSH
7309: CALL_OW 69
7313: PUSH
7314: LD_INT 0
7316: EQUAL
7317: IFFALSE 7326
7319: GO 7321
7321: DISABLE
// begin Lost ;
7322: CALL 80 0 0
// end ; end_of_file
7326: END
// every 1 1$00 do var i , p , amount , x , y , area , skills , c ;
7327: GO 7329
7329: DISABLE
7330: LD_INT 0
7332: PPUSH
7333: PPUSH
7334: PPUSH
7335: PPUSH
7336: PPUSH
7337: PPUSH
7338: PPUSH
7339: PPUSH
// begin enable ;
7340: ENABLE
// for i = 1 to 2 do
7341: LD_ADDR_VAR 0 1
7345: PUSH
7346: DOUBLE
7347: LD_INT 1
7349: DEC
7350: ST_TO_ADDR
7351: LD_INT 2
7353: PUSH
7354: FOR_TO
7355: IFFALSE 8467
// begin if i = 1 then
7357: LD_VAR 0 1
7361: PUSH
7362: LD_INT 1
7364: EQUAL
7365: IFFALSE 7387
// begin area := area1 ;
7367: LD_ADDR_VAR 0 6
7371: PUSH
7372: LD_INT 3
7374: ST_TO_ADDR
// skills := your_skills ;
7375: LD_ADDR_VAR 0 7
7379: PUSH
7380: LD_EXP 8
7384: ST_TO_ADDR
// end else
7385: GO 7405
// begin area := area2 ;
7387: LD_ADDR_VAR 0 6
7391: PUSH
7392: LD_INT 4
7394: ST_TO_ADDR
// skills := enemy_skills ;
7395: LD_ADDR_VAR 0 7
7399: PUSH
7400: LD_EXP 9
7404: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , i ] , [ f_not , [ f_type , unit_building ] ] ] ) < 16 then
7405: LD_INT 22
7407: PUSH
7408: LD_VAR 0 1
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: PUSH
7417: LD_INT 3
7419: PUSH
7420: LD_INT 21
7422: PUSH
7423: LD_INT 3
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: PUSH
7430: EMPTY
7431: LIST
7432: LIST
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: PPUSH
7438: CALL_OW 69
7442: PUSH
7443: LD_INT 16
7445: LESS
7446: IFFALSE 8465
// begin c := 0 ;
7448: LD_ADDR_VAR 0 8
7452: PUSH
7453: LD_INT 0
7455: ST_TO_ADDR
// c = FilterAllUnits ( [ [ f_side , i ] , [ f_btype , b_solar_power ] ] ) ;
7456: LD_ADDR_VAR 0 8
7460: PUSH
7461: LD_INT 22
7463: PUSH
7464: LD_VAR 0 1
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: PUSH
7473: LD_INT 30
7475: PUSH
7476: LD_INT 27
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: PUSH
7483: EMPTY
7484: LIST
7485: LIST
7486: PPUSH
7487: CALL_OW 69
7491: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , i ] , [ f_btype , b_lab_weapon ] ] ) then
7492: LD_INT 22
7494: PUSH
7495: LD_VAR 0 1
7499: PUSH
7500: EMPTY
7501: LIST
7502: LIST
7503: PUSH
7504: LD_INT 30
7506: PUSH
7507: LD_INT 10
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: PUSH
7514: EMPTY
7515: LIST
7516: LIST
7517: PPUSH
7518: CALL_OW 69
7522: IFFALSE 7538
// c = c + 2 ;
7524: LD_ADDR_VAR 0 8
7528: PUSH
7529: LD_VAR 0 8
7533: PUSH
7534: LD_INT 2
7536: PLUS
7537: ST_TO_ADDR
// skills := skills ^ [ c , 0 , 0 , 0 ] ;
7538: LD_ADDR_VAR 0 7
7542: PUSH
7543: LD_VAR 0 7
7547: PUSH
7548: LD_VAR 0 8
7552: PUSH
7553: LD_INT 0
7555: PUSH
7556: LD_INT 0
7558: PUSH
7559: LD_INT 0
7561: PUSH
7562: EMPTY
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: ADD
7568: ST_TO_ADDR
// if ( FilterAllUnits ( [ [ f_side , i ] , [ f_btype , b_depot ] ] ) or FilterAllUnits ( [ [ f_side , i ] , [ f_btype , b_warehouse ] ] ) ) and FilterAllUnits ( [ [ f_side , i ] , [ f_btype , b_armoury ] ] ) = 0 and FilterAllUnits ( [ [ f_side , i ] , [ f_btype , b_barracks ] ] ) = 0 then
7569: LD_INT 22
7571: PUSH
7572: LD_VAR 0 1
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: PUSH
7581: LD_INT 30
7583: PUSH
7584: LD_INT 0
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: PUSH
7591: EMPTY
7592: LIST
7593: LIST
7594: PPUSH
7595: CALL_OW 69
7599: PUSH
7600: LD_INT 22
7602: PUSH
7603: LD_VAR 0 1
7607: PUSH
7608: EMPTY
7609: LIST
7610: LIST
7611: PUSH
7612: LD_INT 30
7614: PUSH
7615: LD_INT 1
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: PPUSH
7626: CALL_OW 69
7630: OR
7631: PUSH
7632: LD_INT 22
7634: PUSH
7635: LD_VAR 0 1
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: PUSH
7644: LD_INT 30
7646: PUSH
7647: LD_INT 4
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: PUSH
7654: EMPTY
7655: LIST
7656: LIST
7657: PPUSH
7658: CALL_OW 69
7662: PUSH
7663: LD_INT 0
7665: EQUAL
7666: AND
7667: PUSH
7668: LD_INT 22
7670: PUSH
7671: LD_VAR 0 1
7675: PUSH
7676: EMPTY
7677: LIST
7678: LIST
7679: PUSH
7680: LD_INT 30
7682: PUSH
7683: LD_INT 5
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: PPUSH
7694: CALL_OW 69
7698: PUSH
7699: LD_INT 0
7701: EQUAL
7702: AND
7703: IFFALSE 7750
// begin for p = 1 to 3 do
7705: LD_ADDR_VAR 0 2
7709: PUSH
7710: DOUBLE
7711: LD_INT 1
7713: DEC
7714: ST_TO_ADDR
7715: LD_INT 3
7717: PUSH
7718: FOR_TO
7719: IFFALSE 7748
// MOBA_Apeman ( sides_pom [ i ] , area , skills ) ;
7721: LD_EXP 6
7725: PUSH
7726: LD_VAR 0 1
7730: ARRAY
7731: PPUSH
7732: LD_VAR 0 6
7736: PPUSH
7737: LD_VAR 0 7
7741: PPUSH
7742: CALL 8752 0 3
7746: GO 7718
7748: POP
7749: POP
// end ; if FilterAllUnits ( [ [ f_side , i ] , [ f_btype , b_armoury ] ] ) > 0 then
7750: LD_INT 22
7752: PUSH
7753: LD_VAR 0 1
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: PUSH
7762: LD_INT 30
7764: PUSH
7765: LD_INT 4
7767: PUSH
7768: EMPTY
7769: LIST
7770: LIST
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: PPUSH
7776: CALL_OW 69
7780: PUSH
7781: LD_INT 0
7783: GREATER
7784: IFFALSE 7873
// begin amount := FilterAllUnits ( [ [ f_side , i ] , [ f_btype , b_armoury ] ] ) ;
7786: LD_ADDR_VAR 0 3
7790: PUSH
7791: LD_INT 22
7793: PUSH
7794: LD_VAR 0 1
7798: PUSH
7799: EMPTY
7800: LIST
7801: LIST
7802: PUSH
7803: LD_INT 30
7805: PUSH
7806: LD_INT 4
7808: PUSH
7809: EMPTY
7810: LIST
7811: LIST
7812: PUSH
7813: EMPTY
7814: LIST
7815: LIST
7816: PPUSH
7817: CALL_OW 69
7821: ST_TO_ADDR
// for p = 1 to 3 * amount do
7822: LD_ADDR_VAR 0 2
7826: PUSH
7827: DOUBLE
7828: LD_INT 1
7830: DEC
7831: ST_TO_ADDR
7832: LD_INT 3
7834: PUSH
7835: LD_VAR 0 3
7839: MUL
7840: PUSH
7841: FOR_TO
7842: IFFALSE 7871
// MOBA_ApeSoldier ( sides_pom [ i ] , area , skills ) ;
7844: LD_EXP 6
7848: PUSH
7849: LD_VAR 0 1
7853: ARRAY
7854: PPUSH
7855: LD_VAR 0 6
7859: PPUSH
7860: LD_VAR 0 7
7864: PPUSH
7865: CALL 8840 0 3
7869: GO 7841
7871: POP
7872: POP
// end ; if FilterAllUnits ( [ [ f_side , i ] , [ f_btype , b_barracks ] ] ) > 0 then
7873: LD_INT 22
7875: PUSH
7876: LD_VAR 0 1
7880: PUSH
7881: EMPTY
7882: LIST
7883: LIST
7884: PUSH
7885: LD_INT 30
7887: PUSH
7888: LD_INT 5
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: PPUSH
7899: CALL_OW 69
7903: PUSH
7904: LD_INT 0
7906: GREATER
7907: IFFALSE 7996
// begin amount := FilterAllUnits ( [ [ f_side , i ] , [ f_btype , b_barracks ] ] ) ;
7909: LD_ADDR_VAR 0 3
7913: PUSH
7914: LD_INT 22
7916: PUSH
7917: LD_VAR 0 1
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: PUSH
7926: LD_INT 30
7928: PUSH
7929: LD_INT 5
7931: PUSH
7932: EMPTY
7933: LIST
7934: LIST
7935: PUSH
7936: EMPTY
7937: LIST
7938: LIST
7939: PPUSH
7940: CALL_OW 69
7944: ST_TO_ADDR
// for p = 1 to 3 * amount do
7945: LD_ADDR_VAR 0 2
7949: PUSH
7950: DOUBLE
7951: LD_INT 1
7953: DEC
7954: ST_TO_ADDR
7955: LD_INT 3
7957: PUSH
7958: LD_VAR 0 3
7962: MUL
7963: PUSH
7964: FOR_TO
7965: IFFALSE 7994
// MOBA_Soldier ( sides_pom [ i ] , area , skills ) ;
7967: LD_EXP 6
7971: PUSH
7972: LD_VAR 0 1
7976: ARRAY
7977: PPUSH
7978: LD_VAR 0 6
7982: PPUSH
7983: LD_VAR 0 7
7987: PPUSH
7988: CALL 8928 0 3
7992: GO 7964
7994: POP
7995: POP
// end ; if FilterAllUnits ( [ [ f_side , i ] , [ f_btype , b_barracks ] ] ) > 0 and FilterAllUnits ( [ [ f_side , i ] , [ f_btype , b_lab_opto ] ] ) > 0 then
7996: LD_INT 22
7998: PUSH
7999: LD_VAR 0 1
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: PUSH
8008: LD_INT 30
8010: PUSH
8011: LD_INT 5
8013: PUSH
8014: EMPTY
8015: LIST
8016: LIST
8017: PUSH
8018: EMPTY
8019: LIST
8020: LIST
8021: PPUSH
8022: CALL_OW 69
8026: PUSH
8027: LD_INT 0
8029: GREATER
8030: PUSH
8031: LD_INT 22
8033: PUSH
8034: LD_VAR 0 1
8038: PUSH
8039: EMPTY
8040: LIST
8041: LIST
8042: PUSH
8043: LD_INT 30
8045: PUSH
8046: LD_INT 15
8048: PUSH
8049: EMPTY
8050: LIST
8051: LIST
8052: PUSH
8053: EMPTY
8054: LIST
8055: LIST
8056: PPUSH
8057: CALL_OW 69
8061: PUSH
8062: LD_INT 0
8064: GREATER
8065: AND
8066: IFFALSE 8151
// begin amount := FilterAllUnits ( [ [ f_side , i ] , [ f_btype , b_barracks ] ] ) ;
8068: LD_ADDR_VAR 0 3
8072: PUSH
8073: LD_INT 22
8075: PUSH
8076: LD_VAR 0 1
8080: PUSH
8081: EMPTY
8082: LIST
8083: LIST
8084: PUSH
8085: LD_INT 30
8087: PUSH
8088: LD_INT 5
8090: PUSH
8091: EMPTY
8092: LIST
8093: LIST
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: PPUSH
8099: CALL_OW 69
8103: ST_TO_ADDR
// for p = 1 to amount do
8104: LD_ADDR_VAR 0 2
8108: PUSH
8109: DOUBLE
8110: LD_INT 1
8112: DEC
8113: ST_TO_ADDR
8114: LD_VAR 0 3
8118: PUSH
8119: FOR_TO
8120: IFFALSE 8149
// MOBA_Sniper ( sides_pom [ i ] , area , skills ) ;
8122: LD_EXP 6
8126: PUSH
8127: LD_VAR 0 1
8131: ARRAY
8132: PPUSH
8133: LD_VAR 0 6
8137: PPUSH
8138: LD_VAR 0 7
8142: PPUSH
8143: CALL 9016 0 3
8147: GO 8119
8149: POP
8150: POP
// end ; if FilterAllUnits ( [ [ f_side , i ] , [ f_btype , b_workshop ] ] ) > 0 then
8151: LD_INT 22
8153: PUSH
8154: LD_VAR 0 1
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: PUSH
8163: LD_INT 30
8165: PUSH
8166: LD_INT 2
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: PUSH
8173: EMPTY
8174: LIST
8175: LIST
8176: PPUSH
8177: CALL_OW 69
8181: PUSH
8182: LD_INT 0
8184: GREATER
8185: IFFALSE 8269
// begin amount := FilterAllUnits ( [ [ f_side , i ] , [ f_btype , b_workshop ] ] ) ;
8187: LD_ADDR_VAR 0 3
8191: PUSH
8192: LD_INT 22
8194: PUSH
8195: LD_VAR 0 1
8199: PUSH
8200: EMPTY
8201: LIST
8202: LIST
8203: PUSH
8204: LD_INT 30
8206: PUSH
8207: LD_INT 2
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: PUSH
8214: EMPTY
8215: LIST
8216: LIST
8217: PPUSH
8218: CALL_OW 69
8222: ST_TO_ADDR
// for p = 1 to amount * 2 do
8223: LD_ADDR_VAR 0 2
8227: PUSH
8228: DOUBLE
8229: LD_INT 1
8231: DEC
8232: ST_TO_ADDR
8233: LD_VAR 0 3
8237: PUSH
8238: LD_INT 2
8240: MUL
8241: PUSH
8242: FOR_TO
8243: IFFALSE 8267
// MOBA_LightTank ( sides_pom [ i ] , area ) ;
8245: LD_EXP 6
8249: PUSH
8250: LD_VAR 0 1
8254: ARRAY
8255: PPUSH
8256: LD_VAR 0 6
8260: PPUSH
8261: CALL 9104 0 2
8265: GO 8242
8267: POP
8268: POP
// end ; if FilterAllUnits ( [ [ f_side , i ] , [ f_btype , b_factory ] ] ) > 0 then
8269: LD_INT 22
8271: PUSH
8272: LD_VAR 0 1
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: PUSH
8281: LD_INT 30
8283: PUSH
8284: LD_INT 3
8286: PUSH
8287: EMPTY
8288: LIST
8289: LIST
8290: PUSH
8291: EMPTY
8292: LIST
8293: LIST
8294: PPUSH
8295: CALL_OW 69
8299: PUSH
8300: LD_INT 0
8302: GREATER
8303: IFFALSE 8465
// begin amount := FilterAllUnits ( [ [ f_side , i ] , [ f_btype , b_factory ] ] ) ;
8305: LD_ADDR_VAR 0 3
8309: PUSH
8310: LD_INT 22
8312: PUSH
8313: LD_VAR 0 1
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: PUSH
8322: LD_INT 30
8324: PUSH
8325: LD_INT 3
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: PUSH
8332: EMPTY
8333: LIST
8334: LIST
8335: PPUSH
8336: CALL_OW 69
8340: ST_TO_ADDR
// for p = 1 to amount do
8341: LD_ADDR_VAR 0 2
8345: PUSH
8346: DOUBLE
8347: LD_INT 1
8349: DEC
8350: ST_TO_ADDR
8351: LD_VAR 0 3
8355: PUSH
8356: FOR_TO
8357: IFFALSE 8384
// MOBA_MediumTank ( sides_pom [ i ] , area , us_gatling_gun ) ;
8359: LD_EXP 6
8363: PUSH
8364: LD_VAR 0 1
8368: ARRAY
8369: PPUSH
8370: LD_VAR 0 6
8374: PPUSH
8375: LD_INT 4
8377: PPUSH
8378: CALL 9172 0 3
8382: GO 8356
8384: POP
8385: POP
// if FilterAllUnits ( [ [ f_side , i ] , [ f_btype , b_ext_gun ] ] ) > 0 then
8386: LD_INT 22
8388: PUSH
8389: LD_VAR 0 1
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: PUSH
8398: LD_INT 30
8400: PUSH
8401: LD_INT 17
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: PUSH
8408: EMPTY
8409: LIST
8410: LIST
8411: PPUSH
8412: CALL_OW 69
8416: PUSH
8417: LD_INT 0
8419: GREATER
8420: IFFALSE 8465
// for p = 1 to 2 do
8422: LD_ADDR_VAR 0 2
8426: PUSH
8427: DOUBLE
8428: LD_INT 1
8430: DEC
8431: ST_TO_ADDR
8432: LD_INT 2
8434: PUSH
8435: FOR_TO
8436: IFFALSE 8463
// MOBA_MediumTank ( sides_pom [ i ] , area , us_light_gun ) ;
8438: LD_EXP 6
8442: PUSH
8443: LD_VAR 0 1
8447: ARRAY
8448: PPUSH
8449: LD_VAR 0 6
8453: PPUSH
8454: LD_INT 3
8456: PPUSH
8457: CALL 9172 0 3
8461: GO 8435
8463: POP
8464: POP
// end ; end ; end ;
8465: GO 7354
8467: POP
8468: POP
// end ;
8469: PPOPN 8
8471: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 6 ] ) > 0 do var i , filter , enemy ;
8472: LD_INT 22
8474: PUSH
8475: LD_INT 6
8477: PUSH
8478: EMPTY
8479: LIST
8480: LIST
8481: PPUSH
8482: CALL_OW 69
8486: PUSH
8487: LD_INT 0
8489: GREATER
8490: IFFALSE 8609
8492: GO 8494
8494: DISABLE
8495: LD_INT 0
8497: PPUSH
8498: PPUSH
8499: PPUSH
// begin enable ;
8500: ENABLE
// filter := FilterAllUnits ( [ f_side , 6 ] ) ;
8501: LD_ADDR_VAR 0 2
8505: PUSH
8506: LD_INT 22
8508: PUSH
8509: LD_INT 6
8511: PUSH
8512: EMPTY
8513: LIST
8514: LIST
8515: PPUSH
8516: CALL_OW 69
8520: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 6 ] ) ;
8521: LD_ADDR_VAR 0 3
8525: PUSH
8526: LD_INT 81
8528: PUSH
8529: LD_INT 6
8531: PUSH
8532: EMPTY
8533: LIST
8534: LIST
8535: PPUSH
8536: CALL_OW 69
8540: ST_TO_ADDR
// if filter > 0 then
8541: LD_VAR 0 2
8545: PUSH
8546: LD_INT 0
8548: GREATER
8549: IFFALSE 8609
// for i = 1 to filter do
8551: LD_ADDR_VAR 0 1
8555: PUSH
8556: DOUBLE
8557: LD_INT 1
8559: DEC
8560: ST_TO_ADDR
8561: LD_VAR 0 2
8565: PUSH
8566: FOR_TO
8567: IFFALSE 8607
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
8569: LD_VAR 0 2
8573: PUSH
8574: LD_VAR 0 1
8578: ARRAY
8579: PPUSH
8580: LD_VAR 0 3
8584: PPUSH
8585: LD_VAR 0 2
8589: PUSH
8590: LD_VAR 0 1
8594: ARRAY
8595: PPUSH
8596: CALL_OW 74
8600: PPUSH
8601: CALL_OW 115
8605: GO 8566
8607: POP
8608: POP
// end ;
8609: PPOPN 3
8611: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) > 0 do var i , filter , enemy ;
8612: LD_INT 22
8614: PUSH
8615: LD_INT 3
8617: PUSH
8618: EMPTY
8619: LIST
8620: LIST
8621: PPUSH
8622: CALL_OW 69
8626: PUSH
8627: LD_INT 0
8629: GREATER
8630: IFFALSE 8749
8632: GO 8634
8634: DISABLE
8635: LD_INT 0
8637: PPUSH
8638: PPUSH
8639: PPUSH
// begin enable ;
8640: ENABLE
// filter := FilterAllUnits ( [ f_side , 3 ] ) ;
8641: LD_ADDR_VAR 0 2
8645: PUSH
8646: LD_INT 22
8648: PUSH
8649: LD_INT 3
8651: PUSH
8652: EMPTY
8653: LIST
8654: LIST
8655: PPUSH
8656: CALL_OW 69
8660: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
8661: LD_ADDR_VAR 0 3
8665: PUSH
8666: LD_INT 81
8668: PUSH
8669: LD_INT 3
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: PPUSH
8676: CALL_OW 69
8680: ST_TO_ADDR
// if filter > 0 then
8681: LD_VAR 0 2
8685: PUSH
8686: LD_INT 0
8688: GREATER
8689: IFFALSE 8749
// for i = 1 to filter do
8691: LD_ADDR_VAR 0 1
8695: PUSH
8696: DOUBLE
8697: LD_INT 1
8699: DEC
8700: ST_TO_ADDR
8701: LD_VAR 0 2
8705: PUSH
8706: FOR_TO
8707: IFFALSE 8747
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
8709: LD_VAR 0 2
8713: PUSH
8714: LD_VAR 0 1
8718: ARRAY
8719: PPUSH
8720: LD_VAR 0 3
8724: PPUSH
8725: LD_VAR 0 2
8729: PUSH
8730: LD_VAR 0 1
8734: ARRAY
8735: PPUSH
8736: CALL_OW 74
8740: PPUSH
8741: CALL_OW 115
8745: GO 8706
8747: POP
8748: POP
// end ; end_of_file
8749: PPOPN 3
8751: END
// export function MOBA_Apeman ( side , area , skills ) ; var un ; begin
8752: LD_INT 0
8754: PPUSH
8755: PPUSH
// uc_side := side ;
8756: LD_ADDR_OWVAR 20
8760: PUSH
8761: LD_VAR 0 1
8765: ST_TO_ADDR
// uc_nation := 0 ;
8766: LD_ADDR_OWVAR 21
8770: PUSH
8771: LD_INT 0
8773: ST_TO_ADDR
// hc_skills := skills ;
8774: LD_ADDR_OWVAR 31
8778: PUSH
8779: LD_VAR 0 3
8783: ST_TO_ADDR
// hc_gallery :=  ;
8784: LD_ADDR_OWVAR 33
8788: PUSH
8789: LD_STRING 
8791: ST_TO_ADDR
// hc_name :=  ;
8792: LD_ADDR_OWVAR 26
8796: PUSH
8797: LD_STRING 
8799: ST_TO_ADDR
// hc_class := class_apeman ;
8800: LD_ADDR_OWVAR 28
8804: PUSH
8805: LD_INT 12
8807: ST_TO_ADDR
// un := CreateHuman ;
8808: LD_ADDR_VAR 0 5
8812: PUSH
8813: CALL_OW 44
8817: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
8818: LD_VAR 0 5
8822: PPUSH
8823: LD_VAR 0 2
8827: PPUSH
8828: LD_INT 0
8830: PPUSH
8831: CALL_OW 49
// end ;
8835: LD_VAR 0 4
8839: RET
// export function MOBA_ApeSoldier ( side , area , skills ) ; var un ; begin
8840: LD_INT 0
8842: PPUSH
8843: PPUSH
// uc_side := side ;
8844: LD_ADDR_OWVAR 20
8848: PUSH
8849: LD_VAR 0 1
8853: ST_TO_ADDR
// uc_nation := 0 ;
8854: LD_ADDR_OWVAR 21
8858: PUSH
8859: LD_INT 0
8861: ST_TO_ADDR
// hc_skills := skills ;
8862: LD_ADDR_OWVAR 31
8866: PUSH
8867: LD_VAR 0 3
8871: ST_TO_ADDR
// hc_gallery :=  ;
8872: LD_ADDR_OWVAR 33
8876: PUSH
8877: LD_STRING 
8879: ST_TO_ADDR
// hc_name :=  ;
8880: LD_ADDR_OWVAR 26
8884: PUSH
8885: LD_STRING 
8887: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
8888: LD_ADDR_OWVAR 28
8892: PUSH
8893: LD_INT 15
8895: ST_TO_ADDR
// un := CreateHuman ;
8896: LD_ADDR_VAR 0 5
8900: PUSH
8901: CALL_OW 44
8905: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
8906: LD_VAR 0 5
8910: PPUSH
8911: LD_VAR 0 2
8915: PPUSH
8916: LD_INT 0
8918: PPUSH
8919: CALL_OW 49
// end ;
8923: LD_VAR 0 4
8927: RET
// export function MOBA_Soldier ( side , area , skills ) ; var un ; begin
8928: LD_INT 0
8930: PPUSH
8931: PPUSH
// uc_side := side ;
8932: LD_ADDR_OWVAR 20
8936: PUSH
8937: LD_VAR 0 1
8941: ST_TO_ADDR
// uc_nation := 1 ;
8942: LD_ADDR_OWVAR 21
8946: PUSH
8947: LD_INT 1
8949: ST_TO_ADDR
// hc_skills := skills ;
8950: LD_ADDR_OWVAR 31
8954: PUSH
8955: LD_VAR 0 3
8959: ST_TO_ADDR
// hc_gallery :=  ;
8960: LD_ADDR_OWVAR 33
8964: PUSH
8965: LD_STRING 
8967: ST_TO_ADDR
// hc_name :=  ;
8968: LD_ADDR_OWVAR 26
8972: PUSH
8973: LD_STRING 
8975: ST_TO_ADDR
// hc_class := class_soldier ;
8976: LD_ADDR_OWVAR 28
8980: PUSH
8981: LD_INT 1
8983: ST_TO_ADDR
// un := CreateHuman ;
8984: LD_ADDR_VAR 0 5
8988: PUSH
8989: CALL_OW 44
8993: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
8994: LD_VAR 0 5
8998: PPUSH
8999: LD_VAR 0 2
9003: PPUSH
9004: LD_INT 0
9006: PPUSH
9007: CALL_OW 49
// end ;
9011: LD_VAR 0 4
9015: RET
// export function MOBA_Sniper ( side , area , skills ) ; var un ; begin
9016: LD_INT 0
9018: PPUSH
9019: PPUSH
// uc_side := side ;
9020: LD_ADDR_OWVAR 20
9024: PUSH
9025: LD_VAR 0 1
9029: ST_TO_ADDR
// uc_nation := 1 ;
9030: LD_ADDR_OWVAR 21
9034: PUSH
9035: LD_INT 1
9037: ST_TO_ADDR
// hc_skills := skills ;
9038: LD_ADDR_OWVAR 31
9042: PUSH
9043: LD_VAR 0 3
9047: ST_TO_ADDR
// hc_gallery :=  ;
9048: LD_ADDR_OWVAR 33
9052: PUSH
9053: LD_STRING 
9055: ST_TO_ADDR
// hc_name :=  ;
9056: LD_ADDR_OWVAR 26
9060: PUSH
9061: LD_STRING 
9063: ST_TO_ADDR
// hc_class := class_sniper ;
9064: LD_ADDR_OWVAR 28
9068: PUSH
9069: LD_INT 5
9071: ST_TO_ADDR
// un := CreateHuman ;
9072: LD_ADDR_VAR 0 5
9076: PUSH
9077: CALL_OW 44
9081: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
9082: LD_VAR 0 5
9086: PPUSH
9087: LD_VAR 0 2
9091: PPUSH
9092: LD_INT 0
9094: PPUSH
9095: CALL_OW 49
// end ;
9099: LD_VAR 0 4
9103: RET
// export function MOBA_LightTank ( side , area ) ; var veh ; begin
9104: LD_INT 0
9106: PPUSH
9107: PPUSH
// vc_chassis := us_light_wheeled ;
9108: LD_ADDR_OWVAR 37
9112: PUSH
9113: LD_INT 1
9115: ST_TO_ADDR
// vc_engine := engine_combustion ;
9116: LD_ADDR_OWVAR 39
9120: PUSH
9121: LD_INT 1
9123: ST_TO_ADDR
// vc_control := control_computer ;
9124: LD_ADDR_OWVAR 38
9128: PUSH
9129: LD_INT 3
9131: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
9132: LD_ADDR_OWVAR 40
9136: PUSH
9137: LD_INT 2
9139: ST_TO_ADDR
// veh := CreateVehicle ;
9140: LD_ADDR_VAR 0 4
9144: PUSH
9145: CALL_OW 45
9149: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9150: LD_VAR 0 4
9154: PPUSH
9155: LD_VAR 0 2
9159: PPUSH
9160: LD_INT 0
9162: PPUSH
9163: CALL_OW 49
// end ;
9167: LD_VAR 0 3
9171: RET
// export function MOBA_MediumTank ( side , area , gun ) ; var veh ; begin
9172: LD_INT 0
9174: PPUSH
9175: PPUSH
// vc_chassis := us_medium_wheeled ;
9176: LD_ADDR_OWVAR 37
9180: PUSH
9181: LD_INT 2
9183: ST_TO_ADDR
// vc_engine := engine_combustion ;
9184: LD_ADDR_OWVAR 39
9188: PUSH
9189: LD_INT 1
9191: ST_TO_ADDR
// vc_control := control_computer ;
9192: LD_ADDR_OWVAR 38
9196: PUSH
9197: LD_INT 3
9199: ST_TO_ADDR
// vc_weapon := gun ;
9200: LD_ADDR_OWVAR 40
9204: PUSH
9205: LD_VAR 0 3
9209: ST_TO_ADDR
// veh := CreateVehicle ;
9210: LD_ADDR_VAR 0 5
9214: PUSH
9215: CALL_OW 45
9219: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9220: LD_VAR 0 5
9224: PPUSH
9225: LD_VAR 0 2
9229: PPUSH
9230: LD_INT 0
9232: PPUSH
9233: CALL_OW 49
// end ;
9237: LD_VAR 0 4
9241: RET
// export function MOBA_HeavyTank ( side , area , gun ) ; var veh ; begin
9242: LD_INT 0
9244: PPUSH
9245: PPUSH
// vc_chassis := us_heavy_tracked ;
9246: LD_ADDR_OWVAR 37
9250: PUSH
9251: LD_INT 4
9253: ST_TO_ADDR
// vc_engine := engine_combustion ;
9254: LD_ADDR_OWVAR 39
9258: PUSH
9259: LD_INT 1
9261: ST_TO_ADDR
// vc_control := control_computer ;
9262: LD_ADDR_OWVAR 38
9266: PUSH
9267: LD_INT 3
9269: ST_TO_ADDR
// vc_weapon := gun ;
9270: LD_ADDR_OWVAR 40
9274: PUSH
9275: LD_VAR 0 3
9279: ST_TO_ADDR
// veh := CreateVehicle ;
9280: LD_ADDR_VAR 0 5
9284: PUSH
9285: CALL_OW 45
9289: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9290: LD_VAR 0 5
9294: PPUSH
9295: LD_VAR 0 2
9299: PPUSH
9300: LD_INT 0
9302: PPUSH
9303: CALL_OW 49
// end ;
9307: LD_VAR 0 4
9311: RET
// export function UnlockBuildings ( side ) ; var i ; begin
9312: LD_INT 0
9314: PPUSH
9315: PPUSH
// for i = 1 to 36 do
9316: LD_ADDR_VAR 0 3
9320: PUSH
9321: DOUBLE
9322: LD_INT 1
9324: DEC
9325: ST_TO_ADDR
9326: LD_INT 36
9328: PUSH
9329: FOR_TO
9330: IFFALSE 9351
// SetRestrict ( i , side , state_enabled ) ;
9332: LD_VAR 0 3
9336: PPUSH
9337: LD_VAR 0 1
9341: PPUSH
9342: LD_INT 1
9344: PPUSH
9345: CALL_OW 324
9349: GO 9329
9351: POP
9352: POP
// end ;
9353: LD_VAR 0 2
9357: RET
// export depot_cost , armoury_cost , barracks_cost , lab_cost , labw_cost , labs_cost , labc_cost , labo_cost , work_cost , fac_cost , faclaser_cost , facradar_cost , factrack_cost , faccomp_cost , facsib_cost , facgun_cost , facrocket_cost , ct_cost , bunker_cost , mtower_cost , atower_cost , facnon_cost , solar_cost , sib_cost , oil_cost ; export function InitCost ( ) ; begin
9358: LD_INT 0
9360: PPUSH
// depot_cost := 500 ;
9361: LD_ADDR_EXP 11
9365: PUSH
9366: LD_INT 500
9368: ST_TO_ADDR
// armoury_cost := 100 ;
9369: LD_ADDR_EXP 12
9373: PUSH
9374: LD_INT 100
9376: ST_TO_ADDR
// barracks_cost := 400 ;
9377: LD_ADDR_EXP 13
9381: PUSH
9382: LD_INT 400
9384: ST_TO_ADDR
// lab_cost := 200 ;
9385: LD_ADDR_EXP 14
9389: PUSH
9390: LD_INT 200
9392: ST_TO_ADDR
// labw_cost := 500 ;
9393: LD_ADDR_EXP 15
9397: PUSH
9398: LD_INT 500
9400: ST_TO_ADDR
// labs_cost := 1000 ;
9401: LD_ADDR_EXP 16
9405: PUSH
9406: LD_INT 1000
9408: ST_TO_ADDR
// labc_cost := 750 ;
9409: LD_ADDR_EXP 17
9413: PUSH
9414: LD_INT 750
9416: ST_TO_ADDR
// labo_cost := 650 ;
9417: LD_ADDR_EXP 18
9421: PUSH
9422: LD_INT 650
9424: ST_TO_ADDR
// work_cost := 350 ;
9425: LD_ADDR_EXP 19
9429: PUSH
9430: LD_INT 350
9432: ST_TO_ADDR
// fac_cost := 1000 ;
9433: LD_ADDR_EXP 20
9437: PUSH
9438: LD_INT 1000
9440: ST_TO_ADDR
// factrack_cost := 100 ;
9441: LD_ADDR_EXP 23
9445: PUSH
9446: LD_INT 100
9448: ST_TO_ADDR
// facsib_cost := 500 ;
9449: LD_ADDR_EXP 25
9453: PUSH
9454: LD_INT 500
9456: ST_TO_ADDR
// facrocket_cost := 200 ;
9457: LD_ADDR_EXP 27
9461: PUSH
9462: LD_INT 200
9464: ST_TO_ADDR
// facgun_cost := 300 ;
9465: LD_ADDR_EXP 26
9469: PUSH
9470: LD_INT 300
9472: ST_TO_ADDR
// faccomp_cost := 250 ;
9473: LD_ADDR_EXP 24
9477: PUSH
9478: LD_INT 250
9480: ST_TO_ADDR
// facradar_cost := 250 ;
9481: LD_ADDR_EXP 22
9485: PUSH
9486: LD_INT 250
9488: ST_TO_ADDR
// faclaser_cost := 150 ;
9489: LD_ADDR_EXP 21
9493: PUSH
9494: LD_INT 150
9496: ST_TO_ADDR
// facnon_cost := 1000 ;
9497: LD_ADDR_EXP 32
9501: PUSH
9502: LD_INT 1000
9504: ST_TO_ADDR
// ct_cost := 500 ;
9505: LD_ADDR_EXP 28
9509: PUSH
9510: LD_INT 500
9512: ST_TO_ADDR
// bunker_cost := 50 ;
9513: LD_ADDR_EXP 29
9517: PUSH
9518: LD_INT 50
9520: ST_TO_ADDR
// mtower_cost := 120 ;
9521: LD_ADDR_EXP 30
9525: PUSH
9526: LD_INT 120
9528: ST_TO_ADDR
// atower_cost := 100 ;
9529: LD_ADDR_EXP 31
9533: PUSH
9534: LD_INT 100
9536: ST_TO_ADDR
// solar_cost := 500 ;
9537: LD_ADDR_EXP 33
9541: PUSH
9542: LD_INT 500
9544: ST_TO_ADDR
// oil_cost := 500 ;
9545: LD_ADDR_EXP 35
9549: PUSH
9550: LD_INT 500
9552: ST_TO_ADDR
// sib_cost := 1000 ;
9553: LD_ADDR_EXP 34
9557: PUSH
9558: LD_INT 1000
9560: ST_TO_ADDR
// end ; end_of_file
9561: LD_VAR 0 1
9565: RET
// export n_xy , w_xy , n_armoury , n_lab , n_factory , n_towers ; export function InitEnemy ( ) ; begin
9566: LD_INT 0
9568: PPUSH
// n_xy := [ 177 , 55 , 183 , 55 , 173 , 47 , 179 , 47 , 183 , 68 , 190 , 69 , 187 , 76 , 194 , 77 , 179 , 72 ] ;
9569: LD_ADDR_EXP 36
9573: PUSH
9574: LD_INT 177
9576: PUSH
9577: LD_INT 55
9579: PUSH
9580: LD_INT 183
9582: PUSH
9583: LD_INT 55
9585: PUSH
9586: LD_INT 173
9588: PUSH
9589: LD_INT 47
9591: PUSH
9592: LD_INT 179
9594: PUSH
9595: LD_INT 47
9597: PUSH
9598: LD_INT 183
9600: PUSH
9601: LD_INT 68
9603: PUSH
9604: LD_INT 190
9606: PUSH
9607: LD_INT 69
9609: PUSH
9610: LD_INT 187
9612: PUSH
9613: LD_INT 76
9615: PUSH
9616: LD_INT 194
9618: PUSH
9619: LD_INT 77
9621: PUSH
9622: LD_INT 179
9624: PUSH
9625: LD_INT 72
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: ST_TO_ADDR
// w_xy := [ 166 , 66 , 161 , 56 ] ;
9648: LD_ADDR_EXP 37
9652: PUSH
9653: LD_INT 166
9655: PUSH
9656: LD_INT 66
9658: PUSH
9659: LD_INT 161
9661: PUSH
9662: LD_INT 56
9664: PUSH
9665: EMPTY
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: ST_TO_ADDR
// n_armoury := 3 ;
9671: LD_ADDR_EXP 38
9675: PUSH
9676: LD_INT 3
9678: ST_TO_ADDR
// n_lab := 1 ;
9679: LD_ADDR_EXP 39
9683: PUSH
9684: LD_INT 1
9686: ST_TO_ADDR
// n_factory := 1 ;
9687: LD_ADDR_EXP 40
9691: PUSH
9692: LD_INT 1
9694: ST_TO_ADDR
// n_towers := 3 ;
9695: LD_ADDR_EXP 41
9699: PUSH
9700: LD_INT 3
9702: ST_TO_ADDR
// end ;
9703: LD_VAR 0 1
9707: RET
// every 0 0$01 trigger enemy_crane do var crane ;
9708: LD_EXP 3
9712: IFFALSE 10549
9714: GO 9716
9716: DISABLE
9717: LD_INT 0
9719: PPUSH
// begin enable ;
9720: ENABLE
// crane := IsDrivenBy ( enemy_crane ) ;
9721: LD_ADDR_VAR 0 1
9725: PUSH
9726: LD_EXP 3
9730: PPUSH
9731: CALL_OW 311
9735: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) = 0 then
9736: LD_INT 22
9738: PUSH
9739: LD_INT 2
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: PUSH
9746: LD_INT 2
9748: PUSH
9749: LD_INT 30
9751: PUSH
9752: LD_INT 1
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: PUSH
9759: LD_INT 30
9761: PUSH
9762: LD_INT 0
9764: PUSH
9765: EMPTY
9766: LIST
9767: LIST
9768: PUSH
9769: EMPTY
9770: LIST
9771: LIST
9772: LIST
9773: PUSH
9774: EMPTY
9775: LIST
9776: LIST
9777: PPUSH
9778: CALL_OW 69
9782: PUSH
9783: LD_INT 0
9785: EQUAL
9786: IFFALSE 9811
// ComBuild ( crane , b_depot , 186 , 62 , 4 ) else
9788: LD_VAR 0 1
9792: PPUSH
9793: LD_INT 0
9795: PPUSH
9796: LD_INT 186
9798: PPUSH
9799: LD_INT 62
9801: PPUSH
9802: LD_INT 4
9804: PPUSH
9805: CALL_OW 145
9809: GO 9894
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) > 0 and enemy_source > depot_cost then
9811: LD_INT 22
9813: PUSH
9814: LD_INT 2
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PUSH
9821: LD_INT 30
9823: PUSH
9824: LD_INT 0
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: PUSH
9831: EMPTY
9832: LIST
9833: LIST
9834: PPUSH
9835: CALL_OW 69
9839: PUSH
9840: LD_INT 0
9842: GREATER
9843: PUSH
9844: LD_EXP 5
9848: PUSH
9849: LD_EXP 11
9853: GREATER
9854: AND
9855: IFFALSE 9894
// ComUpgrade ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ) ;
9857: LD_INT 22
9859: PUSH
9860: LD_INT 2
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: LD_INT 30
9869: PUSH
9870: LD_INT 0
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: PPUSH
9881: CALL_OW 69
9885: PUSH
9886: LD_INT 1
9888: ARRAY
9889: PPUSH
9890: CALL_OW 146
// if enemy_source > armoury_cost and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_barracks ] , [ f_btype , b_armoury ] ] ] ) < n_armoury then
9894: LD_EXP 5
9898: PUSH
9899: LD_EXP 12
9903: GREATER
9904: PUSH
9905: LD_INT 22
9907: PUSH
9908: LD_INT 2
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: PUSH
9915: LD_INT 2
9917: PUSH
9918: LD_INT 30
9920: PUSH
9921: LD_INT 5
9923: PUSH
9924: EMPTY
9925: LIST
9926: LIST
9927: PUSH
9928: LD_INT 30
9930: PUSH
9931: LD_INT 4
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: PUSH
9938: EMPTY
9939: LIST
9940: LIST
9941: LIST
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: PPUSH
9947: CALL_OW 69
9951: PUSH
9952: LD_EXP 38
9956: LESS
9957: AND
9958: IFFALSE 10128
// begin if FilterUnitsInArea ( b1 , [ f_type , unit_building ] ) = 0 then
9960: LD_INT 5
9962: PPUSH
9963: LD_INT 21
9965: PUSH
9966: LD_INT 3
9968: PUSH
9969: EMPTY
9970: LIST
9971: LIST
9972: PPUSH
9973: CALL_OW 70
9977: PUSH
9978: LD_INT 0
9980: EQUAL
9981: IFFALSE 10016
// ComBuild ( crane , b_armoury , n_xy [ 1 ] , n_xy [ 2 ] , 3 ) ;
9983: LD_VAR 0 1
9987: PPUSH
9988: LD_INT 4
9990: PPUSH
9991: LD_EXP 36
9995: PUSH
9996: LD_INT 1
9998: ARRAY
9999: PPUSH
10000: LD_EXP 36
10004: PUSH
10005: LD_INT 2
10007: ARRAY
10008: PPUSH
10009: LD_INT 3
10011: PPUSH
10012: CALL_OW 145
// if FilterUnitsInArea ( b2 , [ f_type , unit_building ] ) = 0 then
10016: LD_INT 6
10018: PPUSH
10019: LD_INT 21
10021: PUSH
10022: LD_INT 3
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: PPUSH
10029: CALL_OW 70
10033: PUSH
10034: LD_INT 0
10036: EQUAL
10037: IFFALSE 10072
// ComBuild ( crane , b_armoury , n_xy [ 3 ] , n_xy [ 4 ] , 3 ) ;
10039: LD_VAR 0 1
10043: PPUSH
10044: LD_INT 4
10046: PPUSH
10047: LD_EXP 36
10051: PUSH
10052: LD_INT 3
10054: ARRAY
10055: PPUSH
10056: LD_EXP 36
10060: PUSH
10061: LD_INT 4
10063: ARRAY
10064: PPUSH
10065: LD_INT 3
10067: PPUSH
10068: CALL_OW 145
// if FilterUnitsInArea ( b3 , [ f_type , unit_building ] ) = 0 then
10072: LD_INT 7
10074: PPUSH
10075: LD_INT 21
10077: PUSH
10078: LD_INT 3
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: PPUSH
10085: CALL_OW 70
10089: PUSH
10090: LD_INT 0
10092: EQUAL
10093: IFFALSE 10128
// ComBuild ( crane , b_armoury , n_xy [ 5 ] , n_xy [ 6 ] , 3 ) ;
10095: LD_VAR 0 1
10099: PPUSH
10100: LD_INT 4
10102: PPUSH
10103: LD_EXP 36
10107: PUSH
10108: LD_INT 5
10110: ARRAY
10111: PPUSH
10112: LD_EXP 36
10116: PUSH
10117: LD_INT 6
10119: ARRAY
10120: PPUSH
10121: LD_INT 3
10123: PPUSH
10124: CALL_OW 145
// end ; if enemy_source > barracks_cost and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) > 0 then
10128: LD_EXP 5
10132: PUSH
10133: LD_EXP 13
10137: GREATER
10138: PUSH
10139: LD_INT 22
10141: PUSH
10142: LD_INT 2
10144: PUSH
10145: EMPTY
10146: LIST
10147: LIST
10148: PUSH
10149: LD_INT 30
10151: PUSH
10152: LD_INT 4
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: PUSH
10159: EMPTY
10160: LIST
10161: LIST
10162: PPUSH
10163: CALL_OW 69
10167: PUSH
10168: LD_INT 0
10170: GREATER
10171: AND
10172: IFFALSE 10211
// ComUpgrade ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
10174: LD_INT 22
10176: PUSH
10177: LD_INT 2
10179: PUSH
10180: EMPTY
10181: LIST
10182: LIST
10183: PUSH
10184: LD_INT 30
10186: PUSH
10187: LD_INT 4
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: PUSH
10194: EMPTY
10195: LIST
10196: LIST
10197: PPUSH
10198: CALL_OW 69
10202: PUSH
10203: LD_INT 1
10205: ARRAY
10206: PPUSH
10207: CALL_OW 146
// if enemy_source > work_cost and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_workshop ] ] ] ) = 0 then
10211: LD_EXP 5
10215: PUSH
10216: LD_EXP 19
10220: GREATER
10221: PUSH
10222: LD_INT 22
10224: PUSH
10225: LD_INT 2
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: PUSH
10232: LD_INT 2
10234: PUSH
10235: LD_INT 30
10237: PUSH
10238: LD_INT 3
10240: PUSH
10241: EMPTY
10242: LIST
10243: LIST
10244: PUSH
10245: LD_INT 30
10247: PUSH
10248: LD_INT 2
10250: PUSH
10251: EMPTY
10252: LIST
10253: LIST
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: LIST
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: PPUSH
10264: CALL_OW 69
10268: PUSH
10269: LD_INT 0
10271: EQUAL
10272: AND
10273: IFFALSE 10308
// ComBuild ( crane , b_workshop , n_xy [ 7 ] , n_xy [ 8 ] , 3 ) ;
10275: LD_VAR 0 1
10279: PPUSH
10280: LD_INT 2
10282: PPUSH
10283: LD_EXP 36
10287: PUSH
10288: LD_INT 7
10290: ARRAY
10291: PPUSH
10292: LD_EXP 36
10296: PUSH
10297: LD_INT 8
10299: ARRAY
10300: PPUSH
10301: LD_INT 3
10303: PPUSH
10304: CALL_OW 145
// if enemy_source > fac_cost and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] ] ) > 0 then
10308: LD_EXP 5
10312: PUSH
10313: LD_EXP 20
10317: GREATER
10318: PUSH
10319: LD_INT 22
10321: PUSH
10322: LD_INT 2
10324: PUSH
10325: EMPTY
10326: LIST
10327: LIST
10328: PUSH
10329: LD_INT 30
10331: PUSH
10332: LD_INT 2
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: PPUSH
10343: CALL_OW 69
10347: PUSH
10348: LD_INT 0
10350: GREATER
10351: AND
10352: IFFALSE 10391
// ComUpgrade ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] ] ) [ 1 ] ) ;
10354: LD_INT 22
10356: PUSH
10357: LD_INT 2
10359: PUSH
10360: EMPTY
10361: LIST
10362: LIST
10363: PUSH
10364: LD_INT 30
10366: PUSH
10367: LD_INT 2
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: PPUSH
10378: CALL_OW 69
10382: PUSH
10383: LD_INT 1
10385: ARRAY
10386: PPUSH
10387: CALL_OW 146
// if enemy_source > bunker_cost and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) < 2 then
10391: LD_EXP 5
10395: PUSH
10396: LD_EXP 29
10400: GREATER
10401: PUSH
10402: LD_INT 22
10404: PUSH
10405: LD_INT 2
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 30
10414: PUSH
10415: LD_INT 31
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: PPUSH
10426: CALL_OW 69
10430: PUSH
10431: LD_INT 2
10433: LESS
10434: AND
10435: IFFALSE 10549
// begin if FilterUnitsInArea ( w2 , [ f_type , unit_building ] ) = 0 then
10437: LD_INT 15
10439: PPUSH
10440: LD_INT 21
10442: PUSH
10443: LD_INT 3
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: PPUSH
10450: CALL_OW 70
10454: PUSH
10455: LD_INT 0
10457: EQUAL
10458: IFFALSE 10493
// ComBuild ( crane , b_breastwork , w_xy [ 1 ] , w_xy [ 2 ] , 1 ) ;
10460: LD_VAR 0 1
10464: PPUSH
10465: LD_INT 31
10467: PPUSH
10468: LD_EXP 37
10472: PUSH
10473: LD_INT 1
10475: ARRAY
10476: PPUSH
10477: LD_EXP 37
10481: PUSH
10482: LD_INT 2
10484: ARRAY
10485: PPUSH
10486: LD_INT 1
10488: PPUSH
10489: CALL_OW 145
// if FilterUnitsInArea ( w3 , [ f_type , unit_building ] ) = 0 then
10493: LD_INT 16
10495: PPUSH
10496: LD_INT 21
10498: PUSH
10499: LD_INT 3
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: PPUSH
10506: CALL_OW 70
10510: PUSH
10511: LD_INT 0
10513: EQUAL
10514: IFFALSE 10549
// ComBuild ( crane , b_breastwork , w_xy [ 3 ] , w_xy [ 4 ] , 1 ) ;
10516: LD_VAR 0 1
10520: PPUSH
10521: LD_INT 31
10523: PPUSH
10524: LD_EXP 37
10528: PUSH
10529: LD_INT 3
10531: ARRAY
10532: PPUSH
10533: LD_EXP 37
10537: PUSH
10538: LD_INT 4
10540: ARRAY
10541: PPUSH
10542: LD_INT 1
10544: PPUSH
10545: CALL_OW 145
// end ; end ;
10549: PPOPN 1
10551: END
