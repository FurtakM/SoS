// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// SetDifficulty ( GetMultiplayerSetting ( 0 ) ) ;
  11: LD_INT 0
  13: PPUSH
  14: CALL_OW 426
  18: PPUSH
  19: CALL 279 0 1
// InGameOn ;
  23: CALL_OW 8
// CenterNowOnXY ( 0 , 0 ) ;
  27: LD_INT 0
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: CALL_OW 86
// RandomizeAll ;
  37: CALL_OW 11
// DestroyTrash ;
  41: CALL 148 0 0
// ShowPath ;
  45: CALL 214 0 0
// RandMusic ( 1 , 3 ) ;
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 3
  54: PPUSH
  55: CALL 222 0 2
// PrepareAnimals ( [ 8 , 7 , 6 ] [ dif ] , 2 , 3 , nature ) ;
  59: LD_INT 8
  61: PUSH
  62: LD_INT 7
  64: PUSH
  65: LD_INT 6
  67: PUSH
  68: EMPTY
  69: LIST
  70: LIST
  71: LIST
  72: PUSH
  73: LD_EXP 1
  77: ARRAY
  78: PPUSH
  79: LD_INT 2
  81: PPUSH
  82: LD_INT 3
  84: PPUSH
  85: LD_INT 10
  87: PPUSH
  88: CALL 329 0 4
// PrepareRussian ;
  92: CALL 1407 0 0
// Action ;
  96: CALL 8631 0 0
// PrepareAmerican ;
 100: CALL 5251 0 0
// end ;
 104: END
// every 2 2$00 + 1 1$0 do var i , bool ;
 105: GO 107
 107: DISABLE
 108: LD_INT 0
 110: PPUSH
 111: PPUSH
// begin bool := Rand ( false , true ) ;
 112: LD_ADDR_VAR 0 2
 116: PUSH
 117: LD_INT 0
 119: PPUSH
 120: LD_INT 1
 122: PPUSH
 123: CALL_OW 12
 127: ST_TO_ADDR
// if bool then
 128: LD_VAR 0 2
 132: IFFALSE 144
// RandMusic ( 1 , 3 ) ;
 134: LD_INT 1
 136: PPUSH
 137: LD_INT 3
 139: PPUSH
 140: CALL 222 0 2
// enable ;
 144: ENABLE
// end ; end_of_file
 145: PPOPN 2
 147: END
// export function DestroyTrash ; var i ; begin
 148: LD_INT 0
 150: PPUSH
 151: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_not , [ f_lives , 5 ] ] ] ) do
 152: LD_ADDR_VAR 0 2
 156: PUSH
 157: LD_INT 22
 159: PUSH
 160: LD_INT 0
 162: PUSH
 163: EMPTY
 164: LIST
 165: LIST
 166: PUSH
 167: LD_INT 3
 169: PUSH
 170: LD_INT 24
 172: PUSH
 173: LD_INT 5
 175: PUSH
 176: EMPTY
 177: LIST
 178: LIST
 179: PUSH
 180: EMPTY
 181: LIST
 182: LIST
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 69
 192: PUSH
 193: FOR_IN
 194: IFFALSE 207
// KillUnit ( i ) ;
 196: LD_VAR 0 2
 200: PPUSH
 201: CALL_OW 66
 205: GO 193
 207: POP
 208: POP
// end ;
 209: LD_VAR 0 1
 213: RET
// export function ShowPath ; begin
 214: LD_INT 0
 216: PPUSH
// end ;
 217: LD_VAR 0 1
 221: RET
// export function RandMusic ( n1 , n2 ) ; var proc ; begin
 222: LD_INT 0
 224: PPUSH
 225: PPUSH
// proc := Rand ( 0 , 100 ) ;
 226: LD_ADDR_VAR 0 4
 230: PUSH
 231: LD_INT 0
 233: PPUSH
 234: LD_INT 100
 236: PPUSH
 237: CALL_OW 12
 241: ST_TO_ADDR
// if proc > 50 then
 242: LD_VAR 0 4
 246: PUSH
 247: LD_INT 50
 249: GREATER
 250: IFFALSE 264
// music_nat := n1 else
 252: LD_ADDR_OWVAR 71
 256: PUSH
 257: LD_VAR 0 1
 261: ST_TO_ADDR
 262: GO 274
// music_nat := n2 ;
 264: LD_ADDR_OWVAR 71
 268: PUSH
 269: LD_VAR 0 2
 273: ST_TO_ADDR
// end ;
 274: LD_VAR 0 3
 278: RET
// export dif ; export function SetDifficulty ( val ) ; begin
 279: LD_INT 0
 281: PPUSH
// if not val then
 282: LD_VAR 0 1
 286: NOT
 287: IFFALSE 297
// val := 2 ;
 289: LD_ADDR_VAR 0 1
 293: PUSH
 294: LD_INT 2
 296: ST_TO_ADDR
// dif := val ;
 297: LD_ADDR_EXP 1
 301: PUSH
 302: LD_VAR 0 1
 306: ST_TO_ADDR
// if dif < 3 then
 307: LD_EXP 1
 311: PUSH
 312: LD_INT 3
 314: LESS
 315: IFFALSE 324
// RemoveEnvironmentArea ( evnt ) ;
 317: LD_INT 9
 319: PPUSH
 320: CALL_OW 355
// end ;
 324: LD_VAR 0 2
 328: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
 333: PPUSH
 334: PPUSH
 335: PPUSH
// uc_nation = nation_nature ;
 336: LD_ADDR_OWVAR 21
 340: PUSH
 341: LD_INT 0
 343: ST_TO_ADDR
// uc_side = 0 ;
 344: LD_ADDR_OWVAR 20
 348: PUSH
 349: LD_INT 0
 351: ST_TO_ADDR
// hc_importance := 0 ;
 352: LD_ADDR_OWVAR 32
 356: PUSH
 357: LD_INT 0
 359: ST_TO_ADDR
// l = 0 ;
 360: LD_ADDR_VAR 0 6
 364: PUSH
 365: LD_INT 0
 367: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
 368: LD_ADDR_OWVAR 24
 372: PUSH
 373: LD_INT 0
 375: PPUSH
 376: LD_INT 5
 378: PPUSH
 379: CALL_OW 12
 383: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
 384: LD_ADDR_OWVAR 35
 388: PUSH
 389: LD_INT 5
 391: NEG
 392: PPUSH
 393: LD_INT 5
 395: PPUSH
 396: CALL_OW 12
 400: ST_TO_ADDR
// hc_gallery =  ;
 401: LD_ADDR_OWVAR 33
 405: PUSH
 406: LD_STRING 
 408: ST_TO_ADDR
// hc_class = class_apeman ;
 409: LD_ADDR_OWVAR 28
 413: PUSH
 414: LD_INT 12
 416: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
 417: LD_ADDR_OWVAR 29
 421: PUSH
 422: LD_INT 11
 424: PPUSH
 425: LD_INT 13
 427: PPUSH
 428: CALL_OW 12
 432: PUSH
 433: LD_INT 10
 435: PPUSH
 436: LD_INT 11
 438: PPUSH
 439: CALL_OW 12
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: ST_TO_ADDR
// hc_sex = sex_male ;
 448: LD_ADDR_OWVAR 27
 452: PUSH
 453: LD_INT 1
 455: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
 456: LD_ADDR_OWVAR 31
 460: PUSH
 461: LD_INT 0
 463: PPUSH
 464: LD_INT 2
 466: PPUSH
 467: CALL_OW 12
 471: PUSH
 472: LD_INT 0
 474: PUSH
 475: LD_INT 0
 477: PUSH
 478: LD_INT 0
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: ST_TO_ADDR
// apeman = CreateHuman ;
 487: LD_ADDR_VAR 0 7
 491: PUSH
 492: CALL_OW 44
 496: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
 497: LD_VAR 0 7
 501: PPUSH
 502: LD_VAR 0 4
 506: PPUSH
 507: LD_INT 0
 509: PPUSH
 510: CALL_OW 49
// l = l + 1 ;
 514: LD_ADDR_VAR 0 6
 518: PUSH
 519: LD_VAR 0 6
 523: PUSH
 524: LD_INT 1
 526: PLUS
 527: ST_TO_ADDR
// end until l = num1 ;
 528: LD_VAR 0 6
 532: PUSH
 533: LD_VAR 0 1
 537: EQUAL
 538: IFFALSE 368
// l = 0 ;
 540: LD_ADDR_VAR 0 6
 544: PUSH
 545: LD_INT 0
 547: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
 548: LD_ADDR_OWVAR 35
 552: PUSH
 553: LD_INT 0
 555: PPUSH
 556: LD_INT 25
 558: PPUSH
 559: CALL_OW 12
 563: ST_TO_ADDR
// hc_class = class_tiger ;
 564: LD_ADDR_OWVAR 28
 568: PUSH
 569: LD_INT 14
 571: ST_TO_ADDR
// hc_sex = sex_male ;
 572: LD_ADDR_OWVAR 27
 576: PUSH
 577: LD_INT 1
 579: ST_TO_ADDR
// hc_gallery = sandnature ;
 580: LD_ADDR_OWVAR 33
 584: PUSH
 585: LD_STRING sandnature
 587: ST_TO_ADDR
// hc_face_number = 3 ;
 588: LD_ADDR_OWVAR 34
 592: PUSH
 593: LD_INT 3
 595: ST_TO_ADDR
// tiger = CreateHuman ;
 596: LD_ADDR_VAR 0 8
 600: PUSH
 601: CALL_OW 44
 605: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
 606: LD_VAR 0 8
 610: PPUSH
 611: LD_VAR 0 4
 615: PPUSH
 616: LD_INT 0
 618: PPUSH
 619: CALL_OW 49
// l = l + 1 ;
 623: LD_ADDR_VAR 0 6
 627: PUSH
 628: LD_VAR 0 6
 632: PUSH
 633: LD_INT 1
 635: PLUS
 636: ST_TO_ADDR
// end until l = num2 ;
 637: LD_VAR 0 6
 641: PUSH
 642: LD_VAR 0 2
 646: EQUAL
 647: IFFALSE 548
// l = 0 ;
 649: LD_ADDR_VAR 0 6
 653: PUSH
 654: LD_INT 0
 656: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
 657: LD_ADDR_OWVAR 28
 661: PUSH
 662: LD_INT 18
 664: ST_TO_ADDR
// hc_gallery = sandnature ;
 665: LD_ADDR_OWVAR 33
 669: PUSH
 670: LD_STRING sandnature
 672: ST_TO_ADDR
// hc_face_number = 1 ;
 673: LD_ADDR_OWVAR 34
 677: PUSH
 678: LD_INT 1
 680: ST_TO_ADDR
// bird = CreateHuman ;
 681: LD_ADDR_VAR 0 9
 685: PUSH
 686: CALL_OW 44
 690: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
 691: LD_VAR 0 9
 695: PPUSH
 696: LD_INT 0
 698: PPUSH
 699: CALL_OW 51
// l = l + 1 ;
 703: LD_ADDR_VAR 0 6
 707: PUSH
 708: LD_VAR 0 6
 712: PUSH
 713: LD_INT 1
 715: PLUS
 716: ST_TO_ADDR
// end until l = num3 ;
 717: LD_VAR 0 6
 721: PUSH
 722: LD_VAR 0 3
 726: EQUAL
 727: IFFALSE 657
// end ;
 729: LD_VAR 0 5
 733: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
 734: LD_INT 0
 736: PPUSH
 737: PPUSH
 738: PPUSH
 739: PPUSH
 740: PPUSH
 741: PPUSH
// InitHc ;
 742: CALL_OW 19
// hc_class := clas ;
 746: LD_ADDR_OWVAR 28
 750: PUSH
 751: LD_VAR 0 1
 755: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
 756: LD_ADDR_VAR 0 4
 760: PUSH
 761: LD_VAR 0 2
 765: PUSH
 766: LD_INT 1
 768: NEG
 769: PPUSH
 770: LD_INT 1
 772: PPUSH
 773: CALL_OW 12
 777: PLUS
 778: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
 779: LD_ADDR_VAR 0 5
 783: PUSH
 784: LD_VAR 0 2
 788: PUSH
 789: LD_INT 1
 791: NEG
 792: PPUSH
 793: LD_INT 1
 795: PPUSH
 796: CALL_OW 12
 800: PLUS
 801: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
 802: LD_ADDR_VAR 0 6
 806: PUSH
 807: LD_VAR 0 2
 811: PUSH
 812: LD_INT 1
 814: NEG
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: CALL_OW 12
 823: PLUS
 824: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
 825: LD_ADDR_VAR 0 7
 829: PUSH
 830: LD_VAR 0 2
 834: PUSH
 835: LD_INT 1
 837: NEG
 838: PPUSH
 839: LD_INT 1
 841: PPUSH
 842: CALL_OW 12
 846: PLUS
 847: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
 848: LD_VAR 0 1
 852: PUSH
 853: LD_INT 1
 855: EQUAL
 856: PUSH
 857: LD_VAR 0 1
 861: PUSH
 862: LD_INT 9
 864: EQUAL
 865: OR
 866: PUSH
 867: LD_VAR 0 1
 871: PUSH
 872: LD_INT 5
 874: EQUAL
 875: OR
 876: PUSH
 877: LD_VAR 0 1
 881: PUSH
 882: LD_INT 8
 884: EQUAL
 885: OR
 886: IFFALSE 911
// bonus := [ 2 , 0 , 0 , 0 ] ;
 888: LD_ADDR_VAR 0 8
 892: PUSH
 893: LD_INT 2
 895: PUSH
 896: LD_INT 0
 898: PUSH
 899: LD_INT 0
 901: PUSH
 902: LD_INT 0
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: ST_TO_ADDR
// if clas = 2 then
 911: LD_VAR 0 1
 915: PUSH
 916: LD_INT 2
 918: EQUAL
 919: IFFALSE 944
// bonus := [ 0 , 2 , 0 , 0 ] ;
 921: LD_ADDR_VAR 0 8
 925: PUSH
 926: LD_INT 0
 928: PUSH
 929: LD_INT 2
 931: PUSH
 932: LD_INT 0
 934: PUSH
 935: LD_INT 0
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: ST_TO_ADDR
// if clas = 3 then
 944: LD_VAR 0 1
 948: PUSH
 949: LD_INT 3
 951: EQUAL
 952: IFFALSE 977
// bonus := [ 0 , 0 , 2 , 0 ] ;
 954: LD_ADDR_VAR 0 8
 958: PUSH
 959: LD_INT 0
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: LD_INT 2
 967: PUSH
 968: LD_INT 0
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: ST_TO_ADDR
// if clas = 4 then
 977: LD_VAR 0 1
 981: PUSH
 982: LD_INT 4
 984: EQUAL
 985: IFFALSE 1010
// bonus := [ 0 , 0 , 0 , 2 ] ;
 987: LD_ADDR_VAR 0 8
 991: PUSH
 992: LD_INT 0
 994: PUSH
 995: LD_INT 0
 997: PUSH
 998: LD_INT 0
1000: PUSH
1001: LD_INT 2
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
1010: LD_VAR 0 1
1014: PUSH
1015: LD_INT 4
1017: GREATER
1018: PUSH
1019: LD_VAR 0 1
1023: PUSH
1024: LD_INT 9
1026: NONEQUAL
1027: AND
1028: PUSH
1029: LD_VAR 0 1
1033: PUSH
1034: LD_INT 5
1036: NONEQUAL
1037: AND
1038: PUSH
1039: LD_VAR 0 1
1043: PUSH
1044: LD_INT 8
1046: NONEQUAL
1047: AND
1048: IFFALSE 1073
// bonus := [ 0 , 0 , 0 , 0 ] ;
1050: LD_ADDR_VAR 0 8
1054: PUSH
1055: LD_INT 0
1057: PUSH
1058: LD_INT 0
1060: PUSH
1061: LD_INT 0
1063: PUSH
1064: LD_INT 0
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
1073: LD_ADDR_OWVAR 30
1077: PUSH
1078: LD_INT 0
1080: PPUSH
1081: LD_INT 2
1083: PPUSH
1084: CALL_OW 12
1088: PUSH
1089: LD_INT 0
1091: PPUSH
1092: LD_INT 2
1094: PPUSH
1095: CALL_OW 12
1099: PUSH
1100: LD_INT 0
1102: PPUSH
1103: LD_INT 2
1105: PPUSH
1106: CALL_OW 12
1110: PUSH
1111: LD_INT 0
1113: PPUSH
1114: LD_INT 2
1116: PPUSH
1117: CALL_OW 12
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: LIST
1127: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
1128: LD_ADDR_OWVAR 31
1132: PUSH
1133: LD_VAR 0 4
1137: PUSH
1138: LD_VAR 0 8
1142: PUSH
1143: LD_INT 1
1145: ARRAY
1146: PLUS
1147: PUSH
1148: LD_VAR 0 5
1152: PUSH
1153: LD_VAR 0 8
1157: PUSH
1158: LD_INT 2
1160: ARRAY
1161: PLUS
1162: PUSH
1163: LD_VAR 0 6
1167: PUSH
1168: LD_VAR 0 8
1172: PUSH
1173: LD_INT 3
1175: ARRAY
1176: PLUS
1177: PUSH
1178: LD_VAR 0 7
1182: PUSH
1183: LD_VAR 0 8
1187: PUSH
1188: LD_INT 4
1190: ARRAY
1191: PLUS
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: ST_TO_ADDR
// if clas = 3 then
1199: LD_VAR 0 1
1203: PUSH
1204: LD_INT 3
1206: EQUAL
1207: IFFALSE 1219
// hc_sex := sex_male else
1209: LD_ADDR_OWVAR 27
1213: PUSH
1214: LD_INT 1
1216: ST_TO_ADDR
1217: GO 1235
// hc_sex := Rand ( sex_male , sex_female ) ;
1219: LD_ADDR_OWVAR 27
1223: PUSH
1224: LD_INT 1
1226: PPUSH
1227: LD_INT 2
1229: PPUSH
1230: CALL_OW 12
1234: ST_TO_ADDR
// hc_gallery :=  ;
1235: LD_ADDR_OWVAR 33
1239: PUSH
1240: LD_STRING 
1242: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 8 , 12 ) ] ;
1243: LD_ADDR_OWVAR 29
1247: PUSH
1248: LD_INT 8
1250: PPUSH
1251: LD_INT 12
1253: PPUSH
1254: CALL_OW 12
1258: PUSH
1259: LD_INT 8
1261: PPUSH
1262: LD_INT 12
1264: PPUSH
1265: CALL_OW 12
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: ST_TO_ADDR
// hc_name :=  ;
1274: LD_ADDR_OWVAR 26
1278: PUSH
1279: LD_STRING 
1281: ST_TO_ADDR
// result := CreateHuman ;
1282: LD_ADDR_VAR 0 3
1286: PUSH
1287: CALL_OW 44
1291: ST_TO_ADDR
// end ;
1292: LD_VAR 0 3
1296: RET
// export function CreateVehicleWithDriver ( chassis , engine , weapon , area , dir , lvl ) ; var veh ; begin
1297: LD_INT 0
1299: PPUSH
1300: PPUSH
// vc_chassis := chassis ;
1301: LD_ADDR_OWVAR 37
1305: PUSH
1306: LD_VAR 0 1
1310: ST_TO_ADDR
// vc_engine := engine ;
1311: LD_ADDR_OWVAR 39
1315: PUSH
1316: LD_VAR 0 2
1320: ST_TO_ADDR
// vc_weapon := weapon ;
1321: LD_ADDR_OWVAR 40
1325: PUSH
1326: LD_VAR 0 3
1330: ST_TO_ADDR
// vc_control := control_manual ;
1331: LD_ADDR_OWVAR 38
1335: PUSH
1336: LD_INT 1
1338: ST_TO_ADDR
// veh := CreateVehicle ;
1339: LD_ADDR_VAR 0 8
1343: PUSH
1344: CALL_OW 45
1348: ST_TO_ADDR
// SetDir ( veh , dir ) ;
1349: LD_VAR 0 8
1353: PPUSH
1354: LD_VAR 0 5
1358: PPUSH
1359: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
1363: LD_VAR 0 8
1367: PPUSH
1368: LD_VAR 0 4
1372: PPUSH
1373: LD_INT 0
1375: PPUSH
1376: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , lvl ) , veh ) ;
1380: LD_INT 3
1382: PPUSH
1383: LD_VAR 0 6
1387: PPUSH
1388: CALL 734 0 2
1392: PPUSH
1393: LD_VAR 0 8
1397: PPUSH
1398: CALL_OW 52
// end ; end_of_file
1402: LD_VAR 0 7
1406: RET
// export Popov , Commander , Platonov , Kapral ; export depot_rdy , dep_x , dep_y ; export function PrepareRussian ; var i , un , skill , team , p ; begin
1407: LD_INT 0
1409: PPUSH
1410: PPUSH
1411: PPUSH
1412: PPUSH
1413: PPUSH
1414: PPUSH
// depot_rdy := false ;
1415: LD_ADDR_EXP 6
1419: PUSH
1420: LD_INT 0
1422: ST_TO_ADDR
// uc_side := 6 ;
1423: LD_ADDR_OWVAR 20
1427: PUSH
1428: LD_INT 6
1430: ST_TO_ADDR
// uc_nation := 3 ;
1431: LD_ADDR_OWVAR 21
1435: PUSH
1436: LD_INT 3
1438: ST_TO_ADDR
// hc_gallery := ru ;
1439: LD_ADDR_OWVAR 33
1443: PUSH
1444: LD_STRING ru
1446: ST_TO_ADDR
// hc_face_number := 10 ;
1447: LD_ADDR_OWVAR 34
1451: PUSH
1452: LD_INT 10
1454: ST_TO_ADDR
// hc_name := Popov ;
1455: LD_ADDR_OWVAR 26
1459: PUSH
1460: LD_STRING Popov
1462: ST_TO_ADDR
// hc_class := 1 ;
1463: LD_ADDR_OWVAR 28
1467: PUSH
1468: LD_INT 1
1470: ST_TO_ADDR
// hc_sex := sex_male ;
1471: LD_ADDR_OWVAR 27
1475: PUSH
1476: LD_INT 1
1478: ST_TO_ADDR
// popov := CreateHuman ;
1479: LD_ADDR_EXP 2
1483: PUSH
1484: CALL_OW 44
1488: ST_TO_ADDR
// hc_gallery := general ;
1489: LD_ADDR_OWVAR 33
1493: PUSH
1494: LD_STRING general
1496: ST_TO_ADDR
// hc_face_number := 1 ;
1497: LD_ADDR_OWVAR 34
1501: PUSH
1502: LD_INT 1
1504: ST_TO_ADDR
// hc_name := Platonov ;
1505: LD_ADDR_OWVAR 26
1509: PUSH
1510: LD_STRING Platonov
1512: ST_TO_ADDR
// platonov := CreateHuman ;
1513: LD_ADDR_EXP 4
1517: PUSH
1518: CALL_OW 44
1522: ST_TO_ADDR
// uc_side := 3 ;
1523: LD_ADDR_OWVAR 20
1527: PUSH
1528: LD_INT 3
1530: ST_TO_ADDR
// ChangeSideFog ( 3 , 6 ) ;
1531: LD_INT 3
1533: PPUSH
1534: LD_INT 6
1536: PPUSH
1537: CALL_OW 343
// skill := [ 6 , 5 , 4 ] [ dif ] ;
1541: LD_ADDR_VAR 0 4
1545: PUSH
1546: LD_INT 6
1548: PUSH
1549: LD_INT 5
1551: PUSH
1552: LD_INT 4
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: LIST
1559: PUSH
1560: LD_EXP 1
1564: ARRAY
1565: ST_TO_ADDR
// team := [ ] ;
1566: LD_ADDR_VAR 0 5
1570: PUSH
1571: EMPTY
1572: ST_TO_ADDR
// hc_importance := 100 ;
1573: LD_ADDR_OWVAR 32
1577: PUSH
1578: LD_INT 100
1580: ST_TO_ADDR
// hc_gallery := gamma ;
1581: LD_ADDR_OWVAR 33
1585: PUSH
1586: LD_STRING gamma
1588: ST_TO_ADDR
// hc_face_number := 1 ;
1589: LD_ADDR_OWVAR 34
1593: PUSH
1594: LD_INT 1
1596: ST_TO_ADDR
// hc_class := 1 ;
1597: LD_ADDR_OWVAR 28
1601: PUSH
1602: LD_INT 1
1604: ST_TO_ADDR
// hc_skills := [ [ 8 , 7 , 6 ] [ dif ] , 5 , 3 , 0 ] ;
1605: LD_ADDR_OWVAR 31
1609: PUSH
1610: LD_INT 8
1612: PUSH
1613: LD_INT 7
1615: PUSH
1616: LD_INT 6
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: LIST
1623: PUSH
1624: LD_EXP 1
1628: ARRAY
1629: PUSH
1630: LD_INT 5
1632: PUSH
1633: LD_INT 3
1635: PUSH
1636: LD_INT 0
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: ST_TO_ADDR
// hc_sex := sex_male ;
1645: LD_ADDR_OWVAR 27
1649: PUSH
1650: LD_INT 1
1652: ST_TO_ADDR
// hc_name := Mjr. Jurij Karakanov ;
1653: LD_ADDR_OWVAR 26
1657: PUSH
1658: LD_STRING Mjr. Jurij Karakanov
1660: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1661: LD_ADDR_OWVAR 29
1665: PUSH
1666: LD_INT 10
1668: PUSH
1669: LD_INT 11
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: ST_TO_ADDR
// commander := CreateHuman ;
1676: LD_ADDR_EXP 3
1680: PUSH
1681: CALL_OW 44
1685: ST_TO_ADDR
// team := team ^ commander ;
1686: LD_ADDR_VAR 0 5
1690: PUSH
1691: LD_VAR 0 5
1695: PUSH
1696: LD_EXP 3
1700: ADD
1701: ST_TO_ADDR
// hc_importance := 0 ;
1702: LD_ADDR_OWVAR 32
1706: PUSH
1707: LD_INT 0
1709: ST_TO_ADDR
// hc_name :=  ;
1710: LD_ADDR_OWVAR 26
1714: PUSH
1715: LD_STRING 
1717: ST_TO_ADDR
// hc_gallery :=  ;
1718: LD_ADDR_OWVAR 33
1722: PUSH
1723: LD_STRING 
1725: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
1726: LD_ADDR_OWVAR 29
1730: PUSH
1731: LD_INT 12
1733: PUSH
1734: LD_INT 10
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: ST_TO_ADDR
// hc_sex := sex_male ;
1741: LD_ADDR_OWVAR 27
1745: PUSH
1746: LD_INT 1
1748: ST_TO_ADDR
// Kapral := CreateHuman ;
1749: LD_ADDR_EXP 5
1753: PUSH
1754: CALL_OW 44
1758: ST_TO_ADDR
// for i = 3 downto dif do
1759: LD_ADDR_VAR 0 2
1763: PUSH
1764: DOUBLE
1765: LD_INT 3
1767: INC
1768: ST_TO_ADDR
1769: LD_EXP 1
1773: PUSH
1774: FOR_DOWNTO
1775: IFFALSE 1881
// begin vc_chassis := ru_medium_tracked ;
1777: LD_ADDR_OWVAR 37
1781: PUSH
1782: LD_INT 22
1784: ST_TO_ADDR
// vc_engine := engine_combustion ;
1785: LD_ADDR_OWVAR 39
1789: PUSH
1790: LD_INT 1
1792: ST_TO_ADDR
// vc_control := control_manual ;
1793: LD_ADDR_OWVAR 38
1797: PUSH
1798: LD_INT 1
1800: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_gun , ru_gun ] [ i ] ;
1801: LD_ADDR_OWVAR 40
1805: PUSH
1806: LD_INT 43
1808: PUSH
1809: LD_INT 44
1811: PUSH
1812: LD_INT 44
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: LIST
1819: PUSH
1820: LD_VAR 0 2
1824: ARRAY
1825: ST_TO_ADDR
// vc_fuel_battery := Rand ( 55 , 77 ) ;
1826: LD_ADDR_OWVAR 41
1830: PUSH
1831: LD_INT 55
1833: PPUSH
1834: LD_INT 77
1836: PPUSH
1837: CALL_OW 12
1841: ST_TO_ADDR
// un := CreateVehicle ;
1842: LD_ADDR_VAR 0 3
1846: PUSH
1847: CALL_OW 45
1851: ST_TO_ADDR
// SetDir ( un , 5 ) ;
1852: LD_VAR 0 3
1856: PPUSH
1857: LD_INT 5
1859: PPUSH
1860: CALL_OW 233
// PlaceUnitArea ( un , rus_spawn , false ) ;
1864: LD_VAR 0 3
1868: PPUSH
1869: LD_INT 1
1871: PPUSH
1872: LD_INT 0
1874: PPUSH
1875: CALL_OW 49
// end ;
1879: GO 1774
1881: POP
1882: POP
// vc_weapon := ru_heavy_machine_gun ;
1883: LD_ADDR_OWVAR 40
1887: PUSH
1888: LD_INT 42
1890: ST_TO_ADDR
// vc_fuel_battery := Rand ( 55 , 77 ) ;
1891: LD_ADDR_OWVAR 41
1895: PUSH
1896: LD_INT 55
1898: PPUSH
1899: LD_INT 77
1901: PPUSH
1902: CALL_OW 12
1906: ST_TO_ADDR
// un := CreateVehicle ;
1907: LD_ADDR_VAR 0 3
1911: PUSH
1912: CALL_OW 45
1916: ST_TO_ADDR
// SetDir ( un , 5 ) ;
1917: LD_VAR 0 3
1921: PPUSH
1922: LD_INT 5
1924: PPUSH
1925: CALL_OW 233
// PlaceUnitArea ( un , rus_spawn , false ) ;
1929: LD_VAR 0 3
1933: PPUSH
1934: LD_INT 1
1936: PPUSH
1937: LD_INT 0
1939: PPUSH
1940: CALL_OW 49
// for p = 1 to 4 do
1944: LD_ADDR_VAR 0 6
1948: PUSH
1949: DOUBLE
1950: LD_INT 1
1952: DEC
1953: ST_TO_ADDR
1954: LD_INT 4
1956: PUSH
1957: FOR_TO
1958: IFFALSE 2025
// for i = 1 to [ 5 , 4 , 3 ] [ dif ] do
1960: LD_ADDR_VAR 0 2
1964: PUSH
1965: DOUBLE
1966: LD_INT 1
1968: DEC
1969: ST_TO_ADDR
1970: LD_INT 5
1972: PUSH
1973: LD_INT 4
1975: PUSH
1976: LD_INT 3
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: LIST
1983: PUSH
1984: LD_EXP 1
1988: ARRAY
1989: PUSH
1990: FOR_TO
1991: IFFALSE 2021
// team := team ^ CreateHumanWithClass ( p , skill ) ;
1993: LD_ADDR_VAR 0 5
1997: PUSH
1998: LD_VAR 0 5
2002: PUSH
2003: LD_VAR 0 6
2007: PPUSH
2008: LD_VAR 0 4
2012: PPUSH
2013: CALL 734 0 2
2017: ADD
2018: ST_TO_ADDR
2019: GO 1990
2021: POP
2022: POP
2023: GO 1957
2025: POP
2026: POP
// for i = 1 to team do
2027: LD_ADDR_VAR 0 2
2031: PUSH
2032: DOUBLE
2033: LD_INT 1
2035: DEC
2036: ST_TO_ADDR
2037: LD_VAR 0 5
2041: PUSH
2042: FOR_TO
2043: IFFALSE 2161
// if GetClass ( team [ i ] ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_empty ] ] ) then
2045: LD_VAR 0 5
2049: PUSH
2050: LD_VAR 0 2
2054: ARRAY
2055: PPUSH
2056: CALL_OW 257
2060: PUSH
2061: LD_INT 3
2063: EQUAL
2064: PUSH
2065: LD_INT 22
2067: PUSH
2068: LD_INT 3
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 58
2077: PUSH
2078: EMPTY
2079: LIST
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PPUSH
2085: CALL_OW 69
2089: AND
2090: IFFALSE 2138
// PlaceHumanInUnit ( team [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_empty ] ] ) [ 1 ] ) else
2092: LD_VAR 0 5
2096: PUSH
2097: LD_VAR 0 2
2101: ARRAY
2102: PPUSH
2103: LD_INT 22
2105: PUSH
2106: LD_INT 3
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: PUSH
2113: LD_INT 58
2115: PUSH
2116: EMPTY
2117: LIST
2118: PUSH
2119: EMPTY
2120: LIST
2121: LIST
2122: PPUSH
2123: CALL_OW 69
2127: PUSH
2128: LD_INT 1
2130: ARRAY
2131: PPUSH
2132: CALL_OW 52
2136: GO 2159
// PlaceUnitArea ( team [ i ] , rus_spawn , false ) ;
2138: LD_VAR 0 5
2142: PUSH
2143: LD_VAR 0 2
2147: ARRAY
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: LD_INT 0
2154: PPUSH
2155: CALL_OW 49
2159: GO 2042
2161: POP
2162: POP
// end ;
2163: LD_VAR 0 1
2167: RET
// every 0 0$10 trigger depot_rdy do var i , un , l , driver ;
2168: LD_EXP 6
2172: IFFALSE 2542
2174: GO 2176
2176: DISABLE
2177: LD_INT 0
2179: PPUSH
2180: PPUSH
2181: PPUSH
2182: PPUSH
// begin Wait ( 0 0$07 ) ;
2183: LD_INT 245
2185: PPUSH
2186: CALL_OW 67
// l := 0 ;
2190: LD_ADDR_VAR 0 3
2194: PUSH
2195: LD_INT 0
2197: ST_TO_ADDR
// repeat begin uc_side := 6 ;
2198: LD_ADDR_OWVAR 20
2202: PUSH
2203: LD_INT 6
2205: ST_TO_ADDR
// uc_nation := 3 ;
2206: LD_ADDR_OWVAR 21
2210: PUSH
2211: LD_INT 3
2213: ST_TO_ADDR
// CreateVehicleWithDriver ( ru_medium_tracked , engine_combustion , ru_cargo_bay , rus_cr_spawn , 5 , Rand ( 3 , 6 ) ) ;
2214: LD_INT 22
2216: PPUSH
2217: LD_INT 1
2219: PPUSH
2220: LD_INT 51
2222: PPUSH
2223: LD_INT 5
2225: PPUSH
2226: LD_INT 5
2228: PPUSH
2229: LD_INT 3
2231: PPUSH
2232: LD_INT 6
2234: PPUSH
2235: CALL_OW 12
2239: PPUSH
2240: CALL 1297 0 6
// un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
2244: LD_ADDR_VAR 0 2
2248: PUSH
2249: LD_INT 22
2251: PUSH
2252: LD_INT 6
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 34
2261: PUSH
2262: LD_INT 51
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PPUSH
2273: CALL_OW 69
2277: PUSH
2278: LD_INT 1
2280: ARRAY
2281: ST_TO_ADDR
// SetCargo ( un , mat_cans , 100 ) ;
2282: LD_VAR 0 2
2286: PPUSH
2287: LD_INT 1
2289: PPUSH
2290: LD_INT 100
2292: PPUSH
2293: CALL_OW 290
// ComMoveXY ( un , dep_x + 2 , dep_y ) ;
2297: LD_VAR 0 2
2301: PPUSH
2302: LD_EXP 7
2306: PUSH
2307: LD_INT 2
2309: PLUS
2310: PPUSH
2311: LD_EXP 8
2315: PPUSH
2316: CALL_OW 111
// AddComUnload ( un ) ;
2320: LD_VAR 0 2
2324: PPUSH
2325: CALL_OW 219
// if ( l = 0 ) then
2329: LD_VAR 0 3
2333: PUSH
2334: LD_INT 0
2336: EQUAL
2337: IFFALSE 2373
// begin Wait ( 0 0$03 ) ;
2339: LD_INT 105
2341: PPUSH
2342: CALL_OW 67
// driver := IsDrivenBy ( un ) ;
2346: LD_ADDR_VAR 0 4
2350: PUSH
2351: LD_VAR 0 2
2355: PPUSH
2356: CALL_OW 311
2360: ST_TO_ADDR
// Say ( driver , Dtran ) ;
2361: LD_VAR 0 4
2365: PPUSH
2366: LD_STRING Dtran
2368: PPUSH
2369: CALL_OW 88
// end ; if ( l = [ 7 , 6 , 5 ] [ dif ] - 1 ) then
2373: LD_VAR 0 3
2377: PUSH
2378: LD_INT 7
2380: PUSH
2381: LD_INT 6
2383: PUSH
2384: LD_INT 5
2386: PUSH
2387: EMPTY
2388: LIST
2389: LIST
2390: LIST
2391: PUSH
2392: LD_EXP 1
2396: ARRAY
2397: PUSH
2398: LD_INT 1
2400: MINUS
2401: EQUAL
2402: IFFALSE 2438
// begin Wait ( 0 0$03 ) ;
2404: LD_INT 105
2406: PPUSH
2407: CALL_OW 67
// driver := IsDrivenBy ( un ) ;
2411: LD_ADDR_VAR 0 4
2415: PUSH
2416: LD_VAR 0 2
2420: PPUSH
2421: CALL_OW 311
2425: ST_TO_ADDR
// Say ( driver , Dtrans ) ;
2426: LD_VAR 0 4
2430: PPUSH
2431: LD_STRING Dtrans
2433: PPUSH
2434: CALL_OW 88
// end ; while ( not IsInArea ( un , rus_exit ) ) do
2438: LD_VAR 0 2
2442: PPUSH
2443: LD_INT 6
2445: PPUSH
2446: CALL_OW 308
2450: NOT
2451: IFFALSE 2477
// begin Wait ( 0 0$01 ) ;
2453: LD_INT 35
2455: PPUSH
2456: CALL_OW 67
// AddComMoveXY ( un , 69 , 97 ) ;
2460: LD_VAR 0 2
2464: PPUSH
2465: LD_INT 69
2467: PPUSH
2468: LD_INT 97
2470: PPUSH
2471: CALL_OW 171
// end ;
2475: GO 2438
// RemoveUnit ( un ) ;
2477: LD_VAR 0 2
2481: PPUSH
2482: CALL_OW 64
// l = l + 1 ;
2486: LD_ADDR_VAR 0 3
2490: PUSH
2491: LD_VAR 0 3
2495: PUSH
2496: LD_INT 1
2498: PLUS
2499: ST_TO_ADDR
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
2500: LD_INT 1155
2502: PPUSH
2503: LD_INT 5355
2505: PPUSH
2506: CALL_OW 12
2510: PPUSH
2511: CALL_OW 67
// end until l = [ 7 , 6 , 5 ] [ dif ] ;
2515: LD_VAR 0 3
2519: PUSH
2520: LD_INT 7
2522: PUSH
2523: LD_INT 6
2525: PUSH
2526: LD_INT 5
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: LIST
2533: PUSH
2534: LD_EXP 1
2538: ARRAY
2539: EQUAL
2540: IFFALSE 2198
// end ; end_of_file
2542: PPOPN 4
2544: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_bazooka and event_rocket = false then
2545: LD_VAR 0 1
2549: PUSH
2550: LD_INT 44
2552: EQUAL
2553: PUSH
2554: LD_EXP 20
2558: PUSH
2559: LD_INT 0
2561: EQUAL
2562: AND
2563: IFFALSE 2709
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) > 0 then
2565: LD_INT 22
2567: PUSH
2568: LD_INT 3
2570: PUSH
2571: EMPTY
2572: LIST
2573: LIST
2574: PUSH
2575: LD_INT 25
2577: PUSH
2578: LD_INT 4
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: PPUSH
2589: CALL_OW 69
2593: PUSH
2594: LD_INT 0
2596: GREATER
2597: IFFALSE 2709
// begin event_rocket := true ;
2599: LD_ADDR_EXP 20
2603: PUSH
2604: LD_INT 1
2606: ST_TO_ADDR
// if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) > 0 then
2607: LD_INT 22
2609: PUSH
2610: LD_INT 3
2612: PUSH
2613: EMPTY
2614: LIST
2615: LIST
2616: PUSH
2617: LD_INT 25
2619: PUSH
2620: LD_INT 4
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: PUSH
2627: LD_INT 26
2629: PUSH
2630: LD_INT 1
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: LIST
2641: PUSH
2642: EMPTY
2643: LIST
2644: PPUSH
2645: CALL_OW 69
2649: PUSH
2650: LD_INT 0
2652: GREATER
2653: IFFALSE 2709
// Say ( FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) [ 1 ] , Dsci2 ) ;
2655: LD_INT 22
2657: PUSH
2658: LD_INT 3
2660: PUSH
2661: EMPTY
2662: LIST
2663: LIST
2664: PUSH
2665: LD_INT 25
2667: PUSH
2668: LD_INT 4
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: PUSH
2675: LD_INT 26
2677: PUSH
2678: LD_INT 1
2680: PUSH
2681: EMPTY
2682: LIST
2683: LIST
2684: PUSH
2685: EMPTY
2686: LIST
2687: LIST
2688: LIST
2689: PUSH
2690: EMPTY
2691: LIST
2692: PPUSH
2693: CALL_OW 69
2697: PUSH
2698: LD_INT 1
2700: ARRAY
2701: PPUSH
2702: LD_STRING Dsci2
2704: PPUSH
2705: CALL_OW 88
// end ; end ;
2709: PPOPN 2
2711: END
// on VehicleConstructed ( un , fac ) do begin SOS_VehicleConstructed ( un , fac ) ;
2712: LD_VAR 0 1
2716: PPUSH
2717: LD_VAR 0 2
2721: PPUSH
2722: CALL 25391 0 2
// if GetSide ( un ) = 3 and GetControl ( un ) = control_computer then
2726: LD_VAR 0 1
2730: PPUSH
2731: CALL_OW 255
2735: PUSH
2736: LD_INT 3
2738: EQUAL
2739: PUSH
2740: LD_VAR 0 1
2744: PPUSH
2745: CALL_OW 263
2749: PUSH
2750: LD_INT 3
2752: EQUAL
2753: AND
2754: IFFALSE 2764
// comp_tested := true ;
2756: LD_ADDR_EXP 22
2760: PUSH
2761: LD_INT 1
2763: ST_TO_ADDR
// end ;
2764: PPOPN 2
2766: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
2767: LD_VAR 0 1
2771: PUSH
2772: LD_INT 22
2774: PUSH
2775: LD_INT 1
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: PUSH
2782: LD_INT 21
2784: PUSH
2785: LD_INT 3
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PPUSH
2796: CALL_OW 69
2800: IN
2801: IFFALSE 2879
// if attacked = false and sikorski_ar = false then
2803: LD_EXP 15
2807: PUSH
2808: LD_INT 0
2810: EQUAL
2811: PUSH
2812: LD_EXP 12
2816: PUSH
2817: LD_INT 0
2819: EQUAL
2820: AND
2821: IFFALSE 2879
// begin attacked := true ;
2823: LD_ADDR_EXP 15
2827: PUSH
2828: LD_INT 1
2830: ST_TO_ADDR
// if IsInUnit ( donald ) then
2831: LD_EXP 13
2835: PPUSH
2836: CALL_OW 310
2840: IFFALSE 2856
// SayRadio ( donald , DGammaF ) else
2842: LD_EXP 13
2846: PPUSH
2847: LD_STRING DGammaF
2849: PPUSH
2850: CALL_OW 94
2854: GO 2879
// if IsInUnit ( van ) then
2856: LD_EXP 14
2860: PPUSH
2861: CALL_OW 310
2865: IFFALSE 2879
// SayRadio ( van , DGammaM ) ;
2867: LD_EXP 14
2871: PPUSH
2872: LD_STRING DGammaM
2874: PPUSH
2875: CALL_OW 94
// end ; if un in FilterAllUnits ( [ f_control , control_remote ] ) then
2879: LD_VAR 0 1
2883: PUSH
2884: LD_INT 33
2886: PUSH
2887: LD_INT 2
2889: PUSH
2890: EMPTY
2891: LIST
2892: LIST
2893: PPUSH
2894: CALL_OW 69
2898: IN
2899: IFFALSE 2910
// ComUnlink ( un ) ;
2901: LD_VAR 0 1
2905: PPUSH
2906: CALL_OW 136
// end ;
2910: PPOPN 1
2912: END
// on ApemanTamed ( ape , sci ) do begin if GetSex ( sci ) = sex_male then
2913: LD_VAR 0 2
2917: PPUSH
2918: CALL_OW 258
2922: PUSH
2923: LD_INT 1
2925: EQUAL
2926: IFFALSE 2940
// Say ( sci , Dsci3 ) ;
2928: LD_VAR 0 2
2932: PPUSH
2933: LD_STRING Dsci3
2935: PPUSH
2936: CALL_OW 88
// end ;
2940: PPOPN 2
2942: END
// on BuildingComplete ( b ) do var i ;
2943: LD_INT 0
2945: PPUSH
// begin if GetBType ( b ) = b_depot and GetSide ( b ) = 3 and depot_rdy = false then
2946: LD_VAR 0 1
2950: PPUSH
2951: CALL_OW 266
2955: PUSH
2956: LD_INT 0
2958: EQUAL
2959: PUSH
2960: LD_VAR 0 1
2964: PPUSH
2965: CALL_OW 255
2969: PUSH
2970: LD_INT 3
2972: EQUAL
2973: AND
2974: PUSH
2975: LD_EXP 6
2979: PUSH
2980: LD_INT 0
2982: EQUAL
2983: AND
2984: IFFALSE 3048
// begin SetBName ( b , kalinin ) ;
2986: LD_VAR 0 1
2990: PPUSH
2991: LD_STRING kalinin
2993: PPUSH
2994: CALL_OW 500
// dep_x := GetX ( b ) ;
2998: LD_ADDR_EXP 7
3002: PUSH
3003: LD_VAR 0 1
3007: PPUSH
3008: CALL_OW 250
3012: ST_TO_ADDR
// dep_y := GetY ( b ) ;
3013: LD_ADDR_EXP 8
3017: PUSH
3018: LD_VAR 0 1
3022: PPUSH
3023: CALL_OW 251
3027: ST_TO_ADDR
// depot_rdy := true ;
3028: LD_ADDR_EXP 6
3032: PUSH
3033: LD_INT 1
3035: ST_TO_ADDR
// SayRadio ( popov , Dpop3 ) ;
3036: LD_EXP 2
3040: PPUSH
3041: LD_STRING Dpop3
3043: PPUSH
3044: CALL_OW 94
// end ; if GetBType ( b ) = b_lab and GetSide ( b ) = 3 and event_comp = false then
3048: LD_VAR 0 1
3052: PPUSH
3053: CALL_OW 266
3057: PUSH
3058: LD_INT 6
3060: EQUAL
3061: PUSH
3062: LD_VAR 0 1
3066: PPUSH
3067: CALL_OW 255
3071: PUSH
3072: LD_INT 3
3074: EQUAL
3075: AND
3076: PUSH
3077: LD_EXP 21
3081: PUSH
3082: LD_INT 0
3084: EQUAL
3085: AND
3086: IFFALSE 3181
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) > 0 then
3088: LD_INT 22
3090: PUSH
3091: LD_INT 3
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: PUSH
3098: LD_INT 25
3100: PUSH
3101: LD_INT 4
3103: PUSH
3104: EMPTY
3105: LIST
3106: LIST
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: PPUSH
3112: CALL_OW 69
3116: PUSH
3117: LD_INT 0
3119: GREATER
3120: IFFALSE 3181
// begin event_comp := true ;
3122: LD_ADDR_EXP 21
3126: PUSH
3127: LD_INT 1
3129: ST_TO_ADDR
// Say ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , Dsci1 ) ;
3130: LD_INT 22
3132: PUSH
3133: LD_INT 3
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: PUSH
3140: LD_INT 25
3142: PUSH
3143: LD_INT 4
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: PUSH
3150: LD_INT 26
3152: PUSH
3153: LD_INT 1
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: LIST
3164: PPUSH
3165: CALL_OW 69
3169: PUSH
3170: LD_INT 1
3172: ARRAY
3173: PPUSH
3174: LD_STRING Dsci1
3176: PPUSH
3177: CALL_OW 88
// end ; if GetBType ( b ) = b_bunker and GetSide ( b ) = 1 then
3181: LD_VAR 0 1
3185: PPUSH
3186: CALL_OW 266
3190: PUSH
3191: LD_INT 32
3193: EQUAL
3194: PUSH
3195: LD_VAR 0 1
3199: PPUSH
3200: CALL_OW 255
3204: PUSH
3205: LD_INT 1
3207: EQUAL
3208: AND
3209: IFFALSE 3274
// begin RaiseSailEvent ( 6 ) ;
3211: LD_INT 6
3213: PPUSH
3214: CALL_OW 427
// AddComPlaceWeapon ( b , gamma_towers [ 4 ] ) ;
3218: LD_VAR 0 1
3222: PPUSH
3223: LD_EXP 18
3227: PUSH
3228: LD_INT 4
3230: ARRAY
3231: PPUSH
3232: CALL_OW 208
// for i = 1 to 4 do
3236: LD_ADDR_VAR 0 2
3240: PUSH
3241: DOUBLE
3242: LD_INT 1
3244: DEC
3245: ST_TO_ADDR
3246: LD_INT 4
3248: PUSH
3249: FOR_TO
3250: IFFALSE 3272
// gamma_towers := Delete ( gamma_towers , 1 ) ;
3252: LD_ADDR_EXP 18
3256: PUSH
3257: LD_EXP 18
3261: PPUSH
3262: LD_INT 1
3264: PPUSH
3265: CALL_OW 3
3269: ST_TO_ADDR
3270: GO 3249
3272: POP
3273: POP
// end ; end ;
3274: PPOPN 2
3276: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3277: LD_VAR 0 1
3281: PPUSH
3282: CALL 25271 0 1
// if un in Patrol then
3286: LD_VAR 0 1
3290: PUSH
3291: LD_EXP 17
3295: IN
3296: IFFALSE 3314
// Patrol := Patrol diff un ;
3298: LD_ADDR_EXP 17
3302: PUSH
3303: LD_EXP 17
3307: PUSH
3308: LD_VAR 0 1
3312: DIFF
3313: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
3314: LD_VAR 0 1
3318: PUSH
3319: LD_INT 22
3321: PUSH
3322: LD_INT 1
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: PUSH
3329: LD_INT 30
3331: PUSH
3332: LD_INT 32
3334: PUSH
3335: EMPTY
3336: LIST
3337: LIST
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PPUSH
3343: CALL_OW 69
3347: IN
3348: IFFALSE 3434
// begin gamma_towers := gamma_towers ^ GetX ( un ) ;
3350: LD_ADDR_EXP 18
3354: PUSH
3355: LD_EXP 18
3359: PUSH
3360: LD_VAR 0 1
3364: PPUSH
3365: CALL_OW 250
3369: ADD
3370: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetY ( un ) ;
3371: LD_ADDR_EXP 18
3375: PUSH
3376: LD_EXP 18
3380: PUSH
3381: LD_VAR 0 1
3385: PPUSH
3386: CALL_OW 251
3390: ADD
3391: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetDir ( un ) ;
3392: LD_ADDR_EXP 18
3396: PUSH
3397: LD_EXP 18
3401: PUSH
3402: LD_VAR 0 1
3406: PPUSH
3407: CALL_OW 254
3411: ADD
3412: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetBWeapon ( un ) ;
3413: LD_ADDR_EXP 18
3417: PUSH
3418: LD_EXP 18
3422: PUSH
3423: LD_VAR 0 1
3427: PPUSH
3428: CALL_OW 269
3432: ADD
3433: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) then
3434: LD_VAR 0 1
3438: PUSH
3439: LD_INT 33
3441: PUSH
3442: LD_INT 2
3444: PUSH
3445: EMPTY
3446: LIST
3447: LIST
3448: PUSH
3449: LD_INT 3
3451: PUSH
3452: LD_INT 34
3454: PUSH
3455: LD_INT 13
3457: PUSH
3458: EMPTY
3459: LIST
3460: LIST
3461: PUSH
3462: EMPTY
3463: LIST
3464: LIST
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: PPUSH
3470: CALL_OW 69
3474: IN
3475: IFFALSE 3491
// new_veh := new_veh + 1 ;
3477: LD_ADDR_EXP 19
3481: PUSH
3482: LD_EXP 19
3486: PUSH
3487: LD_INT 1
3489: PLUS
3490: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_weapon , us_crane ] ) then
3491: LD_VAR 0 1
3495: PUSH
3496: LD_INT 34
3498: PUSH
3499: LD_INT 13
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: PPUSH
3506: CALL_OW 69
3510: IN
3511: IFFALSE 3532
// AddComConstruct ( am_fac , us_medium_tracked , engine_solar , control_remote , us_crane ) ;
3513: LD_INT 26
3515: PPUSH
3516: LD_INT 3
3518: PPUSH
3519: LD_INT 2
3521: PPUSH
3522: LD_INT 2
3524: PPUSH
3525: LD_INT 13
3527: PPUSH
3528: CALL_OW 185
// if un = am_dep then
3532: LD_VAR 0 1
3536: PUSH
3537: LD_INT 25
3539: EQUAL
3540: IFFALSE 3708
// begin SayRadio ( Platonov , DPlat ) ;
3542: LD_EXP 4
3546: PPUSH
3547: LD_STRING DPlat
3549: PPUSH
3550: CALL_OW 94
// if timer <= 30 30$00 then
3554: LD_EXP 24
3558: PUSH
3559: LD_INT 63000
3561: LESSEQUAL
3562: IFFALSE 3576
// AddMedal ( gamma_med3 , 1 ) else
3564: LD_STRING gamma_med3
3566: PPUSH
3567: LD_INT 1
3569: PPUSH
3570: CALL_OW 101
3574: GO 3626
// if timer <= [ 50 50$00 , 42 42$00 , 35 35$00 ] [ dif ] then
3576: LD_EXP 24
3580: PUSH
3581: LD_INT 105000
3583: PUSH
3584: LD_INT 88200
3586: PUSH
3587: LD_INT 73500
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: LIST
3594: PUSH
3595: LD_EXP 1
3599: ARRAY
3600: LESSEQUAL
3601: IFFALSE 3615
// AddMedal ( gamma_med3 , 2 ) else
3603: LD_STRING gamma_med3
3605: PPUSH
3606: LD_INT 2
3608: PPUSH
3609: CALL_OW 101
3613: GO 3626
// AddMedal ( gamma_med3 , - 1 ) ;
3615: LD_STRING gamma_med3
3617: PPUSH
3618: LD_INT 1
3620: NEG
3621: PPUSH
3622: CALL_OW 101
// if not comp_tested then
3626: LD_EXP 22
3630: NOT
3631: IFFALSE 3646
// AddMedal ( gamma_med2 , - 1 ) else
3633: LD_STRING gamma_med2
3635: PPUSH
3636: LD_INT 1
3638: NEG
3639: PPUSH
3640: CALL_OW 101
3644: GO 3656
// AddMedal ( gamma_med2 , 1 ) ;
3646: LD_STRING gamma_med2
3648: PPUSH
3649: LD_INT 1
3651: PPUSH
3652: CALL_OW 101
// if IsDead ( sikorski ) and not sikorski_run then
3656: LD_EXP 9
3660: PPUSH
3661: CALL_OW 301
3665: PUSH
3666: LD_EXP 23
3670: NOT
3671: AND
3672: IFFALSE 3686
// AddMedal ( gamma_med1 , 1 ) else
3674: LD_STRING gamma_med1
3676: PPUSH
3677: LD_INT 1
3679: PPUSH
3680: CALL_OW 101
3684: GO 3697
// AddMedal ( gamma_med1 , - 1 ) ;
3686: LD_STRING gamma_med1
3688: PPUSH
3689: LD_INT 1
3691: NEG
3692: PPUSH
3693: CALL_OW 101
// GiveMedals ( GAMMA_MEDALS ) ;
3697: LD_STRING GAMMA_MEDALS
3699: PPUSH
3700: CALL_OW 102
// YouWin ;
3704: CALL_OW 103
// end ; if un = commander then
3708: LD_VAR 0 1
3712: PUSH
3713: LD_EXP 3
3717: EQUAL
3718: IFFALSE 3727
// YouLost ( comml ) ;
3720: LD_STRING comml
3722: PPUSH
3723: CALL_OW 104
// if un = sikorski then
3727: LD_VAR 0 1
3731: PUSH
3732: LD_EXP 9
3736: EQUAL
3737: IFFALSE 3749
// AddMedal ( gamma_med1 , 1 ) ;
3739: LD_STRING gamma_med1
3741: PPUSH
3742: LD_INT 1
3744: PPUSH
3745: CALL_OW 101
// end ;
3749: PPOPN 1
3751: END
// on SailEvent ( event ) do var i , un , filter , doc , bac , place , engs , crane , b ;
3752: LD_INT 0
3754: PPUSH
3755: PPUSH
3756: PPUSH
3757: PPUSH
3758: PPUSH
3759: PPUSH
3760: PPUSH
3761: PPUSH
3762: PPUSH
// begin if event = 1 then
3763: LD_VAR 0 1
3767: PUSH
3768: LD_INT 1
3770: EQUAL
3771: IFFALSE 4068
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3773: LD_ADDR_VAR 0 4
3777: PUSH
3778: LD_INT 22
3780: PUSH
3781: LD_INT 1
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PUSH
3788: LD_INT 21
3790: PUSH
3791: LD_INT 3
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: PUSH
3798: LD_INT 3
3800: PUSH
3801: LD_INT 24
3803: PUSH
3804: LD_INT 1000
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PUSH
3811: EMPTY
3812: LIST
3813: LIST
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: LIST
3819: PPUSH
3820: CALL_OW 69
3824: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ] ) ;
3825: LD_ADDR_VAR 0 8
3829: PUSH
3830: LD_INT 22
3832: PUSH
3833: LD_INT 1
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: PUSH
3840: LD_INT 25
3842: PUSH
3843: LD_INT 2
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: PUSH
3850: LD_INT 24
3852: PUSH
3853: LD_INT 1000
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: PUSH
3860: EMPTY
3861: LIST
3862: LIST
3863: LIST
3864: PUSH
3865: EMPTY
3866: LIST
3867: PPUSH
3868: CALL_OW 69
3872: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) ;
3873: LD_ADDR_VAR 0 9
3877: PUSH
3878: LD_INT 22
3880: PUSH
3881: LD_INT 1
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: PUSH
3888: LD_INT 34
3890: PUSH
3891: LD_INT 13
3893: PUSH
3894: EMPTY
3895: LIST
3896: LIST
3897: PUSH
3898: EMPTY
3899: LIST
3900: LIST
3901: PPUSH
3902: CALL_OW 69
3906: ST_TO_ADDR
// if engs > 0 then
3907: LD_VAR 0 8
3911: PUSH
3912: LD_INT 0
3914: GREATER
3915: IFFALSE 4020
// for i = 1 to engs do
3917: LD_ADDR_VAR 0 2
3921: PUSH
3922: DOUBLE
3923: LD_INT 1
3925: DEC
3926: ST_TO_ADDR
3927: LD_VAR 0 8
3931: PUSH
3932: FOR_TO
3933: IFFALSE 4018
// begin if IsInUnit ( engs [ i ] ) then
3935: LD_VAR 0 8
3939: PUSH
3940: LD_VAR 0 2
3944: ARRAY
3945: PPUSH
3946: CALL_OW 310
3950: IFFALSE 3967
// ComExitBuilding ( engs [ i ] ) ;
3952: LD_VAR 0 8
3956: PUSH
3957: LD_VAR 0 2
3961: ARRAY
3962: PPUSH
3963: CALL_OW 122
// Wait ( 0 0$0.2 ) ;
3967: LD_INT 7
3969: PPUSH
3970: CALL_OW 67
// if not HasTask ( engs [ i ] ) then
3974: LD_VAR 0 8
3978: PUSH
3979: LD_VAR 0 2
3983: ARRAY
3984: PPUSH
3985: CALL_OW 314
3989: NOT
3990: IFFALSE 4016
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
3992: LD_VAR 0 8
3996: PUSH
3997: LD_VAR 0 2
4001: ARRAY
4002: PPUSH
4003: LD_VAR 0 4
4007: PUSH
4008: LD_INT 1
4010: ARRAY
4011: PPUSH
4012: CALL_OW 130
// end ;
4016: GO 3932
4018: POP
4019: POP
// if crane > 0 then
4020: LD_VAR 0 9
4024: PUSH
4025: LD_INT 0
4027: GREATER
4028: IFFALSE 4068
// if not HasTask ( crane [ 1 ] ) then
4030: LD_VAR 0 9
4034: PUSH
4035: LD_INT 1
4037: ARRAY
4038: PPUSH
4039: CALL_OW 314
4043: NOT
4044: IFFALSE 4068
// ComRepairBuilding ( crane [ 1 ] , filter [ 1 ] ) ;
4046: LD_VAR 0 9
4050: PUSH
4051: LD_INT 1
4053: ARRAY
4054: PPUSH
4055: LD_VAR 0 4
4059: PUSH
4060: LD_INT 1
4062: ARRAY
4063: PPUSH
4064: CALL_OW 130
// end ; if event = 2 then
4068: LD_VAR 0 1
4072: PUSH
4073: LD_INT 2
4075: EQUAL
4076: IFFALSE 4198
// begin engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
4078: LD_ADDR_VAR 0 8
4082: PUSH
4083: LD_INT 22
4085: PUSH
4086: LD_INT 1
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: PUSH
4093: LD_INT 25
4095: PUSH
4096: LD_INT 2
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: PUSH
4103: EMPTY
4104: LIST
4105: LIST
4106: PPUSH
4107: CALL_OW 69
4111: ST_TO_ADDR
// if engs > 0 then
4112: LD_VAR 0 8
4116: PUSH
4117: LD_INT 0
4119: GREATER
4120: IFFALSE 4198
// for i = 1 to engs do
4122: LD_ADDR_VAR 0 2
4126: PUSH
4127: DOUBLE
4128: LD_INT 1
4130: DEC
4131: ST_TO_ADDR
4132: LD_VAR 0 8
4136: PUSH
4137: FOR_TO
4138: IFFALSE 4196
// if not HasTask ( engs [ i ] ) and not IsInUnit ( engs [ i ] ) then
4140: LD_VAR 0 8
4144: PUSH
4145: LD_VAR 0 2
4149: ARRAY
4150: PPUSH
4151: CALL_OW 314
4155: NOT
4156: PUSH
4157: LD_VAR 0 8
4161: PUSH
4162: LD_VAR 0 2
4166: ARRAY
4167: PPUSH
4168: CALL_OW 310
4172: NOT
4173: AND
4174: IFFALSE 4194
// ComEnterUnit ( engs [ i ] , am_dep ) ;
4176: LD_VAR 0 8
4180: PUSH
4181: LD_VAR 0 2
4185: ARRAY
4186: PPUSH
4187: LD_INT 25
4189: PPUSH
4190: CALL_OW 120
4194: GO 4137
4196: POP
4197: POP
// end ; if event = 3 then
4198: LD_VAR 0 1
4202: PUSH
4203: LD_INT 3
4205: EQUAL
4206: IFFALSE 4570
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_class , 4 ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
4208: LD_ADDR_VAR 0 4
4212: PUSH
4213: LD_INT 22
4215: PUSH
4216: LD_INT 1
4218: PUSH
4219: EMPTY
4220: LIST
4221: LIST
4222: PUSH
4223: LD_INT 21
4225: PUSH
4226: LD_INT 1
4228: PUSH
4229: EMPTY
4230: LIST
4231: LIST
4232: PUSH
4233: LD_INT 3
4235: PUSH
4236: LD_INT 25
4238: PUSH
4239: LD_INT 4
4241: PUSH
4242: EMPTY
4243: LIST
4244: LIST
4245: PUSH
4246: EMPTY
4247: LIST
4248: LIST
4249: PUSH
4250: LD_INT 3
4252: PUSH
4253: LD_INT 24
4255: PUSH
4256: LD_INT 800
4258: PUSH
4259: EMPTY
4260: LIST
4261: LIST
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: LIST
4271: LIST
4272: PUSH
4273: EMPTY
4274: LIST
4275: PPUSH
4276: CALL_OW 69
4280: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
4281: LD_ADDR_VAR 0 5
4285: PUSH
4286: LD_INT 22
4288: PUSH
4289: LD_INT 1
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: PUSH
4296: LD_INT 25
4298: PUSH
4299: LD_INT 4
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: PPUSH
4310: CALL_OW 69
4314: ST_TO_ADDR
// if filter > 0 then
4315: LD_VAR 0 4
4319: PUSH
4320: LD_INT 0
4322: GREATER
4323: IFFALSE 4512
// begin for i = 1 to doc do
4325: LD_ADDR_VAR 0 2
4329: PUSH
4330: DOUBLE
4331: LD_INT 1
4333: DEC
4334: ST_TO_ADDR
4335: LD_VAR 0 5
4339: PUSH
4340: FOR_TO
4341: IFFALSE 4441
// begin if IsInUnit ( doc [ i ] ) then
4343: LD_VAR 0 5
4347: PUSH
4348: LD_VAR 0 2
4352: ARRAY
4353: PPUSH
4354: CALL_OW 310
4358: IFFALSE 4375
// ComExitBuilding ( doc [ i ] ) ;
4360: LD_VAR 0 5
4364: PUSH
4365: LD_VAR 0 2
4369: ARRAY
4370: PPUSH
4371: CALL_OW 122
// if GetDistUnits ( filter [ 1 ] , am_lab ) < 10 and not HasTask ( doc [ i ] ) then
4375: LD_VAR 0 4
4379: PUSH
4380: LD_INT 1
4382: ARRAY
4383: PPUSH
4384: LD_INT 46
4386: PPUSH
4387: CALL_OW 296
4391: PUSH
4392: LD_INT 10
4394: LESS
4395: PUSH
4396: LD_VAR 0 5
4400: PUSH
4401: LD_VAR 0 2
4405: ARRAY
4406: PPUSH
4407: CALL_OW 314
4411: NOT
4412: AND
4413: IFFALSE 4439
// ComHeal ( doc [ i ] , filter [ 1 ] ) ;
4415: LD_VAR 0 5
4419: PUSH
4420: LD_VAR 0 2
4424: ARRAY
4425: PPUSH
4426: LD_VAR 0 4
4430: PUSH
4431: LD_INT 1
4433: ARRAY
4434: PPUSH
4435: CALL_OW 128
// end ;
4439: GO 4340
4441: POP
4442: POP
// for i = 1 to filter do
4443: LD_ADDR_VAR 0 2
4447: PUSH
4448: DOUBLE
4449: LD_INT 1
4451: DEC
4452: ST_TO_ADDR
4453: LD_VAR 0 4
4457: PUSH
4458: FOR_TO
4459: IFFALSE 4508
// if GetDistUnits ( filter [ i ] , am_lab ) > 10 then
4461: LD_VAR 0 4
4465: PUSH
4466: LD_VAR 0 2
4470: ARRAY
4471: PPUSH
4472: LD_INT 46
4474: PPUSH
4475: CALL_OW 296
4479: PUSH
4480: LD_INT 10
4482: GREATER
4483: IFFALSE 4506
// ComMoveXY ( filter [ i ] , 47 , 12 ) ;
4485: LD_VAR 0 4
4489: PUSH
4490: LD_VAR 0 2
4494: ARRAY
4495: PPUSH
4496: LD_INT 47
4498: PPUSH
4499: LD_INT 12
4501: PPUSH
4502: CALL_OW 111
4506: GO 4458
4508: POP
4509: POP
// end else
4510: GO 4570
// for i = 1 to doc do
4512: LD_ADDR_VAR 0 2
4516: PUSH
4517: DOUBLE
4518: LD_INT 1
4520: DEC
4521: ST_TO_ADDR
4522: LD_VAR 0 5
4526: PUSH
4527: FOR_TO
4528: IFFALSE 4568
// if not IsInUnit ( doc [ i ] ) then
4530: LD_VAR 0 5
4534: PUSH
4535: LD_VAR 0 2
4539: ARRAY
4540: PPUSH
4541: CALL_OW 310
4545: NOT
4546: IFFALSE 4566
// ComEnterUnit ( doc [ i ] , am_lab ) ;
4548: LD_VAR 0 5
4552: PUSH
4553: LD_VAR 0 2
4557: ARRAY
4558: PPUSH
4559: LD_INT 46
4561: PPUSH
4562: CALL_OW 120
4566: GO 4527
4568: POP
4569: POP
// end ; if event = 4 then
4570: LD_VAR 0 1
4574: PUSH
4575: LD_INT 4
4577: EQUAL
4578: IFFALSE 4829
// begin bac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
4580: LD_ADDR_VAR 0 6
4584: PUSH
4585: LD_INT 22
4587: PUSH
4588: LD_INT 1
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PUSH
4595: LD_INT 30
4597: PUSH
4598: LD_INT 5
4600: PUSH
4601: EMPTY
4602: LIST
4603: LIST
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: PPUSH
4609: CALL_OW 69
4613: ST_TO_ADDR
// for i = 1 to bac do
4614: LD_ADDR_VAR 0 2
4618: PUSH
4619: DOUBLE
4620: LD_INT 1
4622: DEC
4623: ST_TO_ADDR
4624: LD_VAR 0 6
4628: PUSH
4629: FOR_TO
4630: IFFALSE 4671
// if UnitsInside ( bac [ i ] ) < 6 then
4632: LD_VAR 0 6
4636: PUSH
4637: LD_VAR 0 2
4641: ARRAY
4642: PPUSH
4643: CALL_OW 313
4647: PUSH
4648: LD_INT 6
4650: LESS
4651: IFFALSE 4669
// place := bac [ i ] ;
4653: LD_ADDR_VAR 0 7
4657: PUSH
4658: LD_VAR 0 6
4662: PUSH
4663: LD_VAR 0 2
4667: ARRAY
4668: ST_TO_ADDR
4669: GO 4629
4671: POP
4672: POP
// if place then
4673: LD_VAR 0 7
4677: IFFALSE 4829
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] ] , [ f_lives , 1000 ] ] ] ) diff Patrol ;
4679: LD_ADDR_VAR 0 4
4683: PUSH
4684: LD_INT 22
4686: PUSH
4687: LD_INT 1
4689: PUSH
4690: EMPTY
4691: LIST
4692: LIST
4693: PUSH
4694: LD_INT 2
4696: PUSH
4697: LD_INT 25
4699: PUSH
4700: LD_INT 1
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: PUSH
4707: LD_INT 25
4709: PUSH
4710: LD_INT 5
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: PUSH
4717: EMPTY
4718: LIST
4719: LIST
4720: LIST
4721: PUSH
4722: LD_INT 24
4724: PUSH
4725: LD_INT 1000
4727: PUSH
4728: EMPTY
4729: LIST
4730: LIST
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: LIST
4736: PUSH
4737: EMPTY
4738: LIST
4739: PPUSH
4740: CALL_OW 69
4744: PUSH
4745: LD_EXP 17
4749: DIFF
4750: ST_TO_ADDR
// for i = 1 to filter do
4751: LD_ADDR_VAR 0 2
4755: PUSH
4756: DOUBLE
4757: LD_INT 1
4759: DEC
4760: ST_TO_ADDR
4761: LD_VAR 0 4
4765: PUSH
4766: FOR_TO
4767: IFFALSE 4827
// if not IsInUnit ( filter [ i ] ) and not HasTask ( filter [ i ] ) then
4769: LD_VAR 0 4
4773: PUSH
4774: LD_VAR 0 2
4778: ARRAY
4779: PPUSH
4780: CALL_OW 310
4784: NOT
4785: PUSH
4786: LD_VAR 0 4
4790: PUSH
4791: LD_VAR 0 2
4795: ARRAY
4796: PPUSH
4797: CALL_OW 314
4801: NOT
4802: AND
4803: IFFALSE 4825
// ComEnterUnit ( filter [ i ] , place ) ;
4805: LD_VAR 0 4
4809: PUSH
4810: LD_VAR 0 2
4814: ARRAY
4815: PPUSH
4816: LD_VAR 0 7
4820: PPUSH
4821: CALL_OW 120
4825: GO 4766
4827: POP
4828: POP
// end ; end ; if event = 5 then
4829: LD_VAR 0 1
4833: PUSH
4834: LD_INT 5
4836: EQUAL
4837: IFFALSE 4991
// begin if FilterUnitsInArea ( am_sec , [ f_enemy , 1 ] ) = 0 then
4839: LD_INT 12
4841: PPUSH
4842: LD_INT 81
4844: PUSH
4845: LD_INT 1
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: PPUSH
4852: CALL_OW 70
4856: PUSH
4857: LD_INT 0
4859: EQUAL
4860: IFFALSE 4991
// begin engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
4862: LD_ADDR_VAR 0 8
4866: PUSH
4867: LD_INT 22
4869: PUSH
4870: LD_INT 1
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: PUSH
4877: LD_INT 25
4879: PUSH
4880: LD_INT 2
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PPUSH
4891: CALL_OW 69
4895: ST_TO_ADDR
// if engs > 0 then
4896: LD_VAR 0 8
4900: PUSH
4901: LD_INT 0
4903: GREATER
4904: IFFALSE 4991
// for i = 1 to engs do
4906: LD_ADDR_VAR 0 2
4910: PUSH
4911: DOUBLE
4912: LD_INT 1
4914: DEC
4915: ST_TO_ADDR
4916: LD_VAR 0 8
4920: PUSH
4921: FOR_TO
4922: IFFALSE 4989
// if not HasTask ( engs [ i ] ) then
4924: LD_VAR 0 8
4928: PUSH
4929: LD_VAR 0 2
4933: ARRAY
4934: PPUSH
4935: CALL_OW 314
4939: NOT
4940: IFFALSE 4987
// ComBuild ( engs [ i ] , b_bunker , gamma_towers [ 1 ] , gamma_towers [ 2 ] , gamma_towers [ 3 ] ) ;
4942: LD_VAR 0 8
4946: PUSH
4947: LD_VAR 0 2
4951: ARRAY
4952: PPUSH
4953: LD_INT 32
4955: PPUSH
4956: LD_EXP 18
4960: PUSH
4961: LD_INT 1
4963: ARRAY
4964: PPUSH
4965: LD_EXP 18
4969: PUSH
4970: LD_INT 2
4972: ARRAY
4973: PPUSH
4974: LD_EXP 18
4978: PUSH
4979: LD_INT 3
4981: ARRAY
4982: PPUSH
4983: CALL_OW 145
4987: GO 4921
4989: POP
4990: POP
// end ; end ; if event = 6 then
4991: LD_VAR 0 1
4995: PUSH
4996: LD_INT 6
4998: EQUAL
4999: IFFALSE 5183
// begin bac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
5001: LD_ADDR_VAR 0 6
5005: PUSH
5006: LD_INT 22
5008: PUSH
5009: LD_INT 1
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: PUSH
5016: LD_INT 30
5018: PUSH
5019: LD_INT 5
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: PPUSH
5030: CALL_OW 69
5034: ST_TO_ADDR
// if bac and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ] ) > 0 then
5035: LD_VAR 0 6
5039: PUSH
5040: LD_INT 22
5042: PUSH
5043: LD_INT 1
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: PUSH
5050: LD_INT 30
5052: PUSH
5053: LD_INT 32
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: PUSH
5060: LD_INT 58
5062: PUSH
5063: EMPTY
5064: LIST
5065: PUSH
5066: EMPTY
5067: LIST
5068: LIST
5069: LIST
5070: PUSH
5071: EMPTY
5072: LIST
5073: PPUSH
5074: CALL_OW 69
5078: PUSH
5079: LD_INT 0
5081: GREATER
5082: AND
5083: IFFALSE 5183
// begin b := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ] ) [ 1 ] ;
5085: LD_ADDR_VAR 0 10
5089: PUSH
5090: LD_INT 22
5092: PUSH
5093: LD_INT 1
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: PUSH
5100: LD_INT 30
5102: PUSH
5103: LD_INT 32
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: PUSH
5110: LD_INT 58
5112: PUSH
5113: EMPTY
5114: LIST
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: LIST
5120: PUSH
5121: EMPTY
5122: LIST
5123: PPUSH
5124: CALL_OW 69
5128: PUSH
5129: LD_INT 1
5131: ARRAY
5132: ST_TO_ADDR
// un := UnitsInside ( bac [ 1 ] ) ;
5133: LD_ADDR_VAR 0 3
5137: PUSH
5138: LD_VAR 0 6
5142: PUSH
5143: LD_INT 1
5145: ARRAY
5146: PPUSH
5147: CALL_OW 313
5151: ST_TO_ADDR
// ComExitBuilding ( un [ 1 ] ) ;
5152: LD_VAR 0 3
5156: PUSH
5157: LD_INT 1
5159: ARRAY
5160: PPUSH
5161: CALL_OW 122
// AddComEnterUnit ( un [ 1 ] , b ) ;
5165: LD_VAR 0 3
5169: PUSH
5170: LD_INT 1
5172: ARRAY
5173: PPUSH
5174: LD_VAR 0 10
5178: PPUSH
5179: CALL_OW 180
// end ; end ; end ;
5183: PPOPN 10
5185: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 3 then
5186: LD_VAR 0 1
5190: PUSH
5191: LD_INT 1
5193: EQUAL
5194: PUSH
5195: LD_VAR 0 2
5199: PUSH
5200: LD_INT 3
5202: EQUAL
5203: AND
5204: IFFALSE 5214
// contact_am := true ;
5206: LD_ADDR_EXP 16
5210: PUSH
5211: LD_INT 1
5213: ST_TO_ADDR
// end ;
5214: PPOPN 2
5216: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5217: LD_VAR 0 1
5221: PPUSH
5222: LD_VAR 0 2
5226: PPUSH
5227: LD_VAR 0 3
5231: PPUSH
5232: CALL 25367 0 3
// end ;
5236: PPOPN 3
5238: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5239: LD_VAR 0 1
5243: PPUSH
5244: CALL 25375 0 1
// end ; end_of_file
5248: PPOPN 1
5250: END
// export Sikorski , Game_Started , SForce , Sikorski_Ar , Donald , Van , attacked , contact_am ; export patrol ; export gamma_towers ; export function PrepareAmerican ; var i , un , b , skill , weapons , sol , lw ; begin
5251: LD_INT 0
5253: PPUSH
5254: PPUSH
5255: PPUSH
5256: PPUSH
5257: PPUSH
5258: PPUSH
5259: PPUSH
5260: PPUSH
// skill := [ 5 , 6 , 7 ] [ dif ] ;
5261: LD_ADDR_VAR 0 5
5265: PUSH
5266: LD_INT 5
5268: PUSH
5269: LD_INT 6
5271: PUSH
5272: LD_INT 7
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: LIST
5279: PUSH
5280: LD_EXP 1
5284: ARRAY
5285: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_gatling_gun , us_gatling_gun , us_double_gun , us_double_gun , us_double_gun , us_heavy_gun ] ;
5286: LD_ADDR_VAR 0 6
5290: PUSH
5291: LD_INT 4
5293: PUSH
5294: LD_INT 4
5296: PUSH
5297: LD_INT 4
5299: PUSH
5300: LD_INT 5
5302: PUSH
5303: LD_INT 5
5305: PUSH
5306: LD_INT 5
5308: PUSH
5309: LD_INT 6
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: LIST
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: ST_TO_ADDR
// SForce := [ ] ;
5321: LD_ADDR_EXP 11
5325: PUSH
5326: EMPTY
5327: ST_TO_ADDR
// Sikorski_Ar := false ;
5328: LD_ADDR_EXP 12
5332: PUSH
5333: LD_INT 0
5335: ST_TO_ADDR
// attacked := false ;
5336: LD_ADDR_EXP 15
5340: PUSH
5341: LD_INT 0
5343: ST_TO_ADDR
// contact_am := false ;
5344: LD_ADDR_EXP 16
5348: PUSH
5349: LD_INT 0
5351: ST_TO_ADDR
// patrol := [ ] ;
5352: LD_ADDR_EXP 17
5356: PUSH
5357: EMPTY
5358: ST_TO_ADDR
// gamma_towers := [ ] ;
5359: LD_ADDR_EXP 18
5363: PUSH
5364: EMPTY
5365: ST_TO_ADDR
// SetBName ( am_dep , gamma ) ;
5366: LD_INT 25
5368: PPUSH
5369: LD_STRING gamma
5371: PPUSH
5372: CALL_OW 500
// uc_side := 1 ;
5376: LD_ADDR_OWVAR 20
5380: PUSH
5381: LD_INT 1
5383: ST_TO_ADDR
// uc_nation := 1 ;
5384: LD_ADDR_OWVAR 21
5388: PUSH
5389: LD_INT 1
5391: ST_TO_ADDR
// hc_importance := 0 ;
5392: LD_ADDR_OWVAR 32
5396: PUSH
5397: LD_INT 0
5399: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
5400: LD_ADDR_OWVAR 26
5404: PUSH
5405: LD_STRING Jeremy Sikorski
5407: ST_TO_ADDR
// hc_gallery := us ;
5408: LD_ADDR_OWVAR 33
5412: PUSH
5413: LD_STRING us
5415: ST_TO_ADDR
// hc_face_number := 19 ;
5416: LD_ADDR_OWVAR 34
5420: PUSH
5421: LD_INT 19
5423: ST_TO_ADDR
// hc_skills := [ Rand ( skill , skill + 2 ) , 4 , 6 , 3 ] ;
5424: LD_ADDR_OWVAR 31
5428: PUSH
5429: LD_VAR 0 5
5433: PPUSH
5434: LD_VAR 0 5
5438: PUSH
5439: LD_INT 2
5441: PLUS
5442: PPUSH
5443: CALL_OW 12
5447: PUSH
5448: LD_INT 4
5450: PUSH
5451: LD_INT 6
5453: PUSH
5454: LD_INT 3
5456: PUSH
5457: EMPTY
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: ST_TO_ADDR
// hc_sex := sex_male ;
5463: LD_ADDR_OWVAR 27
5467: PUSH
5468: LD_INT 1
5470: ST_TO_ADDR
// hc_class := 1 ;
5471: LD_ADDR_OWVAR 28
5475: PUSH
5476: LD_INT 1
5478: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
5479: LD_ADDR_OWVAR 29
5483: PUSH
5484: LD_INT 10
5486: PUSH
5487: LD_INT 11
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: ST_TO_ADDR
// sikorski := CreateHuman ;
5494: LD_ADDR_EXP 9
5498: PUSH
5499: CALL_OW 44
5503: ST_TO_ADDR
// hc_name := Lucy Donaldson ;
5504: LD_ADDR_OWVAR 26
5508: PUSH
5509: LD_STRING Lucy Donaldson
5511: ST_TO_ADDR
// hc_gallery := us ;
5512: LD_ADDR_OWVAR 33
5516: PUSH
5517: LD_STRING us
5519: ST_TO_ADDR
// hc_face_number := 2 ;
5520: LD_ADDR_OWVAR 34
5524: PUSH
5525: LD_INT 2
5527: ST_TO_ADDR
// hc_skills := [ Rand ( skill , skill + 2 ) , 6 , 4 , 2 ] ;
5528: LD_ADDR_OWVAR 31
5532: PUSH
5533: LD_VAR 0 5
5537: PPUSH
5538: LD_VAR 0 5
5542: PUSH
5543: LD_INT 2
5545: PLUS
5546: PPUSH
5547: CALL_OW 12
5551: PUSH
5552: LD_INT 6
5554: PUSH
5555: LD_INT 4
5557: PUSH
5558: LD_INT 2
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: LIST
5565: LIST
5566: ST_TO_ADDR
// hc_sex := sex_female ;
5567: LD_ADDR_OWVAR 27
5571: PUSH
5572: LD_INT 2
5574: ST_TO_ADDR
// hc_class := 1 ;
5575: LD_ADDR_OWVAR 28
5579: PUSH
5580: LD_INT 1
5582: ST_TO_ADDR
// donald := CreateHuman ;
5583: LD_ADDR_EXP 13
5587: PUSH
5588: CALL_OW 44
5592: ST_TO_ADDR
// hc_name := Peter Van Houten ;
5593: LD_ADDR_OWVAR 26
5597: PUSH
5598: LD_STRING Peter Van Houten
5600: ST_TO_ADDR
// hc_gallery := us ;
5601: LD_ADDR_OWVAR 33
5605: PUSH
5606: LD_STRING us
5608: ST_TO_ADDR
// hc_face_number := 16 ;
5609: LD_ADDR_OWVAR 34
5613: PUSH
5614: LD_INT 16
5616: ST_TO_ADDR
// hc_sex := sex_male ;
5617: LD_ADDR_OWVAR 27
5621: PUSH
5622: LD_INT 1
5624: ST_TO_ADDR
// van := CreateHuman ;
5625: LD_ADDR_EXP 14
5629: PUSH
5630: CALL_OW 44
5634: ST_TO_ADDR
// hc_importance := 0 ;
5635: LD_ADDR_OWVAR 32
5639: PUSH
5640: LD_INT 0
5642: ST_TO_ADDR
// case dif of 1 :
5643: LD_EXP 1
5647: PUSH
5648: LD_INT 1
5650: DOUBLE
5651: EQUAL
5652: IFTRUE 5656
5654: GO 5667
5656: POP
// lw = 1 ; 2 :
5657: LD_ADDR_VAR 0 8
5661: PUSH
5662: LD_INT 1
5664: ST_TO_ADDR
5665: GO 5714
5667: LD_INT 2
5669: DOUBLE
5670: EQUAL
5671: IFTRUE 5675
5673: GO 5694
5675: POP
// lw = Rand ( 1 , 2 ) ; 3 :
5676: LD_ADDR_VAR 0 8
5680: PUSH
5681: LD_INT 1
5683: PPUSH
5684: LD_INT 2
5686: PPUSH
5687: CALL_OW 12
5691: ST_TO_ADDR
5692: GO 5714
5694: LD_INT 3
5696: DOUBLE
5697: EQUAL
5698: IFTRUE 5702
5700: GO 5713
5702: POP
// lw = 2 ; end ;
5703: LD_ADDR_VAR 0 8
5707: PUSH
5708: LD_INT 2
5710: ST_TO_ADDR
5711: GO 5714
5713: POP
// case lw of 1 :
5714: LD_VAR 0 8
5718: PUSH
5719: LD_INT 1
5721: DOUBLE
5722: EQUAL
5723: IFTRUE 5727
5725: GO 5742
5727: POP
// PlaceHumanInUnit ( donald , am_dep ) ; 2 :
5728: LD_EXP 13
5732: PPUSH
5733: LD_INT 25
5735: PPUSH
5736: CALL_OW 52
5740: GO 5766
5742: LD_INT 2
5744: DOUBLE
5745: EQUAL
5746: IFTRUE 5750
5748: GO 5765
5750: POP
// PlaceHumanInUnit ( van , am_dep ) ; end ;
5751: LD_EXP 14
5755: PPUSH
5756: LD_INT 25
5758: PPUSH
5759: CALL_OW 52
5763: GO 5766
5765: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
5766: LD_ADDR_VAR 0 2
5770: PUSH
5771: LD_INT 22
5773: PUSH
5774: LD_INT 1
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: PUSH
5781: LD_INT 30
5783: PUSH
5784: LD_INT 32
5786: PUSH
5787: EMPTY
5788: LIST
5789: LIST
5790: PUSH
5791: EMPTY
5792: LIST
5793: LIST
5794: PPUSH
5795: CALL_OW 69
5799: PUSH
5800: FOR_IN
5801: IFFALSE 5855
// begin PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
5803: LD_INT 1
5805: PPUSH
5806: LD_VAR 0 5
5810: PPUSH
5811: CALL 734 0 2
5815: PPUSH
5816: LD_VAR 0 2
5820: PPUSH
5821: CALL_OW 52
// PlaceWeaponTurret ( i , weapons [ Rand ( 1 , weapons ) ] ) ;
5825: LD_VAR 0 2
5829: PPUSH
5830: LD_VAR 0 6
5834: PUSH
5835: LD_INT 1
5837: PPUSH
5838: LD_VAR 0 6
5842: PPUSH
5843: CALL_OW 12
5847: ARRAY
5848: PPUSH
5849: CALL_OW 431
// end ;
5853: GO 5800
5855: POP
5856: POP
// sol := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , class_soldier ] , [ class_sniper ] ] ] ) ;
5857: LD_ADDR_VAR 0 7
5861: PUSH
5862: LD_INT 22
5864: PUSH
5865: LD_INT 1
5867: PUSH
5868: EMPTY
5869: LIST
5870: LIST
5871: PUSH
5872: LD_INT 2
5874: PUSH
5875: LD_INT 25
5877: PUSH
5878: LD_INT 1
5880: PUSH
5881: EMPTY
5882: LIST
5883: LIST
5884: PUSH
5885: LD_INT 5
5887: PUSH
5888: EMPTY
5889: LIST
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: LIST
5895: PUSH
5896: EMPTY
5897: LIST
5898: LIST
5899: PPUSH
5900: CALL_OW 69
5904: ST_TO_ADDR
// for i = 1 to sol do
5905: LD_ADDR_VAR 0 2
5909: PUSH
5910: DOUBLE
5911: LD_INT 1
5913: DEC
5914: ST_TO_ADDR
5915: LD_VAR 0 7
5919: PUSH
5920: FOR_TO
5921: IFFALSE 5943
// SetTag ( sol [ i ] , 1 ) ;
5923: LD_VAR 0 7
5927: PUSH
5928: LD_VAR 0 2
5932: ARRAY
5933: PPUSH
5934: LD_INT 1
5936: PPUSH
5937: CALL_OW 109
5941: GO 5920
5943: POP
5944: POP
// for i = 1 to 3 do
5945: LD_ADDR_VAR 0 2
5949: PUSH
5950: DOUBLE
5951: LD_INT 1
5953: DEC
5954: ST_TO_ADDR
5955: LD_INT 3
5957: PUSH
5958: FOR_TO
5959: IFFALSE 5983
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , am_ct ) ;
5961: LD_INT 3
5963: PPUSH
5964: LD_VAR 0 5
5968: PPUSH
5969: CALL 734 0 2
5973: PPUSH
5974: LD_INT 56
5976: PPUSH
5977: CALL_OW 52
5981: GO 5958
5983: POP
5984: POP
// for i = 1 to 6 do
5985: LD_ADDR_VAR 0 2
5989: PUSH
5990: DOUBLE
5991: LD_INT 1
5993: DEC
5994: ST_TO_ADDR
5995: LD_INT 6
5997: PUSH
5998: FOR_TO
5999: IFFALSE 6023
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , am_fac ) ;
6001: LD_INT 3
6003: PPUSH
6004: LD_VAR 0 5
6008: PPUSH
6009: CALL 734 0 2
6013: PPUSH
6014: LD_INT 26
6016: PPUSH
6017: CALL_OW 52
6021: GO 5998
6023: POP
6024: POP
// for i = 1 to 5 do
6025: LD_ADDR_VAR 0 2
6029: PUSH
6030: DOUBLE
6031: LD_INT 1
6033: DEC
6034: ST_TO_ADDR
6035: LD_INT 5
6037: PUSH
6038: FOR_TO
6039: IFFALSE 6066
// PlaceUnitArea ( CreateHumanWithClass ( 2 , skill ) , am_base , false ) ;
6041: LD_INT 2
6043: PPUSH
6044: LD_VAR 0 5
6048: PPUSH
6049: CALL 734 0 2
6053: PPUSH
6054: LD_INT 7
6056: PPUSH
6057: LD_INT 0
6059: PPUSH
6060: CALL_OW 49
6064: GO 6038
6066: POP
6067: POP
// for i = 1 to 3 do
6068: LD_ADDR_VAR 0 2
6072: PUSH
6073: DOUBLE
6074: LD_INT 1
6076: DEC
6077: ST_TO_ADDR
6078: LD_INT 3
6080: PUSH
6081: FOR_TO
6082: IFFALSE 6106
// PlaceHumanInUnit ( CreateHumanWithClass ( 4 , skill ) , am_lab ) ;
6084: LD_INT 4
6086: PPUSH
6087: LD_VAR 0 5
6091: PPUSH
6092: CALL 734 0 2
6096: PPUSH
6097: LD_INT 46
6099: PPUSH
6100: CALL_OW 52
6104: GO 6081
6106: POP
6107: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) do
6108: LD_ADDR_VAR 0 2
6112: PUSH
6113: LD_INT 22
6115: PUSH
6116: LD_INT 1
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PUSH
6123: LD_INT 30
6125: PUSH
6126: LD_INT 5
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: PPUSH
6137: CALL_OW 69
6141: PUSH
6142: FOR_IN
6143: IFFALSE 6257
// begin PlaceHumanInUnit ( CreateHumanWithClass ( class_sniper , skill ) , i ) ;
6145: LD_INT 5
6147: PPUSH
6148: LD_VAR 0 5
6152: PPUSH
6153: CALL 734 0 2
6157: PPUSH
6158: LD_VAR 0 2
6162: PPUSH
6163: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( class_sniper , skill ) , i ) ;
6167: LD_INT 5
6169: PPUSH
6170: LD_VAR 0 5
6174: PPUSH
6175: CALL 734 0 2
6179: PPUSH
6180: LD_VAR 0 2
6184: PPUSH
6185: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6189: LD_INT 1
6191: PPUSH
6192: LD_VAR 0 5
6196: PPUSH
6197: CALL 734 0 2
6201: PPUSH
6202: LD_VAR 0 2
6206: PPUSH
6207: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6211: LD_INT 1
6213: PPUSH
6214: LD_VAR 0 5
6218: PPUSH
6219: CALL 734 0 2
6223: PPUSH
6224: LD_VAR 0 2
6228: PPUSH
6229: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6233: LD_INT 1
6235: PPUSH
6236: LD_VAR 0 5
6240: PPUSH
6241: CALL 734 0 2
6245: PPUSH
6246: LD_VAR 0 2
6250: PPUSH
6251: CALL_OW 52
// end ;
6255: GO 6142
6257: POP
6258: POP
// if dif > 1 then
6259: LD_EXP 1
6263: PUSH
6264: LD_INT 1
6266: GREATER
6267: IFFALSE 6340
// for i = 1 to ( dif - 1 ) do
6269: LD_ADDR_VAR 0 2
6273: PUSH
6274: DOUBLE
6275: LD_INT 1
6277: DEC
6278: ST_TO_ADDR
6279: LD_EXP 1
6283: PUSH
6284: LD_INT 1
6286: MINUS
6287: PUSH
6288: FOR_TO
6289: IFFALSE 6338
// begin patrol := patrol ^ CreateHumanWithClass ( 1 , skill ) ;
6291: LD_ADDR_EXP 17
6295: PUSH
6296: LD_EXP 17
6300: PUSH
6301: LD_INT 1
6303: PPUSH
6304: LD_VAR 0 5
6308: PPUSH
6309: CALL 734 0 2
6313: ADD
6314: ST_TO_ADDR
// PlaceUnitArea ( patrol [ i ] , am_west_spawn , false ) ;
6315: LD_EXP 17
6319: PUSH
6320: LD_VAR 0 2
6324: ARRAY
6325: PPUSH
6326: LD_INT 3
6328: PPUSH
6329: LD_INT 0
6331: PPUSH
6332: CALL_OW 49
// end ;
6336: GO 6288
6338: POP
6339: POP
// game_started := true ;
6340: LD_ADDR_EXP 10
6344: PUSH
6345: LD_INT 1
6347: ST_TO_ADDR
// ComConstruct ( am_fac , us_medium_tracked , engine_solar , control_remote , us_crane ) ;
6348: LD_INT 26
6350: PPUSH
6351: LD_INT 3
6353: PPUSH
6354: LD_INT 2
6356: PPUSH
6357: LD_INT 2
6359: PPUSH
6360: LD_INT 13
6362: PPUSH
6363: CALL_OW 125
// while ( contact_am = false ) do
6367: LD_EXP 16
6371: PUSH
6372: LD_INT 0
6374: EQUAL
6375: IFFALSE 6386
// begin Wait ( 0 0$01 ) ;
6377: LD_INT 35
6379: PPUSH
6380: CALL_OW 67
// end ;
6384: GO 6367
// Wait ( [ 4 4$00 , 3 3$00 , 2 2$30 ] [ dif ] ) ;
6386: LD_INT 8400
6388: PUSH
6389: LD_INT 6300
6391: PUSH
6392: LD_INT 5250
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: LIST
6399: PUSH
6400: LD_EXP 1
6404: ARRAY
6405: PPUSH
6406: CALL_OW 67
// case dif of 1 :
6410: LD_EXP 1
6414: PUSH
6415: LD_INT 1
6417: DOUBLE
6418: EQUAL
6419: IFTRUE 6423
6421: GO 6598
6423: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_machine_gun , us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 4 ) ] ) ;
6424: LD_INT 26
6426: PPUSH
6427: LD_INT 3
6429: PPUSH
6430: LD_INT 1
6432: PPUSH
6433: LD_INT 2
6435: PPUSH
6436: LD_INT 2
6438: PUSH
6439: LD_INT 4
6441: PUSH
6442: LD_INT 5
6444: PUSH
6445: LD_INT 5
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: LIST
6452: LIST
6453: PUSH
6454: LD_INT 1
6456: PPUSH
6457: LD_INT 4
6459: PPUSH
6460: CALL_OW 12
6464: ARRAY
6465: PPUSH
6466: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6470: LD_INT 26
6472: PPUSH
6473: LD_INT 3
6475: PPUSH
6476: LD_INT 1
6478: PPUSH
6479: LD_INT 2
6481: PPUSH
6482: LD_INT 4
6484: PUSH
6485: LD_INT 5
6487: PUSH
6488: LD_INT 5
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: LIST
6495: PUSH
6496: LD_INT 1
6498: PPUSH
6499: LD_INT 3
6501: PPUSH
6502: CALL_OW 12
6506: ARRAY
6507: PPUSH
6508: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6512: LD_INT 26
6514: PPUSH
6515: LD_INT 3
6517: PPUSH
6518: LD_INT 1
6520: PPUSH
6521: LD_INT 2
6523: PPUSH
6524: LD_INT 4
6526: PUSH
6527: LD_INT 5
6529: PUSH
6530: LD_INT 5
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: LIST
6537: PUSH
6538: LD_INT 1
6540: PPUSH
6541: LD_INT 3
6543: PPUSH
6544: CALL_OW 12
6548: ARRAY
6549: PPUSH
6550: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6554: LD_INT 26
6556: PPUSH
6557: LD_INT 3
6559: PPUSH
6560: LD_INT 1
6562: PPUSH
6563: LD_INT 2
6565: PPUSH
6566: LD_INT 4
6568: PUSH
6569: LD_INT 3
6571: PUSH
6572: LD_INT 5
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: LIST
6579: PUSH
6580: LD_INT 1
6582: PPUSH
6583: LD_INT 3
6585: PPUSH
6586: CALL_OW 12
6590: ARRAY
6591: PPUSH
6592: CALL_OW 185
// end ; 2 :
6596: GO 7125
6598: LD_INT 2
6600: DOUBLE
6601: EQUAL
6602: IFTRUE 6606
6604: GO 6819
6606: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6607: LD_INT 26
6609: PPUSH
6610: LD_INT 3
6612: PPUSH
6613: LD_INT 1
6615: PPUSH
6616: LD_INT 2
6618: PPUSH
6619: LD_INT 4
6621: PUSH
6622: LD_INT 5
6624: PUSH
6625: LD_INT 5
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: LIST
6632: PUSH
6633: LD_INT 1
6635: PPUSH
6636: LD_INT 3
6638: PPUSH
6639: CALL_OW 12
6643: ARRAY
6644: PPUSH
6645: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6649: LD_INT 26
6651: PPUSH
6652: LD_INT 3
6654: PPUSH
6655: LD_INT 1
6657: PPUSH
6658: LD_INT 2
6660: PPUSH
6661: LD_INT 4
6663: PUSH
6664: LD_INT 5
6666: PUSH
6667: LD_INT 5
6669: PUSH
6670: EMPTY
6671: LIST
6672: LIST
6673: LIST
6674: PUSH
6675: LD_INT 1
6677: PPUSH
6678: LD_INT 3
6680: PPUSH
6681: CALL_OW 12
6685: ARRAY
6686: PPUSH
6687: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6691: LD_INT 26
6693: PPUSH
6694: LD_INT 3
6696: PPUSH
6697: LD_INT 1
6699: PPUSH
6700: LD_INT 2
6702: PPUSH
6703: LD_INT 4
6705: PUSH
6706: LD_INT 3
6708: PUSH
6709: LD_INT 5
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: LIST
6716: PUSH
6717: LD_INT 1
6719: PPUSH
6720: LD_INT 3
6722: PPUSH
6723: CALL_OW 12
6727: ARRAY
6728: PPUSH
6729: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6733: LD_INT 26
6735: PPUSH
6736: LD_INT 4
6738: PPUSH
6739: LD_INT 1
6741: PPUSH
6742: LD_INT 2
6744: PPUSH
6745: LD_INT 4
6747: PUSH
6748: LD_INT 5
6750: PUSH
6751: LD_INT 6
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 1
6761: PPUSH
6762: LD_INT 3
6764: PPUSH
6765: CALL_OW 12
6769: ARRAY
6770: PPUSH
6771: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_heavy_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6775: LD_INT 26
6777: PPUSH
6778: LD_INT 4
6780: PPUSH
6781: LD_INT 1
6783: PPUSH
6784: LD_INT 2
6786: PPUSH
6787: LD_INT 4
6789: PUSH
6790: LD_INT 6
6792: PUSH
6793: LD_INT 6
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: LIST
6800: PUSH
6801: LD_INT 1
6803: PPUSH
6804: LD_INT 3
6806: PPUSH
6807: CALL_OW 12
6811: ARRAY
6812: PPUSH
6813: CALL_OW 185
// end ; 3 :
6817: GO 7125
6819: LD_INT 3
6821: DOUBLE
6822: EQUAL
6823: IFTRUE 6827
6825: GO 7124
6827: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6828: LD_INT 26
6830: PPUSH
6831: LD_INT 3
6833: PPUSH
6834: LD_INT 1
6836: PPUSH
6837: LD_INT 2
6839: PPUSH
6840: LD_INT 4
6842: PUSH
6843: LD_INT 5
6845: PUSH
6846: LD_INT 5
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: LIST
6853: PUSH
6854: LD_INT 1
6856: PPUSH
6857: LD_INT 3
6859: PPUSH
6860: CALL_OW 12
6864: ARRAY
6865: PPUSH
6866: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6870: LD_INT 26
6872: PPUSH
6873: LD_INT 3
6875: PPUSH
6876: LD_INT 1
6878: PPUSH
6879: LD_INT 2
6881: PPUSH
6882: LD_INT 4
6884: PUSH
6885: LD_INT 5
6887: PUSH
6888: LD_INT 5
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: LIST
6895: PUSH
6896: LD_INT 1
6898: PPUSH
6899: LD_INT 3
6901: PPUSH
6902: CALL_OW 12
6906: ARRAY
6907: PPUSH
6908: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6912: LD_INT 26
6914: PPUSH
6915: LD_INT 3
6917: PPUSH
6918: LD_INT 1
6920: PPUSH
6921: LD_INT 2
6923: PPUSH
6924: LD_INT 4
6926: PUSH
6927: LD_INT 5
6929: PUSH
6930: LD_INT 5
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: LIST
6937: PUSH
6938: LD_INT 1
6940: PPUSH
6941: LD_INT 3
6943: PPUSH
6944: CALL_OW 12
6948: ARRAY
6949: PPUSH
6950: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6954: LD_INT 26
6956: PPUSH
6957: LD_INT 3
6959: PPUSH
6960: LD_INT 1
6962: PPUSH
6963: LD_INT 2
6965: PPUSH
6966: LD_INT 4
6968: PUSH
6969: LD_INT 5
6971: PUSH
6972: LD_INT 5
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: LIST
6979: PUSH
6980: LD_INT 1
6982: PPUSH
6983: LD_INT 3
6985: PPUSH
6986: CALL_OW 12
6990: ARRAY
6991: PPUSH
6992: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_heavy_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6996: LD_INT 26
6998: PPUSH
6999: LD_INT 4
7001: PPUSH
7002: LD_INT 1
7004: PPUSH
7005: LD_INT 2
7007: PPUSH
7008: LD_INT 4
7010: PUSH
7011: LD_INT 6
7013: PUSH
7014: LD_INT 6
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: LIST
7021: PUSH
7022: LD_INT 1
7024: PPUSH
7025: LD_INT 3
7027: PPUSH
7028: CALL_OW 12
7032: ARRAY
7033: PPUSH
7034: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_heavy_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7038: LD_INT 26
7040: PPUSH
7041: LD_INT 4
7043: PPUSH
7044: LD_INT 1
7046: PPUSH
7047: LD_INT 2
7049: PPUSH
7050: LD_INT 4
7052: PUSH
7053: LD_INT 6
7055: PUSH
7056: LD_INT 6
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: LIST
7063: PUSH
7064: LD_INT 1
7066: PPUSH
7067: LD_INT 3
7069: PPUSH
7070: CALL_OW 12
7074: ARRAY
7075: PPUSH
7076: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_heavy_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7080: LD_INT 26
7082: PPUSH
7083: LD_INT 4
7085: PPUSH
7086: LD_INT 1
7088: PPUSH
7089: LD_INT 2
7091: PPUSH
7092: LD_INT 4
7094: PUSH
7095: LD_INT 6
7097: PUSH
7098: LD_INT 6
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: LIST
7105: PUSH
7106: LD_INT 1
7108: PPUSH
7109: LD_INT 3
7111: PPUSH
7112: CALL_OW 12
7116: ARRAY
7117: PPUSH
7118: CALL_OW 185
// end ; end ;
7122: GO 7125
7124: POP
// end ;
7125: LD_VAR 0 1
7129: RET
// every 0 0$01 do var i , filter ;
7130: GO 7132
7132: DISABLE
7133: LD_INT 0
7135: PPUSH
7136: PPUSH
// begin enable ;
7137: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
7138: LD_INT 22
7140: PUSH
7141: LD_INT 1
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PUSH
7148: LD_INT 25
7150: PUSH
7151: LD_INT 4
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PPUSH
7162: CALL_OW 69
7166: PUSH
7167: LD_INT 0
7169: GREATER
7170: IFFALSE 7179
// RaiseSailEvent ( 3 ) ;
7172: LD_INT 3
7174: PPUSH
7175: CALL_OW 427
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 0 then
7179: LD_INT 22
7181: PUSH
7182: LD_INT 1
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 21
7191: PUSH
7192: LD_INT 3
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: LD_INT 3
7201: PUSH
7202: LD_INT 24
7204: PUSH
7205: LD_INT 1000
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: LIST
7220: PPUSH
7221: CALL_OW 69
7225: PUSH
7226: LD_INT 0
7228: GREATER
7229: IFFALSE 7240
// RaiseSailEvent ( 1 ) else
7231: LD_INT 1
7233: PPUSH
7234: CALL_OW 427
7238: GO 7247
// RaiseSailEvent ( 2 ) ;
7240: LD_INT 2
7242: PPUSH
7243: CALL_OW 427
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) > 0 then
7247: LD_INT 22
7249: PUSH
7250: LD_INT 1
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PUSH
7257: LD_INT 30
7259: PUSH
7260: LD_INT 5
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: PPUSH
7271: CALL_OW 69
7275: PUSH
7276: LD_INT 0
7278: GREATER
7279: IFFALSE 7288
// RaiseSailEvent ( 4 ) ;
7281: LD_INT 4
7283: PPUSH
7284: CALL_OW 427
// if gamma_towers > 0 then
7288: LD_EXP 18
7292: PUSH
7293: LD_INT 0
7295: GREATER
7296: IFFALSE 7305
// RaiseSailEvent ( 5 ) ;
7298: LD_INT 5
7300: PPUSH
7301: CALL_OW 427
// end ;
7305: PPOPN 2
7307: END
// export new_veh ; every 9 9$00 do var chassis , weapon ;
7308: GO 7310
7310: DISABLE
7311: LD_INT 0
7313: PPUSH
7314: PPUSH
// begin enable ;
7315: ENABLE
// if new_veh > 0 then
7316: LD_EXP 19
7320: PUSH
7321: LD_INT 0
7323: GREATER
7324: IFFALSE 7511
// while ( new_veh > 0 ) do
7326: LD_EXP 19
7330: PUSH
7331: LD_INT 0
7333: GREATER
7334: IFFALSE 7511
// begin Wait ( 0 0$01 ) ;
7336: LD_INT 35
7338: PPUSH
7339: CALL_OW 67
// if BuildingStatus ( am_fac ) = bs_idle then
7343: LD_INT 26
7345: PPUSH
7346: CALL_OW 461
7350: PUSH
7351: LD_INT 2
7353: EQUAL
7354: IFFALSE 7509
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ Rand ( 1 , 4 ) ] ;
7356: LD_ADDR_VAR 0 1
7360: PUSH
7361: LD_INT 2
7363: PUSH
7364: LD_INT 3
7366: PUSH
7367: LD_INT 3
7369: PUSH
7370: LD_INT 4
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: PUSH
7379: LD_INT 1
7381: PPUSH
7382: LD_INT 4
7384: PPUSH
7385: CALL_OW 12
7389: ARRAY
7390: ST_TO_ADDR
// if chassis in [ us_medium_wheeled , us_medium_tracked ] then
7391: LD_VAR 0 1
7395: PUSH
7396: LD_INT 2
7398: PUSH
7399: LD_INT 3
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: IN
7406: IFFALSE 7441
// weapon := [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ Rand ( 1 , 3 ) ] else
7408: LD_ADDR_VAR 0 2
7412: PUSH
7413: LD_INT 4
7415: PUSH
7416: LD_INT 5
7418: PUSH
7419: LD_INT 7
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: LIST
7426: PUSH
7427: LD_INT 1
7429: PPUSH
7430: LD_INT 3
7432: PPUSH
7433: CALL_OW 12
7437: ARRAY
7438: ST_TO_ADDR
7439: GO 7472
// weapon := [ us_double_gun , us_rocket_launcher , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ;
7441: LD_ADDR_VAR 0 2
7445: PUSH
7446: LD_INT 5
7448: PUSH
7449: LD_INT 7
7451: PUSH
7452: LD_INT 6
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: LIST
7459: PUSH
7460: LD_INT 1
7462: PPUSH
7463: LD_INT 3
7465: PPUSH
7466: CALL_OW 12
7470: ARRAY
7471: ST_TO_ADDR
// ComConstruct ( am_fac , chassis , engine_combustion , control_remote , weapon ) ;
7472: LD_INT 26
7474: PPUSH
7475: LD_VAR 0 1
7479: PPUSH
7480: LD_INT 1
7482: PPUSH
7483: LD_INT 2
7485: PPUSH
7486: LD_VAR 0 2
7490: PPUSH
7491: CALL_OW 125
// new_veh := new_veh - 1 ;
7495: LD_ADDR_EXP 19
7499: PUSH
7500: LD_EXP 19
7504: PUSH
7505: LD_INT 1
7507: MINUS
7508: ST_TO_ADDR
// end ; end ;
7509: GO 7326
// end ;
7511: PPOPN 2
7513: END
// every 0 0$01 do var v , filter , am_cmeh ;
7514: GO 7516
7516: DISABLE
7517: LD_INT 0
7519: PPUSH
7520: PPUSH
7521: PPUSH
// begin enable ;
7522: ENABLE
// am_cmeh := UnitsInside ( am_ct ) ;
7523: LD_ADDR_VAR 0 3
7527: PUSH
7528: LD_INT 56
7530: PPUSH
7531: CALL_OW 313
7535: ST_TO_ADDR
// filter = FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] ] ] ) ;
7536: LD_ADDR_VAR 0 2
7540: PUSH
7541: LD_INT 22
7543: PUSH
7544: LD_INT 1
7546: PUSH
7547: EMPTY
7548: LIST
7549: LIST
7550: PUSH
7551: LD_INT 33
7553: PUSH
7554: LD_INT 2
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: PUSH
7561: LD_INT 50
7563: PUSH
7564: EMPTY
7565: LIST
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: LIST
7571: PUSH
7572: EMPTY
7573: LIST
7574: PPUSH
7575: CALL_OW 69
7579: ST_TO_ADDR
// if filter > 0 then
7580: LD_VAR 0 2
7584: PUSH
7585: LD_INT 0
7587: GREATER
7588: IFFALSE 7656
// begin for v in filter do
7590: LD_ADDR_VAR 0 1
7594: PUSH
7595: LD_VAR 0 2
7599: PUSH
7600: FOR_IN
7601: IFFALSE 7654
// begin if not IsControledBy ( v ) and IsOk ( v ) then
7603: LD_VAR 0 1
7607: PPUSH
7608: CALL_OW 312
7612: NOT
7613: PUSH
7614: LD_VAR 0 1
7618: PPUSH
7619: CALL_OW 302
7623: AND
7624: IFFALSE 7652
// ComLinkTo ( v , am_cmeh [ Rand ( 1 , 3 ) ] ) ;
7626: LD_VAR 0 1
7630: PPUSH
7631: LD_VAR 0 3
7635: PUSH
7636: LD_INT 1
7638: PPUSH
7639: LD_INT 3
7641: PPUSH
7642: CALL_OW 12
7646: ARRAY
7647: PPUSH
7648: CALL_OW 135
// end ;
7652: GO 7600
7654: POP
7655: POP
// end ; end ;
7656: PPOPN 3
7658: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) = [ 4 , 5 , 7 ] [ dif ] and BuildingStatus ( am_fac ) = bs_idle do var i , un , enemy ;
7659: LD_INT 33
7661: PUSH
7662: LD_INT 2
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: PUSH
7669: LD_INT 3
7671: PUSH
7672: LD_INT 34
7674: PUSH
7675: LD_INT 13
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: PPUSH
7690: CALL_OW 69
7694: PUSH
7695: LD_INT 4
7697: PUSH
7698: LD_INT 5
7700: PUSH
7701: LD_INT 7
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: LIST
7708: PUSH
7709: LD_EXP 1
7713: ARRAY
7714: EQUAL
7715: PUSH
7716: LD_INT 26
7718: PPUSH
7719: CALL_OW 461
7723: PUSH
7724: LD_INT 2
7726: EQUAL
7727: AND
7728: IFFALSE 7939
7730: GO 7732
7732: DISABLE
7733: LD_INT 0
7735: PPUSH
7736: PPUSH
7737: PPUSH
// begin enable ;
7738: ENABLE
// if Sikorski_Ar then
7739: LD_EXP 12
7743: IFFALSE 7820
// SForce := FilterAllUnits ( [ [ f_or , [ f_side , 4 ] , [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ] ] ) else
7745: LD_ADDR_EXP 11
7749: PUSH
7750: LD_INT 2
7752: PUSH
7753: LD_INT 22
7755: PUSH
7756: LD_INT 4
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: PUSH
7763: LD_INT 22
7765: PUSH
7766: LD_INT 1
7768: PUSH
7769: EMPTY
7770: LIST
7771: LIST
7772: PUSH
7773: LD_INT 33
7775: PUSH
7776: LD_INT 2
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: PUSH
7783: LD_INT 3
7785: PUSH
7786: LD_INT 34
7788: PUSH
7789: LD_INT 13
7791: PUSH
7792: EMPTY
7793: LIST
7794: LIST
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: PUSH
7800: EMPTY
7801: LIST
7802: LIST
7803: LIST
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: LIST
7809: PUSH
7810: EMPTY
7811: LIST
7812: PPUSH
7813: CALL_OW 69
7817: ST_TO_ADDR
7818: GO 7861
// SForce := FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) ;
7820: LD_ADDR_EXP 11
7824: PUSH
7825: LD_INT 33
7827: PUSH
7828: LD_INT 2
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: PUSH
7835: LD_INT 3
7837: PUSH
7838: LD_INT 34
7840: PUSH
7841: LD_INT 13
7843: PUSH
7844: EMPTY
7845: LIST
7846: LIST
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: PUSH
7852: EMPTY
7853: LIST
7854: LIST
7855: PPUSH
7856: CALL_OW 69
7860: ST_TO_ADDR
// repeat begin for un in SForce do
7861: LD_ADDR_VAR 0 2
7865: PUSH
7866: LD_EXP 11
7870: PUSH
7871: FOR_IN
7872: IFFALSE 7927
// begin enemy := FilterAllUnits ( [ f_side , 3 ] ) ;
7874: LD_ADDR_VAR 0 3
7878: PUSH
7879: LD_INT 22
7881: PUSH
7882: LD_INT 3
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: PPUSH
7889: CALL_OW 69
7893: ST_TO_ADDR
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
7894: LD_VAR 0 2
7898: PPUSH
7899: LD_VAR 0 3
7903: PPUSH
7904: LD_VAR 0 2
7908: PPUSH
7909: CALL_OW 74
7913: PPUSH
7914: CALL_OW 115
// Wait ( 0 0$01 ) ;
7918: LD_INT 35
7920: PPUSH
7921: CALL_OW 67
// end ;
7925: GO 7871
7927: POP
7928: POP
// end until SForce = 0 ;
7929: LD_EXP 11
7933: PUSH
7934: LD_INT 0
7936: EQUAL
7937: IFFALSE 7861
// end ;
7939: PPOPN 3
7941: END
// export function NewForce ( num ) ; var i , filter , veh , tmp ; begin
7942: LD_INT 0
7944: PPUSH
7945: PPUSH
7946: PPUSH
7947: PPUSH
7948: PPUSH
// tmp := FilterUnitsInArea ( spawnArea , [ ] ) ;
7949: LD_ADDR_VAR 0 6
7953: PUSH
7954: LD_INT 14
7956: PPUSH
7957: EMPTY
7958: PPUSH
7959: CALL_OW 70
7963: ST_TO_ADDR
// if tmp then
7964: LD_VAR 0 6
7968: IFFALSE 8002
// for i in tmp do
7970: LD_ADDR_VAR 0 3
7974: PUSH
7975: LD_VAR 0 6
7979: PUSH
7980: FOR_IN
7981: IFFALSE 8000
// ComMoveXY ( i , 42 , 23 ) ;
7983: LD_VAR 0 3
7987: PPUSH
7988: LD_INT 42
7990: PPUSH
7991: LD_INT 23
7993: PPUSH
7994: CALL_OW 111
7998: GO 7980
8000: POP
8001: POP
// EraseResourceArea ( spawnArea , mat_cans ) ;
8002: LD_INT 14
8004: PPUSH
8005: LD_INT 1
8007: PPUSH
8008: CALL_OW 286
// uc_side := 4 ;
8012: LD_ADDR_OWVAR 20
8016: PUSH
8017: LD_INT 4
8019: ST_TO_ADDR
// uc_nation := 1 ;
8020: LD_ADDR_OWVAR 21
8024: PUSH
8025: LD_INT 1
8027: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
8028: LD_ADDR_OWVAR 37
8032: PUSH
8033: LD_INT 4
8035: ST_TO_ADDR
// vc_control := control_manual ;
8036: LD_ADDR_OWVAR 38
8040: PUSH
8041: LD_INT 1
8043: ST_TO_ADDR
// vc_engine := engine_combustion ;
8044: LD_ADDR_OWVAR 39
8048: PUSH
8049: LD_INT 1
8051: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ dif ] ;
8052: LD_ADDR_OWVAR 40
8056: PUSH
8057: LD_INT 4
8059: PUSH
8060: LD_INT 5
8062: PUSH
8063: LD_INT 7
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: LIST
8070: PUSH
8071: LD_EXP 1
8075: ARRAY
8076: ST_TO_ADDR
// veh := CreateVehicle ;
8077: LD_ADDR_VAR 0 5
8081: PUSH
8082: CALL_OW 45
8086: ST_TO_ADDR
// PlaceUnitArea ( veh , am_main_spawn , false ) ;
8087: LD_VAR 0 5
8091: PPUSH
8092: LD_INT 2
8094: PPUSH
8095: LD_INT 0
8097: PPUSH
8098: CALL_OW 49
// PlaceHumanInUnit ( sikorski , veh ) ;
8102: LD_EXP 9
8106: PPUSH
8107: LD_VAR 0 5
8111: PPUSH
8112: CALL_OW 52
// SetMark ( veh , 1 ) ;
8116: LD_VAR 0 5
8120: PPUSH
8121: LD_INT 1
8123: PPUSH
8124: CALL_OW 242
// while ( num > 0 ) do
8128: LD_VAR 0 1
8132: PUSH
8133: LD_INT 0
8135: GREATER
8136: IFFALSE 8303
// begin CreateVehicleWithDriver ( [ us_medium_tracked , us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ Rand ( dif , 4 ) ] , engine_combustion , [ us_gatling_gun , us_double_gun , us_double_gun , us_rocket_launcher ] [ Rand ( 1 , dif + 1 ) ] , am_sik , 2 , [ 5 , 6 , 7 ] [ dif ] ) ;
8138: LD_INT 3
8140: PUSH
8141: LD_INT 3
8143: PUSH
8144: LD_INT 3
8146: PUSH
8147: LD_INT 4
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: PUSH
8156: LD_EXP 1
8160: PPUSH
8161: LD_INT 4
8163: PPUSH
8164: CALL_OW 12
8168: ARRAY
8169: PPUSH
8170: LD_INT 1
8172: PPUSH
8173: LD_INT 4
8175: PUSH
8176: LD_INT 5
8178: PUSH
8179: LD_INT 5
8181: PUSH
8182: LD_INT 7
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: PUSH
8191: LD_INT 1
8193: PPUSH
8194: LD_EXP 1
8198: PUSH
8199: LD_INT 1
8201: PLUS
8202: PPUSH
8203: CALL_OW 12
8207: ARRAY
8208: PPUSH
8209: LD_INT 11
8211: PPUSH
8212: LD_INT 2
8214: PPUSH
8215: LD_INT 5
8217: PUSH
8218: LD_INT 6
8220: PUSH
8221: LD_INT 7
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: LIST
8228: PUSH
8229: LD_EXP 1
8233: ARRAY
8234: PPUSH
8235: CALL 1297 0 6
// filter := FilterAllUnits ( [ f_side , 4 ] ) ;
8239: LD_ADDR_VAR 0 4
8243: PUSH
8244: LD_INT 22
8246: PUSH
8247: LD_INT 4
8249: PUSH
8250: EMPTY
8251: LIST
8252: LIST
8253: PPUSH
8254: CALL_OW 69
8258: ST_TO_ADDR
// ComMoveXY ( filter [ filter ] , 36 , 18 ) ;
8259: LD_VAR 0 4
8263: PUSH
8264: LD_VAR 0 4
8268: ARRAY
8269: PPUSH
8270: LD_INT 36
8272: PPUSH
8273: LD_INT 18
8275: PPUSH
8276: CALL_OW 111
// Wait ( 0 0$02 ) ;
8280: LD_INT 70
8282: PPUSH
8283: CALL_OW 67
// num := num - 1 ;
8287: LD_ADDR_VAR 0 1
8291: PUSH
8292: LD_VAR 0 1
8296: PUSH
8297: LD_INT 1
8299: MINUS
8300: ST_TO_ADDR
// end ;
8301: GO 8128
// end ;
8303: LD_VAR 0 2
8307: RET
// every 0 0$03 trigger patrol > 0 do var i ;
8308: LD_EXP 17
8312: PUSH
8313: LD_INT 0
8315: GREATER
8316: IFFALSE 8585
8318: GO 8320
8320: DISABLE
8321: LD_INT 0
8323: PPUSH
// begin enable ;
8324: ENABLE
// for i = 1 to patrol do
8325: LD_ADDR_VAR 0 1
8329: PUSH
8330: DOUBLE
8331: LD_INT 1
8333: DEC
8334: ST_TO_ADDR
8335: LD_EXP 17
8339: PUSH
8340: FOR_TO
8341: IFFALSE 8583
// begin if patrol [ i ] and IsLive ( patrol [ i ] ) and not HasTask ( patrol [ i ] ) then
8343: LD_EXP 17
8347: PUSH
8348: LD_VAR 0 1
8352: ARRAY
8353: PUSH
8354: LD_EXP 17
8358: PUSH
8359: LD_VAR 0 1
8363: ARRAY
8364: PPUSH
8365: CALL_OW 300
8369: AND
8370: PUSH
8371: LD_EXP 17
8375: PUSH
8376: LD_VAR 0 1
8380: ARRAY
8381: PPUSH
8382: CALL_OW 314
8386: NOT
8387: AND
8388: IFFALSE 8538
// case i of 1 :
8390: LD_VAR 0 1
8394: PUSH
8395: LD_INT 1
8397: DOUBLE
8398: EQUAL
8399: IFTRUE 8403
8401: GO 8466
8403: POP
// begin ComMoveXY ( patrol [ i ] , 53 , 91 ) ;
8404: LD_EXP 17
8408: PUSH
8409: LD_VAR 0 1
8413: ARRAY
8414: PPUSH
8415: LD_INT 53
8417: PPUSH
8418: LD_INT 91
8420: PPUSH
8421: CALL_OW 111
// AddComWait ( patrol [ i ] , 0 0$07 ) ;
8425: LD_EXP 17
8429: PUSH
8430: LD_VAR 0 1
8434: ARRAY
8435: PPUSH
8436: LD_INT 245
8438: PPUSH
8439: CALL_OW 202
// AddComMoveXY ( patrol [ i ] , 24 , 26 ) ;
8443: LD_EXP 17
8447: PUSH
8448: LD_VAR 0 1
8452: ARRAY
8453: PPUSH
8454: LD_INT 24
8456: PPUSH
8457: LD_INT 26
8459: PPUSH
8460: CALL_OW 171
// end ; 2 :
8464: GO 8538
8466: LD_INT 2
8468: DOUBLE
8469: EQUAL
8470: IFTRUE 8474
8472: GO 8537
8474: POP
// begin ComMoveXY ( patrol [ i ] , 83 , 57 ) ;
8475: LD_EXP 17
8479: PUSH
8480: LD_VAR 0 1
8484: ARRAY
8485: PPUSH
8486: LD_INT 83
8488: PPUSH
8489: LD_INT 57
8491: PPUSH
8492: CALL_OW 111
// AddComWait ( patrol [ i ] , 0 0$07 ) ;
8496: LD_EXP 17
8500: PUSH
8501: LD_VAR 0 1
8505: ARRAY
8506: PPUSH
8507: LD_INT 245
8509: PPUSH
8510: CALL_OW 202
// AddComMoveXY ( patrol [ i ] , 47 , 53 ) ;
8514: LD_EXP 17
8518: PUSH
8519: LD_VAR 0 1
8523: ARRAY
8524: PPUSH
8525: LD_INT 47
8527: PPUSH
8528: LD_INT 53
8530: PPUSH
8531: CALL_OW 171
// end ; end ;
8535: GO 8538
8537: POP
// if GetLives ( patrol [ i ] ) < 1000 then
8538: LD_EXP 17
8542: PUSH
8543: LD_VAR 0 1
8547: ARRAY
8548: PPUSH
8549: CALL_OW 256
8553: PUSH
8554: LD_INT 1000
8556: LESS
8557: IFFALSE 8581
// patrol := patrol diff patrol [ i ] ;
8559: LD_ADDR_EXP 17
8563: PUSH
8564: LD_EXP 17
8568: PUSH
8569: LD_EXP 17
8573: PUSH
8574: LD_VAR 0 1
8578: ARRAY
8579: DIFF
8580: ST_TO_ADDR
// end ;
8581: GO 8340
8583: POP
8584: POP
// end ;
8585: PPOPN 1
8587: END
// every 0 0$10 do
8588: GO 8590
8590: DISABLE
// begin Wait ( [ 20 20$00 , 18 18$00 , 16 16$00 ] [ dif ] ) ;
8591: LD_INT 42000
8593: PUSH
8594: LD_INT 37800
8596: PUSH
8597: LD_INT 33600
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: LIST
8604: PUSH
8605: LD_EXP 1
8609: ARRAY
8610: PPUSH
8611: CALL_OW 67
// if not contact_am then
8615: LD_EXP 16
8619: NOT
8620: IFFALSE 8630
// contact_am := true ;
8622: LD_ADDR_EXP 16
8626: PUSH
8627: LD_INT 1
8629: ST_TO_ADDR
// end ; end_of_file
8630: END
// export event_rocket , event_comp , comp_tested , sikorski_run ; export function Action ; begin
8631: LD_INT 0
8633: PPUSH
// comp_tested := false ;
8634: LD_ADDR_EXP 22
8638: PUSH
8639: LD_INT 0
8641: ST_TO_ADDR
// sikorski_run := false ;
8642: LD_ADDR_EXP 23
8646: PUSH
8647: LD_INT 0
8649: ST_TO_ADDR
// InGameOn ;
8650: CALL_OW 8
// CenterNowOnXY ( 5 , 4 ) ;
8654: LD_INT 5
8656: PPUSH
8657: LD_INT 4
8659: PPUSH
8660: CALL_OW 86
// wait ( 0 0$2 ) ;
8664: LD_INT 70
8666: PPUSH
8667: CALL_OW 67
// CenterOnUnits ( commander ) ;
8671: LD_EXP 3
8675: PPUSH
8676: CALL_OW 85
// wait ( 0 0$01 ) ;
8680: LD_INT 35
8682: PPUSH
8683: CALL_OW 67
// SayRadio ( popov , Dpop1 ) ;
8687: LD_EXP 2
8691: PPUSH
8692: LD_STRING Dpop1
8694: PPUSH
8695: CALL_OW 94
// Say ( commander , Dcomm1 ) ;
8699: LD_EXP 3
8703: PPUSH
8704: LD_STRING Dcomm1
8706: PPUSH
8707: CALL_OW 88
// SayRadio ( popov , Dpop2 ) ;
8711: LD_EXP 2
8715: PPUSH
8716: LD_STRING Dpop2
8718: PPUSH
8719: CALL_OW 94
// Say ( commander , Dcomm2 ) ;
8723: LD_EXP 3
8727: PPUSH
8728: LD_STRING Dcomm2
8730: PPUSH
8731: CALL_OW 88
// InGameOff ;
8735: CALL_OW 9
// ChangeMissionObjectives ( T1 ) ;
8739: LD_STRING T1
8741: PPUSH
8742: CALL_OW 337
// end ;
8746: LD_VAR 0 1
8750: RET
// every 0 0$01 trigger timer > 2 2$01 do
8751: LD_EXP 24
8755: PUSH
8756: LD_INT 4235
8758: GREATER
8759: IFFALSE 8776
8761: GO 8763
8763: DISABLE
// begin SayRadio ( kapral , DKap1 ) ;
8764: LD_EXP 5
8768: PPUSH
8769: LD_STRING DKap1
8771: PPUSH
8772: CALL_OW 94
// end ;
8776: END
// every 0 0$01 trigger timer > [ 22 22$00 , 25 25$00 , 30 30$00 ] [ dif ] do var i ;
8777: LD_EXP 24
8781: PUSH
8782: LD_INT 46200
8784: PUSH
8785: LD_INT 52500
8787: PUSH
8788: LD_INT 63000
8790: PUSH
8791: EMPTY
8792: LIST
8793: LIST
8794: LIST
8795: PUSH
8796: LD_EXP 1
8800: ARRAY
8801: GREATER
8802: IFFALSE 9169
8804: GO 8806
8806: DISABLE
8807: LD_INT 0
8809: PPUSH
// begin SayRadio ( kapral , DKap2 ) ;
8810: LD_EXP 5
8814: PPUSH
8815: LD_STRING DKap2
8817: PPUSH
8818: CALL_OW 94
// Wait ( 0 0$0.3 ) ;
8822: LD_INT 10
8824: PPUSH
8825: CALL_OW 67
// Say ( commander , Dcommk ) ;
8829: LD_EXP 3
8833: PPUSH
8834: LD_STRING Dcommk
8836: PPUSH
8837: CALL_OW 88
// Wait ( 0 0$44 ) ;
8841: LD_INT 1540
8843: PPUSH
8844: CALL_OW 67
// PlaceUnitArea ( kapral , am_west_spawn , false ) ;
8848: LD_EXP 5
8852: PPUSH
8853: LD_INT 3
8855: PPUSH
8856: LD_INT 0
8858: PPUSH
8859: CALL_OW 49
// CenterNowOnUnits ( kapral ) ;
8863: LD_EXP 5
8867: PPUSH
8868: CALL_OW 87
// Wait ( 0 0$10 ) ;
8872: LD_INT 350
8874: PPUSH
8875: CALL_OW 67
// NewForce ( [ 6 , 7 , 8 ] [ dif ] ) ;
8879: LD_INT 6
8881: PUSH
8882: LD_INT 7
8884: PUSH
8885: LD_INT 8
8887: PUSH
8888: EMPTY
8889: LIST
8890: LIST
8891: LIST
8892: PUSH
8893: LD_EXP 1
8897: ARRAY
8898: PPUSH
8899: CALL 7942 0 1
// Wait ( 2 2$00 ) ;
8903: LD_INT 4200
8905: PPUSH
8906: CALL_OW 67
// while ( FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) < 3 ) do
8910: LD_INT 33
8912: PUSH
8913: LD_INT 2
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PUSH
8920: LD_INT 3
8922: PUSH
8923: LD_INT 34
8925: PUSH
8926: LD_INT 13
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: PPUSH
8941: CALL_OW 69
8945: PUSH
8946: LD_INT 3
8948: LESS
8949: IFFALSE 8960
// Wait ( 0 0$01 ) ;
8951: LD_INT 35
8953: PPUSH
8954: CALL_OW 67
8958: GO 8910
// uc_side := 4 ;
8960: LD_ADDR_OWVAR 20
8964: PUSH
8965: LD_INT 4
8967: ST_TO_ADDR
// uc_nation := 1 ;
8968: LD_ADDR_OWVAR 21
8972: PUSH
8973: LD_INT 1
8975: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ dif ] do
8976: LD_ADDR_VAR 0 1
8980: PUSH
8981: DOUBLE
8982: LD_INT 1
8984: DEC
8985: ST_TO_ADDR
8986: LD_INT 4
8988: PUSH
8989: LD_INT 5
8991: PUSH
8992: LD_INT 6
8994: PUSH
8995: EMPTY
8996: LIST
8997: LIST
8998: LIST
8999: PUSH
9000: LD_EXP 1
9004: ARRAY
9005: PUSH
9006: FOR_TO
9007: IFFALSE 9049
// PlaceUnitArea ( CreateHumanWithClass ( 1 , [ 5 , 6 , 7 ] [ dif ] ) , am_east_spawn , false ) ;
9009: LD_INT 1
9011: PPUSH
9012: LD_INT 5
9014: PUSH
9015: LD_INT 6
9017: PUSH
9018: LD_INT 7
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: LIST
9025: PUSH
9026: LD_EXP 1
9030: ARRAY
9031: PPUSH
9032: CALL 734 0 2
9036: PPUSH
9037: LD_INT 4
9039: PPUSH
9040: LD_INT 0
9042: PPUSH
9043: CALL_OW 49
9047: GO 9006
9049: POP
9050: POP
// sikorski_ar := true ;
9051: LD_ADDR_EXP 12
9055: PUSH
9056: LD_INT 1
9058: ST_TO_ADDR
// SayRadio ( sikorski , DSik1 ) ;
9059: LD_EXP 9
9063: PPUSH
9064: LD_STRING DSik1
9066: PPUSH
9067: CALL_OW 94
// Wait ( 0 0$30 ) ;
9071: LD_INT 1050
9073: PPUSH
9074: CALL_OW 67
// uc_side := 4 ;
9078: LD_ADDR_OWVAR 20
9082: PUSH
9083: LD_INT 4
9085: ST_TO_ADDR
// uc_nation := 1 ;
9086: LD_ADDR_OWVAR 21
9090: PUSH
9091: LD_INT 1
9093: ST_TO_ADDR
// for i = 1 to [ 3 , 4 , 4 ] [ dif ] do
9094: LD_ADDR_VAR 0 1
9098: PUSH
9099: DOUBLE
9100: LD_INT 1
9102: DEC
9103: ST_TO_ADDR
9104: LD_INT 3
9106: PUSH
9107: LD_INT 4
9109: PUSH
9110: LD_INT 4
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: LIST
9117: PUSH
9118: LD_EXP 1
9122: ARRAY
9123: PUSH
9124: FOR_TO
9125: IFFALSE 9167
// PlaceUnitArea ( CreateHumanWithClass ( 1 , [ 5 , 6 , 7 ] [ dif ] ) , am_south_spawn , false ) ;
9127: LD_INT 1
9129: PPUSH
9130: LD_INT 5
9132: PUSH
9133: LD_INT 6
9135: PUSH
9136: LD_INT 7
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: LIST
9143: PUSH
9144: LD_EXP 1
9148: ARRAY
9149: PPUSH
9150: CALL 734 0 2
9154: PPUSH
9155: LD_INT 13
9157: PPUSH
9158: LD_INT 0
9160: PPUSH
9161: CALL_OW 49
9165: GO 9124
9167: POP
9168: POP
// end ;
9169: PPOPN 1
9171: END
// every 0 0$0.1 trigger GetLives ( sikorski ) < 650 do
9172: LD_EXP 9
9176: PPUSH
9177: CALL_OW 256
9181: PUSH
9182: LD_INT 650
9184: LESS
9185: IFFALSE 9267
9187: GO 9189
9189: DISABLE
// begin Say ( sikorski , DSik2 ) ;
9190: LD_EXP 9
9194: PPUSH
9195: LD_STRING DSik2
9197: PPUSH
9198: CALL_OW 88
// while ( IsLive ( sikorski ) ) do
9202: LD_EXP 9
9206: PPUSH
9207: CALL_OW 300
9211: IFFALSE 9267
// begin ComMoveToArea ( sikorski , am_main_spawn ) ;
9213: LD_EXP 9
9217: PPUSH
9218: LD_INT 2
9220: PPUSH
9221: CALL_OW 113
// Wait ( 0 0$01 ) ;
9225: LD_INT 35
9227: PPUSH
9228: CALL_OW 67
// if IsInArea ( sikorski , am_main_spawn ) then
9232: LD_EXP 9
9236: PPUSH
9237: LD_INT 2
9239: PPUSH
9240: CALL_OW 308
9244: IFFALSE 9265
// begin RemoveUnit ( sikorski ) ;
9246: LD_EXP 9
9250: PPUSH
9251: CALL_OW 64
// break ;
9255: GO 9267
// sikorski_run := true ;
9257: LD_ADDR_EXP 23
9261: PUSH
9262: LD_INT 1
9264: ST_TO_ADDR
// end ; end ;
9265: GO 9202
// end ;
9267: END
// every 0 0$0.1 trigger GetLives ( sikorski ) < 1000 do
9268: LD_EXP 9
9272: PPUSH
9273: CALL_OW 256
9277: PUSH
9278: LD_INT 1000
9280: LESS
9281: IFFALSE 9298
9283: GO 9285
9285: DISABLE
// Say ( sikorski , DSkik3 ) ; end_of_file
9286: LD_EXP 9
9290: PPUSH
9291: LD_STRING DSkik3
9293: PPUSH
9294: CALL_OW 88
9298: END
// every 1 1$45 + 0 0$15 do
9299: GO 9301
9301: DISABLE
// begin enable ;
9302: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
9303: LD_INT 1
9305: PPUSH
9306: LD_INT 5
9308: PPUSH
9309: CALL_OW 12
9313: PPUSH
9314: LD_INT 8
9316: PPUSH
9317: LD_INT 1
9319: PPUSH
9320: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$37 ) ) ;
9324: LD_INT 350
9326: PPUSH
9327: LD_INT 1295
9329: PPUSH
9330: CALL_OW 12
9334: PPUSH
9335: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
9339: LD_INT 1
9341: PPUSH
9342: LD_INT 5
9344: PPUSH
9345: CALL_OW 12
9349: PPUSH
9350: LD_INT 1
9352: PPUSH
9353: CALL_OW 57
// Wait ( Rand ( 0 0$10 , 0 0$30 ) ) ;
9357: LD_INT 350
9359: PPUSH
9360: LD_INT 1050
9362: PPUSH
9363: CALL_OW 12
9367: PPUSH
9368: CALL_OW 67
// if timer <= [ 12 12$00 , 11 11$00 , 10 10$00 ] [ dif ] then
9372: LD_EXP 24
9376: PUSH
9377: LD_INT 25200
9379: PUSH
9380: LD_INT 23100
9382: PUSH
9383: LD_INT 21000
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: LIST
9390: PUSH
9391: LD_EXP 1
9395: ARRAY
9396: LESSEQUAL
9397: IFFALSE 9420
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
9399: LD_INT 1
9401: PPUSH
9402: LD_INT 5
9404: PPUSH
9405: CALL_OW 12
9409: PPUSH
9410: LD_INT 8
9412: PPUSH
9413: LD_INT 1
9415: PPUSH
9416: CALL_OW 55
// end ;
9420: END
// export timer ; every 1 do
9421: GO 9423
9423: DISABLE
// timer := 0 0$00 ;
9424: LD_ADDR_EXP 24
9428: PUSH
9429: LD_INT 0
9431: ST_TO_ADDR
9432: END
// every 0 0$01 do
9433: GO 9435
9435: DISABLE
// begin enable ;
9436: ENABLE
// Display_Strings := [ #tick , timer ] ;
9437: LD_ADDR_OWVAR 47
9441: PUSH
9442: LD_STRING #tick
9444: PUSH
9445: LD_EXP 24
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: ST_TO_ADDR
// timer := timer + 0 0$01 ;
9454: LD_ADDR_EXP 24
9458: PUSH
9459: LD_EXP 24
9463: PUSH
9464: LD_INT 35
9466: PLUS
9467: ST_TO_ADDR
// end ; end_of_file end_of_file
9468: END
// export globalGameSaveCounter ; every 0 0$1 do
9469: GO 9471
9471: DISABLE
// begin enable ;
9472: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
9473: LD_STRING updateTimer(
9475: PUSH
9476: LD_OWVAR 1
9480: STR
9481: PUSH
9482: LD_STRING );
9484: STR
9485: PPUSH
9486: CALL_OW 559
// end ;
9490: END
// every 0 0$1 do
9491: GO 9493
9493: DISABLE
// begin globalGameSaveCounter := 0 ;
9494: LD_ADDR_EXP 25
9498: PUSH
9499: LD_INT 0
9501: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
9502: LD_STRING setGameSaveCounter(0)
9504: PPUSH
9505: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
9509: LD_STRING initStreamRollete();
9511: PPUSH
9512: CALL_OW 559
// InitStreamMode ;
9516: CALL 10842 0 0
// DefineStreamItems ( false ) ;
9520: LD_INT 0
9522: PPUSH
9523: CALL 11306 0 1
// end ;
9527: END
// export function SOS_MapStart ( ) ; begin
9528: LD_INT 0
9530: PPUSH
// if streamModeActive then
9531: LD_EXP 26
9535: IFFALSE 9544
// DefineStreamItems ( true ) ;
9537: LD_INT 1
9539: PPUSH
9540: CALL 11306 0 1
// UpdateLuaVariables ( ) ;
9544: CALL 9561 0 0
// UpdateFactoryWaypoints ( ) ;
9548: CALL 24175 0 0
// UpdateWarehouseGatheringPoints ( ) ;
9552: CALL 24432 0 0
// end ;
9556: LD_VAR 0 1
9560: RET
// function UpdateLuaVariables ( ) ; begin
9561: LD_INT 0
9563: PPUSH
// if globalGameSaveCounter then
9564: LD_EXP 25
9568: IFFALSE 9602
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
9570: LD_ADDR_EXP 25
9574: PUSH
9575: LD_EXP 25
9579: PPUSH
9580: CALL 68242 0 1
9584: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
9585: LD_STRING setGameSaveCounter(
9587: PUSH
9588: LD_EXP 25
9592: STR
9593: PUSH
9594: LD_STRING )
9596: STR
9597: PPUSH
9598: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
9602: LD_STRING setGameDifficulty(
9604: PUSH
9605: LD_OWVAR 67
9609: STR
9610: PUSH
9611: LD_STRING )
9613: STR
9614: PPUSH
9615: CALL_OW 559
// end ;
9619: LD_VAR 0 1
9623: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9624: LD_INT 0
9626: PPUSH
// if p2 = stream_mode then
9627: LD_VAR 0 2
9631: PUSH
9632: LD_INT 100
9634: EQUAL
9635: IFFALSE 10638
// begin if not StreamModeActive then
9637: LD_EXP 26
9641: NOT
9642: IFFALSE 9652
// StreamModeActive := true ;
9644: LD_ADDR_EXP 26
9648: PUSH
9649: LD_INT 1
9651: ST_TO_ADDR
// if p3 = 0 then
9652: LD_VAR 0 3
9656: PUSH
9657: LD_INT 0
9659: EQUAL
9660: IFFALSE 9666
// InitStreamMode ;
9662: CALL 10842 0 0
// if p3 = 1 then
9666: LD_VAR 0 3
9670: PUSH
9671: LD_INT 1
9673: EQUAL
9674: IFFALSE 9684
// sRocket := true ;
9676: LD_ADDR_EXP 31
9680: PUSH
9681: LD_INT 1
9683: ST_TO_ADDR
// if p3 = 2 then
9684: LD_VAR 0 3
9688: PUSH
9689: LD_INT 2
9691: EQUAL
9692: IFFALSE 9702
// sSpeed := true ;
9694: LD_ADDR_EXP 30
9698: PUSH
9699: LD_INT 1
9701: ST_TO_ADDR
// if p3 = 3 then
9702: LD_VAR 0 3
9706: PUSH
9707: LD_INT 3
9709: EQUAL
9710: IFFALSE 9720
// sEngine := true ;
9712: LD_ADDR_EXP 32
9716: PUSH
9717: LD_INT 1
9719: ST_TO_ADDR
// if p3 = 4 then
9720: LD_VAR 0 3
9724: PUSH
9725: LD_INT 4
9727: EQUAL
9728: IFFALSE 9738
// sSpec := true ;
9730: LD_ADDR_EXP 29
9734: PUSH
9735: LD_INT 1
9737: ST_TO_ADDR
// if p3 = 5 then
9738: LD_VAR 0 3
9742: PUSH
9743: LD_INT 5
9745: EQUAL
9746: IFFALSE 9756
// sLevel := true ;
9748: LD_ADDR_EXP 33
9752: PUSH
9753: LD_INT 1
9755: ST_TO_ADDR
// if p3 = 6 then
9756: LD_VAR 0 3
9760: PUSH
9761: LD_INT 6
9763: EQUAL
9764: IFFALSE 9774
// sArmoury := true ;
9766: LD_ADDR_EXP 34
9770: PUSH
9771: LD_INT 1
9773: ST_TO_ADDR
// if p3 = 7 then
9774: LD_VAR 0 3
9778: PUSH
9779: LD_INT 7
9781: EQUAL
9782: IFFALSE 9792
// sRadar := true ;
9784: LD_ADDR_EXP 35
9788: PUSH
9789: LD_INT 1
9791: ST_TO_ADDR
// if p3 = 8 then
9792: LD_VAR 0 3
9796: PUSH
9797: LD_INT 8
9799: EQUAL
9800: IFFALSE 9810
// sBunker := true ;
9802: LD_ADDR_EXP 36
9806: PUSH
9807: LD_INT 1
9809: ST_TO_ADDR
// if p3 = 9 then
9810: LD_VAR 0 3
9814: PUSH
9815: LD_INT 9
9817: EQUAL
9818: IFFALSE 9828
// sHack := true ;
9820: LD_ADDR_EXP 37
9824: PUSH
9825: LD_INT 1
9827: ST_TO_ADDR
// if p3 = 10 then
9828: LD_VAR 0 3
9832: PUSH
9833: LD_INT 10
9835: EQUAL
9836: IFFALSE 9846
// sFire := true ;
9838: LD_ADDR_EXP 38
9842: PUSH
9843: LD_INT 1
9845: ST_TO_ADDR
// if p3 = 11 then
9846: LD_VAR 0 3
9850: PUSH
9851: LD_INT 11
9853: EQUAL
9854: IFFALSE 9864
// sRefresh := true ;
9856: LD_ADDR_EXP 39
9860: PUSH
9861: LD_INT 1
9863: ST_TO_ADDR
// if p3 = 12 then
9864: LD_VAR 0 3
9868: PUSH
9869: LD_INT 12
9871: EQUAL
9872: IFFALSE 9882
// sExp := true ;
9874: LD_ADDR_EXP 40
9878: PUSH
9879: LD_INT 1
9881: ST_TO_ADDR
// if p3 = 13 then
9882: LD_VAR 0 3
9886: PUSH
9887: LD_INT 13
9889: EQUAL
9890: IFFALSE 9900
// sDepot := true ;
9892: LD_ADDR_EXP 41
9896: PUSH
9897: LD_INT 1
9899: ST_TO_ADDR
// if p3 = 14 then
9900: LD_VAR 0 3
9904: PUSH
9905: LD_INT 14
9907: EQUAL
9908: IFFALSE 9918
// sFlag := true ;
9910: LD_ADDR_EXP 42
9914: PUSH
9915: LD_INT 1
9917: ST_TO_ADDR
// if p3 = 15 then
9918: LD_VAR 0 3
9922: PUSH
9923: LD_INT 15
9925: EQUAL
9926: IFFALSE 9936
// sKamikadze := true ;
9928: LD_ADDR_EXP 50
9932: PUSH
9933: LD_INT 1
9935: ST_TO_ADDR
// if p3 = 16 then
9936: LD_VAR 0 3
9940: PUSH
9941: LD_INT 16
9943: EQUAL
9944: IFFALSE 9954
// sTroll := true ;
9946: LD_ADDR_EXP 51
9950: PUSH
9951: LD_INT 1
9953: ST_TO_ADDR
// if p3 = 17 then
9954: LD_VAR 0 3
9958: PUSH
9959: LD_INT 17
9961: EQUAL
9962: IFFALSE 9972
// sSlow := true ;
9964: LD_ADDR_EXP 52
9968: PUSH
9969: LD_INT 1
9971: ST_TO_ADDR
// if p3 = 18 then
9972: LD_VAR 0 3
9976: PUSH
9977: LD_INT 18
9979: EQUAL
9980: IFFALSE 9990
// sLack := true ;
9982: LD_ADDR_EXP 53
9986: PUSH
9987: LD_INT 1
9989: ST_TO_ADDR
// if p3 = 19 then
9990: LD_VAR 0 3
9994: PUSH
9995: LD_INT 19
9997: EQUAL
9998: IFFALSE 10008
// sTank := true ;
10000: LD_ADDR_EXP 55
10004: PUSH
10005: LD_INT 1
10007: ST_TO_ADDR
// if p3 = 20 then
10008: LD_VAR 0 3
10012: PUSH
10013: LD_INT 20
10015: EQUAL
10016: IFFALSE 10026
// sRemote := true ;
10018: LD_ADDR_EXP 56
10022: PUSH
10023: LD_INT 1
10025: ST_TO_ADDR
// if p3 = 21 then
10026: LD_VAR 0 3
10030: PUSH
10031: LD_INT 21
10033: EQUAL
10034: IFFALSE 10044
// sPowell := true ;
10036: LD_ADDR_EXP 57
10040: PUSH
10041: LD_INT 1
10043: ST_TO_ADDR
// if p3 = 22 then
10044: LD_VAR 0 3
10048: PUSH
10049: LD_INT 22
10051: EQUAL
10052: IFFALSE 10062
// sTeleport := true ;
10054: LD_ADDR_EXP 60
10058: PUSH
10059: LD_INT 1
10061: ST_TO_ADDR
// if p3 = 23 then
10062: LD_VAR 0 3
10066: PUSH
10067: LD_INT 23
10069: EQUAL
10070: IFFALSE 10080
// sOilTower := true ;
10072: LD_ADDR_EXP 62
10076: PUSH
10077: LD_INT 1
10079: ST_TO_ADDR
// if p3 = 24 then
10080: LD_VAR 0 3
10084: PUSH
10085: LD_INT 24
10087: EQUAL
10088: IFFALSE 10098
// sShovel := true ;
10090: LD_ADDR_EXP 63
10094: PUSH
10095: LD_INT 1
10097: ST_TO_ADDR
// if p3 = 25 then
10098: LD_VAR 0 3
10102: PUSH
10103: LD_INT 25
10105: EQUAL
10106: IFFALSE 10116
// sSheik := true ;
10108: LD_ADDR_EXP 64
10112: PUSH
10113: LD_INT 1
10115: ST_TO_ADDR
// if p3 = 26 then
10116: LD_VAR 0 3
10120: PUSH
10121: LD_INT 26
10123: EQUAL
10124: IFFALSE 10134
// sEarthquake := true ;
10126: LD_ADDR_EXP 66
10130: PUSH
10131: LD_INT 1
10133: ST_TO_ADDR
// if p3 = 27 then
10134: LD_VAR 0 3
10138: PUSH
10139: LD_INT 27
10141: EQUAL
10142: IFFALSE 10152
// sAI := true ;
10144: LD_ADDR_EXP 67
10148: PUSH
10149: LD_INT 1
10151: ST_TO_ADDR
// if p3 = 28 then
10152: LD_VAR 0 3
10156: PUSH
10157: LD_INT 28
10159: EQUAL
10160: IFFALSE 10170
// sCargo := true ;
10162: LD_ADDR_EXP 70
10166: PUSH
10167: LD_INT 1
10169: ST_TO_ADDR
// if p3 = 29 then
10170: LD_VAR 0 3
10174: PUSH
10175: LD_INT 29
10177: EQUAL
10178: IFFALSE 10188
// sDLaser := true ;
10180: LD_ADDR_EXP 71
10184: PUSH
10185: LD_INT 1
10187: ST_TO_ADDR
// if p3 = 30 then
10188: LD_VAR 0 3
10192: PUSH
10193: LD_INT 30
10195: EQUAL
10196: IFFALSE 10206
// sExchange := true ;
10198: LD_ADDR_EXP 72
10202: PUSH
10203: LD_INT 1
10205: ST_TO_ADDR
// if p3 = 31 then
10206: LD_VAR 0 3
10210: PUSH
10211: LD_INT 31
10213: EQUAL
10214: IFFALSE 10224
// sFac := true ;
10216: LD_ADDR_EXP 73
10220: PUSH
10221: LD_INT 1
10223: ST_TO_ADDR
// if p3 = 32 then
10224: LD_VAR 0 3
10228: PUSH
10229: LD_INT 32
10231: EQUAL
10232: IFFALSE 10242
// sPower := true ;
10234: LD_ADDR_EXP 74
10238: PUSH
10239: LD_INT 1
10241: ST_TO_ADDR
// if p3 = 33 then
10242: LD_VAR 0 3
10246: PUSH
10247: LD_INT 33
10249: EQUAL
10250: IFFALSE 10260
// sRandom := true ;
10252: LD_ADDR_EXP 75
10256: PUSH
10257: LD_INT 1
10259: ST_TO_ADDR
// if p3 = 34 then
10260: LD_VAR 0 3
10264: PUSH
10265: LD_INT 34
10267: EQUAL
10268: IFFALSE 10278
// sShield := true ;
10270: LD_ADDR_EXP 76
10274: PUSH
10275: LD_INT 1
10277: ST_TO_ADDR
// if p3 = 35 then
10278: LD_VAR 0 3
10282: PUSH
10283: LD_INT 35
10285: EQUAL
10286: IFFALSE 10296
// sTime := true ;
10288: LD_ADDR_EXP 77
10292: PUSH
10293: LD_INT 1
10295: ST_TO_ADDR
// if p3 = 36 then
10296: LD_VAR 0 3
10300: PUSH
10301: LD_INT 36
10303: EQUAL
10304: IFFALSE 10314
// sTools := true ;
10306: LD_ADDR_EXP 78
10310: PUSH
10311: LD_INT 1
10313: ST_TO_ADDR
// if p3 = 101 then
10314: LD_VAR 0 3
10318: PUSH
10319: LD_INT 101
10321: EQUAL
10322: IFFALSE 10332
// sSold := true ;
10324: LD_ADDR_EXP 43
10328: PUSH
10329: LD_INT 1
10331: ST_TO_ADDR
// if p3 = 102 then
10332: LD_VAR 0 3
10336: PUSH
10337: LD_INT 102
10339: EQUAL
10340: IFFALSE 10350
// sDiff := true ;
10342: LD_ADDR_EXP 44
10346: PUSH
10347: LD_INT 1
10349: ST_TO_ADDR
// if p3 = 103 then
10350: LD_VAR 0 3
10354: PUSH
10355: LD_INT 103
10357: EQUAL
10358: IFFALSE 10368
// sFog := true ;
10360: LD_ADDR_EXP 47
10364: PUSH
10365: LD_INT 1
10367: ST_TO_ADDR
// if p3 = 104 then
10368: LD_VAR 0 3
10372: PUSH
10373: LD_INT 104
10375: EQUAL
10376: IFFALSE 10386
// sReset := true ;
10378: LD_ADDR_EXP 48
10382: PUSH
10383: LD_INT 1
10385: ST_TO_ADDR
// if p3 = 105 then
10386: LD_VAR 0 3
10390: PUSH
10391: LD_INT 105
10393: EQUAL
10394: IFFALSE 10404
// sSun := true ;
10396: LD_ADDR_EXP 49
10400: PUSH
10401: LD_INT 1
10403: ST_TO_ADDR
// if p3 = 106 then
10404: LD_VAR 0 3
10408: PUSH
10409: LD_INT 106
10411: EQUAL
10412: IFFALSE 10422
// sTiger := true ;
10414: LD_ADDR_EXP 45
10418: PUSH
10419: LD_INT 1
10421: ST_TO_ADDR
// if p3 = 107 then
10422: LD_VAR 0 3
10426: PUSH
10427: LD_INT 107
10429: EQUAL
10430: IFFALSE 10440
// sBomb := true ;
10432: LD_ADDR_EXP 46
10436: PUSH
10437: LD_INT 1
10439: ST_TO_ADDR
// if p3 = 108 then
10440: LD_VAR 0 3
10444: PUSH
10445: LD_INT 108
10447: EQUAL
10448: IFFALSE 10458
// sWound := true ;
10450: LD_ADDR_EXP 54
10454: PUSH
10455: LD_INT 1
10457: ST_TO_ADDR
// if p3 = 109 then
10458: LD_VAR 0 3
10462: PUSH
10463: LD_INT 109
10465: EQUAL
10466: IFFALSE 10476
// sBetray := true ;
10468: LD_ADDR_EXP 58
10472: PUSH
10473: LD_INT 1
10475: ST_TO_ADDR
// if p3 = 110 then
10476: LD_VAR 0 3
10480: PUSH
10481: LD_INT 110
10483: EQUAL
10484: IFFALSE 10494
// sContamin := true ;
10486: LD_ADDR_EXP 59
10490: PUSH
10491: LD_INT 1
10493: ST_TO_ADDR
// if p3 = 111 then
10494: LD_VAR 0 3
10498: PUSH
10499: LD_INT 111
10501: EQUAL
10502: IFFALSE 10512
// sOil := true ;
10504: LD_ADDR_EXP 61
10508: PUSH
10509: LD_INT 1
10511: ST_TO_ADDR
// if p3 = 112 then
10512: LD_VAR 0 3
10516: PUSH
10517: LD_INT 112
10519: EQUAL
10520: IFFALSE 10530
// sStu := true ;
10522: LD_ADDR_EXP 65
10526: PUSH
10527: LD_INT 1
10529: ST_TO_ADDR
// if p3 = 113 then
10530: LD_VAR 0 3
10534: PUSH
10535: LD_INT 113
10537: EQUAL
10538: IFFALSE 10548
// sBazooka := true ;
10540: LD_ADDR_EXP 68
10544: PUSH
10545: LD_INT 1
10547: ST_TO_ADDR
// if p3 = 114 then
10548: LD_VAR 0 3
10552: PUSH
10553: LD_INT 114
10555: EQUAL
10556: IFFALSE 10566
// sMortar := true ;
10558: LD_ADDR_EXP 69
10562: PUSH
10563: LD_INT 1
10565: ST_TO_ADDR
// if p3 = 115 then
10566: LD_VAR 0 3
10570: PUSH
10571: LD_INT 115
10573: EQUAL
10574: IFFALSE 10584
// sRanger := true ;
10576: LD_ADDR_EXP 79
10580: PUSH
10581: LD_INT 1
10583: ST_TO_ADDR
// if p3 = 116 then
10584: LD_VAR 0 3
10588: PUSH
10589: LD_INT 116
10591: EQUAL
10592: IFFALSE 10602
// sComputer := true ;
10594: LD_ADDR_EXP 80
10598: PUSH
10599: LD_INT 1
10601: ST_TO_ADDR
// if p3 = 117 then
10602: LD_VAR 0 3
10606: PUSH
10607: LD_INT 117
10609: EQUAL
10610: IFFALSE 10620
// s30 := true ;
10612: LD_ADDR_EXP 81
10616: PUSH
10617: LD_INT 1
10619: ST_TO_ADDR
// if p3 = 118 then
10620: LD_VAR 0 3
10624: PUSH
10625: LD_INT 118
10627: EQUAL
10628: IFFALSE 10638
// s60 := true ;
10630: LD_ADDR_EXP 82
10634: PUSH
10635: LD_INT 1
10637: ST_TO_ADDR
// end ; if p2 = hack_mode then
10638: LD_VAR 0 2
10642: PUSH
10643: LD_INT 101
10645: EQUAL
10646: IFFALSE 10774
// begin case p3 of 1 :
10648: LD_VAR 0 3
10652: PUSH
10653: LD_INT 1
10655: DOUBLE
10656: EQUAL
10657: IFTRUE 10661
10659: GO 10668
10661: POP
// hHackUnlimitedResources ; 2 :
10662: CALL 22921 0 0
10666: GO 10774
10668: LD_INT 2
10670: DOUBLE
10671: EQUAL
10672: IFTRUE 10676
10674: GO 10683
10676: POP
// hHackSetLevel10 ; 3 :
10677: CALL 23054 0 0
10681: GO 10774
10683: LD_INT 3
10685: DOUBLE
10686: EQUAL
10687: IFTRUE 10691
10689: GO 10698
10691: POP
// hHackSetLevel10YourUnits ; 4 :
10692: CALL 23139 0 0
10696: GO 10774
10698: LD_INT 4
10700: DOUBLE
10701: EQUAL
10702: IFTRUE 10706
10704: GO 10713
10706: POP
// hHackInvincible ; 5 :
10707: CALL 23587 0 0
10711: GO 10774
10713: LD_INT 5
10715: DOUBLE
10716: EQUAL
10717: IFTRUE 10721
10719: GO 10728
10721: POP
// hHackInvisible ; 6 :
10722: CALL 23698 0 0
10726: GO 10774
10728: LD_INT 6
10730: DOUBLE
10731: EQUAL
10732: IFTRUE 10736
10734: GO 10743
10736: POP
// hHackChangeYourSide ; 7 :
10737: CALL 23755 0 0
10741: GO 10774
10743: LD_INT 7
10745: DOUBLE
10746: EQUAL
10747: IFTRUE 10751
10749: GO 10758
10751: POP
// hHackChangeUnitSide ; 8 :
10752: CALL 23797 0 0
10756: GO 10774
10758: LD_INT 8
10760: DOUBLE
10761: EQUAL
10762: IFTRUE 10766
10764: GO 10773
10766: POP
// hHackFog ; end ;
10767: CALL 23898 0 0
10771: GO 10774
10773: POP
// end ; if p2 = game_save_mode then
10774: LD_VAR 0 2
10778: PUSH
10779: LD_INT 102
10781: EQUAL
10782: IFFALSE 10837
// begin if p3 = 1 then
10784: LD_VAR 0 3
10788: PUSH
10789: LD_INT 1
10791: EQUAL
10792: IFFALSE 10804
// globalGameSaveCounter := p4 ;
10794: LD_ADDR_EXP 25
10798: PUSH
10799: LD_VAR 0 4
10803: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
10804: LD_VAR 0 3
10808: PUSH
10809: LD_INT 2
10811: EQUAL
10812: PUSH
10813: LD_EXP 25
10817: AND
10818: IFFALSE 10837
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10820: LD_STRING setGameSaveCounter(
10822: PUSH
10823: LD_EXP 25
10827: STR
10828: PUSH
10829: LD_STRING )
10831: STR
10832: PPUSH
10833: CALL_OW 559
// end ; end ;
10837: LD_VAR 0 7
10841: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
10842: LD_INT 0
10844: PPUSH
// streamModeActive := false ;
10845: LD_ADDR_EXP 26
10849: PUSH
10850: LD_INT 0
10852: ST_TO_ADDR
// normalCounter := 36 ;
10853: LD_ADDR_EXP 27
10857: PUSH
10858: LD_INT 36
10860: ST_TO_ADDR
// hardcoreCounter := 18 ;
10861: LD_ADDR_EXP 28
10865: PUSH
10866: LD_INT 18
10868: ST_TO_ADDR
// sRocket := false ;
10869: LD_ADDR_EXP 31
10873: PUSH
10874: LD_INT 0
10876: ST_TO_ADDR
// sSpeed := false ;
10877: LD_ADDR_EXP 30
10881: PUSH
10882: LD_INT 0
10884: ST_TO_ADDR
// sEngine := false ;
10885: LD_ADDR_EXP 32
10889: PUSH
10890: LD_INT 0
10892: ST_TO_ADDR
// sSpec := false ;
10893: LD_ADDR_EXP 29
10897: PUSH
10898: LD_INT 0
10900: ST_TO_ADDR
// sLevel := false ;
10901: LD_ADDR_EXP 33
10905: PUSH
10906: LD_INT 0
10908: ST_TO_ADDR
// sArmoury := false ;
10909: LD_ADDR_EXP 34
10913: PUSH
10914: LD_INT 0
10916: ST_TO_ADDR
// sRadar := false ;
10917: LD_ADDR_EXP 35
10921: PUSH
10922: LD_INT 0
10924: ST_TO_ADDR
// sBunker := false ;
10925: LD_ADDR_EXP 36
10929: PUSH
10930: LD_INT 0
10932: ST_TO_ADDR
// sHack := false ;
10933: LD_ADDR_EXP 37
10937: PUSH
10938: LD_INT 0
10940: ST_TO_ADDR
// sFire := false ;
10941: LD_ADDR_EXP 38
10945: PUSH
10946: LD_INT 0
10948: ST_TO_ADDR
// sRefresh := false ;
10949: LD_ADDR_EXP 39
10953: PUSH
10954: LD_INT 0
10956: ST_TO_ADDR
// sExp := false ;
10957: LD_ADDR_EXP 40
10961: PUSH
10962: LD_INT 0
10964: ST_TO_ADDR
// sDepot := false ;
10965: LD_ADDR_EXP 41
10969: PUSH
10970: LD_INT 0
10972: ST_TO_ADDR
// sFlag := false ;
10973: LD_ADDR_EXP 42
10977: PUSH
10978: LD_INT 0
10980: ST_TO_ADDR
// sKamikadze := false ;
10981: LD_ADDR_EXP 50
10985: PUSH
10986: LD_INT 0
10988: ST_TO_ADDR
// sTroll := false ;
10989: LD_ADDR_EXP 51
10993: PUSH
10994: LD_INT 0
10996: ST_TO_ADDR
// sSlow := false ;
10997: LD_ADDR_EXP 52
11001: PUSH
11002: LD_INT 0
11004: ST_TO_ADDR
// sLack := false ;
11005: LD_ADDR_EXP 53
11009: PUSH
11010: LD_INT 0
11012: ST_TO_ADDR
// sTank := false ;
11013: LD_ADDR_EXP 55
11017: PUSH
11018: LD_INT 0
11020: ST_TO_ADDR
// sRemote := false ;
11021: LD_ADDR_EXP 56
11025: PUSH
11026: LD_INT 0
11028: ST_TO_ADDR
// sPowell := false ;
11029: LD_ADDR_EXP 57
11033: PUSH
11034: LD_INT 0
11036: ST_TO_ADDR
// sTeleport := false ;
11037: LD_ADDR_EXP 60
11041: PUSH
11042: LD_INT 0
11044: ST_TO_ADDR
// sOilTower := false ;
11045: LD_ADDR_EXP 62
11049: PUSH
11050: LD_INT 0
11052: ST_TO_ADDR
// sShovel := false ;
11053: LD_ADDR_EXP 63
11057: PUSH
11058: LD_INT 0
11060: ST_TO_ADDR
// sSheik := false ;
11061: LD_ADDR_EXP 64
11065: PUSH
11066: LD_INT 0
11068: ST_TO_ADDR
// sEarthquake := false ;
11069: LD_ADDR_EXP 66
11073: PUSH
11074: LD_INT 0
11076: ST_TO_ADDR
// sAI := false ;
11077: LD_ADDR_EXP 67
11081: PUSH
11082: LD_INT 0
11084: ST_TO_ADDR
// sCargo := false ;
11085: LD_ADDR_EXP 70
11089: PUSH
11090: LD_INT 0
11092: ST_TO_ADDR
// sDLaser := false ;
11093: LD_ADDR_EXP 71
11097: PUSH
11098: LD_INT 0
11100: ST_TO_ADDR
// sExchange := false ;
11101: LD_ADDR_EXP 72
11105: PUSH
11106: LD_INT 0
11108: ST_TO_ADDR
// sFac := false ;
11109: LD_ADDR_EXP 73
11113: PUSH
11114: LD_INT 0
11116: ST_TO_ADDR
// sPower := false ;
11117: LD_ADDR_EXP 74
11121: PUSH
11122: LD_INT 0
11124: ST_TO_ADDR
// sRandom := false ;
11125: LD_ADDR_EXP 75
11129: PUSH
11130: LD_INT 0
11132: ST_TO_ADDR
// sShield := false ;
11133: LD_ADDR_EXP 76
11137: PUSH
11138: LD_INT 0
11140: ST_TO_ADDR
// sTime := false ;
11141: LD_ADDR_EXP 77
11145: PUSH
11146: LD_INT 0
11148: ST_TO_ADDR
// sTools := false ;
11149: LD_ADDR_EXP 78
11153: PUSH
11154: LD_INT 0
11156: ST_TO_ADDR
// sSold := false ;
11157: LD_ADDR_EXP 43
11161: PUSH
11162: LD_INT 0
11164: ST_TO_ADDR
// sDiff := false ;
11165: LD_ADDR_EXP 44
11169: PUSH
11170: LD_INT 0
11172: ST_TO_ADDR
// sFog := false ;
11173: LD_ADDR_EXP 47
11177: PUSH
11178: LD_INT 0
11180: ST_TO_ADDR
// sReset := false ;
11181: LD_ADDR_EXP 48
11185: PUSH
11186: LD_INT 0
11188: ST_TO_ADDR
// sSun := false ;
11189: LD_ADDR_EXP 49
11193: PUSH
11194: LD_INT 0
11196: ST_TO_ADDR
// sTiger := false ;
11197: LD_ADDR_EXP 45
11201: PUSH
11202: LD_INT 0
11204: ST_TO_ADDR
// sBomb := false ;
11205: LD_ADDR_EXP 46
11209: PUSH
11210: LD_INT 0
11212: ST_TO_ADDR
// sWound := false ;
11213: LD_ADDR_EXP 54
11217: PUSH
11218: LD_INT 0
11220: ST_TO_ADDR
// sBetray := false ;
11221: LD_ADDR_EXP 58
11225: PUSH
11226: LD_INT 0
11228: ST_TO_ADDR
// sContamin := false ;
11229: LD_ADDR_EXP 59
11233: PUSH
11234: LD_INT 0
11236: ST_TO_ADDR
// sOil := false ;
11237: LD_ADDR_EXP 61
11241: PUSH
11242: LD_INT 0
11244: ST_TO_ADDR
// sStu := false ;
11245: LD_ADDR_EXP 65
11249: PUSH
11250: LD_INT 0
11252: ST_TO_ADDR
// sBazooka := false ;
11253: LD_ADDR_EXP 68
11257: PUSH
11258: LD_INT 0
11260: ST_TO_ADDR
// sMortar := false ;
11261: LD_ADDR_EXP 69
11265: PUSH
11266: LD_INT 0
11268: ST_TO_ADDR
// sRanger := false ;
11269: LD_ADDR_EXP 79
11273: PUSH
11274: LD_INT 0
11276: ST_TO_ADDR
// sComputer := false ;
11277: LD_ADDR_EXP 80
11281: PUSH
11282: LD_INT 0
11284: ST_TO_ADDR
// s30 := false ;
11285: LD_ADDR_EXP 81
11289: PUSH
11290: LD_INT 0
11292: ST_TO_ADDR
// s60 := false ;
11293: LD_ADDR_EXP 82
11297: PUSH
11298: LD_INT 0
11300: ST_TO_ADDR
// end ;
11301: LD_VAR 0 1
11305: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
11306: LD_INT 0
11308: PPUSH
11309: PPUSH
11310: PPUSH
11311: PPUSH
11312: PPUSH
11313: PPUSH
11314: PPUSH
// result := [ ] ;
11315: LD_ADDR_VAR 0 2
11319: PUSH
11320: EMPTY
11321: ST_TO_ADDR
// if campaign_id = 1 then
11322: LD_OWVAR 69
11326: PUSH
11327: LD_INT 1
11329: EQUAL
11330: IFFALSE 14496
// begin case mission_number of 1 :
11332: LD_OWVAR 70
11336: PUSH
11337: LD_INT 1
11339: DOUBLE
11340: EQUAL
11341: IFTRUE 11345
11343: GO 11421
11345: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
11346: LD_ADDR_VAR 0 2
11350: PUSH
11351: LD_INT 2
11353: PUSH
11354: LD_INT 4
11356: PUSH
11357: LD_INT 11
11359: PUSH
11360: LD_INT 12
11362: PUSH
11363: LD_INT 15
11365: PUSH
11366: LD_INT 16
11368: PUSH
11369: LD_INT 22
11371: PUSH
11372: LD_INT 23
11374: PUSH
11375: LD_INT 26
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: LIST
11385: LIST
11386: LIST
11387: LIST
11388: PUSH
11389: LD_INT 101
11391: PUSH
11392: LD_INT 102
11394: PUSH
11395: LD_INT 106
11397: PUSH
11398: LD_INT 116
11400: PUSH
11401: LD_INT 117
11403: PUSH
11404: LD_INT 118
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: ST_TO_ADDR
11419: GO 14494
11421: LD_INT 2
11423: DOUBLE
11424: EQUAL
11425: IFTRUE 11429
11427: GO 11513
11429: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
11430: LD_ADDR_VAR 0 2
11434: PUSH
11435: LD_INT 2
11437: PUSH
11438: LD_INT 4
11440: PUSH
11441: LD_INT 11
11443: PUSH
11444: LD_INT 12
11446: PUSH
11447: LD_INT 15
11449: PUSH
11450: LD_INT 16
11452: PUSH
11453: LD_INT 22
11455: PUSH
11456: LD_INT 23
11458: PUSH
11459: LD_INT 26
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: PUSH
11473: LD_INT 101
11475: PUSH
11476: LD_INT 102
11478: PUSH
11479: LD_INT 105
11481: PUSH
11482: LD_INT 106
11484: PUSH
11485: LD_INT 108
11487: PUSH
11488: LD_INT 116
11490: PUSH
11491: LD_INT 117
11493: PUSH
11494: LD_INT 118
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: ST_TO_ADDR
11511: GO 14494
11513: LD_INT 3
11515: DOUBLE
11516: EQUAL
11517: IFTRUE 11521
11519: GO 11609
11521: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
11522: LD_ADDR_VAR 0 2
11526: PUSH
11527: LD_INT 2
11529: PUSH
11530: LD_INT 4
11532: PUSH
11533: LD_INT 5
11535: PUSH
11536: LD_INT 11
11538: PUSH
11539: LD_INT 12
11541: PUSH
11542: LD_INT 15
11544: PUSH
11545: LD_INT 16
11547: PUSH
11548: LD_INT 22
11550: PUSH
11551: LD_INT 26
11553: PUSH
11554: LD_INT 36
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: PUSH
11569: LD_INT 101
11571: PUSH
11572: LD_INT 102
11574: PUSH
11575: LD_INT 105
11577: PUSH
11578: LD_INT 106
11580: PUSH
11581: LD_INT 108
11583: PUSH
11584: LD_INT 116
11586: PUSH
11587: LD_INT 117
11589: PUSH
11590: LD_INT 118
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: ST_TO_ADDR
11607: GO 14494
11609: LD_INT 4
11611: DOUBLE
11612: EQUAL
11613: IFTRUE 11617
11615: GO 11713
11617: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
11618: LD_ADDR_VAR 0 2
11622: PUSH
11623: LD_INT 2
11625: PUSH
11626: LD_INT 4
11628: PUSH
11629: LD_INT 5
11631: PUSH
11632: LD_INT 8
11634: PUSH
11635: LD_INT 11
11637: PUSH
11638: LD_INT 12
11640: PUSH
11641: LD_INT 15
11643: PUSH
11644: LD_INT 16
11646: PUSH
11647: LD_INT 22
11649: PUSH
11650: LD_INT 23
11652: PUSH
11653: LD_INT 26
11655: PUSH
11656: LD_INT 36
11658: PUSH
11659: EMPTY
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: PUSH
11673: LD_INT 101
11675: PUSH
11676: LD_INT 102
11678: PUSH
11679: LD_INT 105
11681: PUSH
11682: LD_INT 106
11684: PUSH
11685: LD_INT 108
11687: PUSH
11688: LD_INT 116
11690: PUSH
11691: LD_INT 117
11693: PUSH
11694: LD_INT 118
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: ST_TO_ADDR
11711: GO 14494
11713: LD_INT 5
11715: DOUBLE
11716: EQUAL
11717: IFTRUE 11721
11719: GO 11833
11721: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
11722: LD_ADDR_VAR 0 2
11726: PUSH
11727: LD_INT 2
11729: PUSH
11730: LD_INT 4
11732: PUSH
11733: LD_INT 5
11735: PUSH
11736: LD_INT 6
11738: PUSH
11739: LD_INT 8
11741: PUSH
11742: LD_INT 11
11744: PUSH
11745: LD_INT 12
11747: PUSH
11748: LD_INT 15
11750: PUSH
11751: LD_INT 16
11753: PUSH
11754: LD_INT 22
11756: PUSH
11757: LD_INT 23
11759: PUSH
11760: LD_INT 25
11762: PUSH
11763: LD_INT 26
11765: PUSH
11766: LD_INT 36
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: PUSH
11785: LD_INT 101
11787: PUSH
11788: LD_INT 102
11790: PUSH
11791: LD_INT 105
11793: PUSH
11794: LD_INT 106
11796: PUSH
11797: LD_INT 108
11799: PUSH
11800: LD_INT 109
11802: PUSH
11803: LD_INT 112
11805: PUSH
11806: LD_INT 116
11808: PUSH
11809: LD_INT 117
11811: PUSH
11812: LD_INT 118
11814: PUSH
11815: EMPTY
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: ST_TO_ADDR
11831: GO 14494
11833: LD_INT 6
11835: DOUBLE
11836: EQUAL
11837: IFTRUE 11841
11839: GO 11973
11841: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
11842: LD_ADDR_VAR 0 2
11846: PUSH
11847: LD_INT 2
11849: PUSH
11850: LD_INT 4
11852: PUSH
11853: LD_INT 5
11855: PUSH
11856: LD_INT 6
11858: PUSH
11859: LD_INT 8
11861: PUSH
11862: LD_INT 11
11864: PUSH
11865: LD_INT 12
11867: PUSH
11868: LD_INT 15
11870: PUSH
11871: LD_INT 16
11873: PUSH
11874: LD_INT 20
11876: PUSH
11877: LD_INT 21
11879: PUSH
11880: LD_INT 22
11882: PUSH
11883: LD_INT 23
11885: PUSH
11886: LD_INT 25
11888: PUSH
11889: LD_INT 26
11891: PUSH
11892: LD_INT 30
11894: PUSH
11895: LD_INT 31
11897: PUSH
11898: LD_INT 32
11900: PUSH
11901: LD_INT 36
11903: PUSH
11904: EMPTY
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: PUSH
11925: LD_INT 101
11927: PUSH
11928: LD_INT 102
11930: PUSH
11931: LD_INT 105
11933: PUSH
11934: LD_INT 106
11936: PUSH
11937: LD_INT 108
11939: PUSH
11940: LD_INT 109
11942: PUSH
11943: LD_INT 112
11945: PUSH
11946: LD_INT 116
11948: PUSH
11949: LD_INT 117
11951: PUSH
11952: LD_INT 118
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: PUSH
11967: EMPTY
11968: LIST
11969: LIST
11970: ST_TO_ADDR
11971: GO 14494
11973: LD_INT 7
11975: DOUBLE
11976: EQUAL
11977: IFTRUE 11981
11979: GO 12093
11981: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
11982: LD_ADDR_VAR 0 2
11986: PUSH
11987: LD_INT 2
11989: PUSH
11990: LD_INT 4
11992: PUSH
11993: LD_INT 5
11995: PUSH
11996: LD_INT 7
11998: PUSH
11999: LD_INT 11
12001: PUSH
12002: LD_INT 12
12004: PUSH
12005: LD_INT 15
12007: PUSH
12008: LD_INT 16
12010: PUSH
12011: LD_INT 20
12013: PUSH
12014: LD_INT 21
12016: PUSH
12017: LD_INT 22
12019: PUSH
12020: LD_INT 23
12022: PUSH
12023: LD_INT 25
12025: PUSH
12026: LD_INT 26
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: PUSH
12045: LD_INT 101
12047: PUSH
12048: LD_INT 102
12050: PUSH
12051: LD_INT 103
12053: PUSH
12054: LD_INT 105
12056: PUSH
12057: LD_INT 106
12059: PUSH
12060: LD_INT 108
12062: PUSH
12063: LD_INT 112
12065: PUSH
12066: LD_INT 116
12068: PUSH
12069: LD_INT 117
12071: PUSH
12072: LD_INT 118
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: ST_TO_ADDR
12091: GO 14494
12093: LD_INT 8
12095: DOUBLE
12096: EQUAL
12097: IFTRUE 12101
12099: GO 12241
12101: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12102: LD_ADDR_VAR 0 2
12106: PUSH
12107: LD_INT 2
12109: PUSH
12110: LD_INT 4
12112: PUSH
12113: LD_INT 5
12115: PUSH
12116: LD_INT 6
12118: PUSH
12119: LD_INT 7
12121: PUSH
12122: LD_INT 8
12124: PUSH
12125: LD_INT 11
12127: PUSH
12128: LD_INT 12
12130: PUSH
12131: LD_INT 15
12133: PUSH
12134: LD_INT 16
12136: PUSH
12137: LD_INT 20
12139: PUSH
12140: LD_INT 21
12142: PUSH
12143: LD_INT 22
12145: PUSH
12146: LD_INT 23
12148: PUSH
12149: LD_INT 25
12151: PUSH
12152: LD_INT 26
12154: PUSH
12155: LD_INT 30
12157: PUSH
12158: LD_INT 31
12160: PUSH
12161: LD_INT 32
12163: PUSH
12164: LD_INT 36
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: PUSH
12189: LD_INT 101
12191: PUSH
12192: LD_INT 102
12194: PUSH
12195: LD_INT 103
12197: PUSH
12198: LD_INT 105
12200: PUSH
12201: LD_INT 106
12203: PUSH
12204: LD_INT 108
12206: PUSH
12207: LD_INT 109
12209: PUSH
12210: LD_INT 112
12212: PUSH
12213: LD_INT 116
12215: PUSH
12216: LD_INT 117
12218: PUSH
12219: LD_INT 118
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: PUSH
12235: EMPTY
12236: LIST
12237: LIST
12238: ST_TO_ADDR
12239: GO 14494
12241: LD_INT 9
12243: DOUBLE
12244: EQUAL
12245: IFTRUE 12249
12247: GO 12397
12249: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
12250: LD_ADDR_VAR 0 2
12254: PUSH
12255: LD_INT 2
12257: PUSH
12258: LD_INT 4
12260: PUSH
12261: LD_INT 5
12263: PUSH
12264: LD_INT 6
12266: PUSH
12267: LD_INT 7
12269: PUSH
12270: LD_INT 8
12272: PUSH
12273: LD_INT 11
12275: PUSH
12276: LD_INT 12
12278: PUSH
12279: LD_INT 15
12281: PUSH
12282: LD_INT 16
12284: PUSH
12285: LD_INT 20
12287: PUSH
12288: LD_INT 21
12290: PUSH
12291: LD_INT 22
12293: PUSH
12294: LD_INT 23
12296: PUSH
12297: LD_INT 25
12299: PUSH
12300: LD_INT 26
12302: PUSH
12303: LD_INT 28
12305: PUSH
12306: LD_INT 30
12308: PUSH
12309: LD_INT 31
12311: PUSH
12312: LD_INT 32
12314: PUSH
12315: LD_INT 36
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: PUSH
12341: LD_INT 101
12343: PUSH
12344: LD_INT 102
12346: PUSH
12347: LD_INT 103
12349: PUSH
12350: LD_INT 105
12352: PUSH
12353: LD_INT 106
12355: PUSH
12356: LD_INT 108
12358: PUSH
12359: LD_INT 109
12361: PUSH
12362: LD_INT 112
12364: PUSH
12365: LD_INT 114
12367: PUSH
12368: LD_INT 116
12370: PUSH
12371: LD_INT 117
12373: PUSH
12374: LD_INT 118
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: PUSH
12391: EMPTY
12392: LIST
12393: LIST
12394: ST_TO_ADDR
12395: GO 14494
12397: LD_INT 10
12399: DOUBLE
12400: EQUAL
12401: IFTRUE 12405
12403: GO 12601
12405: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
12406: LD_ADDR_VAR 0 2
12410: PUSH
12411: LD_INT 2
12413: PUSH
12414: LD_INT 4
12416: PUSH
12417: LD_INT 5
12419: PUSH
12420: LD_INT 6
12422: PUSH
12423: LD_INT 7
12425: PUSH
12426: LD_INT 8
12428: PUSH
12429: LD_INT 9
12431: PUSH
12432: LD_INT 10
12434: PUSH
12435: LD_INT 11
12437: PUSH
12438: LD_INT 12
12440: PUSH
12441: LD_INT 13
12443: PUSH
12444: LD_INT 14
12446: PUSH
12447: LD_INT 15
12449: PUSH
12450: LD_INT 16
12452: PUSH
12453: LD_INT 17
12455: PUSH
12456: LD_INT 18
12458: PUSH
12459: LD_INT 19
12461: PUSH
12462: LD_INT 20
12464: PUSH
12465: LD_INT 21
12467: PUSH
12468: LD_INT 22
12470: PUSH
12471: LD_INT 23
12473: PUSH
12474: LD_INT 24
12476: PUSH
12477: LD_INT 25
12479: PUSH
12480: LD_INT 26
12482: PUSH
12483: LD_INT 28
12485: PUSH
12486: LD_INT 30
12488: PUSH
12489: LD_INT 31
12491: PUSH
12492: LD_INT 32
12494: PUSH
12495: LD_INT 36
12497: PUSH
12498: EMPTY
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: PUSH
12529: LD_INT 101
12531: PUSH
12532: LD_INT 102
12534: PUSH
12535: LD_INT 103
12537: PUSH
12538: LD_INT 104
12540: PUSH
12541: LD_INT 105
12543: PUSH
12544: LD_INT 106
12546: PUSH
12547: LD_INT 107
12549: PUSH
12550: LD_INT 108
12552: PUSH
12553: LD_INT 109
12555: PUSH
12556: LD_INT 110
12558: PUSH
12559: LD_INT 111
12561: PUSH
12562: LD_INT 112
12564: PUSH
12565: LD_INT 114
12567: PUSH
12568: LD_INT 116
12570: PUSH
12571: LD_INT 117
12573: PUSH
12574: LD_INT 118
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: ST_TO_ADDR
12599: GO 14494
12601: LD_INT 11
12603: DOUBLE
12604: EQUAL
12605: IFTRUE 12609
12607: GO 12813
12609: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
12610: LD_ADDR_VAR 0 2
12614: PUSH
12615: LD_INT 2
12617: PUSH
12618: LD_INT 3
12620: PUSH
12621: LD_INT 4
12623: PUSH
12624: LD_INT 5
12626: PUSH
12627: LD_INT 6
12629: PUSH
12630: LD_INT 7
12632: PUSH
12633: LD_INT 8
12635: PUSH
12636: LD_INT 9
12638: PUSH
12639: LD_INT 10
12641: PUSH
12642: LD_INT 11
12644: PUSH
12645: LD_INT 12
12647: PUSH
12648: LD_INT 13
12650: PUSH
12651: LD_INT 14
12653: PUSH
12654: LD_INT 15
12656: PUSH
12657: LD_INT 16
12659: PUSH
12660: LD_INT 17
12662: PUSH
12663: LD_INT 18
12665: PUSH
12666: LD_INT 19
12668: PUSH
12669: LD_INT 20
12671: PUSH
12672: LD_INT 21
12674: PUSH
12675: LD_INT 22
12677: PUSH
12678: LD_INT 23
12680: PUSH
12681: LD_INT 24
12683: PUSH
12684: LD_INT 25
12686: PUSH
12687: LD_INT 26
12689: PUSH
12690: LD_INT 28
12692: PUSH
12693: LD_INT 30
12695: PUSH
12696: LD_INT 31
12698: PUSH
12699: LD_INT 32
12701: PUSH
12702: LD_INT 34
12704: PUSH
12705: LD_INT 36
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: PUSH
12741: LD_INT 101
12743: PUSH
12744: LD_INT 102
12746: PUSH
12747: LD_INT 103
12749: PUSH
12750: LD_INT 104
12752: PUSH
12753: LD_INT 105
12755: PUSH
12756: LD_INT 106
12758: PUSH
12759: LD_INT 107
12761: PUSH
12762: LD_INT 108
12764: PUSH
12765: LD_INT 109
12767: PUSH
12768: LD_INT 110
12770: PUSH
12771: LD_INT 111
12773: PUSH
12774: LD_INT 112
12776: PUSH
12777: LD_INT 114
12779: PUSH
12780: LD_INT 116
12782: PUSH
12783: LD_INT 117
12785: PUSH
12786: LD_INT 118
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: ST_TO_ADDR
12811: GO 14494
12813: LD_INT 12
12815: DOUBLE
12816: EQUAL
12817: IFTRUE 12821
12819: GO 13041
12821: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
12822: LD_ADDR_VAR 0 2
12826: PUSH
12827: LD_INT 1
12829: PUSH
12830: LD_INT 2
12832: PUSH
12833: LD_INT 3
12835: PUSH
12836: LD_INT 4
12838: PUSH
12839: LD_INT 5
12841: PUSH
12842: LD_INT 6
12844: PUSH
12845: LD_INT 7
12847: PUSH
12848: LD_INT 8
12850: PUSH
12851: LD_INT 9
12853: PUSH
12854: LD_INT 10
12856: PUSH
12857: LD_INT 11
12859: PUSH
12860: LD_INT 12
12862: PUSH
12863: LD_INT 13
12865: PUSH
12866: LD_INT 14
12868: PUSH
12869: LD_INT 15
12871: PUSH
12872: LD_INT 16
12874: PUSH
12875: LD_INT 17
12877: PUSH
12878: LD_INT 18
12880: PUSH
12881: LD_INT 19
12883: PUSH
12884: LD_INT 20
12886: PUSH
12887: LD_INT 21
12889: PUSH
12890: LD_INT 22
12892: PUSH
12893: LD_INT 23
12895: PUSH
12896: LD_INT 24
12898: PUSH
12899: LD_INT 25
12901: PUSH
12902: LD_INT 26
12904: PUSH
12905: LD_INT 27
12907: PUSH
12908: LD_INT 28
12910: PUSH
12911: LD_INT 30
12913: PUSH
12914: LD_INT 31
12916: PUSH
12917: LD_INT 32
12919: PUSH
12920: LD_INT 33
12922: PUSH
12923: LD_INT 34
12925: PUSH
12926: LD_INT 36
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: PUSH
12965: LD_INT 101
12967: PUSH
12968: LD_INT 102
12970: PUSH
12971: LD_INT 103
12973: PUSH
12974: LD_INT 104
12976: PUSH
12977: LD_INT 105
12979: PUSH
12980: LD_INT 106
12982: PUSH
12983: LD_INT 107
12985: PUSH
12986: LD_INT 108
12988: PUSH
12989: LD_INT 109
12991: PUSH
12992: LD_INT 110
12994: PUSH
12995: LD_INT 111
12997: PUSH
12998: LD_INT 112
13000: PUSH
13001: LD_INT 113
13003: PUSH
13004: LD_INT 114
13006: PUSH
13007: LD_INT 116
13009: PUSH
13010: LD_INT 117
13012: PUSH
13013: LD_INT 118
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: PUSH
13035: EMPTY
13036: LIST
13037: LIST
13038: ST_TO_ADDR
13039: GO 14494
13041: LD_INT 13
13043: DOUBLE
13044: EQUAL
13045: IFTRUE 13049
13047: GO 13257
13049: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13050: LD_ADDR_VAR 0 2
13054: PUSH
13055: LD_INT 1
13057: PUSH
13058: LD_INT 2
13060: PUSH
13061: LD_INT 3
13063: PUSH
13064: LD_INT 4
13066: PUSH
13067: LD_INT 5
13069: PUSH
13070: LD_INT 8
13072: PUSH
13073: LD_INT 9
13075: PUSH
13076: LD_INT 10
13078: PUSH
13079: LD_INT 11
13081: PUSH
13082: LD_INT 12
13084: PUSH
13085: LD_INT 14
13087: PUSH
13088: LD_INT 15
13090: PUSH
13091: LD_INT 16
13093: PUSH
13094: LD_INT 17
13096: PUSH
13097: LD_INT 18
13099: PUSH
13100: LD_INT 19
13102: PUSH
13103: LD_INT 20
13105: PUSH
13106: LD_INT 21
13108: PUSH
13109: LD_INT 22
13111: PUSH
13112: LD_INT 23
13114: PUSH
13115: LD_INT 24
13117: PUSH
13118: LD_INT 25
13120: PUSH
13121: LD_INT 26
13123: PUSH
13124: LD_INT 27
13126: PUSH
13127: LD_INT 28
13129: PUSH
13130: LD_INT 30
13132: PUSH
13133: LD_INT 31
13135: PUSH
13136: LD_INT 32
13138: PUSH
13139: LD_INT 33
13141: PUSH
13142: LD_INT 34
13144: PUSH
13145: LD_INT 36
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: PUSH
13181: LD_INT 101
13183: PUSH
13184: LD_INT 102
13186: PUSH
13187: LD_INT 103
13189: PUSH
13190: LD_INT 104
13192: PUSH
13193: LD_INT 105
13195: PUSH
13196: LD_INT 106
13198: PUSH
13199: LD_INT 107
13201: PUSH
13202: LD_INT 108
13204: PUSH
13205: LD_INT 109
13207: PUSH
13208: LD_INT 110
13210: PUSH
13211: LD_INT 111
13213: PUSH
13214: LD_INT 112
13216: PUSH
13217: LD_INT 113
13219: PUSH
13220: LD_INT 114
13222: PUSH
13223: LD_INT 116
13225: PUSH
13226: LD_INT 117
13228: PUSH
13229: LD_INT 118
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: ST_TO_ADDR
13255: GO 14494
13257: LD_INT 14
13259: DOUBLE
13260: EQUAL
13261: IFTRUE 13265
13263: GO 13489
13265: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
13266: LD_ADDR_VAR 0 2
13270: PUSH
13271: LD_INT 1
13273: PUSH
13274: LD_INT 2
13276: PUSH
13277: LD_INT 3
13279: PUSH
13280: LD_INT 4
13282: PUSH
13283: LD_INT 5
13285: PUSH
13286: LD_INT 6
13288: PUSH
13289: LD_INT 7
13291: PUSH
13292: LD_INT 8
13294: PUSH
13295: LD_INT 9
13297: PUSH
13298: LD_INT 10
13300: PUSH
13301: LD_INT 11
13303: PUSH
13304: LD_INT 12
13306: PUSH
13307: LD_INT 13
13309: PUSH
13310: LD_INT 14
13312: PUSH
13313: LD_INT 15
13315: PUSH
13316: LD_INT 16
13318: PUSH
13319: LD_INT 17
13321: PUSH
13322: LD_INT 18
13324: PUSH
13325: LD_INT 19
13327: PUSH
13328: LD_INT 20
13330: PUSH
13331: LD_INT 21
13333: PUSH
13334: LD_INT 22
13336: PUSH
13337: LD_INT 23
13339: PUSH
13340: LD_INT 24
13342: PUSH
13343: LD_INT 25
13345: PUSH
13346: LD_INT 26
13348: PUSH
13349: LD_INT 27
13351: PUSH
13352: LD_INT 28
13354: PUSH
13355: LD_INT 29
13357: PUSH
13358: LD_INT 30
13360: PUSH
13361: LD_INT 31
13363: PUSH
13364: LD_INT 32
13366: PUSH
13367: LD_INT 33
13369: PUSH
13370: LD_INT 34
13372: PUSH
13373: LD_INT 36
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: PUSH
13413: LD_INT 101
13415: PUSH
13416: LD_INT 102
13418: PUSH
13419: LD_INT 103
13421: PUSH
13422: LD_INT 104
13424: PUSH
13425: LD_INT 105
13427: PUSH
13428: LD_INT 106
13430: PUSH
13431: LD_INT 107
13433: PUSH
13434: LD_INT 108
13436: PUSH
13437: LD_INT 109
13439: PUSH
13440: LD_INT 110
13442: PUSH
13443: LD_INT 111
13445: PUSH
13446: LD_INT 112
13448: PUSH
13449: LD_INT 113
13451: PUSH
13452: LD_INT 114
13454: PUSH
13455: LD_INT 116
13457: PUSH
13458: LD_INT 117
13460: PUSH
13461: LD_INT 118
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: PUSH
13483: EMPTY
13484: LIST
13485: LIST
13486: ST_TO_ADDR
13487: GO 14494
13489: LD_INT 15
13491: DOUBLE
13492: EQUAL
13493: IFTRUE 13497
13495: GO 13721
13497: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
13498: LD_ADDR_VAR 0 2
13502: PUSH
13503: LD_INT 1
13505: PUSH
13506: LD_INT 2
13508: PUSH
13509: LD_INT 3
13511: PUSH
13512: LD_INT 4
13514: PUSH
13515: LD_INT 5
13517: PUSH
13518: LD_INT 6
13520: PUSH
13521: LD_INT 7
13523: PUSH
13524: LD_INT 8
13526: PUSH
13527: LD_INT 9
13529: PUSH
13530: LD_INT 10
13532: PUSH
13533: LD_INT 11
13535: PUSH
13536: LD_INT 12
13538: PUSH
13539: LD_INT 13
13541: PUSH
13542: LD_INT 14
13544: PUSH
13545: LD_INT 15
13547: PUSH
13548: LD_INT 16
13550: PUSH
13551: LD_INT 17
13553: PUSH
13554: LD_INT 18
13556: PUSH
13557: LD_INT 19
13559: PUSH
13560: LD_INT 20
13562: PUSH
13563: LD_INT 21
13565: PUSH
13566: LD_INT 22
13568: PUSH
13569: LD_INT 23
13571: PUSH
13572: LD_INT 24
13574: PUSH
13575: LD_INT 25
13577: PUSH
13578: LD_INT 26
13580: PUSH
13581: LD_INT 27
13583: PUSH
13584: LD_INT 28
13586: PUSH
13587: LD_INT 29
13589: PUSH
13590: LD_INT 30
13592: PUSH
13593: LD_INT 31
13595: PUSH
13596: LD_INT 32
13598: PUSH
13599: LD_INT 33
13601: PUSH
13602: LD_INT 34
13604: PUSH
13605: LD_INT 36
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: PUSH
13645: LD_INT 101
13647: PUSH
13648: LD_INT 102
13650: PUSH
13651: LD_INT 103
13653: PUSH
13654: LD_INT 104
13656: PUSH
13657: LD_INT 105
13659: PUSH
13660: LD_INT 106
13662: PUSH
13663: LD_INT 107
13665: PUSH
13666: LD_INT 108
13668: PUSH
13669: LD_INT 109
13671: PUSH
13672: LD_INT 110
13674: PUSH
13675: LD_INT 111
13677: PUSH
13678: LD_INT 112
13680: PUSH
13681: LD_INT 113
13683: PUSH
13684: LD_INT 114
13686: PUSH
13687: LD_INT 116
13689: PUSH
13690: LD_INT 117
13692: PUSH
13693: LD_INT 118
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: ST_TO_ADDR
13719: GO 14494
13721: LD_INT 16
13723: DOUBLE
13724: EQUAL
13725: IFTRUE 13729
13727: GO 13865
13729: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
13730: LD_ADDR_VAR 0 2
13734: PUSH
13735: LD_INT 2
13737: PUSH
13738: LD_INT 4
13740: PUSH
13741: LD_INT 5
13743: PUSH
13744: LD_INT 7
13746: PUSH
13747: LD_INT 11
13749: PUSH
13750: LD_INT 12
13752: PUSH
13753: LD_INT 15
13755: PUSH
13756: LD_INT 16
13758: PUSH
13759: LD_INT 20
13761: PUSH
13762: LD_INT 21
13764: PUSH
13765: LD_INT 22
13767: PUSH
13768: LD_INT 23
13770: PUSH
13771: LD_INT 25
13773: PUSH
13774: LD_INT 26
13776: PUSH
13777: LD_INT 30
13779: PUSH
13780: LD_INT 31
13782: PUSH
13783: LD_INT 32
13785: PUSH
13786: LD_INT 33
13788: PUSH
13789: LD_INT 34
13791: PUSH
13792: EMPTY
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: PUSH
13813: LD_INT 101
13815: PUSH
13816: LD_INT 102
13818: PUSH
13819: LD_INT 103
13821: PUSH
13822: LD_INT 106
13824: PUSH
13825: LD_INT 108
13827: PUSH
13828: LD_INT 112
13830: PUSH
13831: LD_INT 113
13833: PUSH
13834: LD_INT 114
13836: PUSH
13837: LD_INT 116
13839: PUSH
13840: LD_INT 117
13842: PUSH
13843: LD_INT 118
13845: PUSH
13846: EMPTY
13847: LIST
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: PUSH
13859: EMPTY
13860: LIST
13861: LIST
13862: ST_TO_ADDR
13863: GO 14494
13865: LD_INT 17
13867: DOUBLE
13868: EQUAL
13869: IFTRUE 13873
13871: GO 14097
13873: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
13874: LD_ADDR_VAR 0 2
13878: PUSH
13879: LD_INT 1
13881: PUSH
13882: LD_INT 2
13884: PUSH
13885: LD_INT 3
13887: PUSH
13888: LD_INT 4
13890: PUSH
13891: LD_INT 5
13893: PUSH
13894: LD_INT 6
13896: PUSH
13897: LD_INT 7
13899: PUSH
13900: LD_INT 8
13902: PUSH
13903: LD_INT 9
13905: PUSH
13906: LD_INT 10
13908: PUSH
13909: LD_INT 11
13911: PUSH
13912: LD_INT 12
13914: PUSH
13915: LD_INT 13
13917: PUSH
13918: LD_INT 14
13920: PUSH
13921: LD_INT 15
13923: PUSH
13924: LD_INT 16
13926: PUSH
13927: LD_INT 17
13929: PUSH
13930: LD_INT 18
13932: PUSH
13933: LD_INT 19
13935: PUSH
13936: LD_INT 20
13938: PUSH
13939: LD_INT 21
13941: PUSH
13942: LD_INT 22
13944: PUSH
13945: LD_INT 23
13947: PUSH
13948: LD_INT 24
13950: PUSH
13951: LD_INT 25
13953: PUSH
13954: LD_INT 26
13956: PUSH
13957: LD_INT 27
13959: PUSH
13960: LD_INT 28
13962: PUSH
13963: LD_INT 29
13965: PUSH
13966: LD_INT 30
13968: PUSH
13969: LD_INT 31
13971: PUSH
13972: LD_INT 32
13974: PUSH
13975: LD_INT 33
13977: PUSH
13978: LD_INT 34
13980: PUSH
13981: LD_INT 36
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: PUSH
14021: LD_INT 101
14023: PUSH
14024: LD_INT 102
14026: PUSH
14027: LD_INT 103
14029: PUSH
14030: LD_INT 104
14032: PUSH
14033: LD_INT 105
14035: PUSH
14036: LD_INT 106
14038: PUSH
14039: LD_INT 107
14041: PUSH
14042: LD_INT 108
14044: PUSH
14045: LD_INT 109
14047: PUSH
14048: LD_INT 110
14050: PUSH
14051: LD_INT 111
14053: PUSH
14054: LD_INT 112
14056: PUSH
14057: LD_INT 113
14059: PUSH
14060: LD_INT 114
14062: PUSH
14063: LD_INT 116
14065: PUSH
14066: LD_INT 117
14068: PUSH
14069: LD_INT 118
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: ST_TO_ADDR
14095: GO 14494
14097: LD_INT 18
14099: DOUBLE
14100: EQUAL
14101: IFTRUE 14105
14103: GO 14253
14105: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14106: LD_ADDR_VAR 0 2
14110: PUSH
14111: LD_INT 2
14113: PUSH
14114: LD_INT 4
14116: PUSH
14117: LD_INT 5
14119: PUSH
14120: LD_INT 7
14122: PUSH
14123: LD_INT 11
14125: PUSH
14126: LD_INT 12
14128: PUSH
14129: LD_INT 15
14131: PUSH
14132: LD_INT 16
14134: PUSH
14135: LD_INT 20
14137: PUSH
14138: LD_INT 21
14140: PUSH
14141: LD_INT 22
14143: PUSH
14144: LD_INT 23
14146: PUSH
14147: LD_INT 25
14149: PUSH
14150: LD_INT 26
14152: PUSH
14153: LD_INT 30
14155: PUSH
14156: LD_INT 31
14158: PUSH
14159: LD_INT 32
14161: PUSH
14162: LD_INT 33
14164: PUSH
14165: LD_INT 34
14167: PUSH
14168: LD_INT 35
14170: PUSH
14171: LD_INT 36
14173: PUSH
14174: EMPTY
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: PUSH
14197: LD_INT 101
14199: PUSH
14200: LD_INT 102
14202: PUSH
14203: LD_INT 103
14205: PUSH
14206: LD_INT 106
14208: PUSH
14209: LD_INT 108
14211: PUSH
14212: LD_INT 112
14214: PUSH
14215: LD_INT 113
14217: PUSH
14218: LD_INT 114
14220: PUSH
14221: LD_INT 115
14223: PUSH
14224: LD_INT 116
14226: PUSH
14227: LD_INT 117
14229: PUSH
14230: LD_INT 118
14232: PUSH
14233: EMPTY
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: PUSH
14247: EMPTY
14248: LIST
14249: LIST
14250: ST_TO_ADDR
14251: GO 14494
14253: LD_INT 19
14255: DOUBLE
14256: EQUAL
14257: IFTRUE 14261
14259: GO 14493
14261: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
14262: LD_ADDR_VAR 0 2
14266: PUSH
14267: LD_INT 1
14269: PUSH
14270: LD_INT 2
14272: PUSH
14273: LD_INT 3
14275: PUSH
14276: LD_INT 4
14278: PUSH
14279: LD_INT 5
14281: PUSH
14282: LD_INT 6
14284: PUSH
14285: LD_INT 7
14287: PUSH
14288: LD_INT 8
14290: PUSH
14291: LD_INT 9
14293: PUSH
14294: LD_INT 10
14296: PUSH
14297: LD_INT 11
14299: PUSH
14300: LD_INT 12
14302: PUSH
14303: LD_INT 13
14305: PUSH
14306: LD_INT 14
14308: PUSH
14309: LD_INT 15
14311: PUSH
14312: LD_INT 16
14314: PUSH
14315: LD_INT 17
14317: PUSH
14318: LD_INT 18
14320: PUSH
14321: LD_INT 19
14323: PUSH
14324: LD_INT 20
14326: PUSH
14327: LD_INT 21
14329: PUSH
14330: LD_INT 22
14332: PUSH
14333: LD_INT 23
14335: PUSH
14336: LD_INT 24
14338: PUSH
14339: LD_INT 25
14341: PUSH
14342: LD_INT 26
14344: PUSH
14345: LD_INT 27
14347: PUSH
14348: LD_INT 28
14350: PUSH
14351: LD_INT 29
14353: PUSH
14354: LD_INT 30
14356: PUSH
14357: LD_INT 31
14359: PUSH
14360: LD_INT 32
14362: PUSH
14363: LD_INT 33
14365: PUSH
14366: LD_INT 34
14368: PUSH
14369: LD_INT 35
14371: PUSH
14372: LD_INT 36
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: PUSH
14413: LD_INT 101
14415: PUSH
14416: LD_INT 102
14418: PUSH
14419: LD_INT 103
14421: PUSH
14422: LD_INT 104
14424: PUSH
14425: LD_INT 105
14427: PUSH
14428: LD_INT 106
14430: PUSH
14431: LD_INT 107
14433: PUSH
14434: LD_INT 108
14436: PUSH
14437: LD_INT 109
14439: PUSH
14440: LD_INT 110
14442: PUSH
14443: LD_INT 111
14445: PUSH
14446: LD_INT 112
14448: PUSH
14449: LD_INT 113
14451: PUSH
14452: LD_INT 114
14454: PUSH
14455: LD_INT 115
14457: PUSH
14458: LD_INT 116
14460: PUSH
14461: LD_INT 117
14463: PUSH
14464: LD_INT 118
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: ST_TO_ADDR
14491: GO 14494
14493: POP
// end else
14494: GO 14725
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
14496: LD_ADDR_VAR 0 2
14500: PUSH
14501: LD_INT 1
14503: PUSH
14504: LD_INT 2
14506: PUSH
14507: LD_INT 3
14509: PUSH
14510: LD_INT 4
14512: PUSH
14513: LD_INT 5
14515: PUSH
14516: LD_INT 6
14518: PUSH
14519: LD_INT 7
14521: PUSH
14522: LD_INT 8
14524: PUSH
14525: LD_INT 9
14527: PUSH
14528: LD_INT 10
14530: PUSH
14531: LD_INT 11
14533: PUSH
14534: LD_INT 12
14536: PUSH
14537: LD_INT 13
14539: PUSH
14540: LD_INT 14
14542: PUSH
14543: LD_INT 15
14545: PUSH
14546: LD_INT 16
14548: PUSH
14549: LD_INT 17
14551: PUSH
14552: LD_INT 18
14554: PUSH
14555: LD_INT 19
14557: PUSH
14558: LD_INT 20
14560: PUSH
14561: LD_INT 21
14563: PUSH
14564: LD_INT 22
14566: PUSH
14567: LD_INT 23
14569: PUSH
14570: LD_INT 24
14572: PUSH
14573: LD_INT 25
14575: PUSH
14576: LD_INT 26
14578: PUSH
14579: LD_INT 27
14581: PUSH
14582: LD_INT 28
14584: PUSH
14585: LD_INT 29
14587: PUSH
14588: LD_INT 30
14590: PUSH
14591: LD_INT 31
14593: PUSH
14594: LD_INT 32
14596: PUSH
14597: LD_INT 33
14599: PUSH
14600: LD_INT 34
14602: PUSH
14603: LD_INT 35
14605: PUSH
14606: LD_INT 36
14608: PUSH
14609: EMPTY
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: PUSH
14647: LD_INT 101
14649: PUSH
14650: LD_INT 102
14652: PUSH
14653: LD_INT 103
14655: PUSH
14656: LD_INT 104
14658: PUSH
14659: LD_INT 105
14661: PUSH
14662: LD_INT 106
14664: PUSH
14665: LD_INT 107
14667: PUSH
14668: LD_INT 108
14670: PUSH
14671: LD_INT 109
14673: PUSH
14674: LD_INT 110
14676: PUSH
14677: LD_INT 111
14679: PUSH
14680: LD_INT 112
14682: PUSH
14683: LD_INT 113
14685: PUSH
14686: LD_INT 114
14688: PUSH
14689: LD_INT 115
14691: PUSH
14692: LD_INT 116
14694: PUSH
14695: LD_INT 117
14697: PUSH
14698: LD_INT 118
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: ST_TO_ADDR
// if result then
14725: LD_VAR 0 2
14729: IFFALSE 15515
// begin normal :=  ;
14731: LD_ADDR_VAR 0 5
14735: PUSH
14736: LD_STRING 
14738: ST_TO_ADDR
// hardcore :=  ;
14739: LD_ADDR_VAR 0 6
14743: PUSH
14744: LD_STRING 
14746: ST_TO_ADDR
// active :=  ;
14747: LD_ADDR_VAR 0 7
14751: PUSH
14752: LD_STRING 
14754: ST_TO_ADDR
// for i = 1 to normalCounter do
14755: LD_ADDR_VAR 0 8
14759: PUSH
14760: DOUBLE
14761: LD_INT 1
14763: DEC
14764: ST_TO_ADDR
14765: LD_EXP 27
14769: PUSH
14770: FOR_TO
14771: IFFALSE 14872
// begin tmp := 0 ;
14773: LD_ADDR_VAR 0 3
14777: PUSH
14778: LD_STRING 0
14780: ST_TO_ADDR
// if result [ 1 ] then
14781: LD_VAR 0 2
14785: PUSH
14786: LD_INT 1
14788: ARRAY
14789: IFFALSE 14854
// if result [ 1 ] [ 1 ] = i then
14791: LD_VAR 0 2
14795: PUSH
14796: LD_INT 1
14798: ARRAY
14799: PUSH
14800: LD_INT 1
14802: ARRAY
14803: PUSH
14804: LD_VAR 0 8
14808: EQUAL
14809: IFFALSE 14854
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14811: LD_ADDR_VAR 0 2
14815: PUSH
14816: LD_VAR 0 2
14820: PPUSH
14821: LD_INT 1
14823: PPUSH
14824: LD_VAR 0 2
14828: PUSH
14829: LD_INT 1
14831: ARRAY
14832: PPUSH
14833: LD_INT 1
14835: PPUSH
14836: CALL_OW 3
14840: PPUSH
14841: CALL_OW 1
14845: ST_TO_ADDR
// tmp := 1 ;
14846: LD_ADDR_VAR 0 3
14850: PUSH
14851: LD_STRING 1
14853: ST_TO_ADDR
// end ; normal := normal & tmp ;
14854: LD_ADDR_VAR 0 5
14858: PUSH
14859: LD_VAR 0 5
14863: PUSH
14864: LD_VAR 0 3
14868: STR
14869: ST_TO_ADDR
// end ;
14870: GO 14770
14872: POP
14873: POP
// for i = 1 to hardcoreCounter do
14874: LD_ADDR_VAR 0 8
14878: PUSH
14879: DOUBLE
14880: LD_INT 1
14882: DEC
14883: ST_TO_ADDR
14884: LD_EXP 28
14888: PUSH
14889: FOR_TO
14890: IFFALSE 14995
// begin tmp := 0 ;
14892: LD_ADDR_VAR 0 3
14896: PUSH
14897: LD_STRING 0
14899: ST_TO_ADDR
// if result [ 2 ] then
14900: LD_VAR 0 2
14904: PUSH
14905: LD_INT 2
14907: ARRAY
14908: IFFALSE 14977
// if result [ 2 ] [ 1 ] = 100 + i then
14910: LD_VAR 0 2
14914: PUSH
14915: LD_INT 2
14917: ARRAY
14918: PUSH
14919: LD_INT 1
14921: ARRAY
14922: PUSH
14923: LD_INT 100
14925: PUSH
14926: LD_VAR 0 8
14930: PLUS
14931: EQUAL
14932: IFFALSE 14977
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14934: LD_ADDR_VAR 0 2
14938: PUSH
14939: LD_VAR 0 2
14943: PPUSH
14944: LD_INT 2
14946: PPUSH
14947: LD_VAR 0 2
14951: PUSH
14952: LD_INT 2
14954: ARRAY
14955: PPUSH
14956: LD_INT 1
14958: PPUSH
14959: CALL_OW 3
14963: PPUSH
14964: CALL_OW 1
14968: ST_TO_ADDR
// tmp := 1 ;
14969: LD_ADDR_VAR 0 3
14973: PUSH
14974: LD_STRING 1
14976: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14977: LD_ADDR_VAR 0 6
14981: PUSH
14982: LD_VAR 0 6
14986: PUSH
14987: LD_VAR 0 3
14991: STR
14992: ST_TO_ADDR
// end ;
14993: GO 14889
14995: POP
14996: POP
// if isGameLoad then
14997: LD_VAR 0 1
15001: IFFALSE 15476
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15003: LD_ADDR_VAR 0 4
15007: PUSH
15008: LD_EXP 31
15012: PUSH
15013: LD_EXP 30
15017: PUSH
15018: LD_EXP 32
15022: PUSH
15023: LD_EXP 29
15027: PUSH
15028: LD_EXP 33
15032: PUSH
15033: LD_EXP 34
15037: PUSH
15038: LD_EXP 35
15042: PUSH
15043: LD_EXP 36
15047: PUSH
15048: LD_EXP 37
15052: PUSH
15053: LD_EXP 38
15057: PUSH
15058: LD_EXP 39
15062: PUSH
15063: LD_EXP 40
15067: PUSH
15068: LD_EXP 41
15072: PUSH
15073: LD_EXP 42
15077: PUSH
15078: LD_EXP 50
15082: PUSH
15083: LD_EXP 51
15087: PUSH
15088: LD_EXP 52
15092: PUSH
15093: LD_EXP 53
15097: PUSH
15098: LD_EXP 55
15102: PUSH
15103: LD_EXP 56
15107: PUSH
15108: LD_EXP 57
15112: PUSH
15113: LD_EXP 60
15117: PUSH
15118: LD_EXP 62
15122: PUSH
15123: LD_EXP 63
15127: PUSH
15128: LD_EXP 64
15132: PUSH
15133: LD_EXP 66
15137: PUSH
15138: LD_EXP 67
15142: PUSH
15143: LD_EXP 70
15147: PUSH
15148: LD_EXP 71
15152: PUSH
15153: LD_EXP 72
15157: PUSH
15158: LD_EXP 73
15162: PUSH
15163: LD_EXP 74
15167: PUSH
15168: LD_EXP 75
15172: PUSH
15173: LD_EXP 76
15177: PUSH
15178: LD_EXP 77
15182: PUSH
15183: LD_EXP 78
15187: PUSH
15188: LD_EXP 43
15192: PUSH
15193: LD_EXP 44
15197: PUSH
15198: LD_EXP 47
15202: PUSH
15203: LD_EXP 48
15207: PUSH
15208: LD_EXP 49
15212: PUSH
15213: LD_EXP 45
15217: PUSH
15218: LD_EXP 46
15222: PUSH
15223: LD_EXP 54
15227: PUSH
15228: LD_EXP 58
15232: PUSH
15233: LD_EXP 59
15237: PUSH
15238: LD_EXP 61
15242: PUSH
15243: LD_EXP 65
15247: PUSH
15248: LD_EXP 68
15252: PUSH
15253: LD_EXP 69
15257: PUSH
15258: LD_EXP 79
15262: PUSH
15263: LD_EXP 80
15267: PUSH
15268: LD_EXP 81
15272: PUSH
15273: LD_EXP 82
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: ST_TO_ADDR
// tmp :=  ;
15334: LD_ADDR_VAR 0 3
15338: PUSH
15339: LD_STRING 
15341: ST_TO_ADDR
// for i = 1 to normalCounter do
15342: LD_ADDR_VAR 0 8
15346: PUSH
15347: DOUBLE
15348: LD_INT 1
15350: DEC
15351: ST_TO_ADDR
15352: LD_EXP 27
15356: PUSH
15357: FOR_TO
15358: IFFALSE 15394
// begin if flags [ i ] then
15360: LD_VAR 0 4
15364: PUSH
15365: LD_VAR 0 8
15369: ARRAY
15370: IFFALSE 15392
// tmp := tmp & i & ; ;
15372: LD_ADDR_VAR 0 3
15376: PUSH
15377: LD_VAR 0 3
15381: PUSH
15382: LD_VAR 0 8
15386: STR
15387: PUSH
15388: LD_STRING ;
15390: STR
15391: ST_TO_ADDR
// end ;
15392: GO 15357
15394: POP
15395: POP
// for i = 1 to hardcoreCounter do
15396: LD_ADDR_VAR 0 8
15400: PUSH
15401: DOUBLE
15402: LD_INT 1
15404: DEC
15405: ST_TO_ADDR
15406: LD_EXP 28
15410: PUSH
15411: FOR_TO
15412: IFFALSE 15458
// begin if flags [ normalCounter + i ] then
15414: LD_VAR 0 4
15418: PUSH
15419: LD_EXP 27
15423: PUSH
15424: LD_VAR 0 8
15428: PLUS
15429: ARRAY
15430: IFFALSE 15456
// tmp := tmp & ( 100 + i ) & ; ;
15432: LD_ADDR_VAR 0 3
15436: PUSH
15437: LD_VAR 0 3
15441: PUSH
15442: LD_INT 100
15444: PUSH
15445: LD_VAR 0 8
15449: PLUS
15450: STR
15451: PUSH
15452: LD_STRING ;
15454: STR
15455: ST_TO_ADDR
// end ;
15456: GO 15411
15458: POP
15459: POP
// if tmp then
15460: LD_VAR 0 3
15464: IFFALSE 15476
// active := tmp ;
15466: LD_ADDR_VAR 0 7
15470: PUSH
15471: LD_VAR 0 3
15475: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
15476: LD_STRING getStreamItemsFromMission("
15478: PUSH
15479: LD_VAR 0 5
15483: STR
15484: PUSH
15485: LD_STRING ","
15487: STR
15488: PUSH
15489: LD_VAR 0 6
15493: STR
15494: PUSH
15495: LD_STRING ","
15497: STR
15498: PUSH
15499: LD_VAR 0 7
15503: STR
15504: PUSH
15505: LD_STRING ")
15507: STR
15508: PPUSH
15509: CALL_OW 559
// end else
15513: GO 15522
// ToLua ( getStreamItemsFromMission("","","") ) ;
15515: LD_STRING getStreamItemsFromMission("","","")
15517: PPUSH
15518: CALL_OW 559
// end ;
15522: LD_VAR 0 2
15526: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15527: LD_EXP 26
15531: PUSH
15532: LD_EXP 31
15536: AND
15537: IFFALSE 15661
15539: GO 15541
15541: DISABLE
15542: LD_INT 0
15544: PPUSH
15545: PPUSH
// begin enable ;
15546: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15547: LD_ADDR_VAR 0 2
15551: PUSH
15552: LD_INT 22
15554: PUSH
15555: LD_OWVAR 2
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PUSH
15564: LD_INT 2
15566: PUSH
15567: LD_INT 34
15569: PUSH
15570: LD_INT 7
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: PUSH
15577: LD_INT 34
15579: PUSH
15580: LD_INT 45
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PUSH
15587: LD_INT 34
15589: PUSH
15590: LD_INT 28
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PUSH
15597: LD_INT 34
15599: PUSH
15600: LD_INT 47
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: PUSH
15607: EMPTY
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: PUSH
15614: EMPTY
15615: LIST
15616: LIST
15617: PPUSH
15618: CALL_OW 69
15622: ST_TO_ADDR
// if not tmp then
15623: LD_VAR 0 2
15627: NOT
15628: IFFALSE 15632
// exit ;
15630: GO 15661
// for i in tmp do
15632: LD_ADDR_VAR 0 1
15636: PUSH
15637: LD_VAR 0 2
15641: PUSH
15642: FOR_IN
15643: IFFALSE 15659
// begin SetLives ( i , 0 ) ;
15645: LD_VAR 0 1
15649: PPUSH
15650: LD_INT 0
15652: PPUSH
15653: CALL_OW 234
// end ;
15657: GO 15642
15659: POP
15660: POP
// end ;
15661: PPOPN 2
15663: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15664: LD_EXP 26
15668: PUSH
15669: LD_EXP 32
15673: AND
15674: IFFALSE 15758
15676: GO 15678
15678: DISABLE
15679: LD_INT 0
15681: PPUSH
15682: PPUSH
// begin enable ;
15683: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15684: LD_ADDR_VAR 0 2
15688: PUSH
15689: LD_INT 22
15691: PUSH
15692: LD_OWVAR 2
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: PUSH
15701: LD_INT 32
15703: PUSH
15704: LD_INT 3
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: PPUSH
15715: CALL_OW 69
15719: ST_TO_ADDR
// if not tmp then
15720: LD_VAR 0 2
15724: NOT
15725: IFFALSE 15729
// exit ;
15727: GO 15758
// for i in tmp do
15729: LD_ADDR_VAR 0 1
15733: PUSH
15734: LD_VAR 0 2
15738: PUSH
15739: FOR_IN
15740: IFFALSE 15756
// begin SetLives ( i , 0 ) ;
15742: LD_VAR 0 1
15746: PPUSH
15747: LD_INT 0
15749: PPUSH
15750: CALL_OW 234
// end ;
15754: GO 15739
15756: POP
15757: POP
// end ;
15758: PPOPN 2
15760: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15761: LD_EXP 26
15765: PUSH
15766: LD_EXP 29
15770: AND
15771: IFFALSE 15864
15773: GO 15775
15775: DISABLE
15776: LD_INT 0
15778: PPUSH
// begin enable ;
15779: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15780: LD_ADDR_VAR 0 1
15784: PUSH
15785: LD_INT 22
15787: PUSH
15788: LD_OWVAR 2
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: PUSH
15797: LD_INT 2
15799: PUSH
15800: LD_INT 25
15802: PUSH
15803: LD_INT 5
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: PUSH
15810: LD_INT 25
15812: PUSH
15813: LD_INT 9
15815: PUSH
15816: EMPTY
15817: LIST
15818: LIST
15819: PUSH
15820: LD_INT 25
15822: PUSH
15823: LD_INT 8
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PPUSH
15840: CALL_OW 69
15844: PUSH
15845: FOR_IN
15846: IFFALSE 15862
// begin SetClass ( i , 1 ) ;
15848: LD_VAR 0 1
15852: PPUSH
15853: LD_INT 1
15855: PPUSH
15856: CALL_OW 336
// end ;
15860: GO 15845
15862: POP
15863: POP
// end ;
15864: PPOPN 1
15866: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15867: LD_EXP 26
15871: PUSH
15872: LD_EXP 30
15876: AND
15877: PUSH
15878: LD_OWVAR 65
15882: PUSH
15883: LD_INT 7
15885: LESS
15886: AND
15887: IFFALSE 15901
15889: GO 15891
15891: DISABLE
// begin enable ;
15892: ENABLE
// game_speed := 7 ;
15893: LD_ADDR_OWVAR 65
15897: PUSH
15898: LD_INT 7
15900: ST_TO_ADDR
// end ;
15901: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15902: LD_EXP 26
15906: PUSH
15907: LD_EXP 33
15911: AND
15912: IFFALSE 16114
15914: GO 15916
15916: DISABLE
15917: LD_INT 0
15919: PPUSH
15920: PPUSH
15921: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15922: LD_ADDR_VAR 0 3
15926: PUSH
15927: LD_INT 81
15929: PUSH
15930: LD_OWVAR 2
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: PUSH
15939: LD_INT 21
15941: PUSH
15942: LD_INT 1
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: PPUSH
15953: CALL_OW 69
15957: ST_TO_ADDR
// if not tmp then
15958: LD_VAR 0 3
15962: NOT
15963: IFFALSE 15967
// exit ;
15965: GO 16114
// if tmp > 5 then
15967: LD_VAR 0 3
15971: PUSH
15972: LD_INT 5
15974: GREATER
15975: IFFALSE 15987
// k := 5 else
15977: LD_ADDR_VAR 0 2
15981: PUSH
15982: LD_INT 5
15984: ST_TO_ADDR
15985: GO 15997
// k := tmp ;
15987: LD_ADDR_VAR 0 2
15991: PUSH
15992: LD_VAR 0 3
15996: ST_TO_ADDR
// for i := 1 to k do
15997: LD_ADDR_VAR 0 1
16001: PUSH
16002: DOUBLE
16003: LD_INT 1
16005: DEC
16006: ST_TO_ADDR
16007: LD_VAR 0 2
16011: PUSH
16012: FOR_TO
16013: IFFALSE 16112
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16015: LD_VAR 0 3
16019: PUSH
16020: LD_VAR 0 1
16024: ARRAY
16025: PPUSH
16026: LD_VAR 0 1
16030: PUSH
16031: LD_INT 4
16033: MOD
16034: PUSH
16035: LD_INT 1
16037: PLUS
16038: PPUSH
16039: CALL_OW 259
16043: PUSH
16044: LD_INT 10
16046: LESS
16047: IFFALSE 16110
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16049: LD_VAR 0 3
16053: PUSH
16054: LD_VAR 0 1
16058: ARRAY
16059: PPUSH
16060: LD_VAR 0 1
16064: PUSH
16065: LD_INT 4
16067: MOD
16068: PUSH
16069: LD_INT 1
16071: PLUS
16072: PPUSH
16073: LD_VAR 0 3
16077: PUSH
16078: LD_VAR 0 1
16082: ARRAY
16083: PPUSH
16084: LD_VAR 0 1
16088: PUSH
16089: LD_INT 4
16091: MOD
16092: PUSH
16093: LD_INT 1
16095: PLUS
16096: PPUSH
16097: CALL_OW 259
16101: PUSH
16102: LD_INT 1
16104: PLUS
16105: PPUSH
16106: CALL_OW 237
16110: GO 16012
16112: POP
16113: POP
// end ;
16114: PPOPN 3
16116: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16117: LD_EXP 26
16121: PUSH
16122: LD_EXP 34
16126: AND
16127: IFFALSE 16147
16129: GO 16131
16131: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16132: LD_INT 4
16134: PPUSH
16135: LD_OWVAR 2
16139: PPUSH
16140: LD_INT 0
16142: PPUSH
16143: CALL_OW 324
16147: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16148: LD_EXP 26
16152: PUSH
16153: LD_EXP 63
16157: AND
16158: IFFALSE 16178
16160: GO 16162
16162: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16163: LD_INT 19
16165: PPUSH
16166: LD_OWVAR 2
16170: PPUSH
16171: LD_INT 0
16173: PPUSH
16174: CALL_OW 324
16178: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16179: LD_EXP 26
16183: PUSH
16184: LD_EXP 35
16188: AND
16189: IFFALSE 16291
16191: GO 16193
16193: DISABLE
16194: LD_INT 0
16196: PPUSH
16197: PPUSH
// begin enable ;
16198: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16199: LD_ADDR_VAR 0 2
16203: PUSH
16204: LD_INT 22
16206: PUSH
16207: LD_OWVAR 2
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: PUSH
16216: LD_INT 2
16218: PUSH
16219: LD_INT 34
16221: PUSH
16222: LD_INT 11
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: PUSH
16229: LD_INT 34
16231: PUSH
16232: LD_INT 30
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: LIST
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: PPUSH
16248: CALL_OW 69
16252: ST_TO_ADDR
// if not tmp then
16253: LD_VAR 0 2
16257: NOT
16258: IFFALSE 16262
// exit ;
16260: GO 16291
// for i in tmp do
16262: LD_ADDR_VAR 0 1
16266: PUSH
16267: LD_VAR 0 2
16271: PUSH
16272: FOR_IN
16273: IFFALSE 16289
// begin SetLives ( i , 0 ) ;
16275: LD_VAR 0 1
16279: PPUSH
16280: LD_INT 0
16282: PPUSH
16283: CALL_OW 234
// end ;
16287: GO 16272
16289: POP
16290: POP
// end ;
16291: PPOPN 2
16293: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16294: LD_EXP 26
16298: PUSH
16299: LD_EXP 36
16303: AND
16304: IFFALSE 16324
16306: GO 16308
16308: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16309: LD_INT 32
16311: PPUSH
16312: LD_OWVAR 2
16316: PPUSH
16317: LD_INT 0
16319: PPUSH
16320: CALL_OW 324
16324: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16325: LD_EXP 26
16329: PUSH
16330: LD_EXP 37
16334: AND
16335: IFFALSE 16516
16337: GO 16339
16339: DISABLE
16340: LD_INT 0
16342: PPUSH
16343: PPUSH
16344: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16345: LD_ADDR_VAR 0 2
16349: PUSH
16350: LD_INT 22
16352: PUSH
16353: LD_OWVAR 2
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: PUSH
16362: LD_INT 33
16364: PUSH
16365: LD_INT 3
16367: PUSH
16368: EMPTY
16369: LIST
16370: LIST
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: PPUSH
16376: CALL_OW 69
16380: ST_TO_ADDR
// if not tmp then
16381: LD_VAR 0 2
16385: NOT
16386: IFFALSE 16390
// exit ;
16388: GO 16516
// side := 0 ;
16390: LD_ADDR_VAR 0 3
16394: PUSH
16395: LD_INT 0
16397: ST_TO_ADDR
// for i := 1 to 8 do
16398: LD_ADDR_VAR 0 1
16402: PUSH
16403: DOUBLE
16404: LD_INT 1
16406: DEC
16407: ST_TO_ADDR
16408: LD_INT 8
16410: PUSH
16411: FOR_TO
16412: IFFALSE 16460
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16414: LD_OWVAR 2
16418: PUSH
16419: LD_VAR 0 1
16423: NONEQUAL
16424: PUSH
16425: LD_OWVAR 2
16429: PPUSH
16430: LD_VAR 0 1
16434: PPUSH
16435: CALL_OW 81
16439: PUSH
16440: LD_INT 2
16442: EQUAL
16443: AND
16444: IFFALSE 16458
// begin side := i ;
16446: LD_ADDR_VAR 0 3
16450: PUSH
16451: LD_VAR 0 1
16455: ST_TO_ADDR
// break ;
16456: GO 16460
// end ;
16458: GO 16411
16460: POP
16461: POP
// if not side then
16462: LD_VAR 0 3
16466: NOT
16467: IFFALSE 16471
// exit ;
16469: GO 16516
// for i := 1 to tmp do
16471: LD_ADDR_VAR 0 1
16475: PUSH
16476: DOUBLE
16477: LD_INT 1
16479: DEC
16480: ST_TO_ADDR
16481: LD_VAR 0 2
16485: PUSH
16486: FOR_TO
16487: IFFALSE 16514
// if Prob ( 60 ) then
16489: LD_INT 60
16491: PPUSH
16492: CALL_OW 13
16496: IFFALSE 16512
// SetSide ( i , side ) ;
16498: LD_VAR 0 1
16502: PPUSH
16503: LD_VAR 0 3
16507: PPUSH
16508: CALL_OW 235
16512: GO 16486
16514: POP
16515: POP
// end ;
16516: PPOPN 3
16518: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16519: LD_EXP 26
16523: PUSH
16524: LD_EXP 39
16528: AND
16529: IFFALSE 16648
16531: GO 16533
16533: DISABLE
16534: LD_INT 0
16536: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16537: LD_ADDR_VAR 0 1
16541: PUSH
16542: LD_INT 22
16544: PUSH
16545: LD_OWVAR 2
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: PUSH
16554: LD_INT 21
16556: PUSH
16557: LD_INT 1
16559: PUSH
16560: EMPTY
16561: LIST
16562: LIST
16563: PUSH
16564: LD_INT 3
16566: PUSH
16567: LD_INT 23
16569: PUSH
16570: LD_INT 0
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: LIST
16585: PPUSH
16586: CALL_OW 69
16590: PUSH
16591: FOR_IN
16592: IFFALSE 16646
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16594: LD_VAR 0 1
16598: PPUSH
16599: CALL_OW 257
16603: PUSH
16604: LD_INT 1
16606: PUSH
16607: LD_INT 2
16609: PUSH
16610: LD_INT 3
16612: PUSH
16613: LD_INT 4
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: IN
16622: IFFALSE 16644
// SetClass ( un , rand ( 1 , 4 ) ) ;
16624: LD_VAR 0 1
16628: PPUSH
16629: LD_INT 1
16631: PPUSH
16632: LD_INT 4
16634: PPUSH
16635: CALL_OW 12
16639: PPUSH
16640: CALL_OW 336
16644: GO 16591
16646: POP
16647: POP
// end ;
16648: PPOPN 1
16650: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16651: LD_EXP 26
16655: PUSH
16656: LD_EXP 38
16660: AND
16661: IFFALSE 16740
16663: GO 16665
16665: DISABLE
16666: LD_INT 0
16668: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16669: LD_ADDR_VAR 0 1
16673: PUSH
16674: LD_INT 22
16676: PUSH
16677: LD_OWVAR 2
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: PUSH
16686: LD_INT 21
16688: PUSH
16689: LD_INT 3
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: PPUSH
16700: CALL_OW 69
16704: ST_TO_ADDR
// if not tmp then
16705: LD_VAR 0 1
16709: NOT
16710: IFFALSE 16714
// exit ;
16712: GO 16740
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16714: LD_VAR 0 1
16718: PUSH
16719: LD_INT 1
16721: PPUSH
16722: LD_VAR 0 1
16726: PPUSH
16727: CALL_OW 12
16731: ARRAY
16732: PPUSH
16733: LD_INT 100
16735: PPUSH
16736: CALL_OW 234
// end ;
16740: PPOPN 1
16742: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16743: LD_EXP 26
16747: PUSH
16748: LD_EXP 40
16752: AND
16753: IFFALSE 16851
16755: GO 16757
16757: DISABLE
16758: LD_INT 0
16760: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16761: LD_ADDR_VAR 0 1
16765: PUSH
16766: LD_INT 22
16768: PUSH
16769: LD_OWVAR 2
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: LD_INT 21
16780: PUSH
16781: LD_INT 1
16783: PUSH
16784: EMPTY
16785: LIST
16786: LIST
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PPUSH
16792: CALL_OW 69
16796: ST_TO_ADDR
// if not tmp then
16797: LD_VAR 0 1
16801: NOT
16802: IFFALSE 16806
// exit ;
16804: GO 16851
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16806: LD_VAR 0 1
16810: PUSH
16811: LD_INT 1
16813: PPUSH
16814: LD_VAR 0 1
16818: PPUSH
16819: CALL_OW 12
16823: ARRAY
16824: PPUSH
16825: LD_INT 1
16827: PPUSH
16828: LD_INT 4
16830: PPUSH
16831: CALL_OW 12
16835: PPUSH
16836: LD_INT 3000
16838: PPUSH
16839: LD_INT 9000
16841: PPUSH
16842: CALL_OW 12
16846: PPUSH
16847: CALL_OW 492
// end ;
16851: PPOPN 1
16853: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16854: LD_EXP 26
16858: PUSH
16859: LD_EXP 41
16863: AND
16864: IFFALSE 16884
16866: GO 16868
16868: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16869: LD_INT 1
16871: PPUSH
16872: LD_OWVAR 2
16876: PPUSH
16877: LD_INT 0
16879: PPUSH
16880: CALL_OW 324
16884: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16885: LD_EXP 26
16889: PUSH
16890: LD_EXP 42
16894: AND
16895: IFFALSE 16978
16897: GO 16899
16899: DISABLE
16900: LD_INT 0
16902: PPUSH
16903: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16904: LD_ADDR_VAR 0 2
16908: PUSH
16909: LD_INT 22
16911: PUSH
16912: LD_OWVAR 2
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: PUSH
16921: LD_INT 21
16923: PUSH
16924: LD_INT 3
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PPUSH
16935: CALL_OW 69
16939: ST_TO_ADDR
// if not tmp then
16940: LD_VAR 0 2
16944: NOT
16945: IFFALSE 16949
// exit ;
16947: GO 16978
// for i in tmp do
16949: LD_ADDR_VAR 0 1
16953: PUSH
16954: LD_VAR 0 2
16958: PUSH
16959: FOR_IN
16960: IFFALSE 16976
// SetBLevel ( i , 10 ) ;
16962: LD_VAR 0 1
16966: PPUSH
16967: LD_INT 10
16969: PPUSH
16970: CALL_OW 241
16974: GO 16959
16976: POP
16977: POP
// end ;
16978: PPOPN 2
16980: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16981: LD_EXP 26
16985: PUSH
16986: LD_EXP 43
16990: AND
16991: IFFALSE 17102
16993: GO 16995
16995: DISABLE
16996: LD_INT 0
16998: PPUSH
16999: PPUSH
17000: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17001: LD_ADDR_VAR 0 3
17005: PUSH
17006: LD_INT 22
17008: PUSH
17009: LD_OWVAR 2
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: PUSH
17018: LD_INT 25
17020: PUSH
17021: LD_INT 1
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: PPUSH
17032: CALL_OW 69
17036: ST_TO_ADDR
// if not tmp then
17037: LD_VAR 0 3
17041: NOT
17042: IFFALSE 17046
// exit ;
17044: GO 17102
// un := tmp [ rand ( 1 , tmp ) ] ;
17046: LD_ADDR_VAR 0 2
17050: PUSH
17051: LD_VAR 0 3
17055: PUSH
17056: LD_INT 1
17058: PPUSH
17059: LD_VAR 0 3
17063: PPUSH
17064: CALL_OW 12
17068: ARRAY
17069: ST_TO_ADDR
// if Crawls ( un ) then
17070: LD_VAR 0 2
17074: PPUSH
17075: CALL_OW 318
17079: IFFALSE 17090
// ComWalk ( un ) ;
17081: LD_VAR 0 2
17085: PPUSH
17086: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17090: LD_VAR 0 2
17094: PPUSH
17095: LD_INT 5
17097: PPUSH
17098: CALL_OW 336
// end ;
17102: PPOPN 3
17104: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17105: LD_EXP 26
17109: PUSH
17110: LD_EXP 44
17114: AND
17115: PUSH
17116: LD_OWVAR 67
17120: PUSH
17121: LD_INT 4
17123: LESS
17124: AND
17125: IFFALSE 17144
17127: GO 17129
17129: DISABLE
// begin Difficulty := Difficulty + 1 ;
17130: LD_ADDR_OWVAR 67
17134: PUSH
17135: LD_OWVAR 67
17139: PUSH
17140: LD_INT 1
17142: PLUS
17143: ST_TO_ADDR
// end ;
17144: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17145: LD_EXP 26
17149: PUSH
17150: LD_EXP 45
17154: AND
17155: IFFALSE 17258
17157: GO 17159
17159: DISABLE
17160: LD_INT 0
17162: PPUSH
// begin for i := 1 to 5 do
17163: LD_ADDR_VAR 0 1
17167: PUSH
17168: DOUBLE
17169: LD_INT 1
17171: DEC
17172: ST_TO_ADDR
17173: LD_INT 5
17175: PUSH
17176: FOR_TO
17177: IFFALSE 17256
// begin uc_nation := nation_nature ;
17179: LD_ADDR_OWVAR 21
17183: PUSH
17184: LD_INT 0
17186: ST_TO_ADDR
// uc_side := 0 ;
17187: LD_ADDR_OWVAR 20
17191: PUSH
17192: LD_INT 0
17194: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17195: LD_ADDR_OWVAR 29
17199: PUSH
17200: LD_INT 12
17202: PUSH
17203: LD_INT 12
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: ST_TO_ADDR
// hc_agressivity := 20 ;
17210: LD_ADDR_OWVAR 35
17214: PUSH
17215: LD_INT 20
17217: ST_TO_ADDR
// hc_class := class_tiger ;
17218: LD_ADDR_OWVAR 28
17222: PUSH
17223: LD_INT 14
17225: ST_TO_ADDR
// hc_gallery :=  ;
17226: LD_ADDR_OWVAR 33
17230: PUSH
17231: LD_STRING 
17233: ST_TO_ADDR
// hc_name :=  ;
17234: LD_ADDR_OWVAR 26
17238: PUSH
17239: LD_STRING 
17241: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17242: CALL_OW 44
17246: PPUSH
17247: LD_INT 0
17249: PPUSH
17250: CALL_OW 51
// end ;
17254: GO 17176
17256: POP
17257: POP
// end ;
17258: PPOPN 1
17260: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17261: LD_EXP 26
17265: PUSH
17266: LD_EXP 46
17270: AND
17271: IFFALSE 17280
17273: GO 17275
17275: DISABLE
// StreamSibBomb ;
17276: CALL 17281 0 0
17280: END
// export function StreamSibBomb ; var i , x , y ; begin
17281: LD_INT 0
17283: PPUSH
17284: PPUSH
17285: PPUSH
17286: PPUSH
// result := false ;
17287: LD_ADDR_VAR 0 1
17291: PUSH
17292: LD_INT 0
17294: ST_TO_ADDR
// for i := 1 to 16 do
17295: LD_ADDR_VAR 0 2
17299: PUSH
17300: DOUBLE
17301: LD_INT 1
17303: DEC
17304: ST_TO_ADDR
17305: LD_INT 16
17307: PUSH
17308: FOR_TO
17309: IFFALSE 17508
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17311: LD_ADDR_VAR 0 3
17315: PUSH
17316: LD_INT 10
17318: PUSH
17319: LD_INT 20
17321: PUSH
17322: LD_INT 30
17324: PUSH
17325: LD_INT 40
17327: PUSH
17328: LD_INT 50
17330: PUSH
17331: LD_INT 60
17333: PUSH
17334: LD_INT 70
17336: PUSH
17337: LD_INT 80
17339: PUSH
17340: LD_INT 90
17342: PUSH
17343: LD_INT 100
17345: PUSH
17346: LD_INT 110
17348: PUSH
17349: LD_INT 120
17351: PUSH
17352: LD_INT 130
17354: PUSH
17355: LD_INT 140
17357: PUSH
17358: LD_INT 150
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: LIST
17365: LIST
17366: LIST
17367: LIST
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: PUSH
17378: LD_INT 1
17380: PPUSH
17381: LD_INT 15
17383: PPUSH
17384: CALL_OW 12
17388: ARRAY
17389: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17390: LD_ADDR_VAR 0 4
17394: PUSH
17395: LD_INT 10
17397: PUSH
17398: LD_INT 20
17400: PUSH
17401: LD_INT 30
17403: PUSH
17404: LD_INT 40
17406: PUSH
17407: LD_INT 50
17409: PUSH
17410: LD_INT 60
17412: PUSH
17413: LD_INT 70
17415: PUSH
17416: LD_INT 80
17418: PUSH
17419: LD_INT 90
17421: PUSH
17422: LD_INT 100
17424: PUSH
17425: LD_INT 110
17427: PUSH
17428: LD_INT 120
17430: PUSH
17431: LD_INT 130
17433: PUSH
17434: LD_INT 140
17436: PUSH
17437: LD_INT 150
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: PUSH
17457: LD_INT 1
17459: PPUSH
17460: LD_INT 15
17462: PPUSH
17463: CALL_OW 12
17467: ARRAY
17468: ST_TO_ADDR
// if ValidHex ( x , y ) then
17469: LD_VAR 0 3
17473: PPUSH
17474: LD_VAR 0 4
17478: PPUSH
17479: CALL_OW 488
17483: IFFALSE 17506
// begin result := [ x , y ] ;
17485: LD_ADDR_VAR 0 1
17489: PUSH
17490: LD_VAR 0 3
17494: PUSH
17495: LD_VAR 0 4
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: ST_TO_ADDR
// break ;
17504: GO 17508
// end ; end ;
17506: GO 17308
17508: POP
17509: POP
// if result then
17510: LD_VAR 0 1
17514: IFFALSE 17574
// begin ToLua ( playSibBomb() ) ;
17516: LD_STRING playSibBomb()
17518: PPUSH
17519: CALL_OW 559
// wait ( 0 0$14 ) ;
17523: LD_INT 490
17525: PPUSH
17526: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17530: LD_VAR 0 1
17534: PUSH
17535: LD_INT 1
17537: ARRAY
17538: PPUSH
17539: LD_VAR 0 1
17543: PUSH
17544: LD_INT 2
17546: ARRAY
17547: PPUSH
17548: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17552: LD_VAR 0 1
17556: PUSH
17557: LD_INT 1
17559: ARRAY
17560: PPUSH
17561: LD_VAR 0 1
17565: PUSH
17566: LD_INT 2
17568: ARRAY
17569: PPUSH
17570: CALL_OW 429
// end ; end ;
17574: LD_VAR 0 1
17578: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17579: LD_EXP 26
17583: PUSH
17584: LD_EXP 48
17588: AND
17589: IFFALSE 17601
17591: GO 17593
17593: DISABLE
// YouLost (  ) ;
17594: LD_STRING 
17596: PPUSH
17597: CALL_OW 104
17601: END
// every 0 0$1 trigger StreamModeActive and sFog do
17602: LD_EXP 26
17606: PUSH
17607: LD_EXP 47
17611: AND
17612: IFFALSE 17626
17614: GO 17616
17616: DISABLE
// FogOff ( your_side ) ;
17617: LD_OWVAR 2
17621: PPUSH
17622: CALL_OW 344
17626: END
// every 0 0$1 trigger StreamModeActive and sSun do
17627: LD_EXP 26
17631: PUSH
17632: LD_EXP 49
17636: AND
17637: IFFALSE 17665
17639: GO 17641
17641: DISABLE
// begin solar_recharge_percent := 0 ;
17642: LD_ADDR_OWVAR 79
17646: PUSH
17647: LD_INT 0
17649: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17650: LD_INT 10500
17652: PPUSH
17653: CALL_OW 67
// solar_recharge_percent := 100 ;
17657: LD_ADDR_OWVAR 79
17661: PUSH
17662: LD_INT 100
17664: ST_TO_ADDR
// end ;
17665: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17666: LD_EXP 26
17670: PUSH
17671: LD_EXP 50
17675: AND
17676: IFFALSE 17915
17678: GO 17680
17680: DISABLE
17681: LD_INT 0
17683: PPUSH
17684: PPUSH
17685: PPUSH
// begin tmp := [ ] ;
17686: LD_ADDR_VAR 0 3
17690: PUSH
17691: EMPTY
17692: ST_TO_ADDR
// for i := 1 to 6 do
17693: LD_ADDR_VAR 0 1
17697: PUSH
17698: DOUBLE
17699: LD_INT 1
17701: DEC
17702: ST_TO_ADDR
17703: LD_INT 6
17705: PUSH
17706: FOR_TO
17707: IFFALSE 17812
// begin uc_nation := nation_nature ;
17709: LD_ADDR_OWVAR 21
17713: PUSH
17714: LD_INT 0
17716: ST_TO_ADDR
// uc_side := 0 ;
17717: LD_ADDR_OWVAR 20
17721: PUSH
17722: LD_INT 0
17724: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17725: LD_ADDR_OWVAR 29
17729: PUSH
17730: LD_INT 12
17732: PUSH
17733: LD_INT 12
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: ST_TO_ADDR
// hc_agressivity := 20 ;
17740: LD_ADDR_OWVAR 35
17744: PUSH
17745: LD_INT 20
17747: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17748: LD_ADDR_OWVAR 28
17752: PUSH
17753: LD_INT 17
17755: ST_TO_ADDR
// hc_gallery :=  ;
17756: LD_ADDR_OWVAR 33
17760: PUSH
17761: LD_STRING 
17763: ST_TO_ADDR
// hc_name :=  ;
17764: LD_ADDR_OWVAR 26
17768: PUSH
17769: LD_STRING 
17771: ST_TO_ADDR
// un := CreateHuman ;
17772: LD_ADDR_VAR 0 2
17776: PUSH
17777: CALL_OW 44
17781: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17782: LD_VAR 0 2
17786: PPUSH
17787: LD_INT 1
17789: PPUSH
17790: CALL_OW 51
// tmp := tmp ^ un ;
17794: LD_ADDR_VAR 0 3
17798: PUSH
17799: LD_VAR 0 3
17803: PUSH
17804: LD_VAR 0 2
17808: ADD
17809: ST_TO_ADDR
// end ;
17810: GO 17706
17812: POP
17813: POP
// repeat wait ( 0 0$1 ) ;
17814: LD_INT 35
17816: PPUSH
17817: CALL_OW 67
// for un in tmp do
17821: LD_ADDR_VAR 0 2
17825: PUSH
17826: LD_VAR 0 3
17830: PUSH
17831: FOR_IN
17832: IFFALSE 17906
// begin if IsDead ( un ) then
17834: LD_VAR 0 2
17838: PPUSH
17839: CALL_OW 301
17843: IFFALSE 17863
// begin tmp := tmp diff un ;
17845: LD_ADDR_VAR 0 3
17849: PUSH
17850: LD_VAR 0 3
17854: PUSH
17855: LD_VAR 0 2
17859: DIFF
17860: ST_TO_ADDR
// continue ;
17861: GO 17831
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17863: LD_VAR 0 2
17867: PPUSH
17868: LD_INT 3
17870: PUSH
17871: LD_INT 22
17873: PUSH
17874: LD_INT 0
17876: PUSH
17877: EMPTY
17878: LIST
17879: LIST
17880: PUSH
17881: EMPTY
17882: LIST
17883: LIST
17884: PPUSH
17885: CALL_OW 69
17889: PPUSH
17890: LD_VAR 0 2
17894: PPUSH
17895: CALL_OW 74
17899: PPUSH
17900: CALL_OW 115
// end ;
17904: GO 17831
17906: POP
17907: POP
// until not tmp ;
17908: LD_VAR 0 3
17912: NOT
17913: IFFALSE 17814
// end ;
17915: PPOPN 3
17917: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17918: LD_EXP 26
17922: PUSH
17923: LD_EXP 51
17927: AND
17928: IFFALSE 17982
17930: GO 17932
17932: DISABLE
// begin ToLua ( displayTroll(); ) ;
17933: LD_STRING displayTroll();
17935: PPUSH
17936: CALL_OW 559
// wait ( 3 3$00 ) ;
17940: LD_INT 6300
17942: PPUSH
17943: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17947: LD_STRING hideTroll();
17949: PPUSH
17950: CALL_OW 559
// wait ( 1 1$00 ) ;
17954: LD_INT 2100
17956: PPUSH
17957: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17961: LD_STRING displayTroll();
17963: PPUSH
17964: CALL_OW 559
// wait ( 1 1$00 ) ;
17968: LD_INT 2100
17970: PPUSH
17971: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17975: LD_STRING hideTroll();
17977: PPUSH
17978: CALL_OW 559
// end ;
17982: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17983: LD_EXP 26
17987: PUSH
17988: LD_EXP 52
17992: AND
17993: IFFALSE 18056
17995: GO 17997
17997: DISABLE
17998: LD_INT 0
18000: PPUSH
// begin p := 0 ;
18001: LD_ADDR_VAR 0 1
18005: PUSH
18006: LD_INT 0
18008: ST_TO_ADDR
// repeat game_speed := 1 ;
18009: LD_ADDR_OWVAR 65
18013: PUSH
18014: LD_INT 1
18016: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18017: LD_INT 35
18019: PPUSH
18020: CALL_OW 67
// p := p + 1 ;
18024: LD_ADDR_VAR 0 1
18028: PUSH
18029: LD_VAR 0 1
18033: PUSH
18034: LD_INT 1
18036: PLUS
18037: ST_TO_ADDR
// until p >= 60 ;
18038: LD_VAR 0 1
18042: PUSH
18043: LD_INT 60
18045: GREATEREQUAL
18046: IFFALSE 18009
// game_speed := 4 ;
18048: LD_ADDR_OWVAR 65
18052: PUSH
18053: LD_INT 4
18055: ST_TO_ADDR
// end ;
18056: PPOPN 1
18058: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18059: LD_EXP 26
18063: PUSH
18064: LD_EXP 53
18068: AND
18069: IFFALSE 18215
18071: GO 18073
18073: DISABLE
18074: LD_INT 0
18076: PPUSH
18077: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18078: LD_ADDR_VAR 0 1
18082: PUSH
18083: LD_INT 22
18085: PUSH
18086: LD_OWVAR 2
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PUSH
18095: LD_INT 2
18097: PUSH
18098: LD_INT 30
18100: PUSH
18101: LD_INT 0
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: PUSH
18108: LD_INT 30
18110: PUSH
18111: LD_INT 1
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: LIST
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PPUSH
18127: CALL_OW 69
18131: ST_TO_ADDR
// if not depot then
18132: LD_VAR 0 1
18136: NOT
18137: IFFALSE 18141
// exit ;
18139: GO 18215
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18141: LD_ADDR_VAR 0 2
18145: PUSH
18146: LD_VAR 0 1
18150: PUSH
18151: LD_INT 1
18153: PPUSH
18154: LD_VAR 0 1
18158: PPUSH
18159: CALL_OW 12
18163: ARRAY
18164: PPUSH
18165: CALL_OW 274
18169: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18170: LD_VAR 0 2
18174: PPUSH
18175: LD_INT 1
18177: PPUSH
18178: LD_INT 0
18180: PPUSH
18181: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18185: LD_VAR 0 2
18189: PPUSH
18190: LD_INT 2
18192: PPUSH
18193: LD_INT 0
18195: PPUSH
18196: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18200: LD_VAR 0 2
18204: PPUSH
18205: LD_INT 3
18207: PPUSH
18208: LD_INT 0
18210: PPUSH
18211: CALL_OW 277
// end ;
18215: PPOPN 2
18217: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18218: LD_EXP 26
18222: PUSH
18223: LD_EXP 54
18227: AND
18228: IFFALSE 18325
18230: GO 18232
18232: DISABLE
18233: LD_INT 0
18235: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18236: LD_ADDR_VAR 0 1
18240: PUSH
18241: LD_INT 22
18243: PUSH
18244: LD_OWVAR 2
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: LD_INT 21
18255: PUSH
18256: LD_INT 1
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: PUSH
18263: LD_INT 3
18265: PUSH
18266: LD_INT 23
18268: PUSH
18269: LD_INT 0
18271: PUSH
18272: EMPTY
18273: LIST
18274: LIST
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: LIST
18284: PPUSH
18285: CALL_OW 69
18289: ST_TO_ADDR
// if not tmp then
18290: LD_VAR 0 1
18294: NOT
18295: IFFALSE 18299
// exit ;
18297: GO 18325
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18299: LD_VAR 0 1
18303: PUSH
18304: LD_INT 1
18306: PPUSH
18307: LD_VAR 0 1
18311: PPUSH
18312: CALL_OW 12
18316: ARRAY
18317: PPUSH
18318: LD_INT 200
18320: PPUSH
18321: CALL_OW 234
// end ;
18325: PPOPN 1
18327: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18328: LD_EXP 26
18332: PUSH
18333: LD_EXP 55
18337: AND
18338: IFFALSE 18417
18340: GO 18342
18342: DISABLE
18343: LD_INT 0
18345: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18346: LD_ADDR_VAR 0 1
18350: PUSH
18351: LD_INT 22
18353: PUSH
18354: LD_OWVAR 2
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: PUSH
18363: LD_INT 21
18365: PUSH
18366: LD_INT 2
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PPUSH
18377: CALL_OW 69
18381: ST_TO_ADDR
// if not tmp then
18382: LD_VAR 0 1
18386: NOT
18387: IFFALSE 18391
// exit ;
18389: GO 18417
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18391: LD_VAR 0 1
18395: PUSH
18396: LD_INT 1
18398: PPUSH
18399: LD_VAR 0 1
18403: PPUSH
18404: CALL_OW 12
18408: ARRAY
18409: PPUSH
18410: LD_INT 60
18412: PPUSH
18413: CALL_OW 234
// end ;
18417: PPOPN 1
18419: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18420: LD_EXP 26
18424: PUSH
18425: LD_EXP 56
18429: AND
18430: IFFALSE 18529
18432: GO 18434
18434: DISABLE
18435: LD_INT 0
18437: PPUSH
18438: PPUSH
// begin enable ;
18439: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18440: LD_ADDR_VAR 0 1
18444: PUSH
18445: LD_INT 22
18447: PUSH
18448: LD_OWVAR 2
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: LD_INT 61
18459: PUSH
18460: EMPTY
18461: LIST
18462: PUSH
18463: LD_INT 33
18465: PUSH
18466: LD_INT 2
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: LIST
18477: PPUSH
18478: CALL_OW 69
18482: ST_TO_ADDR
// if not tmp then
18483: LD_VAR 0 1
18487: NOT
18488: IFFALSE 18492
// exit ;
18490: GO 18529
// for i in tmp do
18492: LD_ADDR_VAR 0 2
18496: PUSH
18497: LD_VAR 0 1
18501: PUSH
18502: FOR_IN
18503: IFFALSE 18527
// if IsControledBy ( i ) then
18505: LD_VAR 0 2
18509: PPUSH
18510: CALL_OW 312
18514: IFFALSE 18525
// ComUnlink ( i ) ;
18516: LD_VAR 0 2
18520: PPUSH
18521: CALL_OW 136
18525: GO 18502
18527: POP
18528: POP
// end ;
18529: PPOPN 2
18531: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18532: LD_EXP 26
18536: PUSH
18537: LD_EXP 57
18541: AND
18542: IFFALSE 18682
18544: GO 18546
18546: DISABLE
18547: LD_INT 0
18549: PPUSH
18550: PPUSH
// begin ToLua ( displayPowell(); ) ;
18551: LD_STRING displayPowell();
18553: PPUSH
18554: CALL_OW 559
// uc_side := 0 ;
18558: LD_ADDR_OWVAR 20
18562: PUSH
18563: LD_INT 0
18565: ST_TO_ADDR
// uc_nation := 2 ;
18566: LD_ADDR_OWVAR 21
18570: PUSH
18571: LD_INT 2
18573: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18574: LD_ADDR_OWVAR 37
18578: PUSH
18579: LD_INT 14
18581: ST_TO_ADDR
// vc_engine := engine_siberite ;
18582: LD_ADDR_OWVAR 39
18586: PUSH
18587: LD_INT 3
18589: ST_TO_ADDR
// vc_control := control_apeman ;
18590: LD_ADDR_OWVAR 38
18594: PUSH
18595: LD_INT 5
18597: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18598: LD_ADDR_OWVAR 40
18602: PUSH
18603: LD_INT 29
18605: ST_TO_ADDR
// un := CreateVehicle ;
18606: LD_ADDR_VAR 0 2
18610: PUSH
18611: CALL_OW 45
18615: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18616: LD_VAR 0 2
18620: PPUSH
18621: LD_INT 1
18623: PPUSH
18624: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18628: LD_INT 35
18630: PPUSH
18631: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18635: LD_VAR 0 2
18639: PPUSH
18640: LD_INT 22
18642: PUSH
18643: LD_OWVAR 2
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: PPUSH
18652: CALL_OW 69
18656: PPUSH
18657: LD_VAR 0 2
18661: PPUSH
18662: CALL_OW 74
18666: PPUSH
18667: CALL_OW 115
// until IsDead ( un ) ;
18671: LD_VAR 0 2
18675: PPUSH
18676: CALL_OW 301
18680: IFFALSE 18628
// end ;
18682: PPOPN 2
18684: END
// every 0 0$1 trigger StreamModeActive and sStu do
18685: LD_EXP 26
18689: PUSH
18690: LD_EXP 65
18694: AND
18695: IFFALSE 18711
18697: GO 18699
18699: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18700: LD_STRING displayStucuk();
18702: PPUSH
18703: CALL_OW 559
// ResetFog ;
18707: CALL_OW 335
// end ;
18711: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18712: LD_EXP 26
18716: PUSH
18717: LD_EXP 58
18721: AND
18722: IFFALSE 18863
18724: GO 18726
18726: DISABLE
18727: LD_INT 0
18729: PPUSH
18730: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18731: LD_ADDR_VAR 0 2
18735: PUSH
18736: LD_INT 22
18738: PUSH
18739: LD_OWVAR 2
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: LD_INT 21
18750: PUSH
18751: LD_INT 1
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PPUSH
18762: CALL_OW 69
18766: ST_TO_ADDR
// if not tmp then
18767: LD_VAR 0 2
18771: NOT
18772: IFFALSE 18776
// exit ;
18774: GO 18863
// un := tmp [ rand ( 1 , tmp ) ] ;
18776: LD_ADDR_VAR 0 1
18780: PUSH
18781: LD_VAR 0 2
18785: PUSH
18786: LD_INT 1
18788: PPUSH
18789: LD_VAR 0 2
18793: PPUSH
18794: CALL_OW 12
18798: ARRAY
18799: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18800: LD_VAR 0 1
18804: PPUSH
18805: LD_INT 0
18807: PPUSH
18808: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18812: LD_VAR 0 1
18816: PPUSH
18817: LD_OWVAR 3
18821: PUSH
18822: LD_VAR 0 1
18826: DIFF
18827: PPUSH
18828: LD_VAR 0 1
18832: PPUSH
18833: CALL_OW 74
18837: PPUSH
18838: CALL_OW 115
// wait ( 0 0$20 ) ;
18842: LD_INT 700
18844: PPUSH
18845: CALL_OW 67
// SetSide ( un , your_side ) ;
18849: LD_VAR 0 1
18853: PPUSH
18854: LD_OWVAR 2
18858: PPUSH
18859: CALL_OW 235
// end ;
18863: PPOPN 2
18865: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18866: LD_EXP 26
18870: PUSH
18871: LD_EXP 59
18875: AND
18876: IFFALSE 18982
18878: GO 18880
18880: DISABLE
18881: LD_INT 0
18883: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18884: LD_ADDR_VAR 0 1
18888: PUSH
18889: LD_INT 22
18891: PUSH
18892: LD_OWVAR 2
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PUSH
18901: LD_INT 2
18903: PUSH
18904: LD_INT 30
18906: PUSH
18907: LD_INT 0
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: PUSH
18914: LD_INT 30
18916: PUSH
18917: LD_INT 1
18919: PUSH
18920: EMPTY
18921: LIST
18922: LIST
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: LIST
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PPUSH
18933: CALL_OW 69
18937: ST_TO_ADDR
// if not depot then
18938: LD_VAR 0 1
18942: NOT
18943: IFFALSE 18947
// exit ;
18945: GO 18982
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18947: LD_VAR 0 1
18951: PUSH
18952: LD_INT 1
18954: ARRAY
18955: PPUSH
18956: CALL_OW 250
18960: PPUSH
18961: LD_VAR 0 1
18965: PUSH
18966: LD_INT 1
18968: ARRAY
18969: PPUSH
18970: CALL_OW 251
18974: PPUSH
18975: LD_INT 70
18977: PPUSH
18978: CALL_OW 495
// end ;
18982: PPOPN 1
18984: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18985: LD_EXP 26
18989: PUSH
18990: LD_EXP 60
18994: AND
18995: IFFALSE 19206
18997: GO 18999
18999: DISABLE
19000: LD_INT 0
19002: PPUSH
19003: PPUSH
19004: PPUSH
19005: PPUSH
19006: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19007: LD_ADDR_VAR 0 5
19011: PUSH
19012: LD_INT 22
19014: PUSH
19015: LD_OWVAR 2
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 21
19026: PUSH
19027: LD_INT 1
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PPUSH
19038: CALL_OW 69
19042: ST_TO_ADDR
// if not tmp then
19043: LD_VAR 0 5
19047: NOT
19048: IFFALSE 19052
// exit ;
19050: GO 19206
// for i in tmp do
19052: LD_ADDR_VAR 0 1
19056: PUSH
19057: LD_VAR 0 5
19061: PUSH
19062: FOR_IN
19063: IFFALSE 19204
// begin d := rand ( 0 , 5 ) ;
19065: LD_ADDR_VAR 0 4
19069: PUSH
19070: LD_INT 0
19072: PPUSH
19073: LD_INT 5
19075: PPUSH
19076: CALL_OW 12
19080: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19081: LD_ADDR_VAR 0 2
19085: PUSH
19086: LD_VAR 0 1
19090: PPUSH
19091: CALL_OW 250
19095: PPUSH
19096: LD_VAR 0 4
19100: PPUSH
19101: LD_INT 3
19103: PPUSH
19104: LD_INT 12
19106: PPUSH
19107: CALL_OW 12
19111: PPUSH
19112: CALL_OW 272
19116: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19117: LD_ADDR_VAR 0 3
19121: PUSH
19122: LD_VAR 0 1
19126: PPUSH
19127: CALL_OW 251
19131: PPUSH
19132: LD_VAR 0 4
19136: PPUSH
19137: LD_INT 3
19139: PPUSH
19140: LD_INT 12
19142: PPUSH
19143: CALL_OW 12
19147: PPUSH
19148: CALL_OW 273
19152: ST_TO_ADDR
// if ValidHex ( x , y ) then
19153: LD_VAR 0 2
19157: PPUSH
19158: LD_VAR 0 3
19162: PPUSH
19163: CALL_OW 488
19167: IFFALSE 19202
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19169: LD_VAR 0 1
19173: PPUSH
19174: LD_VAR 0 2
19178: PPUSH
19179: LD_VAR 0 3
19183: PPUSH
19184: LD_INT 3
19186: PPUSH
19187: LD_INT 6
19189: PPUSH
19190: CALL_OW 12
19194: PPUSH
19195: LD_INT 1
19197: PPUSH
19198: CALL_OW 483
// end ;
19202: GO 19062
19204: POP
19205: POP
// end ;
19206: PPOPN 5
19208: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19209: LD_EXP 26
19213: PUSH
19214: LD_EXP 61
19218: AND
19219: IFFALSE 19313
19221: GO 19223
19223: DISABLE
19224: LD_INT 0
19226: PPUSH
19227: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19228: LD_ADDR_VAR 0 2
19232: PUSH
19233: LD_INT 22
19235: PUSH
19236: LD_OWVAR 2
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: PUSH
19245: LD_INT 32
19247: PUSH
19248: LD_INT 1
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PUSH
19255: LD_INT 21
19257: PUSH
19258: LD_INT 2
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: LIST
19269: PPUSH
19270: CALL_OW 69
19274: ST_TO_ADDR
// if not tmp then
19275: LD_VAR 0 2
19279: NOT
19280: IFFALSE 19284
// exit ;
19282: GO 19313
// for i in tmp do
19284: LD_ADDR_VAR 0 1
19288: PUSH
19289: LD_VAR 0 2
19293: PUSH
19294: FOR_IN
19295: IFFALSE 19311
// SetFuel ( i , 0 ) ;
19297: LD_VAR 0 1
19301: PPUSH
19302: LD_INT 0
19304: PPUSH
19305: CALL_OW 240
19309: GO 19294
19311: POP
19312: POP
// end ;
19313: PPOPN 2
19315: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19316: LD_EXP 26
19320: PUSH
19321: LD_EXP 62
19325: AND
19326: IFFALSE 19392
19328: GO 19330
19330: DISABLE
19331: LD_INT 0
19333: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19334: LD_ADDR_VAR 0 1
19338: PUSH
19339: LD_INT 22
19341: PUSH
19342: LD_OWVAR 2
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PUSH
19351: LD_INT 30
19353: PUSH
19354: LD_INT 29
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: PPUSH
19365: CALL_OW 69
19369: ST_TO_ADDR
// if not tmp then
19370: LD_VAR 0 1
19374: NOT
19375: IFFALSE 19379
// exit ;
19377: GO 19392
// DestroyUnit ( tmp [ 1 ] ) ;
19379: LD_VAR 0 1
19383: PUSH
19384: LD_INT 1
19386: ARRAY
19387: PPUSH
19388: CALL_OW 65
// end ;
19392: PPOPN 1
19394: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19395: LD_EXP 26
19399: PUSH
19400: LD_EXP 64
19404: AND
19405: IFFALSE 19534
19407: GO 19409
19409: DISABLE
19410: LD_INT 0
19412: PPUSH
// begin uc_side := 0 ;
19413: LD_ADDR_OWVAR 20
19417: PUSH
19418: LD_INT 0
19420: ST_TO_ADDR
// uc_nation := nation_arabian ;
19421: LD_ADDR_OWVAR 21
19425: PUSH
19426: LD_INT 2
19428: ST_TO_ADDR
// hc_gallery :=  ;
19429: LD_ADDR_OWVAR 33
19433: PUSH
19434: LD_STRING 
19436: ST_TO_ADDR
// hc_name :=  ;
19437: LD_ADDR_OWVAR 26
19441: PUSH
19442: LD_STRING 
19444: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19445: LD_INT 1
19447: PPUSH
19448: LD_INT 11
19450: PPUSH
19451: LD_INT 10
19453: PPUSH
19454: CALL_OW 380
// un := CreateHuman ;
19458: LD_ADDR_VAR 0 1
19462: PUSH
19463: CALL_OW 44
19467: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19468: LD_VAR 0 1
19472: PPUSH
19473: LD_INT 1
19475: PPUSH
19476: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19480: LD_INT 35
19482: PPUSH
19483: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19487: LD_VAR 0 1
19491: PPUSH
19492: LD_INT 22
19494: PUSH
19495: LD_OWVAR 2
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PPUSH
19504: CALL_OW 69
19508: PPUSH
19509: LD_VAR 0 1
19513: PPUSH
19514: CALL_OW 74
19518: PPUSH
19519: CALL_OW 115
// until IsDead ( un ) ;
19523: LD_VAR 0 1
19527: PPUSH
19528: CALL_OW 301
19532: IFFALSE 19480
// end ;
19534: PPOPN 1
19536: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19537: LD_EXP 26
19541: PUSH
19542: LD_EXP 66
19546: AND
19547: IFFALSE 19559
19549: GO 19551
19551: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19552: LD_STRING earthquake(getX(game), 0, 32)
19554: PPUSH
19555: CALL_OW 559
19559: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19560: LD_EXP 26
19564: PUSH
19565: LD_EXP 67
19569: AND
19570: IFFALSE 19661
19572: GO 19574
19574: DISABLE
19575: LD_INT 0
19577: PPUSH
// begin enable ;
19578: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19579: LD_ADDR_VAR 0 1
19583: PUSH
19584: LD_INT 22
19586: PUSH
19587: LD_OWVAR 2
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: LD_INT 21
19598: PUSH
19599: LD_INT 2
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 33
19608: PUSH
19609: LD_INT 3
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: LIST
19620: PPUSH
19621: CALL_OW 69
19625: ST_TO_ADDR
// if not tmp then
19626: LD_VAR 0 1
19630: NOT
19631: IFFALSE 19635
// exit ;
19633: GO 19661
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19635: LD_VAR 0 1
19639: PUSH
19640: LD_INT 1
19642: PPUSH
19643: LD_VAR 0 1
19647: PPUSH
19648: CALL_OW 12
19652: ARRAY
19653: PPUSH
19654: LD_INT 1
19656: PPUSH
19657: CALL_OW 234
// end ;
19661: PPOPN 1
19663: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19664: LD_EXP 26
19668: PUSH
19669: LD_EXP 68
19673: AND
19674: IFFALSE 19815
19676: GO 19678
19678: DISABLE
19679: LD_INT 0
19681: PPUSH
19682: PPUSH
19683: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19684: LD_ADDR_VAR 0 3
19688: PUSH
19689: LD_INT 22
19691: PUSH
19692: LD_OWVAR 2
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PUSH
19701: LD_INT 25
19703: PUSH
19704: LD_INT 1
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PPUSH
19715: CALL_OW 69
19719: ST_TO_ADDR
// if not tmp then
19720: LD_VAR 0 3
19724: NOT
19725: IFFALSE 19729
// exit ;
19727: GO 19815
// un := tmp [ rand ( 1 , tmp ) ] ;
19729: LD_ADDR_VAR 0 2
19733: PUSH
19734: LD_VAR 0 3
19738: PUSH
19739: LD_INT 1
19741: PPUSH
19742: LD_VAR 0 3
19746: PPUSH
19747: CALL_OW 12
19751: ARRAY
19752: ST_TO_ADDR
// if Crawls ( un ) then
19753: LD_VAR 0 2
19757: PPUSH
19758: CALL_OW 318
19762: IFFALSE 19773
// ComWalk ( un ) ;
19764: LD_VAR 0 2
19768: PPUSH
19769: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19773: LD_VAR 0 2
19777: PPUSH
19778: LD_INT 9
19780: PPUSH
19781: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19785: LD_INT 28
19787: PPUSH
19788: LD_OWVAR 2
19792: PPUSH
19793: LD_INT 2
19795: PPUSH
19796: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19800: LD_INT 29
19802: PPUSH
19803: LD_OWVAR 2
19807: PPUSH
19808: LD_INT 2
19810: PPUSH
19811: CALL_OW 322
// end ;
19815: PPOPN 3
19817: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19818: LD_EXP 26
19822: PUSH
19823: LD_EXP 69
19827: AND
19828: IFFALSE 19939
19830: GO 19832
19832: DISABLE
19833: LD_INT 0
19835: PPUSH
19836: PPUSH
19837: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19838: LD_ADDR_VAR 0 3
19842: PUSH
19843: LD_INT 22
19845: PUSH
19846: LD_OWVAR 2
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: PUSH
19855: LD_INT 25
19857: PUSH
19858: LD_INT 1
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: PPUSH
19869: CALL_OW 69
19873: ST_TO_ADDR
// if not tmp then
19874: LD_VAR 0 3
19878: NOT
19879: IFFALSE 19883
// exit ;
19881: GO 19939
// un := tmp [ rand ( 1 , tmp ) ] ;
19883: LD_ADDR_VAR 0 2
19887: PUSH
19888: LD_VAR 0 3
19892: PUSH
19893: LD_INT 1
19895: PPUSH
19896: LD_VAR 0 3
19900: PPUSH
19901: CALL_OW 12
19905: ARRAY
19906: ST_TO_ADDR
// if Crawls ( un ) then
19907: LD_VAR 0 2
19911: PPUSH
19912: CALL_OW 318
19916: IFFALSE 19927
// ComWalk ( un ) ;
19918: LD_VAR 0 2
19922: PPUSH
19923: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19927: LD_VAR 0 2
19931: PPUSH
19932: LD_INT 8
19934: PPUSH
19935: CALL_OW 336
// end ;
19939: PPOPN 3
19941: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19942: LD_EXP 26
19946: PUSH
19947: LD_EXP 70
19951: AND
19952: IFFALSE 20096
19954: GO 19956
19956: DISABLE
19957: LD_INT 0
19959: PPUSH
19960: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19961: LD_ADDR_VAR 0 2
19965: PUSH
19966: LD_INT 22
19968: PUSH
19969: LD_OWVAR 2
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: PUSH
19978: LD_INT 21
19980: PUSH
19981: LD_INT 2
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: PUSH
19988: LD_INT 2
19990: PUSH
19991: LD_INT 34
19993: PUSH
19994: LD_INT 12
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: LD_INT 34
20003: PUSH
20004: LD_INT 51
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: LD_INT 34
20013: PUSH
20014: LD_INT 32
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: LIST
20031: PPUSH
20032: CALL_OW 69
20036: ST_TO_ADDR
// if not tmp then
20037: LD_VAR 0 2
20041: NOT
20042: IFFALSE 20046
// exit ;
20044: GO 20096
// for i in tmp do
20046: LD_ADDR_VAR 0 1
20050: PUSH
20051: LD_VAR 0 2
20055: PUSH
20056: FOR_IN
20057: IFFALSE 20094
// if GetCargo ( i , mat_artifact ) = 0 then
20059: LD_VAR 0 1
20063: PPUSH
20064: LD_INT 4
20066: PPUSH
20067: CALL_OW 289
20071: PUSH
20072: LD_INT 0
20074: EQUAL
20075: IFFALSE 20092
// SetCargo ( i , mat_siberit , 100 ) ;
20077: LD_VAR 0 1
20081: PPUSH
20082: LD_INT 3
20084: PPUSH
20085: LD_INT 100
20087: PPUSH
20088: CALL_OW 290
20092: GO 20056
20094: POP
20095: POP
// end ;
20096: PPOPN 2
20098: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20099: LD_EXP 26
20103: PUSH
20104: LD_EXP 71
20108: AND
20109: IFFALSE 20292
20111: GO 20113
20113: DISABLE
20114: LD_INT 0
20116: PPUSH
20117: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20118: LD_ADDR_VAR 0 2
20122: PUSH
20123: LD_INT 22
20125: PUSH
20126: LD_OWVAR 2
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: PPUSH
20135: CALL_OW 69
20139: ST_TO_ADDR
// if not tmp then
20140: LD_VAR 0 2
20144: NOT
20145: IFFALSE 20149
// exit ;
20147: GO 20292
// for i := 1 to 2 do
20149: LD_ADDR_VAR 0 1
20153: PUSH
20154: DOUBLE
20155: LD_INT 1
20157: DEC
20158: ST_TO_ADDR
20159: LD_INT 2
20161: PUSH
20162: FOR_TO
20163: IFFALSE 20290
// begin uc_side := your_side ;
20165: LD_ADDR_OWVAR 20
20169: PUSH
20170: LD_OWVAR 2
20174: ST_TO_ADDR
// uc_nation := nation_american ;
20175: LD_ADDR_OWVAR 21
20179: PUSH
20180: LD_INT 1
20182: ST_TO_ADDR
// vc_chassis := us_morphling ;
20183: LD_ADDR_OWVAR 37
20187: PUSH
20188: LD_INT 5
20190: ST_TO_ADDR
// vc_engine := engine_siberite ;
20191: LD_ADDR_OWVAR 39
20195: PUSH
20196: LD_INT 3
20198: ST_TO_ADDR
// vc_control := control_computer ;
20199: LD_ADDR_OWVAR 38
20203: PUSH
20204: LD_INT 3
20206: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20207: LD_ADDR_OWVAR 40
20211: PUSH
20212: LD_INT 10
20214: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20215: LD_VAR 0 2
20219: PUSH
20220: LD_INT 1
20222: ARRAY
20223: PPUSH
20224: CALL_OW 310
20228: NOT
20229: IFFALSE 20276
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20231: CALL_OW 45
20235: PPUSH
20236: LD_VAR 0 2
20240: PUSH
20241: LD_INT 1
20243: ARRAY
20244: PPUSH
20245: CALL_OW 250
20249: PPUSH
20250: LD_VAR 0 2
20254: PUSH
20255: LD_INT 1
20257: ARRAY
20258: PPUSH
20259: CALL_OW 251
20263: PPUSH
20264: LD_INT 12
20266: PPUSH
20267: LD_INT 1
20269: PPUSH
20270: CALL_OW 50
20274: GO 20288
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20276: CALL_OW 45
20280: PPUSH
20281: LD_INT 1
20283: PPUSH
20284: CALL_OW 51
// end ;
20288: GO 20162
20290: POP
20291: POP
// end ;
20292: PPOPN 2
20294: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20295: LD_EXP 26
20299: PUSH
20300: LD_EXP 72
20304: AND
20305: IFFALSE 20527
20307: GO 20309
20309: DISABLE
20310: LD_INT 0
20312: PPUSH
20313: PPUSH
20314: PPUSH
20315: PPUSH
20316: PPUSH
20317: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20318: LD_ADDR_VAR 0 6
20322: PUSH
20323: LD_INT 22
20325: PUSH
20326: LD_OWVAR 2
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: LD_INT 21
20337: PUSH
20338: LD_INT 1
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: PUSH
20345: LD_INT 3
20347: PUSH
20348: LD_INT 23
20350: PUSH
20351: LD_INT 0
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: LIST
20366: PPUSH
20367: CALL_OW 69
20371: ST_TO_ADDR
// if not tmp then
20372: LD_VAR 0 6
20376: NOT
20377: IFFALSE 20381
// exit ;
20379: GO 20527
// s1 := rand ( 1 , 4 ) ;
20381: LD_ADDR_VAR 0 2
20385: PUSH
20386: LD_INT 1
20388: PPUSH
20389: LD_INT 4
20391: PPUSH
20392: CALL_OW 12
20396: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20397: LD_ADDR_VAR 0 4
20401: PUSH
20402: LD_VAR 0 6
20406: PUSH
20407: LD_INT 1
20409: ARRAY
20410: PPUSH
20411: LD_VAR 0 2
20415: PPUSH
20416: CALL_OW 259
20420: ST_TO_ADDR
// if s1 = 1 then
20421: LD_VAR 0 2
20425: PUSH
20426: LD_INT 1
20428: EQUAL
20429: IFFALSE 20449
// s2 := rand ( 2 , 4 ) else
20431: LD_ADDR_VAR 0 3
20435: PUSH
20436: LD_INT 2
20438: PPUSH
20439: LD_INT 4
20441: PPUSH
20442: CALL_OW 12
20446: ST_TO_ADDR
20447: GO 20457
// s2 := 1 ;
20449: LD_ADDR_VAR 0 3
20453: PUSH
20454: LD_INT 1
20456: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20457: LD_ADDR_VAR 0 5
20461: PUSH
20462: LD_VAR 0 6
20466: PUSH
20467: LD_INT 1
20469: ARRAY
20470: PPUSH
20471: LD_VAR 0 3
20475: PPUSH
20476: CALL_OW 259
20480: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20481: LD_VAR 0 6
20485: PUSH
20486: LD_INT 1
20488: ARRAY
20489: PPUSH
20490: LD_VAR 0 2
20494: PPUSH
20495: LD_VAR 0 5
20499: PPUSH
20500: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20504: LD_VAR 0 6
20508: PUSH
20509: LD_INT 1
20511: ARRAY
20512: PPUSH
20513: LD_VAR 0 3
20517: PPUSH
20518: LD_VAR 0 4
20522: PPUSH
20523: CALL_OW 237
// end ;
20527: PPOPN 6
20529: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20530: LD_EXP 26
20534: PUSH
20535: LD_EXP 73
20539: AND
20540: IFFALSE 20619
20542: GO 20544
20544: DISABLE
20545: LD_INT 0
20547: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20548: LD_ADDR_VAR 0 1
20552: PUSH
20553: LD_INT 22
20555: PUSH
20556: LD_OWVAR 2
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: PUSH
20565: LD_INT 30
20567: PUSH
20568: LD_INT 3
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: PPUSH
20579: CALL_OW 69
20583: ST_TO_ADDR
// if not tmp then
20584: LD_VAR 0 1
20588: NOT
20589: IFFALSE 20593
// exit ;
20591: GO 20619
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20593: LD_VAR 0 1
20597: PUSH
20598: LD_INT 1
20600: PPUSH
20601: LD_VAR 0 1
20605: PPUSH
20606: CALL_OW 12
20610: ARRAY
20611: PPUSH
20612: LD_INT 1
20614: PPUSH
20615: CALL_OW 234
// end ;
20619: PPOPN 1
20621: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20622: LD_EXP 26
20626: PUSH
20627: LD_EXP 74
20631: AND
20632: IFFALSE 20744
20634: GO 20636
20636: DISABLE
20637: LD_INT 0
20639: PPUSH
20640: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20641: LD_ADDR_VAR 0 2
20645: PUSH
20646: LD_INT 22
20648: PUSH
20649: LD_OWVAR 2
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: PUSH
20658: LD_INT 2
20660: PUSH
20661: LD_INT 30
20663: PUSH
20664: LD_INT 27
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: LD_INT 30
20673: PUSH
20674: LD_INT 26
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 30
20683: PUSH
20684: LD_INT 28
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: PPUSH
20701: CALL_OW 69
20705: ST_TO_ADDR
// if not tmp then
20706: LD_VAR 0 2
20710: NOT
20711: IFFALSE 20715
// exit ;
20713: GO 20744
// for i in tmp do
20715: LD_ADDR_VAR 0 1
20719: PUSH
20720: LD_VAR 0 2
20724: PUSH
20725: FOR_IN
20726: IFFALSE 20742
// SetLives ( i , 1 ) ;
20728: LD_VAR 0 1
20732: PPUSH
20733: LD_INT 1
20735: PPUSH
20736: CALL_OW 234
20740: GO 20725
20742: POP
20743: POP
// end ;
20744: PPOPN 2
20746: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20747: LD_EXP 26
20751: PUSH
20752: LD_EXP 75
20756: AND
20757: IFFALSE 21044
20759: GO 20761
20761: DISABLE
20762: LD_INT 0
20764: PPUSH
20765: PPUSH
20766: PPUSH
// begin i := rand ( 1 , 7 ) ;
20767: LD_ADDR_VAR 0 1
20771: PUSH
20772: LD_INT 1
20774: PPUSH
20775: LD_INT 7
20777: PPUSH
20778: CALL_OW 12
20782: ST_TO_ADDR
// case i of 1 :
20783: LD_VAR 0 1
20787: PUSH
20788: LD_INT 1
20790: DOUBLE
20791: EQUAL
20792: IFTRUE 20796
20794: GO 20806
20796: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20797: LD_STRING earthquake(getX(game), 0, 32)
20799: PPUSH
20800: CALL_OW 559
20804: GO 21044
20806: LD_INT 2
20808: DOUBLE
20809: EQUAL
20810: IFTRUE 20814
20812: GO 20828
20814: POP
// begin ToLua ( displayStucuk(); ) ;
20815: LD_STRING displayStucuk();
20817: PPUSH
20818: CALL_OW 559
// ResetFog ;
20822: CALL_OW 335
// end ; 3 :
20826: GO 21044
20828: LD_INT 3
20830: DOUBLE
20831: EQUAL
20832: IFTRUE 20836
20834: GO 20940
20836: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20837: LD_ADDR_VAR 0 2
20841: PUSH
20842: LD_INT 22
20844: PUSH
20845: LD_OWVAR 2
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PUSH
20854: LD_INT 25
20856: PUSH
20857: LD_INT 1
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: PUSH
20864: EMPTY
20865: LIST
20866: LIST
20867: PPUSH
20868: CALL_OW 69
20872: ST_TO_ADDR
// if not tmp then
20873: LD_VAR 0 2
20877: NOT
20878: IFFALSE 20882
// exit ;
20880: GO 21044
// un := tmp [ rand ( 1 , tmp ) ] ;
20882: LD_ADDR_VAR 0 3
20886: PUSH
20887: LD_VAR 0 2
20891: PUSH
20892: LD_INT 1
20894: PPUSH
20895: LD_VAR 0 2
20899: PPUSH
20900: CALL_OW 12
20904: ARRAY
20905: ST_TO_ADDR
// if Crawls ( un ) then
20906: LD_VAR 0 3
20910: PPUSH
20911: CALL_OW 318
20915: IFFALSE 20926
// ComWalk ( un ) ;
20917: LD_VAR 0 3
20921: PPUSH
20922: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20926: LD_VAR 0 3
20930: PPUSH
20931: LD_INT 8
20933: PPUSH
20934: CALL_OW 336
// end ; 4 :
20938: GO 21044
20940: LD_INT 4
20942: DOUBLE
20943: EQUAL
20944: IFTRUE 20948
20946: GO 21022
20948: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20949: LD_ADDR_VAR 0 2
20953: PUSH
20954: LD_INT 22
20956: PUSH
20957: LD_OWVAR 2
20961: PUSH
20962: EMPTY
20963: LIST
20964: LIST
20965: PUSH
20966: LD_INT 30
20968: PUSH
20969: LD_INT 29
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: PPUSH
20980: CALL_OW 69
20984: ST_TO_ADDR
// if not tmp then
20985: LD_VAR 0 2
20989: NOT
20990: IFFALSE 20994
// exit ;
20992: GO 21044
// CenterNowOnUnits ( tmp [ 1 ] ) ;
20994: LD_VAR 0 2
20998: PUSH
20999: LD_INT 1
21001: ARRAY
21002: PPUSH
21003: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21007: LD_VAR 0 2
21011: PUSH
21012: LD_INT 1
21014: ARRAY
21015: PPUSH
21016: CALL_OW 65
// end ; 5 .. 7 :
21020: GO 21044
21022: LD_INT 5
21024: DOUBLE
21025: GREATEREQUAL
21026: IFFALSE 21034
21028: LD_INT 7
21030: DOUBLE
21031: LESSEQUAL
21032: IFTRUE 21036
21034: GO 21043
21036: POP
// StreamSibBomb ; end ;
21037: CALL 17281 0 0
21041: GO 21044
21043: POP
// end ;
21044: PPOPN 3
21046: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21047: LD_EXP 26
21051: PUSH
21052: LD_EXP 76
21056: AND
21057: IFFALSE 21213
21059: GO 21061
21061: DISABLE
21062: LD_INT 0
21064: PPUSH
21065: PPUSH
21066: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21067: LD_ADDR_VAR 0 2
21071: PUSH
21072: LD_INT 81
21074: PUSH
21075: LD_OWVAR 2
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: PUSH
21084: LD_INT 2
21086: PUSH
21087: LD_INT 21
21089: PUSH
21090: LD_INT 1
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PUSH
21097: LD_INT 21
21099: PUSH
21100: LD_INT 2
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: LIST
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: PPUSH
21116: CALL_OW 69
21120: ST_TO_ADDR
// if not tmp then
21121: LD_VAR 0 2
21125: NOT
21126: IFFALSE 21130
// exit ;
21128: GO 21213
// p := 0 ;
21130: LD_ADDR_VAR 0 3
21134: PUSH
21135: LD_INT 0
21137: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21138: LD_INT 35
21140: PPUSH
21141: CALL_OW 67
// p := p + 1 ;
21145: LD_ADDR_VAR 0 3
21149: PUSH
21150: LD_VAR 0 3
21154: PUSH
21155: LD_INT 1
21157: PLUS
21158: ST_TO_ADDR
// for i in tmp do
21159: LD_ADDR_VAR 0 1
21163: PUSH
21164: LD_VAR 0 2
21168: PUSH
21169: FOR_IN
21170: IFFALSE 21201
// if GetLives ( i ) < 1000 then
21172: LD_VAR 0 1
21176: PPUSH
21177: CALL_OW 256
21181: PUSH
21182: LD_INT 1000
21184: LESS
21185: IFFALSE 21199
// SetLives ( i , 1000 ) ;
21187: LD_VAR 0 1
21191: PPUSH
21192: LD_INT 1000
21194: PPUSH
21195: CALL_OW 234
21199: GO 21169
21201: POP
21202: POP
// until p > 20 ;
21203: LD_VAR 0 3
21207: PUSH
21208: LD_INT 20
21210: GREATER
21211: IFFALSE 21138
// end ;
21213: PPOPN 3
21215: END
// every 0 0$1 trigger StreamModeActive and sTime do
21216: LD_EXP 26
21220: PUSH
21221: LD_EXP 77
21225: AND
21226: IFFALSE 21261
21228: GO 21230
21230: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21231: LD_INT 28
21233: PPUSH
21234: LD_OWVAR 2
21238: PPUSH
21239: LD_INT 2
21241: PPUSH
21242: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21246: LD_INT 30
21248: PPUSH
21249: LD_OWVAR 2
21253: PPUSH
21254: LD_INT 2
21256: PPUSH
21257: CALL_OW 322
// end ;
21261: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21262: LD_EXP 26
21266: PUSH
21267: LD_EXP 78
21271: AND
21272: IFFALSE 21393
21274: GO 21276
21276: DISABLE
21277: LD_INT 0
21279: PPUSH
21280: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21281: LD_ADDR_VAR 0 2
21285: PUSH
21286: LD_INT 22
21288: PUSH
21289: LD_OWVAR 2
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: PUSH
21298: LD_INT 21
21300: PUSH
21301: LD_INT 1
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: PUSH
21308: LD_INT 3
21310: PUSH
21311: LD_INT 23
21313: PUSH
21314: LD_INT 0
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: LIST
21329: PPUSH
21330: CALL_OW 69
21334: ST_TO_ADDR
// if not tmp then
21335: LD_VAR 0 2
21339: NOT
21340: IFFALSE 21344
// exit ;
21342: GO 21393
// for i in tmp do
21344: LD_ADDR_VAR 0 1
21348: PUSH
21349: LD_VAR 0 2
21353: PUSH
21354: FOR_IN
21355: IFFALSE 21391
// begin if Crawls ( i ) then
21357: LD_VAR 0 1
21361: PPUSH
21362: CALL_OW 318
21366: IFFALSE 21377
// ComWalk ( i ) ;
21368: LD_VAR 0 1
21372: PPUSH
21373: CALL_OW 138
// SetClass ( i , 2 ) ;
21377: LD_VAR 0 1
21381: PPUSH
21382: LD_INT 2
21384: PPUSH
21385: CALL_OW 336
// end ;
21389: GO 21354
21391: POP
21392: POP
// end ;
21393: PPOPN 2
21395: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21396: LD_EXP 26
21400: PUSH
21401: LD_EXP 79
21405: AND
21406: IFFALSE 21694
21408: GO 21410
21410: DISABLE
21411: LD_INT 0
21413: PPUSH
21414: PPUSH
21415: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21416: LD_OWVAR 2
21420: PPUSH
21421: LD_INT 9
21423: PPUSH
21424: LD_INT 1
21426: PPUSH
21427: LD_INT 1
21429: PPUSH
21430: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21434: LD_INT 9
21436: PPUSH
21437: LD_OWVAR 2
21441: PPUSH
21442: CALL_OW 343
// uc_side := 9 ;
21446: LD_ADDR_OWVAR 20
21450: PUSH
21451: LD_INT 9
21453: ST_TO_ADDR
// uc_nation := 2 ;
21454: LD_ADDR_OWVAR 21
21458: PUSH
21459: LD_INT 2
21461: ST_TO_ADDR
// hc_name := Dark Warrior ;
21462: LD_ADDR_OWVAR 26
21466: PUSH
21467: LD_STRING Dark Warrior
21469: ST_TO_ADDR
// hc_gallery :=  ;
21470: LD_ADDR_OWVAR 33
21474: PUSH
21475: LD_STRING 
21477: ST_TO_ADDR
// hc_noskilllimit := true ;
21478: LD_ADDR_OWVAR 76
21482: PUSH
21483: LD_INT 1
21485: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
21486: LD_ADDR_OWVAR 31
21490: PUSH
21491: LD_INT 30
21493: PUSH
21494: LD_INT 30
21496: PUSH
21497: LD_INT 30
21499: PUSH
21500: LD_INT 30
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: ST_TO_ADDR
// un := CreateHuman ;
21509: LD_ADDR_VAR 0 3
21513: PUSH
21514: CALL_OW 44
21518: ST_TO_ADDR
// hc_noskilllimit := false ;
21519: LD_ADDR_OWVAR 76
21523: PUSH
21524: LD_INT 0
21526: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21527: LD_VAR 0 3
21531: PPUSH
21532: LD_INT 1
21534: PPUSH
21535: CALL_OW 51
// ToLua ( playRanger() ) ;
21539: LD_STRING playRanger()
21541: PPUSH
21542: CALL_OW 559
// p := 0 ;
21546: LD_ADDR_VAR 0 2
21550: PUSH
21551: LD_INT 0
21553: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21554: LD_INT 35
21556: PPUSH
21557: CALL_OW 67
// p := p + 1 ;
21561: LD_ADDR_VAR 0 2
21565: PUSH
21566: LD_VAR 0 2
21570: PUSH
21571: LD_INT 1
21573: PLUS
21574: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21575: LD_VAR 0 3
21579: PPUSH
21580: CALL_OW 256
21584: PUSH
21585: LD_INT 1000
21587: LESS
21588: IFFALSE 21602
// SetLives ( un , 1000 ) ;
21590: LD_VAR 0 3
21594: PPUSH
21595: LD_INT 1000
21597: PPUSH
21598: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21602: LD_VAR 0 3
21606: PPUSH
21607: LD_INT 81
21609: PUSH
21610: LD_OWVAR 2
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: LD_INT 91
21621: PUSH
21622: LD_VAR 0 3
21626: PUSH
21627: LD_INT 30
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: LIST
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PPUSH
21639: CALL_OW 69
21643: PPUSH
21644: LD_VAR 0 3
21648: PPUSH
21649: CALL_OW 74
21653: PPUSH
21654: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
21658: LD_VAR 0 2
21662: PUSH
21663: LD_INT 80
21665: GREATER
21666: PUSH
21667: LD_VAR 0 3
21671: PPUSH
21672: CALL_OW 301
21676: OR
21677: IFFALSE 21554
// if un then
21679: LD_VAR 0 3
21683: IFFALSE 21694
// RemoveUnit ( un ) ;
21685: LD_VAR 0 3
21689: PPUSH
21690: CALL_OW 64
// end ;
21694: PPOPN 3
21696: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
21697: LD_EXP 80
21701: IFFALSE 21817
21703: GO 21705
21705: DISABLE
21706: LD_INT 0
21708: PPUSH
21709: PPUSH
21710: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21711: LD_ADDR_VAR 0 2
21715: PUSH
21716: LD_INT 81
21718: PUSH
21719: LD_OWVAR 2
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PUSH
21728: LD_INT 21
21730: PUSH
21731: LD_INT 1
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PPUSH
21742: CALL_OW 69
21746: ST_TO_ADDR
// ToLua ( playComputer() ) ;
21747: LD_STRING playComputer()
21749: PPUSH
21750: CALL_OW 559
// if not tmp then
21754: LD_VAR 0 2
21758: NOT
21759: IFFALSE 21763
// exit ;
21761: GO 21817
// for i in tmp do
21763: LD_ADDR_VAR 0 1
21767: PUSH
21768: LD_VAR 0 2
21772: PUSH
21773: FOR_IN
21774: IFFALSE 21815
// for j := 1 to 4 do
21776: LD_ADDR_VAR 0 3
21780: PUSH
21781: DOUBLE
21782: LD_INT 1
21784: DEC
21785: ST_TO_ADDR
21786: LD_INT 4
21788: PUSH
21789: FOR_TO
21790: IFFALSE 21811
// SetSkill ( i , j , 10 ) ;
21792: LD_VAR 0 1
21796: PPUSH
21797: LD_VAR 0 3
21801: PPUSH
21802: LD_INT 10
21804: PPUSH
21805: CALL_OW 237
21809: GO 21789
21811: POP
21812: POP
21813: GO 21773
21815: POP
21816: POP
// end ;
21817: PPOPN 3
21819: END
// every 0 0$1 trigger s30 do var i , tmp ;
21820: LD_EXP 81
21824: IFFALSE 21893
21826: GO 21828
21828: DISABLE
21829: LD_INT 0
21831: PPUSH
21832: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21833: LD_ADDR_VAR 0 2
21837: PUSH
21838: LD_INT 22
21840: PUSH
21841: LD_OWVAR 2
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PPUSH
21850: CALL_OW 69
21854: ST_TO_ADDR
// if not tmp then
21855: LD_VAR 0 2
21859: NOT
21860: IFFALSE 21864
// exit ;
21862: GO 21893
// for i in tmp do
21864: LD_ADDR_VAR 0 1
21868: PUSH
21869: LD_VAR 0 2
21873: PUSH
21874: FOR_IN
21875: IFFALSE 21891
// SetLives ( i , 300 ) ;
21877: LD_VAR 0 1
21881: PPUSH
21882: LD_INT 300
21884: PPUSH
21885: CALL_OW 234
21889: GO 21874
21891: POP
21892: POP
// end ;
21893: PPOPN 2
21895: END
// every 0 0$1 trigger s60 do var i , tmp ;
21896: LD_EXP 82
21900: IFFALSE 21969
21902: GO 21904
21904: DISABLE
21905: LD_INT 0
21907: PPUSH
21908: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21909: LD_ADDR_VAR 0 2
21913: PUSH
21914: LD_INT 22
21916: PUSH
21917: LD_OWVAR 2
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: PPUSH
21926: CALL_OW 69
21930: ST_TO_ADDR
// if not tmp then
21931: LD_VAR 0 2
21935: NOT
21936: IFFALSE 21940
// exit ;
21938: GO 21969
// for i in tmp do
21940: LD_ADDR_VAR 0 1
21944: PUSH
21945: LD_VAR 0 2
21949: PUSH
21950: FOR_IN
21951: IFFALSE 21967
// SetLives ( i , 600 ) ;
21953: LD_VAR 0 1
21957: PPUSH
21958: LD_INT 600
21960: PPUSH
21961: CALL_OW 234
21965: GO 21950
21967: POP
21968: POP
// end ;
21969: PPOPN 2
21971: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21972: LD_INT 0
21974: PPUSH
// case cmd of 301 :
21975: LD_VAR 0 1
21979: PUSH
21980: LD_INT 301
21982: DOUBLE
21983: EQUAL
21984: IFTRUE 21988
21986: GO 22020
21988: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21989: LD_VAR 0 6
21993: PPUSH
21994: LD_VAR 0 7
21998: PPUSH
21999: LD_VAR 0 8
22003: PPUSH
22004: LD_VAR 0 4
22008: PPUSH
22009: LD_VAR 0 5
22013: PPUSH
22014: CALL 23229 0 5
22018: GO 22141
22020: LD_INT 302
22022: DOUBLE
22023: EQUAL
22024: IFTRUE 22028
22026: GO 22065
22028: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22029: LD_VAR 0 6
22033: PPUSH
22034: LD_VAR 0 7
22038: PPUSH
22039: LD_VAR 0 8
22043: PPUSH
22044: LD_VAR 0 9
22048: PPUSH
22049: LD_VAR 0 4
22053: PPUSH
22054: LD_VAR 0 5
22058: PPUSH
22059: CALL 23320 0 6
22063: GO 22141
22065: LD_INT 303
22067: DOUBLE
22068: EQUAL
22069: IFTRUE 22073
22071: GO 22110
22073: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22074: LD_VAR 0 6
22078: PPUSH
22079: LD_VAR 0 7
22083: PPUSH
22084: LD_VAR 0 8
22088: PPUSH
22089: LD_VAR 0 9
22093: PPUSH
22094: LD_VAR 0 4
22098: PPUSH
22099: LD_VAR 0 5
22103: PPUSH
22104: CALL 22146 0 6
22108: GO 22141
22110: LD_INT 304
22112: DOUBLE
22113: EQUAL
22114: IFTRUE 22118
22116: GO 22140
22118: POP
// hHackTeleport ( unit , x , y ) ; end ;
22119: LD_VAR 0 2
22123: PPUSH
22124: LD_VAR 0 4
22128: PPUSH
22129: LD_VAR 0 5
22133: PPUSH
22134: CALL 23913 0 3
22138: GO 22141
22140: POP
// end ;
22141: LD_VAR 0 12
22145: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22146: LD_INT 0
22148: PPUSH
22149: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22150: LD_VAR 0 1
22154: PUSH
22155: LD_INT 1
22157: LESS
22158: PUSH
22159: LD_VAR 0 1
22163: PUSH
22164: LD_INT 3
22166: GREATER
22167: OR
22168: PUSH
22169: LD_VAR 0 5
22173: PPUSH
22174: LD_VAR 0 6
22178: PPUSH
22179: CALL_OW 428
22183: OR
22184: IFFALSE 22188
// exit ;
22186: GO 22916
// uc_side := your_side ;
22188: LD_ADDR_OWVAR 20
22192: PUSH
22193: LD_OWVAR 2
22197: ST_TO_ADDR
// uc_nation := nation ;
22198: LD_ADDR_OWVAR 21
22202: PUSH
22203: LD_VAR 0 1
22207: ST_TO_ADDR
// bc_level = 1 ;
22208: LD_ADDR_OWVAR 43
22212: PUSH
22213: LD_INT 1
22215: ST_TO_ADDR
// case btype of 1 :
22216: LD_VAR 0 2
22220: PUSH
22221: LD_INT 1
22223: DOUBLE
22224: EQUAL
22225: IFTRUE 22229
22227: GO 22240
22229: POP
// bc_type := b_depot ; 2 :
22230: LD_ADDR_OWVAR 42
22234: PUSH
22235: LD_INT 0
22237: ST_TO_ADDR
22238: GO 22860
22240: LD_INT 2
22242: DOUBLE
22243: EQUAL
22244: IFTRUE 22248
22246: GO 22259
22248: POP
// bc_type := b_warehouse ; 3 :
22249: LD_ADDR_OWVAR 42
22253: PUSH
22254: LD_INT 1
22256: ST_TO_ADDR
22257: GO 22860
22259: LD_INT 3
22261: DOUBLE
22262: EQUAL
22263: IFTRUE 22267
22265: GO 22278
22267: POP
// bc_type := b_lab ; 4 .. 9 :
22268: LD_ADDR_OWVAR 42
22272: PUSH
22273: LD_INT 6
22275: ST_TO_ADDR
22276: GO 22860
22278: LD_INT 4
22280: DOUBLE
22281: GREATEREQUAL
22282: IFFALSE 22290
22284: LD_INT 9
22286: DOUBLE
22287: LESSEQUAL
22288: IFTRUE 22292
22290: GO 22352
22292: POP
// begin bc_type := b_lab_half ;
22293: LD_ADDR_OWVAR 42
22297: PUSH
22298: LD_INT 7
22300: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22301: LD_ADDR_OWVAR 44
22305: PUSH
22306: LD_INT 10
22308: PUSH
22309: LD_INT 11
22311: PUSH
22312: LD_INT 12
22314: PUSH
22315: LD_INT 15
22317: PUSH
22318: LD_INT 14
22320: PUSH
22321: LD_INT 13
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: PUSH
22332: LD_VAR 0 2
22336: PUSH
22337: LD_INT 3
22339: MINUS
22340: ARRAY
22341: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
22342: LD_ADDR_OWVAR 45
22346: PUSH
22347: LD_INT 9
22349: ST_TO_ADDR
// end ; 10 .. 13 :
22350: GO 22860
22352: LD_INT 10
22354: DOUBLE
22355: GREATEREQUAL
22356: IFFALSE 22364
22358: LD_INT 13
22360: DOUBLE
22361: LESSEQUAL
22362: IFTRUE 22366
22364: GO 22443
22366: POP
// begin bc_type := b_lab_full ;
22367: LD_ADDR_OWVAR 42
22371: PUSH
22372: LD_INT 8
22374: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22375: LD_ADDR_OWVAR 44
22379: PUSH
22380: LD_INT 10
22382: PUSH
22383: LD_INT 12
22385: PUSH
22386: LD_INT 14
22388: PUSH
22389: LD_INT 13
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: PUSH
22398: LD_VAR 0 2
22402: PUSH
22403: LD_INT 9
22405: MINUS
22406: ARRAY
22407: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22408: LD_ADDR_OWVAR 45
22412: PUSH
22413: LD_INT 11
22415: PUSH
22416: LD_INT 15
22418: PUSH
22419: LD_INT 12
22421: PUSH
22422: LD_INT 15
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: PUSH
22431: LD_VAR 0 2
22435: PUSH
22436: LD_INT 9
22438: MINUS
22439: ARRAY
22440: ST_TO_ADDR
// end ; 14 :
22441: GO 22860
22443: LD_INT 14
22445: DOUBLE
22446: EQUAL
22447: IFTRUE 22451
22449: GO 22462
22451: POP
// bc_type := b_workshop ; 15 :
22452: LD_ADDR_OWVAR 42
22456: PUSH
22457: LD_INT 2
22459: ST_TO_ADDR
22460: GO 22860
22462: LD_INT 15
22464: DOUBLE
22465: EQUAL
22466: IFTRUE 22470
22468: GO 22481
22470: POP
// bc_type := b_factory ; 16 :
22471: LD_ADDR_OWVAR 42
22475: PUSH
22476: LD_INT 3
22478: ST_TO_ADDR
22479: GO 22860
22481: LD_INT 16
22483: DOUBLE
22484: EQUAL
22485: IFTRUE 22489
22487: GO 22500
22489: POP
// bc_type := b_ext_gun ; 17 :
22490: LD_ADDR_OWVAR 42
22494: PUSH
22495: LD_INT 17
22497: ST_TO_ADDR
22498: GO 22860
22500: LD_INT 17
22502: DOUBLE
22503: EQUAL
22504: IFTRUE 22508
22506: GO 22536
22508: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22509: LD_ADDR_OWVAR 42
22513: PUSH
22514: LD_INT 19
22516: PUSH
22517: LD_INT 23
22519: PUSH
22520: LD_INT 19
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: LIST
22527: PUSH
22528: LD_VAR 0 1
22532: ARRAY
22533: ST_TO_ADDR
22534: GO 22860
22536: LD_INT 18
22538: DOUBLE
22539: EQUAL
22540: IFTRUE 22544
22542: GO 22555
22544: POP
// bc_type := b_ext_radar ; 19 :
22545: LD_ADDR_OWVAR 42
22549: PUSH
22550: LD_INT 20
22552: ST_TO_ADDR
22553: GO 22860
22555: LD_INT 19
22557: DOUBLE
22558: EQUAL
22559: IFTRUE 22563
22561: GO 22574
22563: POP
// bc_type := b_ext_radio ; 20 :
22564: LD_ADDR_OWVAR 42
22568: PUSH
22569: LD_INT 22
22571: ST_TO_ADDR
22572: GO 22860
22574: LD_INT 20
22576: DOUBLE
22577: EQUAL
22578: IFTRUE 22582
22580: GO 22593
22582: POP
// bc_type := b_ext_siberium ; 21 :
22583: LD_ADDR_OWVAR 42
22587: PUSH
22588: LD_INT 21
22590: ST_TO_ADDR
22591: GO 22860
22593: LD_INT 21
22595: DOUBLE
22596: EQUAL
22597: IFTRUE 22601
22599: GO 22612
22601: POP
// bc_type := b_ext_computer ; 22 :
22602: LD_ADDR_OWVAR 42
22606: PUSH
22607: LD_INT 24
22609: ST_TO_ADDR
22610: GO 22860
22612: LD_INT 22
22614: DOUBLE
22615: EQUAL
22616: IFTRUE 22620
22618: GO 22631
22620: POP
// bc_type := b_ext_track ; 23 :
22621: LD_ADDR_OWVAR 42
22625: PUSH
22626: LD_INT 16
22628: ST_TO_ADDR
22629: GO 22860
22631: LD_INT 23
22633: DOUBLE
22634: EQUAL
22635: IFTRUE 22639
22637: GO 22650
22639: POP
// bc_type := b_ext_laser ; 24 :
22640: LD_ADDR_OWVAR 42
22644: PUSH
22645: LD_INT 25
22647: ST_TO_ADDR
22648: GO 22860
22650: LD_INT 24
22652: DOUBLE
22653: EQUAL
22654: IFTRUE 22658
22656: GO 22669
22658: POP
// bc_type := b_control_tower ; 25 :
22659: LD_ADDR_OWVAR 42
22663: PUSH
22664: LD_INT 36
22666: ST_TO_ADDR
22667: GO 22860
22669: LD_INT 25
22671: DOUBLE
22672: EQUAL
22673: IFTRUE 22677
22675: GO 22688
22677: POP
// bc_type := b_breastwork ; 26 :
22678: LD_ADDR_OWVAR 42
22682: PUSH
22683: LD_INT 31
22685: ST_TO_ADDR
22686: GO 22860
22688: LD_INT 26
22690: DOUBLE
22691: EQUAL
22692: IFTRUE 22696
22694: GO 22707
22696: POP
// bc_type := b_bunker ; 27 :
22697: LD_ADDR_OWVAR 42
22701: PUSH
22702: LD_INT 32
22704: ST_TO_ADDR
22705: GO 22860
22707: LD_INT 27
22709: DOUBLE
22710: EQUAL
22711: IFTRUE 22715
22713: GO 22726
22715: POP
// bc_type := b_turret ; 28 :
22716: LD_ADDR_OWVAR 42
22720: PUSH
22721: LD_INT 33
22723: ST_TO_ADDR
22724: GO 22860
22726: LD_INT 28
22728: DOUBLE
22729: EQUAL
22730: IFTRUE 22734
22732: GO 22745
22734: POP
// bc_type := b_armoury ; 29 :
22735: LD_ADDR_OWVAR 42
22739: PUSH
22740: LD_INT 4
22742: ST_TO_ADDR
22743: GO 22860
22745: LD_INT 29
22747: DOUBLE
22748: EQUAL
22749: IFTRUE 22753
22751: GO 22764
22753: POP
// bc_type := b_barracks ; 30 :
22754: LD_ADDR_OWVAR 42
22758: PUSH
22759: LD_INT 5
22761: ST_TO_ADDR
22762: GO 22860
22764: LD_INT 30
22766: DOUBLE
22767: EQUAL
22768: IFTRUE 22772
22770: GO 22783
22772: POP
// bc_type := b_solar_power ; 31 :
22773: LD_ADDR_OWVAR 42
22777: PUSH
22778: LD_INT 27
22780: ST_TO_ADDR
22781: GO 22860
22783: LD_INT 31
22785: DOUBLE
22786: EQUAL
22787: IFTRUE 22791
22789: GO 22802
22791: POP
// bc_type := b_oil_power ; 32 :
22792: LD_ADDR_OWVAR 42
22796: PUSH
22797: LD_INT 26
22799: ST_TO_ADDR
22800: GO 22860
22802: LD_INT 32
22804: DOUBLE
22805: EQUAL
22806: IFTRUE 22810
22808: GO 22821
22810: POP
// bc_type := b_siberite_power ; 33 :
22811: LD_ADDR_OWVAR 42
22815: PUSH
22816: LD_INT 28
22818: ST_TO_ADDR
22819: GO 22860
22821: LD_INT 33
22823: DOUBLE
22824: EQUAL
22825: IFTRUE 22829
22827: GO 22840
22829: POP
// bc_type := b_oil_mine ; 34 :
22830: LD_ADDR_OWVAR 42
22834: PUSH
22835: LD_INT 29
22837: ST_TO_ADDR
22838: GO 22860
22840: LD_INT 34
22842: DOUBLE
22843: EQUAL
22844: IFTRUE 22848
22846: GO 22859
22848: POP
// bc_type := b_siberite_mine ; end ;
22849: LD_ADDR_OWVAR 42
22853: PUSH
22854: LD_INT 30
22856: ST_TO_ADDR
22857: GO 22860
22859: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22860: LD_ADDR_VAR 0 8
22864: PUSH
22865: LD_VAR 0 5
22869: PPUSH
22870: LD_VAR 0 6
22874: PPUSH
22875: LD_VAR 0 3
22879: PPUSH
22880: CALL_OW 47
22884: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22885: LD_OWVAR 42
22889: PUSH
22890: LD_INT 32
22892: PUSH
22893: LD_INT 33
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: IN
22900: IFFALSE 22916
// PlaceWeaponTurret ( b , weapon ) ;
22902: LD_VAR 0 8
22906: PPUSH
22907: LD_VAR 0 4
22911: PPUSH
22912: CALL_OW 431
// end ;
22916: LD_VAR 0 7
22920: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22921: LD_INT 0
22923: PPUSH
22924: PPUSH
22925: PPUSH
22926: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22927: LD_ADDR_VAR 0 4
22931: PUSH
22932: LD_INT 22
22934: PUSH
22935: LD_OWVAR 2
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 2
22946: PUSH
22947: LD_INT 30
22949: PUSH
22950: LD_INT 0
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PUSH
22957: LD_INT 30
22959: PUSH
22960: LD_INT 1
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: LIST
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: PPUSH
22976: CALL_OW 69
22980: ST_TO_ADDR
// if not tmp then
22981: LD_VAR 0 4
22985: NOT
22986: IFFALSE 22990
// exit ;
22988: GO 23049
// for i in tmp do
22990: LD_ADDR_VAR 0 2
22994: PUSH
22995: LD_VAR 0 4
22999: PUSH
23000: FOR_IN
23001: IFFALSE 23047
// for j = 1 to 3 do
23003: LD_ADDR_VAR 0 3
23007: PUSH
23008: DOUBLE
23009: LD_INT 1
23011: DEC
23012: ST_TO_ADDR
23013: LD_INT 3
23015: PUSH
23016: FOR_TO
23017: IFFALSE 23043
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23019: LD_VAR 0 2
23023: PPUSH
23024: CALL_OW 274
23028: PPUSH
23029: LD_VAR 0 3
23033: PPUSH
23034: LD_INT 99999
23036: PPUSH
23037: CALL_OW 277
23041: GO 23016
23043: POP
23044: POP
23045: GO 23000
23047: POP
23048: POP
// end ;
23049: LD_VAR 0 1
23053: RET
// export function hHackSetLevel10 ; var i , j ; begin
23054: LD_INT 0
23056: PPUSH
23057: PPUSH
23058: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23059: LD_ADDR_VAR 0 2
23063: PUSH
23064: LD_INT 21
23066: PUSH
23067: LD_INT 1
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: PPUSH
23074: CALL_OW 69
23078: PUSH
23079: FOR_IN
23080: IFFALSE 23132
// if IsSelected ( i ) then
23082: LD_VAR 0 2
23086: PPUSH
23087: CALL_OW 306
23091: IFFALSE 23130
// begin for j := 1 to 4 do
23093: LD_ADDR_VAR 0 3
23097: PUSH
23098: DOUBLE
23099: LD_INT 1
23101: DEC
23102: ST_TO_ADDR
23103: LD_INT 4
23105: PUSH
23106: FOR_TO
23107: IFFALSE 23128
// SetSkill ( i , j , 10 ) ;
23109: LD_VAR 0 2
23113: PPUSH
23114: LD_VAR 0 3
23118: PPUSH
23119: LD_INT 10
23121: PPUSH
23122: CALL_OW 237
23126: GO 23106
23128: POP
23129: POP
// end ;
23130: GO 23079
23132: POP
23133: POP
// end ;
23134: LD_VAR 0 1
23138: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23139: LD_INT 0
23141: PPUSH
23142: PPUSH
23143: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23144: LD_ADDR_VAR 0 2
23148: PUSH
23149: LD_INT 22
23151: PUSH
23152: LD_OWVAR 2
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: PUSH
23161: LD_INT 21
23163: PUSH
23164: LD_INT 1
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: PPUSH
23175: CALL_OW 69
23179: PUSH
23180: FOR_IN
23181: IFFALSE 23222
// begin for j := 1 to 4 do
23183: LD_ADDR_VAR 0 3
23187: PUSH
23188: DOUBLE
23189: LD_INT 1
23191: DEC
23192: ST_TO_ADDR
23193: LD_INT 4
23195: PUSH
23196: FOR_TO
23197: IFFALSE 23218
// SetSkill ( i , j , 10 ) ;
23199: LD_VAR 0 2
23203: PPUSH
23204: LD_VAR 0 3
23208: PPUSH
23209: LD_INT 10
23211: PPUSH
23212: CALL_OW 237
23216: GO 23196
23218: POP
23219: POP
// end ;
23220: GO 23180
23222: POP
23223: POP
// end ;
23224: LD_VAR 0 1
23228: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23229: LD_INT 0
23231: PPUSH
// uc_side := your_side ;
23232: LD_ADDR_OWVAR 20
23236: PUSH
23237: LD_OWVAR 2
23241: ST_TO_ADDR
// uc_nation := nation ;
23242: LD_ADDR_OWVAR 21
23246: PUSH
23247: LD_VAR 0 1
23251: ST_TO_ADDR
// InitHc ;
23252: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23256: LD_INT 0
23258: PPUSH
23259: LD_VAR 0 2
23263: PPUSH
23264: LD_VAR 0 3
23268: PPUSH
23269: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23273: LD_VAR 0 4
23277: PPUSH
23278: LD_VAR 0 5
23282: PPUSH
23283: CALL_OW 428
23287: PUSH
23288: LD_INT 0
23290: EQUAL
23291: IFFALSE 23315
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23293: CALL_OW 44
23297: PPUSH
23298: LD_VAR 0 4
23302: PPUSH
23303: LD_VAR 0 5
23307: PPUSH
23308: LD_INT 1
23310: PPUSH
23311: CALL_OW 48
// end ;
23315: LD_VAR 0 6
23319: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23320: LD_INT 0
23322: PPUSH
23323: PPUSH
// uc_side := your_side ;
23324: LD_ADDR_OWVAR 20
23328: PUSH
23329: LD_OWVAR 2
23333: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23334: LD_VAR 0 1
23338: PUSH
23339: LD_INT 1
23341: PUSH
23342: LD_INT 2
23344: PUSH
23345: LD_INT 3
23347: PUSH
23348: LD_INT 4
23350: PUSH
23351: LD_INT 5
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: IN
23361: IFFALSE 23373
// uc_nation := nation_american else
23363: LD_ADDR_OWVAR 21
23367: PUSH
23368: LD_INT 1
23370: ST_TO_ADDR
23371: GO 23416
// if chassis in [ 11 , 12 , 13 , 14 ] then
23373: LD_VAR 0 1
23377: PUSH
23378: LD_INT 11
23380: PUSH
23381: LD_INT 12
23383: PUSH
23384: LD_INT 13
23386: PUSH
23387: LD_INT 14
23389: PUSH
23390: EMPTY
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: IN
23396: IFFALSE 23408
// uc_nation := nation_arabian else
23398: LD_ADDR_OWVAR 21
23402: PUSH
23403: LD_INT 2
23405: ST_TO_ADDR
23406: GO 23416
// uc_nation := nation_russian ;
23408: LD_ADDR_OWVAR 21
23412: PUSH
23413: LD_INT 3
23415: ST_TO_ADDR
// vc_chassis := chassis ;
23416: LD_ADDR_OWVAR 37
23420: PUSH
23421: LD_VAR 0 1
23425: ST_TO_ADDR
// vc_engine := engine ;
23426: LD_ADDR_OWVAR 39
23430: PUSH
23431: LD_VAR 0 2
23435: ST_TO_ADDR
// vc_control := control ;
23436: LD_ADDR_OWVAR 38
23440: PUSH
23441: LD_VAR 0 3
23445: ST_TO_ADDR
// vc_weapon := weapon ;
23446: LD_ADDR_OWVAR 40
23450: PUSH
23451: LD_VAR 0 4
23455: ST_TO_ADDR
// un := CreateVehicle ;
23456: LD_ADDR_VAR 0 8
23460: PUSH
23461: CALL_OW 45
23465: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23466: LD_VAR 0 8
23470: PPUSH
23471: LD_INT 0
23473: PPUSH
23474: LD_INT 5
23476: PPUSH
23477: CALL_OW 12
23481: PPUSH
23482: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23486: LD_VAR 0 8
23490: PPUSH
23491: LD_VAR 0 5
23495: PPUSH
23496: LD_VAR 0 6
23500: PPUSH
23501: LD_INT 1
23503: PPUSH
23504: CALL_OW 48
// end ;
23508: LD_VAR 0 7
23512: RET
// export hInvincible ; every 1 do
23513: GO 23515
23515: DISABLE
// hInvincible := [ ] ;
23516: LD_ADDR_EXP 83
23520: PUSH
23521: EMPTY
23522: ST_TO_ADDR
23523: END
// every 10 do var i ;
23524: GO 23526
23526: DISABLE
23527: LD_INT 0
23529: PPUSH
// begin enable ;
23530: ENABLE
// if not hInvincible then
23531: LD_EXP 83
23535: NOT
23536: IFFALSE 23540
// exit ;
23538: GO 23584
// for i in hInvincible do
23540: LD_ADDR_VAR 0 1
23544: PUSH
23545: LD_EXP 83
23549: PUSH
23550: FOR_IN
23551: IFFALSE 23582
// if GetLives ( i ) < 1000 then
23553: LD_VAR 0 1
23557: PPUSH
23558: CALL_OW 256
23562: PUSH
23563: LD_INT 1000
23565: LESS
23566: IFFALSE 23580
// SetLives ( i , 1000 ) ;
23568: LD_VAR 0 1
23572: PPUSH
23573: LD_INT 1000
23575: PPUSH
23576: CALL_OW 234
23580: GO 23550
23582: POP
23583: POP
// end ;
23584: PPOPN 1
23586: END
// export function hHackInvincible ; var i ; begin
23587: LD_INT 0
23589: PPUSH
23590: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23591: LD_ADDR_VAR 0 2
23595: PUSH
23596: LD_INT 2
23598: PUSH
23599: LD_INT 21
23601: PUSH
23602: LD_INT 1
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PUSH
23609: LD_INT 21
23611: PUSH
23612: LD_INT 2
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: LIST
23623: PPUSH
23624: CALL_OW 69
23628: PUSH
23629: FOR_IN
23630: IFFALSE 23691
// if IsSelected ( i ) then
23632: LD_VAR 0 2
23636: PPUSH
23637: CALL_OW 306
23641: IFFALSE 23689
// begin if i in hInvincible then
23643: LD_VAR 0 2
23647: PUSH
23648: LD_EXP 83
23652: IN
23653: IFFALSE 23673
// hInvincible := hInvincible diff i else
23655: LD_ADDR_EXP 83
23659: PUSH
23660: LD_EXP 83
23664: PUSH
23665: LD_VAR 0 2
23669: DIFF
23670: ST_TO_ADDR
23671: GO 23689
// hInvincible := hInvincible union i ;
23673: LD_ADDR_EXP 83
23677: PUSH
23678: LD_EXP 83
23682: PUSH
23683: LD_VAR 0 2
23687: UNION
23688: ST_TO_ADDR
// end ;
23689: GO 23629
23691: POP
23692: POP
// end ;
23693: LD_VAR 0 1
23697: RET
// export function hHackInvisible ; var i , j ; begin
23698: LD_INT 0
23700: PPUSH
23701: PPUSH
23702: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23703: LD_ADDR_VAR 0 2
23707: PUSH
23708: LD_INT 21
23710: PUSH
23711: LD_INT 1
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PPUSH
23718: CALL_OW 69
23722: PUSH
23723: FOR_IN
23724: IFFALSE 23748
// if IsSelected ( i ) then
23726: LD_VAR 0 2
23730: PPUSH
23731: CALL_OW 306
23735: IFFALSE 23746
// ComForceInvisible ( i ) ;
23737: LD_VAR 0 2
23741: PPUSH
23742: CALL_OW 496
23746: GO 23723
23748: POP
23749: POP
// end ;
23750: LD_VAR 0 1
23754: RET
// export function hHackChangeYourSide ; begin
23755: LD_INT 0
23757: PPUSH
// if your_side = 8 then
23758: LD_OWVAR 2
23762: PUSH
23763: LD_INT 8
23765: EQUAL
23766: IFFALSE 23778
// your_side := 0 else
23768: LD_ADDR_OWVAR 2
23772: PUSH
23773: LD_INT 0
23775: ST_TO_ADDR
23776: GO 23792
// your_side := your_side + 1 ;
23778: LD_ADDR_OWVAR 2
23782: PUSH
23783: LD_OWVAR 2
23787: PUSH
23788: LD_INT 1
23790: PLUS
23791: ST_TO_ADDR
// end ;
23792: LD_VAR 0 1
23796: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23797: LD_INT 0
23799: PPUSH
23800: PPUSH
23801: PPUSH
// for i in all_units do
23802: LD_ADDR_VAR 0 2
23806: PUSH
23807: LD_OWVAR 3
23811: PUSH
23812: FOR_IN
23813: IFFALSE 23891
// if IsSelected ( i ) then
23815: LD_VAR 0 2
23819: PPUSH
23820: CALL_OW 306
23824: IFFALSE 23889
// begin j := GetSide ( i ) ;
23826: LD_ADDR_VAR 0 3
23830: PUSH
23831: LD_VAR 0 2
23835: PPUSH
23836: CALL_OW 255
23840: ST_TO_ADDR
// if j = 8 then
23841: LD_VAR 0 3
23845: PUSH
23846: LD_INT 8
23848: EQUAL
23849: IFFALSE 23861
// j := 0 else
23851: LD_ADDR_VAR 0 3
23855: PUSH
23856: LD_INT 0
23858: ST_TO_ADDR
23859: GO 23875
// j := j + 1 ;
23861: LD_ADDR_VAR 0 3
23865: PUSH
23866: LD_VAR 0 3
23870: PUSH
23871: LD_INT 1
23873: PLUS
23874: ST_TO_ADDR
// SetSide ( i , j ) ;
23875: LD_VAR 0 2
23879: PPUSH
23880: LD_VAR 0 3
23884: PPUSH
23885: CALL_OW 235
// end ;
23889: GO 23812
23891: POP
23892: POP
// end ;
23893: LD_VAR 0 1
23897: RET
// export function hHackFog ; begin
23898: LD_INT 0
23900: PPUSH
// FogOff ( true ) ;
23901: LD_INT 1
23903: PPUSH
23904: CALL_OW 344
// end ;
23908: LD_VAR 0 1
23912: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23913: LD_INT 0
23915: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23916: LD_VAR 0 1
23920: PPUSH
23921: LD_VAR 0 2
23925: PPUSH
23926: LD_VAR 0 3
23930: PPUSH
23931: LD_INT 1
23933: PPUSH
23934: LD_INT 1
23936: PPUSH
23937: CALL_OW 483
// CenterOnXY ( x , y ) ;
23941: LD_VAR 0 2
23945: PPUSH
23946: LD_VAR 0 3
23950: PPUSH
23951: CALL_OW 84
// end ;
23955: LD_VAR 0 4
23959: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
23960: LD_INT 0
23962: PPUSH
23963: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
23964: LD_VAR 0 1
23968: NOT
23969: PUSH
23970: LD_VAR 0 2
23974: PPUSH
23975: LD_VAR 0 3
23979: PPUSH
23980: CALL_OW 488
23984: NOT
23985: OR
23986: PUSH
23987: LD_VAR 0 1
23991: PPUSH
23992: CALL_OW 266
23996: PUSH
23997: LD_INT 3
23999: NONEQUAL
24000: PUSH
24001: LD_VAR 0 1
24005: PPUSH
24006: CALL_OW 247
24010: PUSH
24011: LD_INT 1
24013: EQUAL
24014: NOT
24015: AND
24016: OR
24017: IFFALSE 24021
// exit ;
24019: GO 24170
// if GetType ( factory ) = unit_human then
24021: LD_VAR 0 1
24025: PPUSH
24026: CALL_OW 247
24030: PUSH
24031: LD_INT 1
24033: EQUAL
24034: IFFALSE 24051
// factory := IsInUnit ( factory ) ;
24036: LD_ADDR_VAR 0 1
24040: PUSH
24041: LD_VAR 0 1
24045: PPUSH
24046: CALL_OW 310
24050: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
24051: LD_VAR 0 1
24055: PPUSH
24056: CALL_OW 266
24060: PUSH
24061: LD_INT 3
24063: NONEQUAL
24064: IFFALSE 24068
// exit ;
24066: GO 24170
// if HexInfo ( x , y ) = factory then
24068: LD_VAR 0 2
24072: PPUSH
24073: LD_VAR 0 3
24077: PPUSH
24078: CALL_OW 428
24082: PUSH
24083: LD_VAR 0 1
24087: EQUAL
24088: IFFALSE 24115
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
24090: LD_ADDR_EXP 84
24094: PUSH
24095: LD_EXP 84
24099: PPUSH
24100: LD_VAR 0 1
24104: PPUSH
24105: LD_INT 0
24107: PPUSH
24108: CALL_OW 1
24112: ST_TO_ADDR
24113: GO 24166
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
24115: LD_ADDR_EXP 84
24119: PUSH
24120: LD_EXP 84
24124: PPUSH
24125: LD_VAR 0 1
24129: PPUSH
24130: LD_VAR 0 1
24134: PPUSH
24135: CALL_OW 255
24139: PUSH
24140: LD_VAR 0 1
24144: PUSH
24145: LD_VAR 0 2
24149: PUSH
24150: LD_VAR 0 3
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: PPUSH
24161: CALL_OW 1
24165: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24166: CALL 24175 0 0
// end ;
24170: LD_VAR 0 4
24174: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
24175: LD_INT 0
24177: PPUSH
24178: PPUSH
24179: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24180: LD_STRING resetFactoryWaypoint();
24182: PPUSH
24183: CALL_OW 559
// if factoryWaypoints then
24187: LD_EXP 84
24191: IFFALSE 24317
// begin list := PrepareArray ( factoryWaypoints ) ;
24193: LD_ADDR_VAR 0 3
24197: PUSH
24198: LD_EXP 84
24202: PPUSH
24203: CALL 70639 0 1
24207: ST_TO_ADDR
// for i := 1 to list do
24208: LD_ADDR_VAR 0 2
24212: PUSH
24213: DOUBLE
24214: LD_INT 1
24216: DEC
24217: ST_TO_ADDR
24218: LD_VAR 0 3
24222: PUSH
24223: FOR_TO
24224: IFFALSE 24315
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24226: LD_STRING setFactoryWaypointXY(
24228: PUSH
24229: LD_VAR 0 3
24233: PUSH
24234: LD_VAR 0 2
24238: ARRAY
24239: PUSH
24240: LD_INT 1
24242: ARRAY
24243: STR
24244: PUSH
24245: LD_STRING ,
24247: STR
24248: PUSH
24249: LD_VAR 0 3
24253: PUSH
24254: LD_VAR 0 2
24258: ARRAY
24259: PUSH
24260: LD_INT 2
24262: ARRAY
24263: STR
24264: PUSH
24265: LD_STRING ,
24267: STR
24268: PUSH
24269: LD_VAR 0 3
24273: PUSH
24274: LD_VAR 0 2
24278: ARRAY
24279: PUSH
24280: LD_INT 3
24282: ARRAY
24283: STR
24284: PUSH
24285: LD_STRING ,
24287: STR
24288: PUSH
24289: LD_VAR 0 3
24293: PUSH
24294: LD_VAR 0 2
24298: ARRAY
24299: PUSH
24300: LD_INT 4
24302: ARRAY
24303: STR
24304: PUSH
24305: LD_STRING )
24307: STR
24308: PPUSH
24309: CALL_OW 559
24313: GO 24223
24315: POP
24316: POP
// end ; end ;
24317: LD_VAR 0 1
24321: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
24322: LD_INT 0
24324: PPUSH
// if HexInfo ( x , y ) = warehouse then
24325: LD_VAR 0 2
24329: PPUSH
24330: LD_VAR 0 3
24334: PPUSH
24335: CALL_OW 428
24339: PUSH
24340: LD_VAR 0 1
24344: EQUAL
24345: IFFALSE 24372
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
24347: LD_ADDR_EXP 85
24351: PUSH
24352: LD_EXP 85
24356: PPUSH
24357: LD_VAR 0 1
24361: PPUSH
24362: LD_INT 0
24364: PPUSH
24365: CALL_OW 1
24369: ST_TO_ADDR
24370: GO 24423
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
24372: LD_ADDR_EXP 85
24376: PUSH
24377: LD_EXP 85
24381: PPUSH
24382: LD_VAR 0 1
24386: PPUSH
24387: LD_VAR 0 1
24391: PPUSH
24392: CALL_OW 255
24396: PUSH
24397: LD_VAR 0 1
24401: PUSH
24402: LD_VAR 0 2
24406: PUSH
24407: LD_VAR 0 3
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: PPUSH
24418: CALL_OW 1
24422: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
24423: CALL 24432 0 0
// end ;
24427: LD_VAR 0 4
24431: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
24432: LD_INT 0
24434: PPUSH
24435: PPUSH
24436: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
24437: LD_STRING resetWarehouseGatheringPoints();
24439: PPUSH
24440: CALL_OW 559
// if warehouseGatheringPoints then
24444: LD_EXP 85
24448: IFFALSE 24574
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
24450: LD_ADDR_VAR 0 3
24454: PUSH
24455: LD_EXP 85
24459: PPUSH
24460: CALL 70639 0 1
24464: ST_TO_ADDR
// for i := 1 to list do
24465: LD_ADDR_VAR 0 2
24469: PUSH
24470: DOUBLE
24471: LD_INT 1
24473: DEC
24474: ST_TO_ADDR
24475: LD_VAR 0 3
24479: PUSH
24480: FOR_TO
24481: IFFALSE 24572
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24483: LD_STRING setWarehouseGatheringPointXY(
24485: PUSH
24486: LD_VAR 0 3
24490: PUSH
24491: LD_VAR 0 2
24495: ARRAY
24496: PUSH
24497: LD_INT 1
24499: ARRAY
24500: STR
24501: PUSH
24502: LD_STRING ,
24504: STR
24505: PUSH
24506: LD_VAR 0 3
24510: PUSH
24511: LD_VAR 0 2
24515: ARRAY
24516: PUSH
24517: LD_INT 2
24519: ARRAY
24520: STR
24521: PUSH
24522: LD_STRING ,
24524: STR
24525: PUSH
24526: LD_VAR 0 3
24530: PUSH
24531: LD_VAR 0 2
24535: ARRAY
24536: PUSH
24537: LD_INT 3
24539: ARRAY
24540: STR
24541: PUSH
24542: LD_STRING ,
24544: STR
24545: PUSH
24546: LD_VAR 0 3
24550: PUSH
24551: LD_VAR 0 2
24555: ARRAY
24556: PUSH
24557: LD_INT 4
24559: ARRAY
24560: STR
24561: PUSH
24562: LD_STRING )
24564: STR
24565: PPUSH
24566: CALL_OW 559
24570: GO 24480
24572: POP
24573: POP
// end ; end ;
24574: LD_VAR 0 1
24578: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
24579: LD_EXP 85
24583: IFFALSE 25268
24585: GO 24587
24587: DISABLE
24588: LD_INT 0
24590: PPUSH
24591: PPUSH
24592: PPUSH
24593: PPUSH
24594: PPUSH
24595: PPUSH
24596: PPUSH
24597: PPUSH
24598: PPUSH
// begin enable ;
24599: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
24600: LD_ADDR_VAR 0 3
24604: PUSH
24605: LD_EXP 85
24609: PPUSH
24610: CALL 70639 0 1
24614: ST_TO_ADDR
// if not list then
24615: LD_VAR 0 3
24619: NOT
24620: IFFALSE 24624
// exit ;
24622: GO 25268
// for i := 1 to list do
24624: LD_ADDR_VAR 0 1
24628: PUSH
24629: DOUBLE
24630: LD_INT 1
24632: DEC
24633: ST_TO_ADDR
24634: LD_VAR 0 3
24638: PUSH
24639: FOR_TO
24640: IFFALSE 25266
// begin depot := list [ i ] [ 2 ] ;
24642: LD_ADDR_VAR 0 8
24646: PUSH
24647: LD_VAR 0 3
24651: PUSH
24652: LD_VAR 0 1
24656: ARRAY
24657: PUSH
24658: LD_INT 2
24660: ARRAY
24661: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
24662: LD_ADDR_VAR 0 5
24666: PUSH
24667: LD_VAR 0 3
24671: PUSH
24672: LD_VAR 0 1
24676: ARRAY
24677: PUSH
24678: LD_INT 1
24680: ARRAY
24681: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
24682: LD_VAR 0 8
24686: PPUSH
24687: CALL_OW 301
24691: PUSH
24692: LD_VAR 0 5
24696: PUSH
24697: LD_VAR 0 8
24701: PPUSH
24702: CALL_OW 255
24706: NONEQUAL
24707: OR
24708: IFFALSE 24737
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
24710: LD_ADDR_EXP 85
24714: PUSH
24715: LD_EXP 85
24719: PPUSH
24720: LD_VAR 0 8
24724: PPUSH
24725: LD_INT 0
24727: PPUSH
24728: CALL_OW 1
24732: ST_TO_ADDR
// exit ;
24733: POP
24734: POP
24735: GO 25268
// end ; x := list [ i ] [ 3 ] ;
24737: LD_ADDR_VAR 0 6
24741: PUSH
24742: LD_VAR 0 3
24746: PUSH
24747: LD_VAR 0 1
24751: ARRAY
24752: PUSH
24753: LD_INT 3
24755: ARRAY
24756: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
24757: LD_ADDR_VAR 0 7
24761: PUSH
24762: LD_VAR 0 3
24766: PUSH
24767: LD_VAR 0 1
24771: ARRAY
24772: PUSH
24773: LD_INT 4
24775: ARRAY
24776: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
24777: LD_ADDR_VAR 0 9
24781: PUSH
24782: LD_VAR 0 6
24786: PPUSH
24787: LD_VAR 0 7
24791: PPUSH
24792: LD_INT 16
24794: PPUSH
24795: CALL 69227 0 3
24799: ST_TO_ADDR
// if not cratesNearbyPoint then
24800: LD_VAR 0 9
24804: NOT
24805: IFFALSE 24811
// exit ;
24807: POP
24808: POP
24809: GO 25268
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
24811: LD_ADDR_VAR 0 4
24815: PUSH
24816: LD_INT 22
24818: PUSH
24819: LD_VAR 0 5
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PUSH
24828: LD_INT 3
24830: PUSH
24831: LD_INT 60
24833: PUSH
24834: EMPTY
24835: LIST
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: PUSH
24841: LD_INT 91
24843: PUSH
24844: LD_VAR 0 8
24848: PUSH
24849: LD_INT 6
24851: PUSH
24852: EMPTY
24853: LIST
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 2
24859: PUSH
24860: LD_INT 25
24862: PUSH
24863: LD_INT 2
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 25
24872: PUSH
24873: LD_INT 16
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: LIST
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: PPUSH
24891: CALL_OW 69
24895: PUSH
24896: LD_VAR 0 8
24900: PPUSH
24901: CALL_OW 313
24905: PPUSH
24906: LD_INT 3
24908: PUSH
24909: LD_INT 60
24911: PUSH
24912: EMPTY
24913: LIST
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PUSH
24919: LD_INT 2
24921: PUSH
24922: LD_INT 25
24924: PUSH
24925: LD_INT 2
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: LD_INT 25
24934: PUSH
24935: LD_INT 16
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: LIST
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: PPUSH
24951: CALL_OW 72
24955: UNION
24956: ST_TO_ADDR
// if tmp then
24957: LD_VAR 0 4
24961: IFFALSE 25041
// begin tmp := ShrinkArray ( tmp , 3 ) ;
24963: LD_ADDR_VAR 0 4
24967: PUSH
24968: LD_VAR 0 4
24972: PPUSH
24973: LD_INT 3
24975: PPUSH
24976: CALL 67196 0 2
24980: ST_TO_ADDR
// for j in tmp do
24981: LD_ADDR_VAR 0 2
24985: PUSH
24986: LD_VAR 0 4
24990: PUSH
24991: FOR_IN
24992: IFFALSE 25035
// begin if IsInUnit ( j ) then
24994: LD_VAR 0 2
24998: PPUSH
24999: CALL_OW 310
25003: IFFALSE 25014
// ComExit ( j ) ;
25005: LD_VAR 0 2
25009: PPUSH
25010: CALL 67279 0 1
// AddComCollect ( j , x , y ) ;
25014: LD_VAR 0 2
25018: PPUSH
25019: LD_VAR 0 6
25023: PPUSH
25024: LD_VAR 0 7
25028: PPUSH
25029: CALL_OW 177
// end ;
25033: GO 24991
25035: POP
25036: POP
// exit ;
25037: POP
25038: POP
25039: GO 25268
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
25041: LD_ADDR_VAR 0 4
25045: PUSH
25046: LD_INT 22
25048: PUSH
25049: LD_VAR 0 5
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: PUSH
25058: LD_INT 91
25060: PUSH
25061: LD_VAR 0 8
25065: PUSH
25066: LD_INT 8
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: LIST
25073: PUSH
25074: LD_INT 2
25076: PUSH
25077: LD_INT 34
25079: PUSH
25080: LD_INT 12
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 34
25089: PUSH
25090: LD_INT 51
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 34
25099: PUSH
25100: LD_INT 32
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: PUSH
25107: LD_INT 34
25109: PUSH
25110: LD_INT 89
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: LIST
25128: PPUSH
25129: CALL_OW 69
25133: ST_TO_ADDR
// if tmp then
25134: LD_VAR 0 4
25138: IFFALSE 25264
// begin for j in tmp do
25140: LD_ADDR_VAR 0 2
25144: PUSH
25145: LD_VAR 0 4
25149: PUSH
25150: FOR_IN
25151: IFFALSE 25262
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
25153: LD_VAR 0 2
25157: PPUSH
25158: CALL_OW 262
25162: PUSH
25163: LD_INT 3
25165: EQUAL
25166: PUSH
25167: LD_VAR 0 2
25171: PPUSH
25172: CALL_OW 261
25176: PUSH
25177: LD_INT 20
25179: GREATER
25180: OR
25181: PUSH
25182: LD_VAR 0 2
25186: PPUSH
25187: CALL_OW 314
25191: NOT
25192: AND
25193: PUSH
25194: LD_VAR 0 2
25198: PPUSH
25199: CALL_OW 263
25203: PUSH
25204: LD_INT 1
25206: NONEQUAL
25207: PUSH
25208: LD_VAR 0 2
25212: PPUSH
25213: CALL_OW 311
25217: OR
25218: AND
25219: IFFALSE 25260
// begin ComCollect ( j , x , y ) ;
25221: LD_VAR 0 2
25225: PPUSH
25226: LD_VAR 0 6
25230: PPUSH
25231: LD_VAR 0 7
25235: PPUSH
25236: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
25240: LD_VAR 0 2
25244: PPUSH
25245: LD_VAR 0 8
25249: PPUSH
25250: CALL_OW 172
// exit ;
25254: POP
25255: POP
25256: POP
25257: POP
25258: GO 25268
// end ;
25260: GO 25150
25262: POP
25263: POP
// end ; end ;
25264: GO 24639
25266: POP
25267: POP
// end ; end_of_file
25268: PPOPN 9
25270: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25271: LD_INT 0
25273: PPUSH
25274: PPUSH
25275: PPUSH
25276: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25277: LD_VAR 0 1
25281: PPUSH
25282: CALL_OW 264
25286: PUSH
25287: LD_INT 91
25289: EQUAL
25290: IFFALSE 25362
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25292: LD_INT 68
25294: PPUSH
25295: LD_VAR 0 1
25299: PPUSH
25300: CALL_OW 255
25304: PPUSH
25305: CALL_OW 321
25309: PUSH
25310: LD_INT 2
25312: EQUAL
25313: IFFALSE 25325
// eff := 70 else
25315: LD_ADDR_VAR 0 4
25319: PUSH
25320: LD_INT 70
25322: ST_TO_ADDR
25323: GO 25333
// eff := 30 ;
25325: LD_ADDR_VAR 0 4
25329: PUSH
25330: LD_INT 30
25332: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25333: LD_VAR 0 1
25337: PPUSH
25338: CALL_OW 250
25342: PPUSH
25343: LD_VAR 0 1
25347: PPUSH
25348: CALL_OW 251
25352: PPUSH
25353: LD_VAR 0 4
25357: PPUSH
25358: CALL_OW 495
// end ; end ;
25362: LD_VAR 0 2
25366: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25367: LD_INT 0
25369: PPUSH
// end ;
25370: LD_VAR 0 4
25374: RET
// export function SOS_Command ( cmd ) ; begin
25375: LD_INT 0
25377: PPUSH
// end ;
25378: LD_VAR 0 2
25382: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25383: LD_INT 0
25385: PPUSH
// end ;
25386: LD_VAR 0 6
25390: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
25391: LD_INT 0
25393: PPUSH
25394: PPUSH
// if not vehicle or not factory then
25395: LD_VAR 0 1
25399: NOT
25400: PUSH
25401: LD_VAR 0 2
25405: NOT
25406: OR
25407: IFFALSE 25411
// exit ;
25409: GO 25642
// if factoryWaypoints >= factory then
25411: LD_EXP 84
25415: PUSH
25416: LD_VAR 0 2
25420: GREATEREQUAL
25421: IFFALSE 25642
// if factoryWaypoints [ factory ] then
25423: LD_EXP 84
25427: PUSH
25428: LD_VAR 0 2
25432: ARRAY
25433: IFFALSE 25642
// begin if GetControl ( vehicle ) = control_manual then
25435: LD_VAR 0 1
25439: PPUSH
25440: CALL_OW 263
25444: PUSH
25445: LD_INT 1
25447: EQUAL
25448: IFFALSE 25529
// begin driver := IsDrivenBy ( vehicle ) ;
25450: LD_ADDR_VAR 0 4
25454: PUSH
25455: LD_VAR 0 1
25459: PPUSH
25460: CALL_OW 311
25464: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25465: LD_VAR 0 4
25469: PPUSH
25470: LD_EXP 84
25474: PUSH
25475: LD_VAR 0 2
25479: ARRAY
25480: PUSH
25481: LD_INT 3
25483: ARRAY
25484: PPUSH
25485: LD_EXP 84
25489: PUSH
25490: LD_VAR 0 2
25494: ARRAY
25495: PUSH
25496: LD_INT 4
25498: ARRAY
25499: PPUSH
25500: CALL_OW 171
// AddComExitVehicle ( driver ) ;
25504: LD_VAR 0 4
25508: PPUSH
25509: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
25513: LD_VAR 0 4
25517: PPUSH
25518: LD_VAR 0 2
25522: PPUSH
25523: CALL_OW 180
// end else
25527: GO 25642
// if GetControl ( vehicle ) = control_remote then
25529: LD_VAR 0 1
25533: PPUSH
25534: CALL_OW 263
25538: PUSH
25539: LD_INT 2
25541: EQUAL
25542: IFFALSE 25603
// begin wait ( 0 0$2 ) ;
25544: LD_INT 70
25546: PPUSH
25547: CALL_OW 67
// if Connect ( vehicle ) then
25551: LD_VAR 0 1
25555: PPUSH
25556: CALL 37500 0 1
25560: IFFALSE 25601
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25562: LD_VAR 0 1
25566: PPUSH
25567: LD_EXP 84
25571: PUSH
25572: LD_VAR 0 2
25576: ARRAY
25577: PUSH
25578: LD_INT 3
25580: ARRAY
25581: PPUSH
25582: LD_EXP 84
25586: PUSH
25587: LD_VAR 0 2
25591: ARRAY
25592: PUSH
25593: LD_INT 4
25595: ARRAY
25596: PPUSH
25597: CALL_OW 171
// end else
25601: GO 25642
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25603: LD_VAR 0 1
25607: PPUSH
25608: LD_EXP 84
25612: PUSH
25613: LD_VAR 0 2
25617: ARRAY
25618: PUSH
25619: LD_INT 3
25621: ARRAY
25622: PPUSH
25623: LD_EXP 84
25627: PUSH
25628: LD_VAR 0 2
25632: ARRAY
25633: PUSH
25634: LD_INT 4
25636: ARRAY
25637: PPUSH
25638: CALL_OW 171
// end ; end ;
25642: LD_VAR 0 3
25646: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25647: LD_INT 0
25649: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25650: LD_VAR 0 1
25654: PUSH
25655: LD_INT 250
25657: EQUAL
25658: PUSH
25659: LD_VAR 0 2
25663: PPUSH
25664: CALL_OW 264
25668: PUSH
25669: LD_INT 81
25671: EQUAL
25672: AND
25673: IFFALSE 25694
// MinerPlaceMine ( unit , x , y ) ;
25675: LD_VAR 0 2
25679: PPUSH
25680: LD_VAR 0 4
25684: PPUSH
25685: LD_VAR 0 5
25689: PPUSH
25690: CALL 28079 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25694: LD_VAR 0 1
25698: PUSH
25699: LD_INT 251
25701: EQUAL
25702: PUSH
25703: LD_VAR 0 2
25707: PPUSH
25708: CALL_OW 264
25712: PUSH
25713: LD_INT 81
25715: EQUAL
25716: AND
25717: IFFALSE 25738
// MinerDetonateMine ( unit , x , y ) ;
25719: LD_VAR 0 2
25723: PPUSH
25724: LD_VAR 0 4
25728: PPUSH
25729: LD_VAR 0 5
25733: PPUSH
25734: CALL 28354 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25738: LD_VAR 0 1
25742: PUSH
25743: LD_INT 252
25745: EQUAL
25746: PUSH
25747: LD_VAR 0 2
25751: PPUSH
25752: CALL_OW 264
25756: PUSH
25757: LD_INT 81
25759: EQUAL
25760: AND
25761: IFFALSE 25782
// MinerCreateMinefield ( unit , x , y ) ;
25763: LD_VAR 0 2
25767: PPUSH
25768: LD_VAR 0 4
25772: PPUSH
25773: LD_VAR 0 5
25777: PPUSH
25778: CALL 28771 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25782: LD_VAR 0 1
25786: PUSH
25787: LD_INT 253
25789: EQUAL
25790: PUSH
25791: LD_VAR 0 2
25795: PPUSH
25796: CALL_OW 257
25800: PUSH
25801: LD_INT 5
25803: EQUAL
25804: AND
25805: IFFALSE 25826
// ComBinocular ( unit , x , y ) ;
25807: LD_VAR 0 2
25811: PPUSH
25812: LD_VAR 0 4
25816: PPUSH
25817: LD_VAR 0 5
25821: PPUSH
25822: CALL 29140 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25826: LD_VAR 0 1
25830: PUSH
25831: LD_INT 254
25833: EQUAL
25834: PUSH
25835: LD_VAR 0 2
25839: PPUSH
25840: CALL_OW 264
25844: PUSH
25845: LD_INT 99
25847: EQUAL
25848: AND
25849: PUSH
25850: LD_VAR 0 3
25854: PPUSH
25855: CALL_OW 263
25859: PUSH
25860: LD_INT 3
25862: EQUAL
25863: AND
25864: IFFALSE 25880
// HackDestroyVehicle ( unit , selectedUnit ) ;
25866: LD_VAR 0 2
25870: PPUSH
25871: LD_VAR 0 3
25875: PPUSH
25876: CALL 27443 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25880: LD_VAR 0 1
25884: PUSH
25885: LD_INT 255
25887: EQUAL
25888: PUSH
25889: LD_VAR 0 2
25893: PPUSH
25894: CALL_OW 264
25898: PUSH
25899: LD_INT 14
25901: PUSH
25902: LD_INT 53
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: IN
25909: AND
25910: PUSH
25911: LD_VAR 0 4
25915: PPUSH
25916: LD_VAR 0 5
25920: PPUSH
25921: CALL_OW 488
25925: AND
25926: IFFALSE 25950
// CutTreeXYR ( unit , x , y , 12 ) ;
25928: LD_VAR 0 2
25932: PPUSH
25933: LD_VAR 0 4
25937: PPUSH
25938: LD_VAR 0 5
25942: PPUSH
25943: LD_INT 12
25945: PPUSH
25946: CALL 26013 0 4
// if cmd = 256 then
25950: LD_VAR 0 1
25954: PUSH
25955: LD_INT 256
25957: EQUAL
25958: IFFALSE 25979
// SetFactoryWaypoint ( unit , x , y ) ;
25960: LD_VAR 0 2
25964: PPUSH
25965: LD_VAR 0 4
25969: PPUSH
25970: LD_VAR 0 5
25974: PPUSH
25975: CALL 23960 0 3
// if cmd = 257 then
25979: LD_VAR 0 1
25983: PUSH
25984: LD_INT 257
25986: EQUAL
25987: IFFALSE 26008
// SetWarehouseGatheringPoint ( unit , x , y ) ;
25989: LD_VAR 0 2
25993: PPUSH
25994: LD_VAR 0 4
25998: PPUSH
25999: LD_VAR 0 5
26003: PPUSH
26004: CALL 24322 0 3
// end ;
26008: LD_VAR 0 6
26012: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26013: LD_INT 0
26015: PPUSH
26016: PPUSH
26017: PPUSH
26018: PPUSH
26019: PPUSH
26020: PPUSH
26021: PPUSH
26022: PPUSH
26023: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26024: LD_VAR 0 1
26028: NOT
26029: PUSH
26030: LD_VAR 0 2
26034: PPUSH
26035: LD_VAR 0 3
26039: PPUSH
26040: CALL_OW 488
26044: NOT
26045: OR
26046: PUSH
26047: LD_VAR 0 4
26051: NOT
26052: OR
26053: IFFALSE 26057
// exit ;
26055: GO 26397
// list := [ ] ;
26057: LD_ADDR_VAR 0 13
26061: PUSH
26062: EMPTY
26063: ST_TO_ADDR
// if x - r < 0 then
26064: LD_VAR 0 2
26068: PUSH
26069: LD_VAR 0 4
26073: MINUS
26074: PUSH
26075: LD_INT 0
26077: LESS
26078: IFFALSE 26090
// min_x := 0 else
26080: LD_ADDR_VAR 0 7
26084: PUSH
26085: LD_INT 0
26087: ST_TO_ADDR
26088: GO 26106
// min_x := x - r ;
26090: LD_ADDR_VAR 0 7
26094: PUSH
26095: LD_VAR 0 2
26099: PUSH
26100: LD_VAR 0 4
26104: MINUS
26105: ST_TO_ADDR
// if y - r < 0 then
26106: LD_VAR 0 3
26110: PUSH
26111: LD_VAR 0 4
26115: MINUS
26116: PUSH
26117: LD_INT 0
26119: LESS
26120: IFFALSE 26132
// min_y := 0 else
26122: LD_ADDR_VAR 0 8
26126: PUSH
26127: LD_INT 0
26129: ST_TO_ADDR
26130: GO 26148
// min_y := y - r ;
26132: LD_ADDR_VAR 0 8
26136: PUSH
26137: LD_VAR 0 3
26141: PUSH
26142: LD_VAR 0 4
26146: MINUS
26147: ST_TO_ADDR
// max_x := x + r ;
26148: LD_ADDR_VAR 0 9
26152: PUSH
26153: LD_VAR 0 2
26157: PUSH
26158: LD_VAR 0 4
26162: PLUS
26163: ST_TO_ADDR
// max_y := y + r ;
26164: LD_ADDR_VAR 0 10
26168: PUSH
26169: LD_VAR 0 3
26173: PUSH
26174: LD_VAR 0 4
26178: PLUS
26179: ST_TO_ADDR
// for _x = min_x to max_x do
26180: LD_ADDR_VAR 0 11
26184: PUSH
26185: DOUBLE
26186: LD_VAR 0 7
26190: DEC
26191: ST_TO_ADDR
26192: LD_VAR 0 9
26196: PUSH
26197: FOR_TO
26198: IFFALSE 26315
// for _y = min_y to max_y do
26200: LD_ADDR_VAR 0 12
26204: PUSH
26205: DOUBLE
26206: LD_VAR 0 8
26210: DEC
26211: ST_TO_ADDR
26212: LD_VAR 0 10
26216: PUSH
26217: FOR_TO
26218: IFFALSE 26311
// begin if not ValidHex ( _x , _y ) then
26220: LD_VAR 0 11
26224: PPUSH
26225: LD_VAR 0 12
26229: PPUSH
26230: CALL_OW 488
26234: NOT
26235: IFFALSE 26239
// continue ;
26237: GO 26217
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26239: LD_VAR 0 11
26243: PPUSH
26244: LD_VAR 0 12
26248: PPUSH
26249: CALL_OW 351
26253: PUSH
26254: LD_VAR 0 11
26258: PPUSH
26259: LD_VAR 0 12
26263: PPUSH
26264: CALL_OW 554
26268: AND
26269: IFFALSE 26309
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26271: LD_ADDR_VAR 0 13
26275: PUSH
26276: LD_VAR 0 13
26280: PPUSH
26281: LD_VAR 0 13
26285: PUSH
26286: LD_INT 1
26288: PLUS
26289: PPUSH
26290: LD_VAR 0 11
26294: PUSH
26295: LD_VAR 0 12
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PPUSH
26304: CALL_OW 2
26308: ST_TO_ADDR
// end ;
26309: GO 26217
26311: POP
26312: POP
26313: GO 26197
26315: POP
26316: POP
// if not list then
26317: LD_VAR 0 13
26321: NOT
26322: IFFALSE 26326
// exit ;
26324: GO 26397
// for i in list do
26326: LD_ADDR_VAR 0 6
26330: PUSH
26331: LD_VAR 0 13
26335: PUSH
26336: FOR_IN
26337: IFFALSE 26395
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26339: LD_VAR 0 1
26343: PPUSH
26344: LD_STRING M
26346: PUSH
26347: LD_VAR 0 6
26351: PUSH
26352: LD_INT 1
26354: ARRAY
26355: PUSH
26356: LD_VAR 0 6
26360: PUSH
26361: LD_INT 2
26363: ARRAY
26364: PUSH
26365: LD_INT 0
26367: PUSH
26368: LD_INT 0
26370: PUSH
26371: LD_INT 0
26373: PUSH
26374: LD_INT 0
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: LIST
26385: PUSH
26386: EMPTY
26387: LIST
26388: PPUSH
26389: CALL_OW 447
26393: GO 26336
26395: POP
26396: POP
// end ;
26397: LD_VAR 0 5
26401: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26402: LD_EXP 87
26406: NOT
26407: IFFALSE 26457
26409: GO 26411
26411: DISABLE
// begin initHack := true ;
26412: LD_ADDR_EXP 87
26416: PUSH
26417: LD_INT 1
26419: ST_TO_ADDR
// hackTanks := [ ] ;
26420: LD_ADDR_EXP 88
26424: PUSH
26425: EMPTY
26426: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26427: LD_ADDR_EXP 89
26431: PUSH
26432: EMPTY
26433: ST_TO_ADDR
// hackLimit := 3 ;
26434: LD_ADDR_EXP 90
26438: PUSH
26439: LD_INT 3
26441: ST_TO_ADDR
// hackDist := 12 ;
26442: LD_ADDR_EXP 91
26446: PUSH
26447: LD_INT 12
26449: ST_TO_ADDR
// hackCounter := [ ] ;
26450: LD_ADDR_EXP 92
26454: PUSH
26455: EMPTY
26456: ST_TO_ADDR
// end ;
26457: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26458: LD_EXP 87
26462: PUSH
26463: LD_INT 34
26465: PUSH
26466: LD_INT 99
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PPUSH
26473: CALL_OW 69
26477: AND
26478: IFFALSE 26731
26480: GO 26482
26482: DISABLE
26483: LD_INT 0
26485: PPUSH
26486: PPUSH
// begin enable ;
26487: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26488: LD_ADDR_VAR 0 1
26492: PUSH
26493: LD_INT 34
26495: PUSH
26496: LD_INT 99
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PPUSH
26503: CALL_OW 69
26507: PUSH
26508: FOR_IN
26509: IFFALSE 26729
// begin if not i in hackTanks then
26511: LD_VAR 0 1
26515: PUSH
26516: LD_EXP 88
26520: IN
26521: NOT
26522: IFFALSE 26605
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26524: LD_ADDR_EXP 88
26528: PUSH
26529: LD_EXP 88
26533: PPUSH
26534: LD_EXP 88
26538: PUSH
26539: LD_INT 1
26541: PLUS
26542: PPUSH
26543: LD_VAR 0 1
26547: PPUSH
26548: CALL_OW 1
26552: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26553: LD_ADDR_EXP 89
26557: PUSH
26558: LD_EXP 89
26562: PPUSH
26563: LD_EXP 89
26567: PUSH
26568: LD_INT 1
26570: PLUS
26571: PPUSH
26572: EMPTY
26573: PPUSH
26574: CALL_OW 1
26578: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26579: LD_ADDR_EXP 92
26583: PUSH
26584: LD_EXP 92
26588: PPUSH
26589: LD_EXP 92
26593: PUSH
26594: LD_INT 1
26596: PLUS
26597: PPUSH
26598: EMPTY
26599: PPUSH
26600: CALL_OW 1
26604: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26605: LD_VAR 0 1
26609: PPUSH
26610: CALL_OW 302
26614: NOT
26615: IFFALSE 26628
// begin HackUnlinkAll ( i ) ;
26617: LD_VAR 0 1
26621: PPUSH
26622: CALL 26734 0 1
// continue ;
26626: GO 26508
// end ; HackCheckCapturedStatus ( i ) ;
26628: LD_VAR 0 1
26632: PPUSH
26633: CALL 27177 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26637: LD_ADDR_VAR 0 2
26641: PUSH
26642: LD_INT 81
26644: PUSH
26645: LD_VAR 0 1
26649: PPUSH
26650: CALL_OW 255
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: LD_INT 33
26661: PUSH
26662: LD_INT 3
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: PUSH
26669: LD_INT 91
26671: PUSH
26672: LD_VAR 0 1
26676: PUSH
26677: LD_EXP 91
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: LIST
26686: PUSH
26687: LD_INT 50
26689: PUSH
26690: EMPTY
26691: LIST
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: PPUSH
26699: CALL_OW 69
26703: ST_TO_ADDR
// if not tmp then
26704: LD_VAR 0 2
26708: NOT
26709: IFFALSE 26713
// continue ;
26711: GO 26508
// HackLink ( i , tmp ) ;
26713: LD_VAR 0 1
26717: PPUSH
26718: LD_VAR 0 2
26722: PPUSH
26723: CALL 26870 0 2
// end ;
26727: GO 26508
26729: POP
26730: POP
// end ;
26731: PPOPN 2
26733: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26734: LD_INT 0
26736: PPUSH
26737: PPUSH
26738: PPUSH
// if not hack in hackTanks then
26739: LD_VAR 0 1
26743: PUSH
26744: LD_EXP 88
26748: IN
26749: NOT
26750: IFFALSE 26754
// exit ;
26752: GO 26865
// index := GetElementIndex ( hackTanks , hack ) ;
26754: LD_ADDR_VAR 0 4
26758: PUSH
26759: LD_EXP 88
26763: PPUSH
26764: LD_VAR 0 1
26768: PPUSH
26769: CALL 34307 0 2
26773: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26774: LD_EXP 89
26778: PUSH
26779: LD_VAR 0 4
26783: ARRAY
26784: IFFALSE 26865
// begin for i in hackTanksCaptured [ index ] do
26786: LD_ADDR_VAR 0 3
26790: PUSH
26791: LD_EXP 89
26795: PUSH
26796: LD_VAR 0 4
26800: ARRAY
26801: PUSH
26802: FOR_IN
26803: IFFALSE 26829
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26805: LD_VAR 0 3
26809: PUSH
26810: LD_INT 1
26812: ARRAY
26813: PPUSH
26814: LD_VAR 0 3
26818: PUSH
26819: LD_INT 2
26821: ARRAY
26822: PPUSH
26823: CALL_OW 235
26827: GO 26802
26829: POP
26830: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26831: LD_ADDR_EXP 89
26835: PUSH
26836: LD_EXP 89
26840: PPUSH
26841: LD_VAR 0 4
26845: PPUSH
26846: EMPTY
26847: PPUSH
26848: CALL_OW 1
26852: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26853: LD_VAR 0 1
26857: PPUSH
26858: LD_INT 0
26860: PPUSH
26861: CALL_OW 505
// end ; end ;
26865: LD_VAR 0 2
26869: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26870: LD_INT 0
26872: PPUSH
26873: PPUSH
26874: PPUSH
// if not hack in hackTanks or not vehicles then
26875: LD_VAR 0 1
26879: PUSH
26880: LD_EXP 88
26884: IN
26885: NOT
26886: PUSH
26887: LD_VAR 0 2
26891: NOT
26892: OR
26893: IFFALSE 26897
// exit ;
26895: GO 27172
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26897: LD_ADDR_VAR 0 2
26901: PUSH
26902: LD_VAR 0 1
26906: PPUSH
26907: LD_VAR 0 2
26911: PPUSH
26912: LD_INT 1
26914: PPUSH
26915: LD_INT 1
26917: PPUSH
26918: CALL 34957 0 4
26922: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26923: LD_ADDR_VAR 0 5
26927: PUSH
26928: LD_EXP 88
26932: PPUSH
26933: LD_VAR 0 1
26937: PPUSH
26938: CALL 34307 0 2
26942: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26943: LD_EXP 89
26947: PUSH
26948: LD_VAR 0 5
26952: ARRAY
26953: PUSH
26954: LD_EXP 90
26958: LESS
26959: IFFALSE 27148
// begin for i := 1 to vehicles do
26961: LD_ADDR_VAR 0 4
26965: PUSH
26966: DOUBLE
26967: LD_INT 1
26969: DEC
26970: ST_TO_ADDR
26971: LD_VAR 0 2
26975: PUSH
26976: FOR_TO
26977: IFFALSE 27146
// begin if hackTanksCaptured [ index ] = hackLimit then
26979: LD_EXP 89
26983: PUSH
26984: LD_VAR 0 5
26988: ARRAY
26989: PUSH
26990: LD_EXP 90
26994: EQUAL
26995: IFFALSE 26999
// break ;
26997: GO 27146
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26999: LD_ADDR_EXP 92
27003: PUSH
27004: LD_EXP 92
27008: PPUSH
27009: LD_VAR 0 5
27013: PPUSH
27014: LD_EXP 92
27018: PUSH
27019: LD_VAR 0 5
27023: ARRAY
27024: PUSH
27025: LD_INT 1
27027: PLUS
27028: PPUSH
27029: CALL_OW 1
27033: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27034: LD_ADDR_EXP 89
27038: PUSH
27039: LD_EXP 89
27043: PPUSH
27044: LD_VAR 0 5
27048: PUSH
27049: LD_EXP 89
27053: PUSH
27054: LD_VAR 0 5
27058: ARRAY
27059: PUSH
27060: LD_INT 1
27062: PLUS
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: PPUSH
27068: LD_VAR 0 2
27072: PUSH
27073: LD_VAR 0 4
27077: ARRAY
27078: PUSH
27079: LD_VAR 0 2
27083: PUSH
27084: LD_VAR 0 4
27088: ARRAY
27089: PPUSH
27090: CALL_OW 255
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PPUSH
27099: CALL 34522 0 3
27103: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27104: LD_VAR 0 2
27108: PUSH
27109: LD_VAR 0 4
27113: ARRAY
27114: PPUSH
27115: LD_VAR 0 1
27119: PPUSH
27120: CALL_OW 255
27124: PPUSH
27125: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27129: LD_VAR 0 2
27133: PUSH
27134: LD_VAR 0 4
27138: ARRAY
27139: PPUSH
27140: CALL_OW 141
// end ;
27144: GO 26976
27146: POP
27147: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27148: LD_VAR 0 1
27152: PPUSH
27153: LD_EXP 89
27157: PUSH
27158: LD_VAR 0 5
27162: ARRAY
27163: PUSH
27164: LD_INT 0
27166: PLUS
27167: PPUSH
27168: CALL_OW 505
// end ;
27172: LD_VAR 0 3
27176: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27177: LD_INT 0
27179: PPUSH
27180: PPUSH
27181: PPUSH
27182: PPUSH
// if not hack in hackTanks then
27183: LD_VAR 0 1
27187: PUSH
27188: LD_EXP 88
27192: IN
27193: NOT
27194: IFFALSE 27198
// exit ;
27196: GO 27438
// index := GetElementIndex ( hackTanks , hack ) ;
27198: LD_ADDR_VAR 0 4
27202: PUSH
27203: LD_EXP 88
27207: PPUSH
27208: LD_VAR 0 1
27212: PPUSH
27213: CALL 34307 0 2
27217: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27218: LD_ADDR_VAR 0 3
27222: PUSH
27223: DOUBLE
27224: LD_EXP 89
27228: PUSH
27229: LD_VAR 0 4
27233: ARRAY
27234: INC
27235: ST_TO_ADDR
27236: LD_INT 1
27238: PUSH
27239: FOR_DOWNTO
27240: IFFALSE 27412
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27242: LD_ADDR_VAR 0 5
27246: PUSH
27247: LD_EXP 89
27251: PUSH
27252: LD_VAR 0 4
27256: ARRAY
27257: PUSH
27258: LD_VAR 0 3
27262: ARRAY
27263: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27264: LD_VAR 0 5
27268: PUSH
27269: LD_INT 1
27271: ARRAY
27272: PPUSH
27273: CALL_OW 302
27277: NOT
27278: PUSH
27279: LD_VAR 0 5
27283: PUSH
27284: LD_INT 1
27286: ARRAY
27287: PPUSH
27288: CALL_OW 255
27292: PUSH
27293: LD_VAR 0 1
27297: PPUSH
27298: CALL_OW 255
27302: NONEQUAL
27303: OR
27304: IFFALSE 27410
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27306: LD_VAR 0 5
27310: PUSH
27311: LD_INT 1
27313: ARRAY
27314: PPUSH
27315: CALL_OW 305
27319: PUSH
27320: LD_VAR 0 5
27324: PUSH
27325: LD_INT 1
27327: ARRAY
27328: PPUSH
27329: CALL_OW 255
27333: PUSH
27334: LD_VAR 0 1
27338: PPUSH
27339: CALL_OW 255
27343: EQUAL
27344: AND
27345: IFFALSE 27369
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27347: LD_VAR 0 5
27351: PUSH
27352: LD_INT 1
27354: ARRAY
27355: PPUSH
27356: LD_VAR 0 5
27360: PUSH
27361: LD_INT 2
27363: ARRAY
27364: PPUSH
27365: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27369: LD_ADDR_EXP 89
27373: PUSH
27374: LD_EXP 89
27378: PPUSH
27379: LD_VAR 0 4
27383: PPUSH
27384: LD_EXP 89
27388: PUSH
27389: LD_VAR 0 4
27393: ARRAY
27394: PPUSH
27395: LD_VAR 0 3
27399: PPUSH
27400: CALL_OW 3
27404: PPUSH
27405: CALL_OW 1
27409: ST_TO_ADDR
// end ; end ;
27410: GO 27239
27412: POP
27413: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27414: LD_VAR 0 1
27418: PPUSH
27419: LD_EXP 89
27423: PUSH
27424: LD_VAR 0 4
27428: ARRAY
27429: PUSH
27430: LD_INT 0
27432: PLUS
27433: PPUSH
27434: CALL_OW 505
// end ;
27438: LD_VAR 0 2
27442: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27443: LD_INT 0
27445: PPUSH
27446: PPUSH
27447: PPUSH
27448: PPUSH
// if not hack in hackTanks then
27449: LD_VAR 0 1
27453: PUSH
27454: LD_EXP 88
27458: IN
27459: NOT
27460: IFFALSE 27464
// exit ;
27462: GO 27549
// index := GetElementIndex ( hackTanks , hack ) ;
27464: LD_ADDR_VAR 0 5
27468: PUSH
27469: LD_EXP 88
27473: PPUSH
27474: LD_VAR 0 1
27478: PPUSH
27479: CALL 34307 0 2
27483: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27484: LD_ADDR_VAR 0 4
27488: PUSH
27489: DOUBLE
27490: LD_INT 1
27492: DEC
27493: ST_TO_ADDR
27494: LD_EXP 89
27498: PUSH
27499: LD_VAR 0 5
27503: ARRAY
27504: PUSH
27505: FOR_TO
27506: IFFALSE 27547
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27508: LD_EXP 89
27512: PUSH
27513: LD_VAR 0 5
27517: ARRAY
27518: PUSH
27519: LD_VAR 0 4
27523: ARRAY
27524: PUSH
27525: LD_INT 1
27527: ARRAY
27528: PUSH
27529: LD_VAR 0 2
27533: EQUAL
27534: IFFALSE 27545
// KillUnit ( vehicle ) ;
27536: LD_VAR 0 2
27540: PPUSH
27541: CALL_OW 66
27545: GO 27505
27547: POP
27548: POP
// end ;
27549: LD_VAR 0 3
27553: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27554: LD_EXP 93
27558: NOT
27559: IFFALSE 27594
27561: GO 27563
27563: DISABLE
// begin initMiner := true ;
27564: LD_ADDR_EXP 93
27568: PUSH
27569: LD_INT 1
27571: ST_TO_ADDR
// minersList := [ ] ;
27572: LD_ADDR_EXP 94
27576: PUSH
27577: EMPTY
27578: ST_TO_ADDR
// minerMinesList := [ ] ;
27579: LD_ADDR_EXP 95
27583: PUSH
27584: EMPTY
27585: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27586: LD_ADDR_EXP 96
27590: PUSH
27591: LD_INT 5
27593: ST_TO_ADDR
// end ;
27594: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27595: LD_EXP 93
27599: PUSH
27600: LD_INT 34
27602: PUSH
27603: LD_INT 81
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PPUSH
27610: CALL_OW 69
27614: AND
27615: IFFALSE 28076
27617: GO 27619
27619: DISABLE
27620: LD_INT 0
27622: PPUSH
27623: PPUSH
27624: PPUSH
27625: PPUSH
// begin enable ;
27626: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27627: LD_ADDR_VAR 0 1
27631: PUSH
27632: LD_INT 34
27634: PUSH
27635: LD_INT 81
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: PPUSH
27642: CALL_OW 69
27646: PUSH
27647: FOR_IN
27648: IFFALSE 27720
// begin if not i in minersList then
27650: LD_VAR 0 1
27654: PUSH
27655: LD_EXP 94
27659: IN
27660: NOT
27661: IFFALSE 27718
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27663: LD_ADDR_EXP 94
27667: PUSH
27668: LD_EXP 94
27672: PPUSH
27673: LD_EXP 94
27677: PUSH
27678: LD_INT 1
27680: PLUS
27681: PPUSH
27682: LD_VAR 0 1
27686: PPUSH
27687: CALL_OW 1
27691: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27692: LD_ADDR_EXP 95
27696: PUSH
27697: LD_EXP 95
27701: PPUSH
27702: LD_EXP 95
27706: PUSH
27707: LD_INT 1
27709: PLUS
27710: PPUSH
27711: EMPTY
27712: PPUSH
27713: CALL_OW 1
27717: ST_TO_ADDR
// end end ;
27718: GO 27647
27720: POP
27721: POP
// for i := minerMinesList downto 1 do
27722: LD_ADDR_VAR 0 1
27726: PUSH
27727: DOUBLE
27728: LD_EXP 95
27732: INC
27733: ST_TO_ADDR
27734: LD_INT 1
27736: PUSH
27737: FOR_DOWNTO
27738: IFFALSE 28074
// begin if IsLive ( minersList [ i ] ) then
27740: LD_EXP 94
27744: PUSH
27745: LD_VAR 0 1
27749: ARRAY
27750: PPUSH
27751: CALL_OW 300
27755: IFFALSE 27783
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
27757: LD_EXP 94
27761: PUSH
27762: LD_VAR 0 1
27766: ARRAY
27767: PPUSH
27768: LD_EXP 95
27772: PUSH
27773: LD_VAR 0 1
27777: ARRAY
27778: PPUSH
27779: CALL_OW 505
// if not minerMinesList [ i ] then
27783: LD_EXP 95
27787: PUSH
27788: LD_VAR 0 1
27792: ARRAY
27793: NOT
27794: IFFALSE 27798
// continue ;
27796: GO 27737
// for j := minerMinesList [ i ] downto 1 do
27798: LD_ADDR_VAR 0 2
27802: PUSH
27803: DOUBLE
27804: LD_EXP 95
27808: PUSH
27809: LD_VAR 0 1
27813: ARRAY
27814: INC
27815: ST_TO_ADDR
27816: LD_INT 1
27818: PUSH
27819: FOR_DOWNTO
27820: IFFALSE 28070
// begin side := GetSide ( minersList [ i ] ) ;
27822: LD_ADDR_VAR 0 3
27826: PUSH
27827: LD_EXP 94
27831: PUSH
27832: LD_VAR 0 1
27836: ARRAY
27837: PPUSH
27838: CALL_OW 255
27842: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27843: LD_ADDR_VAR 0 4
27847: PUSH
27848: LD_EXP 95
27852: PUSH
27853: LD_VAR 0 1
27857: ARRAY
27858: PUSH
27859: LD_VAR 0 2
27863: ARRAY
27864: PUSH
27865: LD_INT 1
27867: ARRAY
27868: PPUSH
27869: LD_EXP 95
27873: PUSH
27874: LD_VAR 0 1
27878: ARRAY
27879: PUSH
27880: LD_VAR 0 2
27884: ARRAY
27885: PUSH
27886: LD_INT 2
27888: ARRAY
27889: PPUSH
27890: CALL_OW 428
27894: ST_TO_ADDR
// if not tmp then
27895: LD_VAR 0 4
27899: NOT
27900: IFFALSE 27904
// continue ;
27902: GO 27819
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27904: LD_VAR 0 4
27908: PUSH
27909: LD_INT 81
27911: PUSH
27912: LD_VAR 0 3
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PPUSH
27921: CALL_OW 69
27925: IN
27926: PUSH
27927: LD_EXP 95
27931: PUSH
27932: LD_VAR 0 1
27936: ARRAY
27937: PUSH
27938: LD_VAR 0 2
27942: ARRAY
27943: PUSH
27944: LD_INT 1
27946: ARRAY
27947: PPUSH
27948: LD_EXP 95
27952: PUSH
27953: LD_VAR 0 1
27957: ARRAY
27958: PUSH
27959: LD_VAR 0 2
27963: ARRAY
27964: PUSH
27965: LD_INT 2
27967: ARRAY
27968: PPUSH
27969: CALL_OW 458
27973: AND
27974: IFFALSE 28068
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27976: LD_EXP 95
27980: PUSH
27981: LD_VAR 0 1
27985: ARRAY
27986: PUSH
27987: LD_VAR 0 2
27991: ARRAY
27992: PUSH
27993: LD_INT 1
27995: ARRAY
27996: PPUSH
27997: LD_EXP 95
28001: PUSH
28002: LD_VAR 0 1
28006: ARRAY
28007: PUSH
28008: LD_VAR 0 2
28012: ARRAY
28013: PUSH
28014: LD_INT 2
28016: ARRAY
28017: PPUSH
28018: LD_VAR 0 3
28022: PPUSH
28023: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28027: LD_ADDR_EXP 95
28031: PUSH
28032: LD_EXP 95
28036: PPUSH
28037: LD_VAR 0 1
28041: PPUSH
28042: LD_EXP 95
28046: PUSH
28047: LD_VAR 0 1
28051: ARRAY
28052: PPUSH
28053: LD_VAR 0 2
28057: PPUSH
28058: CALL_OW 3
28062: PPUSH
28063: CALL_OW 1
28067: ST_TO_ADDR
// end ; end ;
28068: GO 27819
28070: POP
28071: POP
// end ;
28072: GO 27737
28074: POP
28075: POP
// end ;
28076: PPOPN 4
28078: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28079: LD_INT 0
28081: PPUSH
28082: PPUSH
// result := false ;
28083: LD_ADDR_VAR 0 4
28087: PUSH
28088: LD_INT 0
28090: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28091: LD_VAR 0 1
28095: PPUSH
28096: CALL_OW 264
28100: PUSH
28101: LD_INT 81
28103: EQUAL
28104: NOT
28105: IFFALSE 28109
// exit ;
28107: GO 28349
// index := GetElementIndex ( minersList , unit ) ;
28109: LD_ADDR_VAR 0 5
28113: PUSH
28114: LD_EXP 94
28118: PPUSH
28119: LD_VAR 0 1
28123: PPUSH
28124: CALL 34307 0 2
28128: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28129: LD_EXP 95
28133: PUSH
28134: LD_VAR 0 5
28138: ARRAY
28139: PUSH
28140: LD_EXP 96
28144: GREATEREQUAL
28145: IFFALSE 28149
// exit ;
28147: GO 28349
// ComMoveXY ( unit , x , y ) ;
28149: LD_VAR 0 1
28153: PPUSH
28154: LD_VAR 0 2
28158: PPUSH
28159: LD_VAR 0 3
28163: PPUSH
28164: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28168: LD_INT 35
28170: PPUSH
28171: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28175: LD_VAR 0 1
28179: PPUSH
28180: LD_VAR 0 2
28184: PPUSH
28185: LD_VAR 0 3
28189: PPUSH
28190: CALL 65691 0 3
28194: NOT
28195: PUSH
28196: LD_VAR 0 1
28200: PPUSH
28201: CALL_OW 314
28205: AND
28206: IFFALSE 28210
// exit ;
28208: GO 28349
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28210: LD_VAR 0 2
28214: PPUSH
28215: LD_VAR 0 3
28219: PPUSH
28220: CALL_OW 428
28224: PUSH
28225: LD_VAR 0 1
28229: EQUAL
28230: PUSH
28231: LD_VAR 0 1
28235: PPUSH
28236: CALL_OW 314
28240: NOT
28241: AND
28242: IFFALSE 28168
// PlaySoundXY ( x , y , PlantMine ) ;
28244: LD_VAR 0 2
28248: PPUSH
28249: LD_VAR 0 3
28253: PPUSH
28254: LD_STRING PlantMine
28256: PPUSH
28257: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28261: LD_VAR 0 2
28265: PPUSH
28266: LD_VAR 0 3
28270: PPUSH
28271: LD_VAR 0 1
28275: PPUSH
28276: CALL_OW 255
28280: PPUSH
28281: LD_INT 0
28283: PPUSH
28284: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28288: LD_ADDR_EXP 95
28292: PUSH
28293: LD_EXP 95
28297: PPUSH
28298: LD_VAR 0 5
28302: PUSH
28303: LD_EXP 95
28307: PUSH
28308: LD_VAR 0 5
28312: ARRAY
28313: PUSH
28314: LD_INT 1
28316: PLUS
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PPUSH
28322: LD_VAR 0 2
28326: PUSH
28327: LD_VAR 0 3
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PPUSH
28336: CALL 34522 0 3
28340: ST_TO_ADDR
// result := true ;
28341: LD_ADDR_VAR 0 4
28345: PUSH
28346: LD_INT 1
28348: ST_TO_ADDR
// end ;
28349: LD_VAR 0 4
28353: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28354: LD_INT 0
28356: PPUSH
28357: PPUSH
28358: PPUSH
// if not unit in minersList then
28359: LD_VAR 0 1
28363: PUSH
28364: LD_EXP 94
28368: IN
28369: NOT
28370: IFFALSE 28374
// exit ;
28372: GO 28766
// index := GetElementIndex ( minersList , unit ) ;
28374: LD_ADDR_VAR 0 6
28378: PUSH
28379: LD_EXP 94
28383: PPUSH
28384: LD_VAR 0 1
28388: PPUSH
28389: CALL 34307 0 2
28393: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28394: LD_ADDR_VAR 0 5
28398: PUSH
28399: DOUBLE
28400: LD_EXP 95
28404: PUSH
28405: LD_VAR 0 6
28409: ARRAY
28410: INC
28411: ST_TO_ADDR
28412: LD_INT 1
28414: PUSH
28415: FOR_DOWNTO
28416: IFFALSE 28577
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28418: LD_EXP 95
28422: PUSH
28423: LD_VAR 0 6
28427: ARRAY
28428: PUSH
28429: LD_VAR 0 5
28433: ARRAY
28434: PUSH
28435: LD_INT 1
28437: ARRAY
28438: PUSH
28439: LD_VAR 0 2
28443: EQUAL
28444: PUSH
28445: LD_EXP 95
28449: PUSH
28450: LD_VAR 0 6
28454: ARRAY
28455: PUSH
28456: LD_VAR 0 5
28460: ARRAY
28461: PUSH
28462: LD_INT 2
28464: ARRAY
28465: PUSH
28466: LD_VAR 0 3
28470: EQUAL
28471: AND
28472: IFFALSE 28575
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28474: LD_EXP 95
28478: PUSH
28479: LD_VAR 0 6
28483: ARRAY
28484: PUSH
28485: LD_VAR 0 5
28489: ARRAY
28490: PUSH
28491: LD_INT 1
28493: ARRAY
28494: PPUSH
28495: LD_EXP 95
28499: PUSH
28500: LD_VAR 0 6
28504: ARRAY
28505: PUSH
28506: LD_VAR 0 5
28510: ARRAY
28511: PUSH
28512: LD_INT 2
28514: ARRAY
28515: PPUSH
28516: LD_VAR 0 1
28520: PPUSH
28521: CALL_OW 255
28525: PPUSH
28526: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28530: LD_ADDR_EXP 95
28534: PUSH
28535: LD_EXP 95
28539: PPUSH
28540: LD_VAR 0 6
28544: PPUSH
28545: LD_EXP 95
28549: PUSH
28550: LD_VAR 0 6
28554: ARRAY
28555: PPUSH
28556: LD_VAR 0 5
28560: PPUSH
28561: CALL_OW 3
28565: PPUSH
28566: CALL_OW 1
28570: ST_TO_ADDR
// exit ;
28571: POP
28572: POP
28573: GO 28766
// end ; end ;
28575: GO 28415
28577: POP
28578: POP
// for i := minerMinesList [ index ] downto 1 do
28579: LD_ADDR_VAR 0 5
28583: PUSH
28584: DOUBLE
28585: LD_EXP 95
28589: PUSH
28590: LD_VAR 0 6
28594: ARRAY
28595: INC
28596: ST_TO_ADDR
28597: LD_INT 1
28599: PUSH
28600: FOR_DOWNTO
28601: IFFALSE 28764
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28603: LD_EXP 95
28607: PUSH
28608: LD_VAR 0 6
28612: ARRAY
28613: PUSH
28614: LD_VAR 0 5
28618: ARRAY
28619: PUSH
28620: LD_INT 1
28622: ARRAY
28623: PPUSH
28624: LD_EXP 95
28628: PUSH
28629: LD_VAR 0 6
28633: ARRAY
28634: PUSH
28635: LD_VAR 0 5
28639: ARRAY
28640: PUSH
28641: LD_INT 2
28643: ARRAY
28644: PPUSH
28645: LD_VAR 0 2
28649: PPUSH
28650: LD_VAR 0 3
28654: PPUSH
28655: CALL_OW 298
28659: PUSH
28660: LD_INT 6
28662: LESS
28663: IFFALSE 28762
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28665: LD_EXP 95
28669: PUSH
28670: LD_VAR 0 6
28674: ARRAY
28675: PUSH
28676: LD_VAR 0 5
28680: ARRAY
28681: PUSH
28682: LD_INT 1
28684: ARRAY
28685: PPUSH
28686: LD_EXP 95
28690: PUSH
28691: LD_VAR 0 6
28695: ARRAY
28696: PUSH
28697: LD_VAR 0 5
28701: ARRAY
28702: PUSH
28703: LD_INT 2
28705: ARRAY
28706: PPUSH
28707: LD_VAR 0 1
28711: PPUSH
28712: CALL_OW 255
28716: PPUSH
28717: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28721: LD_ADDR_EXP 95
28725: PUSH
28726: LD_EXP 95
28730: PPUSH
28731: LD_VAR 0 6
28735: PPUSH
28736: LD_EXP 95
28740: PUSH
28741: LD_VAR 0 6
28745: ARRAY
28746: PPUSH
28747: LD_VAR 0 5
28751: PPUSH
28752: CALL_OW 3
28756: PPUSH
28757: CALL_OW 1
28761: ST_TO_ADDR
// end ; end ;
28762: GO 28600
28764: POP
28765: POP
// end ;
28766: LD_VAR 0 4
28770: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28771: LD_INT 0
28773: PPUSH
28774: PPUSH
28775: PPUSH
28776: PPUSH
28777: PPUSH
28778: PPUSH
28779: PPUSH
28780: PPUSH
28781: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28782: LD_VAR 0 1
28786: PPUSH
28787: CALL_OW 264
28791: PUSH
28792: LD_INT 81
28794: EQUAL
28795: NOT
28796: PUSH
28797: LD_VAR 0 1
28801: PUSH
28802: LD_EXP 94
28806: IN
28807: NOT
28808: OR
28809: IFFALSE 28813
// exit ;
28811: GO 29135
// index := GetElementIndex ( minersList , unit ) ;
28813: LD_ADDR_VAR 0 6
28817: PUSH
28818: LD_EXP 94
28822: PPUSH
28823: LD_VAR 0 1
28827: PPUSH
28828: CALL 34307 0 2
28832: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28833: LD_ADDR_VAR 0 8
28837: PUSH
28838: LD_EXP 96
28842: PUSH
28843: LD_EXP 95
28847: PUSH
28848: LD_VAR 0 6
28852: ARRAY
28853: MINUS
28854: ST_TO_ADDR
// if not minesFreeAmount then
28855: LD_VAR 0 8
28859: NOT
28860: IFFALSE 28864
// exit ;
28862: GO 29135
// tmp := [ ] ;
28864: LD_ADDR_VAR 0 7
28868: PUSH
28869: EMPTY
28870: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28871: LD_ADDR_VAR 0 5
28875: PUSH
28876: DOUBLE
28877: LD_INT 1
28879: DEC
28880: ST_TO_ADDR
28881: LD_VAR 0 8
28885: PUSH
28886: FOR_TO
28887: IFFALSE 29082
// begin _d := rand ( 0 , 5 ) ;
28889: LD_ADDR_VAR 0 11
28893: PUSH
28894: LD_INT 0
28896: PPUSH
28897: LD_INT 5
28899: PPUSH
28900: CALL_OW 12
28904: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28905: LD_ADDR_VAR 0 12
28909: PUSH
28910: LD_INT 2
28912: PPUSH
28913: LD_INT 6
28915: PPUSH
28916: CALL_OW 12
28920: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28921: LD_ADDR_VAR 0 9
28925: PUSH
28926: LD_VAR 0 2
28930: PPUSH
28931: LD_VAR 0 11
28935: PPUSH
28936: LD_VAR 0 12
28940: PPUSH
28941: CALL_OW 272
28945: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28946: LD_ADDR_VAR 0 10
28950: PUSH
28951: LD_VAR 0 3
28955: PPUSH
28956: LD_VAR 0 11
28960: PPUSH
28961: LD_VAR 0 12
28965: PPUSH
28966: CALL_OW 273
28970: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28971: LD_VAR 0 9
28975: PPUSH
28976: LD_VAR 0 10
28980: PPUSH
28981: CALL_OW 488
28985: PUSH
28986: LD_VAR 0 9
28990: PUSH
28991: LD_VAR 0 10
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: LD_VAR 0 7
29004: IN
29005: NOT
29006: AND
29007: PUSH
29008: LD_VAR 0 9
29012: PPUSH
29013: LD_VAR 0 10
29017: PPUSH
29018: CALL_OW 458
29022: NOT
29023: AND
29024: IFFALSE 29066
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29026: LD_ADDR_VAR 0 7
29030: PUSH
29031: LD_VAR 0 7
29035: PPUSH
29036: LD_VAR 0 7
29040: PUSH
29041: LD_INT 1
29043: PLUS
29044: PPUSH
29045: LD_VAR 0 9
29049: PUSH
29050: LD_VAR 0 10
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PPUSH
29059: CALL_OW 1
29063: ST_TO_ADDR
29064: GO 29080
// i := i - 1 ;
29066: LD_ADDR_VAR 0 5
29070: PUSH
29071: LD_VAR 0 5
29075: PUSH
29076: LD_INT 1
29078: MINUS
29079: ST_TO_ADDR
// end ;
29080: GO 28886
29082: POP
29083: POP
// for i in tmp do
29084: LD_ADDR_VAR 0 5
29088: PUSH
29089: LD_VAR 0 7
29093: PUSH
29094: FOR_IN
29095: IFFALSE 29133
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29097: LD_VAR 0 1
29101: PPUSH
29102: LD_VAR 0 5
29106: PUSH
29107: LD_INT 1
29109: ARRAY
29110: PPUSH
29111: LD_VAR 0 5
29115: PUSH
29116: LD_INT 2
29118: ARRAY
29119: PPUSH
29120: CALL 28079 0 3
29124: NOT
29125: IFFALSE 29131
// exit ;
29127: POP
29128: POP
29129: GO 29135
29131: GO 29094
29133: POP
29134: POP
// end ;
29135: LD_VAR 0 4
29139: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29140: LD_INT 0
29142: PPUSH
29143: PPUSH
29144: PPUSH
29145: PPUSH
29146: PPUSH
29147: PPUSH
29148: PPUSH
// if not GetClass ( unit ) = class_sniper then
29149: LD_VAR 0 1
29153: PPUSH
29154: CALL_OW 257
29158: PUSH
29159: LD_INT 5
29161: EQUAL
29162: NOT
29163: IFFALSE 29167
// exit ;
29165: GO 29555
// dist := 8 ;
29167: LD_ADDR_VAR 0 5
29171: PUSH
29172: LD_INT 8
29174: ST_TO_ADDR
// viewRange := 12 ;
29175: LD_ADDR_VAR 0 7
29179: PUSH
29180: LD_INT 12
29182: ST_TO_ADDR
// side := GetSide ( unit ) ;
29183: LD_ADDR_VAR 0 6
29187: PUSH
29188: LD_VAR 0 1
29192: PPUSH
29193: CALL_OW 255
29197: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29198: LD_INT 61
29200: PPUSH
29201: LD_VAR 0 6
29205: PPUSH
29206: CALL_OW 321
29210: PUSH
29211: LD_INT 2
29213: EQUAL
29214: IFFALSE 29224
// viewRange := 16 ;
29216: LD_ADDR_VAR 0 7
29220: PUSH
29221: LD_INT 16
29223: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29224: LD_VAR 0 1
29228: PPUSH
29229: LD_VAR 0 2
29233: PPUSH
29234: LD_VAR 0 3
29238: PPUSH
29239: CALL_OW 297
29243: PUSH
29244: LD_VAR 0 5
29248: GREATER
29249: IFFALSE 29328
// begin ComMoveXY ( unit , x , y ) ;
29251: LD_VAR 0 1
29255: PPUSH
29256: LD_VAR 0 2
29260: PPUSH
29261: LD_VAR 0 3
29265: PPUSH
29266: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29270: LD_INT 35
29272: PPUSH
29273: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29277: LD_VAR 0 1
29281: PPUSH
29282: LD_VAR 0 2
29286: PPUSH
29287: LD_VAR 0 3
29291: PPUSH
29292: CALL 65691 0 3
29296: NOT
29297: IFFALSE 29301
// exit ;
29299: GO 29555
// until GetDistUnitXY ( unit , x , y ) < dist ;
29301: LD_VAR 0 1
29305: PPUSH
29306: LD_VAR 0 2
29310: PPUSH
29311: LD_VAR 0 3
29315: PPUSH
29316: CALL_OW 297
29320: PUSH
29321: LD_VAR 0 5
29325: LESS
29326: IFFALSE 29270
// end ; ComTurnXY ( unit , x , y ) ;
29328: LD_VAR 0 1
29332: PPUSH
29333: LD_VAR 0 2
29337: PPUSH
29338: LD_VAR 0 3
29342: PPUSH
29343: CALL_OW 118
// wait ( 5 ) ;
29347: LD_INT 5
29349: PPUSH
29350: CALL_OW 67
// _d := GetDir ( unit ) ;
29354: LD_ADDR_VAR 0 10
29358: PUSH
29359: LD_VAR 0 1
29363: PPUSH
29364: CALL_OW 254
29368: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29369: LD_ADDR_VAR 0 8
29373: PUSH
29374: LD_VAR 0 1
29378: PPUSH
29379: CALL_OW 250
29383: PPUSH
29384: LD_VAR 0 10
29388: PPUSH
29389: LD_VAR 0 5
29393: PPUSH
29394: CALL_OW 272
29398: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29399: LD_ADDR_VAR 0 9
29403: PUSH
29404: LD_VAR 0 1
29408: PPUSH
29409: CALL_OW 251
29413: PPUSH
29414: LD_VAR 0 10
29418: PPUSH
29419: LD_VAR 0 5
29423: PPUSH
29424: CALL_OW 273
29428: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29429: LD_VAR 0 8
29433: PPUSH
29434: LD_VAR 0 9
29438: PPUSH
29439: CALL_OW 488
29443: NOT
29444: IFFALSE 29448
// exit ;
29446: GO 29555
// ComAnimCustom ( unit , 1 ) ;
29448: LD_VAR 0 1
29452: PPUSH
29453: LD_INT 1
29455: PPUSH
29456: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29460: LD_VAR 0 8
29464: PPUSH
29465: LD_VAR 0 9
29469: PPUSH
29470: LD_VAR 0 6
29474: PPUSH
29475: LD_VAR 0 7
29479: PPUSH
29480: CALL_OW 330
// repeat wait ( 1 ) ;
29484: LD_INT 1
29486: PPUSH
29487: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29491: LD_VAR 0 1
29495: PPUSH
29496: CALL_OW 316
29500: PUSH
29501: LD_VAR 0 1
29505: PPUSH
29506: CALL_OW 314
29510: OR
29511: PUSH
29512: LD_VAR 0 1
29516: PPUSH
29517: CALL_OW 302
29521: NOT
29522: OR
29523: PUSH
29524: LD_VAR 0 1
29528: PPUSH
29529: CALL_OW 301
29533: OR
29534: IFFALSE 29484
// RemoveSeeing ( _x , _y , side ) ;
29536: LD_VAR 0 8
29540: PPUSH
29541: LD_VAR 0 9
29545: PPUSH
29546: LD_VAR 0 6
29550: PPUSH
29551: CALL_OW 331
// end ; end_of_file
29555: LD_VAR 0 4
29559: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29560: LD_INT 0
29562: PPUSH
29563: PPUSH
// if exist_mode then
29564: LD_VAR 0 2
29568: IFFALSE 29593
// unit := CreateCharacter ( prefix & ident ) else
29570: LD_ADDR_VAR 0 5
29574: PUSH
29575: LD_VAR 0 3
29579: PUSH
29580: LD_VAR 0 1
29584: STR
29585: PPUSH
29586: CALL_OW 34
29590: ST_TO_ADDR
29591: GO 29608
// unit := NewCharacter ( ident ) ;
29593: LD_ADDR_VAR 0 5
29597: PUSH
29598: LD_VAR 0 1
29602: PPUSH
29603: CALL_OW 25
29607: ST_TO_ADDR
// result := unit ;
29608: LD_ADDR_VAR 0 4
29612: PUSH
29613: LD_VAR 0 5
29617: ST_TO_ADDR
// end ;
29618: LD_VAR 0 4
29622: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29623: LD_INT 0
29625: PPUSH
29626: PPUSH
// if not side or not nation then
29627: LD_VAR 0 1
29631: NOT
29632: PUSH
29633: LD_VAR 0 2
29637: NOT
29638: OR
29639: IFFALSE 29643
// exit ;
29641: GO 30411
// case nation of nation_american :
29643: LD_VAR 0 2
29647: PUSH
29648: LD_INT 1
29650: DOUBLE
29651: EQUAL
29652: IFTRUE 29656
29654: GO 29870
29656: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29657: LD_ADDR_VAR 0 4
29661: PUSH
29662: LD_INT 35
29664: PUSH
29665: LD_INT 45
29667: PUSH
29668: LD_INT 46
29670: PUSH
29671: LD_INT 47
29673: PUSH
29674: LD_INT 82
29676: PUSH
29677: LD_INT 83
29679: PUSH
29680: LD_INT 84
29682: PUSH
29683: LD_INT 85
29685: PUSH
29686: LD_INT 86
29688: PUSH
29689: LD_INT 1
29691: PUSH
29692: LD_INT 2
29694: PUSH
29695: LD_INT 6
29697: PUSH
29698: LD_INT 15
29700: PUSH
29701: LD_INT 16
29703: PUSH
29704: LD_INT 7
29706: PUSH
29707: LD_INT 12
29709: PUSH
29710: LD_INT 13
29712: PUSH
29713: LD_INT 10
29715: PUSH
29716: LD_INT 14
29718: PUSH
29719: LD_INT 20
29721: PUSH
29722: LD_INT 21
29724: PUSH
29725: LD_INT 22
29727: PUSH
29728: LD_INT 25
29730: PUSH
29731: LD_INT 32
29733: PUSH
29734: LD_INT 27
29736: PUSH
29737: LD_INT 36
29739: PUSH
29740: LD_INT 69
29742: PUSH
29743: LD_INT 39
29745: PUSH
29746: LD_INT 34
29748: PUSH
29749: LD_INT 40
29751: PUSH
29752: LD_INT 48
29754: PUSH
29755: LD_INT 49
29757: PUSH
29758: LD_INT 50
29760: PUSH
29761: LD_INT 51
29763: PUSH
29764: LD_INT 52
29766: PUSH
29767: LD_INT 53
29769: PUSH
29770: LD_INT 54
29772: PUSH
29773: LD_INT 55
29775: PUSH
29776: LD_INT 56
29778: PUSH
29779: LD_INT 57
29781: PUSH
29782: LD_INT 58
29784: PUSH
29785: LD_INT 59
29787: PUSH
29788: LD_INT 60
29790: PUSH
29791: LD_INT 61
29793: PUSH
29794: LD_INT 62
29796: PUSH
29797: LD_INT 80
29799: PUSH
29800: LD_INT 82
29802: PUSH
29803: LD_INT 83
29805: PUSH
29806: LD_INT 84
29808: PUSH
29809: LD_INT 85
29811: PUSH
29812: LD_INT 86
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: ST_TO_ADDR
29868: GO 30335
29870: LD_INT 2
29872: DOUBLE
29873: EQUAL
29874: IFTRUE 29878
29876: GO 30104
29878: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29879: LD_ADDR_VAR 0 4
29883: PUSH
29884: LD_INT 35
29886: PUSH
29887: LD_INT 45
29889: PUSH
29890: LD_INT 46
29892: PUSH
29893: LD_INT 47
29895: PUSH
29896: LD_INT 82
29898: PUSH
29899: LD_INT 83
29901: PUSH
29902: LD_INT 84
29904: PUSH
29905: LD_INT 85
29907: PUSH
29908: LD_INT 87
29910: PUSH
29911: LD_INT 70
29913: PUSH
29914: LD_INT 1
29916: PUSH
29917: LD_INT 11
29919: PUSH
29920: LD_INT 3
29922: PUSH
29923: LD_INT 4
29925: PUSH
29926: LD_INT 5
29928: PUSH
29929: LD_INT 6
29931: PUSH
29932: LD_INT 15
29934: PUSH
29935: LD_INT 18
29937: PUSH
29938: LD_INT 7
29940: PUSH
29941: LD_INT 17
29943: PUSH
29944: LD_INT 8
29946: PUSH
29947: LD_INT 20
29949: PUSH
29950: LD_INT 21
29952: PUSH
29953: LD_INT 22
29955: PUSH
29956: LD_INT 72
29958: PUSH
29959: LD_INT 26
29961: PUSH
29962: LD_INT 69
29964: PUSH
29965: LD_INT 39
29967: PUSH
29968: LD_INT 40
29970: PUSH
29971: LD_INT 41
29973: PUSH
29974: LD_INT 42
29976: PUSH
29977: LD_INT 43
29979: PUSH
29980: LD_INT 48
29982: PUSH
29983: LD_INT 49
29985: PUSH
29986: LD_INT 50
29988: PUSH
29989: LD_INT 51
29991: PUSH
29992: LD_INT 52
29994: PUSH
29995: LD_INT 53
29997: PUSH
29998: LD_INT 54
30000: PUSH
30001: LD_INT 55
30003: PUSH
30004: LD_INT 56
30006: PUSH
30007: LD_INT 60
30009: PUSH
30010: LD_INT 61
30012: PUSH
30013: LD_INT 62
30015: PUSH
30016: LD_INT 66
30018: PUSH
30019: LD_INT 67
30021: PUSH
30022: LD_INT 68
30024: PUSH
30025: LD_INT 81
30027: PUSH
30028: LD_INT 82
30030: PUSH
30031: LD_INT 83
30033: PUSH
30034: LD_INT 84
30036: PUSH
30037: LD_INT 85
30039: PUSH
30040: LD_INT 87
30042: PUSH
30043: LD_INT 88
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: ST_TO_ADDR
30102: GO 30335
30104: LD_INT 3
30106: DOUBLE
30107: EQUAL
30108: IFTRUE 30112
30110: GO 30334
30112: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30113: LD_ADDR_VAR 0 4
30117: PUSH
30118: LD_INT 46
30120: PUSH
30121: LD_INT 47
30123: PUSH
30124: LD_INT 1
30126: PUSH
30127: LD_INT 2
30129: PUSH
30130: LD_INT 82
30132: PUSH
30133: LD_INT 83
30135: PUSH
30136: LD_INT 84
30138: PUSH
30139: LD_INT 85
30141: PUSH
30142: LD_INT 86
30144: PUSH
30145: LD_INT 11
30147: PUSH
30148: LD_INT 9
30150: PUSH
30151: LD_INT 20
30153: PUSH
30154: LD_INT 19
30156: PUSH
30157: LD_INT 21
30159: PUSH
30160: LD_INT 24
30162: PUSH
30163: LD_INT 22
30165: PUSH
30166: LD_INT 25
30168: PUSH
30169: LD_INT 28
30171: PUSH
30172: LD_INT 29
30174: PUSH
30175: LD_INT 30
30177: PUSH
30178: LD_INT 31
30180: PUSH
30181: LD_INT 37
30183: PUSH
30184: LD_INT 38
30186: PUSH
30187: LD_INT 32
30189: PUSH
30190: LD_INT 27
30192: PUSH
30193: LD_INT 33
30195: PUSH
30196: LD_INT 69
30198: PUSH
30199: LD_INT 39
30201: PUSH
30202: LD_INT 34
30204: PUSH
30205: LD_INT 40
30207: PUSH
30208: LD_INT 71
30210: PUSH
30211: LD_INT 23
30213: PUSH
30214: LD_INT 44
30216: PUSH
30217: LD_INT 48
30219: PUSH
30220: LD_INT 49
30222: PUSH
30223: LD_INT 50
30225: PUSH
30226: LD_INT 51
30228: PUSH
30229: LD_INT 52
30231: PUSH
30232: LD_INT 53
30234: PUSH
30235: LD_INT 54
30237: PUSH
30238: LD_INT 55
30240: PUSH
30241: LD_INT 56
30243: PUSH
30244: LD_INT 57
30246: PUSH
30247: LD_INT 58
30249: PUSH
30250: LD_INT 59
30252: PUSH
30253: LD_INT 63
30255: PUSH
30256: LD_INT 64
30258: PUSH
30259: LD_INT 65
30261: PUSH
30262: LD_INT 82
30264: PUSH
30265: LD_INT 83
30267: PUSH
30268: LD_INT 84
30270: PUSH
30271: LD_INT 85
30273: PUSH
30274: LD_INT 86
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: LIST
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: ST_TO_ADDR
30332: GO 30335
30334: POP
// if state > - 1 and state < 3 then
30335: LD_VAR 0 3
30339: PUSH
30340: LD_INT 1
30342: NEG
30343: GREATER
30344: PUSH
30345: LD_VAR 0 3
30349: PUSH
30350: LD_INT 3
30352: LESS
30353: AND
30354: IFFALSE 30411
// for i in result do
30356: LD_ADDR_VAR 0 5
30360: PUSH
30361: LD_VAR 0 4
30365: PUSH
30366: FOR_IN
30367: IFFALSE 30409
// if GetTech ( i , side ) <> state then
30369: LD_VAR 0 5
30373: PPUSH
30374: LD_VAR 0 1
30378: PPUSH
30379: CALL_OW 321
30383: PUSH
30384: LD_VAR 0 3
30388: NONEQUAL
30389: IFFALSE 30407
// result := result diff i ;
30391: LD_ADDR_VAR 0 4
30395: PUSH
30396: LD_VAR 0 4
30400: PUSH
30401: LD_VAR 0 5
30405: DIFF
30406: ST_TO_ADDR
30407: GO 30366
30409: POP
30410: POP
// end ;
30411: LD_VAR 0 4
30415: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30416: LD_INT 0
30418: PPUSH
30419: PPUSH
30420: PPUSH
// result := true ;
30421: LD_ADDR_VAR 0 3
30425: PUSH
30426: LD_INT 1
30428: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30429: LD_ADDR_VAR 0 5
30433: PUSH
30434: LD_VAR 0 2
30438: PPUSH
30439: CALL_OW 480
30443: ST_TO_ADDR
// if not tmp then
30444: LD_VAR 0 5
30448: NOT
30449: IFFALSE 30453
// exit ;
30451: GO 30502
// for i in tmp do
30453: LD_ADDR_VAR 0 4
30457: PUSH
30458: LD_VAR 0 5
30462: PUSH
30463: FOR_IN
30464: IFFALSE 30500
// if GetTech ( i , side ) <> state_researched then
30466: LD_VAR 0 4
30470: PPUSH
30471: LD_VAR 0 1
30475: PPUSH
30476: CALL_OW 321
30480: PUSH
30481: LD_INT 2
30483: NONEQUAL
30484: IFFALSE 30498
// begin result := false ;
30486: LD_ADDR_VAR 0 3
30490: PUSH
30491: LD_INT 0
30493: ST_TO_ADDR
// exit ;
30494: POP
30495: POP
30496: GO 30502
// end ;
30498: GO 30463
30500: POP
30501: POP
// end ;
30502: LD_VAR 0 3
30506: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30507: LD_INT 0
30509: PPUSH
30510: PPUSH
30511: PPUSH
30512: PPUSH
30513: PPUSH
30514: PPUSH
30515: PPUSH
30516: PPUSH
30517: PPUSH
30518: PPUSH
30519: PPUSH
30520: PPUSH
30521: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30522: LD_VAR 0 1
30526: NOT
30527: PUSH
30528: LD_VAR 0 1
30532: PPUSH
30533: CALL_OW 257
30537: PUSH
30538: LD_INT 9
30540: NONEQUAL
30541: OR
30542: IFFALSE 30546
// exit ;
30544: GO 31119
// side := GetSide ( unit ) ;
30546: LD_ADDR_VAR 0 9
30550: PUSH
30551: LD_VAR 0 1
30555: PPUSH
30556: CALL_OW 255
30560: ST_TO_ADDR
// tech_space := tech_spacanom ;
30561: LD_ADDR_VAR 0 12
30565: PUSH
30566: LD_INT 29
30568: ST_TO_ADDR
// tech_time := tech_taurad ;
30569: LD_ADDR_VAR 0 13
30573: PUSH
30574: LD_INT 28
30576: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30577: LD_ADDR_VAR 0 11
30581: PUSH
30582: LD_VAR 0 1
30586: PPUSH
30587: CALL_OW 310
30591: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30592: LD_VAR 0 11
30596: PPUSH
30597: CALL_OW 247
30601: PUSH
30602: LD_INT 2
30604: EQUAL
30605: IFFALSE 30609
// exit ;
30607: GO 31119
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30609: LD_ADDR_VAR 0 8
30613: PUSH
30614: LD_INT 81
30616: PUSH
30617: LD_VAR 0 9
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 3
30628: PUSH
30629: LD_INT 21
30631: PUSH
30632: LD_INT 3
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PPUSH
30647: CALL_OW 69
30651: ST_TO_ADDR
// if not tmp then
30652: LD_VAR 0 8
30656: NOT
30657: IFFALSE 30661
// exit ;
30659: GO 31119
// if in_unit then
30661: LD_VAR 0 11
30665: IFFALSE 30689
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30667: LD_ADDR_VAR 0 10
30671: PUSH
30672: LD_VAR 0 8
30676: PPUSH
30677: LD_VAR 0 11
30681: PPUSH
30682: CALL_OW 74
30686: ST_TO_ADDR
30687: GO 30709
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30689: LD_ADDR_VAR 0 10
30693: PUSH
30694: LD_VAR 0 8
30698: PPUSH
30699: LD_VAR 0 1
30703: PPUSH
30704: CALL_OW 74
30708: ST_TO_ADDR
// if not enemy then
30709: LD_VAR 0 10
30713: NOT
30714: IFFALSE 30718
// exit ;
30716: GO 31119
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30718: LD_VAR 0 11
30722: PUSH
30723: LD_VAR 0 11
30727: PPUSH
30728: LD_VAR 0 10
30732: PPUSH
30733: CALL_OW 296
30737: PUSH
30738: LD_INT 13
30740: GREATER
30741: AND
30742: PUSH
30743: LD_VAR 0 1
30747: PPUSH
30748: LD_VAR 0 10
30752: PPUSH
30753: CALL_OW 296
30757: PUSH
30758: LD_INT 12
30760: GREATER
30761: OR
30762: IFFALSE 30766
// exit ;
30764: GO 31119
// missile := [ 1 ] ;
30766: LD_ADDR_VAR 0 14
30770: PUSH
30771: LD_INT 1
30773: PUSH
30774: EMPTY
30775: LIST
30776: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30777: LD_VAR 0 9
30781: PPUSH
30782: LD_VAR 0 12
30786: PPUSH
30787: CALL_OW 325
30791: IFFALSE 30820
// missile := Replace ( missile , missile + 1 , 2 ) ;
30793: LD_ADDR_VAR 0 14
30797: PUSH
30798: LD_VAR 0 14
30802: PPUSH
30803: LD_VAR 0 14
30807: PUSH
30808: LD_INT 1
30810: PLUS
30811: PPUSH
30812: LD_INT 2
30814: PPUSH
30815: CALL_OW 1
30819: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30820: LD_VAR 0 9
30824: PPUSH
30825: LD_VAR 0 13
30829: PPUSH
30830: CALL_OW 325
30834: PUSH
30835: LD_VAR 0 10
30839: PPUSH
30840: CALL_OW 255
30844: PPUSH
30845: LD_VAR 0 13
30849: PPUSH
30850: CALL_OW 325
30854: NOT
30855: AND
30856: IFFALSE 30885
// missile := Replace ( missile , missile + 1 , 3 ) ;
30858: LD_ADDR_VAR 0 14
30862: PUSH
30863: LD_VAR 0 14
30867: PPUSH
30868: LD_VAR 0 14
30872: PUSH
30873: LD_INT 1
30875: PLUS
30876: PPUSH
30877: LD_INT 3
30879: PPUSH
30880: CALL_OW 1
30884: ST_TO_ADDR
// if missile < 2 then
30885: LD_VAR 0 14
30889: PUSH
30890: LD_INT 2
30892: LESS
30893: IFFALSE 30897
// exit ;
30895: GO 31119
// x := GetX ( enemy ) ;
30897: LD_ADDR_VAR 0 4
30901: PUSH
30902: LD_VAR 0 10
30906: PPUSH
30907: CALL_OW 250
30911: ST_TO_ADDR
// y := GetY ( enemy ) ;
30912: LD_ADDR_VAR 0 5
30916: PUSH
30917: LD_VAR 0 10
30921: PPUSH
30922: CALL_OW 251
30926: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30927: LD_ADDR_VAR 0 6
30931: PUSH
30932: LD_VAR 0 4
30936: PUSH
30937: LD_INT 1
30939: NEG
30940: PPUSH
30941: LD_INT 1
30943: PPUSH
30944: CALL_OW 12
30948: PLUS
30949: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30950: LD_ADDR_VAR 0 7
30954: PUSH
30955: LD_VAR 0 5
30959: PUSH
30960: LD_INT 1
30962: NEG
30963: PPUSH
30964: LD_INT 1
30966: PPUSH
30967: CALL_OW 12
30971: PLUS
30972: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30973: LD_VAR 0 6
30977: PPUSH
30978: LD_VAR 0 7
30982: PPUSH
30983: CALL_OW 488
30987: NOT
30988: IFFALSE 31010
// begin _x := x ;
30990: LD_ADDR_VAR 0 6
30994: PUSH
30995: LD_VAR 0 4
30999: ST_TO_ADDR
// _y := y ;
31000: LD_ADDR_VAR 0 7
31004: PUSH
31005: LD_VAR 0 5
31009: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31010: LD_ADDR_VAR 0 3
31014: PUSH
31015: LD_INT 1
31017: PPUSH
31018: LD_VAR 0 14
31022: PPUSH
31023: CALL_OW 12
31027: ST_TO_ADDR
// case i of 1 :
31028: LD_VAR 0 3
31032: PUSH
31033: LD_INT 1
31035: DOUBLE
31036: EQUAL
31037: IFTRUE 31041
31039: GO 31058
31041: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31042: LD_VAR 0 1
31046: PPUSH
31047: LD_VAR 0 10
31051: PPUSH
31052: CALL_OW 115
31056: GO 31119
31058: LD_INT 2
31060: DOUBLE
31061: EQUAL
31062: IFTRUE 31066
31064: GO 31088
31066: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31067: LD_VAR 0 1
31071: PPUSH
31072: LD_VAR 0 6
31076: PPUSH
31077: LD_VAR 0 7
31081: PPUSH
31082: CALL_OW 153
31086: GO 31119
31088: LD_INT 3
31090: DOUBLE
31091: EQUAL
31092: IFTRUE 31096
31094: GO 31118
31096: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31097: LD_VAR 0 1
31101: PPUSH
31102: LD_VAR 0 6
31106: PPUSH
31107: LD_VAR 0 7
31111: PPUSH
31112: CALL_OW 154
31116: GO 31119
31118: POP
// end ;
31119: LD_VAR 0 2
31123: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31124: LD_INT 0
31126: PPUSH
31127: PPUSH
31128: PPUSH
31129: PPUSH
31130: PPUSH
31131: PPUSH
// if not unit or not building then
31132: LD_VAR 0 1
31136: NOT
31137: PUSH
31138: LD_VAR 0 2
31142: NOT
31143: OR
31144: IFFALSE 31148
// exit ;
31146: GO 31306
// x := GetX ( building ) ;
31148: LD_ADDR_VAR 0 5
31152: PUSH
31153: LD_VAR 0 2
31157: PPUSH
31158: CALL_OW 250
31162: ST_TO_ADDR
// y := GetY ( building ) ;
31163: LD_ADDR_VAR 0 6
31167: PUSH
31168: LD_VAR 0 2
31172: PPUSH
31173: CALL_OW 251
31177: ST_TO_ADDR
// for i = 0 to 5 do
31178: LD_ADDR_VAR 0 4
31182: PUSH
31183: DOUBLE
31184: LD_INT 0
31186: DEC
31187: ST_TO_ADDR
31188: LD_INT 5
31190: PUSH
31191: FOR_TO
31192: IFFALSE 31304
// begin _x := ShiftX ( x , i , 3 ) ;
31194: LD_ADDR_VAR 0 7
31198: PUSH
31199: LD_VAR 0 5
31203: PPUSH
31204: LD_VAR 0 4
31208: PPUSH
31209: LD_INT 3
31211: PPUSH
31212: CALL_OW 272
31216: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31217: LD_ADDR_VAR 0 8
31221: PUSH
31222: LD_VAR 0 6
31226: PPUSH
31227: LD_VAR 0 4
31231: PPUSH
31232: LD_INT 3
31234: PPUSH
31235: CALL_OW 273
31239: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31240: LD_VAR 0 7
31244: PPUSH
31245: LD_VAR 0 8
31249: PPUSH
31250: CALL_OW 488
31254: NOT
31255: IFFALSE 31259
// continue ;
31257: GO 31191
// if HexInfo ( _x , _y ) = 0 then
31259: LD_VAR 0 7
31263: PPUSH
31264: LD_VAR 0 8
31268: PPUSH
31269: CALL_OW 428
31273: PUSH
31274: LD_INT 0
31276: EQUAL
31277: IFFALSE 31302
// begin ComMoveXY ( unit , _x , _y ) ;
31279: LD_VAR 0 1
31283: PPUSH
31284: LD_VAR 0 7
31288: PPUSH
31289: LD_VAR 0 8
31293: PPUSH
31294: CALL_OW 111
// exit ;
31298: POP
31299: POP
31300: GO 31306
// end ; end ;
31302: GO 31191
31304: POP
31305: POP
// end ;
31306: LD_VAR 0 3
31310: RET
// export function ScanBase ( side , base_area ) ; begin
31311: LD_INT 0
31313: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31314: LD_ADDR_VAR 0 3
31318: PUSH
31319: LD_VAR 0 2
31323: PPUSH
31324: LD_INT 81
31326: PUSH
31327: LD_VAR 0 1
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PPUSH
31336: CALL_OW 70
31340: ST_TO_ADDR
// end ;
31341: LD_VAR 0 3
31345: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31346: LD_INT 0
31348: PPUSH
31349: PPUSH
31350: PPUSH
31351: PPUSH
// result := false ;
31352: LD_ADDR_VAR 0 2
31356: PUSH
31357: LD_INT 0
31359: ST_TO_ADDR
// side := GetSide ( unit ) ;
31360: LD_ADDR_VAR 0 3
31364: PUSH
31365: LD_VAR 0 1
31369: PPUSH
31370: CALL_OW 255
31374: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31375: LD_ADDR_VAR 0 4
31379: PUSH
31380: LD_VAR 0 1
31384: PPUSH
31385: CALL_OW 248
31389: ST_TO_ADDR
// case nat of 1 :
31390: LD_VAR 0 4
31394: PUSH
31395: LD_INT 1
31397: DOUBLE
31398: EQUAL
31399: IFTRUE 31403
31401: GO 31414
31403: POP
// tech := tech_lassight ; 2 :
31404: LD_ADDR_VAR 0 5
31408: PUSH
31409: LD_INT 12
31411: ST_TO_ADDR
31412: GO 31453
31414: LD_INT 2
31416: DOUBLE
31417: EQUAL
31418: IFTRUE 31422
31420: GO 31433
31422: POP
// tech := tech_mortar ; 3 :
31423: LD_ADDR_VAR 0 5
31427: PUSH
31428: LD_INT 41
31430: ST_TO_ADDR
31431: GO 31453
31433: LD_INT 3
31435: DOUBLE
31436: EQUAL
31437: IFTRUE 31441
31439: GO 31452
31441: POP
// tech := tech_bazooka ; end ;
31442: LD_ADDR_VAR 0 5
31446: PUSH
31447: LD_INT 44
31449: ST_TO_ADDR
31450: GO 31453
31452: POP
// if Researched ( side , tech ) then
31453: LD_VAR 0 3
31457: PPUSH
31458: LD_VAR 0 5
31462: PPUSH
31463: CALL_OW 325
31467: IFFALSE 31494
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31469: LD_ADDR_VAR 0 2
31473: PUSH
31474: LD_INT 5
31476: PUSH
31477: LD_INT 8
31479: PUSH
31480: LD_INT 9
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: LIST
31487: PUSH
31488: LD_VAR 0 4
31492: ARRAY
31493: ST_TO_ADDR
// end ;
31494: LD_VAR 0 2
31498: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31499: LD_INT 0
31501: PPUSH
31502: PPUSH
31503: PPUSH
// if not mines then
31504: LD_VAR 0 2
31508: NOT
31509: IFFALSE 31513
// exit ;
31511: GO 31657
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31513: LD_ADDR_VAR 0 5
31517: PUSH
31518: LD_INT 81
31520: PUSH
31521: LD_VAR 0 1
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: LD_INT 3
31532: PUSH
31533: LD_INT 21
31535: PUSH
31536: LD_INT 3
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PPUSH
31551: CALL_OW 69
31555: ST_TO_ADDR
// for i in mines do
31556: LD_ADDR_VAR 0 4
31560: PUSH
31561: LD_VAR 0 2
31565: PUSH
31566: FOR_IN
31567: IFFALSE 31655
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31569: LD_VAR 0 4
31573: PUSH
31574: LD_INT 1
31576: ARRAY
31577: PPUSH
31578: LD_VAR 0 4
31582: PUSH
31583: LD_INT 2
31585: ARRAY
31586: PPUSH
31587: CALL_OW 458
31591: NOT
31592: IFFALSE 31596
// continue ;
31594: GO 31566
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31596: LD_VAR 0 4
31600: PUSH
31601: LD_INT 1
31603: ARRAY
31604: PPUSH
31605: LD_VAR 0 4
31609: PUSH
31610: LD_INT 2
31612: ARRAY
31613: PPUSH
31614: CALL_OW 428
31618: PUSH
31619: LD_VAR 0 5
31623: IN
31624: IFFALSE 31653
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31626: LD_VAR 0 4
31630: PUSH
31631: LD_INT 1
31633: ARRAY
31634: PPUSH
31635: LD_VAR 0 4
31639: PUSH
31640: LD_INT 2
31642: ARRAY
31643: PPUSH
31644: LD_VAR 0 1
31648: PPUSH
31649: CALL_OW 456
// end ;
31653: GO 31566
31655: POP
31656: POP
// end ;
31657: LD_VAR 0 3
31661: RET
// export function Count ( array ) ; begin
31662: LD_INT 0
31664: PPUSH
// result := array + 0 ;
31665: LD_ADDR_VAR 0 2
31669: PUSH
31670: LD_VAR 0 1
31674: PUSH
31675: LD_INT 0
31677: PLUS
31678: ST_TO_ADDR
// end ;
31679: LD_VAR 0 2
31683: RET
// export function IsEmpty ( building ) ; begin
31684: LD_INT 0
31686: PPUSH
// if not building then
31687: LD_VAR 0 1
31691: NOT
31692: IFFALSE 31696
// exit ;
31694: GO 31739
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31696: LD_ADDR_VAR 0 2
31700: PUSH
31701: LD_VAR 0 1
31705: PUSH
31706: LD_INT 22
31708: PUSH
31709: LD_VAR 0 1
31713: PPUSH
31714: CALL_OW 255
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 58
31725: PUSH
31726: EMPTY
31727: LIST
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: PPUSH
31733: CALL_OW 69
31737: IN
31738: ST_TO_ADDR
// end ;
31739: LD_VAR 0 2
31743: RET
// export function IsNotFull ( building ) ; var places ; begin
31744: LD_INT 0
31746: PPUSH
31747: PPUSH
// if not building then
31748: LD_VAR 0 1
31752: NOT
31753: IFFALSE 31757
// exit ;
31755: GO 31785
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
31757: LD_ADDR_VAR 0 2
31761: PUSH
31762: LD_VAR 0 1
31766: PPUSH
31767: LD_INT 3
31769: PUSH
31770: LD_INT 62
31772: PUSH
31773: EMPTY
31774: LIST
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PPUSH
31780: CALL_OW 72
31784: ST_TO_ADDR
// end ;
31785: LD_VAR 0 2
31789: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31790: LD_INT 0
31792: PPUSH
31793: PPUSH
31794: PPUSH
31795: PPUSH
// tmp := [ ] ;
31796: LD_ADDR_VAR 0 3
31800: PUSH
31801: EMPTY
31802: ST_TO_ADDR
// list := [ ] ;
31803: LD_ADDR_VAR 0 5
31807: PUSH
31808: EMPTY
31809: ST_TO_ADDR
// for i = 16 to 25 do
31810: LD_ADDR_VAR 0 4
31814: PUSH
31815: DOUBLE
31816: LD_INT 16
31818: DEC
31819: ST_TO_ADDR
31820: LD_INT 25
31822: PUSH
31823: FOR_TO
31824: IFFALSE 31897
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31826: LD_ADDR_VAR 0 3
31830: PUSH
31831: LD_VAR 0 3
31835: PUSH
31836: LD_INT 22
31838: PUSH
31839: LD_VAR 0 1
31843: PPUSH
31844: CALL_OW 255
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: LD_INT 91
31855: PUSH
31856: LD_VAR 0 1
31860: PUSH
31861: LD_INT 6
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 30
31871: PUSH
31872: LD_VAR 0 4
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: LIST
31885: PUSH
31886: EMPTY
31887: LIST
31888: PPUSH
31889: CALL_OW 69
31893: ADD
31894: ST_TO_ADDR
31895: GO 31823
31897: POP
31898: POP
// for i = 1 to tmp do
31899: LD_ADDR_VAR 0 4
31903: PUSH
31904: DOUBLE
31905: LD_INT 1
31907: DEC
31908: ST_TO_ADDR
31909: LD_VAR 0 3
31913: PUSH
31914: FOR_TO
31915: IFFALSE 32003
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31917: LD_ADDR_VAR 0 5
31921: PUSH
31922: LD_VAR 0 5
31926: PUSH
31927: LD_VAR 0 3
31931: PUSH
31932: LD_VAR 0 4
31936: ARRAY
31937: PPUSH
31938: CALL_OW 266
31942: PUSH
31943: LD_VAR 0 3
31947: PUSH
31948: LD_VAR 0 4
31952: ARRAY
31953: PPUSH
31954: CALL_OW 250
31958: PUSH
31959: LD_VAR 0 3
31963: PUSH
31964: LD_VAR 0 4
31968: ARRAY
31969: PPUSH
31970: CALL_OW 251
31974: PUSH
31975: LD_VAR 0 3
31979: PUSH
31980: LD_VAR 0 4
31984: ARRAY
31985: PPUSH
31986: CALL_OW 254
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: PUSH
31997: EMPTY
31998: LIST
31999: ADD
32000: ST_TO_ADDR
32001: GO 31914
32003: POP
32004: POP
// result := list ;
32005: LD_ADDR_VAR 0 2
32009: PUSH
32010: LD_VAR 0 5
32014: ST_TO_ADDR
// end ;
32015: LD_VAR 0 2
32019: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32020: LD_INT 0
32022: PPUSH
32023: PPUSH
32024: PPUSH
32025: PPUSH
32026: PPUSH
32027: PPUSH
32028: PPUSH
// if not factory then
32029: LD_VAR 0 1
32033: NOT
32034: IFFALSE 32038
// exit ;
32036: GO 32631
// if control = control_apeman then
32038: LD_VAR 0 4
32042: PUSH
32043: LD_INT 5
32045: EQUAL
32046: IFFALSE 32155
// begin tmp := UnitsInside ( factory ) ;
32048: LD_ADDR_VAR 0 8
32052: PUSH
32053: LD_VAR 0 1
32057: PPUSH
32058: CALL_OW 313
32062: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32063: LD_VAR 0 8
32067: PPUSH
32068: LD_INT 25
32070: PUSH
32071: LD_INT 12
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PPUSH
32078: CALL_OW 72
32082: NOT
32083: IFFALSE 32093
// control := control_manual ;
32085: LD_ADDR_VAR 0 4
32089: PUSH
32090: LD_INT 1
32092: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32093: LD_ADDR_VAR 0 8
32097: PUSH
32098: LD_VAR 0 1
32102: PPUSH
32103: CALL 31790 0 1
32107: ST_TO_ADDR
// if tmp then
32108: LD_VAR 0 8
32112: IFFALSE 32155
// begin for i in tmp do
32114: LD_ADDR_VAR 0 7
32118: PUSH
32119: LD_VAR 0 8
32123: PUSH
32124: FOR_IN
32125: IFFALSE 32153
// if i [ 1 ] = b_ext_radio then
32127: LD_VAR 0 7
32131: PUSH
32132: LD_INT 1
32134: ARRAY
32135: PUSH
32136: LD_INT 22
32138: EQUAL
32139: IFFALSE 32151
// begin control := control_remote ;
32141: LD_ADDR_VAR 0 4
32145: PUSH
32146: LD_INT 2
32148: ST_TO_ADDR
// break ;
32149: GO 32153
// end ;
32151: GO 32124
32153: POP
32154: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32155: LD_VAR 0 1
32159: PPUSH
32160: LD_VAR 0 2
32164: PPUSH
32165: LD_VAR 0 3
32169: PPUSH
32170: LD_VAR 0 4
32174: PPUSH
32175: LD_VAR 0 5
32179: PPUSH
32180: CALL_OW 448
32184: IFFALSE 32219
// begin result := [ chassis , engine , control , weapon ] ;
32186: LD_ADDR_VAR 0 6
32190: PUSH
32191: LD_VAR 0 2
32195: PUSH
32196: LD_VAR 0 3
32200: PUSH
32201: LD_VAR 0 4
32205: PUSH
32206: LD_VAR 0 5
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: ST_TO_ADDR
// exit ;
32217: GO 32631
// end ; _chassis := AvailableChassisList ( factory ) ;
32219: LD_ADDR_VAR 0 9
32223: PUSH
32224: LD_VAR 0 1
32228: PPUSH
32229: CALL_OW 475
32233: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32234: LD_ADDR_VAR 0 11
32238: PUSH
32239: LD_VAR 0 1
32243: PPUSH
32244: CALL_OW 476
32248: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32249: LD_ADDR_VAR 0 12
32253: PUSH
32254: LD_VAR 0 1
32258: PPUSH
32259: CALL_OW 477
32263: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32264: LD_ADDR_VAR 0 10
32268: PUSH
32269: LD_VAR 0 1
32273: PPUSH
32274: CALL_OW 478
32278: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32279: LD_VAR 0 9
32283: NOT
32284: PUSH
32285: LD_VAR 0 11
32289: NOT
32290: OR
32291: PUSH
32292: LD_VAR 0 12
32296: NOT
32297: OR
32298: PUSH
32299: LD_VAR 0 10
32303: NOT
32304: OR
32305: IFFALSE 32340
// begin result := [ chassis , engine , control , weapon ] ;
32307: LD_ADDR_VAR 0 6
32311: PUSH
32312: LD_VAR 0 2
32316: PUSH
32317: LD_VAR 0 3
32321: PUSH
32322: LD_VAR 0 4
32326: PUSH
32327: LD_VAR 0 5
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: ST_TO_ADDR
// exit ;
32338: GO 32631
// end ; if not chassis in _chassis then
32340: LD_VAR 0 2
32344: PUSH
32345: LD_VAR 0 9
32349: IN
32350: NOT
32351: IFFALSE 32377
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32353: LD_ADDR_VAR 0 2
32357: PUSH
32358: LD_VAR 0 9
32362: PUSH
32363: LD_INT 1
32365: PPUSH
32366: LD_VAR 0 9
32370: PPUSH
32371: CALL_OW 12
32375: ARRAY
32376: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32377: LD_VAR 0 2
32381: PPUSH
32382: LD_VAR 0 3
32386: PPUSH
32387: CALL 32636 0 2
32391: NOT
32392: IFFALSE 32451
// repeat engine := _engine [ 1 ] ;
32394: LD_ADDR_VAR 0 3
32398: PUSH
32399: LD_VAR 0 11
32403: PUSH
32404: LD_INT 1
32406: ARRAY
32407: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32408: LD_ADDR_VAR 0 11
32412: PUSH
32413: LD_VAR 0 11
32417: PPUSH
32418: LD_INT 1
32420: PPUSH
32421: CALL_OW 3
32425: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32426: LD_VAR 0 2
32430: PPUSH
32431: LD_VAR 0 3
32435: PPUSH
32436: CALL 32636 0 2
32440: PUSH
32441: LD_VAR 0 11
32445: PUSH
32446: EMPTY
32447: EQUAL
32448: OR
32449: IFFALSE 32394
// if not control in _control then
32451: LD_VAR 0 4
32455: PUSH
32456: LD_VAR 0 12
32460: IN
32461: NOT
32462: IFFALSE 32488
// control := _control [ rand ( 1 , _control ) ] ;
32464: LD_ADDR_VAR 0 4
32468: PUSH
32469: LD_VAR 0 12
32473: PUSH
32474: LD_INT 1
32476: PPUSH
32477: LD_VAR 0 12
32481: PPUSH
32482: CALL_OW 12
32486: ARRAY
32487: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32488: LD_VAR 0 2
32492: PPUSH
32493: LD_VAR 0 5
32497: PPUSH
32498: CALL 32856 0 2
32502: NOT
32503: IFFALSE 32562
// repeat weapon := _weapon [ 1 ] ;
32505: LD_ADDR_VAR 0 5
32509: PUSH
32510: LD_VAR 0 10
32514: PUSH
32515: LD_INT 1
32517: ARRAY
32518: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32519: LD_ADDR_VAR 0 10
32523: PUSH
32524: LD_VAR 0 10
32528: PPUSH
32529: LD_INT 1
32531: PPUSH
32532: CALL_OW 3
32536: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32537: LD_VAR 0 2
32541: PPUSH
32542: LD_VAR 0 5
32546: PPUSH
32547: CALL 32856 0 2
32551: PUSH
32552: LD_VAR 0 10
32556: PUSH
32557: EMPTY
32558: EQUAL
32559: OR
32560: IFFALSE 32505
// result := [ ] ;
32562: LD_ADDR_VAR 0 6
32566: PUSH
32567: EMPTY
32568: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32569: LD_VAR 0 1
32573: PPUSH
32574: LD_VAR 0 2
32578: PPUSH
32579: LD_VAR 0 3
32583: PPUSH
32584: LD_VAR 0 4
32588: PPUSH
32589: LD_VAR 0 5
32593: PPUSH
32594: CALL_OW 448
32598: IFFALSE 32631
// result := [ chassis , engine , control , weapon ] ;
32600: LD_ADDR_VAR 0 6
32604: PUSH
32605: LD_VAR 0 2
32609: PUSH
32610: LD_VAR 0 3
32614: PUSH
32615: LD_VAR 0 4
32619: PUSH
32620: LD_VAR 0 5
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: ST_TO_ADDR
// end ;
32631: LD_VAR 0 6
32635: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32636: LD_INT 0
32638: PPUSH
// if not chassis or not engine then
32639: LD_VAR 0 1
32643: NOT
32644: PUSH
32645: LD_VAR 0 2
32649: NOT
32650: OR
32651: IFFALSE 32655
// exit ;
32653: GO 32851
// case engine of engine_solar :
32655: LD_VAR 0 2
32659: PUSH
32660: LD_INT 2
32662: DOUBLE
32663: EQUAL
32664: IFTRUE 32668
32666: GO 32706
32668: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32669: LD_ADDR_VAR 0 3
32673: PUSH
32674: LD_INT 11
32676: PUSH
32677: LD_INT 12
32679: PUSH
32680: LD_INT 13
32682: PUSH
32683: LD_INT 14
32685: PUSH
32686: LD_INT 1
32688: PUSH
32689: LD_INT 2
32691: PUSH
32692: LD_INT 3
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: ST_TO_ADDR
32704: GO 32835
32706: LD_INT 1
32708: DOUBLE
32709: EQUAL
32710: IFTRUE 32714
32712: GO 32776
32714: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32715: LD_ADDR_VAR 0 3
32719: PUSH
32720: LD_INT 11
32722: PUSH
32723: LD_INT 12
32725: PUSH
32726: LD_INT 13
32728: PUSH
32729: LD_INT 14
32731: PUSH
32732: LD_INT 1
32734: PUSH
32735: LD_INT 2
32737: PUSH
32738: LD_INT 3
32740: PUSH
32741: LD_INT 4
32743: PUSH
32744: LD_INT 5
32746: PUSH
32747: LD_INT 21
32749: PUSH
32750: LD_INT 23
32752: PUSH
32753: LD_INT 22
32755: PUSH
32756: LD_INT 24
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: LIST
32765: LIST
32766: LIST
32767: LIST
32768: LIST
32769: LIST
32770: LIST
32771: LIST
32772: LIST
32773: ST_TO_ADDR
32774: GO 32835
32776: LD_INT 3
32778: DOUBLE
32779: EQUAL
32780: IFTRUE 32784
32782: GO 32834
32784: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32785: LD_ADDR_VAR 0 3
32789: PUSH
32790: LD_INT 13
32792: PUSH
32793: LD_INT 14
32795: PUSH
32796: LD_INT 2
32798: PUSH
32799: LD_INT 3
32801: PUSH
32802: LD_INT 4
32804: PUSH
32805: LD_INT 5
32807: PUSH
32808: LD_INT 21
32810: PUSH
32811: LD_INT 22
32813: PUSH
32814: LD_INT 23
32816: PUSH
32817: LD_INT 24
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: ST_TO_ADDR
32832: GO 32835
32834: POP
// result := ( chassis in result ) ;
32835: LD_ADDR_VAR 0 3
32839: PUSH
32840: LD_VAR 0 1
32844: PUSH
32845: LD_VAR 0 3
32849: IN
32850: ST_TO_ADDR
// end ;
32851: LD_VAR 0 3
32855: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32856: LD_INT 0
32858: PPUSH
// if not chassis or not weapon then
32859: LD_VAR 0 1
32863: NOT
32864: PUSH
32865: LD_VAR 0 2
32869: NOT
32870: OR
32871: IFFALSE 32875
// exit ;
32873: GO 33935
// case weapon of us_machine_gun :
32875: LD_VAR 0 2
32879: PUSH
32880: LD_INT 2
32882: DOUBLE
32883: EQUAL
32884: IFTRUE 32888
32886: GO 32918
32888: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32889: LD_ADDR_VAR 0 3
32893: PUSH
32894: LD_INT 1
32896: PUSH
32897: LD_INT 2
32899: PUSH
32900: LD_INT 3
32902: PUSH
32903: LD_INT 4
32905: PUSH
32906: LD_INT 5
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: ST_TO_ADDR
32916: GO 33919
32918: LD_INT 3
32920: DOUBLE
32921: EQUAL
32922: IFTRUE 32926
32924: GO 32956
32926: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32927: LD_ADDR_VAR 0 3
32931: PUSH
32932: LD_INT 1
32934: PUSH
32935: LD_INT 2
32937: PUSH
32938: LD_INT 3
32940: PUSH
32941: LD_INT 4
32943: PUSH
32944: LD_INT 5
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: ST_TO_ADDR
32954: GO 33919
32956: LD_INT 11
32958: DOUBLE
32959: EQUAL
32960: IFTRUE 32964
32962: GO 32994
32964: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32965: LD_ADDR_VAR 0 3
32969: PUSH
32970: LD_INT 1
32972: PUSH
32973: LD_INT 2
32975: PUSH
32976: LD_INT 3
32978: PUSH
32979: LD_INT 4
32981: PUSH
32982: LD_INT 5
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: ST_TO_ADDR
32992: GO 33919
32994: LD_INT 4
32996: DOUBLE
32997: EQUAL
32998: IFTRUE 33002
33000: GO 33028
33002: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33003: LD_ADDR_VAR 0 3
33007: PUSH
33008: LD_INT 2
33010: PUSH
33011: LD_INT 3
33013: PUSH
33014: LD_INT 4
33016: PUSH
33017: LD_INT 5
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: LIST
33024: LIST
33025: ST_TO_ADDR
33026: GO 33919
33028: LD_INT 5
33030: DOUBLE
33031: EQUAL
33032: IFTRUE 33036
33034: GO 33062
33036: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33037: LD_ADDR_VAR 0 3
33041: PUSH
33042: LD_INT 2
33044: PUSH
33045: LD_INT 3
33047: PUSH
33048: LD_INT 4
33050: PUSH
33051: LD_INT 5
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: ST_TO_ADDR
33060: GO 33919
33062: LD_INT 9
33064: DOUBLE
33065: EQUAL
33066: IFTRUE 33070
33068: GO 33096
33070: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33071: LD_ADDR_VAR 0 3
33075: PUSH
33076: LD_INT 2
33078: PUSH
33079: LD_INT 3
33081: PUSH
33082: LD_INT 4
33084: PUSH
33085: LD_INT 5
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: ST_TO_ADDR
33094: GO 33919
33096: LD_INT 7
33098: DOUBLE
33099: EQUAL
33100: IFTRUE 33104
33102: GO 33130
33104: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33105: LD_ADDR_VAR 0 3
33109: PUSH
33110: LD_INT 2
33112: PUSH
33113: LD_INT 3
33115: PUSH
33116: LD_INT 4
33118: PUSH
33119: LD_INT 5
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: ST_TO_ADDR
33128: GO 33919
33130: LD_INT 12
33132: DOUBLE
33133: EQUAL
33134: IFTRUE 33138
33136: GO 33164
33138: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33139: LD_ADDR_VAR 0 3
33143: PUSH
33144: LD_INT 2
33146: PUSH
33147: LD_INT 3
33149: PUSH
33150: LD_INT 4
33152: PUSH
33153: LD_INT 5
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: ST_TO_ADDR
33162: GO 33919
33164: LD_INT 13
33166: DOUBLE
33167: EQUAL
33168: IFTRUE 33172
33170: GO 33198
33172: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33173: LD_ADDR_VAR 0 3
33177: PUSH
33178: LD_INT 2
33180: PUSH
33181: LD_INT 3
33183: PUSH
33184: LD_INT 4
33186: PUSH
33187: LD_INT 5
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: ST_TO_ADDR
33196: GO 33919
33198: LD_INT 14
33200: DOUBLE
33201: EQUAL
33202: IFTRUE 33206
33204: GO 33224
33206: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33207: LD_ADDR_VAR 0 3
33211: PUSH
33212: LD_INT 4
33214: PUSH
33215: LD_INT 5
33217: PUSH
33218: EMPTY
33219: LIST
33220: LIST
33221: ST_TO_ADDR
33222: GO 33919
33224: LD_INT 6
33226: DOUBLE
33227: EQUAL
33228: IFTRUE 33232
33230: GO 33250
33232: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33233: LD_ADDR_VAR 0 3
33237: PUSH
33238: LD_INT 4
33240: PUSH
33241: LD_INT 5
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: ST_TO_ADDR
33248: GO 33919
33250: LD_INT 10
33252: DOUBLE
33253: EQUAL
33254: IFTRUE 33258
33256: GO 33276
33258: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33259: LD_ADDR_VAR 0 3
33263: PUSH
33264: LD_INT 4
33266: PUSH
33267: LD_INT 5
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: ST_TO_ADDR
33274: GO 33919
33276: LD_INT 22
33278: DOUBLE
33279: EQUAL
33280: IFTRUE 33284
33282: GO 33310
33284: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33285: LD_ADDR_VAR 0 3
33289: PUSH
33290: LD_INT 11
33292: PUSH
33293: LD_INT 12
33295: PUSH
33296: LD_INT 13
33298: PUSH
33299: LD_INT 14
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: ST_TO_ADDR
33308: GO 33919
33310: LD_INT 23
33312: DOUBLE
33313: EQUAL
33314: IFTRUE 33318
33316: GO 33344
33318: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33319: LD_ADDR_VAR 0 3
33323: PUSH
33324: LD_INT 11
33326: PUSH
33327: LD_INT 12
33329: PUSH
33330: LD_INT 13
33332: PUSH
33333: LD_INT 14
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: ST_TO_ADDR
33342: GO 33919
33344: LD_INT 24
33346: DOUBLE
33347: EQUAL
33348: IFTRUE 33352
33350: GO 33378
33352: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33353: LD_ADDR_VAR 0 3
33357: PUSH
33358: LD_INT 11
33360: PUSH
33361: LD_INT 12
33363: PUSH
33364: LD_INT 13
33366: PUSH
33367: LD_INT 14
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: ST_TO_ADDR
33376: GO 33919
33378: LD_INT 30
33380: DOUBLE
33381: EQUAL
33382: IFTRUE 33386
33384: GO 33412
33386: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33387: LD_ADDR_VAR 0 3
33391: PUSH
33392: LD_INT 11
33394: PUSH
33395: LD_INT 12
33397: PUSH
33398: LD_INT 13
33400: PUSH
33401: LD_INT 14
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: ST_TO_ADDR
33410: GO 33919
33412: LD_INT 25
33414: DOUBLE
33415: EQUAL
33416: IFTRUE 33420
33418: GO 33438
33420: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33421: LD_ADDR_VAR 0 3
33425: PUSH
33426: LD_INT 13
33428: PUSH
33429: LD_INT 14
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: ST_TO_ADDR
33436: GO 33919
33438: LD_INT 27
33440: DOUBLE
33441: EQUAL
33442: IFTRUE 33446
33444: GO 33464
33446: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33447: LD_ADDR_VAR 0 3
33451: PUSH
33452: LD_INT 13
33454: PUSH
33455: LD_INT 14
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: ST_TO_ADDR
33462: GO 33919
33464: LD_INT 92
33466: DOUBLE
33467: EQUAL
33468: IFTRUE 33472
33470: GO 33498
33472: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33473: LD_ADDR_VAR 0 3
33477: PUSH
33478: LD_INT 11
33480: PUSH
33481: LD_INT 12
33483: PUSH
33484: LD_INT 13
33486: PUSH
33487: LD_INT 14
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: ST_TO_ADDR
33496: GO 33919
33498: LD_INT 28
33500: DOUBLE
33501: EQUAL
33502: IFTRUE 33506
33504: GO 33524
33506: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33507: LD_ADDR_VAR 0 3
33511: PUSH
33512: LD_INT 13
33514: PUSH
33515: LD_INT 14
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: ST_TO_ADDR
33522: GO 33919
33524: LD_INT 29
33526: DOUBLE
33527: EQUAL
33528: IFTRUE 33532
33530: GO 33550
33532: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33533: LD_ADDR_VAR 0 3
33537: PUSH
33538: LD_INT 13
33540: PUSH
33541: LD_INT 14
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: ST_TO_ADDR
33548: GO 33919
33550: LD_INT 31
33552: DOUBLE
33553: EQUAL
33554: IFTRUE 33558
33556: GO 33576
33558: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33559: LD_ADDR_VAR 0 3
33563: PUSH
33564: LD_INT 13
33566: PUSH
33567: LD_INT 14
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: ST_TO_ADDR
33574: GO 33919
33576: LD_INT 26
33578: DOUBLE
33579: EQUAL
33580: IFTRUE 33584
33582: GO 33602
33584: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33585: LD_ADDR_VAR 0 3
33589: PUSH
33590: LD_INT 13
33592: PUSH
33593: LD_INT 14
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: ST_TO_ADDR
33600: GO 33919
33602: LD_INT 42
33604: DOUBLE
33605: EQUAL
33606: IFTRUE 33610
33608: GO 33636
33610: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33611: LD_ADDR_VAR 0 3
33615: PUSH
33616: LD_INT 21
33618: PUSH
33619: LD_INT 22
33621: PUSH
33622: LD_INT 23
33624: PUSH
33625: LD_INT 24
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: ST_TO_ADDR
33634: GO 33919
33636: LD_INT 43
33638: DOUBLE
33639: EQUAL
33640: IFTRUE 33644
33642: GO 33670
33644: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33645: LD_ADDR_VAR 0 3
33649: PUSH
33650: LD_INT 21
33652: PUSH
33653: LD_INT 22
33655: PUSH
33656: LD_INT 23
33658: PUSH
33659: LD_INT 24
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: ST_TO_ADDR
33668: GO 33919
33670: LD_INT 44
33672: DOUBLE
33673: EQUAL
33674: IFTRUE 33678
33676: GO 33704
33678: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33679: LD_ADDR_VAR 0 3
33683: PUSH
33684: LD_INT 21
33686: PUSH
33687: LD_INT 22
33689: PUSH
33690: LD_INT 23
33692: PUSH
33693: LD_INT 24
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: ST_TO_ADDR
33702: GO 33919
33704: LD_INT 45
33706: DOUBLE
33707: EQUAL
33708: IFTRUE 33712
33710: GO 33738
33712: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33713: LD_ADDR_VAR 0 3
33717: PUSH
33718: LD_INT 21
33720: PUSH
33721: LD_INT 22
33723: PUSH
33724: LD_INT 23
33726: PUSH
33727: LD_INT 24
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: ST_TO_ADDR
33736: GO 33919
33738: LD_INT 49
33740: DOUBLE
33741: EQUAL
33742: IFTRUE 33746
33744: GO 33772
33746: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33747: LD_ADDR_VAR 0 3
33751: PUSH
33752: LD_INT 21
33754: PUSH
33755: LD_INT 22
33757: PUSH
33758: LD_INT 23
33760: PUSH
33761: LD_INT 24
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: ST_TO_ADDR
33770: GO 33919
33772: LD_INT 51
33774: DOUBLE
33775: EQUAL
33776: IFTRUE 33780
33778: GO 33806
33780: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33781: LD_ADDR_VAR 0 3
33785: PUSH
33786: LD_INT 21
33788: PUSH
33789: LD_INT 22
33791: PUSH
33792: LD_INT 23
33794: PUSH
33795: LD_INT 24
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: ST_TO_ADDR
33804: GO 33919
33806: LD_INT 52
33808: DOUBLE
33809: EQUAL
33810: IFTRUE 33814
33812: GO 33840
33814: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33815: LD_ADDR_VAR 0 3
33819: PUSH
33820: LD_INT 21
33822: PUSH
33823: LD_INT 22
33825: PUSH
33826: LD_INT 23
33828: PUSH
33829: LD_INT 24
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: ST_TO_ADDR
33838: GO 33919
33840: LD_INT 53
33842: DOUBLE
33843: EQUAL
33844: IFTRUE 33848
33846: GO 33866
33848: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33849: LD_ADDR_VAR 0 3
33853: PUSH
33854: LD_INT 23
33856: PUSH
33857: LD_INT 24
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: ST_TO_ADDR
33864: GO 33919
33866: LD_INT 46
33868: DOUBLE
33869: EQUAL
33870: IFTRUE 33874
33872: GO 33892
33874: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33875: LD_ADDR_VAR 0 3
33879: PUSH
33880: LD_INT 23
33882: PUSH
33883: LD_INT 24
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: ST_TO_ADDR
33890: GO 33919
33892: LD_INT 47
33894: DOUBLE
33895: EQUAL
33896: IFTRUE 33900
33898: GO 33918
33900: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33901: LD_ADDR_VAR 0 3
33905: PUSH
33906: LD_INT 23
33908: PUSH
33909: LD_INT 24
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: ST_TO_ADDR
33916: GO 33919
33918: POP
// result := ( chassis in result ) ;
33919: LD_ADDR_VAR 0 3
33923: PUSH
33924: LD_VAR 0 1
33928: PUSH
33929: LD_VAR 0 3
33933: IN
33934: ST_TO_ADDR
// end ;
33935: LD_VAR 0 3
33939: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33940: LD_INT 0
33942: PPUSH
33943: PPUSH
33944: PPUSH
33945: PPUSH
33946: PPUSH
33947: PPUSH
33948: PPUSH
// result := array ;
33949: LD_ADDR_VAR 0 5
33953: PUSH
33954: LD_VAR 0 1
33958: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33959: LD_VAR 0 1
33963: NOT
33964: PUSH
33965: LD_VAR 0 2
33969: NOT
33970: OR
33971: PUSH
33972: LD_VAR 0 3
33976: NOT
33977: OR
33978: PUSH
33979: LD_VAR 0 2
33983: PUSH
33984: LD_VAR 0 1
33988: GREATER
33989: OR
33990: PUSH
33991: LD_VAR 0 3
33995: PUSH
33996: LD_VAR 0 1
34000: GREATER
34001: OR
34002: IFFALSE 34006
// exit ;
34004: GO 34302
// if direction then
34006: LD_VAR 0 4
34010: IFFALSE 34074
// begin d := 1 ;
34012: LD_ADDR_VAR 0 9
34016: PUSH
34017: LD_INT 1
34019: ST_TO_ADDR
// if i_from > i_to then
34020: LD_VAR 0 2
34024: PUSH
34025: LD_VAR 0 3
34029: GREATER
34030: IFFALSE 34056
// length := ( array - i_from ) + i_to else
34032: LD_ADDR_VAR 0 11
34036: PUSH
34037: LD_VAR 0 1
34041: PUSH
34042: LD_VAR 0 2
34046: MINUS
34047: PUSH
34048: LD_VAR 0 3
34052: PLUS
34053: ST_TO_ADDR
34054: GO 34072
// length := i_to - i_from ;
34056: LD_ADDR_VAR 0 11
34060: PUSH
34061: LD_VAR 0 3
34065: PUSH
34066: LD_VAR 0 2
34070: MINUS
34071: ST_TO_ADDR
// end else
34072: GO 34135
// begin d := - 1 ;
34074: LD_ADDR_VAR 0 9
34078: PUSH
34079: LD_INT 1
34081: NEG
34082: ST_TO_ADDR
// if i_from > i_to then
34083: LD_VAR 0 2
34087: PUSH
34088: LD_VAR 0 3
34092: GREATER
34093: IFFALSE 34113
// length := i_from - i_to else
34095: LD_ADDR_VAR 0 11
34099: PUSH
34100: LD_VAR 0 2
34104: PUSH
34105: LD_VAR 0 3
34109: MINUS
34110: ST_TO_ADDR
34111: GO 34135
// length := ( array - i_to ) + i_from ;
34113: LD_ADDR_VAR 0 11
34117: PUSH
34118: LD_VAR 0 1
34122: PUSH
34123: LD_VAR 0 3
34127: MINUS
34128: PUSH
34129: LD_VAR 0 2
34133: PLUS
34134: ST_TO_ADDR
// end ; if not length then
34135: LD_VAR 0 11
34139: NOT
34140: IFFALSE 34144
// exit ;
34142: GO 34302
// tmp := array ;
34144: LD_ADDR_VAR 0 10
34148: PUSH
34149: LD_VAR 0 1
34153: ST_TO_ADDR
// for i = 1 to length do
34154: LD_ADDR_VAR 0 6
34158: PUSH
34159: DOUBLE
34160: LD_INT 1
34162: DEC
34163: ST_TO_ADDR
34164: LD_VAR 0 11
34168: PUSH
34169: FOR_TO
34170: IFFALSE 34290
// begin for j = 1 to array do
34172: LD_ADDR_VAR 0 7
34176: PUSH
34177: DOUBLE
34178: LD_INT 1
34180: DEC
34181: ST_TO_ADDR
34182: LD_VAR 0 1
34186: PUSH
34187: FOR_TO
34188: IFFALSE 34276
// begin k := j + d ;
34190: LD_ADDR_VAR 0 8
34194: PUSH
34195: LD_VAR 0 7
34199: PUSH
34200: LD_VAR 0 9
34204: PLUS
34205: ST_TO_ADDR
// if k > array then
34206: LD_VAR 0 8
34210: PUSH
34211: LD_VAR 0 1
34215: GREATER
34216: IFFALSE 34226
// k := 1 ;
34218: LD_ADDR_VAR 0 8
34222: PUSH
34223: LD_INT 1
34225: ST_TO_ADDR
// if not k then
34226: LD_VAR 0 8
34230: NOT
34231: IFFALSE 34243
// k := array ;
34233: LD_ADDR_VAR 0 8
34237: PUSH
34238: LD_VAR 0 1
34242: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34243: LD_ADDR_VAR 0 10
34247: PUSH
34248: LD_VAR 0 10
34252: PPUSH
34253: LD_VAR 0 8
34257: PPUSH
34258: LD_VAR 0 1
34262: PUSH
34263: LD_VAR 0 7
34267: ARRAY
34268: PPUSH
34269: CALL_OW 1
34273: ST_TO_ADDR
// end ;
34274: GO 34187
34276: POP
34277: POP
// array := tmp ;
34278: LD_ADDR_VAR 0 1
34282: PUSH
34283: LD_VAR 0 10
34287: ST_TO_ADDR
// end ;
34288: GO 34169
34290: POP
34291: POP
// result := array ;
34292: LD_ADDR_VAR 0 5
34296: PUSH
34297: LD_VAR 0 1
34301: ST_TO_ADDR
// end ;
34302: LD_VAR 0 5
34306: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34307: LD_INT 0
34309: PPUSH
34310: PPUSH
// result := 0 ;
34311: LD_ADDR_VAR 0 3
34315: PUSH
34316: LD_INT 0
34318: ST_TO_ADDR
// if not array or not value in array then
34319: LD_VAR 0 1
34323: NOT
34324: PUSH
34325: LD_VAR 0 2
34329: PUSH
34330: LD_VAR 0 1
34334: IN
34335: NOT
34336: OR
34337: IFFALSE 34341
// exit ;
34339: GO 34395
// for i = 1 to array do
34341: LD_ADDR_VAR 0 4
34345: PUSH
34346: DOUBLE
34347: LD_INT 1
34349: DEC
34350: ST_TO_ADDR
34351: LD_VAR 0 1
34355: PUSH
34356: FOR_TO
34357: IFFALSE 34393
// if value = array [ i ] then
34359: LD_VAR 0 2
34363: PUSH
34364: LD_VAR 0 1
34368: PUSH
34369: LD_VAR 0 4
34373: ARRAY
34374: EQUAL
34375: IFFALSE 34391
// begin result := i ;
34377: LD_ADDR_VAR 0 3
34381: PUSH
34382: LD_VAR 0 4
34386: ST_TO_ADDR
// exit ;
34387: POP
34388: POP
34389: GO 34395
// end ;
34391: GO 34356
34393: POP
34394: POP
// end ;
34395: LD_VAR 0 3
34399: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34400: LD_INT 0
34402: PPUSH
// vc_chassis := chassis ;
34403: LD_ADDR_OWVAR 37
34407: PUSH
34408: LD_VAR 0 1
34412: ST_TO_ADDR
// vc_engine := engine ;
34413: LD_ADDR_OWVAR 39
34417: PUSH
34418: LD_VAR 0 2
34422: ST_TO_ADDR
// vc_control := control ;
34423: LD_ADDR_OWVAR 38
34427: PUSH
34428: LD_VAR 0 3
34432: ST_TO_ADDR
// vc_weapon := weapon ;
34433: LD_ADDR_OWVAR 40
34437: PUSH
34438: LD_VAR 0 4
34442: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34443: LD_ADDR_OWVAR 41
34447: PUSH
34448: LD_VAR 0 5
34452: ST_TO_ADDR
// end ;
34453: LD_VAR 0 6
34457: RET
// export function WantPlant ( unit ) ; var task ; begin
34458: LD_INT 0
34460: PPUSH
34461: PPUSH
// result := false ;
34462: LD_ADDR_VAR 0 2
34466: PUSH
34467: LD_INT 0
34469: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34470: LD_ADDR_VAR 0 3
34474: PUSH
34475: LD_VAR 0 1
34479: PPUSH
34480: CALL_OW 437
34484: ST_TO_ADDR
// if task then
34485: LD_VAR 0 3
34489: IFFALSE 34517
// if task [ 1 ] [ 1 ] = p then
34491: LD_VAR 0 3
34495: PUSH
34496: LD_INT 1
34498: ARRAY
34499: PUSH
34500: LD_INT 1
34502: ARRAY
34503: PUSH
34504: LD_STRING p
34506: EQUAL
34507: IFFALSE 34517
// result := true ;
34509: LD_ADDR_VAR 0 2
34513: PUSH
34514: LD_INT 1
34516: ST_TO_ADDR
// end ;
34517: LD_VAR 0 2
34521: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34522: LD_INT 0
34524: PPUSH
34525: PPUSH
34526: PPUSH
34527: PPUSH
// if pos < 1 then
34528: LD_VAR 0 2
34532: PUSH
34533: LD_INT 1
34535: LESS
34536: IFFALSE 34540
// exit ;
34538: GO 34843
// if pos = 1 then
34540: LD_VAR 0 2
34544: PUSH
34545: LD_INT 1
34547: EQUAL
34548: IFFALSE 34581
// result := Replace ( arr , pos [ 1 ] , value ) else
34550: LD_ADDR_VAR 0 4
34554: PUSH
34555: LD_VAR 0 1
34559: PPUSH
34560: LD_VAR 0 2
34564: PUSH
34565: LD_INT 1
34567: ARRAY
34568: PPUSH
34569: LD_VAR 0 3
34573: PPUSH
34574: CALL_OW 1
34578: ST_TO_ADDR
34579: GO 34843
// begin tmp := arr ;
34581: LD_ADDR_VAR 0 6
34585: PUSH
34586: LD_VAR 0 1
34590: ST_TO_ADDR
// s_arr := [ tmp ] ;
34591: LD_ADDR_VAR 0 7
34595: PUSH
34596: LD_VAR 0 6
34600: PUSH
34601: EMPTY
34602: LIST
34603: ST_TO_ADDR
// for i = 1 to pos - 1 do
34604: LD_ADDR_VAR 0 5
34608: PUSH
34609: DOUBLE
34610: LD_INT 1
34612: DEC
34613: ST_TO_ADDR
34614: LD_VAR 0 2
34618: PUSH
34619: LD_INT 1
34621: MINUS
34622: PUSH
34623: FOR_TO
34624: IFFALSE 34669
// begin tmp := tmp [ pos [ i ] ] ;
34626: LD_ADDR_VAR 0 6
34630: PUSH
34631: LD_VAR 0 6
34635: PUSH
34636: LD_VAR 0 2
34640: PUSH
34641: LD_VAR 0 5
34645: ARRAY
34646: ARRAY
34647: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34648: LD_ADDR_VAR 0 7
34652: PUSH
34653: LD_VAR 0 7
34657: PUSH
34658: LD_VAR 0 6
34662: PUSH
34663: EMPTY
34664: LIST
34665: ADD
34666: ST_TO_ADDR
// end ;
34667: GO 34623
34669: POP
34670: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34671: LD_ADDR_VAR 0 6
34675: PUSH
34676: LD_VAR 0 6
34680: PPUSH
34681: LD_VAR 0 2
34685: PUSH
34686: LD_VAR 0 2
34690: ARRAY
34691: PPUSH
34692: LD_VAR 0 3
34696: PPUSH
34697: CALL_OW 1
34701: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34702: LD_ADDR_VAR 0 7
34706: PUSH
34707: LD_VAR 0 7
34711: PPUSH
34712: LD_VAR 0 7
34716: PPUSH
34717: LD_VAR 0 6
34721: PPUSH
34722: CALL_OW 1
34726: ST_TO_ADDR
// for i = s_arr downto 2 do
34727: LD_ADDR_VAR 0 5
34731: PUSH
34732: DOUBLE
34733: LD_VAR 0 7
34737: INC
34738: ST_TO_ADDR
34739: LD_INT 2
34741: PUSH
34742: FOR_DOWNTO
34743: IFFALSE 34827
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34745: LD_ADDR_VAR 0 6
34749: PUSH
34750: LD_VAR 0 7
34754: PUSH
34755: LD_VAR 0 5
34759: PUSH
34760: LD_INT 1
34762: MINUS
34763: ARRAY
34764: PPUSH
34765: LD_VAR 0 2
34769: PUSH
34770: LD_VAR 0 5
34774: PUSH
34775: LD_INT 1
34777: MINUS
34778: ARRAY
34779: PPUSH
34780: LD_VAR 0 7
34784: PUSH
34785: LD_VAR 0 5
34789: ARRAY
34790: PPUSH
34791: CALL_OW 1
34795: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34796: LD_ADDR_VAR 0 7
34800: PUSH
34801: LD_VAR 0 7
34805: PPUSH
34806: LD_VAR 0 5
34810: PUSH
34811: LD_INT 1
34813: MINUS
34814: PPUSH
34815: LD_VAR 0 6
34819: PPUSH
34820: CALL_OW 1
34824: ST_TO_ADDR
// end ;
34825: GO 34742
34827: POP
34828: POP
// result := s_arr [ 1 ] ;
34829: LD_ADDR_VAR 0 4
34833: PUSH
34834: LD_VAR 0 7
34838: PUSH
34839: LD_INT 1
34841: ARRAY
34842: ST_TO_ADDR
// end ; end ;
34843: LD_VAR 0 4
34847: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34848: LD_INT 0
34850: PPUSH
34851: PPUSH
// if not list then
34852: LD_VAR 0 1
34856: NOT
34857: IFFALSE 34861
// exit ;
34859: GO 34952
// i := list [ pos1 ] ;
34861: LD_ADDR_VAR 0 5
34865: PUSH
34866: LD_VAR 0 1
34870: PUSH
34871: LD_VAR 0 2
34875: ARRAY
34876: ST_TO_ADDR
// if not i then
34877: LD_VAR 0 5
34881: NOT
34882: IFFALSE 34886
// exit ;
34884: GO 34952
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34886: LD_ADDR_VAR 0 1
34890: PUSH
34891: LD_VAR 0 1
34895: PPUSH
34896: LD_VAR 0 2
34900: PPUSH
34901: LD_VAR 0 1
34905: PUSH
34906: LD_VAR 0 3
34910: ARRAY
34911: PPUSH
34912: CALL_OW 1
34916: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34917: LD_ADDR_VAR 0 1
34921: PUSH
34922: LD_VAR 0 1
34926: PPUSH
34927: LD_VAR 0 3
34931: PPUSH
34932: LD_VAR 0 5
34936: PPUSH
34937: CALL_OW 1
34941: ST_TO_ADDR
// result := list ;
34942: LD_ADDR_VAR 0 4
34946: PUSH
34947: LD_VAR 0 1
34951: ST_TO_ADDR
// end ;
34952: LD_VAR 0 4
34956: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34957: LD_INT 0
34959: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34960: LD_ADDR_VAR 0 5
34964: PUSH
34965: LD_VAR 0 1
34969: PPUSH
34970: CALL_OW 250
34974: PPUSH
34975: LD_VAR 0 1
34979: PPUSH
34980: CALL_OW 251
34984: PPUSH
34985: LD_VAR 0 2
34989: PPUSH
34990: LD_VAR 0 3
34994: PPUSH
34995: LD_VAR 0 4
34999: PPUSH
35000: CALL 35010 0 5
35004: ST_TO_ADDR
// end ;
35005: LD_VAR 0 5
35009: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35010: LD_INT 0
35012: PPUSH
35013: PPUSH
35014: PPUSH
35015: PPUSH
// if not list then
35016: LD_VAR 0 3
35020: NOT
35021: IFFALSE 35025
// exit ;
35023: GO 35413
// result := [ ] ;
35025: LD_ADDR_VAR 0 6
35029: PUSH
35030: EMPTY
35031: ST_TO_ADDR
// for i in list do
35032: LD_ADDR_VAR 0 7
35036: PUSH
35037: LD_VAR 0 3
35041: PUSH
35042: FOR_IN
35043: IFFALSE 35245
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35045: LD_ADDR_VAR 0 9
35049: PUSH
35050: LD_VAR 0 7
35054: PPUSH
35055: LD_VAR 0 1
35059: PPUSH
35060: LD_VAR 0 2
35064: PPUSH
35065: CALL_OW 297
35069: ST_TO_ADDR
// if not result then
35070: LD_VAR 0 6
35074: NOT
35075: IFFALSE 35101
// result := [ [ i , tmp ] ] else
35077: LD_ADDR_VAR 0 6
35081: PUSH
35082: LD_VAR 0 7
35086: PUSH
35087: LD_VAR 0 9
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: PUSH
35096: EMPTY
35097: LIST
35098: ST_TO_ADDR
35099: GO 35243
// begin if result [ result ] [ 2 ] < tmp then
35101: LD_VAR 0 6
35105: PUSH
35106: LD_VAR 0 6
35110: ARRAY
35111: PUSH
35112: LD_INT 2
35114: ARRAY
35115: PUSH
35116: LD_VAR 0 9
35120: LESS
35121: IFFALSE 35163
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35123: LD_ADDR_VAR 0 6
35127: PUSH
35128: LD_VAR 0 6
35132: PPUSH
35133: LD_VAR 0 6
35137: PUSH
35138: LD_INT 1
35140: PLUS
35141: PPUSH
35142: LD_VAR 0 7
35146: PUSH
35147: LD_VAR 0 9
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PPUSH
35156: CALL_OW 2
35160: ST_TO_ADDR
35161: GO 35243
// for j = 1 to result do
35163: LD_ADDR_VAR 0 8
35167: PUSH
35168: DOUBLE
35169: LD_INT 1
35171: DEC
35172: ST_TO_ADDR
35173: LD_VAR 0 6
35177: PUSH
35178: FOR_TO
35179: IFFALSE 35241
// begin if tmp < result [ j ] [ 2 ] then
35181: LD_VAR 0 9
35185: PUSH
35186: LD_VAR 0 6
35190: PUSH
35191: LD_VAR 0 8
35195: ARRAY
35196: PUSH
35197: LD_INT 2
35199: ARRAY
35200: LESS
35201: IFFALSE 35239
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35203: LD_ADDR_VAR 0 6
35207: PUSH
35208: LD_VAR 0 6
35212: PPUSH
35213: LD_VAR 0 8
35217: PPUSH
35218: LD_VAR 0 7
35222: PUSH
35223: LD_VAR 0 9
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: PPUSH
35232: CALL_OW 2
35236: ST_TO_ADDR
// break ;
35237: GO 35241
// end ; end ;
35239: GO 35178
35241: POP
35242: POP
// end ; end ;
35243: GO 35042
35245: POP
35246: POP
// if result and not asc then
35247: LD_VAR 0 6
35251: PUSH
35252: LD_VAR 0 4
35256: NOT
35257: AND
35258: IFFALSE 35333
// begin tmp := result ;
35260: LD_ADDR_VAR 0 9
35264: PUSH
35265: LD_VAR 0 6
35269: ST_TO_ADDR
// for i = tmp downto 1 do
35270: LD_ADDR_VAR 0 7
35274: PUSH
35275: DOUBLE
35276: LD_VAR 0 9
35280: INC
35281: ST_TO_ADDR
35282: LD_INT 1
35284: PUSH
35285: FOR_DOWNTO
35286: IFFALSE 35331
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35288: LD_ADDR_VAR 0 6
35292: PUSH
35293: LD_VAR 0 6
35297: PPUSH
35298: LD_VAR 0 9
35302: PUSH
35303: LD_VAR 0 7
35307: MINUS
35308: PUSH
35309: LD_INT 1
35311: PLUS
35312: PPUSH
35313: LD_VAR 0 9
35317: PUSH
35318: LD_VAR 0 7
35322: ARRAY
35323: PPUSH
35324: CALL_OW 1
35328: ST_TO_ADDR
35329: GO 35285
35331: POP
35332: POP
// end ; tmp := [ ] ;
35333: LD_ADDR_VAR 0 9
35337: PUSH
35338: EMPTY
35339: ST_TO_ADDR
// if mode then
35340: LD_VAR 0 5
35344: IFFALSE 35413
// begin for i = 1 to result do
35346: LD_ADDR_VAR 0 7
35350: PUSH
35351: DOUBLE
35352: LD_INT 1
35354: DEC
35355: ST_TO_ADDR
35356: LD_VAR 0 6
35360: PUSH
35361: FOR_TO
35362: IFFALSE 35401
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35364: LD_ADDR_VAR 0 9
35368: PUSH
35369: LD_VAR 0 9
35373: PPUSH
35374: LD_VAR 0 7
35378: PPUSH
35379: LD_VAR 0 6
35383: PUSH
35384: LD_VAR 0 7
35388: ARRAY
35389: PUSH
35390: LD_INT 1
35392: ARRAY
35393: PPUSH
35394: CALL_OW 1
35398: ST_TO_ADDR
35399: GO 35361
35401: POP
35402: POP
// result := tmp ;
35403: LD_ADDR_VAR 0 6
35407: PUSH
35408: LD_VAR 0 9
35412: ST_TO_ADDR
// end ; end ;
35413: LD_VAR 0 6
35417: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35418: LD_INT 0
35420: PPUSH
35421: PPUSH
35422: PPUSH
35423: PPUSH
35424: PPUSH
35425: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35426: LD_ADDR_VAR 0 5
35430: PUSH
35431: LD_INT 0
35433: PUSH
35434: LD_INT 0
35436: PUSH
35437: LD_INT 0
35439: PUSH
35440: EMPTY
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: LIST
35446: LIST
35447: ST_TO_ADDR
// if not x or not y then
35448: LD_VAR 0 2
35452: NOT
35453: PUSH
35454: LD_VAR 0 3
35458: NOT
35459: OR
35460: IFFALSE 35464
// exit ;
35462: GO 37114
// if not range then
35464: LD_VAR 0 4
35468: NOT
35469: IFFALSE 35479
// range := 10 ;
35471: LD_ADDR_VAR 0 4
35475: PUSH
35476: LD_INT 10
35478: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35479: LD_ADDR_VAR 0 8
35483: PUSH
35484: LD_INT 81
35486: PUSH
35487: LD_VAR 0 1
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 92
35498: PUSH
35499: LD_VAR 0 2
35503: PUSH
35504: LD_VAR 0 3
35508: PUSH
35509: LD_VAR 0 4
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 3
35522: PUSH
35523: LD_INT 21
35525: PUSH
35526: LD_INT 3
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: LIST
35541: PPUSH
35542: CALL_OW 69
35546: ST_TO_ADDR
// if not tmp then
35547: LD_VAR 0 8
35551: NOT
35552: IFFALSE 35556
// exit ;
35554: GO 37114
// for i in tmp do
35556: LD_ADDR_VAR 0 6
35560: PUSH
35561: LD_VAR 0 8
35565: PUSH
35566: FOR_IN
35567: IFFALSE 37089
// begin points := [ 0 , 0 , 0 ] ;
35569: LD_ADDR_VAR 0 9
35573: PUSH
35574: LD_INT 0
35576: PUSH
35577: LD_INT 0
35579: PUSH
35580: LD_INT 0
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: LIST
35587: ST_TO_ADDR
// bpoints := 1 ;
35588: LD_ADDR_VAR 0 10
35592: PUSH
35593: LD_INT 1
35595: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35596: LD_VAR 0 6
35600: PPUSH
35601: CALL_OW 247
35605: PUSH
35606: LD_INT 1
35608: DOUBLE
35609: EQUAL
35610: IFTRUE 35614
35612: GO 36192
35614: POP
// begin if GetClass ( i ) = 1 then
35615: LD_VAR 0 6
35619: PPUSH
35620: CALL_OW 257
35624: PUSH
35625: LD_INT 1
35627: EQUAL
35628: IFFALSE 35649
// points := [ 10 , 5 , 3 ] ;
35630: LD_ADDR_VAR 0 9
35634: PUSH
35635: LD_INT 10
35637: PUSH
35638: LD_INT 5
35640: PUSH
35641: LD_INT 3
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: LIST
35648: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35649: LD_VAR 0 6
35653: PPUSH
35654: CALL_OW 257
35658: PUSH
35659: LD_INT 2
35661: PUSH
35662: LD_INT 3
35664: PUSH
35665: LD_INT 4
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: LIST
35672: IN
35673: IFFALSE 35694
// points := [ 3 , 2 , 1 ] ;
35675: LD_ADDR_VAR 0 9
35679: PUSH
35680: LD_INT 3
35682: PUSH
35683: LD_INT 2
35685: PUSH
35686: LD_INT 1
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: LIST
35693: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35694: LD_VAR 0 6
35698: PPUSH
35699: CALL_OW 257
35703: PUSH
35704: LD_INT 5
35706: EQUAL
35707: IFFALSE 35728
// points := [ 130 , 5 , 2 ] ;
35709: LD_ADDR_VAR 0 9
35713: PUSH
35714: LD_INT 130
35716: PUSH
35717: LD_INT 5
35719: PUSH
35720: LD_INT 2
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: LIST
35727: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35728: LD_VAR 0 6
35732: PPUSH
35733: CALL_OW 257
35737: PUSH
35738: LD_INT 8
35740: EQUAL
35741: IFFALSE 35762
// points := [ 35 , 35 , 30 ] ;
35743: LD_ADDR_VAR 0 9
35747: PUSH
35748: LD_INT 35
35750: PUSH
35751: LD_INT 35
35753: PUSH
35754: LD_INT 30
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: LIST
35761: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35762: LD_VAR 0 6
35766: PPUSH
35767: CALL_OW 257
35771: PUSH
35772: LD_INT 9
35774: EQUAL
35775: IFFALSE 35796
// points := [ 20 , 55 , 40 ] ;
35777: LD_ADDR_VAR 0 9
35781: PUSH
35782: LD_INT 20
35784: PUSH
35785: LD_INT 55
35787: PUSH
35788: LD_INT 40
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: LIST
35795: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35796: LD_VAR 0 6
35800: PPUSH
35801: CALL_OW 257
35805: PUSH
35806: LD_INT 12
35808: PUSH
35809: LD_INT 16
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: IN
35816: IFFALSE 35837
// points := [ 5 , 3 , 2 ] ;
35818: LD_ADDR_VAR 0 9
35822: PUSH
35823: LD_INT 5
35825: PUSH
35826: LD_INT 3
35828: PUSH
35829: LD_INT 2
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: LIST
35836: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35837: LD_VAR 0 6
35841: PPUSH
35842: CALL_OW 257
35846: PUSH
35847: LD_INT 17
35849: EQUAL
35850: IFFALSE 35871
// points := [ 100 , 50 , 75 ] ;
35852: LD_ADDR_VAR 0 9
35856: PUSH
35857: LD_INT 100
35859: PUSH
35860: LD_INT 50
35862: PUSH
35863: LD_INT 75
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: LIST
35870: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35871: LD_VAR 0 6
35875: PPUSH
35876: CALL_OW 257
35880: PUSH
35881: LD_INT 15
35883: EQUAL
35884: IFFALSE 35905
// points := [ 10 , 5 , 3 ] ;
35886: LD_ADDR_VAR 0 9
35890: PUSH
35891: LD_INT 10
35893: PUSH
35894: LD_INT 5
35896: PUSH
35897: LD_INT 3
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: LIST
35904: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35905: LD_VAR 0 6
35909: PPUSH
35910: CALL_OW 257
35914: PUSH
35915: LD_INT 14
35917: EQUAL
35918: IFFALSE 35939
// points := [ 10 , 0 , 0 ] ;
35920: LD_ADDR_VAR 0 9
35924: PUSH
35925: LD_INT 10
35927: PUSH
35928: LD_INT 0
35930: PUSH
35931: LD_INT 0
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: LIST
35938: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35939: LD_VAR 0 6
35943: PPUSH
35944: CALL_OW 257
35948: PUSH
35949: LD_INT 11
35951: EQUAL
35952: IFFALSE 35973
// points := [ 30 , 10 , 5 ] ;
35954: LD_ADDR_VAR 0 9
35958: PUSH
35959: LD_INT 30
35961: PUSH
35962: LD_INT 10
35964: PUSH
35965: LD_INT 5
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: LIST
35972: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35973: LD_VAR 0 1
35977: PPUSH
35978: LD_INT 5
35980: PPUSH
35981: CALL_OW 321
35985: PUSH
35986: LD_INT 2
35988: EQUAL
35989: IFFALSE 36006
// bpoints := bpoints * 1.8 ;
35991: LD_ADDR_VAR 0 10
35995: PUSH
35996: LD_VAR 0 10
36000: PUSH
36001: LD_REAL  1.80000000000000E+0000
36004: MUL
36005: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36006: LD_VAR 0 6
36010: PPUSH
36011: CALL_OW 257
36015: PUSH
36016: LD_INT 1
36018: PUSH
36019: LD_INT 2
36021: PUSH
36022: LD_INT 3
36024: PUSH
36025: LD_INT 4
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: IN
36034: PUSH
36035: LD_VAR 0 1
36039: PPUSH
36040: LD_INT 51
36042: PPUSH
36043: CALL_OW 321
36047: PUSH
36048: LD_INT 2
36050: EQUAL
36051: AND
36052: IFFALSE 36069
// bpoints := bpoints * 1.2 ;
36054: LD_ADDR_VAR 0 10
36058: PUSH
36059: LD_VAR 0 10
36063: PUSH
36064: LD_REAL  1.20000000000000E+0000
36067: MUL
36068: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36069: LD_VAR 0 6
36073: PPUSH
36074: CALL_OW 257
36078: PUSH
36079: LD_INT 5
36081: PUSH
36082: LD_INT 7
36084: PUSH
36085: LD_INT 9
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: LIST
36092: IN
36093: PUSH
36094: LD_VAR 0 1
36098: PPUSH
36099: LD_INT 52
36101: PPUSH
36102: CALL_OW 321
36106: PUSH
36107: LD_INT 2
36109: EQUAL
36110: AND
36111: IFFALSE 36128
// bpoints := bpoints * 1.5 ;
36113: LD_ADDR_VAR 0 10
36117: PUSH
36118: LD_VAR 0 10
36122: PUSH
36123: LD_REAL  1.50000000000000E+0000
36126: MUL
36127: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36128: LD_VAR 0 1
36132: PPUSH
36133: LD_INT 66
36135: PPUSH
36136: CALL_OW 321
36140: PUSH
36141: LD_INT 2
36143: EQUAL
36144: IFFALSE 36161
// bpoints := bpoints * 1.1 ;
36146: LD_ADDR_VAR 0 10
36150: PUSH
36151: LD_VAR 0 10
36155: PUSH
36156: LD_REAL  1.10000000000000E+0000
36159: MUL
36160: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36161: LD_ADDR_VAR 0 10
36165: PUSH
36166: LD_VAR 0 10
36170: PUSH
36171: LD_VAR 0 6
36175: PPUSH
36176: LD_INT 1
36178: PPUSH
36179: CALL_OW 259
36183: PUSH
36184: LD_REAL  1.15000000000000E+0000
36187: MUL
36188: MUL
36189: ST_TO_ADDR
// end ; unit_vehicle :
36190: GO 37018
36192: LD_INT 2
36194: DOUBLE
36195: EQUAL
36196: IFTRUE 36200
36198: GO 37006
36200: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36201: LD_VAR 0 6
36205: PPUSH
36206: CALL_OW 264
36210: PUSH
36211: LD_INT 2
36213: PUSH
36214: LD_INT 42
36216: PUSH
36217: LD_INT 24
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: LIST
36224: IN
36225: IFFALSE 36246
// points := [ 25 , 5 , 3 ] ;
36227: LD_ADDR_VAR 0 9
36231: PUSH
36232: LD_INT 25
36234: PUSH
36235: LD_INT 5
36237: PUSH
36238: LD_INT 3
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: LIST
36245: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36246: LD_VAR 0 6
36250: PPUSH
36251: CALL_OW 264
36255: PUSH
36256: LD_INT 4
36258: PUSH
36259: LD_INT 43
36261: PUSH
36262: LD_INT 25
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: LIST
36269: IN
36270: IFFALSE 36291
// points := [ 40 , 15 , 5 ] ;
36272: LD_ADDR_VAR 0 9
36276: PUSH
36277: LD_INT 40
36279: PUSH
36280: LD_INT 15
36282: PUSH
36283: LD_INT 5
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: LIST
36290: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36291: LD_VAR 0 6
36295: PPUSH
36296: CALL_OW 264
36300: PUSH
36301: LD_INT 3
36303: PUSH
36304: LD_INT 23
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: IN
36311: IFFALSE 36332
// points := [ 7 , 25 , 8 ] ;
36313: LD_ADDR_VAR 0 9
36317: PUSH
36318: LD_INT 7
36320: PUSH
36321: LD_INT 25
36323: PUSH
36324: LD_INT 8
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: LIST
36331: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36332: LD_VAR 0 6
36336: PPUSH
36337: CALL_OW 264
36341: PUSH
36342: LD_INT 5
36344: PUSH
36345: LD_INT 27
36347: PUSH
36348: LD_INT 44
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: LIST
36355: IN
36356: IFFALSE 36377
// points := [ 14 , 50 , 16 ] ;
36358: LD_ADDR_VAR 0 9
36362: PUSH
36363: LD_INT 14
36365: PUSH
36366: LD_INT 50
36368: PUSH
36369: LD_INT 16
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: LIST
36376: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36377: LD_VAR 0 6
36381: PPUSH
36382: CALL_OW 264
36386: PUSH
36387: LD_INT 6
36389: PUSH
36390: LD_INT 46
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: IN
36397: IFFALSE 36418
// points := [ 32 , 120 , 70 ] ;
36399: LD_ADDR_VAR 0 9
36403: PUSH
36404: LD_INT 32
36406: PUSH
36407: LD_INT 120
36409: PUSH
36410: LD_INT 70
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: LIST
36417: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36418: LD_VAR 0 6
36422: PPUSH
36423: CALL_OW 264
36427: PUSH
36428: LD_INT 7
36430: PUSH
36431: LD_INT 28
36433: PUSH
36434: LD_INT 45
36436: PUSH
36437: LD_INT 92
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: IN
36446: IFFALSE 36467
// points := [ 35 , 20 , 45 ] ;
36448: LD_ADDR_VAR 0 9
36452: PUSH
36453: LD_INT 35
36455: PUSH
36456: LD_INT 20
36458: PUSH
36459: LD_INT 45
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: LIST
36466: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36467: LD_VAR 0 6
36471: PPUSH
36472: CALL_OW 264
36476: PUSH
36477: LD_INT 47
36479: PUSH
36480: EMPTY
36481: LIST
36482: IN
36483: IFFALSE 36504
// points := [ 67 , 45 , 75 ] ;
36485: LD_ADDR_VAR 0 9
36489: PUSH
36490: LD_INT 67
36492: PUSH
36493: LD_INT 45
36495: PUSH
36496: LD_INT 75
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: LIST
36503: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36504: LD_VAR 0 6
36508: PPUSH
36509: CALL_OW 264
36513: PUSH
36514: LD_INT 26
36516: PUSH
36517: EMPTY
36518: LIST
36519: IN
36520: IFFALSE 36541
// points := [ 120 , 30 , 80 ] ;
36522: LD_ADDR_VAR 0 9
36526: PUSH
36527: LD_INT 120
36529: PUSH
36530: LD_INT 30
36532: PUSH
36533: LD_INT 80
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: LIST
36540: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36541: LD_VAR 0 6
36545: PPUSH
36546: CALL_OW 264
36550: PUSH
36551: LD_INT 22
36553: PUSH
36554: EMPTY
36555: LIST
36556: IN
36557: IFFALSE 36578
// points := [ 40 , 1 , 1 ] ;
36559: LD_ADDR_VAR 0 9
36563: PUSH
36564: LD_INT 40
36566: PUSH
36567: LD_INT 1
36569: PUSH
36570: LD_INT 1
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: LIST
36577: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36578: LD_VAR 0 6
36582: PPUSH
36583: CALL_OW 264
36587: PUSH
36588: LD_INT 29
36590: PUSH
36591: EMPTY
36592: LIST
36593: IN
36594: IFFALSE 36615
// points := [ 70 , 200 , 400 ] ;
36596: LD_ADDR_VAR 0 9
36600: PUSH
36601: LD_INT 70
36603: PUSH
36604: LD_INT 200
36606: PUSH
36607: LD_INT 400
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: LIST
36614: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36615: LD_VAR 0 6
36619: PPUSH
36620: CALL_OW 264
36624: PUSH
36625: LD_INT 14
36627: PUSH
36628: LD_INT 53
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: IN
36635: IFFALSE 36656
// points := [ 40 , 10 , 20 ] ;
36637: LD_ADDR_VAR 0 9
36641: PUSH
36642: LD_INT 40
36644: PUSH
36645: LD_INT 10
36647: PUSH
36648: LD_INT 20
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: LIST
36655: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36656: LD_VAR 0 6
36660: PPUSH
36661: CALL_OW 264
36665: PUSH
36666: LD_INT 9
36668: PUSH
36669: EMPTY
36670: LIST
36671: IN
36672: IFFALSE 36693
// points := [ 5 , 70 , 20 ] ;
36674: LD_ADDR_VAR 0 9
36678: PUSH
36679: LD_INT 5
36681: PUSH
36682: LD_INT 70
36684: PUSH
36685: LD_INT 20
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: LIST
36692: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36693: LD_VAR 0 6
36697: PPUSH
36698: CALL_OW 264
36702: PUSH
36703: LD_INT 10
36705: PUSH
36706: EMPTY
36707: LIST
36708: IN
36709: IFFALSE 36730
// points := [ 35 , 110 , 70 ] ;
36711: LD_ADDR_VAR 0 9
36715: PUSH
36716: LD_INT 35
36718: PUSH
36719: LD_INT 110
36721: PUSH
36722: LD_INT 70
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: LIST
36729: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36730: LD_VAR 0 6
36734: PPUSH
36735: CALL_OW 265
36739: PUSH
36740: LD_INT 25
36742: EQUAL
36743: IFFALSE 36764
// points := [ 80 , 65 , 100 ] ;
36745: LD_ADDR_VAR 0 9
36749: PUSH
36750: LD_INT 80
36752: PUSH
36753: LD_INT 65
36755: PUSH
36756: LD_INT 100
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: LIST
36763: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36764: LD_VAR 0 6
36768: PPUSH
36769: CALL_OW 263
36773: PUSH
36774: LD_INT 1
36776: EQUAL
36777: IFFALSE 36812
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36779: LD_ADDR_VAR 0 10
36783: PUSH
36784: LD_VAR 0 10
36788: PUSH
36789: LD_VAR 0 6
36793: PPUSH
36794: CALL_OW 311
36798: PPUSH
36799: LD_INT 3
36801: PPUSH
36802: CALL_OW 259
36806: PUSH
36807: LD_INT 4
36809: MUL
36810: MUL
36811: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36812: LD_VAR 0 6
36816: PPUSH
36817: CALL_OW 263
36821: PUSH
36822: LD_INT 2
36824: EQUAL
36825: IFFALSE 36876
// begin j := IsControledBy ( i ) ;
36827: LD_ADDR_VAR 0 7
36831: PUSH
36832: LD_VAR 0 6
36836: PPUSH
36837: CALL_OW 312
36841: ST_TO_ADDR
// if j then
36842: LD_VAR 0 7
36846: IFFALSE 36876
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36848: LD_ADDR_VAR 0 10
36852: PUSH
36853: LD_VAR 0 10
36857: PUSH
36858: LD_VAR 0 7
36862: PPUSH
36863: LD_INT 3
36865: PPUSH
36866: CALL_OW 259
36870: PUSH
36871: LD_INT 3
36873: MUL
36874: MUL
36875: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36876: LD_VAR 0 6
36880: PPUSH
36881: CALL_OW 264
36885: PUSH
36886: LD_INT 5
36888: PUSH
36889: LD_INT 6
36891: PUSH
36892: LD_INT 46
36894: PUSH
36895: LD_INT 44
36897: PUSH
36898: LD_INT 47
36900: PUSH
36901: LD_INT 45
36903: PUSH
36904: LD_INT 28
36906: PUSH
36907: LD_INT 7
36909: PUSH
36910: LD_INT 27
36912: PUSH
36913: LD_INT 29
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: IN
36928: PUSH
36929: LD_VAR 0 1
36933: PPUSH
36934: LD_INT 52
36936: PPUSH
36937: CALL_OW 321
36941: PUSH
36942: LD_INT 2
36944: EQUAL
36945: AND
36946: IFFALSE 36963
// bpoints := bpoints * 1.2 ;
36948: LD_ADDR_VAR 0 10
36952: PUSH
36953: LD_VAR 0 10
36957: PUSH
36958: LD_REAL  1.20000000000000E+0000
36961: MUL
36962: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36963: LD_VAR 0 6
36967: PPUSH
36968: CALL_OW 264
36972: PUSH
36973: LD_INT 6
36975: PUSH
36976: LD_INT 46
36978: PUSH
36979: LD_INT 47
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: LIST
36986: IN
36987: IFFALSE 37004
// bpoints := bpoints * 1.2 ;
36989: LD_ADDR_VAR 0 10
36993: PUSH
36994: LD_VAR 0 10
36998: PUSH
36999: LD_REAL  1.20000000000000E+0000
37002: MUL
37003: ST_TO_ADDR
// end ; unit_building :
37004: GO 37018
37006: LD_INT 3
37008: DOUBLE
37009: EQUAL
37010: IFTRUE 37014
37012: GO 37017
37014: POP
// ; end ;
37015: GO 37018
37017: POP
// for j = 1 to 3 do
37018: LD_ADDR_VAR 0 7
37022: PUSH
37023: DOUBLE
37024: LD_INT 1
37026: DEC
37027: ST_TO_ADDR
37028: LD_INT 3
37030: PUSH
37031: FOR_TO
37032: IFFALSE 37085
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37034: LD_ADDR_VAR 0 5
37038: PUSH
37039: LD_VAR 0 5
37043: PPUSH
37044: LD_VAR 0 7
37048: PPUSH
37049: LD_VAR 0 5
37053: PUSH
37054: LD_VAR 0 7
37058: ARRAY
37059: PUSH
37060: LD_VAR 0 9
37064: PUSH
37065: LD_VAR 0 7
37069: ARRAY
37070: PUSH
37071: LD_VAR 0 10
37075: MUL
37076: PLUS
37077: PPUSH
37078: CALL_OW 1
37082: ST_TO_ADDR
37083: GO 37031
37085: POP
37086: POP
// end ;
37087: GO 35566
37089: POP
37090: POP
// result := Replace ( result , 4 , tmp ) ;
37091: LD_ADDR_VAR 0 5
37095: PUSH
37096: LD_VAR 0 5
37100: PPUSH
37101: LD_INT 4
37103: PPUSH
37104: LD_VAR 0 8
37108: PPUSH
37109: CALL_OW 1
37113: ST_TO_ADDR
// end ;
37114: LD_VAR 0 5
37118: RET
// export function DangerAtRange ( unit , range ) ; begin
37119: LD_INT 0
37121: PPUSH
// if not unit then
37122: LD_VAR 0 1
37126: NOT
37127: IFFALSE 37131
// exit ;
37129: GO 37176
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37131: LD_ADDR_VAR 0 3
37135: PUSH
37136: LD_VAR 0 1
37140: PPUSH
37141: CALL_OW 255
37145: PPUSH
37146: LD_VAR 0 1
37150: PPUSH
37151: CALL_OW 250
37155: PPUSH
37156: LD_VAR 0 1
37160: PPUSH
37161: CALL_OW 251
37165: PPUSH
37166: LD_VAR 0 2
37170: PPUSH
37171: CALL 35418 0 4
37175: ST_TO_ADDR
// end ;
37176: LD_VAR 0 3
37180: RET
// export function DangerInArea ( side , area ) ; begin
37181: LD_INT 0
37183: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37184: LD_ADDR_VAR 0 3
37188: PUSH
37189: LD_VAR 0 2
37193: PPUSH
37194: LD_INT 81
37196: PUSH
37197: LD_VAR 0 1
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PPUSH
37206: CALL_OW 70
37210: ST_TO_ADDR
// end ;
37211: LD_VAR 0 3
37215: RET
// export function IsExtension ( b ) ; begin
37216: LD_INT 0
37218: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37219: LD_ADDR_VAR 0 2
37223: PUSH
37224: LD_VAR 0 1
37228: PUSH
37229: LD_INT 23
37231: PUSH
37232: LD_INT 20
37234: PUSH
37235: LD_INT 22
37237: PUSH
37238: LD_INT 17
37240: PUSH
37241: LD_INT 24
37243: PUSH
37244: LD_INT 21
37246: PUSH
37247: LD_INT 19
37249: PUSH
37250: LD_INT 16
37252: PUSH
37253: LD_INT 25
37255: PUSH
37256: LD_INT 18
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: LIST
37263: LIST
37264: LIST
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: IN
37271: ST_TO_ADDR
// end ;
37272: LD_VAR 0 2
37276: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37277: LD_INT 0
37279: PPUSH
37280: PPUSH
37281: PPUSH
// result := [ ] ;
37282: LD_ADDR_VAR 0 4
37286: PUSH
37287: EMPTY
37288: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37289: LD_ADDR_VAR 0 5
37293: PUSH
37294: LD_VAR 0 2
37298: PPUSH
37299: LD_INT 21
37301: PUSH
37302: LD_INT 3
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PPUSH
37309: CALL_OW 70
37313: ST_TO_ADDR
// if not tmp then
37314: LD_VAR 0 5
37318: NOT
37319: IFFALSE 37323
// exit ;
37321: GO 37387
// if checkLink then
37323: LD_VAR 0 3
37327: IFFALSE 37377
// begin for i in tmp do
37329: LD_ADDR_VAR 0 6
37333: PUSH
37334: LD_VAR 0 5
37338: PUSH
37339: FOR_IN
37340: IFFALSE 37375
// if GetBase ( i ) <> base then
37342: LD_VAR 0 6
37346: PPUSH
37347: CALL_OW 274
37351: PUSH
37352: LD_VAR 0 1
37356: NONEQUAL
37357: IFFALSE 37373
// ComLinkToBase ( base , i ) ;
37359: LD_VAR 0 1
37363: PPUSH
37364: LD_VAR 0 6
37368: PPUSH
37369: CALL_OW 169
37373: GO 37339
37375: POP
37376: POP
// end ; result := tmp ;
37377: LD_ADDR_VAR 0 4
37381: PUSH
37382: LD_VAR 0 5
37386: ST_TO_ADDR
// end ;
37387: LD_VAR 0 4
37391: RET
// export function ComComplete ( units , b ) ; var i ; begin
37392: LD_INT 0
37394: PPUSH
37395: PPUSH
// if not units then
37396: LD_VAR 0 1
37400: NOT
37401: IFFALSE 37405
// exit ;
37403: GO 37495
// for i in units do
37405: LD_ADDR_VAR 0 4
37409: PUSH
37410: LD_VAR 0 1
37414: PUSH
37415: FOR_IN
37416: IFFALSE 37493
// if BuildingStatus ( b ) = bs_build then
37418: LD_VAR 0 2
37422: PPUSH
37423: CALL_OW 461
37427: PUSH
37428: LD_INT 1
37430: EQUAL
37431: IFFALSE 37491
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37433: LD_VAR 0 4
37437: PPUSH
37438: LD_STRING h
37440: PUSH
37441: LD_VAR 0 2
37445: PPUSH
37446: CALL_OW 250
37450: PUSH
37451: LD_VAR 0 2
37455: PPUSH
37456: CALL_OW 251
37460: PUSH
37461: LD_VAR 0 2
37465: PUSH
37466: LD_INT 0
37468: PUSH
37469: LD_INT 0
37471: PUSH
37472: LD_INT 0
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: PUSH
37484: EMPTY
37485: LIST
37486: PPUSH
37487: CALL_OW 446
37491: GO 37415
37493: POP
37494: POP
// end ;
37495: LD_VAR 0 3
37499: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37500: LD_INT 0
37502: PPUSH
37503: PPUSH
37504: PPUSH
37505: PPUSH
37506: PPUSH
37507: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37508: LD_VAR 0 1
37512: NOT
37513: PUSH
37514: LD_VAR 0 1
37518: PPUSH
37519: CALL_OW 263
37523: PUSH
37524: LD_INT 2
37526: NONEQUAL
37527: OR
37528: IFFALSE 37532
// exit ;
37530: GO 37848
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37532: LD_ADDR_VAR 0 6
37536: PUSH
37537: LD_INT 22
37539: PUSH
37540: LD_VAR 0 1
37544: PPUSH
37545: CALL_OW 255
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 2
37556: PUSH
37557: LD_INT 30
37559: PUSH
37560: LD_INT 36
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: LD_INT 34
37569: PUSH
37570: LD_INT 31
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: LIST
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PPUSH
37586: CALL_OW 69
37590: ST_TO_ADDR
// if not tmp then
37591: LD_VAR 0 6
37595: NOT
37596: IFFALSE 37600
// exit ;
37598: GO 37848
// result := [ ] ;
37600: LD_ADDR_VAR 0 2
37604: PUSH
37605: EMPTY
37606: ST_TO_ADDR
// for i in tmp do
37607: LD_ADDR_VAR 0 3
37611: PUSH
37612: LD_VAR 0 6
37616: PUSH
37617: FOR_IN
37618: IFFALSE 37689
// begin t := UnitsInside ( i ) ;
37620: LD_ADDR_VAR 0 4
37624: PUSH
37625: LD_VAR 0 3
37629: PPUSH
37630: CALL_OW 313
37634: ST_TO_ADDR
// if t then
37635: LD_VAR 0 4
37639: IFFALSE 37687
// for j in t do
37641: LD_ADDR_VAR 0 7
37645: PUSH
37646: LD_VAR 0 4
37650: PUSH
37651: FOR_IN
37652: IFFALSE 37685
// result := Replace ( result , result + 1 , j ) ;
37654: LD_ADDR_VAR 0 2
37658: PUSH
37659: LD_VAR 0 2
37663: PPUSH
37664: LD_VAR 0 2
37668: PUSH
37669: LD_INT 1
37671: PLUS
37672: PPUSH
37673: LD_VAR 0 7
37677: PPUSH
37678: CALL_OW 1
37682: ST_TO_ADDR
37683: GO 37651
37685: POP
37686: POP
// end ;
37687: GO 37617
37689: POP
37690: POP
// if not result then
37691: LD_VAR 0 2
37695: NOT
37696: IFFALSE 37700
// exit ;
37698: GO 37848
// mech := result [ 1 ] ;
37700: LD_ADDR_VAR 0 5
37704: PUSH
37705: LD_VAR 0 2
37709: PUSH
37710: LD_INT 1
37712: ARRAY
37713: ST_TO_ADDR
// if result > 1 then
37714: LD_VAR 0 2
37718: PUSH
37719: LD_INT 1
37721: GREATER
37722: IFFALSE 37834
// begin for i = 2 to result do
37724: LD_ADDR_VAR 0 3
37728: PUSH
37729: DOUBLE
37730: LD_INT 2
37732: DEC
37733: ST_TO_ADDR
37734: LD_VAR 0 2
37738: PUSH
37739: FOR_TO
37740: IFFALSE 37832
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37742: LD_ADDR_VAR 0 4
37746: PUSH
37747: LD_VAR 0 2
37751: PUSH
37752: LD_VAR 0 3
37756: ARRAY
37757: PPUSH
37758: LD_INT 3
37760: PPUSH
37761: CALL_OW 259
37765: PUSH
37766: LD_VAR 0 2
37770: PUSH
37771: LD_VAR 0 3
37775: ARRAY
37776: PPUSH
37777: CALL_OW 432
37781: MINUS
37782: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37783: LD_VAR 0 4
37787: PUSH
37788: LD_VAR 0 5
37792: PPUSH
37793: LD_INT 3
37795: PPUSH
37796: CALL_OW 259
37800: PUSH
37801: LD_VAR 0 5
37805: PPUSH
37806: CALL_OW 432
37810: MINUS
37811: GREATEREQUAL
37812: IFFALSE 37830
// mech := result [ i ] ;
37814: LD_ADDR_VAR 0 5
37818: PUSH
37819: LD_VAR 0 2
37823: PUSH
37824: LD_VAR 0 3
37828: ARRAY
37829: ST_TO_ADDR
// end ;
37830: GO 37739
37832: POP
37833: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37834: LD_VAR 0 1
37838: PPUSH
37839: LD_VAR 0 5
37843: PPUSH
37844: CALL_OW 135
// end ;
37848: LD_VAR 0 2
37852: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37853: LD_INT 0
37855: PPUSH
37856: PPUSH
37857: PPUSH
37858: PPUSH
37859: PPUSH
37860: PPUSH
37861: PPUSH
37862: PPUSH
37863: PPUSH
37864: PPUSH
37865: PPUSH
37866: PPUSH
37867: PPUSH
// result := [ ] ;
37868: LD_ADDR_VAR 0 7
37872: PUSH
37873: EMPTY
37874: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37875: LD_VAR 0 1
37879: PPUSH
37880: CALL_OW 266
37884: PUSH
37885: LD_INT 0
37887: PUSH
37888: LD_INT 1
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: IN
37895: NOT
37896: IFFALSE 37900
// exit ;
37898: GO 39534
// if name then
37900: LD_VAR 0 3
37904: IFFALSE 37920
// SetBName ( base_dep , name ) ;
37906: LD_VAR 0 1
37910: PPUSH
37911: LD_VAR 0 3
37915: PPUSH
37916: CALL_OW 500
// base := GetBase ( base_dep ) ;
37920: LD_ADDR_VAR 0 15
37924: PUSH
37925: LD_VAR 0 1
37929: PPUSH
37930: CALL_OW 274
37934: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37935: LD_ADDR_VAR 0 16
37939: PUSH
37940: LD_VAR 0 1
37944: PPUSH
37945: CALL_OW 255
37949: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37950: LD_ADDR_VAR 0 17
37954: PUSH
37955: LD_VAR 0 1
37959: PPUSH
37960: CALL_OW 248
37964: ST_TO_ADDR
// if sources then
37965: LD_VAR 0 5
37969: IFFALSE 38016
// for i = 1 to 3 do
37971: LD_ADDR_VAR 0 8
37975: PUSH
37976: DOUBLE
37977: LD_INT 1
37979: DEC
37980: ST_TO_ADDR
37981: LD_INT 3
37983: PUSH
37984: FOR_TO
37985: IFFALSE 38014
// AddResourceType ( base , i , sources [ i ] ) ;
37987: LD_VAR 0 15
37991: PPUSH
37992: LD_VAR 0 8
37996: PPUSH
37997: LD_VAR 0 5
38001: PUSH
38002: LD_VAR 0 8
38006: ARRAY
38007: PPUSH
38008: CALL_OW 276
38012: GO 37984
38014: POP
38015: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38016: LD_ADDR_VAR 0 18
38020: PUSH
38021: LD_VAR 0 15
38025: PPUSH
38026: LD_VAR 0 2
38030: PPUSH
38031: LD_INT 1
38033: PPUSH
38034: CALL 37277 0 3
38038: ST_TO_ADDR
// InitHc ;
38039: CALL_OW 19
// InitUc ;
38043: CALL_OW 18
// uc_side := side ;
38047: LD_ADDR_OWVAR 20
38051: PUSH
38052: LD_VAR 0 16
38056: ST_TO_ADDR
// uc_nation := nation ;
38057: LD_ADDR_OWVAR 21
38061: PUSH
38062: LD_VAR 0 17
38066: ST_TO_ADDR
// if buildings then
38067: LD_VAR 0 18
38071: IFFALSE 39393
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38073: LD_ADDR_VAR 0 19
38077: PUSH
38078: LD_VAR 0 18
38082: PPUSH
38083: LD_INT 2
38085: PUSH
38086: LD_INT 30
38088: PUSH
38089: LD_INT 29
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: PUSH
38096: LD_INT 30
38098: PUSH
38099: LD_INT 30
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: LIST
38110: PPUSH
38111: CALL_OW 72
38115: ST_TO_ADDR
// if tmp then
38116: LD_VAR 0 19
38120: IFFALSE 38168
// for i in tmp do
38122: LD_ADDR_VAR 0 8
38126: PUSH
38127: LD_VAR 0 19
38131: PUSH
38132: FOR_IN
38133: IFFALSE 38166
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38135: LD_VAR 0 8
38139: PPUSH
38140: CALL_OW 250
38144: PPUSH
38145: LD_VAR 0 8
38149: PPUSH
38150: CALL_OW 251
38154: PPUSH
38155: LD_VAR 0 16
38159: PPUSH
38160: CALL_OW 441
38164: GO 38132
38166: POP
38167: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38168: LD_VAR 0 18
38172: PPUSH
38173: LD_INT 2
38175: PUSH
38176: LD_INT 30
38178: PUSH
38179: LD_INT 32
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PUSH
38186: LD_INT 30
38188: PUSH
38189: LD_INT 33
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: LIST
38200: PPUSH
38201: CALL_OW 72
38205: IFFALSE 38293
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38207: LD_ADDR_VAR 0 8
38211: PUSH
38212: LD_VAR 0 18
38216: PPUSH
38217: LD_INT 2
38219: PUSH
38220: LD_INT 30
38222: PUSH
38223: LD_INT 32
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: LD_INT 30
38232: PUSH
38233: LD_INT 33
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: LIST
38244: PPUSH
38245: CALL_OW 72
38249: PUSH
38250: FOR_IN
38251: IFFALSE 38291
// begin if not GetBWeapon ( i ) then
38253: LD_VAR 0 8
38257: PPUSH
38258: CALL_OW 269
38262: NOT
38263: IFFALSE 38289
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38265: LD_VAR 0 8
38269: PPUSH
38270: LD_VAR 0 8
38274: PPUSH
38275: LD_VAR 0 2
38279: PPUSH
38280: CALL 39539 0 2
38284: PPUSH
38285: CALL_OW 431
// end ;
38289: GO 38250
38291: POP
38292: POP
// end ; for i = 1 to personel do
38293: LD_ADDR_VAR 0 8
38297: PUSH
38298: DOUBLE
38299: LD_INT 1
38301: DEC
38302: ST_TO_ADDR
38303: LD_VAR 0 6
38307: PUSH
38308: FOR_TO
38309: IFFALSE 39373
// begin if i > 4 then
38311: LD_VAR 0 8
38315: PUSH
38316: LD_INT 4
38318: GREATER
38319: IFFALSE 38323
// break ;
38321: GO 39373
// case i of 1 :
38323: LD_VAR 0 8
38327: PUSH
38328: LD_INT 1
38330: DOUBLE
38331: EQUAL
38332: IFTRUE 38336
38334: GO 38416
38336: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38337: LD_ADDR_VAR 0 12
38341: PUSH
38342: LD_VAR 0 18
38346: PPUSH
38347: LD_INT 22
38349: PUSH
38350: LD_VAR 0 16
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 58
38361: PUSH
38362: EMPTY
38363: LIST
38364: PUSH
38365: LD_INT 2
38367: PUSH
38368: LD_INT 30
38370: PUSH
38371: LD_INT 32
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: LD_INT 30
38380: PUSH
38381: LD_INT 4
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: PUSH
38388: LD_INT 30
38390: PUSH
38391: LD_INT 5
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: LIST
38408: PPUSH
38409: CALL_OW 72
38413: ST_TO_ADDR
38414: GO 38638
38416: LD_INT 2
38418: DOUBLE
38419: EQUAL
38420: IFTRUE 38424
38422: GO 38486
38424: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38425: LD_ADDR_VAR 0 12
38429: PUSH
38430: LD_VAR 0 18
38434: PPUSH
38435: LD_INT 22
38437: PUSH
38438: LD_VAR 0 16
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: LD_INT 2
38449: PUSH
38450: LD_INT 30
38452: PUSH
38453: LD_INT 0
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 30
38462: PUSH
38463: LD_INT 1
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: LIST
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PPUSH
38479: CALL_OW 72
38483: ST_TO_ADDR
38484: GO 38638
38486: LD_INT 3
38488: DOUBLE
38489: EQUAL
38490: IFTRUE 38494
38492: GO 38556
38494: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38495: LD_ADDR_VAR 0 12
38499: PUSH
38500: LD_VAR 0 18
38504: PPUSH
38505: LD_INT 22
38507: PUSH
38508: LD_VAR 0 16
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: LD_INT 2
38519: PUSH
38520: LD_INT 30
38522: PUSH
38523: LD_INT 2
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 30
38532: PUSH
38533: LD_INT 3
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: LIST
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PPUSH
38549: CALL_OW 72
38553: ST_TO_ADDR
38554: GO 38638
38556: LD_INT 4
38558: DOUBLE
38559: EQUAL
38560: IFTRUE 38564
38562: GO 38637
38564: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38565: LD_ADDR_VAR 0 12
38569: PUSH
38570: LD_VAR 0 18
38574: PPUSH
38575: LD_INT 22
38577: PUSH
38578: LD_VAR 0 16
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 2
38589: PUSH
38590: LD_INT 30
38592: PUSH
38593: LD_INT 6
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 30
38602: PUSH
38603: LD_INT 7
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: PUSH
38610: LD_INT 30
38612: PUSH
38613: LD_INT 8
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PPUSH
38630: CALL_OW 72
38634: ST_TO_ADDR
38635: GO 38638
38637: POP
// if i = 1 then
38638: LD_VAR 0 8
38642: PUSH
38643: LD_INT 1
38645: EQUAL
38646: IFFALSE 38757
// begin tmp := [ ] ;
38648: LD_ADDR_VAR 0 19
38652: PUSH
38653: EMPTY
38654: ST_TO_ADDR
// for j in f do
38655: LD_ADDR_VAR 0 9
38659: PUSH
38660: LD_VAR 0 12
38664: PUSH
38665: FOR_IN
38666: IFFALSE 38739
// if GetBType ( j ) = b_bunker then
38668: LD_VAR 0 9
38672: PPUSH
38673: CALL_OW 266
38677: PUSH
38678: LD_INT 32
38680: EQUAL
38681: IFFALSE 38708
// tmp := Insert ( tmp , 1 , j ) else
38683: LD_ADDR_VAR 0 19
38687: PUSH
38688: LD_VAR 0 19
38692: PPUSH
38693: LD_INT 1
38695: PPUSH
38696: LD_VAR 0 9
38700: PPUSH
38701: CALL_OW 2
38705: ST_TO_ADDR
38706: GO 38737
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38708: LD_ADDR_VAR 0 19
38712: PUSH
38713: LD_VAR 0 19
38717: PPUSH
38718: LD_VAR 0 19
38722: PUSH
38723: LD_INT 1
38725: PLUS
38726: PPUSH
38727: LD_VAR 0 9
38731: PPUSH
38732: CALL_OW 2
38736: ST_TO_ADDR
38737: GO 38665
38739: POP
38740: POP
// if tmp then
38741: LD_VAR 0 19
38745: IFFALSE 38757
// f := tmp ;
38747: LD_ADDR_VAR 0 12
38751: PUSH
38752: LD_VAR 0 19
38756: ST_TO_ADDR
// end ; x := personel [ i ] ;
38757: LD_ADDR_VAR 0 13
38761: PUSH
38762: LD_VAR 0 6
38766: PUSH
38767: LD_VAR 0 8
38771: ARRAY
38772: ST_TO_ADDR
// if x = - 1 then
38773: LD_VAR 0 13
38777: PUSH
38778: LD_INT 1
38780: NEG
38781: EQUAL
38782: IFFALSE 38991
// begin for j in f do
38784: LD_ADDR_VAR 0 9
38788: PUSH
38789: LD_VAR 0 12
38793: PUSH
38794: FOR_IN
38795: IFFALSE 38987
// repeat InitHc ;
38797: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38801: LD_VAR 0 9
38805: PPUSH
38806: CALL_OW 266
38810: PUSH
38811: LD_INT 5
38813: EQUAL
38814: IFFALSE 38884
// begin if UnitsInside ( j ) < 3 then
38816: LD_VAR 0 9
38820: PPUSH
38821: CALL_OW 313
38825: PUSH
38826: LD_INT 3
38828: LESS
38829: IFFALSE 38865
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38831: LD_INT 0
38833: PPUSH
38834: LD_INT 5
38836: PUSH
38837: LD_INT 8
38839: PUSH
38840: LD_INT 9
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: LIST
38847: PUSH
38848: LD_VAR 0 17
38852: ARRAY
38853: PPUSH
38854: LD_VAR 0 4
38858: PPUSH
38859: CALL_OW 380
38863: GO 38882
// PrepareHuman ( false , i , skill ) ;
38865: LD_INT 0
38867: PPUSH
38868: LD_VAR 0 8
38872: PPUSH
38873: LD_VAR 0 4
38877: PPUSH
38878: CALL_OW 380
// end else
38882: GO 38901
// PrepareHuman ( false , i , skill ) ;
38884: LD_INT 0
38886: PPUSH
38887: LD_VAR 0 8
38891: PPUSH
38892: LD_VAR 0 4
38896: PPUSH
38897: CALL_OW 380
// un := CreateHuman ;
38901: LD_ADDR_VAR 0 14
38905: PUSH
38906: CALL_OW 44
38910: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38911: LD_ADDR_VAR 0 7
38915: PUSH
38916: LD_VAR 0 7
38920: PPUSH
38921: LD_INT 1
38923: PPUSH
38924: LD_VAR 0 14
38928: PPUSH
38929: CALL_OW 2
38933: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38934: LD_VAR 0 14
38938: PPUSH
38939: LD_VAR 0 9
38943: PPUSH
38944: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38948: LD_VAR 0 9
38952: PPUSH
38953: CALL_OW 313
38957: PUSH
38958: LD_INT 6
38960: EQUAL
38961: PUSH
38962: LD_VAR 0 9
38966: PPUSH
38967: CALL_OW 266
38971: PUSH
38972: LD_INT 32
38974: PUSH
38975: LD_INT 31
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: IN
38982: OR
38983: IFFALSE 38797
38985: GO 38794
38987: POP
38988: POP
// end else
38989: GO 39371
// for j = 1 to x do
38991: LD_ADDR_VAR 0 9
38995: PUSH
38996: DOUBLE
38997: LD_INT 1
38999: DEC
39000: ST_TO_ADDR
39001: LD_VAR 0 13
39005: PUSH
39006: FOR_TO
39007: IFFALSE 39369
// begin InitHc ;
39009: CALL_OW 19
// if not f then
39013: LD_VAR 0 12
39017: NOT
39018: IFFALSE 39107
// begin PrepareHuman ( false , i , skill ) ;
39020: LD_INT 0
39022: PPUSH
39023: LD_VAR 0 8
39027: PPUSH
39028: LD_VAR 0 4
39032: PPUSH
39033: CALL_OW 380
// un := CreateHuman ;
39037: LD_ADDR_VAR 0 14
39041: PUSH
39042: CALL_OW 44
39046: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39047: LD_ADDR_VAR 0 7
39051: PUSH
39052: LD_VAR 0 7
39056: PPUSH
39057: LD_INT 1
39059: PPUSH
39060: LD_VAR 0 14
39064: PPUSH
39065: CALL_OW 2
39069: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39070: LD_VAR 0 14
39074: PPUSH
39075: LD_VAR 0 1
39079: PPUSH
39080: CALL_OW 250
39084: PPUSH
39085: LD_VAR 0 1
39089: PPUSH
39090: CALL_OW 251
39094: PPUSH
39095: LD_INT 10
39097: PPUSH
39098: LD_INT 0
39100: PPUSH
39101: CALL_OW 50
// continue ;
39105: GO 39006
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39107: LD_VAR 0 12
39111: PUSH
39112: LD_INT 1
39114: ARRAY
39115: PPUSH
39116: CALL_OW 313
39120: PUSH
39121: LD_VAR 0 12
39125: PUSH
39126: LD_INT 1
39128: ARRAY
39129: PPUSH
39130: CALL_OW 266
39134: PUSH
39135: LD_INT 32
39137: PUSH
39138: LD_INT 31
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: IN
39145: AND
39146: PUSH
39147: LD_VAR 0 12
39151: PUSH
39152: LD_INT 1
39154: ARRAY
39155: PPUSH
39156: CALL_OW 313
39160: PUSH
39161: LD_INT 6
39163: EQUAL
39164: OR
39165: IFFALSE 39185
// f := Delete ( f , 1 ) ;
39167: LD_ADDR_VAR 0 12
39171: PUSH
39172: LD_VAR 0 12
39176: PPUSH
39177: LD_INT 1
39179: PPUSH
39180: CALL_OW 3
39184: ST_TO_ADDR
// if not f then
39185: LD_VAR 0 12
39189: NOT
39190: IFFALSE 39208
// begin x := x + 2 ;
39192: LD_ADDR_VAR 0 13
39196: PUSH
39197: LD_VAR 0 13
39201: PUSH
39202: LD_INT 2
39204: PLUS
39205: ST_TO_ADDR
// continue ;
39206: GO 39006
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39208: LD_VAR 0 12
39212: PUSH
39213: LD_INT 1
39215: ARRAY
39216: PPUSH
39217: CALL_OW 266
39221: PUSH
39222: LD_INT 5
39224: EQUAL
39225: IFFALSE 39299
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39227: LD_VAR 0 12
39231: PUSH
39232: LD_INT 1
39234: ARRAY
39235: PPUSH
39236: CALL_OW 313
39240: PUSH
39241: LD_INT 3
39243: LESS
39244: IFFALSE 39280
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39246: LD_INT 0
39248: PPUSH
39249: LD_INT 5
39251: PUSH
39252: LD_INT 8
39254: PUSH
39255: LD_INT 9
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: LIST
39262: PUSH
39263: LD_VAR 0 17
39267: ARRAY
39268: PPUSH
39269: LD_VAR 0 4
39273: PPUSH
39274: CALL_OW 380
39278: GO 39297
// PrepareHuman ( false , i , skill ) ;
39280: LD_INT 0
39282: PPUSH
39283: LD_VAR 0 8
39287: PPUSH
39288: LD_VAR 0 4
39292: PPUSH
39293: CALL_OW 380
// end else
39297: GO 39316
// PrepareHuman ( false , i , skill ) ;
39299: LD_INT 0
39301: PPUSH
39302: LD_VAR 0 8
39306: PPUSH
39307: LD_VAR 0 4
39311: PPUSH
39312: CALL_OW 380
// un := CreateHuman ;
39316: LD_ADDR_VAR 0 14
39320: PUSH
39321: CALL_OW 44
39325: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39326: LD_ADDR_VAR 0 7
39330: PUSH
39331: LD_VAR 0 7
39335: PPUSH
39336: LD_INT 1
39338: PPUSH
39339: LD_VAR 0 14
39343: PPUSH
39344: CALL_OW 2
39348: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39349: LD_VAR 0 14
39353: PPUSH
39354: LD_VAR 0 12
39358: PUSH
39359: LD_INT 1
39361: ARRAY
39362: PPUSH
39363: CALL_OW 52
// end ;
39367: GO 39006
39369: POP
39370: POP
// end ;
39371: GO 38308
39373: POP
39374: POP
// result := result ^ buildings ;
39375: LD_ADDR_VAR 0 7
39379: PUSH
39380: LD_VAR 0 7
39384: PUSH
39385: LD_VAR 0 18
39389: ADD
39390: ST_TO_ADDR
// end else
39391: GO 39534
// begin for i = 1 to personel do
39393: LD_ADDR_VAR 0 8
39397: PUSH
39398: DOUBLE
39399: LD_INT 1
39401: DEC
39402: ST_TO_ADDR
39403: LD_VAR 0 6
39407: PUSH
39408: FOR_TO
39409: IFFALSE 39532
// begin if i > 4 then
39411: LD_VAR 0 8
39415: PUSH
39416: LD_INT 4
39418: GREATER
39419: IFFALSE 39423
// break ;
39421: GO 39532
// x := personel [ i ] ;
39423: LD_ADDR_VAR 0 13
39427: PUSH
39428: LD_VAR 0 6
39432: PUSH
39433: LD_VAR 0 8
39437: ARRAY
39438: ST_TO_ADDR
// if x = - 1 then
39439: LD_VAR 0 13
39443: PUSH
39444: LD_INT 1
39446: NEG
39447: EQUAL
39448: IFFALSE 39452
// continue ;
39450: GO 39408
// PrepareHuman ( false , i , skill ) ;
39452: LD_INT 0
39454: PPUSH
39455: LD_VAR 0 8
39459: PPUSH
39460: LD_VAR 0 4
39464: PPUSH
39465: CALL_OW 380
// un := CreateHuman ;
39469: LD_ADDR_VAR 0 14
39473: PUSH
39474: CALL_OW 44
39478: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39479: LD_VAR 0 14
39483: PPUSH
39484: LD_VAR 0 1
39488: PPUSH
39489: CALL_OW 250
39493: PPUSH
39494: LD_VAR 0 1
39498: PPUSH
39499: CALL_OW 251
39503: PPUSH
39504: LD_INT 10
39506: PPUSH
39507: LD_INT 0
39509: PPUSH
39510: CALL_OW 50
// result := result ^ un ;
39514: LD_ADDR_VAR 0 7
39518: PUSH
39519: LD_VAR 0 7
39523: PUSH
39524: LD_VAR 0 14
39528: ADD
39529: ST_TO_ADDR
// end ;
39530: GO 39408
39532: POP
39533: POP
// end ; end ;
39534: LD_VAR 0 7
39538: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39539: LD_INT 0
39541: PPUSH
39542: PPUSH
39543: PPUSH
39544: PPUSH
39545: PPUSH
39546: PPUSH
39547: PPUSH
39548: PPUSH
39549: PPUSH
39550: PPUSH
39551: PPUSH
39552: PPUSH
39553: PPUSH
39554: PPUSH
39555: PPUSH
39556: PPUSH
// result := false ;
39557: LD_ADDR_VAR 0 3
39561: PUSH
39562: LD_INT 0
39564: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39565: LD_VAR 0 1
39569: NOT
39570: PUSH
39571: LD_VAR 0 1
39575: PPUSH
39576: CALL_OW 266
39580: PUSH
39581: LD_INT 32
39583: PUSH
39584: LD_INT 33
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: IN
39591: NOT
39592: OR
39593: IFFALSE 39597
// exit ;
39595: GO 40706
// nat := GetNation ( tower ) ;
39597: LD_ADDR_VAR 0 12
39601: PUSH
39602: LD_VAR 0 1
39606: PPUSH
39607: CALL_OW 248
39611: ST_TO_ADDR
// side := GetSide ( tower ) ;
39612: LD_ADDR_VAR 0 16
39616: PUSH
39617: LD_VAR 0 1
39621: PPUSH
39622: CALL_OW 255
39626: ST_TO_ADDR
// x := GetX ( tower ) ;
39627: LD_ADDR_VAR 0 10
39631: PUSH
39632: LD_VAR 0 1
39636: PPUSH
39637: CALL_OW 250
39641: ST_TO_ADDR
// y := GetY ( tower ) ;
39642: LD_ADDR_VAR 0 11
39646: PUSH
39647: LD_VAR 0 1
39651: PPUSH
39652: CALL_OW 251
39656: ST_TO_ADDR
// if not x or not y then
39657: LD_VAR 0 10
39661: NOT
39662: PUSH
39663: LD_VAR 0 11
39667: NOT
39668: OR
39669: IFFALSE 39673
// exit ;
39671: GO 40706
// weapon := 0 ;
39673: LD_ADDR_VAR 0 18
39677: PUSH
39678: LD_INT 0
39680: ST_TO_ADDR
// fac_list := [ ] ;
39681: LD_ADDR_VAR 0 17
39685: PUSH
39686: EMPTY
39687: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39688: LD_ADDR_VAR 0 6
39692: PUSH
39693: LD_VAR 0 1
39697: PPUSH
39698: CALL_OW 274
39702: PPUSH
39703: LD_VAR 0 2
39707: PPUSH
39708: LD_INT 0
39710: PPUSH
39711: CALL 37277 0 3
39715: PPUSH
39716: LD_INT 30
39718: PUSH
39719: LD_INT 3
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PPUSH
39726: CALL_OW 72
39730: ST_TO_ADDR
// if not factories then
39731: LD_VAR 0 6
39735: NOT
39736: IFFALSE 39740
// exit ;
39738: GO 40706
// for i in factories do
39740: LD_ADDR_VAR 0 8
39744: PUSH
39745: LD_VAR 0 6
39749: PUSH
39750: FOR_IN
39751: IFFALSE 39776
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39753: LD_ADDR_VAR 0 17
39757: PUSH
39758: LD_VAR 0 17
39762: PUSH
39763: LD_VAR 0 8
39767: PPUSH
39768: CALL_OW 478
39772: UNION
39773: ST_TO_ADDR
39774: GO 39750
39776: POP
39777: POP
// if not fac_list then
39778: LD_VAR 0 17
39782: NOT
39783: IFFALSE 39787
// exit ;
39785: GO 40706
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39787: LD_ADDR_VAR 0 5
39791: PUSH
39792: LD_INT 4
39794: PUSH
39795: LD_INT 5
39797: PUSH
39798: LD_INT 9
39800: PUSH
39801: LD_INT 10
39803: PUSH
39804: LD_INT 6
39806: PUSH
39807: LD_INT 7
39809: PUSH
39810: LD_INT 11
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 27
39824: PUSH
39825: LD_INT 28
39827: PUSH
39828: LD_INT 26
39830: PUSH
39831: LD_INT 30
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 43
39842: PUSH
39843: LD_INT 44
39845: PUSH
39846: LD_INT 46
39848: PUSH
39849: LD_INT 45
39851: PUSH
39852: LD_INT 47
39854: PUSH
39855: LD_INT 49
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: LIST
39870: PUSH
39871: LD_VAR 0 12
39875: ARRAY
39876: ST_TO_ADDR
// list := list isect fac_list ;
39877: LD_ADDR_VAR 0 5
39881: PUSH
39882: LD_VAR 0 5
39886: PUSH
39887: LD_VAR 0 17
39891: ISECT
39892: ST_TO_ADDR
// if not list then
39893: LD_VAR 0 5
39897: NOT
39898: IFFALSE 39902
// exit ;
39900: GO 40706
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39902: LD_VAR 0 12
39906: PUSH
39907: LD_INT 3
39909: EQUAL
39910: PUSH
39911: LD_INT 49
39913: PUSH
39914: LD_VAR 0 5
39918: IN
39919: AND
39920: PUSH
39921: LD_INT 31
39923: PPUSH
39924: LD_VAR 0 16
39928: PPUSH
39929: CALL_OW 321
39933: PUSH
39934: LD_INT 2
39936: EQUAL
39937: AND
39938: IFFALSE 39998
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39940: LD_INT 22
39942: PUSH
39943: LD_VAR 0 16
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 35
39954: PUSH
39955: LD_INT 49
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 91
39964: PUSH
39965: LD_VAR 0 1
39969: PUSH
39970: LD_INT 10
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: LIST
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: LIST
39982: PPUSH
39983: CALL_OW 69
39987: NOT
39988: IFFALSE 39998
// weapon := ru_time_lapser ;
39990: LD_ADDR_VAR 0 18
39994: PUSH
39995: LD_INT 49
39997: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39998: LD_VAR 0 12
40002: PUSH
40003: LD_INT 1
40005: PUSH
40006: LD_INT 2
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: IN
40013: PUSH
40014: LD_INT 11
40016: PUSH
40017: LD_VAR 0 5
40021: IN
40022: PUSH
40023: LD_INT 30
40025: PUSH
40026: LD_VAR 0 5
40030: IN
40031: OR
40032: AND
40033: PUSH
40034: LD_INT 6
40036: PPUSH
40037: LD_VAR 0 16
40041: PPUSH
40042: CALL_OW 321
40046: PUSH
40047: LD_INT 2
40049: EQUAL
40050: AND
40051: IFFALSE 40216
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40053: LD_INT 22
40055: PUSH
40056: LD_VAR 0 16
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 2
40067: PUSH
40068: LD_INT 35
40070: PUSH
40071: LD_INT 11
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 35
40080: PUSH
40081: LD_INT 30
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 91
40095: PUSH
40096: LD_VAR 0 1
40100: PUSH
40101: LD_INT 18
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: LIST
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: LIST
40113: PPUSH
40114: CALL_OW 69
40118: NOT
40119: PUSH
40120: LD_INT 22
40122: PUSH
40123: LD_VAR 0 16
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 2
40134: PUSH
40135: LD_INT 30
40137: PUSH
40138: LD_INT 32
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 30
40147: PUSH
40148: LD_INT 33
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 91
40162: PUSH
40163: LD_VAR 0 1
40167: PUSH
40168: LD_INT 12
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: LIST
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: LIST
40180: PUSH
40181: EMPTY
40182: LIST
40183: PPUSH
40184: CALL_OW 69
40188: PUSH
40189: LD_INT 2
40191: GREATER
40192: AND
40193: IFFALSE 40216
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40195: LD_ADDR_VAR 0 18
40199: PUSH
40200: LD_INT 11
40202: PUSH
40203: LD_INT 30
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_VAR 0 12
40214: ARRAY
40215: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40216: LD_VAR 0 18
40220: NOT
40221: PUSH
40222: LD_INT 40
40224: PPUSH
40225: LD_VAR 0 16
40229: PPUSH
40230: CALL_OW 321
40234: PUSH
40235: LD_INT 2
40237: EQUAL
40238: AND
40239: PUSH
40240: LD_INT 7
40242: PUSH
40243: LD_VAR 0 5
40247: IN
40248: PUSH
40249: LD_INT 28
40251: PUSH
40252: LD_VAR 0 5
40256: IN
40257: OR
40258: PUSH
40259: LD_INT 45
40261: PUSH
40262: LD_VAR 0 5
40266: IN
40267: OR
40268: AND
40269: IFFALSE 40523
// begin hex := GetHexInfo ( x , y ) ;
40271: LD_ADDR_VAR 0 4
40275: PUSH
40276: LD_VAR 0 10
40280: PPUSH
40281: LD_VAR 0 11
40285: PPUSH
40286: CALL_OW 546
40290: ST_TO_ADDR
// if hex [ 1 ] then
40291: LD_VAR 0 4
40295: PUSH
40296: LD_INT 1
40298: ARRAY
40299: IFFALSE 40303
// exit ;
40301: GO 40706
// height := hex [ 2 ] ;
40303: LD_ADDR_VAR 0 15
40307: PUSH
40308: LD_VAR 0 4
40312: PUSH
40313: LD_INT 2
40315: ARRAY
40316: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40317: LD_ADDR_VAR 0 14
40321: PUSH
40322: LD_INT 0
40324: PUSH
40325: LD_INT 2
40327: PUSH
40328: LD_INT 3
40330: PUSH
40331: LD_INT 5
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: ST_TO_ADDR
// for i in tmp do
40340: LD_ADDR_VAR 0 8
40344: PUSH
40345: LD_VAR 0 14
40349: PUSH
40350: FOR_IN
40351: IFFALSE 40521
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40353: LD_ADDR_VAR 0 9
40357: PUSH
40358: LD_VAR 0 10
40362: PPUSH
40363: LD_VAR 0 8
40367: PPUSH
40368: LD_INT 5
40370: PPUSH
40371: CALL_OW 272
40375: PUSH
40376: LD_VAR 0 11
40380: PPUSH
40381: LD_VAR 0 8
40385: PPUSH
40386: LD_INT 5
40388: PPUSH
40389: CALL_OW 273
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40398: LD_VAR 0 9
40402: PUSH
40403: LD_INT 1
40405: ARRAY
40406: PPUSH
40407: LD_VAR 0 9
40411: PUSH
40412: LD_INT 2
40414: ARRAY
40415: PPUSH
40416: CALL_OW 488
40420: IFFALSE 40519
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40422: LD_ADDR_VAR 0 4
40426: PUSH
40427: LD_VAR 0 9
40431: PUSH
40432: LD_INT 1
40434: ARRAY
40435: PPUSH
40436: LD_VAR 0 9
40440: PUSH
40441: LD_INT 2
40443: ARRAY
40444: PPUSH
40445: CALL_OW 546
40449: ST_TO_ADDR
// if hex [ 1 ] then
40450: LD_VAR 0 4
40454: PUSH
40455: LD_INT 1
40457: ARRAY
40458: IFFALSE 40462
// continue ;
40460: GO 40350
// h := hex [ 2 ] ;
40462: LD_ADDR_VAR 0 13
40466: PUSH
40467: LD_VAR 0 4
40471: PUSH
40472: LD_INT 2
40474: ARRAY
40475: ST_TO_ADDR
// if h + 7 < height then
40476: LD_VAR 0 13
40480: PUSH
40481: LD_INT 7
40483: PLUS
40484: PUSH
40485: LD_VAR 0 15
40489: LESS
40490: IFFALSE 40519
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40492: LD_ADDR_VAR 0 18
40496: PUSH
40497: LD_INT 7
40499: PUSH
40500: LD_INT 28
40502: PUSH
40503: LD_INT 45
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: LIST
40510: PUSH
40511: LD_VAR 0 12
40515: ARRAY
40516: ST_TO_ADDR
// break ;
40517: GO 40521
// end ; end ; end ;
40519: GO 40350
40521: POP
40522: POP
// end ; if not weapon then
40523: LD_VAR 0 18
40527: NOT
40528: IFFALSE 40588
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40530: LD_ADDR_VAR 0 5
40534: PUSH
40535: LD_VAR 0 5
40539: PUSH
40540: LD_INT 11
40542: PUSH
40543: LD_INT 30
40545: PUSH
40546: LD_INT 49
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: LIST
40553: DIFF
40554: ST_TO_ADDR
// if not list then
40555: LD_VAR 0 5
40559: NOT
40560: IFFALSE 40564
// exit ;
40562: GO 40706
// weapon := list [ rand ( 1 , list ) ] ;
40564: LD_ADDR_VAR 0 18
40568: PUSH
40569: LD_VAR 0 5
40573: PUSH
40574: LD_INT 1
40576: PPUSH
40577: LD_VAR 0 5
40581: PPUSH
40582: CALL_OW 12
40586: ARRAY
40587: ST_TO_ADDR
// end ; if weapon then
40588: LD_VAR 0 18
40592: IFFALSE 40706
// begin tmp := CostOfWeapon ( weapon ) ;
40594: LD_ADDR_VAR 0 14
40598: PUSH
40599: LD_VAR 0 18
40603: PPUSH
40604: CALL_OW 451
40608: ST_TO_ADDR
// j := GetBase ( tower ) ;
40609: LD_ADDR_VAR 0 9
40613: PUSH
40614: LD_VAR 0 1
40618: PPUSH
40619: CALL_OW 274
40623: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40624: LD_VAR 0 9
40628: PPUSH
40629: LD_INT 1
40631: PPUSH
40632: CALL_OW 275
40636: PUSH
40637: LD_VAR 0 14
40641: PUSH
40642: LD_INT 1
40644: ARRAY
40645: GREATEREQUAL
40646: PUSH
40647: LD_VAR 0 9
40651: PPUSH
40652: LD_INT 2
40654: PPUSH
40655: CALL_OW 275
40659: PUSH
40660: LD_VAR 0 14
40664: PUSH
40665: LD_INT 2
40667: ARRAY
40668: GREATEREQUAL
40669: AND
40670: PUSH
40671: LD_VAR 0 9
40675: PPUSH
40676: LD_INT 3
40678: PPUSH
40679: CALL_OW 275
40683: PUSH
40684: LD_VAR 0 14
40688: PUSH
40689: LD_INT 3
40691: ARRAY
40692: GREATEREQUAL
40693: AND
40694: IFFALSE 40706
// result := weapon ;
40696: LD_ADDR_VAR 0 3
40700: PUSH
40701: LD_VAR 0 18
40705: ST_TO_ADDR
// end ; end ;
40706: LD_VAR 0 3
40710: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40711: LD_INT 0
40713: PPUSH
40714: PPUSH
// result := true ;
40715: LD_ADDR_VAR 0 3
40719: PUSH
40720: LD_INT 1
40722: ST_TO_ADDR
// if array1 = array2 then
40723: LD_VAR 0 1
40727: PUSH
40728: LD_VAR 0 2
40732: EQUAL
40733: IFFALSE 40793
// begin for i = 1 to array1 do
40735: LD_ADDR_VAR 0 4
40739: PUSH
40740: DOUBLE
40741: LD_INT 1
40743: DEC
40744: ST_TO_ADDR
40745: LD_VAR 0 1
40749: PUSH
40750: FOR_TO
40751: IFFALSE 40789
// if array1 [ i ] <> array2 [ i ] then
40753: LD_VAR 0 1
40757: PUSH
40758: LD_VAR 0 4
40762: ARRAY
40763: PUSH
40764: LD_VAR 0 2
40768: PUSH
40769: LD_VAR 0 4
40773: ARRAY
40774: NONEQUAL
40775: IFFALSE 40787
// begin result := false ;
40777: LD_ADDR_VAR 0 3
40781: PUSH
40782: LD_INT 0
40784: ST_TO_ADDR
// break ;
40785: GO 40789
// end ;
40787: GO 40750
40789: POP
40790: POP
// end else
40791: GO 40801
// result := false ;
40793: LD_ADDR_VAR 0 3
40797: PUSH
40798: LD_INT 0
40800: ST_TO_ADDR
// end ;
40801: LD_VAR 0 3
40805: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40806: LD_INT 0
40808: PPUSH
40809: PPUSH
// if not array1 or not array2 then
40810: LD_VAR 0 1
40814: NOT
40815: PUSH
40816: LD_VAR 0 2
40820: NOT
40821: OR
40822: IFFALSE 40826
// exit ;
40824: GO 40890
// result := true ;
40826: LD_ADDR_VAR 0 3
40830: PUSH
40831: LD_INT 1
40833: ST_TO_ADDR
// for i = 1 to array1 do
40834: LD_ADDR_VAR 0 4
40838: PUSH
40839: DOUBLE
40840: LD_INT 1
40842: DEC
40843: ST_TO_ADDR
40844: LD_VAR 0 1
40848: PUSH
40849: FOR_TO
40850: IFFALSE 40888
// if array1 [ i ] <> array2 [ i ] then
40852: LD_VAR 0 1
40856: PUSH
40857: LD_VAR 0 4
40861: ARRAY
40862: PUSH
40863: LD_VAR 0 2
40867: PUSH
40868: LD_VAR 0 4
40872: ARRAY
40873: NONEQUAL
40874: IFFALSE 40886
// begin result := false ;
40876: LD_ADDR_VAR 0 3
40880: PUSH
40881: LD_INT 0
40883: ST_TO_ADDR
// break ;
40884: GO 40888
// end ;
40886: GO 40849
40888: POP
40889: POP
// end ;
40890: LD_VAR 0 3
40894: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40895: LD_INT 0
40897: PPUSH
40898: PPUSH
40899: PPUSH
// pom := GetBase ( fac ) ;
40900: LD_ADDR_VAR 0 5
40904: PUSH
40905: LD_VAR 0 1
40909: PPUSH
40910: CALL_OW 274
40914: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40915: LD_ADDR_VAR 0 4
40919: PUSH
40920: LD_VAR 0 2
40924: PUSH
40925: LD_INT 1
40927: ARRAY
40928: PPUSH
40929: LD_VAR 0 2
40933: PUSH
40934: LD_INT 2
40936: ARRAY
40937: PPUSH
40938: LD_VAR 0 2
40942: PUSH
40943: LD_INT 3
40945: ARRAY
40946: PPUSH
40947: LD_VAR 0 2
40951: PUSH
40952: LD_INT 4
40954: ARRAY
40955: PPUSH
40956: CALL_OW 449
40960: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40961: LD_ADDR_VAR 0 3
40965: PUSH
40966: LD_VAR 0 5
40970: PPUSH
40971: LD_INT 1
40973: PPUSH
40974: CALL_OW 275
40978: PUSH
40979: LD_VAR 0 4
40983: PUSH
40984: LD_INT 1
40986: ARRAY
40987: GREATEREQUAL
40988: PUSH
40989: LD_VAR 0 5
40993: PPUSH
40994: LD_INT 2
40996: PPUSH
40997: CALL_OW 275
41001: PUSH
41002: LD_VAR 0 4
41006: PUSH
41007: LD_INT 2
41009: ARRAY
41010: GREATEREQUAL
41011: AND
41012: PUSH
41013: LD_VAR 0 5
41017: PPUSH
41018: LD_INT 3
41020: PPUSH
41021: CALL_OW 275
41025: PUSH
41026: LD_VAR 0 4
41030: PUSH
41031: LD_INT 3
41033: ARRAY
41034: GREATEREQUAL
41035: AND
41036: ST_TO_ADDR
// end ;
41037: LD_VAR 0 3
41041: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41042: LD_INT 0
41044: PPUSH
41045: PPUSH
41046: PPUSH
41047: PPUSH
// pom := GetBase ( building ) ;
41048: LD_ADDR_VAR 0 3
41052: PUSH
41053: LD_VAR 0 1
41057: PPUSH
41058: CALL_OW 274
41062: ST_TO_ADDR
// if not pom then
41063: LD_VAR 0 3
41067: NOT
41068: IFFALSE 41072
// exit ;
41070: GO 41242
// btype := GetBType ( building ) ;
41072: LD_ADDR_VAR 0 5
41076: PUSH
41077: LD_VAR 0 1
41081: PPUSH
41082: CALL_OW 266
41086: ST_TO_ADDR
// if btype = b_armoury then
41087: LD_VAR 0 5
41091: PUSH
41092: LD_INT 4
41094: EQUAL
41095: IFFALSE 41105
// btype := b_barracks ;
41097: LD_ADDR_VAR 0 5
41101: PUSH
41102: LD_INT 5
41104: ST_TO_ADDR
// if btype = b_depot then
41105: LD_VAR 0 5
41109: PUSH
41110: LD_INT 0
41112: EQUAL
41113: IFFALSE 41123
// btype := b_warehouse ;
41115: LD_ADDR_VAR 0 5
41119: PUSH
41120: LD_INT 1
41122: ST_TO_ADDR
// if btype = b_workshop then
41123: LD_VAR 0 5
41127: PUSH
41128: LD_INT 2
41130: EQUAL
41131: IFFALSE 41141
// btype := b_factory ;
41133: LD_ADDR_VAR 0 5
41137: PUSH
41138: LD_INT 3
41140: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41141: LD_ADDR_VAR 0 4
41145: PUSH
41146: LD_VAR 0 5
41150: PPUSH
41151: LD_VAR 0 1
41155: PPUSH
41156: CALL_OW 248
41160: PPUSH
41161: CALL_OW 450
41165: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41166: LD_ADDR_VAR 0 2
41170: PUSH
41171: LD_VAR 0 3
41175: PPUSH
41176: LD_INT 1
41178: PPUSH
41179: CALL_OW 275
41183: PUSH
41184: LD_VAR 0 4
41188: PUSH
41189: LD_INT 1
41191: ARRAY
41192: GREATEREQUAL
41193: PUSH
41194: LD_VAR 0 3
41198: PPUSH
41199: LD_INT 2
41201: PPUSH
41202: CALL_OW 275
41206: PUSH
41207: LD_VAR 0 4
41211: PUSH
41212: LD_INT 2
41214: ARRAY
41215: GREATEREQUAL
41216: AND
41217: PUSH
41218: LD_VAR 0 3
41222: PPUSH
41223: LD_INT 3
41225: PPUSH
41226: CALL_OW 275
41230: PUSH
41231: LD_VAR 0 4
41235: PUSH
41236: LD_INT 3
41238: ARRAY
41239: GREATEREQUAL
41240: AND
41241: ST_TO_ADDR
// end ;
41242: LD_VAR 0 2
41246: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41247: LD_INT 0
41249: PPUSH
41250: PPUSH
41251: PPUSH
// pom := GetBase ( building ) ;
41252: LD_ADDR_VAR 0 4
41256: PUSH
41257: LD_VAR 0 1
41261: PPUSH
41262: CALL_OW 274
41266: ST_TO_ADDR
// if not pom then
41267: LD_VAR 0 4
41271: NOT
41272: IFFALSE 41276
// exit ;
41274: GO 41377
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41276: LD_ADDR_VAR 0 5
41280: PUSH
41281: LD_VAR 0 2
41285: PPUSH
41286: LD_VAR 0 1
41290: PPUSH
41291: CALL_OW 248
41295: PPUSH
41296: CALL_OW 450
41300: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41301: LD_ADDR_VAR 0 3
41305: PUSH
41306: LD_VAR 0 4
41310: PPUSH
41311: LD_INT 1
41313: PPUSH
41314: CALL_OW 275
41318: PUSH
41319: LD_VAR 0 5
41323: PUSH
41324: LD_INT 1
41326: ARRAY
41327: GREATEREQUAL
41328: PUSH
41329: LD_VAR 0 4
41333: PPUSH
41334: LD_INT 2
41336: PPUSH
41337: CALL_OW 275
41341: PUSH
41342: LD_VAR 0 5
41346: PUSH
41347: LD_INT 2
41349: ARRAY
41350: GREATEREQUAL
41351: AND
41352: PUSH
41353: LD_VAR 0 4
41357: PPUSH
41358: LD_INT 3
41360: PPUSH
41361: CALL_OW 275
41365: PUSH
41366: LD_VAR 0 5
41370: PUSH
41371: LD_INT 3
41373: ARRAY
41374: GREATEREQUAL
41375: AND
41376: ST_TO_ADDR
// end ;
41377: LD_VAR 0 3
41381: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41382: LD_INT 0
41384: PPUSH
41385: PPUSH
41386: PPUSH
41387: PPUSH
41388: PPUSH
41389: PPUSH
41390: PPUSH
41391: PPUSH
41392: PPUSH
41393: PPUSH
41394: PPUSH
// result := false ;
41395: LD_ADDR_VAR 0 8
41399: PUSH
41400: LD_INT 0
41402: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41403: LD_VAR 0 5
41407: NOT
41408: PUSH
41409: LD_VAR 0 1
41413: NOT
41414: OR
41415: PUSH
41416: LD_VAR 0 2
41420: NOT
41421: OR
41422: PUSH
41423: LD_VAR 0 3
41427: NOT
41428: OR
41429: IFFALSE 41433
// exit ;
41431: GO 42247
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41433: LD_ADDR_VAR 0 14
41437: PUSH
41438: LD_VAR 0 1
41442: PPUSH
41443: LD_VAR 0 2
41447: PPUSH
41448: LD_VAR 0 3
41452: PPUSH
41453: LD_VAR 0 4
41457: PPUSH
41458: LD_VAR 0 5
41462: PUSH
41463: LD_INT 1
41465: ARRAY
41466: PPUSH
41467: CALL_OW 248
41471: PPUSH
41472: LD_INT 0
41474: PPUSH
41475: CALL 43500 0 6
41479: ST_TO_ADDR
// if not hexes then
41480: LD_VAR 0 14
41484: NOT
41485: IFFALSE 41489
// exit ;
41487: GO 42247
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41489: LD_ADDR_VAR 0 17
41493: PUSH
41494: LD_VAR 0 5
41498: PPUSH
41499: LD_INT 22
41501: PUSH
41502: LD_VAR 0 13
41506: PPUSH
41507: CALL_OW 255
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 2
41518: PUSH
41519: LD_INT 30
41521: PUSH
41522: LD_INT 0
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 30
41531: PUSH
41532: LD_INT 1
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: LIST
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PPUSH
41548: CALL_OW 72
41552: ST_TO_ADDR
// for i = 1 to hexes do
41553: LD_ADDR_VAR 0 9
41557: PUSH
41558: DOUBLE
41559: LD_INT 1
41561: DEC
41562: ST_TO_ADDR
41563: LD_VAR 0 14
41567: PUSH
41568: FOR_TO
41569: IFFALSE 42245
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41571: LD_ADDR_VAR 0 13
41575: PUSH
41576: LD_VAR 0 14
41580: PUSH
41581: LD_VAR 0 9
41585: ARRAY
41586: PUSH
41587: LD_INT 1
41589: ARRAY
41590: PPUSH
41591: LD_VAR 0 14
41595: PUSH
41596: LD_VAR 0 9
41600: ARRAY
41601: PUSH
41602: LD_INT 2
41604: ARRAY
41605: PPUSH
41606: CALL_OW 428
41610: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41611: LD_VAR 0 14
41615: PUSH
41616: LD_VAR 0 9
41620: ARRAY
41621: PUSH
41622: LD_INT 1
41624: ARRAY
41625: PPUSH
41626: LD_VAR 0 14
41630: PUSH
41631: LD_VAR 0 9
41635: ARRAY
41636: PUSH
41637: LD_INT 2
41639: ARRAY
41640: PPUSH
41641: CALL_OW 351
41645: PUSH
41646: LD_VAR 0 14
41650: PUSH
41651: LD_VAR 0 9
41655: ARRAY
41656: PUSH
41657: LD_INT 1
41659: ARRAY
41660: PPUSH
41661: LD_VAR 0 14
41665: PUSH
41666: LD_VAR 0 9
41670: ARRAY
41671: PUSH
41672: LD_INT 2
41674: ARRAY
41675: PPUSH
41676: CALL_OW 488
41680: NOT
41681: OR
41682: PUSH
41683: LD_VAR 0 13
41687: PPUSH
41688: CALL_OW 247
41692: PUSH
41693: LD_INT 3
41695: EQUAL
41696: OR
41697: IFFALSE 41703
// exit ;
41699: POP
41700: POP
41701: GO 42247
// if not tmp then
41703: LD_VAR 0 13
41707: NOT
41708: IFFALSE 41712
// continue ;
41710: GO 41568
// result := true ;
41712: LD_ADDR_VAR 0 8
41716: PUSH
41717: LD_INT 1
41719: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41720: LD_VAR 0 6
41724: PUSH
41725: LD_VAR 0 13
41729: PPUSH
41730: CALL_OW 247
41734: PUSH
41735: LD_INT 2
41737: EQUAL
41738: AND
41739: PUSH
41740: LD_VAR 0 13
41744: PPUSH
41745: CALL_OW 263
41749: PUSH
41750: LD_INT 1
41752: EQUAL
41753: AND
41754: IFFALSE 41918
// begin if IsDrivenBy ( tmp ) then
41756: LD_VAR 0 13
41760: PPUSH
41761: CALL_OW 311
41765: IFFALSE 41769
// continue ;
41767: GO 41568
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41769: LD_VAR 0 6
41773: PPUSH
41774: LD_INT 3
41776: PUSH
41777: LD_INT 60
41779: PUSH
41780: EMPTY
41781: LIST
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 3
41789: PUSH
41790: LD_INT 55
41792: PUSH
41793: EMPTY
41794: LIST
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PPUSH
41804: CALL_OW 72
41808: IFFALSE 41916
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41810: LD_ADDR_VAR 0 18
41814: PUSH
41815: LD_VAR 0 6
41819: PPUSH
41820: LD_INT 3
41822: PUSH
41823: LD_INT 60
41825: PUSH
41826: EMPTY
41827: LIST
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 3
41835: PUSH
41836: LD_INT 55
41838: PUSH
41839: EMPTY
41840: LIST
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PPUSH
41850: CALL_OW 72
41854: PUSH
41855: LD_INT 1
41857: ARRAY
41858: ST_TO_ADDR
// if IsInUnit ( driver ) then
41859: LD_VAR 0 18
41863: PPUSH
41864: CALL_OW 310
41868: IFFALSE 41879
// ComExit ( driver ) ;
41870: LD_VAR 0 18
41874: PPUSH
41875: CALL 67279 0 1
// AddComEnterUnit ( driver , tmp ) ;
41879: LD_VAR 0 18
41883: PPUSH
41884: LD_VAR 0 13
41888: PPUSH
41889: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41893: LD_VAR 0 18
41897: PPUSH
41898: LD_VAR 0 7
41902: PPUSH
41903: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41907: LD_VAR 0 18
41911: PPUSH
41912: CALL_OW 181
// end ; continue ;
41916: GO 41568
// end ; if not cleaners or not tmp in cleaners then
41918: LD_VAR 0 6
41922: NOT
41923: PUSH
41924: LD_VAR 0 13
41928: PUSH
41929: LD_VAR 0 6
41933: IN
41934: NOT
41935: OR
41936: IFFALSE 42243
// begin if dep then
41938: LD_VAR 0 17
41942: IFFALSE 42078
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41944: LD_ADDR_VAR 0 16
41948: PUSH
41949: LD_VAR 0 17
41953: PUSH
41954: LD_INT 1
41956: ARRAY
41957: PPUSH
41958: CALL_OW 250
41962: PPUSH
41963: LD_VAR 0 17
41967: PUSH
41968: LD_INT 1
41970: ARRAY
41971: PPUSH
41972: CALL_OW 254
41976: PPUSH
41977: LD_INT 5
41979: PPUSH
41980: CALL_OW 272
41984: PUSH
41985: LD_VAR 0 17
41989: PUSH
41990: LD_INT 1
41992: ARRAY
41993: PPUSH
41994: CALL_OW 251
41998: PPUSH
41999: LD_VAR 0 17
42003: PUSH
42004: LD_INT 1
42006: ARRAY
42007: PPUSH
42008: CALL_OW 254
42012: PPUSH
42013: LD_INT 5
42015: PPUSH
42016: CALL_OW 273
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42025: LD_VAR 0 16
42029: PUSH
42030: LD_INT 1
42032: ARRAY
42033: PPUSH
42034: LD_VAR 0 16
42038: PUSH
42039: LD_INT 2
42041: ARRAY
42042: PPUSH
42043: CALL_OW 488
42047: IFFALSE 42078
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42049: LD_VAR 0 13
42053: PPUSH
42054: LD_VAR 0 16
42058: PUSH
42059: LD_INT 1
42061: ARRAY
42062: PPUSH
42063: LD_VAR 0 16
42067: PUSH
42068: LD_INT 2
42070: ARRAY
42071: PPUSH
42072: CALL_OW 111
// continue ;
42076: GO 41568
// end ; end ; r := GetDir ( tmp ) ;
42078: LD_ADDR_VAR 0 15
42082: PUSH
42083: LD_VAR 0 13
42087: PPUSH
42088: CALL_OW 254
42092: ST_TO_ADDR
// if r = 5 then
42093: LD_VAR 0 15
42097: PUSH
42098: LD_INT 5
42100: EQUAL
42101: IFFALSE 42111
// r := 0 ;
42103: LD_ADDR_VAR 0 15
42107: PUSH
42108: LD_INT 0
42110: ST_TO_ADDR
// for j = r to 5 do
42111: LD_ADDR_VAR 0 10
42115: PUSH
42116: DOUBLE
42117: LD_VAR 0 15
42121: DEC
42122: ST_TO_ADDR
42123: LD_INT 5
42125: PUSH
42126: FOR_TO
42127: IFFALSE 42241
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42129: LD_ADDR_VAR 0 11
42133: PUSH
42134: LD_VAR 0 13
42138: PPUSH
42139: CALL_OW 250
42143: PPUSH
42144: LD_VAR 0 10
42148: PPUSH
42149: LD_INT 2
42151: PPUSH
42152: CALL_OW 272
42156: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42157: LD_ADDR_VAR 0 12
42161: PUSH
42162: LD_VAR 0 13
42166: PPUSH
42167: CALL_OW 251
42171: PPUSH
42172: LD_VAR 0 10
42176: PPUSH
42177: LD_INT 2
42179: PPUSH
42180: CALL_OW 273
42184: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42185: LD_VAR 0 11
42189: PPUSH
42190: LD_VAR 0 12
42194: PPUSH
42195: CALL_OW 488
42199: PUSH
42200: LD_VAR 0 11
42204: PPUSH
42205: LD_VAR 0 12
42209: PPUSH
42210: CALL_OW 428
42214: NOT
42215: AND
42216: IFFALSE 42239
// begin ComMoveXY ( tmp , _x , _y ) ;
42218: LD_VAR 0 13
42222: PPUSH
42223: LD_VAR 0 11
42227: PPUSH
42228: LD_VAR 0 12
42232: PPUSH
42233: CALL_OW 111
// break ;
42237: GO 42241
// end ; end ;
42239: GO 42126
42241: POP
42242: POP
// end ; end ;
42243: GO 41568
42245: POP
42246: POP
// end ;
42247: LD_VAR 0 8
42251: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42252: LD_INT 0
42254: PPUSH
// result := true ;
42255: LD_ADDR_VAR 0 3
42259: PUSH
42260: LD_INT 1
42262: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42263: LD_VAR 0 2
42267: PUSH
42268: LD_INT 24
42270: DOUBLE
42271: EQUAL
42272: IFTRUE 42282
42274: LD_INT 33
42276: DOUBLE
42277: EQUAL
42278: IFTRUE 42282
42280: GO 42307
42282: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42283: LD_ADDR_VAR 0 3
42287: PUSH
42288: LD_INT 32
42290: PPUSH
42291: LD_VAR 0 1
42295: PPUSH
42296: CALL_OW 321
42300: PUSH
42301: LD_INT 2
42303: EQUAL
42304: ST_TO_ADDR
42305: GO 42623
42307: LD_INT 20
42309: DOUBLE
42310: EQUAL
42311: IFTRUE 42315
42313: GO 42340
42315: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42316: LD_ADDR_VAR 0 3
42320: PUSH
42321: LD_INT 6
42323: PPUSH
42324: LD_VAR 0 1
42328: PPUSH
42329: CALL_OW 321
42333: PUSH
42334: LD_INT 2
42336: EQUAL
42337: ST_TO_ADDR
42338: GO 42623
42340: LD_INT 22
42342: DOUBLE
42343: EQUAL
42344: IFTRUE 42354
42346: LD_INT 36
42348: DOUBLE
42349: EQUAL
42350: IFTRUE 42354
42352: GO 42379
42354: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42355: LD_ADDR_VAR 0 3
42359: PUSH
42360: LD_INT 15
42362: PPUSH
42363: LD_VAR 0 1
42367: PPUSH
42368: CALL_OW 321
42372: PUSH
42373: LD_INT 2
42375: EQUAL
42376: ST_TO_ADDR
42377: GO 42623
42379: LD_INT 30
42381: DOUBLE
42382: EQUAL
42383: IFTRUE 42387
42385: GO 42412
42387: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42388: LD_ADDR_VAR 0 3
42392: PUSH
42393: LD_INT 20
42395: PPUSH
42396: LD_VAR 0 1
42400: PPUSH
42401: CALL_OW 321
42405: PUSH
42406: LD_INT 2
42408: EQUAL
42409: ST_TO_ADDR
42410: GO 42623
42412: LD_INT 28
42414: DOUBLE
42415: EQUAL
42416: IFTRUE 42426
42418: LD_INT 21
42420: DOUBLE
42421: EQUAL
42422: IFTRUE 42426
42424: GO 42451
42426: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42427: LD_ADDR_VAR 0 3
42431: PUSH
42432: LD_INT 21
42434: PPUSH
42435: LD_VAR 0 1
42439: PPUSH
42440: CALL_OW 321
42444: PUSH
42445: LD_INT 2
42447: EQUAL
42448: ST_TO_ADDR
42449: GO 42623
42451: LD_INT 16
42453: DOUBLE
42454: EQUAL
42455: IFTRUE 42459
42457: GO 42484
42459: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42460: LD_ADDR_VAR 0 3
42464: PUSH
42465: LD_INT 84
42467: PPUSH
42468: LD_VAR 0 1
42472: PPUSH
42473: CALL_OW 321
42477: PUSH
42478: LD_INT 2
42480: EQUAL
42481: ST_TO_ADDR
42482: GO 42623
42484: LD_INT 19
42486: DOUBLE
42487: EQUAL
42488: IFTRUE 42498
42490: LD_INT 23
42492: DOUBLE
42493: EQUAL
42494: IFTRUE 42498
42496: GO 42523
42498: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42499: LD_ADDR_VAR 0 3
42503: PUSH
42504: LD_INT 83
42506: PPUSH
42507: LD_VAR 0 1
42511: PPUSH
42512: CALL_OW 321
42516: PUSH
42517: LD_INT 2
42519: EQUAL
42520: ST_TO_ADDR
42521: GO 42623
42523: LD_INT 17
42525: DOUBLE
42526: EQUAL
42527: IFTRUE 42531
42529: GO 42556
42531: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42532: LD_ADDR_VAR 0 3
42536: PUSH
42537: LD_INT 39
42539: PPUSH
42540: LD_VAR 0 1
42544: PPUSH
42545: CALL_OW 321
42549: PUSH
42550: LD_INT 2
42552: EQUAL
42553: ST_TO_ADDR
42554: GO 42623
42556: LD_INT 18
42558: DOUBLE
42559: EQUAL
42560: IFTRUE 42564
42562: GO 42589
42564: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42565: LD_ADDR_VAR 0 3
42569: PUSH
42570: LD_INT 40
42572: PPUSH
42573: LD_VAR 0 1
42577: PPUSH
42578: CALL_OW 321
42582: PUSH
42583: LD_INT 2
42585: EQUAL
42586: ST_TO_ADDR
42587: GO 42623
42589: LD_INT 27
42591: DOUBLE
42592: EQUAL
42593: IFTRUE 42597
42595: GO 42622
42597: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42598: LD_ADDR_VAR 0 3
42602: PUSH
42603: LD_INT 35
42605: PPUSH
42606: LD_VAR 0 1
42610: PPUSH
42611: CALL_OW 321
42615: PUSH
42616: LD_INT 2
42618: EQUAL
42619: ST_TO_ADDR
42620: GO 42623
42622: POP
// end ;
42623: LD_VAR 0 3
42627: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42628: LD_INT 0
42630: PPUSH
42631: PPUSH
42632: PPUSH
42633: PPUSH
42634: PPUSH
42635: PPUSH
42636: PPUSH
42637: PPUSH
42638: PPUSH
42639: PPUSH
42640: PPUSH
// result := false ;
42641: LD_ADDR_VAR 0 6
42645: PUSH
42646: LD_INT 0
42648: ST_TO_ADDR
// if btype = b_depot then
42649: LD_VAR 0 2
42653: PUSH
42654: LD_INT 0
42656: EQUAL
42657: IFFALSE 42669
// begin result := true ;
42659: LD_ADDR_VAR 0 6
42663: PUSH
42664: LD_INT 1
42666: ST_TO_ADDR
// exit ;
42667: GO 43495
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42669: LD_VAR 0 1
42673: NOT
42674: PUSH
42675: LD_VAR 0 1
42679: PPUSH
42680: CALL_OW 266
42684: PUSH
42685: LD_INT 0
42687: PUSH
42688: LD_INT 1
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: IN
42695: NOT
42696: OR
42697: PUSH
42698: LD_VAR 0 2
42702: NOT
42703: OR
42704: PUSH
42705: LD_VAR 0 5
42709: PUSH
42710: LD_INT 0
42712: PUSH
42713: LD_INT 1
42715: PUSH
42716: LD_INT 2
42718: PUSH
42719: LD_INT 3
42721: PUSH
42722: LD_INT 4
42724: PUSH
42725: LD_INT 5
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: IN
42736: NOT
42737: OR
42738: PUSH
42739: LD_VAR 0 3
42743: PPUSH
42744: LD_VAR 0 4
42748: PPUSH
42749: CALL_OW 488
42753: NOT
42754: OR
42755: IFFALSE 42759
// exit ;
42757: GO 43495
// side := GetSide ( depot ) ;
42759: LD_ADDR_VAR 0 9
42763: PUSH
42764: LD_VAR 0 1
42768: PPUSH
42769: CALL_OW 255
42773: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42774: LD_VAR 0 9
42778: PPUSH
42779: LD_VAR 0 2
42783: PPUSH
42784: CALL 42252 0 2
42788: NOT
42789: IFFALSE 42793
// exit ;
42791: GO 43495
// pom := GetBase ( depot ) ;
42793: LD_ADDR_VAR 0 10
42797: PUSH
42798: LD_VAR 0 1
42802: PPUSH
42803: CALL_OW 274
42807: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42808: LD_ADDR_VAR 0 11
42812: PUSH
42813: LD_VAR 0 2
42817: PPUSH
42818: LD_VAR 0 1
42822: PPUSH
42823: CALL_OW 248
42827: PPUSH
42828: CALL_OW 450
42832: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42833: LD_VAR 0 10
42837: PPUSH
42838: LD_INT 1
42840: PPUSH
42841: CALL_OW 275
42845: PUSH
42846: LD_VAR 0 11
42850: PUSH
42851: LD_INT 1
42853: ARRAY
42854: GREATEREQUAL
42855: PUSH
42856: LD_VAR 0 10
42860: PPUSH
42861: LD_INT 2
42863: PPUSH
42864: CALL_OW 275
42868: PUSH
42869: LD_VAR 0 11
42873: PUSH
42874: LD_INT 2
42876: ARRAY
42877: GREATEREQUAL
42878: AND
42879: PUSH
42880: LD_VAR 0 10
42884: PPUSH
42885: LD_INT 3
42887: PPUSH
42888: CALL_OW 275
42892: PUSH
42893: LD_VAR 0 11
42897: PUSH
42898: LD_INT 3
42900: ARRAY
42901: GREATEREQUAL
42902: AND
42903: NOT
42904: IFFALSE 42908
// exit ;
42906: GO 43495
// if GetBType ( depot ) = b_depot then
42908: LD_VAR 0 1
42912: PPUSH
42913: CALL_OW 266
42917: PUSH
42918: LD_INT 0
42920: EQUAL
42921: IFFALSE 42933
// dist := 28 else
42923: LD_ADDR_VAR 0 14
42927: PUSH
42928: LD_INT 28
42930: ST_TO_ADDR
42931: GO 42941
// dist := 36 ;
42933: LD_ADDR_VAR 0 14
42937: PUSH
42938: LD_INT 36
42940: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42941: LD_VAR 0 1
42945: PPUSH
42946: LD_VAR 0 3
42950: PPUSH
42951: LD_VAR 0 4
42955: PPUSH
42956: CALL_OW 297
42960: PUSH
42961: LD_VAR 0 14
42965: GREATER
42966: IFFALSE 42970
// exit ;
42968: GO 43495
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42970: LD_ADDR_VAR 0 12
42974: PUSH
42975: LD_VAR 0 2
42979: PPUSH
42980: LD_VAR 0 3
42984: PPUSH
42985: LD_VAR 0 4
42989: PPUSH
42990: LD_VAR 0 5
42994: PPUSH
42995: LD_VAR 0 1
42999: PPUSH
43000: CALL_OW 248
43004: PPUSH
43005: LD_INT 0
43007: PPUSH
43008: CALL 43500 0 6
43012: ST_TO_ADDR
// if not hexes then
43013: LD_VAR 0 12
43017: NOT
43018: IFFALSE 43022
// exit ;
43020: GO 43495
// hex := GetHexInfo ( x , y ) ;
43022: LD_ADDR_VAR 0 15
43026: PUSH
43027: LD_VAR 0 3
43031: PPUSH
43032: LD_VAR 0 4
43036: PPUSH
43037: CALL_OW 546
43041: ST_TO_ADDR
// if hex [ 1 ] then
43042: LD_VAR 0 15
43046: PUSH
43047: LD_INT 1
43049: ARRAY
43050: IFFALSE 43054
// exit ;
43052: GO 43495
// height := hex [ 2 ] ;
43054: LD_ADDR_VAR 0 13
43058: PUSH
43059: LD_VAR 0 15
43063: PUSH
43064: LD_INT 2
43066: ARRAY
43067: ST_TO_ADDR
// for i = 1 to hexes do
43068: LD_ADDR_VAR 0 7
43072: PUSH
43073: DOUBLE
43074: LD_INT 1
43076: DEC
43077: ST_TO_ADDR
43078: LD_VAR 0 12
43082: PUSH
43083: FOR_TO
43084: IFFALSE 43414
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43086: LD_VAR 0 12
43090: PUSH
43091: LD_VAR 0 7
43095: ARRAY
43096: PUSH
43097: LD_INT 1
43099: ARRAY
43100: PPUSH
43101: LD_VAR 0 12
43105: PUSH
43106: LD_VAR 0 7
43110: ARRAY
43111: PUSH
43112: LD_INT 2
43114: ARRAY
43115: PPUSH
43116: CALL_OW 488
43120: NOT
43121: PUSH
43122: LD_VAR 0 12
43126: PUSH
43127: LD_VAR 0 7
43131: ARRAY
43132: PUSH
43133: LD_INT 1
43135: ARRAY
43136: PPUSH
43137: LD_VAR 0 12
43141: PUSH
43142: LD_VAR 0 7
43146: ARRAY
43147: PUSH
43148: LD_INT 2
43150: ARRAY
43151: PPUSH
43152: CALL_OW 428
43156: PUSH
43157: LD_INT 0
43159: GREATER
43160: OR
43161: PUSH
43162: LD_VAR 0 12
43166: PUSH
43167: LD_VAR 0 7
43171: ARRAY
43172: PUSH
43173: LD_INT 1
43175: ARRAY
43176: PPUSH
43177: LD_VAR 0 12
43181: PUSH
43182: LD_VAR 0 7
43186: ARRAY
43187: PUSH
43188: LD_INT 2
43190: ARRAY
43191: PPUSH
43192: CALL_OW 351
43196: OR
43197: IFFALSE 43203
// exit ;
43199: POP
43200: POP
43201: GO 43495
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43203: LD_ADDR_VAR 0 8
43207: PUSH
43208: LD_VAR 0 12
43212: PUSH
43213: LD_VAR 0 7
43217: ARRAY
43218: PUSH
43219: LD_INT 1
43221: ARRAY
43222: PPUSH
43223: LD_VAR 0 12
43227: PUSH
43228: LD_VAR 0 7
43232: ARRAY
43233: PUSH
43234: LD_INT 2
43236: ARRAY
43237: PPUSH
43238: CALL_OW 546
43242: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43243: LD_VAR 0 8
43247: PUSH
43248: LD_INT 1
43250: ARRAY
43251: PUSH
43252: LD_VAR 0 8
43256: PUSH
43257: LD_INT 2
43259: ARRAY
43260: PUSH
43261: LD_VAR 0 13
43265: PUSH
43266: LD_INT 2
43268: PLUS
43269: GREATER
43270: OR
43271: PUSH
43272: LD_VAR 0 8
43276: PUSH
43277: LD_INT 2
43279: ARRAY
43280: PUSH
43281: LD_VAR 0 13
43285: PUSH
43286: LD_INT 2
43288: MINUS
43289: LESS
43290: OR
43291: PUSH
43292: LD_VAR 0 8
43296: PUSH
43297: LD_INT 3
43299: ARRAY
43300: PUSH
43301: LD_INT 0
43303: PUSH
43304: LD_INT 8
43306: PUSH
43307: LD_INT 9
43309: PUSH
43310: LD_INT 10
43312: PUSH
43313: LD_INT 11
43315: PUSH
43316: LD_INT 12
43318: PUSH
43319: LD_INT 13
43321: PUSH
43322: LD_INT 16
43324: PUSH
43325: LD_INT 17
43327: PUSH
43328: LD_INT 18
43330: PUSH
43331: LD_INT 19
43333: PUSH
43334: LD_INT 20
43336: PUSH
43337: LD_INT 21
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: IN
43355: NOT
43356: OR
43357: PUSH
43358: LD_VAR 0 8
43362: PUSH
43363: LD_INT 5
43365: ARRAY
43366: NOT
43367: OR
43368: PUSH
43369: LD_VAR 0 8
43373: PUSH
43374: LD_INT 6
43376: ARRAY
43377: PUSH
43378: LD_INT 1
43380: PUSH
43381: LD_INT 2
43383: PUSH
43384: LD_INT 7
43386: PUSH
43387: LD_INT 9
43389: PUSH
43390: LD_INT 10
43392: PUSH
43393: LD_INT 11
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: IN
43404: NOT
43405: OR
43406: IFFALSE 43412
// exit ;
43408: POP
43409: POP
43410: GO 43495
// end ;
43412: GO 43083
43414: POP
43415: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43416: LD_VAR 0 9
43420: PPUSH
43421: LD_VAR 0 3
43425: PPUSH
43426: LD_VAR 0 4
43430: PPUSH
43431: LD_INT 20
43433: PPUSH
43434: CALL 35418 0 4
43438: PUSH
43439: LD_INT 4
43441: ARRAY
43442: IFFALSE 43446
// exit ;
43444: GO 43495
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43446: LD_VAR 0 2
43450: PUSH
43451: LD_INT 29
43453: PUSH
43454: LD_INT 30
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: IN
43461: PUSH
43462: LD_VAR 0 3
43466: PPUSH
43467: LD_VAR 0 4
43471: PPUSH
43472: LD_VAR 0 9
43476: PPUSH
43477: CALL_OW 440
43481: NOT
43482: AND
43483: IFFALSE 43487
// exit ;
43485: GO 43495
// result := true ;
43487: LD_ADDR_VAR 0 6
43491: PUSH
43492: LD_INT 1
43494: ST_TO_ADDR
// end ;
43495: LD_VAR 0 6
43499: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43500: LD_INT 0
43502: PPUSH
43503: PPUSH
43504: PPUSH
43505: PPUSH
43506: PPUSH
43507: PPUSH
43508: PPUSH
43509: PPUSH
43510: PPUSH
43511: PPUSH
43512: PPUSH
43513: PPUSH
43514: PPUSH
43515: PPUSH
43516: PPUSH
43517: PPUSH
43518: PPUSH
43519: PPUSH
43520: PPUSH
43521: PPUSH
43522: PPUSH
43523: PPUSH
43524: PPUSH
43525: PPUSH
43526: PPUSH
43527: PPUSH
43528: PPUSH
43529: PPUSH
43530: PPUSH
43531: PPUSH
43532: PPUSH
43533: PPUSH
43534: PPUSH
43535: PPUSH
43536: PPUSH
43537: PPUSH
43538: PPUSH
43539: PPUSH
43540: PPUSH
43541: PPUSH
43542: PPUSH
43543: PPUSH
43544: PPUSH
43545: PPUSH
43546: PPUSH
43547: PPUSH
43548: PPUSH
43549: PPUSH
43550: PPUSH
43551: PPUSH
43552: PPUSH
43553: PPUSH
43554: PPUSH
43555: PPUSH
43556: PPUSH
43557: PPUSH
43558: PPUSH
43559: PPUSH
// result = [ ] ;
43560: LD_ADDR_VAR 0 7
43564: PUSH
43565: EMPTY
43566: ST_TO_ADDR
// temp_list = [ ] ;
43567: LD_ADDR_VAR 0 9
43571: PUSH
43572: EMPTY
43573: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43574: LD_VAR 0 4
43578: PUSH
43579: LD_INT 0
43581: PUSH
43582: LD_INT 1
43584: PUSH
43585: LD_INT 2
43587: PUSH
43588: LD_INT 3
43590: PUSH
43591: LD_INT 4
43593: PUSH
43594: LD_INT 5
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: IN
43605: NOT
43606: PUSH
43607: LD_VAR 0 1
43611: PUSH
43612: LD_INT 0
43614: PUSH
43615: LD_INT 1
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: IN
43622: PUSH
43623: LD_VAR 0 5
43627: PUSH
43628: LD_INT 1
43630: PUSH
43631: LD_INT 2
43633: PUSH
43634: LD_INT 3
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: LIST
43641: IN
43642: NOT
43643: AND
43644: OR
43645: IFFALSE 43649
// exit ;
43647: GO 62040
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43649: LD_VAR 0 1
43653: PUSH
43654: LD_INT 6
43656: PUSH
43657: LD_INT 7
43659: PUSH
43660: LD_INT 8
43662: PUSH
43663: LD_INT 13
43665: PUSH
43666: LD_INT 12
43668: PUSH
43669: LD_INT 15
43671: PUSH
43672: LD_INT 11
43674: PUSH
43675: LD_INT 14
43677: PUSH
43678: LD_INT 10
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: IN
43692: IFFALSE 43702
// btype = b_lab ;
43694: LD_ADDR_VAR 0 1
43698: PUSH
43699: LD_INT 6
43701: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43702: LD_VAR 0 6
43706: PUSH
43707: LD_INT 0
43709: PUSH
43710: LD_INT 1
43712: PUSH
43713: LD_INT 2
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: LIST
43720: IN
43721: NOT
43722: PUSH
43723: LD_VAR 0 1
43727: PUSH
43728: LD_INT 0
43730: PUSH
43731: LD_INT 1
43733: PUSH
43734: LD_INT 2
43736: PUSH
43737: LD_INT 3
43739: PUSH
43740: LD_INT 6
43742: PUSH
43743: LD_INT 36
43745: PUSH
43746: LD_INT 4
43748: PUSH
43749: LD_INT 5
43751: PUSH
43752: LD_INT 31
43754: PUSH
43755: LD_INT 32
43757: PUSH
43758: LD_INT 33
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: IN
43774: NOT
43775: PUSH
43776: LD_VAR 0 6
43780: PUSH
43781: LD_INT 1
43783: EQUAL
43784: AND
43785: OR
43786: PUSH
43787: LD_VAR 0 1
43791: PUSH
43792: LD_INT 2
43794: PUSH
43795: LD_INT 3
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: IN
43802: NOT
43803: PUSH
43804: LD_VAR 0 6
43808: PUSH
43809: LD_INT 2
43811: EQUAL
43812: AND
43813: OR
43814: IFFALSE 43824
// mode = 0 ;
43816: LD_ADDR_VAR 0 6
43820: PUSH
43821: LD_INT 0
43823: ST_TO_ADDR
// case mode of 0 :
43824: LD_VAR 0 6
43828: PUSH
43829: LD_INT 0
43831: DOUBLE
43832: EQUAL
43833: IFTRUE 43837
43835: GO 55290
43837: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43838: LD_ADDR_VAR 0 11
43842: PUSH
43843: LD_INT 0
43845: PUSH
43846: LD_INT 0
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 0
43855: PUSH
43856: LD_INT 1
43858: NEG
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 1
43866: PUSH
43867: LD_INT 0
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 1
43876: PUSH
43877: LD_INT 1
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 0
43886: PUSH
43887: LD_INT 1
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 1
43896: NEG
43897: PUSH
43898: LD_INT 0
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 1
43907: NEG
43908: PUSH
43909: LD_INT 1
43911: NEG
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 1
43919: NEG
43920: PUSH
43921: LD_INT 2
43923: NEG
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 0
43931: PUSH
43932: LD_INT 2
43934: NEG
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 1
43942: PUSH
43943: LD_INT 1
43945: NEG
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 1
43953: PUSH
43954: LD_INT 2
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 0
43963: PUSH
43964: LD_INT 2
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 1
43973: NEG
43974: PUSH
43975: LD_INT 1
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 1
43984: PUSH
43985: LD_INT 3
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 0
43994: PUSH
43995: LD_INT 3
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 1
44004: NEG
44005: PUSH
44006: LD_INT 2
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44031: LD_ADDR_VAR 0 12
44035: PUSH
44036: LD_INT 0
44038: PUSH
44039: LD_INT 0
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 0
44048: PUSH
44049: LD_INT 1
44051: NEG
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 1
44059: PUSH
44060: LD_INT 0
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 1
44069: PUSH
44070: LD_INT 1
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 0
44079: PUSH
44080: LD_INT 1
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 1
44089: NEG
44090: PUSH
44091: LD_INT 0
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 1
44100: NEG
44101: PUSH
44102: LD_INT 1
44104: NEG
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 1
44112: PUSH
44113: LD_INT 1
44115: NEG
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 2
44123: PUSH
44124: LD_INT 0
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 2
44133: PUSH
44134: LD_INT 1
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 1
44143: NEG
44144: PUSH
44145: LD_INT 1
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 2
44154: NEG
44155: PUSH
44156: LD_INT 0
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 2
44165: NEG
44166: PUSH
44167: LD_INT 1
44169: NEG
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 2
44177: NEG
44178: PUSH
44179: LD_INT 1
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 3
44188: NEG
44189: PUSH
44190: LD_INT 0
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 3
44199: NEG
44200: PUSH
44201: LD_INT 1
44203: NEG
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44227: LD_ADDR_VAR 0 13
44231: PUSH
44232: LD_INT 0
44234: PUSH
44235: LD_INT 0
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 0
44244: PUSH
44245: LD_INT 1
44247: NEG
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 1
44255: PUSH
44256: LD_INT 0
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 1
44265: PUSH
44266: LD_INT 1
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 0
44275: PUSH
44276: LD_INT 1
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 1
44285: NEG
44286: PUSH
44287: LD_INT 0
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 1
44296: NEG
44297: PUSH
44298: LD_INT 1
44300: NEG
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 1
44308: NEG
44309: PUSH
44310: LD_INT 2
44312: NEG
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 2
44320: PUSH
44321: LD_INT 1
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 2
44330: PUSH
44331: LD_INT 2
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 1
44340: PUSH
44341: LD_INT 2
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 2
44350: NEG
44351: PUSH
44352: LD_INT 1
44354: NEG
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 2
44362: NEG
44363: PUSH
44364: LD_INT 2
44366: NEG
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 2
44374: NEG
44375: PUSH
44376: LD_INT 3
44378: NEG
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 3
44386: NEG
44387: PUSH
44388: LD_INT 2
44390: NEG
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 3
44398: NEG
44399: PUSH
44400: LD_INT 3
44402: NEG
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44426: LD_ADDR_VAR 0 14
44430: PUSH
44431: LD_INT 0
44433: PUSH
44434: LD_INT 0
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 0
44443: PUSH
44444: LD_INT 1
44446: NEG
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 1
44454: PUSH
44455: LD_INT 0
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 1
44464: PUSH
44465: LD_INT 1
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 0
44474: PUSH
44475: LD_INT 1
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 1
44484: NEG
44485: PUSH
44486: LD_INT 0
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 1
44495: NEG
44496: PUSH
44497: LD_INT 1
44499: NEG
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 1
44507: NEG
44508: PUSH
44509: LD_INT 2
44511: NEG
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 0
44519: PUSH
44520: LD_INT 2
44522: NEG
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 1
44530: PUSH
44531: LD_INT 1
44533: NEG
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 1
44541: PUSH
44542: LD_INT 2
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 0
44551: PUSH
44552: LD_INT 2
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 1
44561: NEG
44562: PUSH
44563: LD_INT 1
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 1
44572: NEG
44573: PUSH
44574: LD_INT 3
44576: NEG
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 0
44584: PUSH
44585: LD_INT 3
44587: NEG
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 1
44595: PUSH
44596: LD_INT 2
44598: NEG
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44622: LD_ADDR_VAR 0 15
44626: PUSH
44627: LD_INT 0
44629: PUSH
44630: LD_INT 0
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 0
44639: PUSH
44640: LD_INT 1
44642: NEG
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 1
44650: PUSH
44651: LD_INT 0
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 1
44660: PUSH
44661: LD_INT 1
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 0
44670: PUSH
44671: LD_INT 1
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 1
44680: NEG
44681: PUSH
44682: LD_INT 0
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 1
44691: NEG
44692: PUSH
44693: LD_INT 1
44695: NEG
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 1
44703: PUSH
44704: LD_INT 1
44706: NEG
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 2
44714: PUSH
44715: LD_INT 0
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 2
44724: PUSH
44725: LD_INT 1
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 1
44734: NEG
44735: PUSH
44736: LD_INT 1
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 2
44745: NEG
44746: PUSH
44747: LD_INT 0
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 2
44756: NEG
44757: PUSH
44758: LD_INT 1
44760: NEG
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 2
44768: PUSH
44769: LD_INT 1
44771: NEG
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 3
44779: PUSH
44780: LD_INT 0
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 3
44789: PUSH
44790: LD_INT 1
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44815: LD_ADDR_VAR 0 16
44819: PUSH
44820: LD_INT 0
44822: PUSH
44823: LD_INT 0
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 0
44832: PUSH
44833: LD_INT 1
44835: NEG
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 1
44843: PUSH
44844: LD_INT 0
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 1
44853: PUSH
44854: LD_INT 1
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 0
44863: PUSH
44864: LD_INT 1
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 1
44873: NEG
44874: PUSH
44875: LD_INT 0
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 1
44884: NEG
44885: PUSH
44886: LD_INT 1
44888: NEG
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 1
44896: NEG
44897: PUSH
44898: LD_INT 2
44900: NEG
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: LD_INT 2
44908: PUSH
44909: LD_INT 1
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 2
44918: PUSH
44919: LD_INT 2
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 1
44928: PUSH
44929: LD_INT 2
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 2
44938: NEG
44939: PUSH
44940: LD_INT 1
44942: NEG
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 2
44950: NEG
44951: PUSH
44952: LD_INT 2
44954: NEG
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 3
44962: PUSH
44963: LD_INT 2
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 3
44972: PUSH
44973: LD_INT 3
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 2
44982: PUSH
44983: LD_INT 3
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45008: LD_ADDR_VAR 0 17
45012: PUSH
45013: LD_INT 0
45015: PUSH
45016: LD_INT 0
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 0
45025: PUSH
45026: LD_INT 1
45028: NEG
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 1
45036: PUSH
45037: LD_INT 0
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 1
45046: PUSH
45047: LD_INT 1
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 0
45056: PUSH
45057: LD_INT 1
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 1
45066: NEG
45067: PUSH
45068: LD_INT 0
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 1
45077: NEG
45078: PUSH
45079: LD_INT 1
45081: NEG
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 1
45089: NEG
45090: PUSH
45091: LD_INT 2
45093: NEG
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 0
45101: PUSH
45102: LD_INT 2
45104: NEG
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 1
45112: PUSH
45113: LD_INT 1
45115: NEG
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 2
45123: PUSH
45124: LD_INT 0
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 2
45133: PUSH
45134: LD_INT 1
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 2
45143: PUSH
45144: LD_INT 2
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 1
45153: PUSH
45154: LD_INT 2
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 0
45163: PUSH
45164: LD_INT 2
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 1
45173: NEG
45174: PUSH
45175: LD_INT 1
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 2
45184: NEG
45185: PUSH
45186: LD_INT 0
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 2
45195: NEG
45196: PUSH
45197: LD_INT 1
45199: NEG
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 2
45207: NEG
45208: PUSH
45209: LD_INT 2
45211: NEG
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45238: LD_ADDR_VAR 0 18
45242: PUSH
45243: LD_INT 0
45245: PUSH
45246: LD_INT 0
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 0
45255: PUSH
45256: LD_INT 1
45258: NEG
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 1
45266: PUSH
45267: LD_INT 0
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 1
45276: PUSH
45277: LD_INT 1
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 0
45286: PUSH
45287: LD_INT 1
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 1
45296: NEG
45297: PUSH
45298: LD_INT 0
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 1
45307: NEG
45308: PUSH
45309: LD_INT 1
45311: NEG
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 1
45319: NEG
45320: PUSH
45321: LD_INT 2
45323: NEG
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 0
45331: PUSH
45332: LD_INT 2
45334: NEG
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 1
45342: PUSH
45343: LD_INT 1
45345: NEG
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 2
45353: PUSH
45354: LD_INT 0
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 2
45363: PUSH
45364: LD_INT 1
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 2
45373: PUSH
45374: LD_INT 2
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 1
45383: PUSH
45384: LD_INT 2
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 0
45393: PUSH
45394: LD_INT 2
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 1
45403: NEG
45404: PUSH
45405: LD_INT 1
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 2
45414: NEG
45415: PUSH
45416: LD_INT 0
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 2
45425: NEG
45426: PUSH
45427: LD_INT 1
45429: NEG
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 2
45437: NEG
45438: PUSH
45439: LD_INT 2
45441: NEG
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45468: LD_ADDR_VAR 0 19
45472: PUSH
45473: LD_INT 0
45475: PUSH
45476: LD_INT 0
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 0
45485: PUSH
45486: LD_INT 1
45488: NEG
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 1
45496: PUSH
45497: LD_INT 0
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 1
45506: PUSH
45507: LD_INT 1
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 0
45516: PUSH
45517: LD_INT 1
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 1
45526: NEG
45527: PUSH
45528: LD_INT 0
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 1
45537: NEG
45538: PUSH
45539: LD_INT 1
45541: NEG
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 1
45549: NEG
45550: PUSH
45551: LD_INT 2
45553: NEG
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: LD_INT 2
45564: NEG
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 1
45572: PUSH
45573: LD_INT 1
45575: NEG
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 2
45583: PUSH
45584: LD_INT 0
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 2
45593: PUSH
45594: LD_INT 1
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 2
45603: PUSH
45604: LD_INT 2
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 1
45613: PUSH
45614: LD_INT 2
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 0
45623: PUSH
45624: LD_INT 2
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 1
45633: NEG
45634: PUSH
45635: LD_INT 1
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 2
45644: NEG
45645: PUSH
45646: LD_INT 0
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 2
45655: NEG
45656: PUSH
45657: LD_INT 1
45659: NEG
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 2
45667: NEG
45668: PUSH
45669: LD_INT 2
45671: NEG
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45698: LD_ADDR_VAR 0 20
45702: PUSH
45703: LD_INT 0
45705: PUSH
45706: LD_INT 0
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 0
45715: PUSH
45716: LD_INT 1
45718: NEG
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 1
45726: PUSH
45727: LD_INT 0
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 1
45736: PUSH
45737: LD_INT 1
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 0
45746: PUSH
45747: LD_INT 1
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 1
45756: NEG
45757: PUSH
45758: LD_INT 0
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 1
45767: NEG
45768: PUSH
45769: LD_INT 1
45771: NEG
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 1
45779: NEG
45780: PUSH
45781: LD_INT 2
45783: NEG
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 0
45791: PUSH
45792: LD_INT 2
45794: NEG
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 1
45802: PUSH
45803: LD_INT 1
45805: NEG
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 2
45813: PUSH
45814: LD_INT 0
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 2
45823: PUSH
45824: LD_INT 1
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 2
45833: PUSH
45834: LD_INT 2
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 1
45843: PUSH
45844: LD_INT 2
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 0
45853: PUSH
45854: LD_INT 2
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 1
45863: NEG
45864: PUSH
45865: LD_INT 1
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 2
45874: NEG
45875: PUSH
45876: LD_INT 0
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 2
45885: NEG
45886: PUSH
45887: LD_INT 1
45889: NEG
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 2
45897: NEG
45898: PUSH
45899: LD_INT 2
45901: NEG
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45928: LD_ADDR_VAR 0 21
45932: PUSH
45933: LD_INT 0
45935: PUSH
45936: LD_INT 0
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 0
45945: PUSH
45946: LD_INT 1
45948: NEG
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 1
45956: PUSH
45957: LD_INT 0
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 1
45966: PUSH
45967: LD_INT 1
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 0
45976: PUSH
45977: LD_INT 1
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 1
45986: NEG
45987: PUSH
45988: LD_INT 0
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 1
45997: NEG
45998: PUSH
45999: LD_INT 1
46001: NEG
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 1
46009: NEG
46010: PUSH
46011: LD_INT 2
46013: NEG
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 0
46021: PUSH
46022: LD_INT 2
46024: NEG
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 1
46032: PUSH
46033: LD_INT 1
46035: NEG
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 2
46043: PUSH
46044: LD_INT 0
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 2
46053: PUSH
46054: LD_INT 1
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 2
46063: PUSH
46064: LD_INT 2
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 1
46073: PUSH
46074: LD_INT 2
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 0
46083: PUSH
46084: LD_INT 2
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 1
46093: NEG
46094: PUSH
46095: LD_INT 1
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 2
46104: NEG
46105: PUSH
46106: LD_INT 0
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 2
46115: NEG
46116: PUSH
46117: LD_INT 1
46119: NEG
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 2
46127: NEG
46128: PUSH
46129: LD_INT 2
46131: NEG
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46158: LD_ADDR_VAR 0 22
46162: PUSH
46163: LD_INT 0
46165: PUSH
46166: LD_INT 0
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 0
46175: PUSH
46176: LD_INT 1
46178: NEG
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 1
46186: PUSH
46187: LD_INT 0
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 1
46196: PUSH
46197: LD_INT 1
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: LD_INT 1
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 1
46216: NEG
46217: PUSH
46218: LD_INT 0
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 1
46227: NEG
46228: PUSH
46229: LD_INT 1
46231: NEG
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 1
46239: NEG
46240: PUSH
46241: LD_INT 2
46243: NEG
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: LD_INT 2
46254: NEG
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 1
46262: PUSH
46263: LD_INT 1
46265: NEG
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 2
46273: PUSH
46274: LD_INT 0
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 2
46283: PUSH
46284: LD_INT 1
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 2
46293: PUSH
46294: LD_INT 2
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 1
46303: PUSH
46304: LD_INT 2
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 0
46313: PUSH
46314: LD_INT 2
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 1
46323: NEG
46324: PUSH
46325: LD_INT 1
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 2
46334: NEG
46335: PUSH
46336: LD_INT 0
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 2
46345: NEG
46346: PUSH
46347: LD_INT 1
46349: NEG
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 2
46357: NEG
46358: PUSH
46359: LD_INT 2
46361: NEG
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46388: LD_ADDR_VAR 0 23
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: LD_INT 0
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 0
46405: PUSH
46406: LD_INT 1
46408: NEG
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 1
46416: PUSH
46417: LD_INT 0
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 1
46426: PUSH
46427: LD_INT 1
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 0
46436: PUSH
46437: LD_INT 1
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 1
46446: NEG
46447: PUSH
46448: LD_INT 0
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 1
46457: NEG
46458: PUSH
46459: LD_INT 1
46461: NEG
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 1
46469: NEG
46470: PUSH
46471: LD_INT 2
46473: NEG
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 0
46481: PUSH
46482: LD_INT 2
46484: NEG
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 1
46492: PUSH
46493: LD_INT 1
46495: NEG
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 2
46503: PUSH
46504: LD_INT 0
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 2
46513: PUSH
46514: LD_INT 1
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 2
46523: PUSH
46524: LD_INT 2
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 1
46533: PUSH
46534: LD_INT 2
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 0
46543: PUSH
46544: LD_INT 2
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 1
46553: NEG
46554: PUSH
46555: LD_INT 1
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 2
46564: NEG
46565: PUSH
46566: LD_INT 0
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 2
46575: NEG
46576: PUSH
46577: LD_INT 1
46579: NEG
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 2
46587: NEG
46588: PUSH
46589: LD_INT 2
46591: NEG
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 2
46599: NEG
46600: PUSH
46601: LD_INT 3
46603: NEG
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 1
46611: NEG
46612: PUSH
46613: LD_INT 3
46615: NEG
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 1
46623: PUSH
46624: LD_INT 2
46626: NEG
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 2
46634: PUSH
46635: LD_INT 1
46637: NEG
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46668: LD_ADDR_VAR 0 24
46672: PUSH
46673: LD_INT 0
46675: PUSH
46676: LD_INT 0
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 0
46685: PUSH
46686: LD_INT 1
46688: NEG
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 1
46696: PUSH
46697: LD_INT 0
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 1
46706: PUSH
46707: LD_INT 1
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 0
46716: PUSH
46717: LD_INT 1
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 1
46726: NEG
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 1
46737: NEG
46738: PUSH
46739: LD_INT 1
46741: NEG
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 1
46749: NEG
46750: PUSH
46751: LD_INT 2
46753: NEG
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: LD_INT 2
46764: NEG
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 1
46772: PUSH
46773: LD_INT 1
46775: NEG
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 2
46783: PUSH
46784: LD_INT 0
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 2
46793: PUSH
46794: LD_INT 1
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 2
46803: PUSH
46804: LD_INT 2
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 1
46813: PUSH
46814: LD_INT 2
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 0
46823: PUSH
46824: LD_INT 2
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 1
46833: NEG
46834: PUSH
46835: LD_INT 1
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 2
46844: NEG
46845: PUSH
46846: LD_INT 0
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 2
46855: NEG
46856: PUSH
46857: LD_INT 1
46859: NEG
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 2
46867: NEG
46868: PUSH
46869: LD_INT 2
46871: NEG
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 1
46879: PUSH
46880: LD_INT 2
46882: NEG
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 2
46890: PUSH
46891: LD_INT 1
46893: NEG
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 3
46901: PUSH
46902: LD_INT 1
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 3
46911: PUSH
46912: LD_INT 2
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46944: LD_ADDR_VAR 0 25
46948: PUSH
46949: LD_INT 0
46951: PUSH
46952: LD_INT 0
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 0
46961: PUSH
46962: LD_INT 1
46964: NEG
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 1
46972: PUSH
46973: LD_INT 0
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 1
46982: PUSH
46983: LD_INT 1
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 0
46992: PUSH
46993: LD_INT 1
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 1
47002: NEG
47003: PUSH
47004: LD_INT 0
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 1
47013: NEG
47014: PUSH
47015: LD_INT 1
47017: NEG
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 1
47025: NEG
47026: PUSH
47027: LD_INT 2
47029: NEG
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 0
47037: PUSH
47038: LD_INT 2
47040: NEG
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 1
47048: PUSH
47049: LD_INT 1
47051: NEG
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 2
47059: PUSH
47060: LD_INT 0
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 2
47069: PUSH
47070: LD_INT 1
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 2
47079: PUSH
47080: LD_INT 2
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 1
47089: PUSH
47090: LD_INT 2
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 0
47099: PUSH
47100: LD_INT 2
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 1
47109: NEG
47110: PUSH
47111: LD_INT 1
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 2
47120: NEG
47121: PUSH
47122: LD_INT 0
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 2
47131: NEG
47132: PUSH
47133: LD_INT 1
47135: NEG
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 2
47143: NEG
47144: PUSH
47145: LD_INT 2
47147: NEG
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 3
47155: PUSH
47156: LD_INT 1
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 3
47165: PUSH
47166: LD_INT 2
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 2
47175: PUSH
47176: LD_INT 3
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 1
47185: PUSH
47186: LD_INT 3
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47218: LD_ADDR_VAR 0 26
47222: PUSH
47223: LD_INT 0
47225: PUSH
47226: LD_INT 0
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 0
47235: PUSH
47236: LD_INT 1
47238: NEG
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 1
47246: PUSH
47247: LD_INT 0
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 1
47256: PUSH
47257: LD_INT 1
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 0
47266: PUSH
47267: LD_INT 1
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 1
47276: NEG
47277: PUSH
47278: LD_INT 0
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 1
47287: NEG
47288: PUSH
47289: LD_INT 1
47291: NEG
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 1
47299: NEG
47300: PUSH
47301: LD_INT 2
47303: NEG
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 0
47311: PUSH
47312: LD_INT 2
47314: NEG
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 1
47322: PUSH
47323: LD_INT 1
47325: NEG
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 2
47333: PUSH
47334: LD_INT 0
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 2
47343: PUSH
47344: LD_INT 1
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 2
47353: PUSH
47354: LD_INT 2
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 1
47363: PUSH
47364: LD_INT 2
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 0
47373: PUSH
47374: LD_INT 2
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 1
47383: NEG
47384: PUSH
47385: LD_INT 1
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 2
47394: NEG
47395: PUSH
47396: LD_INT 0
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 2
47405: NEG
47406: PUSH
47407: LD_INT 1
47409: NEG
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 2
47417: NEG
47418: PUSH
47419: LD_INT 2
47421: NEG
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 2
47429: PUSH
47430: LD_INT 3
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 1
47439: PUSH
47440: LD_INT 3
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 1
47449: NEG
47450: PUSH
47451: LD_INT 2
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 2
47460: NEG
47461: PUSH
47462: LD_INT 1
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47494: LD_ADDR_VAR 0 27
47498: PUSH
47499: LD_INT 0
47501: PUSH
47502: LD_INT 0
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 0
47511: PUSH
47512: LD_INT 1
47514: NEG
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 1
47522: PUSH
47523: LD_INT 0
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 1
47532: PUSH
47533: LD_INT 1
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 0
47542: PUSH
47543: LD_INT 1
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 1
47552: NEG
47553: PUSH
47554: LD_INT 0
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 1
47563: NEG
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 1
47575: NEG
47576: PUSH
47577: LD_INT 2
47579: NEG
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 0
47587: PUSH
47588: LD_INT 2
47590: NEG
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 1
47598: PUSH
47599: LD_INT 1
47601: NEG
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 2
47609: PUSH
47610: LD_INT 0
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 2
47619: PUSH
47620: LD_INT 1
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 2
47629: PUSH
47630: LD_INT 2
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 1
47639: PUSH
47640: LD_INT 2
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 0
47649: PUSH
47650: LD_INT 2
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 1
47659: NEG
47660: PUSH
47661: LD_INT 1
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 2
47670: NEG
47671: PUSH
47672: LD_INT 0
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 2
47681: NEG
47682: PUSH
47683: LD_INT 1
47685: NEG
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 2
47693: NEG
47694: PUSH
47695: LD_INT 2
47697: NEG
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 1
47705: NEG
47706: PUSH
47707: LD_INT 2
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 2
47716: NEG
47717: PUSH
47718: LD_INT 1
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 3
47727: NEG
47728: PUSH
47729: LD_INT 1
47731: NEG
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 3
47739: NEG
47740: PUSH
47741: LD_INT 2
47743: NEG
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47774: LD_ADDR_VAR 0 28
47778: PUSH
47779: LD_INT 0
47781: PUSH
47782: LD_INT 0
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 0
47791: PUSH
47792: LD_INT 1
47794: NEG
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 1
47802: PUSH
47803: LD_INT 0
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 1
47812: PUSH
47813: LD_INT 1
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 0
47822: PUSH
47823: LD_INT 1
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 1
47832: NEG
47833: PUSH
47834: LD_INT 0
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 1
47843: NEG
47844: PUSH
47845: LD_INT 1
47847: NEG
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 1
47855: NEG
47856: PUSH
47857: LD_INT 2
47859: NEG
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 0
47867: PUSH
47868: LD_INT 2
47870: NEG
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 1
47878: PUSH
47879: LD_INT 1
47881: NEG
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 2
47889: PUSH
47890: LD_INT 0
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 2
47899: PUSH
47900: LD_INT 1
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 2
47909: PUSH
47910: LD_INT 2
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 1
47919: PUSH
47920: LD_INT 2
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 0
47929: PUSH
47930: LD_INT 2
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 1
47939: NEG
47940: PUSH
47941: LD_INT 1
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 2
47950: NEG
47951: PUSH
47952: LD_INT 0
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 2
47961: NEG
47962: PUSH
47963: LD_INT 1
47965: NEG
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 2
47973: NEG
47974: PUSH
47975: LD_INT 2
47977: NEG
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 2
47985: NEG
47986: PUSH
47987: LD_INT 3
47989: NEG
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 1
47997: NEG
47998: PUSH
47999: LD_INT 3
48001: NEG
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 3
48009: NEG
48010: PUSH
48011: LD_INT 1
48013: NEG
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 3
48021: NEG
48022: PUSH
48023: LD_INT 2
48025: NEG
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48056: LD_ADDR_VAR 0 29
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: LD_INT 0
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 0
48073: PUSH
48074: LD_INT 1
48076: NEG
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 1
48084: PUSH
48085: LD_INT 0
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 1
48094: PUSH
48095: LD_INT 1
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: LD_INT 1
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 1
48114: NEG
48115: PUSH
48116: LD_INT 0
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 1
48125: NEG
48126: PUSH
48127: LD_INT 1
48129: NEG
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 1
48137: NEG
48138: PUSH
48139: LD_INT 2
48141: NEG
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 0
48149: PUSH
48150: LD_INT 2
48152: NEG
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 1
48160: PUSH
48161: LD_INT 1
48163: NEG
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 2
48171: PUSH
48172: LD_INT 0
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 2
48181: PUSH
48182: LD_INT 1
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 1
48191: PUSH
48192: LD_INT 2
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 0
48201: PUSH
48202: LD_INT 2
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 1
48211: NEG
48212: PUSH
48213: LD_INT 1
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 2
48222: NEG
48223: PUSH
48224: LD_INT 1
48226: NEG
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 2
48234: NEG
48235: PUSH
48236: LD_INT 2
48238: NEG
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 2
48246: NEG
48247: PUSH
48248: LD_INT 3
48250: NEG
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 2
48258: PUSH
48259: LD_INT 1
48261: NEG
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 3
48269: PUSH
48270: LD_INT 1
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 1
48279: PUSH
48280: LD_INT 3
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 1
48289: NEG
48290: PUSH
48291: LD_INT 2
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 3
48300: NEG
48301: PUSH
48302: LD_INT 2
48304: NEG
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48335: LD_ADDR_VAR 0 30
48339: PUSH
48340: LD_INT 0
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 0
48352: PUSH
48353: LD_INT 1
48355: NEG
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 1
48363: PUSH
48364: LD_INT 0
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 1
48373: PUSH
48374: LD_INT 1
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 0
48383: PUSH
48384: LD_INT 1
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 1
48393: NEG
48394: PUSH
48395: LD_INT 0
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 1
48404: NEG
48405: PUSH
48406: LD_INT 1
48408: NEG
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 1
48416: NEG
48417: PUSH
48418: LD_INT 2
48420: NEG
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 0
48428: PUSH
48429: LD_INT 2
48431: NEG
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 1
48439: PUSH
48440: LD_INT 1
48442: NEG
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 2
48450: PUSH
48451: LD_INT 0
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 2
48460: PUSH
48461: LD_INT 1
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 2
48470: PUSH
48471: LD_INT 2
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 1
48480: PUSH
48481: LD_INT 2
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 1
48490: NEG
48491: PUSH
48492: LD_INT 1
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 2
48501: NEG
48502: PUSH
48503: LD_INT 0
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 2
48512: NEG
48513: PUSH
48514: LD_INT 1
48516: NEG
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 1
48524: NEG
48525: PUSH
48526: LD_INT 3
48528: NEG
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 1
48536: PUSH
48537: LD_INT 2
48539: NEG
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 3
48547: PUSH
48548: LD_INT 2
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 2
48557: PUSH
48558: LD_INT 3
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 2
48567: NEG
48568: PUSH
48569: LD_INT 1
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 3
48578: NEG
48579: PUSH
48580: LD_INT 1
48582: NEG
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48613: LD_ADDR_VAR 0 31
48617: PUSH
48618: LD_INT 0
48620: PUSH
48621: LD_INT 0
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 0
48630: PUSH
48631: LD_INT 1
48633: NEG
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 1
48641: PUSH
48642: LD_INT 0
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 1
48651: PUSH
48652: LD_INT 1
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 0
48661: PUSH
48662: LD_INT 1
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 1
48671: NEG
48672: PUSH
48673: LD_INT 0
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 1
48682: NEG
48683: PUSH
48684: LD_INT 1
48686: NEG
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 1
48694: NEG
48695: PUSH
48696: LD_INT 2
48698: NEG
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 1
48706: PUSH
48707: LD_INT 1
48709: NEG
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 2
48717: PUSH
48718: LD_INT 0
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 2
48727: PUSH
48728: LD_INT 1
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 2
48737: PUSH
48738: LD_INT 2
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 1
48747: PUSH
48748: LD_INT 2
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 0
48757: PUSH
48758: LD_INT 2
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 1
48767: NEG
48768: PUSH
48769: LD_INT 1
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 2
48778: NEG
48779: PUSH
48780: LD_INT 1
48782: NEG
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 2
48790: NEG
48791: PUSH
48792: LD_INT 2
48794: NEG
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 2
48802: NEG
48803: PUSH
48804: LD_INT 3
48806: NEG
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 2
48814: PUSH
48815: LD_INT 1
48817: NEG
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 3
48825: PUSH
48826: LD_INT 1
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: LD_INT 3
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 1
48845: NEG
48846: PUSH
48847: LD_INT 2
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 3
48856: NEG
48857: PUSH
48858: LD_INT 2
48860: NEG
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48891: LD_ADDR_VAR 0 32
48895: PUSH
48896: LD_INT 0
48898: PUSH
48899: LD_INT 0
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 0
48908: PUSH
48909: LD_INT 1
48911: NEG
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 1
48919: PUSH
48920: LD_INT 0
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 1
48929: PUSH
48930: LD_INT 1
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 0
48939: PUSH
48940: LD_INT 1
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 1
48949: NEG
48950: PUSH
48951: LD_INT 0
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 1
48960: NEG
48961: PUSH
48962: LD_INT 1
48964: NEG
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 1
48972: NEG
48973: PUSH
48974: LD_INT 2
48976: NEG
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 0
48984: PUSH
48985: LD_INT 2
48987: NEG
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 1
48995: PUSH
48996: LD_INT 1
48998: NEG
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 2
49006: PUSH
49007: LD_INT 1
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 2
49016: PUSH
49017: LD_INT 2
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 1
49026: PUSH
49027: LD_INT 2
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 0
49036: PUSH
49037: LD_INT 2
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 1
49046: NEG
49047: PUSH
49048: LD_INT 1
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 2
49057: NEG
49058: PUSH
49059: LD_INT 0
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 2
49068: NEG
49069: PUSH
49070: LD_INT 1
49072: NEG
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 1
49080: NEG
49081: PUSH
49082: LD_INT 3
49084: NEG
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 1
49092: PUSH
49093: LD_INT 2
49095: NEG
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 3
49103: PUSH
49104: LD_INT 2
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 2
49113: PUSH
49114: LD_INT 3
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 2
49123: NEG
49124: PUSH
49125: LD_INT 1
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 3
49134: NEG
49135: PUSH
49136: LD_INT 1
49138: NEG
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49169: LD_ADDR_VAR 0 33
49173: PUSH
49174: LD_INT 0
49176: PUSH
49177: LD_INT 0
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 0
49186: PUSH
49187: LD_INT 1
49189: NEG
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 1
49197: PUSH
49198: LD_INT 0
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 1
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 0
49217: PUSH
49218: LD_INT 1
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 1
49227: NEG
49228: PUSH
49229: LD_INT 0
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: LD_INT 1
49238: NEG
49239: PUSH
49240: LD_INT 1
49242: NEG
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 1
49250: NEG
49251: PUSH
49252: LD_INT 2
49254: NEG
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 1
49262: PUSH
49263: LD_INT 1
49265: NEG
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 2
49273: PUSH
49274: LD_INT 0
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 2
49283: PUSH
49284: LD_INT 1
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 1
49293: PUSH
49294: LD_INT 2
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 0
49303: PUSH
49304: LD_INT 2
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 1
49313: NEG
49314: PUSH
49315: LD_INT 1
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 2
49324: NEG
49325: PUSH
49326: LD_INT 0
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 2
49335: NEG
49336: PUSH
49337: LD_INT 1
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 2
49347: NEG
49348: PUSH
49349: LD_INT 2
49351: NEG
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 2
49359: NEG
49360: PUSH
49361: LD_INT 3
49363: NEG
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 2
49371: PUSH
49372: LD_INT 1
49374: NEG
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 3
49382: PUSH
49383: LD_INT 1
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 1
49392: PUSH
49393: LD_INT 3
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 1
49402: NEG
49403: PUSH
49404: LD_INT 2
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 3
49413: NEG
49414: PUSH
49415: LD_INT 2
49417: NEG
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49448: LD_ADDR_VAR 0 34
49452: PUSH
49453: LD_INT 0
49455: PUSH
49456: LD_INT 0
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 0
49465: PUSH
49466: LD_INT 1
49468: NEG
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 1
49476: PUSH
49477: LD_INT 0
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 1
49486: PUSH
49487: LD_INT 1
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 0
49496: PUSH
49497: LD_INT 1
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 1
49506: NEG
49507: PUSH
49508: LD_INT 0
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 1
49517: NEG
49518: PUSH
49519: LD_INT 1
49521: NEG
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 1
49529: NEG
49530: PUSH
49531: LD_INT 2
49533: NEG
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 0
49541: PUSH
49542: LD_INT 2
49544: NEG
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 1
49552: PUSH
49553: LD_INT 1
49555: NEG
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 2
49563: PUSH
49564: LD_INT 1
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 2
49573: PUSH
49574: LD_INT 2
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 1
49583: PUSH
49584: LD_INT 2
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 1
49593: NEG
49594: PUSH
49595: LD_INT 1
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 2
49604: NEG
49605: PUSH
49606: LD_INT 0
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 2
49615: NEG
49616: PUSH
49617: LD_INT 1
49619: NEG
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 2
49627: NEG
49628: PUSH
49629: LD_INT 2
49631: NEG
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 1
49639: NEG
49640: PUSH
49641: LD_INT 3
49643: NEG
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 1
49651: PUSH
49652: LD_INT 2
49654: NEG
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 3
49662: PUSH
49663: LD_INT 2
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 2
49672: PUSH
49673: LD_INT 3
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 2
49682: NEG
49683: PUSH
49684: LD_INT 1
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 3
49693: NEG
49694: PUSH
49695: LD_INT 1
49697: NEG
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49728: LD_ADDR_VAR 0 35
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 0
49745: PUSH
49746: LD_INT 1
49748: NEG
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 1
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 1
49766: PUSH
49767: LD_INT 1
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 0
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 1
49786: NEG
49787: PUSH
49788: LD_INT 0
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 1
49797: NEG
49798: PUSH
49799: LD_INT 1
49801: NEG
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 2
49809: PUSH
49810: LD_INT 1
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 2
49819: NEG
49820: PUSH
49821: LD_INT 1
49823: NEG
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49840: LD_ADDR_VAR 0 36
49844: PUSH
49845: LD_INT 0
49847: PUSH
49848: LD_INT 0
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 0
49857: PUSH
49858: LD_INT 1
49860: NEG
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 1
49868: PUSH
49869: LD_INT 0
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 1
49878: PUSH
49879: LD_INT 1
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 0
49888: PUSH
49889: LD_INT 1
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 1
49898: NEG
49899: PUSH
49900: LD_INT 0
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 1
49909: NEG
49910: PUSH
49911: LD_INT 1
49913: NEG
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 1
49921: NEG
49922: PUSH
49923: LD_INT 2
49925: NEG
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 1
49933: PUSH
49934: LD_INT 2
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49952: LD_ADDR_VAR 0 37
49956: PUSH
49957: LD_INT 0
49959: PUSH
49960: LD_INT 0
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 0
49969: PUSH
49970: LD_INT 1
49972: NEG
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 1
49980: PUSH
49981: LD_INT 0
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 1
49990: PUSH
49991: LD_INT 1
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 0
50000: PUSH
50001: LD_INT 1
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 1
50010: NEG
50011: PUSH
50012: LD_INT 0
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 1
50021: NEG
50022: PUSH
50023: LD_INT 1
50025: NEG
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 1
50033: PUSH
50034: LD_INT 1
50036: NEG
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 1
50044: NEG
50045: PUSH
50046: LD_INT 1
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50064: LD_ADDR_VAR 0 38
50068: PUSH
50069: LD_INT 0
50071: PUSH
50072: LD_INT 0
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 0
50081: PUSH
50082: LD_INT 1
50084: NEG
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 1
50092: PUSH
50093: LD_INT 0
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 1
50102: PUSH
50103: LD_INT 1
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 0
50112: PUSH
50113: LD_INT 1
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 1
50122: NEG
50123: PUSH
50124: LD_INT 0
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 1
50133: NEG
50134: PUSH
50135: LD_INT 1
50137: NEG
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 2
50145: PUSH
50146: LD_INT 1
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 2
50155: NEG
50156: PUSH
50157: LD_INT 1
50159: NEG
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50176: LD_ADDR_VAR 0 39
50180: PUSH
50181: LD_INT 0
50183: PUSH
50184: LD_INT 0
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 0
50193: PUSH
50194: LD_INT 1
50196: NEG
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 1
50204: PUSH
50205: LD_INT 0
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 1
50214: PUSH
50215: LD_INT 1
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 0
50224: PUSH
50225: LD_INT 1
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 1
50234: NEG
50235: PUSH
50236: LD_INT 0
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 1
50245: NEG
50246: PUSH
50247: LD_INT 1
50249: NEG
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 1
50257: NEG
50258: PUSH
50259: LD_INT 2
50261: NEG
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 1
50269: PUSH
50270: LD_INT 2
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50288: LD_ADDR_VAR 0 40
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: LD_INT 0
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 0
50305: PUSH
50306: LD_INT 1
50308: NEG
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 1
50316: PUSH
50317: LD_INT 0
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 1
50326: PUSH
50327: LD_INT 1
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 0
50336: PUSH
50337: LD_INT 1
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 1
50346: NEG
50347: PUSH
50348: LD_INT 0
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 1
50357: NEG
50358: PUSH
50359: LD_INT 1
50361: NEG
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 1
50369: PUSH
50370: LD_INT 1
50372: NEG
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 1
50380: NEG
50381: PUSH
50382: LD_INT 1
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50400: LD_ADDR_VAR 0 41
50404: PUSH
50405: LD_INT 0
50407: PUSH
50408: LD_INT 0
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 0
50417: PUSH
50418: LD_INT 1
50420: NEG
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 1
50428: PUSH
50429: LD_INT 0
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 1
50438: PUSH
50439: LD_INT 1
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: LD_INT 1
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 1
50458: NEG
50459: PUSH
50460: LD_INT 0
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 1
50469: NEG
50470: PUSH
50471: LD_INT 1
50473: NEG
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 1
50481: NEG
50482: PUSH
50483: LD_INT 2
50485: NEG
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 1
50493: PUSH
50494: LD_INT 1
50496: NEG
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 2
50504: PUSH
50505: LD_INT 0
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 2
50514: PUSH
50515: LD_INT 1
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 2
50524: PUSH
50525: LD_INT 2
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 1
50534: PUSH
50535: LD_INT 2
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 1
50544: NEG
50545: PUSH
50546: LD_INT 1
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 2
50555: NEG
50556: PUSH
50557: LD_INT 0
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 2
50566: NEG
50567: PUSH
50568: LD_INT 1
50570: NEG
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 2
50578: NEG
50579: PUSH
50580: LD_INT 2
50582: NEG
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 2
50590: NEG
50591: PUSH
50592: LD_INT 3
50594: NEG
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 2
50602: PUSH
50603: LD_INT 1
50605: NEG
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 3
50613: PUSH
50614: LD_INT 0
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 3
50623: PUSH
50624: LD_INT 1
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 3
50633: PUSH
50634: LD_INT 2
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 3
50643: PUSH
50644: LD_INT 3
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 2
50653: PUSH
50654: LD_INT 3
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 2
50663: NEG
50664: PUSH
50665: LD_INT 1
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 3
50674: NEG
50675: PUSH
50676: LD_INT 0
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 3
50685: NEG
50686: PUSH
50687: LD_INT 1
50689: NEG
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 3
50697: NEG
50698: PUSH
50699: LD_INT 2
50701: NEG
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 3
50709: NEG
50710: PUSH
50711: LD_INT 3
50713: NEG
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50750: LD_ADDR_VAR 0 42
50754: PUSH
50755: LD_INT 0
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 0
50767: PUSH
50768: LD_INT 1
50770: NEG
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 1
50778: PUSH
50779: LD_INT 0
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 1
50788: PUSH
50789: LD_INT 1
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 0
50798: PUSH
50799: LD_INT 1
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 1
50808: NEG
50809: PUSH
50810: LD_INT 0
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 1
50819: NEG
50820: PUSH
50821: LD_INT 1
50823: NEG
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 1
50831: NEG
50832: PUSH
50833: LD_INT 2
50835: NEG
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 0
50843: PUSH
50844: LD_INT 2
50846: NEG
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 1
50854: PUSH
50855: LD_INT 1
50857: NEG
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 2
50865: PUSH
50866: LD_INT 1
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 2
50875: PUSH
50876: LD_INT 2
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 1
50885: PUSH
50886: LD_INT 2
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 0
50895: PUSH
50896: LD_INT 2
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 1
50905: NEG
50906: PUSH
50907: LD_INT 1
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 2
50916: NEG
50917: PUSH
50918: LD_INT 1
50920: NEG
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 2
50928: NEG
50929: PUSH
50930: LD_INT 2
50932: NEG
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 2
50940: NEG
50941: PUSH
50942: LD_INT 3
50944: NEG
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 1
50952: NEG
50953: PUSH
50954: LD_INT 3
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 0
50964: PUSH
50965: LD_INT 3
50967: NEG
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 1
50975: PUSH
50976: LD_INT 2
50978: NEG
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 3
50986: PUSH
50987: LD_INT 2
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 3
50996: PUSH
50997: LD_INT 3
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 2
51006: PUSH
51007: LD_INT 3
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 1
51016: PUSH
51017: LD_INT 3
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 0
51026: PUSH
51027: LD_INT 3
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 1
51036: NEG
51037: PUSH
51038: LD_INT 2
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 3
51047: NEG
51048: PUSH
51049: LD_INT 2
51051: NEG
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 3
51059: NEG
51060: PUSH
51061: LD_INT 3
51063: NEG
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51100: LD_ADDR_VAR 0 43
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: LD_INT 0
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 0
51117: PUSH
51118: LD_INT 1
51120: NEG
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 1
51128: PUSH
51129: LD_INT 0
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 1
51138: PUSH
51139: LD_INT 1
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 0
51148: PUSH
51149: LD_INT 1
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 1
51158: NEG
51159: PUSH
51160: LD_INT 0
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 1
51169: NEG
51170: PUSH
51171: LD_INT 1
51173: NEG
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 1
51181: NEG
51182: PUSH
51183: LD_INT 2
51185: NEG
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 0
51193: PUSH
51194: LD_INT 2
51196: NEG
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 1
51204: PUSH
51205: LD_INT 1
51207: NEG
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 2
51215: PUSH
51216: LD_INT 0
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 2
51225: PUSH
51226: LD_INT 1
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 1
51235: PUSH
51236: LD_INT 2
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 0
51245: PUSH
51246: LD_INT 2
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 1
51255: NEG
51256: PUSH
51257: LD_INT 1
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 2
51266: NEG
51267: PUSH
51268: LD_INT 0
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 2
51277: NEG
51278: PUSH
51279: LD_INT 1
51281: NEG
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 1
51289: NEG
51290: PUSH
51291: LD_INT 3
51293: NEG
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 0
51301: PUSH
51302: LD_INT 3
51304: NEG
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 1
51312: PUSH
51313: LD_INT 2
51315: NEG
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 2
51323: PUSH
51324: LD_INT 1
51326: NEG
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 3
51334: PUSH
51335: LD_INT 0
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 3
51344: PUSH
51345: LD_INT 1
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 1
51354: PUSH
51355: LD_INT 3
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 0
51364: PUSH
51365: LD_INT 3
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 1
51374: NEG
51375: PUSH
51376: LD_INT 2
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 2
51385: NEG
51386: PUSH
51387: LD_INT 1
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 3
51396: NEG
51397: PUSH
51398: LD_INT 0
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 3
51407: NEG
51408: PUSH
51409: LD_INT 1
51411: NEG
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51448: LD_ADDR_VAR 0 44
51452: PUSH
51453: LD_INT 0
51455: PUSH
51456: LD_INT 0
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 0
51465: PUSH
51466: LD_INT 1
51468: NEG
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 1
51476: PUSH
51477: LD_INT 0
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 1
51486: PUSH
51487: LD_INT 1
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 0
51496: PUSH
51497: LD_INT 1
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 1
51506: NEG
51507: PUSH
51508: LD_INT 0
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 1
51517: NEG
51518: PUSH
51519: LD_INT 1
51521: NEG
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 1
51529: NEG
51530: PUSH
51531: LD_INT 2
51533: NEG
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 1
51541: PUSH
51542: LD_INT 1
51544: NEG
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 2
51552: PUSH
51553: LD_INT 0
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 2
51562: PUSH
51563: LD_INT 1
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 2
51572: PUSH
51573: LD_INT 2
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 1
51582: PUSH
51583: LD_INT 2
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 1
51592: NEG
51593: PUSH
51594: LD_INT 1
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 2
51603: NEG
51604: PUSH
51605: LD_INT 0
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 2
51614: NEG
51615: PUSH
51616: LD_INT 1
51618: NEG
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 2
51626: NEG
51627: PUSH
51628: LD_INT 2
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 2
51638: NEG
51639: PUSH
51640: LD_INT 3
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 2
51650: PUSH
51651: LD_INT 1
51653: NEG
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 3
51661: PUSH
51662: LD_INT 0
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 3
51671: PUSH
51672: LD_INT 1
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 3
51681: PUSH
51682: LD_INT 2
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 3
51691: PUSH
51692: LD_INT 3
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 2
51701: PUSH
51702: LD_INT 3
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 2
51711: NEG
51712: PUSH
51713: LD_INT 1
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 3
51722: NEG
51723: PUSH
51724: LD_INT 0
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 3
51733: NEG
51734: PUSH
51735: LD_INT 1
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 3
51745: NEG
51746: PUSH
51747: LD_INT 2
51749: NEG
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 3
51757: NEG
51758: PUSH
51759: LD_INT 3
51761: NEG
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51798: LD_ADDR_VAR 0 45
51802: PUSH
51803: LD_INT 0
51805: PUSH
51806: LD_INT 0
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 0
51815: PUSH
51816: LD_INT 1
51818: NEG
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 1
51826: PUSH
51827: LD_INT 0
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 1
51836: PUSH
51837: LD_INT 1
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 0
51846: PUSH
51847: LD_INT 1
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 1
51856: NEG
51857: PUSH
51858: LD_INT 0
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 1
51867: NEG
51868: PUSH
51869: LD_INT 1
51871: NEG
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 1
51879: NEG
51880: PUSH
51881: LD_INT 2
51883: NEG
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 0
51891: PUSH
51892: LD_INT 2
51894: NEG
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 1
51902: PUSH
51903: LD_INT 1
51905: NEG
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 2
51913: PUSH
51914: LD_INT 1
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 2
51923: PUSH
51924: LD_INT 2
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 1
51933: PUSH
51934: LD_INT 2
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 0
51943: PUSH
51944: LD_INT 2
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 1
51953: NEG
51954: PUSH
51955: LD_INT 1
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 2
51964: NEG
51965: PUSH
51966: LD_INT 1
51968: NEG
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 2
51976: NEG
51977: PUSH
51978: LD_INT 2
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 2
51988: NEG
51989: PUSH
51990: LD_INT 3
51992: NEG
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 1
52000: NEG
52001: PUSH
52002: LD_INT 3
52004: NEG
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 0
52012: PUSH
52013: LD_INT 3
52015: NEG
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 1
52023: PUSH
52024: LD_INT 2
52026: NEG
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 3
52034: PUSH
52035: LD_INT 2
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 3
52044: PUSH
52045: LD_INT 3
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 2
52054: PUSH
52055: LD_INT 3
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 1
52064: PUSH
52065: LD_INT 3
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 0
52074: PUSH
52075: LD_INT 3
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 1
52084: NEG
52085: PUSH
52086: LD_INT 2
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 3
52095: NEG
52096: PUSH
52097: LD_INT 2
52099: NEG
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 3
52107: NEG
52108: PUSH
52109: LD_INT 3
52111: NEG
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52148: LD_ADDR_VAR 0 46
52152: PUSH
52153: LD_INT 0
52155: PUSH
52156: LD_INT 0
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 0
52165: PUSH
52166: LD_INT 1
52168: NEG
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 1
52176: PUSH
52177: LD_INT 0
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 1
52186: PUSH
52187: LD_INT 1
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 0
52196: PUSH
52197: LD_INT 1
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 1
52206: NEG
52207: PUSH
52208: LD_INT 0
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 1
52217: NEG
52218: PUSH
52219: LD_INT 1
52221: NEG
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 1
52229: NEG
52230: PUSH
52231: LD_INT 2
52233: NEG
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 0
52241: PUSH
52242: LD_INT 2
52244: NEG
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 1
52252: PUSH
52253: LD_INT 1
52255: NEG
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 2
52263: PUSH
52264: LD_INT 0
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 2
52273: PUSH
52274: LD_INT 1
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 1
52283: PUSH
52284: LD_INT 2
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 0
52293: PUSH
52294: LD_INT 2
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 1
52303: NEG
52304: PUSH
52305: LD_INT 1
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 2
52314: NEG
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 2
52325: NEG
52326: PUSH
52327: LD_INT 1
52329: NEG
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 1
52337: NEG
52338: PUSH
52339: LD_INT 3
52341: NEG
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 0
52349: PUSH
52350: LD_INT 3
52352: NEG
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 1
52360: PUSH
52361: LD_INT 2
52363: NEG
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 2
52371: PUSH
52372: LD_INT 1
52374: NEG
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 3
52382: PUSH
52383: LD_INT 0
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 3
52392: PUSH
52393: LD_INT 1
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 1
52402: PUSH
52403: LD_INT 3
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 0
52412: PUSH
52413: LD_INT 3
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 1
52422: NEG
52423: PUSH
52424: LD_INT 2
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 2
52433: NEG
52434: PUSH
52435: LD_INT 1
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 3
52444: NEG
52445: PUSH
52446: LD_INT 0
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 3
52455: NEG
52456: PUSH
52457: LD_INT 1
52459: NEG
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52496: LD_ADDR_VAR 0 47
52500: PUSH
52501: LD_INT 0
52503: PUSH
52504: LD_INT 0
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 0
52513: PUSH
52514: LD_INT 1
52516: NEG
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 1
52524: PUSH
52525: LD_INT 0
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 1
52534: PUSH
52535: LD_INT 1
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 0
52544: PUSH
52545: LD_INT 1
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 1
52554: NEG
52555: PUSH
52556: LD_INT 0
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 1
52565: NEG
52566: PUSH
52567: LD_INT 1
52569: NEG
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 1
52577: NEG
52578: PUSH
52579: LD_INT 2
52581: NEG
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 0
52589: PUSH
52590: LD_INT 2
52592: NEG
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 1
52600: PUSH
52601: LD_INT 1
52603: NEG
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 2
52611: NEG
52612: PUSH
52613: LD_INT 1
52615: NEG
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 2
52623: NEG
52624: PUSH
52625: LD_INT 2
52627: NEG
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52647: LD_ADDR_VAR 0 48
52651: PUSH
52652: LD_INT 0
52654: PUSH
52655: LD_INT 0
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 0
52664: PUSH
52665: LD_INT 1
52667: NEG
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 1
52675: PUSH
52676: LD_INT 0
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 1
52685: PUSH
52686: LD_INT 1
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 0
52695: PUSH
52696: LD_INT 1
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 1
52705: NEG
52706: PUSH
52707: LD_INT 0
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 1
52716: NEG
52717: PUSH
52718: LD_INT 1
52720: NEG
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 1
52728: NEG
52729: PUSH
52730: LD_INT 2
52732: NEG
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: LD_INT 2
52743: NEG
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 1
52751: PUSH
52752: LD_INT 1
52754: NEG
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 2
52762: PUSH
52763: LD_INT 0
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 2
52772: PUSH
52773: LD_INT 1
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52794: LD_ADDR_VAR 0 49
52798: PUSH
52799: LD_INT 0
52801: PUSH
52802: LD_INT 0
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 0
52811: PUSH
52812: LD_INT 1
52814: NEG
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 1
52822: PUSH
52823: LD_INT 0
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 1
52832: PUSH
52833: LD_INT 1
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 0
52842: PUSH
52843: LD_INT 1
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 1
52852: NEG
52853: PUSH
52854: LD_INT 0
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 1
52863: NEG
52864: PUSH
52865: LD_INT 1
52867: NEG
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 1
52875: PUSH
52876: LD_INT 1
52878: NEG
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 2
52886: PUSH
52887: LD_INT 0
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 2
52896: PUSH
52897: LD_INT 1
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 2
52906: PUSH
52907: LD_INT 2
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 1
52916: PUSH
52917: LD_INT 2
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52938: LD_ADDR_VAR 0 50
52942: PUSH
52943: LD_INT 0
52945: PUSH
52946: LD_INT 0
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 0
52955: PUSH
52956: LD_INT 1
52958: NEG
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 1
52966: PUSH
52967: LD_INT 0
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 1
52976: PUSH
52977: LD_INT 1
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: LD_INT 1
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 1
52996: NEG
52997: PUSH
52998: LD_INT 0
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 1
53007: NEG
53008: PUSH
53009: LD_INT 1
53011: NEG
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 2
53019: PUSH
53020: LD_INT 1
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 2
53029: PUSH
53030: LD_INT 2
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 1
53039: PUSH
53040: LD_INT 2
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 0
53049: PUSH
53050: LD_INT 2
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 1
53059: NEG
53060: PUSH
53061: LD_INT 1
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53082: LD_ADDR_VAR 0 51
53086: PUSH
53087: LD_INT 0
53089: PUSH
53090: LD_INT 0
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 0
53099: PUSH
53100: LD_INT 1
53102: NEG
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 1
53110: PUSH
53111: LD_INT 0
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 1
53120: PUSH
53121: LD_INT 1
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 0
53130: PUSH
53131: LD_INT 1
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 1
53140: NEG
53141: PUSH
53142: LD_INT 0
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 1
53151: NEG
53152: PUSH
53153: LD_INT 1
53155: NEG
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 1
53163: PUSH
53164: LD_INT 2
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 0
53173: PUSH
53174: LD_INT 2
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 1
53183: NEG
53184: PUSH
53185: LD_INT 1
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 2
53194: NEG
53195: PUSH
53196: LD_INT 0
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 2
53205: NEG
53206: PUSH
53207: LD_INT 1
53209: NEG
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53229: LD_ADDR_VAR 0 52
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: LD_INT 0
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 0
53246: PUSH
53247: LD_INT 1
53249: NEG
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 1
53257: PUSH
53258: LD_INT 0
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 1
53267: PUSH
53268: LD_INT 1
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 0
53277: PUSH
53278: LD_INT 1
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 1
53287: NEG
53288: PUSH
53289: LD_INT 0
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 1
53298: NEG
53299: PUSH
53300: LD_INT 1
53302: NEG
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 1
53310: NEG
53311: PUSH
53312: LD_INT 2
53314: NEG
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 1
53322: NEG
53323: PUSH
53324: LD_INT 1
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 2
53333: NEG
53334: PUSH
53335: LD_INT 0
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 2
53344: NEG
53345: PUSH
53346: LD_INT 1
53348: NEG
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 2
53356: NEG
53357: PUSH
53358: LD_INT 2
53360: NEG
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53380: LD_ADDR_VAR 0 53
53384: PUSH
53385: LD_INT 0
53387: PUSH
53388: LD_INT 0
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 0
53397: PUSH
53398: LD_INT 1
53400: NEG
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 1
53408: PUSH
53409: LD_INT 0
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 1
53418: PUSH
53419: LD_INT 1
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 0
53428: PUSH
53429: LD_INT 1
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 1
53438: NEG
53439: PUSH
53440: LD_INT 0
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 1
53449: NEG
53450: PUSH
53451: LD_INT 1
53453: NEG
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 1
53461: NEG
53462: PUSH
53463: LD_INT 2
53465: NEG
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 0
53473: PUSH
53474: LD_INT 2
53476: NEG
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 1
53484: PUSH
53485: LD_INT 1
53487: NEG
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 2
53495: PUSH
53496: LD_INT 0
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 2
53505: PUSH
53506: LD_INT 1
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 2
53515: PUSH
53516: LD_INT 2
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 1
53525: PUSH
53526: LD_INT 2
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 0
53535: PUSH
53536: LD_INT 2
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 1
53545: NEG
53546: PUSH
53547: LD_INT 1
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 2
53556: NEG
53557: PUSH
53558: LD_INT 0
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 2
53567: NEG
53568: PUSH
53569: LD_INT 1
53571: NEG
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 2
53579: NEG
53580: PUSH
53581: LD_INT 2
53583: NEG
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53610: LD_ADDR_VAR 0 54
53614: PUSH
53615: LD_INT 0
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 0
53627: PUSH
53628: LD_INT 1
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 1
53638: PUSH
53639: LD_INT 0
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 1
53648: PUSH
53649: LD_INT 1
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 0
53658: PUSH
53659: LD_INT 1
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 1
53668: NEG
53669: PUSH
53670: LD_INT 0
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 1
53679: NEG
53680: PUSH
53681: LD_INT 1
53683: NEG
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 1
53691: NEG
53692: PUSH
53693: LD_INT 2
53695: NEG
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 0
53703: PUSH
53704: LD_INT 2
53706: NEG
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 1
53714: PUSH
53715: LD_INT 1
53717: NEG
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 2
53725: PUSH
53726: LD_INT 0
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 2
53735: PUSH
53736: LD_INT 1
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 2
53745: PUSH
53746: LD_INT 2
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 1
53755: PUSH
53756: LD_INT 2
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 0
53765: PUSH
53766: LD_INT 2
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 1
53775: NEG
53776: PUSH
53777: LD_INT 1
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 2
53786: NEG
53787: PUSH
53788: LD_INT 0
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 2
53797: NEG
53798: PUSH
53799: LD_INT 1
53801: NEG
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 2
53809: NEG
53810: PUSH
53811: LD_INT 2
53813: NEG
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53840: LD_ADDR_VAR 0 55
53844: PUSH
53845: LD_INT 0
53847: PUSH
53848: LD_INT 0
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 0
53857: PUSH
53858: LD_INT 1
53860: NEG
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 1
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 1
53878: PUSH
53879: LD_INT 1
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 0
53888: PUSH
53889: LD_INT 1
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 1
53898: NEG
53899: PUSH
53900: LD_INT 0
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 1
53909: NEG
53910: PUSH
53911: LD_INT 1
53913: NEG
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 1
53921: NEG
53922: PUSH
53923: LD_INT 2
53925: NEG
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 0
53933: PUSH
53934: LD_INT 2
53936: NEG
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 1
53944: PUSH
53945: LD_INT 1
53947: NEG
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 2
53955: PUSH
53956: LD_INT 0
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 2
53965: PUSH
53966: LD_INT 1
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 2
53975: PUSH
53976: LD_INT 2
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 1
53985: PUSH
53986: LD_INT 2
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 0
53995: PUSH
53996: LD_INT 2
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 1
54005: NEG
54006: PUSH
54007: LD_INT 1
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 2
54016: NEG
54017: PUSH
54018: LD_INT 0
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 2
54027: NEG
54028: PUSH
54029: LD_INT 1
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 2
54039: NEG
54040: PUSH
54041: LD_INT 2
54043: NEG
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54070: LD_ADDR_VAR 0 56
54074: PUSH
54075: LD_INT 0
54077: PUSH
54078: LD_INT 0
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 0
54087: PUSH
54088: LD_INT 1
54090: NEG
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 1
54098: PUSH
54099: LD_INT 0
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 1
54108: PUSH
54109: LD_INT 1
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 0
54118: PUSH
54119: LD_INT 1
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 1
54128: NEG
54129: PUSH
54130: LD_INT 0
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 1
54139: NEG
54140: PUSH
54141: LD_INT 1
54143: NEG
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 1
54151: NEG
54152: PUSH
54153: LD_INT 2
54155: NEG
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 0
54163: PUSH
54164: LD_INT 2
54166: NEG
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 1
54174: PUSH
54175: LD_INT 1
54177: NEG
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 2
54185: PUSH
54186: LD_INT 0
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 2
54195: PUSH
54196: LD_INT 1
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 2
54205: PUSH
54206: LD_INT 2
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 1
54215: PUSH
54216: LD_INT 2
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 0
54225: PUSH
54226: LD_INT 2
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 1
54235: NEG
54236: PUSH
54237: LD_INT 1
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 2
54246: NEG
54247: PUSH
54248: LD_INT 0
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 2
54257: NEG
54258: PUSH
54259: LD_INT 1
54261: NEG
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 2
54269: NEG
54270: PUSH
54271: LD_INT 2
54273: NEG
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54300: LD_ADDR_VAR 0 57
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: LD_INT 0
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 0
54317: PUSH
54318: LD_INT 1
54320: NEG
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 1
54328: PUSH
54329: LD_INT 0
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 1
54338: PUSH
54339: LD_INT 1
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 0
54348: PUSH
54349: LD_INT 1
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 1
54358: NEG
54359: PUSH
54360: LD_INT 0
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 1
54369: NEG
54370: PUSH
54371: LD_INT 1
54373: NEG
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 1
54381: NEG
54382: PUSH
54383: LD_INT 2
54385: NEG
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 0
54393: PUSH
54394: LD_INT 2
54396: NEG
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 1
54404: PUSH
54405: LD_INT 1
54407: NEG
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 2
54415: PUSH
54416: LD_INT 0
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 2
54425: PUSH
54426: LD_INT 1
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 2
54435: PUSH
54436: LD_INT 2
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 1
54445: PUSH
54446: LD_INT 2
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 0
54455: PUSH
54456: LD_INT 2
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 1
54465: NEG
54466: PUSH
54467: LD_INT 1
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 2
54476: NEG
54477: PUSH
54478: LD_INT 0
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 2
54487: NEG
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 2
54499: NEG
54500: PUSH
54501: LD_INT 2
54503: NEG
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54530: LD_ADDR_VAR 0 58
54534: PUSH
54535: LD_INT 0
54537: PUSH
54538: LD_INT 0
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 0
54547: PUSH
54548: LD_INT 1
54550: NEG
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 1
54558: PUSH
54559: LD_INT 0
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 1
54568: PUSH
54569: LD_INT 1
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 0
54578: PUSH
54579: LD_INT 1
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 1
54588: NEG
54589: PUSH
54590: LD_INT 0
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 1
54599: NEG
54600: PUSH
54601: LD_INT 1
54603: NEG
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 1
54611: NEG
54612: PUSH
54613: LD_INT 2
54615: NEG
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 0
54623: PUSH
54624: LD_INT 2
54626: NEG
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 1
54634: PUSH
54635: LD_INT 1
54637: NEG
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 2
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 2
54655: PUSH
54656: LD_INT 1
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 2
54665: PUSH
54666: LD_INT 2
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 1
54675: PUSH
54676: LD_INT 2
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 0
54685: PUSH
54686: LD_INT 2
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 1
54695: NEG
54696: PUSH
54697: LD_INT 1
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 2
54706: NEG
54707: PUSH
54708: LD_INT 0
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 2
54717: NEG
54718: PUSH
54719: LD_INT 1
54721: NEG
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 2
54729: NEG
54730: PUSH
54731: LD_INT 2
54733: NEG
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54760: LD_ADDR_VAR 0 59
54764: PUSH
54765: LD_INT 0
54767: PUSH
54768: LD_INT 0
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 0
54777: PUSH
54778: LD_INT 1
54780: NEG
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 1
54788: PUSH
54789: LD_INT 0
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 1
54798: PUSH
54799: LD_INT 1
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 0
54808: PUSH
54809: LD_INT 1
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 1
54818: NEG
54819: PUSH
54820: LD_INT 0
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 1
54829: NEG
54830: PUSH
54831: LD_INT 1
54833: NEG
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54848: LD_ADDR_VAR 0 60
54852: PUSH
54853: LD_INT 0
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 0
54865: PUSH
54866: LD_INT 1
54868: NEG
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 1
54876: PUSH
54877: LD_INT 0
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 1
54886: PUSH
54887: LD_INT 1
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 0
54896: PUSH
54897: LD_INT 1
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 1
54906: NEG
54907: PUSH
54908: LD_INT 0
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 1
54917: NEG
54918: PUSH
54919: LD_INT 1
54921: NEG
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54936: LD_ADDR_VAR 0 61
54940: PUSH
54941: LD_INT 0
54943: PUSH
54944: LD_INT 0
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 0
54953: PUSH
54954: LD_INT 1
54956: NEG
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 1
54964: PUSH
54965: LD_INT 0
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 1
54974: PUSH
54975: LD_INT 1
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 0
54984: PUSH
54985: LD_INT 1
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 1
54994: NEG
54995: PUSH
54996: LD_INT 0
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 1
55005: NEG
55006: PUSH
55007: LD_INT 1
55009: NEG
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55024: LD_ADDR_VAR 0 62
55028: PUSH
55029: LD_INT 0
55031: PUSH
55032: LD_INT 0
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 0
55041: PUSH
55042: LD_INT 1
55044: NEG
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 1
55052: PUSH
55053: LD_INT 0
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 1
55062: PUSH
55063: LD_INT 1
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 0
55072: PUSH
55073: LD_INT 1
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 1
55082: NEG
55083: PUSH
55084: LD_INT 0
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 1
55093: NEG
55094: PUSH
55095: LD_INT 1
55097: NEG
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55112: LD_ADDR_VAR 0 63
55116: PUSH
55117: LD_INT 0
55119: PUSH
55120: LD_INT 0
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 0
55129: PUSH
55130: LD_INT 1
55132: NEG
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 1
55140: PUSH
55141: LD_INT 0
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 1
55150: PUSH
55151: LD_INT 1
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 0
55160: PUSH
55161: LD_INT 1
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 1
55170: NEG
55171: PUSH
55172: LD_INT 0
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 1
55181: NEG
55182: PUSH
55183: LD_INT 1
55185: NEG
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55200: LD_ADDR_VAR 0 64
55204: PUSH
55205: LD_INT 0
55207: PUSH
55208: LD_INT 0
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 0
55217: PUSH
55218: LD_INT 1
55220: NEG
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 1
55228: PUSH
55229: LD_INT 0
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 1
55238: PUSH
55239: LD_INT 1
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 0
55248: PUSH
55249: LD_INT 1
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 1
55258: NEG
55259: PUSH
55260: LD_INT 0
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 1
55269: NEG
55270: PUSH
55271: LD_INT 1
55273: NEG
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: ST_TO_ADDR
// end ; 1 :
55288: GO 61185
55290: LD_INT 1
55292: DOUBLE
55293: EQUAL
55294: IFTRUE 55298
55296: GO 57921
55298: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55299: LD_ADDR_VAR 0 11
55303: PUSH
55304: LD_INT 1
55306: NEG
55307: PUSH
55308: LD_INT 3
55310: NEG
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 0
55318: PUSH
55319: LD_INT 3
55321: NEG
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 1
55329: PUSH
55330: LD_INT 2
55332: NEG
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: LIST
55342: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55343: LD_ADDR_VAR 0 12
55347: PUSH
55348: LD_INT 2
55350: PUSH
55351: LD_INT 1
55353: NEG
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 3
55361: PUSH
55362: LD_INT 0
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 3
55371: PUSH
55372: LD_INT 1
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: LIST
55383: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55384: LD_ADDR_VAR 0 13
55388: PUSH
55389: LD_INT 3
55391: PUSH
55392: LD_INT 2
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 3
55401: PUSH
55402: LD_INT 3
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 2
55411: PUSH
55412: LD_INT 3
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: LIST
55423: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55424: LD_ADDR_VAR 0 14
55428: PUSH
55429: LD_INT 1
55431: PUSH
55432: LD_INT 3
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 0
55441: PUSH
55442: LD_INT 3
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 1
55451: NEG
55452: PUSH
55453: LD_INT 2
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: LIST
55464: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55465: LD_ADDR_VAR 0 15
55469: PUSH
55470: LD_INT 2
55472: NEG
55473: PUSH
55474: LD_INT 1
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 3
55483: NEG
55484: PUSH
55485: LD_INT 0
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 3
55494: NEG
55495: PUSH
55496: LD_INT 1
55498: NEG
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: LIST
55508: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55509: LD_ADDR_VAR 0 16
55513: PUSH
55514: LD_INT 2
55516: NEG
55517: PUSH
55518: LD_INT 3
55520: NEG
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 3
55528: NEG
55529: PUSH
55530: LD_INT 2
55532: NEG
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 3
55540: NEG
55541: PUSH
55542: LD_INT 3
55544: NEG
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: LIST
55554: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55555: LD_ADDR_VAR 0 17
55559: PUSH
55560: LD_INT 1
55562: NEG
55563: PUSH
55564: LD_INT 3
55566: NEG
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 0
55574: PUSH
55575: LD_INT 3
55577: NEG
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 1
55585: PUSH
55586: LD_INT 2
55588: NEG
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: LIST
55598: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55599: LD_ADDR_VAR 0 18
55603: PUSH
55604: LD_INT 2
55606: PUSH
55607: LD_INT 1
55609: NEG
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 3
55617: PUSH
55618: LD_INT 0
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 3
55627: PUSH
55628: LD_INT 1
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: LIST
55639: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55640: LD_ADDR_VAR 0 19
55644: PUSH
55645: LD_INT 3
55647: PUSH
55648: LD_INT 2
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 3
55657: PUSH
55658: LD_INT 3
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 2
55667: PUSH
55668: LD_INT 3
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: LIST
55679: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55680: LD_ADDR_VAR 0 20
55684: PUSH
55685: LD_INT 1
55687: PUSH
55688: LD_INT 3
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 0
55697: PUSH
55698: LD_INT 3
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 1
55707: NEG
55708: PUSH
55709: LD_INT 2
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: LIST
55720: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55721: LD_ADDR_VAR 0 21
55725: PUSH
55726: LD_INT 2
55728: NEG
55729: PUSH
55730: LD_INT 1
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 3
55739: NEG
55740: PUSH
55741: LD_INT 0
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 3
55750: NEG
55751: PUSH
55752: LD_INT 1
55754: NEG
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: LIST
55764: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55765: LD_ADDR_VAR 0 22
55769: PUSH
55770: LD_INT 2
55772: NEG
55773: PUSH
55774: LD_INT 3
55776: NEG
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 3
55784: NEG
55785: PUSH
55786: LD_INT 2
55788: NEG
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 3
55796: NEG
55797: PUSH
55798: LD_INT 3
55800: NEG
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: LIST
55810: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55811: LD_ADDR_VAR 0 23
55815: PUSH
55816: LD_INT 0
55818: PUSH
55819: LD_INT 3
55821: NEG
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 1
55829: NEG
55830: PUSH
55831: LD_INT 4
55833: NEG
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 1
55841: PUSH
55842: LD_INT 3
55844: NEG
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: LIST
55854: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55855: LD_ADDR_VAR 0 24
55859: PUSH
55860: LD_INT 3
55862: PUSH
55863: LD_INT 0
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 3
55872: PUSH
55873: LD_INT 1
55875: NEG
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 4
55883: PUSH
55884: LD_INT 1
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: LIST
55895: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55896: LD_ADDR_VAR 0 25
55900: PUSH
55901: LD_INT 3
55903: PUSH
55904: LD_INT 3
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 4
55913: PUSH
55914: LD_INT 3
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 3
55923: PUSH
55924: LD_INT 4
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: LIST
55935: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55936: LD_ADDR_VAR 0 26
55940: PUSH
55941: LD_INT 0
55943: PUSH
55944: LD_INT 3
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 1
55953: PUSH
55954: LD_INT 4
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 1
55963: NEG
55964: PUSH
55965: LD_INT 3
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: LIST
55976: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55977: LD_ADDR_VAR 0 27
55981: PUSH
55982: LD_INT 3
55984: NEG
55985: PUSH
55986: LD_INT 0
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 3
55995: NEG
55996: PUSH
55997: LD_INT 1
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 4
56006: NEG
56007: PUSH
56008: LD_INT 1
56010: NEG
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: LIST
56020: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56021: LD_ADDR_VAR 0 28
56025: PUSH
56026: LD_INT 3
56028: NEG
56029: PUSH
56030: LD_INT 3
56032: NEG
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 3
56040: NEG
56041: PUSH
56042: LD_INT 4
56044: NEG
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 4
56052: NEG
56053: PUSH
56054: LD_INT 3
56056: NEG
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: LIST
56066: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56067: LD_ADDR_VAR 0 29
56071: PUSH
56072: LD_INT 1
56074: NEG
56075: PUSH
56076: LD_INT 3
56078: NEG
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 0
56086: PUSH
56087: LD_INT 3
56089: NEG
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 1
56097: PUSH
56098: LD_INT 2
56100: NEG
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 1
56108: NEG
56109: PUSH
56110: LD_INT 4
56112: NEG
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 0
56120: PUSH
56121: LD_INT 4
56123: NEG
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 1
56131: PUSH
56132: LD_INT 3
56134: NEG
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 1
56142: NEG
56143: PUSH
56144: LD_INT 5
56146: NEG
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 0
56154: PUSH
56155: LD_INT 5
56157: NEG
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 1
56165: PUSH
56166: LD_INT 4
56168: NEG
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 1
56176: NEG
56177: PUSH
56178: LD_INT 6
56180: NEG
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 0
56188: PUSH
56189: LD_INT 6
56191: NEG
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 1
56199: PUSH
56200: LD_INT 5
56202: NEG
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56222: LD_ADDR_VAR 0 30
56226: PUSH
56227: LD_INT 2
56229: PUSH
56230: LD_INT 1
56232: NEG
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 3
56240: PUSH
56241: LD_INT 0
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 3
56250: PUSH
56251: LD_INT 1
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 3
56260: PUSH
56261: LD_INT 1
56263: NEG
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 4
56271: PUSH
56272: LD_INT 0
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 4
56281: PUSH
56282: LD_INT 1
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 4
56291: PUSH
56292: LD_INT 1
56294: NEG
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 5
56302: PUSH
56303: LD_INT 0
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 5
56312: PUSH
56313: LD_INT 1
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 5
56322: PUSH
56323: LD_INT 1
56325: NEG
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 6
56333: PUSH
56334: LD_INT 0
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 6
56343: PUSH
56344: LD_INT 1
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56365: LD_ADDR_VAR 0 31
56369: PUSH
56370: LD_INT 3
56372: PUSH
56373: LD_INT 2
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 3
56382: PUSH
56383: LD_INT 3
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 2
56392: PUSH
56393: LD_INT 3
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 4
56402: PUSH
56403: LD_INT 3
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 4
56412: PUSH
56413: LD_INT 4
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 3
56422: PUSH
56423: LD_INT 4
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 5
56432: PUSH
56433: LD_INT 4
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 5
56442: PUSH
56443: LD_INT 5
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 4
56452: PUSH
56453: LD_INT 5
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 6
56462: PUSH
56463: LD_INT 5
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 6
56472: PUSH
56473: LD_INT 6
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 5
56482: PUSH
56483: LD_INT 6
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56504: LD_ADDR_VAR 0 32
56508: PUSH
56509: LD_INT 1
56511: PUSH
56512: LD_INT 3
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 0
56521: PUSH
56522: LD_INT 3
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 1
56531: NEG
56532: PUSH
56533: LD_INT 2
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 1
56542: PUSH
56543: LD_INT 4
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 0
56552: PUSH
56553: LD_INT 4
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 1
56562: NEG
56563: PUSH
56564: LD_INT 3
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 1
56573: PUSH
56574: LD_INT 5
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 0
56583: PUSH
56584: LD_INT 5
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 1
56593: NEG
56594: PUSH
56595: LD_INT 4
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 1
56604: PUSH
56605: LD_INT 6
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 0
56614: PUSH
56615: LD_INT 6
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 1
56624: NEG
56625: PUSH
56626: LD_INT 5
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56647: LD_ADDR_VAR 0 33
56651: PUSH
56652: LD_INT 2
56654: NEG
56655: PUSH
56656: LD_INT 1
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 3
56665: NEG
56666: PUSH
56667: LD_INT 0
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 3
56676: NEG
56677: PUSH
56678: LD_INT 1
56680: NEG
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 3
56688: NEG
56689: PUSH
56690: LD_INT 1
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 4
56699: NEG
56700: PUSH
56701: LD_INT 0
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 4
56710: NEG
56711: PUSH
56712: LD_INT 1
56714: NEG
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 4
56722: NEG
56723: PUSH
56724: LD_INT 1
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 5
56733: NEG
56734: PUSH
56735: LD_INT 0
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 5
56744: NEG
56745: PUSH
56746: LD_INT 1
56748: NEG
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 5
56756: NEG
56757: PUSH
56758: LD_INT 1
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 6
56767: NEG
56768: PUSH
56769: LD_INT 0
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 6
56778: NEG
56779: PUSH
56780: LD_INT 1
56782: NEG
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56802: LD_ADDR_VAR 0 34
56806: PUSH
56807: LD_INT 2
56809: NEG
56810: PUSH
56811: LD_INT 3
56813: NEG
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 3
56821: NEG
56822: PUSH
56823: LD_INT 2
56825: NEG
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 3
56833: NEG
56834: PUSH
56835: LD_INT 3
56837: NEG
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 3
56845: NEG
56846: PUSH
56847: LD_INT 4
56849: NEG
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 4
56857: NEG
56858: PUSH
56859: LD_INT 3
56861: NEG
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 4
56869: NEG
56870: PUSH
56871: LD_INT 4
56873: NEG
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 4
56881: NEG
56882: PUSH
56883: LD_INT 5
56885: NEG
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 5
56893: NEG
56894: PUSH
56895: LD_INT 4
56897: NEG
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 5
56905: NEG
56906: PUSH
56907: LD_INT 5
56909: NEG
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 5
56917: NEG
56918: PUSH
56919: LD_INT 6
56921: NEG
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 6
56929: NEG
56930: PUSH
56931: LD_INT 5
56933: NEG
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 6
56941: NEG
56942: PUSH
56943: LD_INT 6
56945: NEG
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56965: LD_ADDR_VAR 0 41
56969: PUSH
56970: LD_INT 0
56972: PUSH
56973: LD_INT 2
56975: NEG
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 1
56983: NEG
56984: PUSH
56985: LD_INT 3
56987: NEG
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 1
56995: PUSH
56996: LD_INT 2
56998: NEG
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: LIST
57008: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57009: LD_ADDR_VAR 0 42
57013: PUSH
57014: LD_INT 2
57016: PUSH
57017: LD_INT 0
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 2
57026: PUSH
57027: LD_INT 1
57029: NEG
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 3
57037: PUSH
57038: LD_INT 1
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: LIST
57049: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57050: LD_ADDR_VAR 0 43
57054: PUSH
57055: LD_INT 2
57057: PUSH
57058: LD_INT 2
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 3
57067: PUSH
57068: LD_INT 2
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 2
57077: PUSH
57078: LD_INT 3
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: LIST
57089: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57090: LD_ADDR_VAR 0 44
57094: PUSH
57095: LD_INT 0
57097: PUSH
57098: LD_INT 2
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 1
57107: PUSH
57108: LD_INT 3
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 1
57117: NEG
57118: PUSH
57119: LD_INT 2
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: LIST
57130: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57131: LD_ADDR_VAR 0 45
57135: PUSH
57136: LD_INT 2
57138: NEG
57139: PUSH
57140: LD_INT 0
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 2
57149: NEG
57150: PUSH
57151: LD_INT 1
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 3
57160: NEG
57161: PUSH
57162: LD_INT 1
57164: NEG
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: LIST
57174: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57175: LD_ADDR_VAR 0 46
57179: PUSH
57180: LD_INT 2
57182: NEG
57183: PUSH
57184: LD_INT 2
57186: NEG
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 2
57194: NEG
57195: PUSH
57196: LD_INT 3
57198: NEG
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 3
57206: NEG
57207: PUSH
57208: LD_INT 2
57210: NEG
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: LIST
57220: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57221: LD_ADDR_VAR 0 47
57225: PUSH
57226: LD_INT 2
57228: NEG
57229: PUSH
57230: LD_INT 3
57232: NEG
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 1
57240: NEG
57241: PUSH
57242: LD_INT 3
57244: NEG
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57254: LD_ADDR_VAR 0 48
57258: PUSH
57259: LD_INT 1
57261: PUSH
57262: LD_INT 2
57264: NEG
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 2
57272: PUSH
57273: LD_INT 1
57275: NEG
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57285: LD_ADDR_VAR 0 49
57289: PUSH
57290: LD_INT 3
57292: PUSH
57293: LD_INT 1
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 3
57302: PUSH
57303: LD_INT 2
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57314: LD_ADDR_VAR 0 50
57318: PUSH
57319: LD_INT 2
57321: PUSH
57322: LD_INT 3
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 1
57331: PUSH
57332: LD_INT 3
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57343: LD_ADDR_VAR 0 51
57347: PUSH
57348: LD_INT 1
57350: NEG
57351: PUSH
57352: LD_INT 2
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 2
57361: NEG
57362: PUSH
57363: LD_INT 1
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57374: LD_ADDR_VAR 0 52
57378: PUSH
57379: LD_INT 3
57381: NEG
57382: PUSH
57383: LD_INT 1
57385: NEG
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 3
57393: NEG
57394: PUSH
57395: LD_INT 2
57397: NEG
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57407: LD_ADDR_VAR 0 53
57411: PUSH
57412: LD_INT 1
57414: NEG
57415: PUSH
57416: LD_INT 3
57418: NEG
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 0
57426: PUSH
57427: LD_INT 3
57429: NEG
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 1
57437: PUSH
57438: LD_INT 2
57440: NEG
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: LIST
57450: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57451: LD_ADDR_VAR 0 54
57455: PUSH
57456: LD_INT 2
57458: PUSH
57459: LD_INT 1
57461: NEG
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 3
57469: PUSH
57470: LD_INT 0
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 3
57479: PUSH
57480: LD_INT 1
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: LIST
57491: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57492: LD_ADDR_VAR 0 55
57496: PUSH
57497: LD_INT 3
57499: PUSH
57500: LD_INT 2
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 3
57509: PUSH
57510: LD_INT 3
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 2
57519: PUSH
57520: LD_INT 3
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: LIST
57531: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57532: LD_ADDR_VAR 0 56
57536: PUSH
57537: LD_INT 1
57539: PUSH
57540: LD_INT 3
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 0
57549: PUSH
57550: LD_INT 3
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 1
57559: NEG
57560: PUSH
57561: LD_INT 2
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: LIST
57572: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57573: LD_ADDR_VAR 0 57
57577: PUSH
57578: LD_INT 2
57580: NEG
57581: PUSH
57582: LD_INT 1
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 3
57591: NEG
57592: PUSH
57593: LD_INT 0
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 3
57602: NEG
57603: PUSH
57604: LD_INT 1
57606: NEG
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: LIST
57616: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57617: LD_ADDR_VAR 0 58
57621: PUSH
57622: LD_INT 2
57624: NEG
57625: PUSH
57626: LD_INT 3
57628: NEG
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 3
57636: NEG
57637: PUSH
57638: LD_INT 2
57640: NEG
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 3
57648: NEG
57649: PUSH
57650: LD_INT 3
57652: NEG
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: LIST
57662: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57663: LD_ADDR_VAR 0 59
57667: PUSH
57668: LD_INT 1
57670: NEG
57671: PUSH
57672: LD_INT 2
57674: NEG
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 0
57682: PUSH
57683: LD_INT 2
57685: NEG
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 1
57693: PUSH
57694: LD_INT 1
57696: NEG
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: LIST
57706: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57707: LD_ADDR_VAR 0 60
57711: PUSH
57712: LD_INT 1
57714: PUSH
57715: LD_INT 1
57717: NEG
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 2
57725: PUSH
57726: LD_INT 0
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 2
57735: PUSH
57736: LD_INT 1
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: LIST
57747: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57748: LD_ADDR_VAR 0 61
57752: PUSH
57753: LD_INT 2
57755: PUSH
57756: LD_INT 1
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 2
57765: PUSH
57766: LD_INT 2
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 1
57775: PUSH
57776: LD_INT 2
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: LIST
57787: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57788: LD_ADDR_VAR 0 62
57792: PUSH
57793: LD_INT 1
57795: PUSH
57796: LD_INT 2
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 0
57805: PUSH
57806: LD_INT 2
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 1
57815: NEG
57816: PUSH
57817: LD_INT 1
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: LIST
57828: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57829: LD_ADDR_VAR 0 63
57833: PUSH
57834: LD_INT 1
57836: NEG
57837: PUSH
57838: LD_INT 1
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 2
57847: NEG
57848: PUSH
57849: LD_INT 0
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 2
57858: NEG
57859: PUSH
57860: LD_INT 1
57862: NEG
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: LIST
57872: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57873: LD_ADDR_VAR 0 64
57877: PUSH
57878: LD_INT 1
57880: NEG
57881: PUSH
57882: LD_INT 2
57884: NEG
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 2
57892: NEG
57893: PUSH
57894: LD_INT 1
57896: NEG
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 2
57904: NEG
57905: PUSH
57906: LD_INT 2
57908: NEG
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: LIST
57918: ST_TO_ADDR
// end ; 2 :
57919: GO 61185
57921: LD_INT 2
57923: DOUBLE
57924: EQUAL
57925: IFTRUE 57929
57927: GO 61184
57929: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57930: LD_ADDR_VAR 0 29
57934: PUSH
57935: LD_INT 4
57937: PUSH
57938: LD_INT 0
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 4
57947: PUSH
57948: LD_INT 1
57950: NEG
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 5
57958: PUSH
57959: LD_INT 0
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 5
57968: PUSH
57969: LD_INT 1
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 4
57978: PUSH
57979: LD_INT 1
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 3
57988: PUSH
57989: LD_INT 0
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 3
57998: PUSH
57999: LD_INT 1
58001: NEG
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 3
58009: PUSH
58010: LD_INT 2
58012: NEG
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 5
58020: PUSH
58021: LD_INT 2
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 3
58030: PUSH
58031: LD_INT 3
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 3
58040: PUSH
58041: LD_INT 2
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 4
58050: PUSH
58051: LD_INT 3
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 4
58060: PUSH
58061: LD_INT 4
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 3
58070: PUSH
58071: LD_INT 4
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 2
58080: PUSH
58081: LD_INT 3
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 2
58090: PUSH
58091: LD_INT 2
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 4
58100: PUSH
58101: LD_INT 2
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 2
58110: PUSH
58111: LD_INT 4
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 0
58120: PUSH
58121: LD_INT 4
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 0
58130: PUSH
58131: LD_INT 3
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 1
58140: PUSH
58141: LD_INT 4
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 1
58150: PUSH
58151: LD_INT 5
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 0
58160: PUSH
58161: LD_INT 5
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 1
58170: NEG
58171: PUSH
58172: LD_INT 4
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 1
58181: NEG
58182: PUSH
58183: LD_INT 3
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 2
58192: PUSH
58193: LD_INT 5
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 2
58202: NEG
58203: PUSH
58204: LD_INT 3
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 3
58213: NEG
58214: PUSH
58215: LD_INT 0
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 3
58224: NEG
58225: PUSH
58226: LD_INT 1
58228: NEG
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 2
58236: NEG
58237: PUSH
58238: LD_INT 0
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 2
58247: NEG
58248: PUSH
58249: LD_INT 1
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 3
58258: NEG
58259: PUSH
58260: LD_INT 1
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 4
58269: NEG
58270: PUSH
58271: LD_INT 0
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 4
58280: NEG
58281: PUSH
58282: LD_INT 1
58284: NEG
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 4
58292: NEG
58293: PUSH
58294: LD_INT 2
58296: NEG
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 2
58304: NEG
58305: PUSH
58306: LD_INT 2
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 4
58315: NEG
58316: PUSH
58317: LD_INT 4
58319: NEG
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 4
58327: NEG
58328: PUSH
58329: LD_INT 5
58331: NEG
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 3
58339: NEG
58340: PUSH
58341: LD_INT 4
58343: NEG
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 3
58351: NEG
58352: PUSH
58353: LD_INT 3
58355: NEG
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 4
58363: NEG
58364: PUSH
58365: LD_INT 3
58367: NEG
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 5
58375: NEG
58376: PUSH
58377: LD_INT 4
58379: NEG
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 5
58387: NEG
58388: PUSH
58389: LD_INT 5
58391: NEG
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 3
58399: NEG
58400: PUSH
58401: LD_INT 5
58403: NEG
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 5
58411: NEG
58412: PUSH
58413: LD_INT 3
58415: NEG
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58468: LD_ADDR_VAR 0 30
58472: PUSH
58473: LD_INT 4
58475: PUSH
58476: LD_INT 4
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 4
58485: PUSH
58486: LD_INT 3
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 5
58495: PUSH
58496: LD_INT 4
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 5
58505: PUSH
58506: LD_INT 5
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 4
58515: PUSH
58516: LD_INT 5
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 3
58525: PUSH
58526: LD_INT 4
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 3
58535: PUSH
58536: LD_INT 3
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 5
58545: PUSH
58546: LD_INT 3
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 3
58555: PUSH
58556: LD_INT 5
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 0
58565: PUSH
58566: LD_INT 3
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 0
58575: PUSH
58576: LD_INT 2
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 1
58585: PUSH
58586: LD_INT 3
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 1
58595: PUSH
58596: LD_INT 4
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 0
58605: PUSH
58606: LD_INT 4
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 1
58615: NEG
58616: PUSH
58617: LD_INT 3
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 1
58626: NEG
58627: PUSH
58628: LD_INT 2
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 2
58637: PUSH
58638: LD_INT 4
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 2
58647: NEG
58648: PUSH
58649: LD_INT 2
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 4
58658: NEG
58659: PUSH
58660: LD_INT 0
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 4
58669: NEG
58670: PUSH
58671: LD_INT 1
58673: NEG
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 3
58681: NEG
58682: PUSH
58683: LD_INT 0
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 3
58692: NEG
58693: PUSH
58694: LD_INT 1
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 4
58703: NEG
58704: PUSH
58705: LD_INT 1
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 5
58714: NEG
58715: PUSH
58716: LD_INT 0
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 5
58725: NEG
58726: PUSH
58727: LD_INT 1
58729: NEG
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 5
58737: NEG
58738: PUSH
58739: LD_INT 2
58741: NEG
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 3
58749: NEG
58750: PUSH
58751: LD_INT 2
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 3
58760: NEG
58761: PUSH
58762: LD_INT 3
58764: NEG
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 3
58772: NEG
58773: PUSH
58774: LD_INT 4
58776: NEG
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 2
58784: NEG
58785: PUSH
58786: LD_INT 3
58788: NEG
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 2
58796: NEG
58797: PUSH
58798: LD_INT 2
58800: NEG
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 3
58808: NEG
58809: PUSH
58810: LD_INT 2
58812: NEG
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 4
58820: NEG
58821: PUSH
58822: LD_INT 3
58824: NEG
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 4
58832: NEG
58833: PUSH
58834: LD_INT 4
58836: NEG
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 2
58844: NEG
58845: PUSH
58846: LD_INT 4
58848: NEG
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 4
58856: NEG
58857: PUSH
58858: LD_INT 2
58860: NEG
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 0
58868: PUSH
58869: LD_INT 4
58871: NEG
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 0
58879: PUSH
58880: LD_INT 5
58882: NEG
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 1
58890: PUSH
58891: LD_INT 4
58893: NEG
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 1
58901: PUSH
58902: LD_INT 3
58904: NEG
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 0
58912: PUSH
58913: LD_INT 3
58915: NEG
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 1
58923: NEG
58924: PUSH
58925: LD_INT 4
58927: NEG
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 1
58935: NEG
58936: PUSH
58937: LD_INT 5
58939: NEG
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 2
58947: PUSH
58948: LD_INT 3
58950: NEG
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 2
58958: NEG
58959: PUSH
58960: LD_INT 5
58962: NEG
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59015: LD_ADDR_VAR 0 31
59019: PUSH
59020: LD_INT 0
59022: PUSH
59023: LD_INT 4
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 0
59032: PUSH
59033: LD_INT 3
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 1
59042: PUSH
59043: LD_INT 4
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 1
59052: PUSH
59053: LD_INT 5
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 0
59062: PUSH
59063: LD_INT 5
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 1
59072: NEG
59073: PUSH
59074: LD_INT 4
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 1
59083: NEG
59084: PUSH
59085: LD_INT 3
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 2
59094: PUSH
59095: LD_INT 5
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 2
59104: NEG
59105: PUSH
59106: LD_INT 3
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 3
59115: NEG
59116: PUSH
59117: LD_INT 0
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 3
59126: NEG
59127: PUSH
59128: LD_INT 1
59130: NEG
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 2
59138: NEG
59139: PUSH
59140: LD_INT 0
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 2
59149: NEG
59150: PUSH
59151: LD_INT 1
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 3
59160: NEG
59161: PUSH
59162: LD_INT 1
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 4
59171: NEG
59172: PUSH
59173: LD_INT 0
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 4
59182: NEG
59183: PUSH
59184: LD_INT 1
59186: NEG
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 4
59194: NEG
59195: PUSH
59196: LD_INT 2
59198: NEG
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 2
59206: NEG
59207: PUSH
59208: LD_INT 2
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 4
59217: NEG
59218: PUSH
59219: LD_INT 4
59221: NEG
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 4
59229: NEG
59230: PUSH
59231: LD_INT 5
59233: NEG
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 3
59241: NEG
59242: PUSH
59243: LD_INT 4
59245: NEG
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 3
59253: NEG
59254: PUSH
59255: LD_INT 3
59257: NEG
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 4
59265: NEG
59266: PUSH
59267: LD_INT 3
59269: NEG
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 5
59277: NEG
59278: PUSH
59279: LD_INT 4
59281: NEG
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 5
59289: NEG
59290: PUSH
59291: LD_INT 5
59293: NEG
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 3
59301: NEG
59302: PUSH
59303: LD_INT 5
59305: NEG
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 5
59313: NEG
59314: PUSH
59315: LD_INT 3
59317: NEG
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 0
59325: PUSH
59326: LD_INT 3
59328: NEG
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 0
59336: PUSH
59337: LD_INT 4
59339: NEG
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 1
59347: PUSH
59348: LD_INT 3
59350: NEG
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 1
59358: PUSH
59359: LD_INT 2
59361: NEG
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 0
59369: PUSH
59370: LD_INT 2
59372: NEG
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 1
59380: NEG
59381: PUSH
59382: LD_INT 3
59384: NEG
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 1
59392: NEG
59393: PUSH
59394: LD_INT 4
59396: NEG
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 2
59404: PUSH
59405: LD_INT 2
59407: NEG
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 2
59415: NEG
59416: PUSH
59417: LD_INT 4
59419: NEG
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 4
59427: PUSH
59428: LD_INT 0
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 4
59437: PUSH
59438: LD_INT 1
59440: NEG
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 5
59448: PUSH
59449: LD_INT 0
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 5
59458: PUSH
59459: LD_INT 1
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 4
59468: PUSH
59469: LD_INT 1
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 3
59478: PUSH
59479: LD_INT 0
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 3
59488: PUSH
59489: LD_INT 1
59491: NEG
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 3
59499: PUSH
59500: LD_INT 2
59502: NEG
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 5
59510: PUSH
59511: LD_INT 2
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59565: LD_ADDR_VAR 0 32
59569: PUSH
59570: LD_INT 4
59572: NEG
59573: PUSH
59574: LD_INT 0
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: LD_INT 4
59583: NEG
59584: PUSH
59585: LD_INT 1
59587: NEG
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 3
59595: NEG
59596: PUSH
59597: LD_INT 0
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 3
59606: NEG
59607: PUSH
59608: LD_INT 1
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 4
59617: NEG
59618: PUSH
59619: LD_INT 1
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 5
59628: NEG
59629: PUSH
59630: LD_INT 0
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 5
59639: NEG
59640: PUSH
59641: LD_INT 1
59643: NEG
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 5
59651: NEG
59652: PUSH
59653: LD_INT 2
59655: NEG
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 3
59663: NEG
59664: PUSH
59665: LD_INT 2
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 3
59674: NEG
59675: PUSH
59676: LD_INT 3
59678: NEG
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 3
59686: NEG
59687: PUSH
59688: LD_INT 4
59690: NEG
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 2
59698: NEG
59699: PUSH
59700: LD_INT 3
59702: NEG
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 2
59710: NEG
59711: PUSH
59712: LD_INT 2
59714: NEG
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 3
59722: NEG
59723: PUSH
59724: LD_INT 2
59726: NEG
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 4
59734: NEG
59735: PUSH
59736: LD_INT 3
59738: NEG
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 4
59746: NEG
59747: PUSH
59748: LD_INT 4
59750: NEG
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 2
59758: NEG
59759: PUSH
59760: LD_INT 4
59762: NEG
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 4
59770: NEG
59771: PUSH
59772: LD_INT 2
59774: NEG
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 0
59782: PUSH
59783: LD_INT 4
59785: NEG
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 0
59793: PUSH
59794: LD_INT 5
59796: NEG
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 1
59804: PUSH
59805: LD_INT 4
59807: NEG
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 1
59815: PUSH
59816: LD_INT 3
59818: NEG
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 0
59826: PUSH
59827: LD_INT 3
59829: NEG
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 1
59837: NEG
59838: PUSH
59839: LD_INT 4
59841: NEG
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 1
59849: NEG
59850: PUSH
59851: LD_INT 5
59853: NEG
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 2
59861: PUSH
59862: LD_INT 3
59864: NEG
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 2
59872: NEG
59873: PUSH
59874: LD_INT 5
59876: NEG
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 3
59884: PUSH
59885: LD_INT 0
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 3
59894: PUSH
59895: LD_INT 1
59897: NEG
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 4
59905: PUSH
59906: LD_INT 0
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 4
59915: PUSH
59916: LD_INT 1
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 3
59925: PUSH
59926: LD_INT 1
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 2
59935: PUSH
59936: LD_INT 0
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 2
59945: PUSH
59946: LD_INT 1
59948: NEG
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 2
59956: PUSH
59957: LD_INT 2
59959: NEG
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 4
59967: PUSH
59968: LD_INT 2
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: LD_INT 4
59977: PUSH
59978: LD_INT 4
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 4
59987: PUSH
59988: LD_INT 3
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 5
59997: PUSH
59998: LD_INT 4
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 5
60007: PUSH
60008: LD_INT 5
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 4
60017: PUSH
60018: LD_INT 5
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 3
60027: PUSH
60028: LD_INT 4
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 3
60037: PUSH
60038: LD_INT 3
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 5
60047: PUSH
60048: LD_INT 3
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 3
60057: PUSH
60058: LD_INT 5
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60112: LD_ADDR_VAR 0 33
60116: PUSH
60117: LD_INT 4
60119: NEG
60120: PUSH
60121: LD_INT 4
60123: NEG
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 4
60131: NEG
60132: PUSH
60133: LD_INT 5
60135: NEG
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 3
60143: NEG
60144: PUSH
60145: LD_INT 4
60147: NEG
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 3
60155: NEG
60156: PUSH
60157: LD_INT 3
60159: NEG
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 4
60167: NEG
60168: PUSH
60169: LD_INT 3
60171: NEG
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 5
60179: NEG
60180: PUSH
60181: LD_INT 4
60183: NEG
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 5
60191: NEG
60192: PUSH
60193: LD_INT 5
60195: NEG
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 3
60203: NEG
60204: PUSH
60205: LD_INT 5
60207: NEG
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 5
60215: NEG
60216: PUSH
60217: LD_INT 3
60219: NEG
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 0
60227: PUSH
60228: LD_INT 3
60230: NEG
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 0
60238: PUSH
60239: LD_INT 4
60241: NEG
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 1
60249: PUSH
60250: LD_INT 3
60252: NEG
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 1
60260: PUSH
60261: LD_INT 2
60263: NEG
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 0
60271: PUSH
60272: LD_INT 2
60274: NEG
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 1
60282: NEG
60283: PUSH
60284: LD_INT 3
60286: NEG
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 1
60294: NEG
60295: PUSH
60296: LD_INT 4
60298: NEG
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 2
60306: PUSH
60307: LD_INT 2
60309: NEG
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 2
60317: NEG
60318: PUSH
60319: LD_INT 4
60321: NEG
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 4
60329: PUSH
60330: LD_INT 0
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 4
60339: PUSH
60340: LD_INT 1
60342: NEG
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 5
60350: PUSH
60351: LD_INT 0
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 5
60360: PUSH
60361: LD_INT 1
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 4
60370: PUSH
60371: LD_INT 1
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 3
60380: PUSH
60381: LD_INT 0
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 3
60390: PUSH
60391: LD_INT 1
60393: NEG
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 3
60401: PUSH
60402: LD_INT 2
60404: NEG
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 5
60412: PUSH
60413: LD_INT 2
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 3
60422: PUSH
60423: LD_INT 3
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 3
60432: PUSH
60433: LD_INT 2
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 4
60442: PUSH
60443: LD_INT 3
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 4
60452: PUSH
60453: LD_INT 4
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 3
60462: PUSH
60463: LD_INT 4
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 2
60472: PUSH
60473: LD_INT 3
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 2
60482: PUSH
60483: LD_INT 2
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 4
60492: PUSH
60493: LD_INT 2
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 2
60502: PUSH
60503: LD_INT 4
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 0
60512: PUSH
60513: LD_INT 4
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 0
60522: PUSH
60523: LD_INT 3
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 1
60532: PUSH
60533: LD_INT 4
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 1
60542: PUSH
60543: LD_INT 5
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 0
60552: PUSH
60553: LD_INT 5
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 1
60562: NEG
60563: PUSH
60564: LD_INT 4
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 1
60573: NEG
60574: PUSH
60575: LD_INT 3
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 2
60584: PUSH
60585: LD_INT 5
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 2
60594: NEG
60595: PUSH
60596: LD_INT 3
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60650: LD_ADDR_VAR 0 34
60654: PUSH
60655: LD_INT 0
60657: PUSH
60658: LD_INT 4
60660: NEG
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 0
60668: PUSH
60669: LD_INT 5
60671: NEG
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 1
60679: PUSH
60680: LD_INT 4
60682: NEG
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 1
60690: PUSH
60691: LD_INT 3
60693: NEG
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 0
60701: PUSH
60702: LD_INT 3
60704: NEG
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 1
60712: NEG
60713: PUSH
60714: LD_INT 4
60716: NEG
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 1
60724: NEG
60725: PUSH
60726: LD_INT 5
60728: NEG
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 2
60736: PUSH
60737: LD_INT 3
60739: NEG
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 2
60747: NEG
60748: PUSH
60749: LD_INT 5
60751: NEG
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 3
60759: PUSH
60760: LD_INT 0
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 3
60769: PUSH
60770: LD_INT 1
60772: NEG
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PUSH
60778: LD_INT 4
60780: PUSH
60781: LD_INT 0
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 4
60790: PUSH
60791: LD_INT 1
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 3
60800: PUSH
60801: LD_INT 1
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 2
60810: PUSH
60811: LD_INT 0
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 2
60820: PUSH
60821: LD_INT 1
60823: NEG
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 2
60831: PUSH
60832: LD_INT 2
60834: NEG
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 4
60842: PUSH
60843: LD_INT 2
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 4
60852: PUSH
60853: LD_INT 4
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 4
60862: PUSH
60863: LD_INT 3
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 5
60872: PUSH
60873: LD_INT 4
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 5
60882: PUSH
60883: LD_INT 5
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 4
60892: PUSH
60893: LD_INT 5
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 3
60902: PUSH
60903: LD_INT 4
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 3
60912: PUSH
60913: LD_INT 3
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 5
60922: PUSH
60923: LD_INT 3
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 3
60932: PUSH
60933: LD_INT 5
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: LD_INT 0
60942: PUSH
60943: LD_INT 3
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 0
60952: PUSH
60953: LD_INT 2
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 1
60962: PUSH
60963: LD_INT 3
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 1
60972: PUSH
60973: LD_INT 4
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 0
60982: PUSH
60983: LD_INT 4
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 1
60992: NEG
60993: PUSH
60994: LD_INT 3
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 1
61003: NEG
61004: PUSH
61005: LD_INT 2
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 2
61014: PUSH
61015: LD_INT 4
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 2
61024: NEG
61025: PUSH
61026: LD_INT 2
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PUSH
61033: LD_INT 4
61035: NEG
61036: PUSH
61037: LD_INT 0
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 4
61046: NEG
61047: PUSH
61048: LD_INT 1
61050: NEG
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 3
61058: NEG
61059: PUSH
61060: LD_INT 0
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 3
61069: NEG
61070: PUSH
61071: LD_INT 1
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 4
61080: NEG
61081: PUSH
61082: LD_INT 1
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 5
61091: NEG
61092: PUSH
61093: LD_INT 0
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 5
61102: NEG
61103: PUSH
61104: LD_INT 1
61106: NEG
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 5
61114: NEG
61115: PUSH
61116: LD_INT 2
61118: NEG
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 3
61126: NEG
61127: PUSH
61128: LD_INT 2
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: ST_TO_ADDR
// end ; end ;
61182: GO 61185
61184: POP
// case btype of b_depot , b_warehouse :
61185: LD_VAR 0 1
61189: PUSH
61190: LD_INT 0
61192: DOUBLE
61193: EQUAL
61194: IFTRUE 61204
61196: LD_INT 1
61198: DOUBLE
61199: EQUAL
61200: IFTRUE 61204
61202: GO 61405
61204: POP
// case nation of nation_american :
61205: LD_VAR 0 5
61209: PUSH
61210: LD_INT 1
61212: DOUBLE
61213: EQUAL
61214: IFTRUE 61218
61216: GO 61274
61218: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61219: LD_ADDR_VAR 0 9
61223: PUSH
61224: LD_VAR 0 11
61228: PUSH
61229: LD_VAR 0 12
61233: PUSH
61234: LD_VAR 0 13
61238: PUSH
61239: LD_VAR 0 14
61243: PUSH
61244: LD_VAR 0 15
61248: PUSH
61249: LD_VAR 0 16
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: PUSH
61262: LD_VAR 0 4
61266: PUSH
61267: LD_INT 1
61269: PLUS
61270: ARRAY
61271: ST_TO_ADDR
61272: GO 61403
61274: LD_INT 2
61276: DOUBLE
61277: EQUAL
61278: IFTRUE 61282
61280: GO 61338
61282: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61283: LD_ADDR_VAR 0 9
61287: PUSH
61288: LD_VAR 0 17
61292: PUSH
61293: LD_VAR 0 18
61297: PUSH
61298: LD_VAR 0 19
61302: PUSH
61303: LD_VAR 0 20
61307: PUSH
61308: LD_VAR 0 21
61312: PUSH
61313: LD_VAR 0 22
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: PUSH
61326: LD_VAR 0 4
61330: PUSH
61331: LD_INT 1
61333: PLUS
61334: ARRAY
61335: ST_TO_ADDR
61336: GO 61403
61338: LD_INT 3
61340: DOUBLE
61341: EQUAL
61342: IFTRUE 61346
61344: GO 61402
61346: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61347: LD_ADDR_VAR 0 9
61351: PUSH
61352: LD_VAR 0 23
61356: PUSH
61357: LD_VAR 0 24
61361: PUSH
61362: LD_VAR 0 25
61366: PUSH
61367: LD_VAR 0 26
61371: PUSH
61372: LD_VAR 0 27
61376: PUSH
61377: LD_VAR 0 28
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: PUSH
61390: LD_VAR 0 4
61394: PUSH
61395: LD_INT 1
61397: PLUS
61398: ARRAY
61399: ST_TO_ADDR
61400: GO 61403
61402: POP
61403: GO 61958
61405: LD_INT 2
61407: DOUBLE
61408: EQUAL
61409: IFTRUE 61419
61411: LD_INT 3
61413: DOUBLE
61414: EQUAL
61415: IFTRUE 61419
61417: GO 61475
61419: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61420: LD_ADDR_VAR 0 9
61424: PUSH
61425: LD_VAR 0 29
61429: PUSH
61430: LD_VAR 0 30
61434: PUSH
61435: LD_VAR 0 31
61439: PUSH
61440: LD_VAR 0 32
61444: PUSH
61445: LD_VAR 0 33
61449: PUSH
61450: LD_VAR 0 34
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: PUSH
61463: LD_VAR 0 4
61467: PUSH
61468: LD_INT 1
61470: PLUS
61471: ARRAY
61472: ST_TO_ADDR
61473: GO 61958
61475: LD_INT 16
61477: DOUBLE
61478: EQUAL
61479: IFTRUE 61537
61481: LD_INT 17
61483: DOUBLE
61484: EQUAL
61485: IFTRUE 61537
61487: LD_INT 18
61489: DOUBLE
61490: EQUAL
61491: IFTRUE 61537
61493: LD_INT 19
61495: DOUBLE
61496: EQUAL
61497: IFTRUE 61537
61499: LD_INT 22
61501: DOUBLE
61502: EQUAL
61503: IFTRUE 61537
61505: LD_INT 20
61507: DOUBLE
61508: EQUAL
61509: IFTRUE 61537
61511: LD_INT 21
61513: DOUBLE
61514: EQUAL
61515: IFTRUE 61537
61517: LD_INT 23
61519: DOUBLE
61520: EQUAL
61521: IFTRUE 61537
61523: LD_INT 24
61525: DOUBLE
61526: EQUAL
61527: IFTRUE 61537
61529: LD_INT 25
61531: DOUBLE
61532: EQUAL
61533: IFTRUE 61537
61535: GO 61593
61537: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61538: LD_ADDR_VAR 0 9
61542: PUSH
61543: LD_VAR 0 35
61547: PUSH
61548: LD_VAR 0 36
61552: PUSH
61553: LD_VAR 0 37
61557: PUSH
61558: LD_VAR 0 38
61562: PUSH
61563: LD_VAR 0 39
61567: PUSH
61568: LD_VAR 0 40
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: PUSH
61581: LD_VAR 0 4
61585: PUSH
61586: LD_INT 1
61588: PLUS
61589: ARRAY
61590: ST_TO_ADDR
61591: GO 61958
61593: LD_INT 6
61595: DOUBLE
61596: EQUAL
61597: IFTRUE 61649
61599: LD_INT 7
61601: DOUBLE
61602: EQUAL
61603: IFTRUE 61649
61605: LD_INT 8
61607: DOUBLE
61608: EQUAL
61609: IFTRUE 61649
61611: LD_INT 13
61613: DOUBLE
61614: EQUAL
61615: IFTRUE 61649
61617: LD_INT 12
61619: DOUBLE
61620: EQUAL
61621: IFTRUE 61649
61623: LD_INT 15
61625: DOUBLE
61626: EQUAL
61627: IFTRUE 61649
61629: LD_INT 11
61631: DOUBLE
61632: EQUAL
61633: IFTRUE 61649
61635: LD_INT 14
61637: DOUBLE
61638: EQUAL
61639: IFTRUE 61649
61641: LD_INT 10
61643: DOUBLE
61644: EQUAL
61645: IFTRUE 61649
61647: GO 61705
61649: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61650: LD_ADDR_VAR 0 9
61654: PUSH
61655: LD_VAR 0 41
61659: PUSH
61660: LD_VAR 0 42
61664: PUSH
61665: LD_VAR 0 43
61669: PUSH
61670: LD_VAR 0 44
61674: PUSH
61675: LD_VAR 0 45
61679: PUSH
61680: LD_VAR 0 46
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: PUSH
61693: LD_VAR 0 4
61697: PUSH
61698: LD_INT 1
61700: PLUS
61701: ARRAY
61702: ST_TO_ADDR
61703: GO 61958
61705: LD_INT 36
61707: DOUBLE
61708: EQUAL
61709: IFTRUE 61713
61711: GO 61769
61713: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61714: LD_ADDR_VAR 0 9
61718: PUSH
61719: LD_VAR 0 47
61723: PUSH
61724: LD_VAR 0 48
61728: PUSH
61729: LD_VAR 0 49
61733: PUSH
61734: LD_VAR 0 50
61738: PUSH
61739: LD_VAR 0 51
61743: PUSH
61744: LD_VAR 0 52
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: PUSH
61757: LD_VAR 0 4
61761: PUSH
61762: LD_INT 1
61764: PLUS
61765: ARRAY
61766: ST_TO_ADDR
61767: GO 61958
61769: LD_INT 4
61771: DOUBLE
61772: EQUAL
61773: IFTRUE 61795
61775: LD_INT 5
61777: DOUBLE
61778: EQUAL
61779: IFTRUE 61795
61781: LD_INT 34
61783: DOUBLE
61784: EQUAL
61785: IFTRUE 61795
61787: LD_INT 37
61789: DOUBLE
61790: EQUAL
61791: IFTRUE 61795
61793: GO 61851
61795: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61796: LD_ADDR_VAR 0 9
61800: PUSH
61801: LD_VAR 0 53
61805: PUSH
61806: LD_VAR 0 54
61810: PUSH
61811: LD_VAR 0 55
61815: PUSH
61816: LD_VAR 0 56
61820: PUSH
61821: LD_VAR 0 57
61825: PUSH
61826: LD_VAR 0 58
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: PUSH
61839: LD_VAR 0 4
61843: PUSH
61844: LD_INT 1
61846: PLUS
61847: ARRAY
61848: ST_TO_ADDR
61849: GO 61958
61851: LD_INT 31
61853: DOUBLE
61854: EQUAL
61855: IFTRUE 61901
61857: LD_INT 32
61859: DOUBLE
61860: EQUAL
61861: IFTRUE 61901
61863: LD_INT 33
61865: DOUBLE
61866: EQUAL
61867: IFTRUE 61901
61869: LD_INT 27
61871: DOUBLE
61872: EQUAL
61873: IFTRUE 61901
61875: LD_INT 26
61877: DOUBLE
61878: EQUAL
61879: IFTRUE 61901
61881: LD_INT 28
61883: DOUBLE
61884: EQUAL
61885: IFTRUE 61901
61887: LD_INT 29
61889: DOUBLE
61890: EQUAL
61891: IFTRUE 61901
61893: LD_INT 30
61895: DOUBLE
61896: EQUAL
61897: IFTRUE 61901
61899: GO 61957
61901: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61902: LD_ADDR_VAR 0 9
61906: PUSH
61907: LD_VAR 0 59
61911: PUSH
61912: LD_VAR 0 60
61916: PUSH
61917: LD_VAR 0 61
61921: PUSH
61922: LD_VAR 0 62
61926: PUSH
61927: LD_VAR 0 63
61931: PUSH
61932: LD_VAR 0 64
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: PUSH
61945: LD_VAR 0 4
61949: PUSH
61950: LD_INT 1
61952: PLUS
61953: ARRAY
61954: ST_TO_ADDR
61955: GO 61958
61957: POP
// temp_list2 = [ ] ;
61958: LD_ADDR_VAR 0 10
61962: PUSH
61963: EMPTY
61964: ST_TO_ADDR
// for i in temp_list do
61965: LD_ADDR_VAR 0 8
61969: PUSH
61970: LD_VAR 0 9
61974: PUSH
61975: FOR_IN
61976: IFFALSE 62028
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61978: LD_ADDR_VAR 0 10
61982: PUSH
61983: LD_VAR 0 10
61987: PUSH
61988: LD_VAR 0 8
61992: PUSH
61993: LD_INT 1
61995: ARRAY
61996: PUSH
61997: LD_VAR 0 2
62001: PLUS
62002: PUSH
62003: LD_VAR 0 8
62007: PUSH
62008: LD_INT 2
62010: ARRAY
62011: PUSH
62012: LD_VAR 0 3
62016: PLUS
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: EMPTY
62023: LIST
62024: ADD
62025: ST_TO_ADDR
62026: GO 61975
62028: POP
62029: POP
// result = temp_list2 ;
62030: LD_ADDR_VAR 0 7
62034: PUSH
62035: LD_VAR 0 10
62039: ST_TO_ADDR
// end ;
62040: LD_VAR 0 7
62044: RET
// export function EnemyInRange ( unit , dist ) ; begin
62045: LD_INT 0
62047: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62048: LD_ADDR_VAR 0 3
62052: PUSH
62053: LD_VAR 0 1
62057: PPUSH
62058: CALL_OW 255
62062: PPUSH
62063: LD_VAR 0 1
62067: PPUSH
62068: CALL_OW 250
62072: PPUSH
62073: LD_VAR 0 1
62077: PPUSH
62078: CALL_OW 251
62082: PPUSH
62083: LD_VAR 0 2
62087: PPUSH
62088: CALL 35418 0 4
62092: PUSH
62093: LD_INT 4
62095: ARRAY
62096: ST_TO_ADDR
// end ;
62097: LD_VAR 0 3
62101: RET
// export function PlayerSeeMe ( unit ) ; begin
62102: LD_INT 0
62104: PPUSH
// result := See ( your_side , unit ) ;
62105: LD_ADDR_VAR 0 2
62109: PUSH
62110: LD_OWVAR 2
62114: PPUSH
62115: LD_VAR 0 1
62119: PPUSH
62120: CALL_OW 292
62124: ST_TO_ADDR
// end ;
62125: LD_VAR 0 2
62129: RET
// export function ReverseDir ( unit ) ; begin
62130: LD_INT 0
62132: PPUSH
// if not unit then
62133: LD_VAR 0 1
62137: NOT
62138: IFFALSE 62142
// exit ;
62140: GO 62165
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62142: LD_ADDR_VAR 0 2
62146: PUSH
62147: LD_VAR 0 1
62151: PPUSH
62152: CALL_OW 254
62156: PUSH
62157: LD_INT 3
62159: PLUS
62160: PUSH
62161: LD_INT 6
62163: MOD
62164: ST_TO_ADDR
// end ;
62165: LD_VAR 0 2
62169: RET
// export function ReverseArray ( array ) ; var i ; begin
62170: LD_INT 0
62172: PPUSH
62173: PPUSH
// if not array then
62174: LD_VAR 0 1
62178: NOT
62179: IFFALSE 62183
// exit ;
62181: GO 62238
// result := [ ] ;
62183: LD_ADDR_VAR 0 2
62187: PUSH
62188: EMPTY
62189: ST_TO_ADDR
// for i := array downto 1 do
62190: LD_ADDR_VAR 0 3
62194: PUSH
62195: DOUBLE
62196: LD_VAR 0 1
62200: INC
62201: ST_TO_ADDR
62202: LD_INT 1
62204: PUSH
62205: FOR_DOWNTO
62206: IFFALSE 62236
// result := Join ( result , array [ i ] ) ;
62208: LD_ADDR_VAR 0 2
62212: PUSH
62213: LD_VAR 0 2
62217: PPUSH
62218: LD_VAR 0 1
62222: PUSH
62223: LD_VAR 0 3
62227: ARRAY
62228: PPUSH
62229: CALL 66881 0 2
62233: ST_TO_ADDR
62234: GO 62205
62236: POP
62237: POP
// end ;
62238: LD_VAR 0 2
62242: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
62243: LD_INT 0
62245: PPUSH
62246: PPUSH
62247: PPUSH
62248: PPUSH
62249: PPUSH
62250: PPUSH
// if not unit or not hexes then
62251: LD_VAR 0 1
62255: NOT
62256: PUSH
62257: LD_VAR 0 2
62261: NOT
62262: OR
62263: IFFALSE 62267
// exit ;
62265: GO 62390
// dist := 9999 ;
62267: LD_ADDR_VAR 0 5
62271: PUSH
62272: LD_INT 9999
62274: ST_TO_ADDR
// for i = 1 to hexes do
62275: LD_ADDR_VAR 0 4
62279: PUSH
62280: DOUBLE
62281: LD_INT 1
62283: DEC
62284: ST_TO_ADDR
62285: LD_VAR 0 2
62289: PUSH
62290: FOR_TO
62291: IFFALSE 62378
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62293: LD_ADDR_VAR 0 6
62297: PUSH
62298: LD_VAR 0 1
62302: PPUSH
62303: LD_VAR 0 2
62307: PUSH
62308: LD_VAR 0 4
62312: ARRAY
62313: PUSH
62314: LD_INT 1
62316: ARRAY
62317: PPUSH
62318: LD_VAR 0 2
62322: PUSH
62323: LD_VAR 0 4
62327: ARRAY
62328: PUSH
62329: LD_INT 2
62331: ARRAY
62332: PPUSH
62333: CALL_OW 297
62337: ST_TO_ADDR
// if tdist < dist then
62338: LD_VAR 0 6
62342: PUSH
62343: LD_VAR 0 5
62347: LESS
62348: IFFALSE 62376
// begin hex := hexes [ i ] ;
62350: LD_ADDR_VAR 0 8
62354: PUSH
62355: LD_VAR 0 2
62359: PUSH
62360: LD_VAR 0 4
62364: ARRAY
62365: ST_TO_ADDR
// dist := tdist ;
62366: LD_ADDR_VAR 0 5
62370: PUSH
62371: LD_VAR 0 6
62375: ST_TO_ADDR
// end ; end ;
62376: GO 62290
62378: POP
62379: POP
// result := hex ;
62380: LD_ADDR_VAR 0 3
62384: PUSH
62385: LD_VAR 0 8
62389: ST_TO_ADDR
// end ;
62390: LD_VAR 0 3
62394: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62395: LD_INT 0
62397: PPUSH
62398: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62399: LD_VAR 0 1
62403: NOT
62404: PUSH
62405: LD_VAR 0 1
62409: PUSH
62410: LD_INT 21
62412: PUSH
62413: LD_INT 2
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 23
62422: PUSH
62423: LD_INT 2
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PPUSH
62434: CALL_OW 69
62438: IN
62439: NOT
62440: OR
62441: IFFALSE 62445
// exit ;
62443: GO 62492
// for i = 1 to 3 do
62445: LD_ADDR_VAR 0 3
62449: PUSH
62450: DOUBLE
62451: LD_INT 1
62453: DEC
62454: ST_TO_ADDR
62455: LD_INT 3
62457: PUSH
62458: FOR_TO
62459: IFFALSE 62490
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62461: LD_VAR 0 1
62465: PPUSH
62466: CALL_OW 250
62470: PPUSH
62471: LD_VAR 0 1
62475: PPUSH
62476: CALL_OW 251
62480: PPUSH
62481: LD_INT 1
62483: PPUSH
62484: CALL_OW 453
62488: GO 62458
62490: POP
62491: POP
// end ;
62492: LD_VAR 0 2
62496: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62497: LD_INT 0
62499: PPUSH
62500: PPUSH
62501: PPUSH
62502: PPUSH
62503: PPUSH
62504: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62505: LD_VAR 0 1
62509: NOT
62510: PUSH
62511: LD_VAR 0 2
62515: NOT
62516: OR
62517: PUSH
62518: LD_VAR 0 1
62522: PPUSH
62523: CALL_OW 314
62527: OR
62528: IFFALSE 62532
// exit ;
62530: GO 62999
// if GetLives ( i ) < 250 then
62532: LD_VAR 0 4
62536: PPUSH
62537: CALL_OW 256
62541: PUSH
62542: LD_INT 250
62544: LESS
62545: IFFALSE 62558
// begin ComAutodestruct ( i ) ;
62547: LD_VAR 0 4
62551: PPUSH
62552: CALL 62395 0 1
// exit ;
62556: GO 62999
// end ; x := GetX ( enemy_unit ) ;
62558: LD_ADDR_VAR 0 7
62562: PUSH
62563: LD_VAR 0 2
62567: PPUSH
62568: CALL_OW 250
62572: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62573: LD_ADDR_VAR 0 8
62577: PUSH
62578: LD_VAR 0 2
62582: PPUSH
62583: CALL_OW 251
62587: ST_TO_ADDR
// if not x or not y then
62588: LD_VAR 0 7
62592: NOT
62593: PUSH
62594: LD_VAR 0 8
62598: NOT
62599: OR
62600: IFFALSE 62604
// exit ;
62602: GO 62999
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62604: LD_ADDR_VAR 0 6
62608: PUSH
62609: LD_VAR 0 7
62613: PPUSH
62614: LD_INT 0
62616: PPUSH
62617: LD_INT 4
62619: PPUSH
62620: CALL_OW 272
62624: PUSH
62625: LD_VAR 0 8
62629: PPUSH
62630: LD_INT 0
62632: PPUSH
62633: LD_INT 4
62635: PPUSH
62636: CALL_OW 273
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: PUSH
62645: LD_VAR 0 7
62649: PPUSH
62650: LD_INT 1
62652: PPUSH
62653: LD_INT 4
62655: PPUSH
62656: CALL_OW 272
62660: PUSH
62661: LD_VAR 0 8
62665: PPUSH
62666: LD_INT 1
62668: PPUSH
62669: LD_INT 4
62671: PPUSH
62672: CALL_OW 273
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_VAR 0 7
62685: PPUSH
62686: LD_INT 2
62688: PPUSH
62689: LD_INT 4
62691: PPUSH
62692: CALL_OW 272
62696: PUSH
62697: LD_VAR 0 8
62701: PPUSH
62702: LD_INT 2
62704: PPUSH
62705: LD_INT 4
62707: PPUSH
62708: CALL_OW 273
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_VAR 0 7
62721: PPUSH
62722: LD_INT 3
62724: PPUSH
62725: LD_INT 4
62727: PPUSH
62728: CALL_OW 272
62732: PUSH
62733: LD_VAR 0 8
62737: PPUSH
62738: LD_INT 3
62740: PPUSH
62741: LD_INT 4
62743: PPUSH
62744: CALL_OW 273
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_VAR 0 7
62757: PPUSH
62758: LD_INT 4
62760: PPUSH
62761: LD_INT 4
62763: PPUSH
62764: CALL_OW 272
62768: PUSH
62769: LD_VAR 0 8
62773: PPUSH
62774: LD_INT 4
62776: PPUSH
62777: LD_INT 4
62779: PPUSH
62780: CALL_OW 273
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_VAR 0 7
62793: PPUSH
62794: LD_INT 5
62796: PPUSH
62797: LD_INT 4
62799: PPUSH
62800: CALL_OW 272
62804: PUSH
62805: LD_VAR 0 8
62809: PPUSH
62810: LD_INT 5
62812: PPUSH
62813: LD_INT 4
62815: PPUSH
62816: CALL_OW 273
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: ST_TO_ADDR
// for i = tmp downto 1 do
62833: LD_ADDR_VAR 0 4
62837: PUSH
62838: DOUBLE
62839: LD_VAR 0 6
62843: INC
62844: ST_TO_ADDR
62845: LD_INT 1
62847: PUSH
62848: FOR_DOWNTO
62849: IFFALSE 62950
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62851: LD_VAR 0 6
62855: PUSH
62856: LD_VAR 0 4
62860: ARRAY
62861: PUSH
62862: LD_INT 1
62864: ARRAY
62865: PPUSH
62866: LD_VAR 0 6
62870: PUSH
62871: LD_VAR 0 4
62875: ARRAY
62876: PUSH
62877: LD_INT 2
62879: ARRAY
62880: PPUSH
62881: CALL_OW 488
62885: NOT
62886: PUSH
62887: LD_VAR 0 6
62891: PUSH
62892: LD_VAR 0 4
62896: ARRAY
62897: PUSH
62898: LD_INT 1
62900: ARRAY
62901: PPUSH
62902: LD_VAR 0 6
62906: PUSH
62907: LD_VAR 0 4
62911: ARRAY
62912: PUSH
62913: LD_INT 2
62915: ARRAY
62916: PPUSH
62917: CALL_OW 428
62921: PUSH
62922: LD_INT 0
62924: NONEQUAL
62925: OR
62926: IFFALSE 62948
// tmp := Delete ( tmp , i ) ;
62928: LD_ADDR_VAR 0 6
62932: PUSH
62933: LD_VAR 0 6
62937: PPUSH
62938: LD_VAR 0 4
62942: PPUSH
62943: CALL_OW 3
62947: ST_TO_ADDR
62948: GO 62848
62950: POP
62951: POP
// j := GetClosestHex ( unit , tmp ) ;
62952: LD_ADDR_VAR 0 5
62956: PUSH
62957: LD_VAR 0 1
62961: PPUSH
62962: LD_VAR 0 6
62966: PPUSH
62967: CALL 62243 0 2
62971: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62972: LD_VAR 0 1
62976: PPUSH
62977: LD_VAR 0 5
62981: PUSH
62982: LD_INT 1
62984: ARRAY
62985: PPUSH
62986: LD_VAR 0 5
62990: PUSH
62991: LD_INT 2
62993: ARRAY
62994: PPUSH
62995: CALL_OW 111
// end ;
62999: LD_VAR 0 3
63003: RET
// export function PrepareApemanSoldier ( ) ; begin
63004: LD_INT 0
63006: PPUSH
// uc_nation := 0 ;
63007: LD_ADDR_OWVAR 21
63011: PUSH
63012: LD_INT 0
63014: ST_TO_ADDR
// hc_sex := sex_male ;
63015: LD_ADDR_OWVAR 27
63019: PUSH
63020: LD_INT 1
63022: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63023: LD_ADDR_OWVAR 28
63027: PUSH
63028: LD_INT 15
63030: ST_TO_ADDR
// hc_gallery :=  ;
63031: LD_ADDR_OWVAR 33
63035: PUSH
63036: LD_STRING 
63038: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63039: LD_ADDR_OWVAR 31
63043: PUSH
63044: LD_INT 0
63046: PPUSH
63047: LD_INT 3
63049: PPUSH
63050: CALL_OW 12
63054: PUSH
63055: LD_INT 0
63057: PPUSH
63058: LD_INT 3
63060: PPUSH
63061: CALL_OW 12
63065: PUSH
63066: LD_INT 0
63068: PUSH
63069: LD_INT 0
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: ST_TO_ADDR
// end ;
63078: LD_VAR 0 1
63082: RET
// export function PrepareApemanEngineer ( ) ; begin
63083: LD_INT 0
63085: PPUSH
// uc_nation := 0 ;
63086: LD_ADDR_OWVAR 21
63090: PUSH
63091: LD_INT 0
63093: ST_TO_ADDR
// hc_sex := sex_male ;
63094: LD_ADDR_OWVAR 27
63098: PUSH
63099: LD_INT 1
63101: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63102: LD_ADDR_OWVAR 28
63106: PUSH
63107: LD_INT 16
63109: ST_TO_ADDR
// hc_gallery :=  ;
63110: LD_ADDR_OWVAR 33
63114: PUSH
63115: LD_STRING 
63117: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63118: LD_ADDR_OWVAR 31
63122: PUSH
63123: LD_INT 0
63125: PPUSH
63126: LD_INT 3
63128: PPUSH
63129: CALL_OW 12
63133: PUSH
63134: LD_INT 0
63136: PPUSH
63137: LD_INT 3
63139: PPUSH
63140: CALL_OW 12
63144: PUSH
63145: LD_INT 0
63147: PUSH
63148: LD_INT 0
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: ST_TO_ADDR
// end ;
63157: LD_VAR 0 1
63161: RET
// export function PrepareApeman ( agressivity ) ; begin
63162: LD_INT 0
63164: PPUSH
// uc_side := 0 ;
63165: LD_ADDR_OWVAR 20
63169: PUSH
63170: LD_INT 0
63172: ST_TO_ADDR
// uc_nation := 0 ;
63173: LD_ADDR_OWVAR 21
63177: PUSH
63178: LD_INT 0
63180: ST_TO_ADDR
// hc_sex := sex_male ;
63181: LD_ADDR_OWVAR 27
63185: PUSH
63186: LD_INT 1
63188: ST_TO_ADDR
// hc_class := class_apeman ;
63189: LD_ADDR_OWVAR 28
63193: PUSH
63194: LD_INT 12
63196: ST_TO_ADDR
// hc_gallery :=  ;
63197: LD_ADDR_OWVAR 33
63201: PUSH
63202: LD_STRING 
63204: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63205: LD_ADDR_OWVAR 35
63209: PUSH
63210: LD_VAR 0 1
63214: NEG
63215: PPUSH
63216: LD_VAR 0 1
63220: PPUSH
63221: CALL_OW 12
63225: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63226: LD_ADDR_OWVAR 31
63230: PUSH
63231: LD_INT 0
63233: PPUSH
63234: LD_INT 3
63236: PPUSH
63237: CALL_OW 12
63241: PUSH
63242: LD_INT 0
63244: PPUSH
63245: LD_INT 3
63247: PPUSH
63248: CALL_OW 12
63252: PUSH
63253: LD_INT 0
63255: PUSH
63256: LD_INT 0
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: ST_TO_ADDR
// end ;
63265: LD_VAR 0 2
63269: RET
// export function PrepareTiger ( agressivity ) ; begin
63270: LD_INT 0
63272: PPUSH
// uc_side := 0 ;
63273: LD_ADDR_OWVAR 20
63277: PUSH
63278: LD_INT 0
63280: ST_TO_ADDR
// uc_nation := 0 ;
63281: LD_ADDR_OWVAR 21
63285: PUSH
63286: LD_INT 0
63288: ST_TO_ADDR
// hc_class := class_tiger ;
63289: LD_ADDR_OWVAR 28
63293: PUSH
63294: LD_INT 14
63296: ST_TO_ADDR
// hc_gallery :=  ;
63297: LD_ADDR_OWVAR 33
63301: PUSH
63302: LD_STRING 
63304: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63305: LD_ADDR_OWVAR 35
63309: PUSH
63310: LD_VAR 0 1
63314: NEG
63315: PPUSH
63316: LD_VAR 0 1
63320: PPUSH
63321: CALL_OW 12
63325: ST_TO_ADDR
// end ;
63326: LD_VAR 0 2
63330: RET
// export function PrepareEnchidna ( ) ; begin
63331: LD_INT 0
63333: PPUSH
// uc_side := 0 ;
63334: LD_ADDR_OWVAR 20
63338: PUSH
63339: LD_INT 0
63341: ST_TO_ADDR
// uc_nation := 0 ;
63342: LD_ADDR_OWVAR 21
63346: PUSH
63347: LD_INT 0
63349: ST_TO_ADDR
// hc_class := class_baggie ;
63350: LD_ADDR_OWVAR 28
63354: PUSH
63355: LD_INT 13
63357: ST_TO_ADDR
// hc_gallery :=  ;
63358: LD_ADDR_OWVAR 33
63362: PUSH
63363: LD_STRING 
63365: ST_TO_ADDR
// end ;
63366: LD_VAR 0 1
63370: RET
// export function PrepareFrog ( ) ; begin
63371: LD_INT 0
63373: PPUSH
// uc_side := 0 ;
63374: LD_ADDR_OWVAR 20
63378: PUSH
63379: LD_INT 0
63381: ST_TO_ADDR
// uc_nation := 0 ;
63382: LD_ADDR_OWVAR 21
63386: PUSH
63387: LD_INT 0
63389: ST_TO_ADDR
// hc_class := class_frog ;
63390: LD_ADDR_OWVAR 28
63394: PUSH
63395: LD_INT 19
63397: ST_TO_ADDR
// hc_gallery :=  ;
63398: LD_ADDR_OWVAR 33
63402: PUSH
63403: LD_STRING 
63405: ST_TO_ADDR
// end ;
63406: LD_VAR 0 1
63410: RET
// export function PrepareFish ( ) ; begin
63411: LD_INT 0
63413: PPUSH
// uc_side := 0 ;
63414: LD_ADDR_OWVAR 20
63418: PUSH
63419: LD_INT 0
63421: ST_TO_ADDR
// uc_nation := 0 ;
63422: LD_ADDR_OWVAR 21
63426: PUSH
63427: LD_INT 0
63429: ST_TO_ADDR
// hc_class := class_fish ;
63430: LD_ADDR_OWVAR 28
63434: PUSH
63435: LD_INT 20
63437: ST_TO_ADDR
// hc_gallery :=  ;
63438: LD_ADDR_OWVAR 33
63442: PUSH
63443: LD_STRING 
63445: ST_TO_ADDR
// end ;
63446: LD_VAR 0 1
63450: RET
// export function PrepareBird ( ) ; begin
63451: LD_INT 0
63453: PPUSH
// uc_side := 0 ;
63454: LD_ADDR_OWVAR 20
63458: PUSH
63459: LD_INT 0
63461: ST_TO_ADDR
// uc_nation := 0 ;
63462: LD_ADDR_OWVAR 21
63466: PUSH
63467: LD_INT 0
63469: ST_TO_ADDR
// hc_class := class_phororhacos ;
63470: LD_ADDR_OWVAR 28
63474: PUSH
63475: LD_INT 18
63477: ST_TO_ADDR
// hc_gallery :=  ;
63478: LD_ADDR_OWVAR 33
63482: PUSH
63483: LD_STRING 
63485: ST_TO_ADDR
// end ;
63486: LD_VAR 0 1
63490: RET
// export function PrepareHorse ( ) ; begin
63491: LD_INT 0
63493: PPUSH
// uc_side := 0 ;
63494: LD_ADDR_OWVAR 20
63498: PUSH
63499: LD_INT 0
63501: ST_TO_ADDR
// uc_nation := 0 ;
63502: LD_ADDR_OWVAR 21
63506: PUSH
63507: LD_INT 0
63509: ST_TO_ADDR
// hc_class := class_horse ;
63510: LD_ADDR_OWVAR 28
63514: PUSH
63515: LD_INT 21
63517: ST_TO_ADDR
// hc_gallery :=  ;
63518: LD_ADDR_OWVAR 33
63522: PUSH
63523: LD_STRING 
63525: ST_TO_ADDR
// end ;
63526: LD_VAR 0 1
63530: RET
// export function PrepareMastodont ( ) ; begin
63531: LD_INT 0
63533: PPUSH
// uc_side := 0 ;
63534: LD_ADDR_OWVAR 20
63538: PUSH
63539: LD_INT 0
63541: ST_TO_ADDR
// uc_nation := 0 ;
63542: LD_ADDR_OWVAR 21
63546: PUSH
63547: LD_INT 0
63549: ST_TO_ADDR
// vc_chassis := class_mastodont ;
63550: LD_ADDR_OWVAR 37
63554: PUSH
63555: LD_INT 31
63557: ST_TO_ADDR
// vc_control := control_rider ;
63558: LD_ADDR_OWVAR 38
63562: PUSH
63563: LD_INT 4
63565: ST_TO_ADDR
// end ;
63566: LD_VAR 0 1
63570: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63571: LD_INT 0
63573: PPUSH
63574: PPUSH
63575: PPUSH
// uc_side = 0 ;
63576: LD_ADDR_OWVAR 20
63580: PUSH
63581: LD_INT 0
63583: ST_TO_ADDR
// uc_nation = 0 ;
63584: LD_ADDR_OWVAR 21
63588: PUSH
63589: LD_INT 0
63591: ST_TO_ADDR
// InitHc_All ( ) ;
63592: CALL_OW 584
// InitVc ;
63596: CALL_OW 20
// if mastodonts then
63600: LD_VAR 0 6
63604: IFFALSE 63671
// for i = 1 to mastodonts do
63606: LD_ADDR_VAR 0 11
63610: PUSH
63611: DOUBLE
63612: LD_INT 1
63614: DEC
63615: ST_TO_ADDR
63616: LD_VAR 0 6
63620: PUSH
63621: FOR_TO
63622: IFFALSE 63669
// begin vc_chassis := 31 ;
63624: LD_ADDR_OWVAR 37
63628: PUSH
63629: LD_INT 31
63631: ST_TO_ADDR
// vc_control := control_rider ;
63632: LD_ADDR_OWVAR 38
63636: PUSH
63637: LD_INT 4
63639: ST_TO_ADDR
// animal := CreateVehicle ;
63640: LD_ADDR_VAR 0 12
63644: PUSH
63645: CALL_OW 45
63649: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63650: LD_VAR 0 12
63654: PPUSH
63655: LD_VAR 0 8
63659: PPUSH
63660: LD_INT 0
63662: PPUSH
63663: CALL 65799 0 3
// end ;
63667: GO 63621
63669: POP
63670: POP
// if horses then
63671: LD_VAR 0 5
63675: IFFALSE 63742
// for i = 1 to horses do
63677: LD_ADDR_VAR 0 11
63681: PUSH
63682: DOUBLE
63683: LD_INT 1
63685: DEC
63686: ST_TO_ADDR
63687: LD_VAR 0 5
63691: PUSH
63692: FOR_TO
63693: IFFALSE 63740
// begin hc_class := 21 ;
63695: LD_ADDR_OWVAR 28
63699: PUSH
63700: LD_INT 21
63702: ST_TO_ADDR
// hc_gallery :=  ;
63703: LD_ADDR_OWVAR 33
63707: PUSH
63708: LD_STRING 
63710: ST_TO_ADDR
// animal := CreateHuman ;
63711: LD_ADDR_VAR 0 12
63715: PUSH
63716: CALL_OW 44
63720: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63721: LD_VAR 0 12
63725: PPUSH
63726: LD_VAR 0 8
63730: PPUSH
63731: LD_INT 0
63733: PPUSH
63734: CALL 65799 0 3
// end ;
63738: GO 63692
63740: POP
63741: POP
// if birds then
63742: LD_VAR 0 1
63746: IFFALSE 63813
// for i = 1 to birds do
63748: LD_ADDR_VAR 0 11
63752: PUSH
63753: DOUBLE
63754: LD_INT 1
63756: DEC
63757: ST_TO_ADDR
63758: LD_VAR 0 1
63762: PUSH
63763: FOR_TO
63764: IFFALSE 63811
// begin hc_class := 18 ;
63766: LD_ADDR_OWVAR 28
63770: PUSH
63771: LD_INT 18
63773: ST_TO_ADDR
// hc_gallery =  ;
63774: LD_ADDR_OWVAR 33
63778: PUSH
63779: LD_STRING 
63781: ST_TO_ADDR
// animal := CreateHuman ;
63782: LD_ADDR_VAR 0 12
63786: PUSH
63787: CALL_OW 44
63791: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63792: LD_VAR 0 12
63796: PPUSH
63797: LD_VAR 0 8
63801: PPUSH
63802: LD_INT 0
63804: PPUSH
63805: CALL 65799 0 3
// end ;
63809: GO 63763
63811: POP
63812: POP
// if tigers then
63813: LD_VAR 0 2
63817: IFFALSE 63901
// for i = 1 to tigers do
63819: LD_ADDR_VAR 0 11
63823: PUSH
63824: DOUBLE
63825: LD_INT 1
63827: DEC
63828: ST_TO_ADDR
63829: LD_VAR 0 2
63833: PUSH
63834: FOR_TO
63835: IFFALSE 63899
// begin hc_class = class_tiger ;
63837: LD_ADDR_OWVAR 28
63841: PUSH
63842: LD_INT 14
63844: ST_TO_ADDR
// hc_gallery =  ;
63845: LD_ADDR_OWVAR 33
63849: PUSH
63850: LD_STRING 
63852: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63853: LD_ADDR_OWVAR 35
63857: PUSH
63858: LD_INT 7
63860: NEG
63861: PPUSH
63862: LD_INT 7
63864: PPUSH
63865: CALL_OW 12
63869: ST_TO_ADDR
// animal := CreateHuman ;
63870: LD_ADDR_VAR 0 12
63874: PUSH
63875: CALL_OW 44
63879: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63880: LD_VAR 0 12
63884: PPUSH
63885: LD_VAR 0 8
63889: PPUSH
63890: LD_INT 0
63892: PPUSH
63893: CALL 65799 0 3
// end ;
63897: GO 63834
63899: POP
63900: POP
// if apemans then
63901: LD_VAR 0 3
63905: IFFALSE 64028
// for i = 1 to apemans do
63907: LD_ADDR_VAR 0 11
63911: PUSH
63912: DOUBLE
63913: LD_INT 1
63915: DEC
63916: ST_TO_ADDR
63917: LD_VAR 0 3
63921: PUSH
63922: FOR_TO
63923: IFFALSE 64026
// begin hc_class = class_apeman ;
63925: LD_ADDR_OWVAR 28
63929: PUSH
63930: LD_INT 12
63932: ST_TO_ADDR
// hc_gallery =  ;
63933: LD_ADDR_OWVAR 33
63937: PUSH
63938: LD_STRING 
63940: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63941: LD_ADDR_OWVAR 35
63945: PUSH
63946: LD_INT 2
63948: NEG
63949: PPUSH
63950: LD_INT 2
63952: PPUSH
63953: CALL_OW 12
63957: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63958: LD_ADDR_OWVAR 31
63962: PUSH
63963: LD_INT 1
63965: PPUSH
63966: LD_INT 3
63968: PPUSH
63969: CALL_OW 12
63973: PUSH
63974: LD_INT 1
63976: PPUSH
63977: LD_INT 3
63979: PPUSH
63980: CALL_OW 12
63984: PUSH
63985: LD_INT 0
63987: PUSH
63988: LD_INT 0
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: ST_TO_ADDR
// animal := CreateHuman ;
63997: LD_ADDR_VAR 0 12
64001: PUSH
64002: CALL_OW 44
64006: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64007: LD_VAR 0 12
64011: PPUSH
64012: LD_VAR 0 8
64016: PPUSH
64017: LD_INT 0
64019: PPUSH
64020: CALL 65799 0 3
// end ;
64024: GO 63922
64026: POP
64027: POP
// if enchidnas then
64028: LD_VAR 0 4
64032: IFFALSE 64099
// for i = 1 to enchidnas do
64034: LD_ADDR_VAR 0 11
64038: PUSH
64039: DOUBLE
64040: LD_INT 1
64042: DEC
64043: ST_TO_ADDR
64044: LD_VAR 0 4
64048: PUSH
64049: FOR_TO
64050: IFFALSE 64097
// begin hc_class = 13 ;
64052: LD_ADDR_OWVAR 28
64056: PUSH
64057: LD_INT 13
64059: ST_TO_ADDR
// hc_gallery =  ;
64060: LD_ADDR_OWVAR 33
64064: PUSH
64065: LD_STRING 
64067: ST_TO_ADDR
// animal := CreateHuman ;
64068: LD_ADDR_VAR 0 12
64072: PUSH
64073: CALL_OW 44
64077: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64078: LD_VAR 0 12
64082: PPUSH
64083: LD_VAR 0 8
64087: PPUSH
64088: LD_INT 0
64090: PPUSH
64091: CALL 65799 0 3
// end ;
64095: GO 64049
64097: POP
64098: POP
// if fishes then
64099: LD_VAR 0 7
64103: IFFALSE 64170
// for i = 1 to fishes do
64105: LD_ADDR_VAR 0 11
64109: PUSH
64110: DOUBLE
64111: LD_INT 1
64113: DEC
64114: ST_TO_ADDR
64115: LD_VAR 0 7
64119: PUSH
64120: FOR_TO
64121: IFFALSE 64168
// begin hc_class = 20 ;
64123: LD_ADDR_OWVAR 28
64127: PUSH
64128: LD_INT 20
64130: ST_TO_ADDR
// hc_gallery =  ;
64131: LD_ADDR_OWVAR 33
64135: PUSH
64136: LD_STRING 
64138: ST_TO_ADDR
// animal := CreateHuman ;
64139: LD_ADDR_VAR 0 12
64143: PUSH
64144: CALL_OW 44
64148: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64149: LD_VAR 0 12
64153: PPUSH
64154: LD_VAR 0 9
64158: PPUSH
64159: LD_INT 0
64161: PPUSH
64162: CALL 65799 0 3
// end ;
64166: GO 64120
64168: POP
64169: POP
// end ;
64170: LD_VAR 0 10
64174: RET
// export function WantHeal ( sci , unit ) ; begin
64175: LD_INT 0
64177: PPUSH
// if GetTaskList ( sci ) > 0 then
64178: LD_VAR 0 1
64182: PPUSH
64183: CALL_OW 437
64187: PUSH
64188: LD_INT 0
64190: GREATER
64191: IFFALSE 64261
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64193: LD_VAR 0 1
64197: PPUSH
64198: CALL_OW 437
64202: PUSH
64203: LD_INT 1
64205: ARRAY
64206: PUSH
64207: LD_INT 1
64209: ARRAY
64210: PUSH
64211: LD_STRING l
64213: EQUAL
64214: PUSH
64215: LD_VAR 0 1
64219: PPUSH
64220: CALL_OW 437
64224: PUSH
64225: LD_INT 1
64227: ARRAY
64228: PUSH
64229: LD_INT 4
64231: ARRAY
64232: PUSH
64233: LD_VAR 0 2
64237: EQUAL
64238: AND
64239: IFFALSE 64251
// result := true else
64241: LD_ADDR_VAR 0 3
64245: PUSH
64246: LD_INT 1
64248: ST_TO_ADDR
64249: GO 64259
// result := false ;
64251: LD_ADDR_VAR 0 3
64255: PUSH
64256: LD_INT 0
64258: ST_TO_ADDR
// end else
64259: GO 64269
// result := false ;
64261: LD_ADDR_VAR 0 3
64265: PUSH
64266: LD_INT 0
64268: ST_TO_ADDR
// end ;
64269: LD_VAR 0 3
64273: RET
// export function HealTarget ( sci ) ; begin
64274: LD_INT 0
64276: PPUSH
// if not sci then
64277: LD_VAR 0 1
64281: NOT
64282: IFFALSE 64286
// exit ;
64284: GO 64351
// result := 0 ;
64286: LD_ADDR_VAR 0 2
64290: PUSH
64291: LD_INT 0
64293: ST_TO_ADDR
// if GetTaskList ( sci ) then
64294: LD_VAR 0 1
64298: PPUSH
64299: CALL_OW 437
64303: IFFALSE 64351
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64305: LD_VAR 0 1
64309: PPUSH
64310: CALL_OW 437
64314: PUSH
64315: LD_INT 1
64317: ARRAY
64318: PUSH
64319: LD_INT 1
64321: ARRAY
64322: PUSH
64323: LD_STRING l
64325: EQUAL
64326: IFFALSE 64351
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64328: LD_ADDR_VAR 0 2
64332: PUSH
64333: LD_VAR 0 1
64337: PPUSH
64338: CALL_OW 437
64342: PUSH
64343: LD_INT 1
64345: ARRAY
64346: PUSH
64347: LD_INT 4
64349: ARRAY
64350: ST_TO_ADDR
// end ;
64351: LD_VAR 0 2
64355: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64356: LD_INT 0
64358: PPUSH
64359: PPUSH
64360: PPUSH
64361: PPUSH
// if not base_units then
64362: LD_VAR 0 1
64366: NOT
64367: IFFALSE 64371
// exit ;
64369: GO 64458
// result := false ;
64371: LD_ADDR_VAR 0 2
64375: PUSH
64376: LD_INT 0
64378: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64379: LD_ADDR_VAR 0 5
64383: PUSH
64384: LD_VAR 0 1
64388: PPUSH
64389: LD_INT 21
64391: PUSH
64392: LD_INT 3
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PPUSH
64399: CALL_OW 72
64403: ST_TO_ADDR
// if not tmp then
64404: LD_VAR 0 5
64408: NOT
64409: IFFALSE 64413
// exit ;
64411: GO 64458
// for i in tmp do
64413: LD_ADDR_VAR 0 3
64417: PUSH
64418: LD_VAR 0 5
64422: PUSH
64423: FOR_IN
64424: IFFALSE 64456
// begin result := EnemyInRange ( i , 22 ) ;
64426: LD_ADDR_VAR 0 2
64430: PUSH
64431: LD_VAR 0 3
64435: PPUSH
64436: LD_INT 22
64438: PPUSH
64439: CALL 62045 0 2
64443: ST_TO_ADDR
// if result then
64444: LD_VAR 0 2
64448: IFFALSE 64454
// exit ;
64450: POP
64451: POP
64452: GO 64458
// end ;
64454: GO 64423
64456: POP
64457: POP
// end ;
64458: LD_VAR 0 2
64462: RET
// export function FilterByTag ( units , tag ) ; begin
64463: LD_INT 0
64465: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64466: LD_ADDR_VAR 0 3
64470: PUSH
64471: LD_VAR 0 1
64475: PPUSH
64476: LD_INT 120
64478: PUSH
64479: LD_VAR 0 2
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PPUSH
64488: CALL_OW 72
64492: ST_TO_ADDR
// end ;
64493: LD_VAR 0 3
64497: RET
// export function IsDriver ( un ) ; begin
64498: LD_INT 0
64500: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64501: LD_ADDR_VAR 0 2
64505: PUSH
64506: LD_VAR 0 1
64510: PUSH
64511: LD_INT 55
64513: PUSH
64514: EMPTY
64515: LIST
64516: PPUSH
64517: CALL_OW 69
64521: IN
64522: ST_TO_ADDR
// end ;
64523: LD_VAR 0 2
64527: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64528: LD_INT 0
64530: PPUSH
64531: PPUSH
// list := [ ] ;
64532: LD_ADDR_VAR 0 5
64536: PUSH
64537: EMPTY
64538: ST_TO_ADDR
// case d of 0 :
64539: LD_VAR 0 3
64543: PUSH
64544: LD_INT 0
64546: DOUBLE
64547: EQUAL
64548: IFTRUE 64552
64550: GO 64685
64552: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64553: LD_ADDR_VAR 0 5
64557: PUSH
64558: LD_VAR 0 1
64562: PUSH
64563: LD_INT 4
64565: MINUS
64566: PUSH
64567: LD_VAR 0 2
64571: PUSH
64572: LD_INT 4
64574: MINUS
64575: PUSH
64576: LD_INT 2
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: LIST
64583: PUSH
64584: LD_VAR 0 1
64588: PUSH
64589: LD_INT 3
64591: MINUS
64592: PUSH
64593: LD_VAR 0 2
64597: PUSH
64598: LD_INT 1
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: LIST
64605: PUSH
64606: LD_VAR 0 1
64610: PUSH
64611: LD_INT 4
64613: PLUS
64614: PUSH
64615: LD_VAR 0 2
64619: PUSH
64620: LD_INT 4
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: LIST
64627: PUSH
64628: LD_VAR 0 1
64632: PUSH
64633: LD_INT 3
64635: PLUS
64636: PUSH
64637: LD_VAR 0 2
64641: PUSH
64642: LD_INT 3
64644: PLUS
64645: PUSH
64646: LD_INT 5
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: LIST
64653: PUSH
64654: LD_VAR 0 1
64658: PUSH
64659: LD_VAR 0 2
64663: PUSH
64664: LD_INT 4
64666: PLUS
64667: PUSH
64668: LD_INT 0
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: LIST
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: LIST
64680: LIST
64681: LIST
64682: ST_TO_ADDR
// end ; 1 :
64683: GO 65383
64685: LD_INT 1
64687: DOUBLE
64688: EQUAL
64689: IFTRUE 64693
64691: GO 64826
64693: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64694: LD_ADDR_VAR 0 5
64698: PUSH
64699: LD_VAR 0 1
64703: PUSH
64704: LD_VAR 0 2
64708: PUSH
64709: LD_INT 4
64711: MINUS
64712: PUSH
64713: LD_INT 3
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: LIST
64720: PUSH
64721: LD_VAR 0 1
64725: PUSH
64726: LD_INT 3
64728: MINUS
64729: PUSH
64730: LD_VAR 0 2
64734: PUSH
64735: LD_INT 3
64737: MINUS
64738: PUSH
64739: LD_INT 2
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: LIST
64746: PUSH
64747: LD_VAR 0 1
64751: PUSH
64752: LD_INT 4
64754: MINUS
64755: PUSH
64756: LD_VAR 0 2
64760: PUSH
64761: LD_INT 1
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: LIST
64768: PUSH
64769: LD_VAR 0 1
64773: PUSH
64774: LD_VAR 0 2
64778: PUSH
64779: LD_INT 3
64781: PLUS
64782: PUSH
64783: LD_INT 0
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: LIST
64790: PUSH
64791: LD_VAR 0 1
64795: PUSH
64796: LD_INT 4
64798: PLUS
64799: PUSH
64800: LD_VAR 0 2
64804: PUSH
64805: LD_INT 4
64807: PLUS
64808: PUSH
64809: LD_INT 5
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: LIST
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: LIST
64821: LIST
64822: LIST
64823: ST_TO_ADDR
// end ; 2 :
64824: GO 65383
64826: LD_INT 2
64828: DOUBLE
64829: EQUAL
64830: IFTRUE 64834
64832: GO 64963
64834: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64835: LD_ADDR_VAR 0 5
64839: PUSH
64840: LD_VAR 0 1
64844: PUSH
64845: LD_VAR 0 2
64849: PUSH
64850: LD_INT 3
64852: MINUS
64853: PUSH
64854: LD_INT 3
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: LIST
64861: PUSH
64862: LD_VAR 0 1
64866: PUSH
64867: LD_INT 4
64869: PLUS
64870: PUSH
64871: LD_VAR 0 2
64875: PUSH
64876: LD_INT 4
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: LIST
64883: PUSH
64884: LD_VAR 0 1
64888: PUSH
64889: LD_VAR 0 2
64893: PUSH
64894: LD_INT 4
64896: PLUS
64897: PUSH
64898: LD_INT 0
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: LIST
64905: PUSH
64906: LD_VAR 0 1
64910: PUSH
64911: LD_INT 3
64913: MINUS
64914: PUSH
64915: LD_VAR 0 2
64919: PUSH
64920: LD_INT 1
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: LIST
64927: PUSH
64928: LD_VAR 0 1
64932: PUSH
64933: LD_INT 4
64935: MINUS
64936: PUSH
64937: LD_VAR 0 2
64941: PUSH
64942: LD_INT 4
64944: MINUS
64945: PUSH
64946: LD_INT 2
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: LIST
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: LIST
64958: LIST
64959: LIST
64960: ST_TO_ADDR
// end ; 3 :
64961: GO 65383
64963: LD_INT 3
64965: DOUBLE
64966: EQUAL
64967: IFTRUE 64971
64969: GO 65104
64971: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64972: LD_ADDR_VAR 0 5
64976: PUSH
64977: LD_VAR 0 1
64981: PUSH
64982: LD_INT 3
64984: PLUS
64985: PUSH
64986: LD_VAR 0 2
64990: PUSH
64991: LD_INT 4
64993: PUSH
64994: EMPTY
64995: LIST
64996: LIST
64997: LIST
64998: PUSH
64999: LD_VAR 0 1
65003: PUSH
65004: LD_INT 4
65006: PLUS
65007: PUSH
65008: LD_VAR 0 2
65012: PUSH
65013: LD_INT 4
65015: PLUS
65016: PUSH
65017: LD_INT 5
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: LIST
65024: PUSH
65025: LD_VAR 0 1
65029: PUSH
65030: LD_INT 4
65032: MINUS
65033: PUSH
65034: LD_VAR 0 2
65038: PUSH
65039: LD_INT 1
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: LIST
65046: PUSH
65047: LD_VAR 0 1
65051: PUSH
65052: LD_VAR 0 2
65056: PUSH
65057: LD_INT 4
65059: MINUS
65060: PUSH
65061: LD_INT 3
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: LIST
65068: PUSH
65069: LD_VAR 0 1
65073: PUSH
65074: LD_INT 3
65076: MINUS
65077: PUSH
65078: LD_VAR 0 2
65082: PUSH
65083: LD_INT 3
65085: MINUS
65086: PUSH
65087: LD_INT 2
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: LIST
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: LIST
65101: ST_TO_ADDR
// end ; 4 :
65102: GO 65383
65104: LD_INT 4
65106: DOUBLE
65107: EQUAL
65108: IFTRUE 65112
65110: GO 65245
65112: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65113: LD_ADDR_VAR 0 5
65117: PUSH
65118: LD_VAR 0 1
65122: PUSH
65123: LD_VAR 0 2
65127: PUSH
65128: LD_INT 4
65130: PLUS
65131: PUSH
65132: LD_INT 0
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: LIST
65139: PUSH
65140: LD_VAR 0 1
65144: PUSH
65145: LD_INT 3
65147: PLUS
65148: PUSH
65149: LD_VAR 0 2
65153: PUSH
65154: LD_INT 3
65156: PLUS
65157: PUSH
65158: LD_INT 5
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: LIST
65165: PUSH
65166: LD_VAR 0 1
65170: PUSH
65171: LD_INT 4
65173: PLUS
65174: PUSH
65175: LD_VAR 0 2
65179: PUSH
65180: LD_INT 4
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: LIST
65187: PUSH
65188: LD_VAR 0 1
65192: PUSH
65193: LD_VAR 0 2
65197: PUSH
65198: LD_INT 3
65200: MINUS
65201: PUSH
65202: LD_INT 3
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: LIST
65209: PUSH
65210: LD_VAR 0 1
65214: PUSH
65215: LD_INT 4
65217: MINUS
65218: PUSH
65219: LD_VAR 0 2
65223: PUSH
65224: LD_INT 4
65226: MINUS
65227: PUSH
65228: LD_INT 2
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: LIST
65235: PUSH
65236: EMPTY
65237: LIST
65238: LIST
65239: LIST
65240: LIST
65241: LIST
65242: ST_TO_ADDR
// end ; 5 :
65243: GO 65383
65245: LD_INT 5
65247: DOUBLE
65248: EQUAL
65249: IFTRUE 65253
65251: GO 65382
65253: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65254: LD_ADDR_VAR 0 5
65258: PUSH
65259: LD_VAR 0 1
65263: PUSH
65264: LD_INT 4
65266: MINUS
65267: PUSH
65268: LD_VAR 0 2
65272: PUSH
65273: LD_INT 1
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: LIST
65280: PUSH
65281: LD_VAR 0 1
65285: PUSH
65286: LD_VAR 0 2
65290: PUSH
65291: LD_INT 4
65293: MINUS
65294: PUSH
65295: LD_INT 3
65297: PUSH
65298: EMPTY
65299: LIST
65300: LIST
65301: LIST
65302: PUSH
65303: LD_VAR 0 1
65307: PUSH
65308: LD_INT 4
65310: PLUS
65311: PUSH
65312: LD_VAR 0 2
65316: PUSH
65317: LD_INT 4
65319: PLUS
65320: PUSH
65321: LD_INT 5
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: LIST
65328: PUSH
65329: LD_VAR 0 1
65333: PUSH
65334: LD_INT 3
65336: PLUS
65337: PUSH
65338: LD_VAR 0 2
65342: PUSH
65343: LD_INT 4
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: LIST
65350: PUSH
65351: LD_VAR 0 1
65355: PUSH
65356: LD_VAR 0 2
65360: PUSH
65361: LD_INT 3
65363: PLUS
65364: PUSH
65365: LD_INT 0
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: LIST
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: LIST
65377: LIST
65378: LIST
65379: ST_TO_ADDR
// end ; end ;
65380: GO 65383
65382: POP
// result := list ;
65383: LD_ADDR_VAR 0 4
65387: PUSH
65388: LD_VAR 0 5
65392: ST_TO_ADDR
// end ;
65393: LD_VAR 0 4
65397: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65398: LD_INT 0
65400: PPUSH
65401: PPUSH
65402: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65403: LD_VAR 0 1
65407: NOT
65408: PUSH
65409: LD_VAR 0 2
65413: PUSH
65414: LD_INT 1
65416: PUSH
65417: LD_INT 2
65419: PUSH
65420: LD_INT 3
65422: PUSH
65423: LD_INT 4
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: LIST
65430: LIST
65431: IN
65432: NOT
65433: OR
65434: IFFALSE 65438
// exit ;
65436: GO 65521
// tmp := [ ] ;
65438: LD_ADDR_VAR 0 5
65442: PUSH
65443: EMPTY
65444: ST_TO_ADDR
// for i in units do
65445: LD_ADDR_VAR 0 4
65449: PUSH
65450: LD_VAR 0 1
65454: PUSH
65455: FOR_IN
65456: IFFALSE 65490
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
65458: LD_ADDR_VAR 0 5
65462: PUSH
65463: LD_VAR 0 5
65467: PPUSH
65468: LD_VAR 0 4
65472: PPUSH
65473: LD_VAR 0 2
65477: PPUSH
65478: CALL_OW 259
65482: PPUSH
65483: CALL 66881 0 2
65487: ST_TO_ADDR
65488: GO 65455
65490: POP
65491: POP
// if not tmp then
65492: LD_VAR 0 5
65496: NOT
65497: IFFALSE 65501
// exit ;
65499: GO 65521
// result := SortListByListDesc ( units , tmp ) ;
65501: LD_ADDR_VAR 0 3
65505: PUSH
65506: LD_VAR 0 1
65510: PPUSH
65511: LD_VAR 0 5
65515: PPUSH
65516: CALL_OW 77
65520: ST_TO_ADDR
// end ;
65521: LD_VAR 0 3
65525: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65526: LD_INT 0
65528: PPUSH
65529: PPUSH
65530: PPUSH
// result := false ;
65531: LD_ADDR_VAR 0 3
65535: PUSH
65536: LD_INT 0
65538: ST_TO_ADDR
// if not building then
65539: LD_VAR 0 2
65543: NOT
65544: IFFALSE 65548
// exit ;
65546: GO 65686
// x := GetX ( building ) ;
65548: LD_ADDR_VAR 0 4
65552: PUSH
65553: LD_VAR 0 2
65557: PPUSH
65558: CALL_OW 250
65562: ST_TO_ADDR
// y := GetY ( building ) ;
65563: LD_ADDR_VAR 0 5
65567: PUSH
65568: LD_VAR 0 2
65572: PPUSH
65573: CALL_OW 251
65577: ST_TO_ADDR
// if not x or not y then
65578: LD_VAR 0 4
65582: NOT
65583: PUSH
65584: LD_VAR 0 5
65588: NOT
65589: OR
65590: IFFALSE 65594
// exit ;
65592: GO 65686
// if GetTaskList ( unit ) then
65594: LD_VAR 0 1
65598: PPUSH
65599: CALL_OW 437
65603: IFFALSE 65686
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65605: LD_STRING e
65607: PUSH
65608: LD_VAR 0 1
65612: PPUSH
65613: CALL_OW 437
65617: PUSH
65618: LD_INT 1
65620: ARRAY
65621: PUSH
65622: LD_INT 1
65624: ARRAY
65625: EQUAL
65626: PUSH
65627: LD_VAR 0 4
65631: PUSH
65632: LD_VAR 0 1
65636: PPUSH
65637: CALL_OW 437
65641: PUSH
65642: LD_INT 1
65644: ARRAY
65645: PUSH
65646: LD_INT 2
65648: ARRAY
65649: EQUAL
65650: AND
65651: PUSH
65652: LD_VAR 0 5
65656: PUSH
65657: LD_VAR 0 1
65661: PPUSH
65662: CALL_OW 437
65666: PUSH
65667: LD_INT 1
65669: ARRAY
65670: PUSH
65671: LD_INT 3
65673: ARRAY
65674: EQUAL
65675: AND
65676: IFFALSE 65686
// result := true end ;
65678: LD_ADDR_VAR 0 3
65682: PUSH
65683: LD_INT 1
65685: ST_TO_ADDR
// end ;
65686: LD_VAR 0 3
65690: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65691: LD_INT 0
65693: PPUSH
// result := false ;
65694: LD_ADDR_VAR 0 4
65698: PUSH
65699: LD_INT 0
65701: ST_TO_ADDR
// if GetTaskList ( unit ) then
65702: LD_VAR 0 1
65706: PPUSH
65707: CALL_OW 437
65711: IFFALSE 65794
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65713: LD_STRING M
65715: PUSH
65716: LD_VAR 0 1
65720: PPUSH
65721: CALL_OW 437
65725: PUSH
65726: LD_INT 1
65728: ARRAY
65729: PUSH
65730: LD_INT 1
65732: ARRAY
65733: EQUAL
65734: PUSH
65735: LD_VAR 0 2
65739: PUSH
65740: LD_VAR 0 1
65744: PPUSH
65745: CALL_OW 437
65749: PUSH
65750: LD_INT 1
65752: ARRAY
65753: PUSH
65754: LD_INT 2
65756: ARRAY
65757: EQUAL
65758: AND
65759: PUSH
65760: LD_VAR 0 3
65764: PUSH
65765: LD_VAR 0 1
65769: PPUSH
65770: CALL_OW 437
65774: PUSH
65775: LD_INT 1
65777: ARRAY
65778: PUSH
65779: LD_INT 3
65781: ARRAY
65782: EQUAL
65783: AND
65784: IFFALSE 65794
// result := true ;
65786: LD_ADDR_VAR 0 4
65790: PUSH
65791: LD_INT 1
65793: ST_TO_ADDR
// end ; end ;
65794: LD_VAR 0 4
65798: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65799: LD_INT 0
65801: PPUSH
65802: PPUSH
65803: PPUSH
65804: PPUSH
// if not unit or not area then
65805: LD_VAR 0 1
65809: NOT
65810: PUSH
65811: LD_VAR 0 2
65815: NOT
65816: OR
65817: IFFALSE 65821
// exit ;
65819: GO 65984
// tmp := AreaToList ( area , i ) ;
65821: LD_ADDR_VAR 0 6
65825: PUSH
65826: LD_VAR 0 2
65830: PPUSH
65831: LD_VAR 0 5
65835: PPUSH
65836: CALL_OW 517
65840: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65841: LD_ADDR_VAR 0 5
65845: PUSH
65846: DOUBLE
65847: LD_INT 1
65849: DEC
65850: ST_TO_ADDR
65851: LD_VAR 0 6
65855: PUSH
65856: LD_INT 1
65858: ARRAY
65859: PUSH
65860: FOR_TO
65861: IFFALSE 65982
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65863: LD_ADDR_VAR 0 7
65867: PUSH
65868: LD_VAR 0 6
65872: PUSH
65873: LD_INT 1
65875: ARRAY
65876: PUSH
65877: LD_VAR 0 5
65881: ARRAY
65882: PUSH
65883: LD_VAR 0 6
65887: PUSH
65888: LD_INT 2
65890: ARRAY
65891: PUSH
65892: LD_VAR 0 5
65896: ARRAY
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
65902: LD_INT 92
65904: PUSH
65905: LD_VAR 0 7
65909: PUSH
65910: LD_INT 1
65912: ARRAY
65913: PUSH
65914: LD_VAR 0 7
65918: PUSH
65919: LD_INT 2
65921: ARRAY
65922: PUSH
65923: LD_INT 3
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: LIST
65930: LIST
65931: PPUSH
65932: CALL_OW 69
65936: PUSH
65937: LD_INT 0
65939: EQUAL
65940: IFFALSE 65980
// begin PlaceUnitArea ( unit , area , mode ) ;
65942: LD_VAR 0 1
65946: PPUSH
65947: LD_VAR 0 2
65951: PPUSH
65952: LD_VAR 0 3
65956: PPUSH
65957: CALL_OW 49
// result := IsPlaced ( unit ) ;
65961: LD_ADDR_VAR 0 4
65965: PUSH
65966: LD_VAR 0 1
65970: PPUSH
65971: CALL_OW 305
65975: ST_TO_ADDR
// exit ;
65976: POP
65977: POP
65978: GO 65984
// end ; end ;
65980: GO 65860
65982: POP
65983: POP
// end ;
65984: LD_VAR 0 4
65988: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65989: LD_INT 0
65991: PPUSH
65992: PPUSH
65993: PPUSH
// if not side or side > 8 then
65994: LD_VAR 0 1
65998: NOT
65999: PUSH
66000: LD_VAR 0 1
66004: PUSH
66005: LD_INT 8
66007: GREATER
66008: OR
66009: IFFALSE 66013
// exit ;
66011: GO 66200
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66013: LD_ADDR_VAR 0 4
66017: PUSH
66018: LD_INT 22
66020: PUSH
66021: LD_VAR 0 1
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PUSH
66030: LD_INT 21
66032: PUSH
66033: LD_INT 3
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: PPUSH
66044: CALL_OW 69
66048: ST_TO_ADDR
// if not tmp then
66049: LD_VAR 0 4
66053: NOT
66054: IFFALSE 66058
// exit ;
66056: GO 66200
// enable_addtolog := true ;
66058: LD_ADDR_OWVAR 81
66062: PUSH
66063: LD_INT 1
66065: ST_TO_ADDR
// AddToLog ( [ ) ;
66066: LD_STRING [
66068: PPUSH
66069: CALL_OW 561
// for i in tmp do
66073: LD_ADDR_VAR 0 3
66077: PUSH
66078: LD_VAR 0 4
66082: PUSH
66083: FOR_IN
66084: IFFALSE 66191
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66086: LD_STRING [
66088: PUSH
66089: LD_VAR 0 3
66093: PPUSH
66094: CALL_OW 266
66098: STR
66099: PUSH
66100: LD_STRING , 
66102: STR
66103: PUSH
66104: LD_VAR 0 3
66108: PPUSH
66109: CALL_OW 250
66113: STR
66114: PUSH
66115: LD_STRING , 
66117: STR
66118: PUSH
66119: LD_VAR 0 3
66123: PPUSH
66124: CALL_OW 251
66128: STR
66129: PUSH
66130: LD_STRING , 
66132: STR
66133: PUSH
66134: LD_VAR 0 3
66138: PPUSH
66139: CALL_OW 254
66143: STR
66144: PUSH
66145: LD_STRING , 
66147: STR
66148: PUSH
66149: LD_VAR 0 3
66153: PPUSH
66154: LD_INT 1
66156: PPUSH
66157: CALL_OW 268
66161: STR
66162: PUSH
66163: LD_STRING , 
66165: STR
66166: PUSH
66167: LD_VAR 0 3
66171: PPUSH
66172: LD_INT 2
66174: PPUSH
66175: CALL_OW 268
66179: STR
66180: PUSH
66181: LD_STRING ],
66183: STR
66184: PPUSH
66185: CALL_OW 561
// end ;
66189: GO 66083
66191: POP
66192: POP
// AddToLog ( ]; ) ;
66193: LD_STRING ];
66195: PPUSH
66196: CALL_OW 561
// end ;
66200: LD_VAR 0 2
66204: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66205: LD_INT 0
66207: PPUSH
66208: PPUSH
66209: PPUSH
66210: PPUSH
66211: PPUSH
// if not area or not rate or not max then
66212: LD_VAR 0 1
66216: NOT
66217: PUSH
66218: LD_VAR 0 2
66222: NOT
66223: OR
66224: PUSH
66225: LD_VAR 0 4
66229: NOT
66230: OR
66231: IFFALSE 66235
// exit ;
66233: GO 66424
// while 1 do
66235: LD_INT 1
66237: IFFALSE 66424
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66239: LD_ADDR_VAR 0 9
66243: PUSH
66244: LD_VAR 0 1
66248: PPUSH
66249: LD_INT 1
66251: PPUSH
66252: CALL_OW 287
66256: PUSH
66257: LD_INT 10
66259: MUL
66260: ST_TO_ADDR
// r := rate / 10 ;
66261: LD_ADDR_VAR 0 7
66265: PUSH
66266: LD_VAR 0 2
66270: PUSH
66271: LD_INT 10
66273: DIVREAL
66274: ST_TO_ADDR
// time := 1 1$00 ;
66275: LD_ADDR_VAR 0 8
66279: PUSH
66280: LD_INT 2100
66282: ST_TO_ADDR
// if amount < min then
66283: LD_VAR 0 9
66287: PUSH
66288: LD_VAR 0 3
66292: LESS
66293: IFFALSE 66311
// r := r * 2 else
66295: LD_ADDR_VAR 0 7
66299: PUSH
66300: LD_VAR 0 7
66304: PUSH
66305: LD_INT 2
66307: MUL
66308: ST_TO_ADDR
66309: GO 66337
// if amount > max then
66311: LD_VAR 0 9
66315: PUSH
66316: LD_VAR 0 4
66320: GREATER
66321: IFFALSE 66337
// r := r / 2 ;
66323: LD_ADDR_VAR 0 7
66327: PUSH
66328: LD_VAR 0 7
66332: PUSH
66333: LD_INT 2
66335: DIVREAL
66336: ST_TO_ADDR
// time := time / r ;
66337: LD_ADDR_VAR 0 8
66341: PUSH
66342: LD_VAR 0 8
66346: PUSH
66347: LD_VAR 0 7
66351: DIVREAL
66352: ST_TO_ADDR
// if time < 0 then
66353: LD_VAR 0 8
66357: PUSH
66358: LD_INT 0
66360: LESS
66361: IFFALSE 66378
// time := time * - 1 ;
66363: LD_ADDR_VAR 0 8
66367: PUSH
66368: LD_VAR 0 8
66372: PUSH
66373: LD_INT 1
66375: NEG
66376: MUL
66377: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66378: LD_VAR 0 8
66382: PUSH
66383: LD_INT 35
66385: PPUSH
66386: LD_INT 875
66388: PPUSH
66389: CALL_OW 12
66393: PLUS
66394: PPUSH
66395: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66399: LD_INT 1
66401: PPUSH
66402: LD_INT 5
66404: PPUSH
66405: CALL_OW 12
66409: PPUSH
66410: LD_VAR 0 1
66414: PPUSH
66415: LD_INT 1
66417: PPUSH
66418: CALL_OW 55
// end ;
66422: GO 66235
// end ;
66424: LD_VAR 0 5
66428: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66429: LD_INT 0
66431: PPUSH
66432: PPUSH
66433: PPUSH
66434: PPUSH
66435: PPUSH
66436: PPUSH
66437: PPUSH
66438: PPUSH
// if not turrets or not factories then
66439: LD_VAR 0 1
66443: NOT
66444: PUSH
66445: LD_VAR 0 2
66449: NOT
66450: OR
66451: IFFALSE 66455
// exit ;
66453: GO 66762
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66455: LD_ADDR_VAR 0 10
66459: PUSH
66460: LD_INT 5
66462: PUSH
66463: LD_INT 6
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: PUSH
66470: LD_INT 2
66472: PUSH
66473: LD_INT 4
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: PUSH
66480: LD_INT 3
66482: PUSH
66483: LD_INT 5
66485: PUSH
66486: EMPTY
66487: LIST
66488: LIST
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: LIST
66494: PUSH
66495: LD_INT 24
66497: PUSH
66498: LD_INT 25
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: PUSH
66505: LD_INT 23
66507: PUSH
66508: LD_INT 27
66510: PUSH
66511: EMPTY
66512: LIST
66513: LIST
66514: PUSH
66515: EMPTY
66516: LIST
66517: LIST
66518: PUSH
66519: LD_INT 42
66521: PUSH
66522: LD_INT 43
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: PUSH
66529: LD_INT 44
66531: PUSH
66532: LD_INT 46
66534: PUSH
66535: EMPTY
66536: LIST
66537: LIST
66538: PUSH
66539: LD_INT 45
66541: PUSH
66542: LD_INT 47
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: LIST
66553: PUSH
66554: EMPTY
66555: LIST
66556: LIST
66557: LIST
66558: ST_TO_ADDR
// result := [ ] ;
66559: LD_ADDR_VAR 0 3
66563: PUSH
66564: EMPTY
66565: ST_TO_ADDR
// for i in turrets do
66566: LD_ADDR_VAR 0 4
66570: PUSH
66571: LD_VAR 0 1
66575: PUSH
66576: FOR_IN
66577: IFFALSE 66760
// begin nat := GetNation ( i ) ;
66579: LD_ADDR_VAR 0 7
66583: PUSH
66584: LD_VAR 0 4
66588: PPUSH
66589: CALL_OW 248
66593: ST_TO_ADDR
// weapon := 0 ;
66594: LD_ADDR_VAR 0 8
66598: PUSH
66599: LD_INT 0
66601: ST_TO_ADDR
// if not nat then
66602: LD_VAR 0 7
66606: NOT
66607: IFFALSE 66611
// continue ;
66609: GO 66576
// for j in list [ nat ] do
66611: LD_ADDR_VAR 0 5
66615: PUSH
66616: LD_VAR 0 10
66620: PUSH
66621: LD_VAR 0 7
66625: ARRAY
66626: PUSH
66627: FOR_IN
66628: IFFALSE 66669
// if GetBWeapon ( i ) = j [ 1 ] then
66630: LD_VAR 0 4
66634: PPUSH
66635: CALL_OW 269
66639: PUSH
66640: LD_VAR 0 5
66644: PUSH
66645: LD_INT 1
66647: ARRAY
66648: EQUAL
66649: IFFALSE 66667
// begin weapon := j [ 2 ] ;
66651: LD_ADDR_VAR 0 8
66655: PUSH
66656: LD_VAR 0 5
66660: PUSH
66661: LD_INT 2
66663: ARRAY
66664: ST_TO_ADDR
// break ;
66665: GO 66669
// end ;
66667: GO 66627
66669: POP
66670: POP
// if not weapon then
66671: LD_VAR 0 8
66675: NOT
66676: IFFALSE 66680
// continue ;
66678: GO 66576
// for k in factories do
66680: LD_ADDR_VAR 0 6
66684: PUSH
66685: LD_VAR 0 2
66689: PUSH
66690: FOR_IN
66691: IFFALSE 66756
// begin weapons := AvailableWeaponList ( k ) ;
66693: LD_ADDR_VAR 0 9
66697: PUSH
66698: LD_VAR 0 6
66702: PPUSH
66703: CALL_OW 478
66707: ST_TO_ADDR
// if not weapons then
66708: LD_VAR 0 9
66712: NOT
66713: IFFALSE 66717
// continue ;
66715: GO 66690
// if weapon in weapons then
66717: LD_VAR 0 8
66721: PUSH
66722: LD_VAR 0 9
66726: IN
66727: IFFALSE 66754
// begin result := [ i , weapon ] ;
66729: LD_ADDR_VAR 0 3
66733: PUSH
66734: LD_VAR 0 4
66738: PUSH
66739: LD_VAR 0 8
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: ST_TO_ADDR
// exit ;
66748: POP
66749: POP
66750: POP
66751: POP
66752: GO 66762
// end ; end ;
66754: GO 66690
66756: POP
66757: POP
// end ;
66758: GO 66576
66760: POP
66761: POP
// end ;
66762: LD_VAR 0 3
66766: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66767: LD_INT 0
66769: PPUSH
// if not side or side > 8 then
66770: LD_VAR 0 3
66774: NOT
66775: PUSH
66776: LD_VAR 0 3
66780: PUSH
66781: LD_INT 8
66783: GREATER
66784: OR
66785: IFFALSE 66789
// exit ;
66787: GO 66848
// if not range then
66789: LD_VAR 0 4
66793: NOT
66794: IFFALSE 66805
// range := - 12 ;
66796: LD_ADDR_VAR 0 4
66800: PUSH
66801: LD_INT 12
66803: NEG
66804: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66805: LD_VAR 0 1
66809: PPUSH
66810: LD_VAR 0 2
66814: PPUSH
66815: LD_VAR 0 3
66819: PPUSH
66820: LD_VAR 0 4
66824: PPUSH
66825: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66829: LD_VAR 0 1
66833: PPUSH
66834: LD_VAR 0 2
66838: PPUSH
66839: LD_VAR 0 3
66843: PPUSH
66844: CALL_OW 331
// end ;
66848: LD_VAR 0 5
66852: RET
// export function Video ( mode ) ; begin
66853: LD_INT 0
66855: PPUSH
// ingame_video = mode ;
66856: LD_ADDR_OWVAR 52
66860: PUSH
66861: LD_VAR 0 1
66865: ST_TO_ADDR
// interface_hidden = mode ;
66866: LD_ADDR_OWVAR 54
66870: PUSH
66871: LD_VAR 0 1
66875: ST_TO_ADDR
// end ;
66876: LD_VAR 0 2
66880: RET
// export function Join ( array , element ) ; begin
66881: LD_INT 0
66883: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66884: LD_ADDR_VAR 0 3
66888: PUSH
66889: LD_VAR 0 1
66893: PPUSH
66894: LD_VAR 0 1
66898: PUSH
66899: LD_INT 1
66901: PLUS
66902: PPUSH
66903: LD_VAR 0 2
66907: PPUSH
66908: CALL_OW 1
66912: ST_TO_ADDR
// end ;
66913: LD_VAR 0 3
66917: RET
// export function JoinUnion ( array , element ) ; begin
66918: LD_INT 0
66920: PPUSH
// result := array union element ;
66921: LD_ADDR_VAR 0 3
66925: PUSH
66926: LD_VAR 0 1
66930: PUSH
66931: LD_VAR 0 2
66935: UNION
66936: ST_TO_ADDR
// end ;
66937: LD_VAR 0 3
66941: RET
// export function GetBehemoths ( side ) ; begin
66942: LD_INT 0
66944: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
66945: LD_ADDR_VAR 0 2
66949: PUSH
66950: LD_INT 22
66952: PUSH
66953: LD_VAR 0 1
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 31
66964: PUSH
66965: LD_INT 25
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: PPUSH
66976: CALL_OW 69
66980: ST_TO_ADDR
// end ;
66981: LD_VAR 0 2
66985: RET
// export function Shuffle ( array ) ; var i , index ; begin
66986: LD_INT 0
66988: PPUSH
66989: PPUSH
66990: PPUSH
// result := [ ] ;
66991: LD_ADDR_VAR 0 2
66995: PUSH
66996: EMPTY
66997: ST_TO_ADDR
// if not array then
66998: LD_VAR 0 1
67002: NOT
67003: IFFALSE 67007
// exit ;
67005: GO 67106
// Randomize ;
67007: CALL_OW 10
// for i = array downto 1 do
67011: LD_ADDR_VAR 0 3
67015: PUSH
67016: DOUBLE
67017: LD_VAR 0 1
67021: INC
67022: ST_TO_ADDR
67023: LD_INT 1
67025: PUSH
67026: FOR_DOWNTO
67027: IFFALSE 67104
// begin index := rand ( 1 , array ) ;
67029: LD_ADDR_VAR 0 4
67033: PUSH
67034: LD_INT 1
67036: PPUSH
67037: LD_VAR 0 1
67041: PPUSH
67042: CALL_OW 12
67046: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67047: LD_ADDR_VAR 0 2
67051: PUSH
67052: LD_VAR 0 2
67056: PPUSH
67057: LD_VAR 0 2
67061: PUSH
67062: LD_INT 1
67064: PLUS
67065: PPUSH
67066: LD_VAR 0 1
67070: PUSH
67071: LD_VAR 0 4
67075: ARRAY
67076: PPUSH
67077: CALL_OW 2
67081: ST_TO_ADDR
// array := Delete ( array , index ) ;
67082: LD_ADDR_VAR 0 1
67086: PUSH
67087: LD_VAR 0 1
67091: PPUSH
67092: LD_VAR 0 4
67096: PPUSH
67097: CALL_OW 3
67101: ST_TO_ADDR
// end ;
67102: GO 67026
67104: POP
67105: POP
// end ;
67106: LD_VAR 0 2
67110: RET
// export function GetBaseMaterials ( base ) ; begin
67111: LD_INT 0
67113: PPUSH
// result := [ 0 , 0 , 0 ] ;
67114: LD_ADDR_VAR 0 2
67118: PUSH
67119: LD_INT 0
67121: PUSH
67122: LD_INT 0
67124: PUSH
67125: LD_INT 0
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: LIST
67132: ST_TO_ADDR
// if not base then
67133: LD_VAR 0 1
67137: NOT
67138: IFFALSE 67142
// exit ;
67140: GO 67191
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67142: LD_ADDR_VAR 0 2
67146: PUSH
67147: LD_VAR 0 1
67151: PPUSH
67152: LD_INT 1
67154: PPUSH
67155: CALL_OW 275
67159: PUSH
67160: LD_VAR 0 1
67164: PPUSH
67165: LD_INT 2
67167: PPUSH
67168: CALL_OW 275
67172: PUSH
67173: LD_VAR 0 1
67177: PPUSH
67178: LD_INT 3
67180: PPUSH
67181: CALL_OW 275
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: LIST
67190: ST_TO_ADDR
// end ;
67191: LD_VAR 0 2
67195: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67196: LD_INT 0
67198: PPUSH
67199: PPUSH
// result := array ;
67200: LD_ADDR_VAR 0 3
67204: PUSH
67205: LD_VAR 0 1
67209: ST_TO_ADDR
// if size >= result then
67210: LD_VAR 0 2
67214: PUSH
67215: LD_VAR 0 3
67219: GREATEREQUAL
67220: IFFALSE 67224
// exit ;
67222: GO 67274
// if size then
67224: LD_VAR 0 2
67228: IFFALSE 67274
// for i := array downto size do
67230: LD_ADDR_VAR 0 4
67234: PUSH
67235: DOUBLE
67236: LD_VAR 0 1
67240: INC
67241: ST_TO_ADDR
67242: LD_VAR 0 2
67246: PUSH
67247: FOR_DOWNTO
67248: IFFALSE 67272
// result := Delete ( result , result ) ;
67250: LD_ADDR_VAR 0 3
67254: PUSH
67255: LD_VAR 0 3
67259: PPUSH
67260: LD_VAR 0 3
67264: PPUSH
67265: CALL_OW 3
67269: ST_TO_ADDR
67270: GO 67247
67272: POP
67273: POP
// end ;
67274: LD_VAR 0 3
67278: RET
// export function ComExit ( unit ) ; var tmp ; begin
67279: LD_INT 0
67281: PPUSH
67282: PPUSH
// if not IsInUnit ( unit ) then
67283: LD_VAR 0 1
67287: PPUSH
67288: CALL_OW 310
67292: NOT
67293: IFFALSE 67297
// exit ;
67295: GO 67357
// tmp := IsInUnit ( unit ) ;
67297: LD_ADDR_VAR 0 3
67301: PUSH
67302: LD_VAR 0 1
67306: PPUSH
67307: CALL_OW 310
67311: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67312: LD_VAR 0 3
67316: PPUSH
67317: CALL_OW 247
67321: PUSH
67322: LD_INT 2
67324: EQUAL
67325: IFFALSE 67338
// ComExitVehicle ( unit ) else
67327: LD_VAR 0 1
67331: PPUSH
67332: CALL_OW 121
67336: GO 67347
// ComExitBuilding ( unit ) ;
67338: LD_VAR 0 1
67342: PPUSH
67343: CALL_OW 122
// result := tmp ;
67347: LD_ADDR_VAR 0 2
67351: PUSH
67352: LD_VAR 0 3
67356: ST_TO_ADDR
// end ;
67357: LD_VAR 0 2
67361: RET
// export function ComExitAll ( units ) ; var i ; begin
67362: LD_INT 0
67364: PPUSH
67365: PPUSH
// if not units then
67366: LD_VAR 0 1
67370: NOT
67371: IFFALSE 67375
// exit ;
67373: GO 67401
// for i in units do
67375: LD_ADDR_VAR 0 3
67379: PUSH
67380: LD_VAR 0 1
67384: PUSH
67385: FOR_IN
67386: IFFALSE 67399
// ComExit ( i ) ;
67388: LD_VAR 0 3
67392: PPUSH
67393: CALL 67279 0 1
67397: GO 67385
67399: POP
67400: POP
// end ;
67401: LD_VAR 0 2
67405: RET
// export function ResetHc ; begin
67406: LD_INT 0
67408: PPUSH
// InitHc ;
67409: CALL_OW 19
// hc_importance := 0 ;
67413: LD_ADDR_OWVAR 32
67417: PUSH
67418: LD_INT 0
67420: ST_TO_ADDR
// end ;
67421: LD_VAR 0 1
67425: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67426: LD_INT 0
67428: PPUSH
67429: PPUSH
67430: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67431: LD_ADDR_VAR 0 6
67435: PUSH
67436: LD_VAR 0 1
67440: PUSH
67441: LD_VAR 0 3
67445: PLUS
67446: PUSH
67447: LD_INT 2
67449: DIV
67450: ST_TO_ADDR
// if _x < 0 then
67451: LD_VAR 0 6
67455: PUSH
67456: LD_INT 0
67458: LESS
67459: IFFALSE 67476
// _x := _x * - 1 ;
67461: LD_ADDR_VAR 0 6
67465: PUSH
67466: LD_VAR 0 6
67470: PUSH
67471: LD_INT 1
67473: NEG
67474: MUL
67475: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67476: LD_ADDR_VAR 0 7
67480: PUSH
67481: LD_VAR 0 2
67485: PUSH
67486: LD_VAR 0 4
67490: PLUS
67491: PUSH
67492: LD_INT 2
67494: DIV
67495: ST_TO_ADDR
// if _y < 0 then
67496: LD_VAR 0 7
67500: PUSH
67501: LD_INT 0
67503: LESS
67504: IFFALSE 67521
// _y := _y * - 1 ;
67506: LD_ADDR_VAR 0 7
67510: PUSH
67511: LD_VAR 0 7
67515: PUSH
67516: LD_INT 1
67518: NEG
67519: MUL
67520: ST_TO_ADDR
// result := [ _x , _y ] ;
67521: LD_ADDR_VAR 0 5
67525: PUSH
67526: LD_VAR 0 6
67530: PUSH
67531: LD_VAR 0 7
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: ST_TO_ADDR
// end ;
67540: LD_VAR 0 5
67544: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67545: LD_INT 0
67547: PPUSH
67548: PPUSH
67549: PPUSH
67550: PPUSH
// task := GetTaskList ( unit ) ;
67551: LD_ADDR_VAR 0 7
67555: PUSH
67556: LD_VAR 0 1
67560: PPUSH
67561: CALL_OW 437
67565: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67566: LD_VAR 0 7
67570: NOT
67571: PUSH
67572: LD_VAR 0 1
67576: PPUSH
67577: LD_VAR 0 2
67581: PPUSH
67582: CALL_OW 308
67586: NOT
67587: AND
67588: IFFALSE 67592
// exit ;
67590: GO 67710
// if IsInArea ( unit , area ) then
67592: LD_VAR 0 1
67596: PPUSH
67597: LD_VAR 0 2
67601: PPUSH
67602: CALL_OW 308
67606: IFFALSE 67624
// begin ComMoveToArea ( unit , goAway ) ;
67608: LD_VAR 0 1
67612: PPUSH
67613: LD_VAR 0 3
67617: PPUSH
67618: CALL_OW 113
// exit ;
67622: GO 67710
// end ; if task [ 1 ] [ 1 ] <> M then
67624: LD_VAR 0 7
67628: PUSH
67629: LD_INT 1
67631: ARRAY
67632: PUSH
67633: LD_INT 1
67635: ARRAY
67636: PUSH
67637: LD_STRING M
67639: NONEQUAL
67640: IFFALSE 67644
// exit ;
67642: GO 67710
// x := task [ 1 ] [ 2 ] ;
67644: LD_ADDR_VAR 0 5
67648: PUSH
67649: LD_VAR 0 7
67653: PUSH
67654: LD_INT 1
67656: ARRAY
67657: PUSH
67658: LD_INT 2
67660: ARRAY
67661: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67662: LD_ADDR_VAR 0 6
67666: PUSH
67667: LD_VAR 0 7
67671: PUSH
67672: LD_INT 1
67674: ARRAY
67675: PUSH
67676: LD_INT 3
67678: ARRAY
67679: ST_TO_ADDR
// if InArea ( x , y , area ) then
67680: LD_VAR 0 5
67684: PPUSH
67685: LD_VAR 0 6
67689: PPUSH
67690: LD_VAR 0 2
67694: PPUSH
67695: CALL_OW 309
67699: IFFALSE 67710
// ComStop ( unit ) ;
67701: LD_VAR 0 1
67705: PPUSH
67706: CALL_OW 141
// end ;
67710: LD_VAR 0 4
67714: RET
// export function Abs ( value ) ; begin
67715: LD_INT 0
67717: PPUSH
// result := value ;
67718: LD_ADDR_VAR 0 2
67722: PUSH
67723: LD_VAR 0 1
67727: ST_TO_ADDR
// if value < 0 then
67728: LD_VAR 0 1
67732: PUSH
67733: LD_INT 0
67735: LESS
67736: IFFALSE 67753
// result := value * - 1 ;
67738: LD_ADDR_VAR 0 2
67742: PUSH
67743: LD_VAR 0 1
67747: PUSH
67748: LD_INT 1
67750: NEG
67751: MUL
67752: ST_TO_ADDR
// end ;
67753: LD_VAR 0 2
67757: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67758: LD_INT 0
67760: PPUSH
67761: PPUSH
67762: PPUSH
67763: PPUSH
67764: PPUSH
67765: PPUSH
67766: PPUSH
67767: PPUSH
// if not unit or not building then
67768: LD_VAR 0 1
67772: NOT
67773: PUSH
67774: LD_VAR 0 2
67778: NOT
67779: OR
67780: IFFALSE 67784
// exit ;
67782: GO 68010
// x := GetX ( building ) ;
67784: LD_ADDR_VAR 0 4
67788: PUSH
67789: LD_VAR 0 2
67793: PPUSH
67794: CALL_OW 250
67798: ST_TO_ADDR
// y := GetY ( building ) ;
67799: LD_ADDR_VAR 0 6
67803: PUSH
67804: LD_VAR 0 2
67808: PPUSH
67809: CALL_OW 251
67813: ST_TO_ADDR
// d := GetDir ( building ) ;
67814: LD_ADDR_VAR 0 8
67818: PUSH
67819: LD_VAR 0 2
67823: PPUSH
67824: CALL_OW 254
67828: ST_TO_ADDR
// r := 4 ;
67829: LD_ADDR_VAR 0 9
67833: PUSH
67834: LD_INT 4
67836: ST_TO_ADDR
// for i := 1 to 5 do
67837: LD_ADDR_VAR 0 10
67841: PUSH
67842: DOUBLE
67843: LD_INT 1
67845: DEC
67846: ST_TO_ADDR
67847: LD_INT 5
67849: PUSH
67850: FOR_TO
67851: IFFALSE 68008
// begin _x := ShiftX ( x , d , r + i ) ;
67853: LD_ADDR_VAR 0 5
67857: PUSH
67858: LD_VAR 0 4
67862: PPUSH
67863: LD_VAR 0 8
67867: PPUSH
67868: LD_VAR 0 9
67872: PUSH
67873: LD_VAR 0 10
67877: PLUS
67878: PPUSH
67879: CALL_OW 272
67883: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67884: LD_ADDR_VAR 0 7
67888: PUSH
67889: LD_VAR 0 6
67893: PPUSH
67894: LD_VAR 0 8
67898: PPUSH
67899: LD_VAR 0 9
67903: PUSH
67904: LD_VAR 0 10
67908: PLUS
67909: PPUSH
67910: CALL_OW 273
67914: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67915: LD_VAR 0 5
67919: PPUSH
67920: LD_VAR 0 7
67924: PPUSH
67925: CALL_OW 488
67929: PUSH
67930: LD_VAR 0 5
67934: PPUSH
67935: LD_VAR 0 7
67939: PPUSH
67940: CALL_OW 428
67944: PPUSH
67945: CALL_OW 247
67949: PUSH
67950: LD_INT 3
67952: PUSH
67953: LD_INT 2
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: IN
67960: NOT
67961: AND
67962: IFFALSE 68006
// begin ComMoveXY ( unit , _x , _y ) ;
67964: LD_VAR 0 1
67968: PPUSH
67969: LD_VAR 0 5
67973: PPUSH
67974: LD_VAR 0 7
67978: PPUSH
67979: CALL_OW 111
// result := [ _x , _y ] ;
67983: LD_ADDR_VAR 0 3
67987: PUSH
67988: LD_VAR 0 5
67992: PUSH
67993: LD_VAR 0 7
67997: PUSH
67998: EMPTY
67999: LIST
68000: LIST
68001: ST_TO_ADDR
// exit ;
68002: POP
68003: POP
68004: GO 68010
// end ; end ;
68006: GO 67850
68008: POP
68009: POP
// end ;
68010: LD_VAR 0 3
68014: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68015: LD_INT 0
68017: PPUSH
68018: PPUSH
68019: PPUSH
// result := 0 ;
68020: LD_ADDR_VAR 0 3
68024: PUSH
68025: LD_INT 0
68027: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68028: LD_VAR 0 1
68032: PUSH
68033: LD_INT 0
68035: LESS
68036: PUSH
68037: LD_VAR 0 1
68041: PUSH
68042: LD_INT 8
68044: GREATER
68045: OR
68046: PUSH
68047: LD_VAR 0 2
68051: PUSH
68052: LD_INT 0
68054: LESS
68055: OR
68056: PUSH
68057: LD_VAR 0 2
68061: PUSH
68062: LD_INT 8
68064: GREATER
68065: OR
68066: IFFALSE 68070
// exit ;
68068: GO 68145
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68070: LD_ADDR_VAR 0 4
68074: PUSH
68075: LD_INT 22
68077: PUSH
68078: LD_VAR 0 2
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: PPUSH
68087: CALL_OW 69
68091: PUSH
68092: FOR_IN
68093: IFFALSE 68143
// begin un := UnitShoot ( i ) ;
68095: LD_ADDR_VAR 0 5
68099: PUSH
68100: LD_VAR 0 4
68104: PPUSH
68105: CALL_OW 504
68109: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68110: LD_VAR 0 5
68114: PPUSH
68115: CALL_OW 255
68119: PUSH
68120: LD_VAR 0 1
68124: EQUAL
68125: IFFALSE 68141
// begin result := un ;
68127: LD_ADDR_VAR 0 3
68131: PUSH
68132: LD_VAR 0 5
68136: ST_TO_ADDR
// exit ;
68137: POP
68138: POP
68139: GO 68145
// end ; end ;
68141: GO 68092
68143: POP
68144: POP
// end ;
68145: LD_VAR 0 3
68149: RET
// export function GetCargoBay ( units ) ; begin
68150: LD_INT 0
68152: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68153: LD_ADDR_VAR 0 2
68157: PUSH
68158: LD_VAR 0 1
68162: PPUSH
68163: LD_INT 2
68165: PUSH
68166: LD_INT 34
68168: PUSH
68169: LD_INT 12
68171: PUSH
68172: EMPTY
68173: LIST
68174: LIST
68175: PUSH
68176: LD_INT 34
68178: PUSH
68179: LD_INT 51
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: PUSH
68186: LD_INT 34
68188: PUSH
68189: LD_INT 32
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PUSH
68196: LD_INT 34
68198: PUSH
68199: LD_INT 89
68201: PUSH
68202: EMPTY
68203: LIST
68204: LIST
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: LIST
68210: LIST
68211: LIST
68212: PPUSH
68213: CALL_OW 72
68217: ST_TO_ADDR
// end ;
68218: LD_VAR 0 2
68222: RET
// export function Negate ( value ) ; begin
68223: LD_INT 0
68225: PPUSH
// result := not value ;
68226: LD_ADDR_VAR 0 2
68230: PUSH
68231: LD_VAR 0 1
68235: NOT
68236: ST_TO_ADDR
// end ;
68237: LD_VAR 0 2
68241: RET
// export function Inc ( value ) ; begin
68242: LD_INT 0
68244: PPUSH
// result := value + 1 ;
68245: LD_ADDR_VAR 0 2
68249: PUSH
68250: LD_VAR 0 1
68254: PUSH
68255: LD_INT 1
68257: PLUS
68258: ST_TO_ADDR
// end ;
68259: LD_VAR 0 2
68263: RET
// export function Dec ( value ) ; begin
68264: LD_INT 0
68266: PPUSH
// result := value - 1 ;
68267: LD_ADDR_VAR 0 2
68271: PUSH
68272: LD_VAR 0 1
68276: PUSH
68277: LD_INT 1
68279: MINUS
68280: ST_TO_ADDR
// end ;
68281: LD_VAR 0 2
68285: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68286: LD_INT 0
68288: PPUSH
68289: PPUSH
68290: PPUSH
68291: PPUSH
68292: PPUSH
68293: PPUSH
68294: PPUSH
68295: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68296: LD_VAR 0 1
68300: PPUSH
68301: LD_VAR 0 2
68305: PPUSH
68306: CALL_OW 488
68310: NOT
68311: PUSH
68312: LD_VAR 0 3
68316: PPUSH
68317: LD_VAR 0 4
68321: PPUSH
68322: CALL_OW 488
68326: NOT
68327: OR
68328: IFFALSE 68341
// begin result := - 1 ;
68330: LD_ADDR_VAR 0 5
68334: PUSH
68335: LD_INT 1
68337: NEG
68338: ST_TO_ADDR
// exit ;
68339: GO 68576
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68341: LD_ADDR_VAR 0 12
68345: PUSH
68346: LD_VAR 0 1
68350: PPUSH
68351: LD_VAR 0 2
68355: PPUSH
68356: LD_VAR 0 3
68360: PPUSH
68361: LD_VAR 0 4
68365: PPUSH
68366: CALL 67426 0 4
68370: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68371: LD_ADDR_VAR 0 11
68375: PUSH
68376: LD_VAR 0 1
68380: PPUSH
68381: LD_VAR 0 2
68385: PPUSH
68386: LD_VAR 0 12
68390: PUSH
68391: LD_INT 1
68393: ARRAY
68394: PPUSH
68395: LD_VAR 0 12
68399: PUSH
68400: LD_INT 2
68402: ARRAY
68403: PPUSH
68404: CALL_OW 298
68408: ST_TO_ADDR
// distance := 9999 ;
68409: LD_ADDR_VAR 0 10
68413: PUSH
68414: LD_INT 9999
68416: ST_TO_ADDR
// for i := 0 to 5 do
68417: LD_ADDR_VAR 0 6
68421: PUSH
68422: DOUBLE
68423: LD_INT 0
68425: DEC
68426: ST_TO_ADDR
68427: LD_INT 5
68429: PUSH
68430: FOR_TO
68431: IFFALSE 68574
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68433: LD_ADDR_VAR 0 7
68437: PUSH
68438: LD_VAR 0 1
68442: PPUSH
68443: LD_VAR 0 6
68447: PPUSH
68448: LD_VAR 0 11
68452: PPUSH
68453: CALL_OW 272
68457: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68458: LD_ADDR_VAR 0 8
68462: PUSH
68463: LD_VAR 0 2
68467: PPUSH
68468: LD_VAR 0 6
68472: PPUSH
68473: LD_VAR 0 11
68477: PPUSH
68478: CALL_OW 273
68482: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68483: LD_VAR 0 7
68487: PPUSH
68488: LD_VAR 0 8
68492: PPUSH
68493: CALL_OW 488
68497: NOT
68498: IFFALSE 68502
// continue ;
68500: GO 68430
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68502: LD_ADDR_VAR 0 9
68506: PUSH
68507: LD_VAR 0 12
68511: PUSH
68512: LD_INT 1
68514: ARRAY
68515: PPUSH
68516: LD_VAR 0 12
68520: PUSH
68521: LD_INT 2
68523: ARRAY
68524: PPUSH
68525: LD_VAR 0 7
68529: PPUSH
68530: LD_VAR 0 8
68534: PPUSH
68535: CALL_OW 298
68539: ST_TO_ADDR
// if tmp < distance then
68540: LD_VAR 0 9
68544: PUSH
68545: LD_VAR 0 10
68549: LESS
68550: IFFALSE 68572
// begin result := i ;
68552: LD_ADDR_VAR 0 5
68556: PUSH
68557: LD_VAR 0 6
68561: ST_TO_ADDR
// distance := tmp ;
68562: LD_ADDR_VAR 0 10
68566: PUSH
68567: LD_VAR 0 9
68571: ST_TO_ADDR
// end ; end ;
68572: GO 68430
68574: POP
68575: POP
// end ;
68576: LD_VAR 0 5
68580: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68581: LD_INT 0
68583: PPUSH
68584: PPUSH
// if not driver or not IsInUnit ( driver ) then
68585: LD_VAR 0 1
68589: NOT
68590: PUSH
68591: LD_VAR 0 1
68595: PPUSH
68596: CALL_OW 310
68600: NOT
68601: OR
68602: IFFALSE 68606
// exit ;
68604: GO 68696
// vehicle := IsInUnit ( driver ) ;
68606: LD_ADDR_VAR 0 3
68610: PUSH
68611: LD_VAR 0 1
68615: PPUSH
68616: CALL_OW 310
68620: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68621: LD_VAR 0 1
68625: PPUSH
68626: LD_STRING \
68628: PUSH
68629: LD_INT 0
68631: PUSH
68632: LD_INT 0
68634: PUSH
68635: LD_INT 0
68637: PUSH
68638: LD_INT 0
68640: PUSH
68641: LD_INT 0
68643: PUSH
68644: LD_INT 0
68646: PUSH
68647: EMPTY
68648: LIST
68649: LIST
68650: LIST
68651: LIST
68652: LIST
68653: LIST
68654: LIST
68655: PUSH
68656: LD_STRING E
68658: PUSH
68659: LD_INT 0
68661: PUSH
68662: LD_INT 0
68664: PUSH
68665: LD_VAR 0 3
68669: PUSH
68670: LD_INT 0
68672: PUSH
68673: LD_INT 0
68675: PUSH
68676: LD_INT 0
68678: PUSH
68679: EMPTY
68680: LIST
68681: LIST
68682: LIST
68683: LIST
68684: LIST
68685: LIST
68686: LIST
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: PPUSH
68692: CALL_OW 446
// end ;
68696: LD_VAR 0 2
68700: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68701: LD_INT 0
68703: PPUSH
68704: PPUSH
// if not driver or not IsInUnit ( driver ) then
68705: LD_VAR 0 1
68709: NOT
68710: PUSH
68711: LD_VAR 0 1
68715: PPUSH
68716: CALL_OW 310
68720: NOT
68721: OR
68722: IFFALSE 68726
// exit ;
68724: GO 68816
// vehicle := IsInUnit ( driver ) ;
68726: LD_ADDR_VAR 0 3
68730: PUSH
68731: LD_VAR 0 1
68735: PPUSH
68736: CALL_OW 310
68740: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68741: LD_VAR 0 1
68745: PPUSH
68746: LD_STRING \
68748: PUSH
68749: LD_INT 0
68751: PUSH
68752: LD_INT 0
68754: PUSH
68755: LD_INT 0
68757: PUSH
68758: LD_INT 0
68760: PUSH
68761: LD_INT 0
68763: PUSH
68764: LD_INT 0
68766: PUSH
68767: EMPTY
68768: LIST
68769: LIST
68770: LIST
68771: LIST
68772: LIST
68773: LIST
68774: LIST
68775: PUSH
68776: LD_STRING E
68778: PUSH
68779: LD_INT 0
68781: PUSH
68782: LD_INT 0
68784: PUSH
68785: LD_VAR 0 3
68789: PUSH
68790: LD_INT 0
68792: PUSH
68793: LD_INT 0
68795: PUSH
68796: LD_INT 0
68798: PUSH
68799: EMPTY
68800: LIST
68801: LIST
68802: LIST
68803: LIST
68804: LIST
68805: LIST
68806: LIST
68807: PUSH
68808: EMPTY
68809: LIST
68810: LIST
68811: PPUSH
68812: CALL_OW 447
// end ;
68816: LD_VAR 0 2
68820: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68821: LD_INT 0
68823: PPUSH
68824: PPUSH
68825: PPUSH
// tmp := [ ] ;
68826: LD_ADDR_VAR 0 5
68830: PUSH
68831: EMPTY
68832: ST_TO_ADDR
// for i in units do
68833: LD_ADDR_VAR 0 4
68837: PUSH
68838: LD_VAR 0 1
68842: PUSH
68843: FOR_IN
68844: IFFALSE 68882
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68846: LD_ADDR_VAR 0 5
68850: PUSH
68851: LD_VAR 0 5
68855: PPUSH
68856: LD_VAR 0 5
68860: PUSH
68861: LD_INT 1
68863: PLUS
68864: PPUSH
68865: LD_VAR 0 4
68869: PPUSH
68870: CALL_OW 256
68874: PPUSH
68875: CALL_OW 2
68879: ST_TO_ADDR
68880: GO 68843
68882: POP
68883: POP
// if not tmp then
68884: LD_VAR 0 5
68888: NOT
68889: IFFALSE 68893
// exit ;
68891: GO 68941
// if asc then
68893: LD_VAR 0 2
68897: IFFALSE 68921
// result := SortListByListAsc ( units , tmp ) else
68899: LD_ADDR_VAR 0 3
68903: PUSH
68904: LD_VAR 0 1
68908: PPUSH
68909: LD_VAR 0 5
68913: PPUSH
68914: CALL_OW 76
68918: ST_TO_ADDR
68919: GO 68941
// result := SortListByListDesc ( units , tmp ) ;
68921: LD_ADDR_VAR 0 3
68925: PUSH
68926: LD_VAR 0 1
68930: PPUSH
68931: LD_VAR 0 5
68935: PPUSH
68936: CALL_OW 77
68940: ST_TO_ADDR
// end ;
68941: LD_VAR 0 3
68945: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68946: LD_INT 0
68948: PPUSH
68949: PPUSH
// task := GetTaskList ( mech ) ;
68950: LD_ADDR_VAR 0 4
68954: PUSH
68955: LD_VAR 0 1
68959: PPUSH
68960: CALL_OW 437
68964: ST_TO_ADDR
// if not task then
68965: LD_VAR 0 4
68969: NOT
68970: IFFALSE 68974
// exit ;
68972: GO 69016
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68974: LD_ADDR_VAR 0 3
68978: PUSH
68979: LD_VAR 0 4
68983: PUSH
68984: LD_INT 1
68986: ARRAY
68987: PUSH
68988: LD_INT 1
68990: ARRAY
68991: PUSH
68992: LD_STRING r
68994: EQUAL
68995: PUSH
68996: LD_VAR 0 4
69000: PUSH
69001: LD_INT 1
69003: ARRAY
69004: PUSH
69005: LD_INT 4
69007: ARRAY
69008: PUSH
69009: LD_VAR 0 2
69013: EQUAL
69014: AND
69015: ST_TO_ADDR
// end ;
69016: LD_VAR 0 3
69020: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69021: LD_INT 0
69023: PPUSH
// SetDir ( unit , d ) ;
69024: LD_VAR 0 1
69028: PPUSH
69029: LD_VAR 0 4
69033: PPUSH
69034: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69038: LD_VAR 0 1
69042: PPUSH
69043: LD_VAR 0 2
69047: PPUSH
69048: LD_VAR 0 3
69052: PPUSH
69053: LD_VAR 0 5
69057: PPUSH
69058: CALL_OW 48
// end ;
69062: LD_VAR 0 6
69066: RET
// export function ToNaturalNumber ( number ) ; begin
69067: LD_INT 0
69069: PPUSH
// result := number div 1 ;
69070: LD_ADDR_VAR 0 2
69074: PUSH
69075: LD_VAR 0 1
69079: PUSH
69080: LD_INT 1
69082: DIV
69083: ST_TO_ADDR
// if number < 0 then
69084: LD_VAR 0 1
69088: PUSH
69089: LD_INT 0
69091: LESS
69092: IFFALSE 69102
// result := 0 ;
69094: LD_ADDR_VAR 0 2
69098: PUSH
69099: LD_INT 0
69101: ST_TO_ADDR
// end ;
69102: LD_VAR 0 2
69106: RET
// export function SortByClass ( units , class ) ; var un ; begin
69107: LD_INT 0
69109: PPUSH
69110: PPUSH
// if not units or not class then
69111: LD_VAR 0 1
69115: NOT
69116: PUSH
69117: LD_VAR 0 2
69121: NOT
69122: OR
69123: IFFALSE 69127
// exit ;
69125: GO 69222
// result := [ ] ;
69127: LD_ADDR_VAR 0 3
69131: PUSH
69132: EMPTY
69133: ST_TO_ADDR
// for un in units do
69134: LD_ADDR_VAR 0 4
69138: PUSH
69139: LD_VAR 0 1
69143: PUSH
69144: FOR_IN
69145: IFFALSE 69220
// if GetClass ( un ) = class then
69147: LD_VAR 0 4
69151: PPUSH
69152: CALL_OW 257
69156: PUSH
69157: LD_VAR 0 2
69161: EQUAL
69162: IFFALSE 69189
// result := Insert ( result , 1 , un ) else
69164: LD_ADDR_VAR 0 3
69168: PUSH
69169: LD_VAR 0 3
69173: PPUSH
69174: LD_INT 1
69176: PPUSH
69177: LD_VAR 0 4
69181: PPUSH
69182: CALL_OW 2
69186: ST_TO_ADDR
69187: GO 69218
// result := Replace ( result , result + 1 , un ) ;
69189: LD_ADDR_VAR 0 3
69193: PUSH
69194: LD_VAR 0 3
69198: PPUSH
69199: LD_VAR 0 3
69203: PUSH
69204: LD_INT 1
69206: PLUS
69207: PPUSH
69208: LD_VAR 0 4
69212: PPUSH
69213: CALL_OW 1
69217: ST_TO_ADDR
69218: GO 69144
69220: POP
69221: POP
// end ;
69222: LD_VAR 0 3
69226: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69227: LD_INT 0
69229: PPUSH
69230: PPUSH
69231: PPUSH
69232: PPUSH
69233: PPUSH
69234: PPUSH
69235: PPUSH
// result := [ ] ;
69236: LD_ADDR_VAR 0 4
69240: PUSH
69241: EMPTY
69242: ST_TO_ADDR
// if x - r < 0 then
69243: LD_VAR 0 1
69247: PUSH
69248: LD_VAR 0 3
69252: MINUS
69253: PUSH
69254: LD_INT 0
69256: LESS
69257: IFFALSE 69269
// min_x := 0 else
69259: LD_ADDR_VAR 0 8
69263: PUSH
69264: LD_INT 0
69266: ST_TO_ADDR
69267: GO 69285
// min_x := x - r ;
69269: LD_ADDR_VAR 0 8
69273: PUSH
69274: LD_VAR 0 1
69278: PUSH
69279: LD_VAR 0 3
69283: MINUS
69284: ST_TO_ADDR
// if y - r < 0 then
69285: LD_VAR 0 2
69289: PUSH
69290: LD_VAR 0 3
69294: MINUS
69295: PUSH
69296: LD_INT 0
69298: LESS
69299: IFFALSE 69311
// min_y := 0 else
69301: LD_ADDR_VAR 0 7
69305: PUSH
69306: LD_INT 0
69308: ST_TO_ADDR
69309: GO 69327
// min_y := y - r ;
69311: LD_ADDR_VAR 0 7
69315: PUSH
69316: LD_VAR 0 2
69320: PUSH
69321: LD_VAR 0 3
69325: MINUS
69326: ST_TO_ADDR
// max_x := x + r ;
69327: LD_ADDR_VAR 0 9
69331: PUSH
69332: LD_VAR 0 1
69336: PUSH
69337: LD_VAR 0 3
69341: PLUS
69342: ST_TO_ADDR
// max_y := y + r ;
69343: LD_ADDR_VAR 0 10
69347: PUSH
69348: LD_VAR 0 2
69352: PUSH
69353: LD_VAR 0 3
69357: PLUS
69358: ST_TO_ADDR
// for _x = min_x to max_x do
69359: LD_ADDR_VAR 0 5
69363: PUSH
69364: DOUBLE
69365: LD_VAR 0 8
69369: DEC
69370: ST_TO_ADDR
69371: LD_VAR 0 9
69375: PUSH
69376: FOR_TO
69377: IFFALSE 69478
// for _y = min_y to max_y do
69379: LD_ADDR_VAR 0 6
69383: PUSH
69384: DOUBLE
69385: LD_VAR 0 7
69389: DEC
69390: ST_TO_ADDR
69391: LD_VAR 0 10
69395: PUSH
69396: FOR_TO
69397: IFFALSE 69474
// begin if not ValidHex ( _x , _y ) then
69399: LD_VAR 0 5
69403: PPUSH
69404: LD_VAR 0 6
69408: PPUSH
69409: CALL_OW 488
69413: NOT
69414: IFFALSE 69418
// continue ;
69416: GO 69396
// if GetResourceTypeXY ( _x , _y ) then
69418: LD_VAR 0 5
69422: PPUSH
69423: LD_VAR 0 6
69427: PPUSH
69428: CALL_OW 283
69432: IFFALSE 69472
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69434: LD_ADDR_VAR 0 4
69438: PUSH
69439: LD_VAR 0 4
69443: PPUSH
69444: LD_VAR 0 4
69448: PUSH
69449: LD_INT 1
69451: PLUS
69452: PPUSH
69453: LD_VAR 0 5
69457: PUSH
69458: LD_VAR 0 6
69462: PUSH
69463: EMPTY
69464: LIST
69465: LIST
69466: PPUSH
69467: CALL_OW 1
69471: ST_TO_ADDR
// end ;
69472: GO 69396
69474: POP
69475: POP
69476: GO 69376
69478: POP
69479: POP
// end ;
69480: LD_VAR 0 4
69484: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69485: LD_INT 0
69487: PPUSH
69488: PPUSH
69489: PPUSH
69490: PPUSH
69491: PPUSH
69492: PPUSH
69493: PPUSH
69494: PPUSH
// if not units then
69495: LD_VAR 0 1
69499: NOT
69500: IFFALSE 69504
// exit ;
69502: GO 70028
// result := UnitFilter ( units , [ f_ok ] ) ;
69504: LD_ADDR_VAR 0 3
69508: PUSH
69509: LD_VAR 0 1
69513: PPUSH
69514: LD_INT 50
69516: PUSH
69517: EMPTY
69518: LIST
69519: PPUSH
69520: CALL_OW 72
69524: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69525: LD_ADDR_VAR 0 8
69529: PUSH
69530: LD_VAR 0 1
69534: PUSH
69535: LD_INT 1
69537: ARRAY
69538: PPUSH
69539: CALL_OW 255
69543: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69544: LD_ADDR_VAR 0 10
69548: PUSH
69549: LD_INT 29
69551: PUSH
69552: LD_INT 91
69554: PUSH
69555: LD_INT 49
69557: PUSH
69558: EMPTY
69559: LIST
69560: LIST
69561: LIST
69562: ST_TO_ADDR
// if not result then
69563: LD_VAR 0 3
69567: NOT
69568: IFFALSE 69572
// exit ;
69570: GO 70028
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69572: LD_ADDR_VAR 0 5
69576: PUSH
69577: LD_INT 81
69579: PUSH
69580: LD_VAR 0 8
69584: PUSH
69585: EMPTY
69586: LIST
69587: LIST
69588: PPUSH
69589: CALL_OW 69
69593: ST_TO_ADDR
// for i in result do
69594: LD_ADDR_VAR 0 4
69598: PUSH
69599: LD_VAR 0 3
69603: PUSH
69604: FOR_IN
69605: IFFALSE 70026
// begin tag := GetTag ( i ) + 1 ;
69607: LD_ADDR_VAR 0 9
69611: PUSH
69612: LD_VAR 0 4
69616: PPUSH
69617: CALL_OW 110
69621: PUSH
69622: LD_INT 1
69624: PLUS
69625: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69626: LD_ADDR_VAR 0 7
69630: PUSH
69631: LD_VAR 0 4
69635: PPUSH
69636: CALL_OW 250
69640: PPUSH
69641: LD_VAR 0 4
69645: PPUSH
69646: CALL_OW 251
69650: PPUSH
69651: LD_INT 6
69653: PPUSH
69654: CALL 69227 0 3
69658: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69659: LD_VAR 0 4
69663: PPUSH
69664: CALL_OW 247
69668: PUSH
69669: LD_INT 2
69671: EQUAL
69672: PUSH
69673: LD_VAR 0 7
69677: AND
69678: PUSH
69679: LD_VAR 0 4
69683: PPUSH
69684: CALL_OW 264
69688: PUSH
69689: LD_VAR 0 10
69693: IN
69694: NOT
69695: AND
69696: IFFALSE 69735
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69698: LD_VAR 0 4
69702: PPUSH
69703: LD_VAR 0 7
69707: PUSH
69708: LD_INT 1
69710: ARRAY
69711: PUSH
69712: LD_INT 1
69714: ARRAY
69715: PPUSH
69716: LD_VAR 0 7
69720: PUSH
69721: LD_INT 1
69723: ARRAY
69724: PUSH
69725: LD_INT 2
69727: ARRAY
69728: PPUSH
69729: CALL_OW 116
69733: GO 70024
// if path > tag then
69735: LD_VAR 0 2
69739: PUSH
69740: LD_VAR 0 9
69744: GREATER
69745: IFFALSE 69953
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
69747: LD_ADDR_VAR 0 6
69751: PUSH
69752: LD_VAR 0 5
69756: PPUSH
69757: LD_INT 91
69759: PUSH
69760: LD_VAR 0 4
69764: PUSH
69765: LD_INT 8
69767: PUSH
69768: EMPTY
69769: LIST
69770: LIST
69771: LIST
69772: PPUSH
69773: CALL_OW 72
69777: ST_TO_ADDR
// if nearEnemy then
69778: LD_VAR 0 6
69782: IFFALSE 69851
// begin if GetWeapon ( i ) = ru_time_lapser then
69784: LD_VAR 0 4
69788: PPUSH
69789: CALL_OW 264
69793: PUSH
69794: LD_INT 49
69796: EQUAL
69797: IFFALSE 69825
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69799: LD_VAR 0 4
69803: PPUSH
69804: LD_VAR 0 6
69808: PPUSH
69809: LD_VAR 0 4
69813: PPUSH
69814: CALL_OW 74
69818: PPUSH
69819: CALL_OW 112
69823: GO 69849
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69825: LD_VAR 0 4
69829: PPUSH
69830: LD_VAR 0 6
69834: PPUSH
69835: LD_VAR 0 4
69839: PPUSH
69840: CALL_OW 74
69844: PPUSH
69845: CALL 70953 0 2
// end else
69849: GO 69951
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69851: LD_VAR 0 4
69855: PPUSH
69856: LD_VAR 0 2
69860: PUSH
69861: LD_VAR 0 9
69865: ARRAY
69866: PUSH
69867: LD_INT 1
69869: ARRAY
69870: PPUSH
69871: LD_VAR 0 2
69875: PUSH
69876: LD_VAR 0 9
69880: ARRAY
69881: PUSH
69882: LD_INT 2
69884: ARRAY
69885: PPUSH
69886: CALL_OW 297
69890: PUSH
69891: LD_INT 6
69893: GREATER
69894: IFFALSE 69937
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69896: LD_VAR 0 4
69900: PPUSH
69901: LD_VAR 0 2
69905: PUSH
69906: LD_VAR 0 9
69910: ARRAY
69911: PUSH
69912: LD_INT 1
69914: ARRAY
69915: PPUSH
69916: LD_VAR 0 2
69920: PUSH
69921: LD_VAR 0 9
69925: ARRAY
69926: PUSH
69927: LD_INT 2
69929: ARRAY
69930: PPUSH
69931: CALL_OW 114
69935: GO 69951
// SetTag ( i , tag ) ;
69937: LD_VAR 0 4
69941: PPUSH
69942: LD_VAR 0 9
69946: PPUSH
69947: CALL_OW 109
// end else
69951: GO 70024
// if enemy then
69953: LD_VAR 0 5
69957: IFFALSE 70024
// begin if GetWeapon ( i ) = ru_time_lapser then
69959: LD_VAR 0 4
69963: PPUSH
69964: CALL_OW 264
69968: PUSH
69969: LD_INT 49
69971: EQUAL
69972: IFFALSE 70000
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69974: LD_VAR 0 4
69978: PPUSH
69979: LD_VAR 0 5
69983: PPUSH
69984: LD_VAR 0 4
69988: PPUSH
69989: CALL_OW 74
69993: PPUSH
69994: CALL_OW 112
69998: GO 70024
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70000: LD_VAR 0 4
70004: PPUSH
70005: LD_VAR 0 5
70009: PPUSH
70010: LD_VAR 0 4
70014: PPUSH
70015: CALL_OW 74
70019: PPUSH
70020: CALL 70953 0 2
// end ; end ;
70024: GO 69604
70026: POP
70027: POP
// end ;
70028: LD_VAR 0 3
70032: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70033: LD_INT 0
70035: PPUSH
70036: PPUSH
70037: PPUSH
// if not unit or IsInUnit ( unit ) then
70038: LD_VAR 0 1
70042: NOT
70043: PUSH
70044: LD_VAR 0 1
70048: PPUSH
70049: CALL_OW 310
70053: OR
70054: IFFALSE 70058
// exit ;
70056: GO 70149
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70058: LD_ADDR_VAR 0 4
70062: PUSH
70063: LD_VAR 0 1
70067: PPUSH
70068: CALL_OW 250
70072: PPUSH
70073: LD_VAR 0 2
70077: PPUSH
70078: LD_INT 1
70080: PPUSH
70081: CALL_OW 272
70085: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70086: LD_ADDR_VAR 0 5
70090: PUSH
70091: LD_VAR 0 1
70095: PPUSH
70096: CALL_OW 251
70100: PPUSH
70101: LD_VAR 0 2
70105: PPUSH
70106: LD_INT 1
70108: PPUSH
70109: CALL_OW 273
70113: ST_TO_ADDR
// if ValidHex ( x , y ) then
70114: LD_VAR 0 4
70118: PPUSH
70119: LD_VAR 0 5
70123: PPUSH
70124: CALL_OW 488
70128: IFFALSE 70149
// ComTurnXY ( unit , x , y ) ;
70130: LD_VAR 0 1
70134: PPUSH
70135: LD_VAR 0 4
70139: PPUSH
70140: LD_VAR 0 5
70144: PPUSH
70145: CALL_OW 118
// end ;
70149: LD_VAR 0 3
70153: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70154: LD_INT 0
70156: PPUSH
70157: PPUSH
// result := false ;
70158: LD_ADDR_VAR 0 3
70162: PUSH
70163: LD_INT 0
70165: ST_TO_ADDR
// if not units then
70166: LD_VAR 0 2
70170: NOT
70171: IFFALSE 70175
// exit ;
70173: GO 70220
// for i in units do
70175: LD_ADDR_VAR 0 4
70179: PUSH
70180: LD_VAR 0 2
70184: PUSH
70185: FOR_IN
70186: IFFALSE 70218
// if See ( side , i ) then
70188: LD_VAR 0 1
70192: PPUSH
70193: LD_VAR 0 4
70197: PPUSH
70198: CALL_OW 292
70202: IFFALSE 70216
// begin result := true ;
70204: LD_ADDR_VAR 0 3
70208: PUSH
70209: LD_INT 1
70211: ST_TO_ADDR
// exit ;
70212: POP
70213: POP
70214: GO 70220
// end ;
70216: GO 70185
70218: POP
70219: POP
// end ;
70220: LD_VAR 0 3
70224: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70225: LD_INT 0
70227: PPUSH
70228: PPUSH
70229: PPUSH
70230: PPUSH
// if not unit or not points then
70231: LD_VAR 0 1
70235: NOT
70236: PUSH
70237: LD_VAR 0 2
70241: NOT
70242: OR
70243: IFFALSE 70247
// exit ;
70245: GO 70337
// dist := 99999 ;
70247: LD_ADDR_VAR 0 5
70251: PUSH
70252: LD_INT 99999
70254: ST_TO_ADDR
// for i in points do
70255: LD_ADDR_VAR 0 4
70259: PUSH
70260: LD_VAR 0 2
70264: PUSH
70265: FOR_IN
70266: IFFALSE 70335
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70268: LD_ADDR_VAR 0 6
70272: PUSH
70273: LD_VAR 0 1
70277: PPUSH
70278: LD_VAR 0 4
70282: PUSH
70283: LD_INT 1
70285: ARRAY
70286: PPUSH
70287: LD_VAR 0 4
70291: PUSH
70292: LD_INT 2
70294: ARRAY
70295: PPUSH
70296: CALL_OW 297
70300: ST_TO_ADDR
// if tmpDist < dist then
70301: LD_VAR 0 6
70305: PUSH
70306: LD_VAR 0 5
70310: LESS
70311: IFFALSE 70333
// begin result := i ;
70313: LD_ADDR_VAR 0 3
70317: PUSH
70318: LD_VAR 0 4
70322: ST_TO_ADDR
// dist := tmpDist ;
70323: LD_ADDR_VAR 0 5
70327: PUSH
70328: LD_VAR 0 6
70332: ST_TO_ADDR
// end ; end ;
70333: GO 70265
70335: POP
70336: POP
// end ;
70337: LD_VAR 0 3
70341: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70342: LD_INT 0
70344: PPUSH
// uc_side := side ;
70345: LD_ADDR_OWVAR 20
70349: PUSH
70350: LD_VAR 0 1
70354: ST_TO_ADDR
// uc_nation := 3 ;
70355: LD_ADDR_OWVAR 21
70359: PUSH
70360: LD_INT 3
70362: ST_TO_ADDR
// vc_chassis := 25 ;
70363: LD_ADDR_OWVAR 37
70367: PUSH
70368: LD_INT 25
70370: ST_TO_ADDR
// vc_engine := engine_siberite ;
70371: LD_ADDR_OWVAR 39
70375: PUSH
70376: LD_INT 3
70378: ST_TO_ADDR
// vc_control := control_computer ;
70379: LD_ADDR_OWVAR 38
70383: PUSH
70384: LD_INT 3
70386: ST_TO_ADDR
// vc_weapon := 59 ;
70387: LD_ADDR_OWVAR 40
70391: PUSH
70392: LD_INT 59
70394: ST_TO_ADDR
// result := CreateVehicle ;
70395: LD_ADDR_VAR 0 5
70399: PUSH
70400: CALL_OW 45
70404: ST_TO_ADDR
// SetDir ( result , d ) ;
70405: LD_VAR 0 5
70409: PPUSH
70410: LD_VAR 0 4
70414: PPUSH
70415: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70419: LD_VAR 0 5
70423: PPUSH
70424: LD_VAR 0 2
70428: PPUSH
70429: LD_VAR 0 3
70433: PPUSH
70434: LD_INT 0
70436: PPUSH
70437: CALL_OW 48
// end ;
70441: LD_VAR 0 5
70445: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70446: LD_INT 0
70448: PPUSH
70449: PPUSH
70450: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70451: LD_ADDR_VAR 0 2
70455: PUSH
70456: LD_INT 0
70458: PUSH
70459: LD_INT 0
70461: PUSH
70462: LD_INT 0
70464: PUSH
70465: LD_INT 0
70467: PUSH
70468: EMPTY
70469: LIST
70470: LIST
70471: LIST
70472: LIST
70473: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70474: LD_VAR 0 1
70478: NOT
70479: PUSH
70480: LD_VAR 0 1
70484: PPUSH
70485: CALL_OW 264
70489: PUSH
70490: LD_INT 12
70492: PUSH
70493: LD_INT 51
70495: PUSH
70496: LD_INT 32
70498: PUSH
70499: LD_INT 89
70501: PUSH
70502: EMPTY
70503: LIST
70504: LIST
70505: LIST
70506: LIST
70507: IN
70508: NOT
70509: OR
70510: IFFALSE 70514
// exit ;
70512: GO 70612
// for i := 1 to 3 do
70514: LD_ADDR_VAR 0 3
70518: PUSH
70519: DOUBLE
70520: LD_INT 1
70522: DEC
70523: ST_TO_ADDR
70524: LD_INT 3
70526: PUSH
70527: FOR_TO
70528: IFFALSE 70610
// begin tmp := GetCargo ( cargo , i ) ;
70530: LD_ADDR_VAR 0 4
70534: PUSH
70535: LD_VAR 0 1
70539: PPUSH
70540: LD_VAR 0 3
70544: PPUSH
70545: CALL_OW 289
70549: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70550: LD_ADDR_VAR 0 2
70554: PUSH
70555: LD_VAR 0 2
70559: PPUSH
70560: LD_VAR 0 3
70564: PPUSH
70565: LD_VAR 0 4
70569: PPUSH
70570: CALL_OW 1
70574: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70575: LD_ADDR_VAR 0 2
70579: PUSH
70580: LD_VAR 0 2
70584: PPUSH
70585: LD_INT 4
70587: PPUSH
70588: LD_VAR 0 2
70592: PUSH
70593: LD_INT 4
70595: ARRAY
70596: PUSH
70597: LD_VAR 0 4
70601: PLUS
70602: PPUSH
70603: CALL_OW 1
70607: ST_TO_ADDR
// end ;
70608: GO 70527
70610: POP
70611: POP
// end ;
70612: LD_VAR 0 2
70616: RET
// export function Length ( array ) ; begin
70617: LD_INT 0
70619: PPUSH
// result := array + 0 ;
70620: LD_ADDR_VAR 0 2
70624: PUSH
70625: LD_VAR 0 1
70629: PUSH
70630: LD_INT 0
70632: PLUS
70633: ST_TO_ADDR
// end ;
70634: LD_VAR 0 2
70638: RET
// export function PrepareArray ( array ) ; begin
70639: LD_INT 0
70641: PPUSH
// result := array diff 0 ;
70642: LD_ADDR_VAR 0 2
70646: PUSH
70647: LD_VAR 0 1
70651: PUSH
70652: LD_INT 0
70654: DIFF
70655: ST_TO_ADDR
// if not result [ 1 ] then
70656: LD_VAR 0 2
70660: PUSH
70661: LD_INT 1
70663: ARRAY
70664: NOT
70665: IFFALSE 70685
// result := Delete ( result , 1 ) ;
70667: LD_ADDR_VAR 0 2
70671: PUSH
70672: LD_VAR 0 2
70676: PPUSH
70677: LD_INT 1
70679: PPUSH
70680: CALL_OW 3
70684: ST_TO_ADDR
// end ;
70685: LD_VAR 0 2
70689: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
70690: LD_INT 0
70692: PPUSH
70693: PPUSH
70694: PPUSH
70695: PPUSH
// sibRocketRange := 25 ;
70696: LD_ADDR_VAR 0 6
70700: PUSH
70701: LD_INT 25
70703: ST_TO_ADDR
// result := false ;
70704: LD_ADDR_VAR 0 4
70708: PUSH
70709: LD_INT 0
70711: ST_TO_ADDR
// for i := 0 to 5 do
70712: LD_ADDR_VAR 0 5
70716: PUSH
70717: DOUBLE
70718: LD_INT 0
70720: DEC
70721: ST_TO_ADDR
70722: LD_INT 5
70724: PUSH
70725: FOR_TO
70726: IFFALSE 70793
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
70728: LD_VAR 0 1
70732: PPUSH
70733: LD_VAR 0 5
70737: PPUSH
70738: LD_VAR 0 6
70742: PPUSH
70743: CALL_OW 272
70747: PPUSH
70748: LD_VAR 0 2
70752: PPUSH
70753: LD_VAR 0 5
70757: PPUSH
70758: LD_VAR 0 6
70762: PPUSH
70763: CALL_OW 273
70767: PPUSH
70768: LD_VAR 0 3
70772: PPUSH
70773: CALL_OW 309
70777: IFFALSE 70791
// begin result := true ;
70779: LD_ADDR_VAR 0 4
70783: PUSH
70784: LD_INT 1
70786: ST_TO_ADDR
// exit ;
70787: POP
70788: POP
70789: GO 70795
// end ;
70791: GO 70725
70793: POP
70794: POP
// end ;
70795: LD_VAR 0 4
70799: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
70800: LD_INT 0
70802: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
70803: LD_VAR 0 1
70807: PPUSH
70808: LD_VAR 0 2
70812: PPUSH
70813: LD_INT 0
70815: PPUSH
70816: LD_INT 0
70818: PPUSH
70819: LD_INT 1
70821: PPUSH
70822: LD_INT 0
70824: PPUSH
70825: CALL_OW 587
// end ;
70829: LD_VAR 0 3
70833: RET
// export function CenterOnNow ( unit ) ; begin
70834: LD_INT 0
70836: PPUSH
// result := IsInUnit ( unit ) ;
70837: LD_ADDR_VAR 0 2
70841: PUSH
70842: LD_VAR 0 1
70846: PPUSH
70847: CALL_OW 310
70851: ST_TO_ADDR
// if not result then
70852: LD_VAR 0 2
70856: NOT
70857: IFFALSE 70869
// result := unit ;
70859: LD_ADDR_VAR 0 2
70863: PUSH
70864: LD_VAR 0 1
70868: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
70869: LD_VAR 0 1
70873: PPUSH
70874: CALL_OW 87
// end ;
70878: LD_VAR 0 2
70882: RET
// export function ComMoveHex ( unit , hex ) ; begin
70883: LD_INT 0
70885: PPUSH
// if not hex then
70886: LD_VAR 0 2
70890: NOT
70891: IFFALSE 70895
// exit ;
70893: GO 70948
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
70895: LD_VAR 0 2
70899: PUSH
70900: LD_INT 1
70902: ARRAY
70903: PPUSH
70904: LD_VAR 0 2
70908: PUSH
70909: LD_INT 2
70911: ARRAY
70912: PPUSH
70913: CALL_OW 428
70917: IFFALSE 70921
// exit ;
70919: GO 70948
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
70921: LD_VAR 0 1
70925: PPUSH
70926: LD_VAR 0 2
70930: PUSH
70931: LD_INT 1
70933: ARRAY
70934: PPUSH
70935: LD_VAR 0 2
70939: PUSH
70940: LD_INT 2
70942: ARRAY
70943: PPUSH
70944: CALL_OW 111
// end ;
70948: LD_VAR 0 3
70952: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
70953: LD_INT 0
70955: PPUSH
70956: PPUSH
70957: PPUSH
// if not unit or not enemy then
70958: LD_VAR 0 1
70962: NOT
70963: PUSH
70964: LD_VAR 0 2
70968: NOT
70969: OR
70970: IFFALSE 70974
// exit ;
70972: GO 71098
// x := GetX ( enemy ) ;
70974: LD_ADDR_VAR 0 4
70978: PUSH
70979: LD_VAR 0 2
70983: PPUSH
70984: CALL_OW 250
70988: ST_TO_ADDR
// y := GetY ( enemy ) ;
70989: LD_ADDR_VAR 0 5
70993: PUSH
70994: LD_VAR 0 2
70998: PPUSH
70999: CALL_OW 251
71003: ST_TO_ADDR
// if ValidHex ( x , y ) then
71004: LD_VAR 0 4
71008: PPUSH
71009: LD_VAR 0 5
71013: PPUSH
71014: CALL_OW 488
71018: IFFALSE 71098
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
71020: LD_VAR 0 2
71024: PPUSH
71025: CALL_OW 247
71029: PUSH
71030: LD_INT 3
71032: PUSH
71033: LD_INT 2
71035: PUSH
71036: EMPTY
71037: LIST
71038: LIST
71039: IN
71040: PUSH
71041: LD_VAR 0 1
71045: PPUSH
71046: CALL_OW 255
71050: PPUSH
71051: LD_VAR 0 2
71055: PPUSH
71056: CALL_OW 292
71060: AND
71061: IFFALSE 71079
// ComAttackUnit ( unit , enemy ) else
71063: LD_VAR 0 1
71067: PPUSH
71068: LD_VAR 0 2
71072: PPUSH
71073: CALL_OW 115
71077: GO 71098
// ComAgressiveMove ( unit , x , y ) ;
71079: LD_VAR 0 1
71083: PPUSH
71084: LD_VAR 0 4
71088: PPUSH
71089: LD_VAR 0 5
71093: PPUSH
71094: CALL_OW 114
// end ; end_of_file
71098: LD_VAR 0 3
71102: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71103: LD_VAR 0 1
71107: PUSH
71108: LD_INT 200
71110: DOUBLE
71111: GREATEREQUAL
71112: IFFALSE 71120
71114: LD_INT 299
71116: DOUBLE
71117: LESSEQUAL
71118: IFTRUE 71122
71120: GO 71154
71122: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71123: LD_VAR 0 1
71127: PPUSH
71128: LD_VAR 0 2
71132: PPUSH
71133: LD_VAR 0 3
71137: PPUSH
71138: LD_VAR 0 4
71142: PPUSH
71143: LD_VAR 0 5
71147: PPUSH
71148: CALL 25647 0 5
71152: GO 71231
71154: LD_INT 300
71156: DOUBLE
71157: GREATEREQUAL
71158: IFFALSE 71166
71160: LD_INT 399
71162: DOUBLE
71163: LESSEQUAL
71164: IFTRUE 71168
71166: GO 71230
71168: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71169: LD_VAR 0 1
71173: PPUSH
71174: LD_VAR 0 2
71178: PPUSH
71179: LD_VAR 0 3
71183: PPUSH
71184: LD_VAR 0 4
71188: PPUSH
71189: LD_VAR 0 5
71193: PPUSH
71194: LD_VAR 0 6
71198: PPUSH
71199: LD_VAR 0 7
71203: PPUSH
71204: LD_VAR 0 8
71208: PPUSH
71209: LD_VAR 0 9
71213: PPUSH
71214: LD_VAR 0 10
71218: PPUSH
71219: LD_VAR 0 11
71223: PPUSH
71224: CALL 21972 0 11
71228: GO 71231
71230: POP
// end ;
71231: PPOPN 11
71233: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71234: LD_VAR 0 1
71238: PPUSH
71239: LD_VAR 0 2
71243: PPUSH
71244: LD_VAR 0 3
71248: PPUSH
71249: LD_VAR 0 4
71253: PPUSH
71254: LD_VAR 0 5
71258: PPUSH
71259: CALL 25383 0 5
// end ; end_of_file
71263: PPOPN 5
71265: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71266: LD_VAR 0 1
71270: PPUSH
71271: LD_VAR 0 2
71275: PPUSH
71276: LD_VAR 0 3
71280: PPUSH
71281: LD_VAR 0 4
71285: PPUSH
71286: LD_VAR 0 5
71290: PPUSH
71291: LD_VAR 0 6
71295: PPUSH
71296: CALL 9624 0 6
// end ;
71300: PPOPN 6
71302: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71303: LD_INT 0
71305: PPUSH
// begin if not units then
71306: LD_VAR 0 1
71310: NOT
71311: IFFALSE 71315
// exit ;
71313: GO 71315
// end ;
71315: PPOPN 7
71317: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71318: CALL 9528 0 0
// end ;
71322: PPOPN 1
71324: END
