// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// SetDifficulty ( GetMultiplayerSetting ( 0 ) ) ;
  11: LD_INT 0
  13: PPUSH
  14: CALL_OW 426
  18: PPUSH
  19: CALL 279 0 1
// InGameOn ;
  23: CALL_OW 8
// CenterNowOnXY ( 0 , 0 ) ;
  27: LD_INT 0
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: CALL_OW 86
// RandomizeAll ;
  37: CALL_OW 11
// DestroyTrash ;
  41: CALL 148 0 0
// ShowPath ;
  45: CALL 214 0 0
// RandMusic ( 1 , 3 ) ;
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 3
  54: PPUSH
  55: CALL 222 0 2
// PrepareAnimals ( [ 8 , 7 , 6 ] [ dif ] , 2 , 3 , nature ) ;
  59: LD_INT 8
  61: PUSH
  62: LD_INT 7
  64: PUSH
  65: LD_INT 6
  67: PUSH
  68: EMPTY
  69: LIST
  70: LIST
  71: LIST
  72: PUSH
  73: LD_EXP 1
  77: ARRAY
  78: PPUSH
  79: LD_INT 2
  81: PPUSH
  82: LD_INT 3
  84: PPUSH
  85: LD_INT 10
  87: PPUSH
  88: CALL 329 0 4
// PrepareRussian ;
  92: CALL 1419 0 0
// Action ;
  96: CALL 8681 0 0
// PrepareAmerican ;
 100: CALL 5293 0 0
// end ;
 104: END
// every 2 2$00 + 1 1$0 do var i , bool ;
 105: GO 107
 107: DISABLE
 108: LD_INT 0
 110: PPUSH
 111: PPUSH
// begin bool := Rand ( false , true ) ;
 112: LD_ADDR_VAR 0 2
 116: PUSH
 117: LD_INT 0
 119: PPUSH
 120: LD_INT 1
 122: PPUSH
 123: CALL_OW 12
 127: ST_TO_ADDR
// if bool then
 128: LD_VAR 0 2
 132: IFFALSE 144
// RandMusic ( 1 , 3 ) ;
 134: LD_INT 1
 136: PPUSH
 137: LD_INT 3
 139: PPUSH
 140: CALL 222 0 2
// enable ;
 144: ENABLE
// end ; end_of_file
 145: PPOPN 2
 147: END
// export function DestroyTrash ; var i ; begin
 148: LD_INT 0
 150: PPUSH
 151: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_not , [ f_lives , 5 ] ] ] ) do
 152: LD_ADDR_VAR 0 2
 156: PUSH
 157: LD_INT 22
 159: PUSH
 160: LD_INT 0
 162: PUSH
 163: EMPTY
 164: LIST
 165: LIST
 166: PUSH
 167: LD_INT 3
 169: PUSH
 170: LD_INT 24
 172: PUSH
 173: LD_INT 5
 175: PUSH
 176: EMPTY
 177: LIST
 178: LIST
 179: PUSH
 180: EMPTY
 181: LIST
 182: LIST
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 69
 192: PUSH
 193: FOR_IN
 194: IFFALSE 207
// KillUnit ( i ) ;
 196: LD_VAR 0 2
 200: PPUSH
 201: CALL_OW 66
 205: GO 193
 207: POP
 208: POP
// end ;
 209: LD_VAR 0 1
 213: RET
// export function ShowPath ; begin
 214: LD_INT 0
 216: PPUSH
// end ;
 217: LD_VAR 0 1
 221: RET
// export function RandMusic ( n1 , n2 ) ; var proc ; begin
 222: LD_INT 0
 224: PPUSH
 225: PPUSH
// proc := Rand ( 0 , 100 ) ;
 226: LD_ADDR_VAR 0 4
 230: PUSH
 231: LD_INT 0
 233: PPUSH
 234: LD_INT 100
 236: PPUSH
 237: CALL_OW 12
 241: ST_TO_ADDR
// if proc > 50 then
 242: LD_VAR 0 4
 246: PUSH
 247: LD_INT 50
 249: GREATER
 250: IFFALSE 264
// music_nat := n1 else
 252: LD_ADDR_OWVAR 71
 256: PUSH
 257: LD_VAR 0 1
 261: ST_TO_ADDR
 262: GO 274
// music_nat := n2 ;
 264: LD_ADDR_OWVAR 71
 268: PUSH
 269: LD_VAR 0 2
 273: ST_TO_ADDR
// end ;
 274: LD_VAR 0 3
 278: RET
// export dif ; export function SetDifficulty ( val ) ; begin
 279: LD_INT 0
 281: PPUSH
// if not val then
 282: LD_VAR 0 1
 286: NOT
 287: IFFALSE 297
// val := 2 ;
 289: LD_ADDR_VAR 0 1
 293: PUSH
 294: LD_INT 2
 296: ST_TO_ADDR
// dif := val ;
 297: LD_ADDR_EXP 1
 301: PUSH
 302: LD_VAR 0 1
 306: ST_TO_ADDR
// if dif < 3 then
 307: LD_EXP 1
 311: PUSH
 312: LD_INT 3
 314: LESS
 315: IFFALSE 324
// RemoveEnvironmentArea ( evnt ) ;
 317: LD_INT 9
 319: PPUSH
 320: CALL_OW 355
// end ;
 324: LD_VAR 0 2
 328: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
 333: PPUSH
 334: PPUSH
 335: PPUSH
// uc_nation = nation_nature ;
 336: LD_ADDR_OWVAR 21
 340: PUSH
 341: LD_INT 0
 343: ST_TO_ADDR
// uc_side = 0 ;
 344: LD_ADDR_OWVAR 20
 348: PUSH
 349: LD_INT 0
 351: ST_TO_ADDR
// hc_importance := 0 ;
 352: LD_ADDR_OWVAR 32
 356: PUSH
 357: LD_INT 0
 359: ST_TO_ADDR
// l = 0 ;
 360: LD_ADDR_VAR 0 6
 364: PUSH
 365: LD_INT 0
 367: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
 368: LD_ADDR_OWVAR 24
 372: PUSH
 373: LD_INT 0
 375: PPUSH
 376: LD_INT 5
 378: PPUSH
 379: CALL_OW 12
 383: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
 384: LD_ADDR_OWVAR 35
 388: PUSH
 389: LD_INT 5
 391: NEG
 392: PPUSH
 393: LD_INT 5
 395: PPUSH
 396: CALL_OW 12
 400: ST_TO_ADDR
// hc_gallery =  ;
 401: LD_ADDR_OWVAR 33
 405: PUSH
 406: LD_STRING 
 408: ST_TO_ADDR
// hc_class = class_apeman ;
 409: LD_ADDR_OWVAR 28
 413: PUSH
 414: LD_INT 12
 416: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
 417: LD_ADDR_OWVAR 29
 421: PUSH
 422: LD_INT 11
 424: PPUSH
 425: LD_INT 13
 427: PPUSH
 428: CALL_OW 12
 432: PUSH
 433: LD_INT 10
 435: PPUSH
 436: LD_INT 11
 438: PPUSH
 439: CALL_OW 12
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: ST_TO_ADDR
// hc_sex = sex_male ;
 448: LD_ADDR_OWVAR 27
 452: PUSH
 453: LD_INT 1
 455: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
 456: LD_ADDR_OWVAR 31
 460: PUSH
 461: LD_INT 0
 463: PPUSH
 464: LD_INT 2
 466: PPUSH
 467: CALL_OW 12
 471: PUSH
 472: LD_INT 0
 474: PUSH
 475: LD_INT 0
 477: PUSH
 478: LD_INT 0
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: ST_TO_ADDR
// apeman = CreateHuman ;
 487: LD_ADDR_VAR 0 7
 491: PUSH
 492: CALL_OW 44
 496: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
 497: LD_VAR 0 7
 501: PPUSH
 502: LD_VAR 0 4
 506: PPUSH
 507: LD_INT 0
 509: PPUSH
 510: CALL_OW 49
// l = l + 1 ;
 514: LD_ADDR_VAR 0 6
 518: PUSH
 519: LD_VAR 0 6
 523: PUSH
 524: LD_INT 1
 526: PLUS
 527: ST_TO_ADDR
// end until l = num1 ;
 528: LD_VAR 0 6
 532: PUSH
 533: LD_VAR 0 1
 537: EQUAL
 538: IFFALSE 368
// l = 0 ;
 540: LD_ADDR_VAR 0 6
 544: PUSH
 545: LD_INT 0
 547: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
 548: LD_ADDR_OWVAR 35
 552: PUSH
 553: LD_INT 0
 555: PPUSH
 556: LD_INT 25
 558: PPUSH
 559: CALL_OW 12
 563: ST_TO_ADDR
// hc_class = class_tiger ;
 564: LD_ADDR_OWVAR 28
 568: PUSH
 569: LD_INT 14
 571: ST_TO_ADDR
// hc_sex = sex_male ;
 572: LD_ADDR_OWVAR 27
 576: PUSH
 577: LD_INT 1
 579: ST_TO_ADDR
// hc_gallery = sandnature ;
 580: LD_ADDR_OWVAR 33
 584: PUSH
 585: LD_STRING sandnature
 587: ST_TO_ADDR
// hc_face_number = 3 ;
 588: LD_ADDR_OWVAR 34
 592: PUSH
 593: LD_INT 3
 595: ST_TO_ADDR
// tiger = CreateHuman ;
 596: LD_ADDR_VAR 0 8
 600: PUSH
 601: CALL_OW 44
 605: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
 606: LD_VAR 0 8
 610: PPUSH
 611: LD_VAR 0 4
 615: PPUSH
 616: LD_INT 0
 618: PPUSH
 619: CALL_OW 49
// l = l + 1 ;
 623: LD_ADDR_VAR 0 6
 627: PUSH
 628: LD_VAR 0 6
 632: PUSH
 633: LD_INT 1
 635: PLUS
 636: ST_TO_ADDR
// end until l = num2 ;
 637: LD_VAR 0 6
 641: PUSH
 642: LD_VAR 0 2
 646: EQUAL
 647: IFFALSE 548
// l = 0 ;
 649: LD_ADDR_VAR 0 6
 653: PUSH
 654: LD_INT 0
 656: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
 657: LD_ADDR_OWVAR 28
 661: PUSH
 662: LD_INT 18
 664: ST_TO_ADDR
// hc_gallery = sandnature ;
 665: LD_ADDR_OWVAR 33
 669: PUSH
 670: LD_STRING sandnature
 672: ST_TO_ADDR
// hc_face_number = 1 ;
 673: LD_ADDR_OWVAR 34
 677: PUSH
 678: LD_INT 1
 680: ST_TO_ADDR
// bird = CreateHuman ;
 681: LD_ADDR_VAR 0 9
 685: PUSH
 686: CALL_OW 44
 690: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
 691: LD_VAR 0 9
 695: PPUSH
 696: LD_INT 0
 698: PPUSH
 699: CALL_OW 51
// l = l + 1 ;
 703: LD_ADDR_VAR 0 6
 707: PUSH
 708: LD_VAR 0 6
 712: PUSH
 713: LD_INT 1
 715: PLUS
 716: ST_TO_ADDR
// end until l = num3 ;
 717: LD_VAR 0 6
 721: PUSH
 722: LD_VAR 0 3
 726: EQUAL
 727: IFFALSE 657
// end ;
 729: LD_VAR 0 5
 733: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
 734: LD_INT 0
 736: PPUSH
 737: PPUSH
 738: PPUSH
 739: PPUSH
 740: PPUSH
 741: PPUSH
// InitHc ;
 742: CALL_OW 19
// hc_class := clas ;
 746: LD_ADDR_OWVAR 28
 750: PUSH
 751: LD_VAR 0 1
 755: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
 756: LD_ADDR_VAR 0 4
 760: PUSH
 761: LD_VAR 0 2
 765: PUSH
 766: LD_INT 1
 768: NEG
 769: PPUSH
 770: LD_INT 1
 772: PPUSH
 773: CALL_OW 12
 777: PLUS
 778: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
 779: LD_ADDR_VAR 0 5
 783: PUSH
 784: LD_VAR 0 2
 788: PUSH
 789: LD_INT 1
 791: NEG
 792: PPUSH
 793: LD_INT 1
 795: PPUSH
 796: CALL_OW 12
 800: PLUS
 801: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
 802: LD_ADDR_VAR 0 6
 806: PUSH
 807: LD_VAR 0 2
 811: PUSH
 812: LD_INT 1
 814: NEG
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: CALL_OW 12
 823: PLUS
 824: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
 825: LD_ADDR_VAR 0 7
 829: PUSH
 830: LD_VAR 0 2
 834: PUSH
 835: LD_INT 1
 837: NEG
 838: PPUSH
 839: LD_INT 1
 841: PPUSH
 842: CALL_OW 12
 846: PLUS
 847: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
 848: LD_VAR 0 1
 852: PUSH
 853: LD_INT 1
 855: EQUAL
 856: IFTRUE 868
 858: PUSH
 859: LD_VAR 0 1
 863: PUSH
 864: LD_INT 9
 866: EQUAL
 867: OR
 868: IFTRUE 880
 870: PUSH
 871: LD_VAR 0 1
 875: PUSH
 876: LD_INT 5
 878: EQUAL
 879: OR
 880: IFTRUE 892
 882: PUSH
 883: LD_VAR 0 1
 887: PUSH
 888: LD_INT 8
 890: EQUAL
 891: OR
 892: IFFALSE 917
// bonus := [ 2 , 0 , 0 , 0 ] ;
 894: LD_ADDR_VAR 0 8
 898: PUSH
 899: LD_INT 2
 901: PUSH
 902: LD_INT 0
 904: PUSH
 905: LD_INT 0
 907: PUSH
 908: LD_INT 0
 910: PUSH
 911: EMPTY
 912: LIST
 913: LIST
 914: LIST
 915: LIST
 916: ST_TO_ADDR
// if clas = 2 then
 917: LD_VAR 0 1
 921: PUSH
 922: LD_INT 2
 924: EQUAL
 925: IFFALSE 950
// bonus := [ 0 , 2 , 0 , 0 ] ;
 927: LD_ADDR_VAR 0 8
 931: PUSH
 932: LD_INT 0
 934: PUSH
 935: LD_INT 2
 937: PUSH
 938: LD_INT 0
 940: PUSH
 941: LD_INT 0
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: LIST
 948: LIST
 949: ST_TO_ADDR
// if clas = 3 then
 950: LD_VAR 0 1
 954: PUSH
 955: LD_INT 3
 957: EQUAL
 958: IFFALSE 983
// bonus := [ 0 , 0 , 2 , 0 ] ;
 960: LD_ADDR_VAR 0 8
 964: PUSH
 965: LD_INT 0
 967: PUSH
 968: LD_INT 0
 970: PUSH
 971: LD_INT 2
 973: PUSH
 974: LD_INT 0
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: LIST
 981: LIST
 982: ST_TO_ADDR
// if clas = 4 then
 983: LD_VAR 0 1
 987: PUSH
 988: LD_INT 4
 990: EQUAL
 991: IFFALSE 1016
// bonus := [ 0 , 0 , 0 , 2 ] ;
 993: LD_ADDR_VAR 0 8
 997: PUSH
 998: LD_INT 0
1000: PUSH
1001: LD_INT 0
1003: PUSH
1004: LD_INT 0
1006: PUSH
1007: LD_INT 2
1009: PUSH
1010: EMPTY
1011: LIST
1012: LIST
1013: LIST
1014: LIST
1015: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
1016: LD_VAR 0 1
1020: PUSH
1021: LD_INT 4
1023: GREATER
1024: IFFALSE 1036
1026: PUSH
1027: LD_VAR 0 1
1031: PUSH
1032: LD_INT 9
1034: NONEQUAL
1035: AND
1036: IFFALSE 1048
1038: PUSH
1039: LD_VAR 0 1
1043: PUSH
1044: LD_INT 5
1046: NONEQUAL
1047: AND
1048: IFFALSE 1060
1050: PUSH
1051: LD_VAR 0 1
1055: PUSH
1056: LD_INT 8
1058: NONEQUAL
1059: AND
1060: IFFALSE 1085
// bonus := [ 0 , 0 , 0 , 0 ] ;
1062: LD_ADDR_VAR 0 8
1066: PUSH
1067: LD_INT 0
1069: PUSH
1070: LD_INT 0
1072: PUSH
1073: LD_INT 0
1075: PUSH
1076: LD_INT 0
1078: PUSH
1079: EMPTY
1080: LIST
1081: LIST
1082: LIST
1083: LIST
1084: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
1085: LD_ADDR_OWVAR 30
1089: PUSH
1090: LD_INT 0
1092: PPUSH
1093: LD_INT 2
1095: PPUSH
1096: CALL_OW 12
1100: PUSH
1101: LD_INT 0
1103: PPUSH
1104: LD_INT 2
1106: PPUSH
1107: CALL_OW 12
1111: PUSH
1112: LD_INT 0
1114: PPUSH
1115: LD_INT 2
1117: PPUSH
1118: CALL_OW 12
1122: PUSH
1123: LD_INT 0
1125: PPUSH
1126: LD_INT 2
1128: PPUSH
1129: CALL_OW 12
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: LIST
1138: LIST
1139: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
1140: LD_ADDR_OWVAR 31
1144: PUSH
1145: LD_VAR 0 4
1149: PUSH
1150: LD_VAR 0 8
1154: PUSH
1155: LD_INT 1
1157: ARRAY
1158: PLUS
1159: PUSH
1160: LD_VAR 0 5
1164: PUSH
1165: LD_VAR 0 8
1169: PUSH
1170: LD_INT 2
1172: ARRAY
1173: PLUS
1174: PUSH
1175: LD_VAR 0 6
1179: PUSH
1180: LD_VAR 0 8
1184: PUSH
1185: LD_INT 3
1187: ARRAY
1188: PLUS
1189: PUSH
1190: LD_VAR 0 7
1194: PUSH
1195: LD_VAR 0 8
1199: PUSH
1200: LD_INT 4
1202: ARRAY
1203: PLUS
1204: PUSH
1205: EMPTY
1206: LIST
1207: LIST
1208: LIST
1209: LIST
1210: ST_TO_ADDR
// if clas = 3 then
1211: LD_VAR 0 1
1215: PUSH
1216: LD_INT 3
1218: EQUAL
1219: IFFALSE 1231
// hc_sex := sex_male else
1221: LD_ADDR_OWVAR 27
1225: PUSH
1226: LD_INT 1
1228: ST_TO_ADDR
1229: GO 1247
// hc_sex := Rand ( sex_male , sex_female ) ;
1231: LD_ADDR_OWVAR 27
1235: PUSH
1236: LD_INT 1
1238: PPUSH
1239: LD_INT 2
1241: PPUSH
1242: CALL_OW 12
1246: ST_TO_ADDR
// hc_gallery :=  ;
1247: LD_ADDR_OWVAR 33
1251: PUSH
1252: LD_STRING 
1254: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 8 , 12 ) ] ;
1255: LD_ADDR_OWVAR 29
1259: PUSH
1260: LD_INT 8
1262: PPUSH
1263: LD_INT 12
1265: PPUSH
1266: CALL_OW 12
1270: PUSH
1271: LD_INT 8
1273: PPUSH
1274: LD_INT 12
1276: PPUSH
1277: CALL_OW 12
1281: PUSH
1282: EMPTY
1283: LIST
1284: LIST
1285: ST_TO_ADDR
// hc_name :=  ;
1286: LD_ADDR_OWVAR 26
1290: PUSH
1291: LD_STRING 
1293: ST_TO_ADDR
// result := CreateHuman ;
1294: LD_ADDR_VAR 0 3
1298: PUSH
1299: CALL_OW 44
1303: ST_TO_ADDR
// end ;
1304: LD_VAR 0 3
1308: RET
// export function CreateVehicleWithDriver ( chassis , engine , weapon , area , dir , lvl ) ; var veh ; begin
1309: LD_INT 0
1311: PPUSH
1312: PPUSH
// vc_chassis := chassis ;
1313: LD_ADDR_OWVAR 37
1317: PUSH
1318: LD_VAR 0 1
1322: ST_TO_ADDR
// vc_engine := engine ;
1323: LD_ADDR_OWVAR 39
1327: PUSH
1328: LD_VAR 0 2
1332: ST_TO_ADDR
// vc_weapon := weapon ;
1333: LD_ADDR_OWVAR 40
1337: PUSH
1338: LD_VAR 0 3
1342: ST_TO_ADDR
// vc_control := control_manual ;
1343: LD_ADDR_OWVAR 38
1347: PUSH
1348: LD_INT 1
1350: ST_TO_ADDR
// veh := CreateVehicle ;
1351: LD_ADDR_VAR 0 8
1355: PUSH
1356: CALL_OW 45
1360: ST_TO_ADDR
// SetDir ( veh , dir ) ;
1361: LD_VAR 0 8
1365: PPUSH
1366: LD_VAR 0 5
1370: PPUSH
1371: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
1375: LD_VAR 0 8
1379: PPUSH
1380: LD_VAR 0 4
1384: PPUSH
1385: LD_INT 0
1387: PPUSH
1388: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , lvl ) , veh ) ;
1392: LD_INT 3
1394: PPUSH
1395: LD_VAR 0 6
1399: PPUSH
1400: CALL 734 0 2
1404: PPUSH
1405: LD_VAR 0 8
1409: PPUSH
1410: CALL_OW 52
// end ; end_of_file
1414: LD_VAR 0 7
1418: RET
// export Popov , Commander , Platonov , Kapral ; export depot_rdy , dep_x , dep_y ; export function PrepareRussian ; var i , un , skill , team , p ; begin
1419: LD_INT 0
1421: PPUSH
1422: PPUSH
1423: PPUSH
1424: PPUSH
1425: PPUSH
1426: PPUSH
// depot_rdy := false ;
1427: LD_ADDR_EXP 6
1431: PUSH
1432: LD_INT 0
1434: ST_TO_ADDR
// uc_side := 6 ;
1435: LD_ADDR_OWVAR 20
1439: PUSH
1440: LD_INT 6
1442: ST_TO_ADDR
// uc_nation := 3 ;
1443: LD_ADDR_OWVAR 21
1447: PUSH
1448: LD_INT 3
1450: ST_TO_ADDR
// hc_gallery := ru ;
1451: LD_ADDR_OWVAR 33
1455: PUSH
1456: LD_STRING ru
1458: ST_TO_ADDR
// hc_face_number := 10 ;
1459: LD_ADDR_OWVAR 34
1463: PUSH
1464: LD_INT 10
1466: ST_TO_ADDR
// hc_name := Popov ;
1467: LD_ADDR_OWVAR 26
1471: PUSH
1472: LD_STRING Popov
1474: ST_TO_ADDR
// hc_class := 1 ;
1475: LD_ADDR_OWVAR 28
1479: PUSH
1480: LD_INT 1
1482: ST_TO_ADDR
// hc_sex := sex_male ;
1483: LD_ADDR_OWVAR 27
1487: PUSH
1488: LD_INT 1
1490: ST_TO_ADDR
// popov := CreateHuman ;
1491: LD_ADDR_EXP 2
1495: PUSH
1496: CALL_OW 44
1500: ST_TO_ADDR
// hc_gallery := general ;
1501: LD_ADDR_OWVAR 33
1505: PUSH
1506: LD_STRING general
1508: ST_TO_ADDR
// hc_face_number := 1 ;
1509: LD_ADDR_OWVAR 34
1513: PUSH
1514: LD_INT 1
1516: ST_TO_ADDR
// hc_name := Platonov ;
1517: LD_ADDR_OWVAR 26
1521: PUSH
1522: LD_STRING Platonov
1524: ST_TO_ADDR
// platonov := CreateHuman ;
1525: LD_ADDR_EXP 4
1529: PUSH
1530: CALL_OW 44
1534: ST_TO_ADDR
// uc_side := 3 ;
1535: LD_ADDR_OWVAR 20
1539: PUSH
1540: LD_INT 3
1542: ST_TO_ADDR
// ChangeSideFog ( 3 , 6 ) ;
1543: LD_INT 3
1545: PPUSH
1546: LD_INT 6
1548: PPUSH
1549: CALL_OW 343
// skill := [ 6 , 5 , 4 ] [ dif ] ;
1553: LD_ADDR_VAR 0 4
1557: PUSH
1558: LD_INT 6
1560: PUSH
1561: LD_INT 5
1563: PUSH
1564: LD_INT 4
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: LIST
1571: PUSH
1572: LD_EXP 1
1576: ARRAY
1577: ST_TO_ADDR
// team := [ ] ;
1578: LD_ADDR_VAR 0 5
1582: PUSH
1583: EMPTY
1584: ST_TO_ADDR
// hc_importance := 100 ;
1585: LD_ADDR_OWVAR 32
1589: PUSH
1590: LD_INT 100
1592: ST_TO_ADDR
// hc_gallery := gamma ;
1593: LD_ADDR_OWVAR 33
1597: PUSH
1598: LD_STRING gamma
1600: ST_TO_ADDR
// hc_face_number := 1 ;
1601: LD_ADDR_OWVAR 34
1605: PUSH
1606: LD_INT 1
1608: ST_TO_ADDR
// hc_class := 1 ;
1609: LD_ADDR_OWVAR 28
1613: PUSH
1614: LD_INT 1
1616: ST_TO_ADDR
// hc_skills := [ [ 8 , 7 , 6 ] [ dif ] , 5 , 3 , 0 ] ;
1617: LD_ADDR_OWVAR 31
1621: PUSH
1622: LD_INT 8
1624: PUSH
1625: LD_INT 7
1627: PUSH
1628: LD_INT 6
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: LIST
1635: PUSH
1636: LD_EXP 1
1640: ARRAY
1641: PUSH
1642: LD_INT 5
1644: PUSH
1645: LD_INT 3
1647: PUSH
1648: LD_INT 0
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: LIST
1655: LIST
1656: ST_TO_ADDR
// hc_sex := sex_male ;
1657: LD_ADDR_OWVAR 27
1661: PUSH
1662: LD_INT 1
1664: ST_TO_ADDR
// hc_name := Mjr. Jurij Karakanov ;
1665: LD_ADDR_OWVAR 26
1669: PUSH
1670: LD_STRING Mjr. Jurij Karakanov
1672: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1673: LD_ADDR_OWVAR 29
1677: PUSH
1678: LD_INT 10
1680: PUSH
1681: LD_INT 11
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: ST_TO_ADDR
// commander := CreateHuman ;
1688: LD_ADDR_EXP 3
1692: PUSH
1693: CALL_OW 44
1697: ST_TO_ADDR
// team := team ^ commander ;
1698: LD_ADDR_VAR 0 5
1702: PUSH
1703: LD_VAR 0 5
1707: PUSH
1708: LD_EXP 3
1712: ADD
1713: ST_TO_ADDR
// hc_importance := 0 ;
1714: LD_ADDR_OWVAR 32
1718: PUSH
1719: LD_INT 0
1721: ST_TO_ADDR
// hc_name :=  ;
1722: LD_ADDR_OWVAR 26
1726: PUSH
1727: LD_STRING 
1729: ST_TO_ADDR
// hc_gallery :=  ;
1730: LD_ADDR_OWVAR 33
1734: PUSH
1735: LD_STRING 
1737: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
1738: LD_ADDR_OWVAR 29
1742: PUSH
1743: LD_INT 12
1745: PUSH
1746: LD_INT 10
1748: PUSH
1749: EMPTY
1750: LIST
1751: LIST
1752: ST_TO_ADDR
// hc_sex := sex_male ;
1753: LD_ADDR_OWVAR 27
1757: PUSH
1758: LD_INT 1
1760: ST_TO_ADDR
// Kapral := CreateHuman ;
1761: LD_ADDR_EXP 5
1765: PUSH
1766: CALL_OW 44
1770: ST_TO_ADDR
// for i = 3 downto dif do
1771: LD_ADDR_VAR 0 2
1775: PUSH
1776: DOUBLE
1777: LD_INT 3
1779: INC
1780: ST_TO_ADDR
1781: LD_EXP 1
1785: PUSH
1786: FOR_DOWNTO
1787: IFFALSE 1893
// begin vc_chassis := ru_medium_tracked ;
1789: LD_ADDR_OWVAR 37
1793: PUSH
1794: LD_INT 22
1796: ST_TO_ADDR
// vc_engine := engine_combustion ;
1797: LD_ADDR_OWVAR 39
1801: PUSH
1802: LD_INT 1
1804: ST_TO_ADDR
// vc_control := control_manual ;
1805: LD_ADDR_OWVAR 38
1809: PUSH
1810: LD_INT 1
1812: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_gun , ru_gun ] [ i ] ;
1813: LD_ADDR_OWVAR 40
1817: PUSH
1818: LD_INT 43
1820: PUSH
1821: LD_INT 44
1823: PUSH
1824: LD_INT 44
1826: PUSH
1827: EMPTY
1828: LIST
1829: LIST
1830: LIST
1831: PUSH
1832: LD_VAR 0 2
1836: ARRAY
1837: ST_TO_ADDR
// vc_fuel_battery := Rand ( 55 , 77 ) ;
1838: LD_ADDR_OWVAR 41
1842: PUSH
1843: LD_INT 55
1845: PPUSH
1846: LD_INT 77
1848: PPUSH
1849: CALL_OW 12
1853: ST_TO_ADDR
// un := CreateVehicle ;
1854: LD_ADDR_VAR 0 3
1858: PUSH
1859: CALL_OW 45
1863: ST_TO_ADDR
// SetDir ( un , 5 ) ;
1864: LD_VAR 0 3
1868: PPUSH
1869: LD_INT 5
1871: PPUSH
1872: CALL_OW 233
// PlaceUnitArea ( un , rus_spawn , false ) ;
1876: LD_VAR 0 3
1880: PPUSH
1881: LD_INT 1
1883: PPUSH
1884: LD_INT 0
1886: PPUSH
1887: CALL_OW 49
// end ;
1891: GO 1786
1893: POP
1894: POP
// vc_weapon := ru_heavy_machine_gun ;
1895: LD_ADDR_OWVAR 40
1899: PUSH
1900: LD_INT 42
1902: ST_TO_ADDR
// vc_fuel_battery := Rand ( 55 , 77 ) ;
1903: LD_ADDR_OWVAR 41
1907: PUSH
1908: LD_INT 55
1910: PPUSH
1911: LD_INT 77
1913: PPUSH
1914: CALL_OW 12
1918: ST_TO_ADDR
// un := CreateVehicle ;
1919: LD_ADDR_VAR 0 3
1923: PUSH
1924: CALL_OW 45
1928: ST_TO_ADDR
// SetDir ( un , 5 ) ;
1929: LD_VAR 0 3
1933: PPUSH
1934: LD_INT 5
1936: PPUSH
1937: CALL_OW 233
// PlaceUnitArea ( un , rus_spawn , false ) ;
1941: LD_VAR 0 3
1945: PPUSH
1946: LD_INT 1
1948: PPUSH
1949: LD_INT 0
1951: PPUSH
1952: CALL_OW 49
// for p = 1 to 4 do
1956: LD_ADDR_VAR 0 6
1960: PUSH
1961: DOUBLE
1962: LD_INT 1
1964: DEC
1965: ST_TO_ADDR
1966: LD_INT 4
1968: PUSH
1969: FOR_TO
1970: IFFALSE 2037
// for i = 1 to [ 5 , 4 , 3 ] [ dif ] do
1972: LD_ADDR_VAR 0 2
1976: PUSH
1977: DOUBLE
1978: LD_INT 1
1980: DEC
1981: ST_TO_ADDR
1982: LD_INT 5
1984: PUSH
1985: LD_INT 4
1987: PUSH
1988: LD_INT 3
1990: PUSH
1991: EMPTY
1992: LIST
1993: LIST
1994: LIST
1995: PUSH
1996: LD_EXP 1
2000: ARRAY
2001: PUSH
2002: FOR_TO
2003: IFFALSE 2033
// team := team ^ CreateHumanWithClass ( p , skill ) ;
2005: LD_ADDR_VAR 0 5
2009: PUSH
2010: LD_VAR 0 5
2014: PUSH
2015: LD_VAR 0 6
2019: PPUSH
2020: LD_VAR 0 4
2024: PPUSH
2025: CALL 734 0 2
2029: ADD
2030: ST_TO_ADDR
2031: GO 2002
2033: POP
2034: POP
2035: GO 1969
2037: POP
2038: POP
// for i = 1 to team do
2039: LD_ADDR_VAR 0 2
2043: PUSH
2044: DOUBLE
2045: LD_INT 1
2047: DEC
2048: ST_TO_ADDR
2049: LD_VAR 0 5
2053: PUSH
2054: FOR_TO
2055: IFFALSE 2175
// if GetClass ( team [ i ] ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_empty ] ] ) then
2057: LD_VAR 0 5
2061: PUSH
2062: LD_VAR 0 2
2066: ARRAY
2067: PPUSH
2068: CALL_OW 257
2072: PUSH
2073: LD_INT 3
2075: EQUAL
2076: IFFALSE 2104
2078: PUSH
2079: LD_INT 22
2081: PUSH
2082: LD_INT 3
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: PUSH
2089: LD_INT 58
2091: PUSH
2092: EMPTY
2093: LIST
2094: PUSH
2095: EMPTY
2096: LIST
2097: LIST
2098: PPUSH
2099: CALL_OW 69
2103: AND
2104: IFFALSE 2152
// PlaceHumanInUnit ( team [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_empty ] ] ) [ 1 ] ) else
2106: LD_VAR 0 5
2110: PUSH
2111: LD_VAR 0 2
2115: ARRAY
2116: PPUSH
2117: LD_INT 22
2119: PUSH
2120: LD_INT 3
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: PUSH
2127: LD_INT 58
2129: PUSH
2130: EMPTY
2131: LIST
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: PPUSH
2137: CALL_OW 69
2141: PUSH
2142: LD_INT 1
2144: ARRAY
2145: PPUSH
2146: CALL_OW 52
2150: GO 2173
// PlaceUnitArea ( team [ i ] , rus_spawn , false ) ;
2152: LD_VAR 0 5
2156: PUSH
2157: LD_VAR 0 2
2161: ARRAY
2162: PPUSH
2163: LD_INT 1
2165: PPUSH
2166: LD_INT 0
2168: PPUSH
2169: CALL_OW 49
2173: GO 2054
2175: POP
2176: POP
// end ;
2177: LD_VAR 0 1
2181: RET
// every 0 0$10 trigger depot_rdy do var i , un , l , driver ;
2182: LD_EXP 6
2186: IFFALSE 2556
2188: GO 2190
2190: DISABLE
2191: LD_INT 0
2193: PPUSH
2194: PPUSH
2195: PPUSH
2196: PPUSH
// begin Wait ( 0 0$07 ) ;
2197: LD_INT 245
2199: PPUSH
2200: CALL_OW 67
// l := 0 ;
2204: LD_ADDR_VAR 0 3
2208: PUSH
2209: LD_INT 0
2211: ST_TO_ADDR
// repeat begin uc_side := 6 ;
2212: LD_ADDR_OWVAR 20
2216: PUSH
2217: LD_INT 6
2219: ST_TO_ADDR
// uc_nation := 3 ;
2220: LD_ADDR_OWVAR 21
2224: PUSH
2225: LD_INT 3
2227: ST_TO_ADDR
// CreateVehicleWithDriver ( ru_medium_tracked , engine_combustion , ru_cargo_bay , rus_cr_spawn , 5 , Rand ( 3 , 6 ) ) ;
2228: LD_INT 22
2230: PPUSH
2231: LD_INT 1
2233: PPUSH
2234: LD_INT 51
2236: PPUSH
2237: LD_INT 5
2239: PPUSH
2240: LD_INT 5
2242: PPUSH
2243: LD_INT 3
2245: PPUSH
2246: LD_INT 6
2248: PPUSH
2249: CALL_OW 12
2253: PPUSH
2254: CALL 1309 0 6
// un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
2258: LD_ADDR_VAR 0 2
2262: PUSH
2263: LD_INT 22
2265: PUSH
2266: LD_INT 6
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PUSH
2273: LD_INT 34
2275: PUSH
2276: LD_INT 51
2278: PUSH
2279: EMPTY
2280: LIST
2281: LIST
2282: PUSH
2283: EMPTY
2284: LIST
2285: LIST
2286: PPUSH
2287: CALL_OW 69
2291: PUSH
2292: LD_INT 1
2294: ARRAY
2295: ST_TO_ADDR
// SetCargo ( un , mat_cans , 100 ) ;
2296: LD_VAR 0 2
2300: PPUSH
2301: LD_INT 1
2303: PPUSH
2304: LD_INT 100
2306: PPUSH
2307: CALL_OW 290
// ComMoveXY ( un , dep_x + 2 , dep_y ) ;
2311: LD_VAR 0 2
2315: PPUSH
2316: LD_EXP 7
2320: PUSH
2321: LD_INT 2
2323: PLUS
2324: PPUSH
2325: LD_EXP 8
2329: PPUSH
2330: CALL_OW 111
// AddComUnload ( un ) ;
2334: LD_VAR 0 2
2338: PPUSH
2339: CALL_OW 219
// if ( l = 0 ) then
2343: LD_VAR 0 3
2347: PUSH
2348: LD_INT 0
2350: EQUAL
2351: IFFALSE 2387
// begin Wait ( 0 0$03 ) ;
2353: LD_INT 105
2355: PPUSH
2356: CALL_OW 67
// driver := IsDrivenBy ( un ) ;
2360: LD_ADDR_VAR 0 4
2364: PUSH
2365: LD_VAR 0 2
2369: PPUSH
2370: CALL_OW 311
2374: ST_TO_ADDR
// Say ( driver , Dtran ) ;
2375: LD_VAR 0 4
2379: PPUSH
2380: LD_STRING Dtran
2382: PPUSH
2383: CALL_OW 88
// end ; if ( l = [ 7 , 6 , 5 ] [ dif ] - 1 ) then
2387: LD_VAR 0 3
2391: PUSH
2392: LD_INT 7
2394: PUSH
2395: LD_INT 6
2397: PUSH
2398: LD_INT 5
2400: PUSH
2401: EMPTY
2402: LIST
2403: LIST
2404: LIST
2405: PUSH
2406: LD_EXP 1
2410: ARRAY
2411: PUSH
2412: LD_INT 1
2414: MINUS
2415: EQUAL
2416: IFFALSE 2452
// begin Wait ( 0 0$03 ) ;
2418: LD_INT 105
2420: PPUSH
2421: CALL_OW 67
// driver := IsDrivenBy ( un ) ;
2425: LD_ADDR_VAR 0 4
2429: PUSH
2430: LD_VAR 0 2
2434: PPUSH
2435: CALL_OW 311
2439: ST_TO_ADDR
// Say ( driver , Dtrans ) ;
2440: LD_VAR 0 4
2444: PPUSH
2445: LD_STRING Dtrans
2447: PPUSH
2448: CALL_OW 88
// end ; while ( not IsInArea ( un , rus_exit ) ) do
2452: LD_VAR 0 2
2456: PPUSH
2457: LD_INT 6
2459: PPUSH
2460: CALL_OW 308
2464: NOT
2465: IFFALSE 2491
// begin Wait ( 0 0$01 ) ;
2467: LD_INT 35
2469: PPUSH
2470: CALL_OW 67
// AddComMoveXY ( un , 69 , 97 ) ;
2474: LD_VAR 0 2
2478: PPUSH
2479: LD_INT 69
2481: PPUSH
2482: LD_INT 97
2484: PPUSH
2485: CALL_OW 171
// end ;
2489: GO 2452
// RemoveUnit ( un ) ;
2491: LD_VAR 0 2
2495: PPUSH
2496: CALL_OW 64
// l = l + 1 ;
2500: LD_ADDR_VAR 0 3
2504: PUSH
2505: LD_VAR 0 3
2509: PUSH
2510: LD_INT 1
2512: PLUS
2513: ST_TO_ADDR
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
2514: LD_INT 1155
2516: PPUSH
2517: LD_INT 5355
2519: PPUSH
2520: CALL_OW 12
2524: PPUSH
2525: CALL_OW 67
// end until l = [ 7 , 6 , 5 ] [ dif ] ;
2529: LD_VAR 0 3
2533: PUSH
2534: LD_INT 7
2536: PUSH
2537: LD_INT 6
2539: PUSH
2540: LD_INT 5
2542: PUSH
2543: EMPTY
2544: LIST
2545: LIST
2546: LIST
2547: PUSH
2548: LD_EXP 1
2552: ARRAY
2553: EQUAL
2554: IFFALSE 2212
// end ; end_of_file
2556: PPOPN 4
2558: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_bazooka and event_rocket = false then
2559: LD_VAR 0 1
2563: PUSH
2564: LD_INT 44
2566: EQUAL
2567: IFFALSE 2579
2569: PUSH
2570: LD_EXP 20
2574: PUSH
2575: LD_INT 0
2577: EQUAL
2578: AND
2579: IFFALSE 2725
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) > 0 then
2581: LD_INT 22
2583: PUSH
2584: LD_INT 3
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: PUSH
2591: LD_INT 25
2593: PUSH
2594: LD_INT 4
2596: PUSH
2597: EMPTY
2598: LIST
2599: LIST
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: PPUSH
2605: CALL_OW 69
2609: PUSH
2610: LD_INT 0
2612: GREATER
2613: IFFALSE 2725
// begin event_rocket := true ;
2615: LD_ADDR_EXP 20
2619: PUSH
2620: LD_INT 1
2622: ST_TO_ADDR
// if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) > 0 then
2623: LD_INT 22
2625: PUSH
2626: LD_INT 3
2628: PUSH
2629: EMPTY
2630: LIST
2631: LIST
2632: PUSH
2633: LD_INT 25
2635: PUSH
2636: LD_INT 4
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: PUSH
2643: LD_INT 26
2645: PUSH
2646: LD_INT 1
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: PUSH
2653: EMPTY
2654: LIST
2655: LIST
2656: LIST
2657: PUSH
2658: EMPTY
2659: LIST
2660: PPUSH
2661: CALL_OW 69
2665: PUSH
2666: LD_INT 0
2668: GREATER
2669: IFFALSE 2725
// Say ( FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) [ 1 ] , Dsci2 ) ;
2671: LD_INT 22
2673: PUSH
2674: LD_INT 3
2676: PUSH
2677: EMPTY
2678: LIST
2679: LIST
2680: PUSH
2681: LD_INT 25
2683: PUSH
2684: LD_INT 4
2686: PUSH
2687: EMPTY
2688: LIST
2689: LIST
2690: PUSH
2691: LD_INT 26
2693: PUSH
2694: LD_INT 1
2696: PUSH
2697: EMPTY
2698: LIST
2699: LIST
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: LIST
2705: PUSH
2706: EMPTY
2707: LIST
2708: PPUSH
2709: CALL_OW 69
2713: PUSH
2714: LD_INT 1
2716: ARRAY
2717: PPUSH
2718: LD_STRING Dsci2
2720: PPUSH
2721: CALL_OW 88
// end ; end ;
2725: PPOPN 2
2727: END
// on VehicleConstructed ( un , fac ) do begin SOS_VehicleConstructed ( un , fac ) ;
2728: LD_VAR 0 1
2732: PPUSH
2733: LD_VAR 0 2
2737: PPUSH
2738: CALL 25663 0 2
// if GetSide ( un ) = 3 and GetControl ( un ) = control_computer then
2742: LD_VAR 0 1
2746: PPUSH
2747: CALL_OW 255
2751: PUSH
2752: LD_INT 3
2754: EQUAL
2755: IFFALSE 2772
2757: PUSH
2758: LD_VAR 0 1
2762: PPUSH
2763: CALL_OW 263
2767: PUSH
2768: LD_INT 3
2770: EQUAL
2771: AND
2772: IFFALSE 2782
// comp_tested := true ;
2774: LD_ADDR_EXP 22
2778: PUSH
2779: LD_INT 1
2781: ST_TO_ADDR
// end ;
2782: PPOPN 2
2784: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
2785: LD_VAR 0 1
2789: PUSH
2790: LD_INT 22
2792: PUSH
2793: LD_INT 1
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: PUSH
2800: LD_INT 21
2802: PUSH
2803: LD_INT 3
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: PUSH
2810: EMPTY
2811: LIST
2812: LIST
2813: PPUSH
2814: CALL_OW 69
2818: IN
2819: IFFALSE 2899
// if attacked = false and sikorski_ar = false then
2821: LD_EXP 15
2825: PUSH
2826: LD_INT 0
2828: EQUAL
2829: IFFALSE 2841
2831: PUSH
2832: LD_EXP 12
2836: PUSH
2837: LD_INT 0
2839: EQUAL
2840: AND
2841: IFFALSE 2899
// begin attacked := true ;
2843: LD_ADDR_EXP 15
2847: PUSH
2848: LD_INT 1
2850: ST_TO_ADDR
// if IsInUnit ( donald ) then
2851: LD_EXP 13
2855: PPUSH
2856: CALL_OW 310
2860: IFFALSE 2876
// SayRadio ( donald , DGammaF ) else
2862: LD_EXP 13
2866: PPUSH
2867: LD_STRING DGammaF
2869: PPUSH
2870: CALL_OW 94
2874: GO 2899
// if IsInUnit ( van ) then
2876: LD_EXP 14
2880: PPUSH
2881: CALL_OW 310
2885: IFFALSE 2899
// SayRadio ( van , DGammaM ) ;
2887: LD_EXP 14
2891: PPUSH
2892: LD_STRING DGammaM
2894: PPUSH
2895: CALL_OW 94
// end ; if un in FilterAllUnits ( [ f_control , control_remote ] ) then
2899: LD_VAR 0 1
2903: PUSH
2904: LD_INT 33
2906: PUSH
2907: LD_INT 2
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: PPUSH
2914: CALL_OW 69
2918: IN
2919: IFFALSE 2930
// ComUnlink ( un ) ;
2921: LD_VAR 0 1
2925: PPUSH
2926: CALL_OW 136
// end ;
2930: PPOPN 1
2932: END
// on ApemanTamed ( ape , sci ) do begin if GetSex ( sci ) = sex_male then
2933: LD_VAR 0 2
2937: PPUSH
2938: CALL_OW 258
2942: PUSH
2943: LD_INT 1
2945: EQUAL
2946: IFFALSE 2960
// Say ( sci , Dsci3 ) ;
2948: LD_VAR 0 2
2952: PPUSH
2953: LD_STRING Dsci3
2955: PPUSH
2956: CALL_OW 88
// end ;
2960: PPOPN 2
2962: END
// on BuildingComplete ( b ) do var i ;
2963: LD_INT 0
2965: PPUSH
// begin if GetBType ( b ) = b_depot and GetSide ( b ) = 3 and depot_rdy = false then
2966: LD_VAR 0 1
2970: PPUSH
2971: CALL_OW 266
2975: PUSH
2976: LD_INT 0
2978: EQUAL
2979: IFFALSE 2996
2981: PUSH
2982: LD_VAR 0 1
2986: PPUSH
2987: CALL_OW 255
2991: PUSH
2992: LD_INT 3
2994: EQUAL
2995: AND
2996: IFFALSE 3008
2998: PUSH
2999: LD_EXP 6
3003: PUSH
3004: LD_INT 0
3006: EQUAL
3007: AND
3008: IFFALSE 3072
// begin SetBName ( b , kalinin ) ;
3010: LD_VAR 0 1
3014: PPUSH
3015: LD_STRING kalinin
3017: PPUSH
3018: CALL_OW 500
// dep_x := GetX ( b ) ;
3022: LD_ADDR_EXP 7
3026: PUSH
3027: LD_VAR 0 1
3031: PPUSH
3032: CALL_OW 250
3036: ST_TO_ADDR
// dep_y := GetY ( b ) ;
3037: LD_ADDR_EXP 8
3041: PUSH
3042: LD_VAR 0 1
3046: PPUSH
3047: CALL_OW 251
3051: ST_TO_ADDR
// depot_rdy := true ;
3052: LD_ADDR_EXP 6
3056: PUSH
3057: LD_INT 1
3059: ST_TO_ADDR
// SayRadio ( popov , Dpop3 ) ;
3060: LD_EXP 2
3064: PPUSH
3065: LD_STRING Dpop3
3067: PPUSH
3068: CALL_OW 94
// end ; if GetBType ( b ) = b_lab and GetSide ( b ) = 3 and event_comp = false then
3072: LD_VAR 0 1
3076: PPUSH
3077: CALL_OW 266
3081: PUSH
3082: LD_INT 6
3084: EQUAL
3085: IFFALSE 3102
3087: PUSH
3088: LD_VAR 0 1
3092: PPUSH
3093: CALL_OW 255
3097: PUSH
3098: LD_INT 3
3100: EQUAL
3101: AND
3102: IFFALSE 3114
3104: PUSH
3105: LD_EXP 21
3109: PUSH
3110: LD_INT 0
3112: EQUAL
3113: AND
3114: IFFALSE 3209
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) > 0 then
3116: LD_INT 22
3118: PUSH
3119: LD_INT 3
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: LD_INT 25
3128: PUSH
3129: LD_INT 4
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: PPUSH
3140: CALL_OW 69
3144: PUSH
3145: LD_INT 0
3147: GREATER
3148: IFFALSE 3209
// begin event_comp := true ;
3150: LD_ADDR_EXP 21
3154: PUSH
3155: LD_INT 1
3157: ST_TO_ADDR
// Say ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , Dsci1 ) ;
3158: LD_INT 22
3160: PUSH
3161: LD_INT 3
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: PUSH
3168: LD_INT 25
3170: PUSH
3171: LD_INT 4
3173: PUSH
3174: EMPTY
3175: LIST
3176: LIST
3177: PUSH
3178: LD_INT 26
3180: PUSH
3181: LD_INT 1
3183: PUSH
3184: EMPTY
3185: LIST
3186: LIST
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: LIST
3192: PPUSH
3193: CALL_OW 69
3197: PUSH
3198: LD_INT 1
3200: ARRAY
3201: PPUSH
3202: LD_STRING Dsci1
3204: PPUSH
3205: CALL_OW 88
// end ; if GetBType ( b ) = b_bunker and GetSide ( b ) = 1 then
3209: LD_VAR 0 1
3213: PPUSH
3214: CALL_OW 266
3218: PUSH
3219: LD_INT 32
3221: EQUAL
3222: IFFALSE 3239
3224: PUSH
3225: LD_VAR 0 1
3229: PPUSH
3230: CALL_OW 255
3234: PUSH
3235: LD_INT 1
3237: EQUAL
3238: AND
3239: IFFALSE 3304
// begin RaiseSailEvent ( 6 ) ;
3241: LD_INT 6
3243: PPUSH
3244: CALL_OW 427
// AddComPlaceWeapon ( b , gamma_towers [ 4 ] ) ;
3248: LD_VAR 0 1
3252: PPUSH
3253: LD_EXP 18
3257: PUSH
3258: LD_INT 4
3260: ARRAY
3261: PPUSH
3262: CALL_OW 208
// for i = 1 to 4 do
3266: LD_ADDR_VAR 0 2
3270: PUSH
3271: DOUBLE
3272: LD_INT 1
3274: DEC
3275: ST_TO_ADDR
3276: LD_INT 4
3278: PUSH
3279: FOR_TO
3280: IFFALSE 3302
// gamma_towers := Delete ( gamma_towers , 1 ) ;
3282: LD_ADDR_EXP 18
3286: PUSH
3287: LD_EXP 18
3291: PPUSH
3292: LD_INT 1
3294: PPUSH
3295: CALL_OW 3
3299: ST_TO_ADDR
3300: GO 3279
3302: POP
3303: POP
// end ; end ;
3304: PPOPN 2
3306: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3307: LD_VAR 0 1
3311: PPUSH
3312: CALL 25605 0 1
// if un in Patrol then
3316: LD_VAR 0 1
3320: PUSH
3321: LD_EXP 17
3325: IN
3326: IFFALSE 3344
// Patrol := Patrol diff un ;
3328: LD_ADDR_EXP 17
3332: PUSH
3333: LD_EXP 17
3337: PUSH
3338: LD_VAR 0 1
3342: DIFF
3343: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
3344: LD_VAR 0 1
3348: PUSH
3349: LD_INT 22
3351: PUSH
3352: LD_INT 1
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PUSH
3359: LD_INT 30
3361: PUSH
3362: LD_INT 32
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: PUSH
3369: EMPTY
3370: LIST
3371: LIST
3372: PPUSH
3373: CALL_OW 69
3377: IN
3378: IFFALSE 3464
// begin gamma_towers := gamma_towers ^ GetX ( un ) ;
3380: LD_ADDR_EXP 18
3384: PUSH
3385: LD_EXP 18
3389: PUSH
3390: LD_VAR 0 1
3394: PPUSH
3395: CALL_OW 250
3399: ADD
3400: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetY ( un ) ;
3401: LD_ADDR_EXP 18
3405: PUSH
3406: LD_EXP 18
3410: PUSH
3411: LD_VAR 0 1
3415: PPUSH
3416: CALL_OW 251
3420: ADD
3421: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetDir ( un ) ;
3422: LD_ADDR_EXP 18
3426: PUSH
3427: LD_EXP 18
3431: PUSH
3432: LD_VAR 0 1
3436: PPUSH
3437: CALL_OW 254
3441: ADD
3442: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetBWeapon ( un ) ;
3443: LD_ADDR_EXP 18
3447: PUSH
3448: LD_EXP 18
3452: PUSH
3453: LD_VAR 0 1
3457: PPUSH
3458: CALL_OW 269
3462: ADD
3463: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) then
3464: LD_VAR 0 1
3468: PUSH
3469: LD_INT 33
3471: PUSH
3472: LD_INT 2
3474: PUSH
3475: EMPTY
3476: LIST
3477: LIST
3478: PUSH
3479: LD_INT 3
3481: PUSH
3482: LD_INT 34
3484: PUSH
3485: LD_INT 13
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PUSH
3492: EMPTY
3493: LIST
3494: LIST
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PPUSH
3500: CALL_OW 69
3504: IN
3505: IFFALSE 3521
// new_veh := new_veh + 1 ;
3507: LD_ADDR_EXP 19
3511: PUSH
3512: LD_EXP 19
3516: PUSH
3517: LD_INT 1
3519: PLUS
3520: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_weapon , us_crane ] ) then
3521: LD_VAR 0 1
3525: PUSH
3526: LD_INT 34
3528: PUSH
3529: LD_INT 13
3531: PUSH
3532: EMPTY
3533: LIST
3534: LIST
3535: PPUSH
3536: CALL_OW 69
3540: IN
3541: IFFALSE 3562
// AddComConstruct ( am_fac , us_medium_tracked , engine_solar , control_remote , us_crane ) ;
3543: LD_INT 26
3545: PPUSH
3546: LD_INT 3
3548: PPUSH
3549: LD_INT 2
3551: PPUSH
3552: LD_INT 2
3554: PPUSH
3555: LD_INT 13
3557: PPUSH
3558: CALL_OW 185
// if un = am_dep then
3562: LD_VAR 0 1
3566: PUSH
3567: LD_INT 25
3569: EQUAL
3570: IFFALSE 3740
// begin SayRadio ( Platonov , DPlat ) ;
3572: LD_EXP 4
3576: PPUSH
3577: LD_STRING DPlat
3579: PPUSH
3580: CALL_OW 94
// if timer <= 30 30$00 then
3584: LD_EXP 24
3588: PUSH
3589: LD_INT 63000
3591: LESSEQUAL
3592: IFFALSE 3606
// AddMedal ( gamma_med3 , 1 ) else
3594: LD_STRING gamma_med3
3596: PPUSH
3597: LD_INT 1
3599: PPUSH
3600: CALL_OW 101
3604: GO 3656
// if timer <= [ 50 50$00 , 42 42$00 , 35 35$00 ] [ dif ] then
3606: LD_EXP 24
3610: PUSH
3611: LD_INT 105000
3613: PUSH
3614: LD_INT 88200
3616: PUSH
3617: LD_INT 73500
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: LIST
3624: PUSH
3625: LD_EXP 1
3629: ARRAY
3630: LESSEQUAL
3631: IFFALSE 3645
// AddMedal ( gamma_med3 , 2 ) else
3633: LD_STRING gamma_med3
3635: PPUSH
3636: LD_INT 2
3638: PPUSH
3639: CALL_OW 101
3643: GO 3656
// AddMedal ( gamma_med3 , - 1 ) ;
3645: LD_STRING gamma_med3
3647: PPUSH
3648: LD_INT 1
3650: NEG
3651: PPUSH
3652: CALL_OW 101
// if not comp_tested then
3656: LD_EXP 22
3660: NOT
3661: IFFALSE 3676
// AddMedal ( gamma_med2 , - 1 ) else
3663: LD_STRING gamma_med2
3665: PPUSH
3666: LD_INT 1
3668: NEG
3669: PPUSH
3670: CALL_OW 101
3674: GO 3686
// AddMedal ( gamma_med2 , 1 ) ;
3676: LD_STRING gamma_med2
3678: PPUSH
3679: LD_INT 1
3681: PPUSH
3682: CALL_OW 101
// if IsDead ( sikorski ) and not sikorski_run then
3686: LD_EXP 9
3690: PPUSH
3691: CALL_OW 301
3695: IFFALSE 3704
3697: PUSH
3698: LD_EXP 23
3702: NOT
3703: AND
3704: IFFALSE 3718
// AddMedal ( gamma_med1 , 1 ) else
3706: LD_STRING gamma_med1
3708: PPUSH
3709: LD_INT 1
3711: PPUSH
3712: CALL_OW 101
3716: GO 3729
// AddMedal ( gamma_med1 , - 1 ) ;
3718: LD_STRING gamma_med1
3720: PPUSH
3721: LD_INT 1
3723: NEG
3724: PPUSH
3725: CALL_OW 101
// GiveMedals ( GAMMA_MEDALS ) ;
3729: LD_STRING GAMMA_MEDALS
3731: PPUSH
3732: CALL_OW 102
// YouWin ;
3736: CALL_OW 103
// end ; if un = commander then
3740: LD_VAR 0 1
3744: PUSH
3745: LD_EXP 3
3749: EQUAL
3750: IFFALSE 3759
// YouLost ( comml ) ;
3752: LD_STRING comml
3754: PPUSH
3755: CALL_OW 104
// if un = sikorski then
3759: LD_VAR 0 1
3763: PUSH
3764: LD_EXP 9
3768: EQUAL
3769: IFFALSE 3781
// AddMedal ( gamma_med1 , 1 ) ;
3771: LD_STRING gamma_med1
3773: PPUSH
3774: LD_INT 1
3776: PPUSH
3777: CALL_OW 101
// end ;
3781: PPOPN 1
3783: END
// on SailEvent ( event ) do var i , un , filter , doc , bac , place , engs , crane , b ;
3784: LD_INT 0
3786: PPUSH
3787: PPUSH
3788: PPUSH
3789: PPUSH
3790: PPUSH
3791: PPUSH
3792: PPUSH
3793: PPUSH
3794: PPUSH
// begin if event = 1 then
3795: LD_VAR 0 1
3799: PUSH
3800: LD_INT 1
3802: EQUAL
3803: IFFALSE 4100
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3805: LD_ADDR_VAR 0 4
3809: PUSH
3810: LD_INT 22
3812: PUSH
3813: LD_INT 1
3815: PUSH
3816: EMPTY
3817: LIST
3818: LIST
3819: PUSH
3820: LD_INT 21
3822: PUSH
3823: LD_INT 3
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: PUSH
3830: LD_INT 3
3832: PUSH
3833: LD_INT 24
3835: PUSH
3836: LD_INT 1000
3838: PUSH
3839: EMPTY
3840: LIST
3841: LIST
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: PUSH
3847: EMPTY
3848: LIST
3849: LIST
3850: LIST
3851: PPUSH
3852: CALL_OW 69
3856: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ] ) ;
3857: LD_ADDR_VAR 0 8
3861: PUSH
3862: LD_INT 22
3864: PUSH
3865: LD_INT 1
3867: PUSH
3868: EMPTY
3869: LIST
3870: LIST
3871: PUSH
3872: LD_INT 25
3874: PUSH
3875: LD_INT 2
3877: PUSH
3878: EMPTY
3879: LIST
3880: LIST
3881: PUSH
3882: LD_INT 24
3884: PUSH
3885: LD_INT 1000
3887: PUSH
3888: EMPTY
3889: LIST
3890: LIST
3891: PUSH
3892: EMPTY
3893: LIST
3894: LIST
3895: LIST
3896: PUSH
3897: EMPTY
3898: LIST
3899: PPUSH
3900: CALL_OW 69
3904: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) ;
3905: LD_ADDR_VAR 0 9
3909: PUSH
3910: LD_INT 22
3912: PUSH
3913: LD_INT 1
3915: PUSH
3916: EMPTY
3917: LIST
3918: LIST
3919: PUSH
3920: LD_INT 34
3922: PUSH
3923: LD_INT 13
3925: PUSH
3926: EMPTY
3927: LIST
3928: LIST
3929: PUSH
3930: EMPTY
3931: LIST
3932: LIST
3933: PPUSH
3934: CALL_OW 69
3938: ST_TO_ADDR
// if engs > 0 then
3939: LD_VAR 0 8
3943: PUSH
3944: LD_INT 0
3946: GREATER
3947: IFFALSE 4052
// for i = 1 to engs do
3949: LD_ADDR_VAR 0 2
3953: PUSH
3954: DOUBLE
3955: LD_INT 1
3957: DEC
3958: ST_TO_ADDR
3959: LD_VAR 0 8
3963: PUSH
3964: FOR_TO
3965: IFFALSE 4050
// begin if IsInUnit ( engs [ i ] ) then
3967: LD_VAR 0 8
3971: PUSH
3972: LD_VAR 0 2
3976: ARRAY
3977: PPUSH
3978: CALL_OW 310
3982: IFFALSE 3999
// ComExitBuilding ( engs [ i ] ) ;
3984: LD_VAR 0 8
3988: PUSH
3989: LD_VAR 0 2
3993: ARRAY
3994: PPUSH
3995: CALL_OW 122
// Wait ( 0 0$0.2 ) ;
3999: LD_INT 7
4001: PPUSH
4002: CALL_OW 67
// if not HasTask ( engs [ i ] ) then
4006: LD_VAR 0 8
4010: PUSH
4011: LD_VAR 0 2
4015: ARRAY
4016: PPUSH
4017: CALL_OW 314
4021: NOT
4022: IFFALSE 4048
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
4024: LD_VAR 0 8
4028: PUSH
4029: LD_VAR 0 2
4033: ARRAY
4034: PPUSH
4035: LD_VAR 0 4
4039: PUSH
4040: LD_INT 1
4042: ARRAY
4043: PPUSH
4044: CALL_OW 130
// end ;
4048: GO 3964
4050: POP
4051: POP
// if crane > 0 then
4052: LD_VAR 0 9
4056: PUSH
4057: LD_INT 0
4059: GREATER
4060: IFFALSE 4100
// if not HasTask ( crane [ 1 ] ) then
4062: LD_VAR 0 9
4066: PUSH
4067: LD_INT 1
4069: ARRAY
4070: PPUSH
4071: CALL_OW 314
4075: NOT
4076: IFFALSE 4100
// ComRepairBuilding ( crane [ 1 ] , filter [ 1 ] ) ;
4078: LD_VAR 0 9
4082: PUSH
4083: LD_INT 1
4085: ARRAY
4086: PPUSH
4087: LD_VAR 0 4
4091: PUSH
4092: LD_INT 1
4094: ARRAY
4095: PPUSH
4096: CALL_OW 130
// end ; if event = 2 then
4100: LD_VAR 0 1
4104: PUSH
4105: LD_INT 2
4107: EQUAL
4108: IFFALSE 4232
// begin engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
4110: LD_ADDR_VAR 0 8
4114: PUSH
4115: LD_INT 22
4117: PUSH
4118: LD_INT 1
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: PUSH
4125: LD_INT 25
4127: PUSH
4128: LD_INT 2
4130: PUSH
4131: EMPTY
4132: LIST
4133: LIST
4134: PUSH
4135: EMPTY
4136: LIST
4137: LIST
4138: PPUSH
4139: CALL_OW 69
4143: ST_TO_ADDR
// if engs > 0 then
4144: LD_VAR 0 8
4148: PUSH
4149: LD_INT 0
4151: GREATER
4152: IFFALSE 4232
// for i = 1 to engs do
4154: LD_ADDR_VAR 0 2
4158: PUSH
4159: DOUBLE
4160: LD_INT 1
4162: DEC
4163: ST_TO_ADDR
4164: LD_VAR 0 8
4168: PUSH
4169: FOR_TO
4170: IFFALSE 4230
// if not HasTask ( engs [ i ] ) and not IsInUnit ( engs [ i ] ) then
4172: LD_VAR 0 8
4176: PUSH
4177: LD_VAR 0 2
4181: ARRAY
4182: PPUSH
4183: CALL_OW 314
4187: NOT
4188: IFFALSE 4208
4190: PUSH
4191: LD_VAR 0 8
4195: PUSH
4196: LD_VAR 0 2
4200: ARRAY
4201: PPUSH
4202: CALL_OW 310
4206: NOT
4207: AND
4208: IFFALSE 4228
// ComEnterUnit ( engs [ i ] , am_dep ) ;
4210: LD_VAR 0 8
4214: PUSH
4215: LD_VAR 0 2
4219: ARRAY
4220: PPUSH
4221: LD_INT 25
4223: PPUSH
4224: CALL_OW 120
4228: GO 4169
4230: POP
4231: POP
// end ; if event = 3 then
4232: LD_VAR 0 1
4236: PUSH
4237: LD_INT 3
4239: EQUAL
4240: IFFALSE 4606
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_class , 4 ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
4242: LD_ADDR_VAR 0 4
4246: PUSH
4247: LD_INT 22
4249: PUSH
4250: LD_INT 1
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: PUSH
4257: LD_INT 21
4259: PUSH
4260: LD_INT 1
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PUSH
4267: LD_INT 3
4269: PUSH
4270: LD_INT 25
4272: PUSH
4273: LD_INT 4
4275: PUSH
4276: EMPTY
4277: LIST
4278: LIST
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: PUSH
4284: LD_INT 3
4286: PUSH
4287: LD_INT 24
4289: PUSH
4290: LD_INT 800
4292: PUSH
4293: EMPTY
4294: LIST
4295: LIST
4296: PUSH
4297: EMPTY
4298: LIST
4299: LIST
4300: PUSH
4301: EMPTY
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: PUSH
4307: EMPTY
4308: LIST
4309: PPUSH
4310: CALL_OW 69
4314: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
4315: LD_ADDR_VAR 0 5
4319: PUSH
4320: LD_INT 22
4322: PUSH
4323: LD_INT 1
4325: PUSH
4326: EMPTY
4327: LIST
4328: LIST
4329: PUSH
4330: LD_INT 25
4332: PUSH
4333: LD_INT 4
4335: PUSH
4336: EMPTY
4337: LIST
4338: LIST
4339: PUSH
4340: EMPTY
4341: LIST
4342: LIST
4343: PPUSH
4344: CALL_OW 69
4348: ST_TO_ADDR
// if filter > 0 then
4349: LD_VAR 0 4
4353: PUSH
4354: LD_INT 0
4356: GREATER
4357: IFFALSE 4548
// begin for i = 1 to doc do
4359: LD_ADDR_VAR 0 2
4363: PUSH
4364: DOUBLE
4365: LD_INT 1
4367: DEC
4368: ST_TO_ADDR
4369: LD_VAR 0 5
4373: PUSH
4374: FOR_TO
4375: IFFALSE 4477
// begin if IsInUnit ( doc [ i ] ) then
4377: LD_VAR 0 5
4381: PUSH
4382: LD_VAR 0 2
4386: ARRAY
4387: PPUSH
4388: CALL_OW 310
4392: IFFALSE 4409
// ComExitBuilding ( doc [ i ] ) ;
4394: LD_VAR 0 5
4398: PUSH
4399: LD_VAR 0 2
4403: ARRAY
4404: PPUSH
4405: CALL_OW 122
// if GetDistUnits ( filter [ 1 ] , am_lab ) < 10 and not HasTask ( doc [ i ] ) then
4409: LD_VAR 0 4
4413: PUSH
4414: LD_INT 1
4416: ARRAY
4417: PPUSH
4418: LD_INT 46
4420: PPUSH
4421: CALL_OW 296
4425: PUSH
4426: LD_INT 10
4428: LESS
4429: IFFALSE 4449
4431: PUSH
4432: LD_VAR 0 5
4436: PUSH
4437: LD_VAR 0 2
4441: ARRAY
4442: PPUSH
4443: CALL_OW 314
4447: NOT
4448: AND
4449: IFFALSE 4475
// ComHeal ( doc [ i ] , filter [ 1 ] ) ;
4451: LD_VAR 0 5
4455: PUSH
4456: LD_VAR 0 2
4460: ARRAY
4461: PPUSH
4462: LD_VAR 0 4
4466: PUSH
4467: LD_INT 1
4469: ARRAY
4470: PPUSH
4471: CALL_OW 128
// end ;
4475: GO 4374
4477: POP
4478: POP
// for i = 1 to filter do
4479: LD_ADDR_VAR 0 2
4483: PUSH
4484: DOUBLE
4485: LD_INT 1
4487: DEC
4488: ST_TO_ADDR
4489: LD_VAR 0 4
4493: PUSH
4494: FOR_TO
4495: IFFALSE 4544
// if GetDistUnits ( filter [ i ] , am_lab ) > 10 then
4497: LD_VAR 0 4
4501: PUSH
4502: LD_VAR 0 2
4506: ARRAY
4507: PPUSH
4508: LD_INT 46
4510: PPUSH
4511: CALL_OW 296
4515: PUSH
4516: LD_INT 10
4518: GREATER
4519: IFFALSE 4542
// ComMoveXY ( filter [ i ] , 47 , 12 ) ;
4521: LD_VAR 0 4
4525: PUSH
4526: LD_VAR 0 2
4530: ARRAY
4531: PPUSH
4532: LD_INT 47
4534: PPUSH
4535: LD_INT 12
4537: PPUSH
4538: CALL_OW 111
4542: GO 4494
4544: POP
4545: POP
// end else
4546: GO 4606
// for i = 1 to doc do
4548: LD_ADDR_VAR 0 2
4552: PUSH
4553: DOUBLE
4554: LD_INT 1
4556: DEC
4557: ST_TO_ADDR
4558: LD_VAR 0 5
4562: PUSH
4563: FOR_TO
4564: IFFALSE 4604
// if not IsInUnit ( doc [ i ] ) then
4566: LD_VAR 0 5
4570: PUSH
4571: LD_VAR 0 2
4575: ARRAY
4576: PPUSH
4577: CALL_OW 310
4581: NOT
4582: IFFALSE 4602
// ComEnterUnit ( doc [ i ] , am_lab ) ;
4584: LD_VAR 0 5
4588: PUSH
4589: LD_VAR 0 2
4593: ARRAY
4594: PPUSH
4595: LD_INT 46
4597: PPUSH
4598: CALL_OW 120
4602: GO 4563
4604: POP
4605: POP
// end ; if event = 4 then
4606: LD_VAR 0 1
4610: PUSH
4611: LD_INT 4
4613: EQUAL
4614: IFFALSE 4867
// begin bac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
4616: LD_ADDR_VAR 0 6
4620: PUSH
4621: LD_INT 22
4623: PUSH
4624: LD_INT 1
4626: PUSH
4627: EMPTY
4628: LIST
4629: LIST
4630: PUSH
4631: LD_INT 30
4633: PUSH
4634: LD_INT 5
4636: PUSH
4637: EMPTY
4638: LIST
4639: LIST
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: PPUSH
4645: CALL_OW 69
4649: ST_TO_ADDR
// for i = 1 to bac do
4650: LD_ADDR_VAR 0 2
4654: PUSH
4655: DOUBLE
4656: LD_INT 1
4658: DEC
4659: ST_TO_ADDR
4660: LD_VAR 0 6
4664: PUSH
4665: FOR_TO
4666: IFFALSE 4707
// if UnitsInside ( bac [ i ] ) < 6 then
4668: LD_VAR 0 6
4672: PUSH
4673: LD_VAR 0 2
4677: ARRAY
4678: PPUSH
4679: CALL_OW 313
4683: PUSH
4684: LD_INT 6
4686: LESS
4687: IFFALSE 4705
// place := bac [ i ] ;
4689: LD_ADDR_VAR 0 7
4693: PUSH
4694: LD_VAR 0 6
4698: PUSH
4699: LD_VAR 0 2
4703: ARRAY
4704: ST_TO_ADDR
4705: GO 4665
4707: POP
4708: POP
// if place then
4709: LD_VAR 0 7
4713: IFFALSE 4867
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] ] , [ f_lives , 1000 ] ] ] ) diff Patrol ;
4715: LD_ADDR_VAR 0 4
4719: PUSH
4720: LD_INT 22
4722: PUSH
4723: LD_INT 1
4725: PUSH
4726: EMPTY
4727: LIST
4728: LIST
4729: PUSH
4730: LD_INT 2
4732: PUSH
4733: LD_INT 25
4735: PUSH
4736: LD_INT 1
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: PUSH
4743: LD_INT 25
4745: PUSH
4746: LD_INT 5
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: LIST
4757: PUSH
4758: LD_INT 24
4760: PUSH
4761: LD_INT 1000
4763: PUSH
4764: EMPTY
4765: LIST
4766: LIST
4767: PUSH
4768: EMPTY
4769: LIST
4770: LIST
4771: LIST
4772: PUSH
4773: EMPTY
4774: LIST
4775: PPUSH
4776: CALL_OW 69
4780: PUSH
4781: LD_EXP 17
4785: DIFF
4786: ST_TO_ADDR
// for i = 1 to filter do
4787: LD_ADDR_VAR 0 2
4791: PUSH
4792: DOUBLE
4793: LD_INT 1
4795: DEC
4796: ST_TO_ADDR
4797: LD_VAR 0 4
4801: PUSH
4802: FOR_TO
4803: IFFALSE 4865
// if not IsInUnit ( filter [ i ] ) and not HasTask ( filter [ i ] ) then
4805: LD_VAR 0 4
4809: PUSH
4810: LD_VAR 0 2
4814: ARRAY
4815: PPUSH
4816: CALL_OW 310
4820: NOT
4821: IFFALSE 4841
4823: PUSH
4824: LD_VAR 0 4
4828: PUSH
4829: LD_VAR 0 2
4833: ARRAY
4834: PPUSH
4835: CALL_OW 314
4839: NOT
4840: AND
4841: IFFALSE 4863
// ComEnterUnit ( filter [ i ] , place ) ;
4843: LD_VAR 0 4
4847: PUSH
4848: LD_VAR 0 2
4852: ARRAY
4853: PPUSH
4854: LD_VAR 0 7
4858: PPUSH
4859: CALL_OW 120
4863: GO 4802
4865: POP
4866: POP
// end ; end ; if event = 5 then
4867: LD_VAR 0 1
4871: PUSH
4872: LD_INT 5
4874: EQUAL
4875: IFFALSE 5029
// begin if FilterUnitsInArea ( am_sec , [ f_enemy , 1 ] ) = 0 then
4877: LD_INT 12
4879: PPUSH
4880: LD_INT 81
4882: PUSH
4883: LD_INT 1
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: PPUSH
4890: CALL_OW 70
4894: PUSH
4895: LD_INT 0
4897: EQUAL
4898: IFFALSE 5029
// begin engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
4900: LD_ADDR_VAR 0 8
4904: PUSH
4905: LD_INT 22
4907: PUSH
4908: LD_INT 1
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: PUSH
4915: LD_INT 25
4917: PUSH
4918: LD_INT 2
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: PUSH
4925: EMPTY
4926: LIST
4927: LIST
4928: PPUSH
4929: CALL_OW 69
4933: ST_TO_ADDR
// if engs > 0 then
4934: LD_VAR 0 8
4938: PUSH
4939: LD_INT 0
4941: GREATER
4942: IFFALSE 5029
// for i = 1 to engs do
4944: LD_ADDR_VAR 0 2
4948: PUSH
4949: DOUBLE
4950: LD_INT 1
4952: DEC
4953: ST_TO_ADDR
4954: LD_VAR 0 8
4958: PUSH
4959: FOR_TO
4960: IFFALSE 5027
// if not HasTask ( engs [ i ] ) then
4962: LD_VAR 0 8
4966: PUSH
4967: LD_VAR 0 2
4971: ARRAY
4972: PPUSH
4973: CALL_OW 314
4977: NOT
4978: IFFALSE 5025
// ComBuild ( engs [ i ] , b_bunker , gamma_towers [ 1 ] , gamma_towers [ 2 ] , gamma_towers [ 3 ] ) ;
4980: LD_VAR 0 8
4984: PUSH
4985: LD_VAR 0 2
4989: ARRAY
4990: PPUSH
4991: LD_INT 32
4993: PPUSH
4994: LD_EXP 18
4998: PUSH
4999: LD_INT 1
5001: ARRAY
5002: PPUSH
5003: LD_EXP 18
5007: PUSH
5008: LD_INT 2
5010: ARRAY
5011: PPUSH
5012: LD_EXP 18
5016: PUSH
5017: LD_INT 3
5019: ARRAY
5020: PPUSH
5021: CALL_OW 145
5025: GO 4959
5027: POP
5028: POP
// end ; end ; if event = 6 then
5029: LD_VAR 0 1
5033: PUSH
5034: LD_INT 6
5036: EQUAL
5037: IFFALSE 5223
// begin bac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
5039: LD_ADDR_VAR 0 6
5043: PUSH
5044: LD_INT 22
5046: PUSH
5047: LD_INT 1
5049: PUSH
5050: EMPTY
5051: LIST
5052: LIST
5053: PUSH
5054: LD_INT 30
5056: PUSH
5057: LD_INT 5
5059: PUSH
5060: EMPTY
5061: LIST
5062: LIST
5063: PUSH
5064: EMPTY
5065: LIST
5066: LIST
5067: PPUSH
5068: CALL_OW 69
5072: ST_TO_ADDR
// if bac and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ] ) > 0 then
5073: LD_VAR 0 6
5077: IFFALSE 5123
5079: PUSH
5080: LD_INT 22
5082: PUSH
5083: LD_INT 1
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: PUSH
5090: LD_INT 30
5092: PUSH
5093: LD_INT 32
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: PUSH
5100: LD_INT 58
5102: PUSH
5103: EMPTY
5104: LIST
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: LIST
5110: PUSH
5111: EMPTY
5112: LIST
5113: PPUSH
5114: CALL_OW 69
5118: PUSH
5119: LD_INT 0
5121: GREATER
5122: AND
5123: IFFALSE 5223
// begin b := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ] ) [ 1 ] ;
5125: LD_ADDR_VAR 0 10
5129: PUSH
5130: LD_INT 22
5132: PUSH
5133: LD_INT 1
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: PUSH
5140: LD_INT 30
5142: PUSH
5143: LD_INT 32
5145: PUSH
5146: EMPTY
5147: LIST
5148: LIST
5149: PUSH
5150: LD_INT 58
5152: PUSH
5153: EMPTY
5154: LIST
5155: PUSH
5156: EMPTY
5157: LIST
5158: LIST
5159: LIST
5160: PUSH
5161: EMPTY
5162: LIST
5163: PPUSH
5164: CALL_OW 69
5168: PUSH
5169: LD_INT 1
5171: ARRAY
5172: ST_TO_ADDR
// un := UnitsInside ( bac [ 1 ] ) ;
5173: LD_ADDR_VAR 0 3
5177: PUSH
5178: LD_VAR 0 6
5182: PUSH
5183: LD_INT 1
5185: ARRAY
5186: PPUSH
5187: CALL_OW 313
5191: ST_TO_ADDR
// ComExitBuilding ( un [ 1 ] ) ;
5192: LD_VAR 0 3
5196: PUSH
5197: LD_INT 1
5199: ARRAY
5200: PPUSH
5201: CALL_OW 122
// AddComEnterUnit ( un [ 1 ] , b ) ;
5205: LD_VAR 0 3
5209: PUSH
5210: LD_INT 1
5212: ARRAY
5213: PPUSH
5214: LD_VAR 0 10
5218: PPUSH
5219: CALL_OW 180
// end ; end ; end ;
5223: PPOPN 10
5225: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 3 then
5226: LD_VAR 0 1
5230: PUSH
5231: LD_INT 1
5233: EQUAL
5234: IFFALSE 5246
5236: PUSH
5237: LD_VAR 0 2
5241: PUSH
5242: LD_INT 3
5244: EQUAL
5245: AND
5246: IFFALSE 5256
// contact_am := true ;
5248: LD_ADDR_EXP 16
5252: PUSH
5253: LD_INT 1
5255: ST_TO_ADDR
// end ;
5256: PPOPN 2
5258: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5259: LD_VAR 0 1
5263: PPUSH
5264: LD_VAR 0 2
5268: PPUSH
5269: LD_VAR 0 3
5273: PPUSH
5274: CALL 25639 0 3
// end ;
5278: PPOPN 3
5280: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5281: LD_VAR 0 1
5285: PPUSH
5286: CALL 25647 0 1
// end ; end_of_file
5290: PPOPN 1
5292: END
// export Sikorski , Game_Started , SForce , Sikorski_Ar , Donald , Van , attacked , contact_am ; export patrol ; export gamma_towers ; export function PrepareAmerican ; var i , un , b , skill , weapons , sol , lw ; begin
5293: LD_INT 0
5295: PPUSH
5296: PPUSH
5297: PPUSH
5298: PPUSH
5299: PPUSH
5300: PPUSH
5301: PPUSH
5302: PPUSH
// skill := [ 5 , 6 , 7 ] [ dif ] ;
5303: LD_ADDR_VAR 0 5
5307: PUSH
5308: LD_INT 5
5310: PUSH
5311: LD_INT 6
5313: PUSH
5314: LD_INT 7
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: LIST
5321: PUSH
5322: LD_EXP 1
5326: ARRAY
5327: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_gatling_gun , us_gatling_gun , us_double_gun , us_double_gun , us_double_gun , us_heavy_gun ] ;
5328: LD_ADDR_VAR 0 6
5332: PUSH
5333: LD_INT 4
5335: PUSH
5336: LD_INT 4
5338: PUSH
5339: LD_INT 4
5341: PUSH
5342: LD_INT 5
5344: PUSH
5345: LD_INT 5
5347: PUSH
5348: LD_INT 5
5350: PUSH
5351: LD_INT 6
5353: PUSH
5354: EMPTY
5355: LIST
5356: LIST
5357: LIST
5358: LIST
5359: LIST
5360: LIST
5361: LIST
5362: ST_TO_ADDR
// SForce := [ ] ;
5363: LD_ADDR_EXP 11
5367: PUSH
5368: EMPTY
5369: ST_TO_ADDR
// Sikorski_Ar := false ;
5370: LD_ADDR_EXP 12
5374: PUSH
5375: LD_INT 0
5377: ST_TO_ADDR
// attacked := false ;
5378: LD_ADDR_EXP 15
5382: PUSH
5383: LD_INT 0
5385: ST_TO_ADDR
// contact_am := false ;
5386: LD_ADDR_EXP 16
5390: PUSH
5391: LD_INT 0
5393: ST_TO_ADDR
// patrol := [ ] ;
5394: LD_ADDR_EXP 17
5398: PUSH
5399: EMPTY
5400: ST_TO_ADDR
// gamma_towers := [ ] ;
5401: LD_ADDR_EXP 18
5405: PUSH
5406: EMPTY
5407: ST_TO_ADDR
// SetBName ( am_dep , gamma ) ;
5408: LD_INT 25
5410: PPUSH
5411: LD_STRING gamma
5413: PPUSH
5414: CALL_OW 500
// uc_side := 1 ;
5418: LD_ADDR_OWVAR 20
5422: PUSH
5423: LD_INT 1
5425: ST_TO_ADDR
// uc_nation := 1 ;
5426: LD_ADDR_OWVAR 21
5430: PUSH
5431: LD_INT 1
5433: ST_TO_ADDR
// hc_importance := 0 ;
5434: LD_ADDR_OWVAR 32
5438: PUSH
5439: LD_INT 0
5441: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
5442: LD_ADDR_OWVAR 26
5446: PUSH
5447: LD_STRING Jeremy Sikorski
5449: ST_TO_ADDR
// hc_gallery := us ;
5450: LD_ADDR_OWVAR 33
5454: PUSH
5455: LD_STRING us
5457: ST_TO_ADDR
// hc_face_number := 19 ;
5458: LD_ADDR_OWVAR 34
5462: PUSH
5463: LD_INT 19
5465: ST_TO_ADDR
// hc_skills := [ Rand ( skill , skill + 2 ) , 4 , 6 , 3 ] ;
5466: LD_ADDR_OWVAR 31
5470: PUSH
5471: LD_VAR 0 5
5475: PPUSH
5476: LD_VAR 0 5
5480: PUSH
5481: LD_INT 2
5483: PLUS
5484: PPUSH
5485: CALL_OW 12
5489: PUSH
5490: LD_INT 4
5492: PUSH
5493: LD_INT 6
5495: PUSH
5496: LD_INT 3
5498: PUSH
5499: EMPTY
5500: LIST
5501: LIST
5502: LIST
5503: LIST
5504: ST_TO_ADDR
// hc_sex := sex_male ;
5505: LD_ADDR_OWVAR 27
5509: PUSH
5510: LD_INT 1
5512: ST_TO_ADDR
// hc_class := 1 ;
5513: LD_ADDR_OWVAR 28
5517: PUSH
5518: LD_INT 1
5520: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
5521: LD_ADDR_OWVAR 29
5525: PUSH
5526: LD_INT 10
5528: PUSH
5529: LD_INT 11
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: ST_TO_ADDR
// sikorski := CreateHuman ;
5536: LD_ADDR_EXP 9
5540: PUSH
5541: CALL_OW 44
5545: ST_TO_ADDR
// hc_name := Lucy Donaldson ;
5546: LD_ADDR_OWVAR 26
5550: PUSH
5551: LD_STRING Lucy Donaldson
5553: ST_TO_ADDR
// hc_gallery := us ;
5554: LD_ADDR_OWVAR 33
5558: PUSH
5559: LD_STRING us
5561: ST_TO_ADDR
// hc_face_number := 2 ;
5562: LD_ADDR_OWVAR 34
5566: PUSH
5567: LD_INT 2
5569: ST_TO_ADDR
// hc_skills := [ Rand ( skill , skill + 2 ) , 6 , 4 , 2 ] ;
5570: LD_ADDR_OWVAR 31
5574: PUSH
5575: LD_VAR 0 5
5579: PPUSH
5580: LD_VAR 0 5
5584: PUSH
5585: LD_INT 2
5587: PLUS
5588: PPUSH
5589: CALL_OW 12
5593: PUSH
5594: LD_INT 6
5596: PUSH
5597: LD_INT 4
5599: PUSH
5600: LD_INT 2
5602: PUSH
5603: EMPTY
5604: LIST
5605: LIST
5606: LIST
5607: LIST
5608: ST_TO_ADDR
// hc_sex := sex_female ;
5609: LD_ADDR_OWVAR 27
5613: PUSH
5614: LD_INT 2
5616: ST_TO_ADDR
// hc_class := 1 ;
5617: LD_ADDR_OWVAR 28
5621: PUSH
5622: LD_INT 1
5624: ST_TO_ADDR
// donald := CreateHuman ;
5625: LD_ADDR_EXP 13
5629: PUSH
5630: CALL_OW 44
5634: ST_TO_ADDR
// hc_name := Peter Van Houten ;
5635: LD_ADDR_OWVAR 26
5639: PUSH
5640: LD_STRING Peter Van Houten
5642: ST_TO_ADDR
// hc_gallery := us ;
5643: LD_ADDR_OWVAR 33
5647: PUSH
5648: LD_STRING us
5650: ST_TO_ADDR
// hc_face_number := 16 ;
5651: LD_ADDR_OWVAR 34
5655: PUSH
5656: LD_INT 16
5658: ST_TO_ADDR
// hc_sex := sex_male ;
5659: LD_ADDR_OWVAR 27
5663: PUSH
5664: LD_INT 1
5666: ST_TO_ADDR
// van := CreateHuman ;
5667: LD_ADDR_EXP 14
5671: PUSH
5672: CALL_OW 44
5676: ST_TO_ADDR
// hc_importance := 0 ;
5677: LD_ADDR_OWVAR 32
5681: PUSH
5682: LD_INT 0
5684: ST_TO_ADDR
// case dif of 1 :
5685: LD_EXP 1
5689: PUSH
5690: LD_INT 1
5692: DOUBLE
5693: EQUAL
5694: IFTRUE 5698
5696: GO 5709
5698: POP
// lw = 1 ; 2 :
5699: LD_ADDR_VAR 0 8
5703: PUSH
5704: LD_INT 1
5706: ST_TO_ADDR
5707: GO 5756
5709: LD_INT 2
5711: DOUBLE
5712: EQUAL
5713: IFTRUE 5717
5715: GO 5736
5717: POP
// lw = Rand ( 1 , 2 ) ; 3 :
5718: LD_ADDR_VAR 0 8
5722: PUSH
5723: LD_INT 1
5725: PPUSH
5726: LD_INT 2
5728: PPUSH
5729: CALL_OW 12
5733: ST_TO_ADDR
5734: GO 5756
5736: LD_INT 3
5738: DOUBLE
5739: EQUAL
5740: IFTRUE 5744
5742: GO 5755
5744: POP
// lw = 2 ; end ;
5745: LD_ADDR_VAR 0 8
5749: PUSH
5750: LD_INT 2
5752: ST_TO_ADDR
5753: GO 5756
5755: POP
// case lw of 1 :
5756: LD_VAR 0 8
5760: PUSH
5761: LD_INT 1
5763: DOUBLE
5764: EQUAL
5765: IFTRUE 5769
5767: GO 5784
5769: POP
// PlaceHumanInUnit ( donald , am_dep ) ; 2 :
5770: LD_EXP 13
5774: PPUSH
5775: LD_INT 25
5777: PPUSH
5778: CALL_OW 52
5782: GO 5808
5784: LD_INT 2
5786: DOUBLE
5787: EQUAL
5788: IFTRUE 5792
5790: GO 5807
5792: POP
// PlaceHumanInUnit ( van , am_dep ) ; end ;
5793: LD_EXP 14
5797: PPUSH
5798: LD_INT 25
5800: PPUSH
5801: CALL_OW 52
5805: GO 5808
5807: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
5808: LD_ADDR_VAR 0 2
5812: PUSH
5813: LD_INT 22
5815: PUSH
5816: LD_INT 1
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: PUSH
5823: LD_INT 30
5825: PUSH
5826: LD_INT 32
5828: PUSH
5829: EMPTY
5830: LIST
5831: LIST
5832: PUSH
5833: EMPTY
5834: LIST
5835: LIST
5836: PPUSH
5837: CALL_OW 69
5841: PUSH
5842: FOR_IN
5843: IFFALSE 5897
// begin PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
5845: LD_INT 1
5847: PPUSH
5848: LD_VAR 0 5
5852: PPUSH
5853: CALL 734 0 2
5857: PPUSH
5858: LD_VAR 0 2
5862: PPUSH
5863: CALL_OW 52
// PlaceWeaponTurret ( i , weapons [ Rand ( 1 , weapons ) ] ) ;
5867: LD_VAR 0 2
5871: PPUSH
5872: LD_VAR 0 6
5876: PUSH
5877: LD_INT 1
5879: PPUSH
5880: LD_VAR 0 6
5884: PPUSH
5885: CALL_OW 12
5889: ARRAY
5890: PPUSH
5891: CALL_OW 431
// end ;
5895: GO 5842
5897: POP
5898: POP
// sol := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , class_soldier ] , [ class_sniper ] ] ] ) ;
5899: LD_ADDR_VAR 0 7
5903: PUSH
5904: LD_INT 22
5906: PUSH
5907: LD_INT 1
5909: PUSH
5910: EMPTY
5911: LIST
5912: LIST
5913: PUSH
5914: LD_INT 2
5916: PUSH
5917: LD_INT 25
5919: PUSH
5920: LD_INT 1
5922: PUSH
5923: EMPTY
5924: LIST
5925: LIST
5926: PUSH
5927: LD_INT 5
5929: PUSH
5930: EMPTY
5931: LIST
5932: PUSH
5933: EMPTY
5934: LIST
5935: LIST
5936: LIST
5937: PUSH
5938: EMPTY
5939: LIST
5940: LIST
5941: PPUSH
5942: CALL_OW 69
5946: ST_TO_ADDR
// for i = 1 to sol do
5947: LD_ADDR_VAR 0 2
5951: PUSH
5952: DOUBLE
5953: LD_INT 1
5955: DEC
5956: ST_TO_ADDR
5957: LD_VAR 0 7
5961: PUSH
5962: FOR_TO
5963: IFFALSE 5985
// SetTag ( sol [ i ] , 1 ) ;
5965: LD_VAR 0 7
5969: PUSH
5970: LD_VAR 0 2
5974: ARRAY
5975: PPUSH
5976: LD_INT 1
5978: PPUSH
5979: CALL_OW 109
5983: GO 5962
5985: POP
5986: POP
// for i = 1 to 3 do
5987: LD_ADDR_VAR 0 2
5991: PUSH
5992: DOUBLE
5993: LD_INT 1
5995: DEC
5996: ST_TO_ADDR
5997: LD_INT 3
5999: PUSH
6000: FOR_TO
6001: IFFALSE 6025
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , am_ct ) ;
6003: LD_INT 3
6005: PPUSH
6006: LD_VAR 0 5
6010: PPUSH
6011: CALL 734 0 2
6015: PPUSH
6016: LD_INT 56
6018: PPUSH
6019: CALL_OW 52
6023: GO 6000
6025: POP
6026: POP
// for i = 1 to 6 do
6027: LD_ADDR_VAR 0 2
6031: PUSH
6032: DOUBLE
6033: LD_INT 1
6035: DEC
6036: ST_TO_ADDR
6037: LD_INT 6
6039: PUSH
6040: FOR_TO
6041: IFFALSE 6065
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , am_fac ) ;
6043: LD_INT 3
6045: PPUSH
6046: LD_VAR 0 5
6050: PPUSH
6051: CALL 734 0 2
6055: PPUSH
6056: LD_INT 26
6058: PPUSH
6059: CALL_OW 52
6063: GO 6040
6065: POP
6066: POP
// for i = 1 to 5 do
6067: LD_ADDR_VAR 0 2
6071: PUSH
6072: DOUBLE
6073: LD_INT 1
6075: DEC
6076: ST_TO_ADDR
6077: LD_INT 5
6079: PUSH
6080: FOR_TO
6081: IFFALSE 6108
// PlaceUnitArea ( CreateHumanWithClass ( 2 , skill ) , am_base , false ) ;
6083: LD_INT 2
6085: PPUSH
6086: LD_VAR 0 5
6090: PPUSH
6091: CALL 734 0 2
6095: PPUSH
6096: LD_INT 7
6098: PPUSH
6099: LD_INT 0
6101: PPUSH
6102: CALL_OW 49
6106: GO 6080
6108: POP
6109: POP
// for i = 1 to 3 do
6110: LD_ADDR_VAR 0 2
6114: PUSH
6115: DOUBLE
6116: LD_INT 1
6118: DEC
6119: ST_TO_ADDR
6120: LD_INT 3
6122: PUSH
6123: FOR_TO
6124: IFFALSE 6148
// PlaceHumanInUnit ( CreateHumanWithClass ( 4 , skill ) , am_lab ) ;
6126: LD_INT 4
6128: PPUSH
6129: LD_VAR 0 5
6133: PPUSH
6134: CALL 734 0 2
6138: PPUSH
6139: LD_INT 46
6141: PPUSH
6142: CALL_OW 52
6146: GO 6123
6148: POP
6149: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) do
6150: LD_ADDR_VAR 0 2
6154: PUSH
6155: LD_INT 22
6157: PUSH
6158: LD_INT 1
6160: PUSH
6161: EMPTY
6162: LIST
6163: LIST
6164: PUSH
6165: LD_INT 30
6167: PUSH
6168: LD_INT 5
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PPUSH
6179: CALL_OW 69
6183: PUSH
6184: FOR_IN
6185: IFFALSE 6299
// begin PlaceHumanInUnit ( CreateHumanWithClass ( class_sniper , skill ) , i ) ;
6187: LD_INT 5
6189: PPUSH
6190: LD_VAR 0 5
6194: PPUSH
6195: CALL 734 0 2
6199: PPUSH
6200: LD_VAR 0 2
6204: PPUSH
6205: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( class_sniper , skill ) , i ) ;
6209: LD_INT 5
6211: PPUSH
6212: LD_VAR 0 5
6216: PPUSH
6217: CALL 734 0 2
6221: PPUSH
6222: LD_VAR 0 2
6226: PPUSH
6227: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6231: LD_INT 1
6233: PPUSH
6234: LD_VAR 0 5
6238: PPUSH
6239: CALL 734 0 2
6243: PPUSH
6244: LD_VAR 0 2
6248: PPUSH
6249: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6253: LD_INT 1
6255: PPUSH
6256: LD_VAR 0 5
6260: PPUSH
6261: CALL 734 0 2
6265: PPUSH
6266: LD_VAR 0 2
6270: PPUSH
6271: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6275: LD_INT 1
6277: PPUSH
6278: LD_VAR 0 5
6282: PPUSH
6283: CALL 734 0 2
6287: PPUSH
6288: LD_VAR 0 2
6292: PPUSH
6293: CALL_OW 52
// end ;
6297: GO 6184
6299: POP
6300: POP
// if dif > 1 then
6301: LD_EXP 1
6305: PUSH
6306: LD_INT 1
6308: GREATER
6309: IFFALSE 6382
// for i = 1 to ( dif - 1 ) do
6311: LD_ADDR_VAR 0 2
6315: PUSH
6316: DOUBLE
6317: LD_INT 1
6319: DEC
6320: ST_TO_ADDR
6321: LD_EXP 1
6325: PUSH
6326: LD_INT 1
6328: MINUS
6329: PUSH
6330: FOR_TO
6331: IFFALSE 6380
// begin patrol := patrol ^ CreateHumanWithClass ( 1 , skill ) ;
6333: LD_ADDR_EXP 17
6337: PUSH
6338: LD_EXP 17
6342: PUSH
6343: LD_INT 1
6345: PPUSH
6346: LD_VAR 0 5
6350: PPUSH
6351: CALL 734 0 2
6355: ADD
6356: ST_TO_ADDR
// PlaceUnitArea ( patrol [ i ] , am_west_spawn , false ) ;
6357: LD_EXP 17
6361: PUSH
6362: LD_VAR 0 2
6366: ARRAY
6367: PPUSH
6368: LD_INT 3
6370: PPUSH
6371: LD_INT 0
6373: PPUSH
6374: CALL_OW 49
// end ;
6378: GO 6330
6380: POP
6381: POP
// game_started := true ;
6382: LD_ADDR_EXP 10
6386: PUSH
6387: LD_INT 1
6389: ST_TO_ADDR
// ComConstruct ( am_fac , us_medium_tracked , engine_solar , control_remote , us_crane ) ;
6390: LD_INT 26
6392: PPUSH
6393: LD_INT 3
6395: PPUSH
6396: LD_INT 2
6398: PPUSH
6399: LD_INT 2
6401: PPUSH
6402: LD_INT 13
6404: PPUSH
6405: CALL_OW 125
// while ( contact_am = false ) do
6409: LD_EXP 16
6413: PUSH
6414: LD_INT 0
6416: EQUAL
6417: IFFALSE 6428
// begin Wait ( 0 0$01 ) ;
6419: LD_INT 35
6421: PPUSH
6422: CALL_OW 67
// end ;
6426: GO 6409
// Wait ( [ 4 4$00 , 3 3$00 , 2 2$30 ] [ dif ] ) ;
6428: LD_INT 8400
6430: PUSH
6431: LD_INT 6300
6433: PUSH
6434: LD_INT 5250
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: LIST
6441: PUSH
6442: LD_EXP 1
6446: ARRAY
6447: PPUSH
6448: CALL_OW 67
// case dif of 1 :
6452: LD_EXP 1
6456: PUSH
6457: LD_INT 1
6459: DOUBLE
6460: EQUAL
6461: IFTRUE 6465
6463: GO 6640
6465: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_machine_gun , us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 4 ) ] ) ;
6466: LD_INT 26
6468: PPUSH
6469: LD_INT 3
6471: PPUSH
6472: LD_INT 1
6474: PPUSH
6475: LD_INT 2
6477: PPUSH
6478: LD_INT 2
6480: PUSH
6481: LD_INT 4
6483: PUSH
6484: LD_INT 5
6486: PUSH
6487: LD_INT 5
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: LIST
6494: LIST
6495: PUSH
6496: LD_INT 1
6498: PPUSH
6499: LD_INT 4
6501: PPUSH
6502: CALL_OW 12
6506: ARRAY
6507: PPUSH
6508: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6512: LD_INT 26
6514: PPUSH
6515: LD_INT 3
6517: PPUSH
6518: LD_INT 1
6520: PPUSH
6521: LD_INT 2
6523: PPUSH
6524: LD_INT 4
6526: PUSH
6527: LD_INT 5
6529: PUSH
6530: LD_INT 5
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: LIST
6537: PUSH
6538: LD_INT 1
6540: PPUSH
6541: LD_INT 3
6543: PPUSH
6544: CALL_OW 12
6548: ARRAY
6549: PPUSH
6550: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6554: LD_INT 26
6556: PPUSH
6557: LD_INT 3
6559: PPUSH
6560: LD_INT 1
6562: PPUSH
6563: LD_INT 2
6565: PPUSH
6566: LD_INT 4
6568: PUSH
6569: LD_INT 5
6571: PUSH
6572: LD_INT 5
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: LIST
6579: PUSH
6580: LD_INT 1
6582: PPUSH
6583: LD_INT 3
6585: PPUSH
6586: CALL_OW 12
6590: ARRAY
6591: PPUSH
6592: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6596: LD_INT 26
6598: PPUSH
6599: LD_INT 3
6601: PPUSH
6602: LD_INT 1
6604: PPUSH
6605: LD_INT 2
6607: PPUSH
6608: LD_INT 4
6610: PUSH
6611: LD_INT 3
6613: PUSH
6614: LD_INT 5
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: LIST
6621: PUSH
6622: LD_INT 1
6624: PPUSH
6625: LD_INT 3
6627: PPUSH
6628: CALL_OW 12
6632: ARRAY
6633: PPUSH
6634: CALL_OW 185
// end ; 2 :
6638: GO 7167
6640: LD_INT 2
6642: DOUBLE
6643: EQUAL
6644: IFTRUE 6648
6646: GO 6861
6648: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6649: LD_INT 26
6651: PPUSH
6652: LD_INT 3
6654: PPUSH
6655: LD_INT 1
6657: PPUSH
6658: LD_INT 2
6660: PPUSH
6661: LD_INT 4
6663: PUSH
6664: LD_INT 5
6666: PUSH
6667: LD_INT 5
6669: PUSH
6670: EMPTY
6671: LIST
6672: LIST
6673: LIST
6674: PUSH
6675: LD_INT 1
6677: PPUSH
6678: LD_INT 3
6680: PPUSH
6681: CALL_OW 12
6685: ARRAY
6686: PPUSH
6687: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6691: LD_INT 26
6693: PPUSH
6694: LD_INT 3
6696: PPUSH
6697: LD_INT 1
6699: PPUSH
6700: LD_INT 2
6702: PPUSH
6703: LD_INT 4
6705: PUSH
6706: LD_INT 5
6708: PUSH
6709: LD_INT 5
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: LIST
6716: PUSH
6717: LD_INT 1
6719: PPUSH
6720: LD_INT 3
6722: PPUSH
6723: CALL_OW 12
6727: ARRAY
6728: PPUSH
6729: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6733: LD_INT 26
6735: PPUSH
6736: LD_INT 3
6738: PPUSH
6739: LD_INT 1
6741: PPUSH
6742: LD_INT 2
6744: PPUSH
6745: LD_INT 4
6747: PUSH
6748: LD_INT 3
6750: PUSH
6751: LD_INT 5
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 1
6761: PPUSH
6762: LD_INT 3
6764: PPUSH
6765: CALL_OW 12
6769: ARRAY
6770: PPUSH
6771: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6775: LD_INT 26
6777: PPUSH
6778: LD_INT 4
6780: PPUSH
6781: LD_INT 1
6783: PPUSH
6784: LD_INT 2
6786: PPUSH
6787: LD_INT 4
6789: PUSH
6790: LD_INT 5
6792: PUSH
6793: LD_INT 6
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: LIST
6800: PUSH
6801: LD_INT 1
6803: PPUSH
6804: LD_INT 3
6806: PPUSH
6807: CALL_OW 12
6811: ARRAY
6812: PPUSH
6813: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_heavy_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6817: LD_INT 26
6819: PPUSH
6820: LD_INT 4
6822: PPUSH
6823: LD_INT 1
6825: PPUSH
6826: LD_INT 2
6828: PPUSH
6829: LD_INT 4
6831: PUSH
6832: LD_INT 6
6834: PUSH
6835: LD_INT 6
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: LIST
6842: PUSH
6843: LD_INT 1
6845: PPUSH
6846: LD_INT 3
6848: PPUSH
6849: CALL_OW 12
6853: ARRAY
6854: PPUSH
6855: CALL_OW 185
// end ; 3 :
6859: GO 7167
6861: LD_INT 3
6863: DOUBLE
6864: EQUAL
6865: IFTRUE 6869
6867: GO 7166
6869: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6870: LD_INT 26
6872: PPUSH
6873: LD_INT 3
6875: PPUSH
6876: LD_INT 1
6878: PPUSH
6879: LD_INT 2
6881: PPUSH
6882: LD_INT 4
6884: PUSH
6885: LD_INT 5
6887: PUSH
6888: LD_INT 5
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: LIST
6895: PUSH
6896: LD_INT 1
6898: PPUSH
6899: LD_INT 3
6901: PPUSH
6902: CALL_OW 12
6906: ARRAY
6907: PPUSH
6908: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6912: LD_INT 26
6914: PPUSH
6915: LD_INT 3
6917: PPUSH
6918: LD_INT 1
6920: PPUSH
6921: LD_INT 2
6923: PPUSH
6924: LD_INT 4
6926: PUSH
6927: LD_INT 5
6929: PUSH
6930: LD_INT 5
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: LIST
6937: PUSH
6938: LD_INT 1
6940: PPUSH
6941: LD_INT 3
6943: PPUSH
6944: CALL_OW 12
6948: ARRAY
6949: PPUSH
6950: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6954: LD_INT 26
6956: PPUSH
6957: LD_INT 3
6959: PPUSH
6960: LD_INT 1
6962: PPUSH
6963: LD_INT 2
6965: PPUSH
6966: LD_INT 4
6968: PUSH
6969: LD_INT 5
6971: PUSH
6972: LD_INT 5
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: LIST
6979: PUSH
6980: LD_INT 1
6982: PPUSH
6983: LD_INT 3
6985: PPUSH
6986: CALL_OW 12
6990: ARRAY
6991: PPUSH
6992: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6996: LD_INT 26
6998: PPUSH
6999: LD_INT 3
7001: PPUSH
7002: LD_INT 1
7004: PPUSH
7005: LD_INT 2
7007: PPUSH
7008: LD_INT 4
7010: PUSH
7011: LD_INT 5
7013: PUSH
7014: LD_INT 5
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: LIST
7021: PUSH
7022: LD_INT 1
7024: PPUSH
7025: LD_INT 3
7027: PPUSH
7028: CALL_OW 12
7032: ARRAY
7033: PPUSH
7034: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_heavy_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7038: LD_INT 26
7040: PPUSH
7041: LD_INT 4
7043: PPUSH
7044: LD_INT 1
7046: PPUSH
7047: LD_INT 2
7049: PPUSH
7050: LD_INT 4
7052: PUSH
7053: LD_INT 6
7055: PUSH
7056: LD_INT 6
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: LIST
7063: PUSH
7064: LD_INT 1
7066: PPUSH
7067: LD_INT 3
7069: PPUSH
7070: CALL_OW 12
7074: ARRAY
7075: PPUSH
7076: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_heavy_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7080: LD_INT 26
7082: PPUSH
7083: LD_INT 4
7085: PPUSH
7086: LD_INT 1
7088: PPUSH
7089: LD_INT 2
7091: PPUSH
7092: LD_INT 4
7094: PUSH
7095: LD_INT 6
7097: PUSH
7098: LD_INT 6
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: LIST
7105: PUSH
7106: LD_INT 1
7108: PPUSH
7109: LD_INT 3
7111: PPUSH
7112: CALL_OW 12
7116: ARRAY
7117: PPUSH
7118: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_heavy_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7122: LD_INT 26
7124: PPUSH
7125: LD_INT 4
7127: PPUSH
7128: LD_INT 1
7130: PPUSH
7131: LD_INT 2
7133: PPUSH
7134: LD_INT 4
7136: PUSH
7137: LD_INT 6
7139: PUSH
7140: LD_INT 6
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: LIST
7147: PUSH
7148: LD_INT 1
7150: PPUSH
7151: LD_INT 3
7153: PPUSH
7154: CALL_OW 12
7158: ARRAY
7159: PPUSH
7160: CALL_OW 185
// end ; end ;
7164: GO 7167
7166: POP
// end ;
7167: LD_VAR 0 1
7171: RET
// every 0 0$01 do var i , filter ;
7172: GO 7174
7174: DISABLE
7175: LD_INT 0
7177: PPUSH
7178: PPUSH
// begin enable ;
7179: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
7180: LD_INT 22
7182: PUSH
7183: LD_INT 1
7185: PUSH
7186: EMPTY
7187: LIST
7188: LIST
7189: PUSH
7190: LD_INT 25
7192: PUSH
7193: LD_INT 4
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: PPUSH
7204: CALL_OW 69
7208: PUSH
7209: LD_INT 0
7211: GREATER
7212: IFFALSE 7221
// RaiseSailEvent ( 3 ) ;
7214: LD_INT 3
7216: PPUSH
7217: CALL_OW 427
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 0 then
7221: LD_INT 22
7223: PUSH
7224: LD_INT 1
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: PUSH
7231: LD_INT 21
7233: PUSH
7234: LD_INT 3
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: PUSH
7241: LD_INT 3
7243: PUSH
7244: LD_INT 24
7246: PUSH
7247: LD_INT 1000
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: PUSH
7258: EMPTY
7259: LIST
7260: LIST
7261: LIST
7262: PPUSH
7263: CALL_OW 69
7267: PUSH
7268: LD_INT 0
7270: GREATER
7271: IFFALSE 7282
// RaiseSailEvent ( 1 ) else
7273: LD_INT 1
7275: PPUSH
7276: CALL_OW 427
7280: GO 7289
// RaiseSailEvent ( 2 ) ;
7282: LD_INT 2
7284: PPUSH
7285: CALL_OW 427
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) > 0 then
7289: LD_INT 22
7291: PUSH
7292: LD_INT 1
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: PUSH
7299: LD_INT 30
7301: PUSH
7302: LD_INT 5
7304: PUSH
7305: EMPTY
7306: LIST
7307: LIST
7308: PUSH
7309: EMPTY
7310: LIST
7311: LIST
7312: PPUSH
7313: CALL_OW 69
7317: PUSH
7318: LD_INT 0
7320: GREATER
7321: IFFALSE 7330
// RaiseSailEvent ( 4 ) ;
7323: LD_INT 4
7325: PPUSH
7326: CALL_OW 427
// if gamma_towers > 0 then
7330: LD_EXP 18
7334: PUSH
7335: LD_INT 0
7337: GREATER
7338: IFFALSE 7347
// RaiseSailEvent ( 5 ) ;
7340: LD_INT 5
7342: PPUSH
7343: CALL_OW 427
// end ;
7347: PPOPN 2
7349: END
// export new_veh ; every 9 9$00 do var chassis , weapon ;
7350: GO 7352
7352: DISABLE
7353: LD_INT 0
7355: PPUSH
7356: PPUSH
// begin enable ;
7357: ENABLE
// if new_veh > 0 then
7358: LD_EXP 19
7362: PUSH
7363: LD_INT 0
7365: GREATER
7366: IFFALSE 7553
// while ( new_veh > 0 ) do
7368: LD_EXP 19
7372: PUSH
7373: LD_INT 0
7375: GREATER
7376: IFFALSE 7553
// begin Wait ( 0 0$01 ) ;
7378: LD_INT 35
7380: PPUSH
7381: CALL_OW 67
// if BuildingStatus ( am_fac ) = bs_idle then
7385: LD_INT 26
7387: PPUSH
7388: CALL_OW 461
7392: PUSH
7393: LD_INT 2
7395: EQUAL
7396: IFFALSE 7551
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ Rand ( 1 , 4 ) ] ;
7398: LD_ADDR_VAR 0 1
7402: PUSH
7403: LD_INT 2
7405: PUSH
7406: LD_INT 3
7408: PUSH
7409: LD_INT 3
7411: PUSH
7412: LD_INT 4
7414: PUSH
7415: EMPTY
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: PUSH
7421: LD_INT 1
7423: PPUSH
7424: LD_INT 4
7426: PPUSH
7427: CALL_OW 12
7431: ARRAY
7432: ST_TO_ADDR
// if chassis in [ us_medium_wheeled , us_medium_tracked ] then
7433: LD_VAR 0 1
7437: PUSH
7438: LD_INT 2
7440: PUSH
7441: LD_INT 3
7443: PUSH
7444: EMPTY
7445: LIST
7446: LIST
7447: IN
7448: IFFALSE 7483
// weapon := [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ Rand ( 1 , 3 ) ] else
7450: LD_ADDR_VAR 0 2
7454: PUSH
7455: LD_INT 4
7457: PUSH
7458: LD_INT 5
7460: PUSH
7461: LD_INT 7
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: LIST
7468: PUSH
7469: LD_INT 1
7471: PPUSH
7472: LD_INT 3
7474: PPUSH
7475: CALL_OW 12
7479: ARRAY
7480: ST_TO_ADDR
7481: GO 7514
// weapon := [ us_double_gun , us_rocket_launcher , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ;
7483: LD_ADDR_VAR 0 2
7487: PUSH
7488: LD_INT 5
7490: PUSH
7491: LD_INT 7
7493: PUSH
7494: LD_INT 6
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: LIST
7501: PUSH
7502: LD_INT 1
7504: PPUSH
7505: LD_INT 3
7507: PPUSH
7508: CALL_OW 12
7512: ARRAY
7513: ST_TO_ADDR
// ComConstruct ( am_fac , chassis , engine_combustion , control_remote , weapon ) ;
7514: LD_INT 26
7516: PPUSH
7517: LD_VAR 0 1
7521: PPUSH
7522: LD_INT 1
7524: PPUSH
7525: LD_INT 2
7527: PPUSH
7528: LD_VAR 0 2
7532: PPUSH
7533: CALL_OW 125
// new_veh := new_veh - 1 ;
7537: LD_ADDR_EXP 19
7541: PUSH
7542: LD_EXP 19
7546: PUSH
7547: LD_INT 1
7549: MINUS
7550: ST_TO_ADDR
// end ; end ;
7551: GO 7368
// end ;
7553: PPOPN 2
7555: END
// every 0 0$01 do var v , filter , am_cmeh ;
7556: GO 7558
7558: DISABLE
7559: LD_INT 0
7561: PPUSH
7562: PPUSH
7563: PPUSH
// begin enable ;
7564: ENABLE
// am_cmeh := UnitsInside ( am_ct ) ;
7565: LD_ADDR_VAR 0 3
7569: PUSH
7570: LD_INT 56
7572: PPUSH
7573: CALL_OW 313
7577: ST_TO_ADDR
// filter = FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] ] ] ) ;
7578: LD_ADDR_VAR 0 2
7582: PUSH
7583: LD_INT 22
7585: PUSH
7586: LD_INT 1
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: PUSH
7593: LD_INT 33
7595: PUSH
7596: LD_INT 2
7598: PUSH
7599: EMPTY
7600: LIST
7601: LIST
7602: PUSH
7603: LD_INT 50
7605: PUSH
7606: EMPTY
7607: LIST
7608: PUSH
7609: EMPTY
7610: LIST
7611: LIST
7612: LIST
7613: PUSH
7614: EMPTY
7615: LIST
7616: PPUSH
7617: CALL_OW 69
7621: ST_TO_ADDR
// if filter > 0 then
7622: LD_VAR 0 2
7626: PUSH
7627: LD_INT 0
7629: GREATER
7630: IFFALSE 7700
// begin for v in filter do
7632: LD_ADDR_VAR 0 1
7636: PUSH
7637: LD_VAR 0 2
7641: PUSH
7642: FOR_IN
7643: IFFALSE 7698
// begin if not IsControledBy ( v ) and IsOk ( v ) then
7645: LD_VAR 0 1
7649: PPUSH
7650: CALL_OW 312
7654: NOT
7655: IFFALSE 7668
7657: PUSH
7658: LD_VAR 0 1
7662: PPUSH
7663: CALL_OW 302
7667: AND
7668: IFFALSE 7696
// ComLinkTo ( v , am_cmeh [ Rand ( 1 , 3 ) ] ) ;
7670: LD_VAR 0 1
7674: PPUSH
7675: LD_VAR 0 3
7679: PUSH
7680: LD_INT 1
7682: PPUSH
7683: LD_INT 3
7685: PPUSH
7686: CALL_OW 12
7690: ARRAY
7691: PPUSH
7692: CALL_OW 135
// end ;
7696: GO 7642
7698: POP
7699: POP
// end ; end ;
7700: PPOPN 3
7702: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) = [ 4 , 5 , 7 ] [ dif ] and BuildingStatus ( am_fac ) = bs_idle do var i , un , enemy ;
7703: LD_INT 33
7705: PUSH
7706: LD_INT 2
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: PUSH
7713: LD_INT 3
7715: PUSH
7716: LD_INT 34
7718: PUSH
7719: LD_INT 13
7721: PUSH
7722: EMPTY
7723: LIST
7724: LIST
7725: PUSH
7726: EMPTY
7727: LIST
7728: LIST
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: PPUSH
7734: CALL_OW 69
7738: PUSH
7739: LD_INT 4
7741: PUSH
7742: LD_INT 5
7744: PUSH
7745: LD_INT 7
7747: PUSH
7748: EMPTY
7749: LIST
7750: LIST
7751: LIST
7752: PUSH
7753: LD_EXP 1
7757: ARRAY
7758: EQUAL
7759: IFFALSE 7774
7761: PUSH
7762: LD_INT 26
7764: PPUSH
7765: CALL_OW 461
7769: PUSH
7770: LD_INT 2
7772: EQUAL
7773: AND
7774: IFFALSE 7985
7776: GO 7778
7778: DISABLE
7779: LD_INT 0
7781: PPUSH
7782: PPUSH
7783: PPUSH
// begin enable ;
7784: ENABLE
// if Sikorski_Ar then
7785: LD_EXP 12
7789: IFFALSE 7866
// SForce := FilterAllUnits ( [ [ f_or , [ f_side , 4 ] , [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ] ] ) else
7791: LD_ADDR_EXP 11
7795: PUSH
7796: LD_INT 2
7798: PUSH
7799: LD_INT 22
7801: PUSH
7802: LD_INT 4
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: PUSH
7809: LD_INT 22
7811: PUSH
7812: LD_INT 1
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: PUSH
7819: LD_INT 33
7821: PUSH
7822: LD_INT 2
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: PUSH
7829: LD_INT 3
7831: PUSH
7832: LD_INT 34
7834: PUSH
7835: LD_INT 13
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: PUSH
7846: EMPTY
7847: LIST
7848: LIST
7849: LIST
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: LIST
7855: PUSH
7856: EMPTY
7857: LIST
7858: PPUSH
7859: CALL_OW 69
7863: ST_TO_ADDR
7864: GO 7907
// SForce := FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) ;
7866: LD_ADDR_EXP 11
7870: PUSH
7871: LD_INT 33
7873: PUSH
7874: LD_INT 2
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: PUSH
7881: LD_INT 3
7883: PUSH
7884: LD_INT 34
7886: PUSH
7887: LD_INT 13
7889: PUSH
7890: EMPTY
7891: LIST
7892: LIST
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: PUSH
7898: EMPTY
7899: LIST
7900: LIST
7901: PPUSH
7902: CALL_OW 69
7906: ST_TO_ADDR
// repeat begin for un in SForce do
7907: LD_ADDR_VAR 0 2
7911: PUSH
7912: LD_EXP 11
7916: PUSH
7917: FOR_IN
7918: IFFALSE 7973
// begin enemy := FilterAllUnits ( [ f_side , 3 ] ) ;
7920: LD_ADDR_VAR 0 3
7924: PUSH
7925: LD_INT 22
7927: PUSH
7928: LD_INT 3
7930: PUSH
7931: EMPTY
7932: LIST
7933: LIST
7934: PPUSH
7935: CALL_OW 69
7939: ST_TO_ADDR
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
7940: LD_VAR 0 2
7944: PPUSH
7945: LD_VAR 0 3
7949: PPUSH
7950: LD_VAR 0 2
7954: PPUSH
7955: CALL_OW 74
7959: PPUSH
7960: CALL_OW 115
// Wait ( 0 0$01 ) ;
7964: LD_INT 35
7966: PPUSH
7967: CALL_OW 67
// end ;
7971: GO 7917
7973: POP
7974: POP
// end until SForce = 0 ;
7975: LD_EXP 11
7979: PUSH
7980: LD_INT 0
7982: EQUAL
7983: IFFALSE 7907
// end ;
7985: PPOPN 3
7987: END
// export function NewForce ( num ) ; var i , filter , veh , tmp ; begin
7988: LD_INT 0
7990: PPUSH
7991: PPUSH
7992: PPUSH
7993: PPUSH
7994: PPUSH
// tmp := FilterUnitsInArea ( spawnArea , [ ] ) ;
7995: LD_ADDR_VAR 0 6
7999: PUSH
8000: LD_INT 14
8002: PPUSH
8003: EMPTY
8004: PPUSH
8005: CALL_OW 70
8009: ST_TO_ADDR
// if tmp then
8010: LD_VAR 0 6
8014: IFFALSE 8048
// for i in tmp do
8016: LD_ADDR_VAR 0 3
8020: PUSH
8021: LD_VAR 0 6
8025: PUSH
8026: FOR_IN
8027: IFFALSE 8046
// ComMoveXY ( i , 42 , 23 ) ;
8029: LD_VAR 0 3
8033: PPUSH
8034: LD_INT 42
8036: PPUSH
8037: LD_INT 23
8039: PPUSH
8040: CALL_OW 111
8044: GO 8026
8046: POP
8047: POP
// EraseResourceArea ( spawnArea , mat_cans ) ;
8048: LD_INT 14
8050: PPUSH
8051: LD_INT 1
8053: PPUSH
8054: CALL_OW 286
// uc_side := 4 ;
8058: LD_ADDR_OWVAR 20
8062: PUSH
8063: LD_INT 4
8065: ST_TO_ADDR
// uc_nation := 1 ;
8066: LD_ADDR_OWVAR 21
8070: PUSH
8071: LD_INT 1
8073: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
8074: LD_ADDR_OWVAR 37
8078: PUSH
8079: LD_INT 4
8081: ST_TO_ADDR
// vc_control := control_manual ;
8082: LD_ADDR_OWVAR 38
8086: PUSH
8087: LD_INT 1
8089: ST_TO_ADDR
// vc_engine := engine_combustion ;
8090: LD_ADDR_OWVAR 39
8094: PUSH
8095: LD_INT 1
8097: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ dif ] ;
8098: LD_ADDR_OWVAR 40
8102: PUSH
8103: LD_INT 4
8105: PUSH
8106: LD_INT 5
8108: PUSH
8109: LD_INT 7
8111: PUSH
8112: EMPTY
8113: LIST
8114: LIST
8115: LIST
8116: PUSH
8117: LD_EXP 1
8121: ARRAY
8122: ST_TO_ADDR
// veh := CreateVehicle ;
8123: LD_ADDR_VAR 0 5
8127: PUSH
8128: CALL_OW 45
8132: ST_TO_ADDR
// PlaceUnitArea ( veh , am_main_spawn , false ) ;
8133: LD_VAR 0 5
8137: PPUSH
8138: LD_INT 2
8140: PPUSH
8141: LD_INT 0
8143: PPUSH
8144: CALL_OW 49
// PlaceHumanInUnit ( sikorski , veh ) ;
8148: LD_EXP 9
8152: PPUSH
8153: LD_VAR 0 5
8157: PPUSH
8158: CALL_OW 52
// SetMark ( veh , 1 ) ;
8162: LD_VAR 0 5
8166: PPUSH
8167: LD_INT 1
8169: PPUSH
8170: CALL_OW 242
// while ( num > 0 ) do
8174: LD_VAR 0 1
8178: PUSH
8179: LD_INT 0
8181: GREATER
8182: IFFALSE 8349
// begin CreateVehicleWithDriver ( [ us_medium_tracked , us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ Rand ( dif , 4 ) ] , engine_combustion , [ us_gatling_gun , us_double_gun , us_double_gun , us_rocket_launcher ] [ Rand ( 1 , dif + 1 ) ] , am_sik , 2 , [ 5 , 6 , 7 ] [ dif ] ) ;
8184: LD_INT 3
8186: PUSH
8187: LD_INT 3
8189: PUSH
8190: LD_INT 3
8192: PUSH
8193: LD_INT 4
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: LIST
8200: LIST
8201: PUSH
8202: LD_EXP 1
8206: PPUSH
8207: LD_INT 4
8209: PPUSH
8210: CALL_OW 12
8214: ARRAY
8215: PPUSH
8216: LD_INT 1
8218: PPUSH
8219: LD_INT 4
8221: PUSH
8222: LD_INT 5
8224: PUSH
8225: LD_INT 5
8227: PUSH
8228: LD_INT 7
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: PUSH
8237: LD_INT 1
8239: PPUSH
8240: LD_EXP 1
8244: PUSH
8245: LD_INT 1
8247: PLUS
8248: PPUSH
8249: CALL_OW 12
8253: ARRAY
8254: PPUSH
8255: LD_INT 11
8257: PPUSH
8258: LD_INT 2
8260: PPUSH
8261: LD_INT 5
8263: PUSH
8264: LD_INT 6
8266: PUSH
8267: LD_INT 7
8269: PUSH
8270: EMPTY
8271: LIST
8272: LIST
8273: LIST
8274: PUSH
8275: LD_EXP 1
8279: ARRAY
8280: PPUSH
8281: CALL 1309 0 6
// filter := FilterAllUnits ( [ f_side , 4 ] ) ;
8285: LD_ADDR_VAR 0 4
8289: PUSH
8290: LD_INT 22
8292: PUSH
8293: LD_INT 4
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: PPUSH
8300: CALL_OW 69
8304: ST_TO_ADDR
// ComMoveXY ( filter [ filter ] , 36 , 18 ) ;
8305: LD_VAR 0 4
8309: PUSH
8310: LD_VAR 0 4
8314: ARRAY
8315: PPUSH
8316: LD_INT 36
8318: PPUSH
8319: LD_INT 18
8321: PPUSH
8322: CALL_OW 111
// Wait ( 0 0$02 ) ;
8326: LD_INT 70
8328: PPUSH
8329: CALL_OW 67
// num := num - 1 ;
8333: LD_ADDR_VAR 0 1
8337: PUSH
8338: LD_VAR 0 1
8342: PUSH
8343: LD_INT 1
8345: MINUS
8346: ST_TO_ADDR
// end ;
8347: GO 8174
// end ;
8349: LD_VAR 0 2
8353: RET
// every 0 0$03 trigger patrol > 0 do var i ;
8354: LD_EXP 17
8358: PUSH
8359: LD_INT 0
8361: GREATER
8362: IFFALSE 8635
8364: GO 8366
8366: DISABLE
8367: LD_INT 0
8369: PPUSH
// begin enable ;
8370: ENABLE
// for i = 1 to patrol do
8371: LD_ADDR_VAR 0 1
8375: PUSH
8376: DOUBLE
8377: LD_INT 1
8379: DEC
8380: ST_TO_ADDR
8381: LD_EXP 17
8385: PUSH
8386: FOR_TO
8387: IFFALSE 8633
// begin if patrol [ i ] and IsLive ( patrol [ i ] ) and not HasTask ( patrol [ i ] ) then
8389: LD_EXP 17
8393: PUSH
8394: LD_VAR 0 1
8398: ARRAY
8399: IFFALSE 8418
8401: PUSH
8402: LD_EXP 17
8406: PUSH
8407: LD_VAR 0 1
8411: ARRAY
8412: PPUSH
8413: CALL_OW 300
8417: AND
8418: IFFALSE 8438
8420: PUSH
8421: LD_EXP 17
8425: PUSH
8426: LD_VAR 0 1
8430: ARRAY
8431: PPUSH
8432: CALL_OW 314
8436: NOT
8437: AND
8438: IFFALSE 8588
// case i of 1 :
8440: LD_VAR 0 1
8444: PUSH
8445: LD_INT 1
8447: DOUBLE
8448: EQUAL
8449: IFTRUE 8453
8451: GO 8516
8453: POP
// begin ComMoveXY ( patrol [ i ] , 53 , 91 ) ;
8454: LD_EXP 17
8458: PUSH
8459: LD_VAR 0 1
8463: ARRAY
8464: PPUSH
8465: LD_INT 53
8467: PPUSH
8468: LD_INT 91
8470: PPUSH
8471: CALL_OW 111
// AddComWait ( patrol [ i ] , 0 0$07 ) ;
8475: LD_EXP 17
8479: PUSH
8480: LD_VAR 0 1
8484: ARRAY
8485: PPUSH
8486: LD_INT 245
8488: PPUSH
8489: CALL_OW 202
// AddComMoveXY ( patrol [ i ] , 24 , 26 ) ;
8493: LD_EXP 17
8497: PUSH
8498: LD_VAR 0 1
8502: ARRAY
8503: PPUSH
8504: LD_INT 24
8506: PPUSH
8507: LD_INT 26
8509: PPUSH
8510: CALL_OW 171
// end ; 2 :
8514: GO 8588
8516: LD_INT 2
8518: DOUBLE
8519: EQUAL
8520: IFTRUE 8524
8522: GO 8587
8524: POP
// begin ComMoveXY ( patrol [ i ] , 83 , 57 ) ;
8525: LD_EXP 17
8529: PUSH
8530: LD_VAR 0 1
8534: ARRAY
8535: PPUSH
8536: LD_INT 83
8538: PPUSH
8539: LD_INT 57
8541: PPUSH
8542: CALL_OW 111
// AddComWait ( patrol [ i ] , 0 0$07 ) ;
8546: LD_EXP 17
8550: PUSH
8551: LD_VAR 0 1
8555: ARRAY
8556: PPUSH
8557: LD_INT 245
8559: PPUSH
8560: CALL_OW 202
// AddComMoveXY ( patrol [ i ] , 47 , 53 ) ;
8564: LD_EXP 17
8568: PUSH
8569: LD_VAR 0 1
8573: ARRAY
8574: PPUSH
8575: LD_INT 47
8577: PPUSH
8578: LD_INT 53
8580: PPUSH
8581: CALL_OW 171
// end ; end ;
8585: GO 8588
8587: POP
// if GetLives ( patrol [ i ] ) < 1000 then
8588: LD_EXP 17
8592: PUSH
8593: LD_VAR 0 1
8597: ARRAY
8598: PPUSH
8599: CALL_OW 256
8603: PUSH
8604: LD_INT 1000
8606: LESS
8607: IFFALSE 8631
// patrol := patrol diff patrol [ i ] ;
8609: LD_ADDR_EXP 17
8613: PUSH
8614: LD_EXP 17
8618: PUSH
8619: LD_EXP 17
8623: PUSH
8624: LD_VAR 0 1
8628: ARRAY
8629: DIFF
8630: ST_TO_ADDR
// end ;
8631: GO 8386
8633: POP
8634: POP
// end ;
8635: PPOPN 1
8637: END
// every 0 0$10 do
8638: GO 8640
8640: DISABLE
// begin Wait ( [ 20 20$00 , 18 18$00 , 16 16$00 ] [ dif ] ) ;
8641: LD_INT 42000
8643: PUSH
8644: LD_INT 37800
8646: PUSH
8647: LD_INT 33600
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: LIST
8654: PUSH
8655: LD_EXP 1
8659: ARRAY
8660: PPUSH
8661: CALL_OW 67
// if not contact_am then
8665: LD_EXP 16
8669: NOT
8670: IFFALSE 8680
// contact_am := true ;
8672: LD_ADDR_EXP 16
8676: PUSH
8677: LD_INT 1
8679: ST_TO_ADDR
// end ; end_of_file
8680: END
// export event_rocket , event_comp , comp_tested , sikorski_run ; export function Action ; begin
8681: LD_INT 0
8683: PPUSH
// comp_tested := false ;
8684: LD_ADDR_EXP 22
8688: PUSH
8689: LD_INT 0
8691: ST_TO_ADDR
// sikorski_run := false ;
8692: LD_ADDR_EXP 23
8696: PUSH
8697: LD_INT 0
8699: ST_TO_ADDR
// InGameOn ;
8700: CALL_OW 8
// CenterNowOnXY ( 5 , 4 ) ;
8704: LD_INT 5
8706: PPUSH
8707: LD_INT 4
8709: PPUSH
8710: CALL_OW 86
// wait ( 0 0$2 ) ;
8714: LD_INT 70
8716: PPUSH
8717: CALL_OW 67
// CenterOnUnits ( commander ) ;
8721: LD_EXP 3
8725: PPUSH
8726: CALL_OW 85
// wait ( 0 0$01 ) ;
8730: LD_INT 35
8732: PPUSH
8733: CALL_OW 67
// SayRadio ( popov , Dpop1 ) ;
8737: LD_EXP 2
8741: PPUSH
8742: LD_STRING Dpop1
8744: PPUSH
8745: CALL_OW 94
// Say ( commander , Dcomm1 ) ;
8749: LD_EXP 3
8753: PPUSH
8754: LD_STRING Dcomm1
8756: PPUSH
8757: CALL_OW 88
// SayRadio ( popov , Dpop2 ) ;
8761: LD_EXP 2
8765: PPUSH
8766: LD_STRING Dpop2
8768: PPUSH
8769: CALL_OW 94
// Say ( commander , Dcomm2 ) ;
8773: LD_EXP 3
8777: PPUSH
8778: LD_STRING Dcomm2
8780: PPUSH
8781: CALL_OW 88
// InGameOff ;
8785: CALL_OW 9
// ChangeMissionObjectives ( T1 ) ;
8789: LD_STRING T1
8791: PPUSH
8792: CALL_OW 337
// end ;
8796: LD_VAR 0 1
8800: RET
// every 0 0$01 trigger timer > 2 2$01 do
8801: LD_EXP 24
8805: PUSH
8806: LD_INT 4235
8808: GREATER
8809: IFFALSE 8826
8811: GO 8813
8813: DISABLE
// begin SayRadio ( kapral , DKap1 ) ;
8814: LD_EXP 5
8818: PPUSH
8819: LD_STRING DKap1
8821: PPUSH
8822: CALL_OW 94
// end ;
8826: END
// every 0 0$01 trigger timer > [ 22 22$00 , 25 25$00 , 30 30$00 ] [ dif ] do var i ;
8827: LD_EXP 24
8831: PUSH
8832: LD_INT 46200
8834: PUSH
8835: LD_INT 52500
8837: PUSH
8838: LD_INT 63000
8840: PUSH
8841: EMPTY
8842: LIST
8843: LIST
8844: LIST
8845: PUSH
8846: LD_EXP 1
8850: ARRAY
8851: GREATER
8852: IFFALSE 9219
8854: GO 8856
8856: DISABLE
8857: LD_INT 0
8859: PPUSH
// begin SayRadio ( kapral , DKap2 ) ;
8860: LD_EXP 5
8864: PPUSH
8865: LD_STRING DKap2
8867: PPUSH
8868: CALL_OW 94
// Wait ( 0 0$0.3 ) ;
8872: LD_INT 10
8874: PPUSH
8875: CALL_OW 67
// Say ( commander , Dcommk ) ;
8879: LD_EXP 3
8883: PPUSH
8884: LD_STRING Dcommk
8886: PPUSH
8887: CALL_OW 88
// Wait ( 0 0$44 ) ;
8891: LD_INT 1540
8893: PPUSH
8894: CALL_OW 67
// PlaceUnitArea ( kapral , am_west_spawn , false ) ;
8898: LD_EXP 5
8902: PPUSH
8903: LD_INT 3
8905: PPUSH
8906: LD_INT 0
8908: PPUSH
8909: CALL_OW 49
// CenterNowOnUnits ( kapral ) ;
8913: LD_EXP 5
8917: PPUSH
8918: CALL_OW 87
// Wait ( 0 0$10 ) ;
8922: LD_INT 350
8924: PPUSH
8925: CALL_OW 67
// NewForce ( [ 6 , 7 , 8 ] [ dif ] ) ;
8929: LD_INT 6
8931: PUSH
8932: LD_INT 7
8934: PUSH
8935: LD_INT 8
8937: PUSH
8938: EMPTY
8939: LIST
8940: LIST
8941: LIST
8942: PUSH
8943: LD_EXP 1
8947: ARRAY
8948: PPUSH
8949: CALL 7988 0 1
// Wait ( 2 2$00 ) ;
8953: LD_INT 4200
8955: PPUSH
8956: CALL_OW 67
// while ( FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) < 3 ) do
8960: LD_INT 33
8962: PUSH
8963: LD_INT 2
8965: PUSH
8966: EMPTY
8967: LIST
8968: LIST
8969: PUSH
8970: LD_INT 3
8972: PUSH
8973: LD_INT 34
8975: PUSH
8976: LD_INT 13
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: PUSH
8983: EMPTY
8984: LIST
8985: LIST
8986: PUSH
8987: EMPTY
8988: LIST
8989: LIST
8990: PPUSH
8991: CALL_OW 69
8995: PUSH
8996: LD_INT 3
8998: LESS
8999: IFFALSE 9010
// Wait ( 0 0$01 ) ;
9001: LD_INT 35
9003: PPUSH
9004: CALL_OW 67
9008: GO 8960
// uc_side := 4 ;
9010: LD_ADDR_OWVAR 20
9014: PUSH
9015: LD_INT 4
9017: ST_TO_ADDR
// uc_nation := 1 ;
9018: LD_ADDR_OWVAR 21
9022: PUSH
9023: LD_INT 1
9025: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ dif ] do
9026: LD_ADDR_VAR 0 1
9030: PUSH
9031: DOUBLE
9032: LD_INT 1
9034: DEC
9035: ST_TO_ADDR
9036: LD_INT 4
9038: PUSH
9039: LD_INT 5
9041: PUSH
9042: LD_INT 6
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: LIST
9049: PUSH
9050: LD_EXP 1
9054: ARRAY
9055: PUSH
9056: FOR_TO
9057: IFFALSE 9099
// PlaceUnitArea ( CreateHumanWithClass ( 1 , [ 5 , 6 , 7 ] [ dif ] ) , am_east_spawn , false ) ;
9059: LD_INT 1
9061: PPUSH
9062: LD_INT 5
9064: PUSH
9065: LD_INT 6
9067: PUSH
9068: LD_INT 7
9070: PUSH
9071: EMPTY
9072: LIST
9073: LIST
9074: LIST
9075: PUSH
9076: LD_EXP 1
9080: ARRAY
9081: PPUSH
9082: CALL 734 0 2
9086: PPUSH
9087: LD_INT 4
9089: PPUSH
9090: LD_INT 0
9092: PPUSH
9093: CALL_OW 49
9097: GO 9056
9099: POP
9100: POP
// sikorski_ar := true ;
9101: LD_ADDR_EXP 12
9105: PUSH
9106: LD_INT 1
9108: ST_TO_ADDR
// SayRadio ( sikorski , DSik1 ) ;
9109: LD_EXP 9
9113: PPUSH
9114: LD_STRING DSik1
9116: PPUSH
9117: CALL_OW 94
// Wait ( 0 0$30 ) ;
9121: LD_INT 1050
9123: PPUSH
9124: CALL_OW 67
// uc_side := 4 ;
9128: LD_ADDR_OWVAR 20
9132: PUSH
9133: LD_INT 4
9135: ST_TO_ADDR
// uc_nation := 1 ;
9136: LD_ADDR_OWVAR 21
9140: PUSH
9141: LD_INT 1
9143: ST_TO_ADDR
// for i = 1 to [ 3 , 4 , 4 ] [ dif ] do
9144: LD_ADDR_VAR 0 1
9148: PUSH
9149: DOUBLE
9150: LD_INT 1
9152: DEC
9153: ST_TO_ADDR
9154: LD_INT 3
9156: PUSH
9157: LD_INT 4
9159: PUSH
9160: LD_INT 4
9162: PUSH
9163: EMPTY
9164: LIST
9165: LIST
9166: LIST
9167: PUSH
9168: LD_EXP 1
9172: ARRAY
9173: PUSH
9174: FOR_TO
9175: IFFALSE 9217
// PlaceUnitArea ( CreateHumanWithClass ( 1 , [ 5 , 6 , 7 ] [ dif ] ) , am_south_spawn , false ) ;
9177: LD_INT 1
9179: PPUSH
9180: LD_INT 5
9182: PUSH
9183: LD_INT 6
9185: PUSH
9186: LD_INT 7
9188: PUSH
9189: EMPTY
9190: LIST
9191: LIST
9192: LIST
9193: PUSH
9194: LD_EXP 1
9198: ARRAY
9199: PPUSH
9200: CALL 734 0 2
9204: PPUSH
9205: LD_INT 13
9207: PPUSH
9208: LD_INT 0
9210: PPUSH
9211: CALL_OW 49
9215: GO 9174
9217: POP
9218: POP
// end ;
9219: PPOPN 1
9221: END
// every 0 0$0.1 trigger GetLives ( sikorski ) < 650 do
9222: LD_EXP 9
9226: PPUSH
9227: CALL_OW 256
9231: PUSH
9232: LD_INT 650
9234: LESS
9235: IFFALSE 9317
9237: GO 9239
9239: DISABLE
// begin Say ( sikorski , DSik2 ) ;
9240: LD_EXP 9
9244: PPUSH
9245: LD_STRING DSik2
9247: PPUSH
9248: CALL_OW 88
// while ( IsLive ( sikorski ) ) do
9252: LD_EXP 9
9256: PPUSH
9257: CALL_OW 300
9261: IFFALSE 9317
// begin ComMoveToArea ( sikorski , am_main_spawn ) ;
9263: LD_EXP 9
9267: PPUSH
9268: LD_INT 2
9270: PPUSH
9271: CALL_OW 113
// Wait ( 0 0$01 ) ;
9275: LD_INT 35
9277: PPUSH
9278: CALL_OW 67
// if IsInArea ( sikorski , am_main_spawn ) then
9282: LD_EXP 9
9286: PPUSH
9287: LD_INT 2
9289: PPUSH
9290: CALL_OW 308
9294: IFFALSE 9315
// begin RemoveUnit ( sikorski ) ;
9296: LD_EXP 9
9300: PPUSH
9301: CALL_OW 64
// break ;
9305: GO 9317
// sikorski_run := true ;
9307: LD_ADDR_EXP 23
9311: PUSH
9312: LD_INT 1
9314: ST_TO_ADDR
// end ; end ;
9315: GO 9252
// end ;
9317: END
// every 0 0$0.1 trigger GetLives ( sikorski ) < 1000 do
9318: LD_EXP 9
9322: PPUSH
9323: CALL_OW 256
9327: PUSH
9328: LD_INT 1000
9330: LESS
9331: IFFALSE 9348
9333: GO 9335
9335: DISABLE
// Say ( sikorski , DSkik3 ) ; end_of_file
9336: LD_EXP 9
9340: PPUSH
9341: LD_STRING DSkik3
9343: PPUSH
9344: CALL_OW 88
9348: END
// every 1 1$45 + 0 0$15 do
9349: GO 9351
9351: DISABLE
// begin enable ;
9352: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
9353: LD_INT 1
9355: PPUSH
9356: LD_INT 5
9358: PPUSH
9359: CALL_OW 12
9363: PPUSH
9364: LD_INT 8
9366: PPUSH
9367: LD_INT 1
9369: PPUSH
9370: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$37 ) ) ;
9374: LD_INT 350
9376: PPUSH
9377: LD_INT 1295
9379: PPUSH
9380: CALL_OW 12
9384: PPUSH
9385: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
9389: LD_INT 1
9391: PPUSH
9392: LD_INT 5
9394: PPUSH
9395: CALL_OW 12
9399: PPUSH
9400: LD_INT 1
9402: PPUSH
9403: CALL_OW 57
// Wait ( Rand ( 0 0$10 , 0 0$30 ) ) ;
9407: LD_INT 350
9409: PPUSH
9410: LD_INT 1050
9412: PPUSH
9413: CALL_OW 12
9417: PPUSH
9418: CALL_OW 67
// if timer <= [ 12 12$00 , 11 11$00 , 10 10$00 ] [ dif ] then
9422: LD_EXP 24
9426: PUSH
9427: LD_INT 25200
9429: PUSH
9430: LD_INT 23100
9432: PUSH
9433: LD_INT 21000
9435: PUSH
9436: EMPTY
9437: LIST
9438: LIST
9439: LIST
9440: PUSH
9441: LD_EXP 1
9445: ARRAY
9446: LESSEQUAL
9447: IFFALSE 9470
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
9449: LD_INT 1
9451: PPUSH
9452: LD_INT 5
9454: PPUSH
9455: CALL_OW 12
9459: PPUSH
9460: LD_INT 8
9462: PPUSH
9463: LD_INT 1
9465: PPUSH
9466: CALL_OW 55
// end ;
9470: END
// export timer ; every 1 do
9471: GO 9473
9473: DISABLE
// timer := 0 0$00 ;
9474: LD_ADDR_EXP 24
9478: PUSH
9479: LD_INT 0
9481: ST_TO_ADDR
9482: END
// every 0 0$01 do
9483: GO 9485
9485: DISABLE
// begin enable ;
9486: ENABLE
// Display_Strings := [ #tick , timer ] ;
9487: LD_ADDR_OWVAR 47
9491: PUSH
9492: LD_STRING #tick
9494: PUSH
9495: LD_EXP 24
9499: PUSH
9500: EMPTY
9501: LIST
9502: LIST
9503: ST_TO_ADDR
// timer := timer + 0 0$01 ;
9504: LD_ADDR_EXP 24
9508: PUSH
9509: LD_EXP 24
9513: PUSH
9514: LD_INT 35
9516: PLUS
9517: ST_TO_ADDR
// end ; end_of_file end_of_file
9518: END
// export globalGameSaveCounter ; every 0 0$1 do
9519: GO 9521
9521: DISABLE
// begin enable ;
9522: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
9523: LD_STRING updateTimer(
9525: PUSH
9526: LD_OWVAR 1
9530: STR
9531: PUSH
9532: LD_STRING );
9534: STR
9535: PPUSH
9536: CALL_OW 559
// end ;
9540: END
// every 0 0$1 do
9541: GO 9543
9543: DISABLE
// begin globalGameSaveCounter := 0 ;
9544: LD_ADDR_EXP 25
9548: PUSH
9549: LD_INT 0
9551: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
9552: LD_STRING setGameSaveCounter(0)
9554: PPUSH
9555: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
9559: LD_STRING initStreamRollete();
9561: PPUSH
9562: CALL_OW 559
// InitStreamMode ;
9566: CALL 10918 0 0
// DefineStreamItems ( false ) ;
9570: LD_INT 0
9572: PPUSH
9573: CALL 11382 0 1
// end ;
9577: END
// export function SOS_MapStart ( ) ; begin
9578: LD_INT 0
9580: PPUSH
// if streamModeActive then
9581: LD_EXP 26
9585: IFFALSE 9594
// DefineStreamItems ( true ) ;
9587: LD_INT 1
9589: PPUSH
9590: CALL 11382 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
9594: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
9596: PPUSH
9597: CALL_OW 559
// UpdateLuaVariables ( ) ;
9601: CALL 9618 0 0
// UpdateFactoryWaypoints ( ) ;
9605: CALL 24504 0 0
// UpdateWarehouseGatheringPoints ( ) ;
9609: CALL 24756 0 0
// end ;
9613: LD_VAR 0 1
9617: RET
// function UpdateLuaVariables ( ) ; begin
9618: LD_INT 0
9620: PPUSH
// if globalGameSaveCounter then
9621: LD_EXP 25
9625: IFFALSE 9659
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
9627: LD_ADDR_EXP 25
9631: PUSH
9632: LD_EXP 25
9636: PPUSH
9637: CALL 71652 0 1
9641: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
9642: LD_STRING setGameSaveCounter(
9644: PUSH
9645: LD_EXP 25
9649: STR
9650: PUSH
9651: LD_STRING )
9653: STR
9654: PPUSH
9655: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
9659: LD_STRING setGameDifficulty(
9661: PUSH
9662: LD_OWVAR 67
9666: STR
9667: PUSH
9668: LD_STRING )
9670: STR
9671: PPUSH
9672: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
9676: LD_STRING displayDifficulty(
9678: PUSH
9679: LD_OWVAR 67
9683: STR
9684: PUSH
9685: LD_STRING )
9687: STR
9688: PPUSH
9689: CALL_OW 559
// end ;
9693: LD_VAR 0 1
9697: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9698: LD_INT 0
9700: PPUSH
// if p2 = stream_mode then
9701: LD_VAR 0 2
9705: PUSH
9706: LD_INT 100
9708: EQUAL
9709: IFFALSE 10712
// begin if not StreamModeActive then
9711: LD_EXP 26
9715: NOT
9716: IFFALSE 9726
// StreamModeActive := true ;
9718: LD_ADDR_EXP 26
9722: PUSH
9723: LD_INT 1
9725: ST_TO_ADDR
// if p3 = 0 then
9726: LD_VAR 0 3
9730: PUSH
9731: LD_INT 0
9733: EQUAL
9734: IFFALSE 9740
// InitStreamMode ;
9736: CALL 10918 0 0
// if p3 = 1 then
9740: LD_VAR 0 3
9744: PUSH
9745: LD_INT 1
9747: EQUAL
9748: IFFALSE 9758
// sRocket := true ;
9750: LD_ADDR_EXP 31
9754: PUSH
9755: LD_INT 1
9757: ST_TO_ADDR
// if p3 = 2 then
9758: LD_VAR 0 3
9762: PUSH
9763: LD_INT 2
9765: EQUAL
9766: IFFALSE 9776
// sSpeed := true ;
9768: LD_ADDR_EXP 30
9772: PUSH
9773: LD_INT 1
9775: ST_TO_ADDR
// if p3 = 3 then
9776: LD_VAR 0 3
9780: PUSH
9781: LD_INT 3
9783: EQUAL
9784: IFFALSE 9794
// sEngine := true ;
9786: LD_ADDR_EXP 32
9790: PUSH
9791: LD_INT 1
9793: ST_TO_ADDR
// if p3 = 4 then
9794: LD_VAR 0 3
9798: PUSH
9799: LD_INT 4
9801: EQUAL
9802: IFFALSE 9812
// sSpec := true ;
9804: LD_ADDR_EXP 29
9808: PUSH
9809: LD_INT 1
9811: ST_TO_ADDR
// if p3 = 5 then
9812: LD_VAR 0 3
9816: PUSH
9817: LD_INT 5
9819: EQUAL
9820: IFFALSE 9830
// sLevel := true ;
9822: LD_ADDR_EXP 33
9826: PUSH
9827: LD_INT 1
9829: ST_TO_ADDR
// if p3 = 6 then
9830: LD_VAR 0 3
9834: PUSH
9835: LD_INT 6
9837: EQUAL
9838: IFFALSE 9848
// sArmoury := true ;
9840: LD_ADDR_EXP 34
9844: PUSH
9845: LD_INT 1
9847: ST_TO_ADDR
// if p3 = 7 then
9848: LD_VAR 0 3
9852: PUSH
9853: LD_INT 7
9855: EQUAL
9856: IFFALSE 9866
// sRadar := true ;
9858: LD_ADDR_EXP 35
9862: PUSH
9863: LD_INT 1
9865: ST_TO_ADDR
// if p3 = 8 then
9866: LD_VAR 0 3
9870: PUSH
9871: LD_INT 8
9873: EQUAL
9874: IFFALSE 9884
// sBunker := true ;
9876: LD_ADDR_EXP 36
9880: PUSH
9881: LD_INT 1
9883: ST_TO_ADDR
// if p3 = 9 then
9884: LD_VAR 0 3
9888: PUSH
9889: LD_INT 9
9891: EQUAL
9892: IFFALSE 9902
// sHack := true ;
9894: LD_ADDR_EXP 37
9898: PUSH
9899: LD_INT 1
9901: ST_TO_ADDR
// if p3 = 10 then
9902: LD_VAR 0 3
9906: PUSH
9907: LD_INT 10
9909: EQUAL
9910: IFFALSE 9920
// sFire := true ;
9912: LD_ADDR_EXP 38
9916: PUSH
9917: LD_INT 1
9919: ST_TO_ADDR
// if p3 = 11 then
9920: LD_VAR 0 3
9924: PUSH
9925: LD_INT 11
9927: EQUAL
9928: IFFALSE 9938
// sRefresh := true ;
9930: LD_ADDR_EXP 39
9934: PUSH
9935: LD_INT 1
9937: ST_TO_ADDR
// if p3 = 12 then
9938: LD_VAR 0 3
9942: PUSH
9943: LD_INT 12
9945: EQUAL
9946: IFFALSE 9956
// sExp := true ;
9948: LD_ADDR_EXP 40
9952: PUSH
9953: LD_INT 1
9955: ST_TO_ADDR
// if p3 = 13 then
9956: LD_VAR 0 3
9960: PUSH
9961: LD_INT 13
9963: EQUAL
9964: IFFALSE 9974
// sDepot := true ;
9966: LD_ADDR_EXP 41
9970: PUSH
9971: LD_INT 1
9973: ST_TO_ADDR
// if p3 = 14 then
9974: LD_VAR 0 3
9978: PUSH
9979: LD_INT 14
9981: EQUAL
9982: IFFALSE 9992
// sFlag := true ;
9984: LD_ADDR_EXP 42
9988: PUSH
9989: LD_INT 1
9991: ST_TO_ADDR
// if p3 = 15 then
9992: LD_VAR 0 3
9996: PUSH
9997: LD_INT 15
9999: EQUAL
10000: IFFALSE 10010
// sKamikadze := true ;
10002: LD_ADDR_EXP 50
10006: PUSH
10007: LD_INT 1
10009: ST_TO_ADDR
// if p3 = 16 then
10010: LD_VAR 0 3
10014: PUSH
10015: LD_INT 16
10017: EQUAL
10018: IFFALSE 10028
// sTroll := true ;
10020: LD_ADDR_EXP 51
10024: PUSH
10025: LD_INT 1
10027: ST_TO_ADDR
// if p3 = 17 then
10028: LD_VAR 0 3
10032: PUSH
10033: LD_INT 17
10035: EQUAL
10036: IFFALSE 10046
// sSlow := true ;
10038: LD_ADDR_EXP 52
10042: PUSH
10043: LD_INT 1
10045: ST_TO_ADDR
// if p3 = 18 then
10046: LD_VAR 0 3
10050: PUSH
10051: LD_INT 18
10053: EQUAL
10054: IFFALSE 10064
// sLack := true ;
10056: LD_ADDR_EXP 53
10060: PUSH
10061: LD_INT 1
10063: ST_TO_ADDR
// if p3 = 19 then
10064: LD_VAR 0 3
10068: PUSH
10069: LD_INT 19
10071: EQUAL
10072: IFFALSE 10082
// sTank := true ;
10074: LD_ADDR_EXP 55
10078: PUSH
10079: LD_INT 1
10081: ST_TO_ADDR
// if p3 = 20 then
10082: LD_VAR 0 3
10086: PUSH
10087: LD_INT 20
10089: EQUAL
10090: IFFALSE 10100
// sRemote := true ;
10092: LD_ADDR_EXP 56
10096: PUSH
10097: LD_INT 1
10099: ST_TO_ADDR
// if p3 = 21 then
10100: LD_VAR 0 3
10104: PUSH
10105: LD_INT 21
10107: EQUAL
10108: IFFALSE 10118
// sPowell := true ;
10110: LD_ADDR_EXP 57
10114: PUSH
10115: LD_INT 1
10117: ST_TO_ADDR
// if p3 = 22 then
10118: LD_VAR 0 3
10122: PUSH
10123: LD_INT 22
10125: EQUAL
10126: IFFALSE 10136
// sTeleport := true ;
10128: LD_ADDR_EXP 60
10132: PUSH
10133: LD_INT 1
10135: ST_TO_ADDR
// if p3 = 23 then
10136: LD_VAR 0 3
10140: PUSH
10141: LD_INT 23
10143: EQUAL
10144: IFFALSE 10154
// sOilTower := true ;
10146: LD_ADDR_EXP 62
10150: PUSH
10151: LD_INT 1
10153: ST_TO_ADDR
// if p3 = 24 then
10154: LD_VAR 0 3
10158: PUSH
10159: LD_INT 24
10161: EQUAL
10162: IFFALSE 10172
// sShovel := true ;
10164: LD_ADDR_EXP 63
10168: PUSH
10169: LD_INT 1
10171: ST_TO_ADDR
// if p3 = 25 then
10172: LD_VAR 0 3
10176: PUSH
10177: LD_INT 25
10179: EQUAL
10180: IFFALSE 10190
// sSheik := true ;
10182: LD_ADDR_EXP 64
10186: PUSH
10187: LD_INT 1
10189: ST_TO_ADDR
// if p3 = 26 then
10190: LD_VAR 0 3
10194: PUSH
10195: LD_INT 26
10197: EQUAL
10198: IFFALSE 10208
// sEarthquake := true ;
10200: LD_ADDR_EXP 66
10204: PUSH
10205: LD_INT 1
10207: ST_TO_ADDR
// if p3 = 27 then
10208: LD_VAR 0 3
10212: PUSH
10213: LD_INT 27
10215: EQUAL
10216: IFFALSE 10226
// sAI := true ;
10218: LD_ADDR_EXP 67
10222: PUSH
10223: LD_INT 1
10225: ST_TO_ADDR
// if p3 = 28 then
10226: LD_VAR 0 3
10230: PUSH
10231: LD_INT 28
10233: EQUAL
10234: IFFALSE 10244
// sCargo := true ;
10236: LD_ADDR_EXP 70
10240: PUSH
10241: LD_INT 1
10243: ST_TO_ADDR
// if p3 = 29 then
10244: LD_VAR 0 3
10248: PUSH
10249: LD_INT 29
10251: EQUAL
10252: IFFALSE 10262
// sDLaser := true ;
10254: LD_ADDR_EXP 71
10258: PUSH
10259: LD_INT 1
10261: ST_TO_ADDR
// if p3 = 30 then
10262: LD_VAR 0 3
10266: PUSH
10267: LD_INT 30
10269: EQUAL
10270: IFFALSE 10280
// sExchange := true ;
10272: LD_ADDR_EXP 72
10276: PUSH
10277: LD_INT 1
10279: ST_TO_ADDR
// if p3 = 31 then
10280: LD_VAR 0 3
10284: PUSH
10285: LD_INT 31
10287: EQUAL
10288: IFFALSE 10298
// sFac := true ;
10290: LD_ADDR_EXP 73
10294: PUSH
10295: LD_INT 1
10297: ST_TO_ADDR
// if p3 = 32 then
10298: LD_VAR 0 3
10302: PUSH
10303: LD_INT 32
10305: EQUAL
10306: IFFALSE 10316
// sPower := true ;
10308: LD_ADDR_EXP 74
10312: PUSH
10313: LD_INT 1
10315: ST_TO_ADDR
// if p3 = 33 then
10316: LD_VAR 0 3
10320: PUSH
10321: LD_INT 33
10323: EQUAL
10324: IFFALSE 10334
// sRandom := true ;
10326: LD_ADDR_EXP 75
10330: PUSH
10331: LD_INT 1
10333: ST_TO_ADDR
// if p3 = 34 then
10334: LD_VAR 0 3
10338: PUSH
10339: LD_INT 34
10341: EQUAL
10342: IFFALSE 10352
// sShield := true ;
10344: LD_ADDR_EXP 76
10348: PUSH
10349: LD_INT 1
10351: ST_TO_ADDR
// if p3 = 35 then
10352: LD_VAR 0 3
10356: PUSH
10357: LD_INT 35
10359: EQUAL
10360: IFFALSE 10370
// sTime := true ;
10362: LD_ADDR_EXP 77
10366: PUSH
10367: LD_INT 1
10369: ST_TO_ADDR
// if p3 = 36 then
10370: LD_VAR 0 3
10374: PUSH
10375: LD_INT 36
10377: EQUAL
10378: IFFALSE 10388
// sTools := true ;
10380: LD_ADDR_EXP 78
10384: PUSH
10385: LD_INT 1
10387: ST_TO_ADDR
// if p3 = 101 then
10388: LD_VAR 0 3
10392: PUSH
10393: LD_INT 101
10395: EQUAL
10396: IFFALSE 10406
// sSold := true ;
10398: LD_ADDR_EXP 43
10402: PUSH
10403: LD_INT 1
10405: ST_TO_ADDR
// if p3 = 102 then
10406: LD_VAR 0 3
10410: PUSH
10411: LD_INT 102
10413: EQUAL
10414: IFFALSE 10424
// sDiff := true ;
10416: LD_ADDR_EXP 44
10420: PUSH
10421: LD_INT 1
10423: ST_TO_ADDR
// if p3 = 103 then
10424: LD_VAR 0 3
10428: PUSH
10429: LD_INT 103
10431: EQUAL
10432: IFFALSE 10442
// sFog := true ;
10434: LD_ADDR_EXP 47
10438: PUSH
10439: LD_INT 1
10441: ST_TO_ADDR
// if p3 = 104 then
10442: LD_VAR 0 3
10446: PUSH
10447: LD_INT 104
10449: EQUAL
10450: IFFALSE 10460
// sReset := true ;
10452: LD_ADDR_EXP 48
10456: PUSH
10457: LD_INT 1
10459: ST_TO_ADDR
// if p3 = 105 then
10460: LD_VAR 0 3
10464: PUSH
10465: LD_INT 105
10467: EQUAL
10468: IFFALSE 10478
// sSun := true ;
10470: LD_ADDR_EXP 49
10474: PUSH
10475: LD_INT 1
10477: ST_TO_ADDR
// if p3 = 106 then
10478: LD_VAR 0 3
10482: PUSH
10483: LD_INT 106
10485: EQUAL
10486: IFFALSE 10496
// sTiger := true ;
10488: LD_ADDR_EXP 45
10492: PUSH
10493: LD_INT 1
10495: ST_TO_ADDR
// if p3 = 107 then
10496: LD_VAR 0 3
10500: PUSH
10501: LD_INT 107
10503: EQUAL
10504: IFFALSE 10514
// sBomb := true ;
10506: LD_ADDR_EXP 46
10510: PUSH
10511: LD_INT 1
10513: ST_TO_ADDR
// if p3 = 108 then
10514: LD_VAR 0 3
10518: PUSH
10519: LD_INT 108
10521: EQUAL
10522: IFFALSE 10532
// sWound := true ;
10524: LD_ADDR_EXP 54
10528: PUSH
10529: LD_INT 1
10531: ST_TO_ADDR
// if p3 = 109 then
10532: LD_VAR 0 3
10536: PUSH
10537: LD_INT 109
10539: EQUAL
10540: IFFALSE 10550
// sBetray := true ;
10542: LD_ADDR_EXP 58
10546: PUSH
10547: LD_INT 1
10549: ST_TO_ADDR
// if p3 = 110 then
10550: LD_VAR 0 3
10554: PUSH
10555: LD_INT 110
10557: EQUAL
10558: IFFALSE 10568
// sContamin := true ;
10560: LD_ADDR_EXP 59
10564: PUSH
10565: LD_INT 1
10567: ST_TO_ADDR
// if p3 = 111 then
10568: LD_VAR 0 3
10572: PUSH
10573: LD_INT 111
10575: EQUAL
10576: IFFALSE 10586
// sOil := true ;
10578: LD_ADDR_EXP 61
10582: PUSH
10583: LD_INT 1
10585: ST_TO_ADDR
// if p3 = 112 then
10586: LD_VAR 0 3
10590: PUSH
10591: LD_INT 112
10593: EQUAL
10594: IFFALSE 10604
// sStu := true ;
10596: LD_ADDR_EXP 65
10600: PUSH
10601: LD_INT 1
10603: ST_TO_ADDR
// if p3 = 113 then
10604: LD_VAR 0 3
10608: PUSH
10609: LD_INT 113
10611: EQUAL
10612: IFFALSE 10622
// sBazooka := true ;
10614: LD_ADDR_EXP 68
10618: PUSH
10619: LD_INT 1
10621: ST_TO_ADDR
// if p3 = 114 then
10622: LD_VAR 0 3
10626: PUSH
10627: LD_INT 114
10629: EQUAL
10630: IFFALSE 10640
// sMortar := true ;
10632: LD_ADDR_EXP 69
10636: PUSH
10637: LD_INT 1
10639: ST_TO_ADDR
// if p3 = 115 then
10640: LD_VAR 0 3
10644: PUSH
10645: LD_INT 115
10647: EQUAL
10648: IFFALSE 10658
// sRanger := true ;
10650: LD_ADDR_EXP 79
10654: PUSH
10655: LD_INT 1
10657: ST_TO_ADDR
// if p3 = 116 then
10658: LD_VAR 0 3
10662: PUSH
10663: LD_INT 116
10665: EQUAL
10666: IFFALSE 10676
// sComputer := true ;
10668: LD_ADDR_EXP 80
10672: PUSH
10673: LD_INT 1
10675: ST_TO_ADDR
// if p3 = 117 then
10676: LD_VAR 0 3
10680: PUSH
10681: LD_INT 117
10683: EQUAL
10684: IFFALSE 10694
// s30 := true ;
10686: LD_ADDR_EXP 81
10690: PUSH
10691: LD_INT 1
10693: ST_TO_ADDR
// if p3 = 118 then
10694: LD_VAR 0 3
10698: PUSH
10699: LD_INT 118
10701: EQUAL
10702: IFFALSE 10712
// s60 := true ;
10704: LD_ADDR_EXP 82
10708: PUSH
10709: LD_INT 1
10711: ST_TO_ADDR
// end ; if p2 = hack_mode then
10712: LD_VAR 0 2
10716: PUSH
10717: LD_INT 101
10719: EQUAL
10720: IFFALSE 10848
// begin case p3 of 1 :
10722: LD_VAR 0 3
10726: PUSH
10727: LD_INT 1
10729: DOUBLE
10730: EQUAL
10731: IFTRUE 10735
10733: GO 10742
10735: POP
// hHackUnlimitedResources ; 2 :
10736: CALL 23111 0 0
10740: GO 10848
10742: LD_INT 2
10744: DOUBLE
10745: EQUAL
10746: IFTRUE 10750
10748: GO 10757
10750: POP
// hHackSetLevel10 ; 3 :
10751: CALL 23244 0 0
10755: GO 10848
10757: LD_INT 3
10759: DOUBLE
10760: EQUAL
10761: IFTRUE 10765
10763: GO 10772
10765: POP
// hHackSetLevel10YourUnits ; 4 :
10766: CALL 23329 0 0
10770: GO 10848
10772: LD_INT 4
10774: DOUBLE
10775: EQUAL
10776: IFTRUE 10780
10778: GO 10787
10780: POP
// hHackInvincible ; 5 :
10781: CALL 23777 0 0
10785: GO 10848
10787: LD_INT 5
10789: DOUBLE
10790: EQUAL
10791: IFTRUE 10795
10793: GO 10802
10795: POP
// hHackInvisible ; 6 :
10796: CALL 23888 0 0
10800: GO 10848
10802: LD_INT 6
10804: DOUBLE
10805: EQUAL
10806: IFTRUE 10810
10808: GO 10817
10810: POP
// hHackChangeYourSide ; 7 :
10811: CALL 23945 0 0
10815: GO 10848
10817: LD_INT 7
10819: DOUBLE
10820: EQUAL
10821: IFTRUE 10825
10823: GO 10832
10825: POP
// hHackChangeUnitSide ; 8 :
10826: CALL 23987 0 0
10830: GO 10848
10832: LD_INT 8
10834: DOUBLE
10835: EQUAL
10836: IFTRUE 10840
10838: GO 10847
10840: POP
// hHackFog ; end ;
10841: CALL 24088 0 0
10845: GO 10848
10847: POP
// end ; if p2 = game_save_mode then
10848: LD_VAR 0 2
10852: PUSH
10853: LD_INT 102
10855: EQUAL
10856: IFFALSE 10913
// begin if p3 = 1 then
10858: LD_VAR 0 3
10862: PUSH
10863: LD_INT 1
10865: EQUAL
10866: IFFALSE 10878
// globalGameSaveCounter := p4 ;
10868: LD_ADDR_EXP 25
10872: PUSH
10873: LD_VAR 0 4
10877: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
10878: LD_VAR 0 3
10882: PUSH
10883: LD_INT 2
10885: EQUAL
10886: IFFALSE 10894
10888: PUSH
10889: LD_EXP 25
10893: AND
10894: IFFALSE 10913
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10896: LD_STRING setGameSaveCounter(
10898: PUSH
10899: LD_EXP 25
10903: STR
10904: PUSH
10905: LD_STRING )
10907: STR
10908: PPUSH
10909: CALL_OW 559
// end ; end ;
10913: LD_VAR 0 7
10917: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
10918: LD_INT 0
10920: PPUSH
// streamModeActive := false ;
10921: LD_ADDR_EXP 26
10925: PUSH
10926: LD_INT 0
10928: ST_TO_ADDR
// normalCounter := 36 ;
10929: LD_ADDR_EXP 27
10933: PUSH
10934: LD_INT 36
10936: ST_TO_ADDR
// hardcoreCounter := 18 ;
10937: LD_ADDR_EXP 28
10941: PUSH
10942: LD_INT 18
10944: ST_TO_ADDR
// sRocket := false ;
10945: LD_ADDR_EXP 31
10949: PUSH
10950: LD_INT 0
10952: ST_TO_ADDR
// sSpeed := false ;
10953: LD_ADDR_EXP 30
10957: PUSH
10958: LD_INT 0
10960: ST_TO_ADDR
// sEngine := false ;
10961: LD_ADDR_EXP 32
10965: PUSH
10966: LD_INT 0
10968: ST_TO_ADDR
// sSpec := false ;
10969: LD_ADDR_EXP 29
10973: PUSH
10974: LD_INT 0
10976: ST_TO_ADDR
// sLevel := false ;
10977: LD_ADDR_EXP 33
10981: PUSH
10982: LD_INT 0
10984: ST_TO_ADDR
// sArmoury := false ;
10985: LD_ADDR_EXP 34
10989: PUSH
10990: LD_INT 0
10992: ST_TO_ADDR
// sRadar := false ;
10993: LD_ADDR_EXP 35
10997: PUSH
10998: LD_INT 0
11000: ST_TO_ADDR
// sBunker := false ;
11001: LD_ADDR_EXP 36
11005: PUSH
11006: LD_INT 0
11008: ST_TO_ADDR
// sHack := false ;
11009: LD_ADDR_EXP 37
11013: PUSH
11014: LD_INT 0
11016: ST_TO_ADDR
// sFire := false ;
11017: LD_ADDR_EXP 38
11021: PUSH
11022: LD_INT 0
11024: ST_TO_ADDR
// sRefresh := false ;
11025: LD_ADDR_EXP 39
11029: PUSH
11030: LD_INT 0
11032: ST_TO_ADDR
// sExp := false ;
11033: LD_ADDR_EXP 40
11037: PUSH
11038: LD_INT 0
11040: ST_TO_ADDR
// sDepot := false ;
11041: LD_ADDR_EXP 41
11045: PUSH
11046: LD_INT 0
11048: ST_TO_ADDR
// sFlag := false ;
11049: LD_ADDR_EXP 42
11053: PUSH
11054: LD_INT 0
11056: ST_TO_ADDR
// sKamikadze := false ;
11057: LD_ADDR_EXP 50
11061: PUSH
11062: LD_INT 0
11064: ST_TO_ADDR
// sTroll := false ;
11065: LD_ADDR_EXP 51
11069: PUSH
11070: LD_INT 0
11072: ST_TO_ADDR
// sSlow := false ;
11073: LD_ADDR_EXP 52
11077: PUSH
11078: LD_INT 0
11080: ST_TO_ADDR
// sLack := false ;
11081: LD_ADDR_EXP 53
11085: PUSH
11086: LD_INT 0
11088: ST_TO_ADDR
// sTank := false ;
11089: LD_ADDR_EXP 55
11093: PUSH
11094: LD_INT 0
11096: ST_TO_ADDR
// sRemote := false ;
11097: LD_ADDR_EXP 56
11101: PUSH
11102: LD_INT 0
11104: ST_TO_ADDR
// sPowell := false ;
11105: LD_ADDR_EXP 57
11109: PUSH
11110: LD_INT 0
11112: ST_TO_ADDR
// sTeleport := false ;
11113: LD_ADDR_EXP 60
11117: PUSH
11118: LD_INT 0
11120: ST_TO_ADDR
// sOilTower := false ;
11121: LD_ADDR_EXP 62
11125: PUSH
11126: LD_INT 0
11128: ST_TO_ADDR
// sShovel := false ;
11129: LD_ADDR_EXP 63
11133: PUSH
11134: LD_INT 0
11136: ST_TO_ADDR
// sSheik := false ;
11137: LD_ADDR_EXP 64
11141: PUSH
11142: LD_INT 0
11144: ST_TO_ADDR
// sEarthquake := false ;
11145: LD_ADDR_EXP 66
11149: PUSH
11150: LD_INT 0
11152: ST_TO_ADDR
// sAI := false ;
11153: LD_ADDR_EXP 67
11157: PUSH
11158: LD_INT 0
11160: ST_TO_ADDR
// sCargo := false ;
11161: LD_ADDR_EXP 70
11165: PUSH
11166: LD_INT 0
11168: ST_TO_ADDR
// sDLaser := false ;
11169: LD_ADDR_EXP 71
11173: PUSH
11174: LD_INT 0
11176: ST_TO_ADDR
// sExchange := false ;
11177: LD_ADDR_EXP 72
11181: PUSH
11182: LD_INT 0
11184: ST_TO_ADDR
// sFac := false ;
11185: LD_ADDR_EXP 73
11189: PUSH
11190: LD_INT 0
11192: ST_TO_ADDR
// sPower := false ;
11193: LD_ADDR_EXP 74
11197: PUSH
11198: LD_INT 0
11200: ST_TO_ADDR
// sRandom := false ;
11201: LD_ADDR_EXP 75
11205: PUSH
11206: LD_INT 0
11208: ST_TO_ADDR
// sShield := false ;
11209: LD_ADDR_EXP 76
11213: PUSH
11214: LD_INT 0
11216: ST_TO_ADDR
// sTime := false ;
11217: LD_ADDR_EXP 77
11221: PUSH
11222: LD_INT 0
11224: ST_TO_ADDR
// sTools := false ;
11225: LD_ADDR_EXP 78
11229: PUSH
11230: LD_INT 0
11232: ST_TO_ADDR
// sSold := false ;
11233: LD_ADDR_EXP 43
11237: PUSH
11238: LD_INT 0
11240: ST_TO_ADDR
// sDiff := false ;
11241: LD_ADDR_EXP 44
11245: PUSH
11246: LD_INT 0
11248: ST_TO_ADDR
// sFog := false ;
11249: LD_ADDR_EXP 47
11253: PUSH
11254: LD_INT 0
11256: ST_TO_ADDR
// sReset := false ;
11257: LD_ADDR_EXP 48
11261: PUSH
11262: LD_INT 0
11264: ST_TO_ADDR
// sSun := false ;
11265: LD_ADDR_EXP 49
11269: PUSH
11270: LD_INT 0
11272: ST_TO_ADDR
// sTiger := false ;
11273: LD_ADDR_EXP 45
11277: PUSH
11278: LD_INT 0
11280: ST_TO_ADDR
// sBomb := false ;
11281: LD_ADDR_EXP 46
11285: PUSH
11286: LD_INT 0
11288: ST_TO_ADDR
// sWound := false ;
11289: LD_ADDR_EXP 54
11293: PUSH
11294: LD_INT 0
11296: ST_TO_ADDR
// sBetray := false ;
11297: LD_ADDR_EXP 58
11301: PUSH
11302: LD_INT 0
11304: ST_TO_ADDR
// sContamin := false ;
11305: LD_ADDR_EXP 59
11309: PUSH
11310: LD_INT 0
11312: ST_TO_ADDR
// sOil := false ;
11313: LD_ADDR_EXP 61
11317: PUSH
11318: LD_INT 0
11320: ST_TO_ADDR
// sStu := false ;
11321: LD_ADDR_EXP 65
11325: PUSH
11326: LD_INT 0
11328: ST_TO_ADDR
// sBazooka := false ;
11329: LD_ADDR_EXP 68
11333: PUSH
11334: LD_INT 0
11336: ST_TO_ADDR
// sMortar := false ;
11337: LD_ADDR_EXP 69
11341: PUSH
11342: LD_INT 0
11344: ST_TO_ADDR
// sRanger := false ;
11345: LD_ADDR_EXP 79
11349: PUSH
11350: LD_INT 0
11352: ST_TO_ADDR
// sComputer := false ;
11353: LD_ADDR_EXP 80
11357: PUSH
11358: LD_INT 0
11360: ST_TO_ADDR
// s30 := false ;
11361: LD_ADDR_EXP 81
11365: PUSH
11366: LD_INT 0
11368: ST_TO_ADDR
// s60 := false ;
11369: LD_ADDR_EXP 82
11373: PUSH
11374: LD_INT 0
11376: ST_TO_ADDR
// end ;
11377: LD_VAR 0 1
11381: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
11382: LD_INT 0
11384: PPUSH
11385: PPUSH
11386: PPUSH
11387: PPUSH
11388: PPUSH
11389: PPUSH
11390: PPUSH
// result := [ ] ;
11391: LD_ADDR_VAR 0 2
11395: PUSH
11396: EMPTY
11397: ST_TO_ADDR
// if campaign_id = 1 then
11398: LD_OWVAR 69
11402: PUSH
11403: LD_INT 1
11405: EQUAL
11406: IFFALSE 14572
// begin case mission_number of 1 :
11408: LD_OWVAR 70
11412: PUSH
11413: LD_INT 1
11415: DOUBLE
11416: EQUAL
11417: IFTRUE 11421
11419: GO 11497
11421: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
11422: LD_ADDR_VAR 0 2
11426: PUSH
11427: LD_INT 2
11429: PUSH
11430: LD_INT 4
11432: PUSH
11433: LD_INT 11
11435: PUSH
11436: LD_INT 12
11438: PUSH
11439: LD_INT 15
11441: PUSH
11442: LD_INT 16
11444: PUSH
11445: LD_INT 22
11447: PUSH
11448: LD_INT 23
11450: PUSH
11451: LD_INT 26
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: PUSH
11465: LD_INT 101
11467: PUSH
11468: LD_INT 102
11470: PUSH
11471: LD_INT 106
11473: PUSH
11474: LD_INT 116
11476: PUSH
11477: LD_INT 117
11479: PUSH
11480: LD_INT 118
11482: PUSH
11483: EMPTY
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: PUSH
11491: EMPTY
11492: LIST
11493: LIST
11494: ST_TO_ADDR
11495: GO 14570
11497: LD_INT 2
11499: DOUBLE
11500: EQUAL
11501: IFTRUE 11505
11503: GO 11589
11505: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
11506: LD_ADDR_VAR 0 2
11510: PUSH
11511: LD_INT 2
11513: PUSH
11514: LD_INT 4
11516: PUSH
11517: LD_INT 11
11519: PUSH
11520: LD_INT 12
11522: PUSH
11523: LD_INT 15
11525: PUSH
11526: LD_INT 16
11528: PUSH
11529: LD_INT 22
11531: PUSH
11532: LD_INT 23
11534: PUSH
11535: LD_INT 26
11537: PUSH
11538: EMPTY
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: PUSH
11549: LD_INT 101
11551: PUSH
11552: LD_INT 102
11554: PUSH
11555: LD_INT 105
11557: PUSH
11558: LD_INT 106
11560: PUSH
11561: LD_INT 108
11563: PUSH
11564: LD_INT 116
11566: PUSH
11567: LD_INT 117
11569: PUSH
11570: LD_INT 118
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: ST_TO_ADDR
11587: GO 14570
11589: LD_INT 3
11591: DOUBLE
11592: EQUAL
11593: IFTRUE 11597
11595: GO 11685
11597: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
11598: LD_ADDR_VAR 0 2
11602: PUSH
11603: LD_INT 2
11605: PUSH
11606: LD_INT 4
11608: PUSH
11609: LD_INT 5
11611: PUSH
11612: LD_INT 11
11614: PUSH
11615: LD_INT 12
11617: PUSH
11618: LD_INT 15
11620: PUSH
11621: LD_INT 16
11623: PUSH
11624: LD_INT 22
11626: PUSH
11627: LD_INT 26
11629: PUSH
11630: LD_INT 36
11632: PUSH
11633: EMPTY
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: PUSH
11645: LD_INT 101
11647: PUSH
11648: LD_INT 102
11650: PUSH
11651: LD_INT 105
11653: PUSH
11654: LD_INT 106
11656: PUSH
11657: LD_INT 108
11659: PUSH
11660: LD_INT 116
11662: PUSH
11663: LD_INT 117
11665: PUSH
11666: LD_INT 118
11668: PUSH
11669: EMPTY
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: ST_TO_ADDR
11683: GO 14570
11685: LD_INT 4
11687: DOUBLE
11688: EQUAL
11689: IFTRUE 11693
11691: GO 11789
11693: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
11694: LD_ADDR_VAR 0 2
11698: PUSH
11699: LD_INT 2
11701: PUSH
11702: LD_INT 4
11704: PUSH
11705: LD_INT 5
11707: PUSH
11708: LD_INT 8
11710: PUSH
11711: LD_INT 11
11713: PUSH
11714: LD_INT 12
11716: PUSH
11717: LD_INT 15
11719: PUSH
11720: LD_INT 16
11722: PUSH
11723: LD_INT 22
11725: PUSH
11726: LD_INT 23
11728: PUSH
11729: LD_INT 26
11731: PUSH
11732: LD_INT 36
11734: PUSH
11735: EMPTY
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: PUSH
11749: LD_INT 101
11751: PUSH
11752: LD_INT 102
11754: PUSH
11755: LD_INT 105
11757: PUSH
11758: LD_INT 106
11760: PUSH
11761: LD_INT 108
11763: PUSH
11764: LD_INT 116
11766: PUSH
11767: LD_INT 117
11769: PUSH
11770: LD_INT 118
11772: PUSH
11773: EMPTY
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: PUSH
11783: EMPTY
11784: LIST
11785: LIST
11786: ST_TO_ADDR
11787: GO 14570
11789: LD_INT 5
11791: DOUBLE
11792: EQUAL
11793: IFTRUE 11797
11795: GO 11909
11797: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
11798: LD_ADDR_VAR 0 2
11802: PUSH
11803: LD_INT 2
11805: PUSH
11806: LD_INT 4
11808: PUSH
11809: LD_INT 5
11811: PUSH
11812: LD_INT 6
11814: PUSH
11815: LD_INT 8
11817: PUSH
11818: LD_INT 11
11820: PUSH
11821: LD_INT 12
11823: PUSH
11824: LD_INT 15
11826: PUSH
11827: LD_INT 16
11829: PUSH
11830: LD_INT 22
11832: PUSH
11833: LD_INT 23
11835: PUSH
11836: LD_INT 25
11838: PUSH
11839: LD_INT 26
11841: PUSH
11842: LD_INT 36
11844: PUSH
11845: EMPTY
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: PUSH
11861: LD_INT 101
11863: PUSH
11864: LD_INT 102
11866: PUSH
11867: LD_INT 105
11869: PUSH
11870: LD_INT 106
11872: PUSH
11873: LD_INT 108
11875: PUSH
11876: LD_INT 109
11878: PUSH
11879: LD_INT 112
11881: PUSH
11882: LD_INT 116
11884: PUSH
11885: LD_INT 117
11887: PUSH
11888: LD_INT 118
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: ST_TO_ADDR
11907: GO 14570
11909: LD_INT 6
11911: DOUBLE
11912: EQUAL
11913: IFTRUE 11917
11915: GO 12049
11917: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
11918: LD_ADDR_VAR 0 2
11922: PUSH
11923: LD_INT 2
11925: PUSH
11926: LD_INT 4
11928: PUSH
11929: LD_INT 5
11931: PUSH
11932: LD_INT 6
11934: PUSH
11935: LD_INT 8
11937: PUSH
11938: LD_INT 11
11940: PUSH
11941: LD_INT 12
11943: PUSH
11944: LD_INT 15
11946: PUSH
11947: LD_INT 16
11949: PUSH
11950: LD_INT 20
11952: PUSH
11953: LD_INT 21
11955: PUSH
11956: LD_INT 22
11958: PUSH
11959: LD_INT 23
11961: PUSH
11962: LD_INT 25
11964: PUSH
11965: LD_INT 26
11967: PUSH
11968: LD_INT 30
11970: PUSH
11971: LD_INT 31
11973: PUSH
11974: LD_INT 32
11976: PUSH
11977: LD_INT 36
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: PUSH
12001: LD_INT 101
12003: PUSH
12004: LD_INT 102
12006: PUSH
12007: LD_INT 105
12009: PUSH
12010: LD_INT 106
12012: PUSH
12013: LD_INT 108
12015: PUSH
12016: LD_INT 109
12018: PUSH
12019: LD_INT 112
12021: PUSH
12022: LD_INT 116
12024: PUSH
12025: LD_INT 117
12027: PUSH
12028: LD_INT 118
12030: PUSH
12031: EMPTY
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: ST_TO_ADDR
12047: GO 14570
12049: LD_INT 7
12051: DOUBLE
12052: EQUAL
12053: IFTRUE 12057
12055: GO 12169
12057: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12058: LD_ADDR_VAR 0 2
12062: PUSH
12063: LD_INT 2
12065: PUSH
12066: LD_INT 4
12068: PUSH
12069: LD_INT 5
12071: PUSH
12072: LD_INT 7
12074: PUSH
12075: LD_INT 11
12077: PUSH
12078: LD_INT 12
12080: PUSH
12081: LD_INT 15
12083: PUSH
12084: LD_INT 16
12086: PUSH
12087: LD_INT 20
12089: PUSH
12090: LD_INT 21
12092: PUSH
12093: LD_INT 22
12095: PUSH
12096: LD_INT 23
12098: PUSH
12099: LD_INT 25
12101: PUSH
12102: LD_INT 26
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: PUSH
12121: LD_INT 101
12123: PUSH
12124: LD_INT 102
12126: PUSH
12127: LD_INT 103
12129: PUSH
12130: LD_INT 105
12132: PUSH
12133: LD_INT 106
12135: PUSH
12136: LD_INT 108
12138: PUSH
12139: LD_INT 112
12141: PUSH
12142: LD_INT 116
12144: PUSH
12145: LD_INT 117
12147: PUSH
12148: LD_INT 118
12150: PUSH
12151: EMPTY
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: PUSH
12163: EMPTY
12164: LIST
12165: LIST
12166: ST_TO_ADDR
12167: GO 14570
12169: LD_INT 8
12171: DOUBLE
12172: EQUAL
12173: IFTRUE 12177
12175: GO 12317
12177: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12178: LD_ADDR_VAR 0 2
12182: PUSH
12183: LD_INT 2
12185: PUSH
12186: LD_INT 4
12188: PUSH
12189: LD_INT 5
12191: PUSH
12192: LD_INT 6
12194: PUSH
12195: LD_INT 7
12197: PUSH
12198: LD_INT 8
12200: PUSH
12201: LD_INT 11
12203: PUSH
12204: LD_INT 12
12206: PUSH
12207: LD_INT 15
12209: PUSH
12210: LD_INT 16
12212: PUSH
12213: LD_INT 20
12215: PUSH
12216: LD_INT 21
12218: PUSH
12219: LD_INT 22
12221: PUSH
12222: LD_INT 23
12224: PUSH
12225: LD_INT 25
12227: PUSH
12228: LD_INT 26
12230: PUSH
12231: LD_INT 30
12233: PUSH
12234: LD_INT 31
12236: PUSH
12237: LD_INT 32
12239: PUSH
12240: LD_INT 36
12242: PUSH
12243: EMPTY
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: PUSH
12265: LD_INT 101
12267: PUSH
12268: LD_INT 102
12270: PUSH
12271: LD_INT 103
12273: PUSH
12274: LD_INT 105
12276: PUSH
12277: LD_INT 106
12279: PUSH
12280: LD_INT 108
12282: PUSH
12283: LD_INT 109
12285: PUSH
12286: LD_INT 112
12288: PUSH
12289: LD_INT 116
12291: PUSH
12292: LD_INT 117
12294: PUSH
12295: LD_INT 118
12297: PUSH
12298: EMPTY
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: PUSH
12311: EMPTY
12312: LIST
12313: LIST
12314: ST_TO_ADDR
12315: GO 14570
12317: LD_INT 9
12319: DOUBLE
12320: EQUAL
12321: IFTRUE 12325
12323: GO 12473
12325: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
12326: LD_ADDR_VAR 0 2
12330: PUSH
12331: LD_INT 2
12333: PUSH
12334: LD_INT 4
12336: PUSH
12337: LD_INT 5
12339: PUSH
12340: LD_INT 6
12342: PUSH
12343: LD_INT 7
12345: PUSH
12346: LD_INT 8
12348: PUSH
12349: LD_INT 11
12351: PUSH
12352: LD_INT 12
12354: PUSH
12355: LD_INT 15
12357: PUSH
12358: LD_INT 16
12360: PUSH
12361: LD_INT 20
12363: PUSH
12364: LD_INT 21
12366: PUSH
12367: LD_INT 22
12369: PUSH
12370: LD_INT 23
12372: PUSH
12373: LD_INT 25
12375: PUSH
12376: LD_INT 26
12378: PUSH
12379: LD_INT 28
12381: PUSH
12382: LD_INT 30
12384: PUSH
12385: LD_INT 31
12387: PUSH
12388: LD_INT 32
12390: PUSH
12391: LD_INT 36
12393: PUSH
12394: EMPTY
12395: LIST
12396: LIST
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: PUSH
12417: LD_INT 101
12419: PUSH
12420: LD_INT 102
12422: PUSH
12423: LD_INT 103
12425: PUSH
12426: LD_INT 105
12428: PUSH
12429: LD_INT 106
12431: PUSH
12432: LD_INT 108
12434: PUSH
12435: LD_INT 109
12437: PUSH
12438: LD_INT 112
12440: PUSH
12441: LD_INT 114
12443: PUSH
12444: LD_INT 116
12446: PUSH
12447: LD_INT 117
12449: PUSH
12450: LD_INT 118
12452: PUSH
12453: EMPTY
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: PUSH
12467: EMPTY
12468: LIST
12469: LIST
12470: ST_TO_ADDR
12471: GO 14570
12473: LD_INT 10
12475: DOUBLE
12476: EQUAL
12477: IFTRUE 12481
12479: GO 12677
12481: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
12482: LD_ADDR_VAR 0 2
12486: PUSH
12487: LD_INT 2
12489: PUSH
12490: LD_INT 4
12492: PUSH
12493: LD_INT 5
12495: PUSH
12496: LD_INT 6
12498: PUSH
12499: LD_INT 7
12501: PUSH
12502: LD_INT 8
12504: PUSH
12505: LD_INT 9
12507: PUSH
12508: LD_INT 10
12510: PUSH
12511: LD_INT 11
12513: PUSH
12514: LD_INT 12
12516: PUSH
12517: LD_INT 13
12519: PUSH
12520: LD_INT 14
12522: PUSH
12523: LD_INT 15
12525: PUSH
12526: LD_INT 16
12528: PUSH
12529: LD_INT 17
12531: PUSH
12532: LD_INT 18
12534: PUSH
12535: LD_INT 19
12537: PUSH
12538: LD_INT 20
12540: PUSH
12541: LD_INT 21
12543: PUSH
12544: LD_INT 22
12546: PUSH
12547: LD_INT 23
12549: PUSH
12550: LD_INT 24
12552: PUSH
12553: LD_INT 25
12555: PUSH
12556: LD_INT 26
12558: PUSH
12559: LD_INT 28
12561: PUSH
12562: LD_INT 30
12564: PUSH
12565: LD_INT 31
12567: PUSH
12568: LD_INT 32
12570: PUSH
12571: LD_INT 36
12573: PUSH
12574: EMPTY
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: LIST
12598: LIST
12599: LIST
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: PUSH
12605: LD_INT 101
12607: PUSH
12608: LD_INT 102
12610: PUSH
12611: LD_INT 103
12613: PUSH
12614: LD_INT 104
12616: PUSH
12617: LD_INT 105
12619: PUSH
12620: LD_INT 106
12622: PUSH
12623: LD_INT 107
12625: PUSH
12626: LD_INT 108
12628: PUSH
12629: LD_INT 109
12631: PUSH
12632: LD_INT 110
12634: PUSH
12635: LD_INT 111
12637: PUSH
12638: LD_INT 112
12640: PUSH
12641: LD_INT 114
12643: PUSH
12644: LD_INT 116
12646: PUSH
12647: LD_INT 117
12649: PUSH
12650: LD_INT 118
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: ST_TO_ADDR
12675: GO 14570
12677: LD_INT 11
12679: DOUBLE
12680: EQUAL
12681: IFTRUE 12685
12683: GO 12889
12685: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
12686: LD_ADDR_VAR 0 2
12690: PUSH
12691: LD_INT 2
12693: PUSH
12694: LD_INT 3
12696: PUSH
12697: LD_INT 4
12699: PUSH
12700: LD_INT 5
12702: PUSH
12703: LD_INT 6
12705: PUSH
12706: LD_INT 7
12708: PUSH
12709: LD_INT 8
12711: PUSH
12712: LD_INT 9
12714: PUSH
12715: LD_INT 10
12717: PUSH
12718: LD_INT 11
12720: PUSH
12721: LD_INT 12
12723: PUSH
12724: LD_INT 13
12726: PUSH
12727: LD_INT 14
12729: PUSH
12730: LD_INT 15
12732: PUSH
12733: LD_INT 16
12735: PUSH
12736: LD_INT 17
12738: PUSH
12739: LD_INT 18
12741: PUSH
12742: LD_INT 19
12744: PUSH
12745: LD_INT 20
12747: PUSH
12748: LD_INT 21
12750: PUSH
12751: LD_INT 22
12753: PUSH
12754: LD_INT 23
12756: PUSH
12757: LD_INT 24
12759: PUSH
12760: LD_INT 25
12762: PUSH
12763: LD_INT 26
12765: PUSH
12766: LD_INT 28
12768: PUSH
12769: LD_INT 30
12771: PUSH
12772: LD_INT 31
12774: PUSH
12775: LD_INT 32
12777: PUSH
12778: LD_INT 34
12780: PUSH
12781: LD_INT 36
12783: PUSH
12784: EMPTY
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: PUSH
12817: LD_INT 101
12819: PUSH
12820: LD_INT 102
12822: PUSH
12823: LD_INT 103
12825: PUSH
12826: LD_INT 104
12828: PUSH
12829: LD_INT 105
12831: PUSH
12832: LD_INT 106
12834: PUSH
12835: LD_INT 107
12837: PUSH
12838: LD_INT 108
12840: PUSH
12841: LD_INT 109
12843: PUSH
12844: LD_INT 110
12846: PUSH
12847: LD_INT 111
12849: PUSH
12850: LD_INT 112
12852: PUSH
12853: LD_INT 114
12855: PUSH
12856: LD_INT 116
12858: PUSH
12859: LD_INT 117
12861: PUSH
12862: LD_INT 118
12864: PUSH
12865: EMPTY
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: PUSH
12883: EMPTY
12884: LIST
12885: LIST
12886: ST_TO_ADDR
12887: GO 14570
12889: LD_INT 12
12891: DOUBLE
12892: EQUAL
12893: IFTRUE 12897
12895: GO 13117
12897: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
12898: LD_ADDR_VAR 0 2
12902: PUSH
12903: LD_INT 1
12905: PUSH
12906: LD_INT 2
12908: PUSH
12909: LD_INT 3
12911: PUSH
12912: LD_INT 4
12914: PUSH
12915: LD_INT 5
12917: PUSH
12918: LD_INT 6
12920: PUSH
12921: LD_INT 7
12923: PUSH
12924: LD_INT 8
12926: PUSH
12927: LD_INT 9
12929: PUSH
12930: LD_INT 10
12932: PUSH
12933: LD_INT 11
12935: PUSH
12936: LD_INT 12
12938: PUSH
12939: LD_INT 13
12941: PUSH
12942: LD_INT 14
12944: PUSH
12945: LD_INT 15
12947: PUSH
12948: LD_INT 16
12950: PUSH
12951: LD_INT 17
12953: PUSH
12954: LD_INT 18
12956: PUSH
12957: LD_INT 19
12959: PUSH
12960: LD_INT 20
12962: PUSH
12963: LD_INT 21
12965: PUSH
12966: LD_INT 22
12968: PUSH
12969: LD_INT 23
12971: PUSH
12972: LD_INT 24
12974: PUSH
12975: LD_INT 25
12977: PUSH
12978: LD_INT 26
12980: PUSH
12981: LD_INT 27
12983: PUSH
12984: LD_INT 28
12986: PUSH
12987: LD_INT 30
12989: PUSH
12990: LD_INT 31
12992: PUSH
12993: LD_INT 32
12995: PUSH
12996: LD_INT 33
12998: PUSH
12999: LD_INT 34
13001: PUSH
13002: LD_INT 36
13004: PUSH
13005: EMPTY
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: PUSH
13041: LD_INT 101
13043: PUSH
13044: LD_INT 102
13046: PUSH
13047: LD_INT 103
13049: PUSH
13050: LD_INT 104
13052: PUSH
13053: LD_INT 105
13055: PUSH
13056: LD_INT 106
13058: PUSH
13059: LD_INT 107
13061: PUSH
13062: LD_INT 108
13064: PUSH
13065: LD_INT 109
13067: PUSH
13068: LD_INT 110
13070: PUSH
13071: LD_INT 111
13073: PUSH
13074: LD_INT 112
13076: PUSH
13077: LD_INT 113
13079: PUSH
13080: LD_INT 114
13082: PUSH
13083: LD_INT 116
13085: PUSH
13086: LD_INT 117
13088: PUSH
13089: LD_INT 118
13091: PUSH
13092: EMPTY
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: PUSH
13111: EMPTY
13112: LIST
13113: LIST
13114: ST_TO_ADDR
13115: GO 14570
13117: LD_INT 13
13119: DOUBLE
13120: EQUAL
13121: IFTRUE 13125
13123: GO 13333
13125: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13126: LD_ADDR_VAR 0 2
13130: PUSH
13131: LD_INT 1
13133: PUSH
13134: LD_INT 2
13136: PUSH
13137: LD_INT 3
13139: PUSH
13140: LD_INT 4
13142: PUSH
13143: LD_INT 5
13145: PUSH
13146: LD_INT 8
13148: PUSH
13149: LD_INT 9
13151: PUSH
13152: LD_INT 10
13154: PUSH
13155: LD_INT 11
13157: PUSH
13158: LD_INT 12
13160: PUSH
13161: LD_INT 14
13163: PUSH
13164: LD_INT 15
13166: PUSH
13167: LD_INT 16
13169: PUSH
13170: LD_INT 17
13172: PUSH
13173: LD_INT 18
13175: PUSH
13176: LD_INT 19
13178: PUSH
13179: LD_INT 20
13181: PUSH
13182: LD_INT 21
13184: PUSH
13185: LD_INT 22
13187: PUSH
13188: LD_INT 23
13190: PUSH
13191: LD_INT 24
13193: PUSH
13194: LD_INT 25
13196: PUSH
13197: LD_INT 26
13199: PUSH
13200: LD_INT 27
13202: PUSH
13203: LD_INT 28
13205: PUSH
13206: LD_INT 30
13208: PUSH
13209: LD_INT 31
13211: PUSH
13212: LD_INT 32
13214: PUSH
13215: LD_INT 33
13217: PUSH
13218: LD_INT 34
13220: PUSH
13221: LD_INT 36
13223: PUSH
13224: EMPTY
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: PUSH
13257: LD_INT 101
13259: PUSH
13260: LD_INT 102
13262: PUSH
13263: LD_INT 103
13265: PUSH
13266: LD_INT 104
13268: PUSH
13269: LD_INT 105
13271: PUSH
13272: LD_INT 106
13274: PUSH
13275: LD_INT 107
13277: PUSH
13278: LD_INT 108
13280: PUSH
13281: LD_INT 109
13283: PUSH
13284: LD_INT 110
13286: PUSH
13287: LD_INT 111
13289: PUSH
13290: LD_INT 112
13292: PUSH
13293: LD_INT 113
13295: PUSH
13296: LD_INT 114
13298: PUSH
13299: LD_INT 116
13301: PUSH
13302: LD_INT 117
13304: PUSH
13305: LD_INT 118
13307: PUSH
13308: EMPTY
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: ST_TO_ADDR
13331: GO 14570
13333: LD_INT 14
13335: DOUBLE
13336: EQUAL
13337: IFTRUE 13341
13339: GO 13565
13341: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
13342: LD_ADDR_VAR 0 2
13346: PUSH
13347: LD_INT 1
13349: PUSH
13350: LD_INT 2
13352: PUSH
13353: LD_INT 3
13355: PUSH
13356: LD_INT 4
13358: PUSH
13359: LD_INT 5
13361: PUSH
13362: LD_INT 6
13364: PUSH
13365: LD_INT 7
13367: PUSH
13368: LD_INT 8
13370: PUSH
13371: LD_INT 9
13373: PUSH
13374: LD_INT 10
13376: PUSH
13377: LD_INT 11
13379: PUSH
13380: LD_INT 12
13382: PUSH
13383: LD_INT 13
13385: PUSH
13386: LD_INT 14
13388: PUSH
13389: LD_INT 15
13391: PUSH
13392: LD_INT 16
13394: PUSH
13395: LD_INT 17
13397: PUSH
13398: LD_INT 18
13400: PUSH
13401: LD_INT 19
13403: PUSH
13404: LD_INT 20
13406: PUSH
13407: LD_INT 21
13409: PUSH
13410: LD_INT 22
13412: PUSH
13413: LD_INT 23
13415: PUSH
13416: LD_INT 24
13418: PUSH
13419: LD_INT 25
13421: PUSH
13422: LD_INT 26
13424: PUSH
13425: LD_INT 27
13427: PUSH
13428: LD_INT 28
13430: PUSH
13431: LD_INT 29
13433: PUSH
13434: LD_INT 30
13436: PUSH
13437: LD_INT 31
13439: PUSH
13440: LD_INT 32
13442: PUSH
13443: LD_INT 33
13445: PUSH
13446: LD_INT 34
13448: PUSH
13449: LD_INT 36
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: PUSH
13489: LD_INT 101
13491: PUSH
13492: LD_INT 102
13494: PUSH
13495: LD_INT 103
13497: PUSH
13498: LD_INT 104
13500: PUSH
13501: LD_INT 105
13503: PUSH
13504: LD_INT 106
13506: PUSH
13507: LD_INT 107
13509: PUSH
13510: LD_INT 108
13512: PUSH
13513: LD_INT 109
13515: PUSH
13516: LD_INT 110
13518: PUSH
13519: LD_INT 111
13521: PUSH
13522: LD_INT 112
13524: PUSH
13525: LD_INT 113
13527: PUSH
13528: LD_INT 114
13530: PUSH
13531: LD_INT 116
13533: PUSH
13534: LD_INT 117
13536: PUSH
13537: LD_INT 118
13539: PUSH
13540: EMPTY
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: LIST
13558: PUSH
13559: EMPTY
13560: LIST
13561: LIST
13562: ST_TO_ADDR
13563: GO 14570
13565: LD_INT 15
13567: DOUBLE
13568: EQUAL
13569: IFTRUE 13573
13571: GO 13797
13573: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
13574: LD_ADDR_VAR 0 2
13578: PUSH
13579: LD_INT 1
13581: PUSH
13582: LD_INT 2
13584: PUSH
13585: LD_INT 3
13587: PUSH
13588: LD_INT 4
13590: PUSH
13591: LD_INT 5
13593: PUSH
13594: LD_INT 6
13596: PUSH
13597: LD_INT 7
13599: PUSH
13600: LD_INT 8
13602: PUSH
13603: LD_INT 9
13605: PUSH
13606: LD_INT 10
13608: PUSH
13609: LD_INT 11
13611: PUSH
13612: LD_INT 12
13614: PUSH
13615: LD_INT 13
13617: PUSH
13618: LD_INT 14
13620: PUSH
13621: LD_INT 15
13623: PUSH
13624: LD_INT 16
13626: PUSH
13627: LD_INT 17
13629: PUSH
13630: LD_INT 18
13632: PUSH
13633: LD_INT 19
13635: PUSH
13636: LD_INT 20
13638: PUSH
13639: LD_INT 21
13641: PUSH
13642: LD_INT 22
13644: PUSH
13645: LD_INT 23
13647: PUSH
13648: LD_INT 24
13650: PUSH
13651: LD_INT 25
13653: PUSH
13654: LD_INT 26
13656: PUSH
13657: LD_INT 27
13659: PUSH
13660: LD_INT 28
13662: PUSH
13663: LD_INT 29
13665: PUSH
13666: LD_INT 30
13668: PUSH
13669: LD_INT 31
13671: PUSH
13672: LD_INT 32
13674: PUSH
13675: LD_INT 33
13677: PUSH
13678: LD_INT 34
13680: PUSH
13681: LD_INT 36
13683: PUSH
13684: EMPTY
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: PUSH
13721: LD_INT 101
13723: PUSH
13724: LD_INT 102
13726: PUSH
13727: LD_INT 103
13729: PUSH
13730: LD_INT 104
13732: PUSH
13733: LD_INT 105
13735: PUSH
13736: LD_INT 106
13738: PUSH
13739: LD_INT 107
13741: PUSH
13742: LD_INT 108
13744: PUSH
13745: LD_INT 109
13747: PUSH
13748: LD_INT 110
13750: PUSH
13751: LD_INT 111
13753: PUSH
13754: LD_INT 112
13756: PUSH
13757: LD_INT 113
13759: PUSH
13760: LD_INT 114
13762: PUSH
13763: LD_INT 116
13765: PUSH
13766: LD_INT 117
13768: PUSH
13769: LD_INT 118
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: PUSH
13791: EMPTY
13792: LIST
13793: LIST
13794: ST_TO_ADDR
13795: GO 14570
13797: LD_INT 16
13799: DOUBLE
13800: EQUAL
13801: IFTRUE 13805
13803: GO 13941
13805: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
13806: LD_ADDR_VAR 0 2
13810: PUSH
13811: LD_INT 2
13813: PUSH
13814: LD_INT 4
13816: PUSH
13817: LD_INT 5
13819: PUSH
13820: LD_INT 7
13822: PUSH
13823: LD_INT 11
13825: PUSH
13826: LD_INT 12
13828: PUSH
13829: LD_INT 15
13831: PUSH
13832: LD_INT 16
13834: PUSH
13835: LD_INT 20
13837: PUSH
13838: LD_INT 21
13840: PUSH
13841: LD_INT 22
13843: PUSH
13844: LD_INT 23
13846: PUSH
13847: LD_INT 25
13849: PUSH
13850: LD_INT 26
13852: PUSH
13853: LD_INT 30
13855: PUSH
13856: LD_INT 31
13858: PUSH
13859: LD_INT 32
13861: PUSH
13862: LD_INT 33
13864: PUSH
13865: LD_INT 34
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: PUSH
13889: LD_INT 101
13891: PUSH
13892: LD_INT 102
13894: PUSH
13895: LD_INT 103
13897: PUSH
13898: LD_INT 106
13900: PUSH
13901: LD_INT 108
13903: PUSH
13904: LD_INT 112
13906: PUSH
13907: LD_INT 113
13909: PUSH
13910: LD_INT 114
13912: PUSH
13913: LD_INT 116
13915: PUSH
13916: LD_INT 117
13918: PUSH
13919: LD_INT 118
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: LIST
13933: LIST
13934: PUSH
13935: EMPTY
13936: LIST
13937: LIST
13938: ST_TO_ADDR
13939: GO 14570
13941: LD_INT 17
13943: DOUBLE
13944: EQUAL
13945: IFTRUE 13949
13947: GO 14173
13949: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
13950: LD_ADDR_VAR 0 2
13954: PUSH
13955: LD_INT 1
13957: PUSH
13958: LD_INT 2
13960: PUSH
13961: LD_INT 3
13963: PUSH
13964: LD_INT 4
13966: PUSH
13967: LD_INT 5
13969: PUSH
13970: LD_INT 6
13972: PUSH
13973: LD_INT 7
13975: PUSH
13976: LD_INT 8
13978: PUSH
13979: LD_INT 9
13981: PUSH
13982: LD_INT 10
13984: PUSH
13985: LD_INT 11
13987: PUSH
13988: LD_INT 12
13990: PUSH
13991: LD_INT 13
13993: PUSH
13994: LD_INT 14
13996: PUSH
13997: LD_INT 15
13999: PUSH
14000: LD_INT 16
14002: PUSH
14003: LD_INT 17
14005: PUSH
14006: LD_INT 18
14008: PUSH
14009: LD_INT 19
14011: PUSH
14012: LD_INT 20
14014: PUSH
14015: LD_INT 21
14017: PUSH
14018: LD_INT 22
14020: PUSH
14021: LD_INT 23
14023: PUSH
14024: LD_INT 24
14026: PUSH
14027: LD_INT 25
14029: PUSH
14030: LD_INT 26
14032: PUSH
14033: LD_INT 27
14035: PUSH
14036: LD_INT 28
14038: PUSH
14039: LD_INT 29
14041: PUSH
14042: LD_INT 30
14044: PUSH
14045: LD_INT 31
14047: PUSH
14048: LD_INT 32
14050: PUSH
14051: LD_INT 33
14053: PUSH
14054: LD_INT 34
14056: PUSH
14057: LD_INT 36
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: PUSH
14097: LD_INT 101
14099: PUSH
14100: LD_INT 102
14102: PUSH
14103: LD_INT 103
14105: PUSH
14106: LD_INT 104
14108: PUSH
14109: LD_INT 105
14111: PUSH
14112: LD_INT 106
14114: PUSH
14115: LD_INT 107
14117: PUSH
14118: LD_INT 108
14120: PUSH
14121: LD_INT 109
14123: PUSH
14124: LD_INT 110
14126: PUSH
14127: LD_INT 111
14129: PUSH
14130: LD_INT 112
14132: PUSH
14133: LD_INT 113
14135: PUSH
14136: LD_INT 114
14138: PUSH
14139: LD_INT 116
14141: PUSH
14142: LD_INT 117
14144: PUSH
14145: LD_INT 118
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: ST_TO_ADDR
14171: GO 14570
14173: LD_INT 18
14175: DOUBLE
14176: EQUAL
14177: IFTRUE 14181
14179: GO 14329
14181: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14182: LD_ADDR_VAR 0 2
14186: PUSH
14187: LD_INT 2
14189: PUSH
14190: LD_INT 4
14192: PUSH
14193: LD_INT 5
14195: PUSH
14196: LD_INT 7
14198: PUSH
14199: LD_INT 11
14201: PUSH
14202: LD_INT 12
14204: PUSH
14205: LD_INT 15
14207: PUSH
14208: LD_INT 16
14210: PUSH
14211: LD_INT 20
14213: PUSH
14214: LD_INT 21
14216: PUSH
14217: LD_INT 22
14219: PUSH
14220: LD_INT 23
14222: PUSH
14223: LD_INT 25
14225: PUSH
14226: LD_INT 26
14228: PUSH
14229: LD_INT 30
14231: PUSH
14232: LD_INT 31
14234: PUSH
14235: LD_INT 32
14237: PUSH
14238: LD_INT 33
14240: PUSH
14241: LD_INT 34
14243: PUSH
14244: LD_INT 35
14246: PUSH
14247: LD_INT 36
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: PUSH
14273: LD_INT 101
14275: PUSH
14276: LD_INT 102
14278: PUSH
14279: LD_INT 103
14281: PUSH
14282: LD_INT 106
14284: PUSH
14285: LD_INT 108
14287: PUSH
14288: LD_INT 112
14290: PUSH
14291: LD_INT 113
14293: PUSH
14294: LD_INT 114
14296: PUSH
14297: LD_INT 115
14299: PUSH
14300: LD_INT 116
14302: PUSH
14303: LD_INT 117
14305: PUSH
14306: LD_INT 118
14308: PUSH
14309: EMPTY
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: PUSH
14323: EMPTY
14324: LIST
14325: LIST
14326: ST_TO_ADDR
14327: GO 14570
14329: LD_INT 19
14331: DOUBLE
14332: EQUAL
14333: IFTRUE 14337
14335: GO 14569
14337: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
14338: LD_ADDR_VAR 0 2
14342: PUSH
14343: LD_INT 1
14345: PUSH
14346: LD_INT 2
14348: PUSH
14349: LD_INT 3
14351: PUSH
14352: LD_INT 4
14354: PUSH
14355: LD_INT 5
14357: PUSH
14358: LD_INT 6
14360: PUSH
14361: LD_INT 7
14363: PUSH
14364: LD_INT 8
14366: PUSH
14367: LD_INT 9
14369: PUSH
14370: LD_INT 10
14372: PUSH
14373: LD_INT 11
14375: PUSH
14376: LD_INT 12
14378: PUSH
14379: LD_INT 13
14381: PUSH
14382: LD_INT 14
14384: PUSH
14385: LD_INT 15
14387: PUSH
14388: LD_INT 16
14390: PUSH
14391: LD_INT 17
14393: PUSH
14394: LD_INT 18
14396: PUSH
14397: LD_INT 19
14399: PUSH
14400: LD_INT 20
14402: PUSH
14403: LD_INT 21
14405: PUSH
14406: LD_INT 22
14408: PUSH
14409: LD_INT 23
14411: PUSH
14412: LD_INT 24
14414: PUSH
14415: LD_INT 25
14417: PUSH
14418: LD_INT 26
14420: PUSH
14421: LD_INT 27
14423: PUSH
14424: LD_INT 28
14426: PUSH
14427: LD_INT 29
14429: PUSH
14430: LD_INT 30
14432: PUSH
14433: LD_INT 31
14435: PUSH
14436: LD_INT 32
14438: PUSH
14439: LD_INT 33
14441: PUSH
14442: LD_INT 34
14444: PUSH
14445: LD_INT 35
14447: PUSH
14448: LD_INT 36
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: PUSH
14489: LD_INT 101
14491: PUSH
14492: LD_INT 102
14494: PUSH
14495: LD_INT 103
14497: PUSH
14498: LD_INT 104
14500: PUSH
14501: LD_INT 105
14503: PUSH
14504: LD_INT 106
14506: PUSH
14507: LD_INT 107
14509: PUSH
14510: LD_INT 108
14512: PUSH
14513: LD_INT 109
14515: PUSH
14516: LD_INT 110
14518: PUSH
14519: LD_INT 111
14521: PUSH
14522: LD_INT 112
14524: PUSH
14525: LD_INT 113
14527: PUSH
14528: LD_INT 114
14530: PUSH
14531: LD_INT 115
14533: PUSH
14534: LD_INT 116
14536: PUSH
14537: LD_INT 117
14539: PUSH
14540: LD_INT 118
14542: PUSH
14543: EMPTY
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: ST_TO_ADDR
14567: GO 14570
14569: POP
// end else
14570: GO 14801
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
14572: LD_ADDR_VAR 0 2
14576: PUSH
14577: LD_INT 1
14579: PUSH
14580: LD_INT 2
14582: PUSH
14583: LD_INT 3
14585: PUSH
14586: LD_INT 4
14588: PUSH
14589: LD_INT 5
14591: PUSH
14592: LD_INT 6
14594: PUSH
14595: LD_INT 7
14597: PUSH
14598: LD_INT 8
14600: PUSH
14601: LD_INT 9
14603: PUSH
14604: LD_INT 10
14606: PUSH
14607: LD_INT 11
14609: PUSH
14610: LD_INT 12
14612: PUSH
14613: LD_INT 13
14615: PUSH
14616: LD_INT 14
14618: PUSH
14619: LD_INT 15
14621: PUSH
14622: LD_INT 16
14624: PUSH
14625: LD_INT 17
14627: PUSH
14628: LD_INT 18
14630: PUSH
14631: LD_INT 19
14633: PUSH
14634: LD_INT 20
14636: PUSH
14637: LD_INT 21
14639: PUSH
14640: LD_INT 22
14642: PUSH
14643: LD_INT 23
14645: PUSH
14646: LD_INT 24
14648: PUSH
14649: LD_INT 25
14651: PUSH
14652: LD_INT 26
14654: PUSH
14655: LD_INT 27
14657: PUSH
14658: LD_INT 28
14660: PUSH
14661: LD_INT 29
14663: PUSH
14664: LD_INT 30
14666: PUSH
14667: LD_INT 31
14669: PUSH
14670: LD_INT 32
14672: PUSH
14673: LD_INT 33
14675: PUSH
14676: LD_INT 34
14678: PUSH
14679: LD_INT 35
14681: PUSH
14682: LD_INT 36
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: PUSH
14723: LD_INT 101
14725: PUSH
14726: LD_INT 102
14728: PUSH
14729: LD_INT 103
14731: PUSH
14732: LD_INT 104
14734: PUSH
14735: LD_INT 105
14737: PUSH
14738: LD_INT 106
14740: PUSH
14741: LD_INT 107
14743: PUSH
14744: LD_INT 108
14746: PUSH
14747: LD_INT 109
14749: PUSH
14750: LD_INT 110
14752: PUSH
14753: LD_INT 111
14755: PUSH
14756: LD_INT 112
14758: PUSH
14759: LD_INT 113
14761: PUSH
14762: LD_INT 114
14764: PUSH
14765: LD_INT 115
14767: PUSH
14768: LD_INT 116
14770: PUSH
14771: LD_INT 117
14773: PUSH
14774: LD_INT 118
14776: PUSH
14777: EMPTY
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: LIST
14790: LIST
14791: LIST
14792: LIST
14793: LIST
14794: LIST
14795: LIST
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: ST_TO_ADDR
// if result then
14801: LD_VAR 0 2
14805: IFFALSE 15591
// begin normal :=  ;
14807: LD_ADDR_VAR 0 5
14811: PUSH
14812: LD_STRING 
14814: ST_TO_ADDR
// hardcore :=  ;
14815: LD_ADDR_VAR 0 6
14819: PUSH
14820: LD_STRING 
14822: ST_TO_ADDR
// active :=  ;
14823: LD_ADDR_VAR 0 7
14827: PUSH
14828: LD_STRING 
14830: ST_TO_ADDR
// for i = 1 to normalCounter do
14831: LD_ADDR_VAR 0 8
14835: PUSH
14836: DOUBLE
14837: LD_INT 1
14839: DEC
14840: ST_TO_ADDR
14841: LD_EXP 27
14845: PUSH
14846: FOR_TO
14847: IFFALSE 14948
// begin tmp := 0 ;
14849: LD_ADDR_VAR 0 3
14853: PUSH
14854: LD_STRING 0
14856: ST_TO_ADDR
// if result [ 1 ] then
14857: LD_VAR 0 2
14861: PUSH
14862: LD_INT 1
14864: ARRAY
14865: IFFALSE 14930
// if result [ 1 ] [ 1 ] = i then
14867: LD_VAR 0 2
14871: PUSH
14872: LD_INT 1
14874: ARRAY
14875: PUSH
14876: LD_INT 1
14878: ARRAY
14879: PUSH
14880: LD_VAR 0 8
14884: EQUAL
14885: IFFALSE 14930
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14887: LD_ADDR_VAR 0 2
14891: PUSH
14892: LD_VAR 0 2
14896: PPUSH
14897: LD_INT 1
14899: PPUSH
14900: LD_VAR 0 2
14904: PUSH
14905: LD_INT 1
14907: ARRAY
14908: PPUSH
14909: LD_INT 1
14911: PPUSH
14912: CALL_OW 3
14916: PPUSH
14917: CALL_OW 1
14921: ST_TO_ADDR
// tmp := 1 ;
14922: LD_ADDR_VAR 0 3
14926: PUSH
14927: LD_STRING 1
14929: ST_TO_ADDR
// end ; normal := normal & tmp ;
14930: LD_ADDR_VAR 0 5
14934: PUSH
14935: LD_VAR 0 5
14939: PUSH
14940: LD_VAR 0 3
14944: STR
14945: ST_TO_ADDR
// end ;
14946: GO 14846
14948: POP
14949: POP
// for i = 1 to hardcoreCounter do
14950: LD_ADDR_VAR 0 8
14954: PUSH
14955: DOUBLE
14956: LD_INT 1
14958: DEC
14959: ST_TO_ADDR
14960: LD_EXP 28
14964: PUSH
14965: FOR_TO
14966: IFFALSE 15071
// begin tmp := 0 ;
14968: LD_ADDR_VAR 0 3
14972: PUSH
14973: LD_STRING 0
14975: ST_TO_ADDR
// if result [ 2 ] then
14976: LD_VAR 0 2
14980: PUSH
14981: LD_INT 2
14983: ARRAY
14984: IFFALSE 15053
// if result [ 2 ] [ 1 ] = 100 + i then
14986: LD_VAR 0 2
14990: PUSH
14991: LD_INT 2
14993: ARRAY
14994: PUSH
14995: LD_INT 1
14997: ARRAY
14998: PUSH
14999: LD_INT 100
15001: PUSH
15002: LD_VAR 0 8
15006: PLUS
15007: EQUAL
15008: IFFALSE 15053
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15010: LD_ADDR_VAR 0 2
15014: PUSH
15015: LD_VAR 0 2
15019: PPUSH
15020: LD_INT 2
15022: PPUSH
15023: LD_VAR 0 2
15027: PUSH
15028: LD_INT 2
15030: ARRAY
15031: PPUSH
15032: LD_INT 1
15034: PPUSH
15035: CALL_OW 3
15039: PPUSH
15040: CALL_OW 1
15044: ST_TO_ADDR
// tmp := 1 ;
15045: LD_ADDR_VAR 0 3
15049: PUSH
15050: LD_STRING 1
15052: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15053: LD_ADDR_VAR 0 6
15057: PUSH
15058: LD_VAR 0 6
15062: PUSH
15063: LD_VAR 0 3
15067: STR
15068: ST_TO_ADDR
// end ;
15069: GO 14965
15071: POP
15072: POP
// if isGameLoad then
15073: LD_VAR 0 1
15077: IFFALSE 15552
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15079: LD_ADDR_VAR 0 4
15083: PUSH
15084: LD_EXP 31
15088: PUSH
15089: LD_EXP 30
15093: PUSH
15094: LD_EXP 32
15098: PUSH
15099: LD_EXP 29
15103: PUSH
15104: LD_EXP 33
15108: PUSH
15109: LD_EXP 34
15113: PUSH
15114: LD_EXP 35
15118: PUSH
15119: LD_EXP 36
15123: PUSH
15124: LD_EXP 37
15128: PUSH
15129: LD_EXP 38
15133: PUSH
15134: LD_EXP 39
15138: PUSH
15139: LD_EXP 40
15143: PUSH
15144: LD_EXP 41
15148: PUSH
15149: LD_EXP 42
15153: PUSH
15154: LD_EXP 50
15158: PUSH
15159: LD_EXP 51
15163: PUSH
15164: LD_EXP 52
15168: PUSH
15169: LD_EXP 53
15173: PUSH
15174: LD_EXP 55
15178: PUSH
15179: LD_EXP 56
15183: PUSH
15184: LD_EXP 57
15188: PUSH
15189: LD_EXP 60
15193: PUSH
15194: LD_EXP 62
15198: PUSH
15199: LD_EXP 63
15203: PUSH
15204: LD_EXP 64
15208: PUSH
15209: LD_EXP 66
15213: PUSH
15214: LD_EXP 67
15218: PUSH
15219: LD_EXP 70
15223: PUSH
15224: LD_EXP 71
15228: PUSH
15229: LD_EXP 72
15233: PUSH
15234: LD_EXP 73
15238: PUSH
15239: LD_EXP 74
15243: PUSH
15244: LD_EXP 75
15248: PUSH
15249: LD_EXP 76
15253: PUSH
15254: LD_EXP 77
15258: PUSH
15259: LD_EXP 78
15263: PUSH
15264: LD_EXP 43
15268: PUSH
15269: LD_EXP 44
15273: PUSH
15274: LD_EXP 47
15278: PUSH
15279: LD_EXP 48
15283: PUSH
15284: LD_EXP 49
15288: PUSH
15289: LD_EXP 45
15293: PUSH
15294: LD_EXP 46
15298: PUSH
15299: LD_EXP 54
15303: PUSH
15304: LD_EXP 58
15308: PUSH
15309: LD_EXP 59
15313: PUSH
15314: LD_EXP 61
15318: PUSH
15319: LD_EXP 65
15323: PUSH
15324: LD_EXP 68
15328: PUSH
15329: LD_EXP 69
15333: PUSH
15334: LD_EXP 79
15338: PUSH
15339: LD_EXP 80
15343: PUSH
15344: LD_EXP 81
15348: PUSH
15349: LD_EXP 82
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: ST_TO_ADDR
// tmp :=  ;
15410: LD_ADDR_VAR 0 3
15414: PUSH
15415: LD_STRING 
15417: ST_TO_ADDR
// for i = 1 to normalCounter do
15418: LD_ADDR_VAR 0 8
15422: PUSH
15423: DOUBLE
15424: LD_INT 1
15426: DEC
15427: ST_TO_ADDR
15428: LD_EXP 27
15432: PUSH
15433: FOR_TO
15434: IFFALSE 15470
// begin if flags [ i ] then
15436: LD_VAR 0 4
15440: PUSH
15441: LD_VAR 0 8
15445: ARRAY
15446: IFFALSE 15468
// tmp := tmp & i & ; ;
15448: LD_ADDR_VAR 0 3
15452: PUSH
15453: LD_VAR 0 3
15457: PUSH
15458: LD_VAR 0 8
15462: STR
15463: PUSH
15464: LD_STRING ;
15466: STR
15467: ST_TO_ADDR
// end ;
15468: GO 15433
15470: POP
15471: POP
// for i = 1 to hardcoreCounter do
15472: LD_ADDR_VAR 0 8
15476: PUSH
15477: DOUBLE
15478: LD_INT 1
15480: DEC
15481: ST_TO_ADDR
15482: LD_EXP 28
15486: PUSH
15487: FOR_TO
15488: IFFALSE 15534
// begin if flags [ normalCounter + i ] then
15490: LD_VAR 0 4
15494: PUSH
15495: LD_EXP 27
15499: PUSH
15500: LD_VAR 0 8
15504: PLUS
15505: ARRAY
15506: IFFALSE 15532
// tmp := tmp & ( 100 + i ) & ; ;
15508: LD_ADDR_VAR 0 3
15512: PUSH
15513: LD_VAR 0 3
15517: PUSH
15518: LD_INT 100
15520: PUSH
15521: LD_VAR 0 8
15525: PLUS
15526: STR
15527: PUSH
15528: LD_STRING ;
15530: STR
15531: ST_TO_ADDR
// end ;
15532: GO 15487
15534: POP
15535: POP
// if tmp then
15536: LD_VAR 0 3
15540: IFFALSE 15552
// active := tmp ;
15542: LD_ADDR_VAR 0 7
15546: PUSH
15547: LD_VAR 0 3
15551: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
15552: LD_STRING getStreamItemsFromMission("
15554: PUSH
15555: LD_VAR 0 5
15559: STR
15560: PUSH
15561: LD_STRING ","
15563: STR
15564: PUSH
15565: LD_VAR 0 6
15569: STR
15570: PUSH
15571: LD_STRING ","
15573: STR
15574: PUSH
15575: LD_VAR 0 7
15579: STR
15580: PUSH
15581: LD_STRING ")
15583: STR
15584: PPUSH
15585: CALL_OW 559
// end else
15589: GO 15598
// ToLua ( getStreamItemsFromMission("","","") ) ;
15591: LD_STRING getStreamItemsFromMission("","","")
15593: PPUSH
15594: CALL_OW 559
// end ;
15598: LD_VAR 0 2
15602: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15603: LD_EXP 26
15607: IFFALSE 15615
15609: PUSH
15610: LD_EXP 31
15614: AND
15615: IFFALSE 15739
15617: GO 15619
15619: DISABLE
15620: LD_INT 0
15622: PPUSH
15623: PPUSH
// begin enable ;
15624: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15625: LD_ADDR_VAR 0 2
15629: PUSH
15630: LD_INT 22
15632: PUSH
15633: LD_OWVAR 2
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: PUSH
15642: LD_INT 2
15644: PUSH
15645: LD_INT 34
15647: PUSH
15648: LD_INT 7
15650: PUSH
15651: EMPTY
15652: LIST
15653: LIST
15654: PUSH
15655: LD_INT 34
15657: PUSH
15658: LD_INT 45
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: PUSH
15665: LD_INT 34
15667: PUSH
15668: LD_INT 28
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: PUSH
15675: LD_INT 34
15677: PUSH
15678: LD_INT 47
15680: PUSH
15681: EMPTY
15682: LIST
15683: LIST
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: LIST
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: PPUSH
15696: CALL_OW 69
15700: ST_TO_ADDR
// if not tmp then
15701: LD_VAR 0 2
15705: NOT
15706: IFFALSE 15710
// exit ;
15708: GO 15739
// for i in tmp do
15710: LD_ADDR_VAR 0 1
15714: PUSH
15715: LD_VAR 0 2
15719: PUSH
15720: FOR_IN
15721: IFFALSE 15737
// begin SetLives ( i , 0 ) ;
15723: LD_VAR 0 1
15727: PPUSH
15728: LD_INT 0
15730: PPUSH
15731: CALL_OW 234
// end ;
15735: GO 15720
15737: POP
15738: POP
// end ;
15739: PPOPN 2
15741: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15742: LD_EXP 26
15746: IFFALSE 15754
15748: PUSH
15749: LD_EXP 32
15753: AND
15754: IFFALSE 15838
15756: GO 15758
15758: DISABLE
15759: LD_INT 0
15761: PPUSH
15762: PPUSH
// begin enable ;
15763: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15764: LD_ADDR_VAR 0 2
15768: PUSH
15769: LD_INT 22
15771: PUSH
15772: LD_OWVAR 2
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: PUSH
15781: LD_INT 32
15783: PUSH
15784: LD_INT 3
15786: PUSH
15787: EMPTY
15788: LIST
15789: LIST
15790: PUSH
15791: EMPTY
15792: LIST
15793: LIST
15794: PPUSH
15795: CALL_OW 69
15799: ST_TO_ADDR
// if not tmp then
15800: LD_VAR 0 2
15804: NOT
15805: IFFALSE 15809
// exit ;
15807: GO 15838
// for i in tmp do
15809: LD_ADDR_VAR 0 1
15813: PUSH
15814: LD_VAR 0 2
15818: PUSH
15819: FOR_IN
15820: IFFALSE 15836
// begin SetLives ( i , 0 ) ;
15822: LD_VAR 0 1
15826: PPUSH
15827: LD_INT 0
15829: PPUSH
15830: CALL_OW 234
// end ;
15834: GO 15819
15836: POP
15837: POP
// end ;
15838: PPOPN 2
15840: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15841: LD_EXP 26
15845: IFFALSE 15853
15847: PUSH
15848: LD_EXP 29
15852: AND
15853: IFFALSE 15946
15855: GO 15857
15857: DISABLE
15858: LD_INT 0
15860: PPUSH
// begin enable ;
15861: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15862: LD_ADDR_VAR 0 1
15866: PUSH
15867: LD_INT 22
15869: PUSH
15870: LD_OWVAR 2
15874: PUSH
15875: EMPTY
15876: LIST
15877: LIST
15878: PUSH
15879: LD_INT 2
15881: PUSH
15882: LD_INT 25
15884: PUSH
15885: LD_INT 5
15887: PUSH
15888: EMPTY
15889: LIST
15890: LIST
15891: PUSH
15892: LD_INT 25
15894: PUSH
15895: LD_INT 9
15897: PUSH
15898: EMPTY
15899: LIST
15900: LIST
15901: PUSH
15902: LD_INT 25
15904: PUSH
15905: LD_INT 8
15907: PUSH
15908: EMPTY
15909: LIST
15910: LIST
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: PPUSH
15922: CALL_OW 69
15926: PUSH
15927: FOR_IN
15928: IFFALSE 15944
// begin SetClass ( i , 1 ) ;
15930: LD_VAR 0 1
15934: PPUSH
15935: LD_INT 1
15937: PPUSH
15938: CALL_OW 336
// end ;
15942: GO 15927
15944: POP
15945: POP
// end ;
15946: PPOPN 1
15948: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15949: LD_EXP 26
15953: IFFALSE 15961
15955: PUSH
15956: LD_EXP 30
15960: AND
15961: IFFALSE 15973
15963: PUSH
15964: LD_OWVAR 65
15968: PUSH
15969: LD_INT 7
15971: LESS
15972: AND
15973: IFFALSE 15987
15975: GO 15977
15977: DISABLE
// begin enable ;
15978: ENABLE
// game_speed := 7 ;
15979: LD_ADDR_OWVAR 65
15983: PUSH
15984: LD_INT 7
15986: ST_TO_ADDR
// end ;
15987: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15988: LD_EXP 26
15992: IFFALSE 16000
15994: PUSH
15995: LD_EXP 33
15999: AND
16000: IFFALSE 16202
16002: GO 16004
16004: DISABLE
16005: LD_INT 0
16007: PPUSH
16008: PPUSH
16009: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16010: LD_ADDR_VAR 0 3
16014: PUSH
16015: LD_INT 81
16017: PUSH
16018: LD_OWVAR 2
16022: PUSH
16023: EMPTY
16024: LIST
16025: LIST
16026: PUSH
16027: LD_INT 21
16029: PUSH
16030: LD_INT 1
16032: PUSH
16033: EMPTY
16034: LIST
16035: LIST
16036: PUSH
16037: EMPTY
16038: LIST
16039: LIST
16040: PPUSH
16041: CALL_OW 69
16045: ST_TO_ADDR
// if not tmp then
16046: LD_VAR 0 3
16050: NOT
16051: IFFALSE 16055
// exit ;
16053: GO 16202
// if tmp > 5 then
16055: LD_VAR 0 3
16059: PUSH
16060: LD_INT 5
16062: GREATER
16063: IFFALSE 16075
// k := 5 else
16065: LD_ADDR_VAR 0 2
16069: PUSH
16070: LD_INT 5
16072: ST_TO_ADDR
16073: GO 16085
// k := tmp ;
16075: LD_ADDR_VAR 0 2
16079: PUSH
16080: LD_VAR 0 3
16084: ST_TO_ADDR
// for i := 1 to k do
16085: LD_ADDR_VAR 0 1
16089: PUSH
16090: DOUBLE
16091: LD_INT 1
16093: DEC
16094: ST_TO_ADDR
16095: LD_VAR 0 2
16099: PUSH
16100: FOR_TO
16101: IFFALSE 16200
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16103: LD_VAR 0 3
16107: PUSH
16108: LD_VAR 0 1
16112: ARRAY
16113: PPUSH
16114: LD_VAR 0 1
16118: PUSH
16119: LD_INT 4
16121: MOD
16122: PUSH
16123: LD_INT 1
16125: PLUS
16126: PPUSH
16127: CALL_OW 259
16131: PUSH
16132: LD_INT 10
16134: LESS
16135: IFFALSE 16198
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16137: LD_VAR 0 3
16141: PUSH
16142: LD_VAR 0 1
16146: ARRAY
16147: PPUSH
16148: LD_VAR 0 1
16152: PUSH
16153: LD_INT 4
16155: MOD
16156: PUSH
16157: LD_INT 1
16159: PLUS
16160: PPUSH
16161: LD_VAR 0 3
16165: PUSH
16166: LD_VAR 0 1
16170: ARRAY
16171: PPUSH
16172: LD_VAR 0 1
16176: PUSH
16177: LD_INT 4
16179: MOD
16180: PUSH
16181: LD_INT 1
16183: PLUS
16184: PPUSH
16185: CALL_OW 259
16189: PUSH
16190: LD_INT 1
16192: PLUS
16193: PPUSH
16194: CALL_OW 237
16198: GO 16100
16200: POP
16201: POP
// end ;
16202: PPOPN 3
16204: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16205: LD_EXP 26
16209: IFFALSE 16217
16211: PUSH
16212: LD_EXP 34
16216: AND
16217: IFFALSE 16237
16219: GO 16221
16221: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16222: LD_INT 4
16224: PPUSH
16225: LD_OWVAR 2
16229: PPUSH
16230: LD_INT 0
16232: PPUSH
16233: CALL_OW 324
16237: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16238: LD_EXP 26
16242: IFFALSE 16250
16244: PUSH
16245: LD_EXP 63
16249: AND
16250: IFFALSE 16270
16252: GO 16254
16254: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16255: LD_INT 19
16257: PPUSH
16258: LD_OWVAR 2
16262: PPUSH
16263: LD_INT 0
16265: PPUSH
16266: CALL_OW 324
16270: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16271: LD_EXP 26
16275: IFFALSE 16283
16277: PUSH
16278: LD_EXP 35
16282: AND
16283: IFFALSE 16385
16285: GO 16287
16287: DISABLE
16288: LD_INT 0
16290: PPUSH
16291: PPUSH
// begin enable ;
16292: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16293: LD_ADDR_VAR 0 2
16297: PUSH
16298: LD_INT 22
16300: PUSH
16301: LD_OWVAR 2
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: LD_INT 2
16312: PUSH
16313: LD_INT 34
16315: PUSH
16316: LD_INT 11
16318: PUSH
16319: EMPTY
16320: LIST
16321: LIST
16322: PUSH
16323: LD_INT 34
16325: PUSH
16326: LD_INT 30
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: PUSH
16333: EMPTY
16334: LIST
16335: LIST
16336: LIST
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: PPUSH
16342: CALL_OW 69
16346: ST_TO_ADDR
// if not tmp then
16347: LD_VAR 0 2
16351: NOT
16352: IFFALSE 16356
// exit ;
16354: GO 16385
// for i in tmp do
16356: LD_ADDR_VAR 0 1
16360: PUSH
16361: LD_VAR 0 2
16365: PUSH
16366: FOR_IN
16367: IFFALSE 16383
// begin SetLives ( i , 0 ) ;
16369: LD_VAR 0 1
16373: PPUSH
16374: LD_INT 0
16376: PPUSH
16377: CALL_OW 234
// end ;
16381: GO 16366
16383: POP
16384: POP
// end ;
16385: PPOPN 2
16387: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16388: LD_EXP 26
16392: IFFALSE 16400
16394: PUSH
16395: LD_EXP 36
16399: AND
16400: IFFALSE 16420
16402: GO 16404
16404: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16405: LD_INT 32
16407: PPUSH
16408: LD_OWVAR 2
16412: PPUSH
16413: LD_INT 0
16415: PPUSH
16416: CALL_OW 324
16420: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16421: LD_EXP 26
16425: IFFALSE 16433
16427: PUSH
16428: LD_EXP 37
16432: AND
16433: IFFALSE 16616
16435: GO 16437
16437: DISABLE
16438: LD_INT 0
16440: PPUSH
16441: PPUSH
16442: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16443: LD_ADDR_VAR 0 2
16447: PUSH
16448: LD_INT 22
16450: PUSH
16451: LD_OWVAR 2
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: PUSH
16460: LD_INT 33
16462: PUSH
16463: LD_INT 3
16465: PUSH
16466: EMPTY
16467: LIST
16468: LIST
16469: PUSH
16470: EMPTY
16471: LIST
16472: LIST
16473: PPUSH
16474: CALL_OW 69
16478: ST_TO_ADDR
// if not tmp then
16479: LD_VAR 0 2
16483: NOT
16484: IFFALSE 16488
// exit ;
16486: GO 16616
// side := 0 ;
16488: LD_ADDR_VAR 0 3
16492: PUSH
16493: LD_INT 0
16495: ST_TO_ADDR
// for i := 1 to 8 do
16496: LD_ADDR_VAR 0 1
16500: PUSH
16501: DOUBLE
16502: LD_INT 1
16504: DEC
16505: ST_TO_ADDR
16506: LD_INT 8
16508: PUSH
16509: FOR_TO
16510: IFFALSE 16560
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16512: LD_OWVAR 2
16516: PUSH
16517: LD_VAR 0 1
16521: NONEQUAL
16522: IFFALSE 16544
16524: PUSH
16525: LD_OWVAR 2
16529: PPUSH
16530: LD_VAR 0 1
16534: PPUSH
16535: CALL_OW 81
16539: PUSH
16540: LD_INT 2
16542: EQUAL
16543: AND
16544: IFFALSE 16558
// begin side := i ;
16546: LD_ADDR_VAR 0 3
16550: PUSH
16551: LD_VAR 0 1
16555: ST_TO_ADDR
// break ;
16556: GO 16560
// end ;
16558: GO 16509
16560: POP
16561: POP
// if not side then
16562: LD_VAR 0 3
16566: NOT
16567: IFFALSE 16571
// exit ;
16569: GO 16616
// for i := 1 to tmp do
16571: LD_ADDR_VAR 0 1
16575: PUSH
16576: DOUBLE
16577: LD_INT 1
16579: DEC
16580: ST_TO_ADDR
16581: LD_VAR 0 2
16585: PUSH
16586: FOR_TO
16587: IFFALSE 16614
// if Prob ( 60 ) then
16589: LD_INT 60
16591: PPUSH
16592: CALL_OW 13
16596: IFFALSE 16612
// SetSide ( i , side ) ;
16598: LD_VAR 0 1
16602: PPUSH
16603: LD_VAR 0 3
16607: PPUSH
16608: CALL_OW 235
16612: GO 16586
16614: POP
16615: POP
// end ;
16616: PPOPN 3
16618: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16619: LD_EXP 26
16623: IFFALSE 16631
16625: PUSH
16626: LD_EXP 39
16630: AND
16631: IFFALSE 16750
16633: GO 16635
16635: DISABLE
16636: LD_INT 0
16638: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16639: LD_ADDR_VAR 0 1
16643: PUSH
16644: LD_INT 22
16646: PUSH
16647: LD_OWVAR 2
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: LD_INT 21
16658: PUSH
16659: LD_INT 1
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PUSH
16666: LD_INT 3
16668: PUSH
16669: LD_INT 23
16671: PUSH
16672: LD_INT 0
16674: PUSH
16675: EMPTY
16676: LIST
16677: LIST
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: LIST
16687: PPUSH
16688: CALL_OW 69
16692: PUSH
16693: FOR_IN
16694: IFFALSE 16748
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16696: LD_VAR 0 1
16700: PPUSH
16701: CALL_OW 257
16705: PUSH
16706: LD_INT 1
16708: PUSH
16709: LD_INT 2
16711: PUSH
16712: LD_INT 3
16714: PUSH
16715: LD_INT 4
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: IN
16724: IFFALSE 16746
// SetClass ( un , rand ( 1 , 4 ) ) ;
16726: LD_VAR 0 1
16730: PPUSH
16731: LD_INT 1
16733: PPUSH
16734: LD_INT 4
16736: PPUSH
16737: CALL_OW 12
16741: PPUSH
16742: CALL_OW 336
16746: GO 16693
16748: POP
16749: POP
// end ;
16750: PPOPN 1
16752: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16753: LD_EXP 26
16757: IFFALSE 16765
16759: PUSH
16760: LD_EXP 38
16764: AND
16765: IFFALSE 16844
16767: GO 16769
16769: DISABLE
16770: LD_INT 0
16772: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16773: LD_ADDR_VAR 0 1
16777: PUSH
16778: LD_INT 22
16780: PUSH
16781: LD_OWVAR 2
16785: PUSH
16786: EMPTY
16787: LIST
16788: LIST
16789: PUSH
16790: LD_INT 21
16792: PUSH
16793: LD_INT 3
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: PUSH
16800: EMPTY
16801: LIST
16802: LIST
16803: PPUSH
16804: CALL_OW 69
16808: ST_TO_ADDR
// if not tmp then
16809: LD_VAR 0 1
16813: NOT
16814: IFFALSE 16818
// exit ;
16816: GO 16844
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16818: LD_VAR 0 1
16822: PUSH
16823: LD_INT 1
16825: PPUSH
16826: LD_VAR 0 1
16830: PPUSH
16831: CALL_OW 12
16835: ARRAY
16836: PPUSH
16837: LD_INT 100
16839: PPUSH
16840: CALL_OW 234
// end ;
16844: PPOPN 1
16846: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16847: LD_EXP 26
16851: IFFALSE 16859
16853: PUSH
16854: LD_EXP 40
16858: AND
16859: IFFALSE 16957
16861: GO 16863
16863: DISABLE
16864: LD_INT 0
16866: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16867: LD_ADDR_VAR 0 1
16871: PUSH
16872: LD_INT 22
16874: PUSH
16875: LD_OWVAR 2
16879: PUSH
16880: EMPTY
16881: LIST
16882: LIST
16883: PUSH
16884: LD_INT 21
16886: PUSH
16887: LD_INT 1
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: PPUSH
16898: CALL_OW 69
16902: ST_TO_ADDR
// if not tmp then
16903: LD_VAR 0 1
16907: NOT
16908: IFFALSE 16912
// exit ;
16910: GO 16957
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16912: LD_VAR 0 1
16916: PUSH
16917: LD_INT 1
16919: PPUSH
16920: LD_VAR 0 1
16924: PPUSH
16925: CALL_OW 12
16929: ARRAY
16930: PPUSH
16931: LD_INT 1
16933: PPUSH
16934: LD_INT 4
16936: PPUSH
16937: CALL_OW 12
16941: PPUSH
16942: LD_INT 3000
16944: PPUSH
16945: LD_INT 9000
16947: PPUSH
16948: CALL_OW 12
16952: PPUSH
16953: CALL_OW 492
// end ;
16957: PPOPN 1
16959: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16960: LD_EXP 26
16964: IFFALSE 16972
16966: PUSH
16967: LD_EXP 41
16971: AND
16972: IFFALSE 16992
16974: GO 16976
16976: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16977: LD_INT 1
16979: PPUSH
16980: LD_OWVAR 2
16984: PPUSH
16985: LD_INT 0
16987: PPUSH
16988: CALL_OW 324
16992: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16993: LD_EXP 26
16997: IFFALSE 17005
16999: PUSH
17000: LD_EXP 42
17004: AND
17005: IFFALSE 17088
17007: GO 17009
17009: DISABLE
17010: LD_INT 0
17012: PPUSH
17013: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17014: LD_ADDR_VAR 0 2
17018: PUSH
17019: LD_INT 22
17021: PUSH
17022: LD_OWVAR 2
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: PUSH
17031: LD_INT 21
17033: PUSH
17034: LD_INT 3
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PUSH
17041: EMPTY
17042: LIST
17043: LIST
17044: PPUSH
17045: CALL_OW 69
17049: ST_TO_ADDR
// if not tmp then
17050: LD_VAR 0 2
17054: NOT
17055: IFFALSE 17059
// exit ;
17057: GO 17088
// for i in tmp do
17059: LD_ADDR_VAR 0 1
17063: PUSH
17064: LD_VAR 0 2
17068: PUSH
17069: FOR_IN
17070: IFFALSE 17086
// SetBLevel ( i , 10 ) ;
17072: LD_VAR 0 1
17076: PPUSH
17077: LD_INT 10
17079: PPUSH
17080: CALL_OW 241
17084: GO 17069
17086: POP
17087: POP
// end ;
17088: PPOPN 2
17090: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17091: LD_EXP 26
17095: IFFALSE 17103
17097: PUSH
17098: LD_EXP 43
17102: AND
17103: IFFALSE 17214
17105: GO 17107
17107: DISABLE
17108: LD_INT 0
17110: PPUSH
17111: PPUSH
17112: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17113: LD_ADDR_VAR 0 3
17117: PUSH
17118: LD_INT 22
17120: PUSH
17121: LD_OWVAR 2
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: PUSH
17130: LD_INT 25
17132: PUSH
17133: LD_INT 1
17135: PUSH
17136: EMPTY
17137: LIST
17138: LIST
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: PPUSH
17144: CALL_OW 69
17148: ST_TO_ADDR
// if not tmp then
17149: LD_VAR 0 3
17153: NOT
17154: IFFALSE 17158
// exit ;
17156: GO 17214
// un := tmp [ rand ( 1 , tmp ) ] ;
17158: LD_ADDR_VAR 0 2
17162: PUSH
17163: LD_VAR 0 3
17167: PUSH
17168: LD_INT 1
17170: PPUSH
17171: LD_VAR 0 3
17175: PPUSH
17176: CALL_OW 12
17180: ARRAY
17181: ST_TO_ADDR
// if Crawls ( un ) then
17182: LD_VAR 0 2
17186: PPUSH
17187: CALL_OW 318
17191: IFFALSE 17202
// ComWalk ( un ) ;
17193: LD_VAR 0 2
17197: PPUSH
17198: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17202: LD_VAR 0 2
17206: PPUSH
17207: LD_INT 5
17209: PPUSH
17210: CALL_OW 336
// end ;
17214: PPOPN 3
17216: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17217: LD_EXP 26
17221: IFFALSE 17229
17223: PUSH
17224: LD_EXP 44
17228: AND
17229: IFFALSE 17241
17231: PUSH
17232: LD_OWVAR 67
17236: PUSH
17237: LD_INT 4
17239: LESS
17240: AND
17241: IFFALSE 17260
17243: GO 17245
17245: DISABLE
// begin Difficulty := Difficulty + 1 ;
17246: LD_ADDR_OWVAR 67
17250: PUSH
17251: LD_OWVAR 67
17255: PUSH
17256: LD_INT 1
17258: PLUS
17259: ST_TO_ADDR
// end ;
17260: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17261: LD_EXP 26
17265: IFFALSE 17273
17267: PUSH
17268: LD_EXP 45
17272: AND
17273: IFFALSE 17376
17275: GO 17277
17277: DISABLE
17278: LD_INT 0
17280: PPUSH
// begin for i := 1 to 5 do
17281: LD_ADDR_VAR 0 1
17285: PUSH
17286: DOUBLE
17287: LD_INT 1
17289: DEC
17290: ST_TO_ADDR
17291: LD_INT 5
17293: PUSH
17294: FOR_TO
17295: IFFALSE 17374
// begin uc_nation := nation_nature ;
17297: LD_ADDR_OWVAR 21
17301: PUSH
17302: LD_INT 0
17304: ST_TO_ADDR
// uc_side := 0 ;
17305: LD_ADDR_OWVAR 20
17309: PUSH
17310: LD_INT 0
17312: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17313: LD_ADDR_OWVAR 29
17317: PUSH
17318: LD_INT 12
17320: PUSH
17321: LD_INT 12
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: ST_TO_ADDR
// hc_agressivity := 20 ;
17328: LD_ADDR_OWVAR 35
17332: PUSH
17333: LD_INT 20
17335: ST_TO_ADDR
// hc_class := class_tiger ;
17336: LD_ADDR_OWVAR 28
17340: PUSH
17341: LD_INT 14
17343: ST_TO_ADDR
// hc_gallery :=  ;
17344: LD_ADDR_OWVAR 33
17348: PUSH
17349: LD_STRING 
17351: ST_TO_ADDR
// hc_name :=  ;
17352: LD_ADDR_OWVAR 26
17356: PUSH
17357: LD_STRING 
17359: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17360: CALL_OW 44
17364: PPUSH
17365: LD_INT 0
17367: PPUSH
17368: CALL_OW 51
// end ;
17372: GO 17294
17374: POP
17375: POP
// end ;
17376: PPOPN 1
17378: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17379: LD_EXP 26
17383: IFFALSE 17391
17385: PUSH
17386: LD_EXP 46
17390: AND
17391: IFFALSE 17400
17393: GO 17395
17395: DISABLE
// StreamSibBomb ;
17396: CALL 17401 0 0
17400: END
// export function StreamSibBomb ; var i , x , y ; begin
17401: LD_INT 0
17403: PPUSH
17404: PPUSH
17405: PPUSH
17406: PPUSH
// result := false ;
17407: LD_ADDR_VAR 0 1
17411: PUSH
17412: LD_INT 0
17414: ST_TO_ADDR
// for i := 1 to 16 do
17415: LD_ADDR_VAR 0 2
17419: PUSH
17420: DOUBLE
17421: LD_INT 1
17423: DEC
17424: ST_TO_ADDR
17425: LD_INT 16
17427: PUSH
17428: FOR_TO
17429: IFFALSE 17628
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17431: LD_ADDR_VAR 0 3
17435: PUSH
17436: LD_INT 10
17438: PUSH
17439: LD_INT 20
17441: PUSH
17442: LD_INT 30
17444: PUSH
17445: LD_INT 40
17447: PUSH
17448: LD_INT 50
17450: PUSH
17451: LD_INT 60
17453: PUSH
17454: LD_INT 70
17456: PUSH
17457: LD_INT 80
17459: PUSH
17460: LD_INT 90
17462: PUSH
17463: LD_INT 100
17465: PUSH
17466: LD_INT 110
17468: PUSH
17469: LD_INT 120
17471: PUSH
17472: LD_INT 130
17474: PUSH
17475: LD_INT 140
17477: PUSH
17478: LD_INT 150
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: PUSH
17498: LD_INT 1
17500: PPUSH
17501: LD_INT 15
17503: PPUSH
17504: CALL_OW 12
17508: ARRAY
17509: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17510: LD_ADDR_VAR 0 4
17514: PUSH
17515: LD_INT 10
17517: PUSH
17518: LD_INT 20
17520: PUSH
17521: LD_INT 30
17523: PUSH
17524: LD_INT 40
17526: PUSH
17527: LD_INT 50
17529: PUSH
17530: LD_INT 60
17532: PUSH
17533: LD_INT 70
17535: PUSH
17536: LD_INT 80
17538: PUSH
17539: LD_INT 90
17541: PUSH
17542: LD_INT 100
17544: PUSH
17545: LD_INT 110
17547: PUSH
17548: LD_INT 120
17550: PUSH
17551: LD_INT 130
17553: PUSH
17554: LD_INT 140
17556: PUSH
17557: LD_INT 150
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: PUSH
17577: LD_INT 1
17579: PPUSH
17580: LD_INT 15
17582: PPUSH
17583: CALL_OW 12
17587: ARRAY
17588: ST_TO_ADDR
// if ValidHex ( x , y ) then
17589: LD_VAR 0 3
17593: PPUSH
17594: LD_VAR 0 4
17598: PPUSH
17599: CALL_OW 488
17603: IFFALSE 17626
// begin result := [ x , y ] ;
17605: LD_ADDR_VAR 0 1
17609: PUSH
17610: LD_VAR 0 3
17614: PUSH
17615: LD_VAR 0 4
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: ST_TO_ADDR
// break ;
17624: GO 17628
// end ; end ;
17626: GO 17428
17628: POP
17629: POP
// if result then
17630: LD_VAR 0 1
17634: IFFALSE 17694
// begin ToLua ( playSibBomb() ) ;
17636: LD_STRING playSibBomb()
17638: PPUSH
17639: CALL_OW 559
// wait ( 0 0$14 ) ;
17643: LD_INT 490
17645: PPUSH
17646: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17650: LD_VAR 0 1
17654: PUSH
17655: LD_INT 1
17657: ARRAY
17658: PPUSH
17659: LD_VAR 0 1
17663: PUSH
17664: LD_INT 2
17666: ARRAY
17667: PPUSH
17668: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17672: LD_VAR 0 1
17676: PUSH
17677: LD_INT 1
17679: ARRAY
17680: PPUSH
17681: LD_VAR 0 1
17685: PUSH
17686: LD_INT 2
17688: ARRAY
17689: PPUSH
17690: CALL_OW 429
// end ; end ;
17694: LD_VAR 0 1
17698: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17699: LD_EXP 26
17703: IFFALSE 17711
17705: PUSH
17706: LD_EXP 48
17710: AND
17711: IFFALSE 17723
17713: GO 17715
17715: DISABLE
// YouLost (  ) ;
17716: LD_STRING 
17718: PPUSH
17719: CALL_OW 104
17723: END
// every 0 0$1 trigger StreamModeActive and sFog do
17724: LD_EXP 26
17728: IFFALSE 17736
17730: PUSH
17731: LD_EXP 47
17735: AND
17736: IFFALSE 17750
17738: GO 17740
17740: DISABLE
// FogOff ( your_side ) ;
17741: LD_OWVAR 2
17745: PPUSH
17746: CALL_OW 344
17750: END
// every 0 0$1 trigger StreamModeActive and sSun do
17751: LD_EXP 26
17755: IFFALSE 17763
17757: PUSH
17758: LD_EXP 49
17762: AND
17763: IFFALSE 17791
17765: GO 17767
17767: DISABLE
// begin solar_recharge_percent := 0 ;
17768: LD_ADDR_OWVAR 79
17772: PUSH
17773: LD_INT 0
17775: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17776: LD_INT 10500
17778: PPUSH
17779: CALL_OW 67
// solar_recharge_percent := 100 ;
17783: LD_ADDR_OWVAR 79
17787: PUSH
17788: LD_INT 100
17790: ST_TO_ADDR
// end ;
17791: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17792: LD_EXP 26
17796: IFFALSE 17804
17798: PUSH
17799: LD_EXP 50
17803: AND
17804: IFFALSE 18043
17806: GO 17808
17808: DISABLE
17809: LD_INT 0
17811: PPUSH
17812: PPUSH
17813: PPUSH
// begin tmp := [ ] ;
17814: LD_ADDR_VAR 0 3
17818: PUSH
17819: EMPTY
17820: ST_TO_ADDR
// for i := 1 to 6 do
17821: LD_ADDR_VAR 0 1
17825: PUSH
17826: DOUBLE
17827: LD_INT 1
17829: DEC
17830: ST_TO_ADDR
17831: LD_INT 6
17833: PUSH
17834: FOR_TO
17835: IFFALSE 17940
// begin uc_nation := nation_nature ;
17837: LD_ADDR_OWVAR 21
17841: PUSH
17842: LD_INT 0
17844: ST_TO_ADDR
// uc_side := 0 ;
17845: LD_ADDR_OWVAR 20
17849: PUSH
17850: LD_INT 0
17852: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17853: LD_ADDR_OWVAR 29
17857: PUSH
17858: LD_INT 12
17860: PUSH
17861: LD_INT 12
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: ST_TO_ADDR
// hc_agressivity := 20 ;
17868: LD_ADDR_OWVAR 35
17872: PUSH
17873: LD_INT 20
17875: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17876: LD_ADDR_OWVAR 28
17880: PUSH
17881: LD_INT 17
17883: ST_TO_ADDR
// hc_gallery :=  ;
17884: LD_ADDR_OWVAR 33
17888: PUSH
17889: LD_STRING 
17891: ST_TO_ADDR
// hc_name :=  ;
17892: LD_ADDR_OWVAR 26
17896: PUSH
17897: LD_STRING 
17899: ST_TO_ADDR
// un := CreateHuman ;
17900: LD_ADDR_VAR 0 2
17904: PUSH
17905: CALL_OW 44
17909: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17910: LD_VAR 0 2
17914: PPUSH
17915: LD_INT 1
17917: PPUSH
17918: CALL_OW 51
// tmp := tmp ^ un ;
17922: LD_ADDR_VAR 0 3
17926: PUSH
17927: LD_VAR 0 3
17931: PUSH
17932: LD_VAR 0 2
17936: ADD
17937: ST_TO_ADDR
// end ;
17938: GO 17834
17940: POP
17941: POP
// repeat wait ( 0 0$1 ) ;
17942: LD_INT 35
17944: PPUSH
17945: CALL_OW 67
// for un in tmp do
17949: LD_ADDR_VAR 0 2
17953: PUSH
17954: LD_VAR 0 3
17958: PUSH
17959: FOR_IN
17960: IFFALSE 18034
// begin if IsDead ( un ) then
17962: LD_VAR 0 2
17966: PPUSH
17967: CALL_OW 301
17971: IFFALSE 17991
// begin tmp := tmp diff un ;
17973: LD_ADDR_VAR 0 3
17977: PUSH
17978: LD_VAR 0 3
17982: PUSH
17983: LD_VAR 0 2
17987: DIFF
17988: ST_TO_ADDR
// continue ;
17989: GO 17959
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17991: LD_VAR 0 2
17995: PPUSH
17996: LD_INT 3
17998: PUSH
17999: LD_INT 22
18001: PUSH
18002: LD_INT 0
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: PPUSH
18013: CALL_OW 69
18017: PPUSH
18018: LD_VAR 0 2
18022: PPUSH
18023: CALL_OW 74
18027: PPUSH
18028: CALL_OW 115
// end ;
18032: GO 17959
18034: POP
18035: POP
// until not tmp ;
18036: LD_VAR 0 3
18040: NOT
18041: IFFALSE 17942
// end ;
18043: PPOPN 3
18045: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18046: LD_EXP 26
18050: IFFALSE 18058
18052: PUSH
18053: LD_EXP 51
18057: AND
18058: IFFALSE 18112
18060: GO 18062
18062: DISABLE
// begin ToLua ( displayTroll(); ) ;
18063: LD_STRING displayTroll();
18065: PPUSH
18066: CALL_OW 559
// wait ( 3 3$00 ) ;
18070: LD_INT 6300
18072: PPUSH
18073: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18077: LD_STRING hideTroll();
18079: PPUSH
18080: CALL_OW 559
// wait ( 1 1$00 ) ;
18084: LD_INT 2100
18086: PPUSH
18087: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18091: LD_STRING displayTroll();
18093: PPUSH
18094: CALL_OW 559
// wait ( 1 1$00 ) ;
18098: LD_INT 2100
18100: PPUSH
18101: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18105: LD_STRING hideTroll();
18107: PPUSH
18108: CALL_OW 559
// end ;
18112: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18113: LD_EXP 26
18117: IFFALSE 18125
18119: PUSH
18120: LD_EXP 52
18124: AND
18125: IFFALSE 18188
18127: GO 18129
18129: DISABLE
18130: LD_INT 0
18132: PPUSH
// begin p := 0 ;
18133: LD_ADDR_VAR 0 1
18137: PUSH
18138: LD_INT 0
18140: ST_TO_ADDR
// repeat game_speed := 1 ;
18141: LD_ADDR_OWVAR 65
18145: PUSH
18146: LD_INT 1
18148: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18149: LD_INT 35
18151: PPUSH
18152: CALL_OW 67
// p := p + 1 ;
18156: LD_ADDR_VAR 0 1
18160: PUSH
18161: LD_VAR 0 1
18165: PUSH
18166: LD_INT 1
18168: PLUS
18169: ST_TO_ADDR
// until p >= 60 ;
18170: LD_VAR 0 1
18174: PUSH
18175: LD_INT 60
18177: GREATEREQUAL
18178: IFFALSE 18141
// game_speed := 4 ;
18180: LD_ADDR_OWVAR 65
18184: PUSH
18185: LD_INT 4
18187: ST_TO_ADDR
// end ;
18188: PPOPN 1
18190: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18191: LD_EXP 26
18195: IFFALSE 18203
18197: PUSH
18198: LD_EXP 53
18202: AND
18203: IFFALSE 18349
18205: GO 18207
18207: DISABLE
18208: LD_INT 0
18210: PPUSH
18211: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18212: LD_ADDR_VAR 0 1
18216: PUSH
18217: LD_INT 22
18219: PUSH
18220: LD_OWVAR 2
18224: PUSH
18225: EMPTY
18226: LIST
18227: LIST
18228: PUSH
18229: LD_INT 2
18231: PUSH
18232: LD_INT 30
18234: PUSH
18235: LD_INT 0
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: PUSH
18242: LD_INT 30
18244: PUSH
18245: LD_INT 1
18247: PUSH
18248: EMPTY
18249: LIST
18250: LIST
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: LIST
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: PPUSH
18261: CALL_OW 69
18265: ST_TO_ADDR
// if not depot then
18266: LD_VAR 0 1
18270: NOT
18271: IFFALSE 18275
// exit ;
18273: GO 18349
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18275: LD_ADDR_VAR 0 2
18279: PUSH
18280: LD_VAR 0 1
18284: PUSH
18285: LD_INT 1
18287: PPUSH
18288: LD_VAR 0 1
18292: PPUSH
18293: CALL_OW 12
18297: ARRAY
18298: PPUSH
18299: CALL_OW 274
18303: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18304: LD_VAR 0 2
18308: PPUSH
18309: LD_INT 1
18311: PPUSH
18312: LD_INT 0
18314: PPUSH
18315: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18319: LD_VAR 0 2
18323: PPUSH
18324: LD_INT 2
18326: PPUSH
18327: LD_INT 0
18329: PPUSH
18330: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18334: LD_VAR 0 2
18338: PPUSH
18339: LD_INT 3
18341: PPUSH
18342: LD_INT 0
18344: PPUSH
18345: CALL_OW 277
// end ;
18349: PPOPN 2
18351: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18352: LD_EXP 26
18356: IFFALSE 18364
18358: PUSH
18359: LD_EXP 54
18363: AND
18364: IFFALSE 18461
18366: GO 18368
18368: DISABLE
18369: LD_INT 0
18371: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18372: LD_ADDR_VAR 0 1
18376: PUSH
18377: LD_INT 22
18379: PUSH
18380: LD_OWVAR 2
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: PUSH
18389: LD_INT 21
18391: PUSH
18392: LD_INT 1
18394: PUSH
18395: EMPTY
18396: LIST
18397: LIST
18398: PUSH
18399: LD_INT 3
18401: PUSH
18402: LD_INT 23
18404: PUSH
18405: LD_INT 0
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: LIST
18420: PPUSH
18421: CALL_OW 69
18425: ST_TO_ADDR
// if not tmp then
18426: LD_VAR 0 1
18430: NOT
18431: IFFALSE 18435
// exit ;
18433: GO 18461
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18435: LD_VAR 0 1
18439: PUSH
18440: LD_INT 1
18442: PPUSH
18443: LD_VAR 0 1
18447: PPUSH
18448: CALL_OW 12
18452: ARRAY
18453: PPUSH
18454: LD_INT 200
18456: PPUSH
18457: CALL_OW 234
// end ;
18461: PPOPN 1
18463: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18464: LD_EXP 26
18468: IFFALSE 18476
18470: PUSH
18471: LD_EXP 55
18475: AND
18476: IFFALSE 18555
18478: GO 18480
18480: DISABLE
18481: LD_INT 0
18483: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18484: LD_ADDR_VAR 0 1
18488: PUSH
18489: LD_INT 22
18491: PUSH
18492: LD_OWVAR 2
18496: PUSH
18497: EMPTY
18498: LIST
18499: LIST
18500: PUSH
18501: LD_INT 21
18503: PUSH
18504: LD_INT 2
18506: PUSH
18507: EMPTY
18508: LIST
18509: LIST
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PPUSH
18515: CALL_OW 69
18519: ST_TO_ADDR
// if not tmp then
18520: LD_VAR 0 1
18524: NOT
18525: IFFALSE 18529
// exit ;
18527: GO 18555
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18529: LD_VAR 0 1
18533: PUSH
18534: LD_INT 1
18536: PPUSH
18537: LD_VAR 0 1
18541: PPUSH
18542: CALL_OW 12
18546: ARRAY
18547: PPUSH
18548: LD_INT 60
18550: PPUSH
18551: CALL_OW 234
// end ;
18555: PPOPN 1
18557: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18558: LD_EXP 26
18562: IFFALSE 18570
18564: PUSH
18565: LD_EXP 56
18569: AND
18570: IFFALSE 18669
18572: GO 18574
18574: DISABLE
18575: LD_INT 0
18577: PPUSH
18578: PPUSH
// begin enable ;
18579: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18580: LD_ADDR_VAR 0 1
18584: PUSH
18585: LD_INT 22
18587: PUSH
18588: LD_OWVAR 2
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: PUSH
18597: LD_INT 61
18599: PUSH
18600: EMPTY
18601: LIST
18602: PUSH
18603: LD_INT 33
18605: PUSH
18606: LD_INT 2
18608: PUSH
18609: EMPTY
18610: LIST
18611: LIST
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: LIST
18617: PPUSH
18618: CALL_OW 69
18622: ST_TO_ADDR
// if not tmp then
18623: LD_VAR 0 1
18627: NOT
18628: IFFALSE 18632
// exit ;
18630: GO 18669
// for i in tmp do
18632: LD_ADDR_VAR 0 2
18636: PUSH
18637: LD_VAR 0 1
18641: PUSH
18642: FOR_IN
18643: IFFALSE 18667
// if IsControledBy ( i ) then
18645: LD_VAR 0 2
18649: PPUSH
18650: CALL_OW 312
18654: IFFALSE 18665
// ComUnlink ( i ) ;
18656: LD_VAR 0 2
18660: PPUSH
18661: CALL_OW 136
18665: GO 18642
18667: POP
18668: POP
// end ;
18669: PPOPN 2
18671: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18672: LD_EXP 26
18676: IFFALSE 18684
18678: PUSH
18679: LD_EXP 57
18683: AND
18684: IFFALSE 18824
18686: GO 18688
18688: DISABLE
18689: LD_INT 0
18691: PPUSH
18692: PPUSH
// begin ToLua ( displayPowell(); ) ;
18693: LD_STRING displayPowell();
18695: PPUSH
18696: CALL_OW 559
// uc_side := 0 ;
18700: LD_ADDR_OWVAR 20
18704: PUSH
18705: LD_INT 0
18707: ST_TO_ADDR
// uc_nation := 2 ;
18708: LD_ADDR_OWVAR 21
18712: PUSH
18713: LD_INT 2
18715: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18716: LD_ADDR_OWVAR 37
18720: PUSH
18721: LD_INT 14
18723: ST_TO_ADDR
// vc_engine := engine_siberite ;
18724: LD_ADDR_OWVAR 39
18728: PUSH
18729: LD_INT 3
18731: ST_TO_ADDR
// vc_control := control_apeman ;
18732: LD_ADDR_OWVAR 38
18736: PUSH
18737: LD_INT 5
18739: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18740: LD_ADDR_OWVAR 40
18744: PUSH
18745: LD_INT 29
18747: ST_TO_ADDR
// un := CreateVehicle ;
18748: LD_ADDR_VAR 0 2
18752: PUSH
18753: CALL_OW 45
18757: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18758: LD_VAR 0 2
18762: PPUSH
18763: LD_INT 1
18765: PPUSH
18766: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18770: LD_INT 35
18772: PPUSH
18773: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18777: LD_VAR 0 2
18781: PPUSH
18782: LD_INT 22
18784: PUSH
18785: LD_OWVAR 2
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: PPUSH
18794: CALL_OW 69
18798: PPUSH
18799: LD_VAR 0 2
18803: PPUSH
18804: CALL_OW 74
18808: PPUSH
18809: CALL_OW 115
// until IsDead ( un ) ;
18813: LD_VAR 0 2
18817: PPUSH
18818: CALL_OW 301
18822: IFFALSE 18770
// end ;
18824: PPOPN 2
18826: END
// every 0 0$1 trigger StreamModeActive and sStu do
18827: LD_EXP 26
18831: IFFALSE 18839
18833: PUSH
18834: LD_EXP 65
18838: AND
18839: IFFALSE 18855
18841: GO 18843
18843: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18844: LD_STRING displayStucuk();
18846: PPUSH
18847: CALL_OW 559
// ResetFog ;
18851: CALL_OW 335
// end ;
18855: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18856: LD_EXP 26
18860: IFFALSE 18868
18862: PUSH
18863: LD_EXP 58
18867: AND
18868: IFFALSE 19009
18870: GO 18872
18872: DISABLE
18873: LD_INT 0
18875: PPUSH
18876: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18877: LD_ADDR_VAR 0 2
18881: PUSH
18882: LD_INT 22
18884: PUSH
18885: LD_OWVAR 2
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 21
18896: PUSH
18897: LD_INT 1
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: PPUSH
18908: CALL_OW 69
18912: ST_TO_ADDR
// if not tmp then
18913: LD_VAR 0 2
18917: NOT
18918: IFFALSE 18922
// exit ;
18920: GO 19009
// un := tmp [ rand ( 1 , tmp ) ] ;
18922: LD_ADDR_VAR 0 1
18926: PUSH
18927: LD_VAR 0 2
18931: PUSH
18932: LD_INT 1
18934: PPUSH
18935: LD_VAR 0 2
18939: PPUSH
18940: CALL_OW 12
18944: ARRAY
18945: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18946: LD_VAR 0 1
18950: PPUSH
18951: LD_INT 0
18953: PPUSH
18954: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18958: LD_VAR 0 1
18962: PPUSH
18963: LD_OWVAR 3
18967: PUSH
18968: LD_VAR 0 1
18972: DIFF
18973: PPUSH
18974: LD_VAR 0 1
18978: PPUSH
18979: CALL_OW 74
18983: PPUSH
18984: CALL_OW 115
// wait ( 0 0$20 ) ;
18988: LD_INT 700
18990: PPUSH
18991: CALL_OW 67
// SetSide ( un , your_side ) ;
18995: LD_VAR 0 1
18999: PPUSH
19000: LD_OWVAR 2
19004: PPUSH
19005: CALL_OW 235
// end ;
19009: PPOPN 2
19011: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19012: LD_EXP 26
19016: IFFALSE 19024
19018: PUSH
19019: LD_EXP 59
19023: AND
19024: IFFALSE 19130
19026: GO 19028
19028: DISABLE
19029: LD_INT 0
19031: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19032: LD_ADDR_VAR 0 1
19036: PUSH
19037: LD_INT 22
19039: PUSH
19040: LD_OWVAR 2
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PUSH
19049: LD_INT 2
19051: PUSH
19052: LD_INT 30
19054: PUSH
19055: LD_INT 0
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PUSH
19062: LD_INT 30
19064: PUSH
19065: LD_INT 1
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: LIST
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: PPUSH
19081: CALL_OW 69
19085: ST_TO_ADDR
// if not depot then
19086: LD_VAR 0 1
19090: NOT
19091: IFFALSE 19095
// exit ;
19093: GO 19130
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19095: LD_VAR 0 1
19099: PUSH
19100: LD_INT 1
19102: ARRAY
19103: PPUSH
19104: CALL_OW 250
19108: PPUSH
19109: LD_VAR 0 1
19113: PUSH
19114: LD_INT 1
19116: ARRAY
19117: PPUSH
19118: CALL_OW 251
19122: PPUSH
19123: LD_INT 70
19125: PPUSH
19126: CALL_OW 495
// end ;
19130: PPOPN 1
19132: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19133: LD_EXP 26
19137: IFFALSE 19145
19139: PUSH
19140: LD_EXP 60
19144: AND
19145: IFFALSE 19356
19147: GO 19149
19149: DISABLE
19150: LD_INT 0
19152: PPUSH
19153: PPUSH
19154: PPUSH
19155: PPUSH
19156: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19157: LD_ADDR_VAR 0 5
19161: PUSH
19162: LD_INT 22
19164: PUSH
19165: LD_OWVAR 2
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PUSH
19174: LD_INT 21
19176: PUSH
19177: LD_INT 1
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: PPUSH
19188: CALL_OW 69
19192: ST_TO_ADDR
// if not tmp then
19193: LD_VAR 0 5
19197: NOT
19198: IFFALSE 19202
// exit ;
19200: GO 19356
// for i in tmp do
19202: LD_ADDR_VAR 0 1
19206: PUSH
19207: LD_VAR 0 5
19211: PUSH
19212: FOR_IN
19213: IFFALSE 19354
// begin d := rand ( 0 , 5 ) ;
19215: LD_ADDR_VAR 0 4
19219: PUSH
19220: LD_INT 0
19222: PPUSH
19223: LD_INT 5
19225: PPUSH
19226: CALL_OW 12
19230: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19231: LD_ADDR_VAR 0 2
19235: PUSH
19236: LD_VAR 0 1
19240: PPUSH
19241: CALL_OW 250
19245: PPUSH
19246: LD_VAR 0 4
19250: PPUSH
19251: LD_INT 3
19253: PPUSH
19254: LD_INT 12
19256: PPUSH
19257: CALL_OW 12
19261: PPUSH
19262: CALL_OW 272
19266: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19267: LD_ADDR_VAR 0 3
19271: PUSH
19272: LD_VAR 0 1
19276: PPUSH
19277: CALL_OW 251
19281: PPUSH
19282: LD_VAR 0 4
19286: PPUSH
19287: LD_INT 3
19289: PPUSH
19290: LD_INT 12
19292: PPUSH
19293: CALL_OW 12
19297: PPUSH
19298: CALL_OW 273
19302: ST_TO_ADDR
// if ValidHex ( x , y ) then
19303: LD_VAR 0 2
19307: PPUSH
19308: LD_VAR 0 3
19312: PPUSH
19313: CALL_OW 488
19317: IFFALSE 19352
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19319: LD_VAR 0 1
19323: PPUSH
19324: LD_VAR 0 2
19328: PPUSH
19329: LD_VAR 0 3
19333: PPUSH
19334: LD_INT 3
19336: PPUSH
19337: LD_INT 6
19339: PPUSH
19340: CALL_OW 12
19344: PPUSH
19345: LD_INT 1
19347: PPUSH
19348: CALL_OW 483
// end ;
19352: GO 19212
19354: POP
19355: POP
// end ;
19356: PPOPN 5
19358: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19359: LD_EXP 26
19363: IFFALSE 19371
19365: PUSH
19366: LD_EXP 61
19370: AND
19371: IFFALSE 19465
19373: GO 19375
19375: DISABLE
19376: LD_INT 0
19378: PPUSH
19379: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19380: LD_ADDR_VAR 0 2
19384: PUSH
19385: LD_INT 22
19387: PUSH
19388: LD_OWVAR 2
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: PUSH
19397: LD_INT 32
19399: PUSH
19400: LD_INT 1
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: PUSH
19407: LD_INT 21
19409: PUSH
19410: LD_INT 2
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: LIST
19421: PPUSH
19422: CALL_OW 69
19426: ST_TO_ADDR
// if not tmp then
19427: LD_VAR 0 2
19431: NOT
19432: IFFALSE 19436
// exit ;
19434: GO 19465
// for i in tmp do
19436: LD_ADDR_VAR 0 1
19440: PUSH
19441: LD_VAR 0 2
19445: PUSH
19446: FOR_IN
19447: IFFALSE 19463
// SetFuel ( i , 0 ) ;
19449: LD_VAR 0 1
19453: PPUSH
19454: LD_INT 0
19456: PPUSH
19457: CALL_OW 240
19461: GO 19446
19463: POP
19464: POP
// end ;
19465: PPOPN 2
19467: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19468: LD_EXP 26
19472: IFFALSE 19480
19474: PUSH
19475: LD_EXP 62
19479: AND
19480: IFFALSE 19546
19482: GO 19484
19484: DISABLE
19485: LD_INT 0
19487: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19488: LD_ADDR_VAR 0 1
19492: PUSH
19493: LD_INT 22
19495: PUSH
19496: LD_OWVAR 2
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: PUSH
19505: LD_INT 30
19507: PUSH
19508: LD_INT 29
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: PPUSH
19519: CALL_OW 69
19523: ST_TO_ADDR
// if not tmp then
19524: LD_VAR 0 1
19528: NOT
19529: IFFALSE 19533
// exit ;
19531: GO 19546
// DestroyUnit ( tmp [ 1 ] ) ;
19533: LD_VAR 0 1
19537: PUSH
19538: LD_INT 1
19540: ARRAY
19541: PPUSH
19542: CALL_OW 65
// end ;
19546: PPOPN 1
19548: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19549: LD_EXP 26
19553: IFFALSE 19561
19555: PUSH
19556: LD_EXP 64
19560: AND
19561: IFFALSE 19690
19563: GO 19565
19565: DISABLE
19566: LD_INT 0
19568: PPUSH
// begin uc_side := 0 ;
19569: LD_ADDR_OWVAR 20
19573: PUSH
19574: LD_INT 0
19576: ST_TO_ADDR
// uc_nation := nation_arabian ;
19577: LD_ADDR_OWVAR 21
19581: PUSH
19582: LD_INT 2
19584: ST_TO_ADDR
// hc_gallery :=  ;
19585: LD_ADDR_OWVAR 33
19589: PUSH
19590: LD_STRING 
19592: ST_TO_ADDR
// hc_name :=  ;
19593: LD_ADDR_OWVAR 26
19597: PUSH
19598: LD_STRING 
19600: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19601: LD_INT 1
19603: PPUSH
19604: LD_INT 11
19606: PPUSH
19607: LD_INT 10
19609: PPUSH
19610: CALL_OW 380
// un := CreateHuman ;
19614: LD_ADDR_VAR 0 1
19618: PUSH
19619: CALL_OW 44
19623: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19624: LD_VAR 0 1
19628: PPUSH
19629: LD_INT 1
19631: PPUSH
19632: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19636: LD_INT 35
19638: PPUSH
19639: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19643: LD_VAR 0 1
19647: PPUSH
19648: LD_INT 22
19650: PUSH
19651: LD_OWVAR 2
19655: PUSH
19656: EMPTY
19657: LIST
19658: LIST
19659: PPUSH
19660: CALL_OW 69
19664: PPUSH
19665: LD_VAR 0 1
19669: PPUSH
19670: CALL_OW 74
19674: PPUSH
19675: CALL_OW 115
// until IsDead ( un ) ;
19679: LD_VAR 0 1
19683: PPUSH
19684: CALL_OW 301
19688: IFFALSE 19636
// end ;
19690: PPOPN 1
19692: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19693: LD_EXP 26
19697: IFFALSE 19705
19699: PUSH
19700: LD_EXP 66
19704: AND
19705: IFFALSE 19717
19707: GO 19709
19709: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19710: LD_STRING earthquake(getX(game), 0, 32)
19712: PPUSH
19713: CALL_OW 559
19717: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19718: LD_EXP 26
19722: IFFALSE 19730
19724: PUSH
19725: LD_EXP 67
19729: AND
19730: IFFALSE 19821
19732: GO 19734
19734: DISABLE
19735: LD_INT 0
19737: PPUSH
// begin enable ;
19738: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19739: LD_ADDR_VAR 0 1
19743: PUSH
19744: LD_INT 22
19746: PUSH
19747: LD_OWVAR 2
19751: PUSH
19752: EMPTY
19753: LIST
19754: LIST
19755: PUSH
19756: LD_INT 21
19758: PUSH
19759: LD_INT 2
19761: PUSH
19762: EMPTY
19763: LIST
19764: LIST
19765: PUSH
19766: LD_INT 33
19768: PUSH
19769: LD_INT 3
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: LIST
19780: PPUSH
19781: CALL_OW 69
19785: ST_TO_ADDR
// if not tmp then
19786: LD_VAR 0 1
19790: NOT
19791: IFFALSE 19795
// exit ;
19793: GO 19821
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19795: LD_VAR 0 1
19799: PUSH
19800: LD_INT 1
19802: PPUSH
19803: LD_VAR 0 1
19807: PPUSH
19808: CALL_OW 12
19812: ARRAY
19813: PPUSH
19814: LD_INT 1
19816: PPUSH
19817: CALL_OW 234
// end ;
19821: PPOPN 1
19823: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19824: LD_EXP 26
19828: IFFALSE 19836
19830: PUSH
19831: LD_EXP 68
19835: AND
19836: IFFALSE 19977
19838: GO 19840
19840: DISABLE
19841: LD_INT 0
19843: PPUSH
19844: PPUSH
19845: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19846: LD_ADDR_VAR 0 3
19850: PUSH
19851: LD_INT 22
19853: PUSH
19854: LD_OWVAR 2
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: PUSH
19863: LD_INT 25
19865: PUSH
19866: LD_INT 1
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: PPUSH
19877: CALL_OW 69
19881: ST_TO_ADDR
// if not tmp then
19882: LD_VAR 0 3
19886: NOT
19887: IFFALSE 19891
// exit ;
19889: GO 19977
// un := tmp [ rand ( 1 , tmp ) ] ;
19891: LD_ADDR_VAR 0 2
19895: PUSH
19896: LD_VAR 0 3
19900: PUSH
19901: LD_INT 1
19903: PPUSH
19904: LD_VAR 0 3
19908: PPUSH
19909: CALL_OW 12
19913: ARRAY
19914: ST_TO_ADDR
// if Crawls ( un ) then
19915: LD_VAR 0 2
19919: PPUSH
19920: CALL_OW 318
19924: IFFALSE 19935
// ComWalk ( un ) ;
19926: LD_VAR 0 2
19930: PPUSH
19931: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19935: LD_VAR 0 2
19939: PPUSH
19940: LD_INT 9
19942: PPUSH
19943: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19947: LD_INT 28
19949: PPUSH
19950: LD_OWVAR 2
19954: PPUSH
19955: LD_INT 2
19957: PPUSH
19958: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19962: LD_INT 29
19964: PPUSH
19965: LD_OWVAR 2
19969: PPUSH
19970: LD_INT 2
19972: PPUSH
19973: CALL_OW 322
// end ;
19977: PPOPN 3
19979: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19980: LD_EXP 26
19984: IFFALSE 19992
19986: PUSH
19987: LD_EXP 69
19991: AND
19992: IFFALSE 20103
19994: GO 19996
19996: DISABLE
19997: LD_INT 0
19999: PPUSH
20000: PPUSH
20001: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20002: LD_ADDR_VAR 0 3
20006: PUSH
20007: LD_INT 22
20009: PUSH
20010: LD_OWVAR 2
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: PUSH
20019: LD_INT 25
20021: PUSH
20022: LD_INT 1
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: PPUSH
20033: CALL_OW 69
20037: ST_TO_ADDR
// if not tmp then
20038: LD_VAR 0 3
20042: NOT
20043: IFFALSE 20047
// exit ;
20045: GO 20103
// un := tmp [ rand ( 1 , tmp ) ] ;
20047: LD_ADDR_VAR 0 2
20051: PUSH
20052: LD_VAR 0 3
20056: PUSH
20057: LD_INT 1
20059: PPUSH
20060: LD_VAR 0 3
20064: PPUSH
20065: CALL_OW 12
20069: ARRAY
20070: ST_TO_ADDR
// if Crawls ( un ) then
20071: LD_VAR 0 2
20075: PPUSH
20076: CALL_OW 318
20080: IFFALSE 20091
// ComWalk ( un ) ;
20082: LD_VAR 0 2
20086: PPUSH
20087: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20091: LD_VAR 0 2
20095: PPUSH
20096: LD_INT 8
20098: PPUSH
20099: CALL_OW 336
// end ;
20103: PPOPN 3
20105: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20106: LD_EXP 26
20110: IFFALSE 20118
20112: PUSH
20113: LD_EXP 70
20117: AND
20118: IFFALSE 20262
20120: GO 20122
20122: DISABLE
20123: LD_INT 0
20125: PPUSH
20126: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20127: LD_ADDR_VAR 0 2
20131: PUSH
20132: LD_INT 22
20134: PUSH
20135: LD_OWVAR 2
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: PUSH
20144: LD_INT 21
20146: PUSH
20147: LD_INT 2
20149: PUSH
20150: EMPTY
20151: LIST
20152: LIST
20153: PUSH
20154: LD_INT 2
20156: PUSH
20157: LD_INT 34
20159: PUSH
20160: LD_INT 12
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PUSH
20167: LD_INT 34
20169: PUSH
20170: LD_INT 51
20172: PUSH
20173: EMPTY
20174: LIST
20175: LIST
20176: PUSH
20177: LD_INT 34
20179: PUSH
20180: LD_INT 32
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: PUSH
20193: EMPTY
20194: LIST
20195: LIST
20196: LIST
20197: PPUSH
20198: CALL_OW 69
20202: ST_TO_ADDR
// if not tmp then
20203: LD_VAR 0 2
20207: NOT
20208: IFFALSE 20212
// exit ;
20210: GO 20262
// for i in tmp do
20212: LD_ADDR_VAR 0 1
20216: PUSH
20217: LD_VAR 0 2
20221: PUSH
20222: FOR_IN
20223: IFFALSE 20260
// if GetCargo ( i , mat_artifact ) = 0 then
20225: LD_VAR 0 1
20229: PPUSH
20230: LD_INT 4
20232: PPUSH
20233: CALL_OW 289
20237: PUSH
20238: LD_INT 0
20240: EQUAL
20241: IFFALSE 20258
// SetCargo ( i , mat_siberit , 100 ) ;
20243: LD_VAR 0 1
20247: PPUSH
20248: LD_INT 3
20250: PPUSH
20251: LD_INT 100
20253: PPUSH
20254: CALL_OW 290
20258: GO 20222
20260: POP
20261: POP
// end ;
20262: PPOPN 2
20264: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20265: LD_EXP 26
20269: IFFALSE 20277
20271: PUSH
20272: LD_EXP 71
20276: AND
20277: IFFALSE 20460
20279: GO 20281
20281: DISABLE
20282: LD_INT 0
20284: PPUSH
20285: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20286: LD_ADDR_VAR 0 2
20290: PUSH
20291: LD_INT 22
20293: PUSH
20294: LD_OWVAR 2
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: PPUSH
20303: CALL_OW 69
20307: ST_TO_ADDR
// if not tmp then
20308: LD_VAR 0 2
20312: NOT
20313: IFFALSE 20317
// exit ;
20315: GO 20460
// for i := 1 to 2 do
20317: LD_ADDR_VAR 0 1
20321: PUSH
20322: DOUBLE
20323: LD_INT 1
20325: DEC
20326: ST_TO_ADDR
20327: LD_INT 2
20329: PUSH
20330: FOR_TO
20331: IFFALSE 20458
// begin uc_side := your_side ;
20333: LD_ADDR_OWVAR 20
20337: PUSH
20338: LD_OWVAR 2
20342: ST_TO_ADDR
// uc_nation := nation_american ;
20343: LD_ADDR_OWVAR 21
20347: PUSH
20348: LD_INT 1
20350: ST_TO_ADDR
// vc_chassis := us_morphling ;
20351: LD_ADDR_OWVAR 37
20355: PUSH
20356: LD_INT 5
20358: ST_TO_ADDR
// vc_engine := engine_siberite ;
20359: LD_ADDR_OWVAR 39
20363: PUSH
20364: LD_INT 3
20366: ST_TO_ADDR
// vc_control := control_computer ;
20367: LD_ADDR_OWVAR 38
20371: PUSH
20372: LD_INT 3
20374: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20375: LD_ADDR_OWVAR 40
20379: PUSH
20380: LD_INT 10
20382: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20383: LD_VAR 0 2
20387: PUSH
20388: LD_INT 1
20390: ARRAY
20391: PPUSH
20392: CALL_OW 310
20396: NOT
20397: IFFALSE 20444
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20399: CALL_OW 45
20403: PPUSH
20404: LD_VAR 0 2
20408: PUSH
20409: LD_INT 1
20411: ARRAY
20412: PPUSH
20413: CALL_OW 250
20417: PPUSH
20418: LD_VAR 0 2
20422: PUSH
20423: LD_INT 1
20425: ARRAY
20426: PPUSH
20427: CALL_OW 251
20431: PPUSH
20432: LD_INT 12
20434: PPUSH
20435: LD_INT 1
20437: PPUSH
20438: CALL_OW 50
20442: GO 20456
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20444: CALL_OW 45
20448: PPUSH
20449: LD_INT 1
20451: PPUSH
20452: CALL_OW 51
// end ;
20456: GO 20330
20458: POP
20459: POP
// end ;
20460: PPOPN 2
20462: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20463: LD_EXP 26
20467: IFFALSE 20475
20469: PUSH
20470: LD_EXP 72
20474: AND
20475: IFFALSE 20697
20477: GO 20479
20479: DISABLE
20480: LD_INT 0
20482: PPUSH
20483: PPUSH
20484: PPUSH
20485: PPUSH
20486: PPUSH
20487: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20488: LD_ADDR_VAR 0 6
20492: PUSH
20493: LD_INT 22
20495: PUSH
20496: LD_OWVAR 2
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: PUSH
20505: LD_INT 21
20507: PUSH
20508: LD_INT 1
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PUSH
20515: LD_INT 3
20517: PUSH
20518: LD_INT 23
20520: PUSH
20521: LD_INT 0
20523: PUSH
20524: EMPTY
20525: LIST
20526: LIST
20527: PUSH
20528: EMPTY
20529: LIST
20530: LIST
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: LIST
20536: PPUSH
20537: CALL_OW 69
20541: ST_TO_ADDR
// if not tmp then
20542: LD_VAR 0 6
20546: NOT
20547: IFFALSE 20551
// exit ;
20549: GO 20697
// s1 := rand ( 1 , 4 ) ;
20551: LD_ADDR_VAR 0 2
20555: PUSH
20556: LD_INT 1
20558: PPUSH
20559: LD_INT 4
20561: PPUSH
20562: CALL_OW 12
20566: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20567: LD_ADDR_VAR 0 4
20571: PUSH
20572: LD_VAR 0 6
20576: PUSH
20577: LD_INT 1
20579: ARRAY
20580: PPUSH
20581: LD_VAR 0 2
20585: PPUSH
20586: CALL_OW 259
20590: ST_TO_ADDR
// if s1 = 1 then
20591: LD_VAR 0 2
20595: PUSH
20596: LD_INT 1
20598: EQUAL
20599: IFFALSE 20619
// s2 := rand ( 2 , 4 ) else
20601: LD_ADDR_VAR 0 3
20605: PUSH
20606: LD_INT 2
20608: PPUSH
20609: LD_INT 4
20611: PPUSH
20612: CALL_OW 12
20616: ST_TO_ADDR
20617: GO 20627
// s2 := 1 ;
20619: LD_ADDR_VAR 0 3
20623: PUSH
20624: LD_INT 1
20626: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20627: LD_ADDR_VAR 0 5
20631: PUSH
20632: LD_VAR 0 6
20636: PUSH
20637: LD_INT 1
20639: ARRAY
20640: PPUSH
20641: LD_VAR 0 3
20645: PPUSH
20646: CALL_OW 259
20650: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20651: LD_VAR 0 6
20655: PUSH
20656: LD_INT 1
20658: ARRAY
20659: PPUSH
20660: LD_VAR 0 2
20664: PPUSH
20665: LD_VAR 0 5
20669: PPUSH
20670: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20674: LD_VAR 0 6
20678: PUSH
20679: LD_INT 1
20681: ARRAY
20682: PPUSH
20683: LD_VAR 0 3
20687: PPUSH
20688: LD_VAR 0 4
20692: PPUSH
20693: CALL_OW 237
// end ;
20697: PPOPN 6
20699: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20700: LD_EXP 26
20704: IFFALSE 20712
20706: PUSH
20707: LD_EXP 73
20711: AND
20712: IFFALSE 20791
20714: GO 20716
20716: DISABLE
20717: LD_INT 0
20719: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20720: LD_ADDR_VAR 0 1
20724: PUSH
20725: LD_INT 22
20727: PUSH
20728: LD_OWVAR 2
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: PUSH
20737: LD_INT 30
20739: PUSH
20740: LD_INT 3
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: PPUSH
20751: CALL_OW 69
20755: ST_TO_ADDR
// if not tmp then
20756: LD_VAR 0 1
20760: NOT
20761: IFFALSE 20765
// exit ;
20763: GO 20791
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20765: LD_VAR 0 1
20769: PUSH
20770: LD_INT 1
20772: PPUSH
20773: LD_VAR 0 1
20777: PPUSH
20778: CALL_OW 12
20782: ARRAY
20783: PPUSH
20784: LD_INT 1
20786: PPUSH
20787: CALL_OW 234
// end ;
20791: PPOPN 1
20793: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20794: LD_EXP 26
20798: IFFALSE 20806
20800: PUSH
20801: LD_EXP 74
20805: AND
20806: IFFALSE 20918
20808: GO 20810
20810: DISABLE
20811: LD_INT 0
20813: PPUSH
20814: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20815: LD_ADDR_VAR 0 2
20819: PUSH
20820: LD_INT 22
20822: PUSH
20823: LD_OWVAR 2
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: PUSH
20832: LD_INT 2
20834: PUSH
20835: LD_INT 30
20837: PUSH
20838: LD_INT 27
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: PUSH
20845: LD_INT 30
20847: PUSH
20848: LD_INT 26
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: PUSH
20855: LD_INT 30
20857: PUSH
20858: LD_INT 28
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PPUSH
20875: CALL_OW 69
20879: ST_TO_ADDR
// if not tmp then
20880: LD_VAR 0 2
20884: NOT
20885: IFFALSE 20889
// exit ;
20887: GO 20918
// for i in tmp do
20889: LD_ADDR_VAR 0 1
20893: PUSH
20894: LD_VAR 0 2
20898: PUSH
20899: FOR_IN
20900: IFFALSE 20916
// SetLives ( i , 1 ) ;
20902: LD_VAR 0 1
20906: PPUSH
20907: LD_INT 1
20909: PPUSH
20910: CALL_OW 234
20914: GO 20899
20916: POP
20917: POP
// end ;
20918: PPOPN 2
20920: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20921: LD_EXP 26
20925: IFFALSE 20933
20927: PUSH
20928: LD_EXP 75
20932: AND
20933: IFFALSE 21220
20935: GO 20937
20937: DISABLE
20938: LD_INT 0
20940: PPUSH
20941: PPUSH
20942: PPUSH
// begin i := rand ( 1 , 7 ) ;
20943: LD_ADDR_VAR 0 1
20947: PUSH
20948: LD_INT 1
20950: PPUSH
20951: LD_INT 7
20953: PPUSH
20954: CALL_OW 12
20958: ST_TO_ADDR
// case i of 1 :
20959: LD_VAR 0 1
20963: PUSH
20964: LD_INT 1
20966: DOUBLE
20967: EQUAL
20968: IFTRUE 20972
20970: GO 20982
20972: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20973: LD_STRING earthquake(getX(game), 0, 32)
20975: PPUSH
20976: CALL_OW 559
20980: GO 21220
20982: LD_INT 2
20984: DOUBLE
20985: EQUAL
20986: IFTRUE 20990
20988: GO 21004
20990: POP
// begin ToLua ( displayStucuk(); ) ;
20991: LD_STRING displayStucuk();
20993: PPUSH
20994: CALL_OW 559
// ResetFog ;
20998: CALL_OW 335
// end ; 3 :
21002: GO 21220
21004: LD_INT 3
21006: DOUBLE
21007: EQUAL
21008: IFTRUE 21012
21010: GO 21116
21012: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21013: LD_ADDR_VAR 0 2
21017: PUSH
21018: LD_INT 22
21020: PUSH
21021: LD_OWVAR 2
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PUSH
21030: LD_INT 25
21032: PUSH
21033: LD_INT 1
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PPUSH
21044: CALL_OW 69
21048: ST_TO_ADDR
// if not tmp then
21049: LD_VAR 0 2
21053: NOT
21054: IFFALSE 21058
// exit ;
21056: GO 21220
// un := tmp [ rand ( 1 , tmp ) ] ;
21058: LD_ADDR_VAR 0 3
21062: PUSH
21063: LD_VAR 0 2
21067: PUSH
21068: LD_INT 1
21070: PPUSH
21071: LD_VAR 0 2
21075: PPUSH
21076: CALL_OW 12
21080: ARRAY
21081: ST_TO_ADDR
// if Crawls ( un ) then
21082: LD_VAR 0 3
21086: PPUSH
21087: CALL_OW 318
21091: IFFALSE 21102
// ComWalk ( un ) ;
21093: LD_VAR 0 3
21097: PPUSH
21098: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21102: LD_VAR 0 3
21106: PPUSH
21107: LD_INT 8
21109: PPUSH
21110: CALL_OW 336
// end ; 4 :
21114: GO 21220
21116: LD_INT 4
21118: DOUBLE
21119: EQUAL
21120: IFTRUE 21124
21122: GO 21198
21124: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21125: LD_ADDR_VAR 0 2
21129: PUSH
21130: LD_INT 22
21132: PUSH
21133: LD_OWVAR 2
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: PUSH
21142: LD_INT 30
21144: PUSH
21145: LD_INT 29
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: PPUSH
21156: CALL_OW 69
21160: ST_TO_ADDR
// if not tmp then
21161: LD_VAR 0 2
21165: NOT
21166: IFFALSE 21170
// exit ;
21168: GO 21220
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21170: LD_VAR 0 2
21174: PUSH
21175: LD_INT 1
21177: ARRAY
21178: PPUSH
21179: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21183: LD_VAR 0 2
21187: PUSH
21188: LD_INT 1
21190: ARRAY
21191: PPUSH
21192: CALL_OW 65
// end ; 5 .. 7 :
21196: GO 21220
21198: LD_INT 5
21200: DOUBLE
21201: GREATEREQUAL
21202: IFFALSE 21210
21204: LD_INT 7
21206: DOUBLE
21207: LESSEQUAL
21208: IFTRUE 21212
21210: GO 21219
21212: POP
// StreamSibBomb ; end ;
21213: CALL 17401 0 0
21217: GO 21220
21219: POP
// end ;
21220: PPOPN 3
21222: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21223: LD_EXP 26
21227: IFFALSE 21235
21229: PUSH
21230: LD_EXP 76
21234: AND
21235: IFFALSE 21391
21237: GO 21239
21239: DISABLE
21240: LD_INT 0
21242: PPUSH
21243: PPUSH
21244: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21245: LD_ADDR_VAR 0 2
21249: PUSH
21250: LD_INT 81
21252: PUSH
21253: LD_OWVAR 2
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: PUSH
21262: LD_INT 2
21264: PUSH
21265: LD_INT 21
21267: PUSH
21268: LD_INT 1
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: PUSH
21275: LD_INT 21
21277: PUSH
21278: LD_INT 2
21280: PUSH
21281: EMPTY
21282: LIST
21283: LIST
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: LIST
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: PPUSH
21294: CALL_OW 69
21298: ST_TO_ADDR
// if not tmp then
21299: LD_VAR 0 2
21303: NOT
21304: IFFALSE 21308
// exit ;
21306: GO 21391
// p := 0 ;
21308: LD_ADDR_VAR 0 3
21312: PUSH
21313: LD_INT 0
21315: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21316: LD_INT 35
21318: PPUSH
21319: CALL_OW 67
// p := p + 1 ;
21323: LD_ADDR_VAR 0 3
21327: PUSH
21328: LD_VAR 0 3
21332: PUSH
21333: LD_INT 1
21335: PLUS
21336: ST_TO_ADDR
// for i in tmp do
21337: LD_ADDR_VAR 0 1
21341: PUSH
21342: LD_VAR 0 2
21346: PUSH
21347: FOR_IN
21348: IFFALSE 21379
// if GetLives ( i ) < 1000 then
21350: LD_VAR 0 1
21354: PPUSH
21355: CALL_OW 256
21359: PUSH
21360: LD_INT 1000
21362: LESS
21363: IFFALSE 21377
// SetLives ( i , 1000 ) ;
21365: LD_VAR 0 1
21369: PPUSH
21370: LD_INT 1000
21372: PPUSH
21373: CALL_OW 234
21377: GO 21347
21379: POP
21380: POP
// until p > 20 ;
21381: LD_VAR 0 3
21385: PUSH
21386: LD_INT 20
21388: GREATER
21389: IFFALSE 21316
// end ;
21391: PPOPN 3
21393: END
// every 0 0$1 trigger StreamModeActive and sTime do
21394: LD_EXP 26
21398: IFFALSE 21406
21400: PUSH
21401: LD_EXP 77
21405: AND
21406: IFFALSE 21441
21408: GO 21410
21410: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21411: LD_INT 28
21413: PPUSH
21414: LD_OWVAR 2
21418: PPUSH
21419: LD_INT 2
21421: PPUSH
21422: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21426: LD_INT 30
21428: PPUSH
21429: LD_OWVAR 2
21433: PPUSH
21434: LD_INT 2
21436: PPUSH
21437: CALL_OW 322
// end ;
21441: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21442: LD_EXP 26
21446: IFFALSE 21454
21448: PUSH
21449: LD_EXP 78
21453: AND
21454: IFFALSE 21575
21456: GO 21458
21458: DISABLE
21459: LD_INT 0
21461: PPUSH
21462: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21463: LD_ADDR_VAR 0 2
21467: PUSH
21468: LD_INT 22
21470: PUSH
21471: LD_OWVAR 2
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PUSH
21480: LD_INT 21
21482: PUSH
21483: LD_INT 1
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PUSH
21490: LD_INT 3
21492: PUSH
21493: LD_INT 23
21495: PUSH
21496: LD_INT 0
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: LIST
21511: PPUSH
21512: CALL_OW 69
21516: ST_TO_ADDR
// if not tmp then
21517: LD_VAR 0 2
21521: NOT
21522: IFFALSE 21526
// exit ;
21524: GO 21575
// for i in tmp do
21526: LD_ADDR_VAR 0 1
21530: PUSH
21531: LD_VAR 0 2
21535: PUSH
21536: FOR_IN
21537: IFFALSE 21573
// begin if Crawls ( i ) then
21539: LD_VAR 0 1
21543: PPUSH
21544: CALL_OW 318
21548: IFFALSE 21559
// ComWalk ( i ) ;
21550: LD_VAR 0 1
21554: PPUSH
21555: CALL_OW 138
// SetClass ( i , 2 ) ;
21559: LD_VAR 0 1
21563: PPUSH
21564: LD_INT 2
21566: PPUSH
21567: CALL_OW 336
// end ;
21571: GO 21536
21573: POP
21574: POP
// end ;
21575: PPOPN 2
21577: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21578: LD_EXP 26
21582: IFFALSE 21590
21584: PUSH
21585: LD_EXP 79
21589: AND
21590: IFFALSE 21880
21592: GO 21594
21594: DISABLE
21595: LD_INT 0
21597: PPUSH
21598: PPUSH
21599: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21600: LD_OWVAR 2
21604: PPUSH
21605: LD_INT 9
21607: PPUSH
21608: LD_INT 1
21610: PPUSH
21611: LD_INT 1
21613: PPUSH
21614: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21618: LD_INT 9
21620: PPUSH
21621: LD_OWVAR 2
21625: PPUSH
21626: CALL_OW 343
// uc_side := 9 ;
21630: LD_ADDR_OWVAR 20
21634: PUSH
21635: LD_INT 9
21637: ST_TO_ADDR
// uc_nation := 2 ;
21638: LD_ADDR_OWVAR 21
21642: PUSH
21643: LD_INT 2
21645: ST_TO_ADDR
// hc_name := Dark Warrior ;
21646: LD_ADDR_OWVAR 26
21650: PUSH
21651: LD_STRING Dark Warrior
21653: ST_TO_ADDR
// hc_gallery :=  ;
21654: LD_ADDR_OWVAR 33
21658: PUSH
21659: LD_STRING 
21661: ST_TO_ADDR
// hc_noskilllimit := true ;
21662: LD_ADDR_OWVAR 76
21666: PUSH
21667: LD_INT 1
21669: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
21670: LD_ADDR_OWVAR 31
21674: PUSH
21675: LD_INT 30
21677: PUSH
21678: LD_INT 30
21680: PUSH
21681: LD_INT 30
21683: PUSH
21684: LD_INT 30
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: ST_TO_ADDR
// un := CreateHuman ;
21693: LD_ADDR_VAR 0 3
21697: PUSH
21698: CALL_OW 44
21702: ST_TO_ADDR
// hc_noskilllimit := false ;
21703: LD_ADDR_OWVAR 76
21707: PUSH
21708: LD_INT 0
21710: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21711: LD_VAR 0 3
21715: PPUSH
21716: LD_INT 1
21718: PPUSH
21719: CALL_OW 51
// ToLua ( playRanger() ) ;
21723: LD_STRING playRanger()
21725: PPUSH
21726: CALL_OW 559
// p := 0 ;
21730: LD_ADDR_VAR 0 2
21734: PUSH
21735: LD_INT 0
21737: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21738: LD_INT 35
21740: PPUSH
21741: CALL_OW 67
// p := p + 1 ;
21745: LD_ADDR_VAR 0 2
21749: PUSH
21750: LD_VAR 0 2
21754: PUSH
21755: LD_INT 1
21757: PLUS
21758: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21759: LD_VAR 0 3
21763: PPUSH
21764: CALL_OW 256
21768: PUSH
21769: LD_INT 1000
21771: LESS
21772: IFFALSE 21786
// SetLives ( un , 1000 ) ;
21774: LD_VAR 0 3
21778: PPUSH
21779: LD_INT 1000
21781: PPUSH
21782: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21786: LD_VAR 0 3
21790: PPUSH
21791: LD_INT 81
21793: PUSH
21794: LD_OWVAR 2
21798: PUSH
21799: EMPTY
21800: LIST
21801: LIST
21802: PUSH
21803: LD_INT 91
21805: PUSH
21806: LD_VAR 0 3
21810: PUSH
21811: LD_INT 30
21813: PUSH
21814: EMPTY
21815: LIST
21816: LIST
21817: LIST
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PPUSH
21823: CALL_OW 69
21827: PPUSH
21828: LD_VAR 0 3
21832: PPUSH
21833: CALL_OW 74
21837: PPUSH
21838: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
21842: LD_VAR 0 2
21846: PUSH
21847: LD_INT 80
21849: GREATER
21850: IFTRUE 21863
21852: PUSH
21853: LD_VAR 0 3
21857: PPUSH
21858: CALL_OW 301
21862: OR
21863: IFFALSE 21738
// if un then
21865: LD_VAR 0 3
21869: IFFALSE 21880
// RemoveUnit ( un ) ;
21871: LD_VAR 0 3
21875: PPUSH
21876: CALL_OW 64
// end ;
21880: PPOPN 3
21882: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
21883: LD_EXP 80
21887: IFFALSE 22003
21889: GO 21891
21891: DISABLE
21892: LD_INT 0
21894: PPUSH
21895: PPUSH
21896: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21897: LD_ADDR_VAR 0 2
21901: PUSH
21902: LD_INT 81
21904: PUSH
21905: LD_OWVAR 2
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PUSH
21914: LD_INT 21
21916: PUSH
21917: LD_INT 1
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: PPUSH
21928: CALL_OW 69
21932: ST_TO_ADDR
// ToLua ( playComputer() ) ;
21933: LD_STRING playComputer()
21935: PPUSH
21936: CALL_OW 559
// if not tmp then
21940: LD_VAR 0 2
21944: NOT
21945: IFFALSE 21949
// exit ;
21947: GO 22003
// for i in tmp do
21949: LD_ADDR_VAR 0 1
21953: PUSH
21954: LD_VAR 0 2
21958: PUSH
21959: FOR_IN
21960: IFFALSE 22001
// for j := 1 to 4 do
21962: LD_ADDR_VAR 0 3
21966: PUSH
21967: DOUBLE
21968: LD_INT 1
21970: DEC
21971: ST_TO_ADDR
21972: LD_INT 4
21974: PUSH
21975: FOR_TO
21976: IFFALSE 21997
// SetSkill ( i , j , 10 ) ;
21978: LD_VAR 0 1
21982: PPUSH
21983: LD_VAR 0 3
21987: PPUSH
21988: LD_INT 10
21990: PPUSH
21991: CALL_OW 237
21995: GO 21975
21997: POP
21998: POP
21999: GO 21959
22001: POP
22002: POP
// end ;
22003: PPOPN 3
22005: END
// every 0 0$1 trigger s30 do var i , tmp ;
22006: LD_EXP 81
22010: IFFALSE 22079
22012: GO 22014
22014: DISABLE
22015: LD_INT 0
22017: PPUSH
22018: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22019: LD_ADDR_VAR 0 2
22023: PUSH
22024: LD_INT 22
22026: PUSH
22027: LD_OWVAR 2
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: PPUSH
22036: CALL_OW 69
22040: ST_TO_ADDR
// if not tmp then
22041: LD_VAR 0 2
22045: NOT
22046: IFFALSE 22050
// exit ;
22048: GO 22079
// for i in tmp do
22050: LD_ADDR_VAR 0 1
22054: PUSH
22055: LD_VAR 0 2
22059: PUSH
22060: FOR_IN
22061: IFFALSE 22077
// SetLives ( i , 300 ) ;
22063: LD_VAR 0 1
22067: PPUSH
22068: LD_INT 300
22070: PPUSH
22071: CALL_OW 234
22075: GO 22060
22077: POP
22078: POP
// end ;
22079: PPOPN 2
22081: END
// every 0 0$1 trigger s60 do var i , tmp ;
22082: LD_EXP 82
22086: IFFALSE 22155
22088: GO 22090
22090: DISABLE
22091: LD_INT 0
22093: PPUSH
22094: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22095: LD_ADDR_VAR 0 2
22099: PUSH
22100: LD_INT 22
22102: PUSH
22103: LD_OWVAR 2
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: PPUSH
22112: CALL_OW 69
22116: ST_TO_ADDR
// if not tmp then
22117: LD_VAR 0 2
22121: NOT
22122: IFFALSE 22126
// exit ;
22124: GO 22155
// for i in tmp do
22126: LD_ADDR_VAR 0 1
22130: PUSH
22131: LD_VAR 0 2
22135: PUSH
22136: FOR_IN
22137: IFFALSE 22153
// SetLives ( i , 600 ) ;
22139: LD_VAR 0 1
22143: PPUSH
22144: LD_INT 600
22146: PPUSH
22147: CALL_OW 234
22151: GO 22136
22153: POP
22154: POP
// end ;
22155: PPOPN 2
22157: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22158: LD_INT 0
22160: PPUSH
// case cmd of 301 :
22161: LD_VAR 0 1
22165: PUSH
22166: LD_INT 301
22168: DOUBLE
22169: EQUAL
22170: IFTRUE 22174
22172: GO 22206
22174: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22175: LD_VAR 0 6
22179: PPUSH
22180: LD_VAR 0 7
22184: PPUSH
22185: LD_VAR 0 8
22189: PPUSH
22190: LD_VAR 0 4
22194: PPUSH
22195: LD_VAR 0 5
22199: PPUSH
22200: CALL 23419 0 5
22204: GO 22327
22206: LD_INT 302
22208: DOUBLE
22209: EQUAL
22210: IFTRUE 22214
22212: GO 22251
22214: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22215: LD_VAR 0 6
22219: PPUSH
22220: LD_VAR 0 7
22224: PPUSH
22225: LD_VAR 0 8
22229: PPUSH
22230: LD_VAR 0 9
22234: PPUSH
22235: LD_VAR 0 4
22239: PPUSH
22240: LD_VAR 0 5
22244: PPUSH
22245: CALL 23510 0 6
22249: GO 22327
22251: LD_INT 303
22253: DOUBLE
22254: EQUAL
22255: IFTRUE 22259
22257: GO 22296
22259: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22260: LD_VAR 0 6
22264: PPUSH
22265: LD_VAR 0 7
22269: PPUSH
22270: LD_VAR 0 8
22274: PPUSH
22275: LD_VAR 0 9
22279: PPUSH
22280: LD_VAR 0 4
22284: PPUSH
22285: LD_VAR 0 5
22289: PPUSH
22290: CALL 22332 0 6
22294: GO 22327
22296: LD_INT 304
22298: DOUBLE
22299: EQUAL
22300: IFTRUE 22304
22302: GO 22326
22304: POP
// hHackTeleport ( unit , x , y ) ; end ;
22305: LD_VAR 0 2
22309: PPUSH
22310: LD_VAR 0 4
22314: PPUSH
22315: LD_VAR 0 5
22319: PPUSH
22320: CALL 24103 0 3
22324: GO 22327
22326: POP
// end ;
22327: LD_VAR 0 12
22331: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22332: LD_INT 0
22334: PPUSH
22335: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22336: LD_VAR 0 1
22340: PUSH
22341: LD_INT 1
22343: LESS
22344: IFTRUE 22356
22346: PUSH
22347: LD_VAR 0 1
22351: PUSH
22352: LD_INT 3
22354: GREATER
22355: OR
22356: IFTRUE 22374
22358: PUSH
22359: LD_VAR 0 5
22363: PPUSH
22364: LD_VAR 0 6
22368: PPUSH
22369: CALL_OW 428
22373: OR
22374: IFFALSE 22378
// exit ;
22376: GO 23106
// uc_side := your_side ;
22378: LD_ADDR_OWVAR 20
22382: PUSH
22383: LD_OWVAR 2
22387: ST_TO_ADDR
// uc_nation := nation ;
22388: LD_ADDR_OWVAR 21
22392: PUSH
22393: LD_VAR 0 1
22397: ST_TO_ADDR
// bc_level = 1 ;
22398: LD_ADDR_OWVAR 43
22402: PUSH
22403: LD_INT 1
22405: ST_TO_ADDR
// case btype of 1 :
22406: LD_VAR 0 2
22410: PUSH
22411: LD_INT 1
22413: DOUBLE
22414: EQUAL
22415: IFTRUE 22419
22417: GO 22430
22419: POP
// bc_type := b_depot ; 2 :
22420: LD_ADDR_OWVAR 42
22424: PUSH
22425: LD_INT 0
22427: ST_TO_ADDR
22428: GO 23050
22430: LD_INT 2
22432: DOUBLE
22433: EQUAL
22434: IFTRUE 22438
22436: GO 22449
22438: POP
// bc_type := b_warehouse ; 3 :
22439: LD_ADDR_OWVAR 42
22443: PUSH
22444: LD_INT 1
22446: ST_TO_ADDR
22447: GO 23050
22449: LD_INT 3
22451: DOUBLE
22452: EQUAL
22453: IFTRUE 22457
22455: GO 22468
22457: POP
// bc_type := b_lab ; 4 .. 9 :
22458: LD_ADDR_OWVAR 42
22462: PUSH
22463: LD_INT 6
22465: ST_TO_ADDR
22466: GO 23050
22468: LD_INT 4
22470: DOUBLE
22471: GREATEREQUAL
22472: IFFALSE 22480
22474: LD_INT 9
22476: DOUBLE
22477: LESSEQUAL
22478: IFTRUE 22482
22480: GO 22542
22482: POP
// begin bc_type := b_lab_half ;
22483: LD_ADDR_OWVAR 42
22487: PUSH
22488: LD_INT 7
22490: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22491: LD_ADDR_OWVAR 44
22495: PUSH
22496: LD_INT 10
22498: PUSH
22499: LD_INT 11
22501: PUSH
22502: LD_INT 12
22504: PUSH
22505: LD_INT 15
22507: PUSH
22508: LD_INT 14
22510: PUSH
22511: LD_INT 13
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: PUSH
22522: LD_VAR 0 2
22526: PUSH
22527: LD_INT 3
22529: MINUS
22530: ARRAY
22531: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
22532: LD_ADDR_OWVAR 45
22536: PUSH
22537: LD_INT 9
22539: ST_TO_ADDR
// end ; 10 .. 13 :
22540: GO 23050
22542: LD_INT 10
22544: DOUBLE
22545: GREATEREQUAL
22546: IFFALSE 22554
22548: LD_INT 13
22550: DOUBLE
22551: LESSEQUAL
22552: IFTRUE 22556
22554: GO 22633
22556: POP
// begin bc_type := b_lab_full ;
22557: LD_ADDR_OWVAR 42
22561: PUSH
22562: LD_INT 8
22564: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22565: LD_ADDR_OWVAR 44
22569: PUSH
22570: LD_INT 10
22572: PUSH
22573: LD_INT 12
22575: PUSH
22576: LD_INT 14
22578: PUSH
22579: LD_INT 13
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: PUSH
22588: LD_VAR 0 2
22592: PUSH
22593: LD_INT 9
22595: MINUS
22596: ARRAY
22597: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22598: LD_ADDR_OWVAR 45
22602: PUSH
22603: LD_INT 11
22605: PUSH
22606: LD_INT 15
22608: PUSH
22609: LD_INT 12
22611: PUSH
22612: LD_INT 15
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: PUSH
22621: LD_VAR 0 2
22625: PUSH
22626: LD_INT 9
22628: MINUS
22629: ARRAY
22630: ST_TO_ADDR
// end ; 14 :
22631: GO 23050
22633: LD_INT 14
22635: DOUBLE
22636: EQUAL
22637: IFTRUE 22641
22639: GO 22652
22641: POP
// bc_type := b_workshop ; 15 :
22642: LD_ADDR_OWVAR 42
22646: PUSH
22647: LD_INT 2
22649: ST_TO_ADDR
22650: GO 23050
22652: LD_INT 15
22654: DOUBLE
22655: EQUAL
22656: IFTRUE 22660
22658: GO 22671
22660: POP
// bc_type := b_factory ; 16 :
22661: LD_ADDR_OWVAR 42
22665: PUSH
22666: LD_INT 3
22668: ST_TO_ADDR
22669: GO 23050
22671: LD_INT 16
22673: DOUBLE
22674: EQUAL
22675: IFTRUE 22679
22677: GO 22690
22679: POP
// bc_type := b_ext_gun ; 17 :
22680: LD_ADDR_OWVAR 42
22684: PUSH
22685: LD_INT 17
22687: ST_TO_ADDR
22688: GO 23050
22690: LD_INT 17
22692: DOUBLE
22693: EQUAL
22694: IFTRUE 22698
22696: GO 22726
22698: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22699: LD_ADDR_OWVAR 42
22703: PUSH
22704: LD_INT 19
22706: PUSH
22707: LD_INT 23
22709: PUSH
22710: LD_INT 19
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: LIST
22717: PUSH
22718: LD_VAR 0 1
22722: ARRAY
22723: ST_TO_ADDR
22724: GO 23050
22726: LD_INT 18
22728: DOUBLE
22729: EQUAL
22730: IFTRUE 22734
22732: GO 22745
22734: POP
// bc_type := b_ext_radar ; 19 :
22735: LD_ADDR_OWVAR 42
22739: PUSH
22740: LD_INT 20
22742: ST_TO_ADDR
22743: GO 23050
22745: LD_INT 19
22747: DOUBLE
22748: EQUAL
22749: IFTRUE 22753
22751: GO 22764
22753: POP
// bc_type := b_ext_radio ; 20 :
22754: LD_ADDR_OWVAR 42
22758: PUSH
22759: LD_INT 22
22761: ST_TO_ADDR
22762: GO 23050
22764: LD_INT 20
22766: DOUBLE
22767: EQUAL
22768: IFTRUE 22772
22770: GO 22783
22772: POP
// bc_type := b_ext_siberium ; 21 :
22773: LD_ADDR_OWVAR 42
22777: PUSH
22778: LD_INT 21
22780: ST_TO_ADDR
22781: GO 23050
22783: LD_INT 21
22785: DOUBLE
22786: EQUAL
22787: IFTRUE 22791
22789: GO 22802
22791: POP
// bc_type := b_ext_computer ; 22 :
22792: LD_ADDR_OWVAR 42
22796: PUSH
22797: LD_INT 24
22799: ST_TO_ADDR
22800: GO 23050
22802: LD_INT 22
22804: DOUBLE
22805: EQUAL
22806: IFTRUE 22810
22808: GO 22821
22810: POP
// bc_type := b_ext_track ; 23 :
22811: LD_ADDR_OWVAR 42
22815: PUSH
22816: LD_INT 16
22818: ST_TO_ADDR
22819: GO 23050
22821: LD_INT 23
22823: DOUBLE
22824: EQUAL
22825: IFTRUE 22829
22827: GO 22840
22829: POP
// bc_type := b_ext_laser ; 24 :
22830: LD_ADDR_OWVAR 42
22834: PUSH
22835: LD_INT 25
22837: ST_TO_ADDR
22838: GO 23050
22840: LD_INT 24
22842: DOUBLE
22843: EQUAL
22844: IFTRUE 22848
22846: GO 22859
22848: POP
// bc_type := b_control_tower ; 25 :
22849: LD_ADDR_OWVAR 42
22853: PUSH
22854: LD_INT 36
22856: ST_TO_ADDR
22857: GO 23050
22859: LD_INT 25
22861: DOUBLE
22862: EQUAL
22863: IFTRUE 22867
22865: GO 22878
22867: POP
// bc_type := b_breastwork ; 26 :
22868: LD_ADDR_OWVAR 42
22872: PUSH
22873: LD_INT 31
22875: ST_TO_ADDR
22876: GO 23050
22878: LD_INT 26
22880: DOUBLE
22881: EQUAL
22882: IFTRUE 22886
22884: GO 22897
22886: POP
// bc_type := b_bunker ; 27 :
22887: LD_ADDR_OWVAR 42
22891: PUSH
22892: LD_INT 32
22894: ST_TO_ADDR
22895: GO 23050
22897: LD_INT 27
22899: DOUBLE
22900: EQUAL
22901: IFTRUE 22905
22903: GO 22916
22905: POP
// bc_type := b_turret ; 28 :
22906: LD_ADDR_OWVAR 42
22910: PUSH
22911: LD_INT 33
22913: ST_TO_ADDR
22914: GO 23050
22916: LD_INT 28
22918: DOUBLE
22919: EQUAL
22920: IFTRUE 22924
22922: GO 22935
22924: POP
// bc_type := b_armoury ; 29 :
22925: LD_ADDR_OWVAR 42
22929: PUSH
22930: LD_INT 4
22932: ST_TO_ADDR
22933: GO 23050
22935: LD_INT 29
22937: DOUBLE
22938: EQUAL
22939: IFTRUE 22943
22941: GO 22954
22943: POP
// bc_type := b_barracks ; 30 :
22944: LD_ADDR_OWVAR 42
22948: PUSH
22949: LD_INT 5
22951: ST_TO_ADDR
22952: GO 23050
22954: LD_INT 30
22956: DOUBLE
22957: EQUAL
22958: IFTRUE 22962
22960: GO 22973
22962: POP
// bc_type := b_solar_power ; 31 :
22963: LD_ADDR_OWVAR 42
22967: PUSH
22968: LD_INT 27
22970: ST_TO_ADDR
22971: GO 23050
22973: LD_INT 31
22975: DOUBLE
22976: EQUAL
22977: IFTRUE 22981
22979: GO 22992
22981: POP
// bc_type := b_oil_power ; 32 :
22982: LD_ADDR_OWVAR 42
22986: PUSH
22987: LD_INT 26
22989: ST_TO_ADDR
22990: GO 23050
22992: LD_INT 32
22994: DOUBLE
22995: EQUAL
22996: IFTRUE 23000
22998: GO 23011
23000: POP
// bc_type := b_siberite_power ; 33 :
23001: LD_ADDR_OWVAR 42
23005: PUSH
23006: LD_INT 28
23008: ST_TO_ADDR
23009: GO 23050
23011: LD_INT 33
23013: DOUBLE
23014: EQUAL
23015: IFTRUE 23019
23017: GO 23030
23019: POP
// bc_type := b_oil_mine ; 34 :
23020: LD_ADDR_OWVAR 42
23024: PUSH
23025: LD_INT 29
23027: ST_TO_ADDR
23028: GO 23050
23030: LD_INT 34
23032: DOUBLE
23033: EQUAL
23034: IFTRUE 23038
23036: GO 23049
23038: POP
// bc_type := b_siberite_mine ; end ;
23039: LD_ADDR_OWVAR 42
23043: PUSH
23044: LD_INT 30
23046: ST_TO_ADDR
23047: GO 23050
23049: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23050: LD_ADDR_VAR 0 8
23054: PUSH
23055: LD_VAR 0 5
23059: PPUSH
23060: LD_VAR 0 6
23064: PPUSH
23065: LD_VAR 0 3
23069: PPUSH
23070: CALL_OW 47
23074: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23075: LD_OWVAR 42
23079: PUSH
23080: LD_INT 32
23082: PUSH
23083: LD_INT 33
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: IN
23090: IFFALSE 23106
// PlaceWeaponTurret ( b , weapon ) ;
23092: LD_VAR 0 8
23096: PPUSH
23097: LD_VAR 0 4
23101: PPUSH
23102: CALL_OW 431
// end ;
23106: LD_VAR 0 7
23110: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23111: LD_INT 0
23113: PPUSH
23114: PPUSH
23115: PPUSH
23116: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23117: LD_ADDR_VAR 0 4
23121: PUSH
23122: LD_INT 22
23124: PUSH
23125: LD_OWVAR 2
23129: PUSH
23130: EMPTY
23131: LIST
23132: LIST
23133: PUSH
23134: LD_INT 2
23136: PUSH
23137: LD_INT 30
23139: PUSH
23140: LD_INT 0
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: PUSH
23147: LD_INT 30
23149: PUSH
23150: LD_INT 1
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: LIST
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: PPUSH
23166: CALL_OW 69
23170: ST_TO_ADDR
// if not tmp then
23171: LD_VAR 0 4
23175: NOT
23176: IFFALSE 23180
// exit ;
23178: GO 23239
// for i in tmp do
23180: LD_ADDR_VAR 0 2
23184: PUSH
23185: LD_VAR 0 4
23189: PUSH
23190: FOR_IN
23191: IFFALSE 23237
// for j = 1 to 3 do
23193: LD_ADDR_VAR 0 3
23197: PUSH
23198: DOUBLE
23199: LD_INT 1
23201: DEC
23202: ST_TO_ADDR
23203: LD_INT 3
23205: PUSH
23206: FOR_TO
23207: IFFALSE 23233
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23209: LD_VAR 0 2
23213: PPUSH
23214: CALL_OW 274
23218: PPUSH
23219: LD_VAR 0 3
23223: PPUSH
23224: LD_INT 99999
23226: PPUSH
23227: CALL_OW 277
23231: GO 23206
23233: POP
23234: POP
23235: GO 23190
23237: POP
23238: POP
// end ;
23239: LD_VAR 0 1
23243: RET
// export function hHackSetLevel10 ; var i , j ; begin
23244: LD_INT 0
23246: PPUSH
23247: PPUSH
23248: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23249: LD_ADDR_VAR 0 2
23253: PUSH
23254: LD_INT 21
23256: PUSH
23257: LD_INT 1
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: PPUSH
23264: CALL_OW 69
23268: PUSH
23269: FOR_IN
23270: IFFALSE 23322
// if IsSelected ( i ) then
23272: LD_VAR 0 2
23276: PPUSH
23277: CALL_OW 306
23281: IFFALSE 23320
// begin for j := 1 to 4 do
23283: LD_ADDR_VAR 0 3
23287: PUSH
23288: DOUBLE
23289: LD_INT 1
23291: DEC
23292: ST_TO_ADDR
23293: LD_INT 4
23295: PUSH
23296: FOR_TO
23297: IFFALSE 23318
// SetSkill ( i , j , 10 ) ;
23299: LD_VAR 0 2
23303: PPUSH
23304: LD_VAR 0 3
23308: PPUSH
23309: LD_INT 10
23311: PPUSH
23312: CALL_OW 237
23316: GO 23296
23318: POP
23319: POP
// end ;
23320: GO 23269
23322: POP
23323: POP
// end ;
23324: LD_VAR 0 1
23328: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23329: LD_INT 0
23331: PPUSH
23332: PPUSH
23333: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23334: LD_ADDR_VAR 0 2
23338: PUSH
23339: LD_INT 22
23341: PUSH
23342: LD_OWVAR 2
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: PUSH
23351: LD_INT 21
23353: PUSH
23354: LD_INT 1
23356: PUSH
23357: EMPTY
23358: LIST
23359: LIST
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: PPUSH
23365: CALL_OW 69
23369: PUSH
23370: FOR_IN
23371: IFFALSE 23412
// begin for j := 1 to 4 do
23373: LD_ADDR_VAR 0 3
23377: PUSH
23378: DOUBLE
23379: LD_INT 1
23381: DEC
23382: ST_TO_ADDR
23383: LD_INT 4
23385: PUSH
23386: FOR_TO
23387: IFFALSE 23408
// SetSkill ( i , j , 10 ) ;
23389: LD_VAR 0 2
23393: PPUSH
23394: LD_VAR 0 3
23398: PPUSH
23399: LD_INT 10
23401: PPUSH
23402: CALL_OW 237
23406: GO 23386
23408: POP
23409: POP
// end ;
23410: GO 23370
23412: POP
23413: POP
// end ;
23414: LD_VAR 0 1
23418: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23419: LD_INT 0
23421: PPUSH
// uc_side := your_side ;
23422: LD_ADDR_OWVAR 20
23426: PUSH
23427: LD_OWVAR 2
23431: ST_TO_ADDR
// uc_nation := nation ;
23432: LD_ADDR_OWVAR 21
23436: PUSH
23437: LD_VAR 0 1
23441: ST_TO_ADDR
// InitHc ;
23442: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23446: LD_INT 0
23448: PPUSH
23449: LD_VAR 0 2
23453: PPUSH
23454: LD_VAR 0 3
23458: PPUSH
23459: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23463: LD_VAR 0 4
23467: PPUSH
23468: LD_VAR 0 5
23472: PPUSH
23473: CALL_OW 428
23477: PUSH
23478: LD_INT 0
23480: EQUAL
23481: IFFALSE 23505
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23483: CALL_OW 44
23487: PPUSH
23488: LD_VAR 0 4
23492: PPUSH
23493: LD_VAR 0 5
23497: PPUSH
23498: LD_INT 1
23500: PPUSH
23501: CALL_OW 48
// end ;
23505: LD_VAR 0 6
23509: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23510: LD_INT 0
23512: PPUSH
23513: PPUSH
// uc_side := your_side ;
23514: LD_ADDR_OWVAR 20
23518: PUSH
23519: LD_OWVAR 2
23523: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23524: LD_VAR 0 1
23528: PUSH
23529: LD_INT 1
23531: PUSH
23532: LD_INT 2
23534: PUSH
23535: LD_INT 3
23537: PUSH
23538: LD_INT 4
23540: PUSH
23541: LD_INT 5
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: IN
23551: IFFALSE 23563
// uc_nation := nation_american else
23553: LD_ADDR_OWVAR 21
23557: PUSH
23558: LD_INT 1
23560: ST_TO_ADDR
23561: GO 23606
// if chassis in [ 11 , 12 , 13 , 14 ] then
23563: LD_VAR 0 1
23567: PUSH
23568: LD_INT 11
23570: PUSH
23571: LD_INT 12
23573: PUSH
23574: LD_INT 13
23576: PUSH
23577: LD_INT 14
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: IN
23586: IFFALSE 23598
// uc_nation := nation_arabian else
23588: LD_ADDR_OWVAR 21
23592: PUSH
23593: LD_INT 2
23595: ST_TO_ADDR
23596: GO 23606
// uc_nation := nation_russian ;
23598: LD_ADDR_OWVAR 21
23602: PUSH
23603: LD_INT 3
23605: ST_TO_ADDR
// vc_chassis := chassis ;
23606: LD_ADDR_OWVAR 37
23610: PUSH
23611: LD_VAR 0 1
23615: ST_TO_ADDR
// vc_engine := engine ;
23616: LD_ADDR_OWVAR 39
23620: PUSH
23621: LD_VAR 0 2
23625: ST_TO_ADDR
// vc_control := control ;
23626: LD_ADDR_OWVAR 38
23630: PUSH
23631: LD_VAR 0 3
23635: ST_TO_ADDR
// vc_weapon := weapon ;
23636: LD_ADDR_OWVAR 40
23640: PUSH
23641: LD_VAR 0 4
23645: ST_TO_ADDR
// un := CreateVehicle ;
23646: LD_ADDR_VAR 0 8
23650: PUSH
23651: CALL_OW 45
23655: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23656: LD_VAR 0 8
23660: PPUSH
23661: LD_INT 0
23663: PPUSH
23664: LD_INT 5
23666: PPUSH
23667: CALL_OW 12
23671: PPUSH
23672: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23676: LD_VAR 0 8
23680: PPUSH
23681: LD_VAR 0 5
23685: PPUSH
23686: LD_VAR 0 6
23690: PPUSH
23691: LD_INT 1
23693: PPUSH
23694: CALL_OW 48
// end ;
23698: LD_VAR 0 7
23702: RET
// export hInvincible ; every 1 do
23703: GO 23705
23705: DISABLE
// hInvincible := [ ] ;
23706: LD_ADDR_EXP 83
23710: PUSH
23711: EMPTY
23712: ST_TO_ADDR
23713: END
// every 10 do var i ;
23714: GO 23716
23716: DISABLE
23717: LD_INT 0
23719: PPUSH
// begin enable ;
23720: ENABLE
// if not hInvincible then
23721: LD_EXP 83
23725: NOT
23726: IFFALSE 23730
// exit ;
23728: GO 23774
// for i in hInvincible do
23730: LD_ADDR_VAR 0 1
23734: PUSH
23735: LD_EXP 83
23739: PUSH
23740: FOR_IN
23741: IFFALSE 23772
// if GetLives ( i ) < 1000 then
23743: LD_VAR 0 1
23747: PPUSH
23748: CALL_OW 256
23752: PUSH
23753: LD_INT 1000
23755: LESS
23756: IFFALSE 23770
// SetLives ( i , 1000 ) ;
23758: LD_VAR 0 1
23762: PPUSH
23763: LD_INT 1000
23765: PPUSH
23766: CALL_OW 234
23770: GO 23740
23772: POP
23773: POP
// end ;
23774: PPOPN 1
23776: END
// export function hHackInvincible ; var i ; begin
23777: LD_INT 0
23779: PPUSH
23780: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23781: LD_ADDR_VAR 0 2
23785: PUSH
23786: LD_INT 2
23788: PUSH
23789: LD_INT 21
23791: PUSH
23792: LD_INT 1
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: PUSH
23799: LD_INT 21
23801: PUSH
23802: LD_INT 2
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: LIST
23813: PPUSH
23814: CALL_OW 69
23818: PUSH
23819: FOR_IN
23820: IFFALSE 23881
// if IsSelected ( i ) then
23822: LD_VAR 0 2
23826: PPUSH
23827: CALL_OW 306
23831: IFFALSE 23879
// begin if i in hInvincible then
23833: LD_VAR 0 2
23837: PUSH
23838: LD_EXP 83
23842: IN
23843: IFFALSE 23863
// hInvincible := hInvincible diff i else
23845: LD_ADDR_EXP 83
23849: PUSH
23850: LD_EXP 83
23854: PUSH
23855: LD_VAR 0 2
23859: DIFF
23860: ST_TO_ADDR
23861: GO 23879
// hInvincible := hInvincible union i ;
23863: LD_ADDR_EXP 83
23867: PUSH
23868: LD_EXP 83
23872: PUSH
23873: LD_VAR 0 2
23877: UNION
23878: ST_TO_ADDR
// end ;
23879: GO 23819
23881: POP
23882: POP
// end ;
23883: LD_VAR 0 1
23887: RET
// export function hHackInvisible ; var i , j ; begin
23888: LD_INT 0
23890: PPUSH
23891: PPUSH
23892: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23893: LD_ADDR_VAR 0 2
23897: PUSH
23898: LD_INT 21
23900: PUSH
23901: LD_INT 1
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PPUSH
23908: CALL_OW 69
23912: PUSH
23913: FOR_IN
23914: IFFALSE 23938
// if IsSelected ( i ) then
23916: LD_VAR 0 2
23920: PPUSH
23921: CALL_OW 306
23925: IFFALSE 23936
// ComForceInvisible ( i ) ;
23927: LD_VAR 0 2
23931: PPUSH
23932: CALL_OW 496
23936: GO 23913
23938: POP
23939: POP
// end ;
23940: LD_VAR 0 1
23944: RET
// export function hHackChangeYourSide ; begin
23945: LD_INT 0
23947: PPUSH
// if your_side = 8 then
23948: LD_OWVAR 2
23952: PUSH
23953: LD_INT 8
23955: EQUAL
23956: IFFALSE 23968
// your_side := 0 else
23958: LD_ADDR_OWVAR 2
23962: PUSH
23963: LD_INT 0
23965: ST_TO_ADDR
23966: GO 23982
// your_side := your_side + 1 ;
23968: LD_ADDR_OWVAR 2
23972: PUSH
23973: LD_OWVAR 2
23977: PUSH
23978: LD_INT 1
23980: PLUS
23981: ST_TO_ADDR
// end ;
23982: LD_VAR 0 1
23986: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23987: LD_INT 0
23989: PPUSH
23990: PPUSH
23991: PPUSH
// for i in all_units do
23992: LD_ADDR_VAR 0 2
23996: PUSH
23997: LD_OWVAR 3
24001: PUSH
24002: FOR_IN
24003: IFFALSE 24081
// if IsSelected ( i ) then
24005: LD_VAR 0 2
24009: PPUSH
24010: CALL_OW 306
24014: IFFALSE 24079
// begin j := GetSide ( i ) ;
24016: LD_ADDR_VAR 0 3
24020: PUSH
24021: LD_VAR 0 2
24025: PPUSH
24026: CALL_OW 255
24030: ST_TO_ADDR
// if j = 8 then
24031: LD_VAR 0 3
24035: PUSH
24036: LD_INT 8
24038: EQUAL
24039: IFFALSE 24051
// j := 0 else
24041: LD_ADDR_VAR 0 3
24045: PUSH
24046: LD_INT 0
24048: ST_TO_ADDR
24049: GO 24065
// j := j + 1 ;
24051: LD_ADDR_VAR 0 3
24055: PUSH
24056: LD_VAR 0 3
24060: PUSH
24061: LD_INT 1
24063: PLUS
24064: ST_TO_ADDR
// SetSide ( i , j ) ;
24065: LD_VAR 0 2
24069: PPUSH
24070: LD_VAR 0 3
24074: PPUSH
24075: CALL_OW 235
// end ;
24079: GO 24002
24081: POP
24082: POP
// end ;
24083: LD_VAR 0 1
24087: RET
// export function hHackFog ; begin
24088: LD_INT 0
24090: PPUSH
// FogOff ( true ) ;
24091: LD_INT 1
24093: PPUSH
24094: CALL_OW 344
// end ;
24098: LD_VAR 0 1
24102: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24103: LD_INT 0
24105: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24106: LD_VAR 0 1
24110: PPUSH
24111: LD_VAR 0 2
24115: PPUSH
24116: LD_VAR 0 3
24120: PPUSH
24121: LD_INT 1
24123: PPUSH
24124: LD_INT 1
24126: PPUSH
24127: CALL_OW 483
// CenterOnXY ( x , y ) ;
24131: LD_VAR 0 2
24135: PPUSH
24136: LD_VAR 0 3
24140: PPUSH
24141: CALL_OW 84
// end ;
24145: LD_VAR 0 4
24149: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
24150: LD_INT 0
24152: PPUSH
24153: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
24154: LD_VAR 0 1
24158: NOT
24159: IFTRUE 24178
24161: PUSH
24162: LD_VAR 0 2
24166: PPUSH
24167: LD_VAR 0 3
24171: PPUSH
24172: CALL_OW 488
24176: NOT
24177: OR
24178: IFTRUE 24213
24180: PUSH
24181: LD_VAR 0 1
24185: PPUSH
24186: CALL_OW 266
24190: PUSH
24191: LD_INT 3
24193: NONEQUAL
24194: IFFALSE 24212
24196: PUSH
24197: LD_VAR 0 1
24201: PPUSH
24202: CALL_OW 247
24206: PUSH
24207: LD_INT 1
24209: EQUAL
24210: NOT
24211: AND
24212: OR
24213: IFFALSE 24217
// exit ;
24215: GO 24499
// if GetType ( factory ) = unit_human then
24217: LD_VAR 0 1
24221: PPUSH
24222: CALL_OW 247
24226: PUSH
24227: LD_INT 1
24229: EQUAL
24230: IFFALSE 24247
// factory := IsInUnit ( factory ) ;
24232: LD_ADDR_VAR 0 1
24236: PUSH
24237: LD_VAR 0 1
24241: PPUSH
24242: CALL_OW 310
24246: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
24247: LD_VAR 0 1
24251: PPUSH
24252: CALL_OW 266
24256: PUSH
24257: LD_INT 3
24259: NONEQUAL
24260: IFFALSE 24264
// exit ;
24262: GO 24499
// for i := 1 to Count ( factoryWaypoints ) do
24264: LD_ADDR_VAR 0 5
24268: PUSH
24269: DOUBLE
24270: LD_INT 1
24272: DEC
24273: ST_TO_ADDR
24274: LD_EXP 84
24278: PPUSH
24279: CALL 34303 0 1
24283: PUSH
24284: FOR_TO
24285: IFFALSE 24447
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
24287: LD_VAR 0 2
24291: PPUSH
24292: LD_VAR 0 3
24296: PPUSH
24297: CALL_OW 428
24301: PUSH
24302: LD_EXP 84
24306: PUSH
24307: LD_VAR 0 5
24311: ARRAY
24312: PUSH
24313: LD_INT 2
24315: ARRAY
24316: EQUAL
24317: IFFALSE 24349
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
24319: LD_ADDR_EXP 84
24323: PUSH
24324: LD_EXP 84
24328: PPUSH
24329: LD_VAR 0 5
24333: PPUSH
24334: CALL_OW 3
24338: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24339: CALL 24504 0 0
// exit ;
24343: POP
24344: POP
24345: GO 24499
// end else
24347: GO 24445
// if factory = factoryWaypoints [ i ] [ 2 ] then
24349: LD_VAR 0 1
24353: PUSH
24354: LD_EXP 84
24358: PUSH
24359: LD_VAR 0 5
24363: ARRAY
24364: PUSH
24365: LD_INT 2
24367: ARRAY
24368: EQUAL
24369: IFFALSE 24445
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
24371: LD_ADDR_EXP 84
24375: PUSH
24376: LD_EXP 84
24380: PPUSH
24381: LD_VAR 0 5
24385: PPUSH
24386: CALL_OW 3
24390: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
24391: LD_ADDR_EXP 84
24395: PUSH
24396: LD_EXP 84
24400: PPUSH
24401: LD_VAR 0 1
24405: PPUSH
24406: CALL_OW 255
24410: PUSH
24411: LD_VAR 0 1
24415: PUSH
24416: LD_VAR 0 2
24420: PUSH
24421: LD_VAR 0 3
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: PPUSH
24432: CALL 70279 0 2
24436: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24437: CALL 24504 0 0
// exit ;
24441: POP
24442: POP
24443: GO 24499
// end ; end ;
24445: GO 24284
24447: POP
24448: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
24449: LD_ADDR_EXP 84
24453: PUSH
24454: LD_EXP 84
24458: PPUSH
24459: LD_VAR 0 1
24463: PPUSH
24464: CALL_OW 255
24468: PUSH
24469: LD_VAR 0 1
24473: PUSH
24474: LD_VAR 0 2
24478: PUSH
24479: LD_VAR 0 3
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: PPUSH
24490: CALL 70279 0 2
24494: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24495: CALL 24504 0 0
// end ;
24499: LD_VAR 0 4
24503: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
24504: LD_INT 0
24506: PPUSH
24507: PPUSH
24508: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24509: LD_STRING resetFactoryWaypoint();
24511: PPUSH
24512: CALL_OW 559
// if factoryWaypoints then
24516: LD_EXP 84
24520: IFFALSE 24641
// begin list := factoryWaypoints ;
24522: LD_ADDR_VAR 0 3
24526: PUSH
24527: LD_EXP 84
24531: ST_TO_ADDR
// for i := 1 to list do
24532: LD_ADDR_VAR 0 2
24536: PUSH
24537: DOUBLE
24538: LD_INT 1
24540: DEC
24541: ST_TO_ADDR
24542: LD_VAR 0 3
24546: PUSH
24547: FOR_TO
24548: IFFALSE 24639
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24550: LD_STRING setFactoryWaypointXY(
24552: PUSH
24553: LD_VAR 0 3
24557: PUSH
24558: LD_VAR 0 2
24562: ARRAY
24563: PUSH
24564: LD_INT 1
24566: ARRAY
24567: STR
24568: PUSH
24569: LD_STRING ,
24571: STR
24572: PUSH
24573: LD_VAR 0 3
24577: PUSH
24578: LD_VAR 0 2
24582: ARRAY
24583: PUSH
24584: LD_INT 2
24586: ARRAY
24587: STR
24588: PUSH
24589: LD_STRING ,
24591: STR
24592: PUSH
24593: LD_VAR 0 3
24597: PUSH
24598: LD_VAR 0 2
24602: ARRAY
24603: PUSH
24604: LD_INT 3
24606: ARRAY
24607: STR
24608: PUSH
24609: LD_STRING ,
24611: STR
24612: PUSH
24613: LD_VAR 0 3
24617: PUSH
24618: LD_VAR 0 2
24622: ARRAY
24623: PUSH
24624: LD_INT 4
24626: ARRAY
24627: STR
24628: PUSH
24629: LD_STRING )
24631: STR
24632: PPUSH
24633: CALL_OW 559
24637: GO 24547
24639: POP
24640: POP
// end ; end ;
24641: LD_VAR 0 1
24645: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
24646: LD_INT 0
24648: PPUSH
// if HexInfo ( x , y ) = warehouse then
24649: LD_VAR 0 2
24653: PPUSH
24654: LD_VAR 0 3
24658: PPUSH
24659: CALL_OW 428
24663: PUSH
24664: LD_VAR 0 1
24668: EQUAL
24669: IFFALSE 24696
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
24671: LD_ADDR_EXP 86
24675: PUSH
24676: LD_EXP 86
24680: PPUSH
24681: LD_VAR 0 1
24685: PPUSH
24686: LD_INT 0
24688: PPUSH
24689: CALL_OW 1
24693: ST_TO_ADDR
24694: GO 24747
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
24696: LD_ADDR_EXP 86
24700: PUSH
24701: LD_EXP 86
24705: PPUSH
24706: LD_VAR 0 1
24710: PPUSH
24711: LD_VAR 0 1
24715: PPUSH
24716: CALL_OW 255
24720: PUSH
24721: LD_VAR 0 1
24725: PUSH
24726: LD_VAR 0 2
24730: PUSH
24731: LD_VAR 0 3
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: PPUSH
24742: CALL_OW 1
24746: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
24747: CALL 24756 0 0
// end ;
24751: LD_VAR 0 4
24755: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
24756: LD_INT 0
24758: PPUSH
24759: PPUSH
24760: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
24761: LD_STRING resetWarehouseGatheringPoints();
24763: PPUSH
24764: CALL_OW 559
// if warehouseGatheringPoints then
24768: LD_EXP 86
24772: IFFALSE 24898
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
24774: LD_ADDR_VAR 0 3
24778: PUSH
24779: LD_EXP 86
24783: PPUSH
24784: CALL 74213 0 1
24788: ST_TO_ADDR
// for i := 1 to list do
24789: LD_ADDR_VAR 0 2
24793: PUSH
24794: DOUBLE
24795: LD_INT 1
24797: DEC
24798: ST_TO_ADDR
24799: LD_VAR 0 3
24803: PUSH
24804: FOR_TO
24805: IFFALSE 24896
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24807: LD_STRING setWarehouseGatheringPointXY(
24809: PUSH
24810: LD_VAR 0 3
24814: PUSH
24815: LD_VAR 0 2
24819: ARRAY
24820: PUSH
24821: LD_INT 1
24823: ARRAY
24824: STR
24825: PUSH
24826: LD_STRING ,
24828: STR
24829: PUSH
24830: LD_VAR 0 3
24834: PUSH
24835: LD_VAR 0 2
24839: ARRAY
24840: PUSH
24841: LD_INT 2
24843: ARRAY
24844: STR
24845: PUSH
24846: LD_STRING ,
24848: STR
24849: PUSH
24850: LD_VAR 0 3
24854: PUSH
24855: LD_VAR 0 2
24859: ARRAY
24860: PUSH
24861: LD_INT 3
24863: ARRAY
24864: STR
24865: PUSH
24866: LD_STRING ,
24868: STR
24869: PUSH
24870: LD_VAR 0 3
24874: PUSH
24875: LD_VAR 0 2
24879: ARRAY
24880: PUSH
24881: LD_INT 4
24883: ARRAY
24884: STR
24885: PUSH
24886: LD_STRING )
24888: STR
24889: PPUSH
24890: CALL_OW 559
24894: GO 24804
24896: POP
24897: POP
// end ; end ;
24898: LD_VAR 0 1
24902: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
24903: LD_EXP 86
24907: IFFALSE 25602
24909: GO 24911
24911: DISABLE
24912: LD_INT 0
24914: PPUSH
24915: PPUSH
24916: PPUSH
24917: PPUSH
24918: PPUSH
24919: PPUSH
24920: PPUSH
24921: PPUSH
24922: PPUSH
// begin enable ;
24923: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
24924: LD_ADDR_VAR 0 3
24928: PUSH
24929: LD_EXP 86
24933: PPUSH
24934: CALL 74213 0 1
24938: ST_TO_ADDR
// if not list then
24939: LD_VAR 0 3
24943: NOT
24944: IFFALSE 24948
// exit ;
24946: GO 25602
// for i := 1 to list do
24948: LD_ADDR_VAR 0 1
24952: PUSH
24953: DOUBLE
24954: LD_INT 1
24956: DEC
24957: ST_TO_ADDR
24958: LD_VAR 0 3
24962: PUSH
24963: FOR_TO
24964: IFFALSE 25600
// begin depot := list [ i ] [ 2 ] ;
24966: LD_ADDR_VAR 0 8
24970: PUSH
24971: LD_VAR 0 3
24975: PUSH
24976: LD_VAR 0 1
24980: ARRAY
24981: PUSH
24982: LD_INT 2
24984: ARRAY
24985: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
24986: LD_ADDR_VAR 0 5
24990: PUSH
24991: LD_VAR 0 3
24995: PUSH
24996: LD_VAR 0 1
25000: ARRAY
25001: PUSH
25002: LD_INT 1
25004: ARRAY
25005: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
25006: LD_VAR 0 8
25010: PPUSH
25011: CALL_OW 301
25015: IFTRUE 25034
25017: PUSH
25018: LD_VAR 0 5
25022: PUSH
25023: LD_VAR 0 8
25027: PPUSH
25028: CALL_OW 255
25032: NONEQUAL
25033: OR
25034: IFFALSE 25063
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
25036: LD_ADDR_EXP 86
25040: PUSH
25041: LD_EXP 86
25045: PPUSH
25046: LD_VAR 0 8
25050: PPUSH
25051: LD_INT 0
25053: PPUSH
25054: CALL_OW 1
25058: ST_TO_ADDR
// exit ;
25059: POP
25060: POP
25061: GO 25602
// end ; x := list [ i ] [ 3 ] ;
25063: LD_ADDR_VAR 0 6
25067: PUSH
25068: LD_VAR 0 3
25072: PUSH
25073: LD_VAR 0 1
25077: ARRAY
25078: PUSH
25079: LD_INT 3
25081: ARRAY
25082: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
25083: LD_ADDR_VAR 0 7
25087: PUSH
25088: LD_VAR 0 3
25092: PUSH
25093: LD_VAR 0 1
25097: ARRAY
25098: PUSH
25099: LD_INT 4
25101: ARRAY
25102: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
25103: LD_ADDR_VAR 0 9
25107: PUSH
25108: LD_VAR 0 6
25112: PPUSH
25113: LD_VAR 0 7
25117: PPUSH
25118: LD_INT 16
25120: PPUSH
25121: CALL 72787 0 3
25125: ST_TO_ADDR
// if not cratesNearbyPoint then
25126: LD_VAR 0 9
25130: NOT
25131: IFFALSE 25137
// exit ;
25133: POP
25134: POP
25135: GO 25602
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
25137: LD_ADDR_VAR 0 4
25141: PUSH
25142: LD_INT 22
25144: PUSH
25145: LD_VAR 0 5
25149: PUSH
25150: EMPTY
25151: LIST
25152: LIST
25153: PUSH
25154: LD_INT 3
25156: PUSH
25157: LD_INT 60
25159: PUSH
25160: EMPTY
25161: LIST
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PUSH
25167: LD_INT 91
25169: PUSH
25170: LD_VAR 0 8
25174: PUSH
25175: LD_INT 6
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: LIST
25182: PUSH
25183: LD_INT 2
25185: PUSH
25186: LD_INT 25
25188: PUSH
25189: LD_INT 2
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 25
25198: PUSH
25199: LD_INT 16
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: LIST
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: PPUSH
25217: CALL_OW 69
25221: PUSH
25222: LD_VAR 0 8
25226: PPUSH
25227: CALL_OW 313
25231: PPUSH
25232: LD_INT 3
25234: PUSH
25235: LD_INT 60
25237: PUSH
25238: EMPTY
25239: LIST
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: PUSH
25245: LD_INT 2
25247: PUSH
25248: LD_INT 25
25250: PUSH
25251: LD_INT 2
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 25
25260: PUSH
25261: LD_INT 16
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: LIST
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PPUSH
25277: CALL_OW 72
25281: UNION
25282: ST_TO_ADDR
// if tmp then
25283: LD_VAR 0 4
25287: IFFALSE 25367
// begin tmp := ShrinkArray ( tmp , 3 ) ;
25289: LD_ADDR_VAR 0 4
25293: PUSH
25294: LD_VAR 0 4
25298: PPUSH
25299: LD_INT 3
25301: PPUSH
25302: CALL 70594 0 2
25306: ST_TO_ADDR
// for j in tmp do
25307: LD_ADDR_VAR 0 2
25311: PUSH
25312: LD_VAR 0 4
25316: PUSH
25317: FOR_IN
25318: IFFALSE 25361
// begin if IsInUnit ( j ) then
25320: LD_VAR 0 2
25324: PPUSH
25325: CALL_OW 310
25329: IFFALSE 25340
// ComExit ( j ) ;
25331: LD_VAR 0 2
25335: PPUSH
25336: CALL 70677 0 1
// AddComCollect ( j , x , y ) ;
25340: LD_VAR 0 2
25344: PPUSH
25345: LD_VAR 0 6
25349: PPUSH
25350: LD_VAR 0 7
25354: PPUSH
25355: CALL_OW 177
// end ;
25359: GO 25317
25361: POP
25362: POP
// exit ;
25363: POP
25364: POP
25365: GO 25602
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
25367: LD_ADDR_VAR 0 4
25371: PUSH
25372: LD_INT 22
25374: PUSH
25375: LD_VAR 0 5
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: PUSH
25384: LD_INT 91
25386: PUSH
25387: LD_VAR 0 8
25391: PUSH
25392: LD_INT 8
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: LIST
25399: PUSH
25400: LD_INT 2
25402: PUSH
25403: LD_INT 34
25405: PUSH
25406: LD_INT 12
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: LD_INT 34
25415: PUSH
25416: LD_INT 51
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: PUSH
25423: LD_INT 34
25425: PUSH
25426: LD_INT 32
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: LD_INT 34
25435: PUSH
25436: LD_INT 89
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PUSH
25443: EMPTY
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: LIST
25454: PPUSH
25455: CALL_OW 69
25459: ST_TO_ADDR
// if tmp then
25460: LD_VAR 0 4
25464: IFFALSE 25598
// begin for j in tmp do
25466: LD_ADDR_VAR 0 2
25470: PUSH
25471: LD_VAR 0 4
25475: PUSH
25476: FOR_IN
25477: IFFALSE 25596
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
25479: LD_VAR 0 2
25483: PPUSH
25484: CALL_OW 262
25488: PUSH
25489: LD_INT 3
25491: EQUAL
25492: IFTRUE 25509
25494: PUSH
25495: LD_VAR 0 2
25499: PPUSH
25500: CALL_OW 261
25504: PUSH
25505: LD_INT 20
25507: GREATER
25508: OR
25509: IFFALSE 25523
25511: PUSH
25512: LD_VAR 0 2
25516: PPUSH
25517: CALL_OW 314
25521: NOT
25522: AND
25523: IFFALSE 25553
25525: PUSH
25526: LD_VAR 0 2
25530: PPUSH
25531: CALL_OW 263
25535: PUSH
25536: LD_INT 1
25538: NONEQUAL
25539: IFTRUE 25552
25541: PUSH
25542: LD_VAR 0 2
25546: PPUSH
25547: CALL_OW 311
25551: OR
25552: AND
25553: IFFALSE 25594
// begin ComCollect ( j , x , y ) ;
25555: LD_VAR 0 2
25559: PPUSH
25560: LD_VAR 0 6
25564: PPUSH
25565: LD_VAR 0 7
25569: PPUSH
25570: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
25574: LD_VAR 0 2
25578: PPUSH
25579: LD_VAR 0 8
25583: PPUSH
25584: CALL_OW 172
// exit ;
25588: POP
25589: POP
25590: POP
25591: POP
25592: GO 25602
// end ;
25594: GO 25476
25596: POP
25597: POP
// end ; end ;
25598: GO 24963
25600: POP
25601: POP
// end ; end_of_file
25602: PPOPN 9
25604: END
// export function SOS_UnitDestroyed ( un ) ; begin
25605: LD_INT 0
25607: PPUSH
// ComRadiation ( un ) ;
25608: LD_VAR 0 1
25612: PPUSH
25613: CALL 26775 0 1
// end ;
25617: LD_VAR 0 2
25621: RET
// export function SOS_UnitKamikazed ( un ) ; begin
25622: LD_INT 0
25624: PPUSH
// ComRadiation ( un ) ;
25625: LD_VAR 0 1
25629: PPUSH
25630: CALL 26775 0 1
// end ;
25634: LD_VAR 0 2
25638: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25639: LD_INT 0
25641: PPUSH
// end ;
25642: LD_VAR 0 4
25646: RET
// export function SOS_Command ( cmd ) ; begin
25647: LD_INT 0
25649: PPUSH
// end ;
25650: LD_VAR 0 2
25654: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25655: LD_INT 0
25657: PPUSH
// end ;
25658: LD_VAR 0 6
25662: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
25663: LD_INT 0
25665: PPUSH
25666: PPUSH
25667: PPUSH
25668: PPUSH
25669: PPUSH
// if not vehicle or not factory then
25670: LD_VAR 0 1
25674: NOT
25675: IFTRUE 25684
25677: PUSH
25678: LD_VAR 0 2
25682: NOT
25683: OR
25684: IFFALSE 25688
// exit ;
25686: GO 26350
// weapon := GetWeapon ( vehicle ) ;
25688: LD_ADDR_VAR 0 7
25692: PUSH
25693: LD_VAR 0 1
25697: PPUSH
25698: CALL_OW 264
25702: ST_TO_ADDR
// if weapon = ar_miner then
25703: LD_VAR 0 7
25707: PUSH
25708: LD_INT 81
25710: EQUAL
25711: IFFALSE 25768
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
25713: LD_ADDR_EXP 95
25717: PUSH
25718: LD_EXP 95
25722: PPUSH
25723: LD_EXP 95
25727: PUSH
25728: LD_INT 1
25730: PLUS
25731: PPUSH
25732: LD_VAR 0 1
25736: PPUSH
25737: CALL_OW 1
25741: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25742: LD_ADDR_EXP 96
25746: PUSH
25747: LD_EXP 96
25751: PPUSH
25752: LD_EXP 96
25756: PUSH
25757: LD_INT 1
25759: PLUS
25760: PPUSH
25761: EMPTY
25762: PPUSH
25763: CALL_OW 1
25767: ST_TO_ADDR
// end ; if not factoryWaypoints then
25768: LD_EXP 84
25772: NOT
25773: IFFALSE 25777
// exit ;
25775: GO 26350
// for i := 1 to Count ( factoryWaypoints ) do
25777: LD_ADDR_VAR 0 4
25781: PUSH
25782: DOUBLE
25783: LD_INT 1
25785: DEC
25786: ST_TO_ADDR
25787: LD_EXP 84
25791: PPUSH
25792: CALL 34303 0 1
25796: PUSH
25797: FOR_TO
25798: IFFALSE 26348
// if factoryWaypoints [ i ] [ 2 ] = factory then
25800: LD_EXP 84
25804: PUSH
25805: LD_VAR 0 4
25809: ARRAY
25810: PUSH
25811: LD_INT 2
25813: ARRAY
25814: PUSH
25815: LD_VAR 0 2
25819: EQUAL
25820: IFFALSE 26346
// begin if GetControl ( vehicle ) = control_manual then
25822: LD_VAR 0 1
25826: PPUSH
25827: CALL_OW 263
25831: PUSH
25832: LD_INT 1
25834: EQUAL
25835: IFFALSE 26199
// begin driver := IsDrivenBy ( vehicle ) ;
25837: LD_ADDR_VAR 0 5
25841: PUSH
25842: LD_VAR 0 1
25846: PPUSH
25847: CALL_OW 311
25851: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
25852: LD_VAR 0 5
25856: PUSH
25857: LD_EXP 85
25861: IN
25862: IFTRUE 25876
25864: PUSH
25865: LD_VAR 0 1
25869: PUSH
25870: LD_EXP 85
25874: IN
25875: OR
25876: IFFALSE 25882
// exit ;
25878: POP
25879: POP
25880: GO 26350
// if not HasTask ( driver ) then
25882: LD_VAR 0 5
25886: PPUSH
25887: CALL_OW 314
25891: NOT
25892: IFFALSE 26197
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
25894: LD_ADDR_EXP 85
25898: PUSH
25899: LD_EXP 85
25903: PPUSH
25904: LD_VAR 0 5
25908: PPUSH
25909: CALL 70279 0 2
25913: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
25914: LD_ADDR_EXP 85
25918: PUSH
25919: LD_EXP 85
25923: PPUSH
25924: LD_VAR 0 1
25928: PPUSH
25929: CALL 70279 0 2
25933: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
25934: LD_ADDR_VAR 0 6
25938: PUSH
25939: LD_EXP 84
25943: PUSH
25944: LD_VAR 0 4
25948: ARRAY
25949: PUSH
25950: LD_INT 3
25952: ARRAY
25953: PPUSH
25954: LD_EXP 84
25958: PUSH
25959: LD_VAR 0 4
25963: ARRAY
25964: PUSH
25965: LD_INT 4
25967: ARRAY
25968: PPUSH
25969: CALL_OW 428
25973: ST_TO_ADDR
// if hex then
25974: LD_VAR 0 6
25978: IFFALSE 25996
// ComMoveUnit ( driver , hex ) else
25980: LD_VAR 0 5
25984: PPUSH
25985: LD_VAR 0 6
25989: PPUSH
25990: CALL_OW 112
25994: GO 26080
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
25996: LD_VAR 0 1
26000: PPUSH
26001: LD_EXP 84
26005: PUSH
26006: LD_VAR 0 4
26010: ARRAY
26011: PUSH
26012: LD_INT 3
26014: ARRAY
26015: PPUSH
26016: LD_EXP 84
26020: PUSH
26021: LD_VAR 0 4
26025: ARRAY
26026: PUSH
26027: LD_INT 4
26029: ARRAY
26030: PPUSH
26031: CALL_OW 297
26035: PUSH
26036: LD_INT 0
26038: GREATER
26039: IFFALSE 26080
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
26041: LD_VAR 0 5
26045: PPUSH
26046: LD_EXP 84
26050: PUSH
26051: LD_VAR 0 4
26055: ARRAY
26056: PUSH
26057: LD_INT 3
26059: ARRAY
26060: PPUSH
26061: LD_EXP 84
26065: PUSH
26066: LD_VAR 0 4
26070: ARRAY
26071: PUSH
26072: LD_INT 4
26074: ARRAY
26075: PPUSH
26076: CALL_OW 111
// AddComExitVehicle ( driver ) ;
26080: LD_VAR 0 5
26084: PPUSH
26085: CALL_OW 181
// if Multiplayer then
26089: LD_OWVAR 4
26093: IFFALSE 26142
// begin repeat wait ( 10 ) ;
26095: LD_INT 10
26097: PPUSH
26098: CALL_OW 67
// until not IsInUnit ( driver ) ;
26102: LD_VAR 0 5
26106: PPUSH
26107: CALL_OW 310
26111: NOT
26112: IFFALSE 26095
// if not HasTask ( driver ) then
26114: LD_VAR 0 5
26118: PPUSH
26119: CALL_OW 314
26123: NOT
26124: IFFALSE 26140
// ComEnterUnit ( driver , factory ) ;
26126: LD_VAR 0 5
26130: PPUSH
26131: LD_VAR 0 2
26135: PPUSH
26136: CALL_OW 120
// end else
26140: GO 26156
// AddComEnterUnit ( driver , factory ) ;
26142: LD_VAR 0 5
26146: PPUSH
26147: LD_VAR 0 2
26151: PPUSH
26152: CALL_OW 180
// wait ( 0 0$1 ) ;
26156: LD_INT 35
26158: PPUSH
26159: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
26163: LD_ADDR_EXP 85
26167: PUSH
26168: LD_EXP 85
26172: PUSH
26173: LD_VAR 0 5
26177: DIFF
26178: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
26179: LD_ADDR_EXP 85
26183: PUSH
26184: LD_EXP 85
26188: PUSH
26189: LD_VAR 0 1
26193: DIFF
26194: ST_TO_ADDR
// break ;
26195: GO 26348
// end ; end else
26197: GO 26346
// if GetControl ( vehicle ) = control_remote then
26199: LD_VAR 0 1
26203: PPUSH
26204: CALL_OW 263
26208: PUSH
26209: LD_INT 2
26211: EQUAL
26212: IFFALSE 26298
// begin wait ( 0 0$2 ) ;
26214: LD_INT 70
26216: PPUSH
26217: CALL_OW 67
// repeat wait ( 10 ) ;
26221: LD_INT 10
26223: PPUSH
26224: CALL_OW 67
// Connect ( vehicle ) ;
26228: LD_VAR 0 1
26232: PPUSH
26233: CALL 40581 0 1
// until IsControledBy ( vehicle ) ;
26237: LD_VAR 0 1
26241: PPUSH
26242: CALL_OW 312
26246: IFFALSE 26221
// wait ( 10 ) ;
26248: LD_INT 10
26250: PPUSH
26251: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
26255: LD_VAR 0 1
26259: PPUSH
26260: LD_EXP 84
26264: PUSH
26265: LD_VAR 0 4
26269: ARRAY
26270: PUSH
26271: LD_INT 3
26273: ARRAY
26274: PPUSH
26275: LD_EXP 84
26279: PUSH
26280: LD_VAR 0 4
26284: ARRAY
26285: PUSH
26286: LD_INT 4
26288: ARRAY
26289: PPUSH
26290: CALL_OW 111
// break ;
26294: GO 26348
// end else
26296: GO 26346
// begin wait ( 0 0$3 ) ;
26298: LD_INT 105
26300: PPUSH
26301: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
26305: LD_VAR 0 1
26309: PPUSH
26310: LD_EXP 84
26314: PUSH
26315: LD_VAR 0 4
26319: ARRAY
26320: PUSH
26321: LD_INT 3
26323: ARRAY
26324: PPUSH
26325: LD_EXP 84
26329: PUSH
26330: LD_VAR 0 4
26334: ARRAY
26335: PUSH
26336: LD_INT 4
26338: ARRAY
26339: PPUSH
26340: CALL_OW 111
// break ;
26344: GO 26348
// end ; end ;
26346: GO 25797
26348: POP
26349: POP
// end ;
26350: LD_VAR 0 3
26354: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26355: LD_INT 0
26357: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26358: LD_VAR 0 1
26362: PUSH
26363: LD_INT 250
26365: EQUAL
26366: IFFALSE 26383
26368: PUSH
26369: LD_VAR 0 2
26373: PPUSH
26374: CALL_OW 264
26378: PUSH
26379: LD_INT 81
26381: EQUAL
26382: AND
26383: IFFALSE 26404
// MinerPlaceMine ( unit , x , y ) ;
26385: LD_VAR 0 2
26389: PPUSH
26390: LD_VAR 0 4
26394: PPUSH
26395: LD_VAR 0 5
26399: PPUSH
26400: CALL 29750 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26404: LD_VAR 0 1
26408: PUSH
26409: LD_INT 251
26411: EQUAL
26412: IFFALSE 26429
26414: PUSH
26415: LD_VAR 0 2
26419: PPUSH
26420: CALL_OW 264
26424: PUSH
26425: LD_INT 81
26427: EQUAL
26428: AND
26429: IFFALSE 26450
// MinerDetonateMine ( unit , x , y ) ;
26431: LD_VAR 0 2
26435: PPUSH
26436: LD_VAR 0 4
26440: PPUSH
26441: LD_VAR 0 5
26445: PPUSH
26446: CALL 30157 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26450: LD_VAR 0 1
26454: PUSH
26455: LD_INT 252
26457: EQUAL
26458: IFFALSE 26475
26460: PUSH
26461: LD_VAR 0 2
26465: PPUSH
26466: CALL_OW 264
26470: PUSH
26471: LD_INT 81
26473: EQUAL
26474: AND
26475: IFFALSE 26496
// MinerCreateMinefield ( unit , x , y ) ;
26477: LD_VAR 0 2
26481: PPUSH
26482: LD_VAR 0 4
26486: PPUSH
26487: LD_VAR 0 5
26491: PPUSH
26492: CALL 30389 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26496: LD_VAR 0 1
26500: PUSH
26501: LD_INT 253
26503: EQUAL
26504: IFFALSE 26521
26506: PUSH
26507: LD_VAR 0 2
26511: PPUSH
26512: CALL_OW 257
26516: PUSH
26517: LD_INT 5
26519: EQUAL
26520: AND
26521: IFFALSE 26542
// ComBinocular ( unit , x , y ) ;
26523: LD_VAR 0 2
26527: PPUSH
26528: LD_VAR 0 4
26532: PPUSH
26533: LD_VAR 0 5
26537: PPUSH
26538: CALL 30764 0 3
// if selectedUnit then
26542: LD_VAR 0 3
26546: IFFALSE 26606
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26548: LD_VAR 0 1
26552: PUSH
26553: LD_INT 254
26555: EQUAL
26556: IFFALSE 26573
26558: PUSH
26559: LD_VAR 0 2
26563: PPUSH
26564: CALL_OW 264
26568: PUSH
26569: LD_INT 99
26571: EQUAL
26572: AND
26573: IFFALSE 26590
26575: PUSH
26576: LD_VAR 0 3
26580: PPUSH
26581: CALL_OW 263
26585: PUSH
26586: LD_INT 3
26588: EQUAL
26589: AND
26590: IFFALSE 26606
// HackDestroyVehicle ( unit , selectedUnit ) ;
26592: LD_VAR 0 2
26596: PPUSH
26597: LD_VAR 0 3
26601: PPUSH
26602: CALL 28940 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26606: LD_VAR 0 1
26610: PUSH
26611: LD_INT 255
26613: EQUAL
26614: IFFALSE 26638
26616: PUSH
26617: LD_VAR 0 2
26621: PPUSH
26622: CALL_OW 264
26626: PUSH
26627: LD_INT 14
26629: PUSH
26630: LD_INT 53
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: IN
26637: AND
26638: IFFALSE 26656
26640: PUSH
26641: LD_VAR 0 4
26645: PPUSH
26646: LD_VAR 0 5
26650: PPUSH
26651: CALL_OW 488
26655: AND
26656: IFFALSE 26680
// CutTreeXYR ( unit , x , y , 12 ) ;
26658: LD_VAR 0 2
26662: PPUSH
26663: LD_VAR 0 4
26667: PPUSH
26668: LD_VAR 0 5
26672: PPUSH
26673: LD_INT 12
26675: PPUSH
26676: CALL 26871 0 4
// if cmd = 256 then
26680: LD_VAR 0 1
26684: PUSH
26685: LD_INT 256
26687: EQUAL
26688: IFFALSE 26709
// SetFactoryWaypoint ( unit , x , y ) ;
26690: LD_VAR 0 2
26694: PPUSH
26695: LD_VAR 0 4
26699: PPUSH
26700: LD_VAR 0 5
26704: PPUSH
26705: CALL 24150 0 3
// if cmd = 257 then
26709: LD_VAR 0 1
26713: PUSH
26714: LD_INT 257
26716: EQUAL
26717: IFFALSE 26738
// SetWarehouseGatheringPoint ( unit , x , y ) ;
26719: LD_VAR 0 2
26723: PPUSH
26724: LD_VAR 0 4
26728: PPUSH
26729: LD_VAR 0 5
26733: PPUSH
26734: CALL 24646 0 3
// if cmd = 258 then
26738: LD_VAR 0 1
26742: PUSH
26743: LD_INT 258
26745: EQUAL
26746: IFFALSE 26770
// BurnTreeXYR ( unit , x , y , 8 ) ;
26748: LD_VAR 0 2
26752: PPUSH
26753: LD_VAR 0 4
26757: PPUSH
26758: LD_VAR 0 5
26762: PPUSH
26763: LD_INT 8
26765: PPUSH
26766: CALL 27293 0 4
// end ;
26770: LD_VAR 0 6
26774: RET
// export function ComRadiation ( un ) ; var eff ; begin
26775: LD_INT 0
26777: PPUSH
26778: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
26779: LD_VAR 0 1
26783: PPUSH
26784: CALL_OW 264
26788: PUSH
26789: LD_INT 91
26791: NONEQUAL
26792: IFFALSE 26796
// exit ;
26794: GO 26866
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26796: LD_INT 68
26798: PPUSH
26799: LD_VAR 0 1
26803: PPUSH
26804: CALL_OW 255
26808: PPUSH
26809: CALL_OW 321
26813: PUSH
26814: LD_INT 2
26816: EQUAL
26817: IFFALSE 26829
// eff := 50 else
26819: LD_ADDR_VAR 0 3
26823: PUSH
26824: LD_INT 50
26826: ST_TO_ADDR
26827: GO 26837
// eff := 25 ;
26829: LD_ADDR_VAR 0 3
26833: PUSH
26834: LD_INT 25
26836: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26837: LD_VAR 0 1
26841: PPUSH
26842: CALL_OW 250
26846: PPUSH
26847: LD_VAR 0 1
26851: PPUSH
26852: CALL_OW 251
26856: PPUSH
26857: LD_VAR 0 3
26861: PPUSH
26862: CALL_OW 495
// end ;
26866: LD_VAR 0 2
26870: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26871: LD_INT 0
26873: PPUSH
26874: PPUSH
26875: PPUSH
26876: PPUSH
26877: PPUSH
26878: PPUSH
26879: PPUSH
26880: PPUSH
26881: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
26882: LD_VAR 0 1
26886: PPUSH
26887: CALL_OW 302
26891: NOT
26892: IFTRUE 26911
26894: PUSH
26895: LD_VAR 0 2
26899: PPUSH
26900: LD_VAR 0 3
26904: PPUSH
26905: CALL_OW 488
26909: NOT
26910: OR
26911: IFTRUE 26920
26913: PUSH
26914: LD_VAR 0 4
26918: NOT
26919: OR
26920: IFFALSE 26924
// exit ;
26922: GO 27288
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
26924: LD_VAR 0 1
26928: PPUSH
26929: CALL_OW 437
26933: PPUSH
26934: CALL 34303 0 1
26938: PUSH
26939: LD_INT 10
26941: GREATER
26942: IFFALSE 26946
// exit ;
26944: GO 27288
// list := [ ] ;
26946: LD_ADDR_VAR 0 13
26950: PUSH
26951: EMPTY
26952: ST_TO_ADDR
// if x - r < 0 then
26953: LD_VAR 0 2
26957: PUSH
26958: LD_VAR 0 4
26962: MINUS
26963: PUSH
26964: LD_INT 0
26966: LESS
26967: IFFALSE 26979
// min_x := 0 else
26969: LD_ADDR_VAR 0 7
26973: PUSH
26974: LD_INT 0
26976: ST_TO_ADDR
26977: GO 26995
// min_x := x - r ;
26979: LD_ADDR_VAR 0 7
26983: PUSH
26984: LD_VAR 0 2
26988: PUSH
26989: LD_VAR 0 4
26993: MINUS
26994: ST_TO_ADDR
// if y - r < 0 then
26995: LD_VAR 0 3
26999: PUSH
27000: LD_VAR 0 4
27004: MINUS
27005: PUSH
27006: LD_INT 0
27008: LESS
27009: IFFALSE 27021
// min_y := 0 else
27011: LD_ADDR_VAR 0 8
27015: PUSH
27016: LD_INT 0
27018: ST_TO_ADDR
27019: GO 27037
// min_y := y - r ;
27021: LD_ADDR_VAR 0 8
27025: PUSH
27026: LD_VAR 0 3
27030: PUSH
27031: LD_VAR 0 4
27035: MINUS
27036: ST_TO_ADDR
// max_x := x + r ;
27037: LD_ADDR_VAR 0 9
27041: PUSH
27042: LD_VAR 0 2
27046: PUSH
27047: LD_VAR 0 4
27051: PLUS
27052: ST_TO_ADDR
// max_y := y + r ;
27053: LD_ADDR_VAR 0 10
27057: PUSH
27058: LD_VAR 0 3
27062: PUSH
27063: LD_VAR 0 4
27067: PLUS
27068: ST_TO_ADDR
// for _x = min_x to max_x do
27069: LD_ADDR_VAR 0 11
27073: PUSH
27074: DOUBLE
27075: LD_VAR 0 7
27079: DEC
27080: ST_TO_ADDR
27081: LD_VAR 0 9
27085: PUSH
27086: FOR_TO
27087: IFFALSE 27206
// for _y = min_y to max_y do
27089: LD_ADDR_VAR 0 12
27093: PUSH
27094: DOUBLE
27095: LD_VAR 0 8
27099: DEC
27100: ST_TO_ADDR
27101: LD_VAR 0 10
27105: PUSH
27106: FOR_TO
27107: IFFALSE 27202
// begin if not ValidHex ( _x , _y ) then
27109: LD_VAR 0 11
27113: PPUSH
27114: LD_VAR 0 12
27118: PPUSH
27119: CALL_OW 488
27123: NOT
27124: IFFALSE 27128
// continue ;
27126: GO 27106
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27128: LD_VAR 0 11
27132: PPUSH
27133: LD_VAR 0 12
27137: PPUSH
27138: CALL_OW 351
27142: IFFALSE 27160
27144: PUSH
27145: LD_VAR 0 11
27149: PPUSH
27150: LD_VAR 0 12
27154: PPUSH
27155: CALL_OW 554
27159: AND
27160: IFFALSE 27200
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27162: LD_ADDR_VAR 0 13
27166: PUSH
27167: LD_VAR 0 13
27171: PPUSH
27172: LD_VAR 0 13
27176: PUSH
27177: LD_INT 1
27179: PLUS
27180: PPUSH
27181: LD_VAR 0 11
27185: PUSH
27186: LD_VAR 0 12
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PPUSH
27195: CALL_OW 2
27199: ST_TO_ADDR
// end ;
27200: GO 27106
27202: POP
27203: POP
27204: GO 27086
27206: POP
27207: POP
// if not list then
27208: LD_VAR 0 13
27212: NOT
27213: IFFALSE 27217
// exit ;
27215: GO 27288
// for i in list do
27217: LD_ADDR_VAR 0 6
27221: PUSH
27222: LD_VAR 0 13
27226: PUSH
27227: FOR_IN
27228: IFFALSE 27286
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27230: LD_VAR 0 1
27234: PPUSH
27235: LD_STRING M
27237: PUSH
27238: LD_VAR 0 6
27242: PUSH
27243: LD_INT 1
27245: ARRAY
27246: PUSH
27247: LD_VAR 0 6
27251: PUSH
27252: LD_INT 2
27254: ARRAY
27255: PUSH
27256: LD_INT 0
27258: PUSH
27259: LD_INT 0
27261: PUSH
27262: LD_INT 0
27264: PUSH
27265: LD_INT 0
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: PUSH
27277: EMPTY
27278: LIST
27279: PPUSH
27280: CALL_OW 447
27284: GO 27227
27286: POP
27287: POP
// end ;
27288: LD_VAR 0 5
27292: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
27293: LD_INT 0
27295: PPUSH
27296: PPUSH
27297: PPUSH
27298: PPUSH
27299: PPUSH
27300: PPUSH
27301: PPUSH
27302: PPUSH
27303: PPUSH
27304: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
27305: LD_VAR 0 1
27309: PPUSH
27310: CALL_OW 302
27314: NOT
27315: IFTRUE 27334
27317: PUSH
27318: LD_VAR 0 2
27322: PPUSH
27323: LD_VAR 0 3
27327: PPUSH
27328: CALL_OW 488
27332: NOT
27333: OR
27334: IFTRUE 27343
27336: PUSH
27337: LD_VAR 0 4
27341: NOT
27342: OR
27343: IFFALSE 27347
// exit ;
27345: GO 27886
// if Count ( GetTaskList ( flame ) ) > 10 then
27347: LD_VAR 0 1
27351: PPUSH
27352: CALL_OW 437
27356: PPUSH
27357: CALL 34303 0 1
27361: PUSH
27362: LD_INT 10
27364: GREATER
27365: IFFALSE 27369
// exit ;
27367: GO 27886
// list := [ ] ;
27369: LD_ADDR_VAR 0 13
27373: PUSH
27374: EMPTY
27375: ST_TO_ADDR
// if x - r < 0 then
27376: LD_VAR 0 2
27380: PUSH
27381: LD_VAR 0 4
27385: MINUS
27386: PUSH
27387: LD_INT 0
27389: LESS
27390: IFFALSE 27402
// min_x := 0 else
27392: LD_ADDR_VAR 0 7
27396: PUSH
27397: LD_INT 0
27399: ST_TO_ADDR
27400: GO 27418
// min_x := x - r ;
27402: LD_ADDR_VAR 0 7
27406: PUSH
27407: LD_VAR 0 2
27411: PUSH
27412: LD_VAR 0 4
27416: MINUS
27417: ST_TO_ADDR
// if y - r < 0 then
27418: LD_VAR 0 3
27422: PUSH
27423: LD_VAR 0 4
27427: MINUS
27428: PUSH
27429: LD_INT 0
27431: LESS
27432: IFFALSE 27444
// min_y := 0 else
27434: LD_ADDR_VAR 0 8
27438: PUSH
27439: LD_INT 0
27441: ST_TO_ADDR
27442: GO 27460
// min_y := y - r ;
27444: LD_ADDR_VAR 0 8
27448: PUSH
27449: LD_VAR 0 3
27453: PUSH
27454: LD_VAR 0 4
27458: MINUS
27459: ST_TO_ADDR
// max_x := x + r ;
27460: LD_ADDR_VAR 0 9
27464: PUSH
27465: LD_VAR 0 2
27469: PUSH
27470: LD_VAR 0 4
27474: PLUS
27475: ST_TO_ADDR
// max_y := y + r ;
27476: LD_ADDR_VAR 0 10
27480: PUSH
27481: LD_VAR 0 3
27485: PUSH
27486: LD_VAR 0 4
27490: PLUS
27491: ST_TO_ADDR
// for _x = min_x to max_x do
27492: LD_ADDR_VAR 0 11
27496: PUSH
27497: DOUBLE
27498: LD_VAR 0 7
27502: DEC
27503: ST_TO_ADDR
27504: LD_VAR 0 9
27508: PUSH
27509: FOR_TO
27510: IFFALSE 27629
// for _y = min_y to max_y do
27512: LD_ADDR_VAR 0 12
27516: PUSH
27517: DOUBLE
27518: LD_VAR 0 8
27522: DEC
27523: ST_TO_ADDR
27524: LD_VAR 0 10
27528: PUSH
27529: FOR_TO
27530: IFFALSE 27625
// begin if not ValidHex ( _x , _y ) then
27532: LD_VAR 0 11
27536: PPUSH
27537: LD_VAR 0 12
27541: PPUSH
27542: CALL_OW 488
27546: NOT
27547: IFFALSE 27551
// continue ;
27549: GO 27529
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27551: LD_VAR 0 11
27555: PPUSH
27556: LD_VAR 0 12
27560: PPUSH
27561: CALL_OW 351
27565: IFFALSE 27583
27567: PUSH
27568: LD_VAR 0 11
27572: PPUSH
27573: LD_VAR 0 12
27577: PPUSH
27578: CALL_OW 554
27582: AND
27583: IFFALSE 27623
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27585: LD_ADDR_VAR 0 13
27589: PUSH
27590: LD_VAR 0 13
27594: PPUSH
27595: LD_VAR 0 13
27599: PUSH
27600: LD_INT 1
27602: PLUS
27603: PPUSH
27604: LD_VAR 0 11
27608: PUSH
27609: LD_VAR 0 12
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PPUSH
27618: CALL_OW 2
27622: ST_TO_ADDR
// end ;
27623: GO 27529
27625: POP
27626: POP
27627: GO 27509
27629: POP
27630: POP
// if not list then
27631: LD_VAR 0 13
27635: NOT
27636: IFFALSE 27640
// exit ;
27638: GO 27886
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
27640: LD_ADDR_VAR 0 13
27644: PUSH
27645: LD_VAR 0 1
27649: PPUSH
27650: LD_VAR 0 13
27654: PPUSH
27655: LD_INT 1
27657: PPUSH
27658: LD_INT 1
27660: PPUSH
27661: CALL 37709 0 4
27665: ST_TO_ADDR
// ComStop ( flame ) ;
27666: LD_VAR 0 1
27670: PPUSH
27671: CALL_OW 141
// for i in list do
27675: LD_ADDR_VAR 0 6
27679: PUSH
27680: LD_VAR 0 13
27684: PUSH
27685: FOR_IN
27686: IFFALSE 27717
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
27688: LD_VAR 0 1
27692: PPUSH
27693: LD_VAR 0 6
27697: PUSH
27698: LD_INT 1
27700: ARRAY
27701: PPUSH
27702: LD_VAR 0 6
27706: PUSH
27707: LD_INT 2
27709: ARRAY
27710: PPUSH
27711: CALL_OW 176
27715: GO 27685
27717: POP
27718: POP
// repeat wait ( 0 0$1 ) ;
27719: LD_INT 35
27721: PPUSH
27722: CALL_OW 67
// task := GetTaskList ( flame ) ;
27726: LD_ADDR_VAR 0 14
27730: PUSH
27731: LD_VAR 0 1
27735: PPUSH
27736: CALL_OW 437
27740: ST_TO_ADDR
// if not task then
27741: LD_VAR 0 14
27745: NOT
27746: IFFALSE 27750
// exit ;
27748: GO 27886
// if task [ 1 ] [ 1 ] <> | then
27750: LD_VAR 0 14
27754: PUSH
27755: LD_INT 1
27757: ARRAY
27758: PUSH
27759: LD_INT 1
27761: ARRAY
27762: PUSH
27763: LD_STRING |
27765: NONEQUAL
27766: IFFALSE 27770
// exit ;
27768: GO 27886
// _x := task [ 1 ] [ 2 ] ;
27770: LD_ADDR_VAR 0 11
27774: PUSH
27775: LD_VAR 0 14
27779: PUSH
27780: LD_INT 1
27782: ARRAY
27783: PUSH
27784: LD_INT 2
27786: ARRAY
27787: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
27788: LD_ADDR_VAR 0 12
27792: PUSH
27793: LD_VAR 0 14
27797: PUSH
27798: LD_INT 1
27800: ARRAY
27801: PUSH
27802: LD_INT 3
27804: ARRAY
27805: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
27806: LD_VAR 0 11
27810: PPUSH
27811: LD_VAR 0 12
27815: PPUSH
27816: CALL_OW 351
27820: NOT
27821: IFTRUE 27840
27823: PUSH
27824: LD_VAR 0 11
27828: PPUSH
27829: LD_VAR 0 12
27833: PPUSH
27834: CALL_OW 554
27838: NOT
27839: OR
27840: IFFALSE 27874
// begin task := Delete ( task , 1 ) ;
27842: LD_ADDR_VAR 0 14
27846: PUSH
27847: LD_VAR 0 14
27851: PPUSH
27852: LD_INT 1
27854: PPUSH
27855: CALL_OW 3
27859: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
27860: LD_VAR 0 1
27864: PPUSH
27865: LD_VAR 0 14
27869: PPUSH
27870: CALL_OW 446
// end ; until not HasTask ( flame ) ;
27874: LD_VAR 0 1
27878: PPUSH
27879: CALL_OW 314
27883: NOT
27884: IFFALSE 27719
// end ;
27886: LD_VAR 0 5
27890: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27891: LD_EXP 88
27895: NOT
27896: IFFALSE 27946
27898: GO 27900
27900: DISABLE
// begin initHack := true ;
27901: LD_ADDR_EXP 88
27905: PUSH
27906: LD_INT 1
27908: ST_TO_ADDR
// hackTanks := [ ] ;
27909: LD_ADDR_EXP 89
27913: PUSH
27914: EMPTY
27915: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27916: LD_ADDR_EXP 90
27920: PUSH
27921: EMPTY
27922: ST_TO_ADDR
// hackLimit := 3 ;
27923: LD_ADDR_EXP 91
27927: PUSH
27928: LD_INT 3
27930: ST_TO_ADDR
// hackDist := 12 ;
27931: LD_ADDR_EXP 92
27935: PUSH
27936: LD_INT 12
27938: ST_TO_ADDR
// hackCounter := [ ] ;
27939: LD_ADDR_EXP 93
27943: PUSH
27944: EMPTY
27945: ST_TO_ADDR
// end ;
27946: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27947: LD_EXP 88
27951: IFFALSE 27969
27953: PUSH
27954: LD_INT 34
27956: PUSH
27957: LD_INT 99
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PPUSH
27964: CALL_OW 69
27968: AND
27969: IFFALSE 28222
27971: GO 27973
27973: DISABLE
27974: LD_INT 0
27976: PPUSH
27977: PPUSH
// begin enable ;
27978: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27979: LD_ADDR_VAR 0 1
27983: PUSH
27984: LD_INT 34
27986: PUSH
27987: LD_INT 99
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: PPUSH
27994: CALL_OW 69
27998: PUSH
27999: FOR_IN
28000: IFFALSE 28220
// begin if not i in hackTanks then
28002: LD_VAR 0 1
28006: PUSH
28007: LD_EXP 89
28011: IN
28012: NOT
28013: IFFALSE 28096
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28015: LD_ADDR_EXP 89
28019: PUSH
28020: LD_EXP 89
28024: PPUSH
28025: LD_EXP 89
28029: PUSH
28030: LD_INT 1
28032: PLUS
28033: PPUSH
28034: LD_VAR 0 1
28038: PPUSH
28039: CALL_OW 1
28043: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28044: LD_ADDR_EXP 90
28048: PUSH
28049: LD_EXP 90
28053: PPUSH
28054: LD_EXP 90
28058: PUSH
28059: LD_INT 1
28061: PLUS
28062: PPUSH
28063: EMPTY
28064: PPUSH
28065: CALL_OW 1
28069: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28070: LD_ADDR_EXP 93
28074: PUSH
28075: LD_EXP 93
28079: PPUSH
28080: LD_EXP 93
28084: PUSH
28085: LD_INT 1
28087: PLUS
28088: PPUSH
28089: EMPTY
28090: PPUSH
28091: CALL_OW 1
28095: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28096: LD_VAR 0 1
28100: PPUSH
28101: CALL_OW 302
28105: NOT
28106: IFFALSE 28119
// begin HackUnlinkAll ( i ) ;
28108: LD_VAR 0 1
28112: PPUSH
28113: CALL 28225 0 1
// continue ;
28117: GO 27999
// end ; HackCheckCapturedStatus ( i ) ;
28119: LD_VAR 0 1
28123: PPUSH
28124: CALL 28670 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28128: LD_ADDR_VAR 0 2
28132: PUSH
28133: LD_INT 81
28135: PUSH
28136: LD_VAR 0 1
28140: PPUSH
28141: CALL_OW 255
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: PUSH
28150: LD_INT 33
28152: PUSH
28153: LD_INT 3
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: LD_INT 91
28162: PUSH
28163: LD_VAR 0 1
28167: PUSH
28168: LD_EXP 92
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: LIST
28177: PUSH
28178: LD_INT 50
28180: PUSH
28181: EMPTY
28182: LIST
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: LIST
28188: LIST
28189: PPUSH
28190: CALL_OW 69
28194: ST_TO_ADDR
// if not tmp then
28195: LD_VAR 0 2
28199: NOT
28200: IFFALSE 28204
// continue ;
28202: GO 27999
// HackLink ( i , tmp ) ;
28204: LD_VAR 0 1
28208: PPUSH
28209: LD_VAR 0 2
28213: PPUSH
28214: CALL 28361 0 2
// end ;
28218: GO 27999
28220: POP
28221: POP
// end ;
28222: PPOPN 2
28224: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28225: LD_INT 0
28227: PPUSH
28228: PPUSH
28229: PPUSH
// if not hack in hackTanks then
28230: LD_VAR 0 1
28234: PUSH
28235: LD_EXP 89
28239: IN
28240: NOT
28241: IFFALSE 28245
// exit ;
28243: GO 28356
// index := GetElementIndex ( hackTanks , hack ) ;
28245: LD_ADDR_VAR 0 4
28249: PUSH
28250: LD_EXP 89
28254: PPUSH
28255: LD_VAR 0 1
28259: PPUSH
28260: CALL 37004 0 2
28264: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28265: LD_EXP 90
28269: PUSH
28270: LD_VAR 0 4
28274: ARRAY
28275: IFFALSE 28356
// begin for i in hackTanksCaptured [ index ] do
28277: LD_ADDR_VAR 0 3
28281: PUSH
28282: LD_EXP 90
28286: PUSH
28287: LD_VAR 0 4
28291: ARRAY
28292: PUSH
28293: FOR_IN
28294: IFFALSE 28320
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28296: LD_VAR 0 3
28300: PUSH
28301: LD_INT 1
28303: ARRAY
28304: PPUSH
28305: LD_VAR 0 3
28309: PUSH
28310: LD_INT 2
28312: ARRAY
28313: PPUSH
28314: CALL_OW 235
28318: GO 28293
28320: POP
28321: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28322: LD_ADDR_EXP 90
28326: PUSH
28327: LD_EXP 90
28331: PPUSH
28332: LD_VAR 0 4
28336: PPUSH
28337: EMPTY
28338: PPUSH
28339: CALL_OW 1
28343: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28344: LD_VAR 0 1
28348: PPUSH
28349: LD_INT 0
28351: PPUSH
28352: CALL_OW 505
// end ; end ;
28356: LD_VAR 0 2
28360: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28361: LD_INT 0
28363: PPUSH
28364: PPUSH
28365: PPUSH
// if not hack in hackTanks or not vehicles then
28366: LD_VAR 0 1
28370: PUSH
28371: LD_EXP 89
28375: IN
28376: NOT
28377: IFTRUE 28386
28379: PUSH
28380: LD_VAR 0 2
28384: NOT
28385: OR
28386: IFFALSE 28390
// exit ;
28388: GO 28665
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28390: LD_ADDR_VAR 0 2
28394: PUSH
28395: LD_VAR 0 1
28399: PPUSH
28400: LD_VAR 0 2
28404: PPUSH
28405: LD_INT 1
28407: PPUSH
28408: LD_INT 1
28410: PPUSH
28411: CALL 37656 0 4
28415: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28416: LD_ADDR_VAR 0 5
28420: PUSH
28421: LD_EXP 89
28425: PPUSH
28426: LD_VAR 0 1
28430: PPUSH
28431: CALL 37004 0 2
28435: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28436: LD_EXP 90
28440: PUSH
28441: LD_VAR 0 5
28445: ARRAY
28446: PUSH
28447: LD_EXP 91
28451: LESS
28452: IFFALSE 28641
// begin for i := 1 to vehicles do
28454: LD_ADDR_VAR 0 4
28458: PUSH
28459: DOUBLE
28460: LD_INT 1
28462: DEC
28463: ST_TO_ADDR
28464: LD_VAR 0 2
28468: PUSH
28469: FOR_TO
28470: IFFALSE 28639
// begin if hackTanksCaptured [ index ] = hackLimit then
28472: LD_EXP 90
28476: PUSH
28477: LD_VAR 0 5
28481: ARRAY
28482: PUSH
28483: LD_EXP 91
28487: EQUAL
28488: IFFALSE 28492
// break ;
28490: GO 28639
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28492: LD_ADDR_EXP 93
28496: PUSH
28497: LD_EXP 93
28501: PPUSH
28502: LD_VAR 0 5
28506: PPUSH
28507: LD_EXP 93
28511: PUSH
28512: LD_VAR 0 5
28516: ARRAY
28517: PUSH
28518: LD_INT 1
28520: PLUS
28521: PPUSH
28522: CALL_OW 1
28526: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28527: LD_ADDR_EXP 90
28531: PUSH
28532: LD_EXP 90
28536: PPUSH
28537: LD_VAR 0 5
28541: PUSH
28542: LD_EXP 90
28546: PUSH
28547: LD_VAR 0 5
28551: ARRAY
28552: PUSH
28553: LD_INT 1
28555: PLUS
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PPUSH
28561: LD_VAR 0 2
28565: PUSH
28566: LD_VAR 0 4
28570: ARRAY
28571: PUSH
28572: LD_VAR 0 2
28576: PUSH
28577: LD_VAR 0 4
28581: ARRAY
28582: PPUSH
28583: CALL_OW 255
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PPUSH
28592: CALL 37221 0 3
28596: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28597: LD_VAR 0 2
28601: PUSH
28602: LD_VAR 0 4
28606: ARRAY
28607: PPUSH
28608: LD_VAR 0 1
28612: PPUSH
28613: CALL_OW 255
28617: PPUSH
28618: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28622: LD_VAR 0 2
28626: PUSH
28627: LD_VAR 0 4
28631: ARRAY
28632: PPUSH
28633: CALL_OW 141
// end ;
28637: GO 28469
28639: POP
28640: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28641: LD_VAR 0 1
28645: PPUSH
28646: LD_EXP 90
28650: PUSH
28651: LD_VAR 0 5
28655: ARRAY
28656: PUSH
28657: LD_INT 0
28659: PLUS
28660: PPUSH
28661: CALL_OW 505
// end ;
28665: LD_VAR 0 3
28669: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28670: LD_INT 0
28672: PPUSH
28673: PPUSH
28674: PPUSH
28675: PPUSH
// if not hack in hackTanks then
28676: LD_VAR 0 1
28680: PUSH
28681: LD_EXP 89
28685: IN
28686: NOT
28687: IFFALSE 28691
// exit ;
28689: GO 28935
// index := GetElementIndex ( hackTanks , hack ) ;
28691: LD_ADDR_VAR 0 4
28695: PUSH
28696: LD_EXP 89
28700: PPUSH
28701: LD_VAR 0 1
28705: PPUSH
28706: CALL 37004 0 2
28710: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28711: LD_ADDR_VAR 0 3
28715: PUSH
28716: DOUBLE
28717: LD_EXP 90
28721: PUSH
28722: LD_VAR 0 4
28726: ARRAY
28727: INC
28728: ST_TO_ADDR
28729: LD_INT 1
28731: PUSH
28732: FOR_DOWNTO
28733: IFFALSE 28909
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28735: LD_ADDR_VAR 0 5
28739: PUSH
28740: LD_EXP 90
28744: PUSH
28745: LD_VAR 0 4
28749: ARRAY
28750: PUSH
28751: LD_VAR 0 3
28755: ARRAY
28756: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28757: LD_VAR 0 5
28761: PUSH
28762: LD_INT 1
28764: ARRAY
28765: PPUSH
28766: CALL_OW 302
28770: NOT
28771: IFTRUE 28799
28773: PUSH
28774: LD_VAR 0 5
28778: PUSH
28779: LD_INT 1
28781: ARRAY
28782: PPUSH
28783: CALL_OW 255
28787: PUSH
28788: LD_VAR 0 1
28792: PPUSH
28793: CALL_OW 255
28797: NONEQUAL
28798: OR
28799: IFFALSE 28907
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28801: LD_VAR 0 5
28805: PUSH
28806: LD_INT 1
28808: ARRAY
28809: PPUSH
28810: CALL_OW 305
28814: IFFALSE 28842
28816: PUSH
28817: LD_VAR 0 5
28821: PUSH
28822: LD_INT 1
28824: ARRAY
28825: PPUSH
28826: CALL_OW 255
28830: PUSH
28831: LD_VAR 0 1
28835: PPUSH
28836: CALL_OW 255
28840: EQUAL
28841: AND
28842: IFFALSE 28866
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28844: LD_VAR 0 5
28848: PUSH
28849: LD_INT 1
28851: ARRAY
28852: PPUSH
28853: LD_VAR 0 5
28857: PUSH
28858: LD_INT 2
28860: ARRAY
28861: PPUSH
28862: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28866: LD_ADDR_EXP 90
28870: PUSH
28871: LD_EXP 90
28875: PPUSH
28876: LD_VAR 0 4
28880: PPUSH
28881: LD_EXP 90
28885: PUSH
28886: LD_VAR 0 4
28890: ARRAY
28891: PPUSH
28892: LD_VAR 0 3
28896: PPUSH
28897: CALL_OW 3
28901: PPUSH
28902: CALL_OW 1
28906: ST_TO_ADDR
// end ; end ;
28907: GO 28732
28909: POP
28910: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28911: LD_VAR 0 1
28915: PPUSH
28916: LD_EXP 90
28920: PUSH
28921: LD_VAR 0 4
28925: ARRAY
28926: PUSH
28927: LD_INT 0
28929: PLUS
28930: PPUSH
28931: CALL_OW 505
// end ;
28935: LD_VAR 0 2
28939: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28940: LD_INT 0
28942: PPUSH
28943: PPUSH
28944: PPUSH
28945: PPUSH
// if not hack in hackTanks then
28946: LD_VAR 0 1
28950: PUSH
28951: LD_EXP 89
28955: IN
28956: NOT
28957: IFFALSE 28961
// exit ;
28959: GO 29046
// index := GetElementIndex ( hackTanks , hack ) ;
28961: LD_ADDR_VAR 0 5
28965: PUSH
28966: LD_EXP 89
28970: PPUSH
28971: LD_VAR 0 1
28975: PPUSH
28976: CALL 37004 0 2
28980: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28981: LD_ADDR_VAR 0 4
28985: PUSH
28986: DOUBLE
28987: LD_INT 1
28989: DEC
28990: ST_TO_ADDR
28991: LD_EXP 90
28995: PUSH
28996: LD_VAR 0 5
29000: ARRAY
29001: PUSH
29002: FOR_TO
29003: IFFALSE 29044
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29005: LD_EXP 90
29009: PUSH
29010: LD_VAR 0 5
29014: ARRAY
29015: PUSH
29016: LD_VAR 0 4
29020: ARRAY
29021: PUSH
29022: LD_INT 1
29024: ARRAY
29025: PUSH
29026: LD_VAR 0 2
29030: EQUAL
29031: IFFALSE 29042
// KillUnit ( vehicle ) ;
29033: LD_VAR 0 2
29037: PPUSH
29038: CALL_OW 66
29042: GO 29002
29044: POP
29045: POP
// end ;
29046: LD_VAR 0 3
29050: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
29051: LD_EXP 94
29055: NOT
29056: IFFALSE 29189
29058: GO 29060
29060: DISABLE
29061: LD_INT 0
29063: PPUSH
// begin initMiner := true ;
29064: LD_ADDR_EXP 94
29068: PUSH
29069: LD_INT 1
29071: ST_TO_ADDR
// minersList := [ ] ;
29072: LD_ADDR_EXP 95
29076: PUSH
29077: EMPTY
29078: ST_TO_ADDR
// minerMinesList := [ ] ;
29079: LD_ADDR_EXP 96
29083: PUSH
29084: EMPTY
29085: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
29086: LD_ADDR_EXP 97
29090: PUSH
29091: LD_INT 10
29093: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29094: LD_ADDR_VAR 0 1
29098: PUSH
29099: LD_INT 34
29101: PUSH
29102: LD_INT 81
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: PPUSH
29109: CALL_OW 69
29113: PUSH
29114: FOR_IN
29115: IFFALSE 29187
// begin if not i in minersList then
29117: LD_VAR 0 1
29121: PUSH
29122: LD_EXP 95
29126: IN
29127: NOT
29128: IFFALSE 29185
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29130: LD_ADDR_EXP 95
29134: PUSH
29135: LD_EXP 95
29139: PPUSH
29140: LD_EXP 95
29144: PUSH
29145: LD_INT 1
29147: PLUS
29148: PPUSH
29149: LD_VAR 0 1
29153: PPUSH
29154: CALL_OW 1
29158: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29159: LD_ADDR_EXP 96
29163: PUSH
29164: LD_EXP 96
29168: PPUSH
29169: LD_EXP 96
29173: PUSH
29174: LD_INT 1
29176: PLUS
29177: PPUSH
29178: EMPTY
29179: PPUSH
29180: CALL_OW 1
29184: ST_TO_ADDR
// end end ;
29185: GO 29114
29187: POP
29188: POP
// end ;
29189: PPOPN 1
29191: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
29192: LD_EXP 94
29196: IFFALSE 29227
29198: PUSH
29199: LD_EXP 96
29203: PPUSH
29204: CALL 34303 0 1
29208: IFTRUE 29226
29210: PUSH
29211: LD_INT 34
29213: PUSH
29214: LD_INT 81
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: PPUSH
29221: CALL_OW 69
29225: OR
29226: AND
29227: IFFALSE 29747
29229: GO 29231
29231: DISABLE
29232: LD_INT 0
29234: PPUSH
29235: PPUSH
29236: PPUSH
29237: PPUSH
// begin enable ;
29238: ENABLE
// for i := minerMinesList downto 1 do
29239: LD_ADDR_VAR 0 1
29243: PUSH
29244: DOUBLE
29245: LD_EXP 96
29249: INC
29250: ST_TO_ADDR
29251: LD_INT 1
29253: PUSH
29254: FOR_DOWNTO
29255: IFFALSE 29745
// begin side := GetSide ( minersList [ i ] ) ;
29257: LD_ADDR_VAR 0 3
29261: PUSH
29262: LD_EXP 95
29266: PUSH
29267: LD_VAR 0 1
29271: ARRAY
29272: PPUSH
29273: CALL_OW 255
29277: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
29278: LD_EXP 95
29282: PUSH
29283: LD_VAR 0 1
29287: ARRAY
29288: PPUSH
29289: CALL_OW 300
29293: IFFALSE 29314
29295: PUSH
29296: LD_VAR 0 3
29300: PUSH
29301: LD_OWVAR 2
29305: PUSH
29306: LD_INT 9
29308: PUSH
29309: EMPTY
29310: LIST
29311: LIST
29312: IN
29313: AND
29314: IFFALSE 29347
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
29316: LD_EXP 95
29320: PUSH
29321: LD_VAR 0 1
29325: ARRAY
29326: PPUSH
29327: LD_EXP 96
29331: PUSH
29332: LD_VAR 0 1
29336: ARRAY
29337: PPUSH
29338: CALL 34303 0 1
29342: PPUSH
29343: CALL_OW 505
// if not minerMinesList [ i ] then
29347: LD_EXP 96
29351: PUSH
29352: LD_VAR 0 1
29356: ARRAY
29357: NOT
29358: IFFALSE 29362
// continue ;
29360: GO 29254
// for j := minerMinesList [ i ] downto 1 do
29362: LD_ADDR_VAR 0 2
29366: PUSH
29367: DOUBLE
29368: LD_EXP 96
29372: PUSH
29373: LD_VAR 0 1
29377: ARRAY
29378: INC
29379: ST_TO_ADDR
29380: LD_INT 1
29382: PUSH
29383: FOR_DOWNTO
29384: IFFALSE 29741
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
29386: LD_EXP 95
29390: PUSH
29391: LD_VAR 0 1
29395: ARRAY
29396: PPUSH
29397: CALL_OW 301
29401: IFTRUE 29421
29403: PUSH
29404: LD_EXP 95
29408: PUSH
29409: LD_VAR 0 1
29413: ARRAY
29414: PPUSH
29415: CALL_OW 305
29419: NOT
29420: OR
29421: IFFALSE 29512
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29423: LD_EXP 96
29427: PUSH
29428: LD_VAR 0 1
29432: ARRAY
29433: PUSH
29434: LD_VAR 0 2
29438: ARRAY
29439: PUSH
29440: LD_INT 1
29442: ARRAY
29443: PPUSH
29444: LD_EXP 96
29448: PUSH
29449: LD_VAR 0 1
29453: ARRAY
29454: PUSH
29455: LD_VAR 0 2
29459: ARRAY
29460: PUSH
29461: LD_INT 2
29463: ARRAY
29464: PPUSH
29465: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29469: LD_ADDR_EXP 96
29473: PUSH
29474: LD_EXP 96
29478: PPUSH
29479: LD_VAR 0 1
29483: PPUSH
29484: LD_EXP 96
29488: PUSH
29489: LD_VAR 0 1
29493: ARRAY
29494: PPUSH
29495: LD_VAR 0 2
29499: PPUSH
29500: CALL_OW 3
29504: PPUSH
29505: CALL_OW 1
29509: ST_TO_ADDR
// continue ;
29510: GO 29383
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29512: LD_ADDR_VAR 0 4
29516: PUSH
29517: LD_EXP 96
29521: PUSH
29522: LD_VAR 0 1
29526: ARRAY
29527: PUSH
29528: LD_VAR 0 2
29532: ARRAY
29533: PUSH
29534: LD_INT 1
29536: ARRAY
29537: PPUSH
29538: LD_EXP 96
29542: PUSH
29543: LD_VAR 0 1
29547: ARRAY
29548: PUSH
29549: LD_VAR 0 2
29553: ARRAY
29554: PUSH
29555: LD_INT 2
29557: ARRAY
29558: PPUSH
29559: CALL_OW 428
29563: ST_TO_ADDR
// if not tmp then
29564: LD_VAR 0 4
29568: NOT
29569: IFFALSE 29573
// continue ;
29571: GO 29383
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29573: LD_VAR 0 4
29577: PUSH
29578: LD_INT 81
29580: PUSH
29581: LD_VAR 0 3
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PPUSH
29590: CALL_OW 69
29594: IN
29595: IFFALSE 29645
29597: PUSH
29598: LD_EXP 96
29602: PUSH
29603: LD_VAR 0 1
29607: ARRAY
29608: PUSH
29609: LD_VAR 0 2
29613: ARRAY
29614: PUSH
29615: LD_INT 1
29617: ARRAY
29618: PPUSH
29619: LD_EXP 96
29623: PUSH
29624: LD_VAR 0 1
29628: ARRAY
29629: PUSH
29630: LD_VAR 0 2
29634: ARRAY
29635: PUSH
29636: LD_INT 2
29638: ARRAY
29639: PPUSH
29640: CALL_OW 458
29644: AND
29645: IFFALSE 29739
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29647: LD_EXP 96
29651: PUSH
29652: LD_VAR 0 1
29656: ARRAY
29657: PUSH
29658: LD_VAR 0 2
29662: ARRAY
29663: PUSH
29664: LD_INT 1
29666: ARRAY
29667: PPUSH
29668: LD_EXP 96
29672: PUSH
29673: LD_VAR 0 1
29677: ARRAY
29678: PUSH
29679: LD_VAR 0 2
29683: ARRAY
29684: PUSH
29685: LD_INT 2
29687: ARRAY
29688: PPUSH
29689: LD_VAR 0 3
29693: PPUSH
29694: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29698: LD_ADDR_EXP 96
29702: PUSH
29703: LD_EXP 96
29707: PPUSH
29708: LD_VAR 0 1
29712: PPUSH
29713: LD_EXP 96
29717: PUSH
29718: LD_VAR 0 1
29722: ARRAY
29723: PPUSH
29724: LD_VAR 0 2
29728: PPUSH
29729: CALL_OW 3
29733: PPUSH
29734: CALL_OW 1
29738: ST_TO_ADDR
// end ; end ;
29739: GO 29383
29741: POP
29742: POP
// end ;
29743: GO 29254
29745: POP
29746: POP
// end ;
29747: PPOPN 4
29749: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
29750: LD_INT 0
29752: PPUSH
29753: PPUSH
29754: PPUSH
29755: PPUSH
// result := false ;
29756: LD_ADDR_VAR 0 4
29760: PUSH
29761: LD_INT 0
29763: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29764: LD_VAR 0 1
29768: PPUSH
29769: CALL_OW 264
29773: PUSH
29774: LD_INT 81
29776: EQUAL
29777: NOT
29778: IFFALSE 29782
// exit ;
29780: GO 30152
// side := GetSide ( unit ) ;
29782: LD_ADDR_VAR 0 6
29786: PUSH
29787: LD_VAR 0 1
29791: PPUSH
29792: CALL_OW 255
29796: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
29797: LD_ADDR_VAR 0 5
29801: PUSH
29802: LD_EXP 95
29806: PPUSH
29807: LD_VAR 0 1
29811: PPUSH
29812: CALL 37004 0 2
29816: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29817: LD_EXP 96
29821: PUSH
29822: LD_VAR 0 5
29826: ARRAY
29827: PUSH
29828: LD_EXP 97
29832: GREATEREQUAL
29833: IFFALSE 29837
// exit ;
29835: GO 30152
// ComMoveXY ( unit , x , y ) ;
29837: LD_VAR 0 1
29841: PPUSH
29842: LD_VAR 0 2
29846: PPUSH
29847: LD_VAR 0 3
29851: PPUSH
29852: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29856: LD_INT 35
29858: PPUSH
29859: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29863: LD_VAR 0 1
29867: PPUSH
29868: LD_VAR 0 2
29872: PPUSH
29873: LD_VAR 0 3
29877: PPUSH
29878: CALL 69060 0 3
29882: NOT
29883: IFFALSE 29896
29885: PUSH
29886: LD_VAR 0 1
29890: PPUSH
29891: CALL_OW 314
29895: AND
29896: IFFALSE 29900
// exit ;
29898: GO 30152
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29900: LD_VAR 0 2
29904: PPUSH
29905: LD_VAR 0 3
29909: PPUSH
29910: CALL_OW 428
29914: PUSH
29915: LD_VAR 0 1
29919: EQUAL
29920: IFFALSE 29934
29922: PUSH
29923: LD_VAR 0 1
29927: PPUSH
29928: CALL_OW 314
29932: NOT
29933: AND
29934: IFFALSE 29856
// if MineAtPos ( x , y ) then
29936: LD_VAR 0 2
29940: PPUSH
29941: LD_VAR 0 3
29945: PPUSH
29946: CALL_OW 458
29950: IFFALSE 29954
// exit ;
29952: GO 30152
// if your_side = side then
29954: LD_OWVAR 2
29958: PUSH
29959: LD_VAR 0 6
29963: EQUAL
29964: IFFALSE 29983
// PlaySoundXY ( x , y , PlantMine ) ;
29966: LD_VAR 0 2
29970: PPUSH
29971: LD_VAR 0 3
29975: PPUSH
29976: LD_STRING PlantMine
29978: PPUSH
29979: CALL_OW 366
// repeat wait ( 1 ) ;
29983: LD_INT 1
29985: PPUSH
29986: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
29990: LD_VAR 0 2
29994: PPUSH
29995: LD_VAR 0 3
29999: PPUSH
30000: LD_VAR 0 6
30004: PPUSH
30005: LD_INT 0
30007: PPUSH
30008: CALL_OW 454
30012: IFFALSE 29983
// if MineAtPos ( x , y ) then
30014: LD_VAR 0 2
30018: PPUSH
30019: LD_VAR 0 3
30023: PPUSH
30024: CALL_OW 458
30028: IFFALSE 30144
// begin for i in minerMinesList [ index ] do
30030: LD_ADDR_VAR 0 7
30034: PUSH
30035: LD_EXP 96
30039: PUSH
30040: LD_VAR 0 5
30044: ARRAY
30045: PUSH
30046: FOR_IN
30047: IFFALSE 30089
// if i [ 1 ] = x and i [ 2 ] = y then
30049: LD_VAR 0 7
30053: PUSH
30054: LD_INT 1
30056: ARRAY
30057: PUSH
30058: LD_VAR 0 2
30062: EQUAL
30063: IFFALSE 30081
30065: PUSH
30066: LD_VAR 0 7
30070: PUSH
30071: LD_INT 2
30073: ARRAY
30074: PUSH
30075: LD_VAR 0 3
30079: EQUAL
30080: AND
30081: IFFALSE 30087
// exit ;
30083: POP
30084: POP
30085: GO 30152
30087: GO 30046
30089: POP
30090: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30091: LD_ADDR_EXP 96
30095: PUSH
30096: LD_EXP 96
30100: PPUSH
30101: LD_VAR 0 5
30105: PUSH
30106: LD_EXP 96
30110: PUSH
30111: LD_VAR 0 5
30115: ARRAY
30116: PUSH
30117: LD_INT 1
30119: PLUS
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PPUSH
30125: LD_VAR 0 2
30129: PUSH
30130: LD_VAR 0 3
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: PPUSH
30139: CALL 37221 0 3
30143: ST_TO_ADDR
// end ; result := true ;
30144: LD_ADDR_VAR 0 4
30148: PUSH
30149: LD_INT 1
30151: ST_TO_ADDR
// end ;
30152: LD_VAR 0 4
30156: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30157: LD_INT 0
30159: PPUSH
30160: PPUSH
30161: PPUSH
// if not unit in minersList then
30162: LD_VAR 0 1
30166: PUSH
30167: LD_EXP 95
30171: IN
30172: NOT
30173: IFFALSE 30177
// exit ;
30175: GO 30384
// index := GetElementIndex ( minersList , unit ) ;
30177: LD_ADDR_VAR 0 6
30181: PUSH
30182: LD_EXP 95
30186: PPUSH
30187: LD_VAR 0 1
30191: PPUSH
30192: CALL 37004 0 2
30196: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
30197: LD_ADDR_VAR 0 5
30201: PUSH
30202: DOUBLE
30203: LD_EXP 96
30207: PUSH
30208: LD_VAR 0 6
30212: ARRAY
30213: INC
30214: ST_TO_ADDR
30215: LD_INT 1
30217: PUSH
30218: FOR_DOWNTO
30219: IFFALSE 30382
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30221: LD_EXP 96
30225: PUSH
30226: LD_VAR 0 6
30230: ARRAY
30231: PUSH
30232: LD_VAR 0 5
30236: ARRAY
30237: PUSH
30238: LD_INT 1
30240: ARRAY
30241: PPUSH
30242: LD_EXP 96
30246: PUSH
30247: LD_VAR 0 6
30251: ARRAY
30252: PUSH
30253: LD_VAR 0 5
30257: ARRAY
30258: PUSH
30259: LD_INT 2
30261: ARRAY
30262: PPUSH
30263: LD_VAR 0 2
30267: PPUSH
30268: LD_VAR 0 3
30272: PPUSH
30273: CALL_OW 298
30277: PUSH
30278: LD_INT 6
30280: LESS
30281: IFFALSE 30380
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30283: LD_EXP 96
30287: PUSH
30288: LD_VAR 0 6
30292: ARRAY
30293: PUSH
30294: LD_VAR 0 5
30298: ARRAY
30299: PUSH
30300: LD_INT 1
30302: ARRAY
30303: PPUSH
30304: LD_EXP 96
30308: PUSH
30309: LD_VAR 0 6
30313: ARRAY
30314: PUSH
30315: LD_VAR 0 5
30319: ARRAY
30320: PUSH
30321: LD_INT 2
30323: ARRAY
30324: PPUSH
30325: LD_VAR 0 1
30329: PPUSH
30330: CALL_OW 255
30334: PPUSH
30335: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30339: LD_ADDR_EXP 96
30343: PUSH
30344: LD_EXP 96
30348: PPUSH
30349: LD_VAR 0 6
30353: PPUSH
30354: LD_EXP 96
30358: PUSH
30359: LD_VAR 0 6
30363: ARRAY
30364: PPUSH
30365: LD_VAR 0 5
30369: PPUSH
30370: CALL_OW 3
30374: PPUSH
30375: CALL_OW 1
30379: ST_TO_ADDR
// end ; end ;
30380: GO 30218
30382: POP
30383: POP
// end ;
30384: LD_VAR 0 4
30388: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30389: LD_INT 0
30391: PPUSH
30392: PPUSH
30393: PPUSH
30394: PPUSH
30395: PPUSH
30396: PPUSH
30397: PPUSH
30398: PPUSH
30399: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30400: LD_VAR 0 1
30404: PPUSH
30405: CALL_OW 264
30409: PUSH
30410: LD_INT 81
30412: EQUAL
30413: NOT
30414: IFTRUE 30429
30416: PUSH
30417: LD_VAR 0 1
30421: PUSH
30422: LD_EXP 95
30426: IN
30427: NOT
30428: OR
30429: IFFALSE 30433
// exit ;
30431: GO 30759
// index := GetElementIndex ( minersList , unit ) ;
30433: LD_ADDR_VAR 0 6
30437: PUSH
30438: LD_EXP 95
30442: PPUSH
30443: LD_VAR 0 1
30447: PPUSH
30448: CALL 37004 0 2
30452: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30453: LD_ADDR_VAR 0 8
30457: PUSH
30458: LD_EXP 97
30462: PUSH
30463: LD_EXP 96
30467: PUSH
30468: LD_VAR 0 6
30472: ARRAY
30473: MINUS
30474: ST_TO_ADDR
// if not minesFreeAmount then
30475: LD_VAR 0 8
30479: NOT
30480: IFFALSE 30484
// exit ;
30482: GO 30759
// tmp := [ ] ;
30484: LD_ADDR_VAR 0 7
30488: PUSH
30489: EMPTY
30490: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30491: LD_ADDR_VAR 0 5
30495: PUSH
30496: DOUBLE
30497: LD_INT 1
30499: DEC
30500: ST_TO_ADDR
30501: LD_VAR 0 8
30505: PUSH
30506: FOR_TO
30507: IFFALSE 30706
// begin _d := rand ( 0 , 5 ) ;
30509: LD_ADDR_VAR 0 11
30513: PUSH
30514: LD_INT 0
30516: PPUSH
30517: LD_INT 5
30519: PPUSH
30520: CALL_OW 12
30524: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30525: LD_ADDR_VAR 0 12
30529: PUSH
30530: LD_INT 2
30532: PPUSH
30533: LD_INT 6
30535: PPUSH
30536: CALL_OW 12
30540: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30541: LD_ADDR_VAR 0 9
30545: PUSH
30546: LD_VAR 0 2
30550: PPUSH
30551: LD_VAR 0 11
30555: PPUSH
30556: LD_VAR 0 12
30560: PPUSH
30561: CALL_OW 272
30565: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30566: LD_ADDR_VAR 0 10
30570: PUSH
30571: LD_VAR 0 3
30575: PPUSH
30576: LD_VAR 0 11
30580: PPUSH
30581: LD_VAR 0 12
30585: PPUSH
30586: CALL_OW 273
30590: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30591: LD_VAR 0 9
30595: PPUSH
30596: LD_VAR 0 10
30600: PPUSH
30601: CALL_OW 488
30605: IFFALSE 30629
30607: PUSH
30608: LD_VAR 0 9
30612: PUSH
30613: LD_VAR 0 10
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: PUSH
30622: LD_VAR 0 7
30626: IN
30627: NOT
30628: AND
30629: IFFALSE 30648
30631: PUSH
30632: LD_VAR 0 9
30636: PPUSH
30637: LD_VAR 0 10
30641: PPUSH
30642: CALL_OW 458
30646: NOT
30647: AND
30648: IFFALSE 30690
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30650: LD_ADDR_VAR 0 7
30654: PUSH
30655: LD_VAR 0 7
30659: PPUSH
30660: LD_VAR 0 7
30664: PUSH
30665: LD_INT 1
30667: PLUS
30668: PPUSH
30669: LD_VAR 0 9
30673: PUSH
30674: LD_VAR 0 10
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PPUSH
30683: CALL_OW 1
30687: ST_TO_ADDR
30688: GO 30704
// i := i - 1 ;
30690: LD_ADDR_VAR 0 5
30694: PUSH
30695: LD_VAR 0 5
30699: PUSH
30700: LD_INT 1
30702: MINUS
30703: ST_TO_ADDR
// end ;
30704: GO 30506
30706: POP
30707: POP
// for i in tmp do
30708: LD_ADDR_VAR 0 5
30712: PUSH
30713: LD_VAR 0 7
30717: PUSH
30718: FOR_IN
30719: IFFALSE 30757
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30721: LD_VAR 0 1
30725: PPUSH
30726: LD_VAR 0 5
30730: PUSH
30731: LD_INT 1
30733: ARRAY
30734: PPUSH
30735: LD_VAR 0 5
30739: PUSH
30740: LD_INT 2
30742: ARRAY
30743: PPUSH
30744: CALL 29750 0 3
30748: NOT
30749: IFFALSE 30755
// exit ;
30751: POP
30752: POP
30753: GO 30759
30755: GO 30718
30757: POP
30758: POP
// end ;
30759: LD_VAR 0 4
30763: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
30764: LD_INT 0
30766: PPUSH
30767: PPUSH
30768: PPUSH
30769: PPUSH
30770: PPUSH
30771: PPUSH
30772: PPUSH
30773: PPUSH
30774: PPUSH
// if GetClass ( unit ) <> class_sniper then
30775: LD_VAR 0 1
30779: PPUSH
30780: CALL_OW 257
30784: PUSH
30785: LD_INT 5
30787: NONEQUAL
30788: IFFALSE 30792
// exit ;
30790: GO 31262
// dist := 8 ;
30792: LD_ADDR_VAR 0 5
30796: PUSH
30797: LD_INT 8
30799: ST_TO_ADDR
// viewRange := 12 ;
30800: LD_ADDR_VAR 0 8
30804: PUSH
30805: LD_INT 12
30807: ST_TO_ADDR
// side := GetSide ( unit ) ;
30808: LD_ADDR_VAR 0 6
30812: PUSH
30813: LD_VAR 0 1
30817: PPUSH
30818: CALL_OW 255
30822: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30823: LD_INT 61
30825: PPUSH
30826: LD_VAR 0 6
30830: PPUSH
30831: CALL_OW 321
30835: PUSH
30836: LD_INT 2
30838: EQUAL
30839: IFFALSE 30849
// viewRange := 16 ;
30841: LD_ADDR_VAR 0 8
30845: PUSH
30846: LD_INT 16
30848: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30849: LD_VAR 0 1
30853: PPUSH
30854: LD_VAR 0 2
30858: PPUSH
30859: LD_VAR 0 3
30863: PPUSH
30864: CALL_OW 297
30868: PUSH
30869: LD_VAR 0 5
30873: GREATER
30874: IFFALSE 30953
// begin ComMoveXY ( unit , x , y ) ;
30876: LD_VAR 0 1
30880: PPUSH
30881: LD_VAR 0 2
30885: PPUSH
30886: LD_VAR 0 3
30890: PPUSH
30891: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30895: LD_INT 35
30897: PPUSH
30898: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30902: LD_VAR 0 1
30906: PPUSH
30907: LD_VAR 0 2
30911: PPUSH
30912: LD_VAR 0 3
30916: PPUSH
30917: CALL 69060 0 3
30921: NOT
30922: IFFALSE 30926
// exit ;
30924: GO 31262
// until GetDistUnitXY ( unit , x , y ) < dist ;
30926: LD_VAR 0 1
30930: PPUSH
30931: LD_VAR 0 2
30935: PPUSH
30936: LD_VAR 0 3
30940: PPUSH
30941: CALL_OW 297
30945: PUSH
30946: LD_VAR 0 5
30950: LESS
30951: IFFALSE 30895
// end ; ComTurnXY ( unit , x , y ) ;
30953: LD_VAR 0 1
30957: PPUSH
30958: LD_VAR 0 2
30962: PPUSH
30963: LD_VAR 0 3
30967: PPUSH
30968: CALL_OW 118
// repeat if Multiplayer then
30972: LD_OWVAR 4
30976: IFFALSE 30987
// wait ( 35 ) else
30978: LD_INT 35
30980: PPUSH
30981: CALL_OW 67
30985: GO 30994
// wait ( 5 ) ;
30987: LD_INT 5
30989: PPUSH
30990: CALL_OW 67
// _d := GetDir ( unit ) ;
30994: LD_ADDR_VAR 0 11
30998: PUSH
30999: LD_VAR 0 1
31003: PPUSH
31004: CALL_OW 254
31008: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
31009: LD_ADDR_VAR 0 7
31013: PUSH
31014: LD_VAR 0 1
31018: PPUSH
31019: CALL_OW 250
31023: PPUSH
31024: LD_VAR 0 1
31028: PPUSH
31029: CALL_OW 251
31033: PPUSH
31034: LD_VAR 0 2
31038: PPUSH
31039: LD_VAR 0 3
31043: PPUSH
31044: CALL 71696 0 4
31048: ST_TO_ADDR
// until dir = _d ;
31049: LD_VAR 0 7
31053: PUSH
31054: LD_VAR 0 11
31058: EQUAL
31059: IFFALSE 30972
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
31061: LD_ADDR_VAR 0 9
31065: PUSH
31066: LD_VAR 0 1
31070: PPUSH
31071: CALL_OW 250
31075: PPUSH
31076: LD_VAR 0 7
31080: PPUSH
31081: LD_VAR 0 5
31085: PPUSH
31086: CALL_OW 272
31090: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
31091: LD_ADDR_VAR 0 10
31095: PUSH
31096: LD_VAR 0 1
31100: PPUSH
31101: CALL_OW 251
31105: PPUSH
31106: LD_VAR 0 7
31110: PPUSH
31111: LD_VAR 0 5
31115: PPUSH
31116: CALL_OW 273
31120: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31121: LD_VAR 0 9
31125: PPUSH
31126: LD_VAR 0 10
31130: PPUSH
31131: CALL_OW 488
31135: NOT
31136: IFFALSE 31140
// exit ;
31138: GO 31262
// ComAnimCustom ( unit , 1 ) ;
31140: LD_VAR 0 1
31144: PPUSH
31145: LD_INT 1
31147: PPUSH
31148: CALL_OW 592
// p := 0 ;
31152: LD_ADDR_VAR 0 12
31156: PUSH
31157: LD_INT 0
31159: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31160: LD_VAR 0 9
31164: PPUSH
31165: LD_VAR 0 10
31169: PPUSH
31170: LD_VAR 0 6
31174: PPUSH
31175: LD_VAR 0 8
31179: PPUSH
31180: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
31184: LD_INT 35
31186: PPUSH
31187: CALL_OW 67
// p := Inc ( p ) ;
31191: LD_ADDR_VAR 0 12
31195: PUSH
31196: LD_VAR 0 12
31200: PPUSH
31201: CALL 71652 0 1
31205: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
31206: LD_VAR 0 12
31210: PUSH
31211: LD_INT 3
31213: EQUAL
31214: IFTRUE 31228
31216: PUSH
31217: LD_VAR 0 1
31221: PPUSH
31222: CALL_OW 302
31226: NOT
31227: OR
31228: IFTRUE 31241
31230: PUSH
31231: LD_VAR 0 1
31235: PPUSH
31236: CALL_OW 301
31240: OR
31241: IFFALSE 31184
// RemoveSeeing ( _x , _y , side ) ;
31243: LD_VAR 0 9
31247: PPUSH
31248: LD_VAR 0 10
31252: PPUSH
31253: LD_VAR 0 6
31257: PPUSH
31258: CALL_OW 331
// end ;
31262: LD_VAR 0 4
31266: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
31267: LD_INT 0
31269: PPUSH
31270: PPUSH
31271: PPUSH
31272: PPUSH
31273: PPUSH
31274: PPUSH
31275: PPUSH
31276: PPUSH
31277: PPUSH
31278: PPUSH
31279: PPUSH
// if not unit then
31280: LD_VAR 0 1
31284: NOT
31285: IFFALSE 31289
// exit ;
31287: GO 31560
// side := GetSide ( unit ) ;
31289: LD_ADDR_VAR 0 3
31293: PUSH
31294: LD_VAR 0 1
31298: PPUSH
31299: CALL_OW 255
31303: ST_TO_ADDR
// x := GetX ( unit ) ;
31304: LD_ADDR_VAR 0 5
31308: PUSH
31309: LD_VAR 0 1
31313: PPUSH
31314: CALL_OW 250
31318: ST_TO_ADDR
// y := GetY ( unit ) ;
31319: LD_ADDR_VAR 0 6
31323: PUSH
31324: LD_VAR 0 1
31328: PPUSH
31329: CALL_OW 251
31333: ST_TO_ADDR
// r := 8 ;
31334: LD_ADDR_VAR 0 4
31338: PUSH
31339: LD_INT 8
31341: ST_TO_ADDR
// if x - r < 0 then
31342: LD_VAR 0 5
31346: PUSH
31347: LD_VAR 0 4
31351: MINUS
31352: PUSH
31353: LD_INT 0
31355: LESS
31356: IFFALSE 31368
// min_x := 0 else
31358: LD_ADDR_VAR 0 7
31362: PUSH
31363: LD_INT 0
31365: ST_TO_ADDR
31366: GO 31384
// min_x := x - r ;
31368: LD_ADDR_VAR 0 7
31372: PUSH
31373: LD_VAR 0 5
31377: PUSH
31378: LD_VAR 0 4
31382: MINUS
31383: ST_TO_ADDR
// if y - r < 0 then
31384: LD_VAR 0 6
31388: PUSH
31389: LD_VAR 0 4
31393: MINUS
31394: PUSH
31395: LD_INT 0
31397: LESS
31398: IFFALSE 31410
// min_y := 0 else
31400: LD_ADDR_VAR 0 8
31404: PUSH
31405: LD_INT 0
31407: ST_TO_ADDR
31408: GO 31426
// min_y := y - r ;
31410: LD_ADDR_VAR 0 8
31414: PUSH
31415: LD_VAR 0 6
31419: PUSH
31420: LD_VAR 0 4
31424: MINUS
31425: ST_TO_ADDR
// max_x := x + r ;
31426: LD_ADDR_VAR 0 9
31430: PUSH
31431: LD_VAR 0 5
31435: PUSH
31436: LD_VAR 0 4
31440: PLUS
31441: ST_TO_ADDR
// max_y := y + r ;
31442: LD_ADDR_VAR 0 10
31446: PUSH
31447: LD_VAR 0 6
31451: PUSH
31452: LD_VAR 0 4
31456: PLUS
31457: ST_TO_ADDR
// for _x = min_x to max_x do
31458: LD_ADDR_VAR 0 11
31462: PUSH
31463: DOUBLE
31464: LD_VAR 0 7
31468: DEC
31469: ST_TO_ADDR
31470: LD_VAR 0 9
31474: PUSH
31475: FOR_TO
31476: IFFALSE 31558
// for _y = min_y to max_y do
31478: LD_ADDR_VAR 0 12
31482: PUSH
31483: DOUBLE
31484: LD_VAR 0 8
31488: DEC
31489: ST_TO_ADDR
31490: LD_VAR 0 10
31494: PUSH
31495: FOR_TO
31496: IFFALSE 31554
// begin if not ValidHex ( _x , _y ) then
31498: LD_VAR 0 11
31502: PPUSH
31503: LD_VAR 0 12
31507: PPUSH
31508: CALL_OW 488
31512: NOT
31513: IFFALSE 31517
// continue ;
31515: GO 31495
// if MineAtPos ( _x , _y ) then
31517: LD_VAR 0 11
31521: PPUSH
31522: LD_VAR 0 12
31526: PPUSH
31527: CALL_OW 458
31531: IFFALSE 31552
// ViewMineAtPos ( _x , _y , side ) ;
31533: LD_VAR 0 11
31537: PPUSH
31538: LD_VAR 0 12
31542: PPUSH
31543: LD_VAR 0 3
31547: PPUSH
31548: CALL_OW 457
// end ;
31552: GO 31495
31554: POP
31555: POP
31556: GO 31475
31558: POP
31559: POP
// end ;
31560: LD_VAR 0 2
31564: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
31565: LD_INT 0
31567: PPUSH
31568: PPUSH
31569: PPUSH
31570: PPUSH
31571: PPUSH
31572: PPUSH
31573: PPUSH
// if not units then
31574: LD_VAR 0 1
31578: NOT
31579: IFFALSE 31583
// exit ;
31581: GO 32047
// scaners := [ ] ;
31583: LD_ADDR_VAR 0 6
31587: PUSH
31588: EMPTY
31589: ST_TO_ADDR
// for i in units do
31590: LD_ADDR_VAR 0 3
31594: PUSH
31595: LD_VAR 0 1
31599: PUSH
31600: FOR_IN
31601: IFFALSE 31758
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
31603: LD_VAR 0 3
31607: PPUSH
31608: CALL_OW 264
31612: PUSH
31613: LD_INT 11
31615: NONEQUAL
31616: IFTRUE 31630
31618: PUSH
31619: LD_VAR 0 3
31623: PPUSH
31624: CALL_OW 302
31628: NOT
31629: OR
31630: IFTRUE 31647
31632: PUSH
31633: LD_VAR 0 3
31637: PPUSH
31638: CALL_OW 110
31642: PUSH
31643: LD_INT 502
31645: EQUAL
31646: OR
31647: IFFALSE 31651
// continue ;
31649: GO 31600
// ComStop ( i ) ;
31651: LD_VAR 0 3
31655: PPUSH
31656: CALL_OW 141
// x := GetX ( i ) ;
31660: LD_ADDR_VAR 0 4
31664: PUSH
31665: LD_VAR 0 3
31669: PPUSH
31670: CALL_OW 250
31674: ST_TO_ADDR
// y := GetY ( i ) ;
31675: LD_ADDR_VAR 0 5
31679: PUSH
31680: LD_VAR 0 3
31684: PPUSH
31685: CALL_OW 251
31689: ST_TO_ADDR
// if GetSide ( i ) = your_side then
31690: LD_VAR 0 3
31694: PPUSH
31695: CALL_OW 255
31699: PUSH
31700: LD_OWVAR 2
31704: EQUAL
31705: IFFALSE 31724
// PlaySoundXY ( x , y , mineDetector ) ;
31707: LD_VAR 0 4
31711: PPUSH
31712: LD_VAR 0 5
31716: PPUSH
31717: LD_STRING mineDetector
31719: PPUSH
31720: CALL_OW 366
// scaners := Join ( scaners , i ) ;
31724: LD_ADDR_VAR 0 6
31728: PUSH
31729: LD_VAR 0 6
31733: PPUSH
31734: LD_VAR 0 3
31738: PPUSH
31739: CALL 70279 0 2
31743: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
31744: LD_VAR 0 3
31748: PPUSH
31749: LD_INT 502
31751: PPUSH
31752: CALL_OW 109
// end ;
31756: GO 31600
31758: POP
31759: POP
// if not scaners then
31760: LD_VAR 0 6
31764: NOT
31765: IFFALSE 31769
// exit ;
31767: GO 32047
// wait ( 3 ) ;
31769: LD_INT 3
31771: PPUSH
31772: CALL_OW 67
// timer := 6 ;
31776: LD_ADDR_VAR 0 7
31780: PUSH
31781: LD_INT 6
31783: ST_TO_ADDR
// repeat for i in scaners do
31784: LD_ADDR_VAR 0 3
31788: PUSH
31789: LD_VAR 0 6
31793: PUSH
31794: FOR_IN
31795: IFFALSE 31945
// begin side := GetSide ( i ) ;
31797: LD_ADDR_VAR 0 8
31801: PUSH
31802: LD_VAR 0 3
31806: PPUSH
31807: CALL_OW 255
31811: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
31812: LD_VAR 0 3
31816: PPUSH
31817: CALL_OW 302
31821: NOT
31822: IFTRUE 31835
31824: PUSH
31825: LD_VAR 0 3
31829: PPUSH
31830: CALL_OW 314
31834: OR
31835: IFTRUE 31866
31837: PUSH
31838: LD_VAR 0 3
31842: PPUSH
31843: CALL_OW 263
31847: PUSH
31848: LD_INT 1
31850: EQUAL
31851: IFFALSE 31865
31853: PUSH
31854: LD_VAR 0 3
31858: PPUSH
31859: CALL_OW 311
31863: NOT
31864: AND
31865: OR
31866: IFFALSE 31910
// begin SetUnitDisplayNumber ( i , 0 ) ;
31868: LD_VAR 0 3
31872: PPUSH
31873: LD_INT 0
31875: PPUSH
31876: CALL_OW 505
// SetTag ( i , 0 ) ;
31880: LD_VAR 0 3
31884: PPUSH
31885: LD_INT 0
31887: PPUSH
31888: CALL_OW 109
// scaners := scaners diff i ;
31892: LD_ADDR_VAR 0 6
31896: PUSH
31897: LD_VAR 0 6
31901: PUSH
31902: LD_VAR 0 3
31906: DIFF
31907: ST_TO_ADDR
// continue ;
31908: GO 31794
// end ; if side in [ your_side , 9 ] then
31910: LD_VAR 0 8
31914: PUSH
31915: LD_OWVAR 2
31919: PUSH
31920: LD_INT 9
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: IN
31927: IFFALSE 31943
// SetUnitDisplayNumber ( i , timer ) ;
31929: LD_VAR 0 3
31933: PPUSH
31934: LD_VAR 0 7
31938: PPUSH
31939: CALL_OW 505
// end ;
31943: GO 31794
31945: POP
31946: POP
// if not scaners then
31947: LD_VAR 0 6
31951: NOT
31952: IFFALSE 31956
// exit ;
31954: GO 32047
// timer := Dec ( timer ) ;
31956: LD_ADDR_VAR 0 7
31960: PUSH
31961: LD_VAR 0 7
31965: PPUSH
31966: CALL 71674 0 1
31970: ST_TO_ADDR
// wait ( 0 0$1 ) ;
31971: LD_INT 35
31973: PPUSH
31974: CALL_OW 67
// until timer = 0 ;
31978: LD_VAR 0 7
31982: PUSH
31983: LD_INT 0
31985: EQUAL
31986: IFFALSE 31784
// if not scaners then
31988: LD_VAR 0 6
31992: NOT
31993: IFFALSE 31997
// exit ;
31995: GO 32047
// for i in scaners do
31997: LD_ADDR_VAR 0 3
32001: PUSH
32002: LD_VAR 0 6
32006: PUSH
32007: FOR_IN
32008: IFFALSE 32045
// begin SetUnitDisplayNumber ( i , 0 ) ;
32010: LD_VAR 0 3
32014: PPUSH
32015: LD_INT 0
32017: PPUSH
32018: CALL_OW 505
// SetTag ( i , 0 ) ;
32022: LD_VAR 0 3
32026: PPUSH
32027: LD_INT 0
32029: PPUSH
32030: CALL_OW 109
// RevealDetectorMine ( i ) ;
32034: LD_VAR 0 3
32038: PPUSH
32039: CALL 31267 0 1
// end ;
32043: GO 32007
32045: POP
32046: POP
// end ;
32047: LD_VAR 0 2
32051: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
32052: LD_INT 0
32054: PPUSH
// if p1 = mine_detector_mode then
32055: LD_VAR 0 2
32059: PUSH
32060: LD_INT 103
32062: EQUAL
32063: IFFALSE 32074
// DetectMine ( units ) ;
32065: LD_VAR 0 1
32069: PPUSH
32070: CALL 31565 0 1
// end ; end_of_file
32074: LD_VAR 0 7
32078: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32079: LD_INT 0
32081: PPUSH
32082: PPUSH
// if exist_mode then
32083: LD_VAR 0 2
32087: IFFALSE 32133
// begin unit := CreateCharacter ( prefix & ident ) ;
32089: LD_ADDR_VAR 0 5
32093: PUSH
32094: LD_VAR 0 3
32098: PUSH
32099: LD_VAR 0 1
32103: STR
32104: PPUSH
32105: CALL_OW 34
32109: ST_TO_ADDR
// if unit then
32110: LD_VAR 0 5
32114: IFFALSE 32131
// DeleteCharacters ( prefix & ident ) ;
32116: LD_VAR 0 3
32120: PUSH
32121: LD_VAR 0 1
32125: STR
32126: PPUSH
32127: CALL_OW 40
// end else
32131: GO 32148
// unit := NewCharacter ( ident ) ;
32133: LD_ADDR_VAR 0 5
32137: PUSH
32138: LD_VAR 0 1
32142: PPUSH
32143: CALL_OW 25
32147: ST_TO_ADDR
// result := unit ;
32148: LD_ADDR_VAR 0 4
32152: PUSH
32153: LD_VAR 0 5
32157: ST_TO_ADDR
// end ;
32158: LD_VAR 0 4
32162: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
32163: LD_INT 0
32165: PPUSH
32166: PPUSH
// if exist_mode then
32167: LD_VAR 0 2
32171: IFFALSE 32196
// unit := CreateCharacter ( prefix & ident ) else
32173: LD_ADDR_VAR 0 5
32177: PUSH
32178: LD_VAR 0 3
32182: PUSH
32183: LD_VAR 0 1
32187: STR
32188: PPUSH
32189: CALL_OW 34
32193: ST_TO_ADDR
32194: GO 32211
// unit := NewCharacter ( ident ) ;
32196: LD_ADDR_VAR 0 5
32200: PUSH
32201: LD_VAR 0 1
32205: PPUSH
32206: CALL_OW 25
32210: ST_TO_ADDR
// result := unit ;
32211: LD_ADDR_VAR 0 4
32215: PUSH
32216: LD_VAR 0 5
32220: ST_TO_ADDR
// end ;
32221: LD_VAR 0 4
32225: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32226: LD_INT 0
32228: PPUSH
32229: PPUSH
// if not side or not nation then
32230: LD_VAR 0 1
32234: NOT
32235: IFTRUE 32244
32237: PUSH
32238: LD_VAR 0 2
32242: NOT
32243: OR
32244: IFFALSE 32248
// exit ;
32246: GO 33042
// case nation of nation_american :
32248: LD_VAR 0 2
32252: PUSH
32253: LD_INT 1
32255: DOUBLE
32256: EQUAL
32257: IFTRUE 32261
32259: GO 32483
32261: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
32262: LD_ADDR_VAR 0 4
32266: PUSH
32267: LD_INT 35
32269: PUSH
32270: LD_INT 45
32272: PUSH
32273: LD_INT 46
32275: PUSH
32276: LD_INT 47
32278: PUSH
32279: LD_INT 82
32281: PUSH
32282: LD_INT 83
32284: PUSH
32285: LD_INT 84
32287: PUSH
32288: LD_INT 85
32290: PUSH
32291: LD_INT 86
32293: PUSH
32294: LD_INT 1
32296: PUSH
32297: LD_INT 2
32299: PUSH
32300: LD_INT 6
32302: PUSH
32303: LD_INT 15
32305: PUSH
32306: LD_INT 16
32308: PUSH
32309: LD_INT 7
32311: PUSH
32312: LD_INT 12
32314: PUSH
32315: LD_INT 13
32317: PUSH
32318: LD_INT 10
32320: PUSH
32321: LD_INT 14
32323: PUSH
32324: LD_INT 20
32326: PUSH
32327: LD_INT 21
32329: PUSH
32330: LD_INT 22
32332: PUSH
32333: LD_INT 25
32335: PUSH
32336: LD_INT 32
32338: PUSH
32339: LD_INT 27
32341: PUSH
32342: LD_INT 36
32344: PUSH
32345: LD_INT 69
32347: PUSH
32348: LD_INT 39
32350: PUSH
32351: LD_INT 34
32353: PUSH
32354: LD_INT 40
32356: PUSH
32357: LD_INT 48
32359: PUSH
32360: LD_INT 49
32362: PUSH
32363: LD_INT 50
32365: PUSH
32366: LD_INT 51
32368: PUSH
32369: LD_INT 52
32371: PUSH
32372: LD_INT 53
32374: PUSH
32375: LD_INT 54
32377: PUSH
32378: LD_INT 55
32380: PUSH
32381: LD_INT 56
32383: PUSH
32384: LD_INT 57
32386: PUSH
32387: LD_INT 58
32389: PUSH
32390: LD_INT 59
32392: PUSH
32393: LD_INT 60
32395: PUSH
32396: LD_INT 61
32398: PUSH
32399: LD_INT 62
32401: PUSH
32402: LD_INT 80
32404: PUSH
32405: LD_INT 82
32407: PUSH
32408: LD_INT 83
32410: PUSH
32411: LD_INT 84
32413: PUSH
32414: LD_INT 85
32416: PUSH
32417: LD_INT 86
32419: PUSH
32420: LD_INT 90
32422: PUSH
32423: LD_INT 93
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: ST_TO_ADDR
32481: GO 32964
32483: LD_INT 2
32485: DOUBLE
32486: EQUAL
32487: IFTRUE 32491
32489: GO 32725
32491: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
32492: LD_ADDR_VAR 0 4
32496: PUSH
32497: LD_INT 35
32499: PUSH
32500: LD_INT 45
32502: PUSH
32503: LD_INT 46
32505: PUSH
32506: LD_INT 47
32508: PUSH
32509: LD_INT 82
32511: PUSH
32512: LD_INT 83
32514: PUSH
32515: LD_INT 84
32517: PUSH
32518: LD_INT 85
32520: PUSH
32521: LD_INT 87
32523: PUSH
32524: LD_INT 70
32526: PUSH
32527: LD_INT 1
32529: PUSH
32530: LD_INT 11
32532: PUSH
32533: LD_INT 3
32535: PUSH
32536: LD_INT 4
32538: PUSH
32539: LD_INT 5
32541: PUSH
32542: LD_INT 6
32544: PUSH
32545: LD_INT 15
32547: PUSH
32548: LD_INT 18
32550: PUSH
32551: LD_INT 7
32553: PUSH
32554: LD_INT 17
32556: PUSH
32557: LD_INT 8
32559: PUSH
32560: LD_INT 20
32562: PUSH
32563: LD_INT 21
32565: PUSH
32566: LD_INT 22
32568: PUSH
32569: LD_INT 72
32571: PUSH
32572: LD_INT 26
32574: PUSH
32575: LD_INT 69
32577: PUSH
32578: LD_INT 39
32580: PUSH
32581: LD_INT 40
32583: PUSH
32584: LD_INT 41
32586: PUSH
32587: LD_INT 42
32589: PUSH
32590: LD_INT 43
32592: PUSH
32593: LD_INT 48
32595: PUSH
32596: LD_INT 49
32598: PUSH
32599: LD_INT 50
32601: PUSH
32602: LD_INT 51
32604: PUSH
32605: LD_INT 52
32607: PUSH
32608: LD_INT 53
32610: PUSH
32611: LD_INT 54
32613: PUSH
32614: LD_INT 55
32616: PUSH
32617: LD_INT 56
32619: PUSH
32620: LD_INT 60
32622: PUSH
32623: LD_INT 61
32625: PUSH
32626: LD_INT 62
32628: PUSH
32629: LD_INT 66
32631: PUSH
32632: LD_INT 67
32634: PUSH
32635: LD_INT 68
32637: PUSH
32638: LD_INT 81
32640: PUSH
32641: LD_INT 82
32643: PUSH
32644: LD_INT 83
32646: PUSH
32647: LD_INT 84
32649: PUSH
32650: LD_INT 85
32652: PUSH
32653: LD_INT 87
32655: PUSH
32656: LD_INT 88
32658: PUSH
32659: LD_INT 92
32661: PUSH
32662: LD_INT 94
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: LIST
32721: LIST
32722: ST_TO_ADDR
32723: GO 32964
32725: LD_INT 3
32727: DOUBLE
32728: EQUAL
32729: IFTRUE 32733
32731: GO 32963
32733: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
32734: LD_ADDR_VAR 0 4
32738: PUSH
32739: LD_INT 46
32741: PUSH
32742: LD_INT 47
32744: PUSH
32745: LD_INT 1
32747: PUSH
32748: LD_INT 2
32750: PUSH
32751: LD_INT 82
32753: PUSH
32754: LD_INT 83
32756: PUSH
32757: LD_INT 84
32759: PUSH
32760: LD_INT 85
32762: PUSH
32763: LD_INT 86
32765: PUSH
32766: LD_INT 11
32768: PUSH
32769: LD_INT 9
32771: PUSH
32772: LD_INT 20
32774: PUSH
32775: LD_INT 19
32777: PUSH
32778: LD_INT 21
32780: PUSH
32781: LD_INT 24
32783: PUSH
32784: LD_INT 22
32786: PUSH
32787: LD_INT 25
32789: PUSH
32790: LD_INT 28
32792: PUSH
32793: LD_INT 29
32795: PUSH
32796: LD_INT 30
32798: PUSH
32799: LD_INT 31
32801: PUSH
32802: LD_INT 37
32804: PUSH
32805: LD_INT 38
32807: PUSH
32808: LD_INT 32
32810: PUSH
32811: LD_INT 27
32813: PUSH
32814: LD_INT 33
32816: PUSH
32817: LD_INT 69
32819: PUSH
32820: LD_INT 39
32822: PUSH
32823: LD_INT 34
32825: PUSH
32826: LD_INT 40
32828: PUSH
32829: LD_INT 71
32831: PUSH
32832: LD_INT 23
32834: PUSH
32835: LD_INT 44
32837: PUSH
32838: LD_INT 48
32840: PUSH
32841: LD_INT 49
32843: PUSH
32844: LD_INT 50
32846: PUSH
32847: LD_INT 51
32849: PUSH
32850: LD_INT 52
32852: PUSH
32853: LD_INT 53
32855: PUSH
32856: LD_INT 54
32858: PUSH
32859: LD_INT 55
32861: PUSH
32862: LD_INT 56
32864: PUSH
32865: LD_INT 57
32867: PUSH
32868: LD_INT 58
32870: PUSH
32871: LD_INT 59
32873: PUSH
32874: LD_INT 63
32876: PUSH
32877: LD_INT 64
32879: PUSH
32880: LD_INT 65
32882: PUSH
32883: LD_INT 82
32885: PUSH
32886: LD_INT 83
32888: PUSH
32889: LD_INT 84
32891: PUSH
32892: LD_INT 85
32894: PUSH
32895: LD_INT 86
32897: PUSH
32898: LD_INT 89
32900: PUSH
32901: LD_INT 91
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: ST_TO_ADDR
32961: GO 32964
32963: POP
// if state > - 1 and state < 3 then
32964: LD_VAR 0 3
32968: PUSH
32969: LD_INT 1
32971: NEG
32972: GREATER
32973: IFFALSE 32985
32975: PUSH
32976: LD_VAR 0 3
32980: PUSH
32981: LD_INT 3
32983: LESS
32984: AND
32985: IFFALSE 33042
// for i in result do
32987: LD_ADDR_VAR 0 5
32991: PUSH
32992: LD_VAR 0 4
32996: PUSH
32997: FOR_IN
32998: IFFALSE 33040
// if GetTech ( i , side ) <> state then
33000: LD_VAR 0 5
33004: PPUSH
33005: LD_VAR 0 1
33009: PPUSH
33010: CALL_OW 321
33014: PUSH
33015: LD_VAR 0 3
33019: NONEQUAL
33020: IFFALSE 33038
// result := result diff i ;
33022: LD_ADDR_VAR 0 4
33026: PUSH
33027: LD_VAR 0 4
33031: PUSH
33032: LD_VAR 0 5
33036: DIFF
33037: ST_TO_ADDR
33038: GO 32997
33040: POP
33041: POP
// end ;
33042: LD_VAR 0 4
33046: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33047: LD_INT 0
33049: PPUSH
33050: PPUSH
33051: PPUSH
// result := true ;
33052: LD_ADDR_VAR 0 3
33056: PUSH
33057: LD_INT 1
33059: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33060: LD_ADDR_VAR 0 5
33064: PUSH
33065: LD_VAR 0 2
33069: PPUSH
33070: CALL_OW 480
33074: ST_TO_ADDR
// if not tmp then
33075: LD_VAR 0 5
33079: NOT
33080: IFFALSE 33084
// exit ;
33082: GO 33133
// for i in tmp do
33084: LD_ADDR_VAR 0 4
33088: PUSH
33089: LD_VAR 0 5
33093: PUSH
33094: FOR_IN
33095: IFFALSE 33131
// if GetTech ( i , side ) <> state_researched then
33097: LD_VAR 0 4
33101: PPUSH
33102: LD_VAR 0 1
33106: PPUSH
33107: CALL_OW 321
33111: PUSH
33112: LD_INT 2
33114: NONEQUAL
33115: IFFALSE 33129
// begin result := false ;
33117: LD_ADDR_VAR 0 3
33121: PUSH
33122: LD_INT 0
33124: ST_TO_ADDR
// exit ;
33125: POP
33126: POP
33127: GO 33133
// end ;
33129: GO 33094
33131: POP
33132: POP
// end ;
33133: LD_VAR 0 3
33137: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33138: LD_INT 0
33140: PPUSH
33141: PPUSH
33142: PPUSH
33143: PPUSH
33144: PPUSH
33145: PPUSH
33146: PPUSH
33147: PPUSH
33148: PPUSH
33149: PPUSH
33150: PPUSH
33151: PPUSH
33152: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33153: LD_VAR 0 1
33157: NOT
33158: IFTRUE 33175
33160: PUSH
33161: LD_VAR 0 1
33165: PPUSH
33166: CALL_OW 257
33170: PUSH
33171: LD_INT 9
33173: NONEQUAL
33174: OR
33175: IFFALSE 33179
// exit ;
33177: GO 33758
// side := GetSide ( unit ) ;
33179: LD_ADDR_VAR 0 9
33183: PUSH
33184: LD_VAR 0 1
33188: PPUSH
33189: CALL_OW 255
33193: ST_TO_ADDR
// tech_space := tech_spacanom ;
33194: LD_ADDR_VAR 0 12
33198: PUSH
33199: LD_INT 29
33201: ST_TO_ADDR
// tech_time := tech_taurad ;
33202: LD_ADDR_VAR 0 13
33206: PUSH
33207: LD_INT 28
33209: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33210: LD_ADDR_VAR 0 11
33214: PUSH
33215: LD_VAR 0 1
33219: PPUSH
33220: CALL_OW 310
33224: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33225: LD_VAR 0 11
33229: PPUSH
33230: CALL_OW 247
33234: PUSH
33235: LD_INT 2
33237: EQUAL
33238: IFFALSE 33242
// exit ;
33240: GO 33758
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33242: LD_ADDR_VAR 0 8
33246: PUSH
33247: LD_INT 81
33249: PUSH
33250: LD_VAR 0 9
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 3
33261: PUSH
33262: LD_INT 21
33264: PUSH
33265: LD_INT 3
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PPUSH
33280: CALL_OW 69
33284: ST_TO_ADDR
// if not tmp then
33285: LD_VAR 0 8
33289: NOT
33290: IFFALSE 33294
// exit ;
33292: GO 33758
// if in_unit then
33294: LD_VAR 0 11
33298: IFFALSE 33322
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33300: LD_ADDR_VAR 0 10
33304: PUSH
33305: LD_VAR 0 8
33309: PPUSH
33310: LD_VAR 0 11
33314: PPUSH
33315: CALL_OW 74
33319: ST_TO_ADDR
33320: GO 33342
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33322: LD_ADDR_VAR 0 10
33326: PUSH
33327: LD_VAR 0 8
33331: PPUSH
33332: LD_VAR 0 1
33336: PPUSH
33337: CALL_OW 74
33341: ST_TO_ADDR
// if not enemy then
33342: LD_VAR 0 10
33346: NOT
33347: IFFALSE 33351
// exit ;
33349: GO 33758
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33351: LD_VAR 0 11
33355: IFFALSE 33377
33357: PUSH
33358: LD_VAR 0 11
33362: PPUSH
33363: LD_VAR 0 10
33367: PPUSH
33368: CALL_OW 296
33372: PUSH
33373: LD_INT 13
33375: GREATER
33376: AND
33377: IFTRUE 33399
33379: PUSH
33380: LD_VAR 0 1
33384: PPUSH
33385: LD_VAR 0 10
33389: PPUSH
33390: CALL_OW 296
33394: PUSH
33395: LD_INT 12
33397: GREATER
33398: OR
33399: IFFALSE 33403
// exit ;
33401: GO 33758
// missile := [ 1 ] ;
33403: LD_ADDR_VAR 0 14
33407: PUSH
33408: LD_INT 1
33410: PUSH
33411: EMPTY
33412: LIST
33413: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33414: LD_VAR 0 9
33418: PPUSH
33419: LD_VAR 0 12
33423: PPUSH
33424: CALL_OW 325
33428: IFFALSE 33457
// missile := Replace ( missile , missile + 1 , 2 ) ;
33430: LD_ADDR_VAR 0 14
33434: PUSH
33435: LD_VAR 0 14
33439: PPUSH
33440: LD_VAR 0 14
33444: PUSH
33445: LD_INT 1
33447: PLUS
33448: PPUSH
33449: LD_INT 2
33451: PPUSH
33452: CALL_OW 1
33456: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33457: LD_VAR 0 9
33461: PPUSH
33462: LD_VAR 0 13
33466: PPUSH
33467: CALL_OW 325
33471: IFFALSE 33495
33473: PUSH
33474: LD_VAR 0 10
33478: PPUSH
33479: CALL_OW 255
33483: PPUSH
33484: LD_VAR 0 13
33488: PPUSH
33489: CALL_OW 325
33493: NOT
33494: AND
33495: IFFALSE 33524
// missile := Replace ( missile , missile + 1 , 3 ) ;
33497: LD_ADDR_VAR 0 14
33501: PUSH
33502: LD_VAR 0 14
33506: PPUSH
33507: LD_VAR 0 14
33511: PUSH
33512: LD_INT 1
33514: PLUS
33515: PPUSH
33516: LD_INT 3
33518: PPUSH
33519: CALL_OW 1
33523: ST_TO_ADDR
// if missile < 2 then
33524: LD_VAR 0 14
33528: PUSH
33529: LD_INT 2
33531: LESS
33532: IFFALSE 33536
// exit ;
33534: GO 33758
// x := GetX ( enemy ) ;
33536: LD_ADDR_VAR 0 4
33540: PUSH
33541: LD_VAR 0 10
33545: PPUSH
33546: CALL_OW 250
33550: ST_TO_ADDR
// y := GetY ( enemy ) ;
33551: LD_ADDR_VAR 0 5
33555: PUSH
33556: LD_VAR 0 10
33560: PPUSH
33561: CALL_OW 251
33565: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33566: LD_ADDR_VAR 0 6
33570: PUSH
33571: LD_VAR 0 4
33575: PUSH
33576: LD_INT 1
33578: NEG
33579: PPUSH
33580: LD_INT 1
33582: PPUSH
33583: CALL_OW 12
33587: PLUS
33588: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33589: LD_ADDR_VAR 0 7
33593: PUSH
33594: LD_VAR 0 5
33598: PUSH
33599: LD_INT 1
33601: NEG
33602: PPUSH
33603: LD_INT 1
33605: PPUSH
33606: CALL_OW 12
33610: PLUS
33611: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33612: LD_VAR 0 6
33616: PPUSH
33617: LD_VAR 0 7
33621: PPUSH
33622: CALL_OW 488
33626: NOT
33627: IFFALSE 33649
// begin _x := x ;
33629: LD_ADDR_VAR 0 6
33633: PUSH
33634: LD_VAR 0 4
33638: ST_TO_ADDR
// _y := y ;
33639: LD_ADDR_VAR 0 7
33643: PUSH
33644: LD_VAR 0 5
33648: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33649: LD_ADDR_VAR 0 3
33653: PUSH
33654: LD_INT 1
33656: PPUSH
33657: LD_VAR 0 14
33661: PPUSH
33662: CALL_OW 12
33666: ST_TO_ADDR
// case i of 1 :
33667: LD_VAR 0 3
33671: PUSH
33672: LD_INT 1
33674: DOUBLE
33675: EQUAL
33676: IFTRUE 33680
33678: GO 33697
33680: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33681: LD_VAR 0 1
33685: PPUSH
33686: LD_VAR 0 10
33690: PPUSH
33691: CALL_OW 115
33695: GO 33758
33697: LD_INT 2
33699: DOUBLE
33700: EQUAL
33701: IFTRUE 33705
33703: GO 33727
33705: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33706: LD_VAR 0 1
33710: PPUSH
33711: LD_VAR 0 6
33715: PPUSH
33716: LD_VAR 0 7
33720: PPUSH
33721: CALL_OW 153
33725: GO 33758
33727: LD_INT 3
33729: DOUBLE
33730: EQUAL
33731: IFTRUE 33735
33733: GO 33757
33735: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33736: LD_VAR 0 1
33740: PPUSH
33741: LD_VAR 0 6
33745: PPUSH
33746: LD_VAR 0 7
33750: PPUSH
33751: CALL_OW 154
33755: GO 33758
33757: POP
// end ;
33758: LD_VAR 0 2
33762: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33763: LD_INT 0
33765: PPUSH
33766: PPUSH
33767: PPUSH
33768: PPUSH
33769: PPUSH
33770: PPUSH
// if not unit or not building then
33771: LD_VAR 0 1
33775: NOT
33776: IFTRUE 33785
33778: PUSH
33779: LD_VAR 0 2
33783: NOT
33784: OR
33785: IFFALSE 33789
// exit ;
33787: GO 33947
// x := GetX ( building ) ;
33789: LD_ADDR_VAR 0 5
33793: PUSH
33794: LD_VAR 0 2
33798: PPUSH
33799: CALL_OW 250
33803: ST_TO_ADDR
// y := GetY ( building ) ;
33804: LD_ADDR_VAR 0 6
33808: PUSH
33809: LD_VAR 0 2
33813: PPUSH
33814: CALL_OW 251
33818: ST_TO_ADDR
// for i := 0 to 5 do
33819: LD_ADDR_VAR 0 4
33823: PUSH
33824: DOUBLE
33825: LD_INT 0
33827: DEC
33828: ST_TO_ADDR
33829: LD_INT 5
33831: PUSH
33832: FOR_TO
33833: IFFALSE 33945
// begin _x := ShiftX ( x , i , 3 ) ;
33835: LD_ADDR_VAR 0 7
33839: PUSH
33840: LD_VAR 0 5
33844: PPUSH
33845: LD_VAR 0 4
33849: PPUSH
33850: LD_INT 3
33852: PPUSH
33853: CALL_OW 272
33857: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33858: LD_ADDR_VAR 0 8
33862: PUSH
33863: LD_VAR 0 6
33867: PPUSH
33868: LD_VAR 0 4
33872: PPUSH
33873: LD_INT 3
33875: PPUSH
33876: CALL_OW 273
33880: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33881: LD_VAR 0 7
33885: PPUSH
33886: LD_VAR 0 8
33890: PPUSH
33891: CALL_OW 488
33895: NOT
33896: IFFALSE 33900
// continue ;
33898: GO 33832
// if HexInfo ( _x , _y ) = 0 then
33900: LD_VAR 0 7
33904: PPUSH
33905: LD_VAR 0 8
33909: PPUSH
33910: CALL_OW 428
33914: PUSH
33915: LD_INT 0
33917: EQUAL
33918: IFFALSE 33943
// begin ComMoveXY ( unit , _x , _y ) ;
33920: LD_VAR 0 1
33924: PPUSH
33925: LD_VAR 0 7
33929: PPUSH
33930: LD_VAR 0 8
33934: PPUSH
33935: CALL_OW 111
// exit ;
33939: POP
33940: POP
33941: GO 33947
// end ; end ;
33943: GO 33832
33945: POP
33946: POP
// end ;
33947: LD_VAR 0 3
33951: RET
// export function ScanBase ( side , base_area ) ; begin
33952: LD_INT 0
33954: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33955: LD_ADDR_VAR 0 3
33959: PUSH
33960: LD_VAR 0 2
33964: PPUSH
33965: LD_INT 81
33967: PUSH
33968: LD_VAR 0 1
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PPUSH
33977: CALL_OW 70
33981: ST_TO_ADDR
// end ;
33982: LD_VAR 0 3
33986: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33987: LD_INT 0
33989: PPUSH
33990: PPUSH
33991: PPUSH
33992: PPUSH
// result := false ;
33993: LD_ADDR_VAR 0 2
33997: PUSH
33998: LD_INT 0
34000: ST_TO_ADDR
// side := GetSide ( unit ) ;
34001: LD_ADDR_VAR 0 3
34005: PUSH
34006: LD_VAR 0 1
34010: PPUSH
34011: CALL_OW 255
34015: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34016: LD_ADDR_VAR 0 4
34020: PUSH
34021: LD_VAR 0 1
34025: PPUSH
34026: CALL_OW 248
34030: ST_TO_ADDR
// case nat of 1 :
34031: LD_VAR 0 4
34035: PUSH
34036: LD_INT 1
34038: DOUBLE
34039: EQUAL
34040: IFTRUE 34044
34042: GO 34055
34044: POP
// tech := tech_lassight ; 2 :
34045: LD_ADDR_VAR 0 5
34049: PUSH
34050: LD_INT 12
34052: ST_TO_ADDR
34053: GO 34094
34055: LD_INT 2
34057: DOUBLE
34058: EQUAL
34059: IFTRUE 34063
34061: GO 34074
34063: POP
// tech := tech_mortar ; 3 :
34064: LD_ADDR_VAR 0 5
34068: PUSH
34069: LD_INT 41
34071: ST_TO_ADDR
34072: GO 34094
34074: LD_INT 3
34076: DOUBLE
34077: EQUAL
34078: IFTRUE 34082
34080: GO 34093
34082: POP
// tech := tech_bazooka ; end ;
34083: LD_ADDR_VAR 0 5
34087: PUSH
34088: LD_INT 44
34090: ST_TO_ADDR
34091: GO 34094
34093: POP
// if Researched ( side , tech ) then
34094: LD_VAR 0 3
34098: PPUSH
34099: LD_VAR 0 5
34103: PPUSH
34104: CALL_OW 325
34108: IFFALSE 34135
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34110: LD_ADDR_VAR 0 2
34114: PUSH
34115: LD_INT 5
34117: PUSH
34118: LD_INT 8
34120: PUSH
34121: LD_INT 9
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: LIST
34128: PUSH
34129: LD_VAR 0 4
34133: ARRAY
34134: ST_TO_ADDR
// end ;
34135: LD_VAR 0 2
34139: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34140: LD_INT 0
34142: PPUSH
34143: PPUSH
34144: PPUSH
// if not mines then
34145: LD_VAR 0 2
34149: NOT
34150: IFFALSE 34154
// exit ;
34152: GO 34298
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34154: LD_ADDR_VAR 0 5
34158: PUSH
34159: LD_INT 81
34161: PUSH
34162: LD_VAR 0 1
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 3
34173: PUSH
34174: LD_INT 21
34176: PUSH
34177: LD_INT 3
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PPUSH
34192: CALL_OW 69
34196: ST_TO_ADDR
// for i in mines do
34197: LD_ADDR_VAR 0 4
34201: PUSH
34202: LD_VAR 0 2
34206: PUSH
34207: FOR_IN
34208: IFFALSE 34296
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34210: LD_VAR 0 4
34214: PUSH
34215: LD_INT 1
34217: ARRAY
34218: PPUSH
34219: LD_VAR 0 4
34223: PUSH
34224: LD_INT 2
34226: ARRAY
34227: PPUSH
34228: CALL_OW 458
34232: NOT
34233: IFFALSE 34237
// continue ;
34235: GO 34207
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34237: LD_VAR 0 4
34241: PUSH
34242: LD_INT 1
34244: ARRAY
34245: PPUSH
34246: LD_VAR 0 4
34250: PUSH
34251: LD_INT 2
34253: ARRAY
34254: PPUSH
34255: CALL_OW 428
34259: PUSH
34260: LD_VAR 0 5
34264: IN
34265: IFFALSE 34294
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34267: LD_VAR 0 4
34271: PUSH
34272: LD_INT 1
34274: ARRAY
34275: PPUSH
34276: LD_VAR 0 4
34280: PUSH
34281: LD_INT 2
34283: ARRAY
34284: PPUSH
34285: LD_VAR 0 1
34289: PPUSH
34290: CALL_OW 456
// end ;
34294: GO 34207
34296: POP
34297: POP
// end ;
34298: LD_VAR 0 3
34302: RET
// export function Count ( array ) ; begin
34303: LD_INT 0
34305: PPUSH
// result := array + 0 ;
34306: LD_ADDR_VAR 0 2
34310: PUSH
34311: LD_VAR 0 1
34315: PUSH
34316: LD_INT 0
34318: PLUS
34319: ST_TO_ADDR
// end ;
34320: LD_VAR 0 2
34324: RET
// export function IsEmpty ( building ) ; begin
34325: LD_INT 0
34327: PPUSH
// if not building then
34328: LD_VAR 0 1
34332: NOT
34333: IFFALSE 34337
// exit ;
34335: GO 34380
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34337: LD_ADDR_VAR 0 2
34341: PUSH
34342: LD_VAR 0 1
34346: PUSH
34347: LD_INT 22
34349: PUSH
34350: LD_VAR 0 1
34354: PPUSH
34355: CALL_OW 255
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: LD_INT 58
34366: PUSH
34367: EMPTY
34368: LIST
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: PPUSH
34374: CALL_OW 69
34378: IN
34379: ST_TO_ADDR
// end ;
34380: LD_VAR 0 2
34384: RET
// export function IsNotFull ( building ) ; var places ; begin
34385: LD_INT 0
34387: PPUSH
34388: PPUSH
// if not building then
34389: LD_VAR 0 1
34393: NOT
34394: IFFALSE 34398
// exit ;
34396: GO 34426
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
34398: LD_ADDR_VAR 0 2
34402: PUSH
34403: LD_VAR 0 1
34407: PPUSH
34408: LD_INT 3
34410: PUSH
34411: LD_INT 62
34413: PUSH
34414: EMPTY
34415: LIST
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: PPUSH
34421: CALL_OW 72
34425: ST_TO_ADDR
// end ;
34426: LD_VAR 0 2
34430: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34431: LD_INT 0
34433: PPUSH
34434: PPUSH
34435: PPUSH
34436: PPUSH
// tmp := [ ] ;
34437: LD_ADDR_VAR 0 3
34441: PUSH
34442: EMPTY
34443: ST_TO_ADDR
// list := [ ] ;
34444: LD_ADDR_VAR 0 5
34448: PUSH
34449: EMPTY
34450: ST_TO_ADDR
// for i = 16 to 25 do
34451: LD_ADDR_VAR 0 4
34455: PUSH
34456: DOUBLE
34457: LD_INT 16
34459: DEC
34460: ST_TO_ADDR
34461: LD_INT 25
34463: PUSH
34464: FOR_TO
34465: IFFALSE 34538
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34467: LD_ADDR_VAR 0 3
34471: PUSH
34472: LD_VAR 0 3
34476: PUSH
34477: LD_INT 22
34479: PUSH
34480: LD_VAR 0 1
34484: PPUSH
34485: CALL_OW 255
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_INT 91
34496: PUSH
34497: LD_VAR 0 1
34501: PUSH
34502: LD_INT 6
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 30
34512: PUSH
34513: LD_VAR 0 4
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: LIST
34526: PUSH
34527: EMPTY
34528: LIST
34529: PPUSH
34530: CALL_OW 69
34534: ADD
34535: ST_TO_ADDR
34536: GO 34464
34538: POP
34539: POP
// for i = 1 to tmp do
34540: LD_ADDR_VAR 0 4
34544: PUSH
34545: DOUBLE
34546: LD_INT 1
34548: DEC
34549: ST_TO_ADDR
34550: LD_VAR 0 3
34554: PUSH
34555: FOR_TO
34556: IFFALSE 34644
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34558: LD_ADDR_VAR 0 5
34562: PUSH
34563: LD_VAR 0 5
34567: PUSH
34568: LD_VAR 0 3
34572: PUSH
34573: LD_VAR 0 4
34577: ARRAY
34578: PPUSH
34579: CALL_OW 266
34583: PUSH
34584: LD_VAR 0 3
34588: PUSH
34589: LD_VAR 0 4
34593: ARRAY
34594: PPUSH
34595: CALL_OW 250
34599: PUSH
34600: LD_VAR 0 3
34604: PUSH
34605: LD_VAR 0 4
34609: ARRAY
34610: PPUSH
34611: CALL_OW 251
34615: PUSH
34616: LD_VAR 0 3
34620: PUSH
34621: LD_VAR 0 4
34625: ARRAY
34626: PPUSH
34627: CALL_OW 254
34631: PUSH
34632: EMPTY
34633: LIST
34634: LIST
34635: LIST
34636: LIST
34637: PUSH
34638: EMPTY
34639: LIST
34640: ADD
34641: ST_TO_ADDR
34642: GO 34555
34644: POP
34645: POP
// result := list ;
34646: LD_ADDR_VAR 0 2
34650: PUSH
34651: LD_VAR 0 5
34655: ST_TO_ADDR
// end ;
34656: LD_VAR 0 2
34660: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34661: LD_INT 0
34663: PPUSH
34664: PPUSH
34665: PPUSH
34666: PPUSH
34667: PPUSH
34668: PPUSH
34669: PPUSH
// if not factory then
34670: LD_VAR 0 1
34674: NOT
34675: IFFALSE 34679
// exit ;
34677: GO 35282
// if control = control_apeman then
34679: LD_VAR 0 4
34683: PUSH
34684: LD_INT 5
34686: EQUAL
34687: IFFALSE 34796
// begin tmp := UnitsInside ( factory ) ;
34689: LD_ADDR_VAR 0 8
34693: PUSH
34694: LD_VAR 0 1
34698: PPUSH
34699: CALL_OW 313
34703: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34704: LD_VAR 0 8
34708: PPUSH
34709: LD_INT 25
34711: PUSH
34712: LD_INT 12
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: PPUSH
34719: CALL_OW 72
34723: NOT
34724: IFFALSE 34734
// control := control_manual ;
34726: LD_ADDR_VAR 0 4
34730: PUSH
34731: LD_INT 1
34733: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34734: LD_ADDR_VAR 0 8
34738: PUSH
34739: LD_VAR 0 1
34743: PPUSH
34744: CALL 34431 0 1
34748: ST_TO_ADDR
// if tmp then
34749: LD_VAR 0 8
34753: IFFALSE 34796
// begin for i in tmp do
34755: LD_ADDR_VAR 0 7
34759: PUSH
34760: LD_VAR 0 8
34764: PUSH
34765: FOR_IN
34766: IFFALSE 34794
// if i [ 1 ] = b_ext_radio then
34768: LD_VAR 0 7
34772: PUSH
34773: LD_INT 1
34775: ARRAY
34776: PUSH
34777: LD_INT 22
34779: EQUAL
34780: IFFALSE 34792
// begin control := control_remote ;
34782: LD_ADDR_VAR 0 4
34786: PUSH
34787: LD_INT 2
34789: ST_TO_ADDR
// break ;
34790: GO 34794
// end ;
34792: GO 34765
34794: POP
34795: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34796: LD_VAR 0 1
34800: PPUSH
34801: LD_VAR 0 2
34805: PPUSH
34806: LD_VAR 0 3
34810: PPUSH
34811: LD_VAR 0 4
34815: PPUSH
34816: LD_VAR 0 5
34820: PPUSH
34821: CALL_OW 448
34825: IFFALSE 34860
// begin result := [ chassis , engine , control , weapon ] ;
34827: LD_ADDR_VAR 0 6
34831: PUSH
34832: LD_VAR 0 2
34836: PUSH
34837: LD_VAR 0 3
34841: PUSH
34842: LD_VAR 0 4
34846: PUSH
34847: LD_VAR 0 5
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: ST_TO_ADDR
// exit ;
34858: GO 35282
// end ; _chassis := AvailableChassisList ( factory ) ;
34860: LD_ADDR_VAR 0 9
34864: PUSH
34865: LD_VAR 0 1
34869: PPUSH
34870: CALL_OW 475
34874: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34875: LD_ADDR_VAR 0 11
34879: PUSH
34880: LD_VAR 0 1
34884: PPUSH
34885: CALL_OW 476
34889: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34890: LD_ADDR_VAR 0 12
34894: PUSH
34895: LD_VAR 0 1
34899: PPUSH
34900: CALL_OW 477
34904: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34905: LD_ADDR_VAR 0 10
34909: PUSH
34910: LD_VAR 0 1
34914: PPUSH
34915: CALL_OW 478
34919: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34920: LD_VAR 0 9
34924: NOT
34925: IFTRUE 34934
34927: PUSH
34928: LD_VAR 0 11
34932: NOT
34933: OR
34934: IFTRUE 34943
34936: PUSH
34937: LD_VAR 0 12
34941: NOT
34942: OR
34943: IFTRUE 34952
34945: PUSH
34946: LD_VAR 0 10
34950: NOT
34951: OR
34952: IFFALSE 34987
// begin result := [ chassis , engine , control , weapon ] ;
34954: LD_ADDR_VAR 0 6
34958: PUSH
34959: LD_VAR 0 2
34963: PUSH
34964: LD_VAR 0 3
34968: PUSH
34969: LD_VAR 0 4
34973: PUSH
34974: LD_VAR 0 5
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: LIST
34983: LIST
34984: ST_TO_ADDR
// exit ;
34985: GO 35282
// end ; if not chassis in _chassis then
34987: LD_VAR 0 2
34991: PUSH
34992: LD_VAR 0 9
34996: IN
34997: NOT
34998: IFFALSE 35024
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35000: LD_ADDR_VAR 0 2
35004: PUSH
35005: LD_VAR 0 9
35009: PUSH
35010: LD_INT 1
35012: PPUSH
35013: LD_VAR 0 9
35017: PPUSH
35018: CALL_OW 12
35022: ARRAY
35023: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35024: LD_VAR 0 2
35028: PPUSH
35029: LD_VAR 0 3
35033: PPUSH
35034: CALL 35287 0 2
35038: NOT
35039: IFFALSE 35100
// repeat engine := _engine [ 1 ] ;
35041: LD_ADDR_VAR 0 3
35045: PUSH
35046: LD_VAR 0 11
35050: PUSH
35051: LD_INT 1
35053: ARRAY
35054: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35055: LD_ADDR_VAR 0 11
35059: PUSH
35060: LD_VAR 0 11
35064: PPUSH
35065: LD_INT 1
35067: PPUSH
35068: CALL_OW 3
35072: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35073: LD_VAR 0 2
35077: PPUSH
35078: LD_VAR 0 3
35082: PPUSH
35083: CALL 35287 0 2
35087: IFTRUE 35098
35089: PUSH
35090: LD_VAR 0 11
35094: PUSH
35095: EMPTY
35096: EQUAL
35097: OR
35098: IFFALSE 35041
// if not control in _control then
35100: LD_VAR 0 4
35104: PUSH
35105: LD_VAR 0 12
35109: IN
35110: NOT
35111: IFFALSE 35137
// control := _control [ rand ( 1 , _control ) ] ;
35113: LD_ADDR_VAR 0 4
35117: PUSH
35118: LD_VAR 0 12
35122: PUSH
35123: LD_INT 1
35125: PPUSH
35126: LD_VAR 0 12
35130: PPUSH
35131: CALL_OW 12
35135: ARRAY
35136: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35137: LD_VAR 0 2
35141: PPUSH
35142: LD_VAR 0 5
35146: PPUSH
35147: CALL 35509 0 2
35151: NOT
35152: IFFALSE 35213
// repeat weapon := _weapon [ 1 ] ;
35154: LD_ADDR_VAR 0 5
35158: PUSH
35159: LD_VAR 0 10
35163: PUSH
35164: LD_INT 1
35166: ARRAY
35167: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35168: LD_ADDR_VAR 0 10
35172: PUSH
35173: LD_VAR 0 10
35177: PPUSH
35178: LD_INT 1
35180: PPUSH
35181: CALL_OW 3
35185: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35186: LD_VAR 0 2
35190: PPUSH
35191: LD_VAR 0 5
35195: PPUSH
35196: CALL 35509 0 2
35200: IFTRUE 35211
35202: PUSH
35203: LD_VAR 0 10
35207: PUSH
35208: EMPTY
35209: EQUAL
35210: OR
35211: IFFALSE 35154
// result := [ ] ;
35213: LD_ADDR_VAR 0 6
35217: PUSH
35218: EMPTY
35219: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35220: LD_VAR 0 1
35224: PPUSH
35225: LD_VAR 0 2
35229: PPUSH
35230: LD_VAR 0 3
35234: PPUSH
35235: LD_VAR 0 4
35239: PPUSH
35240: LD_VAR 0 5
35244: PPUSH
35245: CALL_OW 448
35249: IFFALSE 35282
// result := [ chassis , engine , control , weapon ] ;
35251: LD_ADDR_VAR 0 6
35255: PUSH
35256: LD_VAR 0 2
35260: PUSH
35261: LD_VAR 0 3
35265: PUSH
35266: LD_VAR 0 4
35270: PUSH
35271: LD_VAR 0 5
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: ST_TO_ADDR
// end ;
35282: LD_VAR 0 6
35286: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
35287: LD_INT 0
35289: PPUSH
// if not chassis or not engine then
35290: LD_VAR 0 1
35294: NOT
35295: IFTRUE 35304
35297: PUSH
35298: LD_VAR 0 2
35302: NOT
35303: OR
35304: IFFALSE 35308
// exit ;
35306: GO 35504
// case engine of engine_solar :
35308: LD_VAR 0 2
35312: PUSH
35313: LD_INT 2
35315: DOUBLE
35316: EQUAL
35317: IFTRUE 35321
35319: GO 35359
35321: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35322: LD_ADDR_VAR 0 3
35326: PUSH
35327: LD_INT 11
35329: PUSH
35330: LD_INT 12
35332: PUSH
35333: LD_INT 13
35335: PUSH
35336: LD_INT 14
35338: PUSH
35339: LD_INT 1
35341: PUSH
35342: LD_INT 2
35344: PUSH
35345: LD_INT 3
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: ST_TO_ADDR
35357: GO 35488
35359: LD_INT 1
35361: DOUBLE
35362: EQUAL
35363: IFTRUE 35367
35365: GO 35429
35367: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35368: LD_ADDR_VAR 0 3
35372: PUSH
35373: LD_INT 11
35375: PUSH
35376: LD_INT 12
35378: PUSH
35379: LD_INT 13
35381: PUSH
35382: LD_INT 14
35384: PUSH
35385: LD_INT 1
35387: PUSH
35388: LD_INT 2
35390: PUSH
35391: LD_INT 3
35393: PUSH
35394: LD_INT 4
35396: PUSH
35397: LD_INT 5
35399: PUSH
35400: LD_INT 21
35402: PUSH
35403: LD_INT 23
35405: PUSH
35406: LD_INT 22
35408: PUSH
35409: LD_INT 24
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: ST_TO_ADDR
35427: GO 35488
35429: LD_INT 3
35431: DOUBLE
35432: EQUAL
35433: IFTRUE 35437
35435: GO 35487
35437: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35438: LD_ADDR_VAR 0 3
35442: PUSH
35443: LD_INT 13
35445: PUSH
35446: LD_INT 14
35448: PUSH
35449: LD_INT 2
35451: PUSH
35452: LD_INT 3
35454: PUSH
35455: LD_INT 4
35457: PUSH
35458: LD_INT 5
35460: PUSH
35461: LD_INT 21
35463: PUSH
35464: LD_INT 22
35466: PUSH
35467: LD_INT 23
35469: PUSH
35470: LD_INT 24
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: ST_TO_ADDR
35485: GO 35488
35487: POP
// result := ( chassis in result ) ;
35488: LD_ADDR_VAR 0 3
35492: PUSH
35493: LD_VAR 0 1
35497: PUSH
35498: LD_VAR 0 3
35502: IN
35503: ST_TO_ADDR
// end ;
35504: LD_VAR 0 3
35508: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35509: LD_INT 0
35511: PPUSH
// if not chassis or not weapon then
35512: LD_VAR 0 1
35516: NOT
35517: IFTRUE 35526
35519: PUSH
35520: LD_VAR 0 2
35524: NOT
35525: OR
35526: IFFALSE 35530
// exit ;
35528: GO 36624
// case weapon of us_machine_gun :
35530: LD_VAR 0 2
35534: PUSH
35535: LD_INT 2
35537: DOUBLE
35538: EQUAL
35539: IFTRUE 35543
35541: GO 35573
35543: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35544: LD_ADDR_VAR 0 3
35548: PUSH
35549: LD_INT 1
35551: PUSH
35552: LD_INT 2
35554: PUSH
35555: LD_INT 3
35557: PUSH
35558: LD_INT 4
35560: PUSH
35561: LD_INT 5
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: ST_TO_ADDR
35571: GO 36608
35573: LD_INT 3
35575: DOUBLE
35576: EQUAL
35577: IFTRUE 35581
35579: GO 35611
35581: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35582: LD_ADDR_VAR 0 3
35586: PUSH
35587: LD_INT 1
35589: PUSH
35590: LD_INT 2
35592: PUSH
35593: LD_INT 3
35595: PUSH
35596: LD_INT 4
35598: PUSH
35599: LD_INT 5
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: ST_TO_ADDR
35609: GO 36608
35611: LD_INT 11
35613: DOUBLE
35614: EQUAL
35615: IFTRUE 35619
35617: GO 35649
35619: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35620: LD_ADDR_VAR 0 3
35624: PUSH
35625: LD_INT 1
35627: PUSH
35628: LD_INT 2
35630: PUSH
35631: LD_INT 3
35633: PUSH
35634: LD_INT 4
35636: PUSH
35637: LD_INT 5
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: ST_TO_ADDR
35647: GO 36608
35649: LD_INT 4
35651: DOUBLE
35652: EQUAL
35653: IFTRUE 35657
35655: GO 35683
35657: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35658: LD_ADDR_VAR 0 3
35662: PUSH
35663: LD_INT 2
35665: PUSH
35666: LD_INT 3
35668: PUSH
35669: LD_INT 4
35671: PUSH
35672: LD_INT 5
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: ST_TO_ADDR
35681: GO 36608
35683: LD_INT 5
35685: DOUBLE
35686: EQUAL
35687: IFTRUE 35691
35689: GO 35717
35691: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35692: LD_ADDR_VAR 0 3
35696: PUSH
35697: LD_INT 2
35699: PUSH
35700: LD_INT 3
35702: PUSH
35703: LD_INT 4
35705: PUSH
35706: LD_INT 5
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: ST_TO_ADDR
35715: GO 36608
35717: LD_INT 9
35719: DOUBLE
35720: EQUAL
35721: IFTRUE 35725
35723: GO 35751
35725: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35726: LD_ADDR_VAR 0 3
35730: PUSH
35731: LD_INT 2
35733: PUSH
35734: LD_INT 3
35736: PUSH
35737: LD_INT 4
35739: PUSH
35740: LD_INT 5
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: LIST
35747: LIST
35748: ST_TO_ADDR
35749: GO 36608
35751: LD_INT 7
35753: DOUBLE
35754: EQUAL
35755: IFTRUE 35759
35757: GO 35785
35759: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35760: LD_ADDR_VAR 0 3
35764: PUSH
35765: LD_INT 2
35767: PUSH
35768: LD_INT 3
35770: PUSH
35771: LD_INT 4
35773: PUSH
35774: LD_INT 5
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: ST_TO_ADDR
35783: GO 36608
35785: LD_INT 12
35787: DOUBLE
35788: EQUAL
35789: IFTRUE 35793
35791: GO 35819
35793: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35794: LD_ADDR_VAR 0 3
35798: PUSH
35799: LD_INT 2
35801: PUSH
35802: LD_INT 3
35804: PUSH
35805: LD_INT 4
35807: PUSH
35808: LD_INT 5
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: ST_TO_ADDR
35817: GO 36608
35819: LD_INT 13
35821: DOUBLE
35822: EQUAL
35823: IFTRUE 35827
35825: GO 35853
35827: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35828: LD_ADDR_VAR 0 3
35832: PUSH
35833: LD_INT 2
35835: PUSH
35836: LD_INT 3
35838: PUSH
35839: LD_INT 4
35841: PUSH
35842: LD_INT 5
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: ST_TO_ADDR
35851: GO 36608
35853: LD_INT 14
35855: DOUBLE
35856: EQUAL
35857: IFTRUE 35861
35859: GO 35879
35861: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35862: LD_ADDR_VAR 0 3
35866: PUSH
35867: LD_INT 4
35869: PUSH
35870: LD_INT 5
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: ST_TO_ADDR
35877: GO 36608
35879: LD_INT 6
35881: DOUBLE
35882: EQUAL
35883: IFTRUE 35887
35885: GO 35905
35887: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35888: LD_ADDR_VAR 0 3
35892: PUSH
35893: LD_INT 4
35895: PUSH
35896: LD_INT 5
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: ST_TO_ADDR
35903: GO 36608
35905: LD_INT 10
35907: DOUBLE
35908: EQUAL
35909: IFTRUE 35913
35911: GO 35931
35913: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35914: LD_ADDR_VAR 0 3
35918: PUSH
35919: LD_INT 4
35921: PUSH
35922: LD_INT 5
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: ST_TO_ADDR
35929: GO 36608
35931: LD_INT 22
35933: DOUBLE
35934: EQUAL
35935: IFTRUE 35939
35937: GO 35965
35939: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35940: LD_ADDR_VAR 0 3
35944: PUSH
35945: LD_INT 11
35947: PUSH
35948: LD_INT 12
35950: PUSH
35951: LD_INT 13
35953: PUSH
35954: LD_INT 14
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: LIST
35961: LIST
35962: ST_TO_ADDR
35963: GO 36608
35965: LD_INT 23
35967: DOUBLE
35968: EQUAL
35969: IFTRUE 35973
35971: GO 35999
35973: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35974: LD_ADDR_VAR 0 3
35978: PUSH
35979: LD_INT 11
35981: PUSH
35982: LD_INT 12
35984: PUSH
35985: LD_INT 13
35987: PUSH
35988: LD_INT 14
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: LIST
35995: LIST
35996: ST_TO_ADDR
35997: GO 36608
35999: LD_INT 24
36001: DOUBLE
36002: EQUAL
36003: IFTRUE 36007
36005: GO 36033
36007: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36008: LD_ADDR_VAR 0 3
36012: PUSH
36013: LD_INT 11
36015: PUSH
36016: LD_INT 12
36018: PUSH
36019: LD_INT 13
36021: PUSH
36022: LD_INT 14
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: ST_TO_ADDR
36031: GO 36608
36033: LD_INT 30
36035: DOUBLE
36036: EQUAL
36037: IFTRUE 36041
36039: GO 36067
36041: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36042: LD_ADDR_VAR 0 3
36046: PUSH
36047: LD_INT 11
36049: PUSH
36050: LD_INT 12
36052: PUSH
36053: LD_INT 13
36055: PUSH
36056: LD_INT 14
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: ST_TO_ADDR
36065: GO 36608
36067: LD_INT 25
36069: DOUBLE
36070: EQUAL
36071: IFTRUE 36075
36073: GO 36093
36075: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36076: LD_ADDR_VAR 0 3
36080: PUSH
36081: LD_INT 13
36083: PUSH
36084: LD_INT 14
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: ST_TO_ADDR
36091: GO 36608
36093: LD_INT 27
36095: DOUBLE
36096: EQUAL
36097: IFTRUE 36101
36099: GO 36119
36101: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36102: LD_ADDR_VAR 0 3
36106: PUSH
36107: LD_INT 13
36109: PUSH
36110: LD_INT 14
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: ST_TO_ADDR
36117: GO 36608
36119: LD_INT 92
36121: DOUBLE
36122: EQUAL
36123: IFTRUE 36127
36125: GO 36153
36127: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36128: LD_ADDR_VAR 0 3
36132: PUSH
36133: LD_INT 11
36135: PUSH
36136: LD_INT 12
36138: PUSH
36139: LD_INT 13
36141: PUSH
36142: LD_INT 14
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: LIST
36149: LIST
36150: ST_TO_ADDR
36151: GO 36608
36153: LD_INT 28
36155: DOUBLE
36156: EQUAL
36157: IFTRUE 36161
36159: GO 36179
36161: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36162: LD_ADDR_VAR 0 3
36166: PUSH
36167: LD_INT 13
36169: PUSH
36170: LD_INT 14
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: ST_TO_ADDR
36177: GO 36608
36179: LD_INT 29
36181: DOUBLE
36182: EQUAL
36183: IFTRUE 36187
36185: GO 36205
36187: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36188: LD_ADDR_VAR 0 3
36192: PUSH
36193: LD_INT 13
36195: PUSH
36196: LD_INT 14
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: ST_TO_ADDR
36203: GO 36608
36205: LD_INT 31
36207: DOUBLE
36208: EQUAL
36209: IFTRUE 36213
36211: GO 36231
36213: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
36214: LD_ADDR_VAR 0 3
36218: PUSH
36219: LD_INT 13
36221: PUSH
36222: LD_INT 14
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: ST_TO_ADDR
36229: GO 36608
36231: LD_INT 26
36233: DOUBLE
36234: EQUAL
36235: IFTRUE 36239
36237: GO 36257
36239: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
36240: LD_ADDR_VAR 0 3
36244: PUSH
36245: LD_INT 13
36247: PUSH
36248: LD_INT 14
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: ST_TO_ADDR
36255: GO 36608
36257: LD_INT 42
36259: DOUBLE
36260: EQUAL
36261: IFTRUE 36265
36263: GO 36291
36265: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
36266: LD_ADDR_VAR 0 3
36270: PUSH
36271: LD_INT 21
36273: PUSH
36274: LD_INT 22
36276: PUSH
36277: LD_INT 23
36279: PUSH
36280: LD_INT 24
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: LIST
36287: LIST
36288: ST_TO_ADDR
36289: GO 36608
36291: LD_INT 43
36293: DOUBLE
36294: EQUAL
36295: IFTRUE 36299
36297: GO 36325
36299: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36300: LD_ADDR_VAR 0 3
36304: PUSH
36305: LD_INT 21
36307: PUSH
36308: LD_INT 22
36310: PUSH
36311: LD_INT 23
36313: PUSH
36314: LD_INT 24
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: LIST
36321: LIST
36322: ST_TO_ADDR
36323: GO 36608
36325: LD_INT 44
36327: DOUBLE
36328: EQUAL
36329: IFTRUE 36333
36331: GO 36359
36333: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36334: LD_ADDR_VAR 0 3
36338: PUSH
36339: LD_INT 21
36341: PUSH
36342: LD_INT 22
36344: PUSH
36345: LD_INT 23
36347: PUSH
36348: LD_INT 24
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: LIST
36355: LIST
36356: ST_TO_ADDR
36357: GO 36608
36359: LD_INT 45
36361: DOUBLE
36362: EQUAL
36363: IFTRUE 36367
36365: GO 36393
36367: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36368: LD_ADDR_VAR 0 3
36372: PUSH
36373: LD_INT 21
36375: PUSH
36376: LD_INT 22
36378: PUSH
36379: LD_INT 23
36381: PUSH
36382: LD_INT 24
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: LIST
36389: LIST
36390: ST_TO_ADDR
36391: GO 36608
36393: LD_INT 49
36395: DOUBLE
36396: EQUAL
36397: IFTRUE 36401
36399: GO 36427
36401: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36402: LD_ADDR_VAR 0 3
36406: PUSH
36407: LD_INT 21
36409: PUSH
36410: LD_INT 22
36412: PUSH
36413: LD_INT 23
36415: PUSH
36416: LD_INT 24
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: ST_TO_ADDR
36425: GO 36608
36427: LD_INT 51
36429: DOUBLE
36430: EQUAL
36431: IFTRUE 36435
36433: GO 36461
36435: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36436: LD_ADDR_VAR 0 3
36440: PUSH
36441: LD_INT 21
36443: PUSH
36444: LD_INT 22
36446: PUSH
36447: LD_INT 23
36449: PUSH
36450: LD_INT 24
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: LIST
36457: LIST
36458: ST_TO_ADDR
36459: GO 36608
36461: LD_INT 52
36463: DOUBLE
36464: EQUAL
36465: IFTRUE 36469
36467: GO 36495
36469: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36470: LD_ADDR_VAR 0 3
36474: PUSH
36475: LD_INT 21
36477: PUSH
36478: LD_INT 22
36480: PUSH
36481: LD_INT 23
36483: PUSH
36484: LD_INT 24
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: ST_TO_ADDR
36493: GO 36608
36495: LD_INT 53
36497: DOUBLE
36498: EQUAL
36499: IFTRUE 36503
36501: GO 36521
36503: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36504: LD_ADDR_VAR 0 3
36508: PUSH
36509: LD_INT 23
36511: PUSH
36512: LD_INT 24
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: ST_TO_ADDR
36519: GO 36608
36521: LD_INT 46
36523: DOUBLE
36524: EQUAL
36525: IFTRUE 36529
36527: GO 36547
36529: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36530: LD_ADDR_VAR 0 3
36534: PUSH
36535: LD_INT 23
36537: PUSH
36538: LD_INT 24
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: ST_TO_ADDR
36545: GO 36608
36547: LD_INT 47
36549: DOUBLE
36550: EQUAL
36551: IFTRUE 36555
36553: GO 36573
36555: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
36556: LD_ADDR_VAR 0 3
36560: PUSH
36561: LD_INT 23
36563: PUSH
36564: LD_INT 24
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: ST_TO_ADDR
36571: GO 36608
36573: LD_INT 98
36575: DOUBLE
36576: EQUAL
36577: IFTRUE 36581
36579: GO 36607
36581: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36582: LD_ADDR_VAR 0 3
36586: PUSH
36587: LD_INT 21
36589: PUSH
36590: LD_INT 22
36592: PUSH
36593: LD_INT 23
36595: PUSH
36596: LD_INT 24
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: ST_TO_ADDR
36605: GO 36608
36607: POP
// result := ( chassis in result ) ;
36608: LD_ADDR_VAR 0 3
36612: PUSH
36613: LD_VAR 0 1
36617: PUSH
36618: LD_VAR 0 3
36622: IN
36623: ST_TO_ADDR
// end ;
36624: LD_VAR 0 3
36628: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36629: LD_INT 0
36631: PPUSH
36632: PPUSH
36633: PPUSH
36634: PPUSH
36635: PPUSH
36636: PPUSH
36637: PPUSH
// result := array ;
36638: LD_ADDR_VAR 0 5
36642: PUSH
36643: LD_VAR 0 1
36647: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36648: LD_VAR 0 1
36652: NOT
36653: IFTRUE 36662
36655: PUSH
36656: LD_VAR 0 2
36660: NOT
36661: OR
36662: IFTRUE 36671
36664: PUSH
36665: LD_VAR 0 3
36669: NOT
36670: OR
36671: IFTRUE 36685
36673: PUSH
36674: LD_VAR 0 2
36678: PUSH
36679: LD_VAR 0 1
36683: GREATER
36684: OR
36685: IFTRUE 36699
36687: PUSH
36688: LD_VAR 0 3
36692: PUSH
36693: LD_VAR 0 1
36697: GREATER
36698: OR
36699: IFFALSE 36703
// exit ;
36701: GO 36999
// if direction then
36703: LD_VAR 0 4
36707: IFFALSE 36771
// begin d := 1 ;
36709: LD_ADDR_VAR 0 9
36713: PUSH
36714: LD_INT 1
36716: ST_TO_ADDR
// if i_from > i_to then
36717: LD_VAR 0 2
36721: PUSH
36722: LD_VAR 0 3
36726: GREATER
36727: IFFALSE 36753
// length := ( array - i_from ) + i_to else
36729: LD_ADDR_VAR 0 11
36733: PUSH
36734: LD_VAR 0 1
36738: PUSH
36739: LD_VAR 0 2
36743: MINUS
36744: PUSH
36745: LD_VAR 0 3
36749: PLUS
36750: ST_TO_ADDR
36751: GO 36769
// length := i_to - i_from ;
36753: LD_ADDR_VAR 0 11
36757: PUSH
36758: LD_VAR 0 3
36762: PUSH
36763: LD_VAR 0 2
36767: MINUS
36768: ST_TO_ADDR
// end else
36769: GO 36832
// begin d := - 1 ;
36771: LD_ADDR_VAR 0 9
36775: PUSH
36776: LD_INT 1
36778: NEG
36779: ST_TO_ADDR
// if i_from > i_to then
36780: LD_VAR 0 2
36784: PUSH
36785: LD_VAR 0 3
36789: GREATER
36790: IFFALSE 36810
// length := i_from - i_to else
36792: LD_ADDR_VAR 0 11
36796: PUSH
36797: LD_VAR 0 2
36801: PUSH
36802: LD_VAR 0 3
36806: MINUS
36807: ST_TO_ADDR
36808: GO 36832
// length := ( array - i_to ) + i_from ;
36810: LD_ADDR_VAR 0 11
36814: PUSH
36815: LD_VAR 0 1
36819: PUSH
36820: LD_VAR 0 3
36824: MINUS
36825: PUSH
36826: LD_VAR 0 2
36830: PLUS
36831: ST_TO_ADDR
// end ; if not length then
36832: LD_VAR 0 11
36836: NOT
36837: IFFALSE 36841
// exit ;
36839: GO 36999
// tmp := array ;
36841: LD_ADDR_VAR 0 10
36845: PUSH
36846: LD_VAR 0 1
36850: ST_TO_ADDR
// for i = 1 to length do
36851: LD_ADDR_VAR 0 6
36855: PUSH
36856: DOUBLE
36857: LD_INT 1
36859: DEC
36860: ST_TO_ADDR
36861: LD_VAR 0 11
36865: PUSH
36866: FOR_TO
36867: IFFALSE 36987
// begin for j = 1 to array do
36869: LD_ADDR_VAR 0 7
36873: PUSH
36874: DOUBLE
36875: LD_INT 1
36877: DEC
36878: ST_TO_ADDR
36879: LD_VAR 0 1
36883: PUSH
36884: FOR_TO
36885: IFFALSE 36973
// begin k := j + d ;
36887: LD_ADDR_VAR 0 8
36891: PUSH
36892: LD_VAR 0 7
36896: PUSH
36897: LD_VAR 0 9
36901: PLUS
36902: ST_TO_ADDR
// if k > array then
36903: LD_VAR 0 8
36907: PUSH
36908: LD_VAR 0 1
36912: GREATER
36913: IFFALSE 36923
// k := 1 ;
36915: LD_ADDR_VAR 0 8
36919: PUSH
36920: LD_INT 1
36922: ST_TO_ADDR
// if not k then
36923: LD_VAR 0 8
36927: NOT
36928: IFFALSE 36940
// k := array ;
36930: LD_ADDR_VAR 0 8
36934: PUSH
36935: LD_VAR 0 1
36939: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36940: LD_ADDR_VAR 0 10
36944: PUSH
36945: LD_VAR 0 10
36949: PPUSH
36950: LD_VAR 0 8
36954: PPUSH
36955: LD_VAR 0 1
36959: PUSH
36960: LD_VAR 0 7
36964: ARRAY
36965: PPUSH
36966: CALL_OW 1
36970: ST_TO_ADDR
// end ;
36971: GO 36884
36973: POP
36974: POP
// array := tmp ;
36975: LD_ADDR_VAR 0 1
36979: PUSH
36980: LD_VAR 0 10
36984: ST_TO_ADDR
// end ;
36985: GO 36866
36987: POP
36988: POP
// result := array ;
36989: LD_ADDR_VAR 0 5
36993: PUSH
36994: LD_VAR 0 1
36998: ST_TO_ADDR
// end ;
36999: LD_VAR 0 5
37003: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37004: LD_INT 0
37006: PPUSH
37007: PPUSH
// result := 0 ;
37008: LD_ADDR_VAR 0 3
37012: PUSH
37013: LD_INT 0
37015: ST_TO_ADDR
// if not array or not value in array then
37016: LD_VAR 0 1
37020: NOT
37021: IFTRUE 37036
37023: PUSH
37024: LD_VAR 0 2
37028: PUSH
37029: LD_VAR 0 1
37033: IN
37034: NOT
37035: OR
37036: IFFALSE 37040
// exit ;
37038: GO 37094
// for i = 1 to array do
37040: LD_ADDR_VAR 0 4
37044: PUSH
37045: DOUBLE
37046: LD_INT 1
37048: DEC
37049: ST_TO_ADDR
37050: LD_VAR 0 1
37054: PUSH
37055: FOR_TO
37056: IFFALSE 37092
// if value = array [ i ] then
37058: LD_VAR 0 2
37062: PUSH
37063: LD_VAR 0 1
37067: PUSH
37068: LD_VAR 0 4
37072: ARRAY
37073: EQUAL
37074: IFFALSE 37090
// begin result := i ;
37076: LD_ADDR_VAR 0 3
37080: PUSH
37081: LD_VAR 0 4
37085: ST_TO_ADDR
// exit ;
37086: POP
37087: POP
37088: GO 37094
// end ;
37090: GO 37055
37092: POP
37093: POP
// end ;
37094: LD_VAR 0 3
37098: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37099: LD_INT 0
37101: PPUSH
// vc_chassis := chassis ;
37102: LD_ADDR_OWVAR 37
37106: PUSH
37107: LD_VAR 0 1
37111: ST_TO_ADDR
// vc_engine := engine ;
37112: LD_ADDR_OWVAR 39
37116: PUSH
37117: LD_VAR 0 2
37121: ST_TO_ADDR
// vc_control := control ;
37122: LD_ADDR_OWVAR 38
37126: PUSH
37127: LD_VAR 0 3
37131: ST_TO_ADDR
// vc_weapon := weapon ;
37132: LD_ADDR_OWVAR 40
37136: PUSH
37137: LD_VAR 0 4
37141: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37142: LD_ADDR_OWVAR 41
37146: PUSH
37147: LD_VAR 0 5
37151: ST_TO_ADDR
// end ;
37152: LD_VAR 0 6
37156: RET
// export function WantPlant ( unit ) ; var task ; begin
37157: LD_INT 0
37159: PPUSH
37160: PPUSH
// result := false ;
37161: LD_ADDR_VAR 0 2
37165: PUSH
37166: LD_INT 0
37168: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37169: LD_ADDR_VAR 0 3
37173: PUSH
37174: LD_VAR 0 1
37178: PPUSH
37179: CALL_OW 437
37183: ST_TO_ADDR
// if task then
37184: LD_VAR 0 3
37188: IFFALSE 37216
// if task [ 1 ] [ 1 ] = p then
37190: LD_VAR 0 3
37194: PUSH
37195: LD_INT 1
37197: ARRAY
37198: PUSH
37199: LD_INT 1
37201: ARRAY
37202: PUSH
37203: LD_STRING p
37205: EQUAL
37206: IFFALSE 37216
// result := true ;
37208: LD_ADDR_VAR 0 2
37212: PUSH
37213: LD_INT 1
37215: ST_TO_ADDR
// end ;
37216: LD_VAR 0 2
37220: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37221: LD_INT 0
37223: PPUSH
37224: PPUSH
37225: PPUSH
37226: PPUSH
// if pos < 1 then
37227: LD_VAR 0 2
37231: PUSH
37232: LD_INT 1
37234: LESS
37235: IFFALSE 37239
// exit ;
37237: GO 37542
// if pos = 1 then
37239: LD_VAR 0 2
37243: PUSH
37244: LD_INT 1
37246: EQUAL
37247: IFFALSE 37280
// result := Replace ( arr , pos [ 1 ] , value ) else
37249: LD_ADDR_VAR 0 4
37253: PUSH
37254: LD_VAR 0 1
37258: PPUSH
37259: LD_VAR 0 2
37263: PUSH
37264: LD_INT 1
37266: ARRAY
37267: PPUSH
37268: LD_VAR 0 3
37272: PPUSH
37273: CALL_OW 1
37277: ST_TO_ADDR
37278: GO 37542
// begin tmp := arr ;
37280: LD_ADDR_VAR 0 6
37284: PUSH
37285: LD_VAR 0 1
37289: ST_TO_ADDR
// s_arr := [ tmp ] ;
37290: LD_ADDR_VAR 0 7
37294: PUSH
37295: LD_VAR 0 6
37299: PUSH
37300: EMPTY
37301: LIST
37302: ST_TO_ADDR
// for i = 1 to pos - 1 do
37303: LD_ADDR_VAR 0 5
37307: PUSH
37308: DOUBLE
37309: LD_INT 1
37311: DEC
37312: ST_TO_ADDR
37313: LD_VAR 0 2
37317: PUSH
37318: LD_INT 1
37320: MINUS
37321: PUSH
37322: FOR_TO
37323: IFFALSE 37368
// begin tmp := tmp [ pos [ i ] ] ;
37325: LD_ADDR_VAR 0 6
37329: PUSH
37330: LD_VAR 0 6
37334: PUSH
37335: LD_VAR 0 2
37339: PUSH
37340: LD_VAR 0 5
37344: ARRAY
37345: ARRAY
37346: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37347: LD_ADDR_VAR 0 7
37351: PUSH
37352: LD_VAR 0 7
37356: PUSH
37357: LD_VAR 0 6
37361: PUSH
37362: EMPTY
37363: LIST
37364: ADD
37365: ST_TO_ADDR
// end ;
37366: GO 37322
37368: POP
37369: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37370: LD_ADDR_VAR 0 6
37374: PUSH
37375: LD_VAR 0 6
37379: PPUSH
37380: LD_VAR 0 2
37384: PUSH
37385: LD_VAR 0 2
37389: ARRAY
37390: PPUSH
37391: LD_VAR 0 3
37395: PPUSH
37396: CALL_OW 1
37400: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37401: LD_ADDR_VAR 0 7
37405: PUSH
37406: LD_VAR 0 7
37410: PPUSH
37411: LD_VAR 0 7
37415: PPUSH
37416: LD_VAR 0 6
37420: PPUSH
37421: CALL_OW 1
37425: ST_TO_ADDR
// for i = s_arr downto 2 do
37426: LD_ADDR_VAR 0 5
37430: PUSH
37431: DOUBLE
37432: LD_VAR 0 7
37436: INC
37437: ST_TO_ADDR
37438: LD_INT 2
37440: PUSH
37441: FOR_DOWNTO
37442: IFFALSE 37526
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37444: LD_ADDR_VAR 0 6
37448: PUSH
37449: LD_VAR 0 7
37453: PUSH
37454: LD_VAR 0 5
37458: PUSH
37459: LD_INT 1
37461: MINUS
37462: ARRAY
37463: PPUSH
37464: LD_VAR 0 2
37468: PUSH
37469: LD_VAR 0 5
37473: PUSH
37474: LD_INT 1
37476: MINUS
37477: ARRAY
37478: PPUSH
37479: LD_VAR 0 7
37483: PUSH
37484: LD_VAR 0 5
37488: ARRAY
37489: PPUSH
37490: CALL_OW 1
37494: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37495: LD_ADDR_VAR 0 7
37499: PUSH
37500: LD_VAR 0 7
37504: PPUSH
37505: LD_VAR 0 5
37509: PUSH
37510: LD_INT 1
37512: MINUS
37513: PPUSH
37514: LD_VAR 0 6
37518: PPUSH
37519: CALL_OW 1
37523: ST_TO_ADDR
// end ;
37524: GO 37441
37526: POP
37527: POP
// result := s_arr [ 1 ] ;
37528: LD_ADDR_VAR 0 4
37532: PUSH
37533: LD_VAR 0 7
37537: PUSH
37538: LD_INT 1
37540: ARRAY
37541: ST_TO_ADDR
// end ; end ;
37542: LD_VAR 0 4
37546: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37547: LD_INT 0
37549: PPUSH
37550: PPUSH
// if not list then
37551: LD_VAR 0 1
37555: NOT
37556: IFFALSE 37560
// exit ;
37558: GO 37651
// i := list [ pos1 ] ;
37560: LD_ADDR_VAR 0 5
37564: PUSH
37565: LD_VAR 0 1
37569: PUSH
37570: LD_VAR 0 2
37574: ARRAY
37575: ST_TO_ADDR
// if not i then
37576: LD_VAR 0 5
37580: NOT
37581: IFFALSE 37585
// exit ;
37583: GO 37651
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37585: LD_ADDR_VAR 0 1
37589: PUSH
37590: LD_VAR 0 1
37594: PPUSH
37595: LD_VAR 0 2
37599: PPUSH
37600: LD_VAR 0 1
37604: PUSH
37605: LD_VAR 0 3
37609: ARRAY
37610: PPUSH
37611: CALL_OW 1
37615: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37616: LD_ADDR_VAR 0 1
37620: PUSH
37621: LD_VAR 0 1
37625: PPUSH
37626: LD_VAR 0 3
37630: PPUSH
37631: LD_VAR 0 5
37635: PPUSH
37636: CALL_OW 1
37640: ST_TO_ADDR
// result := list ;
37641: LD_ADDR_VAR 0 4
37645: PUSH
37646: LD_VAR 0 1
37650: ST_TO_ADDR
// end ;
37651: LD_VAR 0 4
37655: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37656: LD_INT 0
37658: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37659: LD_ADDR_VAR 0 5
37663: PUSH
37664: LD_VAR 0 1
37668: PPUSH
37669: CALL_OW 250
37673: PPUSH
37674: LD_VAR 0 1
37678: PPUSH
37679: CALL_OW 251
37683: PPUSH
37684: LD_VAR 0 2
37688: PPUSH
37689: LD_VAR 0 3
37693: PPUSH
37694: LD_VAR 0 4
37698: PPUSH
37699: CALL 38081 0 5
37703: ST_TO_ADDR
// end ;
37704: LD_VAR 0 5
37708: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
37709: LD_INT 0
37711: PPUSH
37712: PPUSH
37713: PPUSH
37714: PPUSH
// if not list or not unit then
37715: LD_VAR 0 2
37719: NOT
37720: IFTRUE 37729
37722: PUSH
37723: LD_VAR 0 1
37727: NOT
37728: OR
37729: IFFALSE 37733
// exit ;
37731: GO 38076
// result := [ ] ;
37733: LD_ADDR_VAR 0 5
37737: PUSH
37738: EMPTY
37739: ST_TO_ADDR
// for i in list do
37740: LD_ADDR_VAR 0 6
37744: PUSH
37745: LD_VAR 0 2
37749: PUSH
37750: FOR_IN
37751: IFFALSE 37969
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
37753: LD_ADDR_VAR 0 8
37757: PUSH
37758: LD_VAR 0 1
37762: PPUSH
37763: LD_VAR 0 6
37767: PUSH
37768: LD_INT 1
37770: ARRAY
37771: PPUSH
37772: LD_VAR 0 6
37776: PUSH
37777: LD_INT 2
37779: ARRAY
37780: PPUSH
37781: CALL_OW 297
37785: ST_TO_ADDR
// if not Count ( result ) then
37786: LD_VAR 0 5
37790: PPUSH
37791: CALL 34303 0 1
37795: NOT
37796: IFFALSE 37829
// begin result := Join ( result , [ i , tmp ] ) ;
37798: LD_ADDR_VAR 0 5
37802: PUSH
37803: LD_VAR 0 5
37807: PPUSH
37808: LD_VAR 0 6
37812: PUSH
37813: LD_VAR 0 8
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PPUSH
37822: CALL 70279 0 2
37826: ST_TO_ADDR
// continue ;
37827: GO 37750
// end ; if result [ result ] [ 2 ] <= tmp then
37829: LD_VAR 0 5
37833: PUSH
37834: LD_VAR 0 5
37838: ARRAY
37839: PUSH
37840: LD_INT 2
37842: ARRAY
37843: PUSH
37844: LD_VAR 0 8
37848: LESSEQUAL
37849: IFFALSE 37882
// result := Join ( result , [ i , tmp ] ) else
37851: LD_ADDR_VAR 0 5
37855: PUSH
37856: LD_VAR 0 5
37860: PPUSH
37861: LD_VAR 0 6
37865: PUSH
37866: LD_VAR 0 8
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PPUSH
37875: CALL 70279 0 2
37879: ST_TO_ADDR
37880: GO 37967
// begin for j := 1 to Count ( result ) do
37882: LD_ADDR_VAR 0 7
37886: PUSH
37887: DOUBLE
37888: LD_INT 1
37890: DEC
37891: ST_TO_ADDR
37892: LD_VAR 0 5
37896: PPUSH
37897: CALL 34303 0 1
37901: PUSH
37902: FOR_TO
37903: IFFALSE 37965
// begin if tmp < result [ j ] [ 2 ] then
37905: LD_VAR 0 8
37909: PUSH
37910: LD_VAR 0 5
37914: PUSH
37915: LD_VAR 0 7
37919: ARRAY
37920: PUSH
37921: LD_INT 2
37923: ARRAY
37924: LESS
37925: IFFALSE 37963
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37927: LD_ADDR_VAR 0 5
37931: PUSH
37932: LD_VAR 0 5
37936: PPUSH
37937: LD_VAR 0 7
37941: PPUSH
37942: LD_VAR 0 6
37946: PUSH
37947: LD_VAR 0 8
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: PPUSH
37956: CALL_OW 2
37960: ST_TO_ADDR
// break ;
37961: GO 37965
// end ; end ;
37963: GO 37902
37965: POP
37966: POP
// end ; end ;
37967: GO 37750
37969: POP
37970: POP
// if result and not asc then
37971: LD_VAR 0 5
37975: IFFALSE 37984
37977: PUSH
37978: LD_VAR 0 3
37982: NOT
37983: AND
37984: IFFALSE 38001
// result := ReverseArray ( result ) ;
37986: LD_ADDR_VAR 0 5
37990: PUSH
37991: LD_VAR 0 5
37995: PPUSH
37996: CALL 65359 0 1
38000: ST_TO_ADDR
// tmp := [ ] ;
38001: LD_ADDR_VAR 0 8
38005: PUSH
38006: EMPTY
38007: ST_TO_ADDR
// if mode then
38008: LD_VAR 0 4
38012: IFFALSE 38076
// begin for i := 1 to result do
38014: LD_ADDR_VAR 0 6
38018: PUSH
38019: DOUBLE
38020: LD_INT 1
38022: DEC
38023: ST_TO_ADDR
38024: LD_VAR 0 5
38028: PUSH
38029: FOR_TO
38030: IFFALSE 38064
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
38032: LD_ADDR_VAR 0 8
38036: PUSH
38037: LD_VAR 0 8
38041: PPUSH
38042: LD_VAR 0 5
38046: PUSH
38047: LD_VAR 0 6
38051: ARRAY
38052: PUSH
38053: LD_INT 1
38055: ARRAY
38056: PPUSH
38057: CALL 70279 0 2
38061: ST_TO_ADDR
38062: GO 38029
38064: POP
38065: POP
// result := tmp ;
38066: LD_ADDR_VAR 0 5
38070: PUSH
38071: LD_VAR 0 8
38075: ST_TO_ADDR
// end ; end ;
38076: LD_VAR 0 5
38080: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
38081: LD_INT 0
38083: PPUSH
38084: PPUSH
38085: PPUSH
38086: PPUSH
// if not list then
38087: LD_VAR 0 3
38091: NOT
38092: IFFALSE 38096
// exit ;
38094: GO 38486
// result := [ ] ;
38096: LD_ADDR_VAR 0 6
38100: PUSH
38101: EMPTY
38102: ST_TO_ADDR
// for i in list do
38103: LD_ADDR_VAR 0 7
38107: PUSH
38108: LD_VAR 0 3
38112: PUSH
38113: FOR_IN
38114: IFFALSE 38316
// begin tmp := GetDistUnitXY ( i , x , y ) ;
38116: LD_ADDR_VAR 0 9
38120: PUSH
38121: LD_VAR 0 7
38125: PPUSH
38126: LD_VAR 0 1
38130: PPUSH
38131: LD_VAR 0 2
38135: PPUSH
38136: CALL_OW 297
38140: ST_TO_ADDR
// if not result then
38141: LD_VAR 0 6
38145: NOT
38146: IFFALSE 38172
// result := [ [ i , tmp ] ] else
38148: LD_ADDR_VAR 0 6
38152: PUSH
38153: LD_VAR 0 7
38157: PUSH
38158: LD_VAR 0 9
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: EMPTY
38168: LIST
38169: ST_TO_ADDR
38170: GO 38314
// begin if result [ result ] [ 2 ] <= tmp then
38172: LD_VAR 0 6
38176: PUSH
38177: LD_VAR 0 6
38181: ARRAY
38182: PUSH
38183: LD_INT 2
38185: ARRAY
38186: PUSH
38187: LD_VAR 0 9
38191: LESSEQUAL
38192: IFFALSE 38234
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
38194: LD_ADDR_VAR 0 6
38198: PUSH
38199: LD_VAR 0 6
38203: PPUSH
38204: LD_VAR 0 6
38208: PUSH
38209: LD_INT 1
38211: PLUS
38212: PPUSH
38213: LD_VAR 0 7
38217: PUSH
38218: LD_VAR 0 9
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PPUSH
38227: CALL_OW 2
38231: ST_TO_ADDR
38232: GO 38314
// for j := 1 to result do
38234: LD_ADDR_VAR 0 8
38238: PUSH
38239: DOUBLE
38240: LD_INT 1
38242: DEC
38243: ST_TO_ADDR
38244: LD_VAR 0 6
38248: PUSH
38249: FOR_TO
38250: IFFALSE 38312
// begin if tmp < result [ j ] [ 2 ] then
38252: LD_VAR 0 9
38256: PUSH
38257: LD_VAR 0 6
38261: PUSH
38262: LD_VAR 0 8
38266: ARRAY
38267: PUSH
38268: LD_INT 2
38270: ARRAY
38271: LESS
38272: IFFALSE 38310
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38274: LD_ADDR_VAR 0 6
38278: PUSH
38279: LD_VAR 0 6
38283: PPUSH
38284: LD_VAR 0 8
38288: PPUSH
38289: LD_VAR 0 7
38293: PUSH
38294: LD_VAR 0 9
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: PPUSH
38303: CALL_OW 2
38307: ST_TO_ADDR
// break ;
38308: GO 38312
// end ; end ;
38310: GO 38249
38312: POP
38313: POP
// end ; end ;
38314: GO 38113
38316: POP
38317: POP
// if result and not asc then
38318: LD_VAR 0 6
38322: IFFALSE 38331
38324: PUSH
38325: LD_VAR 0 4
38329: NOT
38330: AND
38331: IFFALSE 38406
// begin tmp := result ;
38333: LD_ADDR_VAR 0 9
38337: PUSH
38338: LD_VAR 0 6
38342: ST_TO_ADDR
// for i = tmp downto 1 do
38343: LD_ADDR_VAR 0 7
38347: PUSH
38348: DOUBLE
38349: LD_VAR 0 9
38353: INC
38354: ST_TO_ADDR
38355: LD_INT 1
38357: PUSH
38358: FOR_DOWNTO
38359: IFFALSE 38404
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38361: LD_ADDR_VAR 0 6
38365: PUSH
38366: LD_VAR 0 6
38370: PPUSH
38371: LD_VAR 0 9
38375: PUSH
38376: LD_VAR 0 7
38380: MINUS
38381: PUSH
38382: LD_INT 1
38384: PLUS
38385: PPUSH
38386: LD_VAR 0 9
38390: PUSH
38391: LD_VAR 0 7
38395: ARRAY
38396: PPUSH
38397: CALL_OW 1
38401: ST_TO_ADDR
38402: GO 38358
38404: POP
38405: POP
// end ; tmp := [ ] ;
38406: LD_ADDR_VAR 0 9
38410: PUSH
38411: EMPTY
38412: ST_TO_ADDR
// if mode then
38413: LD_VAR 0 5
38417: IFFALSE 38486
// begin for i = 1 to result do
38419: LD_ADDR_VAR 0 7
38423: PUSH
38424: DOUBLE
38425: LD_INT 1
38427: DEC
38428: ST_TO_ADDR
38429: LD_VAR 0 6
38433: PUSH
38434: FOR_TO
38435: IFFALSE 38474
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38437: LD_ADDR_VAR 0 9
38441: PUSH
38442: LD_VAR 0 9
38446: PPUSH
38447: LD_VAR 0 7
38451: PPUSH
38452: LD_VAR 0 6
38456: PUSH
38457: LD_VAR 0 7
38461: ARRAY
38462: PUSH
38463: LD_INT 1
38465: ARRAY
38466: PPUSH
38467: CALL_OW 1
38471: ST_TO_ADDR
38472: GO 38434
38474: POP
38475: POP
// result := tmp ;
38476: LD_ADDR_VAR 0 6
38480: PUSH
38481: LD_VAR 0 9
38485: ST_TO_ADDR
// end ; end ;
38486: LD_VAR 0 6
38490: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38491: LD_INT 0
38493: PPUSH
38494: PPUSH
38495: PPUSH
38496: PPUSH
38497: PPUSH
38498: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38499: LD_ADDR_VAR 0 5
38503: PUSH
38504: LD_INT 0
38506: PUSH
38507: LD_INT 0
38509: PUSH
38510: LD_INT 0
38512: PUSH
38513: EMPTY
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: ST_TO_ADDR
// if not x or not y then
38521: LD_VAR 0 2
38525: NOT
38526: IFTRUE 38535
38528: PUSH
38529: LD_VAR 0 3
38533: NOT
38534: OR
38535: IFFALSE 38539
// exit ;
38537: GO 40195
// if not range then
38539: LD_VAR 0 4
38543: NOT
38544: IFFALSE 38554
// range := 10 ;
38546: LD_ADDR_VAR 0 4
38550: PUSH
38551: LD_INT 10
38553: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38554: LD_ADDR_VAR 0 8
38558: PUSH
38559: LD_INT 81
38561: PUSH
38562: LD_VAR 0 1
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PUSH
38571: LD_INT 92
38573: PUSH
38574: LD_VAR 0 2
38578: PUSH
38579: LD_VAR 0 3
38583: PUSH
38584: LD_VAR 0 4
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: PUSH
38595: LD_INT 3
38597: PUSH
38598: LD_INT 21
38600: PUSH
38601: LD_INT 3
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: LIST
38616: PPUSH
38617: CALL_OW 69
38621: ST_TO_ADDR
// if not tmp then
38622: LD_VAR 0 8
38626: NOT
38627: IFFALSE 38631
// exit ;
38629: GO 40195
// for i in tmp do
38631: LD_ADDR_VAR 0 6
38635: PUSH
38636: LD_VAR 0 8
38640: PUSH
38641: FOR_IN
38642: IFFALSE 40170
// begin points := [ 0 , 0 , 0 ] ;
38644: LD_ADDR_VAR 0 9
38648: PUSH
38649: LD_INT 0
38651: PUSH
38652: LD_INT 0
38654: PUSH
38655: LD_INT 0
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: LIST
38662: ST_TO_ADDR
// bpoints := 1 ;
38663: LD_ADDR_VAR 0 10
38667: PUSH
38668: LD_INT 1
38670: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38671: LD_VAR 0 6
38675: PPUSH
38676: CALL_OW 247
38680: PUSH
38681: LD_INT 1
38683: DOUBLE
38684: EQUAL
38685: IFTRUE 38689
38687: GO 39271
38689: POP
// begin if GetClass ( i ) = 1 then
38690: LD_VAR 0 6
38694: PPUSH
38695: CALL_OW 257
38699: PUSH
38700: LD_INT 1
38702: EQUAL
38703: IFFALSE 38724
// points := [ 10 , 5 , 3 ] ;
38705: LD_ADDR_VAR 0 9
38709: PUSH
38710: LD_INT 10
38712: PUSH
38713: LD_INT 5
38715: PUSH
38716: LD_INT 3
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: LIST
38723: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38724: LD_VAR 0 6
38728: PPUSH
38729: CALL_OW 257
38733: PUSH
38734: LD_INT 2
38736: PUSH
38737: LD_INT 3
38739: PUSH
38740: LD_INT 4
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: LIST
38747: IN
38748: IFFALSE 38769
// points := [ 3 , 2 , 1 ] ;
38750: LD_ADDR_VAR 0 9
38754: PUSH
38755: LD_INT 3
38757: PUSH
38758: LD_INT 2
38760: PUSH
38761: LD_INT 1
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: LIST
38768: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38769: LD_VAR 0 6
38773: PPUSH
38774: CALL_OW 257
38778: PUSH
38779: LD_INT 5
38781: EQUAL
38782: IFFALSE 38803
// points := [ 130 , 5 , 2 ] ;
38784: LD_ADDR_VAR 0 9
38788: PUSH
38789: LD_INT 130
38791: PUSH
38792: LD_INT 5
38794: PUSH
38795: LD_INT 2
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: LIST
38802: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38803: LD_VAR 0 6
38807: PPUSH
38808: CALL_OW 257
38812: PUSH
38813: LD_INT 8
38815: EQUAL
38816: IFFALSE 38837
// points := [ 35 , 35 , 30 ] ;
38818: LD_ADDR_VAR 0 9
38822: PUSH
38823: LD_INT 35
38825: PUSH
38826: LD_INT 35
38828: PUSH
38829: LD_INT 30
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: LIST
38836: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38837: LD_VAR 0 6
38841: PPUSH
38842: CALL_OW 257
38846: PUSH
38847: LD_INT 9
38849: EQUAL
38850: IFFALSE 38871
// points := [ 20 , 55 , 40 ] ;
38852: LD_ADDR_VAR 0 9
38856: PUSH
38857: LD_INT 20
38859: PUSH
38860: LD_INT 55
38862: PUSH
38863: LD_INT 40
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: LIST
38870: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38871: LD_VAR 0 6
38875: PPUSH
38876: CALL_OW 257
38880: PUSH
38881: LD_INT 12
38883: PUSH
38884: LD_INT 16
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: IN
38891: IFFALSE 38912
// points := [ 5 , 3 , 2 ] ;
38893: LD_ADDR_VAR 0 9
38897: PUSH
38898: LD_INT 5
38900: PUSH
38901: LD_INT 3
38903: PUSH
38904: LD_INT 2
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: LIST
38911: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38912: LD_VAR 0 6
38916: PPUSH
38917: CALL_OW 257
38921: PUSH
38922: LD_INT 17
38924: EQUAL
38925: IFFALSE 38946
// points := [ 100 , 50 , 75 ] ;
38927: LD_ADDR_VAR 0 9
38931: PUSH
38932: LD_INT 100
38934: PUSH
38935: LD_INT 50
38937: PUSH
38938: LD_INT 75
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: LIST
38945: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38946: LD_VAR 0 6
38950: PPUSH
38951: CALL_OW 257
38955: PUSH
38956: LD_INT 15
38958: EQUAL
38959: IFFALSE 38980
// points := [ 10 , 5 , 3 ] ;
38961: LD_ADDR_VAR 0 9
38965: PUSH
38966: LD_INT 10
38968: PUSH
38969: LD_INT 5
38971: PUSH
38972: LD_INT 3
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: LIST
38979: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38980: LD_VAR 0 6
38984: PPUSH
38985: CALL_OW 257
38989: PUSH
38990: LD_INT 14
38992: EQUAL
38993: IFFALSE 39014
// points := [ 10 , 0 , 0 ] ;
38995: LD_ADDR_VAR 0 9
38999: PUSH
39000: LD_INT 10
39002: PUSH
39003: LD_INT 0
39005: PUSH
39006: LD_INT 0
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: LIST
39013: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39014: LD_VAR 0 6
39018: PPUSH
39019: CALL_OW 257
39023: PUSH
39024: LD_INT 11
39026: EQUAL
39027: IFFALSE 39048
// points := [ 30 , 10 , 5 ] ;
39029: LD_ADDR_VAR 0 9
39033: PUSH
39034: LD_INT 30
39036: PUSH
39037: LD_INT 10
39039: PUSH
39040: LD_INT 5
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: LIST
39047: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
39048: LD_VAR 0 1
39052: PPUSH
39053: LD_INT 5
39055: PPUSH
39056: CALL_OW 321
39060: PUSH
39061: LD_INT 2
39063: EQUAL
39064: IFFALSE 39081
// bpoints := bpoints * 1.8 ;
39066: LD_ADDR_VAR 0 10
39070: PUSH
39071: LD_VAR 0 10
39075: PUSH
39076: LD_REAL  1.80000000000000E+0000
39079: MUL
39080: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
39081: LD_VAR 0 6
39085: PPUSH
39086: CALL_OW 257
39090: PUSH
39091: LD_INT 1
39093: PUSH
39094: LD_INT 2
39096: PUSH
39097: LD_INT 3
39099: PUSH
39100: LD_INT 4
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: IN
39109: IFFALSE 39129
39111: PUSH
39112: LD_VAR 0 1
39116: PPUSH
39117: LD_INT 51
39119: PPUSH
39120: CALL_OW 321
39124: PUSH
39125: LD_INT 2
39127: EQUAL
39128: AND
39129: IFFALSE 39146
// bpoints := bpoints * 1.2 ;
39131: LD_ADDR_VAR 0 10
39135: PUSH
39136: LD_VAR 0 10
39140: PUSH
39141: LD_REAL  1.20000000000000E+0000
39144: MUL
39145: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
39146: LD_VAR 0 6
39150: PPUSH
39151: CALL_OW 257
39155: PUSH
39156: LD_INT 5
39158: PUSH
39159: LD_INT 7
39161: PUSH
39162: LD_INT 9
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: LIST
39169: IN
39170: IFFALSE 39190
39172: PUSH
39173: LD_VAR 0 1
39177: PPUSH
39178: LD_INT 52
39180: PPUSH
39181: CALL_OW 321
39185: PUSH
39186: LD_INT 2
39188: EQUAL
39189: AND
39190: IFFALSE 39207
// bpoints := bpoints * 1.5 ;
39192: LD_ADDR_VAR 0 10
39196: PUSH
39197: LD_VAR 0 10
39201: PUSH
39202: LD_REAL  1.50000000000000E+0000
39205: MUL
39206: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
39207: LD_VAR 0 1
39211: PPUSH
39212: LD_INT 66
39214: PPUSH
39215: CALL_OW 321
39219: PUSH
39220: LD_INT 2
39222: EQUAL
39223: IFFALSE 39240
// bpoints := bpoints * 1.1 ;
39225: LD_ADDR_VAR 0 10
39229: PUSH
39230: LD_VAR 0 10
39234: PUSH
39235: LD_REAL  1.10000000000000E+0000
39238: MUL
39239: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
39240: LD_ADDR_VAR 0 10
39244: PUSH
39245: LD_VAR 0 10
39249: PUSH
39250: LD_VAR 0 6
39254: PPUSH
39255: LD_INT 1
39257: PPUSH
39258: CALL_OW 259
39262: PUSH
39263: LD_REAL  1.15000000000000E+0000
39266: MUL
39267: MUL
39268: ST_TO_ADDR
// end ; unit_vehicle :
39269: GO 40099
39271: LD_INT 2
39273: DOUBLE
39274: EQUAL
39275: IFTRUE 39279
39277: GO 40087
39279: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
39280: LD_VAR 0 6
39284: PPUSH
39285: CALL_OW 264
39289: PUSH
39290: LD_INT 2
39292: PUSH
39293: LD_INT 42
39295: PUSH
39296: LD_INT 24
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: LIST
39303: IN
39304: IFFALSE 39325
// points := [ 25 , 5 , 3 ] ;
39306: LD_ADDR_VAR 0 9
39310: PUSH
39311: LD_INT 25
39313: PUSH
39314: LD_INT 5
39316: PUSH
39317: LD_INT 3
39319: PUSH
39320: EMPTY
39321: LIST
39322: LIST
39323: LIST
39324: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39325: LD_VAR 0 6
39329: PPUSH
39330: CALL_OW 264
39334: PUSH
39335: LD_INT 4
39337: PUSH
39338: LD_INT 43
39340: PUSH
39341: LD_INT 25
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: LIST
39348: IN
39349: IFFALSE 39370
// points := [ 40 , 15 , 5 ] ;
39351: LD_ADDR_VAR 0 9
39355: PUSH
39356: LD_INT 40
39358: PUSH
39359: LD_INT 15
39361: PUSH
39362: LD_INT 5
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: LIST
39369: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39370: LD_VAR 0 6
39374: PPUSH
39375: CALL_OW 264
39379: PUSH
39380: LD_INT 3
39382: PUSH
39383: LD_INT 23
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: IN
39390: IFFALSE 39411
// points := [ 7 , 25 , 8 ] ;
39392: LD_ADDR_VAR 0 9
39396: PUSH
39397: LD_INT 7
39399: PUSH
39400: LD_INT 25
39402: PUSH
39403: LD_INT 8
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: LIST
39410: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39411: LD_VAR 0 6
39415: PPUSH
39416: CALL_OW 264
39420: PUSH
39421: LD_INT 5
39423: PUSH
39424: LD_INT 27
39426: PUSH
39427: LD_INT 44
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: LIST
39434: IN
39435: IFFALSE 39456
// points := [ 14 , 50 , 16 ] ;
39437: LD_ADDR_VAR 0 9
39441: PUSH
39442: LD_INT 14
39444: PUSH
39445: LD_INT 50
39447: PUSH
39448: LD_INT 16
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: LIST
39455: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39456: LD_VAR 0 6
39460: PPUSH
39461: CALL_OW 264
39465: PUSH
39466: LD_INT 6
39468: PUSH
39469: LD_INT 46
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: IN
39476: IFFALSE 39497
// points := [ 32 , 120 , 70 ] ;
39478: LD_ADDR_VAR 0 9
39482: PUSH
39483: LD_INT 32
39485: PUSH
39486: LD_INT 120
39488: PUSH
39489: LD_INT 70
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: LIST
39496: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39497: LD_VAR 0 6
39501: PPUSH
39502: CALL_OW 264
39506: PUSH
39507: LD_INT 7
39509: PUSH
39510: LD_INT 28
39512: PUSH
39513: LD_INT 45
39515: PUSH
39516: LD_INT 92
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: IN
39525: IFFALSE 39546
// points := [ 35 , 20 , 45 ] ;
39527: LD_ADDR_VAR 0 9
39531: PUSH
39532: LD_INT 35
39534: PUSH
39535: LD_INT 20
39537: PUSH
39538: LD_INT 45
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: LIST
39545: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39546: LD_VAR 0 6
39550: PPUSH
39551: CALL_OW 264
39555: PUSH
39556: LD_INT 47
39558: PUSH
39559: EMPTY
39560: LIST
39561: IN
39562: IFFALSE 39583
// points := [ 67 , 45 , 75 ] ;
39564: LD_ADDR_VAR 0 9
39568: PUSH
39569: LD_INT 67
39571: PUSH
39572: LD_INT 45
39574: PUSH
39575: LD_INT 75
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: LIST
39582: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39583: LD_VAR 0 6
39587: PPUSH
39588: CALL_OW 264
39592: PUSH
39593: LD_INT 26
39595: PUSH
39596: EMPTY
39597: LIST
39598: IN
39599: IFFALSE 39620
// points := [ 120 , 30 , 80 ] ;
39601: LD_ADDR_VAR 0 9
39605: PUSH
39606: LD_INT 120
39608: PUSH
39609: LD_INT 30
39611: PUSH
39612: LD_INT 80
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: LIST
39619: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39620: LD_VAR 0 6
39624: PPUSH
39625: CALL_OW 264
39629: PUSH
39630: LD_INT 22
39632: PUSH
39633: EMPTY
39634: LIST
39635: IN
39636: IFFALSE 39657
// points := [ 40 , 1 , 1 ] ;
39638: LD_ADDR_VAR 0 9
39642: PUSH
39643: LD_INT 40
39645: PUSH
39646: LD_INT 1
39648: PUSH
39649: LD_INT 1
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: LIST
39656: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39657: LD_VAR 0 6
39661: PPUSH
39662: CALL_OW 264
39666: PUSH
39667: LD_INT 29
39669: PUSH
39670: EMPTY
39671: LIST
39672: IN
39673: IFFALSE 39694
// points := [ 70 , 200 , 400 ] ;
39675: LD_ADDR_VAR 0 9
39679: PUSH
39680: LD_INT 70
39682: PUSH
39683: LD_INT 200
39685: PUSH
39686: LD_INT 400
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: LIST
39693: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39694: LD_VAR 0 6
39698: PPUSH
39699: CALL_OW 264
39703: PUSH
39704: LD_INT 14
39706: PUSH
39707: LD_INT 53
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: IN
39714: IFFALSE 39735
// points := [ 40 , 10 , 20 ] ;
39716: LD_ADDR_VAR 0 9
39720: PUSH
39721: LD_INT 40
39723: PUSH
39724: LD_INT 10
39726: PUSH
39727: LD_INT 20
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: LIST
39734: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39735: LD_VAR 0 6
39739: PPUSH
39740: CALL_OW 264
39744: PUSH
39745: LD_INT 9
39747: PUSH
39748: EMPTY
39749: LIST
39750: IN
39751: IFFALSE 39772
// points := [ 5 , 70 , 20 ] ;
39753: LD_ADDR_VAR 0 9
39757: PUSH
39758: LD_INT 5
39760: PUSH
39761: LD_INT 70
39763: PUSH
39764: LD_INT 20
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: LIST
39771: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39772: LD_VAR 0 6
39776: PPUSH
39777: CALL_OW 264
39781: PUSH
39782: LD_INT 10
39784: PUSH
39785: EMPTY
39786: LIST
39787: IN
39788: IFFALSE 39809
// points := [ 35 , 110 , 70 ] ;
39790: LD_ADDR_VAR 0 9
39794: PUSH
39795: LD_INT 35
39797: PUSH
39798: LD_INT 110
39800: PUSH
39801: LD_INT 70
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: LIST
39808: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39809: LD_VAR 0 6
39813: PPUSH
39814: CALL_OW 265
39818: PUSH
39819: LD_INT 25
39821: EQUAL
39822: IFFALSE 39843
// points := [ 80 , 65 , 100 ] ;
39824: LD_ADDR_VAR 0 9
39828: PUSH
39829: LD_INT 80
39831: PUSH
39832: LD_INT 65
39834: PUSH
39835: LD_INT 100
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: LIST
39842: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39843: LD_VAR 0 6
39847: PPUSH
39848: CALL_OW 263
39852: PUSH
39853: LD_INT 1
39855: EQUAL
39856: IFFALSE 39891
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39858: LD_ADDR_VAR 0 10
39862: PUSH
39863: LD_VAR 0 10
39867: PUSH
39868: LD_VAR 0 6
39872: PPUSH
39873: CALL_OW 311
39877: PPUSH
39878: LD_INT 3
39880: PPUSH
39881: CALL_OW 259
39885: PUSH
39886: LD_INT 4
39888: MUL
39889: MUL
39890: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39891: LD_VAR 0 6
39895: PPUSH
39896: CALL_OW 263
39900: PUSH
39901: LD_INT 2
39903: EQUAL
39904: IFFALSE 39955
// begin j := IsControledBy ( i ) ;
39906: LD_ADDR_VAR 0 7
39910: PUSH
39911: LD_VAR 0 6
39915: PPUSH
39916: CALL_OW 312
39920: ST_TO_ADDR
// if j then
39921: LD_VAR 0 7
39925: IFFALSE 39955
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39927: LD_ADDR_VAR 0 10
39931: PUSH
39932: LD_VAR 0 10
39936: PUSH
39937: LD_VAR 0 7
39941: PPUSH
39942: LD_INT 3
39944: PPUSH
39945: CALL_OW 259
39949: PUSH
39950: LD_INT 3
39952: MUL
39953: MUL
39954: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39955: LD_VAR 0 6
39959: PPUSH
39960: CALL_OW 264
39964: PUSH
39965: LD_INT 5
39967: PUSH
39968: LD_INT 6
39970: PUSH
39971: LD_INT 46
39973: PUSH
39974: LD_INT 44
39976: PUSH
39977: LD_INT 47
39979: PUSH
39980: LD_INT 45
39982: PUSH
39983: LD_INT 28
39985: PUSH
39986: LD_INT 7
39988: PUSH
39989: LD_INT 27
39991: PUSH
39992: LD_INT 29
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: IN
40007: IFFALSE 40027
40009: PUSH
40010: LD_VAR 0 1
40014: PPUSH
40015: LD_INT 52
40017: PPUSH
40018: CALL_OW 321
40022: PUSH
40023: LD_INT 2
40025: EQUAL
40026: AND
40027: IFFALSE 40044
// bpoints := bpoints * 1.2 ;
40029: LD_ADDR_VAR 0 10
40033: PUSH
40034: LD_VAR 0 10
40038: PUSH
40039: LD_REAL  1.20000000000000E+0000
40042: MUL
40043: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
40044: LD_VAR 0 6
40048: PPUSH
40049: CALL_OW 264
40053: PUSH
40054: LD_INT 6
40056: PUSH
40057: LD_INT 46
40059: PUSH
40060: LD_INT 47
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: LIST
40067: IN
40068: IFFALSE 40085
// bpoints := bpoints * 1.2 ;
40070: LD_ADDR_VAR 0 10
40074: PUSH
40075: LD_VAR 0 10
40079: PUSH
40080: LD_REAL  1.20000000000000E+0000
40083: MUL
40084: ST_TO_ADDR
// end ; unit_building :
40085: GO 40099
40087: LD_INT 3
40089: DOUBLE
40090: EQUAL
40091: IFTRUE 40095
40093: GO 40098
40095: POP
// ; end ;
40096: GO 40099
40098: POP
// for j = 1 to 3 do
40099: LD_ADDR_VAR 0 7
40103: PUSH
40104: DOUBLE
40105: LD_INT 1
40107: DEC
40108: ST_TO_ADDR
40109: LD_INT 3
40111: PUSH
40112: FOR_TO
40113: IFFALSE 40166
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
40115: LD_ADDR_VAR 0 5
40119: PUSH
40120: LD_VAR 0 5
40124: PPUSH
40125: LD_VAR 0 7
40129: PPUSH
40130: LD_VAR 0 5
40134: PUSH
40135: LD_VAR 0 7
40139: ARRAY
40140: PUSH
40141: LD_VAR 0 9
40145: PUSH
40146: LD_VAR 0 7
40150: ARRAY
40151: PUSH
40152: LD_VAR 0 10
40156: MUL
40157: PLUS
40158: PPUSH
40159: CALL_OW 1
40163: ST_TO_ADDR
40164: GO 40112
40166: POP
40167: POP
// end ;
40168: GO 38641
40170: POP
40171: POP
// result := Replace ( result , 4 , tmp ) ;
40172: LD_ADDR_VAR 0 5
40176: PUSH
40177: LD_VAR 0 5
40181: PPUSH
40182: LD_INT 4
40184: PPUSH
40185: LD_VAR 0 8
40189: PPUSH
40190: CALL_OW 1
40194: ST_TO_ADDR
// end ;
40195: LD_VAR 0 5
40199: RET
// export function DangerAtRange ( unit , range ) ; begin
40200: LD_INT 0
40202: PPUSH
// if not unit then
40203: LD_VAR 0 1
40207: NOT
40208: IFFALSE 40212
// exit ;
40210: GO 40257
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
40212: LD_ADDR_VAR 0 3
40216: PUSH
40217: LD_VAR 0 1
40221: PPUSH
40222: CALL_OW 255
40226: PPUSH
40227: LD_VAR 0 1
40231: PPUSH
40232: CALL_OW 250
40236: PPUSH
40237: LD_VAR 0 1
40241: PPUSH
40242: CALL_OW 251
40246: PPUSH
40247: LD_VAR 0 2
40251: PPUSH
40252: CALL 38491 0 4
40256: ST_TO_ADDR
// end ;
40257: LD_VAR 0 3
40261: RET
// export function DangerInArea ( side , area ) ; begin
40262: LD_INT 0
40264: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
40265: LD_ADDR_VAR 0 3
40269: PUSH
40270: LD_VAR 0 2
40274: PPUSH
40275: LD_INT 81
40277: PUSH
40278: LD_VAR 0 1
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PPUSH
40287: CALL_OW 70
40291: ST_TO_ADDR
// end ;
40292: LD_VAR 0 3
40296: RET
// export function IsExtension ( b ) ; begin
40297: LD_INT 0
40299: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
40300: LD_ADDR_VAR 0 2
40304: PUSH
40305: LD_VAR 0 1
40309: PUSH
40310: LD_INT 23
40312: PUSH
40313: LD_INT 20
40315: PUSH
40316: LD_INT 22
40318: PUSH
40319: LD_INT 17
40321: PUSH
40322: LD_INT 24
40324: PUSH
40325: LD_INT 21
40327: PUSH
40328: LD_INT 19
40330: PUSH
40331: LD_INT 16
40333: PUSH
40334: LD_INT 25
40336: PUSH
40337: LD_INT 18
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: IN
40352: ST_TO_ADDR
// end ;
40353: LD_VAR 0 2
40357: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40358: LD_INT 0
40360: PPUSH
40361: PPUSH
40362: PPUSH
// result := [ ] ;
40363: LD_ADDR_VAR 0 4
40367: PUSH
40368: EMPTY
40369: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40370: LD_ADDR_VAR 0 5
40374: PUSH
40375: LD_VAR 0 2
40379: PPUSH
40380: LD_INT 21
40382: PUSH
40383: LD_INT 3
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PPUSH
40390: CALL_OW 70
40394: ST_TO_ADDR
// if not tmp then
40395: LD_VAR 0 5
40399: NOT
40400: IFFALSE 40404
// exit ;
40402: GO 40468
// if checkLink then
40404: LD_VAR 0 3
40408: IFFALSE 40458
// begin for i in tmp do
40410: LD_ADDR_VAR 0 6
40414: PUSH
40415: LD_VAR 0 5
40419: PUSH
40420: FOR_IN
40421: IFFALSE 40456
// if GetBase ( i ) <> base then
40423: LD_VAR 0 6
40427: PPUSH
40428: CALL_OW 274
40432: PUSH
40433: LD_VAR 0 1
40437: NONEQUAL
40438: IFFALSE 40454
// ComLinkToBase ( base , i ) ;
40440: LD_VAR 0 1
40444: PPUSH
40445: LD_VAR 0 6
40449: PPUSH
40450: CALL_OW 169
40454: GO 40420
40456: POP
40457: POP
// end ; result := tmp ;
40458: LD_ADDR_VAR 0 4
40462: PUSH
40463: LD_VAR 0 5
40467: ST_TO_ADDR
// end ;
40468: LD_VAR 0 4
40472: RET
// export function ComComplete ( units , b ) ; var i ; begin
40473: LD_INT 0
40475: PPUSH
40476: PPUSH
// if not units then
40477: LD_VAR 0 1
40481: NOT
40482: IFFALSE 40486
// exit ;
40484: GO 40576
// for i in units do
40486: LD_ADDR_VAR 0 4
40490: PUSH
40491: LD_VAR 0 1
40495: PUSH
40496: FOR_IN
40497: IFFALSE 40574
// if BuildingStatus ( b ) = bs_build then
40499: LD_VAR 0 2
40503: PPUSH
40504: CALL_OW 461
40508: PUSH
40509: LD_INT 1
40511: EQUAL
40512: IFFALSE 40572
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40514: LD_VAR 0 4
40518: PPUSH
40519: LD_STRING h
40521: PUSH
40522: LD_VAR 0 2
40526: PPUSH
40527: CALL_OW 250
40531: PUSH
40532: LD_VAR 0 2
40536: PPUSH
40537: CALL_OW 251
40541: PUSH
40542: LD_VAR 0 2
40546: PUSH
40547: LD_INT 0
40549: PUSH
40550: LD_INT 0
40552: PUSH
40553: LD_INT 0
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: PUSH
40565: EMPTY
40566: LIST
40567: PPUSH
40568: CALL_OW 446
40572: GO 40496
40574: POP
40575: POP
// end ;
40576: LD_VAR 0 3
40580: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40581: LD_INT 0
40583: PPUSH
40584: PPUSH
40585: PPUSH
40586: PPUSH
40587: PPUSH
40588: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40589: LD_VAR 0 1
40593: NOT
40594: IFTRUE 40611
40596: PUSH
40597: LD_VAR 0 1
40601: PPUSH
40602: CALL_OW 263
40606: PUSH
40607: LD_INT 2
40609: NONEQUAL
40610: OR
40611: IFFALSE 40615
// exit ;
40613: GO 40931
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40615: LD_ADDR_VAR 0 6
40619: PUSH
40620: LD_INT 22
40622: PUSH
40623: LD_VAR 0 1
40627: PPUSH
40628: CALL_OW 255
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 2
40639: PUSH
40640: LD_INT 30
40642: PUSH
40643: LD_INT 36
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 34
40652: PUSH
40653: LD_INT 31
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: LIST
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PPUSH
40669: CALL_OW 69
40673: ST_TO_ADDR
// if not tmp then
40674: LD_VAR 0 6
40678: NOT
40679: IFFALSE 40683
// exit ;
40681: GO 40931
// result := [ ] ;
40683: LD_ADDR_VAR 0 2
40687: PUSH
40688: EMPTY
40689: ST_TO_ADDR
// for i in tmp do
40690: LD_ADDR_VAR 0 3
40694: PUSH
40695: LD_VAR 0 6
40699: PUSH
40700: FOR_IN
40701: IFFALSE 40772
// begin t := UnitsInside ( i ) ;
40703: LD_ADDR_VAR 0 4
40707: PUSH
40708: LD_VAR 0 3
40712: PPUSH
40713: CALL_OW 313
40717: ST_TO_ADDR
// if t then
40718: LD_VAR 0 4
40722: IFFALSE 40770
// for j in t do
40724: LD_ADDR_VAR 0 7
40728: PUSH
40729: LD_VAR 0 4
40733: PUSH
40734: FOR_IN
40735: IFFALSE 40768
// result := Replace ( result , result + 1 , j ) ;
40737: LD_ADDR_VAR 0 2
40741: PUSH
40742: LD_VAR 0 2
40746: PPUSH
40747: LD_VAR 0 2
40751: PUSH
40752: LD_INT 1
40754: PLUS
40755: PPUSH
40756: LD_VAR 0 7
40760: PPUSH
40761: CALL_OW 1
40765: ST_TO_ADDR
40766: GO 40734
40768: POP
40769: POP
// end ;
40770: GO 40700
40772: POP
40773: POP
// if not result then
40774: LD_VAR 0 2
40778: NOT
40779: IFFALSE 40783
// exit ;
40781: GO 40931
// mech := result [ 1 ] ;
40783: LD_ADDR_VAR 0 5
40787: PUSH
40788: LD_VAR 0 2
40792: PUSH
40793: LD_INT 1
40795: ARRAY
40796: ST_TO_ADDR
// if result > 1 then
40797: LD_VAR 0 2
40801: PUSH
40802: LD_INT 1
40804: GREATER
40805: IFFALSE 40917
// begin for i = 2 to result do
40807: LD_ADDR_VAR 0 3
40811: PUSH
40812: DOUBLE
40813: LD_INT 2
40815: DEC
40816: ST_TO_ADDR
40817: LD_VAR 0 2
40821: PUSH
40822: FOR_TO
40823: IFFALSE 40915
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40825: LD_ADDR_VAR 0 4
40829: PUSH
40830: LD_VAR 0 2
40834: PUSH
40835: LD_VAR 0 3
40839: ARRAY
40840: PPUSH
40841: LD_INT 3
40843: PPUSH
40844: CALL_OW 259
40848: PUSH
40849: LD_VAR 0 2
40853: PUSH
40854: LD_VAR 0 3
40858: ARRAY
40859: PPUSH
40860: CALL_OW 432
40864: MINUS
40865: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40866: LD_VAR 0 4
40870: PUSH
40871: LD_VAR 0 5
40875: PPUSH
40876: LD_INT 3
40878: PPUSH
40879: CALL_OW 259
40883: PUSH
40884: LD_VAR 0 5
40888: PPUSH
40889: CALL_OW 432
40893: MINUS
40894: GREATEREQUAL
40895: IFFALSE 40913
// mech := result [ i ] ;
40897: LD_ADDR_VAR 0 5
40901: PUSH
40902: LD_VAR 0 2
40906: PUSH
40907: LD_VAR 0 3
40911: ARRAY
40912: ST_TO_ADDR
// end ;
40913: GO 40822
40915: POP
40916: POP
// end ; ComLinkTo ( vehicle , mech ) ;
40917: LD_VAR 0 1
40921: PPUSH
40922: LD_VAR 0 5
40926: PPUSH
40927: CALL_OW 135
// end ;
40931: LD_VAR 0 2
40935: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40936: LD_INT 0
40938: PPUSH
40939: PPUSH
40940: PPUSH
40941: PPUSH
40942: PPUSH
40943: PPUSH
40944: PPUSH
40945: PPUSH
40946: PPUSH
40947: PPUSH
40948: PPUSH
40949: PPUSH
40950: PPUSH
// result := [ ] ;
40951: LD_ADDR_VAR 0 7
40955: PUSH
40956: EMPTY
40957: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40958: LD_VAR 0 1
40962: PPUSH
40963: CALL_OW 266
40967: PUSH
40968: LD_INT 0
40970: PUSH
40971: LD_INT 1
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: IN
40978: NOT
40979: IFFALSE 40983
// exit ;
40981: GO 42623
// if name then
40983: LD_VAR 0 3
40987: IFFALSE 41003
// SetBName ( base_dep , name ) ;
40989: LD_VAR 0 1
40993: PPUSH
40994: LD_VAR 0 3
40998: PPUSH
40999: CALL_OW 500
// base := GetBase ( base_dep ) ;
41003: LD_ADDR_VAR 0 15
41007: PUSH
41008: LD_VAR 0 1
41012: PPUSH
41013: CALL_OW 274
41017: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41018: LD_ADDR_VAR 0 16
41022: PUSH
41023: LD_VAR 0 1
41027: PPUSH
41028: CALL_OW 255
41032: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41033: LD_ADDR_VAR 0 17
41037: PUSH
41038: LD_VAR 0 1
41042: PPUSH
41043: CALL_OW 248
41047: ST_TO_ADDR
// if sources then
41048: LD_VAR 0 5
41052: IFFALSE 41099
// for i = 1 to 3 do
41054: LD_ADDR_VAR 0 8
41058: PUSH
41059: DOUBLE
41060: LD_INT 1
41062: DEC
41063: ST_TO_ADDR
41064: LD_INT 3
41066: PUSH
41067: FOR_TO
41068: IFFALSE 41097
// AddResourceType ( base , i , sources [ i ] ) ;
41070: LD_VAR 0 15
41074: PPUSH
41075: LD_VAR 0 8
41079: PPUSH
41080: LD_VAR 0 5
41084: PUSH
41085: LD_VAR 0 8
41089: ARRAY
41090: PPUSH
41091: CALL_OW 276
41095: GO 41067
41097: POP
41098: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
41099: LD_ADDR_VAR 0 18
41103: PUSH
41104: LD_VAR 0 15
41108: PPUSH
41109: LD_VAR 0 2
41113: PPUSH
41114: LD_INT 1
41116: PPUSH
41117: CALL 40358 0 3
41121: ST_TO_ADDR
// InitHc ;
41122: CALL_OW 19
// InitUc ;
41126: CALL_OW 18
// uc_side := side ;
41130: LD_ADDR_OWVAR 20
41134: PUSH
41135: LD_VAR 0 16
41139: ST_TO_ADDR
// uc_nation := nation ;
41140: LD_ADDR_OWVAR 21
41144: PUSH
41145: LD_VAR 0 17
41149: ST_TO_ADDR
// if buildings then
41150: LD_VAR 0 18
41154: IFFALSE 42482
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
41156: LD_ADDR_VAR 0 19
41160: PUSH
41161: LD_VAR 0 18
41165: PPUSH
41166: LD_INT 2
41168: PUSH
41169: LD_INT 30
41171: PUSH
41172: LD_INT 29
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 30
41181: PUSH
41182: LD_INT 30
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: LIST
41193: PPUSH
41194: CALL_OW 72
41198: ST_TO_ADDR
// if tmp then
41199: LD_VAR 0 19
41203: IFFALSE 41251
// for i in tmp do
41205: LD_ADDR_VAR 0 8
41209: PUSH
41210: LD_VAR 0 19
41214: PUSH
41215: FOR_IN
41216: IFFALSE 41249
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
41218: LD_VAR 0 8
41222: PPUSH
41223: CALL_OW 250
41227: PPUSH
41228: LD_VAR 0 8
41232: PPUSH
41233: CALL_OW 251
41237: PPUSH
41238: LD_VAR 0 16
41242: PPUSH
41243: CALL_OW 441
41247: GO 41215
41249: POP
41250: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
41251: LD_VAR 0 18
41255: PPUSH
41256: LD_INT 2
41258: PUSH
41259: LD_INT 30
41261: PUSH
41262: LD_INT 32
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 30
41271: PUSH
41272: LD_INT 33
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: LIST
41283: PPUSH
41284: CALL_OW 72
41288: IFFALSE 41376
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
41290: LD_ADDR_VAR 0 8
41294: PUSH
41295: LD_VAR 0 18
41299: PPUSH
41300: LD_INT 2
41302: PUSH
41303: LD_INT 30
41305: PUSH
41306: LD_INT 32
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 30
41315: PUSH
41316: LD_INT 33
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: LIST
41327: PPUSH
41328: CALL_OW 72
41332: PUSH
41333: FOR_IN
41334: IFFALSE 41374
// begin if not GetBWeapon ( i ) then
41336: LD_VAR 0 8
41340: PPUSH
41341: CALL_OW 269
41345: NOT
41346: IFFALSE 41372
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41348: LD_VAR 0 8
41352: PPUSH
41353: LD_VAR 0 8
41357: PPUSH
41358: LD_VAR 0 2
41362: PPUSH
41363: CALL 42628 0 2
41367: PPUSH
41368: CALL_OW 431
// end ;
41372: GO 41333
41374: POP
41375: POP
// end ; for i = 1 to personel do
41376: LD_ADDR_VAR 0 8
41380: PUSH
41381: DOUBLE
41382: LD_INT 1
41384: DEC
41385: ST_TO_ADDR
41386: LD_VAR 0 6
41390: PUSH
41391: FOR_TO
41392: IFFALSE 42462
// begin if i > 4 then
41394: LD_VAR 0 8
41398: PUSH
41399: LD_INT 4
41401: GREATER
41402: IFFALSE 41406
// break ;
41404: GO 42462
// case i of 1 :
41406: LD_VAR 0 8
41410: PUSH
41411: LD_INT 1
41413: DOUBLE
41414: EQUAL
41415: IFTRUE 41419
41417: GO 41499
41419: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41420: LD_ADDR_VAR 0 12
41424: PUSH
41425: LD_VAR 0 18
41429: PPUSH
41430: LD_INT 22
41432: PUSH
41433: LD_VAR 0 16
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 58
41444: PUSH
41445: EMPTY
41446: LIST
41447: PUSH
41448: LD_INT 2
41450: PUSH
41451: LD_INT 30
41453: PUSH
41454: LD_INT 32
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 30
41463: PUSH
41464: LD_INT 4
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 30
41473: PUSH
41474: LD_INT 5
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: LIST
41491: PPUSH
41492: CALL_OW 72
41496: ST_TO_ADDR
41497: GO 41721
41499: LD_INT 2
41501: DOUBLE
41502: EQUAL
41503: IFTRUE 41507
41505: GO 41569
41507: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41508: LD_ADDR_VAR 0 12
41512: PUSH
41513: LD_VAR 0 18
41517: PPUSH
41518: LD_INT 22
41520: PUSH
41521: LD_VAR 0 16
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 2
41532: PUSH
41533: LD_INT 30
41535: PUSH
41536: LD_INT 0
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 30
41545: PUSH
41546: LD_INT 1
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: LIST
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PPUSH
41562: CALL_OW 72
41566: ST_TO_ADDR
41567: GO 41721
41569: LD_INT 3
41571: DOUBLE
41572: EQUAL
41573: IFTRUE 41577
41575: GO 41639
41577: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41578: LD_ADDR_VAR 0 12
41582: PUSH
41583: LD_VAR 0 18
41587: PPUSH
41588: LD_INT 22
41590: PUSH
41591: LD_VAR 0 16
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 2
41602: PUSH
41603: LD_INT 30
41605: PUSH
41606: LD_INT 2
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 30
41615: PUSH
41616: LD_INT 3
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: LIST
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PPUSH
41632: CALL_OW 72
41636: ST_TO_ADDR
41637: GO 41721
41639: LD_INT 4
41641: DOUBLE
41642: EQUAL
41643: IFTRUE 41647
41645: GO 41720
41647: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41648: LD_ADDR_VAR 0 12
41652: PUSH
41653: LD_VAR 0 18
41657: PPUSH
41658: LD_INT 22
41660: PUSH
41661: LD_VAR 0 16
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 2
41672: PUSH
41673: LD_INT 30
41675: PUSH
41676: LD_INT 6
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 30
41685: PUSH
41686: LD_INT 7
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 30
41695: PUSH
41696: LD_INT 8
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PPUSH
41713: CALL_OW 72
41717: ST_TO_ADDR
41718: GO 41721
41720: POP
// if i = 1 then
41721: LD_VAR 0 8
41725: PUSH
41726: LD_INT 1
41728: EQUAL
41729: IFFALSE 41840
// begin tmp := [ ] ;
41731: LD_ADDR_VAR 0 19
41735: PUSH
41736: EMPTY
41737: ST_TO_ADDR
// for j in f do
41738: LD_ADDR_VAR 0 9
41742: PUSH
41743: LD_VAR 0 12
41747: PUSH
41748: FOR_IN
41749: IFFALSE 41822
// if GetBType ( j ) = b_bunker then
41751: LD_VAR 0 9
41755: PPUSH
41756: CALL_OW 266
41760: PUSH
41761: LD_INT 32
41763: EQUAL
41764: IFFALSE 41791
// tmp := Insert ( tmp , 1 , j ) else
41766: LD_ADDR_VAR 0 19
41770: PUSH
41771: LD_VAR 0 19
41775: PPUSH
41776: LD_INT 1
41778: PPUSH
41779: LD_VAR 0 9
41783: PPUSH
41784: CALL_OW 2
41788: ST_TO_ADDR
41789: GO 41820
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41791: LD_ADDR_VAR 0 19
41795: PUSH
41796: LD_VAR 0 19
41800: PPUSH
41801: LD_VAR 0 19
41805: PUSH
41806: LD_INT 1
41808: PLUS
41809: PPUSH
41810: LD_VAR 0 9
41814: PPUSH
41815: CALL_OW 2
41819: ST_TO_ADDR
41820: GO 41748
41822: POP
41823: POP
// if tmp then
41824: LD_VAR 0 19
41828: IFFALSE 41840
// f := tmp ;
41830: LD_ADDR_VAR 0 12
41834: PUSH
41835: LD_VAR 0 19
41839: ST_TO_ADDR
// end ; x := personel [ i ] ;
41840: LD_ADDR_VAR 0 13
41844: PUSH
41845: LD_VAR 0 6
41849: PUSH
41850: LD_VAR 0 8
41854: ARRAY
41855: ST_TO_ADDR
// if x = - 1 then
41856: LD_VAR 0 13
41860: PUSH
41861: LD_INT 1
41863: NEG
41864: EQUAL
41865: IFFALSE 42076
// begin for j in f do
41867: LD_ADDR_VAR 0 9
41871: PUSH
41872: LD_VAR 0 12
41876: PUSH
41877: FOR_IN
41878: IFFALSE 42072
// repeat InitHc ;
41880: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41884: LD_VAR 0 9
41888: PPUSH
41889: CALL_OW 266
41893: PUSH
41894: LD_INT 5
41896: EQUAL
41897: IFFALSE 41967
// begin if UnitsInside ( j ) < 3 then
41899: LD_VAR 0 9
41903: PPUSH
41904: CALL_OW 313
41908: PUSH
41909: LD_INT 3
41911: LESS
41912: IFFALSE 41948
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41914: LD_INT 0
41916: PPUSH
41917: LD_INT 5
41919: PUSH
41920: LD_INT 8
41922: PUSH
41923: LD_INT 9
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: LIST
41930: PUSH
41931: LD_VAR 0 17
41935: ARRAY
41936: PPUSH
41937: LD_VAR 0 4
41941: PPUSH
41942: CALL_OW 380
41946: GO 41965
// PrepareHuman ( false , i , skill ) ;
41948: LD_INT 0
41950: PPUSH
41951: LD_VAR 0 8
41955: PPUSH
41956: LD_VAR 0 4
41960: PPUSH
41961: CALL_OW 380
// end else
41965: GO 41984
// PrepareHuman ( false , i , skill ) ;
41967: LD_INT 0
41969: PPUSH
41970: LD_VAR 0 8
41974: PPUSH
41975: LD_VAR 0 4
41979: PPUSH
41980: CALL_OW 380
// un := CreateHuman ;
41984: LD_ADDR_VAR 0 14
41988: PUSH
41989: CALL_OW 44
41993: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41994: LD_ADDR_VAR 0 7
41998: PUSH
41999: LD_VAR 0 7
42003: PPUSH
42004: LD_INT 1
42006: PPUSH
42007: LD_VAR 0 14
42011: PPUSH
42012: CALL_OW 2
42016: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42017: LD_VAR 0 14
42021: PPUSH
42022: LD_VAR 0 9
42026: PPUSH
42027: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42031: LD_VAR 0 9
42035: PPUSH
42036: CALL_OW 313
42040: PUSH
42041: LD_INT 6
42043: EQUAL
42044: IFTRUE 42068
42046: PUSH
42047: LD_VAR 0 9
42051: PPUSH
42052: CALL_OW 266
42056: PUSH
42057: LD_INT 32
42059: PUSH
42060: LD_INT 31
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: IN
42067: OR
42068: IFFALSE 41880
42070: GO 41877
42072: POP
42073: POP
// end else
42074: GO 42460
// for j = 1 to x do
42076: LD_ADDR_VAR 0 9
42080: PUSH
42081: DOUBLE
42082: LD_INT 1
42084: DEC
42085: ST_TO_ADDR
42086: LD_VAR 0 13
42090: PUSH
42091: FOR_TO
42092: IFFALSE 42458
// begin InitHc ;
42094: CALL_OW 19
// if not f then
42098: LD_VAR 0 12
42102: NOT
42103: IFFALSE 42192
// begin PrepareHuman ( false , i , skill ) ;
42105: LD_INT 0
42107: PPUSH
42108: LD_VAR 0 8
42112: PPUSH
42113: LD_VAR 0 4
42117: PPUSH
42118: CALL_OW 380
// un := CreateHuman ;
42122: LD_ADDR_VAR 0 14
42126: PUSH
42127: CALL_OW 44
42131: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42132: LD_ADDR_VAR 0 7
42136: PUSH
42137: LD_VAR 0 7
42141: PPUSH
42142: LD_INT 1
42144: PPUSH
42145: LD_VAR 0 14
42149: PPUSH
42150: CALL_OW 2
42154: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42155: LD_VAR 0 14
42159: PPUSH
42160: LD_VAR 0 1
42164: PPUSH
42165: CALL_OW 250
42169: PPUSH
42170: LD_VAR 0 1
42174: PPUSH
42175: CALL_OW 251
42179: PPUSH
42180: LD_INT 10
42182: PPUSH
42183: LD_INT 0
42185: PPUSH
42186: CALL_OW 50
// continue ;
42190: GO 42091
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
42192: LD_VAR 0 12
42196: PUSH
42197: LD_INT 1
42199: ARRAY
42200: PPUSH
42201: CALL_OW 313
42205: IFFALSE 42233
42207: PUSH
42208: LD_VAR 0 12
42212: PUSH
42213: LD_INT 1
42215: ARRAY
42216: PPUSH
42217: CALL_OW 266
42221: PUSH
42222: LD_INT 32
42224: PUSH
42225: LD_INT 31
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: IN
42232: AND
42233: IFTRUE 42254
42235: PUSH
42236: LD_VAR 0 12
42240: PUSH
42241: LD_INT 1
42243: ARRAY
42244: PPUSH
42245: CALL_OW 313
42249: PUSH
42250: LD_INT 6
42252: EQUAL
42253: OR
42254: IFFALSE 42274
// f := Delete ( f , 1 ) ;
42256: LD_ADDR_VAR 0 12
42260: PUSH
42261: LD_VAR 0 12
42265: PPUSH
42266: LD_INT 1
42268: PPUSH
42269: CALL_OW 3
42273: ST_TO_ADDR
// if not f then
42274: LD_VAR 0 12
42278: NOT
42279: IFFALSE 42297
// begin x := x + 2 ;
42281: LD_ADDR_VAR 0 13
42285: PUSH
42286: LD_VAR 0 13
42290: PUSH
42291: LD_INT 2
42293: PLUS
42294: ST_TO_ADDR
// continue ;
42295: GO 42091
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
42297: LD_VAR 0 12
42301: PUSH
42302: LD_INT 1
42304: ARRAY
42305: PPUSH
42306: CALL_OW 266
42310: PUSH
42311: LD_INT 5
42313: EQUAL
42314: IFFALSE 42388
// begin if UnitsInside ( f [ 1 ] ) < 3 then
42316: LD_VAR 0 12
42320: PUSH
42321: LD_INT 1
42323: ARRAY
42324: PPUSH
42325: CALL_OW 313
42329: PUSH
42330: LD_INT 3
42332: LESS
42333: IFFALSE 42369
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42335: LD_INT 0
42337: PPUSH
42338: LD_INT 5
42340: PUSH
42341: LD_INT 8
42343: PUSH
42344: LD_INT 9
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: LIST
42351: PUSH
42352: LD_VAR 0 17
42356: ARRAY
42357: PPUSH
42358: LD_VAR 0 4
42362: PPUSH
42363: CALL_OW 380
42367: GO 42386
// PrepareHuman ( false , i , skill ) ;
42369: LD_INT 0
42371: PPUSH
42372: LD_VAR 0 8
42376: PPUSH
42377: LD_VAR 0 4
42381: PPUSH
42382: CALL_OW 380
// end else
42386: GO 42405
// PrepareHuman ( false , i , skill ) ;
42388: LD_INT 0
42390: PPUSH
42391: LD_VAR 0 8
42395: PPUSH
42396: LD_VAR 0 4
42400: PPUSH
42401: CALL_OW 380
// un := CreateHuman ;
42405: LD_ADDR_VAR 0 14
42409: PUSH
42410: CALL_OW 44
42414: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42415: LD_ADDR_VAR 0 7
42419: PUSH
42420: LD_VAR 0 7
42424: PPUSH
42425: LD_INT 1
42427: PPUSH
42428: LD_VAR 0 14
42432: PPUSH
42433: CALL_OW 2
42437: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42438: LD_VAR 0 14
42442: PPUSH
42443: LD_VAR 0 12
42447: PUSH
42448: LD_INT 1
42450: ARRAY
42451: PPUSH
42452: CALL_OW 52
// end ;
42456: GO 42091
42458: POP
42459: POP
// end ;
42460: GO 41391
42462: POP
42463: POP
// result := result ^ buildings ;
42464: LD_ADDR_VAR 0 7
42468: PUSH
42469: LD_VAR 0 7
42473: PUSH
42474: LD_VAR 0 18
42478: ADD
42479: ST_TO_ADDR
// end else
42480: GO 42623
// begin for i = 1 to personel do
42482: LD_ADDR_VAR 0 8
42486: PUSH
42487: DOUBLE
42488: LD_INT 1
42490: DEC
42491: ST_TO_ADDR
42492: LD_VAR 0 6
42496: PUSH
42497: FOR_TO
42498: IFFALSE 42621
// begin if i > 4 then
42500: LD_VAR 0 8
42504: PUSH
42505: LD_INT 4
42507: GREATER
42508: IFFALSE 42512
// break ;
42510: GO 42621
// x := personel [ i ] ;
42512: LD_ADDR_VAR 0 13
42516: PUSH
42517: LD_VAR 0 6
42521: PUSH
42522: LD_VAR 0 8
42526: ARRAY
42527: ST_TO_ADDR
// if x = - 1 then
42528: LD_VAR 0 13
42532: PUSH
42533: LD_INT 1
42535: NEG
42536: EQUAL
42537: IFFALSE 42541
// continue ;
42539: GO 42497
// PrepareHuman ( false , i , skill ) ;
42541: LD_INT 0
42543: PPUSH
42544: LD_VAR 0 8
42548: PPUSH
42549: LD_VAR 0 4
42553: PPUSH
42554: CALL_OW 380
// un := CreateHuman ;
42558: LD_ADDR_VAR 0 14
42562: PUSH
42563: CALL_OW 44
42567: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42568: LD_VAR 0 14
42572: PPUSH
42573: LD_VAR 0 1
42577: PPUSH
42578: CALL_OW 250
42582: PPUSH
42583: LD_VAR 0 1
42587: PPUSH
42588: CALL_OW 251
42592: PPUSH
42593: LD_INT 10
42595: PPUSH
42596: LD_INT 0
42598: PPUSH
42599: CALL_OW 50
// result := result ^ un ;
42603: LD_ADDR_VAR 0 7
42607: PUSH
42608: LD_VAR 0 7
42612: PUSH
42613: LD_VAR 0 14
42617: ADD
42618: ST_TO_ADDR
// end ;
42619: GO 42497
42621: POP
42622: POP
// end ; end ;
42623: LD_VAR 0 7
42627: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42628: LD_INT 0
42630: PPUSH
42631: PPUSH
42632: PPUSH
42633: PPUSH
42634: PPUSH
42635: PPUSH
42636: PPUSH
42637: PPUSH
42638: PPUSH
42639: PPUSH
42640: PPUSH
42641: PPUSH
42642: PPUSH
42643: PPUSH
42644: PPUSH
42645: PPUSH
// result := false ;
42646: LD_ADDR_VAR 0 3
42650: PUSH
42651: LD_INT 0
42653: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42654: LD_VAR 0 1
42658: NOT
42659: IFTRUE 42684
42661: PUSH
42662: LD_VAR 0 1
42666: PPUSH
42667: CALL_OW 266
42671: PUSH
42672: LD_INT 32
42674: PUSH
42675: LD_INT 33
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: IN
42682: NOT
42683: OR
42684: IFFALSE 42688
// exit ;
42686: GO 43823
// nat := GetNation ( tower ) ;
42688: LD_ADDR_VAR 0 12
42692: PUSH
42693: LD_VAR 0 1
42697: PPUSH
42698: CALL_OW 248
42702: ST_TO_ADDR
// side := GetSide ( tower ) ;
42703: LD_ADDR_VAR 0 16
42707: PUSH
42708: LD_VAR 0 1
42712: PPUSH
42713: CALL_OW 255
42717: ST_TO_ADDR
// x := GetX ( tower ) ;
42718: LD_ADDR_VAR 0 10
42722: PUSH
42723: LD_VAR 0 1
42727: PPUSH
42728: CALL_OW 250
42732: ST_TO_ADDR
// y := GetY ( tower ) ;
42733: LD_ADDR_VAR 0 11
42737: PUSH
42738: LD_VAR 0 1
42742: PPUSH
42743: CALL_OW 251
42747: ST_TO_ADDR
// if not x or not y then
42748: LD_VAR 0 10
42752: NOT
42753: IFTRUE 42762
42755: PUSH
42756: LD_VAR 0 11
42760: NOT
42761: OR
42762: IFFALSE 42766
// exit ;
42764: GO 43823
// weapon := 0 ;
42766: LD_ADDR_VAR 0 18
42770: PUSH
42771: LD_INT 0
42773: ST_TO_ADDR
// fac_list := [ ] ;
42774: LD_ADDR_VAR 0 17
42778: PUSH
42779: EMPTY
42780: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42781: LD_ADDR_VAR 0 6
42785: PUSH
42786: LD_VAR 0 1
42790: PPUSH
42791: CALL_OW 274
42795: PPUSH
42796: LD_VAR 0 2
42800: PPUSH
42801: LD_INT 0
42803: PPUSH
42804: CALL 40358 0 3
42808: PPUSH
42809: LD_INT 30
42811: PUSH
42812: LD_INT 3
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PPUSH
42819: CALL_OW 72
42823: ST_TO_ADDR
// if not factories then
42824: LD_VAR 0 6
42828: NOT
42829: IFFALSE 42833
// exit ;
42831: GO 43823
// for i in factories do
42833: LD_ADDR_VAR 0 8
42837: PUSH
42838: LD_VAR 0 6
42842: PUSH
42843: FOR_IN
42844: IFFALSE 42869
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42846: LD_ADDR_VAR 0 17
42850: PUSH
42851: LD_VAR 0 17
42855: PUSH
42856: LD_VAR 0 8
42860: PPUSH
42861: CALL_OW 478
42865: UNION
42866: ST_TO_ADDR
42867: GO 42843
42869: POP
42870: POP
// if not fac_list then
42871: LD_VAR 0 17
42875: NOT
42876: IFFALSE 42880
// exit ;
42878: GO 43823
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42880: LD_ADDR_VAR 0 5
42884: PUSH
42885: LD_INT 4
42887: PUSH
42888: LD_INT 5
42890: PUSH
42891: LD_INT 9
42893: PUSH
42894: LD_INT 10
42896: PUSH
42897: LD_INT 6
42899: PUSH
42900: LD_INT 7
42902: PUSH
42903: LD_INT 11
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 27
42917: PUSH
42918: LD_INT 28
42920: PUSH
42921: LD_INT 26
42923: PUSH
42924: LD_INT 30
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 43
42935: PUSH
42936: LD_INT 44
42938: PUSH
42939: LD_INT 46
42941: PUSH
42942: LD_INT 45
42944: PUSH
42945: LD_INT 47
42947: PUSH
42948: LD_INT 49
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: LIST
42963: PUSH
42964: LD_VAR 0 12
42968: ARRAY
42969: ST_TO_ADDR
// list := list isect fac_list ;
42970: LD_ADDR_VAR 0 5
42974: PUSH
42975: LD_VAR 0 5
42979: PUSH
42980: LD_VAR 0 17
42984: ISECT
42985: ST_TO_ADDR
// if not list then
42986: LD_VAR 0 5
42990: NOT
42991: IFFALSE 42995
// exit ;
42993: GO 43823
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42995: LD_VAR 0 12
42999: PUSH
43000: LD_INT 3
43002: EQUAL
43003: IFFALSE 43015
43005: PUSH
43006: LD_INT 49
43008: PUSH
43009: LD_VAR 0 5
43013: IN
43014: AND
43015: IFFALSE 43035
43017: PUSH
43018: LD_INT 31
43020: PPUSH
43021: LD_VAR 0 16
43025: PPUSH
43026: CALL_OW 321
43030: PUSH
43031: LD_INT 2
43033: EQUAL
43034: AND
43035: IFFALSE 43095
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43037: LD_INT 22
43039: PUSH
43040: LD_VAR 0 16
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 35
43051: PUSH
43052: LD_INT 49
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 91
43061: PUSH
43062: LD_VAR 0 1
43066: PUSH
43067: LD_INT 10
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: LIST
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: LIST
43079: PPUSH
43080: CALL_OW 69
43084: NOT
43085: IFFALSE 43095
// weapon := ru_time_lapser ;
43087: LD_ADDR_VAR 0 18
43091: PUSH
43092: LD_INT 49
43094: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
43095: LD_VAR 0 12
43099: PUSH
43100: LD_INT 1
43102: PUSH
43103: LD_INT 2
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: IN
43110: IFFALSE 43134
43112: PUSH
43113: LD_INT 11
43115: PUSH
43116: LD_VAR 0 5
43120: IN
43121: IFTRUE 43133
43123: PUSH
43124: LD_INT 30
43126: PUSH
43127: LD_VAR 0 5
43131: IN
43132: OR
43133: AND
43134: IFFALSE 43154
43136: PUSH
43137: LD_INT 6
43139: PPUSH
43140: LD_VAR 0 16
43144: PPUSH
43145: CALL_OW 321
43149: PUSH
43150: LD_INT 2
43152: EQUAL
43153: AND
43154: IFFALSE 43321
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
43156: LD_INT 22
43158: PUSH
43159: LD_VAR 0 16
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 2
43170: PUSH
43171: LD_INT 35
43173: PUSH
43174: LD_INT 11
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 35
43183: PUSH
43184: LD_INT 30
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 91
43198: PUSH
43199: LD_VAR 0 1
43203: PUSH
43204: LD_INT 18
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: LIST
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: LIST
43216: PPUSH
43217: CALL_OW 69
43221: NOT
43222: IFFALSE 43298
43224: PUSH
43225: LD_INT 22
43227: PUSH
43228: LD_VAR 0 16
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 2
43239: PUSH
43240: LD_INT 30
43242: PUSH
43243: LD_INT 32
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 30
43252: PUSH
43253: LD_INT 33
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 91
43267: PUSH
43268: LD_VAR 0 1
43272: PUSH
43273: LD_INT 12
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: LIST
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: LIST
43285: PUSH
43286: EMPTY
43287: LIST
43288: PPUSH
43289: CALL_OW 69
43293: PUSH
43294: LD_INT 2
43296: GREATER
43297: AND
43298: IFFALSE 43321
// weapon := [ us_radar , ar_radar ] [ nat ] ;
43300: LD_ADDR_VAR 0 18
43304: PUSH
43305: LD_INT 11
43307: PUSH
43308: LD_INT 30
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_VAR 0 12
43319: ARRAY
43320: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
43321: LD_VAR 0 18
43325: NOT
43326: IFFALSE 43346
43328: PUSH
43329: LD_INT 40
43331: PPUSH
43332: LD_VAR 0 16
43336: PPUSH
43337: CALL_OW 321
43341: PUSH
43342: LD_INT 2
43344: EQUAL
43345: AND
43346: IFFALSE 43382
43348: PUSH
43349: LD_INT 7
43351: PUSH
43352: LD_VAR 0 5
43356: IN
43357: IFTRUE 43369
43359: PUSH
43360: LD_INT 28
43362: PUSH
43363: LD_VAR 0 5
43367: IN
43368: OR
43369: IFTRUE 43381
43371: PUSH
43372: LD_INT 45
43374: PUSH
43375: LD_VAR 0 5
43379: IN
43380: OR
43381: AND
43382: IFFALSE 43636
// begin hex := GetHexInfo ( x , y ) ;
43384: LD_ADDR_VAR 0 4
43388: PUSH
43389: LD_VAR 0 10
43393: PPUSH
43394: LD_VAR 0 11
43398: PPUSH
43399: CALL_OW 546
43403: ST_TO_ADDR
// if hex [ 1 ] then
43404: LD_VAR 0 4
43408: PUSH
43409: LD_INT 1
43411: ARRAY
43412: IFFALSE 43416
// exit ;
43414: GO 43823
// height := hex [ 2 ] ;
43416: LD_ADDR_VAR 0 15
43420: PUSH
43421: LD_VAR 0 4
43425: PUSH
43426: LD_INT 2
43428: ARRAY
43429: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43430: LD_ADDR_VAR 0 14
43434: PUSH
43435: LD_INT 0
43437: PUSH
43438: LD_INT 2
43440: PUSH
43441: LD_INT 3
43443: PUSH
43444: LD_INT 5
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: ST_TO_ADDR
// for i in tmp do
43453: LD_ADDR_VAR 0 8
43457: PUSH
43458: LD_VAR 0 14
43462: PUSH
43463: FOR_IN
43464: IFFALSE 43634
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43466: LD_ADDR_VAR 0 9
43470: PUSH
43471: LD_VAR 0 10
43475: PPUSH
43476: LD_VAR 0 8
43480: PPUSH
43481: LD_INT 5
43483: PPUSH
43484: CALL_OW 272
43488: PUSH
43489: LD_VAR 0 11
43493: PPUSH
43494: LD_VAR 0 8
43498: PPUSH
43499: LD_INT 5
43501: PPUSH
43502: CALL_OW 273
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43511: LD_VAR 0 9
43515: PUSH
43516: LD_INT 1
43518: ARRAY
43519: PPUSH
43520: LD_VAR 0 9
43524: PUSH
43525: LD_INT 2
43527: ARRAY
43528: PPUSH
43529: CALL_OW 488
43533: IFFALSE 43632
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43535: LD_ADDR_VAR 0 4
43539: PUSH
43540: LD_VAR 0 9
43544: PUSH
43545: LD_INT 1
43547: ARRAY
43548: PPUSH
43549: LD_VAR 0 9
43553: PUSH
43554: LD_INT 2
43556: ARRAY
43557: PPUSH
43558: CALL_OW 546
43562: ST_TO_ADDR
// if hex [ 1 ] then
43563: LD_VAR 0 4
43567: PUSH
43568: LD_INT 1
43570: ARRAY
43571: IFFALSE 43575
// continue ;
43573: GO 43463
// h := hex [ 2 ] ;
43575: LD_ADDR_VAR 0 13
43579: PUSH
43580: LD_VAR 0 4
43584: PUSH
43585: LD_INT 2
43587: ARRAY
43588: ST_TO_ADDR
// if h + 7 < height then
43589: LD_VAR 0 13
43593: PUSH
43594: LD_INT 7
43596: PLUS
43597: PUSH
43598: LD_VAR 0 15
43602: LESS
43603: IFFALSE 43632
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43605: LD_ADDR_VAR 0 18
43609: PUSH
43610: LD_INT 7
43612: PUSH
43613: LD_INT 28
43615: PUSH
43616: LD_INT 45
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: LIST
43623: PUSH
43624: LD_VAR 0 12
43628: ARRAY
43629: ST_TO_ADDR
// break ;
43630: GO 43634
// end ; end ; end ;
43632: GO 43463
43634: POP
43635: POP
// end ; if not weapon then
43636: LD_VAR 0 18
43640: NOT
43641: IFFALSE 43701
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43643: LD_ADDR_VAR 0 5
43647: PUSH
43648: LD_VAR 0 5
43652: PUSH
43653: LD_INT 11
43655: PUSH
43656: LD_INT 30
43658: PUSH
43659: LD_INT 49
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: LIST
43666: DIFF
43667: ST_TO_ADDR
// if not list then
43668: LD_VAR 0 5
43672: NOT
43673: IFFALSE 43677
// exit ;
43675: GO 43823
// weapon := list [ rand ( 1 , list ) ] ;
43677: LD_ADDR_VAR 0 18
43681: PUSH
43682: LD_VAR 0 5
43686: PUSH
43687: LD_INT 1
43689: PPUSH
43690: LD_VAR 0 5
43694: PPUSH
43695: CALL_OW 12
43699: ARRAY
43700: ST_TO_ADDR
// end ; if weapon then
43701: LD_VAR 0 18
43705: IFFALSE 43823
// begin tmp := CostOfWeapon ( weapon ) ;
43707: LD_ADDR_VAR 0 14
43711: PUSH
43712: LD_VAR 0 18
43716: PPUSH
43717: CALL_OW 451
43721: ST_TO_ADDR
// j := GetBase ( tower ) ;
43722: LD_ADDR_VAR 0 9
43726: PUSH
43727: LD_VAR 0 1
43731: PPUSH
43732: CALL_OW 274
43736: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43737: LD_VAR 0 9
43741: PPUSH
43742: LD_INT 1
43744: PPUSH
43745: CALL_OW 275
43749: PUSH
43750: LD_VAR 0 14
43754: PUSH
43755: LD_INT 1
43757: ARRAY
43758: GREATEREQUAL
43759: IFFALSE 43785
43761: PUSH
43762: LD_VAR 0 9
43766: PPUSH
43767: LD_INT 2
43769: PPUSH
43770: CALL_OW 275
43774: PUSH
43775: LD_VAR 0 14
43779: PUSH
43780: LD_INT 2
43782: ARRAY
43783: GREATEREQUAL
43784: AND
43785: IFFALSE 43811
43787: PUSH
43788: LD_VAR 0 9
43792: PPUSH
43793: LD_INT 3
43795: PPUSH
43796: CALL_OW 275
43800: PUSH
43801: LD_VAR 0 14
43805: PUSH
43806: LD_INT 3
43808: ARRAY
43809: GREATEREQUAL
43810: AND
43811: IFFALSE 43823
// result := weapon ;
43813: LD_ADDR_VAR 0 3
43817: PUSH
43818: LD_VAR 0 18
43822: ST_TO_ADDR
// end ; end ;
43823: LD_VAR 0 3
43827: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43828: LD_INT 0
43830: PPUSH
43831: PPUSH
// result := true ;
43832: LD_ADDR_VAR 0 3
43836: PUSH
43837: LD_INT 1
43839: ST_TO_ADDR
// if array1 = array2 then
43840: LD_VAR 0 1
43844: PUSH
43845: LD_VAR 0 2
43849: EQUAL
43850: IFFALSE 43910
// begin for i = 1 to array1 do
43852: LD_ADDR_VAR 0 4
43856: PUSH
43857: DOUBLE
43858: LD_INT 1
43860: DEC
43861: ST_TO_ADDR
43862: LD_VAR 0 1
43866: PUSH
43867: FOR_TO
43868: IFFALSE 43906
// if array1 [ i ] <> array2 [ i ] then
43870: LD_VAR 0 1
43874: PUSH
43875: LD_VAR 0 4
43879: ARRAY
43880: PUSH
43881: LD_VAR 0 2
43885: PUSH
43886: LD_VAR 0 4
43890: ARRAY
43891: NONEQUAL
43892: IFFALSE 43904
// begin result := false ;
43894: LD_ADDR_VAR 0 3
43898: PUSH
43899: LD_INT 0
43901: ST_TO_ADDR
// break ;
43902: GO 43906
// end ;
43904: GO 43867
43906: POP
43907: POP
// end else
43908: GO 43918
// result := false ;
43910: LD_ADDR_VAR 0 3
43914: PUSH
43915: LD_INT 0
43917: ST_TO_ADDR
// end ;
43918: LD_VAR 0 3
43922: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43923: LD_INT 0
43925: PPUSH
43926: PPUSH
// if not array1 or not array2 then
43927: LD_VAR 0 1
43931: NOT
43932: IFTRUE 43941
43934: PUSH
43935: LD_VAR 0 2
43939: NOT
43940: OR
43941: IFFALSE 43945
// exit ;
43943: GO 44009
// result := true ;
43945: LD_ADDR_VAR 0 3
43949: PUSH
43950: LD_INT 1
43952: ST_TO_ADDR
// for i = 1 to array1 do
43953: LD_ADDR_VAR 0 4
43957: PUSH
43958: DOUBLE
43959: LD_INT 1
43961: DEC
43962: ST_TO_ADDR
43963: LD_VAR 0 1
43967: PUSH
43968: FOR_TO
43969: IFFALSE 44007
// if array1 [ i ] <> array2 [ i ] then
43971: LD_VAR 0 1
43975: PUSH
43976: LD_VAR 0 4
43980: ARRAY
43981: PUSH
43982: LD_VAR 0 2
43986: PUSH
43987: LD_VAR 0 4
43991: ARRAY
43992: NONEQUAL
43993: IFFALSE 44005
// begin result := false ;
43995: LD_ADDR_VAR 0 3
43999: PUSH
44000: LD_INT 0
44002: ST_TO_ADDR
// break ;
44003: GO 44007
// end ;
44005: GO 43968
44007: POP
44008: POP
// end ;
44009: LD_VAR 0 3
44013: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44014: LD_INT 0
44016: PPUSH
44017: PPUSH
44018: PPUSH
// pom := GetBase ( fac ) ;
44019: LD_ADDR_VAR 0 5
44023: PUSH
44024: LD_VAR 0 1
44028: PPUSH
44029: CALL_OW 274
44033: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44034: LD_ADDR_VAR 0 4
44038: PUSH
44039: LD_VAR 0 2
44043: PUSH
44044: LD_INT 1
44046: ARRAY
44047: PPUSH
44048: LD_VAR 0 2
44052: PUSH
44053: LD_INT 2
44055: ARRAY
44056: PPUSH
44057: LD_VAR 0 2
44061: PUSH
44062: LD_INT 3
44064: ARRAY
44065: PPUSH
44066: LD_VAR 0 2
44070: PUSH
44071: LD_INT 4
44073: ARRAY
44074: PPUSH
44075: CALL_OW 449
44079: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44080: LD_ADDR_VAR 0 3
44084: PUSH
44085: LD_VAR 0 5
44089: PPUSH
44090: LD_INT 1
44092: PPUSH
44093: CALL_OW 275
44097: PUSH
44098: LD_VAR 0 4
44102: PUSH
44103: LD_INT 1
44105: ARRAY
44106: GREATEREQUAL
44107: IFFALSE 44133
44109: PUSH
44110: LD_VAR 0 5
44114: PPUSH
44115: LD_INT 2
44117: PPUSH
44118: CALL_OW 275
44122: PUSH
44123: LD_VAR 0 4
44127: PUSH
44128: LD_INT 2
44130: ARRAY
44131: GREATEREQUAL
44132: AND
44133: IFFALSE 44159
44135: PUSH
44136: LD_VAR 0 5
44140: PPUSH
44141: LD_INT 3
44143: PPUSH
44144: CALL_OW 275
44148: PUSH
44149: LD_VAR 0 4
44153: PUSH
44154: LD_INT 3
44156: ARRAY
44157: GREATEREQUAL
44158: AND
44159: ST_TO_ADDR
// end ;
44160: LD_VAR 0 3
44164: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
44165: LD_INT 0
44167: PPUSH
44168: PPUSH
44169: PPUSH
44170: PPUSH
// pom := GetBase ( building ) ;
44171: LD_ADDR_VAR 0 3
44175: PUSH
44176: LD_VAR 0 1
44180: PPUSH
44181: CALL_OW 274
44185: ST_TO_ADDR
// if not pom then
44186: LD_VAR 0 3
44190: NOT
44191: IFFALSE 44195
// exit ;
44193: GO 44369
// btype := GetBType ( building ) ;
44195: LD_ADDR_VAR 0 5
44199: PUSH
44200: LD_VAR 0 1
44204: PPUSH
44205: CALL_OW 266
44209: ST_TO_ADDR
// if btype = b_armoury then
44210: LD_VAR 0 5
44214: PUSH
44215: LD_INT 4
44217: EQUAL
44218: IFFALSE 44228
// btype := b_barracks ;
44220: LD_ADDR_VAR 0 5
44224: PUSH
44225: LD_INT 5
44227: ST_TO_ADDR
// if btype = b_depot then
44228: LD_VAR 0 5
44232: PUSH
44233: LD_INT 0
44235: EQUAL
44236: IFFALSE 44246
// btype := b_warehouse ;
44238: LD_ADDR_VAR 0 5
44242: PUSH
44243: LD_INT 1
44245: ST_TO_ADDR
// if btype = b_workshop then
44246: LD_VAR 0 5
44250: PUSH
44251: LD_INT 2
44253: EQUAL
44254: IFFALSE 44264
// btype := b_factory ;
44256: LD_ADDR_VAR 0 5
44260: PUSH
44261: LD_INT 3
44263: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44264: LD_ADDR_VAR 0 4
44268: PUSH
44269: LD_VAR 0 5
44273: PPUSH
44274: LD_VAR 0 1
44278: PPUSH
44279: CALL_OW 248
44283: PPUSH
44284: CALL_OW 450
44288: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44289: LD_ADDR_VAR 0 2
44293: PUSH
44294: LD_VAR 0 3
44298: PPUSH
44299: LD_INT 1
44301: PPUSH
44302: CALL_OW 275
44306: PUSH
44307: LD_VAR 0 4
44311: PUSH
44312: LD_INT 1
44314: ARRAY
44315: GREATEREQUAL
44316: IFFALSE 44342
44318: PUSH
44319: LD_VAR 0 3
44323: PPUSH
44324: LD_INT 2
44326: PPUSH
44327: CALL_OW 275
44331: PUSH
44332: LD_VAR 0 4
44336: PUSH
44337: LD_INT 2
44339: ARRAY
44340: GREATEREQUAL
44341: AND
44342: IFFALSE 44368
44344: PUSH
44345: LD_VAR 0 3
44349: PPUSH
44350: LD_INT 3
44352: PPUSH
44353: CALL_OW 275
44357: PUSH
44358: LD_VAR 0 4
44362: PUSH
44363: LD_INT 3
44365: ARRAY
44366: GREATEREQUAL
44367: AND
44368: ST_TO_ADDR
// end ;
44369: LD_VAR 0 2
44373: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44374: LD_INT 0
44376: PPUSH
44377: PPUSH
44378: PPUSH
// pom := GetBase ( building ) ;
44379: LD_ADDR_VAR 0 4
44383: PUSH
44384: LD_VAR 0 1
44388: PPUSH
44389: CALL_OW 274
44393: ST_TO_ADDR
// if not pom then
44394: LD_VAR 0 4
44398: NOT
44399: IFFALSE 44403
// exit ;
44401: GO 44508
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44403: LD_ADDR_VAR 0 5
44407: PUSH
44408: LD_VAR 0 2
44412: PPUSH
44413: LD_VAR 0 1
44417: PPUSH
44418: CALL_OW 248
44422: PPUSH
44423: CALL_OW 450
44427: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44428: LD_ADDR_VAR 0 3
44432: PUSH
44433: LD_VAR 0 4
44437: PPUSH
44438: LD_INT 1
44440: PPUSH
44441: CALL_OW 275
44445: PUSH
44446: LD_VAR 0 5
44450: PUSH
44451: LD_INT 1
44453: ARRAY
44454: GREATEREQUAL
44455: IFFALSE 44481
44457: PUSH
44458: LD_VAR 0 4
44462: PPUSH
44463: LD_INT 2
44465: PPUSH
44466: CALL_OW 275
44470: PUSH
44471: LD_VAR 0 5
44475: PUSH
44476: LD_INT 2
44478: ARRAY
44479: GREATEREQUAL
44480: AND
44481: IFFALSE 44507
44483: PUSH
44484: LD_VAR 0 4
44488: PPUSH
44489: LD_INT 3
44491: PPUSH
44492: CALL_OW 275
44496: PUSH
44497: LD_VAR 0 5
44501: PUSH
44502: LD_INT 3
44504: ARRAY
44505: GREATEREQUAL
44506: AND
44507: ST_TO_ADDR
// end ;
44508: LD_VAR 0 3
44512: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44513: LD_INT 0
44515: PPUSH
44516: PPUSH
44517: PPUSH
44518: PPUSH
44519: PPUSH
44520: PPUSH
44521: PPUSH
44522: PPUSH
44523: PPUSH
44524: PPUSH
44525: PPUSH
// result := false ;
44526: LD_ADDR_VAR 0 8
44530: PUSH
44531: LD_INT 0
44533: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44534: LD_VAR 0 5
44538: NOT
44539: IFTRUE 44548
44541: PUSH
44542: LD_VAR 0 1
44546: NOT
44547: OR
44548: IFTRUE 44557
44550: PUSH
44551: LD_VAR 0 2
44555: NOT
44556: OR
44557: IFTRUE 44566
44559: PUSH
44560: LD_VAR 0 3
44564: NOT
44565: OR
44566: IFFALSE 44570
// exit ;
44568: GO 45396
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44570: LD_ADDR_VAR 0 14
44574: PUSH
44575: LD_VAR 0 1
44579: PPUSH
44580: LD_VAR 0 2
44584: PPUSH
44585: LD_VAR 0 3
44589: PPUSH
44590: LD_VAR 0 4
44594: PPUSH
44595: LD_VAR 0 5
44599: PUSH
44600: LD_INT 1
44602: ARRAY
44603: PPUSH
44604: CALL_OW 248
44608: PPUSH
44609: LD_INT 0
44611: PPUSH
44612: CALL 46677 0 6
44616: ST_TO_ADDR
// if not hexes then
44617: LD_VAR 0 14
44621: NOT
44622: IFFALSE 44626
// exit ;
44624: GO 45396
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44626: LD_ADDR_VAR 0 17
44630: PUSH
44631: LD_VAR 0 5
44635: PPUSH
44636: LD_INT 22
44638: PUSH
44639: LD_VAR 0 13
44643: PPUSH
44644: CALL_OW 255
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 2
44655: PUSH
44656: LD_INT 30
44658: PUSH
44659: LD_INT 0
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 30
44668: PUSH
44669: LD_INT 1
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: LIST
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PPUSH
44685: CALL_OW 72
44689: ST_TO_ADDR
// for i = 1 to hexes do
44690: LD_ADDR_VAR 0 9
44694: PUSH
44695: DOUBLE
44696: LD_INT 1
44698: DEC
44699: ST_TO_ADDR
44700: LD_VAR 0 14
44704: PUSH
44705: FOR_TO
44706: IFFALSE 45394
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44708: LD_ADDR_VAR 0 13
44712: PUSH
44713: LD_VAR 0 14
44717: PUSH
44718: LD_VAR 0 9
44722: ARRAY
44723: PUSH
44724: LD_INT 1
44726: ARRAY
44727: PPUSH
44728: LD_VAR 0 14
44732: PUSH
44733: LD_VAR 0 9
44737: ARRAY
44738: PUSH
44739: LD_INT 2
44741: ARRAY
44742: PPUSH
44743: CALL_OW 428
44747: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44748: LD_VAR 0 14
44752: PUSH
44753: LD_VAR 0 9
44757: ARRAY
44758: PUSH
44759: LD_INT 1
44761: ARRAY
44762: PPUSH
44763: LD_VAR 0 14
44767: PUSH
44768: LD_VAR 0 9
44772: ARRAY
44773: PUSH
44774: LD_INT 2
44776: ARRAY
44777: PPUSH
44778: CALL_OW 351
44782: IFTRUE 44821
44784: PUSH
44785: LD_VAR 0 14
44789: PUSH
44790: LD_VAR 0 9
44794: ARRAY
44795: PUSH
44796: LD_INT 1
44798: ARRAY
44799: PPUSH
44800: LD_VAR 0 14
44804: PUSH
44805: LD_VAR 0 9
44809: ARRAY
44810: PUSH
44811: LD_INT 2
44813: ARRAY
44814: PPUSH
44815: CALL_OW 488
44819: NOT
44820: OR
44821: IFTRUE 44838
44823: PUSH
44824: LD_VAR 0 13
44828: PPUSH
44829: CALL_OW 247
44833: PUSH
44834: LD_INT 3
44836: EQUAL
44837: OR
44838: IFFALSE 44844
// exit ;
44840: POP
44841: POP
44842: GO 45396
// if not tmp then
44844: LD_VAR 0 13
44848: NOT
44849: IFFALSE 44853
// continue ;
44851: GO 44705
// result := true ;
44853: LD_ADDR_VAR 0 8
44857: PUSH
44858: LD_INT 1
44860: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44861: LD_VAR 0 6
44865: IFFALSE 44882
44867: PUSH
44868: LD_VAR 0 13
44872: PPUSH
44873: CALL_OW 247
44877: PUSH
44878: LD_INT 2
44880: EQUAL
44881: AND
44882: IFFALSE 44899
44884: PUSH
44885: LD_VAR 0 13
44889: PPUSH
44890: CALL_OW 263
44894: PUSH
44895: LD_INT 1
44897: EQUAL
44898: AND
44899: IFFALSE 45063
// begin if IsDrivenBy ( tmp ) then
44901: LD_VAR 0 13
44905: PPUSH
44906: CALL_OW 311
44910: IFFALSE 44914
// continue ;
44912: GO 44705
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44914: LD_VAR 0 6
44918: PPUSH
44919: LD_INT 3
44921: PUSH
44922: LD_INT 60
44924: PUSH
44925: EMPTY
44926: LIST
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 3
44934: PUSH
44935: LD_INT 55
44937: PUSH
44938: EMPTY
44939: LIST
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PPUSH
44949: CALL_OW 72
44953: IFFALSE 45061
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44955: LD_ADDR_VAR 0 18
44959: PUSH
44960: LD_VAR 0 6
44964: PPUSH
44965: LD_INT 3
44967: PUSH
44968: LD_INT 60
44970: PUSH
44971: EMPTY
44972: LIST
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 3
44980: PUSH
44981: LD_INT 55
44983: PUSH
44984: EMPTY
44985: LIST
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PPUSH
44995: CALL_OW 72
44999: PUSH
45000: LD_INT 1
45002: ARRAY
45003: ST_TO_ADDR
// if IsInUnit ( driver ) then
45004: LD_VAR 0 18
45008: PPUSH
45009: CALL_OW 310
45013: IFFALSE 45024
// ComExit ( driver ) ;
45015: LD_VAR 0 18
45019: PPUSH
45020: CALL 70677 0 1
// AddComEnterUnit ( driver , tmp ) ;
45024: LD_VAR 0 18
45028: PPUSH
45029: LD_VAR 0 13
45033: PPUSH
45034: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
45038: LD_VAR 0 18
45042: PPUSH
45043: LD_VAR 0 7
45047: PPUSH
45048: CALL_OW 173
// AddComExitVehicle ( driver ) ;
45052: LD_VAR 0 18
45056: PPUSH
45057: CALL_OW 181
// end ; continue ;
45061: GO 44705
// end ; if not cleaners or not tmp in cleaners then
45063: LD_VAR 0 6
45067: NOT
45068: IFTRUE 45083
45070: PUSH
45071: LD_VAR 0 13
45075: PUSH
45076: LD_VAR 0 6
45080: IN
45081: NOT
45082: OR
45083: IFFALSE 45392
// begin if dep then
45085: LD_VAR 0 17
45089: IFFALSE 45225
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
45091: LD_ADDR_VAR 0 16
45095: PUSH
45096: LD_VAR 0 17
45100: PUSH
45101: LD_INT 1
45103: ARRAY
45104: PPUSH
45105: CALL_OW 250
45109: PPUSH
45110: LD_VAR 0 17
45114: PUSH
45115: LD_INT 1
45117: ARRAY
45118: PPUSH
45119: CALL_OW 254
45123: PPUSH
45124: LD_INT 5
45126: PPUSH
45127: CALL_OW 272
45131: PUSH
45132: LD_VAR 0 17
45136: PUSH
45137: LD_INT 1
45139: ARRAY
45140: PPUSH
45141: CALL_OW 251
45145: PPUSH
45146: LD_VAR 0 17
45150: PUSH
45151: LD_INT 1
45153: ARRAY
45154: PPUSH
45155: CALL_OW 254
45159: PPUSH
45160: LD_INT 5
45162: PPUSH
45163: CALL_OW 273
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
45172: LD_VAR 0 16
45176: PUSH
45177: LD_INT 1
45179: ARRAY
45180: PPUSH
45181: LD_VAR 0 16
45185: PUSH
45186: LD_INT 2
45188: ARRAY
45189: PPUSH
45190: CALL_OW 488
45194: IFFALSE 45225
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
45196: LD_VAR 0 13
45200: PPUSH
45201: LD_VAR 0 16
45205: PUSH
45206: LD_INT 1
45208: ARRAY
45209: PPUSH
45210: LD_VAR 0 16
45214: PUSH
45215: LD_INT 2
45217: ARRAY
45218: PPUSH
45219: CALL_OW 111
// continue ;
45223: GO 44705
// end ; end ; r := GetDir ( tmp ) ;
45225: LD_ADDR_VAR 0 15
45229: PUSH
45230: LD_VAR 0 13
45234: PPUSH
45235: CALL_OW 254
45239: ST_TO_ADDR
// if r = 5 then
45240: LD_VAR 0 15
45244: PUSH
45245: LD_INT 5
45247: EQUAL
45248: IFFALSE 45258
// r := 0 ;
45250: LD_ADDR_VAR 0 15
45254: PUSH
45255: LD_INT 0
45257: ST_TO_ADDR
// for j = r to 5 do
45258: LD_ADDR_VAR 0 10
45262: PUSH
45263: DOUBLE
45264: LD_VAR 0 15
45268: DEC
45269: ST_TO_ADDR
45270: LD_INT 5
45272: PUSH
45273: FOR_TO
45274: IFFALSE 45390
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
45276: LD_ADDR_VAR 0 11
45280: PUSH
45281: LD_VAR 0 13
45285: PPUSH
45286: CALL_OW 250
45290: PPUSH
45291: LD_VAR 0 10
45295: PPUSH
45296: LD_INT 2
45298: PPUSH
45299: CALL_OW 272
45303: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
45304: LD_ADDR_VAR 0 12
45308: PUSH
45309: LD_VAR 0 13
45313: PPUSH
45314: CALL_OW 251
45318: PPUSH
45319: LD_VAR 0 10
45323: PPUSH
45324: LD_INT 2
45326: PPUSH
45327: CALL_OW 273
45331: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
45332: LD_VAR 0 11
45336: PPUSH
45337: LD_VAR 0 12
45341: PPUSH
45342: CALL_OW 488
45346: IFFALSE 45365
45348: PUSH
45349: LD_VAR 0 11
45353: PPUSH
45354: LD_VAR 0 12
45358: PPUSH
45359: CALL_OW 428
45363: NOT
45364: AND
45365: IFFALSE 45388
// begin ComMoveXY ( tmp , _x , _y ) ;
45367: LD_VAR 0 13
45371: PPUSH
45372: LD_VAR 0 11
45376: PPUSH
45377: LD_VAR 0 12
45381: PPUSH
45382: CALL_OW 111
// break ;
45386: GO 45390
// end ; end ;
45388: GO 45273
45390: POP
45391: POP
// end ; end ;
45392: GO 44705
45394: POP
45395: POP
// end ;
45396: LD_VAR 0 8
45400: RET
// export function BuildingTechInvented ( side , btype ) ; begin
45401: LD_INT 0
45403: PPUSH
// result := true ;
45404: LD_ADDR_VAR 0 3
45408: PUSH
45409: LD_INT 1
45411: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
45412: LD_VAR 0 2
45416: PUSH
45417: LD_INT 24
45419: DOUBLE
45420: EQUAL
45421: IFTRUE 45431
45423: LD_INT 33
45425: DOUBLE
45426: EQUAL
45427: IFTRUE 45431
45429: GO 45456
45431: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45432: LD_ADDR_VAR 0 3
45436: PUSH
45437: LD_INT 32
45439: PPUSH
45440: LD_VAR 0 1
45444: PPUSH
45445: CALL_OW 321
45449: PUSH
45450: LD_INT 2
45452: EQUAL
45453: ST_TO_ADDR
45454: GO 45772
45456: LD_INT 20
45458: DOUBLE
45459: EQUAL
45460: IFTRUE 45464
45462: GO 45489
45464: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45465: LD_ADDR_VAR 0 3
45469: PUSH
45470: LD_INT 6
45472: PPUSH
45473: LD_VAR 0 1
45477: PPUSH
45478: CALL_OW 321
45482: PUSH
45483: LD_INT 2
45485: EQUAL
45486: ST_TO_ADDR
45487: GO 45772
45489: LD_INT 22
45491: DOUBLE
45492: EQUAL
45493: IFTRUE 45503
45495: LD_INT 36
45497: DOUBLE
45498: EQUAL
45499: IFTRUE 45503
45501: GO 45528
45503: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45504: LD_ADDR_VAR 0 3
45508: PUSH
45509: LD_INT 15
45511: PPUSH
45512: LD_VAR 0 1
45516: PPUSH
45517: CALL_OW 321
45521: PUSH
45522: LD_INT 2
45524: EQUAL
45525: ST_TO_ADDR
45526: GO 45772
45528: LD_INT 30
45530: DOUBLE
45531: EQUAL
45532: IFTRUE 45536
45534: GO 45561
45536: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45537: LD_ADDR_VAR 0 3
45541: PUSH
45542: LD_INT 20
45544: PPUSH
45545: LD_VAR 0 1
45549: PPUSH
45550: CALL_OW 321
45554: PUSH
45555: LD_INT 2
45557: EQUAL
45558: ST_TO_ADDR
45559: GO 45772
45561: LD_INT 28
45563: DOUBLE
45564: EQUAL
45565: IFTRUE 45575
45567: LD_INT 21
45569: DOUBLE
45570: EQUAL
45571: IFTRUE 45575
45573: GO 45600
45575: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45576: LD_ADDR_VAR 0 3
45580: PUSH
45581: LD_INT 21
45583: PPUSH
45584: LD_VAR 0 1
45588: PPUSH
45589: CALL_OW 321
45593: PUSH
45594: LD_INT 2
45596: EQUAL
45597: ST_TO_ADDR
45598: GO 45772
45600: LD_INT 16
45602: DOUBLE
45603: EQUAL
45604: IFTRUE 45608
45606: GO 45633
45608: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45609: LD_ADDR_VAR 0 3
45613: PUSH
45614: LD_INT 84
45616: PPUSH
45617: LD_VAR 0 1
45621: PPUSH
45622: CALL_OW 321
45626: PUSH
45627: LD_INT 2
45629: EQUAL
45630: ST_TO_ADDR
45631: GO 45772
45633: LD_INT 19
45635: DOUBLE
45636: EQUAL
45637: IFTRUE 45647
45639: LD_INT 23
45641: DOUBLE
45642: EQUAL
45643: IFTRUE 45647
45645: GO 45672
45647: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45648: LD_ADDR_VAR 0 3
45652: PUSH
45653: LD_INT 83
45655: PPUSH
45656: LD_VAR 0 1
45660: PPUSH
45661: CALL_OW 321
45665: PUSH
45666: LD_INT 2
45668: EQUAL
45669: ST_TO_ADDR
45670: GO 45772
45672: LD_INT 17
45674: DOUBLE
45675: EQUAL
45676: IFTRUE 45680
45678: GO 45705
45680: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45681: LD_ADDR_VAR 0 3
45685: PUSH
45686: LD_INT 39
45688: PPUSH
45689: LD_VAR 0 1
45693: PPUSH
45694: CALL_OW 321
45698: PUSH
45699: LD_INT 2
45701: EQUAL
45702: ST_TO_ADDR
45703: GO 45772
45705: LD_INT 18
45707: DOUBLE
45708: EQUAL
45709: IFTRUE 45713
45711: GO 45738
45713: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45714: LD_ADDR_VAR 0 3
45718: PUSH
45719: LD_INT 40
45721: PPUSH
45722: LD_VAR 0 1
45726: PPUSH
45727: CALL_OW 321
45731: PUSH
45732: LD_INT 2
45734: EQUAL
45735: ST_TO_ADDR
45736: GO 45772
45738: LD_INT 27
45740: DOUBLE
45741: EQUAL
45742: IFTRUE 45746
45744: GO 45771
45746: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
45747: LD_ADDR_VAR 0 3
45751: PUSH
45752: LD_INT 35
45754: PPUSH
45755: LD_VAR 0 1
45759: PPUSH
45760: CALL_OW 321
45764: PUSH
45765: LD_INT 2
45767: EQUAL
45768: ST_TO_ADDR
45769: GO 45772
45771: POP
// end ;
45772: LD_VAR 0 3
45776: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
45777: LD_INT 0
45779: PPUSH
45780: PPUSH
45781: PPUSH
45782: PPUSH
45783: PPUSH
45784: PPUSH
45785: PPUSH
45786: PPUSH
45787: PPUSH
45788: PPUSH
45789: PPUSH
// result := false ;
45790: LD_ADDR_VAR 0 6
45794: PUSH
45795: LD_INT 0
45797: ST_TO_ADDR
// if btype = b_depot then
45798: LD_VAR 0 2
45802: PUSH
45803: LD_INT 0
45805: EQUAL
45806: IFFALSE 45818
// begin result := true ;
45808: LD_ADDR_VAR 0 6
45812: PUSH
45813: LD_INT 1
45815: ST_TO_ADDR
// exit ;
45816: GO 46672
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45818: LD_VAR 0 1
45822: NOT
45823: IFTRUE 45848
45825: PUSH
45826: LD_VAR 0 1
45830: PPUSH
45831: CALL_OW 266
45835: PUSH
45836: LD_INT 0
45838: PUSH
45839: LD_INT 1
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: IN
45846: NOT
45847: OR
45848: IFTRUE 45857
45850: PUSH
45851: LD_VAR 0 2
45855: NOT
45856: OR
45857: IFTRUE 45893
45859: PUSH
45860: LD_VAR 0 5
45864: PUSH
45865: LD_INT 0
45867: PUSH
45868: LD_INT 1
45870: PUSH
45871: LD_INT 2
45873: PUSH
45874: LD_INT 3
45876: PUSH
45877: LD_INT 4
45879: PUSH
45880: LD_INT 5
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: IN
45891: NOT
45892: OR
45893: IFTRUE 45912
45895: PUSH
45896: LD_VAR 0 3
45900: PPUSH
45901: LD_VAR 0 4
45905: PPUSH
45906: CALL_OW 488
45910: NOT
45911: OR
45912: IFFALSE 45916
// exit ;
45914: GO 46672
// side := GetSide ( depot ) ;
45916: LD_ADDR_VAR 0 9
45920: PUSH
45921: LD_VAR 0 1
45925: PPUSH
45926: CALL_OW 255
45930: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
45931: LD_VAR 0 9
45935: PPUSH
45936: LD_VAR 0 2
45940: PPUSH
45941: CALL 45401 0 2
45945: NOT
45946: IFFALSE 45950
// exit ;
45948: GO 46672
// pom := GetBase ( depot ) ;
45950: LD_ADDR_VAR 0 10
45954: PUSH
45955: LD_VAR 0 1
45959: PPUSH
45960: CALL_OW 274
45964: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45965: LD_ADDR_VAR 0 11
45969: PUSH
45970: LD_VAR 0 2
45974: PPUSH
45975: LD_VAR 0 1
45979: PPUSH
45980: CALL_OW 248
45984: PPUSH
45985: CALL_OW 450
45989: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45990: LD_VAR 0 10
45994: PPUSH
45995: LD_INT 1
45997: PPUSH
45998: CALL_OW 275
46002: PUSH
46003: LD_VAR 0 11
46007: PUSH
46008: LD_INT 1
46010: ARRAY
46011: GREATEREQUAL
46012: IFFALSE 46038
46014: PUSH
46015: LD_VAR 0 10
46019: PPUSH
46020: LD_INT 2
46022: PPUSH
46023: CALL_OW 275
46027: PUSH
46028: LD_VAR 0 11
46032: PUSH
46033: LD_INT 2
46035: ARRAY
46036: GREATEREQUAL
46037: AND
46038: IFFALSE 46064
46040: PUSH
46041: LD_VAR 0 10
46045: PPUSH
46046: LD_INT 3
46048: PPUSH
46049: CALL_OW 275
46053: PUSH
46054: LD_VAR 0 11
46058: PUSH
46059: LD_INT 3
46061: ARRAY
46062: GREATEREQUAL
46063: AND
46064: NOT
46065: IFFALSE 46069
// exit ;
46067: GO 46672
// if GetBType ( depot ) = b_depot then
46069: LD_VAR 0 1
46073: PPUSH
46074: CALL_OW 266
46078: PUSH
46079: LD_INT 0
46081: EQUAL
46082: IFFALSE 46094
// dist := 28 else
46084: LD_ADDR_VAR 0 14
46088: PUSH
46089: LD_INT 28
46091: ST_TO_ADDR
46092: GO 46102
// dist := 36 ;
46094: LD_ADDR_VAR 0 14
46098: PUSH
46099: LD_INT 36
46101: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
46102: LD_VAR 0 1
46106: PPUSH
46107: LD_VAR 0 3
46111: PPUSH
46112: LD_VAR 0 4
46116: PPUSH
46117: CALL_OW 297
46121: PUSH
46122: LD_VAR 0 14
46126: GREATER
46127: IFFALSE 46131
// exit ;
46129: GO 46672
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
46131: LD_ADDR_VAR 0 12
46135: PUSH
46136: LD_VAR 0 2
46140: PPUSH
46141: LD_VAR 0 3
46145: PPUSH
46146: LD_VAR 0 4
46150: PPUSH
46151: LD_VAR 0 5
46155: PPUSH
46156: LD_VAR 0 1
46160: PPUSH
46161: CALL_OW 248
46165: PPUSH
46166: LD_INT 0
46168: PPUSH
46169: CALL 46677 0 6
46173: ST_TO_ADDR
// if not hexes then
46174: LD_VAR 0 12
46178: NOT
46179: IFFALSE 46183
// exit ;
46181: GO 46672
// hex := GetHexInfo ( x , y ) ;
46183: LD_ADDR_VAR 0 15
46187: PUSH
46188: LD_VAR 0 3
46192: PPUSH
46193: LD_VAR 0 4
46197: PPUSH
46198: CALL_OW 546
46202: ST_TO_ADDR
// if hex [ 1 ] then
46203: LD_VAR 0 15
46207: PUSH
46208: LD_INT 1
46210: ARRAY
46211: IFFALSE 46215
// exit ;
46213: GO 46672
// height := hex [ 2 ] ;
46215: LD_ADDR_VAR 0 13
46219: PUSH
46220: LD_VAR 0 15
46224: PUSH
46225: LD_INT 2
46227: ARRAY
46228: ST_TO_ADDR
// for i = 1 to hexes do
46229: LD_ADDR_VAR 0 7
46233: PUSH
46234: DOUBLE
46235: LD_INT 1
46237: DEC
46238: ST_TO_ADDR
46239: LD_VAR 0 12
46243: PUSH
46244: FOR_TO
46245: IFFALSE 46589
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
46247: LD_VAR 0 12
46251: PUSH
46252: LD_VAR 0 7
46256: ARRAY
46257: PUSH
46258: LD_INT 1
46260: ARRAY
46261: PPUSH
46262: LD_VAR 0 12
46266: PUSH
46267: LD_VAR 0 7
46271: ARRAY
46272: PUSH
46273: LD_INT 2
46275: ARRAY
46276: PPUSH
46277: CALL_OW 488
46281: NOT
46282: IFTRUE 46324
46284: PUSH
46285: LD_VAR 0 12
46289: PUSH
46290: LD_VAR 0 7
46294: ARRAY
46295: PUSH
46296: LD_INT 1
46298: ARRAY
46299: PPUSH
46300: LD_VAR 0 12
46304: PUSH
46305: LD_VAR 0 7
46309: ARRAY
46310: PUSH
46311: LD_INT 2
46313: ARRAY
46314: PPUSH
46315: CALL_OW 428
46319: PUSH
46320: LD_INT 0
46322: GREATER
46323: OR
46324: IFTRUE 46362
46326: PUSH
46327: LD_VAR 0 12
46331: PUSH
46332: LD_VAR 0 7
46336: ARRAY
46337: PUSH
46338: LD_INT 1
46340: ARRAY
46341: PPUSH
46342: LD_VAR 0 12
46346: PUSH
46347: LD_VAR 0 7
46351: ARRAY
46352: PUSH
46353: LD_INT 2
46355: ARRAY
46356: PPUSH
46357: CALL_OW 351
46361: OR
46362: IFFALSE 46368
// exit ;
46364: POP
46365: POP
46366: GO 46672
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46368: LD_ADDR_VAR 0 8
46372: PUSH
46373: LD_VAR 0 12
46377: PUSH
46378: LD_VAR 0 7
46382: ARRAY
46383: PUSH
46384: LD_INT 1
46386: ARRAY
46387: PPUSH
46388: LD_VAR 0 12
46392: PUSH
46393: LD_VAR 0 7
46397: ARRAY
46398: PUSH
46399: LD_INT 2
46401: ARRAY
46402: PPUSH
46403: CALL_OW 546
46407: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46408: LD_VAR 0 8
46412: PUSH
46413: LD_INT 1
46415: ARRAY
46416: IFTRUE 46438
46418: PUSH
46419: LD_VAR 0 8
46423: PUSH
46424: LD_INT 2
46426: ARRAY
46427: PUSH
46428: LD_VAR 0 13
46432: PUSH
46433: LD_INT 2
46435: PLUS
46436: GREATER
46437: OR
46438: IFTRUE 46460
46440: PUSH
46441: LD_VAR 0 8
46445: PUSH
46446: LD_INT 2
46448: ARRAY
46449: PUSH
46450: LD_VAR 0 13
46454: PUSH
46455: LD_INT 2
46457: MINUS
46458: LESS
46459: OR
46460: IFTRUE 46528
46462: PUSH
46463: LD_VAR 0 8
46467: PUSH
46468: LD_INT 3
46470: ARRAY
46471: PUSH
46472: LD_INT 0
46474: PUSH
46475: LD_INT 8
46477: PUSH
46478: LD_INT 9
46480: PUSH
46481: LD_INT 10
46483: PUSH
46484: LD_INT 11
46486: PUSH
46487: LD_INT 12
46489: PUSH
46490: LD_INT 13
46492: PUSH
46493: LD_INT 16
46495: PUSH
46496: LD_INT 17
46498: PUSH
46499: LD_INT 18
46501: PUSH
46502: LD_INT 19
46504: PUSH
46505: LD_INT 20
46507: PUSH
46508: LD_INT 21
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: IN
46526: NOT
46527: OR
46528: IFTRUE 46541
46530: PUSH
46531: LD_VAR 0 8
46535: PUSH
46536: LD_INT 5
46538: ARRAY
46539: NOT
46540: OR
46541: IFTRUE 46581
46543: PUSH
46544: LD_VAR 0 8
46548: PUSH
46549: LD_INT 6
46551: ARRAY
46552: PUSH
46553: LD_INT 1
46555: PUSH
46556: LD_INT 2
46558: PUSH
46559: LD_INT 7
46561: PUSH
46562: LD_INT 9
46564: PUSH
46565: LD_INT 10
46567: PUSH
46568: LD_INT 11
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: IN
46579: NOT
46580: OR
46581: IFFALSE 46587
// exit ;
46583: POP
46584: POP
46585: GO 46672
// end ;
46587: GO 46244
46589: POP
46590: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46591: LD_VAR 0 9
46595: PPUSH
46596: LD_VAR 0 3
46600: PPUSH
46601: LD_VAR 0 4
46605: PPUSH
46606: LD_INT 20
46608: PPUSH
46609: CALL 38491 0 4
46613: PUSH
46614: LD_INT 4
46616: ARRAY
46617: IFFALSE 46621
// exit ;
46619: GO 46672
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46621: LD_VAR 0 2
46625: PUSH
46626: LD_INT 29
46628: PUSH
46629: LD_INT 30
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: IN
46636: IFFALSE 46660
46638: PUSH
46639: LD_VAR 0 3
46643: PPUSH
46644: LD_VAR 0 4
46648: PPUSH
46649: LD_VAR 0 9
46653: PPUSH
46654: CALL_OW 440
46658: NOT
46659: AND
46660: IFFALSE 46664
// exit ;
46662: GO 46672
// result := true ;
46664: LD_ADDR_VAR 0 6
46668: PUSH
46669: LD_INT 1
46671: ST_TO_ADDR
// end ;
46672: LD_VAR 0 6
46676: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46677: LD_INT 0
46679: PPUSH
46680: PPUSH
46681: PPUSH
46682: PPUSH
46683: PPUSH
46684: PPUSH
46685: PPUSH
46686: PPUSH
46687: PPUSH
46688: PPUSH
46689: PPUSH
46690: PPUSH
46691: PPUSH
46692: PPUSH
46693: PPUSH
46694: PPUSH
46695: PPUSH
46696: PPUSH
46697: PPUSH
46698: PPUSH
46699: PPUSH
46700: PPUSH
46701: PPUSH
46702: PPUSH
46703: PPUSH
46704: PPUSH
46705: PPUSH
46706: PPUSH
46707: PPUSH
46708: PPUSH
46709: PPUSH
46710: PPUSH
46711: PPUSH
46712: PPUSH
46713: PPUSH
46714: PPUSH
46715: PPUSH
46716: PPUSH
46717: PPUSH
46718: PPUSH
46719: PPUSH
46720: PPUSH
46721: PPUSH
46722: PPUSH
46723: PPUSH
46724: PPUSH
46725: PPUSH
46726: PPUSH
46727: PPUSH
46728: PPUSH
46729: PPUSH
46730: PPUSH
46731: PPUSH
46732: PPUSH
46733: PPUSH
46734: PPUSH
46735: PPUSH
46736: PPUSH
// result = [ ] ;
46737: LD_ADDR_VAR 0 7
46741: PUSH
46742: EMPTY
46743: ST_TO_ADDR
// temp_list = [ ] ;
46744: LD_ADDR_VAR 0 9
46748: PUSH
46749: EMPTY
46750: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46751: LD_VAR 0 4
46755: PUSH
46756: LD_INT 0
46758: PUSH
46759: LD_INT 1
46761: PUSH
46762: LD_INT 2
46764: PUSH
46765: LD_INT 3
46767: PUSH
46768: LD_INT 4
46770: PUSH
46771: LD_INT 5
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: IN
46782: NOT
46783: IFTRUE 46826
46785: PUSH
46786: LD_VAR 0 1
46790: PUSH
46791: LD_INT 0
46793: PUSH
46794: LD_INT 1
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: IN
46801: IFFALSE 46825
46803: PUSH
46804: LD_VAR 0 5
46808: PUSH
46809: LD_INT 1
46811: PUSH
46812: LD_INT 2
46814: PUSH
46815: LD_INT 3
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: LIST
46822: IN
46823: NOT
46824: AND
46825: OR
46826: IFFALSE 46830
// exit ;
46828: GO 65229
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46830: LD_VAR 0 1
46834: PUSH
46835: LD_INT 6
46837: PUSH
46838: LD_INT 7
46840: PUSH
46841: LD_INT 8
46843: PUSH
46844: LD_INT 13
46846: PUSH
46847: LD_INT 12
46849: PUSH
46850: LD_INT 15
46852: PUSH
46853: LD_INT 11
46855: PUSH
46856: LD_INT 14
46858: PUSH
46859: LD_INT 10
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: IN
46873: IFFALSE 46883
// btype = b_lab ;
46875: LD_ADDR_VAR 0 1
46879: PUSH
46880: LD_INT 6
46882: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46883: LD_VAR 0 6
46887: PUSH
46888: LD_INT 0
46890: PUSH
46891: LD_INT 1
46893: PUSH
46894: LD_INT 2
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: LIST
46901: IN
46902: NOT
46903: IFTRUE 46971
46905: PUSH
46906: LD_VAR 0 1
46910: PUSH
46911: LD_INT 0
46913: PUSH
46914: LD_INT 1
46916: PUSH
46917: LD_INT 2
46919: PUSH
46920: LD_INT 3
46922: PUSH
46923: LD_INT 6
46925: PUSH
46926: LD_INT 36
46928: PUSH
46929: LD_INT 4
46931: PUSH
46932: LD_INT 5
46934: PUSH
46935: LD_INT 31
46937: PUSH
46938: LD_INT 32
46940: PUSH
46941: LD_INT 33
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: IN
46957: NOT
46958: IFFALSE 46970
46960: PUSH
46961: LD_VAR 0 6
46965: PUSH
46966: LD_INT 1
46968: EQUAL
46969: AND
46970: OR
46971: IFTRUE 47003
46973: PUSH
46974: LD_VAR 0 1
46978: PUSH
46979: LD_INT 2
46981: PUSH
46982: LD_INT 3
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: IN
46989: NOT
46990: IFFALSE 47002
46992: PUSH
46993: LD_VAR 0 6
46997: PUSH
46998: LD_INT 2
47000: EQUAL
47001: AND
47002: OR
47003: IFFALSE 47013
// mode = 0 ;
47005: LD_ADDR_VAR 0 6
47009: PUSH
47010: LD_INT 0
47012: ST_TO_ADDR
// case mode of 0 :
47013: LD_VAR 0 6
47017: PUSH
47018: LD_INT 0
47020: DOUBLE
47021: EQUAL
47022: IFTRUE 47026
47024: GO 58479
47026: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47027: LD_ADDR_VAR 0 11
47031: PUSH
47032: LD_INT 0
47034: PUSH
47035: LD_INT 0
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 0
47044: PUSH
47045: LD_INT 1
47047: NEG
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 1
47055: PUSH
47056: LD_INT 0
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 1
47065: PUSH
47066: LD_INT 1
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 0
47075: PUSH
47076: LD_INT 1
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 1
47085: NEG
47086: PUSH
47087: LD_INT 0
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: LD_INT 1
47100: NEG
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 1
47108: NEG
47109: PUSH
47110: LD_INT 2
47112: NEG
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 0
47120: PUSH
47121: LD_INT 2
47123: NEG
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 1
47131: PUSH
47132: LD_INT 1
47134: NEG
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 1
47142: PUSH
47143: LD_INT 2
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 0
47152: PUSH
47153: LD_INT 2
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 1
47162: NEG
47163: PUSH
47164: LD_INT 1
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 1
47173: PUSH
47174: LD_INT 3
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 0
47183: PUSH
47184: LD_INT 3
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 1
47193: NEG
47194: PUSH
47195: LD_INT 2
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47220: LD_ADDR_VAR 0 12
47224: PUSH
47225: LD_INT 0
47227: PUSH
47228: LD_INT 0
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 0
47237: PUSH
47238: LD_INT 1
47240: NEG
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 1
47248: PUSH
47249: LD_INT 0
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 1
47258: PUSH
47259: LD_INT 1
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 0
47268: PUSH
47269: LD_INT 1
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 1
47278: NEG
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 1
47289: NEG
47290: PUSH
47291: LD_INT 1
47293: NEG
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 1
47301: PUSH
47302: LD_INT 1
47304: NEG
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 2
47312: PUSH
47313: LD_INT 0
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 2
47322: PUSH
47323: LD_INT 1
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 1
47332: NEG
47333: PUSH
47334: LD_INT 1
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 2
47343: NEG
47344: PUSH
47345: LD_INT 0
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 2
47354: NEG
47355: PUSH
47356: LD_INT 1
47358: NEG
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 2
47366: NEG
47367: PUSH
47368: LD_INT 1
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 3
47377: NEG
47378: PUSH
47379: LD_INT 0
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 3
47388: NEG
47389: PUSH
47390: LD_INT 1
47392: NEG
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47416: LD_ADDR_VAR 0 13
47420: PUSH
47421: LD_INT 0
47423: PUSH
47424: LD_INT 0
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 0
47433: PUSH
47434: LD_INT 1
47436: NEG
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 1
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 1
47454: PUSH
47455: LD_INT 1
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 0
47464: PUSH
47465: LD_INT 1
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 1
47474: NEG
47475: PUSH
47476: LD_INT 0
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 1
47485: NEG
47486: PUSH
47487: LD_INT 1
47489: NEG
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 1
47497: NEG
47498: PUSH
47499: LD_INT 2
47501: NEG
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 2
47509: PUSH
47510: LD_INT 1
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 2
47519: PUSH
47520: LD_INT 2
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 1
47529: PUSH
47530: LD_INT 2
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 2
47539: NEG
47540: PUSH
47541: LD_INT 1
47543: NEG
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 2
47551: NEG
47552: PUSH
47553: LD_INT 2
47555: NEG
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 2
47563: NEG
47564: PUSH
47565: LD_INT 3
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 3
47575: NEG
47576: PUSH
47577: LD_INT 2
47579: NEG
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 3
47587: NEG
47588: PUSH
47589: LD_INT 3
47591: NEG
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47615: LD_ADDR_VAR 0 14
47619: PUSH
47620: LD_INT 0
47622: PUSH
47623: LD_INT 0
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 0
47632: PUSH
47633: LD_INT 1
47635: NEG
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 1
47643: PUSH
47644: LD_INT 0
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 1
47653: PUSH
47654: LD_INT 1
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 0
47663: PUSH
47664: LD_INT 1
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 1
47673: NEG
47674: PUSH
47675: LD_INT 0
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 1
47684: NEG
47685: PUSH
47686: LD_INT 1
47688: NEG
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 1
47696: NEG
47697: PUSH
47698: LD_INT 2
47700: NEG
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 0
47708: PUSH
47709: LD_INT 2
47711: NEG
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 1
47719: PUSH
47720: LD_INT 1
47722: NEG
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 1
47730: PUSH
47731: LD_INT 2
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 0
47740: PUSH
47741: LD_INT 2
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 1
47750: NEG
47751: PUSH
47752: LD_INT 1
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 1
47761: NEG
47762: PUSH
47763: LD_INT 3
47765: NEG
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 0
47773: PUSH
47774: LD_INT 3
47776: NEG
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 1
47784: PUSH
47785: LD_INT 2
47787: NEG
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47811: LD_ADDR_VAR 0 15
47815: PUSH
47816: LD_INT 0
47818: PUSH
47819: LD_INT 0
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 0
47828: PUSH
47829: LD_INT 1
47831: NEG
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 1
47839: PUSH
47840: LD_INT 0
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 1
47849: PUSH
47850: LD_INT 1
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 0
47859: PUSH
47860: LD_INT 1
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 1
47869: NEG
47870: PUSH
47871: LD_INT 0
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 1
47880: NEG
47881: PUSH
47882: LD_INT 1
47884: NEG
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 1
47892: PUSH
47893: LD_INT 1
47895: NEG
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 2
47903: PUSH
47904: LD_INT 0
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 2
47913: PUSH
47914: LD_INT 1
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 1
47923: NEG
47924: PUSH
47925: LD_INT 1
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 2
47934: NEG
47935: PUSH
47936: LD_INT 0
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 2
47945: NEG
47946: PUSH
47947: LD_INT 1
47949: NEG
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 2
47957: PUSH
47958: LD_INT 1
47960: NEG
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 3
47968: PUSH
47969: LD_INT 0
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 3
47978: PUSH
47979: LD_INT 1
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48004: LD_ADDR_VAR 0 16
48008: PUSH
48009: LD_INT 0
48011: PUSH
48012: LD_INT 0
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 0
48021: PUSH
48022: LD_INT 1
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 1
48032: PUSH
48033: LD_INT 0
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 1
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 0
48052: PUSH
48053: LD_INT 1
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 1
48062: NEG
48063: PUSH
48064: LD_INT 0
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 1
48073: NEG
48074: PUSH
48075: LD_INT 1
48077: NEG
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 1
48085: NEG
48086: PUSH
48087: LD_INT 2
48089: NEG
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 2
48097: PUSH
48098: LD_INT 1
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 2
48107: PUSH
48108: LD_INT 2
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 1
48117: PUSH
48118: LD_INT 2
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 2
48127: NEG
48128: PUSH
48129: LD_INT 1
48131: NEG
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 2
48139: NEG
48140: PUSH
48141: LD_INT 2
48143: NEG
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 3
48151: PUSH
48152: LD_INT 2
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 3
48161: PUSH
48162: LD_INT 3
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 2
48171: PUSH
48172: LD_INT 3
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48197: LD_ADDR_VAR 0 17
48201: PUSH
48202: LD_INT 0
48204: PUSH
48205: LD_INT 0
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 0
48214: PUSH
48215: LD_INT 1
48217: NEG
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 1
48225: PUSH
48226: LD_INT 0
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 1
48235: PUSH
48236: LD_INT 1
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 0
48245: PUSH
48246: LD_INT 1
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 1
48255: NEG
48256: PUSH
48257: LD_INT 0
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 1
48266: NEG
48267: PUSH
48268: LD_INT 1
48270: NEG
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 1
48278: NEG
48279: PUSH
48280: LD_INT 2
48282: NEG
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 0
48290: PUSH
48291: LD_INT 2
48293: NEG
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 1
48301: PUSH
48302: LD_INT 1
48304: NEG
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 2
48312: PUSH
48313: LD_INT 0
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 2
48322: PUSH
48323: LD_INT 1
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 2
48332: PUSH
48333: LD_INT 2
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 1
48342: PUSH
48343: LD_INT 2
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 0
48352: PUSH
48353: LD_INT 2
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 1
48362: NEG
48363: PUSH
48364: LD_INT 1
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 2
48373: NEG
48374: PUSH
48375: LD_INT 0
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 2
48384: NEG
48385: PUSH
48386: LD_INT 1
48388: NEG
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 2
48396: NEG
48397: PUSH
48398: LD_INT 2
48400: NEG
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48427: LD_ADDR_VAR 0 18
48431: PUSH
48432: LD_INT 0
48434: PUSH
48435: LD_INT 0
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 0
48444: PUSH
48445: LD_INT 1
48447: NEG
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 1
48455: PUSH
48456: LD_INT 0
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 1
48465: PUSH
48466: LD_INT 1
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 0
48475: PUSH
48476: LD_INT 1
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 1
48485: NEG
48486: PUSH
48487: LD_INT 0
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 1
48496: NEG
48497: PUSH
48498: LD_INT 1
48500: NEG
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 1
48508: NEG
48509: PUSH
48510: LD_INT 2
48512: NEG
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 0
48520: PUSH
48521: LD_INT 2
48523: NEG
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 1
48531: PUSH
48532: LD_INT 1
48534: NEG
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 2
48542: PUSH
48543: LD_INT 0
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 2
48552: PUSH
48553: LD_INT 1
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 2
48562: PUSH
48563: LD_INT 2
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 1
48572: PUSH
48573: LD_INT 2
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 0
48582: PUSH
48583: LD_INT 2
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 1
48592: NEG
48593: PUSH
48594: LD_INT 1
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 2
48603: NEG
48604: PUSH
48605: LD_INT 0
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 2
48614: NEG
48615: PUSH
48616: LD_INT 1
48618: NEG
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 2
48626: NEG
48627: PUSH
48628: LD_INT 2
48630: NEG
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48657: LD_ADDR_VAR 0 19
48661: PUSH
48662: LD_INT 0
48664: PUSH
48665: LD_INT 0
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 0
48674: PUSH
48675: LD_INT 1
48677: NEG
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 1
48685: PUSH
48686: LD_INT 0
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 1
48695: PUSH
48696: LD_INT 1
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 0
48705: PUSH
48706: LD_INT 1
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 1
48715: NEG
48716: PUSH
48717: LD_INT 0
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 1
48726: NEG
48727: PUSH
48728: LD_INT 1
48730: NEG
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 1
48738: NEG
48739: PUSH
48740: LD_INT 2
48742: NEG
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 0
48750: PUSH
48751: LD_INT 2
48753: NEG
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 1
48761: PUSH
48762: LD_INT 1
48764: NEG
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 2
48772: PUSH
48773: LD_INT 0
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 2
48782: PUSH
48783: LD_INT 1
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 2
48792: PUSH
48793: LD_INT 2
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 1
48802: PUSH
48803: LD_INT 2
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 0
48812: PUSH
48813: LD_INT 2
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 1
48822: NEG
48823: PUSH
48824: LD_INT 1
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 2
48833: NEG
48834: PUSH
48835: LD_INT 0
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 2
48844: NEG
48845: PUSH
48846: LD_INT 1
48848: NEG
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 2
48856: NEG
48857: PUSH
48858: LD_INT 2
48860: NEG
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48887: LD_ADDR_VAR 0 20
48891: PUSH
48892: LD_INT 0
48894: PUSH
48895: LD_INT 0
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 0
48904: PUSH
48905: LD_INT 1
48907: NEG
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 1
48915: PUSH
48916: LD_INT 0
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 1
48925: PUSH
48926: LD_INT 1
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 0
48935: PUSH
48936: LD_INT 1
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 1
48945: NEG
48946: PUSH
48947: LD_INT 0
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 1
48956: NEG
48957: PUSH
48958: LD_INT 1
48960: NEG
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 1
48968: NEG
48969: PUSH
48970: LD_INT 2
48972: NEG
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 0
48980: PUSH
48981: LD_INT 2
48983: NEG
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 1
48991: PUSH
48992: LD_INT 1
48994: NEG
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 2
49002: PUSH
49003: LD_INT 0
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 2
49012: PUSH
49013: LD_INT 1
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 2
49022: PUSH
49023: LD_INT 2
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 1
49032: PUSH
49033: LD_INT 2
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 0
49042: PUSH
49043: LD_INT 2
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 1
49052: NEG
49053: PUSH
49054: LD_INT 1
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 2
49063: NEG
49064: PUSH
49065: LD_INT 0
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 2
49074: NEG
49075: PUSH
49076: LD_INT 1
49078: NEG
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 2
49086: NEG
49087: PUSH
49088: LD_INT 2
49090: NEG
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49117: LD_ADDR_VAR 0 21
49121: PUSH
49122: LD_INT 0
49124: PUSH
49125: LD_INT 0
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 0
49134: PUSH
49135: LD_INT 1
49137: NEG
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 1
49145: PUSH
49146: LD_INT 0
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 1
49155: PUSH
49156: LD_INT 1
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 0
49165: PUSH
49166: LD_INT 1
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 1
49175: NEG
49176: PUSH
49177: LD_INT 0
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 1
49186: NEG
49187: PUSH
49188: LD_INT 1
49190: NEG
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 1
49198: NEG
49199: PUSH
49200: LD_INT 2
49202: NEG
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 0
49210: PUSH
49211: LD_INT 2
49213: NEG
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 1
49221: PUSH
49222: LD_INT 1
49224: NEG
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 2
49232: PUSH
49233: LD_INT 0
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 2
49242: PUSH
49243: LD_INT 1
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 2
49252: PUSH
49253: LD_INT 2
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 1
49262: PUSH
49263: LD_INT 2
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 0
49272: PUSH
49273: LD_INT 2
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 1
49282: NEG
49283: PUSH
49284: LD_INT 1
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 2
49293: NEG
49294: PUSH
49295: LD_INT 0
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 2
49304: NEG
49305: PUSH
49306: LD_INT 1
49308: NEG
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 2
49316: NEG
49317: PUSH
49318: LD_INT 2
49320: NEG
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49347: LD_ADDR_VAR 0 22
49351: PUSH
49352: LD_INT 0
49354: PUSH
49355: LD_INT 0
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 0
49364: PUSH
49365: LD_INT 1
49367: NEG
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 1
49375: PUSH
49376: LD_INT 0
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 1
49385: PUSH
49386: LD_INT 1
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 0
49395: PUSH
49396: LD_INT 1
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 1
49405: NEG
49406: PUSH
49407: LD_INT 0
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 1
49416: NEG
49417: PUSH
49418: LD_INT 1
49420: NEG
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 1
49428: NEG
49429: PUSH
49430: LD_INT 2
49432: NEG
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 0
49440: PUSH
49441: LD_INT 2
49443: NEG
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 1
49451: PUSH
49452: LD_INT 1
49454: NEG
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 2
49462: PUSH
49463: LD_INT 0
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 2
49472: PUSH
49473: LD_INT 1
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 2
49482: PUSH
49483: LD_INT 2
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 1
49492: PUSH
49493: LD_INT 2
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 0
49502: PUSH
49503: LD_INT 2
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 1
49512: NEG
49513: PUSH
49514: LD_INT 1
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 2
49523: NEG
49524: PUSH
49525: LD_INT 0
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 2
49534: NEG
49535: PUSH
49536: LD_INT 1
49538: NEG
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 2
49546: NEG
49547: PUSH
49548: LD_INT 2
49550: NEG
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49577: LD_ADDR_VAR 0 23
49581: PUSH
49582: LD_INT 0
49584: PUSH
49585: LD_INT 0
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 0
49594: PUSH
49595: LD_INT 1
49597: NEG
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 1
49605: PUSH
49606: LD_INT 0
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 1
49615: PUSH
49616: LD_INT 1
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 0
49625: PUSH
49626: LD_INT 1
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 1
49635: NEG
49636: PUSH
49637: LD_INT 0
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 1
49646: NEG
49647: PUSH
49648: LD_INT 1
49650: NEG
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 1
49658: NEG
49659: PUSH
49660: LD_INT 2
49662: NEG
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 0
49670: PUSH
49671: LD_INT 2
49673: NEG
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 1
49681: PUSH
49682: LD_INT 1
49684: NEG
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 2
49692: PUSH
49693: LD_INT 0
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 2
49702: PUSH
49703: LD_INT 1
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 2
49712: PUSH
49713: LD_INT 2
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 1
49722: PUSH
49723: LD_INT 2
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 0
49732: PUSH
49733: LD_INT 2
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 1
49742: NEG
49743: PUSH
49744: LD_INT 1
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 2
49753: NEG
49754: PUSH
49755: LD_INT 0
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 2
49764: NEG
49765: PUSH
49766: LD_INT 1
49768: NEG
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 2
49776: NEG
49777: PUSH
49778: LD_INT 2
49780: NEG
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 2
49788: NEG
49789: PUSH
49790: LD_INT 3
49792: NEG
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 1
49800: NEG
49801: PUSH
49802: LD_INT 3
49804: NEG
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 1
49812: PUSH
49813: LD_INT 2
49815: NEG
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 2
49823: PUSH
49824: LD_INT 1
49826: NEG
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49857: LD_ADDR_VAR 0 24
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: LD_INT 0
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 0
49874: PUSH
49875: LD_INT 1
49877: NEG
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 1
49885: PUSH
49886: LD_INT 0
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 1
49895: PUSH
49896: LD_INT 1
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 0
49905: PUSH
49906: LD_INT 1
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 1
49915: NEG
49916: PUSH
49917: LD_INT 0
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 1
49926: NEG
49927: PUSH
49928: LD_INT 1
49930: NEG
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 1
49938: NEG
49939: PUSH
49940: LD_INT 2
49942: NEG
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: LD_INT 2
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 1
49961: PUSH
49962: LD_INT 1
49964: NEG
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 2
49972: PUSH
49973: LD_INT 0
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 2
49982: PUSH
49983: LD_INT 1
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 2
49992: PUSH
49993: LD_INT 2
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 1
50002: PUSH
50003: LD_INT 2
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 0
50012: PUSH
50013: LD_INT 2
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 1
50022: NEG
50023: PUSH
50024: LD_INT 1
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 2
50033: NEG
50034: PUSH
50035: LD_INT 0
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 2
50044: NEG
50045: PUSH
50046: LD_INT 1
50048: NEG
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 2
50056: NEG
50057: PUSH
50058: LD_INT 2
50060: NEG
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 1
50068: PUSH
50069: LD_INT 2
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 2
50079: PUSH
50080: LD_INT 1
50082: NEG
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 3
50090: PUSH
50091: LD_INT 1
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 3
50100: PUSH
50101: LD_INT 2
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
50133: LD_ADDR_VAR 0 25
50137: PUSH
50138: LD_INT 0
50140: PUSH
50141: LD_INT 0
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 0
50150: PUSH
50151: LD_INT 1
50153: NEG
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 1
50161: PUSH
50162: LD_INT 0
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 1
50171: PUSH
50172: LD_INT 1
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 0
50181: PUSH
50182: LD_INT 1
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 1
50191: NEG
50192: PUSH
50193: LD_INT 0
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 1
50202: NEG
50203: PUSH
50204: LD_INT 1
50206: NEG
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 1
50214: NEG
50215: PUSH
50216: LD_INT 2
50218: NEG
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 0
50226: PUSH
50227: LD_INT 2
50229: NEG
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 1
50237: PUSH
50238: LD_INT 1
50240: NEG
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 2
50248: PUSH
50249: LD_INT 0
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 2
50258: PUSH
50259: LD_INT 1
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 2
50268: PUSH
50269: LD_INT 2
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 1
50278: PUSH
50279: LD_INT 2
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 0
50288: PUSH
50289: LD_INT 2
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 1
50298: NEG
50299: PUSH
50300: LD_INT 1
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 2
50309: NEG
50310: PUSH
50311: LD_INT 0
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 2
50320: NEG
50321: PUSH
50322: LD_INT 1
50324: NEG
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 2
50332: NEG
50333: PUSH
50334: LD_INT 2
50336: NEG
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 3
50344: PUSH
50345: LD_INT 1
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 3
50354: PUSH
50355: LD_INT 2
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 2
50364: PUSH
50365: LD_INT 3
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 1
50374: PUSH
50375: LD_INT 3
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50407: LD_ADDR_VAR 0 26
50411: PUSH
50412: LD_INT 0
50414: PUSH
50415: LD_INT 0
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: LD_INT 1
50427: NEG
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 1
50435: PUSH
50436: LD_INT 0
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 1
50445: PUSH
50446: LD_INT 1
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 0
50455: PUSH
50456: LD_INT 1
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 1
50465: NEG
50466: PUSH
50467: LD_INT 0
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 1
50476: NEG
50477: PUSH
50478: LD_INT 1
50480: NEG
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 1
50488: NEG
50489: PUSH
50490: LD_INT 2
50492: NEG
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 0
50500: PUSH
50501: LD_INT 2
50503: NEG
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 1
50511: PUSH
50512: LD_INT 1
50514: NEG
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 2
50522: PUSH
50523: LD_INT 0
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 2
50532: PUSH
50533: LD_INT 1
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 2
50542: PUSH
50543: LD_INT 2
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 1
50552: PUSH
50553: LD_INT 2
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 0
50562: PUSH
50563: LD_INT 2
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 1
50572: NEG
50573: PUSH
50574: LD_INT 1
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 2
50583: NEG
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 2
50594: NEG
50595: PUSH
50596: LD_INT 1
50598: NEG
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 2
50606: NEG
50607: PUSH
50608: LD_INT 2
50610: NEG
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 2
50618: PUSH
50619: LD_INT 3
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 1
50628: PUSH
50629: LD_INT 3
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 1
50638: NEG
50639: PUSH
50640: LD_INT 2
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 2
50649: NEG
50650: PUSH
50651: LD_INT 1
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50683: LD_ADDR_VAR 0 27
50687: PUSH
50688: LD_INT 0
50690: PUSH
50691: LD_INT 0
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 0
50700: PUSH
50701: LD_INT 1
50703: NEG
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 1
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 1
50721: PUSH
50722: LD_INT 1
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 0
50731: PUSH
50732: LD_INT 1
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 1
50741: NEG
50742: PUSH
50743: LD_INT 0
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 1
50752: NEG
50753: PUSH
50754: LD_INT 1
50756: NEG
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 1
50764: NEG
50765: PUSH
50766: LD_INT 2
50768: NEG
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 0
50776: PUSH
50777: LD_INT 2
50779: NEG
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 1
50787: PUSH
50788: LD_INT 1
50790: NEG
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 2
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 2
50808: PUSH
50809: LD_INT 1
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 2
50818: PUSH
50819: LD_INT 2
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 1
50828: PUSH
50829: LD_INT 2
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 0
50838: PUSH
50839: LD_INT 2
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 1
50848: NEG
50849: PUSH
50850: LD_INT 1
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 2
50859: NEG
50860: PUSH
50861: LD_INT 0
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 2
50870: NEG
50871: PUSH
50872: LD_INT 1
50874: NEG
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 2
50882: NEG
50883: PUSH
50884: LD_INT 2
50886: NEG
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 1
50894: NEG
50895: PUSH
50896: LD_INT 2
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 2
50905: NEG
50906: PUSH
50907: LD_INT 1
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 3
50916: NEG
50917: PUSH
50918: LD_INT 1
50920: NEG
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 3
50928: NEG
50929: PUSH
50930: LD_INT 2
50932: NEG
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50963: LD_ADDR_VAR 0 28
50967: PUSH
50968: LD_INT 0
50970: PUSH
50971: LD_INT 0
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 0
50980: PUSH
50981: LD_INT 1
50983: NEG
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 1
50991: PUSH
50992: LD_INT 0
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 1
51001: PUSH
51002: LD_INT 1
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 0
51011: PUSH
51012: LD_INT 1
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 1
51021: NEG
51022: PUSH
51023: LD_INT 0
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 1
51032: NEG
51033: PUSH
51034: LD_INT 1
51036: NEG
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 1
51044: NEG
51045: PUSH
51046: LD_INT 2
51048: NEG
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: LD_INT 2
51059: NEG
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 1
51067: PUSH
51068: LD_INT 1
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 2
51078: PUSH
51079: LD_INT 0
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 2
51088: PUSH
51089: LD_INT 1
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 2
51098: PUSH
51099: LD_INT 2
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 1
51108: PUSH
51109: LD_INT 2
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 0
51118: PUSH
51119: LD_INT 2
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 1
51128: NEG
51129: PUSH
51130: LD_INT 1
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 2
51139: NEG
51140: PUSH
51141: LD_INT 0
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 2
51150: NEG
51151: PUSH
51152: LD_INT 1
51154: NEG
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 2
51162: NEG
51163: PUSH
51164: LD_INT 2
51166: NEG
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 2
51174: NEG
51175: PUSH
51176: LD_INT 3
51178: NEG
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 1
51186: NEG
51187: PUSH
51188: LD_INT 3
51190: NEG
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 3
51198: NEG
51199: PUSH
51200: LD_INT 1
51202: NEG
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 3
51210: NEG
51211: PUSH
51212: LD_INT 2
51214: NEG
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51245: LD_ADDR_VAR 0 29
51249: PUSH
51250: LD_INT 0
51252: PUSH
51253: LD_INT 0
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 0
51262: PUSH
51263: LD_INT 1
51265: NEG
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 1
51273: PUSH
51274: LD_INT 0
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 1
51283: PUSH
51284: LD_INT 1
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 0
51293: PUSH
51294: LD_INT 1
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 1
51303: NEG
51304: PUSH
51305: LD_INT 0
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 1
51314: NEG
51315: PUSH
51316: LD_INT 1
51318: NEG
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 1
51326: NEG
51327: PUSH
51328: LD_INT 2
51330: NEG
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 0
51338: PUSH
51339: LD_INT 2
51341: NEG
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 1
51349: PUSH
51350: LD_INT 1
51352: NEG
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 2
51360: PUSH
51361: LD_INT 0
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 2
51370: PUSH
51371: LD_INT 1
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 1
51380: PUSH
51381: LD_INT 2
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 0
51390: PUSH
51391: LD_INT 2
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 1
51400: NEG
51401: PUSH
51402: LD_INT 1
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 2
51411: NEG
51412: PUSH
51413: LD_INT 1
51415: NEG
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 2
51423: NEG
51424: PUSH
51425: LD_INT 2
51427: NEG
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 2
51435: NEG
51436: PUSH
51437: LD_INT 3
51439: NEG
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 2
51447: PUSH
51448: LD_INT 1
51450: NEG
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 3
51458: PUSH
51459: LD_INT 1
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 1
51468: PUSH
51469: LD_INT 3
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 1
51478: NEG
51479: PUSH
51480: LD_INT 2
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 3
51489: NEG
51490: PUSH
51491: LD_INT 2
51493: NEG
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51524: LD_ADDR_VAR 0 30
51528: PUSH
51529: LD_INT 0
51531: PUSH
51532: LD_INT 0
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 0
51541: PUSH
51542: LD_INT 1
51544: NEG
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 1
51552: PUSH
51553: LD_INT 0
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 1
51562: PUSH
51563: LD_INT 1
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 0
51572: PUSH
51573: LD_INT 1
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 1
51582: NEG
51583: PUSH
51584: LD_INT 0
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 1
51593: NEG
51594: PUSH
51595: LD_INT 1
51597: NEG
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 1
51605: NEG
51606: PUSH
51607: LD_INT 2
51609: NEG
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: LD_INT 2
51620: NEG
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 1
51628: PUSH
51629: LD_INT 1
51631: NEG
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 2
51639: PUSH
51640: LD_INT 0
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 2
51649: PUSH
51650: LD_INT 1
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 2
51659: PUSH
51660: LD_INT 2
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 1
51669: PUSH
51670: LD_INT 2
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 1
51679: NEG
51680: PUSH
51681: LD_INT 1
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 2
51690: NEG
51691: PUSH
51692: LD_INT 0
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 2
51701: NEG
51702: PUSH
51703: LD_INT 1
51705: NEG
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 1
51713: NEG
51714: PUSH
51715: LD_INT 3
51717: NEG
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 1
51725: PUSH
51726: LD_INT 2
51728: NEG
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 3
51736: PUSH
51737: LD_INT 2
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 2
51746: PUSH
51747: LD_INT 3
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 2
51756: NEG
51757: PUSH
51758: LD_INT 1
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 3
51767: NEG
51768: PUSH
51769: LD_INT 1
51771: NEG
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51802: LD_ADDR_VAR 0 31
51806: PUSH
51807: LD_INT 0
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 0
51819: PUSH
51820: LD_INT 1
51822: NEG
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 1
51830: PUSH
51831: LD_INT 0
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 1
51840: PUSH
51841: LD_INT 1
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 0
51850: PUSH
51851: LD_INT 1
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 1
51860: NEG
51861: PUSH
51862: LD_INT 0
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 1
51871: NEG
51872: PUSH
51873: LD_INT 1
51875: NEG
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 1
51883: NEG
51884: PUSH
51885: LD_INT 2
51887: NEG
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 1
51895: PUSH
51896: LD_INT 1
51898: NEG
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 2
51906: PUSH
51907: LD_INT 0
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 2
51916: PUSH
51917: LD_INT 1
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 2
51926: PUSH
51927: LD_INT 2
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 1
51936: PUSH
51937: LD_INT 2
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 0
51946: PUSH
51947: LD_INT 2
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 1
51956: NEG
51957: PUSH
51958: LD_INT 1
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 2
51967: NEG
51968: PUSH
51969: LD_INT 1
51971: NEG
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 2
51979: NEG
51980: PUSH
51981: LD_INT 2
51983: NEG
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 2
51991: NEG
51992: PUSH
51993: LD_INT 3
51995: NEG
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 2
52003: PUSH
52004: LD_INT 1
52006: NEG
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 3
52014: PUSH
52015: LD_INT 1
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 1
52024: PUSH
52025: LD_INT 3
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 1
52034: NEG
52035: PUSH
52036: LD_INT 2
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 3
52045: NEG
52046: PUSH
52047: LD_INT 2
52049: NEG
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52080: LD_ADDR_VAR 0 32
52084: PUSH
52085: LD_INT 0
52087: PUSH
52088: LD_INT 0
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 0
52097: PUSH
52098: LD_INT 1
52100: NEG
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 1
52108: PUSH
52109: LD_INT 0
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 1
52118: PUSH
52119: LD_INT 1
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 0
52128: PUSH
52129: LD_INT 1
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 1
52138: NEG
52139: PUSH
52140: LD_INT 0
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 1
52149: NEG
52150: PUSH
52151: LD_INT 1
52153: NEG
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 1
52161: NEG
52162: PUSH
52163: LD_INT 2
52165: NEG
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 0
52173: PUSH
52174: LD_INT 2
52176: NEG
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 1
52184: PUSH
52185: LD_INT 1
52187: NEG
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 2
52195: PUSH
52196: LD_INT 1
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 2
52205: PUSH
52206: LD_INT 2
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 1
52215: PUSH
52216: LD_INT 2
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 0
52225: PUSH
52226: LD_INT 2
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 1
52235: NEG
52236: PUSH
52237: LD_INT 1
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 2
52246: NEG
52247: PUSH
52248: LD_INT 0
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 2
52257: NEG
52258: PUSH
52259: LD_INT 1
52261: NEG
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 1
52269: NEG
52270: PUSH
52271: LD_INT 3
52273: NEG
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 1
52281: PUSH
52282: LD_INT 2
52284: NEG
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 3
52292: PUSH
52293: LD_INT 2
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 2
52302: PUSH
52303: LD_INT 3
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 2
52312: NEG
52313: PUSH
52314: LD_INT 1
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 3
52323: NEG
52324: PUSH
52325: LD_INT 1
52327: NEG
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52358: LD_ADDR_VAR 0 33
52362: PUSH
52363: LD_INT 0
52365: PUSH
52366: LD_INT 0
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 0
52375: PUSH
52376: LD_INT 1
52378: NEG
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 1
52386: PUSH
52387: LD_INT 0
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 1
52396: PUSH
52397: LD_INT 1
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 0
52406: PUSH
52407: LD_INT 1
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 1
52416: NEG
52417: PUSH
52418: LD_INT 0
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 1
52427: NEG
52428: PUSH
52429: LD_INT 1
52431: NEG
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 1
52439: NEG
52440: PUSH
52441: LD_INT 2
52443: NEG
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 1
52451: PUSH
52452: LD_INT 1
52454: NEG
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 2
52462: PUSH
52463: LD_INT 0
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 2
52472: PUSH
52473: LD_INT 1
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 1
52482: PUSH
52483: LD_INT 2
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 0
52492: PUSH
52493: LD_INT 2
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 1
52502: NEG
52503: PUSH
52504: LD_INT 1
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 2
52513: NEG
52514: PUSH
52515: LD_INT 0
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 2
52524: NEG
52525: PUSH
52526: LD_INT 1
52528: NEG
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 2
52536: NEG
52537: PUSH
52538: LD_INT 2
52540: NEG
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 2
52548: NEG
52549: PUSH
52550: LD_INT 3
52552: NEG
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 2
52560: PUSH
52561: LD_INT 1
52563: NEG
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 3
52571: PUSH
52572: LD_INT 1
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 1
52581: PUSH
52582: LD_INT 3
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 1
52591: NEG
52592: PUSH
52593: LD_INT 2
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 3
52602: NEG
52603: PUSH
52604: LD_INT 2
52606: NEG
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52637: LD_ADDR_VAR 0 34
52641: PUSH
52642: LD_INT 0
52644: PUSH
52645: LD_INT 0
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 0
52654: PUSH
52655: LD_INT 1
52657: NEG
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 1
52665: PUSH
52666: LD_INT 0
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 1
52675: PUSH
52676: LD_INT 1
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 0
52685: PUSH
52686: LD_INT 1
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 1
52695: NEG
52696: PUSH
52697: LD_INT 0
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 1
52706: NEG
52707: PUSH
52708: LD_INT 1
52710: NEG
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 1
52718: NEG
52719: PUSH
52720: LD_INT 2
52722: NEG
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 0
52730: PUSH
52731: LD_INT 2
52733: NEG
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 1
52741: PUSH
52742: LD_INT 1
52744: NEG
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 2
52752: PUSH
52753: LD_INT 1
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 2
52762: PUSH
52763: LD_INT 2
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 1
52772: PUSH
52773: LD_INT 2
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 1
52782: NEG
52783: PUSH
52784: LD_INT 1
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 2
52793: NEG
52794: PUSH
52795: LD_INT 0
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 2
52804: NEG
52805: PUSH
52806: LD_INT 1
52808: NEG
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 2
52816: NEG
52817: PUSH
52818: LD_INT 2
52820: NEG
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 1
52828: NEG
52829: PUSH
52830: LD_INT 3
52832: NEG
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 1
52840: PUSH
52841: LD_INT 2
52843: NEG
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 3
52851: PUSH
52852: LD_INT 2
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 2
52861: PUSH
52862: LD_INT 3
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 2
52871: NEG
52872: PUSH
52873: LD_INT 1
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 3
52882: NEG
52883: PUSH
52884: LD_INT 1
52886: NEG
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52917: LD_ADDR_VAR 0 35
52921: PUSH
52922: LD_INT 0
52924: PUSH
52925: LD_INT 0
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 0
52934: PUSH
52935: LD_INT 1
52937: NEG
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 1
52945: PUSH
52946: LD_INT 0
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 1
52955: PUSH
52956: LD_INT 1
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 0
52965: PUSH
52966: LD_INT 1
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 1
52975: NEG
52976: PUSH
52977: LD_INT 0
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 1
52986: NEG
52987: PUSH
52988: LD_INT 1
52990: NEG
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 2
52998: PUSH
52999: LD_INT 1
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 2
53008: NEG
53009: PUSH
53010: LD_INT 1
53012: NEG
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53029: LD_ADDR_VAR 0 36
53033: PUSH
53034: LD_INT 0
53036: PUSH
53037: LD_INT 0
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 0
53046: PUSH
53047: LD_INT 1
53049: NEG
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 1
53057: PUSH
53058: LD_INT 0
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 1
53067: PUSH
53068: LD_INT 1
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 0
53077: PUSH
53078: LD_INT 1
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 1
53087: NEG
53088: PUSH
53089: LD_INT 0
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 1
53098: NEG
53099: PUSH
53100: LD_INT 1
53102: NEG
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 1
53110: NEG
53111: PUSH
53112: LD_INT 2
53114: NEG
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 1
53122: PUSH
53123: LD_INT 2
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53141: LD_ADDR_VAR 0 37
53145: PUSH
53146: LD_INT 0
53148: PUSH
53149: LD_INT 0
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 0
53158: PUSH
53159: LD_INT 1
53161: NEG
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 1
53169: PUSH
53170: LD_INT 0
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 1
53179: PUSH
53180: LD_INT 1
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 0
53189: PUSH
53190: LD_INT 1
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 1
53199: NEG
53200: PUSH
53201: LD_INT 0
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 1
53210: NEG
53211: PUSH
53212: LD_INT 1
53214: NEG
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 1
53222: PUSH
53223: LD_INT 1
53225: NEG
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 1
53233: NEG
53234: PUSH
53235: LD_INT 1
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53253: LD_ADDR_VAR 0 38
53257: PUSH
53258: LD_INT 0
53260: PUSH
53261: LD_INT 0
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 0
53270: PUSH
53271: LD_INT 1
53273: NEG
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 1
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 1
53291: PUSH
53292: LD_INT 1
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 0
53301: PUSH
53302: LD_INT 1
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 1
53311: NEG
53312: PUSH
53313: LD_INT 0
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 1
53322: NEG
53323: PUSH
53324: LD_INT 1
53326: NEG
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 2
53334: PUSH
53335: LD_INT 1
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 2
53344: NEG
53345: PUSH
53346: LD_INT 1
53348: NEG
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53365: LD_ADDR_VAR 0 39
53369: PUSH
53370: LD_INT 0
53372: PUSH
53373: LD_INT 0
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 0
53382: PUSH
53383: LD_INT 1
53385: NEG
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 1
53393: PUSH
53394: LD_INT 0
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 1
53403: PUSH
53404: LD_INT 1
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 0
53413: PUSH
53414: LD_INT 1
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 1
53423: NEG
53424: PUSH
53425: LD_INT 0
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 1
53434: NEG
53435: PUSH
53436: LD_INT 1
53438: NEG
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 1
53446: NEG
53447: PUSH
53448: LD_INT 2
53450: NEG
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 1
53458: PUSH
53459: LD_INT 2
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53477: LD_ADDR_VAR 0 40
53481: PUSH
53482: LD_INT 0
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 0
53494: PUSH
53495: LD_INT 1
53497: NEG
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 1
53505: PUSH
53506: LD_INT 0
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 1
53515: PUSH
53516: LD_INT 1
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 0
53525: PUSH
53526: LD_INT 1
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 1
53535: NEG
53536: PUSH
53537: LD_INT 0
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 1
53546: NEG
53547: PUSH
53548: LD_INT 1
53550: NEG
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 1
53558: PUSH
53559: LD_INT 1
53561: NEG
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 1
53569: NEG
53570: PUSH
53571: LD_INT 1
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53589: LD_ADDR_VAR 0 41
53593: PUSH
53594: LD_INT 0
53596: PUSH
53597: LD_INT 0
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 0
53606: PUSH
53607: LD_INT 1
53609: NEG
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 1
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 1
53627: PUSH
53628: LD_INT 1
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 0
53637: PUSH
53638: LD_INT 1
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 1
53647: NEG
53648: PUSH
53649: LD_INT 0
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 1
53658: NEG
53659: PUSH
53660: LD_INT 1
53662: NEG
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 1
53670: NEG
53671: PUSH
53672: LD_INT 2
53674: NEG
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 1
53682: PUSH
53683: LD_INT 1
53685: NEG
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 2
53693: PUSH
53694: LD_INT 0
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 2
53703: PUSH
53704: LD_INT 1
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 2
53713: PUSH
53714: LD_INT 2
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 1
53723: PUSH
53724: LD_INT 2
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 1
53733: NEG
53734: PUSH
53735: LD_INT 1
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 2
53744: NEG
53745: PUSH
53746: LD_INT 0
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 2
53755: NEG
53756: PUSH
53757: LD_INT 1
53759: NEG
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 2
53767: NEG
53768: PUSH
53769: LD_INT 2
53771: NEG
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 2
53779: NEG
53780: PUSH
53781: LD_INT 3
53783: NEG
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 2
53791: PUSH
53792: LD_INT 1
53794: NEG
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 3
53802: PUSH
53803: LD_INT 0
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 3
53812: PUSH
53813: LD_INT 1
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 3
53822: PUSH
53823: LD_INT 2
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 3
53832: PUSH
53833: LD_INT 3
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 2
53842: PUSH
53843: LD_INT 3
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 2
53852: NEG
53853: PUSH
53854: LD_INT 1
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 3
53863: NEG
53864: PUSH
53865: LD_INT 0
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 3
53874: NEG
53875: PUSH
53876: LD_INT 1
53878: NEG
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 3
53886: NEG
53887: PUSH
53888: LD_INT 2
53890: NEG
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 3
53898: NEG
53899: PUSH
53900: LD_INT 3
53902: NEG
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53939: LD_ADDR_VAR 0 42
53943: PUSH
53944: LD_INT 0
53946: PUSH
53947: LD_INT 0
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 0
53956: PUSH
53957: LD_INT 1
53959: NEG
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 1
53967: PUSH
53968: LD_INT 0
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 1
53977: PUSH
53978: LD_INT 1
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 0
53987: PUSH
53988: LD_INT 1
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 1
53997: NEG
53998: PUSH
53999: LD_INT 0
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 1
54008: NEG
54009: PUSH
54010: LD_INT 1
54012: NEG
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 1
54020: NEG
54021: PUSH
54022: LD_INT 2
54024: NEG
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 0
54032: PUSH
54033: LD_INT 2
54035: NEG
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 1
54043: PUSH
54044: LD_INT 1
54046: NEG
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 2
54054: PUSH
54055: LD_INT 1
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 2
54064: PUSH
54065: LD_INT 2
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 1
54074: PUSH
54075: LD_INT 2
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 0
54084: PUSH
54085: LD_INT 2
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 1
54094: NEG
54095: PUSH
54096: LD_INT 1
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 2
54105: NEG
54106: PUSH
54107: LD_INT 1
54109: NEG
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 2
54117: NEG
54118: PUSH
54119: LD_INT 2
54121: NEG
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 2
54129: NEG
54130: PUSH
54131: LD_INT 3
54133: NEG
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 1
54141: NEG
54142: PUSH
54143: LD_INT 3
54145: NEG
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 0
54153: PUSH
54154: LD_INT 3
54156: NEG
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 1
54164: PUSH
54165: LD_INT 2
54167: NEG
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 3
54175: PUSH
54176: LD_INT 2
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 3
54185: PUSH
54186: LD_INT 3
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 2
54195: PUSH
54196: LD_INT 3
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 1
54205: PUSH
54206: LD_INT 3
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 0
54215: PUSH
54216: LD_INT 3
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 1
54225: NEG
54226: PUSH
54227: LD_INT 2
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 3
54236: NEG
54237: PUSH
54238: LD_INT 2
54240: NEG
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 3
54248: NEG
54249: PUSH
54250: LD_INT 3
54252: NEG
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54289: LD_ADDR_VAR 0 43
54293: PUSH
54294: LD_INT 0
54296: PUSH
54297: LD_INT 0
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 0
54306: PUSH
54307: LD_INT 1
54309: NEG
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 1
54317: PUSH
54318: LD_INT 0
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 1
54327: PUSH
54328: LD_INT 1
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: LD_INT 1
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 1
54347: NEG
54348: PUSH
54349: LD_INT 0
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 1
54358: NEG
54359: PUSH
54360: LD_INT 1
54362: NEG
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 1
54370: NEG
54371: PUSH
54372: LD_INT 2
54374: NEG
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 0
54382: PUSH
54383: LD_INT 2
54385: NEG
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 1
54393: PUSH
54394: LD_INT 1
54396: NEG
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 2
54404: PUSH
54405: LD_INT 0
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 2
54414: PUSH
54415: LD_INT 1
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 1
54424: PUSH
54425: LD_INT 2
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 0
54434: PUSH
54435: LD_INT 2
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 1
54444: NEG
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 2
54455: NEG
54456: PUSH
54457: LD_INT 0
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 2
54466: NEG
54467: PUSH
54468: LD_INT 1
54470: NEG
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 1
54478: NEG
54479: PUSH
54480: LD_INT 3
54482: NEG
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 0
54490: PUSH
54491: LD_INT 3
54493: NEG
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 1
54501: PUSH
54502: LD_INT 2
54504: NEG
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 2
54512: PUSH
54513: LD_INT 1
54515: NEG
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 3
54523: PUSH
54524: LD_INT 0
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 3
54533: PUSH
54534: LD_INT 1
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 1
54543: PUSH
54544: LD_INT 3
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 0
54553: PUSH
54554: LD_INT 3
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 1
54563: NEG
54564: PUSH
54565: LD_INT 2
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 2
54574: NEG
54575: PUSH
54576: LD_INT 1
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 3
54585: NEG
54586: PUSH
54587: LD_INT 0
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 3
54596: NEG
54597: PUSH
54598: LD_INT 1
54600: NEG
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54637: LD_ADDR_VAR 0 44
54641: PUSH
54642: LD_INT 0
54644: PUSH
54645: LD_INT 0
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 0
54654: PUSH
54655: LD_INT 1
54657: NEG
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 1
54665: PUSH
54666: LD_INT 0
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 1
54675: PUSH
54676: LD_INT 1
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 0
54685: PUSH
54686: LD_INT 1
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 1
54695: NEG
54696: PUSH
54697: LD_INT 0
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 1
54706: NEG
54707: PUSH
54708: LD_INT 1
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 1
54718: NEG
54719: PUSH
54720: LD_INT 2
54722: NEG
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 1
54730: PUSH
54731: LD_INT 1
54733: NEG
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 2
54741: PUSH
54742: LD_INT 0
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 2
54751: PUSH
54752: LD_INT 1
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 2
54761: PUSH
54762: LD_INT 2
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 1
54771: PUSH
54772: LD_INT 2
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 1
54781: NEG
54782: PUSH
54783: LD_INT 1
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 2
54792: NEG
54793: PUSH
54794: LD_INT 0
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 2
54803: NEG
54804: PUSH
54805: LD_INT 1
54807: NEG
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 2
54815: NEG
54816: PUSH
54817: LD_INT 2
54819: NEG
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 2
54827: NEG
54828: PUSH
54829: LD_INT 3
54831: NEG
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 2
54839: PUSH
54840: LD_INT 1
54842: NEG
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 3
54850: PUSH
54851: LD_INT 0
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 3
54860: PUSH
54861: LD_INT 1
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 3
54870: PUSH
54871: LD_INT 2
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 3
54880: PUSH
54881: LD_INT 3
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 2
54890: PUSH
54891: LD_INT 3
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 2
54900: NEG
54901: PUSH
54902: LD_INT 1
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 3
54911: NEG
54912: PUSH
54913: LD_INT 0
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 3
54922: NEG
54923: PUSH
54924: LD_INT 1
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 3
54934: NEG
54935: PUSH
54936: LD_INT 2
54938: NEG
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 3
54946: NEG
54947: PUSH
54948: LD_INT 3
54950: NEG
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54987: LD_ADDR_VAR 0 45
54991: PUSH
54992: LD_INT 0
54994: PUSH
54995: LD_INT 0
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 0
55004: PUSH
55005: LD_INT 1
55007: NEG
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 1
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 1
55025: PUSH
55026: LD_INT 1
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 0
55035: PUSH
55036: LD_INT 1
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 1
55045: NEG
55046: PUSH
55047: LD_INT 0
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 1
55056: NEG
55057: PUSH
55058: LD_INT 1
55060: NEG
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 1
55068: NEG
55069: PUSH
55070: LD_INT 2
55072: NEG
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 0
55080: PUSH
55081: LD_INT 2
55083: NEG
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 1
55091: PUSH
55092: LD_INT 1
55094: NEG
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 2
55102: PUSH
55103: LD_INT 1
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 2
55112: PUSH
55113: LD_INT 2
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 1
55122: PUSH
55123: LD_INT 2
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 0
55132: PUSH
55133: LD_INT 2
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 1
55142: NEG
55143: PUSH
55144: LD_INT 1
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 2
55153: NEG
55154: PUSH
55155: LD_INT 1
55157: NEG
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 2
55165: NEG
55166: PUSH
55167: LD_INT 2
55169: NEG
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 2
55177: NEG
55178: PUSH
55179: LD_INT 3
55181: NEG
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 1
55189: NEG
55190: PUSH
55191: LD_INT 3
55193: NEG
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: LD_INT 3
55204: NEG
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 1
55212: PUSH
55213: LD_INT 2
55215: NEG
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 3
55223: PUSH
55224: LD_INT 2
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 3
55233: PUSH
55234: LD_INT 3
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 2
55243: PUSH
55244: LD_INT 3
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 1
55253: PUSH
55254: LD_INT 3
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 0
55263: PUSH
55264: LD_INT 3
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 1
55273: NEG
55274: PUSH
55275: LD_INT 2
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 3
55284: NEG
55285: PUSH
55286: LD_INT 2
55288: NEG
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 3
55296: NEG
55297: PUSH
55298: LD_INT 3
55300: NEG
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55337: LD_ADDR_VAR 0 46
55341: PUSH
55342: LD_INT 0
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 0
55354: PUSH
55355: LD_INT 1
55357: NEG
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 1
55365: PUSH
55366: LD_INT 0
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 1
55375: PUSH
55376: LD_INT 1
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 0
55385: PUSH
55386: LD_INT 1
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 1
55395: NEG
55396: PUSH
55397: LD_INT 0
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 1
55406: NEG
55407: PUSH
55408: LD_INT 1
55410: NEG
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 1
55418: NEG
55419: PUSH
55420: LD_INT 2
55422: NEG
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 0
55430: PUSH
55431: LD_INT 2
55433: NEG
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 1
55441: PUSH
55442: LD_INT 1
55444: NEG
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 2
55452: PUSH
55453: LD_INT 0
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 2
55462: PUSH
55463: LD_INT 1
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 1
55472: PUSH
55473: LD_INT 2
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 0
55482: PUSH
55483: LD_INT 2
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 1
55492: NEG
55493: PUSH
55494: LD_INT 1
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 2
55503: NEG
55504: PUSH
55505: LD_INT 0
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 2
55514: NEG
55515: PUSH
55516: LD_INT 1
55518: NEG
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 1
55526: NEG
55527: PUSH
55528: LD_INT 3
55530: NEG
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 0
55538: PUSH
55539: LD_INT 3
55541: NEG
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 1
55549: PUSH
55550: LD_INT 2
55552: NEG
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 2
55560: PUSH
55561: LD_INT 1
55563: NEG
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 3
55571: PUSH
55572: LD_INT 0
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 3
55581: PUSH
55582: LD_INT 1
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 1
55591: PUSH
55592: LD_INT 3
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 0
55601: PUSH
55602: LD_INT 3
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 1
55611: NEG
55612: PUSH
55613: LD_INT 2
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 2
55622: NEG
55623: PUSH
55624: LD_INT 1
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 3
55633: NEG
55634: PUSH
55635: LD_INT 0
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 3
55644: NEG
55645: PUSH
55646: LD_INT 1
55648: NEG
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55685: LD_ADDR_VAR 0 47
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: LD_INT 0
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 0
55702: PUSH
55703: LD_INT 1
55705: NEG
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 1
55713: PUSH
55714: LD_INT 0
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 1
55723: PUSH
55724: LD_INT 1
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 0
55733: PUSH
55734: LD_INT 1
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 1
55743: NEG
55744: PUSH
55745: LD_INT 0
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 1
55754: NEG
55755: PUSH
55756: LD_INT 1
55758: NEG
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 1
55766: NEG
55767: PUSH
55768: LD_INT 2
55770: NEG
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 0
55778: PUSH
55779: LD_INT 2
55781: NEG
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 1
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 2
55800: NEG
55801: PUSH
55802: LD_INT 1
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 2
55812: NEG
55813: PUSH
55814: LD_INT 2
55816: NEG
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55836: LD_ADDR_VAR 0 48
55840: PUSH
55841: LD_INT 0
55843: PUSH
55844: LD_INT 0
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 0
55853: PUSH
55854: LD_INT 1
55856: NEG
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 1
55864: PUSH
55865: LD_INT 0
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 1
55874: PUSH
55875: LD_INT 1
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 0
55884: PUSH
55885: LD_INT 1
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 1
55894: NEG
55895: PUSH
55896: LD_INT 0
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 1
55905: NEG
55906: PUSH
55907: LD_INT 1
55909: NEG
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 1
55917: NEG
55918: PUSH
55919: LD_INT 2
55921: NEG
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 0
55929: PUSH
55930: LD_INT 2
55932: NEG
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 1
55940: PUSH
55941: LD_INT 1
55943: NEG
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 2
55951: PUSH
55952: LD_INT 0
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 2
55961: PUSH
55962: LD_INT 1
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55983: LD_ADDR_VAR 0 49
55987: PUSH
55988: LD_INT 0
55990: PUSH
55991: LD_INT 0
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 0
56000: PUSH
56001: LD_INT 1
56003: NEG
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 1
56011: PUSH
56012: LD_INT 0
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 1
56021: PUSH
56022: LD_INT 1
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 0
56031: PUSH
56032: LD_INT 1
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 1
56041: NEG
56042: PUSH
56043: LD_INT 0
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 1
56052: NEG
56053: PUSH
56054: LD_INT 1
56056: NEG
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 1
56064: PUSH
56065: LD_INT 1
56067: NEG
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 2
56075: PUSH
56076: LD_INT 0
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 2
56085: PUSH
56086: LD_INT 1
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 2
56095: PUSH
56096: LD_INT 2
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 1
56105: PUSH
56106: LD_INT 2
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56127: LD_ADDR_VAR 0 50
56131: PUSH
56132: LD_INT 0
56134: PUSH
56135: LD_INT 0
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 0
56144: PUSH
56145: LD_INT 1
56147: NEG
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 1
56155: PUSH
56156: LD_INT 0
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 1
56165: PUSH
56166: LD_INT 1
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 0
56175: PUSH
56176: LD_INT 1
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 1
56185: NEG
56186: PUSH
56187: LD_INT 0
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 1
56196: NEG
56197: PUSH
56198: LD_INT 1
56200: NEG
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 2
56208: PUSH
56209: LD_INT 1
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 2
56218: PUSH
56219: LD_INT 2
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 1
56228: PUSH
56229: LD_INT 2
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 0
56238: PUSH
56239: LD_INT 2
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 1
56248: NEG
56249: PUSH
56250: LD_INT 1
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56271: LD_ADDR_VAR 0 51
56275: PUSH
56276: LD_INT 0
56278: PUSH
56279: LD_INT 0
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 0
56288: PUSH
56289: LD_INT 1
56291: NEG
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 1
56299: PUSH
56300: LD_INT 0
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 1
56309: PUSH
56310: LD_INT 1
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 0
56319: PUSH
56320: LD_INT 1
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 1
56329: NEG
56330: PUSH
56331: LD_INT 0
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 1
56340: NEG
56341: PUSH
56342: LD_INT 1
56344: NEG
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 1
56352: PUSH
56353: LD_INT 2
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 0
56362: PUSH
56363: LD_INT 2
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 1
56372: NEG
56373: PUSH
56374: LD_INT 1
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 2
56383: NEG
56384: PUSH
56385: LD_INT 0
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 2
56394: NEG
56395: PUSH
56396: LD_INT 1
56398: NEG
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56418: LD_ADDR_VAR 0 52
56422: PUSH
56423: LD_INT 0
56425: PUSH
56426: LD_INT 0
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 0
56435: PUSH
56436: LD_INT 1
56438: NEG
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 1
56446: PUSH
56447: LD_INT 0
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 1
56456: PUSH
56457: LD_INT 1
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 0
56466: PUSH
56467: LD_INT 1
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 1
56476: NEG
56477: PUSH
56478: LD_INT 0
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 1
56487: NEG
56488: PUSH
56489: LD_INT 1
56491: NEG
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 1
56499: NEG
56500: PUSH
56501: LD_INT 2
56503: NEG
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 1
56511: NEG
56512: PUSH
56513: LD_INT 1
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 2
56522: NEG
56523: PUSH
56524: LD_INT 0
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 2
56533: NEG
56534: PUSH
56535: LD_INT 1
56537: NEG
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 2
56545: NEG
56546: PUSH
56547: LD_INT 2
56549: NEG
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56569: LD_ADDR_VAR 0 53
56573: PUSH
56574: LD_INT 0
56576: PUSH
56577: LD_INT 0
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 0
56586: PUSH
56587: LD_INT 1
56589: NEG
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 1
56597: PUSH
56598: LD_INT 0
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 1
56607: PUSH
56608: LD_INT 1
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 0
56617: PUSH
56618: LD_INT 1
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 1
56627: NEG
56628: PUSH
56629: LD_INT 0
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 1
56638: NEG
56639: PUSH
56640: LD_INT 1
56642: NEG
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 1
56650: NEG
56651: PUSH
56652: LD_INT 2
56654: NEG
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 0
56662: PUSH
56663: LD_INT 2
56665: NEG
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 1
56673: PUSH
56674: LD_INT 1
56676: NEG
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 2
56684: PUSH
56685: LD_INT 0
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 2
56694: PUSH
56695: LD_INT 1
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 2
56704: PUSH
56705: LD_INT 2
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 1
56714: PUSH
56715: LD_INT 2
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 0
56724: PUSH
56725: LD_INT 2
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 1
56734: NEG
56735: PUSH
56736: LD_INT 1
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 2
56745: NEG
56746: PUSH
56747: LD_INT 0
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 2
56756: NEG
56757: PUSH
56758: LD_INT 1
56760: NEG
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 2
56768: NEG
56769: PUSH
56770: LD_INT 2
56772: NEG
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56799: LD_ADDR_VAR 0 54
56803: PUSH
56804: LD_INT 0
56806: PUSH
56807: LD_INT 0
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: LD_INT 1
56819: NEG
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 1
56827: PUSH
56828: LD_INT 0
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 1
56837: PUSH
56838: LD_INT 1
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 0
56847: PUSH
56848: LD_INT 1
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 1
56857: NEG
56858: PUSH
56859: LD_INT 0
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 1
56868: NEG
56869: PUSH
56870: LD_INT 1
56872: NEG
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 1
56880: NEG
56881: PUSH
56882: LD_INT 2
56884: NEG
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 0
56892: PUSH
56893: LD_INT 2
56895: NEG
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 1
56903: PUSH
56904: LD_INT 1
56906: NEG
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 2
56914: PUSH
56915: LD_INT 0
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 2
56924: PUSH
56925: LD_INT 1
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 2
56934: PUSH
56935: LD_INT 2
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 1
56944: PUSH
56945: LD_INT 2
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 0
56954: PUSH
56955: LD_INT 2
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 1
56964: NEG
56965: PUSH
56966: LD_INT 1
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 2
56975: NEG
56976: PUSH
56977: LD_INT 0
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 2
56986: NEG
56987: PUSH
56988: LD_INT 1
56990: NEG
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 2
56998: NEG
56999: PUSH
57000: LD_INT 2
57002: NEG
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57029: LD_ADDR_VAR 0 55
57033: PUSH
57034: LD_INT 0
57036: PUSH
57037: LD_INT 0
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 0
57046: PUSH
57047: LD_INT 1
57049: NEG
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 1
57057: PUSH
57058: LD_INT 0
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 1
57067: PUSH
57068: LD_INT 1
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 0
57077: PUSH
57078: LD_INT 1
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 1
57087: NEG
57088: PUSH
57089: LD_INT 0
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 1
57098: NEG
57099: PUSH
57100: LD_INT 1
57102: NEG
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 1
57110: NEG
57111: PUSH
57112: LD_INT 2
57114: NEG
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 0
57122: PUSH
57123: LD_INT 2
57125: NEG
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 1
57133: PUSH
57134: LD_INT 1
57136: NEG
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 2
57144: PUSH
57145: LD_INT 0
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 2
57154: PUSH
57155: LD_INT 1
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 2
57164: PUSH
57165: LD_INT 2
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 1
57174: PUSH
57175: LD_INT 2
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 0
57184: PUSH
57185: LD_INT 2
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 1
57194: NEG
57195: PUSH
57196: LD_INT 1
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 2
57205: NEG
57206: PUSH
57207: LD_INT 0
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 2
57216: NEG
57217: PUSH
57218: LD_INT 1
57220: NEG
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 2
57228: NEG
57229: PUSH
57230: LD_INT 2
57232: NEG
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57259: LD_ADDR_VAR 0 56
57263: PUSH
57264: LD_INT 0
57266: PUSH
57267: LD_INT 0
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 0
57276: PUSH
57277: LD_INT 1
57279: NEG
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 1
57287: PUSH
57288: LD_INT 0
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 1
57297: PUSH
57298: LD_INT 1
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 0
57307: PUSH
57308: LD_INT 1
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 1
57317: NEG
57318: PUSH
57319: LD_INT 0
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 1
57328: NEG
57329: PUSH
57330: LD_INT 1
57332: NEG
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 1
57340: NEG
57341: PUSH
57342: LD_INT 2
57344: NEG
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 0
57352: PUSH
57353: LD_INT 2
57355: NEG
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 1
57363: PUSH
57364: LD_INT 1
57366: NEG
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 2
57374: PUSH
57375: LD_INT 0
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 2
57384: PUSH
57385: LD_INT 1
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 2
57394: PUSH
57395: LD_INT 2
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 1
57404: PUSH
57405: LD_INT 2
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 0
57414: PUSH
57415: LD_INT 2
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 1
57424: NEG
57425: PUSH
57426: LD_INT 1
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 2
57435: NEG
57436: PUSH
57437: LD_INT 0
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 2
57446: NEG
57447: PUSH
57448: LD_INT 1
57450: NEG
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 2
57458: NEG
57459: PUSH
57460: LD_INT 2
57462: NEG
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57489: LD_ADDR_VAR 0 57
57493: PUSH
57494: LD_INT 0
57496: PUSH
57497: LD_INT 0
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 0
57506: PUSH
57507: LD_INT 1
57509: NEG
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 1
57517: PUSH
57518: LD_INT 0
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 1
57527: PUSH
57528: LD_INT 1
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 0
57537: PUSH
57538: LD_INT 1
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 1
57547: NEG
57548: PUSH
57549: LD_INT 0
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 1
57558: NEG
57559: PUSH
57560: LD_INT 1
57562: NEG
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 1
57570: NEG
57571: PUSH
57572: LD_INT 2
57574: NEG
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 0
57582: PUSH
57583: LD_INT 2
57585: NEG
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 1
57593: PUSH
57594: LD_INT 1
57596: NEG
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 2
57604: PUSH
57605: LD_INT 0
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 2
57614: PUSH
57615: LD_INT 1
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 2
57624: PUSH
57625: LD_INT 2
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 1
57634: PUSH
57635: LD_INT 2
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 0
57644: PUSH
57645: LD_INT 2
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 1
57654: NEG
57655: PUSH
57656: LD_INT 1
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 2
57665: NEG
57666: PUSH
57667: LD_INT 0
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 2
57676: NEG
57677: PUSH
57678: LD_INT 1
57680: NEG
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 2
57688: NEG
57689: PUSH
57690: LD_INT 2
57692: NEG
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57719: LD_ADDR_VAR 0 58
57723: PUSH
57724: LD_INT 0
57726: PUSH
57727: LD_INT 0
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 0
57736: PUSH
57737: LD_INT 1
57739: NEG
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 1
57747: PUSH
57748: LD_INT 0
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 1
57757: PUSH
57758: LD_INT 1
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 0
57767: PUSH
57768: LD_INT 1
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 1
57777: NEG
57778: PUSH
57779: LD_INT 0
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 1
57788: NEG
57789: PUSH
57790: LD_INT 1
57792: NEG
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 1
57800: NEG
57801: PUSH
57802: LD_INT 2
57804: NEG
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 0
57812: PUSH
57813: LD_INT 2
57815: NEG
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 1
57823: PUSH
57824: LD_INT 1
57826: NEG
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 2
57834: PUSH
57835: LD_INT 0
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 2
57844: PUSH
57845: LD_INT 1
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 2
57854: PUSH
57855: LD_INT 2
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 1
57864: PUSH
57865: LD_INT 2
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 0
57874: PUSH
57875: LD_INT 2
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 1
57884: NEG
57885: PUSH
57886: LD_INT 1
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 2
57895: NEG
57896: PUSH
57897: LD_INT 0
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 2
57906: NEG
57907: PUSH
57908: LD_INT 1
57910: NEG
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 2
57918: NEG
57919: PUSH
57920: LD_INT 2
57922: NEG
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57949: LD_ADDR_VAR 0 59
57953: PUSH
57954: LD_INT 0
57956: PUSH
57957: LD_INT 0
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 0
57966: PUSH
57967: LD_INT 1
57969: NEG
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 1
57977: PUSH
57978: LD_INT 0
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 1
57987: PUSH
57988: LD_INT 1
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 0
57997: PUSH
57998: LD_INT 1
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 1
58007: NEG
58008: PUSH
58009: LD_INT 0
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 1
58018: NEG
58019: PUSH
58020: LD_INT 1
58022: NEG
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58037: LD_ADDR_VAR 0 60
58041: PUSH
58042: LD_INT 0
58044: PUSH
58045: LD_INT 0
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 0
58054: PUSH
58055: LD_INT 1
58057: NEG
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 1
58065: PUSH
58066: LD_INT 0
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 1
58075: PUSH
58076: LD_INT 1
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 0
58085: PUSH
58086: LD_INT 1
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 1
58095: NEG
58096: PUSH
58097: LD_INT 0
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 1
58106: NEG
58107: PUSH
58108: LD_INT 1
58110: NEG
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58125: LD_ADDR_VAR 0 61
58129: PUSH
58130: LD_INT 0
58132: PUSH
58133: LD_INT 0
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 0
58142: PUSH
58143: LD_INT 1
58145: NEG
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 1
58153: PUSH
58154: LD_INT 0
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 1
58163: PUSH
58164: LD_INT 1
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 0
58173: PUSH
58174: LD_INT 1
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 1
58183: NEG
58184: PUSH
58185: LD_INT 0
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 1
58194: NEG
58195: PUSH
58196: LD_INT 1
58198: NEG
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58213: LD_ADDR_VAR 0 62
58217: PUSH
58218: LD_INT 0
58220: PUSH
58221: LD_INT 0
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 0
58230: PUSH
58231: LD_INT 1
58233: NEG
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 1
58241: PUSH
58242: LD_INT 0
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 1
58251: PUSH
58252: LD_INT 1
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 0
58261: PUSH
58262: LD_INT 1
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 1
58271: NEG
58272: PUSH
58273: LD_INT 0
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 1
58282: NEG
58283: PUSH
58284: LD_INT 1
58286: NEG
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58301: LD_ADDR_VAR 0 63
58305: PUSH
58306: LD_INT 0
58308: PUSH
58309: LD_INT 0
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 0
58318: PUSH
58319: LD_INT 1
58321: NEG
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 1
58329: PUSH
58330: LD_INT 0
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 1
58339: PUSH
58340: LD_INT 1
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 0
58349: PUSH
58350: LD_INT 1
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 1
58359: NEG
58360: PUSH
58361: LD_INT 0
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 1
58370: NEG
58371: PUSH
58372: LD_INT 1
58374: NEG
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58389: LD_ADDR_VAR 0 64
58393: PUSH
58394: LD_INT 0
58396: PUSH
58397: LD_INT 0
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 0
58406: PUSH
58407: LD_INT 1
58409: NEG
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 1
58417: PUSH
58418: LD_INT 0
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 1
58427: PUSH
58428: LD_INT 1
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 0
58437: PUSH
58438: LD_INT 1
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 1
58447: NEG
58448: PUSH
58449: LD_INT 0
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 1
58458: NEG
58459: PUSH
58460: LD_INT 1
58462: NEG
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: ST_TO_ADDR
// end ; 1 :
58477: GO 64374
58479: LD_INT 1
58481: DOUBLE
58482: EQUAL
58483: IFTRUE 58487
58485: GO 61110
58487: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58488: LD_ADDR_VAR 0 11
58492: PUSH
58493: LD_INT 1
58495: NEG
58496: PUSH
58497: LD_INT 3
58499: NEG
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 0
58507: PUSH
58508: LD_INT 3
58510: NEG
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 1
58518: PUSH
58519: LD_INT 2
58521: NEG
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: LIST
58531: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58532: LD_ADDR_VAR 0 12
58536: PUSH
58537: LD_INT 2
58539: PUSH
58540: LD_INT 1
58542: NEG
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 3
58550: PUSH
58551: LD_INT 0
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 3
58560: PUSH
58561: LD_INT 1
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: LIST
58572: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58573: LD_ADDR_VAR 0 13
58577: PUSH
58578: LD_INT 3
58580: PUSH
58581: LD_INT 2
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 3
58590: PUSH
58591: LD_INT 3
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 2
58600: PUSH
58601: LD_INT 3
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: LIST
58612: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58613: LD_ADDR_VAR 0 14
58617: PUSH
58618: LD_INT 1
58620: PUSH
58621: LD_INT 3
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 0
58630: PUSH
58631: LD_INT 3
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 1
58640: NEG
58641: PUSH
58642: LD_INT 2
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: LIST
58653: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58654: LD_ADDR_VAR 0 15
58658: PUSH
58659: LD_INT 2
58661: NEG
58662: PUSH
58663: LD_INT 1
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 3
58672: NEG
58673: PUSH
58674: LD_INT 0
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 3
58683: NEG
58684: PUSH
58685: LD_INT 1
58687: NEG
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: LIST
58697: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58698: LD_ADDR_VAR 0 16
58702: PUSH
58703: LD_INT 2
58705: NEG
58706: PUSH
58707: LD_INT 3
58709: NEG
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 3
58717: NEG
58718: PUSH
58719: LD_INT 2
58721: NEG
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 3
58729: NEG
58730: PUSH
58731: LD_INT 3
58733: NEG
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: LIST
58743: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58744: LD_ADDR_VAR 0 17
58748: PUSH
58749: LD_INT 1
58751: NEG
58752: PUSH
58753: LD_INT 3
58755: NEG
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 0
58763: PUSH
58764: LD_INT 3
58766: NEG
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 1
58774: PUSH
58775: LD_INT 2
58777: NEG
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: LIST
58787: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58788: LD_ADDR_VAR 0 18
58792: PUSH
58793: LD_INT 2
58795: PUSH
58796: LD_INT 1
58798: NEG
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 3
58806: PUSH
58807: LD_INT 0
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 3
58816: PUSH
58817: LD_INT 1
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: LIST
58828: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58829: LD_ADDR_VAR 0 19
58833: PUSH
58834: LD_INT 3
58836: PUSH
58837: LD_INT 2
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 3
58846: PUSH
58847: LD_INT 3
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 2
58856: PUSH
58857: LD_INT 3
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: LIST
58868: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58869: LD_ADDR_VAR 0 20
58873: PUSH
58874: LD_INT 1
58876: PUSH
58877: LD_INT 3
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 0
58886: PUSH
58887: LD_INT 3
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 1
58896: NEG
58897: PUSH
58898: LD_INT 2
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: LIST
58909: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58910: LD_ADDR_VAR 0 21
58914: PUSH
58915: LD_INT 2
58917: NEG
58918: PUSH
58919: LD_INT 1
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 3
58928: NEG
58929: PUSH
58930: LD_INT 0
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 3
58939: NEG
58940: PUSH
58941: LD_INT 1
58943: NEG
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: LIST
58953: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58954: LD_ADDR_VAR 0 22
58958: PUSH
58959: LD_INT 2
58961: NEG
58962: PUSH
58963: LD_INT 3
58965: NEG
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 3
58973: NEG
58974: PUSH
58975: LD_INT 2
58977: NEG
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 3
58985: NEG
58986: PUSH
58987: LD_INT 3
58989: NEG
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: LIST
58999: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
59000: LD_ADDR_VAR 0 23
59004: PUSH
59005: LD_INT 0
59007: PUSH
59008: LD_INT 3
59010: NEG
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 1
59018: NEG
59019: PUSH
59020: LD_INT 4
59022: NEG
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 1
59030: PUSH
59031: LD_INT 3
59033: NEG
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: LIST
59043: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
59044: LD_ADDR_VAR 0 24
59048: PUSH
59049: LD_INT 3
59051: PUSH
59052: LD_INT 0
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 3
59061: PUSH
59062: LD_INT 1
59064: NEG
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 4
59072: PUSH
59073: LD_INT 1
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: LIST
59084: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
59085: LD_ADDR_VAR 0 25
59089: PUSH
59090: LD_INT 3
59092: PUSH
59093: LD_INT 3
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 4
59102: PUSH
59103: LD_INT 3
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 3
59112: PUSH
59113: LD_INT 4
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: LIST
59124: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
59125: LD_ADDR_VAR 0 26
59129: PUSH
59130: LD_INT 0
59132: PUSH
59133: LD_INT 3
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 1
59142: PUSH
59143: LD_INT 4
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 1
59152: NEG
59153: PUSH
59154: LD_INT 3
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: LIST
59165: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
59166: LD_ADDR_VAR 0 27
59170: PUSH
59171: LD_INT 3
59173: NEG
59174: PUSH
59175: LD_INT 0
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 3
59184: NEG
59185: PUSH
59186: LD_INT 1
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 4
59195: NEG
59196: PUSH
59197: LD_INT 1
59199: NEG
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: LIST
59209: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
59210: LD_ADDR_VAR 0 28
59214: PUSH
59215: LD_INT 3
59217: NEG
59218: PUSH
59219: LD_INT 3
59221: NEG
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 3
59229: NEG
59230: PUSH
59231: LD_INT 4
59233: NEG
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 4
59241: NEG
59242: PUSH
59243: LD_INT 3
59245: NEG
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: LIST
59255: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
59256: LD_ADDR_VAR 0 29
59260: PUSH
59261: LD_INT 1
59263: NEG
59264: PUSH
59265: LD_INT 3
59267: NEG
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 0
59275: PUSH
59276: LD_INT 3
59278: NEG
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 1
59286: PUSH
59287: LD_INT 2
59289: NEG
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 1
59297: NEG
59298: PUSH
59299: LD_INT 4
59301: NEG
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 0
59309: PUSH
59310: LD_INT 4
59312: NEG
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 1
59320: PUSH
59321: LD_INT 3
59323: NEG
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 1
59331: NEG
59332: PUSH
59333: LD_INT 5
59335: NEG
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 0
59343: PUSH
59344: LD_INT 5
59346: NEG
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 1
59354: PUSH
59355: LD_INT 4
59357: NEG
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 1
59365: NEG
59366: PUSH
59367: LD_INT 6
59369: NEG
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 0
59377: PUSH
59378: LD_INT 6
59380: NEG
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 1
59388: PUSH
59389: LD_INT 5
59391: NEG
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59411: LD_ADDR_VAR 0 30
59415: PUSH
59416: LD_INT 2
59418: PUSH
59419: LD_INT 1
59421: NEG
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 3
59429: PUSH
59430: LD_INT 0
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 3
59439: PUSH
59440: LD_INT 1
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 3
59449: PUSH
59450: LD_INT 1
59452: NEG
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 4
59460: PUSH
59461: LD_INT 0
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 4
59470: PUSH
59471: LD_INT 1
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 4
59480: PUSH
59481: LD_INT 1
59483: NEG
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 5
59491: PUSH
59492: LD_INT 0
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 5
59501: PUSH
59502: LD_INT 1
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 5
59511: PUSH
59512: LD_INT 1
59514: NEG
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 6
59522: PUSH
59523: LD_INT 0
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 6
59532: PUSH
59533: LD_INT 1
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59554: LD_ADDR_VAR 0 31
59558: PUSH
59559: LD_INT 3
59561: PUSH
59562: LD_INT 2
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 3
59571: PUSH
59572: LD_INT 3
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 2
59581: PUSH
59582: LD_INT 3
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 4
59591: PUSH
59592: LD_INT 3
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 4
59601: PUSH
59602: LD_INT 4
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 3
59611: PUSH
59612: LD_INT 4
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 5
59621: PUSH
59622: LD_INT 4
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 5
59631: PUSH
59632: LD_INT 5
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 4
59641: PUSH
59642: LD_INT 5
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 6
59651: PUSH
59652: LD_INT 5
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 6
59661: PUSH
59662: LD_INT 6
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: LD_INT 5
59671: PUSH
59672: LD_INT 6
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59693: LD_ADDR_VAR 0 32
59697: PUSH
59698: LD_INT 1
59700: PUSH
59701: LD_INT 3
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 0
59710: PUSH
59711: LD_INT 3
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 1
59720: NEG
59721: PUSH
59722: LD_INT 2
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 1
59731: PUSH
59732: LD_INT 4
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 0
59741: PUSH
59742: LD_INT 4
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 1
59751: NEG
59752: PUSH
59753: LD_INT 3
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 1
59762: PUSH
59763: LD_INT 5
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 0
59772: PUSH
59773: LD_INT 5
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 1
59782: NEG
59783: PUSH
59784: LD_INT 4
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 1
59793: PUSH
59794: LD_INT 6
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 0
59803: PUSH
59804: LD_INT 6
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 1
59813: NEG
59814: PUSH
59815: LD_INT 5
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59836: LD_ADDR_VAR 0 33
59840: PUSH
59841: LD_INT 2
59843: NEG
59844: PUSH
59845: LD_INT 1
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 3
59854: NEG
59855: PUSH
59856: LD_INT 0
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 3
59865: NEG
59866: PUSH
59867: LD_INT 1
59869: NEG
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 3
59877: NEG
59878: PUSH
59879: LD_INT 1
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 4
59888: NEG
59889: PUSH
59890: LD_INT 0
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 4
59899: NEG
59900: PUSH
59901: LD_INT 1
59903: NEG
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 4
59911: NEG
59912: PUSH
59913: LD_INT 1
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 5
59922: NEG
59923: PUSH
59924: LD_INT 0
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 5
59933: NEG
59934: PUSH
59935: LD_INT 1
59937: NEG
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 5
59945: NEG
59946: PUSH
59947: LD_INT 1
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 6
59956: NEG
59957: PUSH
59958: LD_INT 0
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 6
59967: NEG
59968: PUSH
59969: LD_INT 1
59971: NEG
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59991: LD_ADDR_VAR 0 34
59995: PUSH
59996: LD_INT 2
59998: NEG
59999: PUSH
60000: LD_INT 3
60002: NEG
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 3
60010: NEG
60011: PUSH
60012: LD_INT 2
60014: NEG
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 3
60022: NEG
60023: PUSH
60024: LD_INT 3
60026: NEG
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 3
60034: NEG
60035: PUSH
60036: LD_INT 4
60038: NEG
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 4
60046: NEG
60047: PUSH
60048: LD_INT 3
60050: NEG
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 4
60058: NEG
60059: PUSH
60060: LD_INT 4
60062: NEG
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 4
60070: NEG
60071: PUSH
60072: LD_INT 5
60074: NEG
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 5
60082: NEG
60083: PUSH
60084: LD_INT 4
60086: NEG
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 5
60094: NEG
60095: PUSH
60096: LD_INT 5
60098: NEG
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 5
60106: NEG
60107: PUSH
60108: LD_INT 6
60110: NEG
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 6
60118: NEG
60119: PUSH
60120: LD_INT 5
60122: NEG
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 6
60130: NEG
60131: PUSH
60132: LD_INT 6
60134: NEG
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
60154: LD_ADDR_VAR 0 41
60158: PUSH
60159: LD_INT 0
60161: PUSH
60162: LD_INT 2
60164: NEG
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 1
60172: NEG
60173: PUSH
60174: LD_INT 3
60176: NEG
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 1
60184: PUSH
60185: LD_INT 2
60187: NEG
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: LIST
60197: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
60198: LD_ADDR_VAR 0 42
60202: PUSH
60203: LD_INT 2
60205: PUSH
60206: LD_INT 0
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 2
60215: PUSH
60216: LD_INT 1
60218: NEG
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 3
60226: PUSH
60227: LD_INT 1
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: LIST
60238: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
60239: LD_ADDR_VAR 0 43
60243: PUSH
60244: LD_INT 2
60246: PUSH
60247: LD_INT 2
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 3
60256: PUSH
60257: LD_INT 2
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 2
60266: PUSH
60267: LD_INT 3
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: LIST
60278: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
60279: LD_ADDR_VAR 0 44
60283: PUSH
60284: LD_INT 0
60286: PUSH
60287: LD_INT 2
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 1
60296: PUSH
60297: LD_INT 3
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 1
60306: NEG
60307: PUSH
60308: LD_INT 2
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: LIST
60319: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60320: LD_ADDR_VAR 0 45
60324: PUSH
60325: LD_INT 2
60327: NEG
60328: PUSH
60329: LD_INT 0
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 2
60338: NEG
60339: PUSH
60340: LD_INT 1
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 3
60349: NEG
60350: PUSH
60351: LD_INT 1
60353: NEG
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: LIST
60363: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
60364: LD_ADDR_VAR 0 46
60368: PUSH
60369: LD_INT 2
60371: NEG
60372: PUSH
60373: LD_INT 2
60375: NEG
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 2
60383: NEG
60384: PUSH
60385: LD_INT 3
60387: NEG
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 3
60395: NEG
60396: PUSH
60397: LD_INT 2
60399: NEG
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: LIST
60409: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60410: LD_ADDR_VAR 0 47
60414: PUSH
60415: LD_INT 2
60417: NEG
60418: PUSH
60419: LD_INT 3
60421: NEG
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 1
60429: NEG
60430: PUSH
60431: LD_INT 3
60433: NEG
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60443: LD_ADDR_VAR 0 48
60447: PUSH
60448: LD_INT 1
60450: PUSH
60451: LD_INT 2
60453: NEG
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 2
60461: PUSH
60462: LD_INT 1
60464: NEG
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60474: LD_ADDR_VAR 0 49
60478: PUSH
60479: LD_INT 3
60481: PUSH
60482: LD_INT 1
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 3
60491: PUSH
60492: LD_INT 2
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60503: LD_ADDR_VAR 0 50
60507: PUSH
60508: LD_INT 2
60510: PUSH
60511: LD_INT 3
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 1
60520: PUSH
60521: LD_INT 3
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60532: LD_ADDR_VAR 0 51
60536: PUSH
60537: LD_INT 1
60539: NEG
60540: PUSH
60541: LD_INT 2
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 2
60550: NEG
60551: PUSH
60552: LD_INT 1
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60563: LD_ADDR_VAR 0 52
60567: PUSH
60568: LD_INT 3
60570: NEG
60571: PUSH
60572: LD_INT 1
60574: NEG
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 3
60582: NEG
60583: PUSH
60584: LD_INT 2
60586: NEG
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60596: LD_ADDR_VAR 0 53
60600: PUSH
60601: LD_INT 1
60603: NEG
60604: PUSH
60605: LD_INT 3
60607: NEG
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 0
60615: PUSH
60616: LD_INT 3
60618: NEG
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 1
60626: PUSH
60627: LD_INT 2
60629: NEG
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: LIST
60639: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60640: LD_ADDR_VAR 0 54
60644: PUSH
60645: LD_INT 2
60647: PUSH
60648: LD_INT 1
60650: NEG
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 3
60658: PUSH
60659: LD_INT 0
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 3
60668: PUSH
60669: LD_INT 1
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: LIST
60680: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60681: LD_ADDR_VAR 0 55
60685: PUSH
60686: LD_INT 3
60688: PUSH
60689: LD_INT 2
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 3
60698: PUSH
60699: LD_INT 3
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 2
60708: PUSH
60709: LD_INT 3
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: LIST
60720: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60721: LD_ADDR_VAR 0 56
60725: PUSH
60726: LD_INT 1
60728: PUSH
60729: LD_INT 3
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 0
60738: PUSH
60739: LD_INT 3
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 1
60748: NEG
60749: PUSH
60750: LD_INT 2
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: LIST
60761: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60762: LD_ADDR_VAR 0 57
60766: PUSH
60767: LD_INT 2
60769: NEG
60770: PUSH
60771: LD_INT 1
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PUSH
60778: LD_INT 3
60780: NEG
60781: PUSH
60782: LD_INT 0
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 3
60791: NEG
60792: PUSH
60793: LD_INT 1
60795: NEG
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: LIST
60805: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60806: LD_ADDR_VAR 0 58
60810: PUSH
60811: LD_INT 2
60813: NEG
60814: PUSH
60815: LD_INT 3
60817: NEG
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 3
60825: NEG
60826: PUSH
60827: LD_INT 2
60829: NEG
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: LD_INT 3
60837: NEG
60838: PUSH
60839: LD_INT 3
60841: NEG
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: LIST
60851: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60852: LD_ADDR_VAR 0 59
60856: PUSH
60857: LD_INT 1
60859: NEG
60860: PUSH
60861: LD_INT 2
60863: NEG
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 0
60871: PUSH
60872: LD_INT 2
60874: NEG
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 1
60882: PUSH
60883: LD_INT 1
60885: NEG
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: LIST
60895: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60896: LD_ADDR_VAR 0 60
60900: PUSH
60901: LD_INT 1
60903: PUSH
60904: LD_INT 1
60906: NEG
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 2
60914: PUSH
60915: LD_INT 0
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 2
60924: PUSH
60925: LD_INT 1
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: LIST
60936: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60937: LD_ADDR_VAR 0 61
60941: PUSH
60942: LD_INT 2
60944: PUSH
60945: LD_INT 1
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 2
60954: PUSH
60955: LD_INT 2
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 1
60964: PUSH
60965: LD_INT 2
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: LIST
60976: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60977: LD_ADDR_VAR 0 62
60981: PUSH
60982: LD_INT 1
60984: PUSH
60985: LD_INT 2
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 0
60994: PUSH
60995: LD_INT 2
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 1
61004: NEG
61005: PUSH
61006: LD_INT 1
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: LIST
61017: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61018: LD_ADDR_VAR 0 63
61022: PUSH
61023: LD_INT 1
61025: NEG
61026: PUSH
61027: LD_INT 1
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 2
61036: NEG
61037: PUSH
61038: LD_INT 0
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 2
61047: NEG
61048: PUSH
61049: LD_INT 1
61051: NEG
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: LIST
61061: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61062: LD_ADDR_VAR 0 64
61066: PUSH
61067: LD_INT 1
61069: NEG
61070: PUSH
61071: LD_INT 2
61073: NEG
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 2
61081: NEG
61082: PUSH
61083: LD_INT 1
61085: NEG
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 2
61093: NEG
61094: PUSH
61095: LD_INT 2
61097: NEG
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: LIST
61107: ST_TO_ADDR
// end ; 2 :
61108: GO 64374
61110: LD_INT 2
61112: DOUBLE
61113: EQUAL
61114: IFTRUE 61118
61116: GO 64373
61118: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
61119: LD_ADDR_VAR 0 29
61123: PUSH
61124: LD_INT 4
61126: PUSH
61127: LD_INT 0
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 4
61136: PUSH
61137: LD_INT 1
61139: NEG
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 5
61147: PUSH
61148: LD_INT 0
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 5
61157: PUSH
61158: LD_INT 1
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 4
61167: PUSH
61168: LD_INT 1
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 3
61177: PUSH
61178: LD_INT 0
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 3
61187: PUSH
61188: LD_INT 1
61190: NEG
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: LD_INT 3
61198: PUSH
61199: LD_INT 2
61201: NEG
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 5
61209: PUSH
61210: LD_INT 2
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 3
61219: PUSH
61220: LD_INT 3
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 3
61229: PUSH
61230: LD_INT 2
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 4
61239: PUSH
61240: LD_INT 3
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 4
61249: PUSH
61250: LD_INT 4
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: LD_INT 3
61259: PUSH
61260: LD_INT 4
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 2
61269: PUSH
61270: LD_INT 3
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 2
61279: PUSH
61280: LD_INT 2
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 4
61289: PUSH
61290: LD_INT 2
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 2
61299: PUSH
61300: LD_INT 4
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 0
61309: PUSH
61310: LD_INT 4
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 0
61319: PUSH
61320: LD_INT 3
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 1
61329: PUSH
61330: LD_INT 4
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 1
61339: PUSH
61340: LD_INT 5
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 0
61349: PUSH
61350: LD_INT 5
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 1
61359: NEG
61360: PUSH
61361: LD_INT 4
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 1
61370: NEG
61371: PUSH
61372: LD_INT 3
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 2
61381: PUSH
61382: LD_INT 5
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 2
61391: NEG
61392: PUSH
61393: LD_INT 3
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 3
61402: NEG
61403: PUSH
61404: LD_INT 0
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 3
61413: NEG
61414: PUSH
61415: LD_INT 1
61417: NEG
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 2
61425: NEG
61426: PUSH
61427: LD_INT 0
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 2
61436: NEG
61437: PUSH
61438: LD_INT 1
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 3
61447: NEG
61448: PUSH
61449: LD_INT 1
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 4
61458: NEG
61459: PUSH
61460: LD_INT 0
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 4
61469: NEG
61470: PUSH
61471: LD_INT 1
61473: NEG
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 4
61481: NEG
61482: PUSH
61483: LD_INT 2
61485: NEG
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 2
61493: NEG
61494: PUSH
61495: LD_INT 2
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 4
61504: NEG
61505: PUSH
61506: LD_INT 4
61508: NEG
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 4
61516: NEG
61517: PUSH
61518: LD_INT 5
61520: NEG
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 3
61528: NEG
61529: PUSH
61530: LD_INT 4
61532: NEG
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 3
61540: NEG
61541: PUSH
61542: LD_INT 3
61544: NEG
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 4
61552: NEG
61553: PUSH
61554: LD_INT 3
61556: NEG
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 5
61564: NEG
61565: PUSH
61566: LD_INT 4
61568: NEG
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 5
61576: NEG
61577: PUSH
61578: LD_INT 5
61580: NEG
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 3
61588: NEG
61589: PUSH
61590: LD_INT 5
61592: NEG
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 5
61600: NEG
61601: PUSH
61602: LD_INT 3
61604: NEG
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61657: LD_ADDR_VAR 0 30
61661: PUSH
61662: LD_INT 4
61664: PUSH
61665: LD_INT 4
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 4
61674: PUSH
61675: LD_INT 3
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 5
61684: PUSH
61685: LD_INT 4
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 5
61694: PUSH
61695: LD_INT 5
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: LD_INT 4
61704: PUSH
61705: LD_INT 5
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 3
61714: PUSH
61715: LD_INT 4
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 3
61724: PUSH
61725: LD_INT 3
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 5
61734: PUSH
61735: LD_INT 3
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 3
61744: PUSH
61745: LD_INT 5
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 0
61754: PUSH
61755: LD_INT 3
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 0
61764: PUSH
61765: LD_INT 2
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 1
61774: PUSH
61775: LD_INT 3
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 1
61784: PUSH
61785: LD_INT 4
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 0
61794: PUSH
61795: LD_INT 4
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 1
61804: NEG
61805: PUSH
61806: LD_INT 3
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 1
61815: NEG
61816: PUSH
61817: LD_INT 2
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 2
61826: PUSH
61827: LD_INT 4
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 2
61836: NEG
61837: PUSH
61838: LD_INT 2
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 4
61847: NEG
61848: PUSH
61849: LD_INT 0
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 4
61858: NEG
61859: PUSH
61860: LD_INT 1
61862: NEG
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 3
61870: NEG
61871: PUSH
61872: LD_INT 0
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 3
61881: NEG
61882: PUSH
61883: LD_INT 1
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 4
61892: NEG
61893: PUSH
61894: LD_INT 1
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 5
61903: NEG
61904: PUSH
61905: LD_INT 0
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 5
61914: NEG
61915: PUSH
61916: LD_INT 1
61918: NEG
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 5
61926: NEG
61927: PUSH
61928: LD_INT 2
61930: NEG
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 3
61938: NEG
61939: PUSH
61940: LD_INT 2
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 3
61949: NEG
61950: PUSH
61951: LD_INT 3
61953: NEG
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 3
61961: NEG
61962: PUSH
61963: LD_INT 4
61965: NEG
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 2
61973: NEG
61974: PUSH
61975: LD_INT 3
61977: NEG
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 2
61985: NEG
61986: PUSH
61987: LD_INT 2
61989: NEG
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 3
61997: NEG
61998: PUSH
61999: LD_INT 2
62001: NEG
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 4
62009: NEG
62010: PUSH
62011: LD_INT 3
62013: NEG
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 4
62021: NEG
62022: PUSH
62023: LD_INT 4
62025: NEG
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 2
62033: NEG
62034: PUSH
62035: LD_INT 4
62037: NEG
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 4
62045: NEG
62046: PUSH
62047: LD_INT 2
62049: NEG
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 0
62057: PUSH
62058: LD_INT 4
62060: NEG
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 0
62068: PUSH
62069: LD_INT 5
62071: NEG
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 1
62079: PUSH
62080: LD_INT 4
62082: NEG
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 1
62090: PUSH
62091: LD_INT 3
62093: NEG
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 0
62101: PUSH
62102: LD_INT 3
62104: NEG
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: LD_INT 1
62112: NEG
62113: PUSH
62114: LD_INT 4
62116: NEG
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 1
62124: NEG
62125: PUSH
62126: LD_INT 5
62128: NEG
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: LD_INT 2
62136: PUSH
62137: LD_INT 3
62139: NEG
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 2
62147: NEG
62148: PUSH
62149: LD_INT 5
62151: NEG
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
62204: LD_ADDR_VAR 0 31
62208: PUSH
62209: LD_INT 0
62211: PUSH
62212: LD_INT 4
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 0
62221: PUSH
62222: LD_INT 3
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 1
62231: PUSH
62232: LD_INT 4
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 1
62241: PUSH
62242: LD_INT 5
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 0
62251: PUSH
62252: LD_INT 5
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 1
62261: NEG
62262: PUSH
62263: LD_INT 4
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 1
62272: NEG
62273: PUSH
62274: LD_INT 3
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 2
62283: PUSH
62284: LD_INT 5
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 2
62293: NEG
62294: PUSH
62295: LD_INT 3
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 3
62304: NEG
62305: PUSH
62306: LD_INT 0
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 3
62315: NEG
62316: PUSH
62317: LD_INT 1
62319: NEG
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 2
62327: NEG
62328: PUSH
62329: LD_INT 0
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 2
62338: NEG
62339: PUSH
62340: LD_INT 1
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 3
62349: NEG
62350: PUSH
62351: LD_INT 1
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 4
62360: NEG
62361: PUSH
62362: LD_INT 0
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 4
62371: NEG
62372: PUSH
62373: LD_INT 1
62375: NEG
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: LD_INT 4
62383: NEG
62384: PUSH
62385: LD_INT 2
62387: NEG
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 2
62395: NEG
62396: PUSH
62397: LD_INT 2
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 4
62406: NEG
62407: PUSH
62408: LD_INT 4
62410: NEG
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: LD_INT 4
62418: NEG
62419: PUSH
62420: LD_INT 5
62422: NEG
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 3
62430: NEG
62431: PUSH
62432: LD_INT 4
62434: NEG
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 3
62442: NEG
62443: PUSH
62444: LD_INT 3
62446: NEG
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 4
62454: NEG
62455: PUSH
62456: LD_INT 3
62458: NEG
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 5
62466: NEG
62467: PUSH
62468: LD_INT 4
62470: NEG
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 5
62478: NEG
62479: PUSH
62480: LD_INT 5
62482: NEG
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 3
62490: NEG
62491: PUSH
62492: LD_INT 5
62494: NEG
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 5
62502: NEG
62503: PUSH
62504: LD_INT 3
62506: NEG
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 0
62514: PUSH
62515: LD_INT 3
62517: NEG
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: LD_INT 0
62525: PUSH
62526: LD_INT 4
62528: NEG
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: PUSH
62534: LD_INT 1
62536: PUSH
62537: LD_INT 3
62539: NEG
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 1
62547: PUSH
62548: LD_INT 2
62550: NEG
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 0
62558: PUSH
62559: LD_INT 2
62561: NEG
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 1
62569: NEG
62570: PUSH
62571: LD_INT 3
62573: NEG
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 1
62581: NEG
62582: PUSH
62583: LD_INT 4
62585: NEG
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 2
62593: PUSH
62594: LD_INT 2
62596: NEG
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 2
62604: NEG
62605: PUSH
62606: LD_INT 4
62608: NEG
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 4
62616: PUSH
62617: LD_INT 0
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 4
62626: PUSH
62627: LD_INT 1
62629: NEG
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 5
62637: PUSH
62638: LD_INT 0
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: PUSH
62645: LD_INT 5
62647: PUSH
62648: LD_INT 1
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PUSH
62655: LD_INT 4
62657: PUSH
62658: LD_INT 1
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 3
62667: PUSH
62668: LD_INT 0
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 3
62677: PUSH
62678: LD_INT 1
62680: NEG
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 3
62688: PUSH
62689: LD_INT 2
62691: NEG
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: LD_INT 5
62699: PUSH
62700: LD_INT 2
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: LIST
62711: LIST
62712: LIST
62713: LIST
62714: LIST
62715: LIST
62716: LIST
62717: LIST
62718: LIST
62719: LIST
62720: LIST
62721: LIST
62722: LIST
62723: LIST
62724: LIST
62725: LIST
62726: LIST
62727: LIST
62728: LIST
62729: LIST
62730: LIST
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62754: LD_ADDR_VAR 0 32
62758: PUSH
62759: LD_INT 4
62761: NEG
62762: PUSH
62763: LD_INT 0
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 4
62772: NEG
62773: PUSH
62774: LD_INT 1
62776: NEG
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 3
62784: NEG
62785: PUSH
62786: LD_INT 0
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 3
62795: NEG
62796: PUSH
62797: LD_INT 1
62799: PUSH
62800: EMPTY
62801: LIST
62802: LIST
62803: PUSH
62804: LD_INT 4
62806: NEG
62807: PUSH
62808: LD_INT 1
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: LD_INT 5
62817: NEG
62818: PUSH
62819: LD_INT 0
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: LD_INT 5
62828: NEG
62829: PUSH
62830: LD_INT 1
62832: NEG
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 5
62840: NEG
62841: PUSH
62842: LD_INT 2
62844: NEG
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 3
62852: NEG
62853: PUSH
62854: LD_INT 2
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: PUSH
62861: LD_INT 3
62863: NEG
62864: PUSH
62865: LD_INT 3
62867: NEG
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 3
62875: NEG
62876: PUSH
62877: LD_INT 4
62879: NEG
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 2
62887: NEG
62888: PUSH
62889: LD_INT 3
62891: NEG
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 2
62899: NEG
62900: PUSH
62901: LD_INT 2
62903: NEG
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 3
62911: NEG
62912: PUSH
62913: LD_INT 2
62915: NEG
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 4
62923: NEG
62924: PUSH
62925: LD_INT 3
62927: NEG
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 4
62935: NEG
62936: PUSH
62937: LD_INT 4
62939: NEG
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: LD_INT 2
62947: NEG
62948: PUSH
62949: LD_INT 4
62951: NEG
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 4
62959: NEG
62960: PUSH
62961: LD_INT 2
62963: NEG
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 0
62971: PUSH
62972: LD_INT 4
62974: NEG
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 0
62982: PUSH
62983: LD_INT 5
62985: NEG
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 1
62993: PUSH
62994: LD_INT 4
62996: NEG
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: LD_INT 1
63004: PUSH
63005: LD_INT 3
63007: NEG
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: LD_INT 0
63015: PUSH
63016: LD_INT 3
63018: NEG
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 1
63026: NEG
63027: PUSH
63028: LD_INT 4
63030: NEG
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 1
63038: NEG
63039: PUSH
63040: LD_INT 5
63042: NEG
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 2
63050: PUSH
63051: LD_INT 3
63053: NEG
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PUSH
63059: LD_INT 2
63061: NEG
63062: PUSH
63063: LD_INT 5
63065: NEG
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 3
63073: PUSH
63074: LD_INT 0
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: LD_INT 3
63083: PUSH
63084: LD_INT 1
63086: NEG
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 4
63094: PUSH
63095: LD_INT 0
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: LD_INT 4
63104: PUSH
63105: LD_INT 1
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 3
63114: PUSH
63115: LD_INT 1
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: LD_INT 2
63124: PUSH
63125: LD_INT 0
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 2
63134: PUSH
63135: LD_INT 1
63137: NEG
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: PUSH
63143: LD_INT 2
63145: PUSH
63146: LD_INT 2
63148: NEG
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: PUSH
63154: LD_INT 4
63156: PUSH
63157: LD_INT 2
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: PUSH
63164: LD_INT 4
63166: PUSH
63167: LD_INT 4
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PUSH
63174: LD_INT 4
63176: PUSH
63177: LD_INT 3
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: LD_INT 5
63186: PUSH
63187: LD_INT 4
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: LD_INT 5
63196: PUSH
63197: LD_INT 5
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 4
63206: PUSH
63207: LD_INT 5
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 3
63216: PUSH
63217: LD_INT 4
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 3
63226: PUSH
63227: LD_INT 3
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 5
63236: PUSH
63237: LD_INT 3
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 3
63246: PUSH
63247: LD_INT 5
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: LIST
63287: LIST
63288: LIST
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
63301: LD_ADDR_VAR 0 33
63305: PUSH
63306: LD_INT 4
63308: NEG
63309: PUSH
63310: LD_INT 4
63312: NEG
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 4
63320: NEG
63321: PUSH
63322: LD_INT 5
63324: NEG
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_INT 3
63332: NEG
63333: PUSH
63334: LD_INT 4
63336: NEG
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: PUSH
63342: LD_INT 3
63344: NEG
63345: PUSH
63346: LD_INT 3
63348: NEG
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 4
63356: NEG
63357: PUSH
63358: LD_INT 3
63360: NEG
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 5
63368: NEG
63369: PUSH
63370: LD_INT 4
63372: NEG
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 5
63380: NEG
63381: PUSH
63382: LD_INT 5
63384: NEG
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 3
63392: NEG
63393: PUSH
63394: LD_INT 5
63396: NEG
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: LD_INT 5
63404: NEG
63405: PUSH
63406: LD_INT 3
63408: NEG
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PUSH
63414: LD_INT 0
63416: PUSH
63417: LD_INT 3
63419: NEG
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 0
63427: PUSH
63428: LD_INT 4
63430: NEG
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 1
63438: PUSH
63439: LD_INT 3
63441: NEG
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 1
63449: PUSH
63450: LD_INT 2
63452: NEG
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: LD_INT 0
63460: PUSH
63461: LD_INT 2
63463: NEG
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 1
63471: NEG
63472: PUSH
63473: LD_INT 3
63475: NEG
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: PUSH
63481: LD_INT 1
63483: NEG
63484: PUSH
63485: LD_INT 4
63487: NEG
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 2
63495: PUSH
63496: LD_INT 2
63498: NEG
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 2
63506: NEG
63507: PUSH
63508: LD_INT 4
63510: NEG
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: PUSH
63516: LD_INT 4
63518: PUSH
63519: LD_INT 0
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: LD_INT 4
63528: PUSH
63529: LD_INT 1
63531: NEG
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 5
63539: PUSH
63540: LD_INT 0
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_INT 5
63549: PUSH
63550: LD_INT 1
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: LD_INT 4
63559: PUSH
63560: LD_INT 1
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: LD_INT 3
63569: PUSH
63570: LD_INT 0
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 3
63579: PUSH
63580: LD_INT 1
63582: NEG
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 3
63590: PUSH
63591: LD_INT 2
63593: NEG
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 5
63601: PUSH
63602: LD_INT 2
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 3
63611: PUSH
63612: LD_INT 3
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 3
63621: PUSH
63622: LD_INT 2
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: PUSH
63629: LD_INT 4
63631: PUSH
63632: LD_INT 3
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: PUSH
63639: LD_INT 4
63641: PUSH
63642: LD_INT 4
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: PUSH
63649: LD_INT 3
63651: PUSH
63652: LD_INT 4
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: LD_INT 2
63661: PUSH
63662: LD_INT 3
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: PUSH
63669: LD_INT 2
63671: PUSH
63672: LD_INT 2
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_INT 4
63681: PUSH
63682: LD_INT 2
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: LD_INT 2
63691: PUSH
63692: LD_INT 4
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: PUSH
63699: LD_INT 0
63701: PUSH
63702: LD_INT 4
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 0
63711: PUSH
63712: LD_INT 3
63714: PUSH
63715: EMPTY
63716: LIST
63717: LIST
63718: PUSH
63719: LD_INT 1
63721: PUSH
63722: LD_INT 4
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 1
63731: PUSH
63732: LD_INT 5
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: LD_INT 0
63741: PUSH
63742: LD_INT 5
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PUSH
63749: LD_INT 1
63751: NEG
63752: PUSH
63753: LD_INT 4
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 1
63762: NEG
63763: PUSH
63764: LD_INT 3
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 2
63773: PUSH
63774: LD_INT 5
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 2
63783: NEG
63784: PUSH
63785: LD_INT 3
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: LIST
63796: LIST
63797: LIST
63798: LIST
63799: LIST
63800: LIST
63801: LIST
63802: LIST
63803: LIST
63804: LIST
63805: LIST
63806: LIST
63807: LIST
63808: LIST
63809: LIST
63810: LIST
63811: LIST
63812: LIST
63813: LIST
63814: LIST
63815: LIST
63816: LIST
63817: LIST
63818: LIST
63819: LIST
63820: LIST
63821: LIST
63822: LIST
63823: LIST
63824: LIST
63825: LIST
63826: LIST
63827: LIST
63828: LIST
63829: LIST
63830: LIST
63831: LIST
63832: LIST
63833: LIST
63834: LIST
63835: LIST
63836: LIST
63837: LIST
63838: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63839: LD_ADDR_VAR 0 34
63843: PUSH
63844: LD_INT 0
63846: PUSH
63847: LD_INT 4
63849: NEG
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 0
63857: PUSH
63858: LD_INT 5
63860: NEG
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: LD_INT 1
63868: PUSH
63869: LD_INT 4
63871: NEG
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: LD_INT 1
63879: PUSH
63880: LD_INT 3
63882: NEG
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: LD_INT 0
63890: PUSH
63891: LD_INT 3
63893: NEG
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: LD_INT 1
63901: NEG
63902: PUSH
63903: LD_INT 4
63905: NEG
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: PUSH
63911: LD_INT 1
63913: NEG
63914: PUSH
63915: LD_INT 5
63917: NEG
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: PUSH
63923: LD_INT 2
63925: PUSH
63926: LD_INT 3
63928: NEG
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: LD_INT 2
63936: NEG
63937: PUSH
63938: LD_INT 5
63940: NEG
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 3
63948: PUSH
63949: LD_INT 0
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PUSH
63956: LD_INT 3
63958: PUSH
63959: LD_INT 1
63961: NEG
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 4
63969: PUSH
63970: LD_INT 0
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 4
63979: PUSH
63980: LD_INT 1
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 3
63989: PUSH
63990: LD_INT 1
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 2
63999: PUSH
64000: LD_INT 0
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PUSH
64007: LD_INT 2
64009: PUSH
64010: LD_INT 1
64012: NEG
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: PUSH
64018: LD_INT 2
64020: PUSH
64021: LD_INT 2
64023: NEG
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 4
64031: PUSH
64032: LD_INT 2
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: PUSH
64039: LD_INT 4
64041: PUSH
64042: LD_INT 4
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PUSH
64049: LD_INT 4
64051: PUSH
64052: LD_INT 3
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: PUSH
64059: LD_INT 5
64061: PUSH
64062: LD_INT 4
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: LD_INT 5
64071: PUSH
64072: LD_INT 5
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: LD_INT 4
64081: PUSH
64082: LD_INT 5
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: PUSH
64089: LD_INT 3
64091: PUSH
64092: LD_INT 4
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: PUSH
64099: LD_INT 3
64101: PUSH
64102: LD_INT 3
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: PUSH
64109: LD_INT 5
64111: PUSH
64112: LD_INT 3
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: PUSH
64119: LD_INT 3
64121: PUSH
64122: LD_INT 5
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: PUSH
64129: LD_INT 0
64131: PUSH
64132: LD_INT 3
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: PUSH
64139: LD_INT 0
64141: PUSH
64142: LD_INT 2
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 1
64151: PUSH
64152: LD_INT 3
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_INT 1
64161: PUSH
64162: LD_INT 4
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: LD_INT 0
64171: PUSH
64172: LD_INT 4
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: LD_INT 1
64181: NEG
64182: PUSH
64183: LD_INT 3
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 1
64192: NEG
64193: PUSH
64194: LD_INT 2
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 2
64203: PUSH
64204: LD_INT 4
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 2
64213: NEG
64214: PUSH
64215: LD_INT 2
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: PUSH
64222: LD_INT 4
64224: NEG
64225: PUSH
64226: LD_INT 0
64228: PUSH
64229: EMPTY
64230: LIST
64231: LIST
64232: PUSH
64233: LD_INT 4
64235: NEG
64236: PUSH
64237: LD_INT 1
64239: NEG
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: PUSH
64245: LD_INT 3
64247: NEG
64248: PUSH
64249: LD_INT 0
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: LD_INT 3
64258: NEG
64259: PUSH
64260: LD_INT 1
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 4
64269: NEG
64270: PUSH
64271: LD_INT 1
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 5
64280: NEG
64281: PUSH
64282: LD_INT 0
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: LD_INT 5
64291: NEG
64292: PUSH
64293: LD_INT 1
64295: NEG
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 5
64303: NEG
64304: PUSH
64305: LD_INT 2
64307: NEG
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: LD_INT 3
64315: NEG
64316: PUSH
64317: LD_INT 2
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: LIST
64328: LIST
64329: LIST
64330: LIST
64331: LIST
64332: LIST
64333: LIST
64334: LIST
64335: LIST
64336: LIST
64337: LIST
64338: LIST
64339: LIST
64340: LIST
64341: LIST
64342: LIST
64343: LIST
64344: LIST
64345: LIST
64346: LIST
64347: LIST
64348: LIST
64349: LIST
64350: LIST
64351: LIST
64352: LIST
64353: LIST
64354: LIST
64355: LIST
64356: LIST
64357: LIST
64358: LIST
64359: LIST
64360: LIST
64361: LIST
64362: LIST
64363: LIST
64364: LIST
64365: LIST
64366: LIST
64367: LIST
64368: LIST
64369: LIST
64370: ST_TO_ADDR
// end ; end ;
64371: GO 64374
64373: POP
// case btype of b_depot , b_warehouse :
64374: LD_VAR 0 1
64378: PUSH
64379: LD_INT 0
64381: DOUBLE
64382: EQUAL
64383: IFTRUE 64393
64385: LD_INT 1
64387: DOUBLE
64388: EQUAL
64389: IFTRUE 64393
64391: GO 64594
64393: POP
// case nation of nation_american :
64394: LD_VAR 0 5
64398: PUSH
64399: LD_INT 1
64401: DOUBLE
64402: EQUAL
64403: IFTRUE 64407
64405: GO 64463
64407: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
64408: LD_ADDR_VAR 0 9
64412: PUSH
64413: LD_VAR 0 11
64417: PUSH
64418: LD_VAR 0 12
64422: PUSH
64423: LD_VAR 0 13
64427: PUSH
64428: LD_VAR 0 14
64432: PUSH
64433: LD_VAR 0 15
64437: PUSH
64438: LD_VAR 0 16
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: PUSH
64451: LD_VAR 0 4
64455: PUSH
64456: LD_INT 1
64458: PLUS
64459: ARRAY
64460: ST_TO_ADDR
64461: GO 64592
64463: LD_INT 2
64465: DOUBLE
64466: EQUAL
64467: IFTRUE 64471
64469: GO 64527
64471: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64472: LD_ADDR_VAR 0 9
64476: PUSH
64477: LD_VAR 0 17
64481: PUSH
64482: LD_VAR 0 18
64486: PUSH
64487: LD_VAR 0 19
64491: PUSH
64492: LD_VAR 0 20
64496: PUSH
64497: LD_VAR 0 21
64501: PUSH
64502: LD_VAR 0 22
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: PUSH
64515: LD_VAR 0 4
64519: PUSH
64520: LD_INT 1
64522: PLUS
64523: ARRAY
64524: ST_TO_ADDR
64525: GO 64592
64527: LD_INT 3
64529: DOUBLE
64530: EQUAL
64531: IFTRUE 64535
64533: GO 64591
64535: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64536: LD_ADDR_VAR 0 9
64540: PUSH
64541: LD_VAR 0 23
64545: PUSH
64546: LD_VAR 0 24
64550: PUSH
64551: LD_VAR 0 25
64555: PUSH
64556: LD_VAR 0 26
64560: PUSH
64561: LD_VAR 0 27
64565: PUSH
64566: LD_VAR 0 28
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: PUSH
64579: LD_VAR 0 4
64583: PUSH
64584: LD_INT 1
64586: PLUS
64587: ARRAY
64588: ST_TO_ADDR
64589: GO 64592
64591: POP
64592: GO 65147
64594: LD_INT 2
64596: DOUBLE
64597: EQUAL
64598: IFTRUE 64608
64600: LD_INT 3
64602: DOUBLE
64603: EQUAL
64604: IFTRUE 64608
64606: GO 64664
64608: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64609: LD_ADDR_VAR 0 9
64613: PUSH
64614: LD_VAR 0 29
64618: PUSH
64619: LD_VAR 0 30
64623: PUSH
64624: LD_VAR 0 31
64628: PUSH
64629: LD_VAR 0 32
64633: PUSH
64634: LD_VAR 0 33
64638: PUSH
64639: LD_VAR 0 34
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: LIST
64648: LIST
64649: LIST
64650: LIST
64651: PUSH
64652: LD_VAR 0 4
64656: PUSH
64657: LD_INT 1
64659: PLUS
64660: ARRAY
64661: ST_TO_ADDR
64662: GO 65147
64664: LD_INT 16
64666: DOUBLE
64667: EQUAL
64668: IFTRUE 64726
64670: LD_INT 17
64672: DOUBLE
64673: EQUAL
64674: IFTRUE 64726
64676: LD_INT 18
64678: DOUBLE
64679: EQUAL
64680: IFTRUE 64726
64682: LD_INT 19
64684: DOUBLE
64685: EQUAL
64686: IFTRUE 64726
64688: LD_INT 22
64690: DOUBLE
64691: EQUAL
64692: IFTRUE 64726
64694: LD_INT 20
64696: DOUBLE
64697: EQUAL
64698: IFTRUE 64726
64700: LD_INT 21
64702: DOUBLE
64703: EQUAL
64704: IFTRUE 64726
64706: LD_INT 23
64708: DOUBLE
64709: EQUAL
64710: IFTRUE 64726
64712: LD_INT 24
64714: DOUBLE
64715: EQUAL
64716: IFTRUE 64726
64718: LD_INT 25
64720: DOUBLE
64721: EQUAL
64722: IFTRUE 64726
64724: GO 64782
64726: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64727: LD_ADDR_VAR 0 9
64731: PUSH
64732: LD_VAR 0 35
64736: PUSH
64737: LD_VAR 0 36
64741: PUSH
64742: LD_VAR 0 37
64746: PUSH
64747: LD_VAR 0 38
64751: PUSH
64752: LD_VAR 0 39
64756: PUSH
64757: LD_VAR 0 40
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: LIST
64766: LIST
64767: LIST
64768: LIST
64769: PUSH
64770: LD_VAR 0 4
64774: PUSH
64775: LD_INT 1
64777: PLUS
64778: ARRAY
64779: ST_TO_ADDR
64780: GO 65147
64782: LD_INT 6
64784: DOUBLE
64785: EQUAL
64786: IFTRUE 64838
64788: LD_INT 7
64790: DOUBLE
64791: EQUAL
64792: IFTRUE 64838
64794: LD_INT 8
64796: DOUBLE
64797: EQUAL
64798: IFTRUE 64838
64800: LD_INT 13
64802: DOUBLE
64803: EQUAL
64804: IFTRUE 64838
64806: LD_INT 12
64808: DOUBLE
64809: EQUAL
64810: IFTRUE 64838
64812: LD_INT 15
64814: DOUBLE
64815: EQUAL
64816: IFTRUE 64838
64818: LD_INT 11
64820: DOUBLE
64821: EQUAL
64822: IFTRUE 64838
64824: LD_INT 14
64826: DOUBLE
64827: EQUAL
64828: IFTRUE 64838
64830: LD_INT 10
64832: DOUBLE
64833: EQUAL
64834: IFTRUE 64838
64836: GO 64894
64838: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64839: LD_ADDR_VAR 0 9
64843: PUSH
64844: LD_VAR 0 41
64848: PUSH
64849: LD_VAR 0 42
64853: PUSH
64854: LD_VAR 0 43
64858: PUSH
64859: LD_VAR 0 44
64863: PUSH
64864: LD_VAR 0 45
64868: PUSH
64869: LD_VAR 0 46
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: LIST
64878: LIST
64879: LIST
64880: LIST
64881: PUSH
64882: LD_VAR 0 4
64886: PUSH
64887: LD_INT 1
64889: PLUS
64890: ARRAY
64891: ST_TO_ADDR
64892: GO 65147
64894: LD_INT 36
64896: DOUBLE
64897: EQUAL
64898: IFTRUE 64902
64900: GO 64958
64902: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64903: LD_ADDR_VAR 0 9
64907: PUSH
64908: LD_VAR 0 47
64912: PUSH
64913: LD_VAR 0 48
64917: PUSH
64918: LD_VAR 0 49
64922: PUSH
64923: LD_VAR 0 50
64927: PUSH
64928: LD_VAR 0 51
64932: PUSH
64933: LD_VAR 0 52
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: LIST
64942: LIST
64943: LIST
64944: LIST
64945: PUSH
64946: LD_VAR 0 4
64950: PUSH
64951: LD_INT 1
64953: PLUS
64954: ARRAY
64955: ST_TO_ADDR
64956: GO 65147
64958: LD_INT 4
64960: DOUBLE
64961: EQUAL
64962: IFTRUE 64984
64964: LD_INT 5
64966: DOUBLE
64967: EQUAL
64968: IFTRUE 64984
64970: LD_INT 34
64972: DOUBLE
64973: EQUAL
64974: IFTRUE 64984
64976: LD_INT 37
64978: DOUBLE
64979: EQUAL
64980: IFTRUE 64984
64982: GO 65040
64984: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64985: LD_ADDR_VAR 0 9
64989: PUSH
64990: LD_VAR 0 53
64994: PUSH
64995: LD_VAR 0 54
64999: PUSH
65000: LD_VAR 0 55
65004: PUSH
65005: LD_VAR 0 56
65009: PUSH
65010: LD_VAR 0 57
65014: PUSH
65015: LD_VAR 0 58
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: LIST
65024: LIST
65025: LIST
65026: LIST
65027: PUSH
65028: LD_VAR 0 4
65032: PUSH
65033: LD_INT 1
65035: PLUS
65036: ARRAY
65037: ST_TO_ADDR
65038: GO 65147
65040: LD_INT 31
65042: DOUBLE
65043: EQUAL
65044: IFTRUE 65090
65046: LD_INT 32
65048: DOUBLE
65049: EQUAL
65050: IFTRUE 65090
65052: LD_INT 33
65054: DOUBLE
65055: EQUAL
65056: IFTRUE 65090
65058: LD_INT 27
65060: DOUBLE
65061: EQUAL
65062: IFTRUE 65090
65064: LD_INT 26
65066: DOUBLE
65067: EQUAL
65068: IFTRUE 65090
65070: LD_INT 28
65072: DOUBLE
65073: EQUAL
65074: IFTRUE 65090
65076: LD_INT 29
65078: DOUBLE
65079: EQUAL
65080: IFTRUE 65090
65082: LD_INT 30
65084: DOUBLE
65085: EQUAL
65086: IFTRUE 65090
65088: GO 65146
65090: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
65091: LD_ADDR_VAR 0 9
65095: PUSH
65096: LD_VAR 0 59
65100: PUSH
65101: LD_VAR 0 60
65105: PUSH
65106: LD_VAR 0 61
65110: PUSH
65111: LD_VAR 0 62
65115: PUSH
65116: LD_VAR 0 63
65120: PUSH
65121: LD_VAR 0 64
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: PUSH
65134: LD_VAR 0 4
65138: PUSH
65139: LD_INT 1
65141: PLUS
65142: ARRAY
65143: ST_TO_ADDR
65144: GO 65147
65146: POP
// temp_list2 = [ ] ;
65147: LD_ADDR_VAR 0 10
65151: PUSH
65152: EMPTY
65153: ST_TO_ADDR
// for i in temp_list do
65154: LD_ADDR_VAR 0 8
65158: PUSH
65159: LD_VAR 0 9
65163: PUSH
65164: FOR_IN
65165: IFFALSE 65217
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
65167: LD_ADDR_VAR 0 10
65171: PUSH
65172: LD_VAR 0 10
65176: PUSH
65177: LD_VAR 0 8
65181: PUSH
65182: LD_INT 1
65184: ARRAY
65185: PUSH
65186: LD_VAR 0 2
65190: PLUS
65191: PUSH
65192: LD_VAR 0 8
65196: PUSH
65197: LD_INT 2
65199: ARRAY
65200: PUSH
65201: LD_VAR 0 3
65205: PLUS
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: EMPTY
65212: LIST
65213: ADD
65214: ST_TO_ADDR
65215: GO 65164
65217: POP
65218: POP
// result = temp_list2 ;
65219: LD_ADDR_VAR 0 7
65223: PUSH
65224: LD_VAR 0 10
65228: ST_TO_ADDR
// end ;
65229: LD_VAR 0 7
65233: RET
// export function EnemyInRange ( unit , dist ) ; begin
65234: LD_INT 0
65236: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
65237: LD_ADDR_VAR 0 3
65241: PUSH
65242: LD_VAR 0 1
65246: PPUSH
65247: CALL_OW 255
65251: PPUSH
65252: LD_VAR 0 1
65256: PPUSH
65257: CALL_OW 250
65261: PPUSH
65262: LD_VAR 0 1
65266: PPUSH
65267: CALL_OW 251
65271: PPUSH
65272: LD_VAR 0 2
65276: PPUSH
65277: CALL 38491 0 4
65281: PUSH
65282: LD_INT 4
65284: ARRAY
65285: ST_TO_ADDR
// end ;
65286: LD_VAR 0 3
65290: RET
// export function PlayerSeeMe ( unit ) ; begin
65291: LD_INT 0
65293: PPUSH
// result := See ( your_side , unit ) ;
65294: LD_ADDR_VAR 0 2
65298: PUSH
65299: LD_OWVAR 2
65303: PPUSH
65304: LD_VAR 0 1
65308: PPUSH
65309: CALL_OW 292
65313: ST_TO_ADDR
// end ;
65314: LD_VAR 0 2
65318: RET
// export function ReverseDir ( unit ) ; begin
65319: LD_INT 0
65321: PPUSH
// if not unit then
65322: LD_VAR 0 1
65326: NOT
65327: IFFALSE 65331
// exit ;
65329: GO 65354
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
65331: LD_ADDR_VAR 0 2
65335: PUSH
65336: LD_VAR 0 1
65340: PPUSH
65341: CALL_OW 254
65345: PUSH
65346: LD_INT 3
65348: PLUS
65349: PUSH
65350: LD_INT 6
65352: MOD
65353: ST_TO_ADDR
// end ;
65354: LD_VAR 0 2
65358: RET
// export function ReverseArray ( array ) ; var i ; begin
65359: LD_INT 0
65361: PPUSH
65362: PPUSH
// if not array then
65363: LD_VAR 0 1
65367: NOT
65368: IFFALSE 65372
// exit ;
65370: GO 65427
// result := [ ] ;
65372: LD_ADDR_VAR 0 2
65376: PUSH
65377: EMPTY
65378: ST_TO_ADDR
// for i := array downto 1 do
65379: LD_ADDR_VAR 0 3
65383: PUSH
65384: DOUBLE
65385: LD_VAR 0 1
65389: INC
65390: ST_TO_ADDR
65391: LD_INT 1
65393: PUSH
65394: FOR_DOWNTO
65395: IFFALSE 65425
// result := Join ( result , array [ i ] ) ;
65397: LD_ADDR_VAR 0 2
65401: PUSH
65402: LD_VAR 0 2
65406: PPUSH
65407: LD_VAR 0 1
65411: PUSH
65412: LD_VAR 0 3
65416: ARRAY
65417: PPUSH
65418: CALL 70279 0 2
65422: ST_TO_ADDR
65423: GO 65394
65425: POP
65426: POP
// end ;
65427: LD_VAR 0 2
65431: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
65432: LD_INT 0
65434: PPUSH
65435: PPUSH
65436: PPUSH
65437: PPUSH
65438: PPUSH
65439: PPUSH
// if not unit or not hexes then
65440: LD_VAR 0 1
65444: NOT
65445: IFTRUE 65454
65447: PUSH
65448: LD_VAR 0 2
65452: NOT
65453: OR
65454: IFFALSE 65458
// exit ;
65456: GO 65581
// dist := 9999 ;
65458: LD_ADDR_VAR 0 5
65462: PUSH
65463: LD_INT 9999
65465: ST_TO_ADDR
// for i = 1 to hexes do
65466: LD_ADDR_VAR 0 4
65470: PUSH
65471: DOUBLE
65472: LD_INT 1
65474: DEC
65475: ST_TO_ADDR
65476: LD_VAR 0 2
65480: PUSH
65481: FOR_TO
65482: IFFALSE 65569
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65484: LD_ADDR_VAR 0 6
65488: PUSH
65489: LD_VAR 0 1
65493: PPUSH
65494: LD_VAR 0 2
65498: PUSH
65499: LD_VAR 0 4
65503: ARRAY
65504: PUSH
65505: LD_INT 1
65507: ARRAY
65508: PPUSH
65509: LD_VAR 0 2
65513: PUSH
65514: LD_VAR 0 4
65518: ARRAY
65519: PUSH
65520: LD_INT 2
65522: ARRAY
65523: PPUSH
65524: CALL_OW 297
65528: ST_TO_ADDR
// if tdist < dist then
65529: LD_VAR 0 6
65533: PUSH
65534: LD_VAR 0 5
65538: LESS
65539: IFFALSE 65567
// begin hex := hexes [ i ] ;
65541: LD_ADDR_VAR 0 8
65545: PUSH
65546: LD_VAR 0 2
65550: PUSH
65551: LD_VAR 0 4
65555: ARRAY
65556: ST_TO_ADDR
// dist := tdist ;
65557: LD_ADDR_VAR 0 5
65561: PUSH
65562: LD_VAR 0 6
65566: ST_TO_ADDR
// end ; end ;
65567: GO 65481
65569: POP
65570: POP
// result := hex ;
65571: LD_ADDR_VAR 0 3
65575: PUSH
65576: LD_VAR 0 8
65580: ST_TO_ADDR
// end ;
65581: LD_VAR 0 3
65585: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65586: LD_INT 0
65588: PPUSH
65589: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65590: LD_VAR 0 1
65594: NOT
65595: IFTRUE 65634
65597: PUSH
65598: LD_VAR 0 1
65602: PUSH
65603: LD_INT 21
65605: PUSH
65606: LD_INT 2
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 23
65615: PUSH
65616: LD_INT 2
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PPUSH
65627: CALL_OW 69
65631: IN
65632: NOT
65633: OR
65634: IFFALSE 65638
// exit ;
65636: GO 65685
// for i = 1 to 3 do
65638: LD_ADDR_VAR 0 3
65642: PUSH
65643: DOUBLE
65644: LD_INT 1
65646: DEC
65647: ST_TO_ADDR
65648: LD_INT 3
65650: PUSH
65651: FOR_TO
65652: IFFALSE 65683
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65654: LD_VAR 0 1
65658: PPUSH
65659: CALL_OW 250
65663: PPUSH
65664: LD_VAR 0 1
65668: PPUSH
65669: CALL_OW 251
65673: PPUSH
65674: LD_INT 1
65676: PPUSH
65677: CALL_OW 453
65681: GO 65651
65683: POP
65684: POP
// end ;
65685: LD_VAR 0 2
65689: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65690: LD_INT 0
65692: PPUSH
65693: PPUSH
65694: PPUSH
65695: PPUSH
65696: PPUSH
65697: PPUSH
// if not unit or not enemy_unit then
65698: LD_VAR 0 1
65702: NOT
65703: IFTRUE 65712
65705: PUSH
65706: LD_VAR 0 2
65710: NOT
65711: OR
65712: IFFALSE 65716
// exit ;
65714: GO 66197
// if GetLives ( i ) < 250 then
65716: LD_VAR 0 4
65720: PPUSH
65721: CALL_OW 256
65725: PUSH
65726: LD_INT 250
65728: LESS
65729: IFFALSE 65742
// begin ComAutodestruct ( i ) ;
65731: LD_VAR 0 4
65735: PPUSH
65736: CALL 65586 0 1
// exit ;
65740: GO 66197
// end ; x := GetX ( enemy_unit ) ;
65742: LD_ADDR_VAR 0 7
65746: PUSH
65747: LD_VAR 0 2
65751: PPUSH
65752: CALL_OW 250
65756: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65757: LD_ADDR_VAR 0 8
65761: PUSH
65762: LD_VAR 0 2
65766: PPUSH
65767: CALL_OW 251
65771: ST_TO_ADDR
// if not x or not y then
65772: LD_VAR 0 7
65776: NOT
65777: IFTRUE 65786
65779: PUSH
65780: LD_VAR 0 8
65784: NOT
65785: OR
65786: IFFALSE 65790
// exit ;
65788: GO 66197
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65790: LD_ADDR_VAR 0 6
65794: PUSH
65795: LD_VAR 0 7
65799: PPUSH
65800: LD_INT 0
65802: PPUSH
65803: LD_INT 4
65805: PPUSH
65806: CALL_OW 272
65810: PUSH
65811: LD_VAR 0 8
65815: PPUSH
65816: LD_INT 0
65818: PPUSH
65819: LD_INT 4
65821: PPUSH
65822: CALL_OW 273
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_VAR 0 7
65835: PPUSH
65836: LD_INT 1
65838: PPUSH
65839: LD_INT 4
65841: PPUSH
65842: CALL_OW 272
65846: PUSH
65847: LD_VAR 0 8
65851: PPUSH
65852: LD_INT 1
65854: PPUSH
65855: LD_INT 4
65857: PPUSH
65858: CALL_OW 273
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: PUSH
65867: LD_VAR 0 7
65871: PPUSH
65872: LD_INT 2
65874: PPUSH
65875: LD_INT 4
65877: PPUSH
65878: CALL_OW 272
65882: PUSH
65883: LD_VAR 0 8
65887: PPUSH
65888: LD_INT 2
65890: PPUSH
65891: LD_INT 4
65893: PPUSH
65894: CALL_OW 273
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: LD_VAR 0 7
65907: PPUSH
65908: LD_INT 3
65910: PPUSH
65911: LD_INT 4
65913: PPUSH
65914: CALL_OW 272
65918: PUSH
65919: LD_VAR 0 8
65923: PPUSH
65924: LD_INT 3
65926: PPUSH
65927: LD_INT 4
65929: PPUSH
65930: CALL_OW 273
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: LD_VAR 0 7
65943: PPUSH
65944: LD_INT 4
65946: PPUSH
65947: LD_INT 4
65949: PPUSH
65950: CALL_OW 272
65954: PUSH
65955: LD_VAR 0 8
65959: PPUSH
65960: LD_INT 4
65962: PPUSH
65963: LD_INT 4
65965: PPUSH
65966: CALL_OW 273
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PUSH
65975: LD_VAR 0 7
65979: PPUSH
65980: LD_INT 5
65982: PPUSH
65983: LD_INT 4
65985: PPUSH
65986: CALL_OW 272
65990: PUSH
65991: LD_VAR 0 8
65995: PPUSH
65996: LD_INT 5
65998: PPUSH
65999: LD_INT 4
66001: PPUSH
66002: CALL_OW 273
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: LIST
66015: LIST
66016: LIST
66017: LIST
66018: ST_TO_ADDR
// for i = tmp downto 1 do
66019: LD_ADDR_VAR 0 4
66023: PUSH
66024: DOUBLE
66025: LD_VAR 0 6
66029: INC
66030: ST_TO_ADDR
66031: LD_INT 1
66033: PUSH
66034: FOR_DOWNTO
66035: IFFALSE 66138
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
66037: LD_VAR 0 6
66041: PUSH
66042: LD_VAR 0 4
66046: ARRAY
66047: PUSH
66048: LD_INT 1
66050: ARRAY
66051: PPUSH
66052: LD_VAR 0 6
66056: PUSH
66057: LD_VAR 0 4
66061: ARRAY
66062: PUSH
66063: LD_INT 2
66065: ARRAY
66066: PPUSH
66067: CALL_OW 488
66071: NOT
66072: IFTRUE 66114
66074: PUSH
66075: LD_VAR 0 6
66079: PUSH
66080: LD_VAR 0 4
66084: ARRAY
66085: PUSH
66086: LD_INT 1
66088: ARRAY
66089: PPUSH
66090: LD_VAR 0 6
66094: PUSH
66095: LD_VAR 0 4
66099: ARRAY
66100: PUSH
66101: LD_INT 2
66103: ARRAY
66104: PPUSH
66105: CALL_OW 428
66109: PUSH
66110: LD_INT 0
66112: NONEQUAL
66113: OR
66114: IFFALSE 66136
// tmp := Delete ( tmp , i ) ;
66116: LD_ADDR_VAR 0 6
66120: PUSH
66121: LD_VAR 0 6
66125: PPUSH
66126: LD_VAR 0 4
66130: PPUSH
66131: CALL_OW 3
66135: ST_TO_ADDR
66136: GO 66034
66138: POP
66139: POP
// j := GetClosestHex ( unit , tmp ) ;
66140: LD_ADDR_VAR 0 5
66144: PUSH
66145: LD_VAR 0 1
66149: PPUSH
66150: LD_VAR 0 6
66154: PPUSH
66155: CALL 65432 0 2
66159: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
66160: LD_VAR 0 1
66164: PPUSH
66165: LD_VAR 0 5
66169: PUSH
66170: LD_INT 1
66172: ARRAY
66173: PPUSH
66174: LD_VAR 0 5
66178: PUSH
66179: LD_INT 2
66181: ARRAY
66182: PPUSH
66183: CALL_OW 111
// result := j ;
66187: LD_ADDR_VAR 0 3
66191: PUSH
66192: LD_VAR 0 5
66196: ST_TO_ADDR
// end ;
66197: LD_VAR 0 3
66201: RET
// export function PrepareApemanSoldier ( ) ; begin
66202: LD_INT 0
66204: PPUSH
// uc_nation := 0 ;
66205: LD_ADDR_OWVAR 21
66209: PUSH
66210: LD_INT 0
66212: ST_TO_ADDR
// hc_sex := sex_male ;
66213: LD_ADDR_OWVAR 27
66217: PUSH
66218: LD_INT 1
66220: ST_TO_ADDR
// hc_name :=  ;
66221: LD_ADDR_OWVAR 26
66225: PUSH
66226: LD_STRING 
66228: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
66229: LD_ADDR_OWVAR 28
66233: PUSH
66234: LD_INT 15
66236: ST_TO_ADDR
// hc_gallery :=  ;
66237: LD_ADDR_OWVAR 33
66241: PUSH
66242: LD_STRING 
66244: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66245: LD_ADDR_OWVAR 31
66249: PUSH
66250: LD_INT 0
66252: PPUSH
66253: LD_INT 3
66255: PPUSH
66256: CALL_OW 12
66260: PUSH
66261: LD_INT 0
66263: PPUSH
66264: LD_INT 3
66266: PPUSH
66267: CALL_OW 12
66271: PUSH
66272: LD_INT 0
66274: PUSH
66275: LD_INT 0
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: LIST
66282: LIST
66283: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
66284: LD_ADDR_OWVAR 29
66288: PUSH
66289: LD_INT 10
66291: PUSH
66292: LD_INT 12
66294: PUSH
66295: EMPTY
66296: LIST
66297: LIST
66298: ST_TO_ADDR
// end ;
66299: LD_VAR 0 1
66303: RET
// export function PrepareApemanEngineer ( ) ; begin
66304: LD_INT 0
66306: PPUSH
// uc_nation := 0 ;
66307: LD_ADDR_OWVAR 21
66311: PUSH
66312: LD_INT 0
66314: ST_TO_ADDR
// hc_sex := sex_male ;
66315: LD_ADDR_OWVAR 27
66319: PUSH
66320: LD_INT 1
66322: ST_TO_ADDR
// hc_name :=  ;
66323: LD_ADDR_OWVAR 26
66327: PUSH
66328: LD_STRING 
66330: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
66331: LD_ADDR_OWVAR 28
66335: PUSH
66336: LD_INT 16
66338: ST_TO_ADDR
// hc_gallery :=  ;
66339: LD_ADDR_OWVAR 33
66343: PUSH
66344: LD_STRING 
66346: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66347: LD_ADDR_OWVAR 31
66351: PUSH
66352: LD_INT 0
66354: PPUSH
66355: LD_INT 3
66357: PPUSH
66358: CALL_OW 12
66362: PUSH
66363: LD_INT 0
66365: PPUSH
66366: LD_INT 3
66368: PPUSH
66369: CALL_OW 12
66373: PUSH
66374: LD_INT 0
66376: PUSH
66377: LD_INT 0
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: LIST
66384: LIST
66385: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
66386: LD_ADDR_OWVAR 29
66390: PUSH
66391: LD_INT 10
66393: PUSH
66394: LD_INT 12
66396: PUSH
66397: EMPTY
66398: LIST
66399: LIST
66400: ST_TO_ADDR
// end ;
66401: LD_VAR 0 1
66405: RET
// export function PrepareApeman ( agressivity ) ; begin
66406: LD_INT 0
66408: PPUSH
// uc_side := 0 ;
66409: LD_ADDR_OWVAR 20
66413: PUSH
66414: LD_INT 0
66416: ST_TO_ADDR
// uc_nation := 0 ;
66417: LD_ADDR_OWVAR 21
66421: PUSH
66422: LD_INT 0
66424: ST_TO_ADDR
// hc_sex := sex_male ;
66425: LD_ADDR_OWVAR 27
66429: PUSH
66430: LD_INT 1
66432: ST_TO_ADDR
// hc_class := class_apeman ;
66433: LD_ADDR_OWVAR 28
66437: PUSH
66438: LD_INT 12
66440: ST_TO_ADDR
// hc_gallery :=  ;
66441: LD_ADDR_OWVAR 33
66445: PUSH
66446: LD_STRING 
66448: ST_TO_ADDR
// hc_name :=  ;
66449: LD_ADDR_OWVAR 26
66453: PUSH
66454: LD_STRING 
66456: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
66457: LD_ADDR_OWVAR 29
66461: PUSH
66462: LD_INT 10
66464: PUSH
66465: LD_INT 12
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: ST_TO_ADDR
// if agressivity = 0 then
66472: LD_VAR 0 1
66476: PUSH
66477: LD_INT 0
66479: EQUAL
66480: IFFALSE 66492
// hc_agressivity := 0 else
66482: LD_ADDR_OWVAR 35
66486: PUSH
66487: LD_INT 0
66489: ST_TO_ADDR
66490: GO 66513
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66492: LD_ADDR_OWVAR 35
66496: PUSH
66497: LD_VAR 0 1
66501: NEG
66502: PPUSH
66503: LD_VAR 0 1
66507: PPUSH
66508: CALL_OW 12
66512: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66513: LD_ADDR_OWVAR 31
66517: PUSH
66518: LD_INT 0
66520: PPUSH
66521: LD_INT 3
66523: PPUSH
66524: CALL_OW 12
66528: PUSH
66529: LD_INT 0
66531: PPUSH
66532: LD_INT 3
66534: PPUSH
66535: CALL_OW 12
66539: PUSH
66540: LD_INT 0
66542: PUSH
66543: LD_INT 0
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: LIST
66550: LIST
66551: ST_TO_ADDR
// end ;
66552: LD_VAR 0 2
66556: RET
// export function PrepareTiger ( agressivity ) ; begin
66557: LD_INT 0
66559: PPUSH
// uc_side := 0 ;
66560: LD_ADDR_OWVAR 20
66564: PUSH
66565: LD_INT 0
66567: ST_TO_ADDR
// uc_nation := 0 ;
66568: LD_ADDR_OWVAR 21
66572: PUSH
66573: LD_INT 0
66575: ST_TO_ADDR
// InitHc ;
66576: CALL_OW 19
// hc_class := class_tiger ;
66580: LD_ADDR_OWVAR 28
66584: PUSH
66585: LD_INT 14
66587: ST_TO_ADDR
// hc_gallery :=  ;
66588: LD_ADDR_OWVAR 33
66592: PUSH
66593: LD_STRING 
66595: ST_TO_ADDR
// hc_name :=  ;
66596: LD_ADDR_OWVAR 26
66600: PUSH
66601: LD_STRING 
66603: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66604: LD_ADDR_OWVAR 35
66608: PUSH
66609: LD_VAR 0 1
66613: NEG
66614: PPUSH
66615: LD_VAR 0 1
66619: PPUSH
66620: CALL_OW 12
66624: ST_TO_ADDR
// end ;
66625: LD_VAR 0 2
66629: RET
// export function PrepareEnchidna ( ) ; begin
66630: LD_INT 0
66632: PPUSH
// uc_side := 0 ;
66633: LD_ADDR_OWVAR 20
66637: PUSH
66638: LD_INT 0
66640: ST_TO_ADDR
// uc_nation := 0 ;
66641: LD_ADDR_OWVAR 21
66645: PUSH
66646: LD_INT 0
66648: ST_TO_ADDR
// InitHc ;
66649: CALL_OW 19
// hc_class := class_baggie ;
66653: LD_ADDR_OWVAR 28
66657: PUSH
66658: LD_INT 13
66660: ST_TO_ADDR
// hc_gallery :=  ;
66661: LD_ADDR_OWVAR 33
66665: PUSH
66666: LD_STRING 
66668: ST_TO_ADDR
// hc_name :=  ;
66669: LD_ADDR_OWVAR 26
66673: PUSH
66674: LD_STRING 
66676: ST_TO_ADDR
// end ;
66677: LD_VAR 0 1
66681: RET
// export function PrepareFrog ( ) ; begin
66682: LD_INT 0
66684: PPUSH
// uc_side := 0 ;
66685: LD_ADDR_OWVAR 20
66689: PUSH
66690: LD_INT 0
66692: ST_TO_ADDR
// uc_nation := 0 ;
66693: LD_ADDR_OWVAR 21
66697: PUSH
66698: LD_INT 0
66700: ST_TO_ADDR
// InitHc ;
66701: CALL_OW 19
// hc_class := class_frog ;
66705: LD_ADDR_OWVAR 28
66709: PUSH
66710: LD_INT 19
66712: ST_TO_ADDR
// hc_gallery :=  ;
66713: LD_ADDR_OWVAR 33
66717: PUSH
66718: LD_STRING 
66720: ST_TO_ADDR
// hc_name :=  ;
66721: LD_ADDR_OWVAR 26
66725: PUSH
66726: LD_STRING 
66728: ST_TO_ADDR
// end ;
66729: LD_VAR 0 1
66733: RET
// export function PrepareFish ( ) ; begin
66734: LD_INT 0
66736: PPUSH
// uc_side := 0 ;
66737: LD_ADDR_OWVAR 20
66741: PUSH
66742: LD_INT 0
66744: ST_TO_ADDR
// uc_nation := 0 ;
66745: LD_ADDR_OWVAR 21
66749: PUSH
66750: LD_INT 0
66752: ST_TO_ADDR
// InitHc ;
66753: CALL_OW 19
// hc_class := class_fish ;
66757: LD_ADDR_OWVAR 28
66761: PUSH
66762: LD_INT 20
66764: ST_TO_ADDR
// hc_gallery :=  ;
66765: LD_ADDR_OWVAR 33
66769: PUSH
66770: LD_STRING 
66772: ST_TO_ADDR
// hc_name :=  ;
66773: LD_ADDR_OWVAR 26
66777: PUSH
66778: LD_STRING 
66780: ST_TO_ADDR
// end ;
66781: LD_VAR 0 1
66785: RET
// export function PrepareBird ( ) ; begin
66786: LD_INT 0
66788: PPUSH
// uc_side := 0 ;
66789: LD_ADDR_OWVAR 20
66793: PUSH
66794: LD_INT 0
66796: ST_TO_ADDR
// uc_nation := 0 ;
66797: LD_ADDR_OWVAR 21
66801: PUSH
66802: LD_INT 0
66804: ST_TO_ADDR
// InitHc ;
66805: CALL_OW 19
// hc_class := class_phororhacos ;
66809: LD_ADDR_OWVAR 28
66813: PUSH
66814: LD_INT 18
66816: ST_TO_ADDR
// hc_gallery :=  ;
66817: LD_ADDR_OWVAR 33
66821: PUSH
66822: LD_STRING 
66824: ST_TO_ADDR
// hc_name :=  ;
66825: LD_ADDR_OWVAR 26
66829: PUSH
66830: LD_STRING 
66832: ST_TO_ADDR
// end ;
66833: LD_VAR 0 1
66837: RET
// export function PrepareHorse ( ) ; begin
66838: LD_INT 0
66840: PPUSH
// uc_side := 0 ;
66841: LD_ADDR_OWVAR 20
66845: PUSH
66846: LD_INT 0
66848: ST_TO_ADDR
// uc_nation := 0 ;
66849: LD_ADDR_OWVAR 21
66853: PUSH
66854: LD_INT 0
66856: ST_TO_ADDR
// InitHc ;
66857: CALL_OW 19
// hc_class := class_horse ;
66861: LD_ADDR_OWVAR 28
66865: PUSH
66866: LD_INT 21
66868: ST_TO_ADDR
// hc_gallery :=  ;
66869: LD_ADDR_OWVAR 33
66873: PUSH
66874: LD_STRING 
66876: ST_TO_ADDR
// hc_name :=  ;
66877: LD_ADDR_OWVAR 26
66881: PUSH
66882: LD_STRING 
66884: ST_TO_ADDR
// end ;
66885: LD_VAR 0 1
66889: RET
// export function PrepareMastodont ( ) ; begin
66890: LD_INT 0
66892: PPUSH
// uc_side := 0 ;
66893: LD_ADDR_OWVAR 20
66897: PUSH
66898: LD_INT 0
66900: ST_TO_ADDR
// uc_nation := 0 ;
66901: LD_ADDR_OWVAR 21
66905: PUSH
66906: LD_INT 0
66908: ST_TO_ADDR
// vc_chassis := class_mastodont ;
66909: LD_ADDR_OWVAR 37
66913: PUSH
66914: LD_INT 31
66916: ST_TO_ADDR
// vc_control := control_rider ;
66917: LD_ADDR_OWVAR 38
66921: PUSH
66922: LD_INT 4
66924: ST_TO_ADDR
// end ;
66925: LD_VAR 0 1
66929: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66930: LD_INT 0
66932: PPUSH
66933: PPUSH
66934: PPUSH
// uc_side = 0 ;
66935: LD_ADDR_OWVAR 20
66939: PUSH
66940: LD_INT 0
66942: ST_TO_ADDR
// uc_nation = 0 ;
66943: LD_ADDR_OWVAR 21
66947: PUSH
66948: LD_INT 0
66950: ST_TO_ADDR
// InitHc_All ( ) ;
66951: CALL_OW 584
// InitVc ;
66955: CALL_OW 20
// if mastodonts then
66959: LD_VAR 0 6
66963: IFFALSE 67030
// for i = 1 to mastodonts do
66965: LD_ADDR_VAR 0 11
66969: PUSH
66970: DOUBLE
66971: LD_INT 1
66973: DEC
66974: ST_TO_ADDR
66975: LD_VAR 0 6
66979: PUSH
66980: FOR_TO
66981: IFFALSE 67028
// begin vc_chassis := 31 ;
66983: LD_ADDR_OWVAR 37
66987: PUSH
66988: LD_INT 31
66990: ST_TO_ADDR
// vc_control := control_rider ;
66991: LD_ADDR_OWVAR 38
66995: PUSH
66996: LD_INT 4
66998: ST_TO_ADDR
// animal := CreateVehicle ;
66999: LD_ADDR_VAR 0 12
67003: PUSH
67004: CALL_OW 45
67008: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67009: LD_VAR 0 12
67013: PPUSH
67014: LD_VAR 0 8
67018: PPUSH
67019: LD_INT 0
67021: PPUSH
67022: CALL 69172 0 3
// end ;
67026: GO 66980
67028: POP
67029: POP
// if horses then
67030: LD_VAR 0 5
67034: IFFALSE 67101
// for i = 1 to horses do
67036: LD_ADDR_VAR 0 11
67040: PUSH
67041: DOUBLE
67042: LD_INT 1
67044: DEC
67045: ST_TO_ADDR
67046: LD_VAR 0 5
67050: PUSH
67051: FOR_TO
67052: IFFALSE 67099
// begin hc_class := 21 ;
67054: LD_ADDR_OWVAR 28
67058: PUSH
67059: LD_INT 21
67061: ST_TO_ADDR
// hc_gallery :=  ;
67062: LD_ADDR_OWVAR 33
67066: PUSH
67067: LD_STRING 
67069: ST_TO_ADDR
// animal := CreateHuman ;
67070: LD_ADDR_VAR 0 12
67074: PUSH
67075: CALL_OW 44
67079: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67080: LD_VAR 0 12
67084: PPUSH
67085: LD_VAR 0 8
67089: PPUSH
67090: LD_INT 0
67092: PPUSH
67093: CALL 69172 0 3
// end ;
67097: GO 67051
67099: POP
67100: POP
// if birds then
67101: LD_VAR 0 1
67105: IFFALSE 67172
// for i = 1 to birds do
67107: LD_ADDR_VAR 0 11
67111: PUSH
67112: DOUBLE
67113: LD_INT 1
67115: DEC
67116: ST_TO_ADDR
67117: LD_VAR 0 1
67121: PUSH
67122: FOR_TO
67123: IFFALSE 67170
// begin hc_class := 18 ;
67125: LD_ADDR_OWVAR 28
67129: PUSH
67130: LD_INT 18
67132: ST_TO_ADDR
// hc_gallery =  ;
67133: LD_ADDR_OWVAR 33
67137: PUSH
67138: LD_STRING 
67140: ST_TO_ADDR
// animal := CreateHuman ;
67141: LD_ADDR_VAR 0 12
67145: PUSH
67146: CALL_OW 44
67150: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67151: LD_VAR 0 12
67155: PPUSH
67156: LD_VAR 0 8
67160: PPUSH
67161: LD_INT 0
67163: PPUSH
67164: CALL 69172 0 3
// end ;
67168: GO 67122
67170: POP
67171: POP
// if tigers then
67172: LD_VAR 0 2
67176: IFFALSE 67260
// for i = 1 to tigers do
67178: LD_ADDR_VAR 0 11
67182: PUSH
67183: DOUBLE
67184: LD_INT 1
67186: DEC
67187: ST_TO_ADDR
67188: LD_VAR 0 2
67192: PUSH
67193: FOR_TO
67194: IFFALSE 67258
// begin hc_class = class_tiger ;
67196: LD_ADDR_OWVAR 28
67200: PUSH
67201: LD_INT 14
67203: ST_TO_ADDR
// hc_gallery =  ;
67204: LD_ADDR_OWVAR 33
67208: PUSH
67209: LD_STRING 
67211: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
67212: LD_ADDR_OWVAR 35
67216: PUSH
67217: LD_INT 7
67219: NEG
67220: PPUSH
67221: LD_INT 7
67223: PPUSH
67224: CALL_OW 12
67228: ST_TO_ADDR
// animal := CreateHuman ;
67229: LD_ADDR_VAR 0 12
67233: PUSH
67234: CALL_OW 44
67238: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67239: LD_VAR 0 12
67243: PPUSH
67244: LD_VAR 0 8
67248: PPUSH
67249: LD_INT 0
67251: PPUSH
67252: CALL 69172 0 3
// end ;
67256: GO 67193
67258: POP
67259: POP
// if apemans then
67260: LD_VAR 0 3
67264: IFFALSE 67387
// for i = 1 to apemans do
67266: LD_ADDR_VAR 0 11
67270: PUSH
67271: DOUBLE
67272: LD_INT 1
67274: DEC
67275: ST_TO_ADDR
67276: LD_VAR 0 3
67280: PUSH
67281: FOR_TO
67282: IFFALSE 67385
// begin hc_class = class_apeman ;
67284: LD_ADDR_OWVAR 28
67288: PUSH
67289: LD_INT 12
67291: ST_TO_ADDR
// hc_gallery =  ;
67292: LD_ADDR_OWVAR 33
67296: PUSH
67297: LD_STRING 
67299: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
67300: LD_ADDR_OWVAR 35
67304: PUSH
67305: LD_INT 2
67307: NEG
67308: PPUSH
67309: LD_INT 2
67311: PPUSH
67312: CALL_OW 12
67316: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
67317: LD_ADDR_OWVAR 31
67321: PUSH
67322: LD_INT 1
67324: PPUSH
67325: LD_INT 3
67327: PPUSH
67328: CALL_OW 12
67332: PUSH
67333: LD_INT 1
67335: PPUSH
67336: LD_INT 3
67338: PPUSH
67339: CALL_OW 12
67343: PUSH
67344: LD_INT 0
67346: PUSH
67347: LD_INT 0
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: LIST
67354: LIST
67355: ST_TO_ADDR
// animal := CreateHuman ;
67356: LD_ADDR_VAR 0 12
67360: PUSH
67361: CALL_OW 44
67365: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67366: LD_VAR 0 12
67370: PPUSH
67371: LD_VAR 0 8
67375: PPUSH
67376: LD_INT 0
67378: PPUSH
67379: CALL 69172 0 3
// end ;
67383: GO 67281
67385: POP
67386: POP
// if enchidnas then
67387: LD_VAR 0 4
67391: IFFALSE 67458
// for i = 1 to enchidnas do
67393: LD_ADDR_VAR 0 11
67397: PUSH
67398: DOUBLE
67399: LD_INT 1
67401: DEC
67402: ST_TO_ADDR
67403: LD_VAR 0 4
67407: PUSH
67408: FOR_TO
67409: IFFALSE 67456
// begin hc_class = 13 ;
67411: LD_ADDR_OWVAR 28
67415: PUSH
67416: LD_INT 13
67418: ST_TO_ADDR
// hc_gallery =  ;
67419: LD_ADDR_OWVAR 33
67423: PUSH
67424: LD_STRING 
67426: ST_TO_ADDR
// animal := CreateHuman ;
67427: LD_ADDR_VAR 0 12
67431: PUSH
67432: CALL_OW 44
67436: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67437: LD_VAR 0 12
67441: PPUSH
67442: LD_VAR 0 8
67446: PPUSH
67447: LD_INT 0
67449: PPUSH
67450: CALL 69172 0 3
// end ;
67454: GO 67408
67456: POP
67457: POP
// if fishes then
67458: LD_VAR 0 7
67462: IFFALSE 67529
// for i = 1 to fishes do
67464: LD_ADDR_VAR 0 11
67468: PUSH
67469: DOUBLE
67470: LD_INT 1
67472: DEC
67473: ST_TO_ADDR
67474: LD_VAR 0 7
67478: PUSH
67479: FOR_TO
67480: IFFALSE 67527
// begin hc_class = 20 ;
67482: LD_ADDR_OWVAR 28
67486: PUSH
67487: LD_INT 20
67489: ST_TO_ADDR
// hc_gallery =  ;
67490: LD_ADDR_OWVAR 33
67494: PUSH
67495: LD_STRING 
67497: ST_TO_ADDR
// animal := CreateHuman ;
67498: LD_ADDR_VAR 0 12
67502: PUSH
67503: CALL_OW 44
67507: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
67508: LD_VAR 0 12
67512: PPUSH
67513: LD_VAR 0 9
67517: PPUSH
67518: LD_INT 0
67520: PPUSH
67521: CALL 69172 0 3
// end ;
67525: GO 67479
67527: POP
67528: POP
// end ;
67529: LD_VAR 0 10
67533: RET
// export function WantHeal ( sci , unit ) ; begin
67534: LD_INT 0
67536: PPUSH
// if GetTaskList ( sci ) > 0 then
67537: LD_VAR 0 1
67541: PPUSH
67542: CALL_OW 437
67546: PUSH
67547: LD_INT 0
67549: GREATER
67550: IFFALSE 67622
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
67552: LD_VAR 0 1
67556: PPUSH
67557: CALL_OW 437
67561: PUSH
67562: LD_INT 1
67564: ARRAY
67565: PUSH
67566: LD_INT 1
67568: ARRAY
67569: PUSH
67570: LD_STRING l
67572: EQUAL
67573: IFFALSE 67600
67575: PUSH
67576: LD_VAR 0 1
67580: PPUSH
67581: CALL_OW 437
67585: PUSH
67586: LD_INT 1
67588: ARRAY
67589: PUSH
67590: LD_INT 4
67592: ARRAY
67593: PUSH
67594: LD_VAR 0 2
67598: EQUAL
67599: AND
67600: IFFALSE 67612
// result := true else
67602: LD_ADDR_VAR 0 3
67606: PUSH
67607: LD_INT 1
67609: ST_TO_ADDR
67610: GO 67620
// result := false ;
67612: LD_ADDR_VAR 0 3
67616: PUSH
67617: LD_INT 0
67619: ST_TO_ADDR
// end else
67620: GO 67630
// result := false ;
67622: LD_ADDR_VAR 0 3
67626: PUSH
67627: LD_INT 0
67629: ST_TO_ADDR
// end ;
67630: LD_VAR 0 3
67634: RET
// export function HealTarget ( sci ) ; begin
67635: LD_INT 0
67637: PPUSH
// if not sci then
67638: LD_VAR 0 1
67642: NOT
67643: IFFALSE 67647
// exit ;
67645: GO 67712
// result := 0 ;
67647: LD_ADDR_VAR 0 2
67651: PUSH
67652: LD_INT 0
67654: ST_TO_ADDR
// if GetTaskList ( sci ) then
67655: LD_VAR 0 1
67659: PPUSH
67660: CALL_OW 437
67664: IFFALSE 67712
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67666: LD_VAR 0 1
67670: PPUSH
67671: CALL_OW 437
67675: PUSH
67676: LD_INT 1
67678: ARRAY
67679: PUSH
67680: LD_INT 1
67682: ARRAY
67683: PUSH
67684: LD_STRING l
67686: EQUAL
67687: IFFALSE 67712
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67689: LD_ADDR_VAR 0 2
67693: PUSH
67694: LD_VAR 0 1
67698: PPUSH
67699: CALL_OW 437
67703: PUSH
67704: LD_INT 1
67706: ARRAY
67707: PUSH
67708: LD_INT 4
67710: ARRAY
67711: ST_TO_ADDR
// end ;
67712: LD_VAR 0 2
67716: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67717: LD_INT 0
67719: PPUSH
67720: PPUSH
67721: PPUSH
67722: PPUSH
// if not base_units then
67723: LD_VAR 0 1
67727: NOT
67728: IFFALSE 67732
// exit ;
67730: GO 67819
// result := false ;
67732: LD_ADDR_VAR 0 2
67736: PUSH
67737: LD_INT 0
67739: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67740: LD_ADDR_VAR 0 5
67744: PUSH
67745: LD_VAR 0 1
67749: PPUSH
67750: LD_INT 21
67752: PUSH
67753: LD_INT 3
67755: PUSH
67756: EMPTY
67757: LIST
67758: LIST
67759: PPUSH
67760: CALL_OW 72
67764: ST_TO_ADDR
// if not tmp then
67765: LD_VAR 0 5
67769: NOT
67770: IFFALSE 67774
// exit ;
67772: GO 67819
// for i in tmp do
67774: LD_ADDR_VAR 0 3
67778: PUSH
67779: LD_VAR 0 5
67783: PUSH
67784: FOR_IN
67785: IFFALSE 67817
// begin result := EnemyInRange ( i , 22 ) ;
67787: LD_ADDR_VAR 0 2
67791: PUSH
67792: LD_VAR 0 3
67796: PPUSH
67797: LD_INT 22
67799: PPUSH
67800: CALL 65234 0 2
67804: ST_TO_ADDR
// if result then
67805: LD_VAR 0 2
67809: IFFALSE 67815
// exit ;
67811: POP
67812: POP
67813: GO 67819
// end ;
67815: GO 67784
67817: POP
67818: POP
// end ;
67819: LD_VAR 0 2
67823: RET
// export function FilterByTag ( units , tag ) ; begin
67824: LD_INT 0
67826: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
67827: LD_ADDR_VAR 0 3
67831: PUSH
67832: LD_VAR 0 1
67836: PPUSH
67837: LD_INT 120
67839: PUSH
67840: LD_VAR 0 2
67844: PUSH
67845: EMPTY
67846: LIST
67847: LIST
67848: PPUSH
67849: CALL_OW 72
67853: ST_TO_ADDR
// end ;
67854: LD_VAR 0 3
67858: RET
// export function IsDriver ( un ) ; begin
67859: LD_INT 0
67861: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67862: LD_ADDR_VAR 0 2
67866: PUSH
67867: LD_VAR 0 1
67871: PUSH
67872: LD_INT 55
67874: PUSH
67875: EMPTY
67876: LIST
67877: PPUSH
67878: CALL_OW 69
67882: IN
67883: ST_TO_ADDR
// end ;
67884: LD_VAR 0 2
67888: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67889: LD_INT 0
67891: PPUSH
67892: PPUSH
// list := [ ] ;
67893: LD_ADDR_VAR 0 5
67897: PUSH
67898: EMPTY
67899: ST_TO_ADDR
// case d of 0 :
67900: LD_VAR 0 3
67904: PUSH
67905: LD_INT 0
67907: DOUBLE
67908: EQUAL
67909: IFTRUE 67913
67911: GO 68046
67913: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67914: LD_ADDR_VAR 0 5
67918: PUSH
67919: LD_VAR 0 1
67923: PUSH
67924: LD_INT 4
67926: MINUS
67927: PUSH
67928: LD_VAR 0 2
67932: PUSH
67933: LD_INT 4
67935: MINUS
67936: PUSH
67937: LD_INT 2
67939: PUSH
67940: EMPTY
67941: LIST
67942: LIST
67943: LIST
67944: PUSH
67945: LD_VAR 0 1
67949: PUSH
67950: LD_INT 3
67952: MINUS
67953: PUSH
67954: LD_VAR 0 2
67958: PUSH
67959: LD_INT 1
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: LIST
67966: PUSH
67967: LD_VAR 0 1
67971: PUSH
67972: LD_INT 4
67974: PLUS
67975: PUSH
67976: LD_VAR 0 2
67980: PUSH
67981: LD_INT 4
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: LIST
67988: PUSH
67989: LD_VAR 0 1
67993: PUSH
67994: LD_INT 3
67996: PLUS
67997: PUSH
67998: LD_VAR 0 2
68002: PUSH
68003: LD_INT 3
68005: PLUS
68006: PUSH
68007: LD_INT 5
68009: PUSH
68010: EMPTY
68011: LIST
68012: LIST
68013: LIST
68014: PUSH
68015: LD_VAR 0 1
68019: PUSH
68020: LD_VAR 0 2
68024: PUSH
68025: LD_INT 4
68027: PLUS
68028: PUSH
68029: LD_INT 0
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: LIST
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: LIST
68041: LIST
68042: LIST
68043: ST_TO_ADDR
// end ; 1 :
68044: GO 68744
68046: LD_INT 1
68048: DOUBLE
68049: EQUAL
68050: IFTRUE 68054
68052: GO 68187
68054: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
68055: LD_ADDR_VAR 0 5
68059: PUSH
68060: LD_VAR 0 1
68064: PUSH
68065: LD_VAR 0 2
68069: PUSH
68070: LD_INT 4
68072: MINUS
68073: PUSH
68074: LD_INT 3
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: LIST
68081: PUSH
68082: LD_VAR 0 1
68086: PUSH
68087: LD_INT 3
68089: MINUS
68090: PUSH
68091: LD_VAR 0 2
68095: PUSH
68096: LD_INT 3
68098: MINUS
68099: PUSH
68100: LD_INT 2
68102: PUSH
68103: EMPTY
68104: LIST
68105: LIST
68106: LIST
68107: PUSH
68108: LD_VAR 0 1
68112: PUSH
68113: LD_INT 4
68115: MINUS
68116: PUSH
68117: LD_VAR 0 2
68121: PUSH
68122: LD_INT 1
68124: PUSH
68125: EMPTY
68126: LIST
68127: LIST
68128: LIST
68129: PUSH
68130: LD_VAR 0 1
68134: PUSH
68135: LD_VAR 0 2
68139: PUSH
68140: LD_INT 3
68142: PLUS
68143: PUSH
68144: LD_INT 0
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: LIST
68151: PUSH
68152: LD_VAR 0 1
68156: PUSH
68157: LD_INT 4
68159: PLUS
68160: PUSH
68161: LD_VAR 0 2
68165: PUSH
68166: LD_INT 4
68168: PLUS
68169: PUSH
68170: LD_INT 5
68172: PUSH
68173: EMPTY
68174: LIST
68175: LIST
68176: LIST
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: LIST
68182: LIST
68183: LIST
68184: ST_TO_ADDR
// end ; 2 :
68185: GO 68744
68187: LD_INT 2
68189: DOUBLE
68190: EQUAL
68191: IFTRUE 68195
68193: GO 68324
68195: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
68196: LD_ADDR_VAR 0 5
68200: PUSH
68201: LD_VAR 0 1
68205: PUSH
68206: LD_VAR 0 2
68210: PUSH
68211: LD_INT 3
68213: MINUS
68214: PUSH
68215: LD_INT 3
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: LIST
68222: PUSH
68223: LD_VAR 0 1
68227: PUSH
68228: LD_INT 4
68230: PLUS
68231: PUSH
68232: LD_VAR 0 2
68236: PUSH
68237: LD_INT 4
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: LIST
68244: PUSH
68245: LD_VAR 0 1
68249: PUSH
68250: LD_VAR 0 2
68254: PUSH
68255: LD_INT 4
68257: PLUS
68258: PUSH
68259: LD_INT 0
68261: PUSH
68262: EMPTY
68263: LIST
68264: LIST
68265: LIST
68266: PUSH
68267: LD_VAR 0 1
68271: PUSH
68272: LD_INT 3
68274: MINUS
68275: PUSH
68276: LD_VAR 0 2
68280: PUSH
68281: LD_INT 1
68283: PUSH
68284: EMPTY
68285: LIST
68286: LIST
68287: LIST
68288: PUSH
68289: LD_VAR 0 1
68293: PUSH
68294: LD_INT 4
68296: MINUS
68297: PUSH
68298: LD_VAR 0 2
68302: PUSH
68303: LD_INT 4
68305: MINUS
68306: PUSH
68307: LD_INT 2
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: LIST
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: LIST
68319: LIST
68320: LIST
68321: ST_TO_ADDR
// end ; 3 :
68322: GO 68744
68324: LD_INT 3
68326: DOUBLE
68327: EQUAL
68328: IFTRUE 68332
68330: GO 68465
68332: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
68333: LD_ADDR_VAR 0 5
68337: PUSH
68338: LD_VAR 0 1
68342: PUSH
68343: LD_INT 3
68345: PLUS
68346: PUSH
68347: LD_VAR 0 2
68351: PUSH
68352: LD_INT 4
68354: PUSH
68355: EMPTY
68356: LIST
68357: LIST
68358: LIST
68359: PUSH
68360: LD_VAR 0 1
68364: PUSH
68365: LD_INT 4
68367: PLUS
68368: PUSH
68369: LD_VAR 0 2
68373: PUSH
68374: LD_INT 4
68376: PLUS
68377: PUSH
68378: LD_INT 5
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: LIST
68385: PUSH
68386: LD_VAR 0 1
68390: PUSH
68391: LD_INT 4
68393: MINUS
68394: PUSH
68395: LD_VAR 0 2
68399: PUSH
68400: LD_INT 1
68402: PUSH
68403: EMPTY
68404: LIST
68405: LIST
68406: LIST
68407: PUSH
68408: LD_VAR 0 1
68412: PUSH
68413: LD_VAR 0 2
68417: PUSH
68418: LD_INT 4
68420: MINUS
68421: PUSH
68422: LD_INT 3
68424: PUSH
68425: EMPTY
68426: LIST
68427: LIST
68428: LIST
68429: PUSH
68430: LD_VAR 0 1
68434: PUSH
68435: LD_INT 3
68437: MINUS
68438: PUSH
68439: LD_VAR 0 2
68443: PUSH
68444: LD_INT 3
68446: MINUS
68447: PUSH
68448: LD_INT 2
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: LIST
68455: PUSH
68456: EMPTY
68457: LIST
68458: LIST
68459: LIST
68460: LIST
68461: LIST
68462: ST_TO_ADDR
// end ; 4 :
68463: GO 68744
68465: LD_INT 4
68467: DOUBLE
68468: EQUAL
68469: IFTRUE 68473
68471: GO 68606
68473: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
68474: LD_ADDR_VAR 0 5
68478: PUSH
68479: LD_VAR 0 1
68483: PUSH
68484: LD_VAR 0 2
68488: PUSH
68489: LD_INT 4
68491: PLUS
68492: PUSH
68493: LD_INT 0
68495: PUSH
68496: EMPTY
68497: LIST
68498: LIST
68499: LIST
68500: PUSH
68501: LD_VAR 0 1
68505: PUSH
68506: LD_INT 3
68508: PLUS
68509: PUSH
68510: LD_VAR 0 2
68514: PUSH
68515: LD_INT 3
68517: PLUS
68518: PUSH
68519: LD_INT 5
68521: PUSH
68522: EMPTY
68523: LIST
68524: LIST
68525: LIST
68526: PUSH
68527: LD_VAR 0 1
68531: PUSH
68532: LD_INT 4
68534: PLUS
68535: PUSH
68536: LD_VAR 0 2
68540: PUSH
68541: LD_INT 4
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: LIST
68548: PUSH
68549: LD_VAR 0 1
68553: PUSH
68554: LD_VAR 0 2
68558: PUSH
68559: LD_INT 3
68561: MINUS
68562: PUSH
68563: LD_INT 3
68565: PUSH
68566: EMPTY
68567: LIST
68568: LIST
68569: LIST
68570: PUSH
68571: LD_VAR 0 1
68575: PUSH
68576: LD_INT 4
68578: MINUS
68579: PUSH
68580: LD_VAR 0 2
68584: PUSH
68585: LD_INT 4
68587: MINUS
68588: PUSH
68589: LD_INT 2
68591: PUSH
68592: EMPTY
68593: LIST
68594: LIST
68595: LIST
68596: PUSH
68597: EMPTY
68598: LIST
68599: LIST
68600: LIST
68601: LIST
68602: LIST
68603: ST_TO_ADDR
// end ; 5 :
68604: GO 68744
68606: LD_INT 5
68608: DOUBLE
68609: EQUAL
68610: IFTRUE 68614
68612: GO 68743
68614: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
68615: LD_ADDR_VAR 0 5
68619: PUSH
68620: LD_VAR 0 1
68624: PUSH
68625: LD_INT 4
68627: MINUS
68628: PUSH
68629: LD_VAR 0 2
68633: PUSH
68634: LD_INT 1
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: LIST
68641: PUSH
68642: LD_VAR 0 1
68646: PUSH
68647: LD_VAR 0 2
68651: PUSH
68652: LD_INT 4
68654: MINUS
68655: PUSH
68656: LD_INT 3
68658: PUSH
68659: EMPTY
68660: LIST
68661: LIST
68662: LIST
68663: PUSH
68664: LD_VAR 0 1
68668: PUSH
68669: LD_INT 4
68671: PLUS
68672: PUSH
68673: LD_VAR 0 2
68677: PUSH
68678: LD_INT 4
68680: PLUS
68681: PUSH
68682: LD_INT 5
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: LIST
68689: PUSH
68690: LD_VAR 0 1
68694: PUSH
68695: LD_INT 3
68697: PLUS
68698: PUSH
68699: LD_VAR 0 2
68703: PUSH
68704: LD_INT 4
68706: PUSH
68707: EMPTY
68708: LIST
68709: LIST
68710: LIST
68711: PUSH
68712: LD_VAR 0 1
68716: PUSH
68717: LD_VAR 0 2
68721: PUSH
68722: LD_INT 3
68724: PLUS
68725: PUSH
68726: LD_INT 0
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: LIST
68733: PUSH
68734: EMPTY
68735: LIST
68736: LIST
68737: LIST
68738: LIST
68739: LIST
68740: ST_TO_ADDR
// end ; end ;
68741: GO 68744
68743: POP
// result := list ;
68744: LD_ADDR_VAR 0 4
68748: PUSH
68749: LD_VAR 0 5
68753: ST_TO_ADDR
// end ;
68754: LD_VAR 0 4
68758: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68759: LD_INT 0
68761: PPUSH
68762: PPUSH
68763: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68764: LD_VAR 0 1
68768: NOT
68769: IFTRUE 68797
68771: PUSH
68772: LD_VAR 0 2
68776: PUSH
68777: LD_INT 1
68779: PUSH
68780: LD_INT 2
68782: PUSH
68783: LD_INT 3
68785: PUSH
68786: LD_INT 4
68788: PUSH
68789: EMPTY
68790: LIST
68791: LIST
68792: LIST
68793: LIST
68794: IN
68795: NOT
68796: OR
68797: IFFALSE 68801
// exit ;
68799: GO 68884
// tmp := [ ] ;
68801: LD_ADDR_VAR 0 5
68805: PUSH
68806: EMPTY
68807: ST_TO_ADDR
// for i in units do
68808: LD_ADDR_VAR 0 4
68812: PUSH
68813: LD_VAR 0 1
68817: PUSH
68818: FOR_IN
68819: IFFALSE 68853
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
68821: LD_ADDR_VAR 0 5
68825: PUSH
68826: LD_VAR 0 5
68830: PPUSH
68831: LD_VAR 0 4
68835: PPUSH
68836: LD_VAR 0 2
68840: PPUSH
68841: CALL_OW 259
68845: PPUSH
68846: CALL 70279 0 2
68850: ST_TO_ADDR
68851: GO 68818
68853: POP
68854: POP
// if not tmp then
68855: LD_VAR 0 5
68859: NOT
68860: IFFALSE 68864
// exit ;
68862: GO 68884
// result := SortListByListDesc ( units , tmp ) ;
68864: LD_ADDR_VAR 0 3
68868: PUSH
68869: LD_VAR 0 1
68873: PPUSH
68874: LD_VAR 0 5
68878: PPUSH
68879: CALL_OW 77
68883: ST_TO_ADDR
// end ;
68884: LD_VAR 0 3
68888: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68889: LD_INT 0
68891: PPUSH
68892: PPUSH
68893: PPUSH
// result := false ;
68894: LD_ADDR_VAR 0 3
68898: PUSH
68899: LD_INT 0
68901: ST_TO_ADDR
// if not building then
68902: LD_VAR 0 2
68906: NOT
68907: IFFALSE 68911
// exit ;
68909: GO 69055
// x := GetX ( building ) ;
68911: LD_ADDR_VAR 0 4
68915: PUSH
68916: LD_VAR 0 2
68920: PPUSH
68921: CALL_OW 250
68925: ST_TO_ADDR
// y := GetY ( building ) ;
68926: LD_ADDR_VAR 0 5
68930: PUSH
68931: LD_VAR 0 2
68935: PPUSH
68936: CALL_OW 251
68940: ST_TO_ADDR
// if not x or not y then
68941: LD_VAR 0 4
68945: NOT
68946: IFTRUE 68955
68948: PUSH
68949: LD_VAR 0 5
68953: NOT
68954: OR
68955: IFFALSE 68959
// exit ;
68957: GO 69055
// if GetTaskList ( unit ) then
68959: LD_VAR 0 1
68963: PPUSH
68964: CALL_OW 437
68968: IFFALSE 69055
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68970: LD_STRING e
68972: PUSH
68973: LD_VAR 0 1
68977: PPUSH
68978: CALL_OW 437
68982: PUSH
68983: LD_INT 1
68985: ARRAY
68986: PUSH
68987: LD_INT 1
68989: ARRAY
68990: EQUAL
68991: IFFALSE 69018
68993: PUSH
68994: LD_VAR 0 4
68998: PUSH
68999: LD_VAR 0 1
69003: PPUSH
69004: CALL_OW 437
69008: PUSH
69009: LD_INT 1
69011: ARRAY
69012: PUSH
69013: LD_INT 2
69015: ARRAY
69016: EQUAL
69017: AND
69018: IFFALSE 69045
69020: PUSH
69021: LD_VAR 0 5
69025: PUSH
69026: LD_VAR 0 1
69030: PPUSH
69031: CALL_OW 437
69035: PUSH
69036: LD_INT 1
69038: ARRAY
69039: PUSH
69040: LD_INT 3
69042: ARRAY
69043: EQUAL
69044: AND
69045: IFFALSE 69055
// result := true end ;
69047: LD_ADDR_VAR 0 3
69051: PUSH
69052: LD_INT 1
69054: ST_TO_ADDR
// end ;
69055: LD_VAR 0 3
69059: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
69060: LD_INT 0
69062: PPUSH
// result := false ;
69063: LD_ADDR_VAR 0 4
69067: PUSH
69068: LD_INT 0
69070: ST_TO_ADDR
// if GetTaskList ( unit ) then
69071: LD_VAR 0 1
69075: PPUSH
69076: CALL_OW 437
69080: IFFALSE 69167
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69082: LD_STRING M
69084: PUSH
69085: LD_VAR 0 1
69089: PPUSH
69090: CALL_OW 437
69094: PUSH
69095: LD_INT 1
69097: ARRAY
69098: PUSH
69099: LD_INT 1
69101: ARRAY
69102: EQUAL
69103: IFFALSE 69130
69105: PUSH
69106: LD_VAR 0 2
69110: PUSH
69111: LD_VAR 0 1
69115: PPUSH
69116: CALL_OW 437
69120: PUSH
69121: LD_INT 1
69123: ARRAY
69124: PUSH
69125: LD_INT 2
69127: ARRAY
69128: EQUAL
69129: AND
69130: IFFALSE 69157
69132: PUSH
69133: LD_VAR 0 3
69137: PUSH
69138: LD_VAR 0 1
69142: PPUSH
69143: CALL_OW 437
69147: PUSH
69148: LD_INT 1
69150: ARRAY
69151: PUSH
69152: LD_INT 3
69154: ARRAY
69155: EQUAL
69156: AND
69157: IFFALSE 69167
// result := true ;
69159: LD_ADDR_VAR 0 4
69163: PUSH
69164: LD_INT 1
69166: ST_TO_ADDR
// end ; end ;
69167: LD_VAR 0 4
69171: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
69172: LD_INT 0
69174: PPUSH
69175: PPUSH
69176: PPUSH
69177: PPUSH
// if not unit or not area then
69178: LD_VAR 0 1
69182: NOT
69183: IFTRUE 69192
69185: PUSH
69186: LD_VAR 0 2
69190: NOT
69191: OR
69192: IFFALSE 69196
// exit ;
69194: GO 69372
// tmp := AreaToList ( area , i ) ;
69196: LD_ADDR_VAR 0 6
69200: PUSH
69201: LD_VAR 0 2
69205: PPUSH
69206: LD_VAR 0 5
69210: PPUSH
69211: CALL_OW 517
69215: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
69216: LD_ADDR_VAR 0 5
69220: PUSH
69221: DOUBLE
69222: LD_INT 1
69224: DEC
69225: ST_TO_ADDR
69226: LD_VAR 0 6
69230: PUSH
69231: LD_INT 1
69233: ARRAY
69234: PUSH
69235: FOR_TO
69236: IFFALSE 69370
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
69238: LD_ADDR_VAR 0 7
69242: PUSH
69243: LD_VAR 0 6
69247: PUSH
69248: LD_INT 1
69250: ARRAY
69251: PUSH
69252: LD_VAR 0 5
69256: ARRAY
69257: PUSH
69258: LD_VAR 0 6
69262: PUSH
69263: LD_INT 2
69265: ARRAY
69266: PUSH
69267: LD_VAR 0 5
69271: ARRAY
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
69277: LD_INT 92
69279: PUSH
69280: LD_VAR 0 7
69284: PUSH
69285: LD_INT 1
69287: ARRAY
69288: PUSH
69289: LD_VAR 0 7
69293: PUSH
69294: LD_INT 2
69296: ARRAY
69297: PUSH
69298: LD_INT 2
69300: PUSH
69301: EMPTY
69302: LIST
69303: LIST
69304: LIST
69305: LIST
69306: PPUSH
69307: CALL_OW 69
69311: PUSH
69312: LD_INT 0
69314: EQUAL
69315: IFFALSE 69368
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
69317: LD_VAR 0 1
69321: PPUSH
69322: LD_VAR 0 7
69326: PUSH
69327: LD_INT 1
69329: ARRAY
69330: PPUSH
69331: LD_VAR 0 7
69335: PUSH
69336: LD_INT 2
69338: ARRAY
69339: PPUSH
69340: LD_VAR 0 3
69344: PPUSH
69345: CALL_OW 48
// result := IsPlaced ( unit ) ;
69349: LD_ADDR_VAR 0 4
69353: PUSH
69354: LD_VAR 0 1
69358: PPUSH
69359: CALL_OW 305
69363: ST_TO_ADDR
// exit ;
69364: POP
69365: POP
69366: GO 69372
// end ; end ;
69368: GO 69235
69370: POP
69371: POP
// end ;
69372: LD_VAR 0 4
69376: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
69377: LD_INT 0
69379: PPUSH
69380: PPUSH
69381: PPUSH
// if not side or side > 8 then
69382: LD_VAR 0 1
69386: NOT
69387: IFTRUE 69399
69389: PUSH
69390: LD_VAR 0 1
69394: PUSH
69395: LD_INT 8
69397: GREATER
69398: OR
69399: IFFALSE 69403
// exit ;
69401: GO 69590
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
69403: LD_ADDR_VAR 0 4
69407: PUSH
69408: LD_INT 22
69410: PUSH
69411: LD_VAR 0 1
69415: PUSH
69416: EMPTY
69417: LIST
69418: LIST
69419: PUSH
69420: LD_INT 21
69422: PUSH
69423: LD_INT 3
69425: PUSH
69426: EMPTY
69427: LIST
69428: LIST
69429: PUSH
69430: EMPTY
69431: LIST
69432: LIST
69433: PPUSH
69434: CALL_OW 69
69438: ST_TO_ADDR
// if not tmp then
69439: LD_VAR 0 4
69443: NOT
69444: IFFALSE 69448
// exit ;
69446: GO 69590
// enable_addtolog := true ;
69448: LD_ADDR_OWVAR 81
69452: PUSH
69453: LD_INT 1
69455: ST_TO_ADDR
// AddToLog ( [ ) ;
69456: LD_STRING [
69458: PPUSH
69459: CALL_OW 561
// for i in tmp do
69463: LD_ADDR_VAR 0 3
69467: PUSH
69468: LD_VAR 0 4
69472: PUSH
69473: FOR_IN
69474: IFFALSE 69581
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
69476: LD_STRING [
69478: PUSH
69479: LD_VAR 0 3
69483: PPUSH
69484: CALL_OW 266
69488: STR
69489: PUSH
69490: LD_STRING , 
69492: STR
69493: PUSH
69494: LD_VAR 0 3
69498: PPUSH
69499: CALL_OW 250
69503: STR
69504: PUSH
69505: LD_STRING , 
69507: STR
69508: PUSH
69509: LD_VAR 0 3
69513: PPUSH
69514: CALL_OW 251
69518: STR
69519: PUSH
69520: LD_STRING , 
69522: STR
69523: PUSH
69524: LD_VAR 0 3
69528: PPUSH
69529: CALL_OW 254
69533: STR
69534: PUSH
69535: LD_STRING , 
69537: STR
69538: PUSH
69539: LD_VAR 0 3
69543: PPUSH
69544: LD_INT 1
69546: PPUSH
69547: CALL_OW 268
69551: STR
69552: PUSH
69553: LD_STRING , 
69555: STR
69556: PUSH
69557: LD_VAR 0 3
69561: PPUSH
69562: LD_INT 2
69564: PPUSH
69565: CALL_OW 268
69569: STR
69570: PUSH
69571: LD_STRING ],
69573: STR
69574: PPUSH
69575: CALL_OW 561
// end ;
69579: GO 69473
69581: POP
69582: POP
// AddToLog ( ]; ) ;
69583: LD_STRING ];
69585: PPUSH
69586: CALL_OW 561
// end ;
69590: LD_VAR 0 2
69594: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
69595: LD_INT 0
69597: PPUSH
69598: PPUSH
69599: PPUSH
69600: PPUSH
69601: PPUSH
// if not area or not rate or not max then
69602: LD_VAR 0 1
69606: NOT
69607: IFTRUE 69616
69609: PUSH
69610: LD_VAR 0 2
69614: NOT
69615: OR
69616: IFTRUE 69625
69618: PUSH
69619: LD_VAR 0 4
69623: NOT
69624: OR
69625: IFFALSE 69629
// exit ;
69627: GO 69818
// while 1 do
69629: LD_INT 1
69631: IFFALSE 69818
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
69633: LD_ADDR_VAR 0 9
69637: PUSH
69638: LD_VAR 0 1
69642: PPUSH
69643: LD_INT 1
69645: PPUSH
69646: CALL_OW 287
69650: PUSH
69651: LD_INT 10
69653: MUL
69654: ST_TO_ADDR
// r := rate / 10 ;
69655: LD_ADDR_VAR 0 7
69659: PUSH
69660: LD_VAR 0 2
69664: PUSH
69665: LD_INT 10
69667: DIVREAL
69668: ST_TO_ADDR
// time := 1 1$00 ;
69669: LD_ADDR_VAR 0 8
69673: PUSH
69674: LD_INT 2100
69676: ST_TO_ADDR
// if amount < min then
69677: LD_VAR 0 9
69681: PUSH
69682: LD_VAR 0 3
69686: LESS
69687: IFFALSE 69705
// r := r * 2 else
69689: LD_ADDR_VAR 0 7
69693: PUSH
69694: LD_VAR 0 7
69698: PUSH
69699: LD_INT 2
69701: MUL
69702: ST_TO_ADDR
69703: GO 69731
// if amount > max then
69705: LD_VAR 0 9
69709: PUSH
69710: LD_VAR 0 4
69714: GREATER
69715: IFFALSE 69731
// r := r / 2 ;
69717: LD_ADDR_VAR 0 7
69721: PUSH
69722: LD_VAR 0 7
69726: PUSH
69727: LD_INT 2
69729: DIVREAL
69730: ST_TO_ADDR
// time := time / r ;
69731: LD_ADDR_VAR 0 8
69735: PUSH
69736: LD_VAR 0 8
69740: PUSH
69741: LD_VAR 0 7
69745: DIVREAL
69746: ST_TO_ADDR
// if time < 0 then
69747: LD_VAR 0 8
69751: PUSH
69752: LD_INT 0
69754: LESS
69755: IFFALSE 69772
// time := time * - 1 ;
69757: LD_ADDR_VAR 0 8
69761: PUSH
69762: LD_VAR 0 8
69766: PUSH
69767: LD_INT 1
69769: NEG
69770: MUL
69771: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
69772: LD_VAR 0 8
69776: PUSH
69777: LD_INT 35
69779: PPUSH
69780: LD_INT 875
69782: PPUSH
69783: CALL_OW 12
69787: PLUS
69788: PPUSH
69789: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69793: LD_INT 1
69795: PPUSH
69796: LD_INT 5
69798: PPUSH
69799: CALL_OW 12
69803: PPUSH
69804: LD_VAR 0 1
69808: PPUSH
69809: LD_INT 1
69811: PPUSH
69812: CALL_OW 55
// end ;
69816: GO 69629
// end ;
69818: LD_VAR 0 5
69822: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69823: LD_INT 0
69825: PPUSH
69826: PPUSH
69827: PPUSH
69828: PPUSH
69829: PPUSH
69830: PPUSH
69831: PPUSH
69832: PPUSH
// if not turrets or not factories then
69833: LD_VAR 0 1
69837: NOT
69838: IFTRUE 69847
69840: PUSH
69841: LD_VAR 0 2
69845: NOT
69846: OR
69847: IFFALSE 69851
// exit ;
69849: GO 70158
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69851: LD_ADDR_VAR 0 10
69855: PUSH
69856: LD_INT 5
69858: PUSH
69859: LD_INT 6
69861: PUSH
69862: EMPTY
69863: LIST
69864: LIST
69865: PUSH
69866: LD_INT 2
69868: PUSH
69869: LD_INT 4
69871: PUSH
69872: EMPTY
69873: LIST
69874: LIST
69875: PUSH
69876: LD_INT 3
69878: PUSH
69879: LD_INT 5
69881: PUSH
69882: EMPTY
69883: LIST
69884: LIST
69885: PUSH
69886: EMPTY
69887: LIST
69888: LIST
69889: LIST
69890: PUSH
69891: LD_INT 24
69893: PUSH
69894: LD_INT 25
69896: PUSH
69897: EMPTY
69898: LIST
69899: LIST
69900: PUSH
69901: LD_INT 23
69903: PUSH
69904: LD_INT 27
69906: PUSH
69907: EMPTY
69908: LIST
69909: LIST
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: PUSH
69915: LD_INT 42
69917: PUSH
69918: LD_INT 43
69920: PUSH
69921: EMPTY
69922: LIST
69923: LIST
69924: PUSH
69925: LD_INT 44
69927: PUSH
69928: LD_INT 46
69930: PUSH
69931: EMPTY
69932: LIST
69933: LIST
69934: PUSH
69935: LD_INT 45
69937: PUSH
69938: LD_INT 47
69940: PUSH
69941: EMPTY
69942: LIST
69943: LIST
69944: PUSH
69945: EMPTY
69946: LIST
69947: LIST
69948: LIST
69949: PUSH
69950: EMPTY
69951: LIST
69952: LIST
69953: LIST
69954: ST_TO_ADDR
// result := [ ] ;
69955: LD_ADDR_VAR 0 3
69959: PUSH
69960: EMPTY
69961: ST_TO_ADDR
// for i in turrets do
69962: LD_ADDR_VAR 0 4
69966: PUSH
69967: LD_VAR 0 1
69971: PUSH
69972: FOR_IN
69973: IFFALSE 70156
// begin nat := GetNation ( i ) ;
69975: LD_ADDR_VAR 0 7
69979: PUSH
69980: LD_VAR 0 4
69984: PPUSH
69985: CALL_OW 248
69989: ST_TO_ADDR
// weapon := 0 ;
69990: LD_ADDR_VAR 0 8
69994: PUSH
69995: LD_INT 0
69997: ST_TO_ADDR
// if not nat then
69998: LD_VAR 0 7
70002: NOT
70003: IFFALSE 70007
// continue ;
70005: GO 69972
// for j in list [ nat ] do
70007: LD_ADDR_VAR 0 5
70011: PUSH
70012: LD_VAR 0 10
70016: PUSH
70017: LD_VAR 0 7
70021: ARRAY
70022: PUSH
70023: FOR_IN
70024: IFFALSE 70065
// if GetBWeapon ( i ) = j [ 1 ] then
70026: LD_VAR 0 4
70030: PPUSH
70031: CALL_OW 269
70035: PUSH
70036: LD_VAR 0 5
70040: PUSH
70041: LD_INT 1
70043: ARRAY
70044: EQUAL
70045: IFFALSE 70063
// begin weapon := j [ 2 ] ;
70047: LD_ADDR_VAR 0 8
70051: PUSH
70052: LD_VAR 0 5
70056: PUSH
70057: LD_INT 2
70059: ARRAY
70060: ST_TO_ADDR
// break ;
70061: GO 70065
// end ;
70063: GO 70023
70065: POP
70066: POP
// if not weapon then
70067: LD_VAR 0 8
70071: NOT
70072: IFFALSE 70076
// continue ;
70074: GO 69972
// for k in factories do
70076: LD_ADDR_VAR 0 6
70080: PUSH
70081: LD_VAR 0 2
70085: PUSH
70086: FOR_IN
70087: IFFALSE 70152
// begin weapons := AvailableWeaponList ( k ) ;
70089: LD_ADDR_VAR 0 9
70093: PUSH
70094: LD_VAR 0 6
70098: PPUSH
70099: CALL_OW 478
70103: ST_TO_ADDR
// if not weapons then
70104: LD_VAR 0 9
70108: NOT
70109: IFFALSE 70113
// continue ;
70111: GO 70086
// if weapon in weapons then
70113: LD_VAR 0 8
70117: PUSH
70118: LD_VAR 0 9
70122: IN
70123: IFFALSE 70150
// begin result := [ i , weapon ] ;
70125: LD_ADDR_VAR 0 3
70129: PUSH
70130: LD_VAR 0 4
70134: PUSH
70135: LD_VAR 0 8
70139: PUSH
70140: EMPTY
70141: LIST
70142: LIST
70143: ST_TO_ADDR
// exit ;
70144: POP
70145: POP
70146: POP
70147: POP
70148: GO 70158
// end ; end ;
70150: GO 70086
70152: POP
70153: POP
// end ;
70154: GO 69972
70156: POP
70157: POP
// end ;
70158: LD_VAR 0 3
70162: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
70163: LD_INT 0
70165: PPUSH
// if not side or side > 8 then
70166: LD_VAR 0 3
70170: NOT
70171: IFTRUE 70183
70173: PUSH
70174: LD_VAR 0 3
70178: PUSH
70179: LD_INT 8
70181: GREATER
70182: OR
70183: IFFALSE 70187
// exit ;
70185: GO 70246
// if not range then
70187: LD_VAR 0 4
70191: NOT
70192: IFFALSE 70203
// range := - 12 ;
70194: LD_ADDR_VAR 0 4
70198: PUSH
70199: LD_INT 12
70201: NEG
70202: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
70203: LD_VAR 0 1
70207: PPUSH
70208: LD_VAR 0 2
70212: PPUSH
70213: LD_VAR 0 3
70217: PPUSH
70218: LD_VAR 0 4
70222: PPUSH
70223: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
70227: LD_VAR 0 1
70231: PPUSH
70232: LD_VAR 0 2
70236: PPUSH
70237: LD_VAR 0 3
70241: PPUSH
70242: CALL_OW 331
// end ;
70246: LD_VAR 0 5
70250: RET
// export function Video ( mode ) ; begin
70251: LD_INT 0
70253: PPUSH
// ingame_video = mode ;
70254: LD_ADDR_OWVAR 52
70258: PUSH
70259: LD_VAR 0 1
70263: ST_TO_ADDR
// interface_hidden = mode ;
70264: LD_ADDR_OWVAR 54
70268: PUSH
70269: LD_VAR 0 1
70273: ST_TO_ADDR
// end ;
70274: LD_VAR 0 2
70278: RET
// export function Join ( array , element ) ; begin
70279: LD_INT 0
70281: PPUSH
// result := Replace ( array , array + 1 , element ) ;
70282: LD_ADDR_VAR 0 3
70286: PUSH
70287: LD_VAR 0 1
70291: PPUSH
70292: LD_VAR 0 1
70296: PUSH
70297: LD_INT 1
70299: PLUS
70300: PPUSH
70301: LD_VAR 0 2
70305: PPUSH
70306: CALL_OW 1
70310: ST_TO_ADDR
// end ;
70311: LD_VAR 0 3
70315: RET
// export function JoinUnion ( array , element ) ; begin
70316: LD_INT 0
70318: PPUSH
// result := array union element ;
70319: LD_ADDR_VAR 0 3
70323: PUSH
70324: LD_VAR 0 1
70328: PUSH
70329: LD_VAR 0 2
70333: UNION
70334: ST_TO_ADDR
// end ;
70335: LD_VAR 0 3
70339: RET
// export function GetBehemoths ( side ) ; begin
70340: LD_INT 0
70342: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
70343: LD_ADDR_VAR 0 2
70347: PUSH
70348: LD_INT 22
70350: PUSH
70351: LD_VAR 0 1
70355: PUSH
70356: EMPTY
70357: LIST
70358: LIST
70359: PUSH
70360: LD_INT 31
70362: PUSH
70363: LD_INT 25
70365: PUSH
70366: EMPTY
70367: LIST
70368: LIST
70369: PUSH
70370: EMPTY
70371: LIST
70372: LIST
70373: PPUSH
70374: CALL_OW 69
70378: ST_TO_ADDR
// end ;
70379: LD_VAR 0 2
70383: RET
// export function Shuffle ( array ) ; var i , index ; begin
70384: LD_INT 0
70386: PPUSH
70387: PPUSH
70388: PPUSH
// result := [ ] ;
70389: LD_ADDR_VAR 0 2
70393: PUSH
70394: EMPTY
70395: ST_TO_ADDR
// if not array then
70396: LD_VAR 0 1
70400: NOT
70401: IFFALSE 70405
// exit ;
70403: GO 70504
// Randomize ;
70405: CALL_OW 10
// for i = array downto 1 do
70409: LD_ADDR_VAR 0 3
70413: PUSH
70414: DOUBLE
70415: LD_VAR 0 1
70419: INC
70420: ST_TO_ADDR
70421: LD_INT 1
70423: PUSH
70424: FOR_DOWNTO
70425: IFFALSE 70502
// begin index := rand ( 1 , array ) ;
70427: LD_ADDR_VAR 0 4
70431: PUSH
70432: LD_INT 1
70434: PPUSH
70435: LD_VAR 0 1
70439: PPUSH
70440: CALL_OW 12
70444: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
70445: LD_ADDR_VAR 0 2
70449: PUSH
70450: LD_VAR 0 2
70454: PPUSH
70455: LD_VAR 0 2
70459: PUSH
70460: LD_INT 1
70462: PLUS
70463: PPUSH
70464: LD_VAR 0 1
70468: PUSH
70469: LD_VAR 0 4
70473: ARRAY
70474: PPUSH
70475: CALL_OW 2
70479: ST_TO_ADDR
// array := Delete ( array , index ) ;
70480: LD_ADDR_VAR 0 1
70484: PUSH
70485: LD_VAR 0 1
70489: PPUSH
70490: LD_VAR 0 4
70494: PPUSH
70495: CALL_OW 3
70499: ST_TO_ADDR
// end ;
70500: GO 70424
70502: POP
70503: POP
// end ;
70504: LD_VAR 0 2
70508: RET
// export function GetBaseMaterials ( base ) ; begin
70509: LD_INT 0
70511: PPUSH
// result := [ 0 , 0 , 0 ] ;
70512: LD_ADDR_VAR 0 2
70516: PUSH
70517: LD_INT 0
70519: PUSH
70520: LD_INT 0
70522: PUSH
70523: LD_INT 0
70525: PUSH
70526: EMPTY
70527: LIST
70528: LIST
70529: LIST
70530: ST_TO_ADDR
// if not base then
70531: LD_VAR 0 1
70535: NOT
70536: IFFALSE 70540
// exit ;
70538: GO 70589
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
70540: LD_ADDR_VAR 0 2
70544: PUSH
70545: LD_VAR 0 1
70549: PPUSH
70550: LD_INT 1
70552: PPUSH
70553: CALL_OW 275
70557: PUSH
70558: LD_VAR 0 1
70562: PPUSH
70563: LD_INT 2
70565: PPUSH
70566: CALL_OW 275
70570: PUSH
70571: LD_VAR 0 1
70575: PPUSH
70576: LD_INT 3
70578: PPUSH
70579: CALL_OW 275
70583: PUSH
70584: EMPTY
70585: LIST
70586: LIST
70587: LIST
70588: ST_TO_ADDR
// end ;
70589: LD_VAR 0 2
70593: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
70594: LD_INT 0
70596: PPUSH
70597: PPUSH
// result := array ;
70598: LD_ADDR_VAR 0 3
70602: PUSH
70603: LD_VAR 0 1
70607: ST_TO_ADDR
// if size >= result then
70608: LD_VAR 0 2
70612: PUSH
70613: LD_VAR 0 3
70617: GREATEREQUAL
70618: IFFALSE 70622
// exit ;
70620: GO 70672
// if size then
70622: LD_VAR 0 2
70626: IFFALSE 70672
// for i := array downto size do
70628: LD_ADDR_VAR 0 4
70632: PUSH
70633: DOUBLE
70634: LD_VAR 0 1
70638: INC
70639: ST_TO_ADDR
70640: LD_VAR 0 2
70644: PUSH
70645: FOR_DOWNTO
70646: IFFALSE 70670
// result := Delete ( result , result ) ;
70648: LD_ADDR_VAR 0 3
70652: PUSH
70653: LD_VAR 0 3
70657: PPUSH
70658: LD_VAR 0 3
70662: PPUSH
70663: CALL_OW 3
70667: ST_TO_ADDR
70668: GO 70645
70670: POP
70671: POP
// end ;
70672: LD_VAR 0 3
70676: RET
// export function ComExit ( unit ) ; var tmp ; begin
70677: LD_INT 0
70679: PPUSH
70680: PPUSH
// if not IsInUnit ( unit ) then
70681: LD_VAR 0 1
70685: PPUSH
70686: CALL_OW 310
70690: NOT
70691: IFFALSE 70695
// exit ;
70693: GO 70755
// tmp := IsInUnit ( unit ) ;
70695: LD_ADDR_VAR 0 3
70699: PUSH
70700: LD_VAR 0 1
70704: PPUSH
70705: CALL_OW 310
70709: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70710: LD_VAR 0 3
70714: PPUSH
70715: CALL_OW 247
70719: PUSH
70720: LD_INT 2
70722: EQUAL
70723: IFFALSE 70736
// ComExitVehicle ( unit ) else
70725: LD_VAR 0 1
70729: PPUSH
70730: CALL_OW 121
70734: GO 70745
// ComExitBuilding ( unit ) ;
70736: LD_VAR 0 1
70740: PPUSH
70741: CALL_OW 122
// result := tmp ;
70745: LD_ADDR_VAR 0 2
70749: PUSH
70750: LD_VAR 0 3
70754: ST_TO_ADDR
// end ;
70755: LD_VAR 0 2
70759: RET
// export function ComExitAll ( units ) ; var i ; begin
70760: LD_INT 0
70762: PPUSH
70763: PPUSH
// if not units then
70764: LD_VAR 0 1
70768: NOT
70769: IFFALSE 70773
// exit ;
70771: GO 70799
// for i in units do
70773: LD_ADDR_VAR 0 3
70777: PUSH
70778: LD_VAR 0 1
70782: PUSH
70783: FOR_IN
70784: IFFALSE 70797
// ComExit ( i ) ;
70786: LD_VAR 0 3
70790: PPUSH
70791: CALL 70677 0 1
70795: GO 70783
70797: POP
70798: POP
// end ;
70799: LD_VAR 0 2
70803: RET
// export function ResetHc ; begin
70804: LD_INT 0
70806: PPUSH
// InitHc ;
70807: CALL_OW 19
// hc_importance := 0 ;
70811: LD_ADDR_OWVAR 32
70815: PUSH
70816: LD_INT 0
70818: ST_TO_ADDR
// end ;
70819: LD_VAR 0 1
70823: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70824: LD_INT 0
70826: PPUSH
70827: PPUSH
70828: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70829: LD_ADDR_VAR 0 6
70833: PUSH
70834: LD_VAR 0 1
70838: PUSH
70839: LD_VAR 0 3
70843: PLUS
70844: PUSH
70845: LD_INT 2
70847: DIV
70848: ST_TO_ADDR
// if _x < 0 then
70849: LD_VAR 0 6
70853: PUSH
70854: LD_INT 0
70856: LESS
70857: IFFALSE 70874
// _x := _x * - 1 ;
70859: LD_ADDR_VAR 0 6
70863: PUSH
70864: LD_VAR 0 6
70868: PUSH
70869: LD_INT 1
70871: NEG
70872: MUL
70873: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70874: LD_ADDR_VAR 0 7
70878: PUSH
70879: LD_VAR 0 2
70883: PUSH
70884: LD_VAR 0 4
70888: PLUS
70889: PUSH
70890: LD_INT 2
70892: DIV
70893: ST_TO_ADDR
// if _y < 0 then
70894: LD_VAR 0 7
70898: PUSH
70899: LD_INT 0
70901: LESS
70902: IFFALSE 70919
// _y := _y * - 1 ;
70904: LD_ADDR_VAR 0 7
70908: PUSH
70909: LD_VAR 0 7
70913: PUSH
70914: LD_INT 1
70916: NEG
70917: MUL
70918: ST_TO_ADDR
// result := [ _x , _y ] ;
70919: LD_ADDR_VAR 0 5
70923: PUSH
70924: LD_VAR 0 6
70928: PUSH
70929: LD_VAR 0 7
70933: PUSH
70934: EMPTY
70935: LIST
70936: LIST
70937: ST_TO_ADDR
// end ;
70938: LD_VAR 0 5
70942: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70943: LD_INT 0
70945: PPUSH
70946: PPUSH
70947: PPUSH
70948: PPUSH
// task := GetTaskList ( unit ) ;
70949: LD_ADDR_VAR 0 7
70953: PUSH
70954: LD_VAR 0 1
70958: PPUSH
70959: CALL_OW 437
70963: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70964: LD_VAR 0 7
70968: NOT
70969: IFFALSE 70988
70971: PUSH
70972: LD_VAR 0 1
70976: PPUSH
70977: LD_VAR 0 2
70981: PPUSH
70982: CALL_OW 308
70986: NOT
70987: AND
70988: IFFALSE 70992
// exit ;
70990: GO 71110
// if IsInArea ( unit , area ) then
70992: LD_VAR 0 1
70996: PPUSH
70997: LD_VAR 0 2
71001: PPUSH
71002: CALL_OW 308
71006: IFFALSE 71024
// begin ComMoveToArea ( unit , goAway ) ;
71008: LD_VAR 0 1
71012: PPUSH
71013: LD_VAR 0 3
71017: PPUSH
71018: CALL_OW 113
// exit ;
71022: GO 71110
// end ; if task [ 1 ] [ 1 ] <> M then
71024: LD_VAR 0 7
71028: PUSH
71029: LD_INT 1
71031: ARRAY
71032: PUSH
71033: LD_INT 1
71035: ARRAY
71036: PUSH
71037: LD_STRING M
71039: NONEQUAL
71040: IFFALSE 71044
// exit ;
71042: GO 71110
// x := task [ 1 ] [ 2 ] ;
71044: LD_ADDR_VAR 0 5
71048: PUSH
71049: LD_VAR 0 7
71053: PUSH
71054: LD_INT 1
71056: ARRAY
71057: PUSH
71058: LD_INT 2
71060: ARRAY
71061: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
71062: LD_ADDR_VAR 0 6
71066: PUSH
71067: LD_VAR 0 7
71071: PUSH
71072: LD_INT 1
71074: ARRAY
71075: PUSH
71076: LD_INT 3
71078: ARRAY
71079: ST_TO_ADDR
// if InArea ( x , y , area ) then
71080: LD_VAR 0 5
71084: PPUSH
71085: LD_VAR 0 6
71089: PPUSH
71090: LD_VAR 0 2
71094: PPUSH
71095: CALL_OW 309
71099: IFFALSE 71110
// ComStop ( unit ) ;
71101: LD_VAR 0 1
71105: PPUSH
71106: CALL_OW 141
// end ;
71110: LD_VAR 0 4
71114: RET
// export function Abs ( value ) ; begin
71115: LD_INT 0
71117: PPUSH
// result := value ;
71118: LD_ADDR_VAR 0 2
71122: PUSH
71123: LD_VAR 0 1
71127: ST_TO_ADDR
// if value < 0 then
71128: LD_VAR 0 1
71132: PUSH
71133: LD_INT 0
71135: LESS
71136: IFFALSE 71153
// result := value * - 1 ;
71138: LD_ADDR_VAR 0 2
71142: PUSH
71143: LD_VAR 0 1
71147: PUSH
71148: LD_INT 1
71150: NEG
71151: MUL
71152: ST_TO_ADDR
// end ;
71153: LD_VAR 0 2
71157: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
71158: LD_INT 0
71160: PPUSH
71161: PPUSH
71162: PPUSH
71163: PPUSH
71164: PPUSH
71165: PPUSH
71166: PPUSH
71167: PPUSH
// if not unit or not building then
71168: LD_VAR 0 1
71172: NOT
71173: IFTRUE 71182
71175: PUSH
71176: LD_VAR 0 2
71180: NOT
71181: OR
71182: IFFALSE 71186
// exit ;
71184: GO 71414
// x := GetX ( building ) ;
71186: LD_ADDR_VAR 0 4
71190: PUSH
71191: LD_VAR 0 2
71195: PPUSH
71196: CALL_OW 250
71200: ST_TO_ADDR
// y := GetY ( building ) ;
71201: LD_ADDR_VAR 0 6
71205: PUSH
71206: LD_VAR 0 2
71210: PPUSH
71211: CALL_OW 251
71215: ST_TO_ADDR
// d := GetDir ( building ) ;
71216: LD_ADDR_VAR 0 8
71220: PUSH
71221: LD_VAR 0 2
71225: PPUSH
71226: CALL_OW 254
71230: ST_TO_ADDR
// r := 4 ;
71231: LD_ADDR_VAR 0 9
71235: PUSH
71236: LD_INT 4
71238: ST_TO_ADDR
// for i := 1 to 5 do
71239: LD_ADDR_VAR 0 10
71243: PUSH
71244: DOUBLE
71245: LD_INT 1
71247: DEC
71248: ST_TO_ADDR
71249: LD_INT 5
71251: PUSH
71252: FOR_TO
71253: IFFALSE 71412
// begin _x := ShiftX ( x , d , r + i ) ;
71255: LD_ADDR_VAR 0 5
71259: PUSH
71260: LD_VAR 0 4
71264: PPUSH
71265: LD_VAR 0 8
71269: PPUSH
71270: LD_VAR 0 9
71274: PUSH
71275: LD_VAR 0 10
71279: PLUS
71280: PPUSH
71281: CALL_OW 272
71285: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
71286: LD_ADDR_VAR 0 7
71290: PUSH
71291: LD_VAR 0 6
71295: PPUSH
71296: LD_VAR 0 8
71300: PPUSH
71301: LD_VAR 0 9
71305: PUSH
71306: LD_VAR 0 10
71310: PLUS
71311: PPUSH
71312: CALL_OW 273
71316: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
71317: LD_VAR 0 5
71321: PPUSH
71322: LD_VAR 0 7
71326: PPUSH
71327: CALL_OW 488
71331: IFFALSE 71366
71333: PUSH
71334: LD_VAR 0 5
71338: PPUSH
71339: LD_VAR 0 7
71343: PPUSH
71344: CALL_OW 428
71348: PPUSH
71349: CALL_OW 247
71353: PUSH
71354: LD_INT 3
71356: PUSH
71357: LD_INT 2
71359: PUSH
71360: EMPTY
71361: LIST
71362: LIST
71363: IN
71364: NOT
71365: AND
71366: IFFALSE 71410
// begin ComMoveXY ( unit , _x , _y ) ;
71368: LD_VAR 0 1
71372: PPUSH
71373: LD_VAR 0 5
71377: PPUSH
71378: LD_VAR 0 7
71382: PPUSH
71383: CALL_OW 111
// result := [ _x , _y ] ;
71387: LD_ADDR_VAR 0 3
71391: PUSH
71392: LD_VAR 0 5
71396: PUSH
71397: LD_VAR 0 7
71401: PUSH
71402: EMPTY
71403: LIST
71404: LIST
71405: ST_TO_ADDR
// exit ;
71406: POP
71407: POP
71408: GO 71414
// end ; end ;
71410: GO 71252
71412: POP
71413: POP
// end ;
71414: LD_VAR 0 3
71418: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
71419: LD_INT 0
71421: PPUSH
71422: PPUSH
71423: PPUSH
// result := 0 ;
71424: LD_ADDR_VAR 0 3
71428: PUSH
71429: LD_INT 0
71431: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
71432: LD_VAR 0 1
71436: PUSH
71437: LD_INT 0
71439: LESS
71440: IFTRUE 71452
71442: PUSH
71443: LD_VAR 0 1
71447: PUSH
71448: LD_INT 8
71450: GREATER
71451: OR
71452: IFTRUE 71464
71454: PUSH
71455: LD_VAR 0 2
71459: PUSH
71460: LD_INT 0
71462: LESS
71463: OR
71464: IFTRUE 71476
71466: PUSH
71467: LD_VAR 0 2
71471: PUSH
71472: LD_INT 8
71474: GREATER
71475: OR
71476: IFFALSE 71480
// exit ;
71478: GO 71555
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
71480: LD_ADDR_VAR 0 4
71484: PUSH
71485: LD_INT 22
71487: PUSH
71488: LD_VAR 0 2
71492: PUSH
71493: EMPTY
71494: LIST
71495: LIST
71496: PPUSH
71497: CALL_OW 69
71501: PUSH
71502: FOR_IN
71503: IFFALSE 71553
// begin un := UnitShoot ( i ) ;
71505: LD_ADDR_VAR 0 5
71509: PUSH
71510: LD_VAR 0 4
71514: PPUSH
71515: CALL_OW 504
71519: ST_TO_ADDR
// if GetSide ( un ) = side1 then
71520: LD_VAR 0 5
71524: PPUSH
71525: CALL_OW 255
71529: PUSH
71530: LD_VAR 0 1
71534: EQUAL
71535: IFFALSE 71551
// begin result := un ;
71537: LD_ADDR_VAR 0 3
71541: PUSH
71542: LD_VAR 0 5
71546: ST_TO_ADDR
// exit ;
71547: POP
71548: POP
71549: GO 71555
// end ; end ;
71551: GO 71502
71553: POP
71554: POP
// end ;
71555: LD_VAR 0 3
71559: RET
// export function GetCargoBay ( units ) ; begin
71560: LD_INT 0
71562: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
71563: LD_ADDR_VAR 0 2
71567: PUSH
71568: LD_VAR 0 1
71572: PPUSH
71573: LD_INT 2
71575: PUSH
71576: LD_INT 34
71578: PUSH
71579: LD_INT 12
71581: PUSH
71582: EMPTY
71583: LIST
71584: LIST
71585: PUSH
71586: LD_INT 34
71588: PUSH
71589: LD_INT 51
71591: PUSH
71592: EMPTY
71593: LIST
71594: LIST
71595: PUSH
71596: LD_INT 34
71598: PUSH
71599: LD_INT 32
71601: PUSH
71602: EMPTY
71603: LIST
71604: LIST
71605: PUSH
71606: LD_INT 34
71608: PUSH
71609: LD_INT 89
71611: PUSH
71612: EMPTY
71613: LIST
71614: LIST
71615: PUSH
71616: EMPTY
71617: LIST
71618: LIST
71619: LIST
71620: LIST
71621: LIST
71622: PPUSH
71623: CALL_OW 72
71627: ST_TO_ADDR
// end ;
71628: LD_VAR 0 2
71632: RET
// export function Negate ( value ) ; begin
71633: LD_INT 0
71635: PPUSH
// result := not value ;
71636: LD_ADDR_VAR 0 2
71640: PUSH
71641: LD_VAR 0 1
71645: NOT
71646: ST_TO_ADDR
// end ;
71647: LD_VAR 0 2
71651: RET
// export function Inc ( value ) ; begin
71652: LD_INT 0
71654: PPUSH
// result := value + 1 ;
71655: LD_ADDR_VAR 0 2
71659: PUSH
71660: LD_VAR 0 1
71664: PUSH
71665: LD_INT 1
71667: PLUS
71668: ST_TO_ADDR
// end ;
71669: LD_VAR 0 2
71673: RET
// export function Dec ( value ) ; begin
71674: LD_INT 0
71676: PPUSH
// result := value - 1 ;
71677: LD_ADDR_VAR 0 2
71681: PUSH
71682: LD_VAR 0 1
71686: PUSH
71687: LD_INT 1
71689: MINUS
71690: ST_TO_ADDR
// end ;
71691: LD_VAR 0 2
71695: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
71696: LD_INT 0
71698: PPUSH
71699: PPUSH
71700: PPUSH
71701: PPUSH
71702: PPUSH
71703: PPUSH
71704: PPUSH
71705: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
71706: LD_VAR 0 1
71710: PPUSH
71711: LD_VAR 0 2
71715: PPUSH
71716: CALL_OW 488
71720: NOT
71721: IFTRUE 71740
71723: PUSH
71724: LD_VAR 0 3
71728: PPUSH
71729: LD_VAR 0 4
71733: PPUSH
71734: CALL_OW 488
71738: NOT
71739: OR
71740: IFFALSE 71753
// begin result := - 1 ;
71742: LD_ADDR_VAR 0 5
71746: PUSH
71747: LD_INT 1
71749: NEG
71750: ST_TO_ADDR
// exit ;
71751: GO 71988
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
71753: LD_ADDR_VAR 0 12
71757: PUSH
71758: LD_VAR 0 1
71762: PPUSH
71763: LD_VAR 0 2
71767: PPUSH
71768: LD_VAR 0 3
71772: PPUSH
71773: LD_VAR 0 4
71777: PPUSH
71778: CALL 70824 0 4
71782: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
71783: LD_ADDR_VAR 0 11
71787: PUSH
71788: LD_VAR 0 1
71792: PPUSH
71793: LD_VAR 0 2
71797: PPUSH
71798: LD_VAR 0 12
71802: PUSH
71803: LD_INT 1
71805: ARRAY
71806: PPUSH
71807: LD_VAR 0 12
71811: PUSH
71812: LD_INT 2
71814: ARRAY
71815: PPUSH
71816: CALL_OW 298
71820: ST_TO_ADDR
// distance := 9999 ;
71821: LD_ADDR_VAR 0 10
71825: PUSH
71826: LD_INT 9999
71828: ST_TO_ADDR
// for i := 0 to 5 do
71829: LD_ADDR_VAR 0 6
71833: PUSH
71834: DOUBLE
71835: LD_INT 0
71837: DEC
71838: ST_TO_ADDR
71839: LD_INT 5
71841: PUSH
71842: FOR_TO
71843: IFFALSE 71986
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71845: LD_ADDR_VAR 0 7
71849: PUSH
71850: LD_VAR 0 1
71854: PPUSH
71855: LD_VAR 0 6
71859: PPUSH
71860: LD_VAR 0 11
71864: PPUSH
71865: CALL_OW 272
71869: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71870: LD_ADDR_VAR 0 8
71874: PUSH
71875: LD_VAR 0 2
71879: PPUSH
71880: LD_VAR 0 6
71884: PPUSH
71885: LD_VAR 0 11
71889: PPUSH
71890: CALL_OW 273
71894: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71895: LD_VAR 0 7
71899: PPUSH
71900: LD_VAR 0 8
71904: PPUSH
71905: CALL_OW 488
71909: NOT
71910: IFFALSE 71914
// continue ;
71912: GO 71842
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71914: LD_ADDR_VAR 0 9
71918: PUSH
71919: LD_VAR 0 12
71923: PUSH
71924: LD_INT 1
71926: ARRAY
71927: PPUSH
71928: LD_VAR 0 12
71932: PUSH
71933: LD_INT 2
71935: ARRAY
71936: PPUSH
71937: LD_VAR 0 7
71941: PPUSH
71942: LD_VAR 0 8
71946: PPUSH
71947: CALL_OW 298
71951: ST_TO_ADDR
// if tmp < distance then
71952: LD_VAR 0 9
71956: PUSH
71957: LD_VAR 0 10
71961: LESS
71962: IFFALSE 71984
// begin result := i ;
71964: LD_ADDR_VAR 0 5
71968: PUSH
71969: LD_VAR 0 6
71973: ST_TO_ADDR
// distance := tmp ;
71974: LD_ADDR_VAR 0 10
71978: PUSH
71979: LD_VAR 0 9
71983: ST_TO_ADDR
// end ; end ;
71984: GO 71842
71986: POP
71987: POP
// end ;
71988: LD_VAR 0 5
71992: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71993: LD_INT 0
71995: PPUSH
71996: PPUSH
// if not driver or not IsInUnit ( driver ) then
71997: LD_VAR 0 1
72001: NOT
72002: IFTRUE 72016
72004: PUSH
72005: LD_VAR 0 1
72009: PPUSH
72010: CALL_OW 310
72014: NOT
72015: OR
72016: IFFALSE 72020
// exit ;
72018: GO 72110
// vehicle := IsInUnit ( driver ) ;
72020: LD_ADDR_VAR 0 3
72024: PUSH
72025: LD_VAR 0 1
72029: PPUSH
72030: CALL_OW 310
72034: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72035: LD_VAR 0 1
72039: PPUSH
72040: LD_STRING \
72042: PUSH
72043: LD_INT 0
72045: PUSH
72046: LD_INT 0
72048: PUSH
72049: LD_INT 0
72051: PUSH
72052: LD_INT 0
72054: PUSH
72055: LD_INT 0
72057: PUSH
72058: LD_INT 0
72060: PUSH
72061: EMPTY
72062: LIST
72063: LIST
72064: LIST
72065: LIST
72066: LIST
72067: LIST
72068: LIST
72069: PUSH
72070: LD_STRING E
72072: PUSH
72073: LD_INT 0
72075: PUSH
72076: LD_INT 0
72078: PUSH
72079: LD_VAR 0 3
72083: PUSH
72084: LD_INT 0
72086: PUSH
72087: LD_INT 0
72089: PUSH
72090: LD_INT 0
72092: PUSH
72093: EMPTY
72094: LIST
72095: LIST
72096: LIST
72097: LIST
72098: LIST
72099: LIST
72100: LIST
72101: PUSH
72102: EMPTY
72103: LIST
72104: LIST
72105: PPUSH
72106: CALL_OW 446
// end ;
72110: LD_VAR 0 2
72114: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72115: LD_INT 0
72117: PPUSH
72118: PPUSH
// if not driver or not IsInUnit ( driver ) then
72119: LD_VAR 0 1
72123: NOT
72124: IFTRUE 72138
72126: PUSH
72127: LD_VAR 0 1
72131: PPUSH
72132: CALL_OW 310
72136: NOT
72137: OR
72138: IFFALSE 72142
// exit ;
72140: GO 72232
// vehicle := IsInUnit ( driver ) ;
72142: LD_ADDR_VAR 0 3
72146: PUSH
72147: LD_VAR 0 1
72151: PPUSH
72152: CALL_OW 310
72156: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72157: LD_VAR 0 1
72161: PPUSH
72162: LD_STRING \
72164: PUSH
72165: LD_INT 0
72167: PUSH
72168: LD_INT 0
72170: PUSH
72171: LD_INT 0
72173: PUSH
72174: LD_INT 0
72176: PUSH
72177: LD_INT 0
72179: PUSH
72180: LD_INT 0
72182: PUSH
72183: EMPTY
72184: LIST
72185: LIST
72186: LIST
72187: LIST
72188: LIST
72189: LIST
72190: LIST
72191: PUSH
72192: LD_STRING E
72194: PUSH
72195: LD_INT 0
72197: PUSH
72198: LD_INT 0
72200: PUSH
72201: LD_VAR 0 3
72205: PUSH
72206: LD_INT 0
72208: PUSH
72209: LD_INT 0
72211: PUSH
72212: LD_INT 0
72214: PUSH
72215: EMPTY
72216: LIST
72217: LIST
72218: LIST
72219: LIST
72220: LIST
72221: LIST
72222: LIST
72223: PUSH
72224: EMPTY
72225: LIST
72226: LIST
72227: PPUSH
72228: CALL_OW 447
// end ;
72232: LD_VAR 0 2
72236: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
72237: LD_INT 0
72239: PPUSH
72240: PPUSH
72241: PPUSH
// tmp := [ ] ;
72242: LD_ADDR_VAR 0 5
72246: PUSH
72247: EMPTY
72248: ST_TO_ADDR
// for i in units do
72249: LD_ADDR_VAR 0 4
72253: PUSH
72254: LD_VAR 0 1
72258: PUSH
72259: FOR_IN
72260: IFFALSE 72298
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
72262: LD_ADDR_VAR 0 5
72266: PUSH
72267: LD_VAR 0 5
72271: PPUSH
72272: LD_VAR 0 5
72276: PUSH
72277: LD_INT 1
72279: PLUS
72280: PPUSH
72281: LD_VAR 0 4
72285: PPUSH
72286: CALL_OW 256
72290: PPUSH
72291: CALL_OW 2
72295: ST_TO_ADDR
72296: GO 72259
72298: POP
72299: POP
// if not tmp then
72300: LD_VAR 0 5
72304: NOT
72305: IFFALSE 72309
// exit ;
72307: GO 72357
// if asc then
72309: LD_VAR 0 2
72313: IFFALSE 72337
// result := SortListByListAsc ( units , tmp ) else
72315: LD_ADDR_VAR 0 3
72319: PUSH
72320: LD_VAR 0 1
72324: PPUSH
72325: LD_VAR 0 5
72329: PPUSH
72330: CALL_OW 76
72334: ST_TO_ADDR
72335: GO 72357
// result := SortListByListDesc ( units , tmp ) ;
72337: LD_ADDR_VAR 0 3
72341: PUSH
72342: LD_VAR 0 1
72346: PPUSH
72347: LD_VAR 0 5
72351: PPUSH
72352: CALL_OW 77
72356: ST_TO_ADDR
// end ;
72357: LD_VAR 0 3
72361: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
72362: LD_INT 0
72364: PPUSH
72365: PPUSH
// task := GetTaskList ( mech ) ;
72366: LD_ADDR_VAR 0 4
72370: PUSH
72371: LD_VAR 0 1
72375: PPUSH
72376: CALL_OW 437
72380: ST_TO_ADDR
// if not task then
72381: LD_VAR 0 4
72385: NOT
72386: IFFALSE 72390
// exit ;
72388: GO 72434
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
72390: LD_ADDR_VAR 0 3
72394: PUSH
72395: LD_VAR 0 4
72399: PUSH
72400: LD_INT 1
72402: ARRAY
72403: PUSH
72404: LD_INT 1
72406: ARRAY
72407: PUSH
72408: LD_STRING r
72410: EQUAL
72411: IFFALSE 72433
72413: PUSH
72414: LD_VAR 0 4
72418: PUSH
72419: LD_INT 1
72421: ARRAY
72422: PUSH
72423: LD_INT 4
72425: ARRAY
72426: PUSH
72427: LD_VAR 0 2
72431: EQUAL
72432: AND
72433: ST_TO_ADDR
// end ;
72434: LD_VAR 0 3
72438: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
72439: LD_INT 0
72441: PPUSH
// SetDir ( unit , d ) ;
72442: LD_VAR 0 1
72446: PPUSH
72447: LD_VAR 0 4
72451: PPUSH
72452: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
72456: LD_ADDR_VAR 0 6
72460: PUSH
72461: LD_VAR 0 1
72465: PPUSH
72466: LD_VAR 0 2
72470: PPUSH
72471: LD_VAR 0 3
72475: PPUSH
72476: LD_VAR 0 5
72480: PPUSH
72481: CALL_OW 48
72485: ST_TO_ADDR
// end ;
72486: LD_VAR 0 6
72490: RET
// export function ToNaturalNumber ( number ) ; begin
72491: LD_INT 0
72493: PPUSH
// result := number div 1 ;
72494: LD_ADDR_VAR 0 2
72498: PUSH
72499: LD_VAR 0 1
72503: PUSH
72504: LD_INT 1
72506: DIV
72507: ST_TO_ADDR
// if number < 0 then
72508: LD_VAR 0 1
72512: PUSH
72513: LD_INT 0
72515: LESS
72516: IFFALSE 72526
// result := 0 ;
72518: LD_ADDR_VAR 0 2
72522: PUSH
72523: LD_INT 0
72525: ST_TO_ADDR
// end ;
72526: LD_VAR 0 2
72530: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
72531: LD_INT 0
72533: PPUSH
72534: PPUSH
72535: PPUSH
// if not buildings then
72536: LD_VAR 0 1
72540: NOT
72541: IFFALSE 72545
// exit ;
72543: GO 72660
// tmp := [ ] ;
72545: LD_ADDR_VAR 0 5
72549: PUSH
72550: EMPTY
72551: ST_TO_ADDR
// for b in buildings do
72552: LD_ADDR_VAR 0 4
72556: PUSH
72557: LD_VAR 0 1
72561: PUSH
72562: FOR_IN
72563: IFFALSE 72601
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
72565: LD_ADDR_VAR 0 5
72569: PUSH
72570: LD_VAR 0 5
72574: PPUSH
72575: LD_VAR 0 5
72579: PUSH
72580: LD_INT 1
72582: PLUS
72583: PPUSH
72584: LD_VAR 0 4
72588: PPUSH
72589: CALL_OW 266
72593: PPUSH
72594: CALL_OW 1
72598: ST_TO_ADDR
72599: GO 72562
72601: POP
72602: POP
// if not tmp then
72603: LD_VAR 0 5
72607: NOT
72608: IFFALSE 72612
// exit ;
72610: GO 72660
// if asc then
72612: LD_VAR 0 2
72616: IFFALSE 72640
// result := SortListByListAsc ( buildings , tmp ) else
72618: LD_ADDR_VAR 0 3
72622: PUSH
72623: LD_VAR 0 1
72627: PPUSH
72628: LD_VAR 0 5
72632: PPUSH
72633: CALL_OW 76
72637: ST_TO_ADDR
72638: GO 72660
// result := SortListByListDesc ( buildings , tmp ) ;
72640: LD_ADDR_VAR 0 3
72644: PUSH
72645: LD_VAR 0 1
72649: PPUSH
72650: LD_VAR 0 5
72654: PPUSH
72655: CALL_OW 77
72659: ST_TO_ADDR
// end ;
72660: LD_VAR 0 3
72664: RET
// export function SortByClass ( units , class ) ; var un ; begin
72665: LD_INT 0
72667: PPUSH
72668: PPUSH
// if not units or not class then
72669: LD_VAR 0 1
72673: NOT
72674: IFTRUE 72683
72676: PUSH
72677: LD_VAR 0 2
72681: NOT
72682: OR
72683: IFFALSE 72687
// exit ;
72685: GO 72782
// result := [ ] ;
72687: LD_ADDR_VAR 0 3
72691: PUSH
72692: EMPTY
72693: ST_TO_ADDR
// for un in units do
72694: LD_ADDR_VAR 0 4
72698: PUSH
72699: LD_VAR 0 1
72703: PUSH
72704: FOR_IN
72705: IFFALSE 72780
// if GetClass ( un ) = class then
72707: LD_VAR 0 4
72711: PPUSH
72712: CALL_OW 257
72716: PUSH
72717: LD_VAR 0 2
72721: EQUAL
72722: IFFALSE 72749
// result := Insert ( result , 1 , un ) else
72724: LD_ADDR_VAR 0 3
72728: PUSH
72729: LD_VAR 0 3
72733: PPUSH
72734: LD_INT 1
72736: PPUSH
72737: LD_VAR 0 4
72741: PPUSH
72742: CALL_OW 2
72746: ST_TO_ADDR
72747: GO 72778
// result := Replace ( result , result + 1 , un ) ;
72749: LD_ADDR_VAR 0 3
72753: PUSH
72754: LD_VAR 0 3
72758: PPUSH
72759: LD_VAR 0 3
72763: PUSH
72764: LD_INT 1
72766: PLUS
72767: PPUSH
72768: LD_VAR 0 4
72772: PPUSH
72773: CALL_OW 1
72777: ST_TO_ADDR
72778: GO 72704
72780: POP
72781: POP
// end ;
72782: LD_VAR 0 3
72786: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
72787: LD_INT 0
72789: PPUSH
72790: PPUSH
72791: PPUSH
72792: PPUSH
72793: PPUSH
72794: PPUSH
72795: PPUSH
// result := [ ] ;
72796: LD_ADDR_VAR 0 4
72800: PUSH
72801: EMPTY
72802: ST_TO_ADDR
// if x - r < 0 then
72803: LD_VAR 0 1
72807: PUSH
72808: LD_VAR 0 3
72812: MINUS
72813: PUSH
72814: LD_INT 0
72816: LESS
72817: IFFALSE 72829
// min_x := 0 else
72819: LD_ADDR_VAR 0 8
72823: PUSH
72824: LD_INT 0
72826: ST_TO_ADDR
72827: GO 72845
// min_x := x - r ;
72829: LD_ADDR_VAR 0 8
72833: PUSH
72834: LD_VAR 0 1
72838: PUSH
72839: LD_VAR 0 3
72843: MINUS
72844: ST_TO_ADDR
// if y - r < 0 then
72845: LD_VAR 0 2
72849: PUSH
72850: LD_VAR 0 3
72854: MINUS
72855: PUSH
72856: LD_INT 0
72858: LESS
72859: IFFALSE 72871
// min_y := 0 else
72861: LD_ADDR_VAR 0 7
72865: PUSH
72866: LD_INT 0
72868: ST_TO_ADDR
72869: GO 72887
// min_y := y - r ;
72871: LD_ADDR_VAR 0 7
72875: PUSH
72876: LD_VAR 0 2
72880: PUSH
72881: LD_VAR 0 3
72885: MINUS
72886: ST_TO_ADDR
// max_x := x + r ;
72887: LD_ADDR_VAR 0 9
72891: PUSH
72892: LD_VAR 0 1
72896: PUSH
72897: LD_VAR 0 3
72901: PLUS
72902: ST_TO_ADDR
// max_y := y + r ;
72903: LD_ADDR_VAR 0 10
72907: PUSH
72908: LD_VAR 0 2
72912: PUSH
72913: LD_VAR 0 3
72917: PLUS
72918: ST_TO_ADDR
// for _x = min_x to max_x do
72919: LD_ADDR_VAR 0 5
72923: PUSH
72924: DOUBLE
72925: LD_VAR 0 8
72929: DEC
72930: ST_TO_ADDR
72931: LD_VAR 0 9
72935: PUSH
72936: FOR_TO
72937: IFFALSE 73038
// for _y = min_y to max_y do
72939: LD_ADDR_VAR 0 6
72943: PUSH
72944: DOUBLE
72945: LD_VAR 0 7
72949: DEC
72950: ST_TO_ADDR
72951: LD_VAR 0 10
72955: PUSH
72956: FOR_TO
72957: IFFALSE 73034
// begin if not ValidHex ( _x , _y ) then
72959: LD_VAR 0 5
72963: PPUSH
72964: LD_VAR 0 6
72968: PPUSH
72969: CALL_OW 488
72973: NOT
72974: IFFALSE 72978
// continue ;
72976: GO 72956
// if GetResourceTypeXY ( _x , _y ) then
72978: LD_VAR 0 5
72982: PPUSH
72983: LD_VAR 0 6
72987: PPUSH
72988: CALL_OW 283
72992: IFFALSE 73032
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72994: LD_ADDR_VAR 0 4
72998: PUSH
72999: LD_VAR 0 4
73003: PPUSH
73004: LD_VAR 0 4
73008: PUSH
73009: LD_INT 1
73011: PLUS
73012: PPUSH
73013: LD_VAR 0 5
73017: PUSH
73018: LD_VAR 0 6
73022: PUSH
73023: EMPTY
73024: LIST
73025: LIST
73026: PPUSH
73027: CALL_OW 1
73031: ST_TO_ADDR
// end ;
73032: GO 72956
73034: POP
73035: POP
73036: GO 72936
73038: POP
73039: POP
// end ;
73040: LD_VAR 0 4
73044: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
73045: LD_INT 0
73047: PPUSH
73048: PPUSH
73049: PPUSH
73050: PPUSH
73051: PPUSH
73052: PPUSH
73053: PPUSH
73054: PPUSH
// if not units then
73055: LD_VAR 0 1
73059: NOT
73060: IFFALSE 73064
// exit ;
73062: GO 73596
// result := UnitFilter ( units , [ f_ok ] ) ;
73064: LD_ADDR_VAR 0 3
73068: PUSH
73069: LD_VAR 0 1
73073: PPUSH
73074: LD_INT 50
73076: PUSH
73077: EMPTY
73078: LIST
73079: PPUSH
73080: CALL_OW 72
73084: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
73085: LD_ADDR_VAR 0 8
73089: PUSH
73090: LD_VAR 0 1
73094: PUSH
73095: LD_INT 1
73097: ARRAY
73098: PPUSH
73099: CALL_OW 255
73103: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
73104: LD_ADDR_VAR 0 10
73108: PUSH
73109: LD_INT 29
73111: PUSH
73112: LD_INT 91
73114: PUSH
73115: LD_INT 49
73117: PUSH
73118: EMPTY
73119: LIST
73120: LIST
73121: LIST
73122: ST_TO_ADDR
// if not result then
73123: LD_VAR 0 3
73127: NOT
73128: IFFALSE 73132
// exit ;
73130: GO 73596
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
73132: LD_ADDR_VAR 0 5
73136: PUSH
73137: LD_INT 81
73139: PUSH
73140: LD_VAR 0 8
73144: PUSH
73145: EMPTY
73146: LIST
73147: LIST
73148: PPUSH
73149: CALL_OW 69
73153: ST_TO_ADDR
// for i in result do
73154: LD_ADDR_VAR 0 4
73158: PUSH
73159: LD_VAR 0 3
73163: PUSH
73164: FOR_IN
73165: IFFALSE 73594
// begin tag := GetTag ( i ) + 1 ;
73167: LD_ADDR_VAR 0 9
73171: PUSH
73172: LD_VAR 0 4
73176: PPUSH
73177: CALL_OW 110
73181: PUSH
73182: LD_INT 1
73184: PLUS
73185: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
73186: LD_ADDR_VAR 0 7
73190: PUSH
73191: LD_VAR 0 4
73195: PPUSH
73196: CALL_OW 250
73200: PPUSH
73201: LD_VAR 0 4
73205: PPUSH
73206: CALL_OW 251
73210: PPUSH
73211: LD_INT 4
73213: PPUSH
73214: CALL 72787 0 3
73218: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
73219: LD_VAR 0 4
73223: PPUSH
73224: CALL_OW 247
73228: PUSH
73229: LD_INT 2
73231: EQUAL
73232: IFFALSE 73244
73234: PUSH
73235: LD_VAR 0 7
73239: PUSH
73240: LD_INT 2
73242: GREATER
73243: AND
73244: IFFALSE 73264
73246: PUSH
73247: LD_VAR 0 4
73251: PPUSH
73252: CALL_OW 264
73256: PUSH
73257: LD_VAR 0 10
73261: IN
73262: NOT
73263: AND
73264: IFFALSE 73303
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
73266: LD_VAR 0 4
73270: PPUSH
73271: LD_VAR 0 7
73275: PUSH
73276: LD_INT 1
73278: ARRAY
73279: PUSH
73280: LD_INT 1
73282: ARRAY
73283: PPUSH
73284: LD_VAR 0 7
73288: PUSH
73289: LD_INT 1
73291: ARRAY
73292: PUSH
73293: LD_INT 2
73295: ARRAY
73296: PPUSH
73297: CALL_OW 116
73301: GO 73592
// if path > tag then
73303: LD_VAR 0 2
73307: PUSH
73308: LD_VAR 0 9
73312: GREATER
73313: IFFALSE 73521
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
73315: LD_ADDR_VAR 0 6
73319: PUSH
73320: LD_VAR 0 5
73324: PPUSH
73325: LD_INT 91
73327: PUSH
73328: LD_VAR 0 4
73332: PUSH
73333: LD_INT 8
73335: PUSH
73336: EMPTY
73337: LIST
73338: LIST
73339: LIST
73340: PPUSH
73341: CALL_OW 72
73345: ST_TO_ADDR
// if nearEnemy then
73346: LD_VAR 0 6
73350: IFFALSE 73419
// begin if GetWeapon ( i ) = ru_time_lapser then
73352: LD_VAR 0 4
73356: PPUSH
73357: CALL_OW 264
73361: PUSH
73362: LD_INT 49
73364: EQUAL
73365: IFFALSE 73393
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
73367: LD_VAR 0 4
73371: PPUSH
73372: LD_VAR 0 6
73376: PPUSH
73377: LD_VAR 0 4
73381: PPUSH
73382: CALL_OW 74
73386: PPUSH
73387: CALL_OW 112
73391: GO 73417
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
73393: LD_VAR 0 4
73397: PPUSH
73398: LD_VAR 0 6
73402: PPUSH
73403: LD_VAR 0 4
73407: PPUSH
73408: CALL_OW 74
73412: PPUSH
73413: CALL 74677 0 2
// end else
73417: GO 73519
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
73419: LD_VAR 0 4
73423: PPUSH
73424: LD_VAR 0 2
73428: PUSH
73429: LD_VAR 0 9
73433: ARRAY
73434: PUSH
73435: LD_INT 1
73437: ARRAY
73438: PPUSH
73439: LD_VAR 0 2
73443: PUSH
73444: LD_VAR 0 9
73448: ARRAY
73449: PUSH
73450: LD_INT 2
73452: ARRAY
73453: PPUSH
73454: CALL_OW 297
73458: PUSH
73459: LD_INT 6
73461: GREATER
73462: IFFALSE 73505
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
73464: LD_VAR 0 4
73468: PPUSH
73469: LD_VAR 0 2
73473: PUSH
73474: LD_VAR 0 9
73478: ARRAY
73479: PUSH
73480: LD_INT 1
73482: ARRAY
73483: PPUSH
73484: LD_VAR 0 2
73488: PUSH
73489: LD_VAR 0 9
73493: ARRAY
73494: PUSH
73495: LD_INT 2
73497: ARRAY
73498: PPUSH
73499: CALL_OW 114
73503: GO 73519
// SetTag ( i , tag ) ;
73505: LD_VAR 0 4
73509: PPUSH
73510: LD_VAR 0 9
73514: PPUSH
73515: CALL_OW 109
// end else
73519: GO 73592
// if enemy then
73521: LD_VAR 0 5
73525: IFFALSE 73592
// begin if GetWeapon ( i ) = ru_time_lapser then
73527: LD_VAR 0 4
73531: PPUSH
73532: CALL_OW 264
73536: PUSH
73537: LD_INT 49
73539: EQUAL
73540: IFFALSE 73568
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
73542: LD_VAR 0 4
73546: PPUSH
73547: LD_VAR 0 5
73551: PPUSH
73552: LD_VAR 0 4
73556: PPUSH
73557: CALL_OW 74
73561: PPUSH
73562: CALL_OW 112
73566: GO 73592
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
73568: LD_VAR 0 4
73572: PPUSH
73573: LD_VAR 0 5
73577: PPUSH
73578: LD_VAR 0 4
73582: PPUSH
73583: CALL_OW 74
73587: PPUSH
73588: CALL 74677 0 2
// end ; end ;
73592: GO 73164
73594: POP
73595: POP
// end ;
73596: LD_VAR 0 3
73600: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
73601: LD_INT 0
73603: PPUSH
73604: PPUSH
73605: PPUSH
// if not unit or IsInUnit ( unit ) then
73606: LD_VAR 0 1
73610: NOT
73611: IFTRUE 73624
73613: PUSH
73614: LD_VAR 0 1
73618: PPUSH
73619: CALL_OW 310
73623: OR
73624: IFFALSE 73628
// exit ;
73626: GO 73719
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
73628: LD_ADDR_VAR 0 4
73632: PUSH
73633: LD_VAR 0 1
73637: PPUSH
73638: CALL_OW 250
73642: PPUSH
73643: LD_VAR 0 2
73647: PPUSH
73648: LD_INT 1
73650: PPUSH
73651: CALL_OW 272
73655: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
73656: LD_ADDR_VAR 0 5
73660: PUSH
73661: LD_VAR 0 1
73665: PPUSH
73666: CALL_OW 251
73670: PPUSH
73671: LD_VAR 0 2
73675: PPUSH
73676: LD_INT 1
73678: PPUSH
73679: CALL_OW 273
73683: ST_TO_ADDR
// if ValidHex ( x , y ) then
73684: LD_VAR 0 4
73688: PPUSH
73689: LD_VAR 0 5
73693: PPUSH
73694: CALL_OW 488
73698: IFFALSE 73719
// ComTurnXY ( unit , x , y ) ;
73700: LD_VAR 0 1
73704: PPUSH
73705: LD_VAR 0 4
73709: PPUSH
73710: LD_VAR 0 5
73714: PPUSH
73715: CALL_OW 118
// end ;
73719: LD_VAR 0 3
73723: RET
// export function SeeUnits ( side , units ) ; var i ; begin
73724: LD_INT 0
73726: PPUSH
73727: PPUSH
// result := false ;
73728: LD_ADDR_VAR 0 3
73732: PUSH
73733: LD_INT 0
73735: ST_TO_ADDR
// if not units then
73736: LD_VAR 0 2
73740: NOT
73741: IFFALSE 73745
// exit ;
73743: GO 73790
// for i in units do
73745: LD_ADDR_VAR 0 4
73749: PUSH
73750: LD_VAR 0 2
73754: PUSH
73755: FOR_IN
73756: IFFALSE 73788
// if See ( side , i ) then
73758: LD_VAR 0 1
73762: PPUSH
73763: LD_VAR 0 4
73767: PPUSH
73768: CALL_OW 292
73772: IFFALSE 73786
// begin result := true ;
73774: LD_ADDR_VAR 0 3
73778: PUSH
73779: LD_INT 1
73781: ST_TO_ADDR
// exit ;
73782: POP
73783: POP
73784: GO 73790
// end ;
73786: GO 73755
73788: POP
73789: POP
// end ;
73790: LD_VAR 0 3
73794: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
73795: LD_INT 0
73797: PPUSH
73798: PPUSH
73799: PPUSH
73800: PPUSH
// if not unit or not points then
73801: LD_VAR 0 1
73805: NOT
73806: IFTRUE 73815
73808: PUSH
73809: LD_VAR 0 2
73813: NOT
73814: OR
73815: IFFALSE 73819
// exit ;
73817: GO 73909
// dist := 99999 ;
73819: LD_ADDR_VAR 0 5
73823: PUSH
73824: LD_INT 99999
73826: ST_TO_ADDR
// for i in points do
73827: LD_ADDR_VAR 0 4
73831: PUSH
73832: LD_VAR 0 2
73836: PUSH
73837: FOR_IN
73838: IFFALSE 73907
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
73840: LD_ADDR_VAR 0 6
73844: PUSH
73845: LD_VAR 0 1
73849: PPUSH
73850: LD_VAR 0 4
73854: PUSH
73855: LD_INT 1
73857: ARRAY
73858: PPUSH
73859: LD_VAR 0 4
73863: PUSH
73864: LD_INT 2
73866: ARRAY
73867: PPUSH
73868: CALL_OW 297
73872: ST_TO_ADDR
// if tmpDist < dist then
73873: LD_VAR 0 6
73877: PUSH
73878: LD_VAR 0 5
73882: LESS
73883: IFFALSE 73905
// begin result := i ;
73885: LD_ADDR_VAR 0 3
73889: PUSH
73890: LD_VAR 0 4
73894: ST_TO_ADDR
// dist := tmpDist ;
73895: LD_ADDR_VAR 0 5
73899: PUSH
73900: LD_VAR 0 6
73904: ST_TO_ADDR
// end ; end ;
73905: GO 73837
73907: POP
73908: POP
// end ;
73909: LD_VAR 0 3
73913: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
73914: LD_INT 0
73916: PPUSH
// uc_side := side ;
73917: LD_ADDR_OWVAR 20
73921: PUSH
73922: LD_VAR 0 1
73926: ST_TO_ADDR
// uc_nation := 3 ;
73927: LD_ADDR_OWVAR 21
73931: PUSH
73932: LD_INT 3
73934: ST_TO_ADDR
// vc_chassis := 25 ;
73935: LD_ADDR_OWVAR 37
73939: PUSH
73940: LD_INT 25
73942: ST_TO_ADDR
// vc_engine := engine_siberite ;
73943: LD_ADDR_OWVAR 39
73947: PUSH
73948: LD_INT 3
73950: ST_TO_ADDR
// vc_control := control_computer ;
73951: LD_ADDR_OWVAR 38
73955: PUSH
73956: LD_INT 3
73958: ST_TO_ADDR
// vc_weapon := 59 ;
73959: LD_ADDR_OWVAR 40
73963: PUSH
73964: LD_INT 59
73966: ST_TO_ADDR
// result := CreateVehicle ;
73967: LD_ADDR_VAR 0 5
73971: PUSH
73972: CALL_OW 45
73976: ST_TO_ADDR
// SetDir ( result , d ) ;
73977: LD_VAR 0 5
73981: PPUSH
73982: LD_VAR 0 4
73986: PPUSH
73987: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
73991: LD_VAR 0 5
73995: PPUSH
73996: LD_VAR 0 2
74000: PPUSH
74001: LD_VAR 0 3
74005: PPUSH
74006: LD_INT 0
74008: PPUSH
74009: CALL_OW 48
// end ;
74013: LD_VAR 0 5
74017: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
74018: LD_INT 0
74020: PPUSH
74021: PPUSH
74022: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
74023: LD_ADDR_VAR 0 2
74027: PUSH
74028: LD_INT 0
74030: PUSH
74031: LD_INT 0
74033: PUSH
74034: LD_INT 0
74036: PUSH
74037: LD_INT 0
74039: PUSH
74040: EMPTY
74041: LIST
74042: LIST
74043: LIST
74044: LIST
74045: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
74046: LD_VAR 0 1
74050: NOT
74051: IFTRUE 74084
74053: PUSH
74054: LD_VAR 0 1
74058: PPUSH
74059: CALL_OW 264
74063: PUSH
74064: LD_INT 12
74066: PUSH
74067: LD_INT 51
74069: PUSH
74070: LD_INT 32
74072: PUSH
74073: LD_INT 89
74075: PUSH
74076: EMPTY
74077: LIST
74078: LIST
74079: LIST
74080: LIST
74081: IN
74082: NOT
74083: OR
74084: IFFALSE 74088
// exit ;
74086: GO 74186
// for i := 1 to 3 do
74088: LD_ADDR_VAR 0 3
74092: PUSH
74093: DOUBLE
74094: LD_INT 1
74096: DEC
74097: ST_TO_ADDR
74098: LD_INT 3
74100: PUSH
74101: FOR_TO
74102: IFFALSE 74184
// begin tmp := GetCargo ( cargo , i ) ;
74104: LD_ADDR_VAR 0 4
74108: PUSH
74109: LD_VAR 0 1
74113: PPUSH
74114: LD_VAR 0 3
74118: PPUSH
74119: CALL_OW 289
74123: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
74124: LD_ADDR_VAR 0 2
74128: PUSH
74129: LD_VAR 0 2
74133: PPUSH
74134: LD_VAR 0 3
74138: PPUSH
74139: LD_VAR 0 4
74143: PPUSH
74144: CALL_OW 1
74148: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
74149: LD_ADDR_VAR 0 2
74153: PUSH
74154: LD_VAR 0 2
74158: PPUSH
74159: LD_INT 4
74161: PPUSH
74162: LD_VAR 0 2
74166: PUSH
74167: LD_INT 4
74169: ARRAY
74170: PUSH
74171: LD_VAR 0 4
74175: PLUS
74176: PPUSH
74177: CALL_OW 1
74181: ST_TO_ADDR
// end ;
74182: GO 74101
74184: POP
74185: POP
// end ;
74186: LD_VAR 0 2
74190: RET
// export function Length ( array ) ; begin
74191: LD_INT 0
74193: PPUSH
// result := array + 0 ;
74194: LD_ADDR_VAR 0 2
74198: PUSH
74199: LD_VAR 0 1
74203: PUSH
74204: LD_INT 0
74206: PLUS
74207: ST_TO_ADDR
// end ;
74208: LD_VAR 0 2
74212: RET
// export function PrepareArray ( array ) ; begin
74213: LD_INT 0
74215: PPUSH
// result := array diff 0 ;
74216: LD_ADDR_VAR 0 2
74220: PUSH
74221: LD_VAR 0 1
74225: PUSH
74226: LD_INT 0
74228: DIFF
74229: ST_TO_ADDR
// if not result [ 1 ] then
74230: LD_VAR 0 2
74234: PUSH
74235: LD_INT 1
74237: ARRAY
74238: NOT
74239: IFFALSE 74259
// result := Delete ( result , 1 ) ;
74241: LD_ADDR_VAR 0 2
74245: PUSH
74246: LD_VAR 0 2
74250: PPUSH
74251: LD_INT 1
74253: PPUSH
74254: CALL_OW 3
74258: ST_TO_ADDR
// end ;
74259: LD_VAR 0 2
74263: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
74264: LD_INT 0
74266: PPUSH
74267: PPUSH
74268: PPUSH
74269: PPUSH
// sibRocketRange := 25 ;
74270: LD_ADDR_VAR 0 6
74274: PUSH
74275: LD_INT 25
74277: ST_TO_ADDR
// result := false ;
74278: LD_ADDR_VAR 0 4
74282: PUSH
74283: LD_INT 0
74285: ST_TO_ADDR
// for i := 0 to 5 do
74286: LD_ADDR_VAR 0 5
74290: PUSH
74291: DOUBLE
74292: LD_INT 0
74294: DEC
74295: ST_TO_ADDR
74296: LD_INT 5
74298: PUSH
74299: FOR_TO
74300: IFFALSE 74367
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
74302: LD_VAR 0 1
74306: PPUSH
74307: LD_VAR 0 5
74311: PPUSH
74312: LD_VAR 0 6
74316: PPUSH
74317: CALL_OW 272
74321: PPUSH
74322: LD_VAR 0 2
74326: PPUSH
74327: LD_VAR 0 5
74331: PPUSH
74332: LD_VAR 0 6
74336: PPUSH
74337: CALL_OW 273
74341: PPUSH
74342: LD_VAR 0 3
74346: PPUSH
74347: CALL_OW 309
74351: IFFALSE 74365
// begin result := true ;
74353: LD_ADDR_VAR 0 4
74357: PUSH
74358: LD_INT 1
74360: ST_TO_ADDR
// exit ;
74361: POP
74362: POP
74363: GO 74369
// end ;
74365: GO 74299
74367: POP
74368: POP
// end ;
74369: LD_VAR 0 4
74373: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
74374: LD_INT 0
74376: PPUSH
74377: PPUSH
74378: PPUSH
// if btype = b_depot then
74379: LD_VAR 0 2
74383: PUSH
74384: LD_INT 0
74386: EQUAL
74387: IFFALSE 74399
// begin result := true ;
74389: LD_ADDR_VAR 0 3
74393: PUSH
74394: LD_INT 1
74396: ST_TO_ADDR
// exit ;
74397: GO 74519
// end ; pom := GetBase ( depot ) ;
74399: LD_ADDR_VAR 0 4
74403: PUSH
74404: LD_VAR 0 1
74408: PPUSH
74409: CALL_OW 274
74413: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
74414: LD_ADDR_VAR 0 5
74418: PUSH
74419: LD_VAR 0 2
74423: PPUSH
74424: LD_VAR 0 1
74428: PPUSH
74429: CALL_OW 248
74433: PPUSH
74434: CALL_OW 450
74438: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
74439: LD_ADDR_VAR 0 3
74443: PUSH
74444: LD_VAR 0 4
74448: PPUSH
74449: LD_INT 1
74451: PPUSH
74452: CALL_OW 275
74456: PUSH
74457: LD_VAR 0 5
74461: PUSH
74462: LD_INT 1
74464: ARRAY
74465: GREATEREQUAL
74466: IFFALSE 74492
74468: PUSH
74469: LD_VAR 0 4
74473: PPUSH
74474: LD_INT 2
74476: PPUSH
74477: CALL_OW 275
74481: PUSH
74482: LD_VAR 0 5
74486: PUSH
74487: LD_INT 2
74489: ARRAY
74490: GREATEREQUAL
74491: AND
74492: IFFALSE 74518
74494: PUSH
74495: LD_VAR 0 4
74499: PPUSH
74500: LD_INT 3
74502: PPUSH
74503: CALL_OW 275
74507: PUSH
74508: LD_VAR 0 5
74512: PUSH
74513: LD_INT 3
74515: ARRAY
74516: GREATEREQUAL
74517: AND
74518: ST_TO_ADDR
// end ;
74519: LD_VAR 0 3
74523: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
74524: LD_INT 0
74526: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
74527: LD_VAR 0 1
74531: PPUSH
74532: LD_VAR 0 2
74536: PPUSH
74537: LD_INT 0
74539: PPUSH
74540: LD_INT 0
74542: PPUSH
74543: LD_INT 1
74545: PPUSH
74546: LD_INT 0
74548: PPUSH
74549: CALL_OW 587
// end ;
74553: LD_VAR 0 3
74557: RET
// export function CenterOnNow ( unit ) ; begin
74558: LD_INT 0
74560: PPUSH
// result := IsInUnit ( unit ) ;
74561: LD_ADDR_VAR 0 2
74565: PUSH
74566: LD_VAR 0 1
74570: PPUSH
74571: CALL_OW 310
74575: ST_TO_ADDR
// if not result then
74576: LD_VAR 0 2
74580: NOT
74581: IFFALSE 74593
// result := unit ;
74583: LD_ADDR_VAR 0 2
74587: PUSH
74588: LD_VAR 0 1
74592: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
74593: LD_VAR 0 1
74597: PPUSH
74598: CALL_OW 87
// end ;
74602: LD_VAR 0 2
74606: RET
// export function ComMoveHex ( unit , hex ) ; begin
74607: LD_INT 0
74609: PPUSH
// if not hex then
74610: LD_VAR 0 2
74614: NOT
74615: IFFALSE 74619
// exit ;
74617: GO 74672
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
74619: LD_VAR 0 2
74623: PUSH
74624: LD_INT 1
74626: ARRAY
74627: PPUSH
74628: LD_VAR 0 2
74632: PUSH
74633: LD_INT 2
74635: ARRAY
74636: PPUSH
74637: CALL_OW 428
74641: IFFALSE 74645
// exit ;
74643: GO 74672
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
74645: LD_VAR 0 1
74649: PPUSH
74650: LD_VAR 0 2
74654: PUSH
74655: LD_INT 1
74657: ARRAY
74658: PPUSH
74659: LD_VAR 0 2
74663: PUSH
74664: LD_INT 2
74666: ARRAY
74667: PPUSH
74668: CALL_OW 111
// end ;
74672: LD_VAR 0 3
74676: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
74677: LD_INT 0
74679: PPUSH
74680: PPUSH
74681: PPUSH
// if not unit or not enemy then
74682: LD_VAR 0 1
74686: NOT
74687: IFTRUE 74696
74689: PUSH
74690: LD_VAR 0 2
74694: NOT
74695: OR
74696: IFFALSE 74700
// exit ;
74698: GO 74826
// x := GetX ( enemy ) ;
74700: LD_ADDR_VAR 0 4
74704: PUSH
74705: LD_VAR 0 2
74709: PPUSH
74710: CALL_OW 250
74714: ST_TO_ADDR
// y := GetY ( enemy ) ;
74715: LD_ADDR_VAR 0 5
74719: PUSH
74720: LD_VAR 0 2
74724: PPUSH
74725: CALL_OW 251
74729: ST_TO_ADDR
// if ValidHex ( x , y ) then
74730: LD_VAR 0 4
74734: PPUSH
74735: LD_VAR 0 5
74739: PPUSH
74740: CALL_OW 488
74744: IFFALSE 74826
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
74746: LD_VAR 0 2
74750: PPUSH
74751: CALL_OW 247
74755: PUSH
74756: LD_INT 3
74758: PUSH
74759: LD_INT 2
74761: PUSH
74762: EMPTY
74763: LIST
74764: LIST
74765: IN
74766: IFTRUE 74789
74768: PUSH
74769: LD_VAR 0 1
74773: PPUSH
74774: CALL_OW 255
74778: PPUSH
74779: LD_VAR 0 2
74783: PPUSH
74784: CALL_OW 292
74788: OR
74789: IFFALSE 74807
// ComAttackUnit ( unit , enemy ) else
74791: LD_VAR 0 1
74795: PPUSH
74796: LD_VAR 0 2
74800: PPUSH
74801: CALL_OW 115
74805: GO 74826
// ComAgressiveMove ( unit , x , y ) ;
74807: LD_VAR 0 1
74811: PPUSH
74812: LD_VAR 0 4
74816: PPUSH
74817: LD_VAR 0 5
74821: PPUSH
74822: CALL_OW 114
// end ;
74826: LD_VAR 0 3
74830: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
74831: LD_INT 0
74833: PPUSH
74834: PPUSH
74835: PPUSH
// list := AreaToList ( area , 0 ) ;
74836: LD_ADDR_VAR 0 5
74840: PUSH
74841: LD_VAR 0 1
74845: PPUSH
74846: LD_INT 0
74848: PPUSH
74849: CALL_OW 517
74853: ST_TO_ADDR
// if not list then
74854: LD_VAR 0 5
74858: NOT
74859: IFFALSE 74863
// exit ;
74861: GO 74993
// if all then
74863: LD_VAR 0 2
74867: IFFALSE 74955
// begin for i := 1 to list [ 1 ] do
74869: LD_ADDR_VAR 0 4
74873: PUSH
74874: DOUBLE
74875: LD_INT 1
74877: DEC
74878: ST_TO_ADDR
74879: LD_VAR 0 5
74883: PUSH
74884: LD_INT 1
74886: ARRAY
74887: PUSH
74888: FOR_TO
74889: IFFALSE 74951
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
74891: LD_ADDR_VAR 0 3
74895: PUSH
74896: LD_VAR 0 3
74900: PPUSH
74901: LD_VAR 0 3
74905: PUSH
74906: LD_INT 1
74908: PLUS
74909: PPUSH
74910: LD_VAR 0 5
74914: PUSH
74915: LD_INT 1
74917: ARRAY
74918: PUSH
74919: LD_VAR 0 4
74923: ARRAY
74924: PUSH
74925: LD_VAR 0 5
74929: PUSH
74930: LD_INT 2
74932: ARRAY
74933: PUSH
74934: LD_VAR 0 4
74938: ARRAY
74939: PUSH
74940: EMPTY
74941: LIST
74942: LIST
74943: PPUSH
74944: CALL_OW 1
74948: ST_TO_ADDR
74949: GO 74888
74951: POP
74952: POP
// exit ;
74953: GO 74993
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
74955: LD_ADDR_VAR 0 3
74959: PUSH
74960: LD_VAR 0 5
74964: PUSH
74965: LD_INT 1
74967: ARRAY
74968: PUSH
74969: LD_INT 1
74971: ARRAY
74972: PUSH
74973: LD_VAR 0 5
74977: PUSH
74978: LD_INT 2
74980: ARRAY
74981: PUSH
74982: LD_INT 1
74984: ARRAY
74985: PUSH
74986: EMPTY
74987: LIST
74988: LIST
74989: PUSH
74990: EMPTY
74991: LIST
74992: ST_TO_ADDR
// end ;
74993: LD_VAR 0 3
74997: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
74998: LD_INT 0
75000: PPUSH
75001: PPUSH
// list := AreaToList ( area , 0 ) ;
75002: LD_ADDR_VAR 0 4
75006: PUSH
75007: LD_VAR 0 1
75011: PPUSH
75012: LD_INT 0
75014: PPUSH
75015: CALL_OW 517
75019: ST_TO_ADDR
// if not list then
75020: LD_VAR 0 4
75024: NOT
75025: IFFALSE 75029
// exit ;
75027: GO 75070
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
75029: LD_ADDR_VAR 0 3
75033: PUSH
75034: LD_VAR 0 4
75038: PUSH
75039: LD_INT 1
75041: ARRAY
75042: PUSH
75043: LD_INT 1
75045: ARRAY
75046: PUSH
75047: LD_VAR 0 4
75051: PUSH
75052: LD_INT 2
75054: ARRAY
75055: PUSH
75056: LD_INT 1
75058: ARRAY
75059: PUSH
75060: LD_VAR 0 2
75064: PUSH
75065: EMPTY
75066: LIST
75067: LIST
75068: LIST
75069: ST_TO_ADDR
// end ;
75070: LD_VAR 0 3
75074: RET
// export function First ( array ) ; begin
75075: LD_INT 0
75077: PPUSH
// if not array then
75078: LD_VAR 0 1
75082: NOT
75083: IFFALSE 75087
// exit ;
75085: GO 75101
// result := array [ 1 ] ;
75087: LD_ADDR_VAR 0 2
75091: PUSH
75092: LD_VAR 0 1
75096: PUSH
75097: LD_INT 1
75099: ARRAY
75100: ST_TO_ADDR
// end ;
75101: LD_VAR 0 2
75105: RET
// export function Last ( array ) ; begin
75106: LD_INT 0
75108: PPUSH
// if not array then
75109: LD_VAR 0 1
75113: NOT
75114: IFFALSE 75118
// exit ;
75116: GO 75134
// result := array [ array ] ;
75118: LD_ADDR_VAR 0 2
75122: PUSH
75123: LD_VAR 0 1
75127: PUSH
75128: LD_VAR 0 1
75132: ARRAY
75133: ST_TO_ADDR
// end ;
75134: LD_VAR 0 2
75138: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
75139: LD_INT 0
75141: PPUSH
75142: PPUSH
// result := [ ] ;
75143: LD_ADDR_VAR 0 5
75147: PUSH
75148: EMPTY
75149: ST_TO_ADDR
// if not array then
75150: LD_VAR 0 1
75154: NOT
75155: IFFALSE 75159
// exit ;
75157: GO 75271
// for i := 1 to array do
75159: LD_ADDR_VAR 0 6
75163: PUSH
75164: DOUBLE
75165: LD_INT 1
75167: DEC
75168: ST_TO_ADDR
75169: LD_VAR 0 1
75173: PUSH
75174: FOR_TO
75175: IFFALSE 75269
// if array [ i ] [ index ] = value then
75177: LD_VAR 0 1
75181: PUSH
75182: LD_VAR 0 6
75186: ARRAY
75187: PUSH
75188: LD_VAR 0 2
75192: ARRAY
75193: PUSH
75194: LD_VAR 0 3
75198: EQUAL
75199: IFFALSE 75267
// begin if indexColumn then
75201: LD_VAR 0 4
75205: IFFALSE 75241
// result := Join ( result , array [ i ] [ indexColumn ] ) else
75207: LD_ADDR_VAR 0 5
75211: PUSH
75212: LD_VAR 0 5
75216: PPUSH
75217: LD_VAR 0 1
75221: PUSH
75222: LD_VAR 0 6
75226: ARRAY
75227: PUSH
75228: LD_VAR 0 4
75232: ARRAY
75233: PPUSH
75234: CALL 70279 0 2
75238: ST_TO_ADDR
75239: GO 75267
// result := Join ( result , array [ i ] ) ;
75241: LD_ADDR_VAR 0 5
75245: PUSH
75246: LD_VAR 0 5
75250: PPUSH
75251: LD_VAR 0 1
75255: PUSH
75256: LD_VAR 0 6
75260: ARRAY
75261: PPUSH
75262: CALL 70279 0 2
75266: ST_TO_ADDR
// end ;
75267: GO 75174
75269: POP
75270: POP
// end ;
75271: LD_VAR 0 5
75275: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
75276: LD_INT 0
75278: PPUSH
// if not vehicles or not parkingPoint then
75279: LD_VAR 0 1
75283: NOT
75284: IFTRUE 75293
75286: PUSH
75287: LD_VAR 0 2
75291: NOT
75292: OR
75293: IFFALSE 75297
// exit ;
75295: GO 75395
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
75297: LD_ADDR_VAR 0 1
75301: PUSH
75302: LD_VAR 0 1
75306: PPUSH
75307: LD_INT 50
75309: PUSH
75310: EMPTY
75311: LIST
75312: PUSH
75313: LD_INT 3
75315: PUSH
75316: LD_INT 92
75318: PUSH
75319: LD_VAR 0 2
75323: PUSH
75324: LD_INT 1
75326: ARRAY
75327: PUSH
75328: LD_VAR 0 2
75332: PUSH
75333: LD_INT 2
75335: ARRAY
75336: PUSH
75337: LD_INT 8
75339: PUSH
75340: EMPTY
75341: LIST
75342: LIST
75343: LIST
75344: LIST
75345: PUSH
75346: EMPTY
75347: LIST
75348: LIST
75349: PUSH
75350: EMPTY
75351: LIST
75352: LIST
75353: PPUSH
75354: CALL_OW 72
75358: ST_TO_ADDR
// if not vehicles then
75359: LD_VAR 0 1
75363: NOT
75364: IFFALSE 75368
// exit ;
75366: GO 75395
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
75368: LD_VAR 0 1
75372: PPUSH
75373: LD_VAR 0 2
75377: PUSH
75378: LD_INT 1
75380: ARRAY
75381: PPUSH
75382: LD_VAR 0 2
75386: PUSH
75387: LD_INT 2
75389: ARRAY
75390: PPUSH
75391: CALL_OW 111
// end ;
75395: LD_VAR 0 3
75399: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
75400: LD_INT 0
75402: PPUSH
75403: PPUSH
75404: PPUSH
// if not side or not area then
75405: LD_VAR 0 1
75409: NOT
75410: IFTRUE 75419
75412: PUSH
75413: LD_VAR 0 2
75417: NOT
75418: OR
75419: IFFALSE 75423
// exit ;
75421: GO 75542
// tmp := AreaToList ( area , 0 ) ;
75423: LD_ADDR_VAR 0 5
75427: PUSH
75428: LD_VAR 0 2
75432: PPUSH
75433: LD_INT 0
75435: PPUSH
75436: CALL_OW 517
75440: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
75441: LD_ADDR_VAR 0 4
75445: PUSH
75446: DOUBLE
75447: LD_INT 1
75449: DEC
75450: ST_TO_ADDR
75451: LD_VAR 0 5
75455: PUSH
75456: LD_INT 1
75458: ARRAY
75459: PUSH
75460: FOR_TO
75461: IFFALSE 75540
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
75463: LD_VAR 0 5
75467: PUSH
75468: LD_INT 1
75470: ARRAY
75471: PUSH
75472: LD_VAR 0 4
75476: ARRAY
75477: PPUSH
75478: LD_VAR 0 5
75482: PUSH
75483: LD_INT 2
75485: ARRAY
75486: PUSH
75487: LD_VAR 0 4
75491: ARRAY
75492: PPUSH
75493: CALL_OW 351
75497: IFFALSE 75538
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
75499: LD_VAR 0 5
75503: PUSH
75504: LD_INT 1
75506: ARRAY
75507: PUSH
75508: LD_VAR 0 4
75512: ARRAY
75513: PPUSH
75514: LD_VAR 0 5
75518: PUSH
75519: LD_INT 2
75521: ARRAY
75522: PUSH
75523: LD_VAR 0 4
75527: ARRAY
75528: PPUSH
75529: LD_VAR 0 1
75533: PPUSH
75534: CALL_OW 244
// end ;
75538: GO 75460
75540: POP
75541: POP
// end ;
75542: LD_VAR 0 3
75546: RET
// export function UniqueArray ( array ) ; var i ; begin
75547: LD_INT 0
75549: PPUSH
75550: PPUSH
// result := [ ] ;
75551: LD_ADDR_VAR 0 2
75555: PUSH
75556: EMPTY
75557: ST_TO_ADDR
// if not array then
75558: LD_VAR 0 1
75562: NOT
75563: IFFALSE 75567
// exit ;
75565: GO 75628
// for i := 1 to array do
75567: LD_ADDR_VAR 0 3
75571: PUSH
75572: DOUBLE
75573: LD_INT 1
75575: DEC
75576: ST_TO_ADDR
75577: LD_VAR 0 1
75581: PUSH
75582: FOR_TO
75583: IFFALSE 75626
// if not array [ i ] in result then
75585: LD_VAR 0 1
75589: PUSH
75590: LD_VAR 0 3
75594: ARRAY
75595: PUSH
75596: LD_VAR 0 2
75600: IN
75601: NOT
75602: IFFALSE 75624
// result := Join ( result , i ) ;
75604: LD_ADDR_VAR 0 2
75608: PUSH
75609: LD_VAR 0 2
75613: PPUSH
75614: LD_VAR 0 3
75618: PPUSH
75619: CALL 70279 0 2
75623: ST_TO_ADDR
75624: GO 75582
75626: POP
75627: POP
// end ; end_of_file
75628: LD_VAR 0 2
75632: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
75633: LD_VAR 0 1
75637: PUSH
75638: LD_INT 200
75640: DOUBLE
75641: GREATEREQUAL
75642: IFFALSE 75650
75644: LD_INT 299
75646: DOUBLE
75647: LESSEQUAL
75648: IFTRUE 75652
75650: GO 75684
75652: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
75653: LD_VAR 0 1
75657: PPUSH
75658: LD_VAR 0 2
75662: PPUSH
75663: LD_VAR 0 3
75667: PPUSH
75668: LD_VAR 0 4
75672: PPUSH
75673: LD_VAR 0 5
75677: PPUSH
75678: CALL 26355 0 5
75682: GO 75761
75684: LD_INT 300
75686: DOUBLE
75687: GREATEREQUAL
75688: IFFALSE 75696
75690: LD_INT 399
75692: DOUBLE
75693: LESSEQUAL
75694: IFTRUE 75698
75696: GO 75760
75698: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
75699: LD_VAR 0 1
75703: PPUSH
75704: LD_VAR 0 2
75708: PPUSH
75709: LD_VAR 0 3
75713: PPUSH
75714: LD_VAR 0 4
75718: PPUSH
75719: LD_VAR 0 5
75723: PPUSH
75724: LD_VAR 0 6
75728: PPUSH
75729: LD_VAR 0 7
75733: PPUSH
75734: LD_VAR 0 8
75738: PPUSH
75739: LD_VAR 0 9
75743: PPUSH
75744: LD_VAR 0 10
75748: PPUSH
75749: LD_VAR 0 11
75753: PPUSH
75754: CALL 22158 0 11
75758: GO 75761
75760: POP
// end ;
75761: PPOPN 11
75763: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
75764: LD_VAR 0 1
75768: PPUSH
75769: LD_VAR 0 2
75773: PPUSH
75774: LD_VAR 0 3
75778: PPUSH
75779: LD_VAR 0 4
75783: PPUSH
75784: LD_VAR 0 5
75788: PPUSH
75789: CALL 25655 0 5
// end ; end_of_file
75793: PPOPN 5
75795: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
75796: LD_VAR 0 1
75800: PPUSH
75801: LD_VAR 0 2
75805: PPUSH
75806: LD_VAR 0 3
75810: PPUSH
75811: LD_VAR 0 4
75815: PPUSH
75816: LD_VAR 0 5
75820: PPUSH
75821: LD_VAR 0 6
75825: PPUSH
75826: CALL 9698 0 6
// end ;
75830: PPOPN 6
75832: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
75833: LD_INT 0
75835: PPUSH
// begin if not units then
75836: LD_VAR 0 1
75840: NOT
75841: IFFALSE 75845
// exit ;
75843: GO 75879
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
75845: LD_VAR 0 1
75849: PPUSH
75850: LD_VAR 0 2
75854: PPUSH
75855: LD_VAR 0 3
75859: PPUSH
75860: LD_VAR 0 4
75864: PPUSH
75865: LD_VAR 0 5
75869: PPUSH
75870: LD_VAR 0 6
75874: PPUSH
75875: CALL 32052 0 6
// end ;
75879: PPOPN 7
75881: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
75882: CALL 9578 0 0
// end ;
75886: PPOPN 1
75888: END
