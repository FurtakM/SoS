// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// SetDifficulty ( GetMultiplayerSetting ( 0 ) ) ;
  11: LD_INT 0
  13: PPUSH
  14: CALL_OW 426
  18: PPUSH
  19: CALL 279 0 1
// InGameOn ;
  23: CALL_OW 8
// CenterNowOnXY ( 0 , 0 ) ;
  27: LD_INT 0
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: CALL_OW 86
// RandomizeAll ;
  37: CALL_OW 11
// DestroyTrash ;
  41: CALL 148 0 0
// ShowPath ;
  45: CALL 214 0 0
// RandMusic ( 1 , 3 ) ;
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 3
  54: PPUSH
  55: CALL 222 0 2
// PrepareAnimals ( [ 8 , 7 , 6 ] [ dif ] , 2 , 3 , nature ) ;
  59: LD_INT 8
  61: PUSH
  62: LD_INT 7
  64: PUSH
  65: LD_INT 6
  67: PUSH
  68: EMPTY
  69: LIST
  70: LIST
  71: LIST
  72: PUSH
  73: LD_EXP 1
  77: ARRAY
  78: PPUSH
  79: LD_INT 2
  81: PPUSH
  82: LD_INT 3
  84: PPUSH
  85: LD_INT 10
  87: PPUSH
  88: CALL 329 0 4
// PrepareRussian ;
  92: CALL 1407 0 0
// Action ;
  96: CALL 8631 0 0
// PrepareAmerican ;
 100: CALL 5251 0 0
// end ;
 104: END
// every 2 2$00 + 1 1$0 do var i , bool ;
 105: GO 107
 107: DISABLE
 108: LD_INT 0
 110: PPUSH
 111: PPUSH
// begin bool := Rand ( false , true ) ;
 112: LD_ADDR_VAR 0 2
 116: PUSH
 117: LD_INT 0
 119: PPUSH
 120: LD_INT 1
 122: PPUSH
 123: CALL_OW 12
 127: ST_TO_ADDR
// if bool then
 128: LD_VAR 0 2
 132: IFFALSE 144
// RandMusic ( 1 , 3 ) ;
 134: LD_INT 1
 136: PPUSH
 137: LD_INT 3
 139: PPUSH
 140: CALL 222 0 2
// enable ;
 144: ENABLE
// end ; end_of_file
 145: PPOPN 2
 147: END
// export function DestroyTrash ; var i ; begin
 148: LD_INT 0
 150: PPUSH
 151: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_not , [ f_lives , 5 ] ] ] ) do
 152: LD_ADDR_VAR 0 2
 156: PUSH
 157: LD_INT 22
 159: PUSH
 160: LD_INT 0
 162: PUSH
 163: EMPTY
 164: LIST
 165: LIST
 166: PUSH
 167: LD_INT 3
 169: PUSH
 170: LD_INT 24
 172: PUSH
 173: LD_INT 5
 175: PUSH
 176: EMPTY
 177: LIST
 178: LIST
 179: PUSH
 180: EMPTY
 181: LIST
 182: LIST
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 69
 192: PUSH
 193: FOR_IN
 194: IFFALSE 207
// KillUnit ( i ) ;
 196: LD_VAR 0 2
 200: PPUSH
 201: CALL_OW 66
 205: GO 193
 207: POP
 208: POP
// end ;
 209: LD_VAR 0 1
 213: RET
// export function ShowPath ; begin
 214: LD_INT 0
 216: PPUSH
// end ;
 217: LD_VAR 0 1
 221: RET
// export function RandMusic ( n1 , n2 ) ; var proc ; begin
 222: LD_INT 0
 224: PPUSH
 225: PPUSH
// proc := Rand ( 0 , 100 ) ;
 226: LD_ADDR_VAR 0 4
 230: PUSH
 231: LD_INT 0
 233: PPUSH
 234: LD_INT 100
 236: PPUSH
 237: CALL_OW 12
 241: ST_TO_ADDR
// if proc > 50 then
 242: LD_VAR 0 4
 246: PUSH
 247: LD_INT 50
 249: GREATER
 250: IFFALSE 264
// music_nat := n1 else
 252: LD_ADDR_OWVAR 71
 256: PUSH
 257: LD_VAR 0 1
 261: ST_TO_ADDR
 262: GO 274
// music_nat := n2 ;
 264: LD_ADDR_OWVAR 71
 268: PUSH
 269: LD_VAR 0 2
 273: ST_TO_ADDR
// end ;
 274: LD_VAR 0 3
 278: RET
// export dif ; export function SetDifficulty ( val ) ; begin
 279: LD_INT 0
 281: PPUSH
// if not val then
 282: LD_VAR 0 1
 286: NOT
 287: IFFALSE 297
// val := 2 ;
 289: LD_ADDR_VAR 0 1
 293: PUSH
 294: LD_INT 2
 296: ST_TO_ADDR
// dif := val ;
 297: LD_ADDR_EXP 1
 301: PUSH
 302: LD_VAR 0 1
 306: ST_TO_ADDR
// if dif < 3 then
 307: LD_EXP 1
 311: PUSH
 312: LD_INT 3
 314: LESS
 315: IFFALSE 324
// RemoveEnvironmentArea ( evnt ) ;
 317: LD_INT 9
 319: PPUSH
 320: CALL_OW 355
// end ;
 324: LD_VAR 0 2
 328: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
 333: PPUSH
 334: PPUSH
 335: PPUSH
// uc_nation = nation_nature ;
 336: LD_ADDR_OWVAR 21
 340: PUSH
 341: LD_INT 0
 343: ST_TO_ADDR
// uc_side = 0 ;
 344: LD_ADDR_OWVAR 20
 348: PUSH
 349: LD_INT 0
 351: ST_TO_ADDR
// hc_importance := 0 ;
 352: LD_ADDR_OWVAR 32
 356: PUSH
 357: LD_INT 0
 359: ST_TO_ADDR
// l = 0 ;
 360: LD_ADDR_VAR 0 6
 364: PUSH
 365: LD_INT 0
 367: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
 368: LD_ADDR_OWVAR 24
 372: PUSH
 373: LD_INT 0
 375: PPUSH
 376: LD_INT 5
 378: PPUSH
 379: CALL_OW 12
 383: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
 384: LD_ADDR_OWVAR 35
 388: PUSH
 389: LD_INT 5
 391: NEG
 392: PPUSH
 393: LD_INT 5
 395: PPUSH
 396: CALL_OW 12
 400: ST_TO_ADDR
// hc_gallery =  ;
 401: LD_ADDR_OWVAR 33
 405: PUSH
 406: LD_STRING 
 408: ST_TO_ADDR
// hc_class = class_apeman ;
 409: LD_ADDR_OWVAR 28
 413: PUSH
 414: LD_INT 12
 416: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
 417: LD_ADDR_OWVAR 29
 421: PUSH
 422: LD_INT 11
 424: PPUSH
 425: LD_INT 13
 427: PPUSH
 428: CALL_OW 12
 432: PUSH
 433: LD_INT 10
 435: PPUSH
 436: LD_INT 11
 438: PPUSH
 439: CALL_OW 12
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: ST_TO_ADDR
// hc_sex = sex_male ;
 448: LD_ADDR_OWVAR 27
 452: PUSH
 453: LD_INT 1
 455: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
 456: LD_ADDR_OWVAR 31
 460: PUSH
 461: LD_INT 0
 463: PPUSH
 464: LD_INT 2
 466: PPUSH
 467: CALL_OW 12
 471: PUSH
 472: LD_INT 0
 474: PUSH
 475: LD_INT 0
 477: PUSH
 478: LD_INT 0
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: ST_TO_ADDR
// apeman = CreateHuman ;
 487: LD_ADDR_VAR 0 7
 491: PUSH
 492: CALL_OW 44
 496: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
 497: LD_VAR 0 7
 501: PPUSH
 502: LD_VAR 0 4
 506: PPUSH
 507: LD_INT 0
 509: PPUSH
 510: CALL_OW 49
// l = l + 1 ;
 514: LD_ADDR_VAR 0 6
 518: PUSH
 519: LD_VAR 0 6
 523: PUSH
 524: LD_INT 1
 526: PLUS
 527: ST_TO_ADDR
// end until l = num1 ;
 528: LD_VAR 0 6
 532: PUSH
 533: LD_VAR 0 1
 537: EQUAL
 538: IFFALSE 368
// l = 0 ;
 540: LD_ADDR_VAR 0 6
 544: PUSH
 545: LD_INT 0
 547: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
 548: LD_ADDR_OWVAR 35
 552: PUSH
 553: LD_INT 0
 555: PPUSH
 556: LD_INT 25
 558: PPUSH
 559: CALL_OW 12
 563: ST_TO_ADDR
// hc_class = class_tiger ;
 564: LD_ADDR_OWVAR 28
 568: PUSH
 569: LD_INT 14
 571: ST_TO_ADDR
// hc_sex = sex_male ;
 572: LD_ADDR_OWVAR 27
 576: PUSH
 577: LD_INT 1
 579: ST_TO_ADDR
// hc_gallery = sandnature ;
 580: LD_ADDR_OWVAR 33
 584: PUSH
 585: LD_STRING sandnature
 587: ST_TO_ADDR
// hc_face_number = 3 ;
 588: LD_ADDR_OWVAR 34
 592: PUSH
 593: LD_INT 3
 595: ST_TO_ADDR
// tiger = CreateHuman ;
 596: LD_ADDR_VAR 0 8
 600: PUSH
 601: CALL_OW 44
 605: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
 606: LD_VAR 0 8
 610: PPUSH
 611: LD_VAR 0 4
 615: PPUSH
 616: LD_INT 0
 618: PPUSH
 619: CALL_OW 49
// l = l + 1 ;
 623: LD_ADDR_VAR 0 6
 627: PUSH
 628: LD_VAR 0 6
 632: PUSH
 633: LD_INT 1
 635: PLUS
 636: ST_TO_ADDR
// end until l = num2 ;
 637: LD_VAR 0 6
 641: PUSH
 642: LD_VAR 0 2
 646: EQUAL
 647: IFFALSE 548
// l = 0 ;
 649: LD_ADDR_VAR 0 6
 653: PUSH
 654: LD_INT 0
 656: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
 657: LD_ADDR_OWVAR 28
 661: PUSH
 662: LD_INT 18
 664: ST_TO_ADDR
// hc_gallery = sandnature ;
 665: LD_ADDR_OWVAR 33
 669: PUSH
 670: LD_STRING sandnature
 672: ST_TO_ADDR
// hc_face_number = 1 ;
 673: LD_ADDR_OWVAR 34
 677: PUSH
 678: LD_INT 1
 680: ST_TO_ADDR
// bird = CreateHuman ;
 681: LD_ADDR_VAR 0 9
 685: PUSH
 686: CALL_OW 44
 690: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
 691: LD_VAR 0 9
 695: PPUSH
 696: LD_INT 0
 698: PPUSH
 699: CALL_OW 51
// l = l + 1 ;
 703: LD_ADDR_VAR 0 6
 707: PUSH
 708: LD_VAR 0 6
 712: PUSH
 713: LD_INT 1
 715: PLUS
 716: ST_TO_ADDR
// end until l = num3 ;
 717: LD_VAR 0 6
 721: PUSH
 722: LD_VAR 0 3
 726: EQUAL
 727: IFFALSE 657
// end ;
 729: LD_VAR 0 5
 733: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
 734: LD_INT 0
 736: PPUSH
 737: PPUSH
 738: PPUSH
 739: PPUSH
 740: PPUSH
 741: PPUSH
// InitHc ;
 742: CALL_OW 19
// hc_class := clas ;
 746: LD_ADDR_OWVAR 28
 750: PUSH
 751: LD_VAR 0 1
 755: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
 756: LD_ADDR_VAR 0 4
 760: PUSH
 761: LD_VAR 0 2
 765: PUSH
 766: LD_INT 1
 768: NEG
 769: PPUSH
 770: LD_INT 1
 772: PPUSH
 773: CALL_OW 12
 777: PLUS
 778: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
 779: LD_ADDR_VAR 0 5
 783: PUSH
 784: LD_VAR 0 2
 788: PUSH
 789: LD_INT 1
 791: NEG
 792: PPUSH
 793: LD_INT 1
 795: PPUSH
 796: CALL_OW 12
 800: PLUS
 801: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
 802: LD_ADDR_VAR 0 6
 806: PUSH
 807: LD_VAR 0 2
 811: PUSH
 812: LD_INT 1
 814: NEG
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: CALL_OW 12
 823: PLUS
 824: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
 825: LD_ADDR_VAR 0 7
 829: PUSH
 830: LD_VAR 0 2
 834: PUSH
 835: LD_INT 1
 837: NEG
 838: PPUSH
 839: LD_INT 1
 841: PPUSH
 842: CALL_OW 12
 846: PLUS
 847: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
 848: LD_VAR 0 1
 852: PUSH
 853: LD_INT 1
 855: EQUAL
 856: PUSH
 857: LD_VAR 0 1
 861: PUSH
 862: LD_INT 9
 864: EQUAL
 865: OR
 866: PUSH
 867: LD_VAR 0 1
 871: PUSH
 872: LD_INT 5
 874: EQUAL
 875: OR
 876: PUSH
 877: LD_VAR 0 1
 881: PUSH
 882: LD_INT 8
 884: EQUAL
 885: OR
 886: IFFALSE 911
// bonus := [ 2 , 0 , 0 , 0 ] ;
 888: LD_ADDR_VAR 0 8
 892: PUSH
 893: LD_INT 2
 895: PUSH
 896: LD_INT 0
 898: PUSH
 899: LD_INT 0
 901: PUSH
 902: LD_INT 0
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: ST_TO_ADDR
// if clas = 2 then
 911: LD_VAR 0 1
 915: PUSH
 916: LD_INT 2
 918: EQUAL
 919: IFFALSE 944
// bonus := [ 0 , 2 , 0 , 0 ] ;
 921: LD_ADDR_VAR 0 8
 925: PUSH
 926: LD_INT 0
 928: PUSH
 929: LD_INT 2
 931: PUSH
 932: LD_INT 0
 934: PUSH
 935: LD_INT 0
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: ST_TO_ADDR
// if clas = 3 then
 944: LD_VAR 0 1
 948: PUSH
 949: LD_INT 3
 951: EQUAL
 952: IFFALSE 977
// bonus := [ 0 , 0 , 2 , 0 ] ;
 954: LD_ADDR_VAR 0 8
 958: PUSH
 959: LD_INT 0
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: LD_INT 2
 967: PUSH
 968: LD_INT 0
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: ST_TO_ADDR
// if clas = 4 then
 977: LD_VAR 0 1
 981: PUSH
 982: LD_INT 4
 984: EQUAL
 985: IFFALSE 1010
// bonus := [ 0 , 0 , 0 , 2 ] ;
 987: LD_ADDR_VAR 0 8
 991: PUSH
 992: LD_INT 0
 994: PUSH
 995: LD_INT 0
 997: PUSH
 998: LD_INT 0
1000: PUSH
1001: LD_INT 2
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
1010: LD_VAR 0 1
1014: PUSH
1015: LD_INT 4
1017: GREATER
1018: PUSH
1019: LD_VAR 0 1
1023: PUSH
1024: LD_INT 9
1026: NONEQUAL
1027: AND
1028: PUSH
1029: LD_VAR 0 1
1033: PUSH
1034: LD_INT 5
1036: NONEQUAL
1037: AND
1038: PUSH
1039: LD_VAR 0 1
1043: PUSH
1044: LD_INT 8
1046: NONEQUAL
1047: AND
1048: IFFALSE 1073
// bonus := [ 0 , 0 , 0 , 0 ] ;
1050: LD_ADDR_VAR 0 8
1054: PUSH
1055: LD_INT 0
1057: PUSH
1058: LD_INT 0
1060: PUSH
1061: LD_INT 0
1063: PUSH
1064: LD_INT 0
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
1073: LD_ADDR_OWVAR 30
1077: PUSH
1078: LD_INT 0
1080: PPUSH
1081: LD_INT 2
1083: PPUSH
1084: CALL_OW 12
1088: PUSH
1089: LD_INT 0
1091: PPUSH
1092: LD_INT 2
1094: PPUSH
1095: CALL_OW 12
1099: PUSH
1100: LD_INT 0
1102: PPUSH
1103: LD_INT 2
1105: PPUSH
1106: CALL_OW 12
1110: PUSH
1111: LD_INT 0
1113: PPUSH
1114: LD_INT 2
1116: PPUSH
1117: CALL_OW 12
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: LIST
1127: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
1128: LD_ADDR_OWVAR 31
1132: PUSH
1133: LD_VAR 0 4
1137: PUSH
1138: LD_VAR 0 8
1142: PUSH
1143: LD_INT 1
1145: ARRAY
1146: PLUS
1147: PUSH
1148: LD_VAR 0 5
1152: PUSH
1153: LD_VAR 0 8
1157: PUSH
1158: LD_INT 2
1160: ARRAY
1161: PLUS
1162: PUSH
1163: LD_VAR 0 6
1167: PUSH
1168: LD_VAR 0 8
1172: PUSH
1173: LD_INT 3
1175: ARRAY
1176: PLUS
1177: PUSH
1178: LD_VAR 0 7
1182: PUSH
1183: LD_VAR 0 8
1187: PUSH
1188: LD_INT 4
1190: ARRAY
1191: PLUS
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: ST_TO_ADDR
// if clas = 3 then
1199: LD_VAR 0 1
1203: PUSH
1204: LD_INT 3
1206: EQUAL
1207: IFFALSE 1219
// hc_sex := sex_male else
1209: LD_ADDR_OWVAR 27
1213: PUSH
1214: LD_INT 1
1216: ST_TO_ADDR
1217: GO 1235
// hc_sex := Rand ( sex_male , sex_female ) ;
1219: LD_ADDR_OWVAR 27
1223: PUSH
1224: LD_INT 1
1226: PPUSH
1227: LD_INT 2
1229: PPUSH
1230: CALL_OW 12
1234: ST_TO_ADDR
// hc_gallery :=  ;
1235: LD_ADDR_OWVAR 33
1239: PUSH
1240: LD_STRING 
1242: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 8 , 12 ) ] ;
1243: LD_ADDR_OWVAR 29
1247: PUSH
1248: LD_INT 8
1250: PPUSH
1251: LD_INT 12
1253: PPUSH
1254: CALL_OW 12
1258: PUSH
1259: LD_INT 8
1261: PPUSH
1262: LD_INT 12
1264: PPUSH
1265: CALL_OW 12
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: ST_TO_ADDR
// hc_name :=  ;
1274: LD_ADDR_OWVAR 26
1278: PUSH
1279: LD_STRING 
1281: ST_TO_ADDR
// result := CreateHuman ;
1282: LD_ADDR_VAR 0 3
1286: PUSH
1287: CALL_OW 44
1291: ST_TO_ADDR
// end ;
1292: LD_VAR 0 3
1296: RET
// export function CreateVehicleWithDriver ( chassis , engine , weapon , area , dir , lvl ) ; var veh ; begin
1297: LD_INT 0
1299: PPUSH
1300: PPUSH
// vc_chassis := chassis ;
1301: LD_ADDR_OWVAR 37
1305: PUSH
1306: LD_VAR 0 1
1310: ST_TO_ADDR
// vc_engine := engine ;
1311: LD_ADDR_OWVAR 39
1315: PUSH
1316: LD_VAR 0 2
1320: ST_TO_ADDR
// vc_weapon := weapon ;
1321: LD_ADDR_OWVAR 40
1325: PUSH
1326: LD_VAR 0 3
1330: ST_TO_ADDR
// vc_control := control_manual ;
1331: LD_ADDR_OWVAR 38
1335: PUSH
1336: LD_INT 1
1338: ST_TO_ADDR
// veh := CreateVehicle ;
1339: LD_ADDR_VAR 0 8
1343: PUSH
1344: CALL_OW 45
1348: ST_TO_ADDR
// SetDir ( veh , dir ) ;
1349: LD_VAR 0 8
1353: PPUSH
1354: LD_VAR 0 5
1358: PPUSH
1359: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
1363: LD_VAR 0 8
1367: PPUSH
1368: LD_VAR 0 4
1372: PPUSH
1373: LD_INT 0
1375: PPUSH
1376: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , lvl ) , veh ) ;
1380: LD_INT 3
1382: PPUSH
1383: LD_VAR 0 6
1387: PPUSH
1388: CALL 734 0 2
1392: PPUSH
1393: LD_VAR 0 8
1397: PPUSH
1398: CALL_OW 52
// end ; end_of_file
1402: LD_VAR 0 7
1406: RET
// export Popov , Commander , Platonov , Kapral ; export depot_rdy , dep_x , dep_y ; export function PrepareRussian ; var i , un , skill , team , p ; begin
1407: LD_INT 0
1409: PPUSH
1410: PPUSH
1411: PPUSH
1412: PPUSH
1413: PPUSH
1414: PPUSH
// depot_rdy := false ;
1415: LD_ADDR_EXP 6
1419: PUSH
1420: LD_INT 0
1422: ST_TO_ADDR
// uc_side := 6 ;
1423: LD_ADDR_OWVAR 20
1427: PUSH
1428: LD_INT 6
1430: ST_TO_ADDR
// uc_nation := 3 ;
1431: LD_ADDR_OWVAR 21
1435: PUSH
1436: LD_INT 3
1438: ST_TO_ADDR
// hc_gallery := ru ;
1439: LD_ADDR_OWVAR 33
1443: PUSH
1444: LD_STRING ru
1446: ST_TO_ADDR
// hc_face_number := 10 ;
1447: LD_ADDR_OWVAR 34
1451: PUSH
1452: LD_INT 10
1454: ST_TO_ADDR
// hc_name := Siergiej I. Popov ;
1455: LD_ADDR_OWVAR 26
1459: PUSH
1460: LD_STRING Siergiej I. Popov
1462: ST_TO_ADDR
// hc_class := 1 ;
1463: LD_ADDR_OWVAR 28
1467: PUSH
1468: LD_INT 1
1470: ST_TO_ADDR
// hc_sex := sex_male ;
1471: LD_ADDR_OWVAR 27
1475: PUSH
1476: LD_INT 1
1478: ST_TO_ADDR
// popov := CreateHuman ;
1479: LD_ADDR_EXP 2
1483: PUSH
1484: CALL_OW 44
1488: ST_TO_ADDR
// hc_gallery := general ;
1489: LD_ADDR_OWVAR 33
1493: PUSH
1494: LD_STRING general
1496: ST_TO_ADDR
// hc_face_number := 1 ;
1497: LD_ADDR_OWVAR 34
1501: PUSH
1502: LD_INT 1
1504: ST_TO_ADDR
// hc_name := Mjr. D. N. Platonow ;
1505: LD_ADDR_OWVAR 26
1509: PUSH
1510: LD_STRING Mjr. D. N. Platonow
1512: ST_TO_ADDR
// platonov := CreateHuman ;
1513: LD_ADDR_EXP 4
1517: PUSH
1518: CALL_OW 44
1522: ST_TO_ADDR
// uc_side := 3 ;
1523: LD_ADDR_OWVAR 20
1527: PUSH
1528: LD_INT 3
1530: ST_TO_ADDR
// ChangeSideFog ( 3 , 6 ) ;
1531: LD_INT 3
1533: PPUSH
1534: LD_INT 6
1536: PPUSH
1537: CALL_OW 343
// skill := [ 6 , 5 , 4 ] [ dif ] ;
1541: LD_ADDR_VAR 0 4
1545: PUSH
1546: LD_INT 6
1548: PUSH
1549: LD_INT 5
1551: PUSH
1552: LD_INT 4
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: LIST
1559: PUSH
1560: LD_EXP 1
1564: ARRAY
1565: ST_TO_ADDR
// team := [ ] ;
1566: LD_ADDR_VAR 0 5
1570: PUSH
1571: EMPTY
1572: ST_TO_ADDR
// hc_importance := 100 ;
1573: LD_ADDR_OWVAR 32
1577: PUSH
1578: LD_INT 100
1580: ST_TO_ADDR
// hc_gallery := gamma ;
1581: LD_ADDR_OWVAR 33
1585: PUSH
1586: LD_STRING gamma
1588: ST_TO_ADDR
// hc_face_number := 1 ;
1589: LD_ADDR_OWVAR 34
1593: PUSH
1594: LD_INT 1
1596: ST_TO_ADDR
// hc_class := 1 ;
1597: LD_ADDR_OWVAR 28
1601: PUSH
1602: LD_INT 1
1604: ST_TO_ADDR
// hc_skills := [ [ 8 , 7 , 6 ] [ dif ] , 5 , 3 , 0 ] ;
1605: LD_ADDR_OWVAR 31
1609: PUSH
1610: LD_INT 8
1612: PUSH
1613: LD_INT 7
1615: PUSH
1616: LD_INT 6
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: LIST
1623: PUSH
1624: LD_EXP 1
1628: ARRAY
1629: PUSH
1630: LD_INT 5
1632: PUSH
1633: LD_INT 3
1635: PUSH
1636: LD_INT 0
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: ST_TO_ADDR
// hc_sex := sex_male ;
1645: LD_ADDR_OWVAR 27
1649: PUSH
1650: LD_INT 1
1652: ST_TO_ADDR
// hc_name := Mjr. Jurij Karakanov ;
1653: LD_ADDR_OWVAR 26
1657: PUSH
1658: LD_STRING Mjr. Jurij Karakanov
1660: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1661: LD_ADDR_OWVAR 29
1665: PUSH
1666: LD_INT 10
1668: PUSH
1669: LD_INT 11
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: ST_TO_ADDR
// commander := CreateHuman ;
1676: LD_ADDR_EXP 3
1680: PUSH
1681: CALL_OW 44
1685: ST_TO_ADDR
// team := team ^ commander ;
1686: LD_ADDR_VAR 0 5
1690: PUSH
1691: LD_VAR 0 5
1695: PUSH
1696: LD_EXP 3
1700: ADD
1701: ST_TO_ADDR
// hc_importance := 0 ;
1702: LD_ADDR_OWVAR 32
1706: PUSH
1707: LD_INT 0
1709: ST_TO_ADDR
// hc_name :=  ;
1710: LD_ADDR_OWVAR 26
1714: PUSH
1715: LD_STRING 
1717: ST_TO_ADDR
// hc_gallery :=  ;
1718: LD_ADDR_OWVAR 33
1722: PUSH
1723: LD_STRING 
1725: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
1726: LD_ADDR_OWVAR 29
1730: PUSH
1731: LD_INT 12
1733: PUSH
1734: LD_INT 10
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: ST_TO_ADDR
// hc_sex := sex_male ;
1741: LD_ADDR_OWVAR 27
1745: PUSH
1746: LD_INT 1
1748: ST_TO_ADDR
// Kapral := CreateHuman ;
1749: LD_ADDR_EXP 5
1753: PUSH
1754: CALL_OW 44
1758: ST_TO_ADDR
// for i = 3 downto dif do
1759: LD_ADDR_VAR 0 2
1763: PUSH
1764: DOUBLE
1765: LD_INT 3
1767: INC
1768: ST_TO_ADDR
1769: LD_EXP 1
1773: PUSH
1774: FOR_DOWNTO
1775: IFFALSE 1881
// begin vc_chassis := ru_medium_tracked ;
1777: LD_ADDR_OWVAR 37
1781: PUSH
1782: LD_INT 22
1784: ST_TO_ADDR
// vc_engine := engine_combustion ;
1785: LD_ADDR_OWVAR 39
1789: PUSH
1790: LD_INT 1
1792: ST_TO_ADDR
// vc_control := control_manual ;
1793: LD_ADDR_OWVAR 38
1797: PUSH
1798: LD_INT 1
1800: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_gun , ru_gun ] [ i ] ;
1801: LD_ADDR_OWVAR 40
1805: PUSH
1806: LD_INT 43
1808: PUSH
1809: LD_INT 44
1811: PUSH
1812: LD_INT 44
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: LIST
1819: PUSH
1820: LD_VAR 0 2
1824: ARRAY
1825: ST_TO_ADDR
// vc_fuel_battery := Rand ( 55 , 77 ) ;
1826: LD_ADDR_OWVAR 41
1830: PUSH
1831: LD_INT 55
1833: PPUSH
1834: LD_INT 77
1836: PPUSH
1837: CALL_OW 12
1841: ST_TO_ADDR
// un := CreateVehicle ;
1842: LD_ADDR_VAR 0 3
1846: PUSH
1847: CALL_OW 45
1851: ST_TO_ADDR
// SetDir ( un , 5 ) ;
1852: LD_VAR 0 3
1856: PPUSH
1857: LD_INT 5
1859: PPUSH
1860: CALL_OW 233
// PlaceUnitArea ( un , rus_spawn , false ) ;
1864: LD_VAR 0 3
1868: PPUSH
1869: LD_INT 1
1871: PPUSH
1872: LD_INT 0
1874: PPUSH
1875: CALL_OW 49
// end ;
1879: GO 1774
1881: POP
1882: POP
// vc_weapon := ru_heavy_machine_gun ;
1883: LD_ADDR_OWVAR 40
1887: PUSH
1888: LD_INT 42
1890: ST_TO_ADDR
// vc_fuel_battery := Rand ( 55 , 77 ) ;
1891: LD_ADDR_OWVAR 41
1895: PUSH
1896: LD_INT 55
1898: PPUSH
1899: LD_INT 77
1901: PPUSH
1902: CALL_OW 12
1906: ST_TO_ADDR
// un := CreateVehicle ;
1907: LD_ADDR_VAR 0 3
1911: PUSH
1912: CALL_OW 45
1916: ST_TO_ADDR
// SetDir ( un , 5 ) ;
1917: LD_VAR 0 3
1921: PPUSH
1922: LD_INT 5
1924: PPUSH
1925: CALL_OW 233
// PlaceUnitArea ( un , rus_spawn , false ) ;
1929: LD_VAR 0 3
1933: PPUSH
1934: LD_INT 1
1936: PPUSH
1937: LD_INT 0
1939: PPUSH
1940: CALL_OW 49
// for p = 1 to 4 do
1944: LD_ADDR_VAR 0 6
1948: PUSH
1949: DOUBLE
1950: LD_INT 1
1952: DEC
1953: ST_TO_ADDR
1954: LD_INT 4
1956: PUSH
1957: FOR_TO
1958: IFFALSE 2025
// for i = 1 to [ 5 , 4 , 3 ] [ dif ] do
1960: LD_ADDR_VAR 0 2
1964: PUSH
1965: DOUBLE
1966: LD_INT 1
1968: DEC
1969: ST_TO_ADDR
1970: LD_INT 5
1972: PUSH
1973: LD_INT 4
1975: PUSH
1976: LD_INT 3
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: LIST
1983: PUSH
1984: LD_EXP 1
1988: ARRAY
1989: PUSH
1990: FOR_TO
1991: IFFALSE 2021
// team := team ^ CreateHumanWithClass ( p , skill ) ;
1993: LD_ADDR_VAR 0 5
1997: PUSH
1998: LD_VAR 0 5
2002: PUSH
2003: LD_VAR 0 6
2007: PPUSH
2008: LD_VAR 0 4
2012: PPUSH
2013: CALL 734 0 2
2017: ADD
2018: ST_TO_ADDR
2019: GO 1990
2021: POP
2022: POP
2023: GO 1957
2025: POP
2026: POP
// for i = 1 to team do
2027: LD_ADDR_VAR 0 2
2031: PUSH
2032: DOUBLE
2033: LD_INT 1
2035: DEC
2036: ST_TO_ADDR
2037: LD_VAR 0 5
2041: PUSH
2042: FOR_TO
2043: IFFALSE 2161
// if GetClass ( team [ i ] ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_empty ] ] ) then
2045: LD_VAR 0 5
2049: PUSH
2050: LD_VAR 0 2
2054: ARRAY
2055: PPUSH
2056: CALL_OW 257
2060: PUSH
2061: LD_INT 3
2063: EQUAL
2064: PUSH
2065: LD_INT 22
2067: PUSH
2068: LD_INT 3
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 58
2077: PUSH
2078: EMPTY
2079: LIST
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PPUSH
2085: CALL_OW 69
2089: AND
2090: IFFALSE 2138
// PlaceHumanInUnit ( team [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_empty ] ] ) [ 1 ] ) else
2092: LD_VAR 0 5
2096: PUSH
2097: LD_VAR 0 2
2101: ARRAY
2102: PPUSH
2103: LD_INT 22
2105: PUSH
2106: LD_INT 3
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: PUSH
2113: LD_INT 58
2115: PUSH
2116: EMPTY
2117: LIST
2118: PUSH
2119: EMPTY
2120: LIST
2121: LIST
2122: PPUSH
2123: CALL_OW 69
2127: PUSH
2128: LD_INT 1
2130: ARRAY
2131: PPUSH
2132: CALL_OW 52
2136: GO 2159
// PlaceUnitArea ( team [ i ] , rus_spawn , false ) ;
2138: LD_VAR 0 5
2142: PUSH
2143: LD_VAR 0 2
2147: ARRAY
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: LD_INT 0
2154: PPUSH
2155: CALL_OW 49
2159: GO 2042
2161: POP
2162: POP
// end ;
2163: LD_VAR 0 1
2167: RET
// every 0 0$10 trigger depot_rdy do var i , un , l , driver ;
2168: LD_EXP 6
2172: IFFALSE 2542
2174: GO 2176
2176: DISABLE
2177: LD_INT 0
2179: PPUSH
2180: PPUSH
2181: PPUSH
2182: PPUSH
// begin Wait ( 0 0$07 ) ;
2183: LD_INT 245
2185: PPUSH
2186: CALL_OW 67
// l := 0 ;
2190: LD_ADDR_VAR 0 3
2194: PUSH
2195: LD_INT 0
2197: ST_TO_ADDR
// repeat begin uc_side := 6 ;
2198: LD_ADDR_OWVAR 20
2202: PUSH
2203: LD_INT 6
2205: ST_TO_ADDR
// uc_nation := 3 ;
2206: LD_ADDR_OWVAR 21
2210: PUSH
2211: LD_INT 3
2213: ST_TO_ADDR
// CreateVehicleWithDriver ( ru_medium_tracked , engine_combustion , ru_cargo_bay , rus_cr_spawn , 5 , Rand ( 3 , 6 ) ) ;
2214: LD_INT 22
2216: PPUSH
2217: LD_INT 1
2219: PPUSH
2220: LD_INT 51
2222: PPUSH
2223: LD_INT 5
2225: PPUSH
2226: LD_INT 5
2228: PPUSH
2229: LD_INT 3
2231: PPUSH
2232: LD_INT 6
2234: PPUSH
2235: CALL_OW 12
2239: PPUSH
2240: CALL 1297 0 6
// un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
2244: LD_ADDR_VAR 0 2
2248: PUSH
2249: LD_INT 22
2251: PUSH
2252: LD_INT 6
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 34
2261: PUSH
2262: LD_INT 51
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PPUSH
2273: CALL_OW 69
2277: PUSH
2278: LD_INT 1
2280: ARRAY
2281: ST_TO_ADDR
// SetCargo ( un , mat_cans , 100 ) ;
2282: LD_VAR 0 2
2286: PPUSH
2287: LD_INT 1
2289: PPUSH
2290: LD_INT 100
2292: PPUSH
2293: CALL_OW 290
// ComMoveXY ( un , dep_x + 2 , dep_y ) ;
2297: LD_VAR 0 2
2301: PPUSH
2302: LD_EXP 7
2306: PUSH
2307: LD_INT 2
2309: PLUS
2310: PPUSH
2311: LD_EXP 8
2315: PPUSH
2316: CALL_OW 111
// AddComUnload ( un ) ;
2320: LD_VAR 0 2
2324: PPUSH
2325: CALL_OW 219
// if ( l = 0 ) then
2329: LD_VAR 0 3
2333: PUSH
2334: LD_INT 0
2336: EQUAL
2337: IFFALSE 2373
// begin Wait ( 0 0$03 ) ;
2339: LD_INT 105
2341: PPUSH
2342: CALL_OW 67
// driver := IsDrivenBy ( un ) ;
2346: LD_ADDR_VAR 0 4
2350: PUSH
2351: LD_VAR 0 2
2355: PPUSH
2356: CALL_OW 311
2360: ST_TO_ADDR
// Say ( driver , Dtran ) ;
2361: LD_VAR 0 4
2365: PPUSH
2366: LD_STRING Dtran
2368: PPUSH
2369: CALL_OW 88
// end ; if ( l = [ 7 , 6 , 5 ] [ dif ] - 1 ) then
2373: LD_VAR 0 3
2377: PUSH
2378: LD_INT 7
2380: PUSH
2381: LD_INT 6
2383: PUSH
2384: LD_INT 5
2386: PUSH
2387: EMPTY
2388: LIST
2389: LIST
2390: LIST
2391: PUSH
2392: LD_EXP 1
2396: ARRAY
2397: PUSH
2398: LD_INT 1
2400: MINUS
2401: EQUAL
2402: IFFALSE 2438
// begin Wait ( 0 0$03 ) ;
2404: LD_INT 105
2406: PPUSH
2407: CALL_OW 67
// driver := IsDrivenBy ( un ) ;
2411: LD_ADDR_VAR 0 4
2415: PUSH
2416: LD_VAR 0 2
2420: PPUSH
2421: CALL_OW 311
2425: ST_TO_ADDR
// Say ( driver , Dtrans ) ;
2426: LD_VAR 0 4
2430: PPUSH
2431: LD_STRING Dtrans
2433: PPUSH
2434: CALL_OW 88
// end ; while ( not IsInArea ( un , rus_exit ) ) do
2438: LD_VAR 0 2
2442: PPUSH
2443: LD_INT 6
2445: PPUSH
2446: CALL_OW 308
2450: NOT
2451: IFFALSE 2477
// begin Wait ( 0 0$01 ) ;
2453: LD_INT 35
2455: PPUSH
2456: CALL_OW 67
// AddComMoveXY ( un , 69 , 97 ) ;
2460: LD_VAR 0 2
2464: PPUSH
2465: LD_INT 69
2467: PPUSH
2468: LD_INT 97
2470: PPUSH
2471: CALL_OW 171
// end ;
2475: GO 2438
// RemoveUnit ( un ) ;
2477: LD_VAR 0 2
2481: PPUSH
2482: CALL_OW 64
// l = l + 1 ;
2486: LD_ADDR_VAR 0 3
2490: PUSH
2491: LD_VAR 0 3
2495: PUSH
2496: LD_INT 1
2498: PLUS
2499: ST_TO_ADDR
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
2500: LD_INT 1155
2502: PPUSH
2503: LD_INT 5355
2505: PPUSH
2506: CALL_OW 12
2510: PPUSH
2511: CALL_OW 67
// end until l = [ 7 , 6 , 5 ] [ dif ] ;
2515: LD_VAR 0 3
2519: PUSH
2520: LD_INT 7
2522: PUSH
2523: LD_INT 6
2525: PUSH
2526: LD_INT 5
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: LIST
2533: PUSH
2534: LD_EXP 1
2538: ARRAY
2539: EQUAL
2540: IFFALSE 2198
// end ; end_of_file
2542: PPOPN 4
2544: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_bazooka and event_rocket = false then
2545: LD_VAR 0 1
2549: PUSH
2550: LD_INT 44
2552: EQUAL
2553: PUSH
2554: LD_EXP 20
2558: PUSH
2559: LD_INT 0
2561: EQUAL
2562: AND
2563: IFFALSE 2709
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) > 0 then
2565: LD_INT 22
2567: PUSH
2568: LD_INT 3
2570: PUSH
2571: EMPTY
2572: LIST
2573: LIST
2574: PUSH
2575: LD_INT 25
2577: PUSH
2578: LD_INT 4
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: PPUSH
2589: CALL_OW 69
2593: PUSH
2594: LD_INT 0
2596: GREATER
2597: IFFALSE 2709
// begin event_rocket := true ;
2599: LD_ADDR_EXP 20
2603: PUSH
2604: LD_INT 1
2606: ST_TO_ADDR
// if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) > 0 then
2607: LD_INT 22
2609: PUSH
2610: LD_INT 3
2612: PUSH
2613: EMPTY
2614: LIST
2615: LIST
2616: PUSH
2617: LD_INT 25
2619: PUSH
2620: LD_INT 4
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: PUSH
2627: LD_INT 26
2629: PUSH
2630: LD_INT 1
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: LIST
2641: PUSH
2642: EMPTY
2643: LIST
2644: PPUSH
2645: CALL_OW 69
2649: PUSH
2650: LD_INT 0
2652: GREATER
2653: IFFALSE 2709
// Say ( FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) [ 1 ] , Dsci2 ) ;
2655: LD_INT 22
2657: PUSH
2658: LD_INT 3
2660: PUSH
2661: EMPTY
2662: LIST
2663: LIST
2664: PUSH
2665: LD_INT 25
2667: PUSH
2668: LD_INT 4
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: PUSH
2675: LD_INT 26
2677: PUSH
2678: LD_INT 1
2680: PUSH
2681: EMPTY
2682: LIST
2683: LIST
2684: PUSH
2685: EMPTY
2686: LIST
2687: LIST
2688: LIST
2689: PUSH
2690: EMPTY
2691: LIST
2692: PPUSH
2693: CALL_OW 69
2697: PUSH
2698: LD_INT 1
2700: ARRAY
2701: PPUSH
2702: LD_STRING Dsci2
2704: PPUSH
2705: CALL_OW 88
// end ; end ;
2709: PPOPN 2
2711: END
// on VehicleConstructed ( un , fac ) do begin SOS_VehicleConstructed ( un , fac ) ;
2712: LD_VAR 0 1
2716: PPUSH
2717: LD_VAR 0 2
2721: PPUSH
2722: CALL 25238 0 2
// if GetSide ( un ) = 3 and GetControl ( un ) = control_computer then
2726: LD_VAR 0 1
2730: PPUSH
2731: CALL_OW 255
2735: PUSH
2736: LD_INT 3
2738: EQUAL
2739: PUSH
2740: LD_VAR 0 1
2744: PPUSH
2745: CALL_OW 263
2749: PUSH
2750: LD_INT 3
2752: EQUAL
2753: AND
2754: IFFALSE 2764
// comp_tested := true ;
2756: LD_ADDR_EXP 22
2760: PUSH
2761: LD_INT 1
2763: ST_TO_ADDR
// end ;
2764: PPOPN 2
2766: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
2767: LD_VAR 0 1
2771: PUSH
2772: LD_INT 22
2774: PUSH
2775: LD_INT 1
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: PUSH
2782: LD_INT 21
2784: PUSH
2785: LD_INT 3
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PPUSH
2796: CALL_OW 69
2800: IN
2801: IFFALSE 2879
// if attacked = false and sikorski_ar = false then
2803: LD_EXP 15
2807: PUSH
2808: LD_INT 0
2810: EQUAL
2811: PUSH
2812: LD_EXP 12
2816: PUSH
2817: LD_INT 0
2819: EQUAL
2820: AND
2821: IFFALSE 2879
// begin attacked := true ;
2823: LD_ADDR_EXP 15
2827: PUSH
2828: LD_INT 1
2830: ST_TO_ADDR
// if IsInUnit ( donald ) then
2831: LD_EXP 13
2835: PPUSH
2836: CALL_OW 310
2840: IFFALSE 2856
// SayRadio ( donald , DGammaF ) else
2842: LD_EXP 13
2846: PPUSH
2847: LD_STRING DGammaF
2849: PPUSH
2850: CALL_OW 94
2854: GO 2879
// if IsInUnit ( van ) then
2856: LD_EXP 14
2860: PPUSH
2861: CALL_OW 310
2865: IFFALSE 2879
// SayRadio ( van , DGammaM ) ;
2867: LD_EXP 14
2871: PPUSH
2872: LD_STRING DGammaM
2874: PPUSH
2875: CALL_OW 94
// end ; if un in FilterAllUnits ( [ f_control , control_remote ] ) then
2879: LD_VAR 0 1
2883: PUSH
2884: LD_INT 33
2886: PUSH
2887: LD_INT 2
2889: PUSH
2890: EMPTY
2891: LIST
2892: LIST
2893: PPUSH
2894: CALL_OW 69
2898: IN
2899: IFFALSE 2910
// ComUnlink ( un ) ;
2901: LD_VAR 0 1
2905: PPUSH
2906: CALL_OW 136
// end ;
2910: PPOPN 1
2912: END
// on ApemanTamed ( ape , sci ) do begin if GetSex ( sci ) = sex_male then
2913: LD_VAR 0 2
2917: PPUSH
2918: CALL_OW 258
2922: PUSH
2923: LD_INT 1
2925: EQUAL
2926: IFFALSE 2940
// Say ( sci , Dsci3 ) ;
2928: LD_VAR 0 2
2932: PPUSH
2933: LD_STRING Dsci3
2935: PPUSH
2936: CALL_OW 88
// end ;
2940: PPOPN 2
2942: END
// on BuildingComplete ( b ) do var i ;
2943: LD_INT 0
2945: PPUSH
// begin if GetBType ( b ) = b_depot and GetSide ( b ) = 3 and depot_rdy = false then
2946: LD_VAR 0 1
2950: PPUSH
2951: CALL_OW 266
2955: PUSH
2956: LD_INT 0
2958: EQUAL
2959: PUSH
2960: LD_VAR 0 1
2964: PPUSH
2965: CALL_OW 255
2969: PUSH
2970: LD_INT 3
2972: EQUAL
2973: AND
2974: PUSH
2975: LD_EXP 6
2979: PUSH
2980: LD_INT 0
2982: EQUAL
2983: AND
2984: IFFALSE 3048
// begin SetBName ( b , kalinin ) ;
2986: LD_VAR 0 1
2990: PPUSH
2991: LD_STRING kalinin
2993: PPUSH
2994: CALL_OW 500
// dep_x := GetX ( b ) ;
2998: LD_ADDR_EXP 7
3002: PUSH
3003: LD_VAR 0 1
3007: PPUSH
3008: CALL_OW 250
3012: ST_TO_ADDR
// dep_y := GetY ( b ) ;
3013: LD_ADDR_EXP 8
3017: PUSH
3018: LD_VAR 0 1
3022: PPUSH
3023: CALL_OW 251
3027: ST_TO_ADDR
// depot_rdy := true ;
3028: LD_ADDR_EXP 6
3032: PUSH
3033: LD_INT 1
3035: ST_TO_ADDR
// SayRadio ( popov , Dpop3 ) ;
3036: LD_EXP 2
3040: PPUSH
3041: LD_STRING Dpop3
3043: PPUSH
3044: CALL_OW 94
// end ; if GetBType ( b ) = b_lab and GetSide ( b ) = 3 and event_comp = false then
3048: LD_VAR 0 1
3052: PPUSH
3053: CALL_OW 266
3057: PUSH
3058: LD_INT 6
3060: EQUAL
3061: PUSH
3062: LD_VAR 0 1
3066: PPUSH
3067: CALL_OW 255
3071: PUSH
3072: LD_INT 3
3074: EQUAL
3075: AND
3076: PUSH
3077: LD_EXP 21
3081: PUSH
3082: LD_INT 0
3084: EQUAL
3085: AND
3086: IFFALSE 3181
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) > 0 then
3088: LD_INT 22
3090: PUSH
3091: LD_INT 3
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: PUSH
3098: LD_INT 25
3100: PUSH
3101: LD_INT 4
3103: PUSH
3104: EMPTY
3105: LIST
3106: LIST
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: PPUSH
3112: CALL_OW 69
3116: PUSH
3117: LD_INT 0
3119: GREATER
3120: IFFALSE 3181
// begin event_comp := true ;
3122: LD_ADDR_EXP 21
3126: PUSH
3127: LD_INT 1
3129: ST_TO_ADDR
// Say ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , Dsci1 ) ;
3130: LD_INT 22
3132: PUSH
3133: LD_INT 3
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: PUSH
3140: LD_INT 25
3142: PUSH
3143: LD_INT 4
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: PUSH
3150: LD_INT 26
3152: PUSH
3153: LD_INT 1
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: LIST
3164: PPUSH
3165: CALL_OW 69
3169: PUSH
3170: LD_INT 1
3172: ARRAY
3173: PPUSH
3174: LD_STRING Dsci1
3176: PPUSH
3177: CALL_OW 88
// end ; if GetBType ( b ) = b_bunker and GetSide ( b ) = 1 then
3181: LD_VAR 0 1
3185: PPUSH
3186: CALL_OW 266
3190: PUSH
3191: LD_INT 32
3193: EQUAL
3194: PUSH
3195: LD_VAR 0 1
3199: PPUSH
3200: CALL_OW 255
3204: PUSH
3205: LD_INT 1
3207: EQUAL
3208: AND
3209: IFFALSE 3274
// begin RaiseSailEvent ( 6 ) ;
3211: LD_INT 6
3213: PPUSH
3214: CALL_OW 427
// AddComPlaceWeapon ( b , gamma_towers [ 4 ] ) ;
3218: LD_VAR 0 1
3222: PPUSH
3223: LD_EXP 18
3227: PUSH
3228: LD_INT 4
3230: ARRAY
3231: PPUSH
3232: CALL_OW 208
// for i = 1 to 4 do
3236: LD_ADDR_VAR 0 2
3240: PUSH
3241: DOUBLE
3242: LD_INT 1
3244: DEC
3245: ST_TO_ADDR
3246: LD_INT 4
3248: PUSH
3249: FOR_TO
3250: IFFALSE 3272
// gamma_towers := Delete ( gamma_towers , 1 ) ;
3252: LD_ADDR_EXP 18
3256: PUSH
3257: LD_EXP 18
3261: PPUSH
3262: LD_INT 1
3264: PPUSH
3265: CALL_OW 3
3269: ST_TO_ADDR
3270: GO 3249
3272: POP
3273: POP
// end ; end ;
3274: PPOPN 2
3276: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3277: LD_VAR 0 1
3281: PPUSH
3282: CALL 25118 0 1
// if un in Patrol then
3286: LD_VAR 0 1
3290: PUSH
3291: LD_EXP 17
3295: IN
3296: IFFALSE 3314
// Patrol := Patrol diff un ;
3298: LD_ADDR_EXP 17
3302: PUSH
3303: LD_EXP 17
3307: PUSH
3308: LD_VAR 0 1
3312: DIFF
3313: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
3314: LD_VAR 0 1
3318: PUSH
3319: LD_INT 22
3321: PUSH
3322: LD_INT 1
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: PUSH
3329: LD_INT 30
3331: PUSH
3332: LD_INT 32
3334: PUSH
3335: EMPTY
3336: LIST
3337: LIST
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PPUSH
3343: CALL_OW 69
3347: IN
3348: IFFALSE 3434
// begin gamma_towers := gamma_towers ^ GetX ( un ) ;
3350: LD_ADDR_EXP 18
3354: PUSH
3355: LD_EXP 18
3359: PUSH
3360: LD_VAR 0 1
3364: PPUSH
3365: CALL_OW 250
3369: ADD
3370: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetY ( un ) ;
3371: LD_ADDR_EXP 18
3375: PUSH
3376: LD_EXP 18
3380: PUSH
3381: LD_VAR 0 1
3385: PPUSH
3386: CALL_OW 251
3390: ADD
3391: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetDir ( un ) ;
3392: LD_ADDR_EXP 18
3396: PUSH
3397: LD_EXP 18
3401: PUSH
3402: LD_VAR 0 1
3406: PPUSH
3407: CALL_OW 254
3411: ADD
3412: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetBWeapon ( un ) ;
3413: LD_ADDR_EXP 18
3417: PUSH
3418: LD_EXP 18
3422: PUSH
3423: LD_VAR 0 1
3427: PPUSH
3428: CALL_OW 269
3432: ADD
3433: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) then
3434: LD_VAR 0 1
3438: PUSH
3439: LD_INT 33
3441: PUSH
3442: LD_INT 2
3444: PUSH
3445: EMPTY
3446: LIST
3447: LIST
3448: PUSH
3449: LD_INT 3
3451: PUSH
3452: LD_INT 34
3454: PUSH
3455: LD_INT 13
3457: PUSH
3458: EMPTY
3459: LIST
3460: LIST
3461: PUSH
3462: EMPTY
3463: LIST
3464: LIST
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: PPUSH
3470: CALL_OW 69
3474: IN
3475: IFFALSE 3491
// new_veh := new_veh + 1 ;
3477: LD_ADDR_EXP 19
3481: PUSH
3482: LD_EXP 19
3486: PUSH
3487: LD_INT 1
3489: PLUS
3490: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_weapon , us_crane ] ) then
3491: LD_VAR 0 1
3495: PUSH
3496: LD_INT 34
3498: PUSH
3499: LD_INT 13
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: PPUSH
3506: CALL_OW 69
3510: IN
3511: IFFALSE 3532
// AddComConstruct ( am_fac , us_medium_tracked , engine_solar , control_remote , us_crane ) ;
3513: LD_INT 26
3515: PPUSH
3516: LD_INT 3
3518: PPUSH
3519: LD_INT 2
3521: PPUSH
3522: LD_INT 2
3524: PPUSH
3525: LD_INT 13
3527: PPUSH
3528: CALL_OW 185
// if un = am_dep then
3532: LD_VAR 0 1
3536: PUSH
3537: LD_INT 25
3539: EQUAL
3540: IFFALSE 3708
// begin SayRadio ( Platonov , DPlat ) ;
3542: LD_EXP 4
3546: PPUSH
3547: LD_STRING DPlat
3549: PPUSH
3550: CALL_OW 94
// if timer <= 30 30$00 then
3554: LD_EXP 24
3558: PUSH
3559: LD_INT 63000
3561: LESSEQUAL
3562: IFFALSE 3576
// AddMedal ( gamma_med3 , 1 ) else
3564: LD_STRING gamma_med3
3566: PPUSH
3567: LD_INT 1
3569: PPUSH
3570: CALL_OW 101
3574: GO 3626
// if timer <= [ 50 50$00 , 42 42$00 , 35 35$00 ] [ dif ] then
3576: LD_EXP 24
3580: PUSH
3581: LD_INT 105000
3583: PUSH
3584: LD_INT 88200
3586: PUSH
3587: LD_INT 73500
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: LIST
3594: PUSH
3595: LD_EXP 1
3599: ARRAY
3600: LESSEQUAL
3601: IFFALSE 3615
// AddMedal ( gamma_med3 , 2 ) else
3603: LD_STRING gamma_med3
3605: PPUSH
3606: LD_INT 2
3608: PPUSH
3609: CALL_OW 101
3613: GO 3626
// AddMedal ( gamma_med3 , - 1 ) ;
3615: LD_STRING gamma_med3
3617: PPUSH
3618: LD_INT 1
3620: NEG
3621: PPUSH
3622: CALL_OW 101
// if not comp_tested then
3626: LD_EXP 22
3630: NOT
3631: IFFALSE 3646
// AddMedal ( gamma_med2 , - 1 ) else
3633: LD_STRING gamma_med2
3635: PPUSH
3636: LD_INT 1
3638: NEG
3639: PPUSH
3640: CALL_OW 101
3644: GO 3656
// AddMedal ( gamma_med2 , 1 ) ;
3646: LD_STRING gamma_med2
3648: PPUSH
3649: LD_INT 1
3651: PPUSH
3652: CALL_OW 101
// if IsDead ( sikorski ) and not sikorski_run then
3656: LD_EXP 9
3660: PPUSH
3661: CALL_OW 301
3665: PUSH
3666: LD_EXP 23
3670: NOT
3671: AND
3672: IFFALSE 3686
// AddMedal ( gamma_med1 , 1 ) else
3674: LD_STRING gamma_med1
3676: PPUSH
3677: LD_INT 1
3679: PPUSH
3680: CALL_OW 101
3684: GO 3697
// AddMedal ( gamma_med1 , - 1 ) ;
3686: LD_STRING gamma_med1
3688: PPUSH
3689: LD_INT 1
3691: NEG
3692: PPUSH
3693: CALL_OW 101
// GiveMedals ( GAMMA_MEDALS ) ;
3697: LD_STRING GAMMA_MEDALS
3699: PPUSH
3700: CALL_OW 102
// YouWin ;
3704: CALL_OW 103
// end ; if un = commander then
3708: LD_VAR 0 1
3712: PUSH
3713: LD_EXP 3
3717: EQUAL
3718: IFFALSE 3727
// YouLost ( comml ) ;
3720: LD_STRING comml
3722: PPUSH
3723: CALL_OW 104
// if un = sikorski then
3727: LD_VAR 0 1
3731: PUSH
3732: LD_EXP 9
3736: EQUAL
3737: IFFALSE 3749
// AddMedal ( gamma_med1 , 1 ) ;
3739: LD_STRING gamma_med1
3741: PPUSH
3742: LD_INT 1
3744: PPUSH
3745: CALL_OW 101
// end ;
3749: PPOPN 1
3751: END
// on SailEvent ( event ) do var i , un , filter , doc , bac , place , engs , crane , b ;
3752: LD_INT 0
3754: PPUSH
3755: PPUSH
3756: PPUSH
3757: PPUSH
3758: PPUSH
3759: PPUSH
3760: PPUSH
3761: PPUSH
3762: PPUSH
// begin if event = 1 then
3763: LD_VAR 0 1
3767: PUSH
3768: LD_INT 1
3770: EQUAL
3771: IFFALSE 4068
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3773: LD_ADDR_VAR 0 4
3777: PUSH
3778: LD_INT 22
3780: PUSH
3781: LD_INT 1
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PUSH
3788: LD_INT 21
3790: PUSH
3791: LD_INT 3
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: PUSH
3798: LD_INT 3
3800: PUSH
3801: LD_INT 24
3803: PUSH
3804: LD_INT 1000
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PUSH
3811: EMPTY
3812: LIST
3813: LIST
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: LIST
3819: PPUSH
3820: CALL_OW 69
3824: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ] ) ;
3825: LD_ADDR_VAR 0 8
3829: PUSH
3830: LD_INT 22
3832: PUSH
3833: LD_INT 1
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: PUSH
3840: LD_INT 25
3842: PUSH
3843: LD_INT 2
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: PUSH
3850: LD_INT 24
3852: PUSH
3853: LD_INT 1000
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: PUSH
3860: EMPTY
3861: LIST
3862: LIST
3863: LIST
3864: PUSH
3865: EMPTY
3866: LIST
3867: PPUSH
3868: CALL_OW 69
3872: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) ;
3873: LD_ADDR_VAR 0 9
3877: PUSH
3878: LD_INT 22
3880: PUSH
3881: LD_INT 1
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: PUSH
3888: LD_INT 34
3890: PUSH
3891: LD_INT 13
3893: PUSH
3894: EMPTY
3895: LIST
3896: LIST
3897: PUSH
3898: EMPTY
3899: LIST
3900: LIST
3901: PPUSH
3902: CALL_OW 69
3906: ST_TO_ADDR
// if engs > 0 then
3907: LD_VAR 0 8
3911: PUSH
3912: LD_INT 0
3914: GREATER
3915: IFFALSE 4020
// for i = 1 to engs do
3917: LD_ADDR_VAR 0 2
3921: PUSH
3922: DOUBLE
3923: LD_INT 1
3925: DEC
3926: ST_TO_ADDR
3927: LD_VAR 0 8
3931: PUSH
3932: FOR_TO
3933: IFFALSE 4018
// begin if IsInUnit ( engs [ i ] ) then
3935: LD_VAR 0 8
3939: PUSH
3940: LD_VAR 0 2
3944: ARRAY
3945: PPUSH
3946: CALL_OW 310
3950: IFFALSE 3967
// ComExitBuilding ( engs [ i ] ) ;
3952: LD_VAR 0 8
3956: PUSH
3957: LD_VAR 0 2
3961: ARRAY
3962: PPUSH
3963: CALL_OW 122
// Wait ( 0 0$0.2 ) ;
3967: LD_INT 7
3969: PPUSH
3970: CALL_OW 67
// if not HasTask ( engs [ i ] ) then
3974: LD_VAR 0 8
3978: PUSH
3979: LD_VAR 0 2
3983: ARRAY
3984: PPUSH
3985: CALL_OW 314
3989: NOT
3990: IFFALSE 4016
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
3992: LD_VAR 0 8
3996: PUSH
3997: LD_VAR 0 2
4001: ARRAY
4002: PPUSH
4003: LD_VAR 0 4
4007: PUSH
4008: LD_INT 1
4010: ARRAY
4011: PPUSH
4012: CALL_OW 130
// end ;
4016: GO 3932
4018: POP
4019: POP
// if crane > 0 then
4020: LD_VAR 0 9
4024: PUSH
4025: LD_INT 0
4027: GREATER
4028: IFFALSE 4068
// if not HasTask ( crane [ 1 ] ) then
4030: LD_VAR 0 9
4034: PUSH
4035: LD_INT 1
4037: ARRAY
4038: PPUSH
4039: CALL_OW 314
4043: NOT
4044: IFFALSE 4068
// ComRepairBuilding ( crane [ 1 ] , filter [ 1 ] ) ;
4046: LD_VAR 0 9
4050: PUSH
4051: LD_INT 1
4053: ARRAY
4054: PPUSH
4055: LD_VAR 0 4
4059: PUSH
4060: LD_INT 1
4062: ARRAY
4063: PPUSH
4064: CALL_OW 130
// end ; if event = 2 then
4068: LD_VAR 0 1
4072: PUSH
4073: LD_INT 2
4075: EQUAL
4076: IFFALSE 4198
// begin engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
4078: LD_ADDR_VAR 0 8
4082: PUSH
4083: LD_INT 22
4085: PUSH
4086: LD_INT 1
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: PUSH
4093: LD_INT 25
4095: PUSH
4096: LD_INT 2
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: PUSH
4103: EMPTY
4104: LIST
4105: LIST
4106: PPUSH
4107: CALL_OW 69
4111: ST_TO_ADDR
// if engs > 0 then
4112: LD_VAR 0 8
4116: PUSH
4117: LD_INT 0
4119: GREATER
4120: IFFALSE 4198
// for i = 1 to engs do
4122: LD_ADDR_VAR 0 2
4126: PUSH
4127: DOUBLE
4128: LD_INT 1
4130: DEC
4131: ST_TO_ADDR
4132: LD_VAR 0 8
4136: PUSH
4137: FOR_TO
4138: IFFALSE 4196
// if not HasTask ( engs [ i ] ) and not IsInUnit ( engs [ i ] ) then
4140: LD_VAR 0 8
4144: PUSH
4145: LD_VAR 0 2
4149: ARRAY
4150: PPUSH
4151: CALL_OW 314
4155: NOT
4156: PUSH
4157: LD_VAR 0 8
4161: PUSH
4162: LD_VAR 0 2
4166: ARRAY
4167: PPUSH
4168: CALL_OW 310
4172: NOT
4173: AND
4174: IFFALSE 4194
// ComEnterUnit ( engs [ i ] , am_dep ) ;
4176: LD_VAR 0 8
4180: PUSH
4181: LD_VAR 0 2
4185: ARRAY
4186: PPUSH
4187: LD_INT 25
4189: PPUSH
4190: CALL_OW 120
4194: GO 4137
4196: POP
4197: POP
// end ; if event = 3 then
4198: LD_VAR 0 1
4202: PUSH
4203: LD_INT 3
4205: EQUAL
4206: IFFALSE 4570
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_class , 4 ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
4208: LD_ADDR_VAR 0 4
4212: PUSH
4213: LD_INT 22
4215: PUSH
4216: LD_INT 1
4218: PUSH
4219: EMPTY
4220: LIST
4221: LIST
4222: PUSH
4223: LD_INT 21
4225: PUSH
4226: LD_INT 1
4228: PUSH
4229: EMPTY
4230: LIST
4231: LIST
4232: PUSH
4233: LD_INT 3
4235: PUSH
4236: LD_INT 25
4238: PUSH
4239: LD_INT 4
4241: PUSH
4242: EMPTY
4243: LIST
4244: LIST
4245: PUSH
4246: EMPTY
4247: LIST
4248: LIST
4249: PUSH
4250: LD_INT 3
4252: PUSH
4253: LD_INT 24
4255: PUSH
4256: LD_INT 800
4258: PUSH
4259: EMPTY
4260: LIST
4261: LIST
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: LIST
4271: LIST
4272: PUSH
4273: EMPTY
4274: LIST
4275: PPUSH
4276: CALL_OW 69
4280: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
4281: LD_ADDR_VAR 0 5
4285: PUSH
4286: LD_INT 22
4288: PUSH
4289: LD_INT 1
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: PUSH
4296: LD_INT 25
4298: PUSH
4299: LD_INT 4
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: PPUSH
4310: CALL_OW 69
4314: ST_TO_ADDR
// if filter > 0 then
4315: LD_VAR 0 4
4319: PUSH
4320: LD_INT 0
4322: GREATER
4323: IFFALSE 4512
// begin for i = 1 to doc do
4325: LD_ADDR_VAR 0 2
4329: PUSH
4330: DOUBLE
4331: LD_INT 1
4333: DEC
4334: ST_TO_ADDR
4335: LD_VAR 0 5
4339: PUSH
4340: FOR_TO
4341: IFFALSE 4441
// begin if IsInUnit ( doc [ i ] ) then
4343: LD_VAR 0 5
4347: PUSH
4348: LD_VAR 0 2
4352: ARRAY
4353: PPUSH
4354: CALL_OW 310
4358: IFFALSE 4375
// ComExitBuilding ( doc [ i ] ) ;
4360: LD_VAR 0 5
4364: PUSH
4365: LD_VAR 0 2
4369: ARRAY
4370: PPUSH
4371: CALL_OW 122
// if GetDistUnits ( filter [ 1 ] , am_lab ) < 10 and not HasTask ( doc [ i ] ) then
4375: LD_VAR 0 4
4379: PUSH
4380: LD_INT 1
4382: ARRAY
4383: PPUSH
4384: LD_INT 46
4386: PPUSH
4387: CALL_OW 296
4391: PUSH
4392: LD_INT 10
4394: LESS
4395: PUSH
4396: LD_VAR 0 5
4400: PUSH
4401: LD_VAR 0 2
4405: ARRAY
4406: PPUSH
4407: CALL_OW 314
4411: NOT
4412: AND
4413: IFFALSE 4439
// ComHeal ( doc [ i ] , filter [ 1 ] ) ;
4415: LD_VAR 0 5
4419: PUSH
4420: LD_VAR 0 2
4424: ARRAY
4425: PPUSH
4426: LD_VAR 0 4
4430: PUSH
4431: LD_INT 1
4433: ARRAY
4434: PPUSH
4435: CALL_OW 128
// end ;
4439: GO 4340
4441: POP
4442: POP
// for i = 1 to filter do
4443: LD_ADDR_VAR 0 2
4447: PUSH
4448: DOUBLE
4449: LD_INT 1
4451: DEC
4452: ST_TO_ADDR
4453: LD_VAR 0 4
4457: PUSH
4458: FOR_TO
4459: IFFALSE 4508
// if GetDistUnits ( filter [ i ] , am_lab ) > 10 then
4461: LD_VAR 0 4
4465: PUSH
4466: LD_VAR 0 2
4470: ARRAY
4471: PPUSH
4472: LD_INT 46
4474: PPUSH
4475: CALL_OW 296
4479: PUSH
4480: LD_INT 10
4482: GREATER
4483: IFFALSE 4506
// ComMoveXY ( filter [ i ] , 47 , 12 ) ;
4485: LD_VAR 0 4
4489: PUSH
4490: LD_VAR 0 2
4494: ARRAY
4495: PPUSH
4496: LD_INT 47
4498: PPUSH
4499: LD_INT 12
4501: PPUSH
4502: CALL_OW 111
4506: GO 4458
4508: POP
4509: POP
// end else
4510: GO 4570
// for i = 1 to doc do
4512: LD_ADDR_VAR 0 2
4516: PUSH
4517: DOUBLE
4518: LD_INT 1
4520: DEC
4521: ST_TO_ADDR
4522: LD_VAR 0 5
4526: PUSH
4527: FOR_TO
4528: IFFALSE 4568
// if not IsInUnit ( doc [ i ] ) then
4530: LD_VAR 0 5
4534: PUSH
4535: LD_VAR 0 2
4539: ARRAY
4540: PPUSH
4541: CALL_OW 310
4545: NOT
4546: IFFALSE 4566
// ComEnterUnit ( doc [ i ] , am_lab ) ;
4548: LD_VAR 0 5
4552: PUSH
4553: LD_VAR 0 2
4557: ARRAY
4558: PPUSH
4559: LD_INT 46
4561: PPUSH
4562: CALL_OW 120
4566: GO 4527
4568: POP
4569: POP
// end ; if event = 4 then
4570: LD_VAR 0 1
4574: PUSH
4575: LD_INT 4
4577: EQUAL
4578: IFFALSE 4829
// begin bac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
4580: LD_ADDR_VAR 0 6
4584: PUSH
4585: LD_INT 22
4587: PUSH
4588: LD_INT 1
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PUSH
4595: LD_INT 30
4597: PUSH
4598: LD_INT 5
4600: PUSH
4601: EMPTY
4602: LIST
4603: LIST
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: PPUSH
4609: CALL_OW 69
4613: ST_TO_ADDR
// for i = 1 to bac do
4614: LD_ADDR_VAR 0 2
4618: PUSH
4619: DOUBLE
4620: LD_INT 1
4622: DEC
4623: ST_TO_ADDR
4624: LD_VAR 0 6
4628: PUSH
4629: FOR_TO
4630: IFFALSE 4671
// if UnitsInside ( bac [ i ] ) < 6 then
4632: LD_VAR 0 6
4636: PUSH
4637: LD_VAR 0 2
4641: ARRAY
4642: PPUSH
4643: CALL_OW 313
4647: PUSH
4648: LD_INT 6
4650: LESS
4651: IFFALSE 4669
// place := bac [ i ] ;
4653: LD_ADDR_VAR 0 7
4657: PUSH
4658: LD_VAR 0 6
4662: PUSH
4663: LD_VAR 0 2
4667: ARRAY
4668: ST_TO_ADDR
4669: GO 4629
4671: POP
4672: POP
// if place then
4673: LD_VAR 0 7
4677: IFFALSE 4829
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] ] , [ f_lives , 1000 ] ] ] ) diff Patrol ;
4679: LD_ADDR_VAR 0 4
4683: PUSH
4684: LD_INT 22
4686: PUSH
4687: LD_INT 1
4689: PUSH
4690: EMPTY
4691: LIST
4692: LIST
4693: PUSH
4694: LD_INT 2
4696: PUSH
4697: LD_INT 25
4699: PUSH
4700: LD_INT 1
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: PUSH
4707: LD_INT 25
4709: PUSH
4710: LD_INT 5
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: PUSH
4717: EMPTY
4718: LIST
4719: LIST
4720: LIST
4721: PUSH
4722: LD_INT 24
4724: PUSH
4725: LD_INT 1000
4727: PUSH
4728: EMPTY
4729: LIST
4730: LIST
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: LIST
4736: PUSH
4737: EMPTY
4738: LIST
4739: PPUSH
4740: CALL_OW 69
4744: PUSH
4745: LD_EXP 17
4749: DIFF
4750: ST_TO_ADDR
// for i = 1 to filter do
4751: LD_ADDR_VAR 0 2
4755: PUSH
4756: DOUBLE
4757: LD_INT 1
4759: DEC
4760: ST_TO_ADDR
4761: LD_VAR 0 4
4765: PUSH
4766: FOR_TO
4767: IFFALSE 4827
// if not IsInUnit ( filter [ i ] ) and not HasTask ( filter [ i ] ) then
4769: LD_VAR 0 4
4773: PUSH
4774: LD_VAR 0 2
4778: ARRAY
4779: PPUSH
4780: CALL_OW 310
4784: NOT
4785: PUSH
4786: LD_VAR 0 4
4790: PUSH
4791: LD_VAR 0 2
4795: ARRAY
4796: PPUSH
4797: CALL_OW 314
4801: NOT
4802: AND
4803: IFFALSE 4825
// ComEnterUnit ( filter [ i ] , place ) ;
4805: LD_VAR 0 4
4809: PUSH
4810: LD_VAR 0 2
4814: ARRAY
4815: PPUSH
4816: LD_VAR 0 7
4820: PPUSH
4821: CALL_OW 120
4825: GO 4766
4827: POP
4828: POP
// end ; end ; if event = 5 then
4829: LD_VAR 0 1
4833: PUSH
4834: LD_INT 5
4836: EQUAL
4837: IFFALSE 4991
// begin if FilterUnitsInArea ( am_sec , [ f_enemy , 1 ] ) = 0 then
4839: LD_INT 12
4841: PPUSH
4842: LD_INT 81
4844: PUSH
4845: LD_INT 1
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: PPUSH
4852: CALL_OW 70
4856: PUSH
4857: LD_INT 0
4859: EQUAL
4860: IFFALSE 4991
// begin engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
4862: LD_ADDR_VAR 0 8
4866: PUSH
4867: LD_INT 22
4869: PUSH
4870: LD_INT 1
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: PUSH
4877: LD_INT 25
4879: PUSH
4880: LD_INT 2
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PPUSH
4891: CALL_OW 69
4895: ST_TO_ADDR
// if engs > 0 then
4896: LD_VAR 0 8
4900: PUSH
4901: LD_INT 0
4903: GREATER
4904: IFFALSE 4991
// for i = 1 to engs do
4906: LD_ADDR_VAR 0 2
4910: PUSH
4911: DOUBLE
4912: LD_INT 1
4914: DEC
4915: ST_TO_ADDR
4916: LD_VAR 0 8
4920: PUSH
4921: FOR_TO
4922: IFFALSE 4989
// if not HasTask ( engs [ i ] ) then
4924: LD_VAR 0 8
4928: PUSH
4929: LD_VAR 0 2
4933: ARRAY
4934: PPUSH
4935: CALL_OW 314
4939: NOT
4940: IFFALSE 4987
// ComBuild ( engs [ i ] , b_bunker , gamma_towers [ 1 ] , gamma_towers [ 2 ] , gamma_towers [ 3 ] ) ;
4942: LD_VAR 0 8
4946: PUSH
4947: LD_VAR 0 2
4951: ARRAY
4952: PPUSH
4953: LD_INT 32
4955: PPUSH
4956: LD_EXP 18
4960: PUSH
4961: LD_INT 1
4963: ARRAY
4964: PPUSH
4965: LD_EXP 18
4969: PUSH
4970: LD_INT 2
4972: ARRAY
4973: PPUSH
4974: LD_EXP 18
4978: PUSH
4979: LD_INT 3
4981: ARRAY
4982: PPUSH
4983: CALL_OW 145
4987: GO 4921
4989: POP
4990: POP
// end ; end ; if event = 6 then
4991: LD_VAR 0 1
4995: PUSH
4996: LD_INT 6
4998: EQUAL
4999: IFFALSE 5183
// begin bac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
5001: LD_ADDR_VAR 0 6
5005: PUSH
5006: LD_INT 22
5008: PUSH
5009: LD_INT 1
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: PUSH
5016: LD_INT 30
5018: PUSH
5019: LD_INT 5
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: PPUSH
5030: CALL_OW 69
5034: ST_TO_ADDR
// if bac and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ] ) > 0 then
5035: LD_VAR 0 6
5039: PUSH
5040: LD_INT 22
5042: PUSH
5043: LD_INT 1
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: PUSH
5050: LD_INT 30
5052: PUSH
5053: LD_INT 32
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: PUSH
5060: LD_INT 58
5062: PUSH
5063: EMPTY
5064: LIST
5065: PUSH
5066: EMPTY
5067: LIST
5068: LIST
5069: LIST
5070: PUSH
5071: EMPTY
5072: LIST
5073: PPUSH
5074: CALL_OW 69
5078: PUSH
5079: LD_INT 0
5081: GREATER
5082: AND
5083: IFFALSE 5183
// begin b := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ] ) [ 1 ] ;
5085: LD_ADDR_VAR 0 10
5089: PUSH
5090: LD_INT 22
5092: PUSH
5093: LD_INT 1
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: PUSH
5100: LD_INT 30
5102: PUSH
5103: LD_INT 32
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: PUSH
5110: LD_INT 58
5112: PUSH
5113: EMPTY
5114: LIST
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: LIST
5120: PUSH
5121: EMPTY
5122: LIST
5123: PPUSH
5124: CALL_OW 69
5128: PUSH
5129: LD_INT 1
5131: ARRAY
5132: ST_TO_ADDR
// un := UnitsInside ( bac [ 1 ] ) ;
5133: LD_ADDR_VAR 0 3
5137: PUSH
5138: LD_VAR 0 6
5142: PUSH
5143: LD_INT 1
5145: ARRAY
5146: PPUSH
5147: CALL_OW 313
5151: ST_TO_ADDR
// ComExitBuilding ( un [ 1 ] ) ;
5152: LD_VAR 0 3
5156: PUSH
5157: LD_INT 1
5159: ARRAY
5160: PPUSH
5161: CALL_OW 122
// AddComEnterUnit ( un [ 1 ] , b ) ;
5165: LD_VAR 0 3
5169: PUSH
5170: LD_INT 1
5172: ARRAY
5173: PPUSH
5174: LD_VAR 0 10
5178: PPUSH
5179: CALL_OW 180
// end ; end ; end ;
5183: PPOPN 10
5185: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 3 then
5186: LD_VAR 0 1
5190: PUSH
5191: LD_INT 1
5193: EQUAL
5194: PUSH
5195: LD_VAR 0 2
5199: PUSH
5200: LD_INT 3
5202: EQUAL
5203: AND
5204: IFFALSE 5214
// contact_am := true ;
5206: LD_ADDR_EXP 16
5210: PUSH
5211: LD_INT 1
5213: ST_TO_ADDR
// end ;
5214: PPOPN 2
5216: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5217: LD_VAR 0 1
5221: PPUSH
5222: LD_VAR 0 2
5226: PPUSH
5227: LD_VAR 0 3
5231: PPUSH
5232: CALL 25214 0 3
// end ;
5236: PPOPN 3
5238: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5239: LD_VAR 0 1
5243: PPUSH
5244: CALL 25222 0 1
// end ; end_of_file
5248: PPOPN 1
5250: END
// export Sikorski , Game_Started , SForce , Sikorski_Ar , Donald , Van , attacked , contact_am ; export patrol ; export gamma_towers ; export function PrepareAmerican ; var i , un , b , skill , weapons , sol , lw ; begin
5251: LD_INT 0
5253: PPUSH
5254: PPUSH
5255: PPUSH
5256: PPUSH
5257: PPUSH
5258: PPUSH
5259: PPUSH
5260: PPUSH
// skill := [ 5 , 6 , 7 ] [ dif ] ;
5261: LD_ADDR_VAR 0 5
5265: PUSH
5266: LD_INT 5
5268: PUSH
5269: LD_INT 6
5271: PUSH
5272: LD_INT 7
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: LIST
5279: PUSH
5280: LD_EXP 1
5284: ARRAY
5285: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_gatling_gun , us_gatling_gun , us_double_gun , us_double_gun , us_double_gun , us_heavy_gun ] ;
5286: LD_ADDR_VAR 0 6
5290: PUSH
5291: LD_INT 4
5293: PUSH
5294: LD_INT 4
5296: PUSH
5297: LD_INT 4
5299: PUSH
5300: LD_INT 5
5302: PUSH
5303: LD_INT 5
5305: PUSH
5306: LD_INT 5
5308: PUSH
5309: LD_INT 6
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: LIST
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: ST_TO_ADDR
// SForce := [ ] ;
5321: LD_ADDR_EXP 11
5325: PUSH
5326: EMPTY
5327: ST_TO_ADDR
// Sikorski_Ar := false ;
5328: LD_ADDR_EXP 12
5332: PUSH
5333: LD_INT 0
5335: ST_TO_ADDR
// attacked := false ;
5336: LD_ADDR_EXP 15
5340: PUSH
5341: LD_INT 0
5343: ST_TO_ADDR
// contact_am := false ;
5344: LD_ADDR_EXP 16
5348: PUSH
5349: LD_INT 0
5351: ST_TO_ADDR
// patrol := [ ] ;
5352: LD_ADDR_EXP 17
5356: PUSH
5357: EMPTY
5358: ST_TO_ADDR
// gamma_towers := [ ] ;
5359: LD_ADDR_EXP 18
5363: PUSH
5364: EMPTY
5365: ST_TO_ADDR
// SetBName ( am_dep , gamma ) ;
5366: LD_INT 25
5368: PPUSH
5369: LD_STRING gamma
5371: PPUSH
5372: CALL_OW 500
// uc_side := 1 ;
5376: LD_ADDR_OWVAR 20
5380: PUSH
5381: LD_INT 1
5383: ST_TO_ADDR
// uc_nation := 1 ;
5384: LD_ADDR_OWVAR 21
5388: PUSH
5389: LD_INT 1
5391: ST_TO_ADDR
// hc_importance := 0 ;
5392: LD_ADDR_OWVAR 32
5396: PUSH
5397: LD_INT 0
5399: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
5400: LD_ADDR_OWVAR 26
5404: PUSH
5405: LD_STRING Jeremy Sikorski
5407: ST_TO_ADDR
// hc_gallery := us ;
5408: LD_ADDR_OWVAR 33
5412: PUSH
5413: LD_STRING us
5415: ST_TO_ADDR
// hc_face_number := 19 ;
5416: LD_ADDR_OWVAR 34
5420: PUSH
5421: LD_INT 19
5423: ST_TO_ADDR
// hc_skills := [ Rand ( skill , skill + 2 ) , 4 , 6 , 3 ] ;
5424: LD_ADDR_OWVAR 31
5428: PUSH
5429: LD_VAR 0 5
5433: PPUSH
5434: LD_VAR 0 5
5438: PUSH
5439: LD_INT 2
5441: PLUS
5442: PPUSH
5443: CALL_OW 12
5447: PUSH
5448: LD_INT 4
5450: PUSH
5451: LD_INT 6
5453: PUSH
5454: LD_INT 3
5456: PUSH
5457: EMPTY
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: ST_TO_ADDR
// hc_sex := sex_male ;
5463: LD_ADDR_OWVAR 27
5467: PUSH
5468: LD_INT 1
5470: ST_TO_ADDR
// hc_class := 1 ;
5471: LD_ADDR_OWVAR 28
5475: PUSH
5476: LD_INT 1
5478: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
5479: LD_ADDR_OWVAR 29
5483: PUSH
5484: LD_INT 10
5486: PUSH
5487: LD_INT 11
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: ST_TO_ADDR
// sikorski := CreateHuman ;
5494: LD_ADDR_EXP 9
5498: PUSH
5499: CALL_OW 44
5503: ST_TO_ADDR
// hc_name := Lucy Donaldson ;
5504: LD_ADDR_OWVAR 26
5508: PUSH
5509: LD_STRING Lucy Donaldson
5511: ST_TO_ADDR
// hc_gallery := us ;
5512: LD_ADDR_OWVAR 33
5516: PUSH
5517: LD_STRING us
5519: ST_TO_ADDR
// hc_face_number := 2 ;
5520: LD_ADDR_OWVAR 34
5524: PUSH
5525: LD_INT 2
5527: ST_TO_ADDR
// hc_skills := [ Rand ( skill , skill + 2 ) , 6 , 4 , 2 ] ;
5528: LD_ADDR_OWVAR 31
5532: PUSH
5533: LD_VAR 0 5
5537: PPUSH
5538: LD_VAR 0 5
5542: PUSH
5543: LD_INT 2
5545: PLUS
5546: PPUSH
5547: CALL_OW 12
5551: PUSH
5552: LD_INT 6
5554: PUSH
5555: LD_INT 4
5557: PUSH
5558: LD_INT 2
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: LIST
5565: LIST
5566: ST_TO_ADDR
// hc_sex := sex_female ;
5567: LD_ADDR_OWVAR 27
5571: PUSH
5572: LD_INT 2
5574: ST_TO_ADDR
// hc_class := 1 ;
5575: LD_ADDR_OWVAR 28
5579: PUSH
5580: LD_INT 1
5582: ST_TO_ADDR
// donald := CreateHuman ;
5583: LD_ADDR_EXP 13
5587: PUSH
5588: CALL_OW 44
5592: ST_TO_ADDR
// hc_name := Peter Van Houten ;
5593: LD_ADDR_OWVAR 26
5597: PUSH
5598: LD_STRING Peter Van Houten
5600: ST_TO_ADDR
// hc_gallery := us ;
5601: LD_ADDR_OWVAR 33
5605: PUSH
5606: LD_STRING us
5608: ST_TO_ADDR
// hc_face_number := 16 ;
5609: LD_ADDR_OWVAR 34
5613: PUSH
5614: LD_INT 16
5616: ST_TO_ADDR
// hc_sex := sex_male ;
5617: LD_ADDR_OWVAR 27
5621: PUSH
5622: LD_INT 1
5624: ST_TO_ADDR
// van := CreateHuman ;
5625: LD_ADDR_EXP 14
5629: PUSH
5630: CALL_OW 44
5634: ST_TO_ADDR
// hc_importance := 0 ;
5635: LD_ADDR_OWVAR 32
5639: PUSH
5640: LD_INT 0
5642: ST_TO_ADDR
// case dif of 1 :
5643: LD_EXP 1
5647: PUSH
5648: LD_INT 1
5650: DOUBLE
5651: EQUAL
5652: IFTRUE 5656
5654: GO 5667
5656: POP
// lw = 1 ; 2 :
5657: LD_ADDR_VAR 0 8
5661: PUSH
5662: LD_INT 1
5664: ST_TO_ADDR
5665: GO 5714
5667: LD_INT 2
5669: DOUBLE
5670: EQUAL
5671: IFTRUE 5675
5673: GO 5694
5675: POP
// lw = Rand ( 1 , 2 ) ; 3 :
5676: LD_ADDR_VAR 0 8
5680: PUSH
5681: LD_INT 1
5683: PPUSH
5684: LD_INT 2
5686: PPUSH
5687: CALL_OW 12
5691: ST_TO_ADDR
5692: GO 5714
5694: LD_INT 3
5696: DOUBLE
5697: EQUAL
5698: IFTRUE 5702
5700: GO 5713
5702: POP
// lw = 2 ; end ;
5703: LD_ADDR_VAR 0 8
5707: PUSH
5708: LD_INT 2
5710: ST_TO_ADDR
5711: GO 5714
5713: POP
// case lw of 1 :
5714: LD_VAR 0 8
5718: PUSH
5719: LD_INT 1
5721: DOUBLE
5722: EQUAL
5723: IFTRUE 5727
5725: GO 5742
5727: POP
// PlaceHumanInUnit ( donald , am_dep ) ; 2 :
5728: LD_EXP 13
5732: PPUSH
5733: LD_INT 25
5735: PPUSH
5736: CALL_OW 52
5740: GO 5766
5742: LD_INT 2
5744: DOUBLE
5745: EQUAL
5746: IFTRUE 5750
5748: GO 5765
5750: POP
// PlaceHumanInUnit ( van , am_dep ) ; end ;
5751: LD_EXP 14
5755: PPUSH
5756: LD_INT 25
5758: PPUSH
5759: CALL_OW 52
5763: GO 5766
5765: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
5766: LD_ADDR_VAR 0 2
5770: PUSH
5771: LD_INT 22
5773: PUSH
5774: LD_INT 1
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: PUSH
5781: LD_INT 30
5783: PUSH
5784: LD_INT 32
5786: PUSH
5787: EMPTY
5788: LIST
5789: LIST
5790: PUSH
5791: EMPTY
5792: LIST
5793: LIST
5794: PPUSH
5795: CALL_OW 69
5799: PUSH
5800: FOR_IN
5801: IFFALSE 5855
// begin PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
5803: LD_INT 1
5805: PPUSH
5806: LD_VAR 0 5
5810: PPUSH
5811: CALL 734 0 2
5815: PPUSH
5816: LD_VAR 0 2
5820: PPUSH
5821: CALL_OW 52
// PlaceWeaponTurret ( i , weapons [ Rand ( 1 , weapons ) ] ) ;
5825: LD_VAR 0 2
5829: PPUSH
5830: LD_VAR 0 6
5834: PUSH
5835: LD_INT 1
5837: PPUSH
5838: LD_VAR 0 6
5842: PPUSH
5843: CALL_OW 12
5847: ARRAY
5848: PPUSH
5849: CALL_OW 431
// end ;
5853: GO 5800
5855: POP
5856: POP
// sol := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , class_soldier ] , [ class_sniper ] ] ] ) ;
5857: LD_ADDR_VAR 0 7
5861: PUSH
5862: LD_INT 22
5864: PUSH
5865: LD_INT 1
5867: PUSH
5868: EMPTY
5869: LIST
5870: LIST
5871: PUSH
5872: LD_INT 2
5874: PUSH
5875: LD_INT 25
5877: PUSH
5878: LD_INT 1
5880: PUSH
5881: EMPTY
5882: LIST
5883: LIST
5884: PUSH
5885: LD_INT 5
5887: PUSH
5888: EMPTY
5889: LIST
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: LIST
5895: PUSH
5896: EMPTY
5897: LIST
5898: LIST
5899: PPUSH
5900: CALL_OW 69
5904: ST_TO_ADDR
// for i = 1 to sol do
5905: LD_ADDR_VAR 0 2
5909: PUSH
5910: DOUBLE
5911: LD_INT 1
5913: DEC
5914: ST_TO_ADDR
5915: LD_VAR 0 7
5919: PUSH
5920: FOR_TO
5921: IFFALSE 5943
// SetTag ( sol [ i ] , 1 ) ;
5923: LD_VAR 0 7
5927: PUSH
5928: LD_VAR 0 2
5932: ARRAY
5933: PPUSH
5934: LD_INT 1
5936: PPUSH
5937: CALL_OW 109
5941: GO 5920
5943: POP
5944: POP
// for i = 1 to 3 do
5945: LD_ADDR_VAR 0 2
5949: PUSH
5950: DOUBLE
5951: LD_INT 1
5953: DEC
5954: ST_TO_ADDR
5955: LD_INT 3
5957: PUSH
5958: FOR_TO
5959: IFFALSE 5983
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , am_ct ) ;
5961: LD_INT 3
5963: PPUSH
5964: LD_VAR 0 5
5968: PPUSH
5969: CALL 734 0 2
5973: PPUSH
5974: LD_INT 56
5976: PPUSH
5977: CALL_OW 52
5981: GO 5958
5983: POP
5984: POP
// for i = 1 to 6 do
5985: LD_ADDR_VAR 0 2
5989: PUSH
5990: DOUBLE
5991: LD_INT 1
5993: DEC
5994: ST_TO_ADDR
5995: LD_INT 6
5997: PUSH
5998: FOR_TO
5999: IFFALSE 6023
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , am_fac ) ;
6001: LD_INT 3
6003: PPUSH
6004: LD_VAR 0 5
6008: PPUSH
6009: CALL 734 0 2
6013: PPUSH
6014: LD_INT 26
6016: PPUSH
6017: CALL_OW 52
6021: GO 5998
6023: POP
6024: POP
// for i = 1 to 5 do
6025: LD_ADDR_VAR 0 2
6029: PUSH
6030: DOUBLE
6031: LD_INT 1
6033: DEC
6034: ST_TO_ADDR
6035: LD_INT 5
6037: PUSH
6038: FOR_TO
6039: IFFALSE 6066
// PlaceUnitArea ( CreateHumanWithClass ( 2 , skill ) , am_base , false ) ;
6041: LD_INT 2
6043: PPUSH
6044: LD_VAR 0 5
6048: PPUSH
6049: CALL 734 0 2
6053: PPUSH
6054: LD_INT 7
6056: PPUSH
6057: LD_INT 0
6059: PPUSH
6060: CALL_OW 49
6064: GO 6038
6066: POP
6067: POP
// for i = 1 to 3 do
6068: LD_ADDR_VAR 0 2
6072: PUSH
6073: DOUBLE
6074: LD_INT 1
6076: DEC
6077: ST_TO_ADDR
6078: LD_INT 3
6080: PUSH
6081: FOR_TO
6082: IFFALSE 6106
// PlaceHumanInUnit ( CreateHumanWithClass ( 4 , skill ) , am_lab ) ;
6084: LD_INT 4
6086: PPUSH
6087: LD_VAR 0 5
6091: PPUSH
6092: CALL 734 0 2
6096: PPUSH
6097: LD_INT 46
6099: PPUSH
6100: CALL_OW 52
6104: GO 6081
6106: POP
6107: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) do
6108: LD_ADDR_VAR 0 2
6112: PUSH
6113: LD_INT 22
6115: PUSH
6116: LD_INT 1
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PUSH
6123: LD_INT 30
6125: PUSH
6126: LD_INT 5
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: PPUSH
6137: CALL_OW 69
6141: PUSH
6142: FOR_IN
6143: IFFALSE 6257
// begin PlaceHumanInUnit ( CreateHumanWithClass ( class_sniper , skill ) , i ) ;
6145: LD_INT 5
6147: PPUSH
6148: LD_VAR 0 5
6152: PPUSH
6153: CALL 734 0 2
6157: PPUSH
6158: LD_VAR 0 2
6162: PPUSH
6163: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( class_sniper , skill ) , i ) ;
6167: LD_INT 5
6169: PPUSH
6170: LD_VAR 0 5
6174: PPUSH
6175: CALL 734 0 2
6179: PPUSH
6180: LD_VAR 0 2
6184: PPUSH
6185: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6189: LD_INT 1
6191: PPUSH
6192: LD_VAR 0 5
6196: PPUSH
6197: CALL 734 0 2
6201: PPUSH
6202: LD_VAR 0 2
6206: PPUSH
6207: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6211: LD_INT 1
6213: PPUSH
6214: LD_VAR 0 5
6218: PPUSH
6219: CALL 734 0 2
6223: PPUSH
6224: LD_VAR 0 2
6228: PPUSH
6229: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6233: LD_INT 1
6235: PPUSH
6236: LD_VAR 0 5
6240: PPUSH
6241: CALL 734 0 2
6245: PPUSH
6246: LD_VAR 0 2
6250: PPUSH
6251: CALL_OW 52
// end ;
6255: GO 6142
6257: POP
6258: POP
// if dif > 1 then
6259: LD_EXP 1
6263: PUSH
6264: LD_INT 1
6266: GREATER
6267: IFFALSE 6340
// for i = 1 to ( dif - 1 ) do
6269: LD_ADDR_VAR 0 2
6273: PUSH
6274: DOUBLE
6275: LD_INT 1
6277: DEC
6278: ST_TO_ADDR
6279: LD_EXP 1
6283: PUSH
6284: LD_INT 1
6286: MINUS
6287: PUSH
6288: FOR_TO
6289: IFFALSE 6338
// begin patrol := patrol ^ CreateHumanWithClass ( 1 , skill ) ;
6291: LD_ADDR_EXP 17
6295: PUSH
6296: LD_EXP 17
6300: PUSH
6301: LD_INT 1
6303: PPUSH
6304: LD_VAR 0 5
6308: PPUSH
6309: CALL 734 0 2
6313: ADD
6314: ST_TO_ADDR
// PlaceUnitArea ( patrol [ i ] , am_west_spawn , false ) ;
6315: LD_EXP 17
6319: PUSH
6320: LD_VAR 0 2
6324: ARRAY
6325: PPUSH
6326: LD_INT 3
6328: PPUSH
6329: LD_INT 0
6331: PPUSH
6332: CALL_OW 49
// end ;
6336: GO 6288
6338: POP
6339: POP
// game_started := true ;
6340: LD_ADDR_EXP 10
6344: PUSH
6345: LD_INT 1
6347: ST_TO_ADDR
// ComConstruct ( am_fac , us_medium_tracked , engine_solar , control_remote , us_crane ) ;
6348: LD_INT 26
6350: PPUSH
6351: LD_INT 3
6353: PPUSH
6354: LD_INT 2
6356: PPUSH
6357: LD_INT 2
6359: PPUSH
6360: LD_INT 13
6362: PPUSH
6363: CALL_OW 125
// while ( contact_am = false ) do
6367: LD_EXP 16
6371: PUSH
6372: LD_INT 0
6374: EQUAL
6375: IFFALSE 6386
// begin Wait ( 0 0$01 ) ;
6377: LD_INT 35
6379: PPUSH
6380: CALL_OW 67
// end ;
6384: GO 6367
// Wait ( [ 4 4$00 , 3 3$00 , 2 2$30 ] [ dif ] ) ;
6386: LD_INT 8400
6388: PUSH
6389: LD_INT 6300
6391: PUSH
6392: LD_INT 5250
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: LIST
6399: PUSH
6400: LD_EXP 1
6404: ARRAY
6405: PPUSH
6406: CALL_OW 67
// case dif of 1 :
6410: LD_EXP 1
6414: PUSH
6415: LD_INT 1
6417: DOUBLE
6418: EQUAL
6419: IFTRUE 6423
6421: GO 6598
6423: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_machine_gun , us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 4 ) ] ) ;
6424: LD_INT 26
6426: PPUSH
6427: LD_INT 3
6429: PPUSH
6430: LD_INT 1
6432: PPUSH
6433: LD_INT 2
6435: PPUSH
6436: LD_INT 2
6438: PUSH
6439: LD_INT 4
6441: PUSH
6442: LD_INT 5
6444: PUSH
6445: LD_INT 5
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: LIST
6452: LIST
6453: PUSH
6454: LD_INT 1
6456: PPUSH
6457: LD_INT 4
6459: PPUSH
6460: CALL_OW 12
6464: ARRAY
6465: PPUSH
6466: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6470: LD_INT 26
6472: PPUSH
6473: LD_INT 3
6475: PPUSH
6476: LD_INT 1
6478: PPUSH
6479: LD_INT 2
6481: PPUSH
6482: LD_INT 4
6484: PUSH
6485: LD_INT 5
6487: PUSH
6488: LD_INT 5
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: LIST
6495: PUSH
6496: LD_INT 1
6498: PPUSH
6499: LD_INT 3
6501: PPUSH
6502: CALL_OW 12
6506: ARRAY
6507: PPUSH
6508: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6512: LD_INT 26
6514: PPUSH
6515: LD_INT 3
6517: PPUSH
6518: LD_INT 1
6520: PPUSH
6521: LD_INT 2
6523: PPUSH
6524: LD_INT 4
6526: PUSH
6527: LD_INT 5
6529: PUSH
6530: LD_INT 5
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: LIST
6537: PUSH
6538: LD_INT 1
6540: PPUSH
6541: LD_INT 3
6543: PPUSH
6544: CALL_OW 12
6548: ARRAY
6549: PPUSH
6550: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6554: LD_INT 26
6556: PPUSH
6557: LD_INT 3
6559: PPUSH
6560: LD_INT 1
6562: PPUSH
6563: LD_INT 2
6565: PPUSH
6566: LD_INT 4
6568: PUSH
6569: LD_INT 3
6571: PUSH
6572: LD_INT 5
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: LIST
6579: PUSH
6580: LD_INT 1
6582: PPUSH
6583: LD_INT 3
6585: PPUSH
6586: CALL_OW 12
6590: ARRAY
6591: PPUSH
6592: CALL_OW 185
// end ; 2 :
6596: GO 7125
6598: LD_INT 2
6600: DOUBLE
6601: EQUAL
6602: IFTRUE 6606
6604: GO 6819
6606: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6607: LD_INT 26
6609: PPUSH
6610: LD_INT 3
6612: PPUSH
6613: LD_INT 1
6615: PPUSH
6616: LD_INT 2
6618: PPUSH
6619: LD_INT 4
6621: PUSH
6622: LD_INT 5
6624: PUSH
6625: LD_INT 5
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: LIST
6632: PUSH
6633: LD_INT 1
6635: PPUSH
6636: LD_INT 3
6638: PPUSH
6639: CALL_OW 12
6643: ARRAY
6644: PPUSH
6645: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6649: LD_INT 26
6651: PPUSH
6652: LD_INT 3
6654: PPUSH
6655: LD_INT 1
6657: PPUSH
6658: LD_INT 2
6660: PPUSH
6661: LD_INT 4
6663: PUSH
6664: LD_INT 5
6666: PUSH
6667: LD_INT 5
6669: PUSH
6670: EMPTY
6671: LIST
6672: LIST
6673: LIST
6674: PUSH
6675: LD_INT 1
6677: PPUSH
6678: LD_INT 3
6680: PPUSH
6681: CALL_OW 12
6685: ARRAY
6686: PPUSH
6687: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6691: LD_INT 26
6693: PPUSH
6694: LD_INT 3
6696: PPUSH
6697: LD_INT 1
6699: PPUSH
6700: LD_INT 2
6702: PPUSH
6703: LD_INT 4
6705: PUSH
6706: LD_INT 3
6708: PUSH
6709: LD_INT 5
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: LIST
6716: PUSH
6717: LD_INT 1
6719: PPUSH
6720: LD_INT 3
6722: PPUSH
6723: CALL_OW 12
6727: ARRAY
6728: PPUSH
6729: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6733: LD_INT 26
6735: PPUSH
6736: LD_INT 4
6738: PPUSH
6739: LD_INT 1
6741: PPUSH
6742: LD_INT 2
6744: PPUSH
6745: LD_INT 4
6747: PUSH
6748: LD_INT 5
6750: PUSH
6751: LD_INT 6
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 1
6761: PPUSH
6762: LD_INT 3
6764: PPUSH
6765: CALL_OW 12
6769: ARRAY
6770: PPUSH
6771: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6775: LD_INT 26
6777: PPUSH
6778: LD_INT 4
6780: PPUSH
6781: LD_INT 1
6783: PPUSH
6784: LD_INT 2
6786: PPUSH
6787: LD_INT 4
6789: PUSH
6790: LD_INT 5
6792: PUSH
6793: LD_INT 6
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: LIST
6800: PUSH
6801: LD_INT 1
6803: PPUSH
6804: LD_INT 3
6806: PPUSH
6807: CALL_OW 12
6811: ARRAY
6812: PPUSH
6813: CALL_OW 185
// end ; 3 :
6817: GO 7125
6819: LD_INT 3
6821: DOUBLE
6822: EQUAL
6823: IFTRUE 6827
6825: GO 7124
6827: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6828: LD_INT 26
6830: PPUSH
6831: LD_INT 3
6833: PPUSH
6834: LD_INT 1
6836: PPUSH
6837: LD_INT 2
6839: PPUSH
6840: LD_INT 4
6842: PUSH
6843: LD_INT 5
6845: PUSH
6846: LD_INT 5
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: LIST
6853: PUSH
6854: LD_INT 1
6856: PPUSH
6857: LD_INT 3
6859: PPUSH
6860: CALL_OW 12
6864: ARRAY
6865: PPUSH
6866: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6870: LD_INT 26
6872: PPUSH
6873: LD_INT 3
6875: PPUSH
6876: LD_INT 1
6878: PPUSH
6879: LD_INT 2
6881: PPUSH
6882: LD_INT 4
6884: PUSH
6885: LD_INT 5
6887: PUSH
6888: LD_INT 5
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: LIST
6895: PUSH
6896: LD_INT 1
6898: PPUSH
6899: LD_INT 3
6901: PPUSH
6902: CALL_OW 12
6906: ARRAY
6907: PPUSH
6908: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6912: LD_INT 26
6914: PPUSH
6915: LD_INT 3
6917: PPUSH
6918: LD_INT 1
6920: PPUSH
6921: LD_INT 2
6923: PPUSH
6924: LD_INT 4
6926: PUSH
6927: LD_INT 5
6929: PUSH
6930: LD_INT 5
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: LIST
6937: PUSH
6938: LD_INT 1
6940: PPUSH
6941: LD_INT 3
6943: PPUSH
6944: CALL_OW 12
6948: ARRAY
6949: PPUSH
6950: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6954: LD_INT 26
6956: PPUSH
6957: LD_INT 3
6959: PPUSH
6960: LD_INT 1
6962: PPUSH
6963: LD_INT 2
6965: PPUSH
6966: LD_INT 4
6968: PUSH
6969: LD_INT 5
6971: PUSH
6972: LD_INT 5
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: LIST
6979: PUSH
6980: LD_INT 1
6982: PPUSH
6983: LD_INT 3
6985: PPUSH
6986: CALL_OW 12
6990: ARRAY
6991: PPUSH
6992: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6996: LD_INT 26
6998: PPUSH
6999: LD_INT 4
7001: PPUSH
7002: LD_INT 1
7004: PPUSH
7005: LD_INT 2
7007: PPUSH
7008: LD_INT 4
7010: PUSH
7011: LD_INT 5
7013: PUSH
7014: LD_INT 6
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: LIST
7021: PUSH
7022: LD_INT 1
7024: PPUSH
7025: LD_INT 3
7027: PPUSH
7028: CALL_OW 12
7032: ARRAY
7033: PPUSH
7034: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7038: LD_INT 26
7040: PPUSH
7041: LD_INT 4
7043: PPUSH
7044: LD_INT 1
7046: PPUSH
7047: LD_INT 2
7049: PPUSH
7050: LD_INT 4
7052: PUSH
7053: LD_INT 5
7055: PUSH
7056: LD_INT 6
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: LIST
7063: PUSH
7064: LD_INT 1
7066: PPUSH
7067: LD_INT 3
7069: PPUSH
7070: CALL_OW 12
7074: ARRAY
7075: PPUSH
7076: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7080: LD_INT 26
7082: PPUSH
7083: LD_INT 4
7085: PPUSH
7086: LD_INT 1
7088: PPUSH
7089: LD_INT 2
7091: PPUSH
7092: LD_INT 4
7094: PUSH
7095: LD_INT 5
7097: PUSH
7098: LD_INT 6
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: LIST
7105: PUSH
7106: LD_INT 1
7108: PPUSH
7109: LD_INT 3
7111: PPUSH
7112: CALL_OW 12
7116: ARRAY
7117: PPUSH
7118: CALL_OW 185
// end ; end ;
7122: GO 7125
7124: POP
// end ;
7125: LD_VAR 0 1
7129: RET
// every 0 0$01 do var i , filter ;
7130: GO 7132
7132: DISABLE
7133: LD_INT 0
7135: PPUSH
7136: PPUSH
// begin enable ;
7137: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
7138: LD_INT 22
7140: PUSH
7141: LD_INT 1
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PUSH
7148: LD_INT 25
7150: PUSH
7151: LD_INT 4
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PPUSH
7162: CALL_OW 69
7166: PUSH
7167: LD_INT 0
7169: GREATER
7170: IFFALSE 7179
// RaiseSailEvent ( 3 ) ;
7172: LD_INT 3
7174: PPUSH
7175: CALL_OW 427
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 0 then
7179: LD_INT 22
7181: PUSH
7182: LD_INT 1
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 21
7191: PUSH
7192: LD_INT 3
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: LD_INT 3
7201: PUSH
7202: LD_INT 24
7204: PUSH
7205: LD_INT 1000
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: LIST
7220: PPUSH
7221: CALL_OW 69
7225: PUSH
7226: LD_INT 0
7228: GREATER
7229: IFFALSE 7240
// RaiseSailEvent ( 1 ) else
7231: LD_INT 1
7233: PPUSH
7234: CALL_OW 427
7238: GO 7247
// RaiseSailEvent ( 2 ) ;
7240: LD_INT 2
7242: PPUSH
7243: CALL_OW 427
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) > 0 then
7247: LD_INT 22
7249: PUSH
7250: LD_INT 1
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PUSH
7257: LD_INT 30
7259: PUSH
7260: LD_INT 5
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: PPUSH
7271: CALL_OW 69
7275: PUSH
7276: LD_INT 0
7278: GREATER
7279: IFFALSE 7288
// RaiseSailEvent ( 4 ) ;
7281: LD_INT 4
7283: PPUSH
7284: CALL_OW 427
// if gamma_towers > 0 then
7288: LD_EXP 18
7292: PUSH
7293: LD_INT 0
7295: GREATER
7296: IFFALSE 7305
// RaiseSailEvent ( 5 ) ;
7298: LD_INT 5
7300: PPUSH
7301: CALL_OW 427
// end ;
7305: PPOPN 2
7307: END
// export new_veh ; every 9 9$00 do var chassis , weapon ;
7308: GO 7310
7310: DISABLE
7311: LD_INT 0
7313: PPUSH
7314: PPUSH
// begin enable ;
7315: ENABLE
// if new_veh > 0 then
7316: LD_EXP 19
7320: PUSH
7321: LD_INT 0
7323: GREATER
7324: IFFALSE 7511
// while ( new_veh > 0 ) do
7326: LD_EXP 19
7330: PUSH
7331: LD_INT 0
7333: GREATER
7334: IFFALSE 7511
// begin Wait ( 0 0$01 ) ;
7336: LD_INT 35
7338: PPUSH
7339: CALL_OW 67
// if BuildingStatus ( am_fac ) = bs_idle then
7343: LD_INT 26
7345: PPUSH
7346: CALL_OW 461
7350: PUSH
7351: LD_INT 2
7353: EQUAL
7354: IFFALSE 7509
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ Rand ( 1 , 4 ) ] ;
7356: LD_ADDR_VAR 0 1
7360: PUSH
7361: LD_INT 2
7363: PUSH
7364: LD_INT 3
7366: PUSH
7367: LD_INT 3
7369: PUSH
7370: LD_INT 4
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: PUSH
7379: LD_INT 1
7381: PPUSH
7382: LD_INT 4
7384: PPUSH
7385: CALL_OW 12
7389: ARRAY
7390: ST_TO_ADDR
// if chassis in [ us_medium_wheeled , us_medium_tracked ] then
7391: LD_VAR 0 1
7395: PUSH
7396: LD_INT 2
7398: PUSH
7399: LD_INT 3
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: IN
7406: IFFALSE 7441
// weapon := [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ Rand ( 1 , 3 ) ] else
7408: LD_ADDR_VAR 0 2
7412: PUSH
7413: LD_INT 4
7415: PUSH
7416: LD_INT 5
7418: PUSH
7419: LD_INT 7
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: LIST
7426: PUSH
7427: LD_INT 1
7429: PPUSH
7430: LD_INT 3
7432: PPUSH
7433: CALL_OW 12
7437: ARRAY
7438: ST_TO_ADDR
7439: GO 7472
// weapon := [ us_double_gun , us_rocket_launcher , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ;
7441: LD_ADDR_VAR 0 2
7445: PUSH
7446: LD_INT 5
7448: PUSH
7449: LD_INT 7
7451: PUSH
7452: LD_INT 6
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: LIST
7459: PUSH
7460: LD_INT 1
7462: PPUSH
7463: LD_INT 3
7465: PPUSH
7466: CALL_OW 12
7470: ARRAY
7471: ST_TO_ADDR
// ComConstruct ( am_fac , chassis , engine_combustion , control_remote , weapon ) ;
7472: LD_INT 26
7474: PPUSH
7475: LD_VAR 0 1
7479: PPUSH
7480: LD_INT 1
7482: PPUSH
7483: LD_INT 2
7485: PPUSH
7486: LD_VAR 0 2
7490: PPUSH
7491: CALL_OW 125
// new_veh := new_veh - 1 ;
7495: LD_ADDR_EXP 19
7499: PUSH
7500: LD_EXP 19
7504: PUSH
7505: LD_INT 1
7507: MINUS
7508: ST_TO_ADDR
// end ; end ;
7509: GO 7326
// end ;
7511: PPOPN 2
7513: END
// every 0 0$01 do var v , filter , am_cmeh ;
7514: GO 7516
7516: DISABLE
7517: LD_INT 0
7519: PPUSH
7520: PPUSH
7521: PPUSH
// begin enable ;
7522: ENABLE
// am_cmeh := UnitsInside ( am_ct ) ;
7523: LD_ADDR_VAR 0 3
7527: PUSH
7528: LD_INT 56
7530: PPUSH
7531: CALL_OW 313
7535: ST_TO_ADDR
// filter = FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] ] ] ) ;
7536: LD_ADDR_VAR 0 2
7540: PUSH
7541: LD_INT 22
7543: PUSH
7544: LD_INT 1
7546: PUSH
7547: EMPTY
7548: LIST
7549: LIST
7550: PUSH
7551: LD_INT 33
7553: PUSH
7554: LD_INT 2
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: PUSH
7561: LD_INT 50
7563: PUSH
7564: EMPTY
7565: LIST
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: LIST
7571: PUSH
7572: EMPTY
7573: LIST
7574: PPUSH
7575: CALL_OW 69
7579: ST_TO_ADDR
// if filter > 0 then
7580: LD_VAR 0 2
7584: PUSH
7585: LD_INT 0
7587: GREATER
7588: IFFALSE 7656
// begin for v in filter do
7590: LD_ADDR_VAR 0 1
7594: PUSH
7595: LD_VAR 0 2
7599: PUSH
7600: FOR_IN
7601: IFFALSE 7654
// begin if not IsControledBy ( v ) and IsOk ( v ) then
7603: LD_VAR 0 1
7607: PPUSH
7608: CALL_OW 312
7612: NOT
7613: PUSH
7614: LD_VAR 0 1
7618: PPUSH
7619: CALL_OW 302
7623: AND
7624: IFFALSE 7652
// ComLinkTo ( v , am_cmeh [ Rand ( 1 , 3 ) ] ) ;
7626: LD_VAR 0 1
7630: PPUSH
7631: LD_VAR 0 3
7635: PUSH
7636: LD_INT 1
7638: PPUSH
7639: LD_INT 3
7641: PPUSH
7642: CALL_OW 12
7646: ARRAY
7647: PPUSH
7648: CALL_OW 135
// end ;
7652: GO 7600
7654: POP
7655: POP
// end ; end ;
7656: PPOPN 3
7658: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) = [ 4 , 5 , 7 ] [ dif ] and BuildingStatus ( am_fac ) = bs_idle do var i , un , enemy ;
7659: LD_INT 33
7661: PUSH
7662: LD_INT 2
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: PUSH
7669: LD_INT 3
7671: PUSH
7672: LD_INT 34
7674: PUSH
7675: LD_INT 13
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: PPUSH
7690: CALL_OW 69
7694: PUSH
7695: LD_INT 4
7697: PUSH
7698: LD_INT 5
7700: PUSH
7701: LD_INT 7
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: LIST
7708: PUSH
7709: LD_EXP 1
7713: ARRAY
7714: EQUAL
7715: PUSH
7716: LD_INT 26
7718: PPUSH
7719: CALL_OW 461
7723: PUSH
7724: LD_INT 2
7726: EQUAL
7727: AND
7728: IFFALSE 7939
7730: GO 7732
7732: DISABLE
7733: LD_INT 0
7735: PPUSH
7736: PPUSH
7737: PPUSH
// begin enable ;
7738: ENABLE
// if Sikorski_Ar then
7739: LD_EXP 12
7743: IFFALSE 7820
// SForce := FilterAllUnits ( [ [ f_or , [ f_side , 4 ] , [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ] ] ) else
7745: LD_ADDR_EXP 11
7749: PUSH
7750: LD_INT 2
7752: PUSH
7753: LD_INT 22
7755: PUSH
7756: LD_INT 4
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: PUSH
7763: LD_INT 22
7765: PUSH
7766: LD_INT 1
7768: PUSH
7769: EMPTY
7770: LIST
7771: LIST
7772: PUSH
7773: LD_INT 33
7775: PUSH
7776: LD_INT 2
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: PUSH
7783: LD_INT 3
7785: PUSH
7786: LD_INT 34
7788: PUSH
7789: LD_INT 13
7791: PUSH
7792: EMPTY
7793: LIST
7794: LIST
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: PUSH
7800: EMPTY
7801: LIST
7802: LIST
7803: LIST
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: LIST
7809: PUSH
7810: EMPTY
7811: LIST
7812: PPUSH
7813: CALL_OW 69
7817: ST_TO_ADDR
7818: GO 7861
// SForce := FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) ;
7820: LD_ADDR_EXP 11
7824: PUSH
7825: LD_INT 33
7827: PUSH
7828: LD_INT 2
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: PUSH
7835: LD_INT 3
7837: PUSH
7838: LD_INT 34
7840: PUSH
7841: LD_INT 13
7843: PUSH
7844: EMPTY
7845: LIST
7846: LIST
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: PUSH
7852: EMPTY
7853: LIST
7854: LIST
7855: PPUSH
7856: CALL_OW 69
7860: ST_TO_ADDR
// repeat begin for un in SForce do
7861: LD_ADDR_VAR 0 2
7865: PUSH
7866: LD_EXP 11
7870: PUSH
7871: FOR_IN
7872: IFFALSE 7927
// begin enemy := FilterAllUnits ( [ f_side , 3 ] ) ;
7874: LD_ADDR_VAR 0 3
7878: PUSH
7879: LD_INT 22
7881: PUSH
7882: LD_INT 3
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: PPUSH
7889: CALL_OW 69
7893: ST_TO_ADDR
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
7894: LD_VAR 0 2
7898: PPUSH
7899: LD_VAR 0 3
7903: PPUSH
7904: LD_VAR 0 2
7908: PPUSH
7909: CALL_OW 74
7913: PPUSH
7914: CALL_OW 115
// Wait ( 0 0$01 ) ;
7918: LD_INT 35
7920: PPUSH
7921: CALL_OW 67
// end ;
7925: GO 7871
7927: POP
7928: POP
// end until SForce = 0 ;
7929: LD_EXP 11
7933: PUSH
7934: LD_INT 0
7936: EQUAL
7937: IFFALSE 7861
// end ;
7939: PPOPN 3
7941: END
// export function NewForce ( num ) ; var i , filter , veh , tmp ; begin
7942: LD_INT 0
7944: PPUSH
7945: PPUSH
7946: PPUSH
7947: PPUSH
7948: PPUSH
// tmp := FilterUnitsInArea ( spawnArea , [ ] ) ;
7949: LD_ADDR_VAR 0 6
7953: PUSH
7954: LD_INT 14
7956: PPUSH
7957: EMPTY
7958: PPUSH
7959: CALL_OW 70
7963: ST_TO_ADDR
// if tmp then
7964: LD_VAR 0 6
7968: IFFALSE 8002
// for i in tmp do
7970: LD_ADDR_VAR 0 3
7974: PUSH
7975: LD_VAR 0 6
7979: PUSH
7980: FOR_IN
7981: IFFALSE 8000
// ComMoveXY ( i , 42 , 23 ) ;
7983: LD_VAR 0 3
7987: PPUSH
7988: LD_INT 42
7990: PPUSH
7991: LD_INT 23
7993: PPUSH
7994: CALL_OW 111
7998: GO 7980
8000: POP
8001: POP
// EraseResourceArea ( spawnArea , mat_cans ) ;
8002: LD_INT 14
8004: PPUSH
8005: LD_INT 1
8007: PPUSH
8008: CALL_OW 286
// uc_side := 4 ;
8012: LD_ADDR_OWVAR 20
8016: PUSH
8017: LD_INT 4
8019: ST_TO_ADDR
// uc_nation := 1 ;
8020: LD_ADDR_OWVAR 21
8024: PUSH
8025: LD_INT 1
8027: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
8028: LD_ADDR_OWVAR 37
8032: PUSH
8033: LD_INT 4
8035: ST_TO_ADDR
// vc_control := control_manual ;
8036: LD_ADDR_OWVAR 38
8040: PUSH
8041: LD_INT 1
8043: ST_TO_ADDR
// vc_engine := engine_combustion ;
8044: LD_ADDR_OWVAR 39
8048: PUSH
8049: LD_INT 1
8051: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ dif ] ;
8052: LD_ADDR_OWVAR 40
8056: PUSH
8057: LD_INT 4
8059: PUSH
8060: LD_INT 5
8062: PUSH
8063: LD_INT 7
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: LIST
8070: PUSH
8071: LD_EXP 1
8075: ARRAY
8076: ST_TO_ADDR
// veh := CreateVehicle ;
8077: LD_ADDR_VAR 0 5
8081: PUSH
8082: CALL_OW 45
8086: ST_TO_ADDR
// PlaceUnitArea ( veh , am_main_spawn , false ) ;
8087: LD_VAR 0 5
8091: PPUSH
8092: LD_INT 2
8094: PPUSH
8095: LD_INT 0
8097: PPUSH
8098: CALL_OW 49
// PlaceHumanInUnit ( sikorski , veh ) ;
8102: LD_EXP 9
8106: PPUSH
8107: LD_VAR 0 5
8111: PPUSH
8112: CALL_OW 52
// SetMark ( veh , 1 ) ;
8116: LD_VAR 0 5
8120: PPUSH
8121: LD_INT 1
8123: PPUSH
8124: CALL_OW 242
// while ( num > 0 ) do
8128: LD_VAR 0 1
8132: PUSH
8133: LD_INT 0
8135: GREATER
8136: IFFALSE 8303
// begin CreateVehicleWithDriver ( [ us_medium_tracked , us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ Rand ( dif , 4 ) ] , engine_combustion , [ us_gatling_gun , us_double_gun , us_double_gun , us_rocket_launcher ] [ Rand ( 1 , dif + 1 ) ] , am_sik , 2 , [ 5 , 6 , 7 ] [ dif ] ) ;
8138: LD_INT 3
8140: PUSH
8141: LD_INT 3
8143: PUSH
8144: LD_INT 3
8146: PUSH
8147: LD_INT 4
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: PUSH
8156: LD_EXP 1
8160: PPUSH
8161: LD_INT 4
8163: PPUSH
8164: CALL_OW 12
8168: ARRAY
8169: PPUSH
8170: LD_INT 1
8172: PPUSH
8173: LD_INT 4
8175: PUSH
8176: LD_INT 5
8178: PUSH
8179: LD_INT 5
8181: PUSH
8182: LD_INT 7
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: PUSH
8191: LD_INT 1
8193: PPUSH
8194: LD_EXP 1
8198: PUSH
8199: LD_INT 1
8201: PLUS
8202: PPUSH
8203: CALL_OW 12
8207: ARRAY
8208: PPUSH
8209: LD_INT 11
8211: PPUSH
8212: LD_INT 2
8214: PPUSH
8215: LD_INT 5
8217: PUSH
8218: LD_INT 6
8220: PUSH
8221: LD_INT 7
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: LIST
8228: PUSH
8229: LD_EXP 1
8233: ARRAY
8234: PPUSH
8235: CALL 1297 0 6
// filter := FilterAllUnits ( [ f_side , 4 ] ) ;
8239: LD_ADDR_VAR 0 4
8243: PUSH
8244: LD_INT 22
8246: PUSH
8247: LD_INT 4
8249: PUSH
8250: EMPTY
8251: LIST
8252: LIST
8253: PPUSH
8254: CALL_OW 69
8258: ST_TO_ADDR
// ComMoveXY ( filter [ filter ] , 36 , 18 ) ;
8259: LD_VAR 0 4
8263: PUSH
8264: LD_VAR 0 4
8268: ARRAY
8269: PPUSH
8270: LD_INT 36
8272: PPUSH
8273: LD_INT 18
8275: PPUSH
8276: CALL_OW 111
// Wait ( 0 0$02 ) ;
8280: LD_INT 70
8282: PPUSH
8283: CALL_OW 67
// num := num - 1 ;
8287: LD_ADDR_VAR 0 1
8291: PUSH
8292: LD_VAR 0 1
8296: PUSH
8297: LD_INT 1
8299: MINUS
8300: ST_TO_ADDR
// end ;
8301: GO 8128
// end ;
8303: LD_VAR 0 2
8307: RET
// every 0 0$03 trigger patrol > 0 do var i ;
8308: LD_EXP 17
8312: PUSH
8313: LD_INT 0
8315: GREATER
8316: IFFALSE 8585
8318: GO 8320
8320: DISABLE
8321: LD_INT 0
8323: PPUSH
// begin enable ;
8324: ENABLE
// for i = 1 to patrol do
8325: LD_ADDR_VAR 0 1
8329: PUSH
8330: DOUBLE
8331: LD_INT 1
8333: DEC
8334: ST_TO_ADDR
8335: LD_EXP 17
8339: PUSH
8340: FOR_TO
8341: IFFALSE 8583
// begin if patrol [ i ] and IsLive ( patrol [ i ] ) and not HasTask ( patrol [ i ] ) then
8343: LD_EXP 17
8347: PUSH
8348: LD_VAR 0 1
8352: ARRAY
8353: PUSH
8354: LD_EXP 17
8358: PUSH
8359: LD_VAR 0 1
8363: ARRAY
8364: PPUSH
8365: CALL_OW 300
8369: AND
8370: PUSH
8371: LD_EXP 17
8375: PUSH
8376: LD_VAR 0 1
8380: ARRAY
8381: PPUSH
8382: CALL_OW 314
8386: NOT
8387: AND
8388: IFFALSE 8538
// case i of 1 :
8390: LD_VAR 0 1
8394: PUSH
8395: LD_INT 1
8397: DOUBLE
8398: EQUAL
8399: IFTRUE 8403
8401: GO 8466
8403: POP
// begin ComMoveXY ( patrol [ i ] , 53 , 91 ) ;
8404: LD_EXP 17
8408: PUSH
8409: LD_VAR 0 1
8413: ARRAY
8414: PPUSH
8415: LD_INT 53
8417: PPUSH
8418: LD_INT 91
8420: PPUSH
8421: CALL_OW 111
// AddComWait ( patrol [ i ] , 0 0$07 ) ;
8425: LD_EXP 17
8429: PUSH
8430: LD_VAR 0 1
8434: ARRAY
8435: PPUSH
8436: LD_INT 245
8438: PPUSH
8439: CALL_OW 202
// AddComMoveXY ( patrol [ i ] , 24 , 26 ) ;
8443: LD_EXP 17
8447: PUSH
8448: LD_VAR 0 1
8452: ARRAY
8453: PPUSH
8454: LD_INT 24
8456: PPUSH
8457: LD_INT 26
8459: PPUSH
8460: CALL_OW 171
// end ; 2 :
8464: GO 8538
8466: LD_INT 2
8468: DOUBLE
8469: EQUAL
8470: IFTRUE 8474
8472: GO 8537
8474: POP
// begin ComMoveXY ( patrol [ i ] , 83 , 57 ) ;
8475: LD_EXP 17
8479: PUSH
8480: LD_VAR 0 1
8484: ARRAY
8485: PPUSH
8486: LD_INT 83
8488: PPUSH
8489: LD_INT 57
8491: PPUSH
8492: CALL_OW 111
// AddComWait ( patrol [ i ] , 0 0$07 ) ;
8496: LD_EXP 17
8500: PUSH
8501: LD_VAR 0 1
8505: ARRAY
8506: PPUSH
8507: LD_INT 245
8509: PPUSH
8510: CALL_OW 202
// AddComMoveXY ( patrol [ i ] , 47 , 53 ) ;
8514: LD_EXP 17
8518: PUSH
8519: LD_VAR 0 1
8523: ARRAY
8524: PPUSH
8525: LD_INT 47
8527: PPUSH
8528: LD_INT 53
8530: PPUSH
8531: CALL_OW 171
// end ; end ;
8535: GO 8538
8537: POP
// if GetLives ( patrol [ i ] ) < 1000 then
8538: LD_EXP 17
8542: PUSH
8543: LD_VAR 0 1
8547: ARRAY
8548: PPUSH
8549: CALL_OW 256
8553: PUSH
8554: LD_INT 1000
8556: LESS
8557: IFFALSE 8581
// patrol := patrol diff patrol [ i ] ;
8559: LD_ADDR_EXP 17
8563: PUSH
8564: LD_EXP 17
8568: PUSH
8569: LD_EXP 17
8573: PUSH
8574: LD_VAR 0 1
8578: ARRAY
8579: DIFF
8580: ST_TO_ADDR
// end ;
8581: GO 8340
8583: POP
8584: POP
// end ;
8585: PPOPN 1
8587: END
// every 0 0$10 do
8588: GO 8590
8590: DISABLE
// begin Wait ( [ 20 20$00 , 18 18$00 , 16 16$00 ] [ dif ] ) ;
8591: LD_INT 42000
8593: PUSH
8594: LD_INT 37800
8596: PUSH
8597: LD_INT 33600
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: LIST
8604: PUSH
8605: LD_EXP 1
8609: ARRAY
8610: PPUSH
8611: CALL_OW 67
// if not contact_am then
8615: LD_EXP 16
8619: NOT
8620: IFFALSE 8630
// contact_am := true ;
8622: LD_ADDR_EXP 16
8626: PUSH
8627: LD_INT 1
8629: ST_TO_ADDR
// end ; end_of_file
8630: END
// export event_rocket , event_comp , comp_tested , sikorski_run ; export function Action ; begin
8631: LD_INT 0
8633: PPUSH
// comp_tested := false ;
8634: LD_ADDR_EXP 22
8638: PUSH
8639: LD_INT 0
8641: ST_TO_ADDR
// sikorski_run := false ;
8642: LD_ADDR_EXP 23
8646: PUSH
8647: LD_INT 0
8649: ST_TO_ADDR
// InGameOn ;
8650: CALL_OW 8
// CenterNowOnXY ( 5 , 4 ) ;
8654: LD_INT 5
8656: PPUSH
8657: LD_INT 4
8659: PPUSH
8660: CALL_OW 86
// wait ( 0 0$2 ) ;
8664: LD_INT 70
8666: PPUSH
8667: CALL_OW 67
// CenterOnUnits ( commander ) ;
8671: LD_EXP 3
8675: PPUSH
8676: CALL_OW 85
// wait ( 0 0$01 ) ;
8680: LD_INT 35
8682: PPUSH
8683: CALL_OW 67
// SayRadio ( popov , Dpop1 ) ;
8687: LD_EXP 2
8691: PPUSH
8692: LD_STRING Dpop1
8694: PPUSH
8695: CALL_OW 94
// Say ( commander , Dcomm1 ) ;
8699: LD_EXP 3
8703: PPUSH
8704: LD_STRING Dcomm1
8706: PPUSH
8707: CALL_OW 88
// SayRadio ( popov , Dpop2 ) ;
8711: LD_EXP 2
8715: PPUSH
8716: LD_STRING Dpop2
8718: PPUSH
8719: CALL_OW 94
// Say ( commander , Dcomm2 ) ;
8723: LD_EXP 3
8727: PPUSH
8728: LD_STRING Dcomm2
8730: PPUSH
8731: CALL_OW 88
// InGameOff ;
8735: CALL_OW 9
// ChangeMissionObjectives ( T1 ) ;
8739: LD_STRING T1
8741: PPUSH
8742: CALL_OW 337
// end ;
8746: LD_VAR 0 1
8750: RET
// every 0 0$01 trigger timer > 2 2$01 do
8751: LD_EXP 24
8755: PUSH
8756: LD_INT 4235
8758: GREATER
8759: IFFALSE 8776
8761: GO 8763
8763: DISABLE
// begin SayRadio ( kapral , DKap1 ) ;
8764: LD_EXP 5
8768: PPUSH
8769: LD_STRING DKap1
8771: PPUSH
8772: CALL_OW 94
// end ;
8776: END
// every 0 0$01 trigger timer > [ 22 22$00 , 25 25$00 , 30 30$00 ] [ dif ] do var i ;
8777: LD_EXP 24
8781: PUSH
8782: LD_INT 46200
8784: PUSH
8785: LD_INT 52500
8787: PUSH
8788: LD_INT 63000
8790: PUSH
8791: EMPTY
8792: LIST
8793: LIST
8794: LIST
8795: PUSH
8796: LD_EXP 1
8800: ARRAY
8801: GREATER
8802: IFFALSE 9169
8804: GO 8806
8806: DISABLE
8807: LD_INT 0
8809: PPUSH
// begin SayRadio ( kapral , DKap2 ) ;
8810: LD_EXP 5
8814: PPUSH
8815: LD_STRING DKap2
8817: PPUSH
8818: CALL_OW 94
// Wait ( 0 0$0.3 ) ;
8822: LD_INT 10
8824: PPUSH
8825: CALL_OW 67
// Say ( commander , Dcommk ) ;
8829: LD_EXP 3
8833: PPUSH
8834: LD_STRING Dcommk
8836: PPUSH
8837: CALL_OW 88
// Wait ( 0 0$44 ) ;
8841: LD_INT 1540
8843: PPUSH
8844: CALL_OW 67
// PlaceUnitArea ( kapral , am_west_spawn , false ) ;
8848: LD_EXP 5
8852: PPUSH
8853: LD_INT 3
8855: PPUSH
8856: LD_INT 0
8858: PPUSH
8859: CALL_OW 49
// CenterNowOnUnits ( kapral ) ;
8863: LD_EXP 5
8867: PPUSH
8868: CALL_OW 87
// Wait ( 0 0$10 ) ;
8872: LD_INT 350
8874: PPUSH
8875: CALL_OW 67
// NewForce ( [ 6 , 7 , 8 ] [ dif ] ) ;
8879: LD_INT 6
8881: PUSH
8882: LD_INT 7
8884: PUSH
8885: LD_INT 8
8887: PUSH
8888: EMPTY
8889: LIST
8890: LIST
8891: LIST
8892: PUSH
8893: LD_EXP 1
8897: ARRAY
8898: PPUSH
8899: CALL 7942 0 1
// Wait ( 2 2$00 ) ;
8903: LD_INT 4200
8905: PPUSH
8906: CALL_OW 67
// while ( FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) < 3 ) do
8910: LD_INT 33
8912: PUSH
8913: LD_INT 2
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PUSH
8920: LD_INT 3
8922: PUSH
8923: LD_INT 34
8925: PUSH
8926: LD_INT 13
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: PPUSH
8941: CALL_OW 69
8945: PUSH
8946: LD_INT 3
8948: LESS
8949: IFFALSE 8960
// Wait ( 0 0$01 ) ;
8951: LD_INT 35
8953: PPUSH
8954: CALL_OW 67
8958: GO 8910
// uc_side := 4 ;
8960: LD_ADDR_OWVAR 20
8964: PUSH
8965: LD_INT 4
8967: ST_TO_ADDR
// uc_nation := 1 ;
8968: LD_ADDR_OWVAR 21
8972: PUSH
8973: LD_INT 1
8975: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ dif ] do
8976: LD_ADDR_VAR 0 1
8980: PUSH
8981: DOUBLE
8982: LD_INT 1
8984: DEC
8985: ST_TO_ADDR
8986: LD_INT 4
8988: PUSH
8989: LD_INT 5
8991: PUSH
8992: LD_INT 6
8994: PUSH
8995: EMPTY
8996: LIST
8997: LIST
8998: LIST
8999: PUSH
9000: LD_EXP 1
9004: ARRAY
9005: PUSH
9006: FOR_TO
9007: IFFALSE 9049
// PlaceUnitArea ( CreateHumanWithClass ( 1 , [ 5 , 6 , 7 ] [ dif ] ) , am_east_spawn , false ) ;
9009: LD_INT 1
9011: PPUSH
9012: LD_INT 5
9014: PUSH
9015: LD_INT 6
9017: PUSH
9018: LD_INT 7
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: LIST
9025: PUSH
9026: LD_EXP 1
9030: ARRAY
9031: PPUSH
9032: CALL 734 0 2
9036: PPUSH
9037: LD_INT 4
9039: PPUSH
9040: LD_INT 0
9042: PPUSH
9043: CALL_OW 49
9047: GO 9006
9049: POP
9050: POP
// sikorski_ar := true ;
9051: LD_ADDR_EXP 12
9055: PUSH
9056: LD_INT 1
9058: ST_TO_ADDR
// SayRadio ( sikorski , DSik1 ) ;
9059: LD_EXP 9
9063: PPUSH
9064: LD_STRING DSik1
9066: PPUSH
9067: CALL_OW 94
// Wait ( 0 0$30 ) ;
9071: LD_INT 1050
9073: PPUSH
9074: CALL_OW 67
// uc_side := 4 ;
9078: LD_ADDR_OWVAR 20
9082: PUSH
9083: LD_INT 4
9085: ST_TO_ADDR
// uc_nation := 1 ;
9086: LD_ADDR_OWVAR 21
9090: PUSH
9091: LD_INT 1
9093: ST_TO_ADDR
// for i = 1 to [ 3 , 4 , 4 ] [ dif ] do
9094: LD_ADDR_VAR 0 1
9098: PUSH
9099: DOUBLE
9100: LD_INT 1
9102: DEC
9103: ST_TO_ADDR
9104: LD_INT 3
9106: PUSH
9107: LD_INT 4
9109: PUSH
9110: LD_INT 4
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: LIST
9117: PUSH
9118: LD_EXP 1
9122: ARRAY
9123: PUSH
9124: FOR_TO
9125: IFFALSE 9167
// PlaceUnitArea ( CreateHumanWithClass ( 1 , [ 5 , 6 , 7 ] [ dif ] ) , am_south_spawn , false ) ;
9127: LD_INT 1
9129: PPUSH
9130: LD_INT 5
9132: PUSH
9133: LD_INT 6
9135: PUSH
9136: LD_INT 7
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: LIST
9143: PUSH
9144: LD_EXP 1
9148: ARRAY
9149: PPUSH
9150: CALL 734 0 2
9154: PPUSH
9155: LD_INT 13
9157: PPUSH
9158: LD_INT 0
9160: PPUSH
9161: CALL_OW 49
9165: GO 9124
9167: POP
9168: POP
// end ;
9169: PPOPN 1
9171: END
// every 0 0$0.1 trigger GetLives ( sikorski ) < 650 do
9172: LD_EXP 9
9176: PPUSH
9177: CALL_OW 256
9181: PUSH
9182: LD_INT 650
9184: LESS
9185: IFFALSE 9267
9187: GO 9189
9189: DISABLE
// begin Say ( sikorski , DSik2 ) ;
9190: LD_EXP 9
9194: PPUSH
9195: LD_STRING DSik2
9197: PPUSH
9198: CALL_OW 88
// while ( IsLive ( sikorski ) ) do
9202: LD_EXP 9
9206: PPUSH
9207: CALL_OW 300
9211: IFFALSE 9267
// begin ComMoveToArea ( sikorski , am_main_spawn ) ;
9213: LD_EXP 9
9217: PPUSH
9218: LD_INT 2
9220: PPUSH
9221: CALL_OW 113
// Wait ( 0 0$01 ) ;
9225: LD_INT 35
9227: PPUSH
9228: CALL_OW 67
// if IsInArea ( sikorski , am_main_spawn ) then
9232: LD_EXP 9
9236: PPUSH
9237: LD_INT 2
9239: PPUSH
9240: CALL_OW 308
9244: IFFALSE 9265
// begin RemoveUnit ( sikorski ) ;
9246: LD_EXP 9
9250: PPUSH
9251: CALL_OW 64
// break ;
9255: GO 9267
// sikorski_run := true ;
9257: LD_ADDR_EXP 23
9261: PUSH
9262: LD_INT 1
9264: ST_TO_ADDR
// end ; end ;
9265: GO 9202
// end ;
9267: END
// every 0 0$0.1 trigger GetLives ( sikorski ) < 1000 do
9268: LD_EXP 9
9272: PPUSH
9273: CALL_OW 256
9277: PUSH
9278: LD_INT 1000
9280: LESS
9281: IFFALSE 9298
9283: GO 9285
9285: DISABLE
// Say ( sikorski , DSkik3 ) ; end_of_file
9286: LD_EXP 9
9290: PPUSH
9291: LD_STRING DSkik3
9293: PPUSH
9294: CALL_OW 88
9298: END
// every 1 1$45 + 0 0$15 do
9299: GO 9301
9301: DISABLE
// begin enable ;
9302: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
9303: LD_INT 1
9305: PPUSH
9306: LD_INT 5
9308: PPUSH
9309: CALL_OW 12
9313: PPUSH
9314: LD_INT 8
9316: PPUSH
9317: LD_INT 1
9319: PPUSH
9320: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$37 ) ) ;
9324: LD_INT 350
9326: PPUSH
9327: LD_INT 1295
9329: PPUSH
9330: CALL_OW 12
9334: PPUSH
9335: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
9339: LD_INT 1
9341: PPUSH
9342: LD_INT 5
9344: PPUSH
9345: CALL_OW 12
9349: PPUSH
9350: LD_INT 1
9352: PPUSH
9353: CALL_OW 57
// Wait ( Rand ( 0 0$10 , 0 0$30 ) ) ;
9357: LD_INT 350
9359: PPUSH
9360: LD_INT 1050
9362: PPUSH
9363: CALL_OW 12
9367: PPUSH
9368: CALL_OW 67
// if timer <= [ 12 12$00 , 11 11$00 , 10 10$00 ] [ dif ] then
9372: LD_EXP 24
9376: PUSH
9377: LD_INT 25200
9379: PUSH
9380: LD_INT 23100
9382: PUSH
9383: LD_INT 21000
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: LIST
9390: PUSH
9391: LD_EXP 1
9395: ARRAY
9396: LESSEQUAL
9397: IFFALSE 9420
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
9399: LD_INT 1
9401: PPUSH
9402: LD_INT 5
9404: PPUSH
9405: CALL_OW 12
9409: PPUSH
9410: LD_INT 8
9412: PPUSH
9413: LD_INT 1
9415: PPUSH
9416: CALL_OW 55
// end ;
9420: END
// export timer ; every 1 do
9421: GO 9423
9423: DISABLE
// timer := 0 0$00 ;
9424: LD_ADDR_EXP 24
9428: PUSH
9429: LD_INT 0
9431: ST_TO_ADDR
9432: END
// every 0 0$01 do
9433: GO 9435
9435: DISABLE
// begin enable ;
9436: ENABLE
// Display_Strings := [ #tick , timer ] ;
9437: LD_ADDR_OWVAR 47
9441: PUSH
9442: LD_STRING #tick
9444: PUSH
9445: LD_EXP 24
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: ST_TO_ADDR
// timer := timer + 0 0$01 ;
9454: LD_ADDR_EXP 24
9458: PUSH
9459: LD_EXP 24
9463: PUSH
9464: LD_INT 35
9466: PLUS
9467: ST_TO_ADDR
// end ; end_of_file end_of_file
9468: END
// every 0 0$1 do
9469: GO 9471
9471: DISABLE
// begin enable ;
9472: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
9473: LD_STRING updateTimer(
9475: PUSH
9476: LD_OWVAR 1
9480: STR
9481: PUSH
9482: LD_STRING );
9484: STR
9485: PPUSH
9486: CALL_OW 559
// end ;
9490: END
// export function SOS_MapStart ( ) ; begin
9491: LD_INT 0
9493: PPUSH
// if streamModeActive then
9494: LD_EXP 25
9498: IFFALSE 9507
// DefineStreamItems ( true ) ;
9500: LD_INT 1
9502: PPUSH
9503: CALL 11161 0 1
// UpdateFactoryWaypoints ( ) ;
9507: CALL 24022 0 0
// UpdateWarehouseGatheringPoints ( ) ;
9511: CALL 24279 0 0
// end ;
9515: LD_VAR 0 1
9519: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9520: LD_INT 0
9522: PPUSH
// if p2 = 100 then
9523: LD_VAR 0 2
9527: PUSH
9528: LD_INT 100
9530: EQUAL
9531: IFFALSE 10534
// begin if not StreamModeActive then
9533: LD_EXP 25
9537: NOT
9538: IFFALSE 9548
// StreamModeActive := true ;
9540: LD_ADDR_EXP 25
9544: PUSH
9545: LD_INT 1
9547: ST_TO_ADDR
// if p3 = 0 then
9548: LD_VAR 0 3
9552: PUSH
9553: LD_INT 0
9555: EQUAL
9556: IFFALSE 9562
// InitStreamMode ;
9558: CALL 10697 0 0
// if p3 = 1 then
9562: LD_VAR 0 3
9566: PUSH
9567: LD_INT 1
9569: EQUAL
9570: IFFALSE 9580
// sRocket := true ;
9572: LD_ADDR_EXP 30
9576: PUSH
9577: LD_INT 1
9579: ST_TO_ADDR
// if p3 = 2 then
9580: LD_VAR 0 3
9584: PUSH
9585: LD_INT 2
9587: EQUAL
9588: IFFALSE 9598
// sSpeed := true ;
9590: LD_ADDR_EXP 29
9594: PUSH
9595: LD_INT 1
9597: ST_TO_ADDR
// if p3 = 3 then
9598: LD_VAR 0 3
9602: PUSH
9603: LD_INT 3
9605: EQUAL
9606: IFFALSE 9616
// sEngine := true ;
9608: LD_ADDR_EXP 31
9612: PUSH
9613: LD_INT 1
9615: ST_TO_ADDR
// if p3 = 4 then
9616: LD_VAR 0 3
9620: PUSH
9621: LD_INT 4
9623: EQUAL
9624: IFFALSE 9634
// sSpec := true ;
9626: LD_ADDR_EXP 28
9630: PUSH
9631: LD_INT 1
9633: ST_TO_ADDR
// if p3 = 5 then
9634: LD_VAR 0 3
9638: PUSH
9639: LD_INT 5
9641: EQUAL
9642: IFFALSE 9652
// sLevel := true ;
9644: LD_ADDR_EXP 32
9648: PUSH
9649: LD_INT 1
9651: ST_TO_ADDR
// if p3 = 6 then
9652: LD_VAR 0 3
9656: PUSH
9657: LD_INT 6
9659: EQUAL
9660: IFFALSE 9670
// sArmoury := true ;
9662: LD_ADDR_EXP 33
9666: PUSH
9667: LD_INT 1
9669: ST_TO_ADDR
// if p3 = 7 then
9670: LD_VAR 0 3
9674: PUSH
9675: LD_INT 7
9677: EQUAL
9678: IFFALSE 9688
// sRadar := true ;
9680: LD_ADDR_EXP 34
9684: PUSH
9685: LD_INT 1
9687: ST_TO_ADDR
// if p3 = 8 then
9688: LD_VAR 0 3
9692: PUSH
9693: LD_INT 8
9695: EQUAL
9696: IFFALSE 9706
// sBunker := true ;
9698: LD_ADDR_EXP 35
9702: PUSH
9703: LD_INT 1
9705: ST_TO_ADDR
// if p3 = 9 then
9706: LD_VAR 0 3
9710: PUSH
9711: LD_INT 9
9713: EQUAL
9714: IFFALSE 9724
// sHack := true ;
9716: LD_ADDR_EXP 36
9720: PUSH
9721: LD_INT 1
9723: ST_TO_ADDR
// if p3 = 10 then
9724: LD_VAR 0 3
9728: PUSH
9729: LD_INT 10
9731: EQUAL
9732: IFFALSE 9742
// sFire := true ;
9734: LD_ADDR_EXP 37
9738: PUSH
9739: LD_INT 1
9741: ST_TO_ADDR
// if p3 = 11 then
9742: LD_VAR 0 3
9746: PUSH
9747: LD_INT 11
9749: EQUAL
9750: IFFALSE 9760
// sRefresh := true ;
9752: LD_ADDR_EXP 38
9756: PUSH
9757: LD_INT 1
9759: ST_TO_ADDR
// if p3 = 12 then
9760: LD_VAR 0 3
9764: PUSH
9765: LD_INT 12
9767: EQUAL
9768: IFFALSE 9778
// sExp := true ;
9770: LD_ADDR_EXP 39
9774: PUSH
9775: LD_INT 1
9777: ST_TO_ADDR
// if p3 = 13 then
9778: LD_VAR 0 3
9782: PUSH
9783: LD_INT 13
9785: EQUAL
9786: IFFALSE 9796
// sDepot := true ;
9788: LD_ADDR_EXP 40
9792: PUSH
9793: LD_INT 1
9795: ST_TO_ADDR
// if p3 = 14 then
9796: LD_VAR 0 3
9800: PUSH
9801: LD_INT 14
9803: EQUAL
9804: IFFALSE 9814
// sFlag := true ;
9806: LD_ADDR_EXP 41
9810: PUSH
9811: LD_INT 1
9813: ST_TO_ADDR
// if p3 = 15 then
9814: LD_VAR 0 3
9818: PUSH
9819: LD_INT 15
9821: EQUAL
9822: IFFALSE 9832
// sKamikadze := true ;
9824: LD_ADDR_EXP 49
9828: PUSH
9829: LD_INT 1
9831: ST_TO_ADDR
// if p3 = 16 then
9832: LD_VAR 0 3
9836: PUSH
9837: LD_INT 16
9839: EQUAL
9840: IFFALSE 9850
// sTroll := true ;
9842: LD_ADDR_EXP 50
9846: PUSH
9847: LD_INT 1
9849: ST_TO_ADDR
// if p3 = 17 then
9850: LD_VAR 0 3
9854: PUSH
9855: LD_INT 17
9857: EQUAL
9858: IFFALSE 9868
// sSlow := true ;
9860: LD_ADDR_EXP 51
9864: PUSH
9865: LD_INT 1
9867: ST_TO_ADDR
// if p3 = 18 then
9868: LD_VAR 0 3
9872: PUSH
9873: LD_INT 18
9875: EQUAL
9876: IFFALSE 9886
// sLack := true ;
9878: LD_ADDR_EXP 52
9882: PUSH
9883: LD_INT 1
9885: ST_TO_ADDR
// if p3 = 19 then
9886: LD_VAR 0 3
9890: PUSH
9891: LD_INT 19
9893: EQUAL
9894: IFFALSE 9904
// sTank := true ;
9896: LD_ADDR_EXP 54
9900: PUSH
9901: LD_INT 1
9903: ST_TO_ADDR
// if p3 = 20 then
9904: LD_VAR 0 3
9908: PUSH
9909: LD_INT 20
9911: EQUAL
9912: IFFALSE 9922
// sRemote := true ;
9914: LD_ADDR_EXP 55
9918: PUSH
9919: LD_INT 1
9921: ST_TO_ADDR
// if p3 = 21 then
9922: LD_VAR 0 3
9926: PUSH
9927: LD_INT 21
9929: EQUAL
9930: IFFALSE 9940
// sPowell := true ;
9932: LD_ADDR_EXP 56
9936: PUSH
9937: LD_INT 1
9939: ST_TO_ADDR
// if p3 = 22 then
9940: LD_VAR 0 3
9944: PUSH
9945: LD_INT 22
9947: EQUAL
9948: IFFALSE 9958
// sTeleport := true ;
9950: LD_ADDR_EXP 59
9954: PUSH
9955: LD_INT 1
9957: ST_TO_ADDR
// if p3 = 23 then
9958: LD_VAR 0 3
9962: PUSH
9963: LD_INT 23
9965: EQUAL
9966: IFFALSE 9976
// sOilTower := true ;
9968: LD_ADDR_EXP 61
9972: PUSH
9973: LD_INT 1
9975: ST_TO_ADDR
// if p3 = 24 then
9976: LD_VAR 0 3
9980: PUSH
9981: LD_INT 24
9983: EQUAL
9984: IFFALSE 9994
// sShovel := true ;
9986: LD_ADDR_EXP 62
9990: PUSH
9991: LD_INT 1
9993: ST_TO_ADDR
// if p3 = 25 then
9994: LD_VAR 0 3
9998: PUSH
9999: LD_INT 25
10001: EQUAL
10002: IFFALSE 10012
// sSheik := true ;
10004: LD_ADDR_EXP 63
10008: PUSH
10009: LD_INT 1
10011: ST_TO_ADDR
// if p3 = 26 then
10012: LD_VAR 0 3
10016: PUSH
10017: LD_INT 26
10019: EQUAL
10020: IFFALSE 10030
// sEarthquake := true ;
10022: LD_ADDR_EXP 65
10026: PUSH
10027: LD_INT 1
10029: ST_TO_ADDR
// if p3 = 27 then
10030: LD_VAR 0 3
10034: PUSH
10035: LD_INT 27
10037: EQUAL
10038: IFFALSE 10048
// sAI := true ;
10040: LD_ADDR_EXP 66
10044: PUSH
10045: LD_INT 1
10047: ST_TO_ADDR
// if p3 = 28 then
10048: LD_VAR 0 3
10052: PUSH
10053: LD_INT 28
10055: EQUAL
10056: IFFALSE 10066
// sCargo := true ;
10058: LD_ADDR_EXP 69
10062: PUSH
10063: LD_INT 1
10065: ST_TO_ADDR
// if p3 = 29 then
10066: LD_VAR 0 3
10070: PUSH
10071: LD_INT 29
10073: EQUAL
10074: IFFALSE 10084
// sDLaser := true ;
10076: LD_ADDR_EXP 70
10080: PUSH
10081: LD_INT 1
10083: ST_TO_ADDR
// if p3 = 30 then
10084: LD_VAR 0 3
10088: PUSH
10089: LD_INT 30
10091: EQUAL
10092: IFFALSE 10102
// sExchange := true ;
10094: LD_ADDR_EXP 71
10098: PUSH
10099: LD_INT 1
10101: ST_TO_ADDR
// if p3 = 31 then
10102: LD_VAR 0 3
10106: PUSH
10107: LD_INT 31
10109: EQUAL
10110: IFFALSE 10120
// sFac := true ;
10112: LD_ADDR_EXP 72
10116: PUSH
10117: LD_INT 1
10119: ST_TO_ADDR
// if p3 = 32 then
10120: LD_VAR 0 3
10124: PUSH
10125: LD_INT 32
10127: EQUAL
10128: IFFALSE 10138
// sPower := true ;
10130: LD_ADDR_EXP 73
10134: PUSH
10135: LD_INT 1
10137: ST_TO_ADDR
// if p3 = 33 then
10138: LD_VAR 0 3
10142: PUSH
10143: LD_INT 33
10145: EQUAL
10146: IFFALSE 10156
// sRandom := true ;
10148: LD_ADDR_EXP 74
10152: PUSH
10153: LD_INT 1
10155: ST_TO_ADDR
// if p3 = 34 then
10156: LD_VAR 0 3
10160: PUSH
10161: LD_INT 34
10163: EQUAL
10164: IFFALSE 10174
// sShield := true ;
10166: LD_ADDR_EXP 75
10170: PUSH
10171: LD_INT 1
10173: ST_TO_ADDR
// if p3 = 35 then
10174: LD_VAR 0 3
10178: PUSH
10179: LD_INT 35
10181: EQUAL
10182: IFFALSE 10192
// sTime := true ;
10184: LD_ADDR_EXP 76
10188: PUSH
10189: LD_INT 1
10191: ST_TO_ADDR
// if p3 = 36 then
10192: LD_VAR 0 3
10196: PUSH
10197: LD_INT 36
10199: EQUAL
10200: IFFALSE 10210
// sTools := true ;
10202: LD_ADDR_EXP 77
10206: PUSH
10207: LD_INT 1
10209: ST_TO_ADDR
// if p3 = 101 then
10210: LD_VAR 0 3
10214: PUSH
10215: LD_INT 101
10217: EQUAL
10218: IFFALSE 10228
// sSold := true ;
10220: LD_ADDR_EXP 42
10224: PUSH
10225: LD_INT 1
10227: ST_TO_ADDR
// if p3 = 102 then
10228: LD_VAR 0 3
10232: PUSH
10233: LD_INT 102
10235: EQUAL
10236: IFFALSE 10246
// sDiff := true ;
10238: LD_ADDR_EXP 43
10242: PUSH
10243: LD_INT 1
10245: ST_TO_ADDR
// if p3 = 103 then
10246: LD_VAR 0 3
10250: PUSH
10251: LD_INT 103
10253: EQUAL
10254: IFFALSE 10264
// sFog := true ;
10256: LD_ADDR_EXP 46
10260: PUSH
10261: LD_INT 1
10263: ST_TO_ADDR
// if p3 = 104 then
10264: LD_VAR 0 3
10268: PUSH
10269: LD_INT 104
10271: EQUAL
10272: IFFALSE 10282
// sReset := true ;
10274: LD_ADDR_EXP 47
10278: PUSH
10279: LD_INT 1
10281: ST_TO_ADDR
// if p3 = 105 then
10282: LD_VAR 0 3
10286: PUSH
10287: LD_INT 105
10289: EQUAL
10290: IFFALSE 10300
// sSun := true ;
10292: LD_ADDR_EXP 48
10296: PUSH
10297: LD_INT 1
10299: ST_TO_ADDR
// if p3 = 106 then
10300: LD_VAR 0 3
10304: PUSH
10305: LD_INT 106
10307: EQUAL
10308: IFFALSE 10318
// sTiger := true ;
10310: LD_ADDR_EXP 44
10314: PUSH
10315: LD_INT 1
10317: ST_TO_ADDR
// if p3 = 107 then
10318: LD_VAR 0 3
10322: PUSH
10323: LD_INT 107
10325: EQUAL
10326: IFFALSE 10336
// sBomb := true ;
10328: LD_ADDR_EXP 45
10332: PUSH
10333: LD_INT 1
10335: ST_TO_ADDR
// if p3 = 108 then
10336: LD_VAR 0 3
10340: PUSH
10341: LD_INT 108
10343: EQUAL
10344: IFFALSE 10354
// sWound := true ;
10346: LD_ADDR_EXP 53
10350: PUSH
10351: LD_INT 1
10353: ST_TO_ADDR
// if p3 = 109 then
10354: LD_VAR 0 3
10358: PUSH
10359: LD_INT 109
10361: EQUAL
10362: IFFALSE 10372
// sBetray := true ;
10364: LD_ADDR_EXP 57
10368: PUSH
10369: LD_INT 1
10371: ST_TO_ADDR
// if p3 = 110 then
10372: LD_VAR 0 3
10376: PUSH
10377: LD_INT 110
10379: EQUAL
10380: IFFALSE 10390
// sContamin := true ;
10382: LD_ADDR_EXP 58
10386: PUSH
10387: LD_INT 1
10389: ST_TO_ADDR
// if p3 = 111 then
10390: LD_VAR 0 3
10394: PUSH
10395: LD_INT 111
10397: EQUAL
10398: IFFALSE 10408
// sOil := true ;
10400: LD_ADDR_EXP 60
10404: PUSH
10405: LD_INT 1
10407: ST_TO_ADDR
// if p3 = 112 then
10408: LD_VAR 0 3
10412: PUSH
10413: LD_INT 112
10415: EQUAL
10416: IFFALSE 10426
// sStu := true ;
10418: LD_ADDR_EXP 64
10422: PUSH
10423: LD_INT 1
10425: ST_TO_ADDR
// if p3 = 113 then
10426: LD_VAR 0 3
10430: PUSH
10431: LD_INT 113
10433: EQUAL
10434: IFFALSE 10444
// sBazooka := true ;
10436: LD_ADDR_EXP 67
10440: PUSH
10441: LD_INT 1
10443: ST_TO_ADDR
// if p3 = 114 then
10444: LD_VAR 0 3
10448: PUSH
10449: LD_INT 114
10451: EQUAL
10452: IFFALSE 10462
// sMortar := true ;
10454: LD_ADDR_EXP 68
10458: PUSH
10459: LD_INT 1
10461: ST_TO_ADDR
// if p3 = 115 then
10462: LD_VAR 0 3
10466: PUSH
10467: LD_INT 115
10469: EQUAL
10470: IFFALSE 10480
// sRanger := true ;
10472: LD_ADDR_EXP 78
10476: PUSH
10477: LD_INT 1
10479: ST_TO_ADDR
// if p3 = 116 then
10480: LD_VAR 0 3
10484: PUSH
10485: LD_INT 116
10487: EQUAL
10488: IFFALSE 10498
// sComputer := true ;
10490: LD_ADDR_EXP 79
10494: PUSH
10495: LD_INT 1
10497: ST_TO_ADDR
// if p3 = 117 then
10498: LD_VAR 0 3
10502: PUSH
10503: LD_INT 117
10505: EQUAL
10506: IFFALSE 10516
// s30 := true ;
10508: LD_ADDR_EXP 80
10512: PUSH
10513: LD_INT 1
10515: ST_TO_ADDR
// if p3 = 118 then
10516: LD_VAR 0 3
10520: PUSH
10521: LD_INT 118
10523: EQUAL
10524: IFFALSE 10534
// s60 := true ;
10526: LD_ADDR_EXP 81
10530: PUSH
10531: LD_INT 1
10533: ST_TO_ADDR
// end ; if p2 = 101 then
10534: LD_VAR 0 2
10538: PUSH
10539: LD_INT 101
10541: EQUAL
10542: IFFALSE 10670
// begin case p3 of 1 :
10544: LD_VAR 0 3
10548: PUSH
10549: LD_INT 1
10551: DOUBLE
10552: EQUAL
10553: IFTRUE 10557
10555: GO 10564
10557: POP
// hHackUnlimitedResources ; 2 :
10558: CALL 22768 0 0
10562: GO 10670
10564: LD_INT 2
10566: DOUBLE
10567: EQUAL
10568: IFTRUE 10572
10570: GO 10579
10572: POP
// hHackSetLevel10 ; 3 :
10573: CALL 22901 0 0
10577: GO 10670
10579: LD_INT 3
10581: DOUBLE
10582: EQUAL
10583: IFTRUE 10587
10585: GO 10594
10587: POP
// hHackSetLevel10YourUnits ; 4 :
10588: CALL 22986 0 0
10592: GO 10670
10594: LD_INT 4
10596: DOUBLE
10597: EQUAL
10598: IFTRUE 10602
10600: GO 10609
10602: POP
// hHackInvincible ; 5 :
10603: CALL 23434 0 0
10607: GO 10670
10609: LD_INT 5
10611: DOUBLE
10612: EQUAL
10613: IFTRUE 10617
10615: GO 10624
10617: POP
// hHackInvisible ; 6 :
10618: CALL 23545 0 0
10622: GO 10670
10624: LD_INT 6
10626: DOUBLE
10627: EQUAL
10628: IFTRUE 10632
10630: GO 10639
10632: POP
// hHackChangeYourSide ; 7 :
10633: CALL 23602 0 0
10637: GO 10670
10639: LD_INT 7
10641: DOUBLE
10642: EQUAL
10643: IFTRUE 10647
10645: GO 10654
10647: POP
// hHackChangeUnitSide ; 8 :
10648: CALL 23644 0 0
10652: GO 10670
10654: LD_INT 8
10656: DOUBLE
10657: EQUAL
10658: IFTRUE 10662
10660: GO 10669
10662: POP
// hHackFog ; end ;
10663: CALL 23745 0 0
10667: GO 10670
10669: POP
// end ; end ;
10670: LD_VAR 0 7
10674: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
10675: GO 10677
10677: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
10678: LD_STRING initStreamRollete();
10680: PPUSH
10681: CALL_OW 559
// InitStreamMode ;
10685: CALL 10697 0 0
// DefineStreamItems ( false ) ;
10689: LD_INT 0
10691: PPUSH
10692: CALL 11161 0 1
// end ;
10696: END
// function InitStreamMode ; begin
10697: LD_INT 0
10699: PPUSH
// streamModeActive := false ;
10700: LD_ADDR_EXP 25
10704: PUSH
10705: LD_INT 0
10707: ST_TO_ADDR
// normalCounter := 36 ;
10708: LD_ADDR_EXP 26
10712: PUSH
10713: LD_INT 36
10715: ST_TO_ADDR
// hardcoreCounter := 18 ;
10716: LD_ADDR_EXP 27
10720: PUSH
10721: LD_INT 18
10723: ST_TO_ADDR
// sRocket := false ;
10724: LD_ADDR_EXP 30
10728: PUSH
10729: LD_INT 0
10731: ST_TO_ADDR
// sSpeed := false ;
10732: LD_ADDR_EXP 29
10736: PUSH
10737: LD_INT 0
10739: ST_TO_ADDR
// sEngine := false ;
10740: LD_ADDR_EXP 31
10744: PUSH
10745: LD_INT 0
10747: ST_TO_ADDR
// sSpec := false ;
10748: LD_ADDR_EXP 28
10752: PUSH
10753: LD_INT 0
10755: ST_TO_ADDR
// sLevel := false ;
10756: LD_ADDR_EXP 32
10760: PUSH
10761: LD_INT 0
10763: ST_TO_ADDR
// sArmoury := false ;
10764: LD_ADDR_EXP 33
10768: PUSH
10769: LD_INT 0
10771: ST_TO_ADDR
// sRadar := false ;
10772: LD_ADDR_EXP 34
10776: PUSH
10777: LD_INT 0
10779: ST_TO_ADDR
// sBunker := false ;
10780: LD_ADDR_EXP 35
10784: PUSH
10785: LD_INT 0
10787: ST_TO_ADDR
// sHack := false ;
10788: LD_ADDR_EXP 36
10792: PUSH
10793: LD_INT 0
10795: ST_TO_ADDR
// sFire := false ;
10796: LD_ADDR_EXP 37
10800: PUSH
10801: LD_INT 0
10803: ST_TO_ADDR
// sRefresh := false ;
10804: LD_ADDR_EXP 38
10808: PUSH
10809: LD_INT 0
10811: ST_TO_ADDR
// sExp := false ;
10812: LD_ADDR_EXP 39
10816: PUSH
10817: LD_INT 0
10819: ST_TO_ADDR
// sDepot := false ;
10820: LD_ADDR_EXP 40
10824: PUSH
10825: LD_INT 0
10827: ST_TO_ADDR
// sFlag := false ;
10828: LD_ADDR_EXP 41
10832: PUSH
10833: LD_INT 0
10835: ST_TO_ADDR
// sKamikadze := false ;
10836: LD_ADDR_EXP 49
10840: PUSH
10841: LD_INT 0
10843: ST_TO_ADDR
// sTroll := false ;
10844: LD_ADDR_EXP 50
10848: PUSH
10849: LD_INT 0
10851: ST_TO_ADDR
// sSlow := false ;
10852: LD_ADDR_EXP 51
10856: PUSH
10857: LD_INT 0
10859: ST_TO_ADDR
// sLack := false ;
10860: LD_ADDR_EXP 52
10864: PUSH
10865: LD_INT 0
10867: ST_TO_ADDR
// sTank := false ;
10868: LD_ADDR_EXP 54
10872: PUSH
10873: LD_INT 0
10875: ST_TO_ADDR
// sRemote := false ;
10876: LD_ADDR_EXP 55
10880: PUSH
10881: LD_INT 0
10883: ST_TO_ADDR
// sPowell := false ;
10884: LD_ADDR_EXP 56
10888: PUSH
10889: LD_INT 0
10891: ST_TO_ADDR
// sTeleport := false ;
10892: LD_ADDR_EXP 59
10896: PUSH
10897: LD_INT 0
10899: ST_TO_ADDR
// sOilTower := false ;
10900: LD_ADDR_EXP 61
10904: PUSH
10905: LD_INT 0
10907: ST_TO_ADDR
// sShovel := false ;
10908: LD_ADDR_EXP 62
10912: PUSH
10913: LD_INT 0
10915: ST_TO_ADDR
// sSheik := false ;
10916: LD_ADDR_EXP 63
10920: PUSH
10921: LD_INT 0
10923: ST_TO_ADDR
// sEarthquake := false ;
10924: LD_ADDR_EXP 65
10928: PUSH
10929: LD_INT 0
10931: ST_TO_ADDR
// sAI := false ;
10932: LD_ADDR_EXP 66
10936: PUSH
10937: LD_INT 0
10939: ST_TO_ADDR
// sCargo := false ;
10940: LD_ADDR_EXP 69
10944: PUSH
10945: LD_INT 0
10947: ST_TO_ADDR
// sDLaser := false ;
10948: LD_ADDR_EXP 70
10952: PUSH
10953: LD_INT 0
10955: ST_TO_ADDR
// sExchange := false ;
10956: LD_ADDR_EXP 71
10960: PUSH
10961: LD_INT 0
10963: ST_TO_ADDR
// sFac := false ;
10964: LD_ADDR_EXP 72
10968: PUSH
10969: LD_INT 0
10971: ST_TO_ADDR
// sPower := false ;
10972: LD_ADDR_EXP 73
10976: PUSH
10977: LD_INT 0
10979: ST_TO_ADDR
// sRandom := false ;
10980: LD_ADDR_EXP 74
10984: PUSH
10985: LD_INT 0
10987: ST_TO_ADDR
// sShield := false ;
10988: LD_ADDR_EXP 75
10992: PUSH
10993: LD_INT 0
10995: ST_TO_ADDR
// sTime := false ;
10996: LD_ADDR_EXP 76
11000: PUSH
11001: LD_INT 0
11003: ST_TO_ADDR
// sTools := false ;
11004: LD_ADDR_EXP 77
11008: PUSH
11009: LD_INT 0
11011: ST_TO_ADDR
// sSold := false ;
11012: LD_ADDR_EXP 42
11016: PUSH
11017: LD_INT 0
11019: ST_TO_ADDR
// sDiff := false ;
11020: LD_ADDR_EXP 43
11024: PUSH
11025: LD_INT 0
11027: ST_TO_ADDR
// sFog := false ;
11028: LD_ADDR_EXP 46
11032: PUSH
11033: LD_INT 0
11035: ST_TO_ADDR
// sReset := false ;
11036: LD_ADDR_EXP 47
11040: PUSH
11041: LD_INT 0
11043: ST_TO_ADDR
// sSun := false ;
11044: LD_ADDR_EXP 48
11048: PUSH
11049: LD_INT 0
11051: ST_TO_ADDR
// sTiger := false ;
11052: LD_ADDR_EXP 44
11056: PUSH
11057: LD_INT 0
11059: ST_TO_ADDR
// sBomb := false ;
11060: LD_ADDR_EXP 45
11064: PUSH
11065: LD_INT 0
11067: ST_TO_ADDR
// sWound := false ;
11068: LD_ADDR_EXP 53
11072: PUSH
11073: LD_INT 0
11075: ST_TO_ADDR
// sBetray := false ;
11076: LD_ADDR_EXP 57
11080: PUSH
11081: LD_INT 0
11083: ST_TO_ADDR
// sContamin := false ;
11084: LD_ADDR_EXP 58
11088: PUSH
11089: LD_INT 0
11091: ST_TO_ADDR
// sOil := false ;
11092: LD_ADDR_EXP 60
11096: PUSH
11097: LD_INT 0
11099: ST_TO_ADDR
// sStu := false ;
11100: LD_ADDR_EXP 64
11104: PUSH
11105: LD_INT 0
11107: ST_TO_ADDR
// sBazooka := false ;
11108: LD_ADDR_EXP 67
11112: PUSH
11113: LD_INT 0
11115: ST_TO_ADDR
// sMortar := false ;
11116: LD_ADDR_EXP 68
11120: PUSH
11121: LD_INT 0
11123: ST_TO_ADDR
// sRanger := false ;
11124: LD_ADDR_EXP 78
11128: PUSH
11129: LD_INT 0
11131: ST_TO_ADDR
// sComputer := false ;
11132: LD_ADDR_EXP 79
11136: PUSH
11137: LD_INT 0
11139: ST_TO_ADDR
// s30 := false ;
11140: LD_ADDR_EXP 80
11144: PUSH
11145: LD_INT 0
11147: ST_TO_ADDR
// s60 := false ;
11148: LD_ADDR_EXP 81
11152: PUSH
11153: LD_INT 0
11155: ST_TO_ADDR
// end ;
11156: LD_VAR 0 1
11160: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
11161: LD_INT 0
11163: PPUSH
11164: PPUSH
11165: PPUSH
11166: PPUSH
11167: PPUSH
11168: PPUSH
11169: PPUSH
// result := [ ] ;
11170: LD_ADDR_VAR 0 2
11174: PUSH
11175: EMPTY
11176: ST_TO_ADDR
// if campaign_id = 1 then
11177: LD_OWVAR 69
11181: PUSH
11182: LD_INT 1
11184: EQUAL
11185: IFFALSE 14351
// begin case mission_number of 1 :
11187: LD_OWVAR 70
11191: PUSH
11192: LD_INT 1
11194: DOUBLE
11195: EQUAL
11196: IFTRUE 11200
11198: GO 11276
11200: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
11201: LD_ADDR_VAR 0 2
11205: PUSH
11206: LD_INT 2
11208: PUSH
11209: LD_INT 4
11211: PUSH
11212: LD_INT 11
11214: PUSH
11215: LD_INT 12
11217: PUSH
11218: LD_INT 15
11220: PUSH
11221: LD_INT 16
11223: PUSH
11224: LD_INT 22
11226: PUSH
11227: LD_INT 23
11229: PUSH
11230: LD_INT 26
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: PUSH
11244: LD_INT 101
11246: PUSH
11247: LD_INT 102
11249: PUSH
11250: LD_INT 106
11252: PUSH
11253: LD_INT 116
11255: PUSH
11256: LD_INT 117
11258: PUSH
11259: LD_INT 118
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: PUSH
11270: EMPTY
11271: LIST
11272: LIST
11273: ST_TO_ADDR
11274: GO 14349
11276: LD_INT 2
11278: DOUBLE
11279: EQUAL
11280: IFTRUE 11284
11282: GO 11368
11284: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
11285: LD_ADDR_VAR 0 2
11289: PUSH
11290: LD_INT 2
11292: PUSH
11293: LD_INT 4
11295: PUSH
11296: LD_INT 11
11298: PUSH
11299: LD_INT 12
11301: PUSH
11302: LD_INT 15
11304: PUSH
11305: LD_INT 16
11307: PUSH
11308: LD_INT 22
11310: PUSH
11311: LD_INT 23
11313: PUSH
11314: LD_INT 26
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: PUSH
11328: LD_INT 101
11330: PUSH
11331: LD_INT 102
11333: PUSH
11334: LD_INT 105
11336: PUSH
11337: LD_INT 106
11339: PUSH
11340: LD_INT 108
11342: PUSH
11343: LD_INT 116
11345: PUSH
11346: LD_INT 117
11348: PUSH
11349: LD_INT 118
11351: PUSH
11352: EMPTY
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: ST_TO_ADDR
11366: GO 14349
11368: LD_INT 3
11370: DOUBLE
11371: EQUAL
11372: IFTRUE 11376
11374: GO 11464
11376: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
11377: LD_ADDR_VAR 0 2
11381: PUSH
11382: LD_INT 2
11384: PUSH
11385: LD_INT 4
11387: PUSH
11388: LD_INT 5
11390: PUSH
11391: LD_INT 11
11393: PUSH
11394: LD_INT 12
11396: PUSH
11397: LD_INT 15
11399: PUSH
11400: LD_INT 16
11402: PUSH
11403: LD_INT 22
11405: PUSH
11406: LD_INT 26
11408: PUSH
11409: LD_INT 36
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: PUSH
11424: LD_INT 101
11426: PUSH
11427: LD_INT 102
11429: PUSH
11430: LD_INT 105
11432: PUSH
11433: LD_INT 106
11435: PUSH
11436: LD_INT 108
11438: PUSH
11439: LD_INT 116
11441: PUSH
11442: LD_INT 117
11444: PUSH
11445: LD_INT 118
11447: PUSH
11448: EMPTY
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: ST_TO_ADDR
11462: GO 14349
11464: LD_INT 4
11466: DOUBLE
11467: EQUAL
11468: IFTRUE 11472
11470: GO 11568
11472: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
11473: LD_ADDR_VAR 0 2
11477: PUSH
11478: LD_INT 2
11480: PUSH
11481: LD_INT 4
11483: PUSH
11484: LD_INT 5
11486: PUSH
11487: LD_INT 8
11489: PUSH
11490: LD_INT 11
11492: PUSH
11493: LD_INT 12
11495: PUSH
11496: LD_INT 15
11498: PUSH
11499: LD_INT 16
11501: PUSH
11502: LD_INT 22
11504: PUSH
11505: LD_INT 23
11507: PUSH
11508: LD_INT 26
11510: PUSH
11511: LD_INT 36
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: PUSH
11528: LD_INT 101
11530: PUSH
11531: LD_INT 102
11533: PUSH
11534: LD_INT 105
11536: PUSH
11537: LD_INT 106
11539: PUSH
11540: LD_INT 108
11542: PUSH
11543: LD_INT 116
11545: PUSH
11546: LD_INT 117
11548: PUSH
11549: LD_INT 118
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: LIST
11561: PUSH
11562: EMPTY
11563: LIST
11564: LIST
11565: ST_TO_ADDR
11566: GO 14349
11568: LD_INT 5
11570: DOUBLE
11571: EQUAL
11572: IFTRUE 11576
11574: GO 11688
11576: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
11577: LD_ADDR_VAR 0 2
11581: PUSH
11582: LD_INT 2
11584: PUSH
11585: LD_INT 4
11587: PUSH
11588: LD_INT 5
11590: PUSH
11591: LD_INT 6
11593: PUSH
11594: LD_INT 8
11596: PUSH
11597: LD_INT 11
11599: PUSH
11600: LD_INT 12
11602: PUSH
11603: LD_INT 15
11605: PUSH
11606: LD_INT 16
11608: PUSH
11609: LD_INT 22
11611: PUSH
11612: LD_INT 23
11614: PUSH
11615: LD_INT 25
11617: PUSH
11618: LD_INT 26
11620: PUSH
11621: LD_INT 36
11623: PUSH
11624: EMPTY
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: PUSH
11640: LD_INT 101
11642: PUSH
11643: LD_INT 102
11645: PUSH
11646: LD_INT 105
11648: PUSH
11649: LD_INT 106
11651: PUSH
11652: LD_INT 108
11654: PUSH
11655: LD_INT 109
11657: PUSH
11658: LD_INT 112
11660: PUSH
11661: LD_INT 116
11663: PUSH
11664: LD_INT 117
11666: PUSH
11667: LD_INT 118
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: ST_TO_ADDR
11686: GO 14349
11688: LD_INT 6
11690: DOUBLE
11691: EQUAL
11692: IFTRUE 11696
11694: GO 11828
11696: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
11697: LD_ADDR_VAR 0 2
11701: PUSH
11702: LD_INT 2
11704: PUSH
11705: LD_INT 4
11707: PUSH
11708: LD_INT 5
11710: PUSH
11711: LD_INT 6
11713: PUSH
11714: LD_INT 8
11716: PUSH
11717: LD_INT 11
11719: PUSH
11720: LD_INT 12
11722: PUSH
11723: LD_INT 15
11725: PUSH
11726: LD_INT 16
11728: PUSH
11729: LD_INT 20
11731: PUSH
11732: LD_INT 21
11734: PUSH
11735: LD_INT 22
11737: PUSH
11738: LD_INT 23
11740: PUSH
11741: LD_INT 25
11743: PUSH
11744: LD_INT 26
11746: PUSH
11747: LD_INT 30
11749: PUSH
11750: LD_INT 31
11752: PUSH
11753: LD_INT 32
11755: PUSH
11756: LD_INT 36
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: PUSH
11780: LD_INT 101
11782: PUSH
11783: LD_INT 102
11785: PUSH
11786: LD_INT 105
11788: PUSH
11789: LD_INT 106
11791: PUSH
11792: LD_INT 108
11794: PUSH
11795: LD_INT 109
11797: PUSH
11798: LD_INT 112
11800: PUSH
11801: LD_INT 116
11803: PUSH
11804: LD_INT 117
11806: PUSH
11807: LD_INT 118
11809: PUSH
11810: EMPTY
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: ST_TO_ADDR
11826: GO 14349
11828: LD_INT 7
11830: DOUBLE
11831: EQUAL
11832: IFTRUE 11836
11834: GO 11948
11836: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
11837: LD_ADDR_VAR 0 2
11841: PUSH
11842: LD_INT 2
11844: PUSH
11845: LD_INT 4
11847: PUSH
11848: LD_INT 5
11850: PUSH
11851: LD_INT 7
11853: PUSH
11854: LD_INT 11
11856: PUSH
11857: LD_INT 12
11859: PUSH
11860: LD_INT 15
11862: PUSH
11863: LD_INT 16
11865: PUSH
11866: LD_INT 20
11868: PUSH
11869: LD_INT 21
11871: PUSH
11872: LD_INT 22
11874: PUSH
11875: LD_INT 23
11877: PUSH
11878: LD_INT 25
11880: PUSH
11881: LD_INT 26
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: PUSH
11900: LD_INT 101
11902: PUSH
11903: LD_INT 102
11905: PUSH
11906: LD_INT 103
11908: PUSH
11909: LD_INT 105
11911: PUSH
11912: LD_INT 106
11914: PUSH
11915: LD_INT 108
11917: PUSH
11918: LD_INT 112
11920: PUSH
11921: LD_INT 116
11923: PUSH
11924: LD_INT 117
11926: PUSH
11927: LD_INT 118
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: ST_TO_ADDR
11946: GO 14349
11948: LD_INT 8
11950: DOUBLE
11951: EQUAL
11952: IFTRUE 11956
11954: GO 12096
11956: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
11957: LD_ADDR_VAR 0 2
11961: PUSH
11962: LD_INT 2
11964: PUSH
11965: LD_INT 4
11967: PUSH
11968: LD_INT 5
11970: PUSH
11971: LD_INT 6
11973: PUSH
11974: LD_INT 7
11976: PUSH
11977: LD_INT 8
11979: PUSH
11980: LD_INT 11
11982: PUSH
11983: LD_INT 12
11985: PUSH
11986: LD_INT 15
11988: PUSH
11989: LD_INT 16
11991: PUSH
11992: LD_INT 20
11994: PUSH
11995: LD_INT 21
11997: PUSH
11998: LD_INT 22
12000: PUSH
12001: LD_INT 23
12003: PUSH
12004: LD_INT 25
12006: PUSH
12007: LD_INT 26
12009: PUSH
12010: LD_INT 30
12012: PUSH
12013: LD_INT 31
12015: PUSH
12016: LD_INT 32
12018: PUSH
12019: LD_INT 36
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: PUSH
12044: LD_INT 101
12046: PUSH
12047: LD_INT 102
12049: PUSH
12050: LD_INT 103
12052: PUSH
12053: LD_INT 105
12055: PUSH
12056: LD_INT 106
12058: PUSH
12059: LD_INT 108
12061: PUSH
12062: LD_INT 109
12064: PUSH
12065: LD_INT 112
12067: PUSH
12068: LD_INT 116
12070: PUSH
12071: LD_INT 117
12073: PUSH
12074: LD_INT 118
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: PUSH
12090: EMPTY
12091: LIST
12092: LIST
12093: ST_TO_ADDR
12094: GO 14349
12096: LD_INT 9
12098: DOUBLE
12099: EQUAL
12100: IFTRUE 12104
12102: GO 12252
12104: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
12105: LD_ADDR_VAR 0 2
12109: PUSH
12110: LD_INT 2
12112: PUSH
12113: LD_INT 4
12115: PUSH
12116: LD_INT 5
12118: PUSH
12119: LD_INT 6
12121: PUSH
12122: LD_INT 7
12124: PUSH
12125: LD_INT 8
12127: PUSH
12128: LD_INT 11
12130: PUSH
12131: LD_INT 12
12133: PUSH
12134: LD_INT 15
12136: PUSH
12137: LD_INT 16
12139: PUSH
12140: LD_INT 20
12142: PUSH
12143: LD_INT 21
12145: PUSH
12146: LD_INT 22
12148: PUSH
12149: LD_INT 23
12151: PUSH
12152: LD_INT 25
12154: PUSH
12155: LD_INT 26
12157: PUSH
12158: LD_INT 28
12160: PUSH
12161: LD_INT 30
12163: PUSH
12164: LD_INT 31
12166: PUSH
12167: LD_INT 32
12169: PUSH
12170: LD_INT 36
12172: PUSH
12173: EMPTY
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: PUSH
12196: LD_INT 101
12198: PUSH
12199: LD_INT 102
12201: PUSH
12202: LD_INT 103
12204: PUSH
12205: LD_INT 105
12207: PUSH
12208: LD_INT 106
12210: PUSH
12211: LD_INT 108
12213: PUSH
12214: LD_INT 109
12216: PUSH
12217: LD_INT 112
12219: PUSH
12220: LD_INT 114
12222: PUSH
12223: LD_INT 116
12225: PUSH
12226: LD_INT 117
12228: PUSH
12229: LD_INT 118
12231: PUSH
12232: EMPTY
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: ST_TO_ADDR
12250: GO 14349
12252: LD_INT 10
12254: DOUBLE
12255: EQUAL
12256: IFTRUE 12260
12258: GO 12456
12260: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
12261: LD_ADDR_VAR 0 2
12265: PUSH
12266: LD_INT 2
12268: PUSH
12269: LD_INT 4
12271: PUSH
12272: LD_INT 5
12274: PUSH
12275: LD_INT 6
12277: PUSH
12278: LD_INT 7
12280: PUSH
12281: LD_INT 8
12283: PUSH
12284: LD_INT 9
12286: PUSH
12287: LD_INT 10
12289: PUSH
12290: LD_INT 11
12292: PUSH
12293: LD_INT 12
12295: PUSH
12296: LD_INT 13
12298: PUSH
12299: LD_INT 14
12301: PUSH
12302: LD_INT 15
12304: PUSH
12305: LD_INT 16
12307: PUSH
12308: LD_INT 17
12310: PUSH
12311: LD_INT 18
12313: PUSH
12314: LD_INT 19
12316: PUSH
12317: LD_INT 20
12319: PUSH
12320: LD_INT 21
12322: PUSH
12323: LD_INT 22
12325: PUSH
12326: LD_INT 23
12328: PUSH
12329: LD_INT 24
12331: PUSH
12332: LD_INT 25
12334: PUSH
12335: LD_INT 26
12337: PUSH
12338: LD_INT 28
12340: PUSH
12341: LD_INT 30
12343: PUSH
12344: LD_INT 31
12346: PUSH
12347: LD_INT 32
12349: PUSH
12350: LD_INT 36
12352: PUSH
12353: EMPTY
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: PUSH
12384: LD_INT 101
12386: PUSH
12387: LD_INT 102
12389: PUSH
12390: LD_INT 103
12392: PUSH
12393: LD_INT 104
12395: PUSH
12396: LD_INT 105
12398: PUSH
12399: LD_INT 106
12401: PUSH
12402: LD_INT 107
12404: PUSH
12405: LD_INT 108
12407: PUSH
12408: LD_INT 109
12410: PUSH
12411: LD_INT 110
12413: PUSH
12414: LD_INT 111
12416: PUSH
12417: LD_INT 112
12419: PUSH
12420: LD_INT 114
12422: PUSH
12423: LD_INT 116
12425: PUSH
12426: LD_INT 117
12428: PUSH
12429: LD_INT 118
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: ST_TO_ADDR
12454: GO 14349
12456: LD_INT 11
12458: DOUBLE
12459: EQUAL
12460: IFTRUE 12464
12462: GO 12668
12464: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
12465: LD_ADDR_VAR 0 2
12469: PUSH
12470: LD_INT 2
12472: PUSH
12473: LD_INT 3
12475: PUSH
12476: LD_INT 4
12478: PUSH
12479: LD_INT 5
12481: PUSH
12482: LD_INT 6
12484: PUSH
12485: LD_INT 7
12487: PUSH
12488: LD_INT 8
12490: PUSH
12491: LD_INT 9
12493: PUSH
12494: LD_INT 10
12496: PUSH
12497: LD_INT 11
12499: PUSH
12500: LD_INT 12
12502: PUSH
12503: LD_INT 13
12505: PUSH
12506: LD_INT 14
12508: PUSH
12509: LD_INT 15
12511: PUSH
12512: LD_INT 16
12514: PUSH
12515: LD_INT 17
12517: PUSH
12518: LD_INT 18
12520: PUSH
12521: LD_INT 19
12523: PUSH
12524: LD_INT 20
12526: PUSH
12527: LD_INT 21
12529: PUSH
12530: LD_INT 22
12532: PUSH
12533: LD_INT 23
12535: PUSH
12536: LD_INT 24
12538: PUSH
12539: LD_INT 25
12541: PUSH
12542: LD_INT 26
12544: PUSH
12545: LD_INT 28
12547: PUSH
12548: LD_INT 30
12550: PUSH
12551: LD_INT 31
12553: PUSH
12554: LD_INT 32
12556: PUSH
12557: LD_INT 34
12559: PUSH
12560: LD_INT 36
12562: PUSH
12563: EMPTY
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: PUSH
12596: LD_INT 101
12598: PUSH
12599: LD_INT 102
12601: PUSH
12602: LD_INT 103
12604: PUSH
12605: LD_INT 104
12607: PUSH
12608: LD_INT 105
12610: PUSH
12611: LD_INT 106
12613: PUSH
12614: LD_INT 107
12616: PUSH
12617: LD_INT 108
12619: PUSH
12620: LD_INT 109
12622: PUSH
12623: LD_INT 110
12625: PUSH
12626: LD_INT 111
12628: PUSH
12629: LD_INT 112
12631: PUSH
12632: LD_INT 114
12634: PUSH
12635: LD_INT 116
12637: PUSH
12638: LD_INT 117
12640: PUSH
12641: LD_INT 118
12643: PUSH
12644: EMPTY
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: ST_TO_ADDR
12666: GO 14349
12668: LD_INT 12
12670: DOUBLE
12671: EQUAL
12672: IFTRUE 12676
12674: GO 12896
12676: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
12677: LD_ADDR_VAR 0 2
12681: PUSH
12682: LD_INT 1
12684: PUSH
12685: LD_INT 2
12687: PUSH
12688: LD_INT 3
12690: PUSH
12691: LD_INT 4
12693: PUSH
12694: LD_INT 5
12696: PUSH
12697: LD_INT 6
12699: PUSH
12700: LD_INT 7
12702: PUSH
12703: LD_INT 8
12705: PUSH
12706: LD_INT 9
12708: PUSH
12709: LD_INT 10
12711: PUSH
12712: LD_INT 11
12714: PUSH
12715: LD_INT 12
12717: PUSH
12718: LD_INT 13
12720: PUSH
12721: LD_INT 14
12723: PUSH
12724: LD_INT 15
12726: PUSH
12727: LD_INT 16
12729: PUSH
12730: LD_INT 17
12732: PUSH
12733: LD_INT 18
12735: PUSH
12736: LD_INT 19
12738: PUSH
12739: LD_INT 20
12741: PUSH
12742: LD_INT 21
12744: PUSH
12745: LD_INT 22
12747: PUSH
12748: LD_INT 23
12750: PUSH
12751: LD_INT 24
12753: PUSH
12754: LD_INT 25
12756: PUSH
12757: LD_INT 26
12759: PUSH
12760: LD_INT 27
12762: PUSH
12763: LD_INT 28
12765: PUSH
12766: LD_INT 30
12768: PUSH
12769: LD_INT 31
12771: PUSH
12772: LD_INT 32
12774: PUSH
12775: LD_INT 33
12777: PUSH
12778: LD_INT 34
12780: PUSH
12781: LD_INT 36
12783: PUSH
12784: EMPTY
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: PUSH
12820: LD_INT 101
12822: PUSH
12823: LD_INT 102
12825: PUSH
12826: LD_INT 103
12828: PUSH
12829: LD_INT 104
12831: PUSH
12832: LD_INT 105
12834: PUSH
12835: LD_INT 106
12837: PUSH
12838: LD_INT 107
12840: PUSH
12841: LD_INT 108
12843: PUSH
12844: LD_INT 109
12846: PUSH
12847: LD_INT 110
12849: PUSH
12850: LD_INT 111
12852: PUSH
12853: LD_INT 112
12855: PUSH
12856: LD_INT 113
12858: PUSH
12859: LD_INT 114
12861: PUSH
12862: LD_INT 116
12864: PUSH
12865: LD_INT 117
12867: PUSH
12868: LD_INT 118
12870: PUSH
12871: EMPTY
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: PUSH
12890: EMPTY
12891: LIST
12892: LIST
12893: ST_TO_ADDR
12894: GO 14349
12896: LD_INT 13
12898: DOUBLE
12899: EQUAL
12900: IFTRUE 12904
12902: GO 13112
12904: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
12905: LD_ADDR_VAR 0 2
12909: PUSH
12910: LD_INT 1
12912: PUSH
12913: LD_INT 2
12915: PUSH
12916: LD_INT 3
12918: PUSH
12919: LD_INT 4
12921: PUSH
12922: LD_INT 5
12924: PUSH
12925: LD_INT 8
12927: PUSH
12928: LD_INT 9
12930: PUSH
12931: LD_INT 10
12933: PUSH
12934: LD_INT 11
12936: PUSH
12937: LD_INT 12
12939: PUSH
12940: LD_INT 14
12942: PUSH
12943: LD_INT 15
12945: PUSH
12946: LD_INT 16
12948: PUSH
12949: LD_INT 17
12951: PUSH
12952: LD_INT 18
12954: PUSH
12955: LD_INT 19
12957: PUSH
12958: LD_INT 20
12960: PUSH
12961: LD_INT 21
12963: PUSH
12964: LD_INT 22
12966: PUSH
12967: LD_INT 23
12969: PUSH
12970: LD_INT 24
12972: PUSH
12973: LD_INT 25
12975: PUSH
12976: LD_INT 26
12978: PUSH
12979: LD_INT 27
12981: PUSH
12982: LD_INT 28
12984: PUSH
12985: LD_INT 30
12987: PUSH
12988: LD_INT 31
12990: PUSH
12991: LD_INT 32
12993: PUSH
12994: LD_INT 33
12996: PUSH
12997: LD_INT 34
12999: PUSH
13000: LD_INT 36
13002: PUSH
13003: EMPTY
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: PUSH
13036: LD_INT 101
13038: PUSH
13039: LD_INT 102
13041: PUSH
13042: LD_INT 103
13044: PUSH
13045: LD_INT 104
13047: PUSH
13048: LD_INT 105
13050: PUSH
13051: LD_INT 106
13053: PUSH
13054: LD_INT 107
13056: PUSH
13057: LD_INT 108
13059: PUSH
13060: LD_INT 109
13062: PUSH
13063: LD_INT 110
13065: PUSH
13066: LD_INT 111
13068: PUSH
13069: LD_INT 112
13071: PUSH
13072: LD_INT 113
13074: PUSH
13075: LD_INT 114
13077: PUSH
13078: LD_INT 116
13080: PUSH
13081: LD_INT 117
13083: PUSH
13084: LD_INT 118
13086: PUSH
13087: EMPTY
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: PUSH
13106: EMPTY
13107: LIST
13108: LIST
13109: ST_TO_ADDR
13110: GO 14349
13112: LD_INT 14
13114: DOUBLE
13115: EQUAL
13116: IFTRUE 13120
13118: GO 13344
13120: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
13121: LD_ADDR_VAR 0 2
13125: PUSH
13126: LD_INT 1
13128: PUSH
13129: LD_INT 2
13131: PUSH
13132: LD_INT 3
13134: PUSH
13135: LD_INT 4
13137: PUSH
13138: LD_INT 5
13140: PUSH
13141: LD_INT 6
13143: PUSH
13144: LD_INT 7
13146: PUSH
13147: LD_INT 8
13149: PUSH
13150: LD_INT 9
13152: PUSH
13153: LD_INT 10
13155: PUSH
13156: LD_INT 11
13158: PUSH
13159: LD_INT 12
13161: PUSH
13162: LD_INT 13
13164: PUSH
13165: LD_INT 14
13167: PUSH
13168: LD_INT 15
13170: PUSH
13171: LD_INT 16
13173: PUSH
13174: LD_INT 17
13176: PUSH
13177: LD_INT 18
13179: PUSH
13180: LD_INT 19
13182: PUSH
13183: LD_INT 20
13185: PUSH
13186: LD_INT 21
13188: PUSH
13189: LD_INT 22
13191: PUSH
13192: LD_INT 23
13194: PUSH
13195: LD_INT 24
13197: PUSH
13198: LD_INT 25
13200: PUSH
13201: LD_INT 26
13203: PUSH
13204: LD_INT 27
13206: PUSH
13207: LD_INT 28
13209: PUSH
13210: LD_INT 29
13212: PUSH
13213: LD_INT 30
13215: PUSH
13216: LD_INT 31
13218: PUSH
13219: LD_INT 32
13221: PUSH
13222: LD_INT 33
13224: PUSH
13225: LD_INT 34
13227: PUSH
13228: LD_INT 36
13230: PUSH
13231: EMPTY
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: PUSH
13268: LD_INT 101
13270: PUSH
13271: LD_INT 102
13273: PUSH
13274: LD_INT 103
13276: PUSH
13277: LD_INT 104
13279: PUSH
13280: LD_INT 105
13282: PUSH
13283: LD_INT 106
13285: PUSH
13286: LD_INT 107
13288: PUSH
13289: LD_INT 108
13291: PUSH
13292: LD_INT 109
13294: PUSH
13295: LD_INT 110
13297: PUSH
13298: LD_INT 111
13300: PUSH
13301: LD_INT 112
13303: PUSH
13304: LD_INT 113
13306: PUSH
13307: LD_INT 114
13309: PUSH
13310: LD_INT 116
13312: PUSH
13313: LD_INT 117
13315: PUSH
13316: LD_INT 118
13318: PUSH
13319: EMPTY
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: ST_TO_ADDR
13342: GO 14349
13344: LD_INT 15
13346: DOUBLE
13347: EQUAL
13348: IFTRUE 13352
13350: GO 13576
13352: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
13353: LD_ADDR_VAR 0 2
13357: PUSH
13358: LD_INT 1
13360: PUSH
13361: LD_INT 2
13363: PUSH
13364: LD_INT 3
13366: PUSH
13367: LD_INT 4
13369: PUSH
13370: LD_INT 5
13372: PUSH
13373: LD_INT 6
13375: PUSH
13376: LD_INT 7
13378: PUSH
13379: LD_INT 8
13381: PUSH
13382: LD_INT 9
13384: PUSH
13385: LD_INT 10
13387: PUSH
13388: LD_INT 11
13390: PUSH
13391: LD_INT 12
13393: PUSH
13394: LD_INT 13
13396: PUSH
13397: LD_INT 14
13399: PUSH
13400: LD_INT 15
13402: PUSH
13403: LD_INT 16
13405: PUSH
13406: LD_INT 17
13408: PUSH
13409: LD_INT 18
13411: PUSH
13412: LD_INT 19
13414: PUSH
13415: LD_INT 20
13417: PUSH
13418: LD_INT 21
13420: PUSH
13421: LD_INT 22
13423: PUSH
13424: LD_INT 23
13426: PUSH
13427: LD_INT 24
13429: PUSH
13430: LD_INT 25
13432: PUSH
13433: LD_INT 26
13435: PUSH
13436: LD_INT 27
13438: PUSH
13439: LD_INT 28
13441: PUSH
13442: LD_INT 29
13444: PUSH
13445: LD_INT 30
13447: PUSH
13448: LD_INT 31
13450: PUSH
13451: LD_INT 32
13453: PUSH
13454: LD_INT 33
13456: PUSH
13457: LD_INT 34
13459: PUSH
13460: LD_INT 36
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: PUSH
13500: LD_INT 101
13502: PUSH
13503: LD_INT 102
13505: PUSH
13506: LD_INT 103
13508: PUSH
13509: LD_INT 104
13511: PUSH
13512: LD_INT 105
13514: PUSH
13515: LD_INT 106
13517: PUSH
13518: LD_INT 107
13520: PUSH
13521: LD_INT 108
13523: PUSH
13524: LD_INT 109
13526: PUSH
13527: LD_INT 110
13529: PUSH
13530: LD_INT 111
13532: PUSH
13533: LD_INT 112
13535: PUSH
13536: LD_INT 113
13538: PUSH
13539: LD_INT 114
13541: PUSH
13542: LD_INT 116
13544: PUSH
13545: LD_INT 117
13547: PUSH
13548: LD_INT 118
13550: PUSH
13551: EMPTY
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: ST_TO_ADDR
13574: GO 14349
13576: LD_INT 16
13578: DOUBLE
13579: EQUAL
13580: IFTRUE 13584
13582: GO 13720
13584: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
13585: LD_ADDR_VAR 0 2
13589: PUSH
13590: LD_INT 2
13592: PUSH
13593: LD_INT 4
13595: PUSH
13596: LD_INT 5
13598: PUSH
13599: LD_INT 7
13601: PUSH
13602: LD_INT 11
13604: PUSH
13605: LD_INT 12
13607: PUSH
13608: LD_INT 15
13610: PUSH
13611: LD_INT 16
13613: PUSH
13614: LD_INT 20
13616: PUSH
13617: LD_INT 21
13619: PUSH
13620: LD_INT 22
13622: PUSH
13623: LD_INT 23
13625: PUSH
13626: LD_INT 25
13628: PUSH
13629: LD_INT 26
13631: PUSH
13632: LD_INT 30
13634: PUSH
13635: LD_INT 31
13637: PUSH
13638: LD_INT 32
13640: PUSH
13641: LD_INT 33
13643: PUSH
13644: LD_INT 34
13646: PUSH
13647: EMPTY
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: PUSH
13668: LD_INT 101
13670: PUSH
13671: LD_INT 102
13673: PUSH
13674: LD_INT 103
13676: PUSH
13677: LD_INT 106
13679: PUSH
13680: LD_INT 108
13682: PUSH
13683: LD_INT 112
13685: PUSH
13686: LD_INT 113
13688: PUSH
13689: LD_INT 114
13691: PUSH
13692: LD_INT 116
13694: PUSH
13695: LD_INT 117
13697: PUSH
13698: LD_INT 118
13700: PUSH
13701: EMPTY
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: PUSH
13714: EMPTY
13715: LIST
13716: LIST
13717: ST_TO_ADDR
13718: GO 14349
13720: LD_INT 17
13722: DOUBLE
13723: EQUAL
13724: IFTRUE 13728
13726: GO 13952
13728: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
13729: LD_ADDR_VAR 0 2
13733: PUSH
13734: LD_INT 1
13736: PUSH
13737: LD_INT 2
13739: PUSH
13740: LD_INT 3
13742: PUSH
13743: LD_INT 4
13745: PUSH
13746: LD_INT 5
13748: PUSH
13749: LD_INT 6
13751: PUSH
13752: LD_INT 7
13754: PUSH
13755: LD_INT 8
13757: PUSH
13758: LD_INT 9
13760: PUSH
13761: LD_INT 10
13763: PUSH
13764: LD_INT 11
13766: PUSH
13767: LD_INT 12
13769: PUSH
13770: LD_INT 13
13772: PUSH
13773: LD_INT 14
13775: PUSH
13776: LD_INT 15
13778: PUSH
13779: LD_INT 16
13781: PUSH
13782: LD_INT 17
13784: PUSH
13785: LD_INT 18
13787: PUSH
13788: LD_INT 19
13790: PUSH
13791: LD_INT 20
13793: PUSH
13794: LD_INT 21
13796: PUSH
13797: LD_INT 22
13799: PUSH
13800: LD_INT 23
13802: PUSH
13803: LD_INT 24
13805: PUSH
13806: LD_INT 25
13808: PUSH
13809: LD_INT 26
13811: PUSH
13812: LD_INT 27
13814: PUSH
13815: LD_INT 28
13817: PUSH
13818: LD_INT 29
13820: PUSH
13821: LD_INT 30
13823: PUSH
13824: LD_INT 31
13826: PUSH
13827: LD_INT 32
13829: PUSH
13830: LD_INT 33
13832: PUSH
13833: LD_INT 34
13835: PUSH
13836: LD_INT 36
13838: PUSH
13839: EMPTY
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: LIST
13845: LIST
13846: LIST
13847: LIST
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: PUSH
13876: LD_INT 101
13878: PUSH
13879: LD_INT 102
13881: PUSH
13882: LD_INT 103
13884: PUSH
13885: LD_INT 104
13887: PUSH
13888: LD_INT 105
13890: PUSH
13891: LD_INT 106
13893: PUSH
13894: LD_INT 107
13896: PUSH
13897: LD_INT 108
13899: PUSH
13900: LD_INT 109
13902: PUSH
13903: LD_INT 110
13905: PUSH
13906: LD_INT 111
13908: PUSH
13909: LD_INT 112
13911: PUSH
13912: LD_INT 113
13914: PUSH
13915: LD_INT 114
13917: PUSH
13918: LD_INT 116
13920: PUSH
13921: LD_INT 117
13923: PUSH
13924: LD_INT 118
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: LIST
13933: LIST
13934: LIST
13935: LIST
13936: LIST
13937: LIST
13938: LIST
13939: LIST
13940: LIST
13941: LIST
13942: LIST
13943: LIST
13944: LIST
13945: PUSH
13946: EMPTY
13947: LIST
13948: LIST
13949: ST_TO_ADDR
13950: GO 14349
13952: LD_INT 18
13954: DOUBLE
13955: EQUAL
13956: IFTRUE 13960
13958: GO 14108
13960: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
13961: LD_ADDR_VAR 0 2
13965: PUSH
13966: LD_INT 2
13968: PUSH
13969: LD_INT 4
13971: PUSH
13972: LD_INT 5
13974: PUSH
13975: LD_INT 7
13977: PUSH
13978: LD_INT 11
13980: PUSH
13981: LD_INT 12
13983: PUSH
13984: LD_INT 15
13986: PUSH
13987: LD_INT 16
13989: PUSH
13990: LD_INT 20
13992: PUSH
13993: LD_INT 21
13995: PUSH
13996: LD_INT 22
13998: PUSH
13999: LD_INT 23
14001: PUSH
14002: LD_INT 25
14004: PUSH
14005: LD_INT 26
14007: PUSH
14008: LD_INT 30
14010: PUSH
14011: LD_INT 31
14013: PUSH
14014: LD_INT 32
14016: PUSH
14017: LD_INT 33
14019: PUSH
14020: LD_INT 34
14022: PUSH
14023: LD_INT 35
14025: PUSH
14026: LD_INT 36
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: PUSH
14052: LD_INT 101
14054: PUSH
14055: LD_INT 102
14057: PUSH
14058: LD_INT 103
14060: PUSH
14061: LD_INT 106
14063: PUSH
14064: LD_INT 108
14066: PUSH
14067: LD_INT 112
14069: PUSH
14070: LD_INT 113
14072: PUSH
14073: LD_INT 114
14075: PUSH
14076: LD_INT 115
14078: PUSH
14079: LD_INT 116
14081: PUSH
14082: LD_INT 117
14084: PUSH
14085: LD_INT 118
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: ST_TO_ADDR
14106: GO 14349
14108: LD_INT 19
14110: DOUBLE
14111: EQUAL
14112: IFTRUE 14116
14114: GO 14348
14116: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
14117: LD_ADDR_VAR 0 2
14121: PUSH
14122: LD_INT 1
14124: PUSH
14125: LD_INT 2
14127: PUSH
14128: LD_INT 3
14130: PUSH
14131: LD_INT 4
14133: PUSH
14134: LD_INT 5
14136: PUSH
14137: LD_INT 6
14139: PUSH
14140: LD_INT 7
14142: PUSH
14143: LD_INT 8
14145: PUSH
14146: LD_INT 9
14148: PUSH
14149: LD_INT 10
14151: PUSH
14152: LD_INT 11
14154: PUSH
14155: LD_INT 12
14157: PUSH
14158: LD_INT 13
14160: PUSH
14161: LD_INT 14
14163: PUSH
14164: LD_INT 15
14166: PUSH
14167: LD_INT 16
14169: PUSH
14170: LD_INT 17
14172: PUSH
14173: LD_INT 18
14175: PUSH
14176: LD_INT 19
14178: PUSH
14179: LD_INT 20
14181: PUSH
14182: LD_INT 21
14184: PUSH
14185: LD_INT 22
14187: PUSH
14188: LD_INT 23
14190: PUSH
14191: LD_INT 24
14193: PUSH
14194: LD_INT 25
14196: PUSH
14197: LD_INT 26
14199: PUSH
14200: LD_INT 27
14202: PUSH
14203: LD_INT 28
14205: PUSH
14206: LD_INT 29
14208: PUSH
14209: LD_INT 30
14211: PUSH
14212: LD_INT 31
14214: PUSH
14215: LD_INT 32
14217: PUSH
14218: LD_INT 33
14220: PUSH
14221: LD_INT 34
14223: PUSH
14224: LD_INT 35
14226: PUSH
14227: LD_INT 36
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: PUSH
14268: LD_INT 101
14270: PUSH
14271: LD_INT 102
14273: PUSH
14274: LD_INT 103
14276: PUSH
14277: LD_INT 104
14279: PUSH
14280: LD_INT 105
14282: PUSH
14283: LD_INT 106
14285: PUSH
14286: LD_INT 107
14288: PUSH
14289: LD_INT 108
14291: PUSH
14292: LD_INT 109
14294: PUSH
14295: LD_INT 110
14297: PUSH
14298: LD_INT 111
14300: PUSH
14301: LD_INT 112
14303: PUSH
14304: LD_INT 113
14306: PUSH
14307: LD_INT 114
14309: PUSH
14310: LD_INT 115
14312: PUSH
14313: LD_INT 116
14315: PUSH
14316: LD_INT 117
14318: PUSH
14319: LD_INT 118
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: ST_TO_ADDR
14346: GO 14349
14348: POP
// end else
14349: GO 14580
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
14351: LD_ADDR_VAR 0 2
14355: PUSH
14356: LD_INT 1
14358: PUSH
14359: LD_INT 2
14361: PUSH
14362: LD_INT 3
14364: PUSH
14365: LD_INT 4
14367: PUSH
14368: LD_INT 5
14370: PUSH
14371: LD_INT 6
14373: PUSH
14374: LD_INT 7
14376: PUSH
14377: LD_INT 8
14379: PUSH
14380: LD_INT 9
14382: PUSH
14383: LD_INT 10
14385: PUSH
14386: LD_INT 11
14388: PUSH
14389: LD_INT 12
14391: PUSH
14392: LD_INT 13
14394: PUSH
14395: LD_INT 14
14397: PUSH
14398: LD_INT 15
14400: PUSH
14401: LD_INT 16
14403: PUSH
14404: LD_INT 17
14406: PUSH
14407: LD_INT 18
14409: PUSH
14410: LD_INT 19
14412: PUSH
14413: LD_INT 20
14415: PUSH
14416: LD_INT 21
14418: PUSH
14419: LD_INT 22
14421: PUSH
14422: LD_INT 23
14424: PUSH
14425: LD_INT 24
14427: PUSH
14428: LD_INT 25
14430: PUSH
14431: LD_INT 26
14433: PUSH
14434: LD_INT 27
14436: PUSH
14437: LD_INT 28
14439: PUSH
14440: LD_INT 29
14442: PUSH
14443: LD_INT 30
14445: PUSH
14446: LD_INT 31
14448: PUSH
14449: LD_INT 32
14451: PUSH
14452: LD_INT 33
14454: PUSH
14455: LD_INT 34
14457: PUSH
14458: LD_INT 35
14460: PUSH
14461: LD_INT 36
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: PUSH
14502: LD_INT 101
14504: PUSH
14505: LD_INT 102
14507: PUSH
14508: LD_INT 103
14510: PUSH
14511: LD_INT 104
14513: PUSH
14514: LD_INT 105
14516: PUSH
14517: LD_INT 106
14519: PUSH
14520: LD_INT 107
14522: PUSH
14523: LD_INT 108
14525: PUSH
14526: LD_INT 109
14528: PUSH
14529: LD_INT 110
14531: PUSH
14532: LD_INT 111
14534: PUSH
14535: LD_INT 112
14537: PUSH
14538: LD_INT 113
14540: PUSH
14541: LD_INT 114
14543: PUSH
14544: LD_INT 115
14546: PUSH
14547: LD_INT 116
14549: PUSH
14550: LD_INT 117
14552: PUSH
14553: LD_INT 118
14555: PUSH
14556: EMPTY
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: PUSH
14576: EMPTY
14577: LIST
14578: LIST
14579: ST_TO_ADDR
// if result then
14580: LD_VAR 0 2
14584: IFFALSE 15370
// begin normal :=  ;
14586: LD_ADDR_VAR 0 5
14590: PUSH
14591: LD_STRING 
14593: ST_TO_ADDR
// hardcore :=  ;
14594: LD_ADDR_VAR 0 6
14598: PUSH
14599: LD_STRING 
14601: ST_TO_ADDR
// active :=  ;
14602: LD_ADDR_VAR 0 7
14606: PUSH
14607: LD_STRING 
14609: ST_TO_ADDR
// for i = 1 to normalCounter do
14610: LD_ADDR_VAR 0 8
14614: PUSH
14615: DOUBLE
14616: LD_INT 1
14618: DEC
14619: ST_TO_ADDR
14620: LD_EXP 26
14624: PUSH
14625: FOR_TO
14626: IFFALSE 14727
// begin tmp := 0 ;
14628: LD_ADDR_VAR 0 3
14632: PUSH
14633: LD_STRING 0
14635: ST_TO_ADDR
// if result [ 1 ] then
14636: LD_VAR 0 2
14640: PUSH
14641: LD_INT 1
14643: ARRAY
14644: IFFALSE 14709
// if result [ 1 ] [ 1 ] = i then
14646: LD_VAR 0 2
14650: PUSH
14651: LD_INT 1
14653: ARRAY
14654: PUSH
14655: LD_INT 1
14657: ARRAY
14658: PUSH
14659: LD_VAR 0 8
14663: EQUAL
14664: IFFALSE 14709
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14666: LD_ADDR_VAR 0 2
14670: PUSH
14671: LD_VAR 0 2
14675: PPUSH
14676: LD_INT 1
14678: PPUSH
14679: LD_VAR 0 2
14683: PUSH
14684: LD_INT 1
14686: ARRAY
14687: PPUSH
14688: LD_INT 1
14690: PPUSH
14691: CALL_OW 3
14695: PPUSH
14696: CALL_OW 1
14700: ST_TO_ADDR
// tmp := 1 ;
14701: LD_ADDR_VAR 0 3
14705: PUSH
14706: LD_STRING 1
14708: ST_TO_ADDR
// end ; normal := normal & tmp ;
14709: LD_ADDR_VAR 0 5
14713: PUSH
14714: LD_VAR 0 5
14718: PUSH
14719: LD_VAR 0 3
14723: STR
14724: ST_TO_ADDR
// end ;
14725: GO 14625
14727: POP
14728: POP
// for i = 1 to hardcoreCounter do
14729: LD_ADDR_VAR 0 8
14733: PUSH
14734: DOUBLE
14735: LD_INT 1
14737: DEC
14738: ST_TO_ADDR
14739: LD_EXP 27
14743: PUSH
14744: FOR_TO
14745: IFFALSE 14850
// begin tmp := 0 ;
14747: LD_ADDR_VAR 0 3
14751: PUSH
14752: LD_STRING 0
14754: ST_TO_ADDR
// if result [ 2 ] then
14755: LD_VAR 0 2
14759: PUSH
14760: LD_INT 2
14762: ARRAY
14763: IFFALSE 14832
// if result [ 2 ] [ 1 ] = 100 + i then
14765: LD_VAR 0 2
14769: PUSH
14770: LD_INT 2
14772: ARRAY
14773: PUSH
14774: LD_INT 1
14776: ARRAY
14777: PUSH
14778: LD_INT 100
14780: PUSH
14781: LD_VAR 0 8
14785: PLUS
14786: EQUAL
14787: IFFALSE 14832
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14789: LD_ADDR_VAR 0 2
14793: PUSH
14794: LD_VAR 0 2
14798: PPUSH
14799: LD_INT 2
14801: PPUSH
14802: LD_VAR 0 2
14806: PUSH
14807: LD_INT 2
14809: ARRAY
14810: PPUSH
14811: LD_INT 1
14813: PPUSH
14814: CALL_OW 3
14818: PPUSH
14819: CALL_OW 1
14823: ST_TO_ADDR
// tmp := 1 ;
14824: LD_ADDR_VAR 0 3
14828: PUSH
14829: LD_STRING 1
14831: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14832: LD_ADDR_VAR 0 6
14836: PUSH
14837: LD_VAR 0 6
14841: PUSH
14842: LD_VAR 0 3
14846: STR
14847: ST_TO_ADDR
// end ;
14848: GO 14744
14850: POP
14851: POP
// if isGameLoad then
14852: LD_VAR 0 1
14856: IFFALSE 15331
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
14858: LD_ADDR_VAR 0 4
14862: PUSH
14863: LD_EXP 30
14867: PUSH
14868: LD_EXP 29
14872: PUSH
14873: LD_EXP 31
14877: PUSH
14878: LD_EXP 28
14882: PUSH
14883: LD_EXP 32
14887: PUSH
14888: LD_EXP 33
14892: PUSH
14893: LD_EXP 34
14897: PUSH
14898: LD_EXP 35
14902: PUSH
14903: LD_EXP 36
14907: PUSH
14908: LD_EXP 37
14912: PUSH
14913: LD_EXP 38
14917: PUSH
14918: LD_EXP 39
14922: PUSH
14923: LD_EXP 40
14927: PUSH
14928: LD_EXP 41
14932: PUSH
14933: LD_EXP 49
14937: PUSH
14938: LD_EXP 50
14942: PUSH
14943: LD_EXP 51
14947: PUSH
14948: LD_EXP 52
14952: PUSH
14953: LD_EXP 54
14957: PUSH
14958: LD_EXP 55
14962: PUSH
14963: LD_EXP 56
14967: PUSH
14968: LD_EXP 59
14972: PUSH
14973: LD_EXP 61
14977: PUSH
14978: LD_EXP 62
14982: PUSH
14983: LD_EXP 63
14987: PUSH
14988: LD_EXP 65
14992: PUSH
14993: LD_EXP 66
14997: PUSH
14998: LD_EXP 69
15002: PUSH
15003: LD_EXP 70
15007: PUSH
15008: LD_EXP 71
15012: PUSH
15013: LD_EXP 72
15017: PUSH
15018: LD_EXP 73
15022: PUSH
15023: LD_EXP 74
15027: PUSH
15028: LD_EXP 75
15032: PUSH
15033: LD_EXP 76
15037: PUSH
15038: LD_EXP 77
15042: PUSH
15043: LD_EXP 42
15047: PUSH
15048: LD_EXP 43
15052: PUSH
15053: LD_EXP 46
15057: PUSH
15058: LD_EXP 47
15062: PUSH
15063: LD_EXP 48
15067: PUSH
15068: LD_EXP 44
15072: PUSH
15073: LD_EXP 45
15077: PUSH
15078: LD_EXP 53
15082: PUSH
15083: LD_EXP 57
15087: PUSH
15088: LD_EXP 58
15092: PUSH
15093: LD_EXP 60
15097: PUSH
15098: LD_EXP 64
15102: PUSH
15103: LD_EXP 67
15107: PUSH
15108: LD_EXP 68
15112: PUSH
15113: LD_EXP 78
15117: PUSH
15118: LD_EXP 79
15122: PUSH
15123: LD_EXP 80
15127: PUSH
15128: LD_EXP 81
15132: PUSH
15133: EMPTY
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: ST_TO_ADDR
// tmp :=  ;
15189: LD_ADDR_VAR 0 3
15193: PUSH
15194: LD_STRING 
15196: ST_TO_ADDR
// for i = 1 to normalCounter do
15197: LD_ADDR_VAR 0 8
15201: PUSH
15202: DOUBLE
15203: LD_INT 1
15205: DEC
15206: ST_TO_ADDR
15207: LD_EXP 26
15211: PUSH
15212: FOR_TO
15213: IFFALSE 15249
// begin if flags [ i ] then
15215: LD_VAR 0 4
15219: PUSH
15220: LD_VAR 0 8
15224: ARRAY
15225: IFFALSE 15247
// tmp := tmp & i & ; ;
15227: LD_ADDR_VAR 0 3
15231: PUSH
15232: LD_VAR 0 3
15236: PUSH
15237: LD_VAR 0 8
15241: STR
15242: PUSH
15243: LD_STRING ;
15245: STR
15246: ST_TO_ADDR
// end ;
15247: GO 15212
15249: POP
15250: POP
// for i = 1 to hardcoreCounter do
15251: LD_ADDR_VAR 0 8
15255: PUSH
15256: DOUBLE
15257: LD_INT 1
15259: DEC
15260: ST_TO_ADDR
15261: LD_EXP 27
15265: PUSH
15266: FOR_TO
15267: IFFALSE 15313
// begin if flags [ normalCounter + i ] then
15269: LD_VAR 0 4
15273: PUSH
15274: LD_EXP 26
15278: PUSH
15279: LD_VAR 0 8
15283: PLUS
15284: ARRAY
15285: IFFALSE 15311
// tmp := tmp & ( 100 + i ) & ; ;
15287: LD_ADDR_VAR 0 3
15291: PUSH
15292: LD_VAR 0 3
15296: PUSH
15297: LD_INT 100
15299: PUSH
15300: LD_VAR 0 8
15304: PLUS
15305: STR
15306: PUSH
15307: LD_STRING ;
15309: STR
15310: ST_TO_ADDR
// end ;
15311: GO 15266
15313: POP
15314: POP
// if tmp then
15315: LD_VAR 0 3
15319: IFFALSE 15331
// active := tmp ;
15321: LD_ADDR_VAR 0 7
15325: PUSH
15326: LD_VAR 0 3
15330: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
15331: LD_STRING getStreamItemsFromMission("
15333: PUSH
15334: LD_VAR 0 5
15338: STR
15339: PUSH
15340: LD_STRING ","
15342: STR
15343: PUSH
15344: LD_VAR 0 6
15348: STR
15349: PUSH
15350: LD_STRING ","
15352: STR
15353: PUSH
15354: LD_VAR 0 7
15358: STR
15359: PUSH
15360: LD_STRING ")
15362: STR
15363: PPUSH
15364: CALL_OW 559
// end else
15368: GO 15377
// ToLua ( getStreamItemsFromMission("","","") ) ;
15370: LD_STRING getStreamItemsFromMission("","","")
15372: PPUSH
15373: CALL_OW 559
// end ;
15377: LD_VAR 0 2
15381: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15382: LD_EXP 25
15386: PUSH
15387: LD_EXP 30
15391: AND
15392: IFFALSE 15516
15394: GO 15396
15396: DISABLE
15397: LD_INT 0
15399: PPUSH
15400: PPUSH
// begin enable ;
15401: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15402: LD_ADDR_VAR 0 2
15406: PUSH
15407: LD_INT 22
15409: PUSH
15410: LD_OWVAR 2
15414: PUSH
15415: EMPTY
15416: LIST
15417: LIST
15418: PUSH
15419: LD_INT 2
15421: PUSH
15422: LD_INT 34
15424: PUSH
15425: LD_INT 7
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: PUSH
15432: LD_INT 34
15434: PUSH
15435: LD_INT 45
15437: PUSH
15438: EMPTY
15439: LIST
15440: LIST
15441: PUSH
15442: LD_INT 34
15444: PUSH
15445: LD_INT 28
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: PUSH
15452: LD_INT 34
15454: PUSH
15455: LD_INT 47
15457: PUSH
15458: EMPTY
15459: LIST
15460: LIST
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: PUSH
15469: EMPTY
15470: LIST
15471: LIST
15472: PPUSH
15473: CALL_OW 69
15477: ST_TO_ADDR
// if not tmp then
15478: LD_VAR 0 2
15482: NOT
15483: IFFALSE 15487
// exit ;
15485: GO 15516
// for i in tmp do
15487: LD_ADDR_VAR 0 1
15491: PUSH
15492: LD_VAR 0 2
15496: PUSH
15497: FOR_IN
15498: IFFALSE 15514
// begin SetLives ( i , 0 ) ;
15500: LD_VAR 0 1
15504: PPUSH
15505: LD_INT 0
15507: PPUSH
15508: CALL_OW 234
// end ;
15512: GO 15497
15514: POP
15515: POP
// end ;
15516: PPOPN 2
15518: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15519: LD_EXP 25
15523: PUSH
15524: LD_EXP 31
15528: AND
15529: IFFALSE 15613
15531: GO 15533
15533: DISABLE
15534: LD_INT 0
15536: PPUSH
15537: PPUSH
// begin enable ;
15538: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15539: LD_ADDR_VAR 0 2
15543: PUSH
15544: LD_INT 22
15546: PUSH
15547: LD_OWVAR 2
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PUSH
15556: LD_INT 32
15558: PUSH
15559: LD_INT 3
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: PUSH
15566: EMPTY
15567: LIST
15568: LIST
15569: PPUSH
15570: CALL_OW 69
15574: ST_TO_ADDR
// if not tmp then
15575: LD_VAR 0 2
15579: NOT
15580: IFFALSE 15584
// exit ;
15582: GO 15613
// for i in tmp do
15584: LD_ADDR_VAR 0 1
15588: PUSH
15589: LD_VAR 0 2
15593: PUSH
15594: FOR_IN
15595: IFFALSE 15611
// begin SetLives ( i , 0 ) ;
15597: LD_VAR 0 1
15601: PPUSH
15602: LD_INT 0
15604: PPUSH
15605: CALL_OW 234
// end ;
15609: GO 15594
15611: POP
15612: POP
// end ;
15613: PPOPN 2
15615: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15616: LD_EXP 25
15620: PUSH
15621: LD_EXP 28
15625: AND
15626: IFFALSE 15719
15628: GO 15630
15630: DISABLE
15631: LD_INT 0
15633: PPUSH
// begin enable ;
15634: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15635: LD_ADDR_VAR 0 1
15639: PUSH
15640: LD_INT 22
15642: PUSH
15643: LD_OWVAR 2
15647: PUSH
15648: EMPTY
15649: LIST
15650: LIST
15651: PUSH
15652: LD_INT 2
15654: PUSH
15655: LD_INT 25
15657: PUSH
15658: LD_INT 5
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: PUSH
15665: LD_INT 25
15667: PUSH
15668: LD_INT 9
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: PUSH
15675: LD_INT 25
15677: PUSH
15678: LD_INT 8
15680: PUSH
15681: EMPTY
15682: LIST
15683: LIST
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: PUSH
15691: EMPTY
15692: LIST
15693: LIST
15694: PPUSH
15695: CALL_OW 69
15699: PUSH
15700: FOR_IN
15701: IFFALSE 15717
// begin SetClass ( i , 1 ) ;
15703: LD_VAR 0 1
15707: PPUSH
15708: LD_INT 1
15710: PPUSH
15711: CALL_OW 336
// end ;
15715: GO 15700
15717: POP
15718: POP
// end ;
15719: PPOPN 1
15721: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15722: LD_EXP 25
15726: PUSH
15727: LD_EXP 29
15731: AND
15732: PUSH
15733: LD_OWVAR 65
15737: PUSH
15738: LD_INT 7
15740: LESS
15741: AND
15742: IFFALSE 15756
15744: GO 15746
15746: DISABLE
// begin enable ;
15747: ENABLE
// game_speed := 7 ;
15748: LD_ADDR_OWVAR 65
15752: PUSH
15753: LD_INT 7
15755: ST_TO_ADDR
// end ;
15756: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15757: LD_EXP 25
15761: PUSH
15762: LD_EXP 32
15766: AND
15767: IFFALSE 15969
15769: GO 15771
15771: DISABLE
15772: LD_INT 0
15774: PPUSH
15775: PPUSH
15776: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15777: LD_ADDR_VAR 0 3
15781: PUSH
15782: LD_INT 81
15784: PUSH
15785: LD_OWVAR 2
15789: PUSH
15790: EMPTY
15791: LIST
15792: LIST
15793: PUSH
15794: LD_INT 21
15796: PUSH
15797: LD_INT 1
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: PUSH
15804: EMPTY
15805: LIST
15806: LIST
15807: PPUSH
15808: CALL_OW 69
15812: ST_TO_ADDR
// if not tmp then
15813: LD_VAR 0 3
15817: NOT
15818: IFFALSE 15822
// exit ;
15820: GO 15969
// if tmp > 5 then
15822: LD_VAR 0 3
15826: PUSH
15827: LD_INT 5
15829: GREATER
15830: IFFALSE 15842
// k := 5 else
15832: LD_ADDR_VAR 0 2
15836: PUSH
15837: LD_INT 5
15839: ST_TO_ADDR
15840: GO 15852
// k := tmp ;
15842: LD_ADDR_VAR 0 2
15846: PUSH
15847: LD_VAR 0 3
15851: ST_TO_ADDR
// for i := 1 to k do
15852: LD_ADDR_VAR 0 1
15856: PUSH
15857: DOUBLE
15858: LD_INT 1
15860: DEC
15861: ST_TO_ADDR
15862: LD_VAR 0 2
15866: PUSH
15867: FOR_TO
15868: IFFALSE 15967
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15870: LD_VAR 0 3
15874: PUSH
15875: LD_VAR 0 1
15879: ARRAY
15880: PPUSH
15881: LD_VAR 0 1
15885: PUSH
15886: LD_INT 4
15888: MOD
15889: PUSH
15890: LD_INT 1
15892: PLUS
15893: PPUSH
15894: CALL_OW 259
15898: PUSH
15899: LD_INT 10
15901: LESS
15902: IFFALSE 15965
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15904: LD_VAR 0 3
15908: PUSH
15909: LD_VAR 0 1
15913: ARRAY
15914: PPUSH
15915: LD_VAR 0 1
15919: PUSH
15920: LD_INT 4
15922: MOD
15923: PUSH
15924: LD_INT 1
15926: PLUS
15927: PPUSH
15928: LD_VAR 0 3
15932: PUSH
15933: LD_VAR 0 1
15937: ARRAY
15938: PPUSH
15939: LD_VAR 0 1
15943: PUSH
15944: LD_INT 4
15946: MOD
15947: PUSH
15948: LD_INT 1
15950: PLUS
15951: PPUSH
15952: CALL_OW 259
15956: PUSH
15957: LD_INT 1
15959: PLUS
15960: PPUSH
15961: CALL_OW 237
15965: GO 15867
15967: POP
15968: POP
// end ;
15969: PPOPN 3
15971: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15972: LD_EXP 25
15976: PUSH
15977: LD_EXP 33
15981: AND
15982: IFFALSE 16002
15984: GO 15986
15986: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15987: LD_INT 4
15989: PPUSH
15990: LD_OWVAR 2
15994: PPUSH
15995: LD_INT 0
15997: PPUSH
15998: CALL_OW 324
16002: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16003: LD_EXP 25
16007: PUSH
16008: LD_EXP 62
16012: AND
16013: IFFALSE 16033
16015: GO 16017
16017: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16018: LD_INT 19
16020: PPUSH
16021: LD_OWVAR 2
16025: PPUSH
16026: LD_INT 0
16028: PPUSH
16029: CALL_OW 324
16033: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16034: LD_EXP 25
16038: PUSH
16039: LD_EXP 34
16043: AND
16044: IFFALSE 16146
16046: GO 16048
16048: DISABLE
16049: LD_INT 0
16051: PPUSH
16052: PPUSH
// begin enable ;
16053: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16054: LD_ADDR_VAR 0 2
16058: PUSH
16059: LD_INT 22
16061: PUSH
16062: LD_OWVAR 2
16066: PUSH
16067: EMPTY
16068: LIST
16069: LIST
16070: PUSH
16071: LD_INT 2
16073: PUSH
16074: LD_INT 34
16076: PUSH
16077: LD_INT 11
16079: PUSH
16080: EMPTY
16081: LIST
16082: LIST
16083: PUSH
16084: LD_INT 34
16086: PUSH
16087: LD_INT 30
16089: PUSH
16090: EMPTY
16091: LIST
16092: LIST
16093: PUSH
16094: EMPTY
16095: LIST
16096: LIST
16097: LIST
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: PPUSH
16103: CALL_OW 69
16107: ST_TO_ADDR
// if not tmp then
16108: LD_VAR 0 2
16112: NOT
16113: IFFALSE 16117
// exit ;
16115: GO 16146
// for i in tmp do
16117: LD_ADDR_VAR 0 1
16121: PUSH
16122: LD_VAR 0 2
16126: PUSH
16127: FOR_IN
16128: IFFALSE 16144
// begin SetLives ( i , 0 ) ;
16130: LD_VAR 0 1
16134: PPUSH
16135: LD_INT 0
16137: PPUSH
16138: CALL_OW 234
// end ;
16142: GO 16127
16144: POP
16145: POP
// end ;
16146: PPOPN 2
16148: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16149: LD_EXP 25
16153: PUSH
16154: LD_EXP 35
16158: AND
16159: IFFALSE 16179
16161: GO 16163
16163: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16164: LD_INT 32
16166: PPUSH
16167: LD_OWVAR 2
16171: PPUSH
16172: LD_INT 0
16174: PPUSH
16175: CALL_OW 324
16179: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16180: LD_EXP 25
16184: PUSH
16185: LD_EXP 36
16189: AND
16190: IFFALSE 16371
16192: GO 16194
16194: DISABLE
16195: LD_INT 0
16197: PPUSH
16198: PPUSH
16199: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16200: LD_ADDR_VAR 0 2
16204: PUSH
16205: LD_INT 22
16207: PUSH
16208: LD_OWVAR 2
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: PUSH
16217: LD_INT 33
16219: PUSH
16220: LD_INT 3
16222: PUSH
16223: EMPTY
16224: LIST
16225: LIST
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: PPUSH
16231: CALL_OW 69
16235: ST_TO_ADDR
// if not tmp then
16236: LD_VAR 0 2
16240: NOT
16241: IFFALSE 16245
// exit ;
16243: GO 16371
// side := 0 ;
16245: LD_ADDR_VAR 0 3
16249: PUSH
16250: LD_INT 0
16252: ST_TO_ADDR
// for i := 1 to 8 do
16253: LD_ADDR_VAR 0 1
16257: PUSH
16258: DOUBLE
16259: LD_INT 1
16261: DEC
16262: ST_TO_ADDR
16263: LD_INT 8
16265: PUSH
16266: FOR_TO
16267: IFFALSE 16315
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16269: LD_OWVAR 2
16273: PUSH
16274: LD_VAR 0 1
16278: NONEQUAL
16279: PUSH
16280: LD_OWVAR 2
16284: PPUSH
16285: LD_VAR 0 1
16289: PPUSH
16290: CALL_OW 81
16294: PUSH
16295: LD_INT 2
16297: EQUAL
16298: AND
16299: IFFALSE 16313
// begin side := i ;
16301: LD_ADDR_VAR 0 3
16305: PUSH
16306: LD_VAR 0 1
16310: ST_TO_ADDR
// break ;
16311: GO 16315
// end ;
16313: GO 16266
16315: POP
16316: POP
// if not side then
16317: LD_VAR 0 3
16321: NOT
16322: IFFALSE 16326
// exit ;
16324: GO 16371
// for i := 1 to tmp do
16326: LD_ADDR_VAR 0 1
16330: PUSH
16331: DOUBLE
16332: LD_INT 1
16334: DEC
16335: ST_TO_ADDR
16336: LD_VAR 0 2
16340: PUSH
16341: FOR_TO
16342: IFFALSE 16369
// if Prob ( 60 ) then
16344: LD_INT 60
16346: PPUSH
16347: CALL_OW 13
16351: IFFALSE 16367
// SetSide ( i , side ) ;
16353: LD_VAR 0 1
16357: PPUSH
16358: LD_VAR 0 3
16362: PPUSH
16363: CALL_OW 235
16367: GO 16341
16369: POP
16370: POP
// end ;
16371: PPOPN 3
16373: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16374: LD_EXP 25
16378: PUSH
16379: LD_EXP 38
16383: AND
16384: IFFALSE 16503
16386: GO 16388
16388: DISABLE
16389: LD_INT 0
16391: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16392: LD_ADDR_VAR 0 1
16396: PUSH
16397: LD_INT 22
16399: PUSH
16400: LD_OWVAR 2
16404: PUSH
16405: EMPTY
16406: LIST
16407: LIST
16408: PUSH
16409: LD_INT 21
16411: PUSH
16412: LD_INT 1
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: PUSH
16419: LD_INT 3
16421: PUSH
16422: LD_INT 23
16424: PUSH
16425: LD_INT 0
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: PUSH
16436: EMPTY
16437: LIST
16438: LIST
16439: LIST
16440: PPUSH
16441: CALL_OW 69
16445: PUSH
16446: FOR_IN
16447: IFFALSE 16501
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16449: LD_VAR 0 1
16453: PPUSH
16454: CALL_OW 257
16458: PUSH
16459: LD_INT 1
16461: PUSH
16462: LD_INT 2
16464: PUSH
16465: LD_INT 3
16467: PUSH
16468: LD_INT 4
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: LIST
16475: LIST
16476: IN
16477: IFFALSE 16499
// SetClass ( un , rand ( 1 , 4 ) ) ;
16479: LD_VAR 0 1
16483: PPUSH
16484: LD_INT 1
16486: PPUSH
16487: LD_INT 4
16489: PPUSH
16490: CALL_OW 12
16494: PPUSH
16495: CALL_OW 336
16499: GO 16446
16501: POP
16502: POP
// end ;
16503: PPOPN 1
16505: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16506: LD_EXP 25
16510: PUSH
16511: LD_EXP 37
16515: AND
16516: IFFALSE 16595
16518: GO 16520
16520: DISABLE
16521: LD_INT 0
16523: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16524: LD_ADDR_VAR 0 1
16528: PUSH
16529: LD_INT 22
16531: PUSH
16532: LD_OWVAR 2
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: PUSH
16541: LD_INT 21
16543: PUSH
16544: LD_INT 3
16546: PUSH
16547: EMPTY
16548: LIST
16549: LIST
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: PPUSH
16555: CALL_OW 69
16559: ST_TO_ADDR
// if not tmp then
16560: LD_VAR 0 1
16564: NOT
16565: IFFALSE 16569
// exit ;
16567: GO 16595
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16569: LD_VAR 0 1
16573: PUSH
16574: LD_INT 1
16576: PPUSH
16577: LD_VAR 0 1
16581: PPUSH
16582: CALL_OW 12
16586: ARRAY
16587: PPUSH
16588: LD_INT 100
16590: PPUSH
16591: CALL_OW 234
// end ;
16595: PPOPN 1
16597: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16598: LD_EXP 25
16602: PUSH
16603: LD_EXP 39
16607: AND
16608: IFFALSE 16706
16610: GO 16612
16612: DISABLE
16613: LD_INT 0
16615: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16616: LD_ADDR_VAR 0 1
16620: PUSH
16621: LD_INT 22
16623: PUSH
16624: LD_OWVAR 2
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: PUSH
16633: LD_INT 21
16635: PUSH
16636: LD_INT 1
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: PUSH
16643: EMPTY
16644: LIST
16645: LIST
16646: PPUSH
16647: CALL_OW 69
16651: ST_TO_ADDR
// if not tmp then
16652: LD_VAR 0 1
16656: NOT
16657: IFFALSE 16661
// exit ;
16659: GO 16706
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16661: LD_VAR 0 1
16665: PUSH
16666: LD_INT 1
16668: PPUSH
16669: LD_VAR 0 1
16673: PPUSH
16674: CALL_OW 12
16678: ARRAY
16679: PPUSH
16680: LD_INT 1
16682: PPUSH
16683: LD_INT 4
16685: PPUSH
16686: CALL_OW 12
16690: PPUSH
16691: LD_INT 3000
16693: PPUSH
16694: LD_INT 9000
16696: PPUSH
16697: CALL_OW 12
16701: PPUSH
16702: CALL_OW 492
// end ;
16706: PPOPN 1
16708: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16709: LD_EXP 25
16713: PUSH
16714: LD_EXP 40
16718: AND
16719: IFFALSE 16739
16721: GO 16723
16723: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16724: LD_INT 1
16726: PPUSH
16727: LD_OWVAR 2
16731: PPUSH
16732: LD_INT 0
16734: PPUSH
16735: CALL_OW 324
16739: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16740: LD_EXP 25
16744: PUSH
16745: LD_EXP 41
16749: AND
16750: IFFALSE 16833
16752: GO 16754
16754: DISABLE
16755: LD_INT 0
16757: PPUSH
16758: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16759: LD_ADDR_VAR 0 2
16763: PUSH
16764: LD_INT 22
16766: PUSH
16767: LD_OWVAR 2
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: PUSH
16776: LD_INT 21
16778: PUSH
16779: LD_INT 3
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: PUSH
16786: EMPTY
16787: LIST
16788: LIST
16789: PPUSH
16790: CALL_OW 69
16794: ST_TO_ADDR
// if not tmp then
16795: LD_VAR 0 2
16799: NOT
16800: IFFALSE 16804
// exit ;
16802: GO 16833
// for i in tmp do
16804: LD_ADDR_VAR 0 1
16808: PUSH
16809: LD_VAR 0 2
16813: PUSH
16814: FOR_IN
16815: IFFALSE 16831
// SetBLevel ( i , 10 ) ;
16817: LD_VAR 0 1
16821: PPUSH
16822: LD_INT 10
16824: PPUSH
16825: CALL_OW 241
16829: GO 16814
16831: POP
16832: POP
// end ;
16833: PPOPN 2
16835: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16836: LD_EXP 25
16840: PUSH
16841: LD_EXP 42
16845: AND
16846: IFFALSE 16957
16848: GO 16850
16850: DISABLE
16851: LD_INT 0
16853: PPUSH
16854: PPUSH
16855: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16856: LD_ADDR_VAR 0 3
16860: PUSH
16861: LD_INT 22
16863: PUSH
16864: LD_OWVAR 2
16868: PUSH
16869: EMPTY
16870: LIST
16871: LIST
16872: PUSH
16873: LD_INT 25
16875: PUSH
16876: LD_INT 1
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: PPUSH
16887: CALL_OW 69
16891: ST_TO_ADDR
// if not tmp then
16892: LD_VAR 0 3
16896: NOT
16897: IFFALSE 16901
// exit ;
16899: GO 16957
// un := tmp [ rand ( 1 , tmp ) ] ;
16901: LD_ADDR_VAR 0 2
16905: PUSH
16906: LD_VAR 0 3
16910: PUSH
16911: LD_INT 1
16913: PPUSH
16914: LD_VAR 0 3
16918: PPUSH
16919: CALL_OW 12
16923: ARRAY
16924: ST_TO_ADDR
// if Crawls ( un ) then
16925: LD_VAR 0 2
16929: PPUSH
16930: CALL_OW 318
16934: IFFALSE 16945
// ComWalk ( un ) ;
16936: LD_VAR 0 2
16940: PPUSH
16941: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16945: LD_VAR 0 2
16949: PPUSH
16950: LD_INT 5
16952: PPUSH
16953: CALL_OW 336
// end ;
16957: PPOPN 3
16959: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
16960: LD_EXP 25
16964: PUSH
16965: LD_EXP 43
16969: AND
16970: PUSH
16971: LD_OWVAR 67
16975: PUSH
16976: LD_INT 4
16978: LESS
16979: AND
16980: IFFALSE 16999
16982: GO 16984
16984: DISABLE
// begin Difficulty := Difficulty + 1 ;
16985: LD_ADDR_OWVAR 67
16989: PUSH
16990: LD_OWVAR 67
16994: PUSH
16995: LD_INT 1
16997: PLUS
16998: ST_TO_ADDR
// end ;
16999: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17000: LD_EXP 25
17004: PUSH
17005: LD_EXP 44
17009: AND
17010: IFFALSE 17113
17012: GO 17014
17014: DISABLE
17015: LD_INT 0
17017: PPUSH
// begin for i := 1 to 5 do
17018: LD_ADDR_VAR 0 1
17022: PUSH
17023: DOUBLE
17024: LD_INT 1
17026: DEC
17027: ST_TO_ADDR
17028: LD_INT 5
17030: PUSH
17031: FOR_TO
17032: IFFALSE 17111
// begin uc_nation := nation_nature ;
17034: LD_ADDR_OWVAR 21
17038: PUSH
17039: LD_INT 0
17041: ST_TO_ADDR
// uc_side := 0 ;
17042: LD_ADDR_OWVAR 20
17046: PUSH
17047: LD_INT 0
17049: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17050: LD_ADDR_OWVAR 29
17054: PUSH
17055: LD_INT 12
17057: PUSH
17058: LD_INT 12
17060: PUSH
17061: EMPTY
17062: LIST
17063: LIST
17064: ST_TO_ADDR
// hc_agressivity := 20 ;
17065: LD_ADDR_OWVAR 35
17069: PUSH
17070: LD_INT 20
17072: ST_TO_ADDR
// hc_class := class_tiger ;
17073: LD_ADDR_OWVAR 28
17077: PUSH
17078: LD_INT 14
17080: ST_TO_ADDR
// hc_gallery :=  ;
17081: LD_ADDR_OWVAR 33
17085: PUSH
17086: LD_STRING 
17088: ST_TO_ADDR
// hc_name :=  ;
17089: LD_ADDR_OWVAR 26
17093: PUSH
17094: LD_STRING 
17096: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17097: CALL_OW 44
17101: PPUSH
17102: LD_INT 0
17104: PPUSH
17105: CALL_OW 51
// end ;
17109: GO 17031
17111: POP
17112: POP
// end ;
17113: PPOPN 1
17115: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17116: LD_EXP 25
17120: PUSH
17121: LD_EXP 45
17125: AND
17126: IFFALSE 17135
17128: GO 17130
17130: DISABLE
// StreamSibBomb ;
17131: CALL 17136 0 0
17135: END
// export function StreamSibBomb ; var i , x , y ; begin
17136: LD_INT 0
17138: PPUSH
17139: PPUSH
17140: PPUSH
17141: PPUSH
// result := false ;
17142: LD_ADDR_VAR 0 1
17146: PUSH
17147: LD_INT 0
17149: ST_TO_ADDR
// for i := 1 to 16 do
17150: LD_ADDR_VAR 0 2
17154: PUSH
17155: DOUBLE
17156: LD_INT 1
17158: DEC
17159: ST_TO_ADDR
17160: LD_INT 16
17162: PUSH
17163: FOR_TO
17164: IFFALSE 17363
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17166: LD_ADDR_VAR 0 3
17170: PUSH
17171: LD_INT 10
17173: PUSH
17174: LD_INT 20
17176: PUSH
17177: LD_INT 30
17179: PUSH
17180: LD_INT 40
17182: PUSH
17183: LD_INT 50
17185: PUSH
17186: LD_INT 60
17188: PUSH
17189: LD_INT 70
17191: PUSH
17192: LD_INT 80
17194: PUSH
17195: LD_INT 90
17197: PUSH
17198: LD_INT 100
17200: PUSH
17201: LD_INT 110
17203: PUSH
17204: LD_INT 120
17206: PUSH
17207: LD_INT 130
17209: PUSH
17210: LD_INT 140
17212: PUSH
17213: LD_INT 150
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: PUSH
17233: LD_INT 1
17235: PPUSH
17236: LD_INT 15
17238: PPUSH
17239: CALL_OW 12
17243: ARRAY
17244: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17245: LD_ADDR_VAR 0 4
17249: PUSH
17250: LD_INT 10
17252: PUSH
17253: LD_INT 20
17255: PUSH
17256: LD_INT 30
17258: PUSH
17259: LD_INT 40
17261: PUSH
17262: LD_INT 50
17264: PUSH
17265: LD_INT 60
17267: PUSH
17268: LD_INT 70
17270: PUSH
17271: LD_INT 80
17273: PUSH
17274: LD_INT 90
17276: PUSH
17277: LD_INT 100
17279: PUSH
17280: LD_INT 110
17282: PUSH
17283: LD_INT 120
17285: PUSH
17286: LD_INT 130
17288: PUSH
17289: LD_INT 140
17291: PUSH
17292: LD_INT 150
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: PUSH
17312: LD_INT 1
17314: PPUSH
17315: LD_INT 15
17317: PPUSH
17318: CALL_OW 12
17322: ARRAY
17323: ST_TO_ADDR
// if ValidHex ( x , y ) then
17324: LD_VAR 0 3
17328: PPUSH
17329: LD_VAR 0 4
17333: PPUSH
17334: CALL_OW 488
17338: IFFALSE 17361
// begin result := [ x , y ] ;
17340: LD_ADDR_VAR 0 1
17344: PUSH
17345: LD_VAR 0 3
17349: PUSH
17350: LD_VAR 0 4
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: ST_TO_ADDR
// break ;
17359: GO 17363
// end ; end ;
17361: GO 17163
17363: POP
17364: POP
// if result then
17365: LD_VAR 0 1
17369: IFFALSE 17429
// begin ToLua ( playSibBomb() ) ;
17371: LD_STRING playSibBomb()
17373: PPUSH
17374: CALL_OW 559
// wait ( 0 0$14 ) ;
17378: LD_INT 490
17380: PPUSH
17381: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17385: LD_VAR 0 1
17389: PUSH
17390: LD_INT 1
17392: ARRAY
17393: PPUSH
17394: LD_VAR 0 1
17398: PUSH
17399: LD_INT 2
17401: ARRAY
17402: PPUSH
17403: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17407: LD_VAR 0 1
17411: PUSH
17412: LD_INT 1
17414: ARRAY
17415: PPUSH
17416: LD_VAR 0 1
17420: PUSH
17421: LD_INT 2
17423: ARRAY
17424: PPUSH
17425: CALL_OW 429
// end ; end ;
17429: LD_VAR 0 1
17433: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17434: LD_EXP 25
17438: PUSH
17439: LD_EXP 47
17443: AND
17444: IFFALSE 17456
17446: GO 17448
17448: DISABLE
// YouLost (  ) ;
17449: LD_STRING 
17451: PPUSH
17452: CALL_OW 104
17456: END
// every 0 0$1 trigger StreamModeActive and sFog do
17457: LD_EXP 25
17461: PUSH
17462: LD_EXP 46
17466: AND
17467: IFFALSE 17481
17469: GO 17471
17471: DISABLE
// FogOff ( your_side ) ;
17472: LD_OWVAR 2
17476: PPUSH
17477: CALL_OW 344
17481: END
// every 0 0$1 trigger StreamModeActive and sSun do
17482: LD_EXP 25
17486: PUSH
17487: LD_EXP 48
17491: AND
17492: IFFALSE 17520
17494: GO 17496
17496: DISABLE
// begin solar_recharge_percent := 0 ;
17497: LD_ADDR_OWVAR 79
17501: PUSH
17502: LD_INT 0
17504: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17505: LD_INT 10500
17507: PPUSH
17508: CALL_OW 67
// solar_recharge_percent := 100 ;
17512: LD_ADDR_OWVAR 79
17516: PUSH
17517: LD_INT 100
17519: ST_TO_ADDR
// end ;
17520: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17521: LD_EXP 25
17525: PUSH
17526: LD_EXP 49
17530: AND
17531: IFFALSE 17770
17533: GO 17535
17535: DISABLE
17536: LD_INT 0
17538: PPUSH
17539: PPUSH
17540: PPUSH
// begin tmp := [ ] ;
17541: LD_ADDR_VAR 0 3
17545: PUSH
17546: EMPTY
17547: ST_TO_ADDR
// for i := 1 to 6 do
17548: LD_ADDR_VAR 0 1
17552: PUSH
17553: DOUBLE
17554: LD_INT 1
17556: DEC
17557: ST_TO_ADDR
17558: LD_INT 6
17560: PUSH
17561: FOR_TO
17562: IFFALSE 17667
// begin uc_nation := nation_nature ;
17564: LD_ADDR_OWVAR 21
17568: PUSH
17569: LD_INT 0
17571: ST_TO_ADDR
// uc_side := 0 ;
17572: LD_ADDR_OWVAR 20
17576: PUSH
17577: LD_INT 0
17579: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17580: LD_ADDR_OWVAR 29
17584: PUSH
17585: LD_INT 12
17587: PUSH
17588: LD_INT 12
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: ST_TO_ADDR
// hc_agressivity := 20 ;
17595: LD_ADDR_OWVAR 35
17599: PUSH
17600: LD_INT 20
17602: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17603: LD_ADDR_OWVAR 28
17607: PUSH
17608: LD_INT 17
17610: ST_TO_ADDR
// hc_gallery :=  ;
17611: LD_ADDR_OWVAR 33
17615: PUSH
17616: LD_STRING 
17618: ST_TO_ADDR
// hc_name :=  ;
17619: LD_ADDR_OWVAR 26
17623: PUSH
17624: LD_STRING 
17626: ST_TO_ADDR
// un := CreateHuman ;
17627: LD_ADDR_VAR 0 2
17631: PUSH
17632: CALL_OW 44
17636: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17637: LD_VAR 0 2
17641: PPUSH
17642: LD_INT 1
17644: PPUSH
17645: CALL_OW 51
// tmp := tmp ^ un ;
17649: LD_ADDR_VAR 0 3
17653: PUSH
17654: LD_VAR 0 3
17658: PUSH
17659: LD_VAR 0 2
17663: ADD
17664: ST_TO_ADDR
// end ;
17665: GO 17561
17667: POP
17668: POP
// repeat wait ( 0 0$1 ) ;
17669: LD_INT 35
17671: PPUSH
17672: CALL_OW 67
// for un in tmp do
17676: LD_ADDR_VAR 0 2
17680: PUSH
17681: LD_VAR 0 3
17685: PUSH
17686: FOR_IN
17687: IFFALSE 17761
// begin if IsDead ( un ) then
17689: LD_VAR 0 2
17693: PPUSH
17694: CALL_OW 301
17698: IFFALSE 17718
// begin tmp := tmp diff un ;
17700: LD_ADDR_VAR 0 3
17704: PUSH
17705: LD_VAR 0 3
17709: PUSH
17710: LD_VAR 0 2
17714: DIFF
17715: ST_TO_ADDR
// continue ;
17716: GO 17686
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17718: LD_VAR 0 2
17722: PPUSH
17723: LD_INT 3
17725: PUSH
17726: LD_INT 22
17728: PUSH
17729: LD_INT 0
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: PPUSH
17740: CALL_OW 69
17744: PPUSH
17745: LD_VAR 0 2
17749: PPUSH
17750: CALL_OW 74
17754: PPUSH
17755: CALL_OW 115
// end ;
17759: GO 17686
17761: POP
17762: POP
// until not tmp ;
17763: LD_VAR 0 3
17767: NOT
17768: IFFALSE 17669
// end ;
17770: PPOPN 3
17772: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17773: LD_EXP 25
17777: PUSH
17778: LD_EXP 50
17782: AND
17783: IFFALSE 17837
17785: GO 17787
17787: DISABLE
// begin ToLua ( displayTroll(); ) ;
17788: LD_STRING displayTroll();
17790: PPUSH
17791: CALL_OW 559
// wait ( 3 3$00 ) ;
17795: LD_INT 6300
17797: PPUSH
17798: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17802: LD_STRING hideTroll();
17804: PPUSH
17805: CALL_OW 559
// wait ( 1 1$00 ) ;
17809: LD_INT 2100
17811: PPUSH
17812: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17816: LD_STRING displayTroll();
17818: PPUSH
17819: CALL_OW 559
// wait ( 1 1$00 ) ;
17823: LD_INT 2100
17825: PPUSH
17826: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17830: LD_STRING hideTroll();
17832: PPUSH
17833: CALL_OW 559
// end ;
17837: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17838: LD_EXP 25
17842: PUSH
17843: LD_EXP 51
17847: AND
17848: IFFALSE 17911
17850: GO 17852
17852: DISABLE
17853: LD_INT 0
17855: PPUSH
// begin p := 0 ;
17856: LD_ADDR_VAR 0 1
17860: PUSH
17861: LD_INT 0
17863: ST_TO_ADDR
// repeat game_speed := 1 ;
17864: LD_ADDR_OWVAR 65
17868: PUSH
17869: LD_INT 1
17871: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17872: LD_INT 35
17874: PPUSH
17875: CALL_OW 67
// p := p + 1 ;
17879: LD_ADDR_VAR 0 1
17883: PUSH
17884: LD_VAR 0 1
17888: PUSH
17889: LD_INT 1
17891: PLUS
17892: ST_TO_ADDR
// until p >= 60 ;
17893: LD_VAR 0 1
17897: PUSH
17898: LD_INT 60
17900: GREATEREQUAL
17901: IFFALSE 17864
// game_speed := 4 ;
17903: LD_ADDR_OWVAR 65
17907: PUSH
17908: LD_INT 4
17910: ST_TO_ADDR
// end ;
17911: PPOPN 1
17913: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17914: LD_EXP 25
17918: PUSH
17919: LD_EXP 52
17923: AND
17924: IFFALSE 18070
17926: GO 17928
17928: DISABLE
17929: LD_INT 0
17931: PPUSH
17932: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17933: LD_ADDR_VAR 0 1
17937: PUSH
17938: LD_INT 22
17940: PUSH
17941: LD_OWVAR 2
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: PUSH
17950: LD_INT 2
17952: PUSH
17953: LD_INT 30
17955: PUSH
17956: LD_INT 0
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PUSH
17963: LD_INT 30
17965: PUSH
17966: LD_INT 1
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: LIST
17977: PUSH
17978: EMPTY
17979: LIST
17980: LIST
17981: PPUSH
17982: CALL_OW 69
17986: ST_TO_ADDR
// if not depot then
17987: LD_VAR 0 1
17991: NOT
17992: IFFALSE 17996
// exit ;
17994: GO 18070
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17996: LD_ADDR_VAR 0 2
18000: PUSH
18001: LD_VAR 0 1
18005: PUSH
18006: LD_INT 1
18008: PPUSH
18009: LD_VAR 0 1
18013: PPUSH
18014: CALL_OW 12
18018: ARRAY
18019: PPUSH
18020: CALL_OW 274
18024: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18025: LD_VAR 0 2
18029: PPUSH
18030: LD_INT 1
18032: PPUSH
18033: LD_INT 0
18035: PPUSH
18036: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18040: LD_VAR 0 2
18044: PPUSH
18045: LD_INT 2
18047: PPUSH
18048: LD_INT 0
18050: PPUSH
18051: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18055: LD_VAR 0 2
18059: PPUSH
18060: LD_INT 3
18062: PPUSH
18063: LD_INT 0
18065: PPUSH
18066: CALL_OW 277
// end ;
18070: PPOPN 2
18072: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18073: LD_EXP 25
18077: PUSH
18078: LD_EXP 53
18082: AND
18083: IFFALSE 18180
18085: GO 18087
18087: DISABLE
18088: LD_INT 0
18090: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18091: LD_ADDR_VAR 0 1
18095: PUSH
18096: LD_INT 22
18098: PUSH
18099: LD_OWVAR 2
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: PUSH
18108: LD_INT 21
18110: PUSH
18111: LD_INT 1
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PUSH
18118: LD_INT 3
18120: PUSH
18121: LD_INT 23
18123: PUSH
18124: LD_INT 0
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: LIST
18139: PPUSH
18140: CALL_OW 69
18144: ST_TO_ADDR
// if not tmp then
18145: LD_VAR 0 1
18149: NOT
18150: IFFALSE 18154
// exit ;
18152: GO 18180
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18154: LD_VAR 0 1
18158: PUSH
18159: LD_INT 1
18161: PPUSH
18162: LD_VAR 0 1
18166: PPUSH
18167: CALL_OW 12
18171: ARRAY
18172: PPUSH
18173: LD_INT 200
18175: PPUSH
18176: CALL_OW 234
// end ;
18180: PPOPN 1
18182: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18183: LD_EXP 25
18187: PUSH
18188: LD_EXP 54
18192: AND
18193: IFFALSE 18272
18195: GO 18197
18197: DISABLE
18198: LD_INT 0
18200: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18201: LD_ADDR_VAR 0 1
18205: PUSH
18206: LD_INT 22
18208: PUSH
18209: LD_OWVAR 2
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: PUSH
18218: LD_INT 21
18220: PUSH
18221: LD_INT 2
18223: PUSH
18224: EMPTY
18225: LIST
18226: LIST
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: PPUSH
18232: CALL_OW 69
18236: ST_TO_ADDR
// if not tmp then
18237: LD_VAR 0 1
18241: NOT
18242: IFFALSE 18246
// exit ;
18244: GO 18272
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18246: LD_VAR 0 1
18250: PUSH
18251: LD_INT 1
18253: PPUSH
18254: LD_VAR 0 1
18258: PPUSH
18259: CALL_OW 12
18263: ARRAY
18264: PPUSH
18265: LD_INT 60
18267: PPUSH
18268: CALL_OW 234
// end ;
18272: PPOPN 1
18274: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18275: LD_EXP 25
18279: PUSH
18280: LD_EXP 55
18284: AND
18285: IFFALSE 18384
18287: GO 18289
18289: DISABLE
18290: LD_INT 0
18292: PPUSH
18293: PPUSH
// begin enable ;
18294: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18295: LD_ADDR_VAR 0 1
18299: PUSH
18300: LD_INT 22
18302: PUSH
18303: LD_OWVAR 2
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PUSH
18312: LD_INT 61
18314: PUSH
18315: EMPTY
18316: LIST
18317: PUSH
18318: LD_INT 33
18320: PUSH
18321: LD_INT 2
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: LIST
18332: PPUSH
18333: CALL_OW 69
18337: ST_TO_ADDR
// if not tmp then
18338: LD_VAR 0 1
18342: NOT
18343: IFFALSE 18347
// exit ;
18345: GO 18384
// for i in tmp do
18347: LD_ADDR_VAR 0 2
18351: PUSH
18352: LD_VAR 0 1
18356: PUSH
18357: FOR_IN
18358: IFFALSE 18382
// if IsControledBy ( i ) then
18360: LD_VAR 0 2
18364: PPUSH
18365: CALL_OW 312
18369: IFFALSE 18380
// ComUnlink ( i ) ;
18371: LD_VAR 0 2
18375: PPUSH
18376: CALL_OW 136
18380: GO 18357
18382: POP
18383: POP
// end ;
18384: PPOPN 2
18386: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18387: LD_EXP 25
18391: PUSH
18392: LD_EXP 56
18396: AND
18397: IFFALSE 18537
18399: GO 18401
18401: DISABLE
18402: LD_INT 0
18404: PPUSH
18405: PPUSH
// begin ToLua ( displayPowell(); ) ;
18406: LD_STRING displayPowell();
18408: PPUSH
18409: CALL_OW 559
// uc_side := 0 ;
18413: LD_ADDR_OWVAR 20
18417: PUSH
18418: LD_INT 0
18420: ST_TO_ADDR
// uc_nation := 2 ;
18421: LD_ADDR_OWVAR 21
18425: PUSH
18426: LD_INT 2
18428: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18429: LD_ADDR_OWVAR 37
18433: PUSH
18434: LD_INT 14
18436: ST_TO_ADDR
// vc_engine := engine_siberite ;
18437: LD_ADDR_OWVAR 39
18441: PUSH
18442: LD_INT 3
18444: ST_TO_ADDR
// vc_control := control_apeman ;
18445: LD_ADDR_OWVAR 38
18449: PUSH
18450: LD_INT 5
18452: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18453: LD_ADDR_OWVAR 40
18457: PUSH
18458: LD_INT 29
18460: ST_TO_ADDR
// un := CreateVehicle ;
18461: LD_ADDR_VAR 0 2
18465: PUSH
18466: CALL_OW 45
18470: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18471: LD_VAR 0 2
18475: PPUSH
18476: LD_INT 1
18478: PPUSH
18479: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18483: LD_INT 35
18485: PPUSH
18486: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18490: LD_VAR 0 2
18494: PPUSH
18495: LD_INT 22
18497: PUSH
18498: LD_OWVAR 2
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: PPUSH
18507: CALL_OW 69
18511: PPUSH
18512: LD_VAR 0 2
18516: PPUSH
18517: CALL_OW 74
18521: PPUSH
18522: CALL_OW 115
// until IsDead ( un ) ;
18526: LD_VAR 0 2
18530: PPUSH
18531: CALL_OW 301
18535: IFFALSE 18483
// end ;
18537: PPOPN 2
18539: END
// every 0 0$1 trigger StreamModeActive and sStu do
18540: LD_EXP 25
18544: PUSH
18545: LD_EXP 64
18549: AND
18550: IFFALSE 18566
18552: GO 18554
18554: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18555: LD_STRING displayStucuk();
18557: PPUSH
18558: CALL_OW 559
// ResetFog ;
18562: CALL_OW 335
// end ;
18566: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18567: LD_EXP 25
18571: PUSH
18572: LD_EXP 57
18576: AND
18577: IFFALSE 18718
18579: GO 18581
18581: DISABLE
18582: LD_INT 0
18584: PPUSH
18585: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18586: LD_ADDR_VAR 0 2
18590: PUSH
18591: LD_INT 22
18593: PUSH
18594: LD_OWVAR 2
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: PUSH
18603: LD_INT 21
18605: PUSH
18606: LD_INT 1
18608: PUSH
18609: EMPTY
18610: LIST
18611: LIST
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: PPUSH
18617: CALL_OW 69
18621: ST_TO_ADDR
// if not tmp then
18622: LD_VAR 0 2
18626: NOT
18627: IFFALSE 18631
// exit ;
18629: GO 18718
// un := tmp [ rand ( 1 , tmp ) ] ;
18631: LD_ADDR_VAR 0 1
18635: PUSH
18636: LD_VAR 0 2
18640: PUSH
18641: LD_INT 1
18643: PPUSH
18644: LD_VAR 0 2
18648: PPUSH
18649: CALL_OW 12
18653: ARRAY
18654: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18655: LD_VAR 0 1
18659: PPUSH
18660: LD_INT 0
18662: PPUSH
18663: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18667: LD_VAR 0 1
18671: PPUSH
18672: LD_OWVAR 3
18676: PUSH
18677: LD_VAR 0 1
18681: DIFF
18682: PPUSH
18683: LD_VAR 0 1
18687: PPUSH
18688: CALL_OW 74
18692: PPUSH
18693: CALL_OW 115
// wait ( 0 0$20 ) ;
18697: LD_INT 700
18699: PPUSH
18700: CALL_OW 67
// SetSide ( un , your_side ) ;
18704: LD_VAR 0 1
18708: PPUSH
18709: LD_OWVAR 2
18713: PPUSH
18714: CALL_OW 235
// end ;
18718: PPOPN 2
18720: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18721: LD_EXP 25
18725: PUSH
18726: LD_EXP 58
18730: AND
18731: IFFALSE 18837
18733: GO 18735
18735: DISABLE
18736: LD_INT 0
18738: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18739: LD_ADDR_VAR 0 1
18743: PUSH
18744: LD_INT 22
18746: PUSH
18747: LD_OWVAR 2
18751: PUSH
18752: EMPTY
18753: LIST
18754: LIST
18755: PUSH
18756: LD_INT 2
18758: PUSH
18759: LD_INT 30
18761: PUSH
18762: LD_INT 0
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: PUSH
18769: LD_INT 30
18771: PUSH
18772: LD_INT 1
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: LIST
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: PPUSH
18788: CALL_OW 69
18792: ST_TO_ADDR
// if not depot then
18793: LD_VAR 0 1
18797: NOT
18798: IFFALSE 18802
// exit ;
18800: GO 18837
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18802: LD_VAR 0 1
18806: PUSH
18807: LD_INT 1
18809: ARRAY
18810: PPUSH
18811: CALL_OW 250
18815: PPUSH
18816: LD_VAR 0 1
18820: PUSH
18821: LD_INT 1
18823: ARRAY
18824: PPUSH
18825: CALL_OW 251
18829: PPUSH
18830: LD_INT 70
18832: PPUSH
18833: CALL_OW 495
// end ;
18837: PPOPN 1
18839: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18840: LD_EXP 25
18844: PUSH
18845: LD_EXP 59
18849: AND
18850: IFFALSE 19061
18852: GO 18854
18854: DISABLE
18855: LD_INT 0
18857: PPUSH
18858: PPUSH
18859: PPUSH
18860: PPUSH
18861: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18862: LD_ADDR_VAR 0 5
18866: PUSH
18867: LD_INT 22
18869: PUSH
18870: LD_OWVAR 2
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: PUSH
18879: LD_INT 21
18881: PUSH
18882: LD_INT 1
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: PUSH
18889: EMPTY
18890: LIST
18891: LIST
18892: PPUSH
18893: CALL_OW 69
18897: ST_TO_ADDR
// if not tmp then
18898: LD_VAR 0 5
18902: NOT
18903: IFFALSE 18907
// exit ;
18905: GO 19061
// for i in tmp do
18907: LD_ADDR_VAR 0 1
18911: PUSH
18912: LD_VAR 0 5
18916: PUSH
18917: FOR_IN
18918: IFFALSE 19059
// begin d := rand ( 0 , 5 ) ;
18920: LD_ADDR_VAR 0 4
18924: PUSH
18925: LD_INT 0
18927: PPUSH
18928: LD_INT 5
18930: PPUSH
18931: CALL_OW 12
18935: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18936: LD_ADDR_VAR 0 2
18940: PUSH
18941: LD_VAR 0 1
18945: PPUSH
18946: CALL_OW 250
18950: PPUSH
18951: LD_VAR 0 4
18955: PPUSH
18956: LD_INT 3
18958: PPUSH
18959: LD_INT 12
18961: PPUSH
18962: CALL_OW 12
18966: PPUSH
18967: CALL_OW 272
18971: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18972: LD_ADDR_VAR 0 3
18976: PUSH
18977: LD_VAR 0 1
18981: PPUSH
18982: CALL_OW 251
18986: PPUSH
18987: LD_VAR 0 4
18991: PPUSH
18992: LD_INT 3
18994: PPUSH
18995: LD_INT 12
18997: PPUSH
18998: CALL_OW 12
19002: PPUSH
19003: CALL_OW 273
19007: ST_TO_ADDR
// if ValidHex ( x , y ) then
19008: LD_VAR 0 2
19012: PPUSH
19013: LD_VAR 0 3
19017: PPUSH
19018: CALL_OW 488
19022: IFFALSE 19057
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19024: LD_VAR 0 1
19028: PPUSH
19029: LD_VAR 0 2
19033: PPUSH
19034: LD_VAR 0 3
19038: PPUSH
19039: LD_INT 3
19041: PPUSH
19042: LD_INT 6
19044: PPUSH
19045: CALL_OW 12
19049: PPUSH
19050: LD_INT 1
19052: PPUSH
19053: CALL_OW 483
// end ;
19057: GO 18917
19059: POP
19060: POP
// end ;
19061: PPOPN 5
19063: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19064: LD_EXP 25
19068: PUSH
19069: LD_EXP 60
19073: AND
19074: IFFALSE 19168
19076: GO 19078
19078: DISABLE
19079: LD_INT 0
19081: PPUSH
19082: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19083: LD_ADDR_VAR 0 2
19087: PUSH
19088: LD_INT 22
19090: PUSH
19091: LD_OWVAR 2
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: LD_INT 32
19102: PUSH
19103: LD_INT 1
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: PUSH
19110: LD_INT 21
19112: PUSH
19113: LD_INT 2
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: LIST
19124: PPUSH
19125: CALL_OW 69
19129: ST_TO_ADDR
// if not tmp then
19130: LD_VAR 0 2
19134: NOT
19135: IFFALSE 19139
// exit ;
19137: GO 19168
// for i in tmp do
19139: LD_ADDR_VAR 0 1
19143: PUSH
19144: LD_VAR 0 2
19148: PUSH
19149: FOR_IN
19150: IFFALSE 19166
// SetFuel ( i , 0 ) ;
19152: LD_VAR 0 1
19156: PPUSH
19157: LD_INT 0
19159: PPUSH
19160: CALL_OW 240
19164: GO 19149
19166: POP
19167: POP
// end ;
19168: PPOPN 2
19170: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19171: LD_EXP 25
19175: PUSH
19176: LD_EXP 61
19180: AND
19181: IFFALSE 19247
19183: GO 19185
19185: DISABLE
19186: LD_INT 0
19188: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19189: LD_ADDR_VAR 0 1
19193: PUSH
19194: LD_INT 22
19196: PUSH
19197: LD_OWVAR 2
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PUSH
19206: LD_INT 30
19208: PUSH
19209: LD_INT 29
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PPUSH
19220: CALL_OW 69
19224: ST_TO_ADDR
// if not tmp then
19225: LD_VAR 0 1
19229: NOT
19230: IFFALSE 19234
// exit ;
19232: GO 19247
// DestroyUnit ( tmp [ 1 ] ) ;
19234: LD_VAR 0 1
19238: PUSH
19239: LD_INT 1
19241: ARRAY
19242: PPUSH
19243: CALL_OW 65
// end ;
19247: PPOPN 1
19249: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19250: LD_EXP 25
19254: PUSH
19255: LD_EXP 63
19259: AND
19260: IFFALSE 19389
19262: GO 19264
19264: DISABLE
19265: LD_INT 0
19267: PPUSH
// begin uc_side := 0 ;
19268: LD_ADDR_OWVAR 20
19272: PUSH
19273: LD_INT 0
19275: ST_TO_ADDR
// uc_nation := nation_arabian ;
19276: LD_ADDR_OWVAR 21
19280: PUSH
19281: LD_INT 2
19283: ST_TO_ADDR
// hc_gallery :=  ;
19284: LD_ADDR_OWVAR 33
19288: PUSH
19289: LD_STRING 
19291: ST_TO_ADDR
// hc_name :=  ;
19292: LD_ADDR_OWVAR 26
19296: PUSH
19297: LD_STRING 
19299: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19300: LD_INT 1
19302: PPUSH
19303: LD_INT 11
19305: PPUSH
19306: LD_INT 10
19308: PPUSH
19309: CALL_OW 380
// un := CreateHuman ;
19313: LD_ADDR_VAR 0 1
19317: PUSH
19318: CALL_OW 44
19322: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19323: LD_VAR 0 1
19327: PPUSH
19328: LD_INT 1
19330: PPUSH
19331: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19335: LD_INT 35
19337: PPUSH
19338: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19342: LD_VAR 0 1
19346: PPUSH
19347: LD_INT 22
19349: PUSH
19350: LD_OWVAR 2
19354: PUSH
19355: EMPTY
19356: LIST
19357: LIST
19358: PPUSH
19359: CALL_OW 69
19363: PPUSH
19364: LD_VAR 0 1
19368: PPUSH
19369: CALL_OW 74
19373: PPUSH
19374: CALL_OW 115
// until IsDead ( un ) ;
19378: LD_VAR 0 1
19382: PPUSH
19383: CALL_OW 301
19387: IFFALSE 19335
// end ;
19389: PPOPN 1
19391: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19392: LD_EXP 25
19396: PUSH
19397: LD_EXP 65
19401: AND
19402: IFFALSE 19414
19404: GO 19406
19406: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19407: LD_STRING earthquake(getX(game), 0, 32)
19409: PPUSH
19410: CALL_OW 559
19414: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19415: LD_EXP 25
19419: PUSH
19420: LD_EXP 66
19424: AND
19425: IFFALSE 19516
19427: GO 19429
19429: DISABLE
19430: LD_INT 0
19432: PPUSH
// begin enable ;
19433: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19434: LD_ADDR_VAR 0 1
19438: PUSH
19439: LD_INT 22
19441: PUSH
19442: LD_OWVAR 2
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: PUSH
19451: LD_INT 21
19453: PUSH
19454: LD_INT 2
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: PUSH
19461: LD_INT 33
19463: PUSH
19464: LD_INT 3
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: LIST
19475: PPUSH
19476: CALL_OW 69
19480: ST_TO_ADDR
// if not tmp then
19481: LD_VAR 0 1
19485: NOT
19486: IFFALSE 19490
// exit ;
19488: GO 19516
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19490: LD_VAR 0 1
19494: PUSH
19495: LD_INT 1
19497: PPUSH
19498: LD_VAR 0 1
19502: PPUSH
19503: CALL_OW 12
19507: ARRAY
19508: PPUSH
19509: LD_INT 1
19511: PPUSH
19512: CALL_OW 234
// end ;
19516: PPOPN 1
19518: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19519: LD_EXP 25
19523: PUSH
19524: LD_EXP 67
19528: AND
19529: IFFALSE 19670
19531: GO 19533
19533: DISABLE
19534: LD_INT 0
19536: PPUSH
19537: PPUSH
19538: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19539: LD_ADDR_VAR 0 3
19543: PUSH
19544: LD_INT 22
19546: PUSH
19547: LD_OWVAR 2
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: PUSH
19556: LD_INT 25
19558: PUSH
19559: LD_INT 1
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PPUSH
19570: CALL_OW 69
19574: ST_TO_ADDR
// if not tmp then
19575: LD_VAR 0 3
19579: NOT
19580: IFFALSE 19584
// exit ;
19582: GO 19670
// un := tmp [ rand ( 1 , tmp ) ] ;
19584: LD_ADDR_VAR 0 2
19588: PUSH
19589: LD_VAR 0 3
19593: PUSH
19594: LD_INT 1
19596: PPUSH
19597: LD_VAR 0 3
19601: PPUSH
19602: CALL_OW 12
19606: ARRAY
19607: ST_TO_ADDR
// if Crawls ( un ) then
19608: LD_VAR 0 2
19612: PPUSH
19613: CALL_OW 318
19617: IFFALSE 19628
// ComWalk ( un ) ;
19619: LD_VAR 0 2
19623: PPUSH
19624: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19628: LD_VAR 0 2
19632: PPUSH
19633: LD_INT 9
19635: PPUSH
19636: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19640: LD_INT 28
19642: PPUSH
19643: LD_OWVAR 2
19647: PPUSH
19648: LD_INT 2
19650: PPUSH
19651: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19655: LD_INT 29
19657: PPUSH
19658: LD_OWVAR 2
19662: PPUSH
19663: LD_INT 2
19665: PPUSH
19666: CALL_OW 322
// end ;
19670: PPOPN 3
19672: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19673: LD_EXP 25
19677: PUSH
19678: LD_EXP 68
19682: AND
19683: IFFALSE 19794
19685: GO 19687
19687: DISABLE
19688: LD_INT 0
19690: PPUSH
19691: PPUSH
19692: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19693: LD_ADDR_VAR 0 3
19697: PUSH
19698: LD_INT 22
19700: PUSH
19701: LD_OWVAR 2
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: PUSH
19710: LD_INT 25
19712: PUSH
19713: LD_INT 1
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: PPUSH
19724: CALL_OW 69
19728: ST_TO_ADDR
// if not tmp then
19729: LD_VAR 0 3
19733: NOT
19734: IFFALSE 19738
// exit ;
19736: GO 19794
// un := tmp [ rand ( 1 , tmp ) ] ;
19738: LD_ADDR_VAR 0 2
19742: PUSH
19743: LD_VAR 0 3
19747: PUSH
19748: LD_INT 1
19750: PPUSH
19751: LD_VAR 0 3
19755: PPUSH
19756: CALL_OW 12
19760: ARRAY
19761: ST_TO_ADDR
// if Crawls ( un ) then
19762: LD_VAR 0 2
19766: PPUSH
19767: CALL_OW 318
19771: IFFALSE 19782
// ComWalk ( un ) ;
19773: LD_VAR 0 2
19777: PPUSH
19778: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19782: LD_VAR 0 2
19786: PPUSH
19787: LD_INT 8
19789: PPUSH
19790: CALL_OW 336
// end ;
19794: PPOPN 3
19796: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19797: LD_EXP 25
19801: PUSH
19802: LD_EXP 69
19806: AND
19807: IFFALSE 19951
19809: GO 19811
19811: DISABLE
19812: LD_INT 0
19814: PPUSH
19815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19816: LD_ADDR_VAR 0 2
19820: PUSH
19821: LD_INT 22
19823: PUSH
19824: LD_OWVAR 2
19828: PUSH
19829: EMPTY
19830: LIST
19831: LIST
19832: PUSH
19833: LD_INT 21
19835: PUSH
19836: LD_INT 2
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: PUSH
19843: LD_INT 2
19845: PUSH
19846: LD_INT 34
19848: PUSH
19849: LD_INT 12
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PUSH
19856: LD_INT 34
19858: PUSH
19859: LD_INT 51
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PUSH
19866: LD_INT 34
19868: PUSH
19869: LD_INT 32
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: LIST
19886: PPUSH
19887: CALL_OW 69
19891: ST_TO_ADDR
// if not tmp then
19892: LD_VAR 0 2
19896: NOT
19897: IFFALSE 19901
// exit ;
19899: GO 19951
// for i in tmp do
19901: LD_ADDR_VAR 0 1
19905: PUSH
19906: LD_VAR 0 2
19910: PUSH
19911: FOR_IN
19912: IFFALSE 19949
// if GetCargo ( i , mat_artifact ) = 0 then
19914: LD_VAR 0 1
19918: PPUSH
19919: LD_INT 4
19921: PPUSH
19922: CALL_OW 289
19926: PUSH
19927: LD_INT 0
19929: EQUAL
19930: IFFALSE 19947
// SetCargo ( i , mat_siberit , 100 ) ;
19932: LD_VAR 0 1
19936: PPUSH
19937: LD_INT 3
19939: PPUSH
19940: LD_INT 100
19942: PPUSH
19943: CALL_OW 290
19947: GO 19911
19949: POP
19950: POP
// end ;
19951: PPOPN 2
19953: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19954: LD_EXP 25
19958: PUSH
19959: LD_EXP 70
19963: AND
19964: IFFALSE 20147
19966: GO 19968
19968: DISABLE
19969: LD_INT 0
19971: PPUSH
19972: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19973: LD_ADDR_VAR 0 2
19977: PUSH
19978: LD_INT 22
19980: PUSH
19981: LD_OWVAR 2
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: PPUSH
19990: CALL_OW 69
19994: ST_TO_ADDR
// if not tmp then
19995: LD_VAR 0 2
19999: NOT
20000: IFFALSE 20004
// exit ;
20002: GO 20147
// for i := 1 to 2 do
20004: LD_ADDR_VAR 0 1
20008: PUSH
20009: DOUBLE
20010: LD_INT 1
20012: DEC
20013: ST_TO_ADDR
20014: LD_INT 2
20016: PUSH
20017: FOR_TO
20018: IFFALSE 20145
// begin uc_side := your_side ;
20020: LD_ADDR_OWVAR 20
20024: PUSH
20025: LD_OWVAR 2
20029: ST_TO_ADDR
// uc_nation := nation_american ;
20030: LD_ADDR_OWVAR 21
20034: PUSH
20035: LD_INT 1
20037: ST_TO_ADDR
// vc_chassis := us_morphling ;
20038: LD_ADDR_OWVAR 37
20042: PUSH
20043: LD_INT 5
20045: ST_TO_ADDR
// vc_engine := engine_siberite ;
20046: LD_ADDR_OWVAR 39
20050: PUSH
20051: LD_INT 3
20053: ST_TO_ADDR
// vc_control := control_computer ;
20054: LD_ADDR_OWVAR 38
20058: PUSH
20059: LD_INT 3
20061: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20062: LD_ADDR_OWVAR 40
20066: PUSH
20067: LD_INT 10
20069: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20070: LD_VAR 0 2
20074: PUSH
20075: LD_INT 1
20077: ARRAY
20078: PPUSH
20079: CALL_OW 310
20083: NOT
20084: IFFALSE 20131
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20086: CALL_OW 45
20090: PPUSH
20091: LD_VAR 0 2
20095: PUSH
20096: LD_INT 1
20098: ARRAY
20099: PPUSH
20100: CALL_OW 250
20104: PPUSH
20105: LD_VAR 0 2
20109: PUSH
20110: LD_INT 1
20112: ARRAY
20113: PPUSH
20114: CALL_OW 251
20118: PPUSH
20119: LD_INT 12
20121: PPUSH
20122: LD_INT 1
20124: PPUSH
20125: CALL_OW 50
20129: GO 20143
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20131: CALL_OW 45
20135: PPUSH
20136: LD_INT 1
20138: PPUSH
20139: CALL_OW 51
// end ;
20143: GO 20017
20145: POP
20146: POP
// end ;
20147: PPOPN 2
20149: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20150: LD_EXP 25
20154: PUSH
20155: LD_EXP 71
20159: AND
20160: IFFALSE 20382
20162: GO 20164
20164: DISABLE
20165: LD_INT 0
20167: PPUSH
20168: PPUSH
20169: PPUSH
20170: PPUSH
20171: PPUSH
20172: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20173: LD_ADDR_VAR 0 6
20177: PUSH
20178: LD_INT 22
20180: PUSH
20181: LD_OWVAR 2
20185: PUSH
20186: EMPTY
20187: LIST
20188: LIST
20189: PUSH
20190: LD_INT 21
20192: PUSH
20193: LD_INT 1
20195: PUSH
20196: EMPTY
20197: LIST
20198: LIST
20199: PUSH
20200: LD_INT 3
20202: PUSH
20203: LD_INT 23
20205: PUSH
20206: LD_INT 0
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PUSH
20213: EMPTY
20214: LIST
20215: LIST
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: LIST
20221: PPUSH
20222: CALL_OW 69
20226: ST_TO_ADDR
// if not tmp then
20227: LD_VAR 0 6
20231: NOT
20232: IFFALSE 20236
// exit ;
20234: GO 20382
// s1 := rand ( 1 , 4 ) ;
20236: LD_ADDR_VAR 0 2
20240: PUSH
20241: LD_INT 1
20243: PPUSH
20244: LD_INT 4
20246: PPUSH
20247: CALL_OW 12
20251: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20252: LD_ADDR_VAR 0 4
20256: PUSH
20257: LD_VAR 0 6
20261: PUSH
20262: LD_INT 1
20264: ARRAY
20265: PPUSH
20266: LD_VAR 0 2
20270: PPUSH
20271: CALL_OW 259
20275: ST_TO_ADDR
// if s1 = 1 then
20276: LD_VAR 0 2
20280: PUSH
20281: LD_INT 1
20283: EQUAL
20284: IFFALSE 20304
// s2 := rand ( 2 , 4 ) else
20286: LD_ADDR_VAR 0 3
20290: PUSH
20291: LD_INT 2
20293: PPUSH
20294: LD_INT 4
20296: PPUSH
20297: CALL_OW 12
20301: ST_TO_ADDR
20302: GO 20312
// s2 := 1 ;
20304: LD_ADDR_VAR 0 3
20308: PUSH
20309: LD_INT 1
20311: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20312: LD_ADDR_VAR 0 5
20316: PUSH
20317: LD_VAR 0 6
20321: PUSH
20322: LD_INT 1
20324: ARRAY
20325: PPUSH
20326: LD_VAR 0 3
20330: PPUSH
20331: CALL_OW 259
20335: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20336: LD_VAR 0 6
20340: PUSH
20341: LD_INT 1
20343: ARRAY
20344: PPUSH
20345: LD_VAR 0 2
20349: PPUSH
20350: LD_VAR 0 5
20354: PPUSH
20355: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20359: LD_VAR 0 6
20363: PUSH
20364: LD_INT 1
20366: ARRAY
20367: PPUSH
20368: LD_VAR 0 3
20372: PPUSH
20373: LD_VAR 0 4
20377: PPUSH
20378: CALL_OW 237
// end ;
20382: PPOPN 6
20384: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20385: LD_EXP 25
20389: PUSH
20390: LD_EXP 72
20394: AND
20395: IFFALSE 20474
20397: GO 20399
20399: DISABLE
20400: LD_INT 0
20402: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20403: LD_ADDR_VAR 0 1
20407: PUSH
20408: LD_INT 22
20410: PUSH
20411: LD_OWVAR 2
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: PUSH
20420: LD_INT 30
20422: PUSH
20423: LD_INT 3
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: PPUSH
20434: CALL_OW 69
20438: ST_TO_ADDR
// if not tmp then
20439: LD_VAR 0 1
20443: NOT
20444: IFFALSE 20448
// exit ;
20446: GO 20474
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20448: LD_VAR 0 1
20452: PUSH
20453: LD_INT 1
20455: PPUSH
20456: LD_VAR 0 1
20460: PPUSH
20461: CALL_OW 12
20465: ARRAY
20466: PPUSH
20467: LD_INT 1
20469: PPUSH
20470: CALL_OW 234
// end ;
20474: PPOPN 1
20476: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20477: LD_EXP 25
20481: PUSH
20482: LD_EXP 73
20486: AND
20487: IFFALSE 20599
20489: GO 20491
20491: DISABLE
20492: LD_INT 0
20494: PPUSH
20495: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20496: LD_ADDR_VAR 0 2
20500: PUSH
20501: LD_INT 22
20503: PUSH
20504: LD_OWVAR 2
20508: PUSH
20509: EMPTY
20510: LIST
20511: LIST
20512: PUSH
20513: LD_INT 2
20515: PUSH
20516: LD_INT 30
20518: PUSH
20519: LD_INT 27
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: PUSH
20526: LD_INT 30
20528: PUSH
20529: LD_INT 26
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: PUSH
20536: LD_INT 30
20538: PUSH
20539: LD_INT 28
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PPUSH
20556: CALL_OW 69
20560: ST_TO_ADDR
// if not tmp then
20561: LD_VAR 0 2
20565: NOT
20566: IFFALSE 20570
// exit ;
20568: GO 20599
// for i in tmp do
20570: LD_ADDR_VAR 0 1
20574: PUSH
20575: LD_VAR 0 2
20579: PUSH
20580: FOR_IN
20581: IFFALSE 20597
// SetLives ( i , 1 ) ;
20583: LD_VAR 0 1
20587: PPUSH
20588: LD_INT 1
20590: PPUSH
20591: CALL_OW 234
20595: GO 20580
20597: POP
20598: POP
// end ;
20599: PPOPN 2
20601: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20602: LD_EXP 25
20606: PUSH
20607: LD_EXP 74
20611: AND
20612: IFFALSE 20899
20614: GO 20616
20616: DISABLE
20617: LD_INT 0
20619: PPUSH
20620: PPUSH
20621: PPUSH
// begin i := rand ( 1 , 7 ) ;
20622: LD_ADDR_VAR 0 1
20626: PUSH
20627: LD_INT 1
20629: PPUSH
20630: LD_INT 7
20632: PPUSH
20633: CALL_OW 12
20637: ST_TO_ADDR
// case i of 1 :
20638: LD_VAR 0 1
20642: PUSH
20643: LD_INT 1
20645: DOUBLE
20646: EQUAL
20647: IFTRUE 20651
20649: GO 20661
20651: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20652: LD_STRING earthquake(getX(game), 0, 32)
20654: PPUSH
20655: CALL_OW 559
20659: GO 20899
20661: LD_INT 2
20663: DOUBLE
20664: EQUAL
20665: IFTRUE 20669
20667: GO 20683
20669: POP
// begin ToLua ( displayStucuk(); ) ;
20670: LD_STRING displayStucuk();
20672: PPUSH
20673: CALL_OW 559
// ResetFog ;
20677: CALL_OW 335
// end ; 3 :
20681: GO 20899
20683: LD_INT 3
20685: DOUBLE
20686: EQUAL
20687: IFTRUE 20691
20689: GO 20795
20691: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20692: LD_ADDR_VAR 0 2
20696: PUSH
20697: LD_INT 22
20699: PUSH
20700: LD_OWVAR 2
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: PUSH
20709: LD_INT 25
20711: PUSH
20712: LD_INT 1
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: PPUSH
20723: CALL_OW 69
20727: ST_TO_ADDR
// if not tmp then
20728: LD_VAR 0 2
20732: NOT
20733: IFFALSE 20737
// exit ;
20735: GO 20899
// un := tmp [ rand ( 1 , tmp ) ] ;
20737: LD_ADDR_VAR 0 3
20741: PUSH
20742: LD_VAR 0 2
20746: PUSH
20747: LD_INT 1
20749: PPUSH
20750: LD_VAR 0 2
20754: PPUSH
20755: CALL_OW 12
20759: ARRAY
20760: ST_TO_ADDR
// if Crawls ( un ) then
20761: LD_VAR 0 3
20765: PPUSH
20766: CALL_OW 318
20770: IFFALSE 20781
// ComWalk ( un ) ;
20772: LD_VAR 0 3
20776: PPUSH
20777: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20781: LD_VAR 0 3
20785: PPUSH
20786: LD_INT 8
20788: PPUSH
20789: CALL_OW 336
// end ; 4 :
20793: GO 20899
20795: LD_INT 4
20797: DOUBLE
20798: EQUAL
20799: IFTRUE 20803
20801: GO 20877
20803: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20804: LD_ADDR_VAR 0 2
20808: PUSH
20809: LD_INT 22
20811: PUSH
20812: LD_OWVAR 2
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: PUSH
20821: LD_INT 30
20823: PUSH
20824: LD_INT 29
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: EMPTY
20832: LIST
20833: LIST
20834: PPUSH
20835: CALL_OW 69
20839: ST_TO_ADDR
// if not tmp then
20840: LD_VAR 0 2
20844: NOT
20845: IFFALSE 20849
// exit ;
20847: GO 20899
// CenterNowOnUnits ( tmp [ 1 ] ) ;
20849: LD_VAR 0 2
20853: PUSH
20854: LD_INT 1
20856: ARRAY
20857: PPUSH
20858: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
20862: LD_VAR 0 2
20866: PUSH
20867: LD_INT 1
20869: ARRAY
20870: PPUSH
20871: CALL_OW 65
// end ; 5 .. 7 :
20875: GO 20899
20877: LD_INT 5
20879: DOUBLE
20880: GREATEREQUAL
20881: IFFALSE 20889
20883: LD_INT 7
20885: DOUBLE
20886: LESSEQUAL
20887: IFTRUE 20891
20889: GO 20898
20891: POP
// StreamSibBomb ; end ;
20892: CALL 17136 0 0
20896: GO 20899
20898: POP
// end ;
20899: PPOPN 3
20901: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20902: LD_EXP 25
20906: PUSH
20907: LD_EXP 75
20911: AND
20912: IFFALSE 21068
20914: GO 20916
20916: DISABLE
20917: LD_INT 0
20919: PPUSH
20920: PPUSH
20921: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20922: LD_ADDR_VAR 0 2
20926: PUSH
20927: LD_INT 81
20929: PUSH
20930: LD_OWVAR 2
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: PUSH
20939: LD_INT 2
20941: PUSH
20942: LD_INT 21
20944: PUSH
20945: LD_INT 1
20947: PUSH
20948: EMPTY
20949: LIST
20950: LIST
20951: PUSH
20952: LD_INT 21
20954: PUSH
20955: LD_INT 2
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: PUSH
20962: EMPTY
20963: LIST
20964: LIST
20965: LIST
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: PPUSH
20971: CALL_OW 69
20975: ST_TO_ADDR
// if not tmp then
20976: LD_VAR 0 2
20980: NOT
20981: IFFALSE 20985
// exit ;
20983: GO 21068
// p := 0 ;
20985: LD_ADDR_VAR 0 3
20989: PUSH
20990: LD_INT 0
20992: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20993: LD_INT 35
20995: PPUSH
20996: CALL_OW 67
// p := p + 1 ;
21000: LD_ADDR_VAR 0 3
21004: PUSH
21005: LD_VAR 0 3
21009: PUSH
21010: LD_INT 1
21012: PLUS
21013: ST_TO_ADDR
// for i in tmp do
21014: LD_ADDR_VAR 0 1
21018: PUSH
21019: LD_VAR 0 2
21023: PUSH
21024: FOR_IN
21025: IFFALSE 21056
// if GetLives ( i ) < 1000 then
21027: LD_VAR 0 1
21031: PPUSH
21032: CALL_OW 256
21036: PUSH
21037: LD_INT 1000
21039: LESS
21040: IFFALSE 21054
// SetLives ( i , 1000 ) ;
21042: LD_VAR 0 1
21046: PPUSH
21047: LD_INT 1000
21049: PPUSH
21050: CALL_OW 234
21054: GO 21024
21056: POP
21057: POP
// until p > 20 ;
21058: LD_VAR 0 3
21062: PUSH
21063: LD_INT 20
21065: GREATER
21066: IFFALSE 20993
// end ;
21068: PPOPN 3
21070: END
// every 0 0$1 trigger StreamModeActive and sTime do
21071: LD_EXP 25
21075: PUSH
21076: LD_EXP 76
21080: AND
21081: IFFALSE 21116
21083: GO 21085
21085: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21086: LD_INT 28
21088: PPUSH
21089: LD_OWVAR 2
21093: PPUSH
21094: LD_INT 2
21096: PPUSH
21097: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21101: LD_INT 30
21103: PPUSH
21104: LD_OWVAR 2
21108: PPUSH
21109: LD_INT 2
21111: PPUSH
21112: CALL_OW 322
// end ;
21116: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21117: LD_EXP 25
21121: PUSH
21122: LD_EXP 77
21126: AND
21127: IFFALSE 21248
21129: GO 21131
21131: DISABLE
21132: LD_INT 0
21134: PPUSH
21135: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21136: LD_ADDR_VAR 0 2
21140: PUSH
21141: LD_INT 22
21143: PUSH
21144: LD_OWVAR 2
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: PUSH
21153: LD_INT 21
21155: PUSH
21156: LD_INT 1
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: PUSH
21163: LD_INT 3
21165: PUSH
21166: LD_INT 23
21168: PUSH
21169: LD_INT 0
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: LIST
21184: PPUSH
21185: CALL_OW 69
21189: ST_TO_ADDR
// if not tmp then
21190: LD_VAR 0 2
21194: NOT
21195: IFFALSE 21199
// exit ;
21197: GO 21248
// for i in tmp do
21199: LD_ADDR_VAR 0 1
21203: PUSH
21204: LD_VAR 0 2
21208: PUSH
21209: FOR_IN
21210: IFFALSE 21246
// begin if Crawls ( i ) then
21212: LD_VAR 0 1
21216: PPUSH
21217: CALL_OW 318
21221: IFFALSE 21232
// ComWalk ( i ) ;
21223: LD_VAR 0 1
21227: PPUSH
21228: CALL_OW 138
// SetClass ( i , 2 ) ;
21232: LD_VAR 0 1
21236: PPUSH
21237: LD_INT 2
21239: PPUSH
21240: CALL_OW 336
// end ;
21244: GO 21209
21246: POP
21247: POP
// end ;
21248: PPOPN 2
21250: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21251: LD_EXP 25
21255: PUSH
21256: LD_EXP 78
21260: AND
21261: IFFALSE 21549
21263: GO 21265
21265: DISABLE
21266: LD_INT 0
21268: PPUSH
21269: PPUSH
21270: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21271: LD_OWVAR 2
21275: PPUSH
21276: LD_INT 9
21278: PPUSH
21279: LD_INT 1
21281: PPUSH
21282: LD_INT 1
21284: PPUSH
21285: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21289: LD_INT 9
21291: PPUSH
21292: LD_OWVAR 2
21296: PPUSH
21297: CALL_OW 343
// uc_side := 9 ;
21301: LD_ADDR_OWVAR 20
21305: PUSH
21306: LD_INT 9
21308: ST_TO_ADDR
// uc_nation := 2 ;
21309: LD_ADDR_OWVAR 21
21313: PUSH
21314: LD_INT 2
21316: ST_TO_ADDR
// hc_name := Dark Warrior ;
21317: LD_ADDR_OWVAR 26
21321: PUSH
21322: LD_STRING Dark Warrior
21324: ST_TO_ADDR
// hc_gallery :=  ;
21325: LD_ADDR_OWVAR 33
21329: PUSH
21330: LD_STRING 
21332: ST_TO_ADDR
// hc_noskilllimit := true ;
21333: LD_ADDR_OWVAR 76
21337: PUSH
21338: LD_INT 1
21340: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
21341: LD_ADDR_OWVAR 31
21345: PUSH
21346: LD_INT 30
21348: PUSH
21349: LD_INT 30
21351: PUSH
21352: LD_INT 30
21354: PUSH
21355: LD_INT 30
21357: PUSH
21358: EMPTY
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: ST_TO_ADDR
// un := CreateHuman ;
21364: LD_ADDR_VAR 0 3
21368: PUSH
21369: CALL_OW 44
21373: ST_TO_ADDR
// hc_noskilllimit := false ;
21374: LD_ADDR_OWVAR 76
21378: PUSH
21379: LD_INT 0
21381: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21382: LD_VAR 0 3
21386: PPUSH
21387: LD_INT 1
21389: PPUSH
21390: CALL_OW 51
// ToLua ( playRanger() ) ;
21394: LD_STRING playRanger()
21396: PPUSH
21397: CALL_OW 559
// p := 0 ;
21401: LD_ADDR_VAR 0 2
21405: PUSH
21406: LD_INT 0
21408: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21409: LD_INT 35
21411: PPUSH
21412: CALL_OW 67
// p := p + 1 ;
21416: LD_ADDR_VAR 0 2
21420: PUSH
21421: LD_VAR 0 2
21425: PUSH
21426: LD_INT 1
21428: PLUS
21429: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21430: LD_VAR 0 3
21434: PPUSH
21435: CALL_OW 256
21439: PUSH
21440: LD_INT 1000
21442: LESS
21443: IFFALSE 21457
// SetLives ( un , 1000 ) ;
21445: LD_VAR 0 3
21449: PPUSH
21450: LD_INT 1000
21452: PPUSH
21453: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21457: LD_VAR 0 3
21461: PPUSH
21462: LD_INT 81
21464: PUSH
21465: LD_OWVAR 2
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: PUSH
21474: LD_INT 91
21476: PUSH
21477: LD_VAR 0 3
21481: PUSH
21482: LD_INT 30
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: LIST
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: PPUSH
21494: CALL_OW 69
21498: PPUSH
21499: LD_VAR 0 3
21503: PPUSH
21504: CALL_OW 74
21508: PPUSH
21509: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
21513: LD_VAR 0 2
21517: PUSH
21518: LD_INT 80
21520: GREATER
21521: PUSH
21522: LD_VAR 0 3
21526: PPUSH
21527: CALL_OW 301
21531: OR
21532: IFFALSE 21409
// if un then
21534: LD_VAR 0 3
21538: IFFALSE 21549
// RemoveUnit ( un ) ;
21540: LD_VAR 0 3
21544: PPUSH
21545: CALL_OW 64
// end ;
21549: PPOPN 3
21551: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
21552: LD_EXP 79
21556: IFFALSE 21672
21558: GO 21560
21560: DISABLE
21561: LD_INT 0
21563: PPUSH
21564: PPUSH
21565: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21566: LD_ADDR_VAR 0 2
21570: PUSH
21571: LD_INT 81
21573: PUSH
21574: LD_OWVAR 2
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: PUSH
21583: LD_INT 21
21585: PUSH
21586: LD_INT 1
21588: PUSH
21589: EMPTY
21590: LIST
21591: LIST
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: PPUSH
21597: CALL_OW 69
21601: ST_TO_ADDR
// ToLua ( playComputer() ) ;
21602: LD_STRING playComputer()
21604: PPUSH
21605: CALL_OW 559
// if not tmp then
21609: LD_VAR 0 2
21613: NOT
21614: IFFALSE 21618
// exit ;
21616: GO 21672
// for i in tmp do
21618: LD_ADDR_VAR 0 1
21622: PUSH
21623: LD_VAR 0 2
21627: PUSH
21628: FOR_IN
21629: IFFALSE 21670
// for j := 1 to 4 do
21631: LD_ADDR_VAR 0 3
21635: PUSH
21636: DOUBLE
21637: LD_INT 1
21639: DEC
21640: ST_TO_ADDR
21641: LD_INT 4
21643: PUSH
21644: FOR_TO
21645: IFFALSE 21666
// SetSkill ( i , j , 10 ) ;
21647: LD_VAR 0 1
21651: PPUSH
21652: LD_VAR 0 3
21656: PPUSH
21657: LD_INT 10
21659: PPUSH
21660: CALL_OW 237
21664: GO 21644
21666: POP
21667: POP
21668: GO 21628
21670: POP
21671: POP
// end ;
21672: PPOPN 3
21674: END
// every 0 0$1 trigger s30 do var i , tmp ;
21675: LD_EXP 80
21679: IFFALSE 21748
21681: GO 21683
21683: DISABLE
21684: LD_INT 0
21686: PPUSH
21687: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21688: LD_ADDR_VAR 0 2
21692: PUSH
21693: LD_INT 22
21695: PUSH
21696: LD_OWVAR 2
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: PPUSH
21705: CALL_OW 69
21709: ST_TO_ADDR
// if not tmp then
21710: LD_VAR 0 2
21714: NOT
21715: IFFALSE 21719
// exit ;
21717: GO 21748
// for i in tmp do
21719: LD_ADDR_VAR 0 1
21723: PUSH
21724: LD_VAR 0 2
21728: PUSH
21729: FOR_IN
21730: IFFALSE 21746
// SetLives ( i , 300 ) ;
21732: LD_VAR 0 1
21736: PPUSH
21737: LD_INT 300
21739: PPUSH
21740: CALL_OW 234
21744: GO 21729
21746: POP
21747: POP
// end ;
21748: PPOPN 2
21750: END
// every 0 0$1 trigger s60 do var i , tmp ;
21751: LD_EXP 81
21755: IFFALSE 21824
21757: GO 21759
21759: DISABLE
21760: LD_INT 0
21762: PPUSH
21763: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21764: LD_ADDR_VAR 0 2
21768: PUSH
21769: LD_INT 22
21771: PUSH
21772: LD_OWVAR 2
21776: PUSH
21777: EMPTY
21778: LIST
21779: LIST
21780: PPUSH
21781: CALL_OW 69
21785: ST_TO_ADDR
// if not tmp then
21786: LD_VAR 0 2
21790: NOT
21791: IFFALSE 21795
// exit ;
21793: GO 21824
// for i in tmp do
21795: LD_ADDR_VAR 0 1
21799: PUSH
21800: LD_VAR 0 2
21804: PUSH
21805: FOR_IN
21806: IFFALSE 21822
// SetLives ( i , 600 ) ;
21808: LD_VAR 0 1
21812: PPUSH
21813: LD_INT 600
21815: PPUSH
21816: CALL_OW 234
21820: GO 21805
21822: POP
21823: POP
// end ;
21824: PPOPN 2
21826: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21827: LD_INT 0
21829: PPUSH
// case cmd of 301 :
21830: LD_VAR 0 1
21834: PUSH
21835: LD_INT 301
21837: DOUBLE
21838: EQUAL
21839: IFTRUE 21843
21841: GO 21875
21843: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21844: LD_VAR 0 6
21848: PPUSH
21849: LD_VAR 0 7
21853: PPUSH
21854: LD_VAR 0 8
21858: PPUSH
21859: LD_VAR 0 4
21863: PPUSH
21864: LD_VAR 0 5
21868: PPUSH
21869: CALL 23076 0 5
21873: GO 21996
21875: LD_INT 302
21877: DOUBLE
21878: EQUAL
21879: IFTRUE 21883
21881: GO 21920
21883: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
21884: LD_VAR 0 6
21888: PPUSH
21889: LD_VAR 0 7
21893: PPUSH
21894: LD_VAR 0 8
21898: PPUSH
21899: LD_VAR 0 9
21903: PPUSH
21904: LD_VAR 0 4
21908: PPUSH
21909: LD_VAR 0 5
21913: PPUSH
21914: CALL 23167 0 6
21918: GO 21996
21920: LD_INT 303
21922: DOUBLE
21923: EQUAL
21924: IFTRUE 21928
21926: GO 21965
21928: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21929: LD_VAR 0 6
21933: PPUSH
21934: LD_VAR 0 7
21938: PPUSH
21939: LD_VAR 0 8
21943: PPUSH
21944: LD_VAR 0 9
21948: PPUSH
21949: LD_VAR 0 4
21953: PPUSH
21954: LD_VAR 0 5
21958: PPUSH
21959: CALL 22001 0 6
21963: GO 21996
21965: LD_INT 304
21967: DOUBLE
21968: EQUAL
21969: IFTRUE 21973
21971: GO 21995
21973: POP
// hHackTeleport ( unit , x , y ) ; end ;
21974: LD_VAR 0 2
21978: PPUSH
21979: LD_VAR 0 4
21983: PPUSH
21984: LD_VAR 0 5
21988: PPUSH
21989: CALL 23760 0 3
21993: GO 21996
21995: POP
// end ;
21996: LD_VAR 0 12
22000: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22001: LD_INT 0
22003: PPUSH
22004: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22005: LD_VAR 0 1
22009: PUSH
22010: LD_INT 1
22012: LESS
22013: PUSH
22014: LD_VAR 0 1
22018: PUSH
22019: LD_INT 3
22021: GREATER
22022: OR
22023: PUSH
22024: LD_VAR 0 5
22028: PPUSH
22029: LD_VAR 0 6
22033: PPUSH
22034: CALL_OW 428
22038: OR
22039: IFFALSE 22043
// exit ;
22041: GO 22763
// uc_side := your_side ;
22043: LD_ADDR_OWVAR 20
22047: PUSH
22048: LD_OWVAR 2
22052: ST_TO_ADDR
// uc_nation := nation ;
22053: LD_ADDR_OWVAR 21
22057: PUSH
22058: LD_VAR 0 1
22062: ST_TO_ADDR
// bc_level = 1 ;
22063: LD_ADDR_OWVAR 43
22067: PUSH
22068: LD_INT 1
22070: ST_TO_ADDR
// case btype of 1 :
22071: LD_VAR 0 2
22075: PUSH
22076: LD_INT 1
22078: DOUBLE
22079: EQUAL
22080: IFTRUE 22084
22082: GO 22095
22084: POP
// bc_type := b_depot ; 2 :
22085: LD_ADDR_OWVAR 42
22089: PUSH
22090: LD_INT 0
22092: ST_TO_ADDR
22093: GO 22707
22095: LD_INT 2
22097: DOUBLE
22098: EQUAL
22099: IFTRUE 22103
22101: GO 22114
22103: POP
// bc_type := b_warehouse ; 3 :
22104: LD_ADDR_OWVAR 42
22108: PUSH
22109: LD_INT 1
22111: ST_TO_ADDR
22112: GO 22707
22114: LD_INT 3
22116: DOUBLE
22117: EQUAL
22118: IFTRUE 22122
22120: GO 22133
22122: POP
// bc_type := b_lab ; 4 .. 9 :
22123: LD_ADDR_OWVAR 42
22127: PUSH
22128: LD_INT 6
22130: ST_TO_ADDR
22131: GO 22707
22133: LD_INT 4
22135: DOUBLE
22136: GREATEREQUAL
22137: IFFALSE 22145
22139: LD_INT 9
22141: DOUBLE
22142: LESSEQUAL
22143: IFTRUE 22147
22145: GO 22199
22147: POP
// begin bc_type := b_lab_half ;
22148: LD_ADDR_OWVAR 42
22152: PUSH
22153: LD_INT 7
22155: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22156: LD_ADDR_OWVAR 44
22160: PUSH
22161: LD_INT 10
22163: PUSH
22164: LD_INT 11
22166: PUSH
22167: LD_INT 12
22169: PUSH
22170: LD_INT 15
22172: PUSH
22173: LD_INT 14
22175: PUSH
22176: LD_INT 13
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: PUSH
22187: LD_VAR 0 2
22191: PUSH
22192: LD_INT 3
22194: MINUS
22195: ARRAY
22196: ST_TO_ADDR
// end ; 10 .. 13 :
22197: GO 22707
22199: LD_INT 10
22201: DOUBLE
22202: GREATEREQUAL
22203: IFFALSE 22211
22205: LD_INT 13
22207: DOUBLE
22208: LESSEQUAL
22209: IFTRUE 22213
22211: GO 22290
22213: POP
// begin bc_type := b_lab_full ;
22214: LD_ADDR_OWVAR 42
22218: PUSH
22219: LD_INT 8
22221: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22222: LD_ADDR_OWVAR 44
22226: PUSH
22227: LD_INT 10
22229: PUSH
22230: LD_INT 12
22232: PUSH
22233: LD_INT 14
22235: PUSH
22236: LD_INT 13
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: PUSH
22245: LD_VAR 0 2
22249: PUSH
22250: LD_INT 9
22252: MINUS
22253: ARRAY
22254: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22255: LD_ADDR_OWVAR 45
22259: PUSH
22260: LD_INT 11
22262: PUSH
22263: LD_INT 15
22265: PUSH
22266: LD_INT 12
22268: PUSH
22269: LD_INT 15
22271: PUSH
22272: EMPTY
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: PUSH
22278: LD_VAR 0 2
22282: PUSH
22283: LD_INT 9
22285: MINUS
22286: ARRAY
22287: ST_TO_ADDR
// end ; 14 :
22288: GO 22707
22290: LD_INT 14
22292: DOUBLE
22293: EQUAL
22294: IFTRUE 22298
22296: GO 22309
22298: POP
// bc_type := b_workshop ; 15 :
22299: LD_ADDR_OWVAR 42
22303: PUSH
22304: LD_INT 2
22306: ST_TO_ADDR
22307: GO 22707
22309: LD_INT 15
22311: DOUBLE
22312: EQUAL
22313: IFTRUE 22317
22315: GO 22328
22317: POP
// bc_type := b_factory ; 16 :
22318: LD_ADDR_OWVAR 42
22322: PUSH
22323: LD_INT 3
22325: ST_TO_ADDR
22326: GO 22707
22328: LD_INT 16
22330: DOUBLE
22331: EQUAL
22332: IFTRUE 22336
22334: GO 22347
22336: POP
// bc_type := b_ext_gun ; 17 :
22337: LD_ADDR_OWVAR 42
22341: PUSH
22342: LD_INT 17
22344: ST_TO_ADDR
22345: GO 22707
22347: LD_INT 17
22349: DOUBLE
22350: EQUAL
22351: IFTRUE 22355
22353: GO 22383
22355: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22356: LD_ADDR_OWVAR 42
22360: PUSH
22361: LD_INT 19
22363: PUSH
22364: LD_INT 23
22366: PUSH
22367: LD_INT 19
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: LIST
22374: PUSH
22375: LD_VAR 0 1
22379: ARRAY
22380: ST_TO_ADDR
22381: GO 22707
22383: LD_INT 18
22385: DOUBLE
22386: EQUAL
22387: IFTRUE 22391
22389: GO 22402
22391: POP
// bc_type := b_ext_radar ; 19 :
22392: LD_ADDR_OWVAR 42
22396: PUSH
22397: LD_INT 20
22399: ST_TO_ADDR
22400: GO 22707
22402: LD_INT 19
22404: DOUBLE
22405: EQUAL
22406: IFTRUE 22410
22408: GO 22421
22410: POP
// bc_type := b_ext_radio ; 20 :
22411: LD_ADDR_OWVAR 42
22415: PUSH
22416: LD_INT 22
22418: ST_TO_ADDR
22419: GO 22707
22421: LD_INT 20
22423: DOUBLE
22424: EQUAL
22425: IFTRUE 22429
22427: GO 22440
22429: POP
// bc_type := b_ext_siberium ; 21 :
22430: LD_ADDR_OWVAR 42
22434: PUSH
22435: LD_INT 21
22437: ST_TO_ADDR
22438: GO 22707
22440: LD_INT 21
22442: DOUBLE
22443: EQUAL
22444: IFTRUE 22448
22446: GO 22459
22448: POP
// bc_type := b_ext_computer ; 22 :
22449: LD_ADDR_OWVAR 42
22453: PUSH
22454: LD_INT 24
22456: ST_TO_ADDR
22457: GO 22707
22459: LD_INT 22
22461: DOUBLE
22462: EQUAL
22463: IFTRUE 22467
22465: GO 22478
22467: POP
// bc_type := b_ext_track ; 23 :
22468: LD_ADDR_OWVAR 42
22472: PUSH
22473: LD_INT 16
22475: ST_TO_ADDR
22476: GO 22707
22478: LD_INT 23
22480: DOUBLE
22481: EQUAL
22482: IFTRUE 22486
22484: GO 22497
22486: POP
// bc_type := b_ext_laser ; 24 :
22487: LD_ADDR_OWVAR 42
22491: PUSH
22492: LD_INT 25
22494: ST_TO_ADDR
22495: GO 22707
22497: LD_INT 24
22499: DOUBLE
22500: EQUAL
22501: IFTRUE 22505
22503: GO 22516
22505: POP
// bc_type := b_control_tower ; 25 :
22506: LD_ADDR_OWVAR 42
22510: PUSH
22511: LD_INT 36
22513: ST_TO_ADDR
22514: GO 22707
22516: LD_INT 25
22518: DOUBLE
22519: EQUAL
22520: IFTRUE 22524
22522: GO 22535
22524: POP
// bc_type := b_breastwork ; 26 :
22525: LD_ADDR_OWVAR 42
22529: PUSH
22530: LD_INT 31
22532: ST_TO_ADDR
22533: GO 22707
22535: LD_INT 26
22537: DOUBLE
22538: EQUAL
22539: IFTRUE 22543
22541: GO 22554
22543: POP
// bc_type := b_bunker ; 27 :
22544: LD_ADDR_OWVAR 42
22548: PUSH
22549: LD_INT 32
22551: ST_TO_ADDR
22552: GO 22707
22554: LD_INT 27
22556: DOUBLE
22557: EQUAL
22558: IFTRUE 22562
22560: GO 22573
22562: POP
// bc_type := b_turret ; 28 :
22563: LD_ADDR_OWVAR 42
22567: PUSH
22568: LD_INT 33
22570: ST_TO_ADDR
22571: GO 22707
22573: LD_INT 28
22575: DOUBLE
22576: EQUAL
22577: IFTRUE 22581
22579: GO 22592
22581: POP
// bc_type := b_armoury ; 29 :
22582: LD_ADDR_OWVAR 42
22586: PUSH
22587: LD_INT 4
22589: ST_TO_ADDR
22590: GO 22707
22592: LD_INT 29
22594: DOUBLE
22595: EQUAL
22596: IFTRUE 22600
22598: GO 22611
22600: POP
// bc_type := b_barracks ; 30 :
22601: LD_ADDR_OWVAR 42
22605: PUSH
22606: LD_INT 5
22608: ST_TO_ADDR
22609: GO 22707
22611: LD_INT 30
22613: DOUBLE
22614: EQUAL
22615: IFTRUE 22619
22617: GO 22630
22619: POP
// bc_type := b_solar_power ; 31 :
22620: LD_ADDR_OWVAR 42
22624: PUSH
22625: LD_INT 27
22627: ST_TO_ADDR
22628: GO 22707
22630: LD_INT 31
22632: DOUBLE
22633: EQUAL
22634: IFTRUE 22638
22636: GO 22649
22638: POP
// bc_type := b_oil_power ; 32 :
22639: LD_ADDR_OWVAR 42
22643: PUSH
22644: LD_INT 26
22646: ST_TO_ADDR
22647: GO 22707
22649: LD_INT 32
22651: DOUBLE
22652: EQUAL
22653: IFTRUE 22657
22655: GO 22668
22657: POP
// bc_type := b_siberite_power ; 33 :
22658: LD_ADDR_OWVAR 42
22662: PUSH
22663: LD_INT 28
22665: ST_TO_ADDR
22666: GO 22707
22668: LD_INT 33
22670: DOUBLE
22671: EQUAL
22672: IFTRUE 22676
22674: GO 22687
22676: POP
// bc_type := b_oil_mine ; 34 :
22677: LD_ADDR_OWVAR 42
22681: PUSH
22682: LD_INT 29
22684: ST_TO_ADDR
22685: GO 22707
22687: LD_INT 34
22689: DOUBLE
22690: EQUAL
22691: IFTRUE 22695
22693: GO 22706
22695: POP
// bc_type := b_siberite_mine ; end ;
22696: LD_ADDR_OWVAR 42
22700: PUSH
22701: LD_INT 30
22703: ST_TO_ADDR
22704: GO 22707
22706: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22707: LD_ADDR_VAR 0 8
22711: PUSH
22712: LD_VAR 0 5
22716: PPUSH
22717: LD_VAR 0 6
22721: PPUSH
22722: LD_VAR 0 3
22726: PPUSH
22727: CALL_OW 47
22731: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22732: LD_OWVAR 42
22736: PUSH
22737: LD_INT 32
22739: PUSH
22740: LD_INT 33
22742: PUSH
22743: EMPTY
22744: LIST
22745: LIST
22746: IN
22747: IFFALSE 22763
// PlaceWeaponTurret ( b , weapon ) ;
22749: LD_VAR 0 8
22753: PPUSH
22754: LD_VAR 0 4
22758: PPUSH
22759: CALL_OW 431
// end ;
22763: LD_VAR 0 7
22767: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22768: LD_INT 0
22770: PPUSH
22771: PPUSH
22772: PPUSH
22773: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22774: LD_ADDR_VAR 0 4
22778: PUSH
22779: LD_INT 22
22781: PUSH
22782: LD_OWVAR 2
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: PUSH
22791: LD_INT 2
22793: PUSH
22794: LD_INT 30
22796: PUSH
22797: LD_INT 0
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: PUSH
22804: LD_INT 30
22806: PUSH
22807: LD_INT 1
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: LIST
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: PPUSH
22823: CALL_OW 69
22827: ST_TO_ADDR
// if not tmp then
22828: LD_VAR 0 4
22832: NOT
22833: IFFALSE 22837
// exit ;
22835: GO 22896
// for i in tmp do
22837: LD_ADDR_VAR 0 2
22841: PUSH
22842: LD_VAR 0 4
22846: PUSH
22847: FOR_IN
22848: IFFALSE 22894
// for j = 1 to 3 do
22850: LD_ADDR_VAR 0 3
22854: PUSH
22855: DOUBLE
22856: LD_INT 1
22858: DEC
22859: ST_TO_ADDR
22860: LD_INT 3
22862: PUSH
22863: FOR_TO
22864: IFFALSE 22890
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22866: LD_VAR 0 2
22870: PPUSH
22871: CALL_OW 274
22875: PPUSH
22876: LD_VAR 0 3
22880: PPUSH
22881: LD_INT 99999
22883: PPUSH
22884: CALL_OW 277
22888: GO 22863
22890: POP
22891: POP
22892: GO 22847
22894: POP
22895: POP
// end ;
22896: LD_VAR 0 1
22900: RET
// export function hHackSetLevel10 ; var i , j ; begin
22901: LD_INT 0
22903: PPUSH
22904: PPUSH
22905: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22906: LD_ADDR_VAR 0 2
22910: PUSH
22911: LD_INT 21
22913: PUSH
22914: LD_INT 1
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: PPUSH
22921: CALL_OW 69
22925: PUSH
22926: FOR_IN
22927: IFFALSE 22979
// if IsSelected ( i ) then
22929: LD_VAR 0 2
22933: PPUSH
22934: CALL_OW 306
22938: IFFALSE 22977
// begin for j := 1 to 4 do
22940: LD_ADDR_VAR 0 3
22944: PUSH
22945: DOUBLE
22946: LD_INT 1
22948: DEC
22949: ST_TO_ADDR
22950: LD_INT 4
22952: PUSH
22953: FOR_TO
22954: IFFALSE 22975
// SetSkill ( i , j , 10 ) ;
22956: LD_VAR 0 2
22960: PPUSH
22961: LD_VAR 0 3
22965: PPUSH
22966: LD_INT 10
22968: PPUSH
22969: CALL_OW 237
22973: GO 22953
22975: POP
22976: POP
// end ;
22977: GO 22926
22979: POP
22980: POP
// end ;
22981: LD_VAR 0 1
22985: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22986: LD_INT 0
22988: PPUSH
22989: PPUSH
22990: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22991: LD_ADDR_VAR 0 2
22995: PUSH
22996: LD_INT 22
22998: PUSH
22999: LD_OWVAR 2
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: PUSH
23008: LD_INT 21
23010: PUSH
23011: LD_INT 1
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: PPUSH
23022: CALL_OW 69
23026: PUSH
23027: FOR_IN
23028: IFFALSE 23069
// begin for j := 1 to 4 do
23030: LD_ADDR_VAR 0 3
23034: PUSH
23035: DOUBLE
23036: LD_INT 1
23038: DEC
23039: ST_TO_ADDR
23040: LD_INT 4
23042: PUSH
23043: FOR_TO
23044: IFFALSE 23065
// SetSkill ( i , j , 10 ) ;
23046: LD_VAR 0 2
23050: PPUSH
23051: LD_VAR 0 3
23055: PPUSH
23056: LD_INT 10
23058: PPUSH
23059: CALL_OW 237
23063: GO 23043
23065: POP
23066: POP
// end ;
23067: GO 23027
23069: POP
23070: POP
// end ;
23071: LD_VAR 0 1
23075: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23076: LD_INT 0
23078: PPUSH
// uc_side := your_side ;
23079: LD_ADDR_OWVAR 20
23083: PUSH
23084: LD_OWVAR 2
23088: ST_TO_ADDR
// uc_nation := nation ;
23089: LD_ADDR_OWVAR 21
23093: PUSH
23094: LD_VAR 0 1
23098: ST_TO_ADDR
// InitHc ;
23099: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23103: LD_INT 0
23105: PPUSH
23106: LD_VAR 0 2
23110: PPUSH
23111: LD_VAR 0 3
23115: PPUSH
23116: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23120: LD_VAR 0 4
23124: PPUSH
23125: LD_VAR 0 5
23129: PPUSH
23130: CALL_OW 428
23134: PUSH
23135: LD_INT 0
23137: EQUAL
23138: IFFALSE 23162
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23140: CALL_OW 44
23144: PPUSH
23145: LD_VAR 0 4
23149: PPUSH
23150: LD_VAR 0 5
23154: PPUSH
23155: LD_INT 1
23157: PPUSH
23158: CALL_OW 48
// end ;
23162: LD_VAR 0 6
23166: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23167: LD_INT 0
23169: PPUSH
23170: PPUSH
// uc_side := your_side ;
23171: LD_ADDR_OWVAR 20
23175: PUSH
23176: LD_OWVAR 2
23180: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23181: LD_VAR 0 1
23185: PUSH
23186: LD_INT 1
23188: PUSH
23189: LD_INT 2
23191: PUSH
23192: LD_INT 3
23194: PUSH
23195: LD_INT 4
23197: PUSH
23198: LD_INT 5
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: IN
23208: IFFALSE 23220
// uc_nation := nation_american else
23210: LD_ADDR_OWVAR 21
23214: PUSH
23215: LD_INT 1
23217: ST_TO_ADDR
23218: GO 23263
// if chassis in [ 11 , 12 , 13 , 14 ] then
23220: LD_VAR 0 1
23224: PUSH
23225: LD_INT 11
23227: PUSH
23228: LD_INT 12
23230: PUSH
23231: LD_INT 13
23233: PUSH
23234: LD_INT 14
23236: PUSH
23237: EMPTY
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: IN
23243: IFFALSE 23255
// uc_nation := nation_arabian else
23245: LD_ADDR_OWVAR 21
23249: PUSH
23250: LD_INT 2
23252: ST_TO_ADDR
23253: GO 23263
// uc_nation := nation_russian ;
23255: LD_ADDR_OWVAR 21
23259: PUSH
23260: LD_INT 3
23262: ST_TO_ADDR
// vc_chassis := chassis ;
23263: LD_ADDR_OWVAR 37
23267: PUSH
23268: LD_VAR 0 1
23272: ST_TO_ADDR
// vc_engine := engine ;
23273: LD_ADDR_OWVAR 39
23277: PUSH
23278: LD_VAR 0 2
23282: ST_TO_ADDR
// vc_control := control ;
23283: LD_ADDR_OWVAR 38
23287: PUSH
23288: LD_VAR 0 3
23292: ST_TO_ADDR
// vc_weapon := weapon ;
23293: LD_ADDR_OWVAR 40
23297: PUSH
23298: LD_VAR 0 4
23302: ST_TO_ADDR
// un := CreateVehicle ;
23303: LD_ADDR_VAR 0 8
23307: PUSH
23308: CALL_OW 45
23312: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23313: LD_VAR 0 8
23317: PPUSH
23318: LD_INT 0
23320: PPUSH
23321: LD_INT 5
23323: PPUSH
23324: CALL_OW 12
23328: PPUSH
23329: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23333: LD_VAR 0 8
23337: PPUSH
23338: LD_VAR 0 5
23342: PPUSH
23343: LD_VAR 0 6
23347: PPUSH
23348: LD_INT 1
23350: PPUSH
23351: CALL_OW 48
// end ;
23355: LD_VAR 0 7
23359: RET
// export hInvincible ; every 1 do
23360: GO 23362
23362: DISABLE
// hInvincible := [ ] ;
23363: LD_ADDR_EXP 82
23367: PUSH
23368: EMPTY
23369: ST_TO_ADDR
23370: END
// every 10 do var i ;
23371: GO 23373
23373: DISABLE
23374: LD_INT 0
23376: PPUSH
// begin enable ;
23377: ENABLE
// if not hInvincible then
23378: LD_EXP 82
23382: NOT
23383: IFFALSE 23387
// exit ;
23385: GO 23431
// for i in hInvincible do
23387: LD_ADDR_VAR 0 1
23391: PUSH
23392: LD_EXP 82
23396: PUSH
23397: FOR_IN
23398: IFFALSE 23429
// if GetLives ( i ) < 1000 then
23400: LD_VAR 0 1
23404: PPUSH
23405: CALL_OW 256
23409: PUSH
23410: LD_INT 1000
23412: LESS
23413: IFFALSE 23427
// SetLives ( i , 1000 ) ;
23415: LD_VAR 0 1
23419: PPUSH
23420: LD_INT 1000
23422: PPUSH
23423: CALL_OW 234
23427: GO 23397
23429: POP
23430: POP
// end ;
23431: PPOPN 1
23433: END
// export function hHackInvincible ; var i ; begin
23434: LD_INT 0
23436: PPUSH
23437: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23438: LD_ADDR_VAR 0 2
23442: PUSH
23443: LD_INT 2
23445: PUSH
23446: LD_INT 21
23448: PUSH
23449: LD_INT 1
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: PUSH
23456: LD_INT 21
23458: PUSH
23459: LD_INT 2
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: LIST
23470: PPUSH
23471: CALL_OW 69
23475: PUSH
23476: FOR_IN
23477: IFFALSE 23538
// if IsSelected ( i ) then
23479: LD_VAR 0 2
23483: PPUSH
23484: CALL_OW 306
23488: IFFALSE 23536
// begin if i in hInvincible then
23490: LD_VAR 0 2
23494: PUSH
23495: LD_EXP 82
23499: IN
23500: IFFALSE 23520
// hInvincible := hInvincible diff i else
23502: LD_ADDR_EXP 82
23506: PUSH
23507: LD_EXP 82
23511: PUSH
23512: LD_VAR 0 2
23516: DIFF
23517: ST_TO_ADDR
23518: GO 23536
// hInvincible := hInvincible union i ;
23520: LD_ADDR_EXP 82
23524: PUSH
23525: LD_EXP 82
23529: PUSH
23530: LD_VAR 0 2
23534: UNION
23535: ST_TO_ADDR
// end ;
23536: GO 23476
23538: POP
23539: POP
// end ;
23540: LD_VAR 0 1
23544: RET
// export function hHackInvisible ; var i , j ; begin
23545: LD_INT 0
23547: PPUSH
23548: PPUSH
23549: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23550: LD_ADDR_VAR 0 2
23554: PUSH
23555: LD_INT 21
23557: PUSH
23558: LD_INT 1
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: PPUSH
23565: CALL_OW 69
23569: PUSH
23570: FOR_IN
23571: IFFALSE 23595
// if IsSelected ( i ) then
23573: LD_VAR 0 2
23577: PPUSH
23578: CALL_OW 306
23582: IFFALSE 23593
// ComForceInvisible ( i ) ;
23584: LD_VAR 0 2
23588: PPUSH
23589: CALL_OW 496
23593: GO 23570
23595: POP
23596: POP
// end ;
23597: LD_VAR 0 1
23601: RET
// export function hHackChangeYourSide ; begin
23602: LD_INT 0
23604: PPUSH
// if your_side = 8 then
23605: LD_OWVAR 2
23609: PUSH
23610: LD_INT 8
23612: EQUAL
23613: IFFALSE 23625
// your_side := 0 else
23615: LD_ADDR_OWVAR 2
23619: PUSH
23620: LD_INT 0
23622: ST_TO_ADDR
23623: GO 23639
// your_side := your_side + 1 ;
23625: LD_ADDR_OWVAR 2
23629: PUSH
23630: LD_OWVAR 2
23634: PUSH
23635: LD_INT 1
23637: PLUS
23638: ST_TO_ADDR
// end ;
23639: LD_VAR 0 1
23643: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23644: LD_INT 0
23646: PPUSH
23647: PPUSH
23648: PPUSH
// for i in all_units do
23649: LD_ADDR_VAR 0 2
23653: PUSH
23654: LD_OWVAR 3
23658: PUSH
23659: FOR_IN
23660: IFFALSE 23738
// if IsSelected ( i ) then
23662: LD_VAR 0 2
23666: PPUSH
23667: CALL_OW 306
23671: IFFALSE 23736
// begin j := GetSide ( i ) ;
23673: LD_ADDR_VAR 0 3
23677: PUSH
23678: LD_VAR 0 2
23682: PPUSH
23683: CALL_OW 255
23687: ST_TO_ADDR
// if j = 8 then
23688: LD_VAR 0 3
23692: PUSH
23693: LD_INT 8
23695: EQUAL
23696: IFFALSE 23708
// j := 0 else
23698: LD_ADDR_VAR 0 3
23702: PUSH
23703: LD_INT 0
23705: ST_TO_ADDR
23706: GO 23722
// j := j + 1 ;
23708: LD_ADDR_VAR 0 3
23712: PUSH
23713: LD_VAR 0 3
23717: PUSH
23718: LD_INT 1
23720: PLUS
23721: ST_TO_ADDR
// SetSide ( i , j ) ;
23722: LD_VAR 0 2
23726: PPUSH
23727: LD_VAR 0 3
23731: PPUSH
23732: CALL_OW 235
// end ;
23736: GO 23659
23738: POP
23739: POP
// end ;
23740: LD_VAR 0 1
23744: RET
// export function hHackFog ; begin
23745: LD_INT 0
23747: PPUSH
// FogOff ( true ) ;
23748: LD_INT 1
23750: PPUSH
23751: CALL_OW 344
// end ;
23755: LD_VAR 0 1
23759: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23760: LD_INT 0
23762: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23763: LD_VAR 0 1
23767: PPUSH
23768: LD_VAR 0 2
23772: PPUSH
23773: LD_VAR 0 3
23777: PPUSH
23778: LD_INT 1
23780: PPUSH
23781: LD_INT 1
23783: PPUSH
23784: CALL_OW 483
// CenterOnXY ( x , y ) ;
23788: LD_VAR 0 2
23792: PPUSH
23793: LD_VAR 0 3
23797: PPUSH
23798: CALL_OW 84
// end ;
23802: LD_VAR 0 4
23806: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
23807: LD_INT 0
23809: PPUSH
23810: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
23811: LD_VAR 0 1
23815: NOT
23816: PUSH
23817: LD_VAR 0 2
23821: PPUSH
23822: LD_VAR 0 3
23826: PPUSH
23827: CALL_OW 488
23831: NOT
23832: OR
23833: PUSH
23834: LD_VAR 0 1
23838: PPUSH
23839: CALL_OW 266
23843: PUSH
23844: LD_INT 3
23846: NONEQUAL
23847: PUSH
23848: LD_VAR 0 1
23852: PPUSH
23853: CALL_OW 247
23857: PUSH
23858: LD_INT 1
23860: EQUAL
23861: NOT
23862: AND
23863: OR
23864: IFFALSE 23868
// exit ;
23866: GO 24017
// if GetType ( factory ) = unit_human then
23868: LD_VAR 0 1
23872: PPUSH
23873: CALL_OW 247
23877: PUSH
23878: LD_INT 1
23880: EQUAL
23881: IFFALSE 23898
// factory := IsInUnit ( factory ) ;
23883: LD_ADDR_VAR 0 1
23887: PUSH
23888: LD_VAR 0 1
23892: PPUSH
23893: CALL_OW 310
23897: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
23898: LD_VAR 0 1
23902: PPUSH
23903: CALL_OW 266
23907: PUSH
23908: LD_INT 3
23910: NONEQUAL
23911: IFFALSE 23915
// exit ;
23913: GO 24017
// if HexInfo ( x , y ) = factory then
23915: LD_VAR 0 2
23919: PPUSH
23920: LD_VAR 0 3
23924: PPUSH
23925: CALL_OW 428
23929: PUSH
23930: LD_VAR 0 1
23934: EQUAL
23935: IFFALSE 23962
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
23937: LD_ADDR_EXP 83
23941: PUSH
23942: LD_EXP 83
23946: PPUSH
23947: LD_VAR 0 1
23951: PPUSH
23952: LD_INT 0
23954: PPUSH
23955: CALL_OW 1
23959: ST_TO_ADDR
23960: GO 24013
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
23962: LD_ADDR_EXP 83
23966: PUSH
23967: LD_EXP 83
23971: PPUSH
23972: LD_VAR 0 1
23976: PPUSH
23977: LD_VAR 0 1
23981: PPUSH
23982: CALL_OW 255
23986: PUSH
23987: LD_VAR 0 1
23991: PUSH
23992: LD_VAR 0 2
23996: PUSH
23997: LD_VAR 0 3
24001: PUSH
24002: EMPTY
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: PPUSH
24008: CALL_OW 1
24012: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24013: CALL 24022 0 0
// end ;
24017: LD_VAR 0 4
24021: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
24022: LD_INT 0
24024: PPUSH
24025: PPUSH
24026: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24027: LD_STRING resetFactoryWaypoint();
24029: PPUSH
24030: CALL_OW 559
// if factoryWaypoints then
24034: LD_EXP 83
24038: IFFALSE 24164
// begin list := PrepareArray ( factoryWaypoints ) ;
24040: LD_ADDR_VAR 0 3
24044: PUSH
24045: LD_EXP 83
24049: PPUSH
24050: CALL 70541 0 1
24054: ST_TO_ADDR
// for i := 1 to list do
24055: LD_ADDR_VAR 0 2
24059: PUSH
24060: DOUBLE
24061: LD_INT 1
24063: DEC
24064: ST_TO_ADDR
24065: LD_VAR 0 3
24069: PUSH
24070: FOR_TO
24071: IFFALSE 24162
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24073: LD_STRING setFactoryWaypointXY(
24075: PUSH
24076: LD_VAR 0 3
24080: PUSH
24081: LD_VAR 0 2
24085: ARRAY
24086: PUSH
24087: LD_INT 1
24089: ARRAY
24090: STR
24091: PUSH
24092: LD_STRING ,
24094: STR
24095: PUSH
24096: LD_VAR 0 3
24100: PUSH
24101: LD_VAR 0 2
24105: ARRAY
24106: PUSH
24107: LD_INT 2
24109: ARRAY
24110: STR
24111: PUSH
24112: LD_STRING ,
24114: STR
24115: PUSH
24116: LD_VAR 0 3
24120: PUSH
24121: LD_VAR 0 2
24125: ARRAY
24126: PUSH
24127: LD_INT 3
24129: ARRAY
24130: STR
24131: PUSH
24132: LD_STRING ,
24134: STR
24135: PUSH
24136: LD_VAR 0 3
24140: PUSH
24141: LD_VAR 0 2
24145: ARRAY
24146: PUSH
24147: LD_INT 4
24149: ARRAY
24150: STR
24151: PUSH
24152: LD_STRING )
24154: STR
24155: PPUSH
24156: CALL_OW 559
24160: GO 24070
24162: POP
24163: POP
// end ; end ;
24164: LD_VAR 0 1
24168: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
24169: LD_INT 0
24171: PPUSH
// if HexInfo ( x , y ) = warehouse then
24172: LD_VAR 0 2
24176: PPUSH
24177: LD_VAR 0 3
24181: PPUSH
24182: CALL_OW 428
24186: PUSH
24187: LD_VAR 0 1
24191: EQUAL
24192: IFFALSE 24219
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
24194: LD_ADDR_EXP 84
24198: PUSH
24199: LD_EXP 84
24203: PPUSH
24204: LD_VAR 0 1
24208: PPUSH
24209: LD_INT 0
24211: PPUSH
24212: CALL_OW 1
24216: ST_TO_ADDR
24217: GO 24270
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
24219: LD_ADDR_EXP 84
24223: PUSH
24224: LD_EXP 84
24228: PPUSH
24229: LD_VAR 0 1
24233: PPUSH
24234: LD_VAR 0 1
24238: PPUSH
24239: CALL_OW 255
24243: PUSH
24244: LD_VAR 0 1
24248: PUSH
24249: LD_VAR 0 2
24253: PUSH
24254: LD_VAR 0 3
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: PPUSH
24265: CALL_OW 1
24269: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
24270: CALL 24279 0 0
// end ;
24274: LD_VAR 0 4
24278: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
24279: LD_INT 0
24281: PPUSH
24282: PPUSH
24283: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
24284: LD_STRING resetWarehouseGatheringPoints();
24286: PPUSH
24287: CALL_OW 559
// if warehouseGatheringPoints then
24291: LD_EXP 84
24295: IFFALSE 24421
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
24297: LD_ADDR_VAR 0 3
24301: PUSH
24302: LD_EXP 84
24306: PPUSH
24307: CALL 70541 0 1
24311: ST_TO_ADDR
// for i := 1 to list do
24312: LD_ADDR_VAR 0 2
24316: PUSH
24317: DOUBLE
24318: LD_INT 1
24320: DEC
24321: ST_TO_ADDR
24322: LD_VAR 0 3
24326: PUSH
24327: FOR_TO
24328: IFFALSE 24419
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24330: LD_STRING setWarehouseGatheringPointXY(
24332: PUSH
24333: LD_VAR 0 3
24337: PUSH
24338: LD_VAR 0 2
24342: ARRAY
24343: PUSH
24344: LD_INT 1
24346: ARRAY
24347: STR
24348: PUSH
24349: LD_STRING ,
24351: STR
24352: PUSH
24353: LD_VAR 0 3
24357: PUSH
24358: LD_VAR 0 2
24362: ARRAY
24363: PUSH
24364: LD_INT 2
24366: ARRAY
24367: STR
24368: PUSH
24369: LD_STRING ,
24371: STR
24372: PUSH
24373: LD_VAR 0 3
24377: PUSH
24378: LD_VAR 0 2
24382: ARRAY
24383: PUSH
24384: LD_INT 3
24386: ARRAY
24387: STR
24388: PUSH
24389: LD_STRING ,
24391: STR
24392: PUSH
24393: LD_VAR 0 3
24397: PUSH
24398: LD_VAR 0 2
24402: ARRAY
24403: PUSH
24404: LD_INT 4
24406: ARRAY
24407: STR
24408: PUSH
24409: LD_STRING )
24411: STR
24412: PPUSH
24413: CALL_OW 559
24417: GO 24327
24419: POP
24420: POP
// end ; end ;
24421: LD_VAR 0 1
24425: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
24426: LD_EXP 84
24430: IFFALSE 25115
24432: GO 24434
24434: DISABLE
24435: LD_INT 0
24437: PPUSH
24438: PPUSH
24439: PPUSH
24440: PPUSH
24441: PPUSH
24442: PPUSH
24443: PPUSH
24444: PPUSH
24445: PPUSH
// begin enable ;
24446: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
24447: LD_ADDR_VAR 0 3
24451: PUSH
24452: LD_EXP 84
24456: PPUSH
24457: CALL 70541 0 1
24461: ST_TO_ADDR
// if not list then
24462: LD_VAR 0 3
24466: NOT
24467: IFFALSE 24471
// exit ;
24469: GO 25115
// for i := 1 to list do
24471: LD_ADDR_VAR 0 1
24475: PUSH
24476: DOUBLE
24477: LD_INT 1
24479: DEC
24480: ST_TO_ADDR
24481: LD_VAR 0 3
24485: PUSH
24486: FOR_TO
24487: IFFALSE 25113
// begin depot := list [ i ] [ 2 ] ;
24489: LD_ADDR_VAR 0 8
24493: PUSH
24494: LD_VAR 0 3
24498: PUSH
24499: LD_VAR 0 1
24503: ARRAY
24504: PUSH
24505: LD_INT 2
24507: ARRAY
24508: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
24509: LD_ADDR_VAR 0 5
24513: PUSH
24514: LD_VAR 0 3
24518: PUSH
24519: LD_VAR 0 1
24523: ARRAY
24524: PUSH
24525: LD_INT 1
24527: ARRAY
24528: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
24529: LD_VAR 0 8
24533: PPUSH
24534: CALL_OW 301
24538: PUSH
24539: LD_VAR 0 5
24543: PUSH
24544: LD_VAR 0 8
24548: PPUSH
24549: CALL_OW 255
24553: NONEQUAL
24554: OR
24555: IFFALSE 24584
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
24557: LD_ADDR_EXP 84
24561: PUSH
24562: LD_EXP 84
24566: PPUSH
24567: LD_VAR 0 8
24571: PPUSH
24572: LD_INT 0
24574: PPUSH
24575: CALL_OW 1
24579: ST_TO_ADDR
// exit ;
24580: POP
24581: POP
24582: GO 25115
// end ; x := list [ i ] [ 3 ] ;
24584: LD_ADDR_VAR 0 6
24588: PUSH
24589: LD_VAR 0 3
24593: PUSH
24594: LD_VAR 0 1
24598: ARRAY
24599: PUSH
24600: LD_INT 3
24602: ARRAY
24603: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
24604: LD_ADDR_VAR 0 7
24608: PUSH
24609: LD_VAR 0 3
24613: PUSH
24614: LD_VAR 0 1
24618: ARRAY
24619: PUSH
24620: LD_INT 4
24622: ARRAY
24623: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
24624: LD_ADDR_VAR 0 9
24628: PUSH
24629: LD_VAR 0 6
24633: PPUSH
24634: LD_VAR 0 7
24638: PPUSH
24639: LD_INT 16
24641: PPUSH
24642: CALL 69129 0 3
24646: ST_TO_ADDR
// if not cratesNearbyPoint then
24647: LD_VAR 0 9
24651: NOT
24652: IFFALSE 24658
// exit ;
24654: POP
24655: POP
24656: GO 25115
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
24658: LD_ADDR_VAR 0 4
24662: PUSH
24663: LD_INT 22
24665: PUSH
24666: LD_VAR 0 5
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: PUSH
24675: LD_INT 3
24677: PUSH
24678: LD_INT 60
24680: PUSH
24681: EMPTY
24682: LIST
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: PUSH
24688: LD_INT 91
24690: PUSH
24691: LD_VAR 0 8
24695: PUSH
24696: LD_INT 6
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: LIST
24703: PUSH
24704: LD_INT 2
24706: PUSH
24707: LD_INT 25
24709: PUSH
24710: LD_INT 2
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: PUSH
24717: LD_INT 25
24719: PUSH
24720: LD_INT 16
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: LIST
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: PPUSH
24738: CALL_OW 69
24742: PUSH
24743: LD_VAR 0 8
24747: PPUSH
24748: CALL_OW 313
24752: PPUSH
24753: LD_INT 3
24755: PUSH
24756: LD_INT 60
24758: PUSH
24759: EMPTY
24760: LIST
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: PUSH
24766: LD_INT 2
24768: PUSH
24769: LD_INT 25
24771: PUSH
24772: LD_INT 2
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PUSH
24779: LD_INT 25
24781: PUSH
24782: LD_INT 16
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: LIST
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PPUSH
24798: CALL_OW 72
24802: UNION
24803: ST_TO_ADDR
// if tmp then
24804: LD_VAR 0 4
24808: IFFALSE 24888
// begin tmp := ShrinkArray ( tmp , 3 ) ;
24810: LD_ADDR_VAR 0 4
24814: PUSH
24815: LD_VAR 0 4
24819: PPUSH
24820: LD_INT 3
24822: PPUSH
24823: CALL 67098 0 2
24827: ST_TO_ADDR
// for j in tmp do
24828: LD_ADDR_VAR 0 2
24832: PUSH
24833: LD_VAR 0 4
24837: PUSH
24838: FOR_IN
24839: IFFALSE 24882
// begin if IsInUnit ( j ) then
24841: LD_VAR 0 2
24845: PPUSH
24846: CALL_OW 310
24850: IFFALSE 24861
// ComExit ( j ) ;
24852: LD_VAR 0 2
24856: PPUSH
24857: CALL 67181 0 1
// AddComCollect ( j , x , y ) ;
24861: LD_VAR 0 2
24865: PPUSH
24866: LD_VAR 0 6
24870: PPUSH
24871: LD_VAR 0 7
24875: PPUSH
24876: CALL_OW 177
// end ;
24880: GO 24838
24882: POP
24883: POP
// exit ;
24884: POP
24885: POP
24886: GO 25115
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
24888: LD_ADDR_VAR 0 4
24892: PUSH
24893: LD_INT 22
24895: PUSH
24896: LD_VAR 0 5
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PUSH
24905: LD_INT 91
24907: PUSH
24908: LD_VAR 0 8
24912: PUSH
24913: LD_INT 8
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: LIST
24920: PUSH
24921: LD_INT 2
24923: PUSH
24924: LD_INT 34
24926: PUSH
24927: LD_INT 12
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: PUSH
24934: LD_INT 34
24936: PUSH
24937: LD_INT 51
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PUSH
24944: LD_INT 34
24946: PUSH
24947: LD_INT 32
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: PUSH
24954: LD_INT 34
24956: PUSH
24957: LD_INT 89
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: LIST
24975: PPUSH
24976: CALL_OW 69
24980: ST_TO_ADDR
// if tmp then
24981: LD_VAR 0 4
24985: IFFALSE 25111
// begin for j in tmp do
24987: LD_ADDR_VAR 0 2
24991: PUSH
24992: LD_VAR 0 4
24996: PUSH
24997: FOR_IN
24998: IFFALSE 25109
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
25000: LD_VAR 0 2
25004: PPUSH
25005: CALL_OW 262
25009: PUSH
25010: LD_INT 3
25012: EQUAL
25013: PUSH
25014: LD_VAR 0 2
25018: PPUSH
25019: CALL_OW 261
25023: PUSH
25024: LD_INT 20
25026: GREATER
25027: OR
25028: PUSH
25029: LD_VAR 0 2
25033: PPUSH
25034: CALL_OW 314
25038: NOT
25039: AND
25040: PUSH
25041: LD_VAR 0 2
25045: PPUSH
25046: CALL_OW 263
25050: PUSH
25051: LD_INT 1
25053: NONEQUAL
25054: PUSH
25055: LD_VAR 0 2
25059: PPUSH
25060: CALL_OW 311
25064: OR
25065: AND
25066: IFFALSE 25107
// begin ComCollect ( j , x , y ) ;
25068: LD_VAR 0 2
25072: PPUSH
25073: LD_VAR 0 6
25077: PPUSH
25078: LD_VAR 0 7
25082: PPUSH
25083: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
25087: LD_VAR 0 2
25091: PPUSH
25092: LD_VAR 0 8
25096: PPUSH
25097: CALL_OW 172
// exit ;
25101: POP
25102: POP
25103: POP
25104: POP
25105: GO 25115
// end ;
25107: GO 24997
25109: POP
25110: POP
// end ; end ;
25111: GO 24486
25113: POP
25114: POP
// end ; end_of_file
25115: PPOPN 9
25117: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25118: LD_INT 0
25120: PPUSH
25121: PPUSH
25122: PPUSH
25123: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25124: LD_VAR 0 1
25128: PPUSH
25129: CALL_OW 264
25133: PUSH
25134: LD_INT 91
25136: EQUAL
25137: IFFALSE 25209
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25139: LD_INT 68
25141: PPUSH
25142: LD_VAR 0 1
25146: PPUSH
25147: CALL_OW 255
25151: PPUSH
25152: CALL_OW 321
25156: PUSH
25157: LD_INT 2
25159: EQUAL
25160: IFFALSE 25172
// eff := 70 else
25162: LD_ADDR_VAR 0 4
25166: PUSH
25167: LD_INT 70
25169: ST_TO_ADDR
25170: GO 25180
// eff := 30 ;
25172: LD_ADDR_VAR 0 4
25176: PUSH
25177: LD_INT 30
25179: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25180: LD_VAR 0 1
25184: PPUSH
25185: CALL_OW 250
25189: PPUSH
25190: LD_VAR 0 1
25194: PPUSH
25195: CALL_OW 251
25199: PPUSH
25200: LD_VAR 0 4
25204: PPUSH
25205: CALL_OW 495
// end ; end ;
25209: LD_VAR 0 2
25213: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25214: LD_INT 0
25216: PPUSH
// end ;
25217: LD_VAR 0 4
25221: RET
// export function SOS_Command ( cmd ) ; begin
25222: LD_INT 0
25224: PPUSH
// end ;
25225: LD_VAR 0 2
25229: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25230: LD_INT 0
25232: PPUSH
// end ;
25233: LD_VAR 0 6
25237: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
25238: LD_INT 0
25240: PPUSH
25241: PPUSH
// if not vehicle or not factory then
25242: LD_VAR 0 1
25246: NOT
25247: PUSH
25248: LD_VAR 0 2
25252: NOT
25253: OR
25254: IFFALSE 25258
// exit ;
25256: GO 25489
// if factoryWaypoints >= factory then
25258: LD_EXP 83
25262: PUSH
25263: LD_VAR 0 2
25267: GREATEREQUAL
25268: IFFALSE 25489
// if factoryWaypoints [ factory ] then
25270: LD_EXP 83
25274: PUSH
25275: LD_VAR 0 2
25279: ARRAY
25280: IFFALSE 25489
// begin if GetControl ( vehicle ) = control_manual then
25282: LD_VAR 0 1
25286: PPUSH
25287: CALL_OW 263
25291: PUSH
25292: LD_INT 1
25294: EQUAL
25295: IFFALSE 25376
// begin driver := IsDrivenBy ( vehicle ) ;
25297: LD_ADDR_VAR 0 4
25301: PUSH
25302: LD_VAR 0 1
25306: PPUSH
25307: CALL_OW 311
25311: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25312: LD_VAR 0 4
25316: PPUSH
25317: LD_EXP 83
25321: PUSH
25322: LD_VAR 0 2
25326: ARRAY
25327: PUSH
25328: LD_INT 3
25330: ARRAY
25331: PPUSH
25332: LD_EXP 83
25336: PUSH
25337: LD_VAR 0 2
25341: ARRAY
25342: PUSH
25343: LD_INT 4
25345: ARRAY
25346: PPUSH
25347: CALL_OW 171
// AddComExitVehicle ( driver ) ;
25351: LD_VAR 0 4
25355: PPUSH
25356: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
25360: LD_VAR 0 4
25364: PPUSH
25365: LD_VAR 0 2
25369: PPUSH
25370: CALL_OW 180
// end else
25374: GO 25489
// if GetControl ( vehicle ) = control_remote then
25376: LD_VAR 0 1
25380: PPUSH
25381: CALL_OW 263
25385: PUSH
25386: LD_INT 2
25388: EQUAL
25389: IFFALSE 25450
// begin wait ( 0 0$2 ) ;
25391: LD_INT 70
25393: PPUSH
25394: CALL_OW 67
// if Connect ( vehicle ) then
25398: LD_VAR 0 1
25402: PPUSH
25403: CALL 37513 0 1
25407: IFFALSE 25448
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25409: LD_VAR 0 1
25413: PPUSH
25414: LD_EXP 83
25418: PUSH
25419: LD_VAR 0 2
25423: ARRAY
25424: PUSH
25425: LD_INT 3
25427: ARRAY
25428: PPUSH
25429: LD_EXP 83
25433: PUSH
25434: LD_VAR 0 2
25438: ARRAY
25439: PUSH
25440: LD_INT 4
25442: ARRAY
25443: PPUSH
25444: CALL_OW 171
// end else
25448: GO 25489
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25450: LD_VAR 0 1
25454: PPUSH
25455: LD_EXP 83
25459: PUSH
25460: LD_VAR 0 2
25464: ARRAY
25465: PUSH
25466: LD_INT 3
25468: ARRAY
25469: PPUSH
25470: LD_EXP 83
25474: PUSH
25475: LD_VAR 0 2
25479: ARRAY
25480: PUSH
25481: LD_INT 4
25483: ARRAY
25484: PPUSH
25485: CALL_OW 171
// end ; end ;
25489: LD_VAR 0 3
25493: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25494: LD_INT 0
25496: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25497: LD_VAR 0 1
25501: PUSH
25502: LD_INT 250
25504: EQUAL
25505: PUSH
25506: LD_VAR 0 2
25510: PPUSH
25511: CALL_OW 264
25515: PUSH
25516: LD_INT 81
25518: EQUAL
25519: AND
25520: IFFALSE 25541
// MinerPlaceMine ( unit , x , y ) ;
25522: LD_VAR 0 2
25526: PPUSH
25527: LD_VAR 0 4
25531: PPUSH
25532: LD_VAR 0 5
25536: PPUSH
25537: CALL 27926 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25541: LD_VAR 0 1
25545: PUSH
25546: LD_INT 251
25548: EQUAL
25549: PUSH
25550: LD_VAR 0 2
25554: PPUSH
25555: CALL_OW 264
25559: PUSH
25560: LD_INT 81
25562: EQUAL
25563: AND
25564: IFFALSE 25585
// MinerDetonateMine ( unit , x , y ) ;
25566: LD_VAR 0 2
25570: PPUSH
25571: LD_VAR 0 4
25575: PPUSH
25576: LD_VAR 0 5
25580: PPUSH
25581: CALL 28201 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25585: LD_VAR 0 1
25589: PUSH
25590: LD_INT 252
25592: EQUAL
25593: PUSH
25594: LD_VAR 0 2
25598: PPUSH
25599: CALL_OW 264
25603: PUSH
25604: LD_INT 81
25606: EQUAL
25607: AND
25608: IFFALSE 25629
// MinerCreateMinefield ( unit , x , y ) ;
25610: LD_VAR 0 2
25614: PPUSH
25615: LD_VAR 0 4
25619: PPUSH
25620: LD_VAR 0 5
25624: PPUSH
25625: CALL 28618 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25629: LD_VAR 0 1
25633: PUSH
25634: LD_INT 253
25636: EQUAL
25637: PUSH
25638: LD_VAR 0 2
25642: PPUSH
25643: CALL_OW 257
25647: PUSH
25648: LD_INT 5
25650: EQUAL
25651: AND
25652: IFFALSE 25673
// ComBinocular ( unit , x , y ) ;
25654: LD_VAR 0 2
25658: PPUSH
25659: LD_VAR 0 4
25663: PPUSH
25664: LD_VAR 0 5
25668: PPUSH
25669: CALL 28987 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25673: LD_VAR 0 1
25677: PUSH
25678: LD_INT 254
25680: EQUAL
25681: PUSH
25682: LD_VAR 0 2
25686: PPUSH
25687: CALL_OW 264
25691: PUSH
25692: LD_INT 99
25694: EQUAL
25695: AND
25696: PUSH
25697: LD_VAR 0 3
25701: PPUSH
25702: CALL_OW 263
25706: PUSH
25707: LD_INT 3
25709: EQUAL
25710: AND
25711: IFFALSE 25727
// HackDestroyVehicle ( unit , selectedUnit ) ;
25713: LD_VAR 0 2
25717: PPUSH
25718: LD_VAR 0 3
25722: PPUSH
25723: CALL 27290 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25727: LD_VAR 0 1
25731: PUSH
25732: LD_INT 255
25734: EQUAL
25735: PUSH
25736: LD_VAR 0 2
25740: PPUSH
25741: CALL_OW 264
25745: PUSH
25746: LD_INT 14
25748: PUSH
25749: LD_INT 53
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: IN
25756: AND
25757: PUSH
25758: LD_VAR 0 4
25762: PPUSH
25763: LD_VAR 0 5
25767: PPUSH
25768: CALL_OW 488
25772: AND
25773: IFFALSE 25797
// CutTreeXYR ( unit , x , y , 12 ) ;
25775: LD_VAR 0 2
25779: PPUSH
25780: LD_VAR 0 4
25784: PPUSH
25785: LD_VAR 0 5
25789: PPUSH
25790: LD_INT 12
25792: PPUSH
25793: CALL 25860 0 4
// if cmd = 256 then
25797: LD_VAR 0 1
25801: PUSH
25802: LD_INT 256
25804: EQUAL
25805: IFFALSE 25826
// SetFactoryWaypoint ( unit , x , y ) ;
25807: LD_VAR 0 2
25811: PPUSH
25812: LD_VAR 0 4
25816: PPUSH
25817: LD_VAR 0 5
25821: PPUSH
25822: CALL 23807 0 3
// if cmd = 257 then
25826: LD_VAR 0 1
25830: PUSH
25831: LD_INT 257
25833: EQUAL
25834: IFFALSE 25855
// SetWarehouseGatheringPoint ( unit , x , y ) ;
25836: LD_VAR 0 2
25840: PPUSH
25841: LD_VAR 0 4
25845: PPUSH
25846: LD_VAR 0 5
25850: PPUSH
25851: CALL 24169 0 3
// end ;
25855: LD_VAR 0 6
25859: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25860: LD_INT 0
25862: PPUSH
25863: PPUSH
25864: PPUSH
25865: PPUSH
25866: PPUSH
25867: PPUSH
25868: PPUSH
25869: PPUSH
25870: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25871: LD_VAR 0 1
25875: NOT
25876: PUSH
25877: LD_VAR 0 2
25881: PPUSH
25882: LD_VAR 0 3
25886: PPUSH
25887: CALL_OW 488
25891: NOT
25892: OR
25893: PUSH
25894: LD_VAR 0 4
25898: NOT
25899: OR
25900: IFFALSE 25904
// exit ;
25902: GO 26244
// list := [ ] ;
25904: LD_ADDR_VAR 0 13
25908: PUSH
25909: EMPTY
25910: ST_TO_ADDR
// if x - r < 0 then
25911: LD_VAR 0 2
25915: PUSH
25916: LD_VAR 0 4
25920: MINUS
25921: PUSH
25922: LD_INT 0
25924: LESS
25925: IFFALSE 25937
// min_x := 0 else
25927: LD_ADDR_VAR 0 7
25931: PUSH
25932: LD_INT 0
25934: ST_TO_ADDR
25935: GO 25953
// min_x := x - r ;
25937: LD_ADDR_VAR 0 7
25941: PUSH
25942: LD_VAR 0 2
25946: PUSH
25947: LD_VAR 0 4
25951: MINUS
25952: ST_TO_ADDR
// if y - r < 0 then
25953: LD_VAR 0 3
25957: PUSH
25958: LD_VAR 0 4
25962: MINUS
25963: PUSH
25964: LD_INT 0
25966: LESS
25967: IFFALSE 25979
// min_y := 0 else
25969: LD_ADDR_VAR 0 8
25973: PUSH
25974: LD_INT 0
25976: ST_TO_ADDR
25977: GO 25995
// min_y := y - r ;
25979: LD_ADDR_VAR 0 8
25983: PUSH
25984: LD_VAR 0 3
25988: PUSH
25989: LD_VAR 0 4
25993: MINUS
25994: ST_TO_ADDR
// max_x := x + r ;
25995: LD_ADDR_VAR 0 9
25999: PUSH
26000: LD_VAR 0 2
26004: PUSH
26005: LD_VAR 0 4
26009: PLUS
26010: ST_TO_ADDR
// max_y := y + r ;
26011: LD_ADDR_VAR 0 10
26015: PUSH
26016: LD_VAR 0 3
26020: PUSH
26021: LD_VAR 0 4
26025: PLUS
26026: ST_TO_ADDR
// for _x = min_x to max_x do
26027: LD_ADDR_VAR 0 11
26031: PUSH
26032: DOUBLE
26033: LD_VAR 0 7
26037: DEC
26038: ST_TO_ADDR
26039: LD_VAR 0 9
26043: PUSH
26044: FOR_TO
26045: IFFALSE 26162
// for _y = min_y to max_y do
26047: LD_ADDR_VAR 0 12
26051: PUSH
26052: DOUBLE
26053: LD_VAR 0 8
26057: DEC
26058: ST_TO_ADDR
26059: LD_VAR 0 10
26063: PUSH
26064: FOR_TO
26065: IFFALSE 26158
// begin if not ValidHex ( _x , _y ) then
26067: LD_VAR 0 11
26071: PPUSH
26072: LD_VAR 0 12
26076: PPUSH
26077: CALL_OW 488
26081: NOT
26082: IFFALSE 26086
// continue ;
26084: GO 26064
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26086: LD_VAR 0 11
26090: PPUSH
26091: LD_VAR 0 12
26095: PPUSH
26096: CALL_OW 351
26100: PUSH
26101: LD_VAR 0 11
26105: PPUSH
26106: LD_VAR 0 12
26110: PPUSH
26111: CALL_OW 554
26115: AND
26116: IFFALSE 26156
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26118: LD_ADDR_VAR 0 13
26122: PUSH
26123: LD_VAR 0 13
26127: PPUSH
26128: LD_VAR 0 13
26132: PUSH
26133: LD_INT 1
26135: PLUS
26136: PPUSH
26137: LD_VAR 0 11
26141: PUSH
26142: LD_VAR 0 12
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PPUSH
26151: CALL_OW 2
26155: ST_TO_ADDR
// end ;
26156: GO 26064
26158: POP
26159: POP
26160: GO 26044
26162: POP
26163: POP
// if not list then
26164: LD_VAR 0 13
26168: NOT
26169: IFFALSE 26173
// exit ;
26171: GO 26244
// for i in list do
26173: LD_ADDR_VAR 0 6
26177: PUSH
26178: LD_VAR 0 13
26182: PUSH
26183: FOR_IN
26184: IFFALSE 26242
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26186: LD_VAR 0 1
26190: PPUSH
26191: LD_STRING M
26193: PUSH
26194: LD_VAR 0 6
26198: PUSH
26199: LD_INT 1
26201: ARRAY
26202: PUSH
26203: LD_VAR 0 6
26207: PUSH
26208: LD_INT 2
26210: ARRAY
26211: PUSH
26212: LD_INT 0
26214: PUSH
26215: LD_INT 0
26217: PUSH
26218: LD_INT 0
26220: PUSH
26221: LD_INT 0
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: PUSH
26233: EMPTY
26234: LIST
26235: PPUSH
26236: CALL_OW 447
26240: GO 26183
26242: POP
26243: POP
// end ;
26244: LD_VAR 0 5
26248: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26249: LD_EXP 86
26253: NOT
26254: IFFALSE 26304
26256: GO 26258
26258: DISABLE
// begin initHack := true ;
26259: LD_ADDR_EXP 86
26263: PUSH
26264: LD_INT 1
26266: ST_TO_ADDR
// hackTanks := [ ] ;
26267: LD_ADDR_EXP 87
26271: PUSH
26272: EMPTY
26273: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26274: LD_ADDR_EXP 88
26278: PUSH
26279: EMPTY
26280: ST_TO_ADDR
// hackLimit := 3 ;
26281: LD_ADDR_EXP 89
26285: PUSH
26286: LD_INT 3
26288: ST_TO_ADDR
// hackDist := 12 ;
26289: LD_ADDR_EXP 90
26293: PUSH
26294: LD_INT 12
26296: ST_TO_ADDR
// hackCounter := [ ] ;
26297: LD_ADDR_EXP 91
26301: PUSH
26302: EMPTY
26303: ST_TO_ADDR
// end ;
26304: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26305: LD_EXP 86
26309: PUSH
26310: LD_INT 34
26312: PUSH
26313: LD_INT 99
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PPUSH
26320: CALL_OW 69
26324: AND
26325: IFFALSE 26578
26327: GO 26329
26329: DISABLE
26330: LD_INT 0
26332: PPUSH
26333: PPUSH
// begin enable ;
26334: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26335: LD_ADDR_VAR 0 1
26339: PUSH
26340: LD_INT 34
26342: PUSH
26343: LD_INT 99
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PPUSH
26350: CALL_OW 69
26354: PUSH
26355: FOR_IN
26356: IFFALSE 26576
// begin if not i in hackTanks then
26358: LD_VAR 0 1
26362: PUSH
26363: LD_EXP 87
26367: IN
26368: NOT
26369: IFFALSE 26452
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26371: LD_ADDR_EXP 87
26375: PUSH
26376: LD_EXP 87
26380: PPUSH
26381: LD_EXP 87
26385: PUSH
26386: LD_INT 1
26388: PLUS
26389: PPUSH
26390: LD_VAR 0 1
26394: PPUSH
26395: CALL_OW 1
26399: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26400: LD_ADDR_EXP 88
26404: PUSH
26405: LD_EXP 88
26409: PPUSH
26410: LD_EXP 88
26414: PUSH
26415: LD_INT 1
26417: PLUS
26418: PPUSH
26419: EMPTY
26420: PPUSH
26421: CALL_OW 1
26425: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26426: LD_ADDR_EXP 91
26430: PUSH
26431: LD_EXP 91
26435: PPUSH
26436: LD_EXP 91
26440: PUSH
26441: LD_INT 1
26443: PLUS
26444: PPUSH
26445: EMPTY
26446: PPUSH
26447: CALL_OW 1
26451: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26452: LD_VAR 0 1
26456: PPUSH
26457: CALL_OW 302
26461: NOT
26462: IFFALSE 26475
// begin HackUnlinkAll ( i ) ;
26464: LD_VAR 0 1
26468: PPUSH
26469: CALL 26581 0 1
// continue ;
26473: GO 26355
// end ; HackCheckCapturedStatus ( i ) ;
26475: LD_VAR 0 1
26479: PPUSH
26480: CALL 27024 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26484: LD_ADDR_VAR 0 2
26488: PUSH
26489: LD_INT 81
26491: PUSH
26492: LD_VAR 0 1
26496: PPUSH
26497: CALL_OW 255
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: PUSH
26506: LD_INT 33
26508: PUSH
26509: LD_INT 3
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: PUSH
26516: LD_INT 91
26518: PUSH
26519: LD_VAR 0 1
26523: PUSH
26524: LD_EXP 90
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: LIST
26533: PUSH
26534: LD_INT 50
26536: PUSH
26537: EMPTY
26538: LIST
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: PPUSH
26546: CALL_OW 69
26550: ST_TO_ADDR
// if not tmp then
26551: LD_VAR 0 2
26555: NOT
26556: IFFALSE 26560
// continue ;
26558: GO 26355
// HackLink ( i , tmp ) ;
26560: LD_VAR 0 1
26564: PPUSH
26565: LD_VAR 0 2
26569: PPUSH
26570: CALL 26717 0 2
// end ;
26574: GO 26355
26576: POP
26577: POP
// end ;
26578: PPOPN 2
26580: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26581: LD_INT 0
26583: PPUSH
26584: PPUSH
26585: PPUSH
// if not hack in hackTanks then
26586: LD_VAR 0 1
26590: PUSH
26591: LD_EXP 87
26595: IN
26596: NOT
26597: IFFALSE 26601
// exit ;
26599: GO 26712
// index := GetElementIndex ( hackTanks , hack ) ;
26601: LD_ADDR_VAR 0 4
26605: PUSH
26606: LD_EXP 87
26610: PPUSH
26611: LD_VAR 0 1
26615: PPUSH
26616: CALL 34329 0 2
26620: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26621: LD_EXP 88
26625: PUSH
26626: LD_VAR 0 4
26630: ARRAY
26631: IFFALSE 26712
// begin for i in hackTanksCaptured [ index ] do
26633: LD_ADDR_VAR 0 3
26637: PUSH
26638: LD_EXP 88
26642: PUSH
26643: LD_VAR 0 4
26647: ARRAY
26648: PUSH
26649: FOR_IN
26650: IFFALSE 26676
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26652: LD_VAR 0 3
26656: PUSH
26657: LD_INT 1
26659: ARRAY
26660: PPUSH
26661: LD_VAR 0 3
26665: PUSH
26666: LD_INT 2
26668: ARRAY
26669: PPUSH
26670: CALL_OW 235
26674: GO 26649
26676: POP
26677: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26678: LD_ADDR_EXP 88
26682: PUSH
26683: LD_EXP 88
26687: PPUSH
26688: LD_VAR 0 4
26692: PPUSH
26693: EMPTY
26694: PPUSH
26695: CALL_OW 1
26699: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26700: LD_VAR 0 1
26704: PPUSH
26705: LD_INT 0
26707: PPUSH
26708: CALL_OW 505
// end ; end ;
26712: LD_VAR 0 2
26716: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26717: LD_INT 0
26719: PPUSH
26720: PPUSH
26721: PPUSH
// if not hack in hackTanks or not vehicles then
26722: LD_VAR 0 1
26726: PUSH
26727: LD_EXP 87
26731: IN
26732: NOT
26733: PUSH
26734: LD_VAR 0 2
26738: NOT
26739: OR
26740: IFFALSE 26744
// exit ;
26742: GO 27019
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26744: LD_ADDR_VAR 0 2
26748: PUSH
26749: LD_VAR 0 1
26753: PPUSH
26754: LD_VAR 0 2
26758: PPUSH
26759: LD_INT 1
26761: PPUSH
26762: LD_INT 1
26764: PPUSH
26765: CALL 34979 0 4
26769: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26770: LD_ADDR_VAR 0 5
26774: PUSH
26775: LD_EXP 87
26779: PPUSH
26780: LD_VAR 0 1
26784: PPUSH
26785: CALL 34329 0 2
26789: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26790: LD_EXP 88
26794: PUSH
26795: LD_VAR 0 5
26799: ARRAY
26800: PUSH
26801: LD_EXP 89
26805: LESS
26806: IFFALSE 26995
// begin for i := 1 to vehicles do
26808: LD_ADDR_VAR 0 4
26812: PUSH
26813: DOUBLE
26814: LD_INT 1
26816: DEC
26817: ST_TO_ADDR
26818: LD_VAR 0 2
26822: PUSH
26823: FOR_TO
26824: IFFALSE 26993
// begin if hackTanksCaptured [ index ] = hackLimit then
26826: LD_EXP 88
26830: PUSH
26831: LD_VAR 0 5
26835: ARRAY
26836: PUSH
26837: LD_EXP 89
26841: EQUAL
26842: IFFALSE 26846
// break ;
26844: GO 26993
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26846: LD_ADDR_EXP 91
26850: PUSH
26851: LD_EXP 91
26855: PPUSH
26856: LD_VAR 0 5
26860: PPUSH
26861: LD_EXP 91
26865: PUSH
26866: LD_VAR 0 5
26870: ARRAY
26871: PUSH
26872: LD_INT 1
26874: PLUS
26875: PPUSH
26876: CALL_OW 1
26880: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26881: LD_ADDR_EXP 88
26885: PUSH
26886: LD_EXP 88
26890: PPUSH
26891: LD_VAR 0 5
26895: PUSH
26896: LD_EXP 88
26900: PUSH
26901: LD_VAR 0 5
26905: ARRAY
26906: PUSH
26907: LD_INT 1
26909: PLUS
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PPUSH
26915: LD_VAR 0 2
26919: PUSH
26920: LD_VAR 0 4
26924: ARRAY
26925: PUSH
26926: LD_VAR 0 2
26930: PUSH
26931: LD_VAR 0 4
26935: ARRAY
26936: PPUSH
26937: CALL_OW 255
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PPUSH
26946: CALL 34544 0 3
26950: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26951: LD_VAR 0 2
26955: PUSH
26956: LD_VAR 0 4
26960: ARRAY
26961: PPUSH
26962: LD_VAR 0 1
26966: PPUSH
26967: CALL_OW 255
26971: PPUSH
26972: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26976: LD_VAR 0 2
26980: PUSH
26981: LD_VAR 0 4
26985: ARRAY
26986: PPUSH
26987: CALL_OW 141
// end ;
26991: GO 26823
26993: POP
26994: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26995: LD_VAR 0 1
26999: PPUSH
27000: LD_EXP 88
27004: PUSH
27005: LD_VAR 0 5
27009: ARRAY
27010: PUSH
27011: LD_INT 0
27013: PLUS
27014: PPUSH
27015: CALL_OW 505
// end ;
27019: LD_VAR 0 3
27023: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27024: LD_INT 0
27026: PPUSH
27027: PPUSH
27028: PPUSH
27029: PPUSH
// if not hack in hackTanks then
27030: LD_VAR 0 1
27034: PUSH
27035: LD_EXP 87
27039: IN
27040: NOT
27041: IFFALSE 27045
// exit ;
27043: GO 27285
// index := GetElementIndex ( hackTanks , hack ) ;
27045: LD_ADDR_VAR 0 4
27049: PUSH
27050: LD_EXP 87
27054: PPUSH
27055: LD_VAR 0 1
27059: PPUSH
27060: CALL 34329 0 2
27064: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27065: LD_ADDR_VAR 0 3
27069: PUSH
27070: DOUBLE
27071: LD_EXP 88
27075: PUSH
27076: LD_VAR 0 4
27080: ARRAY
27081: INC
27082: ST_TO_ADDR
27083: LD_INT 1
27085: PUSH
27086: FOR_DOWNTO
27087: IFFALSE 27259
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27089: LD_ADDR_VAR 0 5
27093: PUSH
27094: LD_EXP 88
27098: PUSH
27099: LD_VAR 0 4
27103: ARRAY
27104: PUSH
27105: LD_VAR 0 3
27109: ARRAY
27110: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27111: LD_VAR 0 5
27115: PUSH
27116: LD_INT 1
27118: ARRAY
27119: PPUSH
27120: CALL_OW 302
27124: NOT
27125: PUSH
27126: LD_VAR 0 5
27130: PUSH
27131: LD_INT 1
27133: ARRAY
27134: PPUSH
27135: CALL_OW 255
27139: PUSH
27140: LD_VAR 0 1
27144: PPUSH
27145: CALL_OW 255
27149: NONEQUAL
27150: OR
27151: IFFALSE 27257
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27153: LD_VAR 0 5
27157: PUSH
27158: LD_INT 1
27160: ARRAY
27161: PPUSH
27162: CALL_OW 305
27166: PUSH
27167: LD_VAR 0 5
27171: PUSH
27172: LD_INT 1
27174: ARRAY
27175: PPUSH
27176: CALL_OW 255
27180: PUSH
27181: LD_VAR 0 1
27185: PPUSH
27186: CALL_OW 255
27190: EQUAL
27191: AND
27192: IFFALSE 27216
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27194: LD_VAR 0 5
27198: PUSH
27199: LD_INT 1
27201: ARRAY
27202: PPUSH
27203: LD_VAR 0 5
27207: PUSH
27208: LD_INT 2
27210: ARRAY
27211: PPUSH
27212: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27216: LD_ADDR_EXP 88
27220: PUSH
27221: LD_EXP 88
27225: PPUSH
27226: LD_VAR 0 4
27230: PPUSH
27231: LD_EXP 88
27235: PUSH
27236: LD_VAR 0 4
27240: ARRAY
27241: PPUSH
27242: LD_VAR 0 3
27246: PPUSH
27247: CALL_OW 3
27251: PPUSH
27252: CALL_OW 1
27256: ST_TO_ADDR
// end ; end ;
27257: GO 27086
27259: POP
27260: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27261: LD_VAR 0 1
27265: PPUSH
27266: LD_EXP 88
27270: PUSH
27271: LD_VAR 0 4
27275: ARRAY
27276: PUSH
27277: LD_INT 0
27279: PLUS
27280: PPUSH
27281: CALL_OW 505
// end ;
27285: LD_VAR 0 2
27289: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27290: LD_INT 0
27292: PPUSH
27293: PPUSH
27294: PPUSH
27295: PPUSH
// if not hack in hackTanks then
27296: LD_VAR 0 1
27300: PUSH
27301: LD_EXP 87
27305: IN
27306: NOT
27307: IFFALSE 27311
// exit ;
27309: GO 27396
// index := GetElementIndex ( hackTanks , hack ) ;
27311: LD_ADDR_VAR 0 5
27315: PUSH
27316: LD_EXP 87
27320: PPUSH
27321: LD_VAR 0 1
27325: PPUSH
27326: CALL 34329 0 2
27330: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27331: LD_ADDR_VAR 0 4
27335: PUSH
27336: DOUBLE
27337: LD_INT 1
27339: DEC
27340: ST_TO_ADDR
27341: LD_EXP 88
27345: PUSH
27346: LD_VAR 0 5
27350: ARRAY
27351: PUSH
27352: FOR_TO
27353: IFFALSE 27394
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27355: LD_EXP 88
27359: PUSH
27360: LD_VAR 0 5
27364: ARRAY
27365: PUSH
27366: LD_VAR 0 4
27370: ARRAY
27371: PUSH
27372: LD_INT 1
27374: ARRAY
27375: PUSH
27376: LD_VAR 0 2
27380: EQUAL
27381: IFFALSE 27392
// KillUnit ( vehicle ) ;
27383: LD_VAR 0 2
27387: PPUSH
27388: CALL_OW 66
27392: GO 27352
27394: POP
27395: POP
// end ;
27396: LD_VAR 0 3
27400: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27401: LD_EXP 92
27405: NOT
27406: IFFALSE 27441
27408: GO 27410
27410: DISABLE
// begin initMiner := true ;
27411: LD_ADDR_EXP 92
27415: PUSH
27416: LD_INT 1
27418: ST_TO_ADDR
// minersList := [ ] ;
27419: LD_ADDR_EXP 93
27423: PUSH
27424: EMPTY
27425: ST_TO_ADDR
// minerMinesList := [ ] ;
27426: LD_ADDR_EXP 94
27430: PUSH
27431: EMPTY
27432: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27433: LD_ADDR_EXP 95
27437: PUSH
27438: LD_INT 5
27440: ST_TO_ADDR
// end ;
27441: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27442: LD_EXP 92
27446: PUSH
27447: LD_INT 34
27449: PUSH
27450: LD_INT 81
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PPUSH
27457: CALL_OW 69
27461: AND
27462: IFFALSE 27923
27464: GO 27466
27466: DISABLE
27467: LD_INT 0
27469: PPUSH
27470: PPUSH
27471: PPUSH
27472: PPUSH
// begin enable ;
27473: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27474: LD_ADDR_VAR 0 1
27478: PUSH
27479: LD_INT 34
27481: PUSH
27482: LD_INT 81
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PPUSH
27489: CALL_OW 69
27493: PUSH
27494: FOR_IN
27495: IFFALSE 27567
// begin if not i in minersList then
27497: LD_VAR 0 1
27501: PUSH
27502: LD_EXP 93
27506: IN
27507: NOT
27508: IFFALSE 27565
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27510: LD_ADDR_EXP 93
27514: PUSH
27515: LD_EXP 93
27519: PPUSH
27520: LD_EXP 93
27524: PUSH
27525: LD_INT 1
27527: PLUS
27528: PPUSH
27529: LD_VAR 0 1
27533: PPUSH
27534: CALL_OW 1
27538: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27539: LD_ADDR_EXP 94
27543: PUSH
27544: LD_EXP 94
27548: PPUSH
27549: LD_EXP 94
27553: PUSH
27554: LD_INT 1
27556: PLUS
27557: PPUSH
27558: EMPTY
27559: PPUSH
27560: CALL_OW 1
27564: ST_TO_ADDR
// end end ;
27565: GO 27494
27567: POP
27568: POP
// for i := minerMinesList downto 1 do
27569: LD_ADDR_VAR 0 1
27573: PUSH
27574: DOUBLE
27575: LD_EXP 94
27579: INC
27580: ST_TO_ADDR
27581: LD_INT 1
27583: PUSH
27584: FOR_DOWNTO
27585: IFFALSE 27921
// begin if IsLive ( minersList [ i ] ) then
27587: LD_EXP 93
27591: PUSH
27592: LD_VAR 0 1
27596: ARRAY
27597: PPUSH
27598: CALL_OW 300
27602: IFFALSE 27630
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
27604: LD_EXP 93
27608: PUSH
27609: LD_VAR 0 1
27613: ARRAY
27614: PPUSH
27615: LD_EXP 94
27619: PUSH
27620: LD_VAR 0 1
27624: ARRAY
27625: PPUSH
27626: CALL_OW 505
// if not minerMinesList [ i ] then
27630: LD_EXP 94
27634: PUSH
27635: LD_VAR 0 1
27639: ARRAY
27640: NOT
27641: IFFALSE 27645
// continue ;
27643: GO 27584
// for j := minerMinesList [ i ] downto 1 do
27645: LD_ADDR_VAR 0 2
27649: PUSH
27650: DOUBLE
27651: LD_EXP 94
27655: PUSH
27656: LD_VAR 0 1
27660: ARRAY
27661: INC
27662: ST_TO_ADDR
27663: LD_INT 1
27665: PUSH
27666: FOR_DOWNTO
27667: IFFALSE 27917
// begin side := GetSide ( minersList [ i ] ) ;
27669: LD_ADDR_VAR 0 3
27673: PUSH
27674: LD_EXP 93
27678: PUSH
27679: LD_VAR 0 1
27683: ARRAY
27684: PPUSH
27685: CALL_OW 255
27689: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27690: LD_ADDR_VAR 0 4
27694: PUSH
27695: LD_EXP 94
27699: PUSH
27700: LD_VAR 0 1
27704: ARRAY
27705: PUSH
27706: LD_VAR 0 2
27710: ARRAY
27711: PUSH
27712: LD_INT 1
27714: ARRAY
27715: PPUSH
27716: LD_EXP 94
27720: PUSH
27721: LD_VAR 0 1
27725: ARRAY
27726: PUSH
27727: LD_VAR 0 2
27731: ARRAY
27732: PUSH
27733: LD_INT 2
27735: ARRAY
27736: PPUSH
27737: CALL_OW 428
27741: ST_TO_ADDR
// if not tmp then
27742: LD_VAR 0 4
27746: NOT
27747: IFFALSE 27751
// continue ;
27749: GO 27666
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27751: LD_VAR 0 4
27755: PUSH
27756: LD_INT 81
27758: PUSH
27759: LD_VAR 0 3
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PPUSH
27768: CALL_OW 69
27772: IN
27773: PUSH
27774: LD_EXP 94
27778: PUSH
27779: LD_VAR 0 1
27783: ARRAY
27784: PUSH
27785: LD_VAR 0 2
27789: ARRAY
27790: PUSH
27791: LD_INT 1
27793: ARRAY
27794: PPUSH
27795: LD_EXP 94
27799: PUSH
27800: LD_VAR 0 1
27804: ARRAY
27805: PUSH
27806: LD_VAR 0 2
27810: ARRAY
27811: PUSH
27812: LD_INT 2
27814: ARRAY
27815: PPUSH
27816: CALL_OW 458
27820: AND
27821: IFFALSE 27915
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27823: LD_EXP 94
27827: PUSH
27828: LD_VAR 0 1
27832: ARRAY
27833: PUSH
27834: LD_VAR 0 2
27838: ARRAY
27839: PUSH
27840: LD_INT 1
27842: ARRAY
27843: PPUSH
27844: LD_EXP 94
27848: PUSH
27849: LD_VAR 0 1
27853: ARRAY
27854: PUSH
27855: LD_VAR 0 2
27859: ARRAY
27860: PUSH
27861: LD_INT 2
27863: ARRAY
27864: PPUSH
27865: LD_VAR 0 3
27869: PPUSH
27870: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27874: LD_ADDR_EXP 94
27878: PUSH
27879: LD_EXP 94
27883: PPUSH
27884: LD_VAR 0 1
27888: PPUSH
27889: LD_EXP 94
27893: PUSH
27894: LD_VAR 0 1
27898: ARRAY
27899: PPUSH
27900: LD_VAR 0 2
27904: PPUSH
27905: CALL_OW 3
27909: PPUSH
27910: CALL_OW 1
27914: ST_TO_ADDR
// end ; end ;
27915: GO 27666
27917: POP
27918: POP
// end ;
27919: GO 27584
27921: POP
27922: POP
// end ;
27923: PPOPN 4
27925: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
27926: LD_INT 0
27928: PPUSH
27929: PPUSH
// result := false ;
27930: LD_ADDR_VAR 0 4
27934: PUSH
27935: LD_INT 0
27937: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27938: LD_VAR 0 1
27942: PPUSH
27943: CALL_OW 264
27947: PUSH
27948: LD_INT 81
27950: EQUAL
27951: NOT
27952: IFFALSE 27956
// exit ;
27954: GO 28196
// index := GetElementIndex ( minersList , unit ) ;
27956: LD_ADDR_VAR 0 5
27960: PUSH
27961: LD_EXP 93
27965: PPUSH
27966: LD_VAR 0 1
27970: PPUSH
27971: CALL 34329 0 2
27975: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27976: LD_EXP 94
27980: PUSH
27981: LD_VAR 0 5
27985: ARRAY
27986: PUSH
27987: LD_EXP 95
27991: GREATEREQUAL
27992: IFFALSE 27996
// exit ;
27994: GO 28196
// ComMoveXY ( unit , x , y ) ;
27996: LD_VAR 0 1
28000: PPUSH
28001: LD_VAR 0 2
28005: PPUSH
28006: LD_VAR 0 3
28010: PPUSH
28011: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28015: LD_INT 35
28017: PPUSH
28018: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28022: LD_VAR 0 1
28026: PPUSH
28027: LD_VAR 0 2
28031: PPUSH
28032: LD_VAR 0 3
28036: PPUSH
28037: CALL 65592 0 3
28041: NOT
28042: PUSH
28043: LD_VAR 0 1
28047: PPUSH
28048: CALL_OW 314
28052: AND
28053: IFFALSE 28057
// exit ;
28055: GO 28196
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28057: LD_VAR 0 2
28061: PPUSH
28062: LD_VAR 0 3
28066: PPUSH
28067: CALL_OW 428
28071: PUSH
28072: LD_VAR 0 1
28076: EQUAL
28077: PUSH
28078: LD_VAR 0 1
28082: PPUSH
28083: CALL_OW 314
28087: NOT
28088: AND
28089: IFFALSE 28015
// PlaySoundXY ( x , y , PlantMine ) ;
28091: LD_VAR 0 2
28095: PPUSH
28096: LD_VAR 0 3
28100: PPUSH
28101: LD_STRING PlantMine
28103: PPUSH
28104: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28108: LD_VAR 0 2
28112: PPUSH
28113: LD_VAR 0 3
28117: PPUSH
28118: LD_VAR 0 1
28122: PPUSH
28123: CALL_OW 255
28127: PPUSH
28128: LD_INT 0
28130: PPUSH
28131: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28135: LD_ADDR_EXP 94
28139: PUSH
28140: LD_EXP 94
28144: PPUSH
28145: LD_VAR 0 5
28149: PUSH
28150: LD_EXP 94
28154: PUSH
28155: LD_VAR 0 5
28159: ARRAY
28160: PUSH
28161: LD_INT 1
28163: PLUS
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PPUSH
28169: LD_VAR 0 2
28173: PUSH
28174: LD_VAR 0 3
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: PPUSH
28183: CALL 34544 0 3
28187: ST_TO_ADDR
// result := true ;
28188: LD_ADDR_VAR 0 4
28192: PUSH
28193: LD_INT 1
28195: ST_TO_ADDR
// end ;
28196: LD_VAR 0 4
28200: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28201: LD_INT 0
28203: PPUSH
28204: PPUSH
28205: PPUSH
// if not unit in minersList then
28206: LD_VAR 0 1
28210: PUSH
28211: LD_EXP 93
28215: IN
28216: NOT
28217: IFFALSE 28221
// exit ;
28219: GO 28613
// index := GetElementIndex ( minersList , unit ) ;
28221: LD_ADDR_VAR 0 6
28225: PUSH
28226: LD_EXP 93
28230: PPUSH
28231: LD_VAR 0 1
28235: PPUSH
28236: CALL 34329 0 2
28240: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28241: LD_ADDR_VAR 0 5
28245: PUSH
28246: DOUBLE
28247: LD_EXP 94
28251: PUSH
28252: LD_VAR 0 6
28256: ARRAY
28257: INC
28258: ST_TO_ADDR
28259: LD_INT 1
28261: PUSH
28262: FOR_DOWNTO
28263: IFFALSE 28424
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28265: LD_EXP 94
28269: PUSH
28270: LD_VAR 0 6
28274: ARRAY
28275: PUSH
28276: LD_VAR 0 5
28280: ARRAY
28281: PUSH
28282: LD_INT 1
28284: ARRAY
28285: PUSH
28286: LD_VAR 0 2
28290: EQUAL
28291: PUSH
28292: LD_EXP 94
28296: PUSH
28297: LD_VAR 0 6
28301: ARRAY
28302: PUSH
28303: LD_VAR 0 5
28307: ARRAY
28308: PUSH
28309: LD_INT 2
28311: ARRAY
28312: PUSH
28313: LD_VAR 0 3
28317: EQUAL
28318: AND
28319: IFFALSE 28422
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28321: LD_EXP 94
28325: PUSH
28326: LD_VAR 0 6
28330: ARRAY
28331: PUSH
28332: LD_VAR 0 5
28336: ARRAY
28337: PUSH
28338: LD_INT 1
28340: ARRAY
28341: PPUSH
28342: LD_EXP 94
28346: PUSH
28347: LD_VAR 0 6
28351: ARRAY
28352: PUSH
28353: LD_VAR 0 5
28357: ARRAY
28358: PUSH
28359: LD_INT 2
28361: ARRAY
28362: PPUSH
28363: LD_VAR 0 1
28367: PPUSH
28368: CALL_OW 255
28372: PPUSH
28373: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28377: LD_ADDR_EXP 94
28381: PUSH
28382: LD_EXP 94
28386: PPUSH
28387: LD_VAR 0 6
28391: PPUSH
28392: LD_EXP 94
28396: PUSH
28397: LD_VAR 0 6
28401: ARRAY
28402: PPUSH
28403: LD_VAR 0 5
28407: PPUSH
28408: CALL_OW 3
28412: PPUSH
28413: CALL_OW 1
28417: ST_TO_ADDR
// exit ;
28418: POP
28419: POP
28420: GO 28613
// end ; end ;
28422: GO 28262
28424: POP
28425: POP
// for i := minerMinesList [ index ] downto 1 do
28426: LD_ADDR_VAR 0 5
28430: PUSH
28431: DOUBLE
28432: LD_EXP 94
28436: PUSH
28437: LD_VAR 0 6
28441: ARRAY
28442: INC
28443: ST_TO_ADDR
28444: LD_INT 1
28446: PUSH
28447: FOR_DOWNTO
28448: IFFALSE 28611
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28450: LD_EXP 94
28454: PUSH
28455: LD_VAR 0 6
28459: ARRAY
28460: PUSH
28461: LD_VAR 0 5
28465: ARRAY
28466: PUSH
28467: LD_INT 1
28469: ARRAY
28470: PPUSH
28471: LD_EXP 94
28475: PUSH
28476: LD_VAR 0 6
28480: ARRAY
28481: PUSH
28482: LD_VAR 0 5
28486: ARRAY
28487: PUSH
28488: LD_INT 2
28490: ARRAY
28491: PPUSH
28492: LD_VAR 0 2
28496: PPUSH
28497: LD_VAR 0 3
28501: PPUSH
28502: CALL_OW 298
28506: PUSH
28507: LD_INT 6
28509: LESS
28510: IFFALSE 28609
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28512: LD_EXP 94
28516: PUSH
28517: LD_VAR 0 6
28521: ARRAY
28522: PUSH
28523: LD_VAR 0 5
28527: ARRAY
28528: PUSH
28529: LD_INT 1
28531: ARRAY
28532: PPUSH
28533: LD_EXP 94
28537: PUSH
28538: LD_VAR 0 6
28542: ARRAY
28543: PUSH
28544: LD_VAR 0 5
28548: ARRAY
28549: PUSH
28550: LD_INT 2
28552: ARRAY
28553: PPUSH
28554: LD_VAR 0 1
28558: PPUSH
28559: CALL_OW 255
28563: PPUSH
28564: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28568: LD_ADDR_EXP 94
28572: PUSH
28573: LD_EXP 94
28577: PPUSH
28578: LD_VAR 0 6
28582: PPUSH
28583: LD_EXP 94
28587: PUSH
28588: LD_VAR 0 6
28592: ARRAY
28593: PPUSH
28594: LD_VAR 0 5
28598: PPUSH
28599: CALL_OW 3
28603: PPUSH
28604: CALL_OW 1
28608: ST_TO_ADDR
// end ; end ;
28609: GO 28447
28611: POP
28612: POP
// end ;
28613: LD_VAR 0 4
28617: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28618: LD_INT 0
28620: PPUSH
28621: PPUSH
28622: PPUSH
28623: PPUSH
28624: PPUSH
28625: PPUSH
28626: PPUSH
28627: PPUSH
28628: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28629: LD_VAR 0 1
28633: PPUSH
28634: CALL_OW 264
28638: PUSH
28639: LD_INT 81
28641: EQUAL
28642: NOT
28643: PUSH
28644: LD_VAR 0 1
28648: PUSH
28649: LD_EXP 93
28653: IN
28654: NOT
28655: OR
28656: IFFALSE 28660
// exit ;
28658: GO 28982
// index := GetElementIndex ( minersList , unit ) ;
28660: LD_ADDR_VAR 0 6
28664: PUSH
28665: LD_EXP 93
28669: PPUSH
28670: LD_VAR 0 1
28674: PPUSH
28675: CALL 34329 0 2
28679: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28680: LD_ADDR_VAR 0 8
28684: PUSH
28685: LD_EXP 95
28689: PUSH
28690: LD_EXP 94
28694: PUSH
28695: LD_VAR 0 6
28699: ARRAY
28700: MINUS
28701: ST_TO_ADDR
// if not minesFreeAmount then
28702: LD_VAR 0 8
28706: NOT
28707: IFFALSE 28711
// exit ;
28709: GO 28982
// tmp := [ ] ;
28711: LD_ADDR_VAR 0 7
28715: PUSH
28716: EMPTY
28717: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28718: LD_ADDR_VAR 0 5
28722: PUSH
28723: DOUBLE
28724: LD_INT 1
28726: DEC
28727: ST_TO_ADDR
28728: LD_VAR 0 8
28732: PUSH
28733: FOR_TO
28734: IFFALSE 28929
// begin _d := rand ( 0 , 5 ) ;
28736: LD_ADDR_VAR 0 11
28740: PUSH
28741: LD_INT 0
28743: PPUSH
28744: LD_INT 5
28746: PPUSH
28747: CALL_OW 12
28751: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28752: LD_ADDR_VAR 0 12
28756: PUSH
28757: LD_INT 2
28759: PPUSH
28760: LD_INT 6
28762: PPUSH
28763: CALL_OW 12
28767: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28768: LD_ADDR_VAR 0 9
28772: PUSH
28773: LD_VAR 0 2
28777: PPUSH
28778: LD_VAR 0 11
28782: PPUSH
28783: LD_VAR 0 12
28787: PPUSH
28788: CALL_OW 272
28792: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28793: LD_ADDR_VAR 0 10
28797: PUSH
28798: LD_VAR 0 3
28802: PPUSH
28803: LD_VAR 0 11
28807: PPUSH
28808: LD_VAR 0 12
28812: PPUSH
28813: CALL_OW 273
28817: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28818: LD_VAR 0 9
28822: PPUSH
28823: LD_VAR 0 10
28827: PPUSH
28828: CALL_OW 488
28832: PUSH
28833: LD_VAR 0 9
28837: PUSH
28838: LD_VAR 0 10
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: LD_VAR 0 7
28851: IN
28852: NOT
28853: AND
28854: PUSH
28855: LD_VAR 0 9
28859: PPUSH
28860: LD_VAR 0 10
28864: PPUSH
28865: CALL_OW 458
28869: NOT
28870: AND
28871: IFFALSE 28913
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28873: LD_ADDR_VAR 0 7
28877: PUSH
28878: LD_VAR 0 7
28882: PPUSH
28883: LD_VAR 0 7
28887: PUSH
28888: LD_INT 1
28890: PLUS
28891: PPUSH
28892: LD_VAR 0 9
28896: PUSH
28897: LD_VAR 0 10
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: PPUSH
28906: CALL_OW 1
28910: ST_TO_ADDR
28911: GO 28927
// i := i - 1 ;
28913: LD_ADDR_VAR 0 5
28917: PUSH
28918: LD_VAR 0 5
28922: PUSH
28923: LD_INT 1
28925: MINUS
28926: ST_TO_ADDR
// end ;
28927: GO 28733
28929: POP
28930: POP
// for i in tmp do
28931: LD_ADDR_VAR 0 5
28935: PUSH
28936: LD_VAR 0 7
28940: PUSH
28941: FOR_IN
28942: IFFALSE 28980
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28944: LD_VAR 0 1
28948: PPUSH
28949: LD_VAR 0 5
28953: PUSH
28954: LD_INT 1
28956: ARRAY
28957: PPUSH
28958: LD_VAR 0 5
28962: PUSH
28963: LD_INT 2
28965: ARRAY
28966: PPUSH
28967: CALL 27926 0 3
28971: NOT
28972: IFFALSE 28978
// exit ;
28974: POP
28975: POP
28976: GO 28982
28978: GO 28941
28980: POP
28981: POP
// end ;
28982: LD_VAR 0 4
28986: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
28987: LD_INT 0
28989: PPUSH
28990: PPUSH
28991: PPUSH
28992: PPUSH
28993: PPUSH
28994: PPUSH
28995: PPUSH
// if not GetClass ( unit ) = class_sniper then
28996: LD_VAR 0 1
29000: PPUSH
29001: CALL_OW 257
29005: PUSH
29006: LD_INT 5
29008: EQUAL
29009: NOT
29010: IFFALSE 29014
// exit ;
29012: GO 29402
// dist := 8 ;
29014: LD_ADDR_VAR 0 5
29018: PUSH
29019: LD_INT 8
29021: ST_TO_ADDR
// viewRange := 12 ;
29022: LD_ADDR_VAR 0 7
29026: PUSH
29027: LD_INT 12
29029: ST_TO_ADDR
// side := GetSide ( unit ) ;
29030: LD_ADDR_VAR 0 6
29034: PUSH
29035: LD_VAR 0 1
29039: PPUSH
29040: CALL_OW 255
29044: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29045: LD_INT 61
29047: PPUSH
29048: LD_VAR 0 6
29052: PPUSH
29053: CALL_OW 321
29057: PUSH
29058: LD_INT 2
29060: EQUAL
29061: IFFALSE 29071
// viewRange := 16 ;
29063: LD_ADDR_VAR 0 7
29067: PUSH
29068: LD_INT 16
29070: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29071: LD_VAR 0 1
29075: PPUSH
29076: LD_VAR 0 2
29080: PPUSH
29081: LD_VAR 0 3
29085: PPUSH
29086: CALL_OW 297
29090: PUSH
29091: LD_VAR 0 5
29095: GREATER
29096: IFFALSE 29175
// begin ComMoveXY ( unit , x , y ) ;
29098: LD_VAR 0 1
29102: PPUSH
29103: LD_VAR 0 2
29107: PPUSH
29108: LD_VAR 0 3
29112: PPUSH
29113: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29117: LD_INT 35
29119: PPUSH
29120: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29124: LD_VAR 0 1
29128: PPUSH
29129: LD_VAR 0 2
29133: PPUSH
29134: LD_VAR 0 3
29138: PPUSH
29139: CALL 65592 0 3
29143: NOT
29144: IFFALSE 29148
// exit ;
29146: GO 29402
// until GetDistUnitXY ( unit , x , y ) < dist ;
29148: LD_VAR 0 1
29152: PPUSH
29153: LD_VAR 0 2
29157: PPUSH
29158: LD_VAR 0 3
29162: PPUSH
29163: CALL_OW 297
29167: PUSH
29168: LD_VAR 0 5
29172: LESS
29173: IFFALSE 29117
// end ; ComTurnXY ( unit , x , y ) ;
29175: LD_VAR 0 1
29179: PPUSH
29180: LD_VAR 0 2
29184: PPUSH
29185: LD_VAR 0 3
29189: PPUSH
29190: CALL_OW 118
// wait ( 5 ) ;
29194: LD_INT 5
29196: PPUSH
29197: CALL_OW 67
// _d := GetDir ( unit ) ;
29201: LD_ADDR_VAR 0 10
29205: PUSH
29206: LD_VAR 0 1
29210: PPUSH
29211: CALL_OW 254
29215: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29216: LD_ADDR_VAR 0 8
29220: PUSH
29221: LD_VAR 0 1
29225: PPUSH
29226: CALL_OW 250
29230: PPUSH
29231: LD_VAR 0 10
29235: PPUSH
29236: LD_VAR 0 5
29240: PPUSH
29241: CALL_OW 272
29245: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29246: LD_ADDR_VAR 0 9
29250: PUSH
29251: LD_VAR 0 1
29255: PPUSH
29256: CALL_OW 251
29260: PPUSH
29261: LD_VAR 0 10
29265: PPUSH
29266: LD_VAR 0 5
29270: PPUSH
29271: CALL_OW 273
29275: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29276: LD_VAR 0 8
29280: PPUSH
29281: LD_VAR 0 9
29285: PPUSH
29286: CALL_OW 488
29290: NOT
29291: IFFALSE 29295
// exit ;
29293: GO 29402
// ComAnimCustom ( unit , 1 ) ;
29295: LD_VAR 0 1
29299: PPUSH
29300: LD_INT 1
29302: PPUSH
29303: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29307: LD_VAR 0 8
29311: PPUSH
29312: LD_VAR 0 9
29316: PPUSH
29317: LD_VAR 0 6
29321: PPUSH
29322: LD_VAR 0 7
29326: PPUSH
29327: CALL_OW 330
// repeat wait ( 1 ) ;
29331: LD_INT 1
29333: PPUSH
29334: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29338: LD_VAR 0 1
29342: PPUSH
29343: CALL_OW 316
29347: PUSH
29348: LD_VAR 0 1
29352: PPUSH
29353: CALL_OW 314
29357: OR
29358: PUSH
29359: LD_VAR 0 1
29363: PPUSH
29364: CALL_OW 302
29368: NOT
29369: OR
29370: PUSH
29371: LD_VAR 0 1
29375: PPUSH
29376: CALL_OW 301
29380: OR
29381: IFFALSE 29331
// RemoveSeeing ( _x , _y , side ) ;
29383: LD_VAR 0 8
29387: PPUSH
29388: LD_VAR 0 9
29392: PPUSH
29393: LD_VAR 0 6
29397: PPUSH
29398: CALL_OW 331
// end ; end_of_file
29402: LD_VAR 0 4
29406: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29407: LD_INT 0
29409: PPUSH
29410: PPUSH
// if exist_mode then
29411: LD_VAR 0 2
29415: IFFALSE 29440
// unit := CreateCharacter ( prefix & ident ) else
29417: LD_ADDR_VAR 0 5
29421: PUSH
29422: LD_VAR 0 3
29426: PUSH
29427: LD_VAR 0 1
29431: STR
29432: PPUSH
29433: CALL_OW 34
29437: ST_TO_ADDR
29438: GO 29455
// unit := NewCharacter ( ident ) ;
29440: LD_ADDR_VAR 0 5
29444: PUSH
29445: LD_VAR 0 1
29449: PPUSH
29450: CALL_OW 25
29454: ST_TO_ADDR
// result := unit ;
29455: LD_ADDR_VAR 0 4
29459: PUSH
29460: LD_VAR 0 5
29464: ST_TO_ADDR
// end ;
29465: LD_VAR 0 4
29469: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29470: LD_INT 0
29472: PPUSH
29473: PPUSH
// if not side or not nation then
29474: LD_VAR 0 1
29478: NOT
29479: PUSH
29480: LD_VAR 0 2
29484: NOT
29485: OR
29486: IFFALSE 29490
// exit ;
29488: GO 30258
// case nation of nation_american :
29490: LD_VAR 0 2
29494: PUSH
29495: LD_INT 1
29497: DOUBLE
29498: EQUAL
29499: IFTRUE 29503
29501: GO 29717
29503: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29504: LD_ADDR_VAR 0 4
29508: PUSH
29509: LD_INT 35
29511: PUSH
29512: LD_INT 45
29514: PUSH
29515: LD_INT 46
29517: PUSH
29518: LD_INT 47
29520: PUSH
29521: LD_INT 82
29523: PUSH
29524: LD_INT 83
29526: PUSH
29527: LD_INT 84
29529: PUSH
29530: LD_INT 85
29532: PUSH
29533: LD_INT 86
29535: PUSH
29536: LD_INT 1
29538: PUSH
29539: LD_INT 2
29541: PUSH
29542: LD_INT 6
29544: PUSH
29545: LD_INT 15
29547: PUSH
29548: LD_INT 16
29550: PUSH
29551: LD_INT 7
29553: PUSH
29554: LD_INT 12
29556: PUSH
29557: LD_INT 13
29559: PUSH
29560: LD_INT 10
29562: PUSH
29563: LD_INT 14
29565: PUSH
29566: LD_INT 20
29568: PUSH
29569: LD_INT 21
29571: PUSH
29572: LD_INT 22
29574: PUSH
29575: LD_INT 25
29577: PUSH
29578: LD_INT 32
29580: PUSH
29581: LD_INT 27
29583: PUSH
29584: LD_INT 36
29586: PUSH
29587: LD_INT 69
29589: PUSH
29590: LD_INT 39
29592: PUSH
29593: LD_INT 34
29595: PUSH
29596: LD_INT 40
29598: PUSH
29599: LD_INT 48
29601: PUSH
29602: LD_INT 49
29604: PUSH
29605: LD_INT 50
29607: PUSH
29608: LD_INT 51
29610: PUSH
29611: LD_INT 52
29613: PUSH
29614: LD_INT 53
29616: PUSH
29617: LD_INT 54
29619: PUSH
29620: LD_INT 55
29622: PUSH
29623: LD_INT 56
29625: PUSH
29626: LD_INT 57
29628: PUSH
29629: LD_INT 58
29631: PUSH
29632: LD_INT 59
29634: PUSH
29635: LD_INT 60
29637: PUSH
29638: LD_INT 61
29640: PUSH
29641: LD_INT 62
29643: PUSH
29644: LD_INT 80
29646: PUSH
29647: LD_INT 82
29649: PUSH
29650: LD_INT 83
29652: PUSH
29653: LD_INT 84
29655: PUSH
29656: LD_INT 85
29658: PUSH
29659: LD_INT 86
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: LIST
29693: LIST
29694: LIST
29695: LIST
29696: LIST
29697: LIST
29698: LIST
29699: LIST
29700: LIST
29701: LIST
29702: LIST
29703: LIST
29704: LIST
29705: LIST
29706: LIST
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: LIST
29712: LIST
29713: LIST
29714: ST_TO_ADDR
29715: GO 30182
29717: LD_INT 2
29719: DOUBLE
29720: EQUAL
29721: IFTRUE 29725
29723: GO 29951
29725: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29726: LD_ADDR_VAR 0 4
29730: PUSH
29731: LD_INT 35
29733: PUSH
29734: LD_INT 45
29736: PUSH
29737: LD_INT 46
29739: PUSH
29740: LD_INT 47
29742: PUSH
29743: LD_INT 82
29745: PUSH
29746: LD_INT 83
29748: PUSH
29749: LD_INT 84
29751: PUSH
29752: LD_INT 85
29754: PUSH
29755: LD_INT 87
29757: PUSH
29758: LD_INT 70
29760: PUSH
29761: LD_INT 1
29763: PUSH
29764: LD_INT 11
29766: PUSH
29767: LD_INT 3
29769: PUSH
29770: LD_INT 4
29772: PUSH
29773: LD_INT 5
29775: PUSH
29776: LD_INT 6
29778: PUSH
29779: LD_INT 15
29781: PUSH
29782: LD_INT 18
29784: PUSH
29785: LD_INT 7
29787: PUSH
29788: LD_INT 17
29790: PUSH
29791: LD_INT 8
29793: PUSH
29794: LD_INT 20
29796: PUSH
29797: LD_INT 21
29799: PUSH
29800: LD_INT 22
29802: PUSH
29803: LD_INT 72
29805: PUSH
29806: LD_INT 26
29808: PUSH
29809: LD_INT 69
29811: PUSH
29812: LD_INT 39
29814: PUSH
29815: LD_INT 40
29817: PUSH
29818: LD_INT 41
29820: PUSH
29821: LD_INT 42
29823: PUSH
29824: LD_INT 43
29826: PUSH
29827: LD_INT 48
29829: PUSH
29830: LD_INT 49
29832: PUSH
29833: LD_INT 50
29835: PUSH
29836: LD_INT 51
29838: PUSH
29839: LD_INT 52
29841: PUSH
29842: LD_INT 53
29844: PUSH
29845: LD_INT 54
29847: PUSH
29848: LD_INT 55
29850: PUSH
29851: LD_INT 56
29853: PUSH
29854: LD_INT 60
29856: PUSH
29857: LD_INT 61
29859: PUSH
29860: LD_INT 62
29862: PUSH
29863: LD_INT 66
29865: PUSH
29866: LD_INT 67
29868: PUSH
29869: LD_INT 68
29871: PUSH
29872: LD_INT 81
29874: PUSH
29875: LD_INT 82
29877: PUSH
29878: LD_INT 83
29880: PUSH
29881: LD_INT 84
29883: PUSH
29884: LD_INT 85
29886: PUSH
29887: LD_INT 87
29889: PUSH
29890: LD_INT 88
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: LIST
29915: LIST
29916: LIST
29917: LIST
29918: LIST
29919: LIST
29920: LIST
29921: LIST
29922: LIST
29923: LIST
29924: LIST
29925: LIST
29926: LIST
29927: LIST
29928: LIST
29929: LIST
29930: LIST
29931: LIST
29932: LIST
29933: LIST
29934: LIST
29935: LIST
29936: LIST
29937: LIST
29938: LIST
29939: LIST
29940: LIST
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: ST_TO_ADDR
29949: GO 30182
29951: LD_INT 3
29953: DOUBLE
29954: EQUAL
29955: IFTRUE 29959
29957: GO 30181
29959: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29960: LD_ADDR_VAR 0 4
29964: PUSH
29965: LD_INT 46
29967: PUSH
29968: LD_INT 47
29970: PUSH
29971: LD_INT 1
29973: PUSH
29974: LD_INT 2
29976: PUSH
29977: LD_INT 82
29979: PUSH
29980: LD_INT 83
29982: PUSH
29983: LD_INT 84
29985: PUSH
29986: LD_INT 85
29988: PUSH
29989: LD_INT 86
29991: PUSH
29992: LD_INT 11
29994: PUSH
29995: LD_INT 9
29997: PUSH
29998: LD_INT 20
30000: PUSH
30001: LD_INT 19
30003: PUSH
30004: LD_INT 21
30006: PUSH
30007: LD_INT 24
30009: PUSH
30010: LD_INT 22
30012: PUSH
30013: LD_INT 25
30015: PUSH
30016: LD_INT 28
30018: PUSH
30019: LD_INT 29
30021: PUSH
30022: LD_INT 30
30024: PUSH
30025: LD_INT 31
30027: PUSH
30028: LD_INT 37
30030: PUSH
30031: LD_INT 38
30033: PUSH
30034: LD_INT 32
30036: PUSH
30037: LD_INT 27
30039: PUSH
30040: LD_INT 33
30042: PUSH
30043: LD_INT 69
30045: PUSH
30046: LD_INT 39
30048: PUSH
30049: LD_INT 34
30051: PUSH
30052: LD_INT 40
30054: PUSH
30055: LD_INT 71
30057: PUSH
30058: LD_INT 23
30060: PUSH
30061: LD_INT 44
30063: PUSH
30064: LD_INT 48
30066: PUSH
30067: LD_INT 49
30069: PUSH
30070: LD_INT 50
30072: PUSH
30073: LD_INT 51
30075: PUSH
30076: LD_INT 52
30078: PUSH
30079: LD_INT 53
30081: PUSH
30082: LD_INT 54
30084: PUSH
30085: LD_INT 55
30087: PUSH
30088: LD_INT 56
30090: PUSH
30091: LD_INT 57
30093: PUSH
30094: LD_INT 58
30096: PUSH
30097: LD_INT 59
30099: PUSH
30100: LD_INT 63
30102: PUSH
30103: LD_INT 64
30105: PUSH
30106: LD_INT 65
30108: PUSH
30109: LD_INT 82
30111: PUSH
30112: LD_INT 83
30114: PUSH
30115: LD_INT 84
30117: PUSH
30118: LD_INT 85
30120: PUSH
30121: LD_INT 86
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: LIST
30136: LIST
30137: LIST
30138: LIST
30139: LIST
30140: LIST
30141: LIST
30142: LIST
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: LIST
30153: LIST
30154: LIST
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: ST_TO_ADDR
30179: GO 30182
30181: POP
// if state > - 1 and state < 3 then
30182: LD_VAR 0 3
30186: PUSH
30187: LD_INT 1
30189: NEG
30190: GREATER
30191: PUSH
30192: LD_VAR 0 3
30196: PUSH
30197: LD_INT 3
30199: LESS
30200: AND
30201: IFFALSE 30258
// for i in result do
30203: LD_ADDR_VAR 0 5
30207: PUSH
30208: LD_VAR 0 4
30212: PUSH
30213: FOR_IN
30214: IFFALSE 30256
// if GetTech ( i , side ) <> state then
30216: LD_VAR 0 5
30220: PPUSH
30221: LD_VAR 0 1
30225: PPUSH
30226: CALL_OW 321
30230: PUSH
30231: LD_VAR 0 3
30235: NONEQUAL
30236: IFFALSE 30254
// result := result diff i ;
30238: LD_ADDR_VAR 0 4
30242: PUSH
30243: LD_VAR 0 4
30247: PUSH
30248: LD_VAR 0 5
30252: DIFF
30253: ST_TO_ADDR
30254: GO 30213
30256: POP
30257: POP
// end ;
30258: LD_VAR 0 4
30262: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30263: LD_INT 0
30265: PPUSH
30266: PPUSH
30267: PPUSH
// result := true ;
30268: LD_ADDR_VAR 0 3
30272: PUSH
30273: LD_INT 1
30275: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30276: LD_ADDR_VAR 0 5
30280: PUSH
30281: LD_VAR 0 2
30285: PPUSH
30286: CALL_OW 480
30290: ST_TO_ADDR
// if not tmp then
30291: LD_VAR 0 5
30295: NOT
30296: IFFALSE 30300
// exit ;
30298: GO 30349
// for i in tmp do
30300: LD_ADDR_VAR 0 4
30304: PUSH
30305: LD_VAR 0 5
30309: PUSH
30310: FOR_IN
30311: IFFALSE 30347
// if GetTech ( i , side ) <> state_researched then
30313: LD_VAR 0 4
30317: PPUSH
30318: LD_VAR 0 1
30322: PPUSH
30323: CALL_OW 321
30327: PUSH
30328: LD_INT 2
30330: NONEQUAL
30331: IFFALSE 30345
// begin result := false ;
30333: LD_ADDR_VAR 0 3
30337: PUSH
30338: LD_INT 0
30340: ST_TO_ADDR
// exit ;
30341: POP
30342: POP
30343: GO 30349
// end ;
30345: GO 30310
30347: POP
30348: POP
// end ;
30349: LD_VAR 0 3
30353: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30354: LD_INT 0
30356: PPUSH
30357: PPUSH
30358: PPUSH
30359: PPUSH
30360: PPUSH
30361: PPUSH
30362: PPUSH
30363: PPUSH
30364: PPUSH
30365: PPUSH
30366: PPUSH
30367: PPUSH
30368: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30369: LD_VAR 0 1
30373: NOT
30374: PUSH
30375: LD_VAR 0 1
30379: PPUSH
30380: CALL_OW 257
30384: PUSH
30385: LD_INT 9
30387: NONEQUAL
30388: OR
30389: IFFALSE 30393
// exit ;
30391: GO 30966
// side := GetSide ( unit ) ;
30393: LD_ADDR_VAR 0 9
30397: PUSH
30398: LD_VAR 0 1
30402: PPUSH
30403: CALL_OW 255
30407: ST_TO_ADDR
// tech_space := tech_spacanom ;
30408: LD_ADDR_VAR 0 12
30412: PUSH
30413: LD_INT 29
30415: ST_TO_ADDR
// tech_time := tech_taurad ;
30416: LD_ADDR_VAR 0 13
30420: PUSH
30421: LD_INT 28
30423: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30424: LD_ADDR_VAR 0 11
30428: PUSH
30429: LD_VAR 0 1
30433: PPUSH
30434: CALL_OW 310
30438: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30439: LD_VAR 0 11
30443: PPUSH
30444: CALL_OW 247
30448: PUSH
30449: LD_INT 2
30451: EQUAL
30452: IFFALSE 30456
// exit ;
30454: GO 30966
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30456: LD_ADDR_VAR 0 8
30460: PUSH
30461: LD_INT 81
30463: PUSH
30464: LD_VAR 0 9
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: LD_INT 3
30475: PUSH
30476: LD_INT 21
30478: PUSH
30479: LD_INT 3
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PPUSH
30494: CALL_OW 69
30498: ST_TO_ADDR
// if not tmp then
30499: LD_VAR 0 8
30503: NOT
30504: IFFALSE 30508
// exit ;
30506: GO 30966
// if in_unit then
30508: LD_VAR 0 11
30512: IFFALSE 30536
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30514: LD_ADDR_VAR 0 10
30518: PUSH
30519: LD_VAR 0 8
30523: PPUSH
30524: LD_VAR 0 11
30528: PPUSH
30529: CALL_OW 74
30533: ST_TO_ADDR
30534: GO 30556
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30536: LD_ADDR_VAR 0 10
30540: PUSH
30541: LD_VAR 0 8
30545: PPUSH
30546: LD_VAR 0 1
30550: PPUSH
30551: CALL_OW 74
30555: ST_TO_ADDR
// if not enemy then
30556: LD_VAR 0 10
30560: NOT
30561: IFFALSE 30565
// exit ;
30563: GO 30966
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30565: LD_VAR 0 11
30569: PUSH
30570: LD_VAR 0 11
30574: PPUSH
30575: LD_VAR 0 10
30579: PPUSH
30580: CALL_OW 296
30584: PUSH
30585: LD_INT 13
30587: GREATER
30588: AND
30589: PUSH
30590: LD_VAR 0 1
30594: PPUSH
30595: LD_VAR 0 10
30599: PPUSH
30600: CALL_OW 296
30604: PUSH
30605: LD_INT 12
30607: GREATER
30608: OR
30609: IFFALSE 30613
// exit ;
30611: GO 30966
// missile := [ 1 ] ;
30613: LD_ADDR_VAR 0 14
30617: PUSH
30618: LD_INT 1
30620: PUSH
30621: EMPTY
30622: LIST
30623: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30624: LD_VAR 0 9
30628: PPUSH
30629: LD_VAR 0 12
30633: PPUSH
30634: CALL_OW 325
30638: IFFALSE 30667
// missile := Replace ( missile , missile + 1 , 2 ) ;
30640: LD_ADDR_VAR 0 14
30644: PUSH
30645: LD_VAR 0 14
30649: PPUSH
30650: LD_VAR 0 14
30654: PUSH
30655: LD_INT 1
30657: PLUS
30658: PPUSH
30659: LD_INT 2
30661: PPUSH
30662: CALL_OW 1
30666: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30667: LD_VAR 0 9
30671: PPUSH
30672: LD_VAR 0 13
30676: PPUSH
30677: CALL_OW 325
30681: PUSH
30682: LD_VAR 0 10
30686: PPUSH
30687: CALL_OW 255
30691: PPUSH
30692: LD_VAR 0 13
30696: PPUSH
30697: CALL_OW 325
30701: NOT
30702: AND
30703: IFFALSE 30732
// missile := Replace ( missile , missile + 1 , 3 ) ;
30705: LD_ADDR_VAR 0 14
30709: PUSH
30710: LD_VAR 0 14
30714: PPUSH
30715: LD_VAR 0 14
30719: PUSH
30720: LD_INT 1
30722: PLUS
30723: PPUSH
30724: LD_INT 3
30726: PPUSH
30727: CALL_OW 1
30731: ST_TO_ADDR
// if missile < 2 then
30732: LD_VAR 0 14
30736: PUSH
30737: LD_INT 2
30739: LESS
30740: IFFALSE 30744
// exit ;
30742: GO 30966
// x := GetX ( enemy ) ;
30744: LD_ADDR_VAR 0 4
30748: PUSH
30749: LD_VAR 0 10
30753: PPUSH
30754: CALL_OW 250
30758: ST_TO_ADDR
// y := GetY ( enemy ) ;
30759: LD_ADDR_VAR 0 5
30763: PUSH
30764: LD_VAR 0 10
30768: PPUSH
30769: CALL_OW 251
30773: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30774: LD_ADDR_VAR 0 6
30778: PUSH
30779: LD_VAR 0 4
30783: PUSH
30784: LD_INT 1
30786: NEG
30787: PPUSH
30788: LD_INT 1
30790: PPUSH
30791: CALL_OW 12
30795: PLUS
30796: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30797: LD_ADDR_VAR 0 7
30801: PUSH
30802: LD_VAR 0 5
30806: PUSH
30807: LD_INT 1
30809: NEG
30810: PPUSH
30811: LD_INT 1
30813: PPUSH
30814: CALL_OW 12
30818: PLUS
30819: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30820: LD_VAR 0 6
30824: PPUSH
30825: LD_VAR 0 7
30829: PPUSH
30830: CALL_OW 488
30834: NOT
30835: IFFALSE 30857
// begin _x := x ;
30837: LD_ADDR_VAR 0 6
30841: PUSH
30842: LD_VAR 0 4
30846: ST_TO_ADDR
// _y := y ;
30847: LD_ADDR_VAR 0 7
30851: PUSH
30852: LD_VAR 0 5
30856: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30857: LD_ADDR_VAR 0 3
30861: PUSH
30862: LD_INT 1
30864: PPUSH
30865: LD_VAR 0 14
30869: PPUSH
30870: CALL_OW 12
30874: ST_TO_ADDR
// case i of 1 :
30875: LD_VAR 0 3
30879: PUSH
30880: LD_INT 1
30882: DOUBLE
30883: EQUAL
30884: IFTRUE 30888
30886: GO 30905
30888: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30889: LD_VAR 0 1
30893: PPUSH
30894: LD_VAR 0 10
30898: PPUSH
30899: CALL_OW 115
30903: GO 30966
30905: LD_INT 2
30907: DOUBLE
30908: EQUAL
30909: IFTRUE 30913
30911: GO 30935
30913: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30914: LD_VAR 0 1
30918: PPUSH
30919: LD_VAR 0 6
30923: PPUSH
30924: LD_VAR 0 7
30928: PPUSH
30929: CALL_OW 153
30933: GO 30966
30935: LD_INT 3
30937: DOUBLE
30938: EQUAL
30939: IFTRUE 30943
30941: GO 30965
30943: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30944: LD_VAR 0 1
30948: PPUSH
30949: LD_VAR 0 6
30953: PPUSH
30954: LD_VAR 0 7
30958: PPUSH
30959: CALL_OW 154
30963: GO 30966
30965: POP
// end ;
30966: LD_VAR 0 2
30970: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30971: LD_INT 0
30973: PPUSH
30974: PPUSH
30975: PPUSH
30976: PPUSH
30977: PPUSH
30978: PPUSH
// if not unit or not building then
30979: LD_VAR 0 1
30983: NOT
30984: PUSH
30985: LD_VAR 0 2
30989: NOT
30990: OR
30991: IFFALSE 30995
// exit ;
30993: GO 31153
// x := GetX ( building ) ;
30995: LD_ADDR_VAR 0 5
30999: PUSH
31000: LD_VAR 0 2
31004: PPUSH
31005: CALL_OW 250
31009: ST_TO_ADDR
// y := GetY ( building ) ;
31010: LD_ADDR_VAR 0 6
31014: PUSH
31015: LD_VAR 0 2
31019: PPUSH
31020: CALL_OW 251
31024: ST_TO_ADDR
// for i = 0 to 5 do
31025: LD_ADDR_VAR 0 4
31029: PUSH
31030: DOUBLE
31031: LD_INT 0
31033: DEC
31034: ST_TO_ADDR
31035: LD_INT 5
31037: PUSH
31038: FOR_TO
31039: IFFALSE 31151
// begin _x := ShiftX ( x , i , 3 ) ;
31041: LD_ADDR_VAR 0 7
31045: PUSH
31046: LD_VAR 0 5
31050: PPUSH
31051: LD_VAR 0 4
31055: PPUSH
31056: LD_INT 3
31058: PPUSH
31059: CALL_OW 272
31063: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31064: LD_ADDR_VAR 0 8
31068: PUSH
31069: LD_VAR 0 6
31073: PPUSH
31074: LD_VAR 0 4
31078: PPUSH
31079: LD_INT 3
31081: PPUSH
31082: CALL_OW 273
31086: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31087: LD_VAR 0 7
31091: PPUSH
31092: LD_VAR 0 8
31096: PPUSH
31097: CALL_OW 488
31101: NOT
31102: IFFALSE 31106
// continue ;
31104: GO 31038
// if HexInfo ( _x , _y ) = 0 then
31106: LD_VAR 0 7
31110: PPUSH
31111: LD_VAR 0 8
31115: PPUSH
31116: CALL_OW 428
31120: PUSH
31121: LD_INT 0
31123: EQUAL
31124: IFFALSE 31149
// begin ComMoveXY ( unit , _x , _y ) ;
31126: LD_VAR 0 1
31130: PPUSH
31131: LD_VAR 0 7
31135: PPUSH
31136: LD_VAR 0 8
31140: PPUSH
31141: CALL_OW 111
// exit ;
31145: POP
31146: POP
31147: GO 31153
// end ; end ;
31149: GO 31038
31151: POP
31152: POP
// end ;
31153: LD_VAR 0 3
31157: RET
// export function ScanBase ( side , base_area ) ; begin
31158: LD_INT 0
31160: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31161: LD_ADDR_VAR 0 3
31165: PUSH
31166: LD_VAR 0 2
31170: PPUSH
31171: LD_INT 81
31173: PUSH
31174: LD_VAR 0 1
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PPUSH
31183: CALL_OW 70
31187: ST_TO_ADDR
// end ;
31188: LD_VAR 0 3
31192: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31193: LD_INT 0
31195: PPUSH
31196: PPUSH
31197: PPUSH
31198: PPUSH
// result := false ;
31199: LD_ADDR_VAR 0 2
31203: PUSH
31204: LD_INT 0
31206: ST_TO_ADDR
// side := GetSide ( unit ) ;
31207: LD_ADDR_VAR 0 3
31211: PUSH
31212: LD_VAR 0 1
31216: PPUSH
31217: CALL_OW 255
31221: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31222: LD_ADDR_VAR 0 4
31226: PUSH
31227: LD_VAR 0 1
31231: PPUSH
31232: CALL_OW 248
31236: ST_TO_ADDR
// case nat of 1 :
31237: LD_VAR 0 4
31241: PUSH
31242: LD_INT 1
31244: DOUBLE
31245: EQUAL
31246: IFTRUE 31250
31248: GO 31261
31250: POP
// tech := tech_lassight ; 2 :
31251: LD_ADDR_VAR 0 5
31255: PUSH
31256: LD_INT 12
31258: ST_TO_ADDR
31259: GO 31300
31261: LD_INT 2
31263: DOUBLE
31264: EQUAL
31265: IFTRUE 31269
31267: GO 31280
31269: POP
// tech := tech_mortar ; 3 :
31270: LD_ADDR_VAR 0 5
31274: PUSH
31275: LD_INT 41
31277: ST_TO_ADDR
31278: GO 31300
31280: LD_INT 3
31282: DOUBLE
31283: EQUAL
31284: IFTRUE 31288
31286: GO 31299
31288: POP
// tech := tech_bazooka ; end ;
31289: LD_ADDR_VAR 0 5
31293: PUSH
31294: LD_INT 44
31296: ST_TO_ADDR
31297: GO 31300
31299: POP
// if Researched ( side , tech ) then
31300: LD_VAR 0 3
31304: PPUSH
31305: LD_VAR 0 5
31309: PPUSH
31310: CALL_OW 325
31314: IFFALSE 31341
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31316: LD_ADDR_VAR 0 2
31320: PUSH
31321: LD_INT 5
31323: PUSH
31324: LD_INT 8
31326: PUSH
31327: LD_INT 9
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: LIST
31334: PUSH
31335: LD_VAR 0 4
31339: ARRAY
31340: ST_TO_ADDR
// end ;
31341: LD_VAR 0 2
31345: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31346: LD_INT 0
31348: PPUSH
31349: PPUSH
31350: PPUSH
// if not mines then
31351: LD_VAR 0 2
31355: NOT
31356: IFFALSE 31360
// exit ;
31358: GO 31504
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31360: LD_ADDR_VAR 0 5
31364: PUSH
31365: LD_INT 81
31367: PUSH
31368: LD_VAR 0 1
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: LD_INT 3
31379: PUSH
31380: LD_INT 21
31382: PUSH
31383: LD_INT 3
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PPUSH
31398: CALL_OW 69
31402: ST_TO_ADDR
// for i in mines do
31403: LD_ADDR_VAR 0 4
31407: PUSH
31408: LD_VAR 0 2
31412: PUSH
31413: FOR_IN
31414: IFFALSE 31502
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31416: LD_VAR 0 4
31420: PUSH
31421: LD_INT 1
31423: ARRAY
31424: PPUSH
31425: LD_VAR 0 4
31429: PUSH
31430: LD_INT 2
31432: ARRAY
31433: PPUSH
31434: CALL_OW 458
31438: NOT
31439: IFFALSE 31443
// continue ;
31441: GO 31413
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31443: LD_VAR 0 4
31447: PUSH
31448: LD_INT 1
31450: ARRAY
31451: PPUSH
31452: LD_VAR 0 4
31456: PUSH
31457: LD_INT 2
31459: ARRAY
31460: PPUSH
31461: CALL_OW 428
31465: PUSH
31466: LD_VAR 0 5
31470: IN
31471: IFFALSE 31500
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31473: LD_VAR 0 4
31477: PUSH
31478: LD_INT 1
31480: ARRAY
31481: PPUSH
31482: LD_VAR 0 4
31486: PUSH
31487: LD_INT 2
31489: ARRAY
31490: PPUSH
31491: LD_VAR 0 1
31495: PPUSH
31496: CALL_OW 456
// end ;
31500: GO 31413
31502: POP
31503: POP
// end ;
31504: LD_VAR 0 3
31508: RET
// export function Count ( array ) ; var i ; begin
31509: LD_INT 0
31511: PPUSH
31512: PPUSH
// result := 0 ;
31513: LD_ADDR_VAR 0 2
31517: PUSH
31518: LD_INT 0
31520: ST_TO_ADDR
// for i in array do
31521: LD_ADDR_VAR 0 3
31525: PUSH
31526: LD_VAR 0 1
31530: PUSH
31531: FOR_IN
31532: IFFALSE 31556
// if i then
31534: LD_VAR 0 3
31538: IFFALSE 31554
// result := result + 1 ;
31540: LD_ADDR_VAR 0 2
31544: PUSH
31545: LD_VAR 0 2
31549: PUSH
31550: LD_INT 1
31552: PLUS
31553: ST_TO_ADDR
31554: GO 31531
31556: POP
31557: POP
// end ;
31558: LD_VAR 0 2
31562: RET
// export function IsEmpty ( building ) ; begin
31563: LD_INT 0
31565: PPUSH
// if not building then
31566: LD_VAR 0 1
31570: NOT
31571: IFFALSE 31575
// exit ;
31573: GO 31618
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31575: LD_ADDR_VAR 0 2
31579: PUSH
31580: LD_VAR 0 1
31584: PUSH
31585: LD_INT 22
31587: PUSH
31588: LD_VAR 0 1
31592: PPUSH
31593: CALL_OW 255
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: LD_INT 58
31604: PUSH
31605: EMPTY
31606: LIST
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: PPUSH
31612: CALL_OW 69
31616: IN
31617: ST_TO_ADDR
// end ;
31618: LD_VAR 0 2
31622: RET
// export function IsNotFull ( building ) ; var places ; begin
31623: LD_INT 0
31625: PPUSH
31626: PPUSH
// if not building then
31627: LD_VAR 0 1
31631: NOT
31632: IFFALSE 31636
// exit ;
31634: GO 31807
// result := false ;
31636: LD_ADDR_VAR 0 2
31640: PUSH
31641: LD_INT 0
31643: ST_TO_ADDR
// places := 0 ;
31644: LD_ADDR_VAR 0 3
31648: PUSH
31649: LD_INT 0
31651: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
31652: LD_VAR 0 1
31656: PPUSH
31657: CALL_OW 266
31661: PUSH
31662: LD_INT 0
31664: DOUBLE
31665: EQUAL
31666: IFTRUE 31724
31668: LD_INT 1
31670: DOUBLE
31671: EQUAL
31672: IFTRUE 31724
31674: LD_INT 6
31676: DOUBLE
31677: EQUAL
31678: IFTRUE 31724
31680: LD_INT 7
31682: DOUBLE
31683: EQUAL
31684: IFTRUE 31724
31686: LD_INT 8
31688: DOUBLE
31689: EQUAL
31690: IFTRUE 31724
31692: LD_INT 4
31694: DOUBLE
31695: EQUAL
31696: IFTRUE 31724
31698: LD_INT 5
31700: DOUBLE
31701: EQUAL
31702: IFTRUE 31724
31704: LD_INT 2
31706: DOUBLE
31707: EQUAL
31708: IFTRUE 31724
31710: LD_INT 3
31712: DOUBLE
31713: EQUAL
31714: IFTRUE 31724
31716: LD_INT 35
31718: DOUBLE
31719: EQUAL
31720: IFTRUE 31724
31722: GO 31735
31724: POP
// places := 6 ; b_bunker , b_breastwork :
31725: LD_ADDR_VAR 0 3
31729: PUSH
31730: LD_INT 6
31732: ST_TO_ADDR
31733: GO 31780
31735: LD_INT 32
31737: DOUBLE
31738: EQUAL
31739: IFTRUE 31749
31741: LD_INT 31
31743: DOUBLE
31744: EQUAL
31745: IFTRUE 31749
31747: GO 31760
31749: POP
// places := 1 ; b_control_tower :
31750: LD_ADDR_VAR 0 3
31754: PUSH
31755: LD_INT 1
31757: ST_TO_ADDR
31758: GO 31780
31760: LD_INT 36
31762: DOUBLE
31763: EQUAL
31764: IFTRUE 31768
31766: GO 31779
31768: POP
// places := 3 ; end ;
31769: LD_ADDR_VAR 0 3
31773: PUSH
31774: LD_INT 3
31776: ST_TO_ADDR
31777: GO 31780
31779: POP
// if places then
31780: LD_VAR 0 3
31784: IFFALSE 31807
// result := UnitsInside ( building ) < places ;
31786: LD_ADDR_VAR 0 2
31790: PUSH
31791: LD_VAR 0 1
31795: PPUSH
31796: CALL_OW 313
31800: PUSH
31801: LD_VAR 0 3
31805: LESS
31806: ST_TO_ADDR
// end ;
31807: LD_VAR 0 2
31811: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31812: LD_INT 0
31814: PPUSH
31815: PPUSH
31816: PPUSH
31817: PPUSH
// tmp := [ ] ;
31818: LD_ADDR_VAR 0 3
31822: PUSH
31823: EMPTY
31824: ST_TO_ADDR
// list := [ ] ;
31825: LD_ADDR_VAR 0 5
31829: PUSH
31830: EMPTY
31831: ST_TO_ADDR
// for i = 16 to 25 do
31832: LD_ADDR_VAR 0 4
31836: PUSH
31837: DOUBLE
31838: LD_INT 16
31840: DEC
31841: ST_TO_ADDR
31842: LD_INT 25
31844: PUSH
31845: FOR_TO
31846: IFFALSE 31919
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31848: LD_ADDR_VAR 0 3
31852: PUSH
31853: LD_VAR 0 3
31857: PUSH
31858: LD_INT 22
31860: PUSH
31861: LD_VAR 0 1
31865: PPUSH
31866: CALL_OW 255
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 91
31877: PUSH
31878: LD_VAR 0 1
31882: PUSH
31883: LD_INT 6
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: LIST
31890: PUSH
31891: LD_INT 30
31893: PUSH
31894: LD_VAR 0 4
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: LIST
31907: PUSH
31908: EMPTY
31909: LIST
31910: PPUSH
31911: CALL_OW 69
31915: ADD
31916: ST_TO_ADDR
31917: GO 31845
31919: POP
31920: POP
// for i = 1 to tmp do
31921: LD_ADDR_VAR 0 4
31925: PUSH
31926: DOUBLE
31927: LD_INT 1
31929: DEC
31930: ST_TO_ADDR
31931: LD_VAR 0 3
31935: PUSH
31936: FOR_TO
31937: IFFALSE 32025
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31939: LD_ADDR_VAR 0 5
31943: PUSH
31944: LD_VAR 0 5
31948: PUSH
31949: LD_VAR 0 3
31953: PUSH
31954: LD_VAR 0 4
31958: ARRAY
31959: PPUSH
31960: CALL_OW 266
31964: PUSH
31965: LD_VAR 0 3
31969: PUSH
31970: LD_VAR 0 4
31974: ARRAY
31975: PPUSH
31976: CALL_OW 250
31980: PUSH
31981: LD_VAR 0 3
31985: PUSH
31986: LD_VAR 0 4
31990: ARRAY
31991: PPUSH
31992: CALL_OW 251
31996: PUSH
31997: LD_VAR 0 3
32001: PUSH
32002: LD_VAR 0 4
32006: ARRAY
32007: PPUSH
32008: CALL_OW 254
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: PUSH
32019: EMPTY
32020: LIST
32021: ADD
32022: ST_TO_ADDR
32023: GO 31936
32025: POP
32026: POP
// result := list ;
32027: LD_ADDR_VAR 0 2
32031: PUSH
32032: LD_VAR 0 5
32036: ST_TO_ADDR
// end ;
32037: LD_VAR 0 2
32041: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32042: LD_INT 0
32044: PPUSH
32045: PPUSH
32046: PPUSH
32047: PPUSH
32048: PPUSH
32049: PPUSH
32050: PPUSH
// if not factory then
32051: LD_VAR 0 1
32055: NOT
32056: IFFALSE 32060
// exit ;
32058: GO 32653
// if control = control_apeman then
32060: LD_VAR 0 4
32064: PUSH
32065: LD_INT 5
32067: EQUAL
32068: IFFALSE 32177
// begin tmp := UnitsInside ( factory ) ;
32070: LD_ADDR_VAR 0 8
32074: PUSH
32075: LD_VAR 0 1
32079: PPUSH
32080: CALL_OW 313
32084: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32085: LD_VAR 0 8
32089: PPUSH
32090: LD_INT 25
32092: PUSH
32093: LD_INT 12
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: PPUSH
32100: CALL_OW 72
32104: NOT
32105: IFFALSE 32115
// control := control_manual ;
32107: LD_ADDR_VAR 0 4
32111: PUSH
32112: LD_INT 1
32114: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32115: LD_ADDR_VAR 0 8
32119: PUSH
32120: LD_VAR 0 1
32124: PPUSH
32125: CALL 31812 0 1
32129: ST_TO_ADDR
// if tmp then
32130: LD_VAR 0 8
32134: IFFALSE 32177
// begin for i in tmp do
32136: LD_ADDR_VAR 0 7
32140: PUSH
32141: LD_VAR 0 8
32145: PUSH
32146: FOR_IN
32147: IFFALSE 32175
// if i [ 1 ] = b_ext_radio then
32149: LD_VAR 0 7
32153: PUSH
32154: LD_INT 1
32156: ARRAY
32157: PUSH
32158: LD_INT 22
32160: EQUAL
32161: IFFALSE 32173
// begin control := control_remote ;
32163: LD_ADDR_VAR 0 4
32167: PUSH
32168: LD_INT 2
32170: ST_TO_ADDR
// break ;
32171: GO 32175
// end ;
32173: GO 32146
32175: POP
32176: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32177: LD_VAR 0 1
32181: PPUSH
32182: LD_VAR 0 2
32186: PPUSH
32187: LD_VAR 0 3
32191: PPUSH
32192: LD_VAR 0 4
32196: PPUSH
32197: LD_VAR 0 5
32201: PPUSH
32202: CALL_OW 448
32206: IFFALSE 32241
// begin result := [ chassis , engine , control , weapon ] ;
32208: LD_ADDR_VAR 0 6
32212: PUSH
32213: LD_VAR 0 2
32217: PUSH
32218: LD_VAR 0 3
32222: PUSH
32223: LD_VAR 0 4
32227: PUSH
32228: LD_VAR 0 5
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: ST_TO_ADDR
// exit ;
32239: GO 32653
// end ; _chassis := AvailableChassisList ( factory ) ;
32241: LD_ADDR_VAR 0 9
32245: PUSH
32246: LD_VAR 0 1
32250: PPUSH
32251: CALL_OW 475
32255: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32256: LD_ADDR_VAR 0 11
32260: PUSH
32261: LD_VAR 0 1
32265: PPUSH
32266: CALL_OW 476
32270: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32271: LD_ADDR_VAR 0 12
32275: PUSH
32276: LD_VAR 0 1
32280: PPUSH
32281: CALL_OW 477
32285: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32286: LD_ADDR_VAR 0 10
32290: PUSH
32291: LD_VAR 0 1
32295: PPUSH
32296: CALL_OW 478
32300: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32301: LD_VAR 0 9
32305: NOT
32306: PUSH
32307: LD_VAR 0 11
32311: NOT
32312: OR
32313: PUSH
32314: LD_VAR 0 12
32318: NOT
32319: OR
32320: PUSH
32321: LD_VAR 0 10
32325: NOT
32326: OR
32327: IFFALSE 32362
// begin result := [ chassis , engine , control , weapon ] ;
32329: LD_ADDR_VAR 0 6
32333: PUSH
32334: LD_VAR 0 2
32338: PUSH
32339: LD_VAR 0 3
32343: PUSH
32344: LD_VAR 0 4
32348: PUSH
32349: LD_VAR 0 5
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: ST_TO_ADDR
// exit ;
32360: GO 32653
// end ; if not chassis in _chassis then
32362: LD_VAR 0 2
32366: PUSH
32367: LD_VAR 0 9
32371: IN
32372: NOT
32373: IFFALSE 32399
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32375: LD_ADDR_VAR 0 2
32379: PUSH
32380: LD_VAR 0 9
32384: PUSH
32385: LD_INT 1
32387: PPUSH
32388: LD_VAR 0 9
32392: PPUSH
32393: CALL_OW 12
32397: ARRAY
32398: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32399: LD_VAR 0 2
32403: PPUSH
32404: LD_VAR 0 3
32408: PPUSH
32409: CALL 32658 0 2
32413: NOT
32414: IFFALSE 32473
// repeat engine := _engine [ 1 ] ;
32416: LD_ADDR_VAR 0 3
32420: PUSH
32421: LD_VAR 0 11
32425: PUSH
32426: LD_INT 1
32428: ARRAY
32429: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32430: LD_ADDR_VAR 0 11
32434: PUSH
32435: LD_VAR 0 11
32439: PPUSH
32440: LD_INT 1
32442: PPUSH
32443: CALL_OW 3
32447: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32448: LD_VAR 0 2
32452: PPUSH
32453: LD_VAR 0 3
32457: PPUSH
32458: CALL 32658 0 2
32462: PUSH
32463: LD_VAR 0 11
32467: PUSH
32468: EMPTY
32469: EQUAL
32470: OR
32471: IFFALSE 32416
// if not control in _control then
32473: LD_VAR 0 4
32477: PUSH
32478: LD_VAR 0 12
32482: IN
32483: NOT
32484: IFFALSE 32510
// control := _control [ rand ( 1 , _control ) ] ;
32486: LD_ADDR_VAR 0 4
32490: PUSH
32491: LD_VAR 0 12
32495: PUSH
32496: LD_INT 1
32498: PPUSH
32499: LD_VAR 0 12
32503: PPUSH
32504: CALL_OW 12
32508: ARRAY
32509: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32510: LD_VAR 0 2
32514: PPUSH
32515: LD_VAR 0 5
32519: PPUSH
32520: CALL 32878 0 2
32524: NOT
32525: IFFALSE 32584
// repeat weapon := _weapon [ 1 ] ;
32527: LD_ADDR_VAR 0 5
32531: PUSH
32532: LD_VAR 0 10
32536: PUSH
32537: LD_INT 1
32539: ARRAY
32540: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32541: LD_ADDR_VAR 0 10
32545: PUSH
32546: LD_VAR 0 10
32550: PPUSH
32551: LD_INT 1
32553: PPUSH
32554: CALL_OW 3
32558: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32559: LD_VAR 0 2
32563: PPUSH
32564: LD_VAR 0 5
32568: PPUSH
32569: CALL 32878 0 2
32573: PUSH
32574: LD_VAR 0 10
32578: PUSH
32579: EMPTY
32580: EQUAL
32581: OR
32582: IFFALSE 32527
// result := [ ] ;
32584: LD_ADDR_VAR 0 6
32588: PUSH
32589: EMPTY
32590: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32591: LD_VAR 0 1
32595: PPUSH
32596: LD_VAR 0 2
32600: PPUSH
32601: LD_VAR 0 3
32605: PPUSH
32606: LD_VAR 0 4
32610: PPUSH
32611: LD_VAR 0 5
32615: PPUSH
32616: CALL_OW 448
32620: IFFALSE 32653
// result := [ chassis , engine , control , weapon ] ;
32622: LD_ADDR_VAR 0 6
32626: PUSH
32627: LD_VAR 0 2
32631: PUSH
32632: LD_VAR 0 3
32636: PUSH
32637: LD_VAR 0 4
32641: PUSH
32642: LD_VAR 0 5
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: ST_TO_ADDR
// end ;
32653: LD_VAR 0 6
32657: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32658: LD_INT 0
32660: PPUSH
// if not chassis or not engine then
32661: LD_VAR 0 1
32665: NOT
32666: PUSH
32667: LD_VAR 0 2
32671: NOT
32672: OR
32673: IFFALSE 32677
// exit ;
32675: GO 32873
// case engine of engine_solar :
32677: LD_VAR 0 2
32681: PUSH
32682: LD_INT 2
32684: DOUBLE
32685: EQUAL
32686: IFTRUE 32690
32688: GO 32728
32690: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32691: LD_ADDR_VAR 0 3
32695: PUSH
32696: LD_INT 11
32698: PUSH
32699: LD_INT 12
32701: PUSH
32702: LD_INT 13
32704: PUSH
32705: LD_INT 14
32707: PUSH
32708: LD_INT 1
32710: PUSH
32711: LD_INT 2
32713: PUSH
32714: LD_INT 3
32716: PUSH
32717: EMPTY
32718: LIST
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: ST_TO_ADDR
32726: GO 32857
32728: LD_INT 1
32730: DOUBLE
32731: EQUAL
32732: IFTRUE 32736
32734: GO 32798
32736: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32737: LD_ADDR_VAR 0 3
32741: PUSH
32742: LD_INT 11
32744: PUSH
32745: LD_INT 12
32747: PUSH
32748: LD_INT 13
32750: PUSH
32751: LD_INT 14
32753: PUSH
32754: LD_INT 1
32756: PUSH
32757: LD_INT 2
32759: PUSH
32760: LD_INT 3
32762: PUSH
32763: LD_INT 4
32765: PUSH
32766: LD_INT 5
32768: PUSH
32769: LD_INT 21
32771: PUSH
32772: LD_INT 23
32774: PUSH
32775: LD_INT 22
32777: PUSH
32778: LD_INT 24
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: LIST
32785: LIST
32786: LIST
32787: LIST
32788: LIST
32789: LIST
32790: LIST
32791: LIST
32792: LIST
32793: LIST
32794: LIST
32795: ST_TO_ADDR
32796: GO 32857
32798: LD_INT 3
32800: DOUBLE
32801: EQUAL
32802: IFTRUE 32806
32804: GO 32856
32806: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32807: LD_ADDR_VAR 0 3
32811: PUSH
32812: LD_INT 13
32814: PUSH
32815: LD_INT 14
32817: PUSH
32818: LD_INT 2
32820: PUSH
32821: LD_INT 3
32823: PUSH
32824: LD_INT 4
32826: PUSH
32827: LD_INT 5
32829: PUSH
32830: LD_INT 21
32832: PUSH
32833: LD_INT 22
32835: PUSH
32836: LD_INT 23
32838: PUSH
32839: LD_INT 24
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: ST_TO_ADDR
32854: GO 32857
32856: POP
// result := ( chassis in result ) ;
32857: LD_ADDR_VAR 0 3
32861: PUSH
32862: LD_VAR 0 1
32866: PUSH
32867: LD_VAR 0 3
32871: IN
32872: ST_TO_ADDR
// end ;
32873: LD_VAR 0 3
32877: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32878: LD_INT 0
32880: PPUSH
// if not chassis or not weapon then
32881: LD_VAR 0 1
32885: NOT
32886: PUSH
32887: LD_VAR 0 2
32891: NOT
32892: OR
32893: IFFALSE 32897
// exit ;
32895: GO 33957
// case weapon of us_machine_gun :
32897: LD_VAR 0 2
32901: PUSH
32902: LD_INT 2
32904: DOUBLE
32905: EQUAL
32906: IFTRUE 32910
32908: GO 32940
32910: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32911: LD_ADDR_VAR 0 3
32915: PUSH
32916: LD_INT 1
32918: PUSH
32919: LD_INT 2
32921: PUSH
32922: LD_INT 3
32924: PUSH
32925: LD_INT 4
32927: PUSH
32928: LD_INT 5
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: ST_TO_ADDR
32938: GO 33941
32940: LD_INT 3
32942: DOUBLE
32943: EQUAL
32944: IFTRUE 32948
32946: GO 32978
32948: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32949: LD_ADDR_VAR 0 3
32953: PUSH
32954: LD_INT 1
32956: PUSH
32957: LD_INT 2
32959: PUSH
32960: LD_INT 3
32962: PUSH
32963: LD_INT 4
32965: PUSH
32966: LD_INT 5
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: ST_TO_ADDR
32976: GO 33941
32978: LD_INT 11
32980: DOUBLE
32981: EQUAL
32982: IFTRUE 32986
32984: GO 33016
32986: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32987: LD_ADDR_VAR 0 3
32991: PUSH
32992: LD_INT 1
32994: PUSH
32995: LD_INT 2
32997: PUSH
32998: LD_INT 3
33000: PUSH
33001: LD_INT 4
33003: PUSH
33004: LD_INT 5
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: ST_TO_ADDR
33014: GO 33941
33016: LD_INT 4
33018: DOUBLE
33019: EQUAL
33020: IFTRUE 33024
33022: GO 33050
33024: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33025: LD_ADDR_VAR 0 3
33029: PUSH
33030: LD_INT 2
33032: PUSH
33033: LD_INT 3
33035: PUSH
33036: LD_INT 4
33038: PUSH
33039: LD_INT 5
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: ST_TO_ADDR
33048: GO 33941
33050: LD_INT 5
33052: DOUBLE
33053: EQUAL
33054: IFTRUE 33058
33056: GO 33084
33058: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33059: LD_ADDR_VAR 0 3
33063: PUSH
33064: LD_INT 2
33066: PUSH
33067: LD_INT 3
33069: PUSH
33070: LD_INT 4
33072: PUSH
33073: LD_INT 5
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: ST_TO_ADDR
33082: GO 33941
33084: LD_INT 9
33086: DOUBLE
33087: EQUAL
33088: IFTRUE 33092
33090: GO 33118
33092: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33093: LD_ADDR_VAR 0 3
33097: PUSH
33098: LD_INT 2
33100: PUSH
33101: LD_INT 3
33103: PUSH
33104: LD_INT 4
33106: PUSH
33107: LD_INT 5
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: ST_TO_ADDR
33116: GO 33941
33118: LD_INT 7
33120: DOUBLE
33121: EQUAL
33122: IFTRUE 33126
33124: GO 33152
33126: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33127: LD_ADDR_VAR 0 3
33131: PUSH
33132: LD_INT 2
33134: PUSH
33135: LD_INT 3
33137: PUSH
33138: LD_INT 4
33140: PUSH
33141: LD_INT 5
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: ST_TO_ADDR
33150: GO 33941
33152: LD_INT 12
33154: DOUBLE
33155: EQUAL
33156: IFTRUE 33160
33158: GO 33186
33160: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33161: LD_ADDR_VAR 0 3
33165: PUSH
33166: LD_INT 2
33168: PUSH
33169: LD_INT 3
33171: PUSH
33172: LD_INT 4
33174: PUSH
33175: LD_INT 5
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: ST_TO_ADDR
33184: GO 33941
33186: LD_INT 13
33188: DOUBLE
33189: EQUAL
33190: IFTRUE 33194
33192: GO 33220
33194: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33195: LD_ADDR_VAR 0 3
33199: PUSH
33200: LD_INT 2
33202: PUSH
33203: LD_INT 3
33205: PUSH
33206: LD_INT 4
33208: PUSH
33209: LD_INT 5
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: ST_TO_ADDR
33218: GO 33941
33220: LD_INT 14
33222: DOUBLE
33223: EQUAL
33224: IFTRUE 33228
33226: GO 33246
33228: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33229: LD_ADDR_VAR 0 3
33233: PUSH
33234: LD_INT 4
33236: PUSH
33237: LD_INT 5
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: ST_TO_ADDR
33244: GO 33941
33246: LD_INT 6
33248: DOUBLE
33249: EQUAL
33250: IFTRUE 33254
33252: GO 33272
33254: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33255: LD_ADDR_VAR 0 3
33259: PUSH
33260: LD_INT 4
33262: PUSH
33263: LD_INT 5
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: ST_TO_ADDR
33270: GO 33941
33272: LD_INT 10
33274: DOUBLE
33275: EQUAL
33276: IFTRUE 33280
33278: GO 33298
33280: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33281: LD_ADDR_VAR 0 3
33285: PUSH
33286: LD_INT 4
33288: PUSH
33289: LD_INT 5
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: ST_TO_ADDR
33296: GO 33941
33298: LD_INT 22
33300: DOUBLE
33301: EQUAL
33302: IFTRUE 33306
33304: GO 33332
33306: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33307: LD_ADDR_VAR 0 3
33311: PUSH
33312: LD_INT 11
33314: PUSH
33315: LD_INT 12
33317: PUSH
33318: LD_INT 13
33320: PUSH
33321: LD_INT 14
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: ST_TO_ADDR
33330: GO 33941
33332: LD_INT 23
33334: DOUBLE
33335: EQUAL
33336: IFTRUE 33340
33338: GO 33366
33340: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33341: LD_ADDR_VAR 0 3
33345: PUSH
33346: LD_INT 11
33348: PUSH
33349: LD_INT 12
33351: PUSH
33352: LD_INT 13
33354: PUSH
33355: LD_INT 14
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: LIST
33362: LIST
33363: ST_TO_ADDR
33364: GO 33941
33366: LD_INT 24
33368: DOUBLE
33369: EQUAL
33370: IFTRUE 33374
33372: GO 33400
33374: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33375: LD_ADDR_VAR 0 3
33379: PUSH
33380: LD_INT 11
33382: PUSH
33383: LD_INT 12
33385: PUSH
33386: LD_INT 13
33388: PUSH
33389: LD_INT 14
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: ST_TO_ADDR
33398: GO 33941
33400: LD_INT 30
33402: DOUBLE
33403: EQUAL
33404: IFTRUE 33408
33406: GO 33434
33408: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33409: LD_ADDR_VAR 0 3
33413: PUSH
33414: LD_INT 11
33416: PUSH
33417: LD_INT 12
33419: PUSH
33420: LD_INT 13
33422: PUSH
33423: LD_INT 14
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: ST_TO_ADDR
33432: GO 33941
33434: LD_INT 25
33436: DOUBLE
33437: EQUAL
33438: IFTRUE 33442
33440: GO 33460
33442: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33443: LD_ADDR_VAR 0 3
33447: PUSH
33448: LD_INT 13
33450: PUSH
33451: LD_INT 14
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: ST_TO_ADDR
33458: GO 33941
33460: LD_INT 27
33462: DOUBLE
33463: EQUAL
33464: IFTRUE 33468
33466: GO 33486
33468: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33469: LD_ADDR_VAR 0 3
33473: PUSH
33474: LD_INT 13
33476: PUSH
33477: LD_INT 14
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: ST_TO_ADDR
33484: GO 33941
33486: LD_INT 92
33488: DOUBLE
33489: EQUAL
33490: IFTRUE 33494
33492: GO 33520
33494: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33495: LD_ADDR_VAR 0 3
33499: PUSH
33500: LD_INT 11
33502: PUSH
33503: LD_INT 12
33505: PUSH
33506: LD_INT 13
33508: PUSH
33509: LD_INT 14
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: ST_TO_ADDR
33518: GO 33941
33520: LD_INT 28
33522: DOUBLE
33523: EQUAL
33524: IFTRUE 33528
33526: GO 33546
33528: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33529: LD_ADDR_VAR 0 3
33533: PUSH
33534: LD_INT 13
33536: PUSH
33537: LD_INT 14
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: ST_TO_ADDR
33544: GO 33941
33546: LD_INT 29
33548: DOUBLE
33549: EQUAL
33550: IFTRUE 33554
33552: GO 33572
33554: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33555: LD_ADDR_VAR 0 3
33559: PUSH
33560: LD_INT 13
33562: PUSH
33563: LD_INT 14
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: ST_TO_ADDR
33570: GO 33941
33572: LD_INT 31
33574: DOUBLE
33575: EQUAL
33576: IFTRUE 33580
33578: GO 33598
33580: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33581: LD_ADDR_VAR 0 3
33585: PUSH
33586: LD_INT 13
33588: PUSH
33589: LD_INT 14
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: ST_TO_ADDR
33596: GO 33941
33598: LD_INT 26
33600: DOUBLE
33601: EQUAL
33602: IFTRUE 33606
33604: GO 33624
33606: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33607: LD_ADDR_VAR 0 3
33611: PUSH
33612: LD_INT 13
33614: PUSH
33615: LD_INT 14
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: ST_TO_ADDR
33622: GO 33941
33624: LD_INT 42
33626: DOUBLE
33627: EQUAL
33628: IFTRUE 33632
33630: GO 33658
33632: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33633: LD_ADDR_VAR 0 3
33637: PUSH
33638: LD_INT 21
33640: PUSH
33641: LD_INT 22
33643: PUSH
33644: LD_INT 23
33646: PUSH
33647: LD_INT 24
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: ST_TO_ADDR
33656: GO 33941
33658: LD_INT 43
33660: DOUBLE
33661: EQUAL
33662: IFTRUE 33666
33664: GO 33692
33666: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33667: LD_ADDR_VAR 0 3
33671: PUSH
33672: LD_INT 21
33674: PUSH
33675: LD_INT 22
33677: PUSH
33678: LD_INT 23
33680: PUSH
33681: LD_INT 24
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: ST_TO_ADDR
33690: GO 33941
33692: LD_INT 44
33694: DOUBLE
33695: EQUAL
33696: IFTRUE 33700
33698: GO 33726
33700: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33701: LD_ADDR_VAR 0 3
33705: PUSH
33706: LD_INT 21
33708: PUSH
33709: LD_INT 22
33711: PUSH
33712: LD_INT 23
33714: PUSH
33715: LD_INT 24
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: ST_TO_ADDR
33724: GO 33941
33726: LD_INT 45
33728: DOUBLE
33729: EQUAL
33730: IFTRUE 33734
33732: GO 33760
33734: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33735: LD_ADDR_VAR 0 3
33739: PUSH
33740: LD_INT 21
33742: PUSH
33743: LD_INT 22
33745: PUSH
33746: LD_INT 23
33748: PUSH
33749: LD_INT 24
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: ST_TO_ADDR
33758: GO 33941
33760: LD_INT 49
33762: DOUBLE
33763: EQUAL
33764: IFTRUE 33768
33766: GO 33794
33768: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33769: LD_ADDR_VAR 0 3
33773: PUSH
33774: LD_INT 21
33776: PUSH
33777: LD_INT 22
33779: PUSH
33780: LD_INT 23
33782: PUSH
33783: LD_INT 24
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: ST_TO_ADDR
33792: GO 33941
33794: LD_INT 51
33796: DOUBLE
33797: EQUAL
33798: IFTRUE 33802
33800: GO 33828
33802: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33803: LD_ADDR_VAR 0 3
33807: PUSH
33808: LD_INT 21
33810: PUSH
33811: LD_INT 22
33813: PUSH
33814: LD_INT 23
33816: PUSH
33817: LD_INT 24
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: ST_TO_ADDR
33826: GO 33941
33828: LD_INT 52
33830: DOUBLE
33831: EQUAL
33832: IFTRUE 33836
33834: GO 33862
33836: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33837: LD_ADDR_VAR 0 3
33841: PUSH
33842: LD_INT 21
33844: PUSH
33845: LD_INT 22
33847: PUSH
33848: LD_INT 23
33850: PUSH
33851: LD_INT 24
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: ST_TO_ADDR
33860: GO 33941
33862: LD_INT 53
33864: DOUBLE
33865: EQUAL
33866: IFTRUE 33870
33868: GO 33888
33870: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33871: LD_ADDR_VAR 0 3
33875: PUSH
33876: LD_INT 23
33878: PUSH
33879: LD_INT 24
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: ST_TO_ADDR
33886: GO 33941
33888: LD_INT 46
33890: DOUBLE
33891: EQUAL
33892: IFTRUE 33896
33894: GO 33914
33896: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33897: LD_ADDR_VAR 0 3
33901: PUSH
33902: LD_INT 23
33904: PUSH
33905: LD_INT 24
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: ST_TO_ADDR
33912: GO 33941
33914: LD_INT 47
33916: DOUBLE
33917: EQUAL
33918: IFTRUE 33922
33920: GO 33940
33922: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33923: LD_ADDR_VAR 0 3
33927: PUSH
33928: LD_INT 23
33930: PUSH
33931: LD_INT 24
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: ST_TO_ADDR
33938: GO 33941
33940: POP
// result := ( chassis in result ) ;
33941: LD_ADDR_VAR 0 3
33945: PUSH
33946: LD_VAR 0 1
33950: PUSH
33951: LD_VAR 0 3
33955: IN
33956: ST_TO_ADDR
// end ;
33957: LD_VAR 0 3
33961: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33962: LD_INT 0
33964: PPUSH
33965: PPUSH
33966: PPUSH
33967: PPUSH
33968: PPUSH
33969: PPUSH
33970: PPUSH
// result := array ;
33971: LD_ADDR_VAR 0 5
33975: PUSH
33976: LD_VAR 0 1
33980: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33981: LD_VAR 0 1
33985: NOT
33986: PUSH
33987: LD_VAR 0 2
33991: NOT
33992: OR
33993: PUSH
33994: LD_VAR 0 3
33998: NOT
33999: OR
34000: PUSH
34001: LD_VAR 0 2
34005: PUSH
34006: LD_VAR 0 1
34010: GREATER
34011: OR
34012: PUSH
34013: LD_VAR 0 3
34017: PUSH
34018: LD_VAR 0 1
34022: GREATER
34023: OR
34024: IFFALSE 34028
// exit ;
34026: GO 34324
// if direction then
34028: LD_VAR 0 4
34032: IFFALSE 34096
// begin d := 1 ;
34034: LD_ADDR_VAR 0 9
34038: PUSH
34039: LD_INT 1
34041: ST_TO_ADDR
// if i_from > i_to then
34042: LD_VAR 0 2
34046: PUSH
34047: LD_VAR 0 3
34051: GREATER
34052: IFFALSE 34078
// length := ( array - i_from ) + i_to else
34054: LD_ADDR_VAR 0 11
34058: PUSH
34059: LD_VAR 0 1
34063: PUSH
34064: LD_VAR 0 2
34068: MINUS
34069: PUSH
34070: LD_VAR 0 3
34074: PLUS
34075: ST_TO_ADDR
34076: GO 34094
// length := i_to - i_from ;
34078: LD_ADDR_VAR 0 11
34082: PUSH
34083: LD_VAR 0 3
34087: PUSH
34088: LD_VAR 0 2
34092: MINUS
34093: ST_TO_ADDR
// end else
34094: GO 34157
// begin d := - 1 ;
34096: LD_ADDR_VAR 0 9
34100: PUSH
34101: LD_INT 1
34103: NEG
34104: ST_TO_ADDR
// if i_from > i_to then
34105: LD_VAR 0 2
34109: PUSH
34110: LD_VAR 0 3
34114: GREATER
34115: IFFALSE 34135
// length := i_from - i_to else
34117: LD_ADDR_VAR 0 11
34121: PUSH
34122: LD_VAR 0 2
34126: PUSH
34127: LD_VAR 0 3
34131: MINUS
34132: ST_TO_ADDR
34133: GO 34157
// length := ( array - i_to ) + i_from ;
34135: LD_ADDR_VAR 0 11
34139: PUSH
34140: LD_VAR 0 1
34144: PUSH
34145: LD_VAR 0 3
34149: MINUS
34150: PUSH
34151: LD_VAR 0 2
34155: PLUS
34156: ST_TO_ADDR
// end ; if not length then
34157: LD_VAR 0 11
34161: NOT
34162: IFFALSE 34166
// exit ;
34164: GO 34324
// tmp := array ;
34166: LD_ADDR_VAR 0 10
34170: PUSH
34171: LD_VAR 0 1
34175: ST_TO_ADDR
// for i = 1 to length do
34176: LD_ADDR_VAR 0 6
34180: PUSH
34181: DOUBLE
34182: LD_INT 1
34184: DEC
34185: ST_TO_ADDR
34186: LD_VAR 0 11
34190: PUSH
34191: FOR_TO
34192: IFFALSE 34312
// begin for j = 1 to array do
34194: LD_ADDR_VAR 0 7
34198: PUSH
34199: DOUBLE
34200: LD_INT 1
34202: DEC
34203: ST_TO_ADDR
34204: LD_VAR 0 1
34208: PUSH
34209: FOR_TO
34210: IFFALSE 34298
// begin k := j + d ;
34212: LD_ADDR_VAR 0 8
34216: PUSH
34217: LD_VAR 0 7
34221: PUSH
34222: LD_VAR 0 9
34226: PLUS
34227: ST_TO_ADDR
// if k > array then
34228: LD_VAR 0 8
34232: PUSH
34233: LD_VAR 0 1
34237: GREATER
34238: IFFALSE 34248
// k := 1 ;
34240: LD_ADDR_VAR 0 8
34244: PUSH
34245: LD_INT 1
34247: ST_TO_ADDR
// if not k then
34248: LD_VAR 0 8
34252: NOT
34253: IFFALSE 34265
// k := array ;
34255: LD_ADDR_VAR 0 8
34259: PUSH
34260: LD_VAR 0 1
34264: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34265: LD_ADDR_VAR 0 10
34269: PUSH
34270: LD_VAR 0 10
34274: PPUSH
34275: LD_VAR 0 8
34279: PPUSH
34280: LD_VAR 0 1
34284: PUSH
34285: LD_VAR 0 7
34289: ARRAY
34290: PPUSH
34291: CALL_OW 1
34295: ST_TO_ADDR
// end ;
34296: GO 34209
34298: POP
34299: POP
// array := tmp ;
34300: LD_ADDR_VAR 0 1
34304: PUSH
34305: LD_VAR 0 10
34309: ST_TO_ADDR
// end ;
34310: GO 34191
34312: POP
34313: POP
// result := array ;
34314: LD_ADDR_VAR 0 5
34318: PUSH
34319: LD_VAR 0 1
34323: ST_TO_ADDR
// end ;
34324: LD_VAR 0 5
34328: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34329: LD_INT 0
34331: PPUSH
34332: PPUSH
// result := 0 ;
34333: LD_ADDR_VAR 0 3
34337: PUSH
34338: LD_INT 0
34340: ST_TO_ADDR
// if not array or not value in array then
34341: LD_VAR 0 1
34345: NOT
34346: PUSH
34347: LD_VAR 0 2
34351: PUSH
34352: LD_VAR 0 1
34356: IN
34357: NOT
34358: OR
34359: IFFALSE 34363
// exit ;
34361: GO 34417
// for i = 1 to array do
34363: LD_ADDR_VAR 0 4
34367: PUSH
34368: DOUBLE
34369: LD_INT 1
34371: DEC
34372: ST_TO_ADDR
34373: LD_VAR 0 1
34377: PUSH
34378: FOR_TO
34379: IFFALSE 34415
// if value = array [ i ] then
34381: LD_VAR 0 2
34385: PUSH
34386: LD_VAR 0 1
34390: PUSH
34391: LD_VAR 0 4
34395: ARRAY
34396: EQUAL
34397: IFFALSE 34413
// begin result := i ;
34399: LD_ADDR_VAR 0 3
34403: PUSH
34404: LD_VAR 0 4
34408: ST_TO_ADDR
// exit ;
34409: POP
34410: POP
34411: GO 34417
// end ;
34413: GO 34378
34415: POP
34416: POP
// end ;
34417: LD_VAR 0 3
34421: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34422: LD_INT 0
34424: PPUSH
// vc_chassis := chassis ;
34425: LD_ADDR_OWVAR 37
34429: PUSH
34430: LD_VAR 0 1
34434: ST_TO_ADDR
// vc_engine := engine ;
34435: LD_ADDR_OWVAR 39
34439: PUSH
34440: LD_VAR 0 2
34444: ST_TO_ADDR
// vc_control := control ;
34445: LD_ADDR_OWVAR 38
34449: PUSH
34450: LD_VAR 0 3
34454: ST_TO_ADDR
// vc_weapon := weapon ;
34455: LD_ADDR_OWVAR 40
34459: PUSH
34460: LD_VAR 0 4
34464: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34465: LD_ADDR_OWVAR 41
34469: PUSH
34470: LD_VAR 0 5
34474: ST_TO_ADDR
// end ;
34475: LD_VAR 0 6
34479: RET
// export function WantPlant ( unit ) ; var task ; begin
34480: LD_INT 0
34482: PPUSH
34483: PPUSH
// result := false ;
34484: LD_ADDR_VAR 0 2
34488: PUSH
34489: LD_INT 0
34491: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34492: LD_ADDR_VAR 0 3
34496: PUSH
34497: LD_VAR 0 1
34501: PPUSH
34502: CALL_OW 437
34506: ST_TO_ADDR
// if task then
34507: LD_VAR 0 3
34511: IFFALSE 34539
// if task [ 1 ] [ 1 ] = p then
34513: LD_VAR 0 3
34517: PUSH
34518: LD_INT 1
34520: ARRAY
34521: PUSH
34522: LD_INT 1
34524: ARRAY
34525: PUSH
34526: LD_STRING p
34528: EQUAL
34529: IFFALSE 34539
// result := true ;
34531: LD_ADDR_VAR 0 2
34535: PUSH
34536: LD_INT 1
34538: ST_TO_ADDR
// end ;
34539: LD_VAR 0 2
34543: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34544: LD_INT 0
34546: PPUSH
34547: PPUSH
34548: PPUSH
34549: PPUSH
// if pos < 1 then
34550: LD_VAR 0 2
34554: PUSH
34555: LD_INT 1
34557: LESS
34558: IFFALSE 34562
// exit ;
34560: GO 34865
// if pos = 1 then
34562: LD_VAR 0 2
34566: PUSH
34567: LD_INT 1
34569: EQUAL
34570: IFFALSE 34603
// result := Replace ( arr , pos [ 1 ] , value ) else
34572: LD_ADDR_VAR 0 4
34576: PUSH
34577: LD_VAR 0 1
34581: PPUSH
34582: LD_VAR 0 2
34586: PUSH
34587: LD_INT 1
34589: ARRAY
34590: PPUSH
34591: LD_VAR 0 3
34595: PPUSH
34596: CALL_OW 1
34600: ST_TO_ADDR
34601: GO 34865
// begin tmp := arr ;
34603: LD_ADDR_VAR 0 6
34607: PUSH
34608: LD_VAR 0 1
34612: ST_TO_ADDR
// s_arr := [ tmp ] ;
34613: LD_ADDR_VAR 0 7
34617: PUSH
34618: LD_VAR 0 6
34622: PUSH
34623: EMPTY
34624: LIST
34625: ST_TO_ADDR
// for i = 1 to pos - 1 do
34626: LD_ADDR_VAR 0 5
34630: PUSH
34631: DOUBLE
34632: LD_INT 1
34634: DEC
34635: ST_TO_ADDR
34636: LD_VAR 0 2
34640: PUSH
34641: LD_INT 1
34643: MINUS
34644: PUSH
34645: FOR_TO
34646: IFFALSE 34691
// begin tmp := tmp [ pos [ i ] ] ;
34648: LD_ADDR_VAR 0 6
34652: PUSH
34653: LD_VAR 0 6
34657: PUSH
34658: LD_VAR 0 2
34662: PUSH
34663: LD_VAR 0 5
34667: ARRAY
34668: ARRAY
34669: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34670: LD_ADDR_VAR 0 7
34674: PUSH
34675: LD_VAR 0 7
34679: PUSH
34680: LD_VAR 0 6
34684: PUSH
34685: EMPTY
34686: LIST
34687: ADD
34688: ST_TO_ADDR
// end ;
34689: GO 34645
34691: POP
34692: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34693: LD_ADDR_VAR 0 6
34697: PUSH
34698: LD_VAR 0 6
34702: PPUSH
34703: LD_VAR 0 2
34707: PUSH
34708: LD_VAR 0 2
34712: ARRAY
34713: PPUSH
34714: LD_VAR 0 3
34718: PPUSH
34719: CALL_OW 1
34723: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34724: LD_ADDR_VAR 0 7
34728: PUSH
34729: LD_VAR 0 7
34733: PPUSH
34734: LD_VAR 0 7
34738: PPUSH
34739: LD_VAR 0 6
34743: PPUSH
34744: CALL_OW 1
34748: ST_TO_ADDR
// for i = s_arr downto 2 do
34749: LD_ADDR_VAR 0 5
34753: PUSH
34754: DOUBLE
34755: LD_VAR 0 7
34759: INC
34760: ST_TO_ADDR
34761: LD_INT 2
34763: PUSH
34764: FOR_DOWNTO
34765: IFFALSE 34849
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34767: LD_ADDR_VAR 0 6
34771: PUSH
34772: LD_VAR 0 7
34776: PUSH
34777: LD_VAR 0 5
34781: PUSH
34782: LD_INT 1
34784: MINUS
34785: ARRAY
34786: PPUSH
34787: LD_VAR 0 2
34791: PUSH
34792: LD_VAR 0 5
34796: PUSH
34797: LD_INT 1
34799: MINUS
34800: ARRAY
34801: PPUSH
34802: LD_VAR 0 7
34806: PUSH
34807: LD_VAR 0 5
34811: ARRAY
34812: PPUSH
34813: CALL_OW 1
34817: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34818: LD_ADDR_VAR 0 7
34822: PUSH
34823: LD_VAR 0 7
34827: PPUSH
34828: LD_VAR 0 5
34832: PUSH
34833: LD_INT 1
34835: MINUS
34836: PPUSH
34837: LD_VAR 0 6
34841: PPUSH
34842: CALL_OW 1
34846: ST_TO_ADDR
// end ;
34847: GO 34764
34849: POP
34850: POP
// result := s_arr [ 1 ] ;
34851: LD_ADDR_VAR 0 4
34855: PUSH
34856: LD_VAR 0 7
34860: PUSH
34861: LD_INT 1
34863: ARRAY
34864: ST_TO_ADDR
// end ; end ;
34865: LD_VAR 0 4
34869: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34870: LD_INT 0
34872: PPUSH
34873: PPUSH
// if not list then
34874: LD_VAR 0 1
34878: NOT
34879: IFFALSE 34883
// exit ;
34881: GO 34974
// i := list [ pos1 ] ;
34883: LD_ADDR_VAR 0 5
34887: PUSH
34888: LD_VAR 0 1
34892: PUSH
34893: LD_VAR 0 2
34897: ARRAY
34898: ST_TO_ADDR
// if not i then
34899: LD_VAR 0 5
34903: NOT
34904: IFFALSE 34908
// exit ;
34906: GO 34974
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34908: LD_ADDR_VAR 0 1
34912: PUSH
34913: LD_VAR 0 1
34917: PPUSH
34918: LD_VAR 0 2
34922: PPUSH
34923: LD_VAR 0 1
34927: PUSH
34928: LD_VAR 0 3
34932: ARRAY
34933: PPUSH
34934: CALL_OW 1
34938: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34939: LD_ADDR_VAR 0 1
34943: PUSH
34944: LD_VAR 0 1
34948: PPUSH
34949: LD_VAR 0 3
34953: PPUSH
34954: LD_VAR 0 5
34958: PPUSH
34959: CALL_OW 1
34963: ST_TO_ADDR
// result := list ;
34964: LD_ADDR_VAR 0 4
34968: PUSH
34969: LD_VAR 0 1
34973: ST_TO_ADDR
// end ;
34974: LD_VAR 0 4
34978: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34979: LD_INT 0
34981: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34982: LD_ADDR_VAR 0 5
34986: PUSH
34987: LD_VAR 0 1
34991: PPUSH
34992: CALL_OW 250
34996: PPUSH
34997: LD_VAR 0 1
35001: PPUSH
35002: CALL_OW 251
35006: PPUSH
35007: LD_VAR 0 2
35011: PPUSH
35012: LD_VAR 0 3
35016: PPUSH
35017: LD_VAR 0 4
35021: PPUSH
35022: CALL 35032 0 5
35026: ST_TO_ADDR
// end ;
35027: LD_VAR 0 5
35031: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35032: LD_INT 0
35034: PPUSH
35035: PPUSH
35036: PPUSH
35037: PPUSH
// if not list then
35038: LD_VAR 0 3
35042: NOT
35043: IFFALSE 35047
// exit ;
35045: GO 35435
// result := [ ] ;
35047: LD_ADDR_VAR 0 6
35051: PUSH
35052: EMPTY
35053: ST_TO_ADDR
// for i in list do
35054: LD_ADDR_VAR 0 7
35058: PUSH
35059: LD_VAR 0 3
35063: PUSH
35064: FOR_IN
35065: IFFALSE 35267
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35067: LD_ADDR_VAR 0 9
35071: PUSH
35072: LD_VAR 0 7
35076: PPUSH
35077: LD_VAR 0 1
35081: PPUSH
35082: LD_VAR 0 2
35086: PPUSH
35087: CALL_OW 297
35091: ST_TO_ADDR
// if not result then
35092: LD_VAR 0 6
35096: NOT
35097: IFFALSE 35123
// result := [ [ i , tmp ] ] else
35099: LD_ADDR_VAR 0 6
35103: PUSH
35104: LD_VAR 0 7
35108: PUSH
35109: LD_VAR 0 9
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: EMPTY
35119: LIST
35120: ST_TO_ADDR
35121: GO 35265
// begin if result [ result ] [ 2 ] < tmp then
35123: LD_VAR 0 6
35127: PUSH
35128: LD_VAR 0 6
35132: ARRAY
35133: PUSH
35134: LD_INT 2
35136: ARRAY
35137: PUSH
35138: LD_VAR 0 9
35142: LESS
35143: IFFALSE 35185
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35145: LD_ADDR_VAR 0 6
35149: PUSH
35150: LD_VAR 0 6
35154: PPUSH
35155: LD_VAR 0 6
35159: PUSH
35160: LD_INT 1
35162: PLUS
35163: PPUSH
35164: LD_VAR 0 7
35168: PUSH
35169: LD_VAR 0 9
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PPUSH
35178: CALL_OW 2
35182: ST_TO_ADDR
35183: GO 35265
// for j = 1 to result do
35185: LD_ADDR_VAR 0 8
35189: PUSH
35190: DOUBLE
35191: LD_INT 1
35193: DEC
35194: ST_TO_ADDR
35195: LD_VAR 0 6
35199: PUSH
35200: FOR_TO
35201: IFFALSE 35263
// begin if tmp < result [ j ] [ 2 ] then
35203: LD_VAR 0 9
35207: PUSH
35208: LD_VAR 0 6
35212: PUSH
35213: LD_VAR 0 8
35217: ARRAY
35218: PUSH
35219: LD_INT 2
35221: ARRAY
35222: LESS
35223: IFFALSE 35261
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35225: LD_ADDR_VAR 0 6
35229: PUSH
35230: LD_VAR 0 6
35234: PPUSH
35235: LD_VAR 0 8
35239: PPUSH
35240: LD_VAR 0 7
35244: PUSH
35245: LD_VAR 0 9
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PPUSH
35254: CALL_OW 2
35258: ST_TO_ADDR
// break ;
35259: GO 35263
// end ; end ;
35261: GO 35200
35263: POP
35264: POP
// end ; end ;
35265: GO 35064
35267: POP
35268: POP
// if result and not asc then
35269: LD_VAR 0 6
35273: PUSH
35274: LD_VAR 0 4
35278: NOT
35279: AND
35280: IFFALSE 35355
// begin tmp := result ;
35282: LD_ADDR_VAR 0 9
35286: PUSH
35287: LD_VAR 0 6
35291: ST_TO_ADDR
// for i = tmp downto 1 do
35292: LD_ADDR_VAR 0 7
35296: PUSH
35297: DOUBLE
35298: LD_VAR 0 9
35302: INC
35303: ST_TO_ADDR
35304: LD_INT 1
35306: PUSH
35307: FOR_DOWNTO
35308: IFFALSE 35353
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35310: LD_ADDR_VAR 0 6
35314: PUSH
35315: LD_VAR 0 6
35319: PPUSH
35320: LD_VAR 0 9
35324: PUSH
35325: LD_VAR 0 7
35329: MINUS
35330: PUSH
35331: LD_INT 1
35333: PLUS
35334: PPUSH
35335: LD_VAR 0 9
35339: PUSH
35340: LD_VAR 0 7
35344: ARRAY
35345: PPUSH
35346: CALL_OW 1
35350: ST_TO_ADDR
35351: GO 35307
35353: POP
35354: POP
// end ; tmp := [ ] ;
35355: LD_ADDR_VAR 0 9
35359: PUSH
35360: EMPTY
35361: ST_TO_ADDR
// if mode then
35362: LD_VAR 0 5
35366: IFFALSE 35435
// begin for i = 1 to result do
35368: LD_ADDR_VAR 0 7
35372: PUSH
35373: DOUBLE
35374: LD_INT 1
35376: DEC
35377: ST_TO_ADDR
35378: LD_VAR 0 6
35382: PUSH
35383: FOR_TO
35384: IFFALSE 35423
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35386: LD_ADDR_VAR 0 9
35390: PUSH
35391: LD_VAR 0 9
35395: PPUSH
35396: LD_VAR 0 7
35400: PPUSH
35401: LD_VAR 0 6
35405: PUSH
35406: LD_VAR 0 7
35410: ARRAY
35411: PUSH
35412: LD_INT 1
35414: ARRAY
35415: PPUSH
35416: CALL_OW 1
35420: ST_TO_ADDR
35421: GO 35383
35423: POP
35424: POP
// result := tmp ;
35425: LD_ADDR_VAR 0 6
35429: PUSH
35430: LD_VAR 0 9
35434: ST_TO_ADDR
// end ; end ;
35435: LD_VAR 0 6
35439: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35440: LD_INT 0
35442: PPUSH
35443: PPUSH
35444: PPUSH
35445: PPUSH
35446: PPUSH
35447: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35448: LD_ADDR_VAR 0 5
35452: PUSH
35453: LD_INT 0
35455: PUSH
35456: LD_INT 0
35458: PUSH
35459: LD_INT 0
35461: PUSH
35462: EMPTY
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: LIST
35468: LIST
35469: ST_TO_ADDR
// if not x or not y then
35470: LD_VAR 0 2
35474: NOT
35475: PUSH
35476: LD_VAR 0 3
35480: NOT
35481: OR
35482: IFFALSE 35486
// exit ;
35484: GO 37136
// if not range then
35486: LD_VAR 0 4
35490: NOT
35491: IFFALSE 35501
// range := 10 ;
35493: LD_ADDR_VAR 0 4
35497: PUSH
35498: LD_INT 10
35500: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35501: LD_ADDR_VAR 0 8
35505: PUSH
35506: LD_INT 81
35508: PUSH
35509: LD_VAR 0 1
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: LD_INT 92
35520: PUSH
35521: LD_VAR 0 2
35525: PUSH
35526: LD_VAR 0 3
35530: PUSH
35531: LD_VAR 0 4
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 3
35544: PUSH
35545: LD_INT 21
35547: PUSH
35548: LD_INT 3
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: LIST
35563: PPUSH
35564: CALL_OW 69
35568: ST_TO_ADDR
// if not tmp then
35569: LD_VAR 0 8
35573: NOT
35574: IFFALSE 35578
// exit ;
35576: GO 37136
// for i in tmp do
35578: LD_ADDR_VAR 0 6
35582: PUSH
35583: LD_VAR 0 8
35587: PUSH
35588: FOR_IN
35589: IFFALSE 37111
// begin points := [ 0 , 0 , 0 ] ;
35591: LD_ADDR_VAR 0 9
35595: PUSH
35596: LD_INT 0
35598: PUSH
35599: LD_INT 0
35601: PUSH
35602: LD_INT 0
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: LIST
35609: ST_TO_ADDR
// bpoints := 1 ;
35610: LD_ADDR_VAR 0 10
35614: PUSH
35615: LD_INT 1
35617: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35618: LD_VAR 0 6
35622: PPUSH
35623: CALL_OW 247
35627: PUSH
35628: LD_INT 1
35630: DOUBLE
35631: EQUAL
35632: IFTRUE 35636
35634: GO 36214
35636: POP
// begin if GetClass ( i ) = 1 then
35637: LD_VAR 0 6
35641: PPUSH
35642: CALL_OW 257
35646: PUSH
35647: LD_INT 1
35649: EQUAL
35650: IFFALSE 35671
// points := [ 10 , 5 , 3 ] ;
35652: LD_ADDR_VAR 0 9
35656: PUSH
35657: LD_INT 10
35659: PUSH
35660: LD_INT 5
35662: PUSH
35663: LD_INT 3
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: LIST
35670: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35671: LD_VAR 0 6
35675: PPUSH
35676: CALL_OW 257
35680: PUSH
35681: LD_INT 2
35683: PUSH
35684: LD_INT 3
35686: PUSH
35687: LD_INT 4
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: LIST
35694: IN
35695: IFFALSE 35716
// points := [ 3 , 2 , 1 ] ;
35697: LD_ADDR_VAR 0 9
35701: PUSH
35702: LD_INT 3
35704: PUSH
35705: LD_INT 2
35707: PUSH
35708: LD_INT 1
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: LIST
35715: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35716: LD_VAR 0 6
35720: PPUSH
35721: CALL_OW 257
35725: PUSH
35726: LD_INT 5
35728: EQUAL
35729: IFFALSE 35750
// points := [ 130 , 5 , 2 ] ;
35731: LD_ADDR_VAR 0 9
35735: PUSH
35736: LD_INT 130
35738: PUSH
35739: LD_INT 5
35741: PUSH
35742: LD_INT 2
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: LIST
35749: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35750: LD_VAR 0 6
35754: PPUSH
35755: CALL_OW 257
35759: PUSH
35760: LD_INT 8
35762: EQUAL
35763: IFFALSE 35784
// points := [ 35 , 35 , 30 ] ;
35765: LD_ADDR_VAR 0 9
35769: PUSH
35770: LD_INT 35
35772: PUSH
35773: LD_INT 35
35775: PUSH
35776: LD_INT 30
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: LIST
35783: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35784: LD_VAR 0 6
35788: PPUSH
35789: CALL_OW 257
35793: PUSH
35794: LD_INT 9
35796: EQUAL
35797: IFFALSE 35818
// points := [ 20 , 55 , 40 ] ;
35799: LD_ADDR_VAR 0 9
35803: PUSH
35804: LD_INT 20
35806: PUSH
35807: LD_INT 55
35809: PUSH
35810: LD_INT 40
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: LIST
35817: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35818: LD_VAR 0 6
35822: PPUSH
35823: CALL_OW 257
35827: PUSH
35828: LD_INT 12
35830: PUSH
35831: LD_INT 16
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: IN
35838: IFFALSE 35859
// points := [ 5 , 3 , 2 ] ;
35840: LD_ADDR_VAR 0 9
35844: PUSH
35845: LD_INT 5
35847: PUSH
35848: LD_INT 3
35850: PUSH
35851: LD_INT 2
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: LIST
35858: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35859: LD_VAR 0 6
35863: PPUSH
35864: CALL_OW 257
35868: PUSH
35869: LD_INT 17
35871: EQUAL
35872: IFFALSE 35893
// points := [ 100 , 50 , 75 ] ;
35874: LD_ADDR_VAR 0 9
35878: PUSH
35879: LD_INT 100
35881: PUSH
35882: LD_INT 50
35884: PUSH
35885: LD_INT 75
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: LIST
35892: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35893: LD_VAR 0 6
35897: PPUSH
35898: CALL_OW 257
35902: PUSH
35903: LD_INT 15
35905: EQUAL
35906: IFFALSE 35927
// points := [ 10 , 5 , 3 ] ;
35908: LD_ADDR_VAR 0 9
35912: PUSH
35913: LD_INT 10
35915: PUSH
35916: LD_INT 5
35918: PUSH
35919: LD_INT 3
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: LIST
35926: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35927: LD_VAR 0 6
35931: PPUSH
35932: CALL_OW 257
35936: PUSH
35937: LD_INT 14
35939: EQUAL
35940: IFFALSE 35961
// points := [ 10 , 0 , 0 ] ;
35942: LD_ADDR_VAR 0 9
35946: PUSH
35947: LD_INT 10
35949: PUSH
35950: LD_INT 0
35952: PUSH
35953: LD_INT 0
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: LIST
35960: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35961: LD_VAR 0 6
35965: PPUSH
35966: CALL_OW 257
35970: PUSH
35971: LD_INT 11
35973: EQUAL
35974: IFFALSE 35995
// points := [ 30 , 10 , 5 ] ;
35976: LD_ADDR_VAR 0 9
35980: PUSH
35981: LD_INT 30
35983: PUSH
35984: LD_INT 10
35986: PUSH
35987: LD_INT 5
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: LIST
35994: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35995: LD_VAR 0 1
35999: PPUSH
36000: LD_INT 5
36002: PPUSH
36003: CALL_OW 321
36007: PUSH
36008: LD_INT 2
36010: EQUAL
36011: IFFALSE 36028
// bpoints := bpoints * 1.8 ;
36013: LD_ADDR_VAR 0 10
36017: PUSH
36018: LD_VAR 0 10
36022: PUSH
36023: LD_REAL  1.80000000000000E+0000
36026: MUL
36027: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36028: LD_VAR 0 6
36032: PPUSH
36033: CALL_OW 257
36037: PUSH
36038: LD_INT 1
36040: PUSH
36041: LD_INT 2
36043: PUSH
36044: LD_INT 3
36046: PUSH
36047: LD_INT 4
36049: PUSH
36050: EMPTY
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: IN
36056: PUSH
36057: LD_VAR 0 1
36061: PPUSH
36062: LD_INT 51
36064: PPUSH
36065: CALL_OW 321
36069: PUSH
36070: LD_INT 2
36072: EQUAL
36073: AND
36074: IFFALSE 36091
// bpoints := bpoints * 1.2 ;
36076: LD_ADDR_VAR 0 10
36080: PUSH
36081: LD_VAR 0 10
36085: PUSH
36086: LD_REAL  1.20000000000000E+0000
36089: MUL
36090: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36091: LD_VAR 0 6
36095: PPUSH
36096: CALL_OW 257
36100: PUSH
36101: LD_INT 5
36103: PUSH
36104: LD_INT 7
36106: PUSH
36107: LD_INT 9
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: LIST
36114: IN
36115: PUSH
36116: LD_VAR 0 1
36120: PPUSH
36121: LD_INT 52
36123: PPUSH
36124: CALL_OW 321
36128: PUSH
36129: LD_INT 2
36131: EQUAL
36132: AND
36133: IFFALSE 36150
// bpoints := bpoints * 1.5 ;
36135: LD_ADDR_VAR 0 10
36139: PUSH
36140: LD_VAR 0 10
36144: PUSH
36145: LD_REAL  1.50000000000000E+0000
36148: MUL
36149: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36150: LD_VAR 0 1
36154: PPUSH
36155: LD_INT 66
36157: PPUSH
36158: CALL_OW 321
36162: PUSH
36163: LD_INT 2
36165: EQUAL
36166: IFFALSE 36183
// bpoints := bpoints * 1.1 ;
36168: LD_ADDR_VAR 0 10
36172: PUSH
36173: LD_VAR 0 10
36177: PUSH
36178: LD_REAL  1.10000000000000E+0000
36181: MUL
36182: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36183: LD_ADDR_VAR 0 10
36187: PUSH
36188: LD_VAR 0 10
36192: PUSH
36193: LD_VAR 0 6
36197: PPUSH
36198: LD_INT 1
36200: PPUSH
36201: CALL_OW 259
36205: PUSH
36206: LD_REAL  1.15000000000000E+0000
36209: MUL
36210: MUL
36211: ST_TO_ADDR
// end ; unit_vehicle :
36212: GO 37040
36214: LD_INT 2
36216: DOUBLE
36217: EQUAL
36218: IFTRUE 36222
36220: GO 37028
36222: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36223: LD_VAR 0 6
36227: PPUSH
36228: CALL_OW 264
36232: PUSH
36233: LD_INT 2
36235: PUSH
36236: LD_INT 42
36238: PUSH
36239: LD_INT 24
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: LIST
36246: IN
36247: IFFALSE 36268
// points := [ 25 , 5 , 3 ] ;
36249: LD_ADDR_VAR 0 9
36253: PUSH
36254: LD_INT 25
36256: PUSH
36257: LD_INT 5
36259: PUSH
36260: LD_INT 3
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: LIST
36267: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36268: LD_VAR 0 6
36272: PPUSH
36273: CALL_OW 264
36277: PUSH
36278: LD_INT 4
36280: PUSH
36281: LD_INT 43
36283: PUSH
36284: LD_INT 25
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: LIST
36291: IN
36292: IFFALSE 36313
// points := [ 40 , 15 , 5 ] ;
36294: LD_ADDR_VAR 0 9
36298: PUSH
36299: LD_INT 40
36301: PUSH
36302: LD_INT 15
36304: PUSH
36305: LD_INT 5
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: LIST
36312: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36313: LD_VAR 0 6
36317: PPUSH
36318: CALL_OW 264
36322: PUSH
36323: LD_INT 3
36325: PUSH
36326: LD_INT 23
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: IN
36333: IFFALSE 36354
// points := [ 7 , 25 , 8 ] ;
36335: LD_ADDR_VAR 0 9
36339: PUSH
36340: LD_INT 7
36342: PUSH
36343: LD_INT 25
36345: PUSH
36346: LD_INT 8
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: LIST
36353: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36354: LD_VAR 0 6
36358: PPUSH
36359: CALL_OW 264
36363: PUSH
36364: LD_INT 5
36366: PUSH
36367: LD_INT 27
36369: PUSH
36370: LD_INT 44
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: LIST
36377: IN
36378: IFFALSE 36399
// points := [ 14 , 50 , 16 ] ;
36380: LD_ADDR_VAR 0 9
36384: PUSH
36385: LD_INT 14
36387: PUSH
36388: LD_INT 50
36390: PUSH
36391: LD_INT 16
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: LIST
36398: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36399: LD_VAR 0 6
36403: PPUSH
36404: CALL_OW 264
36408: PUSH
36409: LD_INT 6
36411: PUSH
36412: LD_INT 46
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: IN
36419: IFFALSE 36440
// points := [ 32 , 120 , 70 ] ;
36421: LD_ADDR_VAR 0 9
36425: PUSH
36426: LD_INT 32
36428: PUSH
36429: LD_INT 120
36431: PUSH
36432: LD_INT 70
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: LIST
36439: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36440: LD_VAR 0 6
36444: PPUSH
36445: CALL_OW 264
36449: PUSH
36450: LD_INT 7
36452: PUSH
36453: LD_INT 28
36455: PUSH
36456: LD_INT 45
36458: PUSH
36459: LD_INT 92
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: IN
36468: IFFALSE 36489
// points := [ 35 , 20 , 45 ] ;
36470: LD_ADDR_VAR 0 9
36474: PUSH
36475: LD_INT 35
36477: PUSH
36478: LD_INT 20
36480: PUSH
36481: LD_INT 45
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: LIST
36488: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36489: LD_VAR 0 6
36493: PPUSH
36494: CALL_OW 264
36498: PUSH
36499: LD_INT 47
36501: PUSH
36502: EMPTY
36503: LIST
36504: IN
36505: IFFALSE 36526
// points := [ 67 , 45 , 75 ] ;
36507: LD_ADDR_VAR 0 9
36511: PUSH
36512: LD_INT 67
36514: PUSH
36515: LD_INT 45
36517: PUSH
36518: LD_INT 75
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: LIST
36525: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36526: LD_VAR 0 6
36530: PPUSH
36531: CALL_OW 264
36535: PUSH
36536: LD_INT 26
36538: PUSH
36539: EMPTY
36540: LIST
36541: IN
36542: IFFALSE 36563
// points := [ 120 , 30 , 80 ] ;
36544: LD_ADDR_VAR 0 9
36548: PUSH
36549: LD_INT 120
36551: PUSH
36552: LD_INT 30
36554: PUSH
36555: LD_INT 80
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: LIST
36562: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36563: LD_VAR 0 6
36567: PPUSH
36568: CALL_OW 264
36572: PUSH
36573: LD_INT 22
36575: PUSH
36576: EMPTY
36577: LIST
36578: IN
36579: IFFALSE 36600
// points := [ 40 , 1 , 1 ] ;
36581: LD_ADDR_VAR 0 9
36585: PUSH
36586: LD_INT 40
36588: PUSH
36589: LD_INT 1
36591: PUSH
36592: LD_INT 1
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: LIST
36599: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36600: LD_VAR 0 6
36604: PPUSH
36605: CALL_OW 264
36609: PUSH
36610: LD_INT 29
36612: PUSH
36613: EMPTY
36614: LIST
36615: IN
36616: IFFALSE 36637
// points := [ 70 , 200 , 400 ] ;
36618: LD_ADDR_VAR 0 9
36622: PUSH
36623: LD_INT 70
36625: PUSH
36626: LD_INT 200
36628: PUSH
36629: LD_INT 400
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: LIST
36636: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36637: LD_VAR 0 6
36641: PPUSH
36642: CALL_OW 264
36646: PUSH
36647: LD_INT 14
36649: PUSH
36650: LD_INT 53
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: IN
36657: IFFALSE 36678
// points := [ 40 , 10 , 20 ] ;
36659: LD_ADDR_VAR 0 9
36663: PUSH
36664: LD_INT 40
36666: PUSH
36667: LD_INT 10
36669: PUSH
36670: LD_INT 20
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: LIST
36677: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36678: LD_VAR 0 6
36682: PPUSH
36683: CALL_OW 264
36687: PUSH
36688: LD_INT 9
36690: PUSH
36691: EMPTY
36692: LIST
36693: IN
36694: IFFALSE 36715
// points := [ 5 , 70 , 20 ] ;
36696: LD_ADDR_VAR 0 9
36700: PUSH
36701: LD_INT 5
36703: PUSH
36704: LD_INT 70
36706: PUSH
36707: LD_INT 20
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: LIST
36714: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36715: LD_VAR 0 6
36719: PPUSH
36720: CALL_OW 264
36724: PUSH
36725: LD_INT 10
36727: PUSH
36728: EMPTY
36729: LIST
36730: IN
36731: IFFALSE 36752
// points := [ 35 , 110 , 70 ] ;
36733: LD_ADDR_VAR 0 9
36737: PUSH
36738: LD_INT 35
36740: PUSH
36741: LD_INT 110
36743: PUSH
36744: LD_INT 70
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: LIST
36751: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36752: LD_VAR 0 6
36756: PPUSH
36757: CALL_OW 265
36761: PUSH
36762: LD_INT 25
36764: EQUAL
36765: IFFALSE 36786
// points := [ 80 , 65 , 100 ] ;
36767: LD_ADDR_VAR 0 9
36771: PUSH
36772: LD_INT 80
36774: PUSH
36775: LD_INT 65
36777: PUSH
36778: LD_INT 100
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: LIST
36785: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36786: LD_VAR 0 6
36790: PPUSH
36791: CALL_OW 263
36795: PUSH
36796: LD_INT 1
36798: EQUAL
36799: IFFALSE 36834
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36801: LD_ADDR_VAR 0 10
36805: PUSH
36806: LD_VAR 0 10
36810: PUSH
36811: LD_VAR 0 6
36815: PPUSH
36816: CALL_OW 311
36820: PPUSH
36821: LD_INT 3
36823: PPUSH
36824: CALL_OW 259
36828: PUSH
36829: LD_INT 4
36831: MUL
36832: MUL
36833: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36834: LD_VAR 0 6
36838: PPUSH
36839: CALL_OW 263
36843: PUSH
36844: LD_INT 2
36846: EQUAL
36847: IFFALSE 36898
// begin j := IsControledBy ( i ) ;
36849: LD_ADDR_VAR 0 7
36853: PUSH
36854: LD_VAR 0 6
36858: PPUSH
36859: CALL_OW 312
36863: ST_TO_ADDR
// if j then
36864: LD_VAR 0 7
36868: IFFALSE 36898
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36870: LD_ADDR_VAR 0 10
36874: PUSH
36875: LD_VAR 0 10
36879: PUSH
36880: LD_VAR 0 7
36884: PPUSH
36885: LD_INT 3
36887: PPUSH
36888: CALL_OW 259
36892: PUSH
36893: LD_INT 3
36895: MUL
36896: MUL
36897: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36898: LD_VAR 0 6
36902: PPUSH
36903: CALL_OW 264
36907: PUSH
36908: LD_INT 5
36910: PUSH
36911: LD_INT 6
36913: PUSH
36914: LD_INT 46
36916: PUSH
36917: LD_INT 44
36919: PUSH
36920: LD_INT 47
36922: PUSH
36923: LD_INT 45
36925: PUSH
36926: LD_INT 28
36928: PUSH
36929: LD_INT 7
36931: PUSH
36932: LD_INT 27
36934: PUSH
36935: LD_INT 29
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: IN
36950: PUSH
36951: LD_VAR 0 1
36955: PPUSH
36956: LD_INT 52
36958: PPUSH
36959: CALL_OW 321
36963: PUSH
36964: LD_INT 2
36966: EQUAL
36967: AND
36968: IFFALSE 36985
// bpoints := bpoints * 1.2 ;
36970: LD_ADDR_VAR 0 10
36974: PUSH
36975: LD_VAR 0 10
36979: PUSH
36980: LD_REAL  1.20000000000000E+0000
36983: MUL
36984: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36985: LD_VAR 0 6
36989: PPUSH
36990: CALL_OW 264
36994: PUSH
36995: LD_INT 6
36997: PUSH
36998: LD_INT 46
37000: PUSH
37001: LD_INT 47
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: LIST
37008: IN
37009: IFFALSE 37026
// bpoints := bpoints * 1.2 ;
37011: LD_ADDR_VAR 0 10
37015: PUSH
37016: LD_VAR 0 10
37020: PUSH
37021: LD_REAL  1.20000000000000E+0000
37024: MUL
37025: ST_TO_ADDR
// end ; unit_building :
37026: GO 37040
37028: LD_INT 3
37030: DOUBLE
37031: EQUAL
37032: IFTRUE 37036
37034: GO 37039
37036: POP
// ; end ;
37037: GO 37040
37039: POP
// for j = 1 to 3 do
37040: LD_ADDR_VAR 0 7
37044: PUSH
37045: DOUBLE
37046: LD_INT 1
37048: DEC
37049: ST_TO_ADDR
37050: LD_INT 3
37052: PUSH
37053: FOR_TO
37054: IFFALSE 37107
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37056: LD_ADDR_VAR 0 5
37060: PUSH
37061: LD_VAR 0 5
37065: PPUSH
37066: LD_VAR 0 7
37070: PPUSH
37071: LD_VAR 0 5
37075: PUSH
37076: LD_VAR 0 7
37080: ARRAY
37081: PUSH
37082: LD_VAR 0 9
37086: PUSH
37087: LD_VAR 0 7
37091: ARRAY
37092: PUSH
37093: LD_VAR 0 10
37097: MUL
37098: PLUS
37099: PPUSH
37100: CALL_OW 1
37104: ST_TO_ADDR
37105: GO 37053
37107: POP
37108: POP
// end ;
37109: GO 35588
37111: POP
37112: POP
// result := Replace ( result , 4 , tmp ) ;
37113: LD_ADDR_VAR 0 5
37117: PUSH
37118: LD_VAR 0 5
37122: PPUSH
37123: LD_INT 4
37125: PPUSH
37126: LD_VAR 0 8
37130: PPUSH
37131: CALL_OW 1
37135: ST_TO_ADDR
// end ;
37136: LD_VAR 0 5
37140: RET
// export function DangerAtRange ( unit , range ) ; begin
37141: LD_INT 0
37143: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37144: LD_ADDR_VAR 0 3
37148: PUSH
37149: LD_VAR 0 1
37153: PPUSH
37154: CALL_OW 255
37158: PPUSH
37159: LD_VAR 0 1
37163: PPUSH
37164: CALL_OW 250
37168: PPUSH
37169: LD_VAR 0 1
37173: PPUSH
37174: CALL_OW 251
37178: PPUSH
37179: LD_VAR 0 2
37183: PPUSH
37184: CALL 35440 0 4
37188: ST_TO_ADDR
// end ;
37189: LD_VAR 0 3
37193: RET
// export function DangerInArea ( side , area ) ; begin
37194: LD_INT 0
37196: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37197: LD_ADDR_VAR 0 3
37201: PUSH
37202: LD_VAR 0 2
37206: PPUSH
37207: LD_INT 81
37209: PUSH
37210: LD_VAR 0 1
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PPUSH
37219: CALL_OW 70
37223: ST_TO_ADDR
// end ;
37224: LD_VAR 0 3
37228: RET
// export function IsExtension ( b ) ; begin
37229: LD_INT 0
37231: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37232: LD_ADDR_VAR 0 2
37236: PUSH
37237: LD_VAR 0 1
37241: PUSH
37242: LD_INT 23
37244: PUSH
37245: LD_INT 20
37247: PUSH
37248: LD_INT 22
37250: PUSH
37251: LD_INT 17
37253: PUSH
37254: LD_INT 24
37256: PUSH
37257: LD_INT 21
37259: PUSH
37260: LD_INT 19
37262: PUSH
37263: LD_INT 16
37265: PUSH
37266: LD_INT 25
37268: PUSH
37269: LD_INT 18
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: IN
37284: ST_TO_ADDR
// end ;
37285: LD_VAR 0 2
37289: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37290: LD_INT 0
37292: PPUSH
37293: PPUSH
37294: PPUSH
// result := [ ] ;
37295: LD_ADDR_VAR 0 4
37299: PUSH
37300: EMPTY
37301: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37302: LD_ADDR_VAR 0 5
37306: PUSH
37307: LD_VAR 0 2
37311: PPUSH
37312: LD_INT 21
37314: PUSH
37315: LD_INT 3
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PPUSH
37322: CALL_OW 70
37326: ST_TO_ADDR
// if not tmp then
37327: LD_VAR 0 5
37331: NOT
37332: IFFALSE 37336
// exit ;
37334: GO 37400
// if checkLink then
37336: LD_VAR 0 3
37340: IFFALSE 37390
// begin for i in tmp do
37342: LD_ADDR_VAR 0 6
37346: PUSH
37347: LD_VAR 0 5
37351: PUSH
37352: FOR_IN
37353: IFFALSE 37388
// if GetBase ( i ) <> base then
37355: LD_VAR 0 6
37359: PPUSH
37360: CALL_OW 274
37364: PUSH
37365: LD_VAR 0 1
37369: NONEQUAL
37370: IFFALSE 37386
// ComLinkToBase ( base , i ) ;
37372: LD_VAR 0 1
37376: PPUSH
37377: LD_VAR 0 6
37381: PPUSH
37382: CALL_OW 169
37386: GO 37352
37388: POP
37389: POP
// end ; result := tmp ;
37390: LD_ADDR_VAR 0 4
37394: PUSH
37395: LD_VAR 0 5
37399: ST_TO_ADDR
// end ;
37400: LD_VAR 0 4
37404: RET
// export function ComComplete ( units , b ) ; var i ; begin
37405: LD_INT 0
37407: PPUSH
37408: PPUSH
// if not units then
37409: LD_VAR 0 1
37413: NOT
37414: IFFALSE 37418
// exit ;
37416: GO 37508
// for i in units do
37418: LD_ADDR_VAR 0 4
37422: PUSH
37423: LD_VAR 0 1
37427: PUSH
37428: FOR_IN
37429: IFFALSE 37506
// if BuildingStatus ( b ) = bs_build then
37431: LD_VAR 0 2
37435: PPUSH
37436: CALL_OW 461
37440: PUSH
37441: LD_INT 1
37443: EQUAL
37444: IFFALSE 37504
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37446: LD_VAR 0 4
37450: PPUSH
37451: LD_STRING h
37453: PUSH
37454: LD_VAR 0 2
37458: PPUSH
37459: CALL_OW 250
37463: PUSH
37464: LD_VAR 0 2
37468: PPUSH
37469: CALL_OW 251
37473: PUSH
37474: LD_VAR 0 2
37478: PUSH
37479: LD_INT 0
37481: PUSH
37482: LD_INT 0
37484: PUSH
37485: LD_INT 0
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: PUSH
37497: EMPTY
37498: LIST
37499: PPUSH
37500: CALL_OW 446
37504: GO 37428
37506: POP
37507: POP
// end ;
37508: LD_VAR 0 3
37512: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37513: LD_INT 0
37515: PPUSH
37516: PPUSH
37517: PPUSH
37518: PPUSH
37519: PPUSH
37520: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37521: LD_VAR 0 1
37525: NOT
37526: PUSH
37527: LD_VAR 0 1
37531: PPUSH
37532: CALL_OW 263
37536: PUSH
37537: LD_INT 2
37539: NONEQUAL
37540: OR
37541: IFFALSE 37545
// exit ;
37543: GO 37861
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37545: LD_ADDR_VAR 0 6
37549: PUSH
37550: LD_INT 22
37552: PUSH
37553: LD_VAR 0 1
37557: PPUSH
37558: CALL_OW 255
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: LD_INT 2
37569: PUSH
37570: LD_INT 30
37572: PUSH
37573: LD_INT 36
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: LD_INT 34
37582: PUSH
37583: LD_INT 31
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: LIST
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PPUSH
37599: CALL_OW 69
37603: ST_TO_ADDR
// if not tmp then
37604: LD_VAR 0 6
37608: NOT
37609: IFFALSE 37613
// exit ;
37611: GO 37861
// result := [ ] ;
37613: LD_ADDR_VAR 0 2
37617: PUSH
37618: EMPTY
37619: ST_TO_ADDR
// for i in tmp do
37620: LD_ADDR_VAR 0 3
37624: PUSH
37625: LD_VAR 0 6
37629: PUSH
37630: FOR_IN
37631: IFFALSE 37702
// begin t := UnitsInside ( i ) ;
37633: LD_ADDR_VAR 0 4
37637: PUSH
37638: LD_VAR 0 3
37642: PPUSH
37643: CALL_OW 313
37647: ST_TO_ADDR
// if t then
37648: LD_VAR 0 4
37652: IFFALSE 37700
// for j in t do
37654: LD_ADDR_VAR 0 7
37658: PUSH
37659: LD_VAR 0 4
37663: PUSH
37664: FOR_IN
37665: IFFALSE 37698
// result := Replace ( result , result + 1 , j ) ;
37667: LD_ADDR_VAR 0 2
37671: PUSH
37672: LD_VAR 0 2
37676: PPUSH
37677: LD_VAR 0 2
37681: PUSH
37682: LD_INT 1
37684: PLUS
37685: PPUSH
37686: LD_VAR 0 7
37690: PPUSH
37691: CALL_OW 1
37695: ST_TO_ADDR
37696: GO 37664
37698: POP
37699: POP
// end ;
37700: GO 37630
37702: POP
37703: POP
// if not result then
37704: LD_VAR 0 2
37708: NOT
37709: IFFALSE 37713
// exit ;
37711: GO 37861
// mech := result [ 1 ] ;
37713: LD_ADDR_VAR 0 5
37717: PUSH
37718: LD_VAR 0 2
37722: PUSH
37723: LD_INT 1
37725: ARRAY
37726: ST_TO_ADDR
// if result > 1 then
37727: LD_VAR 0 2
37731: PUSH
37732: LD_INT 1
37734: GREATER
37735: IFFALSE 37847
// begin for i = 2 to result do
37737: LD_ADDR_VAR 0 3
37741: PUSH
37742: DOUBLE
37743: LD_INT 2
37745: DEC
37746: ST_TO_ADDR
37747: LD_VAR 0 2
37751: PUSH
37752: FOR_TO
37753: IFFALSE 37845
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37755: LD_ADDR_VAR 0 4
37759: PUSH
37760: LD_VAR 0 2
37764: PUSH
37765: LD_VAR 0 3
37769: ARRAY
37770: PPUSH
37771: LD_INT 3
37773: PPUSH
37774: CALL_OW 259
37778: PUSH
37779: LD_VAR 0 2
37783: PUSH
37784: LD_VAR 0 3
37788: ARRAY
37789: PPUSH
37790: CALL_OW 432
37794: MINUS
37795: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37796: LD_VAR 0 4
37800: PUSH
37801: LD_VAR 0 5
37805: PPUSH
37806: LD_INT 3
37808: PPUSH
37809: CALL_OW 259
37813: PUSH
37814: LD_VAR 0 5
37818: PPUSH
37819: CALL_OW 432
37823: MINUS
37824: GREATEREQUAL
37825: IFFALSE 37843
// mech := result [ i ] ;
37827: LD_ADDR_VAR 0 5
37831: PUSH
37832: LD_VAR 0 2
37836: PUSH
37837: LD_VAR 0 3
37841: ARRAY
37842: ST_TO_ADDR
// end ;
37843: GO 37752
37845: POP
37846: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37847: LD_VAR 0 1
37851: PPUSH
37852: LD_VAR 0 5
37856: PPUSH
37857: CALL_OW 135
// end ;
37861: LD_VAR 0 2
37865: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37866: LD_INT 0
37868: PPUSH
37869: PPUSH
37870: PPUSH
37871: PPUSH
37872: PPUSH
37873: PPUSH
37874: PPUSH
37875: PPUSH
37876: PPUSH
37877: PPUSH
37878: PPUSH
37879: PPUSH
37880: PPUSH
// result := [ ] ;
37881: LD_ADDR_VAR 0 7
37885: PUSH
37886: EMPTY
37887: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37888: LD_VAR 0 1
37892: PPUSH
37893: CALL_OW 266
37897: PUSH
37898: LD_INT 0
37900: PUSH
37901: LD_INT 1
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: IN
37908: NOT
37909: IFFALSE 37913
// exit ;
37911: GO 39547
// if name then
37913: LD_VAR 0 3
37917: IFFALSE 37933
// SetBName ( base_dep , name ) ;
37919: LD_VAR 0 1
37923: PPUSH
37924: LD_VAR 0 3
37928: PPUSH
37929: CALL_OW 500
// base := GetBase ( base_dep ) ;
37933: LD_ADDR_VAR 0 15
37937: PUSH
37938: LD_VAR 0 1
37942: PPUSH
37943: CALL_OW 274
37947: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37948: LD_ADDR_VAR 0 16
37952: PUSH
37953: LD_VAR 0 1
37957: PPUSH
37958: CALL_OW 255
37962: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37963: LD_ADDR_VAR 0 17
37967: PUSH
37968: LD_VAR 0 1
37972: PPUSH
37973: CALL_OW 248
37977: ST_TO_ADDR
// if sources then
37978: LD_VAR 0 5
37982: IFFALSE 38029
// for i = 1 to 3 do
37984: LD_ADDR_VAR 0 8
37988: PUSH
37989: DOUBLE
37990: LD_INT 1
37992: DEC
37993: ST_TO_ADDR
37994: LD_INT 3
37996: PUSH
37997: FOR_TO
37998: IFFALSE 38027
// AddResourceType ( base , i , sources [ i ] ) ;
38000: LD_VAR 0 15
38004: PPUSH
38005: LD_VAR 0 8
38009: PPUSH
38010: LD_VAR 0 5
38014: PUSH
38015: LD_VAR 0 8
38019: ARRAY
38020: PPUSH
38021: CALL_OW 276
38025: GO 37997
38027: POP
38028: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38029: LD_ADDR_VAR 0 18
38033: PUSH
38034: LD_VAR 0 15
38038: PPUSH
38039: LD_VAR 0 2
38043: PPUSH
38044: LD_INT 1
38046: PPUSH
38047: CALL 37290 0 3
38051: ST_TO_ADDR
// InitHc ;
38052: CALL_OW 19
// InitUc ;
38056: CALL_OW 18
// uc_side := side ;
38060: LD_ADDR_OWVAR 20
38064: PUSH
38065: LD_VAR 0 16
38069: ST_TO_ADDR
// uc_nation := nation ;
38070: LD_ADDR_OWVAR 21
38074: PUSH
38075: LD_VAR 0 17
38079: ST_TO_ADDR
// if buildings then
38080: LD_VAR 0 18
38084: IFFALSE 39406
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38086: LD_ADDR_VAR 0 19
38090: PUSH
38091: LD_VAR 0 18
38095: PPUSH
38096: LD_INT 2
38098: PUSH
38099: LD_INT 30
38101: PUSH
38102: LD_INT 29
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: LD_INT 30
38111: PUSH
38112: LD_INT 30
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: LIST
38123: PPUSH
38124: CALL_OW 72
38128: ST_TO_ADDR
// if tmp then
38129: LD_VAR 0 19
38133: IFFALSE 38181
// for i in tmp do
38135: LD_ADDR_VAR 0 8
38139: PUSH
38140: LD_VAR 0 19
38144: PUSH
38145: FOR_IN
38146: IFFALSE 38179
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38148: LD_VAR 0 8
38152: PPUSH
38153: CALL_OW 250
38157: PPUSH
38158: LD_VAR 0 8
38162: PPUSH
38163: CALL_OW 251
38167: PPUSH
38168: LD_VAR 0 16
38172: PPUSH
38173: CALL_OW 441
38177: GO 38145
38179: POP
38180: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38181: LD_VAR 0 18
38185: PPUSH
38186: LD_INT 2
38188: PUSH
38189: LD_INT 30
38191: PUSH
38192: LD_INT 32
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PUSH
38199: LD_INT 30
38201: PUSH
38202: LD_INT 33
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: LIST
38213: PPUSH
38214: CALL_OW 72
38218: IFFALSE 38306
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38220: LD_ADDR_VAR 0 8
38224: PUSH
38225: LD_VAR 0 18
38229: PPUSH
38230: LD_INT 2
38232: PUSH
38233: LD_INT 30
38235: PUSH
38236: LD_INT 32
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 30
38245: PUSH
38246: LD_INT 33
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: LIST
38257: PPUSH
38258: CALL_OW 72
38262: PUSH
38263: FOR_IN
38264: IFFALSE 38304
// begin if not GetBWeapon ( i ) then
38266: LD_VAR 0 8
38270: PPUSH
38271: CALL_OW 269
38275: NOT
38276: IFFALSE 38302
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38278: LD_VAR 0 8
38282: PPUSH
38283: LD_VAR 0 8
38287: PPUSH
38288: LD_VAR 0 2
38292: PPUSH
38293: CALL 39552 0 2
38297: PPUSH
38298: CALL_OW 431
// end ;
38302: GO 38263
38304: POP
38305: POP
// end ; for i = 1 to personel do
38306: LD_ADDR_VAR 0 8
38310: PUSH
38311: DOUBLE
38312: LD_INT 1
38314: DEC
38315: ST_TO_ADDR
38316: LD_VAR 0 6
38320: PUSH
38321: FOR_TO
38322: IFFALSE 39386
// begin if i > 4 then
38324: LD_VAR 0 8
38328: PUSH
38329: LD_INT 4
38331: GREATER
38332: IFFALSE 38336
// break ;
38334: GO 39386
// case i of 1 :
38336: LD_VAR 0 8
38340: PUSH
38341: LD_INT 1
38343: DOUBLE
38344: EQUAL
38345: IFTRUE 38349
38347: GO 38429
38349: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38350: LD_ADDR_VAR 0 12
38354: PUSH
38355: LD_VAR 0 18
38359: PPUSH
38360: LD_INT 22
38362: PUSH
38363: LD_VAR 0 16
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: PUSH
38372: LD_INT 58
38374: PUSH
38375: EMPTY
38376: LIST
38377: PUSH
38378: LD_INT 2
38380: PUSH
38381: LD_INT 30
38383: PUSH
38384: LD_INT 32
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 30
38393: PUSH
38394: LD_INT 4
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 30
38403: PUSH
38404: LD_INT 5
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: LIST
38421: PPUSH
38422: CALL_OW 72
38426: ST_TO_ADDR
38427: GO 38651
38429: LD_INT 2
38431: DOUBLE
38432: EQUAL
38433: IFTRUE 38437
38435: GO 38499
38437: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38438: LD_ADDR_VAR 0 12
38442: PUSH
38443: LD_VAR 0 18
38447: PPUSH
38448: LD_INT 22
38450: PUSH
38451: LD_VAR 0 16
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 2
38462: PUSH
38463: LD_INT 30
38465: PUSH
38466: LD_INT 0
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 30
38475: PUSH
38476: LD_INT 1
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: LIST
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: PPUSH
38492: CALL_OW 72
38496: ST_TO_ADDR
38497: GO 38651
38499: LD_INT 3
38501: DOUBLE
38502: EQUAL
38503: IFTRUE 38507
38505: GO 38569
38507: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38508: LD_ADDR_VAR 0 12
38512: PUSH
38513: LD_VAR 0 18
38517: PPUSH
38518: LD_INT 22
38520: PUSH
38521: LD_VAR 0 16
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 2
38532: PUSH
38533: LD_INT 30
38535: PUSH
38536: LD_INT 2
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 30
38545: PUSH
38546: LD_INT 3
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: LIST
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: PPUSH
38562: CALL_OW 72
38566: ST_TO_ADDR
38567: GO 38651
38569: LD_INT 4
38571: DOUBLE
38572: EQUAL
38573: IFTRUE 38577
38575: GO 38650
38577: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38578: LD_ADDR_VAR 0 12
38582: PUSH
38583: LD_VAR 0 18
38587: PPUSH
38588: LD_INT 22
38590: PUSH
38591: LD_VAR 0 16
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 2
38602: PUSH
38603: LD_INT 30
38605: PUSH
38606: LD_INT 6
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 30
38615: PUSH
38616: LD_INT 7
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 30
38625: PUSH
38626: LD_INT 8
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PPUSH
38643: CALL_OW 72
38647: ST_TO_ADDR
38648: GO 38651
38650: POP
// if i = 1 then
38651: LD_VAR 0 8
38655: PUSH
38656: LD_INT 1
38658: EQUAL
38659: IFFALSE 38770
// begin tmp := [ ] ;
38661: LD_ADDR_VAR 0 19
38665: PUSH
38666: EMPTY
38667: ST_TO_ADDR
// for j in f do
38668: LD_ADDR_VAR 0 9
38672: PUSH
38673: LD_VAR 0 12
38677: PUSH
38678: FOR_IN
38679: IFFALSE 38752
// if GetBType ( j ) = b_bunker then
38681: LD_VAR 0 9
38685: PPUSH
38686: CALL_OW 266
38690: PUSH
38691: LD_INT 32
38693: EQUAL
38694: IFFALSE 38721
// tmp := Insert ( tmp , 1 , j ) else
38696: LD_ADDR_VAR 0 19
38700: PUSH
38701: LD_VAR 0 19
38705: PPUSH
38706: LD_INT 1
38708: PPUSH
38709: LD_VAR 0 9
38713: PPUSH
38714: CALL_OW 2
38718: ST_TO_ADDR
38719: GO 38750
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38721: LD_ADDR_VAR 0 19
38725: PUSH
38726: LD_VAR 0 19
38730: PPUSH
38731: LD_VAR 0 19
38735: PUSH
38736: LD_INT 1
38738: PLUS
38739: PPUSH
38740: LD_VAR 0 9
38744: PPUSH
38745: CALL_OW 2
38749: ST_TO_ADDR
38750: GO 38678
38752: POP
38753: POP
// if tmp then
38754: LD_VAR 0 19
38758: IFFALSE 38770
// f := tmp ;
38760: LD_ADDR_VAR 0 12
38764: PUSH
38765: LD_VAR 0 19
38769: ST_TO_ADDR
// end ; x := personel [ i ] ;
38770: LD_ADDR_VAR 0 13
38774: PUSH
38775: LD_VAR 0 6
38779: PUSH
38780: LD_VAR 0 8
38784: ARRAY
38785: ST_TO_ADDR
// if x = - 1 then
38786: LD_VAR 0 13
38790: PUSH
38791: LD_INT 1
38793: NEG
38794: EQUAL
38795: IFFALSE 39004
// begin for j in f do
38797: LD_ADDR_VAR 0 9
38801: PUSH
38802: LD_VAR 0 12
38806: PUSH
38807: FOR_IN
38808: IFFALSE 39000
// repeat InitHc ;
38810: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38814: LD_VAR 0 9
38818: PPUSH
38819: CALL_OW 266
38823: PUSH
38824: LD_INT 5
38826: EQUAL
38827: IFFALSE 38897
// begin if UnitsInside ( j ) < 3 then
38829: LD_VAR 0 9
38833: PPUSH
38834: CALL_OW 313
38838: PUSH
38839: LD_INT 3
38841: LESS
38842: IFFALSE 38878
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38844: LD_INT 0
38846: PPUSH
38847: LD_INT 5
38849: PUSH
38850: LD_INT 8
38852: PUSH
38853: LD_INT 9
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: LIST
38860: PUSH
38861: LD_VAR 0 17
38865: ARRAY
38866: PPUSH
38867: LD_VAR 0 4
38871: PPUSH
38872: CALL_OW 380
38876: GO 38895
// PrepareHuman ( false , i , skill ) ;
38878: LD_INT 0
38880: PPUSH
38881: LD_VAR 0 8
38885: PPUSH
38886: LD_VAR 0 4
38890: PPUSH
38891: CALL_OW 380
// end else
38895: GO 38914
// PrepareHuman ( false , i , skill ) ;
38897: LD_INT 0
38899: PPUSH
38900: LD_VAR 0 8
38904: PPUSH
38905: LD_VAR 0 4
38909: PPUSH
38910: CALL_OW 380
// un := CreateHuman ;
38914: LD_ADDR_VAR 0 14
38918: PUSH
38919: CALL_OW 44
38923: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38924: LD_ADDR_VAR 0 7
38928: PUSH
38929: LD_VAR 0 7
38933: PPUSH
38934: LD_INT 1
38936: PPUSH
38937: LD_VAR 0 14
38941: PPUSH
38942: CALL_OW 2
38946: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38947: LD_VAR 0 14
38951: PPUSH
38952: LD_VAR 0 9
38956: PPUSH
38957: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38961: LD_VAR 0 9
38965: PPUSH
38966: CALL_OW 313
38970: PUSH
38971: LD_INT 6
38973: EQUAL
38974: PUSH
38975: LD_VAR 0 9
38979: PPUSH
38980: CALL_OW 266
38984: PUSH
38985: LD_INT 32
38987: PUSH
38988: LD_INT 31
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: IN
38995: OR
38996: IFFALSE 38810
38998: GO 38807
39000: POP
39001: POP
// end else
39002: GO 39384
// for j = 1 to x do
39004: LD_ADDR_VAR 0 9
39008: PUSH
39009: DOUBLE
39010: LD_INT 1
39012: DEC
39013: ST_TO_ADDR
39014: LD_VAR 0 13
39018: PUSH
39019: FOR_TO
39020: IFFALSE 39382
// begin InitHc ;
39022: CALL_OW 19
// if not f then
39026: LD_VAR 0 12
39030: NOT
39031: IFFALSE 39120
// begin PrepareHuman ( false , i , skill ) ;
39033: LD_INT 0
39035: PPUSH
39036: LD_VAR 0 8
39040: PPUSH
39041: LD_VAR 0 4
39045: PPUSH
39046: CALL_OW 380
// un := CreateHuman ;
39050: LD_ADDR_VAR 0 14
39054: PUSH
39055: CALL_OW 44
39059: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39060: LD_ADDR_VAR 0 7
39064: PUSH
39065: LD_VAR 0 7
39069: PPUSH
39070: LD_INT 1
39072: PPUSH
39073: LD_VAR 0 14
39077: PPUSH
39078: CALL_OW 2
39082: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39083: LD_VAR 0 14
39087: PPUSH
39088: LD_VAR 0 1
39092: PPUSH
39093: CALL_OW 250
39097: PPUSH
39098: LD_VAR 0 1
39102: PPUSH
39103: CALL_OW 251
39107: PPUSH
39108: LD_INT 10
39110: PPUSH
39111: LD_INT 0
39113: PPUSH
39114: CALL_OW 50
// continue ;
39118: GO 39019
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39120: LD_VAR 0 12
39124: PUSH
39125: LD_INT 1
39127: ARRAY
39128: PPUSH
39129: CALL_OW 313
39133: PUSH
39134: LD_VAR 0 12
39138: PUSH
39139: LD_INT 1
39141: ARRAY
39142: PPUSH
39143: CALL_OW 266
39147: PUSH
39148: LD_INT 32
39150: PUSH
39151: LD_INT 31
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: IN
39158: AND
39159: PUSH
39160: LD_VAR 0 12
39164: PUSH
39165: LD_INT 1
39167: ARRAY
39168: PPUSH
39169: CALL_OW 313
39173: PUSH
39174: LD_INT 6
39176: EQUAL
39177: OR
39178: IFFALSE 39198
// f := Delete ( f , 1 ) ;
39180: LD_ADDR_VAR 0 12
39184: PUSH
39185: LD_VAR 0 12
39189: PPUSH
39190: LD_INT 1
39192: PPUSH
39193: CALL_OW 3
39197: ST_TO_ADDR
// if not f then
39198: LD_VAR 0 12
39202: NOT
39203: IFFALSE 39221
// begin x := x + 2 ;
39205: LD_ADDR_VAR 0 13
39209: PUSH
39210: LD_VAR 0 13
39214: PUSH
39215: LD_INT 2
39217: PLUS
39218: ST_TO_ADDR
// continue ;
39219: GO 39019
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39221: LD_VAR 0 12
39225: PUSH
39226: LD_INT 1
39228: ARRAY
39229: PPUSH
39230: CALL_OW 266
39234: PUSH
39235: LD_INT 5
39237: EQUAL
39238: IFFALSE 39312
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39240: LD_VAR 0 12
39244: PUSH
39245: LD_INT 1
39247: ARRAY
39248: PPUSH
39249: CALL_OW 313
39253: PUSH
39254: LD_INT 3
39256: LESS
39257: IFFALSE 39293
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39259: LD_INT 0
39261: PPUSH
39262: LD_INT 5
39264: PUSH
39265: LD_INT 8
39267: PUSH
39268: LD_INT 9
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: LIST
39275: PUSH
39276: LD_VAR 0 17
39280: ARRAY
39281: PPUSH
39282: LD_VAR 0 4
39286: PPUSH
39287: CALL_OW 380
39291: GO 39310
// PrepareHuman ( false , i , skill ) ;
39293: LD_INT 0
39295: PPUSH
39296: LD_VAR 0 8
39300: PPUSH
39301: LD_VAR 0 4
39305: PPUSH
39306: CALL_OW 380
// end else
39310: GO 39329
// PrepareHuman ( false , i , skill ) ;
39312: LD_INT 0
39314: PPUSH
39315: LD_VAR 0 8
39319: PPUSH
39320: LD_VAR 0 4
39324: PPUSH
39325: CALL_OW 380
// un := CreateHuman ;
39329: LD_ADDR_VAR 0 14
39333: PUSH
39334: CALL_OW 44
39338: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39339: LD_ADDR_VAR 0 7
39343: PUSH
39344: LD_VAR 0 7
39348: PPUSH
39349: LD_INT 1
39351: PPUSH
39352: LD_VAR 0 14
39356: PPUSH
39357: CALL_OW 2
39361: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39362: LD_VAR 0 14
39366: PPUSH
39367: LD_VAR 0 12
39371: PUSH
39372: LD_INT 1
39374: ARRAY
39375: PPUSH
39376: CALL_OW 52
// end ;
39380: GO 39019
39382: POP
39383: POP
// end ;
39384: GO 38321
39386: POP
39387: POP
// result := result ^ buildings ;
39388: LD_ADDR_VAR 0 7
39392: PUSH
39393: LD_VAR 0 7
39397: PUSH
39398: LD_VAR 0 18
39402: ADD
39403: ST_TO_ADDR
// end else
39404: GO 39547
// begin for i = 1 to personel do
39406: LD_ADDR_VAR 0 8
39410: PUSH
39411: DOUBLE
39412: LD_INT 1
39414: DEC
39415: ST_TO_ADDR
39416: LD_VAR 0 6
39420: PUSH
39421: FOR_TO
39422: IFFALSE 39545
// begin if i > 4 then
39424: LD_VAR 0 8
39428: PUSH
39429: LD_INT 4
39431: GREATER
39432: IFFALSE 39436
// break ;
39434: GO 39545
// x := personel [ i ] ;
39436: LD_ADDR_VAR 0 13
39440: PUSH
39441: LD_VAR 0 6
39445: PUSH
39446: LD_VAR 0 8
39450: ARRAY
39451: ST_TO_ADDR
// if x = - 1 then
39452: LD_VAR 0 13
39456: PUSH
39457: LD_INT 1
39459: NEG
39460: EQUAL
39461: IFFALSE 39465
// continue ;
39463: GO 39421
// PrepareHuman ( false , i , skill ) ;
39465: LD_INT 0
39467: PPUSH
39468: LD_VAR 0 8
39472: PPUSH
39473: LD_VAR 0 4
39477: PPUSH
39478: CALL_OW 380
// un := CreateHuman ;
39482: LD_ADDR_VAR 0 14
39486: PUSH
39487: CALL_OW 44
39491: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39492: LD_VAR 0 14
39496: PPUSH
39497: LD_VAR 0 1
39501: PPUSH
39502: CALL_OW 250
39506: PPUSH
39507: LD_VAR 0 1
39511: PPUSH
39512: CALL_OW 251
39516: PPUSH
39517: LD_INT 10
39519: PPUSH
39520: LD_INT 0
39522: PPUSH
39523: CALL_OW 50
// result := result ^ un ;
39527: LD_ADDR_VAR 0 7
39531: PUSH
39532: LD_VAR 0 7
39536: PUSH
39537: LD_VAR 0 14
39541: ADD
39542: ST_TO_ADDR
// end ;
39543: GO 39421
39545: POP
39546: POP
// end ; end ;
39547: LD_VAR 0 7
39551: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39552: LD_INT 0
39554: PPUSH
39555: PPUSH
39556: PPUSH
39557: PPUSH
39558: PPUSH
39559: PPUSH
39560: PPUSH
39561: PPUSH
39562: PPUSH
39563: PPUSH
39564: PPUSH
39565: PPUSH
39566: PPUSH
39567: PPUSH
39568: PPUSH
39569: PPUSH
// result := false ;
39570: LD_ADDR_VAR 0 3
39574: PUSH
39575: LD_INT 0
39577: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39578: LD_VAR 0 1
39582: NOT
39583: PUSH
39584: LD_VAR 0 1
39588: PPUSH
39589: CALL_OW 266
39593: PUSH
39594: LD_INT 32
39596: PUSH
39597: LD_INT 33
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: IN
39604: NOT
39605: OR
39606: IFFALSE 39610
// exit ;
39608: GO 40719
// nat := GetNation ( tower ) ;
39610: LD_ADDR_VAR 0 12
39614: PUSH
39615: LD_VAR 0 1
39619: PPUSH
39620: CALL_OW 248
39624: ST_TO_ADDR
// side := GetSide ( tower ) ;
39625: LD_ADDR_VAR 0 16
39629: PUSH
39630: LD_VAR 0 1
39634: PPUSH
39635: CALL_OW 255
39639: ST_TO_ADDR
// x := GetX ( tower ) ;
39640: LD_ADDR_VAR 0 10
39644: PUSH
39645: LD_VAR 0 1
39649: PPUSH
39650: CALL_OW 250
39654: ST_TO_ADDR
// y := GetY ( tower ) ;
39655: LD_ADDR_VAR 0 11
39659: PUSH
39660: LD_VAR 0 1
39664: PPUSH
39665: CALL_OW 251
39669: ST_TO_ADDR
// if not x or not y then
39670: LD_VAR 0 10
39674: NOT
39675: PUSH
39676: LD_VAR 0 11
39680: NOT
39681: OR
39682: IFFALSE 39686
// exit ;
39684: GO 40719
// weapon := 0 ;
39686: LD_ADDR_VAR 0 18
39690: PUSH
39691: LD_INT 0
39693: ST_TO_ADDR
// fac_list := [ ] ;
39694: LD_ADDR_VAR 0 17
39698: PUSH
39699: EMPTY
39700: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39701: LD_ADDR_VAR 0 6
39705: PUSH
39706: LD_VAR 0 1
39710: PPUSH
39711: CALL_OW 274
39715: PPUSH
39716: LD_VAR 0 2
39720: PPUSH
39721: LD_INT 0
39723: PPUSH
39724: CALL 37290 0 3
39728: PPUSH
39729: LD_INT 30
39731: PUSH
39732: LD_INT 3
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PPUSH
39739: CALL_OW 72
39743: ST_TO_ADDR
// if not factories then
39744: LD_VAR 0 6
39748: NOT
39749: IFFALSE 39753
// exit ;
39751: GO 40719
// for i in factories do
39753: LD_ADDR_VAR 0 8
39757: PUSH
39758: LD_VAR 0 6
39762: PUSH
39763: FOR_IN
39764: IFFALSE 39789
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39766: LD_ADDR_VAR 0 17
39770: PUSH
39771: LD_VAR 0 17
39775: PUSH
39776: LD_VAR 0 8
39780: PPUSH
39781: CALL_OW 478
39785: UNION
39786: ST_TO_ADDR
39787: GO 39763
39789: POP
39790: POP
// if not fac_list then
39791: LD_VAR 0 17
39795: NOT
39796: IFFALSE 39800
// exit ;
39798: GO 40719
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39800: LD_ADDR_VAR 0 5
39804: PUSH
39805: LD_INT 4
39807: PUSH
39808: LD_INT 5
39810: PUSH
39811: LD_INT 9
39813: PUSH
39814: LD_INT 10
39816: PUSH
39817: LD_INT 6
39819: PUSH
39820: LD_INT 7
39822: PUSH
39823: LD_INT 11
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 27
39837: PUSH
39838: LD_INT 28
39840: PUSH
39841: LD_INT 26
39843: PUSH
39844: LD_INT 30
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 43
39855: PUSH
39856: LD_INT 44
39858: PUSH
39859: LD_INT 46
39861: PUSH
39862: LD_INT 45
39864: PUSH
39865: LD_INT 47
39867: PUSH
39868: LD_INT 49
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: LIST
39883: PUSH
39884: LD_VAR 0 12
39888: ARRAY
39889: ST_TO_ADDR
// list := list isect fac_list ;
39890: LD_ADDR_VAR 0 5
39894: PUSH
39895: LD_VAR 0 5
39899: PUSH
39900: LD_VAR 0 17
39904: ISECT
39905: ST_TO_ADDR
// if not list then
39906: LD_VAR 0 5
39910: NOT
39911: IFFALSE 39915
// exit ;
39913: GO 40719
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39915: LD_VAR 0 12
39919: PUSH
39920: LD_INT 3
39922: EQUAL
39923: PUSH
39924: LD_INT 49
39926: PUSH
39927: LD_VAR 0 5
39931: IN
39932: AND
39933: PUSH
39934: LD_INT 31
39936: PPUSH
39937: LD_VAR 0 16
39941: PPUSH
39942: CALL_OW 321
39946: PUSH
39947: LD_INT 2
39949: EQUAL
39950: AND
39951: IFFALSE 40011
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39953: LD_INT 22
39955: PUSH
39956: LD_VAR 0 16
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 35
39967: PUSH
39968: LD_INT 49
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 91
39977: PUSH
39978: LD_VAR 0 1
39982: PUSH
39983: LD_INT 10
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: LIST
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: LIST
39995: PPUSH
39996: CALL_OW 69
40000: NOT
40001: IFFALSE 40011
// weapon := ru_time_lapser ;
40003: LD_ADDR_VAR 0 18
40007: PUSH
40008: LD_INT 49
40010: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40011: LD_VAR 0 12
40015: PUSH
40016: LD_INT 1
40018: PUSH
40019: LD_INT 2
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: IN
40026: PUSH
40027: LD_INT 11
40029: PUSH
40030: LD_VAR 0 5
40034: IN
40035: PUSH
40036: LD_INT 30
40038: PUSH
40039: LD_VAR 0 5
40043: IN
40044: OR
40045: AND
40046: PUSH
40047: LD_INT 6
40049: PPUSH
40050: LD_VAR 0 16
40054: PPUSH
40055: CALL_OW 321
40059: PUSH
40060: LD_INT 2
40062: EQUAL
40063: AND
40064: IFFALSE 40229
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40066: LD_INT 22
40068: PUSH
40069: LD_VAR 0 16
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 2
40080: PUSH
40081: LD_INT 35
40083: PUSH
40084: LD_INT 11
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 35
40093: PUSH
40094: LD_INT 30
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 91
40108: PUSH
40109: LD_VAR 0 1
40113: PUSH
40114: LD_INT 18
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: LIST
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: LIST
40126: PPUSH
40127: CALL_OW 69
40131: NOT
40132: PUSH
40133: LD_INT 22
40135: PUSH
40136: LD_VAR 0 16
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 2
40147: PUSH
40148: LD_INT 30
40150: PUSH
40151: LD_INT 32
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 30
40160: PUSH
40161: LD_INT 33
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 91
40175: PUSH
40176: LD_VAR 0 1
40180: PUSH
40181: LD_INT 12
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: LIST
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: LIST
40193: PUSH
40194: EMPTY
40195: LIST
40196: PPUSH
40197: CALL_OW 69
40201: PUSH
40202: LD_INT 2
40204: GREATER
40205: AND
40206: IFFALSE 40229
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40208: LD_ADDR_VAR 0 18
40212: PUSH
40213: LD_INT 11
40215: PUSH
40216: LD_INT 30
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_VAR 0 12
40227: ARRAY
40228: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40229: LD_VAR 0 18
40233: NOT
40234: PUSH
40235: LD_INT 40
40237: PPUSH
40238: LD_VAR 0 16
40242: PPUSH
40243: CALL_OW 321
40247: PUSH
40248: LD_INT 2
40250: EQUAL
40251: AND
40252: PUSH
40253: LD_INT 7
40255: PUSH
40256: LD_VAR 0 5
40260: IN
40261: PUSH
40262: LD_INT 28
40264: PUSH
40265: LD_VAR 0 5
40269: IN
40270: OR
40271: PUSH
40272: LD_INT 45
40274: PUSH
40275: LD_VAR 0 5
40279: IN
40280: OR
40281: AND
40282: IFFALSE 40536
// begin hex := GetHexInfo ( x , y ) ;
40284: LD_ADDR_VAR 0 4
40288: PUSH
40289: LD_VAR 0 10
40293: PPUSH
40294: LD_VAR 0 11
40298: PPUSH
40299: CALL_OW 546
40303: ST_TO_ADDR
// if hex [ 1 ] then
40304: LD_VAR 0 4
40308: PUSH
40309: LD_INT 1
40311: ARRAY
40312: IFFALSE 40316
// exit ;
40314: GO 40719
// height := hex [ 2 ] ;
40316: LD_ADDR_VAR 0 15
40320: PUSH
40321: LD_VAR 0 4
40325: PUSH
40326: LD_INT 2
40328: ARRAY
40329: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40330: LD_ADDR_VAR 0 14
40334: PUSH
40335: LD_INT 0
40337: PUSH
40338: LD_INT 2
40340: PUSH
40341: LD_INT 3
40343: PUSH
40344: LD_INT 5
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: ST_TO_ADDR
// for i in tmp do
40353: LD_ADDR_VAR 0 8
40357: PUSH
40358: LD_VAR 0 14
40362: PUSH
40363: FOR_IN
40364: IFFALSE 40534
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40366: LD_ADDR_VAR 0 9
40370: PUSH
40371: LD_VAR 0 10
40375: PPUSH
40376: LD_VAR 0 8
40380: PPUSH
40381: LD_INT 5
40383: PPUSH
40384: CALL_OW 272
40388: PUSH
40389: LD_VAR 0 11
40393: PPUSH
40394: LD_VAR 0 8
40398: PPUSH
40399: LD_INT 5
40401: PPUSH
40402: CALL_OW 273
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40411: LD_VAR 0 9
40415: PUSH
40416: LD_INT 1
40418: ARRAY
40419: PPUSH
40420: LD_VAR 0 9
40424: PUSH
40425: LD_INT 2
40427: ARRAY
40428: PPUSH
40429: CALL_OW 488
40433: IFFALSE 40532
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40435: LD_ADDR_VAR 0 4
40439: PUSH
40440: LD_VAR 0 9
40444: PUSH
40445: LD_INT 1
40447: ARRAY
40448: PPUSH
40449: LD_VAR 0 9
40453: PUSH
40454: LD_INT 2
40456: ARRAY
40457: PPUSH
40458: CALL_OW 546
40462: ST_TO_ADDR
// if hex [ 1 ] then
40463: LD_VAR 0 4
40467: PUSH
40468: LD_INT 1
40470: ARRAY
40471: IFFALSE 40475
// continue ;
40473: GO 40363
// h := hex [ 2 ] ;
40475: LD_ADDR_VAR 0 13
40479: PUSH
40480: LD_VAR 0 4
40484: PUSH
40485: LD_INT 2
40487: ARRAY
40488: ST_TO_ADDR
// if h + 7 < height then
40489: LD_VAR 0 13
40493: PUSH
40494: LD_INT 7
40496: PLUS
40497: PUSH
40498: LD_VAR 0 15
40502: LESS
40503: IFFALSE 40532
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40505: LD_ADDR_VAR 0 18
40509: PUSH
40510: LD_INT 7
40512: PUSH
40513: LD_INT 28
40515: PUSH
40516: LD_INT 45
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: LIST
40523: PUSH
40524: LD_VAR 0 12
40528: ARRAY
40529: ST_TO_ADDR
// break ;
40530: GO 40534
// end ; end ; end ;
40532: GO 40363
40534: POP
40535: POP
// end ; if not weapon then
40536: LD_VAR 0 18
40540: NOT
40541: IFFALSE 40601
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40543: LD_ADDR_VAR 0 5
40547: PUSH
40548: LD_VAR 0 5
40552: PUSH
40553: LD_INT 11
40555: PUSH
40556: LD_INT 30
40558: PUSH
40559: LD_INT 49
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: LIST
40566: DIFF
40567: ST_TO_ADDR
// if not list then
40568: LD_VAR 0 5
40572: NOT
40573: IFFALSE 40577
// exit ;
40575: GO 40719
// weapon := list [ rand ( 1 , list ) ] ;
40577: LD_ADDR_VAR 0 18
40581: PUSH
40582: LD_VAR 0 5
40586: PUSH
40587: LD_INT 1
40589: PPUSH
40590: LD_VAR 0 5
40594: PPUSH
40595: CALL_OW 12
40599: ARRAY
40600: ST_TO_ADDR
// end ; if weapon then
40601: LD_VAR 0 18
40605: IFFALSE 40719
// begin tmp := CostOfWeapon ( weapon ) ;
40607: LD_ADDR_VAR 0 14
40611: PUSH
40612: LD_VAR 0 18
40616: PPUSH
40617: CALL_OW 451
40621: ST_TO_ADDR
// j := GetBase ( tower ) ;
40622: LD_ADDR_VAR 0 9
40626: PUSH
40627: LD_VAR 0 1
40631: PPUSH
40632: CALL_OW 274
40636: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40637: LD_VAR 0 9
40641: PPUSH
40642: LD_INT 1
40644: PPUSH
40645: CALL_OW 275
40649: PUSH
40650: LD_VAR 0 14
40654: PUSH
40655: LD_INT 1
40657: ARRAY
40658: GREATEREQUAL
40659: PUSH
40660: LD_VAR 0 9
40664: PPUSH
40665: LD_INT 2
40667: PPUSH
40668: CALL_OW 275
40672: PUSH
40673: LD_VAR 0 14
40677: PUSH
40678: LD_INT 2
40680: ARRAY
40681: GREATEREQUAL
40682: AND
40683: PUSH
40684: LD_VAR 0 9
40688: PPUSH
40689: LD_INT 3
40691: PPUSH
40692: CALL_OW 275
40696: PUSH
40697: LD_VAR 0 14
40701: PUSH
40702: LD_INT 3
40704: ARRAY
40705: GREATEREQUAL
40706: AND
40707: IFFALSE 40719
// result := weapon ;
40709: LD_ADDR_VAR 0 3
40713: PUSH
40714: LD_VAR 0 18
40718: ST_TO_ADDR
// end ; end ;
40719: LD_VAR 0 3
40723: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40724: LD_INT 0
40726: PPUSH
40727: PPUSH
// result := true ;
40728: LD_ADDR_VAR 0 3
40732: PUSH
40733: LD_INT 1
40735: ST_TO_ADDR
// if array1 = array2 then
40736: LD_VAR 0 1
40740: PUSH
40741: LD_VAR 0 2
40745: EQUAL
40746: IFFALSE 40806
// begin for i = 1 to array1 do
40748: LD_ADDR_VAR 0 4
40752: PUSH
40753: DOUBLE
40754: LD_INT 1
40756: DEC
40757: ST_TO_ADDR
40758: LD_VAR 0 1
40762: PUSH
40763: FOR_TO
40764: IFFALSE 40802
// if array1 [ i ] <> array2 [ i ] then
40766: LD_VAR 0 1
40770: PUSH
40771: LD_VAR 0 4
40775: ARRAY
40776: PUSH
40777: LD_VAR 0 2
40781: PUSH
40782: LD_VAR 0 4
40786: ARRAY
40787: NONEQUAL
40788: IFFALSE 40800
// begin result := false ;
40790: LD_ADDR_VAR 0 3
40794: PUSH
40795: LD_INT 0
40797: ST_TO_ADDR
// break ;
40798: GO 40802
// end ;
40800: GO 40763
40802: POP
40803: POP
// end else
40804: GO 40814
// result := false ;
40806: LD_ADDR_VAR 0 3
40810: PUSH
40811: LD_INT 0
40813: ST_TO_ADDR
// end ;
40814: LD_VAR 0 3
40818: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40819: LD_INT 0
40821: PPUSH
40822: PPUSH
// if not array1 or not array2 then
40823: LD_VAR 0 1
40827: NOT
40828: PUSH
40829: LD_VAR 0 2
40833: NOT
40834: OR
40835: IFFALSE 40839
// exit ;
40837: GO 40903
// result := true ;
40839: LD_ADDR_VAR 0 3
40843: PUSH
40844: LD_INT 1
40846: ST_TO_ADDR
// for i = 1 to array1 do
40847: LD_ADDR_VAR 0 4
40851: PUSH
40852: DOUBLE
40853: LD_INT 1
40855: DEC
40856: ST_TO_ADDR
40857: LD_VAR 0 1
40861: PUSH
40862: FOR_TO
40863: IFFALSE 40901
// if array1 [ i ] <> array2 [ i ] then
40865: LD_VAR 0 1
40869: PUSH
40870: LD_VAR 0 4
40874: ARRAY
40875: PUSH
40876: LD_VAR 0 2
40880: PUSH
40881: LD_VAR 0 4
40885: ARRAY
40886: NONEQUAL
40887: IFFALSE 40899
// begin result := false ;
40889: LD_ADDR_VAR 0 3
40893: PUSH
40894: LD_INT 0
40896: ST_TO_ADDR
// break ;
40897: GO 40901
// end ;
40899: GO 40862
40901: POP
40902: POP
// end ;
40903: LD_VAR 0 3
40907: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40908: LD_INT 0
40910: PPUSH
40911: PPUSH
40912: PPUSH
// pom := GetBase ( fac ) ;
40913: LD_ADDR_VAR 0 5
40917: PUSH
40918: LD_VAR 0 1
40922: PPUSH
40923: CALL_OW 274
40927: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40928: LD_ADDR_VAR 0 4
40932: PUSH
40933: LD_VAR 0 2
40937: PUSH
40938: LD_INT 1
40940: ARRAY
40941: PPUSH
40942: LD_VAR 0 2
40946: PUSH
40947: LD_INT 2
40949: ARRAY
40950: PPUSH
40951: LD_VAR 0 2
40955: PUSH
40956: LD_INT 3
40958: ARRAY
40959: PPUSH
40960: LD_VAR 0 2
40964: PUSH
40965: LD_INT 4
40967: ARRAY
40968: PPUSH
40969: CALL_OW 449
40973: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40974: LD_ADDR_VAR 0 3
40978: PUSH
40979: LD_VAR 0 5
40983: PPUSH
40984: LD_INT 1
40986: PPUSH
40987: CALL_OW 275
40991: PUSH
40992: LD_VAR 0 4
40996: PUSH
40997: LD_INT 1
40999: ARRAY
41000: GREATEREQUAL
41001: PUSH
41002: LD_VAR 0 5
41006: PPUSH
41007: LD_INT 2
41009: PPUSH
41010: CALL_OW 275
41014: PUSH
41015: LD_VAR 0 4
41019: PUSH
41020: LD_INT 2
41022: ARRAY
41023: GREATEREQUAL
41024: AND
41025: PUSH
41026: LD_VAR 0 5
41030: PPUSH
41031: LD_INT 3
41033: PPUSH
41034: CALL_OW 275
41038: PUSH
41039: LD_VAR 0 4
41043: PUSH
41044: LD_INT 3
41046: ARRAY
41047: GREATEREQUAL
41048: AND
41049: ST_TO_ADDR
// end ;
41050: LD_VAR 0 3
41054: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41055: LD_INT 0
41057: PPUSH
41058: PPUSH
41059: PPUSH
41060: PPUSH
// pom := GetBase ( building ) ;
41061: LD_ADDR_VAR 0 3
41065: PUSH
41066: LD_VAR 0 1
41070: PPUSH
41071: CALL_OW 274
41075: ST_TO_ADDR
// if not pom then
41076: LD_VAR 0 3
41080: NOT
41081: IFFALSE 41085
// exit ;
41083: GO 41255
// btype := GetBType ( building ) ;
41085: LD_ADDR_VAR 0 5
41089: PUSH
41090: LD_VAR 0 1
41094: PPUSH
41095: CALL_OW 266
41099: ST_TO_ADDR
// if btype = b_armoury then
41100: LD_VAR 0 5
41104: PUSH
41105: LD_INT 4
41107: EQUAL
41108: IFFALSE 41118
// btype := b_barracks ;
41110: LD_ADDR_VAR 0 5
41114: PUSH
41115: LD_INT 5
41117: ST_TO_ADDR
// if btype = b_depot then
41118: LD_VAR 0 5
41122: PUSH
41123: LD_INT 0
41125: EQUAL
41126: IFFALSE 41136
// btype := b_warehouse ;
41128: LD_ADDR_VAR 0 5
41132: PUSH
41133: LD_INT 1
41135: ST_TO_ADDR
// if btype = b_workshop then
41136: LD_VAR 0 5
41140: PUSH
41141: LD_INT 2
41143: EQUAL
41144: IFFALSE 41154
// btype := b_factory ;
41146: LD_ADDR_VAR 0 5
41150: PUSH
41151: LD_INT 3
41153: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41154: LD_ADDR_VAR 0 4
41158: PUSH
41159: LD_VAR 0 5
41163: PPUSH
41164: LD_VAR 0 1
41168: PPUSH
41169: CALL_OW 248
41173: PPUSH
41174: CALL_OW 450
41178: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41179: LD_ADDR_VAR 0 2
41183: PUSH
41184: LD_VAR 0 3
41188: PPUSH
41189: LD_INT 1
41191: PPUSH
41192: CALL_OW 275
41196: PUSH
41197: LD_VAR 0 4
41201: PUSH
41202: LD_INT 1
41204: ARRAY
41205: GREATEREQUAL
41206: PUSH
41207: LD_VAR 0 3
41211: PPUSH
41212: LD_INT 2
41214: PPUSH
41215: CALL_OW 275
41219: PUSH
41220: LD_VAR 0 4
41224: PUSH
41225: LD_INT 2
41227: ARRAY
41228: GREATEREQUAL
41229: AND
41230: PUSH
41231: LD_VAR 0 3
41235: PPUSH
41236: LD_INT 3
41238: PPUSH
41239: CALL_OW 275
41243: PUSH
41244: LD_VAR 0 4
41248: PUSH
41249: LD_INT 3
41251: ARRAY
41252: GREATEREQUAL
41253: AND
41254: ST_TO_ADDR
// end ;
41255: LD_VAR 0 2
41259: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41260: LD_INT 0
41262: PPUSH
41263: PPUSH
41264: PPUSH
// pom := GetBase ( building ) ;
41265: LD_ADDR_VAR 0 4
41269: PUSH
41270: LD_VAR 0 1
41274: PPUSH
41275: CALL_OW 274
41279: ST_TO_ADDR
// if not pom then
41280: LD_VAR 0 4
41284: NOT
41285: IFFALSE 41289
// exit ;
41287: GO 41390
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41289: LD_ADDR_VAR 0 5
41293: PUSH
41294: LD_VAR 0 2
41298: PPUSH
41299: LD_VAR 0 1
41303: PPUSH
41304: CALL_OW 248
41308: PPUSH
41309: CALL_OW 450
41313: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41314: LD_ADDR_VAR 0 3
41318: PUSH
41319: LD_VAR 0 4
41323: PPUSH
41324: LD_INT 1
41326: PPUSH
41327: CALL_OW 275
41331: PUSH
41332: LD_VAR 0 5
41336: PUSH
41337: LD_INT 1
41339: ARRAY
41340: GREATEREQUAL
41341: PUSH
41342: LD_VAR 0 4
41346: PPUSH
41347: LD_INT 2
41349: PPUSH
41350: CALL_OW 275
41354: PUSH
41355: LD_VAR 0 5
41359: PUSH
41360: LD_INT 2
41362: ARRAY
41363: GREATEREQUAL
41364: AND
41365: PUSH
41366: LD_VAR 0 4
41370: PPUSH
41371: LD_INT 3
41373: PPUSH
41374: CALL_OW 275
41378: PUSH
41379: LD_VAR 0 5
41383: PUSH
41384: LD_INT 3
41386: ARRAY
41387: GREATEREQUAL
41388: AND
41389: ST_TO_ADDR
// end ;
41390: LD_VAR 0 3
41394: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41395: LD_INT 0
41397: PPUSH
41398: PPUSH
41399: PPUSH
41400: PPUSH
41401: PPUSH
41402: PPUSH
41403: PPUSH
41404: PPUSH
41405: PPUSH
41406: PPUSH
41407: PPUSH
// result := false ;
41408: LD_ADDR_VAR 0 8
41412: PUSH
41413: LD_INT 0
41415: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41416: LD_VAR 0 5
41420: NOT
41421: PUSH
41422: LD_VAR 0 1
41426: NOT
41427: OR
41428: PUSH
41429: LD_VAR 0 2
41433: NOT
41434: OR
41435: PUSH
41436: LD_VAR 0 3
41440: NOT
41441: OR
41442: IFFALSE 41446
// exit ;
41444: GO 42260
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41446: LD_ADDR_VAR 0 14
41450: PUSH
41451: LD_VAR 0 1
41455: PPUSH
41456: LD_VAR 0 2
41460: PPUSH
41461: LD_VAR 0 3
41465: PPUSH
41466: LD_VAR 0 4
41470: PPUSH
41471: LD_VAR 0 5
41475: PUSH
41476: LD_INT 1
41478: ARRAY
41479: PPUSH
41480: CALL_OW 248
41484: PPUSH
41485: LD_INT 0
41487: PPUSH
41488: CALL 43493 0 6
41492: ST_TO_ADDR
// if not hexes then
41493: LD_VAR 0 14
41497: NOT
41498: IFFALSE 41502
// exit ;
41500: GO 42260
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41502: LD_ADDR_VAR 0 17
41506: PUSH
41507: LD_VAR 0 5
41511: PPUSH
41512: LD_INT 22
41514: PUSH
41515: LD_VAR 0 13
41519: PPUSH
41520: CALL_OW 255
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 2
41531: PUSH
41532: LD_INT 30
41534: PUSH
41535: LD_INT 0
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 30
41544: PUSH
41545: LD_INT 1
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: LIST
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PPUSH
41561: CALL_OW 72
41565: ST_TO_ADDR
// for i = 1 to hexes do
41566: LD_ADDR_VAR 0 9
41570: PUSH
41571: DOUBLE
41572: LD_INT 1
41574: DEC
41575: ST_TO_ADDR
41576: LD_VAR 0 14
41580: PUSH
41581: FOR_TO
41582: IFFALSE 42258
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41584: LD_ADDR_VAR 0 13
41588: PUSH
41589: LD_VAR 0 14
41593: PUSH
41594: LD_VAR 0 9
41598: ARRAY
41599: PUSH
41600: LD_INT 1
41602: ARRAY
41603: PPUSH
41604: LD_VAR 0 14
41608: PUSH
41609: LD_VAR 0 9
41613: ARRAY
41614: PUSH
41615: LD_INT 2
41617: ARRAY
41618: PPUSH
41619: CALL_OW 428
41623: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41624: LD_VAR 0 14
41628: PUSH
41629: LD_VAR 0 9
41633: ARRAY
41634: PUSH
41635: LD_INT 1
41637: ARRAY
41638: PPUSH
41639: LD_VAR 0 14
41643: PUSH
41644: LD_VAR 0 9
41648: ARRAY
41649: PUSH
41650: LD_INT 2
41652: ARRAY
41653: PPUSH
41654: CALL_OW 351
41658: PUSH
41659: LD_VAR 0 14
41663: PUSH
41664: LD_VAR 0 9
41668: ARRAY
41669: PUSH
41670: LD_INT 1
41672: ARRAY
41673: PPUSH
41674: LD_VAR 0 14
41678: PUSH
41679: LD_VAR 0 9
41683: ARRAY
41684: PUSH
41685: LD_INT 2
41687: ARRAY
41688: PPUSH
41689: CALL_OW 488
41693: NOT
41694: OR
41695: PUSH
41696: LD_VAR 0 13
41700: PPUSH
41701: CALL_OW 247
41705: PUSH
41706: LD_INT 3
41708: EQUAL
41709: OR
41710: IFFALSE 41716
// exit ;
41712: POP
41713: POP
41714: GO 42260
// if not tmp then
41716: LD_VAR 0 13
41720: NOT
41721: IFFALSE 41725
// continue ;
41723: GO 41581
// result := true ;
41725: LD_ADDR_VAR 0 8
41729: PUSH
41730: LD_INT 1
41732: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41733: LD_VAR 0 6
41737: PUSH
41738: LD_VAR 0 13
41742: PPUSH
41743: CALL_OW 247
41747: PUSH
41748: LD_INT 2
41750: EQUAL
41751: AND
41752: PUSH
41753: LD_VAR 0 13
41757: PPUSH
41758: CALL_OW 263
41762: PUSH
41763: LD_INT 1
41765: EQUAL
41766: AND
41767: IFFALSE 41931
// begin if IsDrivenBy ( tmp ) then
41769: LD_VAR 0 13
41773: PPUSH
41774: CALL_OW 311
41778: IFFALSE 41782
// continue ;
41780: GO 41581
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41782: LD_VAR 0 6
41786: PPUSH
41787: LD_INT 3
41789: PUSH
41790: LD_INT 60
41792: PUSH
41793: EMPTY
41794: LIST
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 3
41802: PUSH
41803: LD_INT 55
41805: PUSH
41806: EMPTY
41807: LIST
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PPUSH
41817: CALL_OW 72
41821: IFFALSE 41929
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41823: LD_ADDR_VAR 0 18
41827: PUSH
41828: LD_VAR 0 6
41832: PPUSH
41833: LD_INT 3
41835: PUSH
41836: LD_INT 60
41838: PUSH
41839: EMPTY
41840: LIST
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 3
41848: PUSH
41849: LD_INT 55
41851: PUSH
41852: EMPTY
41853: LIST
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PPUSH
41863: CALL_OW 72
41867: PUSH
41868: LD_INT 1
41870: ARRAY
41871: ST_TO_ADDR
// if IsInUnit ( driver ) then
41872: LD_VAR 0 18
41876: PPUSH
41877: CALL_OW 310
41881: IFFALSE 41892
// ComExit ( driver ) ;
41883: LD_VAR 0 18
41887: PPUSH
41888: CALL 67181 0 1
// AddComEnterUnit ( driver , tmp ) ;
41892: LD_VAR 0 18
41896: PPUSH
41897: LD_VAR 0 13
41901: PPUSH
41902: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41906: LD_VAR 0 18
41910: PPUSH
41911: LD_VAR 0 7
41915: PPUSH
41916: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41920: LD_VAR 0 18
41924: PPUSH
41925: CALL_OW 181
// end ; continue ;
41929: GO 41581
// end ; if not cleaners or not tmp in cleaners then
41931: LD_VAR 0 6
41935: NOT
41936: PUSH
41937: LD_VAR 0 13
41941: PUSH
41942: LD_VAR 0 6
41946: IN
41947: NOT
41948: OR
41949: IFFALSE 42256
// begin if dep then
41951: LD_VAR 0 17
41955: IFFALSE 42091
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41957: LD_ADDR_VAR 0 16
41961: PUSH
41962: LD_VAR 0 17
41966: PUSH
41967: LD_INT 1
41969: ARRAY
41970: PPUSH
41971: CALL_OW 250
41975: PPUSH
41976: LD_VAR 0 17
41980: PUSH
41981: LD_INT 1
41983: ARRAY
41984: PPUSH
41985: CALL_OW 254
41989: PPUSH
41990: LD_INT 5
41992: PPUSH
41993: CALL_OW 272
41997: PUSH
41998: LD_VAR 0 17
42002: PUSH
42003: LD_INT 1
42005: ARRAY
42006: PPUSH
42007: CALL_OW 251
42011: PPUSH
42012: LD_VAR 0 17
42016: PUSH
42017: LD_INT 1
42019: ARRAY
42020: PPUSH
42021: CALL_OW 254
42025: PPUSH
42026: LD_INT 5
42028: PPUSH
42029: CALL_OW 273
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42038: LD_VAR 0 16
42042: PUSH
42043: LD_INT 1
42045: ARRAY
42046: PPUSH
42047: LD_VAR 0 16
42051: PUSH
42052: LD_INT 2
42054: ARRAY
42055: PPUSH
42056: CALL_OW 488
42060: IFFALSE 42091
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42062: LD_VAR 0 13
42066: PPUSH
42067: LD_VAR 0 16
42071: PUSH
42072: LD_INT 1
42074: ARRAY
42075: PPUSH
42076: LD_VAR 0 16
42080: PUSH
42081: LD_INT 2
42083: ARRAY
42084: PPUSH
42085: CALL_OW 111
// continue ;
42089: GO 41581
// end ; end ; r := GetDir ( tmp ) ;
42091: LD_ADDR_VAR 0 15
42095: PUSH
42096: LD_VAR 0 13
42100: PPUSH
42101: CALL_OW 254
42105: ST_TO_ADDR
// if r = 5 then
42106: LD_VAR 0 15
42110: PUSH
42111: LD_INT 5
42113: EQUAL
42114: IFFALSE 42124
// r := 0 ;
42116: LD_ADDR_VAR 0 15
42120: PUSH
42121: LD_INT 0
42123: ST_TO_ADDR
// for j = r to 5 do
42124: LD_ADDR_VAR 0 10
42128: PUSH
42129: DOUBLE
42130: LD_VAR 0 15
42134: DEC
42135: ST_TO_ADDR
42136: LD_INT 5
42138: PUSH
42139: FOR_TO
42140: IFFALSE 42254
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42142: LD_ADDR_VAR 0 11
42146: PUSH
42147: LD_VAR 0 13
42151: PPUSH
42152: CALL_OW 250
42156: PPUSH
42157: LD_VAR 0 10
42161: PPUSH
42162: LD_INT 2
42164: PPUSH
42165: CALL_OW 272
42169: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42170: LD_ADDR_VAR 0 12
42174: PUSH
42175: LD_VAR 0 13
42179: PPUSH
42180: CALL_OW 251
42184: PPUSH
42185: LD_VAR 0 10
42189: PPUSH
42190: LD_INT 2
42192: PPUSH
42193: CALL_OW 273
42197: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42198: LD_VAR 0 11
42202: PPUSH
42203: LD_VAR 0 12
42207: PPUSH
42208: CALL_OW 488
42212: PUSH
42213: LD_VAR 0 11
42217: PPUSH
42218: LD_VAR 0 12
42222: PPUSH
42223: CALL_OW 428
42227: NOT
42228: AND
42229: IFFALSE 42252
// begin ComMoveXY ( tmp , _x , _y ) ;
42231: LD_VAR 0 13
42235: PPUSH
42236: LD_VAR 0 11
42240: PPUSH
42241: LD_VAR 0 12
42245: PPUSH
42246: CALL_OW 111
// break ;
42250: GO 42254
// end ; end ;
42252: GO 42139
42254: POP
42255: POP
// end ; end ;
42256: GO 41581
42258: POP
42259: POP
// end ;
42260: LD_VAR 0 8
42264: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42265: LD_INT 0
42267: PPUSH
// result := true ;
42268: LD_ADDR_VAR 0 3
42272: PUSH
42273: LD_INT 1
42275: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42276: LD_VAR 0 2
42280: PUSH
42281: LD_INT 24
42283: DOUBLE
42284: EQUAL
42285: IFTRUE 42295
42287: LD_INT 33
42289: DOUBLE
42290: EQUAL
42291: IFTRUE 42295
42293: GO 42320
42295: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42296: LD_ADDR_VAR 0 3
42300: PUSH
42301: LD_INT 32
42303: PPUSH
42304: LD_VAR 0 1
42308: PPUSH
42309: CALL_OW 321
42313: PUSH
42314: LD_INT 2
42316: EQUAL
42317: ST_TO_ADDR
42318: GO 42636
42320: LD_INT 20
42322: DOUBLE
42323: EQUAL
42324: IFTRUE 42328
42326: GO 42353
42328: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42329: LD_ADDR_VAR 0 3
42333: PUSH
42334: LD_INT 6
42336: PPUSH
42337: LD_VAR 0 1
42341: PPUSH
42342: CALL_OW 321
42346: PUSH
42347: LD_INT 2
42349: EQUAL
42350: ST_TO_ADDR
42351: GO 42636
42353: LD_INT 22
42355: DOUBLE
42356: EQUAL
42357: IFTRUE 42367
42359: LD_INT 36
42361: DOUBLE
42362: EQUAL
42363: IFTRUE 42367
42365: GO 42392
42367: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42368: LD_ADDR_VAR 0 3
42372: PUSH
42373: LD_INT 15
42375: PPUSH
42376: LD_VAR 0 1
42380: PPUSH
42381: CALL_OW 321
42385: PUSH
42386: LD_INT 2
42388: EQUAL
42389: ST_TO_ADDR
42390: GO 42636
42392: LD_INT 30
42394: DOUBLE
42395: EQUAL
42396: IFTRUE 42400
42398: GO 42425
42400: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42401: LD_ADDR_VAR 0 3
42405: PUSH
42406: LD_INT 20
42408: PPUSH
42409: LD_VAR 0 1
42413: PPUSH
42414: CALL_OW 321
42418: PUSH
42419: LD_INT 2
42421: EQUAL
42422: ST_TO_ADDR
42423: GO 42636
42425: LD_INT 28
42427: DOUBLE
42428: EQUAL
42429: IFTRUE 42439
42431: LD_INT 21
42433: DOUBLE
42434: EQUAL
42435: IFTRUE 42439
42437: GO 42464
42439: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42440: LD_ADDR_VAR 0 3
42444: PUSH
42445: LD_INT 21
42447: PPUSH
42448: LD_VAR 0 1
42452: PPUSH
42453: CALL_OW 321
42457: PUSH
42458: LD_INT 2
42460: EQUAL
42461: ST_TO_ADDR
42462: GO 42636
42464: LD_INT 16
42466: DOUBLE
42467: EQUAL
42468: IFTRUE 42472
42470: GO 42497
42472: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42473: LD_ADDR_VAR 0 3
42477: PUSH
42478: LD_INT 84
42480: PPUSH
42481: LD_VAR 0 1
42485: PPUSH
42486: CALL_OW 321
42490: PUSH
42491: LD_INT 2
42493: EQUAL
42494: ST_TO_ADDR
42495: GO 42636
42497: LD_INT 19
42499: DOUBLE
42500: EQUAL
42501: IFTRUE 42511
42503: LD_INT 23
42505: DOUBLE
42506: EQUAL
42507: IFTRUE 42511
42509: GO 42536
42511: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42512: LD_ADDR_VAR 0 3
42516: PUSH
42517: LD_INT 83
42519: PPUSH
42520: LD_VAR 0 1
42524: PPUSH
42525: CALL_OW 321
42529: PUSH
42530: LD_INT 2
42532: EQUAL
42533: ST_TO_ADDR
42534: GO 42636
42536: LD_INT 17
42538: DOUBLE
42539: EQUAL
42540: IFTRUE 42544
42542: GO 42569
42544: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42545: LD_ADDR_VAR 0 3
42549: PUSH
42550: LD_INT 39
42552: PPUSH
42553: LD_VAR 0 1
42557: PPUSH
42558: CALL_OW 321
42562: PUSH
42563: LD_INT 2
42565: EQUAL
42566: ST_TO_ADDR
42567: GO 42636
42569: LD_INT 18
42571: DOUBLE
42572: EQUAL
42573: IFTRUE 42577
42575: GO 42602
42577: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42578: LD_ADDR_VAR 0 3
42582: PUSH
42583: LD_INT 40
42585: PPUSH
42586: LD_VAR 0 1
42590: PPUSH
42591: CALL_OW 321
42595: PUSH
42596: LD_INT 2
42598: EQUAL
42599: ST_TO_ADDR
42600: GO 42636
42602: LD_INT 27
42604: DOUBLE
42605: EQUAL
42606: IFTRUE 42610
42608: GO 42635
42610: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42611: LD_ADDR_VAR 0 3
42615: PUSH
42616: LD_INT 35
42618: PPUSH
42619: LD_VAR 0 1
42623: PPUSH
42624: CALL_OW 321
42628: PUSH
42629: LD_INT 2
42631: EQUAL
42632: ST_TO_ADDR
42633: GO 42636
42635: POP
// end ;
42636: LD_VAR 0 3
42640: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42641: LD_INT 0
42643: PPUSH
42644: PPUSH
42645: PPUSH
42646: PPUSH
42647: PPUSH
42648: PPUSH
42649: PPUSH
42650: PPUSH
42651: PPUSH
42652: PPUSH
42653: PPUSH
// result := false ;
42654: LD_ADDR_VAR 0 6
42658: PUSH
42659: LD_INT 0
42661: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42662: LD_VAR 0 1
42666: NOT
42667: PUSH
42668: LD_VAR 0 1
42672: PPUSH
42673: CALL_OW 266
42677: PUSH
42678: LD_INT 0
42680: PUSH
42681: LD_INT 1
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: IN
42688: NOT
42689: OR
42690: PUSH
42691: LD_VAR 0 2
42695: NOT
42696: OR
42697: PUSH
42698: LD_VAR 0 5
42702: PUSH
42703: LD_INT 0
42705: PUSH
42706: LD_INT 1
42708: PUSH
42709: LD_INT 2
42711: PUSH
42712: LD_INT 3
42714: PUSH
42715: LD_INT 4
42717: PUSH
42718: LD_INT 5
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: IN
42729: NOT
42730: OR
42731: PUSH
42732: LD_VAR 0 3
42736: PPUSH
42737: LD_VAR 0 4
42741: PPUSH
42742: CALL_OW 488
42746: NOT
42747: OR
42748: IFFALSE 42752
// exit ;
42750: GO 43488
// side := GetSide ( depot ) ;
42752: LD_ADDR_VAR 0 9
42756: PUSH
42757: LD_VAR 0 1
42761: PPUSH
42762: CALL_OW 255
42766: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42767: LD_VAR 0 9
42771: PPUSH
42772: LD_VAR 0 2
42776: PPUSH
42777: CALL 42265 0 2
42781: NOT
42782: IFFALSE 42786
// exit ;
42784: GO 43488
// pom := GetBase ( depot ) ;
42786: LD_ADDR_VAR 0 10
42790: PUSH
42791: LD_VAR 0 1
42795: PPUSH
42796: CALL_OW 274
42800: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42801: LD_ADDR_VAR 0 11
42805: PUSH
42806: LD_VAR 0 2
42810: PPUSH
42811: LD_VAR 0 1
42815: PPUSH
42816: CALL_OW 248
42820: PPUSH
42821: CALL_OW 450
42825: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42826: LD_VAR 0 10
42830: PPUSH
42831: LD_INT 1
42833: PPUSH
42834: CALL_OW 275
42838: PUSH
42839: LD_VAR 0 11
42843: PUSH
42844: LD_INT 1
42846: ARRAY
42847: GREATEREQUAL
42848: PUSH
42849: LD_VAR 0 10
42853: PPUSH
42854: LD_INT 2
42856: PPUSH
42857: CALL_OW 275
42861: PUSH
42862: LD_VAR 0 11
42866: PUSH
42867: LD_INT 2
42869: ARRAY
42870: GREATEREQUAL
42871: AND
42872: PUSH
42873: LD_VAR 0 10
42877: PPUSH
42878: LD_INT 3
42880: PPUSH
42881: CALL_OW 275
42885: PUSH
42886: LD_VAR 0 11
42890: PUSH
42891: LD_INT 3
42893: ARRAY
42894: GREATEREQUAL
42895: AND
42896: NOT
42897: IFFALSE 42901
// exit ;
42899: GO 43488
// if GetBType ( depot ) = b_depot then
42901: LD_VAR 0 1
42905: PPUSH
42906: CALL_OW 266
42910: PUSH
42911: LD_INT 0
42913: EQUAL
42914: IFFALSE 42926
// dist := 28 else
42916: LD_ADDR_VAR 0 14
42920: PUSH
42921: LD_INT 28
42923: ST_TO_ADDR
42924: GO 42934
// dist := 36 ;
42926: LD_ADDR_VAR 0 14
42930: PUSH
42931: LD_INT 36
42933: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42934: LD_VAR 0 1
42938: PPUSH
42939: LD_VAR 0 3
42943: PPUSH
42944: LD_VAR 0 4
42948: PPUSH
42949: CALL_OW 297
42953: PUSH
42954: LD_VAR 0 14
42958: GREATER
42959: IFFALSE 42963
// exit ;
42961: GO 43488
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42963: LD_ADDR_VAR 0 12
42967: PUSH
42968: LD_VAR 0 2
42972: PPUSH
42973: LD_VAR 0 3
42977: PPUSH
42978: LD_VAR 0 4
42982: PPUSH
42983: LD_VAR 0 5
42987: PPUSH
42988: LD_VAR 0 1
42992: PPUSH
42993: CALL_OW 248
42997: PPUSH
42998: LD_INT 0
43000: PPUSH
43001: CALL 43493 0 6
43005: ST_TO_ADDR
// if not hexes then
43006: LD_VAR 0 12
43010: NOT
43011: IFFALSE 43015
// exit ;
43013: GO 43488
// hex := GetHexInfo ( x , y ) ;
43015: LD_ADDR_VAR 0 15
43019: PUSH
43020: LD_VAR 0 3
43024: PPUSH
43025: LD_VAR 0 4
43029: PPUSH
43030: CALL_OW 546
43034: ST_TO_ADDR
// if hex [ 1 ] then
43035: LD_VAR 0 15
43039: PUSH
43040: LD_INT 1
43042: ARRAY
43043: IFFALSE 43047
// exit ;
43045: GO 43488
// height := hex [ 2 ] ;
43047: LD_ADDR_VAR 0 13
43051: PUSH
43052: LD_VAR 0 15
43056: PUSH
43057: LD_INT 2
43059: ARRAY
43060: ST_TO_ADDR
// for i = 1 to hexes do
43061: LD_ADDR_VAR 0 7
43065: PUSH
43066: DOUBLE
43067: LD_INT 1
43069: DEC
43070: ST_TO_ADDR
43071: LD_VAR 0 12
43075: PUSH
43076: FOR_TO
43077: IFFALSE 43407
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43079: LD_VAR 0 12
43083: PUSH
43084: LD_VAR 0 7
43088: ARRAY
43089: PUSH
43090: LD_INT 1
43092: ARRAY
43093: PPUSH
43094: LD_VAR 0 12
43098: PUSH
43099: LD_VAR 0 7
43103: ARRAY
43104: PUSH
43105: LD_INT 2
43107: ARRAY
43108: PPUSH
43109: CALL_OW 488
43113: NOT
43114: PUSH
43115: LD_VAR 0 12
43119: PUSH
43120: LD_VAR 0 7
43124: ARRAY
43125: PUSH
43126: LD_INT 1
43128: ARRAY
43129: PPUSH
43130: LD_VAR 0 12
43134: PUSH
43135: LD_VAR 0 7
43139: ARRAY
43140: PUSH
43141: LD_INT 2
43143: ARRAY
43144: PPUSH
43145: CALL_OW 428
43149: PUSH
43150: LD_INT 0
43152: GREATER
43153: OR
43154: PUSH
43155: LD_VAR 0 12
43159: PUSH
43160: LD_VAR 0 7
43164: ARRAY
43165: PUSH
43166: LD_INT 1
43168: ARRAY
43169: PPUSH
43170: LD_VAR 0 12
43174: PUSH
43175: LD_VAR 0 7
43179: ARRAY
43180: PUSH
43181: LD_INT 2
43183: ARRAY
43184: PPUSH
43185: CALL_OW 351
43189: OR
43190: IFFALSE 43196
// exit ;
43192: POP
43193: POP
43194: GO 43488
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43196: LD_ADDR_VAR 0 8
43200: PUSH
43201: LD_VAR 0 12
43205: PUSH
43206: LD_VAR 0 7
43210: ARRAY
43211: PUSH
43212: LD_INT 1
43214: ARRAY
43215: PPUSH
43216: LD_VAR 0 12
43220: PUSH
43221: LD_VAR 0 7
43225: ARRAY
43226: PUSH
43227: LD_INT 2
43229: ARRAY
43230: PPUSH
43231: CALL_OW 546
43235: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43236: LD_VAR 0 8
43240: PUSH
43241: LD_INT 1
43243: ARRAY
43244: PUSH
43245: LD_VAR 0 8
43249: PUSH
43250: LD_INT 2
43252: ARRAY
43253: PUSH
43254: LD_VAR 0 13
43258: PUSH
43259: LD_INT 2
43261: PLUS
43262: GREATER
43263: OR
43264: PUSH
43265: LD_VAR 0 8
43269: PUSH
43270: LD_INT 2
43272: ARRAY
43273: PUSH
43274: LD_VAR 0 13
43278: PUSH
43279: LD_INT 2
43281: MINUS
43282: LESS
43283: OR
43284: PUSH
43285: LD_VAR 0 8
43289: PUSH
43290: LD_INT 3
43292: ARRAY
43293: PUSH
43294: LD_INT 0
43296: PUSH
43297: LD_INT 8
43299: PUSH
43300: LD_INT 9
43302: PUSH
43303: LD_INT 10
43305: PUSH
43306: LD_INT 11
43308: PUSH
43309: LD_INT 12
43311: PUSH
43312: LD_INT 13
43314: PUSH
43315: LD_INT 16
43317: PUSH
43318: LD_INT 17
43320: PUSH
43321: LD_INT 18
43323: PUSH
43324: LD_INT 19
43326: PUSH
43327: LD_INT 20
43329: PUSH
43330: LD_INT 21
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: IN
43348: NOT
43349: OR
43350: PUSH
43351: LD_VAR 0 8
43355: PUSH
43356: LD_INT 5
43358: ARRAY
43359: NOT
43360: OR
43361: PUSH
43362: LD_VAR 0 8
43366: PUSH
43367: LD_INT 6
43369: ARRAY
43370: PUSH
43371: LD_INT 1
43373: PUSH
43374: LD_INT 2
43376: PUSH
43377: LD_INT 7
43379: PUSH
43380: LD_INT 9
43382: PUSH
43383: LD_INT 10
43385: PUSH
43386: LD_INT 11
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: IN
43397: NOT
43398: OR
43399: IFFALSE 43405
// exit ;
43401: POP
43402: POP
43403: GO 43488
// end ;
43405: GO 43076
43407: POP
43408: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43409: LD_VAR 0 9
43413: PPUSH
43414: LD_VAR 0 3
43418: PPUSH
43419: LD_VAR 0 4
43423: PPUSH
43424: LD_INT 20
43426: PPUSH
43427: CALL 35440 0 4
43431: PUSH
43432: LD_INT 4
43434: ARRAY
43435: IFFALSE 43439
// exit ;
43437: GO 43488
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43439: LD_VAR 0 2
43443: PUSH
43444: LD_INT 29
43446: PUSH
43447: LD_INT 30
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: IN
43454: PUSH
43455: LD_VAR 0 3
43459: PPUSH
43460: LD_VAR 0 4
43464: PPUSH
43465: LD_VAR 0 9
43469: PPUSH
43470: CALL_OW 440
43474: NOT
43475: AND
43476: IFFALSE 43480
// exit ;
43478: GO 43488
// result := true ;
43480: LD_ADDR_VAR 0 6
43484: PUSH
43485: LD_INT 1
43487: ST_TO_ADDR
// end ;
43488: LD_VAR 0 6
43492: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43493: LD_INT 0
43495: PPUSH
43496: PPUSH
43497: PPUSH
43498: PPUSH
43499: PPUSH
43500: PPUSH
43501: PPUSH
43502: PPUSH
43503: PPUSH
43504: PPUSH
43505: PPUSH
43506: PPUSH
43507: PPUSH
43508: PPUSH
43509: PPUSH
43510: PPUSH
43511: PPUSH
43512: PPUSH
43513: PPUSH
43514: PPUSH
43515: PPUSH
43516: PPUSH
43517: PPUSH
43518: PPUSH
43519: PPUSH
43520: PPUSH
43521: PPUSH
43522: PPUSH
43523: PPUSH
43524: PPUSH
43525: PPUSH
43526: PPUSH
43527: PPUSH
43528: PPUSH
43529: PPUSH
43530: PPUSH
43531: PPUSH
43532: PPUSH
43533: PPUSH
43534: PPUSH
43535: PPUSH
43536: PPUSH
43537: PPUSH
43538: PPUSH
43539: PPUSH
43540: PPUSH
43541: PPUSH
43542: PPUSH
43543: PPUSH
43544: PPUSH
43545: PPUSH
43546: PPUSH
43547: PPUSH
43548: PPUSH
43549: PPUSH
43550: PPUSH
43551: PPUSH
43552: PPUSH
// result = [ ] ;
43553: LD_ADDR_VAR 0 7
43557: PUSH
43558: EMPTY
43559: ST_TO_ADDR
// temp_list = [ ] ;
43560: LD_ADDR_VAR 0 9
43564: PUSH
43565: EMPTY
43566: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43567: LD_VAR 0 4
43571: PUSH
43572: LD_INT 0
43574: PUSH
43575: LD_INT 1
43577: PUSH
43578: LD_INT 2
43580: PUSH
43581: LD_INT 3
43583: PUSH
43584: LD_INT 4
43586: PUSH
43587: LD_INT 5
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: IN
43598: NOT
43599: PUSH
43600: LD_VAR 0 1
43604: PUSH
43605: LD_INT 0
43607: PUSH
43608: LD_INT 1
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: IN
43615: PUSH
43616: LD_VAR 0 5
43620: PUSH
43621: LD_INT 1
43623: PUSH
43624: LD_INT 2
43626: PUSH
43627: LD_INT 3
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: LIST
43634: IN
43635: NOT
43636: AND
43637: OR
43638: IFFALSE 43642
// exit ;
43640: GO 62033
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43642: LD_VAR 0 1
43646: PUSH
43647: LD_INT 6
43649: PUSH
43650: LD_INT 7
43652: PUSH
43653: LD_INT 8
43655: PUSH
43656: LD_INT 13
43658: PUSH
43659: LD_INT 12
43661: PUSH
43662: LD_INT 15
43664: PUSH
43665: LD_INT 11
43667: PUSH
43668: LD_INT 14
43670: PUSH
43671: LD_INT 10
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: IN
43685: IFFALSE 43695
// btype = b_lab ;
43687: LD_ADDR_VAR 0 1
43691: PUSH
43692: LD_INT 6
43694: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43695: LD_VAR 0 6
43699: PUSH
43700: LD_INT 0
43702: PUSH
43703: LD_INT 1
43705: PUSH
43706: LD_INT 2
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: LIST
43713: IN
43714: NOT
43715: PUSH
43716: LD_VAR 0 1
43720: PUSH
43721: LD_INT 0
43723: PUSH
43724: LD_INT 1
43726: PUSH
43727: LD_INT 2
43729: PUSH
43730: LD_INT 3
43732: PUSH
43733: LD_INT 6
43735: PUSH
43736: LD_INT 36
43738: PUSH
43739: LD_INT 4
43741: PUSH
43742: LD_INT 5
43744: PUSH
43745: LD_INT 31
43747: PUSH
43748: LD_INT 32
43750: PUSH
43751: LD_INT 33
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: IN
43767: NOT
43768: PUSH
43769: LD_VAR 0 6
43773: PUSH
43774: LD_INT 1
43776: EQUAL
43777: AND
43778: OR
43779: PUSH
43780: LD_VAR 0 1
43784: PUSH
43785: LD_INT 2
43787: PUSH
43788: LD_INT 3
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: IN
43795: NOT
43796: PUSH
43797: LD_VAR 0 6
43801: PUSH
43802: LD_INT 2
43804: EQUAL
43805: AND
43806: OR
43807: IFFALSE 43817
// mode = 0 ;
43809: LD_ADDR_VAR 0 6
43813: PUSH
43814: LD_INT 0
43816: ST_TO_ADDR
// case mode of 0 :
43817: LD_VAR 0 6
43821: PUSH
43822: LD_INT 0
43824: DOUBLE
43825: EQUAL
43826: IFTRUE 43830
43828: GO 55283
43830: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43831: LD_ADDR_VAR 0 11
43835: PUSH
43836: LD_INT 0
43838: PUSH
43839: LD_INT 0
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: LD_INT 0
43848: PUSH
43849: LD_INT 1
43851: NEG
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 1
43859: PUSH
43860: LD_INT 0
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 1
43869: PUSH
43870: LD_INT 1
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 0
43879: PUSH
43880: LD_INT 1
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: LD_INT 1
43889: NEG
43890: PUSH
43891: LD_INT 0
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 1
43900: NEG
43901: PUSH
43902: LD_INT 1
43904: NEG
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 1
43912: NEG
43913: PUSH
43914: LD_INT 2
43916: NEG
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 0
43924: PUSH
43925: LD_INT 2
43927: NEG
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 1
43935: PUSH
43936: LD_INT 1
43938: NEG
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 1
43946: PUSH
43947: LD_INT 2
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 0
43956: PUSH
43957: LD_INT 2
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 1
43966: NEG
43967: PUSH
43968: LD_INT 1
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 1
43977: PUSH
43978: LD_INT 3
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 0
43987: PUSH
43988: LD_INT 3
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 1
43997: NEG
43998: PUSH
43999: LD_INT 2
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44024: LD_ADDR_VAR 0 12
44028: PUSH
44029: LD_INT 0
44031: PUSH
44032: LD_INT 0
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 0
44041: PUSH
44042: LD_INT 1
44044: NEG
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 1
44052: PUSH
44053: LD_INT 0
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 1
44062: PUSH
44063: LD_INT 1
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 0
44072: PUSH
44073: LD_INT 1
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 1
44082: NEG
44083: PUSH
44084: LD_INT 0
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 1
44093: NEG
44094: PUSH
44095: LD_INT 1
44097: NEG
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 1
44105: PUSH
44106: LD_INT 1
44108: NEG
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: LD_INT 2
44116: PUSH
44117: LD_INT 0
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 2
44126: PUSH
44127: LD_INT 1
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: LD_INT 1
44136: NEG
44137: PUSH
44138: LD_INT 1
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 2
44147: NEG
44148: PUSH
44149: LD_INT 0
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 2
44158: NEG
44159: PUSH
44160: LD_INT 1
44162: NEG
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 2
44170: NEG
44171: PUSH
44172: LD_INT 1
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 3
44181: NEG
44182: PUSH
44183: LD_INT 0
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 3
44192: NEG
44193: PUSH
44194: LD_INT 1
44196: NEG
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44220: LD_ADDR_VAR 0 13
44224: PUSH
44225: LD_INT 0
44227: PUSH
44228: LD_INT 0
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 0
44237: PUSH
44238: LD_INT 1
44240: NEG
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 1
44248: PUSH
44249: LD_INT 0
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 1
44258: PUSH
44259: LD_INT 1
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 0
44268: PUSH
44269: LD_INT 1
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 1
44278: NEG
44279: PUSH
44280: LD_INT 0
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 1
44289: NEG
44290: PUSH
44291: LD_INT 1
44293: NEG
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 1
44301: NEG
44302: PUSH
44303: LD_INT 2
44305: NEG
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 2
44313: PUSH
44314: LD_INT 1
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 2
44323: PUSH
44324: LD_INT 2
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 1
44333: PUSH
44334: LD_INT 2
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 2
44343: NEG
44344: PUSH
44345: LD_INT 1
44347: NEG
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 2
44355: NEG
44356: PUSH
44357: LD_INT 2
44359: NEG
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 2
44367: NEG
44368: PUSH
44369: LD_INT 3
44371: NEG
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 3
44379: NEG
44380: PUSH
44381: LD_INT 2
44383: NEG
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 3
44391: NEG
44392: PUSH
44393: LD_INT 3
44395: NEG
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44419: LD_ADDR_VAR 0 14
44423: PUSH
44424: LD_INT 0
44426: PUSH
44427: LD_INT 0
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 0
44436: PUSH
44437: LD_INT 1
44439: NEG
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 1
44447: PUSH
44448: LD_INT 0
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 1
44457: PUSH
44458: LD_INT 1
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 0
44467: PUSH
44468: LD_INT 1
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 1
44477: NEG
44478: PUSH
44479: LD_INT 0
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 1
44488: NEG
44489: PUSH
44490: LD_INT 1
44492: NEG
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 1
44500: NEG
44501: PUSH
44502: LD_INT 2
44504: NEG
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 0
44512: PUSH
44513: LD_INT 2
44515: NEG
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 1
44523: PUSH
44524: LD_INT 1
44526: NEG
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 1
44534: PUSH
44535: LD_INT 2
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 0
44544: PUSH
44545: LD_INT 2
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 1
44554: NEG
44555: PUSH
44556: LD_INT 1
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 1
44565: NEG
44566: PUSH
44567: LD_INT 3
44569: NEG
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 0
44577: PUSH
44578: LD_INT 3
44580: NEG
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 1
44588: PUSH
44589: LD_INT 2
44591: NEG
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44615: LD_ADDR_VAR 0 15
44619: PUSH
44620: LD_INT 0
44622: PUSH
44623: LD_INT 0
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 0
44632: PUSH
44633: LD_INT 1
44635: NEG
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 1
44643: PUSH
44644: LD_INT 0
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 1
44653: PUSH
44654: LD_INT 1
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 0
44663: PUSH
44664: LD_INT 1
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 1
44673: NEG
44674: PUSH
44675: LD_INT 0
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 1
44684: NEG
44685: PUSH
44686: LD_INT 1
44688: NEG
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 1
44696: PUSH
44697: LD_INT 1
44699: NEG
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 2
44707: PUSH
44708: LD_INT 0
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 2
44717: PUSH
44718: LD_INT 1
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 1
44727: NEG
44728: PUSH
44729: LD_INT 1
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 2
44738: NEG
44739: PUSH
44740: LD_INT 0
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 2
44749: NEG
44750: PUSH
44751: LD_INT 1
44753: NEG
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 2
44761: PUSH
44762: LD_INT 1
44764: NEG
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 3
44772: PUSH
44773: LD_INT 0
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 3
44782: PUSH
44783: LD_INT 1
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44808: LD_ADDR_VAR 0 16
44812: PUSH
44813: LD_INT 0
44815: PUSH
44816: LD_INT 0
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 0
44825: PUSH
44826: LD_INT 1
44828: NEG
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 1
44836: PUSH
44837: LD_INT 0
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 1
44846: PUSH
44847: LD_INT 1
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 0
44856: PUSH
44857: LD_INT 1
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 1
44866: NEG
44867: PUSH
44868: LD_INT 0
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 1
44877: NEG
44878: PUSH
44879: LD_INT 1
44881: NEG
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 1
44889: NEG
44890: PUSH
44891: LD_INT 2
44893: NEG
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 2
44901: PUSH
44902: LD_INT 1
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 2
44911: PUSH
44912: LD_INT 2
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 1
44921: PUSH
44922: LD_INT 2
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 2
44931: NEG
44932: PUSH
44933: LD_INT 1
44935: NEG
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 2
44943: NEG
44944: PUSH
44945: LD_INT 2
44947: NEG
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 3
44955: PUSH
44956: LD_INT 2
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 3
44965: PUSH
44966: LD_INT 3
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 2
44975: PUSH
44976: LD_INT 3
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45001: LD_ADDR_VAR 0 17
45005: PUSH
45006: LD_INT 0
45008: PUSH
45009: LD_INT 0
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 0
45018: PUSH
45019: LD_INT 1
45021: NEG
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 1
45029: PUSH
45030: LD_INT 0
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 1
45039: PUSH
45040: LD_INT 1
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 0
45049: PUSH
45050: LD_INT 1
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 1
45059: NEG
45060: PUSH
45061: LD_INT 0
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 1
45070: NEG
45071: PUSH
45072: LD_INT 1
45074: NEG
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 1
45082: NEG
45083: PUSH
45084: LD_INT 2
45086: NEG
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 0
45094: PUSH
45095: LD_INT 2
45097: NEG
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 1
45105: PUSH
45106: LD_INT 1
45108: NEG
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 2
45116: PUSH
45117: LD_INT 0
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 2
45126: PUSH
45127: LD_INT 1
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 2
45136: PUSH
45137: LD_INT 2
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 1
45146: PUSH
45147: LD_INT 2
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 0
45156: PUSH
45157: LD_INT 2
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 1
45166: NEG
45167: PUSH
45168: LD_INT 1
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 2
45177: NEG
45178: PUSH
45179: LD_INT 0
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 2
45188: NEG
45189: PUSH
45190: LD_INT 1
45192: NEG
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 2
45200: NEG
45201: PUSH
45202: LD_INT 2
45204: NEG
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45231: LD_ADDR_VAR 0 18
45235: PUSH
45236: LD_INT 0
45238: PUSH
45239: LD_INT 0
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 0
45248: PUSH
45249: LD_INT 1
45251: NEG
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 1
45259: PUSH
45260: LD_INT 0
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 1
45269: PUSH
45270: LD_INT 1
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 0
45279: PUSH
45280: LD_INT 1
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 1
45289: NEG
45290: PUSH
45291: LD_INT 0
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 1
45300: NEG
45301: PUSH
45302: LD_INT 1
45304: NEG
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 1
45312: NEG
45313: PUSH
45314: LD_INT 2
45316: NEG
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 0
45324: PUSH
45325: LD_INT 2
45327: NEG
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 1
45335: PUSH
45336: LD_INT 1
45338: NEG
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 2
45346: PUSH
45347: LD_INT 0
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 2
45356: PUSH
45357: LD_INT 1
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 2
45366: PUSH
45367: LD_INT 2
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 1
45376: PUSH
45377: LD_INT 2
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 0
45386: PUSH
45387: LD_INT 2
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 1
45396: NEG
45397: PUSH
45398: LD_INT 1
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 2
45407: NEG
45408: PUSH
45409: LD_INT 0
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 2
45418: NEG
45419: PUSH
45420: LD_INT 1
45422: NEG
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 2
45430: NEG
45431: PUSH
45432: LD_INT 2
45434: NEG
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45461: LD_ADDR_VAR 0 19
45465: PUSH
45466: LD_INT 0
45468: PUSH
45469: LD_INT 0
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 0
45478: PUSH
45479: LD_INT 1
45481: NEG
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 1
45489: PUSH
45490: LD_INT 0
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 1
45499: PUSH
45500: LD_INT 1
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 0
45509: PUSH
45510: LD_INT 1
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 1
45519: NEG
45520: PUSH
45521: LD_INT 0
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 1
45530: NEG
45531: PUSH
45532: LD_INT 1
45534: NEG
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 1
45542: NEG
45543: PUSH
45544: LD_INT 2
45546: NEG
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 0
45554: PUSH
45555: LD_INT 2
45557: NEG
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 1
45565: PUSH
45566: LD_INT 1
45568: NEG
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 2
45576: PUSH
45577: LD_INT 0
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 2
45586: PUSH
45587: LD_INT 1
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 2
45596: PUSH
45597: LD_INT 2
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 1
45606: PUSH
45607: LD_INT 2
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 0
45616: PUSH
45617: LD_INT 2
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 1
45626: NEG
45627: PUSH
45628: LD_INT 1
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 2
45637: NEG
45638: PUSH
45639: LD_INT 0
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 2
45648: NEG
45649: PUSH
45650: LD_INT 1
45652: NEG
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 2
45660: NEG
45661: PUSH
45662: LD_INT 2
45664: NEG
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45691: LD_ADDR_VAR 0 20
45695: PUSH
45696: LD_INT 0
45698: PUSH
45699: LD_INT 0
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 0
45708: PUSH
45709: LD_INT 1
45711: NEG
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 1
45719: PUSH
45720: LD_INT 0
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 1
45729: PUSH
45730: LD_INT 1
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 0
45739: PUSH
45740: LD_INT 1
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 1
45749: NEG
45750: PUSH
45751: LD_INT 0
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 1
45760: NEG
45761: PUSH
45762: LD_INT 1
45764: NEG
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 1
45772: NEG
45773: PUSH
45774: LD_INT 2
45776: NEG
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 0
45784: PUSH
45785: LD_INT 2
45787: NEG
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 1
45795: PUSH
45796: LD_INT 1
45798: NEG
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 2
45806: PUSH
45807: LD_INT 0
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 2
45816: PUSH
45817: LD_INT 1
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 2
45826: PUSH
45827: LD_INT 2
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 1
45836: PUSH
45837: LD_INT 2
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 0
45846: PUSH
45847: LD_INT 2
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 1
45856: NEG
45857: PUSH
45858: LD_INT 1
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 2
45867: NEG
45868: PUSH
45869: LD_INT 0
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 2
45878: NEG
45879: PUSH
45880: LD_INT 1
45882: NEG
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 2
45890: NEG
45891: PUSH
45892: LD_INT 2
45894: NEG
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45921: LD_ADDR_VAR 0 21
45925: PUSH
45926: LD_INT 0
45928: PUSH
45929: LD_INT 0
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 0
45938: PUSH
45939: LD_INT 1
45941: NEG
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 1
45949: PUSH
45950: LD_INT 0
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 1
45959: PUSH
45960: LD_INT 1
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 0
45969: PUSH
45970: LD_INT 1
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 1
45979: NEG
45980: PUSH
45981: LD_INT 0
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 1
45990: NEG
45991: PUSH
45992: LD_INT 1
45994: NEG
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 1
46002: NEG
46003: PUSH
46004: LD_INT 2
46006: NEG
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 0
46014: PUSH
46015: LD_INT 2
46017: NEG
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 1
46025: PUSH
46026: LD_INT 1
46028: NEG
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 2
46036: PUSH
46037: LD_INT 0
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 2
46046: PUSH
46047: LD_INT 1
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 2
46056: PUSH
46057: LD_INT 2
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 1
46066: PUSH
46067: LD_INT 2
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 0
46076: PUSH
46077: LD_INT 2
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 1
46086: NEG
46087: PUSH
46088: LD_INT 1
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 2
46097: NEG
46098: PUSH
46099: LD_INT 0
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 2
46108: NEG
46109: PUSH
46110: LD_INT 1
46112: NEG
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 2
46120: NEG
46121: PUSH
46122: LD_INT 2
46124: NEG
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46151: LD_ADDR_VAR 0 22
46155: PUSH
46156: LD_INT 0
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 0
46168: PUSH
46169: LD_INT 1
46171: NEG
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 1
46179: PUSH
46180: LD_INT 0
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 1
46189: PUSH
46190: LD_INT 1
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 0
46199: PUSH
46200: LD_INT 1
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 1
46209: NEG
46210: PUSH
46211: LD_INT 0
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 1
46220: NEG
46221: PUSH
46222: LD_INT 1
46224: NEG
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 1
46232: NEG
46233: PUSH
46234: LD_INT 2
46236: NEG
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 0
46244: PUSH
46245: LD_INT 2
46247: NEG
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 1
46255: PUSH
46256: LD_INT 1
46258: NEG
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 2
46266: PUSH
46267: LD_INT 0
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 2
46276: PUSH
46277: LD_INT 1
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 2
46286: PUSH
46287: LD_INT 2
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 1
46296: PUSH
46297: LD_INT 2
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 0
46306: PUSH
46307: LD_INT 2
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 1
46316: NEG
46317: PUSH
46318: LD_INT 1
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 2
46327: NEG
46328: PUSH
46329: LD_INT 0
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 2
46338: NEG
46339: PUSH
46340: LD_INT 1
46342: NEG
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 2
46350: NEG
46351: PUSH
46352: LD_INT 2
46354: NEG
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46381: LD_ADDR_VAR 0 23
46385: PUSH
46386: LD_INT 0
46388: PUSH
46389: LD_INT 0
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 0
46398: PUSH
46399: LD_INT 1
46401: NEG
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 1
46409: PUSH
46410: LD_INT 0
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 1
46419: PUSH
46420: LD_INT 1
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 0
46429: PUSH
46430: LD_INT 1
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 1
46439: NEG
46440: PUSH
46441: LD_INT 0
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 1
46450: NEG
46451: PUSH
46452: LD_INT 1
46454: NEG
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 1
46462: NEG
46463: PUSH
46464: LD_INT 2
46466: NEG
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 0
46474: PUSH
46475: LD_INT 2
46477: NEG
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 1
46485: PUSH
46486: LD_INT 1
46488: NEG
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 2
46496: PUSH
46497: LD_INT 0
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 2
46506: PUSH
46507: LD_INT 1
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 2
46516: PUSH
46517: LD_INT 2
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 1
46526: PUSH
46527: LD_INT 2
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 0
46536: PUSH
46537: LD_INT 2
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 1
46546: NEG
46547: PUSH
46548: LD_INT 1
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 2
46557: NEG
46558: PUSH
46559: LD_INT 0
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 2
46568: NEG
46569: PUSH
46570: LD_INT 1
46572: NEG
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 2
46580: NEG
46581: PUSH
46582: LD_INT 2
46584: NEG
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 2
46592: NEG
46593: PUSH
46594: LD_INT 3
46596: NEG
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 1
46604: NEG
46605: PUSH
46606: LD_INT 3
46608: NEG
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 1
46616: PUSH
46617: LD_INT 2
46619: NEG
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 2
46627: PUSH
46628: LD_INT 1
46630: NEG
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46661: LD_ADDR_VAR 0 24
46665: PUSH
46666: LD_INT 0
46668: PUSH
46669: LD_INT 0
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 0
46678: PUSH
46679: LD_INT 1
46681: NEG
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 1
46689: PUSH
46690: LD_INT 0
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 1
46699: PUSH
46700: LD_INT 1
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 0
46709: PUSH
46710: LD_INT 1
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 1
46719: NEG
46720: PUSH
46721: LD_INT 0
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 1
46730: NEG
46731: PUSH
46732: LD_INT 1
46734: NEG
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 1
46742: NEG
46743: PUSH
46744: LD_INT 2
46746: NEG
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 0
46754: PUSH
46755: LD_INT 2
46757: NEG
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 1
46765: PUSH
46766: LD_INT 1
46768: NEG
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 2
46776: PUSH
46777: LD_INT 0
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 2
46786: PUSH
46787: LD_INT 1
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 2
46796: PUSH
46797: LD_INT 2
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: LD_INT 2
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 0
46816: PUSH
46817: LD_INT 2
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 1
46826: NEG
46827: PUSH
46828: LD_INT 1
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 2
46837: NEG
46838: PUSH
46839: LD_INT 0
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 2
46848: NEG
46849: PUSH
46850: LD_INT 1
46852: NEG
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 2
46860: NEG
46861: PUSH
46862: LD_INT 2
46864: NEG
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 1
46872: PUSH
46873: LD_INT 2
46875: NEG
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 2
46883: PUSH
46884: LD_INT 1
46886: NEG
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 3
46894: PUSH
46895: LD_INT 1
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 3
46904: PUSH
46905: LD_INT 2
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46937: LD_ADDR_VAR 0 25
46941: PUSH
46942: LD_INT 0
46944: PUSH
46945: LD_INT 0
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 0
46954: PUSH
46955: LD_INT 1
46957: NEG
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 1
46965: PUSH
46966: LD_INT 0
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 1
46975: PUSH
46976: LD_INT 1
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 0
46985: PUSH
46986: LD_INT 1
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 1
46995: NEG
46996: PUSH
46997: LD_INT 0
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 1
47006: NEG
47007: PUSH
47008: LD_INT 1
47010: NEG
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 1
47018: NEG
47019: PUSH
47020: LD_INT 2
47022: NEG
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 0
47030: PUSH
47031: LD_INT 2
47033: NEG
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 1
47041: PUSH
47042: LD_INT 1
47044: NEG
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 2
47052: PUSH
47053: LD_INT 0
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 2
47062: PUSH
47063: LD_INT 1
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 2
47072: PUSH
47073: LD_INT 2
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 1
47082: PUSH
47083: LD_INT 2
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 0
47092: PUSH
47093: LD_INT 2
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 1
47102: NEG
47103: PUSH
47104: LD_INT 1
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 2
47113: NEG
47114: PUSH
47115: LD_INT 0
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 2
47124: NEG
47125: PUSH
47126: LD_INT 1
47128: NEG
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 2
47136: NEG
47137: PUSH
47138: LD_INT 2
47140: NEG
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 3
47148: PUSH
47149: LD_INT 1
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 3
47158: PUSH
47159: LD_INT 2
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 2
47168: PUSH
47169: LD_INT 3
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 1
47178: PUSH
47179: LD_INT 3
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47211: LD_ADDR_VAR 0 26
47215: PUSH
47216: LD_INT 0
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 0
47228: PUSH
47229: LD_INT 1
47231: NEG
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 1
47239: PUSH
47240: LD_INT 0
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 1
47249: PUSH
47250: LD_INT 1
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 0
47259: PUSH
47260: LD_INT 1
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 1
47269: NEG
47270: PUSH
47271: LD_INT 0
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 1
47280: NEG
47281: PUSH
47282: LD_INT 1
47284: NEG
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 1
47292: NEG
47293: PUSH
47294: LD_INT 2
47296: NEG
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: LD_INT 2
47307: NEG
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 1
47315: PUSH
47316: LD_INT 1
47318: NEG
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 2
47326: PUSH
47327: LD_INT 0
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 2
47336: PUSH
47337: LD_INT 1
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 2
47346: PUSH
47347: LD_INT 2
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 1
47356: PUSH
47357: LD_INT 2
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 0
47366: PUSH
47367: LD_INT 2
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 1
47376: NEG
47377: PUSH
47378: LD_INT 1
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 2
47387: NEG
47388: PUSH
47389: LD_INT 0
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 2
47398: NEG
47399: PUSH
47400: LD_INT 1
47402: NEG
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 2
47410: NEG
47411: PUSH
47412: LD_INT 2
47414: NEG
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 2
47422: PUSH
47423: LD_INT 3
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 1
47432: PUSH
47433: LD_INT 3
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 1
47442: NEG
47443: PUSH
47444: LD_INT 2
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 2
47453: NEG
47454: PUSH
47455: LD_INT 1
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47487: LD_ADDR_VAR 0 27
47491: PUSH
47492: LD_INT 0
47494: PUSH
47495: LD_INT 0
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 0
47504: PUSH
47505: LD_INT 1
47507: NEG
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 1
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 1
47525: PUSH
47526: LD_INT 1
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 0
47535: PUSH
47536: LD_INT 1
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 1
47545: NEG
47546: PUSH
47547: LD_INT 0
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: LD_INT 1
47560: NEG
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 1
47568: NEG
47569: PUSH
47570: LD_INT 2
47572: NEG
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 0
47580: PUSH
47581: LD_INT 2
47583: NEG
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 1
47591: PUSH
47592: LD_INT 1
47594: NEG
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 2
47602: PUSH
47603: LD_INT 0
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 2
47612: PUSH
47613: LD_INT 1
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 2
47622: PUSH
47623: LD_INT 2
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 1
47632: PUSH
47633: LD_INT 2
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 0
47642: PUSH
47643: LD_INT 2
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 1
47652: NEG
47653: PUSH
47654: LD_INT 1
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 2
47663: NEG
47664: PUSH
47665: LD_INT 0
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 2
47674: NEG
47675: PUSH
47676: LD_INT 1
47678: NEG
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 2
47686: NEG
47687: PUSH
47688: LD_INT 2
47690: NEG
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: LD_INT 2
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 2
47709: NEG
47710: PUSH
47711: LD_INT 1
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 3
47720: NEG
47721: PUSH
47722: LD_INT 1
47724: NEG
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 3
47732: NEG
47733: PUSH
47734: LD_INT 2
47736: NEG
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47767: LD_ADDR_VAR 0 28
47771: PUSH
47772: LD_INT 0
47774: PUSH
47775: LD_INT 0
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 0
47784: PUSH
47785: LD_INT 1
47787: NEG
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 1
47795: PUSH
47796: LD_INT 0
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 1
47805: PUSH
47806: LD_INT 1
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 0
47815: PUSH
47816: LD_INT 1
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 1
47825: NEG
47826: PUSH
47827: LD_INT 0
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 1
47836: NEG
47837: PUSH
47838: LD_INT 1
47840: NEG
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 1
47848: NEG
47849: PUSH
47850: LD_INT 2
47852: NEG
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 0
47860: PUSH
47861: LD_INT 2
47863: NEG
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 1
47871: PUSH
47872: LD_INT 1
47874: NEG
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 2
47882: PUSH
47883: LD_INT 0
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 2
47892: PUSH
47893: LD_INT 1
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 2
47902: PUSH
47903: LD_INT 2
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 1
47912: PUSH
47913: LD_INT 2
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 0
47922: PUSH
47923: LD_INT 2
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 1
47932: NEG
47933: PUSH
47934: LD_INT 1
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 2
47943: NEG
47944: PUSH
47945: LD_INT 0
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 2
47954: NEG
47955: PUSH
47956: LD_INT 1
47958: NEG
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 2
47966: NEG
47967: PUSH
47968: LD_INT 2
47970: NEG
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 2
47978: NEG
47979: PUSH
47980: LD_INT 3
47982: NEG
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 1
47990: NEG
47991: PUSH
47992: LD_INT 3
47994: NEG
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 3
48002: NEG
48003: PUSH
48004: LD_INT 1
48006: NEG
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 3
48014: NEG
48015: PUSH
48016: LD_INT 2
48018: NEG
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48049: LD_ADDR_VAR 0 29
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: LD_INT 0
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 0
48066: PUSH
48067: LD_INT 1
48069: NEG
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 1
48077: PUSH
48078: LD_INT 0
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 1
48087: PUSH
48088: LD_INT 1
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 0
48097: PUSH
48098: LD_INT 1
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 1
48107: NEG
48108: PUSH
48109: LD_INT 0
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 1
48118: NEG
48119: PUSH
48120: LD_INT 1
48122: NEG
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 1
48130: NEG
48131: PUSH
48132: LD_INT 2
48134: NEG
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 0
48142: PUSH
48143: LD_INT 2
48145: NEG
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 1
48153: PUSH
48154: LD_INT 1
48156: NEG
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 2
48164: PUSH
48165: LD_INT 0
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 2
48174: PUSH
48175: LD_INT 1
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 1
48184: PUSH
48185: LD_INT 2
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 0
48194: PUSH
48195: LD_INT 2
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 1
48204: NEG
48205: PUSH
48206: LD_INT 1
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 2
48215: NEG
48216: PUSH
48217: LD_INT 1
48219: NEG
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 2
48227: NEG
48228: PUSH
48229: LD_INT 2
48231: NEG
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 2
48239: NEG
48240: PUSH
48241: LD_INT 3
48243: NEG
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 2
48251: PUSH
48252: LD_INT 1
48254: NEG
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 3
48262: PUSH
48263: LD_INT 1
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 1
48272: PUSH
48273: LD_INT 3
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 1
48282: NEG
48283: PUSH
48284: LD_INT 2
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 3
48293: NEG
48294: PUSH
48295: LD_INT 2
48297: NEG
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48328: LD_ADDR_VAR 0 30
48332: PUSH
48333: LD_INT 0
48335: PUSH
48336: LD_INT 0
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: LD_INT 1
48348: NEG
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 1
48356: PUSH
48357: LD_INT 0
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 1
48366: PUSH
48367: LD_INT 1
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 0
48376: PUSH
48377: LD_INT 1
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 1
48386: NEG
48387: PUSH
48388: LD_INT 0
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 1
48397: NEG
48398: PUSH
48399: LD_INT 1
48401: NEG
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 1
48409: NEG
48410: PUSH
48411: LD_INT 2
48413: NEG
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 0
48421: PUSH
48422: LD_INT 2
48424: NEG
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 1
48432: PUSH
48433: LD_INT 1
48435: NEG
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 2
48443: PUSH
48444: LD_INT 0
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 2
48453: PUSH
48454: LD_INT 1
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 2
48463: PUSH
48464: LD_INT 2
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 1
48473: PUSH
48474: LD_INT 2
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 1
48483: NEG
48484: PUSH
48485: LD_INT 1
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 2
48494: NEG
48495: PUSH
48496: LD_INT 0
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 2
48505: NEG
48506: PUSH
48507: LD_INT 1
48509: NEG
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 1
48517: NEG
48518: PUSH
48519: LD_INT 3
48521: NEG
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 1
48529: PUSH
48530: LD_INT 2
48532: NEG
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 3
48540: PUSH
48541: LD_INT 2
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 2
48550: PUSH
48551: LD_INT 3
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 2
48560: NEG
48561: PUSH
48562: LD_INT 1
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 3
48571: NEG
48572: PUSH
48573: LD_INT 1
48575: NEG
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48606: LD_ADDR_VAR 0 31
48610: PUSH
48611: LD_INT 0
48613: PUSH
48614: LD_INT 0
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 0
48623: PUSH
48624: LD_INT 1
48626: NEG
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 1
48634: PUSH
48635: LD_INT 0
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 1
48644: PUSH
48645: LD_INT 1
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 0
48654: PUSH
48655: LD_INT 1
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 1
48664: NEG
48665: PUSH
48666: LD_INT 0
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 1
48675: NEG
48676: PUSH
48677: LD_INT 1
48679: NEG
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 1
48687: NEG
48688: PUSH
48689: LD_INT 2
48691: NEG
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 1
48699: PUSH
48700: LD_INT 1
48702: NEG
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 2
48710: PUSH
48711: LD_INT 0
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 2
48720: PUSH
48721: LD_INT 1
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 2
48730: PUSH
48731: LD_INT 2
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 1
48740: PUSH
48741: LD_INT 2
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 0
48750: PUSH
48751: LD_INT 2
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 1
48760: NEG
48761: PUSH
48762: LD_INT 1
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 2
48771: NEG
48772: PUSH
48773: LD_INT 1
48775: NEG
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 2
48783: NEG
48784: PUSH
48785: LD_INT 2
48787: NEG
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 2
48795: NEG
48796: PUSH
48797: LD_INT 3
48799: NEG
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 2
48807: PUSH
48808: LD_INT 1
48810: NEG
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 3
48818: PUSH
48819: LD_INT 1
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 1
48828: PUSH
48829: LD_INT 3
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 1
48838: NEG
48839: PUSH
48840: LD_INT 2
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 3
48849: NEG
48850: PUSH
48851: LD_INT 2
48853: NEG
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48884: LD_ADDR_VAR 0 32
48888: PUSH
48889: LD_INT 0
48891: PUSH
48892: LD_INT 0
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 0
48901: PUSH
48902: LD_INT 1
48904: NEG
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 1
48912: PUSH
48913: LD_INT 0
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 1
48922: PUSH
48923: LD_INT 1
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 0
48932: PUSH
48933: LD_INT 1
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 1
48942: NEG
48943: PUSH
48944: LD_INT 0
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 1
48953: NEG
48954: PUSH
48955: LD_INT 1
48957: NEG
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 1
48965: NEG
48966: PUSH
48967: LD_INT 2
48969: NEG
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 0
48977: PUSH
48978: LD_INT 2
48980: NEG
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 1
48988: PUSH
48989: LD_INT 1
48991: NEG
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 2
48999: PUSH
49000: LD_INT 1
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 2
49009: PUSH
49010: LD_INT 2
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 1
49019: PUSH
49020: LD_INT 2
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 0
49029: PUSH
49030: LD_INT 2
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 1
49039: NEG
49040: PUSH
49041: LD_INT 1
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 2
49050: NEG
49051: PUSH
49052: LD_INT 0
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 2
49061: NEG
49062: PUSH
49063: LD_INT 1
49065: NEG
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 1
49073: NEG
49074: PUSH
49075: LD_INT 3
49077: NEG
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 1
49085: PUSH
49086: LD_INT 2
49088: NEG
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 3
49096: PUSH
49097: LD_INT 2
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 2
49106: PUSH
49107: LD_INT 3
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 2
49116: NEG
49117: PUSH
49118: LD_INT 1
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 3
49127: NEG
49128: PUSH
49129: LD_INT 1
49131: NEG
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49162: LD_ADDR_VAR 0 33
49166: PUSH
49167: LD_INT 0
49169: PUSH
49170: LD_INT 0
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 0
49179: PUSH
49180: LD_INT 1
49182: NEG
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 1
49190: PUSH
49191: LD_INT 0
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 1
49200: PUSH
49201: LD_INT 1
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 0
49210: PUSH
49211: LD_INT 1
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 1
49220: NEG
49221: PUSH
49222: LD_INT 0
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 1
49231: NEG
49232: PUSH
49233: LD_INT 1
49235: NEG
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 1
49243: NEG
49244: PUSH
49245: LD_INT 2
49247: NEG
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 1
49255: PUSH
49256: LD_INT 1
49258: NEG
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 2
49266: PUSH
49267: LD_INT 0
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 2
49276: PUSH
49277: LD_INT 1
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 1
49286: PUSH
49287: LD_INT 2
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: LD_INT 2
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 1
49306: NEG
49307: PUSH
49308: LD_INT 1
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 2
49317: NEG
49318: PUSH
49319: LD_INT 0
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 2
49328: NEG
49329: PUSH
49330: LD_INT 1
49332: NEG
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 2
49340: NEG
49341: PUSH
49342: LD_INT 2
49344: NEG
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 2
49352: NEG
49353: PUSH
49354: LD_INT 3
49356: NEG
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 2
49364: PUSH
49365: LD_INT 1
49367: NEG
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 3
49375: PUSH
49376: LD_INT 1
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 1
49385: PUSH
49386: LD_INT 3
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 1
49395: NEG
49396: PUSH
49397: LD_INT 2
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 3
49406: NEG
49407: PUSH
49408: LD_INT 2
49410: NEG
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49441: LD_ADDR_VAR 0 34
49445: PUSH
49446: LD_INT 0
49448: PUSH
49449: LD_INT 0
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 0
49458: PUSH
49459: LD_INT 1
49461: NEG
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 1
49469: PUSH
49470: LD_INT 0
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 1
49479: PUSH
49480: LD_INT 1
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 0
49489: PUSH
49490: LD_INT 1
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 1
49499: NEG
49500: PUSH
49501: LD_INT 0
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 1
49510: NEG
49511: PUSH
49512: LD_INT 1
49514: NEG
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 1
49522: NEG
49523: PUSH
49524: LD_INT 2
49526: NEG
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 0
49534: PUSH
49535: LD_INT 2
49537: NEG
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 1
49545: PUSH
49546: LD_INT 1
49548: NEG
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 2
49556: PUSH
49557: LD_INT 1
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 2
49566: PUSH
49567: LD_INT 2
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 1
49576: PUSH
49577: LD_INT 2
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 1
49586: NEG
49587: PUSH
49588: LD_INT 1
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 2
49597: NEG
49598: PUSH
49599: LD_INT 0
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 2
49608: NEG
49609: PUSH
49610: LD_INT 1
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 2
49620: NEG
49621: PUSH
49622: LD_INT 2
49624: NEG
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 1
49632: NEG
49633: PUSH
49634: LD_INT 3
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 1
49644: PUSH
49645: LD_INT 2
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 3
49655: PUSH
49656: LD_INT 2
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 2
49665: PUSH
49666: LD_INT 3
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 2
49675: NEG
49676: PUSH
49677: LD_INT 1
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 3
49686: NEG
49687: PUSH
49688: LD_INT 1
49690: NEG
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49721: LD_ADDR_VAR 0 35
49725: PUSH
49726: LD_INT 0
49728: PUSH
49729: LD_INT 0
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: LD_INT 1
49741: NEG
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 1
49749: PUSH
49750: LD_INT 0
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 1
49759: PUSH
49760: LD_INT 1
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: LD_INT 1
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 1
49779: NEG
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 1
49790: NEG
49791: PUSH
49792: LD_INT 1
49794: NEG
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 2
49802: PUSH
49803: LD_INT 1
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 2
49812: NEG
49813: PUSH
49814: LD_INT 1
49816: NEG
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49833: LD_ADDR_VAR 0 36
49837: PUSH
49838: LD_INT 0
49840: PUSH
49841: LD_INT 0
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 0
49850: PUSH
49851: LD_INT 1
49853: NEG
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 1
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 1
49871: PUSH
49872: LD_INT 1
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 0
49881: PUSH
49882: LD_INT 1
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 1
49891: NEG
49892: PUSH
49893: LD_INT 0
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 1
49902: NEG
49903: PUSH
49904: LD_INT 1
49906: NEG
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 1
49914: NEG
49915: PUSH
49916: LD_INT 2
49918: NEG
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 1
49926: PUSH
49927: LD_INT 2
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49945: LD_ADDR_VAR 0 37
49949: PUSH
49950: LD_INT 0
49952: PUSH
49953: LD_INT 0
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 0
49962: PUSH
49963: LD_INT 1
49965: NEG
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 1
49973: PUSH
49974: LD_INT 0
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 1
49983: PUSH
49984: LD_INT 1
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 0
49993: PUSH
49994: LD_INT 1
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 1
50003: NEG
50004: PUSH
50005: LD_INT 0
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 1
50014: NEG
50015: PUSH
50016: LD_INT 1
50018: NEG
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 1
50026: PUSH
50027: LD_INT 1
50029: NEG
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 1
50037: NEG
50038: PUSH
50039: LD_INT 1
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50057: LD_ADDR_VAR 0 38
50061: PUSH
50062: LD_INT 0
50064: PUSH
50065: LD_INT 0
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 0
50074: PUSH
50075: LD_INT 1
50077: NEG
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 1
50085: PUSH
50086: LD_INT 0
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 1
50095: PUSH
50096: LD_INT 1
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 0
50105: PUSH
50106: LD_INT 1
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 1
50115: NEG
50116: PUSH
50117: LD_INT 0
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 1
50126: NEG
50127: PUSH
50128: LD_INT 1
50130: NEG
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 2
50138: PUSH
50139: LD_INT 1
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 2
50148: NEG
50149: PUSH
50150: LD_INT 1
50152: NEG
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50169: LD_ADDR_VAR 0 39
50173: PUSH
50174: LD_INT 0
50176: PUSH
50177: LD_INT 0
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 0
50186: PUSH
50187: LD_INT 1
50189: NEG
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 1
50197: PUSH
50198: LD_INT 0
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 1
50207: PUSH
50208: LD_INT 1
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 0
50217: PUSH
50218: LD_INT 1
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 1
50227: NEG
50228: PUSH
50229: LD_INT 0
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 1
50238: NEG
50239: PUSH
50240: LD_INT 1
50242: NEG
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 1
50250: NEG
50251: PUSH
50252: LD_INT 2
50254: NEG
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 1
50262: PUSH
50263: LD_INT 2
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50281: LD_ADDR_VAR 0 40
50285: PUSH
50286: LD_INT 0
50288: PUSH
50289: LD_INT 0
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 0
50298: PUSH
50299: LD_INT 1
50301: NEG
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 1
50309: PUSH
50310: LD_INT 0
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 1
50319: PUSH
50320: LD_INT 1
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 0
50329: PUSH
50330: LD_INT 1
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 1
50339: NEG
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 1
50350: NEG
50351: PUSH
50352: LD_INT 1
50354: NEG
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 1
50362: PUSH
50363: LD_INT 1
50365: NEG
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 1
50373: NEG
50374: PUSH
50375: LD_INT 1
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50393: LD_ADDR_VAR 0 41
50397: PUSH
50398: LD_INT 0
50400: PUSH
50401: LD_INT 0
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 0
50410: PUSH
50411: LD_INT 1
50413: NEG
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 1
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 1
50431: PUSH
50432: LD_INT 1
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: LD_INT 1
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 1
50451: NEG
50452: PUSH
50453: LD_INT 0
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 1
50462: NEG
50463: PUSH
50464: LD_INT 1
50466: NEG
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 1
50474: NEG
50475: PUSH
50476: LD_INT 2
50478: NEG
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 1
50486: PUSH
50487: LD_INT 1
50489: NEG
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 2
50497: PUSH
50498: LD_INT 0
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 2
50507: PUSH
50508: LD_INT 1
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 2
50517: PUSH
50518: LD_INT 2
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 1
50527: PUSH
50528: LD_INT 2
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 1
50537: NEG
50538: PUSH
50539: LD_INT 1
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 2
50548: NEG
50549: PUSH
50550: LD_INT 0
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 2
50559: NEG
50560: PUSH
50561: LD_INT 1
50563: NEG
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 2
50571: NEG
50572: PUSH
50573: LD_INT 2
50575: NEG
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 2
50583: NEG
50584: PUSH
50585: LD_INT 3
50587: NEG
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 2
50595: PUSH
50596: LD_INT 1
50598: NEG
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 3
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 3
50616: PUSH
50617: LD_INT 1
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 3
50626: PUSH
50627: LD_INT 2
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 3
50636: PUSH
50637: LD_INT 3
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 2
50646: PUSH
50647: LD_INT 3
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 2
50656: NEG
50657: PUSH
50658: LD_INT 1
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 3
50667: NEG
50668: PUSH
50669: LD_INT 0
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 3
50678: NEG
50679: PUSH
50680: LD_INT 1
50682: NEG
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 3
50690: NEG
50691: PUSH
50692: LD_INT 2
50694: NEG
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 3
50702: NEG
50703: PUSH
50704: LD_INT 3
50706: NEG
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50743: LD_ADDR_VAR 0 42
50747: PUSH
50748: LD_INT 0
50750: PUSH
50751: LD_INT 0
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: LD_INT 1
50763: NEG
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 1
50771: PUSH
50772: LD_INT 0
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 1
50781: PUSH
50782: LD_INT 1
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 0
50791: PUSH
50792: LD_INT 1
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 1
50801: NEG
50802: PUSH
50803: LD_INT 0
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 1
50812: NEG
50813: PUSH
50814: LD_INT 1
50816: NEG
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 1
50824: NEG
50825: PUSH
50826: LD_INT 2
50828: NEG
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 0
50836: PUSH
50837: LD_INT 2
50839: NEG
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 1
50847: PUSH
50848: LD_INT 1
50850: NEG
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 2
50858: PUSH
50859: LD_INT 1
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 2
50868: PUSH
50869: LD_INT 2
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 1
50878: PUSH
50879: LD_INT 2
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 0
50888: PUSH
50889: LD_INT 2
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 1
50898: NEG
50899: PUSH
50900: LD_INT 1
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 2
50909: NEG
50910: PUSH
50911: LD_INT 1
50913: NEG
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 2
50921: NEG
50922: PUSH
50923: LD_INT 2
50925: NEG
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 2
50933: NEG
50934: PUSH
50935: LD_INT 3
50937: NEG
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 1
50945: NEG
50946: PUSH
50947: LD_INT 3
50949: NEG
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 0
50957: PUSH
50958: LD_INT 3
50960: NEG
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 1
50968: PUSH
50969: LD_INT 2
50971: NEG
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 3
50979: PUSH
50980: LD_INT 2
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 3
50989: PUSH
50990: LD_INT 3
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 2
50999: PUSH
51000: LD_INT 3
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 1
51009: PUSH
51010: LD_INT 3
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 0
51019: PUSH
51020: LD_INT 3
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 1
51029: NEG
51030: PUSH
51031: LD_INT 2
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 3
51040: NEG
51041: PUSH
51042: LD_INT 2
51044: NEG
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 3
51052: NEG
51053: PUSH
51054: LD_INT 3
51056: NEG
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51093: LD_ADDR_VAR 0 43
51097: PUSH
51098: LD_INT 0
51100: PUSH
51101: LD_INT 0
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 0
51110: PUSH
51111: LD_INT 1
51113: NEG
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 1
51121: PUSH
51122: LD_INT 0
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: LD_INT 1
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 0
51141: PUSH
51142: LD_INT 1
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 1
51151: NEG
51152: PUSH
51153: LD_INT 0
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 1
51162: NEG
51163: PUSH
51164: LD_INT 1
51166: NEG
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 1
51174: NEG
51175: PUSH
51176: LD_INT 2
51178: NEG
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 0
51186: PUSH
51187: LD_INT 2
51189: NEG
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 1
51197: PUSH
51198: LD_INT 1
51200: NEG
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 2
51208: PUSH
51209: LD_INT 0
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 2
51218: PUSH
51219: LD_INT 1
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 1
51228: PUSH
51229: LD_INT 2
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 0
51238: PUSH
51239: LD_INT 2
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 1
51248: NEG
51249: PUSH
51250: LD_INT 1
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 2
51259: NEG
51260: PUSH
51261: LD_INT 0
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 2
51270: NEG
51271: PUSH
51272: LD_INT 1
51274: NEG
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 1
51282: NEG
51283: PUSH
51284: LD_INT 3
51286: NEG
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 0
51294: PUSH
51295: LD_INT 3
51297: NEG
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 1
51305: PUSH
51306: LD_INT 2
51308: NEG
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 2
51316: PUSH
51317: LD_INT 1
51319: NEG
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 3
51327: PUSH
51328: LD_INT 0
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 3
51337: PUSH
51338: LD_INT 1
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 1
51347: PUSH
51348: LD_INT 3
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 0
51357: PUSH
51358: LD_INT 3
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 1
51367: NEG
51368: PUSH
51369: LD_INT 2
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 2
51378: NEG
51379: PUSH
51380: LD_INT 1
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 3
51389: NEG
51390: PUSH
51391: LD_INT 0
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 3
51400: NEG
51401: PUSH
51402: LD_INT 1
51404: NEG
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51441: LD_ADDR_VAR 0 44
51445: PUSH
51446: LD_INT 0
51448: PUSH
51449: LD_INT 0
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 0
51458: PUSH
51459: LD_INT 1
51461: NEG
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 1
51469: PUSH
51470: LD_INT 0
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 1
51479: PUSH
51480: LD_INT 1
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 0
51489: PUSH
51490: LD_INT 1
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 1
51499: NEG
51500: PUSH
51501: LD_INT 0
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 1
51510: NEG
51511: PUSH
51512: LD_INT 1
51514: NEG
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 1
51522: NEG
51523: PUSH
51524: LD_INT 2
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 1
51534: PUSH
51535: LD_INT 1
51537: NEG
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 2
51545: PUSH
51546: LD_INT 0
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 2
51555: PUSH
51556: LD_INT 1
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 2
51565: PUSH
51566: LD_INT 2
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 1
51575: PUSH
51576: LD_INT 2
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 1
51585: NEG
51586: PUSH
51587: LD_INT 1
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 2
51596: NEG
51597: PUSH
51598: LD_INT 0
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 2
51607: NEG
51608: PUSH
51609: LD_INT 1
51611: NEG
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 2
51619: NEG
51620: PUSH
51621: LD_INT 2
51623: NEG
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 2
51631: NEG
51632: PUSH
51633: LD_INT 3
51635: NEG
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 2
51643: PUSH
51644: LD_INT 1
51646: NEG
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 3
51654: PUSH
51655: LD_INT 0
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 3
51664: PUSH
51665: LD_INT 1
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 3
51674: PUSH
51675: LD_INT 2
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 3
51684: PUSH
51685: LD_INT 3
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 2
51694: PUSH
51695: LD_INT 3
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 2
51704: NEG
51705: PUSH
51706: LD_INT 1
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 3
51715: NEG
51716: PUSH
51717: LD_INT 0
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 3
51726: NEG
51727: PUSH
51728: LD_INT 1
51730: NEG
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 3
51738: NEG
51739: PUSH
51740: LD_INT 2
51742: NEG
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 3
51750: NEG
51751: PUSH
51752: LD_INT 3
51754: NEG
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51791: LD_ADDR_VAR 0 45
51795: PUSH
51796: LD_INT 0
51798: PUSH
51799: LD_INT 0
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 0
51808: PUSH
51809: LD_INT 1
51811: NEG
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 1
51819: PUSH
51820: LD_INT 0
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 1
51829: PUSH
51830: LD_INT 1
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 0
51839: PUSH
51840: LD_INT 1
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 1
51849: NEG
51850: PUSH
51851: LD_INT 0
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 1
51860: NEG
51861: PUSH
51862: LD_INT 1
51864: NEG
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 1
51872: NEG
51873: PUSH
51874: LD_INT 2
51876: NEG
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 0
51884: PUSH
51885: LD_INT 2
51887: NEG
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 1
51895: PUSH
51896: LD_INT 1
51898: NEG
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 2
51906: PUSH
51907: LD_INT 1
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 2
51916: PUSH
51917: LD_INT 2
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 1
51926: PUSH
51927: LD_INT 2
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 0
51936: PUSH
51937: LD_INT 2
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 1
51946: NEG
51947: PUSH
51948: LD_INT 1
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 2
51957: NEG
51958: PUSH
51959: LD_INT 1
51961: NEG
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 2
51969: NEG
51970: PUSH
51971: LD_INT 2
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 2
51981: NEG
51982: PUSH
51983: LD_INT 3
51985: NEG
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 1
51993: NEG
51994: PUSH
51995: LD_INT 3
51997: NEG
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 0
52005: PUSH
52006: LD_INT 3
52008: NEG
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 1
52016: PUSH
52017: LD_INT 2
52019: NEG
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 3
52027: PUSH
52028: LD_INT 2
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 3
52037: PUSH
52038: LD_INT 3
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 2
52047: PUSH
52048: LD_INT 3
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 1
52057: PUSH
52058: LD_INT 3
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 0
52067: PUSH
52068: LD_INT 3
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 1
52077: NEG
52078: PUSH
52079: LD_INT 2
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 3
52088: NEG
52089: PUSH
52090: LD_INT 2
52092: NEG
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 3
52100: NEG
52101: PUSH
52102: LD_INT 3
52104: NEG
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52141: LD_ADDR_VAR 0 46
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: LD_INT 0
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 0
52158: PUSH
52159: LD_INT 1
52161: NEG
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 1
52169: PUSH
52170: LD_INT 0
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 1
52179: PUSH
52180: LD_INT 1
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 0
52189: PUSH
52190: LD_INT 1
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 1
52199: NEG
52200: PUSH
52201: LD_INT 0
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 1
52210: NEG
52211: PUSH
52212: LD_INT 1
52214: NEG
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 1
52222: NEG
52223: PUSH
52224: LD_INT 2
52226: NEG
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 0
52234: PUSH
52235: LD_INT 2
52237: NEG
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 1
52245: PUSH
52246: LD_INT 1
52248: NEG
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 2
52256: PUSH
52257: LD_INT 0
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 2
52266: PUSH
52267: LD_INT 1
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 1
52276: PUSH
52277: LD_INT 2
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 0
52286: PUSH
52287: LD_INT 2
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 1
52296: NEG
52297: PUSH
52298: LD_INT 1
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 2
52307: NEG
52308: PUSH
52309: LD_INT 0
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 2
52318: NEG
52319: PUSH
52320: LD_INT 1
52322: NEG
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 1
52330: NEG
52331: PUSH
52332: LD_INT 3
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 0
52342: PUSH
52343: LD_INT 3
52345: NEG
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 1
52353: PUSH
52354: LD_INT 2
52356: NEG
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 2
52364: PUSH
52365: LD_INT 1
52367: NEG
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 3
52375: PUSH
52376: LD_INT 0
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 3
52385: PUSH
52386: LD_INT 1
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 1
52395: PUSH
52396: LD_INT 3
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 0
52405: PUSH
52406: LD_INT 3
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 1
52415: NEG
52416: PUSH
52417: LD_INT 2
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 2
52426: NEG
52427: PUSH
52428: LD_INT 1
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 3
52437: NEG
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 3
52448: NEG
52449: PUSH
52450: LD_INT 1
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52489: LD_ADDR_VAR 0 47
52493: PUSH
52494: LD_INT 0
52496: PUSH
52497: LD_INT 0
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 0
52506: PUSH
52507: LD_INT 1
52509: NEG
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 1
52517: PUSH
52518: LD_INT 0
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 1
52527: PUSH
52528: LD_INT 1
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 0
52537: PUSH
52538: LD_INT 1
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 1
52547: NEG
52548: PUSH
52549: LD_INT 0
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 1
52558: NEG
52559: PUSH
52560: LD_INT 1
52562: NEG
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 1
52570: NEG
52571: PUSH
52572: LD_INT 2
52574: NEG
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 0
52582: PUSH
52583: LD_INT 2
52585: NEG
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 1
52593: PUSH
52594: LD_INT 1
52596: NEG
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 2
52604: NEG
52605: PUSH
52606: LD_INT 1
52608: NEG
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 2
52616: NEG
52617: PUSH
52618: LD_INT 2
52620: NEG
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52640: LD_ADDR_VAR 0 48
52644: PUSH
52645: LD_INT 0
52647: PUSH
52648: LD_INT 0
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 0
52657: PUSH
52658: LD_INT 1
52660: NEG
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 1
52668: PUSH
52669: LD_INT 0
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 1
52678: PUSH
52679: LD_INT 1
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 0
52688: PUSH
52689: LD_INT 1
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 1
52698: NEG
52699: PUSH
52700: LD_INT 0
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 1
52709: NEG
52710: PUSH
52711: LD_INT 1
52713: NEG
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 1
52721: NEG
52722: PUSH
52723: LD_INT 2
52725: NEG
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 0
52733: PUSH
52734: LD_INT 2
52736: NEG
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 1
52744: PUSH
52745: LD_INT 1
52747: NEG
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 2
52755: PUSH
52756: LD_INT 0
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 2
52765: PUSH
52766: LD_INT 1
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52787: LD_ADDR_VAR 0 49
52791: PUSH
52792: LD_INT 0
52794: PUSH
52795: LD_INT 0
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 0
52804: PUSH
52805: LD_INT 1
52807: NEG
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 1
52815: PUSH
52816: LD_INT 0
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 1
52825: PUSH
52826: LD_INT 1
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 0
52835: PUSH
52836: LD_INT 1
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 1
52845: NEG
52846: PUSH
52847: LD_INT 0
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 1
52856: NEG
52857: PUSH
52858: LD_INT 1
52860: NEG
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 1
52868: PUSH
52869: LD_INT 1
52871: NEG
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 2
52879: PUSH
52880: LD_INT 0
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 2
52889: PUSH
52890: LD_INT 1
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 2
52899: PUSH
52900: LD_INT 2
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 1
52909: PUSH
52910: LD_INT 2
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52931: LD_ADDR_VAR 0 50
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: LD_INT 0
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 0
52948: PUSH
52949: LD_INT 1
52951: NEG
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 1
52959: PUSH
52960: LD_INT 0
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 1
52969: PUSH
52970: LD_INT 1
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 0
52979: PUSH
52980: LD_INT 1
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 1
52989: NEG
52990: PUSH
52991: LD_INT 0
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 1
53000: NEG
53001: PUSH
53002: LD_INT 1
53004: NEG
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 2
53012: PUSH
53013: LD_INT 1
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 2
53022: PUSH
53023: LD_INT 2
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 1
53032: PUSH
53033: LD_INT 2
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 0
53042: PUSH
53043: LD_INT 2
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 1
53052: NEG
53053: PUSH
53054: LD_INT 1
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53075: LD_ADDR_VAR 0 51
53079: PUSH
53080: LD_INT 0
53082: PUSH
53083: LD_INT 0
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 0
53092: PUSH
53093: LD_INT 1
53095: NEG
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 1
53103: PUSH
53104: LD_INT 0
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 1
53113: PUSH
53114: LD_INT 1
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 0
53123: PUSH
53124: LD_INT 1
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 1
53133: NEG
53134: PUSH
53135: LD_INT 0
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 1
53144: NEG
53145: PUSH
53146: LD_INT 1
53148: NEG
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 1
53156: PUSH
53157: LD_INT 2
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 0
53166: PUSH
53167: LD_INT 2
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: NEG
53177: PUSH
53178: LD_INT 1
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 2
53187: NEG
53188: PUSH
53189: LD_INT 0
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: LD_INT 2
53198: NEG
53199: PUSH
53200: LD_INT 1
53202: NEG
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53222: LD_ADDR_VAR 0 52
53226: PUSH
53227: LD_INT 0
53229: PUSH
53230: LD_INT 0
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 0
53239: PUSH
53240: LD_INT 1
53242: NEG
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 1
53250: PUSH
53251: LD_INT 0
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 1
53260: PUSH
53261: LD_INT 1
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 0
53270: PUSH
53271: LD_INT 1
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 1
53280: NEG
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 1
53291: NEG
53292: PUSH
53293: LD_INT 1
53295: NEG
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 1
53303: NEG
53304: PUSH
53305: LD_INT 2
53307: NEG
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 1
53315: NEG
53316: PUSH
53317: LD_INT 1
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 2
53326: NEG
53327: PUSH
53328: LD_INT 0
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 2
53337: NEG
53338: PUSH
53339: LD_INT 1
53341: NEG
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 2
53349: NEG
53350: PUSH
53351: LD_INT 2
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53373: LD_ADDR_VAR 0 53
53377: PUSH
53378: LD_INT 0
53380: PUSH
53381: LD_INT 0
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 0
53390: PUSH
53391: LD_INT 1
53393: NEG
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 1
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 1
53411: PUSH
53412: LD_INT 1
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 0
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: NEG
53432: PUSH
53433: LD_INT 0
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 1
53442: NEG
53443: PUSH
53444: LD_INT 1
53446: NEG
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 1
53454: NEG
53455: PUSH
53456: LD_INT 2
53458: NEG
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 0
53466: PUSH
53467: LD_INT 2
53469: NEG
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 1
53477: PUSH
53478: LD_INT 1
53480: NEG
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 2
53488: PUSH
53489: LD_INT 0
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 2
53498: PUSH
53499: LD_INT 1
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 2
53508: PUSH
53509: LD_INT 2
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 1
53518: PUSH
53519: LD_INT 2
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: LD_INT 2
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 1
53538: NEG
53539: PUSH
53540: LD_INT 1
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 2
53549: NEG
53550: PUSH
53551: LD_INT 0
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 2
53560: NEG
53561: PUSH
53562: LD_INT 1
53564: NEG
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 2
53572: NEG
53573: PUSH
53574: LD_INT 2
53576: NEG
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53603: LD_ADDR_VAR 0 54
53607: PUSH
53608: LD_INT 0
53610: PUSH
53611: LD_INT 0
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: LD_INT 1
53623: NEG
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 1
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 1
53641: PUSH
53642: LD_INT 1
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 0
53651: PUSH
53652: LD_INT 1
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 1
53661: NEG
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 1
53672: NEG
53673: PUSH
53674: LD_INT 1
53676: NEG
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 1
53684: NEG
53685: PUSH
53686: LD_INT 2
53688: NEG
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 0
53696: PUSH
53697: LD_INT 2
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 1
53707: PUSH
53708: LD_INT 1
53710: NEG
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 2
53718: PUSH
53719: LD_INT 0
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 2
53728: PUSH
53729: LD_INT 1
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 2
53738: PUSH
53739: LD_INT 2
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 1
53748: PUSH
53749: LD_INT 2
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 0
53758: PUSH
53759: LD_INT 2
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 1
53768: NEG
53769: PUSH
53770: LD_INT 1
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 2
53779: NEG
53780: PUSH
53781: LD_INT 0
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 2
53790: NEG
53791: PUSH
53792: LD_INT 1
53794: NEG
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 2
53802: NEG
53803: PUSH
53804: LD_INT 2
53806: NEG
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53833: LD_ADDR_VAR 0 55
53837: PUSH
53838: LD_INT 0
53840: PUSH
53841: LD_INT 0
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 0
53850: PUSH
53851: LD_INT 1
53853: NEG
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 1
53861: PUSH
53862: LD_INT 0
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 1
53871: PUSH
53872: LD_INT 1
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 0
53881: PUSH
53882: LD_INT 1
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 1
53891: NEG
53892: PUSH
53893: LD_INT 0
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 1
53902: NEG
53903: PUSH
53904: LD_INT 1
53906: NEG
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 1
53914: NEG
53915: PUSH
53916: LD_INT 2
53918: NEG
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 0
53926: PUSH
53927: LD_INT 2
53929: NEG
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 1
53937: PUSH
53938: LD_INT 1
53940: NEG
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 2
53948: PUSH
53949: LD_INT 0
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 2
53958: PUSH
53959: LD_INT 1
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 2
53968: PUSH
53969: LD_INT 2
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 1
53978: PUSH
53979: LD_INT 2
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 0
53988: PUSH
53989: LD_INT 2
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 1
53998: NEG
53999: PUSH
54000: LD_INT 1
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 2
54009: NEG
54010: PUSH
54011: LD_INT 0
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 2
54020: NEG
54021: PUSH
54022: LD_INT 1
54024: NEG
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 2
54032: NEG
54033: PUSH
54034: LD_INT 2
54036: NEG
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54063: LD_ADDR_VAR 0 56
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: LD_INT 0
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 0
54080: PUSH
54081: LD_INT 1
54083: NEG
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 1
54091: PUSH
54092: LD_INT 0
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 1
54101: PUSH
54102: LD_INT 1
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 0
54111: PUSH
54112: LD_INT 1
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 1
54121: NEG
54122: PUSH
54123: LD_INT 0
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 1
54132: NEG
54133: PUSH
54134: LD_INT 1
54136: NEG
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 1
54144: NEG
54145: PUSH
54146: LD_INT 2
54148: NEG
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 0
54156: PUSH
54157: LD_INT 2
54159: NEG
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 1
54167: PUSH
54168: LD_INT 1
54170: NEG
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 2
54178: PUSH
54179: LD_INT 0
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 2
54188: PUSH
54189: LD_INT 1
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 2
54198: PUSH
54199: LD_INT 2
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 1
54208: PUSH
54209: LD_INT 2
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 0
54218: PUSH
54219: LD_INT 2
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 1
54228: NEG
54229: PUSH
54230: LD_INT 1
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 2
54239: NEG
54240: PUSH
54241: LD_INT 0
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 2
54250: NEG
54251: PUSH
54252: LD_INT 1
54254: NEG
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 2
54262: NEG
54263: PUSH
54264: LD_INT 2
54266: NEG
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54293: LD_ADDR_VAR 0 57
54297: PUSH
54298: LD_INT 0
54300: PUSH
54301: LD_INT 0
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 0
54310: PUSH
54311: LD_INT 1
54313: NEG
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 1
54321: PUSH
54322: LD_INT 0
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 1
54331: PUSH
54332: LD_INT 1
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 0
54341: PUSH
54342: LD_INT 1
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 1
54351: NEG
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 1
54362: NEG
54363: PUSH
54364: LD_INT 1
54366: NEG
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 1
54374: NEG
54375: PUSH
54376: LD_INT 2
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 0
54386: PUSH
54387: LD_INT 2
54389: NEG
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 1
54397: PUSH
54398: LD_INT 1
54400: NEG
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 2
54408: PUSH
54409: LD_INT 0
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 2
54418: PUSH
54419: LD_INT 1
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 2
54428: PUSH
54429: LD_INT 2
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 1
54438: PUSH
54439: LD_INT 2
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 0
54448: PUSH
54449: LD_INT 2
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 1
54458: NEG
54459: PUSH
54460: LD_INT 1
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 2
54469: NEG
54470: PUSH
54471: LD_INT 0
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 2
54480: NEG
54481: PUSH
54482: LD_INT 1
54484: NEG
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 2
54492: NEG
54493: PUSH
54494: LD_INT 2
54496: NEG
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54523: LD_ADDR_VAR 0 58
54527: PUSH
54528: LD_INT 0
54530: PUSH
54531: LD_INT 0
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 0
54540: PUSH
54541: LD_INT 1
54543: NEG
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 1
54551: PUSH
54552: LD_INT 0
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 1
54561: PUSH
54562: LD_INT 1
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 0
54571: PUSH
54572: LD_INT 1
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 1
54581: NEG
54582: PUSH
54583: LD_INT 0
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 1
54592: NEG
54593: PUSH
54594: LD_INT 1
54596: NEG
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 1
54604: NEG
54605: PUSH
54606: LD_INT 2
54608: NEG
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 0
54616: PUSH
54617: LD_INT 2
54619: NEG
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 1
54627: PUSH
54628: LD_INT 1
54630: NEG
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 2
54638: PUSH
54639: LD_INT 0
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 2
54648: PUSH
54649: LD_INT 1
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 2
54658: PUSH
54659: LD_INT 2
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 1
54668: PUSH
54669: LD_INT 2
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 0
54678: PUSH
54679: LD_INT 2
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 1
54688: NEG
54689: PUSH
54690: LD_INT 1
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 2
54699: NEG
54700: PUSH
54701: LD_INT 0
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 2
54710: NEG
54711: PUSH
54712: LD_INT 1
54714: NEG
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 2
54722: NEG
54723: PUSH
54724: LD_INT 2
54726: NEG
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54753: LD_ADDR_VAR 0 59
54757: PUSH
54758: LD_INT 0
54760: PUSH
54761: LD_INT 0
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 0
54770: PUSH
54771: LD_INT 1
54773: NEG
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 1
54781: PUSH
54782: LD_INT 0
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 1
54791: PUSH
54792: LD_INT 1
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 0
54801: PUSH
54802: LD_INT 1
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 1
54811: NEG
54812: PUSH
54813: LD_INT 0
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 1
54822: NEG
54823: PUSH
54824: LD_INT 1
54826: NEG
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54841: LD_ADDR_VAR 0 60
54845: PUSH
54846: LD_INT 0
54848: PUSH
54849: LD_INT 0
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: LD_INT 1
54861: NEG
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 1
54869: PUSH
54870: LD_INT 0
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 1
54879: PUSH
54880: LD_INT 1
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 0
54889: PUSH
54890: LD_INT 1
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 1
54899: NEG
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 1
54910: NEG
54911: PUSH
54912: LD_INT 1
54914: NEG
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54929: LD_ADDR_VAR 0 61
54933: PUSH
54934: LD_INT 0
54936: PUSH
54937: LD_INT 0
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 0
54946: PUSH
54947: LD_INT 1
54949: NEG
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 1
54957: PUSH
54958: LD_INT 0
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 1
54967: PUSH
54968: LD_INT 1
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 0
54977: PUSH
54978: LD_INT 1
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 1
54987: NEG
54988: PUSH
54989: LD_INT 0
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 1
54998: NEG
54999: PUSH
55000: LD_INT 1
55002: NEG
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55017: LD_ADDR_VAR 0 62
55021: PUSH
55022: LD_INT 0
55024: PUSH
55025: LD_INT 0
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 0
55034: PUSH
55035: LD_INT 1
55037: NEG
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 1
55045: PUSH
55046: LD_INT 0
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 1
55055: PUSH
55056: LD_INT 1
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 0
55065: PUSH
55066: LD_INT 1
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 1
55075: NEG
55076: PUSH
55077: LD_INT 0
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 1
55086: NEG
55087: PUSH
55088: LD_INT 1
55090: NEG
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55105: LD_ADDR_VAR 0 63
55109: PUSH
55110: LD_INT 0
55112: PUSH
55113: LD_INT 0
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 0
55122: PUSH
55123: LD_INT 1
55125: NEG
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 1
55133: PUSH
55134: LD_INT 0
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 1
55143: PUSH
55144: LD_INT 1
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 0
55153: PUSH
55154: LD_INT 1
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 1
55163: NEG
55164: PUSH
55165: LD_INT 0
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 1
55174: NEG
55175: PUSH
55176: LD_INT 1
55178: NEG
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55193: LD_ADDR_VAR 0 64
55197: PUSH
55198: LD_INT 0
55200: PUSH
55201: LD_INT 0
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 0
55210: PUSH
55211: LD_INT 1
55213: NEG
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 1
55221: PUSH
55222: LD_INT 0
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 1
55231: PUSH
55232: LD_INT 1
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 0
55241: PUSH
55242: LD_INT 1
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 1
55251: NEG
55252: PUSH
55253: LD_INT 0
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 1
55262: NEG
55263: PUSH
55264: LD_INT 1
55266: NEG
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: ST_TO_ADDR
// end ; 1 :
55281: GO 61178
55283: LD_INT 1
55285: DOUBLE
55286: EQUAL
55287: IFTRUE 55291
55289: GO 57914
55291: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55292: LD_ADDR_VAR 0 11
55296: PUSH
55297: LD_INT 1
55299: NEG
55300: PUSH
55301: LD_INT 3
55303: NEG
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 0
55311: PUSH
55312: LD_INT 3
55314: NEG
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 1
55322: PUSH
55323: LD_INT 2
55325: NEG
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: LIST
55335: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55336: LD_ADDR_VAR 0 12
55340: PUSH
55341: LD_INT 2
55343: PUSH
55344: LD_INT 1
55346: NEG
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 3
55354: PUSH
55355: LD_INT 0
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 3
55364: PUSH
55365: LD_INT 1
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: LIST
55376: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55377: LD_ADDR_VAR 0 13
55381: PUSH
55382: LD_INT 3
55384: PUSH
55385: LD_INT 2
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 3
55394: PUSH
55395: LD_INT 3
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 2
55404: PUSH
55405: LD_INT 3
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: LIST
55416: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55417: LD_ADDR_VAR 0 14
55421: PUSH
55422: LD_INT 1
55424: PUSH
55425: LD_INT 3
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 0
55434: PUSH
55435: LD_INT 3
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 1
55444: NEG
55445: PUSH
55446: LD_INT 2
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: LIST
55457: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55458: LD_ADDR_VAR 0 15
55462: PUSH
55463: LD_INT 2
55465: NEG
55466: PUSH
55467: LD_INT 1
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 3
55476: NEG
55477: PUSH
55478: LD_INT 0
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 3
55487: NEG
55488: PUSH
55489: LD_INT 1
55491: NEG
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: LIST
55501: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55502: LD_ADDR_VAR 0 16
55506: PUSH
55507: LD_INT 2
55509: NEG
55510: PUSH
55511: LD_INT 3
55513: NEG
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 3
55521: NEG
55522: PUSH
55523: LD_INT 2
55525: NEG
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 3
55533: NEG
55534: PUSH
55535: LD_INT 3
55537: NEG
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: LIST
55547: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55548: LD_ADDR_VAR 0 17
55552: PUSH
55553: LD_INT 1
55555: NEG
55556: PUSH
55557: LD_INT 3
55559: NEG
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 0
55567: PUSH
55568: LD_INT 3
55570: NEG
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 1
55578: PUSH
55579: LD_INT 2
55581: NEG
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: LIST
55591: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55592: LD_ADDR_VAR 0 18
55596: PUSH
55597: LD_INT 2
55599: PUSH
55600: LD_INT 1
55602: NEG
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 3
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 3
55620: PUSH
55621: LD_INT 1
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: LIST
55632: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55633: LD_ADDR_VAR 0 19
55637: PUSH
55638: LD_INT 3
55640: PUSH
55641: LD_INT 2
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 3
55650: PUSH
55651: LD_INT 3
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 2
55660: PUSH
55661: LD_INT 3
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: LIST
55672: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55673: LD_ADDR_VAR 0 20
55677: PUSH
55678: LD_INT 1
55680: PUSH
55681: LD_INT 3
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 0
55690: PUSH
55691: LD_INT 3
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 1
55700: NEG
55701: PUSH
55702: LD_INT 2
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: LIST
55713: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55714: LD_ADDR_VAR 0 21
55718: PUSH
55719: LD_INT 2
55721: NEG
55722: PUSH
55723: LD_INT 1
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 3
55732: NEG
55733: PUSH
55734: LD_INT 0
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 3
55743: NEG
55744: PUSH
55745: LD_INT 1
55747: NEG
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: LIST
55757: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55758: LD_ADDR_VAR 0 22
55762: PUSH
55763: LD_INT 2
55765: NEG
55766: PUSH
55767: LD_INT 3
55769: NEG
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 3
55777: NEG
55778: PUSH
55779: LD_INT 2
55781: NEG
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 3
55789: NEG
55790: PUSH
55791: LD_INT 3
55793: NEG
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: LIST
55803: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55804: LD_ADDR_VAR 0 23
55808: PUSH
55809: LD_INT 0
55811: PUSH
55812: LD_INT 3
55814: NEG
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 1
55822: NEG
55823: PUSH
55824: LD_INT 4
55826: NEG
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 1
55834: PUSH
55835: LD_INT 3
55837: NEG
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: LIST
55847: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55848: LD_ADDR_VAR 0 24
55852: PUSH
55853: LD_INT 3
55855: PUSH
55856: LD_INT 0
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 3
55865: PUSH
55866: LD_INT 1
55868: NEG
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 4
55876: PUSH
55877: LD_INT 1
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: LIST
55888: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55889: LD_ADDR_VAR 0 25
55893: PUSH
55894: LD_INT 3
55896: PUSH
55897: LD_INT 3
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 4
55906: PUSH
55907: LD_INT 3
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 3
55916: PUSH
55917: LD_INT 4
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: LIST
55928: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55929: LD_ADDR_VAR 0 26
55933: PUSH
55934: LD_INT 0
55936: PUSH
55937: LD_INT 3
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 1
55946: PUSH
55947: LD_INT 4
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 1
55956: NEG
55957: PUSH
55958: LD_INT 3
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: LIST
55969: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55970: LD_ADDR_VAR 0 27
55974: PUSH
55975: LD_INT 3
55977: NEG
55978: PUSH
55979: LD_INT 0
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 3
55988: NEG
55989: PUSH
55990: LD_INT 1
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 4
55999: NEG
56000: PUSH
56001: LD_INT 1
56003: NEG
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: LIST
56013: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56014: LD_ADDR_VAR 0 28
56018: PUSH
56019: LD_INT 3
56021: NEG
56022: PUSH
56023: LD_INT 3
56025: NEG
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 3
56033: NEG
56034: PUSH
56035: LD_INT 4
56037: NEG
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 4
56045: NEG
56046: PUSH
56047: LD_INT 3
56049: NEG
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: LIST
56059: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56060: LD_ADDR_VAR 0 29
56064: PUSH
56065: LD_INT 1
56067: NEG
56068: PUSH
56069: LD_INT 3
56071: NEG
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 0
56079: PUSH
56080: LD_INT 3
56082: NEG
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 1
56090: PUSH
56091: LD_INT 2
56093: NEG
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 1
56101: NEG
56102: PUSH
56103: LD_INT 4
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 0
56113: PUSH
56114: LD_INT 4
56116: NEG
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 1
56124: PUSH
56125: LD_INT 3
56127: NEG
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 1
56135: NEG
56136: PUSH
56137: LD_INT 5
56139: NEG
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 0
56147: PUSH
56148: LD_INT 5
56150: NEG
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 1
56158: PUSH
56159: LD_INT 4
56161: NEG
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 1
56169: NEG
56170: PUSH
56171: LD_INT 6
56173: NEG
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 0
56181: PUSH
56182: LD_INT 6
56184: NEG
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 1
56192: PUSH
56193: LD_INT 5
56195: NEG
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56215: LD_ADDR_VAR 0 30
56219: PUSH
56220: LD_INT 2
56222: PUSH
56223: LD_INT 1
56225: NEG
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 3
56233: PUSH
56234: LD_INT 0
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 3
56243: PUSH
56244: LD_INT 1
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 3
56253: PUSH
56254: LD_INT 1
56256: NEG
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 4
56264: PUSH
56265: LD_INT 0
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 4
56274: PUSH
56275: LD_INT 1
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 4
56284: PUSH
56285: LD_INT 1
56287: NEG
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 5
56295: PUSH
56296: LD_INT 0
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 5
56305: PUSH
56306: LD_INT 1
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 5
56315: PUSH
56316: LD_INT 1
56318: NEG
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 6
56326: PUSH
56327: LD_INT 0
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 6
56336: PUSH
56337: LD_INT 1
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56358: LD_ADDR_VAR 0 31
56362: PUSH
56363: LD_INT 3
56365: PUSH
56366: LD_INT 2
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 3
56375: PUSH
56376: LD_INT 3
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 2
56385: PUSH
56386: LD_INT 3
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 4
56395: PUSH
56396: LD_INT 3
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 4
56405: PUSH
56406: LD_INT 4
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 3
56415: PUSH
56416: LD_INT 4
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 5
56425: PUSH
56426: LD_INT 4
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 5
56435: PUSH
56436: LD_INT 5
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 4
56445: PUSH
56446: LD_INT 5
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 6
56455: PUSH
56456: LD_INT 5
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 6
56465: PUSH
56466: LD_INT 6
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 5
56475: PUSH
56476: LD_INT 6
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56497: LD_ADDR_VAR 0 32
56501: PUSH
56502: LD_INT 1
56504: PUSH
56505: LD_INT 3
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 0
56514: PUSH
56515: LD_INT 3
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 1
56524: NEG
56525: PUSH
56526: LD_INT 2
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 1
56535: PUSH
56536: LD_INT 4
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 0
56545: PUSH
56546: LD_INT 4
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 1
56555: NEG
56556: PUSH
56557: LD_INT 3
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 1
56566: PUSH
56567: LD_INT 5
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 0
56576: PUSH
56577: LD_INT 5
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 1
56586: NEG
56587: PUSH
56588: LD_INT 4
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 1
56597: PUSH
56598: LD_INT 6
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 0
56607: PUSH
56608: LD_INT 6
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 1
56617: NEG
56618: PUSH
56619: LD_INT 5
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56640: LD_ADDR_VAR 0 33
56644: PUSH
56645: LD_INT 2
56647: NEG
56648: PUSH
56649: LD_INT 1
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 3
56658: NEG
56659: PUSH
56660: LD_INT 0
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 3
56669: NEG
56670: PUSH
56671: LD_INT 1
56673: NEG
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 3
56681: NEG
56682: PUSH
56683: LD_INT 1
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 4
56692: NEG
56693: PUSH
56694: LD_INT 0
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 4
56703: NEG
56704: PUSH
56705: LD_INT 1
56707: NEG
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 4
56715: NEG
56716: PUSH
56717: LD_INT 1
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 5
56726: NEG
56727: PUSH
56728: LD_INT 0
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 5
56737: NEG
56738: PUSH
56739: LD_INT 1
56741: NEG
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 5
56749: NEG
56750: PUSH
56751: LD_INT 1
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 6
56760: NEG
56761: PUSH
56762: LD_INT 0
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 6
56771: NEG
56772: PUSH
56773: LD_INT 1
56775: NEG
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56795: LD_ADDR_VAR 0 34
56799: PUSH
56800: LD_INT 2
56802: NEG
56803: PUSH
56804: LD_INT 3
56806: NEG
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 3
56814: NEG
56815: PUSH
56816: LD_INT 2
56818: NEG
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 3
56826: NEG
56827: PUSH
56828: LD_INT 3
56830: NEG
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 3
56838: NEG
56839: PUSH
56840: LD_INT 4
56842: NEG
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 4
56850: NEG
56851: PUSH
56852: LD_INT 3
56854: NEG
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 4
56862: NEG
56863: PUSH
56864: LD_INT 4
56866: NEG
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 4
56874: NEG
56875: PUSH
56876: LD_INT 5
56878: NEG
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 5
56886: NEG
56887: PUSH
56888: LD_INT 4
56890: NEG
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 5
56898: NEG
56899: PUSH
56900: LD_INT 5
56902: NEG
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 5
56910: NEG
56911: PUSH
56912: LD_INT 6
56914: NEG
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 6
56922: NEG
56923: PUSH
56924: LD_INT 5
56926: NEG
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 6
56934: NEG
56935: PUSH
56936: LD_INT 6
56938: NEG
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56958: LD_ADDR_VAR 0 41
56962: PUSH
56963: LD_INT 0
56965: PUSH
56966: LD_INT 2
56968: NEG
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 1
56976: NEG
56977: PUSH
56978: LD_INT 3
56980: NEG
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 1
56988: PUSH
56989: LD_INT 2
56991: NEG
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: LIST
57001: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57002: LD_ADDR_VAR 0 42
57006: PUSH
57007: LD_INT 2
57009: PUSH
57010: LD_INT 0
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 2
57019: PUSH
57020: LD_INT 1
57022: NEG
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 3
57030: PUSH
57031: LD_INT 1
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: LIST
57042: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57043: LD_ADDR_VAR 0 43
57047: PUSH
57048: LD_INT 2
57050: PUSH
57051: LD_INT 2
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 3
57060: PUSH
57061: LD_INT 2
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 2
57070: PUSH
57071: LD_INT 3
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: LIST
57082: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57083: LD_ADDR_VAR 0 44
57087: PUSH
57088: LD_INT 0
57090: PUSH
57091: LD_INT 2
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 1
57100: PUSH
57101: LD_INT 3
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 1
57110: NEG
57111: PUSH
57112: LD_INT 2
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: LIST
57123: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57124: LD_ADDR_VAR 0 45
57128: PUSH
57129: LD_INT 2
57131: NEG
57132: PUSH
57133: LD_INT 0
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 2
57142: NEG
57143: PUSH
57144: LD_INT 1
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 3
57153: NEG
57154: PUSH
57155: LD_INT 1
57157: NEG
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: LIST
57167: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57168: LD_ADDR_VAR 0 46
57172: PUSH
57173: LD_INT 2
57175: NEG
57176: PUSH
57177: LD_INT 2
57179: NEG
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 2
57187: NEG
57188: PUSH
57189: LD_INT 3
57191: NEG
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 3
57199: NEG
57200: PUSH
57201: LD_INT 2
57203: NEG
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: LIST
57213: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57214: LD_ADDR_VAR 0 47
57218: PUSH
57219: LD_INT 2
57221: NEG
57222: PUSH
57223: LD_INT 3
57225: NEG
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 1
57233: NEG
57234: PUSH
57235: LD_INT 3
57237: NEG
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57247: LD_ADDR_VAR 0 48
57251: PUSH
57252: LD_INT 1
57254: PUSH
57255: LD_INT 2
57257: NEG
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 2
57265: PUSH
57266: LD_INT 1
57268: NEG
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57278: LD_ADDR_VAR 0 49
57282: PUSH
57283: LD_INT 3
57285: PUSH
57286: LD_INT 1
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 3
57295: PUSH
57296: LD_INT 2
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57307: LD_ADDR_VAR 0 50
57311: PUSH
57312: LD_INT 2
57314: PUSH
57315: LD_INT 3
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 1
57324: PUSH
57325: LD_INT 3
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57336: LD_ADDR_VAR 0 51
57340: PUSH
57341: LD_INT 1
57343: NEG
57344: PUSH
57345: LD_INT 2
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 2
57354: NEG
57355: PUSH
57356: LD_INT 1
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57367: LD_ADDR_VAR 0 52
57371: PUSH
57372: LD_INT 3
57374: NEG
57375: PUSH
57376: LD_INT 1
57378: NEG
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 3
57386: NEG
57387: PUSH
57388: LD_INT 2
57390: NEG
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57400: LD_ADDR_VAR 0 53
57404: PUSH
57405: LD_INT 1
57407: NEG
57408: PUSH
57409: LD_INT 3
57411: NEG
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 0
57419: PUSH
57420: LD_INT 3
57422: NEG
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 1
57430: PUSH
57431: LD_INT 2
57433: NEG
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: LIST
57443: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57444: LD_ADDR_VAR 0 54
57448: PUSH
57449: LD_INT 2
57451: PUSH
57452: LD_INT 1
57454: NEG
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 3
57462: PUSH
57463: LD_INT 0
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 3
57472: PUSH
57473: LD_INT 1
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: LIST
57484: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57485: LD_ADDR_VAR 0 55
57489: PUSH
57490: LD_INT 3
57492: PUSH
57493: LD_INT 2
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 3
57502: PUSH
57503: LD_INT 3
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 2
57512: PUSH
57513: LD_INT 3
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: LIST
57524: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57525: LD_ADDR_VAR 0 56
57529: PUSH
57530: LD_INT 1
57532: PUSH
57533: LD_INT 3
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 0
57542: PUSH
57543: LD_INT 3
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 1
57552: NEG
57553: PUSH
57554: LD_INT 2
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: LIST
57565: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57566: LD_ADDR_VAR 0 57
57570: PUSH
57571: LD_INT 2
57573: NEG
57574: PUSH
57575: LD_INT 1
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 3
57584: NEG
57585: PUSH
57586: LD_INT 0
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 3
57595: NEG
57596: PUSH
57597: LD_INT 1
57599: NEG
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: LIST
57609: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57610: LD_ADDR_VAR 0 58
57614: PUSH
57615: LD_INT 2
57617: NEG
57618: PUSH
57619: LD_INT 3
57621: NEG
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 3
57629: NEG
57630: PUSH
57631: LD_INT 2
57633: NEG
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 3
57641: NEG
57642: PUSH
57643: LD_INT 3
57645: NEG
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: LIST
57655: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57656: LD_ADDR_VAR 0 59
57660: PUSH
57661: LD_INT 1
57663: NEG
57664: PUSH
57665: LD_INT 2
57667: NEG
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 0
57675: PUSH
57676: LD_INT 2
57678: NEG
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 1
57686: PUSH
57687: LD_INT 1
57689: NEG
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: LIST
57699: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57700: LD_ADDR_VAR 0 60
57704: PUSH
57705: LD_INT 1
57707: PUSH
57708: LD_INT 1
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 2
57718: PUSH
57719: LD_INT 0
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 2
57728: PUSH
57729: LD_INT 1
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: LIST
57740: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57741: LD_ADDR_VAR 0 61
57745: PUSH
57746: LD_INT 2
57748: PUSH
57749: LD_INT 1
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 2
57758: PUSH
57759: LD_INT 2
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 1
57768: PUSH
57769: LD_INT 2
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: LIST
57780: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57781: LD_ADDR_VAR 0 62
57785: PUSH
57786: LD_INT 1
57788: PUSH
57789: LD_INT 2
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 0
57798: PUSH
57799: LD_INT 2
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 1
57808: NEG
57809: PUSH
57810: LD_INT 1
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: LIST
57821: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57822: LD_ADDR_VAR 0 63
57826: PUSH
57827: LD_INT 1
57829: NEG
57830: PUSH
57831: LD_INT 1
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 2
57840: NEG
57841: PUSH
57842: LD_INT 0
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 2
57851: NEG
57852: PUSH
57853: LD_INT 1
57855: NEG
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: LIST
57865: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57866: LD_ADDR_VAR 0 64
57870: PUSH
57871: LD_INT 1
57873: NEG
57874: PUSH
57875: LD_INT 2
57877: NEG
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 2
57885: NEG
57886: PUSH
57887: LD_INT 1
57889: NEG
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 2
57897: NEG
57898: PUSH
57899: LD_INT 2
57901: NEG
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: LIST
57911: ST_TO_ADDR
// end ; 2 :
57912: GO 61178
57914: LD_INT 2
57916: DOUBLE
57917: EQUAL
57918: IFTRUE 57922
57920: GO 61177
57922: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57923: LD_ADDR_VAR 0 29
57927: PUSH
57928: LD_INT 4
57930: PUSH
57931: LD_INT 0
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 4
57940: PUSH
57941: LD_INT 1
57943: NEG
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 5
57951: PUSH
57952: LD_INT 0
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 5
57961: PUSH
57962: LD_INT 1
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 4
57971: PUSH
57972: LD_INT 1
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 3
57981: PUSH
57982: LD_INT 0
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 3
57991: PUSH
57992: LD_INT 1
57994: NEG
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 3
58002: PUSH
58003: LD_INT 2
58005: NEG
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 5
58013: PUSH
58014: LD_INT 2
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 3
58023: PUSH
58024: LD_INT 3
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 3
58033: PUSH
58034: LD_INT 2
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 4
58043: PUSH
58044: LD_INT 3
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 4
58053: PUSH
58054: LD_INT 4
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 3
58063: PUSH
58064: LD_INT 4
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 2
58073: PUSH
58074: LD_INT 3
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 2
58083: PUSH
58084: LD_INT 2
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 4
58093: PUSH
58094: LD_INT 2
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 2
58103: PUSH
58104: LD_INT 4
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 0
58113: PUSH
58114: LD_INT 4
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 0
58123: PUSH
58124: LD_INT 3
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 1
58133: PUSH
58134: LD_INT 4
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 1
58143: PUSH
58144: LD_INT 5
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 0
58153: PUSH
58154: LD_INT 5
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 1
58163: NEG
58164: PUSH
58165: LD_INT 4
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 1
58174: NEG
58175: PUSH
58176: LD_INT 3
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 2
58185: PUSH
58186: LD_INT 5
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 2
58195: NEG
58196: PUSH
58197: LD_INT 3
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 3
58206: NEG
58207: PUSH
58208: LD_INT 0
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 3
58217: NEG
58218: PUSH
58219: LD_INT 1
58221: NEG
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 2
58229: NEG
58230: PUSH
58231: LD_INT 0
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 2
58240: NEG
58241: PUSH
58242: LD_INT 1
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 3
58251: NEG
58252: PUSH
58253: LD_INT 1
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 4
58262: NEG
58263: PUSH
58264: LD_INT 0
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 4
58273: NEG
58274: PUSH
58275: LD_INT 1
58277: NEG
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 4
58285: NEG
58286: PUSH
58287: LD_INT 2
58289: NEG
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 2
58297: NEG
58298: PUSH
58299: LD_INT 2
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 4
58308: NEG
58309: PUSH
58310: LD_INT 4
58312: NEG
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 4
58320: NEG
58321: PUSH
58322: LD_INT 5
58324: NEG
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 3
58332: NEG
58333: PUSH
58334: LD_INT 4
58336: NEG
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 3
58344: NEG
58345: PUSH
58346: LD_INT 3
58348: NEG
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 4
58356: NEG
58357: PUSH
58358: LD_INT 3
58360: NEG
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 5
58368: NEG
58369: PUSH
58370: LD_INT 4
58372: NEG
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 5
58380: NEG
58381: PUSH
58382: LD_INT 5
58384: NEG
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 3
58392: NEG
58393: PUSH
58394: LD_INT 5
58396: NEG
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 5
58404: NEG
58405: PUSH
58406: LD_INT 3
58408: NEG
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58461: LD_ADDR_VAR 0 30
58465: PUSH
58466: LD_INT 4
58468: PUSH
58469: LD_INT 4
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 4
58478: PUSH
58479: LD_INT 3
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 5
58488: PUSH
58489: LD_INT 4
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 5
58498: PUSH
58499: LD_INT 5
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 4
58508: PUSH
58509: LD_INT 5
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 3
58518: PUSH
58519: LD_INT 4
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 3
58528: PUSH
58529: LD_INT 3
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 5
58538: PUSH
58539: LD_INT 3
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 3
58548: PUSH
58549: LD_INT 5
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 0
58558: PUSH
58559: LD_INT 3
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 0
58568: PUSH
58569: LD_INT 2
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 1
58578: PUSH
58579: LD_INT 3
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 1
58588: PUSH
58589: LD_INT 4
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 0
58598: PUSH
58599: LD_INT 4
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 1
58608: NEG
58609: PUSH
58610: LD_INT 3
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 1
58619: NEG
58620: PUSH
58621: LD_INT 2
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 2
58630: PUSH
58631: LD_INT 4
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 2
58640: NEG
58641: PUSH
58642: LD_INT 2
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 4
58651: NEG
58652: PUSH
58653: LD_INT 0
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 4
58662: NEG
58663: PUSH
58664: LD_INT 1
58666: NEG
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 3
58674: NEG
58675: PUSH
58676: LD_INT 0
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 3
58685: NEG
58686: PUSH
58687: LD_INT 1
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 4
58696: NEG
58697: PUSH
58698: LD_INT 1
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 5
58707: NEG
58708: PUSH
58709: LD_INT 0
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 5
58718: NEG
58719: PUSH
58720: LD_INT 1
58722: NEG
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 5
58730: NEG
58731: PUSH
58732: LD_INT 2
58734: NEG
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 3
58742: NEG
58743: PUSH
58744: LD_INT 2
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 3
58753: NEG
58754: PUSH
58755: LD_INT 3
58757: NEG
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 3
58765: NEG
58766: PUSH
58767: LD_INT 4
58769: NEG
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 2
58777: NEG
58778: PUSH
58779: LD_INT 3
58781: NEG
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 2
58789: NEG
58790: PUSH
58791: LD_INT 2
58793: NEG
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 3
58801: NEG
58802: PUSH
58803: LD_INT 2
58805: NEG
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 4
58813: NEG
58814: PUSH
58815: LD_INT 3
58817: NEG
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 4
58825: NEG
58826: PUSH
58827: LD_INT 4
58829: NEG
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 2
58837: NEG
58838: PUSH
58839: LD_INT 4
58841: NEG
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 4
58849: NEG
58850: PUSH
58851: LD_INT 2
58853: NEG
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 0
58861: PUSH
58862: LD_INT 4
58864: NEG
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 0
58872: PUSH
58873: LD_INT 5
58875: NEG
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 1
58883: PUSH
58884: LD_INT 4
58886: NEG
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 1
58894: PUSH
58895: LD_INT 3
58897: NEG
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 0
58905: PUSH
58906: LD_INT 3
58908: NEG
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 1
58916: NEG
58917: PUSH
58918: LD_INT 4
58920: NEG
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 1
58928: NEG
58929: PUSH
58930: LD_INT 5
58932: NEG
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 2
58940: PUSH
58941: LD_INT 3
58943: NEG
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 2
58951: NEG
58952: PUSH
58953: LD_INT 5
58955: NEG
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59008: LD_ADDR_VAR 0 31
59012: PUSH
59013: LD_INT 0
59015: PUSH
59016: LD_INT 4
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 0
59025: PUSH
59026: LD_INT 3
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 1
59035: PUSH
59036: LD_INT 4
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 1
59045: PUSH
59046: LD_INT 5
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 0
59055: PUSH
59056: LD_INT 5
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 1
59065: NEG
59066: PUSH
59067: LD_INT 4
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 1
59076: NEG
59077: PUSH
59078: LD_INT 3
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 2
59087: PUSH
59088: LD_INT 5
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 2
59097: NEG
59098: PUSH
59099: LD_INT 3
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 3
59108: NEG
59109: PUSH
59110: LD_INT 0
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 3
59119: NEG
59120: PUSH
59121: LD_INT 1
59123: NEG
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 2
59131: NEG
59132: PUSH
59133: LD_INT 0
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 2
59142: NEG
59143: PUSH
59144: LD_INT 1
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 3
59153: NEG
59154: PUSH
59155: LD_INT 1
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 4
59164: NEG
59165: PUSH
59166: LD_INT 0
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 4
59175: NEG
59176: PUSH
59177: LD_INT 1
59179: NEG
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 4
59187: NEG
59188: PUSH
59189: LD_INT 2
59191: NEG
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 2
59199: NEG
59200: PUSH
59201: LD_INT 2
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 4
59210: NEG
59211: PUSH
59212: LD_INT 4
59214: NEG
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 4
59222: NEG
59223: PUSH
59224: LD_INT 5
59226: NEG
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 3
59234: NEG
59235: PUSH
59236: LD_INT 4
59238: NEG
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 3
59246: NEG
59247: PUSH
59248: LD_INT 3
59250: NEG
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 4
59258: NEG
59259: PUSH
59260: LD_INT 3
59262: NEG
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 5
59270: NEG
59271: PUSH
59272: LD_INT 4
59274: NEG
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 5
59282: NEG
59283: PUSH
59284: LD_INT 5
59286: NEG
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 3
59294: NEG
59295: PUSH
59296: LD_INT 5
59298: NEG
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 5
59306: NEG
59307: PUSH
59308: LD_INT 3
59310: NEG
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 0
59318: PUSH
59319: LD_INT 3
59321: NEG
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 0
59329: PUSH
59330: LD_INT 4
59332: NEG
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 1
59340: PUSH
59341: LD_INT 3
59343: NEG
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 1
59351: PUSH
59352: LD_INT 2
59354: NEG
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 0
59362: PUSH
59363: LD_INT 2
59365: NEG
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 1
59373: NEG
59374: PUSH
59375: LD_INT 3
59377: NEG
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 1
59385: NEG
59386: PUSH
59387: LD_INT 4
59389: NEG
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 2
59397: PUSH
59398: LD_INT 2
59400: NEG
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 2
59408: NEG
59409: PUSH
59410: LD_INT 4
59412: NEG
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 4
59420: PUSH
59421: LD_INT 0
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 4
59430: PUSH
59431: LD_INT 1
59433: NEG
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 5
59441: PUSH
59442: LD_INT 0
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 5
59451: PUSH
59452: LD_INT 1
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 4
59461: PUSH
59462: LD_INT 1
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 3
59471: PUSH
59472: LD_INT 0
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 3
59481: PUSH
59482: LD_INT 1
59484: NEG
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 3
59492: PUSH
59493: LD_INT 2
59495: NEG
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 5
59503: PUSH
59504: LD_INT 2
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59558: LD_ADDR_VAR 0 32
59562: PUSH
59563: LD_INT 4
59565: NEG
59566: PUSH
59567: LD_INT 0
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 4
59576: NEG
59577: PUSH
59578: LD_INT 1
59580: NEG
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 3
59588: NEG
59589: PUSH
59590: LD_INT 0
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 3
59599: NEG
59600: PUSH
59601: LD_INT 1
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 4
59610: NEG
59611: PUSH
59612: LD_INT 1
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 5
59621: NEG
59622: PUSH
59623: LD_INT 0
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 5
59632: NEG
59633: PUSH
59634: LD_INT 1
59636: NEG
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 5
59644: NEG
59645: PUSH
59646: LD_INT 2
59648: NEG
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 3
59656: NEG
59657: PUSH
59658: LD_INT 2
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 3
59667: NEG
59668: PUSH
59669: LD_INT 3
59671: NEG
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 3
59679: NEG
59680: PUSH
59681: LD_INT 4
59683: NEG
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 2
59691: NEG
59692: PUSH
59693: LD_INT 3
59695: NEG
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 2
59703: NEG
59704: PUSH
59705: LD_INT 2
59707: NEG
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 3
59715: NEG
59716: PUSH
59717: LD_INT 2
59719: NEG
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 4
59727: NEG
59728: PUSH
59729: LD_INT 3
59731: NEG
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 4
59739: NEG
59740: PUSH
59741: LD_INT 4
59743: NEG
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 2
59751: NEG
59752: PUSH
59753: LD_INT 4
59755: NEG
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 4
59763: NEG
59764: PUSH
59765: LD_INT 2
59767: NEG
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 0
59775: PUSH
59776: LD_INT 4
59778: NEG
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 0
59786: PUSH
59787: LD_INT 5
59789: NEG
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 1
59797: PUSH
59798: LD_INT 4
59800: NEG
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 1
59808: PUSH
59809: LD_INT 3
59811: NEG
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 0
59819: PUSH
59820: LD_INT 3
59822: NEG
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 1
59830: NEG
59831: PUSH
59832: LD_INT 4
59834: NEG
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 1
59842: NEG
59843: PUSH
59844: LD_INT 5
59846: NEG
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 2
59854: PUSH
59855: LD_INT 3
59857: NEG
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 2
59865: NEG
59866: PUSH
59867: LD_INT 5
59869: NEG
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 3
59877: PUSH
59878: LD_INT 0
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 3
59887: PUSH
59888: LD_INT 1
59890: NEG
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 4
59898: PUSH
59899: LD_INT 0
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 4
59908: PUSH
59909: LD_INT 1
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 3
59918: PUSH
59919: LD_INT 1
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 2
59928: PUSH
59929: LD_INT 0
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 2
59938: PUSH
59939: LD_INT 1
59941: NEG
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 2
59949: PUSH
59950: LD_INT 2
59952: NEG
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 4
59960: PUSH
59961: LD_INT 2
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 4
59970: PUSH
59971: LD_INT 4
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 4
59980: PUSH
59981: LD_INT 3
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 5
59990: PUSH
59991: LD_INT 4
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 5
60000: PUSH
60001: LD_INT 5
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 4
60010: PUSH
60011: LD_INT 5
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 3
60020: PUSH
60021: LD_INT 4
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 3
60030: PUSH
60031: LD_INT 3
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 5
60040: PUSH
60041: LD_INT 3
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 3
60050: PUSH
60051: LD_INT 5
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60105: LD_ADDR_VAR 0 33
60109: PUSH
60110: LD_INT 4
60112: NEG
60113: PUSH
60114: LD_INT 4
60116: NEG
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 4
60124: NEG
60125: PUSH
60126: LD_INT 5
60128: NEG
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 3
60136: NEG
60137: PUSH
60138: LD_INT 4
60140: NEG
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 3
60148: NEG
60149: PUSH
60150: LD_INT 3
60152: NEG
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 4
60160: NEG
60161: PUSH
60162: LD_INT 3
60164: NEG
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 5
60172: NEG
60173: PUSH
60174: LD_INT 4
60176: NEG
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 5
60184: NEG
60185: PUSH
60186: LD_INT 5
60188: NEG
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 3
60196: NEG
60197: PUSH
60198: LD_INT 5
60200: NEG
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 5
60208: NEG
60209: PUSH
60210: LD_INT 3
60212: NEG
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 0
60220: PUSH
60221: LD_INT 3
60223: NEG
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 0
60231: PUSH
60232: LD_INT 4
60234: NEG
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 1
60242: PUSH
60243: LD_INT 3
60245: NEG
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 1
60253: PUSH
60254: LD_INT 2
60256: NEG
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 0
60264: PUSH
60265: LD_INT 2
60267: NEG
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 1
60275: NEG
60276: PUSH
60277: LD_INT 3
60279: NEG
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 1
60287: NEG
60288: PUSH
60289: LD_INT 4
60291: NEG
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 2
60299: PUSH
60300: LD_INT 2
60302: NEG
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 2
60310: NEG
60311: PUSH
60312: LD_INT 4
60314: NEG
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 4
60322: PUSH
60323: LD_INT 0
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: LD_INT 4
60332: PUSH
60333: LD_INT 1
60335: NEG
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 5
60343: PUSH
60344: LD_INT 0
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 5
60353: PUSH
60354: LD_INT 1
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 4
60363: PUSH
60364: LD_INT 1
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 3
60373: PUSH
60374: LD_INT 0
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 3
60383: PUSH
60384: LD_INT 1
60386: NEG
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 3
60394: PUSH
60395: LD_INT 2
60397: NEG
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 5
60405: PUSH
60406: LD_INT 2
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 3
60415: PUSH
60416: LD_INT 3
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 3
60425: PUSH
60426: LD_INT 2
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 4
60435: PUSH
60436: LD_INT 3
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 4
60445: PUSH
60446: LD_INT 4
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 3
60455: PUSH
60456: LD_INT 4
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 2
60465: PUSH
60466: LD_INT 3
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 2
60475: PUSH
60476: LD_INT 2
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 4
60485: PUSH
60486: LD_INT 2
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 2
60495: PUSH
60496: LD_INT 4
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 0
60505: PUSH
60506: LD_INT 4
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 0
60515: PUSH
60516: LD_INT 3
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 1
60525: PUSH
60526: LD_INT 4
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 1
60535: PUSH
60536: LD_INT 5
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 0
60545: PUSH
60546: LD_INT 5
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 1
60555: NEG
60556: PUSH
60557: LD_INT 4
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 1
60566: NEG
60567: PUSH
60568: LD_INT 3
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 2
60577: PUSH
60578: LD_INT 5
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 2
60587: NEG
60588: PUSH
60589: LD_INT 3
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60643: LD_ADDR_VAR 0 34
60647: PUSH
60648: LD_INT 0
60650: PUSH
60651: LD_INT 4
60653: NEG
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 0
60661: PUSH
60662: LD_INT 5
60664: NEG
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 1
60672: PUSH
60673: LD_INT 4
60675: NEG
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 1
60683: PUSH
60684: LD_INT 3
60686: NEG
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 0
60694: PUSH
60695: LD_INT 3
60697: NEG
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 1
60705: NEG
60706: PUSH
60707: LD_INT 4
60709: NEG
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 1
60717: NEG
60718: PUSH
60719: LD_INT 5
60721: NEG
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 2
60729: PUSH
60730: LD_INT 3
60732: NEG
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 2
60740: NEG
60741: PUSH
60742: LD_INT 5
60744: NEG
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 3
60752: PUSH
60753: LD_INT 0
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 3
60762: PUSH
60763: LD_INT 1
60765: NEG
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 4
60773: PUSH
60774: LD_INT 0
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 4
60783: PUSH
60784: LD_INT 1
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 3
60793: PUSH
60794: LD_INT 1
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 2
60803: PUSH
60804: LD_INT 0
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 2
60813: PUSH
60814: LD_INT 1
60816: NEG
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 2
60824: PUSH
60825: LD_INT 2
60827: NEG
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 4
60835: PUSH
60836: LD_INT 2
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 4
60845: PUSH
60846: LD_INT 4
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 4
60855: PUSH
60856: LD_INT 3
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 5
60865: PUSH
60866: LD_INT 4
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 5
60875: PUSH
60876: LD_INT 5
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 4
60885: PUSH
60886: LD_INT 5
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 3
60895: PUSH
60896: LD_INT 4
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 3
60905: PUSH
60906: LD_INT 3
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 5
60915: PUSH
60916: LD_INT 3
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 3
60925: PUSH
60926: LD_INT 5
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 0
60935: PUSH
60936: LD_INT 3
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 0
60945: PUSH
60946: LD_INT 2
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 1
60955: PUSH
60956: LD_INT 3
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 1
60965: PUSH
60966: LD_INT 4
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 0
60975: PUSH
60976: LD_INT 4
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 1
60985: NEG
60986: PUSH
60987: LD_INT 3
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 1
60996: NEG
60997: PUSH
60998: LD_INT 2
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 2
61007: PUSH
61008: LD_INT 4
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 2
61017: NEG
61018: PUSH
61019: LD_INT 2
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 4
61028: NEG
61029: PUSH
61030: LD_INT 0
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 4
61039: NEG
61040: PUSH
61041: LD_INT 1
61043: NEG
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 3
61051: NEG
61052: PUSH
61053: LD_INT 0
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 3
61062: NEG
61063: PUSH
61064: LD_INT 1
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 4
61073: NEG
61074: PUSH
61075: LD_INT 1
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 5
61084: NEG
61085: PUSH
61086: LD_INT 0
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 5
61095: NEG
61096: PUSH
61097: LD_INT 1
61099: NEG
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 5
61107: NEG
61108: PUSH
61109: LD_INT 2
61111: NEG
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 3
61119: NEG
61120: PUSH
61121: LD_INT 2
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: ST_TO_ADDR
// end ; end ;
61175: GO 61178
61177: POP
// case btype of b_depot , b_warehouse :
61178: LD_VAR 0 1
61182: PUSH
61183: LD_INT 0
61185: DOUBLE
61186: EQUAL
61187: IFTRUE 61197
61189: LD_INT 1
61191: DOUBLE
61192: EQUAL
61193: IFTRUE 61197
61195: GO 61398
61197: POP
// case nation of nation_american :
61198: LD_VAR 0 5
61202: PUSH
61203: LD_INT 1
61205: DOUBLE
61206: EQUAL
61207: IFTRUE 61211
61209: GO 61267
61211: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61212: LD_ADDR_VAR 0 9
61216: PUSH
61217: LD_VAR 0 11
61221: PUSH
61222: LD_VAR 0 12
61226: PUSH
61227: LD_VAR 0 13
61231: PUSH
61232: LD_VAR 0 14
61236: PUSH
61237: LD_VAR 0 15
61241: PUSH
61242: LD_VAR 0 16
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: PUSH
61255: LD_VAR 0 4
61259: PUSH
61260: LD_INT 1
61262: PLUS
61263: ARRAY
61264: ST_TO_ADDR
61265: GO 61396
61267: LD_INT 2
61269: DOUBLE
61270: EQUAL
61271: IFTRUE 61275
61273: GO 61331
61275: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61276: LD_ADDR_VAR 0 9
61280: PUSH
61281: LD_VAR 0 17
61285: PUSH
61286: LD_VAR 0 18
61290: PUSH
61291: LD_VAR 0 19
61295: PUSH
61296: LD_VAR 0 20
61300: PUSH
61301: LD_VAR 0 21
61305: PUSH
61306: LD_VAR 0 22
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: PUSH
61319: LD_VAR 0 4
61323: PUSH
61324: LD_INT 1
61326: PLUS
61327: ARRAY
61328: ST_TO_ADDR
61329: GO 61396
61331: LD_INT 3
61333: DOUBLE
61334: EQUAL
61335: IFTRUE 61339
61337: GO 61395
61339: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61340: LD_ADDR_VAR 0 9
61344: PUSH
61345: LD_VAR 0 23
61349: PUSH
61350: LD_VAR 0 24
61354: PUSH
61355: LD_VAR 0 25
61359: PUSH
61360: LD_VAR 0 26
61364: PUSH
61365: LD_VAR 0 27
61369: PUSH
61370: LD_VAR 0 28
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: PUSH
61383: LD_VAR 0 4
61387: PUSH
61388: LD_INT 1
61390: PLUS
61391: ARRAY
61392: ST_TO_ADDR
61393: GO 61396
61395: POP
61396: GO 61951
61398: LD_INT 2
61400: DOUBLE
61401: EQUAL
61402: IFTRUE 61412
61404: LD_INT 3
61406: DOUBLE
61407: EQUAL
61408: IFTRUE 61412
61410: GO 61468
61412: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61413: LD_ADDR_VAR 0 9
61417: PUSH
61418: LD_VAR 0 29
61422: PUSH
61423: LD_VAR 0 30
61427: PUSH
61428: LD_VAR 0 31
61432: PUSH
61433: LD_VAR 0 32
61437: PUSH
61438: LD_VAR 0 33
61442: PUSH
61443: LD_VAR 0 34
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: PUSH
61456: LD_VAR 0 4
61460: PUSH
61461: LD_INT 1
61463: PLUS
61464: ARRAY
61465: ST_TO_ADDR
61466: GO 61951
61468: LD_INT 16
61470: DOUBLE
61471: EQUAL
61472: IFTRUE 61530
61474: LD_INT 17
61476: DOUBLE
61477: EQUAL
61478: IFTRUE 61530
61480: LD_INT 18
61482: DOUBLE
61483: EQUAL
61484: IFTRUE 61530
61486: LD_INT 19
61488: DOUBLE
61489: EQUAL
61490: IFTRUE 61530
61492: LD_INT 22
61494: DOUBLE
61495: EQUAL
61496: IFTRUE 61530
61498: LD_INT 20
61500: DOUBLE
61501: EQUAL
61502: IFTRUE 61530
61504: LD_INT 21
61506: DOUBLE
61507: EQUAL
61508: IFTRUE 61530
61510: LD_INT 23
61512: DOUBLE
61513: EQUAL
61514: IFTRUE 61530
61516: LD_INT 24
61518: DOUBLE
61519: EQUAL
61520: IFTRUE 61530
61522: LD_INT 25
61524: DOUBLE
61525: EQUAL
61526: IFTRUE 61530
61528: GO 61586
61530: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61531: LD_ADDR_VAR 0 9
61535: PUSH
61536: LD_VAR 0 35
61540: PUSH
61541: LD_VAR 0 36
61545: PUSH
61546: LD_VAR 0 37
61550: PUSH
61551: LD_VAR 0 38
61555: PUSH
61556: LD_VAR 0 39
61560: PUSH
61561: LD_VAR 0 40
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: PUSH
61574: LD_VAR 0 4
61578: PUSH
61579: LD_INT 1
61581: PLUS
61582: ARRAY
61583: ST_TO_ADDR
61584: GO 61951
61586: LD_INT 6
61588: DOUBLE
61589: EQUAL
61590: IFTRUE 61642
61592: LD_INT 7
61594: DOUBLE
61595: EQUAL
61596: IFTRUE 61642
61598: LD_INT 8
61600: DOUBLE
61601: EQUAL
61602: IFTRUE 61642
61604: LD_INT 13
61606: DOUBLE
61607: EQUAL
61608: IFTRUE 61642
61610: LD_INT 12
61612: DOUBLE
61613: EQUAL
61614: IFTRUE 61642
61616: LD_INT 15
61618: DOUBLE
61619: EQUAL
61620: IFTRUE 61642
61622: LD_INT 11
61624: DOUBLE
61625: EQUAL
61626: IFTRUE 61642
61628: LD_INT 14
61630: DOUBLE
61631: EQUAL
61632: IFTRUE 61642
61634: LD_INT 10
61636: DOUBLE
61637: EQUAL
61638: IFTRUE 61642
61640: GO 61698
61642: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61643: LD_ADDR_VAR 0 9
61647: PUSH
61648: LD_VAR 0 41
61652: PUSH
61653: LD_VAR 0 42
61657: PUSH
61658: LD_VAR 0 43
61662: PUSH
61663: LD_VAR 0 44
61667: PUSH
61668: LD_VAR 0 45
61672: PUSH
61673: LD_VAR 0 46
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: PUSH
61686: LD_VAR 0 4
61690: PUSH
61691: LD_INT 1
61693: PLUS
61694: ARRAY
61695: ST_TO_ADDR
61696: GO 61951
61698: LD_INT 36
61700: DOUBLE
61701: EQUAL
61702: IFTRUE 61706
61704: GO 61762
61706: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61707: LD_ADDR_VAR 0 9
61711: PUSH
61712: LD_VAR 0 47
61716: PUSH
61717: LD_VAR 0 48
61721: PUSH
61722: LD_VAR 0 49
61726: PUSH
61727: LD_VAR 0 50
61731: PUSH
61732: LD_VAR 0 51
61736: PUSH
61737: LD_VAR 0 52
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: PUSH
61750: LD_VAR 0 4
61754: PUSH
61755: LD_INT 1
61757: PLUS
61758: ARRAY
61759: ST_TO_ADDR
61760: GO 61951
61762: LD_INT 4
61764: DOUBLE
61765: EQUAL
61766: IFTRUE 61788
61768: LD_INT 5
61770: DOUBLE
61771: EQUAL
61772: IFTRUE 61788
61774: LD_INT 34
61776: DOUBLE
61777: EQUAL
61778: IFTRUE 61788
61780: LD_INT 37
61782: DOUBLE
61783: EQUAL
61784: IFTRUE 61788
61786: GO 61844
61788: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61789: LD_ADDR_VAR 0 9
61793: PUSH
61794: LD_VAR 0 53
61798: PUSH
61799: LD_VAR 0 54
61803: PUSH
61804: LD_VAR 0 55
61808: PUSH
61809: LD_VAR 0 56
61813: PUSH
61814: LD_VAR 0 57
61818: PUSH
61819: LD_VAR 0 58
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: PUSH
61832: LD_VAR 0 4
61836: PUSH
61837: LD_INT 1
61839: PLUS
61840: ARRAY
61841: ST_TO_ADDR
61842: GO 61951
61844: LD_INT 31
61846: DOUBLE
61847: EQUAL
61848: IFTRUE 61894
61850: LD_INT 32
61852: DOUBLE
61853: EQUAL
61854: IFTRUE 61894
61856: LD_INT 33
61858: DOUBLE
61859: EQUAL
61860: IFTRUE 61894
61862: LD_INT 27
61864: DOUBLE
61865: EQUAL
61866: IFTRUE 61894
61868: LD_INT 26
61870: DOUBLE
61871: EQUAL
61872: IFTRUE 61894
61874: LD_INT 28
61876: DOUBLE
61877: EQUAL
61878: IFTRUE 61894
61880: LD_INT 29
61882: DOUBLE
61883: EQUAL
61884: IFTRUE 61894
61886: LD_INT 30
61888: DOUBLE
61889: EQUAL
61890: IFTRUE 61894
61892: GO 61950
61894: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61895: LD_ADDR_VAR 0 9
61899: PUSH
61900: LD_VAR 0 59
61904: PUSH
61905: LD_VAR 0 60
61909: PUSH
61910: LD_VAR 0 61
61914: PUSH
61915: LD_VAR 0 62
61919: PUSH
61920: LD_VAR 0 63
61924: PUSH
61925: LD_VAR 0 64
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: PUSH
61938: LD_VAR 0 4
61942: PUSH
61943: LD_INT 1
61945: PLUS
61946: ARRAY
61947: ST_TO_ADDR
61948: GO 61951
61950: POP
// temp_list2 = [ ] ;
61951: LD_ADDR_VAR 0 10
61955: PUSH
61956: EMPTY
61957: ST_TO_ADDR
// for i in temp_list do
61958: LD_ADDR_VAR 0 8
61962: PUSH
61963: LD_VAR 0 9
61967: PUSH
61968: FOR_IN
61969: IFFALSE 62021
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61971: LD_ADDR_VAR 0 10
61975: PUSH
61976: LD_VAR 0 10
61980: PUSH
61981: LD_VAR 0 8
61985: PUSH
61986: LD_INT 1
61988: ARRAY
61989: PUSH
61990: LD_VAR 0 2
61994: PLUS
61995: PUSH
61996: LD_VAR 0 8
62000: PUSH
62001: LD_INT 2
62003: ARRAY
62004: PUSH
62005: LD_VAR 0 3
62009: PLUS
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: EMPTY
62016: LIST
62017: ADD
62018: ST_TO_ADDR
62019: GO 61968
62021: POP
62022: POP
// result = temp_list2 ;
62023: LD_ADDR_VAR 0 7
62027: PUSH
62028: LD_VAR 0 10
62032: ST_TO_ADDR
// end ;
62033: LD_VAR 0 7
62037: RET
// export function EnemyInRange ( unit , dist ) ; begin
62038: LD_INT 0
62040: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62041: LD_ADDR_VAR 0 3
62045: PUSH
62046: LD_VAR 0 1
62050: PPUSH
62051: CALL_OW 255
62055: PPUSH
62056: LD_VAR 0 1
62060: PPUSH
62061: CALL_OW 250
62065: PPUSH
62066: LD_VAR 0 1
62070: PPUSH
62071: CALL_OW 251
62075: PPUSH
62076: LD_VAR 0 2
62080: PPUSH
62081: CALL 35440 0 4
62085: PUSH
62086: LD_INT 4
62088: ARRAY
62089: ST_TO_ADDR
// end ;
62090: LD_VAR 0 3
62094: RET
// export function PlayerSeeMe ( unit ) ; begin
62095: LD_INT 0
62097: PPUSH
// result := See ( your_side , unit ) ;
62098: LD_ADDR_VAR 0 2
62102: PUSH
62103: LD_OWVAR 2
62107: PPUSH
62108: LD_VAR 0 1
62112: PPUSH
62113: CALL_OW 292
62117: ST_TO_ADDR
// end ;
62118: LD_VAR 0 2
62122: RET
// export function ReverseDir ( unit ) ; begin
62123: LD_INT 0
62125: PPUSH
// if not unit then
62126: LD_VAR 0 1
62130: NOT
62131: IFFALSE 62135
// exit ;
62133: GO 62158
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62135: LD_ADDR_VAR 0 2
62139: PUSH
62140: LD_VAR 0 1
62144: PPUSH
62145: CALL_OW 254
62149: PUSH
62150: LD_INT 3
62152: PLUS
62153: PUSH
62154: LD_INT 6
62156: MOD
62157: ST_TO_ADDR
// end ;
62158: LD_VAR 0 2
62162: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
62163: LD_INT 0
62165: PPUSH
62166: PPUSH
62167: PPUSH
62168: PPUSH
62169: PPUSH
62170: PPUSH
// if not unit or not hexes then
62171: LD_VAR 0 1
62175: NOT
62176: PUSH
62177: LD_VAR 0 2
62181: NOT
62182: OR
62183: IFFALSE 62187
// exit ;
62185: GO 62310
// dist := 9999 ;
62187: LD_ADDR_VAR 0 5
62191: PUSH
62192: LD_INT 9999
62194: ST_TO_ADDR
// for i = 1 to hexes do
62195: LD_ADDR_VAR 0 4
62199: PUSH
62200: DOUBLE
62201: LD_INT 1
62203: DEC
62204: ST_TO_ADDR
62205: LD_VAR 0 2
62209: PUSH
62210: FOR_TO
62211: IFFALSE 62298
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62213: LD_ADDR_VAR 0 6
62217: PUSH
62218: LD_VAR 0 1
62222: PPUSH
62223: LD_VAR 0 2
62227: PUSH
62228: LD_VAR 0 4
62232: ARRAY
62233: PUSH
62234: LD_INT 1
62236: ARRAY
62237: PPUSH
62238: LD_VAR 0 2
62242: PUSH
62243: LD_VAR 0 4
62247: ARRAY
62248: PUSH
62249: LD_INT 2
62251: ARRAY
62252: PPUSH
62253: CALL_OW 297
62257: ST_TO_ADDR
// if tdist < dist then
62258: LD_VAR 0 6
62262: PUSH
62263: LD_VAR 0 5
62267: LESS
62268: IFFALSE 62296
// begin hex := hexes [ i ] ;
62270: LD_ADDR_VAR 0 8
62274: PUSH
62275: LD_VAR 0 2
62279: PUSH
62280: LD_VAR 0 4
62284: ARRAY
62285: ST_TO_ADDR
// dist := tdist ;
62286: LD_ADDR_VAR 0 5
62290: PUSH
62291: LD_VAR 0 6
62295: ST_TO_ADDR
// end ; end ;
62296: GO 62210
62298: POP
62299: POP
// result := hex ;
62300: LD_ADDR_VAR 0 3
62304: PUSH
62305: LD_VAR 0 8
62309: ST_TO_ADDR
// end ;
62310: LD_VAR 0 3
62314: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62315: LD_INT 0
62317: PPUSH
62318: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62319: LD_VAR 0 1
62323: NOT
62324: PUSH
62325: LD_VAR 0 1
62329: PUSH
62330: LD_INT 21
62332: PUSH
62333: LD_INT 2
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 23
62342: PUSH
62343: LD_INT 2
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PPUSH
62354: CALL_OW 69
62358: IN
62359: NOT
62360: OR
62361: IFFALSE 62365
// exit ;
62363: GO 62412
// for i = 1 to 3 do
62365: LD_ADDR_VAR 0 3
62369: PUSH
62370: DOUBLE
62371: LD_INT 1
62373: DEC
62374: ST_TO_ADDR
62375: LD_INT 3
62377: PUSH
62378: FOR_TO
62379: IFFALSE 62410
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62381: LD_VAR 0 1
62385: PPUSH
62386: CALL_OW 250
62390: PPUSH
62391: LD_VAR 0 1
62395: PPUSH
62396: CALL_OW 251
62400: PPUSH
62401: LD_INT 1
62403: PPUSH
62404: CALL_OW 453
62408: GO 62378
62410: POP
62411: POP
// end ;
62412: LD_VAR 0 2
62416: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62417: LD_INT 0
62419: PPUSH
62420: PPUSH
62421: PPUSH
62422: PPUSH
62423: PPUSH
62424: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62425: LD_VAR 0 1
62429: NOT
62430: PUSH
62431: LD_VAR 0 2
62435: NOT
62436: OR
62437: PUSH
62438: LD_VAR 0 1
62442: PPUSH
62443: CALL_OW 314
62447: OR
62448: IFFALSE 62452
// exit ;
62450: GO 62893
// x := GetX ( enemy_unit ) ;
62452: LD_ADDR_VAR 0 7
62456: PUSH
62457: LD_VAR 0 2
62461: PPUSH
62462: CALL_OW 250
62466: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62467: LD_ADDR_VAR 0 8
62471: PUSH
62472: LD_VAR 0 2
62476: PPUSH
62477: CALL_OW 251
62481: ST_TO_ADDR
// if not x or not y then
62482: LD_VAR 0 7
62486: NOT
62487: PUSH
62488: LD_VAR 0 8
62492: NOT
62493: OR
62494: IFFALSE 62498
// exit ;
62496: GO 62893
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62498: LD_ADDR_VAR 0 6
62502: PUSH
62503: LD_VAR 0 7
62507: PPUSH
62508: LD_INT 0
62510: PPUSH
62511: LD_INT 4
62513: PPUSH
62514: CALL_OW 272
62518: PUSH
62519: LD_VAR 0 8
62523: PPUSH
62524: LD_INT 0
62526: PPUSH
62527: LD_INT 4
62529: PPUSH
62530: CALL_OW 273
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_VAR 0 7
62543: PPUSH
62544: LD_INT 1
62546: PPUSH
62547: LD_INT 4
62549: PPUSH
62550: CALL_OW 272
62554: PUSH
62555: LD_VAR 0 8
62559: PPUSH
62560: LD_INT 1
62562: PPUSH
62563: LD_INT 4
62565: PPUSH
62566: CALL_OW 273
62570: PUSH
62571: EMPTY
62572: LIST
62573: LIST
62574: PUSH
62575: LD_VAR 0 7
62579: PPUSH
62580: LD_INT 2
62582: PPUSH
62583: LD_INT 4
62585: PPUSH
62586: CALL_OW 272
62590: PUSH
62591: LD_VAR 0 8
62595: PPUSH
62596: LD_INT 2
62598: PPUSH
62599: LD_INT 4
62601: PPUSH
62602: CALL_OW 273
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: LD_VAR 0 7
62615: PPUSH
62616: LD_INT 3
62618: PPUSH
62619: LD_INT 4
62621: PPUSH
62622: CALL_OW 272
62626: PUSH
62627: LD_VAR 0 8
62631: PPUSH
62632: LD_INT 3
62634: PPUSH
62635: LD_INT 4
62637: PPUSH
62638: CALL_OW 273
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_VAR 0 7
62651: PPUSH
62652: LD_INT 4
62654: PPUSH
62655: LD_INT 4
62657: PPUSH
62658: CALL_OW 272
62662: PUSH
62663: LD_VAR 0 8
62667: PPUSH
62668: LD_INT 4
62670: PPUSH
62671: LD_INT 4
62673: PPUSH
62674: CALL_OW 273
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_VAR 0 7
62687: PPUSH
62688: LD_INT 5
62690: PPUSH
62691: LD_INT 4
62693: PPUSH
62694: CALL_OW 272
62698: PUSH
62699: LD_VAR 0 8
62703: PPUSH
62704: LD_INT 5
62706: PPUSH
62707: LD_INT 4
62709: PPUSH
62710: CALL_OW 273
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: LIST
62723: LIST
62724: LIST
62725: LIST
62726: ST_TO_ADDR
// for i = tmp downto 1 do
62727: LD_ADDR_VAR 0 4
62731: PUSH
62732: DOUBLE
62733: LD_VAR 0 6
62737: INC
62738: ST_TO_ADDR
62739: LD_INT 1
62741: PUSH
62742: FOR_DOWNTO
62743: IFFALSE 62844
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62745: LD_VAR 0 6
62749: PUSH
62750: LD_VAR 0 4
62754: ARRAY
62755: PUSH
62756: LD_INT 1
62758: ARRAY
62759: PPUSH
62760: LD_VAR 0 6
62764: PUSH
62765: LD_VAR 0 4
62769: ARRAY
62770: PUSH
62771: LD_INT 2
62773: ARRAY
62774: PPUSH
62775: CALL_OW 488
62779: NOT
62780: PUSH
62781: LD_VAR 0 6
62785: PUSH
62786: LD_VAR 0 4
62790: ARRAY
62791: PUSH
62792: LD_INT 1
62794: ARRAY
62795: PPUSH
62796: LD_VAR 0 6
62800: PUSH
62801: LD_VAR 0 4
62805: ARRAY
62806: PUSH
62807: LD_INT 2
62809: ARRAY
62810: PPUSH
62811: CALL_OW 428
62815: PUSH
62816: LD_INT 0
62818: NONEQUAL
62819: OR
62820: IFFALSE 62842
// tmp := Delete ( tmp , i ) ;
62822: LD_ADDR_VAR 0 6
62826: PUSH
62827: LD_VAR 0 6
62831: PPUSH
62832: LD_VAR 0 4
62836: PPUSH
62837: CALL_OW 3
62841: ST_TO_ADDR
62842: GO 62742
62844: POP
62845: POP
// j := GetClosestHex ( unit , tmp ) ;
62846: LD_ADDR_VAR 0 5
62850: PUSH
62851: LD_VAR 0 1
62855: PPUSH
62856: LD_VAR 0 6
62860: PPUSH
62861: CALL 62163 0 2
62865: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62866: LD_VAR 0 1
62870: PPUSH
62871: LD_VAR 0 5
62875: PUSH
62876: LD_INT 1
62878: ARRAY
62879: PPUSH
62880: LD_VAR 0 5
62884: PUSH
62885: LD_INT 2
62887: ARRAY
62888: PPUSH
62889: CALL_OW 111
// end ;
62893: LD_VAR 0 3
62897: RET
// export function PrepareApemanSoldier ( ) ; begin
62898: LD_INT 0
62900: PPUSH
// uc_nation := 0 ;
62901: LD_ADDR_OWVAR 21
62905: PUSH
62906: LD_INT 0
62908: ST_TO_ADDR
// hc_sex := sex_male ;
62909: LD_ADDR_OWVAR 27
62913: PUSH
62914: LD_INT 1
62916: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
62917: LD_ADDR_OWVAR 28
62921: PUSH
62922: LD_INT 15
62924: ST_TO_ADDR
// hc_gallery :=  ;
62925: LD_ADDR_OWVAR 33
62929: PUSH
62930: LD_STRING 
62932: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62933: LD_ADDR_OWVAR 31
62937: PUSH
62938: LD_INT 0
62940: PPUSH
62941: LD_INT 3
62943: PPUSH
62944: CALL_OW 12
62948: PUSH
62949: LD_INT 0
62951: PPUSH
62952: LD_INT 3
62954: PPUSH
62955: CALL_OW 12
62959: PUSH
62960: LD_INT 0
62962: PUSH
62963: LD_INT 0
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: ST_TO_ADDR
// end ;
62972: LD_VAR 0 1
62976: RET
// export function PrepareApemanEngineer ( ) ; begin
62977: LD_INT 0
62979: PPUSH
// uc_nation := 0 ;
62980: LD_ADDR_OWVAR 21
62984: PUSH
62985: LD_INT 0
62987: ST_TO_ADDR
// hc_sex := sex_male ;
62988: LD_ADDR_OWVAR 27
62992: PUSH
62993: LD_INT 1
62995: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
62996: LD_ADDR_OWVAR 28
63000: PUSH
63001: LD_INT 16
63003: ST_TO_ADDR
// hc_gallery :=  ;
63004: LD_ADDR_OWVAR 33
63008: PUSH
63009: LD_STRING 
63011: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63012: LD_ADDR_OWVAR 31
63016: PUSH
63017: LD_INT 0
63019: PPUSH
63020: LD_INT 3
63022: PPUSH
63023: CALL_OW 12
63027: PUSH
63028: LD_INT 0
63030: PPUSH
63031: LD_INT 3
63033: PPUSH
63034: CALL_OW 12
63038: PUSH
63039: LD_INT 0
63041: PUSH
63042: LD_INT 0
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: ST_TO_ADDR
// end ;
63051: LD_VAR 0 1
63055: RET
// export function PrepareApeman ( agressivity ) ; begin
63056: LD_INT 0
63058: PPUSH
// uc_side := 0 ;
63059: LD_ADDR_OWVAR 20
63063: PUSH
63064: LD_INT 0
63066: ST_TO_ADDR
// uc_nation := 0 ;
63067: LD_ADDR_OWVAR 21
63071: PUSH
63072: LD_INT 0
63074: ST_TO_ADDR
// hc_sex := sex_male ;
63075: LD_ADDR_OWVAR 27
63079: PUSH
63080: LD_INT 1
63082: ST_TO_ADDR
// hc_class := class_apeman ;
63083: LD_ADDR_OWVAR 28
63087: PUSH
63088: LD_INT 12
63090: ST_TO_ADDR
// hc_gallery :=  ;
63091: LD_ADDR_OWVAR 33
63095: PUSH
63096: LD_STRING 
63098: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63099: LD_ADDR_OWVAR 35
63103: PUSH
63104: LD_VAR 0 1
63108: NEG
63109: PPUSH
63110: LD_VAR 0 1
63114: PPUSH
63115: CALL_OW 12
63119: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63120: LD_ADDR_OWVAR 31
63124: PUSH
63125: LD_INT 0
63127: PPUSH
63128: LD_INT 3
63130: PPUSH
63131: CALL_OW 12
63135: PUSH
63136: LD_INT 0
63138: PPUSH
63139: LD_INT 3
63141: PPUSH
63142: CALL_OW 12
63146: PUSH
63147: LD_INT 0
63149: PUSH
63150: LD_INT 0
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: ST_TO_ADDR
// end ;
63159: LD_VAR 0 2
63163: RET
// export function PrepareTiger ( agressivity ) ; begin
63164: LD_INT 0
63166: PPUSH
// uc_side := 0 ;
63167: LD_ADDR_OWVAR 20
63171: PUSH
63172: LD_INT 0
63174: ST_TO_ADDR
// uc_nation := 0 ;
63175: LD_ADDR_OWVAR 21
63179: PUSH
63180: LD_INT 0
63182: ST_TO_ADDR
// hc_class := class_tiger ;
63183: LD_ADDR_OWVAR 28
63187: PUSH
63188: LD_INT 14
63190: ST_TO_ADDR
// hc_gallery :=  ;
63191: LD_ADDR_OWVAR 33
63195: PUSH
63196: LD_STRING 
63198: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63199: LD_ADDR_OWVAR 35
63203: PUSH
63204: LD_VAR 0 1
63208: NEG
63209: PPUSH
63210: LD_VAR 0 1
63214: PPUSH
63215: CALL_OW 12
63219: ST_TO_ADDR
// end ;
63220: LD_VAR 0 2
63224: RET
// export function PrepareEnchidna ( ) ; begin
63225: LD_INT 0
63227: PPUSH
// uc_side := 0 ;
63228: LD_ADDR_OWVAR 20
63232: PUSH
63233: LD_INT 0
63235: ST_TO_ADDR
// uc_nation := 0 ;
63236: LD_ADDR_OWVAR 21
63240: PUSH
63241: LD_INT 0
63243: ST_TO_ADDR
// hc_class := class_baggie ;
63244: LD_ADDR_OWVAR 28
63248: PUSH
63249: LD_INT 13
63251: ST_TO_ADDR
// hc_gallery :=  ;
63252: LD_ADDR_OWVAR 33
63256: PUSH
63257: LD_STRING 
63259: ST_TO_ADDR
// end ;
63260: LD_VAR 0 1
63264: RET
// export function PrepareFrog ( ) ; begin
63265: LD_INT 0
63267: PPUSH
// uc_side := 0 ;
63268: LD_ADDR_OWVAR 20
63272: PUSH
63273: LD_INT 0
63275: ST_TO_ADDR
// uc_nation := 0 ;
63276: LD_ADDR_OWVAR 21
63280: PUSH
63281: LD_INT 0
63283: ST_TO_ADDR
// hc_class := class_frog ;
63284: LD_ADDR_OWVAR 28
63288: PUSH
63289: LD_INT 19
63291: ST_TO_ADDR
// hc_gallery :=  ;
63292: LD_ADDR_OWVAR 33
63296: PUSH
63297: LD_STRING 
63299: ST_TO_ADDR
// end ;
63300: LD_VAR 0 1
63304: RET
// export function PrepareFish ( ) ; begin
63305: LD_INT 0
63307: PPUSH
// uc_side := 0 ;
63308: LD_ADDR_OWVAR 20
63312: PUSH
63313: LD_INT 0
63315: ST_TO_ADDR
// uc_nation := 0 ;
63316: LD_ADDR_OWVAR 21
63320: PUSH
63321: LD_INT 0
63323: ST_TO_ADDR
// hc_class := class_fish ;
63324: LD_ADDR_OWVAR 28
63328: PUSH
63329: LD_INT 20
63331: ST_TO_ADDR
// hc_gallery :=  ;
63332: LD_ADDR_OWVAR 33
63336: PUSH
63337: LD_STRING 
63339: ST_TO_ADDR
// end ;
63340: LD_VAR 0 1
63344: RET
// export function PrepareBird ( ) ; begin
63345: LD_INT 0
63347: PPUSH
// uc_side := 0 ;
63348: LD_ADDR_OWVAR 20
63352: PUSH
63353: LD_INT 0
63355: ST_TO_ADDR
// uc_nation := 0 ;
63356: LD_ADDR_OWVAR 21
63360: PUSH
63361: LD_INT 0
63363: ST_TO_ADDR
// hc_class := class_phororhacos ;
63364: LD_ADDR_OWVAR 28
63368: PUSH
63369: LD_INT 18
63371: ST_TO_ADDR
// hc_gallery :=  ;
63372: LD_ADDR_OWVAR 33
63376: PUSH
63377: LD_STRING 
63379: ST_TO_ADDR
// end ;
63380: LD_VAR 0 1
63384: RET
// export function PrepareHorse ( ) ; begin
63385: LD_INT 0
63387: PPUSH
// uc_side := 0 ;
63388: LD_ADDR_OWVAR 20
63392: PUSH
63393: LD_INT 0
63395: ST_TO_ADDR
// uc_nation := 0 ;
63396: LD_ADDR_OWVAR 21
63400: PUSH
63401: LD_INT 0
63403: ST_TO_ADDR
// hc_class := class_horse ;
63404: LD_ADDR_OWVAR 28
63408: PUSH
63409: LD_INT 21
63411: ST_TO_ADDR
// hc_gallery :=  ;
63412: LD_ADDR_OWVAR 33
63416: PUSH
63417: LD_STRING 
63419: ST_TO_ADDR
// end ;
63420: LD_VAR 0 1
63424: RET
// export function PrepareMastodont ( ) ; begin
63425: LD_INT 0
63427: PPUSH
// uc_side := 0 ;
63428: LD_ADDR_OWVAR 20
63432: PUSH
63433: LD_INT 0
63435: ST_TO_ADDR
// uc_nation := 0 ;
63436: LD_ADDR_OWVAR 21
63440: PUSH
63441: LD_INT 0
63443: ST_TO_ADDR
// vc_chassis := class_mastodont ;
63444: LD_ADDR_OWVAR 37
63448: PUSH
63449: LD_INT 31
63451: ST_TO_ADDR
// vc_control := control_rider ;
63452: LD_ADDR_OWVAR 38
63456: PUSH
63457: LD_INT 4
63459: ST_TO_ADDR
// end ;
63460: LD_VAR 0 1
63464: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63465: LD_INT 0
63467: PPUSH
63468: PPUSH
63469: PPUSH
// uc_side = 0 ;
63470: LD_ADDR_OWVAR 20
63474: PUSH
63475: LD_INT 0
63477: ST_TO_ADDR
// uc_nation = 0 ;
63478: LD_ADDR_OWVAR 21
63482: PUSH
63483: LD_INT 0
63485: ST_TO_ADDR
// InitHc_All ( ) ;
63486: CALL_OW 584
// InitVc ;
63490: CALL_OW 20
// if mastodonts then
63494: LD_VAR 0 6
63498: IFFALSE 63565
// for i = 1 to mastodonts do
63500: LD_ADDR_VAR 0 11
63504: PUSH
63505: DOUBLE
63506: LD_INT 1
63508: DEC
63509: ST_TO_ADDR
63510: LD_VAR 0 6
63514: PUSH
63515: FOR_TO
63516: IFFALSE 63563
// begin vc_chassis := 31 ;
63518: LD_ADDR_OWVAR 37
63522: PUSH
63523: LD_INT 31
63525: ST_TO_ADDR
// vc_control := control_rider ;
63526: LD_ADDR_OWVAR 38
63530: PUSH
63531: LD_INT 4
63533: ST_TO_ADDR
// animal := CreateVehicle ;
63534: LD_ADDR_VAR 0 12
63538: PUSH
63539: CALL_OW 45
63543: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63544: LD_VAR 0 12
63548: PPUSH
63549: LD_VAR 0 8
63553: PPUSH
63554: LD_INT 0
63556: PPUSH
63557: CALL 65700 0 3
// end ;
63561: GO 63515
63563: POP
63564: POP
// if horses then
63565: LD_VAR 0 5
63569: IFFALSE 63636
// for i = 1 to horses do
63571: LD_ADDR_VAR 0 11
63575: PUSH
63576: DOUBLE
63577: LD_INT 1
63579: DEC
63580: ST_TO_ADDR
63581: LD_VAR 0 5
63585: PUSH
63586: FOR_TO
63587: IFFALSE 63634
// begin hc_class := 21 ;
63589: LD_ADDR_OWVAR 28
63593: PUSH
63594: LD_INT 21
63596: ST_TO_ADDR
// hc_gallery :=  ;
63597: LD_ADDR_OWVAR 33
63601: PUSH
63602: LD_STRING 
63604: ST_TO_ADDR
// animal := CreateHuman ;
63605: LD_ADDR_VAR 0 12
63609: PUSH
63610: CALL_OW 44
63614: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63615: LD_VAR 0 12
63619: PPUSH
63620: LD_VAR 0 8
63624: PPUSH
63625: LD_INT 0
63627: PPUSH
63628: CALL 65700 0 3
// end ;
63632: GO 63586
63634: POP
63635: POP
// if birds then
63636: LD_VAR 0 1
63640: IFFALSE 63707
// for i = 1 to birds do
63642: LD_ADDR_VAR 0 11
63646: PUSH
63647: DOUBLE
63648: LD_INT 1
63650: DEC
63651: ST_TO_ADDR
63652: LD_VAR 0 1
63656: PUSH
63657: FOR_TO
63658: IFFALSE 63705
// begin hc_class = 18 ;
63660: LD_ADDR_OWVAR 28
63664: PUSH
63665: LD_INT 18
63667: ST_TO_ADDR
// hc_gallery =  ;
63668: LD_ADDR_OWVAR 33
63672: PUSH
63673: LD_STRING 
63675: ST_TO_ADDR
// animal := CreateHuman ;
63676: LD_ADDR_VAR 0 12
63680: PUSH
63681: CALL_OW 44
63685: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63686: LD_VAR 0 12
63690: PPUSH
63691: LD_VAR 0 8
63695: PPUSH
63696: LD_INT 0
63698: PPUSH
63699: CALL 65700 0 3
// end ;
63703: GO 63657
63705: POP
63706: POP
// if tigers then
63707: LD_VAR 0 2
63711: IFFALSE 63795
// for i = 1 to tigers do
63713: LD_ADDR_VAR 0 11
63717: PUSH
63718: DOUBLE
63719: LD_INT 1
63721: DEC
63722: ST_TO_ADDR
63723: LD_VAR 0 2
63727: PUSH
63728: FOR_TO
63729: IFFALSE 63793
// begin hc_class = class_tiger ;
63731: LD_ADDR_OWVAR 28
63735: PUSH
63736: LD_INT 14
63738: ST_TO_ADDR
// hc_gallery =  ;
63739: LD_ADDR_OWVAR 33
63743: PUSH
63744: LD_STRING 
63746: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63747: LD_ADDR_OWVAR 35
63751: PUSH
63752: LD_INT 7
63754: NEG
63755: PPUSH
63756: LD_INT 7
63758: PPUSH
63759: CALL_OW 12
63763: ST_TO_ADDR
// animal := CreateHuman ;
63764: LD_ADDR_VAR 0 12
63768: PUSH
63769: CALL_OW 44
63773: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63774: LD_VAR 0 12
63778: PPUSH
63779: LD_VAR 0 8
63783: PPUSH
63784: LD_INT 0
63786: PPUSH
63787: CALL 65700 0 3
// end ;
63791: GO 63728
63793: POP
63794: POP
// if apemans then
63795: LD_VAR 0 3
63799: IFFALSE 63922
// for i = 1 to apemans do
63801: LD_ADDR_VAR 0 11
63805: PUSH
63806: DOUBLE
63807: LD_INT 1
63809: DEC
63810: ST_TO_ADDR
63811: LD_VAR 0 3
63815: PUSH
63816: FOR_TO
63817: IFFALSE 63920
// begin hc_class = class_apeman ;
63819: LD_ADDR_OWVAR 28
63823: PUSH
63824: LD_INT 12
63826: ST_TO_ADDR
// hc_gallery =  ;
63827: LD_ADDR_OWVAR 33
63831: PUSH
63832: LD_STRING 
63834: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63835: LD_ADDR_OWVAR 35
63839: PUSH
63840: LD_INT 2
63842: NEG
63843: PPUSH
63844: LD_INT 2
63846: PPUSH
63847: CALL_OW 12
63851: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63852: LD_ADDR_OWVAR 31
63856: PUSH
63857: LD_INT 1
63859: PPUSH
63860: LD_INT 3
63862: PPUSH
63863: CALL_OW 12
63867: PUSH
63868: LD_INT 1
63870: PPUSH
63871: LD_INT 3
63873: PPUSH
63874: CALL_OW 12
63878: PUSH
63879: LD_INT 0
63881: PUSH
63882: LD_INT 0
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: ST_TO_ADDR
// animal := CreateHuman ;
63891: LD_ADDR_VAR 0 12
63895: PUSH
63896: CALL_OW 44
63900: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63901: LD_VAR 0 12
63905: PPUSH
63906: LD_VAR 0 8
63910: PPUSH
63911: LD_INT 0
63913: PPUSH
63914: CALL 65700 0 3
// end ;
63918: GO 63816
63920: POP
63921: POP
// if enchidnas then
63922: LD_VAR 0 4
63926: IFFALSE 63993
// for i = 1 to enchidnas do
63928: LD_ADDR_VAR 0 11
63932: PUSH
63933: DOUBLE
63934: LD_INT 1
63936: DEC
63937: ST_TO_ADDR
63938: LD_VAR 0 4
63942: PUSH
63943: FOR_TO
63944: IFFALSE 63991
// begin hc_class = 13 ;
63946: LD_ADDR_OWVAR 28
63950: PUSH
63951: LD_INT 13
63953: ST_TO_ADDR
// hc_gallery =  ;
63954: LD_ADDR_OWVAR 33
63958: PUSH
63959: LD_STRING 
63961: ST_TO_ADDR
// animal := CreateHuman ;
63962: LD_ADDR_VAR 0 12
63966: PUSH
63967: CALL_OW 44
63971: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63972: LD_VAR 0 12
63976: PPUSH
63977: LD_VAR 0 8
63981: PPUSH
63982: LD_INT 0
63984: PPUSH
63985: CALL 65700 0 3
// end ;
63989: GO 63943
63991: POP
63992: POP
// if fishes then
63993: LD_VAR 0 7
63997: IFFALSE 64064
// for i = 1 to fishes do
63999: LD_ADDR_VAR 0 11
64003: PUSH
64004: DOUBLE
64005: LD_INT 1
64007: DEC
64008: ST_TO_ADDR
64009: LD_VAR 0 7
64013: PUSH
64014: FOR_TO
64015: IFFALSE 64062
// begin hc_class = 20 ;
64017: LD_ADDR_OWVAR 28
64021: PUSH
64022: LD_INT 20
64024: ST_TO_ADDR
// hc_gallery =  ;
64025: LD_ADDR_OWVAR 33
64029: PUSH
64030: LD_STRING 
64032: ST_TO_ADDR
// animal := CreateHuman ;
64033: LD_ADDR_VAR 0 12
64037: PUSH
64038: CALL_OW 44
64042: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64043: LD_VAR 0 12
64047: PPUSH
64048: LD_VAR 0 9
64052: PPUSH
64053: LD_INT 0
64055: PPUSH
64056: CALL 65700 0 3
// end ;
64060: GO 64014
64062: POP
64063: POP
// end ;
64064: LD_VAR 0 10
64068: RET
// export function WantHeal ( sci , unit ) ; begin
64069: LD_INT 0
64071: PPUSH
// if GetTaskList ( sci ) > 0 then
64072: LD_VAR 0 1
64076: PPUSH
64077: CALL_OW 437
64081: PUSH
64082: LD_INT 0
64084: GREATER
64085: IFFALSE 64155
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64087: LD_VAR 0 1
64091: PPUSH
64092: CALL_OW 437
64096: PUSH
64097: LD_INT 1
64099: ARRAY
64100: PUSH
64101: LD_INT 1
64103: ARRAY
64104: PUSH
64105: LD_STRING l
64107: EQUAL
64108: PUSH
64109: LD_VAR 0 1
64113: PPUSH
64114: CALL_OW 437
64118: PUSH
64119: LD_INT 1
64121: ARRAY
64122: PUSH
64123: LD_INT 4
64125: ARRAY
64126: PUSH
64127: LD_VAR 0 2
64131: EQUAL
64132: AND
64133: IFFALSE 64145
// result := true else
64135: LD_ADDR_VAR 0 3
64139: PUSH
64140: LD_INT 1
64142: ST_TO_ADDR
64143: GO 64153
// result := false ;
64145: LD_ADDR_VAR 0 3
64149: PUSH
64150: LD_INT 0
64152: ST_TO_ADDR
// end else
64153: GO 64163
// result := false ;
64155: LD_ADDR_VAR 0 3
64159: PUSH
64160: LD_INT 0
64162: ST_TO_ADDR
// end ;
64163: LD_VAR 0 3
64167: RET
// export function HealTarget ( sci ) ; begin
64168: LD_INT 0
64170: PPUSH
// if not sci then
64171: LD_VAR 0 1
64175: NOT
64176: IFFALSE 64180
// exit ;
64178: GO 64245
// result := 0 ;
64180: LD_ADDR_VAR 0 2
64184: PUSH
64185: LD_INT 0
64187: ST_TO_ADDR
// if GetTaskList ( sci ) then
64188: LD_VAR 0 1
64192: PPUSH
64193: CALL_OW 437
64197: IFFALSE 64245
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64199: LD_VAR 0 1
64203: PPUSH
64204: CALL_OW 437
64208: PUSH
64209: LD_INT 1
64211: ARRAY
64212: PUSH
64213: LD_INT 1
64215: ARRAY
64216: PUSH
64217: LD_STRING l
64219: EQUAL
64220: IFFALSE 64245
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64222: LD_ADDR_VAR 0 2
64226: PUSH
64227: LD_VAR 0 1
64231: PPUSH
64232: CALL_OW 437
64236: PUSH
64237: LD_INT 1
64239: ARRAY
64240: PUSH
64241: LD_INT 4
64243: ARRAY
64244: ST_TO_ADDR
// end ;
64245: LD_VAR 0 2
64249: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64250: LD_INT 0
64252: PPUSH
64253: PPUSH
64254: PPUSH
64255: PPUSH
// if not base_units then
64256: LD_VAR 0 1
64260: NOT
64261: IFFALSE 64265
// exit ;
64263: GO 64352
// result := false ;
64265: LD_ADDR_VAR 0 2
64269: PUSH
64270: LD_INT 0
64272: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64273: LD_ADDR_VAR 0 5
64277: PUSH
64278: LD_VAR 0 1
64282: PPUSH
64283: LD_INT 21
64285: PUSH
64286: LD_INT 3
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PPUSH
64293: CALL_OW 72
64297: ST_TO_ADDR
// if not tmp then
64298: LD_VAR 0 5
64302: NOT
64303: IFFALSE 64307
// exit ;
64305: GO 64352
// for i in tmp do
64307: LD_ADDR_VAR 0 3
64311: PUSH
64312: LD_VAR 0 5
64316: PUSH
64317: FOR_IN
64318: IFFALSE 64350
// begin result := EnemyInRange ( i , 22 ) ;
64320: LD_ADDR_VAR 0 2
64324: PUSH
64325: LD_VAR 0 3
64329: PPUSH
64330: LD_INT 22
64332: PPUSH
64333: CALL 62038 0 2
64337: ST_TO_ADDR
// if result then
64338: LD_VAR 0 2
64342: IFFALSE 64348
// exit ;
64344: POP
64345: POP
64346: GO 64352
// end ;
64348: GO 64317
64350: POP
64351: POP
// end ;
64352: LD_VAR 0 2
64356: RET
// export function FilterByTag ( units , tag ) ; begin
64357: LD_INT 0
64359: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64360: LD_ADDR_VAR 0 3
64364: PUSH
64365: LD_VAR 0 1
64369: PPUSH
64370: LD_INT 120
64372: PUSH
64373: LD_VAR 0 2
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PPUSH
64382: CALL_OW 72
64386: ST_TO_ADDR
// end ;
64387: LD_VAR 0 3
64391: RET
// export function IsDriver ( un ) ; begin
64392: LD_INT 0
64394: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64395: LD_ADDR_VAR 0 2
64399: PUSH
64400: LD_VAR 0 1
64404: PUSH
64405: LD_INT 55
64407: PUSH
64408: EMPTY
64409: LIST
64410: PPUSH
64411: CALL_OW 69
64415: IN
64416: ST_TO_ADDR
// end ;
64417: LD_VAR 0 2
64421: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64422: LD_INT 0
64424: PPUSH
64425: PPUSH
// list := [ ] ;
64426: LD_ADDR_VAR 0 5
64430: PUSH
64431: EMPTY
64432: ST_TO_ADDR
// case d of 0 :
64433: LD_VAR 0 3
64437: PUSH
64438: LD_INT 0
64440: DOUBLE
64441: EQUAL
64442: IFTRUE 64446
64444: GO 64579
64446: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64447: LD_ADDR_VAR 0 5
64451: PUSH
64452: LD_VAR 0 1
64456: PUSH
64457: LD_INT 4
64459: MINUS
64460: PUSH
64461: LD_VAR 0 2
64465: PUSH
64466: LD_INT 4
64468: MINUS
64469: PUSH
64470: LD_INT 2
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: LIST
64477: PUSH
64478: LD_VAR 0 1
64482: PUSH
64483: LD_INT 3
64485: MINUS
64486: PUSH
64487: LD_VAR 0 2
64491: PUSH
64492: LD_INT 1
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: LIST
64499: PUSH
64500: LD_VAR 0 1
64504: PUSH
64505: LD_INT 4
64507: PLUS
64508: PUSH
64509: LD_VAR 0 2
64513: PUSH
64514: LD_INT 4
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: LIST
64521: PUSH
64522: LD_VAR 0 1
64526: PUSH
64527: LD_INT 3
64529: PLUS
64530: PUSH
64531: LD_VAR 0 2
64535: PUSH
64536: LD_INT 3
64538: PLUS
64539: PUSH
64540: LD_INT 5
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: LIST
64547: PUSH
64548: LD_VAR 0 1
64552: PUSH
64553: LD_VAR 0 2
64557: PUSH
64558: LD_INT 4
64560: PLUS
64561: PUSH
64562: LD_INT 0
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: LIST
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: ST_TO_ADDR
// end ; 1 :
64577: GO 65277
64579: LD_INT 1
64581: DOUBLE
64582: EQUAL
64583: IFTRUE 64587
64585: GO 64720
64587: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64588: LD_ADDR_VAR 0 5
64592: PUSH
64593: LD_VAR 0 1
64597: PUSH
64598: LD_VAR 0 2
64602: PUSH
64603: LD_INT 4
64605: MINUS
64606: PUSH
64607: LD_INT 3
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: LIST
64614: PUSH
64615: LD_VAR 0 1
64619: PUSH
64620: LD_INT 3
64622: MINUS
64623: PUSH
64624: LD_VAR 0 2
64628: PUSH
64629: LD_INT 3
64631: MINUS
64632: PUSH
64633: LD_INT 2
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: LIST
64640: PUSH
64641: LD_VAR 0 1
64645: PUSH
64646: LD_INT 4
64648: MINUS
64649: PUSH
64650: LD_VAR 0 2
64654: PUSH
64655: LD_INT 1
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: LIST
64662: PUSH
64663: LD_VAR 0 1
64667: PUSH
64668: LD_VAR 0 2
64672: PUSH
64673: LD_INT 3
64675: PLUS
64676: PUSH
64677: LD_INT 0
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: LIST
64684: PUSH
64685: LD_VAR 0 1
64689: PUSH
64690: LD_INT 4
64692: PLUS
64693: PUSH
64694: LD_VAR 0 2
64698: PUSH
64699: LD_INT 4
64701: PLUS
64702: PUSH
64703: LD_INT 5
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: LIST
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: ST_TO_ADDR
// end ; 2 :
64718: GO 65277
64720: LD_INT 2
64722: DOUBLE
64723: EQUAL
64724: IFTRUE 64728
64726: GO 64857
64728: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64729: LD_ADDR_VAR 0 5
64733: PUSH
64734: LD_VAR 0 1
64738: PUSH
64739: LD_VAR 0 2
64743: PUSH
64744: LD_INT 3
64746: MINUS
64747: PUSH
64748: LD_INT 3
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: LIST
64755: PUSH
64756: LD_VAR 0 1
64760: PUSH
64761: LD_INT 4
64763: PLUS
64764: PUSH
64765: LD_VAR 0 2
64769: PUSH
64770: LD_INT 4
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: LIST
64777: PUSH
64778: LD_VAR 0 1
64782: PUSH
64783: LD_VAR 0 2
64787: PUSH
64788: LD_INT 4
64790: PLUS
64791: PUSH
64792: LD_INT 0
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: LIST
64799: PUSH
64800: LD_VAR 0 1
64804: PUSH
64805: LD_INT 3
64807: MINUS
64808: PUSH
64809: LD_VAR 0 2
64813: PUSH
64814: LD_INT 1
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: LIST
64821: PUSH
64822: LD_VAR 0 1
64826: PUSH
64827: LD_INT 4
64829: MINUS
64830: PUSH
64831: LD_VAR 0 2
64835: PUSH
64836: LD_INT 4
64838: MINUS
64839: PUSH
64840: LD_INT 2
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: LIST
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: LIST
64854: ST_TO_ADDR
// end ; 3 :
64855: GO 65277
64857: LD_INT 3
64859: DOUBLE
64860: EQUAL
64861: IFTRUE 64865
64863: GO 64998
64865: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64866: LD_ADDR_VAR 0 5
64870: PUSH
64871: LD_VAR 0 1
64875: PUSH
64876: LD_INT 3
64878: PLUS
64879: PUSH
64880: LD_VAR 0 2
64884: PUSH
64885: LD_INT 4
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: LIST
64892: PUSH
64893: LD_VAR 0 1
64897: PUSH
64898: LD_INT 4
64900: PLUS
64901: PUSH
64902: LD_VAR 0 2
64906: PUSH
64907: LD_INT 4
64909: PLUS
64910: PUSH
64911: LD_INT 5
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: LIST
64918: PUSH
64919: LD_VAR 0 1
64923: PUSH
64924: LD_INT 4
64926: MINUS
64927: PUSH
64928: LD_VAR 0 2
64932: PUSH
64933: LD_INT 1
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: LIST
64940: PUSH
64941: LD_VAR 0 1
64945: PUSH
64946: LD_VAR 0 2
64950: PUSH
64951: LD_INT 4
64953: MINUS
64954: PUSH
64955: LD_INT 3
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: LIST
64962: PUSH
64963: LD_VAR 0 1
64967: PUSH
64968: LD_INT 3
64970: MINUS
64971: PUSH
64972: LD_VAR 0 2
64976: PUSH
64977: LD_INT 3
64979: MINUS
64980: PUSH
64981: LD_INT 2
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: LIST
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: ST_TO_ADDR
// end ; 4 :
64996: GO 65277
64998: LD_INT 4
65000: DOUBLE
65001: EQUAL
65002: IFTRUE 65006
65004: GO 65139
65006: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65007: LD_ADDR_VAR 0 5
65011: PUSH
65012: LD_VAR 0 1
65016: PUSH
65017: LD_VAR 0 2
65021: PUSH
65022: LD_INT 4
65024: PLUS
65025: PUSH
65026: LD_INT 0
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: LIST
65033: PUSH
65034: LD_VAR 0 1
65038: PUSH
65039: LD_INT 3
65041: PLUS
65042: PUSH
65043: LD_VAR 0 2
65047: PUSH
65048: LD_INT 3
65050: PLUS
65051: PUSH
65052: LD_INT 5
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: LIST
65059: PUSH
65060: LD_VAR 0 1
65064: PUSH
65065: LD_INT 4
65067: PLUS
65068: PUSH
65069: LD_VAR 0 2
65073: PUSH
65074: LD_INT 4
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: LIST
65081: PUSH
65082: LD_VAR 0 1
65086: PUSH
65087: LD_VAR 0 2
65091: PUSH
65092: LD_INT 3
65094: MINUS
65095: PUSH
65096: LD_INT 3
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: LIST
65103: PUSH
65104: LD_VAR 0 1
65108: PUSH
65109: LD_INT 4
65111: MINUS
65112: PUSH
65113: LD_VAR 0 2
65117: PUSH
65118: LD_INT 4
65120: MINUS
65121: PUSH
65122: LD_INT 2
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: LIST
65129: PUSH
65130: EMPTY
65131: LIST
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: ST_TO_ADDR
// end ; 5 :
65137: GO 65277
65139: LD_INT 5
65141: DOUBLE
65142: EQUAL
65143: IFTRUE 65147
65145: GO 65276
65147: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65148: LD_ADDR_VAR 0 5
65152: PUSH
65153: LD_VAR 0 1
65157: PUSH
65158: LD_INT 4
65160: MINUS
65161: PUSH
65162: LD_VAR 0 2
65166: PUSH
65167: LD_INT 1
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: LIST
65174: PUSH
65175: LD_VAR 0 1
65179: PUSH
65180: LD_VAR 0 2
65184: PUSH
65185: LD_INT 4
65187: MINUS
65188: PUSH
65189: LD_INT 3
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: LIST
65196: PUSH
65197: LD_VAR 0 1
65201: PUSH
65202: LD_INT 4
65204: PLUS
65205: PUSH
65206: LD_VAR 0 2
65210: PUSH
65211: LD_INT 4
65213: PLUS
65214: PUSH
65215: LD_INT 5
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: LIST
65222: PUSH
65223: LD_VAR 0 1
65227: PUSH
65228: LD_INT 3
65230: PLUS
65231: PUSH
65232: LD_VAR 0 2
65236: PUSH
65237: LD_INT 4
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: LIST
65244: PUSH
65245: LD_VAR 0 1
65249: PUSH
65250: LD_VAR 0 2
65254: PUSH
65255: LD_INT 3
65257: PLUS
65258: PUSH
65259: LD_INT 0
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: LIST
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: LIST
65271: LIST
65272: LIST
65273: ST_TO_ADDR
// end ; end ;
65274: GO 65277
65276: POP
// result := list ;
65277: LD_ADDR_VAR 0 4
65281: PUSH
65282: LD_VAR 0 5
65286: ST_TO_ADDR
// end ;
65287: LD_VAR 0 4
65291: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65292: LD_INT 0
65294: PPUSH
65295: PPUSH
65296: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65297: LD_VAR 0 1
65301: NOT
65302: PUSH
65303: LD_VAR 0 2
65307: PUSH
65308: LD_INT 1
65310: PUSH
65311: LD_INT 2
65313: PUSH
65314: LD_INT 3
65316: PUSH
65317: LD_INT 4
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: LIST
65324: LIST
65325: IN
65326: NOT
65327: OR
65328: IFFALSE 65332
// exit ;
65330: GO 65424
// tmp := [ ] ;
65332: LD_ADDR_VAR 0 5
65336: PUSH
65337: EMPTY
65338: ST_TO_ADDR
// for i in units do
65339: LD_ADDR_VAR 0 4
65343: PUSH
65344: LD_VAR 0 1
65348: PUSH
65349: FOR_IN
65350: IFFALSE 65393
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
65352: LD_ADDR_VAR 0 5
65356: PUSH
65357: LD_VAR 0 5
65361: PPUSH
65362: LD_VAR 0 5
65366: PUSH
65367: LD_INT 1
65369: PLUS
65370: PPUSH
65371: LD_VAR 0 4
65375: PPUSH
65376: LD_VAR 0 2
65380: PPUSH
65381: CALL_OW 259
65385: PPUSH
65386: CALL_OW 2
65390: ST_TO_ADDR
65391: GO 65349
65393: POP
65394: POP
// if not tmp then
65395: LD_VAR 0 5
65399: NOT
65400: IFFALSE 65404
// exit ;
65402: GO 65424
// result := SortListByListDesc ( units , tmp ) ;
65404: LD_ADDR_VAR 0 3
65408: PUSH
65409: LD_VAR 0 1
65413: PPUSH
65414: LD_VAR 0 5
65418: PPUSH
65419: CALL_OW 77
65423: ST_TO_ADDR
// end ;
65424: LD_VAR 0 3
65428: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65429: LD_INT 0
65431: PPUSH
65432: PPUSH
65433: PPUSH
// result := false ;
65434: LD_ADDR_VAR 0 3
65438: PUSH
65439: LD_INT 0
65441: ST_TO_ADDR
// x := GetX ( building ) ;
65442: LD_ADDR_VAR 0 4
65446: PUSH
65447: LD_VAR 0 2
65451: PPUSH
65452: CALL_OW 250
65456: ST_TO_ADDR
// y := GetY ( building ) ;
65457: LD_ADDR_VAR 0 5
65461: PUSH
65462: LD_VAR 0 2
65466: PPUSH
65467: CALL_OW 251
65471: ST_TO_ADDR
// if not building or not x or not y then
65472: LD_VAR 0 2
65476: NOT
65477: PUSH
65478: LD_VAR 0 4
65482: NOT
65483: OR
65484: PUSH
65485: LD_VAR 0 5
65489: NOT
65490: OR
65491: IFFALSE 65495
// exit ;
65493: GO 65587
// if GetTaskList ( unit ) then
65495: LD_VAR 0 1
65499: PPUSH
65500: CALL_OW 437
65504: IFFALSE 65587
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65506: LD_STRING e
65508: PUSH
65509: LD_VAR 0 1
65513: PPUSH
65514: CALL_OW 437
65518: PUSH
65519: LD_INT 1
65521: ARRAY
65522: PUSH
65523: LD_INT 1
65525: ARRAY
65526: EQUAL
65527: PUSH
65528: LD_VAR 0 4
65532: PUSH
65533: LD_VAR 0 1
65537: PPUSH
65538: CALL_OW 437
65542: PUSH
65543: LD_INT 1
65545: ARRAY
65546: PUSH
65547: LD_INT 2
65549: ARRAY
65550: EQUAL
65551: AND
65552: PUSH
65553: LD_VAR 0 5
65557: PUSH
65558: LD_VAR 0 1
65562: PPUSH
65563: CALL_OW 437
65567: PUSH
65568: LD_INT 1
65570: ARRAY
65571: PUSH
65572: LD_INT 3
65574: ARRAY
65575: EQUAL
65576: AND
65577: IFFALSE 65587
// result := true end ;
65579: LD_ADDR_VAR 0 3
65583: PUSH
65584: LD_INT 1
65586: ST_TO_ADDR
// end ;
65587: LD_VAR 0 3
65591: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65592: LD_INT 0
65594: PPUSH
// result := false ;
65595: LD_ADDR_VAR 0 4
65599: PUSH
65600: LD_INT 0
65602: ST_TO_ADDR
// if GetTaskList ( unit ) then
65603: LD_VAR 0 1
65607: PPUSH
65608: CALL_OW 437
65612: IFFALSE 65695
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65614: LD_STRING M
65616: PUSH
65617: LD_VAR 0 1
65621: PPUSH
65622: CALL_OW 437
65626: PUSH
65627: LD_INT 1
65629: ARRAY
65630: PUSH
65631: LD_INT 1
65633: ARRAY
65634: EQUAL
65635: PUSH
65636: LD_VAR 0 2
65640: PUSH
65641: LD_VAR 0 1
65645: PPUSH
65646: CALL_OW 437
65650: PUSH
65651: LD_INT 1
65653: ARRAY
65654: PUSH
65655: LD_INT 2
65657: ARRAY
65658: EQUAL
65659: AND
65660: PUSH
65661: LD_VAR 0 3
65665: PUSH
65666: LD_VAR 0 1
65670: PPUSH
65671: CALL_OW 437
65675: PUSH
65676: LD_INT 1
65678: ARRAY
65679: PUSH
65680: LD_INT 3
65682: ARRAY
65683: EQUAL
65684: AND
65685: IFFALSE 65695
// result := true ;
65687: LD_ADDR_VAR 0 4
65691: PUSH
65692: LD_INT 1
65694: ST_TO_ADDR
// end ; end ;
65695: LD_VAR 0 4
65699: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65700: LD_INT 0
65702: PPUSH
65703: PPUSH
65704: PPUSH
65705: PPUSH
// if not unit or not area then
65706: LD_VAR 0 1
65710: NOT
65711: PUSH
65712: LD_VAR 0 2
65716: NOT
65717: OR
65718: IFFALSE 65722
// exit ;
65720: GO 65886
// tmp := AreaToList ( area , i ) ;
65722: LD_ADDR_VAR 0 6
65726: PUSH
65727: LD_VAR 0 2
65731: PPUSH
65732: LD_VAR 0 5
65736: PPUSH
65737: CALL_OW 517
65741: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65742: LD_ADDR_VAR 0 5
65746: PUSH
65747: DOUBLE
65748: LD_INT 1
65750: DEC
65751: ST_TO_ADDR
65752: LD_VAR 0 6
65756: PUSH
65757: LD_INT 1
65759: ARRAY
65760: PUSH
65761: FOR_TO
65762: IFFALSE 65884
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65764: LD_ADDR_VAR 0 7
65768: PUSH
65769: LD_VAR 0 6
65773: PUSH
65774: LD_INT 1
65776: ARRAY
65777: PUSH
65778: LD_VAR 0 5
65782: ARRAY
65783: PUSH
65784: LD_VAR 0 6
65788: PUSH
65789: LD_INT 2
65791: ARRAY
65792: PUSH
65793: LD_VAR 0 5
65797: ARRAY
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65803: LD_VAR 0 7
65807: PUSH
65808: LD_INT 1
65810: ARRAY
65811: PPUSH
65812: LD_VAR 0 7
65816: PUSH
65817: LD_INT 2
65819: ARRAY
65820: PPUSH
65821: CALL_OW 428
65825: PUSH
65826: LD_INT 0
65828: EQUAL
65829: IFFALSE 65882
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65831: LD_VAR 0 1
65835: PPUSH
65836: LD_VAR 0 7
65840: PUSH
65841: LD_INT 1
65843: ARRAY
65844: PPUSH
65845: LD_VAR 0 7
65849: PUSH
65850: LD_INT 2
65852: ARRAY
65853: PPUSH
65854: LD_VAR 0 3
65858: PPUSH
65859: CALL_OW 48
// result := IsPlaced ( unit ) ;
65863: LD_ADDR_VAR 0 4
65867: PUSH
65868: LD_VAR 0 1
65872: PPUSH
65873: CALL_OW 305
65877: ST_TO_ADDR
// exit ;
65878: POP
65879: POP
65880: GO 65886
// end ; end ;
65882: GO 65761
65884: POP
65885: POP
// end ;
65886: LD_VAR 0 4
65890: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65891: LD_INT 0
65893: PPUSH
65894: PPUSH
65895: PPUSH
// if not side or side > 8 then
65896: LD_VAR 0 1
65900: NOT
65901: PUSH
65902: LD_VAR 0 1
65906: PUSH
65907: LD_INT 8
65909: GREATER
65910: OR
65911: IFFALSE 65915
// exit ;
65913: GO 66102
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65915: LD_ADDR_VAR 0 4
65919: PUSH
65920: LD_INT 22
65922: PUSH
65923: LD_VAR 0 1
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: PUSH
65932: LD_INT 21
65934: PUSH
65935: LD_INT 3
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: PPUSH
65946: CALL_OW 69
65950: ST_TO_ADDR
// if not tmp then
65951: LD_VAR 0 4
65955: NOT
65956: IFFALSE 65960
// exit ;
65958: GO 66102
// enable_addtolog := true ;
65960: LD_ADDR_OWVAR 81
65964: PUSH
65965: LD_INT 1
65967: ST_TO_ADDR
// AddToLog ( [ ) ;
65968: LD_STRING [
65970: PPUSH
65971: CALL_OW 561
// for i in tmp do
65975: LD_ADDR_VAR 0 3
65979: PUSH
65980: LD_VAR 0 4
65984: PUSH
65985: FOR_IN
65986: IFFALSE 66093
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65988: LD_STRING [
65990: PUSH
65991: LD_VAR 0 3
65995: PPUSH
65996: CALL_OW 266
66000: STR
66001: PUSH
66002: LD_STRING , 
66004: STR
66005: PUSH
66006: LD_VAR 0 3
66010: PPUSH
66011: CALL_OW 250
66015: STR
66016: PUSH
66017: LD_STRING , 
66019: STR
66020: PUSH
66021: LD_VAR 0 3
66025: PPUSH
66026: CALL_OW 251
66030: STR
66031: PUSH
66032: LD_STRING , 
66034: STR
66035: PUSH
66036: LD_VAR 0 3
66040: PPUSH
66041: CALL_OW 254
66045: STR
66046: PUSH
66047: LD_STRING , 
66049: STR
66050: PUSH
66051: LD_VAR 0 3
66055: PPUSH
66056: LD_INT 1
66058: PPUSH
66059: CALL_OW 268
66063: STR
66064: PUSH
66065: LD_STRING , 
66067: STR
66068: PUSH
66069: LD_VAR 0 3
66073: PPUSH
66074: LD_INT 2
66076: PPUSH
66077: CALL_OW 268
66081: STR
66082: PUSH
66083: LD_STRING ],
66085: STR
66086: PPUSH
66087: CALL_OW 561
// end ;
66091: GO 65985
66093: POP
66094: POP
// AddToLog ( ]; ) ;
66095: LD_STRING ];
66097: PPUSH
66098: CALL_OW 561
// end ;
66102: LD_VAR 0 2
66106: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66107: LD_INT 0
66109: PPUSH
66110: PPUSH
66111: PPUSH
66112: PPUSH
66113: PPUSH
// if not area or not rate or not max then
66114: LD_VAR 0 1
66118: NOT
66119: PUSH
66120: LD_VAR 0 2
66124: NOT
66125: OR
66126: PUSH
66127: LD_VAR 0 4
66131: NOT
66132: OR
66133: IFFALSE 66137
// exit ;
66135: GO 66326
// while 1 do
66137: LD_INT 1
66139: IFFALSE 66326
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66141: LD_ADDR_VAR 0 9
66145: PUSH
66146: LD_VAR 0 1
66150: PPUSH
66151: LD_INT 1
66153: PPUSH
66154: CALL_OW 287
66158: PUSH
66159: LD_INT 10
66161: MUL
66162: ST_TO_ADDR
// r := rate / 10 ;
66163: LD_ADDR_VAR 0 7
66167: PUSH
66168: LD_VAR 0 2
66172: PUSH
66173: LD_INT 10
66175: DIVREAL
66176: ST_TO_ADDR
// time := 1 1$00 ;
66177: LD_ADDR_VAR 0 8
66181: PUSH
66182: LD_INT 2100
66184: ST_TO_ADDR
// if amount < min then
66185: LD_VAR 0 9
66189: PUSH
66190: LD_VAR 0 3
66194: LESS
66195: IFFALSE 66213
// r := r * 2 else
66197: LD_ADDR_VAR 0 7
66201: PUSH
66202: LD_VAR 0 7
66206: PUSH
66207: LD_INT 2
66209: MUL
66210: ST_TO_ADDR
66211: GO 66239
// if amount > max then
66213: LD_VAR 0 9
66217: PUSH
66218: LD_VAR 0 4
66222: GREATER
66223: IFFALSE 66239
// r := r / 2 ;
66225: LD_ADDR_VAR 0 7
66229: PUSH
66230: LD_VAR 0 7
66234: PUSH
66235: LD_INT 2
66237: DIVREAL
66238: ST_TO_ADDR
// time := time / r ;
66239: LD_ADDR_VAR 0 8
66243: PUSH
66244: LD_VAR 0 8
66248: PUSH
66249: LD_VAR 0 7
66253: DIVREAL
66254: ST_TO_ADDR
// if time < 0 then
66255: LD_VAR 0 8
66259: PUSH
66260: LD_INT 0
66262: LESS
66263: IFFALSE 66280
// time := time * - 1 ;
66265: LD_ADDR_VAR 0 8
66269: PUSH
66270: LD_VAR 0 8
66274: PUSH
66275: LD_INT 1
66277: NEG
66278: MUL
66279: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66280: LD_VAR 0 8
66284: PUSH
66285: LD_INT 35
66287: PPUSH
66288: LD_INT 875
66290: PPUSH
66291: CALL_OW 12
66295: PLUS
66296: PPUSH
66297: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66301: LD_INT 1
66303: PPUSH
66304: LD_INT 5
66306: PPUSH
66307: CALL_OW 12
66311: PPUSH
66312: LD_VAR 0 1
66316: PPUSH
66317: LD_INT 1
66319: PPUSH
66320: CALL_OW 55
// end ;
66324: GO 66137
// end ;
66326: LD_VAR 0 5
66330: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66331: LD_INT 0
66333: PPUSH
66334: PPUSH
66335: PPUSH
66336: PPUSH
66337: PPUSH
66338: PPUSH
66339: PPUSH
66340: PPUSH
// if not turrets or not factories then
66341: LD_VAR 0 1
66345: NOT
66346: PUSH
66347: LD_VAR 0 2
66351: NOT
66352: OR
66353: IFFALSE 66357
// exit ;
66355: GO 66664
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66357: LD_ADDR_VAR 0 10
66361: PUSH
66362: LD_INT 5
66364: PUSH
66365: LD_INT 6
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 2
66374: PUSH
66375: LD_INT 4
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: PUSH
66382: LD_INT 3
66384: PUSH
66385: LD_INT 5
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: LIST
66396: PUSH
66397: LD_INT 24
66399: PUSH
66400: LD_INT 25
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: LD_INT 23
66409: PUSH
66410: LD_INT 27
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: PUSH
66421: LD_INT 42
66423: PUSH
66424: LD_INT 43
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: PUSH
66431: LD_INT 44
66433: PUSH
66434: LD_INT 46
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: PUSH
66441: LD_INT 45
66443: PUSH
66444: LD_INT 47
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: LIST
66455: PUSH
66456: EMPTY
66457: LIST
66458: LIST
66459: LIST
66460: ST_TO_ADDR
// result := [ ] ;
66461: LD_ADDR_VAR 0 3
66465: PUSH
66466: EMPTY
66467: ST_TO_ADDR
// for i in turrets do
66468: LD_ADDR_VAR 0 4
66472: PUSH
66473: LD_VAR 0 1
66477: PUSH
66478: FOR_IN
66479: IFFALSE 66662
// begin nat := GetNation ( i ) ;
66481: LD_ADDR_VAR 0 7
66485: PUSH
66486: LD_VAR 0 4
66490: PPUSH
66491: CALL_OW 248
66495: ST_TO_ADDR
// weapon := 0 ;
66496: LD_ADDR_VAR 0 8
66500: PUSH
66501: LD_INT 0
66503: ST_TO_ADDR
// if not nat then
66504: LD_VAR 0 7
66508: NOT
66509: IFFALSE 66513
// continue ;
66511: GO 66478
// for j in list [ nat ] do
66513: LD_ADDR_VAR 0 5
66517: PUSH
66518: LD_VAR 0 10
66522: PUSH
66523: LD_VAR 0 7
66527: ARRAY
66528: PUSH
66529: FOR_IN
66530: IFFALSE 66571
// if GetBWeapon ( i ) = j [ 1 ] then
66532: LD_VAR 0 4
66536: PPUSH
66537: CALL_OW 269
66541: PUSH
66542: LD_VAR 0 5
66546: PUSH
66547: LD_INT 1
66549: ARRAY
66550: EQUAL
66551: IFFALSE 66569
// begin weapon := j [ 2 ] ;
66553: LD_ADDR_VAR 0 8
66557: PUSH
66558: LD_VAR 0 5
66562: PUSH
66563: LD_INT 2
66565: ARRAY
66566: ST_TO_ADDR
// break ;
66567: GO 66571
// end ;
66569: GO 66529
66571: POP
66572: POP
// if not weapon then
66573: LD_VAR 0 8
66577: NOT
66578: IFFALSE 66582
// continue ;
66580: GO 66478
// for k in factories do
66582: LD_ADDR_VAR 0 6
66586: PUSH
66587: LD_VAR 0 2
66591: PUSH
66592: FOR_IN
66593: IFFALSE 66658
// begin weapons := AvailableWeaponList ( k ) ;
66595: LD_ADDR_VAR 0 9
66599: PUSH
66600: LD_VAR 0 6
66604: PPUSH
66605: CALL_OW 478
66609: ST_TO_ADDR
// if not weapons then
66610: LD_VAR 0 9
66614: NOT
66615: IFFALSE 66619
// continue ;
66617: GO 66592
// if weapon in weapons then
66619: LD_VAR 0 8
66623: PUSH
66624: LD_VAR 0 9
66628: IN
66629: IFFALSE 66656
// begin result := [ i , weapon ] ;
66631: LD_ADDR_VAR 0 3
66635: PUSH
66636: LD_VAR 0 4
66640: PUSH
66641: LD_VAR 0 8
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: ST_TO_ADDR
// exit ;
66650: POP
66651: POP
66652: POP
66653: POP
66654: GO 66664
// end ; end ;
66656: GO 66592
66658: POP
66659: POP
// end ;
66660: GO 66478
66662: POP
66663: POP
// end ;
66664: LD_VAR 0 3
66668: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66669: LD_INT 0
66671: PPUSH
// if not side or side > 8 then
66672: LD_VAR 0 3
66676: NOT
66677: PUSH
66678: LD_VAR 0 3
66682: PUSH
66683: LD_INT 8
66685: GREATER
66686: OR
66687: IFFALSE 66691
// exit ;
66689: GO 66750
// if not range then
66691: LD_VAR 0 4
66695: NOT
66696: IFFALSE 66707
// range := - 12 ;
66698: LD_ADDR_VAR 0 4
66702: PUSH
66703: LD_INT 12
66705: NEG
66706: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66707: LD_VAR 0 1
66711: PPUSH
66712: LD_VAR 0 2
66716: PPUSH
66717: LD_VAR 0 3
66721: PPUSH
66722: LD_VAR 0 4
66726: PPUSH
66727: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66731: LD_VAR 0 1
66735: PPUSH
66736: LD_VAR 0 2
66740: PPUSH
66741: LD_VAR 0 3
66745: PPUSH
66746: CALL_OW 331
// end ;
66750: LD_VAR 0 5
66754: RET
// export function Video ( mode ) ; begin
66755: LD_INT 0
66757: PPUSH
// ingame_video = mode ;
66758: LD_ADDR_OWVAR 52
66762: PUSH
66763: LD_VAR 0 1
66767: ST_TO_ADDR
// interface_hidden = mode ;
66768: LD_ADDR_OWVAR 54
66772: PUSH
66773: LD_VAR 0 1
66777: ST_TO_ADDR
// end ;
66778: LD_VAR 0 2
66782: RET
// export function Join ( array , element ) ; begin
66783: LD_INT 0
66785: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66786: LD_ADDR_VAR 0 3
66790: PUSH
66791: LD_VAR 0 1
66795: PPUSH
66796: LD_VAR 0 1
66800: PUSH
66801: LD_INT 1
66803: PLUS
66804: PPUSH
66805: LD_VAR 0 2
66809: PPUSH
66810: CALL_OW 1
66814: ST_TO_ADDR
// end ;
66815: LD_VAR 0 3
66819: RET
// export function JoinUnion ( array , element ) ; begin
66820: LD_INT 0
66822: PPUSH
// result := array union element ;
66823: LD_ADDR_VAR 0 3
66827: PUSH
66828: LD_VAR 0 1
66832: PUSH
66833: LD_VAR 0 2
66837: UNION
66838: ST_TO_ADDR
// end ;
66839: LD_VAR 0 3
66843: RET
// export function GetBehemoths ( side ) ; begin
66844: LD_INT 0
66846: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
66847: LD_ADDR_VAR 0 2
66851: PUSH
66852: LD_INT 22
66854: PUSH
66855: LD_VAR 0 1
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: PUSH
66864: LD_INT 31
66866: PUSH
66867: LD_INT 25
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: PUSH
66874: EMPTY
66875: LIST
66876: LIST
66877: PPUSH
66878: CALL_OW 69
66882: ST_TO_ADDR
// end ;
66883: LD_VAR 0 2
66887: RET
// export function Shuffle ( array ) ; var i , index ; begin
66888: LD_INT 0
66890: PPUSH
66891: PPUSH
66892: PPUSH
// result := [ ] ;
66893: LD_ADDR_VAR 0 2
66897: PUSH
66898: EMPTY
66899: ST_TO_ADDR
// if not array then
66900: LD_VAR 0 1
66904: NOT
66905: IFFALSE 66909
// exit ;
66907: GO 67008
// Randomize ;
66909: CALL_OW 10
// for i = array downto 1 do
66913: LD_ADDR_VAR 0 3
66917: PUSH
66918: DOUBLE
66919: LD_VAR 0 1
66923: INC
66924: ST_TO_ADDR
66925: LD_INT 1
66927: PUSH
66928: FOR_DOWNTO
66929: IFFALSE 67006
// begin index := rand ( 1 , array ) ;
66931: LD_ADDR_VAR 0 4
66935: PUSH
66936: LD_INT 1
66938: PPUSH
66939: LD_VAR 0 1
66943: PPUSH
66944: CALL_OW 12
66948: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66949: LD_ADDR_VAR 0 2
66953: PUSH
66954: LD_VAR 0 2
66958: PPUSH
66959: LD_VAR 0 2
66963: PUSH
66964: LD_INT 1
66966: PLUS
66967: PPUSH
66968: LD_VAR 0 1
66972: PUSH
66973: LD_VAR 0 4
66977: ARRAY
66978: PPUSH
66979: CALL_OW 2
66983: ST_TO_ADDR
// array := Delete ( array , index ) ;
66984: LD_ADDR_VAR 0 1
66988: PUSH
66989: LD_VAR 0 1
66993: PPUSH
66994: LD_VAR 0 4
66998: PPUSH
66999: CALL_OW 3
67003: ST_TO_ADDR
// end ;
67004: GO 66928
67006: POP
67007: POP
// end ;
67008: LD_VAR 0 2
67012: RET
// export function GetBaseMaterials ( base ) ; begin
67013: LD_INT 0
67015: PPUSH
// result := [ 0 , 0 , 0 ] ;
67016: LD_ADDR_VAR 0 2
67020: PUSH
67021: LD_INT 0
67023: PUSH
67024: LD_INT 0
67026: PUSH
67027: LD_INT 0
67029: PUSH
67030: EMPTY
67031: LIST
67032: LIST
67033: LIST
67034: ST_TO_ADDR
// if not base then
67035: LD_VAR 0 1
67039: NOT
67040: IFFALSE 67044
// exit ;
67042: GO 67093
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67044: LD_ADDR_VAR 0 2
67048: PUSH
67049: LD_VAR 0 1
67053: PPUSH
67054: LD_INT 1
67056: PPUSH
67057: CALL_OW 275
67061: PUSH
67062: LD_VAR 0 1
67066: PPUSH
67067: LD_INT 2
67069: PPUSH
67070: CALL_OW 275
67074: PUSH
67075: LD_VAR 0 1
67079: PPUSH
67080: LD_INT 3
67082: PPUSH
67083: CALL_OW 275
67087: PUSH
67088: EMPTY
67089: LIST
67090: LIST
67091: LIST
67092: ST_TO_ADDR
// end ;
67093: LD_VAR 0 2
67097: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67098: LD_INT 0
67100: PPUSH
67101: PPUSH
// result := array ;
67102: LD_ADDR_VAR 0 3
67106: PUSH
67107: LD_VAR 0 1
67111: ST_TO_ADDR
// if size >= result then
67112: LD_VAR 0 2
67116: PUSH
67117: LD_VAR 0 3
67121: GREATEREQUAL
67122: IFFALSE 67126
// exit ;
67124: GO 67176
// if size then
67126: LD_VAR 0 2
67130: IFFALSE 67176
// for i := array downto size do
67132: LD_ADDR_VAR 0 4
67136: PUSH
67137: DOUBLE
67138: LD_VAR 0 1
67142: INC
67143: ST_TO_ADDR
67144: LD_VAR 0 2
67148: PUSH
67149: FOR_DOWNTO
67150: IFFALSE 67174
// result := Delete ( result , result ) ;
67152: LD_ADDR_VAR 0 3
67156: PUSH
67157: LD_VAR 0 3
67161: PPUSH
67162: LD_VAR 0 3
67166: PPUSH
67167: CALL_OW 3
67171: ST_TO_ADDR
67172: GO 67149
67174: POP
67175: POP
// end ;
67176: LD_VAR 0 3
67180: RET
// export function ComExit ( unit ) ; var tmp ; begin
67181: LD_INT 0
67183: PPUSH
67184: PPUSH
// if not IsInUnit ( unit ) then
67185: LD_VAR 0 1
67189: PPUSH
67190: CALL_OW 310
67194: NOT
67195: IFFALSE 67199
// exit ;
67197: GO 67259
// tmp := IsInUnit ( unit ) ;
67199: LD_ADDR_VAR 0 3
67203: PUSH
67204: LD_VAR 0 1
67208: PPUSH
67209: CALL_OW 310
67213: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67214: LD_VAR 0 3
67218: PPUSH
67219: CALL_OW 247
67223: PUSH
67224: LD_INT 2
67226: EQUAL
67227: IFFALSE 67240
// ComExitVehicle ( unit ) else
67229: LD_VAR 0 1
67233: PPUSH
67234: CALL_OW 121
67238: GO 67249
// ComExitBuilding ( unit ) ;
67240: LD_VAR 0 1
67244: PPUSH
67245: CALL_OW 122
// result := tmp ;
67249: LD_ADDR_VAR 0 2
67253: PUSH
67254: LD_VAR 0 3
67258: ST_TO_ADDR
// end ;
67259: LD_VAR 0 2
67263: RET
// export function ComExitAll ( units ) ; var i ; begin
67264: LD_INT 0
67266: PPUSH
67267: PPUSH
// if not units then
67268: LD_VAR 0 1
67272: NOT
67273: IFFALSE 67277
// exit ;
67275: GO 67303
// for i in units do
67277: LD_ADDR_VAR 0 3
67281: PUSH
67282: LD_VAR 0 1
67286: PUSH
67287: FOR_IN
67288: IFFALSE 67301
// ComExit ( i ) ;
67290: LD_VAR 0 3
67294: PPUSH
67295: CALL 67181 0 1
67299: GO 67287
67301: POP
67302: POP
// end ;
67303: LD_VAR 0 2
67307: RET
// export function ResetHc ; begin
67308: LD_INT 0
67310: PPUSH
// InitHc ;
67311: CALL_OW 19
// hc_importance := 0 ;
67315: LD_ADDR_OWVAR 32
67319: PUSH
67320: LD_INT 0
67322: ST_TO_ADDR
// end ;
67323: LD_VAR 0 1
67327: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67328: LD_INT 0
67330: PPUSH
67331: PPUSH
67332: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67333: LD_ADDR_VAR 0 6
67337: PUSH
67338: LD_VAR 0 1
67342: PUSH
67343: LD_VAR 0 3
67347: PLUS
67348: PUSH
67349: LD_INT 2
67351: DIV
67352: ST_TO_ADDR
// if _x < 0 then
67353: LD_VAR 0 6
67357: PUSH
67358: LD_INT 0
67360: LESS
67361: IFFALSE 67378
// _x := _x * - 1 ;
67363: LD_ADDR_VAR 0 6
67367: PUSH
67368: LD_VAR 0 6
67372: PUSH
67373: LD_INT 1
67375: NEG
67376: MUL
67377: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67378: LD_ADDR_VAR 0 7
67382: PUSH
67383: LD_VAR 0 2
67387: PUSH
67388: LD_VAR 0 4
67392: PLUS
67393: PUSH
67394: LD_INT 2
67396: DIV
67397: ST_TO_ADDR
// if _y < 0 then
67398: LD_VAR 0 7
67402: PUSH
67403: LD_INT 0
67405: LESS
67406: IFFALSE 67423
// _y := _y * - 1 ;
67408: LD_ADDR_VAR 0 7
67412: PUSH
67413: LD_VAR 0 7
67417: PUSH
67418: LD_INT 1
67420: NEG
67421: MUL
67422: ST_TO_ADDR
// result := [ _x , _y ] ;
67423: LD_ADDR_VAR 0 5
67427: PUSH
67428: LD_VAR 0 6
67432: PUSH
67433: LD_VAR 0 7
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: ST_TO_ADDR
// end ;
67442: LD_VAR 0 5
67446: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67447: LD_INT 0
67449: PPUSH
67450: PPUSH
67451: PPUSH
67452: PPUSH
// task := GetTaskList ( unit ) ;
67453: LD_ADDR_VAR 0 7
67457: PUSH
67458: LD_VAR 0 1
67462: PPUSH
67463: CALL_OW 437
67467: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67468: LD_VAR 0 7
67472: NOT
67473: PUSH
67474: LD_VAR 0 1
67478: PPUSH
67479: LD_VAR 0 2
67483: PPUSH
67484: CALL_OW 308
67488: NOT
67489: AND
67490: IFFALSE 67494
// exit ;
67492: GO 67612
// if IsInArea ( unit , area ) then
67494: LD_VAR 0 1
67498: PPUSH
67499: LD_VAR 0 2
67503: PPUSH
67504: CALL_OW 308
67508: IFFALSE 67526
// begin ComMoveToArea ( unit , goAway ) ;
67510: LD_VAR 0 1
67514: PPUSH
67515: LD_VAR 0 3
67519: PPUSH
67520: CALL_OW 113
// exit ;
67524: GO 67612
// end ; if task [ 1 ] [ 1 ] <> M then
67526: LD_VAR 0 7
67530: PUSH
67531: LD_INT 1
67533: ARRAY
67534: PUSH
67535: LD_INT 1
67537: ARRAY
67538: PUSH
67539: LD_STRING M
67541: NONEQUAL
67542: IFFALSE 67546
// exit ;
67544: GO 67612
// x := task [ 1 ] [ 2 ] ;
67546: LD_ADDR_VAR 0 5
67550: PUSH
67551: LD_VAR 0 7
67555: PUSH
67556: LD_INT 1
67558: ARRAY
67559: PUSH
67560: LD_INT 2
67562: ARRAY
67563: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67564: LD_ADDR_VAR 0 6
67568: PUSH
67569: LD_VAR 0 7
67573: PUSH
67574: LD_INT 1
67576: ARRAY
67577: PUSH
67578: LD_INT 3
67580: ARRAY
67581: ST_TO_ADDR
// if InArea ( x , y , area ) then
67582: LD_VAR 0 5
67586: PPUSH
67587: LD_VAR 0 6
67591: PPUSH
67592: LD_VAR 0 2
67596: PPUSH
67597: CALL_OW 309
67601: IFFALSE 67612
// ComStop ( unit ) ;
67603: LD_VAR 0 1
67607: PPUSH
67608: CALL_OW 141
// end ;
67612: LD_VAR 0 4
67616: RET
// export function Abs ( value ) ; begin
67617: LD_INT 0
67619: PPUSH
// result := value ;
67620: LD_ADDR_VAR 0 2
67624: PUSH
67625: LD_VAR 0 1
67629: ST_TO_ADDR
// if value < 0 then
67630: LD_VAR 0 1
67634: PUSH
67635: LD_INT 0
67637: LESS
67638: IFFALSE 67655
// result := value * - 1 ;
67640: LD_ADDR_VAR 0 2
67644: PUSH
67645: LD_VAR 0 1
67649: PUSH
67650: LD_INT 1
67652: NEG
67653: MUL
67654: ST_TO_ADDR
// end ;
67655: LD_VAR 0 2
67659: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67660: LD_INT 0
67662: PPUSH
67663: PPUSH
67664: PPUSH
67665: PPUSH
67666: PPUSH
67667: PPUSH
67668: PPUSH
67669: PPUSH
// if not unit or not building then
67670: LD_VAR 0 1
67674: NOT
67675: PUSH
67676: LD_VAR 0 2
67680: NOT
67681: OR
67682: IFFALSE 67686
// exit ;
67684: GO 67912
// x := GetX ( building ) ;
67686: LD_ADDR_VAR 0 4
67690: PUSH
67691: LD_VAR 0 2
67695: PPUSH
67696: CALL_OW 250
67700: ST_TO_ADDR
// y := GetY ( building ) ;
67701: LD_ADDR_VAR 0 6
67705: PUSH
67706: LD_VAR 0 2
67710: PPUSH
67711: CALL_OW 251
67715: ST_TO_ADDR
// d := GetDir ( building ) ;
67716: LD_ADDR_VAR 0 8
67720: PUSH
67721: LD_VAR 0 2
67725: PPUSH
67726: CALL_OW 254
67730: ST_TO_ADDR
// r := 4 ;
67731: LD_ADDR_VAR 0 9
67735: PUSH
67736: LD_INT 4
67738: ST_TO_ADDR
// for i := 1 to 5 do
67739: LD_ADDR_VAR 0 10
67743: PUSH
67744: DOUBLE
67745: LD_INT 1
67747: DEC
67748: ST_TO_ADDR
67749: LD_INT 5
67751: PUSH
67752: FOR_TO
67753: IFFALSE 67910
// begin _x := ShiftX ( x , d , r + i ) ;
67755: LD_ADDR_VAR 0 5
67759: PUSH
67760: LD_VAR 0 4
67764: PPUSH
67765: LD_VAR 0 8
67769: PPUSH
67770: LD_VAR 0 9
67774: PUSH
67775: LD_VAR 0 10
67779: PLUS
67780: PPUSH
67781: CALL_OW 272
67785: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67786: LD_ADDR_VAR 0 7
67790: PUSH
67791: LD_VAR 0 6
67795: PPUSH
67796: LD_VAR 0 8
67800: PPUSH
67801: LD_VAR 0 9
67805: PUSH
67806: LD_VAR 0 10
67810: PLUS
67811: PPUSH
67812: CALL_OW 273
67816: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67817: LD_VAR 0 5
67821: PPUSH
67822: LD_VAR 0 7
67826: PPUSH
67827: CALL_OW 488
67831: PUSH
67832: LD_VAR 0 5
67836: PPUSH
67837: LD_VAR 0 7
67841: PPUSH
67842: CALL_OW 428
67846: PPUSH
67847: CALL_OW 247
67851: PUSH
67852: LD_INT 3
67854: PUSH
67855: LD_INT 2
67857: PUSH
67858: EMPTY
67859: LIST
67860: LIST
67861: IN
67862: NOT
67863: AND
67864: IFFALSE 67908
// begin ComMoveXY ( unit , _x , _y ) ;
67866: LD_VAR 0 1
67870: PPUSH
67871: LD_VAR 0 5
67875: PPUSH
67876: LD_VAR 0 7
67880: PPUSH
67881: CALL_OW 111
// result := [ _x , _y ] ;
67885: LD_ADDR_VAR 0 3
67889: PUSH
67890: LD_VAR 0 5
67894: PUSH
67895: LD_VAR 0 7
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: ST_TO_ADDR
// exit ;
67904: POP
67905: POP
67906: GO 67912
// end ; end ;
67908: GO 67752
67910: POP
67911: POP
// end ;
67912: LD_VAR 0 3
67916: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67917: LD_INT 0
67919: PPUSH
67920: PPUSH
67921: PPUSH
// result := 0 ;
67922: LD_ADDR_VAR 0 3
67926: PUSH
67927: LD_INT 0
67929: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67930: LD_VAR 0 1
67934: PUSH
67935: LD_INT 0
67937: LESS
67938: PUSH
67939: LD_VAR 0 1
67943: PUSH
67944: LD_INT 8
67946: GREATER
67947: OR
67948: PUSH
67949: LD_VAR 0 2
67953: PUSH
67954: LD_INT 0
67956: LESS
67957: OR
67958: PUSH
67959: LD_VAR 0 2
67963: PUSH
67964: LD_INT 8
67966: GREATER
67967: OR
67968: IFFALSE 67972
// exit ;
67970: GO 68047
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67972: LD_ADDR_VAR 0 4
67976: PUSH
67977: LD_INT 22
67979: PUSH
67980: LD_VAR 0 2
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: PPUSH
67989: CALL_OW 69
67993: PUSH
67994: FOR_IN
67995: IFFALSE 68045
// begin un := UnitShoot ( i ) ;
67997: LD_ADDR_VAR 0 5
68001: PUSH
68002: LD_VAR 0 4
68006: PPUSH
68007: CALL_OW 504
68011: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68012: LD_VAR 0 5
68016: PPUSH
68017: CALL_OW 255
68021: PUSH
68022: LD_VAR 0 1
68026: EQUAL
68027: IFFALSE 68043
// begin result := un ;
68029: LD_ADDR_VAR 0 3
68033: PUSH
68034: LD_VAR 0 5
68038: ST_TO_ADDR
// exit ;
68039: POP
68040: POP
68041: GO 68047
// end ; end ;
68043: GO 67994
68045: POP
68046: POP
// end ;
68047: LD_VAR 0 3
68051: RET
// export function GetCargoBay ( units ) ; begin
68052: LD_INT 0
68054: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68055: LD_ADDR_VAR 0 2
68059: PUSH
68060: LD_VAR 0 1
68064: PPUSH
68065: LD_INT 2
68067: PUSH
68068: LD_INT 34
68070: PUSH
68071: LD_INT 12
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: PUSH
68078: LD_INT 34
68080: PUSH
68081: LD_INT 51
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: PUSH
68088: LD_INT 34
68090: PUSH
68091: LD_INT 32
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: LD_INT 34
68100: PUSH
68101: LD_INT 89
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: LIST
68112: LIST
68113: LIST
68114: PPUSH
68115: CALL_OW 72
68119: ST_TO_ADDR
// end ;
68120: LD_VAR 0 2
68124: RET
// export function Negate ( value ) ; begin
68125: LD_INT 0
68127: PPUSH
// result := not value ;
68128: LD_ADDR_VAR 0 2
68132: PUSH
68133: LD_VAR 0 1
68137: NOT
68138: ST_TO_ADDR
// end ;
68139: LD_VAR 0 2
68143: RET
// export function Inc ( value ) ; begin
68144: LD_INT 0
68146: PPUSH
// result := value + 1 ;
68147: LD_ADDR_VAR 0 2
68151: PUSH
68152: LD_VAR 0 1
68156: PUSH
68157: LD_INT 1
68159: PLUS
68160: ST_TO_ADDR
// end ;
68161: LD_VAR 0 2
68165: RET
// export function Dec ( value ) ; begin
68166: LD_INT 0
68168: PPUSH
// result := value - 1 ;
68169: LD_ADDR_VAR 0 2
68173: PUSH
68174: LD_VAR 0 1
68178: PUSH
68179: LD_INT 1
68181: MINUS
68182: ST_TO_ADDR
// end ;
68183: LD_VAR 0 2
68187: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68188: LD_INT 0
68190: PPUSH
68191: PPUSH
68192: PPUSH
68193: PPUSH
68194: PPUSH
68195: PPUSH
68196: PPUSH
68197: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68198: LD_VAR 0 1
68202: PPUSH
68203: LD_VAR 0 2
68207: PPUSH
68208: CALL_OW 488
68212: NOT
68213: PUSH
68214: LD_VAR 0 3
68218: PPUSH
68219: LD_VAR 0 4
68223: PPUSH
68224: CALL_OW 488
68228: NOT
68229: OR
68230: IFFALSE 68243
// begin result := - 1 ;
68232: LD_ADDR_VAR 0 5
68236: PUSH
68237: LD_INT 1
68239: NEG
68240: ST_TO_ADDR
// exit ;
68241: GO 68478
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68243: LD_ADDR_VAR 0 12
68247: PUSH
68248: LD_VAR 0 1
68252: PPUSH
68253: LD_VAR 0 2
68257: PPUSH
68258: LD_VAR 0 3
68262: PPUSH
68263: LD_VAR 0 4
68267: PPUSH
68268: CALL 67328 0 4
68272: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68273: LD_ADDR_VAR 0 11
68277: PUSH
68278: LD_VAR 0 1
68282: PPUSH
68283: LD_VAR 0 2
68287: PPUSH
68288: LD_VAR 0 12
68292: PUSH
68293: LD_INT 1
68295: ARRAY
68296: PPUSH
68297: LD_VAR 0 12
68301: PUSH
68302: LD_INT 2
68304: ARRAY
68305: PPUSH
68306: CALL_OW 298
68310: ST_TO_ADDR
// distance := 9999 ;
68311: LD_ADDR_VAR 0 10
68315: PUSH
68316: LD_INT 9999
68318: ST_TO_ADDR
// for i := 0 to 5 do
68319: LD_ADDR_VAR 0 6
68323: PUSH
68324: DOUBLE
68325: LD_INT 0
68327: DEC
68328: ST_TO_ADDR
68329: LD_INT 5
68331: PUSH
68332: FOR_TO
68333: IFFALSE 68476
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68335: LD_ADDR_VAR 0 7
68339: PUSH
68340: LD_VAR 0 1
68344: PPUSH
68345: LD_VAR 0 6
68349: PPUSH
68350: LD_VAR 0 11
68354: PPUSH
68355: CALL_OW 272
68359: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68360: LD_ADDR_VAR 0 8
68364: PUSH
68365: LD_VAR 0 2
68369: PPUSH
68370: LD_VAR 0 6
68374: PPUSH
68375: LD_VAR 0 11
68379: PPUSH
68380: CALL_OW 273
68384: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68385: LD_VAR 0 7
68389: PPUSH
68390: LD_VAR 0 8
68394: PPUSH
68395: CALL_OW 488
68399: NOT
68400: IFFALSE 68404
// continue ;
68402: GO 68332
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68404: LD_ADDR_VAR 0 9
68408: PUSH
68409: LD_VAR 0 12
68413: PUSH
68414: LD_INT 1
68416: ARRAY
68417: PPUSH
68418: LD_VAR 0 12
68422: PUSH
68423: LD_INT 2
68425: ARRAY
68426: PPUSH
68427: LD_VAR 0 7
68431: PPUSH
68432: LD_VAR 0 8
68436: PPUSH
68437: CALL_OW 298
68441: ST_TO_ADDR
// if tmp < distance then
68442: LD_VAR 0 9
68446: PUSH
68447: LD_VAR 0 10
68451: LESS
68452: IFFALSE 68474
// begin result := i ;
68454: LD_ADDR_VAR 0 5
68458: PUSH
68459: LD_VAR 0 6
68463: ST_TO_ADDR
// distance := tmp ;
68464: LD_ADDR_VAR 0 10
68468: PUSH
68469: LD_VAR 0 9
68473: ST_TO_ADDR
// end ; end ;
68474: GO 68332
68476: POP
68477: POP
// end ;
68478: LD_VAR 0 5
68482: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68483: LD_INT 0
68485: PPUSH
68486: PPUSH
// if not driver or not IsInUnit ( driver ) then
68487: LD_VAR 0 1
68491: NOT
68492: PUSH
68493: LD_VAR 0 1
68497: PPUSH
68498: CALL_OW 310
68502: NOT
68503: OR
68504: IFFALSE 68508
// exit ;
68506: GO 68598
// vehicle := IsInUnit ( driver ) ;
68508: LD_ADDR_VAR 0 3
68512: PUSH
68513: LD_VAR 0 1
68517: PPUSH
68518: CALL_OW 310
68522: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68523: LD_VAR 0 1
68527: PPUSH
68528: LD_STRING \
68530: PUSH
68531: LD_INT 0
68533: PUSH
68534: LD_INT 0
68536: PUSH
68537: LD_INT 0
68539: PUSH
68540: LD_INT 0
68542: PUSH
68543: LD_INT 0
68545: PUSH
68546: LD_INT 0
68548: PUSH
68549: EMPTY
68550: LIST
68551: LIST
68552: LIST
68553: LIST
68554: LIST
68555: LIST
68556: LIST
68557: PUSH
68558: LD_STRING E
68560: PUSH
68561: LD_INT 0
68563: PUSH
68564: LD_INT 0
68566: PUSH
68567: LD_VAR 0 3
68571: PUSH
68572: LD_INT 0
68574: PUSH
68575: LD_INT 0
68577: PUSH
68578: LD_INT 0
68580: PUSH
68581: EMPTY
68582: LIST
68583: LIST
68584: LIST
68585: LIST
68586: LIST
68587: LIST
68588: LIST
68589: PUSH
68590: EMPTY
68591: LIST
68592: LIST
68593: PPUSH
68594: CALL_OW 446
// end ;
68598: LD_VAR 0 2
68602: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68603: LD_INT 0
68605: PPUSH
68606: PPUSH
// if not driver or not IsInUnit ( driver ) then
68607: LD_VAR 0 1
68611: NOT
68612: PUSH
68613: LD_VAR 0 1
68617: PPUSH
68618: CALL_OW 310
68622: NOT
68623: OR
68624: IFFALSE 68628
// exit ;
68626: GO 68718
// vehicle := IsInUnit ( driver ) ;
68628: LD_ADDR_VAR 0 3
68632: PUSH
68633: LD_VAR 0 1
68637: PPUSH
68638: CALL_OW 310
68642: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68643: LD_VAR 0 1
68647: PPUSH
68648: LD_STRING \
68650: PUSH
68651: LD_INT 0
68653: PUSH
68654: LD_INT 0
68656: PUSH
68657: LD_INT 0
68659: PUSH
68660: LD_INT 0
68662: PUSH
68663: LD_INT 0
68665: PUSH
68666: LD_INT 0
68668: PUSH
68669: EMPTY
68670: LIST
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: PUSH
68678: LD_STRING E
68680: PUSH
68681: LD_INT 0
68683: PUSH
68684: LD_INT 0
68686: PUSH
68687: LD_VAR 0 3
68691: PUSH
68692: LD_INT 0
68694: PUSH
68695: LD_INT 0
68697: PUSH
68698: LD_INT 0
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: LIST
68705: LIST
68706: LIST
68707: LIST
68708: LIST
68709: PUSH
68710: EMPTY
68711: LIST
68712: LIST
68713: PPUSH
68714: CALL_OW 447
// end ;
68718: LD_VAR 0 2
68722: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68723: LD_INT 0
68725: PPUSH
68726: PPUSH
68727: PPUSH
// tmp := [ ] ;
68728: LD_ADDR_VAR 0 5
68732: PUSH
68733: EMPTY
68734: ST_TO_ADDR
// for i in units do
68735: LD_ADDR_VAR 0 4
68739: PUSH
68740: LD_VAR 0 1
68744: PUSH
68745: FOR_IN
68746: IFFALSE 68784
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68748: LD_ADDR_VAR 0 5
68752: PUSH
68753: LD_VAR 0 5
68757: PPUSH
68758: LD_VAR 0 5
68762: PUSH
68763: LD_INT 1
68765: PLUS
68766: PPUSH
68767: LD_VAR 0 4
68771: PPUSH
68772: CALL_OW 256
68776: PPUSH
68777: CALL_OW 2
68781: ST_TO_ADDR
68782: GO 68745
68784: POP
68785: POP
// if not tmp then
68786: LD_VAR 0 5
68790: NOT
68791: IFFALSE 68795
// exit ;
68793: GO 68843
// if asc then
68795: LD_VAR 0 2
68799: IFFALSE 68823
// result := SortListByListAsc ( units , tmp ) else
68801: LD_ADDR_VAR 0 3
68805: PUSH
68806: LD_VAR 0 1
68810: PPUSH
68811: LD_VAR 0 5
68815: PPUSH
68816: CALL_OW 76
68820: ST_TO_ADDR
68821: GO 68843
// result := SortListByListDesc ( units , tmp ) ;
68823: LD_ADDR_VAR 0 3
68827: PUSH
68828: LD_VAR 0 1
68832: PPUSH
68833: LD_VAR 0 5
68837: PPUSH
68838: CALL_OW 77
68842: ST_TO_ADDR
// end ;
68843: LD_VAR 0 3
68847: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68848: LD_INT 0
68850: PPUSH
68851: PPUSH
// task := GetTaskList ( mech ) ;
68852: LD_ADDR_VAR 0 4
68856: PUSH
68857: LD_VAR 0 1
68861: PPUSH
68862: CALL_OW 437
68866: ST_TO_ADDR
// if not task then
68867: LD_VAR 0 4
68871: NOT
68872: IFFALSE 68876
// exit ;
68874: GO 68918
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68876: LD_ADDR_VAR 0 3
68880: PUSH
68881: LD_VAR 0 4
68885: PUSH
68886: LD_INT 1
68888: ARRAY
68889: PUSH
68890: LD_INT 1
68892: ARRAY
68893: PUSH
68894: LD_STRING r
68896: EQUAL
68897: PUSH
68898: LD_VAR 0 4
68902: PUSH
68903: LD_INT 1
68905: ARRAY
68906: PUSH
68907: LD_INT 4
68909: ARRAY
68910: PUSH
68911: LD_VAR 0 2
68915: EQUAL
68916: AND
68917: ST_TO_ADDR
// end ;
68918: LD_VAR 0 3
68922: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68923: LD_INT 0
68925: PPUSH
// SetDir ( unit , d ) ;
68926: LD_VAR 0 1
68930: PPUSH
68931: LD_VAR 0 4
68935: PPUSH
68936: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68940: LD_VAR 0 1
68944: PPUSH
68945: LD_VAR 0 2
68949: PPUSH
68950: LD_VAR 0 3
68954: PPUSH
68955: LD_VAR 0 5
68959: PPUSH
68960: CALL_OW 48
// end ;
68964: LD_VAR 0 6
68968: RET
// export function ToNaturalNumber ( number ) ; begin
68969: LD_INT 0
68971: PPUSH
// result := number div 1 ;
68972: LD_ADDR_VAR 0 2
68976: PUSH
68977: LD_VAR 0 1
68981: PUSH
68982: LD_INT 1
68984: DIV
68985: ST_TO_ADDR
// if number < 0 then
68986: LD_VAR 0 1
68990: PUSH
68991: LD_INT 0
68993: LESS
68994: IFFALSE 69004
// result := 0 ;
68996: LD_ADDR_VAR 0 2
69000: PUSH
69001: LD_INT 0
69003: ST_TO_ADDR
// end ;
69004: LD_VAR 0 2
69008: RET
// export function SortByClass ( units , class ) ; var un ; begin
69009: LD_INT 0
69011: PPUSH
69012: PPUSH
// if not units or not class then
69013: LD_VAR 0 1
69017: NOT
69018: PUSH
69019: LD_VAR 0 2
69023: NOT
69024: OR
69025: IFFALSE 69029
// exit ;
69027: GO 69124
// result := [ ] ;
69029: LD_ADDR_VAR 0 3
69033: PUSH
69034: EMPTY
69035: ST_TO_ADDR
// for un in units do
69036: LD_ADDR_VAR 0 4
69040: PUSH
69041: LD_VAR 0 1
69045: PUSH
69046: FOR_IN
69047: IFFALSE 69122
// if GetClass ( un ) = class then
69049: LD_VAR 0 4
69053: PPUSH
69054: CALL_OW 257
69058: PUSH
69059: LD_VAR 0 2
69063: EQUAL
69064: IFFALSE 69091
// result := Insert ( result , 1 , un ) else
69066: LD_ADDR_VAR 0 3
69070: PUSH
69071: LD_VAR 0 3
69075: PPUSH
69076: LD_INT 1
69078: PPUSH
69079: LD_VAR 0 4
69083: PPUSH
69084: CALL_OW 2
69088: ST_TO_ADDR
69089: GO 69120
// result := Replace ( result , result + 1 , un ) ;
69091: LD_ADDR_VAR 0 3
69095: PUSH
69096: LD_VAR 0 3
69100: PPUSH
69101: LD_VAR 0 3
69105: PUSH
69106: LD_INT 1
69108: PLUS
69109: PPUSH
69110: LD_VAR 0 4
69114: PPUSH
69115: CALL_OW 1
69119: ST_TO_ADDR
69120: GO 69046
69122: POP
69123: POP
// end ;
69124: LD_VAR 0 3
69128: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69129: LD_INT 0
69131: PPUSH
69132: PPUSH
69133: PPUSH
69134: PPUSH
69135: PPUSH
69136: PPUSH
69137: PPUSH
// result := [ ] ;
69138: LD_ADDR_VAR 0 4
69142: PUSH
69143: EMPTY
69144: ST_TO_ADDR
// if x - r < 0 then
69145: LD_VAR 0 1
69149: PUSH
69150: LD_VAR 0 3
69154: MINUS
69155: PUSH
69156: LD_INT 0
69158: LESS
69159: IFFALSE 69171
// min_x := 0 else
69161: LD_ADDR_VAR 0 8
69165: PUSH
69166: LD_INT 0
69168: ST_TO_ADDR
69169: GO 69187
// min_x := x - r ;
69171: LD_ADDR_VAR 0 8
69175: PUSH
69176: LD_VAR 0 1
69180: PUSH
69181: LD_VAR 0 3
69185: MINUS
69186: ST_TO_ADDR
// if y - r < 0 then
69187: LD_VAR 0 2
69191: PUSH
69192: LD_VAR 0 3
69196: MINUS
69197: PUSH
69198: LD_INT 0
69200: LESS
69201: IFFALSE 69213
// min_y := 0 else
69203: LD_ADDR_VAR 0 7
69207: PUSH
69208: LD_INT 0
69210: ST_TO_ADDR
69211: GO 69229
// min_y := y - r ;
69213: LD_ADDR_VAR 0 7
69217: PUSH
69218: LD_VAR 0 2
69222: PUSH
69223: LD_VAR 0 3
69227: MINUS
69228: ST_TO_ADDR
// max_x := x + r ;
69229: LD_ADDR_VAR 0 9
69233: PUSH
69234: LD_VAR 0 1
69238: PUSH
69239: LD_VAR 0 3
69243: PLUS
69244: ST_TO_ADDR
// max_y := y + r ;
69245: LD_ADDR_VAR 0 10
69249: PUSH
69250: LD_VAR 0 2
69254: PUSH
69255: LD_VAR 0 3
69259: PLUS
69260: ST_TO_ADDR
// for _x = min_x to max_x do
69261: LD_ADDR_VAR 0 5
69265: PUSH
69266: DOUBLE
69267: LD_VAR 0 8
69271: DEC
69272: ST_TO_ADDR
69273: LD_VAR 0 9
69277: PUSH
69278: FOR_TO
69279: IFFALSE 69380
// for _y = min_y to max_y do
69281: LD_ADDR_VAR 0 6
69285: PUSH
69286: DOUBLE
69287: LD_VAR 0 7
69291: DEC
69292: ST_TO_ADDR
69293: LD_VAR 0 10
69297: PUSH
69298: FOR_TO
69299: IFFALSE 69376
// begin if not ValidHex ( _x , _y ) then
69301: LD_VAR 0 5
69305: PPUSH
69306: LD_VAR 0 6
69310: PPUSH
69311: CALL_OW 488
69315: NOT
69316: IFFALSE 69320
// continue ;
69318: GO 69298
// if GetResourceTypeXY ( _x , _y ) then
69320: LD_VAR 0 5
69324: PPUSH
69325: LD_VAR 0 6
69329: PPUSH
69330: CALL_OW 283
69334: IFFALSE 69374
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69336: LD_ADDR_VAR 0 4
69340: PUSH
69341: LD_VAR 0 4
69345: PPUSH
69346: LD_VAR 0 4
69350: PUSH
69351: LD_INT 1
69353: PLUS
69354: PPUSH
69355: LD_VAR 0 5
69359: PUSH
69360: LD_VAR 0 6
69364: PUSH
69365: EMPTY
69366: LIST
69367: LIST
69368: PPUSH
69369: CALL_OW 1
69373: ST_TO_ADDR
// end ;
69374: GO 69298
69376: POP
69377: POP
69378: GO 69278
69380: POP
69381: POP
// end ;
69382: LD_VAR 0 4
69386: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69387: LD_INT 0
69389: PPUSH
69390: PPUSH
69391: PPUSH
69392: PPUSH
69393: PPUSH
69394: PPUSH
69395: PPUSH
69396: PPUSH
// if not units then
69397: LD_VAR 0 1
69401: NOT
69402: IFFALSE 69406
// exit ;
69404: GO 69930
// result := UnitFilter ( units , [ f_ok ] ) ;
69406: LD_ADDR_VAR 0 3
69410: PUSH
69411: LD_VAR 0 1
69415: PPUSH
69416: LD_INT 50
69418: PUSH
69419: EMPTY
69420: LIST
69421: PPUSH
69422: CALL_OW 72
69426: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69427: LD_ADDR_VAR 0 8
69431: PUSH
69432: LD_VAR 0 1
69436: PUSH
69437: LD_INT 1
69439: ARRAY
69440: PPUSH
69441: CALL_OW 255
69445: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69446: LD_ADDR_VAR 0 10
69450: PUSH
69451: LD_INT 29
69453: PUSH
69454: LD_INT 91
69456: PUSH
69457: LD_INT 49
69459: PUSH
69460: EMPTY
69461: LIST
69462: LIST
69463: LIST
69464: ST_TO_ADDR
// if not result then
69465: LD_VAR 0 3
69469: NOT
69470: IFFALSE 69474
// exit ;
69472: GO 69930
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69474: LD_ADDR_VAR 0 5
69478: PUSH
69479: LD_INT 81
69481: PUSH
69482: LD_VAR 0 8
69486: PUSH
69487: EMPTY
69488: LIST
69489: LIST
69490: PPUSH
69491: CALL_OW 69
69495: ST_TO_ADDR
// for i in result do
69496: LD_ADDR_VAR 0 4
69500: PUSH
69501: LD_VAR 0 3
69505: PUSH
69506: FOR_IN
69507: IFFALSE 69928
// begin tag := GetTag ( i ) + 1 ;
69509: LD_ADDR_VAR 0 9
69513: PUSH
69514: LD_VAR 0 4
69518: PPUSH
69519: CALL_OW 110
69523: PUSH
69524: LD_INT 1
69526: PLUS
69527: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69528: LD_ADDR_VAR 0 7
69532: PUSH
69533: LD_VAR 0 4
69537: PPUSH
69538: CALL_OW 250
69542: PPUSH
69543: LD_VAR 0 4
69547: PPUSH
69548: CALL_OW 251
69552: PPUSH
69553: LD_INT 6
69555: PPUSH
69556: CALL 69129 0 3
69560: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69561: LD_VAR 0 4
69565: PPUSH
69566: CALL_OW 247
69570: PUSH
69571: LD_INT 2
69573: EQUAL
69574: PUSH
69575: LD_VAR 0 7
69579: AND
69580: PUSH
69581: LD_VAR 0 4
69585: PPUSH
69586: CALL_OW 264
69590: PUSH
69591: LD_VAR 0 10
69595: IN
69596: NOT
69597: AND
69598: IFFALSE 69637
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69600: LD_VAR 0 4
69604: PPUSH
69605: LD_VAR 0 7
69609: PUSH
69610: LD_INT 1
69612: ARRAY
69613: PUSH
69614: LD_INT 1
69616: ARRAY
69617: PPUSH
69618: LD_VAR 0 7
69622: PUSH
69623: LD_INT 1
69625: ARRAY
69626: PUSH
69627: LD_INT 2
69629: ARRAY
69630: PPUSH
69631: CALL_OW 116
69635: GO 69926
// if path > tag then
69637: LD_VAR 0 2
69641: PUSH
69642: LD_VAR 0 9
69646: GREATER
69647: IFFALSE 69855
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
69649: LD_ADDR_VAR 0 6
69653: PUSH
69654: LD_VAR 0 5
69658: PPUSH
69659: LD_INT 91
69661: PUSH
69662: LD_VAR 0 4
69666: PUSH
69667: LD_INT 8
69669: PUSH
69670: EMPTY
69671: LIST
69672: LIST
69673: LIST
69674: PPUSH
69675: CALL_OW 72
69679: ST_TO_ADDR
// if nearEnemy then
69680: LD_VAR 0 6
69684: IFFALSE 69753
// begin if GetWeapon ( i ) = ru_time_lapser then
69686: LD_VAR 0 4
69690: PPUSH
69691: CALL_OW 264
69695: PUSH
69696: LD_INT 49
69698: EQUAL
69699: IFFALSE 69727
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69701: LD_VAR 0 4
69705: PPUSH
69706: LD_VAR 0 6
69710: PPUSH
69711: LD_VAR 0 4
69715: PPUSH
69716: CALL_OW 74
69720: PPUSH
69721: CALL_OW 112
69725: GO 69751
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69727: LD_VAR 0 4
69731: PPUSH
69732: LD_VAR 0 6
69736: PPUSH
69737: LD_VAR 0 4
69741: PPUSH
69742: CALL_OW 74
69746: PPUSH
69747: CALL_OW 115
// end else
69751: GO 69853
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69753: LD_VAR 0 4
69757: PPUSH
69758: LD_VAR 0 2
69762: PUSH
69763: LD_VAR 0 9
69767: ARRAY
69768: PUSH
69769: LD_INT 1
69771: ARRAY
69772: PPUSH
69773: LD_VAR 0 2
69777: PUSH
69778: LD_VAR 0 9
69782: ARRAY
69783: PUSH
69784: LD_INT 2
69786: ARRAY
69787: PPUSH
69788: CALL_OW 297
69792: PUSH
69793: LD_INT 6
69795: GREATER
69796: IFFALSE 69839
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69798: LD_VAR 0 4
69802: PPUSH
69803: LD_VAR 0 2
69807: PUSH
69808: LD_VAR 0 9
69812: ARRAY
69813: PUSH
69814: LD_INT 1
69816: ARRAY
69817: PPUSH
69818: LD_VAR 0 2
69822: PUSH
69823: LD_VAR 0 9
69827: ARRAY
69828: PUSH
69829: LD_INT 2
69831: ARRAY
69832: PPUSH
69833: CALL_OW 114
69837: GO 69853
// SetTag ( i , tag ) ;
69839: LD_VAR 0 4
69843: PPUSH
69844: LD_VAR 0 9
69848: PPUSH
69849: CALL_OW 109
// end else
69853: GO 69926
// if enemy then
69855: LD_VAR 0 5
69859: IFFALSE 69926
// begin if GetWeapon ( i ) = ru_time_lapser then
69861: LD_VAR 0 4
69865: PPUSH
69866: CALL_OW 264
69870: PUSH
69871: LD_INT 49
69873: EQUAL
69874: IFFALSE 69902
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69876: LD_VAR 0 4
69880: PPUSH
69881: LD_VAR 0 5
69885: PPUSH
69886: LD_VAR 0 4
69890: PPUSH
69891: CALL_OW 74
69895: PPUSH
69896: CALL_OW 112
69900: GO 69926
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69902: LD_VAR 0 4
69906: PPUSH
69907: LD_VAR 0 5
69911: PPUSH
69912: LD_VAR 0 4
69916: PPUSH
69917: CALL_OW 74
69921: PPUSH
69922: CALL_OW 115
// end ; end ;
69926: GO 69506
69928: POP
69929: POP
// end ;
69930: LD_VAR 0 3
69934: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69935: LD_INT 0
69937: PPUSH
69938: PPUSH
69939: PPUSH
// if not unit or IsInUnit ( unit ) then
69940: LD_VAR 0 1
69944: NOT
69945: PUSH
69946: LD_VAR 0 1
69950: PPUSH
69951: CALL_OW 310
69955: OR
69956: IFFALSE 69960
// exit ;
69958: GO 70051
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69960: LD_ADDR_VAR 0 4
69964: PUSH
69965: LD_VAR 0 1
69969: PPUSH
69970: CALL_OW 250
69974: PPUSH
69975: LD_VAR 0 2
69979: PPUSH
69980: LD_INT 1
69982: PPUSH
69983: CALL_OW 272
69987: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69988: LD_ADDR_VAR 0 5
69992: PUSH
69993: LD_VAR 0 1
69997: PPUSH
69998: CALL_OW 251
70002: PPUSH
70003: LD_VAR 0 2
70007: PPUSH
70008: LD_INT 1
70010: PPUSH
70011: CALL_OW 273
70015: ST_TO_ADDR
// if ValidHex ( x , y ) then
70016: LD_VAR 0 4
70020: PPUSH
70021: LD_VAR 0 5
70025: PPUSH
70026: CALL_OW 488
70030: IFFALSE 70051
// ComTurnXY ( unit , x , y ) ;
70032: LD_VAR 0 1
70036: PPUSH
70037: LD_VAR 0 4
70041: PPUSH
70042: LD_VAR 0 5
70046: PPUSH
70047: CALL_OW 118
// end ;
70051: LD_VAR 0 3
70055: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70056: LD_INT 0
70058: PPUSH
70059: PPUSH
// result := false ;
70060: LD_ADDR_VAR 0 3
70064: PUSH
70065: LD_INT 0
70067: ST_TO_ADDR
// if not units then
70068: LD_VAR 0 2
70072: NOT
70073: IFFALSE 70077
// exit ;
70075: GO 70122
// for i in units do
70077: LD_ADDR_VAR 0 4
70081: PUSH
70082: LD_VAR 0 2
70086: PUSH
70087: FOR_IN
70088: IFFALSE 70120
// if See ( side , i ) then
70090: LD_VAR 0 1
70094: PPUSH
70095: LD_VAR 0 4
70099: PPUSH
70100: CALL_OW 292
70104: IFFALSE 70118
// begin result := true ;
70106: LD_ADDR_VAR 0 3
70110: PUSH
70111: LD_INT 1
70113: ST_TO_ADDR
// exit ;
70114: POP
70115: POP
70116: GO 70122
// end ;
70118: GO 70087
70120: POP
70121: POP
// end ;
70122: LD_VAR 0 3
70126: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70127: LD_INT 0
70129: PPUSH
70130: PPUSH
70131: PPUSH
70132: PPUSH
// if not unit or not points then
70133: LD_VAR 0 1
70137: NOT
70138: PUSH
70139: LD_VAR 0 2
70143: NOT
70144: OR
70145: IFFALSE 70149
// exit ;
70147: GO 70239
// dist := 99999 ;
70149: LD_ADDR_VAR 0 5
70153: PUSH
70154: LD_INT 99999
70156: ST_TO_ADDR
// for i in points do
70157: LD_ADDR_VAR 0 4
70161: PUSH
70162: LD_VAR 0 2
70166: PUSH
70167: FOR_IN
70168: IFFALSE 70237
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70170: LD_ADDR_VAR 0 6
70174: PUSH
70175: LD_VAR 0 1
70179: PPUSH
70180: LD_VAR 0 4
70184: PUSH
70185: LD_INT 1
70187: ARRAY
70188: PPUSH
70189: LD_VAR 0 4
70193: PUSH
70194: LD_INT 2
70196: ARRAY
70197: PPUSH
70198: CALL_OW 297
70202: ST_TO_ADDR
// if tmpDist < dist then
70203: LD_VAR 0 6
70207: PUSH
70208: LD_VAR 0 5
70212: LESS
70213: IFFALSE 70235
// begin result := i ;
70215: LD_ADDR_VAR 0 3
70219: PUSH
70220: LD_VAR 0 4
70224: ST_TO_ADDR
// dist := tmpDist ;
70225: LD_ADDR_VAR 0 5
70229: PUSH
70230: LD_VAR 0 6
70234: ST_TO_ADDR
// end ; end ;
70235: GO 70167
70237: POP
70238: POP
// end ;
70239: LD_VAR 0 3
70243: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70244: LD_INT 0
70246: PPUSH
// uc_side := side ;
70247: LD_ADDR_OWVAR 20
70251: PUSH
70252: LD_VAR 0 1
70256: ST_TO_ADDR
// uc_nation := 3 ;
70257: LD_ADDR_OWVAR 21
70261: PUSH
70262: LD_INT 3
70264: ST_TO_ADDR
// vc_chassis := 25 ;
70265: LD_ADDR_OWVAR 37
70269: PUSH
70270: LD_INT 25
70272: ST_TO_ADDR
// vc_engine := engine_siberite ;
70273: LD_ADDR_OWVAR 39
70277: PUSH
70278: LD_INT 3
70280: ST_TO_ADDR
// vc_control := control_computer ;
70281: LD_ADDR_OWVAR 38
70285: PUSH
70286: LD_INT 3
70288: ST_TO_ADDR
// vc_weapon := 59 ;
70289: LD_ADDR_OWVAR 40
70293: PUSH
70294: LD_INT 59
70296: ST_TO_ADDR
// result := CreateVehicle ;
70297: LD_ADDR_VAR 0 5
70301: PUSH
70302: CALL_OW 45
70306: ST_TO_ADDR
// SetDir ( result , d ) ;
70307: LD_VAR 0 5
70311: PPUSH
70312: LD_VAR 0 4
70316: PPUSH
70317: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70321: LD_VAR 0 5
70325: PPUSH
70326: LD_VAR 0 2
70330: PPUSH
70331: LD_VAR 0 3
70335: PPUSH
70336: LD_INT 0
70338: PPUSH
70339: CALL_OW 48
// end ;
70343: LD_VAR 0 5
70347: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70348: LD_INT 0
70350: PPUSH
70351: PPUSH
70352: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70353: LD_ADDR_VAR 0 2
70357: PUSH
70358: LD_INT 0
70360: PUSH
70361: LD_INT 0
70363: PUSH
70364: LD_INT 0
70366: PUSH
70367: LD_INT 0
70369: PUSH
70370: EMPTY
70371: LIST
70372: LIST
70373: LIST
70374: LIST
70375: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70376: LD_VAR 0 1
70380: NOT
70381: PUSH
70382: LD_VAR 0 1
70386: PPUSH
70387: CALL_OW 264
70391: PUSH
70392: LD_INT 12
70394: PUSH
70395: LD_INT 51
70397: PUSH
70398: LD_INT 32
70400: PUSH
70401: LD_INT 89
70403: PUSH
70404: EMPTY
70405: LIST
70406: LIST
70407: LIST
70408: LIST
70409: IN
70410: NOT
70411: OR
70412: IFFALSE 70416
// exit ;
70414: GO 70514
// for i := 1 to 3 do
70416: LD_ADDR_VAR 0 3
70420: PUSH
70421: DOUBLE
70422: LD_INT 1
70424: DEC
70425: ST_TO_ADDR
70426: LD_INT 3
70428: PUSH
70429: FOR_TO
70430: IFFALSE 70512
// begin tmp := GetCargo ( cargo , i ) ;
70432: LD_ADDR_VAR 0 4
70436: PUSH
70437: LD_VAR 0 1
70441: PPUSH
70442: LD_VAR 0 3
70446: PPUSH
70447: CALL_OW 289
70451: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70452: LD_ADDR_VAR 0 2
70456: PUSH
70457: LD_VAR 0 2
70461: PPUSH
70462: LD_VAR 0 3
70466: PPUSH
70467: LD_VAR 0 4
70471: PPUSH
70472: CALL_OW 1
70476: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70477: LD_ADDR_VAR 0 2
70481: PUSH
70482: LD_VAR 0 2
70486: PPUSH
70487: LD_INT 4
70489: PPUSH
70490: LD_VAR 0 2
70494: PUSH
70495: LD_INT 4
70497: ARRAY
70498: PUSH
70499: LD_VAR 0 4
70503: PLUS
70504: PPUSH
70505: CALL_OW 1
70509: ST_TO_ADDR
// end ;
70510: GO 70429
70512: POP
70513: POP
// end ;
70514: LD_VAR 0 2
70518: RET
// export function Length ( array ) ; begin
70519: LD_INT 0
70521: PPUSH
// result := array + 0 ;
70522: LD_ADDR_VAR 0 2
70526: PUSH
70527: LD_VAR 0 1
70531: PUSH
70532: LD_INT 0
70534: PLUS
70535: ST_TO_ADDR
// end ;
70536: LD_VAR 0 2
70540: RET
// export function PrepareArray ( array ) ; begin
70541: LD_INT 0
70543: PPUSH
// result := array diff 0 ;
70544: LD_ADDR_VAR 0 2
70548: PUSH
70549: LD_VAR 0 1
70553: PUSH
70554: LD_INT 0
70556: DIFF
70557: ST_TO_ADDR
// if not result [ 1 ] then
70558: LD_VAR 0 2
70562: PUSH
70563: LD_INT 1
70565: ARRAY
70566: NOT
70567: IFFALSE 70587
// result := Delete ( result , 1 ) ;
70569: LD_ADDR_VAR 0 2
70573: PUSH
70574: LD_VAR 0 2
70578: PPUSH
70579: LD_INT 1
70581: PPUSH
70582: CALL_OW 3
70586: ST_TO_ADDR
// end ; end_of_file
70587: LD_VAR 0 2
70591: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70592: LD_VAR 0 1
70596: PUSH
70597: LD_INT 200
70599: DOUBLE
70600: GREATEREQUAL
70601: IFFALSE 70609
70603: LD_INT 299
70605: DOUBLE
70606: LESSEQUAL
70607: IFTRUE 70611
70609: GO 70643
70611: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70612: LD_VAR 0 1
70616: PPUSH
70617: LD_VAR 0 2
70621: PPUSH
70622: LD_VAR 0 3
70626: PPUSH
70627: LD_VAR 0 4
70631: PPUSH
70632: LD_VAR 0 5
70636: PPUSH
70637: CALL 25494 0 5
70641: GO 70720
70643: LD_INT 300
70645: DOUBLE
70646: GREATEREQUAL
70647: IFFALSE 70655
70649: LD_INT 399
70651: DOUBLE
70652: LESSEQUAL
70653: IFTRUE 70657
70655: GO 70719
70657: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70658: LD_VAR 0 1
70662: PPUSH
70663: LD_VAR 0 2
70667: PPUSH
70668: LD_VAR 0 3
70672: PPUSH
70673: LD_VAR 0 4
70677: PPUSH
70678: LD_VAR 0 5
70682: PPUSH
70683: LD_VAR 0 6
70687: PPUSH
70688: LD_VAR 0 7
70692: PPUSH
70693: LD_VAR 0 8
70697: PPUSH
70698: LD_VAR 0 9
70702: PPUSH
70703: LD_VAR 0 10
70707: PPUSH
70708: LD_VAR 0 11
70712: PPUSH
70713: CALL 21827 0 11
70717: GO 70720
70719: POP
// end ;
70720: PPOPN 11
70722: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70723: LD_VAR 0 1
70727: PPUSH
70728: LD_VAR 0 2
70732: PPUSH
70733: LD_VAR 0 3
70737: PPUSH
70738: LD_VAR 0 4
70742: PPUSH
70743: LD_VAR 0 5
70747: PPUSH
70748: CALL 25230 0 5
// end ; end_of_file
70752: PPOPN 5
70754: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70755: LD_VAR 0 1
70759: PPUSH
70760: LD_VAR 0 2
70764: PPUSH
70765: LD_VAR 0 3
70769: PPUSH
70770: LD_VAR 0 4
70774: PPUSH
70775: LD_VAR 0 5
70779: PPUSH
70780: LD_VAR 0 6
70784: PPUSH
70785: CALL 9520 0 6
// end ;
70789: PPOPN 6
70791: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
70792: LD_INT 0
70794: PPUSH
// begin if not units then
70795: LD_VAR 0 1
70799: NOT
70800: IFFALSE 70804
// exit ;
70802: GO 70804
// end ;
70804: PPOPN 7
70806: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
70807: CALL 9491 0 0
// end ;
70811: PPOPN 1
70813: END
