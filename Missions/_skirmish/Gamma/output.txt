// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// SetDifficulty ( GetMultiplayerSetting ( 0 ) ) ;
  11: LD_INT 0
  13: PPUSH
  14: CALL_OW 426
  18: PPUSH
  19: CALL 279 0 1
// InGameOn ;
  23: CALL_OW 8
// CenterNowOnXY ( 0 , 0 ) ;
  27: LD_INT 0
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: CALL_OW 86
// RandomizeAll ;
  37: CALL_OW 11
// DestroyTrash ;
  41: CALL 148 0 0
// ShowPath ;
  45: CALL 214 0 0
// RandMusic ( 1 , 3 ) ;
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 3
  54: PPUSH
  55: CALL 222 0 2
// PrepareAnimals ( [ 8 , 7 , 6 ] [ dif ] , 2 , 3 , nature ) ;
  59: LD_INT 8
  61: PUSH
  62: LD_INT 7
  64: PUSH
  65: LD_INT 6
  67: PUSH
  68: EMPTY
  69: LIST
  70: LIST
  71: LIST
  72: PUSH
  73: LD_EXP 1
  77: ARRAY
  78: PPUSH
  79: LD_INT 2
  81: PPUSH
  82: LD_INT 3
  84: PPUSH
  85: LD_INT 10
  87: PPUSH
  88: CALL 329 0 4
// PrepareRussian ;
  92: CALL 1407 0 0
// Action ;
  96: CALL 8631 0 0
// PrepareAmerican ;
 100: CALL 5251 0 0
// end ;
 104: END
// every 2 2$00 + 1 1$0 do var i , bool ;
 105: GO 107
 107: DISABLE
 108: LD_INT 0
 110: PPUSH
 111: PPUSH
// begin bool := Rand ( false , true ) ;
 112: LD_ADDR_VAR 0 2
 116: PUSH
 117: LD_INT 0
 119: PPUSH
 120: LD_INT 1
 122: PPUSH
 123: CALL_OW 12
 127: ST_TO_ADDR
// if bool then
 128: LD_VAR 0 2
 132: IFFALSE 144
// RandMusic ( 1 , 3 ) ;
 134: LD_INT 1
 136: PPUSH
 137: LD_INT 3
 139: PPUSH
 140: CALL 222 0 2
// enable ;
 144: ENABLE
// end ; end_of_file
 145: PPOPN 2
 147: END
// export function DestroyTrash ; var i ; begin
 148: LD_INT 0
 150: PPUSH
 151: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_not , [ f_lives , 5 ] ] ] ) do
 152: LD_ADDR_VAR 0 2
 156: PUSH
 157: LD_INT 22
 159: PUSH
 160: LD_INT 0
 162: PUSH
 163: EMPTY
 164: LIST
 165: LIST
 166: PUSH
 167: LD_INT 3
 169: PUSH
 170: LD_INT 24
 172: PUSH
 173: LD_INT 5
 175: PUSH
 176: EMPTY
 177: LIST
 178: LIST
 179: PUSH
 180: EMPTY
 181: LIST
 182: LIST
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 69
 192: PUSH
 193: FOR_IN
 194: IFFALSE 207
// KillUnit ( i ) ;
 196: LD_VAR 0 2
 200: PPUSH
 201: CALL_OW 66
 205: GO 193
 207: POP
 208: POP
// end ;
 209: LD_VAR 0 1
 213: RET
// export function ShowPath ; begin
 214: LD_INT 0
 216: PPUSH
// end ;
 217: LD_VAR 0 1
 221: RET
// export function RandMusic ( n1 , n2 ) ; var proc ; begin
 222: LD_INT 0
 224: PPUSH
 225: PPUSH
// proc := Rand ( 0 , 100 ) ;
 226: LD_ADDR_VAR 0 4
 230: PUSH
 231: LD_INT 0
 233: PPUSH
 234: LD_INT 100
 236: PPUSH
 237: CALL_OW 12
 241: ST_TO_ADDR
// if proc > 50 then
 242: LD_VAR 0 4
 246: PUSH
 247: LD_INT 50
 249: GREATER
 250: IFFALSE 264
// music_nat := n1 else
 252: LD_ADDR_OWVAR 71
 256: PUSH
 257: LD_VAR 0 1
 261: ST_TO_ADDR
 262: GO 274
// music_nat := n2 ;
 264: LD_ADDR_OWVAR 71
 268: PUSH
 269: LD_VAR 0 2
 273: ST_TO_ADDR
// end ;
 274: LD_VAR 0 3
 278: RET
// export dif ; export function SetDifficulty ( val ) ; begin
 279: LD_INT 0
 281: PPUSH
// if not val then
 282: LD_VAR 0 1
 286: NOT
 287: IFFALSE 297
// val := 2 ;
 289: LD_ADDR_VAR 0 1
 293: PUSH
 294: LD_INT 2
 296: ST_TO_ADDR
// dif := val ;
 297: LD_ADDR_EXP 1
 301: PUSH
 302: LD_VAR 0 1
 306: ST_TO_ADDR
// if dif < 3 then
 307: LD_EXP 1
 311: PUSH
 312: LD_INT 3
 314: LESS
 315: IFFALSE 324
// RemoveEnvironmentArea ( evnt ) ;
 317: LD_INT 9
 319: PPUSH
 320: CALL_OW 355
// end ;
 324: LD_VAR 0 2
 328: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
 333: PPUSH
 334: PPUSH
 335: PPUSH
// uc_nation = nation_nature ;
 336: LD_ADDR_OWVAR 21
 340: PUSH
 341: LD_INT 0
 343: ST_TO_ADDR
// uc_side = 0 ;
 344: LD_ADDR_OWVAR 20
 348: PUSH
 349: LD_INT 0
 351: ST_TO_ADDR
// hc_importance := 0 ;
 352: LD_ADDR_OWVAR 32
 356: PUSH
 357: LD_INT 0
 359: ST_TO_ADDR
// l = 0 ;
 360: LD_ADDR_VAR 0 6
 364: PUSH
 365: LD_INT 0
 367: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
 368: LD_ADDR_OWVAR 24
 372: PUSH
 373: LD_INT 0
 375: PPUSH
 376: LD_INT 5
 378: PPUSH
 379: CALL_OW 12
 383: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
 384: LD_ADDR_OWVAR 35
 388: PUSH
 389: LD_INT 5
 391: NEG
 392: PPUSH
 393: LD_INT 5
 395: PPUSH
 396: CALL_OW 12
 400: ST_TO_ADDR
// hc_gallery =  ;
 401: LD_ADDR_OWVAR 33
 405: PUSH
 406: LD_STRING 
 408: ST_TO_ADDR
// hc_class = class_apeman ;
 409: LD_ADDR_OWVAR 28
 413: PUSH
 414: LD_INT 12
 416: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
 417: LD_ADDR_OWVAR 29
 421: PUSH
 422: LD_INT 11
 424: PPUSH
 425: LD_INT 13
 427: PPUSH
 428: CALL_OW 12
 432: PUSH
 433: LD_INT 10
 435: PPUSH
 436: LD_INT 11
 438: PPUSH
 439: CALL_OW 12
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: ST_TO_ADDR
// hc_sex = sex_male ;
 448: LD_ADDR_OWVAR 27
 452: PUSH
 453: LD_INT 1
 455: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
 456: LD_ADDR_OWVAR 31
 460: PUSH
 461: LD_INT 0
 463: PPUSH
 464: LD_INT 2
 466: PPUSH
 467: CALL_OW 12
 471: PUSH
 472: LD_INT 0
 474: PUSH
 475: LD_INT 0
 477: PUSH
 478: LD_INT 0
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: ST_TO_ADDR
// apeman = CreateHuman ;
 487: LD_ADDR_VAR 0 7
 491: PUSH
 492: CALL_OW 44
 496: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
 497: LD_VAR 0 7
 501: PPUSH
 502: LD_VAR 0 4
 506: PPUSH
 507: LD_INT 0
 509: PPUSH
 510: CALL_OW 49
// l = l + 1 ;
 514: LD_ADDR_VAR 0 6
 518: PUSH
 519: LD_VAR 0 6
 523: PUSH
 524: LD_INT 1
 526: PLUS
 527: ST_TO_ADDR
// end until l = num1 ;
 528: LD_VAR 0 6
 532: PUSH
 533: LD_VAR 0 1
 537: EQUAL
 538: IFFALSE 368
// l = 0 ;
 540: LD_ADDR_VAR 0 6
 544: PUSH
 545: LD_INT 0
 547: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
 548: LD_ADDR_OWVAR 35
 552: PUSH
 553: LD_INT 0
 555: PPUSH
 556: LD_INT 25
 558: PPUSH
 559: CALL_OW 12
 563: ST_TO_ADDR
// hc_class = class_tiger ;
 564: LD_ADDR_OWVAR 28
 568: PUSH
 569: LD_INT 14
 571: ST_TO_ADDR
// hc_sex = sex_male ;
 572: LD_ADDR_OWVAR 27
 576: PUSH
 577: LD_INT 1
 579: ST_TO_ADDR
// hc_gallery = sandnature ;
 580: LD_ADDR_OWVAR 33
 584: PUSH
 585: LD_STRING sandnature
 587: ST_TO_ADDR
// hc_face_number = 3 ;
 588: LD_ADDR_OWVAR 34
 592: PUSH
 593: LD_INT 3
 595: ST_TO_ADDR
// tiger = CreateHuman ;
 596: LD_ADDR_VAR 0 8
 600: PUSH
 601: CALL_OW 44
 605: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
 606: LD_VAR 0 8
 610: PPUSH
 611: LD_VAR 0 4
 615: PPUSH
 616: LD_INT 0
 618: PPUSH
 619: CALL_OW 49
// l = l + 1 ;
 623: LD_ADDR_VAR 0 6
 627: PUSH
 628: LD_VAR 0 6
 632: PUSH
 633: LD_INT 1
 635: PLUS
 636: ST_TO_ADDR
// end until l = num2 ;
 637: LD_VAR 0 6
 641: PUSH
 642: LD_VAR 0 2
 646: EQUAL
 647: IFFALSE 548
// l = 0 ;
 649: LD_ADDR_VAR 0 6
 653: PUSH
 654: LD_INT 0
 656: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
 657: LD_ADDR_OWVAR 28
 661: PUSH
 662: LD_INT 18
 664: ST_TO_ADDR
// hc_gallery = sandnature ;
 665: LD_ADDR_OWVAR 33
 669: PUSH
 670: LD_STRING sandnature
 672: ST_TO_ADDR
// hc_face_number = 1 ;
 673: LD_ADDR_OWVAR 34
 677: PUSH
 678: LD_INT 1
 680: ST_TO_ADDR
// bird = CreateHuman ;
 681: LD_ADDR_VAR 0 9
 685: PUSH
 686: CALL_OW 44
 690: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
 691: LD_VAR 0 9
 695: PPUSH
 696: LD_INT 0
 698: PPUSH
 699: CALL_OW 51
// l = l + 1 ;
 703: LD_ADDR_VAR 0 6
 707: PUSH
 708: LD_VAR 0 6
 712: PUSH
 713: LD_INT 1
 715: PLUS
 716: ST_TO_ADDR
// end until l = num3 ;
 717: LD_VAR 0 6
 721: PUSH
 722: LD_VAR 0 3
 726: EQUAL
 727: IFFALSE 657
// end ;
 729: LD_VAR 0 5
 733: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
 734: LD_INT 0
 736: PPUSH
 737: PPUSH
 738: PPUSH
 739: PPUSH
 740: PPUSH
 741: PPUSH
// InitHc ;
 742: CALL_OW 19
// hc_class := clas ;
 746: LD_ADDR_OWVAR 28
 750: PUSH
 751: LD_VAR 0 1
 755: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
 756: LD_ADDR_VAR 0 4
 760: PUSH
 761: LD_VAR 0 2
 765: PUSH
 766: LD_INT 1
 768: NEG
 769: PPUSH
 770: LD_INT 1
 772: PPUSH
 773: CALL_OW 12
 777: PLUS
 778: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
 779: LD_ADDR_VAR 0 5
 783: PUSH
 784: LD_VAR 0 2
 788: PUSH
 789: LD_INT 1
 791: NEG
 792: PPUSH
 793: LD_INT 1
 795: PPUSH
 796: CALL_OW 12
 800: PLUS
 801: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
 802: LD_ADDR_VAR 0 6
 806: PUSH
 807: LD_VAR 0 2
 811: PUSH
 812: LD_INT 1
 814: NEG
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: CALL_OW 12
 823: PLUS
 824: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
 825: LD_ADDR_VAR 0 7
 829: PUSH
 830: LD_VAR 0 2
 834: PUSH
 835: LD_INT 1
 837: NEG
 838: PPUSH
 839: LD_INT 1
 841: PPUSH
 842: CALL_OW 12
 846: PLUS
 847: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
 848: LD_VAR 0 1
 852: PUSH
 853: LD_INT 1
 855: EQUAL
 856: PUSH
 857: LD_VAR 0 1
 861: PUSH
 862: LD_INT 9
 864: EQUAL
 865: OR
 866: PUSH
 867: LD_VAR 0 1
 871: PUSH
 872: LD_INT 5
 874: EQUAL
 875: OR
 876: PUSH
 877: LD_VAR 0 1
 881: PUSH
 882: LD_INT 8
 884: EQUAL
 885: OR
 886: IFFALSE 911
// bonus := [ 2 , 0 , 0 , 0 ] ;
 888: LD_ADDR_VAR 0 8
 892: PUSH
 893: LD_INT 2
 895: PUSH
 896: LD_INT 0
 898: PUSH
 899: LD_INT 0
 901: PUSH
 902: LD_INT 0
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: ST_TO_ADDR
// if clas = 2 then
 911: LD_VAR 0 1
 915: PUSH
 916: LD_INT 2
 918: EQUAL
 919: IFFALSE 944
// bonus := [ 0 , 2 , 0 , 0 ] ;
 921: LD_ADDR_VAR 0 8
 925: PUSH
 926: LD_INT 0
 928: PUSH
 929: LD_INT 2
 931: PUSH
 932: LD_INT 0
 934: PUSH
 935: LD_INT 0
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: ST_TO_ADDR
// if clas = 3 then
 944: LD_VAR 0 1
 948: PUSH
 949: LD_INT 3
 951: EQUAL
 952: IFFALSE 977
// bonus := [ 0 , 0 , 2 , 0 ] ;
 954: LD_ADDR_VAR 0 8
 958: PUSH
 959: LD_INT 0
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: LD_INT 2
 967: PUSH
 968: LD_INT 0
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: ST_TO_ADDR
// if clas = 4 then
 977: LD_VAR 0 1
 981: PUSH
 982: LD_INT 4
 984: EQUAL
 985: IFFALSE 1010
// bonus := [ 0 , 0 , 0 , 2 ] ;
 987: LD_ADDR_VAR 0 8
 991: PUSH
 992: LD_INT 0
 994: PUSH
 995: LD_INT 0
 997: PUSH
 998: LD_INT 0
1000: PUSH
1001: LD_INT 2
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
1010: LD_VAR 0 1
1014: PUSH
1015: LD_INT 4
1017: GREATER
1018: PUSH
1019: LD_VAR 0 1
1023: PUSH
1024: LD_INT 9
1026: NONEQUAL
1027: AND
1028: PUSH
1029: LD_VAR 0 1
1033: PUSH
1034: LD_INT 5
1036: NONEQUAL
1037: AND
1038: PUSH
1039: LD_VAR 0 1
1043: PUSH
1044: LD_INT 8
1046: NONEQUAL
1047: AND
1048: IFFALSE 1073
// bonus := [ 0 , 0 , 0 , 0 ] ;
1050: LD_ADDR_VAR 0 8
1054: PUSH
1055: LD_INT 0
1057: PUSH
1058: LD_INT 0
1060: PUSH
1061: LD_INT 0
1063: PUSH
1064: LD_INT 0
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
1073: LD_ADDR_OWVAR 30
1077: PUSH
1078: LD_INT 0
1080: PPUSH
1081: LD_INT 2
1083: PPUSH
1084: CALL_OW 12
1088: PUSH
1089: LD_INT 0
1091: PPUSH
1092: LD_INT 2
1094: PPUSH
1095: CALL_OW 12
1099: PUSH
1100: LD_INT 0
1102: PPUSH
1103: LD_INT 2
1105: PPUSH
1106: CALL_OW 12
1110: PUSH
1111: LD_INT 0
1113: PPUSH
1114: LD_INT 2
1116: PPUSH
1117: CALL_OW 12
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: LIST
1127: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
1128: LD_ADDR_OWVAR 31
1132: PUSH
1133: LD_VAR 0 4
1137: PUSH
1138: LD_VAR 0 8
1142: PUSH
1143: LD_INT 1
1145: ARRAY
1146: PLUS
1147: PUSH
1148: LD_VAR 0 5
1152: PUSH
1153: LD_VAR 0 8
1157: PUSH
1158: LD_INT 2
1160: ARRAY
1161: PLUS
1162: PUSH
1163: LD_VAR 0 6
1167: PUSH
1168: LD_VAR 0 8
1172: PUSH
1173: LD_INT 3
1175: ARRAY
1176: PLUS
1177: PUSH
1178: LD_VAR 0 7
1182: PUSH
1183: LD_VAR 0 8
1187: PUSH
1188: LD_INT 4
1190: ARRAY
1191: PLUS
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: ST_TO_ADDR
// if clas = 3 then
1199: LD_VAR 0 1
1203: PUSH
1204: LD_INT 3
1206: EQUAL
1207: IFFALSE 1219
// hc_sex := sex_male else
1209: LD_ADDR_OWVAR 27
1213: PUSH
1214: LD_INT 1
1216: ST_TO_ADDR
1217: GO 1235
// hc_sex := Rand ( sex_male , sex_female ) ;
1219: LD_ADDR_OWVAR 27
1223: PUSH
1224: LD_INT 1
1226: PPUSH
1227: LD_INT 2
1229: PPUSH
1230: CALL_OW 12
1234: ST_TO_ADDR
// hc_gallery :=  ;
1235: LD_ADDR_OWVAR 33
1239: PUSH
1240: LD_STRING 
1242: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 8 , 12 ) ] ;
1243: LD_ADDR_OWVAR 29
1247: PUSH
1248: LD_INT 8
1250: PPUSH
1251: LD_INT 12
1253: PPUSH
1254: CALL_OW 12
1258: PUSH
1259: LD_INT 8
1261: PPUSH
1262: LD_INT 12
1264: PPUSH
1265: CALL_OW 12
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: ST_TO_ADDR
// hc_name :=  ;
1274: LD_ADDR_OWVAR 26
1278: PUSH
1279: LD_STRING 
1281: ST_TO_ADDR
// result := CreateHuman ;
1282: LD_ADDR_VAR 0 3
1286: PUSH
1287: CALL_OW 44
1291: ST_TO_ADDR
// end ;
1292: LD_VAR 0 3
1296: RET
// export function CreateVehicleWithDriver ( chassis , engine , weapon , area , dir , lvl ) ; var veh ; begin
1297: LD_INT 0
1299: PPUSH
1300: PPUSH
// vc_chassis := chassis ;
1301: LD_ADDR_OWVAR 37
1305: PUSH
1306: LD_VAR 0 1
1310: ST_TO_ADDR
// vc_engine := engine ;
1311: LD_ADDR_OWVAR 39
1315: PUSH
1316: LD_VAR 0 2
1320: ST_TO_ADDR
// vc_weapon := weapon ;
1321: LD_ADDR_OWVAR 40
1325: PUSH
1326: LD_VAR 0 3
1330: ST_TO_ADDR
// vc_control := control_manual ;
1331: LD_ADDR_OWVAR 38
1335: PUSH
1336: LD_INT 1
1338: ST_TO_ADDR
// veh := CreateVehicle ;
1339: LD_ADDR_VAR 0 8
1343: PUSH
1344: CALL_OW 45
1348: ST_TO_ADDR
// SetDir ( veh , dir ) ;
1349: LD_VAR 0 8
1353: PPUSH
1354: LD_VAR 0 5
1358: PPUSH
1359: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
1363: LD_VAR 0 8
1367: PPUSH
1368: LD_VAR 0 4
1372: PPUSH
1373: LD_INT 0
1375: PPUSH
1376: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , lvl ) , veh ) ;
1380: LD_INT 3
1382: PPUSH
1383: LD_VAR 0 6
1387: PPUSH
1388: CALL 734 0 2
1392: PPUSH
1393: LD_VAR 0 8
1397: PPUSH
1398: CALL_OW 52
// end ; end_of_file
1402: LD_VAR 0 7
1406: RET
// export Popov , Commander , Platonov , Kapral ; export depot_rdy , dep_x , dep_y ; export function PrepareRussian ; var i , un , skill , team , p ; begin
1407: LD_INT 0
1409: PPUSH
1410: PPUSH
1411: PPUSH
1412: PPUSH
1413: PPUSH
1414: PPUSH
// depot_rdy := false ;
1415: LD_ADDR_EXP 6
1419: PUSH
1420: LD_INT 0
1422: ST_TO_ADDR
// uc_side := 6 ;
1423: LD_ADDR_OWVAR 20
1427: PUSH
1428: LD_INT 6
1430: ST_TO_ADDR
// uc_nation := 3 ;
1431: LD_ADDR_OWVAR 21
1435: PUSH
1436: LD_INT 3
1438: ST_TO_ADDR
// hc_gallery := ru ;
1439: LD_ADDR_OWVAR 33
1443: PUSH
1444: LD_STRING ru
1446: ST_TO_ADDR
// hc_face_number := 10 ;
1447: LD_ADDR_OWVAR 34
1451: PUSH
1452: LD_INT 10
1454: ST_TO_ADDR
// hc_name := Siergiej I. Popov ;
1455: LD_ADDR_OWVAR 26
1459: PUSH
1460: LD_STRING Siergiej I. Popov
1462: ST_TO_ADDR
// hc_class := 1 ;
1463: LD_ADDR_OWVAR 28
1467: PUSH
1468: LD_INT 1
1470: ST_TO_ADDR
// hc_sex := sex_male ;
1471: LD_ADDR_OWVAR 27
1475: PUSH
1476: LD_INT 1
1478: ST_TO_ADDR
// popov := CreateHuman ;
1479: LD_ADDR_EXP 2
1483: PUSH
1484: CALL_OW 44
1488: ST_TO_ADDR
// hc_gallery := general ;
1489: LD_ADDR_OWVAR 33
1493: PUSH
1494: LD_STRING general
1496: ST_TO_ADDR
// hc_face_number := 1 ;
1497: LD_ADDR_OWVAR 34
1501: PUSH
1502: LD_INT 1
1504: ST_TO_ADDR
// hc_name := Mjr. D. N. Platonow ;
1505: LD_ADDR_OWVAR 26
1509: PUSH
1510: LD_STRING Mjr. D. N. Platonow
1512: ST_TO_ADDR
// platonov := CreateHuman ;
1513: LD_ADDR_EXP 4
1517: PUSH
1518: CALL_OW 44
1522: ST_TO_ADDR
// uc_side := 3 ;
1523: LD_ADDR_OWVAR 20
1527: PUSH
1528: LD_INT 3
1530: ST_TO_ADDR
// ChangeSideFog ( 3 , 6 ) ;
1531: LD_INT 3
1533: PPUSH
1534: LD_INT 6
1536: PPUSH
1537: CALL_OW 343
// skill := [ 6 , 5 , 4 ] [ dif ] ;
1541: LD_ADDR_VAR 0 4
1545: PUSH
1546: LD_INT 6
1548: PUSH
1549: LD_INT 5
1551: PUSH
1552: LD_INT 4
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: LIST
1559: PUSH
1560: LD_EXP 1
1564: ARRAY
1565: ST_TO_ADDR
// team := [ ] ;
1566: LD_ADDR_VAR 0 5
1570: PUSH
1571: EMPTY
1572: ST_TO_ADDR
// hc_importance := 100 ;
1573: LD_ADDR_OWVAR 32
1577: PUSH
1578: LD_INT 100
1580: ST_TO_ADDR
// hc_gallery := gamma ;
1581: LD_ADDR_OWVAR 33
1585: PUSH
1586: LD_STRING gamma
1588: ST_TO_ADDR
// hc_face_number := 1 ;
1589: LD_ADDR_OWVAR 34
1593: PUSH
1594: LD_INT 1
1596: ST_TO_ADDR
// hc_class := 1 ;
1597: LD_ADDR_OWVAR 28
1601: PUSH
1602: LD_INT 1
1604: ST_TO_ADDR
// hc_skills := [ [ 8 , 7 , 6 ] [ dif ] , 5 , 3 , 0 ] ;
1605: LD_ADDR_OWVAR 31
1609: PUSH
1610: LD_INT 8
1612: PUSH
1613: LD_INT 7
1615: PUSH
1616: LD_INT 6
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: LIST
1623: PUSH
1624: LD_EXP 1
1628: ARRAY
1629: PUSH
1630: LD_INT 5
1632: PUSH
1633: LD_INT 3
1635: PUSH
1636: LD_INT 0
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: ST_TO_ADDR
// hc_sex := sex_male ;
1645: LD_ADDR_OWVAR 27
1649: PUSH
1650: LD_INT 1
1652: ST_TO_ADDR
// hc_name := Mjr. Jurij Karakanov ;
1653: LD_ADDR_OWVAR 26
1657: PUSH
1658: LD_STRING Mjr. Jurij Karakanov
1660: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1661: LD_ADDR_OWVAR 29
1665: PUSH
1666: LD_INT 10
1668: PUSH
1669: LD_INT 11
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: ST_TO_ADDR
// commander := CreateHuman ;
1676: LD_ADDR_EXP 3
1680: PUSH
1681: CALL_OW 44
1685: ST_TO_ADDR
// team := team ^ commander ;
1686: LD_ADDR_VAR 0 5
1690: PUSH
1691: LD_VAR 0 5
1695: PUSH
1696: LD_EXP 3
1700: ADD
1701: ST_TO_ADDR
// hc_importance := 0 ;
1702: LD_ADDR_OWVAR 32
1706: PUSH
1707: LD_INT 0
1709: ST_TO_ADDR
// hc_name :=  ;
1710: LD_ADDR_OWVAR 26
1714: PUSH
1715: LD_STRING 
1717: ST_TO_ADDR
// hc_gallery :=  ;
1718: LD_ADDR_OWVAR 33
1722: PUSH
1723: LD_STRING 
1725: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
1726: LD_ADDR_OWVAR 29
1730: PUSH
1731: LD_INT 12
1733: PUSH
1734: LD_INT 10
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: ST_TO_ADDR
// hc_sex := sex_male ;
1741: LD_ADDR_OWVAR 27
1745: PUSH
1746: LD_INT 1
1748: ST_TO_ADDR
// Kapral := CreateHuman ;
1749: LD_ADDR_EXP 5
1753: PUSH
1754: CALL_OW 44
1758: ST_TO_ADDR
// for i = 3 downto dif do
1759: LD_ADDR_VAR 0 2
1763: PUSH
1764: DOUBLE
1765: LD_INT 3
1767: INC
1768: ST_TO_ADDR
1769: LD_EXP 1
1773: PUSH
1774: FOR_DOWNTO
1775: IFFALSE 1881
// begin vc_chassis := ru_medium_tracked ;
1777: LD_ADDR_OWVAR 37
1781: PUSH
1782: LD_INT 22
1784: ST_TO_ADDR
// vc_engine := engine_combustion ;
1785: LD_ADDR_OWVAR 39
1789: PUSH
1790: LD_INT 1
1792: ST_TO_ADDR
// vc_control := control_manual ;
1793: LD_ADDR_OWVAR 38
1797: PUSH
1798: LD_INT 1
1800: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_gun , ru_gun ] [ i ] ;
1801: LD_ADDR_OWVAR 40
1805: PUSH
1806: LD_INT 43
1808: PUSH
1809: LD_INT 44
1811: PUSH
1812: LD_INT 44
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: LIST
1819: PUSH
1820: LD_VAR 0 2
1824: ARRAY
1825: ST_TO_ADDR
// vc_fuel_battery := Rand ( 55 , 77 ) ;
1826: LD_ADDR_OWVAR 41
1830: PUSH
1831: LD_INT 55
1833: PPUSH
1834: LD_INT 77
1836: PPUSH
1837: CALL_OW 12
1841: ST_TO_ADDR
// un := CreateVehicle ;
1842: LD_ADDR_VAR 0 3
1846: PUSH
1847: CALL_OW 45
1851: ST_TO_ADDR
// SetDir ( un , 5 ) ;
1852: LD_VAR 0 3
1856: PPUSH
1857: LD_INT 5
1859: PPUSH
1860: CALL_OW 233
// PlaceUnitArea ( un , rus_spawn , false ) ;
1864: LD_VAR 0 3
1868: PPUSH
1869: LD_INT 1
1871: PPUSH
1872: LD_INT 0
1874: PPUSH
1875: CALL_OW 49
// end ;
1879: GO 1774
1881: POP
1882: POP
// vc_weapon := ru_heavy_machine_gun ;
1883: LD_ADDR_OWVAR 40
1887: PUSH
1888: LD_INT 42
1890: ST_TO_ADDR
// vc_fuel_battery := Rand ( 55 , 77 ) ;
1891: LD_ADDR_OWVAR 41
1895: PUSH
1896: LD_INT 55
1898: PPUSH
1899: LD_INT 77
1901: PPUSH
1902: CALL_OW 12
1906: ST_TO_ADDR
// un := CreateVehicle ;
1907: LD_ADDR_VAR 0 3
1911: PUSH
1912: CALL_OW 45
1916: ST_TO_ADDR
// SetDir ( un , 5 ) ;
1917: LD_VAR 0 3
1921: PPUSH
1922: LD_INT 5
1924: PPUSH
1925: CALL_OW 233
// PlaceUnitArea ( un , rus_spawn , false ) ;
1929: LD_VAR 0 3
1933: PPUSH
1934: LD_INT 1
1936: PPUSH
1937: LD_INT 0
1939: PPUSH
1940: CALL_OW 49
// for p = 1 to 4 do
1944: LD_ADDR_VAR 0 6
1948: PUSH
1949: DOUBLE
1950: LD_INT 1
1952: DEC
1953: ST_TO_ADDR
1954: LD_INT 4
1956: PUSH
1957: FOR_TO
1958: IFFALSE 2025
// for i = 1 to [ 5 , 4 , 3 ] [ dif ] do
1960: LD_ADDR_VAR 0 2
1964: PUSH
1965: DOUBLE
1966: LD_INT 1
1968: DEC
1969: ST_TO_ADDR
1970: LD_INT 5
1972: PUSH
1973: LD_INT 4
1975: PUSH
1976: LD_INT 3
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: LIST
1983: PUSH
1984: LD_EXP 1
1988: ARRAY
1989: PUSH
1990: FOR_TO
1991: IFFALSE 2021
// team := team ^ CreateHumanWithClass ( p , skill ) ;
1993: LD_ADDR_VAR 0 5
1997: PUSH
1998: LD_VAR 0 5
2002: PUSH
2003: LD_VAR 0 6
2007: PPUSH
2008: LD_VAR 0 4
2012: PPUSH
2013: CALL 734 0 2
2017: ADD
2018: ST_TO_ADDR
2019: GO 1990
2021: POP
2022: POP
2023: GO 1957
2025: POP
2026: POP
// for i = 1 to team do
2027: LD_ADDR_VAR 0 2
2031: PUSH
2032: DOUBLE
2033: LD_INT 1
2035: DEC
2036: ST_TO_ADDR
2037: LD_VAR 0 5
2041: PUSH
2042: FOR_TO
2043: IFFALSE 2161
// if GetClass ( team [ i ] ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_empty ] ] ) then
2045: LD_VAR 0 5
2049: PUSH
2050: LD_VAR 0 2
2054: ARRAY
2055: PPUSH
2056: CALL_OW 257
2060: PUSH
2061: LD_INT 3
2063: EQUAL
2064: PUSH
2065: LD_INT 22
2067: PUSH
2068: LD_INT 3
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 58
2077: PUSH
2078: EMPTY
2079: LIST
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PPUSH
2085: CALL_OW 69
2089: AND
2090: IFFALSE 2138
// PlaceHumanInUnit ( team [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_empty ] ] ) [ 1 ] ) else
2092: LD_VAR 0 5
2096: PUSH
2097: LD_VAR 0 2
2101: ARRAY
2102: PPUSH
2103: LD_INT 22
2105: PUSH
2106: LD_INT 3
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: PUSH
2113: LD_INT 58
2115: PUSH
2116: EMPTY
2117: LIST
2118: PUSH
2119: EMPTY
2120: LIST
2121: LIST
2122: PPUSH
2123: CALL_OW 69
2127: PUSH
2128: LD_INT 1
2130: ARRAY
2131: PPUSH
2132: CALL_OW 52
2136: GO 2159
// PlaceUnitArea ( team [ i ] , rus_spawn , false ) ;
2138: LD_VAR 0 5
2142: PUSH
2143: LD_VAR 0 2
2147: ARRAY
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: LD_INT 0
2154: PPUSH
2155: CALL_OW 49
2159: GO 2042
2161: POP
2162: POP
// end ;
2163: LD_VAR 0 1
2167: RET
// every 0 0$10 trigger depot_rdy do var i , un , l , driver ;
2168: LD_EXP 6
2172: IFFALSE 2542
2174: GO 2176
2176: DISABLE
2177: LD_INT 0
2179: PPUSH
2180: PPUSH
2181: PPUSH
2182: PPUSH
// begin Wait ( 0 0$07 ) ;
2183: LD_INT 245
2185: PPUSH
2186: CALL_OW 67
// l := 0 ;
2190: LD_ADDR_VAR 0 3
2194: PUSH
2195: LD_INT 0
2197: ST_TO_ADDR
// repeat begin uc_side := 6 ;
2198: LD_ADDR_OWVAR 20
2202: PUSH
2203: LD_INT 6
2205: ST_TO_ADDR
// uc_nation := 3 ;
2206: LD_ADDR_OWVAR 21
2210: PUSH
2211: LD_INT 3
2213: ST_TO_ADDR
// CreateVehicleWithDriver ( ru_medium_tracked , engine_combustion , ru_cargo_bay , rus_cr_spawn , 5 , Rand ( 3 , 6 ) ) ;
2214: LD_INT 22
2216: PPUSH
2217: LD_INT 1
2219: PPUSH
2220: LD_INT 51
2222: PPUSH
2223: LD_INT 5
2225: PPUSH
2226: LD_INT 5
2228: PPUSH
2229: LD_INT 3
2231: PPUSH
2232: LD_INT 6
2234: PPUSH
2235: CALL_OW 12
2239: PPUSH
2240: CALL 1297 0 6
// un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
2244: LD_ADDR_VAR 0 2
2248: PUSH
2249: LD_INT 22
2251: PUSH
2252: LD_INT 6
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 34
2261: PUSH
2262: LD_INT 51
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PPUSH
2273: CALL_OW 69
2277: PUSH
2278: LD_INT 1
2280: ARRAY
2281: ST_TO_ADDR
// SetCargo ( un , mat_cans , 100 ) ;
2282: LD_VAR 0 2
2286: PPUSH
2287: LD_INT 1
2289: PPUSH
2290: LD_INT 100
2292: PPUSH
2293: CALL_OW 290
// ComMoveXY ( un , dep_x + 2 , dep_y ) ;
2297: LD_VAR 0 2
2301: PPUSH
2302: LD_EXP 7
2306: PUSH
2307: LD_INT 2
2309: PLUS
2310: PPUSH
2311: LD_EXP 8
2315: PPUSH
2316: CALL_OW 111
// AddComUnload ( un ) ;
2320: LD_VAR 0 2
2324: PPUSH
2325: CALL_OW 219
// if ( l = 0 ) then
2329: LD_VAR 0 3
2333: PUSH
2334: LD_INT 0
2336: EQUAL
2337: IFFALSE 2373
// begin Wait ( 0 0$03 ) ;
2339: LD_INT 105
2341: PPUSH
2342: CALL_OW 67
// driver := IsDrivenBy ( un ) ;
2346: LD_ADDR_VAR 0 4
2350: PUSH
2351: LD_VAR 0 2
2355: PPUSH
2356: CALL_OW 311
2360: ST_TO_ADDR
// Say ( driver , Dtran ) ;
2361: LD_VAR 0 4
2365: PPUSH
2366: LD_STRING Dtran
2368: PPUSH
2369: CALL_OW 88
// end ; if ( l = [ 7 , 6 , 5 ] [ dif ] - 1 ) then
2373: LD_VAR 0 3
2377: PUSH
2378: LD_INT 7
2380: PUSH
2381: LD_INT 6
2383: PUSH
2384: LD_INT 5
2386: PUSH
2387: EMPTY
2388: LIST
2389: LIST
2390: LIST
2391: PUSH
2392: LD_EXP 1
2396: ARRAY
2397: PUSH
2398: LD_INT 1
2400: MINUS
2401: EQUAL
2402: IFFALSE 2438
// begin Wait ( 0 0$03 ) ;
2404: LD_INT 105
2406: PPUSH
2407: CALL_OW 67
// driver := IsDrivenBy ( un ) ;
2411: LD_ADDR_VAR 0 4
2415: PUSH
2416: LD_VAR 0 2
2420: PPUSH
2421: CALL_OW 311
2425: ST_TO_ADDR
// Say ( driver , Dtrans ) ;
2426: LD_VAR 0 4
2430: PPUSH
2431: LD_STRING Dtrans
2433: PPUSH
2434: CALL_OW 88
// end ; while ( not IsInArea ( un , rus_exit ) ) do
2438: LD_VAR 0 2
2442: PPUSH
2443: LD_INT 6
2445: PPUSH
2446: CALL_OW 308
2450: NOT
2451: IFFALSE 2477
// begin Wait ( 0 0$01 ) ;
2453: LD_INT 35
2455: PPUSH
2456: CALL_OW 67
// AddComMoveXY ( un , 69 , 97 ) ;
2460: LD_VAR 0 2
2464: PPUSH
2465: LD_INT 69
2467: PPUSH
2468: LD_INT 97
2470: PPUSH
2471: CALL_OW 171
// end ;
2475: GO 2438
// RemoveUnit ( un ) ;
2477: LD_VAR 0 2
2481: PPUSH
2482: CALL_OW 64
// l = l + 1 ;
2486: LD_ADDR_VAR 0 3
2490: PUSH
2491: LD_VAR 0 3
2495: PUSH
2496: LD_INT 1
2498: PLUS
2499: ST_TO_ADDR
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
2500: LD_INT 1155
2502: PPUSH
2503: LD_INT 5355
2505: PPUSH
2506: CALL_OW 12
2510: PPUSH
2511: CALL_OW 67
// end until l = [ 7 , 6 , 5 ] [ dif ] ;
2515: LD_VAR 0 3
2519: PUSH
2520: LD_INT 7
2522: PUSH
2523: LD_INT 6
2525: PUSH
2526: LD_INT 5
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: LIST
2533: PUSH
2534: LD_EXP 1
2538: ARRAY
2539: EQUAL
2540: IFFALSE 2198
// end ; end_of_file
2542: PPOPN 4
2544: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_bazooka and event_rocket = false then
2545: LD_VAR 0 1
2549: PUSH
2550: LD_INT 44
2552: EQUAL
2553: PUSH
2554: LD_EXP 20
2558: PUSH
2559: LD_INT 0
2561: EQUAL
2562: AND
2563: IFFALSE 2709
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) > 0 then
2565: LD_INT 22
2567: PUSH
2568: LD_INT 3
2570: PUSH
2571: EMPTY
2572: LIST
2573: LIST
2574: PUSH
2575: LD_INT 25
2577: PUSH
2578: LD_INT 4
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: PPUSH
2589: CALL_OW 69
2593: PUSH
2594: LD_INT 0
2596: GREATER
2597: IFFALSE 2709
// begin event_rocket := true ;
2599: LD_ADDR_EXP 20
2603: PUSH
2604: LD_INT 1
2606: ST_TO_ADDR
// if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) > 0 then
2607: LD_INT 22
2609: PUSH
2610: LD_INT 3
2612: PUSH
2613: EMPTY
2614: LIST
2615: LIST
2616: PUSH
2617: LD_INT 25
2619: PUSH
2620: LD_INT 4
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: PUSH
2627: LD_INT 26
2629: PUSH
2630: LD_INT 1
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: LIST
2641: PUSH
2642: EMPTY
2643: LIST
2644: PPUSH
2645: CALL_OW 69
2649: PUSH
2650: LD_INT 0
2652: GREATER
2653: IFFALSE 2709
// Say ( FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) [ 1 ] , Dsci2 ) ;
2655: LD_INT 22
2657: PUSH
2658: LD_INT 3
2660: PUSH
2661: EMPTY
2662: LIST
2663: LIST
2664: PUSH
2665: LD_INT 25
2667: PUSH
2668: LD_INT 4
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: PUSH
2675: LD_INT 26
2677: PUSH
2678: LD_INT 1
2680: PUSH
2681: EMPTY
2682: LIST
2683: LIST
2684: PUSH
2685: EMPTY
2686: LIST
2687: LIST
2688: LIST
2689: PUSH
2690: EMPTY
2691: LIST
2692: PPUSH
2693: CALL_OW 69
2697: PUSH
2698: LD_INT 1
2700: ARRAY
2701: PPUSH
2702: LD_STRING Dsci2
2704: PPUSH
2705: CALL_OW 88
// end ; end ;
2709: PPOPN 2
2711: END
// on VehicleConstructed ( un , fac ) do begin SOS_VehicleConstructed ( un , fac ) ;
2712: LD_VAR 0 1
2716: PPUSH
2717: LD_VAR 0 2
2721: PPUSH
2722: CALL 25388 0 2
// if GetSide ( un ) = 3 and GetControl ( un ) = control_computer then
2726: LD_VAR 0 1
2730: PPUSH
2731: CALL_OW 255
2735: PUSH
2736: LD_INT 3
2738: EQUAL
2739: PUSH
2740: LD_VAR 0 1
2744: PPUSH
2745: CALL_OW 263
2749: PUSH
2750: LD_INT 3
2752: EQUAL
2753: AND
2754: IFFALSE 2764
// comp_tested := true ;
2756: LD_ADDR_EXP 22
2760: PUSH
2761: LD_INT 1
2763: ST_TO_ADDR
// end ;
2764: PPOPN 2
2766: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
2767: LD_VAR 0 1
2771: PUSH
2772: LD_INT 22
2774: PUSH
2775: LD_INT 1
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: PUSH
2782: LD_INT 21
2784: PUSH
2785: LD_INT 3
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PPUSH
2796: CALL_OW 69
2800: IN
2801: IFFALSE 2879
// if attacked = false and sikorski_ar = false then
2803: LD_EXP 15
2807: PUSH
2808: LD_INT 0
2810: EQUAL
2811: PUSH
2812: LD_EXP 12
2816: PUSH
2817: LD_INT 0
2819: EQUAL
2820: AND
2821: IFFALSE 2879
// begin attacked := true ;
2823: LD_ADDR_EXP 15
2827: PUSH
2828: LD_INT 1
2830: ST_TO_ADDR
// if IsInUnit ( donald ) then
2831: LD_EXP 13
2835: PPUSH
2836: CALL_OW 310
2840: IFFALSE 2856
// SayRadio ( donald , DGammaF ) else
2842: LD_EXP 13
2846: PPUSH
2847: LD_STRING DGammaF
2849: PPUSH
2850: CALL_OW 94
2854: GO 2879
// if IsInUnit ( van ) then
2856: LD_EXP 14
2860: PPUSH
2861: CALL_OW 310
2865: IFFALSE 2879
// SayRadio ( van , DGammaM ) ;
2867: LD_EXP 14
2871: PPUSH
2872: LD_STRING DGammaM
2874: PPUSH
2875: CALL_OW 94
// end ; if un in FilterAllUnits ( [ f_control , control_remote ] ) then
2879: LD_VAR 0 1
2883: PUSH
2884: LD_INT 33
2886: PUSH
2887: LD_INT 2
2889: PUSH
2890: EMPTY
2891: LIST
2892: LIST
2893: PPUSH
2894: CALL_OW 69
2898: IN
2899: IFFALSE 2910
// ComUnlink ( un ) ;
2901: LD_VAR 0 1
2905: PPUSH
2906: CALL_OW 136
// end ;
2910: PPOPN 1
2912: END
// on ApemanTamed ( ape , sci ) do begin if GetSex ( sci ) = sex_male then
2913: LD_VAR 0 2
2917: PPUSH
2918: CALL_OW 258
2922: PUSH
2923: LD_INT 1
2925: EQUAL
2926: IFFALSE 2940
// Say ( sci , Dsci3 ) ;
2928: LD_VAR 0 2
2932: PPUSH
2933: LD_STRING Dsci3
2935: PPUSH
2936: CALL_OW 88
// end ;
2940: PPOPN 2
2942: END
// on BuildingComplete ( b ) do var i ;
2943: LD_INT 0
2945: PPUSH
// begin if GetBType ( b ) = b_depot and GetSide ( b ) = 3 and depot_rdy = false then
2946: LD_VAR 0 1
2950: PPUSH
2951: CALL_OW 266
2955: PUSH
2956: LD_INT 0
2958: EQUAL
2959: PUSH
2960: LD_VAR 0 1
2964: PPUSH
2965: CALL_OW 255
2969: PUSH
2970: LD_INT 3
2972: EQUAL
2973: AND
2974: PUSH
2975: LD_EXP 6
2979: PUSH
2980: LD_INT 0
2982: EQUAL
2983: AND
2984: IFFALSE 3048
// begin SetBName ( b , kalinin ) ;
2986: LD_VAR 0 1
2990: PPUSH
2991: LD_STRING kalinin
2993: PPUSH
2994: CALL_OW 500
// dep_x := GetX ( b ) ;
2998: LD_ADDR_EXP 7
3002: PUSH
3003: LD_VAR 0 1
3007: PPUSH
3008: CALL_OW 250
3012: ST_TO_ADDR
// dep_y := GetY ( b ) ;
3013: LD_ADDR_EXP 8
3017: PUSH
3018: LD_VAR 0 1
3022: PPUSH
3023: CALL_OW 251
3027: ST_TO_ADDR
// depot_rdy := true ;
3028: LD_ADDR_EXP 6
3032: PUSH
3033: LD_INT 1
3035: ST_TO_ADDR
// SayRadio ( popov , Dpop3 ) ;
3036: LD_EXP 2
3040: PPUSH
3041: LD_STRING Dpop3
3043: PPUSH
3044: CALL_OW 94
// end ; if GetBType ( b ) = b_lab and GetSide ( b ) = 3 and event_comp = false then
3048: LD_VAR 0 1
3052: PPUSH
3053: CALL_OW 266
3057: PUSH
3058: LD_INT 6
3060: EQUAL
3061: PUSH
3062: LD_VAR 0 1
3066: PPUSH
3067: CALL_OW 255
3071: PUSH
3072: LD_INT 3
3074: EQUAL
3075: AND
3076: PUSH
3077: LD_EXP 21
3081: PUSH
3082: LD_INT 0
3084: EQUAL
3085: AND
3086: IFFALSE 3181
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) > 0 then
3088: LD_INT 22
3090: PUSH
3091: LD_INT 3
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: PUSH
3098: LD_INT 25
3100: PUSH
3101: LD_INT 4
3103: PUSH
3104: EMPTY
3105: LIST
3106: LIST
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: PPUSH
3112: CALL_OW 69
3116: PUSH
3117: LD_INT 0
3119: GREATER
3120: IFFALSE 3181
// begin event_comp := true ;
3122: LD_ADDR_EXP 21
3126: PUSH
3127: LD_INT 1
3129: ST_TO_ADDR
// Say ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , Dsci1 ) ;
3130: LD_INT 22
3132: PUSH
3133: LD_INT 3
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: PUSH
3140: LD_INT 25
3142: PUSH
3143: LD_INT 4
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: PUSH
3150: LD_INT 26
3152: PUSH
3153: LD_INT 1
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: LIST
3164: PPUSH
3165: CALL_OW 69
3169: PUSH
3170: LD_INT 1
3172: ARRAY
3173: PPUSH
3174: LD_STRING Dsci1
3176: PPUSH
3177: CALL_OW 88
// end ; if GetBType ( b ) = b_bunker and GetSide ( b ) = 1 then
3181: LD_VAR 0 1
3185: PPUSH
3186: CALL_OW 266
3190: PUSH
3191: LD_INT 32
3193: EQUAL
3194: PUSH
3195: LD_VAR 0 1
3199: PPUSH
3200: CALL_OW 255
3204: PUSH
3205: LD_INT 1
3207: EQUAL
3208: AND
3209: IFFALSE 3274
// begin RaiseSailEvent ( 6 ) ;
3211: LD_INT 6
3213: PPUSH
3214: CALL_OW 427
// AddComPlaceWeapon ( b , gamma_towers [ 4 ] ) ;
3218: LD_VAR 0 1
3222: PPUSH
3223: LD_EXP 18
3227: PUSH
3228: LD_INT 4
3230: ARRAY
3231: PPUSH
3232: CALL_OW 208
// for i = 1 to 4 do
3236: LD_ADDR_VAR 0 2
3240: PUSH
3241: DOUBLE
3242: LD_INT 1
3244: DEC
3245: ST_TO_ADDR
3246: LD_INT 4
3248: PUSH
3249: FOR_TO
3250: IFFALSE 3272
// gamma_towers := Delete ( gamma_towers , 1 ) ;
3252: LD_ADDR_EXP 18
3256: PUSH
3257: LD_EXP 18
3261: PPUSH
3262: LD_INT 1
3264: PPUSH
3265: CALL_OW 3
3269: ST_TO_ADDR
3270: GO 3249
3272: POP
3273: POP
// end ; end ;
3274: PPOPN 2
3276: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3277: LD_VAR 0 1
3281: PPUSH
3282: CALL 25268 0 1
// if un in Patrol then
3286: LD_VAR 0 1
3290: PUSH
3291: LD_EXP 17
3295: IN
3296: IFFALSE 3314
// Patrol := Patrol diff un ;
3298: LD_ADDR_EXP 17
3302: PUSH
3303: LD_EXP 17
3307: PUSH
3308: LD_VAR 0 1
3312: DIFF
3313: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
3314: LD_VAR 0 1
3318: PUSH
3319: LD_INT 22
3321: PUSH
3322: LD_INT 1
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: PUSH
3329: LD_INT 30
3331: PUSH
3332: LD_INT 32
3334: PUSH
3335: EMPTY
3336: LIST
3337: LIST
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PPUSH
3343: CALL_OW 69
3347: IN
3348: IFFALSE 3434
// begin gamma_towers := gamma_towers ^ GetX ( un ) ;
3350: LD_ADDR_EXP 18
3354: PUSH
3355: LD_EXP 18
3359: PUSH
3360: LD_VAR 0 1
3364: PPUSH
3365: CALL_OW 250
3369: ADD
3370: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetY ( un ) ;
3371: LD_ADDR_EXP 18
3375: PUSH
3376: LD_EXP 18
3380: PUSH
3381: LD_VAR 0 1
3385: PPUSH
3386: CALL_OW 251
3390: ADD
3391: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetDir ( un ) ;
3392: LD_ADDR_EXP 18
3396: PUSH
3397: LD_EXP 18
3401: PUSH
3402: LD_VAR 0 1
3406: PPUSH
3407: CALL_OW 254
3411: ADD
3412: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetBWeapon ( un ) ;
3413: LD_ADDR_EXP 18
3417: PUSH
3418: LD_EXP 18
3422: PUSH
3423: LD_VAR 0 1
3427: PPUSH
3428: CALL_OW 269
3432: ADD
3433: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) then
3434: LD_VAR 0 1
3438: PUSH
3439: LD_INT 33
3441: PUSH
3442: LD_INT 2
3444: PUSH
3445: EMPTY
3446: LIST
3447: LIST
3448: PUSH
3449: LD_INT 3
3451: PUSH
3452: LD_INT 34
3454: PUSH
3455: LD_INT 13
3457: PUSH
3458: EMPTY
3459: LIST
3460: LIST
3461: PUSH
3462: EMPTY
3463: LIST
3464: LIST
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: PPUSH
3470: CALL_OW 69
3474: IN
3475: IFFALSE 3491
// new_veh := new_veh + 1 ;
3477: LD_ADDR_EXP 19
3481: PUSH
3482: LD_EXP 19
3486: PUSH
3487: LD_INT 1
3489: PLUS
3490: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_weapon , us_crane ] ) then
3491: LD_VAR 0 1
3495: PUSH
3496: LD_INT 34
3498: PUSH
3499: LD_INT 13
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: PPUSH
3506: CALL_OW 69
3510: IN
3511: IFFALSE 3532
// AddComConstruct ( am_fac , us_medium_tracked , engine_solar , control_remote , us_crane ) ;
3513: LD_INT 26
3515: PPUSH
3516: LD_INT 3
3518: PPUSH
3519: LD_INT 2
3521: PPUSH
3522: LD_INT 2
3524: PPUSH
3525: LD_INT 13
3527: PPUSH
3528: CALL_OW 185
// if un = am_dep then
3532: LD_VAR 0 1
3536: PUSH
3537: LD_INT 25
3539: EQUAL
3540: IFFALSE 3708
// begin SayRadio ( Platonov , DPlat ) ;
3542: LD_EXP 4
3546: PPUSH
3547: LD_STRING DPlat
3549: PPUSH
3550: CALL_OW 94
// if timer <= 30 30$00 then
3554: LD_EXP 24
3558: PUSH
3559: LD_INT 63000
3561: LESSEQUAL
3562: IFFALSE 3576
// AddMedal ( gamma_med3 , 1 ) else
3564: LD_STRING gamma_med3
3566: PPUSH
3567: LD_INT 1
3569: PPUSH
3570: CALL_OW 101
3574: GO 3626
// if timer <= [ 50 50$00 , 42 42$00 , 35 35$00 ] [ dif ] then
3576: LD_EXP 24
3580: PUSH
3581: LD_INT 105000
3583: PUSH
3584: LD_INT 88200
3586: PUSH
3587: LD_INT 73500
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: LIST
3594: PUSH
3595: LD_EXP 1
3599: ARRAY
3600: LESSEQUAL
3601: IFFALSE 3615
// AddMedal ( gamma_med3 , 2 ) else
3603: LD_STRING gamma_med3
3605: PPUSH
3606: LD_INT 2
3608: PPUSH
3609: CALL_OW 101
3613: GO 3626
// AddMedal ( gamma_med3 , - 1 ) ;
3615: LD_STRING gamma_med3
3617: PPUSH
3618: LD_INT 1
3620: NEG
3621: PPUSH
3622: CALL_OW 101
// if not comp_tested then
3626: LD_EXP 22
3630: NOT
3631: IFFALSE 3646
// AddMedal ( gamma_med2 , - 1 ) else
3633: LD_STRING gamma_med2
3635: PPUSH
3636: LD_INT 1
3638: NEG
3639: PPUSH
3640: CALL_OW 101
3644: GO 3656
// AddMedal ( gamma_med2 , 1 ) ;
3646: LD_STRING gamma_med2
3648: PPUSH
3649: LD_INT 1
3651: PPUSH
3652: CALL_OW 101
// if IsDead ( sikorski ) and not sikorski_run then
3656: LD_EXP 9
3660: PPUSH
3661: CALL_OW 301
3665: PUSH
3666: LD_EXP 23
3670: NOT
3671: AND
3672: IFFALSE 3686
// AddMedal ( gamma_med1 , 1 ) else
3674: LD_STRING gamma_med1
3676: PPUSH
3677: LD_INT 1
3679: PPUSH
3680: CALL_OW 101
3684: GO 3697
// AddMedal ( gamma_med1 , - 1 ) ;
3686: LD_STRING gamma_med1
3688: PPUSH
3689: LD_INT 1
3691: NEG
3692: PPUSH
3693: CALL_OW 101
// GiveMedals ( GAMMA_MEDALS ) ;
3697: LD_STRING GAMMA_MEDALS
3699: PPUSH
3700: CALL_OW 102
// YouWin ;
3704: CALL_OW 103
// end ; if un = commander then
3708: LD_VAR 0 1
3712: PUSH
3713: LD_EXP 3
3717: EQUAL
3718: IFFALSE 3727
// YouLost ( comml ) ;
3720: LD_STRING comml
3722: PPUSH
3723: CALL_OW 104
// if un = sikorski then
3727: LD_VAR 0 1
3731: PUSH
3732: LD_EXP 9
3736: EQUAL
3737: IFFALSE 3749
// AddMedal ( gamma_med1 , 1 ) ;
3739: LD_STRING gamma_med1
3741: PPUSH
3742: LD_INT 1
3744: PPUSH
3745: CALL_OW 101
// end ;
3749: PPOPN 1
3751: END
// on SailEvent ( event ) do var i , un , filter , doc , bac , place , engs , crane , b ;
3752: LD_INT 0
3754: PPUSH
3755: PPUSH
3756: PPUSH
3757: PPUSH
3758: PPUSH
3759: PPUSH
3760: PPUSH
3761: PPUSH
3762: PPUSH
// begin if event = 1 then
3763: LD_VAR 0 1
3767: PUSH
3768: LD_INT 1
3770: EQUAL
3771: IFFALSE 4068
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3773: LD_ADDR_VAR 0 4
3777: PUSH
3778: LD_INT 22
3780: PUSH
3781: LD_INT 1
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PUSH
3788: LD_INT 21
3790: PUSH
3791: LD_INT 3
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: PUSH
3798: LD_INT 3
3800: PUSH
3801: LD_INT 24
3803: PUSH
3804: LD_INT 1000
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PUSH
3811: EMPTY
3812: LIST
3813: LIST
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: LIST
3819: PPUSH
3820: CALL_OW 69
3824: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ] ) ;
3825: LD_ADDR_VAR 0 8
3829: PUSH
3830: LD_INT 22
3832: PUSH
3833: LD_INT 1
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: PUSH
3840: LD_INT 25
3842: PUSH
3843: LD_INT 2
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: PUSH
3850: LD_INT 24
3852: PUSH
3853: LD_INT 1000
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: PUSH
3860: EMPTY
3861: LIST
3862: LIST
3863: LIST
3864: PUSH
3865: EMPTY
3866: LIST
3867: PPUSH
3868: CALL_OW 69
3872: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) ;
3873: LD_ADDR_VAR 0 9
3877: PUSH
3878: LD_INT 22
3880: PUSH
3881: LD_INT 1
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: PUSH
3888: LD_INT 34
3890: PUSH
3891: LD_INT 13
3893: PUSH
3894: EMPTY
3895: LIST
3896: LIST
3897: PUSH
3898: EMPTY
3899: LIST
3900: LIST
3901: PPUSH
3902: CALL_OW 69
3906: ST_TO_ADDR
// if engs > 0 then
3907: LD_VAR 0 8
3911: PUSH
3912: LD_INT 0
3914: GREATER
3915: IFFALSE 4020
// for i = 1 to engs do
3917: LD_ADDR_VAR 0 2
3921: PUSH
3922: DOUBLE
3923: LD_INT 1
3925: DEC
3926: ST_TO_ADDR
3927: LD_VAR 0 8
3931: PUSH
3932: FOR_TO
3933: IFFALSE 4018
// begin if IsInUnit ( engs [ i ] ) then
3935: LD_VAR 0 8
3939: PUSH
3940: LD_VAR 0 2
3944: ARRAY
3945: PPUSH
3946: CALL_OW 310
3950: IFFALSE 3967
// ComExitBuilding ( engs [ i ] ) ;
3952: LD_VAR 0 8
3956: PUSH
3957: LD_VAR 0 2
3961: ARRAY
3962: PPUSH
3963: CALL_OW 122
// Wait ( 0 0$0.2 ) ;
3967: LD_INT 7
3969: PPUSH
3970: CALL_OW 67
// if not HasTask ( engs [ i ] ) then
3974: LD_VAR 0 8
3978: PUSH
3979: LD_VAR 0 2
3983: ARRAY
3984: PPUSH
3985: CALL_OW 314
3989: NOT
3990: IFFALSE 4016
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
3992: LD_VAR 0 8
3996: PUSH
3997: LD_VAR 0 2
4001: ARRAY
4002: PPUSH
4003: LD_VAR 0 4
4007: PUSH
4008: LD_INT 1
4010: ARRAY
4011: PPUSH
4012: CALL_OW 130
// end ;
4016: GO 3932
4018: POP
4019: POP
// if crane > 0 then
4020: LD_VAR 0 9
4024: PUSH
4025: LD_INT 0
4027: GREATER
4028: IFFALSE 4068
// if not HasTask ( crane [ 1 ] ) then
4030: LD_VAR 0 9
4034: PUSH
4035: LD_INT 1
4037: ARRAY
4038: PPUSH
4039: CALL_OW 314
4043: NOT
4044: IFFALSE 4068
// ComRepairBuilding ( crane [ 1 ] , filter [ 1 ] ) ;
4046: LD_VAR 0 9
4050: PUSH
4051: LD_INT 1
4053: ARRAY
4054: PPUSH
4055: LD_VAR 0 4
4059: PUSH
4060: LD_INT 1
4062: ARRAY
4063: PPUSH
4064: CALL_OW 130
// end ; if event = 2 then
4068: LD_VAR 0 1
4072: PUSH
4073: LD_INT 2
4075: EQUAL
4076: IFFALSE 4198
// begin engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
4078: LD_ADDR_VAR 0 8
4082: PUSH
4083: LD_INT 22
4085: PUSH
4086: LD_INT 1
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: PUSH
4093: LD_INT 25
4095: PUSH
4096: LD_INT 2
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: PUSH
4103: EMPTY
4104: LIST
4105: LIST
4106: PPUSH
4107: CALL_OW 69
4111: ST_TO_ADDR
// if engs > 0 then
4112: LD_VAR 0 8
4116: PUSH
4117: LD_INT 0
4119: GREATER
4120: IFFALSE 4198
// for i = 1 to engs do
4122: LD_ADDR_VAR 0 2
4126: PUSH
4127: DOUBLE
4128: LD_INT 1
4130: DEC
4131: ST_TO_ADDR
4132: LD_VAR 0 8
4136: PUSH
4137: FOR_TO
4138: IFFALSE 4196
// if not HasTask ( engs [ i ] ) and not IsInUnit ( engs [ i ] ) then
4140: LD_VAR 0 8
4144: PUSH
4145: LD_VAR 0 2
4149: ARRAY
4150: PPUSH
4151: CALL_OW 314
4155: NOT
4156: PUSH
4157: LD_VAR 0 8
4161: PUSH
4162: LD_VAR 0 2
4166: ARRAY
4167: PPUSH
4168: CALL_OW 310
4172: NOT
4173: AND
4174: IFFALSE 4194
// ComEnterUnit ( engs [ i ] , am_dep ) ;
4176: LD_VAR 0 8
4180: PUSH
4181: LD_VAR 0 2
4185: ARRAY
4186: PPUSH
4187: LD_INT 25
4189: PPUSH
4190: CALL_OW 120
4194: GO 4137
4196: POP
4197: POP
// end ; if event = 3 then
4198: LD_VAR 0 1
4202: PUSH
4203: LD_INT 3
4205: EQUAL
4206: IFFALSE 4570
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_class , 4 ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
4208: LD_ADDR_VAR 0 4
4212: PUSH
4213: LD_INT 22
4215: PUSH
4216: LD_INT 1
4218: PUSH
4219: EMPTY
4220: LIST
4221: LIST
4222: PUSH
4223: LD_INT 21
4225: PUSH
4226: LD_INT 1
4228: PUSH
4229: EMPTY
4230: LIST
4231: LIST
4232: PUSH
4233: LD_INT 3
4235: PUSH
4236: LD_INT 25
4238: PUSH
4239: LD_INT 4
4241: PUSH
4242: EMPTY
4243: LIST
4244: LIST
4245: PUSH
4246: EMPTY
4247: LIST
4248: LIST
4249: PUSH
4250: LD_INT 3
4252: PUSH
4253: LD_INT 24
4255: PUSH
4256: LD_INT 800
4258: PUSH
4259: EMPTY
4260: LIST
4261: LIST
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: LIST
4271: LIST
4272: PUSH
4273: EMPTY
4274: LIST
4275: PPUSH
4276: CALL_OW 69
4280: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
4281: LD_ADDR_VAR 0 5
4285: PUSH
4286: LD_INT 22
4288: PUSH
4289: LD_INT 1
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: PUSH
4296: LD_INT 25
4298: PUSH
4299: LD_INT 4
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: PPUSH
4310: CALL_OW 69
4314: ST_TO_ADDR
// if filter > 0 then
4315: LD_VAR 0 4
4319: PUSH
4320: LD_INT 0
4322: GREATER
4323: IFFALSE 4512
// begin for i = 1 to doc do
4325: LD_ADDR_VAR 0 2
4329: PUSH
4330: DOUBLE
4331: LD_INT 1
4333: DEC
4334: ST_TO_ADDR
4335: LD_VAR 0 5
4339: PUSH
4340: FOR_TO
4341: IFFALSE 4441
// begin if IsInUnit ( doc [ i ] ) then
4343: LD_VAR 0 5
4347: PUSH
4348: LD_VAR 0 2
4352: ARRAY
4353: PPUSH
4354: CALL_OW 310
4358: IFFALSE 4375
// ComExitBuilding ( doc [ i ] ) ;
4360: LD_VAR 0 5
4364: PUSH
4365: LD_VAR 0 2
4369: ARRAY
4370: PPUSH
4371: CALL_OW 122
// if GetDistUnits ( filter [ 1 ] , am_lab ) < 10 and not HasTask ( doc [ i ] ) then
4375: LD_VAR 0 4
4379: PUSH
4380: LD_INT 1
4382: ARRAY
4383: PPUSH
4384: LD_INT 46
4386: PPUSH
4387: CALL_OW 296
4391: PUSH
4392: LD_INT 10
4394: LESS
4395: PUSH
4396: LD_VAR 0 5
4400: PUSH
4401: LD_VAR 0 2
4405: ARRAY
4406: PPUSH
4407: CALL_OW 314
4411: NOT
4412: AND
4413: IFFALSE 4439
// ComHeal ( doc [ i ] , filter [ 1 ] ) ;
4415: LD_VAR 0 5
4419: PUSH
4420: LD_VAR 0 2
4424: ARRAY
4425: PPUSH
4426: LD_VAR 0 4
4430: PUSH
4431: LD_INT 1
4433: ARRAY
4434: PPUSH
4435: CALL_OW 128
// end ;
4439: GO 4340
4441: POP
4442: POP
// for i = 1 to filter do
4443: LD_ADDR_VAR 0 2
4447: PUSH
4448: DOUBLE
4449: LD_INT 1
4451: DEC
4452: ST_TO_ADDR
4453: LD_VAR 0 4
4457: PUSH
4458: FOR_TO
4459: IFFALSE 4508
// if GetDistUnits ( filter [ i ] , am_lab ) > 10 then
4461: LD_VAR 0 4
4465: PUSH
4466: LD_VAR 0 2
4470: ARRAY
4471: PPUSH
4472: LD_INT 46
4474: PPUSH
4475: CALL_OW 296
4479: PUSH
4480: LD_INT 10
4482: GREATER
4483: IFFALSE 4506
// ComMoveXY ( filter [ i ] , 47 , 12 ) ;
4485: LD_VAR 0 4
4489: PUSH
4490: LD_VAR 0 2
4494: ARRAY
4495: PPUSH
4496: LD_INT 47
4498: PPUSH
4499: LD_INT 12
4501: PPUSH
4502: CALL_OW 111
4506: GO 4458
4508: POP
4509: POP
// end else
4510: GO 4570
// for i = 1 to doc do
4512: LD_ADDR_VAR 0 2
4516: PUSH
4517: DOUBLE
4518: LD_INT 1
4520: DEC
4521: ST_TO_ADDR
4522: LD_VAR 0 5
4526: PUSH
4527: FOR_TO
4528: IFFALSE 4568
// if not IsInUnit ( doc [ i ] ) then
4530: LD_VAR 0 5
4534: PUSH
4535: LD_VAR 0 2
4539: ARRAY
4540: PPUSH
4541: CALL_OW 310
4545: NOT
4546: IFFALSE 4566
// ComEnterUnit ( doc [ i ] , am_lab ) ;
4548: LD_VAR 0 5
4552: PUSH
4553: LD_VAR 0 2
4557: ARRAY
4558: PPUSH
4559: LD_INT 46
4561: PPUSH
4562: CALL_OW 120
4566: GO 4527
4568: POP
4569: POP
// end ; if event = 4 then
4570: LD_VAR 0 1
4574: PUSH
4575: LD_INT 4
4577: EQUAL
4578: IFFALSE 4829
// begin bac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
4580: LD_ADDR_VAR 0 6
4584: PUSH
4585: LD_INT 22
4587: PUSH
4588: LD_INT 1
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PUSH
4595: LD_INT 30
4597: PUSH
4598: LD_INT 5
4600: PUSH
4601: EMPTY
4602: LIST
4603: LIST
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: PPUSH
4609: CALL_OW 69
4613: ST_TO_ADDR
// for i = 1 to bac do
4614: LD_ADDR_VAR 0 2
4618: PUSH
4619: DOUBLE
4620: LD_INT 1
4622: DEC
4623: ST_TO_ADDR
4624: LD_VAR 0 6
4628: PUSH
4629: FOR_TO
4630: IFFALSE 4671
// if UnitsInside ( bac [ i ] ) < 6 then
4632: LD_VAR 0 6
4636: PUSH
4637: LD_VAR 0 2
4641: ARRAY
4642: PPUSH
4643: CALL_OW 313
4647: PUSH
4648: LD_INT 6
4650: LESS
4651: IFFALSE 4669
// place := bac [ i ] ;
4653: LD_ADDR_VAR 0 7
4657: PUSH
4658: LD_VAR 0 6
4662: PUSH
4663: LD_VAR 0 2
4667: ARRAY
4668: ST_TO_ADDR
4669: GO 4629
4671: POP
4672: POP
// if place then
4673: LD_VAR 0 7
4677: IFFALSE 4829
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] ] , [ f_lives , 1000 ] ] ] ) diff Patrol ;
4679: LD_ADDR_VAR 0 4
4683: PUSH
4684: LD_INT 22
4686: PUSH
4687: LD_INT 1
4689: PUSH
4690: EMPTY
4691: LIST
4692: LIST
4693: PUSH
4694: LD_INT 2
4696: PUSH
4697: LD_INT 25
4699: PUSH
4700: LD_INT 1
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: PUSH
4707: LD_INT 25
4709: PUSH
4710: LD_INT 5
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: PUSH
4717: EMPTY
4718: LIST
4719: LIST
4720: LIST
4721: PUSH
4722: LD_INT 24
4724: PUSH
4725: LD_INT 1000
4727: PUSH
4728: EMPTY
4729: LIST
4730: LIST
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: LIST
4736: PUSH
4737: EMPTY
4738: LIST
4739: PPUSH
4740: CALL_OW 69
4744: PUSH
4745: LD_EXP 17
4749: DIFF
4750: ST_TO_ADDR
// for i = 1 to filter do
4751: LD_ADDR_VAR 0 2
4755: PUSH
4756: DOUBLE
4757: LD_INT 1
4759: DEC
4760: ST_TO_ADDR
4761: LD_VAR 0 4
4765: PUSH
4766: FOR_TO
4767: IFFALSE 4827
// if not IsInUnit ( filter [ i ] ) and not HasTask ( filter [ i ] ) then
4769: LD_VAR 0 4
4773: PUSH
4774: LD_VAR 0 2
4778: ARRAY
4779: PPUSH
4780: CALL_OW 310
4784: NOT
4785: PUSH
4786: LD_VAR 0 4
4790: PUSH
4791: LD_VAR 0 2
4795: ARRAY
4796: PPUSH
4797: CALL_OW 314
4801: NOT
4802: AND
4803: IFFALSE 4825
// ComEnterUnit ( filter [ i ] , place ) ;
4805: LD_VAR 0 4
4809: PUSH
4810: LD_VAR 0 2
4814: ARRAY
4815: PPUSH
4816: LD_VAR 0 7
4820: PPUSH
4821: CALL_OW 120
4825: GO 4766
4827: POP
4828: POP
// end ; end ; if event = 5 then
4829: LD_VAR 0 1
4833: PUSH
4834: LD_INT 5
4836: EQUAL
4837: IFFALSE 4991
// begin if FilterUnitsInArea ( am_sec , [ f_enemy , 1 ] ) = 0 then
4839: LD_INT 12
4841: PPUSH
4842: LD_INT 81
4844: PUSH
4845: LD_INT 1
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: PPUSH
4852: CALL_OW 70
4856: PUSH
4857: LD_INT 0
4859: EQUAL
4860: IFFALSE 4991
// begin engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
4862: LD_ADDR_VAR 0 8
4866: PUSH
4867: LD_INT 22
4869: PUSH
4870: LD_INT 1
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: PUSH
4877: LD_INT 25
4879: PUSH
4880: LD_INT 2
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PPUSH
4891: CALL_OW 69
4895: ST_TO_ADDR
// if engs > 0 then
4896: LD_VAR 0 8
4900: PUSH
4901: LD_INT 0
4903: GREATER
4904: IFFALSE 4991
// for i = 1 to engs do
4906: LD_ADDR_VAR 0 2
4910: PUSH
4911: DOUBLE
4912: LD_INT 1
4914: DEC
4915: ST_TO_ADDR
4916: LD_VAR 0 8
4920: PUSH
4921: FOR_TO
4922: IFFALSE 4989
// if not HasTask ( engs [ i ] ) then
4924: LD_VAR 0 8
4928: PUSH
4929: LD_VAR 0 2
4933: ARRAY
4934: PPUSH
4935: CALL_OW 314
4939: NOT
4940: IFFALSE 4987
// ComBuild ( engs [ i ] , b_bunker , gamma_towers [ 1 ] , gamma_towers [ 2 ] , gamma_towers [ 3 ] ) ;
4942: LD_VAR 0 8
4946: PUSH
4947: LD_VAR 0 2
4951: ARRAY
4952: PPUSH
4953: LD_INT 32
4955: PPUSH
4956: LD_EXP 18
4960: PUSH
4961: LD_INT 1
4963: ARRAY
4964: PPUSH
4965: LD_EXP 18
4969: PUSH
4970: LD_INT 2
4972: ARRAY
4973: PPUSH
4974: LD_EXP 18
4978: PUSH
4979: LD_INT 3
4981: ARRAY
4982: PPUSH
4983: CALL_OW 145
4987: GO 4921
4989: POP
4990: POP
// end ; end ; if event = 6 then
4991: LD_VAR 0 1
4995: PUSH
4996: LD_INT 6
4998: EQUAL
4999: IFFALSE 5183
// begin bac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
5001: LD_ADDR_VAR 0 6
5005: PUSH
5006: LD_INT 22
5008: PUSH
5009: LD_INT 1
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: PUSH
5016: LD_INT 30
5018: PUSH
5019: LD_INT 5
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: PPUSH
5030: CALL_OW 69
5034: ST_TO_ADDR
// if bac and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ] ) > 0 then
5035: LD_VAR 0 6
5039: PUSH
5040: LD_INT 22
5042: PUSH
5043: LD_INT 1
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: PUSH
5050: LD_INT 30
5052: PUSH
5053: LD_INT 32
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: PUSH
5060: LD_INT 58
5062: PUSH
5063: EMPTY
5064: LIST
5065: PUSH
5066: EMPTY
5067: LIST
5068: LIST
5069: LIST
5070: PUSH
5071: EMPTY
5072: LIST
5073: PPUSH
5074: CALL_OW 69
5078: PUSH
5079: LD_INT 0
5081: GREATER
5082: AND
5083: IFFALSE 5183
// begin b := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ] ) [ 1 ] ;
5085: LD_ADDR_VAR 0 10
5089: PUSH
5090: LD_INT 22
5092: PUSH
5093: LD_INT 1
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: PUSH
5100: LD_INT 30
5102: PUSH
5103: LD_INT 32
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: PUSH
5110: LD_INT 58
5112: PUSH
5113: EMPTY
5114: LIST
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: LIST
5120: PUSH
5121: EMPTY
5122: LIST
5123: PPUSH
5124: CALL_OW 69
5128: PUSH
5129: LD_INT 1
5131: ARRAY
5132: ST_TO_ADDR
// un := UnitsInside ( bac [ 1 ] ) ;
5133: LD_ADDR_VAR 0 3
5137: PUSH
5138: LD_VAR 0 6
5142: PUSH
5143: LD_INT 1
5145: ARRAY
5146: PPUSH
5147: CALL_OW 313
5151: ST_TO_ADDR
// ComExitBuilding ( un [ 1 ] ) ;
5152: LD_VAR 0 3
5156: PUSH
5157: LD_INT 1
5159: ARRAY
5160: PPUSH
5161: CALL_OW 122
// AddComEnterUnit ( un [ 1 ] , b ) ;
5165: LD_VAR 0 3
5169: PUSH
5170: LD_INT 1
5172: ARRAY
5173: PPUSH
5174: LD_VAR 0 10
5178: PPUSH
5179: CALL_OW 180
// end ; end ; end ;
5183: PPOPN 10
5185: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 3 then
5186: LD_VAR 0 1
5190: PUSH
5191: LD_INT 1
5193: EQUAL
5194: PUSH
5195: LD_VAR 0 2
5199: PUSH
5200: LD_INT 3
5202: EQUAL
5203: AND
5204: IFFALSE 5214
// contact_am := true ;
5206: LD_ADDR_EXP 16
5210: PUSH
5211: LD_INT 1
5213: ST_TO_ADDR
// end ;
5214: PPOPN 2
5216: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5217: LD_VAR 0 1
5221: PPUSH
5222: LD_VAR 0 2
5226: PPUSH
5227: LD_VAR 0 3
5231: PPUSH
5232: CALL 25364 0 3
// end ;
5236: PPOPN 3
5238: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5239: LD_VAR 0 1
5243: PPUSH
5244: CALL 25372 0 1
// end ; end_of_file
5248: PPOPN 1
5250: END
// export Sikorski , Game_Started , SForce , Sikorski_Ar , Donald , Van , attacked , contact_am ; export patrol ; export gamma_towers ; export function PrepareAmerican ; var i , un , b , skill , weapons , sol , lw ; begin
5251: LD_INT 0
5253: PPUSH
5254: PPUSH
5255: PPUSH
5256: PPUSH
5257: PPUSH
5258: PPUSH
5259: PPUSH
5260: PPUSH
// skill := [ 5 , 6 , 7 ] [ dif ] ;
5261: LD_ADDR_VAR 0 5
5265: PUSH
5266: LD_INT 5
5268: PUSH
5269: LD_INT 6
5271: PUSH
5272: LD_INT 7
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: LIST
5279: PUSH
5280: LD_EXP 1
5284: ARRAY
5285: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_gatling_gun , us_gatling_gun , us_double_gun , us_double_gun , us_double_gun , us_heavy_gun ] ;
5286: LD_ADDR_VAR 0 6
5290: PUSH
5291: LD_INT 4
5293: PUSH
5294: LD_INT 4
5296: PUSH
5297: LD_INT 4
5299: PUSH
5300: LD_INT 5
5302: PUSH
5303: LD_INT 5
5305: PUSH
5306: LD_INT 5
5308: PUSH
5309: LD_INT 6
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: LIST
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: ST_TO_ADDR
// SForce := [ ] ;
5321: LD_ADDR_EXP 11
5325: PUSH
5326: EMPTY
5327: ST_TO_ADDR
// Sikorski_Ar := false ;
5328: LD_ADDR_EXP 12
5332: PUSH
5333: LD_INT 0
5335: ST_TO_ADDR
// attacked := false ;
5336: LD_ADDR_EXP 15
5340: PUSH
5341: LD_INT 0
5343: ST_TO_ADDR
// contact_am := false ;
5344: LD_ADDR_EXP 16
5348: PUSH
5349: LD_INT 0
5351: ST_TO_ADDR
// patrol := [ ] ;
5352: LD_ADDR_EXP 17
5356: PUSH
5357: EMPTY
5358: ST_TO_ADDR
// gamma_towers := [ ] ;
5359: LD_ADDR_EXP 18
5363: PUSH
5364: EMPTY
5365: ST_TO_ADDR
// SetBName ( am_dep , gamma ) ;
5366: LD_INT 25
5368: PPUSH
5369: LD_STRING gamma
5371: PPUSH
5372: CALL_OW 500
// uc_side := 1 ;
5376: LD_ADDR_OWVAR 20
5380: PUSH
5381: LD_INT 1
5383: ST_TO_ADDR
// uc_nation := 1 ;
5384: LD_ADDR_OWVAR 21
5388: PUSH
5389: LD_INT 1
5391: ST_TO_ADDR
// hc_importance := 0 ;
5392: LD_ADDR_OWVAR 32
5396: PUSH
5397: LD_INT 0
5399: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
5400: LD_ADDR_OWVAR 26
5404: PUSH
5405: LD_STRING Jeremy Sikorski
5407: ST_TO_ADDR
// hc_gallery := us ;
5408: LD_ADDR_OWVAR 33
5412: PUSH
5413: LD_STRING us
5415: ST_TO_ADDR
// hc_face_number := 19 ;
5416: LD_ADDR_OWVAR 34
5420: PUSH
5421: LD_INT 19
5423: ST_TO_ADDR
// hc_skills := [ Rand ( skill , skill + 2 ) , 4 , 6 , 3 ] ;
5424: LD_ADDR_OWVAR 31
5428: PUSH
5429: LD_VAR 0 5
5433: PPUSH
5434: LD_VAR 0 5
5438: PUSH
5439: LD_INT 2
5441: PLUS
5442: PPUSH
5443: CALL_OW 12
5447: PUSH
5448: LD_INT 4
5450: PUSH
5451: LD_INT 6
5453: PUSH
5454: LD_INT 3
5456: PUSH
5457: EMPTY
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: ST_TO_ADDR
// hc_sex := sex_male ;
5463: LD_ADDR_OWVAR 27
5467: PUSH
5468: LD_INT 1
5470: ST_TO_ADDR
// hc_class := 1 ;
5471: LD_ADDR_OWVAR 28
5475: PUSH
5476: LD_INT 1
5478: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
5479: LD_ADDR_OWVAR 29
5483: PUSH
5484: LD_INT 10
5486: PUSH
5487: LD_INT 11
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: ST_TO_ADDR
// sikorski := CreateHuman ;
5494: LD_ADDR_EXP 9
5498: PUSH
5499: CALL_OW 44
5503: ST_TO_ADDR
// hc_name := Lucy Donaldson ;
5504: LD_ADDR_OWVAR 26
5508: PUSH
5509: LD_STRING Lucy Donaldson
5511: ST_TO_ADDR
// hc_gallery := us ;
5512: LD_ADDR_OWVAR 33
5516: PUSH
5517: LD_STRING us
5519: ST_TO_ADDR
// hc_face_number := 2 ;
5520: LD_ADDR_OWVAR 34
5524: PUSH
5525: LD_INT 2
5527: ST_TO_ADDR
// hc_skills := [ Rand ( skill , skill + 2 ) , 6 , 4 , 2 ] ;
5528: LD_ADDR_OWVAR 31
5532: PUSH
5533: LD_VAR 0 5
5537: PPUSH
5538: LD_VAR 0 5
5542: PUSH
5543: LD_INT 2
5545: PLUS
5546: PPUSH
5547: CALL_OW 12
5551: PUSH
5552: LD_INT 6
5554: PUSH
5555: LD_INT 4
5557: PUSH
5558: LD_INT 2
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: LIST
5565: LIST
5566: ST_TO_ADDR
// hc_sex := sex_female ;
5567: LD_ADDR_OWVAR 27
5571: PUSH
5572: LD_INT 2
5574: ST_TO_ADDR
// hc_class := 1 ;
5575: LD_ADDR_OWVAR 28
5579: PUSH
5580: LD_INT 1
5582: ST_TO_ADDR
// donald := CreateHuman ;
5583: LD_ADDR_EXP 13
5587: PUSH
5588: CALL_OW 44
5592: ST_TO_ADDR
// hc_name := Peter Van Houten ;
5593: LD_ADDR_OWVAR 26
5597: PUSH
5598: LD_STRING Peter Van Houten
5600: ST_TO_ADDR
// hc_gallery := us ;
5601: LD_ADDR_OWVAR 33
5605: PUSH
5606: LD_STRING us
5608: ST_TO_ADDR
// hc_face_number := 16 ;
5609: LD_ADDR_OWVAR 34
5613: PUSH
5614: LD_INT 16
5616: ST_TO_ADDR
// hc_sex := sex_male ;
5617: LD_ADDR_OWVAR 27
5621: PUSH
5622: LD_INT 1
5624: ST_TO_ADDR
// van := CreateHuman ;
5625: LD_ADDR_EXP 14
5629: PUSH
5630: CALL_OW 44
5634: ST_TO_ADDR
// hc_importance := 0 ;
5635: LD_ADDR_OWVAR 32
5639: PUSH
5640: LD_INT 0
5642: ST_TO_ADDR
// case dif of 1 :
5643: LD_EXP 1
5647: PUSH
5648: LD_INT 1
5650: DOUBLE
5651: EQUAL
5652: IFTRUE 5656
5654: GO 5667
5656: POP
// lw = 1 ; 2 :
5657: LD_ADDR_VAR 0 8
5661: PUSH
5662: LD_INT 1
5664: ST_TO_ADDR
5665: GO 5714
5667: LD_INT 2
5669: DOUBLE
5670: EQUAL
5671: IFTRUE 5675
5673: GO 5694
5675: POP
// lw = Rand ( 1 , 2 ) ; 3 :
5676: LD_ADDR_VAR 0 8
5680: PUSH
5681: LD_INT 1
5683: PPUSH
5684: LD_INT 2
5686: PPUSH
5687: CALL_OW 12
5691: ST_TO_ADDR
5692: GO 5714
5694: LD_INT 3
5696: DOUBLE
5697: EQUAL
5698: IFTRUE 5702
5700: GO 5713
5702: POP
// lw = 2 ; end ;
5703: LD_ADDR_VAR 0 8
5707: PUSH
5708: LD_INT 2
5710: ST_TO_ADDR
5711: GO 5714
5713: POP
// case lw of 1 :
5714: LD_VAR 0 8
5718: PUSH
5719: LD_INT 1
5721: DOUBLE
5722: EQUAL
5723: IFTRUE 5727
5725: GO 5742
5727: POP
// PlaceHumanInUnit ( donald , am_dep ) ; 2 :
5728: LD_EXP 13
5732: PPUSH
5733: LD_INT 25
5735: PPUSH
5736: CALL_OW 52
5740: GO 5766
5742: LD_INT 2
5744: DOUBLE
5745: EQUAL
5746: IFTRUE 5750
5748: GO 5765
5750: POP
// PlaceHumanInUnit ( van , am_dep ) ; end ;
5751: LD_EXP 14
5755: PPUSH
5756: LD_INT 25
5758: PPUSH
5759: CALL_OW 52
5763: GO 5766
5765: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
5766: LD_ADDR_VAR 0 2
5770: PUSH
5771: LD_INT 22
5773: PUSH
5774: LD_INT 1
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: PUSH
5781: LD_INT 30
5783: PUSH
5784: LD_INT 32
5786: PUSH
5787: EMPTY
5788: LIST
5789: LIST
5790: PUSH
5791: EMPTY
5792: LIST
5793: LIST
5794: PPUSH
5795: CALL_OW 69
5799: PUSH
5800: FOR_IN
5801: IFFALSE 5855
// begin PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
5803: LD_INT 1
5805: PPUSH
5806: LD_VAR 0 5
5810: PPUSH
5811: CALL 734 0 2
5815: PPUSH
5816: LD_VAR 0 2
5820: PPUSH
5821: CALL_OW 52
// PlaceWeaponTurret ( i , weapons [ Rand ( 1 , weapons ) ] ) ;
5825: LD_VAR 0 2
5829: PPUSH
5830: LD_VAR 0 6
5834: PUSH
5835: LD_INT 1
5837: PPUSH
5838: LD_VAR 0 6
5842: PPUSH
5843: CALL_OW 12
5847: ARRAY
5848: PPUSH
5849: CALL_OW 431
// end ;
5853: GO 5800
5855: POP
5856: POP
// sol := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , class_soldier ] , [ class_sniper ] ] ] ) ;
5857: LD_ADDR_VAR 0 7
5861: PUSH
5862: LD_INT 22
5864: PUSH
5865: LD_INT 1
5867: PUSH
5868: EMPTY
5869: LIST
5870: LIST
5871: PUSH
5872: LD_INT 2
5874: PUSH
5875: LD_INT 25
5877: PUSH
5878: LD_INT 1
5880: PUSH
5881: EMPTY
5882: LIST
5883: LIST
5884: PUSH
5885: LD_INT 5
5887: PUSH
5888: EMPTY
5889: LIST
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: LIST
5895: PUSH
5896: EMPTY
5897: LIST
5898: LIST
5899: PPUSH
5900: CALL_OW 69
5904: ST_TO_ADDR
// for i = 1 to sol do
5905: LD_ADDR_VAR 0 2
5909: PUSH
5910: DOUBLE
5911: LD_INT 1
5913: DEC
5914: ST_TO_ADDR
5915: LD_VAR 0 7
5919: PUSH
5920: FOR_TO
5921: IFFALSE 5943
// SetTag ( sol [ i ] , 1 ) ;
5923: LD_VAR 0 7
5927: PUSH
5928: LD_VAR 0 2
5932: ARRAY
5933: PPUSH
5934: LD_INT 1
5936: PPUSH
5937: CALL_OW 109
5941: GO 5920
5943: POP
5944: POP
// for i = 1 to 3 do
5945: LD_ADDR_VAR 0 2
5949: PUSH
5950: DOUBLE
5951: LD_INT 1
5953: DEC
5954: ST_TO_ADDR
5955: LD_INT 3
5957: PUSH
5958: FOR_TO
5959: IFFALSE 5983
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , am_ct ) ;
5961: LD_INT 3
5963: PPUSH
5964: LD_VAR 0 5
5968: PPUSH
5969: CALL 734 0 2
5973: PPUSH
5974: LD_INT 56
5976: PPUSH
5977: CALL_OW 52
5981: GO 5958
5983: POP
5984: POP
// for i = 1 to 6 do
5985: LD_ADDR_VAR 0 2
5989: PUSH
5990: DOUBLE
5991: LD_INT 1
5993: DEC
5994: ST_TO_ADDR
5995: LD_INT 6
5997: PUSH
5998: FOR_TO
5999: IFFALSE 6023
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , am_fac ) ;
6001: LD_INT 3
6003: PPUSH
6004: LD_VAR 0 5
6008: PPUSH
6009: CALL 734 0 2
6013: PPUSH
6014: LD_INT 26
6016: PPUSH
6017: CALL_OW 52
6021: GO 5998
6023: POP
6024: POP
// for i = 1 to 5 do
6025: LD_ADDR_VAR 0 2
6029: PUSH
6030: DOUBLE
6031: LD_INT 1
6033: DEC
6034: ST_TO_ADDR
6035: LD_INT 5
6037: PUSH
6038: FOR_TO
6039: IFFALSE 6066
// PlaceUnitArea ( CreateHumanWithClass ( 2 , skill ) , am_base , false ) ;
6041: LD_INT 2
6043: PPUSH
6044: LD_VAR 0 5
6048: PPUSH
6049: CALL 734 0 2
6053: PPUSH
6054: LD_INT 7
6056: PPUSH
6057: LD_INT 0
6059: PPUSH
6060: CALL_OW 49
6064: GO 6038
6066: POP
6067: POP
// for i = 1 to 3 do
6068: LD_ADDR_VAR 0 2
6072: PUSH
6073: DOUBLE
6074: LD_INT 1
6076: DEC
6077: ST_TO_ADDR
6078: LD_INT 3
6080: PUSH
6081: FOR_TO
6082: IFFALSE 6106
// PlaceHumanInUnit ( CreateHumanWithClass ( 4 , skill ) , am_lab ) ;
6084: LD_INT 4
6086: PPUSH
6087: LD_VAR 0 5
6091: PPUSH
6092: CALL 734 0 2
6096: PPUSH
6097: LD_INT 46
6099: PPUSH
6100: CALL_OW 52
6104: GO 6081
6106: POP
6107: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) do
6108: LD_ADDR_VAR 0 2
6112: PUSH
6113: LD_INT 22
6115: PUSH
6116: LD_INT 1
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PUSH
6123: LD_INT 30
6125: PUSH
6126: LD_INT 5
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: PPUSH
6137: CALL_OW 69
6141: PUSH
6142: FOR_IN
6143: IFFALSE 6257
// begin PlaceHumanInUnit ( CreateHumanWithClass ( class_sniper , skill ) , i ) ;
6145: LD_INT 5
6147: PPUSH
6148: LD_VAR 0 5
6152: PPUSH
6153: CALL 734 0 2
6157: PPUSH
6158: LD_VAR 0 2
6162: PPUSH
6163: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( class_sniper , skill ) , i ) ;
6167: LD_INT 5
6169: PPUSH
6170: LD_VAR 0 5
6174: PPUSH
6175: CALL 734 0 2
6179: PPUSH
6180: LD_VAR 0 2
6184: PPUSH
6185: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6189: LD_INT 1
6191: PPUSH
6192: LD_VAR 0 5
6196: PPUSH
6197: CALL 734 0 2
6201: PPUSH
6202: LD_VAR 0 2
6206: PPUSH
6207: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6211: LD_INT 1
6213: PPUSH
6214: LD_VAR 0 5
6218: PPUSH
6219: CALL 734 0 2
6223: PPUSH
6224: LD_VAR 0 2
6228: PPUSH
6229: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6233: LD_INT 1
6235: PPUSH
6236: LD_VAR 0 5
6240: PPUSH
6241: CALL 734 0 2
6245: PPUSH
6246: LD_VAR 0 2
6250: PPUSH
6251: CALL_OW 52
// end ;
6255: GO 6142
6257: POP
6258: POP
// if dif > 1 then
6259: LD_EXP 1
6263: PUSH
6264: LD_INT 1
6266: GREATER
6267: IFFALSE 6340
// for i = 1 to ( dif - 1 ) do
6269: LD_ADDR_VAR 0 2
6273: PUSH
6274: DOUBLE
6275: LD_INT 1
6277: DEC
6278: ST_TO_ADDR
6279: LD_EXP 1
6283: PUSH
6284: LD_INT 1
6286: MINUS
6287: PUSH
6288: FOR_TO
6289: IFFALSE 6338
// begin patrol := patrol ^ CreateHumanWithClass ( 1 , skill ) ;
6291: LD_ADDR_EXP 17
6295: PUSH
6296: LD_EXP 17
6300: PUSH
6301: LD_INT 1
6303: PPUSH
6304: LD_VAR 0 5
6308: PPUSH
6309: CALL 734 0 2
6313: ADD
6314: ST_TO_ADDR
// PlaceUnitArea ( patrol [ i ] , am_west_spawn , false ) ;
6315: LD_EXP 17
6319: PUSH
6320: LD_VAR 0 2
6324: ARRAY
6325: PPUSH
6326: LD_INT 3
6328: PPUSH
6329: LD_INT 0
6331: PPUSH
6332: CALL_OW 49
// end ;
6336: GO 6288
6338: POP
6339: POP
// game_started := true ;
6340: LD_ADDR_EXP 10
6344: PUSH
6345: LD_INT 1
6347: ST_TO_ADDR
// ComConstruct ( am_fac , us_medium_tracked , engine_solar , control_remote , us_crane ) ;
6348: LD_INT 26
6350: PPUSH
6351: LD_INT 3
6353: PPUSH
6354: LD_INT 2
6356: PPUSH
6357: LD_INT 2
6359: PPUSH
6360: LD_INT 13
6362: PPUSH
6363: CALL_OW 125
// while ( contact_am = false ) do
6367: LD_EXP 16
6371: PUSH
6372: LD_INT 0
6374: EQUAL
6375: IFFALSE 6386
// begin Wait ( 0 0$01 ) ;
6377: LD_INT 35
6379: PPUSH
6380: CALL_OW 67
// end ;
6384: GO 6367
// Wait ( [ 4 4$00 , 3 3$00 , 2 2$30 ] [ dif ] ) ;
6386: LD_INT 8400
6388: PUSH
6389: LD_INT 6300
6391: PUSH
6392: LD_INT 5250
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: LIST
6399: PUSH
6400: LD_EXP 1
6404: ARRAY
6405: PPUSH
6406: CALL_OW 67
// case dif of 1 :
6410: LD_EXP 1
6414: PUSH
6415: LD_INT 1
6417: DOUBLE
6418: EQUAL
6419: IFTRUE 6423
6421: GO 6598
6423: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_machine_gun , us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 4 ) ] ) ;
6424: LD_INT 26
6426: PPUSH
6427: LD_INT 3
6429: PPUSH
6430: LD_INT 1
6432: PPUSH
6433: LD_INT 2
6435: PPUSH
6436: LD_INT 2
6438: PUSH
6439: LD_INT 4
6441: PUSH
6442: LD_INT 5
6444: PUSH
6445: LD_INT 5
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: LIST
6452: LIST
6453: PUSH
6454: LD_INT 1
6456: PPUSH
6457: LD_INT 4
6459: PPUSH
6460: CALL_OW 12
6464: ARRAY
6465: PPUSH
6466: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6470: LD_INT 26
6472: PPUSH
6473: LD_INT 3
6475: PPUSH
6476: LD_INT 1
6478: PPUSH
6479: LD_INT 2
6481: PPUSH
6482: LD_INT 4
6484: PUSH
6485: LD_INT 5
6487: PUSH
6488: LD_INT 5
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: LIST
6495: PUSH
6496: LD_INT 1
6498: PPUSH
6499: LD_INT 3
6501: PPUSH
6502: CALL_OW 12
6506: ARRAY
6507: PPUSH
6508: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6512: LD_INT 26
6514: PPUSH
6515: LD_INT 3
6517: PPUSH
6518: LD_INT 1
6520: PPUSH
6521: LD_INT 2
6523: PPUSH
6524: LD_INT 4
6526: PUSH
6527: LD_INT 5
6529: PUSH
6530: LD_INT 5
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: LIST
6537: PUSH
6538: LD_INT 1
6540: PPUSH
6541: LD_INT 3
6543: PPUSH
6544: CALL_OW 12
6548: ARRAY
6549: PPUSH
6550: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6554: LD_INT 26
6556: PPUSH
6557: LD_INT 3
6559: PPUSH
6560: LD_INT 1
6562: PPUSH
6563: LD_INT 2
6565: PPUSH
6566: LD_INT 4
6568: PUSH
6569: LD_INT 3
6571: PUSH
6572: LD_INT 5
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: LIST
6579: PUSH
6580: LD_INT 1
6582: PPUSH
6583: LD_INT 3
6585: PPUSH
6586: CALL_OW 12
6590: ARRAY
6591: PPUSH
6592: CALL_OW 185
// end ; 2 :
6596: GO 7125
6598: LD_INT 2
6600: DOUBLE
6601: EQUAL
6602: IFTRUE 6606
6604: GO 6819
6606: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6607: LD_INT 26
6609: PPUSH
6610: LD_INT 3
6612: PPUSH
6613: LD_INT 1
6615: PPUSH
6616: LD_INT 2
6618: PPUSH
6619: LD_INT 4
6621: PUSH
6622: LD_INT 5
6624: PUSH
6625: LD_INT 5
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: LIST
6632: PUSH
6633: LD_INT 1
6635: PPUSH
6636: LD_INT 3
6638: PPUSH
6639: CALL_OW 12
6643: ARRAY
6644: PPUSH
6645: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6649: LD_INT 26
6651: PPUSH
6652: LD_INT 3
6654: PPUSH
6655: LD_INT 1
6657: PPUSH
6658: LD_INT 2
6660: PPUSH
6661: LD_INT 4
6663: PUSH
6664: LD_INT 5
6666: PUSH
6667: LD_INT 5
6669: PUSH
6670: EMPTY
6671: LIST
6672: LIST
6673: LIST
6674: PUSH
6675: LD_INT 1
6677: PPUSH
6678: LD_INT 3
6680: PPUSH
6681: CALL_OW 12
6685: ARRAY
6686: PPUSH
6687: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6691: LD_INT 26
6693: PPUSH
6694: LD_INT 3
6696: PPUSH
6697: LD_INT 1
6699: PPUSH
6700: LD_INT 2
6702: PPUSH
6703: LD_INT 4
6705: PUSH
6706: LD_INT 3
6708: PUSH
6709: LD_INT 5
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: LIST
6716: PUSH
6717: LD_INT 1
6719: PPUSH
6720: LD_INT 3
6722: PPUSH
6723: CALL_OW 12
6727: ARRAY
6728: PPUSH
6729: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6733: LD_INT 26
6735: PPUSH
6736: LD_INT 4
6738: PPUSH
6739: LD_INT 1
6741: PPUSH
6742: LD_INT 2
6744: PPUSH
6745: LD_INT 4
6747: PUSH
6748: LD_INT 5
6750: PUSH
6751: LD_INT 6
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 1
6761: PPUSH
6762: LD_INT 3
6764: PPUSH
6765: CALL_OW 12
6769: ARRAY
6770: PPUSH
6771: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6775: LD_INT 26
6777: PPUSH
6778: LD_INT 4
6780: PPUSH
6781: LD_INT 1
6783: PPUSH
6784: LD_INT 2
6786: PPUSH
6787: LD_INT 4
6789: PUSH
6790: LD_INT 5
6792: PUSH
6793: LD_INT 6
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: LIST
6800: PUSH
6801: LD_INT 1
6803: PPUSH
6804: LD_INT 3
6806: PPUSH
6807: CALL_OW 12
6811: ARRAY
6812: PPUSH
6813: CALL_OW 185
// end ; 3 :
6817: GO 7125
6819: LD_INT 3
6821: DOUBLE
6822: EQUAL
6823: IFTRUE 6827
6825: GO 7124
6827: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6828: LD_INT 26
6830: PPUSH
6831: LD_INT 3
6833: PPUSH
6834: LD_INT 1
6836: PPUSH
6837: LD_INT 2
6839: PPUSH
6840: LD_INT 4
6842: PUSH
6843: LD_INT 5
6845: PUSH
6846: LD_INT 5
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: LIST
6853: PUSH
6854: LD_INT 1
6856: PPUSH
6857: LD_INT 3
6859: PPUSH
6860: CALL_OW 12
6864: ARRAY
6865: PPUSH
6866: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6870: LD_INT 26
6872: PPUSH
6873: LD_INT 3
6875: PPUSH
6876: LD_INT 1
6878: PPUSH
6879: LD_INT 2
6881: PPUSH
6882: LD_INT 4
6884: PUSH
6885: LD_INT 5
6887: PUSH
6888: LD_INT 5
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: LIST
6895: PUSH
6896: LD_INT 1
6898: PPUSH
6899: LD_INT 3
6901: PPUSH
6902: CALL_OW 12
6906: ARRAY
6907: PPUSH
6908: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6912: LD_INT 26
6914: PPUSH
6915: LD_INT 3
6917: PPUSH
6918: LD_INT 1
6920: PPUSH
6921: LD_INT 2
6923: PPUSH
6924: LD_INT 4
6926: PUSH
6927: LD_INT 5
6929: PUSH
6930: LD_INT 5
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: LIST
6937: PUSH
6938: LD_INT 1
6940: PPUSH
6941: LD_INT 3
6943: PPUSH
6944: CALL_OW 12
6948: ARRAY
6949: PPUSH
6950: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6954: LD_INT 26
6956: PPUSH
6957: LD_INT 3
6959: PPUSH
6960: LD_INT 1
6962: PPUSH
6963: LD_INT 2
6965: PPUSH
6966: LD_INT 4
6968: PUSH
6969: LD_INT 5
6971: PUSH
6972: LD_INT 5
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: LIST
6979: PUSH
6980: LD_INT 1
6982: PPUSH
6983: LD_INT 3
6985: PPUSH
6986: CALL_OW 12
6990: ARRAY
6991: PPUSH
6992: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6996: LD_INT 26
6998: PPUSH
6999: LD_INT 4
7001: PPUSH
7002: LD_INT 1
7004: PPUSH
7005: LD_INT 2
7007: PPUSH
7008: LD_INT 4
7010: PUSH
7011: LD_INT 5
7013: PUSH
7014: LD_INT 6
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: LIST
7021: PUSH
7022: LD_INT 1
7024: PPUSH
7025: LD_INT 3
7027: PPUSH
7028: CALL_OW 12
7032: ARRAY
7033: PPUSH
7034: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7038: LD_INT 26
7040: PPUSH
7041: LD_INT 4
7043: PPUSH
7044: LD_INT 1
7046: PPUSH
7047: LD_INT 2
7049: PPUSH
7050: LD_INT 4
7052: PUSH
7053: LD_INT 5
7055: PUSH
7056: LD_INT 6
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: LIST
7063: PUSH
7064: LD_INT 1
7066: PPUSH
7067: LD_INT 3
7069: PPUSH
7070: CALL_OW 12
7074: ARRAY
7075: PPUSH
7076: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7080: LD_INT 26
7082: PPUSH
7083: LD_INT 4
7085: PPUSH
7086: LD_INT 1
7088: PPUSH
7089: LD_INT 2
7091: PPUSH
7092: LD_INT 4
7094: PUSH
7095: LD_INT 5
7097: PUSH
7098: LD_INT 6
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: LIST
7105: PUSH
7106: LD_INT 1
7108: PPUSH
7109: LD_INT 3
7111: PPUSH
7112: CALL_OW 12
7116: ARRAY
7117: PPUSH
7118: CALL_OW 185
// end ; end ;
7122: GO 7125
7124: POP
// end ;
7125: LD_VAR 0 1
7129: RET
// every 0 0$01 do var i , filter ;
7130: GO 7132
7132: DISABLE
7133: LD_INT 0
7135: PPUSH
7136: PPUSH
// begin enable ;
7137: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
7138: LD_INT 22
7140: PUSH
7141: LD_INT 1
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PUSH
7148: LD_INT 25
7150: PUSH
7151: LD_INT 4
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PPUSH
7162: CALL_OW 69
7166: PUSH
7167: LD_INT 0
7169: GREATER
7170: IFFALSE 7179
// RaiseSailEvent ( 3 ) ;
7172: LD_INT 3
7174: PPUSH
7175: CALL_OW 427
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 0 then
7179: LD_INT 22
7181: PUSH
7182: LD_INT 1
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 21
7191: PUSH
7192: LD_INT 3
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: LD_INT 3
7201: PUSH
7202: LD_INT 24
7204: PUSH
7205: LD_INT 1000
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: LIST
7220: PPUSH
7221: CALL_OW 69
7225: PUSH
7226: LD_INT 0
7228: GREATER
7229: IFFALSE 7240
// RaiseSailEvent ( 1 ) else
7231: LD_INT 1
7233: PPUSH
7234: CALL_OW 427
7238: GO 7247
// RaiseSailEvent ( 2 ) ;
7240: LD_INT 2
7242: PPUSH
7243: CALL_OW 427
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) > 0 then
7247: LD_INT 22
7249: PUSH
7250: LD_INT 1
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PUSH
7257: LD_INT 30
7259: PUSH
7260: LD_INT 5
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: PPUSH
7271: CALL_OW 69
7275: PUSH
7276: LD_INT 0
7278: GREATER
7279: IFFALSE 7288
// RaiseSailEvent ( 4 ) ;
7281: LD_INT 4
7283: PPUSH
7284: CALL_OW 427
// if gamma_towers > 0 then
7288: LD_EXP 18
7292: PUSH
7293: LD_INT 0
7295: GREATER
7296: IFFALSE 7305
// RaiseSailEvent ( 5 ) ;
7298: LD_INT 5
7300: PPUSH
7301: CALL_OW 427
// end ;
7305: PPOPN 2
7307: END
// export new_veh ; every 9 9$00 do var chassis , weapon ;
7308: GO 7310
7310: DISABLE
7311: LD_INT 0
7313: PPUSH
7314: PPUSH
// begin enable ;
7315: ENABLE
// if new_veh > 0 then
7316: LD_EXP 19
7320: PUSH
7321: LD_INT 0
7323: GREATER
7324: IFFALSE 7511
// while ( new_veh > 0 ) do
7326: LD_EXP 19
7330: PUSH
7331: LD_INT 0
7333: GREATER
7334: IFFALSE 7511
// begin Wait ( 0 0$01 ) ;
7336: LD_INT 35
7338: PPUSH
7339: CALL_OW 67
// if BuildingStatus ( am_fac ) = bs_idle then
7343: LD_INT 26
7345: PPUSH
7346: CALL_OW 461
7350: PUSH
7351: LD_INT 2
7353: EQUAL
7354: IFFALSE 7509
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ Rand ( 1 , 4 ) ] ;
7356: LD_ADDR_VAR 0 1
7360: PUSH
7361: LD_INT 2
7363: PUSH
7364: LD_INT 3
7366: PUSH
7367: LD_INT 3
7369: PUSH
7370: LD_INT 4
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: PUSH
7379: LD_INT 1
7381: PPUSH
7382: LD_INT 4
7384: PPUSH
7385: CALL_OW 12
7389: ARRAY
7390: ST_TO_ADDR
// if chassis in [ us_medium_wheeled , us_medium_tracked ] then
7391: LD_VAR 0 1
7395: PUSH
7396: LD_INT 2
7398: PUSH
7399: LD_INT 3
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: IN
7406: IFFALSE 7441
// weapon := [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ Rand ( 1 , 3 ) ] else
7408: LD_ADDR_VAR 0 2
7412: PUSH
7413: LD_INT 4
7415: PUSH
7416: LD_INT 5
7418: PUSH
7419: LD_INT 7
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: LIST
7426: PUSH
7427: LD_INT 1
7429: PPUSH
7430: LD_INT 3
7432: PPUSH
7433: CALL_OW 12
7437: ARRAY
7438: ST_TO_ADDR
7439: GO 7472
// weapon := [ us_double_gun , us_rocket_launcher , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ;
7441: LD_ADDR_VAR 0 2
7445: PUSH
7446: LD_INT 5
7448: PUSH
7449: LD_INT 7
7451: PUSH
7452: LD_INT 6
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: LIST
7459: PUSH
7460: LD_INT 1
7462: PPUSH
7463: LD_INT 3
7465: PPUSH
7466: CALL_OW 12
7470: ARRAY
7471: ST_TO_ADDR
// ComConstruct ( am_fac , chassis , engine_combustion , control_remote , weapon ) ;
7472: LD_INT 26
7474: PPUSH
7475: LD_VAR 0 1
7479: PPUSH
7480: LD_INT 1
7482: PPUSH
7483: LD_INT 2
7485: PPUSH
7486: LD_VAR 0 2
7490: PPUSH
7491: CALL_OW 125
// new_veh := new_veh - 1 ;
7495: LD_ADDR_EXP 19
7499: PUSH
7500: LD_EXP 19
7504: PUSH
7505: LD_INT 1
7507: MINUS
7508: ST_TO_ADDR
// end ; end ;
7509: GO 7326
// end ;
7511: PPOPN 2
7513: END
// every 0 0$01 do var v , filter , am_cmeh ;
7514: GO 7516
7516: DISABLE
7517: LD_INT 0
7519: PPUSH
7520: PPUSH
7521: PPUSH
// begin enable ;
7522: ENABLE
// am_cmeh := UnitsInside ( am_ct ) ;
7523: LD_ADDR_VAR 0 3
7527: PUSH
7528: LD_INT 56
7530: PPUSH
7531: CALL_OW 313
7535: ST_TO_ADDR
// filter = FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] ] ] ) ;
7536: LD_ADDR_VAR 0 2
7540: PUSH
7541: LD_INT 22
7543: PUSH
7544: LD_INT 1
7546: PUSH
7547: EMPTY
7548: LIST
7549: LIST
7550: PUSH
7551: LD_INT 33
7553: PUSH
7554: LD_INT 2
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: PUSH
7561: LD_INT 50
7563: PUSH
7564: EMPTY
7565: LIST
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: LIST
7571: PUSH
7572: EMPTY
7573: LIST
7574: PPUSH
7575: CALL_OW 69
7579: ST_TO_ADDR
// if filter > 0 then
7580: LD_VAR 0 2
7584: PUSH
7585: LD_INT 0
7587: GREATER
7588: IFFALSE 7656
// begin for v in filter do
7590: LD_ADDR_VAR 0 1
7594: PUSH
7595: LD_VAR 0 2
7599: PUSH
7600: FOR_IN
7601: IFFALSE 7654
// begin if not IsControledBy ( v ) and IsOk ( v ) then
7603: LD_VAR 0 1
7607: PPUSH
7608: CALL_OW 312
7612: NOT
7613: PUSH
7614: LD_VAR 0 1
7618: PPUSH
7619: CALL_OW 302
7623: AND
7624: IFFALSE 7652
// ComLinkTo ( v , am_cmeh [ Rand ( 1 , 3 ) ] ) ;
7626: LD_VAR 0 1
7630: PPUSH
7631: LD_VAR 0 3
7635: PUSH
7636: LD_INT 1
7638: PPUSH
7639: LD_INT 3
7641: PPUSH
7642: CALL_OW 12
7646: ARRAY
7647: PPUSH
7648: CALL_OW 135
// end ;
7652: GO 7600
7654: POP
7655: POP
// end ; end ;
7656: PPOPN 3
7658: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) = [ 4 , 5 , 7 ] [ dif ] and BuildingStatus ( am_fac ) = bs_idle do var i , un , enemy ;
7659: LD_INT 33
7661: PUSH
7662: LD_INT 2
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: PUSH
7669: LD_INT 3
7671: PUSH
7672: LD_INT 34
7674: PUSH
7675: LD_INT 13
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: PPUSH
7690: CALL_OW 69
7694: PUSH
7695: LD_INT 4
7697: PUSH
7698: LD_INT 5
7700: PUSH
7701: LD_INT 7
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: LIST
7708: PUSH
7709: LD_EXP 1
7713: ARRAY
7714: EQUAL
7715: PUSH
7716: LD_INT 26
7718: PPUSH
7719: CALL_OW 461
7723: PUSH
7724: LD_INT 2
7726: EQUAL
7727: AND
7728: IFFALSE 7939
7730: GO 7732
7732: DISABLE
7733: LD_INT 0
7735: PPUSH
7736: PPUSH
7737: PPUSH
// begin enable ;
7738: ENABLE
// if Sikorski_Ar then
7739: LD_EXP 12
7743: IFFALSE 7820
// SForce := FilterAllUnits ( [ [ f_or , [ f_side , 4 ] , [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ] ] ) else
7745: LD_ADDR_EXP 11
7749: PUSH
7750: LD_INT 2
7752: PUSH
7753: LD_INT 22
7755: PUSH
7756: LD_INT 4
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: PUSH
7763: LD_INT 22
7765: PUSH
7766: LD_INT 1
7768: PUSH
7769: EMPTY
7770: LIST
7771: LIST
7772: PUSH
7773: LD_INT 33
7775: PUSH
7776: LD_INT 2
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: PUSH
7783: LD_INT 3
7785: PUSH
7786: LD_INT 34
7788: PUSH
7789: LD_INT 13
7791: PUSH
7792: EMPTY
7793: LIST
7794: LIST
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: PUSH
7800: EMPTY
7801: LIST
7802: LIST
7803: LIST
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: LIST
7809: PUSH
7810: EMPTY
7811: LIST
7812: PPUSH
7813: CALL_OW 69
7817: ST_TO_ADDR
7818: GO 7861
// SForce := FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) ;
7820: LD_ADDR_EXP 11
7824: PUSH
7825: LD_INT 33
7827: PUSH
7828: LD_INT 2
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: PUSH
7835: LD_INT 3
7837: PUSH
7838: LD_INT 34
7840: PUSH
7841: LD_INT 13
7843: PUSH
7844: EMPTY
7845: LIST
7846: LIST
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: PUSH
7852: EMPTY
7853: LIST
7854: LIST
7855: PPUSH
7856: CALL_OW 69
7860: ST_TO_ADDR
// repeat begin for un in SForce do
7861: LD_ADDR_VAR 0 2
7865: PUSH
7866: LD_EXP 11
7870: PUSH
7871: FOR_IN
7872: IFFALSE 7927
// begin enemy := FilterAllUnits ( [ f_side , 3 ] ) ;
7874: LD_ADDR_VAR 0 3
7878: PUSH
7879: LD_INT 22
7881: PUSH
7882: LD_INT 3
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: PPUSH
7889: CALL_OW 69
7893: ST_TO_ADDR
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
7894: LD_VAR 0 2
7898: PPUSH
7899: LD_VAR 0 3
7903: PPUSH
7904: LD_VAR 0 2
7908: PPUSH
7909: CALL_OW 74
7913: PPUSH
7914: CALL_OW 115
// Wait ( 0 0$01 ) ;
7918: LD_INT 35
7920: PPUSH
7921: CALL_OW 67
// end ;
7925: GO 7871
7927: POP
7928: POP
// end until SForce = 0 ;
7929: LD_EXP 11
7933: PUSH
7934: LD_INT 0
7936: EQUAL
7937: IFFALSE 7861
// end ;
7939: PPOPN 3
7941: END
// export function NewForce ( num ) ; var i , filter , veh , tmp ; begin
7942: LD_INT 0
7944: PPUSH
7945: PPUSH
7946: PPUSH
7947: PPUSH
7948: PPUSH
// tmp := FilterUnitsInArea ( spawnArea , [ ] ) ;
7949: LD_ADDR_VAR 0 6
7953: PUSH
7954: LD_INT 14
7956: PPUSH
7957: EMPTY
7958: PPUSH
7959: CALL_OW 70
7963: ST_TO_ADDR
// if tmp then
7964: LD_VAR 0 6
7968: IFFALSE 8002
// for i in tmp do
7970: LD_ADDR_VAR 0 3
7974: PUSH
7975: LD_VAR 0 6
7979: PUSH
7980: FOR_IN
7981: IFFALSE 8000
// ComMoveXY ( i , 42 , 23 ) ;
7983: LD_VAR 0 3
7987: PPUSH
7988: LD_INT 42
7990: PPUSH
7991: LD_INT 23
7993: PPUSH
7994: CALL_OW 111
7998: GO 7980
8000: POP
8001: POP
// EraseResourceArea ( spawnArea , mat_cans ) ;
8002: LD_INT 14
8004: PPUSH
8005: LD_INT 1
8007: PPUSH
8008: CALL_OW 286
// uc_side := 4 ;
8012: LD_ADDR_OWVAR 20
8016: PUSH
8017: LD_INT 4
8019: ST_TO_ADDR
// uc_nation := 1 ;
8020: LD_ADDR_OWVAR 21
8024: PUSH
8025: LD_INT 1
8027: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
8028: LD_ADDR_OWVAR 37
8032: PUSH
8033: LD_INT 4
8035: ST_TO_ADDR
// vc_control := control_manual ;
8036: LD_ADDR_OWVAR 38
8040: PUSH
8041: LD_INT 1
8043: ST_TO_ADDR
// vc_engine := engine_combustion ;
8044: LD_ADDR_OWVAR 39
8048: PUSH
8049: LD_INT 1
8051: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ dif ] ;
8052: LD_ADDR_OWVAR 40
8056: PUSH
8057: LD_INT 4
8059: PUSH
8060: LD_INT 5
8062: PUSH
8063: LD_INT 7
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: LIST
8070: PUSH
8071: LD_EXP 1
8075: ARRAY
8076: ST_TO_ADDR
// veh := CreateVehicle ;
8077: LD_ADDR_VAR 0 5
8081: PUSH
8082: CALL_OW 45
8086: ST_TO_ADDR
// PlaceUnitArea ( veh , am_main_spawn , false ) ;
8087: LD_VAR 0 5
8091: PPUSH
8092: LD_INT 2
8094: PPUSH
8095: LD_INT 0
8097: PPUSH
8098: CALL_OW 49
// PlaceHumanInUnit ( sikorski , veh ) ;
8102: LD_EXP 9
8106: PPUSH
8107: LD_VAR 0 5
8111: PPUSH
8112: CALL_OW 52
// SetMark ( veh , 1 ) ;
8116: LD_VAR 0 5
8120: PPUSH
8121: LD_INT 1
8123: PPUSH
8124: CALL_OW 242
// while ( num > 0 ) do
8128: LD_VAR 0 1
8132: PUSH
8133: LD_INT 0
8135: GREATER
8136: IFFALSE 8303
// begin CreateVehicleWithDriver ( [ us_medium_tracked , us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ Rand ( dif , 4 ) ] , engine_combustion , [ us_gatling_gun , us_double_gun , us_double_gun , us_rocket_launcher ] [ Rand ( 1 , dif + 1 ) ] , am_sik , 2 , [ 5 , 6 , 7 ] [ dif ] ) ;
8138: LD_INT 3
8140: PUSH
8141: LD_INT 3
8143: PUSH
8144: LD_INT 3
8146: PUSH
8147: LD_INT 4
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: PUSH
8156: LD_EXP 1
8160: PPUSH
8161: LD_INT 4
8163: PPUSH
8164: CALL_OW 12
8168: ARRAY
8169: PPUSH
8170: LD_INT 1
8172: PPUSH
8173: LD_INT 4
8175: PUSH
8176: LD_INT 5
8178: PUSH
8179: LD_INT 5
8181: PUSH
8182: LD_INT 7
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: PUSH
8191: LD_INT 1
8193: PPUSH
8194: LD_EXP 1
8198: PUSH
8199: LD_INT 1
8201: PLUS
8202: PPUSH
8203: CALL_OW 12
8207: ARRAY
8208: PPUSH
8209: LD_INT 11
8211: PPUSH
8212: LD_INT 2
8214: PPUSH
8215: LD_INT 5
8217: PUSH
8218: LD_INT 6
8220: PUSH
8221: LD_INT 7
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: LIST
8228: PUSH
8229: LD_EXP 1
8233: ARRAY
8234: PPUSH
8235: CALL 1297 0 6
// filter := FilterAllUnits ( [ f_side , 4 ] ) ;
8239: LD_ADDR_VAR 0 4
8243: PUSH
8244: LD_INT 22
8246: PUSH
8247: LD_INT 4
8249: PUSH
8250: EMPTY
8251: LIST
8252: LIST
8253: PPUSH
8254: CALL_OW 69
8258: ST_TO_ADDR
// ComMoveXY ( filter [ filter ] , 36 , 18 ) ;
8259: LD_VAR 0 4
8263: PUSH
8264: LD_VAR 0 4
8268: ARRAY
8269: PPUSH
8270: LD_INT 36
8272: PPUSH
8273: LD_INT 18
8275: PPUSH
8276: CALL_OW 111
// Wait ( 0 0$02 ) ;
8280: LD_INT 70
8282: PPUSH
8283: CALL_OW 67
// num := num - 1 ;
8287: LD_ADDR_VAR 0 1
8291: PUSH
8292: LD_VAR 0 1
8296: PUSH
8297: LD_INT 1
8299: MINUS
8300: ST_TO_ADDR
// end ;
8301: GO 8128
// end ;
8303: LD_VAR 0 2
8307: RET
// every 0 0$03 trigger patrol > 0 do var i ;
8308: LD_EXP 17
8312: PUSH
8313: LD_INT 0
8315: GREATER
8316: IFFALSE 8585
8318: GO 8320
8320: DISABLE
8321: LD_INT 0
8323: PPUSH
// begin enable ;
8324: ENABLE
// for i = 1 to patrol do
8325: LD_ADDR_VAR 0 1
8329: PUSH
8330: DOUBLE
8331: LD_INT 1
8333: DEC
8334: ST_TO_ADDR
8335: LD_EXP 17
8339: PUSH
8340: FOR_TO
8341: IFFALSE 8583
// begin if patrol [ i ] and IsLive ( patrol [ i ] ) and not HasTask ( patrol [ i ] ) then
8343: LD_EXP 17
8347: PUSH
8348: LD_VAR 0 1
8352: ARRAY
8353: PUSH
8354: LD_EXP 17
8358: PUSH
8359: LD_VAR 0 1
8363: ARRAY
8364: PPUSH
8365: CALL_OW 300
8369: AND
8370: PUSH
8371: LD_EXP 17
8375: PUSH
8376: LD_VAR 0 1
8380: ARRAY
8381: PPUSH
8382: CALL_OW 314
8386: NOT
8387: AND
8388: IFFALSE 8538
// case i of 1 :
8390: LD_VAR 0 1
8394: PUSH
8395: LD_INT 1
8397: DOUBLE
8398: EQUAL
8399: IFTRUE 8403
8401: GO 8466
8403: POP
// begin ComMoveXY ( patrol [ i ] , 53 , 91 ) ;
8404: LD_EXP 17
8408: PUSH
8409: LD_VAR 0 1
8413: ARRAY
8414: PPUSH
8415: LD_INT 53
8417: PPUSH
8418: LD_INT 91
8420: PPUSH
8421: CALL_OW 111
// AddComWait ( patrol [ i ] , 0 0$07 ) ;
8425: LD_EXP 17
8429: PUSH
8430: LD_VAR 0 1
8434: ARRAY
8435: PPUSH
8436: LD_INT 245
8438: PPUSH
8439: CALL_OW 202
// AddComMoveXY ( patrol [ i ] , 24 , 26 ) ;
8443: LD_EXP 17
8447: PUSH
8448: LD_VAR 0 1
8452: ARRAY
8453: PPUSH
8454: LD_INT 24
8456: PPUSH
8457: LD_INT 26
8459: PPUSH
8460: CALL_OW 171
// end ; 2 :
8464: GO 8538
8466: LD_INT 2
8468: DOUBLE
8469: EQUAL
8470: IFTRUE 8474
8472: GO 8537
8474: POP
// begin ComMoveXY ( patrol [ i ] , 83 , 57 ) ;
8475: LD_EXP 17
8479: PUSH
8480: LD_VAR 0 1
8484: ARRAY
8485: PPUSH
8486: LD_INT 83
8488: PPUSH
8489: LD_INT 57
8491: PPUSH
8492: CALL_OW 111
// AddComWait ( patrol [ i ] , 0 0$07 ) ;
8496: LD_EXP 17
8500: PUSH
8501: LD_VAR 0 1
8505: ARRAY
8506: PPUSH
8507: LD_INT 245
8509: PPUSH
8510: CALL_OW 202
// AddComMoveXY ( patrol [ i ] , 47 , 53 ) ;
8514: LD_EXP 17
8518: PUSH
8519: LD_VAR 0 1
8523: ARRAY
8524: PPUSH
8525: LD_INT 47
8527: PPUSH
8528: LD_INT 53
8530: PPUSH
8531: CALL_OW 171
// end ; end ;
8535: GO 8538
8537: POP
// if GetLives ( patrol [ i ] ) < 1000 then
8538: LD_EXP 17
8542: PUSH
8543: LD_VAR 0 1
8547: ARRAY
8548: PPUSH
8549: CALL_OW 256
8553: PUSH
8554: LD_INT 1000
8556: LESS
8557: IFFALSE 8581
// patrol := patrol diff patrol [ i ] ;
8559: LD_ADDR_EXP 17
8563: PUSH
8564: LD_EXP 17
8568: PUSH
8569: LD_EXP 17
8573: PUSH
8574: LD_VAR 0 1
8578: ARRAY
8579: DIFF
8580: ST_TO_ADDR
// end ;
8581: GO 8340
8583: POP
8584: POP
// end ;
8585: PPOPN 1
8587: END
// every 0 0$10 do
8588: GO 8590
8590: DISABLE
// begin Wait ( [ 20 20$00 , 18 18$00 , 16 16$00 ] [ dif ] ) ;
8591: LD_INT 42000
8593: PUSH
8594: LD_INT 37800
8596: PUSH
8597: LD_INT 33600
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: LIST
8604: PUSH
8605: LD_EXP 1
8609: ARRAY
8610: PPUSH
8611: CALL_OW 67
// if not contact_am then
8615: LD_EXP 16
8619: NOT
8620: IFFALSE 8630
// contact_am := true ;
8622: LD_ADDR_EXP 16
8626: PUSH
8627: LD_INT 1
8629: ST_TO_ADDR
// end ; end_of_file
8630: END
// export event_rocket , event_comp , comp_tested , sikorski_run ; export function Action ; begin
8631: LD_INT 0
8633: PPUSH
// comp_tested := false ;
8634: LD_ADDR_EXP 22
8638: PUSH
8639: LD_INT 0
8641: ST_TO_ADDR
// sikorski_run := false ;
8642: LD_ADDR_EXP 23
8646: PUSH
8647: LD_INT 0
8649: ST_TO_ADDR
// InGameOn ;
8650: CALL_OW 8
// CenterNowOnXY ( 5 , 4 ) ;
8654: LD_INT 5
8656: PPUSH
8657: LD_INT 4
8659: PPUSH
8660: CALL_OW 86
// wait ( 0 0$2 ) ;
8664: LD_INT 70
8666: PPUSH
8667: CALL_OW 67
// CenterOnUnits ( commander ) ;
8671: LD_EXP 3
8675: PPUSH
8676: CALL_OW 85
// wait ( 0 0$01 ) ;
8680: LD_INT 35
8682: PPUSH
8683: CALL_OW 67
// SayRadio ( popov , Dpop1 ) ;
8687: LD_EXP 2
8691: PPUSH
8692: LD_STRING Dpop1
8694: PPUSH
8695: CALL_OW 94
// Say ( commander , Dcomm1 ) ;
8699: LD_EXP 3
8703: PPUSH
8704: LD_STRING Dcomm1
8706: PPUSH
8707: CALL_OW 88
// SayRadio ( popov , Dpop2 ) ;
8711: LD_EXP 2
8715: PPUSH
8716: LD_STRING Dpop2
8718: PPUSH
8719: CALL_OW 94
// Say ( commander , Dcomm2 ) ;
8723: LD_EXP 3
8727: PPUSH
8728: LD_STRING Dcomm2
8730: PPUSH
8731: CALL_OW 88
// InGameOff ;
8735: CALL_OW 9
// ChangeMissionObjectives ( T1 ) ;
8739: LD_STRING T1
8741: PPUSH
8742: CALL_OW 337
// end ;
8746: LD_VAR 0 1
8750: RET
// every 0 0$01 trigger timer > 2 2$01 do
8751: LD_EXP 24
8755: PUSH
8756: LD_INT 4235
8758: GREATER
8759: IFFALSE 8776
8761: GO 8763
8763: DISABLE
// begin SayRadio ( kapral , DKap1 ) ;
8764: LD_EXP 5
8768: PPUSH
8769: LD_STRING DKap1
8771: PPUSH
8772: CALL_OW 94
// end ;
8776: END
// every 0 0$01 trigger timer > [ 22 22$00 , 25 25$00 , 30 30$00 ] [ dif ] do var i ;
8777: LD_EXP 24
8781: PUSH
8782: LD_INT 46200
8784: PUSH
8785: LD_INT 52500
8787: PUSH
8788: LD_INT 63000
8790: PUSH
8791: EMPTY
8792: LIST
8793: LIST
8794: LIST
8795: PUSH
8796: LD_EXP 1
8800: ARRAY
8801: GREATER
8802: IFFALSE 9169
8804: GO 8806
8806: DISABLE
8807: LD_INT 0
8809: PPUSH
// begin SayRadio ( kapral , DKap2 ) ;
8810: LD_EXP 5
8814: PPUSH
8815: LD_STRING DKap2
8817: PPUSH
8818: CALL_OW 94
// Wait ( 0 0$0.3 ) ;
8822: LD_INT 10
8824: PPUSH
8825: CALL_OW 67
// Say ( commander , Dcommk ) ;
8829: LD_EXP 3
8833: PPUSH
8834: LD_STRING Dcommk
8836: PPUSH
8837: CALL_OW 88
// Wait ( 0 0$44 ) ;
8841: LD_INT 1540
8843: PPUSH
8844: CALL_OW 67
// PlaceUnitArea ( kapral , am_west_spawn , false ) ;
8848: LD_EXP 5
8852: PPUSH
8853: LD_INT 3
8855: PPUSH
8856: LD_INT 0
8858: PPUSH
8859: CALL_OW 49
// CenterNowOnUnits ( kapral ) ;
8863: LD_EXP 5
8867: PPUSH
8868: CALL_OW 87
// Wait ( 0 0$10 ) ;
8872: LD_INT 350
8874: PPUSH
8875: CALL_OW 67
// NewForce ( [ 6 , 7 , 8 ] [ dif ] ) ;
8879: LD_INT 6
8881: PUSH
8882: LD_INT 7
8884: PUSH
8885: LD_INT 8
8887: PUSH
8888: EMPTY
8889: LIST
8890: LIST
8891: LIST
8892: PUSH
8893: LD_EXP 1
8897: ARRAY
8898: PPUSH
8899: CALL 7942 0 1
// Wait ( 2 2$00 ) ;
8903: LD_INT 4200
8905: PPUSH
8906: CALL_OW 67
// while ( FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) < 3 ) do
8910: LD_INT 33
8912: PUSH
8913: LD_INT 2
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PUSH
8920: LD_INT 3
8922: PUSH
8923: LD_INT 34
8925: PUSH
8926: LD_INT 13
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: PPUSH
8941: CALL_OW 69
8945: PUSH
8946: LD_INT 3
8948: LESS
8949: IFFALSE 8960
// Wait ( 0 0$01 ) ;
8951: LD_INT 35
8953: PPUSH
8954: CALL_OW 67
8958: GO 8910
// uc_side := 4 ;
8960: LD_ADDR_OWVAR 20
8964: PUSH
8965: LD_INT 4
8967: ST_TO_ADDR
// uc_nation := 1 ;
8968: LD_ADDR_OWVAR 21
8972: PUSH
8973: LD_INT 1
8975: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ dif ] do
8976: LD_ADDR_VAR 0 1
8980: PUSH
8981: DOUBLE
8982: LD_INT 1
8984: DEC
8985: ST_TO_ADDR
8986: LD_INT 4
8988: PUSH
8989: LD_INT 5
8991: PUSH
8992: LD_INT 6
8994: PUSH
8995: EMPTY
8996: LIST
8997: LIST
8998: LIST
8999: PUSH
9000: LD_EXP 1
9004: ARRAY
9005: PUSH
9006: FOR_TO
9007: IFFALSE 9049
// PlaceUnitArea ( CreateHumanWithClass ( 1 , [ 5 , 6 , 7 ] [ dif ] ) , am_east_spawn , false ) ;
9009: LD_INT 1
9011: PPUSH
9012: LD_INT 5
9014: PUSH
9015: LD_INT 6
9017: PUSH
9018: LD_INT 7
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: LIST
9025: PUSH
9026: LD_EXP 1
9030: ARRAY
9031: PPUSH
9032: CALL 734 0 2
9036: PPUSH
9037: LD_INT 4
9039: PPUSH
9040: LD_INT 0
9042: PPUSH
9043: CALL_OW 49
9047: GO 9006
9049: POP
9050: POP
// sikorski_ar := true ;
9051: LD_ADDR_EXP 12
9055: PUSH
9056: LD_INT 1
9058: ST_TO_ADDR
// SayRadio ( sikorski , DSik1 ) ;
9059: LD_EXP 9
9063: PPUSH
9064: LD_STRING DSik1
9066: PPUSH
9067: CALL_OW 94
// Wait ( 0 0$30 ) ;
9071: LD_INT 1050
9073: PPUSH
9074: CALL_OW 67
// uc_side := 4 ;
9078: LD_ADDR_OWVAR 20
9082: PUSH
9083: LD_INT 4
9085: ST_TO_ADDR
// uc_nation := 1 ;
9086: LD_ADDR_OWVAR 21
9090: PUSH
9091: LD_INT 1
9093: ST_TO_ADDR
// for i = 1 to [ 3 , 4 , 4 ] [ dif ] do
9094: LD_ADDR_VAR 0 1
9098: PUSH
9099: DOUBLE
9100: LD_INT 1
9102: DEC
9103: ST_TO_ADDR
9104: LD_INT 3
9106: PUSH
9107: LD_INT 4
9109: PUSH
9110: LD_INT 4
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: LIST
9117: PUSH
9118: LD_EXP 1
9122: ARRAY
9123: PUSH
9124: FOR_TO
9125: IFFALSE 9167
// PlaceUnitArea ( CreateHumanWithClass ( 1 , [ 5 , 6 , 7 ] [ dif ] ) , am_south_spawn , false ) ;
9127: LD_INT 1
9129: PPUSH
9130: LD_INT 5
9132: PUSH
9133: LD_INT 6
9135: PUSH
9136: LD_INT 7
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: LIST
9143: PUSH
9144: LD_EXP 1
9148: ARRAY
9149: PPUSH
9150: CALL 734 0 2
9154: PPUSH
9155: LD_INT 13
9157: PPUSH
9158: LD_INT 0
9160: PPUSH
9161: CALL_OW 49
9165: GO 9124
9167: POP
9168: POP
// end ;
9169: PPOPN 1
9171: END
// every 0 0$0.1 trigger GetLives ( sikorski ) < 650 do
9172: LD_EXP 9
9176: PPUSH
9177: CALL_OW 256
9181: PUSH
9182: LD_INT 650
9184: LESS
9185: IFFALSE 9267
9187: GO 9189
9189: DISABLE
// begin Say ( sikorski , DSik2 ) ;
9190: LD_EXP 9
9194: PPUSH
9195: LD_STRING DSik2
9197: PPUSH
9198: CALL_OW 88
// while ( IsLive ( sikorski ) ) do
9202: LD_EXP 9
9206: PPUSH
9207: CALL_OW 300
9211: IFFALSE 9267
// begin ComMoveToArea ( sikorski , am_main_spawn ) ;
9213: LD_EXP 9
9217: PPUSH
9218: LD_INT 2
9220: PPUSH
9221: CALL_OW 113
// Wait ( 0 0$01 ) ;
9225: LD_INT 35
9227: PPUSH
9228: CALL_OW 67
// if IsInArea ( sikorski , am_main_spawn ) then
9232: LD_EXP 9
9236: PPUSH
9237: LD_INT 2
9239: PPUSH
9240: CALL_OW 308
9244: IFFALSE 9265
// begin RemoveUnit ( sikorski ) ;
9246: LD_EXP 9
9250: PPUSH
9251: CALL_OW 64
// break ;
9255: GO 9267
// sikorski_run := true ;
9257: LD_ADDR_EXP 23
9261: PUSH
9262: LD_INT 1
9264: ST_TO_ADDR
// end ; end ;
9265: GO 9202
// end ;
9267: END
// every 0 0$0.1 trigger GetLives ( sikorski ) < 1000 do
9268: LD_EXP 9
9272: PPUSH
9273: CALL_OW 256
9277: PUSH
9278: LD_INT 1000
9280: LESS
9281: IFFALSE 9298
9283: GO 9285
9285: DISABLE
// Say ( sikorski , DSkik3 ) ; end_of_file
9286: LD_EXP 9
9290: PPUSH
9291: LD_STRING DSkik3
9293: PPUSH
9294: CALL_OW 88
9298: END
// every 1 1$45 + 0 0$15 do
9299: GO 9301
9301: DISABLE
// begin enable ;
9302: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
9303: LD_INT 1
9305: PPUSH
9306: LD_INT 5
9308: PPUSH
9309: CALL_OW 12
9313: PPUSH
9314: LD_INT 8
9316: PPUSH
9317: LD_INT 1
9319: PPUSH
9320: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$37 ) ) ;
9324: LD_INT 350
9326: PPUSH
9327: LD_INT 1295
9329: PPUSH
9330: CALL_OW 12
9334: PPUSH
9335: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
9339: LD_INT 1
9341: PPUSH
9342: LD_INT 5
9344: PPUSH
9345: CALL_OW 12
9349: PPUSH
9350: LD_INT 1
9352: PPUSH
9353: CALL_OW 57
// Wait ( Rand ( 0 0$10 , 0 0$30 ) ) ;
9357: LD_INT 350
9359: PPUSH
9360: LD_INT 1050
9362: PPUSH
9363: CALL_OW 12
9367: PPUSH
9368: CALL_OW 67
// if timer <= [ 12 12$00 , 11 11$00 , 10 10$00 ] [ dif ] then
9372: LD_EXP 24
9376: PUSH
9377: LD_INT 25200
9379: PUSH
9380: LD_INT 23100
9382: PUSH
9383: LD_INT 21000
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: LIST
9390: PUSH
9391: LD_EXP 1
9395: ARRAY
9396: LESSEQUAL
9397: IFFALSE 9420
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
9399: LD_INT 1
9401: PPUSH
9402: LD_INT 5
9404: PPUSH
9405: CALL_OW 12
9409: PPUSH
9410: LD_INT 8
9412: PPUSH
9413: LD_INT 1
9415: PPUSH
9416: CALL_OW 55
// end ;
9420: END
// export timer ; every 1 do
9421: GO 9423
9423: DISABLE
// timer := 0 0$00 ;
9424: LD_ADDR_EXP 24
9428: PUSH
9429: LD_INT 0
9431: ST_TO_ADDR
9432: END
// every 0 0$01 do
9433: GO 9435
9435: DISABLE
// begin enable ;
9436: ENABLE
// Display_Strings := [ #tick , timer ] ;
9437: LD_ADDR_OWVAR 47
9441: PUSH
9442: LD_STRING #tick
9444: PUSH
9445: LD_EXP 24
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: ST_TO_ADDR
// timer := timer + 0 0$01 ;
9454: LD_ADDR_EXP 24
9458: PUSH
9459: LD_EXP 24
9463: PUSH
9464: LD_INT 35
9466: PLUS
9467: ST_TO_ADDR
// end ; end_of_file end_of_file
9468: END
// every 0 0$1 do
9469: GO 9471
9471: DISABLE
// begin enable ;
9472: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
9473: LD_STRING updateTimer(
9475: PUSH
9476: LD_OWVAR 1
9480: STR
9481: PUSH
9482: LD_STRING );
9484: STR
9485: PPUSH
9486: CALL_OW 559
// end ;
9490: END
// export function SOS_MapStart ( ) ; begin
9491: LD_INT 0
9493: PPUSH
// if streamModeActive then
9494: LD_EXP 26
9498: IFFALSE 9507
// DefineStreamItems ( true ) ;
9500: LD_INT 1
9502: PPUSH
9503: CALL 11311 0 1
// UpdateLuaVariables ( ) ;
9507: CALL 9524 0 0
// UpdateFactoryWaypoints ( ) ;
9511: CALL 24172 0 0
// UpdateWarehouseGatheringPoints ( ) ;
9515: CALL 24429 0 0
// end ;
9519: LD_VAR 0 1
9523: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
9524: LD_INT 0
9526: PPUSH
// if not globalGameSaveCounter then
9527: LD_EXP 25
9531: NOT
9532: IFFALSE 9543
// ToLua ( setGameSaveCounter(0) ) else
9534: LD_STRING setGameSaveCounter(0)
9536: PPUSH
9537: CALL_OW 559
9541: GO 9575
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
9543: LD_ADDR_EXP 25
9547: PUSH
9548: LD_EXP 25
9552: PPUSH
9553: CALL 68386 0 1
9557: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
9558: LD_STRING setGameSaveCounter(
9560: PUSH
9561: LD_EXP 25
9565: STR
9566: PUSH
9567: LD_STRING )
9569: STR
9570: PPUSH
9571: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
9575: LD_STRING setGameDifficulty(
9577: PUSH
9578: LD_OWVAR 67
9582: STR
9583: PUSH
9584: LD_STRING )
9586: STR
9587: PPUSH
9588: CALL_OW 559
// end ;
9592: LD_VAR 0 1
9596: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9597: LD_INT 0
9599: PPUSH
// if p2 = stream_mode then
9600: LD_VAR 0 2
9604: PUSH
9605: LD_INT 100
9607: EQUAL
9608: IFFALSE 10611
// begin if not StreamModeActive then
9610: LD_EXP 26
9614: NOT
9615: IFFALSE 9625
// StreamModeActive := true ;
9617: LD_ADDR_EXP 26
9621: PUSH
9622: LD_INT 1
9624: ST_TO_ADDR
// if p3 = 0 then
9625: LD_VAR 0 3
9629: PUSH
9630: LD_INT 0
9632: EQUAL
9633: IFFALSE 9639
// InitStreamMode ;
9635: CALL 10847 0 0
// if p3 = 1 then
9639: LD_VAR 0 3
9643: PUSH
9644: LD_INT 1
9646: EQUAL
9647: IFFALSE 9657
// sRocket := true ;
9649: LD_ADDR_EXP 31
9653: PUSH
9654: LD_INT 1
9656: ST_TO_ADDR
// if p3 = 2 then
9657: LD_VAR 0 3
9661: PUSH
9662: LD_INT 2
9664: EQUAL
9665: IFFALSE 9675
// sSpeed := true ;
9667: LD_ADDR_EXP 30
9671: PUSH
9672: LD_INT 1
9674: ST_TO_ADDR
// if p3 = 3 then
9675: LD_VAR 0 3
9679: PUSH
9680: LD_INT 3
9682: EQUAL
9683: IFFALSE 9693
// sEngine := true ;
9685: LD_ADDR_EXP 32
9689: PUSH
9690: LD_INT 1
9692: ST_TO_ADDR
// if p3 = 4 then
9693: LD_VAR 0 3
9697: PUSH
9698: LD_INT 4
9700: EQUAL
9701: IFFALSE 9711
// sSpec := true ;
9703: LD_ADDR_EXP 29
9707: PUSH
9708: LD_INT 1
9710: ST_TO_ADDR
// if p3 = 5 then
9711: LD_VAR 0 3
9715: PUSH
9716: LD_INT 5
9718: EQUAL
9719: IFFALSE 9729
// sLevel := true ;
9721: LD_ADDR_EXP 33
9725: PUSH
9726: LD_INT 1
9728: ST_TO_ADDR
// if p3 = 6 then
9729: LD_VAR 0 3
9733: PUSH
9734: LD_INT 6
9736: EQUAL
9737: IFFALSE 9747
// sArmoury := true ;
9739: LD_ADDR_EXP 34
9743: PUSH
9744: LD_INT 1
9746: ST_TO_ADDR
// if p3 = 7 then
9747: LD_VAR 0 3
9751: PUSH
9752: LD_INT 7
9754: EQUAL
9755: IFFALSE 9765
// sRadar := true ;
9757: LD_ADDR_EXP 35
9761: PUSH
9762: LD_INT 1
9764: ST_TO_ADDR
// if p3 = 8 then
9765: LD_VAR 0 3
9769: PUSH
9770: LD_INT 8
9772: EQUAL
9773: IFFALSE 9783
// sBunker := true ;
9775: LD_ADDR_EXP 36
9779: PUSH
9780: LD_INT 1
9782: ST_TO_ADDR
// if p3 = 9 then
9783: LD_VAR 0 3
9787: PUSH
9788: LD_INT 9
9790: EQUAL
9791: IFFALSE 9801
// sHack := true ;
9793: LD_ADDR_EXP 37
9797: PUSH
9798: LD_INT 1
9800: ST_TO_ADDR
// if p3 = 10 then
9801: LD_VAR 0 3
9805: PUSH
9806: LD_INT 10
9808: EQUAL
9809: IFFALSE 9819
// sFire := true ;
9811: LD_ADDR_EXP 38
9815: PUSH
9816: LD_INT 1
9818: ST_TO_ADDR
// if p3 = 11 then
9819: LD_VAR 0 3
9823: PUSH
9824: LD_INT 11
9826: EQUAL
9827: IFFALSE 9837
// sRefresh := true ;
9829: LD_ADDR_EXP 39
9833: PUSH
9834: LD_INT 1
9836: ST_TO_ADDR
// if p3 = 12 then
9837: LD_VAR 0 3
9841: PUSH
9842: LD_INT 12
9844: EQUAL
9845: IFFALSE 9855
// sExp := true ;
9847: LD_ADDR_EXP 40
9851: PUSH
9852: LD_INT 1
9854: ST_TO_ADDR
// if p3 = 13 then
9855: LD_VAR 0 3
9859: PUSH
9860: LD_INT 13
9862: EQUAL
9863: IFFALSE 9873
// sDepot := true ;
9865: LD_ADDR_EXP 41
9869: PUSH
9870: LD_INT 1
9872: ST_TO_ADDR
// if p3 = 14 then
9873: LD_VAR 0 3
9877: PUSH
9878: LD_INT 14
9880: EQUAL
9881: IFFALSE 9891
// sFlag := true ;
9883: LD_ADDR_EXP 42
9887: PUSH
9888: LD_INT 1
9890: ST_TO_ADDR
// if p3 = 15 then
9891: LD_VAR 0 3
9895: PUSH
9896: LD_INT 15
9898: EQUAL
9899: IFFALSE 9909
// sKamikadze := true ;
9901: LD_ADDR_EXP 50
9905: PUSH
9906: LD_INT 1
9908: ST_TO_ADDR
// if p3 = 16 then
9909: LD_VAR 0 3
9913: PUSH
9914: LD_INT 16
9916: EQUAL
9917: IFFALSE 9927
// sTroll := true ;
9919: LD_ADDR_EXP 51
9923: PUSH
9924: LD_INT 1
9926: ST_TO_ADDR
// if p3 = 17 then
9927: LD_VAR 0 3
9931: PUSH
9932: LD_INT 17
9934: EQUAL
9935: IFFALSE 9945
// sSlow := true ;
9937: LD_ADDR_EXP 52
9941: PUSH
9942: LD_INT 1
9944: ST_TO_ADDR
// if p3 = 18 then
9945: LD_VAR 0 3
9949: PUSH
9950: LD_INT 18
9952: EQUAL
9953: IFFALSE 9963
// sLack := true ;
9955: LD_ADDR_EXP 53
9959: PUSH
9960: LD_INT 1
9962: ST_TO_ADDR
// if p3 = 19 then
9963: LD_VAR 0 3
9967: PUSH
9968: LD_INT 19
9970: EQUAL
9971: IFFALSE 9981
// sTank := true ;
9973: LD_ADDR_EXP 55
9977: PUSH
9978: LD_INT 1
9980: ST_TO_ADDR
// if p3 = 20 then
9981: LD_VAR 0 3
9985: PUSH
9986: LD_INT 20
9988: EQUAL
9989: IFFALSE 9999
// sRemote := true ;
9991: LD_ADDR_EXP 56
9995: PUSH
9996: LD_INT 1
9998: ST_TO_ADDR
// if p3 = 21 then
9999: LD_VAR 0 3
10003: PUSH
10004: LD_INT 21
10006: EQUAL
10007: IFFALSE 10017
// sPowell := true ;
10009: LD_ADDR_EXP 57
10013: PUSH
10014: LD_INT 1
10016: ST_TO_ADDR
// if p3 = 22 then
10017: LD_VAR 0 3
10021: PUSH
10022: LD_INT 22
10024: EQUAL
10025: IFFALSE 10035
// sTeleport := true ;
10027: LD_ADDR_EXP 60
10031: PUSH
10032: LD_INT 1
10034: ST_TO_ADDR
// if p3 = 23 then
10035: LD_VAR 0 3
10039: PUSH
10040: LD_INT 23
10042: EQUAL
10043: IFFALSE 10053
// sOilTower := true ;
10045: LD_ADDR_EXP 62
10049: PUSH
10050: LD_INT 1
10052: ST_TO_ADDR
// if p3 = 24 then
10053: LD_VAR 0 3
10057: PUSH
10058: LD_INT 24
10060: EQUAL
10061: IFFALSE 10071
// sShovel := true ;
10063: LD_ADDR_EXP 63
10067: PUSH
10068: LD_INT 1
10070: ST_TO_ADDR
// if p3 = 25 then
10071: LD_VAR 0 3
10075: PUSH
10076: LD_INT 25
10078: EQUAL
10079: IFFALSE 10089
// sSheik := true ;
10081: LD_ADDR_EXP 64
10085: PUSH
10086: LD_INT 1
10088: ST_TO_ADDR
// if p3 = 26 then
10089: LD_VAR 0 3
10093: PUSH
10094: LD_INT 26
10096: EQUAL
10097: IFFALSE 10107
// sEarthquake := true ;
10099: LD_ADDR_EXP 66
10103: PUSH
10104: LD_INT 1
10106: ST_TO_ADDR
// if p3 = 27 then
10107: LD_VAR 0 3
10111: PUSH
10112: LD_INT 27
10114: EQUAL
10115: IFFALSE 10125
// sAI := true ;
10117: LD_ADDR_EXP 67
10121: PUSH
10122: LD_INT 1
10124: ST_TO_ADDR
// if p3 = 28 then
10125: LD_VAR 0 3
10129: PUSH
10130: LD_INT 28
10132: EQUAL
10133: IFFALSE 10143
// sCargo := true ;
10135: LD_ADDR_EXP 70
10139: PUSH
10140: LD_INT 1
10142: ST_TO_ADDR
// if p3 = 29 then
10143: LD_VAR 0 3
10147: PUSH
10148: LD_INT 29
10150: EQUAL
10151: IFFALSE 10161
// sDLaser := true ;
10153: LD_ADDR_EXP 71
10157: PUSH
10158: LD_INT 1
10160: ST_TO_ADDR
// if p3 = 30 then
10161: LD_VAR 0 3
10165: PUSH
10166: LD_INT 30
10168: EQUAL
10169: IFFALSE 10179
// sExchange := true ;
10171: LD_ADDR_EXP 72
10175: PUSH
10176: LD_INT 1
10178: ST_TO_ADDR
// if p3 = 31 then
10179: LD_VAR 0 3
10183: PUSH
10184: LD_INT 31
10186: EQUAL
10187: IFFALSE 10197
// sFac := true ;
10189: LD_ADDR_EXP 73
10193: PUSH
10194: LD_INT 1
10196: ST_TO_ADDR
// if p3 = 32 then
10197: LD_VAR 0 3
10201: PUSH
10202: LD_INT 32
10204: EQUAL
10205: IFFALSE 10215
// sPower := true ;
10207: LD_ADDR_EXP 74
10211: PUSH
10212: LD_INT 1
10214: ST_TO_ADDR
// if p3 = 33 then
10215: LD_VAR 0 3
10219: PUSH
10220: LD_INT 33
10222: EQUAL
10223: IFFALSE 10233
// sRandom := true ;
10225: LD_ADDR_EXP 75
10229: PUSH
10230: LD_INT 1
10232: ST_TO_ADDR
// if p3 = 34 then
10233: LD_VAR 0 3
10237: PUSH
10238: LD_INT 34
10240: EQUAL
10241: IFFALSE 10251
// sShield := true ;
10243: LD_ADDR_EXP 76
10247: PUSH
10248: LD_INT 1
10250: ST_TO_ADDR
// if p3 = 35 then
10251: LD_VAR 0 3
10255: PUSH
10256: LD_INT 35
10258: EQUAL
10259: IFFALSE 10269
// sTime := true ;
10261: LD_ADDR_EXP 77
10265: PUSH
10266: LD_INT 1
10268: ST_TO_ADDR
// if p3 = 36 then
10269: LD_VAR 0 3
10273: PUSH
10274: LD_INT 36
10276: EQUAL
10277: IFFALSE 10287
// sTools := true ;
10279: LD_ADDR_EXP 78
10283: PUSH
10284: LD_INT 1
10286: ST_TO_ADDR
// if p3 = 101 then
10287: LD_VAR 0 3
10291: PUSH
10292: LD_INT 101
10294: EQUAL
10295: IFFALSE 10305
// sSold := true ;
10297: LD_ADDR_EXP 43
10301: PUSH
10302: LD_INT 1
10304: ST_TO_ADDR
// if p3 = 102 then
10305: LD_VAR 0 3
10309: PUSH
10310: LD_INT 102
10312: EQUAL
10313: IFFALSE 10323
// sDiff := true ;
10315: LD_ADDR_EXP 44
10319: PUSH
10320: LD_INT 1
10322: ST_TO_ADDR
// if p3 = 103 then
10323: LD_VAR 0 3
10327: PUSH
10328: LD_INT 103
10330: EQUAL
10331: IFFALSE 10341
// sFog := true ;
10333: LD_ADDR_EXP 47
10337: PUSH
10338: LD_INT 1
10340: ST_TO_ADDR
// if p3 = 104 then
10341: LD_VAR 0 3
10345: PUSH
10346: LD_INT 104
10348: EQUAL
10349: IFFALSE 10359
// sReset := true ;
10351: LD_ADDR_EXP 48
10355: PUSH
10356: LD_INT 1
10358: ST_TO_ADDR
// if p3 = 105 then
10359: LD_VAR 0 3
10363: PUSH
10364: LD_INT 105
10366: EQUAL
10367: IFFALSE 10377
// sSun := true ;
10369: LD_ADDR_EXP 49
10373: PUSH
10374: LD_INT 1
10376: ST_TO_ADDR
// if p3 = 106 then
10377: LD_VAR 0 3
10381: PUSH
10382: LD_INT 106
10384: EQUAL
10385: IFFALSE 10395
// sTiger := true ;
10387: LD_ADDR_EXP 45
10391: PUSH
10392: LD_INT 1
10394: ST_TO_ADDR
// if p3 = 107 then
10395: LD_VAR 0 3
10399: PUSH
10400: LD_INT 107
10402: EQUAL
10403: IFFALSE 10413
// sBomb := true ;
10405: LD_ADDR_EXP 46
10409: PUSH
10410: LD_INT 1
10412: ST_TO_ADDR
// if p3 = 108 then
10413: LD_VAR 0 3
10417: PUSH
10418: LD_INT 108
10420: EQUAL
10421: IFFALSE 10431
// sWound := true ;
10423: LD_ADDR_EXP 54
10427: PUSH
10428: LD_INT 1
10430: ST_TO_ADDR
// if p3 = 109 then
10431: LD_VAR 0 3
10435: PUSH
10436: LD_INT 109
10438: EQUAL
10439: IFFALSE 10449
// sBetray := true ;
10441: LD_ADDR_EXP 58
10445: PUSH
10446: LD_INT 1
10448: ST_TO_ADDR
// if p3 = 110 then
10449: LD_VAR 0 3
10453: PUSH
10454: LD_INT 110
10456: EQUAL
10457: IFFALSE 10467
// sContamin := true ;
10459: LD_ADDR_EXP 59
10463: PUSH
10464: LD_INT 1
10466: ST_TO_ADDR
// if p3 = 111 then
10467: LD_VAR 0 3
10471: PUSH
10472: LD_INT 111
10474: EQUAL
10475: IFFALSE 10485
// sOil := true ;
10477: LD_ADDR_EXP 61
10481: PUSH
10482: LD_INT 1
10484: ST_TO_ADDR
// if p3 = 112 then
10485: LD_VAR 0 3
10489: PUSH
10490: LD_INT 112
10492: EQUAL
10493: IFFALSE 10503
// sStu := true ;
10495: LD_ADDR_EXP 65
10499: PUSH
10500: LD_INT 1
10502: ST_TO_ADDR
// if p3 = 113 then
10503: LD_VAR 0 3
10507: PUSH
10508: LD_INT 113
10510: EQUAL
10511: IFFALSE 10521
// sBazooka := true ;
10513: LD_ADDR_EXP 68
10517: PUSH
10518: LD_INT 1
10520: ST_TO_ADDR
// if p3 = 114 then
10521: LD_VAR 0 3
10525: PUSH
10526: LD_INT 114
10528: EQUAL
10529: IFFALSE 10539
// sMortar := true ;
10531: LD_ADDR_EXP 69
10535: PUSH
10536: LD_INT 1
10538: ST_TO_ADDR
// if p3 = 115 then
10539: LD_VAR 0 3
10543: PUSH
10544: LD_INT 115
10546: EQUAL
10547: IFFALSE 10557
// sRanger := true ;
10549: LD_ADDR_EXP 79
10553: PUSH
10554: LD_INT 1
10556: ST_TO_ADDR
// if p3 = 116 then
10557: LD_VAR 0 3
10561: PUSH
10562: LD_INT 116
10564: EQUAL
10565: IFFALSE 10575
// sComputer := true ;
10567: LD_ADDR_EXP 80
10571: PUSH
10572: LD_INT 1
10574: ST_TO_ADDR
// if p3 = 117 then
10575: LD_VAR 0 3
10579: PUSH
10580: LD_INT 117
10582: EQUAL
10583: IFFALSE 10593
// s30 := true ;
10585: LD_ADDR_EXP 81
10589: PUSH
10590: LD_INT 1
10592: ST_TO_ADDR
// if p3 = 118 then
10593: LD_VAR 0 3
10597: PUSH
10598: LD_INT 118
10600: EQUAL
10601: IFFALSE 10611
// s60 := true ;
10603: LD_ADDR_EXP 82
10607: PUSH
10608: LD_INT 1
10610: ST_TO_ADDR
// end ; if p2 = hack_mode then
10611: LD_VAR 0 2
10615: PUSH
10616: LD_INT 101
10618: EQUAL
10619: IFFALSE 10747
// begin case p3 of 1 :
10621: LD_VAR 0 3
10625: PUSH
10626: LD_INT 1
10628: DOUBLE
10629: EQUAL
10630: IFTRUE 10634
10632: GO 10641
10634: POP
// hHackUnlimitedResources ; 2 :
10635: CALL 22918 0 0
10639: GO 10747
10641: LD_INT 2
10643: DOUBLE
10644: EQUAL
10645: IFTRUE 10649
10647: GO 10656
10649: POP
// hHackSetLevel10 ; 3 :
10650: CALL 23051 0 0
10654: GO 10747
10656: LD_INT 3
10658: DOUBLE
10659: EQUAL
10660: IFTRUE 10664
10662: GO 10671
10664: POP
// hHackSetLevel10YourUnits ; 4 :
10665: CALL 23136 0 0
10669: GO 10747
10671: LD_INT 4
10673: DOUBLE
10674: EQUAL
10675: IFTRUE 10679
10677: GO 10686
10679: POP
// hHackInvincible ; 5 :
10680: CALL 23584 0 0
10684: GO 10747
10686: LD_INT 5
10688: DOUBLE
10689: EQUAL
10690: IFTRUE 10694
10692: GO 10701
10694: POP
// hHackInvisible ; 6 :
10695: CALL 23695 0 0
10699: GO 10747
10701: LD_INT 6
10703: DOUBLE
10704: EQUAL
10705: IFTRUE 10709
10707: GO 10716
10709: POP
// hHackChangeYourSide ; 7 :
10710: CALL 23752 0 0
10714: GO 10747
10716: LD_INT 7
10718: DOUBLE
10719: EQUAL
10720: IFTRUE 10724
10722: GO 10731
10724: POP
// hHackChangeUnitSide ; 8 :
10725: CALL 23794 0 0
10729: GO 10747
10731: LD_INT 8
10733: DOUBLE
10734: EQUAL
10735: IFTRUE 10739
10737: GO 10746
10739: POP
// hHackFog ; end ;
10740: CALL 23895 0 0
10744: GO 10747
10746: POP
// end ; if p2 = game_save_mode then
10747: LD_VAR 0 2
10751: PUSH
10752: LD_INT 102
10754: EQUAL
10755: IFFALSE 10820
// begin if p3 = 1 then
10757: LD_VAR 0 3
10761: PUSH
10762: LD_INT 1
10764: EQUAL
10765: IFFALSE 10777
// globalGameSaveCounter := p4 ;
10767: LD_ADDR_EXP 25
10771: PUSH
10772: LD_VAR 0 4
10776: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
10777: LD_VAR 0 3
10781: PUSH
10782: LD_INT 2
10784: EQUAL
10785: PUSH
10786: LD_EXP 25
10790: AND
10791: IFFALSE 10810
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10793: LD_STRING setGameSaveCounter(
10795: PUSH
10796: LD_EXP 25
10800: STR
10801: PUSH
10802: LD_STRING )
10804: STR
10805: PPUSH
10806: CALL_OW 559
// display_strings := globalGameSaveCounter ;
10810: LD_ADDR_OWVAR 47
10814: PUSH
10815: LD_EXP 25
10819: ST_TO_ADDR
// end ; end ;
10820: LD_VAR 0 7
10824: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
10825: GO 10827
10827: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
10828: LD_STRING initStreamRollete();
10830: PPUSH
10831: CALL_OW 559
// InitStreamMode ;
10835: CALL 10847 0 0
// DefineStreamItems ( false ) ;
10839: LD_INT 0
10841: PPUSH
10842: CALL 11311 0 1
// end ;
10846: END
// function InitStreamMode ; begin
10847: LD_INT 0
10849: PPUSH
// streamModeActive := false ;
10850: LD_ADDR_EXP 26
10854: PUSH
10855: LD_INT 0
10857: ST_TO_ADDR
// normalCounter := 36 ;
10858: LD_ADDR_EXP 27
10862: PUSH
10863: LD_INT 36
10865: ST_TO_ADDR
// hardcoreCounter := 18 ;
10866: LD_ADDR_EXP 28
10870: PUSH
10871: LD_INT 18
10873: ST_TO_ADDR
// sRocket := false ;
10874: LD_ADDR_EXP 31
10878: PUSH
10879: LD_INT 0
10881: ST_TO_ADDR
// sSpeed := false ;
10882: LD_ADDR_EXP 30
10886: PUSH
10887: LD_INT 0
10889: ST_TO_ADDR
// sEngine := false ;
10890: LD_ADDR_EXP 32
10894: PUSH
10895: LD_INT 0
10897: ST_TO_ADDR
// sSpec := false ;
10898: LD_ADDR_EXP 29
10902: PUSH
10903: LD_INT 0
10905: ST_TO_ADDR
// sLevel := false ;
10906: LD_ADDR_EXP 33
10910: PUSH
10911: LD_INT 0
10913: ST_TO_ADDR
// sArmoury := false ;
10914: LD_ADDR_EXP 34
10918: PUSH
10919: LD_INT 0
10921: ST_TO_ADDR
// sRadar := false ;
10922: LD_ADDR_EXP 35
10926: PUSH
10927: LD_INT 0
10929: ST_TO_ADDR
// sBunker := false ;
10930: LD_ADDR_EXP 36
10934: PUSH
10935: LD_INT 0
10937: ST_TO_ADDR
// sHack := false ;
10938: LD_ADDR_EXP 37
10942: PUSH
10943: LD_INT 0
10945: ST_TO_ADDR
// sFire := false ;
10946: LD_ADDR_EXP 38
10950: PUSH
10951: LD_INT 0
10953: ST_TO_ADDR
// sRefresh := false ;
10954: LD_ADDR_EXP 39
10958: PUSH
10959: LD_INT 0
10961: ST_TO_ADDR
// sExp := false ;
10962: LD_ADDR_EXP 40
10966: PUSH
10967: LD_INT 0
10969: ST_TO_ADDR
// sDepot := false ;
10970: LD_ADDR_EXP 41
10974: PUSH
10975: LD_INT 0
10977: ST_TO_ADDR
// sFlag := false ;
10978: LD_ADDR_EXP 42
10982: PUSH
10983: LD_INT 0
10985: ST_TO_ADDR
// sKamikadze := false ;
10986: LD_ADDR_EXP 50
10990: PUSH
10991: LD_INT 0
10993: ST_TO_ADDR
// sTroll := false ;
10994: LD_ADDR_EXP 51
10998: PUSH
10999: LD_INT 0
11001: ST_TO_ADDR
// sSlow := false ;
11002: LD_ADDR_EXP 52
11006: PUSH
11007: LD_INT 0
11009: ST_TO_ADDR
// sLack := false ;
11010: LD_ADDR_EXP 53
11014: PUSH
11015: LD_INT 0
11017: ST_TO_ADDR
// sTank := false ;
11018: LD_ADDR_EXP 55
11022: PUSH
11023: LD_INT 0
11025: ST_TO_ADDR
// sRemote := false ;
11026: LD_ADDR_EXP 56
11030: PUSH
11031: LD_INT 0
11033: ST_TO_ADDR
// sPowell := false ;
11034: LD_ADDR_EXP 57
11038: PUSH
11039: LD_INT 0
11041: ST_TO_ADDR
// sTeleport := false ;
11042: LD_ADDR_EXP 60
11046: PUSH
11047: LD_INT 0
11049: ST_TO_ADDR
// sOilTower := false ;
11050: LD_ADDR_EXP 62
11054: PUSH
11055: LD_INT 0
11057: ST_TO_ADDR
// sShovel := false ;
11058: LD_ADDR_EXP 63
11062: PUSH
11063: LD_INT 0
11065: ST_TO_ADDR
// sSheik := false ;
11066: LD_ADDR_EXP 64
11070: PUSH
11071: LD_INT 0
11073: ST_TO_ADDR
// sEarthquake := false ;
11074: LD_ADDR_EXP 66
11078: PUSH
11079: LD_INT 0
11081: ST_TO_ADDR
// sAI := false ;
11082: LD_ADDR_EXP 67
11086: PUSH
11087: LD_INT 0
11089: ST_TO_ADDR
// sCargo := false ;
11090: LD_ADDR_EXP 70
11094: PUSH
11095: LD_INT 0
11097: ST_TO_ADDR
// sDLaser := false ;
11098: LD_ADDR_EXP 71
11102: PUSH
11103: LD_INT 0
11105: ST_TO_ADDR
// sExchange := false ;
11106: LD_ADDR_EXP 72
11110: PUSH
11111: LD_INT 0
11113: ST_TO_ADDR
// sFac := false ;
11114: LD_ADDR_EXP 73
11118: PUSH
11119: LD_INT 0
11121: ST_TO_ADDR
// sPower := false ;
11122: LD_ADDR_EXP 74
11126: PUSH
11127: LD_INT 0
11129: ST_TO_ADDR
// sRandom := false ;
11130: LD_ADDR_EXP 75
11134: PUSH
11135: LD_INT 0
11137: ST_TO_ADDR
// sShield := false ;
11138: LD_ADDR_EXP 76
11142: PUSH
11143: LD_INT 0
11145: ST_TO_ADDR
// sTime := false ;
11146: LD_ADDR_EXP 77
11150: PUSH
11151: LD_INT 0
11153: ST_TO_ADDR
// sTools := false ;
11154: LD_ADDR_EXP 78
11158: PUSH
11159: LD_INT 0
11161: ST_TO_ADDR
// sSold := false ;
11162: LD_ADDR_EXP 43
11166: PUSH
11167: LD_INT 0
11169: ST_TO_ADDR
// sDiff := false ;
11170: LD_ADDR_EXP 44
11174: PUSH
11175: LD_INT 0
11177: ST_TO_ADDR
// sFog := false ;
11178: LD_ADDR_EXP 47
11182: PUSH
11183: LD_INT 0
11185: ST_TO_ADDR
// sReset := false ;
11186: LD_ADDR_EXP 48
11190: PUSH
11191: LD_INT 0
11193: ST_TO_ADDR
// sSun := false ;
11194: LD_ADDR_EXP 49
11198: PUSH
11199: LD_INT 0
11201: ST_TO_ADDR
// sTiger := false ;
11202: LD_ADDR_EXP 45
11206: PUSH
11207: LD_INT 0
11209: ST_TO_ADDR
// sBomb := false ;
11210: LD_ADDR_EXP 46
11214: PUSH
11215: LD_INT 0
11217: ST_TO_ADDR
// sWound := false ;
11218: LD_ADDR_EXP 54
11222: PUSH
11223: LD_INT 0
11225: ST_TO_ADDR
// sBetray := false ;
11226: LD_ADDR_EXP 58
11230: PUSH
11231: LD_INT 0
11233: ST_TO_ADDR
// sContamin := false ;
11234: LD_ADDR_EXP 59
11238: PUSH
11239: LD_INT 0
11241: ST_TO_ADDR
// sOil := false ;
11242: LD_ADDR_EXP 61
11246: PUSH
11247: LD_INT 0
11249: ST_TO_ADDR
// sStu := false ;
11250: LD_ADDR_EXP 65
11254: PUSH
11255: LD_INT 0
11257: ST_TO_ADDR
// sBazooka := false ;
11258: LD_ADDR_EXP 68
11262: PUSH
11263: LD_INT 0
11265: ST_TO_ADDR
// sMortar := false ;
11266: LD_ADDR_EXP 69
11270: PUSH
11271: LD_INT 0
11273: ST_TO_ADDR
// sRanger := false ;
11274: LD_ADDR_EXP 79
11278: PUSH
11279: LD_INT 0
11281: ST_TO_ADDR
// sComputer := false ;
11282: LD_ADDR_EXP 80
11286: PUSH
11287: LD_INT 0
11289: ST_TO_ADDR
// s30 := false ;
11290: LD_ADDR_EXP 81
11294: PUSH
11295: LD_INT 0
11297: ST_TO_ADDR
// s60 := false ;
11298: LD_ADDR_EXP 82
11302: PUSH
11303: LD_INT 0
11305: ST_TO_ADDR
// end ;
11306: LD_VAR 0 1
11310: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
11311: LD_INT 0
11313: PPUSH
11314: PPUSH
11315: PPUSH
11316: PPUSH
11317: PPUSH
11318: PPUSH
11319: PPUSH
// result := [ ] ;
11320: LD_ADDR_VAR 0 2
11324: PUSH
11325: EMPTY
11326: ST_TO_ADDR
// if campaign_id = 1 then
11327: LD_OWVAR 69
11331: PUSH
11332: LD_INT 1
11334: EQUAL
11335: IFFALSE 14501
// begin case mission_number of 1 :
11337: LD_OWVAR 70
11341: PUSH
11342: LD_INT 1
11344: DOUBLE
11345: EQUAL
11346: IFTRUE 11350
11348: GO 11426
11350: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
11351: LD_ADDR_VAR 0 2
11355: PUSH
11356: LD_INT 2
11358: PUSH
11359: LD_INT 4
11361: PUSH
11362: LD_INT 11
11364: PUSH
11365: LD_INT 12
11367: PUSH
11368: LD_INT 15
11370: PUSH
11371: LD_INT 16
11373: PUSH
11374: LD_INT 22
11376: PUSH
11377: LD_INT 23
11379: PUSH
11380: LD_INT 26
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: LIST
11387: LIST
11388: LIST
11389: LIST
11390: LIST
11391: LIST
11392: LIST
11393: PUSH
11394: LD_INT 101
11396: PUSH
11397: LD_INT 102
11399: PUSH
11400: LD_INT 106
11402: PUSH
11403: LD_INT 116
11405: PUSH
11406: LD_INT 117
11408: PUSH
11409: LD_INT 118
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: ST_TO_ADDR
11424: GO 14499
11426: LD_INT 2
11428: DOUBLE
11429: EQUAL
11430: IFTRUE 11434
11432: GO 11518
11434: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
11435: LD_ADDR_VAR 0 2
11439: PUSH
11440: LD_INT 2
11442: PUSH
11443: LD_INT 4
11445: PUSH
11446: LD_INT 11
11448: PUSH
11449: LD_INT 12
11451: PUSH
11452: LD_INT 15
11454: PUSH
11455: LD_INT 16
11457: PUSH
11458: LD_INT 22
11460: PUSH
11461: LD_INT 23
11463: PUSH
11464: LD_INT 26
11466: PUSH
11467: EMPTY
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: PUSH
11478: LD_INT 101
11480: PUSH
11481: LD_INT 102
11483: PUSH
11484: LD_INT 105
11486: PUSH
11487: LD_INT 106
11489: PUSH
11490: LD_INT 108
11492: PUSH
11493: LD_INT 116
11495: PUSH
11496: LD_INT 117
11498: PUSH
11499: LD_INT 118
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: ST_TO_ADDR
11516: GO 14499
11518: LD_INT 3
11520: DOUBLE
11521: EQUAL
11522: IFTRUE 11526
11524: GO 11614
11526: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
11527: LD_ADDR_VAR 0 2
11531: PUSH
11532: LD_INT 2
11534: PUSH
11535: LD_INT 4
11537: PUSH
11538: LD_INT 5
11540: PUSH
11541: LD_INT 11
11543: PUSH
11544: LD_INT 12
11546: PUSH
11547: LD_INT 15
11549: PUSH
11550: LD_INT 16
11552: PUSH
11553: LD_INT 22
11555: PUSH
11556: LD_INT 26
11558: PUSH
11559: LD_INT 36
11561: PUSH
11562: EMPTY
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: PUSH
11574: LD_INT 101
11576: PUSH
11577: LD_INT 102
11579: PUSH
11580: LD_INT 105
11582: PUSH
11583: LD_INT 106
11585: PUSH
11586: LD_INT 108
11588: PUSH
11589: LD_INT 116
11591: PUSH
11592: LD_INT 117
11594: PUSH
11595: LD_INT 118
11597: PUSH
11598: EMPTY
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: ST_TO_ADDR
11612: GO 14499
11614: LD_INT 4
11616: DOUBLE
11617: EQUAL
11618: IFTRUE 11622
11620: GO 11718
11622: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
11623: LD_ADDR_VAR 0 2
11627: PUSH
11628: LD_INT 2
11630: PUSH
11631: LD_INT 4
11633: PUSH
11634: LD_INT 5
11636: PUSH
11637: LD_INT 8
11639: PUSH
11640: LD_INT 11
11642: PUSH
11643: LD_INT 12
11645: PUSH
11646: LD_INT 15
11648: PUSH
11649: LD_INT 16
11651: PUSH
11652: LD_INT 22
11654: PUSH
11655: LD_INT 23
11657: PUSH
11658: LD_INT 26
11660: PUSH
11661: LD_INT 36
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: PUSH
11678: LD_INT 101
11680: PUSH
11681: LD_INT 102
11683: PUSH
11684: LD_INT 105
11686: PUSH
11687: LD_INT 106
11689: PUSH
11690: LD_INT 108
11692: PUSH
11693: LD_INT 116
11695: PUSH
11696: LD_INT 117
11698: PUSH
11699: LD_INT 118
11701: PUSH
11702: EMPTY
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: ST_TO_ADDR
11716: GO 14499
11718: LD_INT 5
11720: DOUBLE
11721: EQUAL
11722: IFTRUE 11726
11724: GO 11838
11726: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
11727: LD_ADDR_VAR 0 2
11731: PUSH
11732: LD_INT 2
11734: PUSH
11735: LD_INT 4
11737: PUSH
11738: LD_INT 5
11740: PUSH
11741: LD_INT 6
11743: PUSH
11744: LD_INT 8
11746: PUSH
11747: LD_INT 11
11749: PUSH
11750: LD_INT 12
11752: PUSH
11753: LD_INT 15
11755: PUSH
11756: LD_INT 16
11758: PUSH
11759: LD_INT 22
11761: PUSH
11762: LD_INT 23
11764: PUSH
11765: LD_INT 25
11767: PUSH
11768: LD_INT 26
11770: PUSH
11771: LD_INT 36
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: PUSH
11790: LD_INT 101
11792: PUSH
11793: LD_INT 102
11795: PUSH
11796: LD_INT 105
11798: PUSH
11799: LD_INT 106
11801: PUSH
11802: LD_INT 108
11804: PUSH
11805: LD_INT 109
11807: PUSH
11808: LD_INT 112
11810: PUSH
11811: LD_INT 116
11813: PUSH
11814: LD_INT 117
11816: PUSH
11817: LD_INT 118
11819: PUSH
11820: EMPTY
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: ST_TO_ADDR
11836: GO 14499
11838: LD_INT 6
11840: DOUBLE
11841: EQUAL
11842: IFTRUE 11846
11844: GO 11978
11846: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
11847: LD_ADDR_VAR 0 2
11851: PUSH
11852: LD_INT 2
11854: PUSH
11855: LD_INT 4
11857: PUSH
11858: LD_INT 5
11860: PUSH
11861: LD_INT 6
11863: PUSH
11864: LD_INT 8
11866: PUSH
11867: LD_INT 11
11869: PUSH
11870: LD_INT 12
11872: PUSH
11873: LD_INT 15
11875: PUSH
11876: LD_INT 16
11878: PUSH
11879: LD_INT 20
11881: PUSH
11882: LD_INT 21
11884: PUSH
11885: LD_INT 22
11887: PUSH
11888: LD_INT 23
11890: PUSH
11891: LD_INT 25
11893: PUSH
11894: LD_INT 26
11896: PUSH
11897: LD_INT 30
11899: PUSH
11900: LD_INT 31
11902: PUSH
11903: LD_INT 32
11905: PUSH
11906: LD_INT 36
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: PUSH
11930: LD_INT 101
11932: PUSH
11933: LD_INT 102
11935: PUSH
11936: LD_INT 105
11938: PUSH
11939: LD_INT 106
11941: PUSH
11942: LD_INT 108
11944: PUSH
11945: LD_INT 109
11947: PUSH
11948: LD_INT 112
11950: PUSH
11951: LD_INT 116
11953: PUSH
11954: LD_INT 117
11956: PUSH
11957: LD_INT 118
11959: PUSH
11960: EMPTY
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: ST_TO_ADDR
11976: GO 14499
11978: LD_INT 7
11980: DOUBLE
11981: EQUAL
11982: IFTRUE 11986
11984: GO 12098
11986: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
11987: LD_ADDR_VAR 0 2
11991: PUSH
11992: LD_INT 2
11994: PUSH
11995: LD_INT 4
11997: PUSH
11998: LD_INT 5
12000: PUSH
12001: LD_INT 7
12003: PUSH
12004: LD_INT 11
12006: PUSH
12007: LD_INT 12
12009: PUSH
12010: LD_INT 15
12012: PUSH
12013: LD_INT 16
12015: PUSH
12016: LD_INT 20
12018: PUSH
12019: LD_INT 21
12021: PUSH
12022: LD_INT 22
12024: PUSH
12025: LD_INT 23
12027: PUSH
12028: LD_INT 25
12030: PUSH
12031: LD_INT 26
12033: PUSH
12034: EMPTY
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: LIST
12049: PUSH
12050: LD_INT 101
12052: PUSH
12053: LD_INT 102
12055: PUSH
12056: LD_INT 103
12058: PUSH
12059: LD_INT 105
12061: PUSH
12062: LD_INT 106
12064: PUSH
12065: LD_INT 108
12067: PUSH
12068: LD_INT 112
12070: PUSH
12071: LD_INT 116
12073: PUSH
12074: LD_INT 117
12076: PUSH
12077: LD_INT 118
12079: PUSH
12080: EMPTY
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: ST_TO_ADDR
12096: GO 14499
12098: LD_INT 8
12100: DOUBLE
12101: EQUAL
12102: IFTRUE 12106
12104: GO 12246
12106: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12107: LD_ADDR_VAR 0 2
12111: PUSH
12112: LD_INT 2
12114: PUSH
12115: LD_INT 4
12117: PUSH
12118: LD_INT 5
12120: PUSH
12121: LD_INT 6
12123: PUSH
12124: LD_INT 7
12126: PUSH
12127: LD_INT 8
12129: PUSH
12130: LD_INT 11
12132: PUSH
12133: LD_INT 12
12135: PUSH
12136: LD_INT 15
12138: PUSH
12139: LD_INT 16
12141: PUSH
12142: LD_INT 20
12144: PUSH
12145: LD_INT 21
12147: PUSH
12148: LD_INT 22
12150: PUSH
12151: LD_INT 23
12153: PUSH
12154: LD_INT 25
12156: PUSH
12157: LD_INT 26
12159: PUSH
12160: LD_INT 30
12162: PUSH
12163: LD_INT 31
12165: PUSH
12166: LD_INT 32
12168: PUSH
12169: LD_INT 36
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: PUSH
12194: LD_INT 101
12196: PUSH
12197: LD_INT 102
12199: PUSH
12200: LD_INT 103
12202: PUSH
12203: LD_INT 105
12205: PUSH
12206: LD_INT 106
12208: PUSH
12209: LD_INT 108
12211: PUSH
12212: LD_INT 109
12214: PUSH
12215: LD_INT 112
12217: PUSH
12218: LD_INT 116
12220: PUSH
12221: LD_INT 117
12223: PUSH
12224: LD_INT 118
12226: PUSH
12227: EMPTY
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: ST_TO_ADDR
12244: GO 14499
12246: LD_INT 9
12248: DOUBLE
12249: EQUAL
12250: IFTRUE 12254
12252: GO 12402
12254: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
12255: LD_ADDR_VAR 0 2
12259: PUSH
12260: LD_INT 2
12262: PUSH
12263: LD_INT 4
12265: PUSH
12266: LD_INT 5
12268: PUSH
12269: LD_INT 6
12271: PUSH
12272: LD_INT 7
12274: PUSH
12275: LD_INT 8
12277: PUSH
12278: LD_INT 11
12280: PUSH
12281: LD_INT 12
12283: PUSH
12284: LD_INT 15
12286: PUSH
12287: LD_INT 16
12289: PUSH
12290: LD_INT 20
12292: PUSH
12293: LD_INT 21
12295: PUSH
12296: LD_INT 22
12298: PUSH
12299: LD_INT 23
12301: PUSH
12302: LD_INT 25
12304: PUSH
12305: LD_INT 26
12307: PUSH
12308: LD_INT 28
12310: PUSH
12311: LD_INT 30
12313: PUSH
12314: LD_INT 31
12316: PUSH
12317: LD_INT 32
12319: PUSH
12320: LD_INT 36
12322: PUSH
12323: EMPTY
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: PUSH
12346: LD_INT 101
12348: PUSH
12349: LD_INT 102
12351: PUSH
12352: LD_INT 103
12354: PUSH
12355: LD_INT 105
12357: PUSH
12358: LD_INT 106
12360: PUSH
12361: LD_INT 108
12363: PUSH
12364: LD_INT 109
12366: PUSH
12367: LD_INT 112
12369: PUSH
12370: LD_INT 114
12372: PUSH
12373: LD_INT 116
12375: PUSH
12376: LD_INT 117
12378: PUSH
12379: LD_INT 118
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: LIST
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: ST_TO_ADDR
12400: GO 14499
12402: LD_INT 10
12404: DOUBLE
12405: EQUAL
12406: IFTRUE 12410
12408: GO 12606
12410: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
12411: LD_ADDR_VAR 0 2
12415: PUSH
12416: LD_INT 2
12418: PUSH
12419: LD_INT 4
12421: PUSH
12422: LD_INT 5
12424: PUSH
12425: LD_INT 6
12427: PUSH
12428: LD_INT 7
12430: PUSH
12431: LD_INT 8
12433: PUSH
12434: LD_INT 9
12436: PUSH
12437: LD_INT 10
12439: PUSH
12440: LD_INT 11
12442: PUSH
12443: LD_INT 12
12445: PUSH
12446: LD_INT 13
12448: PUSH
12449: LD_INT 14
12451: PUSH
12452: LD_INT 15
12454: PUSH
12455: LD_INT 16
12457: PUSH
12458: LD_INT 17
12460: PUSH
12461: LD_INT 18
12463: PUSH
12464: LD_INT 19
12466: PUSH
12467: LD_INT 20
12469: PUSH
12470: LD_INT 21
12472: PUSH
12473: LD_INT 22
12475: PUSH
12476: LD_INT 23
12478: PUSH
12479: LD_INT 24
12481: PUSH
12482: LD_INT 25
12484: PUSH
12485: LD_INT 26
12487: PUSH
12488: LD_INT 28
12490: PUSH
12491: LD_INT 30
12493: PUSH
12494: LD_INT 31
12496: PUSH
12497: LD_INT 32
12499: PUSH
12500: LD_INT 36
12502: PUSH
12503: EMPTY
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: PUSH
12534: LD_INT 101
12536: PUSH
12537: LD_INT 102
12539: PUSH
12540: LD_INT 103
12542: PUSH
12543: LD_INT 104
12545: PUSH
12546: LD_INT 105
12548: PUSH
12549: LD_INT 106
12551: PUSH
12552: LD_INT 107
12554: PUSH
12555: LD_INT 108
12557: PUSH
12558: LD_INT 109
12560: PUSH
12561: LD_INT 110
12563: PUSH
12564: LD_INT 111
12566: PUSH
12567: LD_INT 112
12569: PUSH
12570: LD_INT 114
12572: PUSH
12573: LD_INT 116
12575: PUSH
12576: LD_INT 117
12578: PUSH
12579: LD_INT 118
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: LIST
12598: LIST
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: ST_TO_ADDR
12604: GO 14499
12606: LD_INT 11
12608: DOUBLE
12609: EQUAL
12610: IFTRUE 12614
12612: GO 12818
12614: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
12615: LD_ADDR_VAR 0 2
12619: PUSH
12620: LD_INT 2
12622: PUSH
12623: LD_INT 3
12625: PUSH
12626: LD_INT 4
12628: PUSH
12629: LD_INT 5
12631: PUSH
12632: LD_INT 6
12634: PUSH
12635: LD_INT 7
12637: PUSH
12638: LD_INT 8
12640: PUSH
12641: LD_INT 9
12643: PUSH
12644: LD_INT 10
12646: PUSH
12647: LD_INT 11
12649: PUSH
12650: LD_INT 12
12652: PUSH
12653: LD_INT 13
12655: PUSH
12656: LD_INT 14
12658: PUSH
12659: LD_INT 15
12661: PUSH
12662: LD_INT 16
12664: PUSH
12665: LD_INT 17
12667: PUSH
12668: LD_INT 18
12670: PUSH
12671: LD_INT 19
12673: PUSH
12674: LD_INT 20
12676: PUSH
12677: LD_INT 21
12679: PUSH
12680: LD_INT 22
12682: PUSH
12683: LD_INT 23
12685: PUSH
12686: LD_INT 24
12688: PUSH
12689: LD_INT 25
12691: PUSH
12692: LD_INT 26
12694: PUSH
12695: LD_INT 28
12697: PUSH
12698: LD_INT 30
12700: PUSH
12701: LD_INT 31
12703: PUSH
12704: LD_INT 32
12706: PUSH
12707: LD_INT 34
12709: PUSH
12710: LD_INT 36
12712: PUSH
12713: EMPTY
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: PUSH
12746: LD_INT 101
12748: PUSH
12749: LD_INT 102
12751: PUSH
12752: LD_INT 103
12754: PUSH
12755: LD_INT 104
12757: PUSH
12758: LD_INT 105
12760: PUSH
12761: LD_INT 106
12763: PUSH
12764: LD_INT 107
12766: PUSH
12767: LD_INT 108
12769: PUSH
12770: LD_INT 109
12772: PUSH
12773: LD_INT 110
12775: PUSH
12776: LD_INT 111
12778: PUSH
12779: LD_INT 112
12781: PUSH
12782: LD_INT 114
12784: PUSH
12785: LD_INT 116
12787: PUSH
12788: LD_INT 117
12790: PUSH
12791: LD_INT 118
12793: PUSH
12794: EMPTY
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: PUSH
12812: EMPTY
12813: LIST
12814: LIST
12815: ST_TO_ADDR
12816: GO 14499
12818: LD_INT 12
12820: DOUBLE
12821: EQUAL
12822: IFTRUE 12826
12824: GO 13046
12826: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
12827: LD_ADDR_VAR 0 2
12831: PUSH
12832: LD_INT 1
12834: PUSH
12835: LD_INT 2
12837: PUSH
12838: LD_INT 3
12840: PUSH
12841: LD_INT 4
12843: PUSH
12844: LD_INT 5
12846: PUSH
12847: LD_INT 6
12849: PUSH
12850: LD_INT 7
12852: PUSH
12853: LD_INT 8
12855: PUSH
12856: LD_INT 9
12858: PUSH
12859: LD_INT 10
12861: PUSH
12862: LD_INT 11
12864: PUSH
12865: LD_INT 12
12867: PUSH
12868: LD_INT 13
12870: PUSH
12871: LD_INT 14
12873: PUSH
12874: LD_INT 15
12876: PUSH
12877: LD_INT 16
12879: PUSH
12880: LD_INT 17
12882: PUSH
12883: LD_INT 18
12885: PUSH
12886: LD_INT 19
12888: PUSH
12889: LD_INT 20
12891: PUSH
12892: LD_INT 21
12894: PUSH
12895: LD_INT 22
12897: PUSH
12898: LD_INT 23
12900: PUSH
12901: LD_INT 24
12903: PUSH
12904: LD_INT 25
12906: PUSH
12907: LD_INT 26
12909: PUSH
12910: LD_INT 27
12912: PUSH
12913: LD_INT 28
12915: PUSH
12916: LD_INT 30
12918: PUSH
12919: LD_INT 31
12921: PUSH
12922: LD_INT 32
12924: PUSH
12925: LD_INT 33
12927: PUSH
12928: LD_INT 34
12930: PUSH
12931: LD_INT 36
12933: PUSH
12934: EMPTY
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: PUSH
12970: LD_INT 101
12972: PUSH
12973: LD_INT 102
12975: PUSH
12976: LD_INT 103
12978: PUSH
12979: LD_INT 104
12981: PUSH
12982: LD_INT 105
12984: PUSH
12985: LD_INT 106
12987: PUSH
12988: LD_INT 107
12990: PUSH
12991: LD_INT 108
12993: PUSH
12994: LD_INT 109
12996: PUSH
12997: LD_INT 110
12999: PUSH
13000: LD_INT 111
13002: PUSH
13003: LD_INT 112
13005: PUSH
13006: LD_INT 113
13008: PUSH
13009: LD_INT 114
13011: PUSH
13012: LD_INT 116
13014: PUSH
13015: LD_INT 117
13017: PUSH
13018: LD_INT 118
13020: PUSH
13021: EMPTY
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: PUSH
13040: EMPTY
13041: LIST
13042: LIST
13043: ST_TO_ADDR
13044: GO 14499
13046: LD_INT 13
13048: DOUBLE
13049: EQUAL
13050: IFTRUE 13054
13052: GO 13262
13054: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13055: LD_ADDR_VAR 0 2
13059: PUSH
13060: LD_INT 1
13062: PUSH
13063: LD_INT 2
13065: PUSH
13066: LD_INT 3
13068: PUSH
13069: LD_INT 4
13071: PUSH
13072: LD_INT 5
13074: PUSH
13075: LD_INT 8
13077: PUSH
13078: LD_INT 9
13080: PUSH
13081: LD_INT 10
13083: PUSH
13084: LD_INT 11
13086: PUSH
13087: LD_INT 12
13089: PUSH
13090: LD_INT 14
13092: PUSH
13093: LD_INT 15
13095: PUSH
13096: LD_INT 16
13098: PUSH
13099: LD_INT 17
13101: PUSH
13102: LD_INT 18
13104: PUSH
13105: LD_INT 19
13107: PUSH
13108: LD_INT 20
13110: PUSH
13111: LD_INT 21
13113: PUSH
13114: LD_INT 22
13116: PUSH
13117: LD_INT 23
13119: PUSH
13120: LD_INT 24
13122: PUSH
13123: LD_INT 25
13125: PUSH
13126: LD_INT 26
13128: PUSH
13129: LD_INT 27
13131: PUSH
13132: LD_INT 28
13134: PUSH
13135: LD_INT 30
13137: PUSH
13138: LD_INT 31
13140: PUSH
13141: LD_INT 32
13143: PUSH
13144: LD_INT 33
13146: PUSH
13147: LD_INT 34
13149: PUSH
13150: LD_INT 36
13152: PUSH
13153: EMPTY
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: PUSH
13186: LD_INT 101
13188: PUSH
13189: LD_INT 102
13191: PUSH
13192: LD_INT 103
13194: PUSH
13195: LD_INT 104
13197: PUSH
13198: LD_INT 105
13200: PUSH
13201: LD_INT 106
13203: PUSH
13204: LD_INT 107
13206: PUSH
13207: LD_INT 108
13209: PUSH
13210: LD_INT 109
13212: PUSH
13213: LD_INT 110
13215: PUSH
13216: LD_INT 111
13218: PUSH
13219: LD_INT 112
13221: PUSH
13222: LD_INT 113
13224: PUSH
13225: LD_INT 114
13227: PUSH
13228: LD_INT 116
13230: PUSH
13231: LD_INT 117
13233: PUSH
13234: LD_INT 118
13236: PUSH
13237: EMPTY
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: ST_TO_ADDR
13260: GO 14499
13262: LD_INT 14
13264: DOUBLE
13265: EQUAL
13266: IFTRUE 13270
13268: GO 13494
13270: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
13271: LD_ADDR_VAR 0 2
13275: PUSH
13276: LD_INT 1
13278: PUSH
13279: LD_INT 2
13281: PUSH
13282: LD_INT 3
13284: PUSH
13285: LD_INT 4
13287: PUSH
13288: LD_INT 5
13290: PUSH
13291: LD_INT 6
13293: PUSH
13294: LD_INT 7
13296: PUSH
13297: LD_INT 8
13299: PUSH
13300: LD_INT 9
13302: PUSH
13303: LD_INT 10
13305: PUSH
13306: LD_INT 11
13308: PUSH
13309: LD_INT 12
13311: PUSH
13312: LD_INT 13
13314: PUSH
13315: LD_INT 14
13317: PUSH
13318: LD_INT 15
13320: PUSH
13321: LD_INT 16
13323: PUSH
13324: LD_INT 17
13326: PUSH
13327: LD_INT 18
13329: PUSH
13330: LD_INT 19
13332: PUSH
13333: LD_INT 20
13335: PUSH
13336: LD_INT 21
13338: PUSH
13339: LD_INT 22
13341: PUSH
13342: LD_INT 23
13344: PUSH
13345: LD_INT 24
13347: PUSH
13348: LD_INT 25
13350: PUSH
13351: LD_INT 26
13353: PUSH
13354: LD_INT 27
13356: PUSH
13357: LD_INT 28
13359: PUSH
13360: LD_INT 29
13362: PUSH
13363: LD_INT 30
13365: PUSH
13366: LD_INT 31
13368: PUSH
13369: LD_INT 32
13371: PUSH
13372: LD_INT 33
13374: PUSH
13375: LD_INT 34
13377: PUSH
13378: LD_INT 36
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: PUSH
13418: LD_INT 101
13420: PUSH
13421: LD_INT 102
13423: PUSH
13424: LD_INT 103
13426: PUSH
13427: LD_INT 104
13429: PUSH
13430: LD_INT 105
13432: PUSH
13433: LD_INT 106
13435: PUSH
13436: LD_INT 107
13438: PUSH
13439: LD_INT 108
13441: PUSH
13442: LD_INT 109
13444: PUSH
13445: LD_INT 110
13447: PUSH
13448: LD_INT 111
13450: PUSH
13451: LD_INT 112
13453: PUSH
13454: LD_INT 113
13456: PUSH
13457: LD_INT 114
13459: PUSH
13460: LD_INT 116
13462: PUSH
13463: LD_INT 117
13465: PUSH
13466: LD_INT 118
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: PUSH
13488: EMPTY
13489: LIST
13490: LIST
13491: ST_TO_ADDR
13492: GO 14499
13494: LD_INT 15
13496: DOUBLE
13497: EQUAL
13498: IFTRUE 13502
13500: GO 13726
13502: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
13503: LD_ADDR_VAR 0 2
13507: PUSH
13508: LD_INT 1
13510: PUSH
13511: LD_INT 2
13513: PUSH
13514: LD_INT 3
13516: PUSH
13517: LD_INT 4
13519: PUSH
13520: LD_INT 5
13522: PUSH
13523: LD_INT 6
13525: PUSH
13526: LD_INT 7
13528: PUSH
13529: LD_INT 8
13531: PUSH
13532: LD_INT 9
13534: PUSH
13535: LD_INT 10
13537: PUSH
13538: LD_INT 11
13540: PUSH
13541: LD_INT 12
13543: PUSH
13544: LD_INT 13
13546: PUSH
13547: LD_INT 14
13549: PUSH
13550: LD_INT 15
13552: PUSH
13553: LD_INT 16
13555: PUSH
13556: LD_INT 17
13558: PUSH
13559: LD_INT 18
13561: PUSH
13562: LD_INT 19
13564: PUSH
13565: LD_INT 20
13567: PUSH
13568: LD_INT 21
13570: PUSH
13571: LD_INT 22
13573: PUSH
13574: LD_INT 23
13576: PUSH
13577: LD_INT 24
13579: PUSH
13580: LD_INT 25
13582: PUSH
13583: LD_INT 26
13585: PUSH
13586: LD_INT 27
13588: PUSH
13589: LD_INT 28
13591: PUSH
13592: LD_INT 29
13594: PUSH
13595: LD_INT 30
13597: PUSH
13598: LD_INT 31
13600: PUSH
13601: LD_INT 32
13603: PUSH
13604: LD_INT 33
13606: PUSH
13607: LD_INT 34
13609: PUSH
13610: LD_INT 36
13612: PUSH
13613: EMPTY
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: PUSH
13650: LD_INT 101
13652: PUSH
13653: LD_INT 102
13655: PUSH
13656: LD_INT 103
13658: PUSH
13659: LD_INT 104
13661: PUSH
13662: LD_INT 105
13664: PUSH
13665: LD_INT 106
13667: PUSH
13668: LD_INT 107
13670: PUSH
13671: LD_INT 108
13673: PUSH
13674: LD_INT 109
13676: PUSH
13677: LD_INT 110
13679: PUSH
13680: LD_INT 111
13682: PUSH
13683: LD_INT 112
13685: PUSH
13686: LD_INT 113
13688: PUSH
13689: LD_INT 114
13691: PUSH
13692: LD_INT 116
13694: PUSH
13695: LD_INT 117
13697: PUSH
13698: LD_INT 118
13700: PUSH
13701: EMPTY
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: ST_TO_ADDR
13724: GO 14499
13726: LD_INT 16
13728: DOUBLE
13729: EQUAL
13730: IFTRUE 13734
13732: GO 13870
13734: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
13735: LD_ADDR_VAR 0 2
13739: PUSH
13740: LD_INT 2
13742: PUSH
13743: LD_INT 4
13745: PUSH
13746: LD_INT 5
13748: PUSH
13749: LD_INT 7
13751: PUSH
13752: LD_INT 11
13754: PUSH
13755: LD_INT 12
13757: PUSH
13758: LD_INT 15
13760: PUSH
13761: LD_INT 16
13763: PUSH
13764: LD_INT 20
13766: PUSH
13767: LD_INT 21
13769: PUSH
13770: LD_INT 22
13772: PUSH
13773: LD_INT 23
13775: PUSH
13776: LD_INT 25
13778: PUSH
13779: LD_INT 26
13781: PUSH
13782: LD_INT 30
13784: PUSH
13785: LD_INT 31
13787: PUSH
13788: LD_INT 32
13790: PUSH
13791: LD_INT 33
13793: PUSH
13794: LD_INT 34
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: PUSH
13818: LD_INT 101
13820: PUSH
13821: LD_INT 102
13823: PUSH
13824: LD_INT 103
13826: PUSH
13827: LD_INT 106
13829: PUSH
13830: LD_INT 108
13832: PUSH
13833: LD_INT 112
13835: PUSH
13836: LD_INT 113
13838: PUSH
13839: LD_INT 114
13841: PUSH
13842: LD_INT 116
13844: PUSH
13845: LD_INT 117
13847: PUSH
13848: LD_INT 118
13850: PUSH
13851: EMPTY
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: ST_TO_ADDR
13868: GO 14499
13870: LD_INT 17
13872: DOUBLE
13873: EQUAL
13874: IFTRUE 13878
13876: GO 14102
13878: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
13879: LD_ADDR_VAR 0 2
13883: PUSH
13884: LD_INT 1
13886: PUSH
13887: LD_INT 2
13889: PUSH
13890: LD_INT 3
13892: PUSH
13893: LD_INT 4
13895: PUSH
13896: LD_INT 5
13898: PUSH
13899: LD_INT 6
13901: PUSH
13902: LD_INT 7
13904: PUSH
13905: LD_INT 8
13907: PUSH
13908: LD_INT 9
13910: PUSH
13911: LD_INT 10
13913: PUSH
13914: LD_INT 11
13916: PUSH
13917: LD_INT 12
13919: PUSH
13920: LD_INT 13
13922: PUSH
13923: LD_INT 14
13925: PUSH
13926: LD_INT 15
13928: PUSH
13929: LD_INT 16
13931: PUSH
13932: LD_INT 17
13934: PUSH
13935: LD_INT 18
13937: PUSH
13938: LD_INT 19
13940: PUSH
13941: LD_INT 20
13943: PUSH
13944: LD_INT 21
13946: PUSH
13947: LD_INT 22
13949: PUSH
13950: LD_INT 23
13952: PUSH
13953: LD_INT 24
13955: PUSH
13956: LD_INT 25
13958: PUSH
13959: LD_INT 26
13961: PUSH
13962: LD_INT 27
13964: PUSH
13965: LD_INT 28
13967: PUSH
13968: LD_INT 29
13970: PUSH
13971: LD_INT 30
13973: PUSH
13974: LD_INT 31
13976: PUSH
13977: LD_INT 32
13979: PUSH
13980: LD_INT 33
13982: PUSH
13983: LD_INT 34
13985: PUSH
13986: LD_INT 36
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: PUSH
14026: LD_INT 101
14028: PUSH
14029: LD_INT 102
14031: PUSH
14032: LD_INT 103
14034: PUSH
14035: LD_INT 104
14037: PUSH
14038: LD_INT 105
14040: PUSH
14041: LD_INT 106
14043: PUSH
14044: LD_INT 107
14046: PUSH
14047: LD_INT 108
14049: PUSH
14050: LD_INT 109
14052: PUSH
14053: LD_INT 110
14055: PUSH
14056: LD_INT 111
14058: PUSH
14059: LD_INT 112
14061: PUSH
14062: LD_INT 113
14064: PUSH
14065: LD_INT 114
14067: PUSH
14068: LD_INT 116
14070: PUSH
14071: LD_INT 117
14073: PUSH
14074: LD_INT 118
14076: PUSH
14077: EMPTY
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: PUSH
14096: EMPTY
14097: LIST
14098: LIST
14099: ST_TO_ADDR
14100: GO 14499
14102: LD_INT 18
14104: DOUBLE
14105: EQUAL
14106: IFTRUE 14110
14108: GO 14258
14110: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14111: LD_ADDR_VAR 0 2
14115: PUSH
14116: LD_INT 2
14118: PUSH
14119: LD_INT 4
14121: PUSH
14122: LD_INT 5
14124: PUSH
14125: LD_INT 7
14127: PUSH
14128: LD_INT 11
14130: PUSH
14131: LD_INT 12
14133: PUSH
14134: LD_INT 15
14136: PUSH
14137: LD_INT 16
14139: PUSH
14140: LD_INT 20
14142: PUSH
14143: LD_INT 21
14145: PUSH
14146: LD_INT 22
14148: PUSH
14149: LD_INT 23
14151: PUSH
14152: LD_INT 25
14154: PUSH
14155: LD_INT 26
14157: PUSH
14158: LD_INT 30
14160: PUSH
14161: LD_INT 31
14163: PUSH
14164: LD_INT 32
14166: PUSH
14167: LD_INT 33
14169: PUSH
14170: LD_INT 34
14172: PUSH
14173: LD_INT 35
14175: PUSH
14176: LD_INT 36
14178: PUSH
14179: EMPTY
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: PUSH
14202: LD_INT 101
14204: PUSH
14205: LD_INT 102
14207: PUSH
14208: LD_INT 103
14210: PUSH
14211: LD_INT 106
14213: PUSH
14214: LD_INT 108
14216: PUSH
14217: LD_INT 112
14219: PUSH
14220: LD_INT 113
14222: PUSH
14223: LD_INT 114
14225: PUSH
14226: LD_INT 115
14228: PUSH
14229: LD_INT 116
14231: PUSH
14232: LD_INT 117
14234: PUSH
14235: LD_INT 118
14237: PUSH
14238: EMPTY
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: ST_TO_ADDR
14256: GO 14499
14258: LD_INT 19
14260: DOUBLE
14261: EQUAL
14262: IFTRUE 14266
14264: GO 14498
14266: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
14267: LD_ADDR_VAR 0 2
14271: PUSH
14272: LD_INT 1
14274: PUSH
14275: LD_INT 2
14277: PUSH
14278: LD_INT 3
14280: PUSH
14281: LD_INT 4
14283: PUSH
14284: LD_INT 5
14286: PUSH
14287: LD_INT 6
14289: PUSH
14290: LD_INT 7
14292: PUSH
14293: LD_INT 8
14295: PUSH
14296: LD_INT 9
14298: PUSH
14299: LD_INT 10
14301: PUSH
14302: LD_INT 11
14304: PUSH
14305: LD_INT 12
14307: PUSH
14308: LD_INT 13
14310: PUSH
14311: LD_INT 14
14313: PUSH
14314: LD_INT 15
14316: PUSH
14317: LD_INT 16
14319: PUSH
14320: LD_INT 17
14322: PUSH
14323: LD_INT 18
14325: PUSH
14326: LD_INT 19
14328: PUSH
14329: LD_INT 20
14331: PUSH
14332: LD_INT 21
14334: PUSH
14335: LD_INT 22
14337: PUSH
14338: LD_INT 23
14340: PUSH
14341: LD_INT 24
14343: PUSH
14344: LD_INT 25
14346: PUSH
14347: LD_INT 26
14349: PUSH
14350: LD_INT 27
14352: PUSH
14353: LD_INT 28
14355: PUSH
14356: LD_INT 29
14358: PUSH
14359: LD_INT 30
14361: PUSH
14362: LD_INT 31
14364: PUSH
14365: LD_INT 32
14367: PUSH
14368: LD_INT 33
14370: PUSH
14371: LD_INT 34
14373: PUSH
14374: LD_INT 35
14376: PUSH
14377: LD_INT 36
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: PUSH
14418: LD_INT 101
14420: PUSH
14421: LD_INT 102
14423: PUSH
14424: LD_INT 103
14426: PUSH
14427: LD_INT 104
14429: PUSH
14430: LD_INT 105
14432: PUSH
14433: LD_INT 106
14435: PUSH
14436: LD_INT 107
14438: PUSH
14439: LD_INT 108
14441: PUSH
14442: LD_INT 109
14444: PUSH
14445: LD_INT 110
14447: PUSH
14448: LD_INT 111
14450: PUSH
14451: LD_INT 112
14453: PUSH
14454: LD_INT 113
14456: PUSH
14457: LD_INT 114
14459: PUSH
14460: LD_INT 115
14462: PUSH
14463: LD_INT 116
14465: PUSH
14466: LD_INT 117
14468: PUSH
14469: LD_INT 118
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: PUSH
14492: EMPTY
14493: LIST
14494: LIST
14495: ST_TO_ADDR
14496: GO 14499
14498: POP
// end else
14499: GO 14730
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
14501: LD_ADDR_VAR 0 2
14505: PUSH
14506: LD_INT 1
14508: PUSH
14509: LD_INT 2
14511: PUSH
14512: LD_INT 3
14514: PUSH
14515: LD_INT 4
14517: PUSH
14518: LD_INT 5
14520: PUSH
14521: LD_INT 6
14523: PUSH
14524: LD_INT 7
14526: PUSH
14527: LD_INT 8
14529: PUSH
14530: LD_INT 9
14532: PUSH
14533: LD_INT 10
14535: PUSH
14536: LD_INT 11
14538: PUSH
14539: LD_INT 12
14541: PUSH
14542: LD_INT 13
14544: PUSH
14545: LD_INT 14
14547: PUSH
14548: LD_INT 15
14550: PUSH
14551: LD_INT 16
14553: PUSH
14554: LD_INT 17
14556: PUSH
14557: LD_INT 18
14559: PUSH
14560: LD_INT 19
14562: PUSH
14563: LD_INT 20
14565: PUSH
14566: LD_INT 21
14568: PUSH
14569: LD_INT 22
14571: PUSH
14572: LD_INT 23
14574: PUSH
14575: LD_INT 24
14577: PUSH
14578: LD_INT 25
14580: PUSH
14581: LD_INT 26
14583: PUSH
14584: LD_INT 27
14586: PUSH
14587: LD_INT 28
14589: PUSH
14590: LD_INT 29
14592: PUSH
14593: LD_INT 30
14595: PUSH
14596: LD_INT 31
14598: PUSH
14599: LD_INT 32
14601: PUSH
14602: LD_INT 33
14604: PUSH
14605: LD_INT 34
14607: PUSH
14608: LD_INT 35
14610: PUSH
14611: LD_INT 36
14613: PUSH
14614: EMPTY
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: PUSH
14652: LD_INT 101
14654: PUSH
14655: LD_INT 102
14657: PUSH
14658: LD_INT 103
14660: PUSH
14661: LD_INT 104
14663: PUSH
14664: LD_INT 105
14666: PUSH
14667: LD_INT 106
14669: PUSH
14670: LD_INT 107
14672: PUSH
14673: LD_INT 108
14675: PUSH
14676: LD_INT 109
14678: PUSH
14679: LD_INT 110
14681: PUSH
14682: LD_INT 111
14684: PUSH
14685: LD_INT 112
14687: PUSH
14688: LD_INT 113
14690: PUSH
14691: LD_INT 114
14693: PUSH
14694: LD_INT 115
14696: PUSH
14697: LD_INT 116
14699: PUSH
14700: LD_INT 117
14702: PUSH
14703: LD_INT 118
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: PUSH
14726: EMPTY
14727: LIST
14728: LIST
14729: ST_TO_ADDR
// if result then
14730: LD_VAR 0 2
14734: IFFALSE 15520
// begin normal :=  ;
14736: LD_ADDR_VAR 0 5
14740: PUSH
14741: LD_STRING 
14743: ST_TO_ADDR
// hardcore :=  ;
14744: LD_ADDR_VAR 0 6
14748: PUSH
14749: LD_STRING 
14751: ST_TO_ADDR
// active :=  ;
14752: LD_ADDR_VAR 0 7
14756: PUSH
14757: LD_STRING 
14759: ST_TO_ADDR
// for i = 1 to normalCounter do
14760: LD_ADDR_VAR 0 8
14764: PUSH
14765: DOUBLE
14766: LD_INT 1
14768: DEC
14769: ST_TO_ADDR
14770: LD_EXP 27
14774: PUSH
14775: FOR_TO
14776: IFFALSE 14877
// begin tmp := 0 ;
14778: LD_ADDR_VAR 0 3
14782: PUSH
14783: LD_STRING 0
14785: ST_TO_ADDR
// if result [ 1 ] then
14786: LD_VAR 0 2
14790: PUSH
14791: LD_INT 1
14793: ARRAY
14794: IFFALSE 14859
// if result [ 1 ] [ 1 ] = i then
14796: LD_VAR 0 2
14800: PUSH
14801: LD_INT 1
14803: ARRAY
14804: PUSH
14805: LD_INT 1
14807: ARRAY
14808: PUSH
14809: LD_VAR 0 8
14813: EQUAL
14814: IFFALSE 14859
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14816: LD_ADDR_VAR 0 2
14820: PUSH
14821: LD_VAR 0 2
14825: PPUSH
14826: LD_INT 1
14828: PPUSH
14829: LD_VAR 0 2
14833: PUSH
14834: LD_INT 1
14836: ARRAY
14837: PPUSH
14838: LD_INT 1
14840: PPUSH
14841: CALL_OW 3
14845: PPUSH
14846: CALL_OW 1
14850: ST_TO_ADDR
// tmp := 1 ;
14851: LD_ADDR_VAR 0 3
14855: PUSH
14856: LD_STRING 1
14858: ST_TO_ADDR
// end ; normal := normal & tmp ;
14859: LD_ADDR_VAR 0 5
14863: PUSH
14864: LD_VAR 0 5
14868: PUSH
14869: LD_VAR 0 3
14873: STR
14874: ST_TO_ADDR
// end ;
14875: GO 14775
14877: POP
14878: POP
// for i = 1 to hardcoreCounter do
14879: LD_ADDR_VAR 0 8
14883: PUSH
14884: DOUBLE
14885: LD_INT 1
14887: DEC
14888: ST_TO_ADDR
14889: LD_EXP 28
14893: PUSH
14894: FOR_TO
14895: IFFALSE 15000
// begin tmp := 0 ;
14897: LD_ADDR_VAR 0 3
14901: PUSH
14902: LD_STRING 0
14904: ST_TO_ADDR
// if result [ 2 ] then
14905: LD_VAR 0 2
14909: PUSH
14910: LD_INT 2
14912: ARRAY
14913: IFFALSE 14982
// if result [ 2 ] [ 1 ] = 100 + i then
14915: LD_VAR 0 2
14919: PUSH
14920: LD_INT 2
14922: ARRAY
14923: PUSH
14924: LD_INT 1
14926: ARRAY
14927: PUSH
14928: LD_INT 100
14930: PUSH
14931: LD_VAR 0 8
14935: PLUS
14936: EQUAL
14937: IFFALSE 14982
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14939: LD_ADDR_VAR 0 2
14943: PUSH
14944: LD_VAR 0 2
14948: PPUSH
14949: LD_INT 2
14951: PPUSH
14952: LD_VAR 0 2
14956: PUSH
14957: LD_INT 2
14959: ARRAY
14960: PPUSH
14961: LD_INT 1
14963: PPUSH
14964: CALL_OW 3
14968: PPUSH
14969: CALL_OW 1
14973: ST_TO_ADDR
// tmp := 1 ;
14974: LD_ADDR_VAR 0 3
14978: PUSH
14979: LD_STRING 1
14981: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14982: LD_ADDR_VAR 0 6
14986: PUSH
14987: LD_VAR 0 6
14991: PUSH
14992: LD_VAR 0 3
14996: STR
14997: ST_TO_ADDR
// end ;
14998: GO 14894
15000: POP
15001: POP
// if isGameLoad then
15002: LD_VAR 0 1
15006: IFFALSE 15481
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15008: LD_ADDR_VAR 0 4
15012: PUSH
15013: LD_EXP 31
15017: PUSH
15018: LD_EXP 30
15022: PUSH
15023: LD_EXP 32
15027: PUSH
15028: LD_EXP 29
15032: PUSH
15033: LD_EXP 33
15037: PUSH
15038: LD_EXP 34
15042: PUSH
15043: LD_EXP 35
15047: PUSH
15048: LD_EXP 36
15052: PUSH
15053: LD_EXP 37
15057: PUSH
15058: LD_EXP 38
15062: PUSH
15063: LD_EXP 39
15067: PUSH
15068: LD_EXP 40
15072: PUSH
15073: LD_EXP 41
15077: PUSH
15078: LD_EXP 42
15082: PUSH
15083: LD_EXP 50
15087: PUSH
15088: LD_EXP 51
15092: PUSH
15093: LD_EXP 52
15097: PUSH
15098: LD_EXP 53
15102: PUSH
15103: LD_EXP 55
15107: PUSH
15108: LD_EXP 56
15112: PUSH
15113: LD_EXP 57
15117: PUSH
15118: LD_EXP 60
15122: PUSH
15123: LD_EXP 62
15127: PUSH
15128: LD_EXP 63
15132: PUSH
15133: LD_EXP 64
15137: PUSH
15138: LD_EXP 66
15142: PUSH
15143: LD_EXP 67
15147: PUSH
15148: LD_EXP 70
15152: PUSH
15153: LD_EXP 71
15157: PUSH
15158: LD_EXP 72
15162: PUSH
15163: LD_EXP 73
15167: PUSH
15168: LD_EXP 74
15172: PUSH
15173: LD_EXP 75
15177: PUSH
15178: LD_EXP 76
15182: PUSH
15183: LD_EXP 77
15187: PUSH
15188: LD_EXP 78
15192: PUSH
15193: LD_EXP 43
15197: PUSH
15198: LD_EXP 44
15202: PUSH
15203: LD_EXP 47
15207: PUSH
15208: LD_EXP 48
15212: PUSH
15213: LD_EXP 49
15217: PUSH
15218: LD_EXP 45
15222: PUSH
15223: LD_EXP 46
15227: PUSH
15228: LD_EXP 54
15232: PUSH
15233: LD_EXP 58
15237: PUSH
15238: LD_EXP 59
15242: PUSH
15243: LD_EXP 61
15247: PUSH
15248: LD_EXP 65
15252: PUSH
15253: LD_EXP 68
15257: PUSH
15258: LD_EXP 69
15262: PUSH
15263: LD_EXP 79
15267: PUSH
15268: LD_EXP 80
15272: PUSH
15273: LD_EXP 81
15277: PUSH
15278: LD_EXP 82
15282: PUSH
15283: EMPTY
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: ST_TO_ADDR
// tmp :=  ;
15339: LD_ADDR_VAR 0 3
15343: PUSH
15344: LD_STRING 
15346: ST_TO_ADDR
// for i = 1 to normalCounter do
15347: LD_ADDR_VAR 0 8
15351: PUSH
15352: DOUBLE
15353: LD_INT 1
15355: DEC
15356: ST_TO_ADDR
15357: LD_EXP 27
15361: PUSH
15362: FOR_TO
15363: IFFALSE 15399
// begin if flags [ i ] then
15365: LD_VAR 0 4
15369: PUSH
15370: LD_VAR 0 8
15374: ARRAY
15375: IFFALSE 15397
// tmp := tmp & i & ; ;
15377: LD_ADDR_VAR 0 3
15381: PUSH
15382: LD_VAR 0 3
15386: PUSH
15387: LD_VAR 0 8
15391: STR
15392: PUSH
15393: LD_STRING ;
15395: STR
15396: ST_TO_ADDR
// end ;
15397: GO 15362
15399: POP
15400: POP
// for i = 1 to hardcoreCounter do
15401: LD_ADDR_VAR 0 8
15405: PUSH
15406: DOUBLE
15407: LD_INT 1
15409: DEC
15410: ST_TO_ADDR
15411: LD_EXP 28
15415: PUSH
15416: FOR_TO
15417: IFFALSE 15463
// begin if flags [ normalCounter + i ] then
15419: LD_VAR 0 4
15423: PUSH
15424: LD_EXP 27
15428: PUSH
15429: LD_VAR 0 8
15433: PLUS
15434: ARRAY
15435: IFFALSE 15461
// tmp := tmp & ( 100 + i ) & ; ;
15437: LD_ADDR_VAR 0 3
15441: PUSH
15442: LD_VAR 0 3
15446: PUSH
15447: LD_INT 100
15449: PUSH
15450: LD_VAR 0 8
15454: PLUS
15455: STR
15456: PUSH
15457: LD_STRING ;
15459: STR
15460: ST_TO_ADDR
// end ;
15461: GO 15416
15463: POP
15464: POP
// if tmp then
15465: LD_VAR 0 3
15469: IFFALSE 15481
// active := tmp ;
15471: LD_ADDR_VAR 0 7
15475: PUSH
15476: LD_VAR 0 3
15480: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
15481: LD_STRING getStreamItemsFromMission("
15483: PUSH
15484: LD_VAR 0 5
15488: STR
15489: PUSH
15490: LD_STRING ","
15492: STR
15493: PUSH
15494: LD_VAR 0 6
15498: STR
15499: PUSH
15500: LD_STRING ","
15502: STR
15503: PUSH
15504: LD_VAR 0 7
15508: STR
15509: PUSH
15510: LD_STRING ")
15512: STR
15513: PPUSH
15514: CALL_OW 559
// end else
15518: GO 15527
// ToLua ( getStreamItemsFromMission("","","") ) ;
15520: LD_STRING getStreamItemsFromMission("","","")
15522: PPUSH
15523: CALL_OW 559
// end ;
15527: LD_VAR 0 2
15531: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15532: LD_EXP 26
15536: PUSH
15537: LD_EXP 31
15541: AND
15542: IFFALSE 15666
15544: GO 15546
15546: DISABLE
15547: LD_INT 0
15549: PPUSH
15550: PPUSH
// begin enable ;
15551: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15552: LD_ADDR_VAR 0 2
15556: PUSH
15557: LD_INT 22
15559: PUSH
15560: LD_OWVAR 2
15564: PUSH
15565: EMPTY
15566: LIST
15567: LIST
15568: PUSH
15569: LD_INT 2
15571: PUSH
15572: LD_INT 34
15574: PUSH
15575: LD_INT 7
15577: PUSH
15578: EMPTY
15579: LIST
15580: LIST
15581: PUSH
15582: LD_INT 34
15584: PUSH
15585: LD_INT 45
15587: PUSH
15588: EMPTY
15589: LIST
15590: LIST
15591: PUSH
15592: LD_INT 34
15594: PUSH
15595: LD_INT 28
15597: PUSH
15598: EMPTY
15599: LIST
15600: LIST
15601: PUSH
15602: LD_INT 34
15604: PUSH
15605: LD_INT 47
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: PUSH
15619: EMPTY
15620: LIST
15621: LIST
15622: PPUSH
15623: CALL_OW 69
15627: ST_TO_ADDR
// if not tmp then
15628: LD_VAR 0 2
15632: NOT
15633: IFFALSE 15637
// exit ;
15635: GO 15666
// for i in tmp do
15637: LD_ADDR_VAR 0 1
15641: PUSH
15642: LD_VAR 0 2
15646: PUSH
15647: FOR_IN
15648: IFFALSE 15664
// begin SetLives ( i , 0 ) ;
15650: LD_VAR 0 1
15654: PPUSH
15655: LD_INT 0
15657: PPUSH
15658: CALL_OW 234
// end ;
15662: GO 15647
15664: POP
15665: POP
// end ;
15666: PPOPN 2
15668: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15669: LD_EXP 26
15673: PUSH
15674: LD_EXP 32
15678: AND
15679: IFFALSE 15763
15681: GO 15683
15683: DISABLE
15684: LD_INT 0
15686: PPUSH
15687: PPUSH
// begin enable ;
15688: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15689: LD_ADDR_VAR 0 2
15693: PUSH
15694: LD_INT 22
15696: PUSH
15697: LD_OWVAR 2
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: PUSH
15706: LD_INT 32
15708: PUSH
15709: LD_INT 3
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: PUSH
15716: EMPTY
15717: LIST
15718: LIST
15719: PPUSH
15720: CALL_OW 69
15724: ST_TO_ADDR
// if not tmp then
15725: LD_VAR 0 2
15729: NOT
15730: IFFALSE 15734
// exit ;
15732: GO 15763
// for i in tmp do
15734: LD_ADDR_VAR 0 1
15738: PUSH
15739: LD_VAR 0 2
15743: PUSH
15744: FOR_IN
15745: IFFALSE 15761
// begin SetLives ( i , 0 ) ;
15747: LD_VAR 0 1
15751: PPUSH
15752: LD_INT 0
15754: PPUSH
15755: CALL_OW 234
// end ;
15759: GO 15744
15761: POP
15762: POP
// end ;
15763: PPOPN 2
15765: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15766: LD_EXP 26
15770: PUSH
15771: LD_EXP 29
15775: AND
15776: IFFALSE 15869
15778: GO 15780
15780: DISABLE
15781: LD_INT 0
15783: PPUSH
// begin enable ;
15784: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15785: LD_ADDR_VAR 0 1
15789: PUSH
15790: LD_INT 22
15792: PUSH
15793: LD_OWVAR 2
15797: PUSH
15798: EMPTY
15799: LIST
15800: LIST
15801: PUSH
15802: LD_INT 2
15804: PUSH
15805: LD_INT 25
15807: PUSH
15808: LD_INT 5
15810: PUSH
15811: EMPTY
15812: LIST
15813: LIST
15814: PUSH
15815: LD_INT 25
15817: PUSH
15818: LD_INT 9
15820: PUSH
15821: EMPTY
15822: LIST
15823: LIST
15824: PUSH
15825: LD_INT 25
15827: PUSH
15828: LD_INT 8
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: PUSH
15835: EMPTY
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: PUSH
15841: EMPTY
15842: LIST
15843: LIST
15844: PPUSH
15845: CALL_OW 69
15849: PUSH
15850: FOR_IN
15851: IFFALSE 15867
// begin SetClass ( i , 1 ) ;
15853: LD_VAR 0 1
15857: PPUSH
15858: LD_INT 1
15860: PPUSH
15861: CALL_OW 336
// end ;
15865: GO 15850
15867: POP
15868: POP
// end ;
15869: PPOPN 1
15871: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15872: LD_EXP 26
15876: PUSH
15877: LD_EXP 30
15881: AND
15882: PUSH
15883: LD_OWVAR 65
15887: PUSH
15888: LD_INT 7
15890: LESS
15891: AND
15892: IFFALSE 15906
15894: GO 15896
15896: DISABLE
// begin enable ;
15897: ENABLE
// game_speed := 7 ;
15898: LD_ADDR_OWVAR 65
15902: PUSH
15903: LD_INT 7
15905: ST_TO_ADDR
// end ;
15906: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15907: LD_EXP 26
15911: PUSH
15912: LD_EXP 33
15916: AND
15917: IFFALSE 16119
15919: GO 15921
15921: DISABLE
15922: LD_INT 0
15924: PPUSH
15925: PPUSH
15926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15927: LD_ADDR_VAR 0 3
15931: PUSH
15932: LD_INT 81
15934: PUSH
15935: LD_OWVAR 2
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: PUSH
15944: LD_INT 21
15946: PUSH
15947: LD_INT 1
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PUSH
15954: EMPTY
15955: LIST
15956: LIST
15957: PPUSH
15958: CALL_OW 69
15962: ST_TO_ADDR
// if not tmp then
15963: LD_VAR 0 3
15967: NOT
15968: IFFALSE 15972
// exit ;
15970: GO 16119
// if tmp > 5 then
15972: LD_VAR 0 3
15976: PUSH
15977: LD_INT 5
15979: GREATER
15980: IFFALSE 15992
// k := 5 else
15982: LD_ADDR_VAR 0 2
15986: PUSH
15987: LD_INT 5
15989: ST_TO_ADDR
15990: GO 16002
// k := tmp ;
15992: LD_ADDR_VAR 0 2
15996: PUSH
15997: LD_VAR 0 3
16001: ST_TO_ADDR
// for i := 1 to k do
16002: LD_ADDR_VAR 0 1
16006: PUSH
16007: DOUBLE
16008: LD_INT 1
16010: DEC
16011: ST_TO_ADDR
16012: LD_VAR 0 2
16016: PUSH
16017: FOR_TO
16018: IFFALSE 16117
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16020: LD_VAR 0 3
16024: PUSH
16025: LD_VAR 0 1
16029: ARRAY
16030: PPUSH
16031: LD_VAR 0 1
16035: PUSH
16036: LD_INT 4
16038: MOD
16039: PUSH
16040: LD_INT 1
16042: PLUS
16043: PPUSH
16044: CALL_OW 259
16048: PUSH
16049: LD_INT 10
16051: LESS
16052: IFFALSE 16115
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16054: LD_VAR 0 3
16058: PUSH
16059: LD_VAR 0 1
16063: ARRAY
16064: PPUSH
16065: LD_VAR 0 1
16069: PUSH
16070: LD_INT 4
16072: MOD
16073: PUSH
16074: LD_INT 1
16076: PLUS
16077: PPUSH
16078: LD_VAR 0 3
16082: PUSH
16083: LD_VAR 0 1
16087: ARRAY
16088: PPUSH
16089: LD_VAR 0 1
16093: PUSH
16094: LD_INT 4
16096: MOD
16097: PUSH
16098: LD_INT 1
16100: PLUS
16101: PPUSH
16102: CALL_OW 259
16106: PUSH
16107: LD_INT 1
16109: PLUS
16110: PPUSH
16111: CALL_OW 237
16115: GO 16017
16117: POP
16118: POP
// end ;
16119: PPOPN 3
16121: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16122: LD_EXP 26
16126: PUSH
16127: LD_EXP 34
16131: AND
16132: IFFALSE 16152
16134: GO 16136
16136: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16137: LD_INT 4
16139: PPUSH
16140: LD_OWVAR 2
16144: PPUSH
16145: LD_INT 0
16147: PPUSH
16148: CALL_OW 324
16152: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16153: LD_EXP 26
16157: PUSH
16158: LD_EXP 63
16162: AND
16163: IFFALSE 16183
16165: GO 16167
16167: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16168: LD_INT 19
16170: PPUSH
16171: LD_OWVAR 2
16175: PPUSH
16176: LD_INT 0
16178: PPUSH
16179: CALL_OW 324
16183: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16184: LD_EXP 26
16188: PUSH
16189: LD_EXP 35
16193: AND
16194: IFFALSE 16296
16196: GO 16198
16198: DISABLE
16199: LD_INT 0
16201: PPUSH
16202: PPUSH
// begin enable ;
16203: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16204: LD_ADDR_VAR 0 2
16208: PUSH
16209: LD_INT 22
16211: PUSH
16212: LD_OWVAR 2
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: PUSH
16221: LD_INT 2
16223: PUSH
16224: LD_INT 34
16226: PUSH
16227: LD_INT 11
16229: PUSH
16230: EMPTY
16231: LIST
16232: LIST
16233: PUSH
16234: LD_INT 34
16236: PUSH
16237: LD_INT 30
16239: PUSH
16240: EMPTY
16241: LIST
16242: LIST
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: LIST
16248: PUSH
16249: EMPTY
16250: LIST
16251: LIST
16252: PPUSH
16253: CALL_OW 69
16257: ST_TO_ADDR
// if not tmp then
16258: LD_VAR 0 2
16262: NOT
16263: IFFALSE 16267
// exit ;
16265: GO 16296
// for i in tmp do
16267: LD_ADDR_VAR 0 1
16271: PUSH
16272: LD_VAR 0 2
16276: PUSH
16277: FOR_IN
16278: IFFALSE 16294
// begin SetLives ( i , 0 ) ;
16280: LD_VAR 0 1
16284: PPUSH
16285: LD_INT 0
16287: PPUSH
16288: CALL_OW 234
// end ;
16292: GO 16277
16294: POP
16295: POP
// end ;
16296: PPOPN 2
16298: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16299: LD_EXP 26
16303: PUSH
16304: LD_EXP 36
16308: AND
16309: IFFALSE 16329
16311: GO 16313
16313: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16314: LD_INT 32
16316: PPUSH
16317: LD_OWVAR 2
16321: PPUSH
16322: LD_INT 0
16324: PPUSH
16325: CALL_OW 324
16329: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16330: LD_EXP 26
16334: PUSH
16335: LD_EXP 37
16339: AND
16340: IFFALSE 16521
16342: GO 16344
16344: DISABLE
16345: LD_INT 0
16347: PPUSH
16348: PPUSH
16349: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16350: LD_ADDR_VAR 0 2
16354: PUSH
16355: LD_INT 22
16357: PUSH
16358: LD_OWVAR 2
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: PUSH
16367: LD_INT 33
16369: PUSH
16370: LD_INT 3
16372: PUSH
16373: EMPTY
16374: LIST
16375: LIST
16376: PUSH
16377: EMPTY
16378: LIST
16379: LIST
16380: PPUSH
16381: CALL_OW 69
16385: ST_TO_ADDR
// if not tmp then
16386: LD_VAR 0 2
16390: NOT
16391: IFFALSE 16395
// exit ;
16393: GO 16521
// side := 0 ;
16395: LD_ADDR_VAR 0 3
16399: PUSH
16400: LD_INT 0
16402: ST_TO_ADDR
// for i := 1 to 8 do
16403: LD_ADDR_VAR 0 1
16407: PUSH
16408: DOUBLE
16409: LD_INT 1
16411: DEC
16412: ST_TO_ADDR
16413: LD_INT 8
16415: PUSH
16416: FOR_TO
16417: IFFALSE 16465
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16419: LD_OWVAR 2
16423: PUSH
16424: LD_VAR 0 1
16428: NONEQUAL
16429: PUSH
16430: LD_OWVAR 2
16434: PPUSH
16435: LD_VAR 0 1
16439: PPUSH
16440: CALL_OW 81
16444: PUSH
16445: LD_INT 2
16447: EQUAL
16448: AND
16449: IFFALSE 16463
// begin side := i ;
16451: LD_ADDR_VAR 0 3
16455: PUSH
16456: LD_VAR 0 1
16460: ST_TO_ADDR
// break ;
16461: GO 16465
// end ;
16463: GO 16416
16465: POP
16466: POP
// if not side then
16467: LD_VAR 0 3
16471: NOT
16472: IFFALSE 16476
// exit ;
16474: GO 16521
// for i := 1 to tmp do
16476: LD_ADDR_VAR 0 1
16480: PUSH
16481: DOUBLE
16482: LD_INT 1
16484: DEC
16485: ST_TO_ADDR
16486: LD_VAR 0 2
16490: PUSH
16491: FOR_TO
16492: IFFALSE 16519
// if Prob ( 60 ) then
16494: LD_INT 60
16496: PPUSH
16497: CALL_OW 13
16501: IFFALSE 16517
// SetSide ( i , side ) ;
16503: LD_VAR 0 1
16507: PPUSH
16508: LD_VAR 0 3
16512: PPUSH
16513: CALL_OW 235
16517: GO 16491
16519: POP
16520: POP
// end ;
16521: PPOPN 3
16523: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16524: LD_EXP 26
16528: PUSH
16529: LD_EXP 39
16533: AND
16534: IFFALSE 16653
16536: GO 16538
16538: DISABLE
16539: LD_INT 0
16541: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16542: LD_ADDR_VAR 0 1
16546: PUSH
16547: LD_INT 22
16549: PUSH
16550: LD_OWVAR 2
16554: PUSH
16555: EMPTY
16556: LIST
16557: LIST
16558: PUSH
16559: LD_INT 21
16561: PUSH
16562: LD_INT 1
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: PUSH
16569: LD_INT 3
16571: PUSH
16572: LD_INT 23
16574: PUSH
16575: LD_INT 0
16577: PUSH
16578: EMPTY
16579: LIST
16580: LIST
16581: PUSH
16582: EMPTY
16583: LIST
16584: LIST
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: LIST
16590: PPUSH
16591: CALL_OW 69
16595: PUSH
16596: FOR_IN
16597: IFFALSE 16651
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16599: LD_VAR 0 1
16603: PPUSH
16604: CALL_OW 257
16608: PUSH
16609: LD_INT 1
16611: PUSH
16612: LD_INT 2
16614: PUSH
16615: LD_INT 3
16617: PUSH
16618: LD_INT 4
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: IN
16627: IFFALSE 16649
// SetClass ( un , rand ( 1 , 4 ) ) ;
16629: LD_VAR 0 1
16633: PPUSH
16634: LD_INT 1
16636: PPUSH
16637: LD_INT 4
16639: PPUSH
16640: CALL_OW 12
16644: PPUSH
16645: CALL_OW 336
16649: GO 16596
16651: POP
16652: POP
// end ;
16653: PPOPN 1
16655: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16656: LD_EXP 26
16660: PUSH
16661: LD_EXP 38
16665: AND
16666: IFFALSE 16745
16668: GO 16670
16670: DISABLE
16671: LD_INT 0
16673: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16674: LD_ADDR_VAR 0 1
16678: PUSH
16679: LD_INT 22
16681: PUSH
16682: LD_OWVAR 2
16686: PUSH
16687: EMPTY
16688: LIST
16689: LIST
16690: PUSH
16691: LD_INT 21
16693: PUSH
16694: LD_INT 3
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: PUSH
16701: EMPTY
16702: LIST
16703: LIST
16704: PPUSH
16705: CALL_OW 69
16709: ST_TO_ADDR
// if not tmp then
16710: LD_VAR 0 1
16714: NOT
16715: IFFALSE 16719
// exit ;
16717: GO 16745
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16719: LD_VAR 0 1
16723: PUSH
16724: LD_INT 1
16726: PPUSH
16727: LD_VAR 0 1
16731: PPUSH
16732: CALL_OW 12
16736: ARRAY
16737: PPUSH
16738: LD_INT 100
16740: PPUSH
16741: CALL_OW 234
// end ;
16745: PPOPN 1
16747: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16748: LD_EXP 26
16752: PUSH
16753: LD_EXP 40
16757: AND
16758: IFFALSE 16856
16760: GO 16762
16762: DISABLE
16763: LD_INT 0
16765: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16766: LD_ADDR_VAR 0 1
16770: PUSH
16771: LD_INT 22
16773: PUSH
16774: LD_OWVAR 2
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: PUSH
16783: LD_INT 21
16785: PUSH
16786: LD_INT 1
16788: PUSH
16789: EMPTY
16790: LIST
16791: LIST
16792: PUSH
16793: EMPTY
16794: LIST
16795: LIST
16796: PPUSH
16797: CALL_OW 69
16801: ST_TO_ADDR
// if not tmp then
16802: LD_VAR 0 1
16806: NOT
16807: IFFALSE 16811
// exit ;
16809: GO 16856
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16811: LD_VAR 0 1
16815: PUSH
16816: LD_INT 1
16818: PPUSH
16819: LD_VAR 0 1
16823: PPUSH
16824: CALL_OW 12
16828: ARRAY
16829: PPUSH
16830: LD_INT 1
16832: PPUSH
16833: LD_INT 4
16835: PPUSH
16836: CALL_OW 12
16840: PPUSH
16841: LD_INT 3000
16843: PPUSH
16844: LD_INT 9000
16846: PPUSH
16847: CALL_OW 12
16851: PPUSH
16852: CALL_OW 492
// end ;
16856: PPOPN 1
16858: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16859: LD_EXP 26
16863: PUSH
16864: LD_EXP 41
16868: AND
16869: IFFALSE 16889
16871: GO 16873
16873: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16874: LD_INT 1
16876: PPUSH
16877: LD_OWVAR 2
16881: PPUSH
16882: LD_INT 0
16884: PPUSH
16885: CALL_OW 324
16889: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16890: LD_EXP 26
16894: PUSH
16895: LD_EXP 42
16899: AND
16900: IFFALSE 16983
16902: GO 16904
16904: DISABLE
16905: LD_INT 0
16907: PPUSH
16908: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16909: LD_ADDR_VAR 0 2
16913: PUSH
16914: LD_INT 22
16916: PUSH
16917: LD_OWVAR 2
16921: PUSH
16922: EMPTY
16923: LIST
16924: LIST
16925: PUSH
16926: LD_INT 21
16928: PUSH
16929: LD_INT 3
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: PUSH
16936: EMPTY
16937: LIST
16938: LIST
16939: PPUSH
16940: CALL_OW 69
16944: ST_TO_ADDR
// if not tmp then
16945: LD_VAR 0 2
16949: NOT
16950: IFFALSE 16954
// exit ;
16952: GO 16983
// for i in tmp do
16954: LD_ADDR_VAR 0 1
16958: PUSH
16959: LD_VAR 0 2
16963: PUSH
16964: FOR_IN
16965: IFFALSE 16981
// SetBLevel ( i , 10 ) ;
16967: LD_VAR 0 1
16971: PPUSH
16972: LD_INT 10
16974: PPUSH
16975: CALL_OW 241
16979: GO 16964
16981: POP
16982: POP
// end ;
16983: PPOPN 2
16985: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16986: LD_EXP 26
16990: PUSH
16991: LD_EXP 43
16995: AND
16996: IFFALSE 17107
16998: GO 17000
17000: DISABLE
17001: LD_INT 0
17003: PPUSH
17004: PPUSH
17005: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17006: LD_ADDR_VAR 0 3
17010: PUSH
17011: LD_INT 22
17013: PUSH
17014: LD_OWVAR 2
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: PUSH
17023: LD_INT 25
17025: PUSH
17026: LD_INT 1
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PPUSH
17037: CALL_OW 69
17041: ST_TO_ADDR
// if not tmp then
17042: LD_VAR 0 3
17046: NOT
17047: IFFALSE 17051
// exit ;
17049: GO 17107
// un := tmp [ rand ( 1 , tmp ) ] ;
17051: LD_ADDR_VAR 0 2
17055: PUSH
17056: LD_VAR 0 3
17060: PUSH
17061: LD_INT 1
17063: PPUSH
17064: LD_VAR 0 3
17068: PPUSH
17069: CALL_OW 12
17073: ARRAY
17074: ST_TO_ADDR
// if Crawls ( un ) then
17075: LD_VAR 0 2
17079: PPUSH
17080: CALL_OW 318
17084: IFFALSE 17095
// ComWalk ( un ) ;
17086: LD_VAR 0 2
17090: PPUSH
17091: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17095: LD_VAR 0 2
17099: PPUSH
17100: LD_INT 5
17102: PPUSH
17103: CALL_OW 336
// end ;
17107: PPOPN 3
17109: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17110: LD_EXP 26
17114: PUSH
17115: LD_EXP 44
17119: AND
17120: PUSH
17121: LD_OWVAR 67
17125: PUSH
17126: LD_INT 4
17128: LESS
17129: AND
17130: IFFALSE 17149
17132: GO 17134
17134: DISABLE
// begin Difficulty := Difficulty + 1 ;
17135: LD_ADDR_OWVAR 67
17139: PUSH
17140: LD_OWVAR 67
17144: PUSH
17145: LD_INT 1
17147: PLUS
17148: ST_TO_ADDR
// end ;
17149: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17150: LD_EXP 26
17154: PUSH
17155: LD_EXP 45
17159: AND
17160: IFFALSE 17263
17162: GO 17164
17164: DISABLE
17165: LD_INT 0
17167: PPUSH
// begin for i := 1 to 5 do
17168: LD_ADDR_VAR 0 1
17172: PUSH
17173: DOUBLE
17174: LD_INT 1
17176: DEC
17177: ST_TO_ADDR
17178: LD_INT 5
17180: PUSH
17181: FOR_TO
17182: IFFALSE 17261
// begin uc_nation := nation_nature ;
17184: LD_ADDR_OWVAR 21
17188: PUSH
17189: LD_INT 0
17191: ST_TO_ADDR
// uc_side := 0 ;
17192: LD_ADDR_OWVAR 20
17196: PUSH
17197: LD_INT 0
17199: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17200: LD_ADDR_OWVAR 29
17204: PUSH
17205: LD_INT 12
17207: PUSH
17208: LD_INT 12
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: ST_TO_ADDR
// hc_agressivity := 20 ;
17215: LD_ADDR_OWVAR 35
17219: PUSH
17220: LD_INT 20
17222: ST_TO_ADDR
// hc_class := class_tiger ;
17223: LD_ADDR_OWVAR 28
17227: PUSH
17228: LD_INT 14
17230: ST_TO_ADDR
// hc_gallery :=  ;
17231: LD_ADDR_OWVAR 33
17235: PUSH
17236: LD_STRING 
17238: ST_TO_ADDR
// hc_name :=  ;
17239: LD_ADDR_OWVAR 26
17243: PUSH
17244: LD_STRING 
17246: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17247: CALL_OW 44
17251: PPUSH
17252: LD_INT 0
17254: PPUSH
17255: CALL_OW 51
// end ;
17259: GO 17181
17261: POP
17262: POP
// end ;
17263: PPOPN 1
17265: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17266: LD_EXP 26
17270: PUSH
17271: LD_EXP 46
17275: AND
17276: IFFALSE 17285
17278: GO 17280
17280: DISABLE
// StreamSibBomb ;
17281: CALL 17286 0 0
17285: END
// export function StreamSibBomb ; var i , x , y ; begin
17286: LD_INT 0
17288: PPUSH
17289: PPUSH
17290: PPUSH
17291: PPUSH
// result := false ;
17292: LD_ADDR_VAR 0 1
17296: PUSH
17297: LD_INT 0
17299: ST_TO_ADDR
// for i := 1 to 16 do
17300: LD_ADDR_VAR 0 2
17304: PUSH
17305: DOUBLE
17306: LD_INT 1
17308: DEC
17309: ST_TO_ADDR
17310: LD_INT 16
17312: PUSH
17313: FOR_TO
17314: IFFALSE 17513
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17316: LD_ADDR_VAR 0 3
17320: PUSH
17321: LD_INT 10
17323: PUSH
17324: LD_INT 20
17326: PUSH
17327: LD_INT 30
17329: PUSH
17330: LD_INT 40
17332: PUSH
17333: LD_INT 50
17335: PUSH
17336: LD_INT 60
17338: PUSH
17339: LD_INT 70
17341: PUSH
17342: LD_INT 80
17344: PUSH
17345: LD_INT 90
17347: PUSH
17348: LD_INT 100
17350: PUSH
17351: LD_INT 110
17353: PUSH
17354: LD_INT 120
17356: PUSH
17357: LD_INT 130
17359: PUSH
17360: LD_INT 140
17362: PUSH
17363: LD_INT 150
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: LIST
17380: LIST
17381: LIST
17382: PUSH
17383: LD_INT 1
17385: PPUSH
17386: LD_INT 15
17388: PPUSH
17389: CALL_OW 12
17393: ARRAY
17394: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17395: LD_ADDR_VAR 0 4
17399: PUSH
17400: LD_INT 10
17402: PUSH
17403: LD_INT 20
17405: PUSH
17406: LD_INT 30
17408: PUSH
17409: LD_INT 40
17411: PUSH
17412: LD_INT 50
17414: PUSH
17415: LD_INT 60
17417: PUSH
17418: LD_INT 70
17420: PUSH
17421: LD_INT 80
17423: PUSH
17424: LD_INT 90
17426: PUSH
17427: LD_INT 100
17429: PUSH
17430: LD_INT 110
17432: PUSH
17433: LD_INT 120
17435: PUSH
17436: LD_INT 130
17438: PUSH
17439: LD_INT 140
17441: PUSH
17442: LD_INT 150
17444: PUSH
17445: EMPTY
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: PUSH
17462: LD_INT 1
17464: PPUSH
17465: LD_INT 15
17467: PPUSH
17468: CALL_OW 12
17472: ARRAY
17473: ST_TO_ADDR
// if ValidHex ( x , y ) then
17474: LD_VAR 0 3
17478: PPUSH
17479: LD_VAR 0 4
17483: PPUSH
17484: CALL_OW 488
17488: IFFALSE 17511
// begin result := [ x , y ] ;
17490: LD_ADDR_VAR 0 1
17494: PUSH
17495: LD_VAR 0 3
17499: PUSH
17500: LD_VAR 0 4
17504: PUSH
17505: EMPTY
17506: LIST
17507: LIST
17508: ST_TO_ADDR
// break ;
17509: GO 17513
// end ; end ;
17511: GO 17313
17513: POP
17514: POP
// if result then
17515: LD_VAR 0 1
17519: IFFALSE 17579
// begin ToLua ( playSibBomb() ) ;
17521: LD_STRING playSibBomb()
17523: PPUSH
17524: CALL_OW 559
// wait ( 0 0$14 ) ;
17528: LD_INT 490
17530: PPUSH
17531: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17535: LD_VAR 0 1
17539: PUSH
17540: LD_INT 1
17542: ARRAY
17543: PPUSH
17544: LD_VAR 0 1
17548: PUSH
17549: LD_INT 2
17551: ARRAY
17552: PPUSH
17553: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17557: LD_VAR 0 1
17561: PUSH
17562: LD_INT 1
17564: ARRAY
17565: PPUSH
17566: LD_VAR 0 1
17570: PUSH
17571: LD_INT 2
17573: ARRAY
17574: PPUSH
17575: CALL_OW 429
// end ; end ;
17579: LD_VAR 0 1
17583: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17584: LD_EXP 26
17588: PUSH
17589: LD_EXP 48
17593: AND
17594: IFFALSE 17606
17596: GO 17598
17598: DISABLE
// YouLost (  ) ;
17599: LD_STRING 
17601: PPUSH
17602: CALL_OW 104
17606: END
// every 0 0$1 trigger StreamModeActive and sFog do
17607: LD_EXP 26
17611: PUSH
17612: LD_EXP 47
17616: AND
17617: IFFALSE 17631
17619: GO 17621
17621: DISABLE
// FogOff ( your_side ) ;
17622: LD_OWVAR 2
17626: PPUSH
17627: CALL_OW 344
17631: END
// every 0 0$1 trigger StreamModeActive and sSun do
17632: LD_EXP 26
17636: PUSH
17637: LD_EXP 49
17641: AND
17642: IFFALSE 17670
17644: GO 17646
17646: DISABLE
// begin solar_recharge_percent := 0 ;
17647: LD_ADDR_OWVAR 79
17651: PUSH
17652: LD_INT 0
17654: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17655: LD_INT 10500
17657: PPUSH
17658: CALL_OW 67
// solar_recharge_percent := 100 ;
17662: LD_ADDR_OWVAR 79
17666: PUSH
17667: LD_INT 100
17669: ST_TO_ADDR
// end ;
17670: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17671: LD_EXP 26
17675: PUSH
17676: LD_EXP 50
17680: AND
17681: IFFALSE 17920
17683: GO 17685
17685: DISABLE
17686: LD_INT 0
17688: PPUSH
17689: PPUSH
17690: PPUSH
// begin tmp := [ ] ;
17691: LD_ADDR_VAR 0 3
17695: PUSH
17696: EMPTY
17697: ST_TO_ADDR
// for i := 1 to 6 do
17698: LD_ADDR_VAR 0 1
17702: PUSH
17703: DOUBLE
17704: LD_INT 1
17706: DEC
17707: ST_TO_ADDR
17708: LD_INT 6
17710: PUSH
17711: FOR_TO
17712: IFFALSE 17817
// begin uc_nation := nation_nature ;
17714: LD_ADDR_OWVAR 21
17718: PUSH
17719: LD_INT 0
17721: ST_TO_ADDR
// uc_side := 0 ;
17722: LD_ADDR_OWVAR 20
17726: PUSH
17727: LD_INT 0
17729: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17730: LD_ADDR_OWVAR 29
17734: PUSH
17735: LD_INT 12
17737: PUSH
17738: LD_INT 12
17740: PUSH
17741: EMPTY
17742: LIST
17743: LIST
17744: ST_TO_ADDR
// hc_agressivity := 20 ;
17745: LD_ADDR_OWVAR 35
17749: PUSH
17750: LD_INT 20
17752: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17753: LD_ADDR_OWVAR 28
17757: PUSH
17758: LD_INT 17
17760: ST_TO_ADDR
// hc_gallery :=  ;
17761: LD_ADDR_OWVAR 33
17765: PUSH
17766: LD_STRING 
17768: ST_TO_ADDR
// hc_name :=  ;
17769: LD_ADDR_OWVAR 26
17773: PUSH
17774: LD_STRING 
17776: ST_TO_ADDR
// un := CreateHuman ;
17777: LD_ADDR_VAR 0 2
17781: PUSH
17782: CALL_OW 44
17786: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17787: LD_VAR 0 2
17791: PPUSH
17792: LD_INT 1
17794: PPUSH
17795: CALL_OW 51
// tmp := tmp ^ un ;
17799: LD_ADDR_VAR 0 3
17803: PUSH
17804: LD_VAR 0 3
17808: PUSH
17809: LD_VAR 0 2
17813: ADD
17814: ST_TO_ADDR
// end ;
17815: GO 17711
17817: POP
17818: POP
// repeat wait ( 0 0$1 ) ;
17819: LD_INT 35
17821: PPUSH
17822: CALL_OW 67
// for un in tmp do
17826: LD_ADDR_VAR 0 2
17830: PUSH
17831: LD_VAR 0 3
17835: PUSH
17836: FOR_IN
17837: IFFALSE 17911
// begin if IsDead ( un ) then
17839: LD_VAR 0 2
17843: PPUSH
17844: CALL_OW 301
17848: IFFALSE 17868
// begin tmp := tmp diff un ;
17850: LD_ADDR_VAR 0 3
17854: PUSH
17855: LD_VAR 0 3
17859: PUSH
17860: LD_VAR 0 2
17864: DIFF
17865: ST_TO_ADDR
// continue ;
17866: GO 17836
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17868: LD_VAR 0 2
17872: PPUSH
17873: LD_INT 3
17875: PUSH
17876: LD_INT 22
17878: PUSH
17879: LD_INT 0
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PPUSH
17890: CALL_OW 69
17894: PPUSH
17895: LD_VAR 0 2
17899: PPUSH
17900: CALL_OW 74
17904: PPUSH
17905: CALL_OW 115
// end ;
17909: GO 17836
17911: POP
17912: POP
// until not tmp ;
17913: LD_VAR 0 3
17917: NOT
17918: IFFALSE 17819
// end ;
17920: PPOPN 3
17922: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17923: LD_EXP 26
17927: PUSH
17928: LD_EXP 51
17932: AND
17933: IFFALSE 17987
17935: GO 17937
17937: DISABLE
// begin ToLua ( displayTroll(); ) ;
17938: LD_STRING displayTroll();
17940: PPUSH
17941: CALL_OW 559
// wait ( 3 3$00 ) ;
17945: LD_INT 6300
17947: PPUSH
17948: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17952: LD_STRING hideTroll();
17954: PPUSH
17955: CALL_OW 559
// wait ( 1 1$00 ) ;
17959: LD_INT 2100
17961: PPUSH
17962: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17966: LD_STRING displayTroll();
17968: PPUSH
17969: CALL_OW 559
// wait ( 1 1$00 ) ;
17973: LD_INT 2100
17975: PPUSH
17976: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17980: LD_STRING hideTroll();
17982: PPUSH
17983: CALL_OW 559
// end ;
17987: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17988: LD_EXP 26
17992: PUSH
17993: LD_EXP 52
17997: AND
17998: IFFALSE 18061
18000: GO 18002
18002: DISABLE
18003: LD_INT 0
18005: PPUSH
// begin p := 0 ;
18006: LD_ADDR_VAR 0 1
18010: PUSH
18011: LD_INT 0
18013: ST_TO_ADDR
// repeat game_speed := 1 ;
18014: LD_ADDR_OWVAR 65
18018: PUSH
18019: LD_INT 1
18021: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18022: LD_INT 35
18024: PPUSH
18025: CALL_OW 67
// p := p + 1 ;
18029: LD_ADDR_VAR 0 1
18033: PUSH
18034: LD_VAR 0 1
18038: PUSH
18039: LD_INT 1
18041: PLUS
18042: ST_TO_ADDR
// until p >= 60 ;
18043: LD_VAR 0 1
18047: PUSH
18048: LD_INT 60
18050: GREATEREQUAL
18051: IFFALSE 18014
// game_speed := 4 ;
18053: LD_ADDR_OWVAR 65
18057: PUSH
18058: LD_INT 4
18060: ST_TO_ADDR
// end ;
18061: PPOPN 1
18063: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18064: LD_EXP 26
18068: PUSH
18069: LD_EXP 53
18073: AND
18074: IFFALSE 18220
18076: GO 18078
18078: DISABLE
18079: LD_INT 0
18081: PPUSH
18082: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18083: LD_ADDR_VAR 0 1
18087: PUSH
18088: LD_INT 22
18090: PUSH
18091: LD_OWVAR 2
18095: PUSH
18096: EMPTY
18097: LIST
18098: LIST
18099: PUSH
18100: LD_INT 2
18102: PUSH
18103: LD_INT 30
18105: PUSH
18106: LD_INT 0
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PUSH
18113: LD_INT 30
18115: PUSH
18116: LD_INT 1
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: LIST
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: PPUSH
18132: CALL_OW 69
18136: ST_TO_ADDR
// if not depot then
18137: LD_VAR 0 1
18141: NOT
18142: IFFALSE 18146
// exit ;
18144: GO 18220
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18146: LD_ADDR_VAR 0 2
18150: PUSH
18151: LD_VAR 0 1
18155: PUSH
18156: LD_INT 1
18158: PPUSH
18159: LD_VAR 0 1
18163: PPUSH
18164: CALL_OW 12
18168: ARRAY
18169: PPUSH
18170: CALL_OW 274
18174: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18175: LD_VAR 0 2
18179: PPUSH
18180: LD_INT 1
18182: PPUSH
18183: LD_INT 0
18185: PPUSH
18186: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18190: LD_VAR 0 2
18194: PPUSH
18195: LD_INT 2
18197: PPUSH
18198: LD_INT 0
18200: PPUSH
18201: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18205: LD_VAR 0 2
18209: PPUSH
18210: LD_INT 3
18212: PPUSH
18213: LD_INT 0
18215: PPUSH
18216: CALL_OW 277
// end ;
18220: PPOPN 2
18222: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18223: LD_EXP 26
18227: PUSH
18228: LD_EXP 54
18232: AND
18233: IFFALSE 18330
18235: GO 18237
18237: DISABLE
18238: LD_INT 0
18240: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18241: LD_ADDR_VAR 0 1
18245: PUSH
18246: LD_INT 22
18248: PUSH
18249: LD_OWVAR 2
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: PUSH
18258: LD_INT 21
18260: PUSH
18261: LD_INT 1
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: PUSH
18268: LD_INT 3
18270: PUSH
18271: LD_INT 23
18273: PUSH
18274: LD_INT 0
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: LIST
18289: PPUSH
18290: CALL_OW 69
18294: ST_TO_ADDR
// if not tmp then
18295: LD_VAR 0 1
18299: NOT
18300: IFFALSE 18304
// exit ;
18302: GO 18330
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18304: LD_VAR 0 1
18308: PUSH
18309: LD_INT 1
18311: PPUSH
18312: LD_VAR 0 1
18316: PPUSH
18317: CALL_OW 12
18321: ARRAY
18322: PPUSH
18323: LD_INT 200
18325: PPUSH
18326: CALL_OW 234
// end ;
18330: PPOPN 1
18332: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18333: LD_EXP 26
18337: PUSH
18338: LD_EXP 55
18342: AND
18343: IFFALSE 18422
18345: GO 18347
18347: DISABLE
18348: LD_INT 0
18350: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18351: LD_ADDR_VAR 0 1
18355: PUSH
18356: LD_INT 22
18358: PUSH
18359: LD_OWVAR 2
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PUSH
18368: LD_INT 21
18370: PUSH
18371: LD_INT 2
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PPUSH
18382: CALL_OW 69
18386: ST_TO_ADDR
// if not tmp then
18387: LD_VAR 0 1
18391: NOT
18392: IFFALSE 18396
// exit ;
18394: GO 18422
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18396: LD_VAR 0 1
18400: PUSH
18401: LD_INT 1
18403: PPUSH
18404: LD_VAR 0 1
18408: PPUSH
18409: CALL_OW 12
18413: ARRAY
18414: PPUSH
18415: LD_INT 60
18417: PPUSH
18418: CALL_OW 234
// end ;
18422: PPOPN 1
18424: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18425: LD_EXP 26
18429: PUSH
18430: LD_EXP 56
18434: AND
18435: IFFALSE 18534
18437: GO 18439
18439: DISABLE
18440: LD_INT 0
18442: PPUSH
18443: PPUSH
// begin enable ;
18444: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18445: LD_ADDR_VAR 0 1
18449: PUSH
18450: LD_INT 22
18452: PUSH
18453: LD_OWVAR 2
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: PUSH
18462: LD_INT 61
18464: PUSH
18465: EMPTY
18466: LIST
18467: PUSH
18468: LD_INT 33
18470: PUSH
18471: LD_INT 2
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: LIST
18482: PPUSH
18483: CALL_OW 69
18487: ST_TO_ADDR
// if not tmp then
18488: LD_VAR 0 1
18492: NOT
18493: IFFALSE 18497
// exit ;
18495: GO 18534
// for i in tmp do
18497: LD_ADDR_VAR 0 2
18501: PUSH
18502: LD_VAR 0 1
18506: PUSH
18507: FOR_IN
18508: IFFALSE 18532
// if IsControledBy ( i ) then
18510: LD_VAR 0 2
18514: PPUSH
18515: CALL_OW 312
18519: IFFALSE 18530
// ComUnlink ( i ) ;
18521: LD_VAR 0 2
18525: PPUSH
18526: CALL_OW 136
18530: GO 18507
18532: POP
18533: POP
// end ;
18534: PPOPN 2
18536: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18537: LD_EXP 26
18541: PUSH
18542: LD_EXP 57
18546: AND
18547: IFFALSE 18687
18549: GO 18551
18551: DISABLE
18552: LD_INT 0
18554: PPUSH
18555: PPUSH
// begin ToLua ( displayPowell(); ) ;
18556: LD_STRING displayPowell();
18558: PPUSH
18559: CALL_OW 559
// uc_side := 0 ;
18563: LD_ADDR_OWVAR 20
18567: PUSH
18568: LD_INT 0
18570: ST_TO_ADDR
// uc_nation := 2 ;
18571: LD_ADDR_OWVAR 21
18575: PUSH
18576: LD_INT 2
18578: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18579: LD_ADDR_OWVAR 37
18583: PUSH
18584: LD_INT 14
18586: ST_TO_ADDR
// vc_engine := engine_siberite ;
18587: LD_ADDR_OWVAR 39
18591: PUSH
18592: LD_INT 3
18594: ST_TO_ADDR
// vc_control := control_apeman ;
18595: LD_ADDR_OWVAR 38
18599: PUSH
18600: LD_INT 5
18602: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18603: LD_ADDR_OWVAR 40
18607: PUSH
18608: LD_INT 29
18610: ST_TO_ADDR
// un := CreateVehicle ;
18611: LD_ADDR_VAR 0 2
18615: PUSH
18616: CALL_OW 45
18620: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18621: LD_VAR 0 2
18625: PPUSH
18626: LD_INT 1
18628: PPUSH
18629: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18633: LD_INT 35
18635: PPUSH
18636: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18640: LD_VAR 0 2
18644: PPUSH
18645: LD_INT 22
18647: PUSH
18648: LD_OWVAR 2
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PPUSH
18657: CALL_OW 69
18661: PPUSH
18662: LD_VAR 0 2
18666: PPUSH
18667: CALL_OW 74
18671: PPUSH
18672: CALL_OW 115
// until IsDead ( un ) ;
18676: LD_VAR 0 2
18680: PPUSH
18681: CALL_OW 301
18685: IFFALSE 18633
// end ;
18687: PPOPN 2
18689: END
// every 0 0$1 trigger StreamModeActive and sStu do
18690: LD_EXP 26
18694: PUSH
18695: LD_EXP 65
18699: AND
18700: IFFALSE 18716
18702: GO 18704
18704: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18705: LD_STRING displayStucuk();
18707: PPUSH
18708: CALL_OW 559
// ResetFog ;
18712: CALL_OW 335
// end ;
18716: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18717: LD_EXP 26
18721: PUSH
18722: LD_EXP 58
18726: AND
18727: IFFALSE 18868
18729: GO 18731
18731: DISABLE
18732: LD_INT 0
18734: PPUSH
18735: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18736: LD_ADDR_VAR 0 2
18740: PUSH
18741: LD_INT 22
18743: PUSH
18744: LD_OWVAR 2
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PUSH
18753: LD_INT 21
18755: PUSH
18756: LD_INT 1
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: PPUSH
18767: CALL_OW 69
18771: ST_TO_ADDR
// if not tmp then
18772: LD_VAR 0 2
18776: NOT
18777: IFFALSE 18781
// exit ;
18779: GO 18868
// un := tmp [ rand ( 1 , tmp ) ] ;
18781: LD_ADDR_VAR 0 1
18785: PUSH
18786: LD_VAR 0 2
18790: PUSH
18791: LD_INT 1
18793: PPUSH
18794: LD_VAR 0 2
18798: PPUSH
18799: CALL_OW 12
18803: ARRAY
18804: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18805: LD_VAR 0 1
18809: PPUSH
18810: LD_INT 0
18812: PPUSH
18813: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18817: LD_VAR 0 1
18821: PPUSH
18822: LD_OWVAR 3
18826: PUSH
18827: LD_VAR 0 1
18831: DIFF
18832: PPUSH
18833: LD_VAR 0 1
18837: PPUSH
18838: CALL_OW 74
18842: PPUSH
18843: CALL_OW 115
// wait ( 0 0$20 ) ;
18847: LD_INT 700
18849: PPUSH
18850: CALL_OW 67
// SetSide ( un , your_side ) ;
18854: LD_VAR 0 1
18858: PPUSH
18859: LD_OWVAR 2
18863: PPUSH
18864: CALL_OW 235
// end ;
18868: PPOPN 2
18870: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18871: LD_EXP 26
18875: PUSH
18876: LD_EXP 59
18880: AND
18881: IFFALSE 18987
18883: GO 18885
18885: DISABLE
18886: LD_INT 0
18888: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18889: LD_ADDR_VAR 0 1
18893: PUSH
18894: LD_INT 22
18896: PUSH
18897: LD_OWVAR 2
18901: PUSH
18902: EMPTY
18903: LIST
18904: LIST
18905: PUSH
18906: LD_INT 2
18908: PUSH
18909: LD_INT 30
18911: PUSH
18912: LD_INT 0
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PUSH
18919: LD_INT 30
18921: PUSH
18922: LD_INT 1
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: LIST
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: PPUSH
18938: CALL_OW 69
18942: ST_TO_ADDR
// if not depot then
18943: LD_VAR 0 1
18947: NOT
18948: IFFALSE 18952
// exit ;
18950: GO 18987
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18952: LD_VAR 0 1
18956: PUSH
18957: LD_INT 1
18959: ARRAY
18960: PPUSH
18961: CALL_OW 250
18965: PPUSH
18966: LD_VAR 0 1
18970: PUSH
18971: LD_INT 1
18973: ARRAY
18974: PPUSH
18975: CALL_OW 251
18979: PPUSH
18980: LD_INT 70
18982: PPUSH
18983: CALL_OW 495
// end ;
18987: PPOPN 1
18989: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18990: LD_EXP 26
18994: PUSH
18995: LD_EXP 60
18999: AND
19000: IFFALSE 19211
19002: GO 19004
19004: DISABLE
19005: LD_INT 0
19007: PPUSH
19008: PPUSH
19009: PPUSH
19010: PPUSH
19011: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19012: LD_ADDR_VAR 0 5
19016: PUSH
19017: LD_INT 22
19019: PUSH
19020: LD_OWVAR 2
19024: PUSH
19025: EMPTY
19026: LIST
19027: LIST
19028: PUSH
19029: LD_INT 21
19031: PUSH
19032: LD_INT 1
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: PPUSH
19043: CALL_OW 69
19047: ST_TO_ADDR
// if not tmp then
19048: LD_VAR 0 5
19052: NOT
19053: IFFALSE 19057
// exit ;
19055: GO 19211
// for i in tmp do
19057: LD_ADDR_VAR 0 1
19061: PUSH
19062: LD_VAR 0 5
19066: PUSH
19067: FOR_IN
19068: IFFALSE 19209
// begin d := rand ( 0 , 5 ) ;
19070: LD_ADDR_VAR 0 4
19074: PUSH
19075: LD_INT 0
19077: PPUSH
19078: LD_INT 5
19080: PPUSH
19081: CALL_OW 12
19085: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19086: LD_ADDR_VAR 0 2
19090: PUSH
19091: LD_VAR 0 1
19095: PPUSH
19096: CALL_OW 250
19100: PPUSH
19101: LD_VAR 0 4
19105: PPUSH
19106: LD_INT 3
19108: PPUSH
19109: LD_INT 12
19111: PPUSH
19112: CALL_OW 12
19116: PPUSH
19117: CALL_OW 272
19121: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19122: LD_ADDR_VAR 0 3
19126: PUSH
19127: LD_VAR 0 1
19131: PPUSH
19132: CALL_OW 251
19136: PPUSH
19137: LD_VAR 0 4
19141: PPUSH
19142: LD_INT 3
19144: PPUSH
19145: LD_INT 12
19147: PPUSH
19148: CALL_OW 12
19152: PPUSH
19153: CALL_OW 273
19157: ST_TO_ADDR
// if ValidHex ( x , y ) then
19158: LD_VAR 0 2
19162: PPUSH
19163: LD_VAR 0 3
19167: PPUSH
19168: CALL_OW 488
19172: IFFALSE 19207
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19174: LD_VAR 0 1
19178: PPUSH
19179: LD_VAR 0 2
19183: PPUSH
19184: LD_VAR 0 3
19188: PPUSH
19189: LD_INT 3
19191: PPUSH
19192: LD_INT 6
19194: PPUSH
19195: CALL_OW 12
19199: PPUSH
19200: LD_INT 1
19202: PPUSH
19203: CALL_OW 483
// end ;
19207: GO 19067
19209: POP
19210: POP
// end ;
19211: PPOPN 5
19213: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19214: LD_EXP 26
19218: PUSH
19219: LD_EXP 61
19223: AND
19224: IFFALSE 19318
19226: GO 19228
19228: DISABLE
19229: LD_INT 0
19231: PPUSH
19232: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19233: LD_ADDR_VAR 0 2
19237: PUSH
19238: LD_INT 22
19240: PUSH
19241: LD_OWVAR 2
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: PUSH
19250: LD_INT 32
19252: PUSH
19253: LD_INT 1
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: PUSH
19260: LD_INT 21
19262: PUSH
19263: LD_INT 2
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: LIST
19274: PPUSH
19275: CALL_OW 69
19279: ST_TO_ADDR
// if not tmp then
19280: LD_VAR 0 2
19284: NOT
19285: IFFALSE 19289
// exit ;
19287: GO 19318
// for i in tmp do
19289: LD_ADDR_VAR 0 1
19293: PUSH
19294: LD_VAR 0 2
19298: PUSH
19299: FOR_IN
19300: IFFALSE 19316
// SetFuel ( i , 0 ) ;
19302: LD_VAR 0 1
19306: PPUSH
19307: LD_INT 0
19309: PPUSH
19310: CALL_OW 240
19314: GO 19299
19316: POP
19317: POP
// end ;
19318: PPOPN 2
19320: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19321: LD_EXP 26
19325: PUSH
19326: LD_EXP 62
19330: AND
19331: IFFALSE 19397
19333: GO 19335
19335: DISABLE
19336: LD_INT 0
19338: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19339: LD_ADDR_VAR 0 1
19343: PUSH
19344: LD_INT 22
19346: PUSH
19347: LD_OWVAR 2
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: PUSH
19356: LD_INT 30
19358: PUSH
19359: LD_INT 29
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: PPUSH
19370: CALL_OW 69
19374: ST_TO_ADDR
// if not tmp then
19375: LD_VAR 0 1
19379: NOT
19380: IFFALSE 19384
// exit ;
19382: GO 19397
// DestroyUnit ( tmp [ 1 ] ) ;
19384: LD_VAR 0 1
19388: PUSH
19389: LD_INT 1
19391: ARRAY
19392: PPUSH
19393: CALL_OW 65
// end ;
19397: PPOPN 1
19399: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19400: LD_EXP 26
19404: PUSH
19405: LD_EXP 64
19409: AND
19410: IFFALSE 19539
19412: GO 19414
19414: DISABLE
19415: LD_INT 0
19417: PPUSH
// begin uc_side := 0 ;
19418: LD_ADDR_OWVAR 20
19422: PUSH
19423: LD_INT 0
19425: ST_TO_ADDR
// uc_nation := nation_arabian ;
19426: LD_ADDR_OWVAR 21
19430: PUSH
19431: LD_INT 2
19433: ST_TO_ADDR
// hc_gallery :=  ;
19434: LD_ADDR_OWVAR 33
19438: PUSH
19439: LD_STRING 
19441: ST_TO_ADDR
// hc_name :=  ;
19442: LD_ADDR_OWVAR 26
19446: PUSH
19447: LD_STRING 
19449: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19450: LD_INT 1
19452: PPUSH
19453: LD_INT 11
19455: PPUSH
19456: LD_INT 10
19458: PPUSH
19459: CALL_OW 380
// un := CreateHuman ;
19463: LD_ADDR_VAR 0 1
19467: PUSH
19468: CALL_OW 44
19472: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19473: LD_VAR 0 1
19477: PPUSH
19478: LD_INT 1
19480: PPUSH
19481: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19485: LD_INT 35
19487: PPUSH
19488: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19492: LD_VAR 0 1
19496: PPUSH
19497: LD_INT 22
19499: PUSH
19500: LD_OWVAR 2
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PPUSH
19509: CALL_OW 69
19513: PPUSH
19514: LD_VAR 0 1
19518: PPUSH
19519: CALL_OW 74
19523: PPUSH
19524: CALL_OW 115
// until IsDead ( un ) ;
19528: LD_VAR 0 1
19532: PPUSH
19533: CALL_OW 301
19537: IFFALSE 19485
// end ;
19539: PPOPN 1
19541: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19542: LD_EXP 26
19546: PUSH
19547: LD_EXP 66
19551: AND
19552: IFFALSE 19564
19554: GO 19556
19556: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19557: LD_STRING earthquake(getX(game), 0, 32)
19559: PPUSH
19560: CALL_OW 559
19564: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19565: LD_EXP 26
19569: PUSH
19570: LD_EXP 67
19574: AND
19575: IFFALSE 19666
19577: GO 19579
19579: DISABLE
19580: LD_INT 0
19582: PPUSH
// begin enable ;
19583: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19584: LD_ADDR_VAR 0 1
19588: PUSH
19589: LD_INT 22
19591: PUSH
19592: LD_OWVAR 2
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PUSH
19601: LD_INT 21
19603: PUSH
19604: LD_INT 2
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PUSH
19611: LD_INT 33
19613: PUSH
19614: LD_INT 3
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: LIST
19625: PPUSH
19626: CALL_OW 69
19630: ST_TO_ADDR
// if not tmp then
19631: LD_VAR 0 1
19635: NOT
19636: IFFALSE 19640
// exit ;
19638: GO 19666
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19640: LD_VAR 0 1
19644: PUSH
19645: LD_INT 1
19647: PPUSH
19648: LD_VAR 0 1
19652: PPUSH
19653: CALL_OW 12
19657: ARRAY
19658: PPUSH
19659: LD_INT 1
19661: PPUSH
19662: CALL_OW 234
// end ;
19666: PPOPN 1
19668: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19669: LD_EXP 26
19673: PUSH
19674: LD_EXP 68
19678: AND
19679: IFFALSE 19820
19681: GO 19683
19683: DISABLE
19684: LD_INT 0
19686: PPUSH
19687: PPUSH
19688: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19689: LD_ADDR_VAR 0 3
19693: PUSH
19694: LD_INT 22
19696: PUSH
19697: LD_OWVAR 2
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: LD_INT 25
19708: PUSH
19709: LD_INT 1
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: PPUSH
19720: CALL_OW 69
19724: ST_TO_ADDR
// if not tmp then
19725: LD_VAR 0 3
19729: NOT
19730: IFFALSE 19734
// exit ;
19732: GO 19820
// un := tmp [ rand ( 1 , tmp ) ] ;
19734: LD_ADDR_VAR 0 2
19738: PUSH
19739: LD_VAR 0 3
19743: PUSH
19744: LD_INT 1
19746: PPUSH
19747: LD_VAR 0 3
19751: PPUSH
19752: CALL_OW 12
19756: ARRAY
19757: ST_TO_ADDR
// if Crawls ( un ) then
19758: LD_VAR 0 2
19762: PPUSH
19763: CALL_OW 318
19767: IFFALSE 19778
// ComWalk ( un ) ;
19769: LD_VAR 0 2
19773: PPUSH
19774: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19778: LD_VAR 0 2
19782: PPUSH
19783: LD_INT 9
19785: PPUSH
19786: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19790: LD_INT 28
19792: PPUSH
19793: LD_OWVAR 2
19797: PPUSH
19798: LD_INT 2
19800: PPUSH
19801: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19805: LD_INT 29
19807: PPUSH
19808: LD_OWVAR 2
19812: PPUSH
19813: LD_INT 2
19815: PPUSH
19816: CALL_OW 322
// end ;
19820: PPOPN 3
19822: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19823: LD_EXP 26
19827: PUSH
19828: LD_EXP 69
19832: AND
19833: IFFALSE 19944
19835: GO 19837
19837: DISABLE
19838: LD_INT 0
19840: PPUSH
19841: PPUSH
19842: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19843: LD_ADDR_VAR 0 3
19847: PUSH
19848: LD_INT 22
19850: PUSH
19851: LD_OWVAR 2
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: PUSH
19860: LD_INT 25
19862: PUSH
19863: LD_INT 1
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: PUSH
19870: EMPTY
19871: LIST
19872: LIST
19873: PPUSH
19874: CALL_OW 69
19878: ST_TO_ADDR
// if not tmp then
19879: LD_VAR 0 3
19883: NOT
19884: IFFALSE 19888
// exit ;
19886: GO 19944
// un := tmp [ rand ( 1 , tmp ) ] ;
19888: LD_ADDR_VAR 0 2
19892: PUSH
19893: LD_VAR 0 3
19897: PUSH
19898: LD_INT 1
19900: PPUSH
19901: LD_VAR 0 3
19905: PPUSH
19906: CALL_OW 12
19910: ARRAY
19911: ST_TO_ADDR
// if Crawls ( un ) then
19912: LD_VAR 0 2
19916: PPUSH
19917: CALL_OW 318
19921: IFFALSE 19932
// ComWalk ( un ) ;
19923: LD_VAR 0 2
19927: PPUSH
19928: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19932: LD_VAR 0 2
19936: PPUSH
19937: LD_INT 8
19939: PPUSH
19940: CALL_OW 336
// end ;
19944: PPOPN 3
19946: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19947: LD_EXP 26
19951: PUSH
19952: LD_EXP 70
19956: AND
19957: IFFALSE 20101
19959: GO 19961
19961: DISABLE
19962: LD_INT 0
19964: PPUSH
19965: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19966: LD_ADDR_VAR 0 2
19970: PUSH
19971: LD_INT 22
19973: PUSH
19974: LD_OWVAR 2
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PUSH
19983: LD_INT 21
19985: PUSH
19986: LD_INT 2
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 2
19995: PUSH
19996: LD_INT 34
19998: PUSH
19999: LD_INT 12
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: PUSH
20006: LD_INT 34
20008: PUSH
20009: LD_INT 51
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: PUSH
20016: LD_INT 34
20018: PUSH
20019: LD_INT 32
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: LIST
20036: PPUSH
20037: CALL_OW 69
20041: ST_TO_ADDR
// if not tmp then
20042: LD_VAR 0 2
20046: NOT
20047: IFFALSE 20051
// exit ;
20049: GO 20101
// for i in tmp do
20051: LD_ADDR_VAR 0 1
20055: PUSH
20056: LD_VAR 0 2
20060: PUSH
20061: FOR_IN
20062: IFFALSE 20099
// if GetCargo ( i , mat_artifact ) = 0 then
20064: LD_VAR 0 1
20068: PPUSH
20069: LD_INT 4
20071: PPUSH
20072: CALL_OW 289
20076: PUSH
20077: LD_INT 0
20079: EQUAL
20080: IFFALSE 20097
// SetCargo ( i , mat_siberit , 100 ) ;
20082: LD_VAR 0 1
20086: PPUSH
20087: LD_INT 3
20089: PPUSH
20090: LD_INT 100
20092: PPUSH
20093: CALL_OW 290
20097: GO 20061
20099: POP
20100: POP
// end ;
20101: PPOPN 2
20103: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20104: LD_EXP 26
20108: PUSH
20109: LD_EXP 71
20113: AND
20114: IFFALSE 20297
20116: GO 20118
20118: DISABLE
20119: LD_INT 0
20121: PPUSH
20122: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20123: LD_ADDR_VAR 0 2
20127: PUSH
20128: LD_INT 22
20130: PUSH
20131: LD_OWVAR 2
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PPUSH
20140: CALL_OW 69
20144: ST_TO_ADDR
// if not tmp then
20145: LD_VAR 0 2
20149: NOT
20150: IFFALSE 20154
// exit ;
20152: GO 20297
// for i := 1 to 2 do
20154: LD_ADDR_VAR 0 1
20158: PUSH
20159: DOUBLE
20160: LD_INT 1
20162: DEC
20163: ST_TO_ADDR
20164: LD_INT 2
20166: PUSH
20167: FOR_TO
20168: IFFALSE 20295
// begin uc_side := your_side ;
20170: LD_ADDR_OWVAR 20
20174: PUSH
20175: LD_OWVAR 2
20179: ST_TO_ADDR
// uc_nation := nation_american ;
20180: LD_ADDR_OWVAR 21
20184: PUSH
20185: LD_INT 1
20187: ST_TO_ADDR
// vc_chassis := us_morphling ;
20188: LD_ADDR_OWVAR 37
20192: PUSH
20193: LD_INT 5
20195: ST_TO_ADDR
// vc_engine := engine_siberite ;
20196: LD_ADDR_OWVAR 39
20200: PUSH
20201: LD_INT 3
20203: ST_TO_ADDR
// vc_control := control_computer ;
20204: LD_ADDR_OWVAR 38
20208: PUSH
20209: LD_INT 3
20211: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20212: LD_ADDR_OWVAR 40
20216: PUSH
20217: LD_INT 10
20219: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20220: LD_VAR 0 2
20224: PUSH
20225: LD_INT 1
20227: ARRAY
20228: PPUSH
20229: CALL_OW 310
20233: NOT
20234: IFFALSE 20281
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20236: CALL_OW 45
20240: PPUSH
20241: LD_VAR 0 2
20245: PUSH
20246: LD_INT 1
20248: ARRAY
20249: PPUSH
20250: CALL_OW 250
20254: PPUSH
20255: LD_VAR 0 2
20259: PUSH
20260: LD_INT 1
20262: ARRAY
20263: PPUSH
20264: CALL_OW 251
20268: PPUSH
20269: LD_INT 12
20271: PPUSH
20272: LD_INT 1
20274: PPUSH
20275: CALL_OW 50
20279: GO 20293
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20281: CALL_OW 45
20285: PPUSH
20286: LD_INT 1
20288: PPUSH
20289: CALL_OW 51
// end ;
20293: GO 20167
20295: POP
20296: POP
// end ;
20297: PPOPN 2
20299: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20300: LD_EXP 26
20304: PUSH
20305: LD_EXP 72
20309: AND
20310: IFFALSE 20532
20312: GO 20314
20314: DISABLE
20315: LD_INT 0
20317: PPUSH
20318: PPUSH
20319: PPUSH
20320: PPUSH
20321: PPUSH
20322: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20323: LD_ADDR_VAR 0 6
20327: PUSH
20328: LD_INT 22
20330: PUSH
20331: LD_OWVAR 2
20335: PUSH
20336: EMPTY
20337: LIST
20338: LIST
20339: PUSH
20340: LD_INT 21
20342: PUSH
20343: LD_INT 1
20345: PUSH
20346: EMPTY
20347: LIST
20348: LIST
20349: PUSH
20350: LD_INT 3
20352: PUSH
20353: LD_INT 23
20355: PUSH
20356: LD_INT 0
20358: PUSH
20359: EMPTY
20360: LIST
20361: LIST
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: LIST
20371: PPUSH
20372: CALL_OW 69
20376: ST_TO_ADDR
// if not tmp then
20377: LD_VAR 0 6
20381: NOT
20382: IFFALSE 20386
// exit ;
20384: GO 20532
// s1 := rand ( 1 , 4 ) ;
20386: LD_ADDR_VAR 0 2
20390: PUSH
20391: LD_INT 1
20393: PPUSH
20394: LD_INT 4
20396: PPUSH
20397: CALL_OW 12
20401: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20402: LD_ADDR_VAR 0 4
20406: PUSH
20407: LD_VAR 0 6
20411: PUSH
20412: LD_INT 1
20414: ARRAY
20415: PPUSH
20416: LD_VAR 0 2
20420: PPUSH
20421: CALL_OW 259
20425: ST_TO_ADDR
// if s1 = 1 then
20426: LD_VAR 0 2
20430: PUSH
20431: LD_INT 1
20433: EQUAL
20434: IFFALSE 20454
// s2 := rand ( 2 , 4 ) else
20436: LD_ADDR_VAR 0 3
20440: PUSH
20441: LD_INT 2
20443: PPUSH
20444: LD_INT 4
20446: PPUSH
20447: CALL_OW 12
20451: ST_TO_ADDR
20452: GO 20462
// s2 := 1 ;
20454: LD_ADDR_VAR 0 3
20458: PUSH
20459: LD_INT 1
20461: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20462: LD_ADDR_VAR 0 5
20466: PUSH
20467: LD_VAR 0 6
20471: PUSH
20472: LD_INT 1
20474: ARRAY
20475: PPUSH
20476: LD_VAR 0 3
20480: PPUSH
20481: CALL_OW 259
20485: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20486: LD_VAR 0 6
20490: PUSH
20491: LD_INT 1
20493: ARRAY
20494: PPUSH
20495: LD_VAR 0 2
20499: PPUSH
20500: LD_VAR 0 5
20504: PPUSH
20505: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20509: LD_VAR 0 6
20513: PUSH
20514: LD_INT 1
20516: ARRAY
20517: PPUSH
20518: LD_VAR 0 3
20522: PPUSH
20523: LD_VAR 0 4
20527: PPUSH
20528: CALL_OW 237
// end ;
20532: PPOPN 6
20534: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20535: LD_EXP 26
20539: PUSH
20540: LD_EXP 73
20544: AND
20545: IFFALSE 20624
20547: GO 20549
20549: DISABLE
20550: LD_INT 0
20552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20553: LD_ADDR_VAR 0 1
20557: PUSH
20558: LD_INT 22
20560: PUSH
20561: LD_OWVAR 2
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: PUSH
20570: LD_INT 30
20572: PUSH
20573: LD_INT 3
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: PPUSH
20584: CALL_OW 69
20588: ST_TO_ADDR
// if not tmp then
20589: LD_VAR 0 1
20593: NOT
20594: IFFALSE 20598
// exit ;
20596: GO 20624
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20598: LD_VAR 0 1
20602: PUSH
20603: LD_INT 1
20605: PPUSH
20606: LD_VAR 0 1
20610: PPUSH
20611: CALL_OW 12
20615: ARRAY
20616: PPUSH
20617: LD_INT 1
20619: PPUSH
20620: CALL_OW 234
// end ;
20624: PPOPN 1
20626: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20627: LD_EXP 26
20631: PUSH
20632: LD_EXP 74
20636: AND
20637: IFFALSE 20749
20639: GO 20641
20641: DISABLE
20642: LD_INT 0
20644: PPUSH
20645: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20646: LD_ADDR_VAR 0 2
20650: PUSH
20651: LD_INT 22
20653: PUSH
20654: LD_OWVAR 2
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: PUSH
20663: LD_INT 2
20665: PUSH
20666: LD_INT 30
20668: PUSH
20669: LD_INT 27
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: LD_INT 30
20678: PUSH
20679: LD_INT 26
20681: PUSH
20682: EMPTY
20683: LIST
20684: LIST
20685: PUSH
20686: LD_INT 30
20688: PUSH
20689: LD_INT 28
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PUSH
20696: EMPTY
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: PUSH
20702: EMPTY
20703: LIST
20704: LIST
20705: PPUSH
20706: CALL_OW 69
20710: ST_TO_ADDR
// if not tmp then
20711: LD_VAR 0 2
20715: NOT
20716: IFFALSE 20720
// exit ;
20718: GO 20749
// for i in tmp do
20720: LD_ADDR_VAR 0 1
20724: PUSH
20725: LD_VAR 0 2
20729: PUSH
20730: FOR_IN
20731: IFFALSE 20747
// SetLives ( i , 1 ) ;
20733: LD_VAR 0 1
20737: PPUSH
20738: LD_INT 1
20740: PPUSH
20741: CALL_OW 234
20745: GO 20730
20747: POP
20748: POP
// end ;
20749: PPOPN 2
20751: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20752: LD_EXP 26
20756: PUSH
20757: LD_EXP 75
20761: AND
20762: IFFALSE 21049
20764: GO 20766
20766: DISABLE
20767: LD_INT 0
20769: PPUSH
20770: PPUSH
20771: PPUSH
// begin i := rand ( 1 , 7 ) ;
20772: LD_ADDR_VAR 0 1
20776: PUSH
20777: LD_INT 1
20779: PPUSH
20780: LD_INT 7
20782: PPUSH
20783: CALL_OW 12
20787: ST_TO_ADDR
// case i of 1 :
20788: LD_VAR 0 1
20792: PUSH
20793: LD_INT 1
20795: DOUBLE
20796: EQUAL
20797: IFTRUE 20801
20799: GO 20811
20801: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20802: LD_STRING earthquake(getX(game), 0, 32)
20804: PPUSH
20805: CALL_OW 559
20809: GO 21049
20811: LD_INT 2
20813: DOUBLE
20814: EQUAL
20815: IFTRUE 20819
20817: GO 20833
20819: POP
// begin ToLua ( displayStucuk(); ) ;
20820: LD_STRING displayStucuk();
20822: PPUSH
20823: CALL_OW 559
// ResetFog ;
20827: CALL_OW 335
// end ; 3 :
20831: GO 21049
20833: LD_INT 3
20835: DOUBLE
20836: EQUAL
20837: IFTRUE 20841
20839: GO 20945
20841: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20842: LD_ADDR_VAR 0 2
20846: PUSH
20847: LD_INT 22
20849: PUSH
20850: LD_OWVAR 2
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: PUSH
20859: LD_INT 25
20861: PUSH
20862: LD_INT 1
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PPUSH
20873: CALL_OW 69
20877: ST_TO_ADDR
// if not tmp then
20878: LD_VAR 0 2
20882: NOT
20883: IFFALSE 20887
// exit ;
20885: GO 21049
// un := tmp [ rand ( 1 , tmp ) ] ;
20887: LD_ADDR_VAR 0 3
20891: PUSH
20892: LD_VAR 0 2
20896: PUSH
20897: LD_INT 1
20899: PPUSH
20900: LD_VAR 0 2
20904: PPUSH
20905: CALL_OW 12
20909: ARRAY
20910: ST_TO_ADDR
// if Crawls ( un ) then
20911: LD_VAR 0 3
20915: PPUSH
20916: CALL_OW 318
20920: IFFALSE 20931
// ComWalk ( un ) ;
20922: LD_VAR 0 3
20926: PPUSH
20927: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20931: LD_VAR 0 3
20935: PPUSH
20936: LD_INT 8
20938: PPUSH
20939: CALL_OW 336
// end ; 4 :
20943: GO 21049
20945: LD_INT 4
20947: DOUBLE
20948: EQUAL
20949: IFTRUE 20953
20951: GO 21027
20953: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20954: LD_ADDR_VAR 0 2
20958: PUSH
20959: LD_INT 22
20961: PUSH
20962: LD_OWVAR 2
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: PUSH
20971: LD_INT 30
20973: PUSH
20974: LD_INT 29
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: PPUSH
20985: CALL_OW 69
20989: ST_TO_ADDR
// if not tmp then
20990: LD_VAR 0 2
20994: NOT
20995: IFFALSE 20999
// exit ;
20997: GO 21049
// CenterNowOnUnits ( tmp [ 1 ] ) ;
20999: LD_VAR 0 2
21003: PUSH
21004: LD_INT 1
21006: ARRAY
21007: PPUSH
21008: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21012: LD_VAR 0 2
21016: PUSH
21017: LD_INT 1
21019: ARRAY
21020: PPUSH
21021: CALL_OW 65
// end ; 5 .. 7 :
21025: GO 21049
21027: LD_INT 5
21029: DOUBLE
21030: GREATEREQUAL
21031: IFFALSE 21039
21033: LD_INT 7
21035: DOUBLE
21036: LESSEQUAL
21037: IFTRUE 21041
21039: GO 21048
21041: POP
// StreamSibBomb ; end ;
21042: CALL 17286 0 0
21046: GO 21049
21048: POP
// end ;
21049: PPOPN 3
21051: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21052: LD_EXP 26
21056: PUSH
21057: LD_EXP 76
21061: AND
21062: IFFALSE 21218
21064: GO 21066
21066: DISABLE
21067: LD_INT 0
21069: PPUSH
21070: PPUSH
21071: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21072: LD_ADDR_VAR 0 2
21076: PUSH
21077: LD_INT 81
21079: PUSH
21080: LD_OWVAR 2
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: PUSH
21089: LD_INT 2
21091: PUSH
21092: LD_INT 21
21094: PUSH
21095: LD_INT 1
21097: PUSH
21098: EMPTY
21099: LIST
21100: LIST
21101: PUSH
21102: LD_INT 21
21104: PUSH
21105: LD_INT 2
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: LIST
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PPUSH
21121: CALL_OW 69
21125: ST_TO_ADDR
// if not tmp then
21126: LD_VAR 0 2
21130: NOT
21131: IFFALSE 21135
// exit ;
21133: GO 21218
// p := 0 ;
21135: LD_ADDR_VAR 0 3
21139: PUSH
21140: LD_INT 0
21142: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21143: LD_INT 35
21145: PPUSH
21146: CALL_OW 67
// p := p + 1 ;
21150: LD_ADDR_VAR 0 3
21154: PUSH
21155: LD_VAR 0 3
21159: PUSH
21160: LD_INT 1
21162: PLUS
21163: ST_TO_ADDR
// for i in tmp do
21164: LD_ADDR_VAR 0 1
21168: PUSH
21169: LD_VAR 0 2
21173: PUSH
21174: FOR_IN
21175: IFFALSE 21206
// if GetLives ( i ) < 1000 then
21177: LD_VAR 0 1
21181: PPUSH
21182: CALL_OW 256
21186: PUSH
21187: LD_INT 1000
21189: LESS
21190: IFFALSE 21204
// SetLives ( i , 1000 ) ;
21192: LD_VAR 0 1
21196: PPUSH
21197: LD_INT 1000
21199: PPUSH
21200: CALL_OW 234
21204: GO 21174
21206: POP
21207: POP
// until p > 20 ;
21208: LD_VAR 0 3
21212: PUSH
21213: LD_INT 20
21215: GREATER
21216: IFFALSE 21143
// end ;
21218: PPOPN 3
21220: END
// every 0 0$1 trigger StreamModeActive and sTime do
21221: LD_EXP 26
21225: PUSH
21226: LD_EXP 77
21230: AND
21231: IFFALSE 21266
21233: GO 21235
21235: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21236: LD_INT 28
21238: PPUSH
21239: LD_OWVAR 2
21243: PPUSH
21244: LD_INT 2
21246: PPUSH
21247: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21251: LD_INT 30
21253: PPUSH
21254: LD_OWVAR 2
21258: PPUSH
21259: LD_INT 2
21261: PPUSH
21262: CALL_OW 322
// end ;
21266: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21267: LD_EXP 26
21271: PUSH
21272: LD_EXP 78
21276: AND
21277: IFFALSE 21398
21279: GO 21281
21281: DISABLE
21282: LD_INT 0
21284: PPUSH
21285: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21286: LD_ADDR_VAR 0 2
21290: PUSH
21291: LD_INT 22
21293: PUSH
21294: LD_OWVAR 2
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: PUSH
21303: LD_INT 21
21305: PUSH
21306: LD_INT 1
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: PUSH
21313: LD_INT 3
21315: PUSH
21316: LD_INT 23
21318: PUSH
21319: LD_INT 0
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: LIST
21334: PPUSH
21335: CALL_OW 69
21339: ST_TO_ADDR
// if not tmp then
21340: LD_VAR 0 2
21344: NOT
21345: IFFALSE 21349
// exit ;
21347: GO 21398
// for i in tmp do
21349: LD_ADDR_VAR 0 1
21353: PUSH
21354: LD_VAR 0 2
21358: PUSH
21359: FOR_IN
21360: IFFALSE 21396
// begin if Crawls ( i ) then
21362: LD_VAR 0 1
21366: PPUSH
21367: CALL_OW 318
21371: IFFALSE 21382
// ComWalk ( i ) ;
21373: LD_VAR 0 1
21377: PPUSH
21378: CALL_OW 138
// SetClass ( i , 2 ) ;
21382: LD_VAR 0 1
21386: PPUSH
21387: LD_INT 2
21389: PPUSH
21390: CALL_OW 336
// end ;
21394: GO 21359
21396: POP
21397: POP
// end ;
21398: PPOPN 2
21400: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21401: LD_EXP 26
21405: PUSH
21406: LD_EXP 79
21410: AND
21411: IFFALSE 21699
21413: GO 21415
21415: DISABLE
21416: LD_INT 0
21418: PPUSH
21419: PPUSH
21420: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21421: LD_OWVAR 2
21425: PPUSH
21426: LD_INT 9
21428: PPUSH
21429: LD_INT 1
21431: PPUSH
21432: LD_INT 1
21434: PPUSH
21435: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21439: LD_INT 9
21441: PPUSH
21442: LD_OWVAR 2
21446: PPUSH
21447: CALL_OW 343
// uc_side := 9 ;
21451: LD_ADDR_OWVAR 20
21455: PUSH
21456: LD_INT 9
21458: ST_TO_ADDR
// uc_nation := 2 ;
21459: LD_ADDR_OWVAR 21
21463: PUSH
21464: LD_INT 2
21466: ST_TO_ADDR
// hc_name := Dark Warrior ;
21467: LD_ADDR_OWVAR 26
21471: PUSH
21472: LD_STRING Dark Warrior
21474: ST_TO_ADDR
// hc_gallery :=  ;
21475: LD_ADDR_OWVAR 33
21479: PUSH
21480: LD_STRING 
21482: ST_TO_ADDR
// hc_noskilllimit := true ;
21483: LD_ADDR_OWVAR 76
21487: PUSH
21488: LD_INT 1
21490: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
21491: LD_ADDR_OWVAR 31
21495: PUSH
21496: LD_INT 30
21498: PUSH
21499: LD_INT 30
21501: PUSH
21502: LD_INT 30
21504: PUSH
21505: LD_INT 30
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: ST_TO_ADDR
// un := CreateHuman ;
21514: LD_ADDR_VAR 0 3
21518: PUSH
21519: CALL_OW 44
21523: ST_TO_ADDR
// hc_noskilllimit := false ;
21524: LD_ADDR_OWVAR 76
21528: PUSH
21529: LD_INT 0
21531: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21532: LD_VAR 0 3
21536: PPUSH
21537: LD_INT 1
21539: PPUSH
21540: CALL_OW 51
// ToLua ( playRanger() ) ;
21544: LD_STRING playRanger()
21546: PPUSH
21547: CALL_OW 559
// p := 0 ;
21551: LD_ADDR_VAR 0 2
21555: PUSH
21556: LD_INT 0
21558: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21559: LD_INT 35
21561: PPUSH
21562: CALL_OW 67
// p := p + 1 ;
21566: LD_ADDR_VAR 0 2
21570: PUSH
21571: LD_VAR 0 2
21575: PUSH
21576: LD_INT 1
21578: PLUS
21579: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21580: LD_VAR 0 3
21584: PPUSH
21585: CALL_OW 256
21589: PUSH
21590: LD_INT 1000
21592: LESS
21593: IFFALSE 21607
// SetLives ( un , 1000 ) ;
21595: LD_VAR 0 3
21599: PPUSH
21600: LD_INT 1000
21602: PPUSH
21603: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21607: LD_VAR 0 3
21611: PPUSH
21612: LD_INT 81
21614: PUSH
21615: LD_OWVAR 2
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PUSH
21624: LD_INT 91
21626: PUSH
21627: LD_VAR 0 3
21631: PUSH
21632: LD_INT 30
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: LIST
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: PPUSH
21644: CALL_OW 69
21648: PPUSH
21649: LD_VAR 0 3
21653: PPUSH
21654: CALL_OW 74
21658: PPUSH
21659: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
21663: LD_VAR 0 2
21667: PUSH
21668: LD_INT 80
21670: GREATER
21671: PUSH
21672: LD_VAR 0 3
21676: PPUSH
21677: CALL_OW 301
21681: OR
21682: IFFALSE 21559
// if un then
21684: LD_VAR 0 3
21688: IFFALSE 21699
// RemoveUnit ( un ) ;
21690: LD_VAR 0 3
21694: PPUSH
21695: CALL_OW 64
// end ;
21699: PPOPN 3
21701: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
21702: LD_EXP 80
21706: IFFALSE 21822
21708: GO 21710
21710: DISABLE
21711: LD_INT 0
21713: PPUSH
21714: PPUSH
21715: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21716: LD_ADDR_VAR 0 2
21720: PUSH
21721: LD_INT 81
21723: PUSH
21724: LD_OWVAR 2
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: PUSH
21733: LD_INT 21
21735: PUSH
21736: LD_INT 1
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: PPUSH
21747: CALL_OW 69
21751: ST_TO_ADDR
// ToLua ( playComputer() ) ;
21752: LD_STRING playComputer()
21754: PPUSH
21755: CALL_OW 559
// if not tmp then
21759: LD_VAR 0 2
21763: NOT
21764: IFFALSE 21768
// exit ;
21766: GO 21822
// for i in tmp do
21768: LD_ADDR_VAR 0 1
21772: PUSH
21773: LD_VAR 0 2
21777: PUSH
21778: FOR_IN
21779: IFFALSE 21820
// for j := 1 to 4 do
21781: LD_ADDR_VAR 0 3
21785: PUSH
21786: DOUBLE
21787: LD_INT 1
21789: DEC
21790: ST_TO_ADDR
21791: LD_INT 4
21793: PUSH
21794: FOR_TO
21795: IFFALSE 21816
// SetSkill ( i , j , 10 ) ;
21797: LD_VAR 0 1
21801: PPUSH
21802: LD_VAR 0 3
21806: PPUSH
21807: LD_INT 10
21809: PPUSH
21810: CALL_OW 237
21814: GO 21794
21816: POP
21817: POP
21818: GO 21778
21820: POP
21821: POP
// end ;
21822: PPOPN 3
21824: END
// every 0 0$1 trigger s30 do var i , tmp ;
21825: LD_EXP 81
21829: IFFALSE 21898
21831: GO 21833
21833: DISABLE
21834: LD_INT 0
21836: PPUSH
21837: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21838: LD_ADDR_VAR 0 2
21842: PUSH
21843: LD_INT 22
21845: PUSH
21846: LD_OWVAR 2
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: PPUSH
21855: CALL_OW 69
21859: ST_TO_ADDR
// if not tmp then
21860: LD_VAR 0 2
21864: NOT
21865: IFFALSE 21869
// exit ;
21867: GO 21898
// for i in tmp do
21869: LD_ADDR_VAR 0 1
21873: PUSH
21874: LD_VAR 0 2
21878: PUSH
21879: FOR_IN
21880: IFFALSE 21896
// SetLives ( i , 300 ) ;
21882: LD_VAR 0 1
21886: PPUSH
21887: LD_INT 300
21889: PPUSH
21890: CALL_OW 234
21894: GO 21879
21896: POP
21897: POP
// end ;
21898: PPOPN 2
21900: END
// every 0 0$1 trigger s60 do var i , tmp ;
21901: LD_EXP 82
21905: IFFALSE 21974
21907: GO 21909
21909: DISABLE
21910: LD_INT 0
21912: PPUSH
21913: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21914: LD_ADDR_VAR 0 2
21918: PUSH
21919: LD_INT 22
21921: PUSH
21922: LD_OWVAR 2
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: PPUSH
21931: CALL_OW 69
21935: ST_TO_ADDR
// if not tmp then
21936: LD_VAR 0 2
21940: NOT
21941: IFFALSE 21945
// exit ;
21943: GO 21974
// for i in tmp do
21945: LD_ADDR_VAR 0 1
21949: PUSH
21950: LD_VAR 0 2
21954: PUSH
21955: FOR_IN
21956: IFFALSE 21972
// SetLives ( i , 600 ) ;
21958: LD_VAR 0 1
21962: PPUSH
21963: LD_INT 600
21965: PPUSH
21966: CALL_OW 234
21970: GO 21955
21972: POP
21973: POP
// end ;
21974: PPOPN 2
21976: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21977: LD_INT 0
21979: PPUSH
// case cmd of 301 :
21980: LD_VAR 0 1
21984: PUSH
21985: LD_INT 301
21987: DOUBLE
21988: EQUAL
21989: IFTRUE 21993
21991: GO 22025
21993: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21994: LD_VAR 0 6
21998: PPUSH
21999: LD_VAR 0 7
22003: PPUSH
22004: LD_VAR 0 8
22008: PPUSH
22009: LD_VAR 0 4
22013: PPUSH
22014: LD_VAR 0 5
22018: PPUSH
22019: CALL 23226 0 5
22023: GO 22146
22025: LD_INT 302
22027: DOUBLE
22028: EQUAL
22029: IFTRUE 22033
22031: GO 22070
22033: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22034: LD_VAR 0 6
22038: PPUSH
22039: LD_VAR 0 7
22043: PPUSH
22044: LD_VAR 0 8
22048: PPUSH
22049: LD_VAR 0 9
22053: PPUSH
22054: LD_VAR 0 4
22058: PPUSH
22059: LD_VAR 0 5
22063: PPUSH
22064: CALL 23317 0 6
22068: GO 22146
22070: LD_INT 303
22072: DOUBLE
22073: EQUAL
22074: IFTRUE 22078
22076: GO 22115
22078: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22079: LD_VAR 0 6
22083: PPUSH
22084: LD_VAR 0 7
22088: PPUSH
22089: LD_VAR 0 8
22093: PPUSH
22094: LD_VAR 0 9
22098: PPUSH
22099: LD_VAR 0 4
22103: PPUSH
22104: LD_VAR 0 5
22108: PPUSH
22109: CALL 22151 0 6
22113: GO 22146
22115: LD_INT 304
22117: DOUBLE
22118: EQUAL
22119: IFTRUE 22123
22121: GO 22145
22123: POP
// hHackTeleport ( unit , x , y ) ; end ;
22124: LD_VAR 0 2
22128: PPUSH
22129: LD_VAR 0 4
22133: PPUSH
22134: LD_VAR 0 5
22138: PPUSH
22139: CALL 23910 0 3
22143: GO 22146
22145: POP
// end ;
22146: LD_VAR 0 12
22150: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22151: LD_INT 0
22153: PPUSH
22154: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22155: LD_VAR 0 1
22159: PUSH
22160: LD_INT 1
22162: LESS
22163: PUSH
22164: LD_VAR 0 1
22168: PUSH
22169: LD_INT 3
22171: GREATER
22172: OR
22173: PUSH
22174: LD_VAR 0 5
22178: PPUSH
22179: LD_VAR 0 6
22183: PPUSH
22184: CALL_OW 428
22188: OR
22189: IFFALSE 22193
// exit ;
22191: GO 22913
// uc_side := your_side ;
22193: LD_ADDR_OWVAR 20
22197: PUSH
22198: LD_OWVAR 2
22202: ST_TO_ADDR
// uc_nation := nation ;
22203: LD_ADDR_OWVAR 21
22207: PUSH
22208: LD_VAR 0 1
22212: ST_TO_ADDR
// bc_level = 1 ;
22213: LD_ADDR_OWVAR 43
22217: PUSH
22218: LD_INT 1
22220: ST_TO_ADDR
// case btype of 1 :
22221: LD_VAR 0 2
22225: PUSH
22226: LD_INT 1
22228: DOUBLE
22229: EQUAL
22230: IFTRUE 22234
22232: GO 22245
22234: POP
// bc_type := b_depot ; 2 :
22235: LD_ADDR_OWVAR 42
22239: PUSH
22240: LD_INT 0
22242: ST_TO_ADDR
22243: GO 22857
22245: LD_INT 2
22247: DOUBLE
22248: EQUAL
22249: IFTRUE 22253
22251: GO 22264
22253: POP
// bc_type := b_warehouse ; 3 :
22254: LD_ADDR_OWVAR 42
22258: PUSH
22259: LD_INT 1
22261: ST_TO_ADDR
22262: GO 22857
22264: LD_INT 3
22266: DOUBLE
22267: EQUAL
22268: IFTRUE 22272
22270: GO 22283
22272: POP
// bc_type := b_lab ; 4 .. 9 :
22273: LD_ADDR_OWVAR 42
22277: PUSH
22278: LD_INT 6
22280: ST_TO_ADDR
22281: GO 22857
22283: LD_INT 4
22285: DOUBLE
22286: GREATEREQUAL
22287: IFFALSE 22295
22289: LD_INT 9
22291: DOUBLE
22292: LESSEQUAL
22293: IFTRUE 22297
22295: GO 22349
22297: POP
// begin bc_type := b_lab_half ;
22298: LD_ADDR_OWVAR 42
22302: PUSH
22303: LD_INT 7
22305: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22306: LD_ADDR_OWVAR 44
22310: PUSH
22311: LD_INT 10
22313: PUSH
22314: LD_INT 11
22316: PUSH
22317: LD_INT 12
22319: PUSH
22320: LD_INT 15
22322: PUSH
22323: LD_INT 14
22325: PUSH
22326: LD_INT 13
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: PUSH
22337: LD_VAR 0 2
22341: PUSH
22342: LD_INT 3
22344: MINUS
22345: ARRAY
22346: ST_TO_ADDR
// end ; 10 .. 13 :
22347: GO 22857
22349: LD_INT 10
22351: DOUBLE
22352: GREATEREQUAL
22353: IFFALSE 22361
22355: LD_INT 13
22357: DOUBLE
22358: LESSEQUAL
22359: IFTRUE 22363
22361: GO 22440
22363: POP
// begin bc_type := b_lab_full ;
22364: LD_ADDR_OWVAR 42
22368: PUSH
22369: LD_INT 8
22371: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22372: LD_ADDR_OWVAR 44
22376: PUSH
22377: LD_INT 10
22379: PUSH
22380: LD_INT 12
22382: PUSH
22383: LD_INT 14
22385: PUSH
22386: LD_INT 13
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: PUSH
22395: LD_VAR 0 2
22399: PUSH
22400: LD_INT 9
22402: MINUS
22403: ARRAY
22404: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22405: LD_ADDR_OWVAR 45
22409: PUSH
22410: LD_INT 11
22412: PUSH
22413: LD_INT 15
22415: PUSH
22416: LD_INT 12
22418: PUSH
22419: LD_INT 15
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: PUSH
22428: LD_VAR 0 2
22432: PUSH
22433: LD_INT 9
22435: MINUS
22436: ARRAY
22437: ST_TO_ADDR
// end ; 14 :
22438: GO 22857
22440: LD_INT 14
22442: DOUBLE
22443: EQUAL
22444: IFTRUE 22448
22446: GO 22459
22448: POP
// bc_type := b_workshop ; 15 :
22449: LD_ADDR_OWVAR 42
22453: PUSH
22454: LD_INT 2
22456: ST_TO_ADDR
22457: GO 22857
22459: LD_INT 15
22461: DOUBLE
22462: EQUAL
22463: IFTRUE 22467
22465: GO 22478
22467: POP
// bc_type := b_factory ; 16 :
22468: LD_ADDR_OWVAR 42
22472: PUSH
22473: LD_INT 3
22475: ST_TO_ADDR
22476: GO 22857
22478: LD_INT 16
22480: DOUBLE
22481: EQUAL
22482: IFTRUE 22486
22484: GO 22497
22486: POP
// bc_type := b_ext_gun ; 17 :
22487: LD_ADDR_OWVAR 42
22491: PUSH
22492: LD_INT 17
22494: ST_TO_ADDR
22495: GO 22857
22497: LD_INT 17
22499: DOUBLE
22500: EQUAL
22501: IFTRUE 22505
22503: GO 22533
22505: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22506: LD_ADDR_OWVAR 42
22510: PUSH
22511: LD_INT 19
22513: PUSH
22514: LD_INT 23
22516: PUSH
22517: LD_INT 19
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: LIST
22524: PUSH
22525: LD_VAR 0 1
22529: ARRAY
22530: ST_TO_ADDR
22531: GO 22857
22533: LD_INT 18
22535: DOUBLE
22536: EQUAL
22537: IFTRUE 22541
22539: GO 22552
22541: POP
// bc_type := b_ext_radar ; 19 :
22542: LD_ADDR_OWVAR 42
22546: PUSH
22547: LD_INT 20
22549: ST_TO_ADDR
22550: GO 22857
22552: LD_INT 19
22554: DOUBLE
22555: EQUAL
22556: IFTRUE 22560
22558: GO 22571
22560: POP
// bc_type := b_ext_radio ; 20 :
22561: LD_ADDR_OWVAR 42
22565: PUSH
22566: LD_INT 22
22568: ST_TO_ADDR
22569: GO 22857
22571: LD_INT 20
22573: DOUBLE
22574: EQUAL
22575: IFTRUE 22579
22577: GO 22590
22579: POP
// bc_type := b_ext_siberium ; 21 :
22580: LD_ADDR_OWVAR 42
22584: PUSH
22585: LD_INT 21
22587: ST_TO_ADDR
22588: GO 22857
22590: LD_INT 21
22592: DOUBLE
22593: EQUAL
22594: IFTRUE 22598
22596: GO 22609
22598: POP
// bc_type := b_ext_computer ; 22 :
22599: LD_ADDR_OWVAR 42
22603: PUSH
22604: LD_INT 24
22606: ST_TO_ADDR
22607: GO 22857
22609: LD_INT 22
22611: DOUBLE
22612: EQUAL
22613: IFTRUE 22617
22615: GO 22628
22617: POP
// bc_type := b_ext_track ; 23 :
22618: LD_ADDR_OWVAR 42
22622: PUSH
22623: LD_INT 16
22625: ST_TO_ADDR
22626: GO 22857
22628: LD_INT 23
22630: DOUBLE
22631: EQUAL
22632: IFTRUE 22636
22634: GO 22647
22636: POP
// bc_type := b_ext_laser ; 24 :
22637: LD_ADDR_OWVAR 42
22641: PUSH
22642: LD_INT 25
22644: ST_TO_ADDR
22645: GO 22857
22647: LD_INT 24
22649: DOUBLE
22650: EQUAL
22651: IFTRUE 22655
22653: GO 22666
22655: POP
// bc_type := b_control_tower ; 25 :
22656: LD_ADDR_OWVAR 42
22660: PUSH
22661: LD_INT 36
22663: ST_TO_ADDR
22664: GO 22857
22666: LD_INT 25
22668: DOUBLE
22669: EQUAL
22670: IFTRUE 22674
22672: GO 22685
22674: POP
// bc_type := b_breastwork ; 26 :
22675: LD_ADDR_OWVAR 42
22679: PUSH
22680: LD_INT 31
22682: ST_TO_ADDR
22683: GO 22857
22685: LD_INT 26
22687: DOUBLE
22688: EQUAL
22689: IFTRUE 22693
22691: GO 22704
22693: POP
// bc_type := b_bunker ; 27 :
22694: LD_ADDR_OWVAR 42
22698: PUSH
22699: LD_INT 32
22701: ST_TO_ADDR
22702: GO 22857
22704: LD_INT 27
22706: DOUBLE
22707: EQUAL
22708: IFTRUE 22712
22710: GO 22723
22712: POP
// bc_type := b_turret ; 28 :
22713: LD_ADDR_OWVAR 42
22717: PUSH
22718: LD_INT 33
22720: ST_TO_ADDR
22721: GO 22857
22723: LD_INT 28
22725: DOUBLE
22726: EQUAL
22727: IFTRUE 22731
22729: GO 22742
22731: POP
// bc_type := b_armoury ; 29 :
22732: LD_ADDR_OWVAR 42
22736: PUSH
22737: LD_INT 4
22739: ST_TO_ADDR
22740: GO 22857
22742: LD_INT 29
22744: DOUBLE
22745: EQUAL
22746: IFTRUE 22750
22748: GO 22761
22750: POP
// bc_type := b_barracks ; 30 :
22751: LD_ADDR_OWVAR 42
22755: PUSH
22756: LD_INT 5
22758: ST_TO_ADDR
22759: GO 22857
22761: LD_INT 30
22763: DOUBLE
22764: EQUAL
22765: IFTRUE 22769
22767: GO 22780
22769: POP
// bc_type := b_solar_power ; 31 :
22770: LD_ADDR_OWVAR 42
22774: PUSH
22775: LD_INT 27
22777: ST_TO_ADDR
22778: GO 22857
22780: LD_INT 31
22782: DOUBLE
22783: EQUAL
22784: IFTRUE 22788
22786: GO 22799
22788: POP
// bc_type := b_oil_power ; 32 :
22789: LD_ADDR_OWVAR 42
22793: PUSH
22794: LD_INT 26
22796: ST_TO_ADDR
22797: GO 22857
22799: LD_INT 32
22801: DOUBLE
22802: EQUAL
22803: IFTRUE 22807
22805: GO 22818
22807: POP
// bc_type := b_siberite_power ; 33 :
22808: LD_ADDR_OWVAR 42
22812: PUSH
22813: LD_INT 28
22815: ST_TO_ADDR
22816: GO 22857
22818: LD_INT 33
22820: DOUBLE
22821: EQUAL
22822: IFTRUE 22826
22824: GO 22837
22826: POP
// bc_type := b_oil_mine ; 34 :
22827: LD_ADDR_OWVAR 42
22831: PUSH
22832: LD_INT 29
22834: ST_TO_ADDR
22835: GO 22857
22837: LD_INT 34
22839: DOUBLE
22840: EQUAL
22841: IFTRUE 22845
22843: GO 22856
22845: POP
// bc_type := b_siberite_mine ; end ;
22846: LD_ADDR_OWVAR 42
22850: PUSH
22851: LD_INT 30
22853: ST_TO_ADDR
22854: GO 22857
22856: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22857: LD_ADDR_VAR 0 8
22861: PUSH
22862: LD_VAR 0 5
22866: PPUSH
22867: LD_VAR 0 6
22871: PPUSH
22872: LD_VAR 0 3
22876: PPUSH
22877: CALL_OW 47
22881: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22882: LD_OWVAR 42
22886: PUSH
22887: LD_INT 32
22889: PUSH
22890: LD_INT 33
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: IN
22897: IFFALSE 22913
// PlaceWeaponTurret ( b , weapon ) ;
22899: LD_VAR 0 8
22903: PPUSH
22904: LD_VAR 0 4
22908: PPUSH
22909: CALL_OW 431
// end ;
22913: LD_VAR 0 7
22917: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22918: LD_INT 0
22920: PPUSH
22921: PPUSH
22922: PPUSH
22923: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22924: LD_ADDR_VAR 0 4
22928: PUSH
22929: LD_INT 22
22931: PUSH
22932: LD_OWVAR 2
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: PUSH
22941: LD_INT 2
22943: PUSH
22944: LD_INT 30
22946: PUSH
22947: LD_INT 0
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: PUSH
22954: LD_INT 30
22956: PUSH
22957: LD_INT 1
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: LIST
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: PPUSH
22973: CALL_OW 69
22977: ST_TO_ADDR
// if not tmp then
22978: LD_VAR 0 4
22982: NOT
22983: IFFALSE 22987
// exit ;
22985: GO 23046
// for i in tmp do
22987: LD_ADDR_VAR 0 2
22991: PUSH
22992: LD_VAR 0 4
22996: PUSH
22997: FOR_IN
22998: IFFALSE 23044
// for j = 1 to 3 do
23000: LD_ADDR_VAR 0 3
23004: PUSH
23005: DOUBLE
23006: LD_INT 1
23008: DEC
23009: ST_TO_ADDR
23010: LD_INT 3
23012: PUSH
23013: FOR_TO
23014: IFFALSE 23040
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23016: LD_VAR 0 2
23020: PPUSH
23021: CALL_OW 274
23025: PPUSH
23026: LD_VAR 0 3
23030: PPUSH
23031: LD_INT 99999
23033: PPUSH
23034: CALL_OW 277
23038: GO 23013
23040: POP
23041: POP
23042: GO 22997
23044: POP
23045: POP
// end ;
23046: LD_VAR 0 1
23050: RET
// export function hHackSetLevel10 ; var i , j ; begin
23051: LD_INT 0
23053: PPUSH
23054: PPUSH
23055: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23056: LD_ADDR_VAR 0 2
23060: PUSH
23061: LD_INT 21
23063: PUSH
23064: LD_INT 1
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: PPUSH
23071: CALL_OW 69
23075: PUSH
23076: FOR_IN
23077: IFFALSE 23129
// if IsSelected ( i ) then
23079: LD_VAR 0 2
23083: PPUSH
23084: CALL_OW 306
23088: IFFALSE 23127
// begin for j := 1 to 4 do
23090: LD_ADDR_VAR 0 3
23094: PUSH
23095: DOUBLE
23096: LD_INT 1
23098: DEC
23099: ST_TO_ADDR
23100: LD_INT 4
23102: PUSH
23103: FOR_TO
23104: IFFALSE 23125
// SetSkill ( i , j , 10 ) ;
23106: LD_VAR 0 2
23110: PPUSH
23111: LD_VAR 0 3
23115: PPUSH
23116: LD_INT 10
23118: PPUSH
23119: CALL_OW 237
23123: GO 23103
23125: POP
23126: POP
// end ;
23127: GO 23076
23129: POP
23130: POP
// end ;
23131: LD_VAR 0 1
23135: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23136: LD_INT 0
23138: PPUSH
23139: PPUSH
23140: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23141: LD_ADDR_VAR 0 2
23145: PUSH
23146: LD_INT 22
23148: PUSH
23149: LD_OWVAR 2
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: PUSH
23158: LD_INT 21
23160: PUSH
23161: LD_INT 1
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: PPUSH
23172: CALL_OW 69
23176: PUSH
23177: FOR_IN
23178: IFFALSE 23219
// begin for j := 1 to 4 do
23180: LD_ADDR_VAR 0 3
23184: PUSH
23185: DOUBLE
23186: LD_INT 1
23188: DEC
23189: ST_TO_ADDR
23190: LD_INT 4
23192: PUSH
23193: FOR_TO
23194: IFFALSE 23215
// SetSkill ( i , j , 10 ) ;
23196: LD_VAR 0 2
23200: PPUSH
23201: LD_VAR 0 3
23205: PPUSH
23206: LD_INT 10
23208: PPUSH
23209: CALL_OW 237
23213: GO 23193
23215: POP
23216: POP
// end ;
23217: GO 23177
23219: POP
23220: POP
// end ;
23221: LD_VAR 0 1
23225: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23226: LD_INT 0
23228: PPUSH
// uc_side := your_side ;
23229: LD_ADDR_OWVAR 20
23233: PUSH
23234: LD_OWVAR 2
23238: ST_TO_ADDR
// uc_nation := nation ;
23239: LD_ADDR_OWVAR 21
23243: PUSH
23244: LD_VAR 0 1
23248: ST_TO_ADDR
// InitHc ;
23249: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23253: LD_INT 0
23255: PPUSH
23256: LD_VAR 0 2
23260: PPUSH
23261: LD_VAR 0 3
23265: PPUSH
23266: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23270: LD_VAR 0 4
23274: PPUSH
23275: LD_VAR 0 5
23279: PPUSH
23280: CALL_OW 428
23284: PUSH
23285: LD_INT 0
23287: EQUAL
23288: IFFALSE 23312
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23290: CALL_OW 44
23294: PPUSH
23295: LD_VAR 0 4
23299: PPUSH
23300: LD_VAR 0 5
23304: PPUSH
23305: LD_INT 1
23307: PPUSH
23308: CALL_OW 48
// end ;
23312: LD_VAR 0 6
23316: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23317: LD_INT 0
23319: PPUSH
23320: PPUSH
// uc_side := your_side ;
23321: LD_ADDR_OWVAR 20
23325: PUSH
23326: LD_OWVAR 2
23330: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23331: LD_VAR 0 1
23335: PUSH
23336: LD_INT 1
23338: PUSH
23339: LD_INT 2
23341: PUSH
23342: LD_INT 3
23344: PUSH
23345: LD_INT 4
23347: PUSH
23348: LD_INT 5
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: IN
23358: IFFALSE 23370
// uc_nation := nation_american else
23360: LD_ADDR_OWVAR 21
23364: PUSH
23365: LD_INT 1
23367: ST_TO_ADDR
23368: GO 23413
// if chassis in [ 11 , 12 , 13 , 14 ] then
23370: LD_VAR 0 1
23374: PUSH
23375: LD_INT 11
23377: PUSH
23378: LD_INT 12
23380: PUSH
23381: LD_INT 13
23383: PUSH
23384: LD_INT 14
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: IN
23393: IFFALSE 23405
// uc_nation := nation_arabian else
23395: LD_ADDR_OWVAR 21
23399: PUSH
23400: LD_INT 2
23402: ST_TO_ADDR
23403: GO 23413
// uc_nation := nation_russian ;
23405: LD_ADDR_OWVAR 21
23409: PUSH
23410: LD_INT 3
23412: ST_TO_ADDR
// vc_chassis := chassis ;
23413: LD_ADDR_OWVAR 37
23417: PUSH
23418: LD_VAR 0 1
23422: ST_TO_ADDR
// vc_engine := engine ;
23423: LD_ADDR_OWVAR 39
23427: PUSH
23428: LD_VAR 0 2
23432: ST_TO_ADDR
// vc_control := control ;
23433: LD_ADDR_OWVAR 38
23437: PUSH
23438: LD_VAR 0 3
23442: ST_TO_ADDR
// vc_weapon := weapon ;
23443: LD_ADDR_OWVAR 40
23447: PUSH
23448: LD_VAR 0 4
23452: ST_TO_ADDR
// un := CreateVehicle ;
23453: LD_ADDR_VAR 0 8
23457: PUSH
23458: CALL_OW 45
23462: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23463: LD_VAR 0 8
23467: PPUSH
23468: LD_INT 0
23470: PPUSH
23471: LD_INT 5
23473: PPUSH
23474: CALL_OW 12
23478: PPUSH
23479: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23483: LD_VAR 0 8
23487: PPUSH
23488: LD_VAR 0 5
23492: PPUSH
23493: LD_VAR 0 6
23497: PPUSH
23498: LD_INT 1
23500: PPUSH
23501: CALL_OW 48
// end ;
23505: LD_VAR 0 7
23509: RET
// export hInvincible ; every 1 do
23510: GO 23512
23512: DISABLE
// hInvincible := [ ] ;
23513: LD_ADDR_EXP 83
23517: PUSH
23518: EMPTY
23519: ST_TO_ADDR
23520: END
// every 10 do var i ;
23521: GO 23523
23523: DISABLE
23524: LD_INT 0
23526: PPUSH
// begin enable ;
23527: ENABLE
// if not hInvincible then
23528: LD_EXP 83
23532: NOT
23533: IFFALSE 23537
// exit ;
23535: GO 23581
// for i in hInvincible do
23537: LD_ADDR_VAR 0 1
23541: PUSH
23542: LD_EXP 83
23546: PUSH
23547: FOR_IN
23548: IFFALSE 23579
// if GetLives ( i ) < 1000 then
23550: LD_VAR 0 1
23554: PPUSH
23555: CALL_OW 256
23559: PUSH
23560: LD_INT 1000
23562: LESS
23563: IFFALSE 23577
// SetLives ( i , 1000 ) ;
23565: LD_VAR 0 1
23569: PPUSH
23570: LD_INT 1000
23572: PPUSH
23573: CALL_OW 234
23577: GO 23547
23579: POP
23580: POP
// end ;
23581: PPOPN 1
23583: END
// export function hHackInvincible ; var i ; begin
23584: LD_INT 0
23586: PPUSH
23587: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23588: LD_ADDR_VAR 0 2
23592: PUSH
23593: LD_INT 2
23595: PUSH
23596: LD_INT 21
23598: PUSH
23599: LD_INT 1
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: PUSH
23606: LD_INT 21
23608: PUSH
23609: LD_INT 2
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: LIST
23620: PPUSH
23621: CALL_OW 69
23625: PUSH
23626: FOR_IN
23627: IFFALSE 23688
// if IsSelected ( i ) then
23629: LD_VAR 0 2
23633: PPUSH
23634: CALL_OW 306
23638: IFFALSE 23686
// begin if i in hInvincible then
23640: LD_VAR 0 2
23644: PUSH
23645: LD_EXP 83
23649: IN
23650: IFFALSE 23670
// hInvincible := hInvincible diff i else
23652: LD_ADDR_EXP 83
23656: PUSH
23657: LD_EXP 83
23661: PUSH
23662: LD_VAR 0 2
23666: DIFF
23667: ST_TO_ADDR
23668: GO 23686
// hInvincible := hInvincible union i ;
23670: LD_ADDR_EXP 83
23674: PUSH
23675: LD_EXP 83
23679: PUSH
23680: LD_VAR 0 2
23684: UNION
23685: ST_TO_ADDR
// end ;
23686: GO 23626
23688: POP
23689: POP
// end ;
23690: LD_VAR 0 1
23694: RET
// export function hHackInvisible ; var i , j ; begin
23695: LD_INT 0
23697: PPUSH
23698: PPUSH
23699: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23700: LD_ADDR_VAR 0 2
23704: PUSH
23705: LD_INT 21
23707: PUSH
23708: LD_INT 1
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: PPUSH
23715: CALL_OW 69
23719: PUSH
23720: FOR_IN
23721: IFFALSE 23745
// if IsSelected ( i ) then
23723: LD_VAR 0 2
23727: PPUSH
23728: CALL_OW 306
23732: IFFALSE 23743
// ComForceInvisible ( i ) ;
23734: LD_VAR 0 2
23738: PPUSH
23739: CALL_OW 496
23743: GO 23720
23745: POP
23746: POP
// end ;
23747: LD_VAR 0 1
23751: RET
// export function hHackChangeYourSide ; begin
23752: LD_INT 0
23754: PPUSH
// if your_side = 8 then
23755: LD_OWVAR 2
23759: PUSH
23760: LD_INT 8
23762: EQUAL
23763: IFFALSE 23775
// your_side := 0 else
23765: LD_ADDR_OWVAR 2
23769: PUSH
23770: LD_INT 0
23772: ST_TO_ADDR
23773: GO 23789
// your_side := your_side + 1 ;
23775: LD_ADDR_OWVAR 2
23779: PUSH
23780: LD_OWVAR 2
23784: PUSH
23785: LD_INT 1
23787: PLUS
23788: ST_TO_ADDR
// end ;
23789: LD_VAR 0 1
23793: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23794: LD_INT 0
23796: PPUSH
23797: PPUSH
23798: PPUSH
// for i in all_units do
23799: LD_ADDR_VAR 0 2
23803: PUSH
23804: LD_OWVAR 3
23808: PUSH
23809: FOR_IN
23810: IFFALSE 23888
// if IsSelected ( i ) then
23812: LD_VAR 0 2
23816: PPUSH
23817: CALL_OW 306
23821: IFFALSE 23886
// begin j := GetSide ( i ) ;
23823: LD_ADDR_VAR 0 3
23827: PUSH
23828: LD_VAR 0 2
23832: PPUSH
23833: CALL_OW 255
23837: ST_TO_ADDR
// if j = 8 then
23838: LD_VAR 0 3
23842: PUSH
23843: LD_INT 8
23845: EQUAL
23846: IFFALSE 23858
// j := 0 else
23848: LD_ADDR_VAR 0 3
23852: PUSH
23853: LD_INT 0
23855: ST_TO_ADDR
23856: GO 23872
// j := j + 1 ;
23858: LD_ADDR_VAR 0 3
23862: PUSH
23863: LD_VAR 0 3
23867: PUSH
23868: LD_INT 1
23870: PLUS
23871: ST_TO_ADDR
// SetSide ( i , j ) ;
23872: LD_VAR 0 2
23876: PPUSH
23877: LD_VAR 0 3
23881: PPUSH
23882: CALL_OW 235
// end ;
23886: GO 23809
23888: POP
23889: POP
// end ;
23890: LD_VAR 0 1
23894: RET
// export function hHackFog ; begin
23895: LD_INT 0
23897: PPUSH
// FogOff ( true ) ;
23898: LD_INT 1
23900: PPUSH
23901: CALL_OW 344
// end ;
23905: LD_VAR 0 1
23909: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23910: LD_INT 0
23912: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23913: LD_VAR 0 1
23917: PPUSH
23918: LD_VAR 0 2
23922: PPUSH
23923: LD_VAR 0 3
23927: PPUSH
23928: LD_INT 1
23930: PPUSH
23931: LD_INT 1
23933: PPUSH
23934: CALL_OW 483
// CenterOnXY ( x , y ) ;
23938: LD_VAR 0 2
23942: PPUSH
23943: LD_VAR 0 3
23947: PPUSH
23948: CALL_OW 84
// end ;
23952: LD_VAR 0 4
23956: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
23957: LD_INT 0
23959: PPUSH
23960: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
23961: LD_VAR 0 1
23965: NOT
23966: PUSH
23967: LD_VAR 0 2
23971: PPUSH
23972: LD_VAR 0 3
23976: PPUSH
23977: CALL_OW 488
23981: NOT
23982: OR
23983: PUSH
23984: LD_VAR 0 1
23988: PPUSH
23989: CALL_OW 266
23993: PUSH
23994: LD_INT 3
23996: NONEQUAL
23997: PUSH
23998: LD_VAR 0 1
24002: PPUSH
24003: CALL_OW 247
24007: PUSH
24008: LD_INT 1
24010: EQUAL
24011: NOT
24012: AND
24013: OR
24014: IFFALSE 24018
// exit ;
24016: GO 24167
// if GetType ( factory ) = unit_human then
24018: LD_VAR 0 1
24022: PPUSH
24023: CALL_OW 247
24027: PUSH
24028: LD_INT 1
24030: EQUAL
24031: IFFALSE 24048
// factory := IsInUnit ( factory ) ;
24033: LD_ADDR_VAR 0 1
24037: PUSH
24038: LD_VAR 0 1
24042: PPUSH
24043: CALL_OW 310
24047: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
24048: LD_VAR 0 1
24052: PPUSH
24053: CALL_OW 266
24057: PUSH
24058: LD_INT 3
24060: NONEQUAL
24061: IFFALSE 24065
// exit ;
24063: GO 24167
// if HexInfo ( x , y ) = factory then
24065: LD_VAR 0 2
24069: PPUSH
24070: LD_VAR 0 3
24074: PPUSH
24075: CALL_OW 428
24079: PUSH
24080: LD_VAR 0 1
24084: EQUAL
24085: IFFALSE 24112
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
24087: LD_ADDR_EXP 84
24091: PUSH
24092: LD_EXP 84
24096: PPUSH
24097: LD_VAR 0 1
24101: PPUSH
24102: LD_INT 0
24104: PPUSH
24105: CALL_OW 1
24109: ST_TO_ADDR
24110: GO 24163
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
24112: LD_ADDR_EXP 84
24116: PUSH
24117: LD_EXP 84
24121: PPUSH
24122: LD_VAR 0 1
24126: PPUSH
24127: LD_VAR 0 1
24131: PPUSH
24132: CALL_OW 255
24136: PUSH
24137: LD_VAR 0 1
24141: PUSH
24142: LD_VAR 0 2
24146: PUSH
24147: LD_VAR 0 3
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: PPUSH
24158: CALL_OW 1
24162: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24163: CALL 24172 0 0
// end ;
24167: LD_VAR 0 4
24171: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
24172: LD_INT 0
24174: PPUSH
24175: PPUSH
24176: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24177: LD_STRING resetFactoryWaypoint();
24179: PPUSH
24180: CALL_OW 559
// if factoryWaypoints then
24184: LD_EXP 84
24188: IFFALSE 24314
// begin list := PrepareArray ( factoryWaypoints ) ;
24190: LD_ADDR_VAR 0 3
24194: PUSH
24195: LD_EXP 84
24199: PPUSH
24200: CALL 70783 0 1
24204: ST_TO_ADDR
// for i := 1 to list do
24205: LD_ADDR_VAR 0 2
24209: PUSH
24210: DOUBLE
24211: LD_INT 1
24213: DEC
24214: ST_TO_ADDR
24215: LD_VAR 0 3
24219: PUSH
24220: FOR_TO
24221: IFFALSE 24312
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24223: LD_STRING setFactoryWaypointXY(
24225: PUSH
24226: LD_VAR 0 3
24230: PUSH
24231: LD_VAR 0 2
24235: ARRAY
24236: PUSH
24237: LD_INT 1
24239: ARRAY
24240: STR
24241: PUSH
24242: LD_STRING ,
24244: STR
24245: PUSH
24246: LD_VAR 0 3
24250: PUSH
24251: LD_VAR 0 2
24255: ARRAY
24256: PUSH
24257: LD_INT 2
24259: ARRAY
24260: STR
24261: PUSH
24262: LD_STRING ,
24264: STR
24265: PUSH
24266: LD_VAR 0 3
24270: PUSH
24271: LD_VAR 0 2
24275: ARRAY
24276: PUSH
24277: LD_INT 3
24279: ARRAY
24280: STR
24281: PUSH
24282: LD_STRING ,
24284: STR
24285: PUSH
24286: LD_VAR 0 3
24290: PUSH
24291: LD_VAR 0 2
24295: ARRAY
24296: PUSH
24297: LD_INT 4
24299: ARRAY
24300: STR
24301: PUSH
24302: LD_STRING )
24304: STR
24305: PPUSH
24306: CALL_OW 559
24310: GO 24220
24312: POP
24313: POP
// end ; end ;
24314: LD_VAR 0 1
24318: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
24319: LD_INT 0
24321: PPUSH
// if HexInfo ( x , y ) = warehouse then
24322: LD_VAR 0 2
24326: PPUSH
24327: LD_VAR 0 3
24331: PPUSH
24332: CALL_OW 428
24336: PUSH
24337: LD_VAR 0 1
24341: EQUAL
24342: IFFALSE 24369
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
24344: LD_ADDR_EXP 85
24348: PUSH
24349: LD_EXP 85
24353: PPUSH
24354: LD_VAR 0 1
24358: PPUSH
24359: LD_INT 0
24361: PPUSH
24362: CALL_OW 1
24366: ST_TO_ADDR
24367: GO 24420
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
24369: LD_ADDR_EXP 85
24373: PUSH
24374: LD_EXP 85
24378: PPUSH
24379: LD_VAR 0 1
24383: PPUSH
24384: LD_VAR 0 1
24388: PPUSH
24389: CALL_OW 255
24393: PUSH
24394: LD_VAR 0 1
24398: PUSH
24399: LD_VAR 0 2
24403: PUSH
24404: LD_VAR 0 3
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: PPUSH
24415: CALL_OW 1
24419: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
24420: CALL 24429 0 0
// end ;
24424: LD_VAR 0 4
24428: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
24429: LD_INT 0
24431: PPUSH
24432: PPUSH
24433: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
24434: LD_STRING resetWarehouseGatheringPoints();
24436: PPUSH
24437: CALL_OW 559
// if warehouseGatheringPoints then
24441: LD_EXP 85
24445: IFFALSE 24571
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
24447: LD_ADDR_VAR 0 3
24451: PUSH
24452: LD_EXP 85
24456: PPUSH
24457: CALL 70783 0 1
24461: ST_TO_ADDR
// for i := 1 to list do
24462: LD_ADDR_VAR 0 2
24466: PUSH
24467: DOUBLE
24468: LD_INT 1
24470: DEC
24471: ST_TO_ADDR
24472: LD_VAR 0 3
24476: PUSH
24477: FOR_TO
24478: IFFALSE 24569
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24480: LD_STRING setWarehouseGatheringPointXY(
24482: PUSH
24483: LD_VAR 0 3
24487: PUSH
24488: LD_VAR 0 2
24492: ARRAY
24493: PUSH
24494: LD_INT 1
24496: ARRAY
24497: STR
24498: PUSH
24499: LD_STRING ,
24501: STR
24502: PUSH
24503: LD_VAR 0 3
24507: PUSH
24508: LD_VAR 0 2
24512: ARRAY
24513: PUSH
24514: LD_INT 2
24516: ARRAY
24517: STR
24518: PUSH
24519: LD_STRING ,
24521: STR
24522: PUSH
24523: LD_VAR 0 3
24527: PUSH
24528: LD_VAR 0 2
24532: ARRAY
24533: PUSH
24534: LD_INT 3
24536: ARRAY
24537: STR
24538: PUSH
24539: LD_STRING ,
24541: STR
24542: PUSH
24543: LD_VAR 0 3
24547: PUSH
24548: LD_VAR 0 2
24552: ARRAY
24553: PUSH
24554: LD_INT 4
24556: ARRAY
24557: STR
24558: PUSH
24559: LD_STRING )
24561: STR
24562: PPUSH
24563: CALL_OW 559
24567: GO 24477
24569: POP
24570: POP
// end ; end ;
24571: LD_VAR 0 1
24575: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
24576: LD_EXP 85
24580: IFFALSE 25265
24582: GO 24584
24584: DISABLE
24585: LD_INT 0
24587: PPUSH
24588: PPUSH
24589: PPUSH
24590: PPUSH
24591: PPUSH
24592: PPUSH
24593: PPUSH
24594: PPUSH
24595: PPUSH
// begin enable ;
24596: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
24597: LD_ADDR_VAR 0 3
24601: PUSH
24602: LD_EXP 85
24606: PPUSH
24607: CALL 70783 0 1
24611: ST_TO_ADDR
// if not list then
24612: LD_VAR 0 3
24616: NOT
24617: IFFALSE 24621
// exit ;
24619: GO 25265
// for i := 1 to list do
24621: LD_ADDR_VAR 0 1
24625: PUSH
24626: DOUBLE
24627: LD_INT 1
24629: DEC
24630: ST_TO_ADDR
24631: LD_VAR 0 3
24635: PUSH
24636: FOR_TO
24637: IFFALSE 25263
// begin depot := list [ i ] [ 2 ] ;
24639: LD_ADDR_VAR 0 8
24643: PUSH
24644: LD_VAR 0 3
24648: PUSH
24649: LD_VAR 0 1
24653: ARRAY
24654: PUSH
24655: LD_INT 2
24657: ARRAY
24658: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
24659: LD_ADDR_VAR 0 5
24663: PUSH
24664: LD_VAR 0 3
24668: PUSH
24669: LD_VAR 0 1
24673: ARRAY
24674: PUSH
24675: LD_INT 1
24677: ARRAY
24678: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
24679: LD_VAR 0 8
24683: PPUSH
24684: CALL_OW 301
24688: PUSH
24689: LD_VAR 0 5
24693: PUSH
24694: LD_VAR 0 8
24698: PPUSH
24699: CALL_OW 255
24703: NONEQUAL
24704: OR
24705: IFFALSE 24734
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
24707: LD_ADDR_EXP 85
24711: PUSH
24712: LD_EXP 85
24716: PPUSH
24717: LD_VAR 0 8
24721: PPUSH
24722: LD_INT 0
24724: PPUSH
24725: CALL_OW 1
24729: ST_TO_ADDR
// exit ;
24730: POP
24731: POP
24732: GO 25265
// end ; x := list [ i ] [ 3 ] ;
24734: LD_ADDR_VAR 0 6
24738: PUSH
24739: LD_VAR 0 3
24743: PUSH
24744: LD_VAR 0 1
24748: ARRAY
24749: PUSH
24750: LD_INT 3
24752: ARRAY
24753: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
24754: LD_ADDR_VAR 0 7
24758: PUSH
24759: LD_VAR 0 3
24763: PUSH
24764: LD_VAR 0 1
24768: ARRAY
24769: PUSH
24770: LD_INT 4
24772: ARRAY
24773: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
24774: LD_ADDR_VAR 0 9
24778: PUSH
24779: LD_VAR 0 6
24783: PPUSH
24784: LD_VAR 0 7
24788: PPUSH
24789: LD_INT 16
24791: PPUSH
24792: CALL 69371 0 3
24796: ST_TO_ADDR
// if not cratesNearbyPoint then
24797: LD_VAR 0 9
24801: NOT
24802: IFFALSE 24808
// exit ;
24804: POP
24805: POP
24806: GO 25265
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
24808: LD_ADDR_VAR 0 4
24812: PUSH
24813: LD_INT 22
24815: PUSH
24816: LD_VAR 0 5
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: PUSH
24825: LD_INT 3
24827: PUSH
24828: LD_INT 60
24830: PUSH
24831: EMPTY
24832: LIST
24833: PUSH
24834: EMPTY
24835: LIST
24836: LIST
24837: PUSH
24838: LD_INT 91
24840: PUSH
24841: LD_VAR 0 8
24845: PUSH
24846: LD_INT 6
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: LIST
24853: PUSH
24854: LD_INT 2
24856: PUSH
24857: LD_INT 25
24859: PUSH
24860: LD_INT 2
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PUSH
24867: LD_INT 25
24869: PUSH
24870: LD_INT 16
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: LIST
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: PPUSH
24888: CALL_OW 69
24892: PUSH
24893: LD_VAR 0 8
24897: PPUSH
24898: CALL_OW 313
24902: PPUSH
24903: LD_INT 3
24905: PUSH
24906: LD_INT 60
24908: PUSH
24909: EMPTY
24910: LIST
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: PUSH
24916: LD_INT 2
24918: PUSH
24919: LD_INT 25
24921: PUSH
24922: LD_INT 2
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 25
24931: PUSH
24932: LD_INT 16
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: LIST
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PPUSH
24948: CALL_OW 72
24952: UNION
24953: ST_TO_ADDR
// if tmp then
24954: LD_VAR 0 4
24958: IFFALSE 25038
// begin tmp := ShrinkArray ( tmp , 3 ) ;
24960: LD_ADDR_VAR 0 4
24964: PUSH
24965: LD_VAR 0 4
24969: PPUSH
24970: LD_INT 3
24972: PPUSH
24973: CALL 67340 0 2
24977: ST_TO_ADDR
// for j in tmp do
24978: LD_ADDR_VAR 0 2
24982: PUSH
24983: LD_VAR 0 4
24987: PUSH
24988: FOR_IN
24989: IFFALSE 25032
// begin if IsInUnit ( j ) then
24991: LD_VAR 0 2
24995: PPUSH
24996: CALL_OW 310
25000: IFFALSE 25011
// ComExit ( j ) ;
25002: LD_VAR 0 2
25006: PPUSH
25007: CALL 67423 0 1
// AddComCollect ( j , x , y ) ;
25011: LD_VAR 0 2
25015: PPUSH
25016: LD_VAR 0 6
25020: PPUSH
25021: LD_VAR 0 7
25025: PPUSH
25026: CALL_OW 177
// end ;
25030: GO 24988
25032: POP
25033: POP
// exit ;
25034: POP
25035: POP
25036: GO 25265
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
25038: LD_ADDR_VAR 0 4
25042: PUSH
25043: LD_INT 22
25045: PUSH
25046: LD_VAR 0 5
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: LD_INT 91
25057: PUSH
25058: LD_VAR 0 8
25062: PUSH
25063: LD_INT 8
25065: PUSH
25066: EMPTY
25067: LIST
25068: LIST
25069: LIST
25070: PUSH
25071: LD_INT 2
25073: PUSH
25074: LD_INT 34
25076: PUSH
25077: LD_INT 12
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PUSH
25084: LD_INT 34
25086: PUSH
25087: LD_INT 51
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: PUSH
25094: LD_INT 34
25096: PUSH
25097: LD_INT 32
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: LD_INT 34
25106: PUSH
25107: LD_INT 89
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: LIST
25125: PPUSH
25126: CALL_OW 69
25130: ST_TO_ADDR
// if tmp then
25131: LD_VAR 0 4
25135: IFFALSE 25261
// begin for j in tmp do
25137: LD_ADDR_VAR 0 2
25141: PUSH
25142: LD_VAR 0 4
25146: PUSH
25147: FOR_IN
25148: IFFALSE 25259
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
25150: LD_VAR 0 2
25154: PPUSH
25155: CALL_OW 262
25159: PUSH
25160: LD_INT 3
25162: EQUAL
25163: PUSH
25164: LD_VAR 0 2
25168: PPUSH
25169: CALL_OW 261
25173: PUSH
25174: LD_INT 20
25176: GREATER
25177: OR
25178: PUSH
25179: LD_VAR 0 2
25183: PPUSH
25184: CALL_OW 314
25188: NOT
25189: AND
25190: PUSH
25191: LD_VAR 0 2
25195: PPUSH
25196: CALL_OW 263
25200: PUSH
25201: LD_INT 1
25203: NONEQUAL
25204: PUSH
25205: LD_VAR 0 2
25209: PPUSH
25210: CALL_OW 311
25214: OR
25215: AND
25216: IFFALSE 25257
// begin ComCollect ( j , x , y ) ;
25218: LD_VAR 0 2
25222: PPUSH
25223: LD_VAR 0 6
25227: PPUSH
25228: LD_VAR 0 7
25232: PPUSH
25233: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
25237: LD_VAR 0 2
25241: PPUSH
25242: LD_VAR 0 8
25246: PPUSH
25247: CALL_OW 172
// exit ;
25251: POP
25252: POP
25253: POP
25254: POP
25255: GO 25265
// end ;
25257: GO 25147
25259: POP
25260: POP
// end ; end ;
25261: GO 24636
25263: POP
25264: POP
// end ; end_of_file
25265: PPOPN 9
25267: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25268: LD_INT 0
25270: PPUSH
25271: PPUSH
25272: PPUSH
25273: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25274: LD_VAR 0 1
25278: PPUSH
25279: CALL_OW 264
25283: PUSH
25284: LD_INT 91
25286: EQUAL
25287: IFFALSE 25359
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25289: LD_INT 68
25291: PPUSH
25292: LD_VAR 0 1
25296: PPUSH
25297: CALL_OW 255
25301: PPUSH
25302: CALL_OW 321
25306: PUSH
25307: LD_INT 2
25309: EQUAL
25310: IFFALSE 25322
// eff := 70 else
25312: LD_ADDR_VAR 0 4
25316: PUSH
25317: LD_INT 70
25319: ST_TO_ADDR
25320: GO 25330
// eff := 30 ;
25322: LD_ADDR_VAR 0 4
25326: PUSH
25327: LD_INT 30
25329: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25330: LD_VAR 0 1
25334: PPUSH
25335: CALL_OW 250
25339: PPUSH
25340: LD_VAR 0 1
25344: PPUSH
25345: CALL_OW 251
25349: PPUSH
25350: LD_VAR 0 4
25354: PPUSH
25355: CALL_OW 495
// end ; end ;
25359: LD_VAR 0 2
25363: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25364: LD_INT 0
25366: PPUSH
// end ;
25367: LD_VAR 0 4
25371: RET
// export function SOS_Command ( cmd ) ; begin
25372: LD_INT 0
25374: PPUSH
// end ;
25375: LD_VAR 0 2
25379: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25380: LD_INT 0
25382: PPUSH
// end ;
25383: LD_VAR 0 6
25387: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
25388: LD_INT 0
25390: PPUSH
25391: PPUSH
// if not vehicle or not factory then
25392: LD_VAR 0 1
25396: NOT
25397: PUSH
25398: LD_VAR 0 2
25402: NOT
25403: OR
25404: IFFALSE 25408
// exit ;
25406: GO 25639
// if factoryWaypoints >= factory then
25408: LD_EXP 84
25412: PUSH
25413: LD_VAR 0 2
25417: GREATEREQUAL
25418: IFFALSE 25639
// if factoryWaypoints [ factory ] then
25420: LD_EXP 84
25424: PUSH
25425: LD_VAR 0 2
25429: ARRAY
25430: IFFALSE 25639
// begin if GetControl ( vehicle ) = control_manual then
25432: LD_VAR 0 1
25436: PPUSH
25437: CALL_OW 263
25441: PUSH
25442: LD_INT 1
25444: EQUAL
25445: IFFALSE 25526
// begin driver := IsDrivenBy ( vehicle ) ;
25447: LD_ADDR_VAR 0 4
25451: PUSH
25452: LD_VAR 0 1
25456: PPUSH
25457: CALL_OW 311
25461: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25462: LD_VAR 0 4
25466: PPUSH
25467: LD_EXP 84
25471: PUSH
25472: LD_VAR 0 2
25476: ARRAY
25477: PUSH
25478: LD_INT 3
25480: ARRAY
25481: PPUSH
25482: LD_EXP 84
25486: PUSH
25487: LD_VAR 0 2
25491: ARRAY
25492: PUSH
25493: LD_INT 4
25495: ARRAY
25496: PPUSH
25497: CALL_OW 171
// AddComExitVehicle ( driver ) ;
25501: LD_VAR 0 4
25505: PPUSH
25506: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
25510: LD_VAR 0 4
25514: PPUSH
25515: LD_VAR 0 2
25519: PPUSH
25520: CALL_OW 180
// end else
25524: GO 25639
// if GetControl ( vehicle ) = control_remote then
25526: LD_VAR 0 1
25530: PPUSH
25531: CALL_OW 263
25535: PUSH
25536: LD_INT 2
25538: EQUAL
25539: IFFALSE 25600
// begin wait ( 0 0$2 ) ;
25541: LD_INT 70
25543: PPUSH
25544: CALL_OW 67
// if Connect ( vehicle ) then
25548: LD_VAR 0 1
25552: PPUSH
25553: CALL 37663 0 1
25557: IFFALSE 25598
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25559: LD_VAR 0 1
25563: PPUSH
25564: LD_EXP 84
25568: PUSH
25569: LD_VAR 0 2
25573: ARRAY
25574: PUSH
25575: LD_INT 3
25577: ARRAY
25578: PPUSH
25579: LD_EXP 84
25583: PUSH
25584: LD_VAR 0 2
25588: ARRAY
25589: PUSH
25590: LD_INT 4
25592: ARRAY
25593: PPUSH
25594: CALL_OW 171
// end else
25598: GO 25639
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25600: LD_VAR 0 1
25604: PPUSH
25605: LD_EXP 84
25609: PUSH
25610: LD_VAR 0 2
25614: ARRAY
25615: PUSH
25616: LD_INT 3
25618: ARRAY
25619: PPUSH
25620: LD_EXP 84
25624: PUSH
25625: LD_VAR 0 2
25629: ARRAY
25630: PUSH
25631: LD_INT 4
25633: ARRAY
25634: PPUSH
25635: CALL_OW 171
// end ; end ;
25639: LD_VAR 0 3
25643: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25644: LD_INT 0
25646: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25647: LD_VAR 0 1
25651: PUSH
25652: LD_INT 250
25654: EQUAL
25655: PUSH
25656: LD_VAR 0 2
25660: PPUSH
25661: CALL_OW 264
25665: PUSH
25666: LD_INT 81
25668: EQUAL
25669: AND
25670: IFFALSE 25691
// MinerPlaceMine ( unit , x , y ) ;
25672: LD_VAR 0 2
25676: PPUSH
25677: LD_VAR 0 4
25681: PPUSH
25682: LD_VAR 0 5
25686: PPUSH
25687: CALL 28076 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25691: LD_VAR 0 1
25695: PUSH
25696: LD_INT 251
25698: EQUAL
25699: PUSH
25700: LD_VAR 0 2
25704: PPUSH
25705: CALL_OW 264
25709: PUSH
25710: LD_INT 81
25712: EQUAL
25713: AND
25714: IFFALSE 25735
// MinerDetonateMine ( unit , x , y ) ;
25716: LD_VAR 0 2
25720: PPUSH
25721: LD_VAR 0 4
25725: PPUSH
25726: LD_VAR 0 5
25730: PPUSH
25731: CALL 28351 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25735: LD_VAR 0 1
25739: PUSH
25740: LD_INT 252
25742: EQUAL
25743: PUSH
25744: LD_VAR 0 2
25748: PPUSH
25749: CALL_OW 264
25753: PUSH
25754: LD_INT 81
25756: EQUAL
25757: AND
25758: IFFALSE 25779
// MinerCreateMinefield ( unit , x , y ) ;
25760: LD_VAR 0 2
25764: PPUSH
25765: LD_VAR 0 4
25769: PPUSH
25770: LD_VAR 0 5
25774: PPUSH
25775: CALL 28768 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25779: LD_VAR 0 1
25783: PUSH
25784: LD_INT 253
25786: EQUAL
25787: PUSH
25788: LD_VAR 0 2
25792: PPUSH
25793: CALL_OW 257
25797: PUSH
25798: LD_INT 5
25800: EQUAL
25801: AND
25802: IFFALSE 25823
// ComBinocular ( unit , x , y ) ;
25804: LD_VAR 0 2
25808: PPUSH
25809: LD_VAR 0 4
25813: PPUSH
25814: LD_VAR 0 5
25818: PPUSH
25819: CALL 29137 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25823: LD_VAR 0 1
25827: PUSH
25828: LD_INT 254
25830: EQUAL
25831: PUSH
25832: LD_VAR 0 2
25836: PPUSH
25837: CALL_OW 264
25841: PUSH
25842: LD_INT 99
25844: EQUAL
25845: AND
25846: PUSH
25847: LD_VAR 0 3
25851: PPUSH
25852: CALL_OW 263
25856: PUSH
25857: LD_INT 3
25859: EQUAL
25860: AND
25861: IFFALSE 25877
// HackDestroyVehicle ( unit , selectedUnit ) ;
25863: LD_VAR 0 2
25867: PPUSH
25868: LD_VAR 0 3
25872: PPUSH
25873: CALL 27440 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25877: LD_VAR 0 1
25881: PUSH
25882: LD_INT 255
25884: EQUAL
25885: PUSH
25886: LD_VAR 0 2
25890: PPUSH
25891: CALL_OW 264
25895: PUSH
25896: LD_INT 14
25898: PUSH
25899: LD_INT 53
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: IN
25906: AND
25907: PUSH
25908: LD_VAR 0 4
25912: PPUSH
25913: LD_VAR 0 5
25917: PPUSH
25918: CALL_OW 488
25922: AND
25923: IFFALSE 25947
// CutTreeXYR ( unit , x , y , 12 ) ;
25925: LD_VAR 0 2
25929: PPUSH
25930: LD_VAR 0 4
25934: PPUSH
25935: LD_VAR 0 5
25939: PPUSH
25940: LD_INT 12
25942: PPUSH
25943: CALL 26010 0 4
// if cmd = 256 then
25947: LD_VAR 0 1
25951: PUSH
25952: LD_INT 256
25954: EQUAL
25955: IFFALSE 25976
// SetFactoryWaypoint ( unit , x , y ) ;
25957: LD_VAR 0 2
25961: PPUSH
25962: LD_VAR 0 4
25966: PPUSH
25967: LD_VAR 0 5
25971: PPUSH
25972: CALL 23957 0 3
// if cmd = 257 then
25976: LD_VAR 0 1
25980: PUSH
25981: LD_INT 257
25983: EQUAL
25984: IFFALSE 26005
// SetWarehouseGatheringPoint ( unit , x , y ) ;
25986: LD_VAR 0 2
25990: PPUSH
25991: LD_VAR 0 4
25995: PPUSH
25996: LD_VAR 0 5
26000: PPUSH
26001: CALL 24319 0 3
// end ;
26005: LD_VAR 0 6
26009: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26010: LD_INT 0
26012: PPUSH
26013: PPUSH
26014: PPUSH
26015: PPUSH
26016: PPUSH
26017: PPUSH
26018: PPUSH
26019: PPUSH
26020: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26021: LD_VAR 0 1
26025: NOT
26026: PUSH
26027: LD_VAR 0 2
26031: PPUSH
26032: LD_VAR 0 3
26036: PPUSH
26037: CALL_OW 488
26041: NOT
26042: OR
26043: PUSH
26044: LD_VAR 0 4
26048: NOT
26049: OR
26050: IFFALSE 26054
// exit ;
26052: GO 26394
// list := [ ] ;
26054: LD_ADDR_VAR 0 13
26058: PUSH
26059: EMPTY
26060: ST_TO_ADDR
// if x - r < 0 then
26061: LD_VAR 0 2
26065: PUSH
26066: LD_VAR 0 4
26070: MINUS
26071: PUSH
26072: LD_INT 0
26074: LESS
26075: IFFALSE 26087
// min_x := 0 else
26077: LD_ADDR_VAR 0 7
26081: PUSH
26082: LD_INT 0
26084: ST_TO_ADDR
26085: GO 26103
// min_x := x - r ;
26087: LD_ADDR_VAR 0 7
26091: PUSH
26092: LD_VAR 0 2
26096: PUSH
26097: LD_VAR 0 4
26101: MINUS
26102: ST_TO_ADDR
// if y - r < 0 then
26103: LD_VAR 0 3
26107: PUSH
26108: LD_VAR 0 4
26112: MINUS
26113: PUSH
26114: LD_INT 0
26116: LESS
26117: IFFALSE 26129
// min_y := 0 else
26119: LD_ADDR_VAR 0 8
26123: PUSH
26124: LD_INT 0
26126: ST_TO_ADDR
26127: GO 26145
// min_y := y - r ;
26129: LD_ADDR_VAR 0 8
26133: PUSH
26134: LD_VAR 0 3
26138: PUSH
26139: LD_VAR 0 4
26143: MINUS
26144: ST_TO_ADDR
// max_x := x + r ;
26145: LD_ADDR_VAR 0 9
26149: PUSH
26150: LD_VAR 0 2
26154: PUSH
26155: LD_VAR 0 4
26159: PLUS
26160: ST_TO_ADDR
// max_y := y + r ;
26161: LD_ADDR_VAR 0 10
26165: PUSH
26166: LD_VAR 0 3
26170: PUSH
26171: LD_VAR 0 4
26175: PLUS
26176: ST_TO_ADDR
// for _x = min_x to max_x do
26177: LD_ADDR_VAR 0 11
26181: PUSH
26182: DOUBLE
26183: LD_VAR 0 7
26187: DEC
26188: ST_TO_ADDR
26189: LD_VAR 0 9
26193: PUSH
26194: FOR_TO
26195: IFFALSE 26312
// for _y = min_y to max_y do
26197: LD_ADDR_VAR 0 12
26201: PUSH
26202: DOUBLE
26203: LD_VAR 0 8
26207: DEC
26208: ST_TO_ADDR
26209: LD_VAR 0 10
26213: PUSH
26214: FOR_TO
26215: IFFALSE 26308
// begin if not ValidHex ( _x , _y ) then
26217: LD_VAR 0 11
26221: PPUSH
26222: LD_VAR 0 12
26226: PPUSH
26227: CALL_OW 488
26231: NOT
26232: IFFALSE 26236
// continue ;
26234: GO 26214
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26236: LD_VAR 0 11
26240: PPUSH
26241: LD_VAR 0 12
26245: PPUSH
26246: CALL_OW 351
26250: PUSH
26251: LD_VAR 0 11
26255: PPUSH
26256: LD_VAR 0 12
26260: PPUSH
26261: CALL_OW 554
26265: AND
26266: IFFALSE 26306
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26268: LD_ADDR_VAR 0 13
26272: PUSH
26273: LD_VAR 0 13
26277: PPUSH
26278: LD_VAR 0 13
26282: PUSH
26283: LD_INT 1
26285: PLUS
26286: PPUSH
26287: LD_VAR 0 11
26291: PUSH
26292: LD_VAR 0 12
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PPUSH
26301: CALL_OW 2
26305: ST_TO_ADDR
// end ;
26306: GO 26214
26308: POP
26309: POP
26310: GO 26194
26312: POP
26313: POP
// if not list then
26314: LD_VAR 0 13
26318: NOT
26319: IFFALSE 26323
// exit ;
26321: GO 26394
// for i in list do
26323: LD_ADDR_VAR 0 6
26327: PUSH
26328: LD_VAR 0 13
26332: PUSH
26333: FOR_IN
26334: IFFALSE 26392
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26336: LD_VAR 0 1
26340: PPUSH
26341: LD_STRING M
26343: PUSH
26344: LD_VAR 0 6
26348: PUSH
26349: LD_INT 1
26351: ARRAY
26352: PUSH
26353: LD_VAR 0 6
26357: PUSH
26358: LD_INT 2
26360: ARRAY
26361: PUSH
26362: LD_INT 0
26364: PUSH
26365: LD_INT 0
26367: PUSH
26368: LD_INT 0
26370: PUSH
26371: LD_INT 0
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: LIST
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: PUSH
26383: EMPTY
26384: LIST
26385: PPUSH
26386: CALL_OW 447
26390: GO 26333
26392: POP
26393: POP
// end ;
26394: LD_VAR 0 5
26398: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26399: LD_EXP 87
26403: NOT
26404: IFFALSE 26454
26406: GO 26408
26408: DISABLE
// begin initHack := true ;
26409: LD_ADDR_EXP 87
26413: PUSH
26414: LD_INT 1
26416: ST_TO_ADDR
// hackTanks := [ ] ;
26417: LD_ADDR_EXP 88
26421: PUSH
26422: EMPTY
26423: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26424: LD_ADDR_EXP 89
26428: PUSH
26429: EMPTY
26430: ST_TO_ADDR
// hackLimit := 3 ;
26431: LD_ADDR_EXP 90
26435: PUSH
26436: LD_INT 3
26438: ST_TO_ADDR
// hackDist := 12 ;
26439: LD_ADDR_EXP 91
26443: PUSH
26444: LD_INT 12
26446: ST_TO_ADDR
// hackCounter := [ ] ;
26447: LD_ADDR_EXP 92
26451: PUSH
26452: EMPTY
26453: ST_TO_ADDR
// end ;
26454: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26455: LD_EXP 87
26459: PUSH
26460: LD_INT 34
26462: PUSH
26463: LD_INT 99
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PPUSH
26470: CALL_OW 69
26474: AND
26475: IFFALSE 26728
26477: GO 26479
26479: DISABLE
26480: LD_INT 0
26482: PPUSH
26483: PPUSH
// begin enable ;
26484: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26485: LD_ADDR_VAR 0 1
26489: PUSH
26490: LD_INT 34
26492: PUSH
26493: LD_INT 99
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PPUSH
26500: CALL_OW 69
26504: PUSH
26505: FOR_IN
26506: IFFALSE 26726
// begin if not i in hackTanks then
26508: LD_VAR 0 1
26512: PUSH
26513: LD_EXP 88
26517: IN
26518: NOT
26519: IFFALSE 26602
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26521: LD_ADDR_EXP 88
26525: PUSH
26526: LD_EXP 88
26530: PPUSH
26531: LD_EXP 88
26535: PUSH
26536: LD_INT 1
26538: PLUS
26539: PPUSH
26540: LD_VAR 0 1
26544: PPUSH
26545: CALL_OW 1
26549: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26550: LD_ADDR_EXP 89
26554: PUSH
26555: LD_EXP 89
26559: PPUSH
26560: LD_EXP 89
26564: PUSH
26565: LD_INT 1
26567: PLUS
26568: PPUSH
26569: EMPTY
26570: PPUSH
26571: CALL_OW 1
26575: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26576: LD_ADDR_EXP 92
26580: PUSH
26581: LD_EXP 92
26585: PPUSH
26586: LD_EXP 92
26590: PUSH
26591: LD_INT 1
26593: PLUS
26594: PPUSH
26595: EMPTY
26596: PPUSH
26597: CALL_OW 1
26601: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26602: LD_VAR 0 1
26606: PPUSH
26607: CALL_OW 302
26611: NOT
26612: IFFALSE 26625
// begin HackUnlinkAll ( i ) ;
26614: LD_VAR 0 1
26618: PPUSH
26619: CALL 26731 0 1
// continue ;
26623: GO 26505
// end ; HackCheckCapturedStatus ( i ) ;
26625: LD_VAR 0 1
26629: PPUSH
26630: CALL 27174 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26634: LD_ADDR_VAR 0 2
26638: PUSH
26639: LD_INT 81
26641: PUSH
26642: LD_VAR 0 1
26646: PPUSH
26647: CALL_OW 255
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: PUSH
26656: LD_INT 33
26658: PUSH
26659: LD_INT 3
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: PUSH
26666: LD_INT 91
26668: PUSH
26669: LD_VAR 0 1
26673: PUSH
26674: LD_EXP 91
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: LIST
26683: PUSH
26684: LD_INT 50
26686: PUSH
26687: EMPTY
26688: LIST
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: PPUSH
26696: CALL_OW 69
26700: ST_TO_ADDR
// if not tmp then
26701: LD_VAR 0 2
26705: NOT
26706: IFFALSE 26710
// continue ;
26708: GO 26505
// HackLink ( i , tmp ) ;
26710: LD_VAR 0 1
26714: PPUSH
26715: LD_VAR 0 2
26719: PPUSH
26720: CALL 26867 0 2
// end ;
26724: GO 26505
26726: POP
26727: POP
// end ;
26728: PPOPN 2
26730: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26731: LD_INT 0
26733: PPUSH
26734: PPUSH
26735: PPUSH
// if not hack in hackTanks then
26736: LD_VAR 0 1
26740: PUSH
26741: LD_EXP 88
26745: IN
26746: NOT
26747: IFFALSE 26751
// exit ;
26749: GO 26862
// index := GetElementIndex ( hackTanks , hack ) ;
26751: LD_ADDR_VAR 0 4
26755: PUSH
26756: LD_EXP 88
26760: PPUSH
26761: LD_VAR 0 1
26765: PPUSH
26766: CALL 34479 0 2
26770: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26771: LD_EXP 89
26775: PUSH
26776: LD_VAR 0 4
26780: ARRAY
26781: IFFALSE 26862
// begin for i in hackTanksCaptured [ index ] do
26783: LD_ADDR_VAR 0 3
26787: PUSH
26788: LD_EXP 89
26792: PUSH
26793: LD_VAR 0 4
26797: ARRAY
26798: PUSH
26799: FOR_IN
26800: IFFALSE 26826
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26802: LD_VAR 0 3
26806: PUSH
26807: LD_INT 1
26809: ARRAY
26810: PPUSH
26811: LD_VAR 0 3
26815: PUSH
26816: LD_INT 2
26818: ARRAY
26819: PPUSH
26820: CALL_OW 235
26824: GO 26799
26826: POP
26827: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26828: LD_ADDR_EXP 89
26832: PUSH
26833: LD_EXP 89
26837: PPUSH
26838: LD_VAR 0 4
26842: PPUSH
26843: EMPTY
26844: PPUSH
26845: CALL_OW 1
26849: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26850: LD_VAR 0 1
26854: PPUSH
26855: LD_INT 0
26857: PPUSH
26858: CALL_OW 505
// end ; end ;
26862: LD_VAR 0 2
26866: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26867: LD_INT 0
26869: PPUSH
26870: PPUSH
26871: PPUSH
// if not hack in hackTanks or not vehicles then
26872: LD_VAR 0 1
26876: PUSH
26877: LD_EXP 88
26881: IN
26882: NOT
26883: PUSH
26884: LD_VAR 0 2
26888: NOT
26889: OR
26890: IFFALSE 26894
// exit ;
26892: GO 27169
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26894: LD_ADDR_VAR 0 2
26898: PUSH
26899: LD_VAR 0 1
26903: PPUSH
26904: LD_VAR 0 2
26908: PPUSH
26909: LD_INT 1
26911: PPUSH
26912: LD_INT 1
26914: PPUSH
26915: CALL 35129 0 4
26919: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26920: LD_ADDR_VAR 0 5
26924: PUSH
26925: LD_EXP 88
26929: PPUSH
26930: LD_VAR 0 1
26934: PPUSH
26935: CALL 34479 0 2
26939: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26940: LD_EXP 89
26944: PUSH
26945: LD_VAR 0 5
26949: ARRAY
26950: PUSH
26951: LD_EXP 90
26955: LESS
26956: IFFALSE 27145
// begin for i := 1 to vehicles do
26958: LD_ADDR_VAR 0 4
26962: PUSH
26963: DOUBLE
26964: LD_INT 1
26966: DEC
26967: ST_TO_ADDR
26968: LD_VAR 0 2
26972: PUSH
26973: FOR_TO
26974: IFFALSE 27143
// begin if hackTanksCaptured [ index ] = hackLimit then
26976: LD_EXP 89
26980: PUSH
26981: LD_VAR 0 5
26985: ARRAY
26986: PUSH
26987: LD_EXP 90
26991: EQUAL
26992: IFFALSE 26996
// break ;
26994: GO 27143
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26996: LD_ADDR_EXP 92
27000: PUSH
27001: LD_EXP 92
27005: PPUSH
27006: LD_VAR 0 5
27010: PPUSH
27011: LD_EXP 92
27015: PUSH
27016: LD_VAR 0 5
27020: ARRAY
27021: PUSH
27022: LD_INT 1
27024: PLUS
27025: PPUSH
27026: CALL_OW 1
27030: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27031: LD_ADDR_EXP 89
27035: PUSH
27036: LD_EXP 89
27040: PPUSH
27041: LD_VAR 0 5
27045: PUSH
27046: LD_EXP 89
27050: PUSH
27051: LD_VAR 0 5
27055: ARRAY
27056: PUSH
27057: LD_INT 1
27059: PLUS
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PPUSH
27065: LD_VAR 0 2
27069: PUSH
27070: LD_VAR 0 4
27074: ARRAY
27075: PUSH
27076: LD_VAR 0 2
27080: PUSH
27081: LD_VAR 0 4
27085: ARRAY
27086: PPUSH
27087: CALL_OW 255
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PPUSH
27096: CALL 34694 0 3
27100: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27101: LD_VAR 0 2
27105: PUSH
27106: LD_VAR 0 4
27110: ARRAY
27111: PPUSH
27112: LD_VAR 0 1
27116: PPUSH
27117: CALL_OW 255
27121: PPUSH
27122: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27126: LD_VAR 0 2
27130: PUSH
27131: LD_VAR 0 4
27135: ARRAY
27136: PPUSH
27137: CALL_OW 141
// end ;
27141: GO 26973
27143: POP
27144: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27145: LD_VAR 0 1
27149: PPUSH
27150: LD_EXP 89
27154: PUSH
27155: LD_VAR 0 5
27159: ARRAY
27160: PUSH
27161: LD_INT 0
27163: PLUS
27164: PPUSH
27165: CALL_OW 505
// end ;
27169: LD_VAR 0 3
27173: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27174: LD_INT 0
27176: PPUSH
27177: PPUSH
27178: PPUSH
27179: PPUSH
// if not hack in hackTanks then
27180: LD_VAR 0 1
27184: PUSH
27185: LD_EXP 88
27189: IN
27190: NOT
27191: IFFALSE 27195
// exit ;
27193: GO 27435
// index := GetElementIndex ( hackTanks , hack ) ;
27195: LD_ADDR_VAR 0 4
27199: PUSH
27200: LD_EXP 88
27204: PPUSH
27205: LD_VAR 0 1
27209: PPUSH
27210: CALL 34479 0 2
27214: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27215: LD_ADDR_VAR 0 3
27219: PUSH
27220: DOUBLE
27221: LD_EXP 89
27225: PUSH
27226: LD_VAR 0 4
27230: ARRAY
27231: INC
27232: ST_TO_ADDR
27233: LD_INT 1
27235: PUSH
27236: FOR_DOWNTO
27237: IFFALSE 27409
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27239: LD_ADDR_VAR 0 5
27243: PUSH
27244: LD_EXP 89
27248: PUSH
27249: LD_VAR 0 4
27253: ARRAY
27254: PUSH
27255: LD_VAR 0 3
27259: ARRAY
27260: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27261: LD_VAR 0 5
27265: PUSH
27266: LD_INT 1
27268: ARRAY
27269: PPUSH
27270: CALL_OW 302
27274: NOT
27275: PUSH
27276: LD_VAR 0 5
27280: PUSH
27281: LD_INT 1
27283: ARRAY
27284: PPUSH
27285: CALL_OW 255
27289: PUSH
27290: LD_VAR 0 1
27294: PPUSH
27295: CALL_OW 255
27299: NONEQUAL
27300: OR
27301: IFFALSE 27407
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27303: LD_VAR 0 5
27307: PUSH
27308: LD_INT 1
27310: ARRAY
27311: PPUSH
27312: CALL_OW 305
27316: PUSH
27317: LD_VAR 0 5
27321: PUSH
27322: LD_INT 1
27324: ARRAY
27325: PPUSH
27326: CALL_OW 255
27330: PUSH
27331: LD_VAR 0 1
27335: PPUSH
27336: CALL_OW 255
27340: EQUAL
27341: AND
27342: IFFALSE 27366
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27344: LD_VAR 0 5
27348: PUSH
27349: LD_INT 1
27351: ARRAY
27352: PPUSH
27353: LD_VAR 0 5
27357: PUSH
27358: LD_INT 2
27360: ARRAY
27361: PPUSH
27362: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27366: LD_ADDR_EXP 89
27370: PUSH
27371: LD_EXP 89
27375: PPUSH
27376: LD_VAR 0 4
27380: PPUSH
27381: LD_EXP 89
27385: PUSH
27386: LD_VAR 0 4
27390: ARRAY
27391: PPUSH
27392: LD_VAR 0 3
27396: PPUSH
27397: CALL_OW 3
27401: PPUSH
27402: CALL_OW 1
27406: ST_TO_ADDR
// end ; end ;
27407: GO 27236
27409: POP
27410: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27411: LD_VAR 0 1
27415: PPUSH
27416: LD_EXP 89
27420: PUSH
27421: LD_VAR 0 4
27425: ARRAY
27426: PUSH
27427: LD_INT 0
27429: PLUS
27430: PPUSH
27431: CALL_OW 505
// end ;
27435: LD_VAR 0 2
27439: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27440: LD_INT 0
27442: PPUSH
27443: PPUSH
27444: PPUSH
27445: PPUSH
// if not hack in hackTanks then
27446: LD_VAR 0 1
27450: PUSH
27451: LD_EXP 88
27455: IN
27456: NOT
27457: IFFALSE 27461
// exit ;
27459: GO 27546
// index := GetElementIndex ( hackTanks , hack ) ;
27461: LD_ADDR_VAR 0 5
27465: PUSH
27466: LD_EXP 88
27470: PPUSH
27471: LD_VAR 0 1
27475: PPUSH
27476: CALL 34479 0 2
27480: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27481: LD_ADDR_VAR 0 4
27485: PUSH
27486: DOUBLE
27487: LD_INT 1
27489: DEC
27490: ST_TO_ADDR
27491: LD_EXP 89
27495: PUSH
27496: LD_VAR 0 5
27500: ARRAY
27501: PUSH
27502: FOR_TO
27503: IFFALSE 27544
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27505: LD_EXP 89
27509: PUSH
27510: LD_VAR 0 5
27514: ARRAY
27515: PUSH
27516: LD_VAR 0 4
27520: ARRAY
27521: PUSH
27522: LD_INT 1
27524: ARRAY
27525: PUSH
27526: LD_VAR 0 2
27530: EQUAL
27531: IFFALSE 27542
// KillUnit ( vehicle ) ;
27533: LD_VAR 0 2
27537: PPUSH
27538: CALL_OW 66
27542: GO 27502
27544: POP
27545: POP
// end ;
27546: LD_VAR 0 3
27550: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27551: LD_EXP 93
27555: NOT
27556: IFFALSE 27591
27558: GO 27560
27560: DISABLE
// begin initMiner := true ;
27561: LD_ADDR_EXP 93
27565: PUSH
27566: LD_INT 1
27568: ST_TO_ADDR
// minersList := [ ] ;
27569: LD_ADDR_EXP 94
27573: PUSH
27574: EMPTY
27575: ST_TO_ADDR
// minerMinesList := [ ] ;
27576: LD_ADDR_EXP 95
27580: PUSH
27581: EMPTY
27582: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27583: LD_ADDR_EXP 96
27587: PUSH
27588: LD_INT 5
27590: ST_TO_ADDR
// end ;
27591: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27592: LD_EXP 93
27596: PUSH
27597: LD_INT 34
27599: PUSH
27600: LD_INT 81
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PPUSH
27607: CALL_OW 69
27611: AND
27612: IFFALSE 28073
27614: GO 27616
27616: DISABLE
27617: LD_INT 0
27619: PPUSH
27620: PPUSH
27621: PPUSH
27622: PPUSH
// begin enable ;
27623: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27624: LD_ADDR_VAR 0 1
27628: PUSH
27629: LD_INT 34
27631: PUSH
27632: LD_INT 81
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PPUSH
27639: CALL_OW 69
27643: PUSH
27644: FOR_IN
27645: IFFALSE 27717
// begin if not i in minersList then
27647: LD_VAR 0 1
27651: PUSH
27652: LD_EXP 94
27656: IN
27657: NOT
27658: IFFALSE 27715
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27660: LD_ADDR_EXP 94
27664: PUSH
27665: LD_EXP 94
27669: PPUSH
27670: LD_EXP 94
27674: PUSH
27675: LD_INT 1
27677: PLUS
27678: PPUSH
27679: LD_VAR 0 1
27683: PPUSH
27684: CALL_OW 1
27688: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27689: LD_ADDR_EXP 95
27693: PUSH
27694: LD_EXP 95
27698: PPUSH
27699: LD_EXP 95
27703: PUSH
27704: LD_INT 1
27706: PLUS
27707: PPUSH
27708: EMPTY
27709: PPUSH
27710: CALL_OW 1
27714: ST_TO_ADDR
// end end ;
27715: GO 27644
27717: POP
27718: POP
// for i := minerMinesList downto 1 do
27719: LD_ADDR_VAR 0 1
27723: PUSH
27724: DOUBLE
27725: LD_EXP 95
27729: INC
27730: ST_TO_ADDR
27731: LD_INT 1
27733: PUSH
27734: FOR_DOWNTO
27735: IFFALSE 28071
// begin if IsLive ( minersList [ i ] ) then
27737: LD_EXP 94
27741: PUSH
27742: LD_VAR 0 1
27746: ARRAY
27747: PPUSH
27748: CALL_OW 300
27752: IFFALSE 27780
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
27754: LD_EXP 94
27758: PUSH
27759: LD_VAR 0 1
27763: ARRAY
27764: PPUSH
27765: LD_EXP 95
27769: PUSH
27770: LD_VAR 0 1
27774: ARRAY
27775: PPUSH
27776: CALL_OW 505
// if not minerMinesList [ i ] then
27780: LD_EXP 95
27784: PUSH
27785: LD_VAR 0 1
27789: ARRAY
27790: NOT
27791: IFFALSE 27795
// continue ;
27793: GO 27734
// for j := minerMinesList [ i ] downto 1 do
27795: LD_ADDR_VAR 0 2
27799: PUSH
27800: DOUBLE
27801: LD_EXP 95
27805: PUSH
27806: LD_VAR 0 1
27810: ARRAY
27811: INC
27812: ST_TO_ADDR
27813: LD_INT 1
27815: PUSH
27816: FOR_DOWNTO
27817: IFFALSE 28067
// begin side := GetSide ( minersList [ i ] ) ;
27819: LD_ADDR_VAR 0 3
27823: PUSH
27824: LD_EXP 94
27828: PUSH
27829: LD_VAR 0 1
27833: ARRAY
27834: PPUSH
27835: CALL_OW 255
27839: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27840: LD_ADDR_VAR 0 4
27844: PUSH
27845: LD_EXP 95
27849: PUSH
27850: LD_VAR 0 1
27854: ARRAY
27855: PUSH
27856: LD_VAR 0 2
27860: ARRAY
27861: PUSH
27862: LD_INT 1
27864: ARRAY
27865: PPUSH
27866: LD_EXP 95
27870: PUSH
27871: LD_VAR 0 1
27875: ARRAY
27876: PUSH
27877: LD_VAR 0 2
27881: ARRAY
27882: PUSH
27883: LD_INT 2
27885: ARRAY
27886: PPUSH
27887: CALL_OW 428
27891: ST_TO_ADDR
// if not tmp then
27892: LD_VAR 0 4
27896: NOT
27897: IFFALSE 27901
// continue ;
27899: GO 27816
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27901: LD_VAR 0 4
27905: PUSH
27906: LD_INT 81
27908: PUSH
27909: LD_VAR 0 3
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: PPUSH
27918: CALL_OW 69
27922: IN
27923: PUSH
27924: LD_EXP 95
27928: PUSH
27929: LD_VAR 0 1
27933: ARRAY
27934: PUSH
27935: LD_VAR 0 2
27939: ARRAY
27940: PUSH
27941: LD_INT 1
27943: ARRAY
27944: PPUSH
27945: LD_EXP 95
27949: PUSH
27950: LD_VAR 0 1
27954: ARRAY
27955: PUSH
27956: LD_VAR 0 2
27960: ARRAY
27961: PUSH
27962: LD_INT 2
27964: ARRAY
27965: PPUSH
27966: CALL_OW 458
27970: AND
27971: IFFALSE 28065
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27973: LD_EXP 95
27977: PUSH
27978: LD_VAR 0 1
27982: ARRAY
27983: PUSH
27984: LD_VAR 0 2
27988: ARRAY
27989: PUSH
27990: LD_INT 1
27992: ARRAY
27993: PPUSH
27994: LD_EXP 95
27998: PUSH
27999: LD_VAR 0 1
28003: ARRAY
28004: PUSH
28005: LD_VAR 0 2
28009: ARRAY
28010: PUSH
28011: LD_INT 2
28013: ARRAY
28014: PPUSH
28015: LD_VAR 0 3
28019: PPUSH
28020: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28024: LD_ADDR_EXP 95
28028: PUSH
28029: LD_EXP 95
28033: PPUSH
28034: LD_VAR 0 1
28038: PPUSH
28039: LD_EXP 95
28043: PUSH
28044: LD_VAR 0 1
28048: ARRAY
28049: PPUSH
28050: LD_VAR 0 2
28054: PPUSH
28055: CALL_OW 3
28059: PPUSH
28060: CALL_OW 1
28064: ST_TO_ADDR
// end ; end ;
28065: GO 27816
28067: POP
28068: POP
// end ;
28069: GO 27734
28071: POP
28072: POP
// end ;
28073: PPOPN 4
28075: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28076: LD_INT 0
28078: PPUSH
28079: PPUSH
// result := false ;
28080: LD_ADDR_VAR 0 4
28084: PUSH
28085: LD_INT 0
28087: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28088: LD_VAR 0 1
28092: PPUSH
28093: CALL_OW 264
28097: PUSH
28098: LD_INT 81
28100: EQUAL
28101: NOT
28102: IFFALSE 28106
// exit ;
28104: GO 28346
// index := GetElementIndex ( minersList , unit ) ;
28106: LD_ADDR_VAR 0 5
28110: PUSH
28111: LD_EXP 94
28115: PPUSH
28116: LD_VAR 0 1
28120: PPUSH
28121: CALL 34479 0 2
28125: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28126: LD_EXP 95
28130: PUSH
28131: LD_VAR 0 5
28135: ARRAY
28136: PUSH
28137: LD_EXP 96
28141: GREATEREQUAL
28142: IFFALSE 28146
// exit ;
28144: GO 28346
// ComMoveXY ( unit , x , y ) ;
28146: LD_VAR 0 1
28150: PPUSH
28151: LD_VAR 0 2
28155: PPUSH
28156: LD_VAR 0 3
28160: PPUSH
28161: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28165: LD_INT 35
28167: PPUSH
28168: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28172: LD_VAR 0 1
28176: PPUSH
28177: LD_VAR 0 2
28181: PPUSH
28182: LD_VAR 0 3
28186: PPUSH
28187: CALL 65834 0 3
28191: NOT
28192: PUSH
28193: LD_VAR 0 1
28197: PPUSH
28198: CALL_OW 314
28202: AND
28203: IFFALSE 28207
// exit ;
28205: GO 28346
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28207: LD_VAR 0 2
28211: PPUSH
28212: LD_VAR 0 3
28216: PPUSH
28217: CALL_OW 428
28221: PUSH
28222: LD_VAR 0 1
28226: EQUAL
28227: PUSH
28228: LD_VAR 0 1
28232: PPUSH
28233: CALL_OW 314
28237: NOT
28238: AND
28239: IFFALSE 28165
// PlaySoundXY ( x , y , PlantMine ) ;
28241: LD_VAR 0 2
28245: PPUSH
28246: LD_VAR 0 3
28250: PPUSH
28251: LD_STRING PlantMine
28253: PPUSH
28254: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28258: LD_VAR 0 2
28262: PPUSH
28263: LD_VAR 0 3
28267: PPUSH
28268: LD_VAR 0 1
28272: PPUSH
28273: CALL_OW 255
28277: PPUSH
28278: LD_INT 0
28280: PPUSH
28281: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28285: LD_ADDR_EXP 95
28289: PUSH
28290: LD_EXP 95
28294: PPUSH
28295: LD_VAR 0 5
28299: PUSH
28300: LD_EXP 95
28304: PUSH
28305: LD_VAR 0 5
28309: ARRAY
28310: PUSH
28311: LD_INT 1
28313: PLUS
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: PPUSH
28319: LD_VAR 0 2
28323: PUSH
28324: LD_VAR 0 3
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PPUSH
28333: CALL 34694 0 3
28337: ST_TO_ADDR
// result := true ;
28338: LD_ADDR_VAR 0 4
28342: PUSH
28343: LD_INT 1
28345: ST_TO_ADDR
// end ;
28346: LD_VAR 0 4
28350: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28351: LD_INT 0
28353: PPUSH
28354: PPUSH
28355: PPUSH
// if not unit in minersList then
28356: LD_VAR 0 1
28360: PUSH
28361: LD_EXP 94
28365: IN
28366: NOT
28367: IFFALSE 28371
// exit ;
28369: GO 28763
// index := GetElementIndex ( minersList , unit ) ;
28371: LD_ADDR_VAR 0 6
28375: PUSH
28376: LD_EXP 94
28380: PPUSH
28381: LD_VAR 0 1
28385: PPUSH
28386: CALL 34479 0 2
28390: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28391: LD_ADDR_VAR 0 5
28395: PUSH
28396: DOUBLE
28397: LD_EXP 95
28401: PUSH
28402: LD_VAR 0 6
28406: ARRAY
28407: INC
28408: ST_TO_ADDR
28409: LD_INT 1
28411: PUSH
28412: FOR_DOWNTO
28413: IFFALSE 28574
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28415: LD_EXP 95
28419: PUSH
28420: LD_VAR 0 6
28424: ARRAY
28425: PUSH
28426: LD_VAR 0 5
28430: ARRAY
28431: PUSH
28432: LD_INT 1
28434: ARRAY
28435: PUSH
28436: LD_VAR 0 2
28440: EQUAL
28441: PUSH
28442: LD_EXP 95
28446: PUSH
28447: LD_VAR 0 6
28451: ARRAY
28452: PUSH
28453: LD_VAR 0 5
28457: ARRAY
28458: PUSH
28459: LD_INT 2
28461: ARRAY
28462: PUSH
28463: LD_VAR 0 3
28467: EQUAL
28468: AND
28469: IFFALSE 28572
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28471: LD_EXP 95
28475: PUSH
28476: LD_VAR 0 6
28480: ARRAY
28481: PUSH
28482: LD_VAR 0 5
28486: ARRAY
28487: PUSH
28488: LD_INT 1
28490: ARRAY
28491: PPUSH
28492: LD_EXP 95
28496: PUSH
28497: LD_VAR 0 6
28501: ARRAY
28502: PUSH
28503: LD_VAR 0 5
28507: ARRAY
28508: PUSH
28509: LD_INT 2
28511: ARRAY
28512: PPUSH
28513: LD_VAR 0 1
28517: PPUSH
28518: CALL_OW 255
28522: PPUSH
28523: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28527: LD_ADDR_EXP 95
28531: PUSH
28532: LD_EXP 95
28536: PPUSH
28537: LD_VAR 0 6
28541: PPUSH
28542: LD_EXP 95
28546: PUSH
28547: LD_VAR 0 6
28551: ARRAY
28552: PPUSH
28553: LD_VAR 0 5
28557: PPUSH
28558: CALL_OW 3
28562: PPUSH
28563: CALL_OW 1
28567: ST_TO_ADDR
// exit ;
28568: POP
28569: POP
28570: GO 28763
// end ; end ;
28572: GO 28412
28574: POP
28575: POP
// for i := minerMinesList [ index ] downto 1 do
28576: LD_ADDR_VAR 0 5
28580: PUSH
28581: DOUBLE
28582: LD_EXP 95
28586: PUSH
28587: LD_VAR 0 6
28591: ARRAY
28592: INC
28593: ST_TO_ADDR
28594: LD_INT 1
28596: PUSH
28597: FOR_DOWNTO
28598: IFFALSE 28761
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28600: LD_EXP 95
28604: PUSH
28605: LD_VAR 0 6
28609: ARRAY
28610: PUSH
28611: LD_VAR 0 5
28615: ARRAY
28616: PUSH
28617: LD_INT 1
28619: ARRAY
28620: PPUSH
28621: LD_EXP 95
28625: PUSH
28626: LD_VAR 0 6
28630: ARRAY
28631: PUSH
28632: LD_VAR 0 5
28636: ARRAY
28637: PUSH
28638: LD_INT 2
28640: ARRAY
28641: PPUSH
28642: LD_VAR 0 2
28646: PPUSH
28647: LD_VAR 0 3
28651: PPUSH
28652: CALL_OW 298
28656: PUSH
28657: LD_INT 6
28659: LESS
28660: IFFALSE 28759
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28662: LD_EXP 95
28666: PUSH
28667: LD_VAR 0 6
28671: ARRAY
28672: PUSH
28673: LD_VAR 0 5
28677: ARRAY
28678: PUSH
28679: LD_INT 1
28681: ARRAY
28682: PPUSH
28683: LD_EXP 95
28687: PUSH
28688: LD_VAR 0 6
28692: ARRAY
28693: PUSH
28694: LD_VAR 0 5
28698: ARRAY
28699: PUSH
28700: LD_INT 2
28702: ARRAY
28703: PPUSH
28704: LD_VAR 0 1
28708: PPUSH
28709: CALL_OW 255
28713: PPUSH
28714: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28718: LD_ADDR_EXP 95
28722: PUSH
28723: LD_EXP 95
28727: PPUSH
28728: LD_VAR 0 6
28732: PPUSH
28733: LD_EXP 95
28737: PUSH
28738: LD_VAR 0 6
28742: ARRAY
28743: PPUSH
28744: LD_VAR 0 5
28748: PPUSH
28749: CALL_OW 3
28753: PPUSH
28754: CALL_OW 1
28758: ST_TO_ADDR
// end ; end ;
28759: GO 28597
28761: POP
28762: POP
// end ;
28763: LD_VAR 0 4
28767: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28768: LD_INT 0
28770: PPUSH
28771: PPUSH
28772: PPUSH
28773: PPUSH
28774: PPUSH
28775: PPUSH
28776: PPUSH
28777: PPUSH
28778: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28779: LD_VAR 0 1
28783: PPUSH
28784: CALL_OW 264
28788: PUSH
28789: LD_INT 81
28791: EQUAL
28792: NOT
28793: PUSH
28794: LD_VAR 0 1
28798: PUSH
28799: LD_EXP 94
28803: IN
28804: NOT
28805: OR
28806: IFFALSE 28810
// exit ;
28808: GO 29132
// index := GetElementIndex ( minersList , unit ) ;
28810: LD_ADDR_VAR 0 6
28814: PUSH
28815: LD_EXP 94
28819: PPUSH
28820: LD_VAR 0 1
28824: PPUSH
28825: CALL 34479 0 2
28829: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28830: LD_ADDR_VAR 0 8
28834: PUSH
28835: LD_EXP 96
28839: PUSH
28840: LD_EXP 95
28844: PUSH
28845: LD_VAR 0 6
28849: ARRAY
28850: MINUS
28851: ST_TO_ADDR
// if not minesFreeAmount then
28852: LD_VAR 0 8
28856: NOT
28857: IFFALSE 28861
// exit ;
28859: GO 29132
// tmp := [ ] ;
28861: LD_ADDR_VAR 0 7
28865: PUSH
28866: EMPTY
28867: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28868: LD_ADDR_VAR 0 5
28872: PUSH
28873: DOUBLE
28874: LD_INT 1
28876: DEC
28877: ST_TO_ADDR
28878: LD_VAR 0 8
28882: PUSH
28883: FOR_TO
28884: IFFALSE 29079
// begin _d := rand ( 0 , 5 ) ;
28886: LD_ADDR_VAR 0 11
28890: PUSH
28891: LD_INT 0
28893: PPUSH
28894: LD_INT 5
28896: PPUSH
28897: CALL_OW 12
28901: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28902: LD_ADDR_VAR 0 12
28906: PUSH
28907: LD_INT 2
28909: PPUSH
28910: LD_INT 6
28912: PPUSH
28913: CALL_OW 12
28917: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28918: LD_ADDR_VAR 0 9
28922: PUSH
28923: LD_VAR 0 2
28927: PPUSH
28928: LD_VAR 0 11
28932: PPUSH
28933: LD_VAR 0 12
28937: PPUSH
28938: CALL_OW 272
28942: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28943: LD_ADDR_VAR 0 10
28947: PUSH
28948: LD_VAR 0 3
28952: PPUSH
28953: LD_VAR 0 11
28957: PPUSH
28958: LD_VAR 0 12
28962: PPUSH
28963: CALL_OW 273
28967: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28968: LD_VAR 0 9
28972: PPUSH
28973: LD_VAR 0 10
28977: PPUSH
28978: CALL_OW 488
28982: PUSH
28983: LD_VAR 0 9
28987: PUSH
28988: LD_VAR 0 10
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_VAR 0 7
29001: IN
29002: NOT
29003: AND
29004: PUSH
29005: LD_VAR 0 9
29009: PPUSH
29010: LD_VAR 0 10
29014: PPUSH
29015: CALL_OW 458
29019: NOT
29020: AND
29021: IFFALSE 29063
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29023: LD_ADDR_VAR 0 7
29027: PUSH
29028: LD_VAR 0 7
29032: PPUSH
29033: LD_VAR 0 7
29037: PUSH
29038: LD_INT 1
29040: PLUS
29041: PPUSH
29042: LD_VAR 0 9
29046: PUSH
29047: LD_VAR 0 10
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: PPUSH
29056: CALL_OW 1
29060: ST_TO_ADDR
29061: GO 29077
// i := i - 1 ;
29063: LD_ADDR_VAR 0 5
29067: PUSH
29068: LD_VAR 0 5
29072: PUSH
29073: LD_INT 1
29075: MINUS
29076: ST_TO_ADDR
// end ;
29077: GO 28883
29079: POP
29080: POP
// for i in tmp do
29081: LD_ADDR_VAR 0 5
29085: PUSH
29086: LD_VAR 0 7
29090: PUSH
29091: FOR_IN
29092: IFFALSE 29130
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29094: LD_VAR 0 1
29098: PPUSH
29099: LD_VAR 0 5
29103: PUSH
29104: LD_INT 1
29106: ARRAY
29107: PPUSH
29108: LD_VAR 0 5
29112: PUSH
29113: LD_INT 2
29115: ARRAY
29116: PPUSH
29117: CALL 28076 0 3
29121: NOT
29122: IFFALSE 29128
// exit ;
29124: POP
29125: POP
29126: GO 29132
29128: GO 29091
29130: POP
29131: POP
// end ;
29132: LD_VAR 0 4
29136: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29137: LD_INT 0
29139: PPUSH
29140: PPUSH
29141: PPUSH
29142: PPUSH
29143: PPUSH
29144: PPUSH
29145: PPUSH
// if not GetClass ( unit ) = class_sniper then
29146: LD_VAR 0 1
29150: PPUSH
29151: CALL_OW 257
29155: PUSH
29156: LD_INT 5
29158: EQUAL
29159: NOT
29160: IFFALSE 29164
// exit ;
29162: GO 29552
// dist := 8 ;
29164: LD_ADDR_VAR 0 5
29168: PUSH
29169: LD_INT 8
29171: ST_TO_ADDR
// viewRange := 12 ;
29172: LD_ADDR_VAR 0 7
29176: PUSH
29177: LD_INT 12
29179: ST_TO_ADDR
// side := GetSide ( unit ) ;
29180: LD_ADDR_VAR 0 6
29184: PUSH
29185: LD_VAR 0 1
29189: PPUSH
29190: CALL_OW 255
29194: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29195: LD_INT 61
29197: PPUSH
29198: LD_VAR 0 6
29202: PPUSH
29203: CALL_OW 321
29207: PUSH
29208: LD_INT 2
29210: EQUAL
29211: IFFALSE 29221
// viewRange := 16 ;
29213: LD_ADDR_VAR 0 7
29217: PUSH
29218: LD_INT 16
29220: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29221: LD_VAR 0 1
29225: PPUSH
29226: LD_VAR 0 2
29230: PPUSH
29231: LD_VAR 0 3
29235: PPUSH
29236: CALL_OW 297
29240: PUSH
29241: LD_VAR 0 5
29245: GREATER
29246: IFFALSE 29325
// begin ComMoveXY ( unit , x , y ) ;
29248: LD_VAR 0 1
29252: PPUSH
29253: LD_VAR 0 2
29257: PPUSH
29258: LD_VAR 0 3
29262: PPUSH
29263: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29267: LD_INT 35
29269: PPUSH
29270: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29274: LD_VAR 0 1
29278: PPUSH
29279: LD_VAR 0 2
29283: PPUSH
29284: LD_VAR 0 3
29288: PPUSH
29289: CALL 65834 0 3
29293: NOT
29294: IFFALSE 29298
// exit ;
29296: GO 29552
// until GetDistUnitXY ( unit , x , y ) < dist ;
29298: LD_VAR 0 1
29302: PPUSH
29303: LD_VAR 0 2
29307: PPUSH
29308: LD_VAR 0 3
29312: PPUSH
29313: CALL_OW 297
29317: PUSH
29318: LD_VAR 0 5
29322: LESS
29323: IFFALSE 29267
// end ; ComTurnXY ( unit , x , y ) ;
29325: LD_VAR 0 1
29329: PPUSH
29330: LD_VAR 0 2
29334: PPUSH
29335: LD_VAR 0 3
29339: PPUSH
29340: CALL_OW 118
// wait ( 5 ) ;
29344: LD_INT 5
29346: PPUSH
29347: CALL_OW 67
// _d := GetDir ( unit ) ;
29351: LD_ADDR_VAR 0 10
29355: PUSH
29356: LD_VAR 0 1
29360: PPUSH
29361: CALL_OW 254
29365: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29366: LD_ADDR_VAR 0 8
29370: PUSH
29371: LD_VAR 0 1
29375: PPUSH
29376: CALL_OW 250
29380: PPUSH
29381: LD_VAR 0 10
29385: PPUSH
29386: LD_VAR 0 5
29390: PPUSH
29391: CALL_OW 272
29395: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29396: LD_ADDR_VAR 0 9
29400: PUSH
29401: LD_VAR 0 1
29405: PPUSH
29406: CALL_OW 251
29410: PPUSH
29411: LD_VAR 0 10
29415: PPUSH
29416: LD_VAR 0 5
29420: PPUSH
29421: CALL_OW 273
29425: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29426: LD_VAR 0 8
29430: PPUSH
29431: LD_VAR 0 9
29435: PPUSH
29436: CALL_OW 488
29440: NOT
29441: IFFALSE 29445
// exit ;
29443: GO 29552
// ComAnimCustom ( unit , 1 ) ;
29445: LD_VAR 0 1
29449: PPUSH
29450: LD_INT 1
29452: PPUSH
29453: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29457: LD_VAR 0 8
29461: PPUSH
29462: LD_VAR 0 9
29466: PPUSH
29467: LD_VAR 0 6
29471: PPUSH
29472: LD_VAR 0 7
29476: PPUSH
29477: CALL_OW 330
// repeat wait ( 1 ) ;
29481: LD_INT 1
29483: PPUSH
29484: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29488: LD_VAR 0 1
29492: PPUSH
29493: CALL_OW 316
29497: PUSH
29498: LD_VAR 0 1
29502: PPUSH
29503: CALL_OW 314
29507: OR
29508: PUSH
29509: LD_VAR 0 1
29513: PPUSH
29514: CALL_OW 302
29518: NOT
29519: OR
29520: PUSH
29521: LD_VAR 0 1
29525: PPUSH
29526: CALL_OW 301
29530: OR
29531: IFFALSE 29481
// RemoveSeeing ( _x , _y , side ) ;
29533: LD_VAR 0 8
29537: PPUSH
29538: LD_VAR 0 9
29542: PPUSH
29543: LD_VAR 0 6
29547: PPUSH
29548: CALL_OW 331
// end ; end_of_file
29552: LD_VAR 0 4
29556: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29557: LD_INT 0
29559: PPUSH
29560: PPUSH
// if exist_mode then
29561: LD_VAR 0 2
29565: IFFALSE 29590
// unit := CreateCharacter ( prefix & ident ) else
29567: LD_ADDR_VAR 0 5
29571: PUSH
29572: LD_VAR 0 3
29576: PUSH
29577: LD_VAR 0 1
29581: STR
29582: PPUSH
29583: CALL_OW 34
29587: ST_TO_ADDR
29588: GO 29605
// unit := NewCharacter ( ident ) ;
29590: LD_ADDR_VAR 0 5
29594: PUSH
29595: LD_VAR 0 1
29599: PPUSH
29600: CALL_OW 25
29604: ST_TO_ADDR
// result := unit ;
29605: LD_ADDR_VAR 0 4
29609: PUSH
29610: LD_VAR 0 5
29614: ST_TO_ADDR
// end ;
29615: LD_VAR 0 4
29619: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29620: LD_INT 0
29622: PPUSH
29623: PPUSH
// if not side or not nation then
29624: LD_VAR 0 1
29628: NOT
29629: PUSH
29630: LD_VAR 0 2
29634: NOT
29635: OR
29636: IFFALSE 29640
// exit ;
29638: GO 30408
// case nation of nation_american :
29640: LD_VAR 0 2
29644: PUSH
29645: LD_INT 1
29647: DOUBLE
29648: EQUAL
29649: IFTRUE 29653
29651: GO 29867
29653: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29654: LD_ADDR_VAR 0 4
29658: PUSH
29659: LD_INT 35
29661: PUSH
29662: LD_INT 45
29664: PUSH
29665: LD_INT 46
29667: PUSH
29668: LD_INT 47
29670: PUSH
29671: LD_INT 82
29673: PUSH
29674: LD_INT 83
29676: PUSH
29677: LD_INT 84
29679: PUSH
29680: LD_INT 85
29682: PUSH
29683: LD_INT 86
29685: PUSH
29686: LD_INT 1
29688: PUSH
29689: LD_INT 2
29691: PUSH
29692: LD_INT 6
29694: PUSH
29695: LD_INT 15
29697: PUSH
29698: LD_INT 16
29700: PUSH
29701: LD_INT 7
29703: PUSH
29704: LD_INT 12
29706: PUSH
29707: LD_INT 13
29709: PUSH
29710: LD_INT 10
29712: PUSH
29713: LD_INT 14
29715: PUSH
29716: LD_INT 20
29718: PUSH
29719: LD_INT 21
29721: PUSH
29722: LD_INT 22
29724: PUSH
29725: LD_INT 25
29727: PUSH
29728: LD_INT 32
29730: PUSH
29731: LD_INT 27
29733: PUSH
29734: LD_INT 36
29736: PUSH
29737: LD_INT 69
29739: PUSH
29740: LD_INT 39
29742: PUSH
29743: LD_INT 34
29745: PUSH
29746: LD_INT 40
29748: PUSH
29749: LD_INT 48
29751: PUSH
29752: LD_INT 49
29754: PUSH
29755: LD_INT 50
29757: PUSH
29758: LD_INT 51
29760: PUSH
29761: LD_INT 52
29763: PUSH
29764: LD_INT 53
29766: PUSH
29767: LD_INT 54
29769: PUSH
29770: LD_INT 55
29772: PUSH
29773: LD_INT 56
29775: PUSH
29776: LD_INT 57
29778: PUSH
29779: LD_INT 58
29781: PUSH
29782: LD_INT 59
29784: PUSH
29785: LD_INT 60
29787: PUSH
29788: LD_INT 61
29790: PUSH
29791: LD_INT 62
29793: PUSH
29794: LD_INT 80
29796: PUSH
29797: LD_INT 82
29799: PUSH
29800: LD_INT 83
29802: PUSH
29803: LD_INT 84
29805: PUSH
29806: LD_INT 85
29808: PUSH
29809: LD_INT 86
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: ST_TO_ADDR
29865: GO 30332
29867: LD_INT 2
29869: DOUBLE
29870: EQUAL
29871: IFTRUE 29875
29873: GO 30101
29875: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29876: LD_ADDR_VAR 0 4
29880: PUSH
29881: LD_INT 35
29883: PUSH
29884: LD_INT 45
29886: PUSH
29887: LD_INT 46
29889: PUSH
29890: LD_INT 47
29892: PUSH
29893: LD_INT 82
29895: PUSH
29896: LD_INT 83
29898: PUSH
29899: LD_INT 84
29901: PUSH
29902: LD_INT 85
29904: PUSH
29905: LD_INT 87
29907: PUSH
29908: LD_INT 70
29910: PUSH
29911: LD_INT 1
29913: PUSH
29914: LD_INT 11
29916: PUSH
29917: LD_INT 3
29919: PUSH
29920: LD_INT 4
29922: PUSH
29923: LD_INT 5
29925: PUSH
29926: LD_INT 6
29928: PUSH
29929: LD_INT 15
29931: PUSH
29932: LD_INT 18
29934: PUSH
29935: LD_INT 7
29937: PUSH
29938: LD_INT 17
29940: PUSH
29941: LD_INT 8
29943: PUSH
29944: LD_INT 20
29946: PUSH
29947: LD_INT 21
29949: PUSH
29950: LD_INT 22
29952: PUSH
29953: LD_INT 72
29955: PUSH
29956: LD_INT 26
29958: PUSH
29959: LD_INT 69
29961: PUSH
29962: LD_INT 39
29964: PUSH
29965: LD_INT 40
29967: PUSH
29968: LD_INT 41
29970: PUSH
29971: LD_INT 42
29973: PUSH
29974: LD_INT 43
29976: PUSH
29977: LD_INT 48
29979: PUSH
29980: LD_INT 49
29982: PUSH
29983: LD_INT 50
29985: PUSH
29986: LD_INT 51
29988: PUSH
29989: LD_INT 52
29991: PUSH
29992: LD_INT 53
29994: PUSH
29995: LD_INT 54
29997: PUSH
29998: LD_INT 55
30000: PUSH
30001: LD_INT 56
30003: PUSH
30004: LD_INT 60
30006: PUSH
30007: LD_INT 61
30009: PUSH
30010: LD_INT 62
30012: PUSH
30013: LD_INT 66
30015: PUSH
30016: LD_INT 67
30018: PUSH
30019: LD_INT 68
30021: PUSH
30022: LD_INT 81
30024: PUSH
30025: LD_INT 82
30027: PUSH
30028: LD_INT 83
30030: PUSH
30031: LD_INT 84
30033: PUSH
30034: LD_INT 85
30036: PUSH
30037: LD_INT 87
30039: PUSH
30040: LD_INT 88
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: ST_TO_ADDR
30099: GO 30332
30101: LD_INT 3
30103: DOUBLE
30104: EQUAL
30105: IFTRUE 30109
30107: GO 30331
30109: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30110: LD_ADDR_VAR 0 4
30114: PUSH
30115: LD_INT 46
30117: PUSH
30118: LD_INT 47
30120: PUSH
30121: LD_INT 1
30123: PUSH
30124: LD_INT 2
30126: PUSH
30127: LD_INT 82
30129: PUSH
30130: LD_INT 83
30132: PUSH
30133: LD_INT 84
30135: PUSH
30136: LD_INT 85
30138: PUSH
30139: LD_INT 86
30141: PUSH
30142: LD_INT 11
30144: PUSH
30145: LD_INT 9
30147: PUSH
30148: LD_INT 20
30150: PUSH
30151: LD_INT 19
30153: PUSH
30154: LD_INT 21
30156: PUSH
30157: LD_INT 24
30159: PUSH
30160: LD_INT 22
30162: PUSH
30163: LD_INT 25
30165: PUSH
30166: LD_INT 28
30168: PUSH
30169: LD_INT 29
30171: PUSH
30172: LD_INT 30
30174: PUSH
30175: LD_INT 31
30177: PUSH
30178: LD_INT 37
30180: PUSH
30181: LD_INT 38
30183: PUSH
30184: LD_INT 32
30186: PUSH
30187: LD_INT 27
30189: PUSH
30190: LD_INT 33
30192: PUSH
30193: LD_INT 69
30195: PUSH
30196: LD_INT 39
30198: PUSH
30199: LD_INT 34
30201: PUSH
30202: LD_INT 40
30204: PUSH
30205: LD_INT 71
30207: PUSH
30208: LD_INT 23
30210: PUSH
30211: LD_INT 44
30213: PUSH
30214: LD_INT 48
30216: PUSH
30217: LD_INT 49
30219: PUSH
30220: LD_INT 50
30222: PUSH
30223: LD_INT 51
30225: PUSH
30226: LD_INT 52
30228: PUSH
30229: LD_INT 53
30231: PUSH
30232: LD_INT 54
30234: PUSH
30235: LD_INT 55
30237: PUSH
30238: LD_INT 56
30240: PUSH
30241: LD_INT 57
30243: PUSH
30244: LD_INT 58
30246: PUSH
30247: LD_INT 59
30249: PUSH
30250: LD_INT 63
30252: PUSH
30253: LD_INT 64
30255: PUSH
30256: LD_INT 65
30258: PUSH
30259: LD_INT 82
30261: PUSH
30262: LD_INT 83
30264: PUSH
30265: LD_INT 84
30267: PUSH
30268: LD_INT 85
30270: PUSH
30271: LD_INT 86
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: LIST
30278: LIST
30279: LIST
30280: LIST
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: ST_TO_ADDR
30329: GO 30332
30331: POP
// if state > - 1 and state < 3 then
30332: LD_VAR 0 3
30336: PUSH
30337: LD_INT 1
30339: NEG
30340: GREATER
30341: PUSH
30342: LD_VAR 0 3
30346: PUSH
30347: LD_INT 3
30349: LESS
30350: AND
30351: IFFALSE 30408
// for i in result do
30353: LD_ADDR_VAR 0 5
30357: PUSH
30358: LD_VAR 0 4
30362: PUSH
30363: FOR_IN
30364: IFFALSE 30406
// if GetTech ( i , side ) <> state then
30366: LD_VAR 0 5
30370: PPUSH
30371: LD_VAR 0 1
30375: PPUSH
30376: CALL_OW 321
30380: PUSH
30381: LD_VAR 0 3
30385: NONEQUAL
30386: IFFALSE 30404
// result := result diff i ;
30388: LD_ADDR_VAR 0 4
30392: PUSH
30393: LD_VAR 0 4
30397: PUSH
30398: LD_VAR 0 5
30402: DIFF
30403: ST_TO_ADDR
30404: GO 30363
30406: POP
30407: POP
// end ;
30408: LD_VAR 0 4
30412: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30413: LD_INT 0
30415: PPUSH
30416: PPUSH
30417: PPUSH
// result := true ;
30418: LD_ADDR_VAR 0 3
30422: PUSH
30423: LD_INT 1
30425: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30426: LD_ADDR_VAR 0 5
30430: PUSH
30431: LD_VAR 0 2
30435: PPUSH
30436: CALL_OW 480
30440: ST_TO_ADDR
// if not tmp then
30441: LD_VAR 0 5
30445: NOT
30446: IFFALSE 30450
// exit ;
30448: GO 30499
// for i in tmp do
30450: LD_ADDR_VAR 0 4
30454: PUSH
30455: LD_VAR 0 5
30459: PUSH
30460: FOR_IN
30461: IFFALSE 30497
// if GetTech ( i , side ) <> state_researched then
30463: LD_VAR 0 4
30467: PPUSH
30468: LD_VAR 0 1
30472: PPUSH
30473: CALL_OW 321
30477: PUSH
30478: LD_INT 2
30480: NONEQUAL
30481: IFFALSE 30495
// begin result := false ;
30483: LD_ADDR_VAR 0 3
30487: PUSH
30488: LD_INT 0
30490: ST_TO_ADDR
// exit ;
30491: POP
30492: POP
30493: GO 30499
// end ;
30495: GO 30460
30497: POP
30498: POP
// end ;
30499: LD_VAR 0 3
30503: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30504: LD_INT 0
30506: PPUSH
30507: PPUSH
30508: PPUSH
30509: PPUSH
30510: PPUSH
30511: PPUSH
30512: PPUSH
30513: PPUSH
30514: PPUSH
30515: PPUSH
30516: PPUSH
30517: PPUSH
30518: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30519: LD_VAR 0 1
30523: NOT
30524: PUSH
30525: LD_VAR 0 1
30529: PPUSH
30530: CALL_OW 257
30534: PUSH
30535: LD_INT 9
30537: NONEQUAL
30538: OR
30539: IFFALSE 30543
// exit ;
30541: GO 31116
// side := GetSide ( unit ) ;
30543: LD_ADDR_VAR 0 9
30547: PUSH
30548: LD_VAR 0 1
30552: PPUSH
30553: CALL_OW 255
30557: ST_TO_ADDR
// tech_space := tech_spacanom ;
30558: LD_ADDR_VAR 0 12
30562: PUSH
30563: LD_INT 29
30565: ST_TO_ADDR
// tech_time := tech_taurad ;
30566: LD_ADDR_VAR 0 13
30570: PUSH
30571: LD_INT 28
30573: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30574: LD_ADDR_VAR 0 11
30578: PUSH
30579: LD_VAR 0 1
30583: PPUSH
30584: CALL_OW 310
30588: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30589: LD_VAR 0 11
30593: PPUSH
30594: CALL_OW 247
30598: PUSH
30599: LD_INT 2
30601: EQUAL
30602: IFFALSE 30606
// exit ;
30604: GO 31116
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30606: LD_ADDR_VAR 0 8
30610: PUSH
30611: LD_INT 81
30613: PUSH
30614: LD_VAR 0 9
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: LD_INT 3
30625: PUSH
30626: LD_INT 21
30628: PUSH
30629: LD_INT 3
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PPUSH
30644: CALL_OW 69
30648: ST_TO_ADDR
// if not tmp then
30649: LD_VAR 0 8
30653: NOT
30654: IFFALSE 30658
// exit ;
30656: GO 31116
// if in_unit then
30658: LD_VAR 0 11
30662: IFFALSE 30686
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30664: LD_ADDR_VAR 0 10
30668: PUSH
30669: LD_VAR 0 8
30673: PPUSH
30674: LD_VAR 0 11
30678: PPUSH
30679: CALL_OW 74
30683: ST_TO_ADDR
30684: GO 30706
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30686: LD_ADDR_VAR 0 10
30690: PUSH
30691: LD_VAR 0 8
30695: PPUSH
30696: LD_VAR 0 1
30700: PPUSH
30701: CALL_OW 74
30705: ST_TO_ADDR
// if not enemy then
30706: LD_VAR 0 10
30710: NOT
30711: IFFALSE 30715
// exit ;
30713: GO 31116
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30715: LD_VAR 0 11
30719: PUSH
30720: LD_VAR 0 11
30724: PPUSH
30725: LD_VAR 0 10
30729: PPUSH
30730: CALL_OW 296
30734: PUSH
30735: LD_INT 13
30737: GREATER
30738: AND
30739: PUSH
30740: LD_VAR 0 1
30744: PPUSH
30745: LD_VAR 0 10
30749: PPUSH
30750: CALL_OW 296
30754: PUSH
30755: LD_INT 12
30757: GREATER
30758: OR
30759: IFFALSE 30763
// exit ;
30761: GO 31116
// missile := [ 1 ] ;
30763: LD_ADDR_VAR 0 14
30767: PUSH
30768: LD_INT 1
30770: PUSH
30771: EMPTY
30772: LIST
30773: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30774: LD_VAR 0 9
30778: PPUSH
30779: LD_VAR 0 12
30783: PPUSH
30784: CALL_OW 325
30788: IFFALSE 30817
// missile := Replace ( missile , missile + 1 , 2 ) ;
30790: LD_ADDR_VAR 0 14
30794: PUSH
30795: LD_VAR 0 14
30799: PPUSH
30800: LD_VAR 0 14
30804: PUSH
30805: LD_INT 1
30807: PLUS
30808: PPUSH
30809: LD_INT 2
30811: PPUSH
30812: CALL_OW 1
30816: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30817: LD_VAR 0 9
30821: PPUSH
30822: LD_VAR 0 13
30826: PPUSH
30827: CALL_OW 325
30831: PUSH
30832: LD_VAR 0 10
30836: PPUSH
30837: CALL_OW 255
30841: PPUSH
30842: LD_VAR 0 13
30846: PPUSH
30847: CALL_OW 325
30851: NOT
30852: AND
30853: IFFALSE 30882
// missile := Replace ( missile , missile + 1 , 3 ) ;
30855: LD_ADDR_VAR 0 14
30859: PUSH
30860: LD_VAR 0 14
30864: PPUSH
30865: LD_VAR 0 14
30869: PUSH
30870: LD_INT 1
30872: PLUS
30873: PPUSH
30874: LD_INT 3
30876: PPUSH
30877: CALL_OW 1
30881: ST_TO_ADDR
// if missile < 2 then
30882: LD_VAR 0 14
30886: PUSH
30887: LD_INT 2
30889: LESS
30890: IFFALSE 30894
// exit ;
30892: GO 31116
// x := GetX ( enemy ) ;
30894: LD_ADDR_VAR 0 4
30898: PUSH
30899: LD_VAR 0 10
30903: PPUSH
30904: CALL_OW 250
30908: ST_TO_ADDR
// y := GetY ( enemy ) ;
30909: LD_ADDR_VAR 0 5
30913: PUSH
30914: LD_VAR 0 10
30918: PPUSH
30919: CALL_OW 251
30923: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30924: LD_ADDR_VAR 0 6
30928: PUSH
30929: LD_VAR 0 4
30933: PUSH
30934: LD_INT 1
30936: NEG
30937: PPUSH
30938: LD_INT 1
30940: PPUSH
30941: CALL_OW 12
30945: PLUS
30946: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30947: LD_ADDR_VAR 0 7
30951: PUSH
30952: LD_VAR 0 5
30956: PUSH
30957: LD_INT 1
30959: NEG
30960: PPUSH
30961: LD_INT 1
30963: PPUSH
30964: CALL_OW 12
30968: PLUS
30969: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30970: LD_VAR 0 6
30974: PPUSH
30975: LD_VAR 0 7
30979: PPUSH
30980: CALL_OW 488
30984: NOT
30985: IFFALSE 31007
// begin _x := x ;
30987: LD_ADDR_VAR 0 6
30991: PUSH
30992: LD_VAR 0 4
30996: ST_TO_ADDR
// _y := y ;
30997: LD_ADDR_VAR 0 7
31001: PUSH
31002: LD_VAR 0 5
31006: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31007: LD_ADDR_VAR 0 3
31011: PUSH
31012: LD_INT 1
31014: PPUSH
31015: LD_VAR 0 14
31019: PPUSH
31020: CALL_OW 12
31024: ST_TO_ADDR
// case i of 1 :
31025: LD_VAR 0 3
31029: PUSH
31030: LD_INT 1
31032: DOUBLE
31033: EQUAL
31034: IFTRUE 31038
31036: GO 31055
31038: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31039: LD_VAR 0 1
31043: PPUSH
31044: LD_VAR 0 10
31048: PPUSH
31049: CALL_OW 115
31053: GO 31116
31055: LD_INT 2
31057: DOUBLE
31058: EQUAL
31059: IFTRUE 31063
31061: GO 31085
31063: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31064: LD_VAR 0 1
31068: PPUSH
31069: LD_VAR 0 6
31073: PPUSH
31074: LD_VAR 0 7
31078: PPUSH
31079: CALL_OW 153
31083: GO 31116
31085: LD_INT 3
31087: DOUBLE
31088: EQUAL
31089: IFTRUE 31093
31091: GO 31115
31093: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31094: LD_VAR 0 1
31098: PPUSH
31099: LD_VAR 0 6
31103: PPUSH
31104: LD_VAR 0 7
31108: PPUSH
31109: CALL_OW 154
31113: GO 31116
31115: POP
// end ;
31116: LD_VAR 0 2
31120: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31121: LD_INT 0
31123: PPUSH
31124: PPUSH
31125: PPUSH
31126: PPUSH
31127: PPUSH
31128: PPUSH
// if not unit or not building then
31129: LD_VAR 0 1
31133: NOT
31134: PUSH
31135: LD_VAR 0 2
31139: NOT
31140: OR
31141: IFFALSE 31145
// exit ;
31143: GO 31303
// x := GetX ( building ) ;
31145: LD_ADDR_VAR 0 5
31149: PUSH
31150: LD_VAR 0 2
31154: PPUSH
31155: CALL_OW 250
31159: ST_TO_ADDR
// y := GetY ( building ) ;
31160: LD_ADDR_VAR 0 6
31164: PUSH
31165: LD_VAR 0 2
31169: PPUSH
31170: CALL_OW 251
31174: ST_TO_ADDR
// for i = 0 to 5 do
31175: LD_ADDR_VAR 0 4
31179: PUSH
31180: DOUBLE
31181: LD_INT 0
31183: DEC
31184: ST_TO_ADDR
31185: LD_INT 5
31187: PUSH
31188: FOR_TO
31189: IFFALSE 31301
// begin _x := ShiftX ( x , i , 3 ) ;
31191: LD_ADDR_VAR 0 7
31195: PUSH
31196: LD_VAR 0 5
31200: PPUSH
31201: LD_VAR 0 4
31205: PPUSH
31206: LD_INT 3
31208: PPUSH
31209: CALL_OW 272
31213: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31214: LD_ADDR_VAR 0 8
31218: PUSH
31219: LD_VAR 0 6
31223: PPUSH
31224: LD_VAR 0 4
31228: PPUSH
31229: LD_INT 3
31231: PPUSH
31232: CALL_OW 273
31236: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31237: LD_VAR 0 7
31241: PPUSH
31242: LD_VAR 0 8
31246: PPUSH
31247: CALL_OW 488
31251: NOT
31252: IFFALSE 31256
// continue ;
31254: GO 31188
// if HexInfo ( _x , _y ) = 0 then
31256: LD_VAR 0 7
31260: PPUSH
31261: LD_VAR 0 8
31265: PPUSH
31266: CALL_OW 428
31270: PUSH
31271: LD_INT 0
31273: EQUAL
31274: IFFALSE 31299
// begin ComMoveXY ( unit , _x , _y ) ;
31276: LD_VAR 0 1
31280: PPUSH
31281: LD_VAR 0 7
31285: PPUSH
31286: LD_VAR 0 8
31290: PPUSH
31291: CALL_OW 111
// exit ;
31295: POP
31296: POP
31297: GO 31303
// end ; end ;
31299: GO 31188
31301: POP
31302: POP
// end ;
31303: LD_VAR 0 3
31307: RET
// export function ScanBase ( side , base_area ) ; begin
31308: LD_INT 0
31310: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31311: LD_ADDR_VAR 0 3
31315: PUSH
31316: LD_VAR 0 2
31320: PPUSH
31321: LD_INT 81
31323: PUSH
31324: LD_VAR 0 1
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PPUSH
31333: CALL_OW 70
31337: ST_TO_ADDR
// end ;
31338: LD_VAR 0 3
31342: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31343: LD_INT 0
31345: PPUSH
31346: PPUSH
31347: PPUSH
31348: PPUSH
// result := false ;
31349: LD_ADDR_VAR 0 2
31353: PUSH
31354: LD_INT 0
31356: ST_TO_ADDR
// side := GetSide ( unit ) ;
31357: LD_ADDR_VAR 0 3
31361: PUSH
31362: LD_VAR 0 1
31366: PPUSH
31367: CALL_OW 255
31371: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31372: LD_ADDR_VAR 0 4
31376: PUSH
31377: LD_VAR 0 1
31381: PPUSH
31382: CALL_OW 248
31386: ST_TO_ADDR
// case nat of 1 :
31387: LD_VAR 0 4
31391: PUSH
31392: LD_INT 1
31394: DOUBLE
31395: EQUAL
31396: IFTRUE 31400
31398: GO 31411
31400: POP
// tech := tech_lassight ; 2 :
31401: LD_ADDR_VAR 0 5
31405: PUSH
31406: LD_INT 12
31408: ST_TO_ADDR
31409: GO 31450
31411: LD_INT 2
31413: DOUBLE
31414: EQUAL
31415: IFTRUE 31419
31417: GO 31430
31419: POP
// tech := tech_mortar ; 3 :
31420: LD_ADDR_VAR 0 5
31424: PUSH
31425: LD_INT 41
31427: ST_TO_ADDR
31428: GO 31450
31430: LD_INT 3
31432: DOUBLE
31433: EQUAL
31434: IFTRUE 31438
31436: GO 31449
31438: POP
// tech := tech_bazooka ; end ;
31439: LD_ADDR_VAR 0 5
31443: PUSH
31444: LD_INT 44
31446: ST_TO_ADDR
31447: GO 31450
31449: POP
// if Researched ( side , tech ) then
31450: LD_VAR 0 3
31454: PPUSH
31455: LD_VAR 0 5
31459: PPUSH
31460: CALL_OW 325
31464: IFFALSE 31491
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31466: LD_ADDR_VAR 0 2
31470: PUSH
31471: LD_INT 5
31473: PUSH
31474: LD_INT 8
31476: PUSH
31477: LD_INT 9
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: LIST
31484: PUSH
31485: LD_VAR 0 4
31489: ARRAY
31490: ST_TO_ADDR
// end ;
31491: LD_VAR 0 2
31495: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31496: LD_INT 0
31498: PPUSH
31499: PPUSH
31500: PPUSH
// if not mines then
31501: LD_VAR 0 2
31505: NOT
31506: IFFALSE 31510
// exit ;
31508: GO 31654
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31510: LD_ADDR_VAR 0 5
31514: PUSH
31515: LD_INT 81
31517: PUSH
31518: LD_VAR 0 1
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 3
31529: PUSH
31530: LD_INT 21
31532: PUSH
31533: LD_INT 3
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PPUSH
31548: CALL_OW 69
31552: ST_TO_ADDR
// for i in mines do
31553: LD_ADDR_VAR 0 4
31557: PUSH
31558: LD_VAR 0 2
31562: PUSH
31563: FOR_IN
31564: IFFALSE 31652
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31566: LD_VAR 0 4
31570: PUSH
31571: LD_INT 1
31573: ARRAY
31574: PPUSH
31575: LD_VAR 0 4
31579: PUSH
31580: LD_INT 2
31582: ARRAY
31583: PPUSH
31584: CALL_OW 458
31588: NOT
31589: IFFALSE 31593
// continue ;
31591: GO 31563
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31593: LD_VAR 0 4
31597: PUSH
31598: LD_INT 1
31600: ARRAY
31601: PPUSH
31602: LD_VAR 0 4
31606: PUSH
31607: LD_INT 2
31609: ARRAY
31610: PPUSH
31611: CALL_OW 428
31615: PUSH
31616: LD_VAR 0 5
31620: IN
31621: IFFALSE 31650
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31623: LD_VAR 0 4
31627: PUSH
31628: LD_INT 1
31630: ARRAY
31631: PPUSH
31632: LD_VAR 0 4
31636: PUSH
31637: LD_INT 2
31639: ARRAY
31640: PPUSH
31641: LD_VAR 0 1
31645: PPUSH
31646: CALL_OW 456
// end ;
31650: GO 31563
31652: POP
31653: POP
// end ;
31654: LD_VAR 0 3
31658: RET
// export function Count ( array ) ; var i ; begin
31659: LD_INT 0
31661: PPUSH
31662: PPUSH
// result := 0 ;
31663: LD_ADDR_VAR 0 2
31667: PUSH
31668: LD_INT 0
31670: ST_TO_ADDR
// for i in array do
31671: LD_ADDR_VAR 0 3
31675: PUSH
31676: LD_VAR 0 1
31680: PUSH
31681: FOR_IN
31682: IFFALSE 31706
// if i then
31684: LD_VAR 0 3
31688: IFFALSE 31704
// result := result + 1 ;
31690: LD_ADDR_VAR 0 2
31694: PUSH
31695: LD_VAR 0 2
31699: PUSH
31700: LD_INT 1
31702: PLUS
31703: ST_TO_ADDR
31704: GO 31681
31706: POP
31707: POP
// end ;
31708: LD_VAR 0 2
31712: RET
// export function IsEmpty ( building ) ; begin
31713: LD_INT 0
31715: PPUSH
// if not building then
31716: LD_VAR 0 1
31720: NOT
31721: IFFALSE 31725
// exit ;
31723: GO 31768
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31725: LD_ADDR_VAR 0 2
31729: PUSH
31730: LD_VAR 0 1
31734: PUSH
31735: LD_INT 22
31737: PUSH
31738: LD_VAR 0 1
31742: PPUSH
31743: CALL_OW 255
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 58
31754: PUSH
31755: EMPTY
31756: LIST
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PPUSH
31762: CALL_OW 69
31766: IN
31767: ST_TO_ADDR
// end ;
31768: LD_VAR 0 2
31772: RET
// export function IsNotFull ( building ) ; var places ; begin
31773: LD_INT 0
31775: PPUSH
31776: PPUSH
// if not building then
31777: LD_VAR 0 1
31781: NOT
31782: IFFALSE 31786
// exit ;
31784: GO 31957
// result := false ;
31786: LD_ADDR_VAR 0 2
31790: PUSH
31791: LD_INT 0
31793: ST_TO_ADDR
// places := 0 ;
31794: LD_ADDR_VAR 0 3
31798: PUSH
31799: LD_INT 0
31801: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
31802: LD_VAR 0 1
31806: PPUSH
31807: CALL_OW 266
31811: PUSH
31812: LD_INT 0
31814: DOUBLE
31815: EQUAL
31816: IFTRUE 31874
31818: LD_INT 1
31820: DOUBLE
31821: EQUAL
31822: IFTRUE 31874
31824: LD_INT 6
31826: DOUBLE
31827: EQUAL
31828: IFTRUE 31874
31830: LD_INT 7
31832: DOUBLE
31833: EQUAL
31834: IFTRUE 31874
31836: LD_INT 8
31838: DOUBLE
31839: EQUAL
31840: IFTRUE 31874
31842: LD_INT 4
31844: DOUBLE
31845: EQUAL
31846: IFTRUE 31874
31848: LD_INT 5
31850: DOUBLE
31851: EQUAL
31852: IFTRUE 31874
31854: LD_INT 2
31856: DOUBLE
31857: EQUAL
31858: IFTRUE 31874
31860: LD_INT 3
31862: DOUBLE
31863: EQUAL
31864: IFTRUE 31874
31866: LD_INT 35
31868: DOUBLE
31869: EQUAL
31870: IFTRUE 31874
31872: GO 31885
31874: POP
// places := 6 ; b_bunker , b_breastwork :
31875: LD_ADDR_VAR 0 3
31879: PUSH
31880: LD_INT 6
31882: ST_TO_ADDR
31883: GO 31930
31885: LD_INT 32
31887: DOUBLE
31888: EQUAL
31889: IFTRUE 31899
31891: LD_INT 31
31893: DOUBLE
31894: EQUAL
31895: IFTRUE 31899
31897: GO 31910
31899: POP
// places := 1 ; b_control_tower :
31900: LD_ADDR_VAR 0 3
31904: PUSH
31905: LD_INT 1
31907: ST_TO_ADDR
31908: GO 31930
31910: LD_INT 36
31912: DOUBLE
31913: EQUAL
31914: IFTRUE 31918
31916: GO 31929
31918: POP
// places := 3 ; end ;
31919: LD_ADDR_VAR 0 3
31923: PUSH
31924: LD_INT 3
31926: ST_TO_ADDR
31927: GO 31930
31929: POP
// if places then
31930: LD_VAR 0 3
31934: IFFALSE 31957
// result := UnitsInside ( building ) < places ;
31936: LD_ADDR_VAR 0 2
31940: PUSH
31941: LD_VAR 0 1
31945: PPUSH
31946: CALL_OW 313
31950: PUSH
31951: LD_VAR 0 3
31955: LESS
31956: ST_TO_ADDR
// end ;
31957: LD_VAR 0 2
31961: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31962: LD_INT 0
31964: PPUSH
31965: PPUSH
31966: PPUSH
31967: PPUSH
// tmp := [ ] ;
31968: LD_ADDR_VAR 0 3
31972: PUSH
31973: EMPTY
31974: ST_TO_ADDR
// list := [ ] ;
31975: LD_ADDR_VAR 0 5
31979: PUSH
31980: EMPTY
31981: ST_TO_ADDR
// for i = 16 to 25 do
31982: LD_ADDR_VAR 0 4
31986: PUSH
31987: DOUBLE
31988: LD_INT 16
31990: DEC
31991: ST_TO_ADDR
31992: LD_INT 25
31994: PUSH
31995: FOR_TO
31996: IFFALSE 32069
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31998: LD_ADDR_VAR 0 3
32002: PUSH
32003: LD_VAR 0 3
32007: PUSH
32008: LD_INT 22
32010: PUSH
32011: LD_VAR 0 1
32015: PPUSH
32016: CALL_OW 255
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 91
32027: PUSH
32028: LD_VAR 0 1
32032: PUSH
32033: LD_INT 6
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 30
32043: PUSH
32044: LD_VAR 0 4
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: LIST
32057: PUSH
32058: EMPTY
32059: LIST
32060: PPUSH
32061: CALL_OW 69
32065: ADD
32066: ST_TO_ADDR
32067: GO 31995
32069: POP
32070: POP
// for i = 1 to tmp do
32071: LD_ADDR_VAR 0 4
32075: PUSH
32076: DOUBLE
32077: LD_INT 1
32079: DEC
32080: ST_TO_ADDR
32081: LD_VAR 0 3
32085: PUSH
32086: FOR_TO
32087: IFFALSE 32175
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32089: LD_ADDR_VAR 0 5
32093: PUSH
32094: LD_VAR 0 5
32098: PUSH
32099: LD_VAR 0 3
32103: PUSH
32104: LD_VAR 0 4
32108: ARRAY
32109: PPUSH
32110: CALL_OW 266
32114: PUSH
32115: LD_VAR 0 3
32119: PUSH
32120: LD_VAR 0 4
32124: ARRAY
32125: PPUSH
32126: CALL_OW 250
32130: PUSH
32131: LD_VAR 0 3
32135: PUSH
32136: LD_VAR 0 4
32140: ARRAY
32141: PPUSH
32142: CALL_OW 251
32146: PUSH
32147: LD_VAR 0 3
32151: PUSH
32152: LD_VAR 0 4
32156: ARRAY
32157: PPUSH
32158: CALL_OW 254
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: PUSH
32169: EMPTY
32170: LIST
32171: ADD
32172: ST_TO_ADDR
32173: GO 32086
32175: POP
32176: POP
// result := list ;
32177: LD_ADDR_VAR 0 2
32181: PUSH
32182: LD_VAR 0 5
32186: ST_TO_ADDR
// end ;
32187: LD_VAR 0 2
32191: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32192: LD_INT 0
32194: PPUSH
32195: PPUSH
32196: PPUSH
32197: PPUSH
32198: PPUSH
32199: PPUSH
32200: PPUSH
// if not factory then
32201: LD_VAR 0 1
32205: NOT
32206: IFFALSE 32210
// exit ;
32208: GO 32803
// if control = control_apeman then
32210: LD_VAR 0 4
32214: PUSH
32215: LD_INT 5
32217: EQUAL
32218: IFFALSE 32327
// begin tmp := UnitsInside ( factory ) ;
32220: LD_ADDR_VAR 0 8
32224: PUSH
32225: LD_VAR 0 1
32229: PPUSH
32230: CALL_OW 313
32234: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32235: LD_VAR 0 8
32239: PPUSH
32240: LD_INT 25
32242: PUSH
32243: LD_INT 12
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PPUSH
32250: CALL_OW 72
32254: NOT
32255: IFFALSE 32265
// control := control_manual ;
32257: LD_ADDR_VAR 0 4
32261: PUSH
32262: LD_INT 1
32264: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32265: LD_ADDR_VAR 0 8
32269: PUSH
32270: LD_VAR 0 1
32274: PPUSH
32275: CALL 31962 0 1
32279: ST_TO_ADDR
// if tmp then
32280: LD_VAR 0 8
32284: IFFALSE 32327
// begin for i in tmp do
32286: LD_ADDR_VAR 0 7
32290: PUSH
32291: LD_VAR 0 8
32295: PUSH
32296: FOR_IN
32297: IFFALSE 32325
// if i [ 1 ] = b_ext_radio then
32299: LD_VAR 0 7
32303: PUSH
32304: LD_INT 1
32306: ARRAY
32307: PUSH
32308: LD_INT 22
32310: EQUAL
32311: IFFALSE 32323
// begin control := control_remote ;
32313: LD_ADDR_VAR 0 4
32317: PUSH
32318: LD_INT 2
32320: ST_TO_ADDR
// break ;
32321: GO 32325
// end ;
32323: GO 32296
32325: POP
32326: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32327: LD_VAR 0 1
32331: PPUSH
32332: LD_VAR 0 2
32336: PPUSH
32337: LD_VAR 0 3
32341: PPUSH
32342: LD_VAR 0 4
32346: PPUSH
32347: LD_VAR 0 5
32351: PPUSH
32352: CALL_OW 448
32356: IFFALSE 32391
// begin result := [ chassis , engine , control , weapon ] ;
32358: LD_ADDR_VAR 0 6
32362: PUSH
32363: LD_VAR 0 2
32367: PUSH
32368: LD_VAR 0 3
32372: PUSH
32373: LD_VAR 0 4
32377: PUSH
32378: LD_VAR 0 5
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: ST_TO_ADDR
// exit ;
32389: GO 32803
// end ; _chassis := AvailableChassisList ( factory ) ;
32391: LD_ADDR_VAR 0 9
32395: PUSH
32396: LD_VAR 0 1
32400: PPUSH
32401: CALL_OW 475
32405: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32406: LD_ADDR_VAR 0 11
32410: PUSH
32411: LD_VAR 0 1
32415: PPUSH
32416: CALL_OW 476
32420: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32421: LD_ADDR_VAR 0 12
32425: PUSH
32426: LD_VAR 0 1
32430: PPUSH
32431: CALL_OW 477
32435: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32436: LD_ADDR_VAR 0 10
32440: PUSH
32441: LD_VAR 0 1
32445: PPUSH
32446: CALL_OW 478
32450: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32451: LD_VAR 0 9
32455: NOT
32456: PUSH
32457: LD_VAR 0 11
32461: NOT
32462: OR
32463: PUSH
32464: LD_VAR 0 12
32468: NOT
32469: OR
32470: PUSH
32471: LD_VAR 0 10
32475: NOT
32476: OR
32477: IFFALSE 32512
// begin result := [ chassis , engine , control , weapon ] ;
32479: LD_ADDR_VAR 0 6
32483: PUSH
32484: LD_VAR 0 2
32488: PUSH
32489: LD_VAR 0 3
32493: PUSH
32494: LD_VAR 0 4
32498: PUSH
32499: LD_VAR 0 5
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: ST_TO_ADDR
// exit ;
32510: GO 32803
// end ; if not chassis in _chassis then
32512: LD_VAR 0 2
32516: PUSH
32517: LD_VAR 0 9
32521: IN
32522: NOT
32523: IFFALSE 32549
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32525: LD_ADDR_VAR 0 2
32529: PUSH
32530: LD_VAR 0 9
32534: PUSH
32535: LD_INT 1
32537: PPUSH
32538: LD_VAR 0 9
32542: PPUSH
32543: CALL_OW 12
32547: ARRAY
32548: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32549: LD_VAR 0 2
32553: PPUSH
32554: LD_VAR 0 3
32558: PPUSH
32559: CALL 32808 0 2
32563: NOT
32564: IFFALSE 32623
// repeat engine := _engine [ 1 ] ;
32566: LD_ADDR_VAR 0 3
32570: PUSH
32571: LD_VAR 0 11
32575: PUSH
32576: LD_INT 1
32578: ARRAY
32579: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32580: LD_ADDR_VAR 0 11
32584: PUSH
32585: LD_VAR 0 11
32589: PPUSH
32590: LD_INT 1
32592: PPUSH
32593: CALL_OW 3
32597: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32598: LD_VAR 0 2
32602: PPUSH
32603: LD_VAR 0 3
32607: PPUSH
32608: CALL 32808 0 2
32612: PUSH
32613: LD_VAR 0 11
32617: PUSH
32618: EMPTY
32619: EQUAL
32620: OR
32621: IFFALSE 32566
// if not control in _control then
32623: LD_VAR 0 4
32627: PUSH
32628: LD_VAR 0 12
32632: IN
32633: NOT
32634: IFFALSE 32660
// control := _control [ rand ( 1 , _control ) ] ;
32636: LD_ADDR_VAR 0 4
32640: PUSH
32641: LD_VAR 0 12
32645: PUSH
32646: LD_INT 1
32648: PPUSH
32649: LD_VAR 0 12
32653: PPUSH
32654: CALL_OW 12
32658: ARRAY
32659: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32660: LD_VAR 0 2
32664: PPUSH
32665: LD_VAR 0 5
32669: PPUSH
32670: CALL 33028 0 2
32674: NOT
32675: IFFALSE 32734
// repeat weapon := _weapon [ 1 ] ;
32677: LD_ADDR_VAR 0 5
32681: PUSH
32682: LD_VAR 0 10
32686: PUSH
32687: LD_INT 1
32689: ARRAY
32690: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32691: LD_ADDR_VAR 0 10
32695: PUSH
32696: LD_VAR 0 10
32700: PPUSH
32701: LD_INT 1
32703: PPUSH
32704: CALL_OW 3
32708: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32709: LD_VAR 0 2
32713: PPUSH
32714: LD_VAR 0 5
32718: PPUSH
32719: CALL 33028 0 2
32723: PUSH
32724: LD_VAR 0 10
32728: PUSH
32729: EMPTY
32730: EQUAL
32731: OR
32732: IFFALSE 32677
// result := [ ] ;
32734: LD_ADDR_VAR 0 6
32738: PUSH
32739: EMPTY
32740: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32741: LD_VAR 0 1
32745: PPUSH
32746: LD_VAR 0 2
32750: PPUSH
32751: LD_VAR 0 3
32755: PPUSH
32756: LD_VAR 0 4
32760: PPUSH
32761: LD_VAR 0 5
32765: PPUSH
32766: CALL_OW 448
32770: IFFALSE 32803
// result := [ chassis , engine , control , weapon ] ;
32772: LD_ADDR_VAR 0 6
32776: PUSH
32777: LD_VAR 0 2
32781: PUSH
32782: LD_VAR 0 3
32786: PUSH
32787: LD_VAR 0 4
32791: PUSH
32792: LD_VAR 0 5
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: LIST
32801: LIST
32802: ST_TO_ADDR
// end ;
32803: LD_VAR 0 6
32807: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32808: LD_INT 0
32810: PPUSH
// if not chassis or not engine then
32811: LD_VAR 0 1
32815: NOT
32816: PUSH
32817: LD_VAR 0 2
32821: NOT
32822: OR
32823: IFFALSE 32827
// exit ;
32825: GO 33023
// case engine of engine_solar :
32827: LD_VAR 0 2
32831: PUSH
32832: LD_INT 2
32834: DOUBLE
32835: EQUAL
32836: IFTRUE 32840
32838: GO 32878
32840: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32841: LD_ADDR_VAR 0 3
32845: PUSH
32846: LD_INT 11
32848: PUSH
32849: LD_INT 12
32851: PUSH
32852: LD_INT 13
32854: PUSH
32855: LD_INT 14
32857: PUSH
32858: LD_INT 1
32860: PUSH
32861: LD_INT 2
32863: PUSH
32864: LD_INT 3
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: ST_TO_ADDR
32876: GO 33007
32878: LD_INT 1
32880: DOUBLE
32881: EQUAL
32882: IFTRUE 32886
32884: GO 32948
32886: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32887: LD_ADDR_VAR 0 3
32891: PUSH
32892: LD_INT 11
32894: PUSH
32895: LD_INT 12
32897: PUSH
32898: LD_INT 13
32900: PUSH
32901: LD_INT 14
32903: PUSH
32904: LD_INT 1
32906: PUSH
32907: LD_INT 2
32909: PUSH
32910: LD_INT 3
32912: PUSH
32913: LD_INT 4
32915: PUSH
32916: LD_INT 5
32918: PUSH
32919: LD_INT 21
32921: PUSH
32922: LD_INT 23
32924: PUSH
32925: LD_INT 22
32927: PUSH
32928: LD_INT 24
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: ST_TO_ADDR
32946: GO 33007
32948: LD_INT 3
32950: DOUBLE
32951: EQUAL
32952: IFTRUE 32956
32954: GO 33006
32956: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32957: LD_ADDR_VAR 0 3
32961: PUSH
32962: LD_INT 13
32964: PUSH
32965: LD_INT 14
32967: PUSH
32968: LD_INT 2
32970: PUSH
32971: LD_INT 3
32973: PUSH
32974: LD_INT 4
32976: PUSH
32977: LD_INT 5
32979: PUSH
32980: LD_INT 21
32982: PUSH
32983: LD_INT 22
32985: PUSH
32986: LD_INT 23
32988: PUSH
32989: LD_INT 24
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: LIST
33000: LIST
33001: LIST
33002: LIST
33003: ST_TO_ADDR
33004: GO 33007
33006: POP
// result := ( chassis in result ) ;
33007: LD_ADDR_VAR 0 3
33011: PUSH
33012: LD_VAR 0 1
33016: PUSH
33017: LD_VAR 0 3
33021: IN
33022: ST_TO_ADDR
// end ;
33023: LD_VAR 0 3
33027: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33028: LD_INT 0
33030: PPUSH
// if not chassis or not weapon then
33031: LD_VAR 0 1
33035: NOT
33036: PUSH
33037: LD_VAR 0 2
33041: NOT
33042: OR
33043: IFFALSE 33047
// exit ;
33045: GO 34107
// case weapon of us_machine_gun :
33047: LD_VAR 0 2
33051: PUSH
33052: LD_INT 2
33054: DOUBLE
33055: EQUAL
33056: IFTRUE 33060
33058: GO 33090
33060: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33061: LD_ADDR_VAR 0 3
33065: PUSH
33066: LD_INT 1
33068: PUSH
33069: LD_INT 2
33071: PUSH
33072: LD_INT 3
33074: PUSH
33075: LD_INT 4
33077: PUSH
33078: LD_INT 5
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: ST_TO_ADDR
33088: GO 34091
33090: LD_INT 3
33092: DOUBLE
33093: EQUAL
33094: IFTRUE 33098
33096: GO 33128
33098: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33099: LD_ADDR_VAR 0 3
33103: PUSH
33104: LD_INT 1
33106: PUSH
33107: LD_INT 2
33109: PUSH
33110: LD_INT 3
33112: PUSH
33113: LD_INT 4
33115: PUSH
33116: LD_INT 5
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: ST_TO_ADDR
33126: GO 34091
33128: LD_INT 11
33130: DOUBLE
33131: EQUAL
33132: IFTRUE 33136
33134: GO 33166
33136: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33137: LD_ADDR_VAR 0 3
33141: PUSH
33142: LD_INT 1
33144: PUSH
33145: LD_INT 2
33147: PUSH
33148: LD_INT 3
33150: PUSH
33151: LD_INT 4
33153: PUSH
33154: LD_INT 5
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: ST_TO_ADDR
33164: GO 34091
33166: LD_INT 4
33168: DOUBLE
33169: EQUAL
33170: IFTRUE 33174
33172: GO 33200
33174: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33175: LD_ADDR_VAR 0 3
33179: PUSH
33180: LD_INT 2
33182: PUSH
33183: LD_INT 3
33185: PUSH
33186: LD_INT 4
33188: PUSH
33189: LD_INT 5
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: ST_TO_ADDR
33198: GO 34091
33200: LD_INT 5
33202: DOUBLE
33203: EQUAL
33204: IFTRUE 33208
33206: GO 33234
33208: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33209: LD_ADDR_VAR 0 3
33213: PUSH
33214: LD_INT 2
33216: PUSH
33217: LD_INT 3
33219: PUSH
33220: LD_INT 4
33222: PUSH
33223: LD_INT 5
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: ST_TO_ADDR
33232: GO 34091
33234: LD_INT 9
33236: DOUBLE
33237: EQUAL
33238: IFTRUE 33242
33240: GO 33268
33242: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33243: LD_ADDR_VAR 0 3
33247: PUSH
33248: LD_INT 2
33250: PUSH
33251: LD_INT 3
33253: PUSH
33254: LD_INT 4
33256: PUSH
33257: LD_INT 5
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: ST_TO_ADDR
33266: GO 34091
33268: LD_INT 7
33270: DOUBLE
33271: EQUAL
33272: IFTRUE 33276
33274: GO 33302
33276: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33277: LD_ADDR_VAR 0 3
33281: PUSH
33282: LD_INT 2
33284: PUSH
33285: LD_INT 3
33287: PUSH
33288: LD_INT 4
33290: PUSH
33291: LD_INT 5
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: ST_TO_ADDR
33300: GO 34091
33302: LD_INT 12
33304: DOUBLE
33305: EQUAL
33306: IFTRUE 33310
33308: GO 33336
33310: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33311: LD_ADDR_VAR 0 3
33315: PUSH
33316: LD_INT 2
33318: PUSH
33319: LD_INT 3
33321: PUSH
33322: LD_INT 4
33324: PUSH
33325: LD_INT 5
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: ST_TO_ADDR
33334: GO 34091
33336: LD_INT 13
33338: DOUBLE
33339: EQUAL
33340: IFTRUE 33344
33342: GO 33370
33344: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33345: LD_ADDR_VAR 0 3
33349: PUSH
33350: LD_INT 2
33352: PUSH
33353: LD_INT 3
33355: PUSH
33356: LD_INT 4
33358: PUSH
33359: LD_INT 5
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: LIST
33366: LIST
33367: ST_TO_ADDR
33368: GO 34091
33370: LD_INT 14
33372: DOUBLE
33373: EQUAL
33374: IFTRUE 33378
33376: GO 33396
33378: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33379: LD_ADDR_VAR 0 3
33383: PUSH
33384: LD_INT 4
33386: PUSH
33387: LD_INT 5
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: ST_TO_ADDR
33394: GO 34091
33396: LD_INT 6
33398: DOUBLE
33399: EQUAL
33400: IFTRUE 33404
33402: GO 33422
33404: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33405: LD_ADDR_VAR 0 3
33409: PUSH
33410: LD_INT 4
33412: PUSH
33413: LD_INT 5
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: ST_TO_ADDR
33420: GO 34091
33422: LD_INT 10
33424: DOUBLE
33425: EQUAL
33426: IFTRUE 33430
33428: GO 33448
33430: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33431: LD_ADDR_VAR 0 3
33435: PUSH
33436: LD_INT 4
33438: PUSH
33439: LD_INT 5
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: ST_TO_ADDR
33446: GO 34091
33448: LD_INT 22
33450: DOUBLE
33451: EQUAL
33452: IFTRUE 33456
33454: GO 33482
33456: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33457: LD_ADDR_VAR 0 3
33461: PUSH
33462: LD_INT 11
33464: PUSH
33465: LD_INT 12
33467: PUSH
33468: LD_INT 13
33470: PUSH
33471: LD_INT 14
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: ST_TO_ADDR
33480: GO 34091
33482: LD_INT 23
33484: DOUBLE
33485: EQUAL
33486: IFTRUE 33490
33488: GO 33516
33490: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33491: LD_ADDR_VAR 0 3
33495: PUSH
33496: LD_INT 11
33498: PUSH
33499: LD_INT 12
33501: PUSH
33502: LD_INT 13
33504: PUSH
33505: LD_INT 14
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: ST_TO_ADDR
33514: GO 34091
33516: LD_INT 24
33518: DOUBLE
33519: EQUAL
33520: IFTRUE 33524
33522: GO 33550
33524: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33525: LD_ADDR_VAR 0 3
33529: PUSH
33530: LD_INT 11
33532: PUSH
33533: LD_INT 12
33535: PUSH
33536: LD_INT 13
33538: PUSH
33539: LD_INT 14
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: ST_TO_ADDR
33548: GO 34091
33550: LD_INT 30
33552: DOUBLE
33553: EQUAL
33554: IFTRUE 33558
33556: GO 33584
33558: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33559: LD_ADDR_VAR 0 3
33563: PUSH
33564: LD_INT 11
33566: PUSH
33567: LD_INT 12
33569: PUSH
33570: LD_INT 13
33572: PUSH
33573: LD_INT 14
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: ST_TO_ADDR
33582: GO 34091
33584: LD_INT 25
33586: DOUBLE
33587: EQUAL
33588: IFTRUE 33592
33590: GO 33610
33592: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33593: LD_ADDR_VAR 0 3
33597: PUSH
33598: LD_INT 13
33600: PUSH
33601: LD_INT 14
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: ST_TO_ADDR
33608: GO 34091
33610: LD_INT 27
33612: DOUBLE
33613: EQUAL
33614: IFTRUE 33618
33616: GO 33636
33618: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33619: LD_ADDR_VAR 0 3
33623: PUSH
33624: LD_INT 13
33626: PUSH
33627: LD_INT 14
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: ST_TO_ADDR
33634: GO 34091
33636: LD_INT 92
33638: DOUBLE
33639: EQUAL
33640: IFTRUE 33644
33642: GO 33670
33644: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33645: LD_ADDR_VAR 0 3
33649: PUSH
33650: LD_INT 11
33652: PUSH
33653: LD_INT 12
33655: PUSH
33656: LD_INT 13
33658: PUSH
33659: LD_INT 14
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: ST_TO_ADDR
33668: GO 34091
33670: LD_INT 28
33672: DOUBLE
33673: EQUAL
33674: IFTRUE 33678
33676: GO 33696
33678: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33679: LD_ADDR_VAR 0 3
33683: PUSH
33684: LD_INT 13
33686: PUSH
33687: LD_INT 14
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: ST_TO_ADDR
33694: GO 34091
33696: LD_INT 29
33698: DOUBLE
33699: EQUAL
33700: IFTRUE 33704
33702: GO 33722
33704: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33705: LD_ADDR_VAR 0 3
33709: PUSH
33710: LD_INT 13
33712: PUSH
33713: LD_INT 14
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: ST_TO_ADDR
33720: GO 34091
33722: LD_INT 31
33724: DOUBLE
33725: EQUAL
33726: IFTRUE 33730
33728: GO 33748
33730: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33731: LD_ADDR_VAR 0 3
33735: PUSH
33736: LD_INT 13
33738: PUSH
33739: LD_INT 14
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: ST_TO_ADDR
33746: GO 34091
33748: LD_INT 26
33750: DOUBLE
33751: EQUAL
33752: IFTRUE 33756
33754: GO 33774
33756: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33757: LD_ADDR_VAR 0 3
33761: PUSH
33762: LD_INT 13
33764: PUSH
33765: LD_INT 14
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: ST_TO_ADDR
33772: GO 34091
33774: LD_INT 42
33776: DOUBLE
33777: EQUAL
33778: IFTRUE 33782
33780: GO 33808
33782: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33783: LD_ADDR_VAR 0 3
33787: PUSH
33788: LD_INT 21
33790: PUSH
33791: LD_INT 22
33793: PUSH
33794: LD_INT 23
33796: PUSH
33797: LD_INT 24
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: ST_TO_ADDR
33806: GO 34091
33808: LD_INT 43
33810: DOUBLE
33811: EQUAL
33812: IFTRUE 33816
33814: GO 33842
33816: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33817: LD_ADDR_VAR 0 3
33821: PUSH
33822: LD_INT 21
33824: PUSH
33825: LD_INT 22
33827: PUSH
33828: LD_INT 23
33830: PUSH
33831: LD_INT 24
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: ST_TO_ADDR
33840: GO 34091
33842: LD_INT 44
33844: DOUBLE
33845: EQUAL
33846: IFTRUE 33850
33848: GO 33876
33850: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33851: LD_ADDR_VAR 0 3
33855: PUSH
33856: LD_INT 21
33858: PUSH
33859: LD_INT 22
33861: PUSH
33862: LD_INT 23
33864: PUSH
33865: LD_INT 24
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: LIST
33872: LIST
33873: ST_TO_ADDR
33874: GO 34091
33876: LD_INT 45
33878: DOUBLE
33879: EQUAL
33880: IFTRUE 33884
33882: GO 33910
33884: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33885: LD_ADDR_VAR 0 3
33889: PUSH
33890: LD_INT 21
33892: PUSH
33893: LD_INT 22
33895: PUSH
33896: LD_INT 23
33898: PUSH
33899: LD_INT 24
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: ST_TO_ADDR
33908: GO 34091
33910: LD_INT 49
33912: DOUBLE
33913: EQUAL
33914: IFTRUE 33918
33916: GO 33944
33918: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33919: LD_ADDR_VAR 0 3
33923: PUSH
33924: LD_INT 21
33926: PUSH
33927: LD_INT 22
33929: PUSH
33930: LD_INT 23
33932: PUSH
33933: LD_INT 24
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: ST_TO_ADDR
33942: GO 34091
33944: LD_INT 51
33946: DOUBLE
33947: EQUAL
33948: IFTRUE 33952
33950: GO 33978
33952: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33953: LD_ADDR_VAR 0 3
33957: PUSH
33958: LD_INT 21
33960: PUSH
33961: LD_INT 22
33963: PUSH
33964: LD_INT 23
33966: PUSH
33967: LD_INT 24
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: ST_TO_ADDR
33976: GO 34091
33978: LD_INT 52
33980: DOUBLE
33981: EQUAL
33982: IFTRUE 33986
33984: GO 34012
33986: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33987: LD_ADDR_VAR 0 3
33991: PUSH
33992: LD_INT 21
33994: PUSH
33995: LD_INT 22
33997: PUSH
33998: LD_INT 23
34000: PUSH
34001: LD_INT 24
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: ST_TO_ADDR
34010: GO 34091
34012: LD_INT 53
34014: DOUBLE
34015: EQUAL
34016: IFTRUE 34020
34018: GO 34038
34020: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34021: LD_ADDR_VAR 0 3
34025: PUSH
34026: LD_INT 23
34028: PUSH
34029: LD_INT 24
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: ST_TO_ADDR
34036: GO 34091
34038: LD_INT 46
34040: DOUBLE
34041: EQUAL
34042: IFTRUE 34046
34044: GO 34064
34046: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34047: LD_ADDR_VAR 0 3
34051: PUSH
34052: LD_INT 23
34054: PUSH
34055: LD_INT 24
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: ST_TO_ADDR
34062: GO 34091
34064: LD_INT 47
34066: DOUBLE
34067: EQUAL
34068: IFTRUE 34072
34070: GO 34090
34072: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34073: LD_ADDR_VAR 0 3
34077: PUSH
34078: LD_INT 23
34080: PUSH
34081: LD_INT 24
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: ST_TO_ADDR
34088: GO 34091
34090: POP
// result := ( chassis in result ) ;
34091: LD_ADDR_VAR 0 3
34095: PUSH
34096: LD_VAR 0 1
34100: PUSH
34101: LD_VAR 0 3
34105: IN
34106: ST_TO_ADDR
// end ;
34107: LD_VAR 0 3
34111: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34112: LD_INT 0
34114: PPUSH
34115: PPUSH
34116: PPUSH
34117: PPUSH
34118: PPUSH
34119: PPUSH
34120: PPUSH
// result := array ;
34121: LD_ADDR_VAR 0 5
34125: PUSH
34126: LD_VAR 0 1
34130: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34131: LD_VAR 0 1
34135: NOT
34136: PUSH
34137: LD_VAR 0 2
34141: NOT
34142: OR
34143: PUSH
34144: LD_VAR 0 3
34148: NOT
34149: OR
34150: PUSH
34151: LD_VAR 0 2
34155: PUSH
34156: LD_VAR 0 1
34160: GREATER
34161: OR
34162: PUSH
34163: LD_VAR 0 3
34167: PUSH
34168: LD_VAR 0 1
34172: GREATER
34173: OR
34174: IFFALSE 34178
// exit ;
34176: GO 34474
// if direction then
34178: LD_VAR 0 4
34182: IFFALSE 34246
// begin d := 1 ;
34184: LD_ADDR_VAR 0 9
34188: PUSH
34189: LD_INT 1
34191: ST_TO_ADDR
// if i_from > i_to then
34192: LD_VAR 0 2
34196: PUSH
34197: LD_VAR 0 3
34201: GREATER
34202: IFFALSE 34228
// length := ( array - i_from ) + i_to else
34204: LD_ADDR_VAR 0 11
34208: PUSH
34209: LD_VAR 0 1
34213: PUSH
34214: LD_VAR 0 2
34218: MINUS
34219: PUSH
34220: LD_VAR 0 3
34224: PLUS
34225: ST_TO_ADDR
34226: GO 34244
// length := i_to - i_from ;
34228: LD_ADDR_VAR 0 11
34232: PUSH
34233: LD_VAR 0 3
34237: PUSH
34238: LD_VAR 0 2
34242: MINUS
34243: ST_TO_ADDR
// end else
34244: GO 34307
// begin d := - 1 ;
34246: LD_ADDR_VAR 0 9
34250: PUSH
34251: LD_INT 1
34253: NEG
34254: ST_TO_ADDR
// if i_from > i_to then
34255: LD_VAR 0 2
34259: PUSH
34260: LD_VAR 0 3
34264: GREATER
34265: IFFALSE 34285
// length := i_from - i_to else
34267: LD_ADDR_VAR 0 11
34271: PUSH
34272: LD_VAR 0 2
34276: PUSH
34277: LD_VAR 0 3
34281: MINUS
34282: ST_TO_ADDR
34283: GO 34307
// length := ( array - i_to ) + i_from ;
34285: LD_ADDR_VAR 0 11
34289: PUSH
34290: LD_VAR 0 1
34294: PUSH
34295: LD_VAR 0 3
34299: MINUS
34300: PUSH
34301: LD_VAR 0 2
34305: PLUS
34306: ST_TO_ADDR
// end ; if not length then
34307: LD_VAR 0 11
34311: NOT
34312: IFFALSE 34316
// exit ;
34314: GO 34474
// tmp := array ;
34316: LD_ADDR_VAR 0 10
34320: PUSH
34321: LD_VAR 0 1
34325: ST_TO_ADDR
// for i = 1 to length do
34326: LD_ADDR_VAR 0 6
34330: PUSH
34331: DOUBLE
34332: LD_INT 1
34334: DEC
34335: ST_TO_ADDR
34336: LD_VAR 0 11
34340: PUSH
34341: FOR_TO
34342: IFFALSE 34462
// begin for j = 1 to array do
34344: LD_ADDR_VAR 0 7
34348: PUSH
34349: DOUBLE
34350: LD_INT 1
34352: DEC
34353: ST_TO_ADDR
34354: LD_VAR 0 1
34358: PUSH
34359: FOR_TO
34360: IFFALSE 34448
// begin k := j + d ;
34362: LD_ADDR_VAR 0 8
34366: PUSH
34367: LD_VAR 0 7
34371: PUSH
34372: LD_VAR 0 9
34376: PLUS
34377: ST_TO_ADDR
// if k > array then
34378: LD_VAR 0 8
34382: PUSH
34383: LD_VAR 0 1
34387: GREATER
34388: IFFALSE 34398
// k := 1 ;
34390: LD_ADDR_VAR 0 8
34394: PUSH
34395: LD_INT 1
34397: ST_TO_ADDR
// if not k then
34398: LD_VAR 0 8
34402: NOT
34403: IFFALSE 34415
// k := array ;
34405: LD_ADDR_VAR 0 8
34409: PUSH
34410: LD_VAR 0 1
34414: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34415: LD_ADDR_VAR 0 10
34419: PUSH
34420: LD_VAR 0 10
34424: PPUSH
34425: LD_VAR 0 8
34429: PPUSH
34430: LD_VAR 0 1
34434: PUSH
34435: LD_VAR 0 7
34439: ARRAY
34440: PPUSH
34441: CALL_OW 1
34445: ST_TO_ADDR
// end ;
34446: GO 34359
34448: POP
34449: POP
// array := tmp ;
34450: LD_ADDR_VAR 0 1
34454: PUSH
34455: LD_VAR 0 10
34459: ST_TO_ADDR
// end ;
34460: GO 34341
34462: POP
34463: POP
// result := array ;
34464: LD_ADDR_VAR 0 5
34468: PUSH
34469: LD_VAR 0 1
34473: ST_TO_ADDR
// end ;
34474: LD_VAR 0 5
34478: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34479: LD_INT 0
34481: PPUSH
34482: PPUSH
// result := 0 ;
34483: LD_ADDR_VAR 0 3
34487: PUSH
34488: LD_INT 0
34490: ST_TO_ADDR
// if not array or not value in array then
34491: LD_VAR 0 1
34495: NOT
34496: PUSH
34497: LD_VAR 0 2
34501: PUSH
34502: LD_VAR 0 1
34506: IN
34507: NOT
34508: OR
34509: IFFALSE 34513
// exit ;
34511: GO 34567
// for i = 1 to array do
34513: LD_ADDR_VAR 0 4
34517: PUSH
34518: DOUBLE
34519: LD_INT 1
34521: DEC
34522: ST_TO_ADDR
34523: LD_VAR 0 1
34527: PUSH
34528: FOR_TO
34529: IFFALSE 34565
// if value = array [ i ] then
34531: LD_VAR 0 2
34535: PUSH
34536: LD_VAR 0 1
34540: PUSH
34541: LD_VAR 0 4
34545: ARRAY
34546: EQUAL
34547: IFFALSE 34563
// begin result := i ;
34549: LD_ADDR_VAR 0 3
34553: PUSH
34554: LD_VAR 0 4
34558: ST_TO_ADDR
// exit ;
34559: POP
34560: POP
34561: GO 34567
// end ;
34563: GO 34528
34565: POP
34566: POP
// end ;
34567: LD_VAR 0 3
34571: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34572: LD_INT 0
34574: PPUSH
// vc_chassis := chassis ;
34575: LD_ADDR_OWVAR 37
34579: PUSH
34580: LD_VAR 0 1
34584: ST_TO_ADDR
// vc_engine := engine ;
34585: LD_ADDR_OWVAR 39
34589: PUSH
34590: LD_VAR 0 2
34594: ST_TO_ADDR
// vc_control := control ;
34595: LD_ADDR_OWVAR 38
34599: PUSH
34600: LD_VAR 0 3
34604: ST_TO_ADDR
// vc_weapon := weapon ;
34605: LD_ADDR_OWVAR 40
34609: PUSH
34610: LD_VAR 0 4
34614: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34615: LD_ADDR_OWVAR 41
34619: PUSH
34620: LD_VAR 0 5
34624: ST_TO_ADDR
// end ;
34625: LD_VAR 0 6
34629: RET
// export function WantPlant ( unit ) ; var task ; begin
34630: LD_INT 0
34632: PPUSH
34633: PPUSH
// result := false ;
34634: LD_ADDR_VAR 0 2
34638: PUSH
34639: LD_INT 0
34641: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34642: LD_ADDR_VAR 0 3
34646: PUSH
34647: LD_VAR 0 1
34651: PPUSH
34652: CALL_OW 437
34656: ST_TO_ADDR
// if task then
34657: LD_VAR 0 3
34661: IFFALSE 34689
// if task [ 1 ] [ 1 ] = p then
34663: LD_VAR 0 3
34667: PUSH
34668: LD_INT 1
34670: ARRAY
34671: PUSH
34672: LD_INT 1
34674: ARRAY
34675: PUSH
34676: LD_STRING p
34678: EQUAL
34679: IFFALSE 34689
// result := true ;
34681: LD_ADDR_VAR 0 2
34685: PUSH
34686: LD_INT 1
34688: ST_TO_ADDR
// end ;
34689: LD_VAR 0 2
34693: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34694: LD_INT 0
34696: PPUSH
34697: PPUSH
34698: PPUSH
34699: PPUSH
// if pos < 1 then
34700: LD_VAR 0 2
34704: PUSH
34705: LD_INT 1
34707: LESS
34708: IFFALSE 34712
// exit ;
34710: GO 35015
// if pos = 1 then
34712: LD_VAR 0 2
34716: PUSH
34717: LD_INT 1
34719: EQUAL
34720: IFFALSE 34753
// result := Replace ( arr , pos [ 1 ] , value ) else
34722: LD_ADDR_VAR 0 4
34726: PUSH
34727: LD_VAR 0 1
34731: PPUSH
34732: LD_VAR 0 2
34736: PUSH
34737: LD_INT 1
34739: ARRAY
34740: PPUSH
34741: LD_VAR 0 3
34745: PPUSH
34746: CALL_OW 1
34750: ST_TO_ADDR
34751: GO 35015
// begin tmp := arr ;
34753: LD_ADDR_VAR 0 6
34757: PUSH
34758: LD_VAR 0 1
34762: ST_TO_ADDR
// s_arr := [ tmp ] ;
34763: LD_ADDR_VAR 0 7
34767: PUSH
34768: LD_VAR 0 6
34772: PUSH
34773: EMPTY
34774: LIST
34775: ST_TO_ADDR
// for i = 1 to pos - 1 do
34776: LD_ADDR_VAR 0 5
34780: PUSH
34781: DOUBLE
34782: LD_INT 1
34784: DEC
34785: ST_TO_ADDR
34786: LD_VAR 0 2
34790: PUSH
34791: LD_INT 1
34793: MINUS
34794: PUSH
34795: FOR_TO
34796: IFFALSE 34841
// begin tmp := tmp [ pos [ i ] ] ;
34798: LD_ADDR_VAR 0 6
34802: PUSH
34803: LD_VAR 0 6
34807: PUSH
34808: LD_VAR 0 2
34812: PUSH
34813: LD_VAR 0 5
34817: ARRAY
34818: ARRAY
34819: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34820: LD_ADDR_VAR 0 7
34824: PUSH
34825: LD_VAR 0 7
34829: PUSH
34830: LD_VAR 0 6
34834: PUSH
34835: EMPTY
34836: LIST
34837: ADD
34838: ST_TO_ADDR
// end ;
34839: GO 34795
34841: POP
34842: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34843: LD_ADDR_VAR 0 6
34847: PUSH
34848: LD_VAR 0 6
34852: PPUSH
34853: LD_VAR 0 2
34857: PUSH
34858: LD_VAR 0 2
34862: ARRAY
34863: PPUSH
34864: LD_VAR 0 3
34868: PPUSH
34869: CALL_OW 1
34873: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34874: LD_ADDR_VAR 0 7
34878: PUSH
34879: LD_VAR 0 7
34883: PPUSH
34884: LD_VAR 0 7
34888: PPUSH
34889: LD_VAR 0 6
34893: PPUSH
34894: CALL_OW 1
34898: ST_TO_ADDR
// for i = s_arr downto 2 do
34899: LD_ADDR_VAR 0 5
34903: PUSH
34904: DOUBLE
34905: LD_VAR 0 7
34909: INC
34910: ST_TO_ADDR
34911: LD_INT 2
34913: PUSH
34914: FOR_DOWNTO
34915: IFFALSE 34999
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34917: LD_ADDR_VAR 0 6
34921: PUSH
34922: LD_VAR 0 7
34926: PUSH
34927: LD_VAR 0 5
34931: PUSH
34932: LD_INT 1
34934: MINUS
34935: ARRAY
34936: PPUSH
34937: LD_VAR 0 2
34941: PUSH
34942: LD_VAR 0 5
34946: PUSH
34947: LD_INT 1
34949: MINUS
34950: ARRAY
34951: PPUSH
34952: LD_VAR 0 7
34956: PUSH
34957: LD_VAR 0 5
34961: ARRAY
34962: PPUSH
34963: CALL_OW 1
34967: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34968: LD_ADDR_VAR 0 7
34972: PUSH
34973: LD_VAR 0 7
34977: PPUSH
34978: LD_VAR 0 5
34982: PUSH
34983: LD_INT 1
34985: MINUS
34986: PPUSH
34987: LD_VAR 0 6
34991: PPUSH
34992: CALL_OW 1
34996: ST_TO_ADDR
// end ;
34997: GO 34914
34999: POP
35000: POP
// result := s_arr [ 1 ] ;
35001: LD_ADDR_VAR 0 4
35005: PUSH
35006: LD_VAR 0 7
35010: PUSH
35011: LD_INT 1
35013: ARRAY
35014: ST_TO_ADDR
// end ; end ;
35015: LD_VAR 0 4
35019: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35020: LD_INT 0
35022: PPUSH
35023: PPUSH
// if not list then
35024: LD_VAR 0 1
35028: NOT
35029: IFFALSE 35033
// exit ;
35031: GO 35124
// i := list [ pos1 ] ;
35033: LD_ADDR_VAR 0 5
35037: PUSH
35038: LD_VAR 0 1
35042: PUSH
35043: LD_VAR 0 2
35047: ARRAY
35048: ST_TO_ADDR
// if not i then
35049: LD_VAR 0 5
35053: NOT
35054: IFFALSE 35058
// exit ;
35056: GO 35124
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35058: LD_ADDR_VAR 0 1
35062: PUSH
35063: LD_VAR 0 1
35067: PPUSH
35068: LD_VAR 0 2
35072: PPUSH
35073: LD_VAR 0 1
35077: PUSH
35078: LD_VAR 0 3
35082: ARRAY
35083: PPUSH
35084: CALL_OW 1
35088: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35089: LD_ADDR_VAR 0 1
35093: PUSH
35094: LD_VAR 0 1
35098: PPUSH
35099: LD_VAR 0 3
35103: PPUSH
35104: LD_VAR 0 5
35108: PPUSH
35109: CALL_OW 1
35113: ST_TO_ADDR
// result := list ;
35114: LD_ADDR_VAR 0 4
35118: PUSH
35119: LD_VAR 0 1
35123: ST_TO_ADDR
// end ;
35124: LD_VAR 0 4
35128: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35129: LD_INT 0
35131: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35132: LD_ADDR_VAR 0 5
35136: PUSH
35137: LD_VAR 0 1
35141: PPUSH
35142: CALL_OW 250
35146: PPUSH
35147: LD_VAR 0 1
35151: PPUSH
35152: CALL_OW 251
35156: PPUSH
35157: LD_VAR 0 2
35161: PPUSH
35162: LD_VAR 0 3
35166: PPUSH
35167: LD_VAR 0 4
35171: PPUSH
35172: CALL 35182 0 5
35176: ST_TO_ADDR
// end ;
35177: LD_VAR 0 5
35181: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35182: LD_INT 0
35184: PPUSH
35185: PPUSH
35186: PPUSH
35187: PPUSH
// if not list then
35188: LD_VAR 0 3
35192: NOT
35193: IFFALSE 35197
// exit ;
35195: GO 35585
// result := [ ] ;
35197: LD_ADDR_VAR 0 6
35201: PUSH
35202: EMPTY
35203: ST_TO_ADDR
// for i in list do
35204: LD_ADDR_VAR 0 7
35208: PUSH
35209: LD_VAR 0 3
35213: PUSH
35214: FOR_IN
35215: IFFALSE 35417
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35217: LD_ADDR_VAR 0 9
35221: PUSH
35222: LD_VAR 0 7
35226: PPUSH
35227: LD_VAR 0 1
35231: PPUSH
35232: LD_VAR 0 2
35236: PPUSH
35237: CALL_OW 297
35241: ST_TO_ADDR
// if not result then
35242: LD_VAR 0 6
35246: NOT
35247: IFFALSE 35273
// result := [ [ i , tmp ] ] else
35249: LD_ADDR_VAR 0 6
35253: PUSH
35254: LD_VAR 0 7
35258: PUSH
35259: LD_VAR 0 9
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PUSH
35268: EMPTY
35269: LIST
35270: ST_TO_ADDR
35271: GO 35415
// begin if result [ result ] [ 2 ] < tmp then
35273: LD_VAR 0 6
35277: PUSH
35278: LD_VAR 0 6
35282: ARRAY
35283: PUSH
35284: LD_INT 2
35286: ARRAY
35287: PUSH
35288: LD_VAR 0 9
35292: LESS
35293: IFFALSE 35335
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35295: LD_ADDR_VAR 0 6
35299: PUSH
35300: LD_VAR 0 6
35304: PPUSH
35305: LD_VAR 0 6
35309: PUSH
35310: LD_INT 1
35312: PLUS
35313: PPUSH
35314: LD_VAR 0 7
35318: PUSH
35319: LD_VAR 0 9
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PPUSH
35328: CALL_OW 2
35332: ST_TO_ADDR
35333: GO 35415
// for j = 1 to result do
35335: LD_ADDR_VAR 0 8
35339: PUSH
35340: DOUBLE
35341: LD_INT 1
35343: DEC
35344: ST_TO_ADDR
35345: LD_VAR 0 6
35349: PUSH
35350: FOR_TO
35351: IFFALSE 35413
// begin if tmp < result [ j ] [ 2 ] then
35353: LD_VAR 0 9
35357: PUSH
35358: LD_VAR 0 6
35362: PUSH
35363: LD_VAR 0 8
35367: ARRAY
35368: PUSH
35369: LD_INT 2
35371: ARRAY
35372: LESS
35373: IFFALSE 35411
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35375: LD_ADDR_VAR 0 6
35379: PUSH
35380: LD_VAR 0 6
35384: PPUSH
35385: LD_VAR 0 8
35389: PPUSH
35390: LD_VAR 0 7
35394: PUSH
35395: LD_VAR 0 9
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PPUSH
35404: CALL_OW 2
35408: ST_TO_ADDR
// break ;
35409: GO 35413
// end ; end ;
35411: GO 35350
35413: POP
35414: POP
// end ; end ;
35415: GO 35214
35417: POP
35418: POP
// if result and not asc then
35419: LD_VAR 0 6
35423: PUSH
35424: LD_VAR 0 4
35428: NOT
35429: AND
35430: IFFALSE 35505
// begin tmp := result ;
35432: LD_ADDR_VAR 0 9
35436: PUSH
35437: LD_VAR 0 6
35441: ST_TO_ADDR
// for i = tmp downto 1 do
35442: LD_ADDR_VAR 0 7
35446: PUSH
35447: DOUBLE
35448: LD_VAR 0 9
35452: INC
35453: ST_TO_ADDR
35454: LD_INT 1
35456: PUSH
35457: FOR_DOWNTO
35458: IFFALSE 35503
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35460: LD_ADDR_VAR 0 6
35464: PUSH
35465: LD_VAR 0 6
35469: PPUSH
35470: LD_VAR 0 9
35474: PUSH
35475: LD_VAR 0 7
35479: MINUS
35480: PUSH
35481: LD_INT 1
35483: PLUS
35484: PPUSH
35485: LD_VAR 0 9
35489: PUSH
35490: LD_VAR 0 7
35494: ARRAY
35495: PPUSH
35496: CALL_OW 1
35500: ST_TO_ADDR
35501: GO 35457
35503: POP
35504: POP
// end ; tmp := [ ] ;
35505: LD_ADDR_VAR 0 9
35509: PUSH
35510: EMPTY
35511: ST_TO_ADDR
// if mode then
35512: LD_VAR 0 5
35516: IFFALSE 35585
// begin for i = 1 to result do
35518: LD_ADDR_VAR 0 7
35522: PUSH
35523: DOUBLE
35524: LD_INT 1
35526: DEC
35527: ST_TO_ADDR
35528: LD_VAR 0 6
35532: PUSH
35533: FOR_TO
35534: IFFALSE 35573
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35536: LD_ADDR_VAR 0 9
35540: PUSH
35541: LD_VAR 0 9
35545: PPUSH
35546: LD_VAR 0 7
35550: PPUSH
35551: LD_VAR 0 6
35555: PUSH
35556: LD_VAR 0 7
35560: ARRAY
35561: PUSH
35562: LD_INT 1
35564: ARRAY
35565: PPUSH
35566: CALL_OW 1
35570: ST_TO_ADDR
35571: GO 35533
35573: POP
35574: POP
// result := tmp ;
35575: LD_ADDR_VAR 0 6
35579: PUSH
35580: LD_VAR 0 9
35584: ST_TO_ADDR
// end ; end ;
35585: LD_VAR 0 6
35589: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35590: LD_INT 0
35592: PPUSH
35593: PPUSH
35594: PPUSH
35595: PPUSH
35596: PPUSH
35597: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35598: LD_ADDR_VAR 0 5
35602: PUSH
35603: LD_INT 0
35605: PUSH
35606: LD_INT 0
35608: PUSH
35609: LD_INT 0
35611: PUSH
35612: EMPTY
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: ST_TO_ADDR
// if not x or not y then
35620: LD_VAR 0 2
35624: NOT
35625: PUSH
35626: LD_VAR 0 3
35630: NOT
35631: OR
35632: IFFALSE 35636
// exit ;
35634: GO 37286
// if not range then
35636: LD_VAR 0 4
35640: NOT
35641: IFFALSE 35651
// range := 10 ;
35643: LD_ADDR_VAR 0 4
35647: PUSH
35648: LD_INT 10
35650: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35651: LD_ADDR_VAR 0 8
35655: PUSH
35656: LD_INT 81
35658: PUSH
35659: LD_VAR 0 1
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 92
35670: PUSH
35671: LD_VAR 0 2
35675: PUSH
35676: LD_VAR 0 3
35680: PUSH
35681: LD_VAR 0 4
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: PUSH
35692: LD_INT 3
35694: PUSH
35695: LD_INT 21
35697: PUSH
35698: LD_INT 3
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: LIST
35713: PPUSH
35714: CALL_OW 69
35718: ST_TO_ADDR
// if not tmp then
35719: LD_VAR 0 8
35723: NOT
35724: IFFALSE 35728
// exit ;
35726: GO 37286
// for i in tmp do
35728: LD_ADDR_VAR 0 6
35732: PUSH
35733: LD_VAR 0 8
35737: PUSH
35738: FOR_IN
35739: IFFALSE 37261
// begin points := [ 0 , 0 , 0 ] ;
35741: LD_ADDR_VAR 0 9
35745: PUSH
35746: LD_INT 0
35748: PUSH
35749: LD_INT 0
35751: PUSH
35752: LD_INT 0
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: LIST
35759: ST_TO_ADDR
// bpoints := 1 ;
35760: LD_ADDR_VAR 0 10
35764: PUSH
35765: LD_INT 1
35767: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35768: LD_VAR 0 6
35772: PPUSH
35773: CALL_OW 247
35777: PUSH
35778: LD_INT 1
35780: DOUBLE
35781: EQUAL
35782: IFTRUE 35786
35784: GO 36364
35786: POP
// begin if GetClass ( i ) = 1 then
35787: LD_VAR 0 6
35791: PPUSH
35792: CALL_OW 257
35796: PUSH
35797: LD_INT 1
35799: EQUAL
35800: IFFALSE 35821
// points := [ 10 , 5 , 3 ] ;
35802: LD_ADDR_VAR 0 9
35806: PUSH
35807: LD_INT 10
35809: PUSH
35810: LD_INT 5
35812: PUSH
35813: LD_INT 3
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: LIST
35820: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35821: LD_VAR 0 6
35825: PPUSH
35826: CALL_OW 257
35830: PUSH
35831: LD_INT 2
35833: PUSH
35834: LD_INT 3
35836: PUSH
35837: LD_INT 4
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: LIST
35844: IN
35845: IFFALSE 35866
// points := [ 3 , 2 , 1 ] ;
35847: LD_ADDR_VAR 0 9
35851: PUSH
35852: LD_INT 3
35854: PUSH
35855: LD_INT 2
35857: PUSH
35858: LD_INT 1
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: LIST
35865: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35866: LD_VAR 0 6
35870: PPUSH
35871: CALL_OW 257
35875: PUSH
35876: LD_INT 5
35878: EQUAL
35879: IFFALSE 35900
// points := [ 130 , 5 , 2 ] ;
35881: LD_ADDR_VAR 0 9
35885: PUSH
35886: LD_INT 130
35888: PUSH
35889: LD_INT 5
35891: PUSH
35892: LD_INT 2
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: LIST
35899: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35900: LD_VAR 0 6
35904: PPUSH
35905: CALL_OW 257
35909: PUSH
35910: LD_INT 8
35912: EQUAL
35913: IFFALSE 35934
// points := [ 35 , 35 , 30 ] ;
35915: LD_ADDR_VAR 0 9
35919: PUSH
35920: LD_INT 35
35922: PUSH
35923: LD_INT 35
35925: PUSH
35926: LD_INT 30
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: LIST
35933: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35934: LD_VAR 0 6
35938: PPUSH
35939: CALL_OW 257
35943: PUSH
35944: LD_INT 9
35946: EQUAL
35947: IFFALSE 35968
// points := [ 20 , 55 , 40 ] ;
35949: LD_ADDR_VAR 0 9
35953: PUSH
35954: LD_INT 20
35956: PUSH
35957: LD_INT 55
35959: PUSH
35960: LD_INT 40
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: LIST
35967: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35968: LD_VAR 0 6
35972: PPUSH
35973: CALL_OW 257
35977: PUSH
35978: LD_INT 12
35980: PUSH
35981: LD_INT 16
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: IN
35988: IFFALSE 36009
// points := [ 5 , 3 , 2 ] ;
35990: LD_ADDR_VAR 0 9
35994: PUSH
35995: LD_INT 5
35997: PUSH
35998: LD_INT 3
36000: PUSH
36001: LD_INT 2
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: LIST
36008: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36009: LD_VAR 0 6
36013: PPUSH
36014: CALL_OW 257
36018: PUSH
36019: LD_INT 17
36021: EQUAL
36022: IFFALSE 36043
// points := [ 100 , 50 , 75 ] ;
36024: LD_ADDR_VAR 0 9
36028: PUSH
36029: LD_INT 100
36031: PUSH
36032: LD_INT 50
36034: PUSH
36035: LD_INT 75
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: LIST
36042: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36043: LD_VAR 0 6
36047: PPUSH
36048: CALL_OW 257
36052: PUSH
36053: LD_INT 15
36055: EQUAL
36056: IFFALSE 36077
// points := [ 10 , 5 , 3 ] ;
36058: LD_ADDR_VAR 0 9
36062: PUSH
36063: LD_INT 10
36065: PUSH
36066: LD_INT 5
36068: PUSH
36069: LD_INT 3
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: LIST
36076: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36077: LD_VAR 0 6
36081: PPUSH
36082: CALL_OW 257
36086: PUSH
36087: LD_INT 14
36089: EQUAL
36090: IFFALSE 36111
// points := [ 10 , 0 , 0 ] ;
36092: LD_ADDR_VAR 0 9
36096: PUSH
36097: LD_INT 10
36099: PUSH
36100: LD_INT 0
36102: PUSH
36103: LD_INT 0
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: LIST
36110: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36111: LD_VAR 0 6
36115: PPUSH
36116: CALL_OW 257
36120: PUSH
36121: LD_INT 11
36123: EQUAL
36124: IFFALSE 36145
// points := [ 30 , 10 , 5 ] ;
36126: LD_ADDR_VAR 0 9
36130: PUSH
36131: LD_INT 30
36133: PUSH
36134: LD_INT 10
36136: PUSH
36137: LD_INT 5
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: LIST
36144: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36145: LD_VAR 0 1
36149: PPUSH
36150: LD_INT 5
36152: PPUSH
36153: CALL_OW 321
36157: PUSH
36158: LD_INT 2
36160: EQUAL
36161: IFFALSE 36178
// bpoints := bpoints * 1.8 ;
36163: LD_ADDR_VAR 0 10
36167: PUSH
36168: LD_VAR 0 10
36172: PUSH
36173: LD_REAL  1.80000000000000E+0000
36176: MUL
36177: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36178: LD_VAR 0 6
36182: PPUSH
36183: CALL_OW 257
36187: PUSH
36188: LD_INT 1
36190: PUSH
36191: LD_INT 2
36193: PUSH
36194: LD_INT 3
36196: PUSH
36197: LD_INT 4
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: IN
36206: PUSH
36207: LD_VAR 0 1
36211: PPUSH
36212: LD_INT 51
36214: PPUSH
36215: CALL_OW 321
36219: PUSH
36220: LD_INT 2
36222: EQUAL
36223: AND
36224: IFFALSE 36241
// bpoints := bpoints * 1.2 ;
36226: LD_ADDR_VAR 0 10
36230: PUSH
36231: LD_VAR 0 10
36235: PUSH
36236: LD_REAL  1.20000000000000E+0000
36239: MUL
36240: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36241: LD_VAR 0 6
36245: PPUSH
36246: CALL_OW 257
36250: PUSH
36251: LD_INT 5
36253: PUSH
36254: LD_INT 7
36256: PUSH
36257: LD_INT 9
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: LIST
36264: IN
36265: PUSH
36266: LD_VAR 0 1
36270: PPUSH
36271: LD_INT 52
36273: PPUSH
36274: CALL_OW 321
36278: PUSH
36279: LD_INT 2
36281: EQUAL
36282: AND
36283: IFFALSE 36300
// bpoints := bpoints * 1.5 ;
36285: LD_ADDR_VAR 0 10
36289: PUSH
36290: LD_VAR 0 10
36294: PUSH
36295: LD_REAL  1.50000000000000E+0000
36298: MUL
36299: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36300: LD_VAR 0 1
36304: PPUSH
36305: LD_INT 66
36307: PPUSH
36308: CALL_OW 321
36312: PUSH
36313: LD_INT 2
36315: EQUAL
36316: IFFALSE 36333
// bpoints := bpoints * 1.1 ;
36318: LD_ADDR_VAR 0 10
36322: PUSH
36323: LD_VAR 0 10
36327: PUSH
36328: LD_REAL  1.10000000000000E+0000
36331: MUL
36332: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36333: LD_ADDR_VAR 0 10
36337: PUSH
36338: LD_VAR 0 10
36342: PUSH
36343: LD_VAR 0 6
36347: PPUSH
36348: LD_INT 1
36350: PPUSH
36351: CALL_OW 259
36355: PUSH
36356: LD_REAL  1.15000000000000E+0000
36359: MUL
36360: MUL
36361: ST_TO_ADDR
// end ; unit_vehicle :
36362: GO 37190
36364: LD_INT 2
36366: DOUBLE
36367: EQUAL
36368: IFTRUE 36372
36370: GO 37178
36372: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36373: LD_VAR 0 6
36377: PPUSH
36378: CALL_OW 264
36382: PUSH
36383: LD_INT 2
36385: PUSH
36386: LD_INT 42
36388: PUSH
36389: LD_INT 24
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: LIST
36396: IN
36397: IFFALSE 36418
// points := [ 25 , 5 , 3 ] ;
36399: LD_ADDR_VAR 0 9
36403: PUSH
36404: LD_INT 25
36406: PUSH
36407: LD_INT 5
36409: PUSH
36410: LD_INT 3
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: LIST
36417: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36418: LD_VAR 0 6
36422: PPUSH
36423: CALL_OW 264
36427: PUSH
36428: LD_INT 4
36430: PUSH
36431: LD_INT 43
36433: PUSH
36434: LD_INT 25
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: LIST
36441: IN
36442: IFFALSE 36463
// points := [ 40 , 15 , 5 ] ;
36444: LD_ADDR_VAR 0 9
36448: PUSH
36449: LD_INT 40
36451: PUSH
36452: LD_INT 15
36454: PUSH
36455: LD_INT 5
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: LIST
36462: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36463: LD_VAR 0 6
36467: PPUSH
36468: CALL_OW 264
36472: PUSH
36473: LD_INT 3
36475: PUSH
36476: LD_INT 23
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: IN
36483: IFFALSE 36504
// points := [ 7 , 25 , 8 ] ;
36485: LD_ADDR_VAR 0 9
36489: PUSH
36490: LD_INT 7
36492: PUSH
36493: LD_INT 25
36495: PUSH
36496: LD_INT 8
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: LIST
36503: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36504: LD_VAR 0 6
36508: PPUSH
36509: CALL_OW 264
36513: PUSH
36514: LD_INT 5
36516: PUSH
36517: LD_INT 27
36519: PUSH
36520: LD_INT 44
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: LIST
36527: IN
36528: IFFALSE 36549
// points := [ 14 , 50 , 16 ] ;
36530: LD_ADDR_VAR 0 9
36534: PUSH
36535: LD_INT 14
36537: PUSH
36538: LD_INT 50
36540: PUSH
36541: LD_INT 16
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: LIST
36548: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36549: LD_VAR 0 6
36553: PPUSH
36554: CALL_OW 264
36558: PUSH
36559: LD_INT 6
36561: PUSH
36562: LD_INT 46
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: IN
36569: IFFALSE 36590
// points := [ 32 , 120 , 70 ] ;
36571: LD_ADDR_VAR 0 9
36575: PUSH
36576: LD_INT 32
36578: PUSH
36579: LD_INT 120
36581: PUSH
36582: LD_INT 70
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: LIST
36589: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36590: LD_VAR 0 6
36594: PPUSH
36595: CALL_OW 264
36599: PUSH
36600: LD_INT 7
36602: PUSH
36603: LD_INT 28
36605: PUSH
36606: LD_INT 45
36608: PUSH
36609: LD_INT 92
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: LIST
36616: LIST
36617: IN
36618: IFFALSE 36639
// points := [ 35 , 20 , 45 ] ;
36620: LD_ADDR_VAR 0 9
36624: PUSH
36625: LD_INT 35
36627: PUSH
36628: LD_INT 20
36630: PUSH
36631: LD_INT 45
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: LIST
36638: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36639: LD_VAR 0 6
36643: PPUSH
36644: CALL_OW 264
36648: PUSH
36649: LD_INT 47
36651: PUSH
36652: EMPTY
36653: LIST
36654: IN
36655: IFFALSE 36676
// points := [ 67 , 45 , 75 ] ;
36657: LD_ADDR_VAR 0 9
36661: PUSH
36662: LD_INT 67
36664: PUSH
36665: LD_INT 45
36667: PUSH
36668: LD_INT 75
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: LIST
36675: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36676: LD_VAR 0 6
36680: PPUSH
36681: CALL_OW 264
36685: PUSH
36686: LD_INT 26
36688: PUSH
36689: EMPTY
36690: LIST
36691: IN
36692: IFFALSE 36713
// points := [ 120 , 30 , 80 ] ;
36694: LD_ADDR_VAR 0 9
36698: PUSH
36699: LD_INT 120
36701: PUSH
36702: LD_INT 30
36704: PUSH
36705: LD_INT 80
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: LIST
36712: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36713: LD_VAR 0 6
36717: PPUSH
36718: CALL_OW 264
36722: PUSH
36723: LD_INT 22
36725: PUSH
36726: EMPTY
36727: LIST
36728: IN
36729: IFFALSE 36750
// points := [ 40 , 1 , 1 ] ;
36731: LD_ADDR_VAR 0 9
36735: PUSH
36736: LD_INT 40
36738: PUSH
36739: LD_INT 1
36741: PUSH
36742: LD_INT 1
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: LIST
36749: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36750: LD_VAR 0 6
36754: PPUSH
36755: CALL_OW 264
36759: PUSH
36760: LD_INT 29
36762: PUSH
36763: EMPTY
36764: LIST
36765: IN
36766: IFFALSE 36787
// points := [ 70 , 200 , 400 ] ;
36768: LD_ADDR_VAR 0 9
36772: PUSH
36773: LD_INT 70
36775: PUSH
36776: LD_INT 200
36778: PUSH
36779: LD_INT 400
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: LIST
36786: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36787: LD_VAR 0 6
36791: PPUSH
36792: CALL_OW 264
36796: PUSH
36797: LD_INT 14
36799: PUSH
36800: LD_INT 53
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: IN
36807: IFFALSE 36828
// points := [ 40 , 10 , 20 ] ;
36809: LD_ADDR_VAR 0 9
36813: PUSH
36814: LD_INT 40
36816: PUSH
36817: LD_INT 10
36819: PUSH
36820: LD_INT 20
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: LIST
36827: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36828: LD_VAR 0 6
36832: PPUSH
36833: CALL_OW 264
36837: PUSH
36838: LD_INT 9
36840: PUSH
36841: EMPTY
36842: LIST
36843: IN
36844: IFFALSE 36865
// points := [ 5 , 70 , 20 ] ;
36846: LD_ADDR_VAR 0 9
36850: PUSH
36851: LD_INT 5
36853: PUSH
36854: LD_INT 70
36856: PUSH
36857: LD_INT 20
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: LIST
36864: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36865: LD_VAR 0 6
36869: PPUSH
36870: CALL_OW 264
36874: PUSH
36875: LD_INT 10
36877: PUSH
36878: EMPTY
36879: LIST
36880: IN
36881: IFFALSE 36902
// points := [ 35 , 110 , 70 ] ;
36883: LD_ADDR_VAR 0 9
36887: PUSH
36888: LD_INT 35
36890: PUSH
36891: LD_INT 110
36893: PUSH
36894: LD_INT 70
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: LIST
36901: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36902: LD_VAR 0 6
36906: PPUSH
36907: CALL_OW 265
36911: PUSH
36912: LD_INT 25
36914: EQUAL
36915: IFFALSE 36936
// points := [ 80 , 65 , 100 ] ;
36917: LD_ADDR_VAR 0 9
36921: PUSH
36922: LD_INT 80
36924: PUSH
36925: LD_INT 65
36927: PUSH
36928: LD_INT 100
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: LIST
36935: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36936: LD_VAR 0 6
36940: PPUSH
36941: CALL_OW 263
36945: PUSH
36946: LD_INT 1
36948: EQUAL
36949: IFFALSE 36984
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36951: LD_ADDR_VAR 0 10
36955: PUSH
36956: LD_VAR 0 10
36960: PUSH
36961: LD_VAR 0 6
36965: PPUSH
36966: CALL_OW 311
36970: PPUSH
36971: LD_INT 3
36973: PPUSH
36974: CALL_OW 259
36978: PUSH
36979: LD_INT 4
36981: MUL
36982: MUL
36983: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36984: LD_VAR 0 6
36988: PPUSH
36989: CALL_OW 263
36993: PUSH
36994: LD_INT 2
36996: EQUAL
36997: IFFALSE 37048
// begin j := IsControledBy ( i ) ;
36999: LD_ADDR_VAR 0 7
37003: PUSH
37004: LD_VAR 0 6
37008: PPUSH
37009: CALL_OW 312
37013: ST_TO_ADDR
// if j then
37014: LD_VAR 0 7
37018: IFFALSE 37048
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37020: LD_ADDR_VAR 0 10
37024: PUSH
37025: LD_VAR 0 10
37029: PUSH
37030: LD_VAR 0 7
37034: PPUSH
37035: LD_INT 3
37037: PPUSH
37038: CALL_OW 259
37042: PUSH
37043: LD_INT 3
37045: MUL
37046: MUL
37047: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37048: LD_VAR 0 6
37052: PPUSH
37053: CALL_OW 264
37057: PUSH
37058: LD_INT 5
37060: PUSH
37061: LD_INT 6
37063: PUSH
37064: LD_INT 46
37066: PUSH
37067: LD_INT 44
37069: PUSH
37070: LD_INT 47
37072: PUSH
37073: LD_INT 45
37075: PUSH
37076: LD_INT 28
37078: PUSH
37079: LD_INT 7
37081: PUSH
37082: LD_INT 27
37084: PUSH
37085: LD_INT 29
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: IN
37100: PUSH
37101: LD_VAR 0 1
37105: PPUSH
37106: LD_INT 52
37108: PPUSH
37109: CALL_OW 321
37113: PUSH
37114: LD_INT 2
37116: EQUAL
37117: AND
37118: IFFALSE 37135
// bpoints := bpoints * 1.2 ;
37120: LD_ADDR_VAR 0 10
37124: PUSH
37125: LD_VAR 0 10
37129: PUSH
37130: LD_REAL  1.20000000000000E+0000
37133: MUL
37134: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37135: LD_VAR 0 6
37139: PPUSH
37140: CALL_OW 264
37144: PUSH
37145: LD_INT 6
37147: PUSH
37148: LD_INT 46
37150: PUSH
37151: LD_INT 47
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: LIST
37158: IN
37159: IFFALSE 37176
// bpoints := bpoints * 1.2 ;
37161: LD_ADDR_VAR 0 10
37165: PUSH
37166: LD_VAR 0 10
37170: PUSH
37171: LD_REAL  1.20000000000000E+0000
37174: MUL
37175: ST_TO_ADDR
// end ; unit_building :
37176: GO 37190
37178: LD_INT 3
37180: DOUBLE
37181: EQUAL
37182: IFTRUE 37186
37184: GO 37189
37186: POP
// ; end ;
37187: GO 37190
37189: POP
// for j = 1 to 3 do
37190: LD_ADDR_VAR 0 7
37194: PUSH
37195: DOUBLE
37196: LD_INT 1
37198: DEC
37199: ST_TO_ADDR
37200: LD_INT 3
37202: PUSH
37203: FOR_TO
37204: IFFALSE 37257
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37206: LD_ADDR_VAR 0 5
37210: PUSH
37211: LD_VAR 0 5
37215: PPUSH
37216: LD_VAR 0 7
37220: PPUSH
37221: LD_VAR 0 5
37225: PUSH
37226: LD_VAR 0 7
37230: ARRAY
37231: PUSH
37232: LD_VAR 0 9
37236: PUSH
37237: LD_VAR 0 7
37241: ARRAY
37242: PUSH
37243: LD_VAR 0 10
37247: MUL
37248: PLUS
37249: PPUSH
37250: CALL_OW 1
37254: ST_TO_ADDR
37255: GO 37203
37257: POP
37258: POP
// end ;
37259: GO 35738
37261: POP
37262: POP
// result := Replace ( result , 4 , tmp ) ;
37263: LD_ADDR_VAR 0 5
37267: PUSH
37268: LD_VAR 0 5
37272: PPUSH
37273: LD_INT 4
37275: PPUSH
37276: LD_VAR 0 8
37280: PPUSH
37281: CALL_OW 1
37285: ST_TO_ADDR
// end ;
37286: LD_VAR 0 5
37290: RET
// export function DangerAtRange ( unit , range ) ; begin
37291: LD_INT 0
37293: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37294: LD_ADDR_VAR 0 3
37298: PUSH
37299: LD_VAR 0 1
37303: PPUSH
37304: CALL_OW 255
37308: PPUSH
37309: LD_VAR 0 1
37313: PPUSH
37314: CALL_OW 250
37318: PPUSH
37319: LD_VAR 0 1
37323: PPUSH
37324: CALL_OW 251
37328: PPUSH
37329: LD_VAR 0 2
37333: PPUSH
37334: CALL 35590 0 4
37338: ST_TO_ADDR
// end ;
37339: LD_VAR 0 3
37343: RET
// export function DangerInArea ( side , area ) ; begin
37344: LD_INT 0
37346: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37347: LD_ADDR_VAR 0 3
37351: PUSH
37352: LD_VAR 0 2
37356: PPUSH
37357: LD_INT 81
37359: PUSH
37360: LD_VAR 0 1
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: PPUSH
37369: CALL_OW 70
37373: ST_TO_ADDR
// end ;
37374: LD_VAR 0 3
37378: RET
// export function IsExtension ( b ) ; begin
37379: LD_INT 0
37381: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37382: LD_ADDR_VAR 0 2
37386: PUSH
37387: LD_VAR 0 1
37391: PUSH
37392: LD_INT 23
37394: PUSH
37395: LD_INT 20
37397: PUSH
37398: LD_INT 22
37400: PUSH
37401: LD_INT 17
37403: PUSH
37404: LD_INT 24
37406: PUSH
37407: LD_INT 21
37409: PUSH
37410: LD_INT 19
37412: PUSH
37413: LD_INT 16
37415: PUSH
37416: LD_INT 25
37418: PUSH
37419: LD_INT 18
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: LIST
37426: LIST
37427: LIST
37428: LIST
37429: LIST
37430: LIST
37431: LIST
37432: LIST
37433: IN
37434: ST_TO_ADDR
// end ;
37435: LD_VAR 0 2
37439: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37440: LD_INT 0
37442: PPUSH
37443: PPUSH
37444: PPUSH
// result := [ ] ;
37445: LD_ADDR_VAR 0 4
37449: PUSH
37450: EMPTY
37451: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37452: LD_ADDR_VAR 0 5
37456: PUSH
37457: LD_VAR 0 2
37461: PPUSH
37462: LD_INT 21
37464: PUSH
37465: LD_INT 3
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PPUSH
37472: CALL_OW 70
37476: ST_TO_ADDR
// if not tmp then
37477: LD_VAR 0 5
37481: NOT
37482: IFFALSE 37486
// exit ;
37484: GO 37550
// if checkLink then
37486: LD_VAR 0 3
37490: IFFALSE 37540
// begin for i in tmp do
37492: LD_ADDR_VAR 0 6
37496: PUSH
37497: LD_VAR 0 5
37501: PUSH
37502: FOR_IN
37503: IFFALSE 37538
// if GetBase ( i ) <> base then
37505: LD_VAR 0 6
37509: PPUSH
37510: CALL_OW 274
37514: PUSH
37515: LD_VAR 0 1
37519: NONEQUAL
37520: IFFALSE 37536
// ComLinkToBase ( base , i ) ;
37522: LD_VAR 0 1
37526: PPUSH
37527: LD_VAR 0 6
37531: PPUSH
37532: CALL_OW 169
37536: GO 37502
37538: POP
37539: POP
// end ; result := tmp ;
37540: LD_ADDR_VAR 0 4
37544: PUSH
37545: LD_VAR 0 5
37549: ST_TO_ADDR
// end ;
37550: LD_VAR 0 4
37554: RET
// export function ComComplete ( units , b ) ; var i ; begin
37555: LD_INT 0
37557: PPUSH
37558: PPUSH
// if not units then
37559: LD_VAR 0 1
37563: NOT
37564: IFFALSE 37568
// exit ;
37566: GO 37658
// for i in units do
37568: LD_ADDR_VAR 0 4
37572: PUSH
37573: LD_VAR 0 1
37577: PUSH
37578: FOR_IN
37579: IFFALSE 37656
// if BuildingStatus ( b ) = bs_build then
37581: LD_VAR 0 2
37585: PPUSH
37586: CALL_OW 461
37590: PUSH
37591: LD_INT 1
37593: EQUAL
37594: IFFALSE 37654
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37596: LD_VAR 0 4
37600: PPUSH
37601: LD_STRING h
37603: PUSH
37604: LD_VAR 0 2
37608: PPUSH
37609: CALL_OW 250
37613: PUSH
37614: LD_VAR 0 2
37618: PPUSH
37619: CALL_OW 251
37623: PUSH
37624: LD_VAR 0 2
37628: PUSH
37629: LD_INT 0
37631: PUSH
37632: LD_INT 0
37634: PUSH
37635: LD_INT 0
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: PUSH
37647: EMPTY
37648: LIST
37649: PPUSH
37650: CALL_OW 446
37654: GO 37578
37656: POP
37657: POP
// end ;
37658: LD_VAR 0 3
37662: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37663: LD_INT 0
37665: PPUSH
37666: PPUSH
37667: PPUSH
37668: PPUSH
37669: PPUSH
37670: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37671: LD_VAR 0 1
37675: NOT
37676: PUSH
37677: LD_VAR 0 1
37681: PPUSH
37682: CALL_OW 263
37686: PUSH
37687: LD_INT 2
37689: NONEQUAL
37690: OR
37691: IFFALSE 37695
// exit ;
37693: GO 38011
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37695: LD_ADDR_VAR 0 6
37699: PUSH
37700: LD_INT 22
37702: PUSH
37703: LD_VAR 0 1
37707: PPUSH
37708: CALL_OW 255
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 2
37719: PUSH
37720: LD_INT 30
37722: PUSH
37723: LD_INT 36
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 34
37732: PUSH
37733: LD_INT 31
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: LIST
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PPUSH
37749: CALL_OW 69
37753: ST_TO_ADDR
// if not tmp then
37754: LD_VAR 0 6
37758: NOT
37759: IFFALSE 37763
// exit ;
37761: GO 38011
// result := [ ] ;
37763: LD_ADDR_VAR 0 2
37767: PUSH
37768: EMPTY
37769: ST_TO_ADDR
// for i in tmp do
37770: LD_ADDR_VAR 0 3
37774: PUSH
37775: LD_VAR 0 6
37779: PUSH
37780: FOR_IN
37781: IFFALSE 37852
// begin t := UnitsInside ( i ) ;
37783: LD_ADDR_VAR 0 4
37787: PUSH
37788: LD_VAR 0 3
37792: PPUSH
37793: CALL_OW 313
37797: ST_TO_ADDR
// if t then
37798: LD_VAR 0 4
37802: IFFALSE 37850
// for j in t do
37804: LD_ADDR_VAR 0 7
37808: PUSH
37809: LD_VAR 0 4
37813: PUSH
37814: FOR_IN
37815: IFFALSE 37848
// result := Replace ( result , result + 1 , j ) ;
37817: LD_ADDR_VAR 0 2
37821: PUSH
37822: LD_VAR 0 2
37826: PPUSH
37827: LD_VAR 0 2
37831: PUSH
37832: LD_INT 1
37834: PLUS
37835: PPUSH
37836: LD_VAR 0 7
37840: PPUSH
37841: CALL_OW 1
37845: ST_TO_ADDR
37846: GO 37814
37848: POP
37849: POP
// end ;
37850: GO 37780
37852: POP
37853: POP
// if not result then
37854: LD_VAR 0 2
37858: NOT
37859: IFFALSE 37863
// exit ;
37861: GO 38011
// mech := result [ 1 ] ;
37863: LD_ADDR_VAR 0 5
37867: PUSH
37868: LD_VAR 0 2
37872: PUSH
37873: LD_INT 1
37875: ARRAY
37876: ST_TO_ADDR
// if result > 1 then
37877: LD_VAR 0 2
37881: PUSH
37882: LD_INT 1
37884: GREATER
37885: IFFALSE 37997
// begin for i = 2 to result do
37887: LD_ADDR_VAR 0 3
37891: PUSH
37892: DOUBLE
37893: LD_INT 2
37895: DEC
37896: ST_TO_ADDR
37897: LD_VAR 0 2
37901: PUSH
37902: FOR_TO
37903: IFFALSE 37995
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37905: LD_ADDR_VAR 0 4
37909: PUSH
37910: LD_VAR 0 2
37914: PUSH
37915: LD_VAR 0 3
37919: ARRAY
37920: PPUSH
37921: LD_INT 3
37923: PPUSH
37924: CALL_OW 259
37928: PUSH
37929: LD_VAR 0 2
37933: PUSH
37934: LD_VAR 0 3
37938: ARRAY
37939: PPUSH
37940: CALL_OW 432
37944: MINUS
37945: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37946: LD_VAR 0 4
37950: PUSH
37951: LD_VAR 0 5
37955: PPUSH
37956: LD_INT 3
37958: PPUSH
37959: CALL_OW 259
37963: PUSH
37964: LD_VAR 0 5
37968: PPUSH
37969: CALL_OW 432
37973: MINUS
37974: GREATEREQUAL
37975: IFFALSE 37993
// mech := result [ i ] ;
37977: LD_ADDR_VAR 0 5
37981: PUSH
37982: LD_VAR 0 2
37986: PUSH
37987: LD_VAR 0 3
37991: ARRAY
37992: ST_TO_ADDR
// end ;
37993: GO 37902
37995: POP
37996: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37997: LD_VAR 0 1
38001: PPUSH
38002: LD_VAR 0 5
38006: PPUSH
38007: CALL_OW 135
// end ;
38011: LD_VAR 0 2
38015: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38016: LD_INT 0
38018: PPUSH
38019: PPUSH
38020: PPUSH
38021: PPUSH
38022: PPUSH
38023: PPUSH
38024: PPUSH
38025: PPUSH
38026: PPUSH
38027: PPUSH
38028: PPUSH
38029: PPUSH
38030: PPUSH
// result := [ ] ;
38031: LD_ADDR_VAR 0 7
38035: PUSH
38036: EMPTY
38037: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38038: LD_VAR 0 1
38042: PPUSH
38043: CALL_OW 266
38047: PUSH
38048: LD_INT 0
38050: PUSH
38051: LD_INT 1
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: IN
38058: NOT
38059: IFFALSE 38063
// exit ;
38061: GO 39697
// if name then
38063: LD_VAR 0 3
38067: IFFALSE 38083
// SetBName ( base_dep , name ) ;
38069: LD_VAR 0 1
38073: PPUSH
38074: LD_VAR 0 3
38078: PPUSH
38079: CALL_OW 500
// base := GetBase ( base_dep ) ;
38083: LD_ADDR_VAR 0 15
38087: PUSH
38088: LD_VAR 0 1
38092: PPUSH
38093: CALL_OW 274
38097: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38098: LD_ADDR_VAR 0 16
38102: PUSH
38103: LD_VAR 0 1
38107: PPUSH
38108: CALL_OW 255
38112: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38113: LD_ADDR_VAR 0 17
38117: PUSH
38118: LD_VAR 0 1
38122: PPUSH
38123: CALL_OW 248
38127: ST_TO_ADDR
// if sources then
38128: LD_VAR 0 5
38132: IFFALSE 38179
// for i = 1 to 3 do
38134: LD_ADDR_VAR 0 8
38138: PUSH
38139: DOUBLE
38140: LD_INT 1
38142: DEC
38143: ST_TO_ADDR
38144: LD_INT 3
38146: PUSH
38147: FOR_TO
38148: IFFALSE 38177
// AddResourceType ( base , i , sources [ i ] ) ;
38150: LD_VAR 0 15
38154: PPUSH
38155: LD_VAR 0 8
38159: PPUSH
38160: LD_VAR 0 5
38164: PUSH
38165: LD_VAR 0 8
38169: ARRAY
38170: PPUSH
38171: CALL_OW 276
38175: GO 38147
38177: POP
38178: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38179: LD_ADDR_VAR 0 18
38183: PUSH
38184: LD_VAR 0 15
38188: PPUSH
38189: LD_VAR 0 2
38193: PPUSH
38194: LD_INT 1
38196: PPUSH
38197: CALL 37440 0 3
38201: ST_TO_ADDR
// InitHc ;
38202: CALL_OW 19
// InitUc ;
38206: CALL_OW 18
// uc_side := side ;
38210: LD_ADDR_OWVAR 20
38214: PUSH
38215: LD_VAR 0 16
38219: ST_TO_ADDR
// uc_nation := nation ;
38220: LD_ADDR_OWVAR 21
38224: PUSH
38225: LD_VAR 0 17
38229: ST_TO_ADDR
// if buildings then
38230: LD_VAR 0 18
38234: IFFALSE 39556
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38236: LD_ADDR_VAR 0 19
38240: PUSH
38241: LD_VAR 0 18
38245: PPUSH
38246: LD_INT 2
38248: PUSH
38249: LD_INT 30
38251: PUSH
38252: LD_INT 29
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PUSH
38259: LD_INT 30
38261: PUSH
38262: LD_INT 30
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: LIST
38273: PPUSH
38274: CALL_OW 72
38278: ST_TO_ADDR
// if tmp then
38279: LD_VAR 0 19
38283: IFFALSE 38331
// for i in tmp do
38285: LD_ADDR_VAR 0 8
38289: PUSH
38290: LD_VAR 0 19
38294: PUSH
38295: FOR_IN
38296: IFFALSE 38329
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38298: LD_VAR 0 8
38302: PPUSH
38303: CALL_OW 250
38307: PPUSH
38308: LD_VAR 0 8
38312: PPUSH
38313: CALL_OW 251
38317: PPUSH
38318: LD_VAR 0 16
38322: PPUSH
38323: CALL_OW 441
38327: GO 38295
38329: POP
38330: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38331: LD_VAR 0 18
38335: PPUSH
38336: LD_INT 2
38338: PUSH
38339: LD_INT 30
38341: PUSH
38342: LD_INT 32
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 30
38351: PUSH
38352: LD_INT 33
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: LIST
38363: PPUSH
38364: CALL_OW 72
38368: IFFALSE 38456
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38370: LD_ADDR_VAR 0 8
38374: PUSH
38375: LD_VAR 0 18
38379: PPUSH
38380: LD_INT 2
38382: PUSH
38383: LD_INT 30
38385: PUSH
38386: LD_INT 32
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 30
38395: PUSH
38396: LD_INT 33
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: LIST
38407: PPUSH
38408: CALL_OW 72
38412: PUSH
38413: FOR_IN
38414: IFFALSE 38454
// begin if not GetBWeapon ( i ) then
38416: LD_VAR 0 8
38420: PPUSH
38421: CALL_OW 269
38425: NOT
38426: IFFALSE 38452
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38428: LD_VAR 0 8
38432: PPUSH
38433: LD_VAR 0 8
38437: PPUSH
38438: LD_VAR 0 2
38442: PPUSH
38443: CALL 39702 0 2
38447: PPUSH
38448: CALL_OW 431
// end ;
38452: GO 38413
38454: POP
38455: POP
// end ; for i = 1 to personel do
38456: LD_ADDR_VAR 0 8
38460: PUSH
38461: DOUBLE
38462: LD_INT 1
38464: DEC
38465: ST_TO_ADDR
38466: LD_VAR 0 6
38470: PUSH
38471: FOR_TO
38472: IFFALSE 39536
// begin if i > 4 then
38474: LD_VAR 0 8
38478: PUSH
38479: LD_INT 4
38481: GREATER
38482: IFFALSE 38486
// break ;
38484: GO 39536
// case i of 1 :
38486: LD_VAR 0 8
38490: PUSH
38491: LD_INT 1
38493: DOUBLE
38494: EQUAL
38495: IFTRUE 38499
38497: GO 38579
38499: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38500: LD_ADDR_VAR 0 12
38504: PUSH
38505: LD_VAR 0 18
38509: PPUSH
38510: LD_INT 22
38512: PUSH
38513: LD_VAR 0 16
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 58
38524: PUSH
38525: EMPTY
38526: LIST
38527: PUSH
38528: LD_INT 2
38530: PUSH
38531: LD_INT 30
38533: PUSH
38534: LD_INT 32
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: LD_INT 30
38543: PUSH
38544: LD_INT 4
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PUSH
38551: LD_INT 30
38553: PUSH
38554: LD_INT 5
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: LIST
38571: PPUSH
38572: CALL_OW 72
38576: ST_TO_ADDR
38577: GO 38801
38579: LD_INT 2
38581: DOUBLE
38582: EQUAL
38583: IFTRUE 38587
38585: GO 38649
38587: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38588: LD_ADDR_VAR 0 12
38592: PUSH
38593: LD_VAR 0 18
38597: PPUSH
38598: LD_INT 22
38600: PUSH
38601: LD_VAR 0 16
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: PUSH
38610: LD_INT 2
38612: PUSH
38613: LD_INT 30
38615: PUSH
38616: LD_INT 0
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 30
38625: PUSH
38626: LD_INT 1
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: LIST
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PPUSH
38642: CALL_OW 72
38646: ST_TO_ADDR
38647: GO 38801
38649: LD_INT 3
38651: DOUBLE
38652: EQUAL
38653: IFTRUE 38657
38655: GO 38719
38657: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38658: LD_ADDR_VAR 0 12
38662: PUSH
38663: LD_VAR 0 18
38667: PPUSH
38668: LD_INT 22
38670: PUSH
38671: LD_VAR 0 16
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 2
38682: PUSH
38683: LD_INT 30
38685: PUSH
38686: LD_INT 2
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 30
38695: PUSH
38696: LD_INT 3
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: LIST
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PPUSH
38712: CALL_OW 72
38716: ST_TO_ADDR
38717: GO 38801
38719: LD_INT 4
38721: DOUBLE
38722: EQUAL
38723: IFTRUE 38727
38725: GO 38800
38727: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38728: LD_ADDR_VAR 0 12
38732: PUSH
38733: LD_VAR 0 18
38737: PPUSH
38738: LD_INT 22
38740: PUSH
38741: LD_VAR 0 16
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 2
38752: PUSH
38753: LD_INT 30
38755: PUSH
38756: LD_INT 6
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: LD_INT 30
38765: PUSH
38766: LD_INT 7
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 30
38775: PUSH
38776: LD_INT 8
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PPUSH
38793: CALL_OW 72
38797: ST_TO_ADDR
38798: GO 38801
38800: POP
// if i = 1 then
38801: LD_VAR 0 8
38805: PUSH
38806: LD_INT 1
38808: EQUAL
38809: IFFALSE 38920
// begin tmp := [ ] ;
38811: LD_ADDR_VAR 0 19
38815: PUSH
38816: EMPTY
38817: ST_TO_ADDR
// for j in f do
38818: LD_ADDR_VAR 0 9
38822: PUSH
38823: LD_VAR 0 12
38827: PUSH
38828: FOR_IN
38829: IFFALSE 38902
// if GetBType ( j ) = b_bunker then
38831: LD_VAR 0 9
38835: PPUSH
38836: CALL_OW 266
38840: PUSH
38841: LD_INT 32
38843: EQUAL
38844: IFFALSE 38871
// tmp := Insert ( tmp , 1 , j ) else
38846: LD_ADDR_VAR 0 19
38850: PUSH
38851: LD_VAR 0 19
38855: PPUSH
38856: LD_INT 1
38858: PPUSH
38859: LD_VAR 0 9
38863: PPUSH
38864: CALL_OW 2
38868: ST_TO_ADDR
38869: GO 38900
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38871: LD_ADDR_VAR 0 19
38875: PUSH
38876: LD_VAR 0 19
38880: PPUSH
38881: LD_VAR 0 19
38885: PUSH
38886: LD_INT 1
38888: PLUS
38889: PPUSH
38890: LD_VAR 0 9
38894: PPUSH
38895: CALL_OW 2
38899: ST_TO_ADDR
38900: GO 38828
38902: POP
38903: POP
// if tmp then
38904: LD_VAR 0 19
38908: IFFALSE 38920
// f := tmp ;
38910: LD_ADDR_VAR 0 12
38914: PUSH
38915: LD_VAR 0 19
38919: ST_TO_ADDR
// end ; x := personel [ i ] ;
38920: LD_ADDR_VAR 0 13
38924: PUSH
38925: LD_VAR 0 6
38929: PUSH
38930: LD_VAR 0 8
38934: ARRAY
38935: ST_TO_ADDR
// if x = - 1 then
38936: LD_VAR 0 13
38940: PUSH
38941: LD_INT 1
38943: NEG
38944: EQUAL
38945: IFFALSE 39154
// begin for j in f do
38947: LD_ADDR_VAR 0 9
38951: PUSH
38952: LD_VAR 0 12
38956: PUSH
38957: FOR_IN
38958: IFFALSE 39150
// repeat InitHc ;
38960: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38964: LD_VAR 0 9
38968: PPUSH
38969: CALL_OW 266
38973: PUSH
38974: LD_INT 5
38976: EQUAL
38977: IFFALSE 39047
// begin if UnitsInside ( j ) < 3 then
38979: LD_VAR 0 9
38983: PPUSH
38984: CALL_OW 313
38988: PUSH
38989: LD_INT 3
38991: LESS
38992: IFFALSE 39028
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38994: LD_INT 0
38996: PPUSH
38997: LD_INT 5
38999: PUSH
39000: LD_INT 8
39002: PUSH
39003: LD_INT 9
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: LIST
39010: PUSH
39011: LD_VAR 0 17
39015: ARRAY
39016: PPUSH
39017: LD_VAR 0 4
39021: PPUSH
39022: CALL_OW 380
39026: GO 39045
// PrepareHuman ( false , i , skill ) ;
39028: LD_INT 0
39030: PPUSH
39031: LD_VAR 0 8
39035: PPUSH
39036: LD_VAR 0 4
39040: PPUSH
39041: CALL_OW 380
// end else
39045: GO 39064
// PrepareHuman ( false , i , skill ) ;
39047: LD_INT 0
39049: PPUSH
39050: LD_VAR 0 8
39054: PPUSH
39055: LD_VAR 0 4
39059: PPUSH
39060: CALL_OW 380
// un := CreateHuman ;
39064: LD_ADDR_VAR 0 14
39068: PUSH
39069: CALL_OW 44
39073: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39074: LD_ADDR_VAR 0 7
39078: PUSH
39079: LD_VAR 0 7
39083: PPUSH
39084: LD_INT 1
39086: PPUSH
39087: LD_VAR 0 14
39091: PPUSH
39092: CALL_OW 2
39096: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39097: LD_VAR 0 14
39101: PPUSH
39102: LD_VAR 0 9
39106: PPUSH
39107: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39111: LD_VAR 0 9
39115: PPUSH
39116: CALL_OW 313
39120: PUSH
39121: LD_INT 6
39123: EQUAL
39124: PUSH
39125: LD_VAR 0 9
39129: PPUSH
39130: CALL_OW 266
39134: PUSH
39135: LD_INT 32
39137: PUSH
39138: LD_INT 31
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: IN
39145: OR
39146: IFFALSE 38960
39148: GO 38957
39150: POP
39151: POP
// end else
39152: GO 39534
// for j = 1 to x do
39154: LD_ADDR_VAR 0 9
39158: PUSH
39159: DOUBLE
39160: LD_INT 1
39162: DEC
39163: ST_TO_ADDR
39164: LD_VAR 0 13
39168: PUSH
39169: FOR_TO
39170: IFFALSE 39532
// begin InitHc ;
39172: CALL_OW 19
// if not f then
39176: LD_VAR 0 12
39180: NOT
39181: IFFALSE 39270
// begin PrepareHuman ( false , i , skill ) ;
39183: LD_INT 0
39185: PPUSH
39186: LD_VAR 0 8
39190: PPUSH
39191: LD_VAR 0 4
39195: PPUSH
39196: CALL_OW 380
// un := CreateHuman ;
39200: LD_ADDR_VAR 0 14
39204: PUSH
39205: CALL_OW 44
39209: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39210: LD_ADDR_VAR 0 7
39214: PUSH
39215: LD_VAR 0 7
39219: PPUSH
39220: LD_INT 1
39222: PPUSH
39223: LD_VAR 0 14
39227: PPUSH
39228: CALL_OW 2
39232: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39233: LD_VAR 0 14
39237: PPUSH
39238: LD_VAR 0 1
39242: PPUSH
39243: CALL_OW 250
39247: PPUSH
39248: LD_VAR 0 1
39252: PPUSH
39253: CALL_OW 251
39257: PPUSH
39258: LD_INT 10
39260: PPUSH
39261: LD_INT 0
39263: PPUSH
39264: CALL_OW 50
// continue ;
39268: GO 39169
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39270: LD_VAR 0 12
39274: PUSH
39275: LD_INT 1
39277: ARRAY
39278: PPUSH
39279: CALL_OW 313
39283: PUSH
39284: LD_VAR 0 12
39288: PUSH
39289: LD_INT 1
39291: ARRAY
39292: PPUSH
39293: CALL_OW 266
39297: PUSH
39298: LD_INT 32
39300: PUSH
39301: LD_INT 31
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: IN
39308: AND
39309: PUSH
39310: LD_VAR 0 12
39314: PUSH
39315: LD_INT 1
39317: ARRAY
39318: PPUSH
39319: CALL_OW 313
39323: PUSH
39324: LD_INT 6
39326: EQUAL
39327: OR
39328: IFFALSE 39348
// f := Delete ( f , 1 ) ;
39330: LD_ADDR_VAR 0 12
39334: PUSH
39335: LD_VAR 0 12
39339: PPUSH
39340: LD_INT 1
39342: PPUSH
39343: CALL_OW 3
39347: ST_TO_ADDR
// if not f then
39348: LD_VAR 0 12
39352: NOT
39353: IFFALSE 39371
// begin x := x + 2 ;
39355: LD_ADDR_VAR 0 13
39359: PUSH
39360: LD_VAR 0 13
39364: PUSH
39365: LD_INT 2
39367: PLUS
39368: ST_TO_ADDR
// continue ;
39369: GO 39169
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39371: LD_VAR 0 12
39375: PUSH
39376: LD_INT 1
39378: ARRAY
39379: PPUSH
39380: CALL_OW 266
39384: PUSH
39385: LD_INT 5
39387: EQUAL
39388: IFFALSE 39462
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39390: LD_VAR 0 12
39394: PUSH
39395: LD_INT 1
39397: ARRAY
39398: PPUSH
39399: CALL_OW 313
39403: PUSH
39404: LD_INT 3
39406: LESS
39407: IFFALSE 39443
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39409: LD_INT 0
39411: PPUSH
39412: LD_INT 5
39414: PUSH
39415: LD_INT 8
39417: PUSH
39418: LD_INT 9
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: LIST
39425: PUSH
39426: LD_VAR 0 17
39430: ARRAY
39431: PPUSH
39432: LD_VAR 0 4
39436: PPUSH
39437: CALL_OW 380
39441: GO 39460
// PrepareHuman ( false , i , skill ) ;
39443: LD_INT 0
39445: PPUSH
39446: LD_VAR 0 8
39450: PPUSH
39451: LD_VAR 0 4
39455: PPUSH
39456: CALL_OW 380
// end else
39460: GO 39479
// PrepareHuman ( false , i , skill ) ;
39462: LD_INT 0
39464: PPUSH
39465: LD_VAR 0 8
39469: PPUSH
39470: LD_VAR 0 4
39474: PPUSH
39475: CALL_OW 380
// un := CreateHuman ;
39479: LD_ADDR_VAR 0 14
39483: PUSH
39484: CALL_OW 44
39488: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39489: LD_ADDR_VAR 0 7
39493: PUSH
39494: LD_VAR 0 7
39498: PPUSH
39499: LD_INT 1
39501: PPUSH
39502: LD_VAR 0 14
39506: PPUSH
39507: CALL_OW 2
39511: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39512: LD_VAR 0 14
39516: PPUSH
39517: LD_VAR 0 12
39521: PUSH
39522: LD_INT 1
39524: ARRAY
39525: PPUSH
39526: CALL_OW 52
// end ;
39530: GO 39169
39532: POP
39533: POP
// end ;
39534: GO 38471
39536: POP
39537: POP
// result := result ^ buildings ;
39538: LD_ADDR_VAR 0 7
39542: PUSH
39543: LD_VAR 0 7
39547: PUSH
39548: LD_VAR 0 18
39552: ADD
39553: ST_TO_ADDR
// end else
39554: GO 39697
// begin for i = 1 to personel do
39556: LD_ADDR_VAR 0 8
39560: PUSH
39561: DOUBLE
39562: LD_INT 1
39564: DEC
39565: ST_TO_ADDR
39566: LD_VAR 0 6
39570: PUSH
39571: FOR_TO
39572: IFFALSE 39695
// begin if i > 4 then
39574: LD_VAR 0 8
39578: PUSH
39579: LD_INT 4
39581: GREATER
39582: IFFALSE 39586
// break ;
39584: GO 39695
// x := personel [ i ] ;
39586: LD_ADDR_VAR 0 13
39590: PUSH
39591: LD_VAR 0 6
39595: PUSH
39596: LD_VAR 0 8
39600: ARRAY
39601: ST_TO_ADDR
// if x = - 1 then
39602: LD_VAR 0 13
39606: PUSH
39607: LD_INT 1
39609: NEG
39610: EQUAL
39611: IFFALSE 39615
// continue ;
39613: GO 39571
// PrepareHuman ( false , i , skill ) ;
39615: LD_INT 0
39617: PPUSH
39618: LD_VAR 0 8
39622: PPUSH
39623: LD_VAR 0 4
39627: PPUSH
39628: CALL_OW 380
// un := CreateHuman ;
39632: LD_ADDR_VAR 0 14
39636: PUSH
39637: CALL_OW 44
39641: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39642: LD_VAR 0 14
39646: PPUSH
39647: LD_VAR 0 1
39651: PPUSH
39652: CALL_OW 250
39656: PPUSH
39657: LD_VAR 0 1
39661: PPUSH
39662: CALL_OW 251
39666: PPUSH
39667: LD_INT 10
39669: PPUSH
39670: LD_INT 0
39672: PPUSH
39673: CALL_OW 50
// result := result ^ un ;
39677: LD_ADDR_VAR 0 7
39681: PUSH
39682: LD_VAR 0 7
39686: PUSH
39687: LD_VAR 0 14
39691: ADD
39692: ST_TO_ADDR
// end ;
39693: GO 39571
39695: POP
39696: POP
// end ; end ;
39697: LD_VAR 0 7
39701: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39702: LD_INT 0
39704: PPUSH
39705: PPUSH
39706: PPUSH
39707: PPUSH
39708: PPUSH
39709: PPUSH
39710: PPUSH
39711: PPUSH
39712: PPUSH
39713: PPUSH
39714: PPUSH
39715: PPUSH
39716: PPUSH
39717: PPUSH
39718: PPUSH
39719: PPUSH
// result := false ;
39720: LD_ADDR_VAR 0 3
39724: PUSH
39725: LD_INT 0
39727: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39728: LD_VAR 0 1
39732: NOT
39733: PUSH
39734: LD_VAR 0 1
39738: PPUSH
39739: CALL_OW 266
39743: PUSH
39744: LD_INT 32
39746: PUSH
39747: LD_INT 33
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: IN
39754: NOT
39755: OR
39756: IFFALSE 39760
// exit ;
39758: GO 40869
// nat := GetNation ( tower ) ;
39760: LD_ADDR_VAR 0 12
39764: PUSH
39765: LD_VAR 0 1
39769: PPUSH
39770: CALL_OW 248
39774: ST_TO_ADDR
// side := GetSide ( tower ) ;
39775: LD_ADDR_VAR 0 16
39779: PUSH
39780: LD_VAR 0 1
39784: PPUSH
39785: CALL_OW 255
39789: ST_TO_ADDR
// x := GetX ( tower ) ;
39790: LD_ADDR_VAR 0 10
39794: PUSH
39795: LD_VAR 0 1
39799: PPUSH
39800: CALL_OW 250
39804: ST_TO_ADDR
// y := GetY ( tower ) ;
39805: LD_ADDR_VAR 0 11
39809: PUSH
39810: LD_VAR 0 1
39814: PPUSH
39815: CALL_OW 251
39819: ST_TO_ADDR
// if not x or not y then
39820: LD_VAR 0 10
39824: NOT
39825: PUSH
39826: LD_VAR 0 11
39830: NOT
39831: OR
39832: IFFALSE 39836
// exit ;
39834: GO 40869
// weapon := 0 ;
39836: LD_ADDR_VAR 0 18
39840: PUSH
39841: LD_INT 0
39843: ST_TO_ADDR
// fac_list := [ ] ;
39844: LD_ADDR_VAR 0 17
39848: PUSH
39849: EMPTY
39850: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39851: LD_ADDR_VAR 0 6
39855: PUSH
39856: LD_VAR 0 1
39860: PPUSH
39861: CALL_OW 274
39865: PPUSH
39866: LD_VAR 0 2
39870: PPUSH
39871: LD_INT 0
39873: PPUSH
39874: CALL 37440 0 3
39878: PPUSH
39879: LD_INT 30
39881: PUSH
39882: LD_INT 3
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PPUSH
39889: CALL_OW 72
39893: ST_TO_ADDR
// if not factories then
39894: LD_VAR 0 6
39898: NOT
39899: IFFALSE 39903
// exit ;
39901: GO 40869
// for i in factories do
39903: LD_ADDR_VAR 0 8
39907: PUSH
39908: LD_VAR 0 6
39912: PUSH
39913: FOR_IN
39914: IFFALSE 39939
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39916: LD_ADDR_VAR 0 17
39920: PUSH
39921: LD_VAR 0 17
39925: PUSH
39926: LD_VAR 0 8
39930: PPUSH
39931: CALL_OW 478
39935: UNION
39936: ST_TO_ADDR
39937: GO 39913
39939: POP
39940: POP
// if not fac_list then
39941: LD_VAR 0 17
39945: NOT
39946: IFFALSE 39950
// exit ;
39948: GO 40869
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39950: LD_ADDR_VAR 0 5
39954: PUSH
39955: LD_INT 4
39957: PUSH
39958: LD_INT 5
39960: PUSH
39961: LD_INT 9
39963: PUSH
39964: LD_INT 10
39966: PUSH
39967: LD_INT 6
39969: PUSH
39970: LD_INT 7
39972: PUSH
39973: LD_INT 11
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 27
39987: PUSH
39988: LD_INT 28
39990: PUSH
39991: LD_INT 26
39993: PUSH
39994: LD_INT 30
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 43
40005: PUSH
40006: LD_INT 44
40008: PUSH
40009: LD_INT 46
40011: PUSH
40012: LD_INT 45
40014: PUSH
40015: LD_INT 47
40017: PUSH
40018: LD_INT 49
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: LIST
40033: PUSH
40034: LD_VAR 0 12
40038: ARRAY
40039: ST_TO_ADDR
// list := list isect fac_list ;
40040: LD_ADDR_VAR 0 5
40044: PUSH
40045: LD_VAR 0 5
40049: PUSH
40050: LD_VAR 0 17
40054: ISECT
40055: ST_TO_ADDR
// if not list then
40056: LD_VAR 0 5
40060: NOT
40061: IFFALSE 40065
// exit ;
40063: GO 40869
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40065: LD_VAR 0 12
40069: PUSH
40070: LD_INT 3
40072: EQUAL
40073: PUSH
40074: LD_INT 49
40076: PUSH
40077: LD_VAR 0 5
40081: IN
40082: AND
40083: PUSH
40084: LD_INT 31
40086: PPUSH
40087: LD_VAR 0 16
40091: PPUSH
40092: CALL_OW 321
40096: PUSH
40097: LD_INT 2
40099: EQUAL
40100: AND
40101: IFFALSE 40161
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40103: LD_INT 22
40105: PUSH
40106: LD_VAR 0 16
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 35
40117: PUSH
40118: LD_INT 49
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 91
40127: PUSH
40128: LD_VAR 0 1
40132: PUSH
40133: LD_INT 10
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: LIST
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: LIST
40145: PPUSH
40146: CALL_OW 69
40150: NOT
40151: IFFALSE 40161
// weapon := ru_time_lapser ;
40153: LD_ADDR_VAR 0 18
40157: PUSH
40158: LD_INT 49
40160: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40161: LD_VAR 0 12
40165: PUSH
40166: LD_INT 1
40168: PUSH
40169: LD_INT 2
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: IN
40176: PUSH
40177: LD_INT 11
40179: PUSH
40180: LD_VAR 0 5
40184: IN
40185: PUSH
40186: LD_INT 30
40188: PUSH
40189: LD_VAR 0 5
40193: IN
40194: OR
40195: AND
40196: PUSH
40197: LD_INT 6
40199: PPUSH
40200: LD_VAR 0 16
40204: PPUSH
40205: CALL_OW 321
40209: PUSH
40210: LD_INT 2
40212: EQUAL
40213: AND
40214: IFFALSE 40379
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40216: LD_INT 22
40218: PUSH
40219: LD_VAR 0 16
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 2
40230: PUSH
40231: LD_INT 35
40233: PUSH
40234: LD_INT 11
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 35
40243: PUSH
40244: LD_INT 30
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: LIST
40255: PUSH
40256: LD_INT 91
40258: PUSH
40259: LD_VAR 0 1
40263: PUSH
40264: LD_INT 18
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: LIST
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: LIST
40276: PPUSH
40277: CALL_OW 69
40281: NOT
40282: PUSH
40283: LD_INT 22
40285: PUSH
40286: LD_VAR 0 16
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 2
40297: PUSH
40298: LD_INT 30
40300: PUSH
40301: LD_INT 32
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: PUSH
40308: LD_INT 30
40310: PUSH
40311: LD_INT 33
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 91
40325: PUSH
40326: LD_VAR 0 1
40330: PUSH
40331: LD_INT 12
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: LIST
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: LIST
40343: PUSH
40344: EMPTY
40345: LIST
40346: PPUSH
40347: CALL_OW 69
40351: PUSH
40352: LD_INT 2
40354: GREATER
40355: AND
40356: IFFALSE 40379
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40358: LD_ADDR_VAR 0 18
40362: PUSH
40363: LD_INT 11
40365: PUSH
40366: LD_INT 30
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_VAR 0 12
40377: ARRAY
40378: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40379: LD_VAR 0 18
40383: NOT
40384: PUSH
40385: LD_INT 40
40387: PPUSH
40388: LD_VAR 0 16
40392: PPUSH
40393: CALL_OW 321
40397: PUSH
40398: LD_INT 2
40400: EQUAL
40401: AND
40402: PUSH
40403: LD_INT 7
40405: PUSH
40406: LD_VAR 0 5
40410: IN
40411: PUSH
40412: LD_INT 28
40414: PUSH
40415: LD_VAR 0 5
40419: IN
40420: OR
40421: PUSH
40422: LD_INT 45
40424: PUSH
40425: LD_VAR 0 5
40429: IN
40430: OR
40431: AND
40432: IFFALSE 40686
// begin hex := GetHexInfo ( x , y ) ;
40434: LD_ADDR_VAR 0 4
40438: PUSH
40439: LD_VAR 0 10
40443: PPUSH
40444: LD_VAR 0 11
40448: PPUSH
40449: CALL_OW 546
40453: ST_TO_ADDR
// if hex [ 1 ] then
40454: LD_VAR 0 4
40458: PUSH
40459: LD_INT 1
40461: ARRAY
40462: IFFALSE 40466
// exit ;
40464: GO 40869
// height := hex [ 2 ] ;
40466: LD_ADDR_VAR 0 15
40470: PUSH
40471: LD_VAR 0 4
40475: PUSH
40476: LD_INT 2
40478: ARRAY
40479: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40480: LD_ADDR_VAR 0 14
40484: PUSH
40485: LD_INT 0
40487: PUSH
40488: LD_INT 2
40490: PUSH
40491: LD_INT 3
40493: PUSH
40494: LD_INT 5
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: ST_TO_ADDR
// for i in tmp do
40503: LD_ADDR_VAR 0 8
40507: PUSH
40508: LD_VAR 0 14
40512: PUSH
40513: FOR_IN
40514: IFFALSE 40684
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40516: LD_ADDR_VAR 0 9
40520: PUSH
40521: LD_VAR 0 10
40525: PPUSH
40526: LD_VAR 0 8
40530: PPUSH
40531: LD_INT 5
40533: PPUSH
40534: CALL_OW 272
40538: PUSH
40539: LD_VAR 0 11
40543: PPUSH
40544: LD_VAR 0 8
40548: PPUSH
40549: LD_INT 5
40551: PPUSH
40552: CALL_OW 273
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40561: LD_VAR 0 9
40565: PUSH
40566: LD_INT 1
40568: ARRAY
40569: PPUSH
40570: LD_VAR 0 9
40574: PUSH
40575: LD_INT 2
40577: ARRAY
40578: PPUSH
40579: CALL_OW 488
40583: IFFALSE 40682
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40585: LD_ADDR_VAR 0 4
40589: PUSH
40590: LD_VAR 0 9
40594: PUSH
40595: LD_INT 1
40597: ARRAY
40598: PPUSH
40599: LD_VAR 0 9
40603: PUSH
40604: LD_INT 2
40606: ARRAY
40607: PPUSH
40608: CALL_OW 546
40612: ST_TO_ADDR
// if hex [ 1 ] then
40613: LD_VAR 0 4
40617: PUSH
40618: LD_INT 1
40620: ARRAY
40621: IFFALSE 40625
// continue ;
40623: GO 40513
// h := hex [ 2 ] ;
40625: LD_ADDR_VAR 0 13
40629: PUSH
40630: LD_VAR 0 4
40634: PUSH
40635: LD_INT 2
40637: ARRAY
40638: ST_TO_ADDR
// if h + 7 < height then
40639: LD_VAR 0 13
40643: PUSH
40644: LD_INT 7
40646: PLUS
40647: PUSH
40648: LD_VAR 0 15
40652: LESS
40653: IFFALSE 40682
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40655: LD_ADDR_VAR 0 18
40659: PUSH
40660: LD_INT 7
40662: PUSH
40663: LD_INT 28
40665: PUSH
40666: LD_INT 45
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: LIST
40673: PUSH
40674: LD_VAR 0 12
40678: ARRAY
40679: ST_TO_ADDR
// break ;
40680: GO 40684
// end ; end ; end ;
40682: GO 40513
40684: POP
40685: POP
// end ; if not weapon then
40686: LD_VAR 0 18
40690: NOT
40691: IFFALSE 40751
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40693: LD_ADDR_VAR 0 5
40697: PUSH
40698: LD_VAR 0 5
40702: PUSH
40703: LD_INT 11
40705: PUSH
40706: LD_INT 30
40708: PUSH
40709: LD_INT 49
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: LIST
40716: DIFF
40717: ST_TO_ADDR
// if not list then
40718: LD_VAR 0 5
40722: NOT
40723: IFFALSE 40727
// exit ;
40725: GO 40869
// weapon := list [ rand ( 1 , list ) ] ;
40727: LD_ADDR_VAR 0 18
40731: PUSH
40732: LD_VAR 0 5
40736: PUSH
40737: LD_INT 1
40739: PPUSH
40740: LD_VAR 0 5
40744: PPUSH
40745: CALL_OW 12
40749: ARRAY
40750: ST_TO_ADDR
// end ; if weapon then
40751: LD_VAR 0 18
40755: IFFALSE 40869
// begin tmp := CostOfWeapon ( weapon ) ;
40757: LD_ADDR_VAR 0 14
40761: PUSH
40762: LD_VAR 0 18
40766: PPUSH
40767: CALL_OW 451
40771: ST_TO_ADDR
// j := GetBase ( tower ) ;
40772: LD_ADDR_VAR 0 9
40776: PUSH
40777: LD_VAR 0 1
40781: PPUSH
40782: CALL_OW 274
40786: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40787: LD_VAR 0 9
40791: PPUSH
40792: LD_INT 1
40794: PPUSH
40795: CALL_OW 275
40799: PUSH
40800: LD_VAR 0 14
40804: PUSH
40805: LD_INT 1
40807: ARRAY
40808: GREATEREQUAL
40809: PUSH
40810: LD_VAR 0 9
40814: PPUSH
40815: LD_INT 2
40817: PPUSH
40818: CALL_OW 275
40822: PUSH
40823: LD_VAR 0 14
40827: PUSH
40828: LD_INT 2
40830: ARRAY
40831: GREATEREQUAL
40832: AND
40833: PUSH
40834: LD_VAR 0 9
40838: PPUSH
40839: LD_INT 3
40841: PPUSH
40842: CALL_OW 275
40846: PUSH
40847: LD_VAR 0 14
40851: PUSH
40852: LD_INT 3
40854: ARRAY
40855: GREATEREQUAL
40856: AND
40857: IFFALSE 40869
// result := weapon ;
40859: LD_ADDR_VAR 0 3
40863: PUSH
40864: LD_VAR 0 18
40868: ST_TO_ADDR
// end ; end ;
40869: LD_VAR 0 3
40873: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40874: LD_INT 0
40876: PPUSH
40877: PPUSH
// result := true ;
40878: LD_ADDR_VAR 0 3
40882: PUSH
40883: LD_INT 1
40885: ST_TO_ADDR
// if array1 = array2 then
40886: LD_VAR 0 1
40890: PUSH
40891: LD_VAR 0 2
40895: EQUAL
40896: IFFALSE 40956
// begin for i = 1 to array1 do
40898: LD_ADDR_VAR 0 4
40902: PUSH
40903: DOUBLE
40904: LD_INT 1
40906: DEC
40907: ST_TO_ADDR
40908: LD_VAR 0 1
40912: PUSH
40913: FOR_TO
40914: IFFALSE 40952
// if array1 [ i ] <> array2 [ i ] then
40916: LD_VAR 0 1
40920: PUSH
40921: LD_VAR 0 4
40925: ARRAY
40926: PUSH
40927: LD_VAR 0 2
40931: PUSH
40932: LD_VAR 0 4
40936: ARRAY
40937: NONEQUAL
40938: IFFALSE 40950
// begin result := false ;
40940: LD_ADDR_VAR 0 3
40944: PUSH
40945: LD_INT 0
40947: ST_TO_ADDR
// break ;
40948: GO 40952
// end ;
40950: GO 40913
40952: POP
40953: POP
// end else
40954: GO 40964
// result := false ;
40956: LD_ADDR_VAR 0 3
40960: PUSH
40961: LD_INT 0
40963: ST_TO_ADDR
// end ;
40964: LD_VAR 0 3
40968: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40969: LD_INT 0
40971: PPUSH
40972: PPUSH
// if not array1 or not array2 then
40973: LD_VAR 0 1
40977: NOT
40978: PUSH
40979: LD_VAR 0 2
40983: NOT
40984: OR
40985: IFFALSE 40989
// exit ;
40987: GO 41053
// result := true ;
40989: LD_ADDR_VAR 0 3
40993: PUSH
40994: LD_INT 1
40996: ST_TO_ADDR
// for i = 1 to array1 do
40997: LD_ADDR_VAR 0 4
41001: PUSH
41002: DOUBLE
41003: LD_INT 1
41005: DEC
41006: ST_TO_ADDR
41007: LD_VAR 0 1
41011: PUSH
41012: FOR_TO
41013: IFFALSE 41051
// if array1 [ i ] <> array2 [ i ] then
41015: LD_VAR 0 1
41019: PUSH
41020: LD_VAR 0 4
41024: ARRAY
41025: PUSH
41026: LD_VAR 0 2
41030: PUSH
41031: LD_VAR 0 4
41035: ARRAY
41036: NONEQUAL
41037: IFFALSE 41049
// begin result := false ;
41039: LD_ADDR_VAR 0 3
41043: PUSH
41044: LD_INT 0
41046: ST_TO_ADDR
// break ;
41047: GO 41051
// end ;
41049: GO 41012
41051: POP
41052: POP
// end ;
41053: LD_VAR 0 3
41057: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41058: LD_INT 0
41060: PPUSH
41061: PPUSH
41062: PPUSH
// pom := GetBase ( fac ) ;
41063: LD_ADDR_VAR 0 5
41067: PUSH
41068: LD_VAR 0 1
41072: PPUSH
41073: CALL_OW 274
41077: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41078: LD_ADDR_VAR 0 4
41082: PUSH
41083: LD_VAR 0 2
41087: PUSH
41088: LD_INT 1
41090: ARRAY
41091: PPUSH
41092: LD_VAR 0 2
41096: PUSH
41097: LD_INT 2
41099: ARRAY
41100: PPUSH
41101: LD_VAR 0 2
41105: PUSH
41106: LD_INT 3
41108: ARRAY
41109: PPUSH
41110: LD_VAR 0 2
41114: PUSH
41115: LD_INT 4
41117: ARRAY
41118: PPUSH
41119: CALL_OW 449
41123: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41124: LD_ADDR_VAR 0 3
41128: PUSH
41129: LD_VAR 0 5
41133: PPUSH
41134: LD_INT 1
41136: PPUSH
41137: CALL_OW 275
41141: PUSH
41142: LD_VAR 0 4
41146: PUSH
41147: LD_INT 1
41149: ARRAY
41150: GREATEREQUAL
41151: PUSH
41152: LD_VAR 0 5
41156: PPUSH
41157: LD_INT 2
41159: PPUSH
41160: CALL_OW 275
41164: PUSH
41165: LD_VAR 0 4
41169: PUSH
41170: LD_INT 2
41172: ARRAY
41173: GREATEREQUAL
41174: AND
41175: PUSH
41176: LD_VAR 0 5
41180: PPUSH
41181: LD_INT 3
41183: PPUSH
41184: CALL_OW 275
41188: PUSH
41189: LD_VAR 0 4
41193: PUSH
41194: LD_INT 3
41196: ARRAY
41197: GREATEREQUAL
41198: AND
41199: ST_TO_ADDR
// end ;
41200: LD_VAR 0 3
41204: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41205: LD_INT 0
41207: PPUSH
41208: PPUSH
41209: PPUSH
41210: PPUSH
// pom := GetBase ( building ) ;
41211: LD_ADDR_VAR 0 3
41215: PUSH
41216: LD_VAR 0 1
41220: PPUSH
41221: CALL_OW 274
41225: ST_TO_ADDR
// if not pom then
41226: LD_VAR 0 3
41230: NOT
41231: IFFALSE 41235
// exit ;
41233: GO 41405
// btype := GetBType ( building ) ;
41235: LD_ADDR_VAR 0 5
41239: PUSH
41240: LD_VAR 0 1
41244: PPUSH
41245: CALL_OW 266
41249: ST_TO_ADDR
// if btype = b_armoury then
41250: LD_VAR 0 5
41254: PUSH
41255: LD_INT 4
41257: EQUAL
41258: IFFALSE 41268
// btype := b_barracks ;
41260: LD_ADDR_VAR 0 5
41264: PUSH
41265: LD_INT 5
41267: ST_TO_ADDR
// if btype = b_depot then
41268: LD_VAR 0 5
41272: PUSH
41273: LD_INT 0
41275: EQUAL
41276: IFFALSE 41286
// btype := b_warehouse ;
41278: LD_ADDR_VAR 0 5
41282: PUSH
41283: LD_INT 1
41285: ST_TO_ADDR
// if btype = b_workshop then
41286: LD_VAR 0 5
41290: PUSH
41291: LD_INT 2
41293: EQUAL
41294: IFFALSE 41304
// btype := b_factory ;
41296: LD_ADDR_VAR 0 5
41300: PUSH
41301: LD_INT 3
41303: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41304: LD_ADDR_VAR 0 4
41308: PUSH
41309: LD_VAR 0 5
41313: PPUSH
41314: LD_VAR 0 1
41318: PPUSH
41319: CALL_OW 248
41323: PPUSH
41324: CALL_OW 450
41328: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41329: LD_ADDR_VAR 0 2
41333: PUSH
41334: LD_VAR 0 3
41338: PPUSH
41339: LD_INT 1
41341: PPUSH
41342: CALL_OW 275
41346: PUSH
41347: LD_VAR 0 4
41351: PUSH
41352: LD_INT 1
41354: ARRAY
41355: GREATEREQUAL
41356: PUSH
41357: LD_VAR 0 3
41361: PPUSH
41362: LD_INT 2
41364: PPUSH
41365: CALL_OW 275
41369: PUSH
41370: LD_VAR 0 4
41374: PUSH
41375: LD_INT 2
41377: ARRAY
41378: GREATEREQUAL
41379: AND
41380: PUSH
41381: LD_VAR 0 3
41385: PPUSH
41386: LD_INT 3
41388: PPUSH
41389: CALL_OW 275
41393: PUSH
41394: LD_VAR 0 4
41398: PUSH
41399: LD_INT 3
41401: ARRAY
41402: GREATEREQUAL
41403: AND
41404: ST_TO_ADDR
// end ;
41405: LD_VAR 0 2
41409: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41410: LD_INT 0
41412: PPUSH
41413: PPUSH
41414: PPUSH
// pom := GetBase ( building ) ;
41415: LD_ADDR_VAR 0 4
41419: PUSH
41420: LD_VAR 0 1
41424: PPUSH
41425: CALL_OW 274
41429: ST_TO_ADDR
// if not pom then
41430: LD_VAR 0 4
41434: NOT
41435: IFFALSE 41439
// exit ;
41437: GO 41540
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41439: LD_ADDR_VAR 0 5
41443: PUSH
41444: LD_VAR 0 2
41448: PPUSH
41449: LD_VAR 0 1
41453: PPUSH
41454: CALL_OW 248
41458: PPUSH
41459: CALL_OW 450
41463: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41464: LD_ADDR_VAR 0 3
41468: PUSH
41469: LD_VAR 0 4
41473: PPUSH
41474: LD_INT 1
41476: PPUSH
41477: CALL_OW 275
41481: PUSH
41482: LD_VAR 0 5
41486: PUSH
41487: LD_INT 1
41489: ARRAY
41490: GREATEREQUAL
41491: PUSH
41492: LD_VAR 0 4
41496: PPUSH
41497: LD_INT 2
41499: PPUSH
41500: CALL_OW 275
41504: PUSH
41505: LD_VAR 0 5
41509: PUSH
41510: LD_INT 2
41512: ARRAY
41513: GREATEREQUAL
41514: AND
41515: PUSH
41516: LD_VAR 0 4
41520: PPUSH
41521: LD_INT 3
41523: PPUSH
41524: CALL_OW 275
41528: PUSH
41529: LD_VAR 0 5
41533: PUSH
41534: LD_INT 3
41536: ARRAY
41537: GREATEREQUAL
41538: AND
41539: ST_TO_ADDR
// end ;
41540: LD_VAR 0 3
41544: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41545: LD_INT 0
41547: PPUSH
41548: PPUSH
41549: PPUSH
41550: PPUSH
41551: PPUSH
41552: PPUSH
41553: PPUSH
41554: PPUSH
41555: PPUSH
41556: PPUSH
41557: PPUSH
// result := false ;
41558: LD_ADDR_VAR 0 8
41562: PUSH
41563: LD_INT 0
41565: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41566: LD_VAR 0 5
41570: NOT
41571: PUSH
41572: LD_VAR 0 1
41576: NOT
41577: OR
41578: PUSH
41579: LD_VAR 0 2
41583: NOT
41584: OR
41585: PUSH
41586: LD_VAR 0 3
41590: NOT
41591: OR
41592: IFFALSE 41596
// exit ;
41594: GO 42410
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41596: LD_ADDR_VAR 0 14
41600: PUSH
41601: LD_VAR 0 1
41605: PPUSH
41606: LD_VAR 0 2
41610: PPUSH
41611: LD_VAR 0 3
41615: PPUSH
41616: LD_VAR 0 4
41620: PPUSH
41621: LD_VAR 0 5
41625: PUSH
41626: LD_INT 1
41628: ARRAY
41629: PPUSH
41630: CALL_OW 248
41634: PPUSH
41635: LD_INT 0
41637: PPUSH
41638: CALL 43643 0 6
41642: ST_TO_ADDR
// if not hexes then
41643: LD_VAR 0 14
41647: NOT
41648: IFFALSE 41652
// exit ;
41650: GO 42410
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41652: LD_ADDR_VAR 0 17
41656: PUSH
41657: LD_VAR 0 5
41661: PPUSH
41662: LD_INT 22
41664: PUSH
41665: LD_VAR 0 13
41669: PPUSH
41670: CALL_OW 255
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 2
41681: PUSH
41682: LD_INT 30
41684: PUSH
41685: LD_INT 0
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: LD_INT 30
41694: PUSH
41695: LD_INT 1
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: LIST
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PPUSH
41711: CALL_OW 72
41715: ST_TO_ADDR
// for i = 1 to hexes do
41716: LD_ADDR_VAR 0 9
41720: PUSH
41721: DOUBLE
41722: LD_INT 1
41724: DEC
41725: ST_TO_ADDR
41726: LD_VAR 0 14
41730: PUSH
41731: FOR_TO
41732: IFFALSE 42408
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41734: LD_ADDR_VAR 0 13
41738: PUSH
41739: LD_VAR 0 14
41743: PUSH
41744: LD_VAR 0 9
41748: ARRAY
41749: PUSH
41750: LD_INT 1
41752: ARRAY
41753: PPUSH
41754: LD_VAR 0 14
41758: PUSH
41759: LD_VAR 0 9
41763: ARRAY
41764: PUSH
41765: LD_INT 2
41767: ARRAY
41768: PPUSH
41769: CALL_OW 428
41773: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41774: LD_VAR 0 14
41778: PUSH
41779: LD_VAR 0 9
41783: ARRAY
41784: PUSH
41785: LD_INT 1
41787: ARRAY
41788: PPUSH
41789: LD_VAR 0 14
41793: PUSH
41794: LD_VAR 0 9
41798: ARRAY
41799: PUSH
41800: LD_INT 2
41802: ARRAY
41803: PPUSH
41804: CALL_OW 351
41808: PUSH
41809: LD_VAR 0 14
41813: PUSH
41814: LD_VAR 0 9
41818: ARRAY
41819: PUSH
41820: LD_INT 1
41822: ARRAY
41823: PPUSH
41824: LD_VAR 0 14
41828: PUSH
41829: LD_VAR 0 9
41833: ARRAY
41834: PUSH
41835: LD_INT 2
41837: ARRAY
41838: PPUSH
41839: CALL_OW 488
41843: NOT
41844: OR
41845: PUSH
41846: LD_VAR 0 13
41850: PPUSH
41851: CALL_OW 247
41855: PUSH
41856: LD_INT 3
41858: EQUAL
41859: OR
41860: IFFALSE 41866
// exit ;
41862: POP
41863: POP
41864: GO 42410
// if not tmp then
41866: LD_VAR 0 13
41870: NOT
41871: IFFALSE 41875
// continue ;
41873: GO 41731
// result := true ;
41875: LD_ADDR_VAR 0 8
41879: PUSH
41880: LD_INT 1
41882: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41883: LD_VAR 0 6
41887: PUSH
41888: LD_VAR 0 13
41892: PPUSH
41893: CALL_OW 247
41897: PUSH
41898: LD_INT 2
41900: EQUAL
41901: AND
41902: PUSH
41903: LD_VAR 0 13
41907: PPUSH
41908: CALL_OW 263
41912: PUSH
41913: LD_INT 1
41915: EQUAL
41916: AND
41917: IFFALSE 42081
// begin if IsDrivenBy ( tmp ) then
41919: LD_VAR 0 13
41923: PPUSH
41924: CALL_OW 311
41928: IFFALSE 41932
// continue ;
41930: GO 41731
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41932: LD_VAR 0 6
41936: PPUSH
41937: LD_INT 3
41939: PUSH
41940: LD_INT 60
41942: PUSH
41943: EMPTY
41944: LIST
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 3
41952: PUSH
41953: LD_INT 55
41955: PUSH
41956: EMPTY
41957: LIST
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PPUSH
41967: CALL_OW 72
41971: IFFALSE 42079
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41973: LD_ADDR_VAR 0 18
41977: PUSH
41978: LD_VAR 0 6
41982: PPUSH
41983: LD_INT 3
41985: PUSH
41986: LD_INT 60
41988: PUSH
41989: EMPTY
41990: LIST
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 3
41998: PUSH
41999: LD_INT 55
42001: PUSH
42002: EMPTY
42003: LIST
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PPUSH
42013: CALL_OW 72
42017: PUSH
42018: LD_INT 1
42020: ARRAY
42021: ST_TO_ADDR
// if IsInUnit ( driver ) then
42022: LD_VAR 0 18
42026: PPUSH
42027: CALL_OW 310
42031: IFFALSE 42042
// ComExit ( driver ) ;
42033: LD_VAR 0 18
42037: PPUSH
42038: CALL 67423 0 1
// AddComEnterUnit ( driver , tmp ) ;
42042: LD_VAR 0 18
42046: PPUSH
42047: LD_VAR 0 13
42051: PPUSH
42052: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42056: LD_VAR 0 18
42060: PPUSH
42061: LD_VAR 0 7
42065: PPUSH
42066: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42070: LD_VAR 0 18
42074: PPUSH
42075: CALL_OW 181
// end ; continue ;
42079: GO 41731
// end ; if not cleaners or not tmp in cleaners then
42081: LD_VAR 0 6
42085: NOT
42086: PUSH
42087: LD_VAR 0 13
42091: PUSH
42092: LD_VAR 0 6
42096: IN
42097: NOT
42098: OR
42099: IFFALSE 42406
// begin if dep then
42101: LD_VAR 0 17
42105: IFFALSE 42241
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42107: LD_ADDR_VAR 0 16
42111: PUSH
42112: LD_VAR 0 17
42116: PUSH
42117: LD_INT 1
42119: ARRAY
42120: PPUSH
42121: CALL_OW 250
42125: PPUSH
42126: LD_VAR 0 17
42130: PUSH
42131: LD_INT 1
42133: ARRAY
42134: PPUSH
42135: CALL_OW 254
42139: PPUSH
42140: LD_INT 5
42142: PPUSH
42143: CALL_OW 272
42147: PUSH
42148: LD_VAR 0 17
42152: PUSH
42153: LD_INT 1
42155: ARRAY
42156: PPUSH
42157: CALL_OW 251
42161: PPUSH
42162: LD_VAR 0 17
42166: PUSH
42167: LD_INT 1
42169: ARRAY
42170: PPUSH
42171: CALL_OW 254
42175: PPUSH
42176: LD_INT 5
42178: PPUSH
42179: CALL_OW 273
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42188: LD_VAR 0 16
42192: PUSH
42193: LD_INT 1
42195: ARRAY
42196: PPUSH
42197: LD_VAR 0 16
42201: PUSH
42202: LD_INT 2
42204: ARRAY
42205: PPUSH
42206: CALL_OW 488
42210: IFFALSE 42241
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42212: LD_VAR 0 13
42216: PPUSH
42217: LD_VAR 0 16
42221: PUSH
42222: LD_INT 1
42224: ARRAY
42225: PPUSH
42226: LD_VAR 0 16
42230: PUSH
42231: LD_INT 2
42233: ARRAY
42234: PPUSH
42235: CALL_OW 111
// continue ;
42239: GO 41731
// end ; end ; r := GetDir ( tmp ) ;
42241: LD_ADDR_VAR 0 15
42245: PUSH
42246: LD_VAR 0 13
42250: PPUSH
42251: CALL_OW 254
42255: ST_TO_ADDR
// if r = 5 then
42256: LD_VAR 0 15
42260: PUSH
42261: LD_INT 5
42263: EQUAL
42264: IFFALSE 42274
// r := 0 ;
42266: LD_ADDR_VAR 0 15
42270: PUSH
42271: LD_INT 0
42273: ST_TO_ADDR
// for j = r to 5 do
42274: LD_ADDR_VAR 0 10
42278: PUSH
42279: DOUBLE
42280: LD_VAR 0 15
42284: DEC
42285: ST_TO_ADDR
42286: LD_INT 5
42288: PUSH
42289: FOR_TO
42290: IFFALSE 42404
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42292: LD_ADDR_VAR 0 11
42296: PUSH
42297: LD_VAR 0 13
42301: PPUSH
42302: CALL_OW 250
42306: PPUSH
42307: LD_VAR 0 10
42311: PPUSH
42312: LD_INT 2
42314: PPUSH
42315: CALL_OW 272
42319: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42320: LD_ADDR_VAR 0 12
42324: PUSH
42325: LD_VAR 0 13
42329: PPUSH
42330: CALL_OW 251
42334: PPUSH
42335: LD_VAR 0 10
42339: PPUSH
42340: LD_INT 2
42342: PPUSH
42343: CALL_OW 273
42347: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42348: LD_VAR 0 11
42352: PPUSH
42353: LD_VAR 0 12
42357: PPUSH
42358: CALL_OW 488
42362: PUSH
42363: LD_VAR 0 11
42367: PPUSH
42368: LD_VAR 0 12
42372: PPUSH
42373: CALL_OW 428
42377: NOT
42378: AND
42379: IFFALSE 42402
// begin ComMoveXY ( tmp , _x , _y ) ;
42381: LD_VAR 0 13
42385: PPUSH
42386: LD_VAR 0 11
42390: PPUSH
42391: LD_VAR 0 12
42395: PPUSH
42396: CALL_OW 111
// break ;
42400: GO 42404
// end ; end ;
42402: GO 42289
42404: POP
42405: POP
// end ; end ;
42406: GO 41731
42408: POP
42409: POP
// end ;
42410: LD_VAR 0 8
42414: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42415: LD_INT 0
42417: PPUSH
// result := true ;
42418: LD_ADDR_VAR 0 3
42422: PUSH
42423: LD_INT 1
42425: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42426: LD_VAR 0 2
42430: PUSH
42431: LD_INT 24
42433: DOUBLE
42434: EQUAL
42435: IFTRUE 42445
42437: LD_INT 33
42439: DOUBLE
42440: EQUAL
42441: IFTRUE 42445
42443: GO 42470
42445: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42446: LD_ADDR_VAR 0 3
42450: PUSH
42451: LD_INT 32
42453: PPUSH
42454: LD_VAR 0 1
42458: PPUSH
42459: CALL_OW 321
42463: PUSH
42464: LD_INT 2
42466: EQUAL
42467: ST_TO_ADDR
42468: GO 42786
42470: LD_INT 20
42472: DOUBLE
42473: EQUAL
42474: IFTRUE 42478
42476: GO 42503
42478: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42479: LD_ADDR_VAR 0 3
42483: PUSH
42484: LD_INT 6
42486: PPUSH
42487: LD_VAR 0 1
42491: PPUSH
42492: CALL_OW 321
42496: PUSH
42497: LD_INT 2
42499: EQUAL
42500: ST_TO_ADDR
42501: GO 42786
42503: LD_INT 22
42505: DOUBLE
42506: EQUAL
42507: IFTRUE 42517
42509: LD_INT 36
42511: DOUBLE
42512: EQUAL
42513: IFTRUE 42517
42515: GO 42542
42517: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42518: LD_ADDR_VAR 0 3
42522: PUSH
42523: LD_INT 15
42525: PPUSH
42526: LD_VAR 0 1
42530: PPUSH
42531: CALL_OW 321
42535: PUSH
42536: LD_INT 2
42538: EQUAL
42539: ST_TO_ADDR
42540: GO 42786
42542: LD_INT 30
42544: DOUBLE
42545: EQUAL
42546: IFTRUE 42550
42548: GO 42575
42550: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42551: LD_ADDR_VAR 0 3
42555: PUSH
42556: LD_INT 20
42558: PPUSH
42559: LD_VAR 0 1
42563: PPUSH
42564: CALL_OW 321
42568: PUSH
42569: LD_INT 2
42571: EQUAL
42572: ST_TO_ADDR
42573: GO 42786
42575: LD_INT 28
42577: DOUBLE
42578: EQUAL
42579: IFTRUE 42589
42581: LD_INT 21
42583: DOUBLE
42584: EQUAL
42585: IFTRUE 42589
42587: GO 42614
42589: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42590: LD_ADDR_VAR 0 3
42594: PUSH
42595: LD_INT 21
42597: PPUSH
42598: LD_VAR 0 1
42602: PPUSH
42603: CALL_OW 321
42607: PUSH
42608: LD_INT 2
42610: EQUAL
42611: ST_TO_ADDR
42612: GO 42786
42614: LD_INT 16
42616: DOUBLE
42617: EQUAL
42618: IFTRUE 42622
42620: GO 42647
42622: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42623: LD_ADDR_VAR 0 3
42627: PUSH
42628: LD_INT 84
42630: PPUSH
42631: LD_VAR 0 1
42635: PPUSH
42636: CALL_OW 321
42640: PUSH
42641: LD_INT 2
42643: EQUAL
42644: ST_TO_ADDR
42645: GO 42786
42647: LD_INT 19
42649: DOUBLE
42650: EQUAL
42651: IFTRUE 42661
42653: LD_INT 23
42655: DOUBLE
42656: EQUAL
42657: IFTRUE 42661
42659: GO 42686
42661: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42662: LD_ADDR_VAR 0 3
42666: PUSH
42667: LD_INT 83
42669: PPUSH
42670: LD_VAR 0 1
42674: PPUSH
42675: CALL_OW 321
42679: PUSH
42680: LD_INT 2
42682: EQUAL
42683: ST_TO_ADDR
42684: GO 42786
42686: LD_INT 17
42688: DOUBLE
42689: EQUAL
42690: IFTRUE 42694
42692: GO 42719
42694: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42695: LD_ADDR_VAR 0 3
42699: PUSH
42700: LD_INT 39
42702: PPUSH
42703: LD_VAR 0 1
42707: PPUSH
42708: CALL_OW 321
42712: PUSH
42713: LD_INT 2
42715: EQUAL
42716: ST_TO_ADDR
42717: GO 42786
42719: LD_INT 18
42721: DOUBLE
42722: EQUAL
42723: IFTRUE 42727
42725: GO 42752
42727: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42728: LD_ADDR_VAR 0 3
42732: PUSH
42733: LD_INT 40
42735: PPUSH
42736: LD_VAR 0 1
42740: PPUSH
42741: CALL_OW 321
42745: PUSH
42746: LD_INT 2
42748: EQUAL
42749: ST_TO_ADDR
42750: GO 42786
42752: LD_INT 27
42754: DOUBLE
42755: EQUAL
42756: IFTRUE 42760
42758: GO 42785
42760: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42761: LD_ADDR_VAR 0 3
42765: PUSH
42766: LD_INT 35
42768: PPUSH
42769: LD_VAR 0 1
42773: PPUSH
42774: CALL_OW 321
42778: PUSH
42779: LD_INT 2
42781: EQUAL
42782: ST_TO_ADDR
42783: GO 42786
42785: POP
// end ;
42786: LD_VAR 0 3
42790: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42791: LD_INT 0
42793: PPUSH
42794: PPUSH
42795: PPUSH
42796: PPUSH
42797: PPUSH
42798: PPUSH
42799: PPUSH
42800: PPUSH
42801: PPUSH
42802: PPUSH
42803: PPUSH
// result := false ;
42804: LD_ADDR_VAR 0 6
42808: PUSH
42809: LD_INT 0
42811: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42812: LD_VAR 0 1
42816: NOT
42817: PUSH
42818: LD_VAR 0 1
42822: PPUSH
42823: CALL_OW 266
42827: PUSH
42828: LD_INT 0
42830: PUSH
42831: LD_INT 1
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: IN
42838: NOT
42839: OR
42840: PUSH
42841: LD_VAR 0 2
42845: NOT
42846: OR
42847: PUSH
42848: LD_VAR 0 5
42852: PUSH
42853: LD_INT 0
42855: PUSH
42856: LD_INT 1
42858: PUSH
42859: LD_INT 2
42861: PUSH
42862: LD_INT 3
42864: PUSH
42865: LD_INT 4
42867: PUSH
42868: LD_INT 5
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: IN
42879: NOT
42880: OR
42881: PUSH
42882: LD_VAR 0 3
42886: PPUSH
42887: LD_VAR 0 4
42891: PPUSH
42892: CALL_OW 488
42896: NOT
42897: OR
42898: IFFALSE 42902
// exit ;
42900: GO 43638
// side := GetSide ( depot ) ;
42902: LD_ADDR_VAR 0 9
42906: PUSH
42907: LD_VAR 0 1
42911: PPUSH
42912: CALL_OW 255
42916: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42917: LD_VAR 0 9
42921: PPUSH
42922: LD_VAR 0 2
42926: PPUSH
42927: CALL 42415 0 2
42931: NOT
42932: IFFALSE 42936
// exit ;
42934: GO 43638
// pom := GetBase ( depot ) ;
42936: LD_ADDR_VAR 0 10
42940: PUSH
42941: LD_VAR 0 1
42945: PPUSH
42946: CALL_OW 274
42950: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42951: LD_ADDR_VAR 0 11
42955: PUSH
42956: LD_VAR 0 2
42960: PPUSH
42961: LD_VAR 0 1
42965: PPUSH
42966: CALL_OW 248
42970: PPUSH
42971: CALL_OW 450
42975: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42976: LD_VAR 0 10
42980: PPUSH
42981: LD_INT 1
42983: PPUSH
42984: CALL_OW 275
42988: PUSH
42989: LD_VAR 0 11
42993: PUSH
42994: LD_INT 1
42996: ARRAY
42997: GREATEREQUAL
42998: PUSH
42999: LD_VAR 0 10
43003: PPUSH
43004: LD_INT 2
43006: PPUSH
43007: CALL_OW 275
43011: PUSH
43012: LD_VAR 0 11
43016: PUSH
43017: LD_INT 2
43019: ARRAY
43020: GREATEREQUAL
43021: AND
43022: PUSH
43023: LD_VAR 0 10
43027: PPUSH
43028: LD_INT 3
43030: PPUSH
43031: CALL_OW 275
43035: PUSH
43036: LD_VAR 0 11
43040: PUSH
43041: LD_INT 3
43043: ARRAY
43044: GREATEREQUAL
43045: AND
43046: NOT
43047: IFFALSE 43051
// exit ;
43049: GO 43638
// if GetBType ( depot ) = b_depot then
43051: LD_VAR 0 1
43055: PPUSH
43056: CALL_OW 266
43060: PUSH
43061: LD_INT 0
43063: EQUAL
43064: IFFALSE 43076
// dist := 28 else
43066: LD_ADDR_VAR 0 14
43070: PUSH
43071: LD_INT 28
43073: ST_TO_ADDR
43074: GO 43084
// dist := 36 ;
43076: LD_ADDR_VAR 0 14
43080: PUSH
43081: LD_INT 36
43083: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43084: LD_VAR 0 1
43088: PPUSH
43089: LD_VAR 0 3
43093: PPUSH
43094: LD_VAR 0 4
43098: PPUSH
43099: CALL_OW 297
43103: PUSH
43104: LD_VAR 0 14
43108: GREATER
43109: IFFALSE 43113
// exit ;
43111: GO 43638
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43113: LD_ADDR_VAR 0 12
43117: PUSH
43118: LD_VAR 0 2
43122: PPUSH
43123: LD_VAR 0 3
43127: PPUSH
43128: LD_VAR 0 4
43132: PPUSH
43133: LD_VAR 0 5
43137: PPUSH
43138: LD_VAR 0 1
43142: PPUSH
43143: CALL_OW 248
43147: PPUSH
43148: LD_INT 0
43150: PPUSH
43151: CALL 43643 0 6
43155: ST_TO_ADDR
// if not hexes then
43156: LD_VAR 0 12
43160: NOT
43161: IFFALSE 43165
// exit ;
43163: GO 43638
// hex := GetHexInfo ( x , y ) ;
43165: LD_ADDR_VAR 0 15
43169: PUSH
43170: LD_VAR 0 3
43174: PPUSH
43175: LD_VAR 0 4
43179: PPUSH
43180: CALL_OW 546
43184: ST_TO_ADDR
// if hex [ 1 ] then
43185: LD_VAR 0 15
43189: PUSH
43190: LD_INT 1
43192: ARRAY
43193: IFFALSE 43197
// exit ;
43195: GO 43638
// height := hex [ 2 ] ;
43197: LD_ADDR_VAR 0 13
43201: PUSH
43202: LD_VAR 0 15
43206: PUSH
43207: LD_INT 2
43209: ARRAY
43210: ST_TO_ADDR
// for i = 1 to hexes do
43211: LD_ADDR_VAR 0 7
43215: PUSH
43216: DOUBLE
43217: LD_INT 1
43219: DEC
43220: ST_TO_ADDR
43221: LD_VAR 0 12
43225: PUSH
43226: FOR_TO
43227: IFFALSE 43557
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43229: LD_VAR 0 12
43233: PUSH
43234: LD_VAR 0 7
43238: ARRAY
43239: PUSH
43240: LD_INT 1
43242: ARRAY
43243: PPUSH
43244: LD_VAR 0 12
43248: PUSH
43249: LD_VAR 0 7
43253: ARRAY
43254: PUSH
43255: LD_INT 2
43257: ARRAY
43258: PPUSH
43259: CALL_OW 488
43263: NOT
43264: PUSH
43265: LD_VAR 0 12
43269: PUSH
43270: LD_VAR 0 7
43274: ARRAY
43275: PUSH
43276: LD_INT 1
43278: ARRAY
43279: PPUSH
43280: LD_VAR 0 12
43284: PUSH
43285: LD_VAR 0 7
43289: ARRAY
43290: PUSH
43291: LD_INT 2
43293: ARRAY
43294: PPUSH
43295: CALL_OW 428
43299: PUSH
43300: LD_INT 0
43302: GREATER
43303: OR
43304: PUSH
43305: LD_VAR 0 12
43309: PUSH
43310: LD_VAR 0 7
43314: ARRAY
43315: PUSH
43316: LD_INT 1
43318: ARRAY
43319: PPUSH
43320: LD_VAR 0 12
43324: PUSH
43325: LD_VAR 0 7
43329: ARRAY
43330: PUSH
43331: LD_INT 2
43333: ARRAY
43334: PPUSH
43335: CALL_OW 351
43339: OR
43340: IFFALSE 43346
// exit ;
43342: POP
43343: POP
43344: GO 43638
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43346: LD_ADDR_VAR 0 8
43350: PUSH
43351: LD_VAR 0 12
43355: PUSH
43356: LD_VAR 0 7
43360: ARRAY
43361: PUSH
43362: LD_INT 1
43364: ARRAY
43365: PPUSH
43366: LD_VAR 0 12
43370: PUSH
43371: LD_VAR 0 7
43375: ARRAY
43376: PUSH
43377: LD_INT 2
43379: ARRAY
43380: PPUSH
43381: CALL_OW 546
43385: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43386: LD_VAR 0 8
43390: PUSH
43391: LD_INT 1
43393: ARRAY
43394: PUSH
43395: LD_VAR 0 8
43399: PUSH
43400: LD_INT 2
43402: ARRAY
43403: PUSH
43404: LD_VAR 0 13
43408: PUSH
43409: LD_INT 2
43411: PLUS
43412: GREATER
43413: OR
43414: PUSH
43415: LD_VAR 0 8
43419: PUSH
43420: LD_INT 2
43422: ARRAY
43423: PUSH
43424: LD_VAR 0 13
43428: PUSH
43429: LD_INT 2
43431: MINUS
43432: LESS
43433: OR
43434: PUSH
43435: LD_VAR 0 8
43439: PUSH
43440: LD_INT 3
43442: ARRAY
43443: PUSH
43444: LD_INT 0
43446: PUSH
43447: LD_INT 8
43449: PUSH
43450: LD_INT 9
43452: PUSH
43453: LD_INT 10
43455: PUSH
43456: LD_INT 11
43458: PUSH
43459: LD_INT 12
43461: PUSH
43462: LD_INT 13
43464: PUSH
43465: LD_INT 16
43467: PUSH
43468: LD_INT 17
43470: PUSH
43471: LD_INT 18
43473: PUSH
43474: LD_INT 19
43476: PUSH
43477: LD_INT 20
43479: PUSH
43480: LD_INT 21
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: LIST
43496: LIST
43497: IN
43498: NOT
43499: OR
43500: PUSH
43501: LD_VAR 0 8
43505: PUSH
43506: LD_INT 5
43508: ARRAY
43509: NOT
43510: OR
43511: PUSH
43512: LD_VAR 0 8
43516: PUSH
43517: LD_INT 6
43519: ARRAY
43520: PUSH
43521: LD_INT 1
43523: PUSH
43524: LD_INT 2
43526: PUSH
43527: LD_INT 7
43529: PUSH
43530: LD_INT 9
43532: PUSH
43533: LD_INT 10
43535: PUSH
43536: LD_INT 11
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: IN
43547: NOT
43548: OR
43549: IFFALSE 43555
// exit ;
43551: POP
43552: POP
43553: GO 43638
// end ;
43555: GO 43226
43557: POP
43558: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43559: LD_VAR 0 9
43563: PPUSH
43564: LD_VAR 0 3
43568: PPUSH
43569: LD_VAR 0 4
43573: PPUSH
43574: LD_INT 20
43576: PPUSH
43577: CALL 35590 0 4
43581: PUSH
43582: LD_INT 4
43584: ARRAY
43585: IFFALSE 43589
// exit ;
43587: GO 43638
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43589: LD_VAR 0 2
43593: PUSH
43594: LD_INT 29
43596: PUSH
43597: LD_INT 30
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: IN
43604: PUSH
43605: LD_VAR 0 3
43609: PPUSH
43610: LD_VAR 0 4
43614: PPUSH
43615: LD_VAR 0 9
43619: PPUSH
43620: CALL_OW 440
43624: NOT
43625: AND
43626: IFFALSE 43630
// exit ;
43628: GO 43638
// result := true ;
43630: LD_ADDR_VAR 0 6
43634: PUSH
43635: LD_INT 1
43637: ST_TO_ADDR
// end ;
43638: LD_VAR 0 6
43642: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43643: LD_INT 0
43645: PPUSH
43646: PPUSH
43647: PPUSH
43648: PPUSH
43649: PPUSH
43650: PPUSH
43651: PPUSH
43652: PPUSH
43653: PPUSH
43654: PPUSH
43655: PPUSH
43656: PPUSH
43657: PPUSH
43658: PPUSH
43659: PPUSH
43660: PPUSH
43661: PPUSH
43662: PPUSH
43663: PPUSH
43664: PPUSH
43665: PPUSH
43666: PPUSH
43667: PPUSH
43668: PPUSH
43669: PPUSH
43670: PPUSH
43671: PPUSH
43672: PPUSH
43673: PPUSH
43674: PPUSH
43675: PPUSH
43676: PPUSH
43677: PPUSH
43678: PPUSH
43679: PPUSH
43680: PPUSH
43681: PPUSH
43682: PPUSH
43683: PPUSH
43684: PPUSH
43685: PPUSH
43686: PPUSH
43687: PPUSH
43688: PPUSH
43689: PPUSH
43690: PPUSH
43691: PPUSH
43692: PPUSH
43693: PPUSH
43694: PPUSH
43695: PPUSH
43696: PPUSH
43697: PPUSH
43698: PPUSH
43699: PPUSH
43700: PPUSH
43701: PPUSH
43702: PPUSH
// result = [ ] ;
43703: LD_ADDR_VAR 0 7
43707: PUSH
43708: EMPTY
43709: ST_TO_ADDR
// temp_list = [ ] ;
43710: LD_ADDR_VAR 0 9
43714: PUSH
43715: EMPTY
43716: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43717: LD_VAR 0 4
43721: PUSH
43722: LD_INT 0
43724: PUSH
43725: LD_INT 1
43727: PUSH
43728: LD_INT 2
43730: PUSH
43731: LD_INT 3
43733: PUSH
43734: LD_INT 4
43736: PUSH
43737: LD_INT 5
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: IN
43748: NOT
43749: PUSH
43750: LD_VAR 0 1
43754: PUSH
43755: LD_INT 0
43757: PUSH
43758: LD_INT 1
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: IN
43765: PUSH
43766: LD_VAR 0 5
43770: PUSH
43771: LD_INT 1
43773: PUSH
43774: LD_INT 2
43776: PUSH
43777: LD_INT 3
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: LIST
43784: IN
43785: NOT
43786: AND
43787: OR
43788: IFFALSE 43792
// exit ;
43790: GO 62183
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43792: LD_VAR 0 1
43796: PUSH
43797: LD_INT 6
43799: PUSH
43800: LD_INT 7
43802: PUSH
43803: LD_INT 8
43805: PUSH
43806: LD_INT 13
43808: PUSH
43809: LD_INT 12
43811: PUSH
43812: LD_INT 15
43814: PUSH
43815: LD_INT 11
43817: PUSH
43818: LD_INT 14
43820: PUSH
43821: LD_INT 10
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: IN
43835: IFFALSE 43845
// btype = b_lab ;
43837: LD_ADDR_VAR 0 1
43841: PUSH
43842: LD_INT 6
43844: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43845: LD_VAR 0 6
43849: PUSH
43850: LD_INT 0
43852: PUSH
43853: LD_INT 1
43855: PUSH
43856: LD_INT 2
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: LIST
43863: IN
43864: NOT
43865: PUSH
43866: LD_VAR 0 1
43870: PUSH
43871: LD_INT 0
43873: PUSH
43874: LD_INT 1
43876: PUSH
43877: LD_INT 2
43879: PUSH
43880: LD_INT 3
43882: PUSH
43883: LD_INT 6
43885: PUSH
43886: LD_INT 36
43888: PUSH
43889: LD_INT 4
43891: PUSH
43892: LD_INT 5
43894: PUSH
43895: LD_INT 31
43897: PUSH
43898: LD_INT 32
43900: PUSH
43901: LD_INT 33
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: IN
43917: NOT
43918: PUSH
43919: LD_VAR 0 6
43923: PUSH
43924: LD_INT 1
43926: EQUAL
43927: AND
43928: OR
43929: PUSH
43930: LD_VAR 0 1
43934: PUSH
43935: LD_INT 2
43937: PUSH
43938: LD_INT 3
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: IN
43945: NOT
43946: PUSH
43947: LD_VAR 0 6
43951: PUSH
43952: LD_INT 2
43954: EQUAL
43955: AND
43956: OR
43957: IFFALSE 43967
// mode = 0 ;
43959: LD_ADDR_VAR 0 6
43963: PUSH
43964: LD_INT 0
43966: ST_TO_ADDR
// case mode of 0 :
43967: LD_VAR 0 6
43971: PUSH
43972: LD_INT 0
43974: DOUBLE
43975: EQUAL
43976: IFTRUE 43980
43978: GO 55433
43980: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43981: LD_ADDR_VAR 0 11
43985: PUSH
43986: LD_INT 0
43988: PUSH
43989: LD_INT 0
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: LD_INT 0
43998: PUSH
43999: LD_INT 1
44001: NEG
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 1
44009: PUSH
44010: LD_INT 0
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 1
44019: PUSH
44020: LD_INT 1
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 0
44029: PUSH
44030: LD_INT 1
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 1
44039: NEG
44040: PUSH
44041: LD_INT 0
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 1
44050: NEG
44051: PUSH
44052: LD_INT 1
44054: NEG
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 1
44062: NEG
44063: PUSH
44064: LD_INT 2
44066: NEG
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 0
44074: PUSH
44075: LD_INT 2
44077: NEG
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 1
44085: PUSH
44086: LD_INT 1
44088: NEG
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 1
44096: PUSH
44097: LD_INT 2
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 0
44106: PUSH
44107: LD_INT 2
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: LD_INT 1
44116: NEG
44117: PUSH
44118: LD_INT 1
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 1
44127: PUSH
44128: LD_INT 3
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 0
44137: PUSH
44138: LD_INT 3
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 1
44147: NEG
44148: PUSH
44149: LD_INT 2
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44174: LD_ADDR_VAR 0 12
44178: PUSH
44179: LD_INT 0
44181: PUSH
44182: LD_INT 0
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 0
44191: PUSH
44192: LD_INT 1
44194: NEG
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 1
44202: PUSH
44203: LD_INT 0
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 1
44212: PUSH
44213: LD_INT 1
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 0
44222: PUSH
44223: LD_INT 1
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 1
44232: NEG
44233: PUSH
44234: LD_INT 0
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 1
44243: NEG
44244: PUSH
44245: LD_INT 1
44247: NEG
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 1
44255: PUSH
44256: LD_INT 1
44258: NEG
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 2
44266: PUSH
44267: LD_INT 0
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 2
44276: PUSH
44277: LD_INT 1
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 1
44286: NEG
44287: PUSH
44288: LD_INT 1
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 2
44297: NEG
44298: PUSH
44299: LD_INT 0
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 2
44308: NEG
44309: PUSH
44310: LD_INT 1
44312: NEG
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 2
44320: NEG
44321: PUSH
44322: LD_INT 1
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 3
44331: NEG
44332: PUSH
44333: LD_INT 0
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 3
44342: NEG
44343: PUSH
44344: LD_INT 1
44346: NEG
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44370: LD_ADDR_VAR 0 13
44374: PUSH
44375: LD_INT 0
44377: PUSH
44378: LD_INT 0
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 0
44387: PUSH
44388: LD_INT 1
44390: NEG
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 1
44398: PUSH
44399: LD_INT 0
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 1
44408: PUSH
44409: LD_INT 1
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 0
44418: PUSH
44419: LD_INT 1
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 1
44428: NEG
44429: PUSH
44430: LD_INT 0
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 1
44439: NEG
44440: PUSH
44441: LD_INT 1
44443: NEG
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 1
44451: NEG
44452: PUSH
44453: LD_INT 2
44455: NEG
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 2
44463: PUSH
44464: LD_INT 1
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 2
44473: PUSH
44474: LD_INT 2
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 1
44483: PUSH
44484: LD_INT 2
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 2
44493: NEG
44494: PUSH
44495: LD_INT 1
44497: NEG
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 2
44505: NEG
44506: PUSH
44507: LD_INT 2
44509: NEG
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 2
44517: NEG
44518: PUSH
44519: LD_INT 3
44521: NEG
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 3
44529: NEG
44530: PUSH
44531: LD_INT 2
44533: NEG
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 3
44541: NEG
44542: PUSH
44543: LD_INT 3
44545: NEG
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44569: LD_ADDR_VAR 0 14
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: LD_INT 0
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 0
44586: PUSH
44587: LD_INT 1
44589: NEG
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 1
44597: PUSH
44598: LD_INT 0
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 1
44607: PUSH
44608: LD_INT 1
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 0
44617: PUSH
44618: LD_INT 1
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 1
44627: NEG
44628: PUSH
44629: LD_INT 0
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 1
44638: NEG
44639: PUSH
44640: LD_INT 1
44642: NEG
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 1
44650: NEG
44651: PUSH
44652: LD_INT 2
44654: NEG
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 0
44662: PUSH
44663: LD_INT 2
44665: NEG
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 1
44673: PUSH
44674: LD_INT 1
44676: NEG
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 1
44684: PUSH
44685: LD_INT 2
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 0
44694: PUSH
44695: LD_INT 2
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 1
44704: NEG
44705: PUSH
44706: LD_INT 1
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 1
44715: NEG
44716: PUSH
44717: LD_INT 3
44719: NEG
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 0
44727: PUSH
44728: LD_INT 3
44730: NEG
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 1
44738: PUSH
44739: LD_INT 2
44741: NEG
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44765: LD_ADDR_VAR 0 15
44769: PUSH
44770: LD_INT 0
44772: PUSH
44773: LD_INT 0
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 0
44782: PUSH
44783: LD_INT 1
44785: NEG
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 1
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 1
44803: PUSH
44804: LD_INT 1
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 0
44813: PUSH
44814: LD_INT 1
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 1
44823: NEG
44824: PUSH
44825: LD_INT 0
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 1
44834: NEG
44835: PUSH
44836: LD_INT 1
44838: NEG
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 1
44846: PUSH
44847: LD_INT 1
44849: NEG
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 2
44857: PUSH
44858: LD_INT 0
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 2
44867: PUSH
44868: LD_INT 1
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 1
44877: NEG
44878: PUSH
44879: LD_INT 1
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 2
44888: NEG
44889: PUSH
44890: LD_INT 0
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 2
44899: NEG
44900: PUSH
44901: LD_INT 1
44903: NEG
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 2
44911: PUSH
44912: LD_INT 1
44914: NEG
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 3
44922: PUSH
44923: LD_INT 0
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 3
44932: PUSH
44933: LD_INT 1
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44958: LD_ADDR_VAR 0 16
44962: PUSH
44963: LD_INT 0
44965: PUSH
44966: LD_INT 0
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 0
44975: PUSH
44976: LD_INT 1
44978: NEG
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 1
44986: PUSH
44987: LD_INT 0
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 1
44996: PUSH
44997: LD_INT 1
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 0
45006: PUSH
45007: LD_INT 1
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 1
45016: NEG
45017: PUSH
45018: LD_INT 0
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 1
45027: NEG
45028: PUSH
45029: LD_INT 1
45031: NEG
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 1
45039: NEG
45040: PUSH
45041: LD_INT 2
45043: NEG
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 2
45051: PUSH
45052: LD_INT 1
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 2
45061: PUSH
45062: LD_INT 2
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 1
45071: PUSH
45072: LD_INT 2
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 2
45081: NEG
45082: PUSH
45083: LD_INT 1
45085: NEG
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 2
45093: NEG
45094: PUSH
45095: LD_INT 2
45097: NEG
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 3
45105: PUSH
45106: LD_INT 2
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 3
45115: PUSH
45116: LD_INT 3
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 2
45125: PUSH
45126: LD_INT 3
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45151: LD_ADDR_VAR 0 17
45155: PUSH
45156: LD_INT 0
45158: PUSH
45159: LD_INT 0
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 0
45168: PUSH
45169: LD_INT 1
45171: NEG
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 1
45179: PUSH
45180: LD_INT 0
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 1
45189: PUSH
45190: LD_INT 1
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 0
45199: PUSH
45200: LD_INT 1
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 1
45209: NEG
45210: PUSH
45211: LD_INT 0
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 1
45220: NEG
45221: PUSH
45222: LD_INT 1
45224: NEG
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 1
45232: NEG
45233: PUSH
45234: LD_INT 2
45236: NEG
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 0
45244: PUSH
45245: LD_INT 2
45247: NEG
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 1
45255: PUSH
45256: LD_INT 1
45258: NEG
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 2
45266: PUSH
45267: LD_INT 0
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 2
45276: PUSH
45277: LD_INT 1
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 2
45286: PUSH
45287: LD_INT 2
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 1
45296: PUSH
45297: LD_INT 2
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 0
45306: PUSH
45307: LD_INT 2
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 1
45316: NEG
45317: PUSH
45318: LD_INT 1
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 2
45327: NEG
45328: PUSH
45329: LD_INT 0
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 2
45338: NEG
45339: PUSH
45340: LD_INT 1
45342: NEG
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 2
45350: NEG
45351: PUSH
45352: LD_INT 2
45354: NEG
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45381: LD_ADDR_VAR 0 18
45385: PUSH
45386: LD_INT 0
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 0
45398: PUSH
45399: LD_INT 1
45401: NEG
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 1
45409: PUSH
45410: LD_INT 0
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 1
45419: PUSH
45420: LD_INT 1
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 0
45429: PUSH
45430: LD_INT 1
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 1
45439: NEG
45440: PUSH
45441: LD_INT 0
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 1
45450: NEG
45451: PUSH
45452: LD_INT 1
45454: NEG
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 1
45462: NEG
45463: PUSH
45464: LD_INT 2
45466: NEG
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 0
45474: PUSH
45475: LD_INT 2
45477: NEG
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 1
45485: PUSH
45486: LD_INT 1
45488: NEG
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 2
45496: PUSH
45497: LD_INT 0
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 2
45506: PUSH
45507: LD_INT 1
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 2
45516: PUSH
45517: LD_INT 2
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 1
45526: PUSH
45527: LD_INT 2
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 0
45536: PUSH
45537: LD_INT 2
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 1
45546: NEG
45547: PUSH
45548: LD_INT 1
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 2
45557: NEG
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 2
45568: NEG
45569: PUSH
45570: LD_INT 1
45572: NEG
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 2
45580: NEG
45581: PUSH
45582: LD_INT 2
45584: NEG
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45611: LD_ADDR_VAR 0 19
45615: PUSH
45616: LD_INT 0
45618: PUSH
45619: LD_INT 0
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 0
45628: PUSH
45629: LD_INT 1
45631: NEG
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 1
45639: PUSH
45640: LD_INT 0
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 1
45649: PUSH
45650: LD_INT 1
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 0
45659: PUSH
45660: LD_INT 1
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 1
45669: NEG
45670: PUSH
45671: LD_INT 0
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 1
45680: NEG
45681: PUSH
45682: LD_INT 1
45684: NEG
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 1
45692: NEG
45693: PUSH
45694: LD_INT 2
45696: NEG
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 0
45704: PUSH
45705: LD_INT 2
45707: NEG
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 1
45715: PUSH
45716: LD_INT 1
45718: NEG
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 2
45726: PUSH
45727: LD_INT 0
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 2
45736: PUSH
45737: LD_INT 1
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 2
45746: PUSH
45747: LD_INT 2
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 1
45756: PUSH
45757: LD_INT 2
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 0
45766: PUSH
45767: LD_INT 2
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 1
45776: NEG
45777: PUSH
45778: LD_INT 1
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 2
45787: NEG
45788: PUSH
45789: LD_INT 0
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 2
45798: NEG
45799: PUSH
45800: LD_INT 1
45802: NEG
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 2
45810: NEG
45811: PUSH
45812: LD_INT 2
45814: NEG
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45841: LD_ADDR_VAR 0 20
45845: PUSH
45846: LD_INT 0
45848: PUSH
45849: LD_INT 0
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 0
45858: PUSH
45859: LD_INT 1
45861: NEG
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 1
45869: PUSH
45870: LD_INT 0
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 1
45879: PUSH
45880: LD_INT 1
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 0
45889: PUSH
45890: LD_INT 1
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 1
45899: NEG
45900: PUSH
45901: LD_INT 0
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 1
45910: NEG
45911: PUSH
45912: LD_INT 1
45914: NEG
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 1
45922: NEG
45923: PUSH
45924: LD_INT 2
45926: NEG
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 0
45934: PUSH
45935: LD_INT 2
45937: NEG
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 1
45945: PUSH
45946: LD_INT 1
45948: NEG
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 2
45956: PUSH
45957: LD_INT 0
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 2
45966: PUSH
45967: LD_INT 1
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 2
45976: PUSH
45977: LD_INT 2
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 1
45986: PUSH
45987: LD_INT 2
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 0
45996: PUSH
45997: LD_INT 2
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 1
46006: NEG
46007: PUSH
46008: LD_INT 1
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 2
46017: NEG
46018: PUSH
46019: LD_INT 0
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 2
46028: NEG
46029: PUSH
46030: LD_INT 1
46032: NEG
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 2
46040: NEG
46041: PUSH
46042: LD_INT 2
46044: NEG
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46071: LD_ADDR_VAR 0 21
46075: PUSH
46076: LD_INT 0
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: LD_INT 1
46091: NEG
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 1
46099: PUSH
46100: LD_INT 0
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 1
46109: PUSH
46110: LD_INT 1
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 0
46119: PUSH
46120: LD_INT 1
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 1
46129: NEG
46130: PUSH
46131: LD_INT 0
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 1
46140: NEG
46141: PUSH
46142: LD_INT 1
46144: NEG
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 1
46152: NEG
46153: PUSH
46154: LD_INT 2
46156: NEG
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 0
46164: PUSH
46165: LD_INT 2
46167: NEG
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 1
46175: PUSH
46176: LD_INT 1
46178: NEG
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 2
46186: PUSH
46187: LD_INT 0
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 2
46196: PUSH
46197: LD_INT 1
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 2
46206: PUSH
46207: LD_INT 2
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 1
46216: PUSH
46217: LD_INT 2
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 0
46226: PUSH
46227: LD_INT 2
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 1
46236: NEG
46237: PUSH
46238: LD_INT 1
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 2
46247: NEG
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 2
46258: NEG
46259: PUSH
46260: LD_INT 1
46262: NEG
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 2
46270: NEG
46271: PUSH
46272: LD_INT 2
46274: NEG
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46301: LD_ADDR_VAR 0 22
46305: PUSH
46306: LD_INT 0
46308: PUSH
46309: LD_INT 0
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 0
46318: PUSH
46319: LD_INT 1
46321: NEG
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 1
46329: PUSH
46330: LD_INT 0
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 1
46339: PUSH
46340: LD_INT 1
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 0
46349: PUSH
46350: LD_INT 1
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 1
46359: NEG
46360: PUSH
46361: LD_INT 0
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 1
46370: NEG
46371: PUSH
46372: LD_INT 1
46374: NEG
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 1
46382: NEG
46383: PUSH
46384: LD_INT 2
46386: NEG
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 0
46394: PUSH
46395: LD_INT 2
46397: NEG
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 1
46405: PUSH
46406: LD_INT 1
46408: NEG
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 2
46416: PUSH
46417: LD_INT 0
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 2
46426: PUSH
46427: LD_INT 1
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 2
46436: PUSH
46437: LD_INT 2
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 1
46446: PUSH
46447: LD_INT 2
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 0
46456: PUSH
46457: LD_INT 2
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 1
46466: NEG
46467: PUSH
46468: LD_INT 1
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 2
46477: NEG
46478: PUSH
46479: LD_INT 0
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 2
46488: NEG
46489: PUSH
46490: LD_INT 1
46492: NEG
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 2
46500: NEG
46501: PUSH
46502: LD_INT 2
46504: NEG
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46531: LD_ADDR_VAR 0 23
46535: PUSH
46536: LD_INT 0
46538: PUSH
46539: LD_INT 0
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 0
46548: PUSH
46549: LD_INT 1
46551: NEG
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 1
46559: PUSH
46560: LD_INT 0
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 1
46569: PUSH
46570: LD_INT 1
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 0
46579: PUSH
46580: LD_INT 1
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 1
46589: NEG
46590: PUSH
46591: LD_INT 0
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 1
46600: NEG
46601: PUSH
46602: LD_INT 1
46604: NEG
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 1
46612: NEG
46613: PUSH
46614: LD_INT 2
46616: NEG
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 0
46624: PUSH
46625: LD_INT 2
46627: NEG
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 1
46635: PUSH
46636: LD_INT 1
46638: NEG
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 2
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 2
46656: PUSH
46657: LD_INT 1
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 2
46666: PUSH
46667: LD_INT 2
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 1
46676: PUSH
46677: LD_INT 2
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 0
46686: PUSH
46687: LD_INT 2
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 1
46696: NEG
46697: PUSH
46698: LD_INT 1
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 2
46707: NEG
46708: PUSH
46709: LD_INT 0
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 2
46718: NEG
46719: PUSH
46720: LD_INT 1
46722: NEG
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 2
46730: NEG
46731: PUSH
46732: LD_INT 2
46734: NEG
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 2
46742: NEG
46743: PUSH
46744: LD_INT 3
46746: NEG
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 1
46754: NEG
46755: PUSH
46756: LD_INT 3
46758: NEG
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 1
46766: PUSH
46767: LD_INT 2
46769: NEG
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 2
46777: PUSH
46778: LD_INT 1
46780: NEG
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46811: LD_ADDR_VAR 0 24
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: LD_INT 0
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 0
46828: PUSH
46829: LD_INT 1
46831: NEG
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 1
46839: PUSH
46840: LD_INT 0
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 1
46849: PUSH
46850: LD_INT 1
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 0
46859: PUSH
46860: LD_INT 1
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 1
46869: NEG
46870: PUSH
46871: LD_INT 0
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 1
46880: NEG
46881: PUSH
46882: LD_INT 1
46884: NEG
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 1
46892: NEG
46893: PUSH
46894: LD_INT 2
46896: NEG
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 0
46904: PUSH
46905: LD_INT 2
46907: NEG
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 1
46915: PUSH
46916: LD_INT 1
46918: NEG
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 2
46926: PUSH
46927: LD_INT 0
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 2
46936: PUSH
46937: LD_INT 1
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 2
46946: PUSH
46947: LD_INT 2
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 1
46956: PUSH
46957: LD_INT 2
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 0
46966: PUSH
46967: LD_INT 2
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 1
46976: NEG
46977: PUSH
46978: LD_INT 1
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 2
46987: NEG
46988: PUSH
46989: LD_INT 0
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 2
46998: NEG
46999: PUSH
47000: LD_INT 1
47002: NEG
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 2
47010: NEG
47011: PUSH
47012: LD_INT 2
47014: NEG
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 1
47022: PUSH
47023: LD_INT 2
47025: NEG
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 2
47033: PUSH
47034: LD_INT 1
47036: NEG
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 3
47044: PUSH
47045: LD_INT 1
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 3
47054: PUSH
47055: LD_INT 2
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47087: LD_ADDR_VAR 0 25
47091: PUSH
47092: LD_INT 0
47094: PUSH
47095: LD_INT 0
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 0
47104: PUSH
47105: LD_INT 1
47107: NEG
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 1
47115: PUSH
47116: LD_INT 0
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 1
47125: PUSH
47126: LD_INT 1
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 0
47135: PUSH
47136: LD_INT 1
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 1
47145: NEG
47146: PUSH
47147: LD_INT 0
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 1
47156: NEG
47157: PUSH
47158: LD_INT 1
47160: NEG
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 1
47168: NEG
47169: PUSH
47170: LD_INT 2
47172: NEG
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 0
47180: PUSH
47181: LD_INT 2
47183: NEG
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 1
47191: PUSH
47192: LD_INT 1
47194: NEG
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 2
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 2
47212: PUSH
47213: LD_INT 1
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 2
47222: PUSH
47223: LD_INT 2
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 1
47232: PUSH
47233: LD_INT 2
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 0
47242: PUSH
47243: LD_INT 2
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 1
47252: NEG
47253: PUSH
47254: LD_INT 1
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 2
47263: NEG
47264: PUSH
47265: LD_INT 0
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 2
47274: NEG
47275: PUSH
47276: LD_INT 1
47278: NEG
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 2
47286: NEG
47287: PUSH
47288: LD_INT 2
47290: NEG
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 3
47298: PUSH
47299: LD_INT 1
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 3
47308: PUSH
47309: LD_INT 2
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 2
47318: PUSH
47319: LD_INT 3
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 1
47328: PUSH
47329: LD_INT 3
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47361: LD_ADDR_VAR 0 26
47365: PUSH
47366: LD_INT 0
47368: PUSH
47369: LD_INT 0
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 0
47378: PUSH
47379: LD_INT 1
47381: NEG
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 1
47389: PUSH
47390: LD_INT 0
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 1
47399: PUSH
47400: LD_INT 1
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 0
47409: PUSH
47410: LD_INT 1
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 1
47419: NEG
47420: PUSH
47421: LD_INT 0
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 1
47430: NEG
47431: PUSH
47432: LD_INT 1
47434: NEG
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 1
47442: NEG
47443: PUSH
47444: LD_INT 2
47446: NEG
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 0
47454: PUSH
47455: LD_INT 2
47457: NEG
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 1
47465: PUSH
47466: LD_INT 1
47468: NEG
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 2
47476: PUSH
47477: LD_INT 0
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 2
47486: PUSH
47487: LD_INT 1
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 2
47496: PUSH
47497: LD_INT 2
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 1
47506: PUSH
47507: LD_INT 2
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 0
47516: PUSH
47517: LD_INT 2
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 1
47526: NEG
47527: PUSH
47528: LD_INT 1
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 2
47537: NEG
47538: PUSH
47539: LD_INT 0
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 2
47548: NEG
47549: PUSH
47550: LD_INT 1
47552: NEG
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 2
47560: NEG
47561: PUSH
47562: LD_INT 2
47564: NEG
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 2
47572: PUSH
47573: LD_INT 3
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 1
47582: PUSH
47583: LD_INT 3
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 1
47592: NEG
47593: PUSH
47594: LD_INT 2
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 2
47603: NEG
47604: PUSH
47605: LD_INT 1
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47637: LD_ADDR_VAR 0 27
47641: PUSH
47642: LD_INT 0
47644: PUSH
47645: LD_INT 0
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 0
47654: PUSH
47655: LD_INT 1
47657: NEG
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 1
47665: PUSH
47666: LD_INT 0
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 1
47675: PUSH
47676: LD_INT 1
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 0
47685: PUSH
47686: LD_INT 1
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 1
47695: NEG
47696: PUSH
47697: LD_INT 0
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 1
47706: NEG
47707: PUSH
47708: LD_INT 1
47710: NEG
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 1
47718: NEG
47719: PUSH
47720: LD_INT 2
47722: NEG
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 0
47730: PUSH
47731: LD_INT 2
47733: NEG
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 1
47741: PUSH
47742: LD_INT 1
47744: NEG
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 2
47752: PUSH
47753: LD_INT 0
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 2
47762: PUSH
47763: LD_INT 1
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 2
47772: PUSH
47773: LD_INT 2
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 1
47782: PUSH
47783: LD_INT 2
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 0
47792: PUSH
47793: LD_INT 2
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 1
47802: NEG
47803: PUSH
47804: LD_INT 1
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 2
47813: NEG
47814: PUSH
47815: LD_INT 0
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 2
47824: NEG
47825: PUSH
47826: LD_INT 1
47828: NEG
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 2
47836: NEG
47837: PUSH
47838: LD_INT 2
47840: NEG
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 1
47848: NEG
47849: PUSH
47850: LD_INT 2
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 2
47859: NEG
47860: PUSH
47861: LD_INT 1
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 3
47870: NEG
47871: PUSH
47872: LD_INT 1
47874: NEG
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 3
47882: NEG
47883: PUSH
47884: LD_INT 2
47886: NEG
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47917: LD_ADDR_VAR 0 28
47921: PUSH
47922: LD_INT 0
47924: PUSH
47925: LD_INT 0
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 0
47934: PUSH
47935: LD_INT 1
47937: NEG
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 1
47945: PUSH
47946: LD_INT 0
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 1
47955: PUSH
47956: LD_INT 1
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 0
47965: PUSH
47966: LD_INT 1
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 1
47975: NEG
47976: PUSH
47977: LD_INT 0
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 1
47986: NEG
47987: PUSH
47988: LD_INT 1
47990: NEG
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 1
47998: NEG
47999: PUSH
48000: LD_INT 2
48002: NEG
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 0
48010: PUSH
48011: LD_INT 2
48013: NEG
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 1
48021: PUSH
48022: LD_INT 1
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 2
48032: PUSH
48033: LD_INT 0
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 2
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 2
48052: PUSH
48053: LD_INT 2
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 1
48062: PUSH
48063: LD_INT 2
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 0
48072: PUSH
48073: LD_INT 2
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 1
48082: NEG
48083: PUSH
48084: LD_INT 1
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 2
48093: NEG
48094: PUSH
48095: LD_INT 0
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 2
48104: NEG
48105: PUSH
48106: LD_INT 1
48108: NEG
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 2
48116: NEG
48117: PUSH
48118: LD_INT 2
48120: NEG
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 2
48128: NEG
48129: PUSH
48130: LD_INT 3
48132: NEG
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 1
48140: NEG
48141: PUSH
48142: LD_INT 3
48144: NEG
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 3
48152: NEG
48153: PUSH
48154: LD_INT 1
48156: NEG
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 3
48164: NEG
48165: PUSH
48166: LD_INT 2
48168: NEG
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48199: LD_ADDR_VAR 0 29
48203: PUSH
48204: LD_INT 0
48206: PUSH
48207: LD_INT 0
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 0
48216: PUSH
48217: LD_INT 1
48219: NEG
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 1
48227: PUSH
48228: LD_INT 0
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 1
48237: PUSH
48238: LD_INT 1
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 0
48247: PUSH
48248: LD_INT 1
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 1
48257: NEG
48258: PUSH
48259: LD_INT 0
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 1
48268: NEG
48269: PUSH
48270: LD_INT 1
48272: NEG
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 1
48280: NEG
48281: PUSH
48282: LD_INT 2
48284: NEG
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 0
48292: PUSH
48293: LD_INT 2
48295: NEG
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 1
48303: PUSH
48304: LD_INT 1
48306: NEG
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 2
48314: PUSH
48315: LD_INT 0
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 2
48324: PUSH
48325: LD_INT 1
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: PUSH
48335: LD_INT 2
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 0
48344: PUSH
48345: LD_INT 2
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 1
48354: NEG
48355: PUSH
48356: LD_INT 1
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 2
48365: NEG
48366: PUSH
48367: LD_INT 1
48369: NEG
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 2
48377: NEG
48378: PUSH
48379: LD_INT 2
48381: NEG
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 2
48389: NEG
48390: PUSH
48391: LD_INT 3
48393: NEG
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 2
48401: PUSH
48402: LD_INT 1
48404: NEG
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 3
48412: PUSH
48413: LD_INT 1
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 1
48422: PUSH
48423: LD_INT 3
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 1
48432: NEG
48433: PUSH
48434: LD_INT 2
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 3
48443: NEG
48444: PUSH
48445: LD_INT 2
48447: NEG
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48478: LD_ADDR_VAR 0 30
48482: PUSH
48483: LD_INT 0
48485: PUSH
48486: LD_INT 0
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 0
48495: PUSH
48496: LD_INT 1
48498: NEG
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 1
48506: PUSH
48507: LD_INT 0
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 1
48516: PUSH
48517: LD_INT 1
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 0
48526: PUSH
48527: LD_INT 1
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 1
48536: NEG
48537: PUSH
48538: LD_INT 0
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 1
48547: NEG
48548: PUSH
48549: LD_INT 1
48551: NEG
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 1
48559: NEG
48560: PUSH
48561: LD_INT 2
48563: NEG
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 0
48571: PUSH
48572: LD_INT 2
48574: NEG
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 1
48582: PUSH
48583: LD_INT 1
48585: NEG
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 2
48593: PUSH
48594: LD_INT 0
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 2
48603: PUSH
48604: LD_INT 1
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 2
48613: PUSH
48614: LD_INT 2
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 1
48623: PUSH
48624: LD_INT 2
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 1
48633: NEG
48634: PUSH
48635: LD_INT 1
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 2
48644: NEG
48645: PUSH
48646: LD_INT 0
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 2
48655: NEG
48656: PUSH
48657: LD_INT 1
48659: NEG
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 1
48667: NEG
48668: PUSH
48669: LD_INT 3
48671: NEG
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 1
48679: PUSH
48680: LD_INT 2
48682: NEG
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 3
48690: PUSH
48691: LD_INT 2
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 2
48700: PUSH
48701: LD_INT 3
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 2
48710: NEG
48711: PUSH
48712: LD_INT 1
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 3
48721: NEG
48722: PUSH
48723: LD_INT 1
48725: NEG
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48756: LD_ADDR_VAR 0 31
48760: PUSH
48761: LD_INT 0
48763: PUSH
48764: LD_INT 0
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 0
48773: PUSH
48774: LD_INT 1
48776: NEG
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 1
48784: PUSH
48785: LD_INT 0
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 1
48794: PUSH
48795: LD_INT 1
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 0
48804: PUSH
48805: LD_INT 1
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 1
48814: NEG
48815: PUSH
48816: LD_INT 0
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 1
48825: NEG
48826: PUSH
48827: LD_INT 1
48829: NEG
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 1
48837: NEG
48838: PUSH
48839: LD_INT 2
48841: NEG
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 1
48849: PUSH
48850: LD_INT 1
48852: NEG
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 2
48860: PUSH
48861: LD_INT 0
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 2
48870: PUSH
48871: LD_INT 1
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 2
48880: PUSH
48881: LD_INT 2
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 1
48890: PUSH
48891: LD_INT 2
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 0
48900: PUSH
48901: LD_INT 2
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 1
48910: NEG
48911: PUSH
48912: LD_INT 1
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 2
48921: NEG
48922: PUSH
48923: LD_INT 1
48925: NEG
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 2
48933: NEG
48934: PUSH
48935: LD_INT 2
48937: NEG
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 2
48945: NEG
48946: PUSH
48947: LD_INT 3
48949: NEG
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 2
48957: PUSH
48958: LD_INT 1
48960: NEG
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 3
48968: PUSH
48969: LD_INT 1
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 1
48978: PUSH
48979: LD_INT 3
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 1
48988: NEG
48989: PUSH
48990: LD_INT 2
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 3
48999: NEG
49000: PUSH
49001: LD_INT 2
49003: NEG
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49034: LD_ADDR_VAR 0 32
49038: PUSH
49039: LD_INT 0
49041: PUSH
49042: LD_INT 0
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 0
49051: PUSH
49052: LD_INT 1
49054: NEG
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 1
49062: PUSH
49063: LD_INT 0
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 1
49072: PUSH
49073: LD_INT 1
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 0
49082: PUSH
49083: LD_INT 1
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 1
49092: NEG
49093: PUSH
49094: LD_INT 0
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 1
49103: NEG
49104: PUSH
49105: LD_INT 1
49107: NEG
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 1
49115: NEG
49116: PUSH
49117: LD_INT 2
49119: NEG
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 0
49127: PUSH
49128: LD_INT 2
49130: NEG
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 1
49138: PUSH
49139: LD_INT 1
49141: NEG
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 2
49149: PUSH
49150: LD_INT 1
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 2
49159: PUSH
49160: LD_INT 2
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 1
49169: PUSH
49170: LD_INT 2
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 0
49179: PUSH
49180: LD_INT 2
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 1
49189: NEG
49190: PUSH
49191: LD_INT 1
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 2
49200: NEG
49201: PUSH
49202: LD_INT 0
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 2
49211: NEG
49212: PUSH
49213: LD_INT 1
49215: NEG
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 1
49223: NEG
49224: PUSH
49225: LD_INT 3
49227: NEG
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 1
49235: PUSH
49236: LD_INT 2
49238: NEG
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 3
49246: PUSH
49247: LD_INT 2
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 2
49256: PUSH
49257: LD_INT 3
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 2
49266: NEG
49267: PUSH
49268: LD_INT 1
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 3
49277: NEG
49278: PUSH
49279: LD_INT 1
49281: NEG
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49312: LD_ADDR_VAR 0 33
49316: PUSH
49317: LD_INT 0
49319: PUSH
49320: LD_INT 0
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 0
49329: PUSH
49330: LD_INT 1
49332: NEG
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 1
49340: PUSH
49341: LD_INT 0
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 1
49350: PUSH
49351: LD_INT 1
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 0
49360: PUSH
49361: LD_INT 1
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 1
49370: NEG
49371: PUSH
49372: LD_INT 0
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 1
49381: NEG
49382: PUSH
49383: LD_INT 1
49385: NEG
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 1
49393: NEG
49394: PUSH
49395: LD_INT 2
49397: NEG
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 1
49405: PUSH
49406: LD_INT 1
49408: NEG
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 2
49416: PUSH
49417: LD_INT 0
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 2
49426: PUSH
49427: LD_INT 1
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 1
49436: PUSH
49437: LD_INT 2
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 0
49446: PUSH
49447: LD_INT 2
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 1
49456: NEG
49457: PUSH
49458: LD_INT 1
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 2
49467: NEG
49468: PUSH
49469: LD_INT 0
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 2
49478: NEG
49479: PUSH
49480: LD_INT 1
49482: NEG
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 2
49490: NEG
49491: PUSH
49492: LD_INT 2
49494: NEG
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 2
49502: NEG
49503: PUSH
49504: LD_INT 3
49506: NEG
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 2
49514: PUSH
49515: LD_INT 1
49517: NEG
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 3
49525: PUSH
49526: LD_INT 1
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 1
49535: PUSH
49536: LD_INT 3
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 1
49545: NEG
49546: PUSH
49547: LD_INT 2
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 3
49556: NEG
49557: PUSH
49558: LD_INT 2
49560: NEG
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49591: LD_ADDR_VAR 0 34
49595: PUSH
49596: LD_INT 0
49598: PUSH
49599: LD_INT 0
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 0
49608: PUSH
49609: LD_INT 1
49611: NEG
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 1
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 1
49629: PUSH
49630: LD_INT 1
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 0
49639: PUSH
49640: LD_INT 1
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 1
49649: NEG
49650: PUSH
49651: LD_INT 0
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 1
49660: NEG
49661: PUSH
49662: LD_INT 1
49664: NEG
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 1
49672: NEG
49673: PUSH
49674: LD_INT 2
49676: NEG
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 0
49684: PUSH
49685: LD_INT 2
49687: NEG
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 1
49695: PUSH
49696: LD_INT 1
49698: NEG
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 2
49706: PUSH
49707: LD_INT 1
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 2
49716: PUSH
49717: LD_INT 2
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 1
49726: PUSH
49727: LD_INT 2
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 1
49736: NEG
49737: PUSH
49738: LD_INT 1
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 2
49747: NEG
49748: PUSH
49749: LD_INT 0
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 2
49758: NEG
49759: PUSH
49760: LD_INT 1
49762: NEG
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 2
49770: NEG
49771: PUSH
49772: LD_INT 2
49774: NEG
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 1
49782: NEG
49783: PUSH
49784: LD_INT 3
49786: NEG
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 1
49794: PUSH
49795: LD_INT 2
49797: NEG
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 3
49805: PUSH
49806: LD_INT 2
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 2
49815: PUSH
49816: LD_INT 3
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 2
49825: NEG
49826: PUSH
49827: LD_INT 1
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 3
49836: NEG
49837: PUSH
49838: LD_INT 1
49840: NEG
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49871: LD_ADDR_VAR 0 35
49875: PUSH
49876: LD_INT 0
49878: PUSH
49879: LD_INT 0
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 0
49888: PUSH
49889: LD_INT 1
49891: NEG
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 1
49899: PUSH
49900: LD_INT 0
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 1
49909: PUSH
49910: LD_INT 1
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 0
49919: PUSH
49920: LD_INT 1
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 1
49929: NEG
49930: PUSH
49931: LD_INT 0
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 1
49940: NEG
49941: PUSH
49942: LD_INT 1
49944: NEG
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 2
49952: PUSH
49953: LD_INT 1
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 2
49962: NEG
49963: PUSH
49964: LD_INT 1
49966: NEG
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49983: LD_ADDR_VAR 0 36
49987: PUSH
49988: LD_INT 0
49990: PUSH
49991: LD_INT 0
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 0
50000: PUSH
50001: LD_INT 1
50003: NEG
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 1
50011: PUSH
50012: LD_INT 0
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 1
50021: PUSH
50022: LD_INT 1
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 0
50031: PUSH
50032: LD_INT 1
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 1
50041: NEG
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 1
50052: NEG
50053: PUSH
50054: LD_INT 1
50056: NEG
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 1
50064: NEG
50065: PUSH
50066: LD_INT 2
50068: NEG
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 1
50076: PUSH
50077: LD_INT 2
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50095: LD_ADDR_VAR 0 37
50099: PUSH
50100: LD_INT 0
50102: PUSH
50103: LD_INT 0
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 0
50112: PUSH
50113: LD_INT 1
50115: NEG
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 1
50123: PUSH
50124: LD_INT 0
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 1
50133: PUSH
50134: LD_INT 1
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 0
50143: PUSH
50144: LD_INT 1
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 1
50153: NEG
50154: PUSH
50155: LD_INT 0
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 1
50164: NEG
50165: PUSH
50166: LD_INT 1
50168: NEG
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 1
50176: PUSH
50177: LD_INT 1
50179: NEG
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 1
50187: NEG
50188: PUSH
50189: LD_INT 1
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50207: LD_ADDR_VAR 0 38
50211: PUSH
50212: LD_INT 0
50214: PUSH
50215: LD_INT 0
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 0
50224: PUSH
50225: LD_INT 1
50227: NEG
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 1
50235: PUSH
50236: LD_INT 0
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 1
50245: PUSH
50246: LD_INT 1
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 0
50255: PUSH
50256: LD_INT 1
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 1
50265: NEG
50266: PUSH
50267: LD_INT 0
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 1
50276: NEG
50277: PUSH
50278: LD_INT 1
50280: NEG
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 2
50288: PUSH
50289: LD_INT 1
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 2
50298: NEG
50299: PUSH
50300: LD_INT 1
50302: NEG
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50319: LD_ADDR_VAR 0 39
50323: PUSH
50324: LD_INT 0
50326: PUSH
50327: LD_INT 0
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 0
50336: PUSH
50337: LD_INT 1
50339: NEG
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 1
50347: PUSH
50348: LD_INT 0
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 1
50357: PUSH
50358: LD_INT 1
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 0
50367: PUSH
50368: LD_INT 1
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 1
50377: NEG
50378: PUSH
50379: LD_INT 0
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 1
50388: NEG
50389: PUSH
50390: LD_INT 1
50392: NEG
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 1
50400: NEG
50401: PUSH
50402: LD_INT 2
50404: NEG
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 1
50412: PUSH
50413: LD_INT 2
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50431: LD_ADDR_VAR 0 40
50435: PUSH
50436: LD_INT 0
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: LD_INT 1
50451: NEG
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 1
50459: PUSH
50460: LD_INT 0
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 1
50469: PUSH
50470: LD_INT 1
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 0
50479: PUSH
50480: LD_INT 1
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 1
50489: NEG
50490: PUSH
50491: LD_INT 0
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 1
50500: NEG
50501: PUSH
50502: LD_INT 1
50504: NEG
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 1
50512: PUSH
50513: LD_INT 1
50515: NEG
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 1
50523: NEG
50524: PUSH
50525: LD_INT 1
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50543: LD_ADDR_VAR 0 41
50547: PUSH
50548: LD_INT 0
50550: PUSH
50551: LD_INT 0
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 0
50560: PUSH
50561: LD_INT 1
50563: NEG
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 1
50571: PUSH
50572: LD_INT 0
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 1
50581: PUSH
50582: LD_INT 1
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 0
50591: PUSH
50592: LD_INT 1
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 1
50601: NEG
50602: PUSH
50603: LD_INT 0
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 1
50612: NEG
50613: PUSH
50614: LD_INT 1
50616: NEG
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 1
50624: NEG
50625: PUSH
50626: LD_INT 2
50628: NEG
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 1
50636: PUSH
50637: LD_INT 1
50639: NEG
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 2
50647: PUSH
50648: LD_INT 0
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 2
50657: PUSH
50658: LD_INT 1
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 2
50667: PUSH
50668: LD_INT 2
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 1
50677: PUSH
50678: LD_INT 2
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 1
50687: NEG
50688: PUSH
50689: LD_INT 1
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 2
50698: NEG
50699: PUSH
50700: LD_INT 0
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 2
50709: NEG
50710: PUSH
50711: LD_INT 1
50713: NEG
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 2
50721: NEG
50722: PUSH
50723: LD_INT 2
50725: NEG
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 2
50733: NEG
50734: PUSH
50735: LD_INT 3
50737: NEG
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 2
50745: PUSH
50746: LD_INT 1
50748: NEG
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 3
50756: PUSH
50757: LD_INT 0
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 3
50766: PUSH
50767: LD_INT 1
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 3
50776: PUSH
50777: LD_INT 2
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 3
50786: PUSH
50787: LD_INT 3
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 2
50796: PUSH
50797: LD_INT 3
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 2
50806: NEG
50807: PUSH
50808: LD_INT 1
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 3
50817: NEG
50818: PUSH
50819: LD_INT 0
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 3
50828: NEG
50829: PUSH
50830: LD_INT 1
50832: NEG
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 3
50840: NEG
50841: PUSH
50842: LD_INT 2
50844: NEG
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 3
50852: NEG
50853: PUSH
50854: LD_INT 3
50856: NEG
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50893: LD_ADDR_VAR 0 42
50897: PUSH
50898: LD_INT 0
50900: PUSH
50901: LD_INT 0
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 0
50910: PUSH
50911: LD_INT 1
50913: NEG
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 1
50921: PUSH
50922: LD_INT 0
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 1
50931: PUSH
50932: LD_INT 1
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 0
50941: PUSH
50942: LD_INT 1
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 1
50951: NEG
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 1
50962: NEG
50963: PUSH
50964: LD_INT 1
50966: NEG
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 1
50974: NEG
50975: PUSH
50976: LD_INT 2
50978: NEG
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 0
50986: PUSH
50987: LD_INT 2
50989: NEG
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 1
50997: PUSH
50998: LD_INT 1
51000: NEG
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 2
51008: PUSH
51009: LD_INT 1
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 2
51018: PUSH
51019: LD_INT 2
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 1
51028: PUSH
51029: LD_INT 2
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 0
51038: PUSH
51039: LD_INT 2
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 1
51048: NEG
51049: PUSH
51050: LD_INT 1
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 2
51059: NEG
51060: PUSH
51061: LD_INT 1
51063: NEG
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 2
51071: NEG
51072: PUSH
51073: LD_INT 2
51075: NEG
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 2
51083: NEG
51084: PUSH
51085: LD_INT 3
51087: NEG
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 1
51095: NEG
51096: PUSH
51097: LD_INT 3
51099: NEG
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: LD_INT 3
51110: NEG
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 1
51118: PUSH
51119: LD_INT 2
51121: NEG
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 3
51129: PUSH
51130: LD_INT 2
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 3
51139: PUSH
51140: LD_INT 3
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 2
51149: PUSH
51150: LD_INT 3
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 1
51159: PUSH
51160: LD_INT 3
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 0
51169: PUSH
51170: LD_INT 3
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 1
51179: NEG
51180: PUSH
51181: LD_INT 2
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 3
51190: NEG
51191: PUSH
51192: LD_INT 2
51194: NEG
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 3
51202: NEG
51203: PUSH
51204: LD_INT 3
51206: NEG
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51243: LD_ADDR_VAR 0 43
51247: PUSH
51248: LD_INT 0
51250: PUSH
51251: LD_INT 0
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 0
51260: PUSH
51261: LD_INT 1
51263: NEG
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 1
51271: PUSH
51272: LD_INT 0
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 1
51281: PUSH
51282: LD_INT 1
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 0
51291: PUSH
51292: LD_INT 1
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 1
51301: NEG
51302: PUSH
51303: LD_INT 0
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 1
51312: NEG
51313: PUSH
51314: LD_INT 1
51316: NEG
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 1
51324: NEG
51325: PUSH
51326: LD_INT 2
51328: NEG
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 0
51336: PUSH
51337: LD_INT 2
51339: NEG
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 1
51347: PUSH
51348: LD_INT 1
51350: NEG
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 2
51358: PUSH
51359: LD_INT 0
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 2
51368: PUSH
51369: LD_INT 1
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 1
51378: PUSH
51379: LD_INT 2
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 0
51388: PUSH
51389: LD_INT 2
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 1
51398: NEG
51399: PUSH
51400: LD_INT 1
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 2
51409: NEG
51410: PUSH
51411: LD_INT 0
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 2
51420: NEG
51421: PUSH
51422: LD_INT 1
51424: NEG
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 1
51432: NEG
51433: PUSH
51434: LD_INT 3
51436: NEG
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 0
51444: PUSH
51445: LD_INT 3
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 1
51455: PUSH
51456: LD_INT 2
51458: NEG
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 2
51466: PUSH
51467: LD_INT 1
51469: NEG
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 3
51477: PUSH
51478: LD_INT 0
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 3
51487: PUSH
51488: LD_INT 1
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 1
51497: PUSH
51498: LD_INT 3
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 0
51507: PUSH
51508: LD_INT 3
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 1
51517: NEG
51518: PUSH
51519: LD_INT 2
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 2
51528: NEG
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 3
51539: NEG
51540: PUSH
51541: LD_INT 0
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 3
51550: NEG
51551: PUSH
51552: LD_INT 1
51554: NEG
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51591: LD_ADDR_VAR 0 44
51595: PUSH
51596: LD_INT 0
51598: PUSH
51599: LD_INT 0
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 0
51608: PUSH
51609: LD_INT 1
51611: NEG
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 1
51619: PUSH
51620: LD_INT 0
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 1
51629: PUSH
51630: LD_INT 1
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 0
51639: PUSH
51640: LD_INT 1
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 1
51649: NEG
51650: PUSH
51651: LD_INT 0
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 1
51660: NEG
51661: PUSH
51662: LD_INT 1
51664: NEG
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 1
51672: NEG
51673: PUSH
51674: LD_INT 2
51676: NEG
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 1
51684: PUSH
51685: LD_INT 1
51687: NEG
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 2
51695: PUSH
51696: LD_INT 0
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 2
51705: PUSH
51706: LD_INT 1
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 2
51715: PUSH
51716: LD_INT 2
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 1
51725: PUSH
51726: LD_INT 2
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 1
51735: NEG
51736: PUSH
51737: LD_INT 1
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 2
51746: NEG
51747: PUSH
51748: LD_INT 0
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 2
51757: NEG
51758: PUSH
51759: LD_INT 1
51761: NEG
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 2
51769: NEG
51770: PUSH
51771: LD_INT 2
51773: NEG
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 2
51781: NEG
51782: PUSH
51783: LD_INT 3
51785: NEG
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 2
51793: PUSH
51794: LD_INT 1
51796: NEG
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 3
51804: PUSH
51805: LD_INT 0
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 3
51814: PUSH
51815: LD_INT 1
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 3
51824: PUSH
51825: LD_INT 2
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 3
51834: PUSH
51835: LD_INT 3
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 2
51844: PUSH
51845: LD_INT 3
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 2
51854: NEG
51855: PUSH
51856: LD_INT 1
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 3
51865: NEG
51866: PUSH
51867: LD_INT 0
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 3
51876: NEG
51877: PUSH
51878: LD_INT 1
51880: NEG
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 3
51888: NEG
51889: PUSH
51890: LD_INT 2
51892: NEG
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 3
51900: NEG
51901: PUSH
51902: LD_INT 3
51904: NEG
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51941: LD_ADDR_VAR 0 45
51945: PUSH
51946: LD_INT 0
51948: PUSH
51949: LD_INT 0
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 0
51958: PUSH
51959: LD_INT 1
51961: NEG
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 1
51969: PUSH
51970: LD_INT 0
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 1
51979: PUSH
51980: LD_INT 1
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 0
51989: PUSH
51990: LD_INT 1
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 1
51999: NEG
52000: PUSH
52001: LD_INT 0
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 1
52010: NEG
52011: PUSH
52012: LD_INT 1
52014: NEG
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 1
52022: NEG
52023: PUSH
52024: LD_INT 2
52026: NEG
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 0
52034: PUSH
52035: LD_INT 2
52037: NEG
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 1
52045: PUSH
52046: LD_INT 1
52048: NEG
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 2
52056: PUSH
52057: LD_INT 1
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 2
52066: PUSH
52067: LD_INT 2
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 1
52076: PUSH
52077: LD_INT 2
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 0
52086: PUSH
52087: LD_INT 2
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 1
52096: NEG
52097: PUSH
52098: LD_INT 1
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 2
52107: NEG
52108: PUSH
52109: LD_INT 1
52111: NEG
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 2
52119: NEG
52120: PUSH
52121: LD_INT 2
52123: NEG
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 2
52131: NEG
52132: PUSH
52133: LD_INT 3
52135: NEG
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 1
52143: NEG
52144: PUSH
52145: LD_INT 3
52147: NEG
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 0
52155: PUSH
52156: LD_INT 3
52158: NEG
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 1
52166: PUSH
52167: LD_INT 2
52169: NEG
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 3
52177: PUSH
52178: LD_INT 2
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 3
52187: PUSH
52188: LD_INT 3
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 2
52197: PUSH
52198: LD_INT 3
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 1
52207: PUSH
52208: LD_INT 3
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 0
52217: PUSH
52218: LD_INT 3
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 1
52227: NEG
52228: PUSH
52229: LD_INT 2
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 3
52238: NEG
52239: PUSH
52240: LD_INT 2
52242: NEG
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 3
52250: NEG
52251: PUSH
52252: LD_INT 3
52254: NEG
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52291: LD_ADDR_VAR 0 46
52295: PUSH
52296: LD_INT 0
52298: PUSH
52299: LD_INT 0
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 0
52308: PUSH
52309: LD_INT 1
52311: NEG
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 1
52319: PUSH
52320: LD_INT 0
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 1
52329: PUSH
52330: LD_INT 1
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: LD_INT 1
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 1
52349: NEG
52350: PUSH
52351: LD_INT 0
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 1
52360: NEG
52361: PUSH
52362: LD_INT 1
52364: NEG
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 1
52372: NEG
52373: PUSH
52374: LD_INT 2
52376: NEG
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 0
52384: PUSH
52385: LD_INT 2
52387: NEG
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 1
52395: PUSH
52396: LD_INT 1
52398: NEG
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 2
52406: PUSH
52407: LD_INT 0
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 2
52416: PUSH
52417: LD_INT 1
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 1
52426: PUSH
52427: LD_INT 2
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 0
52436: PUSH
52437: LD_INT 2
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 1
52446: NEG
52447: PUSH
52448: LD_INT 1
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 2
52457: NEG
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 2
52468: NEG
52469: PUSH
52470: LD_INT 1
52472: NEG
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 1
52480: NEG
52481: PUSH
52482: LD_INT 3
52484: NEG
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 0
52492: PUSH
52493: LD_INT 3
52495: NEG
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 1
52503: PUSH
52504: LD_INT 2
52506: NEG
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 2
52514: PUSH
52515: LD_INT 1
52517: NEG
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 3
52525: PUSH
52526: LD_INT 0
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 3
52535: PUSH
52536: LD_INT 1
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 1
52545: PUSH
52546: LD_INT 3
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 0
52555: PUSH
52556: LD_INT 3
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 1
52565: NEG
52566: PUSH
52567: LD_INT 2
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 2
52576: NEG
52577: PUSH
52578: LD_INT 1
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 3
52587: NEG
52588: PUSH
52589: LD_INT 0
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 3
52598: NEG
52599: PUSH
52600: LD_INT 1
52602: NEG
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52639: LD_ADDR_VAR 0 47
52643: PUSH
52644: LD_INT 0
52646: PUSH
52647: LD_INT 0
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 0
52656: PUSH
52657: LD_INT 1
52659: NEG
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 1
52667: PUSH
52668: LD_INT 0
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 1
52677: PUSH
52678: LD_INT 1
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 0
52687: PUSH
52688: LD_INT 1
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 1
52697: NEG
52698: PUSH
52699: LD_INT 0
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 1
52708: NEG
52709: PUSH
52710: LD_INT 1
52712: NEG
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 1
52720: NEG
52721: PUSH
52722: LD_INT 2
52724: NEG
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 0
52732: PUSH
52733: LD_INT 2
52735: NEG
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 1
52743: PUSH
52744: LD_INT 1
52746: NEG
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 2
52754: NEG
52755: PUSH
52756: LD_INT 1
52758: NEG
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 2
52766: NEG
52767: PUSH
52768: LD_INT 2
52770: NEG
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52790: LD_ADDR_VAR 0 48
52794: PUSH
52795: LD_INT 0
52797: PUSH
52798: LD_INT 0
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 0
52807: PUSH
52808: LD_INT 1
52810: NEG
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 1
52818: PUSH
52819: LD_INT 0
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 1
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 0
52838: PUSH
52839: LD_INT 1
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 1
52848: NEG
52849: PUSH
52850: LD_INT 0
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 1
52859: NEG
52860: PUSH
52861: LD_INT 1
52863: NEG
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 1
52871: NEG
52872: PUSH
52873: LD_INT 2
52875: NEG
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 0
52883: PUSH
52884: LD_INT 2
52886: NEG
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 1
52894: PUSH
52895: LD_INT 1
52897: NEG
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 2
52905: PUSH
52906: LD_INT 0
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 2
52915: PUSH
52916: LD_INT 1
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52937: LD_ADDR_VAR 0 49
52941: PUSH
52942: LD_INT 0
52944: PUSH
52945: LD_INT 0
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 0
52954: PUSH
52955: LD_INT 1
52957: NEG
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 1
52965: PUSH
52966: LD_INT 0
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 1
52975: PUSH
52976: LD_INT 1
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 0
52985: PUSH
52986: LD_INT 1
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 1
52995: NEG
52996: PUSH
52997: LD_INT 0
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 1
53006: NEG
53007: PUSH
53008: LD_INT 1
53010: NEG
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 1
53018: PUSH
53019: LD_INT 1
53021: NEG
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 2
53029: PUSH
53030: LD_INT 0
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 2
53039: PUSH
53040: LD_INT 1
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 2
53049: PUSH
53050: LD_INT 2
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 1
53059: PUSH
53060: LD_INT 2
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53081: LD_ADDR_VAR 0 50
53085: PUSH
53086: LD_INT 0
53088: PUSH
53089: LD_INT 0
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 0
53098: PUSH
53099: LD_INT 1
53101: NEG
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 1
53109: PUSH
53110: LD_INT 0
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 1
53119: PUSH
53120: LD_INT 1
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 0
53129: PUSH
53130: LD_INT 1
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 1
53139: NEG
53140: PUSH
53141: LD_INT 0
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 1
53150: NEG
53151: PUSH
53152: LD_INT 1
53154: NEG
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 2
53162: PUSH
53163: LD_INT 1
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 2
53172: PUSH
53173: LD_INT 2
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 1
53182: PUSH
53183: LD_INT 2
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 0
53192: PUSH
53193: LD_INT 2
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 1
53202: NEG
53203: PUSH
53204: LD_INT 1
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53225: LD_ADDR_VAR 0 51
53229: PUSH
53230: LD_INT 0
53232: PUSH
53233: LD_INT 0
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 0
53242: PUSH
53243: LD_INT 1
53245: NEG
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 1
53253: PUSH
53254: LD_INT 0
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 1
53263: PUSH
53264: LD_INT 1
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 0
53273: PUSH
53274: LD_INT 1
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 1
53283: NEG
53284: PUSH
53285: LD_INT 0
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 1
53294: NEG
53295: PUSH
53296: LD_INT 1
53298: NEG
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 1
53306: PUSH
53307: LD_INT 2
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 0
53316: PUSH
53317: LD_INT 2
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 1
53326: NEG
53327: PUSH
53328: LD_INT 1
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 2
53337: NEG
53338: PUSH
53339: LD_INT 0
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 2
53348: NEG
53349: PUSH
53350: LD_INT 1
53352: NEG
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53372: LD_ADDR_VAR 0 52
53376: PUSH
53377: LD_INT 0
53379: PUSH
53380: LD_INT 0
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 0
53389: PUSH
53390: LD_INT 1
53392: NEG
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 1
53400: PUSH
53401: LD_INT 0
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 1
53410: PUSH
53411: LD_INT 1
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 0
53420: PUSH
53421: LD_INT 1
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 1
53430: NEG
53431: PUSH
53432: LD_INT 0
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 1
53441: NEG
53442: PUSH
53443: LD_INT 1
53445: NEG
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 1
53453: NEG
53454: PUSH
53455: LD_INT 2
53457: NEG
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 1
53465: NEG
53466: PUSH
53467: LD_INT 1
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 2
53476: NEG
53477: PUSH
53478: LD_INT 0
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 2
53487: NEG
53488: PUSH
53489: LD_INT 1
53491: NEG
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 2
53499: NEG
53500: PUSH
53501: LD_INT 2
53503: NEG
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53523: LD_ADDR_VAR 0 53
53527: PUSH
53528: LD_INT 0
53530: PUSH
53531: LD_INT 0
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 0
53540: PUSH
53541: LD_INT 1
53543: NEG
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 1
53551: PUSH
53552: LD_INT 0
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 1
53561: PUSH
53562: LD_INT 1
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 0
53571: PUSH
53572: LD_INT 1
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 1
53581: NEG
53582: PUSH
53583: LD_INT 0
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 1
53592: NEG
53593: PUSH
53594: LD_INT 1
53596: NEG
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 1
53604: NEG
53605: PUSH
53606: LD_INT 2
53608: NEG
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 0
53616: PUSH
53617: LD_INT 2
53619: NEG
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 1
53627: PUSH
53628: LD_INT 1
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 2
53638: PUSH
53639: LD_INT 0
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 2
53648: PUSH
53649: LD_INT 1
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 2
53658: PUSH
53659: LD_INT 2
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 1
53668: PUSH
53669: LD_INT 2
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 0
53678: PUSH
53679: LD_INT 2
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 1
53688: NEG
53689: PUSH
53690: LD_INT 1
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 2
53699: NEG
53700: PUSH
53701: LD_INT 0
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 2
53710: NEG
53711: PUSH
53712: LD_INT 1
53714: NEG
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 2
53722: NEG
53723: PUSH
53724: LD_INT 2
53726: NEG
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53753: LD_ADDR_VAR 0 54
53757: PUSH
53758: LD_INT 0
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 0
53770: PUSH
53771: LD_INT 1
53773: NEG
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 1
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 1
53791: PUSH
53792: LD_INT 1
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 0
53801: PUSH
53802: LD_INT 1
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 1
53811: NEG
53812: PUSH
53813: LD_INT 0
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 1
53822: NEG
53823: PUSH
53824: LD_INT 1
53826: NEG
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 1
53834: NEG
53835: PUSH
53836: LD_INT 2
53838: NEG
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 0
53846: PUSH
53847: LD_INT 2
53849: NEG
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 1
53857: PUSH
53858: LD_INT 1
53860: NEG
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 2
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 2
53878: PUSH
53879: LD_INT 1
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 2
53888: PUSH
53889: LD_INT 2
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 1
53898: PUSH
53899: LD_INT 2
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 0
53908: PUSH
53909: LD_INT 2
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 1
53918: NEG
53919: PUSH
53920: LD_INT 1
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 2
53929: NEG
53930: PUSH
53931: LD_INT 0
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 2
53940: NEG
53941: PUSH
53942: LD_INT 1
53944: NEG
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 2
53952: NEG
53953: PUSH
53954: LD_INT 2
53956: NEG
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53983: LD_ADDR_VAR 0 55
53987: PUSH
53988: LD_INT 0
53990: PUSH
53991: LD_INT 0
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 0
54000: PUSH
54001: LD_INT 1
54003: NEG
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 1
54011: PUSH
54012: LD_INT 0
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 1
54021: PUSH
54022: LD_INT 1
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 0
54031: PUSH
54032: LD_INT 1
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 1
54041: NEG
54042: PUSH
54043: LD_INT 0
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 1
54052: NEG
54053: PUSH
54054: LD_INT 1
54056: NEG
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 1
54064: NEG
54065: PUSH
54066: LD_INT 2
54068: NEG
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 0
54076: PUSH
54077: LD_INT 2
54079: NEG
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 1
54087: PUSH
54088: LD_INT 1
54090: NEG
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 2
54098: PUSH
54099: LD_INT 0
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 2
54108: PUSH
54109: LD_INT 1
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 2
54118: PUSH
54119: LD_INT 2
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 1
54128: PUSH
54129: LD_INT 2
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 0
54138: PUSH
54139: LD_INT 2
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 1
54148: NEG
54149: PUSH
54150: LD_INT 1
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 2
54159: NEG
54160: PUSH
54161: LD_INT 0
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 2
54170: NEG
54171: PUSH
54172: LD_INT 1
54174: NEG
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 2
54182: NEG
54183: PUSH
54184: LD_INT 2
54186: NEG
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54213: LD_ADDR_VAR 0 56
54217: PUSH
54218: LD_INT 0
54220: PUSH
54221: LD_INT 0
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 0
54230: PUSH
54231: LD_INT 1
54233: NEG
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 1
54241: PUSH
54242: LD_INT 0
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 1
54251: PUSH
54252: LD_INT 1
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 0
54261: PUSH
54262: LD_INT 1
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 1
54271: NEG
54272: PUSH
54273: LD_INT 0
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 1
54282: NEG
54283: PUSH
54284: LD_INT 1
54286: NEG
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 1
54294: NEG
54295: PUSH
54296: LD_INT 2
54298: NEG
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 0
54306: PUSH
54307: LD_INT 2
54309: NEG
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 1
54317: PUSH
54318: LD_INT 1
54320: NEG
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 2
54328: PUSH
54329: LD_INT 0
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 2
54338: PUSH
54339: LD_INT 1
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 2
54348: PUSH
54349: LD_INT 2
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 1
54358: PUSH
54359: LD_INT 2
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 0
54368: PUSH
54369: LD_INT 2
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 1
54378: NEG
54379: PUSH
54380: LD_INT 1
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 2
54389: NEG
54390: PUSH
54391: LD_INT 0
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 2
54400: NEG
54401: PUSH
54402: LD_INT 1
54404: NEG
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 2
54412: NEG
54413: PUSH
54414: LD_INT 2
54416: NEG
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54443: LD_ADDR_VAR 0 57
54447: PUSH
54448: LD_INT 0
54450: PUSH
54451: LD_INT 0
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 0
54460: PUSH
54461: LD_INT 1
54463: NEG
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 1
54471: PUSH
54472: LD_INT 0
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 1
54481: PUSH
54482: LD_INT 1
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 0
54491: PUSH
54492: LD_INT 1
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 1
54501: NEG
54502: PUSH
54503: LD_INT 0
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 1
54512: NEG
54513: PUSH
54514: LD_INT 1
54516: NEG
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 1
54524: NEG
54525: PUSH
54526: LD_INT 2
54528: NEG
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 0
54536: PUSH
54537: LD_INT 2
54539: NEG
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 1
54547: PUSH
54548: LD_INT 1
54550: NEG
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 2
54558: PUSH
54559: LD_INT 0
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 2
54568: PUSH
54569: LD_INT 1
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 2
54578: PUSH
54579: LD_INT 2
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 1
54588: PUSH
54589: LD_INT 2
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 0
54598: PUSH
54599: LD_INT 2
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 1
54608: NEG
54609: PUSH
54610: LD_INT 1
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 2
54619: NEG
54620: PUSH
54621: LD_INT 0
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 2
54630: NEG
54631: PUSH
54632: LD_INT 1
54634: NEG
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 2
54642: NEG
54643: PUSH
54644: LD_INT 2
54646: NEG
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54673: LD_ADDR_VAR 0 58
54677: PUSH
54678: LD_INT 0
54680: PUSH
54681: LD_INT 0
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 0
54690: PUSH
54691: LD_INT 1
54693: NEG
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 1
54701: PUSH
54702: LD_INT 0
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 1
54711: PUSH
54712: LD_INT 1
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 0
54721: PUSH
54722: LD_INT 1
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 1
54731: NEG
54732: PUSH
54733: LD_INT 0
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 1
54742: NEG
54743: PUSH
54744: LD_INT 1
54746: NEG
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 1
54754: NEG
54755: PUSH
54756: LD_INT 2
54758: NEG
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 0
54766: PUSH
54767: LD_INT 2
54769: NEG
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 1
54777: PUSH
54778: LD_INT 1
54780: NEG
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 2
54788: PUSH
54789: LD_INT 0
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 2
54798: PUSH
54799: LD_INT 1
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 2
54808: PUSH
54809: LD_INT 2
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 1
54818: PUSH
54819: LD_INT 2
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 0
54828: PUSH
54829: LD_INT 2
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 1
54838: NEG
54839: PUSH
54840: LD_INT 1
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 2
54849: NEG
54850: PUSH
54851: LD_INT 0
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 2
54860: NEG
54861: PUSH
54862: LD_INT 1
54864: NEG
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 2
54872: NEG
54873: PUSH
54874: LD_INT 2
54876: NEG
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54903: LD_ADDR_VAR 0 59
54907: PUSH
54908: LD_INT 0
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 0
54920: PUSH
54921: LD_INT 1
54923: NEG
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 1
54931: PUSH
54932: LD_INT 0
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 1
54941: PUSH
54942: LD_INT 1
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 0
54951: PUSH
54952: LD_INT 1
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 1
54961: NEG
54962: PUSH
54963: LD_INT 0
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 1
54972: NEG
54973: PUSH
54974: LD_INT 1
54976: NEG
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54991: LD_ADDR_VAR 0 60
54995: PUSH
54996: LD_INT 0
54998: PUSH
54999: LD_INT 0
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 0
55008: PUSH
55009: LD_INT 1
55011: NEG
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 1
55019: PUSH
55020: LD_INT 0
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 1
55029: PUSH
55030: LD_INT 1
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 0
55039: PUSH
55040: LD_INT 1
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 1
55049: NEG
55050: PUSH
55051: LD_INT 0
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 1
55060: NEG
55061: PUSH
55062: LD_INT 1
55064: NEG
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55079: LD_ADDR_VAR 0 61
55083: PUSH
55084: LD_INT 0
55086: PUSH
55087: LD_INT 0
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 0
55096: PUSH
55097: LD_INT 1
55099: NEG
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 1
55107: PUSH
55108: LD_INT 0
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 1
55117: PUSH
55118: LD_INT 1
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 0
55127: PUSH
55128: LD_INT 1
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 1
55137: NEG
55138: PUSH
55139: LD_INT 0
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 1
55148: NEG
55149: PUSH
55150: LD_INT 1
55152: NEG
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55167: LD_ADDR_VAR 0 62
55171: PUSH
55172: LD_INT 0
55174: PUSH
55175: LD_INT 0
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 0
55184: PUSH
55185: LD_INT 1
55187: NEG
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 1
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 1
55205: PUSH
55206: LD_INT 1
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 0
55215: PUSH
55216: LD_INT 1
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 1
55225: NEG
55226: PUSH
55227: LD_INT 0
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 1
55236: NEG
55237: PUSH
55238: LD_INT 1
55240: NEG
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55255: LD_ADDR_VAR 0 63
55259: PUSH
55260: LD_INT 0
55262: PUSH
55263: LD_INT 0
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 0
55272: PUSH
55273: LD_INT 1
55275: NEG
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 1
55283: PUSH
55284: LD_INT 0
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 1
55293: PUSH
55294: LD_INT 1
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 0
55303: PUSH
55304: LD_INT 1
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 1
55313: NEG
55314: PUSH
55315: LD_INT 0
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 1
55324: NEG
55325: PUSH
55326: LD_INT 1
55328: NEG
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55343: LD_ADDR_VAR 0 64
55347: PUSH
55348: LD_INT 0
55350: PUSH
55351: LD_INT 0
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 0
55360: PUSH
55361: LD_INT 1
55363: NEG
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 1
55371: PUSH
55372: LD_INT 0
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 1
55381: PUSH
55382: LD_INT 1
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 0
55391: PUSH
55392: LD_INT 1
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 1
55401: NEG
55402: PUSH
55403: LD_INT 0
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 1
55412: NEG
55413: PUSH
55414: LD_INT 1
55416: NEG
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: ST_TO_ADDR
// end ; 1 :
55431: GO 61328
55433: LD_INT 1
55435: DOUBLE
55436: EQUAL
55437: IFTRUE 55441
55439: GO 58064
55441: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55442: LD_ADDR_VAR 0 11
55446: PUSH
55447: LD_INT 1
55449: NEG
55450: PUSH
55451: LD_INT 3
55453: NEG
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 0
55461: PUSH
55462: LD_INT 3
55464: NEG
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 1
55472: PUSH
55473: LD_INT 2
55475: NEG
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: LIST
55485: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55486: LD_ADDR_VAR 0 12
55490: PUSH
55491: LD_INT 2
55493: PUSH
55494: LD_INT 1
55496: NEG
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 3
55504: PUSH
55505: LD_INT 0
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 3
55514: PUSH
55515: LD_INT 1
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: LIST
55526: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55527: LD_ADDR_VAR 0 13
55531: PUSH
55532: LD_INT 3
55534: PUSH
55535: LD_INT 2
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 3
55544: PUSH
55545: LD_INT 3
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 2
55554: PUSH
55555: LD_INT 3
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: LIST
55566: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55567: LD_ADDR_VAR 0 14
55571: PUSH
55572: LD_INT 1
55574: PUSH
55575: LD_INT 3
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 0
55584: PUSH
55585: LD_INT 3
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 1
55594: NEG
55595: PUSH
55596: LD_INT 2
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: LIST
55607: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55608: LD_ADDR_VAR 0 15
55612: PUSH
55613: LD_INT 2
55615: NEG
55616: PUSH
55617: LD_INT 1
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 3
55626: NEG
55627: PUSH
55628: LD_INT 0
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 3
55637: NEG
55638: PUSH
55639: LD_INT 1
55641: NEG
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: LIST
55651: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55652: LD_ADDR_VAR 0 16
55656: PUSH
55657: LD_INT 2
55659: NEG
55660: PUSH
55661: LD_INT 3
55663: NEG
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 3
55671: NEG
55672: PUSH
55673: LD_INT 2
55675: NEG
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 3
55683: NEG
55684: PUSH
55685: LD_INT 3
55687: NEG
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: LIST
55697: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55698: LD_ADDR_VAR 0 17
55702: PUSH
55703: LD_INT 1
55705: NEG
55706: PUSH
55707: LD_INT 3
55709: NEG
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 0
55717: PUSH
55718: LD_INT 3
55720: NEG
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 1
55728: PUSH
55729: LD_INT 2
55731: NEG
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: LIST
55741: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55742: LD_ADDR_VAR 0 18
55746: PUSH
55747: LD_INT 2
55749: PUSH
55750: LD_INT 1
55752: NEG
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 3
55760: PUSH
55761: LD_INT 0
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 3
55770: PUSH
55771: LD_INT 1
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: LIST
55782: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55783: LD_ADDR_VAR 0 19
55787: PUSH
55788: LD_INT 3
55790: PUSH
55791: LD_INT 2
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 3
55800: PUSH
55801: LD_INT 3
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 2
55810: PUSH
55811: LD_INT 3
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: LIST
55822: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55823: LD_ADDR_VAR 0 20
55827: PUSH
55828: LD_INT 1
55830: PUSH
55831: LD_INT 3
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 0
55840: PUSH
55841: LD_INT 3
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 1
55850: NEG
55851: PUSH
55852: LD_INT 2
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: LIST
55863: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55864: LD_ADDR_VAR 0 21
55868: PUSH
55869: LD_INT 2
55871: NEG
55872: PUSH
55873: LD_INT 1
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 3
55882: NEG
55883: PUSH
55884: LD_INT 0
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 3
55893: NEG
55894: PUSH
55895: LD_INT 1
55897: NEG
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: LIST
55907: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55908: LD_ADDR_VAR 0 22
55912: PUSH
55913: LD_INT 2
55915: NEG
55916: PUSH
55917: LD_INT 3
55919: NEG
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 3
55927: NEG
55928: PUSH
55929: LD_INT 2
55931: NEG
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 3
55939: NEG
55940: PUSH
55941: LD_INT 3
55943: NEG
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: LIST
55953: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55954: LD_ADDR_VAR 0 23
55958: PUSH
55959: LD_INT 0
55961: PUSH
55962: LD_INT 3
55964: NEG
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 1
55972: NEG
55973: PUSH
55974: LD_INT 4
55976: NEG
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 1
55984: PUSH
55985: LD_INT 3
55987: NEG
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: LIST
55997: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55998: LD_ADDR_VAR 0 24
56002: PUSH
56003: LD_INT 3
56005: PUSH
56006: LD_INT 0
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 3
56015: PUSH
56016: LD_INT 1
56018: NEG
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 4
56026: PUSH
56027: LD_INT 1
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: LIST
56038: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56039: LD_ADDR_VAR 0 25
56043: PUSH
56044: LD_INT 3
56046: PUSH
56047: LD_INT 3
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 4
56056: PUSH
56057: LD_INT 3
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 3
56066: PUSH
56067: LD_INT 4
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: LIST
56078: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56079: LD_ADDR_VAR 0 26
56083: PUSH
56084: LD_INT 0
56086: PUSH
56087: LD_INT 3
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 1
56096: PUSH
56097: LD_INT 4
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 1
56106: NEG
56107: PUSH
56108: LD_INT 3
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: LIST
56119: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56120: LD_ADDR_VAR 0 27
56124: PUSH
56125: LD_INT 3
56127: NEG
56128: PUSH
56129: LD_INT 0
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 3
56138: NEG
56139: PUSH
56140: LD_INT 1
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 4
56149: NEG
56150: PUSH
56151: LD_INT 1
56153: NEG
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: LIST
56163: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56164: LD_ADDR_VAR 0 28
56168: PUSH
56169: LD_INT 3
56171: NEG
56172: PUSH
56173: LD_INT 3
56175: NEG
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 3
56183: NEG
56184: PUSH
56185: LD_INT 4
56187: NEG
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 4
56195: NEG
56196: PUSH
56197: LD_INT 3
56199: NEG
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: LIST
56209: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56210: LD_ADDR_VAR 0 29
56214: PUSH
56215: LD_INT 1
56217: NEG
56218: PUSH
56219: LD_INT 3
56221: NEG
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 0
56229: PUSH
56230: LD_INT 3
56232: NEG
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 1
56240: PUSH
56241: LD_INT 2
56243: NEG
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 1
56251: NEG
56252: PUSH
56253: LD_INT 4
56255: NEG
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 0
56263: PUSH
56264: LD_INT 4
56266: NEG
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 1
56274: PUSH
56275: LD_INT 3
56277: NEG
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 1
56285: NEG
56286: PUSH
56287: LD_INT 5
56289: NEG
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 0
56297: PUSH
56298: LD_INT 5
56300: NEG
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 1
56308: PUSH
56309: LD_INT 4
56311: NEG
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 1
56319: NEG
56320: PUSH
56321: LD_INT 6
56323: NEG
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 0
56331: PUSH
56332: LD_INT 6
56334: NEG
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 1
56342: PUSH
56343: LD_INT 5
56345: NEG
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56365: LD_ADDR_VAR 0 30
56369: PUSH
56370: LD_INT 2
56372: PUSH
56373: LD_INT 1
56375: NEG
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 3
56383: PUSH
56384: LD_INT 0
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 3
56393: PUSH
56394: LD_INT 1
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 3
56403: PUSH
56404: LD_INT 1
56406: NEG
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 4
56414: PUSH
56415: LD_INT 0
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 4
56424: PUSH
56425: LD_INT 1
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 4
56434: PUSH
56435: LD_INT 1
56437: NEG
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 5
56445: PUSH
56446: LD_INT 0
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 5
56455: PUSH
56456: LD_INT 1
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 5
56465: PUSH
56466: LD_INT 1
56468: NEG
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 6
56476: PUSH
56477: LD_INT 0
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 6
56486: PUSH
56487: LD_INT 1
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56508: LD_ADDR_VAR 0 31
56512: PUSH
56513: LD_INT 3
56515: PUSH
56516: LD_INT 2
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 3
56525: PUSH
56526: LD_INT 3
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 2
56535: PUSH
56536: LD_INT 3
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 4
56545: PUSH
56546: LD_INT 3
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 4
56555: PUSH
56556: LD_INT 4
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 3
56565: PUSH
56566: LD_INT 4
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 5
56575: PUSH
56576: LD_INT 4
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 5
56585: PUSH
56586: LD_INT 5
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 4
56595: PUSH
56596: LD_INT 5
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 6
56605: PUSH
56606: LD_INT 5
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 6
56615: PUSH
56616: LD_INT 6
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 5
56625: PUSH
56626: LD_INT 6
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56647: LD_ADDR_VAR 0 32
56651: PUSH
56652: LD_INT 1
56654: PUSH
56655: LD_INT 3
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 0
56664: PUSH
56665: LD_INT 3
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 1
56674: NEG
56675: PUSH
56676: LD_INT 2
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 1
56685: PUSH
56686: LD_INT 4
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 0
56695: PUSH
56696: LD_INT 4
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 1
56705: NEG
56706: PUSH
56707: LD_INT 3
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 1
56716: PUSH
56717: LD_INT 5
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 0
56726: PUSH
56727: LD_INT 5
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 1
56736: NEG
56737: PUSH
56738: LD_INT 4
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 1
56747: PUSH
56748: LD_INT 6
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 0
56757: PUSH
56758: LD_INT 6
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 1
56767: NEG
56768: PUSH
56769: LD_INT 5
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56790: LD_ADDR_VAR 0 33
56794: PUSH
56795: LD_INT 2
56797: NEG
56798: PUSH
56799: LD_INT 1
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 3
56808: NEG
56809: PUSH
56810: LD_INT 0
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 3
56819: NEG
56820: PUSH
56821: LD_INT 1
56823: NEG
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 3
56831: NEG
56832: PUSH
56833: LD_INT 1
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 4
56842: NEG
56843: PUSH
56844: LD_INT 0
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 4
56853: NEG
56854: PUSH
56855: LD_INT 1
56857: NEG
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 4
56865: NEG
56866: PUSH
56867: LD_INT 1
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 5
56876: NEG
56877: PUSH
56878: LD_INT 0
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 5
56887: NEG
56888: PUSH
56889: LD_INT 1
56891: NEG
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 5
56899: NEG
56900: PUSH
56901: LD_INT 1
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 6
56910: NEG
56911: PUSH
56912: LD_INT 0
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 6
56921: NEG
56922: PUSH
56923: LD_INT 1
56925: NEG
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56945: LD_ADDR_VAR 0 34
56949: PUSH
56950: LD_INT 2
56952: NEG
56953: PUSH
56954: LD_INT 3
56956: NEG
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 3
56964: NEG
56965: PUSH
56966: LD_INT 2
56968: NEG
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 3
56976: NEG
56977: PUSH
56978: LD_INT 3
56980: NEG
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 3
56988: NEG
56989: PUSH
56990: LD_INT 4
56992: NEG
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 4
57000: NEG
57001: PUSH
57002: LD_INT 3
57004: NEG
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 4
57012: NEG
57013: PUSH
57014: LD_INT 4
57016: NEG
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 4
57024: NEG
57025: PUSH
57026: LD_INT 5
57028: NEG
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 5
57036: NEG
57037: PUSH
57038: LD_INT 4
57040: NEG
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 5
57048: NEG
57049: PUSH
57050: LD_INT 5
57052: NEG
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 5
57060: NEG
57061: PUSH
57062: LD_INT 6
57064: NEG
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 6
57072: NEG
57073: PUSH
57074: LD_INT 5
57076: NEG
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 6
57084: NEG
57085: PUSH
57086: LD_INT 6
57088: NEG
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57108: LD_ADDR_VAR 0 41
57112: PUSH
57113: LD_INT 0
57115: PUSH
57116: LD_INT 2
57118: NEG
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 1
57126: NEG
57127: PUSH
57128: LD_INT 3
57130: NEG
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 1
57138: PUSH
57139: LD_INT 2
57141: NEG
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: LIST
57151: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57152: LD_ADDR_VAR 0 42
57156: PUSH
57157: LD_INT 2
57159: PUSH
57160: LD_INT 0
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 2
57169: PUSH
57170: LD_INT 1
57172: NEG
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 3
57180: PUSH
57181: LD_INT 1
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: LIST
57192: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57193: LD_ADDR_VAR 0 43
57197: PUSH
57198: LD_INT 2
57200: PUSH
57201: LD_INT 2
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 3
57210: PUSH
57211: LD_INT 2
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 2
57220: PUSH
57221: LD_INT 3
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: LIST
57232: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57233: LD_ADDR_VAR 0 44
57237: PUSH
57238: LD_INT 0
57240: PUSH
57241: LD_INT 2
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 1
57250: PUSH
57251: LD_INT 3
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 1
57260: NEG
57261: PUSH
57262: LD_INT 2
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: LIST
57273: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57274: LD_ADDR_VAR 0 45
57278: PUSH
57279: LD_INT 2
57281: NEG
57282: PUSH
57283: LD_INT 0
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 2
57292: NEG
57293: PUSH
57294: LD_INT 1
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 3
57303: NEG
57304: PUSH
57305: LD_INT 1
57307: NEG
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: LIST
57317: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57318: LD_ADDR_VAR 0 46
57322: PUSH
57323: LD_INT 2
57325: NEG
57326: PUSH
57327: LD_INT 2
57329: NEG
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 2
57337: NEG
57338: PUSH
57339: LD_INT 3
57341: NEG
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 3
57349: NEG
57350: PUSH
57351: LD_INT 2
57353: NEG
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: LIST
57363: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57364: LD_ADDR_VAR 0 47
57368: PUSH
57369: LD_INT 2
57371: NEG
57372: PUSH
57373: LD_INT 3
57375: NEG
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 1
57383: NEG
57384: PUSH
57385: LD_INT 3
57387: NEG
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57397: LD_ADDR_VAR 0 48
57401: PUSH
57402: LD_INT 1
57404: PUSH
57405: LD_INT 2
57407: NEG
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 2
57415: PUSH
57416: LD_INT 1
57418: NEG
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57428: LD_ADDR_VAR 0 49
57432: PUSH
57433: LD_INT 3
57435: PUSH
57436: LD_INT 1
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 3
57445: PUSH
57446: LD_INT 2
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57457: LD_ADDR_VAR 0 50
57461: PUSH
57462: LD_INT 2
57464: PUSH
57465: LD_INT 3
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 1
57474: PUSH
57475: LD_INT 3
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57486: LD_ADDR_VAR 0 51
57490: PUSH
57491: LD_INT 1
57493: NEG
57494: PUSH
57495: LD_INT 2
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 2
57504: NEG
57505: PUSH
57506: LD_INT 1
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57517: LD_ADDR_VAR 0 52
57521: PUSH
57522: LD_INT 3
57524: NEG
57525: PUSH
57526: LD_INT 1
57528: NEG
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 3
57536: NEG
57537: PUSH
57538: LD_INT 2
57540: NEG
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57550: LD_ADDR_VAR 0 53
57554: PUSH
57555: LD_INT 1
57557: NEG
57558: PUSH
57559: LD_INT 3
57561: NEG
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 0
57569: PUSH
57570: LD_INT 3
57572: NEG
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 1
57580: PUSH
57581: LD_INT 2
57583: NEG
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: LIST
57593: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57594: LD_ADDR_VAR 0 54
57598: PUSH
57599: LD_INT 2
57601: PUSH
57602: LD_INT 1
57604: NEG
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 3
57612: PUSH
57613: LD_INT 0
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 3
57622: PUSH
57623: LD_INT 1
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: LIST
57634: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57635: LD_ADDR_VAR 0 55
57639: PUSH
57640: LD_INT 3
57642: PUSH
57643: LD_INT 2
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 3
57652: PUSH
57653: LD_INT 3
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 2
57662: PUSH
57663: LD_INT 3
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: LIST
57674: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57675: LD_ADDR_VAR 0 56
57679: PUSH
57680: LD_INT 1
57682: PUSH
57683: LD_INT 3
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 0
57692: PUSH
57693: LD_INT 3
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 1
57702: NEG
57703: PUSH
57704: LD_INT 2
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: LIST
57715: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57716: LD_ADDR_VAR 0 57
57720: PUSH
57721: LD_INT 2
57723: NEG
57724: PUSH
57725: LD_INT 1
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 3
57734: NEG
57735: PUSH
57736: LD_INT 0
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 3
57745: NEG
57746: PUSH
57747: LD_INT 1
57749: NEG
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: LIST
57759: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57760: LD_ADDR_VAR 0 58
57764: PUSH
57765: LD_INT 2
57767: NEG
57768: PUSH
57769: LD_INT 3
57771: NEG
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 3
57779: NEG
57780: PUSH
57781: LD_INT 2
57783: NEG
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 3
57791: NEG
57792: PUSH
57793: LD_INT 3
57795: NEG
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: LIST
57805: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57806: LD_ADDR_VAR 0 59
57810: PUSH
57811: LD_INT 1
57813: NEG
57814: PUSH
57815: LD_INT 2
57817: NEG
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 0
57825: PUSH
57826: LD_INT 2
57828: NEG
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 1
57836: PUSH
57837: LD_INT 1
57839: NEG
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: LIST
57849: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57850: LD_ADDR_VAR 0 60
57854: PUSH
57855: LD_INT 1
57857: PUSH
57858: LD_INT 1
57860: NEG
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 2
57868: PUSH
57869: LD_INT 0
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 2
57878: PUSH
57879: LD_INT 1
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: LIST
57890: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57891: LD_ADDR_VAR 0 61
57895: PUSH
57896: LD_INT 2
57898: PUSH
57899: LD_INT 1
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 2
57908: PUSH
57909: LD_INT 2
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 1
57918: PUSH
57919: LD_INT 2
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: LIST
57930: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57931: LD_ADDR_VAR 0 62
57935: PUSH
57936: LD_INT 1
57938: PUSH
57939: LD_INT 2
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 0
57948: PUSH
57949: LD_INT 2
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 1
57958: NEG
57959: PUSH
57960: LD_INT 1
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: LIST
57971: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57972: LD_ADDR_VAR 0 63
57976: PUSH
57977: LD_INT 1
57979: NEG
57980: PUSH
57981: LD_INT 1
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 2
57990: NEG
57991: PUSH
57992: LD_INT 0
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 2
58001: NEG
58002: PUSH
58003: LD_INT 1
58005: NEG
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: LIST
58015: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58016: LD_ADDR_VAR 0 64
58020: PUSH
58021: LD_INT 1
58023: NEG
58024: PUSH
58025: LD_INT 2
58027: NEG
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 2
58035: NEG
58036: PUSH
58037: LD_INT 1
58039: NEG
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 2
58047: NEG
58048: PUSH
58049: LD_INT 2
58051: NEG
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: LIST
58061: ST_TO_ADDR
// end ; 2 :
58062: GO 61328
58064: LD_INT 2
58066: DOUBLE
58067: EQUAL
58068: IFTRUE 58072
58070: GO 61327
58072: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58073: LD_ADDR_VAR 0 29
58077: PUSH
58078: LD_INT 4
58080: PUSH
58081: LD_INT 0
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 4
58090: PUSH
58091: LD_INT 1
58093: NEG
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 5
58101: PUSH
58102: LD_INT 0
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 5
58111: PUSH
58112: LD_INT 1
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 4
58121: PUSH
58122: LD_INT 1
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 3
58131: PUSH
58132: LD_INT 0
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 3
58141: PUSH
58142: LD_INT 1
58144: NEG
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 3
58152: PUSH
58153: LD_INT 2
58155: NEG
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 5
58163: PUSH
58164: LD_INT 2
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 3
58173: PUSH
58174: LD_INT 3
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 3
58183: PUSH
58184: LD_INT 2
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 4
58193: PUSH
58194: LD_INT 3
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 4
58203: PUSH
58204: LD_INT 4
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 3
58213: PUSH
58214: LD_INT 4
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 2
58223: PUSH
58224: LD_INT 3
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 2
58233: PUSH
58234: LD_INT 2
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 4
58243: PUSH
58244: LD_INT 2
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 2
58253: PUSH
58254: LD_INT 4
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 0
58263: PUSH
58264: LD_INT 4
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 0
58273: PUSH
58274: LD_INT 3
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 1
58283: PUSH
58284: LD_INT 4
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 1
58293: PUSH
58294: LD_INT 5
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 0
58303: PUSH
58304: LD_INT 5
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 1
58313: NEG
58314: PUSH
58315: LD_INT 4
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 1
58324: NEG
58325: PUSH
58326: LD_INT 3
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 2
58335: PUSH
58336: LD_INT 5
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 2
58345: NEG
58346: PUSH
58347: LD_INT 3
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 3
58356: NEG
58357: PUSH
58358: LD_INT 0
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 3
58367: NEG
58368: PUSH
58369: LD_INT 1
58371: NEG
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 2
58379: NEG
58380: PUSH
58381: LD_INT 0
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 2
58390: NEG
58391: PUSH
58392: LD_INT 1
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 3
58401: NEG
58402: PUSH
58403: LD_INT 1
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 4
58412: NEG
58413: PUSH
58414: LD_INT 0
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 4
58423: NEG
58424: PUSH
58425: LD_INT 1
58427: NEG
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 4
58435: NEG
58436: PUSH
58437: LD_INT 2
58439: NEG
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 2
58447: NEG
58448: PUSH
58449: LD_INT 2
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 4
58458: NEG
58459: PUSH
58460: LD_INT 4
58462: NEG
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 4
58470: NEG
58471: PUSH
58472: LD_INT 5
58474: NEG
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 3
58482: NEG
58483: PUSH
58484: LD_INT 4
58486: NEG
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 3
58494: NEG
58495: PUSH
58496: LD_INT 3
58498: NEG
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 4
58506: NEG
58507: PUSH
58508: LD_INT 3
58510: NEG
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 5
58518: NEG
58519: PUSH
58520: LD_INT 4
58522: NEG
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 5
58530: NEG
58531: PUSH
58532: LD_INT 5
58534: NEG
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 3
58542: NEG
58543: PUSH
58544: LD_INT 5
58546: NEG
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 5
58554: NEG
58555: PUSH
58556: LD_INT 3
58558: NEG
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58611: LD_ADDR_VAR 0 30
58615: PUSH
58616: LD_INT 4
58618: PUSH
58619: LD_INT 4
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 4
58628: PUSH
58629: LD_INT 3
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 5
58638: PUSH
58639: LD_INT 4
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 5
58648: PUSH
58649: LD_INT 5
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 4
58658: PUSH
58659: LD_INT 5
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 3
58668: PUSH
58669: LD_INT 4
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 3
58678: PUSH
58679: LD_INT 3
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 5
58688: PUSH
58689: LD_INT 3
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 3
58698: PUSH
58699: LD_INT 5
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 0
58708: PUSH
58709: LD_INT 3
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 0
58718: PUSH
58719: LD_INT 2
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 1
58728: PUSH
58729: LD_INT 3
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 1
58738: PUSH
58739: LD_INT 4
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 0
58748: PUSH
58749: LD_INT 4
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 1
58758: NEG
58759: PUSH
58760: LD_INT 3
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 1
58769: NEG
58770: PUSH
58771: LD_INT 2
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 2
58780: PUSH
58781: LD_INT 4
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 2
58790: NEG
58791: PUSH
58792: LD_INT 2
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 4
58801: NEG
58802: PUSH
58803: LD_INT 0
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 4
58812: NEG
58813: PUSH
58814: LD_INT 1
58816: NEG
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 3
58824: NEG
58825: PUSH
58826: LD_INT 0
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 3
58835: NEG
58836: PUSH
58837: LD_INT 1
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 4
58846: NEG
58847: PUSH
58848: LD_INT 1
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 5
58857: NEG
58858: PUSH
58859: LD_INT 0
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 5
58868: NEG
58869: PUSH
58870: LD_INT 1
58872: NEG
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 5
58880: NEG
58881: PUSH
58882: LD_INT 2
58884: NEG
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 3
58892: NEG
58893: PUSH
58894: LD_INT 2
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 3
58903: NEG
58904: PUSH
58905: LD_INT 3
58907: NEG
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 3
58915: NEG
58916: PUSH
58917: LD_INT 4
58919: NEG
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 2
58927: NEG
58928: PUSH
58929: LD_INT 3
58931: NEG
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 2
58939: NEG
58940: PUSH
58941: LD_INT 2
58943: NEG
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 3
58951: NEG
58952: PUSH
58953: LD_INT 2
58955: NEG
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 4
58963: NEG
58964: PUSH
58965: LD_INT 3
58967: NEG
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 4
58975: NEG
58976: PUSH
58977: LD_INT 4
58979: NEG
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 2
58987: NEG
58988: PUSH
58989: LD_INT 4
58991: NEG
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 4
58999: NEG
59000: PUSH
59001: LD_INT 2
59003: NEG
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 0
59011: PUSH
59012: LD_INT 4
59014: NEG
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 0
59022: PUSH
59023: LD_INT 5
59025: NEG
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 1
59033: PUSH
59034: LD_INT 4
59036: NEG
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 1
59044: PUSH
59045: LD_INT 3
59047: NEG
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 0
59055: PUSH
59056: LD_INT 3
59058: NEG
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 1
59066: NEG
59067: PUSH
59068: LD_INT 4
59070: NEG
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 1
59078: NEG
59079: PUSH
59080: LD_INT 5
59082: NEG
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 2
59090: PUSH
59091: LD_INT 3
59093: NEG
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 2
59101: NEG
59102: PUSH
59103: LD_INT 5
59105: NEG
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59158: LD_ADDR_VAR 0 31
59162: PUSH
59163: LD_INT 0
59165: PUSH
59166: LD_INT 4
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 0
59175: PUSH
59176: LD_INT 3
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 1
59185: PUSH
59186: LD_INT 4
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 1
59195: PUSH
59196: LD_INT 5
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 0
59205: PUSH
59206: LD_INT 5
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 1
59215: NEG
59216: PUSH
59217: LD_INT 4
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 1
59226: NEG
59227: PUSH
59228: LD_INT 3
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 2
59237: PUSH
59238: LD_INT 5
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 2
59247: NEG
59248: PUSH
59249: LD_INT 3
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 3
59258: NEG
59259: PUSH
59260: LD_INT 0
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 3
59269: NEG
59270: PUSH
59271: LD_INT 1
59273: NEG
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 2
59281: NEG
59282: PUSH
59283: LD_INT 0
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 2
59292: NEG
59293: PUSH
59294: LD_INT 1
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 3
59303: NEG
59304: PUSH
59305: LD_INT 1
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 4
59314: NEG
59315: PUSH
59316: LD_INT 0
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 4
59325: NEG
59326: PUSH
59327: LD_INT 1
59329: NEG
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 4
59337: NEG
59338: PUSH
59339: LD_INT 2
59341: NEG
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 2
59349: NEG
59350: PUSH
59351: LD_INT 2
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 4
59360: NEG
59361: PUSH
59362: LD_INT 4
59364: NEG
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 4
59372: NEG
59373: PUSH
59374: LD_INT 5
59376: NEG
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 3
59384: NEG
59385: PUSH
59386: LD_INT 4
59388: NEG
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 3
59396: NEG
59397: PUSH
59398: LD_INT 3
59400: NEG
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 4
59408: NEG
59409: PUSH
59410: LD_INT 3
59412: NEG
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 5
59420: NEG
59421: PUSH
59422: LD_INT 4
59424: NEG
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 5
59432: NEG
59433: PUSH
59434: LD_INT 5
59436: NEG
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 3
59444: NEG
59445: PUSH
59446: LD_INT 5
59448: NEG
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 5
59456: NEG
59457: PUSH
59458: LD_INT 3
59460: NEG
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 0
59468: PUSH
59469: LD_INT 3
59471: NEG
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 0
59479: PUSH
59480: LD_INT 4
59482: NEG
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 1
59490: PUSH
59491: LD_INT 3
59493: NEG
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 1
59501: PUSH
59502: LD_INT 2
59504: NEG
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 0
59512: PUSH
59513: LD_INT 2
59515: NEG
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 1
59523: NEG
59524: PUSH
59525: LD_INT 3
59527: NEG
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 1
59535: NEG
59536: PUSH
59537: LD_INT 4
59539: NEG
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 2
59547: PUSH
59548: LD_INT 2
59550: NEG
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 2
59558: NEG
59559: PUSH
59560: LD_INT 4
59562: NEG
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 4
59570: PUSH
59571: LD_INT 0
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 4
59580: PUSH
59581: LD_INT 1
59583: NEG
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 5
59591: PUSH
59592: LD_INT 0
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 5
59601: PUSH
59602: LD_INT 1
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 4
59611: PUSH
59612: LD_INT 1
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 3
59621: PUSH
59622: LD_INT 0
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 3
59631: PUSH
59632: LD_INT 1
59634: NEG
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 3
59642: PUSH
59643: LD_INT 2
59645: NEG
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 5
59653: PUSH
59654: LD_INT 2
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59708: LD_ADDR_VAR 0 32
59712: PUSH
59713: LD_INT 4
59715: NEG
59716: PUSH
59717: LD_INT 0
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 4
59726: NEG
59727: PUSH
59728: LD_INT 1
59730: NEG
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 3
59738: NEG
59739: PUSH
59740: LD_INT 0
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 3
59749: NEG
59750: PUSH
59751: LD_INT 1
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 4
59760: NEG
59761: PUSH
59762: LD_INT 1
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 5
59771: NEG
59772: PUSH
59773: LD_INT 0
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 5
59782: NEG
59783: PUSH
59784: LD_INT 1
59786: NEG
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 5
59794: NEG
59795: PUSH
59796: LD_INT 2
59798: NEG
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 3
59806: NEG
59807: PUSH
59808: LD_INT 2
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 3
59817: NEG
59818: PUSH
59819: LD_INT 3
59821: NEG
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 3
59829: NEG
59830: PUSH
59831: LD_INT 4
59833: NEG
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 2
59841: NEG
59842: PUSH
59843: LD_INT 3
59845: NEG
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 2
59853: NEG
59854: PUSH
59855: LD_INT 2
59857: NEG
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 3
59865: NEG
59866: PUSH
59867: LD_INT 2
59869: NEG
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 4
59877: NEG
59878: PUSH
59879: LD_INT 3
59881: NEG
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 4
59889: NEG
59890: PUSH
59891: LD_INT 4
59893: NEG
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 2
59901: NEG
59902: PUSH
59903: LD_INT 4
59905: NEG
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 4
59913: NEG
59914: PUSH
59915: LD_INT 2
59917: NEG
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 0
59925: PUSH
59926: LD_INT 4
59928: NEG
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 0
59936: PUSH
59937: LD_INT 5
59939: NEG
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 1
59947: PUSH
59948: LD_INT 4
59950: NEG
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 1
59958: PUSH
59959: LD_INT 3
59961: NEG
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 0
59969: PUSH
59970: LD_INT 3
59972: NEG
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 1
59980: NEG
59981: PUSH
59982: LD_INT 4
59984: NEG
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 1
59992: NEG
59993: PUSH
59994: LD_INT 5
59996: NEG
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 2
60004: PUSH
60005: LD_INT 3
60007: NEG
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 2
60015: NEG
60016: PUSH
60017: LD_INT 5
60019: NEG
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 3
60027: PUSH
60028: LD_INT 0
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 3
60037: PUSH
60038: LD_INT 1
60040: NEG
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 4
60048: PUSH
60049: LD_INT 0
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 4
60058: PUSH
60059: LD_INT 1
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 3
60068: PUSH
60069: LD_INT 1
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 2
60078: PUSH
60079: LD_INT 0
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 2
60088: PUSH
60089: LD_INT 1
60091: NEG
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 2
60099: PUSH
60100: LD_INT 2
60102: NEG
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 4
60110: PUSH
60111: LD_INT 2
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 4
60120: PUSH
60121: LD_INT 4
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 4
60130: PUSH
60131: LD_INT 3
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 5
60140: PUSH
60141: LD_INT 4
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 5
60150: PUSH
60151: LD_INT 5
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 4
60160: PUSH
60161: LD_INT 5
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 3
60170: PUSH
60171: LD_INT 4
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 3
60180: PUSH
60181: LD_INT 3
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 5
60190: PUSH
60191: LD_INT 3
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 3
60200: PUSH
60201: LD_INT 5
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60255: LD_ADDR_VAR 0 33
60259: PUSH
60260: LD_INT 4
60262: NEG
60263: PUSH
60264: LD_INT 4
60266: NEG
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 4
60274: NEG
60275: PUSH
60276: LD_INT 5
60278: NEG
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 3
60286: NEG
60287: PUSH
60288: LD_INT 4
60290: NEG
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 3
60298: NEG
60299: PUSH
60300: LD_INT 3
60302: NEG
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 4
60310: NEG
60311: PUSH
60312: LD_INT 3
60314: NEG
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 5
60322: NEG
60323: PUSH
60324: LD_INT 4
60326: NEG
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 5
60334: NEG
60335: PUSH
60336: LD_INT 5
60338: NEG
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 3
60346: NEG
60347: PUSH
60348: LD_INT 5
60350: NEG
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 5
60358: NEG
60359: PUSH
60360: LD_INT 3
60362: NEG
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 0
60370: PUSH
60371: LD_INT 3
60373: NEG
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 0
60381: PUSH
60382: LD_INT 4
60384: NEG
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: LD_INT 1
60392: PUSH
60393: LD_INT 3
60395: NEG
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 1
60403: PUSH
60404: LD_INT 2
60406: NEG
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 0
60414: PUSH
60415: LD_INT 2
60417: NEG
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 1
60425: NEG
60426: PUSH
60427: LD_INT 3
60429: NEG
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 1
60437: NEG
60438: PUSH
60439: LD_INT 4
60441: NEG
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 2
60449: PUSH
60450: LD_INT 2
60452: NEG
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 2
60460: NEG
60461: PUSH
60462: LD_INT 4
60464: NEG
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 4
60472: PUSH
60473: LD_INT 0
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 4
60482: PUSH
60483: LD_INT 1
60485: NEG
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 5
60493: PUSH
60494: LD_INT 0
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 5
60503: PUSH
60504: LD_INT 1
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 4
60513: PUSH
60514: LD_INT 1
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 3
60523: PUSH
60524: LD_INT 0
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 3
60533: PUSH
60534: LD_INT 1
60536: NEG
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 3
60544: PUSH
60545: LD_INT 2
60547: NEG
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 5
60555: PUSH
60556: LD_INT 2
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 3
60565: PUSH
60566: LD_INT 3
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: LD_INT 3
60575: PUSH
60576: LD_INT 2
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 4
60585: PUSH
60586: LD_INT 3
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 4
60595: PUSH
60596: LD_INT 4
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 3
60605: PUSH
60606: LD_INT 4
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 2
60615: PUSH
60616: LD_INT 3
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 2
60625: PUSH
60626: LD_INT 2
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 4
60635: PUSH
60636: LD_INT 2
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 2
60645: PUSH
60646: LD_INT 4
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 0
60655: PUSH
60656: LD_INT 4
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 0
60665: PUSH
60666: LD_INT 3
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 1
60675: PUSH
60676: LD_INT 4
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 1
60685: PUSH
60686: LD_INT 5
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 0
60695: PUSH
60696: LD_INT 5
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 1
60705: NEG
60706: PUSH
60707: LD_INT 4
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 1
60716: NEG
60717: PUSH
60718: LD_INT 3
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 2
60727: PUSH
60728: LD_INT 5
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 2
60737: NEG
60738: PUSH
60739: LD_INT 3
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60793: LD_ADDR_VAR 0 34
60797: PUSH
60798: LD_INT 0
60800: PUSH
60801: LD_INT 4
60803: NEG
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 0
60811: PUSH
60812: LD_INT 5
60814: NEG
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 1
60822: PUSH
60823: LD_INT 4
60825: NEG
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 1
60833: PUSH
60834: LD_INT 3
60836: NEG
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 0
60844: PUSH
60845: LD_INT 3
60847: NEG
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 1
60855: NEG
60856: PUSH
60857: LD_INT 4
60859: NEG
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 1
60867: NEG
60868: PUSH
60869: LD_INT 5
60871: NEG
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 2
60879: PUSH
60880: LD_INT 3
60882: NEG
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 2
60890: NEG
60891: PUSH
60892: LD_INT 5
60894: NEG
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 3
60902: PUSH
60903: LD_INT 0
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 3
60912: PUSH
60913: LD_INT 1
60915: NEG
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 4
60923: PUSH
60924: LD_INT 0
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 4
60933: PUSH
60934: LD_INT 1
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 3
60943: PUSH
60944: LD_INT 1
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 2
60953: PUSH
60954: LD_INT 0
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 2
60963: PUSH
60964: LD_INT 1
60966: NEG
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 2
60974: PUSH
60975: LD_INT 2
60977: NEG
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 4
60985: PUSH
60986: LD_INT 2
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 4
60995: PUSH
60996: LD_INT 4
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 4
61005: PUSH
61006: LD_INT 3
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 5
61015: PUSH
61016: LD_INT 4
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 5
61025: PUSH
61026: LD_INT 5
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PUSH
61033: LD_INT 4
61035: PUSH
61036: LD_INT 5
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 3
61045: PUSH
61046: LD_INT 4
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 3
61055: PUSH
61056: LD_INT 3
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 5
61065: PUSH
61066: LD_INT 3
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 3
61075: PUSH
61076: LD_INT 5
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 0
61085: PUSH
61086: LD_INT 3
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 0
61095: PUSH
61096: LD_INT 2
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 1
61105: PUSH
61106: LD_INT 3
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 1
61115: PUSH
61116: LD_INT 4
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 0
61125: PUSH
61126: LD_INT 4
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 1
61135: NEG
61136: PUSH
61137: LD_INT 3
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 1
61146: NEG
61147: PUSH
61148: LD_INT 2
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 2
61157: PUSH
61158: LD_INT 4
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 2
61167: NEG
61168: PUSH
61169: LD_INT 2
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 4
61178: NEG
61179: PUSH
61180: LD_INT 0
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 4
61189: NEG
61190: PUSH
61191: LD_INT 1
61193: NEG
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 3
61201: NEG
61202: PUSH
61203: LD_INT 0
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 3
61212: NEG
61213: PUSH
61214: LD_INT 1
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 4
61223: NEG
61224: PUSH
61225: LD_INT 1
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 5
61234: NEG
61235: PUSH
61236: LD_INT 0
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 5
61245: NEG
61246: PUSH
61247: LD_INT 1
61249: NEG
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 5
61257: NEG
61258: PUSH
61259: LD_INT 2
61261: NEG
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 3
61269: NEG
61270: PUSH
61271: LD_INT 2
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: ST_TO_ADDR
// end ; end ;
61325: GO 61328
61327: POP
// case btype of b_depot , b_warehouse :
61328: LD_VAR 0 1
61332: PUSH
61333: LD_INT 0
61335: DOUBLE
61336: EQUAL
61337: IFTRUE 61347
61339: LD_INT 1
61341: DOUBLE
61342: EQUAL
61343: IFTRUE 61347
61345: GO 61548
61347: POP
// case nation of nation_american :
61348: LD_VAR 0 5
61352: PUSH
61353: LD_INT 1
61355: DOUBLE
61356: EQUAL
61357: IFTRUE 61361
61359: GO 61417
61361: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61362: LD_ADDR_VAR 0 9
61366: PUSH
61367: LD_VAR 0 11
61371: PUSH
61372: LD_VAR 0 12
61376: PUSH
61377: LD_VAR 0 13
61381: PUSH
61382: LD_VAR 0 14
61386: PUSH
61387: LD_VAR 0 15
61391: PUSH
61392: LD_VAR 0 16
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: PUSH
61405: LD_VAR 0 4
61409: PUSH
61410: LD_INT 1
61412: PLUS
61413: ARRAY
61414: ST_TO_ADDR
61415: GO 61546
61417: LD_INT 2
61419: DOUBLE
61420: EQUAL
61421: IFTRUE 61425
61423: GO 61481
61425: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61426: LD_ADDR_VAR 0 9
61430: PUSH
61431: LD_VAR 0 17
61435: PUSH
61436: LD_VAR 0 18
61440: PUSH
61441: LD_VAR 0 19
61445: PUSH
61446: LD_VAR 0 20
61450: PUSH
61451: LD_VAR 0 21
61455: PUSH
61456: LD_VAR 0 22
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: PUSH
61469: LD_VAR 0 4
61473: PUSH
61474: LD_INT 1
61476: PLUS
61477: ARRAY
61478: ST_TO_ADDR
61479: GO 61546
61481: LD_INT 3
61483: DOUBLE
61484: EQUAL
61485: IFTRUE 61489
61487: GO 61545
61489: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61490: LD_ADDR_VAR 0 9
61494: PUSH
61495: LD_VAR 0 23
61499: PUSH
61500: LD_VAR 0 24
61504: PUSH
61505: LD_VAR 0 25
61509: PUSH
61510: LD_VAR 0 26
61514: PUSH
61515: LD_VAR 0 27
61519: PUSH
61520: LD_VAR 0 28
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: PUSH
61533: LD_VAR 0 4
61537: PUSH
61538: LD_INT 1
61540: PLUS
61541: ARRAY
61542: ST_TO_ADDR
61543: GO 61546
61545: POP
61546: GO 62101
61548: LD_INT 2
61550: DOUBLE
61551: EQUAL
61552: IFTRUE 61562
61554: LD_INT 3
61556: DOUBLE
61557: EQUAL
61558: IFTRUE 61562
61560: GO 61618
61562: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61563: LD_ADDR_VAR 0 9
61567: PUSH
61568: LD_VAR 0 29
61572: PUSH
61573: LD_VAR 0 30
61577: PUSH
61578: LD_VAR 0 31
61582: PUSH
61583: LD_VAR 0 32
61587: PUSH
61588: LD_VAR 0 33
61592: PUSH
61593: LD_VAR 0 34
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: PUSH
61606: LD_VAR 0 4
61610: PUSH
61611: LD_INT 1
61613: PLUS
61614: ARRAY
61615: ST_TO_ADDR
61616: GO 62101
61618: LD_INT 16
61620: DOUBLE
61621: EQUAL
61622: IFTRUE 61680
61624: LD_INT 17
61626: DOUBLE
61627: EQUAL
61628: IFTRUE 61680
61630: LD_INT 18
61632: DOUBLE
61633: EQUAL
61634: IFTRUE 61680
61636: LD_INT 19
61638: DOUBLE
61639: EQUAL
61640: IFTRUE 61680
61642: LD_INT 22
61644: DOUBLE
61645: EQUAL
61646: IFTRUE 61680
61648: LD_INT 20
61650: DOUBLE
61651: EQUAL
61652: IFTRUE 61680
61654: LD_INT 21
61656: DOUBLE
61657: EQUAL
61658: IFTRUE 61680
61660: LD_INT 23
61662: DOUBLE
61663: EQUAL
61664: IFTRUE 61680
61666: LD_INT 24
61668: DOUBLE
61669: EQUAL
61670: IFTRUE 61680
61672: LD_INT 25
61674: DOUBLE
61675: EQUAL
61676: IFTRUE 61680
61678: GO 61736
61680: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61681: LD_ADDR_VAR 0 9
61685: PUSH
61686: LD_VAR 0 35
61690: PUSH
61691: LD_VAR 0 36
61695: PUSH
61696: LD_VAR 0 37
61700: PUSH
61701: LD_VAR 0 38
61705: PUSH
61706: LD_VAR 0 39
61710: PUSH
61711: LD_VAR 0 40
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: PUSH
61724: LD_VAR 0 4
61728: PUSH
61729: LD_INT 1
61731: PLUS
61732: ARRAY
61733: ST_TO_ADDR
61734: GO 62101
61736: LD_INT 6
61738: DOUBLE
61739: EQUAL
61740: IFTRUE 61792
61742: LD_INT 7
61744: DOUBLE
61745: EQUAL
61746: IFTRUE 61792
61748: LD_INT 8
61750: DOUBLE
61751: EQUAL
61752: IFTRUE 61792
61754: LD_INT 13
61756: DOUBLE
61757: EQUAL
61758: IFTRUE 61792
61760: LD_INT 12
61762: DOUBLE
61763: EQUAL
61764: IFTRUE 61792
61766: LD_INT 15
61768: DOUBLE
61769: EQUAL
61770: IFTRUE 61792
61772: LD_INT 11
61774: DOUBLE
61775: EQUAL
61776: IFTRUE 61792
61778: LD_INT 14
61780: DOUBLE
61781: EQUAL
61782: IFTRUE 61792
61784: LD_INT 10
61786: DOUBLE
61787: EQUAL
61788: IFTRUE 61792
61790: GO 61848
61792: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61793: LD_ADDR_VAR 0 9
61797: PUSH
61798: LD_VAR 0 41
61802: PUSH
61803: LD_VAR 0 42
61807: PUSH
61808: LD_VAR 0 43
61812: PUSH
61813: LD_VAR 0 44
61817: PUSH
61818: LD_VAR 0 45
61822: PUSH
61823: LD_VAR 0 46
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: PUSH
61836: LD_VAR 0 4
61840: PUSH
61841: LD_INT 1
61843: PLUS
61844: ARRAY
61845: ST_TO_ADDR
61846: GO 62101
61848: LD_INT 36
61850: DOUBLE
61851: EQUAL
61852: IFTRUE 61856
61854: GO 61912
61856: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61857: LD_ADDR_VAR 0 9
61861: PUSH
61862: LD_VAR 0 47
61866: PUSH
61867: LD_VAR 0 48
61871: PUSH
61872: LD_VAR 0 49
61876: PUSH
61877: LD_VAR 0 50
61881: PUSH
61882: LD_VAR 0 51
61886: PUSH
61887: LD_VAR 0 52
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: PUSH
61900: LD_VAR 0 4
61904: PUSH
61905: LD_INT 1
61907: PLUS
61908: ARRAY
61909: ST_TO_ADDR
61910: GO 62101
61912: LD_INT 4
61914: DOUBLE
61915: EQUAL
61916: IFTRUE 61938
61918: LD_INT 5
61920: DOUBLE
61921: EQUAL
61922: IFTRUE 61938
61924: LD_INT 34
61926: DOUBLE
61927: EQUAL
61928: IFTRUE 61938
61930: LD_INT 37
61932: DOUBLE
61933: EQUAL
61934: IFTRUE 61938
61936: GO 61994
61938: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61939: LD_ADDR_VAR 0 9
61943: PUSH
61944: LD_VAR 0 53
61948: PUSH
61949: LD_VAR 0 54
61953: PUSH
61954: LD_VAR 0 55
61958: PUSH
61959: LD_VAR 0 56
61963: PUSH
61964: LD_VAR 0 57
61968: PUSH
61969: LD_VAR 0 58
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: LIST
61978: LIST
61979: LIST
61980: LIST
61981: PUSH
61982: LD_VAR 0 4
61986: PUSH
61987: LD_INT 1
61989: PLUS
61990: ARRAY
61991: ST_TO_ADDR
61992: GO 62101
61994: LD_INT 31
61996: DOUBLE
61997: EQUAL
61998: IFTRUE 62044
62000: LD_INT 32
62002: DOUBLE
62003: EQUAL
62004: IFTRUE 62044
62006: LD_INT 33
62008: DOUBLE
62009: EQUAL
62010: IFTRUE 62044
62012: LD_INT 27
62014: DOUBLE
62015: EQUAL
62016: IFTRUE 62044
62018: LD_INT 26
62020: DOUBLE
62021: EQUAL
62022: IFTRUE 62044
62024: LD_INT 28
62026: DOUBLE
62027: EQUAL
62028: IFTRUE 62044
62030: LD_INT 29
62032: DOUBLE
62033: EQUAL
62034: IFTRUE 62044
62036: LD_INT 30
62038: DOUBLE
62039: EQUAL
62040: IFTRUE 62044
62042: GO 62100
62044: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62045: LD_ADDR_VAR 0 9
62049: PUSH
62050: LD_VAR 0 59
62054: PUSH
62055: LD_VAR 0 60
62059: PUSH
62060: LD_VAR 0 61
62064: PUSH
62065: LD_VAR 0 62
62069: PUSH
62070: LD_VAR 0 63
62074: PUSH
62075: LD_VAR 0 64
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: PUSH
62088: LD_VAR 0 4
62092: PUSH
62093: LD_INT 1
62095: PLUS
62096: ARRAY
62097: ST_TO_ADDR
62098: GO 62101
62100: POP
// temp_list2 = [ ] ;
62101: LD_ADDR_VAR 0 10
62105: PUSH
62106: EMPTY
62107: ST_TO_ADDR
// for i in temp_list do
62108: LD_ADDR_VAR 0 8
62112: PUSH
62113: LD_VAR 0 9
62117: PUSH
62118: FOR_IN
62119: IFFALSE 62171
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62121: LD_ADDR_VAR 0 10
62125: PUSH
62126: LD_VAR 0 10
62130: PUSH
62131: LD_VAR 0 8
62135: PUSH
62136: LD_INT 1
62138: ARRAY
62139: PUSH
62140: LD_VAR 0 2
62144: PLUS
62145: PUSH
62146: LD_VAR 0 8
62150: PUSH
62151: LD_INT 2
62153: ARRAY
62154: PUSH
62155: LD_VAR 0 3
62159: PLUS
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: EMPTY
62166: LIST
62167: ADD
62168: ST_TO_ADDR
62169: GO 62118
62171: POP
62172: POP
// result = temp_list2 ;
62173: LD_ADDR_VAR 0 7
62177: PUSH
62178: LD_VAR 0 10
62182: ST_TO_ADDR
// end ;
62183: LD_VAR 0 7
62187: RET
// export function EnemyInRange ( unit , dist ) ; begin
62188: LD_INT 0
62190: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62191: LD_ADDR_VAR 0 3
62195: PUSH
62196: LD_VAR 0 1
62200: PPUSH
62201: CALL_OW 255
62205: PPUSH
62206: LD_VAR 0 1
62210: PPUSH
62211: CALL_OW 250
62215: PPUSH
62216: LD_VAR 0 1
62220: PPUSH
62221: CALL_OW 251
62225: PPUSH
62226: LD_VAR 0 2
62230: PPUSH
62231: CALL 35590 0 4
62235: PUSH
62236: LD_INT 4
62238: ARRAY
62239: ST_TO_ADDR
// end ;
62240: LD_VAR 0 3
62244: RET
// export function PlayerSeeMe ( unit ) ; begin
62245: LD_INT 0
62247: PPUSH
// result := See ( your_side , unit ) ;
62248: LD_ADDR_VAR 0 2
62252: PUSH
62253: LD_OWVAR 2
62257: PPUSH
62258: LD_VAR 0 1
62262: PPUSH
62263: CALL_OW 292
62267: ST_TO_ADDR
// end ;
62268: LD_VAR 0 2
62272: RET
// export function ReverseDir ( unit ) ; begin
62273: LD_INT 0
62275: PPUSH
// if not unit then
62276: LD_VAR 0 1
62280: NOT
62281: IFFALSE 62285
// exit ;
62283: GO 62308
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62285: LD_ADDR_VAR 0 2
62289: PUSH
62290: LD_VAR 0 1
62294: PPUSH
62295: CALL_OW 254
62299: PUSH
62300: LD_INT 3
62302: PLUS
62303: PUSH
62304: LD_INT 6
62306: MOD
62307: ST_TO_ADDR
// end ;
62308: LD_VAR 0 2
62312: RET
// export function ReverseArray ( array ) ; var i ; begin
62313: LD_INT 0
62315: PPUSH
62316: PPUSH
// if not array then
62317: LD_VAR 0 1
62321: NOT
62322: IFFALSE 62326
// exit ;
62324: GO 62381
// result := [ ] ;
62326: LD_ADDR_VAR 0 2
62330: PUSH
62331: EMPTY
62332: ST_TO_ADDR
// for i := array downto 1 do
62333: LD_ADDR_VAR 0 3
62337: PUSH
62338: DOUBLE
62339: LD_VAR 0 1
62343: INC
62344: ST_TO_ADDR
62345: LD_INT 1
62347: PUSH
62348: FOR_DOWNTO
62349: IFFALSE 62379
// result := Join ( result , array [ i ] ) ;
62351: LD_ADDR_VAR 0 2
62355: PUSH
62356: LD_VAR 0 2
62360: PPUSH
62361: LD_VAR 0 1
62365: PUSH
62366: LD_VAR 0 3
62370: ARRAY
62371: PPUSH
62372: CALL 67025 0 2
62376: ST_TO_ADDR
62377: GO 62348
62379: POP
62380: POP
// end ;
62381: LD_VAR 0 2
62385: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
62386: LD_INT 0
62388: PPUSH
62389: PPUSH
62390: PPUSH
62391: PPUSH
62392: PPUSH
62393: PPUSH
// if not unit or not hexes then
62394: LD_VAR 0 1
62398: NOT
62399: PUSH
62400: LD_VAR 0 2
62404: NOT
62405: OR
62406: IFFALSE 62410
// exit ;
62408: GO 62533
// dist := 9999 ;
62410: LD_ADDR_VAR 0 5
62414: PUSH
62415: LD_INT 9999
62417: ST_TO_ADDR
// for i = 1 to hexes do
62418: LD_ADDR_VAR 0 4
62422: PUSH
62423: DOUBLE
62424: LD_INT 1
62426: DEC
62427: ST_TO_ADDR
62428: LD_VAR 0 2
62432: PUSH
62433: FOR_TO
62434: IFFALSE 62521
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62436: LD_ADDR_VAR 0 6
62440: PUSH
62441: LD_VAR 0 1
62445: PPUSH
62446: LD_VAR 0 2
62450: PUSH
62451: LD_VAR 0 4
62455: ARRAY
62456: PUSH
62457: LD_INT 1
62459: ARRAY
62460: PPUSH
62461: LD_VAR 0 2
62465: PUSH
62466: LD_VAR 0 4
62470: ARRAY
62471: PUSH
62472: LD_INT 2
62474: ARRAY
62475: PPUSH
62476: CALL_OW 297
62480: ST_TO_ADDR
// if tdist < dist then
62481: LD_VAR 0 6
62485: PUSH
62486: LD_VAR 0 5
62490: LESS
62491: IFFALSE 62519
// begin hex := hexes [ i ] ;
62493: LD_ADDR_VAR 0 8
62497: PUSH
62498: LD_VAR 0 2
62502: PUSH
62503: LD_VAR 0 4
62507: ARRAY
62508: ST_TO_ADDR
// dist := tdist ;
62509: LD_ADDR_VAR 0 5
62513: PUSH
62514: LD_VAR 0 6
62518: ST_TO_ADDR
// end ; end ;
62519: GO 62433
62521: POP
62522: POP
// result := hex ;
62523: LD_ADDR_VAR 0 3
62527: PUSH
62528: LD_VAR 0 8
62532: ST_TO_ADDR
// end ;
62533: LD_VAR 0 3
62537: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62538: LD_INT 0
62540: PPUSH
62541: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62542: LD_VAR 0 1
62546: NOT
62547: PUSH
62548: LD_VAR 0 1
62552: PUSH
62553: LD_INT 21
62555: PUSH
62556: LD_INT 2
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: PUSH
62563: LD_INT 23
62565: PUSH
62566: LD_INT 2
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PPUSH
62577: CALL_OW 69
62581: IN
62582: NOT
62583: OR
62584: IFFALSE 62588
// exit ;
62586: GO 62635
// for i = 1 to 3 do
62588: LD_ADDR_VAR 0 3
62592: PUSH
62593: DOUBLE
62594: LD_INT 1
62596: DEC
62597: ST_TO_ADDR
62598: LD_INT 3
62600: PUSH
62601: FOR_TO
62602: IFFALSE 62633
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62604: LD_VAR 0 1
62608: PPUSH
62609: CALL_OW 250
62613: PPUSH
62614: LD_VAR 0 1
62618: PPUSH
62619: CALL_OW 251
62623: PPUSH
62624: LD_INT 1
62626: PPUSH
62627: CALL_OW 453
62631: GO 62601
62633: POP
62634: POP
// end ;
62635: LD_VAR 0 2
62639: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62640: LD_INT 0
62642: PPUSH
62643: PPUSH
62644: PPUSH
62645: PPUSH
62646: PPUSH
62647: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62648: LD_VAR 0 1
62652: NOT
62653: PUSH
62654: LD_VAR 0 2
62658: NOT
62659: OR
62660: PUSH
62661: LD_VAR 0 1
62665: PPUSH
62666: CALL_OW 314
62670: OR
62671: IFFALSE 62675
// exit ;
62673: GO 63142
// if GetLives ( i ) < 250 then
62675: LD_VAR 0 4
62679: PPUSH
62680: CALL_OW 256
62684: PUSH
62685: LD_INT 250
62687: LESS
62688: IFFALSE 62701
// begin ComAutodestruct ( i ) ;
62690: LD_VAR 0 4
62694: PPUSH
62695: CALL 62538 0 1
// exit ;
62699: GO 63142
// end ; x := GetX ( enemy_unit ) ;
62701: LD_ADDR_VAR 0 7
62705: PUSH
62706: LD_VAR 0 2
62710: PPUSH
62711: CALL_OW 250
62715: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62716: LD_ADDR_VAR 0 8
62720: PUSH
62721: LD_VAR 0 2
62725: PPUSH
62726: CALL_OW 251
62730: ST_TO_ADDR
// if not x or not y then
62731: LD_VAR 0 7
62735: NOT
62736: PUSH
62737: LD_VAR 0 8
62741: NOT
62742: OR
62743: IFFALSE 62747
// exit ;
62745: GO 63142
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62747: LD_ADDR_VAR 0 6
62751: PUSH
62752: LD_VAR 0 7
62756: PPUSH
62757: LD_INT 0
62759: PPUSH
62760: LD_INT 4
62762: PPUSH
62763: CALL_OW 272
62767: PUSH
62768: LD_VAR 0 8
62772: PPUSH
62773: LD_INT 0
62775: PPUSH
62776: LD_INT 4
62778: PPUSH
62779: CALL_OW 273
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: LD_VAR 0 7
62792: PPUSH
62793: LD_INT 1
62795: PPUSH
62796: LD_INT 4
62798: PPUSH
62799: CALL_OW 272
62803: PUSH
62804: LD_VAR 0 8
62808: PPUSH
62809: LD_INT 1
62811: PPUSH
62812: LD_INT 4
62814: PPUSH
62815: CALL_OW 273
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_VAR 0 7
62828: PPUSH
62829: LD_INT 2
62831: PPUSH
62832: LD_INT 4
62834: PPUSH
62835: CALL_OW 272
62839: PUSH
62840: LD_VAR 0 8
62844: PPUSH
62845: LD_INT 2
62847: PPUSH
62848: LD_INT 4
62850: PPUSH
62851: CALL_OW 273
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_VAR 0 7
62864: PPUSH
62865: LD_INT 3
62867: PPUSH
62868: LD_INT 4
62870: PPUSH
62871: CALL_OW 272
62875: PUSH
62876: LD_VAR 0 8
62880: PPUSH
62881: LD_INT 3
62883: PPUSH
62884: LD_INT 4
62886: PPUSH
62887: CALL_OW 273
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_VAR 0 7
62900: PPUSH
62901: LD_INT 4
62903: PPUSH
62904: LD_INT 4
62906: PPUSH
62907: CALL_OW 272
62911: PUSH
62912: LD_VAR 0 8
62916: PPUSH
62917: LD_INT 4
62919: PPUSH
62920: LD_INT 4
62922: PPUSH
62923: CALL_OW 273
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_VAR 0 7
62936: PPUSH
62937: LD_INT 5
62939: PPUSH
62940: LD_INT 4
62942: PPUSH
62943: CALL_OW 272
62947: PUSH
62948: LD_VAR 0 8
62952: PPUSH
62953: LD_INT 5
62955: PPUSH
62956: LD_INT 4
62958: PPUSH
62959: CALL_OW 273
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: LIST
62974: LIST
62975: ST_TO_ADDR
// for i = tmp downto 1 do
62976: LD_ADDR_VAR 0 4
62980: PUSH
62981: DOUBLE
62982: LD_VAR 0 6
62986: INC
62987: ST_TO_ADDR
62988: LD_INT 1
62990: PUSH
62991: FOR_DOWNTO
62992: IFFALSE 63093
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62994: LD_VAR 0 6
62998: PUSH
62999: LD_VAR 0 4
63003: ARRAY
63004: PUSH
63005: LD_INT 1
63007: ARRAY
63008: PPUSH
63009: LD_VAR 0 6
63013: PUSH
63014: LD_VAR 0 4
63018: ARRAY
63019: PUSH
63020: LD_INT 2
63022: ARRAY
63023: PPUSH
63024: CALL_OW 488
63028: NOT
63029: PUSH
63030: LD_VAR 0 6
63034: PUSH
63035: LD_VAR 0 4
63039: ARRAY
63040: PUSH
63041: LD_INT 1
63043: ARRAY
63044: PPUSH
63045: LD_VAR 0 6
63049: PUSH
63050: LD_VAR 0 4
63054: ARRAY
63055: PUSH
63056: LD_INT 2
63058: ARRAY
63059: PPUSH
63060: CALL_OW 428
63064: PUSH
63065: LD_INT 0
63067: NONEQUAL
63068: OR
63069: IFFALSE 63091
// tmp := Delete ( tmp , i ) ;
63071: LD_ADDR_VAR 0 6
63075: PUSH
63076: LD_VAR 0 6
63080: PPUSH
63081: LD_VAR 0 4
63085: PPUSH
63086: CALL_OW 3
63090: ST_TO_ADDR
63091: GO 62991
63093: POP
63094: POP
// j := GetClosestHex ( unit , tmp ) ;
63095: LD_ADDR_VAR 0 5
63099: PUSH
63100: LD_VAR 0 1
63104: PPUSH
63105: LD_VAR 0 6
63109: PPUSH
63110: CALL 62386 0 2
63114: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63115: LD_VAR 0 1
63119: PPUSH
63120: LD_VAR 0 5
63124: PUSH
63125: LD_INT 1
63127: ARRAY
63128: PPUSH
63129: LD_VAR 0 5
63133: PUSH
63134: LD_INT 2
63136: ARRAY
63137: PPUSH
63138: CALL_OW 111
// end ;
63142: LD_VAR 0 3
63146: RET
// export function PrepareApemanSoldier ( ) ; begin
63147: LD_INT 0
63149: PPUSH
// uc_nation := 0 ;
63150: LD_ADDR_OWVAR 21
63154: PUSH
63155: LD_INT 0
63157: ST_TO_ADDR
// hc_sex := sex_male ;
63158: LD_ADDR_OWVAR 27
63162: PUSH
63163: LD_INT 1
63165: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63166: LD_ADDR_OWVAR 28
63170: PUSH
63171: LD_INT 15
63173: ST_TO_ADDR
// hc_gallery :=  ;
63174: LD_ADDR_OWVAR 33
63178: PUSH
63179: LD_STRING 
63181: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63182: LD_ADDR_OWVAR 31
63186: PUSH
63187: LD_INT 0
63189: PPUSH
63190: LD_INT 3
63192: PPUSH
63193: CALL_OW 12
63197: PUSH
63198: LD_INT 0
63200: PPUSH
63201: LD_INT 3
63203: PPUSH
63204: CALL_OW 12
63208: PUSH
63209: LD_INT 0
63211: PUSH
63212: LD_INT 0
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: LIST
63219: LIST
63220: ST_TO_ADDR
// end ;
63221: LD_VAR 0 1
63225: RET
// export function PrepareApemanEngineer ( ) ; begin
63226: LD_INT 0
63228: PPUSH
// uc_nation := 0 ;
63229: LD_ADDR_OWVAR 21
63233: PUSH
63234: LD_INT 0
63236: ST_TO_ADDR
// hc_sex := sex_male ;
63237: LD_ADDR_OWVAR 27
63241: PUSH
63242: LD_INT 1
63244: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63245: LD_ADDR_OWVAR 28
63249: PUSH
63250: LD_INT 16
63252: ST_TO_ADDR
// hc_gallery :=  ;
63253: LD_ADDR_OWVAR 33
63257: PUSH
63258: LD_STRING 
63260: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63261: LD_ADDR_OWVAR 31
63265: PUSH
63266: LD_INT 0
63268: PPUSH
63269: LD_INT 3
63271: PPUSH
63272: CALL_OW 12
63276: PUSH
63277: LD_INT 0
63279: PPUSH
63280: LD_INT 3
63282: PPUSH
63283: CALL_OW 12
63287: PUSH
63288: LD_INT 0
63290: PUSH
63291: LD_INT 0
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: ST_TO_ADDR
// end ;
63300: LD_VAR 0 1
63304: RET
// export function PrepareApeman ( agressivity ) ; begin
63305: LD_INT 0
63307: PPUSH
// uc_side := 0 ;
63308: LD_ADDR_OWVAR 20
63312: PUSH
63313: LD_INT 0
63315: ST_TO_ADDR
// uc_nation := 0 ;
63316: LD_ADDR_OWVAR 21
63320: PUSH
63321: LD_INT 0
63323: ST_TO_ADDR
// hc_sex := sex_male ;
63324: LD_ADDR_OWVAR 27
63328: PUSH
63329: LD_INT 1
63331: ST_TO_ADDR
// hc_class := class_apeman ;
63332: LD_ADDR_OWVAR 28
63336: PUSH
63337: LD_INT 12
63339: ST_TO_ADDR
// hc_gallery :=  ;
63340: LD_ADDR_OWVAR 33
63344: PUSH
63345: LD_STRING 
63347: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63348: LD_ADDR_OWVAR 35
63352: PUSH
63353: LD_VAR 0 1
63357: NEG
63358: PPUSH
63359: LD_VAR 0 1
63363: PPUSH
63364: CALL_OW 12
63368: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63369: LD_ADDR_OWVAR 31
63373: PUSH
63374: LD_INT 0
63376: PPUSH
63377: LD_INT 3
63379: PPUSH
63380: CALL_OW 12
63384: PUSH
63385: LD_INT 0
63387: PPUSH
63388: LD_INT 3
63390: PPUSH
63391: CALL_OW 12
63395: PUSH
63396: LD_INT 0
63398: PUSH
63399: LD_INT 0
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: LIST
63406: LIST
63407: ST_TO_ADDR
// end ;
63408: LD_VAR 0 2
63412: RET
// export function PrepareTiger ( agressivity ) ; begin
63413: LD_INT 0
63415: PPUSH
// uc_side := 0 ;
63416: LD_ADDR_OWVAR 20
63420: PUSH
63421: LD_INT 0
63423: ST_TO_ADDR
// uc_nation := 0 ;
63424: LD_ADDR_OWVAR 21
63428: PUSH
63429: LD_INT 0
63431: ST_TO_ADDR
// hc_class := class_tiger ;
63432: LD_ADDR_OWVAR 28
63436: PUSH
63437: LD_INT 14
63439: ST_TO_ADDR
// hc_gallery :=  ;
63440: LD_ADDR_OWVAR 33
63444: PUSH
63445: LD_STRING 
63447: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63448: LD_ADDR_OWVAR 35
63452: PUSH
63453: LD_VAR 0 1
63457: NEG
63458: PPUSH
63459: LD_VAR 0 1
63463: PPUSH
63464: CALL_OW 12
63468: ST_TO_ADDR
// end ;
63469: LD_VAR 0 2
63473: RET
// export function PrepareEnchidna ( ) ; begin
63474: LD_INT 0
63476: PPUSH
// uc_side := 0 ;
63477: LD_ADDR_OWVAR 20
63481: PUSH
63482: LD_INT 0
63484: ST_TO_ADDR
// uc_nation := 0 ;
63485: LD_ADDR_OWVAR 21
63489: PUSH
63490: LD_INT 0
63492: ST_TO_ADDR
// hc_class := class_baggie ;
63493: LD_ADDR_OWVAR 28
63497: PUSH
63498: LD_INT 13
63500: ST_TO_ADDR
// hc_gallery :=  ;
63501: LD_ADDR_OWVAR 33
63505: PUSH
63506: LD_STRING 
63508: ST_TO_ADDR
// end ;
63509: LD_VAR 0 1
63513: RET
// export function PrepareFrog ( ) ; begin
63514: LD_INT 0
63516: PPUSH
// uc_side := 0 ;
63517: LD_ADDR_OWVAR 20
63521: PUSH
63522: LD_INT 0
63524: ST_TO_ADDR
// uc_nation := 0 ;
63525: LD_ADDR_OWVAR 21
63529: PUSH
63530: LD_INT 0
63532: ST_TO_ADDR
// hc_class := class_frog ;
63533: LD_ADDR_OWVAR 28
63537: PUSH
63538: LD_INT 19
63540: ST_TO_ADDR
// hc_gallery :=  ;
63541: LD_ADDR_OWVAR 33
63545: PUSH
63546: LD_STRING 
63548: ST_TO_ADDR
// end ;
63549: LD_VAR 0 1
63553: RET
// export function PrepareFish ( ) ; begin
63554: LD_INT 0
63556: PPUSH
// uc_side := 0 ;
63557: LD_ADDR_OWVAR 20
63561: PUSH
63562: LD_INT 0
63564: ST_TO_ADDR
// uc_nation := 0 ;
63565: LD_ADDR_OWVAR 21
63569: PUSH
63570: LD_INT 0
63572: ST_TO_ADDR
// hc_class := class_fish ;
63573: LD_ADDR_OWVAR 28
63577: PUSH
63578: LD_INT 20
63580: ST_TO_ADDR
// hc_gallery :=  ;
63581: LD_ADDR_OWVAR 33
63585: PUSH
63586: LD_STRING 
63588: ST_TO_ADDR
// end ;
63589: LD_VAR 0 1
63593: RET
// export function PrepareBird ( ) ; begin
63594: LD_INT 0
63596: PPUSH
// uc_side := 0 ;
63597: LD_ADDR_OWVAR 20
63601: PUSH
63602: LD_INT 0
63604: ST_TO_ADDR
// uc_nation := 0 ;
63605: LD_ADDR_OWVAR 21
63609: PUSH
63610: LD_INT 0
63612: ST_TO_ADDR
// hc_class := class_phororhacos ;
63613: LD_ADDR_OWVAR 28
63617: PUSH
63618: LD_INT 18
63620: ST_TO_ADDR
// hc_gallery :=  ;
63621: LD_ADDR_OWVAR 33
63625: PUSH
63626: LD_STRING 
63628: ST_TO_ADDR
// end ;
63629: LD_VAR 0 1
63633: RET
// export function PrepareHorse ( ) ; begin
63634: LD_INT 0
63636: PPUSH
// uc_side := 0 ;
63637: LD_ADDR_OWVAR 20
63641: PUSH
63642: LD_INT 0
63644: ST_TO_ADDR
// uc_nation := 0 ;
63645: LD_ADDR_OWVAR 21
63649: PUSH
63650: LD_INT 0
63652: ST_TO_ADDR
// hc_class := class_horse ;
63653: LD_ADDR_OWVAR 28
63657: PUSH
63658: LD_INT 21
63660: ST_TO_ADDR
// hc_gallery :=  ;
63661: LD_ADDR_OWVAR 33
63665: PUSH
63666: LD_STRING 
63668: ST_TO_ADDR
// end ;
63669: LD_VAR 0 1
63673: RET
// export function PrepareMastodont ( ) ; begin
63674: LD_INT 0
63676: PPUSH
// uc_side := 0 ;
63677: LD_ADDR_OWVAR 20
63681: PUSH
63682: LD_INT 0
63684: ST_TO_ADDR
// uc_nation := 0 ;
63685: LD_ADDR_OWVAR 21
63689: PUSH
63690: LD_INT 0
63692: ST_TO_ADDR
// vc_chassis := class_mastodont ;
63693: LD_ADDR_OWVAR 37
63697: PUSH
63698: LD_INT 31
63700: ST_TO_ADDR
// vc_control := control_rider ;
63701: LD_ADDR_OWVAR 38
63705: PUSH
63706: LD_INT 4
63708: ST_TO_ADDR
// end ;
63709: LD_VAR 0 1
63713: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63714: LD_INT 0
63716: PPUSH
63717: PPUSH
63718: PPUSH
// uc_side = 0 ;
63719: LD_ADDR_OWVAR 20
63723: PUSH
63724: LD_INT 0
63726: ST_TO_ADDR
// uc_nation = 0 ;
63727: LD_ADDR_OWVAR 21
63731: PUSH
63732: LD_INT 0
63734: ST_TO_ADDR
// InitHc_All ( ) ;
63735: CALL_OW 584
// InitVc ;
63739: CALL_OW 20
// if mastodonts then
63743: LD_VAR 0 6
63747: IFFALSE 63814
// for i = 1 to mastodonts do
63749: LD_ADDR_VAR 0 11
63753: PUSH
63754: DOUBLE
63755: LD_INT 1
63757: DEC
63758: ST_TO_ADDR
63759: LD_VAR 0 6
63763: PUSH
63764: FOR_TO
63765: IFFALSE 63812
// begin vc_chassis := 31 ;
63767: LD_ADDR_OWVAR 37
63771: PUSH
63772: LD_INT 31
63774: ST_TO_ADDR
// vc_control := control_rider ;
63775: LD_ADDR_OWVAR 38
63779: PUSH
63780: LD_INT 4
63782: ST_TO_ADDR
// animal := CreateVehicle ;
63783: LD_ADDR_VAR 0 12
63787: PUSH
63788: CALL_OW 45
63792: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63793: LD_VAR 0 12
63797: PPUSH
63798: LD_VAR 0 8
63802: PPUSH
63803: LD_INT 0
63805: PPUSH
63806: CALL 65942 0 3
// end ;
63810: GO 63764
63812: POP
63813: POP
// if horses then
63814: LD_VAR 0 5
63818: IFFALSE 63885
// for i = 1 to horses do
63820: LD_ADDR_VAR 0 11
63824: PUSH
63825: DOUBLE
63826: LD_INT 1
63828: DEC
63829: ST_TO_ADDR
63830: LD_VAR 0 5
63834: PUSH
63835: FOR_TO
63836: IFFALSE 63883
// begin hc_class := 21 ;
63838: LD_ADDR_OWVAR 28
63842: PUSH
63843: LD_INT 21
63845: ST_TO_ADDR
// hc_gallery :=  ;
63846: LD_ADDR_OWVAR 33
63850: PUSH
63851: LD_STRING 
63853: ST_TO_ADDR
// animal := CreateHuman ;
63854: LD_ADDR_VAR 0 12
63858: PUSH
63859: CALL_OW 44
63863: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63864: LD_VAR 0 12
63868: PPUSH
63869: LD_VAR 0 8
63873: PPUSH
63874: LD_INT 0
63876: PPUSH
63877: CALL 65942 0 3
// end ;
63881: GO 63835
63883: POP
63884: POP
// if birds then
63885: LD_VAR 0 1
63889: IFFALSE 63956
// for i = 1 to birds do
63891: LD_ADDR_VAR 0 11
63895: PUSH
63896: DOUBLE
63897: LD_INT 1
63899: DEC
63900: ST_TO_ADDR
63901: LD_VAR 0 1
63905: PUSH
63906: FOR_TO
63907: IFFALSE 63954
// begin hc_class = 18 ;
63909: LD_ADDR_OWVAR 28
63913: PUSH
63914: LD_INT 18
63916: ST_TO_ADDR
// hc_gallery =  ;
63917: LD_ADDR_OWVAR 33
63921: PUSH
63922: LD_STRING 
63924: ST_TO_ADDR
// animal := CreateHuman ;
63925: LD_ADDR_VAR 0 12
63929: PUSH
63930: CALL_OW 44
63934: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63935: LD_VAR 0 12
63939: PPUSH
63940: LD_VAR 0 8
63944: PPUSH
63945: LD_INT 0
63947: PPUSH
63948: CALL 65942 0 3
// end ;
63952: GO 63906
63954: POP
63955: POP
// if tigers then
63956: LD_VAR 0 2
63960: IFFALSE 64044
// for i = 1 to tigers do
63962: LD_ADDR_VAR 0 11
63966: PUSH
63967: DOUBLE
63968: LD_INT 1
63970: DEC
63971: ST_TO_ADDR
63972: LD_VAR 0 2
63976: PUSH
63977: FOR_TO
63978: IFFALSE 64042
// begin hc_class = class_tiger ;
63980: LD_ADDR_OWVAR 28
63984: PUSH
63985: LD_INT 14
63987: ST_TO_ADDR
// hc_gallery =  ;
63988: LD_ADDR_OWVAR 33
63992: PUSH
63993: LD_STRING 
63995: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63996: LD_ADDR_OWVAR 35
64000: PUSH
64001: LD_INT 7
64003: NEG
64004: PPUSH
64005: LD_INT 7
64007: PPUSH
64008: CALL_OW 12
64012: ST_TO_ADDR
// animal := CreateHuman ;
64013: LD_ADDR_VAR 0 12
64017: PUSH
64018: CALL_OW 44
64022: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64023: LD_VAR 0 12
64027: PPUSH
64028: LD_VAR 0 8
64032: PPUSH
64033: LD_INT 0
64035: PPUSH
64036: CALL 65942 0 3
// end ;
64040: GO 63977
64042: POP
64043: POP
// if apemans then
64044: LD_VAR 0 3
64048: IFFALSE 64171
// for i = 1 to apemans do
64050: LD_ADDR_VAR 0 11
64054: PUSH
64055: DOUBLE
64056: LD_INT 1
64058: DEC
64059: ST_TO_ADDR
64060: LD_VAR 0 3
64064: PUSH
64065: FOR_TO
64066: IFFALSE 64169
// begin hc_class = class_apeman ;
64068: LD_ADDR_OWVAR 28
64072: PUSH
64073: LD_INT 12
64075: ST_TO_ADDR
// hc_gallery =  ;
64076: LD_ADDR_OWVAR 33
64080: PUSH
64081: LD_STRING 
64083: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64084: LD_ADDR_OWVAR 35
64088: PUSH
64089: LD_INT 2
64091: NEG
64092: PPUSH
64093: LD_INT 2
64095: PPUSH
64096: CALL_OW 12
64100: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64101: LD_ADDR_OWVAR 31
64105: PUSH
64106: LD_INT 1
64108: PPUSH
64109: LD_INT 3
64111: PPUSH
64112: CALL_OW 12
64116: PUSH
64117: LD_INT 1
64119: PPUSH
64120: LD_INT 3
64122: PPUSH
64123: CALL_OW 12
64127: PUSH
64128: LD_INT 0
64130: PUSH
64131: LD_INT 0
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: LIST
64138: LIST
64139: ST_TO_ADDR
// animal := CreateHuman ;
64140: LD_ADDR_VAR 0 12
64144: PUSH
64145: CALL_OW 44
64149: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64150: LD_VAR 0 12
64154: PPUSH
64155: LD_VAR 0 8
64159: PPUSH
64160: LD_INT 0
64162: PPUSH
64163: CALL 65942 0 3
// end ;
64167: GO 64065
64169: POP
64170: POP
// if enchidnas then
64171: LD_VAR 0 4
64175: IFFALSE 64242
// for i = 1 to enchidnas do
64177: LD_ADDR_VAR 0 11
64181: PUSH
64182: DOUBLE
64183: LD_INT 1
64185: DEC
64186: ST_TO_ADDR
64187: LD_VAR 0 4
64191: PUSH
64192: FOR_TO
64193: IFFALSE 64240
// begin hc_class = 13 ;
64195: LD_ADDR_OWVAR 28
64199: PUSH
64200: LD_INT 13
64202: ST_TO_ADDR
// hc_gallery =  ;
64203: LD_ADDR_OWVAR 33
64207: PUSH
64208: LD_STRING 
64210: ST_TO_ADDR
// animal := CreateHuman ;
64211: LD_ADDR_VAR 0 12
64215: PUSH
64216: CALL_OW 44
64220: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64221: LD_VAR 0 12
64225: PPUSH
64226: LD_VAR 0 8
64230: PPUSH
64231: LD_INT 0
64233: PPUSH
64234: CALL 65942 0 3
// end ;
64238: GO 64192
64240: POP
64241: POP
// if fishes then
64242: LD_VAR 0 7
64246: IFFALSE 64313
// for i = 1 to fishes do
64248: LD_ADDR_VAR 0 11
64252: PUSH
64253: DOUBLE
64254: LD_INT 1
64256: DEC
64257: ST_TO_ADDR
64258: LD_VAR 0 7
64262: PUSH
64263: FOR_TO
64264: IFFALSE 64311
// begin hc_class = 20 ;
64266: LD_ADDR_OWVAR 28
64270: PUSH
64271: LD_INT 20
64273: ST_TO_ADDR
// hc_gallery =  ;
64274: LD_ADDR_OWVAR 33
64278: PUSH
64279: LD_STRING 
64281: ST_TO_ADDR
// animal := CreateHuman ;
64282: LD_ADDR_VAR 0 12
64286: PUSH
64287: CALL_OW 44
64291: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64292: LD_VAR 0 12
64296: PPUSH
64297: LD_VAR 0 9
64301: PPUSH
64302: LD_INT 0
64304: PPUSH
64305: CALL 65942 0 3
// end ;
64309: GO 64263
64311: POP
64312: POP
// end ;
64313: LD_VAR 0 10
64317: RET
// export function WantHeal ( sci , unit ) ; begin
64318: LD_INT 0
64320: PPUSH
// if GetTaskList ( sci ) > 0 then
64321: LD_VAR 0 1
64325: PPUSH
64326: CALL_OW 437
64330: PUSH
64331: LD_INT 0
64333: GREATER
64334: IFFALSE 64404
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64336: LD_VAR 0 1
64340: PPUSH
64341: CALL_OW 437
64345: PUSH
64346: LD_INT 1
64348: ARRAY
64349: PUSH
64350: LD_INT 1
64352: ARRAY
64353: PUSH
64354: LD_STRING l
64356: EQUAL
64357: PUSH
64358: LD_VAR 0 1
64362: PPUSH
64363: CALL_OW 437
64367: PUSH
64368: LD_INT 1
64370: ARRAY
64371: PUSH
64372: LD_INT 4
64374: ARRAY
64375: PUSH
64376: LD_VAR 0 2
64380: EQUAL
64381: AND
64382: IFFALSE 64394
// result := true else
64384: LD_ADDR_VAR 0 3
64388: PUSH
64389: LD_INT 1
64391: ST_TO_ADDR
64392: GO 64402
// result := false ;
64394: LD_ADDR_VAR 0 3
64398: PUSH
64399: LD_INT 0
64401: ST_TO_ADDR
// end else
64402: GO 64412
// result := false ;
64404: LD_ADDR_VAR 0 3
64408: PUSH
64409: LD_INT 0
64411: ST_TO_ADDR
// end ;
64412: LD_VAR 0 3
64416: RET
// export function HealTarget ( sci ) ; begin
64417: LD_INT 0
64419: PPUSH
// if not sci then
64420: LD_VAR 0 1
64424: NOT
64425: IFFALSE 64429
// exit ;
64427: GO 64494
// result := 0 ;
64429: LD_ADDR_VAR 0 2
64433: PUSH
64434: LD_INT 0
64436: ST_TO_ADDR
// if GetTaskList ( sci ) then
64437: LD_VAR 0 1
64441: PPUSH
64442: CALL_OW 437
64446: IFFALSE 64494
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64448: LD_VAR 0 1
64452: PPUSH
64453: CALL_OW 437
64457: PUSH
64458: LD_INT 1
64460: ARRAY
64461: PUSH
64462: LD_INT 1
64464: ARRAY
64465: PUSH
64466: LD_STRING l
64468: EQUAL
64469: IFFALSE 64494
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64471: LD_ADDR_VAR 0 2
64475: PUSH
64476: LD_VAR 0 1
64480: PPUSH
64481: CALL_OW 437
64485: PUSH
64486: LD_INT 1
64488: ARRAY
64489: PUSH
64490: LD_INT 4
64492: ARRAY
64493: ST_TO_ADDR
// end ;
64494: LD_VAR 0 2
64498: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64499: LD_INT 0
64501: PPUSH
64502: PPUSH
64503: PPUSH
64504: PPUSH
// if not base_units then
64505: LD_VAR 0 1
64509: NOT
64510: IFFALSE 64514
// exit ;
64512: GO 64601
// result := false ;
64514: LD_ADDR_VAR 0 2
64518: PUSH
64519: LD_INT 0
64521: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64522: LD_ADDR_VAR 0 5
64526: PUSH
64527: LD_VAR 0 1
64531: PPUSH
64532: LD_INT 21
64534: PUSH
64535: LD_INT 3
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PPUSH
64542: CALL_OW 72
64546: ST_TO_ADDR
// if not tmp then
64547: LD_VAR 0 5
64551: NOT
64552: IFFALSE 64556
// exit ;
64554: GO 64601
// for i in tmp do
64556: LD_ADDR_VAR 0 3
64560: PUSH
64561: LD_VAR 0 5
64565: PUSH
64566: FOR_IN
64567: IFFALSE 64599
// begin result := EnemyInRange ( i , 22 ) ;
64569: LD_ADDR_VAR 0 2
64573: PUSH
64574: LD_VAR 0 3
64578: PPUSH
64579: LD_INT 22
64581: PPUSH
64582: CALL 62188 0 2
64586: ST_TO_ADDR
// if result then
64587: LD_VAR 0 2
64591: IFFALSE 64597
// exit ;
64593: POP
64594: POP
64595: GO 64601
// end ;
64597: GO 64566
64599: POP
64600: POP
// end ;
64601: LD_VAR 0 2
64605: RET
// export function FilterByTag ( units , tag ) ; begin
64606: LD_INT 0
64608: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64609: LD_ADDR_VAR 0 3
64613: PUSH
64614: LD_VAR 0 1
64618: PPUSH
64619: LD_INT 120
64621: PUSH
64622: LD_VAR 0 2
64626: PUSH
64627: EMPTY
64628: LIST
64629: LIST
64630: PPUSH
64631: CALL_OW 72
64635: ST_TO_ADDR
// end ;
64636: LD_VAR 0 3
64640: RET
// export function IsDriver ( un ) ; begin
64641: LD_INT 0
64643: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64644: LD_ADDR_VAR 0 2
64648: PUSH
64649: LD_VAR 0 1
64653: PUSH
64654: LD_INT 55
64656: PUSH
64657: EMPTY
64658: LIST
64659: PPUSH
64660: CALL_OW 69
64664: IN
64665: ST_TO_ADDR
// end ;
64666: LD_VAR 0 2
64670: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64671: LD_INT 0
64673: PPUSH
64674: PPUSH
// list := [ ] ;
64675: LD_ADDR_VAR 0 5
64679: PUSH
64680: EMPTY
64681: ST_TO_ADDR
// case d of 0 :
64682: LD_VAR 0 3
64686: PUSH
64687: LD_INT 0
64689: DOUBLE
64690: EQUAL
64691: IFTRUE 64695
64693: GO 64828
64695: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64696: LD_ADDR_VAR 0 5
64700: PUSH
64701: LD_VAR 0 1
64705: PUSH
64706: LD_INT 4
64708: MINUS
64709: PUSH
64710: LD_VAR 0 2
64714: PUSH
64715: LD_INT 4
64717: MINUS
64718: PUSH
64719: LD_INT 2
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: LIST
64726: PUSH
64727: LD_VAR 0 1
64731: PUSH
64732: LD_INT 3
64734: MINUS
64735: PUSH
64736: LD_VAR 0 2
64740: PUSH
64741: LD_INT 1
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: LIST
64748: PUSH
64749: LD_VAR 0 1
64753: PUSH
64754: LD_INT 4
64756: PLUS
64757: PUSH
64758: LD_VAR 0 2
64762: PUSH
64763: LD_INT 4
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: LIST
64770: PUSH
64771: LD_VAR 0 1
64775: PUSH
64776: LD_INT 3
64778: PLUS
64779: PUSH
64780: LD_VAR 0 2
64784: PUSH
64785: LD_INT 3
64787: PLUS
64788: PUSH
64789: LD_INT 5
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: LIST
64796: PUSH
64797: LD_VAR 0 1
64801: PUSH
64802: LD_VAR 0 2
64806: PUSH
64807: LD_INT 4
64809: PLUS
64810: PUSH
64811: LD_INT 0
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: LIST
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: LIST
64823: LIST
64824: LIST
64825: ST_TO_ADDR
// end ; 1 :
64826: GO 65526
64828: LD_INT 1
64830: DOUBLE
64831: EQUAL
64832: IFTRUE 64836
64834: GO 64969
64836: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64837: LD_ADDR_VAR 0 5
64841: PUSH
64842: LD_VAR 0 1
64846: PUSH
64847: LD_VAR 0 2
64851: PUSH
64852: LD_INT 4
64854: MINUS
64855: PUSH
64856: LD_INT 3
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: LIST
64863: PUSH
64864: LD_VAR 0 1
64868: PUSH
64869: LD_INT 3
64871: MINUS
64872: PUSH
64873: LD_VAR 0 2
64877: PUSH
64878: LD_INT 3
64880: MINUS
64881: PUSH
64882: LD_INT 2
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: LIST
64889: PUSH
64890: LD_VAR 0 1
64894: PUSH
64895: LD_INT 4
64897: MINUS
64898: PUSH
64899: LD_VAR 0 2
64903: PUSH
64904: LD_INT 1
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: LIST
64911: PUSH
64912: LD_VAR 0 1
64916: PUSH
64917: LD_VAR 0 2
64921: PUSH
64922: LD_INT 3
64924: PLUS
64925: PUSH
64926: LD_INT 0
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: LIST
64933: PUSH
64934: LD_VAR 0 1
64938: PUSH
64939: LD_INT 4
64941: PLUS
64942: PUSH
64943: LD_VAR 0 2
64947: PUSH
64948: LD_INT 4
64950: PLUS
64951: PUSH
64952: LD_INT 5
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: LIST
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: ST_TO_ADDR
// end ; 2 :
64967: GO 65526
64969: LD_INT 2
64971: DOUBLE
64972: EQUAL
64973: IFTRUE 64977
64975: GO 65106
64977: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64978: LD_ADDR_VAR 0 5
64982: PUSH
64983: LD_VAR 0 1
64987: PUSH
64988: LD_VAR 0 2
64992: PUSH
64993: LD_INT 3
64995: MINUS
64996: PUSH
64997: LD_INT 3
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: LIST
65004: PUSH
65005: LD_VAR 0 1
65009: PUSH
65010: LD_INT 4
65012: PLUS
65013: PUSH
65014: LD_VAR 0 2
65018: PUSH
65019: LD_INT 4
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: LIST
65026: PUSH
65027: LD_VAR 0 1
65031: PUSH
65032: LD_VAR 0 2
65036: PUSH
65037: LD_INT 4
65039: PLUS
65040: PUSH
65041: LD_INT 0
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: LIST
65048: PUSH
65049: LD_VAR 0 1
65053: PUSH
65054: LD_INT 3
65056: MINUS
65057: PUSH
65058: LD_VAR 0 2
65062: PUSH
65063: LD_INT 1
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: LIST
65070: PUSH
65071: LD_VAR 0 1
65075: PUSH
65076: LD_INT 4
65078: MINUS
65079: PUSH
65080: LD_VAR 0 2
65084: PUSH
65085: LD_INT 4
65087: MINUS
65088: PUSH
65089: LD_INT 2
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: LIST
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: LIST
65101: LIST
65102: LIST
65103: ST_TO_ADDR
// end ; 3 :
65104: GO 65526
65106: LD_INT 3
65108: DOUBLE
65109: EQUAL
65110: IFTRUE 65114
65112: GO 65247
65114: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65115: LD_ADDR_VAR 0 5
65119: PUSH
65120: LD_VAR 0 1
65124: PUSH
65125: LD_INT 3
65127: PLUS
65128: PUSH
65129: LD_VAR 0 2
65133: PUSH
65134: LD_INT 4
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: LIST
65141: PUSH
65142: LD_VAR 0 1
65146: PUSH
65147: LD_INT 4
65149: PLUS
65150: PUSH
65151: LD_VAR 0 2
65155: PUSH
65156: LD_INT 4
65158: PLUS
65159: PUSH
65160: LD_INT 5
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: LIST
65167: PUSH
65168: LD_VAR 0 1
65172: PUSH
65173: LD_INT 4
65175: MINUS
65176: PUSH
65177: LD_VAR 0 2
65181: PUSH
65182: LD_INT 1
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: LIST
65189: PUSH
65190: LD_VAR 0 1
65194: PUSH
65195: LD_VAR 0 2
65199: PUSH
65200: LD_INT 4
65202: MINUS
65203: PUSH
65204: LD_INT 3
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: LIST
65211: PUSH
65212: LD_VAR 0 1
65216: PUSH
65217: LD_INT 3
65219: MINUS
65220: PUSH
65221: LD_VAR 0 2
65225: PUSH
65226: LD_INT 3
65228: MINUS
65229: PUSH
65230: LD_INT 2
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: LIST
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: LIST
65242: LIST
65243: LIST
65244: ST_TO_ADDR
// end ; 4 :
65245: GO 65526
65247: LD_INT 4
65249: DOUBLE
65250: EQUAL
65251: IFTRUE 65255
65253: GO 65388
65255: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65256: LD_ADDR_VAR 0 5
65260: PUSH
65261: LD_VAR 0 1
65265: PUSH
65266: LD_VAR 0 2
65270: PUSH
65271: LD_INT 4
65273: PLUS
65274: PUSH
65275: LD_INT 0
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: LIST
65282: PUSH
65283: LD_VAR 0 1
65287: PUSH
65288: LD_INT 3
65290: PLUS
65291: PUSH
65292: LD_VAR 0 2
65296: PUSH
65297: LD_INT 3
65299: PLUS
65300: PUSH
65301: LD_INT 5
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: LIST
65308: PUSH
65309: LD_VAR 0 1
65313: PUSH
65314: LD_INT 4
65316: PLUS
65317: PUSH
65318: LD_VAR 0 2
65322: PUSH
65323: LD_INT 4
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: LIST
65330: PUSH
65331: LD_VAR 0 1
65335: PUSH
65336: LD_VAR 0 2
65340: PUSH
65341: LD_INT 3
65343: MINUS
65344: PUSH
65345: LD_INT 3
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: LIST
65352: PUSH
65353: LD_VAR 0 1
65357: PUSH
65358: LD_INT 4
65360: MINUS
65361: PUSH
65362: LD_VAR 0 2
65366: PUSH
65367: LD_INT 4
65369: MINUS
65370: PUSH
65371: LD_INT 2
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: LIST
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: LIST
65383: LIST
65384: LIST
65385: ST_TO_ADDR
// end ; 5 :
65386: GO 65526
65388: LD_INT 5
65390: DOUBLE
65391: EQUAL
65392: IFTRUE 65396
65394: GO 65525
65396: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65397: LD_ADDR_VAR 0 5
65401: PUSH
65402: LD_VAR 0 1
65406: PUSH
65407: LD_INT 4
65409: MINUS
65410: PUSH
65411: LD_VAR 0 2
65415: PUSH
65416: LD_INT 1
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: LIST
65423: PUSH
65424: LD_VAR 0 1
65428: PUSH
65429: LD_VAR 0 2
65433: PUSH
65434: LD_INT 4
65436: MINUS
65437: PUSH
65438: LD_INT 3
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: LIST
65445: PUSH
65446: LD_VAR 0 1
65450: PUSH
65451: LD_INT 4
65453: PLUS
65454: PUSH
65455: LD_VAR 0 2
65459: PUSH
65460: LD_INT 4
65462: PLUS
65463: PUSH
65464: LD_INT 5
65466: PUSH
65467: EMPTY
65468: LIST
65469: LIST
65470: LIST
65471: PUSH
65472: LD_VAR 0 1
65476: PUSH
65477: LD_INT 3
65479: PLUS
65480: PUSH
65481: LD_VAR 0 2
65485: PUSH
65486: LD_INT 4
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: LIST
65493: PUSH
65494: LD_VAR 0 1
65498: PUSH
65499: LD_VAR 0 2
65503: PUSH
65504: LD_INT 3
65506: PLUS
65507: PUSH
65508: LD_INT 0
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: LIST
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: LIST
65522: ST_TO_ADDR
// end ; end ;
65523: GO 65526
65525: POP
// result := list ;
65526: LD_ADDR_VAR 0 4
65530: PUSH
65531: LD_VAR 0 5
65535: ST_TO_ADDR
// end ;
65536: LD_VAR 0 4
65540: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65541: LD_INT 0
65543: PPUSH
65544: PPUSH
65545: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65546: LD_VAR 0 1
65550: NOT
65551: PUSH
65552: LD_VAR 0 2
65556: PUSH
65557: LD_INT 1
65559: PUSH
65560: LD_INT 2
65562: PUSH
65563: LD_INT 3
65565: PUSH
65566: LD_INT 4
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: LIST
65573: LIST
65574: IN
65575: NOT
65576: OR
65577: IFFALSE 65581
// exit ;
65579: GO 65664
// tmp := [ ] ;
65581: LD_ADDR_VAR 0 5
65585: PUSH
65586: EMPTY
65587: ST_TO_ADDR
// for i in units do
65588: LD_ADDR_VAR 0 4
65592: PUSH
65593: LD_VAR 0 1
65597: PUSH
65598: FOR_IN
65599: IFFALSE 65633
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
65601: LD_ADDR_VAR 0 5
65605: PUSH
65606: LD_VAR 0 5
65610: PPUSH
65611: LD_VAR 0 4
65615: PPUSH
65616: LD_VAR 0 2
65620: PPUSH
65621: CALL_OW 259
65625: PPUSH
65626: CALL 67025 0 2
65630: ST_TO_ADDR
65631: GO 65598
65633: POP
65634: POP
// if not tmp then
65635: LD_VAR 0 5
65639: NOT
65640: IFFALSE 65644
// exit ;
65642: GO 65664
// result := SortListByListDesc ( units , tmp ) ;
65644: LD_ADDR_VAR 0 3
65648: PUSH
65649: LD_VAR 0 1
65653: PPUSH
65654: LD_VAR 0 5
65658: PPUSH
65659: CALL_OW 77
65663: ST_TO_ADDR
// end ;
65664: LD_VAR 0 3
65668: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65669: LD_INT 0
65671: PPUSH
65672: PPUSH
65673: PPUSH
// result := false ;
65674: LD_ADDR_VAR 0 3
65678: PUSH
65679: LD_INT 0
65681: ST_TO_ADDR
// if not building then
65682: LD_VAR 0 2
65686: NOT
65687: IFFALSE 65691
// exit ;
65689: GO 65829
// x := GetX ( building ) ;
65691: LD_ADDR_VAR 0 4
65695: PUSH
65696: LD_VAR 0 2
65700: PPUSH
65701: CALL_OW 250
65705: ST_TO_ADDR
// y := GetY ( building ) ;
65706: LD_ADDR_VAR 0 5
65710: PUSH
65711: LD_VAR 0 2
65715: PPUSH
65716: CALL_OW 251
65720: ST_TO_ADDR
// if not x or not y then
65721: LD_VAR 0 4
65725: NOT
65726: PUSH
65727: LD_VAR 0 5
65731: NOT
65732: OR
65733: IFFALSE 65737
// exit ;
65735: GO 65829
// if GetTaskList ( unit ) then
65737: LD_VAR 0 1
65741: PPUSH
65742: CALL_OW 437
65746: IFFALSE 65829
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65748: LD_STRING e
65750: PUSH
65751: LD_VAR 0 1
65755: PPUSH
65756: CALL_OW 437
65760: PUSH
65761: LD_INT 1
65763: ARRAY
65764: PUSH
65765: LD_INT 1
65767: ARRAY
65768: EQUAL
65769: PUSH
65770: LD_VAR 0 4
65774: PUSH
65775: LD_VAR 0 1
65779: PPUSH
65780: CALL_OW 437
65784: PUSH
65785: LD_INT 1
65787: ARRAY
65788: PUSH
65789: LD_INT 2
65791: ARRAY
65792: EQUAL
65793: AND
65794: PUSH
65795: LD_VAR 0 5
65799: PUSH
65800: LD_VAR 0 1
65804: PPUSH
65805: CALL_OW 437
65809: PUSH
65810: LD_INT 1
65812: ARRAY
65813: PUSH
65814: LD_INT 3
65816: ARRAY
65817: EQUAL
65818: AND
65819: IFFALSE 65829
// result := true end ;
65821: LD_ADDR_VAR 0 3
65825: PUSH
65826: LD_INT 1
65828: ST_TO_ADDR
// end ;
65829: LD_VAR 0 3
65833: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65834: LD_INT 0
65836: PPUSH
// result := false ;
65837: LD_ADDR_VAR 0 4
65841: PUSH
65842: LD_INT 0
65844: ST_TO_ADDR
// if GetTaskList ( unit ) then
65845: LD_VAR 0 1
65849: PPUSH
65850: CALL_OW 437
65854: IFFALSE 65937
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65856: LD_STRING M
65858: PUSH
65859: LD_VAR 0 1
65863: PPUSH
65864: CALL_OW 437
65868: PUSH
65869: LD_INT 1
65871: ARRAY
65872: PUSH
65873: LD_INT 1
65875: ARRAY
65876: EQUAL
65877: PUSH
65878: LD_VAR 0 2
65882: PUSH
65883: LD_VAR 0 1
65887: PPUSH
65888: CALL_OW 437
65892: PUSH
65893: LD_INT 1
65895: ARRAY
65896: PUSH
65897: LD_INT 2
65899: ARRAY
65900: EQUAL
65901: AND
65902: PUSH
65903: LD_VAR 0 3
65907: PUSH
65908: LD_VAR 0 1
65912: PPUSH
65913: CALL_OW 437
65917: PUSH
65918: LD_INT 1
65920: ARRAY
65921: PUSH
65922: LD_INT 3
65924: ARRAY
65925: EQUAL
65926: AND
65927: IFFALSE 65937
// result := true ;
65929: LD_ADDR_VAR 0 4
65933: PUSH
65934: LD_INT 1
65936: ST_TO_ADDR
// end ; end ;
65937: LD_VAR 0 4
65941: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65942: LD_INT 0
65944: PPUSH
65945: PPUSH
65946: PPUSH
65947: PPUSH
// if not unit or not area then
65948: LD_VAR 0 1
65952: NOT
65953: PUSH
65954: LD_VAR 0 2
65958: NOT
65959: OR
65960: IFFALSE 65964
// exit ;
65962: GO 66128
// tmp := AreaToList ( area , i ) ;
65964: LD_ADDR_VAR 0 6
65968: PUSH
65969: LD_VAR 0 2
65973: PPUSH
65974: LD_VAR 0 5
65978: PPUSH
65979: CALL_OW 517
65983: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65984: LD_ADDR_VAR 0 5
65988: PUSH
65989: DOUBLE
65990: LD_INT 1
65992: DEC
65993: ST_TO_ADDR
65994: LD_VAR 0 6
65998: PUSH
65999: LD_INT 1
66001: ARRAY
66002: PUSH
66003: FOR_TO
66004: IFFALSE 66126
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66006: LD_ADDR_VAR 0 7
66010: PUSH
66011: LD_VAR 0 6
66015: PUSH
66016: LD_INT 1
66018: ARRAY
66019: PUSH
66020: LD_VAR 0 5
66024: ARRAY
66025: PUSH
66026: LD_VAR 0 6
66030: PUSH
66031: LD_INT 2
66033: ARRAY
66034: PUSH
66035: LD_VAR 0 5
66039: ARRAY
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66045: LD_VAR 0 7
66049: PUSH
66050: LD_INT 1
66052: ARRAY
66053: PPUSH
66054: LD_VAR 0 7
66058: PUSH
66059: LD_INT 2
66061: ARRAY
66062: PPUSH
66063: CALL_OW 428
66067: PUSH
66068: LD_INT 0
66070: EQUAL
66071: IFFALSE 66124
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66073: LD_VAR 0 1
66077: PPUSH
66078: LD_VAR 0 7
66082: PUSH
66083: LD_INT 1
66085: ARRAY
66086: PPUSH
66087: LD_VAR 0 7
66091: PUSH
66092: LD_INT 2
66094: ARRAY
66095: PPUSH
66096: LD_VAR 0 3
66100: PPUSH
66101: CALL_OW 48
// result := IsPlaced ( unit ) ;
66105: LD_ADDR_VAR 0 4
66109: PUSH
66110: LD_VAR 0 1
66114: PPUSH
66115: CALL_OW 305
66119: ST_TO_ADDR
// exit ;
66120: POP
66121: POP
66122: GO 66128
// end ; end ;
66124: GO 66003
66126: POP
66127: POP
// end ;
66128: LD_VAR 0 4
66132: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66133: LD_INT 0
66135: PPUSH
66136: PPUSH
66137: PPUSH
// if not side or side > 8 then
66138: LD_VAR 0 1
66142: NOT
66143: PUSH
66144: LD_VAR 0 1
66148: PUSH
66149: LD_INT 8
66151: GREATER
66152: OR
66153: IFFALSE 66157
// exit ;
66155: GO 66344
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66157: LD_ADDR_VAR 0 4
66161: PUSH
66162: LD_INT 22
66164: PUSH
66165: LD_VAR 0 1
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: LD_INT 21
66176: PUSH
66177: LD_INT 3
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: PUSH
66184: EMPTY
66185: LIST
66186: LIST
66187: PPUSH
66188: CALL_OW 69
66192: ST_TO_ADDR
// if not tmp then
66193: LD_VAR 0 4
66197: NOT
66198: IFFALSE 66202
// exit ;
66200: GO 66344
// enable_addtolog := true ;
66202: LD_ADDR_OWVAR 81
66206: PUSH
66207: LD_INT 1
66209: ST_TO_ADDR
// AddToLog ( [ ) ;
66210: LD_STRING [
66212: PPUSH
66213: CALL_OW 561
// for i in tmp do
66217: LD_ADDR_VAR 0 3
66221: PUSH
66222: LD_VAR 0 4
66226: PUSH
66227: FOR_IN
66228: IFFALSE 66335
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66230: LD_STRING [
66232: PUSH
66233: LD_VAR 0 3
66237: PPUSH
66238: CALL_OW 266
66242: STR
66243: PUSH
66244: LD_STRING , 
66246: STR
66247: PUSH
66248: LD_VAR 0 3
66252: PPUSH
66253: CALL_OW 250
66257: STR
66258: PUSH
66259: LD_STRING , 
66261: STR
66262: PUSH
66263: LD_VAR 0 3
66267: PPUSH
66268: CALL_OW 251
66272: STR
66273: PUSH
66274: LD_STRING , 
66276: STR
66277: PUSH
66278: LD_VAR 0 3
66282: PPUSH
66283: CALL_OW 254
66287: STR
66288: PUSH
66289: LD_STRING , 
66291: STR
66292: PUSH
66293: LD_VAR 0 3
66297: PPUSH
66298: LD_INT 1
66300: PPUSH
66301: CALL_OW 268
66305: STR
66306: PUSH
66307: LD_STRING , 
66309: STR
66310: PUSH
66311: LD_VAR 0 3
66315: PPUSH
66316: LD_INT 2
66318: PPUSH
66319: CALL_OW 268
66323: STR
66324: PUSH
66325: LD_STRING ],
66327: STR
66328: PPUSH
66329: CALL_OW 561
// end ;
66333: GO 66227
66335: POP
66336: POP
// AddToLog ( ]; ) ;
66337: LD_STRING ];
66339: PPUSH
66340: CALL_OW 561
// end ;
66344: LD_VAR 0 2
66348: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66349: LD_INT 0
66351: PPUSH
66352: PPUSH
66353: PPUSH
66354: PPUSH
66355: PPUSH
// if not area or not rate or not max then
66356: LD_VAR 0 1
66360: NOT
66361: PUSH
66362: LD_VAR 0 2
66366: NOT
66367: OR
66368: PUSH
66369: LD_VAR 0 4
66373: NOT
66374: OR
66375: IFFALSE 66379
// exit ;
66377: GO 66568
// while 1 do
66379: LD_INT 1
66381: IFFALSE 66568
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66383: LD_ADDR_VAR 0 9
66387: PUSH
66388: LD_VAR 0 1
66392: PPUSH
66393: LD_INT 1
66395: PPUSH
66396: CALL_OW 287
66400: PUSH
66401: LD_INT 10
66403: MUL
66404: ST_TO_ADDR
// r := rate / 10 ;
66405: LD_ADDR_VAR 0 7
66409: PUSH
66410: LD_VAR 0 2
66414: PUSH
66415: LD_INT 10
66417: DIVREAL
66418: ST_TO_ADDR
// time := 1 1$00 ;
66419: LD_ADDR_VAR 0 8
66423: PUSH
66424: LD_INT 2100
66426: ST_TO_ADDR
// if amount < min then
66427: LD_VAR 0 9
66431: PUSH
66432: LD_VAR 0 3
66436: LESS
66437: IFFALSE 66455
// r := r * 2 else
66439: LD_ADDR_VAR 0 7
66443: PUSH
66444: LD_VAR 0 7
66448: PUSH
66449: LD_INT 2
66451: MUL
66452: ST_TO_ADDR
66453: GO 66481
// if amount > max then
66455: LD_VAR 0 9
66459: PUSH
66460: LD_VAR 0 4
66464: GREATER
66465: IFFALSE 66481
// r := r / 2 ;
66467: LD_ADDR_VAR 0 7
66471: PUSH
66472: LD_VAR 0 7
66476: PUSH
66477: LD_INT 2
66479: DIVREAL
66480: ST_TO_ADDR
// time := time / r ;
66481: LD_ADDR_VAR 0 8
66485: PUSH
66486: LD_VAR 0 8
66490: PUSH
66491: LD_VAR 0 7
66495: DIVREAL
66496: ST_TO_ADDR
// if time < 0 then
66497: LD_VAR 0 8
66501: PUSH
66502: LD_INT 0
66504: LESS
66505: IFFALSE 66522
// time := time * - 1 ;
66507: LD_ADDR_VAR 0 8
66511: PUSH
66512: LD_VAR 0 8
66516: PUSH
66517: LD_INT 1
66519: NEG
66520: MUL
66521: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66522: LD_VAR 0 8
66526: PUSH
66527: LD_INT 35
66529: PPUSH
66530: LD_INT 875
66532: PPUSH
66533: CALL_OW 12
66537: PLUS
66538: PPUSH
66539: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66543: LD_INT 1
66545: PPUSH
66546: LD_INT 5
66548: PPUSH
66549: CALL_OW 12
66553: PPUSH
66554: LD_VAR 0 1
66558: PPUSH
66559: LD_INT 1
66561: PPUSH
66562: CALL_OW 55
// end ;
66566: GO 66379
// end ;
66568: LD_VAR 0 5
66572: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66573: LD_INT 0
66575: PPUSH
66576: PPUSH
66577: PPUSH
66578: PPUSH
66579: PPUSH
66580: PPUSH
66581: PPUSH
66582: PPUSH
// if not turrets or not factories then
66583: LD_VAR 0 1
66587: NOT
66588: PUSH
66589: LD_VAR 0 2
66593: NOT
66594: OR
66595: IFFALSE 66599
// exit ;
66597: GO 66906
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66599: LD_ADDR_VAR 0 10
66603: PUSH
66604: LD_INT 5
66606: PUSH
66607: LD_INT 6
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: LD_INT 2
66616: PUSH
66617: LD_INT 4
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: LD_INT 3
66626: PUSH
66627: LD_INT 5
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: LIST
66638: PUSH
66639: LD_INT 24
66641: PUSH
66642: LD_INT 25
66644: PUSH
66645: EMPTY
66646: LIST
66647: LIST
66648: PUSH
66649: LD_INT 23
66651: PUSH
66652: LD_INT 27
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: PUSH
66663: LD_INT 42
66665: PUSH
66666: LD_INT 43
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: PUSH
66673: LD_INT 44
66675: PUSH
66676: LD_INT 46
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: PUSH
66683: LD_INT 45
66685: PUSH
66686: LD_INT 47
66688: PUSH
66689: EMPTY
66690: LIST
66691: LIST
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: LIST
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: LIST
66702: ST_TO_ADDR
// result := [ ] ;
66703: LD_ADDR_VAR 0 3
66707: PUSH
66708: EMPTY
66709: ST_TO_ADDR
// for i in turrets do
66710: LD_ADDR_VAR 0 4
66714: PUSH
66715: LD_VAR 0 1
66719: PUSH
66720: FOR_IN
66721: IFFALSE 66904
// begin nat := GetNation ( i ) ;
66723: LD_ADDR_VAR 0 7
66727: PUSH
66728: LD_VAR 0 4
66732: PPUSH
66733: CALL_OW 248
66737: ST_TO_ADDR
// weapon := 0 ;
66738: LD_ADDR_VAR 0 8
66742: PUSH
66743: LD_INT 0
66745: ST_TO_ADDR
// if not nat then
66746: LD_VAR 0 7
66750: NOT
66751: IFFALSE 66755
// continue ;
66753: GO 66720
// for j in list [ nat ] do
66755: LD_ADDR_VAR 0 5
66759: PUSH
66760: LD_VAR 0 10
66764: PUSH
66765: LD_VAR 0 7
66769: ARRAY
66770: PUSH
66771: FOR_IN
66772: IFFALSE 66813
// if GetBWeapon ( i ) = j [ 1 ] then
66774: LD_VAR 0 4
66778: PPUSH
66779: CALL_OW 269
66783: PUSH
66784: LD_VAR 0 5
66788: PUSH
66789: LD_INT 1
66791: ARRAY
66792: EQUAL
66793: IFFALSE 66811
// begin weapon := j [ 2 ] ;
66795: LD_ADDR_VAR 0 8
66799: PUSH
66800: LD_VAR 0 5
66804: PUSH
66805: LD_INT 2
66807: ARRAY
66808: ST_TO_ADDR
// break ;
66809: GO 66813
// end ;
66811: GO 66771
66813: POP
66814: POP
// if not weapon then
66815: LD_VAR 0 8
66819: NOT
66820: IFFALSE 66824
// continue ;
66822: GO 66720
// for k in factories do
66824: LD_ADDR_VAR 0 6
66828: PUSH
66829: LD_VAR 0 2
66833: PUSH
66834: FOR_IN
66835: IFFALSE 66900
// begin weapons := AvailableWeaponList ( k ) ;
66837: LD_ADDR_VAR 0 9
66841: PUSH
66842: LD_VAR 0 6
66846: PPUSH
66847: CALL_OW 478
66851: ST_TO_ADDR
// if not weapons then
66852: LD_VAR 0 9
66856: NOT
66857: IFFALSE 66861
// continue ;
66859: GO 66834
// if weapon in weapons then
66861: LD_VAR 0 8
66865: PUSH
66866: LD_VAR 0 9
66870: IN
66871: IFFALSE 66898
// begin result := [ i , weapon ] ;
66873: LD_ADDR_VAR 0 3
66877: PUSH
66878: LD_VAR 0 4
66882: PUSH
66883: LD_VAR 0 8
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: ST_TO_ADDR
// exit ;
66892: POP
66893: POP
66894: POP
66895: POP
66896: GO 66906
// end ; end ;
66898: GO 66834
66900: POP
66901: POP
// end ;
66902: GO 66720
66904: POP
66905: POP
// end ;
66906: LD_VAR 0 3
66910: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66911: LD_INT 0
66913: PPUSH
// if not side or side > 8 then
66914: LD_VAR 0 3
66918: NOT
66919: PUSH
66920: LD_VAR 0 3
66924: PUSH
66925: LD_INT 8
66927: GREATER
66928: OR
66929: IFFALSE 66933
// exit ;
66931: GO 66992
// if not range then
66933: LD_VAR 0 4
66937: NOT
66938: IFFALSE 66949
// range := - 12 ;
66940: LD_ADDR_VAR 0 4
66944: PUSH
66945: LD_INT 12
66947: NEG
66948: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66949: LD_VAR 0 1
66953: PPUSH
66954: LD_VAR 0 2
66958: PPUSH
66959: LD_VAR 0 3
66963: PPUSH
66964: LD_VAR 0 4
66968: PPUSH
66969: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66973: LD_VAR 0 1
66977: PPUSH
66978: LD_VAR 0 2
66982: PPUSH
66983: LD_VAR 0 3
66987: PPUSH
66988: CALL_OW 331
// end ;
66992: LD_VAR 0 5
66996: RET
// export function Video ( mode ) ; begin
66997: LD_INT 0
66999: PPUSH
// ingame_video = mode ;
67000: LD_ADDR_OWVAR 52
67004: PUSH
67005: LD_VAR 0 1
67009: ST_TO_ADDR
// interface_hidden = mode ;
67010: LD_ADDR_OWVAR 54
67014: PUSH
67015: LD_VAR 0 1
67019: ST_TO_ADDR
// end ;
67020: LD_VAR 0 2
67024: RET
// export function Join ( array , element ) ; begin
67025: LD_INT 0
67027: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67028: LD_ADDR_VAR 0 3
67032: PUSH
67033: LD_VAR 0 1
67037: PPUSH
67038: LD_VAR 0 1
67042: PUSH
67043: LD_INT 1
67045: PLUS
67046: PPUSH
67047: LD_VAR 0 2
67051: PPUSH
67052: CALL_OW 1
67056: ST_TO_ADDR
// end ;
67057: LD_VAR 0 3
67061: RET
// export function JoinUnion ( array , element ) ; begin
67062: LD_INT 0
67064: PPUSH
// result := array union element ;
67065: LD_ADDR_VAR 0 3
67069: PUSH
67070: LD_VAR 0 1
67074: PUSH
67075: LD_VAR 0 2
67079: UNION
67080: ST_TO_ADDR
// end ;
67081: LD_VAR 0 3
67085: RET
// export function GetBehemoths ( side ) ; begin
67086: LD_INT 0
67088: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67089: LD_ADDR_VAR 0 2
67093: PUSH
67094: LD_INT 22
67096: PUSH
67097: LD_VAR 0 1
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: LD_INT 31
67108: PUSH
67109: LD_INT 25
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: PPUSH
67120: CALL_OW 69
67124: ST_TO_ADDR
// end ;
67125: LD_VAR 0 2
67129: RET
// export function Shuffle ( array ) ; var i , index ; begin
67130: LD_INT 0
67132: PPUSH
67133: PPUSH
67134: PPUSH
// result := [ ] ;
67135: LD_ADDR_VAR 0 2
67139: PUSH
67140: EMPTY
67141: ST_TO_ADDR
// if not array then
67142: LD_VAR 0 1
67146: NOT
67147: IFFALSE 67151
// exit ;
67149: GO 67250
// Randomize ;
67151: CALL_OW 10
// for i = array downto 1 do
67155: LD_ADDR_VAR 0 3
67159: PUSH
67160: DOUBLE
67161: LD_VAR 0 1
67165: INC
67166: ST_TO_ADDR
67167: LD_INT 1
67169: PUSH
67170: FOR_DOWNTO
67171: IFFALSE 67248
// begin index := rand ( 1 , array ) ;
67173: LD_ADDR_VAR 0 4
67177: PUSH
67178: LD_INT 1
67180: PPUSH
67181: LD_VAR 0 1
67185: PPUSH
67186: CALL_OW 12
67190: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67191: LD_ADDR_VAR 0 2
67195: PUSH
67196: LD_VAR 0 2
67200: PPUSH
67201: LD_VAR 0 2
67205: PUSH
67206: LD_INT 1
67208: PLUS
67209: PPUSH
67210: LD_VAR 0 1
67214: PUSH
67215: LD_VAR 0 4
67219: ARRAY
67220: PPUSH
67221: CALL_OW 2
67225: ST_TO_ADDR
// array := Delete ( array , index ) ;
67226: LD_ADDR_VAR 0 1
67230: PUSH
67231: LD_VAR 0 1
67235: PPUSH
67236: LD_VAR 0 4
67240: PPUSH
67241: CALL_OW 3
67245: ST_TO_ADDR
// end ;
67246: GO 67170
67248: POP
67249: POP
// end ;
67250: LD_VAR 0 2
67254: RET
// export function GetBaseMaterials ( base ) ; begin
67255: LD_INT 0
67257: PPUSH
// result := [ 0 , 0 , 0 ] ;
67258: LD_ADDR_VAR 0 2
67262: PUSH
67263: LD_INT 0
67265: PUSH
67266: LD_INT 0
67268: PUSH
67269: LD_INT 0
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: LIST
67276: ST_TO_ADDR
// if not base then
67277: LD_VAR 0 1
67281: NOT
67282: IFFALSE 67286
// exit ;
67284: GO 67335
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67286: LD_ADDR_VAR 0 2
67290: PUSH
67291: LD_VAR 0 1
67295: PPUSH
67296: LD_INT 1
67298: PPUSH
67299: CALL_OW 275
67303: PUSH
67304: LD_VAR 0 1
67308: PPUSH
67309: LD_INT 2
67311: PPUSH
67312: CALL_OW 275
67316: PUSH
67317: LD_VAR 0 1
67321: PPUSH
67322: LD_INT 3
67324: PPUSH
67325: CALL_OW 275
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: LIST
67334: ST_TO_ADDR
// end ;
67335: LD_VAR 0 2
67339: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67340: LD_INT 0
67342: PPUSH
67343: PPUSH
// result := array ;
67344: LD_ADDR_VAR 0 3
67348: PUSH
67349: LD_VAR 0 1
67353: ST_TO_ADDR
// if size >= result then
67354: LD_VAR 0 2
67358: PUSH
67359: LD_VAR 0 3
67363: GREATEREQUAL
67364: IFFALSE 67368
// exit ;
67366: GO 67418
// if size then
67368: LD_VAR 0 2
67372: IFFALSE 67418
// for i := array downto size do
67374: LD_ADDR_VAR 0 4
67378: PUSH
67379: DOUBLE
67380: LD_VAR 0 1
67384: INC
67385: ST_TO_ADDR
67386: LD_VAR 0 2
67390: PUSH
67391: FOR_DOWNTO
67392: IFFALSE 67416
// result := Delete ( result , result ) ;
67394: LD_ADDR_VAR 0 3
67398: PUSH
67399: LD_VAR 0 3
67403: PPUSH
67404: LD_VAR 0 3
67408: PPUSH
67409: CALL_OW 3
67413: ST_TO_ADDR
67414: GO 67391
67416: POP
67417: POP
// end ;
67418: LD_VAR 0 3
67422: RET
// export function ComExit ( unit ) ; var tmp ; begin
67423: LD_INT 0
67425: PPUSH
67426: PPUSH
// if not IsInUnit ( unit ) then
67427: LD_VAR 0 1
67431: PPUSH
67432: CALL_OW 310
67436: NOT
67437: IFFALSE 67441
// exit ;
67439: GO 67501
// tmp := IsInUnit ( unit ) ;
67441: LD_ADDR_VAR 0 3
67445: PUSH
67446: LD_VAR 0 1
67450: PPUSH
67451: CALL_OW 310
67455: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67456: LD_VAR 0 3
67460: PPUSH
67461: CALL_OW 247
67465: PUSH
67466: LD_INT 2
67468: EQUAL
67469: IFFALSE 67482
// ComExitVehicle ( unit ) else
67471: LD_VAR 0 1
67475: PPUSH
67476: CALL_OW 121
67480: GO 67491
// ComExitBuilding ( unit ) ;
67482: LD_VAR 0 1
67486: PPUSH
67487: CALL_OW 122
// result := tmp ;
67491: LD_ADDR_VAR 0 2
67495: PUSH
67496: LD_VAR 0 3
67500: ST_TO_ADDR
// end ;
67501: LD_VAR 0 2
67505: RET
// export function ComExitAll ( units ) ; var i ; begin
67506: LD_INT 0
67508: PPUSH
67509: PPUSH
// if not units then
67510: LD_VAR 0 1
67514: NOT
67515: IFFALSE 67519
// exit ;
67517: GO 67545
// for i in units do
67519: LD_ADDR_VAR 0 3
67523: PUSH
67524: LD_VAR 0 1
67528: PUSH
67529: FOR_IN
67530: IFFALSE 67543
// ComExit ( i ) ;
67532: LD_VAR 0 3
67536: PPUSH
67537: CALL 67423 0 1
67541: GO 67529
67543: POP
67544: POP
// end ;
67545: LD_VAR 0 2
67549: RET
// export function ResetHc ; begin
67550: LD_INT 0
67552: PPUSH
// InitHc ;
67553: CALL_OW 19
// hc_importance := 0 ;
67557: LD_ADDR_OWVAR 32
67561: PUSH
67562: LD_INT 0
67564: ST_TO_ADDR
// end ;
67565: LD_VAR 0 1
67569: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67570: LD_INT 0
67572: PPUSH
67573: PPUSH
67574: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67575: LD_ADDR_VAR 0 6
67579: PUSH
67580: LD_VAR 0 1
67584: PUSH
67585: LD_VAR 0 3
67589: PLUS
67590: PUSH
67591: LD_INT 2
67593: DIV
67594: ST_TO_ADDR
// if _x < 0 then
67595: LD_VAR 0 6
67599: PUSH
67600: LD_INT 0
67602: LESS
67603: IFFALSE 67620
// _x := _x * - 1 ;
67605: LD_ADDR_VAR 0 6
67609: PUSH
67610: LD_VAR 0 6
67614: PUSH
67615: LD_INT 1
67617: NEG
67618: MUL
67619: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67620: LD_ADDR_VAR 0 7
67624: PUSH
67625: LD_VAR 0 2
67629: PUSH
67630: LD_VAR 0 4
67634: PLUS
67635: PUSH
67636: LD_INT 2
67638: DIV
67639: ST_TO_ADDR
// if _y < 0 then
67640: LD_VAR 0 7
67644: PUSH
67645: LD_INT 0
67647: LESS
67648: IFFALSE 67665
// _y := _y * - 1 ;
67650: LD_ADDR_VAR 0 7
67654: PUSH
67655: LD_VAR 0 7
67659: PUSH
67660: LD_INT 1
67662: NEG
67663: MUL
67664: ST_TO_ADDR
// result := [ _x , _y ] ;
67665: LD_ADDR_VAR 0 5
67669: PUSH
67670: LD_VAR 0 6
67674: PUSH
67675: LD_VAR 0 7
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: ST_TO_ADDR
// end ;
67684: LD_VAR 0 5
67688: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67689: LD_INT 0
67691: PPUSH
67692: PPUSH
67693: PPUSH
67694: PPUSH
// task := GetTaskList ( unit ) ;
67695: LD_ADDR_VAR 0 7
67699: PUSH
67700: LD_VAR 0 1
67704: PPUSH
67705: CALL_OW 437
67709: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67710: LD_VAR 0 7
67714: NOT
67715: PUSH
67716: LD_VAR 0 1
67720: PPUSH
67721: LD_VAR 0 2
67725: PPUSH
67726: CALL_OW 308
67730: NOT
67731: AND
67732: IFFALSE 67736
// exit ;
67734: GO 67854
// if IsInArea ( unit , area ) then
67736: LD_VAR 0 1
67740: PPUSH
67741: LD_VAR 0 2
67745: PPUSH
67746: CALL_OW 308
67750: IFFALSE 67768
// begin ComMoveToArea ( unit , goAway ) ;
67752: LD_VAR 0 1
67756: PPUSH
67757: LD_VAR 0 3
67761: PPUSH
67762: CALL_OW 113
// exit ;
67766: GO 67854
// end ; if task [ 1 ] [ 1 ] <> M then
67768: LD_VAR 0 7
67772: PUSH
67773: LD_INT 1
67775: ARRAY
67776: PUSH
67777: LD_INT 1
67779: ARRAY
67780: PUSH
67781: LD_STRING M
67783: NONEQUAL
67784: IFFALSE 67788
// exit ;
67786: GO 67854
// x := task [ 1 ] [ 2 ] ;
67788: LD_ADDR_VAR 0 5
67792: PUSH
67793: LD_VAR 0 7
67797: PUSH
67798: LD_INT 1
67800: ARRAY
67801: PUSH
67802: LD_INT 2
67804: ARRAY
67805: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67806: LD_ADDR_VAR 0 6
67810: PUSH
67811: LD_VAR 0 7
67815: PUSH
67816: LD_INT 1
67818: ARRAY
67819: PUSH
67820: LD_INT 3
67822: ARRAY
67823: ST_TO_ADDR
// if InArea ( x , y , area ) then
67824: LD_VAR 0 5
67828: PPUSH
67829: LD_VAR 0 6
67833: PPUSH
67834: LD_VAR 0 2
67838: PPUSH
67839: CALL_OW 309
67843: IFFALSE 67854
// ComStop ( unit ) ;
67845: LD_VAR 0 1
67849: PPUSH
67850: CALL_OW 141
// end ;
67854: LD_VAR 0 4
67858: RET
// export function Abs ( value ) ; begin
67859: LD_INT 0
67861: PPUSH
// result := value ;
67862: LD_ADDR_VAR 0 2
67866: PUSH
67867: LD_VAR 0 1
67871: ST_TO_ADDR
// if value < 0 then
67872: LD_VAR 0 1
67876: PUSH
67877: LD_INT 0
67879: LESS
67880: IFFALSE 67897
// result := value * - 1 ;
67882: LD_ADDR_VAR 0 2
67886: PUSH
67887: LD_VAR 0 1
67891: PUSH
67892: LD_INT 1
67894: NEG
67895: MUL
67896: ST_TO_ADDR
// end ;
67897: LD_VAR 0 2
67901: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67902: LD_INT 0
67904: PPUSH
67905: PPUSH
67906: PPUSH
67907: PPUSH
67908: PPUSH
67909: PPUSH
67910: PPUSH
67911: PPUSH
// if not unit or not building then
67912: LD_VAR 0 1
67916: NOT
67917: PUSH
67918: LD_VAR 0 2
67922: NOT
67923: OR
67924: IFFALSE 67928
// exit ;
67926: GO 68154
// x := GetX ( building ) ;
67928: LD_ADDR_VAR 0 4
67932: PUSH
67933: LD_VAR 0 2
67937: PPUSH
67938: CALL_OW 250
67942: ST_TO_ADDR
// y := GetY ( building ) ;
67943: LD_ADDR_VAR 0 6
67947: PUSH
67948: LD_VAR 0 2
67952: PPUSH
67953: CALL_OW 251
67957: ST_TO_ADDR
// d := GetDir ( building ) ;
67958: LD_ADDR_VAR 0 8
67962: PUSH
67963: LD_VAR 0 2
67967: PPUSH
67968: CALL_OW 254
67972: ST_TO_ADDR
// r := 4 ;
67973: LD_ADDR_VAR 0 9
67977: PUSH
67978: LD_INT 4
67980: ST_TO_ADDR
// for i := 1 to 5 do
67981: LD_ADDR_VAR 0 10
67985: PUSH
67986: DOUBLE
67987: LD_INT 1
67989: DEC
67990: ST_TO_ADDR
67991: LD_INT 5
67993: PUSH
67994: FOR_TO
67995: IFFALSE 68152
// begin _x := ShiftX ( x , d , r + i ) ;
67997: LD_ADDR_VAR 0 5
68001: PUSH
68002: LD_VAR 0 4
68006: PPUSH
68007: LD_VAR 0 8
68011: PPUSH
68012: LD_VAR 0 9
68016: PUSH
68017: LD_VAR 0 10
68021: PLUS
68022: PPUSH
68023: CALL_OW 272
68027: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68028: LD_ADDR_VAR 0 7
68032: PUSH
68033: LD_VAR 0 6
68037: PPUSH
68038: LD_VAR 0 8
68042: PPUSH
68043: LD_VAR 0 9
68047: PUSH
68048: LD_VAR 0 10
68052: PLUS
68053: PPUSH
68054: CALL_OW 273
68058: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68059: LD_VAR 0 5
68063: PPUSH
68064: LD_VAR 0 7
68068: PPUSH
68069: CALL_OW 488
68073: PUSH
68074: LD_VAR 0 5
68078: PPUSH
68079: LD_VAR 0 7
68083: PPUSH
68084: CALL_OW 428
68088: PPUSH
68089: CALL_OW 247
68093: PUSH
68094: LD_INT 3
68096: PUSH
68097: LD_INT 2
68099: PUSH
68100: EMPTY
68101: LIST
68102: LIST
68103: IN
68104: NOT
68105: AND
68106: IFFALSE 68150
// begin ComMoveXY ( unit , _x , _y ) ;
68108: LD_VAR 0 1
68112: PPUSH
68113: LD_VAR 0 5
68117: PPUSH
68118: LD_VAR 0 7
68122: PPUSH
68123: CALL_OW 111
// result := [ _x , _y ] ;
68127: LD_ADDR_VAR 0 3
68131: PUSH
68132: LD_VAR 0 5
68136: PUSH
68137: LD_VAR 0 7
68141: PUSH
68142: EMPTY
68143: LIST
68144: LIST
68145: ST_TO_ADDR
// exit ;
68146: POP
68147: POP
68148: GO 68154
// end ; end ;
68150: GO 67994
68152: POP
68153: POP
// end ;
68154: LD_VAR 0 3
68158: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68159: LD_INT 0
68161: PPUSH
68162: PPUSH
68163: PPUSH
// result := 0 ;
68164: LD_ADDR_VAR 0 3
68168: PUSH
68169: LD_INT 0
68171: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68172: LD_VAR 0 1
68176: PUSH
68177: LD_INT 0
68179: LESS
68180: PUSH
68181: LD_VAR 0 1
68185: PUSH
68186: LD_INT 8
68188: GREATER
68189: OR
68190: PUSH
68191: LD_VAR 0 2
68195: PUSH
68196: LD_INT 0
68198: LESS
68199: OR
68200: PUSH
68201: LD_VAR 0 2
68205: PUSH
68206: LD_INT 8
68208: GREATER
68209: OR
68210: IFFALSE 68214
// exit ;
68212: GO 68289
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68214: LD_ADDR_VAR 0 4
68218: PUSH
68219: LD_INT 22
68221: PUSH
68222: LD_VAR 0 2
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PPUSH
68231: CALL_OW 69
68235: PUSH
68236: FOR_IN
68237: IFFALSE 68287
// begin un := UnitShoot ( i ) ;
68239: LD_ADDR_VAR 0 5
68243: PUSH
68244: LD_VAR 0 4
68248: PPUSH
68249: CALL_OW 504
68253: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68254: LD_VAR 0 5
68258: PPUSH
68259: CALL_OW 255
68263: PUSH
68264: LD_VAR 0 1
68268: EQUAL
68269: IFFALSE 68285
// begin result := un ;
68271: LD_ADDR_VAR 0 3
68275: PUSH
68276: LD_VAR 0 5
68280: ST_TO_ADDR
// exit ;
68281: POP
68282: POP
68283: GO 68289
// end ; end ;
68285: GO 68236
68287: POP
68288: POP
// end ;
68289: LD_VAR 0 3
68293: RET
// export function GetCargoBay ( units ) ; begin
68294: LD_INT 0
68296: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68297: LD_ADDR_VAR 0 2
68301: PUSH
68302: LD_VAR 0 1
68306: PPUSH
68307: LD_INT 2
68309: PUSH
68310: LD_INT 34
68312: PUSH
68313: LD_INT 12
68315: PUSH
68316: EMPTY
68317: LIST
68318: LIST
68319: PUSH
68320: LD_INT 34
68322: PUSH
68323: LD_INT 51
68325: PUSH
68326: EMPTY
68327: LIST
68328: LIST
68329: PUSH
68330: LD_INT 34
68332: PUSH
68333: LD_INT 32
68335: PUSH
68336: EMPTY
68337: LIST
68338: LIST
68339: PUSH
68340: LD_INT 34
68342: PUSH
68343: LD_INT 89
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: PUSH
68350: EMPTY
68351: LIST
68352: LIST
68353: LIST
68354: LIST
68355: LIST
68356: PPUSH
68357: CALL_OW 72
68361: ST_TO_ADDR
// end ;
68362: LD_VAR 0 2
68366: RET
// export function Negate ( value ) ; begin
68367: LD_INT 0
68369: PPUSH
// result := not value ;
68370: LD_ADDR_VAR 0 2
68374: PUSH
68375: LD_VAR 0 1
68379: NOT
68380: ST_TO_ADDR
// end ;
68381: LD_VAR 0 2
68385: RET
// export function Inc ( value ) ; begin
68386: LD_INT 0
68388: PPUSH
// result := value + 1 ;
68389: LD_ADDR_VAR 0 2
68393: PUSH
68394: LD_VAR 0 1
68398: PUSH
68399: LD_INT 1
68401: PLUS
68402: ST_TO_ADDR
// end ;
68403: LD_VAR 0 2
68407: RET
// export function Dec ( value ) ; begin
68408: LD_INT 0
68410: PPUSH
// result := value - 1 ;
68411: LD_ADDR_VAR 0 2
68415: PUSH
68416: LD_VAR 0 1
68420: PUSH
68421: LD_INT 1
68423: MINUS
68424: ST_TO_ADDR
// end ;
68425: LD_VAR 0 2
68429: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68430: LD_INT 0
68432: PPUSH
68433: PPUSH
68434: PPUSH
68435: PPUSH
68436: PPUSH
68437: PPUSH
68438: PPUSH
68439: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68440: LD_VAR 0 1
68444: PPUSH
68445: LD_VAR 0 2
68449: PPUSH
68450: CALL_OW 488
68454: NOT
68455: PUSH
68456: LD_VAR 0 3
68460: PPUSH
68461: LD_VAR 0 4
68465: PPUSH
68466: CALL_OW 488
68470: NOT
68471: OR
68472: IFFALSE 68485
// begin result := - 1 ;
68474: LD_ADDR_VAR 0 5
68478: PUSH
68479: LD_INT 1
68481: NEG
68482: ST_TO_ADDR
// exit ;
68483: GO 68720
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68485: LD_ADDR_VAR 0 12
68489: PUSH
68490: LD_VAR 0 1
68494: PPUSH
68495: LD_VAR 0 2
68499: PPUSH
68500: LD_VAR 0 3
68504: PPUSH
68505: LD_VAR 0 4
68509: PPUSH
68510: CALL 67570 0 4
68514: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68515: LD_ADDR_VAR 0 11
68519: PUSH
68520: LD_VAR 0 1
68524: PPUSH
68525: LD_VAR 0 2
68529: PPUSH
68530: LD_VAR 0 12
68534: PUSH
68535: LD_INT 1
68537: ARRAY
68538: PPUSH
68539: LD_VAR 0 12
68543: PUSH
68544: LD_INT 2
68546: ARRAY
68547: PPUSH
68548: CALL_OW 298
68552: ST_TO_ADDR
// distance := 9999 ;
68553: LD_ADDR_VAR 0 10
68557: PUSH
68558: LD_INT 9999
68560: ST_TO_ADDR
// for i := 0 to 5 do
68561: LD_ADDR_VAR 0 6
68565: PUSH
68566: DOUBLE
68567: LD_INT 0
68569: DEC
68570: ST_TO_ADDR
68571: LD_INT 5
68573: PUSH
68574: FOR_TO
68575: IFFALSE 68718
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68577: LD_ADDR_VAR 0 7
68581: PUSH
68582: LD_VAR 0 1
68586: PPUSH
68587: LD_VAR 0 6
68591: PPUSH
68592: LD_VAR 0 11
68596: PPUSH
68597: CALL_OW 272
68601: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68602: LD_ADDR_VAR 0 8
68606: PUSH
68607: LD_VAR 0 2
68611: PPUSH
68612: LD_VAR 0 6
68616: PPUSH
68617: LD_VAR 0 11
68621: PPUSH
68622: CALL_OW 273
68626: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68627: LD_VAR 0 7
68631: PPUSH
68632: LD_VAR 0 8
68636: PPUSH
68637: CALL_OW 488
68641: NOT
68642: IFFALSE 68646
// continue ;
68644: GO 68574
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68646: LD_ADDR_VAR 0 9
68650: PUSH
68651: LD_VAR 0 12
68655: PUSH
68656: LD_INT 1
68658: ARRAY
68659: PPUSH
68660: LD_VAR 0 12
68664: PUSH
68665: LD_INT 2
68667: ARRAY
68668: PPUSH
68669: LD_VAR 0 7
68673: PPUSH
68674: LD_VAR 0 8
68678: PPUSH
68679: CALL_OW 298
68683: ST_TO_ADDR
// if tmp < distance then
68684: LD_VAR 0 9
68688: PUSH
68689: LD_VAR 0 10
68693: LESS
68694: IFFALSE 68716
// begin result := i ;
68696: LD_ADDR_VAR 0 5
68700: PUSH
68701: LD_VAR 0 6
68705: ST_TO_ADDR
// distance := tmp ;
68706: LD_ADDR_VAR 0 10
68710: PUSH
68711: LD_VAR 0 9
68715: ST_TO_ADDR
// end ; end ;
68716: GO 68574
68718: POP
68719: POP
// end ;
68720: LD_VAR 0 5
68724: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68725: LD_INT 0
68727: PPUSH
68728: PPUSH
// if not driver or not IsInUnit ( driver ) then
68729: LD_VAR 0 1
68733: NOT
68734: PUSH
68735: LD_VAR 0 1
68739: PPUSH
68740: CALL_OW 310
68744: NOT
68745: OR
68746: IFFALSE 68750
// exit ;
68748: GO 68840
// vehicle := IsInUnit ( driver ) ;
68750: LD_ADDR_VAR 0 3
68754: PUSH
68755: LD_VAR 0 1
68759: PPUSH
68760: CALL_OW 310
68764: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68765: LD_VAR 0 1
68769: PPUSH
68770: LD_STRING \
68772: PUSH
68773: LD_INT 0
68775: PUSH
68776: LD_INT 0
68778: PUSH
68779: LD_INT 0
68781: PUSH
68782: LD_INT 0
68784: PUSH
68785: LD_INT 0
68787: PUSH
68788: LD_INT 0
68790: PUSH
68791: EMPTY
68792: LIST
68793: LIST
68794: LIST
68795: LIST
68796: LIST
68797: LIST
68798: LIST
68799: PUSH
68800: LD_STRING E
68802: PUSH
68803: LD_INT 0
68805: PUSH
68806: LD_INT 0
68808: PUSH
68809: LD_VAR 0 3
68813: PUSH
68814: LD_INT 0
68816: PUSH
68817: LD_INT 0
68819: PUSH
68820: LD_INT 0
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: LIST
68827: LIST
68828: LIST
68829: LIST
68830: LIST
68831: PUSH
68832: EMPTY
68833: LIST
68834: LIST
68835: PPUSH
68836: CALL_OW 446
// end ;
68840: LD_VAR 0 2
68844: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68845: LD_INT 0
68847: PPUSH
68848: PPUSH
// if not driver or not IsInUnit ( driver ) then
68849: LD_VAR 0 1
68853: NOT
68854: PUSH
68855: LD_VAR 0 1
68859: PPUSH
68860: CALL_OW 310
68864: NOT
68865: OR
68866: IFFALSE 68870
// exit ;
68868: GO 68960
// vehicle := IsInUnit ( driver ) ;
68870: LD_ADDR_VAR 0 3
68874: PUSH
68875: LD_VAR 0 1
68879: PPUSH
68880: CALL_OW 310
68884: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68885: LD_VAR 0 1
68889: PPUSH
68890: LD_STRING \
68892: PUSH
68893: LD_INT 0
68895: PUSH
68896: LD_INT 0
68898: PUSH
68899: LD_INT 0
68901: PUSH
68902: LD_INT 0
68904: PUSH
68905: LD_INT 0
68907: PUSH
68908: LD_INT 0
68910: PUSH
68911: EMPTY
68912: LIST
68913: LIST
68914: LIST
68915: LIST
68916: LIST
68917: LIST
68918: LIST
68919: PUSH
68920: LD_STRING E
68922: PUSH
68923: LD_INT 0
68925: PUSH
68926: LD_INT 0
68928: PUSH
68929: LD_VAR 0 3
68933: PUSH
68934: LD_INT 0
68936: PUSH
68937: LD_INT 0
68939: PUSH
68940: LD_INT 0
68942: PUSH
68943: EMPTY
68944: LIST
68945: LIST
68946: LIST
68947: LIST
68948: LIST
68949: LIST
68950: LIST
68951: PUSH
68952: EMPTY
68953: LIST
68954: LIST
68955: PPUSH
68956: CALL_OW 447
// end ;
68960: LD_VAR 0 2
68964: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68965: LD_INT 0
68967: PPUSH
68968: PPUSH
68969: PPUSH
// tmp := [ ] ;
68970: LD_ADDR_VAR 0 5
68974: PUSH
68975: EMPTY
68976: ST_TO_ADDR
// for i in units do
68977: LD_ADDR_VAR 0 4
68981: PUSH
68982: LD_VAR 0 1
68986: PUSH
68987: FOR_IN
68988: IFFALSE 69026
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68990: LD_ADDR_VAR 0 5
68994: PUSH
68995: LD_VAR 0 5
68999: PPUSH
69000: LD_VAR 0 5
69004: PUSH
69005: LD_INT 1
69007: PLUS
69008: PPUSH
69009: LD_VAR 0 4
69013: PPUSH
69014: CALL_OW 256
69018: PPUSH
69019: CALL_OW 2
69023: ST_TO_ADDR
69024: GO 68987
69026: POP
69027: POP
// if not tmp then
69028: LD_VAR 0 5
69032: NOT
69033: IFFALSE 69037
// exit ;
69035: GO 69085
// if asc then
69037: LD_VAR 0 2
69041: IFFALSE 69065
// result := SortListByListAsc ( units , tmp ) else
69043: LD_ADDR_VAR 0 3
69047: PUSH
69048: LD_VAR 0 1
69052: PPUSH
69053: LD_VAR 0 5
69057: PPUSH
69058: CALL_OW 76
69062: ST_TO_ADDR
69063: GO 69085
// result := SortListByListDesc ( units , tmp ) ;
69065: LD_ADDR_VAR 0 3
69069: PUSH
69070: LD_VAR 0 1
69074: PPUSH
69075: LD_VAR 0 5
69079: PPUSH
69080: CALL_OW 77
69084: ST_TO_ADDR
// end ;
69085: LD_VAR 0 3
69089: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69090: LD_INT 0
69092: PPUSH
69093: PPUSH
// task := GetTaskList ( mech ) ;
69094: LD_ADDR_VAR 0 4
69098: PUSH
69099: LD_VAR 0 1
69103: PPUSH
69104: CALL_OW 437
69108: ST_TO_ADDR
// if not task then
69109: LD_VAR 0 4
69113: NOT
69114: IFFALSE 69118
// exit ;
69116: GO 69160
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69118: LD_ADDR_VAR 0 3
69122: PUSH
69123: LD_VAR 0 4
69127: PUSH
69128: LD_INT 1
69130: ARRAY
69131: PUSH
69132: LD_INT 1
69134: ARRAY
69135: PUSH
69136: LD_STRING r
69138: EQUAL
69139: PUSH
69140: LD_VAR 0 4
69144: PUSH
69145: LD_INT 1
69147: ARRAY
69148: PUSH
69149: LD_INT 4
69151: ARRAY
69152: PUSH
69153: LD_VAR 0 2
69157: EQUAL
69158: AND
69159: ST_TO_ADDR
// end ;
69160: LD_VAR 0 3
69164: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69165: LD_INT 0
69167: PPUSH
// SetDir ( unit , d ) ;
69168: LD_VAR 0 1
69172: PPUSH
69173: LD_VAR 0 4
69177: PPUSH
69178: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69182: LD_VAR 0 1
69186: PPUSH
69187: LD_VAR 0 2
69191: PPUSH
69192: LD_VAR 0 3
69196: PPUSH
69197: LD_VAR 0 5
69201: PPUSH
69202: CALL_OW 48
// end ;
69206: LD_VAR 0 6
69210: RET
// export function ToNaturalNumber ( number ) ; begin
69211: LD_INT 0
69213: PPUSH
// result := number div 1 ;
69214: LD_ADDR_VAR 0 2
69218: PUSH
69219: LD_VAR 0 1
69223: PUSH
69224: LD_INT 1
69226: DIV
69227: ST_TO_ADDR
// if number < 0 then
69228: LD_VAR 0 1
69232: PUSH
69233: LD_INT 0
69235: LESS
69236: IFFALSE 69246
// result := 0 ;
69238: LD_ADDR_VAR 0 2
69242: PUSH
69243: LD_INT 0
69245: ST_TO_ADDR
// end ;
69246: LD_VAR 0 2
69250: RET
// export function SortByClass ( units , class ) ; var un ; begin
69251: LD_INT 0
69253: PPUSH
69254: PPUSH
// if not units or not class then
69255: LD_VAR 0 1
69259: NOT
69260: PUSH
69261: LD_VAR 0 2
69265: NOT
69266: OR
69267: IFFALSE 69271
// exit ;
69269: GO 69366
// result := [ ] ;
69271: LD_ADDR_VAR 0 3
69275: PUSH
69276: EMPTY
69277: ST_TO_ADDR
// for un in units do
69278: LD_ADDR_VAR 0 4
69282: PUSH
69283: LD_VAR 0 1
69287: PUSH
69288: FOR_IN
69289: IFFALSE 69364
// if GetClass ( un ) = class then
69291: LD_VAR 0 4
69295: PPUSH
69296: CALL_OW 257
69300: PUSH
69301: LD_VAR 0 2
69305: EQUAL
69306: IFFALSE 69333
// result := Insert ( result , 1 , un ) else
69308: LD_ADDR_VAR 0 3
69312: PUSH
69313: LD_VAR 0 3
69317: PPUSH
69318: LD_INT 1
69320: PPUSH
69321: LD_VAR 0 4
69325: PPUSH
69326: CALL_OW 2
69330: ST_TO_ADDR
69331: GO 69362
// result := Replace ( result , result + 1 , un ) ;
69333: LD_ADDR_VAR 0 3
69337: PUSH
69338: LD_VAR 0 3
69342: PPUSH
69343: LD_VAR 0 3
69347: PUSH
69348: LD_INT 1
69350: PLUS
69351: PPUSH
69352: LD_VAR 0 4
69356: PPUSH
69357: CALL_OW 1
69361: ST_TO_ADDR
69362: GO 69288
69364: POP
69365: POP
// end ;
69366: LD_VAR 0 3
69370: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69371: LD_INT 0
69373: PPUSH
69374: PPUSH
69375: PPUSH
69376: PPUSH
69377: PPUSH
69378: PPUSH
69379: PPUSH
// result := [ ] ;
69380: LD_ADDR_VAR 0 4
69384: PUSH
69385: EMPTY
69386: ST_TO_ADDR
// if x - r < 0 then
69387: LD_VAR 0 1
69391: PUSH
69392: LD_VAR 0 3
69396: MINUS
69397: PUSH
69398: LD_INT 0
69400: LESS
69401: IFFALSE 69413
// min_x := 0 else
69403: LD_ADDR_VAR 0 8
69407: PUSH
69408: LD_INT 0
69410: ST_TO_ADDR
69411: GO 69429
// min_x := x - r ;
69413: LD_ADDR_VAR 0 8
69417: PUSH
69418: LD_VAR 0 1
69422: PUSH
69423: LD_VAR 0 3
69427: MINUS
69428: ST_TO_ADDR
// if y - r < 0 then
69429: LD_VAR 0 2
69433: PUSH
69434: LD_VAR 0 3
69438: MINUS
69439: PUSH
69440: LD_INT 0
69442: LESS
69443: IFFALSE 69455
// min_y := 0 else
69445: LD_ADDR_VAR 0 7
69449: PUSH
69450: LD_INT 0
69452: ST_TO_ADDR
69453: GO 69471
// min_y := y - r ;
69455: LD_ADDR_VAR 0 7
69459: PUSH
69460: LD_VAR 0 2
69464: PUSH
69465: LD_VAR 0 3
69469: MINUS
69470: ST_TO_ADDR
// max_x := x + r ;
69471: LD_ADDR_VAR 0 9
69475: PUSH
69476: LD_VAR 0 1
69480: PUSH
69481: LD_VAR 0 3
69485: PLUS
69486: ST_TO_ADDR
// max_y := y + r ;
69487: LD_ADDR_VAR 0 10
69491: PUSH
69492: LD_VAR 0 2
69496: PUSH
69497: LD_VAR 0 3
69501: PLUS
69502: ST_TO_ADDR
// for _x = min_x to max_x do
69503: LD_ADDR_VAR 0 5
69507: PUSH
69508: DOUBLE
69509: LD_VAR 0 8
69513: DEC
69514: ST_TO_ADDR
69515: LD_VAR 0 9
69519: PUSH
69520: FOR_TO
69521: IFFALSE 69622
// for _y = min_y to max_y do
69523: LD_ADDR_VAR 0 6
69527: PUSH
69528: DOUBLE
69529: LD_VAR 0 7
69533: DEC
69534: ST_TO_ADDR
69535: LD_VAR 0 10
69539: PUSH
69540: FOR_TO
69541: IFFALSE 69618
// begin if not ValidHex ( _x , _y ) then
69543: LD_VAR 0 5
69547: PPUSH
69548: LD_VAR 0 6
69552: PPUSH
69553: CALL_OW 488
69557: NOT
69558: IFFALSE 69562
// continue ;
69560: GO 69540
// if GetResourceTypeXY ( _x , _y ) then
69562: LD_VAR 0 5
69566: PPUSH
69567: LD_VAR 0 6
69571: PPUSH
69572: CALL_OW 283
69576: IFFALSE 69616
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69578: LD_ADDR_VAR 0 4
69582: PUSH
69583: LD_VAR 0 4
69587: PPUSH
69588: LD_VAR 0 4
69592: PUSH
69593: LD_INT 1
69595: PLUS
69596: PPUSH
69597: LD_VAR 0 5
69601: PUSH
69602: LD_VAR 0 6
69606: PUSH
69607: EMPTY
69608: LIST
69609: LIST
69610: PPUSH
69611: CALL_OW 1
69615: ST_TO_ADDR
// end ;
69616: GO 69540
69618: POP
69619: POP
69620: GO 69520
69622: POP
69623: POP
// end ;
69624: LD_VAR 0 4
69628: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69629: LD_INT 0
69631: PPUSH
69632: PPUSH
69633: PPUSH
69634: PPUSH
69635: PPUSH
69636: PPUSH
69637: PPUSH
69638: PPUSH
// if not units then
69639: LD_VAR 0 1
69643: NOT
69644: IFFALSE 69648
// exit ;
69646: GO 70172
// result := UnitFilter ( units , [ f_ok ] ) ;
69648: LD_ADDR_VAR 0 3
69652: PUSH
69653: LD_VAR 0 1
69657: PPUSH
69658: LD_INT 50
69660: PUSH
69661: EMPTY
69662: LIST
69663: PPUSH
69664: CALL_OW 72
69668: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69669: LD_ADDR_VAR 0 8
69673: PUSH
69674: LD_VAR 0 1
69678: PUSH
69679: LD_INT 1
69681: ARRAY
69682: PPUSH
69683: CALL_OW 255
69687: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69688: LD_ADDR_VAR 0 10
69692: PUSH
69693: LD_INT 29
69695: PUSH
69696: LD_INT 91
69698: PUSH
69699: LD_INT 49
69701: PUSH
69702: EMPTY
69703: LIST
69704: LIST
69705: LIST
69706: ST_TO_ADDR
// if not result then
69707: LD_VAR 0 3
69711: NOT
69712: IFFALSE 69716
// exit ;
69714: GO 70172
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69716: LD_ADDR_VAR 0 5
69720: PUSH
69721: LD_INT 81
69723: PUSH
69724: LD_VAR 0 8
69728: PUSH
69729: EMPTY
69730: LIST
69731: LIST
69732: PPUSH
69733: CALL_OW 69
69737: ST_TO_ADDR
// for i in result do
69738: LD_ADDR_VAR 0 4
69742: PUSH
69743: LD_VAR 0 3
69747: PUSH
69748: FOR_IN
69749: IFFALSE 70170
// begin tag := GetTag ( i ) + 1 ;
69751: LD_ADDR_VAR 0 9
69755: PUSH
69756: LD_VAR 0 4
69760: PPUSH
69761: CALL_OW 110
69765: PUSH
69766: LD_INT 1
69768: PLUS
69769: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69770: LD_ADDR_VAR 0 7
69774: PUSH
69775: LD_VAR 0 4
69779: PPUSH
69780: CALL_OW 250
69784: PPUSH
69785: LD_VAR 0 4
69789: PPUSH
69790: CALL_OW 251
69794: PPUSH
69795: LD_INT 6
69797: PPUSH
69798: CALL 69371 0 3
69802: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69803: LD_VAR 0 4
69807: PPUSH
69808: CALL_OW 247
69812: PUSH
69813: LD_INT 2
69815: EQUAL
69816: PUSH
69817: LD_VAR 0 7
69821: AND
69822: PUSH
69823: LD_VAR 0 4
69827: PPUSH
69828: CALL_OW 264
69832: PUSH
69833: LD_VAR 0 10
69837: IN
69838: NOT
69839: AND
69840: IFFALSE 69879
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69842: LD_VAR 0 4
69846: PPUSH
69847: LD_VAR 0 7
69851: PUSH
69852: LD_INT 1
69854: ARRAY
69855: PUSH
69856: LD_INT 1
69858: ARRAY
69859: PPUSH
69860: LD_VAR 0 7
69864: PUSH
69865: LD_INT 1
69867: ARRAY
69868: PUSH
69869: LD_INT 2
69871: ARRAY
69872: PPUSH
69873: CALL_OW 116
69877: GO 70168
// if path > tag then
69879: LD_VAR 0 2
69883: PUSH
69884: LD_VAR 0 9
69888: GREATER
69889: IFFALSE 70097
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
69891: LD_ADDR_VAR 0 6
69895: PUSH
69896: LD_VAR 0 5
69900: PPUSH
69901: LD_INT 91
69903: PUSH
69904: LD_VAR 0 4
69908: PUSH
69909: LD_INT 8
69911: PUSH
69912: EMPTY
69913: LIST
69914: LIST
69915: LIST
69916: PPUSH
69917: CALL_OW 72
69921: ST_TO_ADDR
// if nearEnemy then
69922: LD_VAR 0 6
69926: IFFALSE 69995
// begin if GetWeapon ( i ) = ru_time_lapser then
69928: LD_VAR 0 4
69932: PPUSH
69933: CALL_OW 264
69937: PUSH
69938: LD_INT 49
69940: EQUAL
69941: IFFALSE 69969
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69943: LD_VAR 0 4
69947: PPUSH
69948: LD_VAR 0 6
69952: PPUSH
69953: LD_VAR 0 4
69957: PPUSH
69958: CALL_OW 74
69962: PPUSH
69963: CALL_OW 112
69967: GO 69993
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69969: LD_VAR 0 4
69973: PPUSH
69974: LD_VAR 0 6
69978: PPUSH
69979: LD_VAR 0 4
69983: PPUSH
69984: CALL_OW 74
69988: PPUSH
69989: CALL_OW 115
// end else
69993: GO 70095
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69995: LD_VAR 0 4
69999: PPUSH
70000: LD_VAR 0 2
70004: PUSH
70005: LD_VAR 0 9
70009: ARRAY
70010: PUSH
70011: LD_INT 1
70013: ARRAY
70014: PPUSH
70015: LD_VAR 0 2
70019: PUSH
70020: LD_VAR 0 9
70024: ARRAY
70025: PUSH
70026: LD_INT 2
70028: ARRAY
70029: PPUSH
70030: CALL_OW 297
70034: PUSH
70035: LD_INT 6
70037: GREATER
70038: IFFALSE 70081
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70040: LD_VAR 0 4
70044: PPUSH
70045: LD_VAR 0 2
70049: PUSH
70050: LD_VAR 0 9
70054: ARRAY
70055: PUSH
70056: LD_INT 1
70058: ARRAY
70059: PPUSH
70060: LD_VAR 0 2
70064: PUSH
70065: LD_VAR 0 9
70069: ARRAY
70070: PUSH
70071: LD_INT 2
70073: ARRAY
70074: PPUSH
70075: CALL_OW 114
70079: GO 70095
// SetTag ( i , tag ) ;
70081: LD_VAR 0 4
70085: PPUSH
70086: LD_VAR 0 9
70090: PPUSH
70091: CALL_OW 109
// end else
70095: GO 70168
// if enemy then
70097: LD_VAR 0 5
70101: IFFALSE 70168
// begin if GetWeapon ( i ) = ru_time_lapser then
70103: LD_VAR 0 4
70107: PPUSH
70108: CALL_OW 264
70112: PUSH
70113: LD_INT 49
70115: EQUAL
70116: IFFALSE 70144
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70118: LD_VAR 0 4
70122: PPUSH
70123: LD_VAR 0 5
70127: PPUSH
70128: LD_VAR 0 4
70132: PPUSH
70133: CALL_OW 74
70137: PPUSH
70138: CALL_OW 112
70142: GO 70168
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70144: LD_VAR 0 4
70148: PPUSH
70149: LD_VAR 0 5
70153: PPUSH
70154: LD_VAR 0 4
70158: PPUSH
70159: CALL_OW 74
70163: PPUSH
70164: CALL_OW 115
// end ; end ;
70168: GO 69748
70170: POP
70171: POP
// end ;
70172: LD_VAR 0 3
70176: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70177: LD_INT 0
70179: PPUSH
70180: PPUSH
70181: PPUSH
// if not unit or IsInUnit ( unit ) then
70182: LD_VAR 0 1
70186: NOT
70187: PUSH
70188: LD_VAR 0 1
70192: PPUSH
70193: CALL_OW 310
70197: OR
70198: IFFALSE 70202
// exit ;
70200: GO 70293
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70202: LD_ADDR_VAR 0 4
70206: PUSH
70207: LD_VAR 0 1
70211: PPUSH
70212: CALL_OW 250
70216: PPUSH
70217: LD_VAR 0 2
70221: PPUSH
70222: LD_INT 1
70224: PPUSH
70225: CALL_OW 272
70229: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70230: LD_ADDR_VAR 0 5
70234: PUSH
70235: LD_VAR 0 1
70239: PPUSH
70240: CALL_OW 251
70244: PPUSH
70245: LD_VAR 0 2
70249: PPUSH
70250: LD_INT 1
70252: PPUSH
70253: CALL_OW 273
70257: ST_TO_ADDR
// if ValidHex ( x , y ) then
70258: LD_VAR 0 4
70262: PPUSH
70263: LD_VAR 0 5
70267: PPUSH
70268: CALL_OW 488
70272: IFFALSE 70293
// ComTurnXY ( unit , x , y ) ;
70274: LD_VAR 0 1
70278: PPUSH
70279: LD_VAR 0 4
70283: PPUSH
70284: LD_VAR 0 5
70288: PPUSH
70289: CALL_OW 118
// end ;
70293: LD_VAR 0 3
70297: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70298: LD_INT 0
70300: PPUSH
70301: PPUSH
// result := false ;
70302: LD_ADDR_VAR 0 3
70306: PUSH
70307: LD_INT 0
70309: ST_TO_ADDR
// if not units then
70310: LD_VAR 0 2
70314: NOT
70315: IFFALSE 70319
// exit ;
70317: GO 70364
// for i in units do
70319: LD_ADDR_VAR 0 4
70323: PUSH
70324: LD_VAR 0 2
70328: PUSH
70329: FOR_IN
70330: IFFALSE 70362
// if See ( side , i ) then
70332: LD_VAR 0 1
70336: PPUSH
70337: LD_VAR 0 4
70341: PPUSH
70342: CALL_OW 292
70346: IFFALSE 70360
// begin result := true ;
70348: LD_ADDR_VAR 0 3
70352: PUSH
70353: LD_INT 1
70355: ST_TO_ADDR
// exit ;
70356: POP
70357: POP
70358: GO 70364
// end ;
70360: GO 70329
70362: POP
70363: POP
// end ;
70364: LD_VAR 0 3
70368: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70369: LD_INT 0
70371: PPUSH
70372: PPUSH
70373: PPUSH
70374: PPUSH
// if not unit or not points then
70375: LD_VAR 0 1
70379: NOT
70380: PUSH
70381: LD_VAR 0 2
70385: NOT
70386: OR
70387: IFFALSE 70391
// exit ;
70389: GO 70481
// dist := 99999 ;
70391: LD_ADDR_VAR 0 5
70395: PUSH
70396: LD_INT 99999
70398: ST_TO_ADDR
// for i in points do
70399: LD_ADDR_VAR 0 4
70403: PUSH
70404: LD_VAR 0 2
70408: PUSH
70409: FOR_IN
70410: IFFALSE 70479
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70412: LD_ADDR_VAR 0 6
70416: PUSH
70417: LD_VAR 0 1
70421: PPUSH
70422: LD_VAR 0 4
70426: PUSH
70427: LD_INT 1
70429: ARRAY
70430: PPUSH
70431: LD_VAR 0 4
70435: PUSH
70436: LD_INT 2
70438: ARRAY
70439: PPUSH
70440: CALL_OW 297
70444: ST_TO_ADDR
// if tmpDist < dist then
70445: LD_VAR 0 6
70449: PUSH
70450: LD_VAR 0 5
70454: LESS
70455: IFFALSE 70477
// begin result := i ;
70457: LD_ADDR_VAR 0 3
70461: PUSH
70462: LD_VAR 0 4
70466: ST_TO_ADDR
// dist := tmpDist ;
70467: LD_ADDR_VAR 0 5
70471: PUSH
70472: LD_VAR 0 6
70476: ST_TO_ADDR
// end ; end ;
70477: GO 70409
70479: POP
70480: POP
// end ;
70481: LD_VAR 0 3
70485: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70486: LD_INT 0
70488: PPUSH
// uc_side := side ;
70489: LD_ADDR_OWVAR 20
70493: PUSH
70494: LD_VAR 0 1
70498: ST_TO_ADDR
// uc_nation := 3 ;
70499: LD_ADDR_OWVAR 21
70503: PUSH
70504: LD_INT 3
70506: ST_TO_ADDR
// vc_chassis := 25 ;
70507: LD_ADDR_OWVAR 37
70511: PUSH
70512: LD_INT 25
70514: ST_TO_ADDR
// vc_engine := engine_siberite ;
70515: LD_ADDR_OWVAR 39
70519: PUSH
70520: LD_INT 3
70522: ST_TO_ADDR
// vc_control := control_computer ;
70523: LD_ADDR_OWVAR 38
70527: PUSH
70528: LD_INT 3
70530: ST_TO_ADDR
// vc_weapon := 59 ;
70531: LD_ADDR_OWVAR 40
70535: PUSH
70536: LD_INT 59
70538: ST_TO_ADDR
// result := CreateVehicle ;
70539: LD_ADDR_VAR 0 5
70543: PUSH
70544: CALL_OW 45
70548: ST_TO_ADDR
// SetDir ( result , d ) ;
70549: LD_VAR 0 5
70553: PPUSH
70554: LD_VAR 0 4
70558: PPUSH
70559: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70563: LD_VAR 0 5
70567: PPUSH
70568: LD_VAR 0 2
70572: PPUSH
70573: LD_VAR 0 3
70577: PPUSH
70578: LD_INT 0
70580: PPUSH
70581: CALL_OW 48
// end ;
70585: LD_VAR 0 5
70589: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70590: LD_INT 0
70592: PPUSH
70593: PPUSH
70594: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70595: LD_ADDR_VAR 0 2
70599: PUSH
70600: LD_INT 0
70602: PUSH
70603: LD_INT 0
70605: PUSH
70606: LD_INT 0
70608: PUSH
70609: LD_INT 0
70611: PUSH
70612: EMPTY
70613: LIST
70614: LIST
70615: LIST
70616: LIST
70617: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70618: LD_VAR 0 1
70622: NOT
70623: PUSH
70624: LD_VAR 0 1
70628: PPUSH
70629: CALL_OW 264
70633: PUSH
70634: LD_INT 12
70636: PUSH
70637: LD_INT 51
70639: PUSH
70640: LD_INT 32
70642: PUSH
70643: LD_INT 89
70645: PUSH
70646: EMPTY
70647: LIST
70648: LIST
70649: LIST
70650: LIST
70651: IN
70652: NOT
70653: OR
70654: IFFALSE 70658
// exit ;
70656: GO 70756
// for i := 1 to 3 do
70658: LD_ADDR_VAR 0 3
70662: PUSH
70663: DOUBLE
70664: LD_INT 1
70666: DEC
70667: ST_TO_ADDR
70668: LD_INT 3
70670: PUSH
70671: FOR_TO
70672: IFFALSE 70754
// begin tmp := GetCargo ( cargo , i ) ;
70674: LD_ADDR_VAR 0 4
70678: PUSH
70679: LD_VAR 0 1
70683: PPUSH
70684: LD_VAR 0 3
70688: PPUSH
70689: CALL_OW 289
70693: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70694: LD_ADDR_VAR 0 2
70698: PUSH
70699: LD_VAR 0 2
70703: PPUSH
70704: LD_VAR 0 3
70708: PPUSH
70709: LD_VAR 0 4
70713: PPUSH
70714: CALL_OW 1
70718: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70719: LD_ADDR_VAR 0 2
70723: PUSH
70724: LD_VAR 0 2
70728: PPUSH
70729: LD_INT 4
70731: PPUSH
70732: LD_VAR 0 2
70736: PUSH
70737: LD_INT 4
70739: ARRAY
70740: PUSH
70741: LD_VAR 0 4
70745: PLUS
70746: PPUSH
70747: CALL_OW 1
70751: ST_TO_ADDR
// end ;
70752: GO 70671
70754: POP
70755: POP
// end ;
70756: LD_VAR 0 2
70760: RET
// export function Length ( array ) ; begin
70761: LD_INT 0
70763: PPUSH
// result := array + 0 ;
70764: LD_ADDR_VAR 0 2
70768: PUSH
70769: LD_VAR 0 1
70773: PUSH
70774: LD_INT 0
70776: PLUS
70777: ST_TO_ADDR
// end ;
70778: LD_VAR 0 2
70782: RET
// export function PrepareArray ( array ) ; begin
70783: LD_INT 0
70785: PPUSH
// result := array diff 0 ;
70786: LD_ADDR_VAR 0 2
70790: PUSH
70791: LD_VAR 0 1
70795: PUSH
70796: LD_INT 0
70798: DIFF
70799: ST_TO_ADDR
// if not result [ 1 ] then
70800: LD_VAR 0 2
70804: PUSH
70805: LD_INT 1
70807: ARRAY
70808: NOT
70809: IFFALSE 70829
// result := Delete ( result , 1 ) ;
70811: LD_ADDR_VAR 0 2
70815: PUSH
70816: LD_VAR 0 2
70820: PPUSH
70821: LD_INT 1
70823: PPUSH
70824: CALL_OW 3
70828: ST_TO_ADDR
// end ;
70829: LD_VAR 0 2
70833: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
70834: LD_INT 0
70836: PPUSH
70837: PPUSH
70838: PPUSH
70839: PPUSH
// sibRocketRange := 25 ;
70840: LD_ADDR_VAR 0 6
70844: PUSH
70845: LD_INT 25
70847: ST_TO_ADDR
// result := false ;
70848: LD_ADDR_VAR 0 4
70852: PUSH
70853: LD_INT 0
70855: ST_TO_ADDR
// for i := 0 to 5 do
70856: LD_ADDR_VAR 0 5
70860: PUSH
70861: DOUBLE
70862: LD_INT 0
70864: DEC
70865: ST_TO_ADDR
70866: LD_INT 5
70868: PUSH
70869: FOR_TO
70870: IFFALSE 70937
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
70872: LD_VAR 0 1
70876: PPUSH
70877: LD_VAR 0 5
70881: PPUSH
70882: LD_VAR 0 6
70886: PPUSH
70887: CALL_OW 272
70891: PPUSH
70892: LD_VAR 0 2
70896: PPUSH
70897: LD_VAR 0 5
70901: PPUSH
70902: LD_VAR 0 6
70906: PPUSH
70907: CALL_OW 273
70911: PPUSH
70912: LD_VAR 0 3
70916: PPUSH
70917: CALL_OW 309
70921: IFFALSE 70935
// begin result := true ;
70923: LD_ADDR_VAR 0 4
70927: PUSH
70928: LD_INT 1
70930: ST_TO_ADDR
// exit ;
70931: POP
70932: POP
70933: GO 70939
// end ;
70935: GO 70869
70937: POP
70938: POP
// end ;
70939: LD_VAR 0 4
70943: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
70944: LD_INT 0
70946: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
70947: LD_VAR 0 1
70951: PPUSH
70952: LD_VAR 0 2
70956: PPUSH
70957: LD_INT 0
70959: PPUSH
70960: LD_INT 0
70962: PPUSH
70963: LD_INT 1
70965: PPUSH
70966: LD_INT 0
70968: PPUSH
70969: CALL_OW 587
// end ; end_of_file
70973: LD_VAR 0 3
70977: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70978: LD_VAR 0 1
70982: PUSH
70983: LD_INT 200
70985: DOUBLE
70986: GREATEREQUAL
70987: IFFALSE 70995
70989: LD_INT 299
70991: DOUBLE
70992: LESSEQUAL
70993: IFTRUE 70997
70995: GO 71029
70997: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70998: LD_VAR 0 1
71002: PPUSH
71003: LD_VAR 0 2
71007: PPUSH
71008: LD_VAR 0 3
71012: PPUSH
71013: LD_VAR 0 4
71017: PPUSH
71018: LD_VAR 0 5
71022: PPUSH
71023: CALL 25644 0 5
71027: GO 71106
71029: LD_INT 300
71031: DOUBLE
71032: GREATEREQUAL
71033: IFFALSE 71041
71035: LD_INT 399
71037: DOUBLE
71038: LESSEQUAL
71039: IFTRUE 71043
71041: GO 71105
71043: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71044: LD_VAR 0 1
71048: PPUSH
71049: LD_VAR 0 2
71053: PPUSH
71054: LD_VAR 0 3
71058: PPUSH
71059: LD_VAR 0 4
71063: PPUSH
71064: LD_VAR 0 5
71068: PPUSH
71069: LD_VAR 0 6
71073: PPUSH
71074: LD_VAR 0 7
71078: PPUSH
71079: LD_VAR 0 8
71083: PPUSH
71084: LD_VAR 0 9
71088: PPUSH
71089: LD_VAR 0 10
71093: PPUSH
71094: LD_VAR 0 11
71098: PPUSH
71099: CALL 21977 0 11
71103: GO 71106
71105: POP
// end ;
71106: PPOPN 11
71108: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71109: LD_VAR 0 1
71113: PPUSH
71114: LD_VAR 0 2
71118: PPUSH
71119: LD_VAR 0 3
71123: PPUSH
71124: LD_VAR 0 4
71128: PPUSH
71129: LD_VAR 0 5
71133: PPUSH
71134: CALL 25380 0 5
// end ; end_of_file
71138: PPOPN 5
71140: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71141: LD_VAR 0 1
71145: PPUSH
71146: LD_VAR 0 2
71150: PPUSH
71151: LD_VAR 0 3
71155: PPUSH
71156: LD_VAR 0 4
71160: PPUSH
71161: LD_VAR 0 5
71165: PPUSH
71166: LD_VAR 0 6
71170: PPUSH
71171: CALL 9597 0 6
// end ;
71175: PPOPN 6
71177: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71178: LD_INT 0
71180: PPUSH
// begin if not units then
71181: LD_VAR 0 1
71185: NOT
71186: IFFALSE 71190
// exit ;
71188: GO 71190
// end ;
71190: PPOPN 7
71192: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71193: CALL 9491 0 0
// end ;
71197: PPOPN 1
71199: END
