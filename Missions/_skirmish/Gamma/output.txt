// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// SetDifficulty ( GetMultiplayerSetting ( 0 ) ) ;
  11: LD_INT 0
  13: PPUSH
  14: CALL_OW 426
  18: PPUSH
  19: CALL 279 0 1
// InGameOn ;
  23: CALL_OW 8
// CenterNowOnXY ( 0 , 0 ) ;
  27: LD_INT 0
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: CALL_OW 86
// RandomizeAll ;
  37: CALL_OW 11
// DestroyTrash ;
  41: CALL 148 0 0
// ShowPath ;
  45: CALL 214 0 0
// RandMusic ( 1 , 3 ) ;
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 3
  54: PPUSH
  55: CALL 222 0 2
// PrepareAnimals ( [ 8 , 7 , 6 ] [ dif ] , 2 , 3 , nature ) ;
  59: LD_INT 8
  61: PUSH
  62: LD_INT 7
  64: PUSH
  65: LD_INT 6
  67: PUSH
  68: EMPTY
  69: LIST
  70: LIST
  71: LIST
  72: PUSH
  73: LD_EXP 1
  77: ARRAY
  78: PPUSH
  79: LD_INT 2
  81: PPUSH
  82: LD_INT 3
  84: PPUSH
  85: LD_INT 10
  87: PPUSH
  88: CALL 329 0 4
// PrepareRussian ;
  92: CALL 1407 0 0
// Action ;
  96: CALL 8631 0 0
// PrepareAmerican ;
 100: CALL 5251 0 0
// end ;
 104: END
// every 2 2$00 + 1 1$0 do var i , bool ;
 105: GO 107
 107: DISABLE
 108: LD_INT 0
 110: PPUSH
 111: PPUSH
// begin bool := Rand ( false , true ) ;
 112: LD_ADDR_VAR 0 2
 116: PUSH
 117: LD_INT 0
 119: PPUSH
 120: LD_INT 1
 122: PPUSH
 123: CALL_OW 12
 127: ST_TO_ADDR
// if bool then
 128: LD_VAR 0 2
 132: IFFALSE 144
// RandMusic ( 1 , 3 ) ;
 134: LD_INT 1
 136: PPUSH
 137: LD_INT 3
 139: PPUSH
 140: CALL 222 0 2
// enable ;
 144: ENABLE
// end ; end_of_file
 145: PPOPN 2
 147: END
// export function DestroyTrash ; var i ; begin
 148: LD_INT 0
 150: PPUSH
 151: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_not , [ f_lives , 5 ] ] ] ) do
 152: LD_ADDR_VAR 0 2
 156: PUSH
 157: LD_INT 22
 159: PUSH
 160: LD_INT 0
 162: PUSH
 163: EMPTY
 164: LIST
 165: LIST
 166: PUSH
 167: LD_INT 3
 169: PUSH
 170: LD_INT 24
 172: PUSH
 173: LD_INT 5
 175: PUSH
 176: EMPTY
 177: LIST
 178: LIST
 179: PUSH
 180: EMPTY
 181: LIST
 182: LIST
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 69
 192: PUSH
 193: FOR_IN
 194: IFFALSE 207
// KillUnit ( i ) ;
 196: LD_VAR 0 2
 200: PPUSH
 201: CALL_OW 66
 205: GO 193
 207: POP
 208: POP
// end ;
 209: LD_VAR 0 1
 213: RET
// export function ShowPath ; begin
 214: LD_INT 0
 216: PPUSH
// end ;
 217: LD_VAR 0 1
 221: RET
// export function RandMusic ( n1 , n2 ) ; var proc ; begin
 222: LD_INT 0
 224: PPUSH
 225: PPUSH
// proc := Rand ( 0 , 100 ) ;
 226: LD_ADDR_VAR 0 4
 230: PUSH
 231: LD_INT 0
 233: PPUSH
 234: LD_INT 100
 236: PPUSH
 237: CALL_OW 12
 241: ST_TO_ADDR
// if proc > 50 then
 242: LD_VAR 0 4
 246: PUSH
 247: LD_INT 50
 249: GREATER
 250: IFFALSE 264
// music_nat := n1 else
 252: LD_ADDR_OWVAR 71
 256: PUSH
 257: LD_VAR 0 1
 261: ST_TO_ADDR
 262: GO 274
// music_nat := n2 ;
 264: LD_ADDR_OWVAR 71
 268: PUSH
 269: LD_VAR 0 2
 273: ST_TO_ADDR
// end ;
 274: LD_VAR 0 3
 278: RET
// export dif ; export function SetDifficulty ( val ) ; begin
 279: LD_INT 0
 281: PPUSH
// if not val then
 282: LD_VAR 0 1
 286: NOT
 287: IFFALSE 297
// val := 2 ;
 289: LD_ADDR_VAR 0 1
 293: PUSH
 294: LD_INT 2
 296: ST_TO_ADDR
// dif := val ;
 297: LD_ADDR_EXP 1
 301: PUSH
 302: LD_VAR 0 1
 306: ST_TO_ADDR
// if dif < 3 then
 307: LD_EXP 1
 311: PUSH
 312: LD_INT 3
 314: LESS
 315: IFFALSE 324
// RemoveEnvironmentArea ( evnt ) ;
 317: LD_INT 9
 319: PPUSH
 320: CALL_OW 355
// end ;
 324: LD_VAR 0 2
 328: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
 333: PPUSH
 334: PPUSH
 335: PPUSH
// uc_nation = nation_nature ;
 336: LD_ADDR_OWVAR 21
 340: PUSH
 341: LD_INT 0
 343: ST_TO_ADDR
// uc_side = 0 ;
 344: LD_ADDR_OWVAR 20
 348: PUSH
 349: LD_INT 0
 351: ST_TO_ADDR
// hc_importance := 0 ;
 352: LD_ADDR_OWVAR 32
 356: PUSH
 357: LD_INT 0
 359: ST_TO_ADDR
// l = 0 ;
 360: LD_ADDR_VAR 0 6
 364: PUSH
 365: LD_INT 0
 367: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
 368: LD_ADDR_OWVAR 24
 372: PUSH
 373: LD_INT 0
 375: PPUSH
 376: LD_INT 5
 378: PPUSH
 379: CALL_OW 12
 383: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
 384: LD_ADDR_OWVAR 35
 388: PUSH
 389: LD_INT 5
 391: NEG
 392: PPUSH
 393: LD_INT 5
 395: PPUSH
 396: CALL_OW 12
 400: ST_TO_ADDR
// hc_gallery =  ;
 401: LD_ADDR_OWVAR 33
 405: PUSH
 406: LD_STRING 
 408: ST_TO_ADDR
// hc_class = class_apeman ;
 409: LD_ADDR_OWVAR 28
 413: PUSH
 414: LD_INT 12
 416: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
 417: LD_ADDR_OWVAR 29
 421: PUSH
 422: LD_INT 11
 424: PPUSH
 425: LD_INT 13
 427: PPUSH
 428: CALL_OW 12
 432: PUSH
 433: LD_INT 10
 435: PPUSH
 436: LD_INT 11
 438: PPUSH
 439: CALL_OW 12
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: ST_TO_ADDR
// hc_sex = sex_male ;
 448: LD_ADDR_OWVAR 27
 452: PUSH
 453: LD_INT 1
 455: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
 456: LD_ADDR_OWVAR 31
 460: PUSH
 461: LD_INT 0
 463: PPUSH
 464: LD_INT 2
 466: PPUSH
 467: CALL_OW 12
 471: PUSH
 472: LD_INT 0
 474: PUSH
 475: LD_INT 0
 477: PUSH
 478: LD_INT 0
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: ST_TO_ADDR
// apeman = CreateHuman ;
 487: LD_ADDR_VAR 0 7
 491: PUSH
 492: CALL_OW 44
 496: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
 497: LD_VAR 0 7
 501: PPUSH
 502: LD_VAR 0 4
 506: PPUSH
 507: LD_INT 0
 509: PPUSH
 510: CALL_OW 49
// l = l + 1 ;
 514: LD_ADDR_VAR 0 6
 518: PUSH
 519: LD_VAR 0 6
 523: PUSH
 524: LD_INT 1
 526: PLUS
 527: ST_TO_ADDR
// end until l = num1 ;
 528: LD_VAR 0 6
 532: PUSH
 533: LD_VAR 0 1
 537: EQUAL
 538: IFFALSE 368
// l = 0 ;
 540: LD_ADDR_VAR 0 6
 544: PUSH
 545: LD_INT 0
 547: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
 548: LD_ADDR_OWVAR 35
 552: PUSH
 553: LD_INT 0
 555: PPUSH
 556: LD_INT 25
 558: PPUSH
 559: CALL_OW 12
 563: ST_TO_ADDR
// hc_class = class_tiger ;
 564: LD_ADDR_OWVAR 28
 568: PUSH
 569: LD_INT 14
 571: ST_TO_ADDR
// hc_sex = sex_male ;
 572: LD_ADDR_OWVAR 27
 576: PUSH
 577: LD_INT 1
 579: ST_TO_ADDR
// hc_gallery = sandnature ;
 580: LD_ADDR_OWVAR 33
 584: PUSH
 585: LD_STRING sandnature
 587: ST_TO_ADDR
// hc_face_number = 3 ;
 588: LD_ADDR_OWVAR 34
 592: PUSH
 593: LD_INT 3
 595: ST_TO_ADDR
// tiger = CreateHuman ;
 596: LD_ADDR_VAR 0 8
 600: PUSH
 601: CALL_OW 44
 605: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
 606: LD_VAR 0 8
 610: PPUSH
 611: LD_VAR 0 4
 615: PPUSH
 616: LD_INT 0
 618: PPUSH
 619: CALL_OW 49
// l = l + 1 ;
 623: LD_ADDR_VAR 0 6
 627: PUSH
 628: LD_VAR 0 6
 632: PUSH
 633: LD_INT 1
 635: PLUS
 636: ST_TO_ADDR
// end until l = num2 ;
 637: LD_VAR 0 6
 641: PUSH
 642: LD_VAR 0 2
 646: EQUAL
 647: IFFALSE 548
// l = 0 ;
 649: LD_ADDR_VAR 0 6
 653: PUSH
 654: LD_INT 0
 656: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
 657: LD_ADDR_OWVAR 28
 661: PUSH
 662: LD_INT 18
 664: ST_TO_ADDR
// hc_gallery = sandnature ;
 665: LD_ADDR_OWVAR 33
 669: PUSH
 670: LD_STRING sandnature
 672: ST_TO_ADDR
// hc_face_number = 1 ;
 673: LD_ADDR_OWVAR 34
 677: PUSH
 678: LD_INT 1
 680: ST_TO_ADDR
// bird = CreateHuman ;
 681: LD_ADDR_VAR 0 9
 685: PUSH
 686: CALL_OW 44
 690: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
 691: LD_VAR 0 9
 695: PPUSH
 696: LD_INT 0
 698: PPUSH
 699: CALL_OW 51
// l = l + 1 ;
 703: LD_ADDR_VAR 0 6
 707: PUSH
 708: LD_VAR 0 6
 712: PUSH
 713: LD_INT 1
 715: PLUS
 716: ST_TO_ADDR
// end until l = num3 ;
 717: LD_VAR 0 6
 721: PUSH
 722: LD_VAR 0 3
 726: EQUAL
 727: IFFALSE 657
// end ;
 729: LD_VAR 0 5
 733: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
 734: LD_INT 0
 736: PPUSH
 737: PPUSH
 738: PPUSH
 739: PPUSH
 740: PPUSH
 741: PPUSH
// InitHc ;
 742: CALL_OW 19
// hc_class := clas ;
 746: LD_ADDR_OWVAR 28
 750: PUSH
 751: LD_VAR 0 1
 755: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
 756: LD_ADDR_VAR 0 4
 760: PUSH
 761: LD_VAR 0 2
 765: PUSH
 766: LD_INT 1
 768: NEG
 769: PPUSH
 770: LD_INT 1
 772: PPUSH
 773: CALL_OW 12
 777: PLUS
 778: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
 779: LD_ADDR_VAR 0 5
 783: PUSH
 784: LD_VAR 0 2
 788: PUSH
 789: LD_INT 1
 791: NEG
 792: PPUSH
 793: LD_INT 1
 795: PPUSH
 796: CALL_OW 12
 800: PLUS
 801: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
 802: LD_ADDR_VAR 0 6
 806: PUSH
 807: LD_VAR 0 2
 811: PUSH
 812: LD_INT 1
 814: NEG
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: CALL_OW 12
 823: PLUS
 824: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
 825: LD_ADDR_VAR 0 7
 829: PUSH
 830: LD_VAR 0 2
 834: PUSH
 835: LD_INT 1
 837: NEG
 838: PPUSH
 839: LD_INT 1
 841: PPUSH
 842: CALL_OW 12
 846: PLUS
 847: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
 848: LD_VAR 0 1
 852: PUSH
 853: LD_INT 1
 855: EQUAL
 856: PUSH
 857: LD_VAR 0 1
 861: PUSH
 862: LD_INT 9
 864: EQUAL
 865: OR
 866: PUSH
 867: LD_VAR 0 1
 871: PUSH
 872: LD_INT 5
 874: EQUAL
 875: OR
 876: PUSH
 877: LD_VAR 0 1
 881: PUSH
 882: LD_INT 8
 884: EQUAL
 885: OR
 886: IFFALSE 911
// bonus := [ 2 , 0 , 0 , 0 ] ;
 888: LD_ADDR_VAR 0 8
 892: PUSH
 893: LD_INT 2
 895: PUSH
 896: LD_INT 0
 898: PUSH
 899: LD_INT 0
 901: PUSH
 902: LD_INT 0
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: ST_TO_ADDR
// if clas = 2 then
 911: LD_VAR 0 1
 915: PUSH
 916: LD_INT 2
 918: EQUAL
 919: IFFALSE 944
// bonus := [ 0 , 2 , 0 , 0 ] ;
 921: LD_ADDR_VAR 0 8
 925: PUSH
 926: LD_INT 0
 928: PUSH
 929: LD_INT 2
 931: PUSH
 932: LD_INT 0
 934: PUSH
 935: LD_INT 0
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: ST_TO_ADDR
// if clas = 3 then
 944: LD_VAR 0 1
 948: PUSH
 949: LD_INT 3
 951: EQUAL
 952: IFFALSE 977
// bonus := [ 0 , 0 , 2 , 0 ] ;
 954: LD_ADDR_VAR 0 8
 958: PUSH
 959: LD_INT 0
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: LD_INT 2
 967: PUSH
 968: LD_INT 0
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: ST_TO_ADDR
// if clas = 4 then
 977: LD_VAR 0 1
 981: PUSH
 982: LD_INT 4
 984: EQUAL
 985: IFFALSE 1010
// bonus := [ 0 , 0 , 0 , 2 ] ;
 987: LD_ADDR_VAR 0 8
 991: PUSH
 992: LD_INT 0
 994: PUSH
 995: LD_INT 0
 997: PUSH
 998: LD_INT 0
1000: PUSH
1001: LD_INT 2
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
1010: LD_VAR 0 1
1014: PUSH
1015: LD_INT 4
1017: GREATER
1018: PUSH
1019: LD_VAR 0 1
1023: PUSH
1024: LD_INT 9
1026: NONEQUAL
1027: AND
1028: PUSH
1029: LD_VAR 0 1
1033: PUSH
1034: LD_INT 5
1036: NONEQUAL
1037: AND
1038: PUSH
1039: LD_VAR 0 1
1043: PUSH
1044: LD_INT 8
1046: NONEQUAL
1047: AND
1048: IFFALSE 1073
// bonus := [ 0 , 0 , 0 , 0 ] ;
1050: LD_ADDR_VAR 0 8
1054: PUSH
1055: LD_INT 0
1057: PUSH
1058: LD_INT 0
1060: PUSH
1061: LD_INT 0
1063: PUSH
1064: LD_INT 0
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
1073: LD_ADDR_OWVAR 30
1077: PUSH
1078: LD_INT 0
1080: PPUSH
1081: LD_INT 2
1083: PPUSH
1084: CALL_OW 12
1088: PUSH
1089: LD_INT 0
1091: PPUSH
1092: LD_INT 2
1094: PPUSH
1095: CALL_OW 12
1099: PUSH
1100: LD_INT 0
1102: PPUSH
1103: LD_INT 2
1105: PPUSH
1106: CALL_OW 12
1110: PUSH
1111: LD_INT 0
1113: PPUSH
1114: LD_INT 2
1116: PPUSH
1117: CALL_OW 12
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: LIST
1127: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
1128: LD_ADDR_OWVAR 31
1132: PUSH
1133: LD_VAR 0 4
1137: PUSH
1138: LD_VAR 0 8
1142: PUSH
1143: LD_INT 1
1145: ARRAY
1146: PLUS
1147: PUSH
1148: LD_VAR 0 5
1152: PUSH
1153: LD_VAR 0 8
1157: PUSH
1158: LD_INT 2
1160: ARRAY
1161: PLUS
1162: PUSH
1163: LD_VAR 0 6
1167: PUSH
1168: LD_VAR 0 8
1172: PUSH
1173: LD_INT 3
1175: ARRAY
1176: PLUS
1177: PUSH
1178: LD_VAR 0 7
1182: PUSH
1183: LD_VAR 0 8
1187: PUSH
1188: LD_INT 4
1190: ARRAY
1191: PLUS
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: ST_TO_ADDR
// if clas = 3 then
1199: LD_VAR 0 1
1203: PUSH
1204: LD_INT 3
1206: EQUAL
1207: IFFALSE 1219
// hc_sex := sex_male else
1209: LD_ADDR_OWVAR 27
1213: PUSH
1214: LD_INT 1
1216: ST_TO_ADDR
1217: GO 1235
// hc_sex := Rand ( sex_male , sex_female ) ;
1219: LD_ADDR_OWVAR 27
1223: PUSH
1224: LD_INT 1
1226: PPUSH
1227: LD_INT 2
1229: PPUSH
1230: CALL_OW 12
1234: ST_TO_ADDR
// hc_gallery :=  ;
1235: LD_ADDR_OWVAR 33
1239: PUSH
1240: LD_STRING 
1242: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 8 , 12 ) ] ;
1243: LD_ADDR_OWVAR 29
1247: PUSH
1248: LD_INT 8
1250: PPUSH
1251: LD_INT 12
1253: PPUSH
1254: CALL_OW 12
1258: PUSH
1259: LD_INT 8
1261: PPUSH
1262: LD_INT 12
1264: PPUSH
1265: CALL_OW 12
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: ST_TO_ADDR
// hc_name :=  ;
1274: LD_ADDR_OWVAR 26
1278: PUSH
1279: LD_STRING 
1281: ST_TO_ADDR
// result := CreateHuman ;
1282: LD_ADDR_VAR 0 3
1286: PUSH
1287: CALL_OW 44
1291: ST_TO_ADDR
// end ;
1292: LD_VAR 0 3
1296: RET
// export function CreateVehicleWithDriver ( chassis , engine , weapon , area , dir , lvl ) ; var veh ; begin
1297: LD_INT 0
1299: PPUSH
1300: PPUSH
// vc_chassis := chassis ;
1301: LD_ADDR_OWVAR 37
1305: PUSH
1306: LD_VAR 0 1
1310: ST_TO_ADDR
// vc_engine := engine ;
1311: LD_ADDR_OWVAR 39
1315: PUSH
1316: LD_VAR 0 2
1320: ST_TO_ADDR
// vc_weapon := weapon ;
1321: LD_ADDR_OWVAR 40
1325: PUSH
1326: LD_VAR 0 3
1330: ST_TO_ADDR
// vc_control := control_manual ;
1331: LD_ADDR_OWVAR 38
1335: PUSH
1336: LD_INT 1
1338: ST_TO_ADDR
// veh := CreateVehicle ;
1339: LD_ADDR_VAR 0 8
1343: PUSH
1344: CALL_OW 45
1348: ST_TO_ADDR
// SetDir ( veh , dir ) ;
1349: LD_VAR 0 8
1353: PPUSH
1354: LD_VAR 0 5
1358: PPUSH
1359: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
1363: LD_VAR 0 8
1367: PPUSH
1368: LD_VAR 0 4
1372: PPUSH
1373: LD_INT 0
1375: PPUSH
1376: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , lvl ) , veh ) ;
1380: LD_INT 3
1382: PPUSH
1383: LD_VAR 0 6
1387: PPUSH
1388: CALL 734 0 2
1392: PPUSH
1393: LD_VAR 0 8
1397: PPUSH
1398: CALL_OW 52
// end ; end_of_file
1402: LD_VAR 0 7
1406: RET
// export Popov , Commander , Platonov , Kapral ; export depot_rdy , dep_x , dep_y ; export function PrepareRussian ; var i , un , skill , team , p ; begin
1407: LD_INT 0
1409: PPUSH
1410: PPUSH
1411: PPUSH
1412: PPUSH
1413: PPUSH
1414: PPUSH
// depot_rdy := false ;
1415: LD_ADDR_EXP 6
1419: PUSH
1420: LD_INT 0
1422: ST_TO_ADDR
// uc_side := 6 ;
1423: LD_ADDR_OWVAR 20
1427: PUSH
1428: LD_INT 6
1430: ST_TO_ADDR
// uc_nation := 3 ;
1431: LD_ADDR_OWVAR 21
1435: PUSH
1436: LD_INT 3
1438: ST_TO_ADDR
// hc_gallery := ru ;
1439: LD_ADDR_OWVAR 33
1443: PUSH
1444: LD_STRING ru
1446: ST_TO_ADDR
// hc_face_number := 10 ;
1447: LD_ADDR_OWVAR 34
1451: PUSH
1452: LD_INT 10
1454: ST_TO_ADDR
// hc_name := Siergiej I. Popov ;
1455: LD_ADDR_OWVAR 26
1459: PUSH
1460: LD_STRING Siergiej I. Popov
1462: ST_TO_ADDR
// hc_class := 1 ;
1463: LD_ADDR_OWVAR 28
1467: PUSH
1468: LD_INT 1
1470: ST_TO_ADDR
// hc_sex := sex_male ;
1471: LD_ADDR_OWVAR 27
1475: PUSH
1476: LD_INT 1
1478: ST_TO_ADDR
// popov := CreateHuman ;
1479: LD_ADDR_EXP 2
1483: PUSH
1484: CALL_OW 44
1488: ST_TO_ADDR
// hc_gallery := general ;
1489: LD_ADDR_OWVAR 33
1493: PUSH
1494: LD_STRING general
1496: ST_TO_ADDR
// hc_face_number := 1 ;
1497: LD_ADDR_OWVAR 34
1501: PUSH
1502: LD_INT 1
1504: ST_TO_ADDR
// hc_name := Mjr. D. N. Platonow ;
1505: LD_ADDR_OWVAR 26
1509: PUSH
1510: LD_STRING Mjr. D. N. Platonow
1512: ST_TO_ADDR
// platonov := CreateHuman ;
1513: LD_ADDR_EXP 4
1517: PUSH
1518: CALL_OW 44
1522: ST_TO_ADDR
// uc_side := 3 ;
1523: LD_ADDR_OWVAR 20
1527: PUSH
1528: LD_INT 3
1530: ST_TO_ADDR
// ChangeSideFog ( 3 , 6 ) ;
1531: LD_INT 3
1533: PPUSH
1534: LD_INT 6
1536: PPUSH
1537: CALL_OW 343
// skill := [ 6 , 5 , 4 ] [ dif ] ;
1541: LD_ADDR_VAR 0 4
1545: PUSH
1546: LD_INT 6
1548: PUSH
1549: LD_INT 5
1551: PUSH
1552: LD_INT 4
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: LIST
1559: PUSH
1560: LD_EXP 1
1564: ARRAY
1565: ST_TO_ADDR
// team := [ ] ;
1566: LD_ADDR_VAR 0 5
1570: PUSH
1571: EMPTY
1572: ST_TO_ADDR
// hc_importance := 100 ;
1573: LD_ADDR_OWVAR 32
1577: PUSH
1578: LD_INT 100
1580: ST_TO_ADDR
// hc_gallery := gamma ;
1581: LD_ADDR_OWVAR 33
1585: PUSH
1586: LD_STRING gamma
1588: ST_TO_ADDR
// hc_face_number := 1 ;
1589: LD_ADDR_OWVAR 34
1593: PUSH
1594: LD_INT 1
1596: ST_TO_ADDR
// hc_class := 1 ;
1597: LD_ADDR_OWVAR 28
1601: PUSH
1602: LD_INT 1
1604: ST_TO_ADDR
// hc_skills := [ [ 8 , 7 , 6 ] [ dif ] , 5 , 3 , 0 ] ;
1605: LD_ADDR_OWVAR 31
1609: PUSH
1610: LD_INT 8
1612: PUSH
1613: LD_INT 7
1615: PUSH
1616: LD_INT 6
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: LIST
1623: PUSH
1624: LD_EXP 1
1628: ARRAY
1629: PUSH
1630: LD_INT 5
1632: PUSH
1633: LD_INT 3
1635: PUSH
1636: LD_INT 0
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: ST_TO_ADDR
// hc_sex := sex_male ;
1645: LD_ADDR_OWVAR 27
1649: PUSH
1650: LD_INT 1
1652: ST_TO_ADDR
// hc_name := Mjr. Jurij Karakanov ;
1653: LD_ADDR_OWVAR 26
1657: PUSH
1658: LD_STRING Mjr. Jurij Karakanov
1660: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1661: LD_ADDR_OWVAR 29
1665: PUSH
1666: LD_INT 10
1668: PUSH
1669: LD_INT 11
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: ST_TO_ADDR
// commander := CreateHuman ;
1676: LD_ADDR_EXP 3
1680: PUSH
1681: CALL_OW 44
1685: ST_TO_ADDR
// team := team ^ commander ;
1686: LD_ADDR_VAR 0 5
1690: PUSH
1691: LD_VAR 0 5
1695: PUSH
1696: LD_EXP 3
1700: ADD
1701: ST_TO_ADDR
// hc_importance := 0 ;
1702: LD_ADDR_OWVAR 32
1706: PUSH
1707: LD_INT 0
1709: ST_TO_ADDR
// hc_name :=  ;
1710: LD_ADDR_OWVAR 26
1714: PUSH
1715: LD_STRING 
1717: ST_TO_ADDR
// hc_gallery :=  ;
1718: LD_ADDR_OWVAR 33
1722: PUSH
1723: LD_STRING 
1725: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
1726: LD_ADDR_OWVAR 29
1730: PUSH
1731: LD_INT 12
1733: PUSH
1734: LD_INT 10
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: ST_TO_ADDR
// hc_sex := sex_male ;
1741: LD_ADDR_OWVAR 27
1745: PUSH
1746: LD_INT 1
1748: ST_TO_ADDR
// Kapral := CreateHuman ;
1749: LD_ADDR_EXP 5
1753: PUSH
1754: CALL_OW 44
1758: ST_TO_ADDR
// for i = 3 downto dif do
1759: LD_ADDR_VAR 0 2
1763: PUSH
1764: DOUBLE
1765: LD_INT 3
1767: INC
1768: ST_TO_ADDR
1769: LD_EXP 1
1773: PUSH
1774: FOR_DOWNTO
1775: IFFALSE 1881
// begin vc_chassis := ru_medium_tracked ;
1777: LD_ADDR_OWVAR 37
1781: PUSH
1782: LD_INT 22
1784: ST_TO_ADDR
// vc_engine := engine_combustion ;
1785: LD_ADDR_OWVAR 39
1789: PUSH
1790: LD_INT 1
1792: ST_TO_ADDR
// vc_control := control_manual ;
1793: LD_ADDR_OWVAR 38
1797: PUSH
1798: LD_INT 1
1800: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_gun , ru_gun ] [ i ] ;
1801: LD_ADDR_OWVAR 40
1805: PUSH
1806: LD_INT 43
1808: PUSH
1809: LD_INT 44
1811: PUSH
1812: LD_INT 44
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: LIST
1819: PUSH
1820: LD_VAR 0 2
1824: ARRAY
1825: ST_TO_ADDR
// vc_fuel_battery := Rand ( 55 , 77 ) ;
1826: LD_ADDR_OWVAR 41
1830: PUSH
1831: LD_INT 55
1833: PPUSH
1834: LD_INT 77
1836: PPUSH
1837: CALL_OW 12
1841: ST_TO_ADDR
// un := CreateVehicle ;
1842: LD_ADDR_VAR 0 3
1846: PUSH
1847: CALL_OW 45
1851: ST_TO_ADDR
// SetDir ( un , 5 ) ;
1852: LD_VAR 0 3
1856: PPUSH
1857: LD_INT 5
1859: PPUSH
1860: CALL_OW 233
// PlaceUnitArea ( un , rus_spawn , false ) ;
1864: LD_VAR 0 3
1868: PPUSH
1869: LD_INT 1
1871: PPUSH
1872: LD_INT 0
1874: PPUSH
1875: CALL_OW 49
// end ;
1879: GO 1774
1881: POP
1882: POP
// vc_weapon := ru_heavy_machine_gun ;
1883: LD_ADDR_OWVAR 40
1887: PUSH
1888: LD_INT 42
1890: ST_TO_ADDR
// vc_fuel_battery := Rand ( 55 , 77 ) ;
1891: LD_ADDR_OWVAR 41
1895: PUSH
1896: LD_INT 55
1898: PPUSH
1899: LD_INT 77
1901: PPUSH
1902: CALL_OW 12
1906: ST_TO_ADDR
// un := CreateVehicle ;
1907: LD_ADDR_VAR 0 3
1911: PUSH
1912: CALL_OW 45
1916: ST_TO_ADDR
// SetDir ( un , 5 ) ;
1917: LD_VAR 0 3
1921: PPUSH
1922: LD_INT 5
1924: PPUSH
1925: CALL_OW 233
// PlaceUnitArea ( un , rus_spawn , false ) ;
1929: LD_VAR 0 3
1933: PPUSH
1934: LD_INT 1
1936: PPUSH
1937: LD_INT 0
1939: PPUSH
1940: CALL_OW 49
// for p = 1 to 4 do
1944: LD_ADDR_VAR 0 6
1948: PUSH
1949: DOUBLE
1950: LD_INT 1
1952: DEC
1953: ST_TO_ADDR
1954: LD_INT 4
1956: PUSH
1957: FOR_TO
1958: IFFALSE 2025
// for i = 1 to [ 5 , 4 , 3 ] [ dif ] do
1960: LD_ADDR_VAR 0 2
1964: PUSH
1965: DOUBLE
1966: LD_INT 1
1968: DEC
1969: ST_TO_ADDR
1970: LD_INT 5
1972: PUSH
1973: LD_INT 4
1975: PUSH
1976: LD_INT 3
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: LIST
1983: PUSH
1984: LD_EXP 1
1988: ARRAY
1989: PUSH
1990: FOR_TO
1991: IFFALSE 2021
// team := team ^ CreateHumanWithClass ( p , skill ) ;
1993: LD_ADDR_VAR 0 5
1997: PUSH
1998: LD_VAR 0 5
2002: PUSH
2003: LD_VAR 0 6
2007: PPUSH
2008: LD_VAR 0 4
2012: PPUSH
2013: CALL 734 0 2
2017: ADD
2018: ST_TO_ADDR
2019: GO 1990
2021: POP
2022: POP
2023: GO 1957
2025: POP
2026: POP
// for i = 1 to team do
2027: LD_ADDR_VAR 0 2
2031: PUSH
2032: DOUBLE
2033: LD_INT 1
2035: DEC
2036: ST_TO_ADDR
2037: LD_VAR 0 5
2041: PUSH
2042: FOR_TO
2043: IFFALSE 2161
// if GetClass ( team [ i ] ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_empty ] ] ) then
2045: LD_VAR 0 5
2049: PUSH
2050: LD_VAR 0 2
2054: ARRAY
2055: PPUSH
2056: CALL_OW 257
2060: PUSH
2061: LD_INT 3
2063: EQUAL
2064: PUSH
2065: LD_INT 22
2067: PUSH
2068: LD_INT 3
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 58
2077: PUSH
2078: EMPTY
2079: LIST
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PPUSH
2085: CALL_OW 69
2089: AND
2090: IFFALSE 2138
// PlaceHumanInUnit ( team [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_empty ] ] ) [ 1 ] ) else
2092: LD_VAR 0 5
2096: PUSH
2097: LD_VAR 0 2
2101: ARRAY
2102: PPUSH
2103: LD_INT 22
2105: PUSH
2106: LD_INT 3
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: PUSH
2113: LD_INT 58
2115: PUSH
2116: EMPTY
2117: LIST
2118: PUSH
2119: EMPTY
2120: LIST
2121: LIST
2122: PPUSH
2123: CALL_OW 69
2127: PUSH
2128: LD_INT 1
2130: ARRAY
2131: PPUSH
2132: CALL_OW 52
2136: GO 2159
// PlaceUnitArea ( team [ i ] , rus_spawn , false ) ;
2138: LD_VAR 0 5
2142: PUSH
2143: LD_VAR 0 2
2147: ARRAY
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: LD_INT 0
2154: PPUSH
2155: CALL_OW 49
2159: GO 2042
2161: POP
2162: POP
// end ;
2163: LD_VAR 0 1
2167: RET
// every 0 0$10 trigger depot_rdy do var i , un , l , driver ;
2168: LD_EXP 6
2172: IFFALSE 2542
2174: GO 2176
2176: DISABLE
2177: LD_INT 0
2179: PPUSH
2180: PPUSH
2181: PPUSH
2182: PPUSH
// begin Wait ( 0 0$07 ) ;
2183: LD_INT 245
2185: PPUSH
2186: CALL_OW 67
// l := 0 ;
2190: LD_ADDR_VAR 0 3
2194: PUSH
2195: LD_INT 0
2197: ST_TO_ADDR
// repeat begin uc_side := 6 ;
2198: LD_ADDR_OWVAR 20
2202: PUSH
2203: LD_INT 6
2205: ST_TO_ADDR
// uc_nation := 3 ;
2206: LD_ADDR_OWVAR 21
2210: PUSH
2211: LD_INT 3
2213: ST_TO_ADDR
// CreateVehicleWithDriver ( ru_medium_tracked , engine_combustion , ru_cargo_bay , rus_cr_spawn , 5 , Rand ( 3 , 6 ) ) ;
2214: LD_INT 22
2216: PPUSH
2217: LD_INT 1
2219: PPUSH
2220: LD_INT 51
2222: PPUSH
2223: LD_INT 5
2225: PPUSH
2226: LD_INT 5
2228: PPUSH
2229: LD_INT 3
2231: PPUSH
2232: LD_INT 6
2234: PPUSH
2235: CALL_OW 12
2239: PPUSH
2240: CALL 1297 0 6
// un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
2244: LD_ADDR_VAR 0 2
2248: PUSH
2249: LD_INT 22
2251: PUSH
2252: LD_INT 6
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 34
2261: PUSH
2262: LD_INT 51
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PPUSH
2273: CALL_OW 69
2277: PUSH
2278: LD_INT 1
2280: ARRAY
2281: ST_TO_ADDR
// SetCargo ( un , mat_cans , 100 ) ;
2282: LD_VAR 0 2
2286: PPUSH
2287: LD_INT 1
2289: PPUSH
2290: LD_INT 100
2292: PPUSH
2293: CALL_OW 290
// ComMoveXY ( un , dep_x + 2 , dep_y ) ;
2297: LD_VAR 0 2
2301: PPUSH
2302: LD_EXP 7
2306: PUSH
2307: LD_INT 2
2309: PLUS
2310: PPUSH
2311: LD_EXP 8
2315: PPUSH
2316: CALL_OW 111
// AddComUnload ( un ) ;
2320: LD_VAR 0 2
2324: PPUSH
2325: CALL_OW 219
// if ( l = 0 ) then
2329: LD_VAR 0 3
2333: PUSH
2334: LD_INT 0
2336: EQUAL
2337: IFFALSE 2373
// begin Wait ( 0 0$03 ) ;
2339: LD_INT 105
2341: PPUSH
2342: CALL_OW 67
// driver := IsDrivenBy ( un ) ;
2346: LD_ADDR_VAR 0 4
2350: PUSH
2351: LD_VAR 0 2
2355: PPUSH
2356: CALL_OW 311
2360: ST_TO_ADDR
// Say ( driver , Dtran ) ;
2361: LD_VAR 0 4
2365: PPUSH
2366: LD_STRING Dtran
2368: PPUSH
2369: CALL_OW 88
// end ; if ( l = [ 7 , 6 , 5 ] [ dif ] - 1 ) then
2373: LD_VAR 0 3
2377: PUSH
2378: LD_INT 7
2380: PUSH
2381: LD_INT 6
2383: PUSH
2384: LD_INT 5
2386: PUSH
2387: EMPTY
2388: LIST
2389: LIST
2390: LIST
2391: PUSH
2392: LD_EXP 1
2396: ARRAY
2397: PUSH
2398: LD_INT 1
2400: MINUS
2401: EQUAL
2402: IFFALSE 2438
// begin Wait ( 0 0$03 ) ;
2404: LD_INT 105
2406: PPUSH
2407: CALL_OW 67
// driver := IsDrivenBy ( un ) ;
2411: LD_ADDR_VAR 0 4
2415: PUSH
2416: LD_VAR 0 2
2420: PPUSH
2421: CALL_OW 311
2425: ST_TO_ADDR
// Say ( driver , Dtrans ) ;
2426: LD_VAR 0 4
2430: PPUSH
2431: LD_STRING Dtrans
2433: PPUSH
2434: CALL_OW 88
// end ; while ( not IsInArea ( un , rus_exit ) ) do
2438: LD_VAR 0 2
2442: PPUSH
2443: LD_INT 6
2445: PPUSH
2446: CALL_OW 308
2450: NOT
2451: IFFALSE 2477
// begin Wait ( 0 0$01 ) ;
2453: LD_INT 35
2455: PPUSH
2456: CALL_OW 67
// AddComMoveXY ( un , 69 , 97 ) ;
2460: LD_VAR 0 2
2464: PPUSH
2465: LD_INT 69
2467: PPUSH
2468: LD_INT 97
2470: PPUSH
2471: CALL_OW 171
// end ;
2475: GO 2438
// RemoveUnit ( un ) ;
2477: LD_VAR 0 2
2481: PPUSH
2482: CALL_OW 64
// l = l + 1 ;
2486: LD_ADDR_VAR 0 3
2490: PUSH
2491: LD_VAR 0 3
2495: PUSH
2496: LD_INT 1
2498: PLUS
2499: ST_TO_ADDR
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
2500: LD_INT 1155
2502: PPUSH
2503: LD_INT 5355
2505: PPUSH
2506: CALL_OW 12
2510: PPUSH
2511: CALL_OW 67
// end until l = [ 7 , 6 , 5 ] [ dif ] ;
2515: LD_VAR 0 3
2519: PUSH
2520: LD_INT 7
2522: PUSH
2523: LD_INT 6
2525: PUSH
2526: LD_INT 5
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: LIST
2533: PUSH
2534: LD_EXP 1
2538: ARRAY
2539: EQUAL
2540: IFFALSE 2198
// end ; end_of_file
2542: PPOPN 4
2544: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_bazooka and event_rocket = false then
2545: LD_VAR 0 1
2549: PUSH
2550: LD_INT 44
2552: EQUAL
2553: PUSH
2554: LD_EXP 20
2558: PUSH
2559: LD_INT 0
2561: EQUAL
2562: AND
2563: IFFALSE 2709
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) > 0 then
2565: LD_INT 22
2567: PUSH
2568: LD_INT 3
2570: PUSH
2571: EMPTY
2572: LIST
2573: LIST
2574: PUSH
2575: LD_INT 25
2577: PUSH
2578: LD_INT 4
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: PPUSH
2589: CALL_OW 69
2593: PUSH
2594: LD_INT 0
2596: GREATER
2597: IFFALSE 2709
// begin event_rocket := true ;
2599: LD_ADDR_EXP 20
2603: PUSH
2604: LD_INT 1
2606: ST_TO_ADDR
// if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) > 0 then
2607: LD_INT 22
2609: PUSH
2610: LD_INT 3
2612: PUSH
2613: EMPTY
2614: LIST
2615: LIST
2616: PUSH
2617: LD_INT 25
2619: PUSH
2620: LD_INT 4
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: PUSH
2627: LD_INT 26
2629: PUSH
2630: LD_INT 1
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: LIST
2641: PUSH
2642: EMPTY
2643: LIST
2644: PPUSH
2645: CALL_OW 69
2649: PUSH
2650: LD_INT 0
2652: GREATER
2653: IFFALSE 2709
// Say ( FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) [ 1 ] , Dsci2 ) ;
2655: LD_INT 22
2657: PUSH
2658: LD_INT 3
2660: PUSH
2661: EMPTY
2662: LIST
2663: LIST
2664: PUSH
2665: LD_INT 25
2667: PUSH
2668: LD_INT 4
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: PUSH
2675: LD_INT 26
2677: PUSH
2678: LD_INT 1
2680: PUSH
2681: EMPTY
2682: LIST
2683: LIST
2684: PUSH
2685: EMPTY
2686: LIST
2687: LIST
2688: LIST
2689: PUSH
2690: EMPTY
2691: LIST
2692: PPUSH
2693: CALL_OW 69
2697: PUSH
2698: LD_INT 1
2700: ARRAY
2701: PPUSH
2702: LD_STRING Dsci2
2704: PPUSH
2705: CALL_OW 88
// end ; end ;
2709: PPOPN 2
2711: END
// on VehicleConstructed ( un , fac ) do begin SOS_VehicleConstructed ( un , fac ) ;
2712: LD_VAR 0 1
2716: PPUSH
2717: LD_VAR 0 2
2721: PPUSH
2722: CALL 24093 0 2
// if GetSide ( un ) = 3 and GetControl ( un ) = control_computer then
2726: LD_VAR 0 1
2730: PPUSH
2731: CALL_OW 255
2735: PUSH
2736: LD_INT 3
2738: EQUAL
2739: PUSH
2740: LD_VAR 0 1
2744: PPUSH
2745: CALL_OW 263
2749: PUSH
2750: LD_INT 3
2752: EQUAL
2753: AND
2754: IFFALSE 2764
// comp_tested := true ;
2756: LD_ADDR_EXP 22
2760: PUSH
2761: LD_INT 1
2763: ST_TO_ADDR
// end ;
2764: PPOPN 2
2766: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
2767: LD_VAR 0 1
2771: PUSH
2772: LD_INT 22
2774: PUSH
2775: LD_INT 1
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: PUSH
2782: LD_INT 21
2784: PUSH
2785: LD_INT 3
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PPUSH
2796: CALL_OW 69
2800: IN
2801: IFFALSE 2879
// if attacked = false and sikorski_ar = false then
2803: LD_EXP 15
2807: PUSH
2808: LD_INT 0
2810: EQUAL
2811: PUSH
2812: LD_EXP 12
2816: PUSH
2817: LD_INT 0
2819: EQUAL
2820: AND
2821: IFFALSE 2879
// begin attacked := true ;
2823: LD_ADDR_EXP 15
2827: PUSH
2828: LD_INT 1
2830: ST_TO_ADDR
// if IsInUnit ( donald ) then
2831: LD_EXP 13
2835: PPUSH
2836: CALL_OW 310
2840: IFFALSE 2856
// SayRadio ( donald , DGammaF ) else
2842: LD_EXP 13
2846: PPUSH
2847: LD_STRING DGammaF
2849: PPUSH
2850: CALL_OW 94
2854: GO 2879
// if IsInUnit ( van ) then
2856: LD_EXP 14
2860: PPUSH
2861: CALL_OW 310
2865: IFFALSE 2879
// SayRadio ( van , DGammaM ) ;
2867: LD_EXP 14
2871: PPUSH
2872: LD_STRING DGammaM
2874: PPUSH
2875: CALL_OW 94
// end ; if un in FilterAllUnits ( [ f_control , control_remote ] ) then
2879: LD_VAR 0 1
2883: PUSH
2884: LD_INT 33
2886: PUSH
2887: LD_INT 2
2889: PUSH
2890: EMPTY
2891: LIST
2892: LIST
2893: PPUSH
2894: CALL_OW 69
2898: IN
2899: IFFALSE 2910
// ComUnlink ( un ) ;
2901: LD_VAR 0 1
2905: PPUSH
2906: CALL_OW 136
// end ;
2910: PPOPN 1
2912: END
// on ApemanTamed ( ape , sci ) do begin if GetSex ( sci ) = sex_male then
2913: LD_VAR 0 2
2917: PPUSH
2918: CALL_OW 258
2922: PUSH
2923: LD_INT 1
2925: EQUAL
2926: IFFALSE 2940
// Say ( sci , Dsci3 ) ;
2928: LD_VAR 0 2
2932: PPUSH
2933: LD_STRING Dsci3
2935: PPUSH
2936: CALL_OW 88
// end ;
2940: PPOPN 2
2942: END
// on BuildingComplete ( b ) do var i ;
2943: LD_INT 0
2945: PPUSH
// begin if GetBType ( b ) = b_depot and GetSide ( b ) = 3 and depot_rdy = false then
2946: LD_VAR 0 1
2950: PPUSH
2951: CALL_OW 266
2955: PUSH
2956: LD_INT 0
2958: EQUAL
2959: PUSH
2960: LD_VAR 0 1
2964: PPUSH
2965: CALL_OW 255
2969: PUSH
2970: LD_INT 3
2972: EQUAL
2973: AND
2974: PUSH
2975: LD_EXP 6
2979: PUSH
2980: LD_INT 0
2982: EQUAL
2983: AND
2984: IFFALSE 3048
// begin SetBName ( b , kalinin ) ;
2986: LD_VAR 0 1
2990: PPUSH
2991: LD_STRING kalinin
2993: PPUSH
2994: CALL_OW 500
// dep_x := GetX ( b ) ;
2998: LD_ADDR_EXP 7
3002: PUSH
3003: LD_VAR 0 1
3007: PPUSH
3008: CALL_OW 250
3012: ST_TO_ADDR
// dep_y := GetY ( b ) ;
3013: LD_ADDR_EXP 8
3017: PUSH
3018: LD_VAR 0 1
3022: PPUSH
3023: CALL_OW 251
3027: ST_TO_ADDR
// depot_rdy := true ;
3028: LD_ADDR_EXP 6
3032: PUSH
3033: LD_INT 1
3035: ST_TO_ADDR
// SayRadio ( popov , Dpop3 ) ;
3036: LD_EXP 2
3040: PPUSH
3041: LD_STRING Dpop3
3043: PPUSH
3044: CALL_OW 94
// end ; if GetBType ( b ) = b_lab and GetSide ( b ) = 3 and event_comp = false then
3048: LD_VAR 0 1
3052: PPUSH
3053: CALL_OW 266
3057: PUSH
3058: LD_INT 6
3060: EQUAL
3061: PUSH
3062: LD_VAR 0 1
3066: PPUSH
3067: CALL_OW 255
3071: PUSH
3072: LD_INT 3
3074: EQUAL
3075: AND
3076: PUSH
3077: LD_EXP 21
3081: PUSH
3082: LD_INT 0
3084: EQUAL
3085: AND
3086: IFFALSE 3181
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) > 0 then
3088: LD_INT 22
3090: PUSH
3091: LD_INT 3
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: PUSH
3098: LD_INT 25
3100: PUSH
3101: LD_INT 4
3103: PUSH
3104: EMPTY
3105: LIST
3106: LIST
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: PPUSH
3112: CALL_OW 69
3116: PUSH
3117: LD_INT 0
3119: GREATER
3120: IFFALSE 3181
// begin event_comp := true ;
3122: LD_ADDR_EXP 21
3126: PUSH
3127: LD_INT 1
3129: ST_TO_ADDR
// Say ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , Dsci1 ) ;
3130: LD_INT 22
3132: PUSH
3133: LD_INT 3
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: PUSH
3140: LD_INT 25
3142: PUSH
3143: LD_INT 4
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: PUSH
3150: LD_INT 26
3152: PUSH
3153: LD_INT 1
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: LIST
3164: PPUSH
3165: CALL_OW 69
3169: PUSH
3170: LD_INT 1
3172: ARRAY
3173: PPUSH
3174: LD_STRING Dsci1
3176: PPUSH
3177: CALL_OW 88
// end ; if GetBType ( b ) = b_bunker and GetSide ( b ) = 1 then
3181: LD_VAR 0 1
3185: PPUSH
3186: CALL_OW 266
3190: PUSH
3191: LD_INT 32
3193: EQUAL
3194: PUSH
3195: LD_VAR 0 1
3199: PPUSH
3200: CALL_OW 255
3204: PUSH
3205: LD_INT 1
3207: EQUAL
3208: AND
3209: IFFALSE 3274
// begin RaiseSailEvent ( 6 ) ;
3211: LD_INT 6
3213: PPUSH
3214: CALL_OW 427
// AddComPlaceWeapon ( b , gamma_towers [ 4 ] ) ;
3218: LD_VAR 0 1
3222: PPUSH
3223: LD_EXP 18
3227: PUSH
3228: LD_INT 4
3230: ARRAY
3231: PPUSH
3232: CALL_OW 208
// for i = 1 to 4 do
3236: LD_ADDR_VAR 0 2
3240: PUSH
3241: DOUBLE
3242: LD_INT 1
3244: DEC
3245: ST_TO_ADDR
3246: LD_INT 4
3248: PUSH
3249: FOR_TO
3250: IFFALSE 3272
// gamma_towers := Delete ( gamma_towers , 1 ) ;
3252: LD_ADDR_EXP 18
3256: PUSH
3257: LD_EXP 18
3261: PPUSH
3262: LD_INT 1
3264: PPUSH
3265: CALL_OW 3
3269: ST_TO_ADDR
3270: GO 3249
3272: POP
3273: POP
// end ; end ;
3274: PPOPN 2
3276: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3277: LD_VAR 0 1
3281: PPUSH
3282: CALL 23971 0 1
// if un in Patrol then
3286: LD_VAR 0 1
3290: PUSH
3291: LD_EXP 17
3295: IN
3296: IFFALSE 3314
// Patrol := Patrol diff un ;
3298: LD_ADDR_EXP 17
3302: PUSH
3303: LD_EXP 17
3307: PUSH
3308: LD_VAR 0 1
3312: DIFF
3313: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
3314: LD_VAR 0 1
3318: PUSH
3319: LD_INT 22
3321: PUSH
3322: LD_INT 1
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: PUSH
3329: LD_INT 30
3331: PUSH
3332: LD_INT 32
3334: PUSH
3335: EMPTY
3336: LIST
3337: LIST
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PPUSH
3343: CALL_OW 69
3347: IN
3348: IFFALSE 3434
// begin gamma_towers := gamma_towers ^ GetX ( un ) ;
3350: LD_ADDR_EXP 18
3354: PUSH
3355: LD_EXP 18
3359: PUSH
3360: LD_VAR 0 1
3364: PPUSH
3365: CALL_OW 250
3369: ADD
3370: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetY ( un ) ;
3371: LD_ADDR_EXP 18
3375: PUSH
3376: LD_EXP 18
3380: PUSH
3381: LD_VAR 0 1
3385: PPUSH
3386: CALL_OW 251
3390: ADD
3391: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetDir ( un ) ;
3392: LD_ADDR_EXP 18
3396: PUSH
3397: LD_EXP 18
3401: PUSH
3402: LD_VAR 0 1
3406: PPUSH
3407: CALL_OW 254
3411: ADD
3412: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetBWeapon ( un ) ;
3413: LD_ADDR_EXP 18
3417: PUSH
3418: LD_EXP 18
3422: PUSH
3423: LD_VAR 0 1
3427: PPUSH
3428: CALL_OW 269
3432: ADD
3433: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) then
3434: LD_VAR 0 1
3438: PUSH
3439: LD_INT 33
3441: PUSH
3442: LD_INT 2
3444: PUSH
3445: EMPTY
3446: LIST
3447: LIST
3448: PUSH
3449: LD_INT 3
3451: PUSH
3452: LD_INT 34
3454: PUSH
3455: LD_INT 13
3457: PUSH
3458: EMPTY
3459: LIST
3460: LIST
3461: PUSH
3462: EMPTY
3463: LIST
3464: LIST
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: PPUSH
3470: CALL_OW 69
3474: IN
3475: IFFALSE 3491
// new_veh := new_veh + 1 ;
3477: LD_ADDR_EXP 19
3481: PUSH
3482: LD_EXP 19
3486: PUSH
3487: LD_INT 1
3489: PLUS
3490: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_weapon , us_crane ] ) then
3491: LD_VAR 0 1
3495: PUSH
3496: LD_INT 34
3498: PUSH
3499: LD_INT 13
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: PPUSH
3506: CALL_OW 69
3510: IN
3511: IFFALSE 3532
// AddComConstruct ( am_fac , us_medium_tracked , engine_solar , control_remote , us_crane ) ;
3513: LD_INT 26
3515: PPUSH
3516: LD_INT 3
3518: PPUSH
3519: LD_INT 2
3521: PPUSH
3522: LD_INT 2
3524: PPUSH
3525: LD_INT 13
3527: PPUSH
3528: CALL_OW 185
// if un = am_dep then
3532: LD_VAR 0 1
3536: PUSH
3537: LD_INT 25
3539: EQUAL
3540: IFFALSE 3708
// begin SayRadio ( Platonov , DPlat ) ;
3542: LD_EXP 4
3546: PPUSH
3547: LD_STRING DPlat
3549: PPUSH
3550: CALL_OW 94
// if timer <= 30 30$00 then
3554: LD_EXP 24
3558: PUSH
3559: LD_INT 63000
3561: LESSEQUAL
3562: IFFALSE 3576
// AddMedal ( gamma_med3 , 1 ) else
3564: LD_STRING gamma_med3
3566: PPUSH
3567: LD_INT 1
3569: PPUSH
3570: CALL_OW 101
3574: GO 3626
// if timer <= [ 50 50$00 , 42 42$00 , 35 35$00 ] [ dif ] then
3576: LD_EXP 24
3580: PUSH
3581: LD_INT 105000
3583: PUSH
3584: LD_INT 88200
3586: PUSH
3587: LD_INT 73500
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: LIST
3594: PUSH
3595: LD_EXP 1
3599: ARRAY
3600: LESSEQUAL
3601: IFFALSE 3615
// AddMedal ( gamma_med3 , 2 ) else
3603: LD_STRING gamma_med3
3605: PPUSH
3606: LD_INT 2
3608: PPUSH
3609: CALL_OW 101
3613: GO 3626
// AddMedal ( gamma_med3 , - 1 ) ;
3615: LD_STRING gamma_med3
3617: PPUSH
3618: LD_INT 1
3620: NEG
3621: PPUSH
3622: CALL_OW 101
// if not comp_tested then
3626: LD_EXP 22
3630: NOT
3631: IFFALSE 3646
// AddMedal ( gamma_med2 , - 1 ) else
3633: LD_STRING gamma_med2
3635: PPUSH
3636: LD_INT 1
3638: NEG
3639: PPUSH
3640: CALL_OW 101
3644: GO 3656
// AddMedal ( gamma_med2 , 1 ) ;
3646: LD_STRING gamma_med2
3648: PPUSH
3649: LD_INT 1
3651: PPUSH
3652: CALL_OW 101
// if IsDead ( sikorski ) and not sikorski_run then
3656: LD_EXP 9
3660: PPUSH
3661: CALL_OW 301
3665: PUSH
3666: LD_EXP 23
3670: NOT
3671: AND
3672: IFFALSE 3686
// AddMedal ( gamma_med1 , 1 ) else
3674: LD_STRING gamma_med1
3676: PPUSH
3677: LD_INT 1
3679: PPUSH
3680: CALL_OW 101
3684: GO 3697
// AddMedal ( gamma_med1 , - 1 ) ;
3686: LD_STRING gamma_med1
3688: PPUSH
3689: LD_INT 1
3691: NEG
3692: PPUSH
3693: CALL_OW 101
// GiveMedals ( GAMMA_MEDALS ) ;
3697: LD_STRING GAMMA_MEDALS
3699: PPUSH
3700: CALL_OW 102
// YouWin ;
3704: CALL_OW 103
// end ; if un = commander then
3708: LD_VAR 0 1
3712: PUSH
3713: LD_EXP 3
3717: EQUAL
3718: IFFALSE 3727
// YouLost ( comml ) ;
3720: LD_STRING comml
3722: PPUSH
3723: CALL_OW 104
// if un = sikorski then
3727: LD_VAR 0 1
3731: PUSH
3732: LD_EXP 9
3736: EQUAL
3737: IFFALSE 3749
// AddMedal ( gamma_med1 , 1 ) ;
3739: LD_STRING gamma_med1
3741: PPUSH
3742: LD_INT 1
3744: PPUSH
3745: CALL_OW 101
// end ;
3749: PPOPN 1
3751: END
// on SailEvent ( event ) do var i , un , filter , doc , bac , place , engs , crane , b ;
3752: LD_INT 0
3754: PPUSH
3755: PPUSH
3756: PPUSH
3757: PPUSH
3758: PPUSH
3759: PPUSH
3760: PPUSH
3761: PPUSH
3762: PPUSH
// begin if event = 1 then
3763: LD_VAR 0 1
3767: PUSH
3768: LD_INT 1
3770: EQUAL
3771: IFFALSE 4068
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3773: LD_ADDR_VAR 0 4
3777: PUSH
3778: LD_INT 22
3780: PUSH
3781: LD_INT 1
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PUSH
3788: LD_INT 21
3790: PUSH
3791: LD_INT 3
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: PUSH
3798: LD_INT 3
3800: PUSH
3801: LD_INT 24
3803: PUSH
3804: LD_INT 1000
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PUSH
3811: EMPTY
3812: LIST
3813: LIST
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: LIST
3819: PPUSH
3820: CALL_OW 69
3824: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ] ) ;
3825: LD_ADDR_VAR 0 8
3829: PUSH
3830: LD_INT 22
3832: PUSH
3833: LD_INT 1
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: PUSH
3840: LD_INT 25
3842: PUSH
3843: LD_INT 2
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: PUSH
3850: LD_INT 24
3852: PUSH
3853: LD_INT 1000
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: PUSH
3860: EMPTY
3861: LIST
3862: LIST
3863: LIST
3864: PUSH
3865: EMPTY
3866: LIST
3867: PPUSH
3868: CALL_OW 69
3872: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) ;
3873: LD_ADDR_VAR 0 9
3877: PUSH
3878: LD_INT 22
3880: PUSH
3881: LD_INT 1
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: PUSH
3888: LD_INT 34
3890: PUSH
3891: LD_INT 13
3893: PUSH
3894: EMPTY
3895: LIST
3896: LIST
3897: PUSH
3898: EMPTY
3899: LIST
3900: LIST
3901: PPUSH
3902: CALL_OW 69
3906: ST_TO_ADDR
// if engs > 0 then
3907: LD_VAR 0 8
3911: PUSH
3912: LD_INT 0
3914: GREATER
3915: IFFALSE 4020
// for i = 1 to engs do
3917: LD_ADDR_VAR 0 2
3921: PUSH
3922: DOUBLE
3923: LD_INT 1
3925: DEC
3926: ST_TO_ADDR
3927: LD_VAR 0 8
3931: PUSH
3932: FOR_TO
3933: IFFALSE 4018
// begin if IsInUnit ( engs [ i ] ) then
3935: LD_VAR 0 8
3939: PUSH
3940: LD_VAR 0 2
3944: ARRAY
3945: PPUSH
3946: CALL_OW 310
3950: IFFALSE 3967
// ComExitBuilding ( engs [ i ] ) ;
3952: LD_VAR 0 8
3956: PUSH
3957: LD_VAR 0 2
3961: ARRAY
3962: PPUSH
3963: CALL_OW 122
// Wait ( 0 0$0.2 ) ;
3967: LD_INT 7
3969: PPUSH
3970: CALL_OW 67
// if not HasTask ( engs [ i ] ) then
3974: LD_VAR 0 8
3978: PUSH
3979: LD_VAR 0 2
3983: ARRAY
3984: PPUSH
3985: CALL_OW 314
3989: NOT
3990: IFFALSE 4016
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
3992: LD_VAR 0 8
3996: PUSH
3997: LD_VAR 0 2
4001: ARRAY
4002: PPUSH
4003: LD_VAR 0 4
4007: PUSH
4008: LD_INT 1
4010: ARRAY
4011: PPUSH
4012: CALL_OW 130
// end ;
4016: GO 3932
4018: POP
4019: POP
// if crane > 0 then
4020: LD_VAR 0 9
4024: PUSH
4025: LD_INT 0
4027: GREATER
4028: IFFALSE 4068
// if not HasTask ( crane [ 1 ] ) then
4030: LD_VAR 0 9
4034: PUSH
4035: LD_INT 1
4037: ARRAY
4038: PPUSH
4039: CALL_OW 314
4043: NOT
4044: IFFALSE 4068
// ComRepairBuilding ( crane [ 1 ] , filter [ 1 ] ) ;
4046: LD_VAR 0 9
4050: PUSH
4051: LD_INT 1
4053: ARRAY
4054: PPUSH
4055: LD_VAR 0 4
4059: PUSH
4060: LD_INT 1
4062: ARRAY
4063: PPUSH
4064: CALL_OW 130
// end ; if event = 2 then
4068: LD_VAR 0 1
4072: PUSH
4073: LD_INT 2
4075: EQUAL
4076: IFFALSE 4198
// begin engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
4078: LD_ADDR_VAR 0 8
4082: PUSH
4083: LD_INT 22
4085: PUSH
4086: LD_INT 1
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: PUSH
4093: LD_INT 25
4095: PUSH
4096: LD_INT 2
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: PUSH
4103: EMPTY
4104: LIST
4105: LIST
4106: PPUSH
4107: CALL_OW 69
4111: ST_TO_ADDR
// if engs > 0 then
4112: LD_VAR 0 8
4116: PUSH
4117: LD_INT 0
4119: GREATER
4120: IFFALSE 4198
// for i = 1 to engs do
4122: LD_ADDR_VAR 0 2
4126: PUSH
4127: DOUBLE
4128: LD_INT 1
4130: DEC
4131: ST_TO_ADDR
4132: LD_VAR 0 8
4136: PUSH
4137: FOR_TO
4138: IFFALSE 4196
// if not HasTask ( engs [ i ] ) and not IsInUnit ( engs [ i ] ) then
4140: LD_VAR 0 8
4144: PUSH
4145: LD_VAR 0 2
4149: ARRAY
4150: PPUSH
4151: CALL_OW 314
4155: NOT
4156: PUSH
4157: LD_VAR 0 8
4161: PUSH
4162: LD_VAR 0 2
4166: ARRAY
4167: PPUSH
4168: CALL_OW 310
4172: NOT
4173: AND
4174: IFFALSE 4194
// ComEnterUnit ( engs [ i ] , am_dep ) ;
4176: LD_VAR 0 8
4180: PUSH
4181: LD_VAR 0 2
4185: ARRAY
4186: PPUSH
4187: LD_INT 25
4189: PPUSH
4190: CALL_OW 120
4194: GO 4137
4196: POP
4197: POP
// end ; if event = 3 then
4198: LD_VAR 0 1
4202: PUSH
4203: LD_INT 3
4205: EQUAL
4206: IFFALSE 4570
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_class , 4 ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
4208: LD_ADDR_VAR 0 4
4212: PUSH
4213: LD_INT 22
4215: PUSH
4216: LD_INT 1
4218: PUSH
4219: EMPTY
4220: LIST
4221: LIST
4222: PUSH
4223: LD_INT 21
4225: PUSH
4226: LD_INT 1
4228: PUSH
4229: EMPTY
4230: LIST
4231: LIST
4232: PUSH
4233: LD_INT 3
4235: PUSH
4236: LD_INT 25
4238: PUSH
4239: LD_INT 4
4241: PUSH
4242: EMPTY
4243: LIST
4244: LIST
4245: PUSH
4246: EMPTY
4247: LIST
4248: LIST
4249: PUSH
4250: LD_INT 3
4252: PUSH
4253: LD_INT 24
4255: PUSH
4256: LD_INT 800
4258: PUSH
4259: EMPTY
4260: LIST
4261: LIST
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: LIST
4271: LIST
4272: PUSH
4273: EMPTY
4274: LIST
4275: PPUSH
4276: CALL_OW 69
4280: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
4281: LD_ADDR_VAR 0 5
4285: PUSH
4286: LD_INT 22
4288: PUSH
4289: LD_INT 1
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: PUSH
4296: LD_INT 25
4298: PUSH
4299: LD_INT 4
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: PPUSH
4310: CALL_OW 69
4314: ST_TO_ADDR
// if filter > 0 then
4315: LD_VAR 0 4
4319: PUSH
4320: LD_INT 0
4322: GREATER
4323: IFFALSE 4512
// begin for i = 1 to doc do
4325: LD_ADDR_VAR 0 2
4329: PUSH
4330: DOUBLE
4331: LD_INT 1
4333: DEC
4334: ST_TO_ADDR
4335: LD_VAR 0 5
4339: PUSH
4340: FOR_TO
4341: IFFALSE 4441
// begin if IsInUnit ( doc [ i ] ) then
4343: LD_VAR 0 5
4347: PUSH
4348: LD_VAR 0 2
4352: ARRAY
4353: PPUSH
4354: CALL_OW 310
4358: IFFALSE 4375
// ComExitBuilding ( doc [ i ] ) ;
4360: LD_VAR 0 5
4364: PUSH
4365: LD_VAR 0 2
4369: ARRAY
4370: PPUSH
4371: CALL_OW 122
// if GetDistUnits ( filter [ 1 ] , am_lab ) < 10 and not HasTask ( doc [ i ] ) then
4375: LD_VAR 0 4
4379: PUSH
4380: LD_INT 1
4382: ARRAY
4383: PPUSH
4384: LD_INT 46
4386: PPUSH
4387: CALL_OW 296
4391: PUSH
4392: LD_INT 10
4394: LESS
4395: PUSH
4396: LD_VAR 0 5
4400: PUSH
4401: LD_VAR 0 2
4405: ARRAY
4406: PPUSH
4407: CALL_OW 314
4411: NOT
4412: AND
4413: IFFALSE 4439
// ComHeal ( doc [ i ] , filter [ 1 ] ) ;
4415: LD_VAR 0 5
4419: PUSH
4420: LD_VAR 0 2
4424: ARRAY
4425: PPUSH
4426: LD_VAR 0 4
4430: PUSH
4431: LD_INT 1
4433: ARRAY
4434: PPUSH
4435: CALL_OW 128
// end ;
4439: GO 4340
4441: POP
4442: POP
// for i = 1 to filter do
4443: LD_ADDR_VAR 0 2
4447: PUSH
4448: DOUBLE
4449: LD_INT 1
4451: DEC
4452: ST_TO_ADDR
4453: LD_VAR 0 4
4457: PUSH
4458: FOR_TO
4459: IFFALSE 4508
// if GetDistUnits ( filter [ i ] , am_lab ) > 10 then
4461: LD_VAR 0 4
4465: PUSH
4466: LD_VAR 0 2
4470: ARRAY
4471: PPUSH
4472: LD_INT 46
4474: PPUSH
4475: CALL_OW 296
4479: PUSH
4480: LD_INT 10
4482: GREATER
4483: IFFALSE 4506
// ComMoveXY ( filter [ i ] , 47 , 12 ) ;
4485: LD_VAR 0 4
4489: PUSH
4490: LD_VAR 0 2
4494: ARRAY
4495: PPUSH
4496: LD_INT 47
4498: PPUSH
4499: LD_INT 12
4501: PPUSH
4502: CALL_OW 111
4506: GO 4458
4508: POP
4509: POP
// end else
4510: GO 4570
// for i = 1 to doc do
4512: LD_ADDR_VAR 0 2
4516: PUSH
4517: DOUBLE
4518: LD_INT 1
4520: DEC
4521: ST_TO_ADDR
4522: LD_VAR 0 5
4526: PUSH
4527: FOR_TO
4528: IFFALSE 4568
// if not IsInUnit ( doc [ i ] ) then
4530: LD_VAR 0 5
4534: PUSH
4535: LD_VAR 0 2
4539: ARRAY
4540: PPUSH
4541: CALL_OW 310
4545: NOT
4546: IFFALSE 4566
// ComEnterUnit ( doc [ i ] , am_lab ) ;
4548: LD_VAR 0 5
4552: PUSH
4553: LD_VAR 0 2
4557: ARRAY
4558: PPUSH
4559: LD_INT 46
4561: PPUSH
4562: CALL_OW 120
4566: GO 4527
4568: POP
4569: POP
// end ; if event = 4 then
4570: LD_VAR 0 1
4574: PUSH
4575: LD_INT 4
4577: EQUAL
4578: IFFALSE 4829
// begin bac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
4580: LD_ADDR_VAR 0 6
4584: PUSH
4585: LD_INT 22
4587: PUSH
4588: LD_INT 1
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PUSH
4595: LD_INT 30
4597: PUSH
4598: LD_INT 5
4600: PUSH
4601: EMPTY
4602: LIST
4603: LIST
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: PPUSH
4609: CALL_OW 69
4613: ST_TO_ADDR
// for i = 1 to bac do
4614: LD_ADDR_VAR 0 2
4618: PUSH
4619: DOUBLE
4620: LD_INT 1
4622: DEC
4623: ST_TO_ADDR
4624: LD_VAR 0 6
4628: PUSH
4629: FOR_TO
4630: IFFALSE 4671
// if UnitsInside ( bac [ i ] ) < 6 then
4632: LD_VAR 0 6
4636: PUSH
4637: LD_VAR 0 2
4641: ARRAY
4642: PPUSH
4643: CALL_OW 313
4647: PUSH
4648: LD_INT 6
4650: LESS
4651: IFFALSE 4669
// place := bac [ i ] ;
4653: LD_ADDR_VAR 0 7
4657: PUSH
4658: LD_VAR 0 6
4662: PUSH
4663: LD_VAR 0 2
4667: ARRAY
4668: ST_TO_ADDR
4669: GO 4629
4671: POP
4672: POP
// if place then
4673: LD_VAR 0 7
4677: IFFALSE 4829
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] ] , [ f_lives , 1000 ] ] ] ) diff Patrol ;
4679: LD_ADDR_VAR 0 4
4683: PUSH
4684: LD_INT 22
4686: PUSH
4687: LD_INT 1
4689: PUSH
4690: EMPTY
4691: LIST
4692: LIST
4693: PUSH
4694: LD_INT 2
4696: PUSH
4697: LD_INT 25
4699: PUSH
4700: LD_INT 1
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: PUSH
4707: LD_INT 25
4709: PUSH
4710: LD_INT 5
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: PUSH
4717: EMPTY
4718: LIST
4719: LIST
4720: LIST
4721: PUSH
4722: LD_INT 24
4724: PUSH
4725: LD_INT 1000
4727: PUSH
4728: EMPTY
4729: LIST
4730: LIST
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: LIST
4736: PUSH
4737: EMPTY
4738: LIST
4739: PPUSH
4740: CALL_OW 69
4744: PUSH
4745: LD_EXP 17
4749: DIFF
4750: ST_TO_ADDR
// for i = 1 to filter do
4751: LD_ADDR_VAR 0 2
4755: PUSH
4756: DOUBLE
4757: LD_INT 1
4759: DEC
4760: ST_TO_ADDR
4761: LD_VAR 0 4
4765: PUSH
4766: FOR_TO
4767: IFFALSE 4827
// if not IsInUnit ( filter [ i ] ) and not HasTask ( filter [ i ] ) then
4769: LD_VAR 0 4
4773: PUSH
4774: LD_VAR 0 2
4778: ARRAY
4779: PPUSH
4780: CALL_OW 310
4784: NOT
4785: PUSH
4786: LD_VAR 0 4
4790: PUSH
4791: LD_VAR 0 2
4795: ARRAY
4796: PPUSH
4797: CALL_OW 314
4801: NOT
4802: AND
4803: IFFALSE 4825
// ComEnterUnit ( filter [ i ] , place ) ;
4805: LD_VAR 0 4
4809: PUSH
4810: LD_VAR 0 2
4814: ARRAY
4815: PPUSH
4816: LD_VAR 0 7
4820: PPUSH
4821: CALL_OW 120
4825: GO 4766
4827: POP
4828: POP
// end ; end ; if event = 5 then
4829: LD_VAR 0 1
4833: PUSH
4834: LD_INT 5
4836: EQUAL
4837: IFFALSE 4991
// begin if FilterUnitsInArea ( am_sec , [ f_enemy , 1 ] ) = 0 then
4839: LD_INT 12
4841: PPUSH
4842: LD_INT 81
4844: PUSH
4845: LD_INT 1
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: PPUSH
4852: CALL_OW 70
4856: PUSH
4857: LD_INT 0
4859: EQUAL
4860: IFFALSE 4991
// begin engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
4862: LD_ADDR_VAR 0 8
4866: PUSH
4867: LD_INT 22
4869: PUSH
4870: LD_INT 1
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: PUSH
4877: LD_INT 25
4879: PUSH
4880: LD_INT 2
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PPUSH
4891: CALL_OW 69
4895: ST_TO_ADDR
// if engs > 0 then
4896: LD_VAR 0 8
4900: PUSH
4901: LD_INT 0
4903: GREATER
4904: IFFALSE 4991
// for i = 1 to engs do
4906: LD_ADDR_VAR 0 2
4910: PUSH
4911: DOUBLE
4912: LD_INT 1
4914: DEC
4915: ST_TO_ADDR
4916: LD_VAR 0 8
4920: PUSH
4921: FOR_TO
4922: IFFALSE 4989
// if not HasTask ( engs [ i ] ) then
4924: LD_VAR 0 8
4928: PUSH
4929: LD_VAR 0 2
4933: ARRAY
4934: PPUSH
4935: CALL_OW 314
4939: NOT
4940: IFFALSE 4987
// ComBuild ( engs [ i ] , b_bunker , gamma_towers [ 1 ] , gamma_towers [ 2 ] , gamma_towers [ 3 ] ) ;
4942: LD_VAR 0 8
4946: PUSH
4947: LD_VAR 0 2
4951: ARRAY
4952: PPUSH
4953: LD_INT 32
4955: PPUSH
4956: LD_EXP 18
4960: PUSH
4961: LD_INT 1
4963: ARRAY
4964: PPUSH
4965: LD_EXP 18
4969: PUSH
4970: LD_INT 2
4972: ARRAY
4973: PPUSH
4974: LD_EXP 18
4978: PUSH
4979: LD_INT 3
4981: ARRAY
4982: PPUSH
4983: CALL_OW 145
4987: GO 4921
4989: POP
4990: POP
// end ; end ; if event = 6 then
4991: LD_VAR 0 1
4995: PUSH
4996: LD_INT 6
4998: EQUAL
4999: IFFALSE 5183
// begin bac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
5001: LD_ADDR_VAR 0 6
5005: PUSH
5006: LD_INT 22
5008: PUSH
5009: LD_INT 1
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: PUSH
5016: LD_INT 30
5018: PUSH
5019: LD_INT 5
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: PPUSH
5030: CALL_OW 69
5034: ST_TO_ADDR
// if bac and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ] ) > 0 then
5035: LD_VAR 0 6
5039: PUSH
5040: LD_INT 22
5042: PUSH
5043: LD_INT 1
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: PUSH
5050: LD_INT 30
5052: PUSH
5053: LD_INT 32
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: PUSH
5060: LD_INT 58
5062: PUSH
5063: EMPTY
5064: LIST
5065: PUSH
5066: EMPTY
5067: LIST
5068: LIST
5069: LIST
5070: PUSH
5071: EMPTY
5072: LIST
5073: PPUSH
5074: CALL_OW 69
5078: PUSH
5079: LD_INT 0
5081: GREATER
5082: AND
5083: IFFALSE 5183
// begin b := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ] ) [ 1 ] ;
5085: LD_ADDR_VAR 0 10
5089: PUSH
5090: LD_INT 22
5092: PUSH
5093: LD_INT 1
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: PUSH
5100: LD_INT 30
5102: PUSH
5103: LD_INT 32
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: PUSH
5110: LD_INT 58
5112: PUSH
5113: EMPTY
5114: LIST
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: LIST
5120: PUSH
5121: EMPTY
5122: LIST
5123: PPUSH
5124: CALL_OW 69
5128: PUSH
5129: LD_INT 1
5131: ARRAY
5132: ST_TO_ADDR
// un := UnitsInside ( bac [ 1 ] ) ;
5133: LD_ADDR_VAR 0 3
5137: PUSH
5138: LD_VAR 0 6
5142: PUSH
5143: LD_INT 1
5145: ARRAY
5146: PPUSH
5147: CALL_OW 313
5151: ST_TO_ADDR
// ComExitBuilding ( un [ 1 ] ) ;
5152: LD_VAR 0 3
5156: PUSH
5157: LD_INT 1
5159: ARRAY
5160: PPUSH
5161: CALL_OW 122
// AddComEnterUnit ( un [ 1 ] , b ) ;
5165: LD_VAR 0 3
5169: PUSH
5170: LD_INT 1
5172: ARRAY
5173: PPUSH
5174: LD_VAR 0 10
5178: PPUSH
5179: CALL_OW 180
// end ; end ; end ;
5183: PPOPN 10
5185: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 3 then
5186: LD_VAR 0 1
5190: PUSH
5191: LD_INT 1
5193: EQUAL
5194: PUSH
5195: LD_VAR 0 2
5199: PUSH
5200: LD_INT 3
5202: EQUAL
5203: AND
5204: IFFALSE 5214
// contact_am := true ;
5206: LD_ADDR_EXP 16
5210: PUSH
5211: LD_INT 1
5213: ST_TO_ADDR
// end ;
5214: PPOPN 2
5216: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5217: LD_VAR 0 1
5221: PPUSH
5222: LD_VAR 0 2
5226: PPUSH
5227: LD_VAR 0 3
5231: PPUSH
5232: CALL 24069 0 3
// end ;
5236: PPOPN 3
5238: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5239: LD_VAR 0 1
5243: PPUSH
5244: CALL 24077 0 1
// end ; end_of_file
5248: PPOPN 1
5250: END
// export Sikorski , Game_Started , SForce , Sikorski_Ar , Donald , Van , attacked , contact_am ; export patrol ; export gamma_towers ; export function PrepareAmerican ; var i , un , b , skill , weapons , sol , lw ; begin
5251: LD_INT 0
5253: PPUSH
5254: PPUSH
5255: PPUSH
5256: PPUSH
5257: PPUSH
5258: PPUSH
5259: PPUSH
5260: PPUSH
// skill := [ 5 , 6 , 7 ] [ dif ] ;
5261: LD_ADDR_VAR 0 5
5265: PUSH
5266: LD_INT 5
5268: PUSH
5269: LD_INT 6
5271: PUSH
5272: LD_INT 7
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: LIST
5279: PUSH
5280: LD_EXP 1
5284: ARRAY
5285: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_gatling_gun , us_gatling_gun , us_double_gun , us_double_gun , us_double_gun , us_heavy_gun ] ;
5286: LD_ADDR_VAR 0 6
5290: PUSH
5291: LD_INT 4
5293: PUSH
5294: LD_INT 4
5296: PUSH
5297: LD_INT 4
5299: PUSH
5300: LD_INT 5
5302: PUSH
5303: LD_INT 5
5305: PUSH
5306: LD_INT 5
5308: PUSH
5309: LD_INT 6
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: LIST
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: ST_TO_ADDR
// SForce := [ ] ;
5321: LD_ADDR_EXP 11
5325: PUSH
5326: EMPTY
5327: ST_TO_ADDR
// Sikorski_Ar := false ;
5328: LD_ADDR_EXP 12
5332: PUSH
5333: LD_INT 0
5335: ST_TO_ADDR
// attacked := false ;
5336: LD_ADDR_EXP 15
5340: PUSH
5341: LD_INT 0
5343: ST_TO_ADDR
// contact_am := false ;
5344: LD_ADDR_EXP 16
5348: PUSH
5349: LD_INT 0
5351: ST_TO_ADDR
// patrol := [ ] ;
5352: LD_ADDR_EXP 17
5356: PUSH
5357: EMPTY
5358: ST_TO_ADDR
// gamma_towers := [ ] ;
5359: LD_ADDR_EXP 18
5363: PUSH
5364: EMPTY
5365: ST_TO_ADDR
// SetBName ( am_dep , gamma ) ;
5366: LD_INT 25
5368: PPUSH
5369: LD_STRING gamma
5371: PPUSH
5372: CALL_OW 500
// uc_side := 1 ;
5376: LD_ADDR_OWVAR 20
5380: PUSH
5381: LD_INT 1
5383: ST_TO_ADDR
// uc_nation := 1 ;
5384: LD_ADDR_OWVAR 21
5388: PUSH
5389: LD_INT 1
5391: ST_TO_ADDR
// hc_importance := 0 ;
5392: LD_ADDR_OWVAR 32
5396: PUSH
5397: LD_INT 0
5399: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
5400: LD_ADDR_OWVAR 26
5404: PUSH
5405: LD_STRING Jeremy Sikorski
5407: ST_TO_ADDR
// hc_gallery := us ;
5408: LD_ADDR_OWVAR 33
5412: PUSH
5413: LD_STRING us
5415: ST_TO_ADDR
// hc_face_number := 19 ;
5416: LD_ADDR_OWVAR 34
5420: PUSH
5421: LD_INT 19
5423: ST_TO_ADDR
// hc_skills := [ Rand ( skill , skill + 2 ) , 4 , 6 , 3 ] ;
5424: LD_ADDR_OWVAR 31
5428: PUSH
5429: LD_VAR 0 5
5433: PPUSH
5434: LD_VAR 0 5
5438: PUSH
5439: LD_INT 2
5441: PLUS
5442: PPUSH
5443: CALL_OW 12
5447: PUSH
5448: LD_INT 4
5450: PUSH
5451: LD_INT 6
5453: PUSH
5454: LD_INT 3
5456: PUSH
5457: EMPTY
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: ST_TO_ADDR
// hc_sex := sex_male ;
5463: LD_ADDR_OWVAR 27
5467: PUSH
5468: LD_INT 1
5470: ST_TO_ADDR
// hc_class := 1 ;
5471: LD_ADDR_OWVAR 28
5475: PUSH
5476: LD_INT 1
5478: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
5479: LD_ADDR_OWVAR 29
5483: PUSH
5484: LD_INT 10
5486: PUSH
5487: LD_INT 11
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: ST_TO_ADDR
// sikorski := CreateHuman ;
5494: LD_ADDR_EXP 9
5498: PUSH
5499: CALL_OW 44
5503: ST_TO_ADDR
// hc_name := Lucy Donaldson ;
5504: LD_ADDR_OWVAR 26
5508: PUSH
5509: LD_STRING Lucy Donaldson
5511: ST_TO_ADDR
// hc_gallery := us ;
5512: LD_ADDR_OWVAR 33
5516: PUSH
5517: LD_STRING us
5519: ST_TO_ADDR
// hc_face_number := 2 ;
5520: LD_ADDR_OWVAR 34
5524: PUSH
5525: LD_INT 2
5527: ST_TO_ADDR
// hc_skills := [ Rand ( skill , skill + 2 ) , 6 , 4 , 2 ] ;
5528: LD_ADDR_OWVAR 31
5532: PUSH
5533: LD_VAR 0 5
5537: PPUSH
5538: LD_VAR 0 5
5542: PUSH
5543: LD_INT 2
5545: PLUS
5546: PPUSH
5547: CALL_OW 12
5551: PUSH
5552: LD_INT 6
5554: PUSH
5555: LD_INT 4
5557: PUSH
5558: LD_INT 2
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: LIST
5565: LIST
5566: ST_TO_ADDR
// hc_sex := sex_female ;
5567: LD_ADDR_OWVAR 27
5571: PUSH
5572: LD_INT 2
5574: ST_TO_ADDR
// hc_class := 1 ;
5575: LD_ADDR_OWVAR 28
5579: PUSH
5580: LD_INT 1
5582: ST_TO_ADDR
// donald := CreateHuman ;
5583: LD_ADDR_EXP 13
5587: PUSH
5588: CALL_OW 44
5592: ST_TO_ADDR
// hc_name := Peter Van Houten ;
5593: LD_ADDR_OWVAR 26
5597: PUSH
5598: LD_STRING Peter Van Houten
5600: ST_TO_ADDR
// hc_gallery := us ;
5601: LD_ADDR_OWVAR 33
5605: PUSH
5606: LD_STRING us
5608: ST_TO_ADDR
// hc_face_number := 16 ;
5609: LD_ADDR_OWVAR 34
5613: PUSH
5614: LD_INT 16
5616: ST_TO_ADDR
// hc_sex := sex_male ;
5617: LD_ADDR_OWVAR 27
5621: PUSH
5622: LD_INT 1
5624: ST_TO_ADDR
// van := CreateHuman ;
5625: LD_ADDR_EXP 14
5629: PUSH
5630: CALL_OW 44
5634: ST_TO_ADDR
// hc_importance := 0 ;
5635: LD_ADDR_OWVAR 32
5639: PUSH
5640: LD_INT 0
5642: ST_TO_ADDR
// case dif of 1 :
5643: LD_EXP 1
5647: PUSH
5648: LD_INT 1
5650: DOUBLE
5651: EQUAL
5652: IFTRUE 5656
5654: GO 5667
5656: POP
// lw = 1 ; 2 :
5657: LD_ADDR_VAR 0 8
5661: PUSH
5662: LD_INT 1
5664: ST_TO_ADDR
5665: GO 5714
5667: LD_INT 2
5669: DOUBLE
5670: EQUAL
5671: IFTRUE 5675
5673: GO 5694
5675: POP
// lw = Rand ( 1 , 2 ) ; 3 :
5676: LD_ADDR_VAR 0 8
5680: PUSH
5681: LD_INT 1
5683: PPUSH
5684: LD_INT 2
5686: PPUSH
5687: CALL_OW 12
5691: ST_TO_ADDR
5692: GO 5714
5694: LD_INT 3
5696: DOUBLE
5697: EQUAL
5698: IFTRUE 5702
5700: GO 5713
5702: POP
// lw = 2 ; end ;
5703: LD_ADDR_VAR 0 8
5707: PUSH
5708: LD_INT 2
5710: ST_TO_ADDR
5711: GO 5714
5713: POP
// case lw of 1 :
5714: LD_VAR 0 8
5718: PUSH
5719: LD_INT 1
5721: DOUBLE
5722: EQUAL
5723: IFTRUE 5727
5725: GO 5742
5727: POP
// PlaceHumanInUnit ( donald , am_dep ) ; 2 :
5728: LD_EXP 13
5732: PPUSH
5733: LD_INT 25
5735: PPUSH
5736: CALL_OW 52
5740: GO 5766
5742: LD_INT 2
5744: DOUBLE
5745: EQUAL
5746: IFTRUE 5750
5748: GO 5765
5750: POP
// PlaceHumanInUnit ( van , am_dep ) ; end ;
5751: LD_EXP 14
5755: PPUSH
5756: LD_INT 25
5758: PPUSH
5759: CALL_OW 52
5763: GO 5766
5765: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
5766: LD_ADDR_VAR 0 2
5770: PUSH
5771: LD_INT 22
5773: PUSH
5774: LD_INT 1
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: PUSH
5781: LD_INT 30
5783: PUSH
5784: LD_INT 32
5786: PUSH
5787: EMPTY
5788: LIST
5789: LIST
5790: PUSH
5791: EMPTY
5792: LIST
5793: LIST
5794: PPUSH
5795: CALL_OW 69
5799: PUSH
5800: FOR_IN
5801: IFFALSE 5855
// begin PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
5803: LD_INT 1
5805: PPUSH
5806: LD_VAR 0 5
5810: PPUSH
5811: CALL 734 0 2
5815: PPUSH
5816: LD_VAR 0 2
5820: PPUSH
5821: CALL_OW 52
// PlaceWeaponTurret ( i , weapons [ Rand ( 1 , weapons ) ] ) ;
5825: LD_VAR 0 2
5829: PPUSH
5830: LD_VAR 0 6
5834: PUSH
5835: LD_INT 1
5837: PPUSH
5838: LD_VAR 0 6
5842: PPUSH
5843: CALL_OW 12
5847: ARRAY
5848: PPUSH
5849: CALL_OW 431
// end ;
5853: GO 5800
5855: POP
5856: POP
// sol := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , class_soldier ] , [ class_sniper ] ] ] ) ;
5857: LD_ADDR_VAR 0 7
5861: PUSH
5862: LD_INT 22
5864: PUSH
5865: LD_INT 1
5867: PUSH
5868: EMPTY
5869: LIST
5870: LIST
5871: PUSH
5872: LD_INT 2
5874: PUSH
5875: LD_INT 25
5877: PUSH
5878: LD_INT 1
5880: PUSH
5881: EMPTY
5882: LIST
5883: LIST
5884: PUSH
5885: LD_INT 5
5887: PUSH
5888: EMPTY
5889: LIST
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: LIST
5895: PUSH
5896: EMPTY
5897: LIST
5898: LIST
5899: PPUSH
5900: CALL_OW 69
5904: ST_TO_ADDR
// for i = 1 to sol do
5905: LD_ADDR_VAR 0 2
5909: PUSH
5910: DOUBLE
5911: LD_INT 1
5913: DEC
5914: ST_TO_ADDR
5915: LD_VAR 0 7
5919: PUSH
5920: FOR_TO
5921: IFFALSE 5943
// SetTag ( sol [ i ] , 1 ) ;
5923: LD_VAR 0 7
5927: PUSH
5928: LD_VAR 0 2
5932: ARRAY
5933: PPUSH
5934: LD_INT 1
5936: PPUSH
5937: CALL_OW 109
5941: GO 5920
5943: POP
5944: POP
// for i = 1 to 3 do
5945: LD_ADDR_VAR 0 2
5949: PUSH
5950: DOUBLE
5951: LD_INT 1
5953: DEC
5954: ST_TO_ADDR
5955: LD_INT 3
5957: PUSH
5958: FOR_TO
5959: IFFALSE 5983
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , am_ct ) ;
5961: LD_INT 3
5963: PPUSH
5964: LD_VAR 0 5
5968: PPUSH
5969: CALL 734 0 2
5973: PPUSH
5974: LD_INT 56
5976: PPUSH
5977: CALL_OW 52
5981: GO 5958
5983: POP
5984: POP
// for i = 1 to 6 do
5985: LD_ADDR_VAR 0 2
5989: PUSH
5990: DOUBLE
5991: LD_INT 1
5993: DEC
5994: ST_TO_ADDR
5995: LD_INT 6
5997: PUSH
5998: FOR_TO
5999: IFFALSE 6023
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , am_fac ) ;
6001: LD_INT 3
6003: PPUSH
6004: LD_VAR 0 5
6008: PPUSH
6009: CALL 734 0 2
6013: PPUSH
6014: LD_INT 26
6016: PPUSH
6017: CALL_OW 52
6021: GO 5998
6023: POP
6024: POP
// for i = 1 to 5 do
6025: LD_ADDR_VAR 0 2
6029: PUSH
6030: DOUBLE
6031: LD_INT 1
6033: DEC
6034: ST_TO_ADDR
6035: LD_INT 5
6037: PUSH
6038: FOR_TO
6039: IFFALSE 6066
// PlaceUnitArea ( CreateHumanWithClass ( 2 , skill ) , am_base , false ) ;
6041: LD_INT 2
6043: PPUSH
6044: LD_VAR 0 5
6048: PPUSH
6049: CALL 734 0 2
6053: PPUSH
6054: LD_INT 7
6056: PPUSH
6057: LD_INT 0
6059: PPUSH
6060: CALL_OW 49
6064: GO 6038
6066: POP
6067: POP
// for i = 1 to 3 do
6068: LD_ADDR_VAR 0 2
6072: PUSH
6073: DOUBLE
6074: LD_INT 1
6076: DEC
6077: ST_TO_ADDR
6078: LD_INT 3
6080: PUSH
6081: FOR_TO
6082: IFFALSE 6106
// PlaceHumanInUnit ( CreateHumanWithClass ( 4 , skill ) , am_lab ) ;
6084: LD_INT 4
6086: PPUSH
6087: LD_VAR 0 5
6091: PPUSH
6092: CALL 734 0 2
6096: PPUSH
6097: LD_INT 46
6099: PPUSH
6100: CALL_OW 52
6104: GO 6081
6106: POP
6107: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) do
6108: LD_ADDR_VAR 0 2
6112: PUSH
6113: LD_INT 22
6115: PUSH
6116: LD_INT 1
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PUSH
6123: LD_INT 30
6125: PUSH
6126: LD_INT 5
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: PPUSH
6137: CALL_OW 69
6141: PUSH
6142: FOR_IN
6143: IFFALSE 6257
// begin PlaceHumanInUnit ( CreateHumanWithClass ( class_sniper , skill ) , i ) ;
6145: LD_INT 5
6147: PPUSH
6148: LD_VAR 0 5
6152: PPUSH
6153: CALL 734 0 2
6157: PPUSH
6158: LD_VAR 0 2
6162: PPUSH
6163: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( class_sniper , skill ) , i ) ;
6167: LD_INT 5
6169: PPUSH
6170: LD_VAR 0 5
6174: PPUSH
6175: CALL 734 0 2
6179: PPUSH
6180: LD_VAR 0 2
6184: PPUSH
6185: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6189: LD_INT 1
6191: PPUSH
6192: LD_VAR 0 5
6196: PPUSH
6197: CALL 734 0 2
6201: PPUSH
6202: LD_VAR 0 2
6206: PPUSH
6207: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6211: LD_INT 1
6213: PPUSH
6214: LD_VAR 0 5
6218: PPUSH
6219: CALL 734 0 2
6223: PPUSH
6224: LD_VAR 0 2
6228: PPUSH
6229: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6233: LD_INT 1
6235: PPUSH
6236: LD_VAR 0 5
6240: PPUSH
6241: CALL 734 0 2
6245: PPUSH
6246: LD_VAR 0 2
6250: PPUSH
6251: CALL_OW 52
// end ;
6255: GO 6142
6257: POP
6258: POP
// if dif > 1 then
6259: LD_EXP 1
6263: PUSH
6264: LD_INT 1
6266: GREATER
6267: IFFALSE 6340
// for i = 1 to ( dif - 1 ) do
6269: LD_ADDR_VAR 0 2
6273: PUSH
6274: DOUBLE
6275: LD_INT 1
6277: DEC
6278: ST_TO_ADDR
6279: LD_EXP 1
6283: PUSH
6284: LD_INT 1
6286: MINUS
6287: PUSH
6288: FOR_TO
6289: IFFALSE 6338
// begin patrol := patrol ^ CreateHumanWithClass ( 1 , skill ) ;
6291: LD_ADDR_EXP 17
6295: PUSH
6296: LD_EXP 17
6300: PUSH
6301: LD_INT 1
6303: PPUSH
6304: LD_VAR 0 5
6308: PPUSH
6309: CALL 734 0 2
6313: ADD
6314: ST_TO_ADDR
// PlaceUnitArea ( patrol [ i ] , am_west_spawn , false ) ;
6315: LD_EXP 17
6319: PUSH
6320: LD_VAR 0 2
6324: ARRAY
6325: PPUSH
6326: LD_INT 3
6328: PPUSH
6329: LD_INT 0
6331: PPUSH
6332: CALL_OW 49
// end ;
6336: GO 6288
6338: POP
6339: POP
// game_started := true ;
6340: LD_ADDR_EXP 10
6344: PUSH
6345: LD_INT 1
6347: ST_TO_ADDR
// ComConstruct ( am_fac , us_medium_tracked , engine_solar , control_remote , us_crane ) ;
6348: LD_INT 26
6350: PPUSH
6351: LD_INT 3
6353: PPUSH
6354: LD_INT 2
6356: PPUSH
6357: LD_INT 2
6359: PPUSH
6360: LD_INT 13
6362: PPUSH
6363: CALL_OW 125
// while ( contact_am = false ) do
6367: LD_EXP 16
6371: PUSH
6372: LD_INT 0
6374: EQUAL
6375: IFFALSE 6386
// begin Wait ( 0 0$01 ) ;
6377: LD_INT 35
6379: PPUSH
6380: CALL_OW 67
// end ;
6384: GO 6367
// Wait ( [ 4 4$00 , 3 3$00 , 2 2$30 ] [ dif ] ) ;
6386: LD_INT 8400
6388: PUSH
6389: LD_INT 6300
6391: PUSH
6392: LD_INT 5250
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: LIST
6399: PUSH
6400: LD_EXP 1
6404: ARRAY
6405: PPUSH
6406: CALL_OW 67
// case dif of 1 :
6410: LD_EXP 1
6414: PUSH
6415: LD_INT 1
6417: DOUBLE
6418: EQUAL
6419: IFTRUE 6423
6421: GO 6598
6423: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_machine_gun , us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 4 ) ] ) ;
6424: LD_INT 26
6426: PPUSH
6427: LD_INT 3
6429: PPUSH
6430: LD_INT 1
6432: PPUSH
6433: LD_INT 2
6435: PPUSH
6436: LD_INT 2
6438: PUSH
6439: LD_INT 4
6441: PUSH
6442: LD_INT 5
6444: PUSH
6445: LD_INT 5
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: LIST
6452: LIST
6453: PUSH
6454: LD_INT 1
6456: PPUSH
6457: LD_INT 4
6459: PPUSH
6460: CALL_OW 12
6464: ARRAY
6465: PPUSH
6466: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6470: LD_INT 26
6472: PPUSH
6473: LD_INT 3
6475: PPUSH
6476: LD_INT 1
6478: PPUSH
6479: LD_INT 2
6481: PPUSH
6482: LD_INT 4
6484: PUSH
6485: LD_INT 5
6487: PUSH
6488: LD_INT 5
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: LIST
6495: PUSH
6496: LD_INT 1
6498: PPUSH
6499: LD_INT 3
6501: PPUSH
6502: CALL_OW 12
6506: ARRAY
6507: PPUSH
6508: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6512: LD_INT 26
6514: PPUSH
6515: LD_INT 3
6517: PPUSH
6518: LD_INT 1
6520: PPUSH
6521: LD_INT 2
6523: PPUSH
6524: LD_INT 4
6526: PUSH
6527: LD_INT 5
6529: PUSH
6530: LD_INT 5
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: LIST
6537: PUSH
6538: LD_INT 1
6540: PPUSH
6541: LD_INT 3
6543: PPUSH
6544: CALL_OW 12
6548: ARRAY
6549: PPUSH
6550: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6554: LD_INT 26
6556: PPUSH
6557: LD_INT 3
6559: PPUSH
6560: LD_INT 1
6562: PPUSH
6563: LD_INT 2
6565: PPUSH
6566: LD_INT 4
6568: PUSH
6569: LD_INT 3
6571: PUSH
6572: LD_INT 5
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: LIST
6579: PUSH
6580: LD_INT 1
6582: PPUSH
6583: LD_INT 3
6585: PPUSH
6586: CALL_OW 12
6590: ARRAY
6591: PPUSH
6592: CALL_OW 185
// end ; 2 :
6596: GO 7125
6598: LD_INT 2
6600: DOUBLE
6601: EQUAL
6602: IFTRUE 6606
6604: GO 6819
6606: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6607: LD_INT 26
6609: PPUSH
6610: LD_INT 3
6612: PPUSH
6613: LD_INT 1
6615: PPUSH
6616: LD_INT 2
6618: PPUSH
6619: LD_INT 4
6621: PUSH
6622: LD_INT 5
6624: PUSH
6625: LD_INT 5
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: LIST
6632: PUSH
6633: LD_INT 1
6635: PPUSH
6636: LD_INT 3
6638: PPUSH
6639: CALL_OW 12
6643: ARRAY
6644: PPUSH
6645: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6649: LD_INT 26
6651: PPUSH
6652: LD_INT 3
6654: PPUSH
6655: LD_INT 1
6657: PPUSH
6658: LD_INT 2
6660: PPUSH
6661: LD_INT 4
6663: PUSH
6664: LD_INT 5
6666: PUSH
6667: LD_INT 5
6669: PUSH
6670: EMPTY
6671: LIST
6672: LIST
6673: LIST
6674: PUSH
6675: LD_INT 1
6677: PPUSH
6678: LD_INT 3
6680: PPUSH
6681: CALL_OW 12
6685: ARRAY
6686: PPUSH
6687: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6691: LD_INT 26
6693: PPUSH
6694: LD_INT 3
6696: PPUSH
6697: LD_INT 1
6699: PPUSH
6700: LD_INT 2
6702: PPUSH
6703: LD_INT 4
6705: PUSH
6706: LD_INT 3
6708: PUSH
6709: LD_INT 5
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: LIST
6716: PUSH
6717: LD_INT 1
6719: PPUSH
6720: LD_INT 3
6722: PPUSH
6723: CALL_OW 12
6727: ARRAY
6728: PPUSH
6729: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6733: LD_INT 26
6735: PPUSH
6736: LD_INT 4
6738: PPUSH
6739: LD_INT 1
6741: PPUSH
6742: LD_INT 2
6744: PPUSH
6745: LD_INT 4
6747: PUSH
6748: LD_INT 5
6750: PUSH
6751: LD_INT 6
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 1
6761: PPUSH
6762: LD_INT 3
6764: PPUSH
6765: CALL_OW 12
6769: ARRAY
6770: PPUSH
6771: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6775: LD_INT 26
6777: PPUSH
6778: LD_INT 4
6780: PPUSH
6781: LD_INT 1
6783: PPUSH
6784: LD_INT 2
6786: PPUSH
6787: LD_INT 4
6789: PUSH
6790: LD_INT 5
6792: PUSH
6793: LD_INT 6
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: LIST
6800: PUSH
6801: LD_INT 1
6803: PPUSH
6804: LD_INT 3
6806: PPUSH
6807: CALL_OW 12
6811: ARRAY
6812: PPUSH
6813: CALL_OW 185
// end ; 3 :
6817: GO 7125
6819: LD_INT 3
6821: DOUBLE
6822: EQUAL
6823: IFTRUE 6827
6825: GO 7124
6827: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6828: LD_INT 26
6830: PPUSH
6831: LD_INT 3
6833: PPUSH
6834: LD_INT 1
6836: PPUSH
6837: LD_INT 2
6839: PPUSH
6840: LD_INT 4
6842: PUSH
6843: LD_INT 5
6845: PUSH
6846: LD_INT 5
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: LIST
6853: PUSH
6854: LD_INT 1
6856: PPUSH
6857: LD_INT 3
6859: PPUSH
6860: CALL_OW 12
6864: ARRAY
6865: PPUSH
6866: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6870: LD_INT 26
6872: PPUSH
6873: LD_INT 3
6875: PPUSH
6876: LD_INT 1
6878: PPUSH
6879: LD_INT 2
6881: PPUSH
6882: LD_INT 4
6884: PUSH
6885: LD_INT 5
6887: PUSH
6888: LD_INT 5
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: LIST
6895: PUSH
6896: LD_INT 1
6898: PPUSH
6899: LD_INT 3
6901: PPUSH
6902: CALL_OW 12
6906: ARRAY
6907: PPUSH
6908: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6912: LD_INT 26
6914: PPUSH
6915: LD_INT 3
6917: PPUSH
6918: LD_INT 1
6920: PPUSH
6921: LD_INT 2
6923: PPUSH
6924: LD_INT 4
6926: PUSH
6927: LD_INT 5
6929: PUSH
6930: LD_INT 5
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: LIST
6937: PUSH
6938: LD_INT 1
6940: PPUSH
6941: LD_INT 3
6943: PPUSH
6944: CALL_OW 12
6948: ARRAY
6949: PPUSH
6950: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6954: LD_INT 26
6956: PPUSH
6957: LD_INT 3
6959: PPUSH
6960: LD_INT 1
6962: PPUSH
6963: LD_INT 2
6965: PPUSH
6966: LD_INT 4
6968: PUSH
6969: LD_INT 5
6971: PUSH
6972: LD_INT 5
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: LIST
6979: PUSH
6980: LD_INT 1
6982: PPUSH
6983: LD_INT 3
6985: PPUSH
6986: CALL_OW 12
6990: ARRAY
6991: PPUSH
6992: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6996: LD_INT 26
6998: PPUSH
6999: LD_INT 4
7001: PPUSH
7002: LD_INT 1
7004: PPUSH
7005: LD_INT 2
7007: PPUSH
7008: LD_INT 4
7010: PUSH
7011: LD_INT 5
7013: PUSH
7014: LD_INT 6
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: LIST
7021: PUSH
7022: LD_INT 1
7024: PPUSH
7025: LD_INT 3
7027: PPUSH
7028: CALL_OW 12
7032: ARRAY
7033: PPUSH
7034: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7038: LD_INT 26
7040: PPUSH
7041: LD_INT 4
7043: PPUSH
7044: LD_INT 1
7046: PPUSH
7047: LD_INT 2
7049: PPUSH
7050: LD_INT 4
7052: PUSH
7053: LD_INT 5
7055: PUSH
7056: LD_INT 6
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: LIST
7063: PUSH
7064: LD_INT 1
7066: PPUSH
7067: LD_INT 3
7069: PPUSH
7070: CALL_OW 12
7074: ARRAY
7075: PPUSH
7076: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7080: LD_INT 26
7082: PPUSH
7083: LD_INT 4
7085: PPUSH
7086: LD_INT 1
7088: PPUSH
7089: LD_INT 2
7091: PPUSH
7092: LD_INT 4
7094: PUSH
7095: LD_INT 5
7097: PUSH
7098: LD_INT 6
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: LIST
7105: PUSH
7106: LD_INT 1
7108: PPUSH
7109: LD_INT 3
7111: PPUSH
7112: CALL_OW 12
7116: ARRAY
7117: PPUSH
7118: CALL_OW 185
// end ; end ;
7122: GO 7125
7124: POP
// end ;
7125: LD_VAR 0 1
7129: RET
// every 0 0$01 do var i , filter ;
7130: GO 7132
7132: DISABLE
7133: LD_INT 0
7135: PPUSH
7136: PPUSH
// begin enable ;
7137: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
7138: LD_INT 22
7140: PUSH
7141: LD_INT 1
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PUSH
7148: LD_INT 25
7150: PUSH
7151: LD_INT 4
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PPUSH
7162: CALL_OW 69
7166: PUSH
7167: LD_INT 0
7169: GREATER
7170: IFFALSE 7179
// RaiseSailEvent ( 3 ) ;
7172: LD_INT 3
7174: PPUSH
7175: CALL_OW 427
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 0 then
7179: LD_INT 22
7181: PUSH
7182: LD_INT 1
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 21
7191: PUSH
7192: LD_INT 3
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: LD_INT 3
7201: PUSH
7202: LD_INT 24
7204: PUSH
7205: LD_INT 1000
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: LIST
7220: PPUSH
7221: CALL_OW 69
7225: PUSH
7226: LD_INT 0
7228: GREATER
7229: IFFALSE 7240
// RaiseSailEvent ( 1 ) else
7231: LD_INT 1
7233: PPUSH
7234: CALL_OW 427
7238: GO 7247
// RaiseSailEvent ( 2 ) ;
7240: LD_INT 2
7242: PPUSH
7243: CALL_OW 427
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) > 0 then
7247: LD_INT 22
7249: PUSH
7250: LD_INT 1
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PUSH
7257: LD_INT 30
7259: PUSH
7260: LD_INT 5
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: PPUSH
7271: CALL_OW 69
7275: PUSH
7276: LD_INT 0
7278: GREATER
7279: IFFALSE 7288
// RaiseSailEvent ( 4 ) ;
7281: LD_INT 4
7283: PPUSH
7284: CALL_OW 427
// if gamma_towers > 0 then
7288: LD_EXP 18
7292: PUSH
7293: LD_INT 0
7295: GREATER
7296: IFFALSE 7305
// RaiseSailEvent ( 5 ) ;
7298: LD_INT 5
7300: PPUSH
7301: CALL_OW 427
// end ;
7305: PPOPN 2
7307: END
// export new_veh ; every 9 9$00 do var chassis , weapon ;
7308: GO 7310
7310: DISABLE
7311: LD_INT 0
7313: PPUSH
7314: PPUSH
// begin enable ;
7315: ENABLE
// if new_veh > 0 then
7316: LD_EXP 19
7320: PUSH
7321: LD_INT 0
7323: GREATER
7324: IFFALSE 7511
// while ( new_veh > 0 ) do
7326: LD_EXP 19
7330: PUSH
7331: LD_INT 0
7333: GREATER
7334: IFFALSE 7511
// begin Wait ( 0 0$01 ) ;
7336: LD_INT 35
7338: PPUSH
7339: CALL_OW 67
// if BuildingStatus ( am_fac ) = bs_idle then
7343: LD_INT 26
7345: PPUSH
7346: CALL_OW 461
7350: PUSH
7351: LD_INT 2
7353: EQUAL
7354: IFFALSE 7509
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ Rand ( 1 , 4 ) ] ;
7356: LD_ADDR_VAR 0 1
7360: PUSH
7361: LD_INT 2
7363: PUSH
7364: LD_INT 3
7366: PUSH
7367: LD_INT 3
7369: PUSH
7370: LD_INT 4
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: PUSH
7379: LD_INT 1
7381: PPUSH
7382: LD_INT 4
7384: PPUSH
7385: CALL_OW 12
7389: ARRAY
7390: ST_TO_ADDR
// if chassis in [ us_medium_wheeled , us_medium_tracked ] then
7391: LD_VAR 0 1
7395: PUSH
7396: LD_INT 2
7398: PUSH
7399: LD_INT 3
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: IN
7406: IFFALSE 7441
// weapon := [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ Rand ( 1 , 3 ) ] else
7408: LD_ADDR_VAR 0 2
7412: PUSH
7413: LD_INT 4
7415: PUSH
7416: LD_INT 5
7418: PUSH
7419: LD_INT 7
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: LIST
7426: PUSH
7427: LD_INT 1
7429: PPUSH
7430: LD_INT 3
7432: PPUSH
7433: CALL_OW 12
7437: ARRAY
7438: ST_TO_ADDR
7439: GO 7472
// weapon := [ us_double_gun , us_rocket_launcher , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ;
7441: LD_ADDR_VAR 0 2
7445: PUSH
7446: LD_INT 5
7448: PUSH
7449: LD_INT 7
7451: PUSH
7452: LD_INT 6
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: LIST
7459: PUSH
7460: LD_INT 1
7462: PPUSH
7463: LD_INT 3
7465: PPUSH
7466: CALL_OW 12
7470: ARRAY
7471: ST_TO_ADDR
// ComConstruct ( am_fac , chassis , engine_combustion , control_remote , weapon ) ;
7472: LD_INT 26
7474: PPUSH
7475: LD_VAR 0 1
7479: PPUSH
7480: LD_INT 1
7482: PPUSH
7483: LD_INT 2
7485: PPUSH
7486: LD_VAR 0 2
7490: PPUSH
7491: CALL_OW 125
// new_veh := new_veh - 1 ;
7495: LD_ADDR_EXP 19
7499: PUSH
7500: LD_EXP 19
7504: PUSH
7505: LD_INT 1
7507: MINUS
7508: ST_TO_ADDR
// end ; end ;
7509: GO 7326
// end ;
7511: PPOPN 2
7513: END
// every 0 0$01 do var v , filter , am_cmeh ;
7514: GO 7516
7516: DISABLE
7517: LD_INT 0
7519: PPUSH
7520: PPUSH
7521: PPUSH
// begin enable ;
7522: ENABLE
// am_cmeh := UnitsInside ( am_ct ) ;
7523: LD_ADDR_VAR 0 3
7527: PUSH
7528: LD_INT 56
7530: PPUSH
7531: CALL_OW 313
7535: ST_TO_ADDR
// filter = FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] ] ] ) ;
7536: LD_ADDR_VAR 0 2
7540: PUSH
7541: LD_INT 22
7543: PUSH
7544: LD_INT 1
7546: PUSH
7547: EMPTY
7548: LIST
7549: LIST
7550: PUSH
7551: LD_INT 33
7553: PUSH
7554: LD_INT 2
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: PUSH
7561: LD_INT 50
7563: PUSH
7564: EMPTY
7565: LIST
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: LIST
7571: PUSH
7572: EMPTY
7573: LIST
7574: PPUSH
7575: CALL_OW 69
7579: ST_TO_ADDR
// if filter > 0 then
7580: LD_VAR 0 2
7584: PUSH
7585: LD_INT 0
7587: GREATER
7588: IFFALSE 7656
// begin for v in filter do
7590: LD_ADDR_VAR 0 1
7594: PUSH
7595: LD_VAR 0 2
7599: PUSH
7600: FOR_IN
7601: IFFALSE 7654
// begin if not IsControledBy ( v ) and IsOk ( v ) then
7603: LD_VAR 0 1
7607: PPUSH
7608: CALL_OW 312
7612: NOT
7613: PUSH
7614: LD_VAR 0 1
7618: PPUSH
7619: CALL_OW 302
7623: AND
7624: IFFALSE 7652
// ComLinkTo ( v , am_cmeh [ Rand ( 1 , 3 ) ] ) ;
7626: LD_VAR 0 1
7630: PPUSH
7631: LD_VAR 0 3
7635: PUSH
7636: LD_INT 1
7638: PPUSH
7639: LD_INT 3
7641: PPUSH
7642: CALL_OW 12
7646: ARRAY
7647: PPUSH
7648: CALL_OW 135
// end ;
7652: GO 7600
7654: POP
7655: POP
// end ; end ;
7656: PPOPN 3
7658: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) = [ 4 , 5 , 7 ] [ dif ] and BuildingStatus ( am_fac ) = bs_idle do var i , un , enemy ;
7659: LD_INT 33
7661: PUSH
7662: LD_INT 2
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: PUSH
7669: LD_INT 3
7671: PUSH
7672: LD_INT 34
7674: PUSH
7675: LD_INT 13
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: PPUSH
7690: CALL_OW 69
7694: PUSH
7695: LD_INT 4
7697: PUSH
7698: LD_INT 5
7700: PUSH
7701: LD_INT 7
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: LIST
7708: PUSH
7709: LD_EXP 1
7713: ARRAY
7714: EQUAL
7715: PUSH
7716: LD_INT 26
7718: PPUSH
7719: CALL_OW 461
7723: PUSH
7724: LD_INT 2
7726: EQUAL
7727: AND
7728: IFFALSE 7939
7730: GO 7732
7732: DISABLE
7733: LD_INT 0
7735: PPUSH
7736: PPUSH
7737: PPUSH
// begin enable ;
7738: ENABLE
// if Sikorski_Ar then
7739: LD_EXP 12
7743: IFFALSE 7820
// SForce := FilterAllUnits ( [ [ f_or , [ f_side , 4 ] , [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ] ] ) else
7745: LD_ADDR_EXP 11
7749: PUSH
7750: LD_INT 2
7752: PUSH
7753: LD_INT 22
7755: PUSH
7756: LD_INT 4
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: PUSH
7763: LD_INT 22
7765: PUSH
7766: LD_INT 1
7768: PUSH
7769: EMPTY
7770: LIST
7771: LIST
7772: PUSH
7773: LD_INT 33
7775: PUSH
7776: LD_INT 2
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: PUSH
7783: LD_INT 3
7785: PUSH
7786: LD_INT 34
7788: PUSH
7789: LD_INT 13
7791: PUSH
7792: EMPTY
7793: LIST
7794: LIST
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: PUSH
7800: EMPTY
7801: LIST
7802: LIST
7803: LIST
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: LIST
7809: PUSH
7810: EMPTY
7811: LIST
7812: PPUSH
7813: CALL_OW 69
7817: ST_TO_ADDR
7818: GO 7861
// SForce := FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) ;
7820: LD_ADDR_EXP 11
7824: PUSH
7825: LD_INT 33
7827: PUSH
7828: LD_INT 2
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: PUSH
7835: LD_INT 3
7837: PUSH
7838: LD_INT 34
7840: PUSH
7841: LD_INT 13
7843: PUSH
7844: EMPTY
7845: LIST
7846: LIST
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: PUSH
7852: EMPTY
7853: LIST
7854: LIST
7855: PPUSH
7856: CALL_OW 69
7860: ST_TO_ADDR
// repeat begin for un in SForce do
7861: LD_ADDR_VAR 0 2
7865: PUSH
7866: LD_EXP 11
7870: PUSH
7871: FOR_IN
7872: IFFALSE 7927
// begin enemy := FilterAllUnits ( [ f_side , 3 ] ) ;
7874: LD_ADDR_VAR 0 3
7878: PUSH
7879: LD_INT 22
7881: PUSH
7882: LD_INT 3
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: PPUSH
7889: CALL_OW 69
7893: ST_TO_ADDR
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
7894: LD_VAR 0 2
7898: PPUSH
7899: LD_VAR 0 3
7903: PPUSH
7904: LD_VAR 0 2
7908: PPUSH
7909: CALL_OW 74
7913: PPUSH
7914: CALL_OW 115
// Wait ( 0 0$01 ) ;
7918: LD_INT 35
7920: PPUSH
7921: CALL_OW 67
// end ;
7925: GO 7871
7927: POP
7928: POP
// end until SForce = 0 ;
7929: LD_EXP 11
7933: PUSH
7934: LD_INT 0
7936: EQUAL
7937: IFFALSE 7861
// end ;
7939: PPOPN 3
7941: END
// export function NewForce ( num ) ; var i , filter , veh , tmp ; begin
7942: LD_INT 0
7944: PPUSH
7945: PPUSH
7946: PPUSH
7947: PPUSH
7948: PPUSH
// tmp := FilterUnitsInArea ( spawnArea , [ ] ) ;
7949: LD_ADDR_VAR 0 6
7953: PUSH
7954: LD_INT 14
7956: PPUSH
7957: EMPTY
7958: PPUSH
7959: CALL_OW 70
7963: ST_TO_ADDR
// if tmp then
7964: LD_VAR 0 6
7968: IFFALSE 8002
// for i in tmp do
7970: LD_ADDR_VAR 0 3
7974: PUSH
7975: LD_VAR 0 6
7979: PUSH
7980: FOR_IN
7981: IFFALSE 8000
// ComMoveXY ( i , 42 , 23 ) ;
7983: LD_VAR 0 3
7987: PPUSH
7988: LD_INT 42
7990: PPUSH
7991: LD_INT 23
7993: PPUSH
7994: CALL_OW 111
7998: GO 7980
8000: POP
8001: POP
// EraseResourceArea ( spawnArea , mat_cans ) ;
8002: LD_INT 14
8004: PPUSH
8005: LD_INT 1
8007: PPUSH
8008: CALL_OW 286
// uc_side := 4 ;
8012: LD_ADDR_OWVAR 20
8016: PUSH
8017: LD_INT 4
8019: ST_TO_ADDR
// uc_nation := 1 ;
8020: LD_ADDR_OWVAR 21
8024: PUSH
8025: LD_INT 1
8027: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
8028: LD_ADDR_OWVAR 37
8032: PUSH
8033: LD_INT 4
8035: ST_TO_ADDR
// vc_control := control_manual ;
8036: LD_ADDR_OWVAR 38
8040: PUSH
8041: LD_INT 1
8043: ST_TO_ADDR
// vc_engine := engine_combustion ;
8044: LD_ADDR_OWVAR 39
8048: PUSH
8049: LD_INT 1
8051: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ dif ] ;
8052: LD_ADDR_OWVAR 40
8056: PUSH
8057: LD_INT 4
8059: PUSH
8060: LD_INT 5
8062: PUSH
8063: LD_INT 7
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: LIST
8070: PUSH
8071: LD_EXP 1
8075: ARRAY
8076: ST_TO_ADDR
// veh := CreateVehicle ;
8077: LD_ADDR_VAR 0 5
8081: PUSH
8082: CALL_OW 45
8086: ST_TO_ADDR
// PlaceUnitArea ( veh , am_main_spawn , false ) ;
8087: LD_VAR 0 5
8091: PPUSH
8092: LD_INT 2
8094: PPUSH
8095: LD_INT 0
8097: PPUSH
8098: CALL_OW 49
// PlaceHumanInUnit ( sikorski , veh ) ;
8102: LD_EXP 9
8106: PPUSH
8107: LD_VAR 0 5
8111: PPUSH
8112: CALL_OW 52
// SetMark ( veh , 1 ) ;
8116: LD_VAR 0 5
8120: PPUSH
8121: LD_INT 1
8123: PPUSH
8124: CALL_OW 242
// while ( num > 0 ) do
8128: LD_VAR 0 1
8132: PUSH
8133: LD_INT 0
8135: GREATER
8136: IFFALSE 8303
// begin CreateVehicleWithDriver ( [ us_medium_tracked , us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ Rand ( dif , 4 ) ] , engine_combustion , [ us_gatling_gun , us_double_gun , us_double_gun , us_rocket_launcher ] [ Rand ( 1 , dif + 1 ) ] , am_sik , 2 , [ 5 , 6 , 7 ] [ dif ] ) ;
8138: LD_INT 3
8140: PUSH
8141: LD_INT 3
8143: PUSH
8144: LD_INT 3
8146: PUSH
8147: LD_INT 4
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: PUSH
8156: LD_EXP 1
8160: PPUSH
8161: LD_INT 4
8163: PPUSH
8164: CALL_OW 12
8168: ARRAY
8169: PPUSH
8170: LD_INT 1
8172: PPUSH
8173: LD_INT 4
8175: PUSH
8176: LD_INT 5
8178: PUSH
8179: LD_INT 5
8181: PUSH
8182: LD_INT 7
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: PUSH
8191: LD_INT 1
8193: PPUSH
8194: LD_EXP 1
8198: PUSH
8199: LD_INT 1
8201: PLUS
8202: PPUSH
8203: CALL_OW 12
8207: ARRAY
8208: PPUSH
8209: LD_INT 11
8211: PPUSH
8212: LD_INT 2
8214: PPUSH
8215: LD_INT 5
8217: PUSH
8218: LD_INT 6
8220: PUSH
8221: LD_INT 7
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: LIST
8228: PUSH
8229: LD_EXP 1
8233: ARRAY
8234: PPUSH
8235: CALL 1297 0 6
// filter := FilterAllUnits ( [ f_side , 4 ] ) ;
8239: LD_ADDR_VAR 0 4
8243: PUSH
8244: LD_INT 22
8246: PUSH
8247: LD_INT 4
8249: PUSH
8250: EMPTY
8251: LIST
8252: LIST
8253: PPUSH
8254: CALL_OW 69
8258: ST_TO_ADDR
// ComMoveXY ( filter [ filter ] , 36 , 18 ) ;
8259: LD_VAR 0 4
8263: PUSH
8264: LD_VAR 0 4
8268: ARRAY
8269: PPUSH
8270: LD_INT 36
8272: PPUSH
8273: LD_INT 18
8275: PPUSH
8276: CALL_OW 111
// Wait ( 0 0$02 ) ;
8280: LD_INT 70
8282: PPUSH
8283: CALL_OW 67
// num := num - 1 ;
8287: LD_ADDR_VAR 0 1
8291: PUSH
8292: LD_VAR 0 1
8296: PUSH
8297: LD_INT 1
8299: MINUS
8300: ST_TO_ADDR
// end ;
8301: GO 8128
// end ;
8303: LD_VAR 0 2
8307: RET
// every 0 0$03 trigger patrol > 0 do var i ;
8308: LD_EXP 17
8312: PUSH
8313: LD_INT 0
8315: GREATER
8316: IFFALSE 8585
8318: GO 8320
8320: DISABLE
8321: LD_INT 0
8323: PPUSH
// begin enable ;
8324: ENABLE
// for i = 1 to patrol do
8325: LD_ADDR_VAR 0 1
8329: PUSH
8330: DOUBLE
8331: LD_INT 1
8333: DEC
8334: ST_TO_ADDR
8335: LD_EXP 17
8339: PUSH
8340: FOR_TO
8341: IFFALSE 8583
// begin if patrol [ i ] and IsLive ( patrol [ i ] ) and not HasTask ( patrol [ i ] ) then
8343: LD_EXP 17
8347: PUSH
8348: LD_VAR 0 1
8352: ARRAY
8353: PUSH
8354: LD_EXP 17
8358: PUSH
8359: LD_VAR 0 1
8363: ARRAY
8364: PPUSH
8365: CALL_OW 300
8369: AND
8370: PUSH
8371: LD_EXP 17
8375: PUSH
8376: LD_VAR 0 1
8380: ARRAY
8381: PPUSH
8382: CALL_OW 314
8386: NOT
8387: AND
8388: IFFALSE 8538
// case i of 1 :
8390: LD_VAR 0 1
8394: PUSH
8395: LD_INT 1
8397: DOUBLE
8398: EQUAL
8399: IFTRUE 8403
8401: GO 8466
8403: POP
// begin ComMoveXY ( patrol [ i ] , 53 , 91 ) ;
8404: LD_EXP 17
8408: PUSH
8409: LD_VAR 0 1
8413: ARRAY
8414: PPUSH
8415: LD_INT 53
8417: PPUSH
8418: LD_INT 91
8420: PPUSH
8421: CALL_OW 111
// AddComWait ( patrol [ i ] , 0 0$07 ) ;
8425: LD_EXP 17
8429: PUSH
8430: LD_VAR 0 1
8434: ARRAY
8435: PPUSH
8436: LD_INT 245
8438: PPUSH
8439: CALL_OW 202
// AddComMoveXY ( patrol [ i ] , 24 , 26 ) ;
8443: LD_EXP 17
8447: PUSH
8448: LD_VAR 0 1
8452: ARRAY
8453: PPUSH
8454: LD_INT 24
8456: PPUSH
8457: LD_INT 26
8459: PPUSH
8460: CALL_OW 171
// end ; 2 :
8464: GO 8538
8466: LD_INT 2
8468: DOUBLE
8469: EQUAL
8470: IFTRUE 8474
8472: GO 8537
8474: POP
// begin ComMoveXY ( patrol [ i ] , 83 , 57 ) ;
8475: LD_EXP 17
8479: PUSH
8480: LD_VAR 0 1
8484: ARRAY
8485: PPUSH
8486: LD_INT 83
8488: PPUSH
8489: LD_INT 57
8491: PPUSH
8492: CALL_OW 111
// AddComWait ( patrol [ i ] , 0 0$07 ) ;
8496: LD_EXP 17
8500: PUSH
8501: LD_VAR 0 1
8505: ARRAY
8506: PPUSH
8507: LD_INT 245
8509: PPUSH
8510: CALL_OW 202
// AddComMoveXY ( patrol [ i ] , 47 , 53 ) ;
8514: LD_EXP 17
8518: PUSH
8519: LD_VAR 0 1
8523: ARRAY
8524: PPUSH
8525: LD_INT 47
8527: PPUSH
8528: LD_INT 53
8530: PPUSH
8531: CALL_OW 171
// end ; end ;
8535: GO 8538
8537: POP
// if GetLives ( patrol [ i ] ) < 1000 then
8538: LD_EXP 17
8542: PUSH
8543: LD_VAR 0 1
8547: ARRAY
8548: PPUSH
8549: CALL_OW 256
8553: PUSH
8554: LD_INT 1000
8556: LESS
8557: IFFALSE 8581
// patrol := patrol diff patrol [ i ] ;
8559: LD_ADDR_EXP 17
8563: PUSH
8564: LD_EXP 17
8568: PUSH
8569: LD_EXP 17
8573: PUSH
8574: LD_VAR 0 1
8578: ARRAY
8579: DIFF
8580: ST_TO_ADDR
// end ;
8581: GO 8340
8583: POP
8584: POP
// end ;
8585: PPOPN 1
8587: END
// every 0 0$10 do
8588: GO 8590
8590: DISABLE
// begin Wait ( [ 20 20$00 , 18 18$00 , 16 16$00 ] [ dif ] ) ;
8591: LD_INT 42000
8593: PUSH
8594: LD_INT 37800
8596: PUSH
8597: LD_INT 33600
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: LIST
8604: PUSH
8605: LD_EXP 1
8609: ARRAY
8610: PPUSH
8611: CALL_OW 67
// if not contact_am then
8615: LD_EXP 16
8619: NOT
8620: IFFALSE 8630
// contact_am := true ;
8622: LD_ADDR_EXP 16
8626: PUSH
8627: LD_INT 1
8629: ST_TO_ADDR
// end ; end_of_file
8630: END
// export event_rocket , event_comp , comp_tested , sikorski_run ; export function Action ; begin
8631: LD_INT 0
8633: PPUSH
// comp_tested := false ;
8634: LD_ADDR_EXP 22
8638: PUSH
8639: LD_INT 0
8641: ST_TO_ADDR
// sikorski_run := false ;
8642: LD_ADDR_EXP 23
8646: PUSH
8647: LD_INT 0
8649: ST_TO_ADDR
// InGameOn ;
8650: CALL_OW 8
// CenterNowOnXY ( 5 , 4 ) ;
8654: LD_INT 5
8656: PPUSH
8657: LD_INT 4
8659: PPUSH
8660: CALL_OW 86
// wait ( 0 0$2 ) ;
8664: LD_INT 70
8666: PPUSH
8667: CALL_OW 67
// CenterOnUnits ( commander ) ;
8671: LD_EXP 3
8675: PPUSH
8676: CALL_OW 85
// wait ( 0 0$01 ) ;
8680: LD_INT 35
8682: PPUSH
8683: CALL_OW 67
// SayRadio ( popov , Dpop1 ) ;
8687: LD_EXP 2
8691: PPUSH
8692: LD_STRING Dpop1
8694: PPUSH
8695: CALL_OW 94
// Say ( commander , Dcomm1 ) ;
8699: LD_EXP 3
8703: PPUSH
8704: LD_STRING Dcomm1
8706: PPUSH
8707: CALL_OW 88
// SayRadio ( popov , Dpop2 ) ;
8711: LD_EXP 2
8715: PPUSH
8716: LD_STRING Dpop2
8718: PPUSH
8719: CALL_OW 94
// Say ( commander , Dcomm2 ) ;
8723: LD_EXP 3
8727: PPUSH
8728: LD_STRING Dcomm2
8730: PPUSH
8731: CALL_OW 88
// InGameOff ;
8735: CALL_OW 9
// ChangeMissionObjectives ( T1 ) ;
8739: LD_STRING T1
8741: PPUSH
8742: CALL_OW 337
// end ;
8746: LD_VAR 0 1
8750: RET
// every 0 0$01 trigger timer > 2 2$01 do
8751: LD_EXP 24
8755: PUSH
8756: LD_INT 4235
8758: GREATER
8759: IFFALSE 8776
8761: GO 8763
8763: DISABLE
// begin SayRadio ( kapral , DKap1 ) ;
8764: LD_EXP 5
8768: PPUSH
8769: LD_STRING DKap1
8771: PPUSH
8772: CALL_OW 94
// end ;
8776: END
// every 0 0$01 trigger timer > [ 22 22$00 , 25 25$00 , 30 30$00 ] [ dif ] do var i ;
8777: LD_EXP 24
8781: PUSH
8782: LD_INT 46200
8784: PUSH
8785: LD_INT 52500
8787: PUSH
8788: LD_INT 63000
8790: PUSH
8791: EMPTY
8792: LIST
8793: LIST
8794: LIST
8795: PUSH
8796: LD_EXP 1
8800: ARRAY
8801: GREATER
8802: IFFALSE 9169
8804: GO 8806
8806: DISABLE
8807: LD_INT 0
8809: PPUSH
// begin SayRadio ( kapral , DKap2 ) ;
8810: LD_EXP 5
8814: PPUSH
8815: LD_STRING DKap2
8817: PPUSH
8818: CALL_OW 94
// Wait ( 0 0$0.3 ) ;
8822: LD_INT 10
8824: PPUSH
8825: CALL_OW 67
// Say ( commander , Dcommk ) ;
8829: LD_EXP 3
8833: PPUSH
8834: LD_STRING Dcommk
8836: PPUSH
8837: CALL_OW 88
// Wait ( 0 0$44 ) ;
8841: LD_INT 1540
8843: PPUSH
8844: CALL_OW 67
// PlaceUnitArea ( kapral , am_west_spawn , false ) ;
8848: LD_EXP 5
8852: PPUSH
8853: LD_INT 3
8855: PPUSH
8856: LD_INT 0
8858: PPUSH
8859: CALL_OW 49
// CenterNowOnUnits ( kapral ) ;
8863: LD_EXP 5
8867: PPUSH
8868: CALL_OW 87
// Wait ( 0 0$10 ) ;
8872: LD_INT 350
8874: PPUSH
8875: CALL_OW 67
// NewForce ( [ 6 , 7 , 8 ] [ dif ] ) ;
8879: LD_INT 6
8881: PUSH
8882: LD_INT 7
8884: PUSH
8885: LD_INT 8
8887: PUSH
8888: EMPTY
8889: LIST
8890: LIST
8891: LIST
8892: PUSH
8893: LD_EXP 1
8897: ARRAY
8898: PPUSH
8899: CALL 7942 0 1
// Wait ( 2 2$00 ) ;
8903: LD_INT 4200
8905: PPUSH
8906: CALL_OW 67
// while ( FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) < 3 ) do
8910: LD_INT 33
8912: PUSH
8913: LD_INT 2
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PUSH
8920: LD_INT 3
8922: PUSH
8923: LD_INT 34
8925: PUSH
8926: LD_INT 13
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: PPUSH
8941: CALL_OW 69
8945: PUSH
8946: LD_INT 3
8948: LESS
8949: IFFALSE 8960
// Wait ( 0 0$01 ) ;
8951: LD_INT 35
8953: PPUSH
8954: CALL_OW 67
8958: GO 8910
// uc_side := 4 ;
8960: LD_ADDR_OWVAR 20
8964: PUSH
8965: LD_INT 4
8967: ST_TO_ADDR
// uc_nation := 1 ;
8968: LD_ADDR_OWVAR 21
8972: PUSH
8973: LD_INT 1
8975: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ dif ] do
8976: LD_ADDR_VAR 0 1
8980: PUSH
8981: DOUBLE
8982: LD_INT 1
8984: DEC
8985: ST_TO_ADDR
8986: LD_INT 4
8988: PUSH
8989: LD_INT 5
8991: PUSH
8992: LD_INT 6
8994: PUSH
8995: EMPTY
8996: LIST
8997: LIST
8998: LIST
8999: PUSH
9000: LD_EXP 1
9004: ARRAY
9005: PUSH
9006: FOR_TO
9007: IFFALSE 9049
// PlaceUnitArea ( CreateHumanWithClass ( 1 , [ 5 , 6 , 7 ] [ dif ] ) , am_east_spawn , false ) ;
9009: LD_INT 1
9011: PPUSH
9012: LD_INT 5
9014: PUSH
9015: LD_INT 6
9017: PUSH
9018: LD_INT 7
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: LIST
9025: PUSH
9026: LD_EXP 1
9030: ARRAY
9031: PPUSH
9032: CALL 734 0 2
9036: PPUSH
9037: LD_INT 4
9039: PPUSH
9040: LD_INT 0
9042: PPUSH
9043: CALL_OW 49
9047: GO 9006
9049: POP
9050: POP
// sikorski_ar := true ;
9051: LD_ADDR_EXP 12
9055: PUSH
9056: LD_INT 1
9058: ST_TO_ADDR
// SayRadio ( sikorski , DSik1 ) ;
9059: LD_EXP 9
9063: PPUSH
9064: LD_STRING DSik1
9066: PPUSH
9067: CALL_OW 94
// Wait ( 0 0$30 ) ;
9071: LD_INT 1050
9073: PPUSH
9074: CALL_OW 67
// uc_side := 4 ;
9078: LD_ADDR_OWVAR 20
9082: PUSH
9083: LD_INT 4
9085: ST_TO_ADDR
// uc_nation := 1 ;
9086: LD_ADDR_OWVAR 21
9090: PUSH
9091: LD_INT 1
9093: ST_TO_ADDR
// for i = 1 to [ 3 , 4 , 4 ] [ dif ] do
9094: LD_ADDR_VAR 0 1
9098: PUSH
9099: DOUBLE
9100: LD_INT 1
9102: DEC
9103: ST_TO_ADDR
9104: LD_INT 3
9106: PUSH
9107: LD_INT 4
9109: PUSH
9110: LD_INT 4
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: LIST
9117: PUSH
9118: LD_EXP 1
9122: ARRAY
9123: PUSH
9124: FOR_TO
9125: IFFALSE 9167
// PlaceUnitArea ( CreateHumanWithClass ( 1 , [ 5 , 6 , 7 ] [ dif ] ) , am_south_spawn , false ) ;
9127: LD_INT 1
9129: PPUSH
9130: LD_INT 5
9132: PUSH
9133: LD_INT 6
9135: PUSH
9136: LD_INT 7
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: LIST
9143: PUSH
9144: LD_EXP 1
9148: ARRAY
9149: PPUSH
9150: CALL 734 0 2
9154: PPUSH
9155: LD_INT 13
9157: PPUSH
9158: LD_INT 0
9160: PPUSH
9161: CALL_OW 49
9165: GO 9124
9167: POP
9168: POP
// end ;
9169: PPOPN 1
9171: END
// every 0 0$0.1 trigger GetLives ( sikorski ) < 650 do
9172: LD_EXP 9
9176: PPUSH
9177: CALL_OW 256
9181: PUSH
9182: LD_INT 650
9184: LESS
9185: IFFALSE 9267
9187: GO 9189
9189: DISABLE
// begin Say ( sikorski , DSik2 ) ;
9190: LD_EXP 9
9194: PPUSH
9195: LD_STRING DSik2
9197: PPUSH
9198: CALL_OW 88
// while ( IsLive ( sikorski ) ) do
9202: LD_EXP 9
9206: PPUSH
9207: CALL_OW 300
9211: IFFALSE 9267
// begin ComMoveToArea ( sikorski , am_main_spawn ) ;
9213: LD_EXP 9
9217: PPUSH
9218: LD_INT 2
9220: PPUSH
9221: CALL_OW 113
// Wait ( 0 0$01 ) ;
9225: LD_INT 35
9227: PPUSH
9228: CALL_OW 67
// if IsInArea ( sikorski , am_main_spawn ) then
9232: LD_EXP 9
9236: PPUSH
9237: LD_INT 2
9239: PPUSH
9240: CALL_OW 308
9244: IFFALSE 9265
// begin RemoveUnit ( sikorski ) ;
9246: LD_EXP 9
9250: PPUSH
9251: CALL_OW 64
// break ;
9255: GO 9267
// sikorski_run := true ;
9257: LD_ADDR_EXP 23
9261: PUSH
9262: LD_INT 1
9264: ST_TO_ADDR
// end ; end ;
9265: GO 9202
// end ;
9267: END
// every 0 0$0.1 trigger GetLives ( sikorski ) < 1000 do
9268: LD_EXP 9
9272: PPUSH
9273: CALL_OW 256
9277: PUSH
9278: LD_INT 1000
9280: LESS
9281: IFFALSE 9298
9283: GO 9285
9285: DISABLE
// Say ( sikorski , DSkik3 ) ; end_of_file
9286: LD_EXP 9
9290: PPUSH
9291: LD_STRING DSkik3
9293: PPUSH
9294: CALL_OW 88
9298: END
// every 1 1$45 + 0 0$15 do
9299: GO 9301
9301: DISABLE
// begin enable ;
9302: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
9303: LD_INT 1
9305: PPUSH
9306: LD_INT 5
9308: PPUSH
9309: CALL_OW 12
9313: PPUSH
9314: LD_INT 8
9316: PPUSH
9317: LD_INT 1
9319: PPUSH
9320: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$37 ) ) ;
9324: LD_INT 350
9326: PPUSH
9327: LD_INT 1295
9329: PPUSH
9330: CALL_OW 12
9334: PPUSH
9335: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
9339: LD_INT 1
9341: PPUSH
9342: LD_INT 5
9344: PPUSH
9345: CALL_OW 12
9349: PPUSH
9350: LD_INT 1
9352: PPUSH
9353: CALL_OW 57
// Wait ( Rand ( 0 0$10 , 0 0$30 ) ) ;
9357: LD_INT 350
9359: PPUSH
9360: LD_INT 1050
9362: PPUSH
9363: CALL_OW 12
9367: PPUSH
9368: CALL_OW 67
// if timer <= [ 12 12$00 , 11 11$00 , 10 10$00 ] [ dif ] then
9372: LD_EXP 24
9376: PUSH
9377: LD_INT 25200
9379: PUSH
9380: LD_INT 23100
9382: PUSH
9383: LD_INT 21000
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: LIST
9390: PUSH
9391: LD_EXP 1
9395: ARRAY
9396: LESSEQUAL
9397: IFFALSE 9420
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
9399: LD_INT 1
9401: PPUSH
9402: LD_INT 5
9404: PPUSH
9405: CALL_OW 12
9409: PPUSH
9410: LD_INT 8
9412: PPUSH
9413: LD_INT 1
9415: PPUSH
9416: CALL_OW 55
// end ;
9420: END
// export timer ; every 1 do
9421: GO 9423
9423: DISABLE
// timer := 0 0$00 ;
9424: LD_ADDR_EXP 24
9428: PUSH
9429: LD_INT 0
9431: ST_TO_ADDR
9432: END
// every 0 0$01 do
9433: GO 9435
9435: DISABLE
// begin enable ;
9436: ENABLE
// Display_Strings := [ #tick , timer ] ;
9437: LD_ADDR_OWVAR 47
9441: PUSH
9442: LD_STRING #tick
9444: PUSH
9445: LD_EXP 24
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: ST_TO_ADDR
// timer := timer + 0 0$01 ;
9454: LD_ADDR_EXP 24
9458: PUSH
9459: LD_EXP 24
9463: PUSH
9464: LD_INT 35
9466: PLUS
9467: ST_TO_ADDR
// end ; end_of_file
9468: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
9469: LD_INT 0
9471: PPUSH
// ar_miner := 81 ;
9472: LD_ADDR_EXP 32
9476: PUSH
9477: LD_INT 81
9479: ST_TO_ADDR
// ar_crane := 88 ;
9480: LD_ADDR_EXP 31
9484: PUSH
9485: LD_INT 88
9487: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
9488: LD_ADDR_EXP 26
9492: PUSH
9493: LD_INT 89
9495: ST_TO_ADDR
// us_hack := 99 ;
9496: LD_ADDR_EXP 27
9500: PUSH
9501: LD_INT 99
9503: ST_TO_ADDR
// us_artillery := 97 ;
9504: LD_ADDR_EXP 28
9508: PUSH
9509: LD_INT 97
9511: ST_TO_ADDR
// ar_bio_bomb := 91 ;
9512: LD_ADDR_EXP 29
9516: PUSH
9517: LD_INT 91
9519: ST_TO_ADDR
// ar_mortar := 92 ;
9520: LD_ADDR_EXP 30
9524: PUSH
9525: LD_INT 92
9527: ST_TO_ADDR
// ru_radar := 98 ;
9528: LD_ADDR_EXP 25
9532: PUSH
9533: LD_INT 98
9535: ST_TO_ADDR
// tech_Artillery := 80 ;
9536: LD_ADDR_EXP 33
9540: PUSH
9541: LD_INT 80
9543: ST_TO_ADDR
// tech_RadMat := 81 ;
9544: LD_ADDR_EXP 34
9548: PUSH
9549: LD_INT 81
9551: ST_TO_ADDR
// tech_BasicTools := 82 ;
9552: LD_ADDR_EXP 35
9556: PUSH
9557: LD_INT 82
9559: ST_TO_ADDR
// tech_Cargo := 83 ;
9560: LD_ADDR_EXP 36
9564: PUSH
9565: LD_INT 83
9567: ST_TO_ADDR
// tech_Track := 84 ;
9568: LD_ADDR_EXP 37
9572: PUSH
9573: LD_INT 84
9575: ST_TO_ADDR
// tech_Crane := 85 ;
9576: LD_ADDR_EXP 38
9580: PUSH
9581: LD_INT 85
9583: ST_TO_ADDR
// tech_Bulldozer := 86 ;
9584: LD_ADDR_EXP 39
9588: PUSH
9589: LD_INT 86
9591: ST_TO_ADDR
// tech_Hovercraft := 87 ;
9592: LD_ADDR_EXP 40
9596: PUSH
9597: LD_INT 87
9599: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
9600: LD_ADDR_EXP 41
9604: PUSH
9605: LD_INT 88
9607: ST_TO_ADDR
// class_mastodont := 31 ;
9608: LD_ADDR_EXP 42
9612: PUSH
9613: LD_INT 31
9615: ST_TO_ADDR
// class_horse := 21 ;
9616: LD_ADDR_EXP 43
9620: PUSH
9621: LD_INT 21
9623: ST_TO_ADDR
// end ;
9624: LD_VAR 0 1
9628: RET
// every 1 do
9629: GO 9631
9631: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
9632: CALL 9469 0 0
9636: END
// every 0 0$1 do
9637: GO 9639
9639: DISABLE
// begin enable ;
9640: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
9641: LD_STRING updateTimer(
9643: PUSH
9644: LD_OWVAR 1
9648: STR
9649: PUSH
9650: LD_STRING );
9652: STR
9653: PPUSH
9654: CALL_OW 559
// end ;
9658: END
// export function SOS_MapStart ( ) ; begin
9659: LD_INT 0
9661: PPUSH
// if streamModeActive then
9662: LD_EXP 44
9666: IFFALSE 9675
// DefineStreamItems ( true ) ;
9668: LD_INT 1
9670: PPUSH
9671: CALL 11325 0 1
// UpdateFactoryWaypoints ( ) ;
9675: CALL 24909 0 0
// end ;
9679: LD_VAR 0 1
9683: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9684: LD_INT 0
9686: PPUSH
// if p2 = 100 then
9687: LD_VAR 0 2
9691: PUSH
9692: LD_INT 100
9694: EQUAL
9695: IFFALSE 10698
// begin if not StreamModeActive then
9697: LD_EXP 44
9701: NOT
9702: IFFALSE 9712
// StreamModeActive := true ;
9704: LD_ADDR_EXP 44
9708: PUSH
9709: LD_INT 1
9711: ST_TO_ADDR
// if p3 = 0 then
9712: LD_VAR 0 3
9716: PUSH
9717: LD_INT 0
9719: EQUAL
9720: IFFALSE 9726
// InitStreamMode ;
9722: CALL 10861 0 0
// if p3 = 1 then
9726: LD_VAR 0 3
9730: PUSH
9731: LD_INT 1
9733: EQUAL
9734: IFFALSE 9744
// sRocket := true ;
9736: LD_ADDR_EXP 49
9740: PUSH
9741: LD_INT 1
9743: ST_TO_ADDR
// if p3 = 2 then
9744: LD_VAR 0 3
9748: PUSH
9749: LD_INT 2
9751: EQUAL
9752: IFFALSE 9762
// sSpeed := true ;
9754: LD_ADDR_EXP 48
9758: PUSH
9759: LD_INT 1
9761: ST_TO_ADDR
// if p3 = 3 then
9762: LD_VAR 0 3
9766: PUSH
9767: LD_INT 3
9769: EQUAL
9770: IFFALSE 9780
// sEngine := true ;
9772: LD_ADDR_EXP 50
9776: PUSH
9777: LD_INT 1
9779: ST_TO_ADDR
// if p3 = 4 then
9780: LD_VAR 0 3
9784: PUSH
9785: LD_INT 4
9787: EQUAL
9788: IFFALSE 9798
// sSpec := true ;
9790: LD_ADDR_EXP 47
9794: PUSH
9795: LD_INT 1
9797: ST_TO_ADDR
// if p3 = 5 then
9798: LD_VAR 0 3
9802: PUSH
9803: LD_INT 5
9805: EQUAL
9806: IFFALSE 9816
// sLevel := true ;
9808: LD_ADDR_EXP 51
9812: PUSH
9813: LD_INT 1
9815: ST_TO_ADDR
// if p3 = 6 then
9816: LD_VAR 0 3
9820: PUSH
9821: LD_INT 6
9823: EQUAL
9824: IFFALSE 9834
// sArmoury := true ;
9826: LD_ADDR_EXP 52
9830: PUSH
9831: LD_INT 1
9833: ST_TO_ADDR
// if p3 = 7 then
9834: LD_VAR 0 3
9838: PUSH
9839: LD_INT 7
9841: EQUAL
9842: IFFALSE 9852
// sRadar := true ;
9844: LD_ADDR_EXP 53
9848: PUSH
9849: LD_INT 1
9851: ST_TO_ADDR
// if p3 = 8 then
9852: LD_VAR 0 3
9856: PUSH
9857: LD_INT 8
9859: EQUAL
9860: IFFALSE 9870
// sBunker := true ;
9862: LD_ADDR_EXP 54
9866: PUSH
9867: LD_INT 1
9869: ST_TO_ADDR
// if p3 = 9 then
9870: LD_VAR 0 3
9874: PUSH
9875: LD_INT 9
9877: EQUAL
9878: IFFALSE 9888
// sHack := true ;
9880: LD_ADDR_EXP 55
9884: PUSH
9885: LD_INT 1
9887: ST_TO_ADDR
// if p3 = 10 then
9888: LD_VAR 0 3
9892: PUSH
9893: LD_INT 10
9895: EQUAL
9896: IFFALSE 9906
// sFire := true ;
9898: LD_ADDR_EXP 56
9902: PUSH
9903: LD_INT 1
9905: ST_TO_ADDR
// if p3 = 11 then
9906: LD_VAR 0 3
9910: PUSH
9911: LD_INT 11
9913: EQUAL
9914: IFFALSE 9924
// sRefresh := true ;
9916: LD_ADDR_EXP 57
9920: PUSH
9921: LD_INT 1
9923: ST_TO_ADDR
// if p3 = 12 then
9924: LD_VAR 0 3
9928: PUSH
9929: LD_INT 12
9931: EQUAL
9932: IFFALSE 9942
// sExp := true ;
9934: LD_ADDR_EXP 58
9938: PUSH
9939: LD_INT 1
9941: ST_TO_ADDR
// if p3 = 13 then
9942: LD_VAR 0 3
9946: PUSH
9947: LD_INT 13
9949: EQUAL
9950: IFFALSE 9960
// sDepot := true ;
9952: LD_ADDR_EXP 59
9956: PUSH
9957: LD_INT 1
9959: ST_TO_ADDR
// if p3 = 14 then
9960: LD_VAR 0 3
9964: PUSH
9965: LD_INT 14
9967: EQUAL
9968: IFFALSE 9978
// sFlag := true ;
9970: LD_ADDR_EXP 60
9974: PUSH
9975: LD_INT 1
9977: ST_TO_ADDR
// if p3 = 15 then
9978: LD_VAR 0 3
9982: PUSH
9983: LD_INT 15
9985: EQUAL
9986: IFFALSE 9996
// sKamikadze := true ;
9988: LD_ADDR_EXP 68
9992: PUSH
9993: LD_INT 1
9995: ST_TO_ADDR
// if p3 = 16 then
9996: LD_VAR 0 3
10000: PUSH
10001: LD_INT 16
10003: EQUAL
10004: IFFALSE 10014
// sTroll := true ;
10006: LD_ADDR_EXP 69
10010: PUSH
10011: LD_INT 1
10013: ST_TO_ADDR
// if p3 = 17 then
10014: LD_VAR 0 3
10018: PUSH
10019: LD_INT 17
10021: EQUAL
10022: IFFALSE 10032
// sSlow := true ;
10024: LD_ADDR_EXP 70
10028: PUSH
10029: LD_INT 1
10031: ST_TO_ADDR
// if p3 = 18 then
10032: LD_VAR 0 3
10036: PUSH
10037: LD_INT 18
10039: EQUAL
10040: IFFALSE 10050
// sLack := true ;
10042: LD_ADDR_EXP 71
10046: PUSH
10047: LD_INT 1
10049: ST_TO_ADDR
// if p3 = 19 then
10050: LD_VAR 0 3
10054: PUSH
10055: LD_INT 19
10057: EQUAL
10058: IFFALSE 10068
// sTank := true ;
10060: LD_ADDR_EXP 73
10064: PUSH
10065: LD_INT 1
10067: ST_TO_ADDR
// if p3 = 20 then
10068: LD_VAR 0 3
10072: PUSH
10073: LD_INT 20
10075: EQUAL
10076: IFFALSE 10086
// sRemote := true ;
10078: LD_ADDR_EXP 74
10082: PUSH
10083: LD_INT 1
10085: ST_TO_ADDR
// if p3 = 21 then
10086: LD_VAR 0 3
10090: PUSH
10091: LD_INT 21
10093: EQUAL
10094: IFFALSE 10104
// sPowell := true ;
10096: LD_ADDR_EXP 75
10100: PUSH
10101: LD_INT 1
10103: ST_TO_ADDR
// if p3 = 22 then
10104: LD_VAR 0 3
10108: PUSH
10109: LD_INT 22
10111: EQUAL
10112: IFFALSE 10122
// sTeleport := true ;
10114: LD_ADDR_EXP 78
10118: PUSH
10119: LD_INT 1
10121: ST_TO_ADDR
// if p3 = 23 then
10122: LD_VAR 0 3
10126: PUSH
10127: LD_INT 23
10129: EQUAL
10130: IFFALSE 10140
// sOilTower := true ;
10132: LD_ADDR_EXP 80
10136: PUSH
10137: LD_INT 1
10139: ST_TO_ADDR
// if p3 = 24 then
10140: LD_VAR 0 3
10144: PUSH
10145: LD_INT 24
10147: EQUAL
10148: IFFALSE 10158
// sShovel := true ;
10150: LD_ADDR_EXP 81
10154: PUSH
10155: LD_INT 1
10157: ST_TO_ADDR
// if p3 = 25 then
10158: LD_VAR 0 3
10162: PUSH
10163: LD_INT 25
10165: EQUAL
10166: IFFALSE 10176
// sSheik := true ;
10168: LD_ADDR_EXP 82
10172: PUSH
10173: LD_INT 1
10175: ST_TO_ADDR
// if p3 = 26 then
10176: LD_VAR 0 3
10180: PUSH
10181: LD_INT 26
10183: EQUAL
10184: IFFALSE 10194
// sEarthquake := true ;
10186: LD_ADDR_EXP 84
10190: PUSH
10191: LD_INT 1
10193: ST_TO_ADDR
// if p3 = 27 then
10194: LD_VAR 0 3
10198: PUSH
10199: LD_INT 27
10201: EQUAL
10202: IFFALSE 10212
// sAI := true ;
10204: LD_ADDR_EXP 85
10208: PUSH
10209: LD_INT 1
10211: ST_TO_ADDR
// if p3 = 28 then
10212: LD_VAR 0 3
10216: PUSH
10217: LD_INT 28
10219: EQUAL
10220: IFFALSE 10230
// sCargo := true ;
10222: LD_ADDR_EXP 88
10226: PUSH
10227: LD_INT 1
10229: ST_TO_ADDR
// if p3 = 29 then
10230: LD_VAR 0 3
10234: PUSH
10235: LD_INT 29
10237: EQUAL
10238: IFFALSE 10248
// sDLaser := true ;
10240: LD_ADDR_EXP 89
10244: PUSH
10245: LD_INT 1
10247: ST_TO_ADDR
// if p3 = 30 then
10248: LD_VAR 0 3
10252: PUSH
10253: LD_INT 30
10255: EQUAL
10256: IFFALSE 10266
// sExchange := true ;
10258: LD_ADDR_EXP 90
10262: PUSH
10263: LD_INT 1
10265: ST_TO_ADDR
// if p3 = 31 then
10266: LD_VAR 0 3
10270: PUSH
10271: LD_INT 31
10273: EQUAL
10274: IFFALSE 10284
// sFac := true ;
10276: LD_ADDR_EXP 91
10280: PUSH
10281: LD_INT 1
10283: ST_TO_ADDR
// if p3 = 32 then
10284: LD_VAR 0 3
10288: PUSH
10289: LD_INT 32
10291: EQUAL
10292: IFFALSE 10302
// sPower := true ;
10294: LD_ADDR_EXP 92
10298: PUSH
10299: LD_INT 1
10301: ST_TO_ADDR
// if p3 = 33 then
10302: LD_VAR 0 3
10306: PUSH
10307: LD_INT 33
10309: EQUAL
10310: IFFALSE 10320
// sRandom := true ;
10312: LD_ADDR_EXP 93
10316: PUSH
10317: LD_INT 1
10319: ST_TO_ADDR
// if p3 = 34 then
10320: LD_VAR 0 3
10324: PUSH
10325: LD_INT 34
10327: EQUAL
10328: IFFALSE 10338
// sShield := true ;
10330: LD_ADDR_EXP 94
10334: PUSH
10335: LD_INT 1
10337: ST_TO_ADDR
// if p3 = 35 then
10338: LD_VAR 0 3
10342: PUSH
10343: LD_INT 35
10345: EQUAL
10346: IFFALSE 10356
// sTime := true ;
10348: LD_ADDR_EXP 95
10352: PUSH
10353: LD_INT 1
10355: ST_TO_ADDR
// if p3 = 36 then
10356: LD_VAR 0 3
10360: PUSH
10361: LD_INT 36
10363: EQUAL
10364: IFFALSE 10374
// sTools := true ;
10366: LD_ADDR_EXP 96
10370: PUSH
10371: LD_INT 1
10373: ST_TO_ADDR
// if p3 = 101 then
10374: LD_VAR 0 3
10378: PUSH
10379: LD_INT 101
10381: EQUAL
10382: IFFALSE 10392
// sSold := true ;
10384: LD_ADDR_EXP 61
10388: PUSH
10389: LD_INT 1
10391: ST_TO_ADDR
// if p3 = 102 then
10392: LD_VAR 0 3
10396: PUSH
10397: LD_INT 102
10399: EQUAL
10400: IFFALSE 10410
// sDiff := true ;
10402: LD_ADDR_EXP 62
10406: PUSH
10407: LD_INT 1
10409: ST_TO_ADDR
// if p3 = 103 then
10410: LD_VAR 0 3
10414: PUSH
10415: LD_INT 103
10417: EQUAL
10418: IFFALSE 10428
// sFog := true ;
10420: LD_ADDR_EXP 65
10424: PUSH
10425: LD_INT 1
10427: ST_TO_ADDR
// if p3 = 104 then
10428: LD_VAR 0 3
10432: PUSH
10433: LD_INT 104
10435: EQUAL
10436: IFFALSE 10446
// sReset := true ;
10438: LD_ADDR_EXP 66
10442: PUSH
10443: LD_INT 1
10445: ST_TO_ADDR
// if p3 = 105 then
10446: LD_VAR 0 3
10450: PUSH
10451: LD_INT 105
10453: EQUAL
10454: IFFALSE 10464
// sSun := true ;
10456: LD_ADDR_EXP 67
10460: PUSH
10461: LD_INT 1
10463: ST_TO_ADDR
// if p3 = 106 then
10464: LD_VAR 0 3
10468: PUSH
10469: LD_INT 106
10471: EQUAL
10472: IFFALSE 10482
// sTiger := true ;
10474: LD_ADDR_EXP 63
10478: PUSH
10479: LD_INT 1
10481: ST_TO_ADDR
// if p3 = 107 then
10482: LD_VAR 0 3
10486: PUSH
10487: LD_INT 107
10489: EQUAL
10490: IFFALSE 10500
// sBomb := true ;
10492: LD_ADDR_EXP 64
10496: PUSH
10497: LD_INT 1
10499: ST_TO_ADDR
// if p3 = 108 then
10500: LD_VAR 0 3
10504: PUSH
10505: LD_INT 108
10507: EQUAL
10508: IFFALSE 10518
// sWound := true ;
10510: LD_ADDR_EXP 72
10514: PUSH
10515: LD_INT 1
10517: ST_TO_ADDR
// if p3 = 109 then
10518: LD_VAR 0 3
10522: PUSH
10523: LD_INT 109
10525: EQUAL
10526: IFFALSE 10536
// sBetray := true ;
10528: LD_ADDR_EXP 76
10532: PUSH
10533: LD_INT 1
10535: ST_TO_ADDR
// if p3 = 110 then
10536: LD_VAR 0 3
10540: PUSH
10541: LD_INT 110
10543: EQUAL
10544: IFFALSE 10554
// sContamin := true ;
10546: LD_ADDR_EXP 77
10550: PUSH
10551: LD_INT 1
10553: ST_TO_ADDR
// if p3 = 111 then
10554: LD_VAR 0 3
10558: PUSH
10559: LD_INT 111
10561: EQUAL
10562: IFFALSE 10572
// sOil := true ;
10564: LD_ADDR_EXP 79
10568: PUSH
10569: LD_INT 1
10571: ST_TO_ADDR
// if p3 = 112 then
10572: LD_VAR 0 3
10576: PUSH
10577: LD_INT 112
10579: EQUAL
10580: IFFALSE 10590
// sStu := true ;
10582: LD_ADDR_EXP 83
10586: PUSH
10587: LD_INT 1
10589: ST_TO_ADDR
// if p3 = 113 then
10590: LD_VAR 0 3
10594: PUSH
10595: LD_INT 113
10597: EQUAL
10598: IFFALSE 10608
// sBazooka := true ;
10600: LD_ADDR_EXP 86
10604: PUSH
10605: LD_INT 1
10607: ST_TO_ADDR
// if p3 = 114 then
10608: LD_VAR 0 3
10612: PUSH
10613: LD_INT 114
10615: EQUAL
10616: IFFALSE 10626
// sMortar := true ;
10618: LD_ADDR_EXP 87
10622: PUSH
10623: LD_INT 1
10625: ST_TO_ADDR
// if p3 = 115 then
10626: LD_VAR 0 3
10630: PUSH
10631: LD_INT 115
10633: EQUAL
10634: IFFALSE 10644
// sRanger := true ;
10636: LD_ADDR_EXP 97
10640: PUSH
10641: LD_INT 1
10643: ST_TO_ADDR
// if p3 = 116 then
10644: LD_VAR 0 3
10648: PUSH
10649: LD_INT 116
10651: EQUAL
10652: IFFALSE 10662
// sComputer := true ;
10654: LD_ADDR_EXP 98
10658: PUSH
10659: LD_INT 1
10661: ST_TO_ADDR
// if p3 = 117 then
10662: LD_VAR 0 3
10666: PUSH
10667: LD_INT 117
10669: EQUAL
10670: IFFALSE 10680
// s30 := true ;
10672: LD_ADDR_EXP 99
10676: PUSH
10677: LD_INT 1
10679: ST_TO_ADDR
// if p3 = 118 then
10680: LD_VAR 0 3
10684: PUSH
10685: LD_INT 118
10687: EQUAL
10688: IFFALSE 10698
// s60 := true ;
10690: LD_ADDR_EXP 100
10694: PUSH
10695: LD_INT 1
10697: ST_TO_ADDR
// end ; if p2 = 101 then
10698: LD_VAR 0 2
10702: PUSH
10703: LD_INT 101
10705: EQUAL
10706: IFFALSE 10834
// begin case p3 of 1 :
10708: LD_VAR 0 3
10712: PUSH
10713: LD_INT 1
10715: DOUBLE
10716: EQUAL
10717: IFTRUE 10721
10719: GO 10728
10721: POP
// hHackUnlimitedResources ; 2 :
10722: CALL 22932 0 0
10726: GO 10834
10728: LD_INT 2
10730: DOUBLE
10731: EQUAL
10732: IFTRUE 10736
10734: GO 10743
10736: POP
// hHackSetLevel10 ; 3 :
10737: CALL 23065 0 0
10741: GO 10834
10743: LD_INT 3
10745: DOUBLE
10746: EQUAL
10747: IFTRUE 10751
10749: GO 10758
10751: POP
// hHackSetLevel10YourUnits ; 4 :
10752: CALL 23150 0 0
10756: GO 10834
10758: LD_INT 4
10760: DOUBLE
10761: EQUAL
10762: IFTRUE 10766
10764: GO 10773
10766: POP
// hHackInvincible ; 5 :
10767: CALL 23598 0 0
10771: GO 10834
10773: LD_INT 5
10775: DOUBLE
10776: EQUAL
10777: IFTRUE 10781
10779: GO 10788
10781: POP
// hHackInvisible ; 6 :
10782: CALL 23709 0 0
10786: GO 10834
10788: LD_INT 6
10790: DOUBLE
10791: EQUAL
10792: IFTRUE 10796
10794: GO 10803
10796: POP
// hHackChangeYourSide ; 7 :
10797: CALL 23766 0 0
10801: GO 10834
10803: LD_INT 7
10805: DOUBLE
10806: EQUAL
10807: IFTRUE 10811
10809: GO 10818
10811: POP
// hHackChangeUnitSide ; 8 :
10812: CALL 23808 0 0
10816: GO 10834
10818: LD_INT 8
10820: DOUBLE
10821: EQUAL
10822: IFTRUE 10826
10824: GO 10833
10826: POP
// hHackFog ; end ;
10827: CALL 23909 0 0
10831: GO 10834
10833: POP
// end ; end ;
10834: LD_VAR 0 7
10838: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
10839: GO 10841
10841: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
10842: LD_STRING initStreamRollete();
10844: PPUSH
10845: CALL_OW 559
// InitStreamMode ;
10849: CALL 10861 0 0
// DefineStreamItems ( false ) ;
10853: LD_INT 0
10855: PPUSH
10856: CALL 11325 0 1
// end ;
10860: END
// function InitStreamMode ; begin
10861: LD_INT 0
10863: PPUSH
// streamModeActive := false ;
10864: LD_ADDR_EXP 44
10868: PUSH
10869: LD_INT 0
10871: ST_TO_ADDR
// normalCounter := 36 ;
10872: LD_ADDR_EXP 45
10876: PUSH
10877: LD_INT 36
10879: ST_TO_ADDR
// hardcoreCounter := 18 ;
10880: LD_ADDR_EXP 46
10884: PUSH
10885: LD_INT 18
10887: ST_TO_ADDR
// sRocket := false ;
10888: LD_ADDR_EXP 49
10892: PUSH
10893: LD_INT 0
10895: ST_TO_ADDR
// sSpeed := false ;
10896: LD_ADDR_EXP 48
10900: PUSH
10901: LD_INT 0
10903: ST_TO_ADDR
// sEngine := false ;
10904: LD_ADDR_EXP 50
10908: PUSH
10909: LD_INT 0
10911: ST_TO_ADDR
// sSpec := false ;
10912: LD_ADDR_EXP 47
10916: PUSH
10917: LD_INT 0
10919: ST_TO_ADDR
// sLevel := false ;
10920: LD_ADDR_EXP 51
10924: PUSH
10925: LD_INT 0
10927: ST_TO_ADDR
// sArmoury := false ;
10928: LD_ADDR_EXP 52
10932: PUSH
10933: LD_INT 0
10935: ST_TO_ADDR
// sRadar := false ;
10936: LD_ADDR_EXP 53
10940: PUSH
10941: LD_INT 0
10943: ST_TO_ADDR
// sBunker := false ;
10944: LD_ADDR_EXP 54
10948: PUSH
10949: LD_INT 0
10951: ST_TO_ADDR
// sHack := false ;
10952: LD_ADDR_EXP 55
10956: PUSH
10957: LD_INT 0
10959: ST_TO_ADDR
// sFire := false ;
10960: LD_ADDR_EXP 56
10964: PUSH
10965: LD_INT 0
10967: ST_TO_ADDR
// sRefresh := false ;
10968: LD_ADDR_EXP 57
10972: PUSH
10973: LD_INT 0
10975: ST_TO_ADDR
// sExp := false ;
10976: LD_ADDR_EXP 58
10980: PUSH
10981: LD_INT 0
10983: ST_TO_ADDR
// sDepot := false ;
10984: LD_ADDR_EXP 59
10988: PUSH
10989: LD_INT 0
10991: ST_TO_ADDR
// sFlag := false ;
10992: LD_ADDR_EXP 60
10996: PUSH
10997: LD_INT 0
10999: ST_TO_ADDR
// sKamikadze := false ;
11000: LD_ADDR_EXP 68
11004: PUSH
11005: LD_INT 0
11007: ST_TO_ADDR
// sTroll := false ;
11008: LD_ADDR_EXP 69
11012: PUSH
11013: LD_INT 0
11015: ST_TO_ADDR
// sSlow := false ;
11016: LD_ADDR_EXP 70
11020: PUSH
11021: LD_INT 0
11023: ST_TO_ADDR
// sLack := false ;
11024: LD_ADDR_EXP 71
11028: PUSH
11029: LD_INT 0
11031: ST_TO_ADDR
// sTank := false ;
11032: LD_ADDR_EXP 73
11036: PUSH
11037: LD_INT 0
11039: ST_TO_ADDR
// sRemote := false ;
11040: LD_ADDR_EXP 74
11044: PUSH
11045: LD_INT 0
11047: ST_TO_ADDR
// sPowell := false ;
11048: LD_ADDR_EXP 75
11052: PUSH
11053: LD_INT 0
11055: ST_TO_ADDR
// sTeleport := false ;
11056: LD_ADDR_EXP 78
11060: PUSH
11061: LD_INT 0
11063: ST_TO_ADDR
// sOilTower := false ;
11064: LD_ADDR_EXP 80
11068: PUSH
11069: LD_INT 0
11071: ST_TO_ADDR
// sShovel := false ;
11072: LD_ADDR_EXP 81
11076: PUSH
11077: LD_INT 0
11079: ST_TO_ADDR
// sSheik := false ;
11080: LD_ADDR_EXP 82
11084: PUSH
11085: LD_INT 0
11087: ST_TO_ADDR
// sEarthquake := false ;
11088: LD_ADDR_EXP 84
11092: PUSH
11093: LD_INT 0
11095: ST_TO_ADDR
// sAI := false ;
11096: LD_ADDR_EXP 85
11100: PUSH
11101: LD_INT 0
11103: ST_TO_ADDR
// sCargo := false ;
11104: LD_ADDR_EXP 88
11108: PUSH
11109: LD_INT 0
11111: ST_TO_ADDR
// sDLaser := false ;
11112: LD_ADDR_EXP 89
11116: PUSH
11117: LD_INT 0
11119: ST_TO_ADDR
// sExchange := false ;
11120: LD_ADDR_EXP 90
11124: PUSH
11125: LD_INT 0
11127: ST_TO_ADDR
// sFac := false ;
11128: LD_ADDR_EXP 91
11132: PUSH
11133: LD_INT 0
11135: ST_TO_ADDR
// sPower := false ;
11136: LD_ADDR_EXP 92
11140: PUSH
11141: LD_INT 0
11143: ST_TO_ADDR
// sRandom := false ;
11144: LD_ADDR_EXP 93
11148: PUSH
11149: LD_INT 0
11151: ST_TO_ADDR
// sShield := false ;
11152: LD_ADDR_EXP 94
11156: PUSH
11157: LD_INT 0
11159: ST_TO_ADDR
// sTime := false ;
11160: LD_ADDR_EXP 95
11164: PUSH
11165: LD_INT 0
11167: ST_TO_ADDR
// sTools := false ;
11168: LD_ADDR_EXP 96
11172: PUSH
11173: LD_INT 0
11175: ST_TO_ADDR
// sSold := false ;
11176: LD_ADDR_EXP 61
11180: PUSH
11181: LD_INT 0
11183: ST_TO_ADDR
// sDiff := false ;
11184: LD_ADDR_EXP 62
11188: PUSH
11189: LD_INT 0
11191: ST_TO_ADDR
// sFog := false ;
11192: LD_ADDR_EXP 65
11196: PUSH
11197: LD_INT 0
11199: ST_TO_ADDR
// sReset := false ;
11200: LD_ADDR_EXP 66
11204: PUSH
11205: LD_INT 0
11207: ST_TO_ADDR
// sSun := false ;
11208: LD_ADDR_EXP 67
11212: PUSH
11213: LD_INT 0
11215: ST_TO_ADDR
// sTiger := false ;
11216: LD_ADDR_EXP 63
11220: PUSH
11221: LD_INT 0
11223: ST_TO_ADDR
// sBomb := false ;
11224: LD_ADDR_EXP 64
11228: PUSH
11229: LD_INT 0
11231: ST_TO_ADDR
// sWound := false ;
11232: LD_ADDR_EXP 72
11236: PUSH
11237: LD_INT 0
11239: ST_TO_ADDR
// sBetray := false ;
11240: LD_ADDR_EXP 76
11244: PUSH
11245: LD_INT 0
11247: ST_TO_ADDR
// sContamin := false ;
11248: LD_ADDR_EXP 77
11252: PUSH
11253: LD_INT 0
11255: ST_TO_ADDR
// sOil := false ;
11256: LD_ADDR_EXP 79
11260: PUSH
11261: LD_INT 0
11263: ST_TO_ADDR
// sStu := false ;
11264: LD_ADDR_EXP 83
11268: PUSH
11269: LD_INT 0
11271: ST_TO_ADDR
// sBazooka := false ;
11272: LD_ADDR_EXP 86
11276: PUSH
11277: LD_INT 0
11279: ST_TO_ADDR
// sMortar := false ;
11280: LD_ADDR_EXP 87
11284: PUSH
11285: LD_INT 0
11287: ST_TO_ADDR
// sRanger := false ;
11288: LD_ADDR_EXP 97
11292: PUSH
11293: LD_INT 0
11295: ST_TO_ADDR
// sComputer := false ;
11296: LD_ADDR_EXP 98
11300: PUSH
11301: LD_INT 0
11303: ST_TO_ADDR
// s30 := false ;
11304: LD_ADDR_EXP 99
11308: PUSH
11309: LD_INT 0
11311: ST_TO_ADDR
// s60 := false ;
11312: LD_ADDR_EXP 100
11316: PUSH
11317: LD_INT 0
11319: ST_TO_ADDR
// end ;
11320: LD_VAR 0 1
11324: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
11325: LD_INT 0
11327: PPUSH
11328: PPUSH
11329: PPUSH
11330: PPUSH
11331: PPUSH
11332: PPUSH
11333: PPUSH
// result := [ ] ;
11334: LD_ADDR_VAR 0 2
11338: PUSH
11339: EMPTY
11340: ST_TO_ADDR
// if campaign_id = 1 then
11341: LD_OWVAR 69
11345: PUSH
11346: LD_INT 1
11348: EQUAL
11349: IFFALSE 14515
// begin case mission_number of 1 :
11351: LD_OWVAR 70
11355: PUSH
11356: LD_INT 1
11358: DOUBLE
11359: EQUAL
11360: IFTRUE 11364
11362: GO 11440
11364: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
11365: LD_ADDR_VAR 0 2
11369: PUSH
11370: LD_INT 2
11372: PUSH
11373: LD_INT 4
11375: PUSH
11376: LD_INT 11
11378: PUSH
11379: LD_INT 12
11381: PUSH
11382: LD_INT 15
11384: PUSH
11385: LD_INT 16
11387: PUSH
11388: LD_INT 22
11390: PUSH
11391: LD_INT 23
11393: PUSH
11394: LD_INT 26
11396: PUSH
11397: EMPTY
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: PUSH
11408: LD_INT 101
11410: PUSH
11411: LD_INT 102
11413: PUSH
11414: LD_INT 106
11416: PUSH
11417: LD_INT 116
11419: PUSH
11420: LD_INT 117
11422: PUSH
11423: LD_INT 118
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: ST_TO_ADDR
11438: GO 14513
11440: LD_INT 2
11442: DOUBLE
11443: EQUAL
11444: IFTRUE 11448
11446: GO 11532
11448: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
11449: LD_ADDR_VAR 0 2
11453: PUSH
11454: LD_INT 2
11456: PUSH
11457: LD_INT 4
11459: PUSH
11460: LD_INT 11
11462: PUSH
11463: LD_INT 12
11465: PUSH
11466: LD_INT 15
11468: PUSH
11469: LD_INT 16
11471: PUSH
11472: LD_INT 22
11474: PUSH
11475: LD_INT 23
11477: PUSH
11478: LD_INT 26
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: PUSH
11492: LD_INT 101
11494: PUSH
11495: LD_INT 102
11497: PUSH
11498: LD_INT 105
11500: PUSH
11501: LD_INT 106
11503: PUSH
11504: LD_INT 108
11506: PUSH
11507: LD_INT 116
11509: PUSH
11510: LD_INT 117
11512: PUSH
11513: LD_INT 118
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: ST_TO_ADDR
11530: GO 14513
11532: LD_INT 3
11534: DOUBLE
11535: EQUAL
11536: IFTRUE 11540
11538: GO 11628
11540: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
11541: LD_ADDR_VAR 0 2
11545: PUSH
11546: LD_INT 2
11548: PUSH
11549: LD_INT 4
11551: PUSH
11552: LD_INT 5
11554: PUSH
11555: LD_INT 11
11557: PUSH
11558: LD_INT 12
11560: PUSH
11561: LD_INT 15
11563: PUSH
11564: LD_INT 16
11566: PUSH
11567: LD_INT 22
11569: PUSH
11570: LD_INT 26
11572: PUSH
11573: LD_INT 36
11575: PUSH
11576: EMPTY
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: PUSH
11588: LD_INT 101
11590: PUSH
11591: LD_INT 102
11593: PUSH
11594: LD_INT 105
11596: PUSH
11597: LD_INT 106
11599: PUSH
11600: LD_INT 108
11602: PUSH
11603: LD_INT 116
11605: PUSH
11606: LD_INT 117
11608: PUSH
11609: LD_INT 118
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: ST_TO_ADDR
11626: GO 14513
11628: LD_INT 4
11630: DOUBLE
11631: EQUAL
11632: IFTRUE 11636
11634: GO 11732
11636: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
11637: LD_ADDR_VAR 0 2
11641: PUSH
11642: LD_INT 2
11644: PUSH
11645: LD_INT 4
11647: PUSH
11648: LD_INT 5
11650: PUSH
11651: LD_INT 8
11653: PUSH
11654: LD_INT 11
11656: PUSH
11657: LD_INT 12
11659: PUSH
11660: LD_INT 15
11662: PUSH
11663: LD_INT 16
11665: PUSH
11666: LD_INT 22
11668: PUSH
11669: LD_INT 23
11671: PUSH
11672: LD_INT 26
11674: PUSH
11675: LD_INT 36
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: PUSH
11692: LD_INT 101
11694: PUSH
11695: LD_INT 102
11697: PUSH
11698: LD_INT 105
11700: PUSH
11701: LD_INT 106
11703: PUSH
11704: LD_INT 108
11706: PUSH
11707: LD_INT 116
11709: PUSH
11710: LD_INT 117
11712: PUSH
11713: LD_INT 118
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: ST_TO_ADDR
11730: GO 14513
11732: LD_INT 5
11734: DOUBLE
11735: EQUAL
11736: IFTRUE 11740
11738: GO 11852
11740: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
11741: LD_ADDR_VAR 0 2
11745: PUSH
11746: LD_INT 2
11748: PUSH
11749: LD_INT 4
11751: PUSH
11752: LD_INT 5
11754: PUSH
11755: LD_INT 6
11757: PUSH
11758: LD_INT 8
11760: PUSH
11761: LD_INT 11
11763: PUSH
11764: LD_INT 12
11766: PUSH
11767: LD_INT 15
11769: PUSH
11770: LD_INT 16
11772: PUSH
11773: LD_INT 22
11775: PUSH
11776: LD_INT 23
11778: PUSH
11779: LD_INT 25
11781: PUSH
11782: LD_INT 26
11784: PUSH
11785: LD_INT 36
11787: PUSH
11788: EMPTY
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: PUSH
11804: LD_INT 101
11806: PUSH
11807: LD_INT 102
11809: PUSH
11810: LD_INT 105
11812: PUSH
11813: LD_INT 106
11815: PUSH
11816: LD_INT 108
11818: PUSH
11819: LD_INT 109
11821: PUSH
11822: LD_INT 112
11824: PUSH
11825: LD_INT 116
11827: PUSH
11828: LD_INT 117
11830: PUSH
11831: LD_INT 118
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: ST_TO_ADDR
11850: GO 14513
11852: LD_INT 6
11854: DOUBLE
11855: EQUAL
11856: IFTRUE 11860
11858: GO 11992
11860: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
11861: LD_ADDR_VAR 0 2
11865: PUSH
11866: LD_INT 2
11868: PUSH
11869: LD_INT 4
11871: PUSH
11872: LD_INT 5
11874: PUSH
11875: LD_INT 6
11877: PUSH
11878: LD_INT 8
11880: PUSH
11881: LD_INT 11
11883: PUSH
11884: LD_INT 12
11886: PUSH
11887: LD_INT 15
11889: PUSH
11890: LD_INT 16
11892: PUSH
11893: LD_INT 20
11895: PUSH
11896: LD_INT 21
11898: PUSH
11899: LD_INT 22
11901: PUSH
11902: LD_INT 23
11904: PUSH
11905: LD_INT 25
11907: PUSH
11908: LD_INT 26
11910: PUSH
11911: LD_INT 30
11913: PUSH
11914: LD_INT 31
11916: PUSH
11917: LD_INT 32
11919: PUSH
11920: LD_INT 36
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: PUSH
11944: LD_INT 101
11946: PUSH
11947: LD_INT 102
11949: PUSH
11950: LD_INT 105
11952: PUSH
11953: LD_INT 106
11955: PUSH
11956: LD_INT 108
11958: PUSH
11959: LD_INT 109
11961: PUSH
11962: LD_INT 112
11964: PUSH
11965: LD_INT 116
11967: PUSH
11968: LD_INT 117
11970: PUSH
11971: LD_INT 118
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: ST_TO_ADDR
11990: GO 14513
11992: LD_INT 7
11994: DOUBLE
11995: EQUAL
11996: IFTRUE 12000
11998: GO 12112
12000: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12001: LD_ADDR_VAR 0 2
12005: PUSH
12006: LD_INT 2
12008: PUSH
12009: LD_INT 4
12011: PUSH
12012: LD_INT 5
12014: PUSH
12015: LD_INT 7
12017: PUSH
12018: LD_INT 11
12020: PUSH
12021: LD_INT 12
12023: PUSH
12024: LD_INT 15
12026: PUSH
12027: LD_INT 16
12029: PUSH
12030: LD_INT 20
12032: PUSH
12033: LD_INT 21
12035: PUSH
12036: LD_INT 22
12038: PUSH
12039: LD_INT 23
12041: PUSH
12042: LD_INT 25
12044: PUSH
12045: LD_INT 26
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: PUSH
12064: LD_INT 101
12066: PUSH
12067: LD_INT 102
12069: PUSH
12070: LD_INT 103
12072: PUSH
12073: LD_INT 105
12075: PUSH
12076: LD_INT 106
12078: PUSH
12079: LD_INT 108
12081: PUSH
12082: LD_INT 112
12084: PUSH
12085: LD_INT 116
12087: PUSH
12088: LD_INT 117
12090: PUSH
12091: LD_INT 118
12093: PUSH
12094: EMPTY
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: ST_TO_ADDR
12110: GO 14513
12112: LD_INT 8
12114: DOUBLE
12115: EQUAL
12116: IFTRUE 12120
12118: GO 12260
12120: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12121: LD_ADDR_VAR 0 2
12125: PUSH
12126: LD_INT 2
12128: PUSH
12129: LD_INT 4
12131: PUSH
12132: LD_INT 5
12134: PUSH
12135: LD_INT 6
12137: PUSH
12138: LD_INT 7
12140: PUSH
12141: LD_INT 8
12143: PUSH
12144: LD_INT 11
12146: PUSH
12147: LD_INT 12
12149: PUSH
12150: LD_INT 15
12152: PUSH
12153: LD_INT 16
12155: PUSH
12156: LD_INT 20
12158: PUSH
12159: LD_INT 21
12161: PUSH
12162: LD_INT 22
12164: PUSH
12165: LD_INT 23
12167: PUSH
12168: LD_INT 25
12170: PUSH
12171: LD_INT 26
12173: PUSH
12174: LD_INT 30
12176: PUSH
12177: LD_INT 31
12179: PUSH
12180: LD_INT 32
12182: PUSH
12183: LD_INT 36
12185: PUSH
12186: EMPTY
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: PUSH
12208: LD_INT 101
12210: PUSH
12211: LD_INT 102
12213: PUSH
12214: LD_INT 103
12216: PUSH
12217: LD_INT 105
12219: PUSH
12220: LD_INT 106
12222: PUSH
12223: LD_INT 108
12225: PUSH
12226: LD_INT 109
12228: PUSH
12229: LD_INT 112
12231: PUSH
12232: LD_INT 116
12234: PUSH
12235: LD_INT 117
12237: PUSH
12238: LD_INT 118
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: ST_TO_ADDR
12258: GO 14513
12260: LD_INT 9
12262: DOUBLE
12263: EQUAL
12264: IFTRUE 12268
12266: GO 12416
12268: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
12269: LD_ADDR_VAR 0 2
12273: PUSH
12274: LD_INT 2
12276: PUSH
12277: LD_INT 4
12279: PUSH
12280: LD_INT 5
12282: PUSH
12283: LD_INT 6
12285: PUSH
12286: LD_INT 7
12288: PUSH
12289: LD_INT 8
12291: PUSH
12292: LD_INT 11
12294: PUSH
12295: LD_INT 12
12297: PUSH
12298: LD_INT 15
12300: PUSH
12301: LD_INT 16
12303: PUSH
12304: LD_INT 20
12306: PUSH
12307: LD_INT 21
12309: PUSH
12310: LD_INT 22
12312: PUSH
12313: LD_INT 23
12315: PUSH
12316: LD_INT 25
12318: PUSH
12319: LD_INT 26
12321: PUSH
12322: LD_INT 28
12324: PUSH
12325: LD_INT 30
12327: PUSH
12328: LD_INT 31
12330: PUSH
12331: LD_INT 32
12333: PUSH
12334: LD_INT 36
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: PUSH
12360: LD_INT 101
12362: PUSH
12363: LD_INT 102
12365: PUSH
12366: LD_INT 103
12368: PUSH
12369: LD_INT 105
12371: PUSH
12372: LD_INT 106
12374: PUSH
12375: LD_INT 108
12377: PUSH
12378: LD_INT 109
12380: PUSH
12381: LD_INT 112
12383: PUSH
12384: LD_INT 114
12386: PUSH
12387: LD_INT 116
12389: PUSH
12390: LD_INT 117
12392: PUSH
12393: LD_INT 118
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: PUSH
12410: EMPTY
12411: LIST
12412: LIST
12413: ST_TO_ADDR
12414: GO 14513
12416: LD_INT 10
12418: DOUBLE
12419: EQUAL
12420: IFTRUE 12424
12422: GO 12620
12424: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
12425: LD_ADDR_VAR 0 2
12429: PUSH
12430: LD_INT 2
12432: PUSH
12433: LD_INT 4
12435: PUSH
12436: LD_INT 5
12438: PUSH
12439: LD_INT 6
12441: PUSH
12442: LD_INT 7
12444: PUSH
12445: LD_INT 8
12447: PUSH
12448: LD_INT 9
12450: PUSH
12451: LD_INT 10
12453: PUSH
12454: LD_INT 11
12456: PUSH
12457: LD_INT 12
12459: PUSH
12460: LD_INT 13
12462: PUSH
12463: LD_INT 14
12465: PUSH
12466: LD_INT 15
12468: PUSH
12469: LD_INT 16
12471: PUSH
12472: LD_INT 17
12474: PUSH
12475: LD_INT 18
12477: PUSH
12478: LD_INT 19
12480: PUSH
12481: LD_INT 20
12483: PUSH
12484: LD_INT 21
12486: PUSH
12487: LD_INT 22
12489: PUSH
12490: LD_INT 23
12492: PUSH
12493: LD_INT 24
12495: PUSH
12496: LD_INT 25
12498: PUSH
12499: LD_INT 26
12501: PUSH
12502: LD_INT 28
12504: PUSH
12505: LD_INT 30
12507: PUSH
12508: LD_INT 31
12510: PUSH
12511: LD_INT 32
12513: PUSH
12514: LD_INT 36
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: PUSH
12548: LD_INT 101
12550: PUSH
12551: LD_INT 102
12553: PUSH
12554: LD_INT 103
12556: PUSH
12557: LD_INT 104
12559: PUSH
12560: LD_INT 105
12562: PUSH
12563: LD_INT 106
12565: PUSH
12566: LD_INT 107
12568: PUSH
12569: LD_INT 108
12571: PUSH
12572: LD_INT 109
12574: PUSH
12575: LD_INT 110
12577: PUSH
12578: LD_INT 111
12580: PUSH
12581: LD_INT 112
12583: PUSH
12584: LD_INT 114
12586: PUSH
12587: LD_INT 116
12589: PUSH
12590: LD_INT 117
12592: PUSH
12593: LD_INT 118
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: LIST
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: LIST
12606: LIST
12607: LIST
12608: LIST
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: ST_TO_ADDR
12618: GO 14513
12620: LD_INT 11
12622: DOUBLE
12623: EQUAL
12624: IFTRUE 12628
12626: GO 12832
12628: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
12629: LD_ADDR_VAR 0 2
12633: PUSH
12634: LD_INT 2
12636: PUSH
12637: LD_INT 3
12639: PUSH
12640: LD_INT 4
12642: PUSH
12643: LD_INT 5
12645: PUSH
12646: LD_INT 6
12648: PUSH
12649: LD_INT 7
12651: PUSH
12652: LD_INT 8
12654: PUSH
12655: LD_INT 9
12657: PUSH
12658: LD_INT 10
12660: PUSH
12661: LD_INT 11
12663: PUSH
12664: LD_INT 12
12666: PUSH
12667: LD_INT 13
12669: PUSH
12670: LD_INT 14
12672: PUSH
12673: LD_INT 15
12675: PUSH
12676: LD_INT 16
12678: PUSH
12679: LD_INT 17
12681: PUSH
12682: LD_INT 18
12684: PUSH
12685: LD_INT 19
12687: PUSH
12688: LD_INT 20
12690: PUSH
12691: LD_INT 21
12693: PUSH
12694: LD_INT 22
12696: PUSH
12697: LD_INT 23
12699: PUSH
12700: LD_INT 24
12702: PUSH
12703: LD_INT 25
12705: PUSH
12706: LD_INT 26
12708: PUSH
12709: LD_INT 28
12711: PUSH
12712: LD_INT 30
12714: PUSH
12715: LD_INT 31
12717: PUSH
12718: LD_INT 32
12720: PUSH
12721: LD_INT 34
12723: PUSH
12724: LD_INT 36
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: PUSH
12760: LD_INT 101
12762: PUSH
12763: LD_INT 102
12765: PUSH
12766: LD_INT 103
12768: PUSH
12769: LD_INT 104
12771: PUSH
12772: LD_INT 105
12774: PUSH
12775: LD_INT 106
12777: PUSH
12778: LD_INT 107
12780: PUSH
12781: LD_INT 108
12783: PUSH
12784: LD_INT 109
12786: PUSH
12787: LD_INT 110
12789: PUSH
12790: LD_INT 111
12792: PUSH
12793: LD_INT 112
12795: PUSH
12796: LD_INT 114
12798: PUSH
12799: LD_INT 116
12801: PUSH
12802: LD_INT 117
12804: PUSH
12805: LD_INT 118
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: PUSH
12826: EMPTY
12827: LIST
12828: LIST
12829: ST_TO_ADDR
12830: GO 14513
12832: LD_INT 12
12834: DOUBLE
12835: EQUAL
12836: IFTRUE 12840
12838: GO 13060
12840: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
12841: LD_ADDR_VAR 0 2
12845: PUSH
12846: LD_INT 1
12848: PUSH
12849: LD_INT 2
12851: PUSH
12852: LD_INT 3
12854: PUSH
12855: LD_INT 4
12857: PUSH
12858: LD_INT 5
12860: PUSH
12861: LD_INT 6
12863: PUSH
12864: LD_INT 7
12866: PUSH
12867: LD_INT 8
12869: PUSH
12870: LD_INT 9
12872: PUSH
12873: LD_INT 10
12875: PUSH
12876: LD_INT 11
12878: PUSH
12879: LD_INT 12
12881: PUSH
12882: LD_INT 13
12884: PUSH
12885: LD_INT 14
12887: PUSH
12888: LD_INT 15
12890: PUSH
12891: LD_INT 16
12893: PUSH
12894: LD_INT 17
12896: PUSH
12897: LD_INT 18
12899: PUSH
12900: LD_INT 19
12902: PUSH
12903: LD_INT 20
12905: PUSH
12906: LD_INT 21
12908: PUSH
12909: LD_INT 22
12911: PUSH
12912: LD_INT 23
12914: PUSH
12915: LD_INT 24
12917: PUSH
12918: LD_INT 25
12920: PUSH
12921: LD_INT 26
12923: PUSH
12924: LD_INT 27
12926: PUSH
12927: LD_INT 28
12929: PUSH
12930: LD_INT 30
12932: PUSH
12933: LD_INT 31
12935: PUSH
12936: LD_INT 32
12938: PUSH
12939: LD_INT 33
12941: PUSH
12942: LD_INT 34
12944: PUSH
12945: LD_INT 36
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: PUSH
12984: LD_INT 101
12986: PUSH
12987: LD_INT 102
12989: PUSH
12990: LD_INT 103
12992: PUSH
12993: LD_INT 104
12995: PUSH
12996: LD_INT 105
12998: PUSH
12999: LD_INT 106
13001: PUSH
13002: LD_INT 107
13004: PUSH
13005: LD_INT 108
13007: PUSH
13008: LD_INT 109
13010: PUSH
13011: LD_INT 110
13013: PUSH
13014: LD_INT 111
13016: PUSH
13017: LD_INT 112
13019: PUSH
13020: LD_INT 113
13022: PUSH
13023: LD_INT 114
13025: PUSH
13026: LD_INT 116
13028: PUSH
13029: LD_INT 117
13031: PUSH
13032: LD_INT 118
13034: PUSH
13035: EMPTY
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: LIST
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: ST_TO_ADDR
13058: GO 14513
13060: LD_INT 13
13062: DOUBLE
13063: EQUAL
13064: IFTRUE 13068
13066: GO 13276
13068: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13069: LD_ADDR_VAR 0 2
13073: PUSH
13074: LD_INT 1
13076: PUSH
13077: LD_INT 2
13079: PUSH
13080: LD_INT 3
13082: PUSH
13083: LD_INT 4
13085: PUSH
13086: LD_INT 5
13088: PUSH
13089: LD_INT 8
13091: PUSH
13092: LD_INT 9
13094: PUSH
13095: LD_INT 10
13097: PUSH
13098: LD_INT 11
13100: PUSH
13101: LD_INT 12
13103: PUSH
13104: LD_INT 14
13106: PUSH
13107: LD_INT 15
13109: PUSH
13110: LD_INT 16
13112: PUSH
13113: LD_INT 17
13115: PUSH
13116: LD_INT 18
13118: PUSH
13119: LD_INT 19
13121: PUSH
13122: LD_INT 20
13124: PUSH
13125: LD_INT 21
13127: PUSH
13128: LD_INT 22
13130: PUSH
13131: LD_INT 23
13133: PUSH
13134: LD_INT 24
13136: PUSH
13137: LD_INT 25
13139: PUSH
13140: LD_INT 26
13142: PUSH
13143: LD_INT 27
13145: PUSH
13146: LD_INT 28
13148: PUSH
13149: LD_INT 30
13151: PUSH
13152: LD_INT 31
13154: PUSH
13155: LD_INT 32
13157: PUSH
13158: LD_INT 33
13160: PUSH
13161: LD_INT 34
13163: PUSH
13164: LD_INT 36
13166: PUSH
13167: EMPTY
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: PUSH
13200: LD_INT 101
13202: PUSH
13203: LD_INT 102
13205: PUSH
13206: LD_INT 103
13208: PUSH
13209: LD_INT 104
13211: PUSH
13212: LD_INT 105
13214: PUSH
13215: LD_INT 106
13217: PUSH
13218: LD_INT 107
13220: PUSH
13221: LD_INT 108
13223: PUSH
13224: LD_INT 109
13226: PUSH
13227: LD_INT 110
13229: PUSH
13230: LD_INT 111
13232: PUSH
13233: LD_INT 112
13235: PUSH
13236: LD_INT 113
13238: PUSH
13239: LD_INT 114
13241: PUSH
13242: LD_INT 116
13244: PUSH
13245: LD_INT 117
13247: PUSH
13248: LD_INT 118
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: ST_TO_ADDR
13274: GO 14513
13276: LD_INT 14
13278: DOUBLE
13279: EQUAL
13280: IFTRUE 13284
13282: GO 13508
13284: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
13285: LD_ADDR_VAR 0 2
13289: PUSH
13290: LD_INT 1
13292: PUSH
13293: LD_INT 2
13295: PUSH
13296: LD_INT 3
13298: PUSH
13299: LD_INT 4
13301: PUSH
13302: LD_INT 5
13304: PUSH
13305: LD_INT 6
13307: PUSH
13308: LD_INT 7
13310: PUSH
13311: LD_INT 8
13313: PUSH
13314: LD_INT 9
13316: PUSH
13317: LD_INT 10
13319: PUSH
13320: LD_INT 11
13322: PUSH
13323: LD_INT 12
13325: PUSH
13326: LD_INT 13
13328: PUSH
13329: LD_INT 14
13331: PUSH
13332: LD_INT 15
13334: PUSH
13335: LD_INT 16
13337: PUSH
13338: LD_INT 17
13340: PUSH
13341: LD_INT 18
13343: PUSH
13344: LD_INT 19
13346: PUSH
13347: LD_INT 20
13349: PUSH
13350: LD_INT 21
13352: PUSH
13353: LD_INT 22
13355: PUSH
13356: LD_INT 23
13358: PUSH
13359: LD_INT 24
13361: PUSH
13362: LD_INT 25
13364: PUSH
13365: LD_INT 26
13367: PUSH
13368: LD_INT 27
13370: PUSH
13371: LD_INT 28
13373: PUSH
13374: LD_INT 29
13376: PUSH
13377: LD_INT 30
13379: PUSH
13380: LD_INT 31
13382: PUSH
13383: LD_INT 32
13385: PUSH
13386: LD_INT 33
13388: PUSH
13389: LD_INT 34
13391: PUSH
13392: LD_INT 36
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: PUSH
13432: LD_INT 101
13434: PUSH
13435: LD_INT 102
13437: PUSH
13438: LD_INT 103
13440: PUSH
13441: LD_INT 104
13443: PUSH
13444: LD_INT 105
13446: PUSH
13447: LD_INT 106
13449: PUSH
13450: LD_INT 107
13452: PUSH
13453: LD_INT 108
13455: PUSH
13456: LD_INT 109
13458: PUSH
13459: LD_INT 110
13461: PUSH
13462: LD_INT 111
13464: PUSH
13465: LD_INT 112
13467: PUSH
13468: LD_INT 113
13470: PUSH
13471: LD_INT 114
13473: PUSH
13474: LD_INT 116
13476: PUSH
13477: LD_INT 117
13479: PUSH
13480: LD_INT 118
13482: PUSH
13483: EMPTY
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: PUSH
13502: EMPTY
13503: LIST
13504: LIST
13505: ST_TO_ADDR
13506: GO 14513
13508: LD_INT 15
13510: DOUBLE
13511: EQUAL
13512: IFTRUE 13516
13514: GO 13740
13516: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
13517: LD_ADDR_VAR 0 2
13521: PUSH
13522: LD_INT 1
13524: PUSH
13525: LD_INT 2
13527: PUSH
13528: LD_INT 3
13530: PUSH
13531: LD_INT 4
13533: PUSH
13534: LD_INT 5
13536: PUSH
13537: LD_INT 6
13539: PUSH
13540: LD_INT 7
13542: PUSH
13543: LD_INT 8
13545: PUSH
13546: LD_INT 9
13548: PUSH
13549: LD_INT 10
13551: PUSH
13552: LD_INT 11
13554: PUSH
13555: LD_INT 12
13557: PUSH
13558: LD_INT 13
13560: PUSH
13561: LD_INT 14
13563: PUSH
13564: LD_INT 15
13566: PUSH
13567: LD_INT 16
13569: PUSH
13570: LD_INT 17
13572: PUSH
13573: LD_INT 18
13575: PUSH
13576: LD_INT 19
13578: PUSH
13579: LD_INT 20
13581: PUSH
13582: LD_INT 21
13584: PUSH
13585: LD_INT 22
13587: PUSH
13588: LD_INT 23
13590: PUSH
13591: LD_INT 24
13593: PUSH
13594: LD_INT 25
13596: PUSH
13597: LD_INT 26
13599: PUSH
13600: LD_INT 27
13602: PUSH
13603: LD_INT 28
13605: PUSH
13606: LD_INT 29
13608: PUSH
13609: LD_INT 30
13611: PUSH
13612: LD_INT 31
13614: PUSH
13615: LD_INT 32
13617: PUSH
13618: LD_INT 33
13620: PUSH
13621: LD_INT 34
13623: PUSH
13624: LD_INT 36
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: PUSH
13664: LD_INT 101
13666: PUSH
13667: LD_INT 102
13669: PUSH
13670: LD_INT 103
13672: PUSH
13673: LD_INT 104
13675: PUSH
13676: LD_INT 105
13678: PUSH
13679: LD_INT 106
13681: PUSH
13682: LD_INT 107
13684: PUSH
13685: LD_INT 108
13687: PUSH
13688: LD_INT 109
13690: PUSH
13691: LD_INT 110
13693: PUSH
13694: LD_INT 111
13696: PUSH
13697: LD_INT 112
13699: PUSH
13700: LD_INT 113
13702: PUSH
13703: LD_INT 114
13705: PUSH
13706: LD_INT 116
13708: PUSH
13709: LD_INT 117
13711: PUSH
13712: LD_INT 118
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: ST_TO_ADDR
13738: GO 14513
13740: LD_INT 16
13742: DOUBLE
13743: EQUAL
13744: IFTRUE 13748
13746: GO 13884
13748: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
13749: LD_ADDR_VAR 0 2
13753: PUSH
13754: LD_INT 2
13756: PUSH
13757: LD_INT 4
13759: PUSH
13760: LD_INT 5
13762: PUSH
13763: LD_INT 7
13765: PUSH
13766: LD_INT 11
13768: PUSH
13769: LD_INT 12
13771: PUSH
13772: LD_INT 15
13774: PUSH
13775: LD_INT 16
13777: PUSH
13778: LD_INT 20
13780: PUSH
13781: LD_INT 21
13783: PUSH
13784: LD_INT 22
13786: PUSH
13787: LD_INT 23
13789: PUSH
13790: LD_INT 25
13792: PUSH
13793: LD_INT 26
13795: PUSH
13796: LD_INT 30
13798: PUSH
13799: LD_INT 31
13801: PUSH
13802: LD_INT 32
13804: PUSH
13805: LD_INT 33
13807: PUSH
13808: LD_INT 34
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: PUSH
13832: LD_INT 101
13834: PUSH
13835: LD_INT 102
13837: PUSH
13838: LD_INT 103
13840: PUSH
13841: LD_INT 106
13843: PUSH
13844: LD_INT 108
13846: PUSH
13847: LD_INT 112
13849: PUSH
13850: LD_INT 113
13852: PUSH
13853: LD_INT 114
13855: PUSH
13856: LD_INT 116
13858: PUSH
13859: LD_INT 117
13861: PUSH
13862: LD_INT 118
13864: PUSH
13865: EMPTY
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: ST_TO_ADDR
13882: GO 14513
13884: LD_INT 17
13886: DOUBLE
13887: EQUAL
13888: IFTRUE 13892
13890: GO 14116
13892: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
13893: LD_ADDR_VAR 0 2
13897: PUSH
13898: LD_INT 1
13900: PUSH
13901: LD_INT 2
13903: PUSH
13904: LD_INT 3
13906: PUSH
13907: LD_INT 4
13909: PUSH
13910: LD_INT 5
13912: PUSH
13913: LD_INT 6
13915: PUSH
13916: LD_INT 7
13918: PUSH
13919: LD_INT 8
13921: PUSH
13922: LD_INT 9
13924: PUSH
13925: LD_INT 10
13927: PUSH
13928: LD_INT 11
13930: PUSH
13931: LD_INT 12
13933: PUSH
13934: LD_INT 13
13936: PUSH
13937: LD_INT 14
13939: PUSH
13940: LD_INT 15
13942: PUSH
13943: LD_INT 16
13945: PUSH
13946: LD_INT 17
13948: PUSH
13949: LD_INT 18
13951: PUSH
13952: LD_INT 19
13954: PUSH
13955: LD_INT 20
13957: PUSH
13958: LD_INT 21
13960: PUSH
13961: LD_INT 22
13963: PUSH
13964: LD_INT 23
13966: PUSH
13967: LD_INT 24
13969: PUSH
13970: LD_INT 25
13972: PUSH
13973: LD_INT 26
13975: PUSH
13976: LD_INT 27
13978: PUSH
13979: LD_INT 28
13981: PUSH
13982: LD_INT 29
13984: PUSH
13985: LD_INT 30
13987: PUSH
13988: LD_INT 31
13990: PUSH
13991: LD_INT 32
13993: PUSH
13994: LD_INT 33
13996: PUSH
13997: LD_INT 34
13999: PUSH
14000: LD_INT 36
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: PUSH
14040: LD_INT 101
14042: PUSH
14043: LD_INT 102
14045: PUSH
14046: LD_INT 103
14048: PUSH
14049: LD_INT 104
14051: PUSH
14052: LD_INT 105
14054: PUSH
14055: LD_INT 106
14057: PUSH
14058: LD_INT 107
14060: PUSH
14061: LD_INT 108
14063: PUSH
14064: LD_INT 109
14066: PUSH
14067: LD_INT 110
14069: PUSH
14070: LD_INT 111
14072: PUSH
14073: LD_INT 112
14075: PUSH
14076: LD_INT 113
14078: PUSH
14079: LD_INT 114
14081: PUSH
14082: LD_INT 116
14084: PUSH
14085: LD_INT 117
14087: PUSH
14088: LD_INT 118
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: LIST
14107: LIST
14108: LIST
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: ST_TO_ADDR
14114: GO 14513
14116: LD_INT 18
14118: DOUBLE
14119: EQUAL
14120: IFTRUE 14124
14122: GO 14272
14124: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14125: LD_ADDR_VAR 0 2
14129: PUSH
14130: LD_INT 2
14132: PUSH
14133: LD_INT 4
14135: PUSH
14136: LD_INT 5
14138: PUSH
14139: LD_INT 7
14141: PUSH
14142: LD_INT 11
14144: PUSH
14145: LD_INT 12
14147: PUSH
14148: LD_INT 15
14150: PUSH
14151: LD_INT 16
14153: PUSH
14154: LD_INT 20
14156: PUSH
14157: LD_INT 21
14159: PUSH
14160: LD_INT 22
14162: PUSH
14163: LD_INT 23
14165: PUSH
14166: LD_INT 25
14168: PUSH
14169: LD_INT 26
14171: PUSH
14172: LD_INT 30
14174: PUSH
14175: LD_INT 31
14177: PUSH
14178: LD_INT 32
14180: PUSH
14181: LD_INT 33
14183: PUSH
14184: LD_INT 34
14186: PUSH
14187: LD_INT 35
14189: PUSH
14190: LD_INT 36
14192: PUSH
14193: EMPTY
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: PUSH
14216: LD_INT 101
14218: PUSH
14219: LD_INT 102
14221: PUSH
14222: LD_INT 103
14224: PUSH
14225: LD_INT 106
14227: PUSH
14228: LD_INT 108
14230: PUSH
14231: LD_INT 112
14233: PUSH
14234: LD_INT 113
14236: PUSH
14237: LD_INT 114
14239: PUSH
14240: LD_INT 115
14242: PUSH
14243: LD_INT 116
14245: PUSH
14246: LD_INT 117
14248: PUSH
14249: LD_INT 118
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: ST_TO_ADDR
14270: GO 14513
14272: LD_INT 19
14274: DOUBLE
14275: EQUAL
14276: IFTRUE 14280
14278: GO 14512
14280: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
14281: LD_ADDR_VAR 0 2
14285: PUSH
14286: LD_INT 1
14288: PUSH
14289: LD_INT 2
14291: PUSH
14292: LD_INT 3
14294: PUSH
14295: LD_INT 4
14297: PUSH
14298: LD_INT 5
14300: PUSH
14301: LD_INT 6
14303: PUSH
14304: LD_INT 7
14306: PUSH
14307: LD_INT 8
14309: PUSH
14310: LD_INT 9
14312: PUSH
14313: LD_INT 10
14315: PUSH
14316: LD_INT 11
14318: PUSH
14319: LD_INT 12
14321: PUSH
14322: LD_INT 13
14324: PUSH
14325: LD_INT 14
14327: PUSH
14328: LD_INT 15
14330: PUSH
14331: LD_INT 16
14333: PUSH
14334: LD_INT 17
14336: PUSH
14337: LD_INT 18
14339: PUSH
14340: LD_INT 19
14342: PUSH
14343: LD_INT 20
14345: PUSH
14346: LD_INT 21
14348: PUSH
14349: LD_INT 22
14351: PUSH
14352: LD_INT 23
14354: PUSH
14355: LD_INT 24
14357: PUSH
14358: LD_INT 25
14360: PUSH
14361: LD_INT 26
14363: PUSH
14364: LD_INT 27
14366: PUSH
14367: LD_INT 28
14369: PUSH
14370: LD_INT 29
14372: PUSH
14373: LD_INT 30
14375: PUSH
14376: LD_INT 31
14378: PUSH
14379: LD_INT 32
14381: PUSH
14382: LD_INT 33
14384: PUSH
14385: LD_INT 34
14387: PUSH
14388: LD_INT 35
14390: PUSH
14391: LD_INT 36
14393: PUSH
14394: EMPTY
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: PUSH
14432: LD_INT 101
14434: PUSH
14435: LD_INT 102
14437: PUSH
14438: LD_INT 103
14440: PUSH
14441: LD_INT 104
14443: PUSH
14444: LD_INT 105
14446: PUSH
14447: LD_INT 106
14449: PUSH
14450: LD_INT 107
14452: PUSH
14453: LD_INT 108
14455: PUSH
14456: LD_INT 109
14458: PUSH
14459: LD_INT 110
14461: PUSH
14462: LD_INT 111
14464: PUSH
14465: LD_INT 112
14467: PUSH
14468: LD_INT 113
14470: PUSH
14471: LD_INT 114
14473: PUSH
14474: LD_INT 115
14476: PUSH
14477: LD_INT 116
14479: PUSH
14480: LD_INT 117
14482: PUSH
14483: LD_INT 118
14485: PUSH
14486: EMPTY
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: ST_TO_ADDR
14510: GO 14513
14512: POP
// end else
14513: GO 14744
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
14515: LD_ADDR_VAR 0 2
14519: PUSH
14520: LD_INT 1
14522: PUSH
14523: LD_INT 2
14525: PUSH
14526: LD_INT 3
14528: PUSH
14529: LD_INT 4
14531: PUSH
14532: LD_INT 5
14534: PUSH
14535: LD_INT 6
14537: PUSH
14538: LD_INT 7
14540: PUSH
14541: LD_INT 8
14543: PUSH
14544: LD_INT 9
14546: PUSH
14547: LD_INT 10
14549: PUSH
14550: LD_INT 11
14552: PUSH
14553: LD_INT 12
14555: PUSH
14556: LD_INT 13
14558: PUSH
14559: LD_INT 14
14561: PUSH
14562: LD_INT 15
14564: PUSH
14565: LD_INT 16
14567: PUSH
14568: LD_INT 17
14570: PUSH
14571: LD_INT 18
14573: PUSH
14574: LD_INT 19
14576: PUSH
14577: LD_INT 20
14579: PUSH
14580: LD_INT 21
14582: PUSH
14583: LD_INT 22
14585: PUSH
14586: LD_INT 23
14588: PUSH
14589: LD_INT 24
14591: PUSH
14592: LD_INT 25
14594: PUSH
14595: LD_INT 26
14597: PUSH
14598: LD_INT 27
14600: PUSH
14601: LD_INT 28
14603: PUSH
14604: LD_INT 29
14606: PUSH
14607: LD_INT 30
14609: PUSH
14610: LD_INT 31
14612: PUSH
14613: LD_INT 32
14615: PUSH
14616: LD_INT 33
14618: PUSH
14619: LD_INT 34
14621: PUSH
14622: LD_INT 35
14624: PUSH
14625: LD_INT 36
14627: PUSH
14628: EMPTY
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: PUSH
14666: LD_INT 101
14668: PUSH
14669: LD_INT 102
14671: PUSH
14672: LD_INT 103
14674: PUSH
14675: LD_INT 104
14677: PUSH
14678: LD_INT 105
14680: PUSH
14681: LD_INT 106
14683: PUSH
14684: LD_INT 107
14686: PUSH
14687: LD_INT 108
14689: PUSH
14690: LD_INT 109
14692: PUSH
14693: LD_INT 110
14695: PUSH
14696: LD_INT 111
14698: PUSH
14699: LD_INT 112
14701: PUSH
14702: LD_INT 113
14704: PUSH
14705: LD_INT 114
14707: PUSH
14708: LD_INT 115
14710: PUSH
14711: LD_INT 116
14713: PUSH
14714: LD_INT 117
14716: PUSH
14717: LD_INT 118
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: ST_TO_ADDR
// if result then
14744: LD_VAR 0 2
14748: IFFALSE 15534
// begin normal :=  ;
14750: LD_ADDR_VAR 0 5
14754: PUSH
14755: LD_STRING 
14757: ST_TO_ADDR
// hardcore :=  ;
14758: LD_ADDR_VAR 0 6
14762: PUSH
14763: LD_STRING 
14765: ST_TO_ADDR
// active :=  ;
14766: LD_ADDR_VAR 0 7
14770: PUSH
14771: LD_STRING 
14773: ST_TO_ADDR
// for i = 1 to normalCounter do
14774: LD_ADDR_VAR 0 8
14778: PUSH
14779: DOUBLE
14780: LD_INT 1
14782: DEC
14783: ST_TO_ADDR
14784: LD_EXP 45
14788: PUSH
14789: FOR_TO
14790: IFFALSE 14891
// begin tmp := 0 ;
14792: LD_ADDR_VAR 0 3
14796: PUSH
14797: LD_STRING 0
14799: ST_TO_ADDR
// if result [ 1 ] then
14800: LD_VAR 0 2
14804: PUSH
14805: LD_INT 1
14807: ARRAY
14808: IFFALSE 14873
// if result [ 1 ] [ 1 ] = i then
14810: LD_VAR 0 2
14814: PUSH
14815: LD_INT 1
14817: ARRAY
14818: PUSH
14819: LD_INT 1
14821: ARRAY
14822: PUSH
14823: LD_VAR 0 8
14827: EQUAL
14828: IFFALSE 14873
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14830: LD_ADDR_VAR 0 2
14834: PUSH
14835: LD_VAR 0 2
14839: PPUSH
14840: LD_INT 1
14842: PPUSH
14843: LD_VAR 0 2
14847: PUSH
14848: LD_INT 1
14850: ARRAY
14851: PPUSH
14852: LD_INT 1
14854: PPUSH
14855: CALL_OW 3
14859: PPUSH
14860: CALL_OW 1
14864: ST_TO_ADDR
// tmp := 1 ;
14865: LD_ADDR_VAR 0 3
14869: PUSH
14870: LD_STRING 1
14872: ST_TO_ADDR
// end ; normal := normal & tmp ;
14873: LD_ADDR_VAR 0 5
14877: PUSH
14878: LD_VAR 0 5
14882: PUSH
14883: LD_VAR 0 3
14887: STR
14888: ST_TO_ADDR
// end ;
14889: GO 14789
14891: POP
14892: POP
// for i = 1 to hardcoreCounter do
14893: LD_ADDR_VAR 0 8
14897: PUSH
14898: DOUBLE
14899: LD_INT 1
14901: DEC
14902: ST_TO_ADDR
14903: LD_EXP 46
14907: PUSH
14908: FOR_TO
14909: IFFALSE 15014
// begin tmp := 0 ;
14911: LD_ADDR_VAR 0 3
14915: PUSH
14916: LD_STRING 0
14918: ST_TO_ADDR
// if result [ 2 ] then
14919: LD_VAR 0 2
14923: PUSH
14924: LD_INT 2
14926: ARRAY
14927: IFFALSE 14996
// if result [ 2 ] [ 1 ] = 100 + i then
14929: LD_VAR 0 2
14933: PUSH
14934: LD_INT 2
14936: ARRAY
14937: PUSH
14938: LD_INT 1
14940: ARRAY
14941: PUSH
14942: LD_INT 100
14944: PUSH
14945: LD_VAR 0 8
14949: PLUS
14950: EQUAL
14951: IFFALSE 14996
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14953: LD_ADDR_VAR 0 2
14957: PUSH
14958: LD_VAR 0 2
14962: PPUSH
14963: LD_INT 2
14965: PPUSH
14966: LD_VAR 0 2
14970: PUSH
14971: LD_INT 2
14973: ARRAY
14974: PPUSH
14975: LD_INT 1
14977: PPUSH
14978: CALL_OW 3
14982: PPUSH
14983: CALL_OW 1
14987: ST_TO_ADDR
// tmp := 1 ;
14988: LD_ADDR_VAR 0 3
14992: PUSH
14993: LD_STRING 1
14995: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14996: LD_ADDR_VAR 0 6
15000: PUSH
15001: LD_VAR 0 6
15005: PUSH
15006: LD_VAR 0 3
15010: STR
15011: ST_TO_ADDR
// end ;
15012: GO 14908
15014: POP
15015: POP
// if isGameLoad then
15016: LD_VAR 0 1
15020: IFFALSE 15495
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15022: LD_ADDR_VAR 0 4
15026: PUSH
15027: LD_EXP 49
15031: PUSH
15032: LD_EXP 48
15036: PUSH
15037: LD_EXP 50
15041: PUSH
15042: LD_EXP 47
15046: PUSH
15047: LD_EXP 51
15051: PUSH
15052: LD_EXP 52
15056: PUSH
15057: LD_EXP 53
15061: PUSH
15062: LD_EXP 54
15066: PUSH
15067: LD_EXP 55
15071: PUSH
15072: LD_EXP 56
15076: PUSH
15077: LD_EXP 57
15081: PUSH
15082: LD_EXP 58
15086: PUSH
15087: LD_EXP 59
15091: PUSH
15092: LD_EXP 60
15096: PUSH
15097: LD_EXP 68
15101: PUSH
15102: LD_EXP 69
15106: PUSH
15107: LD_EXP 70
15111: PUSH
15112: LD_EXP 71
15116: PUSH
15117: LD_EXP 73
15121: PUSH
15122: LD_EXP 74
15126: PUSH
15127: LD_EXP 75
15131: PUSH
15132: LD_EXP 78
15136: PUSH
15137: LD_EXP 80
15141: PUSH
15142: LD_EXP 81
15146: PUSH
15147: LD_EXP 82
15151: PUSH
15152: LD_EXP 84
15156: PUSH
15157: LD_EXP 85
15161: PUSH
15162: LD_EXP 88
15166: PUSH
15167: LD_EXP 89
15171: PUSH
15172: LD_EXP 90
15176: PUSH
15177: LD_EXP 91
15181: PUSH
15182: LD_EXP 92
15186: PUSH
15187: LD_EXP 93
15191: PUSH
15192: LD_EXP 94
15196: PUSH
15197: LD_EXP 95
15201: PUSH
15202: LD_EXP 96
15206: PUSH
15207: LD_EXP 61
15211: PUSH
15212: LD_EXP 62
15216: PUSH
15217: LD_EXP 65
15221: PUSH
15222: LD_EXP 66
15226: PUSH
15227: LD_EXP 67
15231: PUSH
15232: LD_EXP 63
15236: PUSH
15237: LD_EXP 64
15241: PUSH
15242: LD_EXP 72
15246: PUSH
15247: LD_EXP 76
15251: PUSH
15252: LD_EXP 77
15256: PUSH
15257: LD_EXP 79
15261: PUSH
15262: LD_EXP 83
15266: PUSH
15267: LD_EXP 86
15271: PUSH
15272: LD_EXP 87
15276: PUSH
15277: LD_EXP 97
15281: PUSH
15282: LD_EXP 98
15286: PUSH
15287: LD_EXP 99
15291: PUSH
15292: LD_EXP 100
15296: PUSH
15297: EMPTY
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: ST_TO_ADDR
// tmp :=  ;
15353: LD_ADDR_VAR 0 3
15357: PUSH
15358: LD_STRING 
15360: ST_TO_ADDR
// for i = 1 to normalCounter do
15361: LD_ADDR_VAR 0 8
15365: PUSH
15366: DOUBLE
15367: LD_INT 1
15369: DEC
15370: ST_TO_ADDR
15371: LD_EXP 45
15375: PUSH
15376: FOR_TO
15377: IFFALSE 15413
// begin if flags [ i ] then
15379: LD_VAR 0 4
15383: PUSH
15384: LD_VAR 0 8
15388: ARRAY
15389: IFFALSE 15411
// tmp := tmp & i & ; ;
15391: LD_ADDR_VAR 0 3
15395: PUSH
15396: LD_VAR 0 3
15400: PUSH
15401: LD_VAR 0 8
15405: STR
15406: PUSH
15407: LD_STRING ;
15409: STR
15410: ST_TO_ADDR
// end ;
15411: GO 15376
15413: POP
15414: POP
// for i = 1 to hardcoreCounter do
15415: LD_ADDR_VAR 0 8
15419: PUSH
15420: DOUBLE
15421: LD_INT 1
15423: DEC
15424: ST_TO_ADDR
15425: LD_EXP 46
15429: PUSH
15430: FOR_TO
15431: IFFALSE 15477
// begin if flags [ normalCounter + i ] then
15433: LD_VAR 0 4
15437: PUSH
15438: LD_EXP 45
15442: PUSH
15443: LD_VAR 0 8
15447: PLUS
15448: ARRAY
15449: IFFALSE 15475
// tmp := tmp & ( 100 + i ) & ; ;
15451: LD_ADDR_VAR 0 3
15455: PUSH
15456: LD_VAR 0 3
15460: PUSH
15461: LD_INT 100
15463: PUSH
15464: LD_VAR 0 8
15468: PLUS
15469: STR
15470: PUSH
15471: LD_STRING ;
15473: STR
15474: ST_TO_ADDR
// end ;
15475: GO 15430
15477: POP
15478: POP
// if tmp then
15479: LD_VAR 0 3
15483: IFFALSE 15495
// active := tmp ;
15485: LD_ADDR_VAR 0 7
15489: PUSH
15490: LD_VAR 0 3
15494: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
15495: LD_STRING getStreamItemsFromMission("
15497: PUSH
15498: LD_VAR 0 5
15502: STR
15503: PUSH
15504: LD_STRING ","
15506: STR
15507: PUSH
15508: LD_VAR 0 6
15512: STR
15513: PUSH
15514: LD_STRING ","
15516: STR
15517: PUSH
15518: LD_VAR 0 7
15522: STR
15523: PUSH
15524: LD_STRING ")
15526: STR
15527: PPUSH
15528: CALL_OW 559
// end else
15532: GO 15541
// ToLua ( getStreamItemsFromMission("","","") ) ;
15534: LD_STRING getStreamItemsFromMission("","","")
15536: PPUSH
15537: CALL_OW 559
// end ;
15541: LD_VAR 0 2
15545: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15546: LD_EXP 44
15550: PUSH
15551: LD_EXP 49
15555: AND
15556: IFFALSE 15680
15558: GO 15560
15560: DISABLE
15561: LD_INT 0
15563: PPUSH
15564: PPUSH
// begin enable ;
15565: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15566: LD_ADDR_VAR 0 2
15570: PUSH
15571: LD_INT 22
15573: PUSH
15574: LD_OWVAR 2
15578: PUSH
15579: EMPTY
15580: LIST
15581: LIST
15582: PUSH
15583: LD_INT 2
15585: PUSH
15586: LD_INT 34
15588: PUSH
15589: LD_INT 7
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: PUSH
15596: LD_INT 34
15598: PUSH
15599: LD_INT 45
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: PUSH
15606: LD_INT 34
15608: PUSH
15609: LD_INT 28
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: PUSH
15616: LD_INT 34
15618: PUSH
15619: LD_INT 47
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: PUSH
15626: EMPTY
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: PUSH
15633: EMPTY
15634: LIST
15635: LIST
15636: PPUSH
15637: CALL_OW 69
15641: ST_TO_ADDR
// if not tmp then
15642: LD_VAR 0 2
15646: NOT
15647: IFFALSE 15651
// exit ;
15649: GO 15680
// for i in tmp do
15651: LD_ADDR_VAR 0 1
15655: PUSH
15656: LD_VAR 0 2
15660: PUSH
15661: FOR_IN
15662: IFFALSE 15678
// begin SetLives ( i , 0 ) ;
15664: LD_VAR 0 1
15668: PPUSH
15669: LD_INT 0
15671: PPUSH
15672: CALL_OW 234
// end ;
15676: GO 15661
15678: POP
15679: POP
// end ;
15680: PPOPN 2
15682: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15683: LD_EXP 44
15687: PUSH
15688: LD_EXP 50
15692: AND
15693: IFFALSE 15777
15695: GO 15697
15697: DISABLE
15698: LD_INT 0
15700: PPUSH
15701: PPUSH
// begin enable ;
15702: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15703: LD_ADDR_VAR 0 2
15707: PUSH
15708: LD_INT 22
15710: PUSH
15711: LD_OWVAR 2
15715: PUSH
15716: EMPTY
15717: LIST
15718: LIST
15719: PUSH
15720: LD_INT 32
15722: PUSH
15723: LD_INT 3
15725: PUSH
15726: EMPTY
15727: LIST
15728: LIST
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: PPUSH
15734: CALL_OW 69
15738: ST_TO_ADDR
// if not tmp then
15739: LD_VAR 0 2
15743: NOT
15744: IFFALSE 15748
// exit ;
15746: GO 15777
// for i in tmp do
15748: LD_ADDR_VAR 0 1
15752: PUSH
15753: LD_VAR 0 2
15757: PUSH
15758: FOR_IN
15759: IFFALSE 15775
// begin SetLives ( i , 0 ) ;
15761: LD_VAR 0 1
15765: PPUSH
15766: LD_INT 0
15768: PPUSH
15769: CALL_OW 234
// end ;
15773: GO 15758
15775: POP
15776: POP
// end ;
15777: PPOPN 2
15779: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15780: LD_EXP 44
15784: PUSH
15785: LD_EXP 47
15789: AND
15790: IFFALSE 15883
15792: GO 15794
15794: DISABLE
15795: LD_INT 0
15797: PPUSH
// begin enable ;
15798: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15799: LD_ADDR_VAR 0 1
15803: PUSH
15804: LD_INT 22
15806: PUSH
15807: LD_OWVAR 2
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: PUSH
15816: LD_INT 2
15818: PUSH
15819: LD_INT 25
15821: PUSH
15822: LD_INT 5
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: PUSH
15829: LD_INT 25
15831: PUSH
15832: LD_INT 9
15834: PUSH
15835: EMPTY
15836: LIST
15837: LIST
15838: PUSH
15839: LD_INT 25
15841: PUSH
15842: LD_INT 8
15844: PUSH
15845: EMPTY
15846: LIST
15847: LIST
15848: PUSH
15849: EMPTY
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: PUSH
15855: EMPTY
15856: LIST
15857: LIST
15858: PPUSH
15859: CALL_OW 69
15863: PUSH
15864: FOR_IN
15865: IFFALSE 15881
// begin SetClass ( i , 1 ) ;
15867: LD_VAR 0 1
15871: PPUSH
15872: LD_INT 1
15874: PPUSH
15875: CALL_OW 336
// end ;
15879: GO 15864
15881: POP
15882: POP
// end ;
15883: PPOPN 1
15885: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15886: LD_EXP 44
15890: PUSH
15891: LD_EXP 48
15895: AND
15896: PUSH
15897: LD_OWVAR 65
15901: PUSH
15902: LD_INT 7
15904: LESS
15905: AND
15906: IFFALSE 15920
15908: GO 15910
15910: DISABLE
// begin enable ;
15911: ENABLE
// game_speed := 7 ;
15912: LD_ADDR_OWVAR 65
15916: PUSH
15917: LD_INT 7
15919: ST_TO_ADDR
// end ;
15920: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15921: LD_EXP 44
15925: PUSH
15926: LD_EXP 51
15930: AND
15931: IFFALSE 16133
15933: GO 15935
15935: DISABLE
15936: LD_INT 0
15938: PPUSH
15939: PPUSH
15940: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15941: LD_ADDR_VAR 0 3
15945: PUSH
15946: LD_INT 81
15948: PUSH
15949: LD_OWVAR 2
15953: PUSH
15954: EMPTY
15955: LIST
15956: LIST
15957: PUSH
15958: LD_INT 21
15960: PUSH
15961: LD_INT 1
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PPUSH
15972: CALL_OW 69
15976: ST_TO_ADDR
// if not tmp then
15977: LD_VAR 0 3
15981: NOT
15982: IFFALSE 15986
// exit ;
15984: GO 16133
// if tmp > 5 then
15986: LD_VAR 0 3
15990: PUSH
15991: LD_INT 5
15993: GREATER
15994: IFFALSE 16006
// k := 5 else
15996: LD_ADDR_VAR 0 2
16000: PUSH
16001: LD_INT 5
16003: ST_TO_ADDR
16004: GO 16016
// k := tmp ;
16006: LD_ADDR_VAR 0 2
16010: PUSH
16011: LD_VAR 0 3
16015: ST_TO_ADDR
// for i := 1 to k do
16016: LD_ADDR_VAR 0 1
16020: PUSH
16021: DOUBLE
16022: LD_INT 1
16024: DEC
16025: ST_TO_ADDR
16026: LD_VAR 0 2
16030: PUSH
16031: FOR_TO
16032: IFFALSE 16131
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16034: LD_VAR 0 3
16038: PUSH
16039: LD_VAR 0 1
16043: ARRAY
16044: PPUSH
16045: LD_VAR 0 1
16049: PUSH
16050: LD_INT 4
16052: MOD
16053: PUSH
16054: LD_INT 1
16056: PLUS
16057: PPUSH
16058: CALL_OW 259
16062: PUSH
16063: LD_INT 10
16065: LESS
16066: IFFALSE 16129
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16068: LD_VAR 0 3
16072: PUSH
16073: LD_VAR 0 1
16077: ARRAY
16078: PPUSH
16079: LD_VAR 0 1
16083: PUSH
16084: LD_INT 4
16086: MOD
16087: PUSH
16088: LD_INT 1
16090: PLUS
16091: PPUSH
16092: LD_VAR 0 3
16096: PUSH
16097: LD_VAR 0 1
16101: ARRAY
16102: PPUSH
16103: LD_VAR 0 1
16107: PUSH
16108: LD_INT 4
16110: MOD
16111: PUSH
16112: LD_INT 1
16114: PLUS
16115: PPUSH
16116: CALL_OW 259
16120: PUSH
16121: LD_INT 1
16123: PLUS
16124: PPUSH
16125: CALL_OW 237
16129: GO 16031
16131: POP
16132: POP
// end ;
16133: PPOPN 3
16135: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16136: LD_EXP 44
16140: PUSH
16141: LD_EXP 52
16145: AND
16146: IFFALSE 16166
16148: GO 16150
16150: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16151: LD_INT 4
16153: PPUSH
16154: LD_OWVAR 2
16158: PPUSH
16159: LD_INT 0
16161: PPUSH
16162: CALL_OW 324
16166: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16167: LD_EXP 44
16171: PUSH
16172: LD_EXP 81
16176: AND
16177: IFFALSE 16197
16179: GO 16181
16181: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16182: LD_INT 19
16184: PPUSH
16185: LD_OWVAR 2
16189: PPUSH
16190: LD_INT 0
16192: PPUSH
16193: CALL_OW 324
16197: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16198: LD_EXP 44
16202: PUSH
16203: LD_EXP 53
16207: AND
16208: IFFALSE 16310
16210: GO 16212
16212: DISABLE
16213: LD_INT 0
16215: PPUSH
16216: PPUSH
// begin enable ;
16217: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16218: LD_ADDR_VAR 0 2
16222: PUSH
16223: LD_INT 22
16225: PUSH
16226: LD_OWVAR 2
16230: PUSH
16231: EMPTY
16232: LIST
16233: LIST
16234: PUSH
16235: LD_INT 2
16237: PUSH
16238: LD_INT 34
16240: PUSH
16241: LD_INT 11
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: PUSH
16248: LD_INT 34
16250: PUSH
16251: LD_INT 30
16253: PUSH
16254: EMPTY
16255: LIST
16256: LIST
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: LIST
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: PPUSH
16267: CALL_OW 69
16271: ST_TO_ADDR
// if not tmp then
16272: LD_VAR 0 2
16276: NOT
16277: IFFALSE 16281
// exit ;
16279: GO 16310
// for i in tmp do
16281: LD_ADDR_VAR 0 1
16285: PUSH
16286: LD_VAR 0 2
16290: PUSH
16291: FOR_IN
16292: IFFALSE 16308
// begin SetLives ( i , 0 ) ;
16294: LD_VAR 0 1
16298: PPUSH
16299: LD_INT 0
16301: PPUSH
16302: CALL_OW 234
// end ;
16306: GO 16291
16308: POP
16309: POP
// end ;
16310: PPOPN 2
16312: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16313: LD_EXP 44
16317: PUSH
16318: LD_EXP 54
16322: AND
16323: IFFALSE 16343
16325: GO 16327
16327: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16328: LD_INT 32
16330: PPUSH
16331: LD_OWVAR 2
16335: PPUSH
16336: LD_INT 0
16338: PPUSH
16339: CALL_OW 324
16343: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16344: LD_EXP 44
16348: PUSH
16349: LD_EXP 55
16353: AND
16354: IFFALSE 16535
16356: GO 16358
16358: DISABLE
16359: LD_INT 0
16361: PPUSH
16362: PPUSH
16363: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16364: LD_ADDR_VAR 0 2
16368: PUSH
16369: LD_INT 22
16371: PUSH
16372: LD_OWVAR 2
16376: PUSH
16377: EMPTY
16378: LIST
16379: LIST
16380: PUSH
16381: LD_INT 33
16383: PUSH
16384: LD_INT 3
16386: PUSH
16387: EMPTY
16388: LIST
16389: LIST
16390: PUSH
16391: EMPTY
16392: LIST
16393: LIST
16394: PPUSH
16395: CALL_OW 69
16399: ST_TO_ADDR
// if not tmp then
16400: LD_VAR 0 2
16404: NOT
16405: IFFALSE 16409
// exit ;
16407: GO 16535
// side := 0 ;
16409: LD_ADDR_VAR 0 3
16413: PUSH
16414: LD_INT 0
16416: ST_TO_ADDR
// for i := 1 to 8 do
16417: LD_ADDR_VAR 0 1
16421: PUSH
16422: DOUBLE
16423: LD_INT 1
16425: DEC
16426: ST_TO_ADDR
16427: LD_INT 8
16429: PUSH
16430: FOR_TO
16431: IFFALSE 16479
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16433: LD_OWVAR 2
16437: PUSH
16438: LD_VAR 0 1
16442: NONEQUAL
16443: PUSH
16444: LD_OWVAR 2
16448: PPUSH
16449: LD_VAR 0 1
16453: PPUSH
16454: CALL_OW 81
16458: PUSH
16459: LD_INT 2
16461: EQUAL
16462: AND
16463: IFFALSE 16477
// begin side := i ;
16465: LD_ADDR_VAR 0 3
16469: PUSH
16470: LD_VAR 0 1
16474: ST_TO_ADDR
// break ;
16475: GO 16479
// end ;
16477: GO 16430
16479: POP
16480: POP
// if not side then
16481: LD_VAR 0 3
16485: NOT
16486: IFFALSE 16490
// exit ;
16488: GO 16535
// for i := 1 to tmp do
16490: LD_ADDR_VAR 0 1
16494: PUSH
16495: DOUBLE
16496: LD_INT 1
16498: DEC
16499: ST_TO_ADDR
16500: LD_VAR 0 2
16504: PUSH
16505: FOR_TO
16506: IFFALSE 16533
// if Prob ( 60 ) then
16508: LD_INT 60
16510: PPUSH
16511: CALL_OW 13
16515: IFFALSE 16531
// SetSide ( i , side ) ;
16517: LD_VAR 0 1
16521: PPUSH
16522: LD_VAR 0 3
16526: PPUSH
16527: CALL_OW 235
16531: GO 16505
16533: POP
16534: POP
// end ;
16535: PPOPN 3
16537: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16538: LD_EXP 44
16542: PUSH
16543: LD_EXP 57
16547: AND
16548: IFFALSE 16667
16550: GO 16552
16552: DISABLE
16553: LD_INT 0
16555: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16556: LD_ADDR_VAR 0 1
16560: PUSH
16561: LD_INT 22
16563: PUSH
16564: LD_OWVAR 2
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: PUSH
16573: LD_INT 21
16575: PUSH
16576: LD_INT 1
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: PUSH
16583: LD_INT 3
16585: PUSH
16586: LD_INT 23
16588: PUSH
16589: LD_INT 0
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: PUSH
16596: EMPTY
16597: LIST
16598: LIST
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: LIST
16604: PPUSH
16605: CALL_OW 69
16609: PUSH
16610: FOR_IN
16611: IFFALSE 16665
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16613: LD_VAR 0 1
16617: PPUSH
16618: CALL_OW 257
16622: PUSH
16623: LD_INT 1
16625: PUSH
16626: LD_INT 2
16628: PUSH
16629: LD_INT 3
16631: PUSH
16632: LD_INT 4
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: IN
16641: IFFALSE 16663
// SetClass ( un , rand ( 1 , 4 ) ) ;
16643: LD_VAR 0 1
16647: PPUSH
16648: LD_INT 1
16650: PPUSH
16651: LD_INT 4
16653: PPUSH
16654: CALL_OW 12
16658: PPUSH
16659: CALL_OW 336
16663: GO 16610
16665: POP
16666: POP
// end ;
16667: PPOPN 1
16669: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16670: LD_EXP 44
16674: PUSH
16675: LD_EXP 56
16679: AND
16680: IFFALSE 16759
16682: GO 16684
16684: DISABLE
16685: LD_INT 0
16687: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16688: LD_ADDR_VAR 0 1
16692: PUSH
16693: LD_INT 22
16695: PUSH
16696: LD_OWVAR 2
16700: PUSH
16701: EMPTY
16702: LIST
16703: LIST
16704: PUSH
16705: LD_INT 21
16707: PUSH
16708: LD_INT 3
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: PPUSH
16719: CALL_OW 69
16723: ST_TO_ADDR
// if not tmp then
16724: LD_VAR 0 1
16728: NOT
16729: IFFALSE 16733
// exit ;
16731: GO 16759
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16733: LD_VAR 0 1
16737: PUSH
16738: LD_INT 1
16740: PPUSH
16741: LD_VAR 0 1
16745: PPUSH
16746: CALL_OW 12
16750: ARRAY
16751: PPUSH
16752: LD_INT 100
16754: PPUSH
16755: CALL_OW 234
// end ;
16759: PPOPN 1
16761: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16762: LD_EXP 44
16766: PUSH
16767: LD_EXP 58
16771: AND
16772: IFFALSE 16870
16774: GO 16776
16776: DISABLE
16777: LD_INT 0
16779: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16780: LD_ADDR_VAR 0 1
16784: PUSH
16785: LD_INT 22
16787: PUSH
16788: LD_OWVAR 2
16792: PUSH
16793: EMPTY
16794: LIST
16795: LIST
16796: PUSH
16797: LD_INT 21
16799: PUSH
16800: LD_INT 1
16802: PUSH
16803: EMPTY
16804: LIST
16805: LIST
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: PPUSH
16811: CALL_OW 69
16815: ST_TO_ADDR
// if not tmp then
16816: LD_VAR 0 1
16820: NOT
16821: IFFALSE 16825
// exit ;
16823: GO 16870
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16825: LD_VAR 0 1
16829: PUSH
16830: LD_INT 1
16832: PPUSH
16833: LD_VAR 0 1
16837: PPUSH
16838: CALL_OW 12
16842: ARRAY
16843: PPUSH
16844: LD_INT 1
16846: PPUSH
16847: LD_INT 4
16849: PPUSH
16850: CALL_OW 12
16854: PPUSH
16855: LD_INT 3000
16857: PPUSH
16858: LD_INT 9000
16860: PPUSH
16861: CALL_OW 12
16865: PPUSH
16866: CALL_OW 492
// end ;
16870: PPOPN 1
16872: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16873: LD_EXP 44
16877: PUSH
16878: LD_EXP 59
16882: AND
16883: IFFALSE 16903
16885: GO 16887
16887: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16888: LD_INT 1
16890: PPUSH
16891: LD_OWVAR 2
16895: PPUSH
16896: LD_INT 0
16898: PPUSH
16899: CALL_OW 324
16903: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16904: LD_EXP 44
16908: PUSH
16909: LD_EXP 60
16913: AND
16914: IFFALSE 16997
16916: GO 16918
16918: DISABLE
16919: LD_INT 0
16921: PPUSH
16922: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16923: LD_ADDR_VAR 0 2
16927: PUSH
16928: LD_INT 22
16930: PUSH
16931: LD_OWVAR 2
16935: PUSH
16936: EMPTY
16937: LIST
16938: LIST
16939: PUSH
16940: LD_INT 21
16942: PUSH
16943: LD_INT 3
16945: PUSH
16946: EMPTY
16947: LIST
16948: LIST
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: PPUSH
16954: CALL_OW 69
16958: ST_TO_ADDR
// if not tmp then
16959: LD_VAR 0 2
16963: NOT
16964: IFFALSE 16968
// exit ;
16966: GO 16997
// for i in tmp do
16968: LD_ADDR_VAR 0 1
16972: PUSH
16973: LD_VAR 0 2
16977: PUSH
16978: FOR_IN
16979: IFFALSE 16995
// SetBLevel ( i , 10 ) ;
16981: LD_VAR 0 1
16985: PPUSH
16986: LD_INT 10
16988: PPUSH
16989: CALL_OW 241
16993: GO 16978
16995: POP
16996: POP
// end ;
16997: PPOPN 2
16999: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17000: LD_EXP 44
17004: PUSH
17005: LD_EXP 61
17009: AND
17010: IFFALSE 17121
17012: GO 17014
17014: DISABLE
17015: LD_INT 0
17017: PPUSH
17018: PPUSH
17019: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17020: LD_ADDR_VAR 0 3
17024: PUSH
17025: LD_INT 22
17027: PUSH
17028: LD_OWVAR 2
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PUSH
17037: LD_INT 25
17039: PUSH
17040: LD_INT 1
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: PPUSH
17051: CALL_OW 69
17055: ST_TO_ADDR
// if not tmp then
17056: LD_VAR 0 3
17060: NOT
17061: IFFALSE 17065
// exit ;
17063: GO 17121
// un := tmp [ rand ( 1 , tmp ) ] ;
17065: LD_ADDR_VAR 0 2
17069: PUSH
17070: LD_VAR 0 3
17074: PUSH
17075: LD_INT 1
17077: PPUSH
17078: LD_VAR 0 3
17082: PPUSH
17083: CALL_OW 12
17087: ARRAY
17088: ST_TO_ADDR
// if Crawls ( un ) then
17089: LD_VAR 0 2
17093: PPUSH
17094: CALL_OW 318
17098: IFFALSE 17109
// ComWalk ( un ) ;
17100: LD_VAR 0 2
17104: PPUSH
17105: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17109: LD_VAR 0 2
17113: PPUSH
17114: LD_INT 5
17116: PPUSH
17117: CALL_OW 336
// end ;
17121: PPOPN 3
17123: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17124: LD_EXP 44
17128: PUSH
17129: LD_EXP 62
17133: AND
17134: PUSH
17135: LD_OWVAR 67
17139: PUSH
17140: LD_INT 4
17142: LESS
17143: AND
17144: IFFALSE 17163
17146: GO 17148
17148: DISABLE
// begin Difficulty := Difficulty + 1 ;
17149: LD_ADDR_OWVAR 67
17153: PUSH
17154: LD_OWVAR 67
17158: PUSH
17159: LD_INT 1
17161: PLUS
17162: ST_TO_ADDR
// end ;
17163: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17164: LD_EXP 44
17168: PUSH
17169: LD_EXP 63
17173: AND
17174: IFFALSE 17277
17176: GO 17178
17178: DISABLE
17179: LD_INT 0
17181: PPUSH
// begin for i := 1 to 5 do
17182: LD_ADDR_VAR 0 1
17186: PUSH
17187: DOUBLE
17188: LD_INT 1
17190: DEC
17191: ST_TO_ADDR
17192: LD_INT 5
17194: PUSH
17195: FOR_TO
17196: IFFALSE 17275
// begin uc_nation := nation_nature ;
17198: LD_ADDR_OWVAR 21
17202: PUSH
17203: LD_INT 0
17205: ST_TO_ADDR
// uc_side := 0 ;
17206: LD_ADDR_OWVAR 20
17210: PUSH
17211: LD_INT 0
17213: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17214: LD_ADDR_OWVAR 29
17218: PUSH
17219: LD_INT 12
17221: PUSH
17222: LD_INT 12
17224: PUSH
17225: EMPTY
17226: LIST
17227: LIST
17228: ST_TO_ADDR
// hc_agressivity := 20 ;
17229: LD_ADDR_OWVAR 35
17233: PUSH
17234: LD_INT 20
17236: ST_TO_ADDR
// hc_class := class_tiger ;
17237: LD_ADDR_OWVAR 28
17241: PUSH
17242: LD_INT 14
17244: ST_TO_ADDR
// hc_gallery :=  ;
17245: LD_ADDR_OWVAR 33
17249: PUSH
17250: LD_STRING 
17252: ST_TO_ADDR
// hc_name :=  ;
17253: LD_ADDR_OWVAR 26
17257: PUSH
17258: LD_STRING 
17260: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17261: CALL_OW 44
17265: PPUSH
17266: LD_INT 0
17268: PPUSH
17269: CALL_OW 51
// end ;
17273: GO 17195
17275: POP
17276: POP
// end ;
17277: PPOPN 1
17279: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17280: LD_EXP 44
17284: PUSH
17285: LD_EXP 64
17289: AND
17290: IFFALSE 17299
17292: GO 17294
17294: DISABLE
// StreamSibBomb ;
17295: CALL 17300 0 0
17299: END
// export function StreamSibBomb ; var i , x , y ; begin
17300: LD_INT 0
17302: PPUSH
17303: PPUSH
17304: PPUSH
17305: PPUSH
// result := false ;
17306: LD_ADDR_VAR 0 1
17310: PUSH
17311: LD_INT 0
17313: ST_TO_ADDR
// for i := 1 to 16 do
17314: LD_ADDR_VAR 0 2
17318: PUSH
17319: DOUBLE
17320: LD_INT 1
17322: DEC
17323: ST_TO_ADDR
17324: LD_INT 16
17326: PUSH
17327: FOR_TO
17328: IFFALSE 17527
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17330: LD_ADDR_VAR 0 3
17334: PUSH
17335: LD_INT 10
17337: PUSH
17338: LD_INT 20
17340: PUSH
17341: LD_INT 30
17343: PUSH
17344: LD_INT 40
17346: PUSH
17347: LD_INT 50
17349: PUSH
17350: LD_INT 60
17352: PUSH
17353: LD_INT 70
17355: PUSH
17356: LD_INT 80
17358: PUSH
17359: LD_INT 90
17361: PUSH
17362: LD_INT 100
17364: PUSH
17365: LD_INT 110
17367: PUSH
17368: LD_INT 120
17370: PUSH
17371: LD_INT 130
17373: PUSH
17374: LD_INT 140
17376: PUSH
17377: LD_INT 150
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: LIST
17386: LIST
17387: LIST
17388: LIST
17389: LIST
17390: LIST
17391: LIST
17392: LIST
17393: LIST
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 1
17399: PPUSH
17400: LD_INT 15
17402: PPUSH
17403: CALL_OW 12
17407: ARRAY
17408: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17409: LD_ADDR_VAR 0 4
17413: PUSH
17414: LD_INT 10
17416: PUSH
17417: LD_INT 20
17419: PUSH
17420: LD_INT 30
17422: PUSH
17423: LD_INT 40
17425: PUSH
17426: LD_INT 50
17428: PUSH
17429: LD_INT 60
17431: PUSH
17432: LD_INT 70
17434: PUSH
17435: LD_INT 80
17437: PUSH
17438: LD_INT 90
17440: PUSH
17441: LD_INT 100
17443: PUSH
17444: LD_INT 110
17446: PUSH
17447: LD_INT 120
17449: PUSH
17450: LD_INT 130
17452: PUSH
17453: LD_INT 140
17455: PUSH
17456: LD_INT 150
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: PUSH
17476: LD_INT 1
17478: PPUSH
17479: LD_INT 15
17481: PPUSH
17482: CALL_OW 12
17486: ARRAY
17487: ST_TO_ADDR
// if ValidHex ( x , y ) then
17488: LD_VAR 0 3
17492: PPUSH
17493: LD_VAR 0 4
17497: PPUSH
17498: CALL_OW 488
17502: IFFALSE 17525
// begin result := [ x , y ] ;
17504: LD_ADDR_VAR 0 1
17508: PUSH
17509: LD_VAR 0 3
17513: PUSH
17514: LD_VAR 0 4
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: ST_TO_ADDR
// break ;
17523: GO 17527
// end ; end ;
17525: GO 17327
17527: POP
17528: POP
// if result then
17529: LD_VAR 0 1
17533: IFFALSE 17593
// begin ToLua ( playSibBomb() ) ;
17535: LD_STRING playSibBomb()
17537: PPUSH
17538: CALL_OW 559
// wait ( 0 0$14 ) ;
17542: LD_INT 490
17544: PPUSH
17545: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17549: LD_VAR 0 1
17553: PUSH
17554: LD_INT 1
17556: ARRAY
17557: PPUSH
17558: LD_VAR 0 1
17562: PUSH
17563: LD_INT 2
17565: ARRAY
17566: PPUSH
17567: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17571: LD_VAR 0 1
17575: PUSH
17576: LD_INT 1
17578: ARRAY
17579: PPUSH
17580: LD_VAR 0 1
17584: PUSH
17585: LD_INT 2
17587: ARRAY
17588: PPUSH
17589: CALL_OW 429
// end ; end ;
17593: LD_VAR 0 1
17597: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17598: LD_EXP 44
17602: PUSH
17603: LD_EXP 66
17607: AND
17608: IFFALSE 17620
17610: GO 17612
17612: DISABLE
// YouLost (  ) ;
17613: LD_STRING 
17615: PPUSH
17616: CALL_OW 104
17620: END
// every 0 0$1 trigger StreamModeActive and sFog do
17621: LD_EXP 44
17625: PUSH
17626: LD_EXP 65
17630: AND
17631: IFFALSE 17645
17633: GO 17635
17635: DISABLE
// FogOff ( your_side ) ;
17636: LD_OWVAR 2
17640: PPUSH
17641: CALL_OW 344
17645: END
// every 0 0$1 trigger StreamModeActive and sSun do
17646: LD_EXP 44
17650: PUSH
17651: LD_EXP 67
17655: AND
17656: IFFALSE 17684
17658: GO 17660
17660: DISABLE
// begin solar_recharge_percent := 0 ;
17661: LD_ADDR_OWVAR 79
17665: PUSH
17666: LD_INT 0
17668: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17669: LD_INT 10500
17671: PPUSH
17672: CALL_OW 67
// solar_recharge_percent := 100 ;
17676: LD_ADDR_OWVAR 79
17680: PUSH
17681: LD_INT 100
17683: ST_TO_ADDR
// end ;
17684: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17685: LD_EXP 44
17689: PUSH
17690: LD_EXP 68
17694: AND
17695: IFFALSE 17934
17697: GO 17699
17699: DISABLE
17700: LD_INT 0
17702: PPUSH
17703: PPUSH
17704: PPUSH
// begin tmp := [ ] ;
17705: LD_ADDR_VAR 0 3
17709: PUSH
17710: EMPTY
17711: ST_TO_ADDR
// for i := 1 to 6 do
17712: LD_ADDR_VAR 0 1
17716: PUSH
17717: DOUBLE
17718: LD_INT 1
17720: DEC
17721: ST_TO_ADDR
17722: LD_INT 6
17724: PUSH
17725: FOR_TO
17726: IFFALSE 17831
// begin uc_nation := nation_nature ;
17728: LD_ADDR_OWVAR 21
17732: PUSH
17733: LD_INT 0
17735: ST_TO_ADDR
// uc_side := 0 ;
17736: LD_ADDR_OWVAR 20
17740: PUSH
17741: LD_INT 0
17743: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17744: LD_ADDR_OWVAR 29
17748: PUSH
17749: LD_INT 12
17751: PUSH
17752: LD_INT 12
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: ST_TO_ADDR
// hc_agressivity := 20 ;
17759: LD_ADDR_OWVAR 35
17763: PUSH
17764: LD_INT 20
17766: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17767: LD_ADDR_OWVAR 28
17771: PUSH
17772: LD_INT 17
17774: ST_TO_ADDR
// hc_gallery :=  ;
17775: LD_ADDR_OWVAR 33
17779: PUSH
17780: LD_STRING 
17782: ST_TO_ADDR
// hc_name :=  ;
17783: LD_ADDR_OWVAR 26
17787: PUSH
17788: LD_STRING 
17790: ST_TO_ADDR
// un := CreateHuman ;
17791: LD_ADDR_VAR 0 2
17795: PUSH
17796: CALL_OW 44
17800: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17801: LD_VAR 0 2
17805: PPUSH
17806: LD_INT 1
17808: PPUSH
17809: CALL_OW 51
// tmp := tmp ^ un ;
17813: LD_ADDR_VAR 0 3
17817: PUSH
17818: LD_VAR 0 3
17822: PUSH
17823: LD_VAR 0 2
17827: ADD
17828: ST_TO_ADDR
// end ;
17829: GO 17725
17831: POP
17832: POP
// repeat wait ( 0 0$1 ) ;
17833: LD_INT 35
17835: PPUSH
17836: CALL_OW 67
// for un in tmp do
17840: LD_ADDR_VAR 0 2
17844: PUSH
17845: LD_VAR 0 3
17849: PUSH
17850: FOR_IN
17851: IFFALSE 17925
// begin if IsDead ( un ) then
17853: LD_VAR 0 2
17857: PPUSH
17858: CALL_OW 301
17862: IFFALSE 17882
// begin tmp := tmp diff un ;
17864: LD_ADDR_VAR 0 3
17868: PUSH
17869: LD_VAR 0 3
17873: PUSH
17874: LD_VAR 0 2
17878: DIFF
17879: ST_TO_ADDR
// continue ;
17880: GO 17850
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17882: LD_VAR 0 2
17886: PPUSH
17887: LD_INT 3
17889: PUSH
17890: LD_INT 22
17892: PUSH
17893: LD_INT 0
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PPUSH
17904: CALL_OW 69
17908: PPUSH
17909: LD_VAR 0 2
17913: PPUSH
17914: CALL_OW 74
17918: PPUSH
17919: CALL_OW 115
// end ;
17923: GO 17850
17925: POP
17926: POP
// until not tmp ;
17927: LD_VAR 0 3
17931: NOT
17932: IFFALSE 17833
// end ;
17934: PPOPN 3
17936: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17937: LD_EXP 44
17941: PUSH
17942: LD_EXP 69
17946: AND
17947: IFFALSE 18001
17949: GO 17951
17951: DISABLE
// begin ToLua ( displayTroll(); ) ;
17952: LD_STRING displayTroll();
17954: PPUSH
17955: CALL_OW 559
// wait ( 3 3$00 ) ;
17959: LD_INT 6300
17961: PPUSH
17962: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17966: LD_STRING hideTroll();
17968: PPUSH
17969: CALL_OW 559
// wait ( 1 1$00 ) ;
17973: LD_INT 2100
17975: PPUSH
17976: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17980: LD_STRING displayTroll();
17982: PPUSH
17983: CALL_OW 559
// wait ( 1 1$00 ) ;
17987: LD_INT 2100
17989: PPUSH
17990: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17994: LD_STRING hideTroll();
17996: PPUSH
17997: CALL_OW 559
// end ;
18001: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18002: LD_EXP 44
18006: PUSH
18007: LD_EXP 70
18011: AND
18012: IFFALSE 18075
18014: GO 18016
18016: DISABLE
18017: LD_INT 0
18019: PPUSH
// begin p := 0 ;
18020: LD_ADDR_VAR 0 1
18024: PUSH
18025: LD_INT 0
18027: ST_TO_ADDR
// repeat game_speed := 1 ;
18028: LD_ADDR_OWVAR 65
18032: PUSH
18033: LD_INT 1
18035: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18036: LD_INT 35
18038: PPUSH
18039: CALL_OW 67
// p := p + 1 ;
18043: LD_ADDR_VAR 0 1
18047: PUSH
18048: LD_VAR 0 1
18052: PUSH
18053: LD_INT 1
18055: PLUS
18056: ST_TO_ADDR
// until p >= 60 ;
18057: LD_VAR 0 1
18061: PUSH
18062: LD_INT 60
18064: GREATEREQUAL
18065: IFFALSE 18028
// game_speed := 4 ;
18067: LD_ADDR_OWVAR 65
18071: PUSH
18072: LD_INT 4
18074: ST_TO_ADDR
// end ;
18075: PPOPN 1
18077: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18078: LD_EXP 44
18082: PUSH
18083: LD_EXP 71
18087: AND
18088: IFFALSE 18234
18090: GO 18092
18092: DISABLE
18093: LD_INT 0
18095: PPUSH
18096: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18097: LD_ADDR_VAR 0 1
18101: PUSH
18102: LD_INT 22
18104: PUSH
18105: LD_OWVAR 2
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: PUSH
18114: LD_INT 2
18116: PUSH
18117: LD_INT 30
18119: PUSH
18120: LD_INT 0
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PUSH
18127: LD_INT 30
18129: PUSH
18130: LD_INT 1
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: LIST
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: PPUSH
18146: CALL_OW 69
18150: ST_TO_ADDR
// if not depot then
18151: LD_VAR 0 1
18155: NOT
18156: IFFALSE 18160
// exit ;
18158: GO 18234
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18160: LD_ADDR_VAR 0 2
18164: PUSH
18165: LD_VAR 0 1
18169: PUSH
18170: LD_INT 1
18172: PPUSH
18173: LD_VAR 0 1
18177: PPUSH
18178: CALL_OW 12
18182: ARRAY
18183: PPUSH
18184: CALL_OW 274
18188: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18189: LD_VAR 0 2
18193: PPUSH
18194: LD_INT 1
18196: PPUSH
18197: LD_INT 0
18199: PPUSH
18200: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18204: LD_VAR 0 2
18208: PPUSH
18209: LD_INT 2
18211: PPUSH
18212: LD_INT 0
18214: PPUSH
18215: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18219: LD_VAR 0 2
18223: PPUSH
18224: LD_INT 3
18226: PPUSH
18227: LD_INT 0
18229: PPUSH
18230: CALL_OW 277
// end ;
18234: PPOPN 2
18236: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18237: LD_EXP 44
18241: PUSH
18242: LD_EXP 72
18246: AND
18247: IFFALSE 18344
18249: GO 18251
18251: DISABLE
18252: LD_INT 0
18254: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18255: LD_ADDR_VAR 0 1
18259: PUSH
18260: LD_INT 22
18262: PUSH
18263: LD_OWVAR 2
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: PUSH
18272: LD_INT 21
18274: PUSH
18275: LD_INT 1
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: PUSH
18282: LD_INT 3
18284: PUSH
18285: LD_INT 23
18287: PUSH
18288: LD_INT 0
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: LIST
18303: PPUSH
18304: CALL_OW 69
18308: ST_TO_ADDR
// if not tmp then
18309: LD_VAR 0 1
18313: NOT
18314: IFFALSE 18318
// exit ;
18316: GO 18344
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18318: LD_VAR 0 1
18322: PUSH
18323: LD_INT 1
18325: PPUSH
18326: LD_VAR 0 1
18330: PPUSH
18331: CALL_OW 12
18335: ARRAY
18336: PPUSH
18337: LD_INT 200
18339: PPUSH
18340: CALL_OW 234
// end ;
18344: PPOPN 1
18346: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18347: LD_EXP 44
18351: PUSH
18352: LD_EXP 73
18356: AND
18357: IFFALSE 18436
18359: GO 18361
18361: DISABLE
18362: LD_INT 0
18364: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18365: LD_ADDR_VAR 0 1
18369: PUSH
18370: LD_INT 22
18372: PUSH
18373: LD_OWVAR 2
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 21
18384: PUSH
18385: LD_INT 2
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: PPUSH
18396: CALL_OW 69
18400: ST_TO_ADDR
// if not tmp then
18401: LD_VAR 0 1
18405: NOT
18406: IFFALSE 18410
// exit ;
18408: GO 18436
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18410: LD_VAR 0 1
18414: PUSH
18415: LD_INT 1
18417: PPUSH
18418: LD_VAR 0 1
18422: PPUSH
18423: CALL_OW 12
18427: ARRAY
18428: PPUSH
18429: LD_INT 60
18431: PPUSH
18432: CALL_OW 234
// end ;
18436: PPOPN 1
18438: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18439: LD_EXP 44
18443: PUSH
18444: LD_EXP 74
18448: AND
18449: IFFALSE 18548
18451: GO 18453
18453: DISABLE
18454: LD_INT 0
18456: PPUSH
18457: PPUSH
// begin enable ;
18458: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18459: LD_ADDR_VAR 0 1
18463: PUSH
18464: LD_INT 22
18466: PUSH
18467: LD_OWVAR 2
18471: PUSH
18472: EMPTY
18473: LIST
18474: LIST
18475: PUSH
18476: LD_INT 61
18478: PUSH
18479: EMPTY
18480: LIST
18481: PUSH
18482: LD_INT 33
18484: PUSH
18485: LD_INT 2
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: LIST
18496: PPUSH
18497: CALL_OW 69
18501: ST_TO_ADDR
// if not tmp then
18502: LD_VAR 0 1
18506: NOT
18507: IFFALSE 18511
// exit ;
18509: GO 18548
// for i in tmp do
18511: LD_ADDR_VAR 0 2
18515: PUSH
18516: LD_VAR 0 1
18520: PUSH
18521: FOR_IN
18522: IFFALSE 18546
// if IsControledBy ( i ) then
18524: LD_VAR 0 2
18528: PPUSH
18529: CALL_OW 312
18533: IFFALSE 18544
// ComUnlink ( i ) ;
18535: LD_VAR 0 2
18539: PPUSH
18540: CALL_OW 136
18544: GO 18521
18546: POP
18547: POP
// end ;
18548: PPOPN 2
18550: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18551: LD_EXP 44
18555: PUSH
18556: LD_EXP 75
18560: AND
18561: IFFALSE 18701
18563: GO 18565
18565: DISABLE
18566: LD_INT 0
18568: PPUSH
18569: PPUSH
// begin ToLua ( displayPowell(); ) ;
18570: LD_STRING displayPowell();
18572: PPUSH
18573: CALL_OW 559
// uc_side := 0 ;
18577: LD_ADDR_OWVAR 20
18581: PUSH
18582: LD_INT 0
18584: ST_TO_ADDR
// uc_nation := 2 ;
18585: LD_ADDR_OWVAR 21
18589: PUSH
18590: LD_INT 2
18592: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18593: LD_ADDR_OWVAR 37
18597: PUSH
18598: LD_INT 14
18600: ST_TO_ADDR
// vc_engine := engine_siberite ;
18601: LD_ADDR_OWVAR 39
18605: PUSH
18606: LD_INT 3
18608: ST_TO_ADDR
// vc_control := control_apeman ;
18609: LD_ADDR_OWVAR 38
18613: PUSH
18614: LD_INT 5
18616: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18617: LD_ADDR_OWVAR 40
18621: PUSH
18622: LD_INT 29
18624: ST_TO_ADDR
// un := CreateVehicle ;
18625: LD_ADDR_VAR 0 2
18629: PUSH
18630: CALL_OW 45
18634: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18635: LD_VAR 0 2
18639: PPUSH
18640: LD_INT 1
18642: PPUSH
18643: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18647: LD_INT 35
18649: PPUSH
18650: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18654: LD_VAR 0 2
18658: PPUSH
18659: LD_INT 22
18661: PUSH
18662: LD_OWVAR 2
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PPUSH
18671: CALL_OW 69
18675: PPUSH
18676: LD_VAR 0 2
18680: PPUSH
18681: CALL_OW 74
18685: PPUSH
18686: CALL_OW 115
// until IsDead ( un ) ;
18690: LD_VAR 0 2
18694: PPUSH
18695: CALL_OW 301
18699: IFFALSE 18647
// end ;
18701: PPOPN 2
18703: END
// every 0 0$1 trigger StreamModeActive and sStu do
18704: LD_EXP 44
18708: PUSH
18709: LD_EXP 83
18713: AND
18714: IFFALSE 18730
18716: GO 18718
18718: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18719: LD_STRING displayStucuk();
18721: PPUSH
18722: CALL_OW 559
// ResetFog ;
18726: CALL_OW 335
// end ;
18730: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18731: LD_EXP 44
18735: PUSH
18736: LD_EXP 76
18740: AND
18741: IFFALSE 18882
18743: GO 18745
18745: DISABLE
18746: LD_INT 0
18748: PPUSH
18749: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18750: LD_ADDR_VAR 0 2
18754: PUSH
18755: LD_INT 22
18757: PUSH
18758: LD_OWVAR 2
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: PUSH
18767: LD_INT 21
18769: PUSH
18770: LD_INT 1
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: PUSH
18777: EMPTY
18778: LIST
18779: LIST
18780: PPUSH
18781: CALL_OW 69
18785: ST_TO_ADDR
// if not tmp then
18786: LD_VAR 0 2
18790: NOT
18791: IFFALSE 18795
// exit ;
18793: GO 18882
// un := tmp [ rand ( 1 , tmp ) ] ;
18795: LD_ADDR_VAR 0 1
18799: PUSH
18800: LD_VAR 0 2
18804: PUSH
18805: LD_INT 1
18807: PPUSH
18808: LD_VAR 0 2
18812: PPUSH
18813: CALL_OW 12
18817: ARRAY
18818: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18819: LD_VAR 0 1
18823: PPUSH
18824: LD_INT 0
18826: PPUSH
18827: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18831: LD_VAR 0 1
18835: PPUSH
18836: LD_OWVAR 3
18840: PUSH
18841: LD_VAR 0 1
18845: DIFF
18846: PPUSH
18847: LD_VAR 0 1
18851: PPUSH
18852: CALL_OW 74
18856: PPUSH
18857: CALL_OW 115
// wait ( 0 0$20 ) ;
18861: LD_INT 700
18863: PPUSH
18864: CALL_OW 67
// SetSide ( un , your_side ) ;
18868: LD_VAR 0 1
18872: PPUSH
18873: LD_OWVAR 2
18877: PPUSH
18878: CALL_OW 235
// end ;
18882: PPOPN 2
18884: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18885: LD_EXP 44
18889: PUSH
18890: LD_EXP 77
18894: AND
18895: IFFALSE 19001
18897: GO 18899
18899: DISABLE
18900: LD_INT 0
18902: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18903: LD_ADDR_VAR 0 1
18907: PUSH
18908: LD_INT 22
18910: PUSH
18911: LD_OWVAR 2
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: PUSH
18920: LD_INT 2
18922: PUSH
18923: LD_INT 30
18925: PUSH
18926: LD_INT 0
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PUSH
18933: LD_INT 30
18935: PUSH
18936: LD_INT 1
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: LIST
18947: PUSH
18948: EMPTY
18949: LIST
18950: LIST
18951: PPUSH
18952: CALL_OW 69
18956: ST_TO_ADDR
// if not depot then
18957: LD_VAR 0 1
18961: NOT
18962: IFFALSE 18966
// exit ;
18964: GO 19001
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18966: LD_VAR 0 1
18970: PUSH
18971: LD_INT 1
18973: ARRAY
18974: PPUSH
18975: CALL_OW 250
18979: PPUSH
18980: LD_VAR 0 1
18984: PUSH
18985: LD_INT 1
18987: ARRAY
18988: PPUSH
18989: CALL_OW 251
18993: PPUSH
18994: LD_INT 70
18996: PPUSH
18997: CALL_OW 495
// end ;
19001: PPOPN 1
19003: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19004: LD_EXP 44
19008: PUSH
19009: LD_EXP 78
19013: AND
19014: IFFALSE 19225
19016: GO 19018
19018: DISABLE
19019: LD_INT 0
19021: PPUSH
19022: PPUSH
19023: PPUSH
19024: PPUSH
19025: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19026: LD_ADDR_VAR 0 5
19030: PUSH
19031: LD_INT 22
19033: PUSH
19034: LD_OWVAR 2
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: PUSH
19043: LD_INT 21
19045: PUSH
19046: LD_INT 1
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PPUSH
19057: CALL_OW 69
19061: ST_TO_ADDR
// if not tmp then
19062: LD_VAR 0 5
19066: NOT
19067: IFFALSE 19071
// exit ;
19069: GO 19225
// for i in tmp do
19071: LD_ADDR_VAR 0 1
19075: PUSH
19076: LD_VAR 0 5
19080: PUSH
19081: FOR_IN
19082: IFFALSE 19223
// begin d := rand ( 0 , 5 ) ;
19084: LD_ADDR_VAR 0 4
19088: PUSH
19089: LD_INT 0
19091: PPUSH
19092: LD_INT 5
19094: PPUSH
19095: CALL_OW 12
19099: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19100: LD_ADDR_VAR 0 2
19104: PUSH
19105: LD_VAR 0 1
19109: PPUSH
19110: CALL_OW 250
19114: PPUSH
19115: LD_VAR 0 4
19119: PPUSH
19120: LD_INT 3
19122: PPUSH
19123: LD_INT 12
19125: PPUSH
19126: CALL_OW 12
19130: PPUSH
19131: CALL_OW 272
19135: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19136: LD_ADDR_VAR 0 3
19140: PUSH
19141: LD_VAR 0 1
19145: PPUSH
19146: CALL_OW 251
19150: PPUSH
19151: LD_VAR 0 4
19155: PPUSH
19156: LD_INT 3
19158: PPUSH
19159: LD_INT 12
19161: PPUSH
19162: CALL_OW 12
19166: PPUSH
19167: CALL_OW 273
19171: ST_TO_ADDR
// if ValidHex ( x , y ) then
19172: LD_VAR 0 2
19176: PPUSH
19177: LD_VAR 0 3
19181: PPUSH
19182: CALL_OW 488
19186: IFFALSE 19221
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19188: LD_VAR 0 1
19192: PPUSH
19193: LD_VAR 0 2
19197: PPUSH
19198: LD_VAR 0 3
19202: PPUSH
19203: LD_INT 3
19205: PPUSH
19206: LD_INT 6
19208: PPUSH
19209: CALL_OW 12
19213: PPUSH
19214: LD_INT 1
19216: PPUSH
19217: CALL_OW 483
// end ;
19221: GO 19081
19223: POP
19224: POP
// end ;
19225: PPOPN 5
19227: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19228: LD_EXP 44
19232: PUSH
19233: LD_EXP 79
19237: AND
19238: IFFALSE 19332
19240: GO 19242
19242: DISABLE
19243: LD_INT 0
19245: PPUSH
19246: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19247: LD_ADDR_VAR 0 2
19251: PUSH
19252: LD_INT 22
19254: PUSH
19255: LD_OWVAR 2
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: PUSH
19264: LD_INT 32
19266: PUSH
19267: LD_INT 1
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: PUSH
19274: LD_INT 21
19276: PUSH
19277: LD_INT 2
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: LIST
19288: PPUSH
19289: CALL_OW 69
19293: ST_TO_ADDR
// if not tmp then
19294: LD_VAR 0 2
19298: NOT
19299: IFFALSE 19303
// exit ;
19301: GO 19332
// for i in tmp do
19303: LD_ADDR_VAR 0 1
19307: PUSH
19308: LD_VAR 0 2
19312: PUSH
19313: FOR_IN
19314: IFFALSE 19330
// SetFuel ( i , 0 ) ;
19316: LD_VAR 0 1
19320: PPUSH
19321: LD_INT 0
19323: PPUSH
19324: CALL_OW 240
19328: GO 19313
19330: POP
19331: POP
// end ;
19332: PPOPN 2
19334: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19335: LD_EXP 44
19339: PUSH
19340: LD_EXP 80
19344: AND
19345: IFFALSE 19411
19347: GO 19349
19349: DISABLE
19350: LD_INT 0
19352: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19353: LD_ADDR_VAR 0 1
19357: PUSH
19358: LD_INT 22
19360: PUSH
19361: LD_OWVAR 2
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: PUSH
19370: LD_INT 30
19372: PUSH
19373: LD_INT 29
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: PPUSH
19384: CALL_OW 69
19388: ST_TO_ADDR
// if not tmp then
19389: LD_VAR 0 1
19393: NOT
19394: IFFALSE 19398
// exit ;
19396: GO 19411
// DestroyUnit ( tmp [ 1 ] ) ;
19398: LD_VAR 0 1
19402: PUSH
19403: LD_INT 1
19405: ARRAY
19406: PPUSH
19407: CALL_OW 65
// end ;
19411: PPOPN 1
19413: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19414: LD_EXP 44
19418: PUSH
19419: LD_EXP 82
19423: AND
19424: IFFALSE 19553
19426: GO 19428
19428: DISABLE
19429: LD_INT 0
19431: PPUSH
// begin uc_side := 0 ;
19432: LD_ADDR_OWVAR 20
19436: PUSH
19437: LD_INT 0
19439: ST_TO_ADDR
// uc_nation := nation_arabian ;
19440: LD_ADDR_OWVAR 21
19444: PUSH
19445: LD_INT 2
19447: ST_TO_ADDR
// hc_gallery :=  ;
19448: LD_ADDR_OWVAR 33
19452: PUSH
19453: LD_STRING 
19455: ST_TO_ADDR
// hc_name :=  ;
19456: LD_ADDR_OWVAR 26
19460: PUSH
19461: LD_STRING 
19463: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19464: LD_INT 1
19466: PPUSH
19467: LD_INT 11
19469: PPUSH
19470: LD_INT 10
19472: PPUSH
19473: CALL_OW 380
// un := CreateHuman ;
19477: LD_ADDR_VAR 0 1
19481: PUSH
19482: CALL_OW 44
19486: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19487: LD_VAR 0 1
19491: PPUSH
19492: LD_INT 1
19494: PPUSH
19495: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19499: LD_INT 35
19501: PPUSH
19502: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19506: LD_VAR 0 1
19510: PPUSH
19511: LD_INT 22
19513: PUSH
19514: LD_OWVAR 2
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PPUSH
19523: CALL_OW 69
19527: PPUSH
19528: LD_VAR 0 1
19532: PPUSH
19533: CALL_OW 74
19537: PPUSH
19538: CALL_OW 115
// until IsDead ( un ) ;
19542: LD_VAR 0 1
19546: PPUSH
19547: CALL_OW 301
19551: IFFALSE 19499
// end ;
19553: PPOPN 1
19555: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19556: LD_EXP 44
19560: PUSH
19561: LD_EXP 84
19565: AND
19566: IFFALSE 19578
19568: GO 19570
19570: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19571: LD_STRING earthquake(getX(game), 0, 32)
19573: PPUSH
19574: CALL_OW 559
19578: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19579: LD_EXP 44
19583: PUSH
19584: LD_EXP 85
19588: AND
19589: IFFALSE 19680
19591: GO 19593
19593: DISABLE
19594: LD_INT 0
19596: PPUSH
// begin enable ;
19597: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19598: LD_ADDR_VAR 0 1
19602: PUSH
19603: LD_INT 22
19605: PUSH
19606: LD_OWVAR 2
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: PUSH
19615: LD_INT 21
19617: PUSH
19618: LD_INT 2
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PUSH
19625: LD_INT 33
19627: PUSH
19628: LD_INT 3
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: PUSH
19635: EMPTY
19636: LIST
19637: LIST
19638: LIST
19639: PPUSH
19640: CALL_OW 69
19644: ST_TO_ADDR
// if not tmp then
19645: LD_VAR 0 1
19649: NOT
19650: IFFALSE 19654
// exit ;
19652: GO 19680
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19654: LD_VAR 0 1
19658: PUSH
19659: LD_INT 1
19661: PPUSH
19662: LD_VAR 0 1
19666: PPUSH
19667: CALL_OW 12
19671: ARRAY
19672: PPUSH
19673: LD_INT 1
19675: PPUSH
19676: CALL_OW 234
// end ;
19680: PPOPN 1
19682: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19683: LD_EXP 44
19687: PUSH
19688: LD_EXP 86
19692: AND
19693: IFFALSE 19834
19695: GO 19697
19697: DISABLE
19698: LD_INT 0
19700: PPUSH
19701: PPUSH
19702: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19703: LD_ADDR_VAR 0 3
19707: PUSH
19708: LD_INT 22
19710: PUSH
19711: LD_OWVAR 2
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: PUSH
19720: LD_INT 25
19722: PUSH
19723: LD_INT 1
19725: PUSH
19726: EMPTY
19727: LIST
19728: LIST
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PPUSH
19734: CALL_OW 69
19738: ST_TO_ADDR
// if not tmp then
19739: LD_VAR 0 3
19743: NOT
19744: IFFALSE 19748
// exit ;
19746: GO 19834
// un := tmp [ rand ( 1 , tmp ) ] ;
19748: LD_ADDR_VAR 0 2
19752: PUSH
19753: LD_VAR 0 3
19757: PUSH
19758: LD_INT 1
19760: PPUSH
19761: LD_VAR 0 3
19765: PPUSH
19766: CALL_OW 12
19770: ARRAY
19771: ST_TO_ADDR
// if Crawls ( un ) then
19772: LD_VAR 0 2
19776: PPUSH
19777: CALL_OW 318
19781: IFFALSE 19792
// ComWalk ( un ) ;
19783: LD_VAR 0 2
19787: PPUSH
19788: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19792: LD_VAR 0 2
19796: PPUSH
19797: LD_INT 9
19799: PPUSH
19800: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19804: LD_INT 28
19806: PPUSH
19807: LD_OWVAR 2
19811: PPUSH
19812: LD_INT 2
19814: PPUSH
19815: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19819: LD_INT 29
19821: PPUSH
19822: LD_OWVAR 2
19826: PPUSH
19827: LD_INT 2
19829: PPUSH
19830: CALL_OW 322
// end ;
19834: PPOPN 3
19836: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19837: LD_EXP 44
19841: PUSH
19842: LD_EXP 87
19846: AND
19847: IFFALSE 19958
19849: GO 19851
19851: DISABLE
19852: LD_INT 0
19854: PPUSH
19855: PPUSH
19856: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19857: LD_ADDR_VAR 0 3
19861: PUSH
19862: LD_INT 22
19864: PUSH
19865: LD_OWVAR 2
19869: PUSH
19870: EMPTY
19871: LIST
19872: LIST
19873: PUSH
19874: LD_INT 25
19876: PUSH
19877: LD_INT 1
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: PPUSH
19888: CALL_OW 69
19892: ST_TO_ADDR
// if not tmp then
19893: LD_VAR 0 3
19897: NOT
19898: IFFALSE 19902
// exit ;
19900: GO 19958
// un := tmp [ rand ( 1 , tmp ) ] ;
19902: LD_ADDR_VAR 0 2
19906: PUSH
19907: LD_VAR 0 3
19911: PUSH
19912: LD_INT 1
19914: PPUSH
19915: LD_VAR 0 3
19919: PPUSH
19920: CALL_OW 12
19924: ARRAY
19925: ST_TO_ADDR
// if Crawls ( un ) then
19926: LD_VAR 0 2
19930: PPUSH
19931: CALL_OW 318
19935: IFFALSE 19946
// ComWalk ( un ) ;
19937: LD_VAR 0 2
19941: PPUSH
19942: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19946: LD_VAR 0 2
19950: PPUSH
19951: LD_INT 8
19953: PPUSH
19954: CALL_OW 336
// end ;
19958: PPOPN 3
19960: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19961: LD_EXP 44
19965: PUSH
19966: LD_EXP 88
19970: AND
19971: IFFALSE 20115
19973: GO 19975
19975: DISABLE
19976: LD_INT 0
19978: PPUSH
19979: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19980: LD_ADDR_VAR 0 2
19984: PUSH
19985: LD_INT 22
19987: PUSH
19988: LD_OWVAR 2
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: PUSH
19997: LD_INT 21
19999: PUSH
20000: LD_INT 2
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: PUSH
20007: LD_INT 2
20009: PUSH
20010: LD_INT 34
20012: PUSH
20013: LD_INT 12
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: PUSH
20020: LD_INT 34
20022: PUSH
20023: LD_INT 51
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: PUSH
20030: LD_INT 34
20032: PUSH
20033: LD_INT 32
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: PUSH
20046: EMPTY
20047: LIST
20048: LIST
20049: LIST
20050: PPUSH
20051: CALL_OW 69
20055: ST_TO_ADDR
// if not tmp then
20056: LD_VAR 0 2
20060: NOT
20061: IFFALSE 20065
// exit ;
20063: GO 20115
// for i in tmp do
20065: LD_ADDR_VAR 0 1
20069: PUSH
20070: LD_VAR 0 2
20074: PUSH
20075: FOR_IN
20076: IFFALSE 20113
// if GetCargo ( i , mat_artifact ) = 0 then
20078: LD_VAR 0 1
20082: PPUSH
20083: LD_INT 4
20085: PPUSH
20086: CALL_OW 289
20090: PUSH
20091: LD_INT 0
20093: EQUAL
20094: IFFALSE 20111
// SetCargo ( i , mat_siberit , 100 ) ;
20096: LD_VAR 0 1
20100: PPUSH
20101: LD_INT 3
20103: PPUSH
20104: LD_INT 100
20106: PPUSH
20107: CALL_OW 290
20111: GO 20075
20113: POP
20114: POP
// end ;
20115: PPOPN 2
20117: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20118: LD_EXP 44
20122: PUSH
20123: LD_EXP 89
20127: AND
20128: IFFALSE 20311
20130: GO 20132
20132: DISABLE
20133: LD_INT 0
20135: PPUSH
20136: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20137: LD_ADDR_VAR 0 2
20141: PUSH
20142: LD_INT 22
20144: PUSH
20145: LD_OWVAR 2
20149: PUSH
20150: EMPTY
20151: LIST
20152: LIST
20153: PPUSH
20154: CALL_OW 69
20158: ST_TO_ADDR
// if not tmp then
20159: LD_VAR 0 2
20163: NOT
20164: IFFALSE 20168
// exit ;
20166: GO 20311
// for i := 1 to 2 do
20168: LD_ADDR_VAR 0 1
20172: PUSH
20173: DOUBLE
20174: LD_INT 1
20176: DEC
20177: ST_TO_ADDR
20178: LD_INT 2
20180: PUSH
20181: FOR_TO
20182: IFFALSE 20309
// begin uc_side := your_side ;
20184: LD_ADDR_OWVAR 20
20188: PUSH
20189: LD_OWVAR 2
20193: ST_TO_ADDR
// uc_nation := nation_american ;
20194: LD_ADDR_OWVAR 21
20198: PUSH
20199: LD_INT 1
20201: ST_TO_ADDR
// vc_chassis := us_morphling ;
20202: LD_ADDR_OWVAR 37
20206: PUSH
20207: LD_INT 5
20209: ST_TO_ADDR
// vc_engine := engine_siberite ;
20210: LD_ADDR_OWVAR 39
20214: PUSH
20215: LD_INT 3
20217: ST_TO_ADDR
// vc_control := control_computer ;
20218: LD_ADDR_OWVAR 38
20222: PUSH
20223: LD_INT 3
20225: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20226: LD_ADDR_OWVAR 40
20230: PUSH
20231: LD_INT 10
20233: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20234: LD_VAR 0 2
20238: PUSH
20239: LD_INT 1
20241: ARRAY
20242: PPUSH
20243: CALL_OW 310
20247: NOT
20248: IFFALSE 20295
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20250: CALL_OW 45
20254: PPUSH
20255: LD_VAR 0 2
20259: PUSH
20260: LD_INT 1
20262: ARRAY
20263: PPUSH
20264: CALL_OW 250
20268: PPUSH
20269: LD_VAR 0 2
20273: PUSH
20274: LD_INT 1
20276: ARRAY
20277: PPUSH
20278: CALL_OW 251
20282: PPUSH
20283: LD_INT 12
20285: PPUSH
20286: LD_INT 1
20288: PPUSH
20289: CALL_OW 50
20293: GO 20307
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20295: CALL_OW 45
20299: PPUSH
20300: LD_INT 1
20302: PPUSH
20303: CALL_OW 51
// end ;
20307: GO 20181
20309: POP
20310: POP
// end ;
20311: PPOPN 2
20313: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20314: LD_EXP 44
20318: PUSH
20319: LD_EXP 90
20323: AND
20324: IFFALSE 20546
20326: GO 20328
20328: DISABLE
20329: LD_INT 0
20331: PPUSH
20332: PPUSH
20333: PPUSH
20334: PPUSH
20335: PPUSH
20336: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20337: LD_ADDR_VAR 0 6
20341: PUSH
20342: LD_INT 22
20344: PUSH
20345: LD_OWVAR 2
20349: PUSH
20350: EMPTY
20351: LIST
20352: LIST
20353: PUSH
20354: LD_INT 21
20356: PUSH
20357: LD_INT 1
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: PUSH
20364: LD_INT 3
20366: PUSH
20367: LD_INT 23
20369: PUSH
20370: LD_INT 0
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: LIST
20385: PPUSH
20386: CALL_OW 69
20390: ST_TO_ADDR
// if not tmp then
20391: LD_VAR 0 6
20395: NOT
20396: IFFALSE 20400
// exit ;
20398: GO 20546
// s1 := rand ( 1 , 4 ) ;
20400: LD_ADDR_VAR 0 2
20404: PUSH
20405: LD_INT 1
20407: PPUSH
20408: LD_INT 4
20410: PPUSH
20411: CALL_OW 12
20415: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20416: LD_ADDR_VAR 0 4
20420: PUSH
20421: LD_VAR 0 6
20425: PUSH
20426: LD_INT 1
20428: ARRAY
20429: PPUSH
20430: LD_VAR 0 2
20434: PPUSH
20435: CALL_OW 259
20439: ST_TO_ADDR
// if s1 = 1 then
20440: LD_VAR 0 2
20444: PUSH
20445: LD_INT 1
20447: EQUAL
20448: IFFALSE 20468
// s2 := rand ( 2 , 4 ) else
20450: LD_ADDR_VAR 0 3
20454: PUSH
20455: LD_INT 2
20457: PPUSH
20458: LD_INT 4
20460: PPUSH
20461: CALL_OW 12
20465: ST_TO_ADDR
20466: GO 20476
// s2 := 1 ;
20468: LD_ADDR_VAR 0 3
20472: PUSH
20473: LD_INT 1
20475: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20476: LD_ADDR_VAR 0 5
20480: PUSH
20481: LD_VAR 0 6
20485: PUSH
20486: LD_INT 1
20488: ARRAY
20489: PPUSH
20490: LD_VAR 0 3
20494: PPUSH
20495: CALL_OW 259
20499: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20500: LD_VAR 0 6
20504: PUSH
20505: LD_INT 1
20507: ARRAY
20508: PPUSH
20509: LD_VAR 0 2
20513: PPUSH
20514: LD_VAR 0 5
20518: PPUSH
20519: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20523: LD_VAR 0 6
20527: PUSH
20528: LD_INT 1
20530: ARRAY
20531: PPUSH
20532: LD_VAR 0 3
20536: PPUSH
20537: LD_VAR 0 4
20541: PPUSH
20542: CALL_OW 237
// end ;
20546: PPOPN 6
20548: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20549: LD_EXP 44
20553: PUSH
20554: LD_EXP 91
20558: AND
20559: IFFALSE 20638
20561: GO 20563
20563: DISABLE
20564: LD_INT 0
20566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20567: LD_ADDR_VAR 0 1
20571: PUSH
20572: LD_INT 22
20574: PUSH
20575: LD_OWVAR 2
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: PUSH
20584: LD_INT 30
20586: PUSH
20587: LD_INT 3
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: PUSH
20594: EMPTY
20595: LIST
20596: LIST
20597: PPUSH
20598: CALL_OW 69
20602: ST_TO_ADDR
// if not tmp then
20603: LD_VAR 0 1
20607: NOT
20608: IFFALSE 20612
// exit ;
20610: GO 20638
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20612: LD_VAR 0 1
20616: PUSH
20617: LD_INT 1
20619: PPUSH
20620: LD_VAR 0 1
20624: PPUSH
20625: CALL_OW 12
20629: ARRAY
20630: PPUSH
20631: LD_INT 1
20633: PPUSH
20634: CALL_OW 234
// end ;
20638: PPOPN 1
20640: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20641: LD_EXP 44
20645: PUSH
20646: LD_EXP 92
20650: AND
20651: IFFALSE 20763
20653: GO 20655
20655: DISABLE
20656: LD_INT 0
20658: PPUSH
20659: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20660: LD_ADDR_VAR 0 2
20664: PUSH
20665: LD_INT 22
20667: PUSH
20668: LD_OWVAR 2
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: PUSH
20677: LD_INT 2
20679: PUSH
20680: LD_INT 30
20682: PUSH
20683: LD_INT 27
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: PUSH
20690: LD_INT 30
20692: PUSH
20693: LD_INT 26
20695: PUSH
20696: EMPTY
20697: LIST
20698: LIST
20699: PUSH
20700: LD_INT 30
20702: PUSH
20703: LD_INT 28
20705: PUSH
20706: EMPTY
20707: LIST
20708: LIST
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: PPUSH
20720: CALL_OW 69
20724: ST_TO_ADDR
// if not tmp then
20725: LD_VAR 0 2
20729: NOT
20730: IFFALSE 20734
// exit ;
20732: GO 20763
// for i in tmp do
20734: LD_ADDR_VAR 0 1
20738: PUSH
20739: LD_VAR 0 2
20743: PUSH
20744: FOR_IN
20745: IFFALSE 20761
// SetLives ( i , 1 ) ;
20747: LD_VAR 0 1
20751: PPUSH
20752: LD_INT 1
20754: PPUSH
20755: CALL_OW 234
20759: GO 20744
20761: POP
20762: POP
// end ;
20763: PPOPN 2
20765: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20766: LD_EXP 44
20770: PUSH
20771: LD_EXP 93
20775: AND
20776: IFFALSE 21063
20778: GO 20780
20780: DISABLE
20781: LD_INT 0
20783: PPUSH
20784: PPUSH
20785: PPUSH
// begin i := rand ( 1 , 7 ) ;
20786: LD_ADDR_VAR 0 1
20790: PUSH
20791: LD_INT 1
20793: PPUSH
20794: LD_INT 7
20796: PPUSH
20797: CALL_OW 12
20801: ST_TO_ADDR
// case i of 1 :
20802: LD_VAR 0 1
20806: PUSH
20807: LD_INT 1
20809: DOUBLE
20810: EQUAL
20811: IFTRUE 20815
20813: GO 20825
20815: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20816: LD_STRING earthquake(getX(game), 0, 32)
20818: PPUSH
20819: CALL_OW 559
20823: GO 21063
20825: LD_INT 2
20827: DOUBLE
20828: EQUAL
20829: IFTRUE 20833
20831: GO 20847
20833: POP
// begin ToLua ( displayStucuk(); ) ;
20834: LD_STRING displayStucuk();
20836: PPUSH
20837: CALL_OW 559
// ResetFog ;
20841: CALL_OW 335
// end ; 3 :
20845: GO 21063
20847: LD_INT 3
20849: DOUBLE
20850: EQUAL
20851: IFTRUE 20855
20853: GO 20959
20855: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20856: LD_ADDR_VAR 0 2
20860: PUSH
20861: LD_INT 22
20863: PUSH
20864: LD_OWVAR 2
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PUSH
20873: LD_INT 25
20875: PUSH
20876: LD_INT 1
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: PPUSH
20887: CALL_OW 69
20891: ST_TO_ADDR
// if not tmp then
20892: LD_VAR 0 2
20896: NOT
20897: IFFALSE 20901
// exit ;
20899: GO 21063
// un := tmp [ rand ( 1 , tmp ) ] ;
20901: LD_ADDR_VAR 0 3
20905: PUSH
20906: LD_VAR 0 2
20910: PUSH
20911: LD_INT 1
20913: PPUSH
20914: LD_VAR 0 2
20918: PPUSH
20919: CALL_OW 12
20923: ARRAY
20924: ST_TO_ADDR
// if Crawls ( un ) then
20925: LD_VAR 0 3
20929: PPUSH
20930: CALL_OW 318
20934: IFFALSE 20945
// ComWalk ( un ) ;
20936: LD_VAR 0 3
20940: PPUSH
20941: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20945: LD_VAR 0 3
20949: PPUSH
20950: LD_INT 8
20952: PPUSH
20953: CALL_OW 336
// end ; 4 :
20957: GO 21063
20959: LD_INT 4
20961: DOUBLE
20962: EQUAL
20963: IFTRUE 20967
20965: GO 21041
20967: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20968: LD_ADDR_VAR 0 2
20972: PUSH
20973: LD_INT 22
20975: PUSH
20976: LD_OWVAR 2
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: PUSH
20985: LD_INT 30
20987: PUSH
20988: LD_INT 29
20990: PUSH
20991: EMPTY
20992: LIST
20993: LIST
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: PPUSH
20999: CALL_OW 69
21003: ST_TO_ADDR
// if not tmp then
21004: LD_VAR 0 2
21008: NOT
21009: IFFALSE 21013
// exit ;
21011: GO 21063
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21013: LD_VAR 0 2
21017: PUSH
21018: LD_INT 1
21020: ARRAY
21021: PPUSH
21022: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21026: LD_VAR 0 2
21030: PUSH
21031: LD_INT 1
21033: ARRAY
21034: PPUSH
21035: CALL_OW 65
// end ; 5 .. 7 :
21039: GO 21063
21041: LD_INT 5
21043: DOUBLE
21044: GREATEREQUAL
21045: IFFALSE 21053
21047: LD_INT 7
21049: DOUBLE
21050: LESSEQUAL
21051: IFTRUE 21055
21053: GO 21062
21055: POP
// StreamSibBomb ; end ;
21056: CALL 17300 0 0
21060: GO 21063
21062: POP
// end ;
21063: PPOPN 3
21065: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21066: LD_EXP 44
21070: PUSH
21071: LD_EXP 94
21075: AND
21076: IFFALSE 21232
21078: GO 21080
21080: DISABLE
21081: LD_INT 0
21083: PPUSH
21084: PPUSH
21085: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21086: LD_ADDR_VAR 0 2
21090: PUSH
21091: LD_INT 81
21093: PUSH
21094: LD_OWVAR 2
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: PUSH
21103: LD_INT 2
21105: PUSH
21106: LD_INT 21
21108: PUSH
21109: LD_INT 1
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: PUSH
21116: LD_INT 21
21118: PUSH
21119: LD_INT 2
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: LIST
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: PPUSH
21135: CALL_OW 69
21139: ST_TO_ADDR
// if not tmp then
21140: LD_VAR 0 2
21144: NOT
21145: IFFALSE 21149
// exit ;
21147: GO 21232
// p := 0 ;
21149: LD_ADDR_VAR 0 3
21153: PUSH
21154: LD_INT 0
21156: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21157: LD_INT 35
21159: PPUSH
21160: CALL_OW 67
// p := p + 1 ;
21164: LD_ADDR_VAR 0 3
21168: PUSH
21169: LD_VAR 0 3
21173: PUSH
21174: LD_INT 1
21176: PLUS
21177: ST_TO_ADDR
// for i in tmp do
21178: LD_ADDR_VAR 0 1
21182: PUSH
21183: LD_VAR 0 2
21187: PUSH
21188: FOR_IN
21189: IFFALSE 21220
// if GetLives ( i ) < 1000 then
21191: LD_VAR 0 1
21195: PPUSH
21196: CALL_OW 256
21200: PUSH
21201: LD_INT 1000
21203: LESS
21204: IFFALSE 21218
// SetLives ( i , 1000 ) ;
21206: LD_VAR 0 1
21210: PPUSH
21211: LD_INT 1000
21213: PPUSH
21214: CALL_OW 234
21218: GO 21188
21220: POP
21221: POP
// until p > 20 ;
21222: LD_VAR 0 3
21226: PUSH
21227: LD_INT 20
21229: GREATER
21230: IFFALSE 21157
// end ;
21232: PPOPN 3
21234: END
// every 0 0$1 trigger StreamModeActive and sTime do
21235: LD_EXP 44
21239: PUSH
21240: LD_EXP 95
21244: AND
21245: IFFALSE 21280
21247: GO 21249
21249: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21250: LD_INT 28
21252: PPUSH
21253: LD_OWVAR 2
21257: PPUSH
21258: LD_INT 2
21260: PPUSH
21261: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21265: LD_INT 30
21267: PPUSH
21268: LD_OWVAR 2
21272: PPUSH
21273: LD_INT 2
21275: PPUSH
21276: CALL_OW 322
// end ;
21280: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21281: LD_EXP 44
21285: PUSH
21286: LD_EXP 96
21290: AND
21291: IFFALSE 21412
21293: GO 21295
21295: DISABLE
21296: LD_INT 0
21298: PPUSH
21299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21300: LD_ADDR_VAR 0 2
21304: PUSH
21305: LD_INT 22
21307: PUSH
21308: LD_OWVAR 2
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: PUSH
21317: LD_INT 21
21319: PUSH
21320: LD_INT 1
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PUSH
21327: LD_INT 3
21329: PUSH
21330: LD_INT 23
21332: PUSH
21333: LD_INT 0
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: LIST
21348: PPUSH
21349: CALL_OW 69
21353: ST_TO_ADDR
// if not tmp then
21354: LD_VAR 0 2
21358: NOT
21359: IFFALSE 21363
// exit ;
21361: GO 21412
// for i in tmp do
21363: LD_ADDR_VAR 0 1
21367: PUSH
21368: LD_VAR 0 2
21372: PUSH
21373: FOR_IN
21374: IFFALSE 21410
// begin if Crawls ( i ) then
21376: LD_VAR 0 1
21380: PPUSH
21381: CALL_OW 318
21385: IFFALSE 21396
// ComWalk ( i ) ;
21387: LD_VAR 0 1
21391: PPUSH
21392: CALL_OW 138
// SetClass ( i , 2 ) ;
21396: LD_VAR 0 1
21400: PPUSH
21401: LD_INT 2
21403: PPUSH
21404: CALL_OW 336
// end ;
21408: GO 21373
21410: POP
21411: POP
// end ;
21412: PPOPN 2
21414: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21415: LD_EXP 44
21419: PUSH
21420: LD_EXP 97
21424: AND
21425: IFFALSE 21713
21427: GO 21429
21429: DISABLE
21430: LD_INT 0
21432: PPUSH
21433: PPUSH
21434: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21435: LD_OWVAR 2
21439: PPUSH
21440: LD_INT 9
21442: PPUSH
21443: LD_INT 1
21445: PPUSH
21446: LD_INT 1
21448: PPUSH
21449: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21453: LD_INT 9
21455: PPUSH
21456: LD_OWVAR 2
21460: PPUSH
21461: CALL_OW 343
// uc_side := 9 ;
21465: LD_ADDR_OWVAR 20
21469: PUSH
21470: LD_INT 9
21472: ST_TO_ADDR
// uc_nation := 2 ;
21473: LD_ADDR_OWVAR 21
21477: PUSH
21478: LD_INT 2
21480: ST_TO_ADDR
// hc_name := Dark Warrior ;
21481: LD_ADDR_OWVAR 26
21485: PUSH
21486: LD_STRING Dark Warrior
21488: ST_TO_ADDR
// hc_gallery :=  ;
21489: LD_ADDR_OWVAR 33
21493: PUSH
21494: LD_STRING 
21496: ST_TO_ADDR
// hc_noskilllimit := true ;
21497: LD_ADDR_OWVAR 76
21501: PUSH
21502: LD_INT 1
21504: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
21505: LD_ADDR_OWVAR 31
21509: PUSH
21510: LD_INT 30
21512: PUSH
21513: LD_INT 30
21515: PUSH
21516: LD_INT 30
21518: PUSH
21519: LD_INT 30
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: ST_TO_ADDR
// un := CreateHuman ;
21528: LD_ADDR_VAR 0 3
21532: PUSH
21533: CALL_OW 44
21537: ST_TO_ADDR
// hc_noskilllimit := false ;
21538: LD_ADDR_OWVAR 76
21542: PUSH
21543: LD_INT 0
21545: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21546: LD_VAR 0 3
21550: PPUSH
21551: LD_INT 1
21553: PPUSH
21554: CALL_OW 51
// ToLua ( playRanger() ) ;
21558: LD_STRING playRanger()
21560: PPUSH
21561: CALL_OW 559
// p := 0 ;
21565: LD_ADDR_VAR 0 2
21569: PUSH
21570: LD_INT 0
21572: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21573: LD_INT 35
21575: PPUSH
21576: CALL_OW 67
// p := p + 1 ;
21580: LD_ADDR_VAR 0 2
21584: PUSH
21585: LD_VAR 0 2
21589: PUSH
21590: LD_INT 1
21592: PLUS
21593: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21594: LD_VAR 0 3
21598: PPUSH
21599: CALL_OW 256
21603: PUSH
21604: LD_INT 1000
21606: LESS
21607: IFFALSE 21621
// SetLives ( un , 1000 ) ;
21609: LD_VAR 0 3
21613: PPUSH
21614: LD_INT 1000
21616: PPUSH
21617: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21621: LD_VAR 0 3
21625: PPUSH
21626: LD_INT 81
21628: PUSH
21629: LD_OWVAR 2
21633: PUSH
21634: EMPTY
21635: LIST
21636: LIST
21637: PUSH
21638: LD_INT 91
21640: PUSH
21641: LD_VAR 0 3
21645: PUSH
21646: LD_INT 30
21648: PUSH
21649: EMPTY
21650: LIST
21651: LIST
21652: LIST
21653: PUSH
21654: EMPTY
21655: LIST
21656: LIST
21657: PPUSH
21658: CALL_OW 69
21662: PPUSH
21663: LD_VAR 0 3
21667: PPUSH
21668: CALL_OW 74
21672: PPUSH
21673: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
21677: LD_VAR 0 2
21681: PUSH
21682: LD_INT 80
21684: GREATER
21685: PUSH
21686: LD_VAR 0 3
21690: PPUSH
21691: CALL_OW 301
21695: OR
21696: IFFALSE 21573
// if un then
21698: LD_VAR 0 3
21702: IFFALSE 21713
// RemoveUnit ( un ) ;
21704: LD_VAR 0 3
21708: PPUSH
21709: CALL_OW 64
// end ;
21713: PPOPN 3
21715: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
21716: LD_EXP 98
21720: IFFALSE 21836
21722: GO 21724
21724: DISABLE
21725: LD_INT 0
21727: PPUSH
21728: PPUSH
21729: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21730: LD_ADDR_VAR 0 2
21734: PUSH
21735: LD_INT 81
21737: PUSH
21738: LD_OWVAR 2
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: PUSH
21747: LD_INT 21
21749: PUSH
21750: LD_INT 1
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: PPUSH
21761: CALL_OW 69
21765: ST_TO_ADDR
// ToLua ( playComputer() ) ;
21766: LD_STRING playComputer()
21768: PPUSH
21769: CALL_OW 559
// if not tmp then
21773: LD_VAR 0 2
21777: NOT
21778: IFFALSE 21782
// exit ;
21780: GO 21836
// for i in tmp do
21782: LD_ADDR_VAR 0 1
21786: PUSH
21787: LD_VAR 0 2
21791: PUSH
21792: FOR_IN
21793: IFFALSE 21834
// for j := 1 to 4 do
21795: LD_ADDR_VAR 0 3
21799: PUSH
21800: DOUBLE
21801: LD_INT 1
21803: DEC
21804: ST_TO_ADDR
21805: LD_INT 4
21807: PUSH
21808: FOR_TO
21809: IFFALSE 21830
// SetSkill ( i , j , 10 ) ;
21811: LD_VAR 0 1
21815: PPUSH
21816: LD_VAR 0 3
21820: PPUSH
21821: LD_INT 10
21823: PPUSH
21824: CALL_OW 237
21828: GO 21808
21830: POP
21831: POP
21832: GO 21792
21834: POP
21835: POP
// end ;
21836: PPOPN 3
21838: END
// every 0 0$1 trigger s30 do var i , tmp ;
21839: LD_EXP 99
21843: IFFALSE 21912
21845: GO 21847
21847: DISABLE
21848: LD_INT 0
21850: PPUSH
21851: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21852: LD_ADDR_VAR 0 2
21856: PUSH
21857: LD_INT 22
21859: PUSH
21860: LD_OWVAR 2
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PPUSH
21869: CALL_OW 69
21873: ST_TO_ADDR
// if not tmp then
21874: LD_VAR 0 2
21878: NOT
21879: IFFALSE 21883
// exit ;
21881: GO 21912
// for i in tmp do
21883: LD_ADDR_VAR 0 1
21887: PUSH
21888: LD_VAR 0 2
21892: PUSH
21893: FOR_IN
21894: IFFALSE 21910
// SetLives ( i , 300 ) ;
21896: LD_VAR 0 1
21900: PPUSH
21901: LD_INT 300
21903: PPUSH
21904: CALL_OW 234
21908: GO 21893
21910: POP
21911: POP
// end ;
21912: PPOPN 2
21914: END
// every 0 0$1 trigger s60 do var i , tmp ;
21915: LD_EXP 100
21919: IFFALSE 21988
21921: GO 21923
21923: DISABLE
21924: LD_INT 0
21926: PPUSH
21927: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21928: LD_ADDR_VAR 0 2
21932: PUSH
21933: LD_INT 22
21935: PUSH
21936: LD_OWVAR 2
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PPUSH
21945: CALL_OW 69
21949: ST_TO_ADDR
// if not tmp then
21950: LD_VAR 0 2
21954: NOT
21955: IFFALSE 21959
// exit ;
21957: GO 21988
// for i in tmp do
21959: LD_ADDR_VAR 0 1
21963: PUSH
21964: LD_VAR 0 2
21968: PUSH
21969: FOR_IN
21970: IFFALSE 21986
// SetLives ( i , 600 ) ;
21972: LD_VAR 0 1
21976: PPUSH
21977: LD_INT 600
21979: PPUSH
21980: CALL_OW 234
21984: GO 21969
21986: POP
21987: POP
// end ;
21988: PPOPN 2
21990: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21991: LD_INT 0
21993: PPUSH
// case cmd of 301 :
21994: LD_VAR 0 1
21998: PUSH
21999: LD_INT 301
22001: DOUBLE
22002: EQUAL
22003: IFTRUE 22007
22005: GO 22039
22007: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22008: LD_VAR 0 6
22012: PPUSH
22013: LD_VAR 0 7
22017: PPUSH
22018: LD_VAR 0 8
22022: PPUSH
22023: LD_VAR 0 4
22027: PPUSH
22028: LD_VAR 0 5
22032: PPUSH
22033: CALL 23240 0 5
22037: GO 22160
22039: LD_INT 302
22041: DOUBLE
22042: EQUAL
22043: IFTRUE 22047
22045: GO 22084
22047: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22048: LD_VAR 0 6
22052: PPUSH
22053: LD_VAR 0 7
22057: PPUSH
22058: LD_VAR 0 8
22062: PPUSH
22063: LD_VAR 0 9
22067: PPUSH
22068: LD_VAR 0 4
22072: PPUSH
22073: LD_VAR 0 5
22077: PPUSH
22078: CALL 23331 0 6
22082: GO 22160
22084: LD_INT 303
22086: DOUBLE
22087: EQUAL
22088: IFTRUE 22092
22090: GO 22129
22092: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22093: LD_VAR 0 6
22097: PPUSH
22098: LD_VAR 0 7
22102: PPUSH
22103: LD_VAR 0 8
22107: PPUSH
22108: LD_VAR 0 9
22112: PPUSH
22113: LD_VAR 0 4
22117: PPUSH
22118: LD_VAR 0 5
22122: PPUSH
22123: CALL 22165 0 6
22127: GO 22160
22129: LD_INT 304
22131: DOUBLE
22132: EQUAL
22133: IFTRUE 22137
22135: GO 22159
22137: POP
// hHackTeleport ( unit , x , y ) ; end ;
22138: LD_VAR 0 2
22142: PPUSH
22143: LD_VAR 0 4
22147: PPUSH
22148: LD_VAR 0 5
22152: PPUSH
22153: CALL 23924 0 3
22157: GO 22160
22159: POP
// end ;
22160: LD_VAR 0 12
22164: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22165: LD_INT 0
22167: PPUSH
22168: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22169: LD_VAR 0 1
22173: PUSH
22174: LD_INT 1
22176: LESS
22177: PUSH
22178: LD_VAR 0 1
22182: PUSH
22183: LD_INT 3
22185: GREATER
22186: OR
22187: PUSH
22188: LD_VAR 0 5
22192: PPUSH
22193: LD_VAR 0 6
22197: PPUSH
22198: CALL_OW 428
22202: OR
22203: IFFALSE 22207
// exit ;
22205: GO 22927
// uc_side := your_side ;
22207: LD_ADDR_OWVAR 20
22211: PUSH
22212: LD_OWVAR 2
22216: ST_TO_ADDR
// uc_nation := nation ;
22217: LD_ADDR_OWVAR 21
22221: PUSH
22222: LD_VAR 0 1
22226: ST_TO_ADDR
// bc_level = 1 ;
22227: LD_ADDR_OWVAR 43
22231: PUSH
22232: LD_INT 1
22234: ST_TO_ADDR
// case btype of 1 :
22235: LD_VAR 0 2
22239: PUSH
22240: LD_INT 1
22242: DOUBLE
22243: EQUAL
22244: IFTRUE 22248
22246: GO 22259
22248: POP
// bc_type := b_depot ; 2 :
22249: LD_ADDR_OWVAR 42
22253: PUSH
22254: LD_INT 0
22256: ST_TO_ADDR
22257: GO 22871
22259: LD_INT 2
22261: DOUBLE
22262: EQUAL
22263: IFTRUE 22267
22265: GO 22278
22267: POP
// bc_type := b_warehouse ; 3 :
22268: LD_ADDR_OWVAR 42
22272: PUSH
22273: LD_INT 1
22275: ST_TO_ADDR
22276: GO 22871
22278: LD_INT 3
22280: DOUBLE
22281: EQUAL
22282: IFTRUE 22286
22284: GO 22297
22286: POP
// bc_type := b_lab ; 4 .. 9 :
22287: LD_ADDR_OWVAR 42
22291: PUSH
22292: LD_INT 6
22294: ST_TO_ADDR
22295: GO 22871
22297: LD_INT 4
22299: DOUBLE
22300: GREATEREQUAL
22301: IFFALSE 22309
22303: LD_INT 9
22305: DOUBLE
22306: LESSEQUAL
22307: IFTRUE 22311
22309: GO 22363
22311: POP
// begin bc_type := b_lab_half ;
22312: LD_ADDR_OWVAR 42
22316: PUSH
22317: LD_INT 7
22319: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22320: LD_ADDR_OWVAR 44
22324: PUSH
22325: LD_INT 10
22327: PUSH
22328: LD_INT 11
22330: PUSH
22331: LD_INT 12
22333: PUSH
22334: LD_INT 15
22336: PUSH
22337: LD_INT 14
22339: PUSH
22340: LD_INT 13
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: PUSH
22351: LD_VAR 0 2
22355: PUSH
22356: LD_INT 3
22358: MINUS
22359: ARRAY
22360: ST_TO_ADDR
// end ; 10 .. 13 :
22361: GO 22871
22363: LD_INT 10
22365: DOUBLE
22366: GREATEREQUAL
22367: IFFALSE 22375
22369: LD_INT 13
22371: DOUBLE
22372: LESSEQUAL
22373: IFTRUE 22377
22375: GO 22454
22377: POP
// begin bc_type := b_lab_full ;
22378: LD_ADDR_OWVAR 42
22382: PUSH
22383: LD_INT 8
22385: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22386: LD_ADDR_OWVAR 44
22390: PUSH
22391: LD_INT 10
22393: PUSH
22394: LD_INT 12
22396: PUSH
22397: LD_INT 14
22399: PUSH
22400: LD_INT 13
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: PUSH
22409: LD_VAR 0 2
22413: PUSH
22414: LD_INT 9
22416: MINUS
22417: ARRAY
22418: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22419: LD_ADDR_OWVAR 45
22423: PUSH
22424: LD_INT 11
22426: PUSH
22427: LD_INT 15
22429: PUSH
22430: LD_INT 12
22432: PUSH
22433: LD_INT 15
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: PUSH
22442: LD_VAR 0 2
22446: PUSH
22447: LD_INT 9
22449: MINUS
22450: ARRAY
22451: ST_TO_ADDR
// end ; 14 :
22452: GO 22871
22454: LD_INT 14
22456: DOUBLE
22457: EQUAL
22458: IFTRUE 22462
22460: GO 22473
22462: POP
// bc_type := b_workshop ; 15 :
22463: LD_ADDR_OWVAR 42
22467: PUSH
22468: LD_INT 2
22470: ST_TO_ADDR
22471: GO 22871
22473: LD_INT 15
22475: DOUBLE
22476: EQUAL
22477: IFTRUE 22481
22479: GO 22492
22481: POP
// bc_type := b_factory ; 16 :
22482: LD_ADDR_OWVAR 42
22486: PUSH
22487: LD_INT 3
22489: ST_TO_ADDR
22490: GO 22871
22492: LD_INT 16
22494: DOUBLE
22495: EQUAL
22496: IFTRUE 22500
22498: GO 22511
22500: POP
// bc_type := b_ext_gun ; 17 :
22501: LD_ADDR_OWVAR 42
22505: PUSH
22506: LD_INT 17
22508: ST_TO_ADDR
22509: GO 22871
22511: LD_INT 17
22513: DOUBLE
22514: EQUAL
22515: IFTRUE 22519
22517: GO 22547
22519: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22520: LD_ADDR_OWVAR 42
22524: PUSH
22525: LD_INT 19
22527: PUSH
22528: LD_INT 23
22530: PUSH
22531: LD_INT 19
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: LIST
22538: PUSH
22539: LD_VAR 0 1
22543: ARRAY
22544: ST_TO_ADDR
22545: GO 22871
22547: LD_INT 18
22549: DOUBLE
22550: EQUAL
22551: IFTRUE 22555
22553: GO 22566
22555: POP
// bc_type := b_ext_radar ; 19 :
22556: LD_ADDR_OWVAR 42
22560: PUSH
22561: LD_INT 20
22563: ST_TO_ADDR
22564: GO 22871
22566: LD_INT 19
22568: DOUBLE
22569: EQUAL
22570: IFTRUE 22574
22572: GO 22585
22574: POP
// bc_type := b_ext_radio ; 20 :
22575: LD_ADDR_OWVAR 42
22579: PUSH
22580: LD_INT 22
22582: ST_TO_ADDR
22583: GO 22871
22585: LD_INT 20
22587: DOUBLE
22588: EQUAL
22589: IFTRUE 22593
22591: GO 22604
22593: POP
// bc_type := b_ext_siberium ; 21 :
22594: LD_ADDR_OWVAR 42
22598: PUSH
22599: LD_INT 21
22601: ST_TO_ADDR
22602: GO 22871
22604: LD_INT 21
22606: DOUBLE
22607: EQUAL
22608: IFTRUE 22612
22610: GO 22623
22612: POP
// bc_type := b_ext_computer ; 22 :
22613: LD_ADDR_OWVAR 42
22617: PUSH
22618: LD_INT 24
22620: ST_TO_ADDR
22621: GO 22871
22623: LD_INT 22
22625: DOUBLE
22626: EQUAL
22627: IFTRUE 22631
22629: GO 22642
22631: POP
// bc_type := b_ext_track ; 23 :
22632: LD_ADDR_OWVAR 42
22636: PUSH
22637: LD_INT 16
22639: ST_TO_ADDR
22640: GO 22871
22642: LD_INT 23
22644: DOUBLE
22645: EQUAL
22646: IFTRUE 22650
22648: GO 22661
22650: POP
// bc_type := b_ext_laser ; 24 :
22651: LD_ADDR_OWVAR 42
22655: PUSH
22656: LD_INT 25
22658: ST_TO_ADDR
22659: GO 22871
22661: LD_INT 24
22663: DOUBLE
22664: EQUAL
22665: IFTRUE 22669
22667: GO 22680
22669: POP
// bc_type := b_control_tower ; 25 :
22670: LD_ADDR_OWVAR 42
22674: PUSH
22675: LD_INT 36
22677: ST_TO_ADDR
22678: GO 22871
22680: LD_INT 25
22682: DOUBLE
22683: EQUAL
22684: IFTRUE 22688
22686: GO 22699
22688: POP
// bc_type := b_breastwork ; 26 :
22689: LD_ADDR_OWVAR 42
22693: PUSH
22694: LD_INT 31
22696: ST_TO_ADDR
22697: GO 22871
22699: LD_INT 26
22701: DOUBLE
22702: EQUAL
22703: IFTRUE 22707
22705: GO 22718
22707: POP
// bc_type := b_bunker ; 27 :
22708: LD_ADDR_OWVAR 42
22712: PUSH
22713: LD_INT 32
22715: ST_TO_ADDR
22716: GO 22871
22718: LD_INT 27
22720: DOUBLE
22721: EQUAL
22722: IFTRUE 22726
22724: GO 22737
22726: POP
// bc_type := b_turret ; 28 :
22727: LD_ADDR_OWVAR 42
22731: PUSH
22732: LD_INT 33
22734: ST_TO_ADDR
22735: GO 22871
22737: LD_INT 28
22739: DOUBLE
22740: EQUAL
22741: IFTRUE 22745
22743: GO 22756
22745: POP
// bc_type := b_armoury ; 29 :
22746: LD_ADDR_OWVAR 42
22750: PUSH
22751: LD_INT 4
22753: ST_TO_ADDR
22754: GO 22871
22756: LD_INT 29
22758: DOUBLE
22759: EQUAL
22760: IFTRUE 22764
22762: GO 22775
22764: POP
// bc_type := b_barracks ; 30 :
22765: LD_ADDR_OWVAR 42
22769: PUSH
22770: LD_INT 5
22772: ST_TO_ADDR
22773: GO 22871
22775: LD_INT 30
22777: DOUBLE
22778: EQUAL
22779: IFTRUE 22783
22781: GO 22794
22783: POP
// bc_type := b_solar_power ; 31 :
22784: LD_ADDR_OWVAR 42
22788: PUSH
22789: LD_INT 27
22791: ST_TO_ADDR
22792: GO 22871
22794: LD_INT 31
22796: DOUBLE
22797: EQUAL
22798: IFTRUE 22802
22800: GO 22813
22802: POP
// bc_type := b_oil_power ; 32 :
22803: LD_ADDR_OWVAR 42
22807: PUSH
22808: LD_INT 26
22810: ST_TO_ADDR
22811: GO 22871
22813: LD_INT 32
22815: DOUBLE
22816: EQUAL
22817: IFTRUE 22821
22819: GO 22832
22821: POP
// bc_type := b_siberite_power ; 33 :
22822: LD_ADDR_OWVAR 42
22826: PUSH
22827: LD_INT 28
22829: ST_TO_ADDR
22830: GO 22871
22832: LD_INT 33
22834: DOUBLE
22835: EQUAL
22836: IFTRUE 22840
22838: GO 22851
22840: POP
// bc_type := b_oil_mine ; 34 :
22841: LD_ADDR_OWVAR 42
22845: PUSH
22846: LD_INT 29
22848: ST_TO_ADDR
22849: GO 22871
22851: LD_INT 34
22853: DOUBLE
22854: EQUAL
22855: IFTRUE 22859
22857: GO 22870
22859: POP
// bc_type := b_siberite_mine ; end ;
22860: LD_ADDR_OWVAR 42
22864: PUSH
22865: LD_INT 30
22867: ST_TO_ADDR
22868: GO 22871
22870: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22871: LD_ADDR_VAR 0 8
22875: PUSH
22876: LD_VAR 0 5
22880: PPUSH
22881: LD_VAR 0 6
22885: PPUSH
22886: LD_VAR 0 3
22890: PPUSH
22891: CALL_OW 47
22895: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22896: LD_OWVAR 42
22900: PUSH
22901: LD_INT 32
22903: PUSH
22904: LD_INT 33
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: IN
22911: IFFALSE 22927
// PlaceWeaponTurret ( b , weapon ) ;
22913: LD_VAR 0 8
22917: PPUSH
22918: LD_VAR 0 4
22922: PPUSH
22923: CALL_OW 431
// end ;
22927: LD_VAR 0 7
22931: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22932: LD_INT 0
22934: PPUSH
22935: PPUSH
22936: PPUSH
22937: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22938: LD_ADDR_VAR 0 4
22942: PUSH
22943: LD_INT 22
22945: PUSH
22946: LD_OWVAR 2
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: PUSH
22955: LD_INT 2
22957: PUSH
22958: LD_INT 30
22960: PUSH
22961: LD_INT 0
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: LD_INT 30
22970: PUSH
22971: LD_INT 1
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: LIST
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: PPUSH
22987: CALL_OW 69
22991: ST_TO_ADDR
// if not tmp then
22992: LD_VAR 0 4
22996: NOT
22997: IFFALSE 23001
// exit ;
22999: GO 23060
// for i in tmp do
23001: LD_ADDR_VAR 0 2
23005: PUSH
23006: LD_VAR 0 4
23010: PUSH
23011: FOR_IN
23012: IFFALSE 23058
// for j = 1 to 3 do
23014: LD_ADDR_VAR 0 3
23018: PUSH
23019: DOUBLE
23020: LD_INT 1
23022: DEC
23023: ST_TO_ADDR
23024: LD_INT 3
23026: PUSH
23027: FOR_TO
23028: IFFALSE 23054
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23030: LD_VAR 0 2
23034: PPUSH
23035: CALL_OW 274
23039: PPUSH
23040: LD_VAR 0 3
23044: PPUSH
23045: LD_INT 99999
23047: PPUSH
23048: CALL_OW 277
23052: GO 23027
23054: POP
23055: POP
23056: GO 23011
23058: POP
23059: POP
// end ;
23060: LD_VAR 0 1
23064: RET
// export function hHackSetLevel10 ; var i , j ; begin
23065: LD_INT 0
23067: PPUSH
23068: PPUSH
23069: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23070: LD_ADDR_VAR 0 2
23074: PUSH
23075: LD_INT 21
23077: PUSH
23078: LD_INT 1
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: PPUSH
23085: CALL_OW 69
23089: PUSH
23090: FOR_IN
23091: IFFALSE 23143
// if IsSelected ( i ) then
23093: LD_VAR 0 2
23097: PPUSH
23098: CALL_OW 306
23102: IFFALSE 23141
// begin for j := 1 to 4 do
23104: LD_ADDR_VAR 0 3
23108: PUSH
23109: DOUBLE
23110: LD_INT 1
23112: DEC
23113: ST_TO_ADDR
23114: LD_INT 4
23116: PUSH
23117: FOR_TO
23118: IFFALSE 23139
// SetSkill ( i , j , 10 ) ;
23120: LD_VAR 0 2
23124: PPUSH
23125: LD_VAR 0 3
23129: PPUSH
23130: LD_INT 10
23132: PPUSH
23133: CALL_OW 237
23137: GO 23117
23139: POP
23140: POP
// end ;
23141: GO 23090
23143: POP
23144: POP
// end ;
23145: LD_VAR 0 1
23149: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23150: LD_INT 0
23152: PPUSH
23153: PPUSH
23154: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23155: LD_ADDR_VAR 0 2
23159: PUSH
23160: LD_INT 22
23162: PUSH
23163: LD_OWVAR 2
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: PUSH
23172: LD_INT 21
23174: PUSH
23175: LD_INT 1
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: PPUSH
23186: CALL_OW 69
23190: PUSH
23191: FOR_IN
23192: IFFALSE 23233
// begin for j := 1 to 4 do
23194: LD_ADDR_VAR 0 3
23198: PUSH
23199: DOUBLE
23200: LD_INT 1
23202: DEC
23203: ST_TO_ADDR
23204: LD_INT 4
23206: PUSH
23207: FOR_TO
23208: IFFALSE 23229
// SetSkill ( i , j , 10 ) ;
23210: LD_VAR 0 2
23214: PPUSH
23215: LD_VAR 0 3
23219: PPUSH
23220: LD_INT 10
23222: PPUSH
23223: CALL_OW 237
23227: GO 23207
23229: POP
23230: POP
// end ;
23231: GO 23191
23233: POP
23234: POP
// end ;
23235: LD_VAR 0 1
23239: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23240: LD_INT 0
23242: PPUSH
// uc_side := your_side ;
23243: LD_ADDR_OWVAR 20
23247: PUSH
23248: LD_OWVAR 2
23252: ST_TO_ADDR
// uc_nation := nation ;
23253: LD_ADDR_OWVAR 21
23257: PUSH
23258: LD_VAR 0 1
23262: ST_TO_ADDR
// InitHc ;
23263: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23267: LD_INT 0
23269: PPUSH
23270: LD_VAR 0 2
23274: PPUSH
23275: LD_VAR 0 3
23279: PPUSH
23280: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23284: LD_VAR 0 4
23288: PPUSH
23289: LD_VAR 0 5
23293: PPUSH
23294: CALL_OW 428
23298: PUSH
23299: LD_INT 0
23301: EQUAL
23302: IFFALSE 23326
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23304: CALL_OW 44
23308: PPUSH
23309: LD_VAR 0 4
23313: PPUSH
23314: LD_VAR 0 5
23318: PPUSH
23319: LD_INT 1
23321: PPUSH
23322: CALL_OW 48
// end ;
23326: LD_VAR 0 6
23330: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23331: LD_INT 0
23333: PPUSH
23334: PPUSH
// uc_side := your_side ;
23335: LD_ADDR_OWVAR 20
23339: PUSH
23340: LD_OWVAR 2
23344: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23345: LD_VAR 0 1
23349: PUSH
23350: LD_INT 1
23352: PUSH
23353: LD_INT 2
23355: PUSH
23356: LD_INT 3
23358: PUSH
23359: LD_INT 4
23361: PUSH
23362: LD_INT 5
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: IN
23372: IFFALSE 23384
// uc_nation := nation_american else
23374: LD_ADDR_OWVAR 21
23378: PUSH
23379: LD_INT 1
23381: ST_TO_ADDR
23382: GO 23427
// if chassis in [ 11 , 12 , 13 , 14 ] then
23384: LD_VAR 0 1
23388: PUSH
23389: LD_INT 11
23391: PUSH
23392: LD_INT 12
23394: PUSH
23395: LD_INT 13
23397: PUSH
23398: LD_INT 14
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: IN
23407: IFFALSE 23419
// uc_nation := nation_arabian else
23409: LD_ADDR_OWVAR 21
23413: PUSH
23414: LD_INT 2
23416: ST_TO_ADDR
23417: GO 23427
// uc_nation := nation_russian ;
23419: LD_ADDR_OWVAR 21
23423: PUSH
23424: LD_INT 3
23426: ST_TO_ADDR
// vc_chassis := chassis ;
23427: LD_ADDR_OWVAR 37
23431: PUSH
23432: LD_VAR 0 1
23436: ST_TO_ADDR
// vc_engine := engine ;
23437: LD_ADDR_OWVAR 39
23441: PUSH
23442: LD_VAR 0 2
23446: ST_TO_ADDR
// vc_control := control ;
23447: LD_ADDR_OWVAR 38
23451: PUSH
23452: LD_VAR 0 3
23456: ST_TO_ADDR
// vc_weapon := weapon ;
23457: LD_ADDR_OWVAR 40
23461: PUSH
23462: LD_VAR 0 4
23466: ST_TO_ADDR
// un := CreateVehicle ;
23467: LD_ADDR_VAR 0 8
23471: PUSH
23472: CALL_OW 45
23476: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23477: LD_VAR 0 8
23481: PPUSH
23482: LD_INT 0
23484: PPUSH
23485: LD_INT 5
23487: PPUSH
23488: CALL_OW 12
23492: PPUSH
23493: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23497: LD_VAR 0 8
23501: PPUSH
23502: LD_VAR 0 5
23506: PPUSH
23507: LD_VAR 0 6
23511: PPUSH
23512: LD_INT 1
23514: PPUSH
23515: CALL_OW 48
// end ;
23519: LD_VAR 0 7
23523: RET
// export hInvincible ; every 1 do
23524: GO 23526
23526: DISABLE
// hInvincible := [ ] ;
23527: LD_ADDR_EXP 101
23531: PUSH
23532: EMPTY
23533: ST_TO_ADDR
23534: END
// every 10 do var i ;
23535: GO 23537
23537: DISABLE
23538: LD_INT 0
23540: PPUSH
// begin enable ;
23541: ENABLE
// if not hInvincible then
23542: LD_EXP 101
23546: NOT
23547: IFFALSE 23551
// exit ;
23549: GO 23595
// for i in hInvincible do
23551: LD_ADDR_VAR 0 1
23555: PUSH
23556: LD_EXP 101
23560: PUSH
23561: FOR_IN
23562: IFFALSE 23593
// if GetLives ( i ) < 1000 then
23564: LD_VAR 0 1
23568: PPUSH
23569: CALL_OW 256
23573: PUSH
23574: LD_INT 1000
23576: LESS
23577: IFFALSE 23591
// SetLives ( i , 1000 ) ;
23579: LD_VAR 0 1
23583: PPUSH
23584: LD_INT 1000
23586: PPUSH
23587: CALL_OW 234
23591: GO 23561
23593: POP
23594: POP
// end ;
23595: PPOPN 1
23597: END
// export function hHackInvincible ; var i ; begin
23598: LD_INT 0
23600: PPUSH
23601: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23602: LD_ADDR_VAR 0 2
23606: PUSH
23607: LD_INT 2
23609: PUSH
23610: LD_INT 21
23612: PUSH
23613: LD_INT 1
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PUSH
23620: LD_INT 21
23622: PUSH
23623: LD_INT 2
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: LIST
23634: PPUSH
23635: CALL_OW 69
23639: PUSH
23640: FOR_IN
23641: IFFALSE 23702
// if IsSelected ( i ) then
23643: LD_VAR 0 2
23647: PPUSH
23648: CALL_OW 306
23652: IFFALSE 23700
// begin if i in hInvincible then
23654: LD_VAR 0 2
23658: PUSH
23659: LD_EXP 101
23663: IN
23664: IFFALSE 23684
// hInvincible := hInvincible diff i else
23666: LD_ADDR_EXP 101
23670: PUSH
23671: LD_EXP 101
23675: PUSH
23676: LD_VAR 0 2
23680: DIFF
23681: ST_TO_ADDR
23682: GO 23700
// hInvincible := hInvincible union i ;
23684: LD_ADDR_EXP 101
23688: PUSH
23689: LD_EXP 101
23693: PUSH
23694: LD_VAR 0 2
23698: UNION
23699: ST_TO_ADDR
// end ;
23700: GO 23640
23702: POP
23703: POP
// end ;
23704: LD_VAR 0 1
23708: RET
// export function hHackInvisible ; var i , j ; begin
23709: LD_INT 0
23711: PPUSH
23712: PPUSH
23713: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23714: LD_ADDR_VAR 0 2
23718: PUSH
23719: LD_INT 21
23721: PUSH
23722: LD_INT 1
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PPUSH
23729: CALL_OW 69
23733: PUSH
23734: FOR_IN
23735: IFFALSE 23759
// if IsSelected ( i ) then
23737: LD_VAR 0 2
23741: PPUSH
23742: CALL_OW 306
23746: IFFALSE 23757
// ComForceInvisible ( i ) ;
23748: LD_VAR 0 2
23752: PPUSH
23753: CALL_OW 496
23757: GO 23734
23759: POP
23760: POP
// end ;
23761: LD_VAR 0 1
23765: RET
// export function hHackChangeYourSide ; begin
23766: LD_INT 0
23768: PPUSH
// if your_side = 8 then
23769: LD_OWVAR 2
23773: PUSH
23774: LD_INT 8
23776: EQUAL
23777: IFFALSE 23789
// your_side := 0 else
23779: LD_ADDR_OWVAR 2
23783: PUSH
23784: LD_INT 0
23786: ST_TO_ADDR
23787: GO 23803
// your_side := your_side + 1 ;
23789: LD_ADDR_OWVAR 2
23793: PUSH
23794: LD_OWVAR 2
23798: PUSH
23799: LD_INT 1
23801: PLUS
23802: ST_TO_ADDR
// end ;
23803: LD_VAR 0 1
23807: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23808: LD_INT 0
23810: PPUSH
23811: PPUSH
23812: PPUSH
// for i in all_units do
23813: LD_ADDR_VAR 0 2
23817: PUSH
23818: LD_OWVAR 3
23822: PUSH
23823: FOR_IN
23824: IFFALSE 23902
// if IsSelected ( i ) then
23826: LD_VAR 0 2
23830: PPUSH
23831: CALL_OW 306
23835: IFFALSE 23900
// begin j := GetSide ( i ) ;
23837: LD_ADDR_VAR 0 3
23841: PUSH
23842: LD_VAR 0 2
23846: PPUSH
23847: CALL_OW 255
23851: ST_TO_ADDR
// if j = 8 then
23852: LD_VAR 0 3
23856: PUSH
23857: LD_INT 8
23859: EQUAL
23860: IFFALSE 23872
// j := 0 else
23862: LD_ADDR_VAR 0 3
23866: PUSH
23867: LD_INT 0
23869: ST_TO_ADDR
23870: GO 23886
// j := j + 1 ;
23872: LD_ADDR_VAR 0 3
23876: PUSH
23877: LD_VAR 0 3
23881: PUSH
23882: LD_INT 1
23884: PLUS
23885: ST_TO_ADDR
// SetSide ( i , j ) ;
23886: LD_VAR 0 2
23890: PPUSH
23891: LD_VAR 0 3
23895: PPUSH
23896: CALL_OW 235
// end ;
23900: GO 23823
23902: POP
23903: POP
// end ;
23904: LD_VAR 0 1
23908: RET
// export function hHackFog ; begin
23909: LD_INT 0
23911: PPUSH
// FogOff ( true ) ;
23912: LD_INT 1
23914: PPUSH
23915: CALL_OW 344
// end ;
23919: LD_VAR 0 1
23923: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23924: LD_INT 0
23926: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23927: LD_VAR 0 1
23931: PPUSH
23932: LD_VAR 0 2
23936: PPUSH
23937: LD_VAR 0 3
23941: PPUSH
23942: LD_INT 1
23944: PPUSH
23945: LD_INT 1
23947: PPUSH
23948: CALL_OW 483
// CenterOnXY ( x , y ) ;
23952: LD_VAR 0 2
23956: PPUSH
23957: LD_VAR 0 3
23961: PPUSH
23962: CALL_OW 84
// end ; end_of_file
23966: LD_VAR 0 4
23970: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
23971: LD_INT 0
23973: PPUSH
23974: PPUSH
23975: PPUSH
23976: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
23977: LD_VAR 0 1
23981: PPUSH
23982: CALL_OW 264
23986: PUSH
23987: LD_EXP 29
23991: EQUAL
23992: IFFALSE 24064
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23994: LD_INT 68
23996: PPUSH
23997: LD_VAR 0 1
24001: PPUSH
24002: CALL_OW 255
24006: PPUSH
24007: CALL_OW 321
24011: PUSH
24012: LD_INT 2
24014: EQUAL
24015: IFFALSE 24027
// eff := 70 else
24017: LD_ADDR_VAR 0 4
24021: PUSH
24022: LD_INT 70
24024: ST_TO_ADDR
24025: GO 24035
// eff := 30 ;
24027: LD_ADDR_VAR 0 4
24031: PUSH
24032: LD_INT 30
24034: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24035: LD_VAR 0 1
24039: PPUSH
24040: CALL_OW 250
24044: PPUSH
24045: LD_VAR 0 1
24049: PPUSH
24050: CALL_OW 251
24054: PPUSH
24055: LD_VAR 0 4
24059: PPUSH
24060: CALL_OW 495
// end ; end ;
24064: LD_VAR 0 2
24068: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24069: LD_INT 0
24071: PPUSH
// end ;
24072: LD_VAR 0 4
24076: RET
// export function SOS_Command ( cmd ) ; begin
24077: LD_INT 0
24079: PPUSH
// end ;
24080: LD_VAR 0 2
24084: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24085: LD_INT 0
24087: PPUSH
// end ;
24088: LD_VAR 0 6
24092: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
24093: LD_INT 0
24095: PPUSH
24096: PPUSH
// if not vehicle or not factory then
24097: LD_VAR 0 1
24101: NOT
24102: PUSH
24103: LD_VAR 0 2
24107: NOT
24108: OR
24109: IFFALSE 24113
// exit ;
24111: GO 24344
// if factoryWaypoints >= factory then
24113: LD_EXP 102
24117: PUSH
24118: LD_VAR 0 2
24122: GREATEREQUAL
24123: IFFALSE 24344
// if factoryWaypoints [ factory ] then
24125: LD_EXP 102
24129: PUSH
24130: LD_VAR 0 2
24134: ARRAY
24135: IFFALSE 24344
// begin if GetControl ( vehicle ) = control_manual then
24137: LD_VAR 0 1
24141: PPUSH
24142: CALL_OW 263
24146: PUSH
24147: LD_INT 1
24149: EQUAL
24150: IFFALSE 24231
// begin driver := IsDrivenBy ( vehicle ) ;
24152: LD_ADDR_VAR 0 4
24156: PUSH
24157: LD_VAR 0 1
24161: PPUSH
24162: CALL_OW 311
24166: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24167: LD_VAR 0 4
24171: PPUSH
24172: LD_EXP 102
24176: PUSH
24177: LD_VAR 0 2
24181: ARRAY
24182: PUSH
24183: LD_INT 3
24185: ARRAY
24186: PPUSH
24187: LD_EXP 102
24191: PUSH
24192: LD_VAR 0 2
24196: ARRAY
24197: PUSH
24198: LD_INT 4
24200: ARRAY
24201: PPUSH
24202: CALL_OW 171
// AddComExitVehicle ( driver ) ;
24206: LD_VAR 0 4
24210: PPUSH
24211: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
24215: LD_VAR 0 4
24219: PPUSH
24220: LD_VAR 0 2
24224: PPUSH
24225: CALL_OW 180
// end else
24229: GO 24344
// if GetControl ( vehicle ) = control_remote then
24231: LD_VAR 0 1
24235: PPUSH
24236: CALL_OW 263
24240: PUSH
24241: LD_INT 2
24243: EQUAL
24244: IFFALSE 24305
// begin wait ( 0 0$2 ) ;
24246: LD_INT 70
24248: PPUSH
24249: CALL_OW 67
// if Connect ( vehicle ) then
24253: LD_VAR 0 1
24257: PPUSH
24258: CALL 36568 0 1
24262: IFFALSE 24303
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24264: LD_VAR 0 1
24268: PPUSH
24269: LD_EXP 102
24273: PUSH
24274: LD_VAR 0 2
24278: ARRAY
24279: PUSH
24280: LD_INT 3
24282: ARRAY
24283: PPUSH
24284: LD_EXP 102
24288: PUSH
24289: LD_VAR 0 2
24293: ARRAY
24294: PUSH
24295: LD_INT 4
24297: ARRAY
24298: PPUSH
24299: CALL_OW 171
// end else
24303: GO 24344
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24305: LD_VAR 0 1
24309: PPUSH
24310: LD_EXP 102
24314: PUSH
24315: LD_VAR 0 2
24319: ARRAY
24320: PUSH
24321: LD_INT 3
24323: ARRAY
24324: PPUSH
24325: LD_EXP 102
24329: PUSH
24330: LD_VAR 0 2
24334: ARRAY
24335: PUSH
24336: LD_INT 4
24338: ARRAY
24339: PPUSH
24340: CALL_OW 171
// end ; end ;
24344: LD_VAR 0 3
24348: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24349: LD_INT 0
24351: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24352: LD_VAR 0 1
24356: PUSH
24357: LD_INT 250
24359: EQUAL
24360: PUSH
24361: LD_VAR 0 2
24365: PPUSH
24366: CALL_OW 264
24370: PUSH
24371: LD_EXP 32
24375: EQUAL
24376: AND
24377: IFFALSE 24398
// MinerPlaceMine ( unit , x , y ) ;
24379: LD_VAR 0 2
24383: PPUSH
24384: LD_VAR 0 4
24388: PPUSH
24389: LD_VAR 0 5
24393: PPUSH
24394: CALL 27126 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24398: LD_VAR 0 1
24402: PUSH
24403: LD_INT 251
24405: EQUAL
24406: PUSH
24407: LD_VAR 0 2
24411: PPUSH
24412: CALL_OW 264
24416: PUSH
24417: LD_EXP 32
24421: EQUAL
24422: AND
24423: IFFALSE 24444
// MinerDetonateMine ( unit , x , y ) ;
24425: LD_VAR 0 2
24429: PPUSH
24430: LD_VAR 0 4
24434: PPUSH
24435: LD_VAR 0 5
24439: PPUSH
24440: CALL 27403 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24444: LD_VAR 0 1
24448: PUSH
24449: LD_INT 252
24451: EQUAL
24452: PUSH
24453: LD_VAR 0 2
24457: PPUSH
24458: CALL_OW 264
24462: PUSH
24463: LD_EXP 32
24467: EQUAL
24468: AND
24469: IFFALSE 24490
// MinerCreateMinefield ( unit , x , y ) ;
24471: LD_VAR 0 2
24475: PPUSH
24476: LD_VAR 0 4
24480: PPUSH
24481: LD_VAR 0 5
24485: PPUSH
24486: CALL 27820 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24490: LD_VAR 0 1
24494: PUSH
24495: LD_INT 253
24497: EQUAL
24498: PUSH
24499: LD_VAR 0 2
24503: PPUSH
24504: CALL_OW 257
24508: PUSH
24509: LD_INT 5
24511: EQUAL
24512: AND
24513: IFFALSE 24534
// ComBinocular ( unit , x , y ) ;
24515: LD_VAR 0 2
24519: PPUSH
24520: LD_VAR 0 4
24524: PPUSH
24525: LD_VAR 0 5
24529: PPUSH
24530: CALL 28191 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24534: LD_VAR 0 1
24538: PUSH
24539: LD_INT 254
24541: EQUAL
24542: PUSH
24543: LD_VAR 0 2
24547: PPUSH
24548: CALL_OW 264
24552: PUSH
24553: LD_EXP 27
24557: EQUAL
24558: AND
24559: PUSH
24560: LD_VAR 0 3
24564: PPUSH
24565: CALL_OW 263
24569: PUSH
24570: LD_INT 3
24572: EQUAL
24573: AND
24574: IFFALSE 24590
// HackDestroyVehicle ( unit , selectedUnit ) ;
24576: LD_VAR 0 2
24580: PPUSH
24581: LD_VAR 0 3
24585: PPUSH
24586: CALL 26486 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24590: LD_VAR 0 1
24594: PUSH
24595: LD_INT 255
24597: EQUAL
24598: PUSH
24599: LD_VAR 0 2
24603: PPUSH
24604: CALL_OW 264
24608: PUSH
24609: LD_INT 14
24611: PUSH
24612: LD_INT 53
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: IN
24619: AND
24620: PUSH
24621: LD_VAR 0 4
24625: PPUSH
24626: LD_VAR 0 5
24630: PPUSH
24631: CALL_OW 488
24635: AND
24636: IFFALSE 24660
// CutTreeXYR ( unit , x , y , 12 ) ;
24638: LD_VAR 0 2
24642: PPUSH
24643: LD_VAR 0 4
24647: PPUSH
24648: LD_VAR 0 5
24652: PPUSH
24653: LD_INT 12
24655: PPUSH
24656: CALL 25052 0 4
// if cmd = 256 then
24660: LD_VAR 0 1
24664: PUSH
24665: LD_INT 256
24667: EQUAL
24668: IFFALSE 24689
// SetFactoryWaypoint ( unit , x , y ) ;
24670: LD_VAR 0 2
24674: PPUSH
24675: LD_VAR 0 4
24679: PPUSH
24680: LD_VAR 0 5
24684: PPUSH
24685: CALL 24694 0 3
// end ;
24689: LD_VAR 0 6
24693: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
24694: LD_INT 0
24696: PPUSH
24697: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
24698: LD_VAR 0 1
24702: NOT
24703: PUSH
24704: LD_VAR 0 2
24708: PPUSH
24709: LD_VAR 0 3
24713: PPUSH
24714: CALL_OW 488
24718: NOT
24719: OR
24720: PUSH
24721: LD_VAR 0 1
24725: PPUSH
24726: CALL_OW 266
24730: PUSH
24731: LD_INT 3
24733: NONEQUAL
24734: PUSH
24735: LD_VAR 0 1
24739: PPUSH
24740: CALL_OW 247
24744: PUSH
24745: LD_INT 1
24747: EQUAL
24748: NOT
24749: AND
24750: OR
24751: IFFALSE 24755
// exit ;
24753: GO 24904
// if GetType ( factory ) = unit_human then
24755: LD_VAR 0 1
24759: PPUSH
24760: CALL_OW 247
24764: PUSH
24765: LD_INT 1
24767: EQUAL
24768: IFFALSE 24785
// factory := IsInUnit ( factory ) ;
24770: LD_ADDR_VAR 0 1
24774: PUSH
24775: LD_VAR 0 1
24779: PPUSH
24780: CALL_OW 310
24784: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
24785: LD_VAR 0 1
24789: PPUSH
24790: CALL_OW 266
24794: PUSH
24795: LD_INT 3
24797: NONEQUAL
24798: IFFALSE 24802
// exit ;
24800: GO 24904
// if HexInfo ( x , y ) = factory then
24802: LD_VAR 0 2
24806: PPUSH
24807: LD_VAR 0 3
24811: PPUSH
24812: CALL_OW 428
24816: PUSH
24817: LD_VAR 0 1
24821: EQUAL
24822: IFFALSE 24849
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
24824: LD_ADDR_EXP 102
24828: PUSH
24829: LD_EXP 102
24833: PPUSH
24834: LD_VAR 0 1
24838: PPUSH
24839: LD_INT 0
24841: PPUSH
24842: CALL_OW 1
24846: ST_TO_ADDR
24847: GO 24900
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
24849: LD_ADDR_EXP 102
24853: PUSH
24854: LD_EXP 102
24858: PPUSH
24859: LD_VAR 0 1
24863: PPUSH
24864: LD_VAR 0 1
24868: PPUSH
24869: CALL_OW 255
24873: PUSH
24874: LD_VAR 0 1
24878: PUSH
24879: LD_VAR 0 2
24883: PUSH
24884: LD_VAR 0 3
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: PPUSH
24895: CALL_OW 1
24899: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24900: CALL 24909 0 0
// end ;
24904: LD_VAR 0 4
24908: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
24909: LD_INT 0
24911: PPUSH
24912: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24913: LD_STRING resetFactoryWaypoint();
24915: PPUSH
24916: CALL_OW 559
// if factoryWaypoints then
24920: LD_EXP 102
24924: IFFALSE 25047
// begin for i := 1 to factoryWaypoints do
24926: LD_ADDR_VAR 0 2
24930: PUSH
24931: DOUBLE
24932: LD_INT 1
24934: DEC
24935: ST_TO_ADDR
24936: LD_EXP 102
24940: PUSH
24941: FOR_TO
24942: IFFALSE 25045
// if factoryWaypoints [ i ] then
24944: LD_EXP 102
24948: PUSH
24949: LD_VAR 0 2
24953: ARRAY
24954: IFFALSE 25043
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
24956: LD_STRING setFactoryWaypointXY(
24958: PUSH
24959: LD_EXP 102
24963: PUSH
24964: LD_VAR 0 2
24968: ARRAY
24969: PUSH
24970: LD_INT 1
24972: ARRAY
24973: STR
24974: PUSH
24975: LD_STRING ,
24977: STR
24978: PUSH
24979: LD_EXP 102
24983: PUSH
24984: LD_VAR 0 2
24988: ARRAY
24989: PUSH
24990: LD_INT 2
24992: ARRAY
24993: STR
24994: PUSH
24995: LD_STRING ,
24997: STR
24998: PUSH
24999: LD_EXP 102
25003: PUSH
25004: LD_VAR 0 2
25008: ARRAY
25009: PUSH
25010: LD_INT 3
25012: ARRAY
25013: STR
25014: PUSH
25015: LD_STRING ,
25017: STR
25018: PUSH
25019: LD_EXP 102
25023: PUSH
25024: LD_VAR 0 2
25028: ARRAY
25029: PUSH
25030: LD_INT 4
25032: ARRAY
25033: STR
25034: PUSH
25035: LD_STRING )
25037: STR
25038: PPUSH
25039: CALL_OW 559
25043: GO 24941
25045: POP
25046: POP
// end ; end ;
25047: LD_VAR 0 1
25051: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25052: LD_INT 0
25054: PPUSH
25055: PPUSH
25056: PPUSH
25057: PPUSH
25058: PPUSH
25059: PPUSH
25060: PPUSH
25061: PPUSH
25062: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25063: LD_VAR 0 1
25067: NOT
25068: PUSH
25069: LD_VAR 0 2
25073: PPUSH
25074: LD_VAR 0 3
25078: PPUSH
25079: CALL_OW 488
25083: NOT
25084: OR
25085: PUSH
25086: LD_VAR 0 4
25090: NOT
25091: OR
25092: IFFALSE 25096
// exit ;
25094: GO 25436
// list := [ ] ;
25096: LD_ADDR_VAR 0 13
25100: PUSH
25101: EMPTY
25102: ST_TO_ADDR
// if x - r < 0 then
25103: LD_VAR 0 2
25107: PUSH
25108: LD_VAR 0 4
25112: MINUS
25113: PUSH
25114: LD_INT 0
25116: LESS
25117: IFFALSE 25129
// min_x := 0 else
25119: LD_ADDR_VAR 0 7
25123: PUSH
25124: LD_INT 0
25126: ST_TO_ADDR
25127: GO 25145
// min_x := x - r ;
25129: LD_ADDR_VAR 0 7
25133: PUSH
25134: LD_VAR 0 2
25138: PUSH
25139: LD_VAR 0 4
25143: MINUS
25144: ST_TO_ADDR
// if y - r < 0 then
25145: LD_VAR 0 3
25149: PUSH
25150: LD_VAR 0 4
25154: MINUS
25155: PUSH
25156: LD_INT 0
25158: LESS
25159: IFFALSE 25171
// min_y := 0 else
25161: LD_ADDR_VAR 0 8
25165: PUSH
25166: LD_INT 0
25168: ST_TO_ADDR
25169: GO 25187
// min_y := y - r ;
25171: LD_ADDR_VAR 0 8
25175: PUSH
25176: LD_VAR 0 3
25180: PUSH
25181: LD_VAR 0 4
25185: MINUS
25186: ST_TO_ADDR
// max_x := x + r ;
25187: LD_ADDR_VAR 0 9
25191: PUSH
25192: LD_VAR 0 2
25196: PUSH
25197: LD_VAR 0 4
25201: PLUS
25202: ST_TO_ADDR
// max_y := y + r ;
25203: LD_ADDR_VAR 0 10
25207: PUSH
25208: LD_VAR 0 3
25212: PUSH
25213: LD_VAR 0 4
25217: PLUS
25218: ST_TO_ADDR
// for _x = min_x to max_x do
25219: LD_ADDR_VAR 0 11
25223: PUSH
25224: DOUBLE
25225: LD_VAR 0 7
25229: DEC
25230: ST_TO_ADDR
25231: LD_VAR 0 9
25235: PUSH
25236: FOR_TO
25237: IFFALSE 25354
// for _y = min_y to max_y do
25239: LD_ADDR_VAR 0 12
25243: PUSH
25244: DOUBLE
25245: LD_VAR 0 8
25249: DEC
25250: ST_TO_ADDR
25251: LD_VAR 0 10
25255: PUSH
25256: FOR_TO
25257: IFFALSE 25350
// begin if not ValidHex ( _x , _y ) then
25259: LD_VAR 0 11
25263: PPUSH
25264: LD_VAR 0 12
25268: PPUSH
25269: CALL_OW 488
25273: NOT
25274: IFFALSE 25278
// continue ;
25276: GO 25256
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25278: LD_VAR 0 11
25282: PPUSH
25283: LD_VAR 0 12
25287: PPUSH
25288: CALL_OW 351
25292: PUSH
25293: LD_VAR 0 11
25297: PPUSH
25298: LD_VAR 0 12
25302: PPUSH
25303: CALL_OW 554
25307: AND
25308: IFFALSE 25348
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25310: LD_ADDR_VAR 0 13
25314: PUSH
25315: LD_VAR 0 13
25319: PPUSH
25320: LD_VAR 0 13
25324: PUSH
25325: LD_INT 1
25327: PLUS
25328: PPUSH
25329: LD_VAR 0 11
25333: PUSH
25334: LD_VAR 0 12
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PPUSH
25343: CALL_OW 2
25347: ST_TO_ADDR
// end ;
25348: GO 25256
25350: POP
25351: POP
25352: GO 25236
25354: POP
25355: POP
// if not list then
25356: LD_VAR 0 13
25360: NOT
25361: IFFALSE 25365
// exit ;
25363: GO 25436
// for i in list do
25365: LD_ADDR_VAR 0 6
25369: PUSH
25370: LD_VAR 0 13
25374: PUSH
25375: FOR_IN
25376: IFFALSE 25434
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25378: LD_VAR 0 1
25382: PPUSH
25383: LD_STRING M
25385: PUSH
25386: LD_VAR 0 6
25390: PUSH
25391: LD_INT 1
25393: ARRAY
25394: PUSH
25395: LD_VAR 0 6
25399: PUSH
25400: LD_INT 2
25402: ARRAY
25403: PUSH
25404: LD_INT 0
25406: PUSH
25407: LD_INT 0
25409: PUSH
25410: LD_INT 0
25412: PUSH
25413: LD_INT 0
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: PUSH
25425: EMPTY
25426: LIST
25427: PPUSH
25428: CALL_OW 447
25432: GO 25375
25434: POP
25435: POP
// end ;
25436: LD_VAR 0 5
25440: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25441: LD_EXP 103
25445: NOT
25446: IFFALSE 25496
25448: GO 25450
25450: DISABLE
// begin initHack := true ;
25451: LD_ADDR_EXP 103
25455: PUSH
25456: LD_INT 1
25458: ST_TO_ADDR
// hackTanks := [ ] ;
25459: LD_ADDR_EXP 104
25463: PUSH
25464: EMPTY
25465: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25466: LD_ADDR_EXP 105
25470: PUSH
25471: EMPTY
25472: ST_TO_ADDR
// hackLimit := 3 ;
25473: LD_ADDR_EXP 106
25477: PUSH
25478: LD_INT 3
25480: ST_TO_ADDR
// hackDist := 12 ;
25481: LD_ADDR_EXP 107
25485: PUSH
25486: LD_INT 12
25488: ST_TO_ADDR
// hackCounter := [ ] ;
25489: LD_ADDR_EXP 108
25493: PUSH
25494: EMPTY
25495: ST_TO_ADDR
// end ;
25496: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25497: LD_EXP 103
25501: PUSH
25502: LD_INT 34
25504: PUSH
25505: LD_EXP 27
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PPUSH
25514: CALL_OW 69
25518: AND
25519: IFFALSE 25774
25521: GO 25523
25523: DISABLE
25524: LD_INT 0
25526: PPUSH
25527: PPUSH
// begin enable ;
25528: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25529: LD_ADDR_VAR 0 1
25533: PUSH
25534: LD_INT 34
25536: PUSH
25537: LD_EXP 27
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: PPUSH
25546: CALL_OW 69
25550: PUSH
25551: FOR_IN
25552: IFFALSE 25772
// begin if not i in hackTanks then
25554: LD_VAR 0 1
25558: PUSH
25559: LD_EXP 104
25563: IN
25564: NOT
25565: IFFALSE 25648
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25567: LD_ADDR_EXP 104
25571: PUSH
25572: LD_EXP 104
25576: PPUSH
25577: LD_EXP 104
25581: PUSH
25582: LD_INT 1
25584: PLUS
25585: PPUSH
25586: LD_VAR 0 1
25590: PPUSH
25591: CALL_OW 1
25595: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25596: LD_ADDR_EXP 105
25600: PUSH
25601: LD_EXP 105
25605: PPUSH
25606: LD_EXP 105
25610: PUSH
25611: LD_INT 1
25613: PLUS
25614: PPUSH
25615: EMPTY
25616: PPUSH
25617: CALL_OW 1
25621: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25622: LD_ADDR_EXP 108
25626: PUSH
25627: LD_EXP 108
25631: PPUSH
25632: LD_EXP 108
25636: PUSH
25637: LD_INT 1
25639: PLUS
25640: PPUSH
25641: EMPTY
25642: PPUSH
25643: CALL_OW 1
25647: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25648: LD_VAR 0 1
25652: PPUSH
25653: CALL_OW 302
25657: NOT
25658: IFFALSE 25671
// begin HackUnlinkAll ( i ) ;
25660: LD_VAR 0 1
25664: PPUSH
25665: CALL 25777 0 1
// continue ;
25669: GO 25551
// end ; HackCheckCapturedStatus ( i ) ;
25671: LD_VAR 0 1
25675: PPUSH
25676: CALL 26220 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25680: LD_ADDR_VAR 0 2
25684: PUSH
25685: LD_INT 81
25687: PUSH
25688: LD_VAR 0 1
25692: PPUSH
25693: CALL_OW 255
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PUSH
25702: LD_INT 33
25704: PUSH
25705: LD_INT 3
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: LD_INT 91
25714: PUSH
25715: LD_VAR 0 1
25719: PUSH
25720: LD_EXP 107
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: LIST
25729: PUSH
25730: LD_INT 50
25732: PUSH
25733: EMPTY
25734: LIST
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: PPUSH
25742: CALL_OW 69
25746: ST_TO_ADDR
// if not tmp then
25747: LD_VAR 0 2
25751: NOT
25752: IFFALSE 25756
// continue ;
25754: GO 25551
// HackLink ( i , tmp ) ;
25756: LD_VAR 0 1
25760: PPUSH
25761: LD_VAR 0 2
25765: PPUSH
25766: CALL 25913 0 2
// end ;
25770: GO 25551
25772: POP
25773: POP
// end ;
25774: PPOPN 2
25776: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25777: LD_INT 0
25779: PPUSH
25780: PPUSH
25781: PPUSH
// if not hack in hackTanks then
25782: LD_VAR 0 1
25786: PUSH
25787: LD_EXP 104
25791: IN
25792: NOT
25793: IFFALSE 25797
// exit ;
25795: GO 25908
// index := GetElementIndex ( hackTanks , hack ) ;
25797: LD_ADDR_VAR 0 4
25801: PUSH
25802: LD_EXP 104
25806: PPUSH
25807: LD_VAR 0 1
25811: PPUSH
25812: CALL 33382 0 2
25816: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25817: LD_EXP 105
25821: PUSH
25822: LD_VAR 0 4
25826: ARRAY
25827: IFFALSE 25908
// begin for i in hackTanksCaptured [ index ] do
25829: LD_ADDR_VAR 0 3
25833: PUSH
25834: LD_EXP 105
25838: PUSH
25839: LD_VAR 0 4
25843: ARRAY
25844: PUSH
25845: FOR_IN
25846: IFFALSE 25872
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25848: LD_VAR 0 3
25852: PUSH
25853: LD_INT 1
25855: ARRAY
25856: PPUSH
25857: LD_VAR 0 3
25861: PUSH
25862: LD_INT 2
25864: ARRAY
25865: PPUSH
25866: CALL_OW 235
25870: GO 25845
25872: POP
25873: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25874: LD_ADDR_EXP 105
25878: PUSH
25879: LD_EXP 105
25883: PPUSH
25884: LD_VAR 0 4
25888: PPUSH
25889: EMPTY
25890: PPUSH
25891: CALL_OW 1
25895: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25896: LD_VAR 0 1
25900: PPUSH
25901: LD_INT 0
25903: PPUSH
25904: CALL_OW 505
// end ; end ;
25908: LD_VAR 0 2
25912: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25913: LD_INT 0
25915: PPUSH
25916: PPUSH
25917: PPUSH
// if not hack in hackTanks or not vehicles then
25918: LD_VAR 0 1
25922: PUSH
25923: LD_EXP 104
25927: IN
25928: NOT
25929: PUSH
25930: LD_VAR 0 2
25934: NOT
25935: OR
25936: IFFALSE 25940
// exit ;
25938: GO 26215
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25940: LD_ADDR_VAR 0 2
25944: PUSH
25945: LD_VAR 0 1
25949: PPUSH
25950: LD_VAR 0 2
25954: PPUSH
25955: LD_INT 1
25957: PPUSH
25958: LD_INT 1
25960: PPUSH
25961: CALL 34032 0 4
25965: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
25966: LD_ADDR_VAR 0 5
25970: PUSH
25971: LD_EXP 104
25975: PPUSH
25976: LD_VAR 0 1
25980: PPUSH
25981: CALL 33382 0 2
25985: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
25986: LD_EXP 105
25990: PUSH
25991: LD_VAR 0 5
25995: ARRAY
25996: PUSH
25997: LD_EXP 106
26001: LESS
26002: IFFALSE 26191
// begin for i := 1 to vehicles do
26004: LD_ADDR_VAR 0 4
26008: PUSH
26009: DOUBLE
26010: LD_INT 1
26012: DEC
26013: ST_TO_ADDR
26014: LD_VAR 0 2
26018: PUSH
26019: FOR_TO
26020: IFFALSE 26189
// begin if hackTanksCaptured [ index ] = hackLimit then
26022: LD_EXP 105
26026: PUSH
26027: LD_VAR 0 5
26031: ARRAY
26032: PUSH
26033: LD_EXP 106
26037: EQUAL
26038: IFFALSE 26042
// break ;
26040: GO 26189
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26042: LD_ADDR_EXP 108
26046: PUSH
26047: LD_EXP 108
26051: PPUSH
26052: LD_VAR 0 5
26056: PPUSH
26057: LD_EXP 108
26061: PUSH
26062: LD_VAR 0 5
26066: ARRAY
26067: PUSH
26068: LD_INT 1
26070: PLUS
26071: PPUSH
26072: CALL_OW 1
26076: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26077: LD_ADDR_EXP 105
26081: PUSH
26082: LD_EXP 105
26086: PPUSH
26087: LD_VAR 0 5
26091: PUSH
26092: LD_EXP 105
26096: PUSH
26097: LD_VAR 0 5
26101: ARRAY
26102: PUSH
26103: LD_INT 1
26105: PLUS
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PPUSH
26111: LD_VAR 0 2
26115: PUSH
26116: LD_VAR 0 4
26120: ARRAY
26121: PUSH
26122: LD_VAR 0 2
26126: PUSH
26127: LD_VAR 0 4
26131: ARRAY
26132: PPUSH
26133: CALL_OW 255
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: PPUSH
26142: CALL 33597 0 3
26146: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26147: LD_VAR 0 2
26151: PUSH
26152: LD_VAR 0 4
26156: ARRAY
26157: PPUSH
26158: LD_VAR 0 1
26162: PPUSH
26163: CALL_OW 255
26167: PPUSH
26168: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26172: LD_VAR 0 2
26176: PUSH
26177: LD_VAR 0 4
26181: ARRAY
26182: PPUSH
26183: CALL_OW 141
// end ;
26187: GO 26019
26189: POP
26190: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26191: LD_VAR 0 1
26195: PPUSH
26196: LD_EXP 105
26200: PUSH
26201: LD_VAR 0 5
26205: ARRAY
26206: PUSH
26207: LD_INT 0
26209: PLUS
26210: PPUSH
26211: CALL_OW 505
// end ;
26215: LD_VAR 0 3
26219: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26220: LD_INT 0
26222: PPUSH
26223: PPUSH
26224: PPUSH
26225: PPUSH
// if not hack in hackTanks then
26226: LD_VAR 0 1
26230: PUSH
26231: LD_EXP 104
26235: IN
26236: NOT
26237: IFFALSE 26241
// exit ;
26239: GO 26481
// index := GetElementIndex ( hackTanks , hack ) ;
26241: LD_ADDR_VAR 0 4
26245: PUSH
26246: LD_EXP 104
26250: PPUSH
26251: LD_VAR 0 1
26255: PPUSH
26256: CALL 33382 0 2
26260: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26261: LD_ADDR_VAR 0 3
26265: PUSH
26266: DOUBLE
26267: LD_EXP 105
26271: PUSH
26272: LD_VAR 0 4
26276: ARRAY
26277: INC
26278: ST_TO_ADDR
26279: LD_INT 1
26281: PUSH
26282: FOR_DOWNTO
26283: IFFALSE 26455
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26285: LD_ADDR_VAR 0 5
26289: PUSH
26290: LD_EXP 105
26294: PUSH
26295: LD_VAR 0 4
26299: ARRAY
26300: PUSH
26301: LD_VAR 0 3
26305: ARRAY
26306: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26307: LD_VAR 0 5
26311: PUSH
26312: LD_INT 1
26314: ARRAY
26315: PPUSH
26316: CALL_OW 302
26320: NOT
26321: PUSH
26322: LD_VAR 0 5
26326: PUSH
26327: LD_INT 1
26329: ARRAY
26330: PPUSH
26331: CALL_OW 255
26335: PUSH
26336: LD_VAR 0 1
26340: PPUSH
26341: CALL_OW 255
26345: NONEQUAL
26346: OR
26347: IFFALSE 26453
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26349: LD_VAR 0 5
26353: PUSH
26354: LD_INT 1
26356: ARRAY
26357: PPUSH
26358: CALL_OW 305
26362: PUSH
26363: LD_VAR 0 5
26367: PUSH
26368: LD_INT 1
26370: ARRAY
26371: PPUSH
26372: CALL_OW 255
26376: PUSH
26377: LD_VAR 0 1
26381: PPUSH
26382: CALL_OW 255
26386: EQUAL
26387: AND
26388: IFFALSE 26412
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26390: LD_VAR 0 5
26394: PUSH
26395: LD_INT 1
26397: ARRAY
26398: PPUSH
26399: LD_VAR 0 5
26403: PUSH
26404: LD_INT 2
26406: ARRAY
26407: PPUSH
26408: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26412: LD_ADDR_EXP 105
26416: PUSH
26417: LD_EXP 105
26421: PPUSH
26422: LD_VAR 0 4
26426: PPUSH
26427: LD_EXP 105
26431: PUSH
26432: LD_VAR 0 4
26436: ARRAY
26437: PPUSH
26438: LD_VAR 0 3
26442: PPUSH
26443: CALL_OW 3
26447: PPUSH
26448: CALL_OW 1
26452: ST_TO_ADDR
// end ; end ;
26453: GO 26282
26455: POP
26456: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26457: LD_VAR 0 1
26461: PPUSH
26462: LD_EXP 105
26466: PUSH
26467: LD_VAR 0 4
26471: ARRAY
26472: PUSH
26473: LD_INT 0
26475: PLUS
26476: PPUSH
26477: CALL_OW 505
// end ;
26481: LD_VAR 0 2
26485: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26486: LD_INT 0
26488: PPUSH
26489: PPUSH
26490: PPUSH
26491: PPUSH
// if not hack in hackTanks then
26492: LD_VAR 0 1
26496: PUSH
26497: LD_EXP 104
26501: IN
26502: NOT
26503: IFFALSE 26507
// exit ;
26505: GO 26592
// index := GetElementIndex ( hackTanks , hack ) ;
26507: LD_ADDR_VAR 0 5
26511: PUSH
26512: LD_EXP 104
26516: PPUSH
26517: LD_VAR 0 1
26521: PPUSH
26522: CALL 33382 0 2
26526: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26527: LD_ADDR_VAR 0 4
26531: PUSH
26532: DOUBLE
26533: LD_INT 1
26535: DEC
26536: ST_TO_ADDR
26537: LD_EXP 105
26541: PUSH
26542: LD_VAR 0 5
26546: ARRAY
26547: PUSH
26548: FOR_TO
26549: IFFALSE 26590
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26551: LD_EXP 105
26555: PUSH
26556: LD_VAR 0 5
26560: ARRAY
26561: PUSH
26562: LD_VAR 0 4
26566: ARRAY
26567: PUSH
26568: LD_INT 1
26570: ARRAY
26571: PUSH
26572: LD_VAR 0 2
26576: EQUAL
26577: IFFALSE 26588
// KillUnit ( vehicle ) ;
26579: LD_VAR 0 2
26583: PPUSH
26584: CALL_OW 66
26588: GO 26548
26590: POP
26591: POP
// end ;
26592: LD_VAR 0 3
26596: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26597: LD_EXP 109
26601: NOT
26602: IFFALSE 26637
26604: GO 26606
26606: DISABLE
// begin initMiner := true ;
26607: LD_ADDR_EXP 109
26611: PUSH
26612: LD_INT 1
26614: ST_TO_ADDR
// minersList := [ ] ;
26615: LD_ADDR_EXP 110
26619: PUSH
26620: EMPTY
26621: ST_TO_ADDR
// minerMinesList := [ ] ;
26622: LD_ADDR_EXP 111
26626: PUSH
26627: EMPTY
26628: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26629: LD_ADDR_EXP 112
26633: PUSH
26634: LD_INT 5
26636: ST_TO_ADDR
// end ;
26637: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26638: LD_EXP 109
26642: PUSH
26643: LD_INT 34
26645: PUSH
26646: LD_EXP 32
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PPUSH
26655: CALL_OW 69
26659: AND
26660: IFFALSE 27123
26662: GO 26664
26664: DISABLE
26665: LD_INT 0
26667: PPUSH
26668: PPUSH
26669: PPUSH
26670: PPUSH
// begin enable ;
26671: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26672: LD_ADDR_VAR 0 1
26676: PUSH
26677: LD_INT 34
26679: PUSH
26680: LD_EXP 32
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: PPUSH
26689: CALL_OW 69
26693: PUSH
26694: FOR_IN
26695: IFFALSE 26767
// begin if not i in minersList then
26697: LD_VAR 0 1
26701: PUSH
26702: LD_EXP 110
26706: IN
26707: NOT
26708: IFFALSE 26765
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
26710: LD_ADDR_EXP 110
26714: PUSH
26715: LD_EXP 110
26719: PPUSH
26720: LD_EXP 110
26724: PUSH
26725: LD_INT 1
26727: PLUS
26728: PPUSH
26729: LD_VAR 0 1
26733: PPUSH
26734: CALL_OW 1
26738: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26739: LD_ADDR_EXP 111
26743: PUSH
26744: LD_EXP 111
26748: PPUSH
26749: LD_EXP 111
26753: PUSH
26754: LD_INT 1
26756: PLUS
26757: PPUSH
26758: EMPTY
26759: PPUSH
26760: CALL_OW 1
26764: ST_TO_ADDR
// end end ;
26765: GO 26694
26767: POP
26768: POP
// for i := minerMinesList downto 1 do
26769: LD_ADDR_VAR 0 1
26773: PUSH
26774: DOUBLE
26775: LD_EXP 111
26779: INC
26780: ST_TO_ADDR
26781: LD_INT 1
26783: PUSH
26784: FOR_DOWNTO
26785: IFFALSE 27121
// begin if IsLive ( minersList [ i ] ) then
26787: LD_EXP 110
26791: PUSH
26792: LD_VAR 0 1
26796: ARRAY
26797: PPUSH
26798: CALL_OW 300
26802: IFFALSE 26830
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
26804: LD_EXP 110
26808: PUSH
26809: LD_VAR 0 1
26813: ARRAY
26814: PPUSH
26815: LD_EXP 111
26819: PUSH
26820: LD_VAR 0 1
26824: ARRAY
26825: PPUSH
26826: CALL_OW 505
// if not minerMinesList [ i ] then
26830: LD_EXP 111
26834: PUSH
26835: LD_VAR 0 1
26839: ARRAY
26840: NOT
26841: IFFALSE 26845
// continue ;
26843: GO 26784
// for j := minerMinesList [ i ] downto 1 do
26845: LD_ADDR_VAR 0 2
26849: PUSH
26850: DOUBLE
26851: LD_EXP 111
26855: PUSH
26856: LD_VAR 0 1
26860: ARRAY
26861: INC
26862: ST_TO_ADDR
26863: LD_INT 1
26865: PUSH
26866: FOR_DOWNTO
26867: IFFALSE 27117
// begin side := GetSide ( minersList [ i ] ) ;
26869: LD_ADDR_VAR 0 3
26873: PUSH
26874: LD_EXP 110
26878: PUSH
26879: LD_VAR 0 1
26883: ARRAY
26884: PPUSH
26885: CALL_OW 255
26889: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26890: LD_ADDR_VAR 0 4
26894: PUSH
26895: LD_EXP 111
26899: PUSH
26900: LD_VAR 0 1
26904: ARRAY
26905: PUSH
26906: LD_VAR 0 2
26910: ARRAY
26911: PUSH
26912: LD_INT 1
26914: ARRAY
26915: PPUSH
26916: LD_EXP 111
26920: PUSH
26921: LD_VAR 0 1
26925: ARRAY
26926: PUSH
26927: LD_VAR 0 2
26931: ARRAY
26932: PUSH
26933: LD_INT 2
26935: ARRAY
26936: PPUSH
26937: CALL_OW 428
26941: ST_TO_ADDR
// if not tmp then
26942: LD_VAR 0 4
26946: NOT
26947: IFFALSE 26951
// continue ;
26949: GO 26866
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
26951: LD_VAR 0 4
26955: PUSH
26956: LD_INT 81
26958: PUSH
26959: LD_VAR 0 3
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: PPUSH
26968: CALL_OW 69
26972: IN
26973: PUSH
26974: LD_EXP 111
26978: PUSH
26979: LD_VAR 0 1
26983: ARRAY
26984: PUSH
26985: LD_VAR 0 2
26989: ARRAY
26990: PUSH
26991: LD_INT 1
26993: ARRAY
26994: PPUSH
26995: LD_EXP 111
26999: PUSH
27000: LD_VAR 0 1
27004: ARRAY
27005: PUSH
27006: LD_VAR 0 2
27010: ARRAY
27011: PUSH
27012: LD_INT 2
27014: ARRAY
27015: PPUSH
27016: CALL_OW 458
27020: AND
27021: IFFALSE 27115
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27023: LD_EXP 111
27027: PUSH
27028: LD_VAR 0 1
27032: ARRAY
27033: PUSH
27034: LD_VAR 0 2
27038: ARRAY
27039: PUSH
27040: LD_INT 1
27042: ARRAY
27043: PPUSH
27044: LD_EXP 111
27048: PUSH
27049: LD_VAR 0 1
27053: ARRAY
27054: PUSH
27055: LD_VAR 0 2
27059: ARRAY
27060: PUSH
27061: LD_INT 2
27063: ARRAY
27064: PPUSH
27065: LD_VAR 0 3
27069: PPUSH
27070: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27074: LD_ADDR_EXP 111
27078: PUSH
27079: LD_EXP 111
27083: PPUSH
27084: LD_VAR 0 1
27088: PPUSH
27089: LD_EXP 111
27093: PUSH
27094: LD_VAR 0 1
27098: ARRAY
27099: PPUSH
27100: LD_VAR 0 2
27104: PPUSH
27105: CALL_OW 3
27109: PPUSH
27110: CALL_OW 1
27114: ST_TO_ADDR
// end ; end ;
27115: GO 26866
27117: POP
27118: POP
// end ;
27119: GO 26784
27121: POP
27122: POP
// end ;
27123: PPOPN 4
27125: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
27126: LD_INT 0
27128: PPUSH
27129: PPUSH
// result := false ;
27130: LD_ADDR_VAR 0 4
27134: PUSH
27135: LD_INT 0
27137: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27138: LD_VAR 0 1
27142: PPUSH
27143: CALL_OW 264
27147: PUSH
27148: LD_EXP 32
27152: EQUAL
27153: NOT
27154: IFFALSE 27158
// exit ;
27156: GO 27398
// index := GetElementIndex ( minersList , unit ) ;
27158: LD_ADDR_VAR 0 5
27162: PUSH
27163: LD_EXP 110
27167: PPUSH
27168: LD_VAR 0 1
27172: PPUSH
27173: CALL 33382 0 2
27177: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27178: LD_EXP 111
27182: PUSH
27183: LD_VAR 0 5
27187: ARRAY
27188: PUSH
27189: LD_EXP 112
27193: GREATEREQUAL
27194: IFFALSE 27198
// exit ;
27196: GO 27398
// ComMoveXY ( unit , x , y ) ;
27198: LD_VAR 0 1
27202: PPUSH
27203: LD_VAR 0 2
27207: PPUSH
27208: LD_VAR 0 3
27212: PPUSH
27213: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27217: LD_INT 35
27219: PPUSH
27220: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27224: LD_VAR 0 1
27228: PPUSH
27229: LD_VAR 0 2
27233: PPUSH
27234: LD_VAR 0 3
27238: PPUSH
27239: CALL 64101 0 3
27243: NOT
27244: PUSH
27245: LD_VAR 0 1
27249: PPUSH
27250: CALL_OW 314
27254: AND
27255: IFFALSE 27259
// exit ;
27257: GO 27398
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27259: LD_VAR 0 2
27263: PPUSH
27264: LD_VAR 0 3
27268: PPUSH
27269: CALL_OW 428
27273: PUSH
27274: LD_VAR 0 1
27278: EQUAL
27279: PUSH
27280: LD_VAR 0 1
27284: PPUSH
27285: CALL_OW 314
27289: NOT
27290: AND
27291: IFFALSE 27217
// PlaySoundXY ( x , y , PlantMine ) ;
27293: LD_VAR 0 2
27297: PPUSH
27298: LD_VAR 0 3
27302: PPUSH
27303: LD_STRING PlantMine
27305: PPUSH
27306: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
27310: LD_VAR 0 2
27314: PPUSH
27315: LD_VAR 0 3
27319: PPUSH
27320: LD_VAR 0 1
27324: PPUSH
27325: CALL_OW 255
27329: PPUSH
27330: LD_INT 0
27332: PPUSH
27333: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27337: LD_ADDR_EXP 111
27341: PUSH
27342: LD_EXP 111
27346: PPUSH
27347: LD_VAR 0 5
27351: PUSH
27352: LD_EXP 111
27356: PUSH
27357: LD_VAR 0 5
27361: ARRAY
27362: PUSH
27363: LD_INT 1
27365: PLUS
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: PPUSH
27371: LD_VAR 0 2
27375: PUSH
27376: LD_VAR 0 3
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PPUSH
27385: CALL 33597 0 3
27389: ST_TO_ADDR
// result := true ;
27390: LD_ADDR_VAR 0 4
27394: PUSH
27395: LD_INT 1
27397: ST_TO_ADDR
// end ;
27398: LD_VAR 0 4
27402: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
27403: LD_INT 0
27405: PPUSH
27406: PPUSH
27407: PPUSH
// if not unit in minersList then
27408: LD_VAR 0 1
27412: PUSH
27413: LD_EXP 110
27417: IN
27418: NOT
27419: IFFALSE 27423
// exit ;
27421: GO 27815
// index := GetElementIndex ( minersList , unit ) ;
27423: LD_ADDR_VAR 0 6
27427: PUSH
27428: LD_EXP 110
27432: PPUSH
27433: LD_VAR 0 1
27437: PPUSH
27438: CALL 33382 0 2
27442: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27443: LD_ADDR_VAR 0 5
27447: PUSH
27448: DOUBLE
27449: LD_EXP 111
27453: PUSH
27454: LD_VAR 0 6
27458: ARRAY
27459: INC
27460: ST_TO_ADDR
27461: LD_INT 1
27463: PUSH
27464: FOR_DOWNTO
27465: IFFALSE 27626
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
27467: LD_EXP 111
27471: PUSH
27472: LD_VAR 0 6
27476: ARRAY
27477: PUSH
27478: LD_VAR 0 5
27482: ARRAY
27483: PUSH
27484: LD_INT 1
27486: ARRAY
27487: PUSH
27488: LD_VAR 0 2
27492: EQUAL
27493: PUSH
27494: LD_EXP 111
27498: PUSH
27499: LD_VAR 0 6
27503: ARRAY
27504: PUSH
27505: LD_VAR 0 5
27509: ARRAY
27510: PUSH
27511: LD_INT 2
27513: ARRAY
27514: PUSH
27515: LD_VAR 0 3
27519: EQUAL
27520: AND
27521: IFFALSE 27624
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27523: LD_EXP 111
27527: PUSH
27528: LD_VAR 0 6
27532: ARRAY
27533: PUSH
27534: LD_VAR 0 5
27538: ARRAY
27539: PUSH
27540: LD_INT 1
27542: ARRAY
27543: PPUSH
27544: LD_EXP 111
27548: PUSH
27549: LD_VAR 0 6
27553: ARRAY
27554: PUSH
27555: LD_VAR 0 5
27559: ARRAY
27560: PUSH
27561: LD_INT 2
27563: ARRAY
27564: PPUSH
27565: LD_VAR 0 1
27569: PPUSH
27570: CALL_OW 255
27574: PPUSH
27575: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27579: LD_ADDR_EXP 111
27583: PUSH
27584: LD_EXP 111
27588: PPUSH
27589: LD_VAR 0 6
27593: PPUSH
27594: LD_EXP 111
27598: PUSH
27599: LD_VAR 0 6
27603: ARRAY
27604: PPUSH
27605: LD_VAR 0 5
27609: PPUSH
27610: CALL_OW 3
27614: PPUSH
27615: CALL_OW 1
27619: ST_TO_ADDR
// exit ;
27620: POP
27621: POP
27622: GO 27815
// end ; end ;
27624: GO 27464
27626: POP
27627: POP
// for i := minerMinesList [ index ] downto 1 do
27628: LD_ADDR_VAR 0 5
27632: PUSH
27633: DOUBLE
27634: LD_EXP 111
27638: PUSH
27639: LD_VAR 0 6
27643: ARRAY
27644: INC
27645: ST_TO_ADDR
27646: LD_INT 1
27648: PUSH
27649: FOR_DOWNTO
27650: IFFALSE 27813
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27652: LD_EXP 111
27656: PUSH
27657: LD_VAR 0 6
27661: ARRAY
27662: PUSH
27663: LD_VAR 0 5
27667: ARRAY
27668: PUSH
27669: LD_INT 1
27671: ARRAY
27672: PPUSH
27673: LD_EXP 111
27677: PUSH
27678: LD_VAR 0 6
27682: ARRAY
27683: PUSH
27684: LD_VAR 0 5
27688: ARRAY
27689: PUSH
27690: LD_INT 2
27692: ARRAY
27693: PPUSH
27694: LD_VAR 0 2
27698: PPUSH
27699: LD_VAR 0 3
27703: PPUSH
27704: CALL_OW 298
27708: PUSH
27709: LD_INT 6
27711: LESS
27712: IFFALSE 27811
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27714: LD_EXP 111
27718: PUSH
27719: LD_VAR 0 6
27723: ARRAY
27724: PUSH
27725: LD_VAR 0 5
27729: ARRAY
27730: PUSH
27731: LD_INT 1
27733: ARRAY
27734: PPUSH
27735: LD_EXP 111
27739: PUSH
27740: LD_VAR 0 6
27744: ARRAY
27745: PUSH
27746: LD_VAR 0 5
27750: ARRAY
27751: PUSH
27752: LD_INT 2
27754: ARRAY
27755: PPUSH
27756: LD_VAR 0 1
27760: PPUSH
27761: CALL_OW 255
27765: PPUSH
27766: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27770: LD_ADDR_EXP 111
27774: PUSH
27775: LD_EXP 111
27779: PPUSH
27780: LD_VAR 0 6
27784: PPUSH
27785: LD_EXP 111
27789: PUSH
27790: LD_VAR 0 6
27794: ARRAY
27795: PPUSH
27796: LD_VAR 0 5
27800: PPUSH
27801: CALL_OW 3
27805: PPUSH
27806: CALL_OW 1
27810: ST_TO_ADDR
// end ; end ;
27811: GO 27649
27813: POP
27814: POP
// end ;
27815: LD_VAR 0 4
27819: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
27820: LD_INT 0
27822: PPUSH
27823: PPUSH
27824: PPUSH
27825: PPUSH
27826: PPUSH
27827: PPUSH
27828: PPUSH
27829: PPUSH
27830: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
27831: LD_VAR 0 1
27835: PPUSH
27836: CALL_OW 264
27840: PUSH
27841: LD_EXP 32
27845: EQUAL
27846: NOT
27847: PUSH
27848: LD_VAR 0 1
27852: PUSH
27853: LD_EXP 110
27857: IN
27858: NOT
27859: OR
27860: IFFALSE 27864
// exit ;
27862: GO 28186
// index := GetElementIndex ( minersList , unit ) ;
27864: LD_ADDR_VAR 0 6
27868: PUSH
27869: LD_EXP 110
27873: PPUSH
27874: LD_VAR 0 1
27878: PPUSH
27879: CALL 33382 0 2
27883: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27884: LD_ADDR_VAR 0 8
27888: PUSH
27889: LD_EXP 112
27893: PUSH
27894: LD_EXP 111
27898: PUSH
27899: LD_VAR 0 6
27903: ARRAY
27904: MINUS
27905: ST_TO_ADDR
// if not minesFreeAmount then
27906: LD_VAR 0 8
27910: NOT
27911: IFFALSE 27915
// exit ;
27913: GO 28186
// tmp := [ ] ;
27915: LD_ADDR_VAR 0 7
27919: PUSH
27920: EMPTY
27921: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
27922: LD_ADDR_VAR 0 5
27926: PUSH
27927: DOUBLE
27928: LD_INT 1
27930: DEC
27931: ST_TO_ADDR
27932: LD_VAR 0 8
27936: PUSH
27937: FOR_TO
27938: IFFALSE 28133
// begin _d := rand ( 0 , 5 ) ;
27940: LD_ADDR_VAR 0 11
27944: PUSH
27945: LD_INT 0
27947: PPUSH
27948: LD_INT 5
27950: PPUSH
27951: CALL_OW 12
27955: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
27956: LD_ADDR_VAR 0 12
27960: PUSH
27961: LD_INT 2
27963: PPUSH
27964: LD_INT 6
27966: PPUSH
27967: CALL_OW 12
27971: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
27972: LD_ADDR_VAR 0 9
27976: PUSH
27977: LD_VAR 0 2
27981: PPUSH
27982: LD_VAR 0 11
27986: PPUSH
27987: LD_VAR 0 12
27991: PPUSH
27992: CALL_OW 272
27996: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
27997: LD_ADDR_VAR 0 10
28001: PUSH
28002: LD_VAR 0 3
28006: PPUSH
28007: LD_VAR 0 11
28011: PPUSH
28012: LD_VAR 0 12
28016: PPUSH
28017: CALL_OW 273
28021: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28022: LD_VAR 0 9
28026: PPUSH
28027: LD_VAR 0 10
28031: PPUSH
28032: CALL_OW 488
28036: PUSH
28037: LD_VAR 0 9
28041: PUSH
28042: LD_VAR 0 10
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PUSH
28051: LD_VAR 0 7
28055: IN
28056: NOT
28057: AND
28058: PUSH
28059: LD_VAR 0 9
28063: PPUSH
28064: LD_VAR 0 10
28068: PPUSH
28069: CALL_OW 458
28073: NOT
28074: AND
28075: IFFALSE 28117
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28077: LD_ADDR_VAR 0 7
28081: PUSH
28082: LD_VAR 0 7
28086: PPUSH
28087: LD_VAR 0 7
28091: PUSH
28092: LD_INT 1
28094: PLUS
28095: PPUSH
28096: LD_VAR 0 9
28100: PUSH
28101: LD_VAR 0 10
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PPUSH
28110: CALL_OW 1
28114: ST_TO_ADDR
28115: GO 28131
// i := i - 1 ;
28117: LD_ADDR_VAR 0 5
28121: PUSH
28122: LD_VAR 0 5
28126: PUSH
28127: LD_INT 1
28129: MINUS
28130: ST_TO_ADDR
// end ;
28131: GO 27937
28133: POP
28134: POP
// for i in tmp do
28135: LD_ADDR_VAR 0 5
28139: PUSH
28140: LD_VAR 0 7
28144: PUSH
28145: FOR_IN
28146: IFFALSE 28184
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28148: LD_VAR 0 1
28152: PPUSH
28153: LD_VAR 0 5
28157: PUSH
28158: LD_INT 1
28160: ARRAY
28161: PPUSH
28162: LD_VAR 0 5
28166: PUSH
28167: LD_INT 2
28169: ARRAY
28170: PPUSH
28171: CALL 27126 0 3
28175: NOT
28176: IFFALSE 28182
// exit ;
28178: POP
28179: POP
28180: GO 28186
28182: GO 28145
28184: POP
28185: POP
// end ;
28186: LD_VAR 0 4
28190: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
28191: LD_INT 0
28193: PPUSH
28194: PPUSH
28195: PPUSH
28196: PPUSH
28197: PPUSH
28198: PPUSH
28199: PPUSH
// if not GetClass ( unit ) = class_sniper then
28200: LD_VAR 0 1
28204: PPUSH
28205: CALL_OW 257
28209: PUSH
28210: LD_INT 5
28212: EQUAL
28213: NOT
28214: IFFALSE 28218
// exit ;
28216: GO 28606
// dist := 8 ;
28218: LD_ADDR_VAR 0 5
28222: PUSH
28223: LD_INT 8
28225: ST_TO_ADDR
// viewRange := 12 ;
28226: LD_ADDR_VAR 0 7
28230: PUSH
28231: LD_INT 12
28233: ST_TO_ADDR
// side := GetSide ( unit ) ;
28234: LD_ADDR_VAR 0 6
28238: PUSH
28239: LD_VAR 0 1
28243: PPUSH
28244: CALL_OW 255
28248: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28249: LD_INT 61
28251: PPUSH
28252: LD_VAR 0 6
28256: PPUSH
28257: CALL_OW 321
28261: PUSH
28262: LD_INT 2
28264: EQUAL
28265: IFFALSE 28275
// viewRange := 16 ;
28267: LD_ADDR_VAR 0 7
28271: PUSH
28272: LD_INT 16
28274: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28275: LD_VAR 0 1
28279: PPUSH
28280: LD_VAR 0 2
28284: PPUSH
28285: LD_VAR 0 3
28289: PPUSH
28290: CALL_OW 297
28294: PUSH
28295: LD_VAR 0 5
28299: GREATER
28300: IFFALSE 28379
// begin ComMoveXY ( unit , x , y ) ;
28302: LD_VAR 0 1
28306: PPUSH
28307: LD_VAR 0 2
28311: PPUSH
28312: LD_VAR 0 3
28316: PPUSH
28317: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28321: LD_INT 35
28323: PPUSH
28324: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28328: LD_VAR 0 1
28332: PPUSH
28333: LD_VAR 0 2
28337: PPUSH
28338: LD_VAR 0 3
28342: PPUSH
28343: CALL 64101 0 3
28347: NOT
28348: IFFALSE 28352
// exit ;
28350: GO 28606
// until GetDistUnitXY ( unit , x , y ) < dist ;
28352: LD_VAR 0 1
28356: PPUSH
28357: LD_VAR 0 2
28361: PPUSH
28362: LD_VAR 0 3
28366: PPUSH
28367: CALL_OW 297
28371: PUSH
28372: LD_VAR 0 5
28376: LESS
28377: IFFALSE 28321
// end ; ComTurnXY ( unit , x , y ) ;
28379: LD_VAR 0 1
28383: PPUSH
28384: LD_VAR 0 2
28388: PPUSH
28389: LD_VAR 0 3
28393: PPUSH
28394: CALL_OW 118
// wait ( 5 ) ;
28398: LD_INT 5
28400: PPUSH
28401: CALL_OW 67
// _d := GetDir ( unit ) ;
28405: LD_ADDR_VAR 0 10
28409: PUSH
28410: LD_VAR 0 1
28414: PPUSH
28415: CALL_OW 254
28419: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
28420: LD_ADDR_VAR 0 8
28424: PUSH
28425: LD_VAR 0 1
28429: PPUSH
28430: CALL_OW 250
28434: PPUSH
28435: LD_VAR 0 10
28439: PPUSH
28440: LD_VAR 0 5
28444: PPUSH
28445: CALL_OW 272
28449: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
28450: LD_ADDR_VAR 0 9
28454: PUSH
28455: LD_VAR 0 1
28459: PPUSH
28460: CALL_OW 251
28464: PPUSH
28465: LD_VAR 0 10
28469: PPUSH
28470: LD_VAR 0 5
28474: PPUSH
28475: CALL_OW 273
28479: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28480: LD_VAR 0 8
28484: PPUSH
28485: LD_VAR 0 9
28489: PPUSH
28490: CALL_OW 488
28494: NOT
28495: IFFALSE 28499
// exit ;
28497: GO 28606
// ComAnimCustom ( unit , 1 ) ;
28499: LD_VAR 0 1
28503: PPUSH
28504: LD_INT 1
28506: PPUSH
28507: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28511: LD_VAR 0 8
28515: PPUSH
28516: LD_VAR 0 9
28520: PPUSH
28521: LD_VAR 0 6
28525: PPUSH
28526: LD_VAR 0 7
28530: PPUSH
28531: CALL_OW 330
// repeat wait ( 1 ) ;
28535: LD_INT 1
28537: PPUSH
28538: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
28542: LD_VAR 0 1
28546: PPUSH
28547: CALL_OW 316
28551: PUSH
28552: LD_VAR 0 1
28556: PPUSH
28557: CALL_OW 314
28561: OR
28562: PUSH
28563: LD_VAR 0 1
28567: PPUSH
28568: CALL_OW 302
28572: NOT
28573: OR
28574: PUSH
28575: LD_VAR 0 1
28579: PPUSH
28580: CALL_OW 301
28584: OR
28585: IFFALSE 28535
// RemoveSeeing ( _x , _y , side ) ;
28587: LD_VAR 0 8
28591: PPUSH
28592: LD_VAR 0 9
28596: PPUSH
28597: LD_VAR 0 6
28601: PPUSH
28602: CALL_OW 331
// end ; end_of_file
28606: LD_VAR 0 4
28610: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28611: LD_INT 0
28613: PPUSH
28614: PPUSH
// if exist_mode then
28615: LD_VAR 0 2
28619: IFFALSE 28644
// unit := CreateCharacter ( prefix & ident ) else
28621: LD_ADDR_VAR 0 5
28625: PUSH
28626: LD_VAR 0 3
28630: PUSH
28631: LD_VAR 0 1
28635: STR
28636: PPUSH
28637: CALL_OW 34
28641: ST_TO_ADDR
28642: GO 28659
// unit := NewCharacter ( ident ) ;
28644: LD_ADDR_VAR 0 5
28648: PUSH
28649: LD_VAR 0 1
28653: PPUSH
28654: CALL_OW 25
28658: ST_TO_ADDR
// result := unit ;
28659: LD_ADDR_VAR 0 4
28663: PUSH
28664: LD_VAR 0 5
28668: ST_TO_ADDR
// end ;
28669: LD_VAR 0 4
28673: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28674: LD_INT 0
28676: PPUSH
28677: PPUSH
// if not side or not nation then
28678: LD_VAR 0 1
28682: NOT
28683: PUSH
28684: LD_VAR 0 2
28688: NOT
28689: OR
28690: IFFALSE 28694
// exit ;
28692: GO 29462
// case nation of nation_american :
28694: LD_VAR 0 2
28698: PUSH
28699: LD_INT 1
28701: DOUBLE
28702: EQUAL
28703: IFTRUE 28707
28705: GO 28921
28707: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28708: LD_ADDR_VAR 0 4
28712: PUSH
28713: LD_INT 35
28715: PUSH
28716: LD_INT 45
28718: PUSH
28719: LD_INT 46
28721: PUSH
28722: LD_INT 47
28724: PUSH
28725: LD_INT 82
28727: PUSH
28728: LD_INT 83
28730: PUSH
28731: LD_INT 84
28733: PUSH
28734: LD_INT 85
28736: PUSH
28737: LD_INT 86
28739: PUSH
28740: LD_INT 1
28742: PUSH
28743: LD_INT 2
28745: PUSH
28746: LD_INT 6
28748: PUSH
28749: LD_INT 15
28751: PUSH
28752: LD_INT 16
28754: PUSH
28755: LD_INT 7
28757: PUSH
28758: LD_INT 12
28760: PUSH
28761: LD_INT 13
28763: PUSH
28764: LD_INT 10
28766: PUSH
28767: LD_INT 14
28769: PUSH
28770: LD_INT 20
28772: PUSH
28773: LD_INT 21
28775: PUSH
28776: LD_INT 22
28778: PUSH
28779: LD_INT 25
28781: PUSH
28782: LD_INT 32
28784: PUSH
28785: LD_INT 27
28787: PUSH
28788: LD_INT 36
28790: PUSH
28791: LD_INT 69
28793: PUSH
28794: LD_INT 39
28796: PUSH
28797: LD_INT 34
28799: PUSH
28800: LD_INT 40
28802: PUSH
28803: LD_INT 48
28805: PUSH
28806: LD_INT 49
28808: PUSH
28809: LD_INT 50
28811: PUSH
28812: LD_INT 51
28814: PUSH
28815: LD_INT 52
28817: PUSH
28818: LD_INT 53
28820: PUSH
28821: LD_INT 54
28823: PUSH
28824: LD_INT 55
28826: PUSH
28827: LD_INT 56
28829: PUSH
28830: LD_INT 57
28832: PUSH
28833: LD_INT 58
28835: PUSH
28836: LD_INT 59
28838: PUSH
28839: LD_INT 60
28841: PUSH
28842: LD_INT 61
28844: PUSH
28845: LD_INT 62
28847: PUSH
28848: LD_INT 80
28850: PUSH
28851: LD_INT 82
28853: PUSH
28854: LD_INT 83
28856: PUSH
28857: LD_INT 84
28859: PUSH
28860: LD_INT 85
28862: PUSH
28863: LD_INT 86
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: LIST
28892: LIST
28893: LIST
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: LIST
28899: LIST
28900: LIST
28901: LIST
28902: LIST
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: LIST
28913: LIST
28914: LIST
28915: LIST
28916: LIST
28917: LIST
28918: ST_TO_ADDR
28919: GO 29386
28921: LD_INT 2
28923: DOUBLE
28924: EQUAL
28925: IFTRUE 28929
28927: GO 29155
28929: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
28930: LD_ADDR_VAR 0 4
28934: PUSH
28935: LD_INT 35
28937: PUSH
28938: LD_INT 45
28940: PUSH
28941: LD_INT 46
28943: PUSH
28944: LD_INT 47
28946: PUSH
28947: LD_INT 82
28949: PUSH
28950: LD_INT 83
28952: PUSH
28953: LD_INT 84
28955: PUSH
28956: LD_INT 85
28958: PUSH
28959: LD_INT 87
28961: PUSH
28962: LD_INT 70
28964: PUSH
28965: LD_INT 1
28967: PUSH
28968: LD_INT 11
28970: PUSH
28971: LD_INT 3
28973: PUSH
28974: LD_INT 4
28976: PUSH
28977: LD_INT 5
28979: PUSH
28980: LD_INT 6
28982: PUSH
28983: LD_INT 15
28985: PUSH
28986: LD_INT 18
28988: PUSH
28989: LD_INT 7
28991: PUSH
28992: LD_INT 17
28994: PUSH
28995: LD_INT 8
28997: PUSH
28998: LD_INT 20
29000: PUSH
29001: LD_INT 21
29003: PUSH
29004: LD_INT 22
29006: PUSH
29007: LD_INT 72
29009: PUSH
29010: LD_INT 26
29012: PUSH
29013: LD_INT 69
29015: PUSH
29016: LD_INT 39
29018: PUSH
29019: LD_INT 40
29021: PUSH
29022: LD_INT 41
29024: PUSH
29025: LD_INT 42
29027: PUSH
29028: LD_INT 43
29030: PUSH
29031: LD_INT 48
29033: PUSH
29034: LD_INT 49
29036: PUSH
29037: LD_INT 50
29039: PUSH
29040: LD_INT 51
29042: PUSH
29043: LD_INT 52
29045: PUSH
29046: LD_INT 53
29048: PUSH
29049: LD_INT 54
29051: PUSH
29052: LD_INT 55
29054: PUSH
29055: LD_INT 56
29057: PUSH
29058: LD_INT 60
29060: PUSH
29061: LD_INT 61
29063: PUSH
29064: LD_INT 62
29066: PUSH
29067: LD_INT 66
29069: PUSH
29070: LD_INT 67
29072: PUSH
29073: LD_INT 68
29075: PUSH
29076: LD_INT 81
29078: PUSH
29079: LD_INT 82
29081: PUSH
29082: LD_INT 83
29084: PUSH
29085: LD_INT 84
29087: PUSH
29088: LD_INT 85
29090: PUSH
29091: LD_INT 87
29093: PUSH
29094: LD_INT 88
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: ST_TO_ADDR
29153: GO 29386
29155: LD_INT 3
29157: DOUBLE
29158: EQUAL
29159: IFTRUE 29163
29161: GO 29385
29163: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29164: LD_ADDR_VAR 0 4
29168: PUSH
29169: LD_INT 46
29171: PUSH
29172: LD_INT 47
29174: PUSH
29175: LD_INT 1
29177: PUSH
29178: LD_INT 2
29180: PUSH
29181: LD_INT 82
29183: PUSH
29184: LD_INT 83
29186: PUSH
29187: LD_INT 84
29189: PUSH
29190: LD_INT 85
29192: PUSH
29193: LD_INT 86
29195: PUSH
29196: LD_INT 11
29198: PUSH
29199: LD_INT 9
29201: PUSH
29202: LD_INT 20
29204: PUSH
29205: LD_INT 19
29207: PUSH
29208: LD_INT 21
29210: PUSH
29211: LD_INT 24
29213: PUSH
29214: LD_INT 22
29216: PUSH
29217: LD_INT 25
29219: PUSH
29220: LD_INT 28
29222: PUSH
29223: LD_INT 29
29225: PUSH
29226: LD_INT 30
29228: PUSH
29229: LD_INT 31
29231: PUSH
29232: LD_INT 37
29234: PUSH
29235: LD_INT 38
29237: PUSH
29238: LD_INT 32
29240: PUSH
29241: LD_INT 27
29243: PUSH
29244: LD_INT 33
29246: PUSH
29247: LD_INT 69
29249: PUSH
29250: LD_INT 39
29252: PUSH
29253: LD_INT 34
29255: PUSH
29256: LD_INT 40
29258: PUSH
29259: LD_INT 71
29261: PUSH
29262: LD_INT 23
29264: PUSH
29265: LD_INT 44
29267: PUSH
29268: LD_INT 48
29270: PUSH
29271: LD_INT 49
29273: PUSH
29274: LD_INT 50
29276: PUSH
29277: LD_INT 51
29279: PUSH
29280: LD_INT 52
29282: PUSH
29283: LD_INT 53
29285: PUSH
29286: LD_INT 54
29288: PUSH
29289: LD_INT 55
29291: PUSH
29292: LD_INT 56
29294: PUSH
29295: LD_INT 57
29297: PUSH
29298: LD_INT 58
29300: PUSH
29301: LD_INT 59
29303: PUSH
29304: LD_INT 63
29306: PUSH
29307: LD_INT 64
29309: PUSH
29310: LD_INT 65
29312: PUSH
29313: LD_INT 82
29315: PUSH
29316: LD_INT 83
29318: PUSH
29319: LD_INT 84
29321: PUSH
29322: LD_INT 85
29324: PUSH
29325: LD_INT 86
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: LIST
29332: LIST
29333: LIST
29334: LIST
29335: LIST
29336: LIST
29337: LIST
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: LIST
29343: LIST
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: LIST
29352: LIST
29353: LIST
29354: LIST
29355: LIST
29356: LIST
29357: LIST
29358: LIST
29359: LIST
29360: LIST
29361: LIST
29362: LIST
29363: LIST
29364: LIST
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: ST_TO_ADDR
29383: GO 29386
29385: POP
// if state > - 1 and state < 3 then
29386: LD_VAR 0 3
29390: PUSH
29391: LD_INT 1
29393: NEG
29394: GREATER
29395: PUSH
29396: LD_VAR 0 3
29400: PUSH
29401: LD_INT 3
29403: LESS
29404: AND
29405: IFFALSE 29462
// for i in result do
29407: LD_ADDR_VAR 0 5
29411: PUSH
29412: LD_VAR 0 4
29416: PUSH
29417: FOR_IN
29418: IFFALSE 29460
// if GetTech ( i , side ) <> state then
29420: LD_VAR 0 5
29424: PPUSH
29425: LD_VAR 0 1
29429: PPUSH
29430: CALL_OW 321
29434: PUSH
29435: LD_VAR 0 3
29439: NONEQUAL
29440: IFFALSE 29458
// result := result diff i ;
29442: LD_ADDR_VAR 0 4
29446: PUSH
29447: LD_VAR 0 4
29451: PUSH
29452: LD_VAR 0 5
29456: DIFF
29457: ST_TO_ADDR
29458: GO 29417
29460: POP
29461: POP
// end ;
29462: LD_VAR 0 4
29466: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29467: LD_INT 0
29469: PPUSH
29470: PPUSH
29471: PPUSH
// result := true ;
29472: LD_ADDR_VAR 0 3
29476: PUSH
29477: LD_INT 1
29479: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29480: LD_ADDR_VAR 0 5
29484: PUSH
29485: LD_VAR 0 2
29489: PPUSH
29490: CALL_OW 480
29494: ST_TO_ADDR
// if not tmp then
29495: LD_VAR 0 5
29499: NOT
29500: IFFALSE 29504
// exit ;
29502: GO 29553
// for i in tmp do
29504: LD_ADDR_VAR 0 4
29508: PUSH
29509: LD_VAR 0 5
29513: PUSH
29514: FOR_IN
29515: IFFALSE 29551
// if GetTech ( i , side ) <> state_researched then
29517: LD_VAR 0 4
29521: PPUSH
29522: LD_VAR 0 1
29526: PPUSH
29527: CALL_OW 321
29531: PUSH
29532: LD_INT 2
29534: NONEQUAL
29535: IFFALSE 29549
// begin result := false ;
29537: LD_ADDR_VAR 0 3
29541: PUSH
29542: LD_INT 0
29544: ST_TO_ADDR
// exit ;
29545: POP
29546: POP
29547: GO 29553
// end ;
29549: GO 29514
29551: POP
29552: POP
// end ;
29553: LD_VAR 0 3
29557: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29558: LD_INT 0
29560: PPUSH
29561: PPUSH
29562: PPUSH
29563: PPUSH
29564: PPUSH
29565: PPUSH
29566: PPUSH
29567: PPUSH
29568: PPUSH
29569: PPUSH
29570: PPUSH
29571: PPUSH
29572: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29573: LD_VAR 0 1
29577: NOT
29578: PUSH
29579: LD_VAR 0 1
29583: PPUSH
29584: CALL_OW 257
29588: PUSH
29589: LD_INT 9
29591: NONEQUAL
29592: OR
29593: IFFALSE 29597
// exit ;
29595: GO 30170
// side := GetSide ( unit ) ;
29597: LD_ADDR_VAR 0 9
29601: PUSH
29602: LD_VAR 0 1
29606: PPUSH
29607: CALL_OW 255
29611: ST_TO_ADDR
// tech_space := tech_spacanom ;
29612: LD_ADDR_VAR 0 12
29616: PUSH
29617: LD_INT 29
29619: ST_TO_ADDR
// tech_time := tech_taurad ;
29620: LD_ADDR_VAR 0 13
29624: PUSH
29625: LD_INT 28
29627: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29628: LD_ADDR_VAR 0 11
29632: PUSH
29633: LD_VAR 0 1
29637: PPUSH
29638: CALL_OW 310
29642: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29643: LD_VAR 0 11
29647: PPUSH
29648: CALL_OW 247
29652: PUSH
29653: LD_INT 2
29655: EQUAL
29656: IFFALSE 29660
// exit ;
29658: GO 30170
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29660: LD_ADDR_VAR 0 8
29664: PUSH
29665: LD_INT 81
29667: PUSH
29668: LD_VAR 0 9
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 3
29679: PUSH
29680: LD_INT 21
29682: PUSH
29683: LD_INT 3
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PPUSH
29698: CALL_OW 69
29702: ST_TO_ADDR
// if not tmp then
29703: LD_VAR 0 8
29707: NOT
29708: IFFALSE 29712
// exit ;
29710: GO 30170
// if in_unit then
29712: LD_VAR 0 11
29716: IFFALSE 29740
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29718: LD_ADDR_VAR 0 10
29722: PUSH
29723: LD_VAR 0 8
29727: PPUSH
29728: LD_VAR 0 11
29732: PPUSH
29733: CALL_OW 74
29737: ST_TO_ADDR
29738: GO 29760
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29740: LD_ADDR_VAR 0 10
29744: PUSH
29745: LD_VAR 0 8
29749: PPUSH
29750: LD_VAR 0 1
29754: PPUSH
29755: CALL_OW 74
29759: ST_TO_ADDR
// if not enemy then
29760: LD_VAR 0 10
29764: NOT
29765: IFFALSE 29769
// exit ;
29767: GO 30170
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29769: LD_VAR 0 11
29773: PUSH
29774: LD_VAR 0 11
29778: PPUSH
29779: LD_VAR 0 10
29783: PPUSH
29784: CALL_OW 296
29788: PUSH
29789: LD_INT 13
29791: GREATER
29792: AND
29793: PUSH
29794: LD_VAR 0 1
29798: PPUSH
29799: LD_VAR 0 10
29803: PPUSH
29804: CALL_OW 296
29808: PUSH
29809: LD_INT 12
29811: GREATER
29812: OR
29813: IFFALSE 29817
// exit ;
29815: GO 30170
// missile := [ 1 ] ;
29817: LD_ADDR_VAR 0 14
29821: PUSH
29822: LD_INT 1
29824: PUSH
29825: EMPTY
29826: LIST
29827: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29828: LD_VAR 0 9
29832: PPUSH
29833: LD_VAR 0 12
29837: PPUSH
29838: CALL_OW 325
29842: IFFALSE 29871
// missile := Replace ( missile , missile + 1 , 2 ) ;
29844: LD_ADDR_VAR 0 14
29848: PUSH
29849: LD_VAR 0 14
29853: PPUSH
29854: LD_VAR 0 14
29858: PUSH
29859: LD_INT 1
29861: PLUS
29862: PPUSH
29863: LD_INT 2
29865: PPUSH
29866: CALL_OW 1
29870: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29871: LD_VAR 0 9
29875: PPUSH
29876: LD_VAR 0 13
29880: PPUSH
29881: CALL_OW 325
29885: PUSH
29886: LD_VAR 0 10
29890: PPUSH
29891: CALL_OW 255
29895: PPUSH
29896: LD_VAR 0 13
29900: PPUSH
29901: CALL_OW 325
29905: NOT
29906: AND
29907: IFFALSE 29936
// missile := Replace ( missile , missile + 1 , 3 ) ;
29909: LD_ADDR_VAR 0 14
29913: PUSH
29914: LD_VAR 0 14
29918: PPUSH
29919: LD_VAR 0 14
29923: PUSH
29924: LD_INT 1
29926: PLUS
29927: PPUSH
29928: LD_INT 3
29930: PPUSH
29931: CALL_OW 1
29935: ST_TO_ADDR
// if missile < 2 then
29936: LD_VAR 0 14
29940: PUSH
29941: LD_INT 2
29943: LESS
29944: IFFALSE 29948
// exit ;
29946: GO 30170
// x := GetX ( enemy ) ;
29948: LD_ADDR_VAR 0 4
29952: PUSH
29953: LD_VAR 0 10
29957: PPUSH
29958: CALL_OW 250
29962: ST_TO_ADDR
// y := GetY ( enemy ) ;
29963: LD_ADDR_VAR 0 5
29967: PUSH
29968: LD_VAR 0 10
29972: PPUSH
29973: CALL_OW 251
29977: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29978: LD_ADDR_VAR 0 6
29982: PUSH
29983: LD_VAR 0 4
29987: PUSH
29988: LD_INT 1
29990: NEG
29991: PPUSH
29992: LD_INT 1
29994: PPUSH
29995: CALL_OW 12
29999: PLUS
30000: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30001: LD_ADDR_VAR 0 7
30005: PUSH
30006: LD_VAR 0 5
30010: PUSH
30011: LD_INT 1
30013: NEG
30014: PPUSH
30015: LD_INT 1
30017: PPUSH
30018: CALL_OW 12
30022: PLUS
30023: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30024: LD_VAR 0 6
30028: PPUSH
30029: LD_VAR 0 7
30033: PPUSH
30034: CALL_OW 488
30038: NOT
30039: IFFALSE 30061
// begin _x := x ;
30041: LD_ADDR_VAR 0 6
30045: PUSH
30046: LD_VAR 0 4
30050: ST_TO_ADDR
// _y := y ;
30051: LD_ADDR_VAR 0 7
30055: PUSH
30056: LD_VAR 0 5
30060: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30061: LD_ADDR_VAR 0 3
30065: PUSH
30066: LD_INT 1
30068: PPUSH
30069: LD_VAR 0 14
30073: PPUSH
30074: CALL_OW 12
30078: ST_TO_ADDR
// case i of 1 :
30079: LD_VAR 0 3
30083: PUSH
30084: LD_INT 1
30086: DOUBLE
30087: EQUAL
30088: IFTRUE 30092
30090: GO 30109
30092: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30093: LD_VAR 0 1
30097: PPUSH
30098: LD_VAR 0 10
30102: PPUSH
30103: CALL_OW 115
30107: GO 30170
30109: LD_INT 2
30111: DOUBLE
30112: EQUAL
30113: IFTRUE 30117
30115: GO 30139
30117: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30118: LD_VAR 0 1
30122: PPUSH
30123: LD_VAR 0 6
30127: PPUSH
30128: LD_VAR 0 7
30132: PPUSH
30133: CALL_OW 153
30137: GO 30170
30139: LD_INT 3
30141: DOUBLE
30142: EQUAL
30143: IFTRUE 30147
30145: GO 30169
30147: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30148: LD_VAR 0 1
30152: PPUSH
30153: LD_VAR 0 6
30157: PPUSH
30158: LD_VAR 0 7
30162: PPUSH
30163: CALL_OW 154
30167: GO 30170
30169: POP
// end ;
30170: LD_VAR 0 2
30174: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30175: LD_INT 0
30177: PPUSH
30178: PPUSH
30179: PPUSH
30180: PPUSH
30181: PPUSH
30182: PPUSH
// if not unit or not building then
30183: LD_VAR 0 1
30187: NOT
30188: PUSH
30189: LD_VAR 0 2
30193: NOT
30194: OR
30195: IFFALSE 30199
// exit ;
30197: GO 30357
// x := GetX ( building ) ;
30199: LD_ADDR_VAR 0 5
30203: PUSH
30204: LD_VAR 0 2
30208: PPUSH
30209: CALL_OW 250
30213: ST_TO_ADDR
// y := GetY ( building ) ;
30214: LD_ADDR_VAR 0 6
30218: PUSH
30219: LD_VAR 0 2
30223: PPUSH
30224: CALL_OW 251
30228: ST_TO_ADDR
// for i = 0 to 5 do
30229: LD_ADDR_VAR 0 4
30233: PUSH
30234: DOUBLE
30235: LD_INT 0
30237: DEC
30238: ST_TO_ADDR
30239: LD_INT 5
30241: PUSH
30242: FOR_TO
30243: IFFALSE 30355
// begin _x := ShiftX ( x , i , 3 ) ;
30245: LD_ADDR_VAR 0 7
30249: PUSH
30250: LD_VAR 0 5
30254: PPUSH
30255: LD_VAR 0 4
30259: PPUSH
30260: LD_INT 3
30262: PPUSH
30263: CALL_OW 272
30267: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30268: LD_ADDR_VAR 0 8
30272: PUSH
30273: LD_VAR 0 6
30277: PPUSH
30278: LD_VAR 0 4
30282: PPUSH
30283: LD_INT 3
30285: PPUSH
30286: CALL_OW 273
30290: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30291: LD_VAR 0 7
30295: PPUSH
30296: LD_VAR 0 8
30300: PPUSH
30301: CALL_OW 488
30305: NOT
30306: IFFALSE 30310
// continue ;
30308: GO 30242
// if HexInfo ( _x , _y ) = 0 then
30310: LD_VAR 0 7
30314: PPUSH
30315: LD_VAR 0 8
30319: PPUSH
30320: CALL_OW 428
30324: PUSH
30325: LD_INT 0
30327: EQUAL
30328: IFFALSE 30353
// begin ComMoveXY ( unit , _x , _y ) ;
30330: LD_VAR 0 1
30334: PPUSH
30335: LD_VAR 0 7
30339: PPUSH
30340: LD_VAR 0 8
30344: PPUSH
30345: CALL_OW 111
// exit ;
30349: POP
30350: POP
30351: GO 30357
// end ; end ;
30353: GO 30242
30355: POP
30356: POP
// end ;
30357: LD_VAR 0 3
30361: RET
// export function ScanBase ( side , base_area ) ; begin
30362: LD_INT 0
30364: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30365: LD_ADDR_VAR 0 3
30369: PUSH
30370: LD_VAR 0 2
30374: PPUSH
30375: LD_INT 81
30377: PUSH
30378: LD_VAR 0 1
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PPUSH
30387: CALL_OW 70
30391: ST_TO_ADDR
// end ;
30392: LD_VAR 0 3
30396: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30397: LD_INT 0
30399: PPUSH
30400: PPUSH
30401: PPUSH
30402: PPUSH
// result := false ;
30403: LD_ADDR_VAR 0 2
30407: PUSH
30408: LD_INT 0
30410: ST_TO_ADDR
// side := GetSide ( unit ) ;
30411: LD_ADDR_VAR 0 3
30415: PUSH
30416: LD_VAR 0 1
30420: PPUSH
30421: CALL_OW 255
30425: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30426: LD_ADDR_VAR 0 4
30430: PUSH
30431: LD_VAR 0 1
30435: PPUSH
30436: CALL_OW 248
30440: ST_TO_ADDR
// case nat of 1 :
30441: LD_VAR 0 4
30445: PUSH
30446: LD_INT 1
30448: DOUBLE
30449: EQUAL
30450: IFTRUE 30454
30452: GO 30465
30454: POP
// tech := tech_lassight ; 2 :
30455: LD_ADDR_VAR 0 5
30459: PUSH
30460: LD_INT 12
30462: ST_TO_ADDR
30463: GO 30504
30465: LD_INT 2
30467: DOUBLE
30468: EQUAL
30469: IFTRUE 30473
30471: GO 30484
30473: POP
// tech := tech_mortar ; 3 :
30474: LD_ADDR_VAR 0 5
30478: PUSH
30479: LD_INT 41
30481: ST_TO_ADDR
30482: GO 30504
30484: LD_INT 3
30486: DOUBLE
30487: EQUAL
30488: IFTRUE 30492
30490: GO 30503
30492: POP
// tech := tech_bazooka ; end ;
30493: LD_ADDR_VAR 0 5
30497: PUSH
30498: LD_INT 44
30500: ST_TO_ADDR
30501: GO 30504
30503: POP
// if Researched ( side , tech ) then
30504: LD_VAR 0 3
30508: PPUSH
30509: LD_VAR 0 5
30513: PPUSH
30514: CALL_OW 325
30518: IFFALSE 30545
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30520: LD_ADDR_VAR 0 2
30524: PUSH
30525: LD_INT 5
30527: PUSH
30528: LD_INT 8
30530: PUSH
30531: LD_INT 9
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: LIST
30538: PUSH
30539: LD_VAR 0 4
30543: ARRAY
30544: ST_TO_ADDR
// end ;
30545: LD_VAR 0 2
30549: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30550: LD_INT 0
30552: PPUSH
30553: PPUSH
30554: PPUSH
// if not mines then
30555: LD_VAR 0 2
30559: NOT
30560: IFFALSE 30564
// exit ;
30562: GO 30708
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30564: LD_ADDR_VAR 0 5
30568: PUSH
30569: LD_INT 81
30571: PUSH
30572: LD_VAR 0 1
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: LD_INT 3
30583: PUSH
30584: LD_INT 21
30586: PUSH
30587: LD_INT 3
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PPUSH
30602: CALL_OW 69
30606: ST_TO_ADDR
// for i in mines do
30607: LD_ADDR_VAR 0 4
30611: PUSH
30612: LD_VAR 0 2
30616: PUSH
30617: FOR_IN
30618: IFFALSE 30706
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30620: LD_VAR 0 4
30624: PUSH
30625: LD_INT 1
30627: ARRAY
30628: PPUSH
30629: LD_VAR 0 4
30633: PUSH
30634: LD_INT 2
30636: ARRAY
30637: PPUSH
30638: CALL_OW 458
30642: NOT
30643: IFFALSE 30647
// continue ;
30645: GO 30617
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30647: LD_VAR 0 4
30651: PUSH
30652: LD_INT 1
30654: ARRAY
30655: PPUSH
30656: LD_VAR 0 4
30660: PUSH
30661: LD_INT 2
30663: ARRAY
30664: PPUSH
30665: CALL_OW 428
30669: PUSH
30670: LD_VAR 0 5
30674: IN
30675: IFFALSE 30704
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30677: LD_VAR 0 4
30681: PUSH
30682: LD_INT 1
30684: ARRAY
30685: PPUSH
30686: LD_VAR 0 4
30690: PUSH
30691: LD_INT 2
30693: ARRAY
30694: PPUSH
30695: LD_VAR 0 1
30699: PPUSH
30700: CALL_OW 456
// end ;
30704: GO 30617
30706: POP
30707: POP
// end ;
30708: LD_VAR 0 3
30712: RET
// export function Count ( array ) ; var i ; begin
30713: LD_INT 0
30715: PPUSH
30716: PPUSH
// result := 0 ;
30717: LD_ADDR_VAR 0 2
30721: PUSH
30722: LD_INT 0
30724: ST_TO_ADDR
// for i in array do
30725: LD_ADDR_VAR 0 3
30729: PUSH
30730: LD_VAR 0 1
30734: PUSH
30735: FOR_IN
30736: IFFALSE 30760
// if i then
30738: LD_VAR 0 3
30742: IFFALSE 30758
// result := result + 1 ;
30744: LD_ADDR_VAR 0 2
30748: PUSH
30749: LD_VAR 0 2
30753: PUSH
30754: LD_INT 1
30756: PLUS
30757: ST_TO_ADDR
30758: GO 30735
30760: POP
30761: POP
// end ;
30762: LD_VAR 0 2
30766: RET
// export function IsEmpty ( building ) ; begin
30767: LD_INT 0
30769: PPUSH
// if not building then
30770: LD_VAR 0 1
30774: NOT
30775: IFFALSE 30779
// exit ;
30777: GO 30822
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30779: LD_ADDR_VAR 0 2
30783: PUSH
30784: LD_VAR 0 1
30788: PUSH
30789: LD_INT 22
30791: PUSH
30792: LD_VAR 0 1
30796: PPUSH
30797: CALL_OW 255
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PUSH
30806: LD_INT 58
30808: PUSH
30809: EMPTY
30810: LIST
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PPUSH
30816: CALL_OW 69
30820: IN
30821: ST_TO_ADDR
// end ;
30822: LD_VAR 0 2
30826: RET
// export function IsNotFull ( building ) ; begin
30827: LD_INT 0
30829: PPUSH
// if not building then
30830: LD_VAR 0 1
30834: NOT
30835: IFFALSE 30839
// exit ;
30837: GO 30858
// result := UnitsInside ( building ) < 6 ;
30839: LD_ADDR_VAR 0 2
30843: PUSH
30844: LD_VAR 0 1
30848: PPUSH
30849: CALL_OW 313
30853: PUSH
30854: LD_INT 6
30856: LESS
30857: ST_TO_ADDR
// end ;
30858: LD_VAR 0 2
30862: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30863: LD_INT 0
30865: PPUSH
30866: PPUSH
30867: PPUSH
30868: PPUSH
// tmp := [ ] ;
30869: LD_ADDR_VAR 0 3
30873: PUSH
30874: EMPTY
30875: ST_TO_ADDR
// list := [ ] ;
30876: LD_ADDR_VAR 0 5
30880: PUSH
30881: EMPTY
30882: ST_TO_ADDR
// for i = 16 to 25 do
30883: LD_ADDR_VAR 0 4
30887: PUSH
30888: DOUBLE
30889: LD_INT 16
30891: DEC
30892: ST_TO_ADDR
30893: LD_INT 25
30895: PUSH
30896: FOR_TO
30897: IFFALSE 30970
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30899: LD_ADDR_VAR 0 3
30903: PUSH
30904: LD_VAR 0 3
30908: PUSH
30909: LD_INT 22
30911: PUSH
30912: LD_VAR 0 1
30916: PPUSH
30917: CALL_OW 255
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: PUSH
30926: LD_INT 91
30928: PUSH
30929: LD_VAR 0 1
30933: PUSH
30934: LD_INT 6
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: LIST
30941: PUSH
30942: LD_INT 30
30944: PUSH
30945: LD_VAR 0 4
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: LIST
30958: PUSH
30959: EMPTY
30960: LIST
30961: PPUSH
30962: CALL_OW 69
30966: ADD
30967: ST_TO_ADDR
30968: GO 30896
30970: POP
30971: POP
// for i = 1 to tmp do
30972: LD_ADDR_VAR 0 4
30976: PUSH
30977: DOUBLE
30978: LD_INT 1
30980: DEC
30981: ST_TO_ADDR
30982: LD_VAR 0 3
30986: PUSH
30987: FOR_TO
30988: IFFALSE 31076
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30990: LD_ADDR_VAR 0 5
30994: PUSH
30995: LD_VAR 0 5
30999: PUSH
31000: LD_VAR 0 3
31004: PUSH
31005: LD_VAR 0 4
31009: ARRAY
31010: PPUSH
31011: CALL_OW 266
31015: PUSH
31016: LD_VAR 0 3
31020: PUSH
31021: LD_VAR 0 4
31025: ARRAY
31026: PPUSH
31027: CALL_OW 250
31031: PUSH
31032: LD_VAR 0 3
31036: PUSH
31037: LD_VAR 0 4
31041: ARRAY
31042: PPUSH
31043: CALL_OW 251
31047: PUSH
31048: LD_VAR 0 3
31052: PUSH
31053: LD_VAR 0 4
31057: ARRAY
31058: PPUSH
31059: CALL_OW 254
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: PUSH
31070: EMPTY
31071: LIST
31072: ADD
31073: ST_TO_ADDR
31074: GO 30987
31076: POP
31077: POP
// result := list ;
31078: LD_ADDR_VAR 0 2
31082: PUSH
31083: LD_VAR 0 5
31087: ST_TO_ADDR
// end ;
31088: LD_VAR 0 2
31092: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31093: LD_INT 0
31095: PPUSH
31096: PPUSH
31097: PPUSH
31098: PPUSH
31099: PPUSH
31100: PPUSH
31101: PPUSH
// if not factory then
31102: LD_VAR 0 1
31106: NOT
31107: IFFALSE 31111
// exit ;
31109: GO 31704
// if control = control_apeman then
31111: LD_VAR 0 4
31115: PUSH
31116: LD_INT 5
31118: EQUAL
31119: IFFALSE 31228
// begin tmp := UnitsInside ( factory ) ;
31121: LD_ADDR_VAR 0 8
31125: PUSH
31126: LD_VAR 0 1
31130: PPUSH
31131: CALL_OW 313
31135: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31136: LD_VAR 0 8
31140: PPUSH
31141: LD_INT 25
31143: PUSH
31144: LD_INT 12
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PPUSH
31151: CALL_OW 72
31155: NOT
31156: IFFALSE 31166
// control := control_manual ;
31158: LD_ADDR_VAR 0 4
31162: PUSH
31163: LD_INT 1
31165: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31166: LD_ADDR_VAR 0 8
31170: PUSH
31171: LD_VAR 0 1
31175: PPUSH
31176: CALL 30863 0 1
31180: ST_TO_ADDR
// if tmp then
31181: LD_VAR 0 8
31185: IFFALSE 31228
// begin for i in tmp do
31187: LD_ADDR_VAR 0 7
31191: PUSH
31192: LD_VAR 0 8
31196: PUSH
31197: FOR_IN
31198: IFFALSE 31226
// if i [ 1 ] = b_ext_radio then
31200: LD_VAR 0 7
31204: PUSH
31205: LD_INT 1
31207: ARRAY
31208: PUSH
31209: LD_INT 22
31211: EQUAL
31212: IFFALSE 31224
// begin control := control_remote ;
31214: LD_ADDR_VAR 0 4
31218: PUSH
31219: LD_INT 2
31221: ST_TO_ADDR
// break ;
31222: GO 31226
// end ;
31224: GO 31197
31226: POP
31227: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31228: LD_VAR 0 1
31232: PPUSH
31233: LD_VAR 0 2
31237: PPUSH
31238: LD_VAR 0 3
31242: PPUSH
31243: LD_VAR 0 4
31247: PPUSH
31248: LD_VAR 0 5
31252: PPUSH
31253: CALL_OW 448
31257: IFFALSE 31292
// begin result := [ chassis , engine , control , weapon ] ;
31259: LD_ADDR_VAR 0 6
31263: PUSH
31264: LD_VAR 0 2
31268: PUSH
31269: LD_VAR 0 3
31273: PUSH
31274: LD_VAR 0 4
31278: PUSH
31279: LD_VAR 0 5
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: ST_TO_ADDR
// exit ;
31290: GO 31704
// end ; _chassis := AvailableChassisList ( factory ) ;
31292: LD_ADDR_VAR 0 9
31296: PUSH
31297: LD_VAR 0 1
31301: PPUSH
31302: CALL_OW 475
31306: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31307: LD_ADDR_VAR 0 11
31311: PUSH
31312: LD_VAR 0 1
31316: PPUSH
31317: CALL_OW 476
31321: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31322: LD_ADDR_VAR 0 12
31326: PUSH
31327: LD_VAR 0 1
31331: PPUSH
31332: CALL_OW 477
31336: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31337: LD_ADDR_VAR 0 10
31341: PUSH
31342: LD_VAR 0 1
31346: PPUSH
31347: CALL_OW 478
31351: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31352: LD_VAR 0 9
31356: NOT
31357: PUSH
31358: LD_VAR 0 11
31362: NOT
31363: OR
31364: PUSH
31365: LD_VAR 0 12
31369: NOT
31370: OR
31371: PUSH
31372: LD_VAR 0 10
31376: NOT
31377: OR
31378: IFFALSE 31413
// begin result := [ chassis , engine , control , weapon ] ;
31380: LD_ADDR_VAR 0 6
31384: PUSH
31385: LD_VAR 0 2
31389: PUSH
31390: LD_VAR 0 3
31394: PUSH
31395: LD_VAR 0 4
31399: PUSH
31400: LD_VAR 0 5
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: ST_TO_ADDR
// exit ;
31411: GO 31704
// end ; if not chassis in _chassis then
31413: LD_VAR 0 2
31417: PUSH
31418: LD_VAR 0 9
31422: IN
31423: NOT
31424: IFFALSE 31450
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31426: LD_ADDR_VAR 0 2
31430: PUSH
31431: LD_VAR 0 9
31435: PUSH
31436: LD_INT 1
31438: PPUSH
31439: LD_VAR 0 9
31443: PPUSH
31444: CALL_OW 12
31448: ARRAY
31449: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31450: LD_VAR 0 2
31454: PPUSH
31455: LD_VAR 0 3
31459: PPUSH
31460: CALL 31709 0 2
31464: NOT
31465: IFFALSE 31524
// repeat engine := _engine [ 1 ] ;
31467: LD_ADDR_VAR 0 3
31471: PUSH
31472: LD_VAR 0 11
31476: PUSH
31477: LD_INT 1
31479: ARRAY
31480: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31481: LD_ADDR_VAR 0 11
31485: PUSH
31486: LD_VAR 0 11
31490: PPUSH
31491: LD_INT 1
31493: PPUSH
31494: CALL_OW 3
31498: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31499: LD_VAR 0 2
31503: PPUSH
31504: LD_VAR 0 3
31508: PPUSH
31509: CALL 31709 0 2
31513: PUSH
31514: LD_VAR 0 11
31518: PUSH
31519: EMPTY
31520: EQUAL
31521: OR
31522: IFFALSE 31467
// if not control in _control then
31524: LD_VAR 0 4
31528: PUSH
31529: LD_VAR 0 12
31533: IN
31534: NOT
31535: IFFALSE 31561
// control := _control [ rand ( 1 , _control ) ] ;
31537: LD_ADDR_VAR 0 4
31541: PUSH
31542: LD_VAR 0 12
31546: PUSH
31547: LD_INT 1
31549: PPUSH
31550: LD_VAR 0 12
31554: PPUSH
31555: CALL_OW 12
31559: ARRAY
31560: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31561: LD_VAR 0 2
31565: PPUSH
31566: LD_VAR 0 5
31570: PPUSH
31571: CALL 31929 0 2
31575: NOT
31576: IFFALSE 31635
// repeat weapon := _weapon [ 1 ] ;
31578: LD_ADDR_VAR 0 5
31582: PUSH
31583: LD_VAR 0 10
31587: PUSH
31588: LD_INT 1
31590: ARRAY
31591: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31592: LD_ADDR_VAR 0 10
31596: PUSH
31597: LD_VAR 0 10
31601: PPUSH
31602: LD_INT 1
31604: PPUSH
31605: CALL_OW 3
31609: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31610: LD_VAR 0 2
31614: PPUSH
31615: LD_VAR 0 5
31619: PPUSH
31620: CALL 31929 0 2
31624: PUSH
31625: LD_VAR 0 10
31629: PUSH
31630: EMPTY
31631: EQUAL
31632: OR
31633: IFFALSE 31578
// result := [ ] ;
31635: LD_ADDR_VAR 0 6
31639: PUSH
31640: EMPTY
31641: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31642: LD_VAR 0 1
31646: PPUSH
31647: LD_VAR 0 2
31651: PPUSH
31652: LD_VAR 0 3
31656: PPUSH
31657: LD_VAR 0 4
31661: PPUSH
31662: LD_VAR 0 5
31666: PPUSH
31667: CALL_OW 448
31671: IFFALSE 31704
// result := [ chassis , engine , control , weapon ] ;
31673: LD_ADDR_VAR 0 6
31677: PUSH
31678: LD_VAR 0 2
31682: PUSH
31683: LD_VAR 0 3
31687: PUSH
31688: LD_VAR 0 4
31692: PUSH
31693: LD_VAR 0 5
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: LIST
31702: LIST
31703: ST_TO_ADDR
// end ;
31704: LD_VAR 0 6
31708: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31709: LD_INT 0
31711: PPUSH
// if not chassis or not engine then
31712: LD_VAR 0 1
31716: NOT
31717: PUSH
31718: LD_VAR 0 2
31722: NOT
31723: OR
31724: IFFALSE 31728
// exit ;
31726: GO 31924
// case engine of engine_solar :
31728: LD_VAR 0 2
31732: PUSH
31733: LD_INT 2
31735: DOUBLE
31736: EQUAL
31737: IFTRUE 31741
31739: GO 31779
31741: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31742: LD_ADDR_VAR 0 3
31746: PUSH
31747: LD_INT 11
31749: PUSH
31750: LD_INT 12
31752: PUSH
31753: LD_INT 13
31755: PUSH
31756: LD_INT 14
31758: PUSH
31759: LD_INT 1
31761: PUSH
31762: LD_INT 2
31764: PUSH
31765: LD_INT 3
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: ST_TO_ADDR
31777: GO 31908
31779: LD_INT 1
31781: DOUBLE
31782: EQUAL
31783: IFTRUE 31787
31785: GO 31849
31787: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31788: LD_ADDR_VAR 0 3
31792: PUSH
31793: LD_INT 11
31795: PUSH
31796: LD_INT 12
31798: PUSH
31799: LD_INT 13
31801: PUSH
31802: LD_INT 14
31804: PUSH
31805: LD_INT 1
31807: PUSH
31808: LD_INT 2
31810: PUSH
31811: LD_INT 3
31813: PUSH
31814: LD_INT 4
31816: PUSH
31817: LD_INT 5
31819: PUSH
31820: LD_INT 21
31822: PUSH
31823: LD_INT 23
31825: PUSH
31826: LD_INT 22
31828: PUSH
31829: LD_INT 24
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: ST_TO_ADDR
31847: GO 31908
31849: LD_INT 3
31851: DOUBLE
31852: EQUAL
31853: IFTRUE 31857
31855: GO 31907
31857: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31858: LD_ADDR_VAR 0 3
31862: PUSH
31863: LD_INT 13
31865: PUSH
31866: LD_INT 14
31868: PUSH
31869: LD_INT 2
31871: PUSH
31872: LD_INT 3
31874: PUSH
31875: LD_INT 4
31877: PUSH
31878: LD_INT 5
31880: PUSH
31881: LD_INT 21
31883: PUSH
31884: LD_INT 22
31886: PUSH
31887: LD_INT 23
31889: PUSH
31890: LD_INT 24
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: LIST
31903: LIST
31904: ST_TO_ADDR
31905: GO 31908
31907: POP
// result := ( chassis in result ) ;
31908: LD_ADDR_VAR 0 3
31912: PUSH
31913: LD_VAR 0 1
31917: PUSH
31918: LD_VAR 0 3
31922: IN
31923: ST_TO_ADDR
// end ;
31924: LD_VAR 0 3
31928: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31929: LD_INT 0
31931: PPUSH
// if not chassis or not weapon then
31932: LD_VAR 0 1
31936: NOT
31937: PUSH
31938: LD_VAR 0 2
31942: NOT
31943: OR
31944: IFFALSE 31948
// exit ;
31946: GO 33010
// case weapon of us_machine_gun :
31948: LD_VAR 0 2
31952: PUSH
31953: LD_INT 2
31955: DOUBLE
31956: EQUAL
31957: IFTRUE 31961
31959: GO 31991
31961: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31962: LD_ADDR_VAR 0 3
31966: PUSH
31967: LD_INT 1
31969: PUSH
31970: LD_INT 2
31972: PUSH
31973: LD_INT 3
31975: PUSH
31976: LD_INT 4
31978: PUSH
31979: LD_INT 5
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: ST_TO_ADDR
31989: GO 32994
31991: LD_INT 3
31993: DOUBLE
31994: EQUAL
31995: IFTRUE 31999
31997: GO 32029
31999: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32000: LD_ADDR_VAR 0 3
32004: PUSH
32005: LD_INT 1
32007: PUSH
32008: LD_INT 2
32010: PUSH
32011: LD_INT 3
32013: PUSH
32014: LD_INT 4
32016: PUSH
32017: LD_INT 5
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: ST_TO_ADDR
32027: GO 32994
32029: LD_INT 11
32031: DOUBLE
32032: EQUAL
32033: IFTRUE 32037
32035: GO 32067
32037: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32038: LD_ADDR_VAR 0 3
32042: PUSH
32043: LD_INT 1
32045: PUSH
32046: LD_INT 2
32048: PUSH
32049: LD_INT 3
32051: PUSH
32052: LD_INT 4
32054: PUSH
32055: LD_INT 5
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: ST_TO_ADDR
32065: GO 32994
32067: LD_INT 4
32069: DOUBLE
32070: EQUAL
32071: IFTRUE 32075
32073: GO 32101
32075: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32076: LD_ADDR_VAR 0 3
32080: PUSH
32081: LD_INT 2
32083: PUSH
32084: LD_INT 3
32086: PUSH
32087: LD_INT 4
32089: PUSH
32090: LD_INT 5
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: ST_TO_ADDR
32099: GO 32994
32101: LD_INT 5
32103: DOUBLE
32104: EQUAL
32105: IFTRUE 32109
32107: GO 32135
32109: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32110: LD_ADDR_VAR 0 3
32114: PUSH
32115: LD_INT 2
32117: PUSH
32118: LD_INT 3
32120: PUSH
32121: LD_INT 4
32123: PUSH
32124: LD_INT 5
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: ST_TO_ADDR
32133: GO 32994
32135: LD_INT 9
32137: DOUBLE
32138: EQUAL
32139: IFTRUE 32143
32141: GO 32169
32143: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32144: LD_ADDR_VAR 0 3
32148: PUSH
32149: LD_INT 2
32151: PUSH
32152: LD_INT 3
32154: PUSH
32155: LD_INT 4
32157: PUSH
32158: LD_INT 5
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: ST_TO_ADDR
32167: GO 32994
32169: LD_INT 7
32171: DOUBLE
32172: EQUAL
32173: IFTRUE 32177
32175: GO 32203
32177: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32178: LD_ADDR_VAR 0 3
32182: PUSH
32183: LD_INT 2
32185: PUSH
32186: LD_INT 3
32188: PUSH
32189: LD_INT 4
32191: PUSH
32192: LD_INT 5
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: ST_TO_ADDR
32201: GO 32994
32203: LD_INT 12
32205: DOUBLE
32206: EQUAL
32207: IFTRUE 32211
32209: GO 32237
32211: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32212: LD_ADDR_VAR 0 3
32216: PUSH
32217: LD_INT 2
32219: PUSH
32220: LD_INT 3
32222: PUSH
32223: LD_INT 4
32225: PUSH
32226: LD_INT 5
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: ST_TO_ADDR
32235: GO 32994
32237: LD_INT 13
32239: DOUBLE
32240: EQUAL
32241: IFTRUE 32245
32243: GO 32271
32245: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32246: LD_ADDR_VAR 0 3
32250: PUSH
32251: LD_INT 2
32253: PUSH
32254: LD_INT 3
32256: PUSH
32257: LD_INT 4
32259: PUSH
32260: LD_INT 5
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: ST_TO_ADDR
32269: GO 32994
32271: LD_INT 14
32273: DOUBLE
32274: EQUAL
32275: IFTRUE 32279
32277: GO 32297
32279: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32280: LD_ADDR_VAR 0 3
32284: PUSH
32285: LD_INT 4
32287: PUSH
32288: LD_INT 5
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: ST_TO_ADDR
32295: GO 32994
32297: LD_INT 6
32299: DOUBLE
32300: EQUAL
32301: IFTRUE 32305
32303: GO 32323
32305: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32306: LD_ADDR_VAR 0 3
32310: PUSH
32311: LD_INT 4
32313: PUSH
32314: LD_INT 5
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: ST_TO_ADDR
32321: GO 32994
32323: LD_INT 10
32325: DOUBLE
32326: EQUAL
32327: IFTRUE 32331
32329: GO 32349
32331: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32332: LD_ADDR_VAR 0 3
32336: PUSH
32337: LD_INT 4
32339: PUSH
32340: LD_INT 5
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: ST_TO_ADDR
32347: GO 32994
32349: LD_INT 22
32351: DOUBLE
32352: EQUAL
32353: IFTRUE 32357
32355: GO 32383
32357: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32358: LD_ADDR_VAR 0 3
32362: PUSH
32363: LD_INT 11
32365: PUSH
32366: LD_INT 12
32368: PUSH
32369: LD_INT 13
32371: PUSH
32372: LD_INT 14
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: ST_TO_ADDR
32381: GO 32994
32383: LD_INT 23
32385: DOUBLE
32386: EQUAL
32387: IFTRUE 32391
32389: GO 32417
32391: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32392: LD_ADDR_VAR 0 3
32396: PUSH
32397: LD_INT 11
32399: PUSH
32400: LD_INT 12
32402: PUSH
32403: LD_INT 13
32405: PUSH
32406: LD_INT 14
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: ST_TO_ADDR
32415: GO 32994
32417: LD_INT 24
32419: DOUBLE
32420: EQUAL
32421: IFTRUE 32425
32423: GO 32451
32425: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32426: LD_ADDR_VAR 0 3
32430: PUSH
32431: LD_INT 11
32433: PUSH
32434: LD_INT 12
32436: PUSH
32437: LD_INT 13
32439: PUSH
32440: LD_INT 14
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: ST_TO_ADDR
32449: GO 32994
32451: LD_INT 30
32453: DOUBLE
32454: EQUAL
32455: IFTRUE 32459
32457: GO 32485
32459: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32460: LD_ADDR_VAR 0 3
32464: PUSH
32465: LD_INT 11
32467: PUSH
32468: LD_INT 12
32470: PUSH
32471: LD_INT 13
32473: PUSH
32474: LD_INT 14
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: ST_TO_ADDR
32483: GO 32994
32485: LD_INT 25
32487: DOUBLE
32488: EQUAL
32489: IFTRUE 32493
32491: GO 32511
32493: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32494: LD_ADDR_VAR 0 3
32498: PUSH
32499: LD_INT 13
32501: PUSH
32502: LD_INT 14
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: ST_TO_ADDR
32509: GO 32994
32511: LD_INT 27
32513: DOUBLE
32514: EQUAL
32515: IFTRUE 32519
32517: GO 32537
32519: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32520: LD_ADDR_VAR 0 3
32524: PUSH
32525: LD_INT 13
32527: PUSH
32528: LD_INT 14
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: ST_TO_ADDR
32535: GO 32994
32537: LD_EXP 30
32541: DOUBLE
32542: EQUAL
32543: IFTRUE 32547
32545: GO 32573
32547: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32548: LD_ADDR_VAR 0 3
32552: PUSH
32553: LD_INT 11
32555: PUSH
32556: LD_INT 12
32558: PUSH
32559: LD_INT 13
32561: PUSH
32562: LD_INT 14
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: ST_TO_ADDR
32571: GO 32994
32573: LD_INT 28
32575: DOUBLE
32576: EQUAL
32577: IFTRUE 32581
32579: GO 32599
32581: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32582: LD_ADDR_VAR 0 3
32586: PUSH
32587: LD_INT 13
32589: PUSH
32590: LD_INT 14
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: ST_TO_ADDR
32597: GO 32994
32599: LD_INT 29
32601: DOUBLE
32602: EQUAL
32603: IFTRUE 32607
32605: GO 32625
32607: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32608: LD_ADDR_VAR 0 3
32612: PUSH
32613: LD_INT 13
32615: PUSH
32616: LD_INT 14
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: ST_TO_ADDR
32623: GO 32994
32625: LD_INT 31
32627: DOUBLE
32628: EQUAL
32629: IFTRUE 32633
32631: GO 32651
32633: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32634: LD_ADDR_VAR 0 3
32638: PUSH
32639: LD_INT 13
32641: PUSH
32642: LD_INT 14
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: ST_TO_ADDR
32649: GO 32994
32651: LD_INT 26
32653: DOUBLE
32654: EQUAL
32655: IFTRUE 32659
32657: GO 32677
32659: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32660: LD_ADDR_VAR 0 3
32664: PUSH
32665: LD_INT 13
32667: PUSH
32668: LD_INT 14
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: ST_TO_ADDR
32675: GO 32994
32677: LD_INT 42
32679: DOUBLE
32680: EQUAL
32681: IFTRUE 32685
32683: GO 32711
32685: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32686: LD_ADDR_VAR 0 3
32690: PUSH
32691: LD_INT 21
32693: PUSH
32694: LD_INT 22
32696: PUSH
32697: LD_INT 23
32699: PUSH
32700: LD_INT 24
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: ST_TO_ADDR
32709: GO 32994
32711: LD_INT 43
32713: DOUBLE
32714: EQUAL
32715: IFTRUE 32719
32717: GO 32745
32719: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32720: LD_ADDR_VAR 0 3
32724: PUSH
32725: LD_INT 21
32727: PUSH
32728: LD_INT 22
32730: PUSH
32731: LD_INT 23
32733: PUSH
32734: LD_INT 24
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: ST_TO_ADDR
32743: GO 32994
32745: LD_INT 44
32747: DOUBLE
32748: EQUAL
32749: IFTRUE 32753
32751: GO 32779
32753: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32754: LD_ADDR_VAR 0 3
32758: PUSH
32759: LD_INT 21
32761: PUSH
32762: LD_INT 22
32764: PUSH
32765: LD_INT 23
32767: PUSH
32768: LD_INT 24
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: LIST
32775: LIST
32776: ST_TO_ADDR
32777: GO 32994
32779: LD_INT 45
32781: DOUBLE
32782: EQUAL
32783: IFTRUE 32787
32785: GO 32813
32787: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32788: LD_ADDR_VAR 0 3
32792: PUSH
32793: LD_INT 21
32795: PUSH
32796: LD_INT 22
32798: PUSH
32799: LD_INT 23
32801: PUSH
32802: LD_INT 24
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: ST_TO_ADDR
32811: GO 32994
32813: LD_INT 49
32815: DOUBLE
32816: EQUAL
32817: IFTRUE 32821
32819: GO 32847
32821: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32822: LD_ADDR_VAR 0 3
32826: PUSH
32827: LD_INT 21
32829: PUSH
32830: LD_INT 22
32832: PUSH
32833: LD_INT 23
32835: PUSH
32836: LD_INT 24
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: ST_TO_ADDR
32845: GO 32994
32847: LD_INT 51
32849: DOUBLE
32850: EQUAL
32851: IFTRUE 32855
32853: GO 32881
32855: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32856: LD_ADDR_VAR 0 3
32860: PUSH
32861: LD_INT 21
32863: PUSH
32864: LD_INT 22
32866: PUSH
32867: LD_INT 23
32869: PUSH
32870: LD_INT 24
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: ST_TO_ADDR
32879: GO 32994
32881: LD_INT 52
32883: DOUBLE
32884: EQUAL
32885: IFTRUE 32889
32887: GO 32915
32889: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32890: LD_ADDR_VAR 0 3
32894: PUSH
32895: LD_INT 21
32897: PUSH
32898: LD_INT 22
32900: PUSH
32901: LD_INT 23
32903: PUSH
32904: LD_INT 24
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: ST_TO_ADDR
32913: GO 32994
32915: LD_INT 53
32917: DOUBLE
32918: EQUAL
32919: IFTRUE 32923
32921: GO 32941
32923: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32924: LD_ADDR_VAR 0 3
32928: PUSH
32929: LD_INT 23
32931: PUSH
32932: LD_INT 24
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: ST_TO_ADDR
32939: GO 32994
32941: LD_INT 46
32943: DOUBLE
32944: EQUAL
32945: IFTRUE 32949
32947: GO 32967
32949: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32950: LD_ADDR_VAR 0 3
32954: PUSH
32955: LD_INT 23
32957: PUSH
32958: LD_INT 24
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: ST_TO_ADDR
32965: GO 32994
32967: LD_INT 47
32969: DOUBLE
32970: EQUAL
32971: IFTRUE 32975
32973: GO 32993
32975: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32976: LD_ADDR_VAR 0 3
32980: PUSH
32981: LD_INT 23
32983: PUSH
32984: LD_INT 24
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: ST_TO_ADDR
32991: GO 32994
32993: POP
// result := ( chassis in result ) ;
32994: LD_ADDR_VAR 0 3
32998: PUSH
32999: LD_VAR 0 1
33003: PUSH
33004: LD_VAR 0 3
33008: IN
33009: ST_TO_ADDR
// end ;
33010: LD_VAR 0 3
33014: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33015: LD_INT 0
33017: PPUSH
33018: PPUSH
33019: PPUSH
33020: PPUSH
33021: PPUSH
33022: PPUSH
33023: PPUSH
// result := array ;
33024: LD_ADDR_VAR 0 5
33028: PUSH
33029: LD_VAR 0 1
33033: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33034: LD_VAR 0 1
33038: NOT
33039: PUSH
33040: LD_VAR 0 2
33044: NOT
33045: OR
33046: PUSH
33047: LD_VAR 0 3
33051: NOT
33052: OR
33053: PUSH
33054: LD_VAR 0 2
33058: PUSH
33059: LD_VAR 0 1
33063: GREATER
33064: OR
33065: PUSH
33066: LD_VAR 0 3
33070: PUSH
33071: LD_VAR 0 1
33075: GREATER
33076: OR
33077: IFFALSE 33081
// exit ;
33079: GO 33377
// if direction then
33081: LD_VAR 0 4
33085: IFFALSE 33149
// begin d := 1 ;
33087: LD_ADDR_VAR 0 9
33091: PUSH
33092: LD_INT 1
33094: ST_TO_ADDR
// if i_from > i_to then
33095: LD_VAR 0 2
33099: PUSH
33100: LD_VAR 0 3
33104: GREATER
33105: IFFALSE 33131
// length := ( array - i_from ) + i_to else
33107: LD_ADDR_VAR 0 11
33111: PUSH
33112: LD_VAR 0 1
33116: PUSH
33117: LD_VAR 0 2
33121: MINUS
33122: PUSH
33123: LD_VAR 0 3
33127: PLUS
33128: ST_TO_ADDR
33129: GO 33147
// length := i_to - i_from ;
33131: LD_ADDR_VAR 0 11
33135: PUSH
33136: LD_VAR 0 3
33140: PUSH
33141: LD_VAR 0 2
33145: MINUS
33146: ST_TO_ADDR
// end else
33147: GO 33210
// begin d := - 1 ;
33149: LD_ADDR_VAR 0 9
33153: PUSH
33154: LD_INT 1
33156: NEG
33157: ST_TO_ADDR
// if i_from > i_to then
33158: LD_VAR 0 2
33162: PUSH
33163: LD_VAR 0 3
33167: GREATER
33168: IFFALSE 33188
// length := i_from - i_to else
33170: LD_ADDR_VAR 0 11
33174: PUSH
33175: LD_VAR 0 2
33179: PUSH
33180: LD_VAR 0 3
33184: MINUS
33185: ST_TO_ADDR
33186: GO 33210
// length := ( array - i_to ) + i_from ;
33188: LD_ADDR_VAR 0 11
33192: PUSH
33193: LD_VAR 0 1
33197: PUSH
33198: LD_VAR 0 3
33202: MINUS
33203: PUSH
33204: LD_VAR 0 2
33208: PLUS
33209: ST_TO_ADDR
// end ; if not length then
33210: LD_VAR 0 11
33214: NOT
33215: IFFALSE 33219
// exit ;
33217: GO 33377
// tmp := array ;
33219: LD_ADDR_VAR 0 10
33223: PUSH
33224: LD_VAR 0 1
33228: ST_TO_ADDR
// for i = 1 to length do
33229: LD_ADDR_VAR 0 6
33233: PUSH
33234: DOUBLE
33235: LD_INT 1
33237: DEC
33238: ST_TO_ADDR
33239: LD_VAR 0 11
33243: PUSH
33244: FOR_TO
33245: IFFALSE 33365
// begin for j = 1 to array do
33247: LD_ADDR_VAR 0 7
33251: PUSH
33252: DOUBLE
33253: LD_INT 1
33255: DEC
33256: ST_TO_ADDR
33257: LD_VAR 0 1
33261: PUSH
33262: FOR_TO
33263: IFFALSE 33351
// begin k := j + d ;
33265: LD_ADDR_VAR 0 8
33269: PUSH
33270: LD_VAR 0 7
33274: PUSH
33275: LD_VAR 0 9
33279: PLUS
33280: ST_TO_ADDR
// if k > array then
33281: LD_VAR 0 8
33285: PUSH
33286: LD_VAR 0 1
33290: GREATER
33291: IFFALSE 33301
// k := 1 ;
33293: LD_ADDR_VAR 0 8
33297: PUSH
33298: LD_INT 1
33300: ST_TO_ADDR
// if not k then
33301: LD_VAR 0 8
33305: NOT
33306: IFFALSE 33318
// k := array ;
33308: LD_ADDR_VAR 0 8
33312: PUSH
33313: LD_VAR 0 1
33317: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33318: LD_ADDR_VAR 0 10
33322: PUSH
33323: LD_VAR 0 10
33327: PPUSH
33328: LD_VAR 0 8
33332: PPUSH
33333: LD_VAR 0 1
33337: PUSH
33338: LD_VAR 0 7
33342: ARRAY
33343: PPUSH
33344: CALL_OW 1
33348: ST_TO_ADDR
// end ;
33349: GO 33262
33351: POP
33352: POP
// array := tmp ;
33353: LD_ADDR_VAR 0 1
33357: PUSH
33358: LD_VAR 0 10
33362: ST_TO_ADDR
// end ;
33363: GO 33244
33365: POP
33366: POP
// result := array ;
33367: LD_ADDR_VAR 0 5
33371: PUSH
33372: LD_VAR 0 1
33376: ST_TO_ADDR
// end ;
33377: LD_VAR 0 5
33381: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33382: LD_INT 0
33384: PPUSH
33385: PPUSH
// result := 0 ;
33386: LD_ADDR_VAR 0 3
33390: PUSH
33391: LD_INT 0
33393: ST_TO_ADDR
// if not array or not value in array then
33394: LD_VAR 0 1
33398: NOT
33399: PUSH
33400: LD_VAR 0 2
33404: PUSH
33405: LD_VAR 0 1
33409: IN
33410: NOT
33411: OR
33412: IFFALSE 33416
// exit ;
33414: GO 33470
// for i = 1 to array do
33416: LD_ADDR_VAR 0 4
33420: PUSH
33421: DOUBLE
33422: LD_INT 1
33424: DEC
33425: ST_TO_ADDR
33426: LD_VAR 0 1
33430: PUSH
33431: FOR_TO
33432: IFFALSE 33468
// if value = array [ i ] then
33434: LD_VAR 0 2
33438: PUSH
33439: LD_VAR 0 1
33443: PUSH
33444: LD_VAR 0 4
33448: ARRAY
33449: EQUAL
33450: IFFALSE 33466
// begin result := i ;
33452: LD_ADDR_VAR 0 3
33456: PUSH
33457: LD_VAR 0 4
33461: ST_TO_ADDR
// exit ;
33462: POP
33463: POP
33464: GO 33470
// end ;
33466: GO 33431
33468: POP
33469: POP
// end ;
33470: LD_VAR 0 3
33474: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33475: LD_INT 0
33477: PPUSH
// vc_chassis := chassis ;
33478: LD_ADDR_OWVAR 37
33482: PUSH
33483: LD_VAR 0 1
33487: ST_TO_ADDR
// vc_engine := engine ;
33488: LD_ADDR_OWVAR 39
33492: PUSH
33493: LD_VAR 0 2
33497: ST_TO_ADDR
// vc_control := control ;
33498: LD_ADDR_OWVAR 38
33502: PUSH
33503: LD_VAR 0 3
33507: ST_TO_ADDR
// vc_weapon := weapon ;
33508: LD_ADDR_OWVAR 40
33512: PUSH
33513: LD_VAR 0 4
33517: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33518: LD_ADDR_OWVAR 41
33522: PUSH
33523: LD_VAR 0 5
33527: ST_TO_ADDR
// end ;
33528: LD_VAR 0 6
33532: RET
// export function WantPlant ( unit ) ; var task ; begin
33533: LD_INT 0
33535: PPUSH
33536: PPUSH
// result := false ;
33537: LD_ADDR_VAR 0 2
33541: PUSH
33542: LD_INT 0
33544: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33545: LD_ADDR_VAR 0 3
33549: PUSH
33550: LD_VAR 0 1
33554: PPUSH
33555: CALL_OW 437
33559: ST_TO_ADDR
// if task then
33560: LD_VAR 0 3
33564: IFFALSE 33592
// if task [ 1 ] [ 1 ] = p then
33566: LD_VAR 0 3
33570: PUSH
33571: LD_INT 1
33573: ARRAY
33574: PUSH
33575: LD_INT 1
33577: ARRAY
33578: PUSH
33579: LD_STRING p
33581: EQUAL
33582: IFFALSE 33592
// result := true ;
33584: LD_ADDR_VAR 0 2
33588: PUSH
33589: LD_INT 1
33591: ST_TO_ADDR
// end ;
33592: LD_VAR 0 2
33596: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33597: LD_INT 0
33599: PPUSH
33600: PPUSH
33601: PPUSH
33602: PPUSH
// if pos < 1 then
33603: LD_VAR 0 2
33607: PUSH
33608: LD_INT 1
33610: LESS
33611: IFFALSE 33615
// exit ;
33613: GO 33918
// if pos = 1 then
33615: LD_VAR 0 2
33619: PUSH
33620: LD_INT 1
33622: EQUAL
33623: IFFALSE 33656
// result := Replace ( arr , pos [ 1 ] , value ) else
33625: LD_ADDR_VAR 0 4
33629: PUSH
33630: LD_VAR 0 1
33634: PPUSH
33635: LD_VAR 0 2
33639: PUSH
33640: LD_INT 1
33642: ARRAY
33643: PPUSH
33644: LD_VAR 0 3
33648: PPUSH
33649: CALL_OW 1
33653: ST_TO_ADDR
33654: GO 33918
// begin tmp := arr ;
33656: LD_ADDR_VAR 0 6
33660: PUSH
33661: LD_VAR 0 1
33665: ST_TO_ADDR
// s_arr := [ tmp ] ;
33666: LD_ADDR_VAR 0 7
33670: PUSH
33671: LD_VAR 0 6
33675: PUSH
33676: EMPTY
33677: LIST
33678: ST_TO_ADDR
// for i = 1 to pos - 1 do
33679: LD_ADDR_VAR 0 5
33683: PUSH
33684: DOUBLE
33685: LD_INT 1
33687: DEC
33688: ST_TO_ADDR
33689: LD_VAR 0 2
33693: PUSH
33694: LD_INT 1
33696: MINUS
33697: PUSH
33698: FOR_TO
33699: IFFALSE 33744
// begin tmp := tmp [ pos [ i ] ] ;
33701: LD_ADDR_VAR 0 6
33705: PUSH
33706: LD_VAR 0 6
33710: PUSH
33711: LD_VAR 0 2
33715: PUSH
33716: LD_VAR 0 5
33720: ARRAY
33721: ARRAY
33722: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33723: LD_ADDR_VAR 0 7
33727: PUSH
33728: LD_VAR 0 7
33732: PUSH
33733: LD_VAR 0 6
33737: PUSH
33738: EMPTY
33739: LIST
33740: ADD
33741: ST_TO_ADDR
// end ;
33742: GO 33698
33744: POP
33745: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33746: LD_ADDR_VAR 0 6
33750: PUSH
33751: LD_VAR 0 6
33755: PPUSH
33756: LD_VAR 0 2
33760: PUSH
33761: LD_VAR 0 2
33765: ARRAY
33766: PPUSH
33767: LD_VAR 0 3
33771: PPUSH
33772: CALL_OW 1
33776: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33777: LD_ADDR_VAR 0 7
33781: PUSH
33782: LD_VAR 0 7
33786: PPUSH
33787: LD_VAR 0 7
33791: PPUSH
33792: LD_VAR 0 6
33796: PPUSH
33797: CALL_OW 1
33801: ST_TO_ADDR
// for i = s_arr downto 2 do
33802: LD_ADDR_VAR 0 5
33806: PUSH
33807: DOUBLE
33808: LD_VAR 0 7
33812: INC
33813: ST_TO_ADDR
33814: LD_INT 2
33816: PUSH
33817: FOR_DOWNTO
33818: IFFALSE 33902
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33820: LD_ADDR_VAR 0 6
33824: PUSH
33825: LD_VAR 0 7
33829: PUSH
33830: LD_VAR 0 5
33834: PUSH
33835: LD_INT 1
33837: MINUS
33838: ARRAY
33839: PPUSH
33840: LD_VAR 0 2
33844: PUSH
33845: LD_VAR 0 5
33849: PUSH
33850: LD_INT 1
33852: MINUS
33853: ARRAY
33854: PPUSH
33855: LD_VAR 0 7
33859: PUSH
33860: LD_VAR 0 5
33864: ARRAY
33865: PPUSH
33866: CALL_OW 1
33870: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33871: LD_ADDR_VAR 0 7
33875: PUSH
33876: LD_VAR 0 7
33880: PPUSH
33881: LD_VAR 0 5
33885: PUSH
33886: LD_INT 1
33888: MINUS
33889: PPUSH
33890: LD_VAR 0 6
33894: PPUSH
33895: CALL_OW 1
33899: ST_TO_ADDR
// end ;
33900: GO 33817
33902: POP
33903: POP
// result := s_arr [ 1 ] ;
33904: LD_ADDR_VAR 0 4
33908: PUSH
33909: LD_VAR 0 7
33913: PUSH
33914: LD_INT 1
33916: ARRAY
33917: ST_TO_ADDR
// end ; end ;
33918: LD_VAR 0 4
33922: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33923: LD_INT 0
33925: PPUSH
33926: PPUSH
// if not list then
33927: LD_VAR 0 1
33931: NOT
33932: IFFALSE 33936
// exit ;
33934: GO 34027
// i := list [ pos1 ] ;
33936: LD_ADDR_VAR 0 5
33940: PUSH
33941: LD_VAR 0 1
33945: PUSH
33946: LD_VAR 0 2
33950: ARRAY
33951: ST_TO_ADDR
// if not i then
33952: LD_VAR 0 5
33956: NOT
33957: IFFALSE 33961
// exit ;
33959: GO 34027
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33961: LD_ADDR_VAR 0 1
33965: PUSH
33966: LD_VAR 0 1
33970: PPUSH
33971: LD_VAR 0 2
33975: PPUSH
33976: LD_VAR 0 1
33980: PUSH
33981: LD_VAR 0 3
33985: ARRAY
33986: PPUSH
33987: CALL_OW 1
33991: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33992: LD_ADDR_VAR 0 1
33996: PUSH
33997: LD_VAR 0 1
34001: PPUSH
34002: LD_VAR 0 3
34006: PPUSH
34007: LD_VAR 0 5
34011: PPUSH
34012: CALL_OW 1
34016: ST_TO_ADDR
// result := list ;
34017: LD_ADDR_VAR 0 4
34021: PUSH
34022: LD_VAR 0 1
34026: ST_TO_ADDR
// end ;
34027: LD_VAR 0 4
34031: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34032: LD_INT 0
34034: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34035: LD_ADDR_VAR 0 5
34039: PUSH
34040: LD_VAR 0 1
34044: PPUSH
34045: CALL_OW 250
34049: PPUSH
34050: LD_VAR 0 1
34054: PPUSH
34055: CALL_OW 251
34059: PPUSH
34060: LD_VAR 0 2
34064: PPUSH
34065: LD_VAR 0 3
34069: PPUSH
34070: LD_VAR 0 4
34074: PPUSH
34075: CALL 34085 0 5
34079: ST_TO_ADDR
// end ;
34080: LD_VAR 0 5
34084: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34085: LD_INT 0
34087: PPUSH
34088: PPUSH
34089: PPUSH
34090: PPUSH
// if not list then
34091: LD_VAR 0 3
34095: NOT
34096: IFFALSE 34100
// exit ;
34098: GO 34488
// result := [ ] ;
34100: LD_ADDR_VAR 0 6
34104: PUSH
34105: EMPTY
34106: ST_TO_ADDR
// for i in list do
34107: LD_ADDR_VAR 0 7
34111: PUSH
34112: LD_VAR 0 3
34116: PUSH
34117: FOR_IN
34118: IFFALSE 34320
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34120: LD_ADDR_VAR 0 9
34124: PUSH
34125: LD_VAR 0 7
34129: PPUSH
34130: LD_VAR 0 1
34134: PPUSH
34135: LD_VAR 0 2
34139: PPUSH
34140: CALL_OW 297
34144: ST_TO_ADDR
// if not result then
34145: LD_VAR 0 6
34149: NOT
34150: IFFALSE 34176
// result := [ [ i , tmp ] ] else
34152: LD_ADDR_VAR 0 6
34156: PUSH
34157: LD_VAR 0 7
34161: PUSH
34162: LD_VAR 0 9
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: EMPTY
34172: LIST
34173: ST_TO_ADDR
34174: GO 34318
// begin if result [ result ] [ 2 ] < tmp then
34176: LD_VAR 0 6
34180: PUSH
34181: LD_VAR 0 6
34185: ARRAY
34186: PUSH
34187: LD_INT 2
34189: ARRAY
34190: PUSH
34191: LD_VAR 0 9
34195: LESS
34196: IFFALSE 34238
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34198: LD_ADDR_VAR 0 6
34202: PUSH
34203: LD_VAR 0 6
34207: PPUSH
34208: LD_VAR 0 6
34212: PUSH
34213: LD_INT 1
34215: PLUS
34216: PPUSH
34217: LD_VAR 0 7
34221: PUSH
34222: LD_VAR 0 9
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: PPUSH
34231: CALL_OW 2
34235: ST_TO_ADDR
34236: GO 34318
// for j = 1 to result do
34238: LD_ADDR_VAR 0 8
34242: PUSH
34243: DOUBLE
34244: LD_INT 1
34246: DEC
34247: ST_TO_ADDR
34248: LD_VAR 0 6
34252: PUSH
34253: FOR_TO
34254: IFFALSE 34316
// begin if tmp < result [ j ] [ 2 ] then
34256: LD_VAR 0 9
34260: PUSH
34261: LD_VAR 0 6
34265: PUSH
34266: LD_VAR 0 8
34270: ARRAY
34271: PUSH
34272: LD_INT 2
34274: ARRAY
34275: LESS
34276: IFFALSE 34314
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34278: LD_ADDR_VAR 0 6
34282: PUSH
34283: LD_VAR 0 6
34287: PPUSH
34288: LD_VAR 0 8
34292: PPUSH
34293: LD_VAR 0 7
34297: PUSH
34298: LD_VAR 0 9
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PPUSH
34307: CALL_OW 2
34311: ST_TO_ADDR
// break ;
34312: GO 34316
// end ; end ;
34314: GO 34253
34316: POP
34317: POP
// end ; end ;
34318: GO 34117
34320: POP
34321: POP
// if result and not asc then
34322: LD_VAR 0 6
34326: PUSH
34327: LD_VAR 0 4
34331: NOT
34332: AND
34333: IFFALSE 34408
// begin tmp := result ;
34335: LD_ADDR_VAR 0 9
34339: PUSH
34340: LD_VAR 0 6
34344: ST_TO_ADDR
// for i = tmp downto 1 do
34345: LD_ADDR_VAR 0 7
34349: PUSH
34350: DOUBLE
34351: LD_VAR 0 9
34355: INC
34356: ST_TO_ADDR
34357: LD_INT 1
34359: PUSH
34360: FOR_DOWNTO
34361: IFFALSE 34406
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34363: LD_ADDR_VAR 0 6
34367: PUSH
34368: LD_VAR 0 6
34372: PPUSH
34373: LD_VAR 0 9
34377: PUSH
34378: LD_VAR 0 7
34382: MINUS
34383: PUSH
34384: LD_INT 1
34386: PLUS
34387: PPUSH
34388: LD_VAR 0 9
34392: PUSH
34393: LD_VAR 0 7
34397: ARRAY
34398: PPUSH
34399: CALL_OW 1
34403: ST_TO_ADDR
34404: GO 34360
34406: POP
34407: POP
// end ; tmp := [ ] ;
34408: LD_ADDR_VAR 0 9
34412: PUSH
34413: EMPTY
34414: ST_TO_ADDR
// if mode then
34415: LD_VAR 0 5
34419: IFFALSE 34488
// begin for i = 1 to result do
34421: LD_ADDR_VAR 0 7
34425: PUSH
34426: DOUBLE
34427: LD_INT 1
34429: DEC
34430: ST_TO_ADDR
34431: LD_VAR 0 6
34435: PUSH
34436: FOR_TO
34437: IFFALSE 34476
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34439: LD_ADDR_VAR 0 9
34443: PUSH
34444: LD_VAR 0 9
34448: PPUSH
34449: LD_VAR 0 7
34453: PPUSH
34454: LD_VAR 0 6
34458: PUSH
34459: LD_VAR 0 7
34463: ARRAY
34464: PUSH
34465: LD_INT 1
34467: ARRAY
34468: PPUSH
34469: CALL_OW 1
34473: ST_TO_ADDR
34474: GO 34436
34476: POP
34477: POP
// result := tmp ;
34478: LD_ADDR_VAR 0 6
34482: PUSH
34483: LD_VAR 0 9
34487: ST_TO_ADDR
// end ; end ;
34488: LD_VAR 0 6
34492: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34493: LD_INT 0
34495: PPUSH
34496: PPUSH
34497: PPUSH
34498: PPUSH
34499: PPUSH
34500: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34501: LD_ADDR_VAR 0 5
34505: PUSH
34506: LD_INT 0
34508: PUSH
34509: LD_INT 0
34511: PUSH
34512: LD_INT 0
34514: PUSH
34515: EMPTY
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: ST_TO_ADDR
// if not x or not y then
34523: LD_VAR 0 2
34527: NOT
34528: PUSH
34529: LD_VAR 0 3
34533: NOT
34534: OR
34535: IFFALSE 34539
// exit ;
34537: GO 36191
// if not range then
34539: LD_VAR 0 4
34543: NOT
34544: IFFALSE 34554
// range := 10 ;
34546: LD_ADDR_VAR 0 4
34550: PUSH
34551: LD_INT 10
34553: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34554: LD_ADDR_VAR 0 8
34558: PUSH
34559: LD_INT 81
34561: PUSH
34562: LD_VAR 0 1
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 92
34573: PUSH
34574: LD_VAR 0 2
34578: PUSH
34579: LD_VAR 0 3
34583: PUSH
34584: LD_VAR 0 4
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: PUSH
34595: LD_INT 3
34597: PUSH
34598: LD_INT 21
34600: PUSH
34601: LD_INT 3
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: LIST
34616: PPUSH
34617: CALL_OW 69
34621: ST_TO_ADDR
// if not tmp then
34622: LD_VAR 0 8
34626: NOT
34627: IFFALSE 34631
// exit ;
34629: GO 36191
// for i in tmp do
34631: LD_ADDR_VAR 0 6
34635: PUSH
34636: LD_VAR 0 8
34640: PUSH
34641: FOR_IN
34642: IFFALSE 36166
// begin points := [ 0 , 0 , 0 ] ;
34644: LD_ADDR_VAR 0 9
34648: PUSH
34649: LD_INT 0
34651: PUSH
34652: LD_INT 0
34654: PUSH
34655: LD_INT 0
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: LIST
34662: ST_TO_ADDR
// bpoints := 1 ;
34663: LD_ADDR_VAR 0 10
34667: PUSH
34668: LD_INT 1
34670: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34671: LD_VAR 0 6
34675: PPUSH
34676: CALL_OW 247
34680: PUSH
34681: LD_INT 1
34683: DOUBLE
34684: EQUAL
34685: IFTRUE 34689
34687: GO 35267
34689: POP
// begin if GetClass ( i ) = 1 then
34690: LD_VAR 0 6
34694: PPUSH
34695: CALL_OW 257
34699: PUSH
34700: LD_INT 1
34702: EQUAL
34703: IFFALSE 34724
// points := [ 10 , 5 , 3 ] ;
34705: LD_ADDR_VAR 0 9
34709: PUSH
34710: LD_INT 10
34712: PUSH
34713: LD_INT 5
34715: PUSH
34716: LD_INT 3
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: LIST
34723: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34724: LD_VAR 0 6
34728: PPUSH
34729: CALL_OW 257
34733: PUSH
34734: LD_INT 2
34736: PUSH
34737: LD_INT 3
34739: PUSH
34740: LD_INT 4
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: LIST
34747: IN
34748: IFFALSE 34769
// points := [ 3 , 2 , 1 ] ;
34750: LD_ADDR_VAR 0 9
34754: PUSH
34755: LD_INT 3
34757: PUSH
34758: LD_INT 2
34760: PUSH
34761: LD_INT 1
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: LIST
34768: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34769: LD_VAR 0 6
34773: PPUSH
34774: CALL_OW 257
34778: PUSH
34779: LD_INT 5
34781: EQUAL
34782: IFFALSE 34803
// points := [ 130 , 5 , 2 ] ;
34784: LD_ADDR_VAR 0 9
34788: PUSH
34789: LD_INT 130
34791: PUSH
34792: LD_INT 5
34794: PUSH
34795: LD_INT 2
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: LIST
34802: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34803: LD_VAR 0 6
34807: PPUSH
34808: CALL_OW 257
34812: PUSH
34813: LD_INT 8
34815: EQUAL
34816: IFFALSE 34837
// points := [ 35 , 35 , 30 ] ;
34818: LD_ADDR_VAR 0 9
34822: PUSH
34823: LD_INT 35
34825: PUSH
34826: LD_INT 35
34828: PUSH
34829: LD_INT 30
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: LIST
34836: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34837: LD_VAR 0 6
34841: PPUSH
34842: CALL_OW 257
34846: PUSH
34847: LD_INT 9
34849: EQUAL
34850: IFFALSE 34871
// points := [ 20 , 55 , 40 ] ;
34852: LD_ADDR_VAR 0 9
34856: PUSH
34857: LD_INT 20
34859: PUSH
34860: LD_INT 55
34862: PUSH
34863: LD_INT 40
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: LIST
34870: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34871: LD_VAR 0 6
34875: PPUSH
34876: CALL_OW 257
34880: PUSH
34881: LD_INT 12
34883: PUSH
34884: LD_INT 16
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: IN
34891: IFFALSE 34912
// points := [ 5 , 3 , 2 ] ;
34893: LD_ADDR_VAR 0 9
34897: PUSH
34898: LD_INT 5
34900: PUSH
34901: LD_INT 3
34903: PUSH
34904: LD_INT 2
34906: PUSH
34907: EMPTY
34908: LIST
34909: LIST
34910: LIST
34911: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34912: LD_VAR 0 6
34916: PPUSH
34917: CALL_OW 257
34921: PUSH
34922: LD_INT 17
34924: EQUAL
34925: IFFALSE 34946
// points := [ 100 , 50 , 75 ] ;
34927: LD_ADDR_VAR 0 9
34931: PUSH
34932: LD_INT 100
34934: PUSH
34935: LD_INT 50
34937: PUSH
34938: LD_INT 75
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: LIST
34945: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34946: LD_VAR 0 6
34950: PPUSH
34951: CALL_OW 257
34955: PUSH
34956: LD_INT 15
34958: EQUAL
34959: IFFALSE 34980
// points := [ 10 , 5 , 3 ] ;
34961: LD_ADDR_VAR 0 9
34965: PUSH
34966: LD_INT 10
34968: PUSH
34969: LD_INT 5
34971: PUSH
34972: LD_INT 3
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: LIST
34979: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34980: LD_VAR 0 6
34984: PPUSH
34985: CALL_OW 257
34989: PUSH
34990: LD_INT 14
34992: EQUAL
34993: IFFALSE 35014
// points := [ 10 , 0 , 0 ] ;
34995: LD_ADDR_VAR 0 9
34999: PUSH
35000: LD_INT 10
35002: PUSH
35003: LD_INT 0
35005: PUSH
35006: LD_INT 0
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: LIST
35013: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35014: LD_VAR 0 6
35018: PPUSH
35019: CALL_OW 257
35023: PUSH
35024: LD_INT 11
35026: EQUAL
35027: IFFALSE 35048
// points := [ 30 , 10 , 5 ] ;
35029: LD_ADDR_VAR 0 9
35033: PUSH
35034: LD_INT 30
35036: PUSH
35037: LD_INT 10
35039: PUSH
35040: LD_INT 5
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: LIST
35047: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35048: LD_VAR 0 1
35052: PPUSH
35053: LD_INT 5
35055: PPUSH
35056: CALL_OW 321
35060: PUSH
35061: LD_INT 2
35063: EQUAL
35064: IFFALSE 35081
// bpoints := bpoints * 1.8 ;
35066: LD_ADDR_VAR 0 10
35070: PUSH
35071: LD_VAR 0 10
35075: PUSH
35076: LD_REAL  1.80000000000000E+0000
35079: MUL
35080: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35081: LD_VAR 0 6
35085: PPUSH
35086: CALL_OW 257
35090: PUSH
35091: LD_INT 1
35093: PUSH
35094: LD_INT 2
35096: PUSH
35097: LD_INT 3
35099: PUSH
35100: LD_INT 4
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: IN
35109: PUSH
35110: LD_VAR 0 1
35114: PPUSH
35115: LD_INT 51
35117: PPUSH
35118: CALL_OW 321
35122: PUSH
35123: LD_INT 2
35125: EQUAL
35126: AND
35127: IFFALSE 35144
// bpoints := bpoints * 1.2 ;
35129: LD_ADDR_VAR 0 10
35133: PUSH
35134: LD_VAR 0 10
35138: PUSH
35139: LD_REAL  1.20000000000000E+0000
35142: MUL
35143: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35144: LD_VAR 0 6
35148: PPUSH
35149: CALL_OW 257
35153: PUSH
35154: LD_INT 5
35156: PUSH
35157: LD_INT 7
35159: PUSH
35160: LD_INT 9
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: LIST
35167: IN
35168: PUSH
35169: LD_VAR 0 1
35173: PPUSH
35174: LD_INT 52
35176: PPUSH
35177: CALL_OW 321
35181: PUSH
35182: LD_INT 2
35184: EQUAL
35185: AND
35186: IFFALSE 35203
// bpoints := bpoints * 1.5 ;
35188: LD_ADDR_VAR 0 10
35192: PUSH
35193: LD_VAR 0 10
35197: PUSH
35198: LD_REAL  1.50000000000000E+0000
35201: MUL
35202: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35203: LD_VAR 0 1
35207: PPUSH
35208: LD_INT 66
35210: PPUSH
35211: CALL_OW 321
35215: PUSH
35216: LD_INT 2
35218: EQUAL
35219: IFFALSE 35236
// bpoints := bpoints * 1.1 ;
35221: LD_ADDR_VAR 0 10
35225: PUSH
35226: LD_VAR 0 10
35230: PUSH
35231: LD_REAL  1.10000000000000E+0000
35234: MUL
35235: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35236: LD_ADDR_VAR 0 10
35240: PUSH
35241: LD_VAR 0 10
35245: PUSH
35246: LD_VAR 0 6
35250: PPUSH
35251: LD_INT 1
35253: PPUSH
35254: CALL_OW 259
35258: PUSH
35259: LD_REAL  1.15000000000000E+0000
35262: MUL
35263: MUL
35264: ST_TO_ADDR
// end ; unit_vehicle :
35265: GO 36095
35267: LD_INT 2
35269: DOUBLE
35270: EQUAL
35271: IFTRUE 35275
35273: GO 36083
35275: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35276: LD_VAR 0 6
35280: PPUSH
35281: CALL_OW 264
35285: PUSH
35286: LD_INT 2
35288: PUSH
35289: LD_INT 42
35291: PUSH
35292: LD_INT 24
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: LIST
35299: IN
35300: IFFALSE 35321
// points := [ 25 , 5 , 3 ] ;
35302: LD_ADDR_VAR 0 9
35306: PUSH
35307: LD_INT 25
35309: PUSH
35310: LD_INT 5
35312: PUSH
35313: LD_INT 3
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: LIST
35320: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35321: LD_VAR 0 6
35325: PPUSH
35326: CALL_OW 264
35330: PUSH
35331: LD_INT 4
35333: PUSH
35334: LD_INT 43
35336: PUSH
35337: LD_INT 25
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: LIST
35344: IN
35345: IFFALSE 35366
// points := [ 40 , 15 , 5 ] ;
35347: LD_ADDR_VAR 0 9
35351: PUSH
35352: LD_INT 40
35354: PUSH
35355: LD_INT 15
35357: PUSH
35358: LD_INT 5
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: LIST
35365: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35366: LD_VAR 0 6
35370: PPUSH
35371: CALL_OW 264
35375: PUSH
35376: LD_INT 3
35378: PUSH
35379: LD_INT 23
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: IN
35386: IFFALSE 35407
// points := [ 7 , 25 , 8 ] ;
35388: LD_ADDR_VAR 0 9
35392: PUSH
35393: LD_INT 7
35395: PUSH
35396: LD_INT 25
35398: PUSH
35399: LD_INT 8
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: LIST
35406: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35407: LD_VAR 0 6
35411: PPUSH
35412: CALL_OW 264
35416: PUSH
35417: LD_INT 5
35419: PUSH
35420: LD_INT 27
35422: PUSH
35423: LD_INT 44
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: LIST
35430: IN
35431: IFFALSE 35452
// points := [ 14 , 50 , 16 ] ;
35433: LD_ADDR_VAR 0 9
35437: PUSH
35438: LD_INT 14
35440: PUSH
35441: LD_INT 50
35443: PUSH
35444: LD_INT 16
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: LIST
35451: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35452: LD_VAR 0 6
35456: PPUSH
35457: CALL_OW 264
35461: PUSH
35462: LD_INT 6
35464: PUSH
35465: LD_INT 46
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: IN
35472: IFFALSE 35493
// points := [ 32 , 120 , 70 ] ;
35474: LD_ADDR_VAR 0 9
35478: PUSH
35479: LD_INT 32
35481: PUSH
35482: LD_INT 120
35484: PUSH
35485: LD_INT 70
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: LIST
35492: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35493: LD_VAR 0 6
35497: PPUSH
35498: CALL_OW 264
35502: PUSH
35503: LD_INT 7
35505: PUSH
35506: LD_INT 28
35508: PUSH
35509: LD_INT 45
35511: PUSH
35512: LD_EXP 30
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: LIST
35521: LIST
35522: IN
35523: IFFALSE 35544
// points := [ 35 , 20 , 45 ] ;
35525: LD_ADDR_VAR 0 9
35529: PUSH
35530: LD_INT 35
35532: PUSH
35533: LD_INT 20
35535: PUSH
35536: LD_INT 45
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: LIST
35543: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35544: LD_VAR 0 6
35548: PPUSH
35549: CALL_OW 264
35553: PUSH
35554: LD_INT 47
35556: PUSH
35557: EMPTY
35558: LIST
35559: IN
35560: IFFALSE 35581
// points := [ 67 , 45 , 75 ] ;
35562: LD_ADDR_VAR 0 9
35566: PUSH
35567: LD_INT 67
35569: PUSH
35570: LD_INT 45
35572: PUSH
35573: LD_INT 75
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: LIST
35580: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35581: LD_VAR 0 6
35585: PPUSH
35586: CALL_OW 264
35590: PUSH
35591: LD_INT 26
35593: PUSH
35594: EMPTY
35595: LIST
35596: IN
35597: IFFALSE 35618
// points := [ 120 , 30 , 80 ] ;
35599: LD_ADDR_VAR 0 9
35603: PUSH
35604: LD_INT 120
35606: PUSH
35607: LD_INT 30
35609: PUSH
35610: LD_INT 80
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: LIST
35617: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35618: LD_VAR 0 6
35622: PPUSH
35623: CALL_OW 264
35627: PUSH
35628: LD_INT 22
35630: PUSH
35631: EMPTY
35632: LIST
35633: IN
35634: IFFALSE 35655
// points := [ 40 , 1 , 1 ] ;
35636: LD_ADDR_VAR 0 9
35640: PUSH
35641: LD_INT 40
35643: PUSH
35644: LD_INT 1
35646: PUSH
35647: LD_INT 1
35649: PUSH
35650: EMPTY
35651: LIST
35652: LIST
35653: LIST
35654: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35655: LD_VAR 0 6
35659: PPUSH
35660: CALL_OW 264
35664: PUSH
35665: LD_INT 29
35667: PUSH
35668: EMPTY
35669: LIST
35670: IN
35671: IFFALSE 35692
// points := [ 70 , 200 , 400 ] ;
35673: LD_ADDR_VAR 0 9
35677: PUSH
35678: LD_INT 70
35680: PUSH
35681: LD_INT 200
35683: PUSH
35684: LD_INT 400
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: LIST
35691: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35692: LD_VAR 0 6
35696: PPUSH
35697: CALL_OW 264
35701: PUSH
35702: LD_INT 14
35704: PUSH
35705: LD_INT 53
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: IN
35712: IFFALSE 35733
// points := [ 40 , 10 , 20 ] ;
35714: LD_ADDR_VAR 0 9
35718: PUSH
35719: LD_INT 40
35721: PUSH
35722: LD_INT 10
35724: PUSH
35725: LD_INT 20
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: LIST
35732: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35733: LD_VAR 0 6
35737: PPUSH
35738: CALL_OW 264
35742: PUSH
35743: LD_INT 9
35745: PUSH
35746: EMPTY
35747: LIST
35748: IN
35749: IFFALSE 35770
// points := [ 5 , 70 , 20 ] ;
35751: LD_ADDR_VAR 0 9
35755: PUSH
35756: LD_INT 5
35758: PUSH
35759: LD_INT 70
35761: PUSH
35762: LD_INT 20
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: LIST
35769: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35770: LD_VAR 0 6
35774: PPUSH
35775: CALL_OW 264
35779: PUSH
35780: LD_INT 10
35782: PUSH
35783: EMPTY
35784: LIST
35785: IN
35786: IFFALSE 35807
// points := [ 35 , 110 , 70 ] ;
35788: LD_ADDR_VAR 0 9
35792: PUSH
35793: LD_INT 35
35795: PUSH
35796: LD_INT 110
35798: PUSH
35799: LD_INT 70
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: LIST
35806: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35807: LD_VAR 0 6
35811: PPUSH
35812: CALL_OW 265
35816: PUSH
35817: LD_INT 25
35819: EQUAL
35820: IFFALSE 35841
// points := [ 80 , 65 , 100 ] ;
35822: LD_ADDR_VAR 0 9
35826: PUSH
35827: LD_INT 80
35829: PUSH
35830: LD_INT 65
35832: PUSH
35833: LD_INT 100
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: LIST
35840: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35841: LD_VAR 0 6
35845: PPUSH
35846: CALL_OW 263
35850: PUSH
35851: LD_INT 1
35853: EQUAL
35854: IFFALSE 35889
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35856: LD_ADDR_VAR 0 10
35860: PUSH
35861: LD_VAR 0 10
35865: PUSH
35866: LD_VAR 0 6
35870: PPUSH
35871: CALL_OW 311
35875: PPUSH
35876: LD_INT 3
35878: PPUSH
35879: CALL_OW 259
35883: PUSH
35884: LD_INT 4
35886: MUL
35887: MUL
35888: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35889: LD_VAR 0 6
35893: PPUSH
35894: CALL_OW 263
35898: PUSH
35899: LD_INT 2
35901: EQUAL
35902: IFFALSE 35953
// begin j := IsControledBy ( i ) ;
35904: LD_ADDR_VAR 0 7
35908: PUSH
35909: LD_VAR 0 6
35913: PPUSH
35914: CALL_OW 312
35918: ST_TO_ADDR
// if j then
35919: LD_VAR 0 7
35923: IFFALSE 35953
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35925: LD_ADDR_VAR 0 10
35929: PUSH
35930: LD_VAR 0 10
35934: PUSH
35935: LD_VAR 0 7
35939: PPUSH
35940: LD_INT 3
35942: PPUSH
35943: CALL_OW 259
35947: PUSH
35948: LD_INT 3
35950: MUL
35951: MUL
35952: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35953: LD_VAR 0 6
35957: PPUSH
35958: CALL_OW 264
35962: PUSH
35963: LD_INT 5
35965: PUSH
35966: LD_INT 6
35968: PUSH
35969: LD_INT 46
35971: PUSH
35972: LD_INT 44
35974: PUSH
35975: LD_INT 47
35977: PUSH
35978: LD_INT 45
35980: PUSH
35981: LD_INT 28
35983: PUSH
35984: LD_INT 7
35986: PUSH
35987: LD_INT 27
35989: PUSH
35990: LD_INT 29
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: LIST
36000: LIST
36001: LIST
36002: LIST
36003: LIST
36004: IN
36005: PUSH
36006: LD_VAR 0 1
36010: PPUSH
36011: LD_INT 52
36013: PPUSH
36014: CALL_OW 321
36018: PUSH
36019: LD_INT 2
36021: EQUAL
36022: AND
36023: IFFALSE 36040
// bpoints := bpoints * 1.2 ;
36025: LD_ADDR_VAR 0 10
36029: PUSH
36030: LD_VAR 0 10
36034: PUSH
36035: LD_REAL  1.20000000000000E+0000
36038: MUL
36039: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36040: LD_VAR 0 6
36044: PPUSH
36045: CALL_OW 264
36049: PUSH
36050: LD_INT 6
36052: PUSH
36053: LD_INT 46
36055: PUSH
36056: LD_INT 47
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: LIST
36063: IN
36064: IFFALSE 36081
// bpoints := bpoints * 1.2 ;
36066: LD_ADDR_VAR 0 10
36070: PUSH
36071: LD_VAR 0 10
36075: PUSH
36076: LD_REAL  1.20000000000000E+0000
36079: MUL
36080: ST_TO_ADDR
// end ; unit_building :
36081: GO 36095
36083: LD_INT 3
36085: DOUBLE
36086: EQUAL
36087: IFTRUE 36091
36089: GO 36094
36091: POP
// ; end ;
36092: GO 36095
36094: POP
// for j = 1 to 3 do
36095: LD_ADDR_VAR 0 7
36099: PUSH
36100: DOUBLE
36101: LD_INT 1
36103: DEC
36104: ST_TO_ADDR
36105: LD_INT 3
36107: PUSH
36108: FOR_TO
36109: IFFALSE 36162
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36111: LD_ADDR_VAR 0 5
36115: PUSH
36116: LD_VAR 0 5
36120: PPUSH
36121: LD_VAR 0 7
36125: PPUSH
36126: LD_VAR 0 5
36130: PUSH
36131: LD_VAR 0 7
36135: ARRAY
36136: PUSH
36137: LD_VAR 0 9
36141: PUSH
36142: LD_VAR 0 7
36146: ARRAY
36147: PUSH
36148: LD_VAR 0 10
36152: MUL
36153: PLUS
36154: PPUSH
36155: CALL_OW 1
36159: ST_TO_ADDR
36160: GO 36108
36162: POP
36163: POP
// end ;
36164: GO 34641
36166: POP
36167: POP
// result := Replace ( result , 4 , tmp ) ;
36168: LD_ADDR_VAR 0 5
36172: PUSH
36173: LD_VAR 0 5
36177: PPUSH
36178: LD_INT 4
36180: PPUSH
36181: LD_VAR 0 8
36185: PPUSH
36186: CALL_OW 1
36190: ST_TO_ADDR
// end ;
36191: LD_VAR 0 5
36195: RET
// export function DangerAtRange ( unit , range ) ; begin
36196: LD_INT 0
36198: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36199: LD_ADDR_VAR 0 3
36203: PUSH
36204: LD_VAR 0 1
36208: PPUSH
36209: CALL_OW 255
36213: PPUSH
36214: LD_VAR 0 1
36218: PPUSH
36219: CALL_OW 250
36223: PPUSH
36224: LD_VAR 0 1
36228: PPUSH
36229: CALL_OW 251
36233: PPUSH
36234: LD_VAR 0 2
36238: PPUSH
36239: CALL 34493 0 4
36243: ST_TO_ADDR
// end ;
36244: LD_VAR 0 3
36248: RET
// export function DangerInArea ( side , area ) ; begin
36249: LD_INT 0
36251: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36252: LD_ADDR_VAR 0 3
36256: PUSH
36257: LD_VAR 0 2
36261: PPUSH
36262: LD_INT 81
36264: PUSH
36265: LD_VAR 0 1
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PPUSH
36274: CALL_OW 70
36278: ST_TO_ADDR
// end ;
36279: LD_VAR 0 3
36283: RET
// export function IsExtension ( b ) ; begin
36284: LD_INT 0
36286: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36287: LD_ADDR_VAR 0 2
36291: PUSH
36292: LD_VAR 0 1
36296: PUSH
36297: LD_INT 23
36299: PUSH
36300: LD_INT 20
36302: PUSH
36303: LD_INT 22
36305: PUSH
36306: LD_INT 17
36308: PUSH
36309: LD_INT 24
36311: PUSH
36312: LD_INT 21
36314: PUSH
36315: LD_INT 19
36317: PUSH
36318: LD_INT 16
36320: PUSH
36321: LD_INT 25
36323: PUSH
36324: LD_INT 18
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: LIST
36334: LIST
36335: LIST
36336: LIST
36337: LIST
36338: IN
36339: ST_TO_ADDR
// end ;
36340: LD_VAR 0 2
36344: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36345: LD_INT 0
36347: PPUSH
36348: PPUSH
36349: PPUSH
// result := [ ] ;
36350: LD_ADDR_VAR 0 4
36354: PUSH
36355: EMPTY
36356: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36357: LD_ADDR_VAR 0 5
36361: PUSH
36362: LD_VAR 0 2
36366: PPUSH
36367: LD_INT 21
36369: PUSH
36370: LD_INT 3
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PPUSH
36377: CALL_OW 70
36381: ST_TO_ADDR
// if not tmp then
36382: LD_VAR 0 5
36386: NOT
36387: IFFALSE 36391
// exit ;
36389: GO 36455
// if checkLink then
36391: LD_VAR 0 3
36395: IFFALSE 36445
// begin for i in tmp do
36397: LD_ADDR_VAR 0 6
36401: PUSH
36402: LD_VAR 0 5
36406: PUSH
36407: FOR_IN
36408: IFFALSE 36443
// if GetBase ( i ) <> base then
36410: LD_VAR 0 6
36414: PPUSH
36415: CALL_OW 274
36419: PUSH
36420: LD_VAR 0 1
36424: NONEQUAL
36425: IFFALSE 36441
// ComLinkToBase ( base , i ) ;
36427: LD_VAR 0 1
36431: PPUSH
36432: LD_VAR 0 6
36436: PPUSH
36437: CALL_OW 169
36441: GO 36407
36443: POP
36444: POP
// end ; result := tmp ;
36445: LD_ADDR_VAR 0 4
36449: PUSH
36450: LD_VAR 0 5
36454: ST_TO_ADDR
// end ;
36455: LD_VAR 0 4
36459: RET
// export function ComComplete ( units , b ) ; var i ; begin
36460: LD_INT 0
36462: PPUSH
36463: PPUSH
// if not units then
36464: LD_VAR 0 1
36468: NOT
36469: IFFALSE 36473
// exit ;
36471: GO 36563
// for i in units do
36473: LD_ADDR_VAR 0 4
36477: PUSH
36478: LD_VAR 0 1
36482: PUSH
36483: FOR_IN
36484: IFFALSE 36561
// if BuildingStatus ( b ) = bs_build then
36486: LD_VAR 0 2
36490: PPUSH
36491: CALL_OW 461
36495: PUSH
36496: LD_INT 1
36498: EQUAL
36499: IFFALSE 36559
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36501: LD_VAR 0 4
36505: PPUSH
36506: LD_STRING h
36508: PUSH
36509: LD_VAR 0 2
36513: PPUSH
36514: CALL_OW 250
36518: PUSH
36519: LD_VAR 0 2
36523: PPUSH
36524: CALL_OW 251
36528: PUSH
36529: LD_VAR 0 2
36533: PUSH
36534: LD_INT 0
36536: PUSH
36537: LD_INT 0
36539: PUSH
36540: LD_INT 0
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: PUSH
36552: EMPTY
36553: LIST
36554: PPUSH
36555: CALL_OW 446
36559: GO 36483
36561: POP
36562: POP
// end ;
36563: LD_VAR 0 3
36567: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36568: LD_INT 0
36570: PPUSH
36571: PPUSH
36572: PPUSH
36573: PPUSH
36574: PPUSH
36575: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36576: LD_VAR 0 1
36580: NOT
36581: PUSH
36582: LD_VAR 0 1
36586: PPUSH
36587: CALL_OW 263
36591: PUSH
36592: LD_INT 2
36594: NONEQUAL
36595: OR
36596: IFFALSE 36600
// exit ;
36598: GO 36916
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36600: LD_ADDR_VAR 0 6
36604: PUSH
36605: LD_INT 22
36607: PUSH
36608: LD_VAR 0 1
36612: PPUSH
36613: CALL_OW 255
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: LD_INT 2
36624: PUSH
36625: LD_INT 30
36627: PUSH
36628: LD_INT 36
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: LD_INT 34
36637: PUSH
36638: LD_INT 31
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: LIST
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: PPUSH
36654: CALL_OW 69
36658: ST_TO_ADDR
// if not tmp then
36659: LD_VAR 0 6
36663: NOT
36664: IFFALSE 36668
// exit ;
36666: GO 36916
// result := [ ] ;
36668: LD_ADDR_VAR 0 2
36672: PUSH
36673: EMPTY
36674: ST_TO_ADDR
// for i in tmp do
36675: LD_ADDR_VAR 0 3
36679: PUSH
36680: LD_VAR 0 6
36684: PUSH
36685: FOR_IN
36686: IFFALSE 36757
// begin t := UnitsInside ( i ) ;
36688: LD_ADDR_VAR 0 4
36692: PUSH
36693: LD_VAR 0 3
36697: PPUSH
36698: CALL_OW 313
36702: ST_TO_ADDR
// if t then
36703: LD_VAR 0 4
36707: IFFALSE 36755
// for j in t do
36709: LD_ADDR_VAR 0 7
36713: PUSH
36714: LD_VAR 0 4
36718: PUSH
36719: FOR_IN
36720: IFFALSE 36753
// result := Replace ( result , result + 1 , j ) ;
36722: LD_ADDR_VAR 0 2
36726: PUSH
36727: LD_VAR 0 2
36731: PPUSH
36732: LD_VAR 0 2
36736: PUSH
36737: LD_INT 1
36739: PLUS
36740: PPUSH
36741: LD_VAR 0 7
36745: PPUSH
36746: CALL_OW 1
36750: ST_TO_ADDR
36751: GO 36719
36753: POP
36754: POP
// end ;
36755: GO 36685
36757: POP
36758: POP
// if not result then
36759: LD_VAR 0 2
36763: NOT
36764: IFFALSE 36768
// exit ;
36766: GO 36916
// mech := result [ 1 ] ;
36768: LD_ADDR_VAR 0 5
36772: PUSH
36773: LD_VAR 0 2
36777: PUSH
36778: LD_INT 1
36780: ARRAY
36781: ST_TO_ADDR
// if result > 1 then
36782: LD_VAR 0 2
36786: PUSH
36787: LD_INT 1
36789: GREATER
36790: IFFALSE 36902
// begin for i = 2 to result do
36792: LD_ADDR_VAR 0 3
36796: PUSH
36797: DOUBLE
36798: LD_INT 2
36800: DEC
36801: ST_TO_ADDR
36802: LD_VAR 0 2
36806: PUSH
36807: FOR_TO
36808: IFFALSE 36900
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36810: LD_ADDR_VAR 0 4
36814: PUSH
36815: LD_VAR 0 2
36819: PUSH
36820: LD_VAR 0 3
36824: ARRAY
36825: PPUSH
36826: LD_INT 3
36828: PPUSH
36829: CALL_OW 259
36833: PUSH
36834: LD_VAR 0 2
36838: PUSH
36839: LD_VAR 0 3
36843: ARRAY
36844: PPUSH
36845: CALL_OW 432
36849: MINUS
36850: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36851: LD_VAR 0 4
36855: PUSH
36856: LD_VAR 0 5
36860: PPUSH
36861: LD_INT 3
36863: PPUSH
36864: CALL_OW 259
36868: PUSH
36869: LD_VAR 0 5
36873: PPUSH
36874: CALL_OW 432
36878: MINUS
36879: GREATEREQUAL
36880: IFFALSE 36898
// mech := result [ i ] ;
36882: LD_ADDR_VAR 0 5
36886: PUSH
36887: LD_VAR 0 2
36891: PUSH
36892: LD_VAR 0 3
36896: ARRAY
36897: ST_TO_ADDR
// end ;
36898: GO 36807
36900: POP
36901: POP
// end ; ComLinkTo ( vehicle , mech ) ;
36902: LD_VAR 0 1
36906: PPUSH
36907: LD_VAR 0 5
36911: PPUSH
36912: CALL_OW 135
// end ;
36916: LD_VAR 0 2
36920: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36921: LD_INT 0
36923: PPUSH
36924: PPUSH
36925: PPUSH
36926: PPUSH
36927: PPUSH
36928: PPUSH
36929: PPUSH
36930: PPUSH
36931: PPUSH
36932: PPUSH
36933: PPUSH
36934: PPUSH
36935: PPUSH
// result := [ ] ;
36936: LD_ADDR_VAR 0 7
36940: PUSH
36941: EMPTY
36942: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36943: LD_VAR 0 1
36947: PPUSH
36948: CALL_OW 266
36952: PUSH
36953: LD_INT 0
36955: PUSH
36956: LD_INT 1
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: IN
36963: NOT
36964: IFFALSE 36968
// exit ;
36966: GO 38602
// if name then
36968: LD_VAR 0 3
36972: IFFALSE 36988
// SetBName ( base_dep , name ) ;
36974: LD_VAR 0 1
36978: PPUSH
36979: LD_VAR 0 3
36983: PPUSH
36984: CALL_OW 500
// base := GetBase ( base_dep ) ;
36988: LD_ADDR_VAR 0 15
36992: PUSH
36993: LD_VAR 0 1
36997: PPUSH
36998: CALL_OW 274
37002: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37003: LD_ADDR_VAR 0 16
37007: PUSH
37008: LD_VAR 0 1
37012: PPUSH
37013: CALL_OW 255
37017: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37018: LD_ADDR_VAR 0 17
37022: PUSH
37023: LD_VAR 0 1
37027: PPUSH
37028: CALL_OW 248
37032: ST_TO_ADDR
// if sources then
37033: LD_VAR 0 5
37037: IFFALSE 37084
// for i = 1 to 3 do
37039: LD_ADDR_VAR 0 8
37043: PUSH
37044: DOUBLE
37045: LD_INT 1
37047: DEC
37048: ST_TO_ADDR
37049: LD_INT 3
37051: PUSH
37052: FOR_TO
37053: IFFALSE 37082
// AddResourceType ( base , i , sources [ i ] ) ;
37055: LD_VAR 0 15
37059: PPUSH
37060: LD_VAR 0 8
37064: PPUSH
37065: LD_VAR 0 5
37069: PUSH
37070: LD_VAR 0 8
37074: ARRAY
37075: PPUSH
37076: CALL_OW 276
37080: GO 37052
37082: POP
37083: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37084: LD_ADDR_VAR 0 18
37088: PUSH
37089: LD_VAR 0 15
37093: PPUSH
37094: LD_VAR 0 2
37098: PPUSH
37099: LD_INT 1
37101: PPUSH
37102: CALL 36345 0 3
37106: ST_TO_ADDR
// InitHc ;
37107: CALL_OW 19
// InitUc ;
37111: CALL_OW 18
// uc_side := side ;
37115: LD_ADDR_OWVAR 20
37119: PUSH
37120: LD_VAR 0 16
37124: ST_TO_ADDR
// uc_nation := nation ;
37125: LD_ADDR_OWVAR 21
37129: PUSH
37130: LD_VAR 0 17
37134: ST_TO_ADDR
// if buildings then
37135: LD_VAR 0 18
37139: IFFALSE 38461
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37141: LD_ADDR_VAR 0 19
37145: PUSH
37146: LD_VAR 0 18
37150: PPUSH
37151: LD_INT 2
37153: PUSH
37154: LD_INT 30
37156: PUSH
37157: LD_INT 29
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 30
37166: PUSH
37167: LD_INT 30
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: LIST
37178: PPUSH
37179: CALL_OW 72
37183: ST_TO_ADDR
// if tmp then
37184: LD_VAR 0 19
37188: IFFALSE 37236
// for i in tmp do
37190: LD_ADDR_VAR 0 8
37194: PUSH
37195: LD_VAR 0 19
37199: PUSH
37200: FOR_IN
37201: IFFALSE 37234
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37203: LD_VAR 0 8
37207: PPUSH
37208: CALL_OW 250
37212: PPUSH
37213: LD_VAR 0 8
37217: PPUSH
37218: CALL_OW 251
37222: PPUSH
37223: LD_VAR 0 16
37227: PPUSH
37228: CALL_OW 441
37232: GO 37200
37234: POP
37235: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37236: LD_VAR 0 18
37240: PPUSH
37241: LD_INT 2
37243: PUSH
37244: LD_INT 30
37246: PUSH
37247: LD_INT 32
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 30
37256: PUSH
37257: LD_INT 33
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: LIST
37268: PPUSH
37269: CALL_OW 72
37273: IFFALSE 37361
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37275: LD_ADDR_VAR 0 8
37279: PUSH
37280: LD_VAR 0 18
37284: PPUSH
37285: LD_INT 2
37287: PUSH
37288: LD_INT 30
37290: PUSH
37291: LD_INT 32
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: LD_INT 30
37300: PUSH
37301: LD_INT 33
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: LIST
37312: PPUSH
37313: CALL_OW 72
37317: PUSH
37318: FOR_IN
37319: IFFALSE 37359
// begin if not GetBWeapon ( i ) then
37321: LD_VAR 0 8
37325: PPUSH
37326: CALL_OW 269
37330: NOT
37331: IFFALSE 37357
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37333: LD_VAR 0 8
37337: PPUSH
37338: LD_VAR 0 8
37342: PPUSH
37343: LD_VAR 0 2
37347: PPUSH
37348: CALL 38607 0 2
37352: PPUSH
37353: CALL_OW 431
// end ;
37357: GO 37318
37359: POP
37360: POP
// end ; for i = 1 to personel do
37361: LD_ADDR_VAR 0 8
37365: PUSH
37366: DOUBLE
37367: LD_INT 1
37369: DEC
37370: ST_TO_ADDR
37371: LD_VAR 0 6
37375: PUSH
37376: FOR_TO
37377: IFFALSE 38441
// begin if i > 4 then
37379: LD_VAR 0 8
37383: PUSH
37384: LD_INT 4
37386: GREATER
37387: IFFALSE 37391
// break ;
37389: GO 38441
// case i of 1 :
37391: LD_VAR 0 8
37395: PUSH
37396: LD_INT 1
37398: DOUBLE
37399: EQUAL
37400: IFTRUE 37404
37402: GO 37484
37404: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37405: LD_ADDR_VAR 0 12
37409: PUSH
37410: LD_VAR 0 18
37414: PPUSH
37415: LD_INT 22
37417: PUSH
37418: LD_VAR 0 16
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 58
37429: PUSH
37430: EMPTY
37431: LIST
37432: PUSH
37433: LD_INT 2
37435: PUSH
37436: LD_INT 30
37438: PUSH
37439: LD_INT 32
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_INT 30
37448: PUSH
37449: LD_INT 4
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PUSH
37456: LD_INT 30
37458: PUSH
37459: LD_INT 5
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: LIST
37476: PPUSH
37477: CALL_OW 72
37481: ST_TO_ADDR
37482: GO 37706
37484: LD_INT 2
37486: DOUBLE
37487: EQUAL
37488: IFTRUE 37492
37490: GO 37554
37492: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37493: LD_ADDR_VAR 0 12
37497: PUSH
37498: LD_VAR 0 18
37502: PPUSH
37503: LD_INT 22
37505: PUSH
37506: LD_VAR 0 16
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PUSH
37515: LD_INT 2
37517: PUSH
37518: LD_INT 30
37520: PUSH
37521: LD_INT 0
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 30
37530: PUSH
37531: LD_INT 1
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: LIST
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PPUSH
37547: CALL_OW 72
37551: ST_TO_ADDR
37552: GO 37706
37554: LD_INT 3
37556: DOUBLE
37557: EQUAL
37558: IFTRUE 37562
37560: GO 37624
37562: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37563: LD_ADDR_VAR 0 12
37567: PUSH
37568: LD_VAR 0 18
37572: PPUSH
37573: LD_INT 22
37575: PUSH
37576: LD_VAR 0 16
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PUSH
37585: LD_INT 2
37587: PUSH
37588: LD_INT 30
37590: PUSH
37591: LD_INT 2
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 30
37600: PUSH
37601: LD_INT 3
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: LIST
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PPUSH
37617: CALL_OW 72
37621: ST_TO_ADDR
37622: GO 37706
37624: LD_INT 4
37626: DOUBLE
37627: EQUAL
37628: IFTRUE 37632
37630: GO 37705
37632: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37633: LD_ADDR_VAR 0 12
37637: PUSH
37638: LD_VAR 0 18
37642: PPUSH
37643: LD_INT 22
37645: PUSH
37646: LD_VAR 0 16
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: LD_INT 2
37657: PUSH
37658: LD_INT 30
37660: PUSH
37661: LD_INT 6
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 30
37670: PUSH
37671: LD_INT 7
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: LD_INT 30
37680: PUSH
37681: LD_INT 8
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PPUSH
37698: CALL_OW 72
37702: ST_TO_ADDR
37703: GO 37706
37705: POP
// if i = 1 then
37706: LD_VAR 0 8
37710: PUSH
37711: LD_INT 1
37713: EQUAL
37714: IFFALSE 37825
// begin tmp := [ ] ;
37716: LD_ADDR_VAR 0 19
37720: PUSH
37721: EMPTY
37722: ST_TO_ADDR
// for j in f do
37723: LD_ADDR_VAR 0 9
37727: PUSH
37728: LD_VAR 0 12
37732: PUSH
37733: FOR_IN
37734: IFFALSE 37807
// if GetBType ( j ) = b_bunker then
37736: LD_VAR 0 9
37740: PPUSH
37741: CALL_OW 266
37745: PUSH
37746: LD_INT 32
37748: EQUAL
37749: IFFALSE 37776
// tmp := Insert ( tmp , 1 , j ) else
37751: LD_ADDR_VAR 0 19
37755: PUSH
37756: LD_VAR 0 19
37760: PPUSH
37761: LD_INT 1
37763: PPUSH
37764: LD_VAR 0 9
37768: PPUSH
37769: CALL_OW 2
37773: ST_TO_ADDR
37774: GO 37805
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37776: LD_ADDR_VAR 0 19
37780: PUSH
37781: LD_VAR 0 19
37785: PPUSH
37786: LD_VAR 0 19
37790: PUSH
37791: LD_INT 1
37793: PLUS
37794: PPUSH
37795: LD_VAR 0 9
37799: PPUSH
37800: CALL_OW 2
37804: ST_TO_ADDR
37805: GO 37733
37807: POP
37808: POP
// if tmp then
37809: LD_VAR 0 19
37813: IFFALSE 37825
// f := tmp ;
37815: LD_ADDR_VAR 0 12
37819: PUSH
37820: LD_VAR 0 19
37824: ST_TO_ADDR
// end ; x := personel [ i ] ;
37825: LD_ADDR_VAR 0 13
37829: PUSH
37830: LD_VAR 0 6
37834: PUSH
37835: LD_VAR 0 8
37839: ARRAY
37840: ST_TO_ADDR
// if x = - 1 then
37841: LD_VAR 0 13
37845: PUSH
37846: LD_INT 1
37848: NEG
37849: EQUAL
37850: IFFALSE 38059
// begin for j in f do
37852: LD_ADDR_VAR 0 9
37856: PUSH
37857: LD_VAR 0 12
37861: PUSH
37862: FOR_IN
37863: IFFALSE 38055
// repeat InitHc ;
37865: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37869: LD_VAR 0 9
37873: PPUSH
37874: CALL_OW 266
37878: PUSH
37879: LD_INT 5
37881: EQUAL
37882: IFFALSE 37952
// begin if UnitsInside ( j ) < 3 then
37884: LD_VAR 0 9
37888: PPUSH
37889: CALL_OW 313
37893: PUSH
37894: LD_INT 3
37896: LESS
37897: IFFALSE 37933
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37899: LD_INT 0
37901: PPUSH
37902: LD_INT 5
37904: PUSH
37905: LD_INT 8
37907: PUSH
37908: LD_INT 9
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: LIST
37915: PUSH
37916: LD_VAR 0 17
37920: ARRAY
37921: PPUSH
37922: LD_VAR 0 4
37926: PPUSH
37927: CALL_OW 380
37931: GO 37950
// PrepareHuman ( false , i , skill ) ;
37933: LD_INT 0
37935: PPUSH
37936: LD_VAR 0 8
37940: PPUSH
37941: LD_VAR 0 4
37945: PPUSH
37946: CALL_OW 380
// end else
37950: GO 37969
// PrepareHuman ( false , i , skill ) ;
37952: LD_INT 0
37954: PPUSH
37955: LD_VAR 0 8
37959: PPUSH
37960: LD_VAR 0 4
37964: PPUSH
37965: CALL_OW 380
// un := CreateHuman ;
37969: LD_ADDR_VAR 0 14
37973: PUSH
37974: CALL_OW 44
37978: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37979: LD_ADDR_VAR 0 7
37983: PUSH
37984: LD_VAR 0 7
37988: PPUSH
37989: LD_INT 1
37991: PPUSH
37992: LD_VAR 0 14
37996: PPUSH
37997: CALL_OW 2
38001: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38002: LD_VAR 0 14
38006: PPUSH
38007: LD_VAR 0 9
38011: PPUSH
38012: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38016: LD_VAR 0 9
38020: PPUSH
38021: CALL_OW 313
38025: PUSH
38026: LD_INT 6
38028: EQUAL
38029: PUSH
38030: LD_VAR 0 9
38034: PPUSH
38035: CALL_OW 266
38039: PUSH
38040: LD_INT 32
38042: PUSH
38043: LD_INT 31
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: IN
38050: OR
38051: IFFALSE 37865
38053: GO 37862
38055: POP
38056: POP
// end else
38057: GO 38439
// for j = 1 to x do
38059: LD_ADDR_VAR 0 9
38063: PUSH
38064: DOUBLE
38065: LD_INT 1
38067: DEC
38068: ST_TO_ADDR
38069: LD_VAR 0 13
38073: PUSH
38074: FOR_TO
38075: IFFALSE 38437
// begin InitHc ;
38077: CALL_OW 19
// if not f then
38081: LD_VAR 0 12
38085: NOT
38086: IFFALSE 38175
// begin PrepareHuman ( false , i , skill ) ;
38088: LD_INT 0
38090: PPUSH
38091: LD_VAR 0 8
38095: PPUSH
38096: LD_VAR 0 4
38100: PPUSH
38101: CALL_OW 380
// un := CreateHuman ;
38105: LD_ADDR_VAR 0 14
38109: PUSH
38110: CALL_OW 44
38114: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38115: LD_ADDR_VAR 0 7
38119: PUSH
38120: LD_VAR 0 7
38124: PPUSH
38125: LD_INT 1
38127: PPUSH
38128: LD_VAR 0 14
38132: PPUSH
38133: CALL_OW 2
38137: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38138: LD_VAR 0 14
38142: PPUSH
38143: LD_VAR 0 1
38147: PPUSH
38148: CALL_OW 250
38152: PPUSH
38153: LD_VAR 0 1
38157: PPUSH
38158: CALL_OW 251
38162: PPUSH
38163: LD_INT 10
38165: PPUSH
38166: LD_INT 0
38168: PPUSH
38169: CALL_OW 50
// continue ;
38173: GO 38074
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38175: LD_VAR 0 12
38179: PUSH
38180: LD_INT 1
38182: ARRAY
38183: PPUSH
38184: CALL_OW 313
38188: PUSH
38189: LD_VAR 0 12
38193: PUSH
38194: LD_INT 1
38196: ARRAY
38197: PPUSH
38198: CALL_OW 266
38202: PUSH
38203: LD_INT 32
38205: PUSH
38206: LD_INT 31
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: IN
38213: AND
38214: PUSH
38215: LD_VAR 0 12
38219: PUSH
38220: LD_INT 1
38222: ARRAY
38223: PPUSH
38224: CALL_OW 313
38228: PUSH
38229: LD_INT 6
38231: EQUAL
38232: OR
38233: IFFALSE 38253
// f := Delete ( f , 1 ) ;
38235: LD_ADDR_VAR 0 12
38239: PUSH
38240: LD_VAR 0 12
38244: PPUSH
38245: LD_INT 1
38247: PPUSH
38248: CALL_OW 3
38252: ST_TO_ADDR
// if not f then
38253: LD_VAR 0 12
38257: NOT
38258: IFFALSE 38276
// begin x := x + 2 ;
38260: LD_ADDR_VAR 0 13
38264: PUSH
38265: LD_VAR 0 13
38269: PUSH
38270: LD_INT 2
38272: PLUS
38273: ST_TO_ADDR
// continue ;
38274: GO 38074
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38276: LD_VAR 0 12
38280: PUSH
38281: LD_INT 1
38283: ARRAY
38284: PPUSH
38285: CALL_OW 266
38289: PUSH
38290: LD_INT 5
38292: EQUAL
38293: IFFALSE 38367
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38295: LD_VAR 0 12
38299: PUSH
38300: LD_INT 1
38302: ARRAY
38303: PPUSH
38304: CALL_OW 313
38308: PUSH
38309: LD_INT 3
38311: LESS
38312: IFFALSE 38348
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38314: LD_INT 0
38316: PPUSH
38317: LD_INT 5
38319: PUSH
38320: LD_INT 8
38322: PUSH
38323: LD_INT 9
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: LIST
38330: PUSH
38331: LD_VAR 0 17
38335: ARRAY
38336: PPUSH
38337: LD_VAR 0 4
38341: PPUSH
38342: CALL_OW 380
38346: GO 38365
// PrepareHuman ( false , i , skill ) ;
38348: LD_INT 0
38350: PPUSH
38351: LD_VAR 0 8
38355: PPUSH
38356: LD_VAR 0 4
38360: PPUSH
38361: CALL_OW 380
// end else
38365: GO 38384
// PrepareHuman ( false , i , skill ) ;
38367: LD_INT 0
38369: PPUSH
38370: LD_VAR 0 8
38374: PPUSH
38375: LD_VAR 0 4
38379: PPUSH
38380: CALL_OW 380
// un := CreateHuman ;
38384: LD_ADDR_VAR 0 14
38388: PUSH
38389: CALL_OW 44
38393: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38394: LD_ADDR_VAR 0 7
38398: PUSH
38399: LD_VAR 0 7
38403: PPUSH
38404: LD_INT 1
38406: PPUSH
38407: LD_VAR 0 14
38411: PPUSH
38412: CALL_OW 2
38416: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38417: LD_VAR 0 14
38421: PPUSH
38422: LD_VAR 0 12
38426: PUSH
38427: LD_INT 1
38429: ARRAY
38430: PPUSH
38431: CALL_OW 52
// end ;
38435: GO 38074
38437: POP
38438: POP
// end ;
38439: GO 37376
38441: POP
38442: POP
// result := result ^ buildings ;
38443: LD_ADDR_VAR 0 7
38447: PUSH
38448: LD_VAR 0 7
38452: PUSH
38453: LD_VAR 0 18
38457: ADD
38458: ST_TO_ADDR
// end else
38459: GO 38602
// begin for i = 1 to personel do
38461: LD_ADDR_VAR 0 8
38465: PUSH
38466: DOUBLE
38467: LD_INT 1
38469: DEC
38470: ST_TO_ADDR
38471: LD_VAR 0 6
38475: PUSH
38476: FOR_TO
38477: IFFALSE 38600
// begin if i > 4 then
38479: LD_VAR 0 8
38483: PUSH
38484: LD_INT 4
38486: GREATER
38487: IFFALSE 38491
// break ;
38489: GO 38600
// x := personel [ i ] ;
38491: LD_ADDR_VAR 0 13
38495: PUSH
38496: LD_VAR 0 6
38500: PUSH
38501: LD_VAR 0 8
38505: ARRAY
38506: ST_TO_ADDR
// if x = - 1 then
38507: LD_VAR 0 13
38511: PUSH
38512: LD_INT 1
38514: NEG
38515: EQUAL
38516: IFFALSE 38520
// continue ;
38518: GO 38476
// PrepareHuman ( false , i , skill ) ;
38520: LD_INT 0
38522: PPUSH
38523: LD_VAR 0 8
38527: PPUSH
38528: LD_VAR 0 4
38532: PPUSH
38533: CALL_OW 380
// un := CreateHuman ;
38537: LD_ADDR_VAR 0 14
38541: PUSH
38542: CALL_OW 44
38546: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38547: LD_VAR 0 14
38551: PPUSH
38552: LD_VAR 0 1
38556: PPUSH
38557: CALL_OW 250
38561: PPUSH
38562: LD_VAR 0 1
38566: PPUSH
38567: CALL_OW 251
38571: PPUSH
38572: LD_INT 10
38574: PPUSH
38575: LD_INT 0
38577: PPUSH
38578: CALL_OW 50
// result := result ^ un ;
38582: LD_ADDR_VAR 0 7
38586: PUSH
38587: LD_VAR 0 7
38591: PUSH
38592: LD_VAR 0 14
38596: ADD
38597: ST_TO_ADDR
// end ;
38598: GO 38476
38600: POP
38601: POP
// end ; end ;
38602: LD_VAR 0 7
38606: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38607: LD_INT 0
38609: PPUSH
38610: PPUSH
38611: PPUSH
38612: PPUSH
38613: PPUSH
38614: PPUSH
38615: PPUSH
38616: PPUSH
38617: PPUSH
38618: PPUSH
38619: PPUSH
38620: PPUSH
38621: PPUSH
38622: PPUSH
38623: PPUSH
38624: PPUSH
// result := false ;
38625: LD_ADDR_VAR 0 3
38629: PUSH
38630: LD_INT 0
38632: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38633: LD_VAR 0 1
38637: NOT
38638: PUSH
38639: LD_VAR 0 1
38643: PPUSH
38644: CALL_OW 266
38648: PUSH
38649: LD_INT 32
38651: PUSH
38652: LD_INT 33
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: IN
38659: NOT
38660: OR
38661: IFFALSE 38665
// exit ;
38663: GO 39774
// nat := GetNation ( tower ) ;
38665: LD_ADDR_VAR 0 12
38669: PUSH
38670: LD_VAR 0 1
38674: PPUSH
38675: CALL_OW 248
38679: ST_TO_ADDR
// side := GetSide ( tower ) ;
38680: LD_ADDR_VAR 0 16
38684: PUSH
38685: LD_VAR 0 1
38689: PPUSH
38690: CALL_OW 255
38694: ST_TO_ADDR
// x := GetX ( tower ) ;
38695: LD_ADDR_VAR 0 10
38699: PUSH
38700: LD_VAR 0 1
38704: PPUSH
38705: CALL_OW 250
38709: ST_TO_ADDR
// y := GetY ( tower ) ;
38710: LD_ADDR_VAR 0 11
38714: PUSH
38715: LD_VAR 0 1
38719: PPUSH
38720: CALL_OW 251
38724: ST_TO_ADDR
// if not x or not y then
38725: LD_VAR 0 10
38729: NOT
38730: PUSH
38731: LD_VAR 0 11
38735: NOT
38736: OR
38737: IFFALSE 38741
// exit ;
38739: GO 39774
// weapon := 0 ;
38741: LD_ADDR_VAR 0 18
38745: PUSH
38746: LD_INT 0
38748: ST_TO_ADDR
// fac_list := [ ] ;
38749: LD_ADDR_VAR 0 17
38753: PUSH
38754: EMPTY
38755: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38756: LD_ADDR_VAR 0 6
38760: PUSH
38761: LD_VAR 0 1
38765: PPUSH
38766: CALL_OW 274
38770: PPUSH
38771: LD_VAR 0 2
38775: PPUSH
38776: LD_INT 0
38778: PPUSH
38779: CALL 36345 0 3
38783: PPUSH
38784: LD_INT 30
38786: PUSH
38787: LD_INT 3
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PPUSH
38794: CALL_OW 72
38798: ST_TO_ADDR
// if not factories then
38799: LD_VAR 0 6
38803: NOT
38804: IFFALSE 38808
// exit ;
38806: GO 39774
// for i in factories do
38808: LD_ADDR_VAR 0 8
38812: PUSH
38813: LD_VAR 0 6
38817: PUSH
38818: FOR_IN
38819: IFFALSE 38844
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38821: LD_ADDR_VAR 0 17
38825: PUSH
38826: LD_VAR 0 17
38830: PUSH
38831: LD_VAR 0 8
38835: PPUSH
38836: CALL_OW 478
38840: UNION
38841: ST_TO_ADDR
38842: GO 38818
38844: POP
38845: POP
// if not fac_list then
38846: LD_VAR 0 17
38850: NOT
38851: IFFALSE 38855
// exit ;
38853: GO 39774
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38855: LD_ADDR_VAR 0 5
38859: PUSH
38860: LD_INT 4
38862: PUSH
38863: LD_INT 5
38865: PUSH
38866: LD_INT 9
38868: PUSH
38869: LD_INT 10
38871: PUSH
38872: LD_INT 6
38874: PUSH
38875: LD_INT 7
38877: PUSH
38878: LD_INT 11
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 27
38892: PUSH
38893: LD_INT 28
38895: PUSH
38896: LD_INT 26
38898: PUSH
38899: LD_INT 30
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: PUSH
38908: LD_INT 43
38910: PUSH
38911: LD_INT 44
38913: PUSH
38914: LD_INT 46
38916: PUSH
38917: LD_INT 45
38919: PUSH
38920: LD_INT 47
38922: PUSH
38923: LD_INT 49
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: LIST
38938: PUSH
38939: LD_VAR 0 12
38943: ARRAY
38944: ST_TO_ADDR
// list := list isect fac_list ;
38945: LD_ADDR_VAR 0 5
38949: PUSH
38950: LD_VAR 0 5
38954: PUSH
38955: LD_VAR 0 17
38959: ISECT
38960: ST_TO_ADDR
// if not list then
38961: LD_VAR 0 5
38965: NOT
38966: IFFALSE 38970
// exit ;
38968: GO 39774
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38970: LD_VAR 0 12
38974: PUSH
38975: LD_INT 3
38977: EQUAL
38978: PUSH
38979: LD_INT 49
38981: PUSH
38982: LD_VAR 0 5
38986: IN
38987: AND
38988: PUSH
38989: LD_INT 31
38991: PPUSH
38992: LD_VAR 0 16
38996: PPUSH
38997: CALL_OW 321
39001: PUSH
39002: LD_INT 2
39004: EQUAL
39005: AND
39006: IFFALSE 39066
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39008: LD_INT 22
39010: PUSH
39011: LD_VAR 0 16
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 35
39022: PUSH
39023: LD_INT 49
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 91
39032: PUSH
39033: LD_VAR 0 1
39037: PUSH
39038: LD_INT 10
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: LIST
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: LIST
39050: PPUSH
39051: CALL_OW 69
39055: NOT
39056: IFFALSE 39066
// weapon := ru_time_lapser ;
39058: LD_ADDR_VAR 0 18
39062: PUSH
39063: LD_INT 49
39065: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39066: LD_VAR 0 12
39070: PUSH
39071: LD_INT 1
39073: PUSH
39074: LD_INT 2
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: IN
39081: PUSH
39082: LD_INT 11
39084: PUSH
39085: LD_VAR 0 5
39089: IN
39090: PUSH
39091: LD_INT 30
39093: PUSH
39094: LD_VAR 0 5
39098: IN
39099: OR
39100: AND
39101: PUSH
39102: LD_INT 6
39104: PPUSH
39105: LD_VAR 0 16
39109: PPUSH
39110: CALL_OW 321
39114: PUSH
39115: LD_INT 2
39117: EQUAL
39118: AND
39119: IFFALSE 39284
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39121: LD_INT 22
39123: PUSH
39124: LD_VAR 0 16
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 2
39135: PUSH
39136: LD_INT 35
39138: PUSH
39139: LD_INT 11
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 35
39148: PUSH
39149: LD_INT 30
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: LIST
39160: PUSH
39161: LD_INT 91
39163: PUSH
39164: LD_VAR 0 1
39168: PUSH
39169: LD_INT 18
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: LIST
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: LIST
39181: PPUSH
39182: CALL_OW 69
39186: NOT
39187: PUSH
39188: LD_INT 22
39190: PUSH
39191: LD_VAR 0 16
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 2
39202: PUSH
39203: LD_INT 30
39205: PUSH
39206: LD_INT 32
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: LD_INT 30
39215: PUSH
39216: LD_INT 33
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 91
39230: PUSH
39231: LD_VAR 0 1
39235: PUSH
39236: LD_INT 12
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: LIST
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: LIST
39248: PUSH
39249: EMPTY
39250: LIST
39251: PPUSH
39252: CALL_OW 69
39256: PUSH
39257: LD_INT 2
39259: GREATER
39260: AND
39261: IFFALSE 39284
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39263: LD_ADDR_VAR 0 18
39267: PUSH
39268: LD_INT 11
39270: PUSH
39271: LD_INT 30
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_VAR 0 12
39282: ARRAY
39283: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39284: LD_VAR 0 18
39288: NOT
39289: PUSH
39290: LD_INT 40
39292: PPUSH
39293: LD_VAR 0 16
39297: PPUSH
39298: CALL_OW 321
39302: PUSH
39303: LD_INT 2
39305: EQUAL
39306: AND
39307: PUSH
39308: LD_INT 7
39310: PUSH
39311: LD_VAR 0 5
39315: IN
39316: PUSH
39317: LD_INT 28
39319: PUSH
39320: LD_VAR 0 5
39324: IN
39325: OR
39326: PUSH
39327: LD_INT 45
39329: PUSH
39330: LD_VAR 0 5
39334: IN
39335: OR
39336: AND
39337: IFFALSE 39591
// begin hex := GetHexInfo ( x , y ) ;
39339: LD_ADDR_VAR 0 4
39343: PUSH
39344: LD_VAR 0 10
39348: PPUSH
39349: LD_VAR 0 11
39353: PPUSH
39354: CALL_OW 546
39358: ST_TO_ADDR
// if hex [ 1 ] then
39359: LD_VAR 0 4
39363: PUSH
39364: LD_INT 1
39366: ARRAY
39367: IFFALSE 39371
// exit ;
39369: GO 39774
// height := hex [ 2 ] ;
39371: LD_ADDR_VAR 0 15
39375: PUSH
39376: LD_VAR 0 4
39380: PUSH
39381: LD_INT 2
39383: ARRAY
39384: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39385: LD_ADDR_VAR 0 14
39389: PUSH
39390: LD_INT 0
39392: PUSH
39393: LD_INT 2
39395: PUSH
39396: LD_INT 3
39398: PUSH
39399: LD_INT 5
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: ST_TO_ADDR
// for i in tmp do
39408: LD_ADDR_VAR 0 8
39412: PUSH
39413: LD_VAR 0 14
39417: PUSH
39418: FOR_IN
39419: IFFALSE 39589
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39421: LD_ADDR_VAR 0 9
39425: PUSH
39426: LD_VAR 0 10
39430: PPUSH
39431: LD_VAR 0 8
39435: PPUSH
39436: LD_INT 5
39438: PPUSH
39439: CALL_OW 272
39443: PUSH
39444: LD_VAR 0 11
39448: PPUSH
39449: LD_VAR 0 8
39453: PPUSH
39454: LD_INT 5
39456: PPUSH
39457: CALL_OW 273
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39466: LD_VAR 0 9
39470: PUSH
39471: LD_INT 1
39473: ARRAY
39474: PPUSH
39475: LD_VAR 0 9
39479: PUSH
39480: LD_INT 2
39482: ARRAY
39483: PPUSH
39484: CALL_OW 488
39488: IFFALSE 39587
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39490: LD_ADDR_VAR 0 4
39494: PUSH
39495: LD_VAR 0 9
39499: PUSH
39500: LD_INT 1
39502: ARRAY
39503: PPUSH
39504: LD_VAR 0 9
39508: PUSH
39509: LD_INT 2
39511: ARRAY
39512: PPUSH
39513: CALL_OW 546
39517: ST_TO_ADDR
// if hex [ 1 ] then
39518: LD_VAR 0 4
39522: PUSH
39523: LD_INT 1
39525: ARRAY
39526: IFFALSE 39530
// continue ;
39528: GO 39418
// h := hex [ 2 ] ;
39530: LD_ADDR_VAR 0 13
39534: PUSH
39535: LD_VAR 0 4
39539: PUSH
39540: LD_INT 2
39542: ARRAY
39543: ST_TO_ADDR
// if h + 7 < height then
39544: LD_VAR 0 13
39548: PUSH
39549: LD_INT 7
39551: PLUS
39552: PUSH
39553: LD_VAR 0 15
39557: LESS
39558: IFFALSE 39587
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39560: LD_ADDR_VAR 0 18
39564: PUSH
39565: LD_INT 7
39567: PUSH
39568: LD_INT 28
39570: PUSH
39571: LD_INT 45
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: LIST
39578: PUSH
39579: LD_VAR 0 12
39583: ARRAY
39584: ST_TO_ADDR
// break ;
39585: GO 39589
// end ; end ; end ;
39587: GO 39418
39589: POP
39590: POP
// end ; if not weapon then
39591: LD_VAR 0 18
39595: NOT
39596: IFFALSE 39656
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39598: LD_ADDR_VAR 0 5
39602: PUSH
39603: LD_VAR 0 5
39607: PUSH
39608: LD_INT 11
39610: PUSH
39611: LD_INT 30
39613: PUSH
39614: LD_INT 49
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: LIST
39621: DIFF
39622: ST_TO_ADDR
// if not list then
39623: LD_VAR 0 5
39627: NOT
39628: IFFALSE 39632
// exit ;
39630: GO 39774
// weapon := list [ rand ( 1 , list ) ] ;
39632: LD_ADDR_VAR 0 18
39636: PUSH
39637: LD_VAR 0 5
39641: PUSH
39642: LD_INT 1
39644: PPUSH
39645: LD_VAR 0 5
39649: PPUSH
39650: CALL_OW 12
39654: ARRAY
39655: ST_TO_ADDR
// end ; if weapon then
39656: LD_VAR 0 18
39660: IFFALSE 39774
// begin tmp := CostOfWeapon ( weapon ) ;
39662: LD_ADDR_VAR 0 14
39666: PUSH
39667: LD_VAR 0 18
39671: PPUSH
39672: CALL_OW 451
39676: ST_TO_ADDR
// j := GetBase ( tower ) ;
39677: LD_ADDR_VAR 0 9
39681: PUSH
39682: LD_VAR 0 1
39686: PPUSH
39687: CALL_OW 274
39691: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39692: LD_VAR 0 9
39696: PPUSH
39697: LD_INT 1
39699: PPUSH
39700: CALL_OW 275
39704: PUSH
39705: LD_VAR 0 14
39709: PUSH
39710: LD_INT 1
39712: ARRAY
39713: GREATEREQUAL
39714: PUSH
39715: LD_VAR 0 9
39719: PPUSH
39720: LD_INT 2
39722: PPUSH
39723: CALL_OW 275
39727: PUSH
39728: LD_VAR 0 14
39732: PUSH
39733: LD_INT 2
39735: ARRAY
39736: GREATEREQUAL
39737: AND
39738: PUSH
39739: LD_VAR 0 9
39743: PPUSH
39744: LD_INT 3
39746: PPUSH
39747: CALL_OW 275
39751: PUSH
39752: LD_VAR 0 14
39756: PUSH
39757: LD_INT 3
39759: ARRAY
39760: GREATEREQUAL
39761: AND
39762: IFFALSE 39774
// result := weapon ;
39764: LD_ADDR_VAR 0 3
39768: PUSH
39769: LD_VAR 0 18
39773: ST_TO_ADDR
// end ; end ;
39774: LD_VAR 0 3
39778: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39779: LD_INT 0
39781: PPUSH
39782: PPUSH
// result := true ;
39783: LD_ADDR_VAR 0 3
39787: PUSH
39788: LD_INT 1
39790: ST_TO_ADDR
// if array1 = array2 then
39791: LD_VAR 0 1
39795: PUSH
39796: LD_VAR 0 2
39800: EQUAL
39801: IFFALSE 39861
// begin for i = 1 to array1 do
39803: LD_ADDR_VAR 0 4
39807: PUSH
39808: DOUBLE
39809: LD_INT 1
39811: DEC
39812: ST_TO_ADDR
39813: LD_VAR 0 1
39817: PUSH
39818: FOR_TO
39819: IFFALSE 39857
// if array1 [ i ] <> array2 [ i ] then
39821: LD_VAR 0 1
39825: PUSH
39826: LD_VAR 0 4
39830: ARRAY
39831: PUSH
39832: LD_VAR 0 2
39836: PUSH
39837: LD_VAR 0 4
39841: ARRAY
39842: NONEQUAL
39843: IFFALSE 39855
// begin result := false ;
39845: LD_ADDR_VAR 0 3
39849: PUSH
39850: LD_INT 0
39852: ST_TO_ADDR
// break ;
39853: GO 39857
// end ;
39855: GO 39818
39857: POP
39858: POP
// end else
39859: GO 39869
// result := false ;
39861: LD_ADDR_VAR 0 3
39865: PUSH
39866: LD_INT 0
39868: ST_TO_ADDR
// end ;
39869: LD_VAR 0 3
39873: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39874: LD_INT 0
39876: PPUSH
39877: PPUSH
// if not array1 or not array2 then
39878: LD_VAR 0 1
39882: NOT
39883: PUSH
39884: LD_VAR 0 2
39888: NOT
39889: OR
39890: IFFALSE 39894
// exit ;
39892: GO 39958
// result := true ;
39894: LD_ADDR_VAR 0 3
39898: PUSH
39899: LD_INT 1
39901: ST_TO_ADDR
// for i = 1 to array1 do
39902: LD_ADDR_VAR 0 4
39906: PUSH
39907: DOUBLE
39908: LD_INT 1
39910: DEC
39911: ST_TO_ADDR
39912: LD_VAR 0 1
39916: PUSH
39917: FOR_TO
39918: IFFALSE 39956
// if array1 [ i ] <> array2 [ i ] then
39920: LD_VAR 0 1
39924: PUSH
39925: LD_VAR 0 4
39929: ARRAY
39930: PUSH
39931: LD_VAR 0 2
39935: PUSH
39936: LD_VAR 0 4
39940: ARRAY
39941: NONEQUAL
39942: IFFALSE 39954
// begin result := false ;
39944: LD_ADDR_VAR 0 3
39948: PUSH
39949: LD_INT 0
39951: ST_TO_ADDR
// break ;
39952: GO 39956
// end ;
39954: GO 39917
39956: POP
39957: POP
// end ;
39958: LD_VAR 0 3
39962: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39963: LD_INT 0
39965: PPUSH
39966: PPUSH
39967: PPUSH
// pom := GetBase ( fac ) ;
39968: LD_ADDR_VAR 0 5
39972: PUSH
39973: LD_VAR 0 1
39977: PPUSH
39978: CALL_OW 274
39982: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39983: LD_ADDR_VAR 0 4
39987: PUSH
39988: LD_VAR 0 2
39992: PUSH
39993: LD_INT 1
39995: ARRAY
39996: PPUSH
39997: LD_VAR 0 2
40001: PUSH
40002: LD_INT 2
40004: ARRAY
40005: PPUSH
40006: LD_VAR 0 2
40010: PUSH
40011: LD_INT 3
40013: ARRAY
40014: PPUSH
40015: LD_VAR 0 2
40019: PUSH
40020: LD_INT 4
40022: ARRAY
40023: PPUSH
40024: CALL_OW 449
40028: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40029: LD_ADDR_VAR 0 3
40033: PUSH
40034: LD_VAR 0 5
40038: PPUSH
40039: LD_INT 1
40041: PPUSH
40042: CALL_OW 275
40046: PUSH
40047: LD_VAR 0 4
40051: PUSH
40052: LD_INT 1
40054: ARRAY
40055: GREATEREQUAL
40056: PUSH
40057: LD_VAR 0 5
40061: PPUSH
40062: LD_INT 2
40064: PPUSH
40065: CALL_OW 275
40069: PUSH
40070: LD_VAR 0 4
40074: PUSH
40075: LD_INT 2
40077: ARRAY
40078: GREATEREQUAL
40079: AND
40080: PUSH
40081: LD_VAR 0 5
40085: PPUSH
40086: LD_INT 3
40088: PPUSH
40089: CALL_OW 275
40093: PUSH
40094: LD_VAR 0 4
40098: PUSH
40099: LD_INT 3
40101: ARRAY
40102: GREATEREQUAL
40103: AND
40104: ST_TO_ADDR
// end ;
40105: LD_VAR 0 3
40109: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40110: LD_INT 0
40112: PPUSH
40113: PPUSH
40114: PPUSH
40115: PPUSH
// pom := GetBase ( building ) ;
40116: LD_ADDR_VAR 0 3
40120: PUSH
40121: LD_VAR 0 1
40125: PPUSH
40126: CALL_OW 274
40130: ST_TO_ADDR
// if not pom then
40131: LD_VAR 0 3
40135: NOT
40136: IFFALSE 40140
// exit ;
40138: GO 40310
// btype := GetBType ( building ) ;
40140: LD_ADDR_VAR 0 5
40144: PUSH
40145: LD_VAR 0 1
40149: PPUSH
40150: CALL_OW 266
40154: ST_TO_ADDR
// if btype = b_armoury then
40155: LD_VAR 0 5
40159: PUSH
40160: LD_INT 4
40162: EQUAL
40163: IFFALSE 40173
// btype := b_barracks ;
40165: LD_ADDR_VAR 0 5
40169: PUSH
40170: LD_INT 5
40172: ST_TO_ADDR
// if btype = b_depot then
40173: LD_VAR 0 5
40177: PUSH
40178: LD_INT 0
40180: EQUAL
40181: IFFALSE 40191
// btype := b_warehouse ;
40183: LD_ADDR_VAR 0 5
40187: PUSH
40188: LD_INT 1
40190: ST_TO_ADDR
// if btype = b_workshop then
40191: LD_VAR 0 5
40195: PUSH
40196: LD_INT 2
40198: EQUAL
40199: IFFALSE 40209
// btype := b_factory ;
40201: LD_ADDR_VAR 0 5
40205: PUSH
40206: LD_INT 3
40208: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40209: LD_ADDR_VAR 0 4
40213: PUSH
40214: LD_VAR 0 5
40218: PPUSH
40219: LD_VAR 0 1
40223: PPUSH
40224: CALL_OW 248
40228: PPUSH
40229: CALL_OW 450
40233: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40234: LD_ADDR_VAR 0 2
40238: PUSH
40239: LD_VAR 0 3
40243: PPUSH
40244: LD_INT 1
40246: PPUSH
40247: CALL_OW 275
40251: PUSH
40252: LD_VAR 0 4
40256: PUSH
40257: LD_INT 1
40259: ARRAY
40260: GREATEREQUAL
40261: PUSH
40262: LD_VAR 0 3
40266: PPUSH
40267: LD_INT 2
40269: PPUSH
40270: CALL_OW 275
40274: PUSH
40275: LD_VAR 0 4
40279: PUSH
40280: LD_INT 2
40282: ARRAY
40283: GREATEREQUAL
40284: AND
40285: PUSH
40286: LD_VAR 0 3
40290: PPUSH
40291: LD_INT 3
40293: PPUSH
40294: CALL_OW 275
40298: PUSH
40299: LD_VAR 0 4
40303: PUSH
40304: LD_INT 3
40306: ARRAY
40307: GREATEREQUAL
40308: AND
40309: ST_TO_ADDR
// end ;
40310: LD_VAR 0 2
40314: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40315: LD_INT 0
40317: PPUSH
40318: PPUSH
40319: PPUSH
// pom := GetBase ( building ) ;
40320: LD_ADDR_VAR 0 4
40324: PUSH
40325: LD_VAR 0 1
40329: PPUSH
40330: CALL_OW 274
40334: ST_TO_ADDR
// if not pom then
40335: LD_VAR 0 4
40339: NOT
40340: IFFALSE 40344
// exit ;
40342: GO 40445
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40344: LD_ADDR_VAR 0 5
40348: PUSH
40349: LD_VAR 0 2
40353: PPUSH
40354: LD_VAR 0 1
40358: PPUSH
40359: CALL_OW 248
40363: PPUSH
40364: CALL_OW 450
40368: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40369: LD_ADDR_VAR 0 3
40373: PUSH
40374: LD_VAR 0 4
40378: PPUSH
40379: LD_INT 1
40381: PPUSH
40382: CALL_OW 275
40386: PUSH
40387: LD_VAR 0 5
40391: PUSH
40392: LD_INT 1
40394: ARRAY
40395: GREATEREQUAL
40396: PUSH
40397: LD_VAR 0 4
40401: PPUSH
40402: LD_INT 2
40404: PPUSH
40405: CALL_OW 275
40409: PUSH
40410: LD_VAR 0 5
40414: PUSH
40415: LD_INT 2
40417: ARRAY
40418: GREATEREQUAL
40419: AND
40420: PUSH
40421: LD_VAR 0 4
40425: PPUSH
40426: LD_INT 3
40428: PPUSH
40429: CALL_OW 275
40433: PUSH
40434: LD_VAR 0 5
40438: PUSH
40439: LD_INT 3
40441: ARRAY
40442: GREATEREQUAL
40443: AND
40444: ST_TO_ADDR
// end ;
40445: LD_VAR 0 3
40449: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40450: LD_INT 0
40452: PPUSH
40453: PPUSH
40454: PPUSH
40455: PPUSH
40456: PPUSH
40457: PPUSH
40458: PPUSH
40459: PPUSH
40460: PPUSH
40461: PPUSH
40462: PPUSH
// result := false ;
40463: LD_ADDR_VAR 0 8
40467: PUSH
40468: LD_INT 0
40470: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40471: LD_VAR 0 5
40475: NOT
40476: PUSH
40477: LD_VAR 0 1
40481: NOT
40482: OR
40483: PUSH
40484: LD_VAR 0 2
40488: NOT
40489: OR
40490: PUSH
40491: LD_VAR 0 3
40495: NOT
40496: OR
40497: IFFALSE 40501
// exit ;
40499: GO 41315
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40501: LD_ADDR_VAR 0 14
40505: PUSH
40506: LD_VAR 0 1
40510: PPUSH
40511: LD_VAR 0 2
40515: PPUSH
40516: LD_VAR 0 3
40520: PPUSH
40521: LD_VAR 0 4
40525: PPUSH
40526: LD_VAR 0 5
40530: PUSH
40531: LD_INT 1
40533: ARRAY
40534: PPUSH
40535: CALL_OW 248
40539: PPUSH
40540: LD_INT 0
40542: PPUSH
40543: CALL 42552 0 6
40547: ST_TO_ADDR
// if not hexes then
40548: LD_VAR 0 14
40552: NOT
40553: IFFALSE 40557
// exit ;
40555: GO 41315
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40557: LD_ADDR_VAR 0 17
40561: PUSH
40562: LD_VAR 0 5
40566: PPUSH
40567: LD_INT 22
40569: PUSH
40570: LD_VAR 0 13
40574: PPUSH
40575: CALL_OW 255
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 2
40586: PUSH
40587: LD_INT 30
40589: PUSH
40590: LD_INT 0
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 30
40599: PUSH
40600: LD_INT 1
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: LIST
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PPUSH
40616: CALL_OW 72
40620: ST_TO_ADDR
// for i = 1 to hexes do
40621: LD_ADDR_VAR 0 9
40625: PUSH
40626: DOUBLE
40627: LD_INT 1
40629: DEC
40630: ST_TO_ADDR
40631: LD_VAR 0 14
40635: PUSH
40636: FOR_TO
40637: IFFALSE 41313
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40639: LD_ADDR_VAR 0 13
40643: PUSH
40644: LD_VAR 0 14
40648: PUSH
40649: LD_VAR 0 9
40653: ARRAY
40654: PUSH
40655: LD_INT 1
40657: ARRAY
40658: PPUSH
40659: LD_VAR 0 14
40663: PUSH
40664: LD_VAR 0 9
40668: ARRAY
40669: PUSH
40670: LD_INT 2
40672: ARRAY
40673: PPUSH
40674: CALL_OW 428
40678: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40679: LD_VAR 0 14
40683: PUSH
40684: LD_VAR 0 9
40688: ARRAY
40689: PUSH
40690: LD_INT 1
40692: ARRAY
40693: PPUSH
40694: LD_VAR 0 14
40698: PUSH
40699: LD_VAR 0 9
40703: ARRAY
40704: PUSH
40705: LD_INT 2
40707: ARRAY
40708: PPUSH
40709: CALL_OW 351
40713: PUSH
40714: LD_VAR 0 14
40718: PUSH
40719: LD_VAR 0 9
40723: ARRAY
40724: PUSH
40725: LD_INT 1
40727: ARRAY
40728: PPUSH
40729: LD_VAR 0 14
40733: PUSH
40734: LD_VAR 0 9
40738: ARRAY
40739: PUSH
40740: LD_INT 2
40742: ARRAY
40743: PPUSH
40744: CALL_OW 488
40748: NOT
40749: OR
40750: PUSH
40751: LD_VAR 0 13
40755: PPUSH
40756: CALL_OW 247
40760: PUSH
40761: LD_INT 3
40763: EQUAL
40764: OR
40765: IFFALSE 40771
// exit ;
40767: POP
40768: POP
40769: GO 41315
// if not tmp then
40771: LD_VAR 0 13
40775: NOT
40776: IFFALSE 40780
// continue ;
40778: GO 40636
// result := true ;
40780: LD_ADDR_VAR 0 8
40784: PUSH
40785: LD_INT 1
40787: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40788: LD_VAR 0 6
40792: PUSH
40793: LD_VAR 0 13
40797: PPUSH
40798: CALL_OW 247
40802: PUSH
40803: LD_INT 2
40805: EQUAL
40806: AND
40807: PUSH
40808: LD_VAR 0 13
40812: PPUSH
40813: CALL_OW 263
40817: PUSH
40818: LD_INT 1
40820: EQUAL
40821: AND
40822: IFFALSE 40986
// begin if IsDrivenBy ( tmp ) then
40824: LD_VAR 0 13
40828: PPUSH
40829: CALL_OW 311
40833: IFFALSE 40837
// continue ;
40835: GO 40636
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40837: LD_VAR 0 6
40841: PPUSH
40842: LD_INT 3
40844: PUSH
40845: LD_INT 60
40847: PUSH
40848: EMPTY
40849: LIST
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 3
40857: PUSH
40858: LD_INT 55
40860: PUSH
40861: EMPTY
40862: LIST
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PPUSH
40872: CALL_OW 72
40876: IFFALSE 40984
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40878: LD_ADDR_VAR 0 18
40882: PUSH
40883: LD_VAR 0 6
40887: PPUSH
40888: LD_INT 3
40890: PUSH
40891: LD_INT 60
40893: PUSH
40894: EMPTY
40895: LIST
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 3
40903: PUSH
40904: LD_INT 55
40906: PUSH
40907: EMPTY
40908: LIST
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PPUSH
40918: CALL_OW 72
40922: PUSH
40923: LD_INT 1
40925: ARRAY
40926: ST_TO_ADDR
// if IsInUnit ( driver ) then
40927: LD_VAR 0 18
40931: PPUSH
40932: CALL_OW 310
40936: IFFALSE 40947
// ComExit ( driver ) ;
40938: LD_VAR 0 18
40942: PPUSH
40943: CALL 65680 0 1
// AddComEnterUnit ( driver , tmp ) ;
40947: LD_VAR 0 18
40951: PPUSH
40952: LD_VAR 0 13
40956: PPUSH
40957: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40961: LD_VAR 0 18
40965: PPUSH
40966: LD_VAR 0 7
40970: PPUSH
40971: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40975: LD_VAR 0 18
40979: PPUSH
40980: CALL_OW 181
// end ; continue ;
40984: GO 40636
// end ; if not cleaners or not tmp in cleaners then
40986: LD_VAR 0 6
40990: NOT
40991: PUSH
40992: LD_VAR 0 13
40996: PUSH
40997: LD_VAR 0 6
41001: IN
41002: NOT
41003: OR
41004: IFFALSE 41311
// begin if dep then
41006: LD_VAR 0 17
41010: IFFALSE 41146
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41012: LD_ADDR_VAR 0 16
41016: PUSH
41017: LD_VAR 0 17
41021: PUSH
41022: LD_INT 1
41024: ARRAY
41025: PPUSH
41026: CALL_OW 250
41030: PPUSH
41031: LD_VAR 0 17
41035: PUSH
41036: LD_INT 1
41038: ARRAY
41039: PPUSH
41040: CALL_OW 254
41044: PPUSH
41045: LD_INT 5
41047: PPUSH
41048: CALL_OW 272
41052: PUSH
41053: LD_VAR 0 17
41057: PUSH
41058: LD_INT 1
41060: ARRAY
41061: PPUSH
41062: CALL_OW 251
41066: PPUSH
41067: LD_VAR 0 17
41071: PUSH
41072: LD_INT 1
41074: ARRAY
41075: PPUSH
41076: CALL_OW 254
41080: PPUSH
41081: LD_INT 5
41083: PPUSH
41084: CALL_OW 273
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41093: LD_VAR 0 16
41097: PUSH
41098: LD_INT 1
41100: ARRAY
41101: PPUSH
41102: LD_VAR 0 16
41106: PUSH
41107: LD_INT 2
41109: ARRAY
41110: PPUSH
41111: CALL_OW 488
41115: IFFALSE 41146
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41117: LD_VAR 0 13
41121: PPUSH
41122: LD_VAR 0 16
41126: PUSH
41127: LD_INT 1
41129: ARRAY
41130: PPUSH
41131: LD_VAR 0 16
41135: PUSH
41136: LD_INT 2
41138: ARRAY
41139: PPUSH
41140: CALL_OW 111
// continue ;
41144: GO 40636
// end ; end ; r := GetDir ( tmp ) ;
41146: LD_ADDR_VAR 0 15
41150: PUSH
41151: LD_VAR 0 13
41155: PPUSH
41156: CALL_OW 254
41160: ST_TO_ADDR
// if r = 5 then
41161: LD_VAR 0 15
41165: PUSH
41166: LD_INT 5
41168: EQUAL
41169: IFFALSE 41179
// r := 0 ;
41171: LD_ADDR_VAR 0 15
41175: PUSH
41176: LD_INT 0
41178: ST_TO_ADDR
// for j = r to 5 do
41179: LD_ADDR_VAR 0 10
41183: PUSH
41184: DOUBLE
41185: LD_VAR 0 15
41189: DEC
41190: ST_TO_ADDR
41191: LD_INT 5
41193: PUSH
41194: FOR_TO
41195: IFFALSE 41309
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41197: LD_ADDR_VAR 0 11
41201: PUSH
41202: LD_VAR 0 13
41206: PPUSH
41207: CALL_OW 250
41211: PPUSH
41212: LD_VAR 0 10
41216: PPUSH
41217: LD_INT 2
41219: PPUSH
41220: CALL_OW 272
41224: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41225: LD_ADDR_VAR 0 12
41229: PUSH
41230: LD_VAR 0 13
41234: PPUSH
41235: CALL_OW 251
41239: PPUSH
41240: LD_VAR 0 10
41244: PPUSH
41245: LD_INT 2
41247: PPUSH
41248: CALL_OW 273
41252: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41253: LD_VAR 0 11
41257: PPUSH
41258: LD_VAR 0 12
41262: PPUSH
41263: CALL_OW 488
41267: PUSH
41268: LD_VAR 0 11
41272: PPUSH
41273: LD_VAR 0 12
41277: PPUSH
41278: CALL_OW 428
41282: NOT
41283: AND
41284: IFFALSE 41307
// begin ComMoveXY ( tmp , _x , _y ) ;
41286: LD_VAR 0 13
41290: PPUSH
41291: LD_VAR 0 11
41295: PPUSH
41296: LD_VAR 0 12
41300: PPUSH
41301: CALL_OW 111
// break ;
41305: GO 41309
// end ; end ;
41307: GO 41194
41309: POP
41310: POP
// end ; end ;
41311: GO 40636
41313: POP
41314: POP
// end ;
41315: LD_VAR 0 8
41319: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41320: LD_INT 0
41322: PPUSH
// result := true ;
41323: LD_ADDR_VAR 0 3
41327: PUSH
41328: LD_INT 1
41330: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41331: LD_VAR 0 2
41335: PUSH
41336: LD_INT 24
41338: DOUBLE
41339: EQUAL
41340: IFTRUE 41350
41342: LD_INT 33
41344: DOUBLE
41345: EQUAL
41346: IFTRUE 41350
41348: GO 41375
41350: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41351: LD_ADDR_VAR 0 3
41355: PUSH
41356: LD_INT 32
41358: PPUSH
41359: LD_VAR 0 1
41363: PPUSH
41364: CALL_OW 321
41368: PUSH
41369: LD_INT 2
41371: EQUAL
41372: ST_TO_ADDR
41373: GO 41695
41375: LD_INT 20
41377: DOUBLE
41378: EQUAL
41379: IFTRUE 41383
41381: GO 41408
41383: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41384: LD_ADDR_VAR 0 3
41388: PUSH
41389: LD_INT 6
41391: PPUSH
41392: LD_VAR 0 1
41396: PPUSH
41397: CALL_OW 321
41401: PUSH
41402: LD_INT 2
41404: EQUAL
41405: ST_TO_ADDR
41406: GO 41695
41408: LD_INT 22
41410: DOUBLE
41411: EQUAL
41412: IFTRUE 41422
41414: LD_INT 36
41416: DOUBLE
41417: EQUAL
41418: IFTRUE 41422
41420: GO 41447
41422: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41423: LD_ADDR_VAR 0 3
41427: PUSH
41428: LD_INT 15
41430: PPUSH
41431: LD_VAR 0 1
41435: PPUSH
41436: CALL_OW 321
41440: PUSH
41441: LD_INT 2
41443: EQUAL
41444: ST_TO_ADDR
41445: GO 41695
41447: LD_INT 30
41449: DOUBLE
41450: EQUAL
41451: IFTRUE 41455
41453: GO 41480
41455: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41456: LD_ADDR_VAR 0 3
41460: PUSH
41461: LD_INT 20
41463: PPUSH
41464: LD_VAR 0 1
41468: PPUSH
41469: CALL_OW 321
41473: PUSH
41474: LD_INT 2
41476: EQUAL
41477: ST_TO_ADDR
41478: GO 41695
41480: LD_INT 28
41482: DOUBLE
41483: EQUAL
41484: IFTRUE 41494
41486: LD_INT 21
41488: DOUBLE
41489: EQUAL
41490: IFTRUE 41494
41492: GO 41519
41494: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41495: LD_ADDR_VAR 0 3
41499: PUSH
41500: LD_INT 21
41502: PPUSH
41503: LD_VAR 0 1
41507: PPUSH
41508: CALL_OW 321
41512: PUSH
41513: LD_INT 2
41515: EQUAL
41516: ST_TO_ADDR
41517: GO 41695
41519: LD_INT 16
41521: DOUBLE
41522: EQUAL
41523: IFTRUE 41527
41525: GO 41554
41527: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41528: LD_ADDR_VAR 0 3
41532: PUSH
41533: LD_EXP 37
41537: PPUSH
41538: LD_VAR 0 1
41542: PPUSH
41543: CALL_OW 321
41547: PUSH
41548: LD_INT 2
41550: EQUAL
41551: ST_TO_ADDR
41552: GO 41695
41554: LD_INT 19
41556: DOUBLE
41557: EQUAL
41558: IFTRUE 41568
41560: LD_INT 23
41562: DOUBLE
41563: EQUAL
41564: IFTRUE 41568
41566: GO 41595
41568: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41569: LD_ADDR_VAR 0 3
41573: PUSH
41574: LD_EXP 36
41578: PPUSH
41579: LD_VAR 0 1
41583: PPUSH
41584: CALL_OW 321
41588: PUSH
41589: LD_INT 2
41591: EQUAL
41592: ST_TO_ADDR
41593: GO 41695
41595: LD_INT 17
41597: DOUBLE
41598: EQUAL
41599: IFTRUE 41603
41601: GO 41628
41603: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41604: LD_ADDR_VAR 0 3
41608: PUSH
41609: LD_INT 39
41611: PPUSH
41612: LD_VAR 0 1
41616: PPUSH
41617: CALL_OW 321
41621: PUSH
41622: LD_INT 2
41624: EQUAL
41625: ST_TO_ADDR
41626: GO 41695
41628: LD_INT 18
41630: DOUBLE
41631: EQUAL
41632: IFTRUE 41636
41634: GO 41661
41636: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41637: LD_ADDR_VAR 0 3
41641: PUSH
41642: LD_INT 40
41644: PPUSH
41645: LD_VAR 0 1
41649: PPUSH
41650: CALL_OW 321
41654: PUSH
41655: LD_INT 2
41657: EQUAL
41658: ST_TO_ADDR
41659: GO 41695
41661: LD_INT 27
41663: DOUBLE
41664: EQUAL
41665: IFTRUE 41669
41667: GO 41694
41669: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41670: LD_ADDR_VAR 0 3
41674: PUSH
41675: LD_INT 35
41677: PPUSH
41678: LD_VAR 0 1
41682: PPUSH
41683: CALL_OW 321
41687: PUSH
41688: LD_INT 2
41690: EQUAL
41691: ST_TO_ADDR
41692: GO 41695
41694: POP
// end ;
41695: LD_VAR 0 3
41699: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41700: LD_INT 0
41702: PPUSH
41703: PPUSH
41704: PPUSH
41705: PPUSH
41706: PPUSH
41707: PPUSH
41708: PPUSH
41709: PPUSH
41710: PPUSH
41711: PPUSH
41712: PPUSH
// result := false ;
41713: LD_ADDR_VAR 0 6
41717: PUSH
41718: LD_INT 0
41720: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41721: LD_VAR 0 1
41725: NOT
41726: PUSH
41727: LD_VAR 0 1
41731: PPUSH
41732: CALL_OW 266
41736: PUSH
41737: LD_INT 0
41739: PUSH
41740: LD_INT 1
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: IN
41747: NOT
41748: OR
41749: PUSH
41750: LD_VAR 0 2
41754: NOT
41755: OR
41756: PUSH
41757: LD_VAR 0 5
41761: PUSH
41762: LD_INT 0
41764: PUSH
41765: LD_INT 1
41767: PUSH
41768: LD_INT 2
41770: PUSH
41771: LD_INT 3
41773: PUSH
41774: LD_INT 4
41776: PUSH
41777: LD_INT 5
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: IN
41788: NOT
41789: OR
41790: PUSH
41791: LD_VAR 0 3
41795: PPUSH
41796: LD_VAR 0 4
41800: PPUSH
41801: CALL_OW 488
41805: NOT
41806: OR
41807: IFFALSE 41811
// exit ;
41809: GO 42547
// side := GetSide ( depot ) ;
41811: LD_ADDR_VAR 0 9
41815: PUSH
41816: LD_VAR 0 1
41820: PPUSH
41821: CALL_OW 255
41825: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
41826: LD_VAR 0 9
41830: PPUSH
41831: LD_VAR 0 2
41835: PPUSH
41836: CALL 41320 0 2
41840: NOT
41841: IFFALSE 41845
// exit ;
41843: GO 42547
// pom := GetBase ( depot ) ;
41845: LD_ADDR_VAR 0 10
41849: PUSH
41850: LD_VAR 0 1
41854: PPUSH
41855: CALL_OW 274
41859: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41860: LD_ADDR_VAR 0 11
41864: PUSH
41865: LD_VAR 0 2
41869: PPUSH
41870: LD_VAR 0 1
41874: PPUSH
41875: CALL_OW 248
41879: PPUSH
41880: CALL_OW 450
41884: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41885: LD_VAR 0 10
41889: PPUSH
41890: LD_INT 1
41892: PPUSH
41893: CALL_OW 275
41897: PUSH
41898: LD_VAR 0 11
41902: PUSH
41903: LD_INT 1
41905: ARRAY
41906: GREATEREQUAL
41907: PUSH
41908: LD_VAR 0 10
41912: PPUSH
41913: LD_INT 2
41915: PPUSH
41916: CALL_OW 275
41920: PUSH
41921: LD_VAR 0 11
41925: PUSH
41926: LD_INT 2
41928: ARRAY
41929: GREATEREQUAL
41930: AND
41931: PUSH
41932: LD_VAR 0 10
41936: PPUSH
41937: LD_INT 3
41939: PPUSH
41940: CALL_OW 275
41944: PUSH
41945: LD_VAR 0 11
41949: PUSH
41950: LD_INT 3
41952: ARRAY
41953: GREATEREQUAL
41954: AND
41955: NOT
41956: IFFALSE 41960
// exit ;
41958: GO 42547
// if GetBType ( depot ) = b_depot then
41960: LD_VAR 0 1
41964: PPUSH
41965: CALL_OW 266
41969: PUSH
41970: LD_INT 0
41972: EQUAL
41973: IFFALSE 41985
// dist := 28 else
41975: LD_ADDR_VAR 0 14
41979: PUSH
41980: LD_INT 28
41982: ST_TO_ADDR
41983: GO 41993
// dist := 36 ;
41985: LD_ADDR_VAR 0 14
41989: PUSH
41990: LD_INT 36
41992: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41993: LD_VAR 0 1
41997: PPUSH
41998: LD_VAR 0 3
42002: PPUSH
42003: LD_VAR 0 4
42007: PPUSH
42008: CALL_OW 297
42012: PUSH
42013: LD_VAR 0 14
42017: GREATER
42018: IFFALSE 42022
// exit ;
42020: GO 42547
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42022: LD_ADDR_VAR 0 12
42026: PUSH
42027: LD_VAR 0 2
42031: PPUSH
42032: LD_VAR 0 3
42036: PPUSH
42037: LD_VAR 0 4
42041: PPUSH
42042: LD_VAR 0 5
42046: PPUSH
42047: LD_VAR 0 1
42051: PPUSH
42052: CALL_OW 248
42056: PPUSH
42057: LD_INT 0
42059: PPUSH
42060: CALL 42552 0 6
42064: ST_TO_ADDR
// if not hexes then
42065: LD_VAR 0 12
42069: NOT
42070: IFFALSE 42074
// exit ;
42072: GO 42547
// hex := GetHexInfo ( x , y ) ;
42074: LD_ADDR_VAR 0 15
42078: PUSH
42079: LD_VAR 0 3
42083: PPUSH
42084: LD_VAR 0 4
42088: PPUSH
42089: CALL_OW 546
42093: ST_TO_ADDR
// if hex [ 1 ] then
42094: LD_VAR 0 15
42098: PUSH
42099: LD_INT 1
42101: ARRAY
42102: IFFALSE 42106
// exit ;
42104: GO 42547
// height := hex [ 2 ] ;
42106: LD_ADDR_VAR 0 13
42110: PUSH
42111: LD_VAR 0 15
42115: PUSH
42116: LD_INT 2
42118: ARRAY
42119: ST_TO_ADDR
// for i = 1 to hexes do
42120: LD_ADDR_VAR 0 7
42124: PUSH
42125: DOUBLE
42126: LD_INT 1
42128: DEC
42129: ST_TO_ADDR
42130: LD_VAR 0 12
42134: PUSH
42135: FOR_TO
42136: IFFALSE 42466
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42138: LD_VAR 0 12
42142: PUSH
42143: LD_VAR 0 7
42147: ARRAY
42148: PUSH
42149: LD_INT 1
42151: ARRAY
42152: PPUSH
42153: LD_VAR 0 12
42157: PUSH
42158: LD_VAR 0 7
42162: ARRAY
42163: PUSH
42164: LD_INT 2
42166: ARRAY
42167: PPUSH
42168: CALL_OW 488
42172: NOT
42173: PUSH
42174: LD_VAR 0 12
42178: PUSH
42179: LD_VAR 0 7
42183: ARRAY
42184: PUSH
42185: LD_INT 1
42187: ARRAY
42188: PPUSH
42189: LD_VAR 0 12
42193: PUSH
42194: LD_VAR 0 7
42198: ARRAY
42199: PUSH
42200: LD_INT 2
42202: ARRAY
42203: PPUSH
42204: CALL_OW 428
42208: PUSH
42209: LD_INT 0
42211: GREATER
42212: OR
42213: PUSH
42214: LD_VAR 0 12
42218: PUSH
42219: LD_VAR 0 7
42223: ARRAY
42224: PUSH
42225: LD_INT 1
42227: ARRAY
42228: PPUSH
42229: LD_VAR 0 12
42233: PUSH
42234: LD_VAR 0 7
42238: ARRAY
42239: PUSH
42240: LD_INT 2
42242: ARRAY
42243: PPUSH
42244: CALL_OW 351
42248: OR
42249: IFFALSE 42255
// exit ;
42251: POP
42252: POP
42253: GO 42547
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42255: LD_ADDR_VAR 0 8
42259: PUSH
42260: LD_VAR 0 12
42264: PUSH
42265: LD_VAR 0 7
42269: ARRAY
42270: PUSH
42271: LD_INT 1
42273: ARRAY
42274: PPUSH
42275: LD_VAR 0 12
42279: PUSH
42280: LD_VAR 0 7
42284: ARRAY
42285: PUSH
42286: LD_INT 2
42288: ARRAY
42289: PPUSH
42290: CALL_OW 546
42294: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42295: LD_VAR 0 8
42299: PUSH
42300: LD_INT 1
42302: ARRAY
42303: PUSH
42304: LD_VAR 0 8
42308: PUSH
42309: LD_INT 2
42311: ARRAY
42312: PUSH
42313: LD_VAR 0 13
42317: PUSH
42318: LD_INT 2
42320: PLUS
42321: GREATER
42322: OR
42323: PUSH
42324: LD_VAR 0 8
42328: PUSH
42329: LD_INT 2
42331: ARRAY
42332: PUSH
42333: LD_VAR 0 13
42337: PUSH
42338: LD_INT 2
42340: MINUS
42341: LESS
42342: OR
42343: PUSH
42344: LD_VAR 0 8
42348: PUSH
42349: LD_INT 3
42351: ARRAY
42352: PUSH
42353: LD_INT 0
42355: PUSH
42356: LD_INT 8
42358: PUSH
42359: LD_INT 9
42361: PUSH
42362: LD_INT 10
42364: PUSH
42365: LD_INT 11
42367: PUSH
42368: LD_INT 12
42370: PUSH
42371: LD_INT 13
42373: PUSH
42374: LD_INT 16
42376: PUSH
42377: LD_INT 17
42379: PUSH
42380: LD_INT 18
42382: PUSH
42383: LD_INT 19
42385: PUSH
42386: LD_INT 20
42388: PUSH
42389: LD_INT 21
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: IN
42407: NOT
42408: OR
42409: PUSH
42410: LD_VAR 0 8
42414: PUSH
42415: LD_INT 5
42417: ARRAY
42418: NOT
42419: OR
42420: PUSH
42421: LD_VAR 0 8
42425: PUSH
42426: LD_INT 6
42428: ARRAY
42429: PUSH
42430: LD_INT 1
42432: PUSH
42433: LD_INT 2
42435: PUSH
42436: LD_INT 7
42438: PUSH
42439: LD_INT 9
42441: PUSH
42442: LD_INT 10
42444: PUSH
42445: LD_INT 11
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: IN
42456: NOT
42457: OR
42458: IFFALSE 42464
// exit ;
42460: POP
42461: POP
42462: GO 42547
// end ;
42464: GO 42135
42466: POP
42467: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42468: LD_VAR 0 9
42472: PPUSH
42473: LD_VAR 0 3
42477: PPUSH
42478: LD_VAR 0 4
42482: PPUSH
42483: LD_INT 20
42485: PPUSH
42486: CALL 34493 0 4
42490: PUSH
42491: LD_INT 4
42493: ARRAY
42494: IFFALSE 42498
// exit ;
42496: GO 42547
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42498: LD_VAR 0 2
42502: PUSH
42503: LD_INT 29
42505: PUSH
42506: LD_INT 30
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: IN
42513: PUSH
42514: LD_VAR 0 3
42518: PPUSH
42519: LD_VAR 0 4
42523: PPUSH
42524: LD_VAR 0 9
42528: PPUSH
42529: CALL_OW 440
42533: NOT
42534: AND
42535: IFFALSE 42539
// exit ;
42537: GO 42547
// result := true ;
42539: LD_ADDR_VAR 0 6
42543: PUSH
42544: LD_INT 1
42546: ST_TO_ADDR
// end ;
42547: LD_VAR 0 6
42551: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42552: LD_INT 0
42554: PPUSH
42555: PPUSH
42556: PPUSH
42557: PPUSH
42558: PPUSH
42559: PPUSH
42560: PPUSH
42561: PPUSH
42562: PPUSH
42563: PPUSH
42564: PPUSH
42565: PPUSH
42566: PPUSH
42567: PPUSH
42568: PPUSH
42569: PPUSH
42570: PPUSH
42571: PPUSH
42572: PPUSH
42573: PPUSH
42574: PPUSH
42575: PPUSH
42576: PPUSH
42577: PPUSH
42578: PPUSH
42579: PPUSH
42580: PPUSH
42581: PPUSH
42582: PPUSH
42583: PPUSH
42584: PPUSH
42585: PPUSH
42586: PPUSH
42587: PPUSH
42588: PPUSH
42589: PPUSH
42590: PPUSH
42591: PPUSH
42592: PPUSH
42593: PPUSH
42594: PPUSH
42595: PPUSH
42596: PPUSH
42597: PPUSH
42598: PPUSH
42599: PPUSH
42600: PPUSH
42601: PPUSH
42602: PPUSH
42603: PPUSH
42604: PPUSH
42605: PPUSH
42606: PPUSH
42607: PPUSH
42608: PPUSH
42609: PPUSH
42610: PPUSH
42611: PPUSH
// result = [ ] ;
42612: LD_ADDR_VAR 0 7
42616: PUSH
42617: EMPTY
42618: ST_TO_ADDR
// temp_list = [ ] ;
42619: LD_ADDR_VAR 0 9
42623: PUSH
42624: EMPTY
42625: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42626: LD_VAR 0 4
42630: PUSH
42631: LD_INT 0
42633: PUSH
42634: LD_INT 1
42636: PUSH
42637: LD_INT 2
42639: PUSH
42640: LD_INT 3
42642: PUSH
42643: LD_INT 4
42645: PUSH
42646: LD_INT 5
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: IN
42657: NOT
42658: PUSH
42659: LD_VAR 0 1
42663: PUSH
42664: LD_INT 0
42666: PUSH
42667: LD_INT 1
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: IN
42674: PUSH
42675: LD_VAR 0 5
42679: PUSH
42680: LD_INT 1
42682: PUSH
42683: LD_INT 2
42685: PUSH
42686: LD_INT 3
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: LIST
42693: IN
42694: NOT
42695: AND
42696: OR
42697: IFFALSE 42701
// exit ;
42699: GO 61092
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42701: LD_VAR 0 1
42705: PUSH
42706: LD_INT 6
42708: PUSH
42709: LD_INT 7
42711: PUSH
42712: LD_INT 8
42714: PUSH
42715: LD_INT 13
42717: PUSH
42718: LD_INT 12
42720: PUSH
42721: LD_INT 15
42723: PUSH
42724: LD_INT 11
42726: PUSH
42727: LD_INT 14
42729: PUSH
42730: LD_INT 10
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: IN
42744: IFFALSE 42754
// btype = b_lab ;
42746: LD_ADDR_VAR 0 1
42750: PUSH
42751: LD_INT 6
42753: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42754: LD_VAR 0 6
42758: PUSH
42759: LD_INT 0
42761: PUSH
42762: LD_INT 1
42764: PUSH
42765: LD_INT 2
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: LIST
42772: IN
42773: NOT
42774: PUSH
42775: LD_VAR 0 1
42779: PUSH
42780: LD_INT 0
42782: PUSH
42783: LD_INT 1
42785: PUSH
42786: LD_INT 2
42788: PUSH
42789: LD_INT 3
42791: PUSH
42792: LD_INT 6
42794: PUSH
42795: LD_INT 36
42797: PUSH
42798: LD_INT 4
42800: PUSH
42801: LD_INT 5
42803: PUSH
42804: LD_INT 31
42806: PUSH
42807: LD_INT 32
42809: PUSH
42810: LD_INT 33
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: IN
42826: NOT
42827: PUSH
42828: LD_VAR 0 6
42832: PUSH
42833: LD_INT 1
42835: EQUAL
42836: AND
42837: OR
42838: PUSH
42839: LD_VAR 0 1
42843: PUSH
42844: LD_INT 2
42846: PUSH
42847: LD_INT 3
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: IN
42854: NOT
42855: PUSH
42856: LD_VAR 0 6
42860: PUSH
42861: LD_INT 2
42863: EQUAL
42864: AND
42865: OR
42866: IFFALSE 42876
// mode = 0 ;
42868: LD_ADDR_VAR 0 6
42872: PUSH
42873: LD_INT 0
42875: ST_TO_ADDR
// case mode of 0 :
42876: LD_VAR 0 6
42880: PUSH
42881: LD_INT 0
42883: DOUBLE
42884: EQUAL
42885: IFTRUE 42889
42887: GO 54342
42889: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42890: LD_ADDR_VAR 0 11
42894: PUSH
42895: LD_INT 0
42897: PUSH
42898: LD_INT 0
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 0
42907: PUSH
42908: LD_INT 1
42910: NEG
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 1
42918: PUSH
42919: LD_INT 0
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 1
42928: PUSH
42929: LD_INT 1
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 0
42938: PUSH
42939: LD_INT 1
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 1
42948: NEG
42949: PUSH
42950: LD_INT 0
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 1
42959: NEG
42960: PUSH
42961: LD_INT 1
42963: NEG
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 1
42971: NEG
42972: PUSH
42973: LD_INT 2
42975: NEG
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: LD_INT 0
42983: PUSH
42984: LD_INT 2
42986: NEG
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 1
42994: PUSH
42995: LD_INT 1
42997: NEG
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 1
43005: PUSH
43006: LD_INT 2
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 0
43015: PUSH
43016: LD_INT 2
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 1
43025: NEG
43026: PUSH
43027: LD_INT 1
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 1
43036: PUSH
43037: LD_INT 3
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 0
43046: PUSH
43047: LD_INT 3
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 1
43056: NEG
43057: PUSH
43058: LD_INT 2
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43083: LD_ADDR_VAR 0 12
43087: PUSH
43088: LD_INT 0
43090: PUSH
43091: LD_INT 0
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 0
43100: PUSH
43101: LD_INT 1
43103: NEG
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 1
43111: PUSH
43112: LD_INT 0
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 1
43121: PUSH
43122: LD_INT 1
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 0
43131: PUSH
43132: LD_INT 1
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 1
43141: NEG
43142: PUSH
43143: LD_INT 0
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 1
43152: NEG
43153: PUSH
43154: LD_INT 1
43156: NEG
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 1
43164: PUSH
43165: LD_INT 1
43167: NEG
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 2
43175: PUSH
43176: LD_INT 0
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 2
43185: PUSH
43186: LD_INT 1
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 1
43195: NEG
43196: PUSH
43197: LD_INT 1
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 2
43206: NEG
43207: PUSH
43208: LD_INT 0
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 2
43217: NEG
43218: PUSH
43219: LD_INT 1
43221: NEG
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 2
43229: NEG
43230: PUSH
43231: LD_INT 1
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 3
43240: NEG
43241: PUSH
43242: LD_INT 0
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 3
43251: NEG
43252: PUSH
43253: LD_INT 1
43255: NEG
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43279: LD_ADDR_VAR 0 13
43283: PUSH
43284: LD_INT 0
43286: PUSH
43287: LD_INT 0
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 0
43296: PUSH
43297: LD_INT 1
43299: NEG
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 1
43307: PUSH
43308: LD_INT 0
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 1
43317: PUSH
43318: LD_INT 1
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 0
43327: PUSH
43328: LD_INT 1
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 1
43337: NEG
43338: PUSH
43339: LD_INT 0
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: LD_INT 1
43348: NEG
43349: PUSH
43350: LD_INT 1
43352: NEG
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 1
43360: NEG
43361: PUSH
43362: LD_INT 2
43364: NEG
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 2
43372: PUSH
43373: LD_INT 1
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 2
43382: PUSH
43383: LD_INT 2
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 1
43392: PUSH
43393: LD_INT 2
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 2
43402: NEG
43403: PUSH
43404: LD_INT 1
43406: NEG
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 2
43414: NEG
43415: PUSH
43416: LD_INT 2
43418: NEG
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 2
43426: NEG
43427: PUSH
43428: LD_INT 3
43430: NEG
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 3
43438: NEG
43439: PUSH
43440: LD_INT 2
43442: NEG
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 3
43450: NEG
43451: PUSH
43452: LD_INT 3
43454: NEG
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43478: LD_ADDR_VAR 0 14
43482: PUSH
43483: LD_INT 0
43485: PUSH
43486: LD_INT 0
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 0
43495: PUSH
43496: LD_INT 1
43498: NEG
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 1
43506: PUSH
43507: LD_INT 0
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 1
43516: PUSH
43517: LD_INT 1
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 0
43526: PUSH
43527: LD_INT 1
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 1
43536: NEG
43537: PUSH
43538: LD_INT 0
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 1
43547: NEG
43548: PUSH
43549: LD_INT 1
43551: NEG
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 1
43559: NEG
43560: PUSH
43561: LD_INT 2
43563: NEG
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 0
43571: PUSH
43572: LD_INT 2
43574: NEG
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 1
43582: PUSH
43583: LD_INT 1
43585: NEG
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 1
43593: PUSH
43594: LD_INT 2
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 0
43603: PUSH
43604: LD_INT 2
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 1
43613: NEG
43614: PUSH
43615: LD_INT 1
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 1
43624: NEG
43625: PUSH
43626: LD_INT 3
43628: NEG
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 0
43636: PUSH
43637: LD_INT 3
43639: NEG
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 1
43647: PUSH
43648: LD_INT 2
43650: NEG
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43674: LD_ADDR_VAR 0 15
43678: PUSH
43679: LD_INT 0
43681: PUSH
43682: LD_INT 0
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 0
43691: PUSH
43692: LD_INT 1
43694: NEG
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 1
43702: PUSH
43703: LD_INT 0
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 1
43712: PUSH
43713: LD_INT 1
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 0
43722: PUSH
43723: LD_INT 1
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 1
43732: NEG
43733: PUSH
43734: LD_INT 0
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 1
43743: NEG
43744: PUSH
43745: LD_INT 1
43747: NEG
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 1
43755: PUSH
43756: LD_INT 1
43758: NEG
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 2
43766: PUSH
43767: LD_INT 0
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 2
43776: PUSH
43777: LD_INT 1
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 1
43786: NEG
43787: PUSH
43788: LD_INT 1
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 2
43797: NEG
43798: PUSH
43799: LD_INT 0
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 2
43808: NEG
43809: PUSH
43810: LD_INT 1
43812: NEG
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 2
43820: PUSH
43821: LD_INT 1
43823: NEG
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 3
43831: PUSH
43832: LD_INT 0
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 3
43841: PUSH
43842: LD_INT 1
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43867: LD_ADDR_VAR 0 16
43871: PUSH
43872: LD_INT 0
43874: PUSH
43875: LD_INT 0
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 0
43884: PUSH
43885: LD_INT 1
43887: NEG
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 1
43895: PUSH
43896: LD_INT 0
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 1
43905: PUSH
43906: LD_INT 1
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 0
43915: PUSH
43916: LD_INT 1
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 1
43925: NEG
43926: PUSH
43927: LD_INT 0
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 1
43936: NEG
43937: PUSH
43938: LD_INT 1
43940: NEG
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 1
43948: NEG
43949: PUSH
43950: LD_INT 2
43952: NEG
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 2
43960: PUSH
43961: LD_INT 1
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 2
43970: PUSH
43971: LD_INT 2
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 1
43980: PUSH
43981: LD_INT 2
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 2
43990: NEG
43991: PUSH
43992: LD_INT 1
43994: NEG
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 2
44002: NEG
44003: PUSH
44004: LD_INT 2
44006: NEG
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 3
44014: PUSH
44015: LD_INT 2
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 3
44024: PUSH
44025: LD_INT 3
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: LD_INT 2
44034: PUSH
44035: LD_INT 3
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44060: LD_ADDR_VAR 0 17
44064: PUSH
44065: LD_INT 0
44067: PUSH
44068: LD_INT 0
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 0
44077: PUSH
44078: LD_INT 1
44080: NEG
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 1
44088: PUSH
44089: LD_INT 0
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 1
44098: PUSH
44099: LD_INT 1
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 0
44108: PUSH
44109: LD_INT 1
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 1
44118: NEG
44119: PUSH
44120: LD_INT 0
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 1
44129: NEG
44130: PUSH
44131: LD_INT 1
44133: NEG
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 1
44141: NEG
44142: PUSH
44143: LD_INT 2
44145: NEG
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 0
44153: PUSH
44154: LD_INT 2
44156: NEG
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 1
44164: PUSH
44165: LD_INT 1
44167: NEG
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 2
44175: PUSH
44176: LD_INT 0
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 2
44185: PUSH
44186: LD_INT 1
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 2
44195: PUSH
44196: LD_INT 2
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 1
44205: PUSH
44206: LD_INT 2
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 0
44215: PUSH
44216: LD_INT 2
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 1
44225: NEG
44226: PUSH
44227: LD_INT 1
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 2
44236: NEG
44237: PUSH
44238: LD_INT 0
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 2
44247: NEG
44248: PUSH
44249: LD_INT 1
44251: NEG
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 2
44259: NEG
44260: PUSH
44261: LD_INT 2
44263: NEG
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44290: LD_ADDR_VAR 0 18
44294: PUSH
44295: LD_INT 0
44297: PUSH
44298: LD_INT 0
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 0
44307: PUSH
44308: LD_INT 1
44310: NEG
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 1
44318: PUSH
44319: LD_INT 0
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 1
44328: PUSH
44329: LD_INT 1
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 0
44338: PUSH
44339: LD_INT 1
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 1
44348: NEG
44349: PUSH
44350: LD_INT 0
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 1
44359: NEG
44360: PUSH
44361: LD_INT 1
44363: NEG
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 1
44371: NEG
44372: PUSH
44373: LD_INT 2
44375: NEG
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 0
44383: PUSH
44384: LD_INT 2
44386: NEG
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 1
44394: PUSH
44395: LD_INT 1
44397: NEG
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 2
44405: PUSH
44406: LD_INT 0
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 2
44415: PUSH
44416: LD_INT 1
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 2
44425: PUSH
44426: LD_INT 2
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 1
44435: PUSH
44436: LD_INT 2
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 0
44445: PUSH
44446: LD_INT 2
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 1
44455: NEG
44456: PUSH
44457: LD_INT 1
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 2
44466: NEG
44467: PUSH
44468: LD_INT 0
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 2
44477: NEG
44478: PUSH
44479: LD_INT 1
44481: NEG
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 2
44489: NEG
44490: PUSH
44491: LD_INT 2
44493: NEG
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44520: LD_ADDR_VAR 0 19
44524: PUSH
44525: LD_INT 0
44527: PUSH
44528: LD_INT 0
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 0
44537: PUSH
44538: LD_INT 1
44540: NEG
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 1
44548: PUSH
44549: LD_INT 0
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 1
44558: PUSH
44559: LD_INT 1
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 0
44568: PUSH
44569: LD_INT 1
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 1
44578: NEG
44579: PUSH
44580: LD_INT 0
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 1
44589: NEG
44590: PUSH
44591: LD_INT 1
44593: NEG
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 1
44601: NEG
44602: PUSH
44603: LD_INT 2
44605: NEG
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 0
44613: PUSH
44614: LD_INT 2
44616: NEG
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 1
44624: PUSH
44625: LD_INT 1
44627: NEG
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 2
44635: PUSH
44636: LD_INT 0
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 2
44645: PUSH
44646: LD_INT 1
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 2
44655: PUSH
44656: LD_INT 2
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 1
44665: PUSH
44666: LD_INT 2
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 0
44675: PUSH
44676: LD_INT 2
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 1
44685: NEG
44686: PUSH
44687: LD_INT 1
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 2
44696: NEG
44697: PUSH
44698: LD_INT 0
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 2
44707: NEG
44708: PUSH
44709: LD_INT 1
44711: NEG
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 2
44719: NEG
44720: PUSH
44721: LD_INT 2
44723: NEG
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44750: LD_ADDR_VAR 0 20
44754: PUSH
44755: LD_INT 0
44757: PUSH
44758: LD_INT 0
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 0
44767: PUSH
44768: LD_INT 1
44770: NEG
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 1
44778: PUSH
44779: LD_INT 0
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 1
44788: PUSH
44789: LD_INT 1
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 0
44798: PUSH
44799: LD_INT 1
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 1
44808: NEG
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 1
44819: NEG
44820: PUSH
44821: LD_INT 1
44823: NEG
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 1
44831: NEG
44832: PUSH
44833: LD_INT 2
44835: NEG
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 0
44843: PUSH
44844: LD_INT 2
44846: NEG
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 1
44854: PUSH
44855: LD_INT 1
44857: NEG
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 2
44865: PUSH
44866: LD_INT 0
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 2
44875: PUSH
44876: LD_INT 1
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 2
44885: PUSH
44886: LD_INT 2
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 1
44895: PUSH
44896: LD_INT 2
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 0
44905: PUSH
44906: LD_INT 2
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 1
44915: NEG
44916: PUSH
44917: LD_INT 1
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 2
44926: NEG
44927: PUSH
44928: LD_INT 0
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 2
44937: NEG
44938: PUSH
44939: LD_INT 1
44941: NEG
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 2
44949: NEG
44950: PUSH
44951: LD_INT 2
44953: NEG
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44980: LD_ADDR_VAR 0 21
44984: PUSH
44985: LD_INT 0
44987: PUSH
44988: LD_INT 0
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 0
44997: PUSH
44998: LD_INT 1
45000: NEG
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 1
45008: PUSH
45009: LD_INT 0
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 1
45018: PUSH
45019: LD_INT 1
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 0
45028: PUSH
45029: LD_INT 1
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 1
45038: NEG
45039: PUSH
45040: LD_INT 0
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 1
45049: NEG
45050: PUSH
45051: LD_INT 1
45053: NEG
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 1
45061: NEG
45062: PUSH
45063: LD_INT 2
45065: NEG
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 0
45073: PUSH
45074: LD_INT 2
45076: NEG
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 1
45084: PUSH
45085: LD_INT 1
45087: NEG
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 2
45095: PUSH
45096: LD_INT 0
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 2
45105: PUSH
45106: LD_INT 1
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 2
45115: PUSH
45116: LD_INT 2
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 1
45125: PUSH
45126: LD_INT 2
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: LD_INT 2
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 1
45145: NEG
45146: PUSH
45147: LD_INT 1
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 2
45156: NEG
45157: PUSH
45158: LD_INT 0
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 2
45167: NEG
45168: PUSH
45169: LD_INT 1
45171: NEG
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 2
45179: NEG
45180: PUSH
45181: LD_INT 2
45183: NEG
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45210: LD_ADDR_VAR 0 22
45214: PUSH
45215: LD_INT 0
45217: PUSH
45218: LD_INT 0
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 0
45227: PUSH
45228: LD_INT 1
45230: NEG
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 1
45238: PUSH
45239: LD_INT 0
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 1
45248: PUSH
45249: LD_INT 1
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 0
45258: PUSH
45259: LD_INT 1
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 1
45268: NEG
45269: PUSH
45270: LD_INT 0
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 1
45279: NEG
45280: PUSH
45281: LD_INT 1
45283: NEG
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 1
45291: NEG
45292: PUSH
45293: LD_INT 2
45295: NEG
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 0
45303: PUSH
45304: LD_INT 2
45306: NEG
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 1
45314: PUSH
45315: LD_INT 1
45317: NEG
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 2
45325: PUSH
45326: LD_INT 0
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 2
45335: PUSH
45336: LD_INT 1
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 2
45345: PUSH
45346: LD_INT 2
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 1
45355: PUSH
45356: LD_INT 2
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 0
45365: PUSH
45366: LD_INT 2
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 1
45375: NEG
45376: PUSH
45377: LD_INT 1
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 2
45386: NEG
45387: PUSH
45388: LD_INT 0
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 2
45397: NEG
45398: PUSH
45399: LD_INT 1
45401: NEG
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 2
45409: NEG
45410: PUSH
45411: LD_INT 2
45413: NEG
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45440: LD_ADDR_VAR 0 23
45444: PUSH
45445: LD_INT 0
45447: PUSH
45448: LD_INT 0
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: LD_INT 1
45460: NEG
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 1
45468: PUSH
45469: LD_INT 0
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 1
45478: PUSH
45479: LD_INT 1
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 0
45488: PUSH
45489: LD_INT 1
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 1
45498: NEG
45499: PUSH
45500: LD_INT 0
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 1
45509: NEG
45510: PUSH
45511: LD_INT 1
45513: NEG
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 1
45521: NEG
45522: PUSH
45523: LD_INT 2
45525: NEG
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 0
45533: PUSH
45534: LD_INT 2
45536: NEG
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 1
45544: PUSH
45545: LD_INT 1
45547: NEG
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 2
45555: PUSH
45556: LD_INT 0
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 2
45565: PUSH
45566: LD_INT 1
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 2
45575: PUSH
45576: LD_INT 2
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 1
45585: PUSH
45586: LD_INT 2
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 0
45595: PUSH
45596: LD_INT 2
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 1
45605: NEG
45606: PUSH
45607: LD_INT 1
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 2
45616: NEG
45617: PUSH
45618: LD_INT 0
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 2
45627: NEG
45628: PUSH
45629: LD_INT 1
45631: NEG
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 2
45639: NEG
45640: PUSH
45641: LD_INT 2
45643: NEG
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 2
45651: NEG
45652: PUSH
45653: LD_INT 3
45655: NEG
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 1
45663: NEG
45664: PUSH
45665: LD_INT 3
45667: NEG
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 1
45675: PUSH
45676: LD_INT 2
45678: NEG
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 2
45686: PUSH
45687: LD_INT 1
45689: NEG
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45720: LD_ADDR_VAR 0 24
45724: PUSH
45725: LD_INT 0
45727: PUSH
45728: LD_INT 0
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 0
45737: PUSH
45738: LD_INT 1
45740: NEG
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 1
45748: PUSH
45749: LD_INT 0
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 1
45758: PUSH
45759: LD_INT 1
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 0
45768: PUSH
45769: LD_INT 1
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 1
45778: NEG
45779: PUSH
45780: LD_INT 0
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 1
45789: NEG
45790: PUSH
45791: LD_INT 1
45793: NEG
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 1
45801: NEG
45802: PUSH
45803: LD_INT 2
45805: NEG
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 0
45813: PUSH
45814: LD_INT 2
45816: NEG
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 1
45824: PUSH
45825: LD_INT 1
45827: NEG
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 2
45835: PUSH
45836: LD_INT 0
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 2
45845: PUSH
45846: LD_INT 1
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 2
45855: PUSH
45856: LD_INT 2
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 1
45865: PUSH
45866: LD_INT 2
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 0
45875: PUSH
45876: LD_INT 2
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 1
45885: NEG
45886: PUSH
45887: LD_INT 1
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 2
45896: NEG
45897: PUSH
45898: LD_INT 0
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 2
45907: NEG
45908: PUSH
45909: LD_INT 1
45911: NEG
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 2
45919: NEG
45920: PUSH
45921: LD_INT 2
45923: NEG
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 1
45931: PUSH
45932: LD_INT 2
45934: NEG
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 2
45942: PUSH
45943: LD_INT 1
45945: NEG
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 3
45953: PUSH
45954: LD_INT 1
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 3
45963: PUSH
45964: LD_INT 2
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45996: LD_ADDR_VAR 0 25
46000: PUSH
46001: LD_INT 0
46003: PUSH
46004: LD_INT 0
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 0
46013: PUSH
46014: LD_INT 1
46016: NEG
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 1
46024: PUSH
46025: LD_INT 0
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 1
46034: PUSH
46035: LD_INT 1
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 0
46044: PUSH
46045: LD_INT 1
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 1
46054: NEG
46055: PUSH
46056: LD_INT 0
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 1
46065: NEG
46066: PUSH
46067: LD_INT 1
46069: NEG
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 1
46077: NEG
46078: PUSH
46079: LD_INT 2
46081: NEG
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 0
46089: PUSH
46090: LD_INT 2
46092: NEG
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 1
46100: PUSH
46101: LD_INT 1
46103: NEG
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 2
46111: PUSH
46112: LD_INT 0
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 2
46121: PUSH
46122: LD_INT 1
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 2
46131: PUSH
46132: LD_INT 2
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 1
46141: PUSH
46142: LD_INT 2
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 0
46151: PUSH
46152: LD_INT 2
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 1
46161: NEG
46162: PUSH
46163: LD_INT 1
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 2
46172: NEG
46173: PUSH
46174: LD_INT 0
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 2
46183: NEG
46184: PUSH
46185: LD_INT 1
46187: NEG
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 2
46195: NEG
46196: PUSH
46197: LD_INT 2
46199: NEG
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 3
46207: PUSH
46208: LD_INT 1
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 3
46217: PUSH
46218: LD_INT 2
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 2
46227: PUSH
46228: LD_INT 3
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 1
46237: PUSH
46238: LD_INT 3
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46270: LD_ADDR_VAR 0 26
46274: PUSH
46275: LD_INT 0
46277: PUSH
46278: LD_INT 0
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 0
46287: PUSH
46288: LD_INT 1
46290: NEG
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 1
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 1
46308: PUSH
46309: LD_INT 1
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 0
46318: PUSH
46319: LD_INT 1
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 1
46328: NEG
46329: PUSH
46330: LD_INT 0
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 1
46339: NEG
46340: PUSH
46341: LD_INT 1
46343: NEG
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 1
46351: NEG
46352: PUSH
46353: LD_INT 2
46355: NEG
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 0
46363: PUSH
46364: LD_INT 2
46366: NEG
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 1
46374: PUSH
46375: LD_INT 1
46377: NEG
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 2
46385: PUSH
46386: LD_INT 0
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 2
46395: PUSH
46396: LD_INT 1
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 2
46405: PUSH
46406: LD_INT 2
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 1
46415: PUSH
46416: LD_INT 2
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 0
46425: PUSH
46426: LD_INT 2
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 1
46435: NEG
46436: PUSH
46437: LD_INT 1
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 2
46446: NEG
46447: PUSH
46448: LD_INT 0
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 2
46457: NEG
46458: PUSH
46459: LD_INT 1
46461: NEG
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 2
46469: NEG
46470: PUSH
46471: LD_INT 2
46473: NEG
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 2
46481: PUSH
46482: LD_INT 3
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 1
46491: PUSH
46492: LD_INT 3
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 1
46501: NEG
46502: PUSH
46503: LD_INT 2
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 2
46512: NEG
46513: PUSH
46514: LD_INT 1
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46546: LD_ADDR_VAR 0 27
46550: PUSH
46551: LD_INT 0
46553: PUSH
46554: LD_INT 0
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 0
46563: PUSH
46564: LD_INT 1
46566: NEG
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 1
46574: PUSH
46575: LD_INT 0
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 1
46584: PUSH
46585: LD_INT 1
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 0
46594: PUSH
46595: LD_INT 1
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 1
46604: NEG
46605: PUSH
46606: LD_INT 0
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 1
46615: NEG
46616: PUSH
46617: LD_INT 1
46619: NEG
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 1
46627: NEG
46628: PUSH
46629: LD_INT 2
46631: NEG
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 0
46639: PUSH
46640: LD_INT 2
46642: NEG
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 1
46650: PUSH
46651: LD_INT 1
46653: NEG
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 2
46661: PUSH
46662: LD_INT 0
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 2
46671: PUSH
46672: LD_INT 1
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 2
46681: PUSH
46682: LD_INT 2
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 1
46691: PUSH
46692: LD_INT 2
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 0
46701: PUSH
46702: LD_INT 2
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 1
46711: NEG
46712: PUSH
46713: LD_INT 1
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 2
46722: NEG
46723: PUSH
46724: LD_INT 0
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 2
46733: NEG
46734: PUSH
46735: LD_INT 1
46737: NEG
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 2
46745: NEG
46746: PUSH
46747: LD_INT 2
46749: NEG
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 1
46757: NEG
46758: PUSH
46759: LD_INT 2
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 2
46768: NEG
46769: PUSH
46770: LD_INT 1
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 3
46779: NEG
46780: PUSH
46781: LD_INT 1
46783: NEG
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 3
46791: NEG
46792: PUSH
46793: LD_INT 2
46795: NEG
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46826: LD_ADDR_VAR 0 28
46830: PUSH
46831: LD_INT 0
46833: PUSH
46834: LD_INT 0
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 0
46843: PUSH
46844: LD_INT 1
46846: NEG
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 1
46854: PUSH
46855: LD_INT 0
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 1
46864: PUSH
46865: LD_INT 1
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 0
46874: PUSH
46875: LD_INT 1
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 1
46884: NEG
46885: PUSH
46886: LD_INT 0
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 1
46895: NEG
46896: PUSH
46897: LD_INT 1
46899: NEG
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 1
46907: NEG
46908: PUSH
46909: LD_INT 2
46911: NEG
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 0
46919: PUSH
46920: LD_INT 2
46922: NEG
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 1
46930: PUSH
46931: LD_INT 1
46933: NEG
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 2
46941: PUSH
46942: LD_INT 0
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 2
46951: PUSH
46952: LD_INT 1
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 2
46961: PUSH
46962: LD_INT 2
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 1
46971: PUSH
46972: LD_INT 2
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 0
46981: PUSH
46982: LD_INT 2
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 1
46991: NEG
46992: PUSH
46993: LD_INT 1
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 2
47002: NEG
47003: PUSH
47004: LD_INT 0
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 2
47013: NEG
47014: PUSH
47015: LD_INT 1
47017: NEG
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 2
47025: NEG
47026: PUSH
47027: LD_INT 2
47029: NEG
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 2
47037: NEG
47038: PUSH
47039: LD_INT 3
47041: NEG
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 1
47049: NEG
47050: PUSH
47051: LD_INT 3
47053: NEG
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 3
47061: NEG
47062: PUSH
47063: LD_INT 1
47065: NEG
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 3
47073: NEG
47074: PUSH
47075: LD_INT 2
47077: NEG
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47108: LD_ADDR_VAR 0 29
47112: PUSH
47113: LD_INT 0
47115: PUSH
47116: LD_INT 0
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 0
47125: PUSH
47126: LD_INT 1
47128: NEG
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 1
47136: PUSH
47137: LD_INT 0
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 1
47146: PUSH
47147: LD_INT 1
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 0
47156: PUSH
47157: LD_INT 1
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 1
47166: NEG
47167: PUSH
47168: LD_INT 0
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 1
47177: NEG
47178: PUSH
47179: LD_INT 1
47181: NEG
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 1
47189: NEG
47190: PUSH
47191: LD_INT 2
47193: NEG
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 0
47201: PUSH
47202: LD_INT 2
47204: NEG
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 1
47212: PUSH
47213: LD_INT 1
47215: NEG
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 2
47223: PUSH
47224: LD_INT 0
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 2
47233: PUSH
47234: LD_INT 1
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 1
47243: PUSH
47244: LD_INT 2
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 0
47253: PUSH
47254: LD_INT 2
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 1
47263: NEG
47264: PUSH
47265: LD_INT 1
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 2
47274: NEG
47275: PUSH
47276: LD_INT 1
47278: NEG
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 2
47286: NEG
47287: PUSH
47288: LD_INT 2
47290: NEG
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 2
47298: NEG
47299: PUSH
47300: LD_INT 3
47302: NEG
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 2
47310: PUSH
47311: LD_INT 1
47313: NEG
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 3
47321: PUSH
47322: LD_INT 1
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 1
47331: PUSH
47332: LD_INT 3
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 1
47341: NEG
47342: PUSH
47343: LD_INT 2
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 3
47352: NEG
47353: PUSH
47354: LD_INT 2
47356: NEG
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47387: LD_ADDR_VAR 0 30
47391: PUSH
47392: LD_INT 0
47394: PUSH
47395: LD_INT 0
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 0
47404: PUSH
47405: LD_INT 1
47407: NEG
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 1
47415: PUSH
47416: LD_INT 0
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 1
47425: PUSH
47426: LD_INT 1
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 0
47435: PUSH
47436: LD_INT 1
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 1
47445: NEG
47446: PUSH
47447: LD_INT 0
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 1
47456: NEG
47457: PUSH
47458: LD_INT 1
47460: NEG
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 1
47468: NEG
47469: PUSH
47470: LD_INT 2
47472: NEG
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 0
47480: PUSH
47481: LD_INT 2
47483: NEG
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 1
47491: PUSH
47492: LD_INT 1
47494: NEG
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 2
47502: PUSH
47503: LD_INT 0
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 2
47512: PUSH
47513: LD_INT 1
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 2
47522: PUSH
47523: LD_INT 2
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 1
47532: PUSH
47533: LD_INT 2
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 1
47542: NEG
47543: PUSH
47544: LD_INT 1
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 2
47553: NEG
47554: PUSH
47555: LD_INT 0
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 2
47564: NEG
47565: PUSH
47566: LD_INT 1
47568: NEG
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 1
47576: NEG
47577: PUSH
47578: LD_INT 3
47580: NEG
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 1
47588: PUSH
47589: LD_INT 2
47591: NEG
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 3
47599: PUSH
47600: LD_INT 2
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 2
47609: PUSH
47610: LD_INT 3
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 2
47619: NEG
47620: PUSH
47621: LD_INT 1
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 3
47630: NEG
47631: PUSH
47632: LD_INT 1
47634: NEG
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47665: LD_ADDR_VAR 0 31
47669: PUSH
47670: LD_INT 0
47672: PUSH
47673: LD_INT 0
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 0
47682: PUSH
47683: LD_INT 1
47685: NEG
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 1
47693: PUSH
47694: LD_INT 0
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 1
47703: PUSH
47704: LD_INT 1
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 0
47713: PUSH
47714: LD_INT 1
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 1
47723: NEG
47724: PUSH
47725: LD_INT 0
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 1
47734: NEG
47735: PUSH
47736: LD_INT 1
47738: NEG
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 1
47746: NEG
47747: PUSH
47748: LD_INT 2
47750: NEG
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 1
47758: PUSH
47759: LD_INT 1
47761: NEG
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 2
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 2
47779: PUSH
47780: LD_INT 1
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 2
47789: PUSH
47790: LD_INT 2
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 1
47799: PUSH
47800: LD_INT 2
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 0
47809: PUSH
47810: LD_INT 2
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 1
47819: NEG
47820: PUSH
47821: LD_INT 1
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 2
47830: NEG
47831: PUSH
47832: LD_INT 1
47834: NEG
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 2
47842: NEG
47843: PUSH
47844: LD_INT 2
47846: NEG
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 2
47854: NEG
47855: PUSH
47856: LD_INT 3
47858: NEG
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 2
47866: PUSH
47867: LD_INT 1
47869: NEG
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 3
47877: PUSH
47878: LD_INT 1
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 1
47887: PUSH
47888: LD_INT 3
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 1
47897: NEG
47898: PUSH
47899: LD_INT 2
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 3
47908: NEG
47909: PUSH
47910: LD_INT 2
47912: NEG
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47943: LD_ADDR_VAR 0 32
47947: PUSH
47948: LD_INT 0
47950: PUSH
47951: LD_INT 0
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 0
47960: PUSH
47961: LD_INT 1
47963: NEG
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 1
47971: PUSH
47972: LD_INT 0
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 1
47981: PUSH
47982: LD_INT 1
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 0
47991: PUSH
47992: LD_INT 1
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 1
48001: NEG
48002: PUSH
48003: LD_INT 0
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 1
48012: NEG
48013: PUSH
48014: LD_INT 1
48016: NEG
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 1
48024: NEG
48025: PUSH
48026: LD_INT 2
48028: NEG
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 0
48036: PUSH
48037: LD_INT 2
48039: NEG
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 1
48047: PUSH
48048: LD_INT 1
48050: NEG
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 2
48058: PUSH
48059: LD_INT 1
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 2
48068: PUSH
48069: LD_INT 2
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 1
48078: PUSH
48079: LD_INT 2
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 0
48088: PUSH
48089: LD_INT 2
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 1
48098: NEG
48099: PUSH
48100: LD_INT 1
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 2
48109: NEG
48110: PUSH
48111: LD_INT 0
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 2
48120: NEG
48121: PUSH
48122: LD_INT 1
48124: NEG
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 1
48132: NEG
48133: PUSH
48134: LD_INT 3
48136: NEG
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 1
48144: PUSH
48145: LD_INT 2
48147: NEG
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 3
48155: PUSH
48156: LD_INT 2
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 2
48165: PUSH
48166: LD_INT 3
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 2
48175: NEG
48176: PUSH
48177: LD_INT 1
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 3
48186: NEG
48187: PUSH
48188: LD_INT 1
48190: NEG
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48221: LD_ADDR_VAR 0 33
48225: PUSH
48226: LD_INT 0
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 0
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 1
48249: PUSH
48250: LD_INT 0
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 1
48259: PUSH
48260: LD_INT 1
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 0
48269: PUSH
48270: LD_INT 1
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 1
48279: NEG
48280: PUSH
48281: LD_INT 0
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 1
48290: NEG
48291: PUSH
48292: LD_INT 1
48294: NEG
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 1
48302: NEG
48303: PUSH
48304: LD_INT 2
48306: NEG
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 1
48314: PUSH
48315: LD_INT 1
48317: NEG
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 2
48325: PUSH
48326: LD_INT 0
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 2
48335: PUSH
48336: LD_INT 1
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 1
48345: PUSH
48346: LD_INT 2
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 0
48355: PUSH
48356: LD_INT 2
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: LD_INT 1
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 2
48376: NEG
48377: PUSH
48378: LD_INT 0
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 2
48387: NEG
48388: PUSH
48389: LD_INT 1
48391: NEG
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 2
48399: NEG
48400: PUSH
48401: LD_INT 2
48403: NEG
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 2
48411: NEG
48412: PUSH
48413: LD_INT 3
48415: NEG
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 2
48423: PUSH
48424: LD_INT 1
48426: NEG
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 3
48434: PUSH
48435: LD_INT 1
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 1
48444: PUSH
48445: LD_INT 3
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 1
48454: NEG
48455: PUSH
48456: LD_INT 2
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 3
48465: NEG
48466: PUSH
48467: LD_INT 2
48469: NEG
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48500: LD_ADDR_VAR 0 34
48504: PUSH
48505: LD_INT 0
48507: PUSH
48508: LD_INT 0
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 0
48517: PUSH
48518: LD_INT 1
48520: NEG
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 1
48528: PUSH
48529: LD_INT 0
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 1
48538: PUSH
48539: LD_INT 1
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 0
48548: PUSH
48549: LD_INT 1
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 1
48558: NEG
48559: PUSH
48560: LD_INT 0
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 1
48569: NEG
48570: PUSH
48571: LD_INT 1
48573: NEG
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 1
48581: NEG
48582: PUSH
48583: LD_INT 2
48585: NEG
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 0
48593: PUSH
48594: LD_INT 2
48596: NEG
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 1
48604: PUSH
48605: LD_INT 1
48607: NEG
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 2
48615: PUSH
48616: LD_INT 1
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 2
48625: PUSH
48626: LD_INT 2
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 1
48635: PUSH
48636: LD_INT 2
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 1
48645: NEG
48646: PUSH
48647: LD_INT 1
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 2
48656: NEG
48657: PUSH
48658: LD_INT 0
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 2
48667: NEG
48668: PUSH
48669: LD_INT 1
48671: NEG
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 2
48679: NEG
48680: PUSH
48681: LD_INT 2
48683: NEG
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 1
48691: NEG
48692: PUSH
48693: LD_INT 3
48695: NEG
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 1
48703: PUSH
48704: LD_INT 2
48706: NEG
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 3
48714: PUSH
48715: LD_INT 2
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 2
48724: PUSH
48725: LD_INT 3
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 2
48734: NEG
48735: PUSH
48736: LD_INT 1
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 3
48745: NEG
48746: PUSH
48747: LD_INT 1
48749: NEG
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48780: LD_ADDR_VAR 0 35
48784: PUSH
48785: LD_INT 0
48787: PUSH
48788: LD_INT 0
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 0
48797: PUSH
48798: LD_INT 1
48800: NEG
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 1
48808: PUSH
48809: LD_INT 0
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 1
48818: PUSH
48819: LD_INT 1
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 0
48828: PUSH
48829: LD_INT 1
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 1
48838: NEG
48839: PUSH
48840: LD_INT 0
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 1
48849: NEG
48850: PUSH
48851: LD_INT 1
48853: NEG
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 2
48861: PUSH
48862: LD_INT 1
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 2
48871: NEG
48872: PUSH
48873: LD_INT 1
48875: NEG
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48892: LD_ADDR_VAR 0 36
48896: PUSH
48897: LD_INT 0
48899: PUSH
48900: LD_INT 0
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 0
48909: PUSH
48910: LD_INT 1
48912: NEG
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 1
48920: PUSH
48921: LD_INT 0
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 1
48930: PUSH
48931: LD_INT 1
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 0
48940: PUSH
48941: LD_INT 1
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 1
48950: NEG
48951: PUSH
48952: LD_INT 0
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 1
48961: NEG
48962: PUSH
48963: LD_INT 1
48965: NEG
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 1
48973: NEG
48974: PUSH
48975: LD_INT 2
48977: NEG
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 1
48985: PUSH
48986: LD_INT 2
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49004: LD_ADDR_VAR 0 37
49008: PUSH
49009: LD_INT 0
49011: PUSH
49012: LD_INT 0
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 0
49021: PUSH
49022: LD_INT 1
49024: NEG
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 1
49032: PUSH
49033: LD_INT 0
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 1
49042: PUSH
49043: LD_INT 1
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 0
49052: PUSH
49053: LD_INT 1
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 1
49062: NEG
49063: PUSH
49064: LD_INT 0
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 1
49073: NEG
49074: PUSH
49075: LD_INT 1
49077: NEG
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 1
49085: PUSH
49086: LD_INT 1
49088: NEG
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 1
49096: NEG
49097: PUSH
49098: LD_INT 1
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49116: LD_ADDR_VAR 0 38
49120: PUSH
49121: LD_INT 0
49123: PUSH
49124: LD_INT 0
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 0
49133: PUSH
49134: LD_INT 1
49136: NEG
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 1
49144: PUSH
49145: LD_INT 0
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 1
49154: PUSH
49155: LD_INT 1
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 0
49164: PUSH
49165: LD_INT 1
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 1
49174: NEG
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 1
49185: NEG
49186: PUSH
49187: LD_INT 1
49189: NEG
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 2
49197: PUSH
49198: LD_INT 1
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 2
49207: NEG
49208: PUSH
49209: LD_INT 1
49211: NEG
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49228: LD_ADDR_VAR 0 39
49232: PUSH
49233: LD_INT 0
49235: PUSH
49236: LD_INT 0
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 0
49245: PUSH
49246: LD_INT 1
49248: NEG
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 1
49256: PUSH
49257: LD_INT 0
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 1
49266: PUSH
49267: LD_INT 1
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 0
49276: PUSH
49277: LD_INT 1
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 1
49286: NEG
49287: PUSH
49288: LD_INT 0
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 1
49297: NEG
49298: PUSH
49299: LD_INT 1
49301: NEG
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 1
49309: NEG
49310: PUSH
49311: LD_INT 2
49313: NEG
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 1
49321: PUSH
49322: LD_INT 2
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49340: LD_ADDR_VAR 0 40
49344: PUSH
49345: LD_INT 0
49347: PUSH
49348: LD_INT 0
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 0
49357: PUSH
49358: LD_INT 1
49360: NEG
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 1
49368: PUSH
49369: LD_INT 0
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 1
49378: PUSH
49379: LD_INT 1
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 0
49388: PUSH
49389: LD_INT 1
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 1
49398: NEG
49399: PUSH
49400: LD_INT 0
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 1
49409: NEG
49410: PUSH
49411: LD_INT 1
49413: NEG
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 1
49421: PUSH
49422: LD_INT 1
49424: NEG
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 1
49432: NEG
49433: PUSH
49434: LD_INT 1
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49452: LD_ADDR_VAR 0 41
49456: PUSH
49457: LD_INT 0
49459: PUSH
49460: LD_INT 0
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 0
49469: PUSH
49470: LD_INT 1
49472: NEG
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 1
49480: PUSH
49481: LD_INT 0
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 1
49490: PUSH
49491: LD_INT 1
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 0
49500: PUSH
49501: LD_INT 1
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 1
49510: NEG
49511: PUSH
49512: LD_INT 0
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 1
49521: NEG
49522: PUSH
49523: LD_INT 1
49525: NEG
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 1
49533: NEG
49534: PUSH
49535: LD_INT 2
49537: NEG
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 1
49545: PUSH
49546: LD_INT 1
49548: NEG
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 2
49556: PUSH
49557: LD_INT 0
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 2
49566: PUSH
49567: LD_INT 1
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 2
49576: PUSH
49577: LD_INT 2
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 1
49586: PUSH
49587: LD_INT 2
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 1
49596: NEG
49597: PUSH
49598: LD_INT 1
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 2
49607: NEG
49608: PUSH
49609: LD_INT 0
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 2
49618: NEG
49619: PUSH
49620: LD_INT 1
49622: NEG
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 2
49630: NEG
49631: PUSH
49632: LD_INT 2
49634: NEG
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 2
49642: NEG
49643: PUSH
49644: LD_INT 3
49646: NEG
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 2
49654: PUSH
49655: LD_INT 1
49657: NEG
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 3
49665: PUSH
49666: LD_INT 0
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 3
49675: PUSH
49676: LD_INT 1
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 3
49685: PUSH
49686: LD_INT 2
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 3
49695: PUSH
49696: LD_INT 3
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 2
49705: PUSH
49706: LD_INT 3
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 2
49715: NEG
49716: PUSH
49717: LD_INT 1
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 3
49726: NEG
49727: PUSH
49728: LD_INT 0
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 3
49737: NEG
49738: PUSH
49739: LD_INT 1
49741: NEG
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 3
49749: NEG
49750: PUSH
49751: LD_INT 2
49753: NEG
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 3
49761: NEG
49762: PUSH
49763: LD_INT 3
49765: NEG
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49802: LD_ADDR_VAR 0 42
49806: PUSH
49807: LD_INT 0
49809: PUSH
49810: LD_INT 0
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 0
49819: PUSH
49820: LD_INT 1
49822: NEG
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 1
49830: PUSH
49831: LD_INT 0
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 1
49840: PUSH
49841: LD_INT 1
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 0
49850: PUSH
49851: LD_INT 1
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 1
49860: NEG
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 1
49871: NEG
49872: PUSH
49873: LD_INT 1
49875: NEG
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 1
49883: NEG
49884: PUSH
49885: LD_INT 2
49887: NEG
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 0
49895: PUSH
49896: LD_INT 2
49898: NEG
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 1
49906: PUSH
49907: LD_INT 1
49909: NEG
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 2
49917: PUSH
49918: LD_INT 1
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 2
49927: PUSH
49928: LD_INT 2
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 1
49937: PUSH
49938: LD_INT 2
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 0
49947: PUSH
49948: LD_INT 2
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 1
49957: NEG
49958: PUSH
49959: LD_INT 1
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 2
49968: NEG
49969: PUSH
49970: LD_INT 1
49972: NEG
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 2
49980: NEG
49981: PUSH
49982: LD_INT 2
49984: NEG
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 2
49992: NEG
49993: PUSH
49994: LD_INT 3
49996: NEG
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 1
50004: NEG
50005: PUSH
50006: LD_INT 3
50008: NEG
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 0
50016: PUSH
50017: LD_INT 3
50019: NEG
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 1
50027: PUSH
50028: LD_INT 2
50030: NEG
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 3
50038: PUSH
50039: LD_INT 2
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 3
50048: PUSH
50049: LD_INT 3
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 2
50058: PUSH
50059: LD_INT 3
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 1
50068: PUSH
50069: LD_INT 3
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 0
50078: PUSH
50079: LD_INT 3
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 1
50088: NEG
50089: PUSH
50090: LD_INT 2
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 3
50099: NEG
50100: PUSH
50101: LD_INT 2
50103: NEG
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 3
50111: NEG
50112: PUSH
50113: LD_INT 3
50115: NEG
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50152: LD_ADDR_VAR 0 43
50156: PUSH
50157: LD_INT 0
50159: PUSH
50160: LD_INT 0
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 0
50169: PUSH
50170: LD_INT 1
50172: NEG
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 1
50180: PUSH
50181: LD_INT 0
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 1
50190: PUSH
50191: LD_INT 1
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 0
50200: PUSH
50201: LD_INT 1
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 1
50210: NEG
50211: PUSH
50212: LD_INT 0
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 1
50221: NEG
50222: PUSH
50223: LD_INT 1
50225: NEG
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 1
50233: NEG
50234: PUSH
50235: LD_INT 2
50237: NEG
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 0
50245: PUSH
50246: LD_INT 2
50248: NEG
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 1
50256: PUSH
50257: LD_INT 1
50259: NEG
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 2
50267: PUSH
50268: LD_INT 0
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 2
50277: PUSH
50278: LD_INT 1
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 1
50287: PUSH
50288: LD_INT 2
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 0
50297: PUSH
50298: LD_INT 2
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 1
50307: NEG
50308: PUSH
50309: LD_INT 1
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 2
50318: NEG
50319: PUSH
50320: LD_INT 0
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 2
50329: NEG
50330: PUSH
50331: LD_INT 1
50333: NEG
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 1
50341: NEG
50342: PUSH
50343: LD_INT 3
50345: NEG
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 0
50353: PUSH
50354: LD_INT 3
50356: NEG
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 1
50364: PUSH
50365: LD_INT 2
50367: NEG
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 2
50375: PUSH
50376: LD_INT 1
50378: NEG
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 3
50386: PUSH
50387: LD_INT 0
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 3
50396: PUSH
50397: LD_INT 1
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 1
50406: PUSH
50407: LD_INT 3
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 0
50416: PUSH
50417: LD_INT 3
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 1
50426: NEG
50427: PUSH
50428: LD_INT 2
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 2
50437: NEG
50438: PUSH
50439: LD_INT 1
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 3
50448: NEG
50449: PUSH
50450: LD_INT 0
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 3
50459: NEG
50460: PUSH
50461: LD_INT 1
50463: NEG
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50500: LD_ADDR_VAR 0 44
50504: PUSH
50505: LD_INT 0
50507: PUSH
50508: LD_INT 0
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 0
50517: PUSH
50518: LD_INT 1
50520: NEG
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 1
50528: PUSH
50529: LD_INT 0
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 1
50538: PUSH
50539: LD_INT 1
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 0
50548: PUSH
50549: LD_INT 1
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 1
50558: NEG
50559: PUSH
50560: LD_INT 0
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 1
50569: NEG
50570: PUSH
50571: LD_INT 1
50573: NEG
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 1
50581: NEG
50582: PUSH
50583: LD_INT 2
50585: NEG
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 1
50593: PUSH
50594: LD_INT 1
50596: NEG
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 2
50604: PUSH
50605: LD_INT 0
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 2
50614: PUSH
50615: LD_INT 1
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 2
50624: PUSH
50625: LD_INT 2
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 1
50634: PUSH
50635: LD_INT 2
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: LD_INT 1
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 2
50655: NEG
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 2
50666: NEG
50667: PUSH
50668: LD_INT 1
50670: NEG
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 2
50678: NEG
50679: PUSH
50680: LD_INT 2
50682: NEG
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 2
50690: NEG
50691: PUSH
50692: LD_INT 3
50694: NEG
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 2
50702: PUSH
50703: LD_INT 1
50705: NEG
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 3
50713: PUSH
50714: LD_INT 0
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 3
50723: PUSH
50724: LD_INT 1
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 3
50733: PUSH
50734: LD_INT 2
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 3
50743: PUSH
50744: LD_INT 3
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 2
50753: PUSH
50754: LD_INT 3
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 2
50763: NEG
50764: PUSH
50765: LD_INT 1
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 3
50774: NEG
50775: PUSH
50776: LD_INT 0
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 3
50785: NEG
50786: PUSH
50787: LD_INT 1
50789: NEG
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 3
50797: NEG
50798: PUSH
50799: LD_INT 2
50801: NEG
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 3
50809: NEG
50810: PUSH
50811: LD_INT 3
50813: NEG
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50850: LD_ADDR_VAR 0 45
50854: PUSH
50855: LD_INT 0
50857: PUSH
50858: LD_INT 0
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 0
50867: PUSH
50868: LD_INT 1
50870: NEG
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 1
50878: PUSH
50879: LD_INT 0
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 1
50888: PUSH
50889: LD_INT 1
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 0
50898: PUSH
50899: LD_INT 1
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 1
50908: NEG
50909: PUSH
50910: LD_INT 0
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 1
50919: NEG
50920: PUSH
50921: LD_INT 1
50923: NEG
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 1
50931: NEG
50932: PUSH
50933: LD_INT 2
50935: NEG
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 0
50943: PUSH
50944: LD_INT 2
50946: NEG
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 1
50954: PUSH
50955: LD_INT 1
50957: NEG
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 2
50965: PUSH
50966: LD_INT 1
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 2
50975: PUSH
50976: LD_INT 2
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 1
50985: PUSH
50986: LD_INT 2
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 0
50995: PUSH
50996: LD_INT 2
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 1
51005: NEG
51006: PUSH
51007: LD_INT 1
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 2
51016: NEG
51017: PUSH
51018: LD_INT 1
51020: NEG
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 2
51028: NEG
51029: PUSH
51030: LD_INT 2
51032: NEG
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 2
51040: NEG
51041: PUSH
51042: LD_INT 3
51044: NEG
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 1
51052: NEG
51053: PUSH
51054: LD_INT 3
51056: NEG
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 0
51064: PUSH
51065: LD_INT 3
51067: NEG
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 1
51075: PUSH
51076: LD_INT 2
51078: NEG
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 3
51086: PUSH
51087: LD_INT 2
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 3
51096: PUSH
51097: LD_INT 3
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 2
51106: PUSH
51107: LD_INT 3
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 1
51116: PUSH
51117: LD_INT 3
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 0
51126: PUSH
51127: LD_INT 3
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 1
51136: NEG
51137: PUSH
51138: LD_INT 2
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 3
51147: NEG
51148: PUSH
51149: LD_INT 2
51151: NEG
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 3
51159: NEG
51160: PUSH
51161: LD_INT 3
51163: NEG
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51200: LD_ADDR_VAR 0 46
51204: PUSH
51205: LD_INT 0
51207: PUSH
51208: LD_INT 0
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 0
51217: PUSH
51218: LD_INT 1
51220: NEG
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 1
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 1
51238: PUSH
51239: LD_INT 1
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: LD_INT 1
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 1
51258: NEG
51259: PUSH
51260: LD_INT 0
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 1
51269: NEG
51270: PUSH
51271: LD_INT 1
51273: NEG
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 1
51281: NEG
51282: PUSH
51283: LD_INT 2
51285: NEG
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 0
51293: PUSH
51294: LD_INT 2
51296: NEG
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 1
51304: PUSH
51305: LD_INT 1
51307: NEG
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 2
51315: PUSH
51316: LD_INT 0
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 2
51325: PUSH
51326: LD_INT 1
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 1
51335: PUSH
51336: LD_INT 2
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 0
51345: PUSH
51346: LD_INT 2
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 1
51355: NEG
51356: PUSH
51357: LD_INT 1
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 2
51366: NEG
51367: PUSH
51368: LD_INT 0
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 2
51377: NEG
51378: PUSH
51379: LD_INT 1
51381: NEG
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 1
51389: NEG
51390: PUSH
51391: LD_INT 3
51393: NEG
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 0
51401: PUSH
51402: LD_INT 3
51404: NEG
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 1
51412: PUSH
51413: LD_INT 2
51415: NEG
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 2
51423: PUSH
51424: LD_INT 1
51426: NEG
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 3
51434: PUSH
51435: LD_INT 0
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 3
51444: PUSH
51445: LD_INT 1
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 1
51454: PUSH
51455: LD_INT 3
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 0
51464: PUSH
51465: LD_INT 3
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 1
51474: NEG
51475: PUSH
51476: LD_INT 2
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 2
51485: NEG
51486: PUSH
51487: LD_INT 1
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 3
51496: NEG
51497: PUSH
51498: LD_INT 0
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 3
51507: NEG
51508: PUSH
51509: LD_INT 1
51511: NEG
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51548: LD_ADDR_VAR 0 47
51552: PUSH
51553: LD_INT 0
51555: PUSH
51556: LD_INT 0
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 0
51565: PUSH
51566: LD_INT 1
51568: NEG
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 1
51576: PUSH
51577: LD_INT 0
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 1
51586: PUSH
51587: LD_INT 1
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 0
51596: PUSH
51597: LD_INT 1
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 1
51606: NEG
51607: PUSH
51608: LD_INT 0
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 1
51617: NEG
51618: PUSH
51619: LD_INT 1
51621: NEG
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 1
51629: NEG
51630: PUSH
51631: LD_INT 2
51633: NEG
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 0
51641: PUSH
51642: LD_INT 2
51644: NEG
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 1
51652: PUSH
51653: LD_INT 1
51655: NEG
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 2
51663: NEG
51664: PUSH
51665: LD_INT 1
51667: NEG
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 2
51675: NEG
51676: PUSH
51677: LD_INT 2
51679: NEG
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51699: LD_ADDR_VAR 0 48
51703: PUSH
51704: LD_INT 0
51706: PUSH
51707: LD_INT 0
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 0
51716: PUSH
51717: LD_INT 1
51719: NEG
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 1
51727: PUSH
51728: LD_INT 0
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 1
51737: PUSH
51738: LD_INT 1
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 0
51747: PUSH
51748: LD_INT 1
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 1
51757: NEG
51758: PUSH
51759: LD_INT 0
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 1
51768: NEG
51769: PUSH
51770: LD_INT 1
51772: NEG
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 1
51780: NEG
51781: PUSH
51782: LD_INT 2
51784: NEG
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 0
51792: PUSH
51793: LD_INT 2
51795: NEG
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 1
51803: PUSH
51804: LD_INT 1
51806: NEG
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 2
51814: PUSH
51815: LD_INT 0
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 2
51824: PUSH
51825: LD_INT 1
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51846: LD_ADDR_VAR 0 49
51850: PUSH
51851: LD_INT 0
51853: PUSH
51854: LD_INT 0
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 0
51863: PUSH
51864: LD_INT 1
51866: NEG
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 1
51874: PUSH
51875: LD_INT 0
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 1
51884: PUSH
51885: LD_INT 1
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 0
51894: PUSH
51895: LD_INT 1
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 1
51904: NEG
51905: PUSH
51906: LD_INT 0
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 1
51915: NEG
51916: PUSH
51917: LD_INT 1
51919: NEG
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 1
51927: PUSH
51928: LD_INT 1
51930: NEG
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 2
51938: PUSH
51939: LD_INT 0
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 2
51948: PUSH
51949: LD_INT 1
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 2
51958: PUSH
51959: LD_INT 2
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 1
51968: PUSH
51969: LD_INT 2
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51990: LD_ADDR_VAR 0 50
51994: PUSH
51995: LD_INT 0
51997: PUSH
51998: LD_INT 0
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 0
52007: PUSH
52008: LD_INT 1
52010: NEG
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 1
52018: PUSH
52019: LD_INT 0
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 1
52028: PUSH
52029: LD_INT 1
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 0
52038: PUSH
52039: LD_INT 1
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 1
52048: NEG
52049: PUSH
52050: LD_INT 0
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 1
52059: NEG
52060: PUSH
52061: LD_INT 1
52063: NEG
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 2
52071: PUSH
52072: LD_INT 1
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 2
52081: PUSH
52082: LD_INT 2
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 1
52091: PUSH
52092: LD_INT 2
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 0
52101: PUSH
52102: LD_INT 2
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 1
52111: NEG
52112: PUSH
52113: LD_INT 1
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52134: LD_ADDR_VAR 0 51
52138: PUSH
52139: LD_INT 0
52141: PUSH
52142: LD_INT 0
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 0
52151: PUSH
52152: LD_INT 1
52154: NEG
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 1
52162: PUSH
52163: LD_INT 0
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 1
52172: PUSH
52173: LD_INT 1
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 0
52182: PUSH
52183: LD_INT 1
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 1
52192: NEG
52193: PUSH
52194: LD_INT 0
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 1
52203: NEG
52204: PUSH
52205: LD_INT 1
52207: NEG
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 1
52215: PUSH
52216: LD_INT 2
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 0
52225: PUSH
52226: LD_INT 2
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 1
52235: NEG
52236: PUSH
52237: LD_INT 1
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 2
52246: NEG
52247: PUSH
52248: LD_INT 0
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 2
52257: NEG
52258: PUSH
52259: LD_INT 1
52261: NEG
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52281: LD_ADDR_VAR 0 52
52285: PUSH
52286: LD_INT 0
52288: PUSH
52289: LD_INT 0
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 0
52298: PUSH
52299: LD_INT 1
52301: NEG
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 1
52309: PUSH
52310: LD_INT 0
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 1
52319: PUSH
52320: LD_INT 1
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 0
52329: PUSH
52330: LD_INT 1
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 1
52339: NEG
52340: PUSH
52341: LD_INT 0
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 1
52350: NEG
52351: PUSH
52352: LD_INT 1
52354: NEG
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 1
52362: NEG
52363: PUSH
52364: LD_INT 2
52366: NEG
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 1
52374: NEG
52375: PUSH
52376: LD_INT 1
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 2
52385: NEG
52386: PUSH
52387: LD_INT 0
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 2
52396: NEG
52397: PUSH
52398: LD_INT 1
52400: NEG
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 2
52408: NEG
52409: PUSH
52410: LD_INT 2
52412: NEG
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52432: LD_ADDR_VAR 0 53
52436: PUSH
52437: LD_INT 0
52439: PUSH
52440: LD_INT 0
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 0
52449: PUSH
52450: LD_INT 1
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 1
52460: PUSH
52461: LD_INT 0
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 1
52470: PUSH
52471: LD_INT 1
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 0
52480: PUSH
52481: LD_INT 1
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 1
52490: NEG
52491: PUSH
52492: LD_INT 0
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 1
52501: NEG
52502: PUSH
52503: LD_INT 1
52505: NEG
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 1
52513: NEG
52514: PUSH
52515: LD_INT 2
52517: NEG
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 0
52525: PUSH
52526: LD_INT 2
52528: NEG
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 1
52536: PUSH
52537: LD_INT 1
52539: NEG
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 2
52547: PUSH
52548: LD_INT 0
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 2
52557: PUSH
52558: LD_INT 1
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 2
52567: PUSH
52568: LD_INT 2
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 1
52577: PUSH
52578: LD_INT 2
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 0
52587: PUSH
52588: LD_INT 2
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 1
52597: NEG
52598: PUSH
52599: LD_INT 1
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 2
52608: NEG
52609: PUSH
52610: LD_INT 0
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 2
52619: NEG
52620: PUSH
52621: LD_INT 1
52623: NEG
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 2
52631: NEG
52632: PUSH
52633: LD_INT 2
52635: NEG
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52662: LD_ADDR_VAR 0 54
52666: PUSH
52667: LD_INT 0
52669: PUSH
52670: LD_INT 0
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 0
52679: PUSH
52680: LD_INT 1
52682: NEG
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 1
52690: PUSH
52691: LD_INT 0
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 1
52700: PUSH
52701: LD_INT 1
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 0
52710: PUSH
52711: LD_INT 1
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 1
52720: NEG
52721: PUSH
52722: LD_INT 0
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 1
52731: NEG
52732: PUSH
52733: LD_INT 1
52735: NEG
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 1
52743: NEG
52744: PUSH
52745: LD_INT 2
52747: NEG
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 0
52755: PUSH
52756: LD_INT 2
52758: NEG
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 1
52766: PUSH
52767: LD_INT 1
52769: NEG
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 2
52777: PUSH
52778: LD_INT 0
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 2
52787: PUSH
52788: LD_INT 1
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 2
52797: PUSH
52798: LD_INT 2
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 1
52807: PUSH
52808: LD_INT 2
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 0
52817: PUSH
52818: LD_INT 2
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 1
52827: NEG
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 2
52838: NEG
52839: PUSH
52840: LD_INT 0
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 2
52849: NEG
52850: PUSH
52851: LD_INT 1
52853: NEG
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 2
52861: NEG
52862: PUSH
52863: LD_INT 2
52865: NEG
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52892: LD_ADDR_VAR 0 55
52896: PUSH
52897: LD_INT 0
52899: PUSH
52900: LD_INT 0
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 0
52909: PUSH
52910: LD_INT 1
52912: NEG
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 1
52920: PUSH
52921: LD_INT 0
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 1
52930: PUSH
52931: LD_INT 1
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 0
52940: PUSH
52941: LD_INT 1
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 1
52950: NEG
52951: PUSH
52952: LD_INT 0
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 1
52961: NEG
52962: PUSH
52963: LD_INT 1
52965: NEG
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 1
52973: NEG
52974: PUSH
52975: LD_INT 2
52977: NEG
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 0
52985: PUSH
52986: LD_INT 2
52988: NEG
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 1
52996: PUSH
52997: LD_INT 1
52999: NEG
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 2
53007: PUSH
53008: LD_INT 0
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 2
53017: PUSH
53018: LD_INT 1
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 2
53027: PUSH
53028: LD_INT 2
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 1
53037: PUSH
53038: LD_INT 2
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 0
53047: PUSH
53048: LD_INT 2
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 1
53057: NEG
53058: PUSH
53059: LD_INT 1
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 2
53068: NEG
53069: PUSH
53070: LD_INT 0
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 2
53079: NEG
53080: PUSH
53081: LD_INT 1
53083: NEG
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 2
53091: NEG
53092: PUSH
53093: LD_INT 2
53095: NEG
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53122: LD_ADDR_VAR 0 56
53126: PUSH
53127: LD_INT 0
53129: PUSH
53130: LD_INT 0
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 0
53139: PUSH
53140: LD_INT 1
53142: NEG
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 1
53150: PUSH
53151: LD_INT 0
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 1
53160: PUSH
53161: LD_INT 1
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 0
53170: PUSH
53171: LD_INT 1
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 1
53180: NEG
53181: PUSH
53182: LD_INT 0
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 1
53191: NEG
53192: PUSH
53193: LD_INT 1
53195: NEG
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 1
53203: NEG
53204: PUSH
53205: LD_INT 2
53207: NEG
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 0
53215: PUSH
53216: LD_INT 2
53218: NEG
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 1
53226: PUSH
53227: LD_INT 1
53229: NEG
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 2
53237: PUSH
53238: LD_INT 0
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 2
53247: PUSH
53248: LD_INT 1
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 2
53257: PUSH
53258: LD_INT 2
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 1
53267: PUSH
53268: LD_INT 2
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 0
53277: PUSH
53278: LD_INT 2
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 1
53287: NEG
53288: PUSH
53289: LD_INT 1
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 2
53298: NEG
53299: PUSH
53300: LD_INT 0
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 2
53309: NEG
53310: PUSH
53311: LD_INT 1
53313: NEG
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 2
53321: NEG
53322: PUSH
53323: LD_INT 2
53325: NEG
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53352: LD_ADDR_VAR 0 57
53356: PUSH
53357: LD_INT 0
53359: PUSH
53360: LD_INT 0
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 0
53369: PUSH
53370: LD_INT 1
53372: NEG
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 1
53380: PUSH
53381: LD_INT 0
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 1
53390: PUSH
53391: LD_INT 1
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 0
53400: PUSH
53401: LD_INT 1
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 1
53410: NEG
53411: PUSH
53412: LD_INT 0
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 1
53421: NEG
53422: PUSH
53423: LD_INT 1
53425: NEG
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 1
53433: NEG
53434: PUSH
53435: LD_INT 2
53437: NEG
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 0
53445: PUSH
53446: LD_INT 2
53448: NEG
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 1
53456: PUSH
53457: LD_INT 1
53459: NEG
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 2
53467: PUSH
53468: LD_INT 0
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 2
53477: PUSH
53478: LD_INT 1
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 2
53487: PUSH
53488: LD_INT 2
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 1
53497: PUSH
53498: LD_INT 2
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 0
53507: PUSH
53508: LD_INT 2
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 1
53517: NEG
53518: PUSH
53519: LD_INT 1
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 2
53528: NEG
53529: PUSH
53530: LD_INT 0
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 2
53539: NEG
53540: PUSH
53541: LD_INT 1
53543: NEG
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 2
53551: NEG
53552: PUSH
53553: LD_INT 2
53555: NEG
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53582: LD_ADDR_VAR 0 58
53586: PUSH
53587: LD_INT 0
53589: PUSH
53590: LD_INT 0
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 0
53599: PUSH
53600: LD_INT 1
53602: NEG
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 1
53610: PUSH
53611: LD_INT 0
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 1
53620: PUSH
53621: LD_INT 1
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 0
53630: PUSH
53631: LD_INT 1
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 1
53640: NEG
53641: PUSH
53642: LD_INT 0
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 1
53651: NEG
53652: PUSH
53653: LD_INT 1
53655: NEG
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 1
53663: NEG
53664: PUSH
53665: LD_INT 2
53667: NEG
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 0
53675: PUSH
53676: LD_INT 2
53678: NEG
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 1
53686: PUSH
53687: LD_INT 1
53689: NEG
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 2
53697: PUSH
53698: LD_INT 0
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 2
53707: PUSH
53708: LD_INT 1
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 2
53717: PUSH
53718: LD_INT 2
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 1
53727: PUSH
53728: LD_INT 2
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 0
53737: PUSH
53738: LD_INT 2
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 1
53747: NEG
53748: PUSH
53749: LD_INT 1
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 2
53758: NEG
53759: PUSH
53760: LD_INT 0
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 2
53769: NEG
53770: PUSH
53771: LD_INT 1
53773: NEG
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 2
53781: NEG
53782: PUSH
53783: LD_INT 2
53785: NEG
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53812: LD_ADDR_VAR 0 59
53816: PUSH
53817: LD_INT 0
53819: PUSH
53820: LD_INT 0
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 0
53829: PUSH
53830: LD_INT 1
53832: NEG
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 1
53840: PUSH
53841: LD_INT 0
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 1
53850: PUSH
53851: LD_INT 1
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 0
53860: PUSH
53861: LD_INT 1
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 1
53870: NEG
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 1
53881: NEG
53882: PUSH
53883: LD_INT 1
53885: NEG
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53900: LD_ADDR_VAR 0 60
53904: PUSH
53905: LD_INT 0
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 0
53917: PUSH
53918: LD_INT 1
53920: NEG
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 1
53928: PUSH
53929: LD_INT 0
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 1
53938: PUSH
53939: LD_INT 1
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 0
53948: PUSH
53949: LD_INT 1
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 1
53958: NEG
53959: PUSH
53960: LD_INT 0
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 1
53969: NEG
53970: PUSH
53971: LD_INT 1
53973: NEG
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53988: LD_ADDR_VAR 0 61
53992: PUSH
53993: LD_INT 0
53995: PUSH
53996: LD_INT 0
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 0
54005: PUSH
54006: LD_INT 1
54008: NEG
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 1
54016: PUSH
54017: LD_INT 0
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 1
54026: PUSH
54027: LD_INT 1
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 0
54036: PUSH
54037: LD_INT 1
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 1
54046: NEG
54047: PUSH
54048: LD_INT 0
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 1
54057: NEG
54058: PUSH
54059: LD_INT 1
54061: NEG
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54076: LD_ADDR_VAR 0 62
54080: PUSH
54081: LD_INT 0
54083: PUSH
54084: LD_INT 0
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 0
54093: PUSH
54094: LD_INT 1
54096: NEG
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 1
54104: PUSH
54105: LD_INT 0
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 1
54114: PUSH
54115: LD_INT 1
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 0
54124: PUSH
54125: LD_INT 1
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 1
54134: NEG
54135: PUSH
54136: LD_INT 0
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 1
54145: NEG
54146: PUSH
54147: LD_INT 1
54149: NEG
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54164: LD_ADDR_VAR 0 63
54168: PUSH
54169: LD_INT 0
54171: PUSH
54172: LD_INT 0
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 0
54181: PUSH
54182: LD_INT 1
54184: NEG
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 1
54192: PUSH
54193: LD_INT 0
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 1
54202: PUSH
54203: LD_INT 1
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 0
54212: PUSH
54213: LD_INT 1
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 1
54222: NEG
54223: PUSH
54224: LD_INT 0
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 1
54233: NEG
54234: PUSH
54235: LD_INT 1
54237: NEG
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54252: LD_ADDR_VAR 0 64
54256: PUSH
54257: LD_INT 0
54259: PUSH
54260: LD_INT 0
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 0
54269: PUSH
54270: LD_INT 1
54272: NEG
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 1
54280: PUSH
54281: LD_INT 0
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 1
54290: PUSH
54291: LD_INT 1
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 0
54300: PUSH
54301: LD_INT 1
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 1
54310: NEG
54311: PUSH
54312: LD_INT 0
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 1
54321: NEG
54322: PUSH
54323: LD_INT 1
54325: NEG
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: ST_TO_ADDR
// end ; 1 :
54340: GO 60237
54342: LD_INT 1
54344: DOUBLE
54345: EQUAL
54346: IFTRUE 54350
54348: GO 56973
54350: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54351: LD_ADDR_VAR 0 11
54355: PUSH
54356: LD_INT 1
54358: NEG
54359: PUSH
54360: LD_INT 3
54362: NEG
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 0
54370: PUSH
54371: LD_INT 3
54373: NEG
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 1
54381: PUSH
54382: LD_INT 2
54384: NEG
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: LIST
54394: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54395: LD_ADDR_VAR 0 12
54399: PUSH
54400: LD_INT 2
54402: PUSH
54403: LD_INT 1
54405: NEG
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 3
54413: PUSH
54414: LD_INT 0
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 3
54423: PUSH
54424: LD_INT 1
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: LIST
54435: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54436: LD_ADDR_VAR 0 13
54440: PUSH
54441: LD_INT 3
54443: PUSH
54444: LD_INT 2
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 3
54453: PUSH
54454: LD_INT 3
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 2
54463: PUSH
54464: LD_INT 3
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: LIST
54475: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54476: LD_ADDR_VAR 0 14
54480: PUSH
54481: LD_INT 1
54483: PUSH
54484: LD_INT 3
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 0
54493: PUSH
54494: LD_INT 3
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 1
54503: NEG
54504: PUSH
54505: LD_INT 2
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: LIST
54516: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54517: LD_ADDR_VAR 0 15
54521: PUSH
54522: LD_INT 2
54524: NEG
54525: PUSH
54526: LD_INT 1
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 3
54535: NEG
54536: PUSH
54537: LD_INT 0
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 3
54546: NEG
54547: PUSH
54548: LD_INT 1
54550: NEG
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: LIST
54560: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54561: LD_ADDR_VAR 0 16
54565: PUSH
54566: LD_INT 2
54568: NEG
54569: PUSH
54570: LD_INT 3
54572: NEG
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 3
54580: NEG
54581: PUSH
54582: LD_INT 2
54584: NEG
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 3
54592: NEG
54593: PUSH
54594: LD_INT 3
54596: NEG
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: LIST
54606: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54607: LD_ADDR_VAR 0 17
54611: PUSH
54612: LD_INT 1
54614: NEG
54615: PUSH
54616: LD_INT 3
54618: NEG
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 0
54626: PUSH
54627: LD_INT 3
54629: NEG
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 1
54637: PUSH
54638: LD_INT 2
54640: NEG
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: LIST
54650: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54651: LD_ADDR_VAR 0 18
54655: PUSH
54656: LD_INT 2
54658: PUSH
54659: LD_INT 1
54661: NEG
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 3
54669: PUSH
54670: LD_INT 0
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 3
54679: PUSH
54680: LD_INT 1
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: LIST
54691: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54692: LD_ADDR_VAR 0 19
54696: PUSH
54697: LD_INT 3
54699: PUSH
54700: LD_INT 2
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 3
54709: PUSH
54710: LD_INT 3
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 2
54719: PUSH
54720: LD_INT 3
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: LIST
54731: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54732: LD_ADDR_VAR 0 20
54736: PUSH
54737: LD_INT 1
54739: PUSH
54740: LD_INT 3
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 0
54749: PUSH
54750: LD_INT 3
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 1
54759: NEG
54760: PUSH
54761: LD_INT 2
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: LIST
54772: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54773: LD_ADDR_VAR 0 21
54777: PUSH
54778: LD_INT 2
54780: NEG
54781: PUSH
54782: LD_INT 1
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 3
54791: NEG
54792: PUSH
54793: LD_INT 0
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 3
54802: NEG
54803: PUSH
54804: LD_INT 1
54806: NEG
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: LIST
54816: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54817: LD_ADDR_VAR 0 22
54821: PUSH
54822: LD_INT 2
54824: NEG
54825: PUSH
54826: LD_INT 3
54828: NEG
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 3
54836: NEG
54837: PUSH
54838: LD_INT 2
54840: NEG
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 3
54848: NEG
54849: PUSH
54850: LD_INT 3
54852: NEG
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: LIST
54862: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54863: LD_ADDR_VAR 0 23
54867: PUSH
54868: LD_INT 0
54870: PUSH
54871: LD_INT 3
54873: NEG
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 1
54881: NEG
54882: PUSH
54883: LD_INT 4
54885: NEG
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 1
54893: PUSH
54894: LD_INT 3
54896: NEG
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: LIST
54906: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54907: LD_ADDR_VAR 0 24
54911: PUSH
54912: LD_INT 3
54914: PUSH
54915: LD_INT 0
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 3
54924: PUSH
54925: LD_INT 1
54927: NEG
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 4
54935: PUSH
54936: LD_INT 1
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: LIST
54947: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54948: LD_ADDR_VAR 0 25
54952: PUSH
54953: LD_INT 3
54955: PUSH
54956: LD_INT 3
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 4
54965: PUSH
54966: LD_INT 3
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 3
54975: PUSH
54976: LD_INT 4
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: LIST
54987: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54988: LD_ADDR_VAR 0 26
54992: PUSH
54993: LD_INT 0
54995: PUSH
54996: LD_INT 3
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 1
55005: PUSH
55006: LD_INT 4
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 1
55015: NEG
55016: PUSH
55017: LD_INT 3
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: LIST
55028: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55029: LD_ADDR_VAR 0 27
55033: PUSH
55034: LD_INT 3
55036: NEG
55037: PUSH
55038: LD_INT 0
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 3
55047: NEG
55048: PUSH
55049: LD_INT 1
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 4
55058: NEG
55059: PUSH
55060: LD_INT 1
55062: NEG
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: LIST
55072: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55073: LD_ADDR_VAR 0 28
55077: PUSH
55078: LD_INT 3
55080: NEG
55081: PUSH
55082: LD_INT 3
55084: NEG
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 3
55092: NEG
55093: PUSH
55094: LD_INT 4
55096: NEG
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 4
55104: NEG
55105: PUSH
55106: LD_INT 3
55108: NEG
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: LIST
55118: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55119: LD_ADDR_VAR 0 29
55123: PUSH
55124: LD_INT 1
55126: NEG
55127: PUSH
55128: LD_INT 3
55130: NEG
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 0
55138: PUSH
55139: LD_INT 3
55141: NEG
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 1
55149: PUSH
55150: LD_INT 2
55152: NEG
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 1
55160: NEG
55161: PUSH
55162: LD_INT 4
55164: NEG
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 0
55172: PUSH
55173: LD_INT 4
55175: NEG
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 1
55183: PUSH
55184: LD_INT 3
55186: NEG
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 1
55194: NEG
55195: PUSH
55196: LD_INT 5
55198: NEG
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 0
55206: PUSH
55207: LD_INT 5
55209: NEG
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 1
55217: PUSH
55218: LD_INT 4
55220: NEG
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 1
55228: NEG
55229: PUSH
55230: LD_INT 6
55232: NEG
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 0
55240: PUSH
55241: LD_INT 6
55243: NEG
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 1
55251: PUSH
55252: LD_INT 5
55254: NEG
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55274: LD_ADDR_VAR 0 30
55278: PUSH
55279: LD_INT 2
55281: PUSH
55282: LD_INT 1
55284: NEG
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 3
55292: PUSH
55293: LD_INT 0
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 3
55302: PUSH
55303: LD_INT 1
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 3
55312: PUSH
55313: LD_INT 1
55315: NEG
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 4
55323: PUSH
55324: LD_INT 0
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 4
55333: PUSH
55334: LD_INT 1
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 4
55343: PUSH
55344: LD_INT 1
55346: NEG
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 5
55354: PUSH
55355: LD_INT 0
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 5
55364: PUSH
55365: LD_INT 1
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 5
55374: PUSH
55375: LD_INT 1
55377: NEG
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 6
55385: PUSH
55386: LD_INT 0
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 6
55395: PUSH
55396: LD_INT 1
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55417: LD_ADDR_VAR 0 31
55421: PUSH
55422: LD_INT 3
55424: PUSH
55425: LD_INT 2
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 3
55434: PUSH
55435: LD_INT 3
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 2
55444: PUSH
55445: LD_INT 3
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 4
55454: PUSH
55455: LD_INT 3
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 4
55464: PUSH
55465: LD_INT 4
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 3
55474: PUSH
55475: LD_INT 4
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 5
55484: PUSH
55485: LD_INT 4
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 5
55494: PUSH
55495: LD_INT 5
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 4
55504: PUSH
55505: LD_INT 5
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 6
55514: PUSH
55515: LD_INT 5
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 6
55524: PUSH
55525: LD_INT 6
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 5
55534: PUSH
55535: LD_INT 6
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55556: LD_ADDR_VAR 0 32
55560: PUSH
55561: LD_INT 1
55563: PUSH
55564: LD_INT 3
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 0
55573: PUSH
55574: LD_INT 3
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 1
55583: NEG
55584: PUSH
55585: LD_INT 2
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 1
55594: PUSH
55595: LD_INT 4
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: LD_INT 4
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 1
55614: NEG
55615: PUSH
55616: LD_INT 3
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 1
55625: PUSH
55626: LD_INT 5
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 0
55635: PUSH
55636: LD_INT 5
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 1
55645: NEG
55646: PUSH
55647: LD_INT 4
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 1
55656: PUSH
55657: LD_INT 6
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 0
55666: PUSH
55667: LD_INT 6
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 1
55676: NEG
55677: PUSH
55678: LD_INT 5
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55699: LD_ADDR_VAR 0 33
55703: PUSH
55704: LD_INT 2
55706: NEG
55707: PUSH
55708: LD_INT 1
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 3
55717: NEG
55718: PUSH
55719: LD_INT 0
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 3
55728: NEG
55729: PUSH
55730: LD_INT 1
55732: NEG
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 3
55740: NEG
55741: PUSH
55742: LD_INT 1
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 4
55751: NEG
55752: PUSH
55753: LD_INT 0
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 4
55762: NEG
55763: PUSH
55764: LD_INT 1
55766: NEG
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 4
55774: NEG
55775: PUSH
55776: LD_INT 1
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 5
55785: NEG
55786: PUSH
55787: LD_INT 0
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 5
55796: NEG
55797: PUSH
55798: LD_INT 1
55800: NEG
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 5
55808: NEG
55809: PUSH
55810: LD_INT 1
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 6
55819: NEG
55820: PUSH
55821: LD_INT 0
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 6
55830: NEG
55831: PUSH
55832: LD_INT 1
55834: NEG
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55854: LD_ADDR_VAR 0 34
55858: PUSH
55859: LD_INT 2
55861: NEG
55862: PUSH
55863: LD_INT 3
55865: NEG
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 3
55873: NEG
55874: PUSH
55875: LD_INT 2
55877: NEG
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 3
55885: NEG
55886: PUSH
55887: LD_INT 3
55889: NEG
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 3
55897: NEG
55898: PUSH
55899: LD_INT 4
55901: NEG
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 4
55909: NEG
55910: PUSH
55911: LD_INT 3
55913: NEG
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 4
55921: NEG
55922: PUSH
55923: LD_INT 4
55925: NEG
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 4
55933: NEG
55934: PUSH
55935: LD_INT 5
55937: NEG
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 5
55945: NEG
55946: PUSH
55947: LD_INT 4
55949: NEG
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 5
55957: NEG
55958: PUSH
55959: LD_INT 5
55961: NEG
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 5
55969: NEG
55970: PUSH
55971: LD_INT 6
55973: NEG
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 6
55981: NEG
55982: PUSH
55983: LD_INT 5
55985: NEG
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 6
55993: NEG
55994: PUSH
55995: LD_INT 6
55997: NEG
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56017: LD_ADDR_VAR 0 41
56021: PUSH
56022: LD_INT 0
56024: PUSH
56025: LD_INT 2
56027: NEG
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 1
56035: NEG
56036: PUSH
56037: LD_INT 3
56039: NEG
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 1
56047: PUSH
56048: LD_INT 2
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: LIST
56060: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56061: LD_ADDR_VAR 0 42
56065: PUSH
56066: LD_INT 2
56068: PUSH
56069: LD_INT 0
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 2
56078: PUSH
56079: LD_INT 1
56081: NEG
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 3
56089: PUSH
56090: LD_INT 1
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: LIST
56101: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56102: LD_ADDR_VAR 0 43
56106: PUSH
56107: LD_INT 2
56109: PUSH
56110: LD_INT 2
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 3
56119: PUSH
56120: LD_INT 2
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 2
56129: PUSH
56130: LD_INT 3
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: LIST
56141: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56142: LD_ADDR_VAR 0 44
56146: PUSH
56147: LD_INT 0
56149: PUSH
56150: LD_INT 2
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: PUSH
56160: LD_INT 3
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 1
56169: NEG
56170: PUSH
56171: LD_INT 2
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: LIST
56182: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56183: LD_ADDR_VAR 0 45
56187: PUSH
56188: LD_INT 2
56190: NEG
56191: PUSH
56192: LD_INT 0
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 2
56201: NEG
56202: PUSH
56203: LD_INT 1
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 3
56212: NEG
56213: PUSH
56214: LD_INT 1
56216: NEG
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: LIST
56226: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56227: LD_ADDR_VAR 0 46
56231: PUSH
56232: LD_INT 2
56234: NEG
56235: PUSH
56236: LD_INT 2
56238: NEG
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 2
56246: NEG
56247: PUSH
56248: LD_INT 3
56250: NEG
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 3
56258: NEG
56259: PUSH
56260: LD_INT 2
56262: NEG
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: LIST
56272: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56273: LD_ADDR_VAR 0 47
56277: PUSH
56278: LD_INT 2
56280: NEG
56281: PUSH
56282: LD_INT 3
56284: NEG
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 1
56292: NEG
56293: PUSH
56294: LD_INT 3
56296: NEG
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56306: LD_ADDR_VAR 0 48
56310: PUSH
56311: LD_INT 1
56313: PUSH
56314: LD_INT 2
56316: NEG
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 2
56324: PUSH
56325: LD_INT 1
56327: NEG
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56337: LD_ADDR_VAR 0 49
56341: PUSH
56342: LD_INT 3
56344: PUSH
56345: LD_INT 1
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 3
56354: PUSH
56355: LD_INT 2
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56366: LD_ADDR_VAR 0 50
56370: PUSH
56371: LD_INT 2
56373: PUSH
56374: LD_INT 3
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 1
56383: PUSH
56384: LD_INT 3
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56395: LD_ADDR_VAR 0 51
56399: PUSH
56400: LD_INT 1
56402: NEG
56403: PUSH
56404: LD_INT 2
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 2
56413: NEG
56414: PUSH
56415: LD_INT 1
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56426: LD_ADDR_VAR 0 52
56430: PUSH
56431: LD_INT 3
56433: NEG
56434: PUSH
56435: LD_INT 1
56437: NEG
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 3
56445: NEG
56446: PUSH
56447: LD_INT 2
56449: NEG
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56459: LD_ADDR_VAR 0 53
56463: PUSH
56464: LD_INT 1
56466: NEG
56467: PUSH
56468: LD_INT 3
56470: NEG
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 0
56478: PUSH
56479: LD_INT 3
56481: NEG
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 1
56489: PUSH
56490: LD_INT 2
56492: NEG
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: LIST
56502: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56503: LD_ADDR_VAR 0 54
56507: PUSH
56508: LD_INT 2
56510: PUSH
56511: LD_INT 1
56513: NEG
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 3
56521: PUSH
56522: LD_INT 0
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 3
56531: PUSH
56532: LD_INT 1
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: LIST
56543: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56544: LD_ADDR_VAR 0 55
56548: PUSH
56549: LD_INT 3
56551: PUSH
56552: LD_INT 2
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 3
56561: PUSH
56562: LD_INT 3
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 2
56571: PUSH
56572: LD_INT 3
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: LIST
56583: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56584: LD_ADDR_VAR 0 56
56588: PUSH
56589: LD_INT 1
56591: PUSH
56592: LD_INT 3
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 0
56601: PUSH
56602: LD_INT 3
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 1
56611: NEG
56612: PUSH
56613: LD_INT 2
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: LIST
56624: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56625: LD_ADDR_VAR 0 57
56629: PUSH
56630: LD_INT 2
56632: NEG
56633: PUSH
56634: LD_INT 1
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 3
56643: NEG
56644: PUSH
56645: LD_INT 0
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 3
56654: NEG
56655: PUSH
56656: LD_INT 1
56658: NEG
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: LIST
56668: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56669: LD_ADDR_VAR 0 58
56673: PUSH
56674: LD_INT 2
56676: NEG
56677: PUSH
56678: LD_INT 3
56680: NEG
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 3
56688: NEG
56689: PUSH
56690: LD_INT 2
56692: NEG
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 3
56700: NEG
56701: PUSH
56702: LD_INT 3
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: LIST
56714: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56715: LD_ADDR_VAR 0 59
56719: PUSH
56720: LD_INT 1
56722: NEG
56723: PUSH
56724: LD_INT 2
56726: NEG
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 0
56734: PUSH
56735: LD_INT 2
56737: NEG
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 1
56745: PUSH
56746: LD_INT 1
56748: NEG
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: LIST
56758: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56759: LD_ADDR_VAR 0 60
56763: PUSH
56764: LD_INT 1
56766: PUSH
56767: LD_INT 1
56769: NEG
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 2
56777: PUSH
56778: LD_INT 0
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 2
56787: PUSH
56788: LD_INT 1
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: LIST
56799: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56800: LD_ADDR_VAR 0 61
56804: PUSH
56805: LD_INT 2
56807: PUSH
56808: LD_INT 1
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 2
56817: PUSH
56818: LD_INT 2
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 1
56827: PUSH
56828: LD_INT 2
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: LIST
56839: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56840: LD_ADDR_VAR 0 62
56844: PUSH
56845: LD_INT 1
56847: PUSH
56848: LD_INT 2
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 0
56857: PUSH
56858: LD_INT 2
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 1
56867: NEG
56868: PUSH
56869: LD_INT 1
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: LIST
56880: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56881: LD_ADDR_VAR 0 63
56885: PUSH
56886: LD_INT 1
56888: NEG
56889: PUSH
56890: LD_INT 1
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 2
56899: NEG
56900: PUSH
56901: LD_INT 0
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 2
56910: NEG
56911: PUSH
56912: LD_INT 1
56914: NEG
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: LIST
56924: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56925: LD_ADDR_VAR 0 64
56929: PUSH
56930: LD_INT 1
56932: NEG
56933: PUSH
56934: LD_INT 2
56936: NEG
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 2
56944: NEG
56945: PUSH
56946: LD_INT 1
56948: NEG
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 2
56956: NEG
56957: PUSH
56958: LD_INT 2
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: LIST
56970: ST_TO_ADDR
// end ; 2 :
56971: GO 60237
56973: LD_INT 2
56975: DOUBLE
56976: EQUAL
56977: IFTRUE 56981
56979: GO 60236
56981: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56982: LD_ADDR_VAR 0 29
56986: PUSH
56987: LD_INT 4
56989: PUSH
56990: LD_INT 0
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 4
56999: PUSH
57000: LD_INT 1
57002: NEG
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 5
57010: PUSH
57011: LD_INT 0
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 5
57020: PUSH
57021: LD_INT 1
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 4
57030: PUSH
57031: LD_INT 1
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 3
57040: PUSH
57041: LD_INT 0
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 3
57050: PUSH
57051: LD_INT 1
57053: NEG
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 3
57061: PUSH
57062: LD_INT 2
57064: NEG
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 5
57072: PUSH
57073: LD_INT 2
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 3
57082: PUSH
57083: LD_INT 3
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 3
57092: PUSH
57093: LD_INT 2
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 4
57102: PUSH
57103: LD_INT 3
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 4
57112: PUSH
57113: LD_INT 4
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 3
57122: PUSH
57123: LD_INT 4
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 2
57132: PUSH
57133: LD_INT 3
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 2
57142: PUSH
57143: LD_INT 2
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 4
57152: PUSH
57153: LD_INT 2
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 2
57162: PUSH
57163: LD_INT 4
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 0
57172: PUSH
57173: LD_INT 4
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 0
57182: PUSH
57183: LD_INT 3
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 1
57192: PUSH
57193: LD_INT 4
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 1
57202: PUSH
57203: LD_INT 5
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 0
57212: PUSH
57213: LD_INT 5
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 1
57222: NEG
57223: PUSH
57224: LD_INT 4
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 1
57233: NEG
57234: PUSH
57235: LD_INT 3
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 2
57244: PUSH
57245: LD_INT 5
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 2
57254: NEG
57255: PUSH
57256: LD_INT 3
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 3
57265: NEG
57266: PUSH
57267: LD_INT 0
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 3
57276: NEG
57277: PUSH
57278: LD_INT 1
57280: NEG
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 2
57288: NEG
57289: PUSH
57290: LD_INT 0
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 2
57299: NEG
57300: PUSH
57301: LD_INT 1
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 3
57310: NEG
57311: PUSH
57312: LD_INT 1
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 4
57321: NEG
57322: PUSH
57323: LD_INT 0
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 4
57332: NEG
57333: PUSH
57334: LD_INT 1
57336: NEG
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 4
57344: NEG
57345: PUSH
57346: LD_INT 2
57348: NEG
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 2
57356: NEG
57357: PUSH
57358: LD_INT 2
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 4
57367: NEG
57368: PUSH
57369: LD_INT 4
57371: NEG
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 4
57379: NEG
57380: PUSH
57381: LD_INT 5
57383: NEG
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 3
57391: NEG
57392: PUSH
57393: LD_INT 4
57395: NEG
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 3
57403: NEG
57404: PUSH
57405: LD_INT 3
57407: NEG
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 4
57415: NEG
57416: PUSH
57417: LD_INT 3
57419: NEG
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 5
57427: NEG
57428: PUSH
57429: LD_INT 4
57431: NEG
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 5
57439: NEG
57440: PUSH
57441: LD_INT 5
57443: NEG
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 3
57451: NEG
57452: PUSH
57453: LD_INT 5
57455: NEG
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 5
57463: NEG
57464: PUSH
57465: LD_INT 3
57467: NEG
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57520: LD_ADDR_VAR 0 30
57524: PUSH
57525: LD_INT 4
57527: PUSH
57528: LD_INT 4
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 4
57537: PUSH
57538: LD_INT 3
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 5
57547: PUSH
57548: LD_INT 4
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 5
57557: PUSH
57558: LD_INT 5
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 4
57567: PUSH
57568: LD_INT 5
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 3
57577: PUSH
57578: LD_INT 4
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 3
57587: PUSH
57588: LD_INT 3
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 5
57597: PUSH
57598: LD_INT 3
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 3
57607: PUSH
57608: LD_INT 5
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 0
57617: PUSH
57618: LD_INT 3
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 0
57627: PUSH
57628: LD_INT 2
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 1
57637: PUSH
57638: LD_INT 3
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 1
57647: PUSH
57648: LD_INT 4
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 0
57657: PUSH
57658: LD_INT 4
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 1
57667: NEG
57668: PUSH
57669: LD_INT 3
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 1
57678: NEG
57679: PUSH
57680: LD_INT 2
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 2
57689: PUSH
57690: LD_INT 4
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 2
57699: NEG
57700: PUSH
57701: LD_INT 2
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 4
57710: NEG
57711: PUSH
57712: LD_INT 0
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 4
57721: NEG
57722: PUSH
57723: LD_INT 1
57725: NEG
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 3
57733: NEG
57734: PUSH
57735: LD_INT 0
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 3
57744: NEG
57745: PUSH
57746: LD_INT 1
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 4
57755: NEG
57756: PUSH
57757: LD_INT 1
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 5
57766: NEG
57767: PUSH
57768: LD_INT 0
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 5
57777: NEG
57778: PUSH
57779: LD_INT 1
57781: NEG
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 5
57789: NEG
57790: PUSH
57791: LD_INT 2
57793: NEG
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 3
57801: NEG
57802: PUSH
57803: LD_INT 2
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 3
57812: NEG
57813: PUSH
57814: LD_INT 3
57816: NEG
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 3
57824: NEG
57825: PUSH
57826: LD_INT 4
57828: NEG
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 2
57836: NEG
57837: PUSH
57838: LD_INT 3
57840: NEG
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 2
57848: NEG
57849: PUSH
57850: LD_INT 2
57852: NEG
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 3
57860: NEG
57861: PUSH
57862: LD_INT 2
57864: NEG
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 4
57872: NEG
57873: PUSH
57874: LD_INT 3
57876: NEG
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 4
57884: NEG
57885: PUSH
57886: LD_INT 4
57888: NEG
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 2
57896: NEG
57897: PUSH
57898: LD_INT 4
57900: NEG
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 4
57908: NEG
57909: PUSH
57910: LD_INT 2
57912: NEG
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 0
57920: PUSH
57921: LD_INT 4
57923: NEG
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 0
57931: PUSH
57932: LD_INT 5
57934: NEG
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 1
57942: PUSH
57943: LD_INT 4
57945: NEG
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 1
57953: PUSH
57954: LD_INT 3
57956: NEG
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 0
57964: PUSH
57965: LD_INT 3
57967: NEG
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 1
57975: NEG
57976: PUSH
57977: LD_INT 4
57979: NEG
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 1
57987: NEG
57988: PUSH
57989: LD_INT 5
57991: NEG
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 2
57999: PUSH
58000: LD_INT 3
58002: NEG
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 2
58010: NEG
58011: PUSH
58012: LD_INT 5
58014: NEG
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58067: LD_ADDR_VAR 0 31
58071: PUSH
58072: LD_INT 0
58074: PUSH
58075: LD_INT 4
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 0
58084: PUSH
58085: LD_INT 3
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 1
58094: PUSH
58095: LD_INT 4
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 1
58104: PUSH
58105: LD_INT 5
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 0
58114: PUSH
58115: LD_INT 5
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 1
58124: NEG
58125: PUSH
58126: LD_INT 4
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 1
58135: NEG
58136: PUSH
58137: LD_INT 3
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 2
58146: PUSH
58147: LD_INT 5
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 2
58156: NEG
58157: PUSH
58158: LD_INT 3
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 3
58167: NEG
58168: PUSH
58169: LD_INT 0
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 3
58178: NEG
58179: PUSH
58180: LD_INT 1
58182: NEG
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 2
58190: NEG
58191: PUSH
58192: LD_INT 0
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 2
58201: NEG
58202: PUSH
58203: LD_INT 1
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 3
58212: NEG
58213: PUSH
58214: LD_INT 1
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 4
58223: NEG
58224: PUSH
58225: LD_INT 0
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 4
58234: NEG
58235: PUSH
58236: LD_INT 1
58238: NEG
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 4
58246: NEG
58247: PUSH
58248: LD_INT 2
58250: NEG
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 2
58258: NEG
58259: PUSH
58260: LD_INT 2
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 4
58269: NEG
58270: PUSH
58271: LD_INT 4
58273: NEG
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 4
58281: NEG
58282: PUSH
58283: LD_INT 5
58285: NEG
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 3
58293: NEG
58294: PUSH
58295: LD_INT 4
58297: NEG
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 3
58305: NEG
58306: PUSH
58307: LD_INT 3
58309: NEG
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 4
58317: NEG
58318: PUSH
58319: LD_INT 3
58321: NEG
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 5
58329: NEG
58330: PUSH
58331: LD_INT 4
58333: NEG
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 5
58341: NEG
58342: PUSH
58343: LD_INT 5
58345: NEG
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 3
58353: NEG
58354: PUSH
58355: LD_INT 5
58357: NEG
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 5
58365: NEG
58366: PUSH
58367: LD_INT 3
58369: NEG
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 0
58377: PUSH
58378: LD_INT 3
58380: NEG
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 0
58388: PUSH
58389: LD_INT 4
58391: NEG
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 1
58399: PUSH
58400: LD_INT 3
58402: NEG
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 1
58410: PUSH
58411: LD_INT 2
58413: NEG
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 0
58421: PUSH
58422: LD_INT 2
58424: NEG
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 1
58432: NEG
58433: PUSH
58434: LD_INT 3
58436: NEG
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 1
58444: NEG
58445: PUSH
58446: LD_INT 4
58448: NEG
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 2
58456: PUSH
58457: LD_INT 2
58459: NEG
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 2
58467: NEG
58468: PUSH
58469: LD_INT 4
58471: NEG
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 4
58479: PUSH
58480: LD_INT 0
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 4
58489: PUSH
58490: LD_INT 1
58492: NEG
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 5
58500: PUSH
58501: LD_INT 0
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 5
58510: PUSH
58511: LD_INT 1
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 4
58520: PUSH
58521: LD_INT 1
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 3
58530: PUSH
58531: LD_INT 0
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 3
58540: PUSH
58541: LD_INT 1
58543: NEG
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 3
58551: PUSH
58552: LD_INT 2
58554: NEG
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 5
58562: PUSH
58563: LD_INT 2
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58617: LD_ADDR_VAR 0 32
58621: PUSH
58622: LD_INT 4
58624: NEG
58625: PUSH
58626: LD_INT 0
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 4
58635: NEG
58636: PUSH
58637: LD_INT 1
58639: NEG
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 3
58647: NEG
58648: PUSH
58649: LD_INT 0
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 3
58658: NEG
58659: PUSH
58660: LD_INT 1
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 4
58669: NEG
58670: PUSH
58671: LD_INT 1
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 5
58680: NEG
58681: PUSH
58682: LD_INT 0
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 5
58691: NEG
58692: PUSH
58693: LD_INT 1
58695: NEG
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 5
58703: NEG
58704: PUSH
58705: LD_INT 2
58707: NEG
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 3
58715: NEG
58716: PUSH
58717: LD_INT 2
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 3
58726: NEG
58727: PUSH
58728: LD_INT 3
58730: NEG
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 3
58738: NEG
58739: PUSH
58740: LD_INT 4
58742: NEG
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 2
58750: NEG
58751: PUSH
58752: LD_INT 3
58754: NEG
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 2
58762: NEG
58763: PUSH
58764: LD_INT 2
58766: NEG
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 3
58774: NEG
58775: PUSH
58776: LD_INT 2
58778: NEG
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 4
58786: NEG
58787: PUSH
58788: LD_INT 3
58790: NEG
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 4
58798: NEG
58799: PUSH
58800: LD_INT 4
58802: NEG
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 2
58810: NEG
58811: PUSH
58812: LD_INT 4
58814: NEG
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 4
58822: NEG
58823: PUSH
58824: LD_INT 2
58826: NEG
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 0
58834: PUSH
58835: LD_INT 4
58837: NEG
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 0
58845: PUSH
58846: LD_INT 5
58848: NEG
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 1
58856: PUSH
58857: LD_INT 4
58859: NEG
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 1
58867: PUSH
58868: LD_INT 3
58870: NEG
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 0
58878: PUSH
58879: LD_INT 3
58881: NEG
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 1
58889: NEG
58890: PUSH
58891: LD_INT 4
58893: NEG
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 1
58901: NEG
58902: PUSH
58903: LD_INT 5
58905: NEG
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 2
58913: PUSH
58914: LD_INT 3
58916: NEG
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 2
58924: NEG
58925: PUSH
58926: LD_INT 5
58928: NEG
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 3
58936: PUSH
58937: LD_INT 0
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 3
58946: PUSH
58947: LD_INT 1
58949: NEG
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 4
58957: PUSH
58958: LD_INT 0
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 4
58967: PUSH
58968: LD_INT 1
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 3
58977: PUSH
58978: LD_INT 1
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 2
58987: PUSH
58988: LD_INT 0
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 2
58997: PUSH
58998: LD_INT 1
59000: NEG
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 2
59008: PUSH
59009: LD_INT 2
59011: NEG
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 4
59019: PUSH
59020: LD_INT 2
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 4
59029: PUSH
59030: LD_INT 4
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 4
59039: PUSH
59040: LD_INT 3
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 5
59049: PUSH
59050: LD_INT 4
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 5
59059: PUSH
59060: LD_INT 5
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 4
59069: PUSH
59070: LD_INT 5
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 3
59079: PUSH
59080: LD_INT 4
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 3
59089: PUSH
59090: LD_INT 3
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 5
59099: PUSH
59100: LD_INT 3
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 3
59109: PUSH
59110: LD_INT 5
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59164: LD_ADDR_VAR 0 33
59168: PUSH
59169: LD_INT 4
59171: NEG
59172: PUSH
59173: LD_INT 4
59175: NEG
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 4
59183: NEG
59184: PUSH
59185: LD_INT 5
59187: NEG
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 3
59195: NEG
59196: PUSH
59197: LD_INT 4
59199: NEG
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 3
59207: NEG
59208: PUSH
59209: LD_INT 3
59211: NEG
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 4
59219: NEG
59220: PUSH
59221: LD_INT 3
59223: NEG
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 5
59231: NEG
59232: PUSH
59233: LD_INT 4
59235: NEG
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 5
59243: NEG
59244: PUSH
59245: LD_INT 5
59247: NEG
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 3
59255: NEG
59256: PUSH
59257: LD_INT 5
59259: NEG
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 5
59267: NEG
59268: PUSH
59269: LD_INT 3
59271: NEG
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 0
59279: PUSH
59280: LD_INT 3
59282: NEG
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 0
59290: PUSH
59291: LD_INT 4
59293: NEG
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 1
59301: PUSH
59302: LD_INT 3
59304: NEG
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 1
59312: PUSH
59313: LD_INT 2
59315: NEG
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 0
59323: PUSH
59324: LD_INT 2
59326: NEG
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 1
59334: NEG
59335: PUSH
59336: LD_INT 3
59338: NEG
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 1
59346: NEG
59347: PUSH
59348: LD_INT 4
59350: NEG
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 2
59358: PUSH
59359: LD_INT 2
59361: NEG
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 2
59369: NEG
59370: PUSH
59371: LD_INT 4
59373: NEG
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 4
59381: PUSH
59382: LD_INT 0
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 4
59391: PUSH
59392: LD_INT 1
59394: NEG
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 5
59402: PUSH
59403: LD_INT 0
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 5
59412: PUSH
59413: LD_INT 1
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 4
59422: PUSH
59423: LD_INT 1
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 3
59432: PUSH
59433: LD_INT 0
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 3
59442: PUSH
59443: LD_INT 1
59445: NEG
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 3
59453: PUSH
59454: LD_INT 2
59456: NEG
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 5
59464: PUSH
59465: LD_INT 2
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 3
59474: PUSH
59475: LD_INT 3
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 3
59484: PUSH
59485: LD_INT 2
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 4
59494: PUSH
59495: LD_INT 3
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 4
59504: PUSH
59505: LD_INT 4
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 3
59514: PUSH
59515: LD_INT 4
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 2
59524: PUSH
59525: LD_INT 3
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 2
59534: PUSH
59535: LD_INT 2
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 4
59544: PUSH
59545: LD_INT 2
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 2
59554: PUSH
59555: LD_INT 4
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 0
59564: PUSH
59565: LD_INT 4
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 0
59574: PUSH
59575: LD_INT 3
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 1
59584: PUSH
59585: LD_INT 4
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 1
59594: PUSH
59595: LD_INT 5
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 0
59604: PUSH
59605: LD_INT 5
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 1
59614: NEG
59615: PUSH
59616: LD_INT 4
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 1
59625: NEG
59626: PUSH
59627: LD_INT 3
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 2
59636: PUSH
59637: LD_INT 5
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 2
59646: NEG
59647: PUSH
59648: LD_INT 3
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59702: LD_ADDR_VAR 0 34
59706: PUSH
59707: LD_INT 0
59709: PUSH
59710: LD_INT 4
59712: NEG
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 0
59720: PUSH
59721: LD_INT 5
59723: NEG
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 1
59731: PUSH
59732: LD_INT 4
59734: NEG
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 1
59742: PUSH
59743: LD_INT 3
59745: NEG
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 0
59753: PUSH
59754: LD_INT 3
59756: NEG
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 1
59764: NEG
59765: PUSH
59766: LD_INT 4
59768: NEG
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 1
59776: NEG
59777: PUSH
59778: LD_INT 5
59780: NEG
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 2
59788: PUSH
59789: LD_INT 3
59791: NEG
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 2
59799: NEG
59800: PUSH
59801: LD_INT 5
59803: NEG
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 3
59811: PUSH
59812: LD_INT 0
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 3
59821: PUSH
59822: LD_INT 1
59824: NEG
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 4
59832: PUSH
59833: LD_INT 0
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 4
59842: PUSH
59843: LD_INT 1
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 3
59852: PUSH
59853: LD_INT 1
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 2
59862: PUSH
59863: LD_INT 0
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 2
59872: PUSH
59873: LD_INT 1
59875: NEG
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 2
59883: PUSH
59884: LD_INT 2
59886: NEG
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 4
59894: PUSH
59895: LD_INT 2
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 4
59904: PUSH
59905: LD_INT 4
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 4
59914: PUSH
59915: LD_INT 3
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 5
59924: PUSH
59925: LD_INT 4
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 5
59934: PUSH
59935: LD_INT 5
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 4
59944: PUSH
59945: LD_INT 5
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 3
59954: PUSH
59955: LD_INT 4
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 3
59964: PUSH
59965: LD_INT 3
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 5
59974: PUSH
59975: LD_INT 3
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 3
59984: PUSH
59985: LD_INT 5
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 0
59994: PUSH
59995: LD_INT 3
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 0
60004: PUSH
60005: LD_INT 2
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 1
60014: PUSH
60015: LD_INT 3
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 1
60024: PUSH
60025: LD_INT 4
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 0
60034: PUSH
60035: LD_INT 4
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 1
60044: NEG
60045: PUSH
60046: LD_INT 3
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 1
60055: NEG
60056: PUSH
60057: LD_INT 2
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 2
60066: PUSH
60067: LD_INT 4
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 2
60076: NEG
60077: PUSH
60078: LD_INT 2
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 4
60087: NEG
60088: PUSH
60089: LD_INT 0
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 4
60098: NEG
60099: PUSH
60100: LD_INT 1
60102: NEG
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 3
60110: NEG
60111: PUSH
60112: LD_INT 0
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 3
60121: NEG
60122: PUSH
60123: LD_INT 1
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 4
60132: NEG
60133: PUSH
60134: LD_INT 1
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 5
60143: NEG
60144: PUSH
60145: LD_INT 0
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 5
60154: NEG
60155: PUSH
60156: LD_INT 1
60158: NEG
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 5
60166: NEG
60167: PUSH
60168: LD_INT 2
60170: NEG
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 3
60178: NEG
60179: PUSH
60180: LD_INT 2
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: ST_TO_ADDR
// end ; end ;
60234: GO 60237
60236: POP
// case btype of b_depot , b_warehouse :
60237: LD_VAR 0 1
60241: PUSH
60242: LD_INT 0
60244: DOUBLE
60245: EQUAL
60246: IFTRUE 60256
60248: LD_INT 1
60250: DOUBLE
60251: EQUAL
60252: IFTRUE 60256
60254: GO 60457
60256: POP
// case nation of nation_american :
60257: LD_VAR 0 5
60261: PUSH
60262: LD_INT 1
60264: DOUBLE
60265: EQUAL
60266: IFTRUE 60270
60268: GO 60326
60270: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60271: LD_ADDR_VAR 0 9
60275: PUSH
60276: LD_VAR 0 11
60280: PUSH
60281: LD_VAR 0 12
60285: PUSH
60286: LD_VAR 0 13
60290: PUSH
60291: LD_VAR 0 14
60295: PUSH
60296: LD_VAR 0 15
60300: PUSH
60301: LD_VAR 0 16
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: PUSH
60314: LD_VAR 0 4
60318: PUSH
60319: LD_INT 1
60321: PLUS
60322: ARRAY
60323: ST_TO_ADDR
60324: GO 60455
60326: LD_INT 2
60328: DOUBLE
60329: EQUAL
60330: IFTRUE 60334
60332: GO 60390
60334: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60335: LD_ADDR_VAR 0 9
60339: PUSH
60340: LD_VAR 0 17
60344: PUSH
60345: LD_VAR 0 18
60349: PUSH
60350: LD_VAR 0 19
60354: PUSH
60355: LD_VAR 0 20
60359: PUSH
60360: LD_VAR 0 21
60364: PUSH
60365: LD_VAR 0 22
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: PUSH
60378: LD_VAR 0 4
60382: PUSH
60383: LD_INT 1
60385: PLUS
60386: ARRAY
60387: ST_TO_ADDR
60388: GO 60455
60390: LD_INT 3
60392: DOUBLE
60393: EQUAL
60394: IFTRUE 60398
60396: GO 60454
60398: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60399: LD_ADDR_VAR 0 9
60403: PUSH
60404: LD_VAR 0 23
60408: PUSH
60409: LD_VAR 0 24
60413: PUSH
60414: LD_VAR 0 25
60418: PUSH
60419: LD_VAR 0 26
60423: PUSH
60424: LD_VAR 0 27
60428: PUSH
60429: LD_VAR 0 28
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: PUSH
60442: LD_VAR 0 4
60446: PUSH
60447: LD_INT 1
60449: PLUS
60450: ARRAY
60451: ST_TO_ADDR
60452: GO 60455
60454: POP
60455: GO 61010
60457: LD_INT 2
60459: DOUBLE
60460: EQUAL
60461: IFTRUE 60471
60463: LD_INT 3
60465: DOUBLE
60466: EQUAL
60467: IFTRUE 60471
60469: GO 60527
60471: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60472: LD_ADDR_VAR 0 9
60476: PUSH
60477: LD_VAR 0 29
60481: PUSH
60482: LD_VAR 0 30
60486: PUSH
60487: LD_VAR 0 31
60491: PUSH
60492: LD_VAR 0 32
60496: PUSH
60497: LD_VAR 0 33
60501: PUSH
60502: LD_VAR 0 34
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: PUSH
60515: LD_VAR 0 4
60519: PUSH
60520: LD_INT 1
60522: PLUS
60523: ARRAY
60524: ST_TO_ADDR
60525: GO 61010
60527: LD_INT 16
60529: DOUBLE
60530: EQUAL
60531: IFTRUE 60589
60533: LD_INT 17
60535: DOUBLE
60536: EQUAL
60537: IFTRUE 60589
60539: LD_INT 18
60541: DOUBLE
60542: EQUAL
60543: IFTRUE 60589
60545: LD_INT 19
60547: DOUBLE
60548: EQUAL
60549: IFTRUE 60589
60551: LD_INT 22
60553: DOUBLE
60554: EQUAL
60555: IFTRUE 60589
60557: LD_INT 20
60559: DOUBLE
60560: EQUAL
60561: IFTRUE 60589
60563: LD_INT 21
60565: DOUBLE
60566: EQUAL
60567: IFTRUE 60589
60569: LD_INT 23
60571: DOUBLE
60572: EQUAL
60573: IFTRUE 60589
60575: LD_INT 24
60577: DOUBLE
60578: EQUAL
60579: IFTRUE 60589
60581: LD_INT 25
60583: DOUBLE
60584: EQUAL
60585: IFTRUE 60589
60587: GO 60645
60589: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60590: LD_ADDR_VAR 0 9
60594: PUSH
60595: LD_VAR 0 35
60599: PUSH
60600: LD_VAR 0 36
60604: PUSH
60605: LD_VAR 0 37
60609: PUSH
60610: LD_VAR 0 38
60614: PUSH
60615: LD_VAR 0 39
60619: PUSH
60620: LD_VAR 0 40
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: PUSH
60633: LD_VAR 0 4
60637: PUSH
60638: LD_INT 1
60640: PLUS
60641: ARRAY
60642: ST_TO_ADDR
60643: GO 61010
60645: LD_INT 6
60647: DOUBLE
60648: EQUAL
60649: IFTRUE 60701
60651: LD_INT 7
60653: DOUBLE
60654: EQUAL
60655: IFTRUE 60701
60657: LD_INT 8
60659: DOUBLE
60660: EQUAL
60661: IFTRUE 60701
60663: LD_INT 13
60665: DOUBLE
60666: EQUAL
60667: IFTRUE 60701
60669: LD_INT 12
60671: DOUBLE
60672: EQUAL
60673: IFTRUE 60701
60675: LD_INT 15
60677: DOUBLE
60678: EQUAL
60679: IFTRUE 60701
60681: LD_INT 11
60683: DOUBLE
60684: EQUAL
60685: IFTRUE 60701
60687: LD_INT 14
60689: DOUBLE
60690: EQUAL
60691: IFTRUE 60701
60693: LD_INT 10
60695: DOUBLE
60696: EQUAL
60697: IFTRUE 60701
60699: GO 60757
60701: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60702: LD_ADDR_VAR 0 9
60706: PUSH
60707: LD_VAR 0 41
60711: PUSH
60712: LD_VAR 0 42
60716: PUSH
60717: LD_VAR 0 43
60721: PUSH
60722: LD_VAR 0 44
60726: PUSH
60727: LD_VAR 0 45
60731: PUSH
60732: LD_VAR 0 46
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: PUSH
60745: LD_VAR 0 4
60749: PUSH
60750: LD_INT 1
60752: PLUS
60753: ARRAY
60754: ST_TO_ADDR
60755: GO 61010
60757: LD_INT 36
60759: DOUBLE
60760: EQUAL
60761: IFTRUE 60765
60763: GO 60821
60765: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60766: LD_ADDR_VAR 0 9
60770: PUSH
60771: LD_VAR 0 47
60775: PUSH
60776: LD_VAR 0 48
60780: PUSH
60781: LD_VAR 0 49
60785: PUSH
60786: LD_VAR 0 50
60790: PUSH
60791: LD_VAR 0 51
60795: PUSH
60796: LD_VAR 0 52
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: PUSH
60809: LD_VAR 0 4
60813: PUSH
60814: LD_INT 1
60816: PLUS
60817: ARRAY
60818: ST_TO_ADDR
60819: GO 61010
60821: LD_INT 4
60823: DOUBLE
60824: EQUAL
60825: IFTRUE 60847
60827: LD_INT 5
60829: DOUBLE
60830: EQUAL
60831: IFTRUE 60847
60833: LD_INT 34
60835: DOUBLE
60836: EQUAL
60837: IFTRUE 60847
60839: LD_INT 37
60841: DOUBLE
60842: EQUAL
60843: IFTRUE 60847
60845: GO 60903
60847: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60848: LD_ADDR_VAR 0 9
60852: PUSH
60853: LD_VAR 0 53
60857: PUSH
60858: LD_VAR 0 54
60862: PUSH
60863: LD_VAR 0 55
60867: PUSH
60868: LD_VAR 0 56
60872: PUSH
60873: LD_VAR 0 57
60877: PUSH
60878: LD_VAR 0 58
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: PUSH
60891: LD_VAR 0 4
60895: PUSH
60896: LD_INT 1
60898: PLUS
60899: ARRAY
60900: ST_TO_ADDR
60901: GO 61010
60903: LD_INT 31
60905: DOUBLE
60906: EQUAL
60907: IFTRUE 60953
60909: LD_INT 32
60911: DOUBLE
60912: EQUAL
60913: IFTRUE 60953
60915: LD_INT 33
60917: DOUBLE
60918: EQUAL
60919: IFTRUE 60953
60921: LD_INT 27
60923: DOUBLE
60924: EQUAL
60925: IFTRUE 60953
60927: LD_INT 26
60929: DOUBLE
60930: EQUAL
60931: IFTRUE 60953
60933: LD_INT 28
60935: DOUBLE
60936: EQUAL
60937: IFTRUE 60953
60939: LD_INT 29
60941: DOUBLE
60942: EQUAL
60943: IFTRUE 60953
60945: LD_INT 30
60947: DOUBLE
60948: EQUAL
60949: IFTRUE 60953
60951: GO 61009
60953: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60954: LD_ADDR_VAR 0 9
60958: PUSH
60959: LD_VAR 0 59
60963: PUSH
60964: LD_VAR 0 60
60968: PUSH
60969: LD_VAR 0 61
60973: PUSH
60974: LD_VAR 0 62
60978: PUSH
60979: LD_VAR 0 63
60983: PUSH
60984: LD_VAR 0 64
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: PUSH
60997: LD_VAR 0 4
61001: PUSH
61002: LD_INT 1
61004: PLUS
61005: ARRAY
61006: ST_TO_ADDR
61007: GO 61010
61009: POP
// temp_list2 = [ ] ;
61010: LD_ADDR_VAR 0 10
61014: PUSH
61015: EMPTY
61016: ST_TO_ADDR
// for i in temp_list do
61017: LD_ADDR_VAR 0 8
61021: PUSH
61022: LD_VAR 0 9
61026: PUSH
61027: FOR_IN
61028: IFFALSE 61080
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61030: LD_ADDR_VAR 0 10
61034: PUSH
61035: LD_VAR 0 10
61039: PUSH
61040: LD_VAR 0 8
61044: PUSH
61045: LD_INT 1
61047: ARRAY
61048: PUSH
61049: LD_VAR 0 2
61053: PLUS
61054: PUSH
61055: LD_VAR 0 8
61059: PUSH
61060: LD_INT 2
61062: ARRAY
61063: PUSH
61064: LD_VAR 0 3
61068: PLUS
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: EMPTY
61075: LIST
61076: ADD
61077: ST_TO_ADDR
61078: GO 61027
61080: POP
61081: POP
// result = temp_list2 ;
61082: LD_ADDR_VAR 0 7
61086: PUSH
61087: LD_VAR 0 10
61091: ST_TO_ADDR
// end ;
61092: LD_VAR 0 7
61096: RET
// export function EnemyInRange ( unit , dist ) ; begin
61097: LD_INT 0
61099: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61100: LD_ADDR_VAR 0 3
61104: PUSH
61105: LD_VAR 0 1
61109: PPUSH
61110: CALL_OW 255
61114: PPUSH
61115: LD_VAR 0 1
61119: PPUSH
61120: CALL_OW 250
61124: PPUSH
61125: LD_VAR 0 1
61129: PPUSH
61130: CALL_OW 251
61134: PPUSH
61135: LD_VAR 0 2
61139: PPUSH
61140: CALL 34493 0 4
61144: PUSH
61145: LD_INT 4
61147: ARRAY
61148: ST_TO_ADDR
// end ;
61149: LD_VAR 0 3
61153: RET
// export function PlayerSeeMe ( unit ) ; begin
61154: LD_INT 0
61156: PPUSH
// result := See ( your_side , unit ) ;
61157: LD_ADDR_VAR 0 2
61161: PUSH
61162: LD_OWVAR 2
61166: PPUSH
61167: LD_VAR 0 1
61171: PPUSH
61172: CALL_OW 292
61176: ST_TO_ADDR
// end ;
61177: LD_VAR 0 2
61181: RET
// export function ReverseDir ( unit ) ; begin
61182: LD_INT 0
61184: PPUSH
// if not unit then
61185: LD_VAR 0 1
61189: NOT
61190: IFFALSE 61194
// exit ;
61192: GO 61217
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61194: LD_ADDR_VAR 0 2
61198: PUSH
61199: LD_VAR 0 1
61203: PPUSH
61204: CALL_OW 254
61208: PUSH
61209: LD_INT 3
61211: PLUS
61212: PUSH
61213: LD_INT 6
61215: MOD
61216: ST_TO_ADDR
// end ;
61217: LD_VAR 0 2
61221: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
61222: LD_INT 0
61224: PPUSH
61225: PPUSH
61226: PPUSH
61227: PPUSH
61228: PPUSH
// if not hexes then
61229: LD_VAR 0 2
61233: NOT
61234: IFFALSE 61238
// exit ;
61236: GO 61386
// dist := 9999 ;
61238: LD_ADDR_VAR 0 5
61242: PUSH
61243: LD_INT 9999
61245: ST_TO_ADDR
// for i = 1 to hexes do
61246: LD_ADDR_VAR 0 4
61250: PUSH
61251: DOUBLE
61252: LD_INT 1
61254: DEC
61255: ST_TO_ADDR
61256: LD_VAR 0 2
61260: PUSH
61261: FOR_TO
61262: IFFALSE 61374
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
61264: LD_VAR 0 1
61268: PPUSH
61269: LD_VAR 0 2
61273: PUSH
61274: LD_VAR 0 4
61278: ARRAY
61279: PUSH
61280: LD_INT 1
61282: ARRAY
61283: PPUSH
61284: LD_VAR 0 2
61288: PUSH
61289: LD_VAR 0 4
61293: ARRAY
61294: PUSH
61295: LD_INT 2
61297: ARRAY
61298: PPUSH
61299: CALL_OW 297
61303: PUSH
61304: LD_VAR 0 5
61308: LESS
61309: IFFALSE 61372
// begin hex := hexes [ i ] ;
61311: LD_ADDR_VAR 0 7
61315: PUSH
61316: LD_VAR 0 2
61320: PUSH
61321: LD_VAR 0 4
61325: ARRAY
61326: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61327: LD_ADDR_VAR 0 5
61331: PUSH
61332: LD_VAR 0 1
61336: PPUSH
61337: LD_VAR 0 2
61341: PUSH
61342: LD_VAR 0 4
61346: ARRAY
61347: PUSH
61348: LD_INT 1
61350: ARRAY
61351: PPUSH
61352: LD_VAR 0 2
61356: PUSH
61357: LD_VAR 0 4
61361: ARRAY
61362: PUSH
61363: LD_INT 2
61365: ARRAY
61366: PPUSH
61367: CALL_OW 297
61371: ST_TO_ADDR
// end ; end ;
61372: GO 61261
61374: POP
61375: POP
// result := hex ;
61376: LD_ADDR_VAR 0 3
61380: PUSH
61381: LD_VAR 0 7
61385: ST_TO_ADDR
// end ;
61386: LD_VAR 0 3
61390: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61391: LD_INT 0
61393: PPUSH
61394: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61395: LD_VAR 0 1
61399: NOT
61400: PUSH
61401: LD_VAR 0 1
61405: PUSH
61406: LD_INT 21
61408: PUSH
61409: LD_INT 2
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 23
61418: PUSH
61419: LD_INT 2
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PPUSH
61430: CALL_OW 69
61434: IN
61435: NOT
61436: OR
61437: IFFALSE 61441
// exit ;
61439: GO 61488
// for i = 1 to 3 do
61441: LD_ADDR_VAR 0 3
61445: PUSH
61446: DOUBLE
61447: LD_INT 1
61449: DEC
61450: ST_TO_ADDR
61451: LD_INT 3
61453: PUSH
61454: FOR_TO
61455: IFFALSE 61486
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61457: LD_VAR 0 1
61461: PPUSH
61462: CALL_OW 250
61466: PPUSH
61467: LD_VAR 0 1
61471: PPUSH
61472: CALL_OW 251
61476: PPUSH
61477: LD_INT 1
61479: PPUSH
61480: CALL_OW 453
61484: GO 61454
61486: POP
61487: POP
// end ;
61488: LD_VAR 0 2
61492: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61493: LD_INT 0
61495: PPUSH
61496: PPUSH
61497: PPUSH
61498: PPUSH
61499: PPUSH
61500: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61501: LD_VAR 0 1
61505: NOT
61506: PUSH
61507: LD_VAR 0 2
61511: NOT
61512: OR
61513: PUSH
61514: LD_VAR 0 1
61518: PPUSH
61519: CALL_OW 314
61523: OR
61524: IFFALSE 61528
// exit ;
61526: GO 61969
// x := GetX ( enemy_unit ) ;
61528: LD_ADDR_VAR 0 7
61532: PUSH
61533: LD_VAR 0 2
61537: PPUSH
61538: CALL_OW 250
61542: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61543: LD_ADDR_VAR 0 8
61547: PUSH
61548: LD_VAR 0 2
61552: PPUSH
61553: CALL_OW 251
61557: ST_TO_ADDR
// if not x or not y then
61558: LD_VAR 0 7
61562: NOT
61563: PUSH
61564: LD_VAR 0 8
61568: NOT
61569: OR
61570: IFFALSE 61574
// exit ;
61572: GO 61969
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61574: LD_ADDR_VAR 0 6
61578: PUSH
61579: LD_VAR 0 7
61583: PPUSH
61584: LD_INT 0
61586: PPUSH
61587: LD_INT 4
61589: PPUSH
61590: CALL_OW 272
61594: PUSH
61595: LD_VAR 0 8
61599: PPUSH
61600: LD_INT 0
61602: PPUSH
61603: LD_INT 4
61605: PPUSH
61606: CALL_OW 273
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_VAR 0 7
61619: PPUSH
61620: LD_INT 1
61622: PPUSH
61623: LD_INT 4
61625: PPUSH
61626: CALL_OW 272
61630: PUSH
61631: LD_VAR 0 8
61635: PPUSH
61636: LD_INT 1
61638: PPUSH
61639: LD_INT 4
61641: PPUSH
61642: CALL_OW 273
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_VAR 0 7
61655: PPUSH
61656: LD_INT 2
61658: PPUSH
61659: LD_INT 4
61661: PPUSH
61662: CALL_OW 272
61666: PUSH
61667: LD_VAR 0 8
61671: PPUSH
61672: LD_INT 2
61674: PPUSH
61675: LD_INT 4
61677: PPUSH
61678: CALL_OW 273
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_VAR 0 7
61691: PPUSH
61692: LD_INT 3
61694: PPUSH
61695: LD_INT 4
61697: PPUSH
61698: CALL_OW 272
61702: PUSH
61703: LD_VAR 0 8
61707: PPUSH
61708: LD_INT 3
61710: PPUSH
61711: LD_INT 4
61713: PPUSH
61714: CALL_OW 273
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_VAR 0 7
61727: PPUSH
61728: LD_INT 4
61730: PPUSH
61731: LD_INT 4
61733: PPUSH
61734: CALL_OW 272
61738: PUSH
61739: LD_VAR 0 8
61743: PPUSH
61744: LD_INT 4
61746: PPUSH
61747: LD_INT 4
61749: PPUSH
61750: CALL_OW 273
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_VAR 0 7
61763: PPUSH
61764: LD_INT 5
61766: PPUSH
61767: LD_INT 4
61769: PPUSH
61770: CALL_OW 272
61774: PUSH
61775: LD_VAR 0 8
61779: PPUSH
61780: LD_INT 5
61782: PPUSH
61783: LD_INT 4
61785: PPUSH
61786: CALL_OW 273
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: ST_TO_ADDR
// for i = tmp downto 1 do
61803: LD_ADDR_VAR 0 4
61807: PUSH
61808: DOUBLE
61809: LD_VAR 0 6
61813: INC
61814: ST_TO_ADDR
61815: LD_INT 1
61817: PUSH
61818: FOR_DOWNTO
61819: IFFALSE 61920
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61821: LD_VAR 0 6
61825: PUSH
61826: LD_VAR 0 4
61830: ARRAY
61831: PUSH
61832: LD_INT 1
61834: ARRAY
61835: PPUSH
61836: LD_VAR 0 6
61840: PUSH
61841: LD_VAR 0 4
61845: ARRAY
61846: PUSH
61847: LD_INT 2
61849: ARRAY
61850: PPUSH
61851: CALL_OW 488
61855: NOT
61856: PUSH
61857: LD_VAR 0 6
61861: PUSH
61862: LD_VAR 0 4
61866: ARRAY
61867: PUSH
61868: LD_INT 1
61870: ARRAY
61871: PPUSH
61872: LD_VAR 0 6
61876: PUSH
61877: LD_VAR 0 4
61881: ARRAY
61882: PUSH
61883: LD_INT 2
61885: ARRAY
61886: PPUSH
61887: CALL_OW 428
61891: PUSH
61892: LD_INT 0
61894: NONEQUAL
61895: OR
61896: IFFALSE 61918
// tmp := Delete ( tmp , i ) ;
61898: LD_ADDR_VAR 0 6
61902: PUSH
61903: LD_VAR 0 6
61907: PPUSH
61908: LD_VAR 0 4
61912: PPUSH
61913: CALL_OW 3
61917: ST_TO_ADDR
61918: GO 61818
61920: POP
61921: POP
// j := GetClosestHex ( unit , tmp ) ;
61922: LD_ADDR_VAR 0 5
61926: PUSH
61927: LD_VAR 0 1
61931: PPUSH
61932: LD_VAR 0 6
61936: PPUSH
61937: CALL 61222 0 2
61941: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61942: LD_VAR 0 1
61946: PPUSH
61947: LD_VAR 0 5
61951: PUSH
61952: LD_INT 1
61954: ARRAY
61955: PPUSH
61956: LD_VAR 0 5
61960: PUSH
61961: LD_INT 2
61963: ARRAY
61964: PPUSH
61965: CALL_OW 111
// end ;
61969: LD_VAR 0 3
61973: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61974: LD_INT 0
61976: PPUSH
61977: PPUSH
61978: PPUSH
// uc_side = 0 ;
61979: LD_ADDR_OWVAR 20
61983: PUSH
61984: LD_INT 0
61986: ST_TO_ADDR
// uc_nation = 0 ;
61987: LD_ADDR_OWVAR 21
61991: PUSH
61992: LD_INT 0
61994: ST_TO_ADDR
// InitHc_All ( ) ;
61995: CALL_OW 584
// InitVc ;
61999: CALL_OW 20
// if mastodonts then
62003: LD_VAR 0 6
62007: IFFALSE 62074
// for i = 1 to mastodonts do
62009: LD_ADDR_VAR 0 11
62013: PUSH
62014: DOUBLE
62015: LD_INT 1
62017: DEC
62018: ST_TO_ADDR
62019: LD_VAR 0 6
62023: PUSH
62024: FOR_TO
62025: IFFALSE 62072
// begin vc_chassis := 31 ;
62027: LD_ADDR_OWVAR 37
62031: PUSH
62032: LD_INT 31
62034: ST_TO_ADDR
// vc_control := control_rider ;
62035: LD_ADDR_OWVAR 38
62039: PUSH
62040: LD_INT 4
62042: ST_TO_ADDR
// animal := CreateVehicle ;
62043: LD_ADDR_VAR 0 12
62047: PUSH
62048: CALL_OW 45
62052: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62053: LD_VAR 0 12
62057: PPUSH
62058: LD_VAR 0 8
62062: PPUSH
62063: LD_INT 0
62065: PPUSH
62066: CALL 64209 0 3
// end ;
62070: GO 62024
62072: POP
62073: POP
// if horses then
62074: LD_VAR 0 5
62078: IFFALSE 62145
// for i = 1 to horses do
62080: LD_ADDR_VAR 0 11
62084: PUSH
62085: DOUBLE
62086: LD_INT 1
62088: DEC
62089: ST_TO_ADDR
62090: LD_VAR 0 5
62094: PUSH
62095: FOR_TO
62096: IFFALSE 62143
// begin hc_class := 21 ;
62098: LD_ADDR_OWVAR 28
62102: PUSH
62103: LD_INT 21
62105: ST_TO_ADDR
// hc_gallery :=  ;
62106: LD_ADDR_OWVAR 33
62110: PUSH
62111: LD_STRING 
62113: ST_TO_ADDR
// animal := CreateHuman ;
62114: LD_ADDR_VAR 0 12
62118: PUSH
62119: CALL_OW 44
62123: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62124: LD_VAR 0 12
62128: PPUSH
62129: LD_VAR 0 8
62133: PPUSH
62134: LD_INT 0
62136: PPUSH
62137: CALL 64209 0 3
// end ;
62141: GO 62095
62143: POP
62144: POP
// if birds then
62145: LD_VAR 0 1
62149: IFFALSE 62216
// for i = 1 to birds do
62151: LD_ADDR_VAR 0 11
62155: PUSH
62156: DOUBLE
62157: LD_INT 1
62159: DEC
62160: ST_TO_ADDR
62161: LD_VAR 0 1
62165: PUSH
62166: FOR_TO
62167: IFFALSE 62214
// begin hc_class = 18 ;
62169: LD_ADDR_OWVAR 28
62173: PUSH
62174: LD_INT 18
62176: ST_TO_ADDR
// hc_gallery =  ;
62177: LD_ADDR_OWVAR 33
62181: PUSH
62182: LD_STRING 
62184: ST_TO_ADDR
// animal := CreateHuman ;
62185: LD_ADDR_VAR 0 12
62189: PUSH
62190: CALL_OW 44
62194: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62195: LD_VAR 0 12
62199: PPUSH
62200: LD_VAR 0 8
62204: PPUSH
62205: LD_INT 0
62207: PPUSH
62208: CALL 64209 0 3
// end ;
62212: GO 62166
62214: POP
62215: POP
// if tigers then
62216: LD_VAR 0 2
62220: IFFALSE 62304
// for i = 1 to tigers do
62222: LD_ADDR_VAR 0 11
62226: PUSH
62227: DOUBLE
62228: LD_INT 1
62230: DEC
62231: ST_TO_ADDR
62232: LD_VAR 0 2
62236: PUSH
62237: FOR_TO
62238: IFFALSE 62302
// begin hc_class = class_tiger ;
62240: LD_ADDR_OWVAR 28
62244: PUSH
62245: LD_INT 14
62247: ST_TO_ADDR
// hc_gallery =  ;
62248: LD_ADDR_OWVAR 33
62252: PUSH
62253: LD_STRING 
62255: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62256: LD_ADDR_OWVAR 35
62260: PUSH
62261: LD_INT 7
62263: NEG
62264: PPUSH
62265: LD_INT 7
62267: PPUSH
62268: CALL_OW 12
62272: ST_TO_ADDR
// animal := CreateHuman ;
62273: LD_ADDR_VAR 0 12
62277: PUSH
62278: CALL_OW 44
62282: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62283: LD_VAR 0 12
62287: PPUSH
62288: LD_VAR 0 8
62292: PPUSH
62293: LD_INT 0
62295: PPUSH
62296: CALL 64209 0 3
// end ;
62300: GO 62237
62302: POP
62303: POP
// if apemans then
62304: LD_VAR 0 3
62308: IFFALSE 62431
// for i = 1 to apemans do
62310: LD_ADDR_VAR 0 11
62314: PUSH
62315: DOUBLE
62316: LD_INT 1
62318: DEC
62319: ST_TO_ADDR
62320: LD_VAR 0 3
62324: PUSH
62325: FOR_TO
62326: IFFALSE 62429
// begin hc_class = class_apeman ;
62328: LD_ADDR_OWVAR 28
62332: PUSH
62333: LD_INT 12
62335: ST_TO_ADDR
// hc_gallery =  ;
62336: LD_ADDR_OWVAR 33
62340: PUSH
62341: LD_STRING 
62343: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62344: LD_ADDR_OWVAR 35
62348: PUSH
62349: LD_INT 2
62351: NEG
62352: PPUSH
62353: LD_INT 2
62355: PPUSH
62356: CALL_OW 12
62360: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62361: LD_ADDR_OWVAR 31
62365: PUSH
62366: LD_INT 1
62368: PPUSH
62369: LD_INT 3
62371: PPUSH
62372: CALL_OW 12
62376: PUSH
62377: LD_INT 1
62379: PPUSH
62380: LD_INT 3
62382: PPUSH
62383: CALL_OW 12
62387: PUSH
62388: LD_INT 0
62390: PUSH
62391: LD_INT 0
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: ST_TO_ADDR
// animal := CreateHuman ;
62400: LD_ADDR_VAR 0 12
62404: PUSH
62405: CALL_OW 44
62409: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62410: LD_VAR 0 12
62414: PPUSH
62415: LD_VAR 0 8
62419: PPUSH
62420: LD_INT 0
62422: PPUSH
62423: CALL 64209 0 3
// end ;
62427: GO 62325
62429: POP
62430: POP
// if enchidnas then
62431: LD_VAR 0 4
62435: IFFALSE 62502
// for i = 1 to enchidnas do
62437: LD_ADDR_VAR 0 11
62441: PUSH
62442: DOUBLE
62443: LD_INT 1
62445: DEC
62446: ST_TO_ADDR
62447: LD_VAR 0 4
62451: PUSH
62452: FOR_TO
62453: IFFALSE 62500
// begin hc_class = 13 ;
62455: LD_ADDR_OWVAR 28
62459: PUSH
62460: LD_INT 13
62462: ST_TO_ADDR
// hc_gallery =  ;
62463: LD_ADDR_OWVAR 33
62467: PUSH
62468: LD_STRING 
62470: ST_TO_ADDR
// animal := CreateHuman ;
62471: LD_ADDR_VAR 0 12
62475: PUSH
62476: CALL_OW 44
62480: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62481: LD_VAR 0 12
62485: PPUSH
62486: LD_VAR 0 8
62490: PPUSH
62491: LD_INT 0
62493: PPUSH
62494: CALL 64209 0 3
// end ;
62498: GO 62452
62500: POP
62501: POP
// if fishes then
62502: LD_VAR 0 7
62506: IFFALSE 62573
// for i = 1 to fishes do
62508: LD_ADDR_VAR 0 11
62512: PUSH
62513: DOUBLE
62514: LD_INT 1
62516: DEC
62517: ST_TO_ADDR
62518: LD_VAR 0 7
62522: PUSH
62523: FOR_TO
62524: IFFALSE 62571
// begin hc_class = 20 ;
62526: LD_ADDR_OWVAR 28
62530: PUSH
62531: LD_INT 20
62533: ST_TO_ADDR
// hc_gallery =  ;
62534: LD_ADDR_OWVAR 33
62538: PUSH
62539: LD_STRING 
62541: ST_TO_ADDR
// animal := CreateHuman ;
62542: LD_ADDR_VAR 0 12
62546: PUSH
62547: CALL_OW 44
62551: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62552: LD_VAR 0 12
62556: PPUSH
62557: LD_VAR 0 9
62561: PPUSH
62562: LD_INT 0
62564: PPUSH
62565: CALL 64209 0 3
// end ;
62569: GO 62523
62571: POP
62572: POP
// end ;
62573: LD_VAR 0 10
62577: RET
// export function WantHeal ( sci , unit ) ; begin
62578: LD_INT 0
62580: PPUSH
// if GetTaskList ( sci ) > 0 then
62581: LD_VAR 0 1
62585: PPUSH
62586: CALL_OW 437
62590: PUSH
62591: LD_INT 0
62593: GREATER
62594: IFFALSE 62664
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62596: LD_VAR 0 1
62600: PPUSH
62601: CALL_OW 437
62605: PUSH
62606: LD_INT 1
62608: ARRAY
62609: PUSH
62610: LD_INT 1
62612: ARRAY
62613: PUSH
62614: LD_STRING l
62616: EQUAL
62617: PUSH
62618: LD_VAR 0 1
62622: PPUSH
62623: CALL_OW 437
62627: PUSH
62628: LD_INT 1
62630: ARRAY
62631: PUSH
62632: LD_INT 4
62634: ARRAY
62635: PUSH
62636: LD_VAR 0 2
62640: EQUAL
62641: AND
62642: IFFALSE 62654
// result := true else
62644: LD_ADDR_VAR 0 3
62648: PUSH
62649: LD_INT 1
62651: ST_TO_ADDR
62652: GO 62662
// result := false ;
62654: LD_ADDR_VAR 0 3
62658: PUSH
62659: LD_INT 0
62661: ST_TO_ADDR
// end else
62662: GO 62672
// result := false ;
62664: LD_ADDR_VAR 0 3
62668: PUSH
62669: LD_INT 0
62671: ST_TO_ADDR
// end ;
62672: LD_VAR 0 3
62676: RET
// export function HealTarget ( sci ) ; begin
62677: LD_INT 0
62679: PPUSH
// if not sci then
62680: LD_VAR 0 1
62684: NOT
62685: IFFALSE 62689
// exit ;
62687: GO 62754
// result := 0 ;
62689: LD_ADDR_VAR 0 2
62693: PUSH
62694: LD_INT 0
62696: ST_TO_ADDR
// if GetTaskList ( sci ) then
62697: LD_VAR 0 1
62701: PPUSH
62702: CALL_OW 437
62706: IFFALSE 62754
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62708: LD_VAR 0 1
62712: PPUSH
62713: CALL_OW 437
62717: PUSH
62718: LD_INT 1
62720: ARRAY
62721: PUSH
62722: LD_INT 1
62724: ARRAY
62725: PUSH
62726: LD_STRING l
62728: EQUAL
62729: IFFALSE 62754
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62731: LD_ADDR_VAR 0 2
62735: PUSH
62736: LD_VAR 0 1
62740: PPUSH
62741: CALL_OW 437
62745: PUSH
62746: LD_INT 1
62748: ARRAY
62749: PUSH
62750: LD_INT 4
62752: ARRAY
62753: ST_TO_ADDR
// end ;
62754: LD_VAR 0 2
62758: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62759: LD_INT 0
62761: PPUSH
62762: PPUSH
62763: PPUSH
62764: PPUSH
// if not base_units then
62765: LD_VAR 0 1
62769: NOT
62770: IFFALSE 62774
// exit ;
62772: GO 62861
// result := false ;
62774: LD_ADDR_VAR 0 2
62778: PUSH
62779: LD_INT 0
62781: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62782: LD_ADDR_VAR 0 5
62786: PUSH
62787: LD_VAR 0 1
62791: PPUSH
62792: LD_INT 21
62794: PUSH
62795: LD_INT 3
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PPUSH
62802: CALL_OW 72
62806: ST_TO_ADDR
// if not tmp then
62807: LD_VAR 0 5
62811: NOT
62812: IFFALSE 62816
// exit ;
62814: GO 62861
// for i in tmp do
62816: LD_ADDR_VAR 0 3
62820: PUSH
62821: LD_VAR 0 5
62825: PUSH
62826: FOR_IN
62827: IFFALSE 62859
// begin result := EnemyInRange ( i , 22 ) ;
62829: LD_ADDR_VAR 0 2
62833: PUSH
62834: LD_VAR 0 3
62838: PPUSH
62839: LD_INT 22
62841: PPUSH
62842: CALL 61097 0 2
62846: ST_TO_ADDR
// if result then
62847: LD_VAR 0 2
62851: IFFALSE 62857
// exit ;
62853: POP
62854: POP
62855: GO 62861
// end ;
62857: GO 62826
62859: POP
62860: POP
// end ;
62861: LD_VAR 0 2
62865: RET
// export function FilterByTag ( units , tag ) ; begin
62866: LD_INT 0
62868: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
62869: LD_ADDR_VAR 0 3
62873: PUSH
62874: LD_VAR 0 1
62878: PPUSH
62879: LD_INT 120
62881: PUSH
62882: LD_VAR 0 2
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PPUSH
62891: CALL_OW 72
62895: ST_TO_ADDR
// end ;
62896: LD_VAR 0 3
62900: RET
// export function IsDriver ( un ) ; begin
62901: LD_INT 0
62903: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62904: LD_ADDR_VAR 0 2
62908: PUSH
62909: LD_VAR 0 1
62913: PUSH
62914: LD_INT 55
62916: PUSH
62917: EMPTY
62918: LIST
62919: PPUSH
62920: CALL_OW 69
62924: IN
62925: ST_TO_ADDR
// end ;
62926: LD_VAR 0 2
62930: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62931: LD_INT 0
62933: PPUSH
62934: PPUSH
// list := [ ] ;
62935: LD_ADDR_VAR 0 5
62939: PUSH
62940: EMPTY
62941: ST_TO_ADDR
// case d of 0 :
62942: LD_VAR 0 3
62946: PUSH
62947: LD_INT 0
62949: DOUBLE
62950: EQUAL
62951: IFTRUE 62955
62953: GO 63088
62955: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62956: LD_ADDR_VAR 0 5
62960: PUSH
62961: LD_VAR 0 1
62965: PUSH
62966: LD_INT 4
62968: MINUS
62969: PUSH
62970: LD_VAR 0 2
62974: PUSH
62975: LD_INT 4
62977: MINUS
62978: PUSH
62979: LD_INT 2
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: LIST
62986: PUSH
62987: LD_VAR 0 1
62991: PUSH
62992: LD_INT 3
62994: MINUS
62995: PUSH
62996: LD_VAR 0 2
63000: PUSH
63001: LD_INT 1
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: LIST
63008: PUSH
63009: LD_VAR 0 1
63013: PUSH
63014: LD_INT 4
63016: PLUS
63017: PUSH
63018: LD_VAR 0 2
63022: PUSH
63023: LD_INT 4
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: LIST
63030: PUSH
63031: LD_VAR 0 1
63035: PUSH
63036: LD_INT 3
63038: PLUS
63039: PUSH
63040: LD_VAR 0 2
63044: PUSH
63045: LD_INT 3
63047: PLUS
63048: PUSH
63049: LD_INT 5
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: LIST
63056: PUSH
63057: LD_VAR 0 1
63061: PUSH
63062: LD_VAR 0 2
63066: PUSH
63067: LD_INT 4
63069: PLUS
63070: PUSH
63071: LD_INT 0
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: LIST
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: ST_TO_ADDR
// end ; 1 :
63086: GO 63786
63088: LD_INT 1
63090: DOUBLE
63091: EQUAL
63092: IFTRUE 63096
63094: GO 63229
63096: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63097: LD_ADDR_VAR 0 5
63101: PUSH
63102: LD_VAR 0 1
63106: PUSH
63107: LD_VAR 0 2
63111: PUSH
63112: LD_INT 4
63114: MINUS
63115: PUSH
63116: LD_INT 3
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: LIST
63123: PUSH
63124: LD_VAR 0 1
63128: PUSH
63129: LD_INT 3
63131: MINUS
63132: PUSH
63133: LD_VAR 0 2
63137: PUSH
63138: LD_INT 3
63140: MINUS
63141: PUSH
63142: LD_INT 2
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: LIST
63149: PUSH
63150: LD_VAR 0 1
63154: PUSH
63155: LD_INT 4
63157: MINUS
63158: PUSH
63159: LD_VAR 0 2
63163: PUSH
63164: LD_INT 1
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: LIST
63171: PUSH
63172: LD_VAR 0 1
63176: PUSH
63177: LD_VAR 0 2
63181: PUSH
63182: LD_INT 3
63184: PLUS
63185: PUSH
63186: LD_INT 0
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: LIST
63193: PUSH
63194: LD_VAR 0 1
63198: PUSH
63199: LD_INT 4
63201: PLUS
63202: PUSH
63203: LD_VAR 0 2
63207: PUSH
63208: LD_INT 4
63210: PLUS
63211: PUSH
63212: LD_INT 5
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: LIST
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: LIST
63224: LIST
63225: LIST
63226: ST_TO_ADDR
// end ; 2 :
63227: GO 63786
63229: LD_INT 2
63231: DOUBLE
63232: EQUAL
63233: IFTRUE 63237
63235: GO 63366
63237: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63238: LD_ADDR_VAR 0 5
63242: PUSH
63243: LD_VAR 0 1
63247: PUSH
63248: LD_VAR 0 2
63252: PUSH
63253: LD_INT 3
63255: MINUS
63256: PUSH
63257: LD_INT 3
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: LIST
63264: PUSH
63265: LD_VAR 0 1
63269: PUSH
63270: LD_INT 4
63272: PLUS
63273: PUSH
63274: LD_VAR 0 2
63278: PUSH
63279: LD_INT 4
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: LIST
63286: PUSH
63287: LD_VAR 0 1
63291: PUSH
63292: LD_VAR 0 2
63296: PUSH
63297: LD_INT 4
63299: PLUS
63300: PUSH
63301: LD_INT 0
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: LIST
63308: PUSH
63309: LD_VAR 0 1
63313: PUSH
63314: LD_INT 3
63316: MINUS
63317: PUSH
63318: LD_VAR 0 2
63322: PUSH
63323: LD_INT 1
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: LIST
63330: PUSH
63331: LD_VAR 0 1
63335: PUSH
63336: LD_INT 4
63338: MINUS
63339: PUSH
63340: LD_VAR 0 2
63344: PUSH
63345: LD_INT 4
63347: MINUS
63348: PUSH
63349: LD_INT 2
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: LIST
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: ST_TO_ADDR
// end ; 3 :
63364: GO 63786
63366: LD_INT 3
63368: DOUBLE
63369: EQUAL
63370: IFTRUE 63374
63372: GO 63507
63374: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63375: LD_ADDR_VAR 0 5
63379: PUSH
63380: LD_VAR 0 1
63384: PUSH
63385: LD_INT 3
63387: PLUS
63388: PUSH
63389: LD_VAR 0 2
63393: PUSH
63394: LD_INT 4
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: LIST
63401: PUSH
63402: LD_VAR 0 1
63406: PUSH
63407: LD_INT 4
63409: PLUS
63410: PUSH
63411: LD_VAR 0 2
63415: PUSH
63416: LD_INT 4
63418: PLUS
63419: PUSH
63420: LD_INT 5
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: LIST
63427: PUSH
63428: LD_VAR 0 1
63432: PUSH
63433: LD_INT 4
63435: MINUS
63436: PUSH
63437: LD_VAR 0 2
63441: PUSH
63442: LD_INT 1
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: LIST
63449: PUSH
63450: LD_VAR 0 1
63454: PUSH
63455: LD_VAR 0 2
63459: PUSH
63460: LD_INT 4
63462: MINUS
63463: PUSH
63464: LD_INT 3
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: LIST
63471: PUSH
63472: LD_VAR 0 1
63476: PUSH
63477: LD_INT 3
63479: MINUS
63480: PUSH
63481: LD_VAR 0 2
63485: PUSH
63486: LD_INT 3
63488: MINUS
63489: PUSH
63490: LD_INT 2
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: LIST
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: ST_TO_ADDR
// end ; 4 :
63505: GO 63786
63507: LD_INT 4
63509: DOUBLE
63510: EQUAL
63511: IFTRUE 63515
63513: GO 63648
63515: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63516: LD_ADDR_VAR 0 5
63520: PUSH
63521: LD_VAR 0 1
63525: PUSH
63526: LD_VAR 0 2
63530: PUSH
63531: LD_INT 4
63533: PLUS
63534: PUSH
63535: LD_INT 0
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: LIST
63542: PUSH
63543: LD_VAR 0 1
63547: PUSH
63548: LD_INT 3
63550: PLUS
63551: PUSH
63552: LD_VAR 0 2
63556: PUSH
63557: LD_INT 3
63559: PLUS
63560: PUSH
63561: LD_INT 5
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: LIST
63568: PUSH
63569: LD_VAR 0 1
63573: PUSH
63574: LD_INT 4
63576: PLUS
63577: PUSH
63578: LD_VAR 0 2
63582: PUSH
63583: LD_INT 4
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: LIST
63590: PUSH
63591: LD_VAR 0 1
63595: PUSH
63596: LD_VAR 0 2
63600: PUSH
63601: LD_INT 3
63603: MINUS
63604: PUSH
63605: LD_INT 3
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: LIST
63612: PUSH
63613: LD_VAR 0 1
63617: PUSH
63618: LD_INT 4
63620: MINUS
63621: PUSH
63622: LD_VAR 0 2
63626: PUSH
63627: LD_INT 4
63629: MINUS
63630: PUSH
63631: LD_INT 2
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: LIST
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: ST_TO_ADDR
// end ; 5 :
63646: GO 63786
63648: LD_INT 5
63650: DOUBLE
63651: EQUAL
63652: IFTRUE 63656
63654: GO 63785
63656: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63657: LD_ADDR_VAR 0 5
63661: PUSH
63662: LD_VAR 0 1
63666: PUSH
63667: LD_INT 4
63669: MINUS
63670: PUSH
63671: LD_VAR 0 2
63675: PUSH
63676: LD_INT 1
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: LIST
63683: PUSH
63684: LD_VAR 0 1
63688: PUSH
63689: LD_VAR 0 2
63693: PUSH
63694: LD_INT 4
63696: MINUS
63697: PUSH
63698: LD_INT 3
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: LIST
63705: PUSH
63706: LD_VAR 0 1
63710: PUSH
63711: LD_INT 4
63713: PLUS
63714: PUSH
63715: LD_VAR 0 2
63719: PUSH
63720: LD_INT 4
63722: PLUS
63723: PUSH
63724: LD_INT 5
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: LIST
63731: PUSH
63732: LD_VAR 0 1
63736: PUSH
63737: LD_INT 3
63739: PLUS
63740: PUSH
63741: LD_VAR 0 2
63745: PUSH
63746: LD_INT 4
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: LIST
63753: PUSH
63754: LD_VAR 0 1
63758: PUSH
63759: LD_VAR 0 2
63763: PUSH
63764: LD_INT 3
63766: PLUS
63767: PUSH
63768: LD_INT 0
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: LIST
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: LIST
63780: LIST
63781: LIST
63782: ST_TO_ADDR
// end ; end ;
63783: GO 63786
63785: POP
// result := list ;
63786: LD_ADDR_VAR 0 4
63790: PUSH
63791: LD_VAR 0 5
63795: ST_TO_ADDR
// end ;
63796: LD_VAR 0 4
63800: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63801: LD_INT 0
63803: PPUSH
63804: PPUSH
63805: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63806: LD_VAR 0 1
63810: NOT
63811: PUSH
63812: LD_VAR 0 2
63816: PUSH
63817: LD_INT 1
63819: PUSH
63820: LD_INT 2
63822: PUSH
63823: LD_INT 3
63825: PUSH
63826: LD_INT 4
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: LIST
63833: LIST
63834: IN
63835: NOT
63836: OR
63837: IFFALSE 63841
// exit ;
63839: GO 63933
// tmp := [ ] ;
63841: LD_ADDR_VAR 0 5
63845: PUSH
63846: EMPTY
63847: ST_TO_ADDR
// for i in units do
63848: LD_ADDR_VAR 0 4
63852: PUSH
63853: LD_VAR 0 1
63857: PUSH
63858: FOR_IN
63859: IFFALSE 63902
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
63861: LD_ADDR_VAR 0 5
63865: PUSH
63866: LD_VAR 0 5
63870: PPUSH
63871: LD_VAR 0 5
63875: PUSH
63876: LD_INT 1
63878: PLUS
63879: PPUSH
63880: LD_VAR 0 4
63884: PPUSH
63885: LD_VAR 0 2
63889: PPUSH
63890: CALL_OW 259
63894: PPUSH
63895: CALL_OW 2
63899: ST_TO_ADDR
63900: GO 63858
63902: POP
63903: POP
// if not tmp then
63904: LD_VAR 0 5
63908: NOT
63909: IFFALSE 63913
// exit ;
63911: GO 63933
// result := SortListByListDesc ( units , tmp ) ;
63913: LD_ADDR_VAR 0 3
63917: PUSH
63918: LD_VAR 0 1
63922: PPUSH
63923: LD_VAR 0 5
63927: PPUSH
63928: CALL_OW 77
63932: ST_TO_ADDR
// end ;
63933: LD_VAR 0 3
63937: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63938: LD_INT 0
63940: PPUSH
63941: PPUSH
63942: PPUSH
// result := false ;
63943: LD_ADDR_VAR 0 3
63947: PUSH
63948: LD_INT 0
63950: ST_TO_ADDR
// x := GetX ( building ) ;
63951: LD_ADDR_VAR 0 4
63955: PUSH
63956: LD_VAR 0 2
63960: PPUSH
63961: CALL_OW 250
63965: ST_TO_ADDR
// y := GetY ( building ) ;
63966: LD_ADDR_VAR 0 5
63970: PUSH
63971: LD_VAR 0 2
63975: PPUSH
63976: CALL_OW 251
63980: ST_TO_ADDR
// if not building or not x or not y then
63981: LD_VAR 0 2
63985: NOT
63986: PUSH
63987: LD_VAR 0 4
63991: NOT
63992: OR
63993: PUSH
63994: LD_VAR 0 5
63998: NOT
63999: OR
64000: IFFALSE 64004
// exit ;
64002: GO 64096
// if GetTaskList ( unit ) then
64004: LD_VAR 0 1
64008: PPUSH
64009: CALL_OW 437
64013: IFFALSE 64096
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64015: LD_STRING e
64017: PUSH
64018: LD_VAR 0 1
64022: PPUSH
64023: CALL_OW 437
64027: PUSH
64028: LD_INT 1
64030: ARRAY
64031: PUSH
64032: LD_INT 1
64034: ARRAY
64035: EQUAL
64036: PUSH
64037: LD_VAR 0 4
64041: PUSH
64042: LD_VAR 0 1
64046: PPUSH
64047: CALL_OW 437
64051: PUSH
64052: LD_INT 1
64054: ARRAY
64055: PUSH
64056: LD_INT 2
64058: ARRAY
64059: EQUAL
64060: AND
64061: PUSH
64062: LD_VAR 0 5
64066: PUSH
64067: LD_VAR 0 1
64071: PPUSH
64072: CALL_OW 437
64076: PUSH
64077: LD_INT 1
64079: ARRAY
64080: PUSH
64081: LD_INT 3
64083: ARRAY
64084: EQUAL
64085: AND
64086: IFFALSE 64096
// result := true end ;
64088: LD_ADDR_VAR 0 3
64092: PUSH
64093: LD_INT 1
64095: ST_TO_ADDR
// end ;
64096: LD_VAR 0 3
64100: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64101: LD_INT 0
64103: PPUSH
// result := false ;
64104: LD_ADDR_VAR 0 4
64108: PUSH
64109: LD_INT 0
64111: ST_TO_ADDR
// if GetTaskList ( unit ) then
64112: LD_VAR 0 1
64116: PPUSH
64117: CALL_OW 437
64121: IFFALSE 64204
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64123: LD_STRING M
64125: PUSH
64126: LD_VAR 0 1
64130: PPUSH
64131: CALL_OW 437
64135: PUSH
64136: LD_INT 1
64138: ARRAY
64139: PUSH
64140: LD_INT 1
64142: ARRAY
64143: EQUAL
64144: PUSH
64145: LD_VAR 0 2
64149: PUSH
64150: LD_VAR 0 1
64154: PPUSH
64155: CALL_OW 437
64159: PUSH
64160: LD_INT 1
64162: ARRAY
64163: PUSH
64164: LD_INT 2
64166: ARRAY
64167: EQUAL
64168: AND
64169: PUSH
64170: LD_VAR 0 3
64174: PUSH
64175: LD_VAR 0 1
64179: PPUSH
64180: CALL_OW 437
64184: PUSH
64185: LD_INT 1
64187: ARRAY
64188: PUSH
64189: LD_INT 3
64191: ARRAY
64192: EQUAL
64193: AND
64194: IFFALSE 64204
// result := true ;
64196: LD_ADDR_VAR 0 4
64200: PUSH
64201: LD_INT 1
64203: ST_TO_ADDR
// end ; end ;
64204: LD_VAR 0 4
64208: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64209: LD_INT 0
64211: PPUSH
64212: PPUSH
64213: PPUSH
64214: PPUSH
// if not unit or not area then
64215: LD_VAR 0 1
64219: NOT
64220: PUSH
64221: LD_VAR 0 2
64225: NOT
64226: OR
64227: IFFALSE 64231
// exit ;
64229: GO 64395
// tmp := AreaToList ( area , i ) ;
64231: LD_ADDR_VAR 0 6
64235: PUSH
64236: LD_VAR 0 2
64240: PPUSH
64241: LD_VAR 0 5
64245: PPUSH
64246: CALL_OW 517
64250: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64251: LD_ADDR_VAR 0 5
64255: PUSH
64256: DOUBLE
64257: LD_INT 1
64259: DEC
64260: ST_TO_ADDR
64261: LD_VAR 0 6
64265: PUSH
64266: LD_INT 1
64268: ARRAY
64269: PUSH
64270: FOR_TO
64271: IFFALSE 64393
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64273: LD_ADDR_VAR 0 7
64277: PUSH
64278: LD_VAR 0 6
64282: PUSH
64283: LD_INT 1
64285: ARRAY
64286: PUSH
64287: LD_VAR 0 5
64291: ARRAY
64292: PUSH
64293: LD_VAR 0 6
64297: PUSH
64298: LD_INT 2
64300: ARRAY
64301: PUSH
64302: LD_VAR 0 5
64306: ARRAY
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
64312: LD_VAR 0 7
64316: PUSH
64317: LD_INT 1
64319: ARRAY
64320: PPUSH
64321: LD_VAR 0 7
64325: PUSH
64326: LD_INT 2
64328: ARRAY
64329: PPUSH
64330: CALL_OW 428
64334: PUSH
64335: LD_INT 0
64337: EQUAL
64338: IFFALSE 64391
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64340: LD_VAR 0 1
64344: PPUSH
64345: LD_VAR 0 7
64349: PUSH
64350: LD_INT 1
64352: ARRAY
64353: PPUSH
64354: LD_VAR 0 7
64358: PUSH
64359: LD_INT 2
64361: ARRAY
64362: PPUSH
64363: LD_VAR 0 3
64367: PPUSH
64368: CALL_OW 48
// result := IsPlaced ( unit ) ;
64372: LD_ADDR_VAR 0 4
64376: PUSH
64377: LD_VAR 0 1
64381: PPUSH
64382: CALL_OW 305
64386: ST_TO_ADDR
// exit ;
64387: POP
64388: POP
64389: GO 64395
// end ; end ;
64391: GO 64270
64393: POP
64394: POP
// end ;
64395: LD_VAR 0 4
64399: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64400: LD_INT 0
64402: PPUSH
64403: PPUSH
64404: PPUSH
// if not side or side > 8 then
64405: LD_VAR 0 1
64409: NOT
64410: PUSH
64411: LD_VAR 0 1
64415: PUSH
64416: LD_INT 8
64418: GREATER
64419: OR
64420: IFFALSE 64424
// exit ;
64422: GO 64611
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64424: LD_ADDR_VAR 0 4
64428: PUSH
64429: LD_INT 22
64431: PUSH
64432: LD_VAR 0 1
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: PUSH
64441: LD_INT 21
64443: PUSH
64444: LD_INT 3
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PPUSH
64455: CALL_OW 69
64459: ST_TO_ADDR
// if not tmp then
64460: LD_VAR 0 4
64464: NOT
64465: IFFALSE 64469
// exit ;
64467: GO 64611
// enable_addtolog := true ;
64469: LD_ADDR_OWVAR 81
64473: PUSH
64474: LD_INT 1
64476: ST_TO_ADDR
// AddToLog ( [ ) ;
64477: LD_STRING [
64479: PPUSH
64480: CALL_OW 561
// for i in tmp do
64484: LD_ADDR_VAR 0 3
64488: PUSH
64489: LD_VAR 0 4
64493: PUSH
64494: FOR_IN
64495: IFFALSE 64602
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64497: LD_STRING [
64499: PUSH
64500: LD_VAR 0 3
64504: PPUSH
64505: CALL_OW 266
64509: STR
64510: PUSH
64511: LD_STRING , 
64513: STR
64514: PUSH
64515: LD_VAR 0 3
64519: PPUSH
64520: CALL_OW 250
64524: STR
64525: PUSH
64526: LD_STRING , 
64528: STR
64529: PUSH
64530: LD_VAR 0 3
64534: PPUSH
64535: CALL_OW 251
64539: STR
64540: PUSH
64541: LD_STRING , 
64543: STR
64544: PUSH
64545: LD_VAR 0 3
64549: PPUSH
64550: CALL_OW 254
64554: STR
64555: PUSH
64556: LD_STRING , 
64558: STR
64559: PUSH
64560: LD_VAR 0 3
64564: PPUSH
64565: LD_INT 1
64567: PPUSH
64568: CALL_OW 268
64572: STR
64573: PUSH
64574: LD_STRING , 
64576: STR
64577: PUSH
64578: LD_VAR 0 3
64582: PPUSH
64583: LD_INT 2
64585: PPUSH
64586: CALL_OW 268
64590: STR
64591: PUSH
64592: LD_STRING ],
64594: STR
64595: PPUSH
64596: CALL_OW 561
// end ;
64600: GO 64494
64602: POP
64603: POP
// AddToLog ( ]; ) ;
64604: LD_STRING ];
64606: PPUSH
64607: CALL_OW 561
// end ;
64611: LD_VAR 0 2
64615: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64616: LD_INT 0
64618: PPUSH
64619: PPUSH
64620: PPUSH
64621: PPUSH
64622: PPUSH
// if not area or not rate or not max then
64623: LD_VAR 0 1
64627: NOT
64628: PUSH
64629: LD_VAR 0 2
64633: NOT
64634: OR
64635: PUSH
64636: LD_VAR 0 4
64640: NOT
64641: OR
64642: IFFALSE 64646
// exit ;
64644: GO 64835
// while 1 do
64646: LD_INT 1
64648: IFFALSE 64835
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64650: LD_ADDR_VAR 0 9
64654: PUSH
64655: LD_VAR 0 1
64659: PPUSH
64660: LD_INT 1
64662: PPUSH
64663: CALL_OW 287
64667: PUSH
64668: LD_INT 10
64670: MUL
64671: ST_TO_ADDR
// r := rate / 10 ;
64672: LD_ADDR_VAR 0 7
64676: PUSH
64677: LD_VAR 0 2
64681: PUSH
64682: LD_INT 10
64684: DIVREAL
64685: ST_TO_ADDR
// time := 1 1$00 ;
64686: LD_ADDR_VAR 0 8
64690: PUSH
64691: LD_INT 2100
64693: ST_TO_ADDR
// if amount < min then
64694: LD_VAR 0 9
64698: PUSH
64699: LD_VAR 0 3
64703: LESS
64704: IFFALSE 64722
// r := r * 2 else
64706: LD_ADDR_VAR 0 7
64710: PUSH
64711: LD_VAR 0 7
64715: PUSH
64716: LD_INT 2
64718: MUL
64719: ST_TO_ADDR
64720: GO 64748
// if amount > max then
64722: LD_VAR 0 9
64726: PUSH
64727: LD_VAR 0 4
64731: GREATER
64732: IFFALSE 64748
// r := r / 2 ;
64734: LD_ADDR_VAR 0 7
64738: PUSH
64739: LD_VAR 0 7
64743: PUSH
64744: LD_INT 2
64746: DIVREAL
64747: ST_TO_ADDR
// time := time / r ;
64748: LD_ADDR_VAR 0 8
64752: PUSH
64753: LD_VAR 0 8
64757: PUSH
64758: LD_VAR 0 7
64762: DIVREAL
64763: ST_TO_ADDR
// if time < 0 then
64764: LD_VAR 0 8
64768: PUSH
64769: LD_INT 0
64771: LESS
64772: IFFALSE 64789
// time := time * - 1 ;
64774: LD_ADDR_VAR 0 8
64778: PUSH
64779: LD_VAR 0 8
64783: PUSH
64784: LD_INT 1
64786: NEG
64787: MUL
64788: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
64789: LD_VAR 0 8
64793: PUSH
64794: LD_INT 35
64796: PPUSH
64797: LD_INT 875
64799: PPUSH
64800: CALL_OW 12
64804: PLUS
64805: PPUSH
64806: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64810: LD_INT 1
64812: PPUSH
64813: LD_INT 5
64815: PPUSH
64816: CALL_OW 12
64820: PPUSH
64821: LD_VAR 0 1
64825: PPUSH
64826: LD_INT 1
64828: PPUSH
64829: CALL_OW 55
// end ;
64833: GO 64646
// end ;
64835: LD_VAR 0 5
64839: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64840: LD_INT 0
64842: PPUSH
64843: PPUSH
64844: PPUSH
64845: PPUSH
64846: PPUSH
64847: PPUSH
64848: PPUSH
64849: PPUSH
// if not turrets or not factories then
64850: LD_VAR 0 1
64854: NOT
64855: PUSH
64856: LD_VAR 0 2
64860: NOT
64861: OR
64862: IFFALSE 64866
// exit ;
64864: GO 65173
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64866: LD_ADDR_VAR 0 10
64870: PUSH
64871: LD_INT 5
64873: PUSH
64874: LD_INT 6
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: LD_INT 2
64883: PUSH
64884: LD_INT 4
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: LD_INT 3
64893: PUSH
64894: LD_INT 5
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 24
64908: PUSH
64909: LD_INT 25
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: LD_INT 23
64918: PUSH
64919: LD_INT 27
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: PUSH
64930: LD_INT 42
64932: PUSH
64933: LD_INT 43
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: LD_INT 44
64942: PUSH
64943: LD_INT 46
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: PUSH
64950: LD_INT 45
64952: PUSH
64953: LD_INT 47
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: LIST
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: LIST
64969: ST_TO_ADDR
// result := [ ] ;
64970: LD_ADDR_VAR 0 3
64974: PUSH
64975: EMPTY
64976: ST_TO_ADDR
// for i in turrets do
64977: LD_ADDR_VAR 0 4
64981: PUSH
64982: LD_VAR 0 1
64986: PUSH
64987: FOR_IN
64988: IFFALSE 65171
// begin nat := GetNation ( i ) ;
64990: LD_ADDR_VAR 0 7
64994: PUSH
64995: LD_VAR 0 4
64999: PPUSH
65000: CALL_OW 248
65004: ST_TO_ADDR
// weapon := 0 ;
65005: LD_ADDR_VAR 0 8
65009: PUSH
65010: LD_INT 0
65012: ST_TO_ADDR
// if not nat then
65013: LD_VAR 0 7
65017: NOT
65018: IFFALSE 65022
// continue ;
65020: GO 64987
// for j in list [ nat ] do
65022: LD_ADDR_VAR 0 5
65026: PUSH
65027: LD_VAR 0 10
65031: PUSH
65032: LD_VAR 0 7
65036: ARRAY
65037: PUSH
65038: FOR_IN
65039: IFFALSE 65080
// if GetBWeapon ( i ) = j [ 1 ] then
65041: LD_VAR 0 4
65045: PPUSH
65046: CALL_OW 269
65050: PUSH
65051: LD_VAR 0 5
65055: PUSH
65056: LD_INT 1
65058: ARRAY
65059: EQUAL
65060: IFFALSE 65078
// begin weapon := j [ 2 ] ;
65062: LD_ADDR_VAR 0 8
65066: PUSH
65067: LD_VAR 0 5
65071: PUSH
65072: LD_INT 2
65074: ARRAY
65075: ST_TO_ADDR
// break ;
65076: GO 65080
// end ;
65078: GO 65038
65080: POP
65081: POP
// if not weapon then
65082: LD_VAR 0 8
65086: NOT
65087: IFFALSE 65091
// continue ;
65089: GO 64987
// for k in factories do
65091: LD_ADDR_VAR 0 6
65095: PUSH
65096: LD_VAR 0 2
65100: PUSH
65101: FOR_IN
65102: IFFALSE 65167
// begin weapons := AvailableWeaponList ( k ) ;
65104: LD_ADDR_VAR 0 9
65108: PUSH
65109: LD_VAR 0 6
65113: PPUSH
65114: CALL_OW 478
65118: ST_TO_ADDR
// if not weapons then
65119: LD_VAR 0 9
65123: NOT
65124: IFFALSE 65128
// continue ;
65126: GO 65101
// if weapon in weapons then
65128: LD_VAR 0 8
65132: PUSH
65133: LD_VAR 0 9
65137: IN
65138: IFFALSE 65165
// begin result := [ i , weapon ] ;
65140: LD_ADDR_VAR 0 3
65144: PUSH
65145: LD_VAR 0 4
65149: PUSH
65150: LD_VAR 0 8
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: ST_TO_ADDR
// exit ;
65159: POP
65160: POP
65161: POP
65162: POP
65163: GO 65173
// end ; end ;
65165: GO 65101
65167: POP
65168: POP
// end ;
65169: GO 64987
65171: POP
65172: POP
// end ;
65173: LD_VAR 0 3
65177: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65178: LD_INT 0
65180: PPUSH
// if not side or side > 8 then
65181: LD_VAR 0 3
65185: NOT
65186: PUSH
65187: LD_VAR 0 3
65191: PUSH
65192: LD_INT 8
65194: GREATER
65195: OR
65196: IFFALSE 65200
// exit ;
65198: GO 65259
// if not range then
65200: LD_VAR 0 4
65204: NOT
65205: IFFALSE 65216
// range := - 12 ;
65207: LD_ADDR_VAR 0 4
65211: PUSH
65212: LD_INT 12
65214: NEG
65215: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65216: LD_VAR 0 1
65220: PPUSH
65221: LD_VAR 0 2
65225: PPUSH
65226: LD_VAR 0 3
65230: PPUSH
65231: LD_VAR 0 4
65235: PPUSH
65236: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65240: LD_VAR 0 1
65244: PPUSH
65245: LD_VAR 0 2
65249: PPUSH
65250: LD_VAR 0 3
65254: PPUSH
65255: CALL_OW 331
// end ;
65259: LD_VAR 0 5
65263: RET
// export function Video ( mode ) ; begin
65264: LD_INT 0
65266: PPUSH
// ingame_video = mode ;
65267: LD_ADDR_OWVAR 52
65271: PUSH
65272: LD_VAR 0 1
65276: ST_TO_ADDR
// interface_hidden = mode ;
65277: LD_ADDR_OWVAR 54
65281: PUSH
65282: LD_VAR 0 1
65286: ST_TO_ADDR
// end ;
65287: LD_VAR 0 2
65291: RET
// export function Join ( array , element ) ; begin
65292: LD_INT 0
65294: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65295: LD_ADDR_VAR 0 3
65299: PUSH
65300: LD_VAR 0 1
65304: PPUSH
65305: LD_VAR 0 1
65309: PUSH
65310: LD_INT 1
65312: PLUS
65313: PPUSH
65314: LD_VAR 0 2
65318: PPUSH
65319: CALL_OW 1
65323: ST_TO_ADDR
// end ;
65324: LD_VAR 0 3
65328: RET
// export function JoinUnion ( array , element ) ; begin
65329: LD_INT 0
65331: PPUSH
// result := array union element ;
65332: LD_ADDR_VAR 0 3
65336: PUSH
65337: LD_VAR 0 1
65341: PUSH
65342: LD_VAR 0 2
65346: UNION
65347: ST_TO_ADDR
// end ;
65348: LD_VAR 0 3
65352: RET
// export function GetBehemoths ( side ) ; begin
65353: LD_INT 0
65355: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
65356: LD_ADDR_VAR 0 2
65360: PUSH
65361: LD_INT 22
65363: PUSH
65364: LD_VAR 0 1
65368: PUSH
65369: EMPTY
65370: LIST
65371: LIST
65372: PUSH
65373: LD_INT 31
65375: PUSH
65376: LD_INT 25
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: PPUSH
65387: CALL_OW 69
65391: ST_TO_ADDR
// end ;
65392: LD_VAR 0 2
65396: RET
// export function Shuffle ( array ) ; var i , index ; begin
65397: LD_INT 0
65399: PPUSH
65400: PPUSH
65401: PPUSH
// result := [ ] ;
65402: LD_ADDR_VAR 0 2
65406: PUSH
65407: EMPTY
65408: ST_TO_ADDR
// if not array then
65409: LD_VAR 0 1
65413: NOT
65414: IFFALSE 65418
// exit ;
65416: GO 65517
// Randomize ;
65418: CALL_OW 10
// for i = array downto 1 do
65422: LD_ADDR_VAR 0 3
65426: PUSH
65427: DOUBLE
65428: LD_VAR 0 1
65432: INC
65433: ST_TO_ADDR
65434: LD_INT 1
65436: PUSH
65437: FOR_DOWNTO
65438: IFFALSE 65515
// begin index := rand ( 1 , array ) ;
65440: LD_ADDR_VAR 0 4
65444: PUSH
65445: LD_INT 1
65447: PPUSH
65448: LD_VAR 0 1
65452: PPUSH
65453: CALL_OW 12
65457: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65458: LD_ADDR_VAR 0 2
65462: PUSH
65463: LD_VAR 0 2
65467: PPUSH
65468: LD_VAR 0 2
65472: PUSH
65473: LD_INT 1
65475: PLUS
65476: PPUSH
65477: LD_VAR 0 1
65481: PUSH
65482: LD_VAR 0 4
65486: ARRAY
65487: PPUSH
65488: CALL_OW 2
65492: ST_TO_ADDR
// array := Delete ( array , index ) ;
65493: LD_ADDR_VAR 0 1
65497: PUSH
65498: LD_VAR 0 1
65502: PPUSH
65503: LD_VAR 0 4
65507: PPUSH
65508: CALL_OW 3
65512: ST_TO_ADDR
// end ;
65513: GO 65437
65515: POP
65516: POP
// end ;
65517: LD_VAR 0 2
65521: RET
// export function GetBaseMaterials ( base ) ; begin
65522: LD_INT 0
65524: PPUSH
// result := [ 0 , 0 , 0 ] ;
65525: LD_ADDR_VAR 0 2
65529: PUSH
65530: LD_INT 0
65532: PUSH
65533: LD_INT 0
65535: PUSH
65536: LD_INT 0
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: LIST
65543: ST_TO_ADDR
// if not base then
65544: LD_VAR 0 1
65548: NOT
65549: IFFALSE 65553
// exit ;
65551: GO 65602
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65553: LD_ADDR_VAR 0 2
65557: PUSH
65558: LD_VAR 0 1
65562: PPUSH
65563: LD_INT 1
65565: PPUSH
65566: CALL_OW 275
65570: PUSH
65571: LD_VAR 0 1
65575: PPUSH
65576: LD_INT 2
65578: PPUSH
65579: CALL_OW 275
65583: PUSH
65584: LD_VAR 0 1
65588: PPUSH
65589: LD_INT 3
65591: PPUSH
65592: CALL_OW 275
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: LIST
65601: ST_TO_ADDR
// end ;
65602: LD_VAR 0 2
65606: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65607: LD_INT 0
65609: PPUSH
65610: PPUSH
// result := array ;
65611: LD_ADDR_VAR 0 3
65615: PUSH
65616: LD_VAR 0 1
65620: ST_TO_ADDR
// if size > 0 then
65621: LD_VAR 0 2
65625: PUSH
65626: LD_INT 0
65628: GREATER
65629: IFFALSE 65675
// for i := array downto size do
65631: LD_ADDR_VAR 0 4
65635: PUSH
65636: DOUBLE
65637: LD_VAR 0 1
65641: INC
65642: ST_TO_ADDR
65643: LD_VAR 0 2
65647: PUSH
65648: FOR_DOWNTO
65649: IFFALSE 65673
// result := Delete ( result , result ) ;
65651: LD_ADDR_VAR 0 3
65655: PUSH
65656: LD_VAR 0 3
65660: PPUSH
65661: LD_VAR 0 3
65665: PPUSH
65666: CALL_OW 3
65670: ST_TO_ADDR
65671: GO 65648
65673: POP
65674: POP
// end ;
65675: LD_VAR 0 3
65679: RET
// export function ComExit ( unit ) ; var tmp ; begin
65680: LD_INT 0
65682: PPUSH
65683: PPUSH
// if not IsInUnit ( unit ) then
65684: LD_VAR 0 1
65688: PPUSH
65689: CALL_OW 310
65693: NOT
65694: IFFALSE 65698
// exit ;
65696: GO 65758
// tmp := IsInUnit ( unit ) ;
65698: LD_ADDR_VAR 0 3
65702: PUSH
65703: LD_VAR 0 1
65707: PPUSH
65708: CALL_OW 310
65712: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65713: LD_VAR 0 3
65717: PPUSH
65718: CALL_OW 247
65722: PUSH
65723: LD_INT 2
65725: EQUAL
65726: IFFALSE 65739
// ComExitVehicle ( unit ) else
65728: LD_VAR 0 1
65732: PPUSH
65733: CALL_OW 121
65737: GO 65748
// ComExitBuilding ( unit ) ;
65739: LD_VAR 0 1
65743: PPUSH
65744: CALL_OW 122
// result := tmp ;
65748: LD_ADDR_VAR 0 2
65752: PUSH
65753: LD_VAR 0 3
65757: ST_TO_ADDR
// end ;
65758: LD_VAR 0 2
65762: RET
// export function ComExitAll ( units ) ; var i ; begin
65763: LD_INT 0
65765: PPUSH
65766: PPUSH
// if not units then
65767: LD_VAR 0 1
65771: NOT
65772: IFFALSE 65776
// exit ;
65774: GO 65802
// for i in units do
65776: LD_ADDR_VAR 0 3
65780: PUSH
65781: LD_VAR 0 1
65785: PUSH
65786: FOR_IN
65787: IFFALSE 65800
// ComExit ( i ) ;
65789: LD_VAR 0 3
65793: PPUSH
65794: CALL 65680 0 1
65798: GO 65786
65800: POP
65801: POP
// end ;
65802: LD_VAR 0 2
65806: RET
// export function ResetHc ; begin
65807: LD_INT 0
65809: PPUSH
// InitHc ;
65810: CALL_OW 19
// hc_importance := 0 ;
65814: LD_ADDR_OWVAR 32
65818: PUSH
65819: LD_INT 0
65821: ST_TO_ADDR
// end ;
65822: LD_VAR 0 1
65826: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65827: LD_INT 0
65829: PPUSH
65830: PPUSH
65831: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65832: LD_ADDR_VAR 0 6
65836: PUSH
65837: LD_VAR 0 1
65841: PUSH
65842: LD_VAR 0 3
65846: PLUS
65847: PUSH
65848: LD_INT 2
65850: DIV
65851: ST_TO_ADDR
// if _x < 0 then
65852: LD_VAR 0 6
65856: PUSH
65857: LD_INT 0
65859: LESS
65860: IFFALSE 65877
// _x := _x * - 1 ;
65862: LD_ADDR_VAR 0 6
65866: PUSH
65867: LD_VAR 0 6
65871: PUSH
65872: LD_INT 1
65874: NEG
65875: MUL
65876: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65877: LD_ADDR_VAR 0 7
65881: PUSH
65882: LD_VAR 0 2
65886: PUSH
65887: LD_VAR 0 4
65891: PLUS
65892: PUSH
65893: LD_INT 2
65895: DIV
65896: ST_TO_ADDR
// if _y < 0 then
65897: LD_VAR 0 7
65901: PUSH
65902: LD_INT 0
65904: LESS
65905: IFFALSE 65922
// _y := _y * - 1 ;
65907: LD_ADDR_VAR 0 7
65911: PUSH
65912: LD_VAR 0 7
65916: PUSH
65917: LD_INT 1
65919: NEG
65920: MUL
65921: ST_TO_ADDR
// result := [ _x , _y ] ;
65922: LD_ADDR_VAR 0 5
65926: PUSH
65927: LD_VAR 0 6
65931: PUSH
65932: LD_VAR 0 7
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: ST_TO_ADDR
// end ;
65941: LD_VAR 0 5
65945: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65946: LD_INT 0
65948: PPUSH
65949: PPUSH
65950: PPUSH
65951: PPUSH
// task := GetTaskList ( unit ) ;
65952: LD_ADDR_VAR 0 7
65956: PUSH
65957: LD_VAR 0 1
65961: PPUSH
65962: CALL_OW 437
65966: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65967: LD_VAR 0 7
65971: NOT
65972: PUSH
65973: LD_VAR 0 1
65977: PPUSH
65978: LD_VAR 0 2
65982: PPUSH
65983: CALL_OW 308
65987: NOT
65988: AND
65989: IFFALSE 65993
// exit ;
65991: GO 66111
// if IsInArea ( unit , area ) then
65993: LD_VAR 0 1
65997: PPUSH
65998: LD_VAR 0 2
66002: PPUSH
66003: CALL_OW 308
66007: IFFALSE 66025
// begin ComMoveToArea ( unit , goAway ) ;
66009: LD_VAR 0 1
66013: PPUSH
66014: LD_VAR 0 3
66018: PPUSH
66019: CALL_OW 113
// exit ;
66023: GO 66111
// end ; if task [ 1 ] [ 1 ] <> M then
66025: LD_VAR 0 7
66029: PUSH
66030: LD_INT 1
66032: ARRAY
66033: PUSH
66034: LD_INT 1
66036: ARRAY
66037: PUSH
66038: LD_STRING M
66040: NONEQUAL
66041: IFFALSE 66045
// exit ;
66043: GO 66111
// x := task [ 1 ] [ 2 ] ;
66045: LD_ADDR_VAR 0 5
66049: PUSH
66050: LD_VAR 0 7
66054: PUSH
66055: LD_INT 1
66057: ARRAY
66058: PUSH
66059: LD_INT 2
66061: ARRAY
66062: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66063: LD_ADDR_VAR 0 6
66067: PUSH
66068: LD_VAR 0 7
66072: PUSH
66073: LD_INT 1
66075: ARRAY
66076: PUSH
66077: LD_INT 3
66079: ARRAY
66080: ST_TO_ADDR
// if InArea ( x , y , area ) then
66081: LD_VAR 0 5
66085: PPUSH
66086: LD_VAR 0 6
66090: PPUSH
66091: LD_VAR 0 2
66095: PPUSH
66096: CALL_OW 309
66100: IFFALSE 66111
// ComStop ( unit ) ;
66102: LD_VAR 0 1
66106: PPUSH
66107: CALL_OW 141
// end ;
66111: LD_VAR 0 4
66115: RET
// export function Abs ( value ) ; begin
66116: LD_INT 0
66118: PPUSH
// result := value ;
66119: LD_ADDR_VAR 0 2
66123: PUSH
66124: LD_VAR 0 1
66128: ST_TO_ADDR
// if value < 0 then
66129: LD_VAR 0 1
66133: PUSH
66134: LD_INT 0
66136: LESS
66137: IFFALSE 66154
// result := value * - 1 ;
66139: LD_ADDR_VAR 0 2
66143: PUSH
66144: LD_VAR 0 1
66148: PUSH
66149: LD_INT 1
66151: NEG
66152: MUL
66153: ST_TO_ADDR
// end ;
66154: LD_VAR 0 2
66158: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66159: LD_INT 0
66161: PPUSH
66162: PPUSH
66163: PPUSH
66164: PPUSH
66165: PPUSH
66166: PPUSH
66167: PPUSH
66168: PPUSH
// if not unit or not building then
66169: LD_VAR 0 1
66173: NOT
66174: PUSH
66175: LD_VAR 0 2
66179: NOT
66180: OR
66181: IFFALSE 66185
// exit ;
66183: GO 66411
// x := GetX ( building ) ;
66185: LD_ADDR_VAR 0 4
66189: PUSH
66190: LD_VAR 0 2
66194: PPUSH
66195: CALL_OW 250
66199: ST_TO_ADDR
// y := GetY ( building ) ;
66200: LD_ADDR_VAR 0 6
66204: PUSH
66205: LD_VAR 0 2
66209: PPUSH
66210: CALL_OW 251
66214: ST_TO_ADDR
// d := GetDir ( building ) ;
66215: LD_ADDR_VAR 0 8
66219: PUSH
66220: LD_VAR 0 2
66224: PPUSH
66225: CALL_OW 254
66229: ST_TO_ADDR
// r := 4 ;
66230: LD_ADDR_VAR 0 9
66234: PUSH
66235: LD_INT 4
66237: ST_TO_ADDR
// for i := 1 to 5 do
66238: LD_ADDR_VAR 0 10
66242: PUSH
66243: DOUBLE
66244: LD_INT 1
66246: DEC
66247: ST_TO_ADDR
66248: LD_INT 5
66250: PUSH
66251: FOR_TO
66252: IFFALSE 66409
// begin _x := ShiftX ( x , d , r + i ) ;
66254: LD_ADDR_VAR 0 5
66258: PUSH
66259: LD_VAR 0 4
66263: PPUSH
66264: LD_VAR 0 8
66268: PPUSH
66269: LD_VAR 0 9
66273: PUSH
66274: LD_VAR 0 10
66278: PLUS
66279: PPUSH
66280: CALL_OW 272
66284: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66285: LD_ADDR_VAR 0 7
66289: PUSH
66290: LD_VAR 0 6
66294: PPUSH
66295: LD_VAR 0 8
66299: PPUSH
66300: LD_VAR 0 9
66304: PUSH
66305: LD_VAR 0 10
66309: PLUS
66310: PPUSH
66311: CALL_OW 273
66315: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66316: LD_VAR 0 5
66320: PPUSH
66321: LD_VAR 0 7
66325: PPUSH
66326: CALL_OW 488
66330: PUSH
66331: LD_VAR 0 5
66335: PPUSH
66336: LD_VAR 0 7
66340: PPUSH
66341: CALL_OW 428
66345: PPUSH
66346: CALL_OW 247
66350: PUSH
66351: LD_INT 3
66353: PUSH
66354: LD_INT 2
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: IN
66361: NOT
66362: AND
66363: IFFALSE 66407
// begin ComMoveXY ( unit , _x , _y ) ;
66365: LD_VAR 0 1
66369: PPUSH
66370: LD_VAR 0 5
66374: PPUSH
66375: LD_VAR 0 7
66379: PPUSH
66380: CALL_OW 111
// result := [ _x , _y ] ;
66384: LD_ADDR_VAR 0 3
66388: PUSH
66389: LD_VAR 0 5
66393: PUSH
66394: LD_VAR 0 7
66398: PUSH
66399: EMPTY
66400: LIST
66401: LIST
66402: ST_TO_ADDR
// exit ;
66403: POP
66404: POP
66405: GO 66411
// end ; end ;
66407: GO 66251
66409: POP
66410: POP
// end ;
66411: LD_VAR 0 3
66415: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66416: LD_INT 0
66418: PPUSH
66419: PPUSH
66420: PPUSH
// result := 0 ;
66421: LD_ADDR_VAR 0 3
66425: PUSH
66426: LD_INT 0
66428: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66429: LD_VAR 0 1
66433: PUSH
66434: LD_INT 0
66436: LESS
66437: PUSH
66438: LD_VAR 0 1
66442: PUSH
66443: LD_INT 8
66445: GREATER
66446: OR
66447: PUSH
66448: LD_VAR 0 2
66452: PUSH
66453: LD_INT 0
66455: LESS
66456: OR
66457: PUSH
66458: LD_VAR 0 2
66462: PUSH
66463: LD_INT 8
66465: GREATER
66466: OR
66467: IFFALSE 66471
// exit ;
66469: GO 66546
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66471: LD_ADDR_VAR 0 4
66475: PUSH
66476: LD_INT 22
66478: PUSH
66479: LD_VAR 0 2
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: PPUSH
66488: CALL_OW 69
66492: PUSH
66493: FOR_IN
66494: IFFALSE 66544
// begin un := UnitShoot ( i ) ;
66496: LD_ADDR_VAR 0 5
66500: PUSH
66501: LD_VAR 0 4
66505: PPUSH
66506: CALL_OW 504
66510: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66511: LD_VAR 0 5
66515: PPUSH
66516: CALL_OW 255
66520: PUSH
66521: LD_VAR 0 1
66525: EQUAL
66526: IFFALSE 66542
// begin result := un ;
66528: LD_ADDR_VAR 0 3
66532: PUSH
66533: LD_VAR 0 5
66537: ST_TO_ADDR
// exit ;
66538: POP
66539: POP
66540: GO 66546
// end ; end ;
66542: GO 66493
66544: POP
66545: POP
// end ;
66546: LD_VAR 0 3
66550: RET
// export function GetCargoBay ( units ) ; begin
66551: LD_INT 0
66553: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66554: LD_ADDR_VAR 0 2
66558: PUSH
66559: LD_VAR 0 1
66563: PPUSH
66564: LD_INT 2
66566: PUSH
66567: LD_INT 34
66569: PUSH
66570: LD_INT 12
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: PUSH
66577: LD_INT 34
66579: PUSH
66580: LD_INT 51
66582: PUSH
66583: EMPTY
66584: LIST
66585: LIST
66586: PUSH
66587: LD_INT 34
66589: PUSH
66590: LD_INT 32
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: PUSH
66597: LD_INT 34
66599: PUSH
66600: LD_EXP 26
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: LIST
66613: LIST
66614: LIST
66615: PPUSH
66616: CALL_OW 72
66620: ST_TO_ADDR
// end ;
66621: LD_VAR 0 2
66625: RET
// export function Negate ( value ) ; begin
66626: LD_INT 0
66628: PPUSH
// result := not value ;
66629: LD_ADDR_VAR 0 2
66633: PUSH
66634: LD_VAR 0 1
66638: NOT
66639: ST_TO_ADDR
// end ;
66640: LD_VAR 0 2
66644: RET
// export function Inc ( value ) ; begin
66645: LD_INT 0
66647: PPUSH
// result := value + 1 ;
66648: LD_ADDR_VAR 0 2
66652: PUSH
66653: LD_VAR 0 1
66657: PUSH
66658: LD_INT 1
66660: PLUS
66661: ST_TO_ADDR
// end ;
66662: LD_VAR 0 2
66666: RET
// export function Dec ( value ) ; begin
66667: LD_INT 0
66669: PPUSH
// result := value - 1 ;
66670: LD_ADDR_VAR 0 2
66674: PUSH
66675: LD_VAR 0 1
66679: PUSH
66680: LD_INT 1
66682: MINUS
66683: ST_TO_ADDR
// end ;
66684: LD_VAR 0 2
66688: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
66689: LD_INT 0
66691: PPUSH
66692: PPUSH
66693: PPUSH
66694: PPUSH
66695: PPUSH
66696: PPUSH
66697: PPUSH
66698: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
66699: LD_VAR 0 1
66703: PPUSH
66704: LD_VAR 0 2
66708: PPUSH
66709: CALL_OW 488
66713: NOT
66714: PUSH
66715: LD_VAR 0 3
66719: PPUSH
66720: LD_VAR 0 4
66724: PPUSH
66725: CALL_OW 488
66729: NOT
66730: OR
66731: IFFALSE 66744
// begin result := - 1 ;
66733: LD_ADDR_VAR 0 5
66737: PUSH
66738: LD_INT 1
66740: NEG
66741: ST_TO_ADDR
// exit ;
66742: GO 66979
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
66744: LD_ADDR_VAR 0 12
66748: PUSH
66749: LD_VAR 0 1
66753: PPUSH
66754: LD_VAR 0 2
66758: PPUSH
66759: LD_VAR 0 3
66763: PPUSH
66764: LD_VAR 0 4
66768: PPUSH
66769: CALL 65827 0 4
66773: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
66774: LD_ADDR_VAR 0 11
66778: PUSH
66779: LD_VAR 0 1
66783: PPUSH
66784: LD_VAR 0 2
66788: PPUSH
66789: LD_VAR 0 12
66793: PUSH
66794: LD_INT 1
66796: ARRAY
66797: PPUSH
66798: LD_VAR 0 12
66802: PUSH
66803: LD_INT 2
66805: ARRAY
66806: PPUSH
66807: CALL_OW 298
66811: ST_TO_ADDR
// distance := 9999 ;
66812: LD_ADDR_VAR 0 10
66816: PUSH
66817: LD_INT 9999
66819: ST_TO_ADDR
// for i := 0 to 5 do
66820: LD_ADDR_VAR 0 6
66824: PUSH
66825: DOUBLE
66826: LD_INT 0
66828: DEC
66829: ST_TO_ADDR
66830: LD_INT 5
66832: PUSH
66833: FOR_TO
66834: IFFALSE 66977
// begin _x := ShiftX ( x1 , i , centerDist ) ;
66836: LD_ADDR_VAR 0 7
66840: PUSH
66841: LD_VAR 0 1
66845: PPUSH
66846: LD_VAR 0 6
66850: PPUSH
66851: LD_VAR 0 11
66855: PPUSH
66856: CALL_OW 272
66860: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
66861: LD_ADDR_VAR 0 8
66865: PUSH
66866: LD_VAR 0 2
66870: PPUSH
66871: LD_VAR 0 6
66875: PPUSH
66876: LD_VAR 0 11
66880: PPUSH
66881: CALL_OW 273
66885: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66886: LD_VAR 0 7
66890: PPUSH
66891: LD_VAR 0 8
66895: PPUSH
66896: CALL_OW 488
66900: NOT
66901: IFFALSE 66905
// continue ;
66903: GO 66833
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
66905: LD_ADDR_VAR 0 9
66909: PUSH
66910: LD_VAR 0 12
66914: PUSH
66915: LD_INT 1
66917: ARRAY
66918: PPUSH
66919: LD_VAR 0 12
66923: PUSH
66924: LD_INT 2
66926: ARRAY
66927: PPUSH
66928: LD_VAR 0 7
66932: PPUSH
66933: LD_VAR 0 8
66937: PPUSH
66938: CALL_OW 298
66942: ST_TO_ADDR
// if tmp < distance then
66943: LD_VAR 0 9
66947: PUSH
66948: LD_VAR 0 10
66952: LESS
66953: IFFALSE 66975
// begin result := i ;
66955: LD_ADDR_VAR 0 5
66959: PUSH
66960: LD_VAR 0 6
66964: ST_TO_ADDR
// distance := tmp ;
66965: LD_ADDR_VAR 0 10
66969: PUSH
66970: LD_VAR 0 9
66974: ST_TO_ADDR
// end ; end ;
66975: GO 66833
66977: POP
66978: POP
// end ;
66979: LD_VAR 0 5
66983: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66984: LD_INT 0
66986: PPUSH
66987: PPUSH
// if not driver or not IsInUnit ( driver ) then
66988: LD_VAR 0 1
66992: NOT
66993: PUSH
66994: LD_VAR 0 1
66998: PPUSH
66999: CALL_OW 310
67003: NOT
67004: OR
67005: IFFALSE 67009
// exit ;
67007: GO 67099
// vehicle := IsInUnit ( driver ) ;
67009: LD_ADDR_VAR 0 3
67013: PUSH
67014: LD_VAR 0 1
67018: PPUSH
67019: CALL_OW 310
67023: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67024: LD_VAR 0 1
67028: PPUSH
67029: LD_STRING \
67031: PUSH
67032: LD_INT 0
67034: PUSH
67035: LD_INT 0
67037: PUSH
67038: LD_INT 0
67040: PUSH
67041: LD_INT 0
67043: PUSH
67044: LD_INT 0
67046: PUSH
67047: LD_INT 0
67049: PUSH
67050: EMPTY
67051: LIST
67052: LIST
67053: LIST
67054: LIST
67055: LIST
67056: LIST
67057: LIST
67058: PUSH
67059: LD_STRING E
67061: PUSH
67062: LD_INT 0
67064: PUSH
67065: LD_INT 0
67067: PUSH
67068: LD_VAR 0 3
67072: PUSH
67073: LD_INT 0
67075: PUSH
67076: LD_INT 0
67078: PUSH
67079: LD_INT 0
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: LIST
67086: LIST
67087: LIST
67088: LIST
67089: LIST
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PPUSH
67095: CALL_OW 446
// end ;
67099: LD_VAR 0 2
67103: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67104: LD_INT 0
67106: PPUSH
67107: PPUSH
// if not driver or not IsInUnit ( driver ) then
67108: LD_VAR 0 1
67112: NOT
67113: PUSH
67114: LD_VAR 0 1
67118: PPUSH
67119: CALL_OW 310
67123: NOT
67124: OR
67125: IFFALSE 67129
// exit ;
67127: GO 67219
// vehicle := IsInUnit ( driver ) ;
67129: LD_ADDR_VAR 0 3
67133: PUSH
67134: LD_VAR 0 1
67138: PPUSH
67139: CALL_OW 310
67143: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67144: LD_VAR 0 1
67148: PPUSH
67149: LD_STRING \
67151: PUSH
67152: LD_INT 0
67154: PUSH
67155: LD_INT 0
67157: PUSH
67158: LD_INT 0
67160: PUSH
67161: LD_INT 0
67163: PUSH
67164: LD_INT 0
67166: PUSH
67167: LD_INT 0
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: LIST
67178: PUSH
67179: LD_STRING E
67181: PUSH
67182: LD_INT 0
67184: PUSH
67185: LD_INT 0
67187: PUSH
67188: LD_VAR 0 3
67192: PUSH
67193: LD_INT 0
67195: PUSH
67196: LD_INT 0
67198: PUSH
67199: LD_INT 0
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: LIST
67206: LIST
67207: LIST
67208: LIST
67209: LIST
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: PPUSH
67215: CALL_OW 447
// end ;
67219: LD_VAR 0 2
67223: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67224: LD_INT 0
67226: PPUSH
67227: PPUSH
67228: PPUSH
// tmp := [ ] ;
67229: LD_ADDR_VAR 0 5
67233: PUSH
67234: EMPTY
67235: ST_TO_ADDR
// for i in units do
67236: LD_ADDR_VAR 0 4
67240: PUSH
67241: LD_VAR 0 1
67245: PUSH
67246: FOR_IN
67247: IFFALSE 67285
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67249: LD_ADDR_VAR 0 5
67253: PUSH
67254: LD_VAR 0 5
67258: PPUSH
67259: LD_VAR 0 5
67263: PUSH
67264: LD_INT 1
67266: PLUS
67267: PPUSH
67268: LD_VAR 0 4
67272: PPUSH
67273: CALL_OW 256
67277: PPUSH
67278: CALL_OW 2
67282: ST_TO_ADDR
67283: GO 67246
67285: POP
67286: POP
// if not tmp then
67287: LD_VAR 0 5
67291: NOT
67292: IFFALSE 67296
// exit ;
67294: GO 67344
// if asc then
67296: LD_VAR 0 2
67300: IFFALSE 67324
// result := SortListByListAsc ( units , tmp ) else
67302: LD_ADDR_VAR 0 3
67306: PUSH
67307: LD_VAR 0 1
67311: PPUSH
67312: LD_VAR 0 5
67316: PPUSH
67317: CALL_OW 76
67321: ST_TO_ADDR
67322: GO 67344
// result := SortListByListDesc ( units , tmp ) ;
67324: LD_ADDR_VAR 0 3
67328: PUSH
67329: LD_VAR 0 1
67333: PPUSH
67334: LD_VAR 0 5
67338: PPUSH
67339: CALL_OW 77
67343: ST_TO_ADDR
// end ;
67344: LD_VAR 0 3
67348: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67349: LD_INT 0
67351: PPUSH
67352: PPUSH
// task := GetTaskList ( mech ) ;
67353: LD_ADDR_VAR 0 4
67357: PUSH
67358: LD_VAR 0 1
67362: PPUSH
67363: CALL_OW 437
67367: ST_TO_ADDR
// if not task then
67368: LD_VAR 0 4
67372: NOT
67373: IFFALSE 67377
// exit ;
67375: GO 67419
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67377: LD_ADDR_VAR 0 3
67381: PUSH
67382: LD_VAR 0 4
67386: PUSH
67387: LD_INT 1
67389: ARRAY
67390: PUSH
67391: LD_INT 1
67393: ARRAY
67394: PUSH
67395: LD_STRING r
67397: EQUAL
67398: PUSH
67399: LD_VAR 0 4
67403: PUSH
67404: LD_INT 1
67406: ARRAY
67407: PUSH
67408: LD_INT 4
67410: ARRAY
67411: PUSH
67412: LD_VAR 0 2
67416: EQUAL
67417: AND
67418: ST_TO_ADDR
// end ;
67419: LD_VAR 0 3
67423: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67424: LD_INT 0
67426: PPUSH
// SetDir ( unit , d ) ;
67427: LD_VAR 0 1
67431: PPUSH
67432: LD_VAR 0 4
67436: PPUSH
67437: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
67441: LD_VAR 0 1
67445: PPUSH
67446: LD_VAR 0 2
67450: PPUSH
67451: LD_VAR 0 3
67455: PPUSH
67456: LD_VAR 0 5
67460: PPUSH
67461: CALL_OW 48
// end ;
67465: LD_VAR 0 6
67469: RET
// export function ToNaturalNumber ( number ) ; begin
67470: LD_INT 0
67472: PPUSH
// result := number div 1 ;
67473: LD_ADDR_VAR 0 2
67477: PUSH
67478: LD_VAR 0 1
67482: PUSH
67483: LD_INT 1
67485: DIV
67486: ST_TO_ADDR
// if number < 0 then
67487: LD_VAR 0 1
67491: PUSH
67492: LD_INT 0
67494: LESS
67495: IFFALSE 67505
// result := 0 ;
67497: LD_ADDR_VAR 0 2
67501: PUSH
67502: LD_INT 0
67504: ST_TO_ADDR
// end ;
67505: LD_VAR 0 2
67509: RET
// export function SortByClass ( units , class ) ; var un ; begin
67510: LD_INT 0
67512: PPUSH
67513: PPUSH
// if not units or not class then
67514: LD_VAR 0 1
67518: NOT
67519: PUSH
67520: LD_VAR 0 2
67524: NOT
67525: OR
67526: IFFALSE 67530
// exit ;
67528: GO 67625
// result := [ ] ;
67530: LD_ADDR_VAR 0 3
67534: PUSH
67535: EMPTY
67536: ST_TO_ADDR
// for un in units do
67537: LD_ADDR_VAR 0 4
67541: PUSH
67542: LD_VAR 0 1
67546: PUSH
67547: FOR_IN
67548: IFFALSE 67623
// if GetClass ( un ) = class then
67550: LD_VAR 0 4
67554: PPUSH
67555: CALL_OW 257
67559: PUSH
67560: LD_VAR 0 2
67564: EQUAL
67565: IFFALSE 67592
// result := Insert ( result , 1 , un ) else
67567: LD_ADDR_VAR 0 3
67571: PUSH
67572: LD_VAR 0 3
67576: PPUSH
67577: LD_INT 1
67579: PPUSH
67580: LD_VAR 0 4
67584: PPUSH
67585: CALL_OW 2
67589: ST_TO_ADDR
67590: GO 67621
// result := Replace ( result , result + 1 , un ) ;
67592: LD_ADDR_VAR 0 3
67596: PUSH
67597: LD_VAR 0 3
67601: PPUSH
67602: LD_VAR 0 3
67606: PUSH
67607: LD_INT 1
67609: PLUS
67610: PPUSH
67611: LD_VAR 0 4
67615: PPUSH
67616: CALL_OW 1
67620: ST_TO_ADDR
67621: GO 67547
67623: POP
67624: POP
// end ;
67625: LD_VAR 0 3
67629: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67630: LD_INT 0
67632: PPUSH
67633: PPUSH
67634: PPUSH
67635: PPUSH
67636: PPUSH
67637: PPUSH
67638: PPUSH
// result := [ ] ;
67639: LD_ADDR_VAR 0 4
67643: PUSH
67644: EMPTY
67645: ST_TO_ADDR
// if x - r < 0 then
67646: LD_VAR 0 1
67650: PUSH
67651: LD_VAR 0 3
67655: MINUS
67656: PUSH
67657: LD_INT 0
67659: LESS
67660: IFFALSE 67672
// min_x := 0 else
67662: LD_ADDR_VAR 0 8
67666: PUSH
67667: LD_INT 0
67669: ST_TO_ADDR
67670: GO 67688
// min_x := x - r ;
67672: LD_ADDR_VAR 0 8
67676: PUSH
67677: LD_VAR 0 1
67681: PUSH
67682: LD_VAR 0 3
67686: MINUS
67687: ST_TO_ADDR
// if y - r < 0 then
67688: LD_VAR 0 2
67692: PUSH
67693: LD_VAR 0 3
67697: MINUS
67698: PUSH
67699: LD_INT 0
67701: LESS
67702: IFFALSE 67714
// min_y := 0 else
67704: LD_ADDR_VAR 0 7
67708: PUSH
67709: LD_INT 0
67711: ST_TO_ADDR
67712: GO 67730
// min_y := y - r ;
67714: LD_ADDR_VAR 0 7
67718: PUSH
67719: LD_VAR 0 2
67723: PUSH
67724: LD_VAR 0 3
67728: MINUS
67729: ST_TO_ADDR
// max_x := x + r ;
67730: LD_ADDR_VAR 0 9
67734: PUSH
67735: LD_VAR 0 1
67739: PUSH
67740: LD_VAR 0 3
67744: PLUS
67745: ST_TO_ADDR
// max_y := y + r ;
67746: LD_ADDR_VAR 0 10
67750: PUSH
67751: LD_VAR 0 2
67755: PUSH
67756: LD_VAR 0 3
67760: PLUS
67761: ST_TO_ADDR
// for _x = min_x to max_x do
67762: LD_ADDR_VAR 0 5
67766: PUSH
67767: DOUBLE
67768: LD_VAR 0 8
67772: DEC
67773: ST_TO_ADDR
67774: LD_VAR 0 9
67778: PUSH
67779: FOR_TO
67780: IFFALSE 67881
// for _y = min_y to max_y do
67782: LD_ADDR_VAR 0 6
67786: PUSH
67787: DOUBLE
67788: LD_VAR 0 7
67792: DEC
67793: ST_TO_ADDR
67794: LD_VAR 0 10
67798: PUSH
67799: FOR_TO
67800: IFFALSE 67877
// begin if not ValidHex ( _x , _y ) then
67802: LD_VAR 0 5
67806: PPUSH
67807: LD_VAR 0 6
67811: PPUSH
67812: CALL_OW 488
67816: NOT
67817: IFFALSE 67821
// continue ;
67819: GO 67799
// if GetResourceTypeXY ( _x , _y ) then
67821: LD_VAR 0 5
67825: PPUSH
67826: LD_VAR 0 6
67830: PPUSH
67831: CALL_OW 283
67835: IFFALSE 67875
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67837: LD_ADDR_VAR 0 4
67841: PUSH
67842: LD_VAR 0 4
67846: PPUSH
67847: LD_VAR 0 4
67851: PUSH
67852: LD_INT 1
67854: PLUS
67855: PPUSH
67856: LD_VAR 0 5
67860: PUSH
67861: LD_VAR 0 6
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: PPUSH
67870: CALL_OW 1
67874: ST_TO_ADDR
// end ;
67875: GO 67799
67877: POP
67878: POP
67879: GO 67779
67881: POP
67882: POP
// end ;
67883: LD_VAR 0 4
67887: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
67888: LD_INT 0
67890: PPUSH
67891: PPUSH
67892: PPUSH
67893: PPUSH
67894: PPUSH
67895: PPUSH
67896: PPUSH
67897: PPUSH
// if not units then
67898: LD_VAR 0 1
67902: NOT
67903: IFFALSE 67907
// exit ;
67905: GO 68332
// result := UnitFilter ( units , [ f_ok ] ) ;
67907: LD_ADDR_VAR 0 3
67911: PUSH
67912: LD_VAR 0 1
67916: PPUSH
67917: LD_INT 50
67919: PUSH
67920: EMPTY
67921: LIST
67922: PPUSH
67923: CALL_OW 72
67927: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67928: LD_ADDR_VAR 0 8
67932: PUSH
67933: LD_VAR 0 1
67937: PUSH
67938: LD_INT 1
67940: ARRAY
67941: PPUSH
67942: CALL_OW 255
67946: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
67947: LD_ADDR_VAR 0 10
67951: PUSH
67952: LD_INT 29
67954: PUSH
67955: LD_EXP 29
67959: PUSH
67960: EMPTY
67961: LIST
67962: LIST
67963: ST_TO_ADDR
// if not result then
67964: LD_VAR 0 3
67968: NOT
67969: IFFALSE 67973
// exit ;
67971: GO 68332
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67973: LD_ADDR_VAR 0 5
67977: PUSH
67978: LD_INT 81
67980: PUSH
67981: LD_VAR 0 8
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PPUSH
67990: CALL_OW 69
67994: ST_TO_ADDR
// for i in result do
67995: LD_ADDR_VAR 0 4
67999: PUSH
68000: LD_VAR 0 3
68004: PUSH
68005: FOR_IN
68006: IFFALSE 68330
// begin tag := GetTag ( i ) + 1 ;
68008: LD_ADDR_VAR 0 9
68012: PUSH
68013: LD_VAR 0 4
68017: PPUSH
68018: CALL_OW 110
68022: PUSH
68023: LD_INT 1
68025: PLUS
68026: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68027: LD_ADDR_VAR 0 7
68031: PUSH
68032: LD_VAR 0 4
68036: PPUSH
68037: CALL_OW 250
68041: PPUSH
68042: LD_VAR 0 4
68046: PPUSH
68047: CALL_OW 251
68051: PPUSH
68052: LD_INT 6
68054: PPUSH
68055: CALL 67630 0 3
68059: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
68060: LD_VAR 0 7
68064: PUSH
68065: LD_VAR 0 4
68069: PPUSH
68070: CALL_OW 264
68074: PUSH
68075: LD_VAR 0 10
68079: IN
68080: NOT
68081: AND
68082: IFFALSE 68121
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68084: LD_VAR 0 4
68088: PPUSH
68089: LD_VAR 0 7
68093: PUSH
68094: LD_INT 1
68096: ARRAY
68097: PUSH
68098: LD_INT 1
68100: ARRAY
68101: PPUSH
68102: LD_VAR 0 7
68106: PUSH
68107: LD_INT 1
68109: ARRAY
68110: PUSH
68111: LD_INT 2
68113: ARRAY
68114: PPUSH
68115: CALL_OW 116
68119: GO 68328
// if path > tag then
68121: LD_VAR 0 2
68125: PUSH
68126: LD_VAR 0 9
68130: GREATER
68131: IFFALSE 68298
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
68133: LD_ADDR_VAR 0 6
68137: PUSH
68138: LD_VAR 0 5
68142: PPUSH
68143: LD_INT 91
68145: PUSH
68146: LD_VAR 0 4
68150: PUSH
68151: LD_INT 12
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: LIST
68158: PPUSH
68159: CALL_OW 72
68163: ST_TO_ADDR
// if nearEnemy then
68164: LD_VAR 0 6
68168: IFFALSE 68196
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
68170: LD_VAR 0 4
68174: PPUSH
68175: LD_VAR 0 6
68179: PPUSH
68180: LD_VAR 0 4
68184: PPUSH
68185: CALL_OW 74
68189: PPUSH
68190: CALL_OW 115
68194: GO 68296
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68196: LD_VAR 0 4
68200: PPUSH
68201: LD_VAR 0 2
68205: PUSH
68206: LD_VAR 0 9
68210: ARRAY
68211: PUSH
68212: LD_INT 1
68214: ARRAY
68215: PPUSH
68216: LD_VAR 0 2
68220: PUSH
68221: LD_VAR 0 9
68225: ARRAY
68226: PUSH
68227: LD_INT 2
68229: ARRAY
68230: PPUSH
68231: CALL_OW 297
68235: PUSH
68236: LD_INT 6
68238: GREATER
68239: IFFALSE 68282
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68241: LD_VAR 0 4
68245: PPUSH
68246: LD_VAR 0 2
68250: PUSH
68251: LD_VAR 0 9
68255: ARRAY
68256: PUSH
68257: LD_INT 1
68259: ARRAY
68260: PPUSH
68261: LD_VAR 0 2
68265: PUSH
68266: LD_VAR 0 9
68270: ARRAY
68271: PUSH
68272: LD_INT 2
68274: ARRAY
68275: PPUSH
68276: CALL_OW 114
68280: GO 68296
// SetTag ( i , tag ) ;
68282: LD_VAR 0 4
68286: PPUSH
68287: LD_VAR 0 9
68291: PPUSH
68292: CALL_OW 109
// end else
68296: GO 68328
// if enemy then
68298: LD_VAR 0 5
68302: IFFALSE 68328
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68304: LD_VAR 0 4
68308: PPUSH
68309: LD_VAR 0 5
68313: PPUSH
68314: LD_VAR 0 4
68318: PPUSH
68319: CALL_OW 74
68323: PPUSH
68324: CALL_OW 115
// end ;
68328: GO 68005
68330: POP
68331: POP
// end ;
68332: LD_VAR 0 3
68336: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
68337: LD_INT 0
68339: PPUSH
68340: PPUSH
68341: PPUSH
// if not unit or IsInUnit ( unit ) then
68342: LD_VAR 0 1
68346: NOT
68347: PUSH
68348: LD_VAR 0 1
68352: PPUSH
68353: CALL_OW 310
68357: OR
68358: IFFALSE 68362
// exit ;
68360: GO 68453
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
68362: LD_ADDR_VAR 0 4
68366: PUSH
68367: LD_VAR 0 1
68371: PPUSH
68372: CALL_OW 250
68376: PPUSH
68377: LD_VAR 0 2
68381: PPUSH
68382: LD_INT 1
68384: PPUSH
68385: CALL_OW 272
68389: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
68390: LD_ADDR_VAR 0 5
68394: PUSH
68395: LD_VAR 0 1
68399: PPUSH
68400: CALL_OW 251
68404: PPUSH
68405: LD_VAR 0 2
68409: PPUSH
68410: LD_INT 1
68412: PPUSH
68413: CALL_OW 273
68417: ST_TO_ADDR
// if ValidHex ( x , y ) then
68418: LD_VAR 0 4
68422: PPUSH
68423: LD_VAR 0 5
68427: PPUSH
68428: CALL_OW 488
68432: IFFALSE 68453
// ComTurnXY ( unit , x , y ) ;
68434: LD_VAR 0 1
68438: PPUSH
68439: LD_VAR 0 4
68443: PPUSH
68444: LD_VAR 0 5
68448: PPUSH
68449: CALL_OW 118
// end ;
68453: LD_VAR 0 3
68457: RET
// export function SeeUnits ( side , units ) ; var i ; begin
68458: LD_INT 0
68460: PPUSH
68461: PPUSH
// result := false ;
68462: LD_ADDR_VAR 0 3
68466: PUSH
68467: LD_INT 0
68469: ST_TO_ADDR
// if not units then
68470: LD_VAR 0 2
68474: NOT
68475: IFFALSE 68479
// exit ;
68477: GO 68524
// for i in units do
68479: LD_ADDR_VAR 0 4
68483: PUSH
68484: LD_VAR 0 2
68488: PUSH
68489: FOR_IN
68490: IFFALSE 68522
// if See ( side , i ) then
68492: LD_VAR 0 1
68496: PPUSH
68497: LD_VAR 0 4
68501: PPUSH
68502: CALL_OW 292
68506: IFFALSE 68520
// begin result := true ;
68508: LD_ADDR_VAR 0 3
68512: PUSH
68513: LD_INT 1
68515: ST_TO_ADDR
// exit ;
68516: POP
68517: POP
68518: GO 68524
// end ;
68520: GO 68489
68522: POP
68523: POP
// end ;
68524: LD_VAR 0 3
68528: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
68529: LD_INT 0
68531: PPUSH
68532: PPUSH
68533: PPUSH
68534: PPUSH
// if not unit or not points then
68535: LD_VAR 0 1
68539: NOT
68540: PUSH
68541: LD_VAR 0 2
68545: NOT
68546: OR
68547: IFFALSE 68551
// exit ;
68549: GO 68641
// dist := 99999 ;
68551: LD_ADDR_VAR 0 5
68555: PUSH
68556: LD_INT 99999
68558: ST_TO_ADDR
// for i in points do
68559: LD_ADDR_VAR 0 4
68563: PUSH
68564: LD_VAR 0 2
68568: PUSH
68569: FOR_IN
68570: IFFALSE 68639
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
68572: LD_ADDR_VAR 0 6
68576: PUSH
68577: LD_VAR 0 1
68581: PPUSH
68582: LD_VAR 0 4
68586: PUSH
68587: LD_INT 1
68589: ARRAY
68590: PPUSH
68591: LD_VAR 0 4
68595: PUSH
68596: LD_INT 2
68598: ARRAY
68599: PPUSH
68600: CALL_OW 297
68604: ST_TO_ADDR
// if tmpDist < dist then
68605: LD_VAR 0 6
68609: PUSH
68610: LD_VAR 0 5
68614: LESS
68615: IFFALSE 68637
// begin result := i ;
68617: LD_ADDR_VAR 0 3
68621: PUSH
68622: LD_VAR 0 4
68626: ST_TO_ADDR
// dist := tmpDist ;
68627: LD_ADDR_VAR 0 5
68631: PUSH
68632: LD_VAR 0 6
68636: ST_TO_ADDR
// end ; end ;
68637: GO 68569
68639: POP
68640: POP
// end ; end_of_file
68641: LD_VAR 0 3
68645: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68646: LD_VAR 0 1
68650: PUSH
68651: LD_INT 200
68653: DOUBLE
68654: GREATEREQUAL
68655: IFFALSE 68663
68657: LD_INT 299
68659: DOUBLE
68660: LESSEQUAL
68661: IFTRUE 68665
68663: GO 68697
68665: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68666: LD_VAR 0 1
68670: PPUSH
68671: LD_VAR 0 2
68675: PPUSH
68676: LD_VAR 0 3
68680: PPUSH
68681: LD_VAR 0 4
68685: PPUSH
68686: LD_VAR 0 5
68690: PPUSH
68691: CALL 24349 0 5
68695: GO 68774
68697: LD_INT 300
68699: DOUBLE
68700: GREATEREQUAL
68701: IFFALSE 68709
68703: LD_INT 399
68705: DOUBLE
68706: LESSEQUAL
68707: IFTRUE 68711
68709: GO 68773
68711: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68712: LD_VAR 0 1
68716: PPUSH
68717: LD_VAR 0 2
68721: PPUSH
68722: LD_VAR 0 3
68726: PPUSH
68727: LD_VAR 0 4
68731: PPUSH
68732: LD_VAR 0 5
68736: PPUSH
68737: LD_VAR 0 6
68741: PPUSH
68742: LD_VAR 0 7
68746: PPUSH
68747: LD_VAR 0 8
68751: PPUSH
68752: LD_VAR 0 9
68756: PPUSH
68757: LD_VAR 0 10
68761: PPUSH
68762: LD_VAR 0 11
68766: PPUSH
68767: CALL 21991 0 11
68771: GO 68774
68773: POP
// end ;
68774: PPOPN 11
68776: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
68777: LD_VAR 0 1
68781: PPUSH
68782: LD_VAR 0 2
68786: PPUSH
68787: LD_VAR 0 3
68791: PPUSH
68792: LD_VAR 0 4
68796: PPUSH
68797: LD_VAR 0 5
68801: PPUSH
68802: CALL 24085 0 5
// end ; end_of_file
68806: PPOPN 5
68808: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68809: LD_VAR 0 1
68813: PPUSH
68814: LD_VAR 0 2
68818: PPUSH
68819: LD_VAR 0 3
68823: PPUSH
68824: LD_VAR 0 4
68828: PPUSH
68829: LD_VAR 0 5
68833: PPUSH
68834: LD_VAR 0 6
68838: PPUSH
68839: CALL 9684 0 6
// end ;
68843: PPOPN 6
68845: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
68846: CALL 9659 0 0
// end ;
68850: PPOPN 1
68852: END
