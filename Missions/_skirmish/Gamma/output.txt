// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// SetDifficulty ( GetMultiplayerSetting ( 0 ) ) ;
  11: LD_INT 0
  13: PPUSH
  14: CALL_OW 426
  18: PPUSH
  19: CALL 279 0 1
// InGameOn ;
  23: CALL_OW 8
// CenterNowOnXY ( 0 , 0 ) ;
  27: LD_INT 0
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: CALL_OW 86
// RandomizeAll ;
  37: CALL_OW 11
// DestroyTrash ;
  41: CALL 148 0 0
// ShowPath ;
  45: CALL 214 0 0
// RandMusic ( 1 , 3 ) ;
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 3
  54: PPUSH
  55: CALL 222 0 2
// PrepareAnimals ( [ 8 , 7 , 6 ] [ dif ] , 2 , 3 , nature ) ;
  59: LD_INT 8
  61: PUSH
  62: LD_INT 7
  64: PUSH
  65: LD_INT 6
  67: PUSH
  68: EMPTY
  69: LIST
  70: LIST
  71: LIST
  72: PUSH
  73: LD_EXP 1
  77: ARRAY
  78: PPUSH
  79: LD_INT 2
  81: PPUSH
  82: LD_INT 3
  84: PPUSH
  85: LD_INT 10
  87: PPUSH
  88: CALL 329 0 4
// PrepareRussian ;
  92: CALL 1407 0 0
// Action ;
  96: CALL 8631 0 0
// PrepareAmerican ;
 100: CALL 5251 0 0
// end ;
 104: END
// every 2 2$00 + 1 1$0 do var i , bool ;
 105: GO 107
 107: DISABLE
 108: LD_INT 0
 110: PPUSH
 111: PPUSH
// begin bool := Rand ( false , true ) ;
 112: LD_ADDR_VAR 0 2
 116: PUSH
 117: LD_INT 0
 119: PPUSH
 120: LD_INT 1
 122: PPUSH
 123: CALL_OW 12
 127: ST_TO_ADDR
// if bool then
 128: LD_VAR 0 2
 132: IFFALSE 144
// RandMusic ( 1 , 3 ) ;
 134: LD_INT 1
 136: PPUSH
 137: LD_INT 3
 139: PPUSH
 140: CALL 222 0 2
// enable ;
 144: ENABLE
// end ; end_of_file
 145: PPOPN 2
 147: END
// export function DestroyTrash ; var i ; begin
 148: LD_INT 0
 150: PPUSH
 151: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_not , [ f_lives , 5 ] ] ] ) do
 152: LD_ADDR_VAR 0 2
 156: PUSH
 157: LD_INT 22
 159: PUSH
 160: LD_INT 0
 162: PUSH
 163: EMPTY
 164: LIST
 165: LIST
 166: PUSH
 167: LD_INT 3
 169: PUSH
 170: LD_INT 24
 172: PUSH
 173: LD_INT 5
 175: PUSH
 176: EMPTY
 177: LIST
 178: LIST
 179: PUSH
 180: EMPTY
 181: LIST
 182: LIST
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 69
 192: PUSH
 193: FOR_IN
 194: IFFALSE 207
// KillUnit ( i ) ;
 196: LD_VAR 0 2
 200: PPUSH
 201: CALL_OW 66
 205: GO 193
 207: POP
 208: POP
// end ;
 209: LD_VAR 0 1
 213: RET
// export function ShowPath ; begin
 214: LD_INT 0
 216: PPUSH
// end ;
 217: LD_VAR 0 1
 221: RET
// export function RandMusic ( n1 , n2 ) ; var proc ; begin
 222: LD_INT 0
 224: PPUSH
 225: PPUSH
// proc := Rand ( 0 , 100 ) ;
 226: LD_ADDR_VAR 0 4
 230: PUSH
 231: LD_INT 0
 233: PPUSH
 234: LD_INT 100
 236: PPUSH
 237: CALL_OW 12
 241: ST_TO_ADDR
// if proc > 50 then
 242: LD_VAR 0 4
 246: PUSH
 247: LD_INT 50
 249: GREATER
 250: IFFALSE 264
// music_nat := n1 else
 252: LD_ADDR_OWVAR 71
 256: PUSH
 257: LD_VAR 0 1
 261: ST_TO_ADDR
 262: GO 274
// music_nat := n2 ;
 264: LD_ADDR_OWVAR 71
 268: PUSH
 269: LD_VAR 0 2
 273: ST_TO_ADDR
// end ;
 274: LD_VAR 0 3
 278: RET
// export dif ; export function SetDifficulty ( val ) ; begin
 279: LD_INT 0
 281: PPUSH
// if not val then
 282: LD_VAR 0 1
 286: NOT
 287: IFFALSE 297
// val := 2 ;
 289: LD_ADDR_VAR 0 1
 293: PUSH
 294: LD_INT 2
 296: ST_TO_ADDR
// dif := val ;
 297: LD_ADDR_EXP 1
 301: PUSH
 302: LD_VAR 0 1
 306: ST_TO_ADDR
// if dif < 3 then
 307: LD_EXP 1
 311: PUSH
 312: LD_INT 3
 314: LESS
 315: IFFALSE 324
// RemoveEnvironmentArea ( evnt ) ;
 317: LD_INT 9
 319: PPUSH
 320: CALL_OW 355
// end ;
 324: LD_VAR 0 2
 328: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
 333: PPUSH
 334: PPUSH
 335: PPUSH
// uc_nation = nation_nature ;
 336: LD_ADDR_OWVAR 21
 340: PUSH
 341: LD_INT 0
 343: ST_TO_ADDR
// uc_side = 0 ;
 344: LD_ADDR_OWVAR 20
 348: PUSH
 349: LD_INT 0
 351: ST_TO_ADDR
// hc_importance := 0 ;
 352: LD_ADDR_OWVAR 32
 356: PUSH
 357: LD_INT 0
 359: ST_TO_ADDR
// l = 0 ;
 360: LD_ADDR_VAR 0 6
 364: PUSH
 365: LD_INT 0
 367: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
 368: LD_ADDR_OWVAR 24
 372: PUSH
 373: LD_INT 0
 375: PPUSH
 376: LD_INT 5
 378: PPUSH
 379: CALL_OW 12
 383: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
 384: LD_ADDR_OWVAR 35
 388: PUSH
 389: LD_INT 5
 391: NEG
 392: PPUSH
 393: LD_INT 5
 395: PPUSH
 396: CALL_OW 12
 400: ST_TO_ADDR
// hc_gallery =  ;
 401: LD_ADDR_OWVAR 33
 405: PUSH
 406: LD_STRING 
 408: ST_TO_ADDR
// hc_class = class_apeman ;
 409: LD_ADDR_OWVAR 28
 413: PUSH
 414: LD_INT 12
 416: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
 417: LD_ADDR_OWVAR 29
 421: PUSH
 422: LD_INT 11
 424: PPUSH
 425: LD_INT 13
 427: PPUSH
 428: CALL_OW 12
 432: PUSH
 433: LD_INT 10
 435: PPUSH
 436: LD_INT 11
 438: PPUSH
 439: CALL_OW 12
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: ST_TO_ADDR
// hc_sex = sex_male ;
 448: LD_ADDR_OWVAR 27
 452: PUSH
 453: LD_INT 1
 455: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
 456: LD_ADDR_OWVAR 31
 460: PUSH
 461: LD_INT 0
 463: PPUSH
 464: LD_INT 2
 466: PPUSH
 467: CALL_OW 12
 471: PUSH
 472: LD_INT 0
 474: PUSH
 475: LD_INT 0
 477: PUSH
 478: LD_INT 0
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: ST_TO_ADDR
// apeman = CreateHuman ;
 487: LD_ADDR_VAR 0 7
 491: PUSH
 492: CALL_OW 44
 496: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
 497: LD_VAR 0 7
 501: PPUSH
 502: LD_VAR 0 4
 506: PPUSH
 507: LD_INT 0
 509: PPUSH
 510: CALL_OW 49
// l = l + 1 ;
 514: LD_ADDR_VAR 0 6
 518: PUSH
 519: LD_VAR 0 6
 523: PUSH
 524: LD_INT 1
 526: PLUS
 527: ST_TO_ADDR
// end until l = num1 ;
 528: LD_VAR 0 6
 532: PUSH
 533: LD_VAR 0 1
 537: EQUAL
 538: IFFALSE 368
// l = 0 ;
 540: LD_ADDR_VAR 0 6
 544: PUSH
 545: LD_INT 0
 547: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
 548: LD_ADDR_OWVAR 35
 552: PUSH
 553: LD_INT 0
 555: PPUSH
 556: LD_INT 25
 558: PPUSH
 559: CALL_OW 12
 563: ST_TO_ADDR
// hc_class = class_tiger ;
 564: LD_ADDR_OWVAR 28
 568: PUSH
 569: LD_INT 14
 571: ST_TO_ADDR
// hc_sex = sex_male ;
 572: LD_ADDR_OWVAR 27
 576: PUSH
 577: LD_INT 1
 579: ST_TO_ADDR
// hc_gallery = sandnature ;
 580: LD_ADDR_OWVAR 33
 584: PUSH
 585: LD_STRING sandnature
 587: ST_TO_ADDR
// hc_face_number = 3 ;
 588: LD_ADDR_OWVAR 34
 592: PUSH
 593: LD_INT 3
 595: ST_TO_ADDR
// tiger = CreateHuman ;
 596: LD_ADDR_VAR 0 8
 600: PUSH
 601: CALL_OW 44
 605: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
 606: LD_VAR 0 8
 610: PPUSH
 611: LD_VAR 0 4
 615: PPUSH
 616: LD_INT 0
 618: PPUSH
 619: CALL_OW 49
// l = l + 1 ;
 623: LD_ADDR_VAR 0 6
 627: PUSH
 628: LD_VAR 0 6
 632: PUSH
 633: LD_INT 1
 635: PLUS
 636: ST_TO_ADDR
// end until l = num2 ;
 637: LD_VAR 0 6
 641: PUSH
 642: LD_VAR 0 2
 646: EQUAL
 647: IFFALSE 548
// l = 0 ;
 649: LD_ADDR_VAR 0 6
 653: PUSH
 654: LD_INT 0
 656: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
 657: LD_ADDR_OWVAR 28
 661: PUSH
 662: LD_INT 18
 664: ST_TO_ADDR
// hc_gallery = sandnature ;
 665: LD_ADDR_OWVAR 33
 669: PUSH
 670: LD_STRING sandnature
 672: ST_TO_ADDR
// hc_face_number = 1 ;
 673: LD_ADDR_OWVAR 34
 677: PUSH
 678: LD_INT 1
 680: ST_TO_ADDR
// bird = CreateHuman ;
 681: LD_ADDR_VAR 0 9
 685: PUSH
 686: CALL_OW 44
 690: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
 691: LD_VAR 0 9
 695: PPUSH
 696: LD_INT 0
 698: PPUSH
 699: CALL_OW 51
// l = l + 1 ;
 703: LD_ADDR_VAR 0 6
 707: PUSH
 708: LD_VAR 0 6
 712: PUSH
 713: LD_INT 1
 715: PLUS
 716: ST_TO_ADDR
// end until l = num3 ;
 717: LD_VAR 0 6
 721: PUSH
 722: LD_VAR 0 3
 726: EQUAL
 727: IFFALSE 657
// end ;
 729: LD_VAR 0 5
 733: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
 734: LD_INT 0
 736: PPUSH
 737: PPUSH
 738: PPUSH
 739: PPUSH
 740: PPUSH
 741: PPUSH
// InitHc ;
 742: CALL_OW 19
// hc_class := clas ;
 746: LD_ADDR_OWVAR 28
 750: PUSH
 751: LD_VAR 0 1
 755: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
 756: LD_ADDR_VAR 0 4
 760: PUSH
 761: LD_VAR 0 2
 765: PUSH
 766: LD_INT 1
 768: NEG
 769: PPUSH
 770: LD_INT 1
 772: PPUSH
 773: CALL_OW 12
 777: PLUS
 778: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
 779: LD_ADDR_VAR 0 5
 783: PUSH
 784: LD_VAR 0 2
 788: PUSH
 789: LD_INT 1
 791: NEG
 792: PPUSH
 793: LD_INT 1
 795: PPUSH
 796: CALL_OW 12
 800: PLUS
 801: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
 802: LD_ADDR_VAR 0 6
 806: PUSH
 807: LD_VAR 0 2
 811: PUSH
 812: LD_INT 1
 814: NEG
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: CALL_OW 12
 823: PLUS
 824: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
 825: LD_ADDR_VAR 0 7
 829: PUSH
 830: LD_VAR 0 2
 834: PUSH
 835: LD_INT 1
 837: NEG
 838: PPUSH
 839: LD_INT 1
 841: PPUSH
 842: CALL_OW 12
 846: PLUS
 847: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
 848: LD_VAR 0 1
 852: PUSH
 853: LD_INT 1
 855: EQUAL
 856: PUSH
 857: LD_VAR 0 1
 861: PUSH
 862: LD_INT 9
 864: EQUAL
 865: OR
 866: PUSH
 867: LD_VAR 0 1
 871: PUSH
 872: LD_INT 5
 874: EQUAL
 875: OR
 876: PUSH
 877: LD_VAR 0 1
 881: PUSH
 882: LD_INT 8
 884: EQUAL
 885: OR
 886: IFFALSE 911
// bonus := [ 2 , 0 , 0 , 0 ] ;
 888: LD_ADDR_VAR 0 8
 892: PUSH
 893: LD_INT 2
 895: PUSH
 896: LD_INT 0
 898: PUSH
 899: LD_INT 0
 901: PUSH
 902: LD_INT 0
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: ST_TO_ADDR
// if clas = 2 then
 911: LD_VAR 0 1
 915: PUSH
 916: LD_INT 2
 918: EQUAL
 919: IFFALSE 944
// bonus := [ 0 , 2 , 0 , 0 ] ;
 921: LD_ADDR_VAR 0 8
 925: PUSH
 926: LD_INT 0
 928: PUSH
 929: LD_INT 2
 931: PUSH
 932: LD_INT 0
 934: PUSH
 935: LD_INT 0
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: ST_TO_ADDR
// if clas = 3 then
 944: LD_VAR 0 1
 948: PUSH
 949: LD_INT 3
 951: EQUAL
 952: IFFALSE 977
// bonus := [ 0 , 0 , 2 , 0 ] ;
 954: LD_ADDR_VAR 0 8
 958: PUSH
 959: LD_INT 0
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: LD_INT 2
 967: PUSH
 968: LD_INT 0
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: ST_TO_ADDR
// if clas = 4 then
 977: LD_VAR 0 1
 981: PUSH
 982: LD_INT 4
 984: EQUAL
 985: IFFALSE 1010
// bonus := [ 0 , 0 , 0 , 2 ] ;
 987: LD_ADDR_VAR 0 8
 991: PUSH
 992: LD_INT 0
 994: PUSH
 995: LD_INT 0
 997: PUSH
 998: LD_INT 0
1000: PUSH
1001: LD_INT 2
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
1010: LD_VAR 0 1
1014: PUSH
1015: LD_INT 4
1017: GREATER
1018: PUSH
1019: LD_VAR 0 1
1023: PUSH
1024: LD_INT 9
1026: NONEQUAL
1027: AND
1028: PUSH
1029: LD_VAR 0 1
1033: PUSH
1034: LD_INT 5
1036: NONEQUAL
1037: AND
1038: PUSH
1039: LD_VAR 0 1
1043: PUSH
1044: LD_INT 8
1046: NONEQUAL
1047: AND
1048: IFFALSE 1073
// bonus := [ 0 , 0 , 0 , 0 ] ;
1050: LD_ADDR_VAR 0 8
1054: PUSH
1055: LD_INT 0
1057: PUSH
1058: LD_INT 0
1060: PUSH
1061: LD_INT 0
1063: PUSH
1064: LD_INT 0
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
1073: LD_ADDR_OWVAR 30
1077: PUSH
1078: LD_INT 0
1080: PPUSH
1081: LD_INT 2
1083: PPUSH
1084: CALL_OW 12
1088: PUSH
1089: LD_INT 0
1091: PPUSH
1092: LD_INT 2
1094: PPUSH
1095: CALL_OW 12
1099: PUSH
1100: LD_INT 0
1102: PPUSH
1103: LD_INT 2
1105: PPUSH
1106: CALL_OW 12
1110: PUSH
1111: LD_INT 0
1113: PPUSH
1114: LD_INT 2
1116: PPUSH
1117: CALL_OW 12
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: LIST
1127: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
1128: LD_ADDR_OWVAR 31
1132: PUSH
1133: LD_VAR 0 4
1137: PUSH
1138: LD_VAR 0 8
1142: PUSH
1143: LD_INT 1
1145: ARRAY
1146: PLUS
1147: PUSH
1148: LD_VAR 0 5
1152: PUSH
1153: LD_VAR 0 8
1157: PUSH
1158: LD_INT 2
1160: ARRAY
1161: PLUS
1162: PUSH
1163: LD_VAR 0 6
1167: PUSH
1168: LD_VAR 0 8
1172: PUSH
1173: LD_INT 3
1175: ARRAY
1176: PLUS
1177: PUSH
1178: LD_VAR 0 7
1182: PUSH
1183: LD_VAR 0 8
1187: PUSH
1188: LD_INT 4
1190: ARRAY
1191: PLUS
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: ST_TO_ADDR
// if clas = 3 then
1199: LD_VAR 0 1
1203: PUSH
1204: LD_INT 3
1206: EQUAL
1207: IFFALSE 1219
// hc_sex := sex_male else
1209: LD_ADDR_OWVAR 27
1213: PUSH
1214: LD_INT 1
1216: ST_TO_ADDR
1217: GO 1235
// hc_sex := Rand ( sex_male , sex_female ) ;
1219: LD_ADDR_OWVAR 27
1223: PUSH
1224: LD_INT 1
1226: PPUSH
1227: LD_INT 2
1229: PPUSH
1230: CALL_OW 12
1234: ST_TO_ADDR
// hc_gallery :=  ;
1235: LD_ADDR_OWVAR 33
1239: PUSH
1240: LD_STRING 
1242: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 8 , 12 ) ] ;
1243: LD_ADDR_OWVAR 29
1247: PUSH
1248: LD_INT 8
1250: PPUSH
1251: LD_INT 12
1253: PPUSH
1254: CALL_OW 12
1258: PUSH
1259: LD_INT 8
1261: PPUSH
1262: LD_INT 12
1264: PPUSH
1265: CALL_OW 12
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: ST_TO_ADDR
// hc_name :=  ;
1274: LD_ADDR_OWVAR 26
1278: PUSH
1279: LD_STRING 
1281: ST_TO_ADDR
// result := CreateHuman ;
1282: LD_ADDR_VAR 0 3
1286: PUSH
1287: CALL_OW 44
1291: ST_TO_ADDR
// end ;
1292: LD_VAR 0 3
1296: RET
// export function CreateVehicleWithDriver ( chassis , engine , weapon , area , dir , lvl ) ; var veh ; begin
1297: LD_INT 0
1299: PPUSH
1300: PPUSH
// vc_chassis := chassis ;
1301: LD_ADDR_OWVAR 37
1305: PUSH
1306: LD_VAR 0 1
1310: ST_TO_ADDR
// vc_engine := engine ;
1311: LD_ADDR_OWVAR 39
1315: PUSH
1316: LD_VAR 0 2
1320: ST_TO_ADDR
// vc_weapon := weapon ;
1321: LD_ADDR_OWVAR 40
1325: PUSH
1326: LD_VAR 0 3
1330: ST_TO_ADDR
// vc_control := control_manual ;
1331: LD_ADDR_OWVAR 38
1335: PUSH
1336: LD_INT 1
1338: ST_TO_ADDR
// veh := CreateVehicle ;
1339: LD_ADDR_VAR 0 8
1343: PUSH
1344: CALL_OW 45
1348: ST_TO_ADDR
// SetDir ( veh , dir ) ;
1349: LD_VAR 0 8
1353: PPUSH
1354: LD_VAR 0 5
1358: PPUSH
1359: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
1363: LD_VAR 0 8
1367: PPUSH
1368: LD_VAR 0 4
1372: PPUSH
1373: LD_INT 0
1375: PPUSH
1376: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , lvl ) , veh ) ;
1380: LD_INT 3
1382: PPUSH
1383: LD_VAR 0 6
1387: PPUSH
1388: CALL 734 0 2
1392: PPUSH
1393: LD_VAR 0 8
1397: PPUSH
1398: CALL_OW 52
// end ; end_of_file
1402: LD_VAR 0 7
1406: RET
// export Popov , Commander , Platonov , Kapral ; export depot_rdy , dep_x , dep_y ; export function PrepareRussian ; var i , un , skill , team , p ; begin
1407: LD_INT 0
1409: PPUSH
1410: PPUSH
1411: PPUSH
1412: PPUSH
1413: PPUSH
1414: PPUSH
// depot_rdy := false ;
1415: LD_ADDR_EXP 6
1419: PUSH
1420: LD_INT 0
1422: ST_TO_ADDR
// uc_side := 6 ;
1423: LD_ADDR_OWVAR 20
1427: PUSH
1428: LD_INT 6
1430: ST_TO_ADDR
// uc_nation := 3 ;
1431: LD_ADDR_OWVAR 21
1435: PUSH
1436: LD_INT 3
1438: ST_TO_ADDR
// hc_gallery := ru ;
1439: LD_ADDR_OWVAR 33
1443: PUSH
1444: LD_STRING ru
1446: ST_TO_ADDR
// hc_face_number := 10 ;
1447: LD_ADDR_OWVAR 34
1451: PUSH
1452: LD_INT 10
1454: ST_TO_ADDR
// hc_name := Popov ;
1455: LD_ADDR_OWVAR 26
1459: PUSH
1460: LD_STRING Popov
1462: ST_TO_ADDR
// hc_class := 1 ;
1463: LD_ADDR_OWVAR 28
1467: PUSH
1468: LD_INT 1
1470: ST_TO_ADDR
// hc_sex := sex_male ;
1471: LD_ADDR_OWVAR 27
1475: PUSH
1476: LD_INT 1
1478: ST_TO_ADDR
// popov := CreateHuman ;
1479: LD_ADDR_EXP 2
1483: PUSH
1484: CALL_OW 44
1488: ST_TO_ADDR
// hc_gallery := general ;
1489: LD_ADDR_OWVAR 33
1493: PUSH
1494: LD_STRING general
1496: ST_TO_ADDR
// hc_face_number := 1 ;
1497: LD_ADDR_OWVAR 34
1501: PUSH
1502: LD_INT 1
1504: ST_TO_ADDR
// hc_name := Platonov ;
1505: LD_ADDR_OWVAR 26
1509: PUSH
1510: LD_STRING Platonov
1512: ST_TO_ADDR
// platonov := CreateHuman ;
1513: LD_ADDR_EXP 4
1517: PUSH
1518: CALL_OW 44
1522: ST_TO_ADDR
// uc_side := 3 ;
1523: LD_ADDR_OWVAR 20
1527: PUSH
1528: LD_INT 3
1530: ST_TO_ADDR
// ChangeSideFog ( 3 , 6 ) ;
1531: LD_INT 3
1533: PPUSH
1534: LD_INT 6
1536: PPUSH
1537: CALL_OW 343
// skill := [ 6 , 5 , 4 ] [ dif ] ;
1541: LD_ADDR_VAR 0 4
1545: PUSH
1546: LD_INT 6
1548: PUSH
1549: LD_INT 5
1551: PUSH
1552: LD_INT 4
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: LIST
1559: PUSH
1560: LD_EXP 1
1564: ARRAY
1565: ST_TO_ADDR
// team := [ ] ;
1566: LD_ADDR_VAR 0 5
1570: PUSH
1571: EMPTY
1572: ST_TO_ADDR
// hc_importance := 100 ;
1573: LD_ADDR_OWVAR 32
1577: PUSH
1578: LD_INT 100
1580: ST_TO_ADDR
// hc_gallery := gamma ;
1581: LD_ADDR_OWVAR 33
1585: PUSH
1586: LD_STRING gamma
1588: ST_TO_ADDR
// hc_face_number := 1 ;
1589: LD_ADDR_OWVAR 34
1593: PUSH
1594: LD_INT 1
1596: ST_TO_ADDR
// hc_class := 1 ;
1597: LD_ADDR_OWVAR 28
1601: PUSH
1602: LD_INT 1
1604: ST_TO_ADDR
// hc_skills := [ [ 8 , 7 , 6 ] [ dif ] , 5 , 3 , 0 ] ;
1605: LD_ADDR_OWVAR 31
1609: PUSH
1610: LD_INT 8
1612: PUSH
1613: LD_INT 7
1615: PUSH
1616: LD_INT 6
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: LIST
1623: PUSH
1624: LD_EXP 1
1628: ARRAY
1629: PUSH
1630: LD_INT 5
1632: PUSH
1633: LD_INT 3
1635: PUSH
1636: LD_INT 0
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: ST_TO_ADDR
// hc_sex := sex_male ;
1645: LD_ADDR_OWVAR 27
1649: PUSH
1650: LD_INT 1
1652: ST_TO_ADDR
// hc_name := Mjr. Jurij Karakanov ;
1653: LD_ADDR_OWVAR 26
1657: PUSH
1658: LD_STRING Mjr. Jurij Karakanov
1660: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1661: LD_ADDR_OWVAR 29
1665: PUSH
1666: LD_INT 10
1668: PUSH
1669: LD_INT 11
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: ST_TO_ADDR
// commander := CreateHuman ;
1676: LD_ADDR_EXP 3
1680: PUSH
1681: CALL_OW 44
1685: ST_TO_ADDR
// team := team ^ commander ;
1686: LD_ADDR_VAR 0 5
1690: PUSH
1691: LD_VAR 0 5
1695: PUSH
1696: LD_EXP 3
1700: ADD
1701: ST_TO_ADDR
// hc_importance := 0 ;
1702: LD_ADDR_OWVAR 32
1706: PUSH
1707: LD_INT 0
1709: ST_TO_ADDR
// hc_name :=  ;
1710: LD_ADDR_OWVAR 26
1714: PUSH
1715: LD_STRING 
1717: ST_TO_ADDR
// hc_gallery :=  ;
1718: LD_ADDR_OWVAR 33
1722: PUSH
1723: LD_STRING 
1725: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
1726: LD_ADDR_OWVAR 29
1730: PUSH
1731: LD_INT 12
1733: PUSH
1734: LD_INT 10
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: ST_TO_ADDR
// hc_sex := sex_male ;
1741: LD_ADDR_OWVAR 27
1745: PUSH
1746: LD_INT 1
1748: ST_TO_ADDR
// Kapral := CreateHuman ;
1749: LD_ADDR_EXP 5
1753: PUSH
1754: CALL_OW 44
1758: ST_TO_ADDR
// for i = 3 downto dif do
1759: LD_ADDR_VAR 0 2
1763: PUSH
1764: DOUBLE
1765: LD_INT 3
1767: INC
1768: ST_TO_ADDR
1769: LD_EXP 1
1773: PUSH
1774: FOR_DOWNTO
1775: IFFALSE 1881
// begin vc_chassis := ru_medium_tracked ;
1777: LD_ADDR_OWVAR 37
1781: PUSH
1782: LD_INT 22
1784: ST_TO_ADDR
// vc_engine := engine_combustion ;
1785: LD_ADDR_OWVAR 39
1789: PUSH
1790: LD_INT 1
1792: ST_TO_ADDR
// vc_control := control_manual ;
1793: LD_ADDR_OWVAR 38
1797: PUSH
1798: LD_INT 1
1800: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_gun , ru_gun ] [ i ] ;
1801: LD_ADDR_OWVAR 40
1805: PUSH
1806: LD_INT 43
1808: PUSH
1809: LD_INT 44
1811: PUSH
1812: LD_INT 44
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: LIST
1819: PUSH
1820: LD_VAR 0 2
1824: ARRAY
1825: ST_TO_ADDR
// vc_fuel_battery := Rand ( 55 , 77 ) ;
1826: LD_ADDR_OWVAR 41
1830: PUSH
1831: LD_INT 55
1833: PPUSH
1834: LD_INT 77
1836: PPUSH
1837: CALL_OW 12
1841: ST_TO_ADDR
// un := CreateVehicle ;
1842: LD_ADDR_VAR 0 3
1846: PUSH
1847: CALL_OW 45
1851: ST_TO_ADDR
// SetDir ( un , 5 ) ;
1852: LD_VAR 0 3
1856: PPUSH
1857: LD_INT 5
1859: PPUSH
1860: CALL_OW 233
// PlaceUnitArea ( un , rus_spawn , false ) ;
1864: LD_VAR 0 3
1868: PPUSH
1869: LD_INT 1
1871: PPUSH
1872: LD_INT 0
1874: PPUSH
1875: CALL_OW 49
// end ;
1879: GO 1774
1881: POP
1882: POP
// vc_weapon := ru_heavy_machine_gun ;
1883: LD_ADDR_OWVAR 40
1887: PUSH
1888: LD_INT 42
1890: ST_TO_ADDR
// vc_fuel_battery := Rand ( 55 , 77 ) ;
1891: LD_ADDR_OWVAR 41
1895: PUSH
1896: LD_INT 55
1898: PPUSH
1899: LD_INT 77
1901: PPUSH
1902: CALL_OW 12
1906: ST_TO_ADDR
// un := CreateVehicle ;
1907: LD_ADDR_VAR 0 3
1911: PUSH
1912: CALL_OW 45
1916: ST_TO_ADDR
// SetDir ( un , 5 ) ;
1917: LD_VAR 0 3
1921: PPUSH
1922: LD_INT 5
1924: PPUSH
1925: CALL_OW 233
// PlaceUnitArea ( un , rus_spawn , false ) ;
1929: LD_VAR 0 3
1933: PPUSH
1934: LD_INT 1
1936: PPUSH
1937: LD_INT 0
1939: PPUSH
1940: CALL_OW 49
// for p = 1 to 4 do
1944: LD_ADDR_VAR 0 6
1948: PUSH
1949: DOUBLE
1950: LD_INT 1
1952: DEC
1953: ST_TO_ADDR
1954: LD_INT 4
1956: PUSH
1957: FOR_TO
1958: IFFALSE 2025
// for i = 1 to [ 5 , 4 , 3 ] [ dif ] do
1960: LD_ADDR_VAR 0 2
1964: PUSH
1965: DOUBLE
1966: LD_INT 1
1968: DEC
1969: ST_TO_ADDR
1970: LD_INT 5
1972: PUSH
1973: LD_INT 4
1975: PUSH
1976: LD_INT 3
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: LIST
1983: PUSH
1984: LD_EXP 1
1988: ARRAY
1989: PUSH
1990: FOR_TO
1991: IFFALSE 2021
// team := team ^ CreateHumanWithClass ( p , skill ) ;
1993: LD_ADDR_VAR 0 5
1997: PUSH
1998: LD_VAR 0 5
2002: PUSH
2003: LD_VAR 0 6
2007: PPUSH
2008: LD_VAR 0 4
2012: PPUSH
2013: CALL 734 0 2
2017: ADD
2018: ST_TO_ADDR
2019: GO 1990
2021: POP
2022: POP
2023: GO 1957
2025: POP
2026: POP
// for i = 1 to team do
2027: LD_ADDR_VAR 0 2
2031: PUSH
2032: DOUBLE
2033: LD_INT 1
2035: DEC
2036: ST_TO_ADDR
2037: LD_VAR 0 5
2041: PUSH
2042: FOR_TO
2043: IFFALSE 2161
// if GetClass ( team [ i ] ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_empty ] ] ) then
2045: LD_VAR 0 5
2049: PUSH
2050: LD_VAR 0 2
2054: ARRAY
2055: PPUSH
2056: CALL_OW 257
2060: PUSH
2061: LD_INT 3
2063: EQUAL
2064: PUSH
2065: LD_INT 22
2067: PUSH
2068: LD_INT 3
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 58
2077: PUSH
2078: EMPTY
2079: LIST
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PPUSH
2085: CALL_OW 69
2089: AND
2090: IFFALSE 2138
// PlaceHumanInUnit ( team [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_empty ] ] ) [ 1 ] ) else
2092: LD_VAR 0 5
2096: PUSH
2097: LD_VAR 0 2
2101: ARRAY
2102: PPUSH
2103: LD_INT 22
2105: PUSH
2106: LD_INT 3
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: PUSH
2113: LD_INT 58
2115: PUSH
2116: EMPTY
2117: LIST
2118: PUSH
2119: EMPTY
2120: LIST
2121: LIST
2122: PPUSH
2123: CALL_OW 69
2127: PUSH
2128: LD_INT 1
2130: ARRAY
2131: PPUSH
2132: CALL_OW 52
2136: GO 2159
// PlaceUnitArea ( team [ i ] , rus_spawn , false ) ;
2138: LD_VAR 0 5
2142: PUSH
2143: LD_VAR 0 2
2147: ARRAY
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: LD_INT 0
2154: PPUSH
2155: CALL_OW 49
2159: GO 2042
2161: POP
2162: POP
// end ;
2163: LD_VAR 0 1
2167: RET
// every 0 0$10 trigger depot_rdy do var i , un , l , driver ;
2168: LD_EXP 6
2172: IFFALSE 2542
2174: GO 2176
2176: DISABLE
2177: LD_INT 0
2179: PPUSH
2180: PPUSH
2181: PPUSH
2182: PPUSH
// begin Wait ( 0 0$07 ) ;
2183: LD_INT 245
2185: PPUSH
2186: CALL_OW 67
// l := 0 ;
2190: LD_ADDR_VAR 0 3
2194: PUSH
2195: LD_INT 0
2197: ST_TO_ADDR
// repeat begin uc_side := 6 ;
2198: LD_ADDR_OWVAR 20
2202: PUSH
2203: LD_INT 6
2205: ST_TO_ADDR
// uc_nation := 3 ;
2206: LD_ADDR_OWVAR 21
2210: PUSH
2211: LD_INT 3
2213: ST_TO_ADDR
// CreateVehicleWithDriver ( ru_medium_tracked , engine_combustion , ru_cargo_bay , rus_cr_spawn , 5 , Rand ( 3 , 6 ) ) ;
2214: LD_INT 22
2216: PPUSH
2217: LD_INT 1
2219: PPUSH
2220: LD_INT 51
2222: PPUSH
2223: LD_INT 5
2225: PPUSH
2226: LD_INT 5
2228: PPUSH
2229: LD_INT 3
2231: PPUSH
2232: LD_INT 6
2234: PPUSH
2235: CALL_OW 12
2239: PPUSH
2240: CALL 1297 0 6
// un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
2244: LD_ADDR_VAR 0 2
2248: PUSH
2249: LD_INT 22
2251: PUSH
2252: LD_INT 6
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 34
2261: PUSH
2262: LD_INT 51
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PPUSH
2273: CALL_OW 69
2277: PUSH
2278: LD_INT 1
2280: ARRAY
2281: ST_TO_ADDR
// SetCargo ( un , mat_cans , 100 ) ;
2282: LD_VAR 0 2
2286: PPUSH
2287: LD_INT 1
2289: PPUSH
2290: LD_INT 100
2292: PPUSH
2293: CALL_OW 290
// ComMoveXY ( un , dep_x + 2 , dep_y ) ;
2297: LD_VAR 0 2
2301: PPUSH
2302: LD_EXP 7
2306: PUSH
2307: LD_INT 2
2309: PLUS
2310: PPUSH
2311: LD_EXP 8
2315: PPUSH
2316: CALL_OW 111
// AddComUnload ( un ) ;
2320: LD_VAR 0 2
2324: PPUSH
2325: CALL_OW 219
// if ( l = 0 ) then
2329: LD_VAR 0 3
2333: PUSH
2334: LD_INT 0
2336: EQUAL
2337: IFFALSE 2373
// begin Wait ( 0 0$03 ) ;
2339: LD_INT 105
2341: PPUSH
2342: CALL_OW 67
// driver := IsDrivenBy ( un ) ;
2346: LD_ADDR_VAR 0 4
2350: PUSH
2351: LD_VAR 0 2
2355: PPUSH
2356: CALL_OW 311
2360: ST_TO_ADDR
// Say ( driver , Dtran ) ;
2361: LD_VAR 0 4
2365: PPUSH
2366: LD_STRING Dtran
2368: PPUSH
2369: CALL_OW 88
// end ; if ( l = [ 7 , 6 , 5 ] [ dif ] - 1 ) then
2373: LD_VAR 0 3
2377: PUSH
2378: LD_INT 7
2380: PUSH
2381: LD_INT 6
2383: PUSH
2384: LD_INT 5
2386: PUSH
2387: EMPTY
2388: LIST
2389: LIST
2390: LIST
2391: PUSH
2392: LD_EXP 1
2396: ARRAY
2397: PUSH
2398: LD_INT 1
2400: MINUS
2401: EQUAL
2402: IFFALSE 2438
// begin Wait ( 0 0$03 ) ;
2404: LD_INT 105
2406: PPUSH
2407: CALL_OW 67
// driver := IsDrivenBy ( un ) ;
2411: LD_ADDR_VAR 0 4
2415: PUSH
2416: LD_VAR 0 2
2420: PPUSH
2421: CALL_OW 311
2425: ST_TO_ADDR
// Say ( driver , Dtrans ) ;
2426: LD_VAR 0 4
2430: PPUSH
2431: LD_STRING Dtrans
2433: PPUSH
2434: CALL_OW 88
// end ; while ( not IsInArea ( un , rus_exit ) ) do
2438: LD_VAR 0 2
2442: PPUSH
2443: LD_INT 6
2445: PPUSH
2446: CALL_OW 308
2450: NOT
2451: IFFALSE 2477
// begin Wait ( 0 0$01 ) ;
2453: LD_INT 35
2455: PPUSH
2456: CALL_OW 67
// AddComMoveXY ( un , 69 , 97 ) ;
2460: LD_VAR 0 2
2464: PPUSH
2465: LD_INT 69
2467: PPUSH
2468: LD_INT 97
2470: PPUSH
2471: CALL_OW 171
// end ;
2475: GO 2438
// RemoveUnit ( un ) ;
2477: LD_VAR 0 2
2481: PPUSH
2482: CALL_OW 64
// l = l + 1 ;
2486: LD_ADDR_VAR 0 3
2490: PUSH
2491: LD_VAR 0 3
2495: PUSH
2496: LD_INT 1
2498: PLUS
2499: ST_TO_ADDR
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
2500: LD_INT 1155
2502: PPUSH
2503: LD_INT 5355
2505: PPUSH
2506: CALL_OW 12
2510: PPUSH
2511: CALL_OW 67
// end until l = [ 7 , 6 , 5 ] [ dif ] ;
2515: LD_VAR 0 3
2519: PUSH
2520: LD_INT 7
2522: PUSH
2523: LD_INT 6
2525: PUSH
2526: LD_INT 5
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: LIST
2533: PUSH
2534: LD_EXP 1
2538: ARRAY
2539: EQUAL
2540: IFFALSE 2198
// end ; end_of_file
2542: PPOPN 4
2544: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_bazooka and event_rocket = false then
2545: LD_VAR 0 1
2549: PUSH
2550: LD_INT 44
2552: EQUAL
2553: PUSH
2554: LD_EXP 20
2558: PUSH
2559: LD_INT 0
2561: EQUAL
2562: AND
2563: IFFALSE 2709
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) > 0 then
2565: LD_INT 22
2567: PUSH
2568: LD_INT 3
2570: PUSH
2571: EMPTY
2572: LIST
2573: LIST
2574: PUSH
2575: LD_INT 25
2577: PUSH
2578: LD_INT 4
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: PPUSH
2589: CALL_OW 69
2593: PUSH
2594: LD_INT 0
2596: GREATER
2597: IFFALSE 2709
// begin event_rocket := true ;
2599: LD_ADDR_EXP 20
2603: PUSH
2604: LD_INT 1
2606: ST_TO_ADDR
// if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) > 0 then
2607: LD_INT 22
2609: PUSH
2610: LD_INT 3
2612: PUSH
2613: EMPTY
2614: LIST
2615: LIST
2616: PUSH
2617: LD_INT 25
2619: PUSH
2620: LD_INT 4
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: PUSH
2627: LD_INT 26
2629: PUSH
2630: LD_INT 1
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: LIST
2641: PUSH
2642: EMPTY
2643: LIST
2644: PPUSH
2645: CALL_OW 69
2649: PUSH
2650: LD_INT 0
2652: GREATER
2653: IFFALSE 2709
// Say ( FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) [ 1 ] , Dsci2 ) ;
2655: LD_INT 22
2657: PUSH
2658: LD_INT 3
2660: PUSH
2661: EMPTY
2662: LIST
2663: LIST
2664: PUSH
2665: LD_INT 25
2667: PUSH
2668: LD_INT 4
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: PUSH
2675: LD_INT 26
2677: PUSH
2678: LD_INT 1
2680: PUSH
2681: EMPTY
2682: LIST
2683: LIST
2684: PUSH
2685: EMPTY
2686: LIST
2687: LIST
2688: LIST
2689: PUSH
2690: EMPTY
2691: LIST
2692: PPUSH
2693: CALL_OW 69
2697: PUSH
2698: LD_INT 1
2700: ARRAY
2701: PPUSH
2702: LD_STRING Dsci2
2704: PPUSH
2705: CALL_OW 88
// end ; end ;
2709: PPOPN 2
2711: END
// on VehicleConstructed ( un , fac ) do begin SOS_VehicleConstructed ( un , fac ) ;
2712: LD_VAR 0 1
2716: PPUSH
2717: LD_VAR 0 2
2721: PPUSH
2722: CALL 25391 0 2
// if GetSide ( un ) = 3 and GetControl ( un ) = control_computer then
2726: LD_VAR 0 1
2730: PPUSH
2731: CALL_OW 255
2735: PUSH
2736: LD_INT 3
2738: EQUAL
2739: PUSH
2740: LD_VAR 0 1
2744: PPUSH
2745: CALL_OW 263
2749: PUSH
2750: LD_INT 3
2752: EQUAL
2753: AND
2754: IFFALSE 2764
// comp_tested := true ;
2756: LD_ADDR_EXP 22
2760: PUSH
2761: LD_INT 1
2763: ST_TO_ADDR
// end ;
2764: PPOPN 2
2766: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
2767: LD_VAR 0 1
2771: PUSH
2772: LD_INT 22
2774: PUSH
2775: LD_INT 1
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: PUSH
2782: LD_INT 21
2784: PUSH
2785: LD_INT 3
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PPUSH
2796: CALL_OW 69
2800: IN
2801: IFFALSE 2879
// if attacked = false and sikorski_ar = false then
2803: LD_EXP 15
2807: PUSH
2808: LD_INT 0
2810: EQUAL
2811: PUSH
2812: LD_EXP 12
2816: PUSH
2817: LD_INT 0
2819: EQUAL
2820: AND
2821: IFFALSE 2879
// begin attacked := true ;
2823: LD_ADDR_EXP 15
2827: PUSH
2828: LD_INT 1
2830: ST_TO_ADDR
// if IsInUnit ( donald ) then
2831: LD_EXP 13
2835: PPUSH
2836: CALL_OW 310
2840: IFFALSE 2856
// SayRadio ( donald , DGammaF ) else
2842: LD_EXP 13
2846: PPUSH
2847: LD_STRING DGammaF
2849: PPUSH
2850: CALL_OW 94
2854: GO 2879
// if IsInUnit ( van ) then
2856: LD_EXP 14
2860: PPUSH
2861: CALL_OW 310
2865: IFFALSE 2879
// SayRadio ( van , DGammaM ) ;
2867: LD_EXP 14
2871: PPUSH
2872: LD_STRING DGammaM
2874: PPUSH
2875: CALL_OW 94
// end ; if un in FilterAllUnits ( [ f_control , control_remote ] ) then
2879: LD_VAR 0 1
2883: PUSH
2884: LD_INT 33
2886: PUSH
2887: LD_INT 2
2889: PUSH
2890: EMPTY
2891: LIST
2892: LIST
2893: PPUSH
2894: CALL_OW 69
2898: IN
2899: IFFALSE 2910
// ComUnlink ( un ) ;
2901: LD_VAR 0 1
2905: PPUSH
2906: CALL_OW 136
// end ;
2910: PPOPN 1
2912: END
// on ApemanTamed ( ape , sci ) do begin if GetSex ( sci ) = sex_male then
2913: LD_VAR 0 2
2917: PPUSH
2918: CALL_OW 258
2922: PUSH
2923: LD_INT 1
2925: EQUAL
2926: IFFALSE 2940
// Say ( sci , Dsci3 ) ;
2928: LD_VAR 0 2
2932: PPUSH
2933: LD_STRING Dsci3
2935: PPUSH
2936: CALL_OW 88
// end ;
2940: PPOPN 2
2942: END
// on BuildingComplete ( b ) do var i ;
2943: LD_INT 0
2945: PPUSH
// begin if GetBType ( b ) = b_depot and GetSide ( b ) = 3 and depot_rdy = false then
2946: LD_VAR 0 1
2950: PPUSH
2951: CALL_OW 266
2955: PUSH
2956: LD_INT 0
2958: EQUAL
2959: PUSH
2960: LD_VAR 0 1
2964: PPUSH
2965: CALL_OW 255
2969: PUSH
2970: LD_INT 3
2972: EQUAL
2973: AND
2974: PUSH
2975: LD_EXP 6
2979: PUSH
2980: LD_INT 0
2982: EQUAL
2983: AND
2984: IFFALSE 3048
// begin SetBName ( b , kalinin ) ;
2986: LD_VAR 0 1
2990: PPUSH
2991: LD_STRING kalinin
2993: PPUSH
2994: CALL_OW 500
// dep_x := GetX ( b ) ;
2998: LD_ADDR_EXP 7
3002: PUSH
3003: LD_VAR 0 1
3007: PPUSH
3008: CALL_OW 250
3012: ST_TO_ADDR
// dep_y := GetY ( b ) ;
3013: LD_ADDR_EXP 8
3017: PUSH
3018: LD_VAR 0 1
3022: PPUSH
3023: CALL_OW 251
3027: ST_TO_ADDR
// depot_rdy := true ;
3028: LD_ADDR_EXP 6
3032: PUSH
3033: LD_INT 1
3035: ST_TO_ADDR
// SayRadio ( popov , Dpop3 ) ;
3036: LD_EXP 2
3040: PPUSH
3041: LD_STRING Dpop3
3043: PPUSH
3044: CALL_OW 94
// end ; if GetBType ( b ) = b_lab and GetSide ( b ) = 3 and event_comp = false then
3048: LD_VAR 0 1
3052: PPUSH
3053: CALL_OW 266
3057: PUSH
3058: LD_INT 6
3060: EQUAL
3061: PUSH
3062: LD_VAR 0 1
3066: PPUSH
3067: CALL_OW 255
3071: PUSH
3072: LD_INT 3
3074: EQUAL
3075: AND
3076: PUSH
3077: LD_EXP 21
3081: PUSH
3082: LD_INT 0
3084: EQUAL
3085: AND
3086: IFFALSE 3181
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) > 0 then
3088: LD_INT 22
3090: PUSH
3091: LD_INT 3
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: PUSH
3098: LD_INT 25
3100: PUSH
3101: LD_INT 4
3103: PUSH
3104: EMPTY
3105: LIST
3106: LIST
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: PPUSH
3112: CALL_OW 69
3116: PUSH
3117: LD_INT 0
3119: GREATER
3120: IFFALSE 3181
// begin event_comp := true ;
3122: LD_ADDR_EXP 21
3126: PUSH
3127: LD_INT 1
3129: ST_TO_ADDR
// Say ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , Dsci1 ) ;
3130: LD_INT 22
3132: PUSH
3133: LD_INT 3
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: PUSH
3140: LD_INT 25
3142: PUSH
3143: LD_INT 4
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: PUSH
3150: LD_INT 26
3152: PUSH
3153: LD_INT 1
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: LIST
3164: PPUSH
3165: CALL_OW 69
3169: PUSH
3170: LD_INT 1
3172: ARRAY
3173: PPUSH
3174: LD_STRING Dsci1
3176: PPUSH
3177: CALL_OW 88
// end ; if GetBType ( b ) = b_bunker and GetSide ( b ) = 1 then
3181: LD_VAR 0 1
3185: PPUSH
3186: CALL_OW 266
3190: PUSH
3191: LD_INT 32
3193: EQUAL
3194: PUSH
3195: LD_VAR 0 1
3199: PPUSH
3200: CALL_OW 255
3204: PUSH
3205: LD_INT 1
3207: EQUAL
3208: AND
3209: IFFALSE 3274
// begin RaiseSailEvent ( 6 ) ;
3211: LD_INT 6
3213: PPUSH
3214: CALL_OW 427
// AddComPlaceWeapon ( b , gamma_towers [ 4 ] ) ;
3218: LD_VAR 0 1
3222: PPUSH
3223: LD_EXP 18
3227: PUSH
3228: LD_INT 4
3230: ARRAY
3231: PPUSH
3232: CALL_OW 208
// for i = 1 to 4 do
3236: LD_ADDR_VAR 0 2
3240: PUSH
3241: DOUBLE
3242: LD_INT 1
3244: DEC
3245: ST_TO_ADDR
3246: LD_INT 4
3248: PUSH
3249: FOR_TO
3250: IFFALSE 3272
// gamma_towers := Delete ( gamma_towers , 1 ) ;
3252: LD_ADDR_EXP 18
3256: PUSH
3257: LD_EXP 18
3261: PPUSH
3262: LD_INT 1
3264: PPUSH
3265: CALL_OW 3
3269: ST_TO_ADDR
3270: GO 3249
3272: POP
3273: POP
// end ; end ;
3274: PPOPN 2
3276: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3277: LD_VAR 0 1
3281: PPUSH
3282: CALL 25271 0 1
// if un in Patrol then
3286: LD_VAR 0 1
3290: PUSH
3291: LD_EXP 17
3295: IN
3296: IFFALSE 3314
// Patrol := Patrol diff un ;
3298: LD_ADDR_EXP 17
3302: PUSH
3303: LD_EXP 17
3307: PUSH
3308: LD_VAR 0 1
3312: DIFF
3313: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
3314: LD_VAR 0 1
3318: PUSH
3319: LD_INT 22
3321: PUSH
3322: LD_INT 1
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: PUSH
3329: LD_INT 30
3331: PUSH
3332: LD_INT 32
3334: PUSH
3335: EMPTY
3336: LIST
3337: LIST
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PPUSH
3343: CALL_OW 69
3347: IN
3348: IFFALSE 3434
// begin gamma_towers := gamma_towers ^ GetX ( un ) ;
3350: LD_ADDR_EXP 18
3354: PUSH
3355: LD_EXP 18
3359: PUSH
3360: LD_VAR 0 1
3364: PPUSH
3365: CALL_OW 250
3369: ADD
3370: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetY ( un ) ;
3371: LD_ADDR_EXP 18
3375: PUSH
3376: LD_EXP 18
3380: PUSH
3381: LD_VAR 0 1
3385: PPUSH
3386: CALL_OW 251
3390: ADD
3391: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetDir ( un ) ;
3392: LD_ADDR_EXP 18
3396: PUSH
3397: LD_EXP 18
3401: PUSH
3402: LD_VAR 0 1
3406: PPUSH
3407: CALL_OW 254
3411: ADD
3412: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetBWeapon ( un ) ;
3413: LD_ADDR_EXP 18
3417: PUSH
3418: LD_EXP 18
3422: PUSH
3423: LD_VAR 0 1
3427: PPUSH
3428: CALL_OW 269
3432: ADD
3433: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) then
3434: LD_VAR 0 1
3438: PUSH
3439: LD_INT 33
3441: PUSH
3442: LD_INT 2
3444: PUSH
3445: EMPTY
3446: LIST
3447: LIST
3448: PUSH
3449: LD_INT 3
3451: PUSH
3452: LD_INT 34
3454: PUSH
3455: LD_INT 13
3457: PUSH
3458: EMPTY
3459: LIST
3460: LIST
3461: PUSH
3462: EMPTY
3463: LIST
3464: LIST
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: PPUSH
3470: CALL_OW 69
3474: IN
3475: IFFALSE 3491
// new_veh := new_veh + 1 ;
3477: LD_ADDR_EXP 19
3481: PUSH
3482: LD_EXP 19
3486: PUSH
3487: LD_INT 1
3489: PLUS
3490: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_weapon , us_crane ] ) then
3491: LD_VAR 0 1
3495: PUSH
3496: LD_INT 34
3498: PUSH
3499: LD_INT 13
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: PPUSH
3506: CALL_OW 69
3510: IN
3511: IFFALSE 3532
// AddComConstruct ( am_fac , us_medium_tracked , engine_solar , control_remote , us_crane ) ;
3513: LD_INT 26
3515: PPUSH
3516: LD_INT 3
3518: PPUSH
3519: LD_INT 2
3521: PPUSH
3522: LD_INT 2
3524: PPUSH
3525: LD_INT 13
3527: PPUSH
3528: CALL_OW 185
// if un = am_dep then
3532: LD_VAR 0 1
3536: PUSH
3537: LD_INT 25
3539: EQUAL
3540: IFFALSE 3708
// begin SayRadio ( Platonov , DPlat ) ;
3542: LD_EXP 4
3546: PPUSH
3547: LD_STRING DPlat
3549: PPUSH
3550: CALL_OW 94
// if timer <= 30 30$00 then
3554: LD_EXP 24
3558: PUSH
3559: LD_INT 63000
3561: LESSEQUAL
3562: IFFALSE 3576
// AddMedal ( gamma_med3 , 1 ) else
3564: LD_STRING gamma_med3
3566: PPUSH
3567: LD_INT 1
3569: PPUSH
3570: CALL_OW 101
3574: GO 3626
// if timer <= [ 50 50$00 , 42 42$00 , 35 35$00 ] [ dif ] then
3576: LD_EXP 24
3580: PUSH
3581: LD_INT 105000
3583: PUSH
3584: LD_INT 88200
3586: PUSH
3587: LD_INT 73500
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: LIST
3594: PUSH
3595: LD_EXP 1
3599: ARRAY
3600: LESSEQUAL
3601: IFFALSE 3615
// AddMedal ( gamma_med3 , 2 ) else
3603: LD_STRING gamma_med3
3605: PPUSH
3606: LD_INT 2
3608: PPUSH
3609: CALL_OW 101
3613: GO 3626
// AddMedal ( gamma_med3 , - 1 ) ;
3615: LD_STRING gamma_med3
3617: PPUSH
3618: LD_INT 1
3620: NEG
3621: PPUSH
3622: CALL_OW 101
// if not comp_tested then
3626: LD_EXP 22
3630: NOT
3631: IFFALSE 3646
// AddMedal ( gamma_med2 , - 1 ) else
3633: LD_STRING gamma_med2
3635: PPUSH
3636: LD_INT 1
3638: NEG
3639: PPUSH
3640: CALL_OW 101
3644: GO 3656
// AddMedal ( gamma_med2 , 1 ) ;
3646: LD_STRING gamma_med2
3648: PPUSH
3649: LD_INT 1
3651: PPUSH
3652: CALL_OW 101
// if IsDead ( sikorski ) and not sikorski_run then
3656: LD_EXP 9
3660: PPUSH
3661: CALL_OW 301
3665: PUSH
3666: LD_EXP 23
3670: NOT
3671: AND
3672: IFFALSE 3686
// AddMedal ( gamma_med1 , 1 ) else
3674: LD_STRING gamma_med1
3676: PPUSH
3677: LD_INT 1
3679: PPUSH
3680: CALL_OW 101
3684: GO 3697
// AddMedal ( gamma_med1 , - 1 ) ;
3686: LD_STRING gamma_med1
3688: PPUSH
3689: LD_INT 1
3691: NEG
3692: PPUSH
3693: CALL_OW 101
// GiveMedals ( GAMMA_MEDALS ) ;
3697: LD_STRING GAMMA_MEDALS
3699: PPUSH
3700: CALL_OW 102
// YouWin ;
3704: CALL_OW 103
// end ; if un = commander then
3708: LD_VAR 0 1
3712: PUSH
3713: LD_EXP 3
3717: EQUAL
3718: IFFALSE 3727
// YouLost ( comml ) ;
3720: LD_STRING comml
3722: PPUSH
3723: CALL_OW 104
// if un = sikorski then
3727: LD_VAR 0 1
3731: PUSH
3732: LD_EXP 9
3736: EQUAL
3737: IFFALSE 3749
// AddMedal ( gamma_med1 , 1 ) ;
3739: LD_STRING gamma_med1
3741: PPUSH
3742: LD_INT 1
3744: PPUSH
3745: CALL_OW 101
// end ;
3749: PPOPN 1
3751: END
// on SailEvent ( event ) do var i , un , filter , doc , bac , place , engs , crane , b ;
3752: LD_INT 0
3754: PPUSH
3755: PPUSH
3756: PPUSH
3757: PPUSH
3758: PPUSH
3759: PPUSH
3760: PPUSH
3761: PPUSH
3762: PPUSH
// begin if event = 1 then
3763: LD_VAR 0 1
3767: PUSH
3768: LD_INT 1
3770: EQUAL
3771: IFFALSE 4068
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3773: LD_ADDR_VAR 0 4
3777: PUSH
3778: LD_INT 22
3780: PUSH
3781: LD_INT 1
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PUSH
3788: LD_INT 21
3790: PUSH
3791: LD_INT 3
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: PUSH
3798: LD_INT 3
3800: PUSH
3801: LD_INT 24
3803: PUSH
3804: LD_INT 1000
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PUSH
3811: EMPTY
3812: LIST
3813: LIST
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: LIST
3819: PPUSH
3820: CALL_OW 69
3824: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ] ) ;
3825: LD_ADDR_VAR 0 8
3829: PUSH
3830: LD_INT 22
3832: PUSH
3833: LD_INT 1
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: PUSH
3840: LD_INT 25
3842: PUSH
3843: LD_INT 2
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: PUSH
3850: LD_INT 24
3852: PUSH
3853: LD_INT 1000
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: PUSH
3860: EMPTY
3861: LIST
3862: LIST
3863: LIST
3864: PUSH
3865: EMPTY
3866: LIST
3867: PPUSH
3868: CALL_OW 69
3872: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) ;
3873: LD_ADDR_VAR 0 9
3877: PUSH
3878: LD_INT 22
3880: PUSH
3881: LD_INT 1
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: PUSH
3888: LD_INT 34
3890: PUSH
3891: LD_INT 13
3893: PUSH
3894: EMPTY
3895: LIST
3896: LIST
3897: PUSH
3898: EMPTY
3899: LIST
3900: LIST
3901: PPUSH
3902: CALL_OW 69
3906: ST_TO_ADDR
// if engs > 0 then
3907: LD_VAR 0 8
3911: PUSH
3912: LD_INT 0
3914: GREATER
3915: IFFALSE 4020
// for i = 1 to engs do
3917: LD_ADDR_VAR 0 2
3921: PUSH
3922: DOUBLE
3923: LD_INT 1
3925: DEC
3926: ST_TO_ADDR
3927: LD_VAR 0 8
3931: PUSH
3932: FOR_TO
3933: IFFALSE 4018
// begin if IsInUnit ( engs [ i ] ) then
3935: LD_VAR 0 8
3939: PUSH
3940: LD_VAR 0 2
3944: ARRAY
3945: PPUSH
3946: CALL_OW 310
3950: IFFALSE 3967
// ComExitBuilding ( engs [ i ] ) ;
3952: LD_VAR 0 8
3956: PUSH
3957: LD_VAR 0 2
3961: ARRAY
3962: PPUSH
3963: CALL_OW 122
// Wait ( 0 0$0.2 ) ;
3967: LD_INT 7
3969: PPUSH
3970: CALL_OW 67
// if not HasTask ( engs [ i ] ) then
3974: LD_VAR 0 8
3978: PUSH
3979: LD_VAR 0 2
3983: ARRAY
3984: PPUSH
3985: CALL_OW 314
3989: NOT
3990: IFFALSE 4016
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
3992: LD_VAR 0 8
3996: PUSH
3997: LD_VAR 0 2
4001: ARRAY
4002: PPUSH
4003: LD_VAR 0 4
4007: PUSH
4008: LD_INT 1
4010: ARRAY
4011: PPUSH
4012: CALL_OW 130
// end ;
4016: GO 3932
4018: POP
4019: POP
// if crane > 0 then
4020: LD_VAR 0 9
4024: PUSH
4025: LD_INT 0
4027: GREATER
4028: IFFALSE 4068
// if not HasTask ( crane [ 1 ] ) then
4030: LD_VAR 0 9
4034: PUSH
4035: LD_INT 1
4037: ARRAY
4038: PPUSH
4039: CALL_OW 314
4043: NOT
4044: IFFALSE 4068
// ComRepairBuilding ( crane [ 1 ] , filter [ 1 ] ) ;
4046: LD_VAR 0 9
4050: PUSH
4051: LD_INT 1
4053: ARRAY
4054: PPUSH
4055: LD_VAR 0 4
4059: PUSH
4060: LD_INT 1
4062: ARRAY
4063: PPUSH
4064: CALL_OW 130
// end ; if event = 2 then
4068: LD_VAR 0 1
4072: PUSH
4073: LD_INT 2
4075: EQUAL
4076: IFFALSE 4198
// begin engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
4078: LD_ADDR_VAR 0 8
4082: PUSH
4083: LD_INT 22
4085: PUSH
4086: LD_INT 1
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: PUSH
4093: LD_INT 25
4095: PUSH
4096: LD_INT 2
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: PUSH
4103: EMPTY
4104: LIST
4105: LIST
4106: PPUSH
4107: CALL_OW 69
4111: ST_TO_ADDR
// if engs > 0 then
4112: LD_VAR 0 8
4116: PUSH
4117: LD_INT 0
4119: GREATER
4120: IFFALSE 4198
// for i = 1 to engs do
4122: LD_ADDR_VAR 0 2
4126: PUSH
4127: DOUBLE
4128: LD_INT 1
4130: DEC
4131: ST_TO_ADDR
4132: LD_VAR 0 8
4136: PUSH
4137: FOR_TO
4138: IFFALSE 4196
// if not HasTask ( engs [ i ] ) and not IsInUnit ( engs [ i ] ) then
4140: LD_VAR 0 8
4144: PUSH
4145: LD_VAR 0 2
4149: ARRAY
4150: PPUSH
4151: CALL_OW 314
4155: NOT
4156: PUSH
4157: LD_VAR 0 8
4161: PUSH
4162: LD_VAR 0 2
4166: ARRAY
4167: PPUSH
4168: CALL_OW 310
4172: NOT
4173: AND
4174: IFFALSE 4194
// ComEnterUnit ( engs [ i ] , am_dep ) ;
4176: LD_VAR 0 8
4180: PUSH
4181: LD_VAR 0 2
4185: ARRAY
4186: PPUSH
4187: LD_INT 25
4189: PPUSH
4190: CALL_OW 120
4194: GO 4137
4196: POP
4197: POP
// end ; if event = 3 then
4198: LD_VAR 0 1
4202: PUSH
4203: LD_INT 3
4205: EQUAL
4206: IFFALSE 4570
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_class , 4 ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
4208: LD_ADDR_VAR 0 4
4212: PUSH
4213: LD_INT 22
4215: PUSH
4216: LD_INT 1
4218: PUSH
4219: EMPTY
4220: LIST
4221: LIST
4222: PUSH
4223: LD_INT 21
4225: PUSH
4226: LD_INT 1
4228: PUSH
4229: EMPTY
4230: LIST
4231: LIST
4232: PUSH
4233: LD_INT 3
4235: PUSH
4236: LD_INT 25
4238: PUSH
4239: LD_INT 4
4241: PUSH
4242: EMPTY
4243: LIST
4244: LIST
4245: PUSH
4246: EMPTY
4247: LIST
4248: LIST
4249: PUSH
4250: LD_INT 3
4252: PUSH
4253: LD_INT 24
4255: PUSH
4256: LD_INT 800
4258: PUSH
4259: EMPTY
4260: LIST
4261: LIST
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: LIST
4271: LIST
4272: PUSH
4273: EMPTY
4274: LIST
4275: PPUSH
4276: CALL_OW 69
4280: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
4281: LD_ADDR_VAR 0 5
4285: PUSH
4286: LD_INT 22
4288: PUSH
4289: LD_INT 1
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: PUSH
4296: LD_INT 25
4298: PUSH
4299: LD_INT 4
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: PPUSH
4310: CALL_OW 69
4314: ST_TO_ADDR
// if filter > 0 then
4315: LD_VAR 0 4
4319: PUSH
4320: LD_INT 0
4322: GREATER
4323: IFFALSE 4512
// begin for i = 1 to doc do
4325: LD_ADDR_VAR 0 2
4329: PUSH
4330: DOUBLE
4331: LD_INT 1
4333: DEC
4334: ST_TO_ADDR
4335: LD_VAR 0 5
4339: PUSH
4340: FOR_TO
4341: IFFALSE 4441
// begin if IsInUnit ( doc [ i ] ) then
4343: LD_VAR 0 5
4347: PUSH
4348: LD_VAR 0 2
4352: ARRAY
4353: PPUSH
4354: CALL_OW 310
4358: IFFALSE 4375
// ComExitBuilding ( doc [ i ] ) ;
4360: LD_VAR 0 5
4364: PUSH
4365: LD_VAR 0 2
4369: ARRAY
4370: PPUSH
4371: CALL_OW 122
// if GetDistUnits ( filter [ 1 ] , am_lab ) < 10 and not HasTask ( doc [ i ] ) then
4375: LD_VAR 0 4
4379: PUSH
4380: LD_INT 1
4382: ARRAY
4383: PPUSH
4384: LD_INT 46
4386: PPUSH
4387: CALL_OW 296
4391: PUSH
4392: LD_INT 10
4394: LESS
4395: PUSH
4396: LD_VAR 0 5
4400: PUSH
4401: LD_VAR 0 2
4405: ARRAY
4406: PPUSH
4407: CALL_OW 314
4411: NOT
4412: AND
4413: IFFALSE 4439
// ComHeal ( doc [ i ] , filter [ 1 ] ) ;
4415: LD_VAR 0 5
4419: PUSH
4420: LD_VAR 0 2
4424: ARRAY
4425: PPUSH
4426: LD_VAR 0 4
4430: PUSH
4431: LD_INT 1
4433: ARRAY
4434: PPUSH
4435: CALL_OW 128
// end ;
4439: GO 4340
4441: POP
4442: POP
// for i = 1 to filter do
4443: LD_ADDR_VAR 0 2
4447: PUSH
4448: DOUBLE
4449: LD_INT 1
4451: DEC
4452: ST_TO_ADDR
4453: LD_VAR 0 4
4457: PUSH
4458: FOR_TO
4459: IFFALSE 4508
// if GetDistUnits ( filter [ i ] , am_lab ) > 10 then
4461: LD_VAR 0 4
4465: PUSH
4466: LD_VAR 0 2
4470: ARRAY
4471: PPUSH
4472: LD_INT 46
4474: PPUSH
4475: CALL_OW 296
4479: PUSH
4480: LD_INT 10
4482: GREATER
4483: IFFALSE 4506
// ComMoveXY ( filter [ i ] , 47 , 12 ) ;
4485: LD_VAR 0 4
4489: PUSH
4490: LD_VAR 0 2
4494: ARRAY
4495: PPUSH
4496: LD_INT 47
4498: PPUSH
4499: LD_INT 12
4501: PPUSH
4502: CALL_OW 111
4506: GO 4458
4508: POP
4509: POP
// end else
4510: GO 4570
// for i = 1 to doc do
4512: LD_ADDR_VAR 0 2
4516: PUSH
4517: DOUBLE
4518: LD_INT 1
4520: DEC
4521: ST_TO_ADDR
4522: LD_VAR 0 5
4526: PUSH
4527: FOR_TO
4528: IFFALSE 4568
// if not IsInUnit ( doc [ i ] ) then
4530: LD_VAR 0 5
4534: PUSH
4535: LD_VAR 0 2
4539: ARRAY
4540: PPUSH
4541: CALL_OW 310
4545: NOT
4546: IFFALSE 4566
// ComEnterUnit ( doc [ i ] , am_lab ) ;
4548: LD_VAR 0 5
4552: PUSH
4553: LD_VAR 0 2
4557: ARRAY
4558: PPUSH
4559: LD_INT 46
4561: PPUSH
4562: CALL_OW 120
4566: GO 4527
4568: POP
4569: POP
// end ; if event = 4 then
4570: LD_VAR 0 1
4574: PUSH
4575: LD_INT 4
4577: EQUAL
4578: IFFALSE 4829
// begin bac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
4580: LD_ADDR_VAR 0 6
4584: PUSH
4585: LD_INT 22
4587: PUSH
4588: LD_INT 1
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PUSH
4595: LD_INT 30
4597: PUSH
4598: LD_INT 5
4600: PUSH
4601: EMPTY
4602: LIST
4603: LIST
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: PPUSH
4609: CALL_OW 69
4613: ST_TO_ADDR
// for i = 1 to bac do
4614: LD_ADDR_VAR 0 2
4618: PUSH
4619: DOUBLE
4620: LD_INT 1
4622: DEC
4623: ST_TO_ADDR
4624: LD_VAR 0 6
4628: PUSH
4629: FOR_TO
4630: IFFALSE 4671
// if UnitsInside ( bac [ i ] ) < 6 then
4632: LD_VAR 0 6
4636: PUSH
4637: LD_VAR 0 2
4641: ARRAY
4642: PPUSH
4643: CALL_OW 313
4647: PUSH
4648: LD_INT 6
4650: LESS
4651: IFFALSE 4669
// place := bac [ i ] ;
4653: LD_ADDR_VAR 0 7
4657: PUSH
4658: LD_VAR 0 6
4662: PUSH
4663: LD_VAR 0 2
4667: ARRAY
4668: ST_TO_ADDR
4669: GO 4629
4671: POP
4672: POP
// if place then
4673: LD_VAR 0 7
4677: IFFALSE 4829
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] ] , [ f_lives , 1000 ] ] ] ) diff Patrol ;
4679: LD_ADDR_VAR 0 4
4683: PUSH
4684: LD_INT 22
4686: PUSH
4687: LD_INT 1
4689: PUSH
4690: EMPTY
4691: LIST
4692: LIST
4693: PUSH
4694: LD_INT 2
4696: PUSH
4697: LD_INT 25
4699: PUSH
4700: LD_INT 1
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: PUSH
4707: LD_INT 25
4709: PUSH
4710: LD_INT 5
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: PUSH
4717: EMPTY
4718: LIST
4719: LIST
4720: LIST
4721: PUSH
4722: LD_INT 24
4724: PUSH
4725: LD_INT 1000
4727: PUSH
4728: EMPTY
4729: LIST
4730: LIST
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: LIST
4736: PUSH
4737: EMPTY
4738: LIST
4739: PPUSH
4740: CALL_OW 69
4744: PUSH
4745: LD_EXP 17
4749: DIFF
4750: ST_TO_ADDR
// for i = 1 to filter do
4751: LD_ADDR_VAR 0 2
4755: PUSH
4756: DOUBLE
4757: LD_INT 1
4759: DEC
4760: ST_TO_ADDR
4761: LD_VAR 0 4
4765: PUSH
4766: FOR_TO
4767: IFFALSE 4827
// if not IsInUnit ( filter [ i ] ) and not HasTask ( filter [ i ] ) then
4769: LD_VAR 0 4
4773: PUSH
4774: LD_VAR 0 2
4778: ARRAY
4779: PPUSH
4780: CALL_OW 310
4784: NOT
4785: PUSH
4786: LD_VAR 0 4
4790: PUSH
4791: LD_VAR 0 2
4795: ARRAY
4796: PPUSH
4797: CALL_OW 314
4801: NOT
4802: AND
4803: IFFALSE 4825
// ComEnterUnit ( filter [ i ] , place ) ;
4805: LD_VAR 0 4
4809: PUSH
4810: LD_VAR 0 2
4814: ARRAY
4815: PPUSH
4816: LD_VAR 0 7
4820: PPUSH
4821: CALL_OW 120
4825: GO 4766
4827: POP
4828: POP
// end ; end ; if event = 5 then
4829: LD_VAR 0 1
4833: PUSH
4834: LD_INT 5
4836: EQUAL
4837: IFFALSE 4991
// begin if FilterUnitsInArea ( am_sec , [ f_enemy , 1 ] ) = 0 then
4839: LD_INT 12
4841: PPUSH
4842: LD_INT 81
4844: PUSH
4845: LD_INT 1
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: PPUSH
4852: CALL_OW 70
4856: PUSH
4857: LD_INT 0
4859: EQUAL
4860: IFFALSE 4991
// begin engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
4862: LD_ADDR_VAR 0 8
4866: PUSH
4867: LD_INT 22
4869: PUSH
4870: LD_INT 1
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: PUSH
4877: LD_INT 25
4879: PUSH
4880: LD_INT 2
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PPUSH
4891: CALL_OW 69
4895: ST_TO_ADDR
// if engs > 0 then
4896: LD_VAR 0 8
4900: PUSH
4901: LD_INT 0
4903: GREATER
4904: IFFALSE 4991
// for i = 1 to engs do
4906: LD_ADDR_VAR 0 2
4910: PUSH
4911: DOUBLE
4912: LD_INT 1
4914: DEC
4915: ST_TO_ADDR
4916: LD_VAR 0 8
4920: PUSH
4921: FOR_TO
4922: IFFALSE 4989
// if not HasTask ( engs [ i ] ) then
4924: LD_VAR 0 8
4928: PUSH
4929: LD_VAR 0 2
4933: ARRAY
4934: PPUSH
4935: CALL_OW 314
4939: NOT
4940: IFFALSE 4987
// ComBuild ( engs [ i ] , b_bunker , gamma_towers [ 1 ] , gamma_towers [ 2 ] , gamma_towers [ 3 ] ) ;
4942: LD_VAR 0 8
4946: PUSH
4947: LD_VAR 0 2
4951: ARRAY
4952: PPUSH
4953: LD_INT 32
4955: PPUSH
4956: LD_EXP 18
4960: PUSH
4961: LD_INT 1
4963: ARRAY
4964: PPUSH
4965: LD_EXP 18
4969: PUSH
4970: LD_INT 2
4972: ARRAY
4973: PPUSH
4974: LD_EXP 18
4978: PUSH
4979: LD_INT 3
4981: ARRAY
4982: PPUSH
4983: CALL_OW 145
4987: GO 4921
4989: POP
4990: POP
// end ; end ; if event = 6 then
4991: LD_VAR 0 1
4995: PUSH
4996: LD_INT 6
4998: EQUAL
4999: IFFALSE 5183
// begin bac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
5001: LD_ADDR_VAR 0 6
5005: PUSH
5006: LD_INT 22
5008: PUSH
5009: LD_INT 1
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: PUSH
5016: LD_INT 30
5018: PUSH
5019: LD_INT 5
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: PPUSH
5030: CALL_OW 69
5034: ST_TO_ADDR
// if bac and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ] ) > 0 then
5035: LD_VAR 0 6
5039: PUSH
5040: LD_INT 22
5042: PUSH
5043: LD_INT 1
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: PUSH
5050: LD_INT 30
5052: PUSH
5053: LD_INT 32
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: PUSH
5060: LD_INT 58
5062: PUSH
5063: EMPTY
5064: LIST
5065: PUSH
5066: EMPTY
5067: LIST
5068: LIST
5069: LIST
5070: PUSH
5071: EMPTY
5072: LIST
5073: PPUSH
5074: CALL_OW 69
5078: PUSH
5079: LD_INT 0
5081: GREATER
5082: AND
5083: IFFALSE 5183
// begin b := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ] ) [ 1 ] ;
5085: LD_ADDR_VAR 0 10
5089: PUSH
5090: LD_INT 22
5092: PUSH
5093: LD_INT 1
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: PUSH
5100: LD_INT 30
5102: PUSH
5103: LD_INT 32
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: PUSH
5110: LD_INT 58
5112: PUSH
5113: EMPTY
5114: LIST
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: LIST
5120: PUSH
5121: EMPTY
5122: LIST
5123: PPUSH
5124: CALL_OW 69
5128: PUSH
5129: LD_INT 1
5131: ARRAY
5132: ST_TO_ADDR
// un := UnitsInside ( bac [ 1 ] ) ;
5133: LD_ADDR_VAR 0 3
5137: PUSH
5138: LD_VAR 0 6
5142: PUSH
5143: LD_INT 1
5145: ARRAY
5146: PPUSH
5147: CALL_OW 313
5151: ST_TO_ADDR
// ComExitBuilding ( un [ 1 ] ) ;
5152: LD_VAR 0 3
5156: PUSH
5157: LD_INT 1
5159: ARRAY
5160: PPUSH
5161: CALL_OW 122
// AddComEnterUnit ( un [ 1 ] , b ) ;
5165: LD_VAR 0 3
5169: PUSH
5170: LD_INT 1
5172: ARRAY
5173: PPUSH
5174: LD_VAR 0 10
5178: PPUSH
5179: CALL_OW 180
// end ; end ; end ;
5183: PPOPN 10
5185: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 3 then
5186: LD_VAR 0 1
5190: PUSH
5191: LD_INT 1
5193: EQUAL
5194: PUSH
5195: LD_VAR 0 2
5199: PUSH
5200: LD_INT 3
5202: EQUAL
5203: AND
5204: IFFALSE 5214
// contact_am := true ;
5206: LD_ADDR_EXP 16
5210: PUSH
5211: LD_INT 1
5213: ST_TO_ADDR
// end ;
5214: PPOPN 2
5216: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5217: LD_VAR 0 1
5221: PPUSH
5222: LD_VAR 0 2
5226: PPUSH
5227: LD_VAR 0 3
5231: PPUSH
5232: CALL 25367 0 3
// end ;
5236: PPOPN 3
5238: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5239: LD_VAR 0 1
5243: PPUSH
5244: CALL 25375 0 1
// end ; end_of_file
5248: PPOPN 1
5250: END
// export Sikorski , Game_Started , SForce , Sikorski_Ar , Donald , Van , attacked , contact_am ; export patrol ; export gamma_towers ; export function PrepareAmerican ; var i , un , b , skill , weapons , sol , lw ; begin
5251: LD_INT 0
5253: PPUSH
5254: PPUSH
5255: PPUSH
5256: PPUSH
5257: PPUSH
5258: PPUSH
5259: PPUSH
5260: PPUSH
// skill := [ 5 , 6 , 7 ] [ dif ] ;
5261: LD_ADDR_VAR 0 5
5265: PUSH
5266: LD_INT 5
5268: PUSH
5269: LD_INT 6
5271: PUSH
5272: LD_INT 7
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: LIST
5279: PUSH
5280: LD_EXP 1
5284: ARRAY
5285: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_gatling_gun , us_gatling_gun , us_double_gun , us_double_gun , us_double_gun , us_heavy_gun ] ;
5286: LD_ADDR_VAR 0 6
5290: PUSH
5291: LD_INT 4
5293: PUSH
5294: LD_INT 4
5296: PUSH
5297: LD_INT 4
5299: PUSH
5300: LD_INT 5
5302: PUSH
5303: LD_INT 5
5305: PUSH
5306: LD_INT 5
5308: PUSH
5309: LD_INT 6
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: LIST
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: ST_TO_ADDR
// SForce := [ ] ;
5321: LD_ADDR_EXP 11
5325: PUSH
5326: EMPTY
5327: ST_TO_ADDR
// Sikorski_Ar := false ;
5328: LD_ADDR_EXP 12
5332: PUSH
5333: LD_INT 0
5335: ST_TO_ADDR
// attacked := false ;
5336: LD_ADDR_EXP 15
5340: PUSH
5341: LD_INT 0
5343: ST_TO_ADDR
// contact_am := false ;
5344: LD_ADDR_EXP 16
5348: PUSH
5349: LD_INT 0
5351: ST_TO_ADDR
// patrol := [ ] ;
5352: LD_ADDR_EXP 17
5356: PUSH
5357: EMPTY
5358: ST_TO_ADDR
// gamma_towers := [ ] ;
5359: LD_ADDR_EXP 18
5363: PUSH
5364: EMPTY
5365: ST_TO_ADDR
// SetBName ( am_dep , gamma ) ;
5366: LD_INT 25
5368: PPUSH
5369: LD_STRING gamma
5371: PPUSH
5372: CALL_OW 500
// uc_side := 1 ;
5376: LD_ADDR_OWVAR 20
5380: PUSH
5381: LD_INT 1
5383: ST_TO_ADDR
// uc_nation := 1 ;
5384: LD_ADDR_OWVAR 21
5388: PUSH
5389: LD_INT 1
5391: ST_TO_ADDR
// hc_importance := 0 ;
5392: LD_ADDR_OWVAR 32
5396: PUSH
5397: LD_INT 0
5399: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
5400: LD_ADDR_OWVAR 26
5404: PUSH
5405: LD_STRING Jeremy Sikorski
5407: ST_TO_ADDR
// hc_gallery := us ;
5408: LD_ADDR_OWVAR 33
5412: PUSH
5413: LD_STRING us
5415: ST_TO_ADDR
// hc_face_number := 19 ;
5416: LD_ADDR_OWVAR 34
5420: PUSH
5421: LD_INT 19
5423: ST_TO_ADDR
// hc_skills := [ Rand ( skill , skill + 2 ) , 4 , 6 , 3 ] ;
5424: LD_ADDR_OWVAR 31
5428: PUSH
5429: LD_VAR 0 5
5433: PPUSH
5434: LD_VAR 0 5
5438: PUSH
5439: LD_INT 2
5441: PLUS
5442: PPUSH
5443: CALL_OW 12
5447: PUSH
5448: LD_INT 4
5450: PUSH
5451: LD_INT 6
5453: PUSH
5454: LD_INT 3
5456: PUSH
5457: EMPTY
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: ST_TO_ADDR
// hc_sex := sex_male ;
5463: LD_ADDR_OWVAR 27
5467: PUSH
5468: LD_INT 1
5470: ST_TO_ADDR
// hc_class := 1 ;
5471: LD_ADDR_OWVAR 28
5475: PUSH
5476: LD_INT 1
5478: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
5479: LD_ADDR_OWVAR 29
5483: PUSH
5484: LD_INT 10
5486: PUSH
5487: LD_INT 11
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: ST_TO_ADDR
// sikorski := CreateHuman ;
5494: LD_ADDR_EXP 9
5498: PUSH
5499: CALL_OW 44
5503: ST_TO_ADDR
// hc_name := Lucy Donaldson ;
5504: LD_ADDR_OWVAR 26
5508: PUSH
5509: LD_STRING Lucy Donaldson
5511: ST_TO_ADDR
// hc_gallery := us ;
5512: LD_ADDR_OWVAR 33
5516: PUSH
5517: LD_STRING us
5519: ST_TO_ADDR
// hc_face_number := 2 ;
5520: LD_ADDR_OWVAR 34
5524: PUSH
5525: LD_INT 2
5527: ST_TO_ADDR
// hc_skills := [ Rand ( skill , skill + 2 ) , 6 , 4 , 2 ] ;
5528: LD_ADDR_OWVAR 31
5532: PUSH
5533: LD_VAR 0 5
5537: PPUSH
5538: LD_VAR 0 5
5542: PUSH
5543: LD_INT 2
5545: PLUS
5546: PPUSH
5547: CALL_OW 12
5551: PUSH
5552: LD_INT 6
5554: PUSH
5555: LD_INT 4
5557: PUSH
5558: LD_INT 2
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: LIST
5565: LIST
5566: ST_TO_ADDR
// hc_sex := sex_female ;
5567: LD_ADDR_OWVAR 27
5571: PUSH
5572: LD_INT 2
5574: ST_TO_ADDR
// hc_class := 1 ;
5575: LD_ADDR_OWVAR 28
5579: PUSH
5580: LD_INT 1
5582: ST_TO_ADDR
// donald := CreateHuman ;
5583: LD_ADDR_EXP 13
5587: PUSH
5588: CALL_OW 44
5592: ST_TO_ADDR
// hc_name := Peter Van Houten ;
5593: LD_ADDR_OWVAR 26
5597: PUSH
5598: LD_STRING Peter Van Houten
5600: ST_TO_ADDR
// hc_gallery := us ;
5601: LD_ADDR_OWVAR 33
5605: PUSH
5606: LD_STRING us
5608: ST_TO_ADDR
// hc_face_number := 16 ;
5609: LD_ADDR_OWVAR 34
5613: PUSH
5614: LD_INT 16
5616: ST_TO_ADDR
// hc_sex := sex_male ;
5617: LD_ADDR_OWVAR 27
5621: PUSH
5622: LD_INT 1
5624: ST_TO_ADDR
// van := CreateHuman ;
5625: LD_ADDR_EXP 14
5629: PUSH
5630: CALL_OW 44
5634: ST_TO_ADDR
// hc_importance := 0 ;
5635: LD_ADDR_OWVAR 32
5639: PUSH
5640: LD_INT 0
5642: ST_TO_ADDR
// case dif of 1 :
5643: LD_EXP 1
5647: PUSH
5648: LD_INT 1
5650: DOUBLE
5651: EQUAL
5652: IFTRUE 5656
5654: GO 5667
5656: POP
// lw = 1 ; 2 :
5657: LD_ADDR_VAR 0 8
5661: PUSH
5662: LD_INT 1
5664: ST_TO_ADDR
5665: GO 5714
5667: LD_INT 2
5669: DOUBLE
5670: EQUAL
5671: IFTRUE 5675
5673: GO 5694
5675: POP
// lw = Rand ( 1 , 2 ) ; 3 :
5676: LD_ADDR_VAR 0 8
5680: PUSH
5681: LD_INT 1
5683: PPUSH
5684: LD_INT 2
5686: PPUSH
5687: CALL_OW 12
5691: ST_TO_ADDR
5692: GO 5714
5694: LD_INT 3
5696: DOUBLE
5697: EQUAL
5698: IFTRUE 5702
5700: GO 5713
5702: POP
// lw = 2 ; end ;
5703: LD_ADDR_VAR 0 8
5707: PUSH
5708: LD_INT 2
5710: ST_TO_ADDR
5711: GO 5714
5713: POP
// case lw of 1 :
5714: LD_VAR 0 8
5718: PUSH
5719: LD_INT 1
5721: DOUBLE
5722: EQUAL
5723: IFTRUE 5727
5725: GO 5742
5727: POP
// PlaceHumanInUnit ( donald , am_dep ) ; 2 :
5728: LD_EXP 13
5732: PPUSH
5733: LD_INT 25
5735: PPUSH
5736: CALL_OW 52
5740: GO 5766
5742: LD_INT 2
5744: DOUBLE
5745: EQUAL
5746: IFTRUE 5750
5748: GO 5765
5750: POP
// PlaceHumanInUnit ( van , am_dep ) ; end ;
5751: LD_EXP 14
5755: PPUSH
5756: LD_INT 25
5758: PPUSH
5759: CALL_OW 52
5763: GO 5766
5765: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
5766: LD_ADDR_VAR 0 2
5770: PUSH
5771: LD_INT 22
5773: PUSH
5774: LD_INT 1
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: PUSH
5781: LD_INT 30
5783: PUSH
5784: LD_INT 32
5786: PUSH
5787: EMPTY
5788: LIST
5789: LIST
5790: PUSH
5791: EMPTY
5792: LIST
5793: LIST
5794: PPUSH
5795: CALL_OW 69
5799: PUSH
5800: FOR_IN
5801: IFFALSE 5855
// begin PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
5803: LD_INT 1
5805: PPUSH
5806: LD_VAR 0 5
5810: PPUSH
5811: CALL 734 0 2
5815: PPUSH
5816: LD_VAR 0 2
5820: PPUSH
5821: CALL_OW 52
// PlaceWeaponTurret ( i , weapons [ Rand ( 1 , weapons ) ] ) ;
5825: LD_VAR 0 2
5829: PPUSH
5830: LD_VAR 0 6
5834: PUSH
5835: LD_INT 1
5837: PPUSH
5838: LD_VAR 0 6
5842: PPUSH
5843: CALL_OW 12
5847: ARRAY
5848: PPUSH
5849: CALL_OW 431
// end ;
5853: GO 5800
5855: POP
5856: POP
// sol := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , class_soldier ] , [ class_sniper ] ] ] ) ;
5857: LD_ADDR_VAR 0 7
5861: PUSH
5862: LD_INT 22
5864: PUSH
5865: LD_INT 1
5867: PUSH
5868: EMPTY
5869: LIST
5870: LIST
5871: PUSH
5872: LD_INT 2
5874: PUSH
5875: LD_INT 25
5877: PUSH
5878: LD_INT 1
5880: PUSH
5881: EMPTY
5882: LIST
5883: LIST
5884: PUSH
5885: LD_INT 5
5887: PUSH
5888: EMPTY
5889: LIST
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: LIST
5895: PUSH
5896: EMPTY
5897: LIST
5898: LIST
5899: PPUSH
5900: CALL_OW 69
5904: ST_TO_ADDR
// for i = 1 to sol do
5905: LD_ADDR_VAR 0 2
5909: PUSH
5910: DOUBLE
5911: LD_INT 1
5913: DEC
5914: ST_TO_ADDR
5915: LD_VAR 0 7
5919: PUSH
5920: FOR_TO
5921: IFFALSE 5943
// SetTag ( sol [ i ] , 1 ) ;
5923: LD_VAR 0 7
5927: PUSH
5928: LD_VAR 0 2
5932: ARRAY
5933: PPUSH
5934: LD_INT 1
5936: PPUSH
5937: CALL_OW 109
5941: GO 5920
5943: POP
5944: POP
// for i = 1 to 3 do
5945: LD_ADDR_VAR 0 2
5949: PUSH
5950: DOUBLE
5951: LD_INT 1
5953: DEC
5954: ST_TO_ADDR
5955: LD_INT 3
5957: PUSH
5958: FOR_TO
5959: IFFALSE 5983
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , am_ct ) ;
5961: LD_INT 3
5963: PPUSH
5964: LD_VAR 0 5
5968: PPUSH
5969: CALL 734 0 2
5973: PPUSH
5974: LD_INT 56
5976: PPUSH
5977: CALL_OW 52
5981: GO 5958
5983: POP
5984: POP
// for i = 1 to 6 do
5985: LD_ADDR_VAR 0 2
5989: PUSH
5990: DOUBLE
5991: LD_INT 1
5993: DEC
5994: ST_TO_ADDR
5995: LD_INT 6
5997: PUSH
5998: FOR_TO
5999: IFFALSE 6023
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , am_fac ) ;
6001: LD_INT 3
6003: PPUSH
6004: LD_VAR 0 5
6008: PPUSH
6009: CALL 734 0 2
6013: PPUSH
6014: LD_INT 26
6016: PPUSH
6017: CALL_OW 52
6021: GO 5998
6023: POP
6024: POP
// for i = 1 to 5 do
6025: LD_ADDR_VAR 0 2
6029: PUSH
6030: DOUBLE
6031: LD_INT 1
6033: DEC
6034: ST_TO_ADDR
6035: LD_INT 5
6037: PUSH
6038: FOR_TO
6039: IFFALSE 6066
// PlaceUnitArea ( CreateHumanWithClass ( 2 , skill ) , am_base , false ) ;
6041: LD_INT 2
6043: PPUSH
6044: LD_VAR 0 5
6048: PPUSH
6049: CALL 734 0 2
6053: PPUSH
6054: LD_INT 7
6056: PPUSH
6057: LD_INT 0
6059: PPUSH
6060: CALL_OW 49
6064: GO 6038
6066: POP
6067: POP
// for i = 1 to 3 do
6068: LD_ADDR_VAR 0 2
6072: PUSH
6073: DOUBLE
6074: LD_INT 1
6076: DEC
6077: ST_TO_ADDR
6078: LD_INT 3
6080: PUSH
6081: FOR_TO
6082: IFFALSE 6106
// PlaceHumanInUnit ( CreateHumanWithClass ( 4 , skill ) , am_lab ) ;
6084: LD_INT 4
6086: PPUSH
6087: LD_VAR 0 5
6091: PPUSH
6092: CALL 734 0 2
6096: PPUSH
6097: LD_INT 46
6099: PPUSH
6100: CALL_OW 52
6104: GO 6081
6106: POP
6107: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) do
6108: LD_ADDR_VAR 0 2
6112: PUSH
6113: LD_INT 22
6115: PUSH
6116: LD_INT 1
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PUSH
6123: LD_INT 30
6125: PUSH
6126: LD_INT 5
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: PPUSH
6137: CALL_OW 69
6141: PUSH
6142: FOR_IN
6143: IFFALSE 6257
// begin PlaceHumanInUnit ( CreateHumanWithClass ( class_sniper , skill ) , i ) ;
6145: LD_INT 5
6147: PPUSH
6148: LD_VAR 0 5
6152: PPUSH
6153: CALL 734 0 2
6157: PPUSH
6158: LD_VAR 0 2
6162: PPUSH
6163: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( class_sniper , skill ) , i ) ;
6167: LD_INT 5
6169: PPUSH
6170: LD_VAR 0 5
6174: PPUSH
6175: CALL 734 0 2
6179: PPUSH
6180: LD_VAR 0 2
6184: PPUSH
6185: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6189: LD_INT 1
6191: PPUSH
6192: LD_VAR 0 5
6196: PPUSH
6197: CALL 734 0 2
6201: PPUSH
6202: LD_VAR 0 2
6206: PPUSH
6207: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6211: LD_INT 1
6213: PPUSH
6214: LD_VAR 0 5
6218: PPUSH
6219: CALL 734 0 2
6223: PPUSH
6224: LD_VAR 0 2
6228: PPUSH
6229: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6233: LD_INT 1
6235: PPUSH
6236: LD_VAR 0 5
6240: PPUSH
6241: CALL 734 0 2
6245: PPUSH
6246: LD_VAR 0 2
6250: PPUSH
6251: CALL_OW 52
// end ;
6255: GO 6142
6257: POP
6258: POP
// if dif > 1 then
6259: LD_EXP 1
6263: PUSH
6264: LD_INT 1
6266: GREATER
6267: IFFALSE 6340
// for i = 1 to ( dif - 1 ) do
6269: LD_ADDR_VAR 0 2
6273: PUSH
6274: DOUBLE
6275: LD_INT 1
6277: DEC
6278: ST_TO_ADDR
6279: LD_EXP 1
6283: PUSH
6284: LD_INT 1
6286: MINUS
6287: PUSH
6288: FOR_TO
6289: IFFALSE 6338
// begin patrol := patrol ^ CreateHumanWithClass ( 1 , skill ) ;
6291: LD_ADDR_EXP 17
6295: PUSH
6296: LD_EXP 17
6300: PUSH
6301: LD_INT 1
6303: PPUSH
6304: LD_VAR 0 5
6308: PPUSH
6309: CALL 734 0 2
6313: ADD
6314: ST_TO_ADDR
// PlaceUnitArea ( patrol [ i ] , am_west_spawn , false ) ;
6315: LD_EXP 17
6319: PUSH
6320: LD_VAR 0 2
6324: ARRAY
6325: PPUSH
6326: LD_INT 3
6328: PPUSH
6329: LD_INT 0
6331: PPUSH
6332: CALL_OW 49
// end ;
6336: GO 6288
6338: POP
6339: POP
// game_started := true ;
6340: LD_ADDR_EXP 10
6344: PUSH
6345: LD_INT 1
6347: ST_TO_ADDR
// ComConstruct ( am_fac , us_medium_tracked , engine_solar , control_remote , us_crane ) ;
6348: LD_INT 26
6350: PPUSH
6351: LD_INT 3
6353: PPUSH
6354: LD_INT 2
6356: PPUSH
6357: LD_INT 2
6359: PPUSH
6360: LD_INT 13
6362: PPUSH
6363: CALL_OW 125
// while ( contact_am = false ) do
6367: LD_EXP 16
6371: PUSH
6372: LD_INT 0
6374: EQUAL
6375: IFFALSE 6386
// begin Wait ( 0 0$01 ) ;
6377: LD_INT 35
6379: PPUSH
6380: CALL_OW 67
// end ;
6384: GO 6367
// Wait ( [ 4 4$00 , 3 3$00 , 2 2$30 ] [ dif ] ) ;
6386: LD_INT 8400
6388: PUSH
6389: LD_INT 6300
6391: PUSH
6392: LD_INT 5250
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: LIST
6399: PUSH
6400: LD_EXP 1
6404: ARRAY
6405: PPUSH
6406: CALL_OW 67
// case dif of 1 :
6410: LD_EXP 1
6414: PUSH
6415: LD_INT 1
6417: DOUBLE
6418: EQUAL
6419: IFTRUE 6423
6421: GO 6598
6423: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_machine_gun , us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 4 ) ] ) ;
6424: LD_INT 26
6426: PPUSH
6427: LD_INT 3
6429: PPUSH
6430: LD_INT 1
6432: PPUSH
6433: LD_INT 2
6435: PPUSH
6436: LD_INT 2
6438: PUSH
6439: LD_INT 4
6441: PUSH
6442: LD_INT 5
6444: PUSH
6445: LD_INT 5
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: LIST
6452: LIST
6453: PUSH
6454: LD_INT 1
6456: PPUSH
6457: LD_INT 4
6459: PPUSH
6460: CALL_OW 12
6464: ARRAY
6465: PPUSH
6466: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6470: LD_INT 26
6472: PPUSH
6473: LD_INT 3
6475: PPUSH
6476: LD_INT 1
6478: PPUSH
6479: LD_INT 2
6481: PPUSH
6482: LD_INT 4
6484: PUSH
6485: LD_INT 5
6487: PUSH
6488: LD_INT 5
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: LIST
6495: PUSH
6496: LD_INT 1
6498: PPUSH
6499: LD_INT 3
6501: PPUSH
6502: CALL_OW 12
6506: ARRAY
6507: PPUSH
6508: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6512: LD_INT 26
6514: PPUSH
6515: LD_INT 3
6517: PPUSH
6518: LD_INT 1
6520: PPUSH
6521: LD_INT 2
6523: PPUSH
6524: LD_INT 4
6526: PUSH
6527: LD_INT 5
6529: PUSH
6530: LD_INT 5
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: LIST
6537: PUSH
6538: LD_INT 1
6540: PPUSH
6541: LD_INT 3
6543: PPUSH
6544: CALL_OW 12
6548: ARRAY
6549: PPUSH
6550: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6554: LD_INT 26
6556: PPUSH
6557: LD_INT 3
6559: PPUSH
6560: LD_INT 1
6562: PPUSH
6563: LD_INT 2
6565: PPUSH
6566: LD_INT 4
6568: PUSH
6569: LD_INT 3
6571: PUSH
6572: LD_INT 5
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: LIST
6579: PUSH
6580: LD_INT 1
6582: PPUSH
6583: LD_INT 3
6585: PPUSH
6586: CALL_OW 12
6590: ARRAY
6591: PPUSH
6592: CALL_OW 185
// end ; 2 :
6596: GO 7125
6598: LD_INT 2
6600: DOUBLE
6601: EQUAL
6602: IFTRUE 6606
6604: GO 6819
6606: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6607: LD_INT 26
6609: PPUSH
6610: LD_INT 3
6612: PPUSH
6613: LD_INT 1
6615: PPUSH
6616: LD_INT 2
6618: PPUSH
6619: LD_INT 4
6621: PUSH
6622: LD_INT 5
6624: PUSH
6625: LD_INT 5
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: LIST
6632: PUSH
6633: LD_INT 1
6635: PPUSH
6636: LD_INT 3
6638: PPUSH
6639: CALL_OW 12
6643: ARRAY
6644: PPUSH
6645: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6649: LD_INT 26
6651: PPUSH
6652: LD_INT 3
6654: PPUSH
6655: LD_INT 1
6657: PPUSH
6658: LD_INT 2
6660: PPUSH
6661: LD_INT 4
6663: PUSH
6664: LD_INT 5
6666: PUSH
6667: LD_INT 5
6669: PUSH
6670: EMPTY
6671: LIST
6672: LIST
6673: LIST
6674: PUSH
6675: LD_INT 1
6677: PPUSH
6678: LD_INT 3
6680: PPUSH
6681: CALL_OW 12
6685: ARRAY
6686: PPUSH
6687: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6691: LD_INT 26
6693: PPUSH
6694: LD_INT 3
6696: PPUSH
6697: LD_INT 1
6699: PPUSH
6700: LD_INT 2
6702: PPUSH
6703: LD_INT 4
6705: PUSH
6706: LD_INT 3
6708: PUSH
6709: LD_INT 5
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: LIST
6716: PUSH
6717: LD_INT 1
6719: PPUSH
6720: LD_INT 3
6722: PPUSH
6723: CALL_OW 12
6727: ARRAY
6728: PPUSH
6729: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6733: LD_INT 26
6735: PPUSH
6736: LD_INT 4
6738: PPUSH
6739: LD_INT 1
6741: PPUSH
6742: LD_INT 2
6744: PPUSH
6745: LD_INT 4
6747: PUSH
6748: LD_INT 5
6750: PUSH
6751: LD_INT 6
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 1
6761: PPUSH
6762: LD_INT 3
6764: PPUSH
6765: CALL_OW 12
6769: ARRAY
6770: PPUSH
6771: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_heavy_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6775: LD_INT 26
6777: PPUSH
6778: LD_INT 4
6780: PPUSH
6781: LD_INT 1
6783: PPUSH
6784: LD_INT 2
6786: PPUSH
6787: LD_INT 4
6789: PUSH
6790: LD_INT 6
6792: PUSH
6793: LD_INT 6
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: LIST
6800: PUSH
6801: LD_INT 1
6803: PPUSH
6804: LD_INT 3
6806: PPUSH
6807: CALL_OW 12
6811: ARRAY
6812: PPUSH
6813: CALL_OW 185
// end ; 3 :
6817: GO 7125
6819: LD_INT 3
6821: DOUBLE
6822: EQUAL
6823: IFTRUE 6827
6825: GO 7124
6827: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6828: LD_INT 26
6830: PPUSH
6831: LD_INT 3
6833: PPUSH
6834: LD_INT 1
6836: PPUSH
6837: LD_INT 2
6839: PPUSH
6840: LD_INT 4
6842: PUSH
6843: LD_INT 5
6845: PUSH
6846: LD_INT 5
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: LIST
6853: PUSH
6854: LD_INT 1
6856: PPUSH
6857: LD_INT 3
6859: PPUSH
6860: CALL_OW 12
6864: ARRAY
6865: PPUSH
6866: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6870: LD_INT 26
6872: PPUSH
6873: LD_INT 3
6875: PPUSH
6876: LD_INT 1
6878: PPUSH
6879: LD_INT 2
6881: PPUSH
6882: LD_INT 4
6884: PUSH
6885: LD_INT 5
6887: PUSH
6888: LD_INT 5
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: LIST
6895: PUSH
6896: LD_INT 1
6898: PPUSH
6899: LD_INT 3
6901: PPUSH
6902: CALL_OW 12
6906: ARRAY
6907: PPUSH
6908: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6912: LD_INT 26
6914: PPUSH
6915: LD_INT 3
6917: PPUSH
6918: LD_INT 1
6920: PPUSH
6921: LD_INT 2
6923: PPUSH
6924: LD_INT 4
6926: PUSH
6927: LD_INT 5
6929: PUSH
6930: LD_INT 5
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: LIST
6937: PUSH
6938: LD_INT 1
6940: PPUSH
6941: LD_INT 3
6943: PPUSH
6944: CALL_OW 12
6948: ARRAY
6949: PPUSH
6950: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6954: LD_INT 26
6956: PPUSH
6957: LD_INT 3
6959: PPUSH
6960: LD_INT 1
6962: PPUSH
6963: LD_INT 2
6965: PPUSH
6966: LD_INT 4
6968: PUSH
6969: LD_INT 5
6971: PUSH
6972: LD_INT 5
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: LIST
6979: PUSH
6980: LD_INT 1
6982: PPUSH
6983: LD_INT 3
6985: PPUSH
6986: CALL_OW 12
6990: ARRAY
6991: PPUSH
6992: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_heavy_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6996: LD_INT 26
6998: PPUSH
6999: LD_INT 4
7001: PPUSH
7002: LD_INT 1
7004: PPUSH
7005: LD_INT 2
7007: PPUSH
7008: LD_INT 4
7010: PUSH
7011: LD_INT 6
7013: PUSH
7014: LD_INT 6
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: LIST
7021: PUSH
7022: LD_INT 1
7024: PPUSH
7025: LD_INT 3
7027: PPUSH
7028: CALL_OW 12
7032: ARRAY
7033: PPUSH
7034: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_heavy_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7038: LD_INT 26
7040: PPUSH
7041: LD_INT 4
7043: PPUSH
7044: LD_INT 1
7046: PPUSH
7047: LD_INT 2
7049: PPUSH
7050: LD_INT 4
7052: PUSH
7053: LD_INT 6
7055: PUSH
7056: LD_INT 6
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: LIST
7063: PUSH
7064: LD_INT 1
7066: PPUSH
7067: LD_INT 3
7069: PPUSH
7070: CALL_OW 12
7074: ARRAY
7075: PPUSH
7076: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_heavy_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7080: LD_INT 26
7082: PPUSH
7083: LD_INT 4
7085: PPUSH
7086: LD_INT 1
7088: PPUSH
7089: LD_INT 2
7091: PPUSH
7092: LD_INT 4
7094: PUSH
7095: LD_INT 6
7097: PUSH
7098: LD_INT 6
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: LIST
7105: PUSH
7106: LD_INT 1
7108: PPUSH
7109: LD_INT 3
7111: PPUSH
7112: CALL_OW 12
7116: ARRAY
7117: PPUSH
7118: CALL_OW 185
// end ; end ;
7122: GO 7125
7124: POP
// end ;
7125: LD_VAR 0 1
7129: RET
// every 0 0$01 do var i , filter ;
7130: GO 7132
7132: DISABLE
7133: LD_INT 0
7135: PPUSH
7136: PPUSH
// begin enable ;
7137: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
7138: LD_INT 22
7140: PUSH
7141: LD_INT 1
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PUSH
7148: LD_INT 25
7150: PUSH
7151: LD_INT 4
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PPUSH
7162: CALL_OW 69
7166: PUSH
7167: LD_INT 0
7169: GREATER
7170: IFFALSE 7179
// RaiseSailEvent ( 3 ) ;
7172: LD_INT 3
7174: PPUSH
7175: CALL_OW 427
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 0 then
7179: LD_INT 22
7181: PUSH
7182: LD_INT 1
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 21
7191: PUSH
7192: LD_INT 3
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: LD_INT 3
7201: PUSH
7202: LD_INT 24
7204: PUSH
7205: LD_INT 1000
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: LIST
7220: PPUSH
7221: CALL_OW 69
7225: PUSH
7226: LD_INT 0
7228: GREATER
7229: IFFALSE 7240
// RaiseSailEvent ( 1 ) else
7231: LD_INT 1
7233: PPUSH
7234: CALL_OW 427
7238: GO 7247
// RaiseSailEvent ( 2 ) ;
7240: LD_INT 2
7242: PPUSH
7243: CALL_OW 427
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) > 0 then
7247: LD_INT 22
7249: PUSH
7250: LD_INT 1
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PUSH
7257: LD_INT 30
7259: PUSH
7260: LD_INT 5
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: PPUSH
7271: CALL_OW 69
7275: PUSH
7276: LD_INT 0
7278: GREATER
7279: IFFALSE 7288
// RaiseSailEvent ( 4 ) ;
7281: LD_INT 4
7283: PPUSH
7284: CALL_OW 427
// if gamma_towers > 0 then
7288: LD_EXP 18
7292: PUSH
7293: LD_INT 0
7295: GREATER
7296: IFFALSE 7305
// RaiseSailEvent ( 5 ) ;
7298: LD_INT 5
7300: PPUSH
7301: CALL_OW 427
// end ;
7305: PPOPN 2
7307: END
// export new_veh ; every 9 9$00 do var chassis , weapon ;
7308: GO 7310
7310: DISABLE
7311: LD_INT 0
7313: PPUSH
7314: PPUSH
// begin enable ;
7315: ENABLE
// if new_veh > 0 then
7316: LD_EXP 19
7320: PUSH
7321: LD_INT 0
7323: GREATER
7324: IFFALSE 7511
// while ( new_veh > 0 ) do
7326: LD_EXP 19
7330: PUSH
7331: LD_INT 0
7333: GREATER
7334: IFFALSE 7511
// begin Wait ( 0 0$01 ) ;
7336: LD_INT 35
7338: PPUSH
7339: CALL_OW 67
// if BuildingStatus ( am_fac ) = bs_idle then
7343: LD_INT 26
7345: PPUSH
7346: CALL_OW 461
7350: PUSH
7351: LD_INT 2
7353: EQUAL
7354: IFFALSE 7509
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ Rand ( 1 , 4 ) ] ;
7356: LD_ADDR_VAR 0 1
7360: PUSH
7361: LD_INT 2
7363: PUSH
7364: LD_INT 3
7366: PUSH
7367: LD_INT 3
7369: PUSH
7370: LD_INT 4
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: PUSH
7379: LD_INT 1
7381: PPUSH
7382: LD_INT 4
7384: PPUSH
7385: CALL_OW 12
7389: ARRAY
7390: ST_TO_ADDR
// if chassis in [ us_medium_wheeled , us_medium_tracked ] then
7391: LD_VAR 0 1
7395: PUSH
7396: LD_INT 2
7398: PUSH
7399: LD_INT 3
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: IN
7406: IFFALSE 7441
// weapon := [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ Rand ( 1 , 3 ) ] else
7408: LD_ADDR_VAR 0 2
7412: PUSH
7413: LD_INT 4
7415: PUSH
7416: LD_INT 5
7418: PUSH
7419: LD_INT 7
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: LIST
7426: PUSH
7427: LD_INT 1
7429: PPUSH
7430: LD_INT 3
7432: PPUSH
7433: CALL_OW 12
7437: ARRAY
7438: ST_TO_ADDR
7439: GO 7472
// weapon := [ us_double_gun , us_rocket_launcher , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ;
7441: LD_ADDR_VAR 0 2
7445: PUSH
7446: LD_INT 5
7448: PUSH
7449: LD_INT 7
7451: PUSH
7452: LD_INT 6
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: LIST
7459: PUSH
7460: LD_INT 1
7462: PPUSH
7463: LD_INT 3
7465: PPUSH
7466: CALL_OW 12
7470: ARRAY
7471: ST_TO_ADDR
// ComConstruct ( am_fac , chassis , engine_combustion , control_remote , weapon ) ;
7472: LD_INT 26
7474: PPUSH
7475: LD_VAR 0 1
7479: PPUSH
7480: LD_INT 1
7482: PPUSH
7483: LD_INT 2
7485: PPUSH
7486: LD_VAR 0 2
7490: PPUSH
7491: CALL_OW 125
// new_veh := new_veh - 1 ;
7495: LD_ADDR_EXP 19
7499: PUSH
7500: LD_EXP 19
7504: PUSH
7505: LD_INT 1
7507: MINUS
7508: ST_TO_ADDR
// end ; end ;
7509: GO 7326
// end ;
7511: PPOPN 2
7513: END
// every 0 0$01 do var v , filter , am_cmeh ;
7514: GO 7516
7516: DISABLE
7517: LD_INT 0
7519: PPUSH
7520: PPUSH
7521: PPUSH
// begin enable ;
7522: ENABLE
// am_cmeh := UnitsInside ( am_ct ) ;
7523: LD_ADDR_VAR 0 3
7527: PUSH
7528: LD_INT 56
7530: PPUSH
7531: CALL_OW 313
7535: ST_TO_ADDR
// filter = FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] ] ] ) ;
7536: LD_ADDR_VAR 0 2
7540: PUSH
7541: LD_INT 22
7543: PUSH
7544: LD_INT 1
7546: PUSH
7547: EMPTY
7548: LIST
7549: LIST
7550: PUSH
7551: LD_INT 33
7553: PUSH
7554: LD_INT 2
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: PUSH
7561: LD_INT 50
7563: PUSH
7564: EMPTY
7565: LIST
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: LIST
7571: PUSH
7572: EMPTY
7573: LIST
7574: PPUSH
7575: CALL_OW 69
7579: ST_TO_ADDR
// if filter > 0 then
7580: LD_VAR 0 2
7584: PUSH
7585: LD_INT 0
7587: GREATER
7588: IFFALSE 7656
// begin for v in filter do
7590: LD_ADDR_VAR 0 1
7594: PUSH
7595: LD_VAR 0 2
7599: PUSH
7600: FOR_IN
7601: IFFALSE 7654
// begin if not IsControledBy ( v ) and IsOk ( v ) then
7603: LD_VAR 0 1
7607: PPUSH
7608: CALL_OW 312
7612: NOT
7613: PUSH
7614: LD_VAR 0 1
7618: PPUSH
7619: CALL_OW 302
7623: AND
7624: IFFALSE 7652
// ComLinkTo ( v , am_cmeh [ Rand ( 1 , 3 ) ] ) ;
7626: LD_VAR 0 1
7630: PPUSH
7631: LD_VAR 0 3
7635: PUSH
7636: LD_INT 1
7638: PPUSH
7639: LD_INT 3
7641: PPUSH
7642: CALL_OW 12
7646: ARRAY
7647: PPUSH
7648: CALL_OW 135
// end ;
7652: GO 7600
7654: POP
7655: POP
// end ; end ;
7656: PPOPN 3
7658: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) = [ 4 , 5 , 7 ] [ dif ] and BuildingStatus ( am_fac ) = bs_idle do var i , un , enemy ;
7659: LD_INT 33
7661: PUSH
7662: LD_INT 2
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: PUSH
7669: LD_INT 3
7671: PUSH
7672: LD_INT 34
7674: PUSH
7675: LD_INT 13
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: PPUSH
7690: CALL_OW 69
7694: PUSH
7695: LD_INT 4
7697: PUSH
7698: LD_INT 5
7700: PUSH
7701: LD_INT 7
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: LIST
7708: PUSH
7709: LD_EXP 1
7713: ARRAY
7714: EQUAL
7715: PUSH
7716: LD_INT 26
7718: PPUSH
7719: CALL_OW 461
7723: PUSH
7724: LD_INT 2
7726: EQUAL
7727: AND
7728: IFFALSE 7939
7730: GO 7732
7732: DISABLE
7733: LD_INT 0
7735: PPUSH
7736: PPUSH
7737: PPUSH
// begin enable ;
7738: ENABLE
// if Sikorski_Ar then
7739: LD_EXP 12
7743: IFFALSE 7820
// SForce := FilterAllUnits ( [ [ f_or , [ f_side , 4 ] , [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ] ] ) else
7745: LD_ADDR_EXP 11
7749: PUSH
7750: LD_INT 2
7752: PUSH
7753: LD_INT 22
7755: PUSH
7756: LD_INT 4
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: PUSH
7763: LD_INT 22
7765: PUSH
7766: LD_INT 1
7768: PUSH
7769: EMPTY
7770: LIST
7771: LIST
7772: PUSH
7773: LD_INT 33
7775: PUSH
7776: LD_INT 2
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: PUSH
7783: LD_INT 3
7785: PUSH
7786: LD_INT 34
7788: PUSH
7789: LD_INT 13
7791: PUSH
7792: EMPTY
7793: LIST
7794: LIST
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: PUSH
7800: EMPTY
7801: LIST
7802: LIST
7803: LIST
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: LIST
7809: PUSH
7810: EMPTY
7811: LIST
7812: PPUSH
7813: CALL_OW 69
7817: ST_TO_ADDR
7818: GO 7861
// SForce := FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) ;
7820: LD_ADDR_EXP 11
7824: PUSH
7825: LD_INT 33
7827: PUSH
7828: LD_INT 2
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: PUSH
7835: LD_INT 3
7837: PUSH
7838: LD_INT 34
7840: PUSH
7841: LD_INT 13
7843: PUSH
7844: EMPTY
7845: LIST
7846: LIST
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: PUSH
7852: EMPTY
7853: LIST
7854: LIST
7855: PPUSH
7856: CALL_OW 69
7860: ST_TO_ADDR
// repeat begin for un in SForce do
7861: LD_ADDR_VAR 0 2
7865: PUSH
7866: LD_EXP 11
7870: PUSH
7871: FOR_IN
7872: IFFALSE 7927
// begin enemy := FilterAllUnits ( [ f_side , 3 ] ) ;
7874: LD_ADDR_VAR 0 3
7878: PUSH
7879: LD_INT 22
7881: PUSH
7882: LD_INT 3
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: PPUSH
7889: CALL_OW 69
7893: ST_TO_ADDR
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
7894: LD_VAR 0 2
7898: PPUSH
7899: LD_VAR 0 3
7903: PPUSH
7904: LD_VAR 0 2
7908: PPUSH
7909: CALL_OW 74
7913: PPUSH
7914: CALL_OW 115
// Wait ( 0 0$01 ) ;
7918: LD_INT 35
7920: PPUSH
7921: CALL_OW 67
// end ;
7925: GO 7871
7927: POP
7928: POP
// end until SForce = 0 ;
7929: LD_EXP 11
7933: PUSH
7934: LD_INT 0
7936: EQUAL
7937: IFFALSE 7861
// end ;
7939: PPOPN 3
7941: END
// export function NewForce ( num ) ; var i , filter , veh , tmp ; begin
7942: LD_INT 0
7944: PPUSH
7945: PPUSH
7946: PPUSH
7947: PPUSH
7948: PPUSH
// tmp := FilterUnitsInArea ( spawnArea , [ ] ) ;
7949: LD_ADDR_VAR 0 6
7953: PUSH
7954: LD_INT 14
7956: PPUSH
7957: EMPTY
7958: PPUSH
7959: CALL_OW 70
7963: ST_TO_ADDR
// if tmp then
7964: LD_VAR 0 6
7968: IFFALSE 8002
// for i in tmp do
7970: LD_ADDR_VAR 0 3
7974: PUSH
7975: LD_VAR 0 6
7979: PUSH
7980: FOR_IN
7981: IFFALSE 8000
// ComMoveXY ( i , 42 , 23 ) ;
7983: LD_VAR 0 3
7987: PPUSH
7988: LD_INT 42
7990: PPUSH
7991: LD_INT 23
7993: PPUSH
7994: CALL_OW 111
7998: GO 7980
8000: POP
8001: POP
// EraseResourceArea ( spawnArea , mat_cans ) ;
8002: LD_INT 14
8004: PPUSH
8005: LD_INT 1
8007: PPUSH
8008: CALL_OW 286
// uc_side := 4 ;
8012: LD_ADDR_OWVAR 20
8016: PUSH
8017: LD_INT 4
8019: ST_TO_ADDR
// uc_nation := 1 ;
8020: LD_ADDR_OWVAR 21
8024: PUSH
8025: LD_INT 1
8027: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
8028: LD_ADDR_OWVAR 37
8032: PUSH
8033: LD_INT 4
8035: ST_TO_ADDR
// vc_control := control_manual ;
8036: LD_ADDR_OWVAR 38
8040: PUSH
8041: LD_INT 1
8043: ST_TO_ADDR
// vc_engine := engine_combustion ;
8044: LD_ADDR_OWVAR 39
8048: PUSH
8049: LD_INT 1
8051: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ dif ] ;
8052: LD_ADDR_OWVAR 40
8056: PUSH
8057: LD_INT 4
8059: PUSH
8060: LD_INT 5
8062: PUSH
8063: LD_INT 7
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: LIST
8070: PUSH
8071: LD_EXP 1
8075: ARRAY
8076: ST_TO_ADDR
// veh := CreateVehicle ;
8077: LD_ADDR_VAR 0 5
8081: PUSH
8082: CALL_OW 45
8086: ST_TO_ADDR
// PlaceUnitArea ( veh , am_main_spawn , false ) ;
8087: LD_VAR 0 5
8091: PPUSH
8092: LD_INT 2
8094: PPUSH
8095: LD_INT 0
8097: PPUSH
8098: CALL_OW 49
// PlaceHumanInUnit ( sikorski , veh ) ;
8102: LD_EXP 9
8106: PPUSH
8107: LD_VAR 0 5
8111: PPUSH
8112: CALL_OW 52
// SetMark ( veh , 1 ) ;
8116: LD_VAR 0 5
8120: PPUSH
8121: LD_INT 1
8123: PPUSH
8124: CALL_OW 242
// while ( num > 0 ) do
8128: LD_VAR 0 1
8132: PUSH
8133: LD_INT 0
8135: GREATER
8136: IFFALSE 8303
// begin CreateVehicleWithDriver ( [ us_medium_tracked , us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ Rand ( dif , 4 ) ] , engine_combustion , [ us_gatling_gun , us_double_gun , us_double_gun , us_rocket_launcher ] [ Rand ( 1 , dif + 1 ) ] , am_sik , 2 , [ 5 , 6 , 7 ] [ dif ] ) ;
8138: LD_INT 3
8140: PUSH
8141: LD_INT 3
8143: PUSH
8144: LD_INT 3
8146: PUSH
8147: LD_INT 4
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: PUSH
8156: LD_EXP 1
8160: PPUSH
8161: LD_INT 4
8163: PPUSH
8164: CALL_OW 12
8168: ARRAY
8169: PPUSH
8170: LD_INT 1
8172: PPUSH
8173: LD_INT 4
8175: PUSH
8176: LD_INT 5
8178: PUSH
8179: LD_INT 5
8181: PUSH
8182: LD_INT 7
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: PUSH
8191: LD_INT 1
8193: PPUSH
8194: LD_EXP 1
8198: PUSH
8199: LD_INT 1
8201: PLUS
8202: PPUSH
8203: CALL_OW 12
8207: ARRAY
8208: PPUSH
8209: LD_INT 11
8211: PPUSH
8212: LD_INT 2
8214: PPUSH
8215: LD_INT 5
8217: PUSH
8218: LD_INT 6
8220: PUSH
8221: LD_INT 7
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: LIST
8228: PUSH
8229: LD_EXP 1
8233: ARRAY
8234: PPUSH
8235: CALL 1297 0 6
// filter := FilterAllUnits ( [ f_side , 4 ] ) ;
8239: LD_ADDR_VAR 0 4
8243: PUSH
8244: LD_INT 22
8246: PUSH
8247: LD_INT 4
8249: PUSH
8250: EMPTY
8251: LIST
8252: LIST
8253: PPUSH
8254: CALL_OW 69
8258: ST_TO_ADDR
// ComMoveXY ( filter [ filter ] , 36 , 18 ) ;
8259: LD_VAR 0 4
8263: PUSH
8264: LD_VAR 0 4
8268: ARRAY
8269: PPUSH
8270: LD_INT 36
8272: PPUSH
8273: LD_INT 18
8275: PPUSH
8276: CALL_OW 111
// Wait ( 0 0$02 ) ;
8280: LD_INT 70
8282: PPUSH
8283: CALL_OW 67
// num := num - 1 ;
8287: LD_ADDR_VAR 0 1
8291: PUSH
8292: LD_VAR 0 1
8296: PUSH
8297: LD_INT 1
8299: MINUS
8300: ST_TO_ADDR
// end ;
8301: GO 8128
// end ;
8303: LD_VAR 0 2
8307: RET
// every 0 0$03 trigger patrol > 0 do var i ;
8308: LD_EXP 17
8312: PUSH
8313: LD_INT 0
8315: GREATER
8316: IFFALSE 8585
8318: GO 8320
8320: DISABLE
8321: LD_INT 0
8323: PPUSH
// begin enable ;
8324: ENABLE
// for i = 1 to patrol do
8325: LD_ADDR_VAR 0 1
8329: PUSH
8330: DOUBLE
8331: LD_INT 1
8333: DEC
8334: ST_TO_ADDR
8335: LD_EXP 17
8339: PUSH
8340: FOR_TO
8341: IFFALSE 8583
// begin if patrol [ i ] and IsLive ( patrol [ i ] ) and not HasTask ( patrol [ i ] ) then
8343: LD_EXP 17
8347: PUSH
8348: LD_VAR 0 1
8352: ARRAY
8353: PUSH
8354: LD_EXP 17
8358: PUSH
8359: LD_VAR 0 1
8363: ARRAY
8364: PPUSH
8365: CALL_OW 300
8369: AND
8370: PUSH
8371: LD_EXP 17
8375: PUSH
8376: LD_VAR 0 1
8380: ARRAY
8381: PPUSH
8382: CALL_OW 314
8386: NOT
8387: AND
8388: IFFALSE 8538
// case i of 1 :
8390: LD_VAR 0 1
8394: PUSH
8395: LD_INT 1
8397: DOUBLE
8398: EQUAL
8399: IFTRUE 8403
8401: GO 8466
8403: POP
// begin ComMoveXY ( patrol [ i ] , 53 , 91 ) ;
8404: LD_EXP 17
8408: PUSH
8409: LD_VAR 0 1
8413: ARRAY
8414: PPUSH
8415: LD_INT 53
8417: PPUSH
8418: LD_INT 91
8420: PPUSH
8421: CALL_OW 111
// AddComWait ( patrol [ i ] , 0 0$07 ) ;
8425: LD_EXP 17
8429: PUSH
8430: LD_VAR 0 1
8434: ARRAY
8435: PPUSH
8436: LD_INT 245
8438: PPUSH
8439: CALL_OW 202
// AddComMoveXY ( patrol [ i ] , 24 , 26 ) ;
8443: LD_EXP 17
8447: PUSH
8448: LD_VAR 0 1
8452: ARRAY
8453: PPUSH
8454: LD_INT 24
8456: PPUSH
8457: LD_INT 26
8459: PPUSH
8460: CALL_OW 171
// end ; 2 :
8464: GO 8538
8466: LD_INT 2
8468: DOUBLE
8469: EQUAL
8470: IFTRUE 8474
8472: GO 8537
8474: POP
// begin ComMoveXY ( patrol [ i ] , 83 , 57 ) ;
8475: LD_EXP 17
8479: PUSH
8480: LD_VAR 0 1
8484: ARRAY
8485: PPUSH
8486: LD_INT 83
8488: PPUSH
8489: LD_INT 57
8491: PPUSH
8492: CALL_OW 111
// AddComWait ( patrol [ i ] , 0 0$07 ) ;
8496: LD_EXP 17
8500: PUSH
8501: LD_VAR 0 1
8505: ARRAY
8506: PPUSH
8507: LD_INT 245
8509: PPUSH
8510: CALL_OW 202
// AddComMoveXY ( patrol [ i ] , 47 , 53 ) ;
8514: LD_EXP 17
8518: PUSH
8519: LD_VAR 0 1
8523: ARRAY
8524: PPUSH
8525: LD_INT 47
8527: PPUSH
8528: LD_INT 53
8530: PPUSH
8531: CALL_OW 171
// end ; end ;
8535: GO 8538
8537: POP
// if GetLives ( patrol [ i ] ) < 1000 then
8538: LD_EXP 17
8542: PUSH
8543: LD_VAR 0 1
8547: ARRAY
8548: PPUSH
8549: CALL_OW 256
8553: PUSH
8554: LD_INT 1000
8556: LESS
8557: IFFALSE 8581
// patrol := patrol diff patrol [ i ] ;
8559: LD_ADDR_EXP 17
8563: PUSH
8564: LD_EXP 17
8568: PUSH
8569: LD_EXP 17
8573: PUSH
8574: LD_VAR 0 1
8578: ARRAY
8579: DIFF
8580: ST_TO_ADDR
// end ;
8581: GO 8340
8583: POP
8584: POP
// end ;
8585: PPOPN 1
8587: END
// every 0 0$10 do
8588: GO 8590
8590: DISABLE
// begin Wait ( [ 20 20$00 , 18 18$00 , 16 16$00 ] [ dif ] ) ;
8591: LD_INT 42000
8593: PUSH
8594: LD_INT 37800
8596: PUSH
8597: LD_INT 33600
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: LIST
8604: PUSH
8605: LD_EXP 1
8609: ARRAY
8610: PPUSH
8611: CALL_OW 67
// if not contact_am then
8615: LD_EXP 16
8619: NOT
8620: IFFALSE 8630
// contact_am := true ;
8622: LD_ADDR_EXP 16
8626: PUSH
8627: LD_INT 1
8629: ST_TO_ADDR
// end ; end_of_file
8630: END
// export event_rocket , event_comp , comp_tested , sikorski_run ; export function Action ; begin
8631: LD_INT 0
8633: PPUSH
// comp_tested := false ;
8634: LD_ADDR_EXP 22
8638: PUSH
8639: LD_INT 0
8641: ST_TO_ADDR
// sikorski_run := false ;
8642: LD_ADDR_EXP 23
8646: PUSH
8647: LD_INT 0
8649: ST_TO_ADDR
// InGameOn ;
8650: CALL_OW 8
// CenterNowOnXY ( 5 , 4 ) ;
8654: LD_INT 5
8656: PPUSH
8657: LD_INT 4
8659: PPUSH
8660: CALL_OW 86
// wait ( 0 0$2 ) ;
8664: LD_INT 70
8666: PPUSH
8667: CALL_OW 67
// CenterOnUnits ( commander ) ;
8671: LD_EXP 3
8675: PPUSH
8676: CALL_OW 85
// wait ( 0 0$01 ) ;
8680: LD_INT 35
8682: PPUSH
8683: CALL_OW 67
// SayRadio ( popov , Dpop1 ) ;
8687: LD_EXP 2
8691: PPUSH
8692: LD_STRING Dpop1
8694: PPUSH
8695: CALL_OW 94
// Say ( commander , Dcomm1 ) ;
8699: LD_EXP 3
8703: PPUSH
8704: LD_STRING Dcomm1
8706: PPUSH
8707: CALL_OW 88
// SayRadio ( popov , Dpop2 ) ;
8711: LD_EXP 2
8715: PPUSH
8716: LD_STRING Dpop2
8718: PPUSH
8719: CALL_OW 94
// Say ( commander , Dcomm2 ) ;
8723: LD_EXP 3
8727: PPUSH
8728: LD_STRING Dcomm2
8730: PPUSH
8731: CALL_OW 88
// InGameOff ;
8735: CALL_OW 9
// ChangeMissionObjectives ( T1 ) ;
8739: LD_STRING T1
8741: PPUSH
8742: CALL_OW 337
// end ;
8746: LD_VAR 0 1
8750: RET
// every 0 0$01 trigger timer > 2 2$01 do
8751: LD_EXP 24
8755: PUSH
8756: LD_INT 4235
8758: GREATER
8759: IFFALSE 8776
8761: GO 8763
8763: DISABLE
// begin SayRadio ( kapral , DKap1 ) ;
8764: LD_EXP 5
8768: PPUSH
8769: LD_STRING DKap1
8771: PPUSH
8772: CALL_OW 94
// end ;
8776: END
// every 0 0$01 trigger timer > [ 22 22$00 , 25 25$00 , 30 30$00 ] [ dif ] do var i ;
8777: LD_EXP 24
8781: PUSH
8782: LD_INT 46200
8784: PUSH
8785: LD_INT 52500
8787: PUSH
8788: LD_INT 63000
8790: PUSH
8791: EMPTY
8792: LIST
8793: LIST
8794: LIST
8795: PUSH
8796: LD_EXP 1
8800: ARRAY
8801: GREATER
8802: IFFALSE 9169
8804: GO 8806
8806: DISABLE
8807: LD_INT 0
8809: PPUSH
// begin SayRadio ( kapral , DKap2 ) ;
8810: LD_EXP 5
8814: PPUSH
8815: LD_STRING DKap2
8817: PPUSH
8818: CALL_OW 94
// Wait ( 0 0$0.3 ) ;
8822: LD_INT 10
8824: PPUSH
8825: CALL_OW 67
// Say ( commander , Dcommk ) ;
8829: LD_EXP 3
8833: PPUSH
8834: LD_STRING Dcommk
8836: PPUSH
8837: CALL_OW 88
// Wait ( 0 0$44 ) ;
8841: LD_INT 1540
8843: PPUSH
8844: CALL_OW 67
// PlaceUnitArea ( kapral , am_west_spawn , false ) ;
8848: LD_EXP 5
8852: PPUSH
8853: LD_INT 3
8855: PPUSH
8856: LD_INT 0
8858: PPUSH
8859: CALL_OW 49
// CenterNowOnUnits ( kapral ) ;
8863: LD_EXP 5
8867: PPUSH
8868: CALL_OW 87
// Wait ( 0 0$10 ) ;
8872: LD_INT 350
8874: PPUSH
8875: CALL_OW 67
// NewForce ( [ 6 , 7 , 8 ] [ dif ] ) ;
8879: LD_INT 6
8881: PUSH
8882: LD_INT 7
8884: PUSH
8885: LD_INT 8
8887: PUSH
8888: EMPTY
8889: LIST
8890: LIST
8891: LIST
8892: PUSH
8893: LD_EXP 1
8897: ARRAY
8898: PPUSH
8899: CALL 7942 0 1
// Wait ( 2 2$00 ) ;
8903: LD_INT 4200
8905: PPUSH
8906: CALL_OW 67
// while ( FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) < 3 ) do
8910: LD_INT 33
8912: PUSH
8913: LD_INT 2
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PUSH
8920: LD_INT 3
8922: PUSH
8923: LD_INT 34
8925: PUSH
8926: LD_INT 13
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: PPUSH
8941: CALL_OW 69
8945: PUSH
8946: LD_INT 3
8948: LESS
8949: IFFALSE 8960
// Wait ( 0 0$01 ) ;
8951: LD_INT 35
8953: PPUSH
8954: CALL_OW 67
8958: GO 8910
// uc_side := 4 ;
8960: LD_ADDR_OWVAR 20
8964: PUSH
8965: LD_INT 4
8967: ST_TO_ADDR
// uc_nation := 1 ;
8968: LD_ADDR_OWVAR 21
8972: PUSH
8973: LD_INT 1
8975: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ dif ] do
8976: LD_ADDR_VAR 0 1
8980: PUSH
8981: DOUBLE
8982: LD_INT 1
8984: DEC
8985: ST_TO_ADDR
8986: LD_INT 4
8988: PUSH
8989: LD_INT 5
8991: PUSH
8992: LD_INT 6
8994: PUSH
8995: EMPTY
8996: LIST
8997: LIST
8998: LIST
8999: PUSH
9000: LD_EXP 1
9004: ARRAY
9005: PUSH
9006: FOR_TO
9007: IFFALSE 9049
// PlaceUnitArea ( CreateHumanWithClass ( 1 , [ 5 , 6 , 7 ] [ dif ] ) , am_east_spawn , false ) ;
9009: LD_INT 1
9011: PPUSH
9012: LD_INT 5
9014: PUSH
9015: LD_INT 6
9017: PUSH
9018: LD_INT 7
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: LIST
9025: PUSH
9026: LD_EXP 1
9030: ARRAY
9031: PPUSH
9032: CALL 734 0 2
9036: PPUSH
9037: LD_INT 4
9039: PPUSH
9040: LD_INT 0
9042: PPUSH
9043: CALL_OW 49
9047: GO 9006
9049: POP
9050: POP
// sikorski_ar := true ;
9051: LD_ADDR_EXP 12
9055: PUSH
9056: LD_INT 1
9058: ST_TO_ADDR
// SayRadio ( sikorski , DSik1 ) ;
9059: LD_EXP 9
9063: PPUSH
9064: LD_STRING DSik1
9066: PPUSH
9067: CALL_OW 94
// Wait ( 0 0$30 ) ;
9071: LD_INT 1050
9073: PPUSH
9074: CALL_OW 67
// uc_side := 4 ;
9078: LD_ADDR_OWVAR 20
9082: PUSH
9083: LD_INT 4
9085: ST_TO_ADDR
// uc_nation := 1 ;
9086: LD_ADDR_OWVAR 21
9090: PUSH
9091: LD_INT 1
9093: ST_TO_ADDR
// for i = 1 to [ 3 , 4 , 4 ] [ dif ] do
9094: LD_ADDR_VAR 0 1
9098: PUSH
9099: DOUBLE
9100: LD_INT 1
9102: DEC
9103: ST_TO_ADDR
9104: LD_INT 3
9106: PUSH
9107: LD_INT 4
9109: PUSH
9110: LD_INT 4
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: LIST
9117: PUSH
9118: LD_EXP 1
9122: ARRAY
9123: PUSH
9124: FOR_TO
9125: IFFALSE 9167
// PlaceUnitArea ( CreateHumanWithClass ( 1 , [ 5 , 6 , 7 ] [ dif ] ) , am_south_spawn , false ) ;
9127: LD_INT 1
9129: PPUSH
9130: LD_INT 5
9132: PUSH
9133: LD_INT 6
9135: PUSH
9136: LD_INT 7
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: LIST
9143: PUSH
9144: LD_EXP 1
9148: ARRAY
9149: PPUSH
9150: CALL 734 0 2
9154: PPUSH
9155: LD_INT 13
9157: PPUSH
9158: LD_INT 0
9160: PPUSH
9161: CALL_OW 49
9165: GO 9124
9167: POP
9168: POP
// end ;
9169: PPOPN 1
9171: END
// every 0 0$0.1 trigger GetLives ( sikorski ) < 650 do
9172: LD_EXP 9
9176: PPUSH
9177: CALL_OW 256
9181: PUSH
9182: LD_INT 650
9184: LESS
9185: IFFALSE 9267
9187: GO 9189
9189: DISABLE
// begin Say ( sikorski , DSik2 ) ;
9190: LD_EXP 9
9194: PPUSH
9195: LD_STRING DSik2
9197: PPUSH
9198: CALL_OW 88
// while ( IsLive ( sikorski ) ) do
9202: LD_EXP 9
9206: PPUSH
9207: CALL_OW 300
9211: IFFALSE 9267
// begin ComMoveToArea ( sikorski , am_main_spawn ) ;
9213: LD_EXP 9
9217: PPUSH
9218: LD_INT 2
9220: PPUSH
9221: CALL_OW 113
// Wait ( 0 0$01 ) ;
9225: LD_INT 35
9227: PPUSH
9228: CALL_OW 67
// if IsInArea ( sikorski , am_main_spawn ) then
9232: LD_EXP 9
9236: PPUSH
9237: LD_INT 2
9239: PPUSH
9240: CALL_OW 308
9244: IFFALSE 9265
// begin RemoveUnit ( sikorski ) ;
9246: LD_EXP 9
9250: PPUSH
9251: CALL_OW 64
// break ;
9255: GO 9267
// sikorski_run := true ;
9257: LD_ADDR_EXP 23
9261: PUSH
9262: LD_INT 1
9264: ST_TO_ADDR
// end ; end ;
9265: GO 9202
// end ;
9267: END
// every 0 0$0.1 trigger GetLives ( sikorski ) < 1000 do
9268: LD_EXP 9
9272: PPUSH
9273: CALL_OW 256
9277: PUSH
9278: LD_INT 1000
9280: LESS
9281: IFFALSE 9298
9283: GO 9285
9285: DISABLE
// Say ( sikorski , DSkik3 ) ; end_of_file
9286: LD_EXP 9
9290: PPUSH
9291: LD_STRING DSkik3
9293: PPUSH
9294: CALL_OW 88
9298: END
// every 1 1$45 + 0 0$15 do
9299: GO 9301
9301: DISABLE
// begin enable ;
9302: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
9303: LD_INT 1
9305: PPUSH
9306: LD_INT 5
9308: PPUSH
9309: CALL_OW 12
9313: PPUSH
9314: LD_INT 8
9316: PPUSH
9317: LD_INT 1
9319: PPUSH
9320: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$37 ) ) ;
9324: LD_INT 350
9326: PPUSH
9327: LD_INT 1295
9329: PPUSH
9330: CALL_OW 12
9334: PPUSH
9335: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
9339: LD_INT 1
9341: PPUSH
9342: LD_INT 5
9344: PPUSH
9345: CALL_OW 12
9349: PPUSH
9350: LD_INT 1
9352: PPUSH
9353: CALL_OW 57
// Wait ( Rand ( 0 0$10 , 0 0$30 ) ) ;
9357: LD_INT 350
9359: PPUSH
9360: LD_INT 1050
9362: PPUSH
9363: CALL_OW 12
9367: PPUSH
9368: CALL_OW 67
// if timer <= [ 12 12$00 , 11 11$00 , 10 10$00 ] [ dif ] then
9372: LD_EXP 24
9376: PUSH
9377: LD_INT 25200
9379: PUSH
9380: LD_INT 23100
9382: PUSH
9383: LD_INT 21000
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: LIST
9390: PUSH
9391: LD_EXP 1
9395: ARRAY
9396: LESSEQUAL
9397: IFFALSE 9420
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
9399: LD_INT 1
9401: PPUSH
9402: LD_INT 5
9404: PPUSH
9405: CALL_OW 12
9409: PPUSH
9410: LD_INT 8
9412: PPUSH
9413: LD_INT 1
9415: PPUSH
9416: CALL_OW 55
// end ;
9420: END
// export timer ; every 1 do
9421: GO 9423
9423: DISABLE
// timer := 0 0$00 ;
9424: LD_ADDR_EXP 24
9428: PUSH
9429: LD_INT 0
9431: ST_TO_ADDR
9432: END
// every 0 0$01 do
9433: GO 9435
9435: DISABLE
// begin enable ;
9436: ENABLE
// Display_Strings := [ #tick , timer ] ;
9437: LD_ADDR_OWVAR 47
9441: PUSH
9442: LD_STRING #tick
9444: PUSH
9445: LD_EXP 24
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: ST_TO_ADDR
// timer := timer + 0 0$01 ;
9454: LD_ADDR_EXP 24
9458: PUSH
9459: LD_EXP 24
9463: PUSH
9464: LD_INT 35
9466: PLUS
9467: ST_TO_ADDR
// end ; end_of_file end_of_file
9468: END
// export globalGameSaveCounter ; every 0 0$1 do
9469: GO 9471
9471: DISABLE
// begin enable ;
9472: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
9473: LD_STRING updateTimer(
9475: PUSH
9476: LD_OWVAR 1
9480: STR
9481: PUSH
9482: LD_STRING );
9484: STR
9485: PPUSH
9486: CALL_OW 559
// end ;
9490: END
// every 0 0$1 do
9491: GO 9493
9493: DISABLE
// begin globalGameSaveCounter := 0 ;
9494: LD_ADDR_EXP 25
9498: PUSH
9499: LD_INT 0
9501: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
9502: LD_STRING setGameSaveCounter(0)
9504: PPUSH
9505: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
9509: LD_STRING initStreamRollete();
9511: PPUSH
9512: CALL_OW 559
// InitStreamMode ;
9516: CALL 10842 0 0
// DefineStreamItems ( false ) ;
9520: LD_INT 0
9522: PPUSH
9523: CALL 11306 0 1
// end ;
9527: END
// export function SOS_MapStart ( ) ; begin
9528: LD_INT 0
9530: PPUSH
// if streamModeActive then
9531: LD_EXP 26
9535: IFFALSE 9544
// DefineStreamItems ( true ) ;
9537: LD_INT 1
9539: PPUSH
9540: CALL 11306 0 1
// UpdateLuaVariables ( ) ;
9544: CALL 9561 0 0
// UpdateFactoryWaypoints ( ) ;
9548: CALL 24175 0 0
// UpdateWarehouseGatheringPoints ( ) ;
9552: CALL 24432 0 0
// end ;
9556: LD_VAR 0 1
9560: RET
// function UpdateLuaVariables ( ) ; begin
9561: LD_INT 0
9563: PPUSH
// if globalGameSaveCounter then
9564: LD_EXP 25
9568: IFFALSE 9602
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
9570: LD_ADDR_EXP 25
9574: PUSH
9575: LD_EXP 25
9579: PPUSH
9580: CALL 69062 0 1
9584: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
9585: LD_STRING setGameSaveCounter(
9587: PUSH
9588: LD_EXP 25
9592: STR
9593: PUSH
9594: LD_STRING )
9596: STR
9597: PPUSH
9598: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
9602: LD_STRING setGameDifficulty(
9604: PUSH
9605: LD_OWVAR 67
9609: STR
9610: PUSH
9611: LD_STRING )
9613: STR
9614: PPUSH
9615: CALL_OW 559
// end ;
9619: LD_VAR 0 1
9623: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9624: LD_INT 0
9626: PPUSH
// if p2 = stream_mode then
9627: LD_VAR 0 2
9631: PUSH
9632: LD_INT 100
9634: EQUAL
9635: IFFALSE 10638
// begin if not StreamModeActive then
9637: LD_EXP 26
9641: NOT
9642: IFFALSE 9652
// StreamModeActive := true ;
9644: LD_ADDR_EXP 26
9648: PUSH
9649: LD_INT 1
9651: ST_TO_ADDR
// if p3 = 0 then
9652: LD_VAR 0 3
9656: PUSH
9657: LD_INT 0
9659: EQUAL
9660: IFFALSE 9666
// InitStreamMode ;
9662: CALL 10842 0 0
// if p3 = 1 then
9666: LD_VAR 0 3
9670: PUSH
9671: LD_INT 1
9673: EQUAL
9674: IFFALSE 9684
// sRocket := true ;
9676: LD_ADDR_EXP 31
9680: PUSH
9681: LD_INT 1
9683: ST_TO_ADDR
// if p3 = 2 then
9684: LD_VAR 0 3
9688: PUSH
9689: LD_INT 2
9691: EQUAL
9692: IFFALSE 9702
// sSpeed := true ;
9694: LD_ADDR_EXP 30
9698: PUSH
9699: LD_INT 1
9701: ST_TO_ADDR
// if p3 = 3 then
9702: LD_VAR 0 3
9706: PUSH
9707: LD_INT 3
9709: EQUAL
9710: IFFALSE 9720
// sEngine := true ;
9712: LD_ADDR_EXP 32
9716: PUSH
9717: LD_INT 1
9719: ST_TO_ADDR
// if p3 = 4 then
9720: LD_VAR 0 3
9724: PUSH
9725: LD_INT 4
9727: EQUAL
9728: IFFALSE 9738
// sSpec := true ;
9730: LD_ADDR_EXP 29
9734: PUSH
9735: LD_INT 1
9737: ST_TO_ADDR
// if p3 = 5 then
9738: LD_VAR 0 3
9742: PUSH
9743: LD_INT 5
9745: EQUAL
9746: IFFALSE 9756
// sLevel := true ;
9748: LD_ADDR_EXP 33
9752: PUSH
9753: LD_INT 1
9755: ST_TO_ADDR
// if p3 = 6 then
9756: LD_VAR 0 3
9760: PUSH
9761: LD_INT 6
9763: EQUAL
9764: IFFALSE 9774
// sArmoury := true ;
9766: LD_ADDR_EXP 34
9770: PUSH
9771: LD_INT 1
9773: ST_TO_ADDR
// if p3 = 7 then
9774: LD_VAR 0 3
9778: PUSH
9779: LD_INT 7
9781: EQUAL
9782: IFFALSE 9792
// sRadar := true ;
9784: LD_ADDR_EXP 35
9788: PUSH
9789: LD_INT 1
9791: ST_TO_ADDR
// if p3 = 8 then
9792: LD_VAR 0 3
9796: PUSH
9797: LD_INT 8
9799: EQUAL
9800: IFFALSE 9810
// sBunker := true ;
9802: LD_ADDR_EXP 36
9806: PUSH
9807: LD_INT 1
9809: ST_TO_ADDR
// if p3 = 9 then
9810: LD_VAR 0 3
9814: PUSH
9815: LD_INT 9
9817: EQUAL
9818: IFFALSE 9828
// sHack := true ;
9820: LD_ADDR_EXP 37
9824: PUSH
9825: LD_INT 1
9827: ST_TO_ADDR
// if p3 = 10 then
9828: LD_VAR 0 3
9832: PUSH
9833: LD_INT 10
9835: EQUAL
9836: IFFALSE 9846
// sFire := true ;
9838: LD_ADDR_EXP 38
9842: PUSH
9843: LD_INT 1
9845: ST_TO_ADDR
// if p3 = 11 then
9846: LD_VAR 0 3
9850: PUSH
9851: LD_INT 11
9853: EQUAL
9854: IFFALSE 9864
// sRefresh := true ;
9856: LD_ADDR_EXP 39
9860: PUSH
9861: LD_INT 1
9863: ST_TO_ADDR
// if p3 = 12 then
9864: LD_VAR 0 3
9868: PUSH
9869: LD_INT 12
9871: EQUAL
9872: IFFALSE 9882
// sExp := true ;
9874: LD_ADDR_EXP 40
9878: PUSH
9879: LD_INT 1
9881: ST_TO_ADDR
// if p3 = 13 then
9882: LD_VAR 0 3
9886: PUSH
9887: LD_INT 13
9889: EQUAL
9890: IFFALSE 9900
// sDepot := true ;
9892: LD_ADDR_EXP 41
9896: PUSH
9897: LD_INT 1
9899: ST_TO_ADDR
// if p3 = 14 then
9900: LD_VAR 0 3
9904: PUSH
9905: LD_INT 14
9907: EQUAL
9908: IFFALSE 9918
// sFlag := true ;
9910: LD_ADDR_EXP 42
9914: PUSH
9915: LD_INT 1
9917: ST_TO_ADDR
// if p3 = 15 then
9918: LD_VAR 0 3
9922: PUSH
9923: LD_INT 15
9925: EQUAL
9926: IFFALSE 9936
// sKamikadze := true ;
9928: LD_ADDR_EXP 50
9932: PUSH
9933: LD_INT 1
9935: ST_TO_ADDR
// if p3 = 16 then
9936: LD_VAR 0 3
9940: PUSH
9941: LD_INT 16
9943: EQUAL
9944: IFFALSE 9954
// sTroll := true ;
9946: LD_ADDR_EXP 51
9950: PUSH
9951: LD_INT 1
9953: ST_TO_ADDR
// if p3 = 17 then
9954: LD_VAR 0 3
9958: PUSH
9959: LD_INT 17
9961: EQUAL
9962: IFFALSE 9972
// sSlow := true ;
9964: LD_ADDR_EXP 52
9968: PUSH
9969: LD_INT 1
9971: ST_TO_ADDR
// if p3 = 18 then
9972: LD_VAR 0 3
9976: PUSH
9977: LD_INT 18
9979: EQUAL
9980: IFFALSE 9990
// sLack := true ;
9982: LD_ADDR_EXP 53
9986: PUSH
9987: LD_INT 1
9989: ST_TO_ADDR
// if p3 = 19 then
9990: LD_VAR 0 3
9994: PUSH
9995: LD_INT 19
9997: EQUAL
9998: IFFALSE 10008
// sTank := true ;
10000: LD_ADDR_EXP 55
10004: PUSH
10005: LD_INT 1
10007: ST_TO_ADDR
// if p3 = 20 then
10008: LD_VAR 0 3
10012: PUSH
10013: LD_INT 20
10015: EQUAL
10016: IFFALSE 10026
// sRemote := true ;
10018: LD_ADDR_EXP 56
10022: PUSH
10023: LD_INT 1
10025: ST_TO_ADDR
// if p3 = 21 then
10026: LD_VAR 0 3
10030: PUSH
10031: LD_INT 21
10033: EQUAL
10034: IFFALSE 10044
// sPowell := true ;
10036: LD_ADDR_EXP 57
10040: PUSH
10041: LD_INT 1
10043: ST_TO_ADDR
// if p3 = 22 then
10044: LD_VAR 0 3
10048: PUSH
10049: LD_INT 22
10051: EQUAL
10052: IFFALSE 10062
// sTeleport := true ;
10054: LD_ADDR_EXP 60
10058: PUSH
10059: LD_INT 1
10061: ST_TO_ADDR
// if p3 = 23 then
10062: LD_VAR 0 3
10066: PUSH
10067: LD_INT 23
10069: EQUAL
10070: IFFALSE 10080
// sOilTower := true ;
10072: LD_ADDR_EXP 62
10076: PUSH
10077: LD_INT 1
10079: ST_TO_ADDR
// if p3 = 24 then
10080: LD_VAR 0 3
10084: PUSH
10085: LD_INT 24
10087: EQUAL
10088: IFFALSE 10098
// sShovel := true ;
10090: LD_ADDR_EXP 63
10094: PUSH
10095: LD_INT 1
10097: ST_TO_ADDR
// if p3 = 25 then
10098: LD_VAR 0 3
10102: PUSH
10103: LD_INT 25
10105: EQUAL
10106: IFFALSE 10116
// sSheik := true ;
10108: LD_ADDR_EXP 64
10112: PUSH
10113: LD_INT 1
10115: ST_TO_ADDR
// if p3 = 26 then
10116: LD_VAR 0 3
10120: PUSH
10121: LD_INT 26
10123: EQUAL
10124: IFFALSE 10134
// sEarthquake := true ;
10126: LD_ADDR_EXP 66
10130: PUSH
10131: LD_INT 1
10133: ST_TO_ADDR
// if p3 = 27 then
10134: LD_VAR 0 3
10138: PUSH
10139: LD_INT 27
10141: EQUAL
10142: IFFALSE 10152
// sAI := true ;
10144: LD_ADDR_EXP 67
10148: PUSH
10149: LD_INT 1
10151: ST_TO_ADDR
// if p3 = 28 then
10152: LD_VAR 0 3
10156: PUSH
10157: LD_INT 28
10159: EQUAL
10160: IFFALSE 10170
// sCargo := true ;
10162: LD_ADDR_EXP 70
10166: PUSH
10167: LD_INT 1
10169: ST_TO_ADDR
// if p3 = 29 then
10170: LD_VAR 0 3
10174: PUSH
10175: LD_INT 29
10177: EQUAL
10178: IFFALSE 10188
// sDLaser := true ;
10180: LD_ADDR_EXP 71
10184: PUSH
10185: LD_INT 1
10187: ST_TO_ADDR
// if p3 = 30 then
10188: LD_VAR 0 3
10192: PUSH
10193: LD_INT 30
10195: EQUAL
10196: IFFALSE 10206
// sExchange := true ;
10198: LD_ADDR_EXP 72
10202: PUSH
10203: LD_INT 1
10205: ST_TO_ADDR
// if p3 = 31 then
10206: LD_VAR 0 3
10210: PUSH
10211: LD_INT 31
10213: EQUAL
10214: IFFALSE 10224
// sFac := true ;
10216: LD_ADDR_EXP 73
10220: PUSH
10221: LD_INT 1
10223: ST_TO_ADDR
// if p3 = 32 then
10224: LD_VAR 0 3
10228: PUSH
10229: LD_INT 32
10231: EQUAL
10232: IFFALSE 10242
// sPower := true ;
10234: LD_ADDR_EXP 74
10238: PUSH
10239: LD_INT 1
10241: ST_TO_ADDR
// if p3 = 33 then
10242: LD_VAR 0 3
10246: PUSH
10247: LD_INT 33
10249: EQUAL
10250: IFFALSE 10260
// sRandom := true ;
10252: LD_ADDR_EXP 75
10256: PUSH
10257: LD_INT 1
10259: ST_TO_ADDR
// if p3 = 34 then
10260: LD_VAR 0 3
10264: PUSH
10265: LD_INT 34
10267: EQUAL
10268: IFFALSE 10278
// sShield := true ;
10270: LD_ADDR_EXP 76
10274: PUSH
10275: LD_INT 1
10277: ST_TO_ADDR
// if p3 = 35 then
10278: LD_VAR 0 3
10282: PUSH
10283: LD_INT 35
10285: EQUAL
10286: IFFALSE 10296
// sTime := true ;
10288: LD_ADDR_EXP 77
10292: PUSH
10293: LD_INT 1
10295: ST_TO_ADDR
// if p3 = 36 then
10296: LD_VAR 0 3
10300: PUSH
10301: LD_INT 36
10303: EQUAL
10304: IFFALSE 10314
// sTools := true ;
10306: LD_ADDR_EXP 78
10310: PUSH
10311: LD_INT 1
10313: ST_TO_ADDR
// if p3 = 101 then
10314: LD_VAR 0 3
10318: PUSH
10319: LD_INT 101
10321: EQUAL
10322: IFFALSE 10332
// sSold := true ;
10324: LD_ADDR_EXP 43
10328: PUSH
10329: LD_INT 1
10331: ST_TO_ADDR
// if p3 = 102 then
10332: LD_VAR 0 3
10336: PUSH
10337: LD_INT 102
10339: EQUAL
10340: IFFALSE 10350
// sDiff := true ;
10342: LD_ADDR_EXP 44
10346: PUSH
10347: LD_INT 1
10349: ST_TO_ADDR
// if p3 = 103 then
10350: LD_VAR 0 3
10354: PUSH
10355: LD_INT 103
10357: EQUAL
10358: IFFALSE 10368
// sFog := true ;
10360: LD_ADDR_EXP 47
10364: PUSH
10365: LD_INT 1
10367: ST_TO_ADDR
// if p3 = 104 then
10368: LD_VAR 0 3
10372: PUSH
10373: LD_INT 104
10375: EQUAL
10376: IFFALSE 10386
// sReset := true ;
10378: LD_ADDR_EXP 48
10382: PUSH
10383: LD_INT 1
10385: ST_TO_ADDR
// if p3 = 105 then
10386: LD_VAR 0 3
10390: PUSH
10391: LD_INT 105
10393: EQUAL
10394: IFFALSE 10404
// sSun := true ;
10396: LD_ADDR_EXP 49
10400: PUSH
10401: LD_INT 1
10403: ST_TO_ADDR
// if p3 = 106 then
10404: LD_VAR 0 3
10408: PUSH
10409: LD_INT 106
10411: EQUAL
10412: IFFALSE 10422
// sTiger := true ;
10414: LD_ADDR_EXP 45
10418: PUSH
10419: LD_INT 1
10421: ST_TO_ADDR
// if p3 = 107 then
10422: LD_VAR 0 3
10426: PUSH
10427: LD_INT 107
10429: EQUAL
10430: IFFALSE 10440
// sBomb := true ;
10432: LD_ADDR_EXP 46
10436: PUSH
10437: LD_INT 1
10439: ST_TO_ADDR
// if p3 = 108 then
10440: LD_VAR 0 3
10444: PUSH
10445: LD_INT 108
10447: EQUAL
10448: IFFALSE 10458
// sWound := true ;
10450: LD_ADDR_EXP 54
10454: PUSH
10455: LD_INT 1
10457: ST_TO_ADDR
// if p3 = 109 then
10458: LD_VAR 0 3
10462: PUSH
10463: LD_INT 109
10465: EQUAL
10466: IFFALSE 10476
// sBetray := true ;
10468: LD_ADDR_EXP 58
10472: PUSH
10473: LD_INT 1
10475: ST_TO_ADDR
// if p3 = 110 then
10476: LD_VAR 0 3
10480: PUSH
10481: LD_INT 110
10483: EQUAL
10484: IFFALSE 10494
// sContamin := true ;
10486: LD_ADDR_EXP 59
10490: PUSH
10491: LD_INT 1
10493: ST_TO_ADDR
// if p3 = 111 then
10494: LD_VAR 0 3
10498: PUSH
10499: LD_INT 111
10501: EQUAL
10502: IFFALSE 10512
// sOil := true ;
10504: LD_ADDR_EXP 61
10508: PUSH
10509: LD_INT 1
10511: ST_TO_ADDR
// if p3 = 112 then
10512: LD_VAR 0 3
10516: PUSH
10517: LD_INT 112
10519: EQUAL
10520: IFFALSE 10530
// sStu := true ;
10522: LD_ADDR_EXP 65
10526: PUSH
10527: LD_INT 1
10529: ST_TO_ADDR
// if p3 = 113 then
10530: LD_VAR 0 3
10534: PUSH
10535: LD_INT 113
10537: EQUAL
10538: IFFALSE 10548
// sBazooka := true ;
10540: LD_ADDR_EXP 68
10544: PUSH
10545: LD_INT 1
10547: ST_TO_ADDR
// if p3 = 114 then
10548: LD_VAR 0 3
10552: PUSH
10553: LD_INT 114
10555: EQUAL
10556: IFFALSE 10566
// sMortar := true ;
10558: LD_ADDR_EXP 69
10562: PUSH
10563: LD_INT 1
10565: ST_TO_ADDR
// if p3 = 115 then
10566: LD_VAR 0 3
10570: PUSH
10571: LD_INT 115
10573: EQUAL
10574: IFFALSE 10584
// sRanger := true ;
10576: LD_ADDR_EXP 79
10580: PUSH
10581: LD_INT 1
10583: ST_TO_ADDR
// if p3 = 116 then
10584: LD_VAR 0 3
10588: PUSH
10589: LD_INT 116
10591: EQUAL
10592: IFFALSE 10602
// sComputer := true ;
10594: LD_ADDR_EXP 80
10598: PUSH
10599: LD_INT 1
10601: ST_TO_ADDR
// if p3 = 117 then
10602: LD_VAR 0 3
10606: PUSH
10607: LD_INT 117
10609: EQUAL
10610: IFFALSE 10620
// s30 := true ;
10612: LD_ADDR_EXP 81
10616: PUSH
10617: LD_INT 1
10619: ST_TO_ADDR
// if p3 = 118 then
10620: LD_VAR 0 3
10624: PUSH
10625: LD_INT 118
10627: EQUAL
10628: IFFALSE 10638
// s60 := true ;
10630: LD_ADDR_EXP 82
10634: PUSH
10635: LD_INT 1
10637: ST_TO_ADDR
// end ; if p2 = hack_mode then
10638: LD_VAR 0 2
10642: PUSH
10643: LD_INT 101
10645: EQUAL
10646: IFFALSE 10774
// begin case p3 of 1 :
10648: LD_VAR 0 3
10652: PUSH
10653: LD_INT 1
10655: DOUBLE
10656: EQUAL
10657: IFTRUE 10661
10659: GO 10668
10661: POP
// hHackUnlimitedResources ; 2 :
10662: CALL 22921 0 0
10666: GO 10774
10668: LD_INT 2
10670: DOUBLE
10671: EQUAL
10672: IFTRUE 10676
10674: GO 10683
10676: POP
// hHackSetLevel10 ; 3 :
10677: CALL 23054 0 0
10681: GO 10774
10683: LD_INT 3
10685: DOUBLE
10686: EQUAL
10687: IFTRUE 10691
10689: GO 10698
10691: POP
// hHackSetLevel10YourUnits ; 4 :
10692: CALL 23139 0 0
10696: GO 10774
10698: LD_INT 4
10700: DOUBLE
10701: EQUAL
10702: IFTRUE 10706
10704: GO 10713
10706: POP
// hHackInvincible ; 5 :
10707: CALL 23587 0 0
10711: GO 10774
10713: LD_INT 5
10715: DOUBLE
10716: EQUAL
10717: IFTRUE 10721
10719: GO 10728
10721: POP
// hHackInvisible ; 6 :
10722: CALL 23698 0 0
10726: GO 10774
10728: LD_INT 6
10730: DOUBLE
10731: EQUAL
10732: IFTRUE 10736
10734: GO 10743
10736: POP
// hHackChangeYourSide ; 7 :
10737: CALL 23755 0 0
10741: GO 10774
10743: LD_INT 7
10745: DOUBLE
10746: EQUAL
10747: IFTRUE 10751
10749: GO 10758
10751: POP
// hHackChangeUnitSide ; 8 :
10752: CALL 23797 0 0
10756: GO 10774
10758: LD_INT 8
10760: DOUBLE
10761: EQUAL
10762: IFTRUE 10766
10764: GO 10773
10766: POP
// hHackFog ; end ;
10767: CALL 23898 0 0
10771: GO 10774
10773: POP
// end ; if p2 = game_save_mode then
10774: LD_VAR 0 2
10778: PUSH
10779: LD_INT 102
10781: EQUAL
10782: IFFALSE 10837
// begin if p3 = 1 then
10784: LD_VAR 0 3
10788: PUSH
10789: LD_INT 1
10791: EQUAL
10792: IFFALSE 10804
// globalGameSaveCounter := p4 ;
10794: LD_ADDR_EXP 25
10798: PUSH
10799: LD_VAR 0 4
10803: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
10804: LD_VAR 0 3
10808: PUSH
10809: LD_INT 2
10811: EQUAL
10812: PUSH
10813: LD_EXP 25
10817: AND
10818: IFFALSE 10837
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10820: LD_STRING setGameSaveCounter(
10822: PUSH
10823: LD_EXP 25
10827: STR
10828: PUSH
10829: LD_STRING )
10831: STR
10832: PPUSH
10833: CALL_OW 559
// end ; end ;
10837: LD_VAR 0 7
10841: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
10842: LD_INT 0
10844: PPUSH
// streamModeActive := false ;
10845: LD_ADDR_EXP 26
10849: PUSH
10850: LD_INT 0
10852: ST_TO_ADDR
// normalCounter := 36 ;
10853: LD_ADDR_EXP 27
10857: PUSH
10858: LD_INT 36
10860: ST_TO_ADDR
// hardcoreCounter := 18 ;
10861: LD_ADDR_EXP 28
10865: PUSH
10866: LD_INT 18
10868: ST_TO_ADDR
// sRocket := false ;
10869: LD_ADDR_EXP 31
10873: PUSH
10874: LD_INT 0
10876: ST_TO_ADDR
// sSpeed := false ;
10877: LD_ADDR_EXP 30
10881: PUSH
10882: LD_INT 0
10884: ST_TO_ADDR
// sEngine := false ;
10885: LD_ADDR_EXP 32
10889: PUSH
10890: LD_INT 0
10892: ST_TO_ADDR
// sSpec := false ;
10893: LD_ADDR_EXP 29
10897: PUSH
10898: LD_INT 0
10900: ST_TO_ADDR
// sLevel := false ;
10901: LD_ADDR_EXP 33
10905: PUSH
10906: LD_INT 0
10908: ST_TO_ADDR
// sArmoury := false ;
10909: LD_ADDR_EXP 34
10913: PUSH
10914: LD_INT 0
10916: ST_TO_ADDR
// sRadar := false ;
10917: LD_ADDR_EXP 35
10921: PUSH
10922: LD_INT 0
10924: ST_TO_ADDR
// sBunker := false ;
10925: LD_ADDR_EXP 36
10929: PUSH
10930: LD_INT 0
10932: ST_TO_ADDR
// sHack := false ;
10933: LD_ADDR_EXP 37
10937: PUSH
10938: LD_INT 0
10940: ST_TO_ADDR
// sFire := false ;
10941: LD_ADDR_EXP 38
10945: PUSH
10946: LD_INT 0
10948: ST_TO_ADDR
// sRefresh := false ;
10949: LD_ADDR_EXP 39
10953: PUSH
10954: LD_INT 0
10956: ST_TO_ADDR
// sExp := false ;
10957: LD_ADDR_EXP 40
10961: PUSH
10962: LD_INT 0
10964: ST_TO_ADDR
// sDepot := false ;
10965: LD_ADDR_EXP 41
10969: PUSH
10970: LD_INT 0
10972: ST_TO_ADDR
// sFlag := false ;
10973: LD_ADDR_EXP 42
10977: PUSH
10978: LD_INT 0
10980: ST_TO_ADDR
// sKamikadze := false ;
10981: LD_ADDR_EXP 50
10985: PUSH
10986: LD_INT 0
10988: ST_TO_ADDR
// sTroll := false ;
10989: LD_ADDR_EXP 51
10993: PUSH
10994: LD_INT 0
10996: ST_TO_ADDR
// sSlow := false ;
10997: LD_ADDR_EXP 52
11001: PUSH
11002: LD_INT 0
11004: ST_TO_ADDR
// sLack := false ;
11005: LD_ADDR_EXP 53
11009: PUSH
11010: LD_INT 0
11012: ST_TO_ADDR
// sTank := false ;
11013: LD_ADDR_EXP 55
11017: PUSH
11018: LD_INT 0
11020: ST_TO_ADDR
// sRemote := false ;
11021: LD_ADDR_EXP 56
11025: PUSH
11026: LD_INT 0
11028: ST_TO_ADDR
// sPowell := false ;
11029: LD_ADDR_EXP 57
11033: PUSH
11034: LD_INT 0
11036: ST_TO_ADDR
// sTeleport := false ;
11037: LD_ADDR_EXP 60
11041: PUSH
11042: LD_INT 0
11044: ST_TO_ADDR
// sOilTower := false ;
11045: LD_ADDR_EXP 62
11049: PUSH
11050: LD_INT 0
11052: ST_TO_ADDR
// sShovel := false ;
11053: LD_ADDR_EXP 63
11057: PUSH
11058: LD_INT 0
11060: ST_TO_ADDR
// sSheik := false ;
11061: LD_ADDR_EXP 64
11065: PUSH
11066: LD_INT 0
11068: ST_TO_ADDR
// sEarthquake := false ;
11069: LD_ADDR_EXP 66
11073: PUSH
11074: LD_INT 0
11076: ST_TO_ADDR
// sAI := false ;
11077: LD_ADDR_EXP 67
11081: PUSH
11082: LD_INT 0
11084: ST_TO_ADDR
// sCargo := false ;
11085: LD_ADDR_EXP 70
11089: PUSH
11090: LD_INT 0
11092: ST_TO_ADDR
// sDLaser := false ;
11093: LD_ADDR_EXP 71
11097: PUSH
11098: LD_INT 0
11100: ST_TO_ADDR
// sExchange := false ;
11101: LD_ADDR_EXP 72
11105: PUSH
11106: LD_INT 0
11108: ST_TO_ADDR
// sFac := false ;
11109: LD_ADDR_EXP 73
11113: PUSH
11114: LD_INT 0
11116: ST_TO_ADDR
// sPower := false ;
11117: LD_ADDR_EXP 74
11121: PUSH
11122: LD_INT 0
11124: ST_TO_ADDR
// sRandom := false ;
11125: LD_ADDR_EXP 75
11129: PUSH
11130: LD_INT 0
11132: ST_TO_ADDR
// sShield := false ;
11133: LD_ADDR_EXP 76
11137: PUSH
11138: LD_INT 0
11140: ST_TO_ADDR
// sTime := false ;
11141: LD_ADDR_EXP 77
11145: PUSH
11146: LD_INT 0
11148: ST_TO_ADDR
// sTools := false ;
11149: LD_ADDR_EXP 78
11153: PUSH
11154: LD_INT 0
11156: ST_TO_ADDR
// sSold := false ;
11157: LD_ADDR_EXP 43
11161: PUSH
11162: LD_INT 0
11164: ST_TO_ADDR
// sDiff := false ;
11165: LD_ADDR_EXP 44
11169: PUSH
11170: LD_INT 0
11172: ST_TO_ADDR
// sFog := false ;
11173: LD_ADDR_EXP 47
11177: PUSH
11178: LD_INT 0
11180: ST_TO_ADDR
// sReset := false ;
11181: LD_ADDR_EXP 48
11185: PUSH
11186: LD_INT 0
11188: ST_TO_ADDR
// sSun := false ;
11189: LD_ADDR_EXP 49
11193: PUSH
11194: LD_INT 0
11196: ST_TO_ADDR
// sTiger := false ;
11197: LD_ADDR_EXP 45
11201: PUSH
11202: LD_INT 0
11204: ST_TO_ADDR
// sBomb := false ;
11205: LD_ADDR_EXP 46
11209: PUSH
11210: LD_INT 0
11212: ST_TO_ADDR
// sWound := false ;
11213: LD_ADDR_EXP 54
11217: PUSH
11218: LD_INT 0
11220: ST_TO_ADDR
// sBetray := false ;
11221: LD_ADDR_EXP 58
11225: PUSH
11226: LD_INT 0
11228: ST_TO_ADDR
// sContamin := false ;
11229: LD_ADDR_EXP 59
11233: PUSH
11234: LD_INT 0
11236: ST_TO_ADDR
// sOil := false ;
11237: LD_ADDR_EXP 61
11241: PUSH
11242: LD_INT 0
11244: ST_TO_ADDR
// sStu := false ;
11245: LD_ADDR_EXP 65
11249: PUSH
11250: LD_INT 0
11252: ST_TO_ADDR
// sBazooka := false ;
11253: LD_ADDR_EXP 68
11257: PUSH
11258: LD_INT 0
11260: ST_TO_ADDR
// sMortar := false ;
11261: LD_ADDR_EXP 69
11265: PUSH
11266: LD_INT 0
11268: ST_TO_ADDR
// sRanger := false ;
11269: LD_ADDR_EXP 79
11273: PUSH
11274: LD_INT 0
11276: ST_TO_ADDR
// sComputer := false ;
11277: LD_ADDR_EXP 80
11281: PUSH
11282: LD_INT 0
11284: ST_TO_ADDR
// s30 := false ;
11285: LD_ADDR_EXP 81
11289: PUSH
11290: LD_INT 0
11292: ST_TO_ADDR
// s60 := false ;
11293: LD_ADDR_EXP 82
11297: PUSH
11298: LD_INT 0
11300: ST_TO_ADDR
// end ;
11301: LD_VAR 0 1
11305: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
11306: LD_INT 0
11308: PPUSH
11309: PPUSH
11310: PPUSH
11311: PPUSH
11312: PPUSH
11313: PPUSH
11314: PPUSH
// result := [ ] ;
11315: LD_ADDR_VAR 0 2
11319: PUSH
11320: EMPTY
11321: ST_TO_ADDR
// if campaign_id = 1 then
11322: LD_OWVAR 69
11326: PUSH
11327: LD_INT 1
11329: EQUAL
11330: IFFALSE 14496
// begin case mission_number of 1 :
11332: LD_OWVAR 70
11336: PUSH
11337: LD_INT 1
11339: DOUBLE
11340: EQUAL
11341: IFTRUE 11345
11343: GO 11421
11345: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
11346: LD_ADDR_VAR 0 2
11350: PUSH
11351: LD_INT 2
11353: PUSH
11354: LD_INT 4
11356: PUSH
11357: LD_INT 11
11359: PUSH
11360: LD_INT 12
11362: PUSH
11363: LD_INT 15
11365: PUSH
11366: LD_INT 16
11368: PUSH
11369: LD_INT 22
11371: PUSH
11372: LD_INT 23
11374: PUSH
11375: LD_INT 26
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: LIST
11385: LIST
11386: LIST
11387: LIST
11388: PUSH
11389: LD_INT 101
11391: PUSH
11392: LD_INT 102
11394: PUSH
11395: LD_INT 106
11397: PUSH
11398: LD_INT 116
11400: PUSH
11401: LD_INT 117
11403: PUSH
11404: LD_INT 118
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: ST_TO_ADDR
11419: GO 14494
11421: LD_INT 2
11423: DOUBLE
11424: EQUAL
11425: IFTRUE 11429
11427: GO 11513
11429: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
11430: LD_ADDR_VAR 0 2
11434: PUSH
11435: LD_INT 2
11437: PUSH
11438: LD_INT 4
11440: PUSH
11441: LD_INT 11
11443: PUSH
11444: LD_INT 12
11446: PUSH
11447: LD_INT 15
11449: PUSH
11450: LD_INT 16
11452: PUSH
11453: LD_INT 22
11455: PUSH
11456: LD_INT 23
11458: PUSH
11459: LD_INT 26
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: PUSH
11473: LD_INT 101
11475: PUSH
11476: LD_INT 102
11478: PUSH
11479: LD_INT 105
11481: PUSH
11482: LD_INT 106
11484: PUSH
11485: LD_INT 108
11487: PUSH
11488: LD_INT 116
11490: PUSH
11491: LD_INT 117
11493: PUSH
11494: LD_INT 118
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: ST_TO_ADDR
11511: GO 14494
11513: LD_INT 3
11515: DOUBLE
11516: EQUAL
11517: IFTRUE 11521
11519: GO 11609
11521: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
11522: LD_ADDR_VAR 0 2
11526: PUSH
11527: LD_INT 2
11529: PUSH
11530: LD_INT 4
11532: PUSH
11533: LD_INT 5
11535: PUSH
11536: LD_INT 11
11538: PUSH
11539: LD_INT 12
11541: PUSH
11542: LD_INT 15
11544: PUSH
11545: LD_INT 16
11547: PUSH
11548: LD_INT 22
11550: PUSH
11551: LD_INT 26
11553: PUSH
11554: LD_INT 36
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: PUSH
11569: LD_INT 101
11571: PUSH
11572: LD_INT 102
11574: PUSH
11575: LD_INT 105
11577: PUSH
11578: LD_INT 106
11580: PUSH
11581: LD_INT 108
11583: PUSH
11584: LD_INT 116
11586: PUSH
11587: LD_INT 117
11589: PUSH
11590: LD_INT 118
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: ST_TO_ADDR
11607: GO 14494
11609: LD_INT 4
11611: DOUBLE
11612: EQUAL
11613: IFTRUE 11617
11615: GO 11713
11617: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
11618: LD_ADDR_VAR 0 2
11622: PUSH
11623: LD_INT 2
11625: PUSH
11626: LD_INT 4
11628: PUSH
11629: LD_INT 5
11631: PUSH
11632: LD_INT 8
11634: PUSH
11635: LD_INT 11
11637: PUSH
11638: LD_INT 12
11640: PUSH
11641: LD_INT 15
11643: PUSH
11644: LD_INT 16
11646: PUSH
11647: LD_INT 22
11649: PUSH
11650: LD_INT 23
11652: PUSH
11653: LD_INT 26
11655: PUSH
11656: LD_INT 36
11658: PUSH
11659: EMPTY
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: PUSH
11673: LD_INT 101
11675: PUSH
11676: LD_INT 102
11678: PUSH
11679: LD_INT 105
11681: PUSH
11682: LD_INT 106
11684: PUSH
11685: LD_INT 108
11687: PUSH
11688: LD_INT 116
11690: PUSH
11691: LD_INT 117
11693: PUSH
11694: LD_INT 118
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: ST_TO_ADDR
11711: GO 14494
11713: LD_INT 5
11715: DOUBLE
11716: EQUAL
11717: IFTRUE 11721
11719: GO 11833
11721: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
11722: LD_ADDR_VAR 0 2
11726: PUSH
11727: LD_INT 2
11729: PUSH
11730: LD_INT 4
11732: PUSH
11733: LD_INT 5
11735: PUSH
11736: LD_INT 6
11738: PUSH
11739: LD_INT 8
11741: PUSH
11742: LD_INT 11
11744: PUSH
11745: LD_INT 12
11747: PUSH
11748: LD_INT 15
11750: PUSH
11751: LD_INT 16
11753: PUSH
11754: LD_INT 22
11756: PUSH
11757: LD_INT 23
11759: PUSH
11760: LD_INT 25
11762: PUSH
11763: LD_INT 26
11765: PUSH
11766: LD_INT 36
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: PUSH
11785: LD_INT 101
11787: PUSH
11788: LD_INT 102
11790: PUSH
11791: LD_INT 105
11793: PUSH
11794: LD_INT 106
11796: PUSH
11797: LD_INT 108
11799: PUSH
11800: LD_INT 109
11802: PUSH
11803: LD_INT 112
11805: PUSH
11806: LD_INT 116
11808: PUSH
11809: LD_INT 117
11811: PUSH
11812: LD_INT 118
11814: PUSH
11815: EMPTY
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: ST_TO_ADDR
11831: GO 14494
11833: LD_INT 6
11835: DOUBLE
11836: EQUAL
11837: IFTRUE 11841
11839: GO 11973
11841: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
11842: LD_ADDR_VAR 0 2
11846: PUSH
11847: LD_INT 2
11849: PUSH
11850: LD_INT 4
11852: PUSH
11853: LD_INT 5
11855: PUSH
11856: LD_INT 6
11858: PUSH
11859: LD_INT 8
11861: PUSH
11862: LD_INT 11
11864: PUSH
11865: LD_INT 12
11867: PUSH
11868: LD_INT 15
11870: PUSH
11871: LD_INT 16
11873: PUSH
11874: LD_INT 20
11876: PUSH
11877: LD_INT 21
11879: PUSH
11880: LD_INT 22
11882: PUSH
11883: LD_INT 23
11885: PUSH
11886: LD_INT 25
11888: PUSH
11889: LD_INT 26
11891: PUSH
11892: LD_INT 30
11894: PUSH
11895: LD_INT 31
11897: PUSH
11898: LD_INT 32
11900: PUSH
11901: LD_INT 36
11903: PUSH
11904: EMPTY
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: PUSH
11925: LD_INT 101
11927: PUSH
11928: LD_INT 102
11930: PUSH
11931: LD_INT 105
11933: PUSH
11934: LD_INT 106
11936: PUSH
11937: LD_INT 108
11939: PUSH
11940: LD_INT 109
11942: PUSH
11943: LD_INT 112
11945: PUSH
11946: LD_INT 116
11948: PUSH
11949: LD_INT 117
11951: PUSH
11952: LD_INT 118
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: PUSH
11967: EMPTY
11968: LIST
11969: LIST
11970: ST_TO_ADDR
11971: GO 14494
11973: LD_INT 7
11975: DOUBLE
11976: EQUAL
11977: IFTRUE 11981
11979: GO 12093
11981: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
11982: LD_ADDR_VAR 0 2
11986: PUSH
11987: LD_INT 2
11989: PUSH
11990: LD_INT 4
11992: PUSH
11993: LD_INT 5
11995: PUSH
11996: LD_INT 7
11998: PUSH
11999: LD_INT 11
12001: PUSH
12002: LD_INT 12
12004: PUSH
12005: LD_INT 15
12007: PUSH
12008: LD_INT 16
12010: PUSH
12011: LD_INT 20
12013: PUSH
12014: LD_INT 21
12016: PUSH
12017: LD_INT 22
12019: PUSH
12020: LD_INT 23
12022: PUSH
12023: LD_INT 25
12025: PUSH
12026: LD_INT 26
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: PUSH
12045: LD_INT 101
12047: PUSH
12048: LD_INT 102
12050: PUSH
12051: LD_INT 103
12053: PUSH
12054: LD_INT 105
12056: PUSH
12057: LD_INT 106
12059: PUSH
12060: LD_INT 108
12062: PUSH
12063: LD_INT 112
12065: PUSH
12066: LD_INT 116
12068: PUSH
12069: LD_INT 117
12071: PUSH
12072: LD_INT 118
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: ST_TO_ADDR
12091: GO 14494
12093: LD_INT 8
12095: DOUBLE
12096: EQUAL
12097: IFTRUE 12101
12099: GO 12241
12101: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12102: LD_ADDR_VAR 0 2
12106: PUSH
12107: LD_INT 2
12109: PUSH
12110: LD_INT 4
12112: PUSH
12113: LD_INT 5
12115: PUSH
12116: LD_INT 6
12118: PUSH
12119: LD_INT 7
12121: PUSH
12122: LD_INT 8
12124: PUSH
12125: LD_INT 11
12127: PUSH
12128: LD_INT 12
12130: PUSH
12131: LD_INT 15
12133: PUSH
12134: LD_INT 16
12136: PUSH
12137: LD_INT 20
12139: PUSH
12140: LD_INT 21
12142: PUSH
12143: LD_INT 22
12145: PUSH
12146: LD_INT 23
12148: PUSH
12149: LD_INT 25
12151: PUSH
12152: LD_INT 26
12154: PUSH
12155: LD_INT 30
12157: PUSH
12158: LD_INT 31
12160: PUSH
12161: LD_INT 32
12163: PUSH
12164: LD_INT 36
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: PUSH
12189: LD_INT 101
12191: PUSH
12192: LD_INT 102
12194: PUSH
12195: LD_INT 103
12197: PUSH
12198: LD_INT 105
12200: PUSH
12201: LD_INT 106
12203: PUSH
12204: LD_INT 108
12206: PUSH
12207: LD_INT 109
12209: PUSH
12210: LD_INT 112
12212: PUSH
12213: LD_INT 116
12215: PUSH
12216: LD_INT 117
12218: PUSH
12219: LD_INT 118
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: PUSH
12235: EMPTY
12236: LIST
12237: LIST
12238: ST_TO_ADDR
12239: GO 14494
12241: LD_INT 9
12243: DOUBLE
12244: EQUAL
12245: IFTRUE 12249
12247: GO 12397
12249: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
12250: LD_ADDR_VAR 0 2
12254: PUSH
12255: LD_INT 2
12257: PUSH
12258: LD_INT 4
12260: PUSH
12261: LD_INT 5
12263: PUSH
12264: LD_INT 6
12266: PUSH
12267: LD_INT 7
12269: PUSH
12270: LD_INT 8
12272: PUSH
12273: LD_INT 11
12275: PUSH
12276: LD_INT 12
12278: PUSH
12279: LD_INT 15
12281: PUSH
12282: LD_INT 16
12284: PUSH
12285: LD_INT 20
12287: PUSH
12288: LD_INT 21
12290: PUSH
12291: LD_INT 22
12293: PUSH
12294: LD_INT 23
12296: PUSH
12297: LD_INT 25
12299: PUSH
12300: LD_INT 26
12302: PUSH
12303: LD_INT 28
12305: PUSH
12306: LD_INT 30
12308: PUSH
12309: LD_INT 31
12311: PUSH
12312: LD_INT 32
12314: PUSH
12315: LD_INT 36
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: PUSH
12341: LD_INT 101
12343: PUSH
12344: LD_INT 102
12346: PUSH
12347: LD_INT 103
12349: PUSH
12350: LD_INT 105
12352: PUSH
12353: LD_INT 106
12355: PUSH
12356: LD_INT 108
12358: PUSH
12359: LD_INT 109
12361: PUSH
12362: LD_INT 112
12364: PUSH
12365: LD_INT 114
12367: PUSH
12368: LD_INT 116
12370: PUSH
12371: LD_INT 117
12373: PUSH
12374: LD_INT 118
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: PUSH
12391: EMPTY
12392: LIST
12393: LIST
12394: ST_TO_ADDR
12395: GO 14494
12397: LD_INT 10
12399: DOUBLE
12400: EQUAL
12401: IFTRUE 12405
12403: GO 12601
12405: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
12406: LD_ADDR_VAR 0 2
12410: PUSH
12411: LD_INT 2
12413: PUSH
12414: LD_INT 4
12416: PUSH
12417: LD_INT 5
12419: PUSH
12420: LD_INT 6
12422: PUSH
12423: LD_INT 7
12425: PUSH
12426: LD_INT 8
12428: PUSH
12429: LD_INT 9
12431: PUSH
12432: LD_INT 10
12434: PUSH
12435: LD_INT 11
12437: PUSH
12438: LD_INT 12
12440: PUSH
12441: LD_INT 13
12443: PUSH
12444: LD_INT 14
12446: PUSH
12447: LD_INT 15
12449: PUSH
12450: LD_INT 16
12452: PUSH
12453: LD_INT 17
12455: PUSH
12456: LD_INT 18
12458: PUSH
12459: LD_INT 19
12461: PUSH
12462: LD_INT 20
12464: PUSH
12465: LD_INT 21
12467: PUSH
12468: LD_INT 22
12470: PUSH
12471: LD_INT 23
12473: PUSH
12474: LD_INT 24
12476: PUSH
12477: LD_INT 25
12479: PUSH
12480: LD_INT 26
12482: PUSH
12483: LD_INT 28
12485: PUSH
12486: LD_INT 30
12488: PUSH
12489: LD_INT 31
12491: PUSH
12492: LD_INT 32
12494: PUSH
12495: LD_INT 36
12497: PUSH
12498: EMPTY
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: PUSH
12529: LD_INT 101
12531: PUSH
12532: LD_INT 102
12534: PUSH
12535: LD_INT 103
12537: PUSH
12538: LD_INT 104
12540: PUSH
12541: LD_INT 105
12543: PUSH
12544: LD_INT 106
12546: PUSH
12547: LD_INT 107
12549: PUSH
12550: LD_INT 108
12552: PUSH
12553: LD_INT 109
12555: PUSH
12556: LD_INT 110
12558: PUSH
12559: LD_INT 111
12561: PUSH
12562: LD_INT 112
12564: PUSH
12565: LD_INT 114
12567: PUSH
12568: LD_INT 116
12570: PUSH
12571: LD_INT 117
12573: PUSH
12574: LD_INT 118
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: ST_TO_ADDR
12599: GO 14494
12601: LD_INT 11
12603: DOUBLE
12604: EQUAL
12605: IFTRUE 12609
12607: GO 12813
12609: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
12610: LD_ADDR_VAR 0 2
12614: PUSH
12615: LD_INT 2
12617: PUSH
12618: LD_INT 3
12620: PUSH
12621: LD_INT 4
12623: PUSH
12624: LD_INT 5
12626: PUSH
12627: LD_INT 6
12629: PUSH
12630: LD_INT 7
12632: PUSH
12633: LD_INT 8
12635: PUSH
12636: LD_INT 9
12638: PUSH
12639: LD_INT 10
12641: PUSH
12642: LD_INT 11
12644: PUSH
12645: LD_INT 12
12647: PUSH
12648: LD_INT 13
12650: PUSH
12651: LD_INT 14
12653: PUSH
12654: LD_INT 15
12656: PUSH
12657: LD_INT 16
12659: PUSH
12660: LD_INT 17
12662: PUSH
12663: LD_INT 18
12665: PUSH
12666: LD_INT 19
12668: PUSH
12669: LD_INT 20
12671: PUSH
12672: LD_INT 21
12674: PUSH
12675: LD_INT 22
12677: PUSH
12678: LD_INT 23
12680: PUSH
12681: LD_INT 24
12683: PUSH
12684: LD_INT 25
12686: PUSH
12687: LD_INT 26
12689: PUSH
12690: LD_INT 28
12692: PUSH
12693: LD_INT 30
12695: PUSH
12696: LD_INT 31
12698: PUSH
12699: LD_INT 32
12701: PUSH
12702: LD_INT 34
12704: PUSH
12705: LD_INT 36
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: PUSH
12741: LD_INT 101
12743: PUSH
12744: LD_INT 102
12746: PUSH
12747: LD_INT 103
12749: PUSH
12750: LD_INT 104
12752: PUSH
12753: LD_INT 105
12755: PUSH
12756: LD_INT 106
12758: PUSH
12759: LD_INT 107
12761: PUSH
12762: LD_INT 108
12764: PUSH
12765: LD_INT 109
12767: PUSH
12768: LD_INT 110
12770: PUSH
12771: LD_INT 111
12773: PUSH
12774: LD_INT 112
12776: PUSH
12777: LD_INT 114
12779: PUSH
12780: LD_INT 116
12782: PUSH
12783: LD_INT 117
12785: PUSH
12786: LD_INT 118
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: ST_TO_ADDR
12811: GO 14494
12813: LD_INT 12
12815: DOUBLE
12816: EQUAL
12817: IFTRUE 12821
12819: GO 13041
12821: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
12822: LD_ADDR_VAR 0 2
12826: PUSH
12827: LD_INT 1
12829: PUSH
12830: LD_INT 2
12832: PUSH
12833: LD_INT 3
12835: PUSH
12836: LD_INT 4
12838: PUSH
12839: LD_INT 5
12841: PUSH
12842: LD_INT 6
12844: PUSH
12845: LD_INT 7
12847: PUSH
12848: LD_INT 8
12850: PUSH
12851: LD_INT 9
12853: PUSH
12854: LD_INT 10
12856: PUSH
12857: LD_INT 11
12859: PUSH
12860: LD_INT 12
12862: PUSH
12863: LD_INT 13
12865: PUSH
12866: LD_INT 14
12868: PUSH
12869: LD_INT 15
12871: PUSH
12872: LD_INT 16
12874: PUSH
12875: LD_INT 17
12877: PUSH
12878: LD_INT 18
12880: PUSH
12881: LD_INT 19
12883: PUSH
12884: LD_INT 20
12886: PUSH
12887: LD_INT 21
12889: PUSH
12890: LD_INT 22
12892: PUSH
12893: LD_INT 23
12895: PUSH
12896: LD_INT 24
12898: PUSH
12899: LD_INT 25
12901: PUSH
12902: LD_INT 26
12904: PUSH
12905: LD_INT 27
12907: PUSH
12908: LD_INT 28
12910: PUSH
12911: LD_INT 30
12913: PUSH
12914: LD_INT 31
12916: PUSH
12917: LD_INT 32
12919: PUSH
12920: LD_INT 33
12922: PUSH
12923: LD_INT 34
12925: PUSH
12926: LD_INT 36
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: PUSH
12965: LD_INT 101
12967: PUSH
12968: LD_INT 102
12970: PUSH
12971: LD_INT 103
12973: PUSH
12974: LD_INT 104
12976: PUSH
12977: LD_INT 105
12979: PUSH
12980: LD_INT 106
12982: PUSH
12983: LD_INT 107
12985: PUSH
12986: LD_INT 108
12988: PUSH
12989: LD_INT 109
12991: PUSH
12992: LD_INT 110
12994: PUSH
12995: LD_INT 111
12997: PUSH
12998: LD_INT 112
13000: PUSH
13001: LD_INT 113
13003: PUSH
13004: LD_INT 114
13006: PUSH
13007: LD_INT 116
13009: PUSH
13010: LD_INT 117
13012: PUSH
13013: LD_INT 118
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: PUSH
13035: EMPTY
13036: LIST
13037: LIST
13038: ST_TO_ADDR
13039: GO 14494
13041: LD_INT 13
13043: DOUBLE
13044: EQUAL
13045: IFTRUE 13049
13047: GO 13257
13049: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13050: LD_ADDR_VAR 0 2
13054: PUSH
13055: LD_INT 1
13057: PUSH
13058: LD_INT 2
13060: PUSH
13061: LD_INT 3
13063: PUSH
13064: LD_INT 4
13066: PUSH
13067: LD_INT 5
13069: PUSH
13070: LD_INT 8
13072: PUSH
13073: LD_INT 9
13075: PUSH
13076: LD_INT 10
13078: PUSH
13079: LD_INT 11
13081: PUSH
13082: LD_INT 12
13084: PUSH
13085: LD_INT 14
13087: PUSH
13088: LD_INT 15
13090: PUSH
13091: LD_INT 16
13093: PUSH
13094: LD_INT 17
13096: PUSH
13097: LD_INT 18
13099: PUSH
13100: LD_INT 19
13102: PUSH
13103: LD_INT 20
13105: PUSH
13106: LD_INT 21
13108: PUSH
13109: LD_INT 22
13111: PUSH
13112: LD_INT 23
13114: PUSH
13115: LD_INT 24
13117: PUSH
13118: LD_INT 25
13120: PUSH
13121: LD_INT 26
13123: PUSH
13124: LD_INT 27
13126: PUSH
13127: LD_INT 28
13129: PUSH
13130: LD_INT 30
13132: PUSH
13133: LD_INT 31
13135: PUSH
13136: LD_INT 32
13138: PUSH
13139: LD_INT 33
13141: PUSH
13142: LD_INT 34
13144: PUSH
13145: LD_INT 36
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: PUSH
13181: LD_INT 101
13183: PUSH
13184: LD_INT 102
13186: PUSH
13187: LD_INT 103
13189: PUSH
13190: LD_INT 104
13192: PUSH
13193: LD_INT 105
13195: PUSH
13196: LD_INT 106
13198: PUSH
13199: LD_INT 107
13201: PUSH
13202: LD_INT 108
13204: PUSH
13205: LD_INT 109
13207: PUSH
13208: LD_INT 110
13210: PUSH
13211: LD_INT 111
13213: PUSH
13214: LD_INT 112
13216: PUSH
13217: LD_INT 113
13219: PUSH
13220: LD_INT 114
13222: PUSH
13223: LD_INT 116
13225: PUSH
13226: LD_INT 117
13228: PUSH
13229: LD_INT 118
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: ST_TO_ADDR
13255: GO 14494
13257: LD_INT 14
13259: DOUBLE
13260: EQUAL
13261: IFTRUE 13265
13263: GO 13489
13265: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
13266: LD_ADDR_VAR 0 2
13270: PUSH
13271: LD_INT 1
13273: PUSH
13274: LD_INT 2
13276: PUSH
13277: LD_INT 3
13279: PUSH
13280: LD_INT 4
13282: PUSH
13283: LD_INT 5
13285: PUSH
13286: LD_INT 6
13288: PUSH
13289: LD_INT 7
13291: PUSH
13292: LD_INT 8
13294: PUSH
13295: LD_INT 9
13297: PUSH
13298: LD_INT 10
13300: PUSH
13301: LD_INT 11
13303: PUSH
13304: LD_INT 12
13306: PUSH
13307: LD_INT 13
13309: PUSH
13310: LD_INT 14
13312: PUSH
13313: LD_INT 15
13315: PUSH
13316: LD_INT 16
13318: PUSH
13319: LD_INT 17
13321: PUSH
13322: LD_INT 18
13324: PUSH
13325: LD_INT 19
13327: PUSH
13328: LD_INT 20
13330: PUSH
13331: LD_INT 21
13333: PUSH
13334: LD_INT 22
13336: PUSH
13337: LD_INT 23
13339: PUSH
13340: LD_INT 24
13342: PUSH
13343: LD_INT 25
13345: PUSH
13346: LD_INT 26
13348: PUSH
13349: LD_INT 27
13351: PUSH
13352: LD_INT 28
13354: PUSH
13355: LD_INT 29
13357: PUSH
13358: LD_INT 30
13360: PUSH
13361: LD_INT 31
13363: PUSH
13364: LD_INT 32
13366: PUSH
13367: LD_INT 33
13369: PUSH
13370: LD_INT 34
13372: PUSH
13373: LD_INT 36
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: PUSH
13413: LD_INT 101
13415: PUSH
13416: LD_INT 102
13418: PUSH
13419: LD_INT 103
13421: PUSH
13422: LD_INT 104
13424: PUSH
13425: LD_INT 105
13427: PUSH
13428: LD_INT 106
13430: PUSH
13431: LD_INT 107
13433: PUSH
13434: LD_INT 108
13436: PUSH
13437: LD_INT 109
13439: PUSH
13440: LD_INT 110
13442: PUSH
13443: LD_INT 111
13445: PUSH
13446: LD_INT 112
13448: PUSH
13449: LD_INT 113
13451: PUSH
13452: LD_INT 114
13454: PUSH
13455: LD_INT 116
13457: PUSH
13458: LD_INT 117
13460: PUSH
13461: LD_INT 118
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: PUSH
13483: EMPTY
13484: LIST
13485: LIST
13486: ST_TO_ADDR
13487: GO 14494
13489: LD_INT 15
13491: DOUBLE
13492: EQUAL
13493: IFTRUE 13497
13495: GO 13721
13497: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
13498: LD_ADDR_VAR 0 2
13502: PUSH
13503: LD_INT 1
13505: PUSH
13506: LD_INT 2
13508: PUSH
13509: LD_INT 3
13511: PUSH
13512: LD_INT 4
13514: PUSH
13515: LD_INT 5
13517: PUSH
13518: LD_INT 6
13520: PUSH
13521: LD_INT 7
13523: PUSH
13524: LD_INT 8
13526: PUSH
13527: LD_INT 9
13529: PUSH
13530: LD_INT 10
13532: PUSH
13533: LD_INT 11
13535: PUSH
13536: LD_INT 12
13538: PUSH
13539: LD_INT 13
13541: PUSH
13542: LD_INT 14
13544: PUSH
13545: LD_INT 15
13547: PUSH
13548: LD_INT 16
13550: PUSH
13551: LD_INT 17
13553: PUSH
13554: LD_INT 18
13556: PUSH
13557: LD_INT 19
13559: PUSH
13560: LD_INT 20
13562: PUSH
13563: LD_INT 21
13565: PUSH
13566: LD_INT 22
13568: PUSH
13569: LD_INT 23
13571: PUSH
13572: LD_INT 24
13574: PUSH
13575: LD_INT 25
13577: PUSH
13578: LD_INT 26
13580: PUSH
13581: LD_INT 27
13583: PUSH
13584: LD_INT 28
13586: PUSH
13587: LD_INT 29
13589: PUSH
13590: LD_INT 30
13592: PUSH
13593: LD_INT 31
13595: PUSH
13596: LD_INT 32
13598: PUSH
13599: LD_INT 33
13601: PUSH
13602: LD_INT 34
13604: PUSH
13605: LD_INT 36
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: PUSH
13645: LD_INT 101
13647: PUSH
13648: LD_INT 102
13650: PUSH
13651: LD_INT 103
13653: PUSH
13654: LD_INT 104
13656: PUSH
13657: LD_INT 105
13659: PUSH
13660: LD_INT 106
13662: PUSH
13663: LD_INT 107
13665: PUSH
13666: LD_INT 108
13668: PUSH
13669: LD_INT 109
13671: PUSH
13672: LD_INT 110
13674: PUSH
13675: LD_INT 111
13677: PUSH
13678: LD_INT 112
13680: PUSH
13681: LD_INT 113
13683: PUSH
13684: LD_INT 114
13686: PUSH
13687: LD_INT 116
13689: PUSH
13690: LD_INT 117
13692: PUSH
13693: LD_INT 118
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: ST_TO_ADDR
13719: GO 14494
13721: LD_INT 16
13723: DOUBLE
13724: EQUAL
13725: IFTRUE 13729
13727: GO 13865
13729: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
13730: LD_ADDR_VAR 0 2
13734: PUSH
13735: LD_INT 2
13737: PUSH
13738: LD_INT 4
13740: PUSH
13741: LD_INT 5
13743: PUSH
13744: LD_INT 7
13746: PUSH
13747: LD_INT 11
13749: PUSH
13750: LD_INT 12
13752: PUSH
13753: LD_INT 15
13755: PUSH
13756: LD_INT 16
13758: PUSH
13759: LD_INT 20
13761: PUSH
13762: LD_INT 21
13764: PUSH
13765: LD_INT 22
13767: PUSH
13768: LD_INT 23
13770: PUSH
13771: LD_INT 25
13773: PUSH
13774: LD_INT 26
13776: PUSH
13777: LD_INT 30
13779: PUSH
13780: LD_INT 31
13782: PUSH
13783: LD_INT 32
13785: PUSH
13786: LD_INT 33
13788: PUSH
13789: LD_INT 34
13791: PUSH
13792: EMPTY
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: PUSH
13813: LD_INT 101
13815: PUSH
13816: LD_INT 102
13818: PUSH
13819: LD_INT 103
13821: PUSH
13822: LD_INT 106
13824: PUSH
13825: LD_INT 108
13827: PUSH
13828: LD_INT 112
13830: PUSH
13831: LD_INT 113
13833: PUSH
13834: LD_INT 114
13836: PUSH
13837: LD_INT 116
13839: PUSH
13840: LD_INT 117
13842: PUSH
13843: LD_INT 118
13845: PUSH
13846: EMPTY
13847: LIST
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: PUSH
13859: EMPTY
13860: LIST
13861: LIST
13862: ST_TO_ADDR
13863: GO 14494
13865: LD_INT 17
13867: DOUBLE
13868: EQUAL
13869: IFTRUE 13873
13871: GO 14097
13873: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
13874: LD_ADDR_VAR 0 2
13878: PUSH
13879: LD_INT 1
13881: PUSH
13882: LD_INT 2
13884: PUSH
13885: LD_INT 3
13887: PUSH
13888: LD_INT 4
13890: PUSH
13891: LD_INT 5
13893: PUSH
13894: LD_INT 6
13896: PUSH
13897: LD_INT 7
13899: PUSH
13900: LD_INT 8
13902: PUSH
13903: LD_INT 9
13905: PUSH
13906: LD_INT 10
13908: PUSH
13909: LD_INT 11
13911: PUSH
13912: LD_INT 12
13914: PUSH
13915: LD_INT 13
13917: PUSH
13918: LD_INT 14
13920: PUSH
13921: LD_INT 15
13923: PUSH
13924: LD_INT 16
13926: PUSH
13927: LD_INT 17
13929: PUSH
13930: LD_INT 18
13932: PUSH
13933: LD_INT 19
13935: PUSH
13936: LD_INT 20
13938: PUSH
13939: LD_INT 21
13941: PUSH
13942: LD_INT 22
13944: PUSH
13945: LD_INT 23
13947: PUSH
13948: LD_INT 24
13950: PUSH
13951: LD_INT 25
13953: PUSH
13954: LD_INT 26
13956: PUSH
13957: LD_INT 27
13959: PUSH
13960: LD_INT 28
13962: PUSH
13963: LD_INT 29
13965: PUSH
13966: LD_INT 30
13968: PUSH
13969: LD_INT 31
13971: PUSH
13972: LD_INT 32
13974: PUSH
13975: LD_INT 33
13977: PUSH
13978: LD_INT 34
13980: PUSH
13981: LD_INT 36
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: PUSH
14021: LD_INT 101
14023: PUSH
14024: LD_INT 102
14026: PUSH
14027: LD_INT 103
14029: PUSH
14030: LD_INT 104
14032: PUSH
14033: LD_INT 105
14035: PUSH
14036: LD_INT 106
14038: PUSH
14039: LD_INT 107
14041: PUSH
14042: LD_INT 108
14044: PUSH
14045: LD_INT 109
14047: PUSH
14048: LD_INT 110
14050: PUSH
14051: LD_INT 111
14053: PUSH
14054: LD_INT 112
14056: PUSH
14057: LD_INT 113
14059: PUSH
14060: LD_INT 114
14062: PUSH
14063: LD_INT 116
14065: PUSH
14066: LD_INT 117
14068: PUSH
14069: LD_INT 118
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: ST_TO_ADDR
14095: GO 14494
14097: LD_INT 18
14099: DOUBLE
14100: EQUAL
14101: IFTRUE 14105
14103: GO 14253
14105: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14106: LD_ADDR_VAR 0 2
14110: PUSH
14111: LD_INT 2
14113: PUSH
14114: LD_INT 4
14116: PUSH
14117: LD_INT 5
14119: PUSH
14120: LD_INT 7
14122: PUSH
14123: LD_INT 11
14125: PUSH
14126: LD_INT 12
14128: PUSH
14129: LD_INT 15
14131: PUSH
14132: LD_INT 16
14134: PUSH
14135: LD_INT 20
14137: PUSH
14138: LD_INT 21
14140: PUSH
14141: LD_INT 22
14143: PUSH
14144: LD_INT 23
14146: PUSH
14147: LD_INT 25
14149: PUSH
14150: LD_INT 26
14152: PUSH
14153: LD_INT 30
14155: PUSH
14156: LD_INT 31
14158: PUSH
14159: LD_INT 32
14161: PUSH
14162: LD_INT 33
14164: PUSH
14165: LD_INT 34
14167: PUSH
14168: LD_INT 35
14170: PUSH
14171: LD_INT 36
14173: PUSH
14174: EMPTY
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: PUSH
14197: LD_INT 101
14199: PUSH
14200: LD_INT 102
14202: PUSH
14203: LD_INT 103
14205: PUSH
14206: LD_INT 106
14208: PUSH
14209: LD_INT 108
14211: PUSH
14212: LD_INT 112
14214: PUSH
14215: LD_INT 113
14217: PUSH
14218: LD_INT 114
14220: PUSH
14221: LD_INT 115
14223: PUSH
14224: LD_INT 116
14226: PUSH
14227: LD_INT 117
14229: PUSH
14230: LD_INT 118
14232: PUSH
14233: EMPTY
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: PUSH
14247: EMPTY
14248: LIST
14249: LIST
14250: ST_TO_ADDR
14251: GO 14494
14253: LD_INT 19
14255: DOUBLE
14256: EQUAL
14257: IFTRUE 14261
14259: GO 14493
14261: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
14262: LD_ADDR_VAR 0 2
14266: PUSH
14267: LD_INT 1
14269: PUSH
14270: LD_INT 2
14272: PUSH
14273: LD_INT 3
14275: PUSH
14276: LD_INT 4
14278: PUSH
14279: LD_INT 5
14281: PUSH
14282: LD_INT 6
14284: PUSH
14285: LD_INT 7
14287: PUSH
14288: LD_INT 8
14290: PUSH
14291: LD_INT 9
14293: PUSH
14294: LD_INT 10
14296: PUSH
14297: LD_INT 11
14299: PUSH
14300: LD_INT 12
14302: PUSH
14303: LD_INT 13
14305: PUSH
14306: LD_INT 14
14308: PUSH
14309: LD_INT 15
14311: PUSH
14312: LD_INT 16
14314: PUSH
14315: LD_INT 17
14317: PUSH
14318: LD_INT 18
14320: PUSH
14321: LD_INT 19
14323: PUSH
14324: LD_INT 20
14326: PUSH
14327: LD_INT 21
14329: PUSH
14330: LD_INT 22
14332: PUSH
14333: LD_INT 23
14335: PUSH
14336: LD_INT 24
14338: PUSH
14339: LD_INT 25
14341: PUSH
14342: LD_INT 26
14344: PUSH
14345: LD_INT 27
14347: PUSH
14348: LD_INT 28
14350: PUSH
14351: LD_INT 29
14353: PUSH
14354: LD_INT 30
14356: PUSH
14357: LD_INT 31
14359: PUSH
14360: LD_INT 32
14362: PUSH
14363: LD_INT 33
14365: PUSH
14366: LD_INT 34
14368: PUSH
14369: LD_INT 35
14371: PUSH
14372: LD_INT 36
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: PUSH
14413: LD_INT 101
14415: PUSH
14416: LD_INT 102
14418: PUSH
14419: LD_INT 103
14421: PUSH
14422: LD_INT 104
14424: PUSH
14425: LD_INT 105
14427: PUSH
14428: LD_INT 106
14430: PUSH
14431: LD_INT 107
14433: PUSH
14434: LD_INT 108
14436: PUSH
14437: LD_INT 109
14439: PUSH
14440: LD_INT 110
14442: PUSH
14443: LD_INT 111
14445: PUSH
14446: LD_INT 112
14448: PUSH
14449: LD_INT 113
14451: PUSH
14452: LD_INT 114
14454: PUSH
14455: LD_INT 115
14457: PUSH
14458: LD_INT 116
14460: PUSH
14461: LD_INT 117
14463: PUSH
14464: LD_INT 118
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: ST_TO_ADDR
14491: GO 14494
14493: POP
// end else
14494: GO 14725
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
14496: LD_ADDR_VAR 0 2
14500: PUSH
14501: LD_INT 1
14503: PUSH
14504: LD_INT 2
14506: PUSH
14507: LD_INT 3
14509: PUSH
14510: LD_INT 4
14512: PUSH
14513: LD_INT 5
14515: PUSH
14516: LD_INT 6
14518: PUSH
14519: LD_INT 7
14521: PUSH
14522: LD_INT 8
14524: PUSH
14525: LD_INT 9
14527: PUSH
14528: LD_INT 10
14530: PUSH
14531: LD_INT 11
14533: PUSH
14534: LD_INT 12
14536: PUSH
14537: LD_INT 13
14539: PUSH
14540: LD_INT 14
14542: PUSH
14543: LD_INT 15
14545: PUSH
14546: LD_INT 16
14548: PUSH
14549: LD_INT 17
14551: PUSH
14552: LD_INT 18
14554: PUSH
14555: LD_INT 19
14557: PUSH
14558: LD_INT 20
14560: PUSH
14561: LD_INT 21
14563: PUSH
14564: LD_INT 22
14566: PUSH
14567: LD_INT 23
14569: PUSH
14570: LD_INT 24
14572: PUSH
14573: LD_INT 25
14575: PUSH
14576: LD_INT 26
14578: PUSH
14579: LD_INT 27
14581: PUSH
14582: LD_INT 28
14584: PUSH
14585: LD_INT 29
14587: PUSH
14588: LD_INT 30
14590: PUSH
14591: LD_INT 31
14593: PUSH
14594: LD_INT 32
14596: PUSH
14597: LD_INT 33
14599: PUSH
14600: LD_INT 34
14602: PUSH
14603: LD_INT 35
14605: PUSH
14606: LD_INT 36
14608: PUSH
14609: EMPTY
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: PUSH
14647: LD_INT 101
14649: PUSH
14650: LD_INT 102
14652: PUSH
14653: LD_INT 103
14655: PUSH
14656: LD_INT 104
14658: PUSH
14659: LD_INT 105
14661: PUSH
14662: LD_INT 106
14664: PUSH
14665: LD_INT 107
14667: PUSH
14668: LD_INT 108
14670: PUSH
14671: LD_INT 109
14673: PUSH
14674: LD_INT 110
14676: PUSH
14677: LD_INT 111
14679: PUSH
14680: LD_INT 112
14682: PUSH
14683: LD_INT 113
14685: PUSH
14686: LD_INT 114
14688: PUSH
14689: LD_INT 115
14691: PUSH
14692: LD_INT 116
14694: PUSH
14695: LD_INT 117
14697: PUSH
14698: LD_INT 118
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: ST_TO_ADDR
// if result then
14725: LD_VAR 0 2
14729: IFFALSE 15515
// begin normal :=  ;
14731: LD_ADDR_VAR 0 5
14735: PUSH
14736: LD_STRING 
14738: ST_TO_ADDR
// hardcore :=  ;
14739: LD_ADDR_VAR 0 6
14743: PUSH
14744: LD_STRING 
14746: ST_TO_ADDR
// active :=  ;
14747: LD_ADDR_VAR 0 7
14751: PUSH
14752: LD_STRING 
14754: ST_TO_ADDR
// for i = 1 to normalCounter do
14755: LD_ADDR_VAR 0 8
14759: PUSH
14760: DOUBLE
14761: LD_INT 1
14763: DEC
14764: ST_TO_ADDR
14765: LD_EXP 27
14769: PUSH
14770: FOR_TO
14771: IFFALSE 14872
// begin tmp := 0 ;
14773: LD_ADDR_VAR 0 3
14777: PUSH
14778: LD_STRING 0
14780: ST_TO_ADDR
// if result [ 1 ] then
14781: LD_VAR 0 2
14785: PUSH
14786: LD_INT 1
14788: ARRAY
14789: IFFALSE 14854
// if result [ 1 ] [ 1 ] = i then
14791: LD_VAR 0 2
14795: PUSH
14796: LD_INT 1
14798: ARRAY
14799: PUSH
14800: LD_INT 1
14802: ARRAY
14803: PUSH
14804: LD_VAR 0 8
14808: EQUAL
14809: IFFALSE 14854
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14811: LD_ADDR_VAR 0 2
14815: PUSH
14816: LD_VAR 0 2
14820: PPUSH
14821: LD_INT 1
14823: PPUSH
14824: LD_VAR 0 2
14828: PUSH
14829: LD_INT 1
14831: ARRAY
14832: PPUSH
14833: LD_INT 1
14835: PPUSH
14836: CALL_OW 3
14840: PPUSH
14841: CALL_OW 1
14845: ST_TO_ADDR
// tmp := 1 ;
14846: LD_ADDR_VAR 0 3
14850: PUSH
14851: LD_STRING 1
14853: ST_TO_ADDR
// end ; normal := normal & tmp ;
14854: LD_ADDR_VAR 0 5
14858: PUSH
14859: LD_VAR 0 5
14863: PUSH
14864: LD_VAR 0 3
14868: STR
14869: ST_TO_ADDR
// end ;
14870: GO 14770
14872: POP
14873: POP
// for i = 1 to hardcoreCounter do
14874: LD_ADDR_VAR 0 8
14878: PUSH
14879: DOUBLE
14880: LD_INT 1
14882: DEC
14883: ST_TO_ADDR
14884: LD_EXP 28
14888: PUSH
14889: FOR_TO
14890: IFFALSE 14995
// begin tmp := 0 ;
14892: LD_ADDR_VAR 0 3
14896: PUSH
14897: LD_STRING 0
14899: ST_TO_ADDR
// if result [ 2 ] then
14900: LD_VAR 0 2
14904: PUSH
14905: LD_INT 2
14907: ARRAY
14908: IFFALSE 14977
// if result [ 2 ] [ 1 ] = 100 + i then
14910: LD_VAR 0 2
14914: PUSH
14915: LD_INT 2
14917: ARRAY
14918: PUSH
14919: LD_INT 1
14921: ARRAY
14922: PUSH
14923: LD_INT 100
14925: PUSH
14926: LD_VAR 0 8
14930: PLUS
14931: EQUAL
14932: IFFALSE 14977
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14934: LD_ADDR_VAR 0 2
14938: PUSH
14939: LD_VAR 0 2
14943: PPUSH
14944: LD_INT 2
14946: PPUSH
14947: LD_VAR 0 2
14951: PUSH
14952: LD_INT 2
14954: ARRAY
14955: PPUSH
14956: LD_INT 1
14958: PPUSH
14959: CALL_OW 3
14963: PPUSH
14964: CALL_OW 1
14968: ST_TO_ADDR
// tmp := 1 ;
14969: LD_ADDR_VAR 0 3
14973: PUSH
14974: LD_STRING 1
14976: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14977: LD_ADDR_VAR 0 6
14981: PUSH
14982: LD_VAR 0 6
14986: PUSH
14987: LD_VAR 0 3
14991: STR
14992: ST_TO_ADDR
// end ;
14993: GO 14889
14995: POP
14996: POP
// if isGameLoad then
14997: LD_VAR 0 1
15001: IFFALSE 15476
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15003: LD_ADDR_VAR 0 4
15007: PUSH
15008: LD_EXP 31
15012: PUSH
15013: LD_EXP 30
15017: PUSH
15018: LD_EXP 32
15022: PUSH
15023: LD_EXP 29
15027: PUSH
15028: LD_EXP 33
15032: PUSH
15033: LD_EXP 34
15037: PUSH
15038: LD_EXP 35
15042: PUSH
15043: LD_EXP 36
15047: PUSH
15048: LD_EXP 37
15052: PUSH
15053: LD_EXP 38
15057: PUSH
15058: LD_EXP 39
15062: PUSH
15063: LD_EXP 40
15067: PUSH
15068: LD_EXP 41
15072: PUSH
15073: LD_EXP 42
15077: PUSH
15078: LD_EXP 50
15082: PUSH
15083: LD_EXP 51
15087: PUSH
15088: LD_EXP 52
15092: PUSH
15093: LD_EXP 53
15097: PUSH
15098: LD_EXP 55
15102: PUSH
15103: LD_EXP 56
15107: PUSH
15108: LD_EXP 57
15112: PUSH
15113: LD_EXP 60
15117: PUSH
15118: LD_EXP 62
15122: PUSH
15123: LD_EXP 63
15127: PUSH
15128: LD_EXP 64
15132: PUSH
15133: LD_EXP 66
15137: PUSH
15138: LD_EXP 67
15142: PUSH
15143: LD_EXP 70
15147: PUSH
15148: LD_EXP 71
15152: PUSH
15153: LD_EXP 72
15157: PUSH
15158: LD_EXP 73
15162: PUSH
15163: LD_EXP 74
15167: PUSH
15168: LD_EXP 75
15172: PUSH
15173: LD_EXP 76
15177: PUSH
15178: LD_EXP 77
15182: PUSH
15183: LD_EXP 78
15187: PUSH
15188: LD_EXP 43
15192: PUSH
15193: LD_EXP 44
15197: PUSH
15198: LD_EXP 47
15202: PUSH
15203: LD_EXP 48
15207: PUSH
15208: LD_EXP 49
15212: PUSH
15213: LD_EXP 45
15217: PUSH
15218: LD_EXP 46
15222: PUSH
15223: LD_EXP 54
15227: PUSH
15228: LD_EXP 58
15232: PUSH
15233: LD_EXP 59
15237: PUSH
15238: LD_EXP 61
15242: PUSH
15243: LD_EXP 65
15247: PUSH
15248: LD_EXP 68
15252: PUSH
15253: LD_EXP 69
15257: PUSH
15258: LD_EXP 79
15262: PUSH
15263: LD_EXP 80
15267: PUSH
15268: LD_EXP 81
15272: PUSH
15273: LD_EXP 82
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: ST_TO_ADDR
// tmp :=  ;
15334: LD_ADDR_VAR 0 3
15338: PUSH
15339: LD_STRING 
15341: ST_TO_ADDR
// for i = 1 to normalCounter do
15342: LD_ADDR_VAR 0 8
15346: PUSH
15347: DOUBLE
15348: LD_INT 1
15350: DEC
15351: ST_TO_ADDR
15352: LD_EXP 27
15356: PUSH
15357: FOR_TO
15358: IFFALSE 15394
// begin if flags [ i ] then
15360: LD_VAR 0 4
15364: PUSH
15365: LD_VAR 0 8
15369: ARRAY
15370: IFFALSE 15392
// tmp := tmp & i & ; ;
15372: LD_ADDR_VAR 0 3
15376: PUSH
15377: LD_VAR 0 3
15381: PUSH
15382: LD_VAR 0 8
15386: STR
15387: PUSH
15388: LD_STRING ;
15390: STR
15391: ST_TO_ADDR
// end ;
15392: GO 15357
15394: POP
15395: POP
// for i = 1 to hardcoreCounter do
15396: LD_ADDR_VAR 0 8
15400: PUSH
15401: DOUBLE
15402: LD_INT 1
15404: DEC
15405: ST_TO_ADDR
15406: LD_EXP 28
15410: PUSH
15411: FOR_TO
15412: IFFALSE 15458
// begin if flags [ normalCounter + i ] then
15414: LD_VAR 0 4
15418: PUSH
15419: LD_EXP 27
15423: PUSH
15424: LD_VAR 0 8
15428: PLUS
15429: ARRAY
15430: IFFALSE 15456
// tmp := tmp & ( 100 + i ) & ; ;
15432: LD_ADDR_VAR 0 3
15436: PUSH
15437: LD_VAR 0 3
15441: PUSH
15442: LD_INT 100
15444: PUSH
15445: LD_VAR 0 8
15449: PLUS
15450: STR
15451: PUSH
15452: LD_STRING ;
15454: STR
15455: ST_TO_ADDR
// end ;
15456: GO 15411
15458: POP
15459: POP
// if tmp then
15460: LD_VAR 0 3
15464: IFFALSE 15476
// active := tmp ;
15466: LD_ADDR_VAR 0 7
15470: PUSH
15471: LD_VAR 0 3
15475: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
15476: LD_STRING getStreamItemsFromMission("
15478: PUSH
15479: LD_VAR 0 5
15483: STR
15484: PUSH
15485: LD_STRING ","
15487: STR
15488: PUSH
15489: LD_VAR 0 6
15493: STR
15494: PUSH
15495: LD_STRING ","
15497: STR
15498: PUSH
15499: LD_VAR 0 7
15503: STR
15504: PUSH
15505: LD_STRING ")
15507: STR
15508: PPUSH
15509: CALL_OW 559
// end else
15513: GO 15522
// ToLua ( getStreamItemsFromMission("","","") ) ;
15515: LD_STRING getStreamItemsFromMission("","","")
15517: PPUSH
15518: CALL_OW 559
// end ;
15522: LD_VAR 0 2
15526: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15527: LD_EXP 26
15531: PUSH
15532: LD_EXP 31
15536: AND
15537: IFFALSE 15661
15539: GO 15541
15541: DISABLE
15542: LD_INT 0
15544: PPUSH
15545: PPUSH
// begin enable ;
15546: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15547: LD_ADDR_VAR 0 2
15551: PUSH
15552: LD_INT 22
15554: PUSH
15555: LD_OWVAR 2
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PUSH
15564: LD_INT 2
15566: PUSH
15567: LD_INT 34
15569: PUSH
15570: LD_INT 7
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: PUSH
15577: LD_INT 34
15579: PUSH
15580: LD_INT 45
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PUSH
15587: LD_INT 34
15589: PUSH
15590: LD_INT 28
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PUSH
15597: LD_INT 34
15599: PUSH
15600: LD_INT 47
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: PUSH
15607: EMPTY
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: PUSH
15614: EMPTY
15615: LIST
15616: LIST
15617: PPUSH
15618: CALL_OW 69
15622: ST_TO_ADDR
// if not tmp then
15623: LD_VAR 0 2
15627: NOT
15628: IFFALSE 15632
// exit ;
15630: GO 15661
// for i in tmp do
15632: LD_ADDR_VAR 0 1
15636: PUSH
15637: LD_VAR 0 2
15641: PUSH
15642: FOR_IN
15643: IFFALSE 15659
// begin SetLives ( i , 0 ) ;
15645: LD_VAR 0 1
15649: PPUSH
15650: LD_INT 0
15652: PPUSH
15653: CALL_OW 234
// end ;
15657: GO 15642
15659: POP
15660: POP
// end ;
15661: PPOPN 2
15663: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15664: LD_EXP 26
15668: PUSH
15669: LD_EXP 32
15673: AND
15674: IFFALSE 15758
15676: GO 15678
15678: DISABLE
15679: LD_INT 0
15681: PPUSH
15682: PPUSH
// begin enable ;
15683: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15684: LD_ADDR_VAR 0 2
15688: PUSH
15689: LD_INT 22
15691: PUSH
15692: LD_OWVAR 2
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: PUSH
15701: LD_INT 32
15703: PUSH
15704: LD_INT 3
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: PPUSH
15715: CALL_OW 69
15719: ST_TO_ADDR
// if not tmp then
15720: LD_VAR 0 2
15724: NOT
15725: IFFALSE 15729
// exit ;
15727: GO 15758
// for i in tmp do
15729: LD_ADDR_VAR 0 1
15733: PUSH
15734: LD_VAR 0 2
15738: PUSH
15739: FOR_IN
15740: IFFALSE 15756
// begin SetLives ( i , 0 ) ;
15742: LD_VAR 0 1
15746: PPUSH
15747: LD_INT 0
15749: PPUSH
15750: CALL_OW 234
// end ;
15754: GO 15739
15756: POP
15757: POP
// end ;
15758: PPOPN 2
15760: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15761: LD_EXP 26
15765: PUSH
15766: LD_EXP 29
15770: AND
15771: IFFALSE 15864
15773: GO 15775
15775: DISABLE
15776: LD_INT 0
15778: PPUSH
// begin enable ;
15779: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15780: LD_ADDR_VAR 0 1
15784: PUSH
15785: LD_INT 22
15787: PUSH
15788: LD_OWVAR 2
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: PUSH
15797: LD_INT 2
15799: PUSH
15800: LD_INT 25
15802: PUSH
15803: LD_INT 5
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: PUSH
15810: LD_INT 25
15812: PUSH
15813: LD_INT 9
15815: PUSH
15816: EMPTY
15817: LIST
15818: LIST
15819: PUSH
15820: LD_INT 25
15822: PUSH
15823: LD_INT 8
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PPUSH
15840: CALL_OW 69
15844: PUSH
15845: FOR_IN
15846: IFFALSE 15862
// begin SetClass ( i , 1 ) ;
15848: LD_VAR 0 1
15852: PPUSH
15853: LD_INT 1
15855: PPUSH
15856: CALL_OW 336
// end ;
15860: GO 15845
15862: POP
15863: POP
// end ;
15864: PPOPN 1
15866: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15867: LD_EXP 26
15871: PUSH
15872: LD_EXP 30
15876: AND
15877: PUSH
15878: LD_OWVAR 65
15882: PUSH
15883: LD_INT 7
15885: LESS
15886: AND
15887: IFFALSE 15901
15889: GO 15891
15891: DISABLE
// begin enable ;
15892: ENABLE
// game_speed := 7 ;
15893: LD_ADDR_OWVAR 65
15897: PUSH
15898: LD_INT 7
15900: ST_TO_ADDR
// end ;
15901: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15902: LD_EXP 26
15906: PUSH
15907: LD_EXP 33
15911: AND
15912: IFFALSE 16114
15914: GO 15916
15916: DISABLE
15917: LD_INT 0
15919: PPUSH
15920: PPUSH
15921: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15922: LD_ADDR_VAR 0 3
15926: PUSH
15927: LD_INT 81
15929: PUSH
15930: LD_OWVAR 2
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: PUSH
15939: LD_INT 21
15941: PUSH
15942: LD_INT 1
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: PPUSH
15953: CALL_OW 69
15957: ST_TO_ADDR
// if not tmp then
15958: LD_VAR 0 3
15962: NOT
15963: IFFALSE 15967
// exit ;
15965: GO 16114
// if tmp > 5 then
15967: LD_VAR 0 3
15971: PUSH
15972: LD_INT 5
15974: GREATER
15975: IFFALSE 15987
// k := 5 else
15977: LD_ADDR_VAR 0 2
15981: PUSH
15982: LD_INT 5
15984: ST_TO_ADDR
15985: GO 15997
// k := tmp ;
15987: LD_ADDR_VAR 0 2
15991: PUSH
15992: LD_VAR 0 3
15996: ST_TO_ADDR
// for i := 1 to k do
15997: LD_ADDR_VAR 0 1
16001: PUSH
16002: DOUBLE
16003: LD_INT 1
16005: DEC
16006: ST_TO_ADDR
16007: LD_VAR 0 2
16011: PUSH
16012: FOR_TO
16013: IFFALSE 16112
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16015: LD_VAR 0 3
16019: PUSH
16020: LD_VAR 0 1
16024: ARRAY
16025: PPUSH
16026: LD_VAR 0 1
16030: PUSH
16031: LD_INT 4
16033: MOD
16034: PUSH
16035: LD_INT 1
16037: PLUS
16038: PPUSH
16039: CALL_OW 259
16043: PUSH
16044: LD_INT 10
16046: LESS
16047: IFFALSE 16110
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16049: LD_VAR 0 3
16053: PUSH
16054: LD_VAR 0 1
16058: ARRAY
16059: PPUSH
16060: LD_VAR 0 1
16064: PUSH
16065: LD_INT 4
16067: MOD
16068: PUSH
16069: LD_INT 1
16071: PLUS
16072: PPUSH
16073: LD_VAR 0 3
16077: PUSH
16078: LD_VAR 0 1
16082: ARRAY
16083: PPUSH
16084: LD_VAR 0 1
16088: PUSH
16089: LD_INT 4
16091: MOD
16092: PUSH
16093: LD_INT 1
16095: PLUS
16096: PPUSH
16097: CALL_OW 259
16101: PUSH
16102: LD_INT 1
16104: PLUS
16105: PPUSH
16106: CALL_OW 237
16110: GO 16012
16112: POP
16113: POP
// end ;
16114: PPOPN 3
16116: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16117: LD_EXP 26
16121: PUSH
16122: LD_EXP 34
16126: AND
16127: IFFALSE 16147
16129: GO 16131
16131: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16132: LD_INT 4
16134: PPUSH
16135: LD_OWVAR 2
16139: PPUSH
16140: LD_INT 0
16142: PPUSH
16143: CALL_OW 324
16147: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16148: LD_EXP 26
16152: PUSH
16153: LD_EXP 63
16157: AND
16158: IFFALSE 16178
16160: GO 16162
16162: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16163: LD_INT 19
16165: PPUSH
16166: LD_OWVAR 2
16170: PPUSH
16171: LD_INT 0
16173: PPUSH
16174: CALL_OW 324
16178: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16179: LD_EXP 26
16183: PUSH
16184: LD_EXP 35
16188: AND
16189: IFFALSE 16291
16191: GO 16193
16193: DISABLE
16194: LD_INT 0
16196: PPUSH
16197: PPUSH
// begin enable ;
16198: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16199: LD_ADDR_VAR 0 2
16203: PUSH
16204: LD_INT 22
16206: PUSH
16207: LD_OWVAR 2
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: PUSH
16216: LD_INT 2
16218: PUSH
16219: LD_INT 34
16221: PUSH
16222: LD_INT 11
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: PUSH
16229: LD_INT 34
16231: PUSH
16232: LD_INT 30
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: LIST
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: PPUSH
16248: CALL_OW 69
16252: ST_TO_ADDR
// if not tmp then
16253: LD_VAR 0 2
16257: NOT
16258: IFFALSE 16262
// exit ;
16260: GO 16291
// for i in tmp do
16262: LD_ADDR_VAR 0 1
16266: PUSH
16267: LD_VAR 0 2
16271: PUSH
16272: FOR_IN
16273: IFFALSE 16289
// begin SetLives ( i , 0 ) ;
16275: LD_VAR 0 1
16279: PPUSH
16280: LD_INT 0
16282: PPUSH
16283: CALL_OW 234
// end ;
16287: GO 16272
16289: POP
16290: POP
// end ;
16291: PPOPN 2
16293: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16294: LD_EXP 26
16298: PUSH
16299: LD_EXP 36
16303: AND
16304: IFFALSE 16324
16306: GO 16308
16308: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16309: LD_INT 32
16311: PPUSH
16312: LD_OWVAR 2
16316: PPUSH
16317: LD_INT 0
16319: PPUSH
16320: CALL_OW 324
16324: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16325: LD_EXP 26
16329: PUSH
16330: LD_EXP 37
16334: AND
16335: IFFALSE 16516
16337: GO 16339
16339: DISABLE
16340: LD_INT 0
16342: PPUSH
16343: PPUSH
16344: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16345: LD_ADDR_VAR 0 2
16349: PUSH
16350: LD_INT 22
16352: PUSH
16353: LD_OWVAR 2
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: PUSH
16362: LD_INT 33
16364: PUSH
16365: LD_INT 3
16367: PUSH
16368: EMPTY
16369: LIST
16370: LIST
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: PPUSH
16376: CALL_OW 69
16380: ST_TO_ADDR
// if not tmp then
16381: LD_VAR 0 2
16385: NOT
16386: IFFALSE 16390
// exit ;
16388: GO 16516
// side := 0 ;
16390: LD_ADDR_VAR 0 3
16394: PUSH
16395: LD_INT 0
16397: ST_TO_ADDR
// for i := 1 to 8 do
16398: LD_ADDR_VAR 0 1
16402: PUSH
16403: DOUBLE
16404: LD_INT 1
16406: DEC
16407: ST_TO_ADDR
16408: LD_INT 8
16410: PUSH
16411: FOR_TO
16412: IFFALSE 16460
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16414: LD_OWVAR 2
16418: PUSH
16419: LD_VAR 0 1
16423: NONEQUAL
16424: PUSH
16425: LD_OWVAR 2
16429: PPUSH
16430: LD_VAR 0 1
16434: PPUSH
16435: CALL_OW 81
16439: PUSH
16440: LD_INT 2
16442: EQUAL
16443: AND
16444: IFFALSE 16458
// begin side := i ;
16446: LD_ADDR_VAR 0 3
16450: PUSH
16451: LD_VAR 0 1
16455: ST_TO_ADDR
// break ;
16456: GO 16460
// end ;
16458: GO 16411
16460: POP
16461: POP
// if not side then
16462: LD_VAR 0 3
16466: NOT
16467: IFFALSE 16471
// exit ;
16469: GO 16516
// for i := 1 to tmp do
16471: LD_ADDR_VAR 0 1
16475: PUSH
16476: DOUBLE
16477: LD_INT 1
16479: DEC
16480: ST_TO_ADDR
16481: LD_VAR 0 2
16485: PUSH
16486: FOR_TO
16487: IFFALSE 16514
// if Prob ( 60 ) then
16489: LD_INT 60
16491: PPUSH
16492: CALL_OW 13
16496: IFFALSE 16512
// SetSide ( i , side ) ;
16498: LD_VAR 0 1
16502: PPUSH
16503: LD_VAR 0 3
16507: PPUSH
16508: CALL_OW 235
16512: GO 16486
16514: POP
16515: POP
// end ;
16516: PPOPN 3
16518: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16519: LD_EXP 26
16523: PUSH
16524: LD_EXP 39
16528: AND
16529: IFFALSE 16648
16531: GO 16533
16533: DISABLE
16534: LD_INT 0
16536: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16537: LD_ADDR_VAR 0 1
16541: PUSH
16542: LD_INT 22
16544: PUSH
16545: LD_OWVAR 2
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: PUSH
16554: LD_INT 21
16556: PUSH
16557: LD_INT 1
16559: PUSH
16560: EMPTY
16561: LIST
16562: LIST
16563: PUSH
16564: LD_INT 3
16566: PUSH
16567: LD_INT 23
16569: PUSH
16570: LD_INT 0
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: LIST
16585: PPUSH
16586: CALL_OW 69
16590: PUSH
16591: FOR_IN
16592: IFFALSE 16646
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16594: LD_VAR 0 1
16598: PPUSH
16599: CALL_OW 257
16603: PUSH
16604: LD_INT 1
16606: PUSH
16607: LD_INT 2
16609: PUSH
16610: LD_INT 3
16612: PUSH
16613: LD_INT 4
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: IN
16622: IFFALSE 16644
// SetClass ( un , rand ( 1 , 4 ) ) ;
16624: LD_VAR 0 1
16628: PPUSH
16629: LD_INT 1
16631: PPUSH
16632: LD_INT 4
16634: PPUSH
16635: CALL_OW 12
16639: PPUSH
16640: CALL_OW 336
16644: GO 16591
16646: POP
16647: POP
// end ;
16648: PPOPN 1
16650: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16651: LD_EXP 26
16655: PUSH
16656: LD_EXP 38
16660: AND
16661: IFFALSE 16740
16663: GO 16665
16665: DISABLE
16666: LD_INT 0
16668: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16669: LD_ADDR_VAR 0 1
16673: PUSH
16674: LD_INT 22
16676: PUSH
16677: LD_OWVAR 2
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: PUSH
16686: LD_INT 21
16688: PUSH
16689: LD_INT 3
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: PPUSH
16700: CALL_OW 69
16704: ST_TO_ADDR
// if not tmp then
16705: LD_VAR 0 1
16709: NOT
16710: IFFALSE 16714
// exit ;
16712: GO 16740
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16714: LD_VAR 0 1
16718: PUSH
16719: LD_INT 1
16721: PPUSH
16722: LD_VAR 0 1
16726: PPUSH
16727: CALL_OW 12
16731: ARRAY
16732: PPUSH
16733: LD_INT 100
16735: PPUSH
16736: CALL_OW 234
// end ;
16740: PPOPN 1
16742: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16743: LD_EXP 26
16747: PUSH
16748: LD_EXP 40
16752: AND
16753: IFFALSE 16851
16755: GO 16757
16757: DISABLE
16758: LD_INT 0
16760: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16761: LD_ADDR_VAR 0 1
16765: PUSH
16766: LD_INT 22
16768: PUSH
16769: LD_OWVAR 2
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: LD_INT 21
16780: PUSH
16781: LD_INT 1
16783: PUSH
16784: EMPTY
16785: LIST
16786: LIST
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PPUSH
16792: CALL_OW 69
16796: ST_TO_ADDR
// if not tmp then
16797: LD_VAR 0 1
16801: NOT
16802: IFFALSE 16806
// exit ;
16804: GO 16851
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16806: LD_VAR 0 1
16810: PUSH
16811: LD_INT 1
16813: PPUSH
16814: LD_VAR 0 1
16818: PPUSH
16819: CALL_OW 12
16823: ARRAY
16824: PPUSH
16825: LD_INT 1
16827: PPUSH
16828: LD_INT 4
16830: PPUSH
16831: CALL_OW 12
16835: PPUSH
16836: LD_INT 3000
16838: PPUSH
16839: LD_INT 9000
16841: PPUSH
16842: CALL_OW 12
16846: PPUSH
16847: CALL_OW 492
// end ;
16851: PPOPN 1
16853: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16854: LD_EXP 26
16858: PUSH
16859: LD_EXP 41
16863: AND
16864: IFFALSE 16884
16866: GO 16868
16868: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16869: LD_INT 1
16871: PPUSH
16872: LD_OWVAR 2
16876: PPUSH
16877: LD_INT 0
16879: PPUSH
16880: CALL_OW 324
16884: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16885: LD_EXP 26
16889: PUSH
16890: LD_EXP 42
16894: AND
16895: IFFALSE 16978
16897: GO 16899
16899: DISABLE
16900: LD_INT 0
16902: PPUSH
16903: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16904: LD_ADDR_VAR 0 2
16908: PUSH
16909: LD_INT 22
16911: PUSH
16912: LD_OWVAR 2
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: PUSH
16921: LD_INT 21
16923: PUSH
16924: LD_INT 3
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PPUSH
16935: CALL_OW 69
16939: ST_TO_ADDR
// if not tmp then
16940: LD_VAR 0 2
16944: NOT
16945: IFFALSE 16949
// exit ;
16947: GO 16978
// for i in tmp do
16949: LD_ADDR_VAR 0 1
16953: PUSH
16954: LD_VAR 0 2
16958: PUSH
16959: FOR_IN
16960: IFFALSE 16976
// SetBLevel ( i , 10 ) ;
16962: LD_VAR 0 1
16966: PPUSH
16967: LD_INT 10
16969: PPUSH
16970: CALL_OW 241
16974: GO 16959
16976: POP
16977: POP
// end ;
16978: PPOPN 2
16980: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16981: LD_EXP 26
16985: PUSH
16986: LD_EXP 43
16990: AND
16991: IFFALSE 17102
16993: GO 16995
16995: DISABLE
16996: LD_INT 0
16998: PPUSH
16999: PPUSH
17000: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17001: LD_ADDR_VAR 0 3
17005: PUSH
17006: LD_INT 22
17008: PUSH
17009: LD_OWVAR 2
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: PUSH
17018: LD_INT 25
17020: PUSH
17021: LD_INT 1
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: PPUSH
17032: CALL_OW 69
17036: ST_TO_ADDR
// if not tmp then
17037: LD_VAR 0 3
17041: NOT
17042: IFFALSE 17046
// exit ;
17044: GO 17102
// un := tmp [ rand ( 1 , tmp ) ] ;
17046: LD_ADDR_VAR 0 2
17050: PUSH
17051: LD_VAR 0 3
17055: PUSH
17056: LD_INT 1
17058: PPUSH
17059: LD_VAR 0 3
17063: PPUSH
17064: CALL_OW 12
17068: ARRAY
17069: ST_TO_ADDR
// if Crawls ( un ) then
17070: LD_VAR 0 2
17074: PPUSH
17075: CALL_OW 318
17079: IFFALSE 17090
// ComWalk ( un ) ;
17081: LD_VAR 0 2
17085: PPUSH
17086: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17090: LD_VAR 0 2
17094: PPUSH
17095: LD_INT 5
17097: PPUSH
17098: CALL_OW 336
// end ;
17102: PPOPN 3
17104: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17105: LD_EXP 26
17109: PUSH
17110: LD_EXP 44
17114: AND
17115: PUSH
17116: LD_OWVAR 67
17120: PUSH
17121: LD_INT 4
17123: LESS
17124: AND
17125: IFFALSE 17144
17127: GO 17129
17129: DISABLE
// begin Difficulty := Difficulty + 1 ;
17130: LD_ADDR_OWVAR 67
17134: PUSH
17135: LD_OWVAR 67
17139: PUSH
17140: LD_INT 1
17142: PLUS
17143: ST_TO_ADDR
// end ;
17144: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17145: LD_EXP 26
17149: PUSH
17150: LD_EXP 45
17154: AND
17155: IFFALSE 17258
17157: GO 17159
17159: DISABLE
17160: LD_INT 0
17162: PPUSH
// begin for i := 1 to 5 do
17163: LD_ADDR_VAR 0 1
17167: PUSH
17168: DOUBLE
17169: LD_INT 1
17171: DEC
17172: ST_TO_ADDR
17173: LD_INT 5
17175: PUSH
17176: FOR_TO
17177: IFFALSE 17256
// begin uc_nation := nation_nature ;
17179: LD_ADDR_OWVAR 21
17183: PUSH
17184: LD_INT 0
17186: ST_TO_ADDR
// uc_side := 0 ;
17187: LD_ADDR_OWVAR 20
17191: PUSH
17192: LD_INT 0
17194: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17195: LD_ADDR_OWVAR 29
17199: PUSH
17200: LD_INT 12
17202: PUSH
17203: LD_INT 12
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: ST_TO_ADDR
// hc_agressivity := 20 ;
17210: LD_ADDR_OWVAR 35
17214: PUSH
17215: LD_INT 20
17217: ST_TO_ADDR
// hc_class := class_tiger ;
17218: LD_ADDR_OWVAR 28
17222: PUSH
17223: LD_INT 14
17225: ST_TO_ADDR
// hc_gallery :=  ;
17226: LD_ADDR_OWVAR 33
17230: PUSH
17231: LD_STRING 
17233: ST_TO_ADDR
// hc_name :=  ;
17234: LD_ADDR_OWVAR 26
17238: PUSH
17239: LD_STRING 
17241: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17242: CALL_OW 44
17246: PPUSH
17247: LD_INT 0
17249: PPUSH
17250: CALL_OW 51
// end ;
17254: GO 17176
17256: POP
17257: POP
// end ;
17258: PPOPN 1
17260: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17261: LD_EXP 26
17265: PUSH
17266: LD_EXP 46
17270: AND
17271: IFFALSE 17280
17273: GO 17275
17275: DISABLE
// StreamSibBomb ;
17276: CALL 17281 0 0
17280: END
// export function StreamSibBomb ; var i , x , y ; begin
17281: LD_INT 0
17283: PPUSH
17284: PPUSH
17285: PPUSH
17286: PPUSH
// result := false ;
17287: LD_ADDR_VAR 0 1
17291: PUSH
17292: LD_INT 0
17294: ST_TO_ADDR
// for i := 1 to 16 do
17295: LD_ADDR_VAR 0 2
17299: PUSH
17300: DOUBLE
17301: LD_INT 1
17303: DEC
17304: ST_TO_ADDR
17305: LD_INT 16
17307: PUSH
17308: FOR_TO
17309: IFFALSE 17508
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17311: LD_ADDR_VAR 0 3
17315: PUSH
17316: LD_INT 10
17318: PUSH
17319: LD_INT 20
17321: PUSH
17322: LD_INT 30
17324: PUSH
17325: LD_INT 40
17327: PUSH
17328: LD_INT 50
17330: PUSH
17331: LD_INT 60
17333: PUSH
17334: LD_INT 70
17336: PUSH
17337: LD_INT 80
17339: PUSH
17340: LD_INT 90
17342: PUSH
17343: LD_INT 100
17345: PUSH
17346: LD_INT 110
17348: PUSH
17349: LD_INT 120
17351: PUSH
17352: LD_INT 130
17354: PUSH
17355: LD_INT 140
17357: PUSH
17358: LD_INT 150
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: LIST
17365: LIST
17366: LIST
17367: LIST
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: PUSH
17378: LD_INT 1
17380: PPUSH
17381: LD_INT 15
17383: PPUSH
17384: CALL_OW 12
17388: ARRAY
17389: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17390: LD_ADDR_VAR 0 4
17394: PUSH
17395: LD_INT 10
17397: PUSH
17398: LD_INT 20
17400: PUSH
17401: LD_INT 30
17403: PUSH
17404: LD_INT 40
17406: PUSH
17407: LD_INT 50
17409: PUSH
17410: LD_INT 60
17412: PUSH
17413: LD_INT 70
17415: PUSH
17416: LD_INT 80
17418: PUSH
17419: LD_INT 90
17421: PUSH
17422: LD_INT 100
17424: PUSH
17425: LD_INT 110
17427: PUSH
17428: LD_INT 120
17430: PUSH
17431: LD_INT 130
17433: PUSH
17434: LD_INT 140
17436: PUSH
17437: LD_INT 150
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: PUSH
17457: LD_INT 1
17459: PPUSH
17460: LD_INT 15
17462: PPUSH
17463: CALL_OW 12
17467: ARRAY
17468: ST_TO_ADDR
// if ValidHex ( x , y ) then
17469: LD_VAR 0 3
17473: PPUSH
17474: LD_VAR 0 4
17478: PPUSH
17479: CALL_OW 488
17483: IFFALSE 17506
// begin result := [ x , y ] ;
17485: LD_ADDR_VAR 0 1
17489: PUSH
17490: LD_VAR 0 3
17494: PUSH
17495: LD_VAR 0 4
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: ST_TO_ADDR
// break ;
17504: GO 17508
// end ; end ;
17506: GO 17308
17508: POP
17509: POP
// if result then
17510: LD_VAR 0 1
17514: IFFALSE 17574
// begin ToLua ( playSibBomb() ) ;
17516: LD_STRING playSibBomb()
17518: PPUSH
17519: CALL_OW 559
// wait ( 0 0$14 ) ;
17523: LD_INT 490
17525: PPUSH
17526: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17530: LD_VAR 0 1
17534: PUSH
17535: LD_INT 1
17537: ARRAY
17538: PPUSH
17539: LD_VAR 0 1
17543: PUSH
17544: LD_INT 2
17546: ARRAY
17547: PPUSH
17548: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17552: LD_VAR 0 1
17556: PUSH
17557: LD_INT 1
17559: ARRAY
17560: PPUSH
17561: LD_VAR 0 1
17565: PUSH
17566: LD_INT 2
17568: ARRAY
17569: PPUSH
17570: CALL_OW 429
// end ; end ;
17574: LD_VAR 0 1
17578: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17579: LD_EXP 26
17583: PUSH
17584: LD_EXP 48
17588: AND
17589: IFFALSE 17601
17591: GO 17593
17593: DISABLE
// YouLost (  ) ;
17594: LD_STRING 
17596: PPUSH
17597: CALL_OW 104
17601: END
// every 0 0$1 trigger StreamModeActive and sFog do
17602: LD_EXP 26
17606: PUSH
17607: LD_EXP 47
17611: AND
17612: IFFALSE 17626
17614: GO 17616
17616: DISABLE
// FogOff ( your_side ) ;
17617: LD_OWVAR 2
17621: PPUSH
17622: CALL_OW 344
17626: END
// every 0 0$1 trigger StreamModeActive and sSun do
17627: LD_EXP 26
17631: PUSH
17632: LD_EXP 49
17636: AND
17637: IFFALSE 17665
17639: GO 17641
17641: DISABLE
// begin solar_recharge_percent := 0 ;
17642: LD_ADDR_OWVAR 79
17646: PUSH
17647: LD_INT 0
17649: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17650: LD_INT 10500
17652: PPUSH
17653: CALL_OW 67
// solar_recharge_percent := 100 ;
17657: LD_ADDR_OWVAR 79
17661: PUSH
17662: LD_INT 100
17664: ST_TO_ADDR
// end ;
17665: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17666: LD_EXP 26
17670: PUSH
17671: LD_EXP 50
17675: AND
17676: IFFALSE 17915
17678: GO 17680
17680: DISABLE
17681: LD_INT 0
17683: PPUSH
17684: PPUSH
17685: PPUSH
// begin tmp := [ ] ;
17686: LD_ADDR_VAR 0 3
17690: PUSH
17691: EMPTY
17692: ST_TO_ADDR
// for i := 1 to 6 do
17693: LD_ADDR_VAR 0 1
17697: PUSH
17698: DOUBLE
17699: LD_INT 1
17701: DEC
17702: ST_TO_ADDR
17703: LD_INT 6
17705: PUSH
17706: FOR_TO
17707: IFFALSE 17812
// begin uc_nation := nation_nature ;
17709: LD_ADDR_OWVAR 21
17713: PUSH
17714: LD_INT 0
17716: ST_TO_ADDR
// uc_side := 0 ;
17717: LD_ADDR_OWVAR 20
17721: PUSH
17722: LD_INT 0
17724: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17725: LD_ADDR_OWVAR 29
17729: PUSH
17730: LD_INT 12
17732: PUSH
17733: LD_INT 12
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: ST_TO_ADDR
// hc_agressivity := 20 ;
17740: LD_ADDR_OWVAR 35
17744: PUSH
17745: LD_INT 20
17747: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17748: LD_ADDR_OWVAR 28
17752: PUSH
17753: LD_INT 17
17755: ST_TO_ADDR
// hc_gallery :=  ;
17756: LD_ADDR_OWVAR 33
17760: PUSH
17761: LD_STRING 
17763: ST_TO_ADDR
// hc_name :=  ;
17764: LD_ADDR_OWVAR 26
17768: PUSH
17769: LD_STRING 
17771: ST_TO_ADDR
// un := CreateHuman ;
17772: LD_ADDR_VAR 0 2
17776: PUSH
17777: CALL_OW 44
17781: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17782: LD_VAR 0 2
17786: PPUSH
17787: LD_INT 1
17789: PPUSH
17790: CALL_OW 51
// tmp := tmp ^ un ;
17794: LD_ADDR_VAR 0 3
17798: PUSH
17799: LD_VAR 0 3
17803: PUSH
17804: LD_VAR 0 2
17808: ADD
17809: ST_TO_ADDR
// end ;
17810: GO 17706
17812: POP
17813: POP
// repeat wait ( 0 0$1 ) ;
17814: LD_INT 35
17816: PPUSH
17817: CALL_OW 67
// for un in tmp do
17821: LD_ADDR_VAR 0 2
17825: PUSH
17826: LD_VAR 0 3
17830: PUSH
17831: FOR_IN
17832: IFFALSE 17906
// begin if IsDead ( un ) then
17834: LD_VAR 0 2
17838: PPUSH
17839: CALL_OW 301
17843: IFFALSE 17863
// begin tmp := tmp diff un ;
17845: LD_ADDR_VAR 0 3
17849: PUSH
17850: LD_VAR 0 3
17854: PUSH
17855: LD_VAR 0 2
17859: DIFF
17860: ST_TO_ADDR
// continue ;
17861: GO 17831
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17863: LD_VAR 0 2
17867: PPUSH
17868: LD_INT 3
17870: PUSH
17871: LD_INT 22
17873: PUSH
17874: LD_INT 0
17876: PUSH
17877: EMPTY
17878: LIST
17879: LIST
17880: PUSH
17881: EMPTY
17882: LIST
17883: LIST
17884: PPUSH
17885: CALL_OW 69
17889: PPUSH
17890: LD_VAR 0 2
17894: PPUSH
17895: CALL_OW 74
17899: PPUSH
17900: CALL_OW 115
// end ;
17904: GO 17831
17906: POP
17907: POP
// until not tmp ;
17908: LD_VAR 0 3
17912: NOT
17913: IFFALSE 17814
// end ;
17915: PPOPN 3
17917: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17918: LD_EXP 26
17922: PUSH
17923: LD_EXP 51
17927: AND
17928: IFFALSE 17982
17930: GO 17932
17932: DISABLE
// begin ToLua ( displayTroll(); ) ;
17933: LD_STRING displayTroll();
17935: PPUSH
17936: CALL_OW 559
// wait ( 3 3$00 ) ;
17940: LD_INT 6300
17942: PPUSH
17943: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17947: LD_STRING hideTroll();
17949: PPUSH
17950: CALL_OW 559
// wait ( 1 1$00 ) ;
17954: LD_INT 2100
17956: PPUSH
17957: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17961: LD_STRING displayTroll();
17963: PPUSH
17964: CALL_OW 559
// wait ( 1 1$00 ) ;
17968: LD_INT 2100
17970: PPUSH
17971: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17975: LD_STRING hideTroll();
17977: PPUSH
17978: CALL_OW 559
// end ;
17982: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17983: LD_EXP 26
17987: PUSH
17988: LD_EXP 52
17992: AND
17993: IFFALSE 18056
17995: GO 17997
17997: DISABLE
17998: LD_INT 0
18000: PPUSH
// begin p := 0 ;
18001: LD_ADDR_VAR 0 1
18005: PUSH
18006: LD_INT 0
18008: ST_TO_ADDR
// repeat game_speed := 1 ;
18009: LD_ADDR_OWVAR 65
18013: PUSH
18014: LD_INT 1
18016: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18017: LD_INT 35
18019: PPUSH
18020: CALL_OW 67
// p := p + 1 ;
18024: LD_ADDR_VAR 0 1
18028: PUSH
18029: LD_VAR 0 1
18033: PUSH
18034: LD_INT 1
18036: PLUS
18037: ST_TO_ADDR
// until p >= 60 ;
18038: LD_VAR 0 1
18042: PUSH
18043: LD_INT 60
18045: GREATEREQUAL
18046: IFFALSE 18009
// game_speed := 4 ;
18048: LD_ADDR_OWVAR 65
18052: PUSH
18053: LD_INT 4
18055: ST_TO_ADDR
// end ;
18056: PPOPN 1
18058: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18059: LD_EXP 26
18063: PUSH
18064: LD_EXP 53
18068: AND
18069: IFFALSE 18215
18071: GO 18073
18073: DISABLE
18074: LD_INT 0
18076: PPUSH
18077: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18078: LD_ADDR_VAR 0 1
18082: PUSH
18083: LD_INT 22
18085: PUSH
18086: LD_OWVAR 2
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PUSH
18095: LD_INT 2
18097: PUSH
18098: LD_INT 30
18100: PUSH
18101: LD_INT 0
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: PUSH
18108: LD_INT 30
18110: PUSH
18111: LD_INT 1
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: LIST
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PPUSH
18127: CALL_OW 69
18131: ST_TO_ADDR
// if not depot then
18132: LD_VAR 0 1
18136: NOT
18137: IFFALSE 18141
// exit ;
18139: GO 18215
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18141: LD_ADDR_VAR 0 2
18145: PUSH
18146: LD_VAR 0 1
18150: PUSH
18151: LD_INT 1
18153: PPUSH
18154: LD_VAR 0 1
18158: PPUSH
18159: CALL_OW 12
18163: ARRAY
18164: PPUSH
18165: CALL_OW 274
18169: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18170: LD_VAR 0 2
18174: PPUSH
18175: LD_INT 1
18177: PPUSH
18178: LD_INT 0
18180: PPUSH
18181: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18185: LD_VAR 0 2
18189: PPUSH
18190: LD_INT 2
18192: PPUSH
18193: LD_INT 0
18195: PPUSH
18196: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18200: LD_VAR 0 2
18204: PPUSH
18205: LD_INT 3
18207: PPUSH
18208: LD_INT 0
18210: PPUSH
18211: CALL_OW 277
// end ;
18215: PPOPN 2
18217: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18218: LD_EXP 26
18222: PUSH
18223: LD_EXP 54
18227: AND
18228: IFFALSE 18325
18230: GO 18232
18232: DISABLE
18233: LD_INT 0
18235: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18236: LD_ADDR_VAR 0 1
18240: PUSH
18241: LD_INT 22
18243: PUSH
18244: LD_OWVAR 2
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: LD_INT 21
18255: PUSH
18256: LD_INT 1
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: PUSH
18263: LD_INT 3
18265: PUSH
18266: LD_INT 23
18268: PUSH
18269: LD_INT 0
18271: PUSH
18272: EMPTY
18273: LIST
18274: LIST
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: LIST
18284: PPUSH
18285: CALL_OW 69
18289: ST_TO_ADDR
// if not tmp then
18290: LD_VAR 0 1
18294: NOT
18295: IFFALSE 18299
// exit ;
18297: GO 18325
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18299: LD_VAR 0 1
18303: PUSH
18304: LD_INT 1
18306: PPUSH
18307: LD_VAR 0 1
18311: PPUSH
18312: CALL_OW 12
18316: ARRAY
18317: PPUSH
18318: LD_INT 200
18320: PPUSH
18321: CALL_OW 234
// end ;
18325: PPOPN 1
18327: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18328: LD_EXP 26
18332: PUSH
18333: LD_EXP 55
18337: AND
18338: IFFALSE 18417
18340: GO 18342
18342: DISABLE
18343: LD_INT 0
18345: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18346: LD_ADDR_VAR 0 1
18350: PUSH
18351: LD_INT 22
18353: PUSH
18354: LD_OWVAR 2
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: PUSH
18363: LD_INT 21
18365: PUSH
18366: LD_INT 2
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PPUSH
18377: CALL_OW 69
18381: ST_TO_ADDR
// if not tmp then
18382: LD_VAR 0 1
18386: NOT
18387: IFFALSE 18391
// exit ;
18389: GO 18417
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18391: LD_VAR 0 1
18395: PUSH
18396: LD_INT 1
18398: PPUSH
18399: LD_VAR 0 1
18403: PPUSH
18404: CALL_OW 12
18408: ARRAY
18409: PPUSH
18410: LD_INT 60
18412: PPUSH
18413: CALL_OW 234
// end ;
18417: PPOPN 1
18419: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18420: LD_EXP 26
18424: PUSH
18425: LD_EXP 56
18429: AND
18430: IFFALSE 18529
18432: GO 18434
18434: DISABLE
18435: LD_INT 0
18437: PPUSH
18438: PPUSH
// begin enable ;
18439: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18440: LD_ADDR_VAR 0 1
18444: PUSH
18445: LD_INT 22
18447: PUSH
18448: LD_OWVAR 2
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: LD_INT 61
18459: PUSH
18460: EMPTY
18461: LIST
18462: PUSH
18463: LD_INT 33
18465: PUSH
18466: LD_INT 2
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: LIST
18477: PPUSH
18478: CALL_OW 69
18482: ST_TO_ADDR
// if not tmp then
18483: LD_VAR 0 1
18487: NOT
18488: IFFALSE 18492
// exit ;
18490: GO 18529
// for i in tmp do
18492: LD_ADDR_VAR 0 2
18496: PUSH
18497: LD_VAR 0 1
18501: PUSH
18502: FOR_IN
18503: IFFALSE 18527
// if IsControledBy ( i ) then
18505: LD_VAR 0 2
18509: PPUSH
18510: CALL_OW 312
18514: IFFALSE 18525
// ComUnlink ( i ) ;
18516: LD_VAR 0 2
18520: PPUSH
18521: CALL_OW 136
18525: GO 18502
18527: POP
18528: POP
// end ;
18529: PPOPN 2
18531: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18532: LD_EXP 26
18536: PUSH
18537: LD_EXP 57
18541: AND
18542: IFFALSE 18682
18544: GO 18546
18546: DISABLE
18547: LD_INT 0
18549: PPUSH
18550: PPUSH
// begin ToLua ( displayPowell(); ) ;
18551: LD_STRING displayPowell();
18553: PPUSH
18554: CALL_OW 559
// uc_side := 0 ;
18558: LD_ADDR_OWVAR 20
18562: PUSH
18563: LD_INT 0
18565: ST_TO_ADDR
// uc_nation := 2 ;
18566: LD_ADDR_OWVAR 21
18570: PUSH
18571: LD_INT 2
18573: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18574: LD_ADDR_OWVAR 37
18578: PUSH
18579: LD_INT 14
18581: ST_TO_ADDR
// vc_engine := engine_siberite ;
18582: LD_ADDR_OWVAR 39
18586: PUSH
18587: LD_INT 3
18589: ST_TO_ADDR
// vc_control := control_apeman ;
18590: LD_ADDR_OWVAR 38
18594: PUSH
18595: LD_INT 5
18597: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18598: LD_ADDR_OWVAR 40
18602: PUSH
18603: LD_INT 29
18605: ST_TO_ADDR
// un := CreateVehicle ;
18606: LD_ADDR_VAR 0 2
18610: PUSH
18611: CALL_OW 45
18615: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18616: LD_VAR 0 2
18620: PPUSH
18621: LD_INT 1
18623: PPUSH
18624: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18628: LD_INT 35
18630: PPUSH
18631: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18635: LD_VAR 0 2
18639: PPUSH
18640: LD_INT 22
18642: PUSH
18643: LD_OWVAR 2
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: PPUSH
18652: CALL_OW 69
18656: PPUSH
18657: LD_VAR 0 2
18661: PPUSH
18662: CALL_OW 74
18666: PPUSH
18667: CALL_OW 115
// until IsDead ( un ) ;
18671: LD_VAR 0 2
18675: PPUSH
18676: CALL_OW 301
18680: IFFALSE 18628
// end ;
18682: PPOPN 2
18684: END
// every 0 0$1 trigger StreamModeActive and sStu do
18685: LD_EXP 26
18689: PUSH
18690: LD_EXP 65
18694: AND
18695: IFFALSE 18711
18697: GO 18699
18699: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18700: LD_STRING displayStucuk();
18702: PPUSH
18703: CALL_OW 559
// ResetFog ;
18707: CALL_OW 335
// end ;
18711: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18712: LD_EXP 26
18716: PUSH
18717: LD_EXP 58
18721: AND
18722: IFFALSE 18863
18724: GO 18726
18726: DISABLE
18727: LD_INT 0
18729: PPUSH
18730: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18731: LD_ADDR_VAR 0 2
18735: PUSH
18736: LD_INT 22
18738: PUSH
18739: LD_OWVAR 2
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: LD_INT 21
18750: PUSH
18751: LD_INT 1
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PPUSH
18762: CALL_OW 69
18766: ST_TO_ADDR
// if not tmp then
18767: LD_VAR 0 2
18771: NOT
18772: IFFALSE 18776
// exit ;
18774: GO 18863
// un := tmp [ rand ( 1 , tmp ) ] ;
18776: LD_ADDR_VAR 0 1
18780: PUSH
18781: LD_VAR 0 2
18785: PUSH
18786: LD_INT 1
18788: PPUSH
18789: LD_VAR 0 2
18793: PPUSH
18794: CALL_OW 12
18798: ARRAY
18799: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18800: LD_VAR 0 1
18804: PPUSH
18805: LD_INT 0
18807: PPUSH
18808: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18812: LD_VAR 0 1
18816: PPUSH
18817: LD_OWVAR 3
18821: PUSH
18822: LD_VAR 0 1
18826: DIFF
18827: PPUSH
18828: LD_VAR 0 1
18832: PPUSH
18833: CALL_OW 74
18837: PPUSH
18838: CALL_OW 115
// wait ( 0 0$20 ) ;
18842: LD_INT 700
18844: PPUSH
18845: CALL_OW 67
// SetSide ( un , your_side ) ;
18849: LD_VAR 0 1
18853: PPUSH
18854: LD_OWVAR 2
18858: PPUSH
18859: CALL_OW 235
// end ;
18863: PPOPN 2
18865: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18866: LD_EXP 26
18870: PUSH
18871: LD_EXP 59
18875: AND
18876: IFFALSE 18982
18878: GO 18880
18880: DISABLE
18881: LD_INT 0
18883: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18884: LD_ADDR_VAR 0 1
18888: PUSH
18889: LD_INT 22
18891: PUSH
18892: LD_OWVAR 2
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PUSH
18901: LD_INT 2
18903: PUSH
18904: LD_INT 30
18906: PUSH
18907: LD_INT 0
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: PUSH
18914: LD_INT 30
18916: PUSH
18917: LD_INT 1
18919: PUSH
18920: EMPTY
18921: LIST
18922: LIST
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: LIST
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PPUSH
18933: CALL_OW 69
18937: ST_TO_ADDR
// if not depot then
18938: LD_VAR 0 1
18942: NOT
18943: IFFALSE 18947
// exit ;
18945: GO 18982
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18947: LD_VAR 0 1
18951: PUSH
18952: LD_INT 1
18954: ARRAY
18955: PPUSH
18956: CALL_OW 250
18960: PPUSH
18961: LD_VAR 0 1
18965: PUSH
18966: LD_INT 1
18968: ARRAY
18969: PPUSH
18970: CALL_OW 251
18974: PPUSH
18975: LD_INT 70
18977: PPUSH
18978: CALL_OW 495
// end ;
18982: PPOPN 1
18984: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18985: LD_EXP 26
18989: PUSH
18990: LD_EXP 60
18994: AND
18995: IFFALSE 19206
18997: GO 18999
18999: DISABLE
19000: LD_INT 0
19002: PPUSH
19003: PPUSH
19004: PPUSH
19005: PPUSH
19006: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19007: LD_ADDR_VAR 0 5
19011: PUSH
19012: LD_INT 22
19014: PUSH
19015: LD_OWVAR 2
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 21
19026: PUSH
19027: LD_INT 1
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PPUSH
19038: CALL_OW 69
19042: ST_TO_ADDR
// if not tmp then
19043: LD_VAR 0 5
19047: NOT
19048: IFFALSE 19052
// exit ;
19050: GO 19206
// for i in tmp do
19052: LD_ADDR_VAR 0 1
19056: PUSH
19057: LD_VAR 0 5
19061: PUSH
19062: FOR_IN
19063: IFFALSE 19204
// begin d := rand ( 0 , 5 ) ;
19065: LD_ADDR_VAR 0 4
19069: PUSH
19070: LD_INT 0
19072: PPUSH
19073: LD_INT 5
19075: PPUSH
19076: CALL_OW 12
19080: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19081: LD_ADDR_VAR 0 2
19085: PUSH
19086: LD_VAR 0 1
19090: PPUSH
19091: CALL_OW 250
19095: PPUSH
19096: LD_VAR 0 4
19100: PPUSH
19101: LD_INT 3
19103: PPUSH
19104: LD_INT 12
19106: PPUSH
19107: CALL_OW 12
19111: PPUSH
19112: CALL_OW 272
19116: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19117: LD_ADDR_VAR 0 3
19121: PUSH
19122: LD_VAR 0 1
19126: PPUSH
19127: CALL_OW 251
19131: PPUSH
19132: LD_VAR 0 4
19136: PPUSH
19137: LD_INT 3
19139: PPUSH
19140: LD_INT 12
19142: PPUSH
19143: CALL_OW 12
19147: PPUSH
19148: CALL_OW 273
19152: ST_TO_ADDR
// if ValidHex ( x , y ) then
19153: LD_VAR 0 2
19157: PPUSH
19158: LD_VAR 0 3
19162: PPUSH
19163: CALL_OW 488
19167: IFFALSE 19202
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19169: LD_VAR 0 1
19173: PPUSH
19174: LD_VAR 0 2
19178: PPUSH
19179: LD_VAR 0 3
19183: PPUSH
19184: LD_INT 3
19186: PPUSH
19187: LD_INT 6
19189: PPUSH
19190: CALL_OW 12
19194: PPUSH
19195: LD_INT 1
19197: PPUSH
19198: CALL_OW 483
// end ;
19202: GO 19062
19204: POP
19205: POP
// end ;
19206: PPOPN 5
19208: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19209: LD_EXP 26
19213: PUSH
19214: LD_EXP 61
19218: AND
19219: IFFALSE 19313
19221: GO 19223
19223: DISABLE
19224: LD_INT 0
19226: PPUSH
19227: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19228: LD_ADDR_VAR 0 2
19232: PUSH
19233: LD_INT 22
19235: PUSH
19236: LD_OWVAR 2
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: PUSH
19245: LD_INT 32
19247: PUSH
19248: LD_INT 1
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PUSH
19255: LD_INT 21
19257: PUSH
19258: LD_INT 2
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: LIST
19269: PPUSH
19270: CALL_OW 69
19274: ST_TO_ADDR
// if not tmp then
19275: LD_VAR 0 2
19279: NOT
19280: IFFALSE 19284
// exit ;
19282: GO 19313
// for i in tmp do
19284: LD_ADDR_VAR 0 1
19288: PUSH
19289: LD_VAR 0 2
19293: PUSH
19294: FOR_IN
19295: IFFALSE 19311
// SetFuel ( i , 0 ) ;
19297: LD_VAR 0 1
19301: PPUSH
19302: LD_INT 0
19304: PPUSH
19305: CALL_OW 240
19309: GO 19294
19311: POP
19312: POP
// end ;
19313: PPOPN 2
19315: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19316: LD_EXP 26
19320: PUSH
19321: LD_EXP 62
19325: AND
19326: IFFALSE 19392
19328: GO 19330
19330: DISABLE
19331: LD_INT 0
19333: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19334: LD_ADDR_VAR 0 1
19338: PUSH
19339: LD_INT 22
19341: PUSH
19342: LD_OWVAR 2
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PUSH
19351: LD_INT 30
19353: PUSH
19354: LD_INT 29
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: PPUSH
19365: CALL_OW 69
19369: ST_TO_ADDR
// if not tmp then
19370: LD_VAR 0 1
19374: NOT
19375: IFFALSE 19379
// exit ;
19377: GO 19392
// DestroyUnit ( tmp [ 1 ] ) ;
19379: LD_VAR 0 1
19383: PUSH
19384: LD_INT 1
19386: ARRAY
19387: PPUSH
19388: CALL_OW 65
// end ;
19392: PPOPN 1
19394: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19395: LD_EXP 26
19399: PUSH
19400: LD_EXP 64
19404: AND
19405: IFFALSE 19534
19407: GO 19409
19409: DISABLE
19410: LD_INT 0
19412: PPUSH
// begin uc_side := 0 ;
19413: LD_ADDR_OWVAR 20
19417: PUSH
19418: LD_INT 0
19420: ST_TO_ADDR
// uc_nation := nation_arabian ;
19421: LD_ADDR_OWVAR 21
19425: PUSH
19426: LD_INT 2
19428: ST_TO_ADDR
// hc_gallery :=  ;
19429: LD_ADDR_OWVAR 33
19433: PUSH
19434: LD_STRING 
19436: ST_TO_ADDR
// hc_name :=  ;
19437: LD_ADDR_OWVAR 26
19441: PUSH
19442: LD_STRING 
19444: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19445: LD_INT 1
19447: PPUSH
19448: LD_INT 11
19450: PPUSH
19451: LD_INT 10
19453: PPUSH
19454: CALL_OW 380
// un := CreateHuman ;
19458: LD_ADDR_VAR 0 1
19462: PUSH
19463: CALL_OW 44
19467: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19468: LD_VAR 0 1
19472: PPUSH
19473: LD_INT 1
19475: PPUSH
19476: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19480: LD_INT 35
19482: PPUSH
19483: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19487: LD_VAR 0 1
19491: PPUSH
19492: LD_INT 22
19494: PUSH
19495: LD_OWVAR 2
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PPUSH
19504: CALL_OW 69
19508: PPUSH
19509: LD_VAR 0 1
19513: PPUSH
19514: CALL_OW 74
19518: PPUSH
19519: CALL_OW 115
// until IsDead ( un ) ;
19523: LD_VAR 0 1
19527: PPUSH
19528: CALL_OW 301
19532: IFFALSE 19480
// end ;
19534: PPOPN 1
19536: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19537: LD_EXP 26
19541: PUSH
19542: LD_EXP 66
19546: AND
19547: IFFALSE 19559
19549: GO 19551
19551: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19552: LD_STRING earthquake(getX(game), 0, 32)
19554: PPUSH
19555: CALL_OW 559
19559: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19560: LD_EXP 26
19564: PUSH
19565: LD_EXP 67
19569: AND
19570: IFFALSE 19661
19572: GO 19574
19574: DISABLE
19575: LD_INT 0
19577: PPUSH
// begin enable ;
19578: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19579: LD_ADDR_VAR 0 1
19583: PUSH
19584: LD_INT 22
19586: PUSH
19587: LD_OWVAR 2
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: LD_INT 21
19598: PUSH
19599: LD_INT 2
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 33
19608: PUSH
19609: LD_INT 3
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: LIST
19620: PPUSH
19621: CALL_OW 69
19625: ST_TO_ADDR
// if not tmp then
19626: LD_VAR 0 1
19630: NOT
19631: IFFALSE 19635
// exit ;
19633: GO 19661
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19635: LD_VAR 0 1
19639: PUSH
19640: LD_INT 1
19642: PPUSH
19643: LD_VAR 0 1
19647: PPUSH
19648: CALL_OW 12
19652: ARRAY
19653: PPUSH
19654: LD_INT 1
19656: PPUSH
19657: CALL_OW 234
// end ;
19661: PPOPN 1
19663: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19664: LD_EXP 26
19668: PUSH
19669: LD_EXP 68
19673: AND
19674: IFFALSE 19815
19676: GO 19678
19678: DISABLE
19679: LD_INT 0
19681: PPUSH
19682: PPUSH
19683: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19684: LD_ADDR_VAR 0 3
19688: PUSH
19689: LD_INT 22
19691: PUSH
19692: LD_OWVAR 2
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PUSH
19701: LD_INT 25
19703: PUSH
19704: LD_INT 1
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PPUSH
19715: CALL_OW 69
19719: ST_TO_ADDR
// if not tmp then
19720: LD_VAR 0 3
19724: NOT
19725: IFFALSE 19729
// exit ;
19727: GO 19815
// un := tmp [ rand ( 1 , tmp ) ] ;
19729: LD_ADDR_VAR 0 2
19733: PUSH
19734: LD_VAR 0 3
19738: PUSH
19739: LD_INT 1
19741: PPUSH
19742: LD_VAR 0 3
19746: PPUSH
19747: CALL_OW 12
19751: ARRAY
19752: ST_TO_ADDR
// if Crawls ( un ) then
19753: LD_VAR 0 2
19757: PPUSH
19758: CALL_OW 318
19762: IFFALSE 19773
// ComWalk ( un ) ;
19764: LD_VAR 0 2
19768: PPUSH
19769: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19773: LD_VAR 0 2
19777: PPUSH
19778: LD_INT 9
19780: PPUSH
19781: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19785: LD_INT 28
19787: PPUSH
19788: LD_OWVAR 2
19792: PPUSH
19793: LD_INT 2
19795: PPUSH
19796: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19800: LD_INT 29
19802: PPUSH
19803: LD_OWVAR 2
19807: PPUSH
19808: LD_INT 2
19810: PPUSH
19811: CALL_OW 322
// end ;
19815: PPOPN 3
19817: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19818: LD_EXP 26
19822: PUSH
19823: LD_EXP 69
19827: AND
19828: IFFALSE 19939
19830: GO 19832
19832: DISABLE
19833: LD_INT 0
19835: PPUSH
19836: PPUSH
19837: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19838: LD_ADDR_VAR 0 3
19842: PUSH
19843: LD_INT 22
19845: PUSH
19846: LD_OWVAR 2
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: PUSH
19855: LD_INT 25
19857: PUSH
19858: LD_INT 1
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: PPUSH
19869: CALL_OW 69
19873: ST_TO_ADDR
// if not tmp then
19874: LD_VAR 0 3
19878: NOT
19879: IFFALSE 19883
// exit ;
19881: GO 19939
// un := tmp [ rand ( 1 , tmp ) ] ;
19883: LD_ADDR_VAR 0 2
19887: PUSH
19888: LD_VAR 0 3
19892: PUSH
19893: LD_INT 1
19895: PPUSH
19896: LD_VAR 0 3
19900: PPUSH
19901: CALL_OW 12
19905: ARRAY
19906: ST_TO_ADDR
// if Crawls ( un ) then
19907: LD_VAR 0 2
19911: PPUSH
19912: CALL_OW 318
19916: IFFALSE 19927
// ComWalk ( un ) ;
19918: LD_VAR 0 2
19922: PPUSH
19923: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19927: LD_VAR 0 2
19931: PPUSH
19932: LD_INT 8
19934: PPUSH
19935: CALL_OW 336
// end ;
19939: PPOPN 3
19941: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19942: LD_EXP 26
19946: PUSH
19947: LD_EXP 70
19951: AND
19952: IFFALSE 20096
19954: GO 19956
19956: DISABLE
19957: LD_INT 0
19959: PPUSH
19960: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19961: LD_ADDR_VAR 0 2
19965: PUSH
19966: LD_INT 22
19968: PUSH
19969: LD_OWVAR 2
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: PUSH
19978: LD_INT 21
19980: PUSH
19981: LD_INT 2
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: PUSH
19988: LD_INT 2
19990: PUSH
19991: LD_INT 34
19993: PUSH
19994: LD_INT 12
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: LD_INT 34
20003: PUSH
20004: LD_INT 51
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: LD_INT 34
20013: PUSH
20014: LD_INT 32
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: LIST
20031: PPUSH
20032: CALL_OW 69
20036: ST_TO_ADDR
// if not tmp then
20037: LD_VAR 0 2
20041: NOT
20042: IFFALSE 20046
// exit ;
20044: GO 20096
// for i in tmp do
20046: LD_ADDR_VAR 0 1
20050: PUSH
20051: LD_VAR 0 2
20055: PUSH
20056: FOR_IN
20057: IFFALSE 20094
// if GetCargo ( i , mat_artifact ) = 0 then
20059: LD_VAR 0 1
20063: PPUSH
20064: LD_INT 4
20066: PPUSH
20067: CALL_OW 289
20071: PUSH
20072: LD_INT 0
20074: EQUAL
20075: IFFALSE 20092
// SetCargo ( i , mat_siberit , 100 ) ;
20077: LD_VAR 0 1
20081: PPUSH
20082: LD_INT 3
20084: PPUSH
20085: LD_INT 100
20087: PPUSH
20088: CALL_OW 290
20092: GO 20056
20094: POP
20095: POP
// end ;
20096: PPOPN 2
20098: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20099: LD_EXP 26
20103: PUSH
20104: LD_EXP 71
20108: AND
20109: IFFALSE 20292
20111: GO 20113
20113: DISABLE
20114: LD_INT 0
20116: PPUSH
20117: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20118: LD_ADDR_VAR 0 2
20122: PUSH
20123: LD_INT 22
20125: PUSH
20126: LD_OWVAR 2
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: PPUSH
20135: CALL_OW 69
20139: ST_TO_ADDR
// if not tmp then
20140: LD_VAR 0 2
20144: NOT
20145: IFFALSE 20149
// exit ;
20147: GO 20292
// for i := 1 to 2 do
20149: LD_ADDR_VAR 0 1
20153: PUSH
20154: DOUBLE
20155: LD_INT 1
20157: DEC
20158: ST_TO_ADDR
20159: LD_INT 2
20161: PUSH
20162: FOR_TO
20163: IFFALSE 20290
// begin uc_side := your_side ;
20165: LD_ADDR_OWVAR 20
20169: PUSH
20170: LD_OWVAR 2
20174: ST_TO_ADDR
// uc_nation := nation_american ;
20175: LD_ADDR_OWVAR 21
20179: PUSH
20180: LD_INT 1
20182: ST_TO_ADDR
// vc_chassis := us_morphling ;
20183: LD_ADDR_OWVAR 37
20187: PUSH
20188: LD_INT 5
20190: ST_TO_ADDR
// vc_engine := engine_siberite ;
20191: LD_ADDR_OWVAR 39
20195: PUSH
20196: LD_INT 3
20198: ST_TO_ADDR
// vc_control := control_computer ;
20199: LD_ADDR_OWVAR 38
20203: PUSH
20204: LD_INT 3
20206: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20207: LD_ADDR_OWVAR 40
20211: PUSH
20212: LD_INT 10
20214: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20215: LD_VAR 0 2
20219: PUSH
20220: LD_INT 1
20222: ARRAY
20223: PPUSH
20224: CALL_OW 310
20228: NOT
20229: IFFALSE 20276
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20231: CALL_OW 45
20235: PPUSH
20236: LD_VAR 0 2
20240: PUSH
20241: LD_INT 1
20243: ARRAY
20244: PPUSH
20245: CALL_OW 250
20249: PPUSH
20250: LD_VAR 0 2
20254: PUSH
20255: LD_INT 1
20257: ARRAY
20258: PPUSH
20259: CALL_OW 251
20263: PPUSH
20264: LD_INT 12
20266: PPUSH
20267: LD_INT 1
20269: PPUSH
20270: CALL_OW 50
20274: GO 20288
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20276: CALL_OW 45
20280: PPUSH
20281: LD_INT 1
20283: PPUSH
20284: CALL_OW 51
// end ;
20288: GO 20162
20290: POP
20291: POP
// end ;
20292: PPOPN 2
20294: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20295: LD_EXP 26
20299: PUSH
20300: LD_EXP 72
20304: AND
20305: IFFALSE 20527
20307: GO 20309
20309: DISABLE
20310: LD_INT 0
20312: PPUSH
20313: PPUSH
20314: PPUSH
20315: PPUSH
20316: PPUSH
20317: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20318: LD_ADDR_VAR 0 6
20322: PUSH
20323: LD_INT 22
20325: PUSH
20326: LD_OWVAR 2
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: LD_INT 21
20337: PUSH
20338: LD_INT 1
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: PUSH
20345: LD_INT 3
20347: PUSH
20348: LD_INT 23
20350: PUSH
20351: LD_INT 0
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: LIST
20366: PPUSH
20367: CALL_OW 69
20371: ST_TO_ADDR
// if not tmp then
20372: LD_VAR 0 6
20376: NOT
20377: IFFALSE 20381
// exit ;
20379: GO 20527
// s1 := rand ( 1 , 4 ) ;
20381: LD_ADDR_VAR 0 2
20385: PUSH
20386: LD_INT 1
20388: PPUSH
20389: LD_INT 4
20391: PPUSH
20392: CALL_OW 12
20396: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20397: LD_ADDR_VAR 0 4
20401: PUSH
20402: LD_VAR 0 6
20406: PUSH
20407: LD_INT 1
20409: ARRAY
20410: PPUSH
20411: LD_VAR 0 2
20415: PPUSH
20416: CALL_OW 259
20420: ST_TO_ADDR
// if s1 = 1 then
20421: LD_VAR 0 2
20425: PUSH
20426: LD_INT 1
20428: EQUAL
20429: IFFALSE 20449
// s2 := rand ( 2 , 4 ) else
20431: LD_ADDR_VAR 0 3
20435: PUSH
20436: LD_INT 2
20438: PPUSH
20439: LD_INT 4
20441: PPUSH
20442: CALL_OW 12
20446: ST_TO_ADDR
20447: GO 20457
// s2 := 1 ;
20449: LD_ADDR_VAR 0 3
20453: PUSH
20454: LD_INT 1
20456: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20457: LD_ADDR_VAR 0 5
20461: PUSH
20462: LD_VAR 0 6
20466: PUSH
20467: LD_INT 1
20469: ARRAY
20470: PPUSH
20471: LD_VAR 0 3
20475: PPUSH
20476: CALL_OW 259
20480: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20481: LD_VAR 0 6
20485: PUSH
20486: LD_INT 1
20488: ARRAY
20489: PPUSH
20490: LD_VAR 0 2
20494: PPUSH
20495: LD_VAR 0 5
20499: PPUSH
20500: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20504: LD_VAR 0 6
20508: PUSH
20509: LD_INT 1
20511: ARRAY
20512: PPUSH
20513: LD_VAR 0 3
20517: PPUSH
20518: LD_VAR 0 4
20522: PPUSH
20523: CALL_OW 237
// end ;
20527: PPOPN 6
20529: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20530: LD_EXP 26
20534: PUSH
20535: LD_EXP 73
20539: AND
20540: IFFALSE 20619
20542: GO 20544
20544: DISABLE
20545: LD_INT 0
20547: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20548: LD_ADDR_VAR 0 1
20552: PUSH
20553: LD_INT 22
20555: PUSH
20556: LD_OWVAR 2
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: PUSH
20565: LD_INT 30
20567: PUSH
20568: LD_INT 3
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: PPUSH
20579: CALL_OW 69
20583: ST_TO_ADDR
// if not tmp then
20584: LD_VAR 0 1
20588: NOT
20589: IFFALSE 20593
// exit ;
20591: GO 20619
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20593: LD_VAR 0 1
20597: PUSH
20598: LD_INT 1
20600: PPUSH
20601: LD_VAR 0 1
20605: PPUSH
20606: CALL_OW 12
20610: ARRAY
20611: PPUSH
20612: LD_INT 1
20614: PPUSH
20615: CALL_OW 234
// end ;
20619: PPOPN 1
20621: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20622: LD_EXP 26
20626: PUSH
20627: LD_EXP 74
20631: AND
20632: IFFALSE 20744
20634: GO 20636
20636: DISABLE
20637: LD_INT 0
20639: PPUSH
20640: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20641: LD_ADDR_VAR 0 2
20645: PUSH
20646: LD_INT 22
20648: PUSH
20649: LD_OWVAR 2
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: PUSH
20658: LD_INT 2
20660: PUSH
20661: LD_INT 30
20663: PUSH
20664: LD_INT 27
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: LD_INT 30
20673: PUSH
20674: LD_INT 26
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 30
20683: PUSH
20684: LD_INT 28
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: PPUSH
20701: CALL_OW 69
20705: ST_TO_ADDR
// if not tmp then
20706: LD_VAR 0 2
20710: NOT
20711: IFFALSE 20715
// exit ;
20713: GO 20744
// for i in tmp do
20715: LD_ADDR_VAR 0 1
20719: PUSH
20720: LD_VAR 0 2
20724: PUSH
20725: FOR_IN
20726: IFFALSE 20742
// SetLives ( i , 1 ) ;
20728: LD_VAR 0 1
20732: PPUSH
20733: LD_INT 1
20735: PPUSH
20736: CALL_OW 234
20740: GO 20725
20742: POP
20743: POP
// end ;
20744: PPOPN 2
20746: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20747: LD_EXP 26
20751: PUSH
20752: LD_EXP 75
20756: AND
20757: IFFALSE 21044
20759: GO 20761
20761: DISABLE
20762: LD_INT 0
20764: PPUSH
20765: PPUSH
20766: PPUSH
// begin i := rand ( 1 , 7 ) ;
20767: LD_ADDR_VAR 0 1
20771: PUSH
20772: LD_INT 1
20774: PPUSH
20775: LD_INT 7
20777: PPUSH
20778: CALL_OW 12
20782: ST_TO_ADDR
// case i of 1 :
20783: LD_VAR 0 1
20787: PUSH
20788: LD_INT 1
20790: DOUBLE
20791: EQUAL
20792: IFTRUE 20796
20794: GO 20806
20796: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20797: LD_STRING earthquake(getX(game), 0, 32)
20799: PPUSH
20800: CALL_OW 559
20804: GO 21044
20806: LD_INT 2
20808: DOUBLE
20809: EQUAL
20810: IFTRUE 20814
20812: GO 20828
20814: POP
// begin ToLua ( displayStucuk(); ) ;
20815: LD_STRING displayStucuk();
20817: PPUSH
20818: CALL_OW 559
// ResetFog ;
20822: CALL_OW 335
// end ; 3 :
20826: GO 21044
20828: LD_INT 3
20830: DOUBLE
20831: EQUAL
20832: IFTRUE 20836
20834: GO 20940
20836: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20837: LD_ADDR_VAR 0 2
20841: PUSH
20842: LD_INT 22
20844: PUSH
20845: LD_OWVAR 2
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PUSH
20854: LD_INT 25
20856: PUSH
20857: LD_INT 1
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: PUSH
20864: EMPTY
20865: LIST
20866: LIST
20867: PPUSH
20868: CALL_OW 69
20872: ST_TO_ADDR
// if not tmp then
20873: LD_VAR 0 2
20877: NOT
20878: IFFALSE 20882
// exit ;
20880: GO 21044
// un := tmp [ rand ( 1 , tmp ) ] ;
20882: LD_ADDR_VAR 0 3
20886: PUSH
20887: LD_VAR 0 2
20891: PUSH
20892: LD_INT 1
20894: PPUSH
20895: LD_VAR 0 2
20899: PPUSH
20900: CALL_OW 12
20904: ARRAY
20905: ST_TO_ADDR
// if Crawls ( un ) then
20906: LD_VAR 0 3
20910: PPUSH
20911: CALL_OW 318
20915: IFFALSE 20926
// ComWalk ( un ) ;
20917: LD_VAR 0 3
20921: PPUSH
20922: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20926: LD_VAR 0 3
20930: PPUSH
20931: LD_INT 8
20933: PPUSH
20934: CALL_OW 336
// end ; 4 :
20938: GO 21044
20940: LD_INT 4
20942: DOUBLE
20943: EQUAL
20944: IFTRUE 20948
20946: GO 21022
20948: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20949: LD_ADDR_VAR 0 2
20953: PUSH
20954: LD_INT 22
20956: PUSH
20957: LD_OWVAR 2
20961: PUSH
20962: EMPTY
20963: LIST
20964: LIST
20965: PUSH
20966: LD_INT 30
20968: PUSH
20969: LD_INT 29
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: PPUSH
20980: CALL_OW 69
20984: ST_TO_ADDR
// if not tmp then
20985: LD_VAR 0 2
20989: NOT
20990: IFFALSE 20994
// exit ;
20992: GO 21044
// CenterNowOnUnits ( tmp [ 1 ] ) ;
20994: LD_VAR 0 2
20998: PUSH
20999: LD_INT 1
21001: ARRAY
21002: PPUSH
21003: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21007: LD_VAR 0 2
21011: PUSH
21012: LD_INT 1
21014: ARRAY
21015: PPUSH
21016: CALL_OW 65
// end ; 5 .. 7 :
21020: GO 21044
21022: LD_INT 5
21024: DOUBLE
21025: GREATEREQUAL
21026: IFFALSE 21034
21028: LD_INT 7
21030: DOUBLE
21031: LESSEQUAL
21032: IFTRUE 21036
21034: GO 21043
21036: POP
// StreamSibBomb ; end ;
21037: CALL 17281 0 0
21041: GO 21044
21043: POP
// end ;
21044: PPOPN 3
21046: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21047: LD_EXP 26
21051: PUSH
21052: LD_EXP 76
21056: AND
21057: IFFALSE 21213
21059: GO 21061
21061: DISABLE
21062: LD_INT 0
21064: PPUSH
21065: PPUSH
21066: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21067: LD_ADDR_VAR 0 2
21071: PUSH
21072: LD_INT 81
21074: PUSH
21075: LD_OWVAR 2
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: PUSH
21084: LD_INT 2
21086: PUSH
21087: LD_INT 21
21089: PUSH
21090: LD_INT 1
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PUSH
21097: LD_INT 21
21099: PUSH
21100: LD_INT 2
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: LIST
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: PPUSH
21116: CALL_OW 69
21120: ST_TO_ADDR
// if not tmp then
21121: LD_VAR 0 2
21125: NOT
21126: IFFALSE 21130
// exit ;
21128: GO 21213
// p := 0 ;
21130: LD_ADDR_VAR 0 3
21134: PUSH
21135: LD_INT 0
21137: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21138: LD_INT 35
21140: PPUSH
21141: CALL_OW 67
// p := p + 1 ;
21145: LD_ADDR_VAR 0 3
21149: PUSH
21150: LD_VAR 0 3
21154: PUSH
21155: LD_INT 1
21157: PLUS
21158: ST_TO_ADDR
// for i in tmp do
21159: LD_ADDR_VAR 0 1
21163: PUSH
21164: LD_VAR 0 2
21168: PUSH
21169: FOR_IN
21170: IFFALSE 21201
// if GetLives ( i ) < 1000 then
21172: LD_VAR 0 1
21176: PPUSH
21177: CALL_OW 256
21181: PUSH
21182: LD_INT 1000
21184: LESS
21185: IFFALSE 21199
// SetLives ( i , 1000 ) ;
21187: LD_VAR 0 1
21191: PPUSH
21192: LD_INT 1000
21194: PPUSH
21195: CALL_OW 234
21199: GO 21169
21201: POP
21202: POP
// until p > 20 ;
21203: LD_VAR 0 3
21207: PUSH
21208: LD_INT 20
21210: GREATER
21211: IFFALSE 21138
// end ;
21213: PPOPN 3
21215: END
// every 0 0$1 trigger StreamModeActive and sTime do
21216: LD_EXP 26
21220: PUSH
21221: LD_EXP 77
21225: AND
21226: IFFALSE 21261
21228: GO 21230
21230: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21231: LD_INT 28
21233: PPUSH
21234: LD_OWVAR 2
21238: PPUSH
21239: LD_INT 2
21241: PPUSH
21242: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21246: LD_INT 30
21248: PPUSH
21249: LD_OWVAR 2
21253: PPUSH
21254: LD_INT 2
21256: PPUSH
21257: CALL_OW 322
// end ;
21261: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21262: LD_EXP 26
21266: PUSH
21267: LD_EXP 78
21271: AND
21272: IFFALSE 21393
21274: GO 21276
21276: DISABLE
21277: LD_INT 0
21279: PPUSH
21280: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21281: LD_ADDR_VAR 0 2
21285: PUSH
21286: LD_INT 22
21288: PUSH
21289: LD_OWVAR 2
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: PUSH
21298: LD_INT 21
21300: PUSH
21301: LD_INT 1
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: PUSH
21308: LD_INT 3
21310: PUSH
21311: LD_INT 23
21313: PUSH
21314: LD_INT 0
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: LIST
21329: PPUSH
21330: CALL_OW 69
21334: ST_TO_ADDR
// if not tmp then
21335: LD_VAR 0 2
21339: NOT
21340: IFFALSE 21344
// exit ;
21342: GO 21393
// for i in tmp do
21344: LD_ADDR_VAR 0 1
21348: PUSH
21349: LD_VAR 0 2
21353: PUSH
21354: FOR_IN
21355: IFFALSE 21391
// begin if Crawls ( i ) then
21357: LD_VAR 0 1
21361: PPUSH
21362: CALL_OW 318
21366: IFFALSE 21377
// ComWalk ( i ) ;
21368: LD_VAR 0 1
21372: PPUSH
21373: CALL_OW 138
// SetClass ( i , 2 ) ;
21377: LD_VAR 0 1
21381: PPUSH
21382: LD_INT 2
21384: PPUSH
21385: CALL_OW 336
// end ;
21389: GO 21354
21391: POP
21392: POP
// end ;
21393: PPOPN 2
21395: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21396: LD_EXP 26
21400: PUSH
21401: LD_EXP 79
21405: AND
21406: IFFALSE 21694
21408: GO 21410
21410: DISABLE
21411: LD_INT 0
21413: PPUSH
21414: PPUSH
21415: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21416: LD_OWVAR 2
21420: PPUSH
21421: LD_INT 9
21423: PPUSH
21424: LD_INT 1
21426: PPUSH
21427: LD_INT 1
21429: PPUSH
21430: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21434: LD_INT 9
21436: PPUSH
21437: LD_OWVAR 2
21441: PPUSH
21442: CALL_OW 343
// uc_side := 9 ;
21446: LD_ADDR_OWVAR 20
21450: PUSH
21451: LD_INT 9
21453: ST_TO_ADDR
// uc_nation := 2 ;
21454: LD_ADDR_OWVAR 21
21458: PUSH
21459: LD_INT 2
21461: ST_TO_ADDR
// hc_name := Dark Warrior ;
21462: LD_ADDR_OWVAR 26
21466: PUSH
21467: LD_STRING Dark Warrior
21469: ST_TO_ADDR
// hc_gallery :=  ;
21470: LD_ADDR_OWVAR 33
21474: PUSH
21475: LD_STRING 
21477: ST_TO_ADDR
// hc_noskilllimit := true ;
21478: LD_ADDR_OWVAR 76
21482: PUSH
21483: LD_INT 1
21485: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
21486: LD_ADDR_OWVAR 31
21490: PUSH
21491: LD_INT 30
21493: PUSH
21494: LD_INT 30
21496: PUSH
21497: LD_INT 30
21499: PUSH
21500: LD_INT 30
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: ST_TO_ADDR
// un := CreateHuman ;
21509: LD_ADDR_VAR 0 3
21513: PUSH
21514: CALL_OW 44
21518: ST_TO_ADDR
// hc_noskilllimit := false ;
21519: LD_ADDR_OWVAR 76
21523: PUSH
21524: LD_INT 0
21526: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21527: LD_VAR 0 3
21531: PPUSH
21532: LD_INT 1
21534: PPUSH
21535: CALL_OW 51
// ToLua ( playRanger() ) ;
21539: LD_STRING playRanger()
21541: PPUSH
21542: CALL_OW 559
// p := 0 ;
21546: LD_ADDR_VAR 0 2
21550: PUSH
21551: LD_INT 0
21553: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21554: LD_INT 35
21556: PPUSH
21557: CALL_OW 67
// p := p + 1 ;
21561: LD_ADDR_VAR 0 2
21565: PUSH
21566: LD_VAR 0 2
21570: PUSH
21571: LD_INT 1
21573: PLUS
21574: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21575: LD_VAR 0 3
21579: PPUSH
21580: CALL_OW 256
21584: PUSH
21585: LD_INT 1000
21587: LESS
21588: IFFALSE 21602
// SetLives ( un , 1000 ) ;
21590: LD_VAR 0 3
21594: PPUSH
21595: LD_INT 1000
21597: PPUSH
21598: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21602: LD_VAR 0 3
21606: PPUSH
21607: LD_INT 81
21609: PUSH
21610: LD_OWVAR 2
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: LD_INT 91
21621: PUSH
21622: LD_VAR 0 3
21626: PUSH
21627: LD_INT 30
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: LIST
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PPUSH
21639: CALL_OW 69
21643: PPUSH
21644: LD_VAR 0 3
21648: PPUSH
21649: CALL_OW 74
21653: PPUSH
21654: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
21658: LD_VAR 0 2
21662: PUSH
21663: LD_INT 80
21665: GREATER
21666: PUSH
21667: LD_VAR 0 3
21671: PPUSH
21672: CALL_OW 301
21676: OR
21677: IFFALSE 21554
// if un then
21679: LD_VAR 0 3
21683: IFFALSE 21694
// RemoveUnit ( un ) ;
21685: LD_VAR 0 3
21689: PPUSH
21690: CALL_OW 64
// end ;
21694: PPOPN 3
21696: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
21697: LD_EXP 80
21701: IFFALSE 21817
21703: GO 21705
21705: DISABLE
21706: LD_INT 0
21708: PPUSH
21709: PPUSH
21710: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21711: LD_ADDR_VAR 0 2
21715: PUSH
21716: LD_INT 81
21718: PUSH
21719: LD_OWVAR 2
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PUSH
21728: LD_INT 21
21730: PUSH
21731: LD_INT 1
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PPUSH
21742: CALL_OW 69
21746: ST_TO_ADDR
// ToLua ( playComputer() ) ;
21747: LD_STRING playComputer()
21749: PPUSH
21750: CALL_OW 559
// if not tmp then
21754: LD_VAR 0 2
21758: NOT
21759: IFFALSE 21763
// exit ;
21761: GO 21817
// for i in tmp do
21763: LD_ADDR_VAR 0 1
21767: PUSH
21768: LD_VAR 0 2
21772: PUSH
21773: FOR_IN
21774: IFFALSE 21815
// for j := 1 to 4 do
21776: LD_ADDR_VAR 0 3
21780: PUSH
21781: DOUBLE
21782: LD_INT 1
21784: DEC
21785: ST_TO_ADDR
21786: LD_INT 4
21788: PUSH
21789: FOR_TO
21790: IFFALSE 21811
// SetSkill ( i , j , 10 ) ;
21792: LD_VAR 0 1
21796: PPUSH
21797: LD_VAR 0 3
21801: PPUSH
21802: LD_INT 10
21804: PPUSH
21805: CALL_OW 237
21809: GO 21789
21811: POP
21812: POP
21813: GO 21773
21815: POP
21816: POP
// end ;
21817: PPOPN 3
21819: END
// every 0 0$1 trigger s30 do var i , tmp ;
21820: LD_EXP 81
21824: IFFALSE 21893
21826: GO 21828
21828: DISABLE
21829: LD_INT 0
21831: PPUSH
21832: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21833: LD_ADDR_VAR 0 2
21837: PUSH
21838: LD_INT 22
21840: PUSH
21841: LD_OWVAR 2
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PPUSH
21850: CALL_OW 69
21854: ST_TO_ADDR
// if not tmp then
21855: LD_VAR 0 2
21859: NOT
21860: IFFALSE 21864
// exit ;
21862: GO 21893
// for i in tmp do
21864: LD_ADDR_VAR 0 1
21868: PUSH
21869: LD_VAR 0 2
21873: PUSH
21874: FOR_IN
21875: IFFALSE 21891
// SetLives ( i , 300 ) ;
21877: LD_VAR 0 1
21881: PPUSH
21882: LD_INT 300
21884: PPUSH
21885: CALL_OW 234
21889: GO 21874
21891: POP
21892: POP
// end ;
21893: PPOPN 2
21895: END
// every 0 0$1 trigger s60 do var i , tmp ;
21896: LD_EXP 82
21900: IFFALSE 21969
21902: GO 21904
21904: DISABLE
21905: LD_INT 0
21907: PPUSH
21908: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21909: LD_ADDR_VAR 0 2
21913: PUSH
21914: LD_INT 22
21916: PUSH
21917: LD_OWVAR 2
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: PPUSH
21926: CALL_OW 69
21930: ST_TO_ADDR
// if not tmp then
21931: LD_VAR 0 2
21935: NOT
21936: IFFALSE 21940
// exit ;
21938: GO 21969
// for i in tmp do
21940: LD_ADDR_VAR 0 1
21944: PUSH
21945: LD_VAR 0 2
21949: PUSH
21950: FOR_IN
21951: IFFALSE 21967
// SetLives ( i , 600 ) ;
21953: LD_VAR 0 1
21957: PPUSH
21958: LD_INT 600
21960: PPUSH
21961: CALL_OW 234
21965: GO 21950
21967: POP
21968: POP
// end ;
21969: PPOPN 2
21971: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21972: LD_INT 0
21974: PPUSH
// case cmd of 301 :
21975: LD_VAR 0 1
21979: PUSH
21980: LD_INT 301
21982: DOUBLE
21983: EQUAL
21984: IFTRUE 21988
21986: GO 22020
21988: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21989: LD_VAR 0 6
21993: PPUSH
21994: LD_VAR 0 7
21998: PPUSH
21999: LD_VAR 0 8
22003: PPUSH
22004: LD_VAR 0 4
22008: PPUSH
22009: LD_VAR 0 5
22013: PPUSH
22014: CALL 23229 0 5
22018: GO 22141
22020: LD_INT 302
22022: DOUBLE
22023: EQUAL
22024: IFTRUE 22028
22026: GO 22065
22028: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22029: LD_VAR 0 6
22033: PPUSH
22034: LD_VAR 0 7
22038: PPUSH
22039: LD_VAR 0 8
22043: PPUSH
22044: LD_VAR 0 9
22048: PPUSH
22049: LD_VAR 0 4
22053: PPUSH
22054: LD_VAR 0 5
22058: PPUSH
22059: CALL 23320 0 6
22063: GO 22141
22065: LD_INT 303
22067: DOUBLE
22068: EQUAL
22069: IFTRUE 22073
22071: GO 22110
22073: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22074: LD_VAR 0 6
22078: PPUSH
22079: LD_VAR 0 7
22083: PPUSH
22084: LD_VAR 0 8
22088: PPUSH
22089: LD_VAR 0 9
22093: PPUSH
22094: LD_VAR 0 4
22098: PPUSH
22099: LD_VAR 0 5
22103: PPUSH
22104: CALL 22146 0 6
22108: GO 22141
22110: LD_INT 304
22112: DOUBLE
22113: EQUAL
22114: IFTRUE 22118
22116: GO 22140
22118: POP
// hHackTeleport ( unit , x , y ) ; end ;
22119: LD_VAR 0 2
22123: PPUSH
22124: LD_VAR 0 4
22128: PPUSH
22129: LD_VAR 0 5
22133: PPUSH
22134: CALL 23913 0 3
22138: GO 22141
22140: POP
// end ;
22141: LD_VAR 0 12
22145: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22146: LD_INT 0
22148: PPUSH
22149: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22150: LD_VAR 0 1
22154: PUSH
22155: LD_INT 1
22157: LESS
22158: PUSH
22159: LD_VAR 0 1
22163: PUSH
22164: LD_INT 3
22166: GREATER
22167: OR
22168: PUSH
22169: LD_VAR 0 5
22173: PPUSH
22174: LD_VAR 0 6
22178: PPUSH
22179: CALL_OW 428
22183: OR
22184: IFFALSE 22188
// exit ;
22186: GO 22916
// uc_side := your_side ;
22188: LD_ADDR_OWVAR 20
22192: PUSH
22193: LD_OWVAR 2
22197: ST_TO_ADDR
// uc_nation := nation ;
22198: LD_ADDR_OWVAR 21
22202: PUSH
22203: LD_VAR 0 1
22207: ST_TO_ADDR
// bc_level = 1 ;
22208: LD_ADDR_OWVAR 43
22212: PUSH
22213: LD_INT 1
22215: ST_TO_ADDR
// case btype of 1 :
22216: LD_VAR 0 2
22220: PUSH
22221: LD_INT 1
22223: DOUBLE
22224: EQUAL
22225: IFTRUE 22229
22227: GO 22240
22229: POP
// bc_type := b_depot ; 2 :
22230: LD_ADDR_OWVAR 42
22234: PUSH
22235: LD_INT 0
22237: ST_TO_ADDR
22238: GO 22860
22240: LD_INT 2
22242: DOUBLE
22243: EQUAL
22244: IFTRUE 22248
22246: GO 22259
22248: POP
// bc_type := b_warehouse ; 3 :
22249: LD_ADDR_OWVAR 42
22253: PUSH
22254: LD_INT 1
22256: ST_TO_ADDR
22257: GO 22860
22259: LD_INT 3
22261: DOUBLE
22262: EQUAL
22263: IFTRUE 22267
22265: GO 22278
22267: POP
// bc_type := b_lab ; 4 .. 9 :
22268: LD_ADDR_OWVAR 42
22272: PUSH
22273: LD_INT 6
22275: ST_TO_ADDR
22276: GO 22860
22278: LD_INT 4
22280: DOUBLE
22281: GREATEREQUAL
22282: IFFALSE 22290
22284: LD_INT 9
22286: DOUBLE
22287: LESSEQUAL
22288: IFTRUE 22292
22290: GO 22352
22292: POP
// begin bc_type := b_lab_half ;
22293: LD_ADDR_OWVAR 42
22297: PUSH
22298: LD_INT 7
22300: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22301: LD_ADDR_OWVAR 44
22305: PUSH
22306: LD_INT 10
22308: PUSH
22309: LD_INT 11
22311: PUSH
22312: LD_INT 12
22314: PUSH
22315: LD_INT 15
22317: PUSH
22318: LD_INT 14
22320: PUSH
22321: LD_INT 13
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: PUSH
22332: LD_VAR 0 2
22336: PUSH
22337: LD_INT 3
22339: MINUS
22340: ARRAY
22341: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
22342: LD_ADDR_OWVAR 45
22346: PUSH
22347: LD_INT 9
22349: ST_TO_ADDR
// end ; 10 .. 13 :
22350: GO 22860
22352: LD_INT 10
22354: DOUBLE
22355: GREATEREQUAL
22356: IFFALSE 22364
22358: LD_INT 13
22360: DOUBLE
22361: LESSEQUAL
22362: IFTRUE 22366
22364: GO 22443
22366: POP
// begin bc_type := b_lab_full ;
22367: LD_ADDR_OWVAR 42
22371: PUSH
22372: LD_INT 8
22374: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22375: LD_ADDR_OWVAR 44
22379: PUSH
22380: LD_INT 10
22382: PUSH
22383: LD_INT 12
22385: PUSH
22386: LD_INT 14
22388: PUSH
22389: LD_INT 13
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: PUSH
22398: LD_VAR 0 2
22402: PUSH
22403: LD_INT 9
22405: MINUS
22406: ARRAY
22407: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22408: LD_ADDR_OWVAR 45
22412: PUSH
22413: LD_INT 11
22415: PUSH
22416: LD_INT 15
22418: PUSH
22419: LD_INT 12
22421: PUSH
22422: LD_INT 15
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: PUSH
22431: LD_VAR 0 2
22435: PUSH
22436: LD_INT 9
22438: MINUS
22439: ARRAY
22440: ST_TO_ADDR
// end ; 14 :
22441: GO 22860
22443: LD_INT 14
22445: DOUBLE
22446: EQUAL
22447: IFTRUE 22451
22449: GO 22462
22451: POP
// bc_type := b_workshop ; 15 :
22452: LD_ADDR_OWVAR 42
22456: PUSH
22457: LD_INT 2
22459: ST_TO_ADDR
22460: GO 22860
22462: LD_INT 15
22464: DOUBLE
22465: EQUAL
22466: IFTRUE 22470
22468: GO 22481
22470: POP
// bc_type := b_factory ; 16 :
22471: LD_ADDR_OWVAR 42
22475: PUSH
22476: LD_INT 3
22478: ST_TO_ADDR
22479: GO 22860
22481: LD_INT 16
22483: DOUBLE
22484: EQUAL
22485: IFTRUE 22489
22487: GO 22500
22489: POP
// bc_type := b_ext_gun ; 17 :
22490: LD_ADDR_OWVAR 42
22494: PUSH
22495: LD_INT 17
22497: ST_TO_ADDR
22498: GO 22860
22500: LD_INT 17
22502: DOUBLE
22503: EQUAL
22504: IFTRUE 22508
22506: GO 22536
22508: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22509: LD_ADDR_OWVAR 42
22513: PUSH
22514: LD_INT 19
22516: PUSH
22517: LD_INT 23
22519: PUSH
22520: LD_INT 19
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: LIST
22527: PUSH
22528: LD_VAR 0 1
22532: ARRAY
22533: ST_TO_ADDR
22534: GO 22860
22536: LD_INT 18
22538: DOUBLE
22539: EQUAL
22540: IFTRUE 22544
22542: GO 22555
22544: POP
// bc_type := b_ext_radar ; 19 :
22545: LD_ADDR_OWVAR 42
22549: PUSH
22550: LD_INT 20
22552: ST_TO_ADDR
22553: GO 22860
22555: LD_INT 19
22557: DOUBLE
22558: EQUAL
22559: IFTRUE 22563
22561: GO 22574
22563: POP
// bc_type := b_ext_radio ; 20 :
22564: LD_ADDR_OWVAR 42
22568: PUSH
22569: LD_INT 22
22571: ST_TO_ADDR
22572: GO 22860
22574: LD_INT 20
22576: DOUBLE
22577: EQUAL
22578: IFTRUE 22582
22580: GO 22593
22582: POP
// bc_type := b_ext_siberium ; 21 :
22583: LD_ADDR_OWVAR 42
22587: PUSH
22588: LD_INT 21
22590: ST_TO_ADDR
22591: GO 22860
22593: LD_INT 21
22595: DOUBLE
22596: EQUAL
22597: IFTRUE 22601
22599: GO 22612
22601: POP
// bc_type := b_ext_computer ; 22 :
22602: LD_ADDR_OWVAR 42
22606: PUSH
22607: LD_INT 24
22609: ST_TO_ADDR
22610: GO 22860
22612: LD_INT 22
22614: DOUBLE
22615: EQUAL
22616: IFTRUE 22620
22618: GO 22631
22620: POP
// bc_type := b_ext_track ; 23 :
22621: LD_ADDR_OWVAR 42
22625: PUSH
22626: LD_INT 16
22628: ST_TO_ADDR
22629: GO 22860
22631: LD_INT 23
22633: DOUBLE
22634: EQUAL
22635: IFTRUE 22639
22637: GO 22650
22639: POP
// bc_type := b_ext_laser ; 24 :
22640: LD_ADDR_OWVAR 42
22644: PUSH
22645: LD_INT 25
22647: ST_TO_ADDR
22648: GO 22860
22650: LD_INT 24
22652: DOUBLE
22653: EQUAL
22654: IFTRUE 22658
22656: GO 22669
22658: POP
// bc_type := b_control_tower ; 25 :
22659: LD_ADDR_OWVAR 42
22663: PUSH
22664: LD_INT 36
22666: ST_TO_ADDR
22667: GO 22860
22669: LD_INT 25
22671: DOUBLE
22672: EQUAL
22673: IFTRUE 22677
22675: GO 22688
22677: POP
// bc_type := b_breastwork ; 26 :
22678: LD_ADDR_OWVAR 42
22682: PUSH
22683: LD_INT 31
22685: ST_TO_ADDR
22686: GO 22860
22688: LD_INT 26
22690: DOUBLE
22691: EQUAL
22692: IFTRUE 22696
22694: GO 22707
22696: POP
// bc_type := b_bunker ; 27 :
22697: LD_ADDR_OWVAR 42
22701: PUSH
22702: LD_INT 32
22704: ST_TO_ADDR
22705: GO 22860
22707: LD_INT 27
22709: DOUBLE
22710: EQUAL
22711: IFTRUE 22715
22713: GO 22726
22715: POP
// bc_type := b_turret ; 28 :
22716: LD_ADDR_OWVAR 42
22720: PUSH
22721: LD_INT 33
22723: ST_TO_ADDR
22724: GO 22860
22726: LD_INT 28
22728: DOUBLE
22729: EQUAL
22730: IFTRUE 22734
22732: GO 22745
22734: POP
// bc_type := b_armoury ; 29 :
22735: LD_ADDR_OWVAR 42
22739: PUSH
22740: LD_INT 4
22742: ST_TO_ADDR
22743: GO 22860
22745: LD_INT 29
22747: DOUBLE
22748: EQUAL
22749: IFTRUE 22753
22751: GO 22764
22753: POP
// bc_type := b_barracks ; 30 :
22754: LD_ADDR_OWVAR 42
22758: PUSH
22759: LD_INT 5
22761: ST_TO_ADDR
22762: GO 22860
22764: LD_INT 30
22766: DOUBLE
22767: EQUAL
22768: IFTRUE 22772
22770: GO 22783
22772: POP
// bc_type := b_solar_power ; 31 :
22773: LD_ADDR_OWVAR 42
22777: PUSH
22778: LD_INT 27
22780: ST_TO_ADDR
22781: GO 22860
22783: LD_INT 31
22785: DOUBLE
22786: EQUAL
22787: IFTRUE 22791
22789: GO 22802
22791: POP
// bc_type := b_oil_power ; 32 :
22792: LD_ADDR_OWVAR 42
22796: PUSH
22797: LD_INT 26
22799: ST_TO_ADDR
22800: GO 22860
22802: LD_INT 32
22804: DOUBLE
22805: EQUAL
22806: IFTRUE 22810
22808: GO 22821
22810: POP
// bc_type := b_siberite_power ; 33 :
22811: LD_ADDR_OWVAR 42
22815: PUSH
22816: LD_INT 28
22818: ST_TO_ADDR
22819: GO 22860
22821: LD_INT 33
22823: DOUBLE
22824: EQUAL
22825: IFTRUE 22829
22827: GO 22840
22829: POP
// bc_type := b_oil_mine ; 34 :
22830: LD_ADDR_OWVAR 42
22834: PUSH
22835: LD_INT 29
22837: ST_TO_ADDR
22838: GO 22860
22840: LD_INT 34
22842: DOUBLE
22843: EQUAL
22844: IFTRUE 22848
22846: GO 22859
22848: POP
// bc_type := b_siberite_mine ; end ;
22849: LD_ADDR_OWVAR 42
22853: PUSH
22854: LD_INT 30
22856: ST_TO_ADDR
22857: GO 22860
22859: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22860: LD_ADDR_VAR 0 8
22864: PUSH
22865: LD_VAR 0 5
22869: PPUSH
22870: LD_VAR 0 6
22874: PPUSH
22875: LD_VAR 0 3
22879: PPUSH
22880: CALL_OW 47
22884: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22885: LD_OWVAR 42
22889: PUSH
22890: LD_INT 32
22892: PUSH
22893: LD_INT 33
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: IN
22900: IFFALSE 22916
// PlaceWeaponTurret ( b , weapon ) ;
22902: LD_VAR 0 8
22906: PPUSH
22907: LD_VAR 0 4
22911: PPUSH
22912: CALL_OW 431
// end ;
22916: LD_VAR 0 7
22920: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22921: LD_INT 0
22923: PPUSH
22924: PPUSH
22925: PPUSH
22926: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22927: LD_ADDR_VAR 0 4
22931: PUSH
22932: LD_INT 22
22934: PUSH
22935: LD_OWVAR 2
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 2
22946: PUSH
22947: LD_INT 30
22949: PUSH
22950: LD_INT 0
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PUSH
22957: LD_INT 30
22959: PUSH
22960: LD_INT 1
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: LIST
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: PPUSH
22976: CALL_OW 69
22980: ST_TO_ADDR
// if not tmp then
22981: LD_VAR 0 4
22985: NOT
22986: IFFALSE 22990
// exit ;
22988: GO 23049
// for i in tmp do
22990: LD_ADDR_VAR 0 2
22994: PUSH
22995: LD_VAR 0 4
22999: PUSH
23000: FOR_IN
23001: IFFALSE 23047
// for j = 1 to 3 do
23003: LD_ADDR_VAR 0 3
23007: PUSH
23008: DOUBLE
23009: LD_INT 1
23011: DEC
23012: ST_TO_ADDR
23013: LD_INT 3
23015: PUSH
23016: FOR_TO
23017: IFFALSE 23043
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23019: LD_VAR 0 2
23023: PPUSH
23024: CALL_OW 274
23028: PPUSH
23029: LD_VAR 0 3
23033: PPUSH
23034: LD_INT 99999
23036: PPUSH
23037: CALL_OW 277
23041: GO 23016
23043: POP
23044: POP
23045: GO 23000
23047: POP
23048: POP
// end ;
23049: LD_VAR 0 1
23053: RET
// export function hHackSetLevel10 ; var i , j ; begin
23054: LD_INT 0
23056: PPUSH
23057: PPUSH
23058: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23059: LD_ADDR_VAR 0 2
23063: PUSH
23064: LD_INT 21
23066: PUSH
23067: LD_INT 1
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: PPUSH
23074: CALL_OW 69
23078: PUSH
23079: FOR_IN
23080: IFFALSE 23132
// if IsSelected ( i ) then
23082: LD_VAR 0 2
23086: PPUSH
23087: CALL_OW 306
23091: IFFALSE 23130
// begin for j := 1 to 4 do
23093: LD_ADDR_VAR 0 3
23097: PUSH
23098: DOUBLE
23099: LD_INT 1
23101: DEC
23102: ST_TO_ADDR
23103: LD_INT 4
23105: PUSH
23106: FOR_TO
23107: IFFALSE 23128
// SetSkill ( i , j , 10 ) ;
23109: LD_VAR 0 2
23113: PPUSH
23114: LD_VAR 0 3
23118: PPUSH
23119: LD_INT 10
23121: PPUSH
23122: CALL_OW 237
23126: GO 23106
23128: POP
23129: POP
// end ;
23130: GO 23079
23132: POP
23133: POP
// end ;
23134: LD_VAR 0 1
23138: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23139: LD_INT 0
23141: PPUSH
23142: PPUSH
23143: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23144: LD_ADDR_VAR 0 2
23148: PUSH
23149: LD_INT 22
23151: PUSH
23152: LD_OWVAR 2
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: PUSH
23161: LD_INT 21
23163: PUSH
23164: LD_INT 1
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: PPUSH
23175: CALL_OW 69
23179: PUSH
23180: FOR_IN
23181: IFFALSE 23222
// begin for j := 1 to 4 do
23183: LD_ADDR_VAR 0 3
23187: PUSH
23188: DOUBLE
23189: LD_INT 1
23191: DEC
23192: ST_TO_ADDR
23193: LD_INT 4
23195: PUSH
23196: FOR_TO
23197: IFFALSE 23218
// SetSkill ( i , j , 10 ) ;
23199: LD_VAR 0 2
23203: PPUSH
23204: LD_VAR 0 3
23208: PPUSH
23209: LD_INT 10
23211: PPUSH
23212: CALL_OW 237
23216: GO 23196
23218: POP
23219: POP
// end ;
23220: GO 23180
23222: POP
23223: POP
// end ;
23224: LD_VAR 0 1
23228: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23229: LD_INT 0
23231: PPUSH
// uc_side := your_side ;
23232: LD_ADDR_OWVAR 20
23236: PUSH
23237: LD_OWVAR 2
23241: ST_TO_ADDR
// uc_nation := nation ;
23242: LD_ADDR_OWVAR 21
23246: PUSH
23247: LD_VAR 0 1
23251: ST_TO_ADDR
// InitHc ;
23252: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23256: LD_INT 0
23258: PPUSH
23259: LD_VAR 0 2
23263: PPUSH
23264: LD_VAR 0 3
23268: PPUSH
23269: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23273: LD_VAR 0 4
23277: PPUSH
23278: LD_VAR 0 5
23282: PPUSH
23283: CALL_OW 428
23287: PUSH
23288: LD_INT 0
23290: EQUAL
23291: IFFALSE 23315
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23293: CALL_OW 44
23297: PPUSH
23298: LD_VAR 0 4
23302: PPUSH
23303: LD_VAR 0 5
23307: PPUSH
23308: LD_INT 1
23310: PPUSH
23311: CALL_OW 48
// end ;
23315: LD_VAR 0 6
23319: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23320: LD_INT 0
23322: PPUSH
23323: PPUSH
// uc_side := your_side ;
23324: LD_ADDR_OWVAR 20
23328: PUSH
23329: LD_OWVAR 2
23333: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23334: LD_VAR 0 1
23338: PUSH
23339: LD_INT 1
23341: PUSH
23342: LD_INT 2
23344: PUSH
23345: LD_INT 3
23347: PUSH
23348: LD_INT 4
23350: PUSH
23351: LD_INT 5
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: IN
23361: IFFALSE 23373
// uc_nation := nation_american else
23363: LD_ADDR_OWVAR 21
23367: PUSH
23368: LD_INT 1
23370: ST_TO_ADDR
23371: GO 23416
// if chassis in [ 11 , 12 , 13 , 14 ] then
23373: LD_VAR 0 1
23377: PUSH
23378: LD_INT 11
23380: PUSH
23381: LD_INT 12
23383: PUSH
23384: LD_INT 13
23386: PUSH
23387: LD_INT 14
23389: PUSH
23390: EMPTY
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: IN
23396: IFFALSE 23408
// uc_nation := nation_arabian else
23398: LD_ADDR_OWVAR 21
23402: PUSH
23403: LD_INT 2
23405: ST_TO_ADDR
23406: GO 23416
// uc_nation := nation_russian ;
23408: LD_ADDR_OWVAR 21
23412: PUSH
23413: LD_INT 3
23415: ST_TO_ADDR
// vc_chassis := chassis ;
23416: LD_ADDR_OWVAR 37
23420: PUSH
23421: LD_VAR 0 1
23425: ST_TO_ADDR
// vc_engine := engine ;
23426: LD_ADDR_OWVAR 39
23430: PUSH
23431: LD_VAR 0 2
23435: ST_TO_ADDR
// vc_control := control ;
23436: LD_ADDR_OWVAR 38
23440: PUSH
23441: LD_VAR 0 3
23445: ST_TO_ADDR
// vc_weapon := weapon ;
23446: LD_ADDR_OWVAR 40
23450: PUSH
23451: LD_VAR 0 4
23455: ST_TO_ADDR
// un := CreateVehicle ;
23456: LD_ADDR_VAR 0 8
23460: PUSH
23461: CALL_OW 45
23465: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23466: LD_VAR 0 8
23470: PPUSH
23471: LD_INT 0
23473: PPUSH
23474: LD_INT 5
23476: PPUSH
23477: CALL_OW 12
23481: PPUSH
23482: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23486: LD_VAR 0 8
23490: PPUSH
23491: LD_VAR 0 5
23495: PPUSH
23496: LD_VAR 0 6
23500: PPUSH
23501: LD_INT 1
23503: PPUSH
23504: CALL_OW 48
// end ;
23508: LD_VAR 0 7
23512: RET
// export hInvincible ; every 1 do
23513: GO 23515
23515: DISABLE
// hInvincible := [ ] ;
23516: LD_ADDR_EXP 83
23520: PUSH
23521: EMPTY
23522: ST_TO_ADDR
23523: END
// every 10 do var i ;
23524: GO 23526
23526: DISABLE
23527: LD_INT 0
23529: PPUSH
// begin enable ;
23530: ENABLE
// if not hInvincible then
23531: LD_EXP 83
23535: NOT
23536: IFFALSE 23540
// exit ;
23538: GO 23584
// for i in hInvincible do
23540: LD_ADDR_VAR 0 1
23544: PUSH
23545: LD_EXP 83
23549: PUSH
23550: FOR_IN
23551: IFFALSE 23582
// if GetLives ( i ) < 1000 then
23553: LD_VAR 0 1
23557: PPUSH
23558: CALL_OW 256
23562: PUSH
23563: LD_INT 1000
23565: LESS
23566: IFFALSE 23580
// SetLives ( i , 1000 ) ;
23568: LD_VAR 0 1
23572: PPUSH
23573: LD_INT 1000
23575: PPUSH
23576: CALL_OW 234
23580: GO 23550
23582: POP
23583: POP
// end ;
23584: PPOPN 1
23586: END
// export function hHackInvincible ; var i ; begin
23587: LD_INT 0
23589: PPUSH
23590: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23591: LD_ADDR_VAR 0 2
23595: PUSH
23596: LD_INT 2
23598: PUSH
23599: LD_INT 21
23601: PUSH
23602: LD_INT 1
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PUSH
23609: LD_INT 21
23611: PUSH
23612: LD_INT 2
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: LIST
23623: PPUSH
23624: CALL_OW 69
23628: PUSH
23629: FOR_IN
23630: IFFALSE 23691
// if IsSelected ( i ) then
23632: LD_VAR 0 2
23636: PPUSH
23637: CALL_OW 306
23641: IFFALSE 23689
// begin if i in hInvincible then
23643: LD_VAR 0 2
23647: PUSH
23648: LD_EXP 83
23652: IN
23653: IFFALSE 23673
// hInvincible := hInvincible diff i else
23655: LD_ADDR_EXP 83
23659: PUSH
23660: LD_EXP 83
23664: PUSH
23665: LD_VAR 0 2
23669: DIFF
23670: ST_TO_ADDR
23671: GO 23689
// hInvincible := hInvincible union i ;
23673: LD_ADDR_EXP 83
23677: PUSH
23678: LD_EXP 83
23682: PUSH
23683: LD_VAR 0 2
23687: UNION
23688: ST_TO_ADDR
// end ;
23689: GO 23629
23691: POP
23692: POP
// end ;
23693: LD_VAR 0 1
23697: RET
// export function hHackInvisible ; var i , j ; begin
23698: LD_INT 0
23700: PPUSH
23701: PPUSH
23702: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23703: LD_ADDR_VAR 0 2
23707: PUSH
23708: LD_INT 21
23710: PUSH
23711: LD_INT 1
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PPUSH
23718: CALL_OW 69
23722: PUSH
23723: FOR_IN
23724: IFFALSE 23748
// if IsSelected ( i ) then
23726: LD_VAR 0 2
23730: PPUSH
23731: CALL_OW 306
23735: IFFALSE 23746
// ComForceInvisible ( i ) ;
23737: LD_VAR 0 2
23741: PPUSH
23742: CALL_OW 496
23746: GO 23723
23748: POP
23749: POP
// end ;
23750: LD_VAR 0 1
23754: RET
// export function hHackChangeYourSide ; begin
23755: LD_INT 0
23757: PPUSH
// if your_side = 8 then
23758: LD_OWVAR 2
23762: PUSH
23763: LD_INT 8
23765: EQUAL
23766: IFFALSE 23778
// your_side := 0 else
23768: LD_ADDR_OWVAR 2
23772: PUSH
23773: LD_INT 0
23775: ST_TO_ADDR
23776: GO 23792
// your_side := your_side + 1 ;
23778: LD_ADDR_OWVAR 2
23782: PUSH
23783: LD_OWVAR 2
23787: PUSH
23788: LD_INT 1
23790: PLUS
23791: ST_TO_ADDR
// end ;
23792: LD_VAR 0 1
23796: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23797: LD_INT 0
23799: PPUSH
23800: PPUSH
23801: PPUSH
// for i in all_units do
23802: LD_ADDR_VAR 0 2
23806: PUSH
23807: LD_OWVAR 3
23811: PUSH
23812: FOR_IN
23813: IFFALSE 23891
// if IsSelected ( i ) then
23815: LD_VAR 0 2
23819: PPUSH
23820: CALL_OW 306
23824: IFFALSE 23889
// begin j := GetSide ( i ) ;
23826: LD_ADDR_VAR 0 3
23830: PUSH
23831: LD_VAR 0 2
23835: PPUSH
23836: CALL_OW 255
23840: ST_TO_ADDR
// if j = 8 then
23841: LD_VAR 0 3
23845: PUSH
23846: LD_INT 8
23848: EQUAL
23849: IFFALSE 23861
// j := 0 else
23851: LD_ADDR_VAR 0 3
23855: PUSH
23856: LD_INT 0
23858: ST_TO_ADDR
23859: GO 23875
// j := j + 1 ;
23861: LD_ADDR_VAR 0 3
23865: PUSH
23866: LD_VAR 0 3
23870: PUSH
23871: LD_INT 1
23873: PLUS
23874: ST_TO_ADDR
// SetSide ( i , j ) ;
23875: LD_VAR 0 2
23879: PPUSH
23880: LD_VAR 0 3
23884: PPUSH
23885: CALL_OW 235
// end ;
23889: GO 23812
23891: POP
23892: POP
// end ;
23893: LD_VAR 0 1
23897: RET
// export function hHackFog ; begin
23898: LD_INT 0
23900: PPUSH
// FogOff ( true ) ;
23901: LD_INT 1
23903: PPUSH
23904: CALL_OW 344
// end ;
23908: LD_VAR 0 1
23912: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23913: LD_INT 0
23915: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23916: LD_VAR 0 1
23920: PPUSH
23921: LD_VAR 0 2
23925: PPUSH
23926: LD_VAR 0 3
23930: PPUSH
23931: LD_INT 1
23933: PPUSH
23934: LD_INT 1
23936: PPUSH
23937: CALL_OW 483
// CenterOnXY ( x , y ) ;
23941: LD_VAR 0 2
23945: PPUSH
23946: LD_VAR 0 3
23950: PPUSH
23951: CALL_OW 84
// end ;
23955: LD_VAR 0 4
23959: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
23960: LD_INT 0
23962: PPUSH
23963: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
23964: LD_VAR 0 1
23968: NOT
23969: PUSH
23970: LD_VAR 0 2
23974: PPUSH
23975: LD_VAR 0 3
23979: PPUSH
23980: CALL_OW 488
23984: NOT
23985: OR
23986: PUSH
23987: LD_VAR 0 1
23991: PPUSH
23992: CALL_OW 266
23996: PUSH
23997: LD_INT 3
23999: NONEQUAL
24000: PUSH
24001: LD_VAR 0 1
24005: PPUSH
24006: CALL_OW 247
24010: PUSH
24011: LD_INT 1
24013: EQUAL
24014: NOT
24015: AND
24016: OR
24017: IFFALSE 24021
// exit ;
24019: GO 24170
// if GetType ( factory ) = unit_human then
24021: LD_VAR 0 1
24025: PPUSH
24026: CALL_OW 247
24030: PUSH
24031: LD_INT 1
24033: EQUAL
24034: IFFALSE 24051
// factory := IsInUnit ( factory ) ;
24036: LD_ADDR_VAR 0 1
24040: PUSH
24041: LD_VAR 0 1
24045: PPUSH
24046: CALL_OW 310
24050: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
24051: LD_VAR 0 1
24055: PPUSH
24056: CALL_OW 266
24060: PUSH
24061: LD_INT 3
24063: NONEQUAL
24064: IFFALSE 24068
// exit ;
24066: GO 24170
// if HexInfo ( x , y ) = factory then
24068: LD_VAR 0 2
24072: PPUSH
24073: LD_VAR 0 3
24077: PPUSH
24078: CALL_OW 428
24082: PUSH
24083: LD_VAR 0 1
24087: EQUAL
24088: IFFALSE 24115
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
24090: LD_ADDR_EXP 84
24094: PUSH
24095: LD_EXP 84
24099: PPUSH
24100: LD_VAR 0 1
24104: PPUSH
24105: LD_INT 0
24107: PPUSH
24108: CALL_OW 1
24112: ST_TO_ADDR
24113: GO 24166
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
24115: LD_ADDR_EXP 84
24119: PUSH
24120: LD_EXP 84
24124: PPUSH
24125: LD_VAR 0 1
24129: PPUSH
24130: LD_VAR 0 1
24134: PPUSH
24135: CALL_OW 255
24139: PUSH
24140: LD_VAR 0 1
24144: PUSH
24145: LD_VAR 0 2
24149: PUSH
24150: LD_VAR 0 3
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: PPUSH
24161: CALL_OW 1
24165: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24166: CALL 24175 0 0
// end ;
24170: LD_VAR 0 4
24174: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
24175: LD_INT 0
24177: PPUSH
24178: PPUSH
24179: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24180: LD_STRING resetFactoryWaypoint();
24182: PPUSH
24183: CALL_OW 559
// if factoryWaypoints then
24187: LD_EXP 84
24191: IFFALSE 24317
// begin list := PrepareArray ( factoryWaypoints ) ;
24193: LD_ADDR_VAR 0 3
24197: PUSH
24198: LD_EXP 84
24202: PPUSH
24203: CALL 71459 0 1
24207: ST_TO_ADDR
// for i := 1 to list do
24208: LD_ADDR_VAR 0 2
24212: PUSH
24213: DOUBLE
24214: LD_INT 1
24216: DEC
24217: ST_TO_ADDR
24218: LD_VAR 0 3
24222: PUSH
24223: FOR_TO
24224: IFFALSE 24315
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24226: LD_STRING setFactoryWaypointXY(
24228: PUSH
24229: LD_VAR 0 3
24233: PUSH
24234: LD_VAR 0 2
24238: ARRAY
24239: PUSH
24240: LD_INT 1
24242: ARRAY
24243: STR
24244: PUSH
24245: LD_STRING ,
24247: STR
24248: PUSH
24249: LD_VAR 0 3
24253: PUSH
24254: LD_VAR 0 2
24258: ARRAY
24259: PUSH
24260: LD_INT 2
24262: ARRAY
24263: STR
24264: PUSH
24265: LD_STRING ,
24267: STR
24268: PUSH
24269: LD_VAR 0 3
24273: PUSH
24274: LD_VAR 0 2
24278: ARRAY
24279: PUSH
24280: LD_INT 3
24282: ARRAY
24283: STR
24284: PUSH
24285: LD_STRING ,
24287: STR
24288: PUSH
24289: LD_VAR 0 3
24293: PUSH
24294: LD_VAR 0 2
24298: ARRAY
24299: PUSH
24300: LD_INT 4
24302: ARRAY
24303: STR
24304: PUSH
24305: LD_STRING )
24307: STR
24308: PPUSH
24309: CALL_OW 559
24313: GO 24223
24315: POP
24316: POP
// end ; end ;
24317: LD_VAR 0 1
24321: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
24322: LD_INT 0
24324: PPUSH
// if HexInfo ( x , y ) = warehouse then
24325: LD_VAR 0 2
24329: PPUSH
24330: LD_VAR 0 3
24334: PPUSH
24335: CALL_OW 428
24339: PUSH
24340: LD_VAR 0 1
24344: EQUAL
24345: IFFALSE 24372
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
24347: LD_ADDR_EXP 85
24351: PUSH
24352: LD_EXP 85
24356: PPUSH
24357: LD_VAR 0 1
24361: PPUSH
24362: LD_INT 0
24364: PPUSH
24365: CALL_OW 1
24369: ST_TO_ADDR
24370: GO 24423
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
24372: LD_ADDR_EXP 85
24376: PUSH
24377: LD_EXP 85
24381: PPUSH
24382: LD_VAR 0 1
24386: PPUSH
24387: LD_VAR 0 1
24391: PPUSH
24392: CALL_OW 255
24396: PUSH
24397: LD_VAR 0 1
24401: PUSH
24402: LD_VAR 0 2
24406: PUSH
24407: LD_VAR 0 3
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: PPUSH
24418: CALL_OW 1
24422: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
24423: CALL 24432 0 0
// end ;
24427: LD_VAR 0 4
24431: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
24432: LD_INT 0
24434: PPUSH
24435: PPUSH
24436: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
24437: LD_STRING resetWarehouseGatheringPoints();
24439: PPUSH
24440: CALL_OW 559
// if warehouseGatheringPoints then
24444: LD_EXP 85
24448: IFFALSE 24574
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
24450: LD_ADDR_VAR 0 3
24454: PUSH
24455: LD_EXP 85
24459: PPUSH
24460: CALL 71459 0 1
24464: ST_TO_ADDR
// for i := 1 to list do
24465: LD_ADDR_VAR 0 2
24469: PUSH
24470: DOUBLE
24471: LD_INT 1
24473: DEC
24474: ST_TO_ADDR
24475: LD_VAR 0 3
24479: PUSH
24480: FOR_TO
24481: IFFALSE 24572
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24483: LD_STRING setWarehouseGatheringPointXY(
24485: PUSH
24486: LD_VAR 0 3
24490: PUSH
24491: LD_VAR 0 2
24495: ARRAY
24496: PUSH
24497: LD_INT 1
24499: ARRAY
24500: STR
24501: PUSH
24502: LD_STRING ,
24504: STR
24505: PUSH
24506: LD_VAR 0 3
24510: PUSH
24511: LD_VAR 0 2
24515: ARRAY
24516: PUSH
24517: LD_INT 2
24519: ARRAY
24520: STR
24521: PUSH
24522: LD_STRING ,
24524: STR
24525: PUSH
24526: LD_VAR 0 3
24530: PUSH
24531: LD_VAR 0 2
24535: ARRAY
24536: PUSH
24537: LD_INT 3
24539: ARRAY
24540: STR
24541: PUSH
24542: LD_STRING ,
24544: STR
24545: PUSH
24546: LD_VAR 0 3
24550: PUSH
24551: LD_VAR 0 2
24555: ARRAY
24556: PUSH
24557: LD_INT 4
24559: ARRAY
24560: STR
24561: PUSH
24562: LD_STRING )
24564: STR
24565: PPUSH
24566: CALL_OW 559
24570: GO 24480
24572: POP
24573: POP
// end ; end ;
24574: LD_VAR 0 1
24578: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
24579: LD_EXP 85
24583: IFFALSE 25268
24585: GO 24587
24587: DISABLE
24588: LD_INT 0
24590: PPUSH
24591: PPUSH
24592: PPUSH
24593: PPUSH
24594: PPUSH
24595: PPUSH
24596: PPUSH
24597: PPUSH
24598: PPUSH
// begin enable ;
24599: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
24600: LD_ADDR_VAR 0 3
24604: PUSH
24605: LD_EXP 85
24609: PPUSH
24610: CALL 71459 0 1
24614: ST_TO_ADDR
// if not list then
24615: LD_VAR 0 3
24619: NOT
24620: IFFALSE 24624
// exit ;
24622: GO 25268
// for i := 1 to list do
24624: LD_ADDR_VAR 0 1
24628: PUSH
24629: DOUBLE
24630: LD_INT 1
24632: DEC
24633: ST_TO_ADDR
24634: LD_VAR 0 3
24638: PUSH
24639: FOR_TO
24640: IFFALSE 25266
// begin depot := list [ i ] [ 2 ] ;
24642: LD_ADDR_VAR 0 8
24646: PUSH
24647: LD_VAR 0 3
24651: PUSH
24652: LD_VAR 0 1
24656: ARRAY
24657: PUSH
24658: LD_INT 2
24660: ARRAY
24661: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
24662: LD_ADDR_VAR 0 5
24666: PUSH
24667: LD_VAR 0 3
24671: PUSH
24672: LD_VAR 0 1
24676: ARRAY
24677: PUSH
24678: LD_INT 1
24680: ARRAY
24681: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
24682: LD_VAR 0 8
24686: PPUSH
24687: CALL_OW 301
24691: PUSH
24692: LD_VAR 0 5
24696: PUSH
24697: LD_VAR 0 8
24701: PPUSH
24702: CALL_OW 255
24706: NONEQUAL
24707: OR
24708: IFFALSE 24737
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
24710: LD_ADDR_EXP 85
24714: PUSH
24715: LD_EXP 85
24719: PPUSH
24720: LD_VAR 0 8
24724: PPUSH
24725: LD_INT 0
24727: PPUSH
24728: CALL_OW 1
24732: ST_TO_ADDR
// exit ;
24733: POP
24734: POP
24735: GO 25268
// end ; x := list [ i ] [ 3 ] ;
24737: LD_ADDR_VAR 0 6
24741: PUSH
24742: LD_VAR 0 3
24746: PUSH
24747: LD_VAR 0 1
24751: ARRAY
24752: PUSH
24753: LD_INT 3
24755: ARRAY
24756: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
24757: LD_ADDR_VAR 0 7
24761: PUSH
24762: LD_VAR 0 3
24766: PUSH
24767: LD_VAR 0 1
24771: ARRAY
24772: PUSH
24773: LD_INT 4
24775: ARRAY
24776: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
24777: LD_ADDR_VAR 0 9
24781: PUSH
24782: LD_VAR 0 6
24786: PPUSH
24787: LD_VAR 0 7
24791: PPUSH
24792: LD_INT 16
24794: PPUSH
24795: CALL 70047 0 3
24799: ST_TO_ADDR
// if not cratesNearbyPoint then
24800: LD_VAR 0 9
24804: NOT
24805: IFFALSE 24811
// exit ;
24807: POP
24808: POP
24809: GO 25268
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
24811: LD_ADDR_VAR 0 4
24815: PUSH
24816: LD_INT 22
24818: PUSH
24819: LD_VAR 0 5
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PUSH
24828: LD_INT 3
24830: PUSH
24831: LD_INT 60
24833: PUSH
24834: EMPTY
24835: LIST
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: PUSH
24841: LD_INT 91
24843: PUSH
24844: LD_VAR 0 8
24848: PUSH
24849: LD_INT 6
24851: PUSH
24852: EMPTY
24853: LIST
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 2
24859: PUSH
24860: LD_INT 25
24862: PUSH
24863: LD_INT 2
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 25
24872: PUSH
24873: LD_INT 16
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: LIST
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: PPUSH
24891: CALL_OW 69
24895: PUSH
24896: LD_VAR 0 8
24900: PPUSH
24901: CALL_OW 313
24905: PPUSH
24906: LD_INT 3
24908: PUSH
24909: LD_INT 60
24911: PUSH
24912: EMPTY
24913: LIST
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PUSH
24919: LD_INT 2
24921: PUSH
24922: LD_INT 25
24924: PUSH
24925: LD_INT 2
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: LD_INT 25
24934: PUSH
24935: LD_INT 16
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: LIST
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: PPUSH
24951: CALL_OW 72
24955: UNION
24956: ST_TO_ADDR
// if tmp then
24957: LD_VAR 0 4
24961: IFFALSE 25041
// begin tmp := ShrinkArray ( tmp , 3 ) ;
24963: LD_ADDR_VAR 0 4
24967: PUSH
24968: LD_VAR 0 4
24972: PPUSH
24973: LD_INT 3
24975: PPUSH
24976: CALL 68016 0 2
24980: ST_TO_ADDR
// for j in tmp do
24981: LD_ADDR_VAR 0 2
24985: PUSH
24986: LD_VAR 0 4
24990: PUSH
24991: FOR_IN
24992: IFFALSE 25035
// begin if IsInUnit ( j ) then
24994: LD_VAR 0 2
24998: PPUSH
24999: CALL_OW 310
25003: IFFALSE 25014
// ComExit ( j ) ;
25005: LD_VAR 0 2
25009: PPUSH
25010: CALL 68099 0 1
// AddComCollect ( j , x , y ) ;
25014: LD_VAR 0 2
25018: PPUSH
25019: LD_VAR 0 6
25023: PPUSH
25024: LD_VAR 0 7
25028: PPUSH
25029: CALL_OW 177
// end ;
25033: GO 24991
25035: POP
25036: POP
// exit ;
25037: POP
25038: POP
25039: GO 25268
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
25041: LD_ADDR_VAR 0 4
25045: PUSH
25046: LD_INT 22
25048: PUSH
25049: LD_VAR 0 5
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: PUSH
25058: LD_INT 91
25060: PUSH
25061: LD_VAR 0 8
25065: PUSH
25066: LD_INT 8
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: LIST
25073: PUSH
25074: LD_INT 2
25076: PUSH
25077: LD_INT 34
25079: PUSH
25080: LD_INT 12
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 34
25089: PUSH
25090: LD_INT 51
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 34
25099: PUSH
25100: LD_INT 32
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: PUSH
25107: LD_INT 34
25109: PUSH
25110: LD_INT 89
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: LIST
25128: PPUSH
25129: CALL_OW 69
25133: ST_TO_ADDR
// if tmp then
25134: LD_VAR 0 4
25138: IFFALSE 25264
// begin for j in tmp do
25140: LD_ADDR_VAR 0 2
25144: PUSH
25145: LD_VAR 0 4
25149: PUSH
25150: FOR_IN
25151: IFFALSE 25262
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
25153: LD_VAR 0 2
25157: PPUSH
25158: CALL_OW 262
25162: PUSH
25163: LD_INT 3
25165: EQUAL
25166: PUSH
25167: LD_VAR 0 2
25171: PPUSH
25172: CALL_OW 261
25176: PUSH
25177: LD_INT 20
25179: GREATER
25180: OR
25181: PUSH
25182: LD_VAR 0 2
25186: PPUSH
25187: CALL_OW 314
25191: NOT
25192: AND
25193: PUSH
25194: LD_VAR 0 2
25198: PPUSH
25199: CALL_OW 263
25203: PUSH
25204: LD_INT 1
25206: NONEQUAL
25207: PUSH
25208: LD_VAR 0 2
25212: PPUSH
25213: CALL_OW 311
25217: OR
25218: AND
25219: IFFALSE 25260
// begin ComCollect ( j , x , y ) ;
25221: LD_VAR 0 2
25225: PPUSH
25226: LD_VAR 0 6
25230: PPUSH
25231: LD_VAR 0 7
25235: PPUSH
25236: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
25240: LD_VAR 0 2
25244: PPUSH
25245: LD_VAR 0 8
25249: PPUSH
25250: CALL_OW 172
// exit ;
25254: POP
25255: POP
25256: POP
25257: POP
25258: GO 25268
// end ;
25260: GO 25150
25262: POP
25263: POP
// end ; end ;
25264: GO 24639
25266: POP
25267: POP
// end ; end_of_file
25268: PPOPN 9
25270: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25271: LD_INT 0
25273: PPUSH
25274: PPUSH
25275: PPUSH
25276: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25277: LD_VAR 0 1
25281: PPUSH
25282: CALL_OW 264
25286: PUSH
25287: LD_INT 91
25289: EQUAL
25290: IFFALSE 25362
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25292: LD_INT 68
25294: PPUSH
25295: LD_VAR 0 1
25299: PPUSH
25300: CALL_OW 255
25304: PPUSH
25305: CALL_OW 321
25309: PUSH
25310: LD_INT 2
25312: EQUAL
25313: IFFALSE 25325
// eff := 70 else
25315: LD_ADDR_VAR 0 4
25319: PUSH
25320: LD_INT 70
25322: ST_TO_ADDR
25323: GO 25333
// eff := 30 ;
25325: LD_ADDR_VAR 0 4
25329: PUSH
25330: LD_INT 30
25332: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25333: LD_VAR 0 1
25337: PPUSH
25338: CALL_OW 250
25342: PPUSH
25343: LD_VAR 0 1
25347: PPUSH
25348: CALL_OW 251
25352: PPUSH
25353: LD_VAR 0 4
25357: PPUSH
25358: CALL_OW 495
// end ; end ;
25362: LD_VAR 0 2
25366: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25367: LD_INT 0
25369: PPUSH
// end ;
25370: LD_VAR 0 4
25374: RET
// export function SOS_Command ( cmd ) ; begin
25375: LD_INT 0
25377: PPUSH
// end ;
25378: LD_VAR 0 2
25382: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25383: LD_INT 0
25385: PPUSH
// end ;
25386: LD_VAR 0 6
25390: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
25391: LD_INT 0
25393: PPUSH
25394: PPUSH
// if not vehicle or not factory then
25395: LD_VAR 0 1
25399: NOT
25400: PUSH
25401: LD_VAR 0 2
25405: NOT
25406: OR
25407: IFFALSE 25411
// exit ;
25409: GO 25642
// if factoryWaypoints >= factory then
25411: LD_EXP 84
25415: PUSH
25416: LD_VAR 0 2
25420: GREATEREQUAL
25421: IFFALSE 25642
// if factoryWaypoints [ factory ] then
25423: LD_EXP 84
25427: PUSH
25428: LD_VAR 0 2
25432: ARRAY
25433: IFFALSE 25642
// begin if GetControl ( vehicle ) = control_manual then
25435: LD_VAR 0 1
25439: PPUSH
25440: CALL_OW 263
25444: PUSH
25445: LD_INT 1
25447: EQUAL
25448: IFFALSE 25529
// begin driver := IsDrivenBy ( vehicle ) ;
25450: LD_ADDR_VAR 0 4
25454: PUSH
25455: LD_VAR 0 1
25459: PPUSH
25460: CALL_OW 311
25464: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25465: LD_VAR 0 4
25469: PPUSH
25470: LD_EXP 84
25474: PUSH
25475: LD_VAR 0 2
25479: ARRAY
25480: PUSH
25481: LD_INT 3
25483: ARRAY
25484: PPUSH
25485: LD_EXP 84
25489: PUSH
25490: LD_VAR 0 2
25494: ARRAY
25495: PUSH
25496: LD_INT 4
25498: ARRAY
25499: PPUSH
25500: CALL_OW 171
// AddComExitVehicle ( driver ) ;
25504: LD_VAR 0 4
25508: PPUSH
25509: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
25513: LD_VAR 0 4
25517: PPUSH
25518: LD_VAR 0 2
25522: PPUSH
25523: CALL_OW 180
// end else
25527: GO 25642
// if GetControl ( vehicle ) = control_remote then
25529: LD_VAR 0 1
25533: PPUSH
25534: CALL_OW 263
25538: PUSH
25539: LD_INT 2
25541: EQUAL
25542: IFFALSE 25603
// begin wait ( 0 0$2 ) ;
25544: LD_INT 70
25546: PPUSH
25547: CALL_OW 67
// if Connect ( vehicle ) then
25551: LD_VAR 0 1
25555: PPUSH
25556: CALL 38307 0 1
25560: IFFALSE 25601
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25562: LD_VAR 0 1
25566: PPUSH
25567: LD_EXP 84
25571: PUSH
25572: LD_VAR 0 2
25576: ARRAY
25577: PUSH
25578: LD_INT 3
25580: ARRAY
25581: PPUSH
25582: LD_EXP 84
25586: PUSH
25587: LD_VAR 0 2
25591: ARRAY
25592: PUSH
25593: LD_INT 4
25595: ARRAY
25596: PPUSH
25597: CALL_OW 171
// end else
25601: GO 25642
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25603: LD_VAR 0 1
25607: PPUSH
25608: LD_EXP 84
25612: PUSH
25613: LD_VAR 0 2
25617: ARRAY
25618: PUSH
25619: LD_INT 3
25621: ARRAY
25622: PPUSH
25623: LD_EXP 84
25627: PUSH
25628: LD_VAR 0 2
25632: ARRAY
25633: PUSH
25634: LD_INT 4
25636: ARRAY
25637: PPUSH
25638: CALL_OW 171
// end ; end ;
25642: LD_VAR 0 3
25646: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25647: LD_INT 0
25649: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25650: LD_VAR 0 1
25654: PUSH
25655: LD_INT 250
25657: EQUAL
25658: PUSH
25659: LD_VAR 0 2
25663: PPUSH
25664: CALL_OW 264
25668: PUSH
25669: LD_INT 81
25671: EQUAL
25672: AND
25673: IFFALSE 25694
// MinerPlaceMine ( unit , x , y ) ;
25675: LD_VAR 0 2
25679: PPUSH
25680: LD_VAR 0 4
25684: PPUSH
25685: LD_VAR 0 5
25689: PPUSH
25690: CALL 28518 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25694: LD_VAR 0 1
25698: PUSH
25699: LD_INT 251
25701: EQUAL
25702: PUSH
25703: LD_VAR 0 2
25707: PPUSH
25708: CALL_OW 264
25712: PUSH
25713: LD_INT 81
25715: EQUAL
25716: AND
25717: IFFALSE 25738
// MinerDetonateMine ( unit , x , y ) ;
25719: LD_VAR 0 2
25723: PPUSH
25724: LD_VAR 0 4
25728: PPUSH
25729: LD_VAR 0 5
25733: PPUSH
25734: CALL 28793 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25738: LD_VAR 0 1
25742: PUSH
25743: LD_INT 252
25745: EQUAL
25746: PUSH
25747: LD_VAR 0 2
25751: PPUSH
25752: CALL_OW 264
25756: PUSH
25757: LD_INT 81
25759: EQUAL
25760: AND
25761: IFFALSE 25782
// MinerCreateMinefield ( unit , x , y ) ;
25763: LD_VAR 0 2
25767: PPUSH
25768: LD_VAR 0 4
25772: PPUSH
25773: LD_VAR 0 5
25777: PPUSH
25778: CALL 29210 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25782: LD_VAR 0 1
25786: PUSH
25787: LD_INT 253
25789: EQUAL
25790: PUSH
25791: LD_VAR 0 2
25795: PPUSH
25796: CALL_OW 257
25800: PUSH
25801: LD_INT 5
25803: EQUAL
25804: AND
25805: IFFALSE 25826
// ComBinocular ( unit , x , y ) ;
25807: LD_VAR 0 2
25811: PPUSH
25812: LD_VAR 0 4
25816: PPUSH
25817: LD_VAR 0 5
25821: PPUSH
25822: CALL 29579 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25826: LD_VAR 0 1
25830: PUSH
25831: LD_INT 254
25833: EQUAL
25834: PUSH
25835: LD_VAR 0 2
25839: PPUSH
25840: CALL_OW 264
25844: PUSH
25845: LD_INT 99
25847: EQUAL
25848: AND
25849: PUSH
25850: LD_VAR 0 3
25854: PPUSH
25855: CALL_OW 263
25859: PUSH
25860: LD_INT 3
25862: EQUAL
25863: AND
25864: IFFALSE 25880
// HackDestroyVehicle ( unit , selectedUnit ) ;
25866: LD_VAR 0 2
25870: PPUSH
25871: LD_VAR 0 3
25875: PPUSH
25876: CALL 27882 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25880: LD_VAR 0 1
25884: PUSH
25885: LD_INT 255
25887: EQUAL
25888: PUSH
25889: LD_VAR 0 2
25893: PPUSH
25894: CALL_OW 264
25898: PUSH
25899: LD_INT 14
25901: PUSH
25902: LD_INT 53
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: IN
25909: AND
25910: PUSH
25911: LD_VAR 0 4
25915: PPUSH
25916: LD_VAR 0 5
25920: PPUSH
25921: CALL_OW 488
25925: AND
25926: IFFALSE 25950
// CutTreeXYR ( unit , x , y , 12 ) ;
25928: LD_VAR 0 2
25932: PPUSH
25933: LD_VAR 0 4
25937: PPUSH
25938: LD_VAR 0 5
25942: PPUSH
25943: LD_INT 12
25945: PPUSH
25946: CALL 26045 0 4
// if cmd = 256 then
25950: LD_VAR 0 1
25954: PUSH
25955: LD_INT 256
25957: EQUAL
25958: IFFALSE 25979
// SetFactoryWaypoint ( unit , x , y ) ;
25960: LD_VAR 0 2
25964: PPUSH
25965: LD_VAR 0 4
25969: PPUSH
25970: LD_VAR 0 5
25974: PPUSH
25975: CALL 23960 0 3
// if cmd = 257 then
25979: LD_VAR 0 1
25983: PUSH
25984: LD_INT 257
25986: EQUAL
25987: IFFALSE 26008
// SetWarehouseGatheringPoint ( unit , x , y ) ;
25989: LD_VAR 0 2
25993: PPUSH
25994: LD_VAR 0 4
25998: PPUSH
25999: LD_VAR 0 5
26003: PPUSH
26004: CALL 24322 0 3
// if cmd = 258 then
26008: LD_VAR 0 1
26012: PUSH
26013: LD_INT 258
26015: EQUAL
26016: IFFALSE 26040
// BurnTreeXYR ( unit , x , y , 8 ) ;
26018: LD_VAR 0 2
26022: PPUSH
26023: LD_VAR 0 4
26027: PPUSH
26028: LD_VAR 0 5
26032: PPUSH
26033: LD_INT 8
26035: PPUSH
26036: CALL 26439 0 4
// end ;
26040: LD_VAR 0 6
26044: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26045: LD_INT 0
26047: PPUSH
26048: PPUSH
26049: PPUSH
26050: PPUSH
26051: PPUSH
26052: PPUSH
26053: PPUSH
26054: PPUSH
26055: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
26056: LD_VAR 0 1
26060: PPUSH
26061: CALL_OW 302
26065: NOT
26066: PUSH
26067: LD_VAR 0 2
26071: PPUSH
26072: LD_VAR 0 3
26076: PPUSH
26077: CALL_OW 488
26081: NOT
26082: OR
26083: PUSH
26084: LD_VAR 0 4
26088: NOT
26089: OR
26090: IFFALSE 26094
// exit ;
26092: GO 26434
// list := [ ] ;
26094: LD_ADDR_VAR 0 13
26098: PUSH
26099: EMPTY
26100: ST_TO_ADDR
// if x - r < 0 then
26101: LD_VAR 0 2
26105: PUSH
26106: LD_VAR 0 4
26110: MINUS
26111: PUSH
26112: LD_INT 0
26114: LESS
26115: IFFALSE 26127
// min_x := 0 else
26117: LD_ADDR_VAR 0 7
26121: PUSH
26122: LD_INT 0
26124: ST_TO_ADDR
26125: GO 26143
// min_x := x - r ;
26127: LD_ADDR_VAR 0 7
26131: PUSH
26132: LD_VAR 0 2
26136: PUSH
26137: LD_VAR 0 4
26141: MINUS
26142: ST_TO_ADDR
// if y - r < 0 then
26143: LD_VAR 0 3
26147: PUSH
26148: LD_VAR 0 4
26152: MINUS
26153: PUSH
26154: LD_INT 0
26156: LESS
26157: IFFALSE 26169
// min_y := 0 else
26159: LD_ADDR_VAR 0 8
26163: PUSH
26164: LD_INT 0
26166: ST_TO_ADDR
26167: GO 26185
// min_y := y - r ;
26169: LD_ADDR_VAR 0 8
26173: PUSH
26174: LD_VAR 0 3
26178: PUSH
26179: LD_VAR 0 4
26183: MINUS
26184: ST_TO_ADDR
// max_x := x + r ;
26185: LD_ADDR_VAR 0 9
26189: PUSH
26190: LD_VAR 0 2
26194: PUSH
26195: LD_VAR 0 4
26199: PLUS
26200: ST_TO_ADDR
// max_y := y + r ;
26201: LD_ADDR_VAR 0 10
26205: PUSH
26206: LD_VAR 0 3
26210: PUSH
26211: LD_VAR 0 4
26215: PLUS
26216: ST_TO_ADDR
// for _x = min_x to max_x do
26217: LD_ADDR_VAR 0 11
26221: PUSH
26222: DOUBLE
26223: LD_VAR 0 7
26227: DEC
26228: ST_TO_ADDR
26229: LD_VAR 0 9
26233: PUSH
26234: FOR_TO
26235: IFFALSE 26352
// for _y = min_y to max_y do
26237: LD_ADDR_VAR 0 12
26241: PUSH
26242: DOUBLE
26243: LD_VAR 0 8
26247: DEC
26248: ST_TO_ADDR
26249: LD_VAR 0 10
26253: PUSH
26254: FOR_TO
26255: IFFALSE 26348
// begin if not ValidHex ( _x , _y ) then
26257: LD_VAR 0 11
26261: PPUSH
26262: LD_VAR 0 12
26266: PPUSH
26267: CALL_OW 488
26271: NOT
26272: IFFALSE 26276
// continue ;
26274: GO 26254
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26276: LD_VAR 0 11
26280: PPUSH
26281: LD_VAR 0 12
26285: PPUSH
26286: CALL_OW 351
26290: PUSH
26291: LD_VAR 0 11
26295: PPUSH
26296: LD_VAR 0 12
26300: PPUSH
26301: CALL_OW 554
26305: AND
26306: IFFALSE 26346
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26308: LD_ADDR_VAR 0 13
26312: PUSH
26313: LD_VAR 0 13
26317: PPUSH
26318: LD_VAR 0 13
26322: PUSH
26323: LD_INT 1
26325: PLUS
26326: PPUSH
26327: LD_VAR 0 11
26331: PUSH
26332: LD_VAR 0 12
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: PPUSH
26341: CALL_OW 2
26345: ST_TO_ADDR
// end ;
26346: GO 26254
26348: POP
26349: POP
26350: GO 26234
26352: POP
26353: POP
// if not list then
26354: LD_VAR 0 13
26358: NOT
26359: IFFALSE 26363
// exit ;
26361: GO 26434
// for i in list do
26363: LD_ADDR_VAR 0 6
26367: PUSH
26368: LD_VAR 0 13
26372: PUSH
26373: FOR_IN
26374: IFFALSE 26432
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26376: LD_VAR 0 1
26380: PPUSH
26381: LD_STRING M
26383: PUSH
26384: LD_VAR 0 6
26388: PUSH
26389: LD_INT 1
26391: ARRAY
26392: PUSH
26393: LD_VAR 0 6
26397: PUSH
26398: LD_INT 2
26400: ARRAY
26401: PUSH
26402: LD_INT 0
26404: PUSH
26405: LD_INT 0
26407: PUSH
26408: LD_INT 0
26410: PUSH
26411: LD_INT 0
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: PUSH
26423: EMPTY
26424: LIST
26425: PPUSH
26426: CALL_OW 447
26430: GO 26373
26432: POP
26433: POP
// end ;
26434: LD_VAR 0 5
26438: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26439: LD_INT 0
26441: PPUSH
26442: PPUSH
26443: PPUSH
26444: PPUSH
26445: PPUSH
26446: PPUSH
26447: PPUSH
26448: PPUSH
26449: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
26450: LD_VAR 0 1
26454: PPUSH
26455: CALL_OW 302
26459: NOT
26460: PUSH
26461: LD_VAR 0 2
26465: PPUSH
26466: LD_VAR 0 3
26470: PPUSH
26471: CALL_OW 488
26475: NOT
26476: OR
26477: PUSH
26478: LD_VAR 0 4
26482: NOT
26483: OR
26484: IFFALSE 26488
// exit ;
26486: GO 26836
// list := [ ] ;
26488: LD_ADDR_VAR 0 13
26492: PUSH
26493: EMPTY
26494: ST_TO_ADDR
// if x - r < 0 then
26495: LD_VAR 0 2
26499: PUSH
26500: LD_VAR 0 4
26504: MINUS
26505: PUSH
26506: LD_INT 0
26508: LESS
26509: IFFALSE 26521
// min_x := 0 else
26511: LD_ADDR_VAR 0 7
26515: PUSH
26516: LD_INT 0
26518: ST_TO_ADDR
26519: GO 26537
// min_x := x - r ;
26521: LD_ADDR_VAR 0 7
26525: PUSH
26526: LD_VAR 0 2
26530: PUSH
26531: LD_VAR 0 4
26535: MINUS
26536: ST_TO_ADDR
// if y - r < 0 then
26537: LD_VAR 0 3
26541: PUSH
26542: LD_VAR 0 4
26546: MINUS
26547: PUSH
26548: LD_INT 0
26550: LESS
26551: IFFALSE 26563
// min_y := 0 else
26553: LD_ADDR_VAR 0 8
26557: PUSH
26558: LD_INT 0
26560: ST_TO_ADDR
26561: GO 26579
// min_y := y - r ;
26563: LD_ADDR_VAR 0 8
26567: PUSH
26568: LD_VAR 0 3
26572: PUSH
26573: LD_VAR 0 4
26577: MINUS
26578: ST_TO_ADDR
// max_x := x + r ;
26579: LD_ADDR_VAR 0 9
26583: PUSH
26584: LD_VAR 0 2
26588: PUSH
26589: LD_VAR 0 4
26593: PLUS
26594: ST_TO_ADDR
// max_y := y + r ;
26595: LD_ADDR_VAR 0 10
26599: PUSH
26600: LD_VAR 0 3
26604: PUSH
26605: LD_VAR 0 4
26609: PLUS
26610: ST_TO_ADDR
// for _x = min_x to max_x do
26611: LD_ADDR_VAR 0 11
26615: PUSH
26616: DOUBLE
26617: LD_VAR 0 7
26621: DEC
26622: ST_TO_ADDR
26623: LD_VAR 0 9
26627: PUSH
26628: FOR_TO
26629: IFFALSE 26746
// for _y = min_y to max_y do
26631: LD_ADDR_VAR 0 12
26635: PUSH
26636: DOUBLE
26637: LD_VAR 0 8
26641: DEC
26642: ST_TO_ADDR
26643: LD_VAR 0 10
26647: PUSH
26648: FOR_TO
26649: IFFALSE 26742
// begin if not ValidHex ( _x , _y ) then
26651: LD_VAR 0 11
26655: PPUSH
26656: LD_VAR 0 12
26660: PPUSH
26661: CALL_OW 488
26665: NOT
26666: IFFALSE 26670
// continue ;
26668: GO 26648
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26670: LD_VAR 0 11
26674: PPUSH
26675: LD_VAR 0 12
26679: PPUSH
26680: CALL_OW 351
26684: PUSH
26685: LD_VAR 0 11
26689: PPUSH
26690: LD_VAR 0 12
26694: PPUSH
26695: CALL_OW 554
26699: AND
26700: IFFALSE 26740
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26702: LD_ADDR_VAR 0 13
26706: PUSH
26707: LD_VAR 0 13
26711: PPUSH
26712: LD_VAR 0 13
26716: PUSH
26717: LD_INT 1
26719: PLUS
26720: PPUSH
26721: LD_VAR 0 11
26725: PUSH
26726: LD_VAR 0 12
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: PPUSH
26735: CALL_OW 2
26739: ST_TO_ADDR
// end ;
26740: GO 26648
26742: POP
26743: POP
26744: GO 26628
26746: POP
26747: POP
// if not list then
26748: LD_VAR 0 13
26752: NOT
26753: IFFALSE 26757
// exit ;
26755: GO 26836
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
26757: LD_ADDR_VAR 0 13
26761: PUSH
26762: LD_VAR 0 1
26766: PPUSH
26767: LD_VAR 0 13
26771: PPUSH
26772: LD_INT 1
26774: PPUSH
26775: LD_INT 1
26777: PPUSH
26778: CALL 35449 0 4
26782: ST_TO_ADDR
// ComStop ( flame ) ;
26783: LD_VAR 0 1
26787: PPUSH
26788: CALL_OW 141
// for i in list do
26792: LD_ADDR_VAR 0 6
26796: PUSH
26797: LD_VAR 0 13
26801: PUSH
26802: FOR_IN
26803: IFFALSE 26834
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
26805: LD_VAR 0 1
26809: PPUSH
26810: LD_VAR 0 6
26814: PUSH
26815: LD_INT 1
26817: ARRAY
26818: PPUSH
26819: LD_VAR 0 6
26823: PUSH
26824: LD_INT 2
26826: ARRAY
26827: PPUSH
26828: CALL_OW 176
26832: GO 26802
26834: POP
26835: POP
// end ;
26836: LD_VAR 0 5
26840: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26841: LD_EXP 87
26845: NOT
26846: IFFALSE 26896
26848: GO 26850
26850: DISABLE
// begin initHack := true ;
26851: LD_ADDR_EXP 87
26855: PUSH
26856: LD_INT 1
26858: ST_TO_ADDR
// hackTanks := [ ] ;
26859: LD_ADDR_EXP 88
26863: PUSH
26864: EMPTY
26865: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26866: LD_ADDR_EXP 89
26870: PUSH
26871: EMPTY
26872: ST_TO_ADDR
// hackLimit := 3 ;
26873: LD_ADDR_EXP 90
26877: PUSH
26878: LD_INT 3
26880: ST_TO_ADDR
// hackDist := 12 ;
26881: LD_ADDR_EXP 91
26885: PUSH
26886: LD_INT 12
26888: ST_TO_ADDR
// hackCounter := [ ] ;
26889: LD_ADDR_EXP 92
26893: PUSH
26894: EMPTY
26895: ST_TO_ADDR
// end ;
26896: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26897: LD_EXP 87
26901: PUSH
26902: LD_INT 34
26904: PUSH
26905: LD_INT 99
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: PPUSH
26912: CALL_OW 69
26916: AND
26917: IFFALSE 27170
26919: GO 26921
26921: DISABLE
26922: LD_INT 0
26924: PPUSH
26925: PPUSH
// begin enable ;
26926: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26927: LD_ADDR_VAR 0 1
26931: PUSH
26932: LD_INT 34
26934: PUSH
26935: LD_INT 99
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PPUSH
26942: CALL_OW 69
26946: PUSH
26947: FOR_IN
26948: IFFALSE 27168
// begin if not i in hackTanks then
26950: LD_VAR 0 1
26954: PUSH
26955: LD_EXP 88
26959: IN
26960: NOT
26961: IFFALSE 27044
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26963: LD_ADDR_EXP 88
26967: PUSH
26968: LD_EXP 88
26972: PPUSH
26973: LD_EXP 88
26977: PUSH
26978: LD_INT 1
26980: PLUS
26981: PPUSH
26982: LD_VAR 0 1
26986: PPUSH
26987: CALL_OW 1
26991: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26992: LD_ADDR_EXP 89
26996: PUSH
26997: LD_EXP 89
27001: PPUSH
27002: LD_EXP 89
27006: PUSH
27007: LD_INT 1
27009: PLUS
27010: PPUSH
27011: EMPTY
27012: PPUSH
27013: CALL_OW 1
27017: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27018: LD_ADDR_EXP 92
27022: PUSH
27023: LD_EXP 92
27027: PPUSH
27028: LD_EXP 92
27032: PUSH
27033: LD_INT 1
27035: PLUS
27036: PPUSH
27037: EMPTY
27038: PPUSH
27039: CALL_OW 1
27043: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27044: LD_VAR 0 1
27048: PPUSH
27049: CALL_OW 302
27053: NOT
27054: IFFALSE 27067
// begin HackUnlinkAll ( i ) ;
27056: LD_VAR 0 1
27060: PPUSH
27061: CALL 27173 0 1
// continue ;
27065: GO 26947
// end ; HackCheckCapturedStatus ( i ) ;
27067: LD_VAR 0 1
27071: PPUSH
27072: CALL 27616 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27076: LD_ADDR_VAR 0 2
27080: PUSH
27081: LD_INT 81
27083: PUSH
27084: LD_VAR 0 1
27088: PPUSH
27089: CALL_OW 255
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: PUSH
27098: LD_INT 33
27100: PUSH
27101: LD_INT 3
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: LD_INT 91
27110: PUSH
27111: LD_VAR 0 1
27115: PUSH
27116: LD_EXP 91
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: LIST
27125: PUSH
27126: LD_INT 50
27128: PUSH
27129: EMPTY
27130: LIST
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: LIST
27136: LIST
27137: PPUSH
27138: CALL_OW 69
27142: ST_TO_ADDR
// if not tmp then
27143: LD_VAR 0 2
27147: NOT
27148: IFFALSE 27152
// continue ;
27150: GO 26947
// HackLink ( i , tmp ) ;
27152: LD_VAR 0 1
27156: PPUSH
27157: LD_VAR 0 2
27161: PPUSH
27162: CALL 27309 0 2
// end ;
27166: GO 26947
27168: POP
27169: POP
// end ;
27170: PPOPN 2
27172: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27173: LD_INT 0
27175: PPUSH
27176: PPUSH
27177: PPUSH
// if not hack in hackTanks then
27178: LD_VAR 0 1
27182: PUSH
27183: LD_EXP 88
27187: IN
27188: NOT
27189: IFFALSE 27193
// exit ;
27191: GO 27304
// index := GetElementIndex ( hackTanks , hack ) ;
27193: LD_ADDR_VAR 0 4
27197: PUSH
27198: LD_EXP 88
27202: PPUSH
27203: LD_VAR 0 1
27207: PPUSH
27208: CALL 34746 0 2
27212: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27213: LD_EXP 89
27217: PUSH
27218: LD_VAR 0 4
27222: ARRAY
27223: IFFALSE 27304
// begin for i in hackTanksCaptured [ index ] do
27225: LD_ADDR_VAR 0 3
27229: PUSH
27230: LD_EXP 89
27234: PUSH
27235: LD_VAR 0 4
27239: ARRAY
27240: PUSH
27241: FOR_IN
27242: IFFALSE 27268
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27244: LD_VAR 0 3
27248: PUSH
27249: LD_INT 1
27251: ARRAY
27252: PPUSH
27253: LD_VAR 0 3
27257: PUSH
27258: LD_INT 2
27260: ARRAY
27261: PPUSH
27262: CALL_OW 235
27266: GO 27241
27268: POP
27269: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27270: LD_ADDR_EXP 89
27274: PUSH
27275: LD_EXP 89
27279: PPUSH
27280: LD_VAR 0 4
27284: PPUSH
27285: EMPTY
27286: PPUSH
27287: CALL_OW 1
27291: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27292: LD_VAR 0 1
27296: PPUSH
27297: LD_INT 0
27299: PPUSH
27300: CALL_OW 505
// end ; end ;
27304: LD_VAR 0 2
27308: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27309: LD_INT 0
27311: PPUSH
27312: PPUSH
27313: PPUSH
// if not hack in hackTanks or not vehicles then
27314: LD_VAR 0 1
27318: PUSH
27319: LD_EXP 88
27323: IN
27324: NOT
27325: PUSH
27326: LD_VAR 0 2
27330: NOT
27331: OR
27332: IFFALSE 27336
// exit ;
27334: GO 27611
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27336: LD_ADDR_VAR 0 2
27340: PUSH
27341: LD_VAR 0 1
27345: PPUSH
27346: LD_VAR 0 2
27350: PPUSH
27351: LD_INT 1
27353: PPUSH
27354: LD_INT 1
27356: PPUSH
27357: CALL 35396 0 4
27361: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27362: LD_ADDR_VAR 0 5
27366: PUSH
27367: LD_EXP 88
27371: PPUSH
27372: LD_VAR 0 1
27376: PPUSH
27377: CALL 34746 0 2
27381: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27382: LD_EXP 89
27386: PUSH
27387: LD_VAR 0 5
27391: ARRAY
27392: PUSH
27393: LD_EXP 90
27397: LESS
27398: IFFALSE 27587
// begin for i := 1 to vehicles do
27400: LD_ADDR_VAR 0 4
27404: PUSH
27405: DOUBLE
27406: LD_INT 1
27408: DEC
27409: ST_TO_ADDR
27410: LD_VAR 0 2
27414: PUSH
27415: FOR_TO
27416: IFFALSE 27585
// begin if hackTanksCaptured [ index ] = hackLimit then
27418: LD_EXP 89
27422: PUSH
27423: LD_VAR 0 5
27427: ARRAY
27428: PUSH
27429: LD_EXP 90
27433: EQUAL
27434: IFFALSE 27438
// break ;
27436: GO 27585
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27438: LD_ADDR_EXP 92
27442: PUSH
27443: LD_EXP 92
27447: PPUSH
27448: LD_VAR 0 5
27452: PPUSH
27453: LD_EXP 92
27457: PUSH
27458: LD_VAR 0 5
27462: ARRAY
27463: PUSH
27464: LD_INT 1
27466: PLUS
27467: PPUSH
27468: CALL_OW 1
27472: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27473: LD_ADDR_EXP 89
27477: PUSH
27478: LD_EXP 89
27482: PPUSH
27483: LD_VAR 0 5
27487: PUSH
27488: LD_EXP 89
27492: PUSH
27493: LD_VAR 0 5
27497: ARRAY
27498: PUSH
27499: LD_INT 1
27501: PLUS
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: PPUSH
27507: LD_VAR 0 2
27511: PUSH
27512: LD_VAR 0 4
27516: ARRAY
27517: PUSH
27518: LD_VAR 0 2
27522: PUSH
27523: LD_VAR 0 4
27527: ARRAY
27528: PPUSH
27529: CALL_OW 255
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: PPUSH
27538: CALL 34961 0 3
27542: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27543: LD_VAR 0 2
27547: PUSH
27548: LD_VAR 0 4
27552: ARRAY
27553: PPUSH
27554: LD_VAR 0 1
27558: PPUSH
27559: CALL_OW 255
27563: PPUSH
27564: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27568: LD_VAR 0 2
27572: PUSH
27573: LD_VAR 0 4
27577: ARRAY
27578: PPUSH
27579: CALL_OW 141
// end ;
27583: GO 27415
27585: POP
27586: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27587: LD_VAR 0 1
27591: PPUSH
27592: LD_EXP 89
27596: PUSH
27597: LD_VAR 0 5
27601: ARRAY
27602: PUSH
27603: LD_INT 0
27605: PLUS
27606: PPUSH
27607: CALL_OW 505
// end ;
27611: LD_VAR 0 3
27615: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27616: LD_INT 0
27618: PPUSH
27619: PPUSH
27620: PPUSH
27621: PPUSH
// if not hack in hackTanks then
27622: LD_VAR 0 1
27626: PUSH
27627: LD_EXP 88
27631: IN
27632: NOT
27633: IFFALSE 27637
// exit ;
27635: GO 27877
// index := GetElementIndex ( hackTanks , hack ) ;
27637: LD_ADDR_VAR 0 4
27641: PUSH
27642: LD_EXP 88
27646: PPUSH
27647: LD_VAR 0 1
27651: PPUSH
27652: CALL 34746 0 2
27656: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27657: LD_ADDR_VAR 0 3
27661: PUSH
27662: DOUBLE
27663: LD_EXP 89
27667: PUSH
27668: LD_VAR 0 4
27672: ARRAY
27673: INC
27674: ST_TO_ADDR
27675: LD_INT 1
27677: PUSH
27678: FOR_DOWNTO
27679: IFFALSE 27851
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27681: LD_ADDR_VAR 0 5
27685: PUSH
27686: LD_EXP 89
27690: PUSH
27691: LD_VAR 0 4
27695: ARRAY
27696: PUSH
27697: LD_VAR 0 3
27701: ARRAY
27702: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27703: LD_VAR 0 5
27707: PUSH
27708: LD_INT 1
27710: ARRAY
27711: PPUSH
27712: CALL_OW 302
27716: NOT
27717: PUSH
27718: LD_VAR 0 5
27722: PUSH
27723: LD_INT 1
27725: ARRAY
27726: PPUSH
27727: CALL_OW 255
27731: PUSH
27732: LD_VAR 0 1
27736: PPUSH
27737: CALL_OW 255
27741: NONEQUAL
27742: OR
27743: IFFALSE 27849
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27745: LD_VAR 0 5
27749: PUSH
27750: LD_INT 1
27752: ARRAY
27753: PPUSH
27754: CALL_OW 305
27758: PUSH
27759: LD_VAR 0 5
27763: PUSH
27764: LD_INT 1
27766: ARRAY
27767: PPUSH
27768: CALL_OW 255
27772: PUSH
27773: LD_VAR 0 1
27777: PPUSH
27778: CALL_OW 255
27782: EQUAL
27783: AND
27784: IFFALSE 27808
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27786: LD_VAR 0 5
27790: PUSH
27791: LD_INT 1
27793: ARRAY
27794: PPUSH
27795: LD_VAR 0 5
27799: PUSH
27800: LD_INT 2
27802: ARRAY
27803: PPUSH
27804: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27808: LD_ADDR_EXP 89
27812: PUSH
27813: LD_EXP 89
27817: PPUSH
27818: LD_VAR 0 4
27822: PPUSH
27823: LD_EXP 89
27827: PUSH
27828: LD_VAR 0 4
27832: ARRAY
27833: PPUSH
27834: LD_VAR 0 3
27838: PPUSH
27839: CALL_OW 3
27843: PPUSH
27844: CALL_OW 1
27848: ST_TO_ADDR
// end ; end ;
27849: GO 27678
27851: POP
27852: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27853: LD_VAR 0 1
27857: PPUSH
27858: LD_EXP 89
27862: PUSH
27863: LD_VAR 0 4
27867: ARRAY
27868: PUSH
27869: LD_INT 0
27871: PLUS
27872: PPUSH
27873: CALL_OW 505
// end ;
27877: LD_VAR 0 2
27881: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27882: LD_INT 0
27884: PPUSH
27885: PPUSH
27886: PPUSH
27887: PPUSH
// if not hack in hackTanks then
27888: LD_VAR 0 1
27892: PUSH
27893: LD_EXP 88
27897: IN
27898: NOT
27899: IFFALSE 27903
// exit ;
27901: GO 27988
// index := GetElementIndex ( hackTanks , hack ) ;
27903: LD_ADDR_VAR 0 5
27907: PUSH
27908: LD_EXP 88
27912: PPUSH
27913: LD_VAR 0 1
27917: PPUSH
27918: CALL 34746 0 2
27922: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27923: LD_ADDR_VAR 0 4
27927: PUSH
27928: DOUBLE
27929: LD_INT 1
27931: DEC
27932: ST_TO_ADDR
27933: LD_EXP 89
27937: PUSH
27938: LD_VAR 0 5
27942: ARRAY
27943: PUSH
27944: FOR_TO
27945: IFFALSE 27986
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27947: LD_EXP 89
27951: PUSH
27952: LD_VAR 0 5
27956: ARRAY
27957: PUSH
27958: LD_VAR 0 4
27962: ARRAY
27963: PUSH
27964: LD_INT 1
27966: ARRAY
27967: PUSH
27968: LD_VAR 0 2
27972: EQUAL
27973: IFFALSE 27984
// KillUnit ( vehicle ) ;
27975: LD_VAR 0 2
27979: PPUSH
27980: CALL_OW 66
27984: GO 27944
27986: POP
27987: POP
// end ;
27988: LD_VAR 0 3
27992: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27993: LD_EXP 93
27997: NOT
27998: IFFALSE 28033
28000: GO 28002
28002: DISABLE
// begin initMiner := true ;
28003: LD_ADDR_EXP 93
28007: PUSH
28008: LD_INT 1
28010: ST_TO_ADDR
// minersList := [ ] ;
28011: LD_ADDR_EXP 94
28015: PUSH
28016: EMPTY
28017: ST_TO_ADDR
// minerMinesList := [ ] ;
28018: LD_ADDR_EXP 95
28022: PUSH
28023: EMPTY
28024: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28025: LD_ADDR_EXP 96
28029: PUSH
28030: LD_INT 5
28032: ST_TO_ADDR
// end ;
28033: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28034: LD_EXP 93
28038: PUSH
28039: LD_INT 34
28041: PUSH
28042: LD_INT 81
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PPUSH
28049: CALL_OW 69
28053: AND
28054: IFFALSE 28515
28056: GO 28058
28058: DISABLE
28059: LD_INT 0
28061: PPUSH
28062: PPUSH
28063: PPUSH
28064: PPUSH
// begin enable ;
28065: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28066: LD_ADDR_VAR 0 1
28070: PUSH
28071: LD_INT 34
28073: PUSH
28074: LD_INT 81
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PPUSH
28081: CALL_OW 69
28085: PUSH
28086: FOR_IN
28087: IFFALSE 28159
// begin if not i in minersList then
28089: LD_VAR 0 1
28093: PUSH
28094: LD_EXP 94
28098: IN
28099: NOT
28100: IFFALSE 28157
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28102: LD_ADDR_EXP 94
28106: PUSH
28107: LD_EXP 94
28111: PPUSH
28112: LD_EXP 94
28116: PUSH
28117: LD_INT 1
28119: PLUS
28120: PPUSH
28121: LD_VAR 0 1
28125: PPUSH
28126: CALL_OW 1
28130: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28131: LD_ADDR_EXP 95
28135: PUSH
28136: LD_EXP 95
28140: PPUSH
28141: LD_EXP 95
28145: PUSH
28146: LD_INT 1
28148: PLUS
28149: PPUSH
28150: EMPTY
28151: PPUSH
28152: CALL_OW 1
28156: ST_TO_ADDR
// end end ;
28157: GO 28086
28159: POP
28160: POP
// for i := minerMinesList downto 1 do
28161: LD_ADDR_VAR 0 1
28165: PUSH
28166: DOUBLE
28167: LD_EXP 95
28171: INC
28172: ST_TO_ADDR
28173: LD_INT 1
28175: PUSH
28176: FOR_DOWNTO
28177: IFFALSE 28513
// begin if IsLive ( minersList [ i ] ) then
28179: LD_EXP 94
28183: PUSH
28184: LD_VAR 0 1
28188: ARRAY
28189: PPUSH
28190: CALL_OW 300
28194: IFFALSE 28222
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28196: LD_EXP 94
28200: PUSH
28201: LD_VAR 0 1
28205: ARRAY
28206: PPUSH
28207: LD_EXP 95
28211: PUSH
28212: LD_VAR 0 1
28216: ARRAY
28217: PPUSH
28218: CALL_OW 505
// if not minerMinesList [ i ] then
28222: LD_EXP 95
28226: PUSH
28227: LD_VAR 0 1
28231: ARRAY
28232: NOT
28233: IFFALSE 28237
// continue ;
28235: GO 28176
// for j := minerMinesList [ i ] downto 1 do
28237: LD_ADDR_VAR 0 2
28241: PUSH
28242: DOUBLE
28243: LD_EXP 95
28247: PUSH
28248: LD_VAR 0 1
28252: ARRAY
28253: INC
28254: ST_TO_ADDR
28255: LD_INT 1
28257: PUSH
28258: FOR_DOWNTO
28259: IFFALSE 28509
// begin side := GetSide ( minersList [ i ] ) ;
28261: LD_ADDR_VAR 0 3
28265: PUSH
28266: LD_EXP 94
28270: PUSH
28271: LD_VAR 0 1
28275: ARRAY
28276: PPUSH
28277: CALL_OW 255
28281: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28282: LD_ADDR_VAR 0 4
28286: PUSH
28287: LD_EXP 95
28291: PUSH
28292: LD_VAR 0 1
28296: ARRAY
28297: PUSH
28298: LD_VAR 0 2
28302: ARRAY
28303: PUSH
28304: LD_INT 1
28306: ARRAY
28307: PPUSH
28308: LD_EXP 95
28312: PUSH
28313: LD_VAR 0 1
28317: ARRAY
28318: PUSH
28319: LD_VAR 0 2
28323: ARRAY
28324: PUSH
28325: LD_INT 2
28327: ARRAY
28328: PPUSH
28329: CALL_OW 428
28333: ST_TO_ADDR
// if not tmp then
28334: LD_VAR 0 4
28338: NOT
28339: IFFALSE 28343
// continue ;
28341: GO 28258
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28343: LD_VAR 0 4
28347: PUSH
28348: LD_INT 81
28350: PUSH
28351: LD_VAR 0 3
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: PPUSH
28360: CALL_OW 69
28364: IN
28365: PUSH
28366: LD_EXP 95
28370: PUSH
28371: LD_VAR 0 1
28375: ARRAY
28376: PUSH
28377: LD_VAR 0 2
28381: ARRAY
28382: PUSH
28383: LD_INT 1
28385: ARRAY
28386: PPUSH
28387: LD_EXP 95
28391: PUSH
28392: LD_VAR 0 1
28396: ARRAY
28397: PUSH
28398: LD_VAR 0 2
28402: ARRAY
28403: PUSH
28404: LD_INT 2
28406: ARRAY
28407: PPUSH
28408: CALL_OW 458
28412: AND
28413: IFFALSE 28507
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28415: LD_EXP 95
28419: PUSH
28420: LD_VAR 0 1
28424: ARRAY
28425: PUSH
28426: LD_VAR 0 2
28430: ARRAY
28431: PUSH
28432: LD_INT 1
28434: ARRAY
28435: PPUSH
28436: LD_EXP 95
28440: PUSH
28441: LD_VAR 0 1
28445: ARRAY
28446: PUSH
28447: LD_VAR 0 2
28451: ARRAY
28452: PUSH
28453: LD_INT 2
28455: ARRAY
28456: PPUSH
28457: LD_VAR 0 3
28461: PPUSH
28462: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28466: LD_ADDR_EXP 95
28470: PUSH
28471: LD_EXP 95
28475: PPUSH
28476: LD_VAR 0 1
28480: PPUSH
28481: LD_EXP 95
28485: PUSH
28486: LD_VAR 0 1
28490: ARRAY
28491: PPUSH
28492: LD_VAR 0 2
28496: PPUSH
28497: CALL_OW 3
28501: PPUSH
28502: CALL_OW 1
28506: ST_TO_ADDR
// end ; end ;
28507: GO 28258
28509: POP
28510: POP
// end ;
28511: GO 28176
28513: POP
28514: POP
// end ;
28515: PPOPN 4
28517: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28518: LD_INT 0
28520: PPUSH
28521: PPUSH
// result := false ;
28522: LD_ADDR_VAR 0 4
28526: PUSH
28527: LD_INT 0
28529: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28530: LD_VAR 0 1
28534: PPUSH
28535: CALL_OW 264
28539: PUSH
28540: LD_INT 81
28542: EQUAL
28543: NOT
28544: IFFALSE 28548
// exit ;
28546: GO 28788
// index := GetElementIndex ( minersList , unit ) ;
28548: LD_ADDR_VAR 0 5
28552: PUSH
28553: LD_EXP 94
28557: PPUSH
28558: LD_VAR 0 1
28562: PPUSH
28563: CALL 34746 0 2
28567: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28568: LD_EXP 95
28572: PUSH
28573: LD_VAR 0 5
28577: ARRAY
28578: PUSH
28579: LD_EXP 96
28583: GREATEREQUAL
28584: IFFALSE 28588
// exit ;
28586: GO 28788
// ComMoveXY ( unit , x , y ) ;
28588: LD_VAR 0 1
28592: PPUSH
28593: LD_VAR 0 2
28597: PPUSH
28598: LD_VAR 0 3
28602: PPUSH
28603: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28607: LD_INT 35
28609: PPUSH
28610: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28614: LD_VAR 0 1
28618: PPUSH
28619: LD_VAR 0 2
28623: PPUSH
28624: LD_VAR 0 3
28628: PPUSH
28629: CALL 66498 0 3
28633: NOT
28634: PUSH
28635: LD_VAR 0 1
28639: PPUSH
28640: CALL_OW 314
28644: AND
28645: IFFALSE 28649
// exit ;
28647: GO 28788
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28649: LD_VAR 0 2
28653: PPUSH
28654: LD_VAR 0 3
28658: PPUSH
28659: CALL_OW 428
28663: PUSH
28664: LD_VAR 0 1
28668: EQUAL
28669: PUSH
28670: LD_VAR 0 1
28674: PPUSH
28675: CALL_OW 314
28679: NOT
28680: AND
28681: IFFALSE 28607
// PlaySoundXY ( x , y , PlantMine ) ;
28683: LD_VAR 0 2
28687: PPUSH
28688: LD_VAR 0 3
28692: PPUSH
28693: LD_STRING PlantMine
28695: PPUSH
28696: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28700: LD_VAR 0 2
28704: PPUSH
28705: LD_VAR 0 3
28709: PPUSH
28710: LD_VAR 0 1
28714: PPUSH
28715: CALL_OW 255
28719: PPUSH
28720: LD_INT 0
28722: PPUSH
28723: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28727: LD_ADDR_EXP 95
28731: PUSH
28732: LD_EXP 95
28736: PPUSH
28737: LD_VAR 0 5
28741: PUSH
28742: LD_EXP 95
28746: PUSH
28747: LD_VAR 0 5
28751: ARRAY
28752: PUSH
28753: LD_INT 1
28755: PLUS
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PPUSH
28761: LD_VAR 0 2
28765: PUSH
28766: LD_VAR 0 3
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PPUSH
28775: CALL 34961 0 3
28779: ST_TO_ADDR
// result := true ;
28780: LD_ADDR_VAR 0 4
28784: PUSH
28785: LD_INT 1
28787: ST_TO_ADDR
// end ;
28788: LD_VAR 0 4
28792: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28793: LD_INT 0
28795: PPUSH
28796: PPUSH
28797: PPUSH
// if not unit in minersList then
28798: LD_VAR 0 1
28802: PUSH
28803: LD_EXP 94
28807: IN
28808: NOT
28809: IFFALSE 28813
// exit ;
28811: GO 29205
// index := GetElementIndex ( minersList , unit ) ;
28813: LD_ADDR_VAR 0 6
28817: PUSH
28818: LD_EXP 94
28822: PPUSH
28823: LD_VAR 0 1
28827: PPUSH
28828: CALL 34746 0 2
28832: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28833: LD_ADDR_VAR 0 5
28837: PUSH
28838: DOUBLE
28839: LD_EXP 95
28843: PUSH
28844: LD_VAR 0 6
28848: ARRAY
28849: INC
28850: ST_TO_ADDR
28851: LD_INT 1
28853: PUSH
28854: FOR_DOWNTO
28855: IFFALSE 29016
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28857: LD_EXP 95
28861: PUSH
28862: LD_VAR 0 6
28866: ARRAY
28867: PUSH
28868: LD_VAR 0 5
28872: ARRAY
28873: PUSH
28874: LD_INT 1
28876: ARRAY
28877: PUSH
28878: LD_VAR 0 2
28882: EQUAL
28883: PUSH
28884: LD_EXP 95
28888: PUSH
28889: LD_VAR 0 6
28893: ARRAY
28894: PUSH
28895: LD_VAR 0 5
28899: ARRAY
28900: PUSH
28901: LD_INT 2
28903: ARRAY
28904: PUSH
28905: LD_VAR 0 3
28909: EQUAL
28910: AND
28911: IFFALSE 29014
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28913: LD_EXP 95
28917: PUSH
28918: LD_VAR 0 6
28922: ARRAY
28923: PUSH
28924: LD_VAR 0 5
28928: ARRAY
28929: PUSH
28930: LD_INT 1
28932: ARRAY
28933: PPUSH
28934: LD_EXP 95
28938: PUSH
28939: LD_VAR 0 6
28943: ARRAY
28944: PUSH
28945: LD_VAR 0 5
28949: ARRAY
28950: PUSH
28951: LD_INT 2
28953: ARRAY
28954: PPUSH
28955: LD_VAR 0 1
28959: PPUSH
28960: CALL_OW 255
28964: PPUSH
28965: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28969: LD_ADDR_EXP 95
28973: PUSH
28974: LD_EXP 95
28978: PPUSH
28979: LD_VAR 0 6
28983: PPUSH
28984: LD_EXP 95
28988: PUSH
28989: LD_VAR 0 6
28993: ARRAY
28994: PPUSH
28995: LD_VAR 0 5
28999: PPUSH
29000: CALL_OW 3
29004: PPUSH
29005: CALL_OW 1
29009: ST_TO_ADDR
// exit ;
29010: POP
29011: POP
29012: GO 29205
// end ; end ;
29014: GO 28854
29016: POP
29017: POP
// for i := minerMinesList [ index ] downto 1 do
29018: LD_ADDR_VAR 0 5
29022: PUSH
29023: DOUBLE
29024: LD_EXP 95
29028: PUSH
29029: LD_VAR 0 6
29033: ARRAY
29034: INC
29035: ST_TO_ADDR
29036: LD_INT 1
29038: PUSH
29039: FOR_DOWNTO
29040: IFFALSE 29203
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29042: LD_EXP 95
29046: PUSH
29047: LD_VAR 0 6
29051: ARRAY
29052: PUSH
29053: LD_VAR 0 5
29057: ARRAY
29058: PUSH
29059: LD_INT 1
29061: ARRAY
29062: PPUSH
29063: LD_EXP 95
29067: PUSH
29068: LD_VAR 0 6
29072: ARRAY
29073: PUSH
29074: LD_VAR 0 5
29078: ARRAY
29079: PUSH
29080: LD_INT 2
29082: ARRAY
29083: PPUSH
29084: LD_VAR 0 2
29088: PPUSH
29089: LD_VAR 0 3
29093: PPUSH
29094: CALL_OW 298
29098: PUSH
29099: LD_INT 6
29101: LESS
29102: IFFALSE 29201
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29104: LD_EXP 95
29108: PUSH
29109: LD_VAR 0 6
29113: ARRAY
29114: PUSH
29115: LD_VAR 0 5
29119: ARRAY
29120: PUSH
29121: LD_INT 1
29123: ARRAY
29124: PPUSH
29125: LD_EXP 95
29129: PUSH
29130: LD_VAR 0 6
29134: ARRAY
29135: PUSH
29136: LD_VAR 0 5
29140: ARRAY
29141: PUSH
29142: LD_INT 2
29144: ARRAY
29145: PPUSH
29146: LD_VAR 0 1
29150: PPUSH
29151: CALL_OW 255
29155: PPUSH
29156: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29160: LD_ADDR_EXP 95
29164: PUSH
29165: LD_EXP 95
29169: PPUSH
29170: LD_VAR 0 6
29174: PPUSH
29175: LD_EXP 95
29179: PUSH
29180: LD_VAR 0 6
29184: ARRAY
29185: PPUSH
29186: LD_VAR 0 5
29190: PPUSH
29191: CALL_OW 3
29195: PPUSH
29196: CALL_OW 1
29200: ST_TO_ADDR
// end ; end ;
29201: GO 29039
29203: POP
29204: POP
// end ;
29205: LD_VAR 0 4
29209: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29210: LD_INT 0
29212: PPUSH
29213: PPUSH
29214: PPUSH
29215: PPUSH
29216: PPUSH
29217: PPUSH
29218: PPUSH
29219: PPUSH
29220: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29221: LD_VAR 0 1
29225: PPUSH
29226: CALL_OW 264
29230: PUSH
29231: LD_INT 81
29233: EQUAL
29234: NOT
29235: PUSH
29236: LD_VAR 0 1
29240: PUSH
29241: LD_EXP 94
29245: IN
29246: NOT
29247: OR
29248: IFFALSE 29252
// exit ;
29250: GO 29574
// index := GetElementIndex ( minersList , unit ) ;
29252: LD_ADDR_VAR 0 6
29256: PUSH
29257: LD_EXP 94
29261: PPUSH
29262: LD_VAR 0 1
29266: PPUSH
29267: CALL 34746 0 2
29271: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29272: LD_ADDR_VAR 0 8
29276: PUSH
29277: LD_EXP 96
29281: PUSH
29282: LD_EXP 95
29286: PUSH
29287: LD_VAR 0 6
29291: ARRAY
29292: MINUS
29293: ST_TO_ADDR
// if not minesFreeAmount then
29294: LD_VAR 0 8
29298: NOT
29299: IFFALSE 29303
// exit ;
29301: GO 29574
// tmp := [ ] ;
29303: LD_ADDR_VAR 0 7
29307: PUSH
29308: EMPTY
29309: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29310: LD_ADDR_VAR 0 5
29314: PUSH
29315: DOUBLE
29316: LD_INT 1
29318: DEC
29319: ST_TO_ADDR
29320: LD_VAR 0 8
29324: PUSH
29325: FOR_TO
29326: IFFALSE 29521
// begin _d := rand ( 0 , 5 ) ;
29328: LD_ADDR_VAR 0 11
29332: PUSH
29333: LD_INT 0
29335: PPUSH
29336: LD_INT 5
29338: PPUSH
29339: CALL_OW 12
29343: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29344: LD_ADDR_VAR 0 12
29348: PUSH
29349: LD_INT 2
29351: PPUSH
29352: LD_INT 6
29354: PPUSH
29355: CALL_OW 12
29359: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29360: LD_ADDR_VAR 0 9
29364: PUSH
29365: LD_VAR 0 2
29369: PPUSH
29370: LD_VAR 0 11
29374: PPUSH
29375: LD_VAR 0 12
29379: PPUSH
29380: CALL_OW 272
29384: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29385: LD_ADDR_VAR 0 10
29389: PUSH
29390: LD_VAR 0 3
29394: PPUSH
29395: LD_VAR 0 11
29399: PPUSH
29400: LD_VAR 0 12
29404: PPUSH
29405: CALL_OW 273
29409: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29410: LD_VAR 0 9
29414: PPUSH
29415: LD_VAR 0 10
29419: PPUSH
29420: CALL_OW 488
29424: PUSH
29425: LD_VAR 0 9
29429: PUSH
29430: LD_VAR 0 10
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PUSH
29439: LD_VAR 0 7
29443: IN
29444: NOT
29445: AND
29446: PUSH
29447: LD_VAR 0 9
29451: PPUSH
29452: LD_VAR 0 10
29456: PPUSH
29457: CALL_OW 458
29461: NOT
29462: AND
29463: IFFALSE 29505
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29465: LD_ADDR_VAR 0 7
29469: PUSH
29470: LD_VAR 0 7
29474: PPUSH
29475: LD_VAR 0 7
29479: PUSH
29480: LD_INT 1
29482: PLUS
29483: PPUSH
29484: LD_VAR 0 9
29488: PUSH
29489: LD_VAR 0 10
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PPUSH
29498: CALL_OW 1
29502: ST_TO_ADDR
29503: GO 29519
// i := i - 1 ;
29505: LD_ADDR_VAR 0 5
29509: PUSH
29510: LD_VAR 0 5
29514: PUSH
29515: LD_INT 1
29517: MINUS
29518: ST_TO_ADDR
// end ;
29519: GO 29325
29521: POP
29522: POP
// for i in tmp do
29523: LD_ADDR_VAR 0 5
29527: PUSH
29528: LD_VAR 0 7
29532: PUSH
29533: FOR_IN
29534: IFFALSE 29572
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29536: LD_VAR 0 1
29540: PPUSH
29541: LD_VAR 0 5
29545: PUSH
29546: LD_INT 1
29548: ARRAY
29549: PPUSH
29550: LD_VAR 0 5
29554: PUSH
29555: LD_INT 2
29557: ARRAY
29558: PPUSH
29559: CALL 28518 0 3
29563: NOT
29564: IFFALSE 29570
// exit ;
29566: POP
29567: POP
29568: GO 29574
29570: GO 29533
29572: POP
29573: POP
// end ;
29574: LD_VAR 0 4
29578: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29579: LD_INT 0
29581: PPUSH
29582: PPUSH
29583: PPUSH
29584: PPUSH
29585: PPUSH
29586: PPUSH
29587: PPUSH
// if not GetClass ( unit ) = class_sniper then
29588: LD_VAR 0 1
29592: PPUSH
29593: CALL_OW 257
29597: PUSH
29598: LD_INT 5
29600: EQUAL
29601: NOT
29602: IFFALSE 29606
// exit ;
29604: GO 29994
// dist := 8 ;
29606: LD_ADDR_VAR 0 5
29610: PUSH
29611: LD_INT 8
29613: ST_TO_ADDR
// viewRange := 12 ;
29614: LD_ADDR_VAR 0 7
29618: PUSH
29619: LD_INT 12
29621: ST_TO_ADDR
// side := GetSide ( unit ) ;
29622: LD_ADDR_VAR 0 6
29626: PUSH
29627: LD_VAR 0 1
29631: PPUSH
29632: CALL_OW 255
29636: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29637: LD_INT 61
29639: PPUSH
29640: LD_VAR 0 6
29644: PPUSH
29645: CALL_OW 321
29649: PUSH
29650: LD_INT 2
29652: EQUAL
29653: IFFALSE 29663
// viewRange := 16 ;
29655: LD_ADDR_VAR 0 7
29659: PUSH
29660: LD_INT 16
29662: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29663: LD_VAR 0 1
29667: PPUSH
29668: LD_VAR 0 2
29672: PPUSH
29673: LD_VAR 0 3
29677: PPUSH
29678: CALL_OW 297
29682: PUSH
29683: LD_VAR 0 5
29687: GREATER
29688: IFFALSE 29767
// begin ComMoveXY ( unit , x , y ) ;
29690: LD_VAR 0 1
29694: PPUSH
29695: LD_VAR 0 2
29699: PPUSH
29700: LD_VAR 0 3
29704: PPUSH
29705: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29709: LD_INT 35
29711: PPUSH
29712: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29716: LD_VAR 0 1
29720: PPUSH
29721: LD_VAR 0 2
29725: PPUSH
29726: LD_VAR 0 3
29730: PPUSH
29731: CALL 66498 0 3
29735: NOT
29736: IFFALSE 29740
// exit ;
29738: GO 29994
// until GetDistUnitXY ( unit , x , y ) < dist ;
29740: LD_VAR 0 1
29744: PPUSH
29745: LD_VAR 0 2
29749: PPUSH
29750: LD_VAR 0 3
29754: PPUSH
29755: CALL_OW 297
29759: PUSH
29760: LD_VAR 0 5
29764: LESS
29765: IFFALSE 29709
// end ; ComTurnXY ( unit , x , y ) ;
29767: LD_VAR 0 1
29771: PPUSH
29772: LD_VAR 0 2
29776: PPUSH
29777: LD_VAR 0 3
29781: PPUSH
29782: CALL_OW 118
// wait ( 5 ) ;
29786: LD_INT 5
29788: PPUSH
29789: CALL_OW 67
// _d := GetDir ( unit ) ;
29793: LD_ADDR_VAR 0 10
29797: PUSH
29798: LD_VAR 0 1
29802: PPUSH
29803: CALL_OW 254
29807: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29808: LD_ADDR_VAR 0 8
29812: PUSH
29813: LD_VAR 0 1
29817: PPUSH
29818: CALL_OW 250
29822: PPUSH
29823: LD_VAR 0 10
29827: PPUSH
29828: LD_VAR 0 5
29832: PPUSH
29833: CALL_OW 272
29837: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29838: LD_ADDR_VAR 0 9
29842: PUSH
29843: LD_VAR 0 1
29847: PPUSH
29848: CALL_OW 251
29852: PPUSH
29853: LD_VAR 0 10
29857: PPUSH
29858: LD_VAR 0 5
29862: PPUSH
29863: CALL_OW 273
29867: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29868: LD_VAR 0 8
29872: PPUSH
29873: LD_VAR 0 9
29877: PPUSH
29878: CALL_OW 488
29882: NOT
29883: IFFALSE 29887
// exit ;
29885: GO 29994
// ComAnimCustom ( unit , 1 ) ;
29887: LD_VAR 0 1
29891: PPUSH
29892: LD_INT 1
29894: PPUSH
29895: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29899: LD_VAR 0 8
29903: PPUSH
29904: LD_VAR 0 9
29908: PPUSH
29909: LD_VAR 0 6
29913: PPUSH
29914: LD_VAR 0 7
29918: PPUSH
29919: CALL_OW 330
// repeat wait ( 1 ) ;
29923: LD_INT 1
29925: PPUSH
29926: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29930: LD_VAR 0 1
29934: PPUSH
29935: CALL_OW 316
29939: PUSH
29940: LD_VAR 0 1
29944: PPUSH
29945: CALL_OW 314
29949: OR
29950: PUSH
29951: LD_VAR 0 1
29955: PPUSH
29956: CALL_OW 302
29960: NOT
29961: OR
29962: PUSH
29963: LD_VAR 0 1
29967: PPUSH
29968: CALL_OW 301
29972: OR
29973: IFFALSE 29923
// RemoveSeeing ( _x , _y , side ) ;
29975: LD_VAR 0 8
29979: PPUSH
29980: LD_VAR 0 9
29984: PPUSH
29985: LD_VAR 0 6
29989: PPUSH
29990: CALL_OW 331
// end ; end_of_file
29994: LD_VAR 0 4
29998: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29999: LD_INT 0
30001: PPUSH
30002: PPUSH
// if exist_mode then
30003: LD_VAR 0 2
30007: IFFALSE 30032
// unit := CreateCharacter ( prefix & ident ) else
30009: LD_ADDR_VAR 0 5
30013: PUSH
30014: LD_VAR 0 3
30018: PUSH
30019: LD_VAR 0 1
30023: STR
30024: PPUSH
30025: CALL_OW 34
30029: ST_TO_ADDR
30030: GO 30047
// unit := NewCharacter ( ident ) ;
30032: LD_ADDR_VAR 0 5
30036: PUSH
30037: LD_VAR 0 1
30041: PPUSH
30042: CALL_OW 25
30046: ST_TO_ADDR
// result := unit ;
30047: LD_ADDR_VAR 0 4
30051: PUSH
30052: LD_VAR 0 5
30056: ST_TO_ADDR
// end ;
30057: LD_VAR 0 4
30061: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30062: LD_INT 0
30064: PPUSH
30065: PPUSH
// if not side or not nation then
30066: LD_VAR 0 1
30070: NOT
30071: PUSH
30072: LD_VAR 0 2
30076: NOT
30077: OR
30078: IFFALSE 30082
// exit ;
30080: GO 30850
// case nation of nation_american :
30082: LD_VAR 0 2
30086: PUSH
30087: LD_INT 1
30089: DOUBLE
30090: EQUAL
30091: IFTRUE 30095
30093: GO 30309
30095: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30096: LD_ADDR_VAR 0 4
30100: PUSH
30101: LD_INT 35
30103: PUSH
30104: LD_INT 45
30106: PUSH
30107: LD_INT 46
30109: PUSH
30110: LD_INT 47
30112: PUSH
30113: LD_INT 82
30115: PUSH
30116: LD_INT 83
30118: PUSH
30119: LD_INT 84
30121: PUSH
30122: LD_INT 85
30124: PUSH
30125: LD_INT 86
30127: PUSH
30128: LD_INT 1
30130: PUSH
30131: LD_INT 2
30133: PUSH
30134: LD_INT 6
30136: PUSH
30137: LD_INT 15
30139: PUSH
30140: LD_INT 16
30142: PUSH
30143: LD_INT 7
30145: PUSH
30146: LD_INT 12
30148: PUSH
30149: LD_INT 13
30151: PUSH
30152: LD_INT 10
30154: PUSH
30155: LD_INT 14
30157: PUSH
30158: LD_INT 20
30160: PUSH
30161: LD_INT 21
30163: PUSH
30164: LD_INT 22
30166: PUSH
30167: LD_INT 25
30169: PUSH
30170: LD_INT 32
30172: PUSH
30173: LD_INT 27
30175: PUSH
30176: LD_INT 36
30178: PUSH
30179: LD_INT 69
30181: PUSH
30182: LD_INT 39
30184: PUSH
30185: LD_INT 34
30187: PUSH
30188: LD_INT 40
30190: PUSH
30191: LD_INT 48
30193: PUSH
30194: LD_INT 49
30196: PUSH
30197: LD_INT 50
30199: PUSH
30200: LD_INT 51
30202: PUSH
30203: LD_INT 52
30205: PUSH
30206: LD_INT 53
30208: PUSH
30209: LD_INT 54
30211: PUSH
30212: LD_INT 55
30214: PUSH
30215: LD_INT 56
30217: PUSH
30218: LD_INT 57
30220: PUSH
30221: LD_INT 58
30223: PUSH
30224: LD_INT 59
30226: PUSH
30227: LD_INT 60
30229: PUSH
30230: LD_INT 61
30232: PUSH
30233: LD_INT 62
30235: PUSH
30236: LD_INT 80
30238: PUSH
30239: LD_INT 82
30241: PUSH
30242: LD_INT 83
30244: PUSH
30245: LD_INT 84
30247: PUSH
30248: LD_INT 85
30250: PUSH
30251: LD_INT 86
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: LIST
30269: LIST
30270: LIST
30271: LIST
30272: LIST
30273: LIST
30274: LIST
30275: LIST
30276: LIST
30277: LIST
30278: LIST
30279: LIST
30280: LIST
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: ST_TO_ADDR
30307: GO 30774
30309: LD_INT 2
30311: DOUBLE
30312: EQUAL
30313: IFTRUE 30317
30315: GO 30543
30317: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30318: LD_ADDR_VAR 0 4
30322: PUSH
30323: LD_INT 35
30325: PUSH
30326: LD_INT 45
30328: PUSH
30329: LD_INT 46
30331: PUSH
30332: LD_INT 47
30334: PUSH
30335: LD_INT 82
30337: PUSH
30338: LD_INT 83
30340: PUSH
30341: LD_INT 84
30343: PUSH
30344: LD_INT 85
30346: PUSH
30347: LD_INT 87
30349: PUSH
30350: LD_INT 70
30352: PUSH
30353: LD_INT 1
30355: PUSH
30356: LD_INT 11
30358: PUSH
30359: LD_INT 3
30361: PUSH
30362: LD_INT 4
30364: PUSH
30365: LD_INT 5
30367: PUSH
30368: LD_INT 6
30370: PUSH
30371: LD_INT 15
30373: PUSH
30374: LD_INT 18
30376: PUSH
30377: LD_INT 7
30379: PUSH
30380: LD_INT 17
30382: PUSH
30383: LD_INT 8
30385: PUSH
30386: LD_INT 20
30388: PUSH
30389: LD_INT 21
30391: PUSH
30392: LD_INT 22
30394: PUSH
30395: LD_INT 72
30397: PUSH
30398: LD_INT 26
30400: PUSH
30401: LD_INT 69
30403: PUSH
30404: LD_INT 39
30406: PUSH
30407: LD_INT 40
30409: PUSH
30410: LD_INT 41
30412: PUSH
30413: LD_INT 42
30415: PUSH
30416: LD_INT 43
30418: PUSH
30419: LD_INT 48
30421: PUSH
30422: LD_INT 49
30424: PUSH
30425: LD_INT 50
30427: PUSH
30428: LD_INT 51
30430: PUSH
30431: LD_INT 52
30433: PUSH
30434: LD_INT 53
30436: PUSH
30437: LD_INT 54
30439: PUSH
30440: LD_INT 55
30442: PUSH
30443: LD_INT 56
30445: PUSH
30446: LD_INT 60
30448: PUSH
30449: LD_INT 61
30451: PUSH
30452: LD_INT 62
30454: PUSH
30455: LD_INT 66
30457: PUSH
30458: LD_INT 67
30460: PUSH
30461: LD_INT 68
30463: PUSH
30464: LD_INT 81
30466: PUSH
30467: LD_INT 82
30469: PUSH
30470: LD_INT 83
30472: PUSH
30473: LD_INT 84
30475: PUSH
30476: LD_INT 85
30478: PUSH
30479: LD_INT 87
30481: PUSH
30482: LD_INT 88
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: ST_TO_ADDR
30541: GO 30774
30543: LD_INT 3
30545: DOUBLE
30546: EQUAL
30547: IFTRUE 30551
30549: GO 30773
30551: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30552: LD_ADDR_VAR 0 4
30556: PUSH
30557: LD_INT 46
30559: PUSH
30560: LD_INT 47
30562: PUSH
30563: LD_INT 1
30565: PUSH
30566: LD_INT 2
30568: PUSH
30569: LD_INT 82
30571: PUSH
30572: LD_INT 83
30574: PUSH
30575: LD_INT 84
30577: PUSH
30578: LD_INT 85
30580: PUSH
30581: LD_INT 86
30583: PUSH
30584: LD_INT 11
30586: PUSH
30587: LD_INT 9
30589: PUSH
30590: LD_INT 20
30592: PUSH
30593: LD_INT 19
30595: PUSH
30596: LD_INT 21
30598: PUSH
30599: LD_INT 24
30601: PUSH
30602: LD_INT 22
30604: PUSH
30605: LD_INT 25
30607: PUSH
30608: LD_INT 28
30610: PUSH
30611: LD_INT 29
30613: PUSH
30614: LD_INT 30
30616: PUSH
30617: LD_INT 31
30619: PUSH
30620: LD_INT 37
30622: PUSH
30623: LD_INT 38
30625: PUSH
30626: LD_INT 32
30628: PUSH
30629: LD_INT 27
30631: PUSH
30632: LD_INT 33
30634: PUSH
30635: LD_INT 69
30637: PUSH
30638: LD_INT 39
30640: PUSH
30641: LD_INT 34
30643: PUSH
30644: LD_INT 40
30646: PUSH
30647: LD_INT 71
30649: PUSH
30650: LD_INT 23
30652: PUSH
30653: LD_INT 44
30655: PUSH
30656: LD_INT 48
30658: PUSH
30659: LD_INT 49
30661: PUSH
30662: LD_INT 50
30664: PUSH
30665: LD_INT 51
30667: PUSH
30668: LD_INT 52
30670: PUSH
30671: LD_INT 53
30673: PUSH
30674: LD_INT 54
30676: PUSH
30677: LD_INT 55
30679: PUSH
30680: LD_INT 56
30682: PUSH
30683: LD_INT 57
30685: PUSH
30686: LD_INT 58
30688: PUSH
30689: LD_INT 59
30691: PUSH
30692: LD_INT 63
30694: PUSH
30695: LD_INT 64
30697: PUSH
30698: LD_INT 65
30700: PUSH
30701: LD_INT 82
30703: PUSH
30704: LD_INT 83
30706: PUSH
30707: LD_INT 84
30709: PUSH
30710: LD_INT 85
30712: PUSH
30713: LD_INT 86
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: ST_TO_ADDR
30771: GO 30774
30773: POP
// if state > - 1 and state < 3 then
30774: LD_VAR 0 3
30778: PUSH
30779: LD_INT 1
30781: NEG
30782: GREATER
30783: PUSH
30784: LD_VAR 0 3
30788: PUSH
30789: LD_INT 3
30791: LESS
30792: AND
30793: IFFALSE 30850
// for i in result do
30795: LD_ADDR_VAR 0 5
30799: PUSH
30800: LD_VAR 0 4
30804: PUSH
30805: FOR_IN
30806: IFFALSE 30848
// if GetTech ( i , side ) <> state then
30808: LD_VAR 0 5
30812: PPUSH
30813: LD_VAR 0 1
30817: PPUSH
30818: CALL_OW 321
30822: PUSH
30823: LD_VAR 0 3
30827: NONEQUAL
30828: IFFALSE 30846
// result := result diff i ;
30830: LD_ADDR_VAR 0 4
30834: PUSH
30835: LD_VAR 0 4
30839: PUSH
30840: LD_VAR 0 5
30844: DIFF
30845: ST_TO_ADDR
30846: GO 30805
30848: POP
30849: POP
// end ;
30850: LD_VAR 0 4
30854: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30855: LD_INT 0
30857: PPUSH
30858: PPUSH
30859: PPUSH
// result := true ;
30860: LD_ADDR_VAR 0 3
30864: PUSH
30865: LD_INT 1
30867: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30868: LD_ADDR_VAR 0 5
30872: PUSH
30873: LD_VAR 0 2
30877: PPUSH
30878: CALL_OW 480
30882: ST_TO_ADDR
// if not tmp then
30883: LD_VAR 0 5
30887: NOT
30888: IFFALSE 30892
// exit ;
30890: GO 30941
// for i in tmp do
30892: LD_ADDR_VAR 0 4
30896: PUSH
30897: LD_VAR 0 5
30901: PUSH
30902: FOR_IN
30903: IFFALSE 30939
// if GetTech ( i , side ) <> state_researched then
30905: LD_VAR 0 4
30909: PPUSH
30910: LD_VAR 0 1
30914: PPUSH
30915: CALL_OW 321
30919: PUSH
30920: LD_INT 2
30922: NONEQUAL
30923: IFFALSE 30937
// begin result := false ;
30925: LD_ADDR_VAR 0 3
30929: PUSH
30930: LD_INT 0
30932: ST_TO_ADDR
// exit ;
30933: POP
30934: POP
30935: GO 30941
// end ;
30937: GO 30902
30939: POP
30940: POP
// end ;
30941: LD_VAR 0 3
30945: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30946: LD_INT 0
30948: PPUSH
30949: PPUSH
30950: PPUSH
30951: PPUSH
30952: PPUSH
30953: PPUSH
30954: PPUSH
30955: PPUSH
30956: PPUSH
30957: PPUSH
30958: PPUSH
30959: PPUSH
30960: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30961: LD_VAR 0 1
30965: NOT
30966: PUSH
30967: LD_VAR 0 1
30971: PPUSH
30972: CALL_OW 257
30976: PUSH
30977: LD_INT 9
30979: NONEQUAL
30980: OR
30981: IFFALSE 30985
// exit ;
30983: GO 31558
// side := GetSide ( unit ) ;
30985: LD_ADDR_VAR 0 9
30989: PUSH
30990: LD_VAR 0 1
30994: PPUSH
30995: CALL_OW 255
30999: ST_TO_ADDR
// tech_space := tech_spacanom ;
31000: LD_ADDR_VAR 0 12
31004: PUSH
31005: LD_INT 29
31007: ST_TO_ADDR
// tech_time := tech_taurad ;
31008: LD_ADDR_VAR 0 13
31012: PUSH
31013: LD_INT 28
31015: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31016: LD_ADDR_VAR 0 11
31020: PUSH
31021: LD_VAR 0 1
31025: PPUSH
31026: CALL_OW 310
31030: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31031: LD_VAR 0 11
31035: PPUSH
31036: CALL_OW 247
31040: PUSH
31041: LD_INT 2
31043: EQUAL
31044: IFFALSE 31048
// exit ;
31046: GO 31558
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31048: LD_ADDR_VAR 0 8
31052: PUSH
31053: LD_INT 81
31055: PUSH
31056: LD_VAR 0 9
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: PUSH
31065: LD_INT 3
31067: PUSH
31068: LD_INT 21
31070: PUSH
31071: LD_INT 3
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: PPUSH
31086: CALL_OW 69
31090: ST_TO_ADDR
// if not tmp then
31091: LD_VAR 0 8
31095: NOT
31096: IFFALSE 31100
// exit ;
31098: GO 31558
// if in_unit then
31100: LD_VAR 0 11
31104: IFFALSE 31128
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31106: LD_ADDR_VAR 0 10
31110: PUSH
31111: LD_VAR 0 8
31115: PPUSH
31116: LD_VAR 0 11
31120: PPUSH
31121: CALL_OW 74
31125: ST_TO_ADDR
31126: GO 31148
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31128: LD_ADDR_VAR 0 10
31132: PUSH
31133: LD_VAR 0 8
31137: PPUSH
31138: LD_VAR 0 1
31142: PPUSH
31143: CALL_OW 74
31147: ST_TO_ADDR
// if not enemy then
31148: LD_VAR 0 10
31152: NOT
31153: IFFALSE 31157
// exit ;
31155: GO 31558
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31157: LD_VAR 0 11
31161: PUSH
31162: LD_VAR 0 11
31166: PPUSH
31167: LD_VAR 0 10
31171: PPUSH
31172: CALL_OW 296
31176: PUSH
31177: LD_INT 13
31179: GREATER
31180: AND
31181: PUSH
31182: LD_VAR 0 1
31186: PPUSH
31187: LD_VAR 0 10
31191: PPUSH
31192: CALL_OW 296
31196: PUSH
31197: LD_INT 12
31199: GREATER
31200: OR
31201: IFFALSE 31205
// exit ;
31203: GO 31558
// missile := [ 1 ] ;
31205: LD_ADDR_VAR 0 14
31209: PUSH
31210: LD_INT 1
31212: PUSH
31213: EMPTY
31214: LIST
31215: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31216: LD_VAR 0 9
31220: PPUSH
31221: LD_VAR 0 12
31225: PPUSH
31226: CALL_OW 325
31230: IFFALSE 31259
// missile := Replace ( missile , missile + 1 , 2 ) ;
31232: LD_ADDR_VAR 0 14
31236: PUSH
31237: LD_VAR 0 14
31241: PPUSH
31242: LD_VAR 0 14
31246: PUSH
31247: LD_INT 1
31249: PLUS
31250: PPUSH
31251: LD_INT 2
31253: PPUSH
31254: CALL_OW 1
31258: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31259: LD_VAR 0 9
31263: PPUSH
31264: LD_VAR 0 13
31268: PPUSH
31269: CALL_OW 325
31273: PUSH
31274: LD_VAR 0 10
31278: PPUSH
31279: CALL_OW 255
31283: PPUSH
31284: LD_VAR 0 13
31288: PPUSH
31289: CALL_OW 325
31293: NOT
31294: AND
31295: IFFALSE 31324
// missile := Replace ( missile , missile + 1 , 3 ) ;
31297: LD_ADDR_VAR 0 14
31301: PUSH
31302: LD_VAR 0 14
31306: PPUSH
31307: LD_VAR 0 14
31311: PUSH
31312: LD_INT 1
31314: PLUS
31315: PPUSH
31316: LD_INT 3
31318: PPUSH
31319: CALL_OW 1
31323: ST_TO_ADDR
// if missile < 2 then
31324: LD_VAR 0 14
31328: PUSH
31329: LD_INT 2
31331: LESS
31332: IFFALSE 31336
// exit ;
31334: GO 31558
// x := GetX ( enemy ) ;
31336: LD_ADDR_VAR 0 4
31340: PUSH
31341: LD_VAR 0 10
31345: PPUSH
31346: CALL_OW 250
31350: ST_TO_ADDR
// y := GetY ( enemy ) ;
31351: LD_ADDR_VAR 0 5
31355: PUSH
31356: LD_VAR 0 10
31360: PPUSH
31361: CALL_OW 251
31365: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31366: LD_ADDR_VAR 0 6
31370: PUSH
31371: LD_VAR 0 4
31375: PUSH
31376: LD_INT 1
31378: NEG
31379: PPUSH
31380: LD_INT 1
31382: PPUSH
31383: CALL_OW 12
31387: PLUS
31388: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31389: LD_ADDR_VAR 0 7
31393: PUSH
31394: LD_VAR 0 5
31398: PUSH
31399: LD_INT 1
31401: NEG
31402: PPUSH
31403: LD_INT 1
31405: PPUSH
31406: CALL_OW 12
31410: PLUS
31411: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31412: LD_VAR 0 6
31416: PPUSH
31417: LD_VAR 0 7
31421: PPUSH
31422: CALL_OW 488
31426: NOT
31427: IFFALSE 31449
// begin _x := x ;
31429: LD_ADDR_VAR 0 6
31433: PUSH
31434: LD_VAR 0 4
31438: ST_TO_ADDR
// _y := y ;
31439: LD_ADDR_VAR 0 7
31443: PUSH
31444: LD_VAR 0 5
31448: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31449: LD_ADDR_VAR 0 3
31453: PUSH
31454: LD_INT 1
31456: PPUSH
31457: LD_VAR 0 14
31461: PPUSH
31462: CALL_OW 12
31466: ST_TO_ADDR
// case i of 1 :
31467: LD_VAR 0 3
31471: PUSH
31472: LD_INT 1
31474: DOUBLE
31475: EQUAL
31476: IFTRUE 31480
31478: GO 31497
31480: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31481: LD_VAR 0 1
31485: PPUSH
31486: LD_VAR 0 10
31490: PPUSH
31491: CALL_OW 115
31495: GO 31558
31497: LD_INT 2
31499: DOUBLE
31500: EQUAL
31501: IFTRUE 31505
31503: GO 31527
31505: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31506: LD_VAR 0 1
31510: PPUSH
31511: LD_VAR 0 6
31515: PPUSH
31516: LD_VAR 0 7
31520: PPUSH
31521: CALL_OW 153
31525: GO 31558
31527: LD_INT 3
31529: DOUBLE
31530: EQUAL
31531: IFTRUE 31535
31533: GO 31557
31535: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31536: LD_VAR 0 1
31540: PPUSH
31541: LD_VAR 0 6
31545: PPUSH
31546: LD_VAR 0 7
31550: PPUSH
31551: CALL_OW 154
31555: GO 31558
31557: POP
// end ;
31558: LD_VAR 0 2
31562: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31563: LD_INT 0
31565: PPUSH
31566: PPUSH
31567: PPUSH
31568: PPUSH
31569: PPUSH
31570: PPUSH
// if not unit or not building then
31571: LD_VAR 0 1
31575: NOT
31576: PUSH
31577: LD_VAR 0 2
31581: NOT
31582: OR
31583: IFFALSE 31587
// exit ;
31585: GO 31745
// x := GetX ( building ) ;
31587: LD_ADDR_VAR 0 5
31591: PUSH
31592: LD_VAR 0 2
31596: PPUSH
31597: CALL_OW 250
31601: ST_TO_ADDR
// y := GetY ( building ) ;
31602: LD_ADDR_VAR 0 6
31606: PUSH
31607: LD_VAR 0 2
31611: PPUSH
31612: CALL_OW 251
31616: ST_TO_ADDR
// for i = 0 to 5 do
31617: LD_ADDR_VAR 0 4
31621: PUSH
31622: DOUBLE
31623: LD_INT 0
31625: DEC
31626: ST_TO_ADDR
31627: LD_INT 5
31629: PUSH
31630: FOR_TO
31631: IFFALSE 31743
// begin _x := ShiftX ( x , i , 3 ) ;
31633: LD_ADDR_VAR 0 7
31637: PUSH
31638: LD_VAR 0 5
31642: PPUSH
31643: LD_VAR 0 4
31647: PPUSH
31648: LD_INT 3
31650: PPUSH
31651: CALL_OW 272
31655: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31656: LD_ADDR_VAR 0 8
31660: PUSH
31661: LD_VAR 0 6
31665: PPUSH
31666: LD_VAR 0 4
31670: PPUSH
31671: LD_INT 3
31673: PPUSH
31674: CALL_OW 273
31678: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31679: LD_VAR 0 7
31683: PPUSH
31684: LD_VAR 0 8
31688: PPUSH
31689: CALL_OW 488
31693: NOT
31694: IFFALSE 31698
// continue ;
31696: GO 31630
// if HexInfo ( _x , _y ) = 0 then
31698: LD_VAR 0 7
31702: PPUSH
31703: LD_VAR 0 8
31707: PPUSH
31708: CALL_OW 428
31712: PUSH
31713: LD_INT 0
31715: EQUAL
31716: IFFALSE 31741
// begin ComMoveXY ( unit , _x , _y ) ;
31718: LD_VAR 0 1
31722: PPUSH
31723: LD_VAR 0 7
31727: PPUSH
31728: LD_VAR 0 8
31732: PPUSH
31733: CALL_OW 111
// exit ;
31737: POP
31738: POP
31739: GO 31745
// end ; end ;
31741: GO 31630
31743: POP
31744: POP
// end ;
31745: LD_VAR 0 3
31749: RET
// export function ScanBase ( side , base_area ) ; begin
31750: LD_INT 0
31752: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31753: LD_ADDR_VAR 0 3
31757: PUSH
31758: LD_VAR 0 2
31762: PPUSH
31763: LD_INT 81
31765: PUSH
31766: LD_VAR 0 1
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PPUSH
31775: CALL_OW 70
31779: ST_TO_ADDR
// end ;
31780: LD_VAR 0 3
31784: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31785: LD_INT 0
31787: PPUSH
31788: PPUSH
31789: PPUSH
31790: PPUSH
// result := false ;
31791: LD_ADDR_VAR 0 2
31795: PUSH
31796: LD_INT 0
31798: ST_TO_ADDR
// side := GetSide ( unit ) ;
31799: LD_ADDR_VAR 0 3
31803: PUSH
31804: LD_VAR 0 1
31808: PPUSH
31809: CALL_OW 255
31813: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31814: LD_ADDR_VAR 0 4
31818: PUSH
31819: LD_VAR 0 1
31823: PPUSH
31824: CALL_OW 248
31828: ST_TO_ADDR
// case nat of 1 :
31829: LD_VAR 0 4
31833: PUSH
31834: LD_INT 1
31836: DOUBLE
31837: EQUAL
31838: IFTRUE 31842
31840: GO 31853
31842: POP
// tech := tech_lassight ; 2 :
31843: LD_ADDR_VAR 0 5
31847: PUSH
31848: LD_INT 12
31850: ST_TO_ADDR
31851: GO 31892
31853: LD_INT 2
31855: DOUBLE
31856: EQUAL
31857: IFTRUE 31861
31859: GO 31872
31861: POP
// tech := tech_mortar ; 3 :
31862: LD_ADDR_VAR 0 5
31866: PUSH
31867: LD_INT 41
31869: ST_TO_ADDR
31870: GO 31892
31872: LD_INT 3
31874: DOUBLE
31875: EQUAL
31876: IFTRUE 31880
31878: GO 31891
31880: POP
// tech := tech_bazooka ; end ;
31881: LD_ADDR_VAR 0 5
31885: PUSH
31886: LD_INT 44
31888: ST_TO_ADDR
31889: GO 31892
31891: POP
// if Researched ( side , tech ) then
31892: LD_VAR 0 3
31896: PPUSH
31897: LD_VAR 0 5
31901: PPUSH
31902: CALL_OW 325
31906: IFFALSE 31933
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31908: LD_ADDR_VAR 0 2
31912: PUSH
31913: LD_INT 5
31915: PUSH
31916: LD_INT 8
31918: PUSH
31919: LD_INT 9
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: LIST
31926: PUSH
31927: LD_VAR 0 4
31931: ARRAY
31932: ST_TO_ADDR
// end ;
31933: LD_VAR 0 2
31937: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31938: LD_INT 0
31940: PPUSH
31941: PPUSH
31942: PPUSH
// if not mines then
31943: LD_VAR 0 2
31947: NOT
31948: IFFALSE 31952
// exit ;
31950: GO 32096
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31952: LD_ADDR_VAR 0 5
31956: PUSH
31957: LD_INT 81
31959: PUSH
31960: LD_VAR 0 1
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: LD_INT 3
31971: PUSH
31972: LD_INT 21
31974: PUSH
31975: LD_INT 3
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PPUSH
31990: CALL_OW 69
31994: ST_TO_ADDR
// for i in mines do
31995: LD_ADDR_VAR 0 4
31999: PUSH
32000: LD_VAR 0 2
32004: PUSH
32005: FOR_IN
32006: IFFALSE 32094
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32008: LD_VAR 0 4
32012: PUSH
32013: LD_INT 1
32015: ARRAY
32016: PPUSH
32017: LD_VAR 0 4
32021: PUSH
32022: LD_INT 2
32024: ARRAY
32025: PPUSH
32026: CALL_OW 458
32030: NOT
32031: IFFALSE 32035
// continue ;
32033: GO 32005
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32035: LD_VAR 0 4
32039: PUSH
32040: LD_INT 1
32042: ARRAY
32043: PPUSH
32044: LD_VAR 0 4
32048: PUSH
32049: LD_INT 2
32051: ARRAY
32052: PPUSH
32053: CALL_OW 428
32057: PUSH
32058: LD_VAR 0 5
32062: IN
32063: IFFALSE 32092
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32065: LD_VAR 0 4
32069: PUSH
32070: LD_INT 1
32072: ARRAY
32073: PPUSH
32074: LD_VAR 0 4
32078: PUSH
32079: LD_INT 2
32081: ARRAY
32082: PPUSH
32083: LD_VAR 0 1
32087: PPUSH
32088: CALL_OW 456
// end ;
32092: GO 32005
32094: POP
32095: POP
// end ;
32096: LD_VAR 0 3
32100: RET
// export function Count ( array ) ; begin
32101: LD_INT 0
32103: PPUSH
// result := array + 0 ;
32104: LD_ADDR_VAR 0 2
32108: PUSH
32109: LD_VAR 0 1
32113: PUSH
32114: LD_INT 0
32116: PLUS
32117: ST_TO_ADDR
// end ;
32118: LD_VAR 0 2
32122: RET
// export function IsEmpty ( building ) ; begin
32123: LD_INT 0
32125: PPUSH
// if not building then
32126: LD_VAR 0 1
32130: NOT
32131: IFFALSE 32135
// exit ;
32133: GO 32178
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32135: LD_ADDR_VAR 0 2
32139: PUSH
32140: LD_VAR 0 1
32144: PUSH
32145: LD_INT 22
32147: PUSH
32148: LD_VAR 0 1
32152: PPUSH
32153: CALL_OW 255
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 58
32164: PUSH
32165: EMPTY
32166: LIST
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: PPUSH
32172: CALL_OW 69
32176: IN
32177: ST_TO_ADDR
// end ;
32178: LD_VAR 0 2
32182: RET
// export function IsNotFull ( building ) ; var places ; begin
32183: LD_INT 0
32185: PPUSH
32186: PPUSH
// if not building then
32187: LD_VAR 0 1
32191: NOT
32192: IFFALSE 32196
// exit ;
32194: GO 32224
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
32196: LD_ADDR_VAR 0 2
32200: PUSH
32201: LD_VAR 0 1
32205: PPUSH
32206: LD_INT 3
32208: PUSH
32209: LD_INT 62
32211: PUSH
32212: EMPTY
32213: LIST
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PPUSH
32219: CALL_OW 72
32223: ST_TO_ADDR
// end ;
32224: LD_VAR 0 2
32228: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32229: LD_INT 0
32231: PPUSH
32232: PPUSH
32233: PPUSH
32234: PPUSH
// tmp := [ ] ;
32235: LD_ADDR_VAR 0 3
32239: PUSH
32240: EMPTY
32241: ST_TO_ADDR
// list := [ ] ;
32242: LD_ADDR_VAR 0 5
32246: PUSH
32247: EMPTY
32248: ST_TO_ADDR
// for i = 16 to 25 do
32249: LD_ADDR_VAR 0 4
32253: PUSH
32254: DOUBLE
32255: LD_INT 16
32257: DEC
32258: ST_TO_ADDR
32259: LD_INT 25
32261: PUSH
32262: FOR_TO
32263: IFFALSE 32336
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32265: LD_ADDR_VAR 0 3
32269: PUSH
32270: LD_VAR 0 3
32274: PUSH
32275: LD_INT 22
32277: PUSH
32278: LD_VAR 0 1
32282: PPUSH
32283: CALL_OW 255
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PUSH
32292: LD_INT 91
32294: PUSH
32295: LD_VAR 0 1
32299: PUSH
32300: LD_INT 6
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: LIST
32307: PUSH
32308: LD_INT 30
32310: PUSH
32311: LD_VAR 0 4
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: LIST
32324: PUSH
32325: EMPTY
32326: LIST
32327: PPUSH
32328: CALL_OW 69
32332: ADD
32333: ST_TO_ADDR
32334: GO 32262
32336: POP
32337: POP
// for i = 1 to tmp do
32338: LD_ADDR_VAR 0 4
32342: PUSH
32343: DOUBLE
32344: LD_INT 1
32346: DEC
32347: ST_TO_ADDR
32348: LD_VAR 0 3
32352: PUSH
32353: FOR_TO
32354: IFFALSE 32442
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32356: LD_ADDR_VAR 0 5
32360: PUSH
32361: LD_VAR 0 5
32365: PUSH
32366: LD_VAR 0 3
32370: PUSH
32371: LD_VAR 0 4
32375: ARRAY
32376: PPUSH
32377: CALL_OW 266
32381: PUSH
32382: LD_VAR 0 3
32386: PUSH
32387: LD_VAR 0 4
32391: ARRAY
32392: PPUSH
32393: CALL_OW 250
32397: PUSH
32398: LD_VAR 0 3
32402: PUSH
32403: LD_VAR 0 4
32407: ARRAY
32408: PPUSH
32409: CALL_OW 251
32413: PUSH
32414: LD_VAR 0 3
32418: PUSH
32419: LD_VAR 0 4
32423: ARRAY
32424: PPUSH
32425: CALL_OW 254
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: PUSH
32436: EMPTY
32437: LIST
32438: ADD
32439: ST_TO_ADDR
32440: GO 32353
32442: POP
32443: POP
// result := list ;
32444: LD_ADDR_VAR 0 2
32448: PUSH
32449: LD_VAR 0 5
32453: ST_TO_ADDR
// end ;
32454: LD_VAR 0 2
32458: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32459: LD_INT 0
32461: PPUSH
32462: PPUSH
32463: PPUSH
32464: PPUSH
32465: PPUSH
32466: PPUSH
32467: PPUSH
// if not factory then
32468: LD_VAR 0 1
32472: NOT
32473: IFFALSE 32477
// exit ;
32475: GO 33070
// if control = control_apeman then
32477: LD_VAR 0 4
32481: PUSH
32482: LD_INT 5
32484: EQUAL
32485: IFFALSE 32594
// begin tmp := UnitsInside ( factory ) ;
32487: LD_ADDR_VAR 0 8
32491: PUSH
32492: LD_VAR 0 1
32496: PPUSH
32497: CALL_OW 313
32501: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32502: LD_VAR 0 8
32506: PPUSH
32507: LD_INT 25
32509: PUSH
32510: LD_INT 12
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PPUSH
32517: CALL_OW 72
32521: NOT
32522: IFFALSE 32532
// control := control_manual ;
32524: LD_ADDR_VAR 0 4
32528: PUSH
32529: LD_INT 1
32531: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32532: LD_ADDR_VAR 0 8
32536: PUSH
32537: LD_VAR 0 1
32541: PPUSH
32542: CALL 32229 0 1
32546: ST_TO_ADDR
// if tmp then
32547: LD_VAR 0 8
32551: IFFALSE 32594
// begin for i in tmp do
32553: LD_ADDR_VAR 0 7
32557: PUSH
32558: LD_VAR 0 8
32562: PUSH
32563: FOR_IN
32564: IFFALSE 32592
// if i [ 1 ] = b_ext_radio then
32566: LD_VAR 0 7
32570: PUSH
32571: LD_INT 1
32573: ARRAY
32574: PUSH
32575: LD_INT 22
32577: EQUAL
32578: IFFALSE 32590
// begin control := control_remote ;
32580: LD_ADDR_VAR 0 4
32584: PUSH
32585: LD_INT 2
32587: ST_TO_ADDR
// break ;
32588: GO 32592
// end ;
32590: GO 32563
32592: POP
32593: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32594: LD_VAR 0 1
32598: PPUSH
32599: LD_VAR 0 2
32603: PPUSH
32604: LD_VAR 0 3
32608: PPUSH
32609: LD_VAR 0 4
32613: PPUSH
32614: LD_VAR 0 5
32618: PPUSH
32619: CALL_OW 448
32623: IFFALSE 32658
// begin result := [ chassis , engine , control , weapon ] ;
32625: LD_ADDR_VAR 0 6
32629: PUSH
32630: LD_VAR 0 2
32634: PUSH
32635: LD_VAR 0 3
32639: PUSH
32640: LD_VAR 0 4
32644: PUSH
32645: LD_VAR 0 5
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: ST_TO_ADDR
// exit ;
32656: GO 33070
// end ; _chassis := AvailableChassisList ( factory ) ;
32658: LD_ADDR_VAR 0 9
32662: PUSH
32663: LD_VAR 0 1
32667: PPUSH
32668: CALL_OW 475
32672: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32673: LD_ADDR_VAR 0 11
32677: PUSH
32678: LD_VAR 0 1
32682: PPUSH
32683: CALL_OW 476
32687: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32688: LD_ADDR_VAR 0 12
32692: PUSH
32693: LD_VAR 0 1
32697: PPUSH
32698: CALL_OW 477
32702: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32703: LD_ADDR_VAR 0 10
32707: PUSH
32708: LD_VAR 0 1
32712: PPUSH
32713: CALL_OW 478
32717: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32718: LD_VAR 0 9
32722: NOT
32723: PUSH
32724: LD_VAR 0 11
32728: NOT
32729: OR
32730: PUSH
32731: LD_VAR 0 12
32735: NOT
32736: OR
32737: PUSH
32738: LD_VAR 0 10
32742: NOT
32743: OR
32744: IFFALSE 32779
// begin result := [ chassis , engine , control , weapon ] ;
32746: LD_ADDR_VAR 0 6
32750: PUSH
32751: LD_VAR 0 2
32755: PUSH
32756: LD_VAR 0 3
32760: PUSH
32761: LD_VAR 0 4
32765: PUSH
32766: LD_VAR 0 5
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: LIST
32775: LIST
32776: ST_TO_ADDR
// exit ;
32777: GO 33070
// end ; if not chassis in _chassis then
32779: LD_VAR 0 2
32783: PUSH
32784: LD_VAR 0 9
32788: IN
32789: NOT
32790: IFFALSE 32816
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32792: LD_ADDR_VAR 0 2
32796: PUSH
32797: LD_VAR 0 9
32801: PUSH
32802: LD_INT 1
32804: PPUSH
32805: LD_VAR 0 9
32809: PPUSH
32810: CALL_OW 12
32814: ARRAY
32815: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32816: LD_VAR 0 2
32820: PPUSH
32821: LD_VAR 0 3
32825: PPUSH
32826: CALL 33075 0 2
32830: NOT
32831: IFFALSE 32890
// repeat engine := _engine [ 1 ] ;
32833: LD_ADDR_VAR 0 3
32837: PUSH
32838: LD_VAR 0 11
32842: PUSH
32843: LD_INT 1
32845: ARRAY
32846: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32847: LD_ADDR_VAR 0 11
32851: PUSH
32852: LD_VAR 0 11
32856: PPUSH
32857: LD_INT 1
32859: PPUSH
32860: CALL_OW 3
32864: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32865: LD_VAR 0 2
32869: PPUSH
32870: LD_VAR 0 3
32874: PPUSH
32875: CALL 33075 0 2
32879: PUSH
32880: LD_VAR 0 11
32884: PUSH
32885: EMPTY
32886: EQUAL
32887: OR
32888: IFFALSE 32833
// if not control in _control then
32890: LD_VAR 0 4
32894: PUSH
32895: LD_VAR 0 12
32899: IN
32900: NOT
32901: IFFALSE 32927
// control := _control [ rand ( 1 , _control ) ] ;
32903: LD_ADDR_VAR 0 4
32907: PUSH
32908: LD_VAR 0 12
32912: PUSH
32913: LD_INT 1
32915: PPUSH
32916: LD_VAR 0 12
32920: PPUSH
32921: CALL_OW 12
32925: ARRAY
32926: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32927: LD_VAR 0 2
32931: PPUSH
32932: LD_VAR 0 5
32936: PPUSH
32937: CALL 33295 0 2
32941: NOT
32942: IFFALSE 33001
// repeat weapon := _weapon [ 1 ] ;
32944: LD_ADDR_VAR 0 5
32948: PUSH
32949: LD_VAR 0 10
32953: PUSH
32954: LD_INT 1
32956: ARRAY
32957: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32958: LD_ADDR_VAR 0 10
32962: PUSH
32963: LD_VAR 0 10
32967: PPUSH
32968: LD_INT 1
32970: PPUSH
32971: CALL_OW 3
32975: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32976: LD_VAR 0 2
32980: PPUSH
32981: LD_VAR 0 5
32985: PPUSH
32986: CALL 33295 0 2
32990: PUSH
32991: LD_VAR 0 10
32995: PUSH
32996: EMPTY
32997: EQUAL
32998: OR
32999: IFFALSE 32944
// result := [ ] ;
33001: LD_ADDR_VAR 0 6
33005: PUSH
33006: EMPTY
33007: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33008: LD_VAR 0 1
33012: PPUSH
33013: LD_VAR 0 2
33017: PPUSH
33018: LD_VAR 0 3
33022: PPUSH
33023: LD_VAR 0 4
33027: PPUSH
33028: LD_VAR 0 5
33032: PPUSH
33033: CALL_OW 448
33037: IFFALSE 33070
// result := [ chassis , engine , control , weapon ] ;
33039: LD_ADDR_VAR 0 6
33043: PUSH
33044: LD_VAR 0 2
33048: PUSH
33049: LD_VAR 0 3
33053: PUSH
33054: LD_VAR 0 4
33058: PUSH
33059: LD_VAR 0 5
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: ST_TO_ADDR
// end ;
33070: LD_VAR 0 6
33074: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33075: LD_INT 0
33077: PPUSH
// if not chassis or not engine then
33078: LD_VAR 0 1
33082: NOT
33083: PUSH
33084: LD_VAR 0 2
33088: NOT
33089: OR
33090: IFFALSE 33094
// exit ;
33092: GO 33290
// case engine of engine_solar :
33094: LD_VAR 0 2
33098: PUSH
33099: LD_INT 2
33101: DOUBLE
33102: EQUAL
33103: IFTRUE 33107
33105: GO 33145
33107: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33108: LD_ADDR_VAR 0 3
33112: PUSH
33113: LD_INT 11
33115: PUSH
33116: LD_INT 12
33118: PUSH
33119: LD_INT 13
33121: PUSH
33122: LD_INT 14
33124: PUSH
33125: LD_INT 1
33127: PUSH
33128: LD_INT 2
33130: PUSH
33131: LD_INT 3
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: ST_TO_ADDR
33143: GO 33274
33145: LD_INT 1
33147: DOUBLE
33148: EQUAL
33149: IFTRUE 33153
33151: GO 33215
33153: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33154: LD_ADDR_VAR 0 3
33158: PUSH
33159: LD_INT 11
33161: PUSH
33162: LD_INT 12
33164: PUSH
33165: LD_INT 13
33167: PUSH
33168: LD_INT 14
33170: PUSH
33171: LD_INT 1
33173: PUSH
33174: LD_INT 2
33176: PUSH
33177: LD_INT 3
33179: PUSH
33180: LD_INT 4
33182: PUSH
33183: LD_INT 5
33185: PUSH
33186: LD_INT 21
33188: PUSH
33189: LD_INT 23
33191: PUSH
33192: LD_INT 22
33194: PUSH
33195: LD_INT 24
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: ST_TO_ADDR
33213: GO 33274
33215: LD_INT 3
33217: DOUBLE
33218: EQUAL
33219: IFTRUE 33223
33221: GO 33273
33223: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33224: LD_ADDR_VAR 0 3
33228: PUSH
33229: LD_INT 13
33231: PUSH
33232: LD_INT 14
33234: PUSH
33235: LD_INT 2
33237: PUSH
33238: LD_INT 3
33240: PUSH
33241: LD_INT 4
33243: PUSH
33244: LD_INT 5
33246: PUSH
33247: LD_INT 21
33249: PUSH
33250: LD_INT 22
33252: PUSH
33253: LD_INT 23
33255: PUSH
33256: LD_INT 24
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: ST_TO_ADDR
33271: GO 33274
33273: POP
// result := ( chassis in result ) ;
33274: LD_ADDR_VAR 0 3
33278: PUSH
33279: LD_VAR 0 1
33283: PUSH
33284: LD_VAR 0 3
33288: IN
33289: ST_TO_ADDR
// end ;
33290: LD_VAR 0 3
33294: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33295: LD_INT 0
33297: PPUSH
// if not chassis or not weapon then
33298: LD_VAR 0 1
33302: NOT
33303: PUSH
33304: LD_VAR 0 2
33308: NOT
33309: OR
33310: IFFALSE 33314
// exit ;
33312: GO 34374
// case weapon of us_machine_gun :
33314: LD_VAR 0 2
33318: PUSH
33319: LD_INT 2
33321: DOUBLE
33322: EQUAL
33323: IFTRUE 33327
33325: GO 33357
33327: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33328: LD_ADDR_VAR 0 3
33332: PUSH
33333: LD_INT 1
33335: PUSH
33336: LD_INT 2
33338: PUSH
33339: LD_INT 3
33341: PUSH
33342: LD_INT 4
33344: PUSH
33345: LD_INT 5
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: ST_TO_ADDR
33355: GO 34358
33357: LD_INT 3
33359: DOUBLE
33360: EQUAL
33361: IFTRUE 33365
33363: GO 33395
33365: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33366: LD_ADDR_VAR 0 3
33370: PUSH
33371: LD_INT 1
33373: PUSH
33374: LD_INT 2
33376: PUSH
33377: LD_INT 3
33379: PUSH
33380: LD_INT 4
33382: PUSH
33383: LD_INT 5
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: ST_TO_ADDR
33393: GO 34358
33395: LD_INT 11
33397: DOUBLE
33398: EQUAL
33399: IFTRUE 33403
33401: GO 33433
33403: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33404: LD_ADDR_VAR 0 3
33408: PUSH
33409: LD_INT 1
33411: PUSH
33412: LD_INT 2
33414: PUSH
33415: LD_INT 3
33417: PUSH
33418: LD_INT 4
33420: PUSH
33421: LD_INT 5
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: ST_TO_ADDR
33431: GO 34358
33433: LD_INT 4
33435: DOUBLE
33436: EQUAL
33437: IFTRUE 33441
33439: GO 33467
33441: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33442: LD_ADDR_VAR 0 3
33446: PUSH
33447: LD_INT 2
33449: PUSH
33450: LD_INT 3
33452: PUSH
33453: LD_INT 4
33455: PUSH
33456: LD_INT 5
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: ST_TO_ADDR
33465: GO 34358
33467: LD_INT 5
33469: DOUBLE
33470: EQUAL
33471: IFTRUE 33475
33473: GO 33501
33475: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33476: LD_ADDR_VAR 0 3
33480: PUSH
33481: LD_INT 2
33483: PUSH
33484: LD_INT 3
33486: PUSH
33487: LD_INT 4
33489: PUSH
33490: LD_INT 5
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: ST_TO_ADDR
33499: GO 34358
33501: LD_INT 9
33503: DOUBLE
33504: EQUAL
33505: IFTRUE 33509
33507: GO 33535
33509: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33510: LD_ADDR_VAR 0 3
33514: PUSH
33515: LD_INT 2
33517: PUSH
33518: LD_INT 3
33520: PUSH
33521: LD_INT 4
33523: PUSH
33524: LD_INT 5
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: ST_TO_ADDR
33533: GO 34358
33535: LD_INT 7
33537: DOUBLE
33538: EQUAL
33539: IFTRUE 33543
33541: GO 33569
33543: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33544: LD_ADDR_VAR 0 3
33548: PUSH
33549: LD_INT 2
33551: PUSH
33552: LD_INT 3
33554: PUSH
33555: LD_INT 4
33557: PUSH
33558: LD_INT 5
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: ST_TO_ADDR
33567: GO 34358
33569: LD_INT 12
33571: DOUBLE
33572: EQUAL
33573: IFTRUE 33577
33575: GO 33603
33577: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33578: LD_ADDR_VAR 0 3
33582: PUSH
33583: LD_INT 2
33585: PUSH
33586: LD_INT 3
33588: PUSH
33589: LD_INT 4
33591: PUSH
33592: LD_INT 5
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: ST_TO_ADDR
33601: GO 34358
33603: LD_INT 13
33605: DOUBLE
33606: EQUAL
33607: IFTRUE 33611
33609: GO 33637
33611: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33612: LD_ADDR_VAR 0 3
33616: PUSH
33617: LD_INT 2
33619: PUSH
33620: LD_INT 3
33622: PUSH
33623: LD_INT 4
33625: PUSH
33626: LD_INT 5
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: ST_TO_ADDR
33635: GO 34358
33637: LD_INT 14
33639: DOUBLE
33640: EQUAL
33641: IFTRUE 33645
33643: GO 33663
33645: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33646: LD_ADDR_VAR 0 3
33650: PUSH
33651: LD_INT 4
33653: PUSH
33654: LD_INT 5
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: ST_TO_ADDR
33661: GO 34358
33663: LD_INT 6
33665: DOUBLE
33666: EQUAL
33667: IFTRUE 33671
33669: GO 33689
33671: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33672: LD_ADDR_VAR 0 3
33676: PUSH
33677: LD_INT 4
33679: PUSH
33680: LD_INT 5
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: ST_TO_ADDR
33687: GO 34358
33689: LD_INT 10
33691: DOUBLE
33692: EQUAL
33693: IFTRUE 33697
33695: GO 33715
33697: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33698: LD_ADDR_VAR 0 3
33702: PUSH
33703: LD_INT 4
33705: PUSH
33706: LD_INT 5
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: ST_TO_ADDR
33713: GO 34358
33715: LD_INT 22
33717: DOUBLE
33718: EQUAL
33719: IFTRUE 33723
33721: GO 33749
33723: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33724: LD_ADDR_VAR 0 3
33728: PUSH
33729: LD_INT 11
33731: PUSH
33732: LD_INT 12
33734: PUSH
33735: LD_INT 13
33737: PUSH
33738: LD_INT 14
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: ST_TO_ADDR
33747: GO 34358
33749: LD_INT 23
33751: DOUBLE
33752: EQUAL
33753: IFTRUE 33757
33755: GO 33783
33757: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33758: LD_ADDR_VAR 0 3
33762: PUSH
33763: LD_INT 11
33765: PUSH
33766: LD_INT 12
33768: PUSH
33769: LD_INT 13
33771: PUSH
33772: LD_INT 14
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: ST_TO_ADDR
33781: GO 34358
33783: LD_INT 24
33785: DOUBLE
33786: EQUAL
33787: IFTRUE 33791
33789: GO 33817
33791: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33792: LD_ADDR_VAR 0 3
33796: PUSH
33797: LD_INT 11
33799: PUSH
33800: LD_INT 12
33802: PUSH
33803: LD_INT 13
33805: PUSH
33806: LD_INT 14
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: ST_TO_ADDR
33815: GO 34358
33817: LD_INT 30
33819: DOUBLE
33820: EQUAL
33821: IFTRUE 33825
33823: GO 33851
33825: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33826: LD_ADDR_VAR 0 3
33830: PUSH
33831: LD_INT 11
33833: PUSH
33834: LD_INT 12
33836: PUSH
33837: LD_INT 13
33839: PUSH
33840: LD_INT 14
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: ST_TO_ADDR
33849: GO 34358
33851: LD_INT 25
33853: DOUBLE
33854: EQUAL
33855: IFTRUE 33859
33857: GO 33877
33859: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33860: LD_ADDR_VAR 0 3
33864: PUSH
33865: LD_INT 13
33867: PUSH
33868: LD_INT 14
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: ST_TO_ADDR
33875: GO 34358
33877: LD_INT 27
33879: DOUBLE
33880: EQUAL
33881: IFTRUE 33885
33883: GO 33903
33885: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33886: LD_ADDR_VAR 0 3
33890: PUSH
33891: LD_INT 13
33893: PUSH
33894: LD_INT 14
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: ST_TO_ADDR
33901: GO 34358
33903: LD_INT 92
33905: DOUBLE
33906: EQUAL
33907: IFTRUE 33911
33909: GO 33937
33911: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33912: LD_ADDR_VAR 0 3
33916: PUSH
33917: LD_INT 11
33919: PUSH
33920: LD_INT 12
33922: PUSH
33923: LD_INT 13
33925: PUSH
33926: LD_INT 14
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: ST_TO_ADDR
33935: GO 34358
33937: LD_INT 28
33939: DOUBLE
33940: EQUAL
33941: IFTRUE 33945
33943: GO 33963
33945: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33946: LD_ADDR_VAR 0 3
33950: PUSH
33951: LD_INT 13
33953: PUSH
33954: LD_INT 14
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: ST_TO_ADDR
33961: GO 34358
33963: LD_INT 29
33965: DOUBLE
33966: EQUAL
33967: IFTRUE 33971
33969: GO 33989
33971: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33972: LD_ADDR_VAR 0 3
33976: PUSH
33977: LD_INT 13
33979: PUSH
33980: LD_INT 14
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: ST_TO_ADDR
33987: GO 34358
33989: LD_INT 31
33991: DOUBLE
33992: EQUAL
33993: IFTRUE 33997
33995: GO 34015
33997: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33998: LD_ADDR_VAR 0 3
34002: PUSH
34003: LD_INT 13
34005: PUSH
34006: LD_INT 14
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: ST_TO_ADDR
34013: GO 34358
34015: LD_INT 26
34017: DOUBLE
34018: EQUAL
34019: IFTRUE 34023
34021: GO 34041
34023: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34024: LD_ADDR_VAR 0 3
34028: PUSH
34029: LD_INT 13
34031: PUSH
34032: LD_INT 14
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: ST_TO_ADDR
34039: GO 34358
34041: LD_INT 42
34043: DOUBLE
34044: EQUAL
34045: IFTRUE 34049
34047: GO 34075
34049: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34050: LD_ADDR_VAR 0 3
34054: PUSH
34055: LD_INT 21
34057: PUSH
34058: LD_INT 22
34060: PUSH
34061: LD_INT 23
34063: PUSH
34064: LD_INT 24
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: ST_TO_ADDR
34073: GO 34358
34075: LD_INT 43
34077: DOUBLE
34078: EQUAL
34079: IFTRUE 34083
34081: GO 34109
34083: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34084: LD_ADDR_VAR 0 3
34088: PUSH
34089: LD_INT 21
34091: PUSH
34092: LD_INT 22
34094: PUSH
34095: LD_INT 23
34097: PUSH
34098: LD_INT 24
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: LIST
34105: LIST
34106: ST_TO_ADDR
34107: GO 34358
34109: LD_INT 44
34111: DOUBLE
34112: EQUAL
34113: IFTRUE 34117
34115: GO 34143
34117: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34118: LD_ADDR_VAR 0 3
34122: PUSH
34123: LD_INT 21
34125: PUSH
34126: LD_INT 22
34128: PUSH
34129: LD_INT 23
34131: PUSH
34132: LD_INT 24
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: ST_TO_ADDR
34141: GO 34358
34143: LD_INT 45
34145: DOUBLE
34146: EQUAL
34147: IFTRUE 34151
34149: GO 34177
34151: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34152: LD_ADDR_VAR 0 3
34156: PUSH
34157: LD_INT 21
34159: PUSH
34160: LD_INT 22
34162: PUSH
34163: LD_INT 23
34165: PUSH
34166: LD_INT 24
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: ST_TO_ADDR
34175: GO 34358
34177: LD_INT 49
34179: DOUBLE
34180: EQUAL
34181: IFTRUE 34185
34183: GO 34211
34185: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34186: LD_ADDR_VAR 0 3
34190: PUSH
34191: LD_INT 21
34193: PUSH
34194: LD_INT 22
34196: PUSH
34197: LD_INT 23
34199: PUSH
34200: LD_INT 24
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: ST_TO_ADDR
34209: GO 34358
34211: LD_INT 51
34213: DOUBLE
34214: EQUAL
34215: IFTRUE 34219
34217: GO 34245
34219: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34220: LD_ADDR_VAR 0 3
34224: PUSH
34225: LD_INT 21
34227: PUSH
34228: LD_INT 22
34230: PUSH
34231: LD_INT 23
34233: PUSH
34234: LD_INT 24
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: ST_TO_ADDR
34243: GO 34358
34245: LD_INT 52
34247: DOUBLE
34248: EQUAL
34249: IFTRUE 34253
34251: GO 34279
34253: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34254: LD_ADDR_VAR 0 3
34258: PUSH
34259: LD_INT 21
34261: PUSH
34262: LD_INT 22
34264: PUSH
34265: LD_INT 23
34267: PUSH
34268: LD_INT 24
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: ST_TO_ADDR
34277: GO 34358
34279: LD_INT 53
34281: DOUBLE
34282: EQUAL
34283: IFTRUE 34287
34285: GO 34305
34287: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34288: LD_ADDR_VAR 0 3
34292: PUSH
34293: LD_INT 23
34295: PUSH
34296: LD_INT 24
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: ST_TO_ADDR
34303: GO 34358
34305: LD_INT 46
34307: DOUBLE
34308: EQUAL
34309: IFTRUE 34313
34311: GO 34331
34313: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34314: LD_ADDR_VAR 0 3
34318: PUSH
34319: LD_INT 23
34321: PUSH
34322: LD_INT 24
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: ST_TO_ADDR
34329: GO 34358
34331: LD_INT 47
34333: DOUBLE
34334: EQUAL
34335: IFTRUE 34339
34337: GO 34357
34339: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34340: LD_ADDR_VAR 0 3
34344: PUSH
34345: LD_INT 23
34347: PUSH
34348: LD_INT 24
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: ST_TO_ADDR
34355: GO 34358
34357: POP
// result := ( chassis in result ) ;
34358: LD_ADDR_VAR 0 3
34362: PUSH
34363: LD_VAR 0 1
34367: PUSH
34368: LD_VAR 0 3
34372: IN
34373: ST_TO_ADDR
// end ;
34374: LD_VAR 0 3
34378: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34379: LD_INT 0
34381: PPUSH
34382: PPUSH
34383: PPUSH
34384: PPUSH
34385: PPUSH
34386: PPUSH
34387: PPUSH
// result := array ;
34388: LD_ADDR_VAR 0 5
34392: PUSH
34393: LD_VAR 0 1
34397: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34398: LD_VAR 0 1
34402: NOT
34403: PUSH
34404: LD_VAR 0 2
34408: NOT
34409: OR
34410: PUSH
34411: LD_VAR 0 3
34415: NOT
34416: OR
34417: PUSH
34418: LD_VAR 0 2
34422: PUSH
34423: LD_VAR 0 1
34427: GREATER
34428: OR
34429: PUSH
34430: LD_VAR 0 3
34434: PUSH
34435: LD_VAR 0 1
34439: GREATER
34440: OR
34441: IFFALSE 34445
// exit ;
34443: GO 34741
// if direction then
34445: LD_VAR 0 4
34449: IFFALSE 34513
// begin d := 1 ;
34451: LD_ADDR_VAR 0 9
34455: PUSH
34456: LD_INT 1
34458: ST_TO_ADDR
// if i_from > i_to then
34459: LD_VAR 0 2
34463: PUSH
34464: LD_VAR 0 3
34468: GREATER
34469: IFFALSE 34495
// length := ( array - i_from ) + i_to else
34471: LD_ADDR_VAR 0 11
34475: PUSH
34476: LD_VAR 0 1
34480: PUSH
34481: LD_VAR 0 2
34485: MINUS
34486: PUSH
34487: LD_VAR 0 3
34491: PLUS
34492: ST_TO_ADDR
34493: GO 34511
// length := i_to - i_from ;
34495: LD_ADDR_VAR 0 11
34499: PUSH
34500: LD_VAR 0 3
34504: PUSH
34505: LD_VAR 0 2
34509: MINUS
34510: ST_TO_ADDR
// end else
34511: GO 34574
// begin d := - 1 ;
34513: LD_ADDR_VAR 0 9
34517: PUSH
34518: LD_INT 1
34520: NEG
34521: ST_TO_ADDR
// if i_from > i_to then
34522: LD_VAR 0 2
34526: PUSH
34527: LD_VAR 0 3
34531: GREATER
34532: IFFALSE 34552
// length := i_from - i_to else
34534: LD_ADDR_VAR 0 11
34538: PUSH
34539: LD_VAR 0 2
34543: PUSH
34544: LD_VAR 0 3
34548: MINUS
34549: ST_TO_ADDR
34550: GO 34574
// length := ( array - i_to ) + i_from ;
34552: LD_ADDR_VAR 0 11
34556: PUSH
34557: LD_VAR 0 1
34561: PUSH
34562: LD_VAR 0 3
34566: MINUS
34567: PUSH
34568: LD_VAR 0 2
34572: PLUS
34573: ST_TO_ADDR
// end ; if not length then
34574: LD_VAR 0 11
34578: NOT
34579: IFFALSE 34583
// exit ;
34581: GO 34741
// tmp := array ;
34583: LD_ADDR_VAR 0 10
34587: PUSH
34588: LD_VAR 0 1
34592: ST_TO_ADDR
// for i = 1 to length do
34593: LD_ADDR_VAR 0 6
34597: PUSH
34598: DOUBLE
34599: LD_INT 1
34601: DEC
34602: ST_TO_ADDR
34603: LD_VAR 0 11
34607: PUSH
34608: FOR_TO
34609: IFFALSE 34729
// begin for j = 1 to array do
34611: LD_ADDR_VAR 0 7
34615: PUSH
34616: DOUBLE
34617: LD_INT 1
34619: DEC
34620: ST_TO_ADDR
34621: LD_VAR 0 1
34625: PUSH
34626: FOR_TO
34627: IFFALSE 34715
// begin k := j + d ;
34629: LD_ADDR_VAR 0 8
34633: PUSH
34634: LD_VAR 0 7
34638: PUSH
34639: LD_VAR 0 9
34643: PLUS
34644: ST_TO_ADDR
// if k > array then
34645: LD_VAR 0 8
34649: PUSH
34650: LD_VAR 0 1
34654: GREATER
34655: IFFALSE 34665
// k := 1 ;
34657: LD_ADDR_VAR 0 8
34661: PUSH
34662: LD_INT 1
34664: ST_TO_ADDR
// if not k then
34665: LD_VAR 0 8
34669: NOT
34670: IFFALSE 34682
// k := array ;
34672: LD_ADDR_VAR 0 8
34676: PUSH
34677: LD_VAR 0 1
34681: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34682: LD_ADDR_VAR 0 10
34686: PUSH
34687: LD_VAR 0 10
34691: PPUSH
34692: LD_VAR 0 8
34696: PPUSH
34697: LD_VAR 0 1
34701: PUSH
34702: LD_VAR 0 7
34706: ARRAY
34707: PPUSH
34708: CALL_OW 1
34712: ST_TO_ADDR
// end ;
34713: GO 34626
34715: POP
34716: POP
// array := tmp ;
34717: LD_ADDR_VAR 0 1
34721: PUSH
34722: LD_VAR 0 10
34726: ST_TO_ADDR
// end ;
34727: GO 34608
34729: POP
34730: POP
// result := array ;
34731: LD_ADDR_VAR 0 5
34735: PUSH
34736: LD_VAR 0 1
34740: ST_TO_ADDR
// end ;
34741: LD_VAR 0 5
34745: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34746: LD_INT 0
34748: PPUSH
34749: PPUSH
// result := 0 ;
34750: LD_ADDR_VAR 0 3
34754: PUSH
34755: LD_INT 0
34757: ST_TO_ADDR
// if not array or not value in array then
34758: LD_VAR 0 1
34762: NOT
34763: PUSH
34764: LD_VAR 0 2
34768: PUSH
34769: LD_VAR 0 1
34773: IN
34774: NOT
34775: OR
34776: IFFALSE 34780
// exit ;
34778: GO 34834
// for i = 1 to array do
34780: LD_ADDR_VAR 0 4
34784: PUSH
34785: DOUBLE
34786: LD_INT 1
34788: DEC
34789: ST_TO_ADDR
34790: LD_VAR 0 1
34794: PUSH
34795: FOR_TO
34796: IFFALSE 34832
// if value = array [ i ] then
34798: LD_VAR 0 2
34802: PUSH
34803: LD_VAR 0 1
34807: PUSH
34808: LD_VAR 0 4
34812: ARRAY
34813: EQUAL
34814: IFFALSE 34830
// begin result := i ;
34816: LD_ADDR_VAR 0 3
34820: PUSH
34821: LD_VAR 0 4
34825: ST_TO_ADDR
// exit ;
34826: POP
34827: POP
34828: GO 34834
// end ;
34830: GO 34795
34832: POP
34833: POP
// end ;
34834: LD_VAR 0 3
34838: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34839: LD_INT 0
34841: PPUSH
// vc_chassis := chassis ;
34842: LD_ADDR_OWVAR 37
34846: PUSH
34847: LD_VAR 0 1
34851: ST_TO_ADDR
// vc_engine := engine ;
34852: LD_ADDR_OWVAR 39
34856: PUSH
34857: LD_VAR 0 2
34861: ST_TO_ADDR
// vc_control := control ;
34862: LD_ADDR_OWVAR 38
34866: PUSH
34867: LD_VAR 0 3
34871: ST_TO_ADDR
// vc_weapon := weapon ;
34872: LD_ADDR_OWVAR 40
34876: PUSH
34877: LD_VAR 0 4
34881: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34882: LD_ADDR_OWVAR 41
34886: PUSH
34887: LD_VAR 0 5
34891: ST_TO_ADDR
// end ;
34892: LD_VAR 0 6
34896: RET
// export function WantPlant ( unit ) ; var task ; begin
34897: LD_INT 0
34899: PPUSH
34900: PPUSH
// result := false ;
34901: LD_ADDR_VAR 0 2
34905: PUSH
34906: LD_INT 0
34908: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34909: LD_ADDR_VAR 0 3
34913: PUSH
34914: LD_VAR 0 1
34918: PPUSH
34919: CALL_OW 437
34923: ST_TO_ADDR
// if task then
34924: LD_VAR 0 3
34928: IFFALSE 34956
// if task [ 1 ] [ 1 ] = p then
34930: LD_VAR 0 3
34934: PUSH
34935: LD_INT 1
34937: ARRAY
34938: PUSH
34939: LD_INT 1
34941: ARRAY
34942: PUSH
34943: LD_STRING p
34945: EQUAL
34946: IFFALSE 34956
// result := true ;
34948: LD_ADDR_VAR 0 2
34952: PUSH
34953: LD_INT 1
34955: ST_TO_ADDR
// end ;
34956: LD_VAR 0 2
34960: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34961: LD_INT 0
34963: PPUSH
34964: PPUSH
34965: PPUSH
34966: PPUSH
// if pos < 1 then
34967: LD_VAR 0 2
34971: PUSH
34972: LD_INT 1
34974: LESS
34975: IFFALSE 34979
// exit ;
34977: GO 35282
// if pos = 1 then
34979: LD_VAR 0 2
34983: PUSH
34984: LD_INT 1
34986: EQUAL
34987: IFFALSE 35020
// result := Replace ( arr , pos [ 1 ] , value ) else
34989: LD_ADDR_VAR 0 4
34993: PUSH
34994: LD_VAR 0 1
34998: PPUSH
34999: LD_VAR 0 2
35003: PUSH
35004: LD_INT 1
35006: ARRAY
35007: PPUSH
35008: LD_VAR 0 3
35012: PPUSH
35013: CALL_OW 1
35017: ST_TO_ADDR
35018: GO 35282
// begin tmp := arr ;
35020: LD_ADDR_VAR 0 6
35024: PUSH
35025: LD_VAR 0 1
35029: ST_TO_ADDR
// s_arr := [ tmp ] ;
35030: LD_ADDR_VAR 0 7
35034: PUSH
35035: LD_VAR 0 6
35039: PUSH
35040: EMPTY
35041: LIST
35042: ST_TO_ADDR
// for i = 1 to pos - 1 do
35043: LD_ADDR_VAR 0 5
35047: PUSH
35048: DOUBLE
35049: LD_INT 1
35051: DEC
35052: ST_TO_ADDR
35053: LD_VAR 0 2
35057: PUSH
35058: LD_INT 1
35060: MINUS
35061: PUSH
35062: FOR_TO
35063: IFFALSE 35108
// begin tmp := tmp [ pos [ i ] ] ;
35065: LD_ADDR_VAR 0 6
35069: PUSH
35070: LD_VAR 0 6
35074: PUSH
35075: LD_VAR 0 2
35079: PUSH
35080: LD_VAR 0 5
35084: ARRAY
35085: ARRAY
35086: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35087: LD_ADDR_VAR 0 7
35091: PUSH
35092: LD_VAR 0 7
35096: PUSH
35097: LD_VAR 0 6
35101: PUSH
35102: EMPTY
35103: LIST
35104: ADD
35105: ST_TO_ADDR
// end ;
35106: GO 35062
35108: POP
35109: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35110: LD_ADDR_VAR 0 6
35114: PUSH
35115: LD_VAR 0 6
35119: PPUSH
35120: LD_VAR 0 2
35124: PUSH
35125: LD_VAR 0 2
35129: ARRAY
35130: PPUSH
35131: LD_VAR 0 3
35135: PPUSH
35136: CALL_OW 1
35140: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35141: LD_ADDR_VAR 0 7
35145: PUSH
35146: LD_VAR 0 7
35150: PPUSH
35151: LD_VAR 0 7
35155: PPUSH
35156: LD_VAR 0 6
35160: PPUSH
35161: CALL_OW 1
35165: ST_TO_ADDR
// for i = s_arr downto 2 do
35166: LD_ADDR_VAR 0 5
35170: PUSH
35171: DOUBLE
35172: LD_VAR 0 7
35176: INC
35177: ST_TO_ADDR
35178: LD_INT 2
35180: PUSH
35181: FOR_DOWNTO
35182: IFFALSE 35266
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35184: LD_ADDR_VAR 0 6
35188: PUSH
35189: LD_VAR 0 7
35193: PUSH
35194: LD_VAR 0 5
35198: PUSH
35199: LD_INT 1
35201: MINUS
35202: ARRAY
35203: PPUSH
35204: LD_VAR 0 2
35208: PUSH
35209: LD_VAR 0 5
35213: PUSH
35214: LD_INT 1
35216: MINUS
35217: ARRAY
35218: PPUSH
35219: LD_VAR 0 7
35223: PUSH
35224: LD_VAR 0 5
35228: ARRAY
35229: PPUSH
35230: CALL_OW 1
35234: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35235: LD_ADDR_VAR 0 7
35239: PUSH
35240: LD_VAR 0 7
35244: PPUSH
35245: LD_VAR 0 5
35249: PUSH
35250: LD_INT 1
35252: MINUS
35253: PPUSH
35254: LD_VAR 0 6
35258: PPUSH
35259: CALL_OW 1
35263: ST_TO_ADDR
// end ;
35264: GO 35181
35266: POP
35267: POP
// result := s_arr [ 1 ] ;
35268: LD_ADDR_VAR 0 4
35272: PUSH
35273: LD_VAR 0 7
35277: PUSH
35278: LD_INT 1
35280: ARRAY
35281: ST_TO_ADDR
// end ; end ;
35282: LD_VAR 0 4
35286: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35287: LD_INT 0
35289: PPUSH
35290: PPUSH
// if not list then
35291: LD_VAR 0 1
35295: NOT
35296: IFFALSE 35300
// exit ;
35298: GO 35391
// i := list [ pos1 ] ;
35300: LD_ADDR_VAR 0 5
35304: PUSH
35305: LD_VAR 0 1
35309: PUSH
35310: LD_VAR 0 2
35314: ARRAY
35315: ST_TO_ADDR
// if not i then
35316: LD_VAR 0 5
35320: NOT
35321: IFFALSE 35325
// exit ;
35323: GO 35391
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35325: LD_ADDR_VAR 0 1
35329: PUSH
35330: LD_VAR 0 1
35334: PPUSH
35335: LD_VAR 0 2
35339: PPUSH
35340: LD_VAR 0 1
35344: PUSH
35345: LD_VAR 0 3
35349: ARRAY
35350: PPUSH
35351: CALL_OW 1
35355: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35356: LD_ADDR_VAR 0 1
35360: PUSH
35361: LD_VAR 0 1
35365: PPUSH
35366: LD_VAR 0 3
35370: PPUSH
35371: LD_VAR 0 5
35375: PPUSH
35376: CALL_OW 1
35380: ST_TO_ADDR
// result := list ;
35381: LD_ADDR_VAR 0 4
35385: PUSH
35386: LD_VAR 0 1
35390: ST_TO_ADDR
// end ;
35391: LD_VAR 0 4
35395: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35396: LD_INT 0
35398: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35399: LD_ADDR_VAR 0 5
35403: PUSH
35404: LD_VAR 0 1
35408: PPUSH
35409: CALL_OW 250
35413: PPUSH
35414: LD_VAR 0 1
35418: PPUSH
35419: CALL_OW 251
35423: PPUSH
35424: LD_VAR 0 2
35428: PPUSH
35429: LD_VAR 0 3
35433: PPUSH
35434: LD_VAR 0 4
35438: PPUSH
35439: CALL 35817 0 5
35443: ST_TO_ADDR
// end ;
35444: LD_VAR 0 5
35448: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
35449: LD_INT 0
35451: PPUSH
35452: PPUSH
35453: PPUSH
35454: PPUSH
// if not list or not unit then
35455: LD_VAR 0 2
35459: NOT
35460: PUSH
35461: LD_VAR 0 1
35465: NOT
35466: OR
35467: IFFALSE 35471
// exit ;
35469: GO 35812
// result := [ ] ;
35471: LD_ADDR_VAR 0 5
35475: PUSH
35476: EMPTY
35477: ST_TO_ADDR
// for i in list do
35478: LD_ADDR_VAR 0 6
35482: PUSH
35483: LD_VAR 0 2
35487: PUSH
35488: FOR_IN
35489: IFFALSE 35707
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
35491: LD_ADDR_VAR 0 8
35495: PUSH
35496: LD_VAR 0 1
35500: PPUSH
35501: LD_VAR 0 6
35505: PUSH
35506: LD_INT 1
35508: ARRAY
35509: PPUSH
35510: LD_VAR 0 6
35514: PUSH
35515: LD_INT 2
35517: ARRAY
35518: PPUSH
35519: CALL_OW 297
35523: ST_TO_ADDR
// if not Count ( result ) then
35524: LD_VAR 0 5
35528: PPUSH
35529: CALL 32101 0 1
35533: NOT
35534: IFFALSE 35567
// begin result := Join ( result , [ i , tmp ] ) ;
35536: LD_ADDR_VAR 0 5
35540: PUSH
35541: LD_VAR 0 5
35545: PPUSH
35546: LD_VAR 0 6
35550: PUSH
35551: LD_VAR 0 8
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PPUSH
35560: CALL 67701 0 2
35564: ST_TO_ADDR
// continue ;
35565: GO 35488
// end ; if result [ result ] [ 2 ] <= tmp then
35567: LD_VAR 0 5
35571: PUSH
35572: LD_VAR 0 5
35576: ARRAY
35577: PUSH
35578: LD_INT 2
35580: ARRAY
35581: PUSH
35582: LD_VAR 0 8
35586: LESSEQUAL
35587: IFFALSE 35620
// result := Join ( result , [ i , tmp ] ) else
35589: LD_ADDR_VAR 0 5
35593: PUSH
35594: LD_VAR 0 5
35598: PPUSH
35599: LD_VAR 0 6
35603: PUSH
35604: LD_VAR 0 8
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PPUSH
35613: CALL 67701 0 2
35617: ST_TO_ADDR
35618: GO 35705
// begin for j := 1 to Count ( result ) do
35620: LD_ADDR_VAR 0 7
35624: PUSH
35625: DOUBLE
35626: LD_INT 1
35628: DEC
35629: ST_TO_ADDR
35630: LD_VAR 0 5
35634: PPUSH
35635: CALL 32101 0 1
35639: PUSH
35640: FOR_TO
35641: IFFALSE 35703
// begin if tmp < result [ j ] [ 2 ] then
35643: LD_VAR 0 8
35647: PUSH
35648: LD_VAR 0 5
35652: PUSH
35653: LD_VAR 0 7
35657: ARRAY
35658: PUSH
35659: LD_INT 2
35661: ARRAY
35662: LESS
35663: IFFALSE 35701
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35665: LD_ADDR_VAR 0 5
35669: PUSH
35670: LD_VAR 0 5
35674: PPUSH
35675: LD_VAR 0 7
35679: PPUSH
35680: LD_VAR 0 6
35684: PUSH
35685: LD_VAR 0 8
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PPUSH
35694: CALL_OW 2
35698: ST_TO_ADDR
// break ;
35699: GO 35703
// end ; end ;
35701: GO 35640
35703: POP
35704: POP
// end ; end ;
35705: GO 35488
35707: POP
35708: POP
// if result and not asc then
35709: LD_VAR 0 5
35713: PUSH
35714: LD_VAR 0 3
35718: NOT
35719: AND
35720: IFFALSE 35737
// result := ReverseArray ( result ) ;
35722: LD_ADDR_VAR 0 5
35726: PUSH
35727: LD_VAR 0 5
35731: PPUSH
35732: CALL 62977 0 1
35736: ST_TO_ADDR
// tmp := [ ] ;
35737: LD_ADDR_VAR 0 8
35741: PUSH
35742: EMPTY
35743: ST_TO_ADDR
// if mode then
35744: LD_VAR 0 4
35748: IFFALSE 35812
// begin for i := 1 to result do
35750: LD_ADDR_VAR 0 6
35754: PUSH
35755: DOUBLE
35756: LD_INT 1
35758: DEC
35759: ST_TO_ADDR
35760: LD_VAR 0 5
35764: PUSH
35765: FOR_TO
35766: IFFALSE 35800
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
35768: LD_ADDR_VAR 0 8
35772: PUSH
35773: LD_VAR 0 8
35777: PPUSH
35778: LD_VAR 0 5
35782: PUSH
35783: LD_VAR 0 6
35787: ARRAY
35788: PUSH
35789: LD_INT 1
35791: ARRAY
35792: PPUSH
35793: CALL 67701 0 2
35797: ST_TO_ADDR
35798: GO 35765
35800: POP
35801: POP
// result := tmp ;
35802: LD_ADDR_VAR 0 5
35806: PUSH
35807: LD_VAR 0 8
35811: ST_TO_ADDR
// end ; end ;
35812: LD_VAR 0 5
35816: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35817: LD_INT 0
35819: PPUSH
35820: PPUSH
35821: PPUSH
35822: PPUSH
// if not list then
35823: LD_VAR 0 3
35827: NOT
35828: IFFALSE 35832
// exit ;
35830: GO 36220
// result := [ ] ;
35832: LD_ADDR_VAR 0 6
35836: PUSH
35837: EMPTY
35838: ST_TO_ADDR
// for i in list do
35839: LD_ADDR_VAR 0 7
35843: PUSH
35844: LD_VAR 0 3
35848: PUSH
35849: FOR_IN
35850: IFFALSE 36052
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35852: LD_ADDR_VAR 0 9
35856: PUSH
35857: LD_VAR 0 7
35861: PPUSH
35862: LD_VAR 0 1
35866: PPUSH
35867: LD_VAR 0 2
35871: PPUSH
35872: CALL_OW 297
35876: ST_TO_ADDR
// if not result then
35877: LD_VAR 0 6
35881: NOT
35882: IFFALSE 35908
// result := [ [ i , tmp ] ] else
35884: LD_ADDR_VAR 0 6
35888: PUSH
35889: LD_VAR 0 7
35893: PUSH
35894: LD_VAR 0 9
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: EMPTY
35904: LIST
35905: ST_TO_ADDR
35906: GO 36050
// begin if result [ result ] [ 2 ] < tmp then
35908: LD_VAR 0 6
35912: PUSH
35913: LD_VAR 0 6
35917: ARRAY
35918: PUSH
35919: LD_INT 2
35921: ARRAY
35922: PUSH
35923: LD_VAR 0 9
35927: LESS
35928: IFFALSE 35970
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35930: LD_ADDR_VAR 0 6
35934: PUSH
35935: LD_VAR 0 6
35939: PPUSH
35940: LD_VAR 0 6
35944: PUSH
35945: LD_INT 1
35947: PLUS
35948: PPUSH
35949: LD_VAR 0 7
35953: PUSH
35954: LD_VAR 0 9
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PPUSH
35963: CALL_OW 2
35967: ST_TO_ADDR
35968: GO 36050
// for j = 1 to result do
35970: LD_ADDR_VAR 0 8
35974: PUSH
35975: DOUBLE
35976: LD_INT 1
35978: DEC
35979: ST_TO_ADDR
35980: LD_VAR 0 6
35984: PUSH
35985: FOR_TO
35986: IFFALSE 36048
// begin if tmp < result [ j ] [ 2 ] then
35988: LD_VAR 0 9
35992: PUSH
35993: LD_VAR 0 6
35997: PUSH
35998: LD_VAR 0 8
36002: ARRAY
36003: PUSH
36004: LD_INT 2
36006: ARRAY
36007: LESS
36008: IFFALSE 36046
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36010: LD_ADDR_VAR 0 6
36014: PUSH
36015: LD_VAR 0 6
36019: PPUSH
36020: LD_VAR 0 8
36024: PPUSH
36025: LD_VAR 0 7
36029: PUSH
36030: LD_VAR 0 9
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PPUSH
36039: CALL_OW 2
36043: ST_TO_ADDR
// break ;
36044: GO 36048
// end ; end ;
36046: GO 35985
36048: POP
36049: POP
// end ; end ;
36050: GO 35849
36052: POP
36053: POP
// if result and not asc then
36054: LD_VAR 0 6
36058: PUSH
36059: LD_VAR 0 4
36063: NOT
36064: AND
36065: IFFALSE 36140
// begin tmp := result ;
36067: LD_ADDR_VAR 0 9
36071: PUSH
36072: LD_VAR 0 6
36076: ST_TO_ADDR
// for i = tmp downto 1 do
36077: LD_ADDR_VAR 0 7
36081: PUSH
36082: DOUBLE
36083: LD_VAR 0 9
36087: INC
36088: ST_TO_ADDR
36089: LD_INT 1
36091: PUSH
36092: FOR_DOWNTO
36093: IFFALSE 36138
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36095: LD_ADDR_VAR 0 6
36099: PUSH
36100: LD_VAR 0 6
36104: PPUSH
36105: LD_VAR 0 9
36109: PUSH
36110: LD_VAR 0 7
36114: MINUS
36115: PUSH
36116: LD_INT 1
36118: PLUS
36119: PPUSH
36120: LD_VAR 0 9
36124: PUSH
36125: LD_VAR 0 7
36129: ARRAY
36130: PPUSH
36131: CALL_OW 1
36135: ST_TO_ADDR
36136: GO 36092
36138: POP
36139: POP
// end ; tmp := [ ] ;
36140: LD_ADDR_VAR 0 9
36144: PUSH
36145: EMPTY
36146: ST_TO_ADDR
// if mode then
36147: LD_VAR 0 5
36151: IFFALSE 36220
// begin for i = 1 to result do
36153: LD_ADDR_VAR 0 7
36157: PUSH
36158: DOUBLE
36159: LD_INT 1
36161: DEC
36162: ST_TO_ADDR
36163: LD_VAR 0 6
36167: PUSH
36168: FOR_TO
36169: IFFALSE 36208
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36171: LD_ADDR_VAR 0 9
36175: PUSH
36176: LD_VAR 0 9
36180: PPUSH
36181: LD_VAR 0 7
36185: PPUSH
36186: LD_VAR 0 6
36190: PUSH
36191: LD_VAR 0 7
36195: ARRAY
36196: PUSH
36197: LD_INT 1
36199: ARRAY
36200: PPUSH
36201: CALL_OW 1
36205: ST_TO_ADDR
36206: GO 36168
36208: POP
36209: POP
// result := tmp ;
36210: LD_ADDR_VAR 0 6
36214: PUSH
36215: LD_VAR 0 9
36219: ST_TO_ADDR
// end ; end ;
36220: LD_VAR 0 6
36224: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36225: LD_INT 0
36227: PPUSH
36228: PPUSH
36229: PPUSH
36230: PPUSH
36231: PPUSH
36232: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36233: LD_ADDR_VAR 0 5
36237: PUSH
36238: LD_INT 0
36240: PUSH
36241: LD_INT 0
36243: PUSH
36244: LD_INT 0
36246: PUSH
36247: EMPTY
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: ST_TO_ADDR
// if not x or not y then
36255: LD_VAR 0 2
36259: NOT
36260: PUSH
36261: LD_VAR 0 3
36265: NOT
36266: OR
36267: IFFALSE 36271
// exit ;
36269: GO 37921
// if not range then
36271: LD_VAR 0 4
36275: NOT
36276: IFFALSE 36286
// range := 10 ;
36278: LD_ADDR_VAR 0 4
36282: PUSH
36283: LD_INT 10
36285: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36286: LD_ADDR_VAR 0 8
36290: PUSH
36291: LD_INT 81
36293: PUSH
36294: LD_VAR 0 1
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: LD_INT 92
36305: PUSH
36306: LD_VAR 0 2
36310: PUSH
36311: LD_VAR 0 3
36315: PUSH
36316: LD_VAR 0 4
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: PUSH
36327: LD_INT 3
36329: PUSH
36330: LD_INT 21
36332: PUSH
36333: LD_INT 3
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: LIST
36348: PPUSH
36349: CALL_OW 69
36353: ST_TO_ADDR
// if not tmp then
36354: LD_VAR 0 8
36358: NOT
36359: IFFALSE 36363
// exit ;
36361: GO 37921
// for i in tmp do
36363: LD_ADDR_VAR 0 6
36367: PUSH
36368: LD_VAR 0 8
36372: PUSH
36373: FOR_IN
36374: IFFALSE 37896
// begin points := [ 0 , 0 , 0 ] ;
36376: LD_ADDR_VAR 0 9
36380: PUSH
36381: LD_INT 0
36383: PUSH
36384: LD_INT 0
36386: PUSH
36387: LD_INT 0
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: LIST
36394: ST_TO_ADDR
// bpoints := 1 ;
36395: LD_ADDR_VAR 0 10
36399: PUSH
36400: LD_INT 1
36402: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36403: LD_VAR 0 6
36407: PPUSH
36408: CALL_OW 247
36412: PUSH
36413: LD_INT 1
36415: DOUBLE
36416: EQUAL
36417: IFTRUE 36421
36419: GO 36999
36421: POP
// begin if GetClass ( i ) = 1 then
36422: LD_VAR 0 6
36426: PPUSH
36427: CALL_OW 257
36431: PUSH
36432: LD_INT 1
36434: EQUAL
36435: IFFALSE 36456
// points := [ 10 , 5 , 3 ] ;
36437: LD_ADDR_VAR 0 9
36441: PUSH
36442: LD_INT 10
36444: PUSH
36445: LD_INT 5
36447: PUSH
36448: LD_INT 3
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: LIST
36455: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36456: LD_VAR 0 6
36460: PPUSH
36461: CALL_OW 257
36465: PUSH
36466: LD_INT 2
36468: PUSH
36469: LD_INT 3
36471: PUSH
36472: LD_INT 4
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: LIST
36479: IN
36480: IFFALSE 36501
// points := [ 3 , 2 , 1 ] ;
36482: LD_ADDR_VAR 0 9
36486: PUSH
36487: LD_INT 3
36489: PUSH
36490: LD_INT 2
36492: PUSH
36493: LD_INT 1
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: LIST
36500: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36501: LD_VAR 0 6
36505: PPUSH
36506: CALL_OW 257
36510: PUSH
36511: LD_INT 5
36513: EQUAL
36514: IFFALSE 36535
// points := [ 130 , 5 , 2 ] ;
36516: LD_ADDR_VAR 0 9
36520: PUSH
36521: LD_INT 130
36523: PUSH
36524: LD_INT 5
36526: PUSH
36527: LD_INT 2
36529: PUSH
36530: EMPTY
36531: LIST
36532: LIST
36533: LIST
36534: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36535: LD_VAR 0 6
36539: PPUSH
36540: CALL_OW 257
36544: PUSH
36545: LD_INT 8
36547: EQUAL
36548: IFFALSE 36569
// points := [ 35 , 35 , 30 ] ;
36550: LD_ADDR_VAR 0 9
36554: PUSH
36555: LD_INT 35
36557: PUSH
36558: LD_INT 35
36560: PUSH
36561: LD_INT 30
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: LIST
36568: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36569: LD_VAR 0 6
36573: PPUSH
36574: CALL_OW 257
36578: PUSH
36579: LD_INT 9
36581: EQUAL
36582: IFFALSE 36603
// points := [ 20 , 55 , 40 ] ;
36584: LD_ADDR_VAR 0 9
36588: PUSH
36589: LD_INT 20
36591: PUSH
36592: LD_INT 55
36594: PUSH
36595: LD_INT 40
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: LIST
36602: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36603: LD_VAR 0 6
36607: PPUSH
36608: CALL_OW 257
36612: PUSH
36613: LD_INT 12
36615: PUSH
36616: LD_INT 16
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: IN
36623: IFFALSE 36644
// points := [ 5 , 3 , 2 ] ;
36625: LD_ADDR_VAR 0 9
36629: PUSH
36630: LD_INT 5
36632: PUSH
36633: LD_INT 3
36635: PUSH
36636: LD_INT 2
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: LIST
36643: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36644: LD_VAR 0 6
36648: PPUSH
36649: CALL_OW 257
36653: PUSH
36654: LD_INT 17
36656: EQUAL
36657: IFFALSE 36678
// points := [ 100 , 50 , 75 ] ;
36659: LD_ADDR_VAR 0 9
36663: PUSH
36664: LD_INT 100
36666: PUSH
36667: LD_INT 50
36669: PUSH
36670: LD_INT 75
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: LIST
36677: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36678: LD_VAR 0 6
36682: PPUSH
36683: CALL_OW 257
36687: PUSH
36688: LD_INT 15
36690: EQUAL
36691: IFFALSE 36712
// points := [ 10 , 5 , 3 ] ;
36693: LD_ADDR_VAR 0 9
36697: PUSH
36698: LD_INT 10
36700: PUSH
36701: LD_INT 5
36703: PUSH
36704: LD_INT 3
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: LIST
36711: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36712: LD_VAR 0 6
36716: PPUSH
36717: CALL_OW 257
36721: PUSH
36722: LD_INT 14
36724: EQUAL
36725: IFFALSE 36746
// points := [ 10 , 0 , 0 ] ;
36727: LD_ADDR_VAR 0 9
36731: PUSH
36732: LD_INT 10
36734: PUSH
36735: LD_INT 0
36737: PUSH
36738: LD_INT 0
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: LIST
36745: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36746: LD_VAR 0 6
36750: PPUSH
36751: CALL_OW 257
36755: PUSH
36756: LD_INT 11
36758: EQUAL
36759: IFFALSE 36780
// points := [ 30 , 10 , 5 ] ;
36761: LD_ADDR_VAR 0 9
36765: PUSH
36766: LD_INT 30
36768: PUSH
36769: LD_INT 10
36771: PUSH
36772: LD_INT 5
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: LIST
36779: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36780: LD_VAR 0 1
36784: PPUSH
36785: LD_INT 5
36787: PPUSH
36788: CALL_OW 321
36792: PUSH
36793: LD_INT 2
36795: EQUAL
36796: IFFALSE 36813
// bpoints := bpoints * 1.8 ;
36798: LD_ADDR_VAR 0 10
36802: PUSH
36803: LD_VAR 0 10
36807: PUSH
36808: LD_REAL  1.80000000000000E+0000
36811: MUL
36812: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36813: LD_VAR 0 6
36817: PPUSH
36818: CALL_OW 257
36822: PUSH
36823: LD_INT 1
36825: PUSH
36826: LD_INT 2
36828: PUSH
36829: LD_INT 3
36831: PUSH
36832: LD_INT 4
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: IN
36841: PUSH
36842: LD_VAR 0 1
36846: PPUSH
36847: LD_INT 51
36849: PPUSH
36850: CALL_OW 321
36854: PUSH
36855: LD_INT 2
36857: EQUAL
36858: AND
36859: IFFALSE 36876
// bpoints := bpoints * 1.2 ;
36861: LD_ADDR_VAR 0 10
36865: PUSH
36866: LD_VAR 0 10
36870: PUSH
36871: LD_REAL  1.20000000000000E+0000
36874: MUL
36875: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36876: LD_VAR 0 6
36880: PPUSH
36881: CALL_OW 257
36885: PUSH
36886: LD_INT 5
36888: PUSH
36889: LD_INT 7
36891: PUSH
36892: LD_INT 9
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: LIST
36899: IN
36900: PUSH
36901: LD_VAR 0 1
36905: PPUSH
36906: LD_INT 52
36908: PPUSH
36909: CALL_OW 321
36913: PUSH
36914: LD_INT 2
36916: EQUAL
36917: AND
36918: IFFALSE 36935
// bpoints := bpoints * 1.5 ;
36920: LD_ADDR_VAR 0 10
36924: PUSH
36925: LD_VAR 0 10
36929: PUSH
36930: LD_REAL  1.50000000000000E+0000
36933: MUL
36934: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36935: LD_VAR 0 1
36939: PPUSH
36940: LD_INT 66
36942: PPUSH
36943: CALL_OW 321
36947: PUSH
36948: LD_INT 2
36950: EQUAL
36951: IFFALSE 36968
// bpoints := bpoints * 1.1 ;
36953: LD_ADDR_VAR 0 10
36957: PUSH
36958: LD_VAR 0 10
36962: PUSH
36963: LD_REAL  1.10000000000000E+0000
36966: MUL
36967: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36968: LD_ADDR_VAR 0 10
36972: PUSH
36973: LD_VAR 0 10
36977: PUSH
36978: LD_VAR 0 6
36982: PPUSH
36983: LD_INT 1
36985: PPUSH
36986: CALL_OW 259
36990: PUSH
36991: LD_REAL  1.15000000000000E+0000
36994: MUL
36995: MUL
36996: ST_TO_ADDR
// end ; unit_vehicle :
36997: GO 37825
36999: LD_INT 2
37001: DOUBLE
37002: EQUAL
37003: IFTRUE 37007
37005: GO 37813
37007: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37008: LD_VAR 0 6
37012: PPUSH
37013: CALL_OW 264
37017: PUSH
37018: LD_INT 2
37020: PUSH
37021: LD_INT 42
37023: PUSH
37024: LD_INT 24
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: LIST
37031: IN
37032: IFFALSE 37053
// points := [ 25 , 5 , 3 ] ;
37034: LD_ADDR_VAR 0 9
37038: PUSH
37039: LD_INT 25
37041: PUSH
37042: LD_INT 5
37044: PUSH
37045: LD_INT 3
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: LIST
37052: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37053: LD_VAR 0 6
37057: PPUSH
37058: CALL_OW 264
37062: PUSH
37063: LD_INT 4
37065: PUSH
37066: LD_INT 43
37068: PUSH
37069: LD_INT 25
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: LIST
37076: IN
37077: IFFALSE 37098
// points := [ 40 , 15 , 5 ] ;
37079: LD_ADDR_VAR 0 9
37083: PUSH
37084: LD_INT 40
37086: PUSH
37087: LD_INT 15
37089: PUSH
37090: LD_INT 5
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: LIST
37097: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37098: LD_VAR 0 6
37102: PPUSH
37103: CALL_OW 264
37107: PUSH
37108: LD_INT 3
37110: PUSH
37111: LD_INT 23
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: IN
37118: IFFALSE 37139
// points := [ 7 , 25 , 8 ] ;
37120: LD_ADDR_VAR 0 9
37124: PUSH
37125: LD_INT 7
37127: PUSH
37128: LD_INT 25
37130: PUSH
37131: LD_INT 8
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: LIST
37138: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37139: LD_VAR 0 6
37143: PPUSH
37144: CALL_OW 264
37148: PUSH
37149: LD_INT 5
37151: PUSH
37152: LD_INT 27
37154: PUSH
37155: LD_INT 44
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: LIST
37162: IN
37163: IFFALSE 37184
// points := [ 14 , 50 , 16 ] ;
37165: LD_ADDR_VAR 0 9
37169: PUSH
37170: LD_INT 14
37172: PUSH
37173: LD_INT 50
37175: PUSH
37176: LD_INT 16
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: LIST
37183: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37184: LD_VAR 0 6
37188: PPUSH
37189: CALL_OW 264
37193: PUSH
37194: LD_INT 6
37196: PUSH
37197: LD_INT 46
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: IN
37204: IFFALSE 37225
// points := [ 32 , 120 , 70 ] ;
37206: LD_ADDR_VAR 0 9
37210: PUSH
37211: LD_INT 32
37213: PUSH
37214: LD_INT 120
37216: PUSH
37217: LD_INT 70
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: LIST
37224: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37225: LD_VAR 0 6
37229: PPUSH
37230: CALL_OW 264
37234: PUSH
37235: LD_INT 7
37237: PUSH
37238: LD_INT 28
37240: PUSH
37241: LD_INT 45
37243: PUSH
37244: LD_INT 92
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: IN
37253: IFFALSE 37274
// points := [ 35 , 20 , 45 ] ;
37255: LD_ADDR_VAR 0 9
37259: PUSH
37260: LD_INT 35
37262: PUSH
37263: LD_INT 20
37265: PUSH
37266: LD_INT 45
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: LIST
37273: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37274: LD_VAR 0 6
37278: PPUSH
37279: CALL_OW 264
37283: PUSH
37284: LD_INT 47
37286: PUSH
37287: EMPTY
37288: LIST
37289: IN
37290: IFFALSE 37311
// points := [ 67 , 45 , 75 ] ;
37292: LD_ADDR_VAR 0 9
37296: PUSH
37297: LD_INT 67
37299: PUSH
37300: LD_INT 45
37302: PUSH
37303: LD_INT 75
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: LIST
37310: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37311: LD_VAR 0 6
37315: PPUSH
37316: CALL_OW 264
37320: PUSH
37321: LD_INT 26
37323: PUSH
37324: EMPTY
37325: LIST
37326: IN
37327: IFFALSE 37348
// points := [ 120 , 30 , 80 ] ;
37329: LD_ADDR_VAR 0 9
37333: PUSH
37334: LD_INT 120
37336: PUSH
37337: LD_INT 30
37339: PUSH
37340: LD_INT 80
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: LIST
37347: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37348: LD_VAR 0 6
37352: PPUSH
37353: CALL_OW 264
37357: PUSH
37358: LD_INT 22
37360: PUSH
37361: EMPTY
37362: LIST
37363: IN
37364: IFFALSE 37385
// points := [ 40 , 1 , 1 ] ;
37366: LD_ADDR_VAR 0 9
37370: PUSH
37371: LD_INT 40
37373: PUSH
37374: LD_INT 1
37376: PUSH
37377: LD_INT 1
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: LIST
37384: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37385: LD_VAR 0 6
37389: PPUSH
37390: CALL_OW 264
37394: PUSH
37395: LD_INT 29
37397: PUSH
37398: EMPTY
37399: LIST
37400: IN
37401: IFFALSE 37422
// points := [ 70 , 200 , 400 ] ;
37403: LD_ADDR_VAR 0 9
37407: PUSH
37408: LD_INT 70
37410: PUSH
37411: LD_INT 200
37413: PUSH
37414: LD_INT 400
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: LIST
37421: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37422: LD_VAR 0 6
37426: PPUSH
37427: CALL_OW 264
37431: PUSH
37432: LD_INT 14
37434: PUSH
37435: LD_INT 53
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: IN
37442: IFFALSE 37463
// points := [ 40 , 10 , 20 ] ;
37444: LD_ADDR_VAR 0 9
37448: PUSH
37449: LD_INT 40
37451: PUSH
37452: LD_INT 10
37454: PUSH
37455: LD_INT 20
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: LIST
37462: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37463: LD_VAR 0 6
37467: PPUSH
37468: CALL_OW 264
37472: PUSH
37473: LD_INT 9
37475: PUSH
37476: EMPTY
37477: LIST
37478: IN
37479: IFFALSE 37500
// points := [ 5 , 70 , 20 ] ;
37481: LD_ADDR_VAR 0 9
37485: PUSH
37486: LD_INT 5
37488: PUSH
37489: LD_INT 70
37491: PUSH
37492: LD_INT 20
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: LIST
37499: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37500: LD_VAR 0 6
37504: PPUSH
37505: CALL_OW 264
37509: PUSH
37510: LD_INT 10
37512: PUSH
37513: EMPTY
37514: LIST
37515: IN
37516: IFFALSE 37537
// points := [ 35 , 110 , 70 ] ;
37518: LD_ADDR_VAR 0 9
37522: PUSH
37523: LD_INT 35
37525: PUSH
37526: LD_INT 110
37528: PUSH
37529: LD_INT 70
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: LIST
37536: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37537: LD_VAR 0 6
37541: PPUSH
37542: CALL_OW 265
37546: PUSH
37547: LD_INT 25
37549: EQUAL
37550: IFFALSE 37571
// points := [ 80 , 65 , 100 ] ;
37552: LD_ADDR_VAR 0 9
37556: PUSH
37557: LD_INT 80
37559: PUSH
37560: LD_INT 65
37562: PUSH
37563: LD_INT 100
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: LIST
37570: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37571: LD_VAR 0 6
37575: PPUSH
37576: CALL_OW 263
37580: PUSH
37581: LD_INT 1
37583: EQUAL
37584: IFFALSE 37619
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37586: LD_ADDR_VAR 0 10
37590: PUSH
37591: LD_VAR 0 10
37595: PUSH
37596: LD_VAR 0 6
37600: PPUSH
37601: CALL_OW 311
37605: PPUSH
37606: LD_INT 3
37608: PPUSH
37609: CALL_OW 259
37613: PUSH
37614: LD_INT 4
37616: MUL
37617: MUL
37618: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37619: LD_VAR 0 6
37623: PPUSH
37624: CALL_OW 263
37628: PUSH
37629: LD_INT 2
37631: EQUAL
37632: IFFALSE 37683
// begin j := IsControledBy ( i ) ;
37634: LD_ADDR_VAR 0 7
37638: PUSH
37639: LD_VAR 0 6
37643: PPUSH
37644: CALL_OW 312
37648: ST_TO_ADDR
// if j then
37649: LD_VAR 0 7
37653: IFFALSE 37683
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37655: LD_ADDR_VAR 0 10
37659: PUSH
37660: LD_VAR 0 10
37664: PUSH
37665: LD_VAR 0 7
37669: PPUSH
37670: LD_INT 3
37672: PPUSH
37673: CALL_OW 259
37677: PUSH
37678: LD_INT 3
37680: MUL
37681: MUL
37682: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37683: LD_VAR 0 6
37687: PPUSH
37688: CALL_OW 264
37692: PUSH
37693: LD_INT 5
37695: PUSH
37696: LD_INT 6
37698: PUSH
37699: LD_INT 46
37701: PUSH
37702: LD_INT 44
37704: PUSH
37705: LD_INT 47
37707: PUSH
37708: LD_INT 45
37710: PUSH
37711: LD_INT 28
37713: PUSH
37714: LD_INT 7
37716: PUSH
37717: LD_INT 27
37719: PUSH
37720: LD_INT 29
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: IN
37735: PUSH
37736: LD_VAR 0 1
37740: PPUSH
37741: LD_INT 52
37743: PPUSH
37744: CALL_OW 321
37748: PUSH
37749: LD_INT 2
37751: EQUAL
37752: AND
37753: IFFALSE 37770
// bpoints := bpoints * 1.2 ;
37755: LD_ADDR_VAR 0 10
37759: PUSH
37760: LD_VAR 0 10
37764: PUSH
37765: LD_REAL  1.20000000000000E+0000
37768: MUL
37769: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37770: LD_VAR 0 6
37774: PPUSH
37775: CALL_OW 264
37779: PUSH
37780: LD_INT 6
37782: PUSH
37783: LD_INT 46
37785: PUSH
37786: LD_INT 47
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: LIST
37793: IN
37794: IFFALSE 37811
// bpoints := bpoints * 1.2 ;
37796: LD_ADDR_VAR 0 10
37800: PUSH
37801: LD_VAR 0 10
37805: PUSH
37806: LD_REAL  1.20000000000000E+0000
37809: MUL
37810: ST_TO_ADDR
// end ; unit_building :
37811: GO 37825
37813: LD_INT 3
37815: DOUBLE
37816: EQUAL
37817: IFTRUE 37821
37819: GO 37824
37821: POP
// ; end ;
37822: GO 37825
37824: POP
// for j = 1 to 3 do
37825: LD_ADDR_VAR 0 7
37829: PUSH
37830: DOUBLE
37831: LD_INT 1
37833: DEC
37834: ST_TO_ADDR
37835: LD_INT 3
37837: PUSH
37838: FOR_TO
37839: IFFALSE 37892
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37841: LD_ADDR_VAR 0 5
37845: PUSH
37846: LD_VAR 0 5
37850: PPUSH
37851: LD_VAR 0 7
37855: PPUSH
37856: LD_VAR 0 5
37860: PUSH
37861: LD_VAR 0 7
37865: ARRAY
37866: PUSH
37867: LD_VAR 0 9
37871: PUSH
37872: LD_VAR 0 7
37876: ARRAY
37877: PUSH
37878: LD_VAR 0 10
37882: MUL
37883: PLUS
37884: PPUSH
37885: CALL_OW 1
37889: ST_TO_ADDR
37890: GO 37838
37892: POP
37893: POP
// end ;
37894: GO 36373
37896: POP
37897: POP
// result := Replace ( result , 4 , tmp ) ;
37898: LD_ADDR_VAR 0 5
37902: PUSH
37903: LD_VAR 0 5
37907: PPUSH
37908: LD_INT 4
37910: PPUSH
37911: LD_VAR 0 8
37915: PPUSH
37916: CALL_OW 1
37920: ST_TO_ADDR
// end ;
37921: LD_VAR 0 5
37925: RET
// export function DangerAtRange ( unit , range ) ; begin
37926: LD_INT 0
37928: PPUSH
// if not unit then
37929: LD_VAR 0 1
37933: NOT
37934: IFFALSE 37938
// exit ;
37936: GO 37983
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37938: LD_ADDR_VAR 0 3
37942: PUSH
37943: LD_VAR 0 1
37947: PPUSH
37948: CALL_OW 255
37952: PPUSH
37953: LD_VAR 0 1
37957: PPUSH
37958: CALL_OW 250
37962: PPUSH
37963: LD_VAR 0 1
37967: PPUSH
37968: CALL_OW 251
37972: PPUSH
37973: LD_VAR 0 2
37977: PPUSH
37978: CALL 36225 0 4
37982: ST_TO_ADDR
// end ;
37983: LD_VAR 0 3
37987: RET
// export function DangerInArea ( side , area ) ; begin
37988: LD_INT 0
37990: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37991: LD_ADDR_VAR 0 3
37995: PUSH
37996: LD_VAR 0 2
38000: PPUSH
38001: LD_INT 81
38003: PUSH
38004: LD_VAR 0 1
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PPUSH
38013: CALL_OW 70
38017: ST_TO_ADDR
// end ;
38018: LD_VAR 0 3
38022: RET
// export function IsExtension ( b ) ; begin
38023: LD_INT 0
38025: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38026: LD_ADDR_VAR 0 2
38030: PUSH
38031: LD_VAR 0 1
38035: PUSH
38036: LD_INT 23
38038: PUSH
38039: LD_INT 20
38041: PUSH
38042: LD_INT 22
38044: PUSH
38045: LD_INT 17
38047: PUSH
38048: LD_INT 24
38050: PUSH
38051: LD_INT 21
38053: PUSH
38054: LD_INT 19
38056: PUSH
38057: LD_INT 16
38059: PUSH
38060: LD_INT 25
38062: PUSH
38063: LD_INT 18
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: IN
38078: ST_TO_ADDR
// end ;
38079: LD_VAR 0 2
38083: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38084: LD_INT 0
38086: PPUSH
38087: PPUSH
38088: PPUSH
// result := [ ] ;
38089: LD_ADDR_VAR 0 4
38093: PUSH
38094: EMPTY
38095: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38096: LD_ADDR_VAR 0 5
38100: PUSH
38101: LD_VAR 0 2
38105: PPUSH
38106: LD_INT 21
38108: PUSH
38109: LD_INT 3
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PPUSH
38116: CALL_OW 70
38120: ST_TO_ADDR
// if not tmp then
38121: LD_VAR 0 5
38125: NOT
38126: IFFALSE 38130
// exit ;
38128: GO 38194
// if checkLink then
38130: LD_VAR 0 3
38134: IFFALSE 38184
// begin for i in tmp do
38136: LD_ADDR_VAR 0 6
38140: PUSH
38141: LD_VAR 0 5
38145: PUSH
38146: FOR_IN
38147: IFFALSE 38182
// if GetBase ( i ) <> base then
38149: LD_VAR 0 6
38153: PPUSH
38154: CALL_OW 274
38158: PUSH
38159: LD_VAR 0 1
38163: NONEQUAL
38164: IFFALSE 38180
// ComLinkToBase ( base , i ) ;
38166: LD_VAR 0 1
38170: PPUSH
38171: LD_VAR 0 6
38175: PPUSH
38176: CALL_OW 169
38180: GO 38146
38182: POP
38183: POP
// end ; result := tmp ;
38184: LD_ADDR_VAR 0 4
38188: PUSH
38189: LD_VAR 0 5
38193: ST_TO_ADDR
// end ;
38194: LD_VAR 0 4
38198: RET
// export function ComComplete ( units , b ) ; var i ; begin
38199: LD_INT 0
38201: PPUSH
38202: PPUSH
// if not units then
38203: LD_VAR 0 1
38207: NOT
38208: IFFALSE 38212
// exit ;
38210: GO 38302
// for i in units do
38212: LD_ADDR_VAR 0 4
38216: PUSH
38217: LD_VAR 0 1
38221: PUSH
38222: FOR_IN
38223: IFFALSE 38300
// if BuildingStatus ( b ) = bs_build then
38225: LD_VAR 0 2
38229: PPUSH
38230: CALL_OW 461
38234: PUSH
38235: LD_INT 1
38237: EQUAL
38238: IFFALSE 38298
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38240: LD_VAR 0 4
38244: PPUSH
38245: LD_STRING h
38247: PUSH
38248: LD_VAR 0 2
38252: PPUSH
38253: CALL_OW 250
38257: PUSH
38258: LD_VAR 0 2
38262: PPUSH
38263: CALL_OW 251
38267: PUSH
38268: LD_VAR 0 2
38272: PUSH
38273: LD_INT 0
38275: PUSH
38276: LD_INT 0
38278: PUSH
38279: LD_INT 0
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: LIST
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: PUSH
38291: EMPTY
38292: LIST
38293: PPUSH
38294: CALL_OW 446
38298: GO 38222
38300: POP
38301: POP
// end ;
38302: LD_VAR 0 3
38306: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38307: LD_INT 0
38309: PPUSH
38310: PPUSH
38311: PPUSH
38312: PPUSH
38313: PPUSH
38314: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38315: LD_VAR 0 1
38319: NOT
38320: PUSH
38321: LD_VAR 0 1
38325: PPUSH
38326: CALL_OW 263
38330: PUSH
38331: LD_INT 2
38333: NONEQUAL
38334: OR
38335: IFFALSE 38339
// exit ;
38337: GO 38655
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38339: LD_ADDR_VAR 0 6
38343: PUSH
38344: LD_INT 22
38346: PUSH
38347: LD_VAR 0 1
38351: PPUSH
38352: CALL_OW 255
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 2
38363: PUSH
38364: LD_INT 30
38366: PUSH
38367: LD_INT 36
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 34
38376: PUSH
38377: LD_INT 31
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: LIST
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PPUSH
38393: CALL_OW 69
38397: ST_TO_ADDR
// if not tmp then
38398: LD_VAR 0 6
38402: NOT
38403: IFFALSE 38407
// exit ;
38405: GO 38655
// result := [ ] ;
38407: LD_ADDR_VAR 0 2
38411: PUSH
38412: EMPTY
38413: ST_TO_ADDR
// for i in tmp do
38414: LD_ADDR_VAR 0 3
38418: PUSH
38419: LD_VAR 0 6
38423: PUSH
38424: FOR_IN
38425: IFFALSE 38496
// begin t := UnitsInside ( i ) ;
38427: LD_ADDR_VAR 0 4
38431: PUSH
38432: LD_VAR 0 3
38436: PPUSH
38437: CALL_OW 313
38441: ST_TO_ADDR
// if t then
38442: LD_VAR 0 4
38446: IFFALSE 38494
// for j in t do
38448: LD_ADDR_VAR 0 7
38452: PUSH
38453: LD_VAR 0 4
38457: PUSH
38458: FOR_IN
38459: IFFALSE 38492
// result := Replace ( result , result + 1 , j ) ;
38461: LD_ADDR_VAR 0 2
38465: PUSH
38466: LD_VAR 0 2
38470: PPUSH
38471: LD_VAR 0 2
38475: PUSH
38476: LD_INT 1
38478: PLUS
38479: PPUSH
38480: LD_VAR 0 7
38484: PPUSH
38485: CALL_OW 1
38489: ST_TO_ADDR
38490: GO 38458
38492: POP
38493: POP
// end ;
38494: GO 38424
38496: POP
38497: POP
// if not result then
38498: LD_VAR 0 2
38502: NOT
38503: IFFALSE 38507
// exit ;
38505: GO 38655
// mech := result [ 1 ] ;
38507: LD_ADDR_VAR 0 5
38511: PUSH
38512: LD_VAR 0 2
38516: PUSH
38517: LD_INT 1
38519: ARRAY
38520: ST_TO_ADDR
// if result > 1 then
38521: LD_VAR 0 2
38525: PUSH
38526: LD_INT 1
38528: GREATER
38529: IFFALSE 38641
// begin for i = 2 to result do
38531: LD_ADDR_VAR 0 3
38535: PUSH
38536: DOUBLE
38537: LD_INT 2
38539: DEC
38540: ST_TO_ADDR
38541: LD_VAR 0 2
38545: PUSH
38546: FOR_TO
38547: IFFALSE 38639
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38549: LD_ADDR_VAR 0 4
38553: PUSH
38554: LD_VAR 0 2
38558: PUSH
38559: LD_VAR 0 3
38563: ARRAY
38564: PPUSH
38565: LD_INT 3
38567: PPUSH
38568: CALL_OW 259
38572: PUSH
38573: LD_VAR 0 2
38577: PUSH
38578: LD_VAR 0 3
38582: ARRAY
38583: PPUSH
38584: CALL_OW 432
38588: MINUS
38589: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38590: LD_VAR 0 4
38594: PUSH
38595: LD_VAR 0 5
38599: PPUSH
38600: LD_INT 3
38602: PPUSH
38603: CALL_OW 259
38607: PUSH
38608: LD_VAR 0 5
38612: PPUSH
38613: CALL_OW 432
38617: MINUS
38618: GREATEREQUAL
38619: IFFALSE 38637
// mech := result [ i ] ;
38621: LD_ADDR_VAR 0 5
38625: PUSH
38626: LD_VAR 0 2
38630: PUSH
38631: LD_VAR 0 3
38635: ARRAY
38636: ST_TO_ADDR
// end ;
38637: GO 38546
38639: POP
38640: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38641: LD_VAR 0 1
38645: PPUSH
38646: LD_VAR 0 5
38650: PPUSH
38651: CALL_OW 135
// end ;
38655: LD_VAR 0 2
38659: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38660: LD_INT 0
38662: PPUSH
38663: PPUSH
38664: PPUSH
38665: PPUSH
38666: PPUSH
38667: PPUSH
38668: PPUSH
38669: PPUSH
38670: PPUSH
38671: PPUSH
38672: PPUSH
38673: PPUSH
38674: PPUSH
// result := [ ] ;
38675: LD_ADDR_VAR 0 7
38679: PUSH
38680: EMPTY
38681: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38682: LD_VAR 0 1
38686: PPUSH
38687: CALL_OW 266
38691: PUSH
38692: LD_INT 0
38694: PUSH
38695: LD_INT 1
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: IN
38702: NOT
38703: IFFALSE 38707
// exit ;
38705: GO 40341
// if name then
38707: LD_VAR 0 3
38711: IFFALSE 38727
// SetBName ( base_dep , name ) ;
38713: LD_VAR 0 1
38717: PPUSH
38718: LD_VAR 0 3
38722: PPUSH
38723: CALL_OW 500
// base := GetBase ( base_dep ) ;
38727: LD_ADDR_VAR 0 15
38731: PUSH
38732: LD_VAR 0 1
38736: PPUSH
38737: CALL_OW 274
38741: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38742: LD_ADDR_VAR 0 16
38746: PUSH
38747: LD_VAR 0 1
38751: PPUSH
38752: CALL_OW 255
38756: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38757: LD_ADDR_VAR 0 17
38761: PUSH
38762: LD_VAR 0 1
38766: PPUSH
38767: CALL_OW 248
38771: ST_TO_ADDR
// if sources then
38772: LD_VAR 0 5
38776: IFFALSE 38823
// for i = 1 to 3 do
38778: LD_ADDR_VAR 0 8
38782: PUSH
38783: DOUBLE
38784: LD_INT 1
38786: DEC
38787: ST_TO_ADDR
38788: LD_INT 3
38790: PUSH
38791: FOR_TO
38792: IFFALSE 38821
// AddResourceType ( base , i , sources [ i ] ) ;
38794: LD_VAR 0 15
38798: PPUSH
38799: LD_VAR 0 8
38803: PPUSH
38804: LD_VAR 0 5
38808: PUSH
38809: LD_VAR 0 8
38813: ARRAY
38814: PPUSH
38815: CALL_OW 276
38819: GO 38791
38821: POP
38822: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38823: LD_ADDR_VAR 0 18
38827: PUSH
38828: LD_VAR 0 15
38832: PPUSH
38833: LD_VAR 0 2
38837: PPUSH
38838: LD_INT 1
38840: PPUSH
38841: CALL 38084 0 3
38845: ST_TO_ADDR
// InitHc ;
38846: CALL_OW 19
// InitUc ;
38850: CALL_OW 18
// uc_side := side ;
38854: LD_ADDR_OWVAR 20
38858: PUSH
38859: LD_VAR 0 16
38863: ST_TO_ADDR
// uc_nation := nation ;
38864: LD_ADDR_OWVAR 21
38868: PUSH
38869: LD_VAR 0 17
38873: ST_TO_ADDR
// if buildings then
38874: LD_VAR 0 18
38878: IFFALSE 40200
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38880: LD_ADDR_VAR 0 19
38884: PUSH
38885: LD_VAR 0 18
38889: PPUSH
38890: LD_INT 2
38892: PUSH
38893: LD_INT 30
38895: PUSH
38896: LD_INT 29
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 30
38905: PUSH
38906: LD_INT 30
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: LIST
38917: PPUSH
38918: CALL_OW 72
38922: ST_TO_ADDR
// if tmp then
38923: LD_VAR 0 19
38927: IFFALSE 38975
// for i in tmp do
38929: LD_ADDR_VAR 0 8
38933: PUSH
38934: LD_VAR 0 19
38938: PUSH
38939: FOR_IN
38940: IFFALSE 38973
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38942: LD_VAR 0 8
38946: PPUSH
38947: CALL_OW 250
38951: PPUSH
38952: LD_VAR 0 8
38956: PPUSH
38957: CALL_OW 251
38961: PPUSH
38962: LD_VAR 0 16
38966: PPUSH
38967: CALL_OW 441
38971: GO 38939
38973: POP
38974: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38975: LD_VAR 0 18
38979: PPUSH
38980: LD_INT 2
38982: PUSH
38983: LD_INT 30
38985: PUSH
38986: LD_INT 32
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 30
38995: PUSH
38996: LD_INT 33
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: LIST
39007: PPUSH
39008: CALL_OW 72
39012: IFFALSE 39100
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39014: LD_ADDR_VAR 0 8
39018: PUSH
39019: LD_VAR 0 18
39023: PPUSH
39024: LD_INT 2
39026: PUSH
39027: LD_INT 30
39029: PUSH
39030: LD_INT 32
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 30
39039: PUSH
39040: LD_INT 33
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: LIST
39051: PPUSH
39052: CALL_OW 72
39056: PUSH
39057: FOR_IN
39058: IFFALSE 39098
// begin if not GetBWeapon ( i ) then
39060: LD_VAR 0 8
39064: PPUSH
39065: CALL_OW 269
39069: NOT
39070: IFFALSE 39096
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39072: LD_VAR 0 8
39076: PPUSH
39077: LD_VAR 0 8
39081: PPUSH
39082: LD_VAR 0 2
39086: PPUSH
39087: CALL 40346 0 2
39091: PPUSH
39092: CALL_OW 431
// end ;
39096: GO 39057
39098: POP
39099: POP
// end ; for i = 1 to personel do
39100: LD_ADDR_VAR 0 8
39104: PUSH
39105: DOUBLE
39106: LD_INT 1
39108: DEC
39109: ST_TO_ADDR
39110: LD_VAR 0 6
39114: PUSH
39115: FOR_TO
39116: IFFALSE 40180
// begin if i > 4 then
39118: LD_VAR 0 8
39122: PUSH
39123: LD_INT 4
39125: GREATER
39126: IFFALSE 39130
// break ;
39128: GO 40180
// case i of 1 :
39130: LD_VAR 0 8
39134: PUSH
39135: LD_INT 1
39137: DOUBLE
39138: EQUAL
39139: IFTRUE 39143
39141: GO 39223
39143: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39144: LD_ADDR_VAR 0 12
39148: PUSH
39149: LD_VAR 0 18
39153: PPUSH
39154: LD_INT 22
39156: PUSH
39157: LD_VAR 0 16
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 58
39168: PUSH
39169: EMPTY
39170: LIST
39171: PUSH
39172: LD_INT 2
39174: PUSH
39175: LD_INT 30
39177: PUSH
39178: LD_INT 32
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PUSH
39185: LD_INT 30
39187: PUSH
39188: LD_INT 4
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: LD_INT 30
39197: PUSH
39198: LD_INT 5
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: LIST
39215: PPUSH
39216: CALL_OW 72
39220: ST_TO_ADDR
39221: GO 39445
39223: LD_INT 2
39225: DOUBLE
39226: EQUAL
39227: IFTRUE 39231
39229: GO 39293
39231: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39232: LD_ADDR_VAR 0 12
39236: PUSH
39237: LD_VAR 0 18
39241: PPUSH
39242: LD_INT 22
39244: PUSH
39245: LD_VAR 0 16
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 2
39256: PUSH
39257: LD_INT 30
39259: PUSH
39260: LD_INT 0
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 30
39269: PUSH
39270: LD_INT 1
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: LIST
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PPUSH
39286: CALL_OW 72
39290: ST_TO_ADDR
39291: GO 39445
39293: LD_INT 3
39295: DOUBLE
39296: EQUAL
39297: IFTRUE 39301
39299: GO 39363
39301: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39302: LD_ADDR_VAR 0 12
39306: PUSH
39307: LD_VAR 0 18
39311: PPUSH
39312: LD_INT 22
39314: PUSH
39315: LD_VAR 0 16
39319: PUSH
39320: EMPTY
39321: LIST
39322: LIST
39323: PUSH
39324: LD_INT 2
39326: PUSH
39327: LD_INT 30
39329: PUSH
39330: LD_INT 2
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 30
39339: PUSH
39340: LD_INT 3
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: LIST
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PPUSH
39356: CALL_OW 72
39360: ST_TO_ADDR
39361: GO 39445
39363: LD_INT 4
39365: DOUBLE
39366: EQUAL
39367: IFTRUE 39371
39369: GO 39444
39371: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39372: LD_ADDR_VAR 0 12
39376: PUSH
39377: LD_VAR 0 18
39381: PPUSH
39382: LD_INT 22
39384: PUSH
39385: LD_VAR 0 16
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: LD_INT 2
39396: PUSH
39397: LD_INT 30
39399: PUSH
39400: LD_INT 6
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 30
39409: PUSH
39410: LD_INT 7
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 30
39419: PUSH
39420: LD_INT 8
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: LIST
39431: LIST
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PPUSH
39437: CALL_OW 72
39441: ST_TO_ADDR
39442: GO 39445
39444: POP
// if i = 1 then
39445: LD_VAR 0 8
39449: PUSH
39450: LD_INT 1
39452: EQUAL
39453: IFFALSE 39564
// begin tmp := [ ] ;
39455: LD_ADDR_VAR 0 19
39459: PUSH
39460: EMPTY
39461: ST_TO_ADDR
// for j in f do
39462: LD_ADDR_VAR 0 9
39466: PUSH
39467: LD_VAR 0 12
39471: PUSH
39472: FOR_IN
39473: IFFALSE 39546
// if GetBType ( j ) = b_bunker then
39475: LD_VAR 0 9
39479: PPUSH
39480: CALL_OW 266
39484: PUSH
39485: LD_INT 32
39487: EQUAL
39488: IFFALSE 39515
// tmp := Insert ( tmp , 1 , j ) else
39490: LD_ADDR_VAR 0 19
39494: PUSH
39495: LD_VAR 0 19
39499: PPUSH
39500: LD_INT 1
39502: PPUSH
39503: LD_VAR 0 9
39507: PPUSH
39508: CALL_OW 2
39512: ST_TO_ADDR
39513: GO 39544
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39515: LD_ADDR_VAR 0 19
39519: PUSH
39520: LD_VAR 0 19
39524: PPUSH
39525: LD_VAR 0 19
39529: PUSH
39530: LD_INT 1
39532: PLUS
39533: PPUSH
39534: LD_VAR 0 9
39538: PPUSH
39539: CALL_OW 2
39543: ST_TO_ADDR
39544: GO 39472
39546: POP
39547: POP
// if tmp then
39548: LD_VAR 0 19
39552: IFFALSE 39564
// f := tmp ;
39554: LD_ADDR_VAR 0 12
39558: PUSH
39559: LD_VAR 0 19
39563: ST_TO_ADDR
// end ; x := personel [ i ] ;
39564: LD_ADDR_VAR 0 13
39568: PUSH
39569: LD_VAR 0 6
39573: PUSH
39574: LD_VAR 0 8
39578: ARRAY
39579: ST_TO_ADDR
// if x = - 1 then
39580: LD_VAR 0 13
39584: PUSH
39585: LD_INT 1
39587: NEG
39588: EQUAL
39589: IFFALSE 39798
// begin for j in f do
39591: LD_ADDR_VAR 0 9
39595: PUSH
39596: LD_VAR 0 12
39600: PUSH
39601: FOR_IN
39602: IFFALSE 39794
// repeat InitHc ;
39604: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39608: LD_VAR 0 9
39612: PPUSH
39613: CALL_OW 266
39617: PUSH
39618: LD_INT 5
39620: EQUAL
39621: IFFALSE 39691
// begin if UnitsInside ( j ) < 3 then
39623: LD_VAR 0 9
39627: PPUSH
39628: CALL_OW 313
39632: PUSH
39633: LD_INT 3
39635: LESS
39636: IFFALSE 39672
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39638: LD_INT 0
39640: PPUSH
39641: LD_INT 5
39643: PUSH
39644: LD_INT 8
39646: PUSH
39647: LD_INT 9
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: LIST
39654: PUSH
39655: LD_VAR 0 17
39659: ARRAY
39660: PPUSH
39661: LD_VAR 0 4
39665: PPUSH
39666: CALL_OW 380
39670: GO 39689
// PrepareHuman ( false , i , skill ) ;
39672: LD_INT 0
39674: PPUSH
39675: LD_VAR 0 8
39679: PPUSH
39680: LD_VAR 0 4
39684: PPUSH
39685: CALL_OW 380
// end else
39689: GO 39708
// PrepareHuman ( false , i , skill ) ;
39691: LD_INT 0
39693: PPUSH
39694: LD_VAR 0 8
39698: PPUSH
39699: LD_VAR 0 4
39703: PPUSH
39704: CALL_OW 380
// un := CreateHuman ;
39708: LD_ADDR_VAR 0 14
39712: PUSH
39713: CALL_OW 44
39717: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39718: LD_ADDR_VAR 0 7
39722: PUSH
39723: LD_VAR 0 7
39727: PPUSH
39728: LD_INT 1
39730: PPUSH
39731: LD_VAR 0 14
39735: PPUSH
39736: CALL_OW 2
39740: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39741: LD_VAR 0 14
39745: PPUSH
39746: LD_VAR 0 9
39750: PPUSH
39751: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39755: LD_VAR 0 9
39759: PPUSH
39760: CALL_OW 313
39764: PUSH
39765: LD_INT 6
39767: EQUAL
39768: PUSH
39769: LD_VAR 0 9
39773: PPUSH
39774: CALL_OW 266
39778: PUSH
39779: LD_INT 32
39781: PUSH
39782: LD_INT 31
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: IN
39789: OR
39790: IFFALSE 39604
39792: GO 39601
39794: POP
39795: POP
// end else
39796: GO 40178
// for j = 1 to x do
39798: LD_ADDR_VAR 0 9
39802: PUSH
39803: DOUBLE
39804: LD_INT 1
39806: DEC
39807: ST_TO_ADDR
39808: LD_VAR 0 13
39812: PUSH
39813: FOR_TO
39814: IFFALSE 40176
// begin InitHc ;
39816: CALL_OW 19
// if not f then
39820: LD_VAR 0 12
39824: NOT
39825: IFFALSE 39914
// begin PrepareHuman ( false , i , skill ) ;
39827: LD_INT 0
39829: PPUSH
39830: LD_VAR 0 8
39834: PPUSH
39835: LD_VAR 0 4
39839: PPUSH
39840: CALL_OW 380
// un := CreateHuman ;
39844: LD_ADDR_VAR 0 14
39848: PUSH
39849: CALL_OW 44
39853: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39854: LD_ADDR_VAR 0 7
39858: PUSH
39859: LD_VAR 0 7
39863: PPUSH
39864: LD_INT 1
39866: PPUSH
39867: LD_VAR 0 14
39871: PPUSH
39872: CALL_OW 2
39876: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39877: LD_VAR 0 14
39881: PPUSH
39882: LD_VAR 0 1
39886: PPUSH
39887: CALL_OW 250
39891: PPUSH
39892: LD_VAR 0 1
39896: PPUSH
39897: CALL_OW 251
39901: PPUSH
39902: LD_INT 10
39904: PPUSH
39905: LD_INT 0
39907: PPUSH
39908: CALL_OW 50
// continue ;
39912: GO 39813
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39914: LD_VAR 0 12
39918: PUSH
39919: LD_INT 1
39921: ARRAY
39922: PPUSH
39923: CALL_OW 313
39927: PUSH
39928: LD_VAR 0 12
39932: PUSH
39933: LD_INT 1
39935: ARRAY
39936: PPUSH
39937: CALL_OW 266
39941: PUSH
39942: LD_INT 32
39944: PUSH
39945: LD_INT 31
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: IN
39952: AND
39953: PUSH
39954: LD_VAR 0 12
39958: PUSH
39959: LD_INT 1
39961: ARRAY
39962: PPUSH
39963: CALL_OW 313
39967: PUSH
39968: LD_INT 6
39970: EQUAL
39971: OR
39972: IFFALSE 39992
// f := Delete ( f , 1 ) ;
39974: LD_ADDR_VAR 0 12
39978: PUSH
39979: LD_VAR 0 12
39983: PPUSH
39984: LD_INT 1
39986: PPUSH
39987: CALL_OW 3
39991: ST_TO_ADDR
// if not f then
39992: LD_VAR 0 12
39996: NOT
39997: IFFALSE 40015
// begin x := x + 2 ;
39999: LD_ADDR_VAR 0 13
40003: PUSH
40004: LD_VAR 0 13
40008: PUSH
40009: LD_INT 2
40011: PLUS
40012: ST_TO_ADDR
// continue ;
40013: GO 39813
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40015: LD_VAR 0 12
40019: PUSH
40020: LD_INT 1
40022: ARRAY
40023: PPUSH
40024: CALL_OW 266
40028: PUSH
40029: LD_INT 5
40031: EQUAL
40032: IFFALSE 40106
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40034: LD_VAR 0 12
40038: PUSH
40039: LD_INT 1
40041: ARRAY
40042: PPUSH
40043: CALL_OW 313
40047: PUSH
40048: LD_INT 3
40050: LESS
40051: IFFALSE 40087
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40053: LD_INT 0
40055: PPUSH
40056: LD_INT 5
40058: PUSH
40059: LD_INT 8
40061: PUSH
40062: LD_INT 9
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: LIST
40069: PUSH
40070: LD_VAR 0 17
40074: ARRAY
40075: PPUSH
40076: LD_VAR 0 4
40080: PPUSH
40081: CALL_OW 380
40085: GO 40104
// PrepareHuman ( false , i , skill ) ;
40087: LD_INT 0
40089: PPUSH
40090: LD_VAR 0 8
40094: PPUSH
40095: LD_VAR 0 4
40099: PPUSH
40100: CALL_OW 380
// end else
40104: GO 40123
// PrepareHuman ( false , i , skill ) ;
40106: LD_INT 0
40108: PPUSH
40109: LD_VAR 0 8
40113: PPUSH
40114: LD_VAR 0 4
40118: PPUSH
40119: CALL_OW 380
// un := CreateHuman ;
40123: LD_ADDR_VAR 0 14
40127: PUSH
40128: CALL_OW 44
40132: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40133: LD_ADDR_VAR 0 7
40137: PUSH
40138: LD_VAR 0 7
40142: PPUSH
40143: LD_INT 1
40145: PPUSH
40146: LD_VAR 0 14
40150: PPUSH
40151: CALL_OW 2
40155: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40156: LD_VAR 0 14
40160: PPUSH
40161: LD_VAR 0 12
40165: PUSH
40166: LD_INT 1
40168: ARRAY
40169: PPUSH
40170: CALL_OW 52
// end ;
40174: GO 39813
40176: POP
40177: POP
// end ;
40178: GO 39115
40180: POP
40181: POP
// result := result ^ buildings ;
40182: LD_ADDR_VAR 0 7
40186: PUSH
40187: LD_VAR 0 7
40191: PUSH
40192: LD_VAR 0 18
40196: ADD
40197: ST_TO_ADDR
// end else
40198: GO 40341
// begin for i = 1 to personel do
40200: LD_ADDR_VAR 0 8
40204: PUSH
40205: DOUBLE
40206: LD_INT 1
40208: DEC
40209: ST_TO_ADDR
40210: LD_VAR 0 6
40214: PUSH
40215: FOR_TO
40216: IFFALSE 40339
// begin if i > 4 then
40218: LD_VAR 0 8
40222: PUSH
40223: LD_INT 4
40225: GREATER
40226: IFFALSE 40230
// break ;
40228: GO 40339
// x := personel [ i ] ;
40230: LD_ADDR_VAR 0 13
40234: PUSH
40235: LD_VAR 0 6
40239: PUSH
40240: LD_VAR 0 8
40244: ARRAY
40245: ST_TO_ADDR
// if x = - 1 then
40246: LD_VAR 0 13
40250: PUSH
40251: LD_INT 1
40253: NEG
40254: EQUAL
40255: IFFALSE 40259
// continue ;
40257: GO 40215
// PrepareHuman ( false , i , skill ) ;
40259: LD_INT 0
40261: PPUSH
40262: LD_VAR 0 8
40266: PPUSH
40267: LD_VAR 0 4
40271: PPUSH
40272: CALL_OW 380
// un := CreateHuman ;
40276: LD_ADDR_VAR 0 14
40280: PUSH
40281: CALL_OW 44
40285: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40286: LD_VAR 0 14
40290: PPUSH
40291: LD_VAR 0 1
40295: PPUSH
40296: CALL_OW 250
40300: PPUSH
40301: LD_VAR 0 1
40305: PPUSH
40306: CALL_OW 251
40310: PPUSH
40311: LD_INT 10
40313: PPUSH
40314: LD_INT 0
40316: PPUSH
40317: CALL_OW 50
// result := result ^ un ;
40321: LD_ADDR_VAR 0 7
40325: PUSH
40326: LD_VAR 0 7
40330: PUSH
40331: LD_VAR 0 14
40335: ADD
40336: ST_TO_ADDR
// end ;
40337: GO 40215
40339: POP
40340: POP
// end ; end ;
40341: LD_VAR 0 7
40345: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40346: LD_INT 0
40348: PPUSH
40349: PPUSH
40350: PPUSH
40351: PPUSH
40352: PPUSH
40353: PPUSH
40354: PPUSH
40355: PPUSH
40356: PPUSH
40357: PPUSH
40358: PPUSH
40359: PPUSH
40360: PPUSH
40361: PPUSH
40362: PPUSH
40363: PPUSH
// result := false ;
40364: LD_ADDR_VAR 0 3
40368: PUSH
40369: LD_INT 0
40371: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40372: LD_VAR 0 1
40376: NOT
40377: PUSH
40378: LD_VAR 0 1
40382: PPUSH
40383: CALL_OW 266
40387: PUSH
40388: LD_INT 32
40390: PUSH
40391: LD_INT 33
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: IN
40398: NOT
40399: OR
40400: IFFALSE 40404
// exit ;
40402: GO 41513
// nat := GetNation ( tower ) ;
40404: LD_ADDR_VAR 0 12
40408: PUSH
40409: LD_VAR 0 1
40413: PPUSH
40414: CALL_OW 248
40418: ST_TO_ADDR
// side := GetSide ( tower ) ;
40419: LD_ADDR_VAR 0 16
40423: PUSH
40424: LD_VAR 0 1
40428: PPUSH
40429: CALL_OW 255
40433: ST_TO_ADDR
// x := GetX ( tower ) ;
40434: LD_ADDR_VAR 0 10
40438: PUSH
40439: LD_VAR 0 1
40443: PPUSH
40444: CALL_OW 250
40448: ST_TO_ADDR
// y := GetY ( tower ) ;
40449: LD_ADDR_VAR 0 11
40453: PUSH
40454: LD_VAR 0 1
40458: PPUSH
40459: CALL_OW 251
40463: ST_TO_ADDR
// if not x or not y then
40464: LD_VAR 0 10
40468: NOT
40469: PUSH
40470: LD_VAR 0 11
40474: NOT
40475: OR
40476: IFFALSE 40480
// exit ;
40478: GO 41513
// weapon := 0 ;
40480: LD_ADDR_VAR 0 18
40484: PUSH
40485: LD_INT 0
40487: ST_TO_ADDR
// fac_list := [ ] ;
40488: LD_ADDR_VAR 0 17
40492: PUSH
40493: EMPTY
40494: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40495: LD_ADDR_VAR 0 6
40499: PUSH
40500: LD_VAR 0 1
40504: PPUSH
40505: CALL_OW 274
40509: PPUSH
40510: LD_VAR 0 2
40514: PPUSH
40515: LD_INT 0
40517: PPUSH
40518: CALL 38084 0 3
40522: PPUSH
40523: LD_INT 30
40525: PUSH
40526: LD_INT 3
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PPUSH
40533: CALL_OW 72
40537: ST_TO_ADDR
// if not factories then
40538: LD_VAR 0 6
40542: NOT
40543: IFFALSE 40547
// exit ;
40545: GO 41513
// for i in factories do
40547: LD_ADDR_VAR 0 8
40551: PUSH
40552: LD_VAR 0 6
40556: PUSH
40557: FOR_IN
40558: IFFALSE 40583
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40560: LD_ADDR_VAR 0 17
40564: PUSH
40565: LD_VAR 0 17
40569: PUSH
40570: LD_VAR 0 8
40574: PPUSH
40575: CALL_OW 478
40579: UNION
40580: ST_TO_ADDR
40581: GO 40557
40583: POP
40584: POP
// if not fac_list then
40585: LD_VAR 0 17
40589: NOT
40590: IFFALSE 40594
// exit ;
40592: GO 41513
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40594: LD_ADDR_VAR 0 5
40598: PUSH
40599: LD_INT 4
40601: PUSH
40602: LD_INT 5
40604: PUSH
40605: LD_INT 9
40607: PUSH
40608: LD_INT 10
40610: PUSH
40611: LD_INT 6
40613: PUSH
40614: LD_INT 7
40616: PUSH
40617: LD_INT 11
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 27
40631: PUSH
40632: LD_INT 28
40634: PUSH
40635: LD_INT 26
40637: PUSH
40638: LD_INT 30
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 43
40649: PUSH
40650: LD_INT 44
40652: PUSH
40653: LD_INT 46
40655: PUSH
40656: LD_INT 45
40658: PUSH
40659: LD_INT 47
40661: PUSH
40662: LD_INT 49
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: LIST
40677: PUSH
40678: LD_VAR 0 12
40682: ARRAY
40683: ST_TO_ADDR
// list := list isect fac_list ;
40684: LD_ADDR_VAR 0 5
40688: PUSH
40689: LD_VAR 0 5
40693: PUSH
40694: LD_VAR 0 17
40698: ISECT
40699: ST_TO_ADDR
// if not list then
40700: LD_VAR 0 5
40704: NOT
40705: IFFALSE 40709
// exit ;
40707: GO 41513
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40709: LD_VAR 0 12
40713: PUSH
40714: LD_INT 3
40716: EQUAL
40717: PUSH
40718: LD_INT 49
40720: PUSH
40721: LD_VAR 0 5
40725: IN
40726: AND
40727: PUSH
40728: LD_INT 31
40730: PPUSH
40731: LD_VAR 0 16
40735: PPUSH
40736: CALL_OW 321
40740: PUSH
40741: LD_INT 2
40743: EQUAL
40744: AND
40745: IFFALSE 40805
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40747: LD_INT 22
40749: PUSH
40750: LD_VAR 0 16
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 35
40761: PUSH
40762: LD_INT 49
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 91
40771: PUSH
40772: LD_VAR 0 1
40776: PUSH
40777: LD_INT 10
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: LIST
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: LIST
40789: PPUSH
40790: CALL_OW 69
40794: NOT
40795: IFFALSE 40805
// weapon := ru_time_lapser ;
40797: LD_ADDR_VAR 0 18
40801: PUSH
40802: LD_INT 49
40804: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40805: LD_VAR 0 12
40809: PUSH
40810: LD_INT 1
40812: PUSH
40813: LD_INT 2
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: IN
40820: PUSH
40821: LD_INT 11
40823: PUSH
40824: LD_VAR 0 5
40828: IN
40829: PUSH
40830: LD_INT 30
40832: PUSH
40833: LD_VAR 0 5
40837: IN
40838: OR
40839: AND
40840: PUSH
40841: LD_INT 6
40843: PPUSH
40844: LD_VAR 0 16
40848: PPUSH
40849: CALL_OW 321
40853: PUSH
40854: LD_INT 2
40856: EQUAL
40857: AND
40858: IFFALSE 41023
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40860: LD_INT 22
40862: PUSH
40863: LD_VAR 0 16
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 2
40874: PUSH
40875: LD_INT 35
40877: PUSH
40878: LD_INT 11
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 35
40887: PUSH
40888: LD_INT 30
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 91
40902: PUSH
40903: LD_VAR 0 1
40907: PUSH
40908: LD_INT 18
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: LIST
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: LIST
40920: PPUSH
40921: CALL_OW 69
40925: NOT
40926: PUSH
40927: LD_INT 22
40929: PUSH
40930: LD_VAR 0 16
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 2
40941: PUSH
40942: LD_INT 30
40944: PUSH
40945: LD_INT 32
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: LD_INT 30
40954: PUSH
40955: LD_INT 33
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 91
40969: PUSH
40970: LD_VAR 0 1
40974: PUSH
40975: LD_INT 12
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: LIST
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: LIST
40987: PUSH
40988: EMPTY
40989: LIST
40990: PPUSH
40991: CALL_OW 69
40995: PUSH
40996: LD_INT 2
40998: GREATER
40999: AND
41000: IFFALSE 41023
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41002: LD_ADDR_VAR 0 18
41006: PUSH
41007: LD_INT 11
41009: PUSH
41010: LD_INT 30
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_VAR 0 12
41021: ARRAY
41022: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41023: LD_VAR 0 18
41027: NOT
41028: PUSH
41029: LD_INT 40
41031: PPUSH
41032: LD_VAR 0 16
41036: PPUSH
41037: CALL_OW 321
41041: PUSH
41042: LD_INT 2
41044: EQUAL
41045: AND
41046: PUSH
41047: LD_INT 7
41049: PUSH
41050: LD_VAR 0 5
41054: IN
41055: PUSH
41056: LD_INT 28
41058: PUSH
41059: LD_VAR 0 5
41063: IN
41064: OR
41065: PUSH
41066: LD_INT 45
41068: PUSH
41069: LD_VAR 0 5
41073: IN
41074: OR
41075: AND
41076: IFFALSE 41330
// begin hex := GetHexInfo ( x , y ) ;
41078: LD_ADDR_VAR 0 4
41082: PUSH
41083: LD_VAR 0 10
41087: PPUSH
41088: LD_VAR 0 11
41092: PPUSH
41093: CALL_OW 546
41097: ST_TO_ADDR
// if hex [ 1 ] then
41098: LD_VAR 0 4
41102: PUSH
41103: LD_INT 1
41105: ARRAY
41106: IFFALSE 41110
// exit ;
41108: GO 41513
// height := hex [ 2 ] ;
41110: LD_ADDR_VAR 0 15
41114: PUSH
41115: LD_VAR 0 4
41119: PUSH
41120: LD_INT 2
41122: ARRAY
41123: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41124: LD_ADDR_VAR 0 14
41128: PUSH
41129: LD_INT 0
41131: PUSH
41132: LD_INT 2
41134: PUSH
41135: LD_INT 3
41137: PUSH
41138: LD_INT 5
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: ST_TO_ADDR
// for i in tmp do
41147: LD_ADDR_VAR 0 8
41151: PUSH
41152: LD_VAR 0 14
41156: PUSH
41157: FOR_IN
41158: IFFALSE 41328
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41160: LD_ADDR_VAR 0 9
41164: PUSH
41165: LD_VAR 0 10
41169: PPUSH
41170: LD_VAR 0 8
41174: PPUSH
41175: LD_INT 5
41177: PPUSH
41178: CALL_OW 272
41182: PUSH
41183: LD_VAR 0 11
41187: PPUSH
41188: LD_VAR 0 8
41192: PPUSH
41193: LD_INT 5
41195: PPUSH
41196: CALL_OW 273
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41205: LD_VAR 0 9
41209: PUSH
41210: LD_INT 1
41212: ARRAY
41213: PPUSH
41214: LD_VAR 0 9
41218: PUSH
41219: LD_INT 2
41221: ARRAY
41222: PPUSH
41223: CALL_OW 488
41227: IFFALSE 41326
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41229: LD_ADDR_VAR 0 4
41233: PUSH
41234: LD_VAR 0 9
41238: PUSH
41239: LD_INT 1
41241: ARRAY
41242: PPUSH
41243: LD_VAR 0 9
41247: PUSH
41248: LD_INT 2
41250: ARRAY
41251: PPUSH
41252: CALL_OW 546
41256: ST_TO_ADDR
// if hex [ 1 ] then
41257: LD_VAR 0 4
41261: PUSH
41262: LD_INT 1
41264: ARRAY
41265: IFFALSE 41269
// continue ;
41267: GO 41157
// h := hex [ 2 ] ;
41269: LD_ADDR_VAR 0 13
41273: PUSH
41274: LD_VAR 0 4
41278: PUSH
41279: LD_INT 2
41281: ARRAY
41282: ST_TO_ADDR
// if h + 7 < height then
41283: LD_VAR 0 13
41287: PUSH
41288: LD_INT 7
41290: PLUS
41291: PUSH
41292: LD_VAR 0 15
41296: LESS
41297: IFFALSE 41326
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41299: LD_ADDR_VAR 0 18
41303: PUSH
41304: LD_INT 7
41306: PUSH
41307: LD_INT 28
41309: PUSH
41310: LD_INT 45
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: LIST
41317: PUSH
41318: LD_VAR 0 12
41322: ARRAY
41323: ST_TO_ADDR
// break ;
41324: GO 41328
// end ; end ; end ;
41326: GO 41157
41328: POP
41329: POP
// end ; if not weapon then
41330: LD_VAR 0 18
41334: NOT
41335: IFFALSE 41395
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41337: LD_ADDR_VAR 0 5
41341: PUSH
41342: LD_VAR 0 5
41346: PUSH
41347: LD_INT 11
41349: PUSH
41350: LD_INT 30
41352: PUSH
41353: LD_INT 49
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: LIST
41360: DIFF
41361: ST_TO_ADDR
// if not list then
41362: LD_VAR 0 5
41366: NOT
41367: IFFALSE 41371
// exit ;
41369: GO 41513
// weapon := list [ rand ( 1 , list ) ] ;
41371: LD_ADDR_VAR 0 18
41375: PUSH
41376: LD_VAR 0 5
41380: PUSH
41381: LD_INT 1
41383: PPUSH
41384: LD_VAR 0 5
41388: PPUSH
41389: CALL_OW 12
41393: ARRAY
41394: ST_TO_ADDR
// end ; if weapon then
41395: LD_VAR 0 18
41399: IFFALSE 41513
// begin tmp := CostOfWeapon ( weapon ) ;
41401: LD_ADDR_VAR 0 14
41405: PUSH
41406: LD_VAR 0 18
41410: PPUSH
41411: CALL_OW 451
41415: ST_TO_ADDR
// j := GetBase ( tower ) ;
41416: LD_ADDR_VAR 0 9
41420: PUSH
41421: LD_VAR 0 1
41425: PPUSH
41426: CALL_OW 274
41430: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41431: LD_VAR 0 9
41435: PPUSH
41436: LD_INT 1
41438: PPUSH
41439: CALL_OW 275
41443: PUSH
41444: LD_VAR 0 14
41448: PUSH
41449: LD_INT 1
41451: ARRAY
41452: GREATEREQUAL
41453: PUSH
41454: LD_VAR 0 9
41458: PPUSH
41459: LD_INT 2
41461: PPUSH
41462: CALL_OW 275
41466: PUSH
41467: LD_VAR 0 14
41471: PUSH
41472: LD_INT 2
41474: ARRAY
41475: GREATEREQUAL
41476: AND
41477: PUSH
41478: LD_VAR 0 9
41482: PPUSH
41483: LD_INT 3
41485: PPUSH
41486: CALL_OW 275
41490: PUSH
41491: LD_VAR 0 14
41495: PUSH
41496: LD_INT 3
41498: ARRAY
41499: GREATEREQUAL
41500: AND
41501: IFFALSE 41513
// result := weapon ;
41503: LD_ADDR_VAR 0 3
41507: PUSH
41508: LD_VAR 0 18
41512: ST_TO_ADDR
// end ; end ;
41513: LD_VAR 0 3
41517: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41518: LD_INT 0
41520: PPUSH
41521: PPUSH
// result := true ;
41522: LD_ADDR_VAR 0 3
41526: PUSH
41527: LD_INT 1
41529: ST_TO_ADDR
// if array1 = array2 then
41530: LD_VAR 0 1
41534: PUSH
41535: LD_VAR 0 2
41539: EQUAL
41540: IFFALSE 41600
// begin for i = 1 to array1 do
41542: LD_ADDR_VAR 0 4
41546: PUSH
41547: DOUBLE
41548: LD_INT 1
41550: DEC
41551: ST_TO_ADDR
41552: LD_VAR 0 1
41556: PUSH
41557: FOR_TO
41558: IFFALSE 41596
// if array1 [ i ] <> array2 [ i ] then
41560: LD_VAR 0 1
41564: PUSH
41565: LD_VAR 0 4
41569: ARRAY
41570: PUSH
41571: LD_VAR 0 2
41575: PUSH
41576: LD_VAR 0 4
41580: ARRAY
41581: NONEQUAL
41582: IFFALSE 41594
// begin result := false ;
41584: LD_ADDR_VAR 0 3
41588: PUSH
41589: LD_INT 0
41591: ST_TO_ADDR
// break ;
41592: GO 41596
// end ;
41594: GO 41557
41596: POP
41597: POP
// end else
41598: GO 41608
// result := false ;
41600: LD_ADDR_VAR 0 3
41604: PUSH
41605: LD_INT 0
41607: ST_TO_ADDR
// end ;
41608: LD_VAR 0 3
41612: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41613: LD_INT 0
41615: PPUSH
41616: PPUSH
// if not array1 or not array2 then
41617: LD_VAR 0 1
41621: NOT
41622: PUSH
41623: LD_VAR 0 2
41627: NOT
41628: OR
41629: IFFALSE 41633
// exit ;
41631: GO 41697
// result := true ;
41633: LD_ADDR_VAR 0 3
41637: PUSH
41638: LD_INT 1
41640: ST_TO_ADDR
// for i = 1 to array1 do
41641: LD_ADDR_VAR 0 4
41645: PUSH
41646: DOUBLE
41647: LD_INT 1
41649: DEC
41650: ST_TO_ADDR
41651: LD_VAR 0 1
41655: PUSH
41656: FOR_TO
41657: IFFALSE 41695
// if array1 [ i ] <> array2 [ i ] then
41659: LD_VAR 0 1
41663: PUSH
41664: LD_VAR 0 4
41668: ARRAY
41669: PUSH
41670: LD_VAR 0 2
41674: PUSH
41675: LD_VAR 0 4
41679: ARRAY
41680: NONEQUAL
41681: IFFALSE 41693
// begin result := false ;
41683: LD_ADDR_VAR 0 3
41687: PUSH
41688: LD_INT 0
41690: ST_TO_ADDR
// break ;
41691: GO 41695
// end ;
41693: GO 41656
41695: POP
41696: POP
// end ;
41697: LD_VAR 0 3
41701: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41702: LD_INT 0
41704: PPUSH
41705: PPUSH
41706: PPUSH
// pom := GetBase ( fac ) ;
41707: LD_ADDR_VAR 0 5
41711: PUSH
41712: LD_VAR 0 1
41716: PPUSH
41717: CALL_OW 274
41721: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41722: LD_ADDR_VAR 0 4
41726: PUSH
41727: LD_VAR 0 2
41731: PUSH
41732: LD_INT 1
41734: ARRAY
41735: PPUSH
41736: LD_VAR 0 2
41740: PUSH
41741: LD_INT 2
41743: ARRAY
41744: PPUSH
41745: LD_VAR 0 2
41749: PUSH
41750: LD_INT 3
41752: ARRAY
41753: PPUSH
41754: LD_VAR 0 2
41758: PUSH
41759: LD_INT 4
41761: ARRAY
41762: PPUSH
41763: CALL_OW 449
41767: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41768: LD_ADDR_VAR 0 3
41772: PUSH
41773: LD_VAR 0 5
41777: PPUSH
41778: LD_INT 1
41780: PPUSH
41781: CALL_OW 275
41785: PUSH
41786: LD_VAR 0 4
41790: PUSH
41791: LD_INT 1
41793: ARRAY
41794: GREATEREQUAL
41795: PUSH
41796: LD_VAR 0 5
41800: PPUSH
41801: LD_INT 2
41803: PPUSH
41804: CALL_OW 275
41808: PUSH
41809: LD_VAR 0 4
41813: PUSH
41814: LD_INT 2
41816: ARRAY
41817: GREATEREQUAL
41818: AND
41819: PUSH
41820: LD_VAR 0 5
41824: PPUSH
41825: LD_INT 3
41827: PPUSH
41828: CALL_OW 275
41832: PUSH
41833: LD_VAR 0 4
41837: PUSH
41838: LD_INT 3
41840: ARRAY
41841: GREATEREQUAL
41842: AND
41843: ST_TO_ADDR
// end ;
41844: LD_VAR 0 3
41848: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41849: LD_INT 0
41851: PPUSH
41852: PPUSH
41853: PPUSH
41854: PPUSH
// pom := GetBase ( building ) ;
41855: LD_ADDR_VAR 0 3
41859: PUSH
41860: LD_VAR 0 1
41864: PPUSH
41865: CALL_OW 274
41869: ST_TO_ADDR
// if not pom then
41870: LD_VAR 0 3
41874: NOT
41875: IFFALSE 41879
// exit ;
41877: GO 42049
// btype := GetBType ( building ) ;
41879: LD_ADDR_VAR 0 5
41883: PUSH
41884: LD_VAR 0 1
41888: PPUSH
41889: CALL_OW 266
41893: ST_TO_ADDR
// if btype = b_armoury then
41894: LD_VAR 0 5
41898: PUSH
41899: LD_INT 4
41901: EQUAL
41902: IFFALSE 41912
// btype := b_barracks ;
41904: LD_ADDR_VAR 0 5
41908: PUSH
41909: LD_INT 5
41911: ST_TO_ADDR
// if btype = b_depot then
41912: LD_VAR 0 5
41916: PUSH
41917: LD_INT 0
41919: EQUAL
41920: IFFALSE 41930
// btype := b_warehouse ;
41922: LD_ADDR_VAR 0 5
41926: PUSH
41927: LD_INT 1
41929: ST_TO_ADDR
// if btype = b_workshop then
41930: LD_VAR 0 5
41934: PUSH
41935: LD_INT 2
41937: EQUAL
41938: IFFALSE 41948
// btype := b_factory ;
41940: LD_ADDR_VAR 0 5
41944: PUSH
41945: LD_INT 3
41947: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41948: LD_ADDR_VAR 0 4
41952: PUSH
41953: LD_VAR 0 5
41957: PPUSH
41958: LD_VAR 0 1
41962: PPUSH
41963: CALL_OW 248
41967: PPUSH
41968: CALL_OW 450
41972: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41973: LD_ADDR_VAR 0 2
41977: PUSH
41978: LD_VAR 0 3
41982: PPUSH
41983: LD_INT 1
41985: PPUSH
41986: CALL_OW 275
41990: PUSH
41991: LD_VAR 0 4
41995: PUSH
41996: LD_INT 1
41998: ARRAY
41999: GREATEREQUAL
42000: PUSH
42001: LD_VAR 0 3
42005: PPUSH
42006: LD_INT 2
42008: PPUSH
42009: CALL_OW 275
42013: PUSH
42014: LD_VAR 0 4
42018: PUSH
42019: LD_INT 2
42021: ARRAY
42022: GREATEREQUAL
42023: AND
42024: PUSH
42025: LD_VAR 0 3
42029: PPUSH
42030: LD_INT 3
42032: PPUSH
42033: CALL_OW 275
42037: PUSH
42038: LD_VAR 0 4
42042: PUSH
42043: LD_INT 3
42045: ARRAY
42046: GREATEREQUAL
42047: AND
42048: ST_TO_ADDR
// end ;
42049: LD_VAR 0 2
42053: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42054: LD_INT 0
42056: PPUSH
42057: PPUSH
42058: PPUSH
// pom := GetBase ( building ) ;
42059: LD_ADDR_VAR 0 4
42063: PUSH
42064: LD_VAR 0 1
42068: PPUSH
42069: CALL_OW 274
42073: ST_TO_ADDR
// if not pom then
42074: LD_VAR 0 4
42078: NOT
42079: IFFALSE 42083
// exit ;
42081: GO 42184
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42083: LD_ADDR_VAR 0 5
42087: PUSH
42088: LD_VAR 0 2
42092: PPUSH
42093: LD_VAR 0 1
42097: PPUSH
42098: CALL_OW 248
42102: PPUSH
42103: CALL_OW 450
42107: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42108: LD_ADDR_VAR 0 3
42112: PUSH
42113: LD_VAR 0 4
42117: PPUSH
42118: LD_INT 1
42120: PPUSH
42121: CALL_OW 275
42125: PUSH
42126: LD_VAR 0 5
42130: PUSH
42131: LD_INT 1
42133: ARRAY
42134: GREATEREQUAL
42135: PUSH
42136: LD_VAR 0 4
42140: PPUSH
42141: LD_INT 2
42143: PPUSH
42144: CALL_OW 275
42148: PUSH
42149: LD_VAR 0 5
42153: PUSH
42154: LD_INT 2
42156: ARRAY
42157: GREATEREQUAL
42158: AND
42159: PUSH
42160: LD_VAR 0 4
42164: PPUSH
42165: LD_INT 3
42167: PPUSH
42168: CALL_OW 275
42172: PUSH
42173: LD_VAR 0 5
42177: PUSH
42178: LD_INT 3
42180: ARRAY
42181: GREATEREQUAL
42182: AND
42183: ST_TO_ADDR
// end ;
42184: LD_VAR 0 3
42188: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42189: LD_INT 0
42191: PPUSH
42192: PPUSH
42193: PPUSH
42194: PPUSH
42195: PPUSH
42196: PPUSH
42197: PPUSH
42198: PPUSH
42199: PPUSH
42200: PPUSH
42201: PPUSH
// result := false ;
42202: LD_ADDR_VAR 0 8
42206: PUSH
42207: LD_INT 0
42209: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42210: LD_VAR 0 5
42214: NOT
42215: PUSH
42216: LD_VAR 0 1
42220: NOT
42221: OR
42222: PUSH
42223: LD_VAR 0 2
42227: NOT
42228: OR
42229: PUSH
42230: LD_VAR 0 3
42234: NOT
42235: OR
42236: IFFALSE 42240
// exit ;
42238: GO 43054
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42240: LD_ADDR_VAR 0 14
42244: PUSH
42245: LD_VAR 0 1
42249: PPUSH
42250: LD_VAR 0 2
42254: PPUSH
42255: LD_VAR 0 3
42259: PPUSH
42260: LD_VAR 0 4
42264: PPUSH
42265: LD_VAR 0 5
42269: PUSH
42270: LD_INT 1
42272: ARRAY
42273: PPUSH
42274: CALL_OW 248
42278: PPUSH
42279: LD_INT 0
42281: PPUSH
42282: CALL 44307 0 6
42286: ST_TO_ADDR
// if not hexes then
42287: LD_VAR 0 14
42291: NOT
42292: IFFALSE 42296
// exit ;
42294: GO 43054
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42296: LD_ADDR_VAR 0 17
42300: PUSH
42301: LD_VAR 0 5
42305: PPUSH
42306: LD_INT 22
42308: PUSH
42309: LD_VAR 0 13
42313: PPUSH
42314: CALL_OW 255
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 2
42325: PUSH
42326: LD_INT 30
42328: PUSH
42329: LD_INT 0
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 30
42338: PUSH
42339: LD_INT 1
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: LIST
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PPUSH
42355: CALL_OW 72
42359: ST_TO_ADDR
// for i = 1 to hexes do
42360: LD_ADDR_VAR 0 9
42364: PUSH
42365: DOUBLE
42366: LD_INT 1
42368: DEC
42369: ST_TO_ADDR
42370: LD_VAR 0 14
42374: PUSH
42375: FOR_TO
42376: IFFALSE 43052
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42378: LD_ADDR_VAR 0 13
42382: PUSH
42383: LD_VAR 0 14
42387: PUSH
42388: LD_VAR 0 9
42392: ARRAY
42393: PUSH
42394: LD_INT 1
42396: ARRAY
42397: PPUSH
42398: LD_VAR 0 14
42402: PUSH
42403: LD_VAR 0 9
42407: ARRAY
42408: PUSH
42409: LD_INT 2
42411: ARRAY
42412: PPUSH
42413: CALL_OW 428
42417: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42418: LD_VAR 0 14
42422: PUSH
42423: LD_VAR 0 9
42427: ARRAY
42428: PUSH
42429: LD_INT 1
42431: ARRAY
42432: PPUSH
42433: LD_VAR 0 14
42437: PUSH
42438: LD_VAR 0 9
42442: ARRAY
42443: PUSH
42444: LD_INT 2
42446: ARRAY
42447: PPUSH
42448: CALL_OW 351
42452: PUSH
42453: LD_VAR 0 14
42457: PUSH
42458: LD_VAR 0 9
42462: ARRAY
42463: PUSH
42464: LD_INT 1
42466: ARRAY
42467: PPUSH
42468: LD_VAR 0 14
42472: PUSH
42473: LD_VAR 0 9
42477: ARRAY
42478: PUSH
42479: LD_INT 2
42481: ARRAY
42482: PPUSH
42483: CALL_OW 488
42487: NOT
42488: OR
42489: PUSH
42490: LD_VAR 0 13
42494: PPUSH
42495: CALL_OW 247
42499: PUSH
42500: LD_INT 3
42502: EQUAL
42503: OR
42504: IFFALSE 42510
// exit ;
42506: POP
42507: POP
42508: GO 43054
// if not tmp then
42510: LD_VAR 0 13
42514: NOT
42515: IFFALSE 42519
// continue ;
42517: GO 42375
// result := true ;
42519: LD_ADDR_VAR 0 8
42523: PUSH
42524: LD_INT 1
42526: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42527: LD_VAR 0 6
42531: PUSH
42532: LD_VAR 0 13
42536: PPUSH
42537: CALL_OW 247
42541: PUSH
42542: LD_INT 2
42544: EQUAL
42545: AND
42546: PUSH
42547: LD_VAR 0 13
42551: PPUSH
42552: CALL_OW 263
42556: PUSH
42557: LD_INT 1
42559: EQUAL
42560: AND
42561: IFFALSE 42725
// begin if IsDrivenBy ( tmp ) then
42563: LD_VAR 0 13
42567: PPUSH
42568: CALL_OW 311
42572: IFFALSE 42576
// continue ;
42574: GO 42375
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42576: LD_VAR 0 6
42580: PPUSH
42581: LD_INT 3
42583: PUSH
42584: LD_INT 60
42586: PUSH
42587: EMPTY
42588: LIST
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 3
42596: PUSH
42597: LD_INT 55
42599: PUSH
42600: EMPTY
42601: LIST
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PPUSH
42611: CALL_OW 72
42615: IFFALSE 42723
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42617: LD_ADDR_VAR 0 18
42621: PUSH
42622: LD_VAR 0 6
42626: PPUSH
42627: LD_INT 3
42629: PUSH
42630: LD_INT 60
42632: PUSH
42633: EMPTY
42634: LIST
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 3
42642: PUSH
42643: LD_INT 55
42645: PUSH
42646: EMPTY
42647: LIST
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PPUSH
42657: CALL_OW 72
42661: PUSH
42662: LD_INT 1
42664: ARRAY
42665: ST_TO_ADDR
// if IsInUnit ( driver ) then
42666: LD_VAR 0 18
42670: PPUSH
42671: CALL_OW 310
42675: IFFALSE 42686
// ComExit ( driver ) ;
42677: LD_VAR 0 18
42681: PPUSH
42682: CALL 68099 0 1
// AddComEnterUnit ( driver , tmp ) ;
42686: LD_VAR 0 18
42690: PPUSH
42691: LD_VAR 0 13
42695: PPUSH
42696: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42700: LD_VAR 0 18
42704: PPUSH
42705: LD_VAR 0 7
42709: PPUSH
42710: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42714: LD_VAR 0 18
42718: PPUSH
42719: CALL_OW 181
// end ; continue ;
42723: GO 42375
// end ; if not cleaners or not tmp in cleaners then
42725: LD_VAR 0 6
42729: NOT
42730: PUSH
42731: LD_VAR 0 13
42735: PUSH
42736: LD_VAR 0 6
42740: IN
42741: NOT
42742: OR
42743: IFFALSE 43050
// begin if dep then
42745: LD_VAR 0 17
42749: IFFALSE 42885
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42751: LD_ADDR_VAR 0 16
42755: PUSH
42756: LD_VAR 0 17
42760: PUSH
42761: LD_INT 1
42763: ARRAY
42764: PPUSH
42765: CALL_OW 250
42769: PPUSH
42770: LD_VAR 0 17
42774: PUSH
42775: LD_INT 1
42777: ARRAY
42778: PPUSH
42779: CALL_OW 254
42783: PPUSH
42784: LD_INT 5
42786: PPUSH
42787: CALL_OW 272
42791: PUSH
42792: LD_VAR 0 17
42796: PUSH
42797: LD_INT 1
42799: ARRAY
42800: PPUSH
42801: CALL_OW 251
42805: PPUSH
42806: LD_VAR 0 17
42810: PUSH
42811: LD_INT 1
42813: ARRAY
42814: PPUSH
42815: CALL_OW 254
42819: PPUSH
42820: LD_INT 5
42822: PPUSH
42823: CALL_OW 273
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42832: LD_VAR 0 16
42836: PUSH
42837: LD_INT 1
42839: ARRAY
42840: PPUSH
42841: LD_VAR 0 16
42845: PUSH
42846: LD_INT 2
42848: ARRAY
42849: PPUSH
42850: CALL_OW 488
42854: IFFALSE 42885
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42856: LD_VAR 0 13
42860: PPUSH
42861: LD_VAR 0 16
42865: PUSH
42866: LD_INT 1
42868: ARRAY
42869: PPUSH
42870: LD_VAR 0 16
42874: PUSH
42875: LD_INT 2
42877: ARRAY
42878: PPUSH
42879: CALL_OW 111
// continue ;
42883: GO 42375
// end ; end ; r := GetDir ( tmp ) ;
42885: LD_ADDR_VAR 0 15
42889: PUSH
42890: LD_VAR 0 13
42894: PPUSH
42895: CALL_OW 254
42899: ST_TO_ADDR
// if r = 5 then
42900: LD_VAR 0 15
42904: PUSH
42905: LD_INT 5
42907: EQUAL
42908: IFFALSE 42918
// r := 0 ;
42910: LD_ADDR_VAR 0 15
42914: PUSH
42915: LD_INT 0
42917: ST_TO_ADDR
// for j = r to 5 do
42918: LD_ADDR_VAR 0 10
42922: PUSH
42923: DOUBLE
42924: LD_VAR 0 15
42928: DEC
42929: ST_TO_ADDR
42930: LD_INT 5
42932: PUSH
42933: FOR_TO
42934: IFFALSE 43048
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42936: LD_ADDR_VAR 0 11
42940: PUSH
42941: LD_VAR 0 13
42945: PPUSH
42946: CALL_OW 250
42950: PPUSH
42951: LD_VAR 0 10
42955: PPUSH
42956: LD_INT 2
42958: PPUSH
42959: CALL_OW 272
42963: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42964: LD_ADDR_VAR 0 12
42968: PUSH
42969: LD_VAR 0 13
42973: PPUSH
42974: CALL_OW 251
42978: PPUSH
42979: LD_VAR 0 10
42983: PPUSH
42984: LD_INT 2
42986: PPUSH
42987: CALL_OW 273
42991: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42992: LD_VAR 0 11
42996: PPUSH
42997: LD_VAR 0 12
43001: PPUSH
43002: CALL_OW 488
43006: PUSH
43007: LD_VAR 0 11
43011: PPUSH
43012: LD_VAR 0 12
43016: PPUSH
43017: CALL_OW 428
43021: NOT
43022: AND
43023: IFFALSE 43046
// begin ComMoveXY ( tmp , _x , _y ) ;
43025: LD_VAR 0 13
43029: PPUSH
43030: LD_VAR 0 11
43034: PPUSH
43035: LD_VAR 0 12
43039: PPUSH
43040: CALL_OW 111
// break ;
43044: GO 43048
// end ; end ;
43046: GO 42933
43048: POP
43049: POP
// end ; end ;
43050: GO 42375
43052: POP
43053: POP
// end ;
43054: LD_VAR 0 8
43058: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43059: LD_INT 0
43061: PPUSH
// result := true ;
43062: LD_ADDR_VAR 0 3
43066: PUSH
43067: LD_INT 1
43069: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43070: LD_VAR 0 2
43074: PUSH
43075: LD_INT 24
43077: DOUBLE
43078: EQUAL
43079: IFTRUE 43089
43081: LD_INT 33
43083: DOUBLE
43084: EQUAL
43085: IFTRUE 43089
43087: GO 43114
43089: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43090: LD_ADDR_VAR 0 3
43094: PUSH
43095: LD_INT 32
43097: PPUSH
43098: LD_VAR 0 1
43102: PPUSH
43103: CALL_OW 321
43107: PUSH
43108: LD_INT 2
43110: EQUAL
43111: ST_TO_ADDR
43112: GO 43430
43114: LD_INT 20
43116: DOUBLE
43117: EQUAL
43118: IFTRUE 43122
43120: GO 43147
43122: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43123: LD_ADDR_VAR 0 3
43127: PUSH
43128: LD_INT 6
43130: PPUSH
43131: LD_VAR 0 1
43135: PPUSH
43136: CALL_OW 321
43140: PUSH
43141: LD_INT 2
43143: EQUAL
43144: ST_TO_ADDR
43145: GO 43430
43147: LD_INT 22
43149: DOUBLE
43150: EQUAL
43151: IFTRUE 43161
43153: LD_INT 36
43155: DOUBLE
43156: EQUAL
43157: IFTRUE 43161
43159: GO 43186
43161: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43162: LD_ADDR_VAR 0 3
43166: PUSH
43167: LD_INT 15
43169: PPUSH
43170: LD_VAR 0 1
43174: PPUSH
43175: CALL_OW 321
43179: PUSH
43180: LD_INT 2
43182: EQUAL
43183: ST_TO_ADDR
43184: GO 43430
43186: LD_INT 30
43188: DOUBLE
43189: EQUAL
43190: IFTRUE 43194
43192: GO 43219
43194: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43195: LD_ADDR_VAR 0 3
43199: PUSH
43200: LD_INT 20
43202: PPUSH
43203: LD_VAR 0 1
43207: PPUSH
43208: CALL_OW 321
43212: PUSH
43213: LD_INT 2
43215: EQUAL
43216: ST_TO_ADDR
43217: GO 43430
43219: LD_INT 28
43221: DOUBLE
43222: EQUAL
43223: IFTRUE 43233
43225: LD_INT 21
43227: DOUBLE
43228: EQUAL
43229: IFTRUE 43233
43231: GO 43258
43233: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43234: LD_ADDR_VAR 0 3
43238: PUSH
43239: LD_INT 21
43241: PPUSH
43242: LD_VAR 0 1
43246: PPUSH
43247: CALL_OW 321
43251: PUSH
43252: LD_INT 2
43254: EQUAL
43255: ST_TO_ADDR
43256: GO 43430
43258: LD_INT 16
43260: DOUBLE
43261: EQUAL
43262: IFTRUE 43266
43264: GO 43291
43266: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43267: LD_ADDR_VAR 0 3
43271: PUSH
43272: LD_INT 84
43274: PPUSH
43275: LD_VAR 0 1
43279: PPUSH
43280: CALL_OW 321
43284: PUSH
43285: LD_INT 2
43287: EQUAL
43288: ST_TO_ADDR
43289: GO 43430
43291: LD_INT 19
43293: DOUBLE
43294: EQUAL
43295: IFTRUE 43305
43297: LD_INT 23
43299: DOUBLE
43300: EQUAL
43301: IFTRUE 43305
43303: GO 43330
43305: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43306: LD_ADDR_VAR 0 3
43310: PUSH
43311: LD_INT 83
43313: PPUSH
43314: LD_VAR 0 1
43318: PPUSH
43319: CALL_OW 321
43323: PUSH
43324: LD_INT 2
43326: EQUAL
43327: ST_TO_ADDR
43328: GO 43430
43330: LD_INT 17
43332: DOUBLE
43333: EQUAL
43334: IFTRUE 43338
43336: GO 43363
43338: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43339: LD_ADDR_VAR 0 3
43343: PUSH
43344: LD_INT 39
43346: PPUSH
43347: LD_VAR 0 1
43351: PPUSH
43352: CALL_OW 321
43356: PUSH
43357: LD_INT 2
43359: EQUAL
43360: ST_TO_ADDR
43361: GO 43430
43363: LD_INT 18
43365: DOUBLE
43366: EQUAL
43367: IFTRUE 43371
43369: GO 43396
43371: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43372: LD_ADDR_VAR 0 3
43376: PUSH
43377: LD_INT 40
43379: PPUSH
43380: LD_VAR 0 1
43384: PPUSH
43385: CALL_OW 321
43389: PUSH
43390: LD_INT 2
43392: EQUAL
43393: ST_TO_ADDR
43394: GO 43430
43396: LD_INT 27
43398: DOUBLE
43399: EQUAL
43400: IFTRUE 43404
43402: GO 43429
43404: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43405: LD_ADDR_VAR 0 3
43409: PUSH
43410: LD_INT 35
43412: PPUSH
43413: LD_VAR 0 1
43417: PPUSH
43418: CALL_OW 321
43422: PUSH
43423: LD_INT 2
43425: EQUAL
43426: ST_TO_ADDR
43427: GO 43430
43429: POP
// end ;
43430: LD_VAR 0 3
43434: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43435: LD_INT 0
43437: PPUSH
43438: PPUSH
43439: PPUSH
43440: PPUSH
43441: PPUSH
43442: PPUSH
43443: PPUSH
43444: PPUSH
43445: PPUSH
43446: PPUSH
43447: PPUSH
// result := false ;
43448: LD_ADDR_VAR 0 6
43452: PUSH
43453: LD_INT 0
43455: ST_TO_ADDR
// if btype = b_depot then
43456: LD_VAR 0 2
43460: PUSH
43461: LD_INT 0
43463: EQUAL
43464: IFFALSE 43476
// begin result := true ;
43466: LD_ADDR_VAR 0 6
43470: PUSH
43471: LD_INT 1
43473: ST_TO_ADDR
// exit ;
43474: GO 44302
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43476: LD_VAR 0 1
43480: NOT
43481: PUSH
43482: LD_VAR 0 1
43486: PPUSH
43487: CALL_OW 266
43491: PUSH
43492: LD_INT 0
43494: PUSH
43495: LD_INT 1
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: IN
43502: NOT
43503: OR
43504: PUSH
43505: LD_VAR 0 2
43509: NOT
43510: OR
43511: PUSH
43512: LD_VAR 0 5
43516: PUSH
43517: LD_INT 0
43519: PUSH
43520: LD_INT 1
43522: PUSH
43523: LD_INT 2
43525: PUSH
43526: LD_INT 3
43528: PUSH
43529: LD_INT 4
43531: PUSH
43532: LD_INT 5
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: IN
43543: NOT
43544: OR
43545: PUSH
43546: LD_VAR 0 3
43550: PPUSH
43551: LD_VAR 0 4
43555: PPUSH
43556: CALL_OW 488
43560: NOT
43561: OR
43562: IFFALSE 43566
// exit ;
43564: GO 44302
// side := GetSide ( depot ) ;
43566: LD_ADDR_VAR 0 9
43570: PUSH
43571: LD_VAR 0 1
43575: PPUSH
43576: CALL_OW 255
43580: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43581: LD_VAR 0 9
43585: PPUSH
43586: LD_VAR 0 2
43590: PPUSH
43591: CALL 43059 0 2
43595: NOT
43596: IFFALSE 43600
// exit ;
43598: GO 44302
// pom := GetBase ( depot ) ;
43600: LD_ADDR_VAR 0 10
43604: PUSH
43605: LD_VAR 0 1
43609: PPUSH
43610: CALL_OW 274
43614: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43615: LD_ADDR_VAR 0 11
43619: PUSH
43620: LD_VAR 0 2
43624: PPUSH
43625: LD_VAR 0 1
43629: PPUSH
43630: CALL_OW 248
43634: PPUSH
43635: CALL_OW 450
43639: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43640: LD_VAR 0 10
43644: PPUSH
43645: LD_INT 1
43647: PPUSH
43648: CALL_OW 275
43652: PUSH
43653: LD_VAR 0 11
43657: PUSH
43658: LD_INT 1
43660: ARRAY
43661: GREATEREQUAL
43662: PUSH
43663: LD_VAR 0 10
43667: PPUSH
43668: LD_INT 2
43670: PPUSH
43671: CALL_OW 275
43675: PUSH
43676: LD_VAR 0 11
43680: PUSH
43681: LD_INT 2
43683: ARRAY
43684: GREATEREQUAL
43685: AND
43686: PUSH
43687: LD_VAR 0 10
43691: PPUSH
43692: LD_INT 3
43694: PPUSH
43695: CALL_OW 275
43699: PUSH
43700: LD_VAR 0 11
43704: PUSH
43705: LD_INT 3
43707: ARRAY
43708: GREATEREQUAL
43709: AND
43710: NOT
43711: IFFALSE 43715
// exit ;
43713: GO 44302
// if GetBType ( depot ) = b_depot then
43715: LD_VAR 0 1
43719: PPUSH
43720: CALL_OW 266
43724: PUSH
43725: LD_INT 0
43727: EQUAL
43728: IFFALSE 43740
// dist := 28 else
43730: LD_ADDR_VAR 0 14
43734: PUSH
43735: LD_INT 28
43737: ST_TO_ADDR
43738: GO 43748
// dist := 36 ;
43740: LD_ADDR_VAR 0 14
43744: PUSH
43745: LD_INT 36
43747: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43748: LD_VAR 0 1
43752: PPUSH
43753: LD_VAR 0 3
43757: PPUSH
43758: LD_VAR 0 4
43762: PPUSH
43763: CALL_OW 297
43767: PUSH
43768: LD_VAR 0 14
43772: GREATER
43773: IFFALSE 43777
// exit ;
43775: GO 44302
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43777: LD_ADDR_VAR 0 12
43781: PUSH
43782: LD_VAR 0 2
43786: PPUSH
43787: LD_VAR 0 3
43791: PPUSH
43792: LD_VAR 0 4
43796: PPUSH
43797: LD_VAR 0 5
43801: PPUSH
43802: LD_VAR 0 1
43806: PPUSH
43807: CALL_OW 248
43811: PPUSH
43812: LD_INT 0
43814: PPUSH
43815: CALL 44307 0 6
43819: ST_TO_ADDR
// if not hexes then
43820: LD_VAR 0 12
43824: NOT
43825: IFFALSE 43829
// exit ;
43827: GO 44302
// hex := GetHexInfo ( x , y ) ;
43829: LD_ADDR_VAR 0 15
43833: PUSH
43834: LD_VAR 0 3
43838: PPUSH
43839: LD_VAR 0 4
43843: PPUSH
43844: CALL_OW 546
43848: ST_TO_ADDR
// if hex [ 1 ] then
43849: LD_VAR 0 15
43853: PUSH
43854: LD_INT 1
43856: ARRAY
43857: IFFALSE 43861
// exit ;
43859: GO 44302
// height := hex [ 2 ] ;
43861: LD_ADDR_VAR 0 13
43865: PUSH
43866: LD_VAR 0 15
43870: PUSH
43871: LD_INT 2
43873: ARRAY
43874: ST_TO_ADDR
// for i = 1 to hexes do
43875: LD_ADDR_VAR 0 7
43879: PUSH
43880: DOUBLE
43881: LD_INT 1
43883: DEC
43884: ST_TO_ADDR
43885: LD_VAR 0 12
43889: PUSH
43890: FOR_TO
43891: IFFALSE 44221
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43893: LD_VAR 0 12
43897: PUSH
43898: LD_VAR 0 7
43902: ARRAY
43903: PUSH
43904: LD_INT 1
43906: ARRAY
43907: PPUSH
43908: LD_VAR 0 12
43912: PUSH
43913: LD_VAR 0 7
43917: ARRAY
43918: PUSH
43919: LD_INT 2
43921: ARRAY
43922: PPUSH
43923: CALL_OW 488
43927: NOT
43928: PUSH
43929: LD_VAR 0 12
43933: PUSH
43934: LD_VAR 0 7
43938: ARRAY
43939: PUSH
43940: LD_INT 1
43942: ARRAY
43943: PPUSH
43944: LD_VAR 0 12
43948: PUSH
43949: LD_VAR 0 7
43953: ARRAY
43954: PUSH
43955: LD_INT 2
43957: ARRAY
43958: PPUSH
43959: CALL_OW 428
43963: PUSH
43964: LD_INT 0
43966: GREATER
43967: OR
43968: PUSH
43969: LD_VAR 0 12
43973: PUSH
43974: LD_VAR 0 7
43978: ARRAY
43979: PUSH
43980: LD_INT 1
43982: ARRAY
43983: PPUSH
43984: LD_VAR 0 12
43988: PUSH
43989: LD_VAR 0 7
43993: ARRAY
43994: PUSH
43995: LD_INT 2
43997: ARRAY
43998: PPUSH
43999: CALL_OW 351
44003: OR
44004: IFFALSE 44010
// exit ;
44006: POP
44007: POP
44008: GO 44302
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44010: LD_ADDR_VAR 0 8
44014: PUSH
44015: LD_VAR 0 12
44019: PUSH
44020: LD_VAR 0 7
44024: ARRAY
44025: PUSH
44026: LD_INT 1
44028: ARRAY
44029: PPUSH
44030: LD_VAR 0 12
44034: PUSH
44035: LD_VAR 0 7
44039: ARRAY
44040: PUSH
44041: LD_INT 2
44043: ARRAY
44044: PPUSH
44045: CALL_OW 546
44049: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44050: LD_VAR 0 8
44054: PUSH
44055: LD_INT 1
44057: ARRAY
44058: PUSH
44059: LD_VAR 0 8
44063: PUSH
44064: LD_INT 2
44066: ARRAY
44067: PUSH
44068: LD_VAR 0 13
44072: PUSH
44073: LD_INT 2
44075: PLUS
44076: GREATER
44077: OR
44078: PUSH
44079: LD_VAR 0 8
44083: PUSH
44084: LD_INT 2
44086: ARRAY
44087: PUSH
44088: LD_VAR 0 13
44092: PUSH
44093: LD_INT 2
44095: MINUS
44096: LESS
44097: OR
44098: PUSH
44099: LD_VAR 0 8
44103: PUSH
44104: LD_INT 3
44106: ARRAY
44107: PUSH
44108: LD_INT 0
44110: PUSH
44111: LD_INT 8
44113: PUSH
44114: LD_INT 9
44116: PUSH
44117: LD_INT 10
44119: PUSH
44120: LD_INT 11
44122: PUSH
44123: LD_INT 12
44125: PUSH
44126: LD_INT 13
44128: PUSH
44129: LD_INT 16
44131: PUSH
44132: LD_INT 17
44134: PUSH
44135: LD_INT 18
44137: PUSH
44138: LD_INT 19
44140: PUSH
44141: LD_INT 20
44143: PUSH
44144: LD_INT 21
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: IN
44162: NOT
44163: OR
44164: PUSH
44165: LD_VAR 0 8
44169: PUSH
44170: LD_INT 5
44172: ARRAY
44173: NOT
44174: OR
44175: PUSH
44176: LD_VAR 0 8
44180: PUSH
44181: LD_INT 6
44183: ARRAY
44184: PUSH
44185: LD_INT 1
44187: PUSH
44188: LD_INT 2
44190: PUSH
44191: LD_INT 7
44193: PUSH
44194: LD_INT 9
44196: PUSH
44197: LD_INT 10
44199: PUSH
44200: LD_INT 11
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: IN
44211: NOT
44212: OR
44213: IFFALSE 44219
// exit ;
44215: POP
44216: POP
44217: GO 44302
// end ;
44219: GO 43890
44221: POP
44222: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44223: LD_VAR 0 9
44227: PPUSH
44228: LD_VAR 0 3
44232: PPUSH
44233: LD_VAR 0 4
44237: PPUSH
44238: LD_INT 20
44240: PPUSH
44241: CALL 36225 0 4
44245: PUSH
44246: LD_INT 4
44248: ARRAY
44249: IFFALSE 44253
// exit ;
44251: GO 44302
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44253: LD_VAR 0 2
44257: PUSH
44258: LD_INT 29
44260: PUSH
44261: LD_INT 30
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: IN
44268: PUSH
44269: LD_VAR 0 3
44273: PPUSH
44274: LD_VAR 0 4
44278: PPUSH
44279: LD_VAR 0 9
44283: PPUSH
44284: CALL_OW 440
44288: NOT
44289: AND
44290: IFFALSE 44294
// exit ;
44292: GO 44302
// result := true ;
44294: LD_ADDR_VAR 0 6
44298: PUSH
44299: LD_INT 1
44301: ST_TO_ADDR
// end ;
44302: LD_VAR 0 6
44306: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44307: LD_INT 0
44309: PPUSH
44310: PPUSH
44311: PPUSH
44312: PPUSH
44313: PPUSH
44314: PPUSH
44315: PPUSH
44316: PPUSH
44317: PPUSH
44318: PPUSH
44319: PPUSH
44320: PPUSH
44321: PPUSH
44322: PPUSH
44323: PPUSH
44324: PPUSH
44325: PPUSH
44326: PPUSH
44327: PPUSH
44328: PPUSH
44329: PPUSH
44330: PPUSH
44331: PPUSH
44332: PPUSH
44333: PPUSH
44334: PPUSH
44335: PPUSH
44336: PPUSH
44337: PPUSH
44338: PPUSH
44339: PPUSH
44340: PPUSH
44341: PPUSH
44342: PPUSH
44343: PPUSH
44344: PPUSH
44345: PPUSH
44346: PPUSH
44347: PPUSH
44348: PPUSH
44349: PPUSH
44350: PPUSH
44351: PPUSH
44352: PPUSH
44353: PPUSH
44354: PPUSH
44355: PPUSH
44356: PPUSH
44357: PPUSH
44358: PPUSH
44359: PPUSH
44360: PPUSH
44361: PPUSH
44362: PPUSH
44363: PPUSH
44364: PPUSH
44365: PPUSH
44366: PPUSH
// result = [ ] ;
44367: LD_ADDR_VAR 0 7
44371: PUSH
44372: EMPTY
44373: ST_TO_ADDR
// temp_list = [ ] ;
44374: LD_ADDR_VAR 0 9
44378: PUSH
44379: EMPTY
44380: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44381: LD_VAR 0 4
44385: PUSH
44386: LD_INT 0
44388: PUSH
44389: LD_INT 1
44391: PUSH
44392: LD_INT 2
44394: PUSH
44395: LD_INT 3
44397: PUSH
44398: LD_INT 4
44400: PUSH
44401: LD_INT 5
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: IN
44412: NOT
44413: PUSH
44414: LD_VAR 0 1
44418: PUSH
44419: LD_INT 0
44421: PUSH
44422: LD_INT 1
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: IN
44429: PUSH
44430: LD_VAR 0 5
44434: PUSH
44435: LD_INT 1
44437: PUSH
44438: LD_INT 2
44440: PUSH
44441: LD_INT 3
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: LIST
44448: IN
44449: NOT
44450: AND
44451: OR
44452: IFFALSE 44456
// exit ;
44454: GO 62847
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44456: LD_VAR 0 1
44460: PUSH
44461: LD_INT 6
44463: PUSH
44464: LD_INT 7
44466: PUSH
44467: LD_INT 8
44469: PUSH
44470: LD_INT 13
44472: PUSH
44473: LD_INT 12
44475: PUSH
44476: LD_INT 15
44478: PUSH
44479: LD_INT 11
44481: PUSH
44482: LD_INT 14
44484: PUSH
44485: LD_INT 10
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: IN
44499: IFFALSE 44509
// btype = b_lab ;
44501: LD_ADDR_VAR 0 1
44505: PUSH
44506: LD_INT 6
44508: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44509: LD_VAR 0 6
44513: PUSH
44514: LD_INT 0
44516: PUSH
44517: LD_INT 1
44519: PUSH
44520: LD_INT 2
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: LIST
44527: IN
44528: NOT
44529: PUSH
44530: LD_VAR 0 1
44534: PUSH
44535: LD_INT 0
44537: PUSH
44538: LD_INT 1
44540: PUSH
44541: LD_INT 2
44543: PUSH
44544: LD_INT 3
44546: PUSH
44547: LD_INT 6
44549: PUSH
44550: LD_INT 36
44552: PUSH
44553: LD_INT 4
44555: PUSH
44556: LD_INT 5
44558: PUSH
44559: LD_INT 31
44561: PUSH
44562: LD_INT 32
44564: PUSH
44565: LD_INT 33
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: IN
44581: NOT
44582: PUSH
44583: LD_VAR 0 6
44587: PUSH
44588: LD_INT 1
44590: EQUAL
44591: AND
44592: OR
44593: PUSH
44594: LD_VAR 0 1
44598: PUSH
44599: LD_INT 2
44601: PUSH
44602: LD_INT 3
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: IN
44609: NOT
44610: PUSH
44611: LD_VAR 0 6
44615: PUSH
44616: LD_INT 2
44618: EQUAL
44619: AND
44620: OR
44621: IFFALSE 44631
// mode = 0 ;
44623: LD_ADDR_VAR 0 6
44627: PUSH
44628: LD_INT 0
44630: ST_TO_ADDR
// case mode of 0 :
44631: LD_VAR 0 6
44635: PUSH
44636: LD_INT 0
44638: DOUBLE
44639: EQUAL
44640: IFTRUE 44644
44642: GO 56097
44644: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44645: LD_ADDR_VAR 0 11
44649: PUSH
44650: LD_INT 0
44652: PUSH
44653: LD_INT 0
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 0
44662: PUSH
44663: LD_INT 1
44665: NEG
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 1
44673: PUSH
44674: LD_INT 0
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 1
44683: PUSH
44684: LD_INT 1
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 0
44693: PUSH
44694: LD_INT 1
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 1
44703: NEG
44704: PUSH
44705: LD_INT 0
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 1
44714: NEG
44715: PUSH
44716: LD_INT 1
44718: NEG
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 1
44726: NEG
44727: PUSH
44728: LD_INT 2
44730: NEG
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 0
44738: PUSH
44739: LD_INT 2
44741: NEG
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 1
44749: PUSH
44750: LD_INT 1
44752: NEG
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 1
44760: PUSH
44761: LD_INT 2
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 0
44770: PUSH
44771: LD_INT 2
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 1
44780: NEG
44781: PUSH
44782: LD_INT 1
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 1
44791: PUSH
44792: LD_INT 3
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 0
44801: PUSH
44802: LD_INT 3
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 1
44811: NEG
44812: PUSH
44813: LD_INT 2
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44838: LD_ADDR_VAR 0 12
44842: PUSH
44843: LD_INT 0
44845: PUSH
44846: LD_INT 0
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 0
44855: PUSH
44856: LD_INT 1
44858: NEG
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 1
44866: PUSH
44867: LD_INT 0
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 1
44876: PUSH
44877: LD_INT 1
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 0
44886: PUSH
44887: LD_INT 1
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 1
44896: NEG
44897: PUSH
44898: LD_INT 0
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 1
44907: NEG
44908: PUSH
44909: LD_INT 1
44911: NEG
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 1
44919: PUSH
44920: LD_INT 1
44922: NEG
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 2
44930: PUSH
44931: LD_INT 0
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 2
44940: PUSH
44941: LD_INT 1
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 1
44950: NEG
44951: PUSH
44952: LD_INT 1
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 2
44961: NEG
44962: PUSH
44963: LD_INT 0
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 2
44972: NEG
44973: PUSH
44974: LD_INT 1
44976: NEG
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 2
44984: NEG
44985: PUSH
44986: LD_INT 1
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 3
44995: NEG
44996: PUSH
44997: LD_INT 0
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 3
45006: NEG
45007: PUSH
45008: LD_INT 1
45010: NEG
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45034: LD_ADDR_VAR 0 13
45038: PUSH
45039: LD_INT 0
45041: PUSH
45042: LD_INT 0
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 0
45051: PUSH
45052: LD_INT 1
45054: NEG
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 1
45062: PUSH
45063: LD_INT 0
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 1
45072: PUSH
45073: LD_INT 1
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 0
45082: PUSH
45083: LD_INT 1
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 1
45092: NEG
45093: PUSH
45094: LD_INT 0
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 1
45103: NEG
45104: PUSH
45105: LD_INT 1
45107: NEG
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 1
45115: NEG
45116: PUSH
45117: LD_INT 2
45119: NEG
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 2
45127: PUSH
45128: LD_INT 1
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 2
45137: PUSH
45138: LD_INT 2
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 1
45147: PUSH
45148: LD_INT 2
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 2
45157: NEG
45158: PUSH
45159: LD_INT 1
45161: NEG
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 2
45169: NEG
45170: PUSH
45171: LD_INT 2
45173: NEG
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 2
45181: NEG
45182: PUSH
45183: LD_INT 3
45185: NEG
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 3
45193: NEG
45194: PUSH
45195: LD_INT 2
45197: NEG
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 3
45205: NEG
45206: PUSH
45207: LD_INT 3
45209: NEG
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45233: LD_ADDR_VAR 0 14
45237: PUSH
45238: LD_INT 0
45240: PUSH
45241: LD_INT 0
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 0
45250: PUSH
45251: LD_INT 1
45253: NEG
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 1
45261: PUSH
45262: LD_INT 0
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 1
45271: PUSH
45272: LD_INT 1
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 0
45281: PUSH
45282: LD_INT 1
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 1
45291: NEG
45292: PUSH
45293: LD_INT 0
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 1
45302: NEG
45303: PUSH
45304: LD_INT 1
45306: NEG
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 1
45314: NEG
45315: PUSH
45316: LD_INT 2
45318: NEG
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 0
45326: PUSH
45327: LD_INT 2
45329: NEG
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 1
45337: PUSH
45338: LD_INT 1
45340: NEG
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 1
45348: PUSH
45349: LD_INT 2
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 0
45358: PUSH
45359: LD_INT 2
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 1
45368: NEG
45369: PUSH
45370: LD_INT 1
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 1
45379: NEG
45380: PUSH
45381: LD_INT 3
45383: NEG
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: LD_INT 3
45394: NEG
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 1
45402: PUSH
45403: LD_INT 2
45405: NEG
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45429: LD_ADDR_VAR 0 15
45433: PUSH
45434: LD_INT 0
45436: PUSH
45437: LD_INT 0
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: LD_INT 1
45449: NEG
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 1
45457: PUSH
45458: LD_INT 0
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 1
45467: PUSH
45468: LD_INT 1
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 0
45477: PUSH
45478: LD_INT 1
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 1
45487: NEG
45488: PUSH
45489: LD_INT 0
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 1
45498: NEG
45499: PUSH
45500: LD_INT 1
45502: NEG
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 1
45510: PUSH
45511: LD_INT 1
45513: NEG
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 2
45521: PUSH
45522: LD_INT 0
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 2
45531: PUSH
45532: LD_INT 1
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 1
45541: NEG
45542: PUSH
45543: LD_INT 1
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 2
45552: NEG
45553: PUSH
45554: LD_INT 0
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 2
45563: NEG
45564: PUSH
45565: LD_INT 1
45567: NEG
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 2
45575: PUSH
45576: LD_INT 1
45578: NEG
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 3
45586: PUSH
45587: LD_INT 0
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 3
45596: PUSH
45597: LD_INT 1
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45622: LD_ADDR_VAR 0 16
45626: PUSH
45627: LD_INT 0
45629: PUSH
45630: LD_INT 0
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 0
45639: PUSH
45640: LD_INT 1
45642: NEG
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 1
45650: PUSH
45651: LD_INT 0
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 1
45660: PUSH
45661: LD_INT 1
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 0
45670: PUSH
45671: LD_INT 1
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 1
45680: NEG
45681: PUSH
45682: LD_INT 0
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 1
45691: NEG
45692: PUSH
45693: LD_INT 1
45695: NEG
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 1
45703: NEG
45704: PUSH
45705: LD_INT 2
45707: NEG
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 2
45715: PUSH
45716: LD_INT 1
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 2
45725: PUSH
45726: LD_INT 2
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 1
45735: PUSH
45736: LD_INT 2
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 2
45745: NEG
45746: PUSH
45747: LD_INT 1
45749: NEG
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 2
45757: NEG
45758: PUSH
45759: LD_INT 2
45761: NEG
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 3
45769: PUSH
45770: LD_INT 2
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 3
45779: PUSH
45780: LD_INT 3
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 2
45789: PUSH
45790: LD_INT 3
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45815: LD_ADDR_VAR 0 17
45819: PUSH
45820: LD_INT 0
45822: PUSH
45823: LD_INT 0
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 0
45832: PUSH
45833: LD_INT 1
45835: NEG
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 1
45843: PUSH
45844: LD_INT 0
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 1
45853: PUSH
45854: LD_INT 1
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 0
45863: PUSH
45864: LD_INT 1
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 1
45873: NEG
45874: PUSH
45875: LD_INT 0
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 1
45884: NEG
45885: PUSH
45886: LD_INT 1
45888: NEG
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 1
45896: NEG
45897: PUSH
45898: LD_INT 2
45900: NEG
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 0
45908: PUSH
45909: LD_INT 2
45911: NEG
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 1
45919: PUSH
45920: LD_INT 1
45922: NEG
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 2
45930: PUSH
45931: LD_INT 0
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 2
45940: PUSH
45941: LD_INT 1
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 2
45950: PUSH
45951: LD_INT 2
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 1
45960: PUSH
45961: LD_INT 2
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 0
45970: PUSH
45971: LD_INT 2
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 1
45980: NEG
45981: PUSH
45982: LD_INT 1
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 2
45991: NEG
45992: PUSH
45993: LD_INT 0
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 2
46002: NEG
46003: PUSH
46004: LD_INT 1
46006: NEG
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 2
46014: NEG
46015: PUSH
46016: LD_INT 2
46018: NEG
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46045: LD_ADDR_VAR 0 18
46049: PUSH
46050: LD_INT 0
46052: PUSH
46053: LD_INT 0
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 0
46062: PUSH
46063: LD_INT 1
46065: NEG
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 1
46073: PUSH
46074: LD_INT 0
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 1
46083: PUSH
46084: LD_INT 1
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 0
46093: PUSH
46094: LD_INT 1
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 1
46103: NEG
46104: PUSH
46105: LD_INT 0
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 1
46114: NEG
46115: PUSH
46116: LD_INT 1
46118: NEG
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 1
46126: NEG
46127: PUSH
46128: LD_INT 2
46130: NEG
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 0
46138: PUSH
46139: LD_INT 2
46141: NEG
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 1
46149: PUSH
46150: LD_INT 1
46152: NEG
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 2
46160: PUSH
46161: LD_INT 0
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 2
46170: PUSH
46171: LD_INT 1
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 2
46180: PUSH
46181: LD_INT 2
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 1
46190: PUSH
46191: LD_INT 2
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 0
46200: PUSH
46201: LD_INT 2
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 1
46210: NEG
46211: PUSH
46212: LD_INT 1
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 2
46221: NEG
46222: PUSH
46223: LD_INT 0
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 2
46232: NEG
46233: PUSH
46234: LD_INT 1
46236: NEG
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 2
46244: NEG
46245: PUSH
46246: LD_INT 2
46248: NEG
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46275: LD_ADDR_VAR 0 19
46279: PUSH
46280: LD_INT 0
46282: PUSH
46283: LD_INT 0
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 0
46292: PUSH
46293: LD_INT 1
46295: NEG
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 1
46303: PUSH
46304: LD_INT 0
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 1
46313: PUSH
46314: LD_INT 1
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 0
46323: PUSH
46324: LD_INT 1
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 1
46333: NEG
46334: PUSH
46335: LD_INT 0
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 1
46344: NEG
46345: PUSH
46346: LD_INT 1
46348: NEG
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 1
46356: NEG
46357: PUSH
46358: LD_INT 2
46360: NEG
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 0
46368: PUSH
46369: LD_INT 2
46371: NEG
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 1
46379: PUSH
46380: LD_INT 1
46382: NEG
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 2
46390: PUSH
46391: LD_INT 0
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 2
46400: PUSH
46401: LD_INT 1
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 2
46410: PUSH
46411: LD_INT 2
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 1
46420: PUSH
46421: LD_INT 2
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: LD_INT 2
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 1
46440: NEG
46441: PUSH
46442: LD_INT 1
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 2
46451: NEG
46452: PUSH
46453: LD_INT 0
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 2
46462: NEG
46463: PUSH
46464: LD_INT 1
46466: NEG
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 2
46474: NEG
46475: PUSH
46476: LD_INT 2
46478: NEG
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46505: LD_ADDR_VAR 0 20
46509: PUSH
46510: LD_INT 0
46512: PUSH
46513: LD_INT 0
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 0
46522: PUSH
46523: LD_INT 1
46525: NEG
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 1
46533: PUSH
46534: LD_INT 0
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 1
46543: PUSH
46544: LD_INT 1
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 0
46553: PUSH
46554: LD_INT 1
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 1
46563: NEG
46564: PUSH
46565: LD_INT 0
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 1
46574: NEG
46575: PUSH
46576: LD_INT 1
46578: NEG
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 1
46586: NEG
46587: PUSH
46588: LD_INT 2
46590: NEG
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 0
46598: PUSH
46599: LD_INT 2
46601: NEG
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 1
46609: PUSH
46610: LD_INT 1
46612: NEG
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 2
46620: PUSH
46621: LD_INT 0
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 2
46630: PUSH
46631: LD_INT 1
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 2
46640: PUSH
46641: LD_INT 2
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 1
46650: PUSH
46651: LD_INT 2
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 0
46660: PUSH
46661: LD_INT 2
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 1
46670: NEG
46671: PUSH
46672: LD_INT 1
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 2
46681: NEG
46682: PUSH
46683: LD_INT 0
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 2
46692: NEG
46693: PUSH
46694: LD_INT 1
46696: NEG
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 2
46704: NEG
46705: PUSH
46706: LD_INT 2
46708: NEG
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46735: LD_ADDR_VAR 0 21
46739: PUSH
46740: LD_INT 0
46742: PUSH
46743: LD_INT 0
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 0
46752: PUSH
46753: LD_INT 1
46755: NEG
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 1
46763: PUSH
46764: LD_INT 0
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 1
46773: PUSH
46774: LD_INT 1
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 0
46783: PUSH
46784: LD_INT 1
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 1
46793: NEG
46794: PUSH
46795: LD_INT 0
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 1
46804: NEG
46805: PUSH
46806: LD_INT 1
46808: NEG
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 1
46816: NEG
46817: PUSH
46818: LD_INT 2
46820: NEG
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 0
46828: PUSH
46829: LD_INT 2
46831: NEG
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 1
46839: PUSH
46840: LD_INT 1
46842: NEG
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 2
46850: PUSH
46851: LD_INT 0
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 2
46860: PUSH
46861: LD_INT 1
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 2
46870: PUSH
46871: LD_INT 2
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 1
46880: PUSH
46881: LD_INT 2
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 0
46890: PUSH
46891: LD_INT 2
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 1
46900: NEG
46901: PUSH
46902: LD_INT 1
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 2
46911: NEG
46912: PUSH
46913: LD_INT 0
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 2
46922: NEG
46923: PUSH
46924: LD_INT 1
46926: NEG
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 2
46934: NEG
46935: PUSH
46936: LD_INT 2
46938: NEG
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46965: LD_ADDR_VAR 0 22
46969: PUSH
46970: LD_INT 0
46972: PUSH
46973: LD_INT 0
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 0
46982: PUSH
46983: LD_INT 1
46985: NEG
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 1
46993: PUSH
46994: LD_INT 0
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 1
47003: PUSH
47004: LD_INT 1
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 0
47013: PUSH
47014: LD_INT 1
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 1
47023: NEG
47024: PUSH
47025: LD_INT 0
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 1
47034: NEG
47035: PUSH
47036: LD_INT 1
47038: NEG
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 1
47046: NEG
47047: PUSH
47048: LD_INT 2
47050: NEG
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 0
47058: PUSH
47059: LD_INT 2
47061: NEG
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 1
47069: PUSH
47070: LD_INT 1
47072: NEG
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 2
47080: PUSH
47081: LD_INT 0
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 2
47090: PUSH
47091: LD_INT 1
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 2
47100: PUSH
47101: LD_INT 2
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 1
47110: PUSH
47111: LD_INT 2
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 0
47120: PUSH
47121: LD_INT 2
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 1
47130: NEG
47131: PUSH
47132: LD_INT 1
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 2
47141: NEG
47142: PUSH
47143: LD_INT 0
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 2
47152: NEG
47153: PUSH
47154: LD_INT 1
47156: NEG
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 2
47164: NEG
47165: PUSH
47166: LD_INT 2
47168: NEG
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47195: LD_ADDR_VAR 0 23
47199: PUSH
47200: LD_INT 0
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 0
47212: PUSH
47213: LD_INT 1
47215: NEG
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: LD_INT 0
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 1
47233: PUSH
47234: LD_INT 1
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 0
47243: PUSH
47244: LD_INT 1
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 1
47253: NEG
47254: PUSH
47255: LD_INT 0
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 1
47264: NEG
47265: PUSH
47266: LD_INT 1
47268: NEG
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 1
47276: NEG
47277: PUSH
47278: LD_INT 2
47280: NEG
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: LD_INT 2
47291: NEG
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 1
47299: PUSH
47300: LD_INT 1
47302: NEG
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 2
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 2
47320: PUSH
47321: LD_INT 1
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 2
47330: PUSH
47331: LD_INT 2
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 1
47340: PUSH
47341: LD_INT 2
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 0
47350: PUSH
47351: LD_INT 2
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 1
47360: NEG
47361: PUSH
47362: LD_INT 1
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 2
47371: NEG
47372: PUSH
47373: LD_INT 0
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 2
47382: NEG
47383: PUSH
47384: LD_INT 1
47386: NEG
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 2
47394: NEG
47395: PUSH
47396: LD_INT 2
47398: NEG
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 2
47406: NEG
47407: PUSH
47408: LD_INT 3
47410: NEG
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 1
47418: NEG
47419: PUSH
47420: LD_INT 3
47422: NEG
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 1
47430: PUSH
47431: LD_INT 2
47433: NEG
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 2
47441: PUSH
47442: LD_INT 1
47444: NEG
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47475: LD_ADDR_VAR 0 24
47479: PUSH
47480: LD_INT 0
47482: PUSH
47483: LD_INT 0
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 0
47492: PUSH
47493: LD_INT 1
47495: NEG
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 1
47503: PUSH
47504: LD_INT 0
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 1
47513: PUSH
47514: LD_INT 1
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 0
47523: PUSH
47524: LD_INT 1
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 1
47533: NEG
47534: PUSH
47535: LD_INT 0
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 1
47544: NEG
47545: PUSH
47546: LD_INT 1
47548: NEG
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: LD_INT 2
47560: NEG
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 0
47568: PUSH
47569: LD_INT 2
47571: NEG
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 1
47579: PUSH
47580: LD_INT 1
47582: NEG
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 2
47590: PUSH
47591: LD_INT 0
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 2
47600: PUSH
47601: LD_INT 1
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 2
47610: PUSH
47611: LD_INT 2
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 1
47620: PUSH
47621: LD_INT 2
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 0
47630: PUSH
47631: LD_INT 2
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 1
47640: NEG
47641: PUSH
47642: LD_INT 1
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 2
47651: NEG
47652: PUSH
47653: LD_INT 0
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 2
47662: NEG
47663: PUSH
47664: LD_INT 1
47666: NEG
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 2
47674: NEG
47675: PUSH
47676: LD_INT 2
47678: NEG
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 1
47686: PUSH
47687: LD_INT 2
47689: NEG
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 2
47697: PUSH
47698: LD_INT 1
47700: NEG
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 3
47708: PUSH
47709: LD_INT 1
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 3
47718: PUSH
47719: LD_INT 2
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47751: LD_ADDR_VAR 0 25
47755: PUSH
47756: LD_INT 0
47758: PUSH
47759: LD_INT 0
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 0
47768: PUSH
47769: LD_INT 1
47771: NEG
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 1
47779: PUSH
47780: LD_INT 0
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 1
47789: PUSH
47790: LD_INT 1
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 0
47799: PUSH
47800: LD_INT 1
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 1
47809: NEG
47810: PUSH
47811: LD_INT 0
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 1
47820: NEG
47821: PUSH
47822: LD_INT 1
47824: NEG
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 1
47832: NEG
47833: PUSH
47834: LD_INT 2
47836: NEG
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 0
47844: PUSH
47845: LD_INT 2
47847: NEG
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 1
47855: PUSH
47856: LD_INT 1
47858: NEG
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 2
47866: PUSH
47867: LD_INT 0
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 2
47876: PUSH
47877: LD_INT 1
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 2
47886: PUSH
47887: LD_INT 2
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 1
47896: PUSH
47897: LD_INT 2
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 0
47906: PUSH
47907: LD_INT 2
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 1
47916: NEG
47917: PUSH
47918: LD_INT 1
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 2
47927: NEG
47928: PUSH
47929: LD_INT 0
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 2
47938: NEG
47939: PUSH
47940: LD_INT 1
47942: NEG
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 2
47950: NEG
47951: PUSH
47952: LD_INT 2
47954: NEG
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 3
47962: PUSH
47963: LD_INT 1
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 3
47972: PUSH
47973: LD_INT 2
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 2
47982: PUSH
47983: LD_INT 3
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 1
47992: PUSH
47993: LD_INT 3
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48025: LD_ADDR_VAR 0 26
48029: PUSH
48030: LD_INT 0
48032: PUSH
48033: LD_INT 0
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 0
48042: PUSH
48043: LD_INT 1
48045: NEG
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 1
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 1
48063: PUSH
48064: LD_INT 1
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 0
48073: PUSH
48074: LD_INT 1
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 1
48083: NEG
48084: PUSH
48085: LD_INT 0
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 1
48094: NEG
48095: PUSH
48096: LD_INT 1
48098: NEG
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 1
48106: NEG
48107: PUSH
48108: LD_INT 2
48110: NEG
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 0
48118: PUSH
48119: LD_INT 2
48121: NEG
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 1
48129: PUSH
48130: LD_INT 1
48132: NEG
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 2
48140: PUSH
48141: LD_INT 0
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 2
48150: PUSH
48151: LD_INT 1
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 2
48160: PUSH
48161: LD_INT 2
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 1
48170: PUSH
48171: LD_INT 2
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 0
48180: PUSH
48181: LD_INT 2
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 1
48190: NEG
48191: PUSH
48192: LD_INT 1
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 2
48201: NEG
48202: PUSH
48203: LD_INT 0
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 2
48212: NEG
48213: PUSH
48214: LD_INT 1
48216: NEG
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 2
48224: NEG
48225: PUSH
48226: LD_INT 2
48228: NEG
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 2
48236: PUSH
48237: LD_INT 3
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 1
48246: PUSH
48247: LD_INT 3
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 1
48256: NEG
48257: PUSH
48258: LD_INT 2
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 2
48267: NEG
48268: PUSH
48269: LD_INT 1
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48301: LD_ADDR_VAR 0 27
48305: PUSH
48306: LD_INT 0
48308: PUSH
48309: LD_INT 0
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 0
48318: PUSH
48319: LD_INT 1
48321: NEG
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 1
48329: PUSH
48330: LD_INT 0
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 1
48339: PUSH
48340: LD_INT 1
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 0
48349: PUSH
48350: LD_INT 1
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 1
48359: NEG
48360: PUSH
48361: LD_INT 0
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 1
48370: NEG
48371: PUSH
48372: LD_INT 1
48374: NEG
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 1
48382: NEG
48383: PUSH
48384: LD_INT 2
48386: NEG
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 0
48394: PUSH
48395: LD_INT 2
48397: NEG
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 1
48405: PUSH
48406: LD_INT 1
48408: NEG
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 2
48416: PUSH
48417: LD_INT 0
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 2
48426: PUSH
48427: LD_INT 1
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 2
48436: PUSH
48437: LD_INT 2
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 1
48446: PUSH
48447: LD_INT 2
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 0
48456: PUSH
48457: LD_INT 2
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 1
48466: NEG
48467: PUSH
48468: LD_INT 1
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 2
48477: NEG
48478: PUSH
48479: LD_INT 0
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 2
48488: NEG
48489: PUSH
48490: LD_INT 1
48492: NEG
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 2
48500: NEG
48501: PUSH
48502: LD_INT 2
48504: NEG
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 1
48512: NEG
48513: PUSH
48514: LD_INT 2
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 2
48523: NEG
48524: PUSH
48525: LD_INT 1
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 3
48534: NEG
48535: PUSH
48536: LD_INT 1
48538: NEG
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 3
48546: NEG
48547: PUSH
48548: LD_INT 2
48550: NEG
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48581: LD_ADDR_VAR 0 28
48585: PUSH
48586: LD_INT 0
48588: PUSH
48589: LD_INT 0
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 0
48598: PUSH
48599: LD_INT 1
48601: NEG
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 1
48609: PUSH
48610: LD_INT 0
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 1
48619: PUSH
48620: LD_INT 1
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 0
48629: PUSH
48630: LD_INT 1
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 1
48639: NEG
48640: PUSH
48641: LD_INT 0
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 1
48650: NEG
48651: PUSH
48652: LD_INT 1
48654: NEG
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 1
48662: NEG
48663: PUSH
48664: LD_INT 2
48666: NEG
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 0
48674: PUSH
48675: LD_INT 2
48677: NEG
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 1
48685: PUSH
48686: LD_INT 1
48688: NEG
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 2
48696: PUSH
48697: LD_INT 0
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 2
48706: PUSH
48707: LD_INT 1
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 2
48716: PUSH
48717: LD_INT 2
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 1
48726: PUSH
48727: LD_INT 2
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 0
48736: PUSH
48737: LD_INT 2
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 1
48746: NEG
48747: PUSH
48748: LD_INT 1
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 2
48757: NEG
48758: PUSH
48759: LD_INT 0
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 2
48768: NEG
48769: PUSH
48770: LD_INT 1
48772: NEG
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 2
48780: NEG
48781: PUSH
48782: LD_INT 2
48784: NEG
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 2
48792: NEG
48793: PUSH
48794: LD_INT 3
48796: NEG
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 1
48804: NEG
48805: PUSH
48806: LD_INT 3
48808: NEG
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 3
48816: NEG
48817: PUSH
48818: LD_INT 1
48820: NEG
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 3
48828: NEG
48829: PUSH
48830: LD_INT 2
48832: NEG
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48863: LD_ADDR_VAR 0 29
48867: PUSH
48868: LD_INT 0
48870: PUSH
48871: LD_INT 0
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 0
48880: PUSH
48881: LD_INT 1
48883: NEG
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 1
48891: PUSH
48892: LD_INT 0
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 1
48901: PUSH
48902: LD_INT 1
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 0
48911: PUSH
48912: LD_INT 1
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 1
48921: NEG
48922: PUSH
48923: LD_INT 0
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 1
48932: NEG
48933: PUSH
48934: LD_INT 1
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 1
48944: NEG
48945: PUSH
48946: LD_INT 2
48948: NEG
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 0
48956: PUSH
48957: LD_INT 2
48959: NEG
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 1
48967: PUSH
48968: LD_INT 1
48970: NEG
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 2
48978: PUSH
48979: LD_INT 0
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 2
48988: PUSH
48989: LD_INT 1
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 1
48998: PUSH
48999: LD_INT 2
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 0
49008: PUSH
49009: LD_INT 2
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 1
49018: NEG
49019: PUSH
49020: LD_INT 1
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 2
49029: NEG
49030: PUSH
49031: LD_INT 1
49033: NEG
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 2
49041: NEG
49042: PUSH
49043: LD_INT 2
49045: NEG
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 2
49053: NEG
49054: PUSH
49055: LD_INT 3
49057: NEG
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 2
49065: PUSH
49066: LD_INT 1
49068: NEG
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 3
49076: PUSH
49077: LD_INT 1
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 1
49086: PUSH
49087: LD_INT 3
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 1
49096: NEG
49097: PUSH
49098: LD_INT 2
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 3
49107: NEG
49108: PUSH
49109: LD_INT 2
49111: NEG
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49142: LD_ADDR_VAR 0 30
49146: PUSH
49147: LD_INT 0
49149: PUSH
49150: LD_INT 0
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 0
49159: PUSH
49160: LD_INT 1
49162: NEG
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 1
49170: PUSH
49171: LD_INT 0
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 1
49180: PUSH
49181: LD_INT 1
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 0
49190: PUSH
49191: LD_INT 1
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 1
49200: NEG
49201: PUSH
49202: LD_INT 0
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 1
49211: NEG
49212: PUSH
49213: LD_INT 1
49215: NEG
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 1
49223: NEG
49224: PUSH
49225: LD_INT 2
49227: NEG
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 0
49235: PUSH
49236: LD_INT 2
49238: NEG
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 1
49246: PUSH
49247: LD_INT 1
49249: NEG
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 2
49257: PUSH
49258: LD_INT 0
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 2
49267: PUSH
49268: LD_INT 1
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 2
49277: PUSH
49278: LD_INT 2
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 1
49287: PUSH
49288: LD_INT 2
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 1
49297: NEG
49298: PUSH
49299: LD_INT 1
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 2
49308: NEG
49309: PUSH
49310: LD_INT 0
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 2
49319: NEG
49320: PUSH
49321: LD_INT 1
49323: NEG
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 1
49331: NEG
49332: PUSH
49333: LD_INT 3
49335: NEG
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 1
49343: PUSH
49344: LD_INT 2
49346: NEG
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 3
49354: PUSH
49355: LD_INT 2
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 2
49364: PUSH
49365: LD_INT 3
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 2
49374: NEG
49375: PUSH
49376: LD_INT 1
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 3
49385: NEG
49386: PUSH
49387: LD_INT 1
49389: NEG
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49420: LD_ADDR_VAR 0 31
49424: PUSH
49425: LD_INT 0
49427: PUSH
49428: LD_INT 0
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 0
49437: PUSH
49438: LD_INT 1
49440: NEG
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 1
49448: PUSH
49449: LD_INT 0
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 1
49458: PUSH
49459: LD_INT 1
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 0
49468: PUSH
49469: LD_INT 1
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 1
49478: NEG
49479: PUSH
49480: LD_INT 0
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 1
49489: NEG
49490: PUSH
49491: LD_INT 1
49493: NEG
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 1
49501: NEG
49502: PUSH
49503: LD_INT 2
49505: NEG
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 1
49513: PUSH
49514: LD_INT 1
49516: NEG
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 2
49524: PUSH
49525: LD_INT 0
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 2
49534: PUSH
49535: LD_INT 1
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 2
49544: PUSH
49545: LD_INT 2
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 1
49554: PUSH
49555: LD_INT 2
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 0
49564: PUSH
49565: LD_INT 2
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 1
49574: NEG
49575: PUSH
49576: LD_INT 1
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 2
49585: NEG
49586: PUSH
49587: LD_INT 1
49589: NEG
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 2
49597: NEG
49598: PUSH
49599: LD_INT 2
49601: NEG
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 2
49609: NEG
49610: PUSH
49611: LD_INT 3
49613: NEG
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 2
49621: PUSH
49622: LD_INT 1
49624: NEG
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 3
49632: PUSH
49633: LD_INT 1
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 1
49642: PUSH
49643: LD_INT 3
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 1
49652: NEG
49653: PUSH
49654: LD_INT 2
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 3
49663: NEG
49664: PUSH
49665: LD_INT 2
49667: NEG
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49698: LD_ADDR_VAR 0 32
49702: PUSH
49703: LD_INT 0
49705: PUSH
49706: LD_INT 0
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 0
49715: PUSH
49716: LD_INT 1
49718: NEG
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 1
49726: PUSH
49727: LD_INT 0
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 1
49736: PUSH
49737: LD_INT 1
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 0
49746: PUSH
49747: LD_INT 1
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 1
49756: NEG
49757: PUSH
49758: LD_INT 0
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 1
49767: NEG
49768: PUSH
49769: LD_INT 1
49771: NEG
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 1
49779: NEG
49780: PUSH
49781: LD_INT 2
49783: NEG
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 0
49791: PUSH
49792: LD_INT 2
49794: NEG
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 1
49802: PUSH
49803: LD_INT 1
49805: NEG
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 2
49813: PUSH
49814: LD_INT 1
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 2
49823: PUSH
49824: LD_INT 2
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 1
49833: PUSH
49834: LD_INT 2
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 0
49843: PUSH
49844: LD_INT 2
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 1
49853: NEG
49854: PUSH
49855: LD_INT 1
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 2
49864: NEG
49865: PUSH
49866: LD_INT 0
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 2
49875: NEG
49876: PUSH
49877: LD_INT 1
49879: NEG
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 1
49887: NEG
49888: PUSH
49889: LD_INT 3
49891: NEG
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 1
49899: PUSH
49900: LD_INT 2
49902: NEG
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 3
49910: PUSH
49911: LD_INT 2
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 2
49920: PUSH
49921: LD_INT 3
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 2
49930: NEG
49931: PUSH
49932: LD_INT 1
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 3
49941: NEG
49942: PUSH
49943: LD_INT 1
49945: NEG
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49976: LD_ADDR_VAR 0 33
49980: PUSH
49981: LD_INT 0
49983: PUSH
49984: LD_INT 0
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 0
49993: PUSH
49994: LD_INT 1
49996: NEG
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 1
50004: PUSH
50005: LD_INT 0
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 1
50014: PUSH
50015: LD_INT 1
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 0
50024: PUSH
50025: LD_INT 1
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 1
50034: NEG
50035: PUSH
50036: LD_INT 0
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 1
50045: NEG
50046: PUSH
50047: LD_INT 1
50049: NEG
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 1
50057: NEG
50058: PUSH
50059: LD_INT 2
50061: NEG
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 1
50069: PUSH
50070: LD_INT 1
50072: NEG
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 2
50080: PUSH
50081: LD_INT 0
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 2
50090: PUSH
50091: LD_INT 1
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 1
50100: PUSH
50101: LD_INT 2
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 0
50110: PUSH
50111: LD_INT 2
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 1
50120: NEG
50121: PUSH
50122: LD_INT 1
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 2
50131: NEG
50132: PUSH
50133: LD_INT 0
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 2
50142: NEG
50143: PUSH
50144: LD_INT 1
50146: NEG
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 2
50154: NEG
50155: PUSH
50156: LD_INT 2
50158: NEG
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 2
50166: NEG
50167: PUSH
50168: LD_INT 3
50170: NEG
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 2
50178: PUSH
50179: LD_INT 1
50181: NEG
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 3
50189: PUSH
50190: LD_INT 1
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 1
50199: PUSH
50200: LD_INT 3
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 1
50209: NEG
50210: PUSH
50211: LD_INT 2
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 3
50220: NEG
50221: PUSH
50222: LD_INT 2
50224: NEG
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50255: LD_ADDR_VAR 0 34
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: LD_INT 0
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 0
50272: PUSH
50273: LD_INT 1
50275: NEG
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 1
50283: PUSH
50284: LD_INT 0
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 1
50293: PUSH
50294: LD_INT 1
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 0
50303: PUSH
50304: LD_INT 1
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 1
50313: NEG
50314: PUSH
50315: LD_INT 0
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 1
50324: NEG
50325: PUSH
50326: LD_INT 1
50328: NEG
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 1
50336: NEG
50337: PUSH
50338: LD_INT 2
50340: NEG
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 0
50348: PUSH
50349: LD_INT 2
50351: NEG
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 1
50359: PUSH
50360: LD_INT 1
50362: NEG
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 2
50370: PUSH
50371: LD_INT 1
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 2
50380: PUSH
50381: LD_INT 2
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 1
50390: PUSH
50391: LD_INT 2
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 1
50400: NEG
50401: PUSH
50402: LD_INT 1
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 2
50411: NEG
50412: PUSH
50413: LD_INT 0
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 2
50422: NEG
50423: PUSH
50424: LD_INT 1
50426: NEG
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 2
50434: NEG
50435: PUSH
50436: LD_INT 2
50438: NEG
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 1
50446: NEG
50447: PUSH
50448: LD_INT 3
50450: NEG
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 1
50458: PUSH
50459: LD_INT 2
50461: NEG
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 3
50469: PUSH
50470: LD_INT 2
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 2
50479: PUSH
50480: LD_INT 3
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 2
50489: NEG
50490: PUSH
50491: LD_INT 1
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 3
50500: NEG
50501: PUSH
50502: LD_INT 1
50504: NEG
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50535: LD_ADDR_VAR 0 35
50539: PUSH
50540: LD_INT 0
50542: PUSH
50543: LD_INT 0
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 0
50552: PUSH
50553: LD_INT 1
50555: NEG
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 1
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 1
50573: PUSH
50574: LD_INT 1
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 0
50583: PUSH
50584: LD_INT 1
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 1
50593: NEG
50594: PUSH
50595: LD_INT 0
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 1
50604: NEG
50605: PUSH
50606: LD_INT 1
50608: NEG
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 2
50616: PUSH
50617: LD_INT 1
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 2
50626: NEG
50627: PUSH
50628: LD_INT 1
50630: NEG
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50647: LD_ADDR_VAR 0 36
50651: PUSH
50652: LD_INT 0
50654: PUSH
50655: LD_INT 0
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 0
50664: PUSH
50665: LD_INT 1
50667: NEG
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 1
50675: PUSH
50676: LD_INT 0
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 1
50685: PUSH
50686: LD_INT 1
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 0
50695: PUSH
50696: LD_INT 1
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 1
50705: NEG
50706: PUSH
50707: LD_INT 0
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 1
50716: NEG
50717: PUSH
50718: LD_INT 1
50720: NEG
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 1
50728: NEG
50729: PUSH
50730: LD_INT 2
50732: NEG
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 1
50740: PUSH
50741: LD_INT 2
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50759: LD_ADDR_VAR 0 37
50763: PUSH
50764: LD_INT 0
50766: PUSH
50767: LD_INT 0
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 0
50776: PUSH
50777: LD_INT 1
50779: NEG
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 1
50787: PUSH
50788: LD_INT 0
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 1
50797: PUSH
50798: LD_INT 1
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 0
50807: PUSH
50808: LD_INT 1
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 1
50817: NEG
50818: PUSH
50819: LD_INT 0
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 1
50828: NEG
50829: PUSH
50830: LD_INT 1
50832: NEG
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 1
50840: PUSH
50841: LD_INT 1
50843: NEG
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 1
50851: NEG
50852: PUSH
50853: LD_INT 1
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50871: LD_ADDR_VAR 0 38
50875: PUSH
50876: LD_INT 0
50878: PUSH
50879: LD_INT 0
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 0
50888: PUSH
50889: LD_INT 1
50891: NEG
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 1
50899: PUSH
50900: LD_INT 0
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 1
50909: PUSH
50910: LD_INT 1
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 0
50919: PUSH
50920: LD_INT 1
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 1
50929: NEG
50930: PUSH
50931: LD_INT 0
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 1
50940: NEG
50941: PUSH
50942: LD_INT 1
50944: NEG
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 2
50952: PUSH
50953: LD_INT 1
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 2
50962: NEG
50963: PUSH
50964: LD_INT 1
50966: NEG
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50983: LD_ADDR_VAR 0 39
50987: PUSH
50988: LD_INT 0
50990: PUSH
50991: LD_INT 0
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 0
51000: PUSH
51001: LD_INT 1
51003: NEG
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 1
51011: PUSH
51012: LD_INT 0
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 1
51021: PUSH
51022: LD_INT 1
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 0
51031: PUSH
51032: LD_INT 1
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 1
51041: NEG
51042: PUSH
51043: LD_INT 0
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 1
51052: NEG
51053: PUSH
51054: LD_INT 1
51056: NEG
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 1
51064: NEG
51065: PUSH
51066: LD_INT 2
51068: NEG
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 1
51076: PUSH
51077: LD_INT 2
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51095: LD_ADDR_VAR 0 40
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: LD_INT 0
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 0
51112: PUSH
51113: LD_INT 1
51115: NEG
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 1
51123: PUSH
51124: LD_INT 0
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 1
51133: PUSH
51134: LD_INT 1
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 0
51143: PUSH
51144: LD_INT 1
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 1
51153: NEG
51154: PUSH
51155: LD_INT 0
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 1
51164: NEG
51165: PUSH
51166: LD_INT 1
51168: NEG
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 1
51176: PUSH
51177: LD_INT 1
51179: NEG
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 1
51187: NEG
51188: PUSH
51189: LD_INT 1
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51207: LD_ADDR_VAR 0 41
51211: PUSH
51212: LD_INT 0
51214: PUSH
51215: LD_INT 0
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 0
51224: PUSH
51225: LD_INT 1
51227: NEG
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 1
51235: PUSH
51236: LD_INT 0
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 1
51245: PUSH
51246: LD_INT 1
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 0
51255: PUSH
51256: LD_INT 1
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 1
51265: NEG
51266: PUSH
51267: LD_INT 0
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 1
51276: NEG
51277: PUSH
51278: LD_INT 1
51280: NEG
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 1
51288: NEG
51289: PUSH
51290: LD_INT 2
51292: NEG
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 1
51300: PUSH
51301: LD_INT 1
51303: NEG
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 2
51311: PUSH
51312: LD_INT 0
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 2
51321: PUSH
51322: LD_INT 1
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 2
51331: PUSH
51332: LD_INT 2
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 1
51341: PUSH
51342: LD_INT 2
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 1
51351: NEG
51352: PUSH
51353: LD_INT 1
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 2
51362: NEG
51363: PUSH
51364: LD_INT 0
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 2
51373: NEG
51374: PUSH
51375: LD_INT 1
51377: NEG
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 2
51385: NEG
51386: PUSH
51387: LD_INT 2
51389: NEG
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 2
51397: NEG
51398: PUSH
51399: LD_INT 3
51401: NEG
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 2
51409: PUSH
51410: LD_INT 1
51412: NEG
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 3
51420: PUSH
51421: LD_INT 0
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 3
51430: PUSH
51431: LD_INT 1
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 3
51440: PUSH
51441: LD_INT 2
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 3
51450: PUSH
51451: LD_INT 3
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 2
51460: PUSH
51461: LD_INT 3
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 2
51470: NEG
51471: PUSH
51472: LD_INT 1
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 3
51481: NEG
51482: PUSH
51483: LD_INT 0
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 3
51492: NEG
51493: PUSH
51494: LD_INT 1
51496: NEG
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 3
51504: NEG
51505: PUSH
51506: LD_INT 2
51508: NEG
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 3
51516: NEG
51517: PUSH
51518: LD_INT 3
51520: NEG
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51557: LD_ADDR_VAR 0 42
51561: PUSH
51562: LD_INT 0
51564: PUSH
51565: LD_INT 0
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 0
51574: PUSH
51575: LD_INT 1
51577: NEG
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 1
51585: PUSH
51586: LD_INT 0
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 1
51595: PUSH
51596: LD_INT 1
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 0
51605: PUSH
51606: LD_INT 1
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 1
51615: NEG
51616: PUSH
51617: LD_INT 0
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 1
51626: NEG
51627: PUSH
51628: LD_INT 1
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 1
51638: NEG
51639: PUSH
51640: LD_INT 2
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: LD_INT 2
51653: NEG
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 1
51661: PUSH
51662: LD_INT 1
51664: NEG
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 2
51672: PUSH
51673: LD_INT 1
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 2
51682: PUSH
51683: LD_INT 2
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 1
51692: PUSH
51693: LD_INT 2
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 0
51702: PUSH
51703: LD_INT 2
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 1
51712: NEG
51713: PUSH
51714: LD_INT 1
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 2
51723: NEG
51724: PUSH
51725: LD_INT 1
51727: NEG
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 2
51735: NEG
51736: PUSH
51737: LD_INT 2
51739: NEG
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 2
51747: NEG
51748: PUSH
51749: LD_INT 3
51751: NEG
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 1
51759: NEG
51760: PUSH
51761: LD_INT 3
51763: NEG
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 0
51771: PUSH
51772: LD_INT 3
51774: NEG
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 1
51782: PUSH
51783: LD_INT 2
51785: NEG
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 3
51793: PUSH
51794: LD_INT 2
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 3
51803: PUSH
51804: LD_INT 3
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 2
51813: PUSH
51814: LD_INT 3
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 1
51823: PUSH
51824: LD_INT 3
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 0
51833: PUSH
51834: LD_INT 3
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 1
51843: NEG
51844: PUSH
51845: LD_INT 2
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 3
51854: NEG
51855: PUSH
51856: LD_INT 2
51858: NEG
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 3
51866: NEG
51867: PUSH
51868: LD_INT 3
51870: NEG
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51907: LD_ADDR_VAR 0 43
51911: PUSH
51912: LD_INT 0
51914: PUSH
51915: LD_INT 0
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 0
51924: PUSH
51925: LD_INT 1
51927: NEG
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 1
51935: PUSH
51936: LD_INT 0
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 1
51945: PUSH
51946: LD_INT 1
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 0
51955: PUSH
51956: LD_INT 1
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 1
51965: NEG
51966: PUSH
51967: LD_INT 0
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 1
51976: NEG
51977: PUSH
51978: LD_INT 1
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 1
51988: NEG
51989: PUSH
51990: LD_INT 2
51992: NEG
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 0
52000: PUSH
52001: LD_INT 2
52003: NEG
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 1
52011: PUSH
52012: LD_INT 1
52014: NEG
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 2
52022: PUSH
52023: LD_INT 0
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 2
52032: PUSH
52033: LD_INT 1
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 1
52042: PUSH
52043: LD_INT 2
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 0
52052: PUSH
52053: LD_INT 2
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 1
52062: NEG
52063: PUSH
52064: LD_INT 1
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 2
52073: NEG
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 2
52084: NEG
52085: PUSH
52086: LD_INT 1
52088: NEG
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 1
52096: NEG
52097: PUSH
52098: LD_INT 3
52100: NEG
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 0
52108: PUSH
52109: LD_INT 3
52111: NEG
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 1
52119: PUSH
52120: LD_INT 2
52122: NEG
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 2
52130: PUSH
52131: LD_INT 1
52133: NEG
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 3
52141: PUSH
52142: LD_INT 0
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 3
52151: PUSH
52152: LD_INT 1
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 1
52161: PUSH
52162: LD_INT 3
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 0
52171: PUSH
52172: LD_INT 3
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 1
52181: NEG
52182: PUSH
52183: LD_INT 2
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 2
52192: NEG
52193: PUSH
52194: LD_INT 1
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 3
52203: NEG
52204: PUSH
52205: LD_INT 0
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 3
52214: NEG
52215: PUSH
52216: LD_INT 1
52218: NEG
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52255: LD_ADDR_VAR 0 44
52259: PUSH
52260: LD_INT 0
52262: PUSH
52263: LD_INT 0
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 0
52272: PUSH
52273: LD_INT 1
52275: NEG
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 1
52283: PUSH
52284: LD_INT 0
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 1
52293: PUSH
52294: LD_INT 1
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 0
52303: PUSH
52304: LD_INT 1
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 1
52313: NEG
52314: PUSH
52315: LD_INT 0
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 1
52324: NEG
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 1
52336: NEG
52337: PUSH
52338: LD_INT 2
52340: NEG
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 1
52348: PUSH
52349: LD_INT 1
52351: NEG
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 2
52359: PUSH
52360: LD_INT 0
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 2
52369: PUSH
52370: LD_INT 1
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 2
52379: PUSH
52380: LD_INT 2
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 1
52389: PUSH
52390: LD_INT 2
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 1
52399: NEG
52400: PUSH
52401: LD_INT 1
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 2
52410: NEG
52411: PUSH
52412: LD_INT 0
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 2
52421: NEG
52422: PUSH
52423: LD_INT 1
52425: NEG
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 2
52433: NEG
52434: PUSH
52435: LD_INT 2
52437: NEG
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 2
52445: NEG
52446: PUSH
52447: LD_INT 3
52449: NEG
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 2
52457: PUSH
52458: LD_INT 1
52460: NEG
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 3
52468: PUSH
52469: LD_INT 0
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 3
52478: PUSH
52479: LD_INT 1
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 3
52488: PUSH
52489: LD_INT 2
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 3
52498: PUSH
52499: LD_INT 3
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 2
52508: PUSH
52509: LD_INT 3
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 2
52518: NEG
52519: PUSH
52520: LD_INT 1
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 3
52529: NEG
52530: PUSH
52531: LD_INT 0
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 3
52540: NEG
52541: PUSH
52542: LD_INT 1
52544: NEG
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 3
52552: NEG
52553: PUSH
52554: LD_INT 2
52556: NEG
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 3
52564: NEG
52565: PUSH
52566: LD_INT 3
52568: NEG
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52605: LD_ADDR_VAR 0 45
52609: PUSH
52610: LD_INT 0
52612: PUSH
52613: LD_INT 0
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: LD_INT 1
52625: NEG
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 1
52633: PUSH
52634: LD_INT 0
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 1
52643: PUSH
52644: LD_INT 1
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 0
52653: PUSH
52654: LD_INT 1
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 1
52663: NEG
52664: PUSH
52665: LD_INT 0
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 1
52674: NEG
52675: PUSH
52676: LD_INT 1
52678: NEG
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 1
52686: NEG
52687: PUSH
52688: LD_INT 2
52690: NEG
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 0
52698: PUSH
52699: LD_INT 2
52701: NEG
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 1
52709: PUSH
52710: LD_INT 1
52712: NEG
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 2
52720: PUSH
52721: LD_INT 1
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 2
52730: PUSH
52731: LD_INT 2
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 1
52740: PUSH
52741: LD_INT 2
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 0
52750: PUSH
52751: LD_INT 2
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 1
52760: NEG
52761: PUSH
52762: LD_INT 1
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 2
52771: NEG
52772: PUSH
52773: LD_INT 1
52775: NEG
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 2
52783: NEG
52784: PUSH
52785: LD_INT 2
52787: NEG
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 2
52795: NEG
52796: PUSH
52797: LD_INT 3
52799: NEG
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 1
52807: NEG
52808: PUSH
52809: LD_INT 3
52811: NEG
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 0
52819: PUSH
52820: LD_INT 3
52822: NEG
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 1
52830: PUSH
52831: LD_INT 2
52833: NEG
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 3
52841: PUSH
52842: LD_INT 2
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 3
52851: PUSH
52852: LD_INT 3
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 2
52861: PUSH
52862: LD_INT 3
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 1
52871: PUSH
52872: LD_INT 3
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 0
52881: PUSH
52882: LD_INT 3
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 1
52891: NEG
52892: PUSH
52893: LD_INT 2
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 3
52902: NEG
52903: PUSH
52904: LD_INT 2
52906: NEG
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 3
52914: NEG
52915: PUSH
52916: LD_INT 3
52918: NEG
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52955: LD_ADDR_VAR 0 46
52959: PUSH
52960: LD_INT 0
52962: PUSH
52963: LD_INT 0
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 0
52972: PUSH
52973: LD_INT 1
52975: NEG
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 1
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 1
52993: PUSH
52994: LD_INT 1
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 0
53003: PUSH
53004: LD_INT 1
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 1
53013: NEG
53014: PUSH
53015: LD_INT 0
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 1
53024: NEG
53025: PUSH
53026: LD_INT 1
53028: NEG
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 1
53036: NEG
53037: PUSH
53038: LD_INT 2
53040: NEG
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 0
53048: PUSH
53049: LD_INT 2
53051: NEG
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 1
53059: PUSH
53060: LD_INT 1
53062: NEG
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 2
53070: PUSH
53071: LD_INT 0
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 2
53080: PUSH
53081: LD_INT 1
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 1
53090: PUSH
53091: LD_INT 2
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 0
53100: PUSH
53101: LD_INT 2
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 1
53110: NEG
53111: PUSH
53112: LD_INT 1
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 2
53121: NEG
53122: PUSH
53123: LD_INT 0
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 2
53132: NEG
53133: PUSH
53134: LD_INT 1
53136: NEG
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 1
53144: NEG
53145: PUSH
53146: LD_INT 3
53148: NEG
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 0
53156: PUSH
53157: LD_INT 3
53159: NEG
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 1
53167: PUSH
53168: LD_INT 2
53170: NEG
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 2
53178: PUSH
53179: LD_INT 1
53181: NEG
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 3
53189: PUSH
53190: LD_INT 0
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 3
53199: PUSH
53200: LD_INT 1
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 1
53209: PUSH
53210: LD_INT 3
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 0
53219: PUSH
53220: LD_INT 3
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 1
53229: NEG
53230: PUSH
53231: LD_INT 2
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 2
53240: NEG
53241: PUSH
53242: LD_INT 1
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 3
53251: NEG
53252: PUSH
53253: LD_INT 0
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 3
53262: NEG
53263: PUSH
53264: LD_INT 1
53266: NEG
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53303: LD_ADDR_VAR 0 47
53307: PUSH
53308: LD_INT 0
53310: PUSH
53311: LD_INT 0
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 0
53320: PUSH
53321: LD_INT 1
53323: NEG
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 1
53331: PUSH
53332: LD_INT 0
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 1
53341: PUSH
53342: LD_INT 1
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 0
53351: PUSH
53352: LD_INT 1
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 1
53361: NEG
53362: PUSH
53363: LD_INT 0
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 1
53372: NEG
53373: PUSH
53374: LD_INT 1
53376: NEG
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 1
53384: NEG
53385: PUSH
53386: LD_INT 2
53388: NEG
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 0
53396: PUSH
53397: LD_INT 2
53399: NEG
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 1
53407: PUSH
53408: LD_INT 1
53410: NEG
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 2
53418: NEG
53419: PUSH
53420: LD_INT 1
53422: NEG
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 2
53430: NEG
53431: PUSH
53432: LD_INT 2
53434: NEG
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53454: LD_ADDR_VAR 0 48
53458: PUSH
53459: LD_INT 0
53461: PUSH
53462: LD_INT 0
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 0
53471: PUSH
53472: LD_INT 1
53474: NEG
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 1
53482: PUSH
53483: LD_INT 0
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 1
53492: PUSH
53493: LD_INT 1
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 0
53502: PUSH
53503: LD_INT 1
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 1
53512: NEG
53513: PUSH
53514: LD_INT 0
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 1
53523: NEG
53524: PUSH
53525: LD_INT 1
53527: NEG
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 1
53535: NEG
53536: PUSH
53537: LD_INT 2
53539: NEG
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 0
53547: PUSH
53548: LD_INT 2
53550: NEG
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 1
53558: PUSH
53559: LD_INT 1
53561: NEG
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 2
53569: PUSH
53570: LD_INT 0
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 2
53579: PUSH
53580: LD_INT 1
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53601: LD_ADDR_VAR 0 49
53605: PUSH
53606: LD_INT 0
53608: PUSH
53609: LD_INT 0
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 0
53618: PUSH
53619: LD_INT 1
53621: NEG
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 1
53629: PUSH
53630: LD_INT 0
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 1
53639: PUSH
53640: LD_INT 1
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 0
53649: PUSH
53650: LD_INT 1
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 1
53659: NEG
53660: PUSH
53661: LD_INT 0
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 1
53670: NEG
53671: PUSH
53672: LD_INT 1
53674: NEG
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 1
53682: PUSH
53683: LD_INT 1
53685: NEG
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 2
53693: PUSH
53694: LD_INT 0
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 2
53703: PUSH
53704: LD_INT 1
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 2
53713: PUSH
53714: LD_INT 2
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 1
53723: PUSH
53724: LD_INT 2
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53745: LD_ADDR_VAR 0 50
53749: PUSH
53750: LD_INT 0
53752: PUSH
53753: LD_INT 0
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 0
53762: PUSH
53763: LD_INT 1
53765: NEG
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 1
53773: PUSH
53774: LD_INT 0
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 1
53783: PUSH
53784: LD_INT 1
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 0
53793: PUSH
53794: LD_INT 1
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 1
53803: NEG
53804: PUSH
53805: LD_INT 0
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 1
53814: NEG
53815: PUSH
53816: LD_INT 1
53818: NEG
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 2
53826: PUSH
53827: LD_INT 1
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 2
53836: PUSH
53837: LD_INT 2
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 1
53846: PUSH
53847: LD_INT 2
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 0
53856: PUSH
53857: LD_INT 2
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 1
53866: NEG
53867: PUSH
53868: LD_INT 1
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53889: LD_ADDR_VAR 0 51
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: LD_INT 0
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 0
53906: PUSH
53907: LD_INT 1
53909: NEG
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 1
53917: PUSH
53918: LD_INT 0
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 1
53927: PUSH
53928: LD_INT 1
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 0
53937: PUSH
53938: LD_INT 1
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 1
53947: NEG
53948: PUSH
53949: LD_INT 0
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 1
53958: NEG
53959: PUSH
53960: LD_INT 1
53962: NEG
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 1
53970: PUSH
53971: LD_INT 2
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 0
53980: PUSH
53981: LD_INT 2
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 1
53990: NEG
53991: PUSH
53992: LD_INT 1
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 2
54001: NEG
54002: PUSH
54003: LD_INT 0
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 2
54012: NEG
54013: PUSH
54014: LD_INT 1
54016: NEG
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54036: LD_ADDR_VAR 0 52
54040: PUSH
54041: LD_INT 0
54043: PUSH
54044: LD_INT 0
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 0
54053: PUSH
54054: LD_INT 1
54056: NEG
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 1
54064: PUSH
54065: LD_INT 0
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 1
54074: PUSH
54075: LD_INT 1
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 0
54084: PUSH
54085: LD_INT 1
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 1
54094: NEG
54095: PUSH
54096: LD_INT 0
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 1
54105: NEG
54106: PUSH
54107: LD_INT 1
54109: NEG
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 1
54117: NEG
54118: PUSH
54119: LD_INT 2
54121: NEG
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 1
54129: NEG
54130: PUSH
54131: LD_INT 1
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 2
54140: NEG
54141: PUSH
54142: LD_INT 0
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 2
54151: NEG
54152: PUSH
54153: LD_INT 1
54155: NEG
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 2
54163: NEG
54164: PUSH
54165: LD_INT 2
54167: NEG
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54187: LD_ADDR_VAR 0 53
54191: PUSH
54192: LD_INT 0
54194: PUSH
54195: LD_INT 0
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 0
54204: PUSH
54205: LD_INT 1
54207: NEG
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 1
54215: PUSH
54216: LD_INT 0
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 1
54225: PUSH
54226: LD_INT 1
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 0
54235: PUSH
54236: LD_INT 1
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 1
54245: NEG
54246: PUSH
54247: LD_INT 0
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 1
54256: NEG
54257: PUSH
54258: LD_INT 1
54260: NEG
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 1
54268: NEG
54269: PUSH
54270: LD_INT 2
54272: NEG
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 0
54280: PUSH
54281: LD_INT 2
54283: NEG
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 1
54291: PUSH
54292: LD_INT 1
54294: NEG
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 2
54302: PUSH
54303: LD_INT 0
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 2
54312: PUSH
54313: LD_INT 1
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 2
54322: PUSH
54323: LD_INT 2
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 1
54332: PUSH
54333: LD_INT 2
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 0
54342: PUSH
54343: LD_INT 2
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 1
54352: NEG
54353: PUSH
54354: LD_INT 1
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 2
54363: NEG
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 2
54374: NEG
54375: PUSH
54376: LD_INT 1
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 2
54386: NEG
54387: PUSH
54388: LD_INT 2
54390: NEG
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54417: LD_ADDR_VAR 0 54
54421: PUSH
54422: LD_INT 0
54424: PUSH
54425: LD_INT 0
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 0
54434: PUSH
54435: LD_INT 1
54437: NEG
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 1
54445: PUSH
54446: LD_INT 0
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 1
54455: PUSH
54456: LD_INT 1
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 0
54465: PUSH
54466: LD_INT 1
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 1
54475: NEG
54476: PUSH
54477: LD_INT 0
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 1
54486: NEG
54487: PUSH
54488: LD_INT 1
54490: NEG
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 1
54498: NEG
54499: PUSH
54500: LD_INT 2
54502: NEG
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 0
54510: PUSH
54511: LD_INT 2
54513: NEG
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 1
54521: PUSH
54522: LD_INT 1
54524: NEG
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 2
54532: PUSH
54533: LD_INT 0
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 2
54542: PUSH
54543: LD_INT 1
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 2
54552: PUSH
54553: LD_INT 2
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 1
54562: PUSH
54563: LD_INT 2
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 0
54572: PUSH
54573: LD_INT 2
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 1
54582: NEG
54583: PUSH
54584: LD_INT 1
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 2
54593: NEG
54594: PUSH
54595: LD_INT 0
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 2
54604: NEG
54605: PUSH
54606: LD_INT 1
54608: NEG
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 2
54616: NEG
54617: PUSH
54618: LD_INT 2
54620: NEG
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54647: LD_ADDR_VAR 0 55
54651: PUSH
54652: LD_INT 0
54654: PUSH
54655: LD_INT 0
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 0
54664: PUSH
54665: LD_INT 1
54667: NEG
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 1
54675: PUSH
54676: LD_INT 0
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 1
54685: PUSH
54686: LD_INT 1
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 0
54695: PUSH
54696: LD_INT 1
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 1
54705: NEG
54706: PUSH
54707: LD_INT 0
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 1
54716: NEG
54717: PUSH
54718: LD_INT 1
54720: NEG
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 1
54728: NEG
54729: PUSH
54730: LD_INT 2
54732: NEG
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 0
54740: PUSH
54741: LD_INT 2
54743: NEG
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 1
54751: PUSH
54752: LD_INT 1
54754: NEG
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 2
54762: PUSH
54763: LD_INT 0
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 2
54772: PUSH
54773: LD_INT 1
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 2
54782: PUSH
54783: LD_INT 2
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 1
54792: PUSH
54793: LD_INT 2
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 0
54802: PUSH
54803: LD_INT 2
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 1
54812: NEG
54813: PUSH
54814: LD_INT 1
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 2
54823: NEG
54824: PUSH
54825: LD_INT 0
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 2
54834: NEG
54835: PUSH
54836: LD_INT 1
54838: NEG
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 2
54846: NEG
54847: PUSH
54848: LD_INT 2
54850: NEG
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54877: LD_ADDR_VAR 0 56
54881: PUSH
54882: LD_INT 0
54884: PUSH
54885: LD_INT 0
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 0
54894: PUSH
54895: LD_INT 1
54897: NEG
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 1
54905: PUSH
54906: LD_INT 0
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 1
54915: PUSH
54916: LD_INT 1
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 0
54925: PUSH
54926: LD_INT 1
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 1
54935: NEG
54936: PUSH
54937: LD_INT 0
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 1
54946: NEG
54947: PUSH
54948: LD_INT 1
54950: NEG
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 1
54958: NEG
54959: PUSH
54960: LD_INT 2
54962: NEG
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 0
54970: PUSH
54971: LD_INT 2
54973: NEG
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 1
54981: PUSH
54982: LD_INT 1
54984: NEG
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 2
54992: PUSH
54993: LD_INT 0
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 2
55002: PUSH
55003: LD_INT 1
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 2
55012: PUSH
55013: LD_INT 2
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 1
55022: PUSH
55023: LD_INT 2
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 0
55032: PUSH
55033: LD_INT 2
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 1
55042: NEG
55043: PUSH
55044: LD_INT 1
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 2
55053: NEG
55054: PUSH
55055: LD_INT 0
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 2
55064: NEG
55065: PUSH
55066: LD_INT 1
55068: NEG
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 2
55076: NEG
55077: PUSH
55078: LD_INT 2
55080: NEG
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55107: LD_ADDR_VAR 0 57
55111: PUSH
55112: LD_INT 0
55114: PUSH
55115: LD_INT 0
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 0
55124: PUSH
55125: LD_INT 1
55127: NEG
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 1
55135: PUSH
55136: LD_INT 0
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 1
55145: PUSH
55146: LD_INT 1
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 0
55155: PUSH
55156: LD_INT 1
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 1
55165: NEG
55166: PUSH
55167: LD_INT 0
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 1
55176: NEG
55177: PUSH
55178: LD_INT 1
55180: NEG
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 1
55188: NEG
55189: PUSH
55190: LD_INT 2
55192: NEG
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 0
55200: PUSH
55201: LD_INT 2
55203: NEG
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 1
55211: PUSH
55212: LD_INT 1
55214: NEG
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 2
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 2
55232: PUSH
55233: LD_INT 1
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 2
55242: PUSH
55243: LD_INT 2
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 1
55252: PUSH
55253: LD_INT 2
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 0
55262: PUSH
55263: LD_INT 2
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 1
55272: NEG
55273: PUSH
55274: LD_INT 1
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 2
55283: NEG
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 2
55294: NEG
55295: PUSH
55296: LD_INT 1
55298: NEG
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 2
55306: NEG
55307: PUSH
55308: LD_INT 2
55310: NEG
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55337: LD_ADDR_VAR 0 58
55341: PUSH
55342: LD_INT 0
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 0
55354: PUSH
55355: LD_INT 1
55357: NEG
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 1
55365: PUSH
55366: LD_INT 0
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 1
55375: PUSH
55376: LD_INT 1
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 0
55385: PUSH
55386: LD_INT 1
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 1
55395: NEG
55396: PUSH
55397: LD_INT 0
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 1
55406: NEG
55407: PUSH
55408: LD_INT 1
55410: NEG
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 1
55418: NEG
55419: PUSH
55420: LD_INT 2
55422: NEG
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 0
55430: PUSH
55431: LD_INT 2
55433: NEG
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 1
55441: PUSH
55442: LD_INT 1
55444: NEG
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 2
55452: PUSH
55453: LD_INT 0
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 2
55462: PUSH
55463: LD_INT 1
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 2
55472: PUSH
55473: LD_INT 2
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 1
55482: PUSH
55483: LD_INT 2
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 0
55492: PUSH
55493: LD_INT 2
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 1
55502: NEG
55503: PUSH
55504: LD_INT 1
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 2
55513: NEG
55514: PUSH
55515: LD_INT 0
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 2
55524: NEG
55525: PUSH
55526: LD_INT 1
55528: NEG
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 2
55536: NEG
55537: PUSH
55538: LD_INT 2
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55567: LD_ADDR_VAR 0 59
55571: PUSH
55572: LD_INT 0
55574: PUSH
55575: LD_INT 0
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 0
55584: PUSH
55585: LD_INT 1
55587: NEG
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 1
55595: PUSH
55596: LD_INT 0
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 1
55605: PUSH
55606: LD_INT 1
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 0
55615: PUSH
55616: LD_INT 1
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 1
55625: NEG
55626: PUSH
55627: LD_INT 0
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 1
55636: NEG
55637: PUSH
55638: LD_INT 1
55640: NEG
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55655: LD_ADDR_VAR 0 60
55659: PUSH
55660: LD_INT 0
55662: PUSH
55663: LD_INT 0
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 0
55672: PUSH
55673: LD_INT 1
55675: NEG
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 1
55683: PUSH
55684: LD_INT 0
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 1
55693: PUSH
55694: LD_INT 1
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 0
55703: PUSH
55704: LD_INT 1
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 1
55713: NEG
55714: PUSH
55715: LD_INT 0
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 1
55724: NEG
55725: PUSH
55726: LD_INT 1
55728: NEG
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55743: LD_ADDR_VAR 0 61
55747: PUSH
55748: LD_INT 0
55750: PUSH
55751: LD_INT 0
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 0
55760: PUSH
55761: LD_INT 1
55763: NEG
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 1
55771: PUSH
55772: LD_INT 0
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 1
55781: PUSH
55782: LD_INT 1
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 0
55791: PUSH
55792: LD_INT 1
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 1
55801: NEG
55802: PUSH
55803: LD_INT 0
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 1
55812: NEG
55813: PUSH
55814: LD_INT 1
55816: NEG
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55831: LD_ADDR_VAR 0 62
55835: PUSH
55836: LD_INT 0
55838: PUSH
55839: LD_INT 0
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 0
55848: PUSH
55849: LD_INT 1
55851: NEG
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 1
55859: PUSH
55860: LD_INT 0
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 1
55869: PUSH
55870: LD_INT 1
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 0
55879: PUSH
55880: LD_INT 1
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 1
55889: NEG
55890: PUSH
55891: LD_INT 0
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 1
55900: NEG
55901: PUSH
55902: LD_INT 1
55904: NEG
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55919: LD_ADDR_VAR 0 63
55923: PUSH
55924: LD_INT 0
55926: PUSH
55927: LD_INT 0
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 0
55936: PUSH
55937: LD_INT 1
55939: NEG
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 1
55947: PUSH
55948: LD_INT 0
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 1
55957: PUSH
55958: LD_INT 1
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 0
55967: PUSH
55968: LD_INT 1
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 1
55977: NEG
55978: PUSH
55979: LD_INT 0
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 1
55988: NEG
55989: PUSH
55990: LD_INT 1
55992: NEG
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56007: LD_ADDR_VAR 0 64
56011: PUSH
56012: LD_INT 0
56014: PUSH
56015: LD_INT 0
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 0
56024: PUSH
56025: LD_INT 1
56027: NEG
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 1
56035: PUSH
56036: LD_INT 0
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 1
56045: PUSH
56046: LD_INT 1
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 0
56055: PUSH
56056: LD_INT 1
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 1
56065: NEG
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 1
56076: NEG
56077: PUSH
56078: LD_INT 1
56080: NEG
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: ST_TO_ADDR
// end ; 1 :
56095: GO 61992
56097: LD_INT 1
56099: DOUBLE
56100: EQUAL
56101: IFTRUE 56105
56103: GO 58728
56105: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56106: LD_ADDR_VAR 0 11
56110: PUSH
56111: LD_INT 1
56113: NEG
56114: PUSH
56115: LD_INT 3
56117: NEG
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 0
56125: PUSH
56126: LD_INT 3
56128: NEG
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 1
56136: PUSH
56137: LD_INT 2
56139: NEG
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: LIST
56149: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56150: LD_ADDR_VAR 0 12
56154: PUSH
56155: LD_INT 2
56157: PUSH
56158: LD_INT 1
56160: NEG
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 3
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 3
56178: PUSH
56179: LD_INT 1
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: LIST
56190: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56191: LD_ADDR_VAR 0 13
56195: PUSH
56196: LD_INT 3
56198: PUSH
56199: LD_INT 2
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 3
56208: PUSH
56209: LD_INT 3
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 2
56218: PUSH
56219: LD_INT 3
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: LIST
56230: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56231: LD_ADDR_VAR 0 14
56235: PUSH
56236: LD_INT 1
56238: PUSH
56239: LD_INT 3
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 0
56248: PUSH
56249: LD_INT 3
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 1
56258: NEG
56259: PUSH
56260: LD_INT 2
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: LIST
56271: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56272: LD_ADDR_VAR 0 15
56276: PUSH
56277: LD_INT 2
56279: NEG
56280: PUSH
56281: LD_INT 1
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 3
56290: NEG
56291: PUSH
56292: LD_INT 0
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 3
56301: NEG
56302: PUSH
56303: LD_INT 1
56305: NEG
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: LIST
56315: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56316: LD_ADDR_VAR 0 16
56320: PUSH
56321: LD_INT 2
56323: NEG
56324: PUSH
56325: LD_INT 3
56327: NEG
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 3
56335: NEG
56336: PUSH
56337: LD_INT 2
56339: NEG
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 3
56347: NEG
56348: PUSH
56349: LD_INT 3
56351: NEG
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: LIST
56361: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56362: LD_ADDR_VAR 0 17
56366: PUSH
56367: LD_INT 1
56369: NEG
56370: PUSH
56371: LD_INT 3
56373: NEG
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 0
56381: PUSH
56382: LD_INT 3
56384: NEG
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 1
56392: PUSH
56393: LD_INT 2
56395: NEG
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: LIST
56405: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56406: LD_ADDR_VAR 0 18
56410: PUSH
56411: LD_INT 2
56413: PUSH
56414: LD_INT 1
56416: NEG
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 3
56424: PUSH
56425: LD_INT 0
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 3
56434: PUSH
56435: LD_INT 1
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: LIST
56446: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56447: LD_ADDR_VAR 0 19
56451: PUSH
56452: LD_INT 3
56454: PUSH
56455: LD_INT 2
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 3
56464: PUSH
56465: LD_INT 3
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 2
56474: PUSH
56475: LD_INT 3
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: LIST
56486: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56487: LD_ADDR_VAR 0 20
56491: PUSH
56492: LD_INT 1
56494: PUSH
56495: LD_INT 3
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 0
56504: PUSH
56505: LD_INT 3
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 1
56514: NEG
56515: PUSH
56516: LD_INT 2
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: LIST
56527: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56528: LD_ADDR_VAR 0 21
56532: PUSH
56533: LD_INT 2
56535: NEG
56536: PUSH
56537: LD_INT 1
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 3
56546: NEG
56547: PUSH
56548: LD_INT 0
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 3
56557: NEG
56558: PUSH
56559: LD_INT 1
56561: NEG
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: LIST
56571: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56572: LD_ADDR_VAR 0 22
56576: PUSH
56577: LD_INT 2
56579: NEG
56580: PUSH
56581: LD_INT 3
56583: NEG
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 3
56591: NEG
56592: PUSH
56593: LD_INT 2
56595: NEG
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 3
56603: NEG
56604: PUSH
56605: LD_INT 3
56607: NEG
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: LIST
56617: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56618: LD_ADDR_VAR 0 23
56622: PUSH
56623: LD_INT 0
56625: PUSH
56626: LD_INT 3
56628: NEG
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 1
56636: NEG
56637: PUSH
56638: LD_INT 4
56640: NEG
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 1
56648: PUSH
56649: LD_INT 3
56651: NEG
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: LIST
56661: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56662: LD_ADDR_VAR 0 24
56666: PUSH
56667: LD_INT 3
56669: PUSH
56670: LD_INT 0
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 3
56679: PUSH
56680: LD_INT 1
56682: NEG
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 4
56690: PUSH
56691: LD_INT 1
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: LIST
56702: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56703: LD_ADDR_VAR 0 25
56707: PUSH
56708: LD_INT 3
56710: PUSH
56711: LD_INT 3
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 4
56720: PUSH
56721: LD_INT 3
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 3
56730: PUSH
56731: LD_INT 4
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: LIST
56742: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56743: LD_ADDR_VAR 0 26
56747: PUSH
56748: LD_INT 0
56750: PUSH
56751: LD_INT 3
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 1
56760: PUSH
56761: LD_INT 4
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 1
56770: NEG
56771: PUSH
56772: LD_INT 3
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: LIST
56783: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56784: LD_ADDR_VAR 0 27
56788: PUSH
56789: LD_INT 3
56791: NEG
56792: PUSH
56793: LD_INT 0
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 3
56802: NEG
56803: PUSH
56804: LD_INT 1
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 4
56813: NEG
56814: PUSH
56815: LD_INT 1
56817: NEG
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: LIST
56827: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56828: LD_ADDR_VAR 0 28
56832: PUSH
56833: LD_INT 3
56835: NEG
56836: PUSH
56837: LD_INT 3
56839: NEG
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 3
56847: NEG
56848: PUSH
56849: LD_INT 4
56851: NEG
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 4
56859: NEG
56860: PUSH
56861: LD_INT 3
56863: NEG
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: LIST
56873: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56874: LD_ADDR_VAR 0 29
56878: PUSH
56879: LD_INT 1
56881: NEG
56882: PUSH
56883: LD_INT 3
56885: NEG
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 0
56893: PUSH
56894: LD_INT 3
56896: NEG
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 1
56904: PUSH
56905: LD_INT 2
56907: NEG
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 1
56915: NEG
56916: PUSH
56917: LD_INT 4
56919: NEG
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 0
56927: PUSH
56928: LD_INT 4
56930: NEG
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 1
56938: PUSH
56939: LD_INT 3
56941: NEG
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 1
56949: NEG
56950: PUSH
56951: LD_INT 5
56953: NEG
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 0
56961: PUSH
56962: LD_INT 5
56964: NEG
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 1
56972: PUSH
56973: LD_INT 4
56975: NEG
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 1
56983: NEG
56984: PUSH
56985: LD_INT 6
56987: NEG
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 0
56995: PUSH
56996: LD_INT 6
56998: NEG
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 1
57006: PUSH
57007: LD_INT 5
57009: NEG
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57029: LD_ADDR_VAR 0 30
57033: PUSH
57034: LD_INT 2
57036: PUSH
57037: LD_INT 1
57039: NEG
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 3
57047: PUSH
57048: LD_INT 0
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 3
57057: PUSH
57058: LD_INT 1
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 3
57067: PUSH
57068: LD_INT 1
57070: NEG
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 4
57078: PUSH
57079: LD_INT 0
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 4
57088: PUSH
57089: LD_INT 1
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 4
57098: PUSH
57099: LD_INT 1
57101: NEG
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 5
57109: PUSH
57110: LD_INT 0
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 5
57119: PUSH
57120: LD_INT 1
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 5
57129: PUSH
57130: LD_INT 1
57132: NEG
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 6
57140: PUSH
57141: LD_INT 0
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 6
57150: PUSH
57151: LD_INT 1
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57172: LD_ADDR_VAR 0 31
57176: PUSH
57177: LD_INT 3
57179: PUSH
57180: LD_INT 2
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 3
57189: PUSH
57190: LD_INT 3
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 2
57199: PUSH
57200: LD_INT 3
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 4
57209: PUSH
57210: LD_INT 3
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 4
57219: PUSH
57220: LD_INT 4
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 3
57229: PUSH
57230: LD_INT 4
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 5
57239: PUSH
57240: LD_INT 4
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 5
57249: PUSH
57250: LD_INT 5
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 4
57259: PUSH
57260: LD_INT 5
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 6
57269: PUSH
57270: LD_INT 5
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 6
57279: PUSH
57280: LD_INT 6
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 5
57289: PUSH
57290: LD_INT 6
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57311: LD_ADDR_VAR 0 32
57315: PUSH
57316: LD_INT 1
57318: PUSH
57319: LD_INT 3
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 0
57328: PUSH
57329: LD_INT 3
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 1
57338: NEG
57339: PUSH
57340: LD_INT 2
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 1
57349: PUSH
57350: LD_INT 4
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 0
57359: PUSH
57360: LD_INT 4
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 1
57369: NEG
57370: PUSH
57371: LD_INT 3
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 1
57380: PUSH
57381: LD_INT 5
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 0
57390: PUSH
57391: LD_INT 5
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 1
57400: NEG
57401: PUSH
57402: LD_INT 4
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 1
57411: PUSH
57412: LD_INT 6
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 0
57421: PUSH
57422: LD_INT 6
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 1
57431: NEG
57432: PUSH
57433: LD_INT 5
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57454: LD_ADDR_VAR 0 33
57458: PUSH
57459: LD_INT 2
57461: NEG
57462: PUSH
57463: LD_INT 1
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 3
57472: NEG
57473: PUSH
57474: LD_INT 0
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 3
57483: NEG
57484: PUSH
57485: LD_INT 1
57487: NEG
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 3
57495: NEG
57496: PUSH
57497: LD_INT 1
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 4
57506: NEG
57507: PUSH
57508: LD_INT 0
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 4
57517: NEG
57518: PUSH
57519: LD_INT 1
57521: NEG
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 4
57529: NEG
57530: PUSH
57531: LD_INT 1
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 5
57540: NEG
57541: PUSH
57542: LD_INT 0
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 5
57551: NEG
57552: PUSH
57553: LD_INT 1
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 5
57563: NEG
57564: PUSH
57565: LD_INT 1
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 6
57574: NEG
57575: PUSH
57576: LD_INT 0
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 6
57585: NEG
57586: PUSH
57587: LD_INT 1
57589: NEG
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57609: LD_ADDR_VAR 0 34
57613: PUSH
57614: LD_INT 2
57616: NEG
57617: PUSH
57618: LD_INT 3
57620: NEG
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 3
57628: NEG
57629: PUSH
57630: LD_INT 2
57632: NEG
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 3
57640: NEG
57641: PUSH
57642: LD_INT 3
57644: NEG
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 3
57652: NEG
57653: PUSH
57654: LD_INT 4
57656: NEG
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 4
57664: NEG
57665: PUSH
57666: LD_INT 3
57668: NEG
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 4
57676: NEG
57677: PUSH
57678: LD_INT 4
57680: NEG
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 4
57688: NEG
57689: PUSH
57690: LD_INT 5
57692: NEG
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 5
57700: NEG
57701: PUSH
57702: LD_INT 4
57704: NEG
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 5
57712: NEG
57713: PUSH
57714: LD_INT 5
57716: NEG
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 5
57724: NEG
57725: PUSH
57726: LD_INT 6
57728: NEG
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 6
57736: NEG
57737: PUSH
57738: LD_INT 5
57740: NEG
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 6
57748: NEG
57749: PUSH
57750: LD_INT 6
57752: NEG
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57772: LD_ADDR_VAR 0 41
57776: PUSH
57777: LD_INT 0
57779: PUSH
57780: LD_INT 2
57782: NEG
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 1
57790: NEG
57791: PUSH
57792: LD_INT 3
57794: NEG
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 1
57802: PUSH
57803: LD_INT 2
57805: NEG
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: LIST
57815: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57816: LD_ADDR_VAR 0 42
57820: PUSH
57821: LD_INT 2
57823: PUSH
57824: LD_INT 0
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 2
57833: PUSH
57834: LD_INT 1
57836: NEG
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 3
57844: PUSH
57845: LD_INT 1
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: LIST
57856: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57857: LD_ADDR_VAR 0 43
57861: PUSH
57862: LD_INT 2
57864: PUSH
57865: LD_INT 2
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 3
57874: PUSH
57875: LD_INT 2
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 2
57884: PUSH
57885: LD_INT 3
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: LIST
57896: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57897: LD_ADDR_VAR 0 44
57901: PUSH
57902: LD_INT 0
57904: PUSH
57905: LD_INT 2
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 1
57914: PUSH
57915: LD_INT 3
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 1
57924: NEG
57925: PUSH
57926: LD_INT 2
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: LIST
57937: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57938: LD_ADDR_VAR 0 45
57942: PUSH
57943: LD_INT 2
57945: NEG
57946: PUSH
57947: LD_INT 0
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 2
57956: NEG
57957: PUSH
57958: LD_INT 1
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 3
57967: NEG
57968: PUSH
57969: LD_INT 1
57971: NEG
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: LIST
57981: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57982: LD_ADDR_VAR 0 46
57986: PUSH
57987: LD_INT 2
57989: NEG
57990: PUSH
57991: LD_INT 2
57993: NEG
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 2
58001: NEG
58002: PUSH
58003: LD_INT 3
58005: NEG
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 3
58013: NEG
58014: PUSH
58015: LD_INT 2
58017: NEG
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: LIST
58027: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58028: LD_ADDR_VAR 0 47
58032: PUSH
58033: LD_INT 2
58035: NEG
58036: PUSH
58037: LD_INT 3
58039: NEG
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 1
58047: NEG
58048: PUSH
58049: LD_INT 3
58051: NEG
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58061: LD_ADDR_VAR 0 48
58065: PUSH
58066: LD_INT 1
58068: PUSH
58069: LD_INT 2
58071: NEG
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 2
58079: PUSH
58080: LD_INT 1
58082: NEG
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58092: LD_ADDR_VAR 0 49
58096: PUSH
58097: LD_INT 3
58099: PUSH
58100: LD_INT 1
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 3
58109: PUSH
58110: LD_INT 2
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58121: LD_ADDR_VAR 0 50
58125: PUSH
58126: LD_INT 2
58128: PUSH
58129: LD_INT 3
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 1
58138: PUSH
58139: LD_INT 3
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58150: LD_ADDR_VAR 0 51
58154: PUSH
58155: LD_INT 1
58157: NEG
58158: PUSH
58159: LD_INT 2
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 2
58168: NEG
58169: PUSH
58170: LD_INT 1
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58181: LD_ADDR_VAR 0 52
58185: PUSH
58186: LD_INT 3
58188: NEG
58189: PUSH
58190: LD_INT 1
58192: NEG
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 3
58200: NEG
58201: PUSH
58202: LD_INT 2
58204: NEG
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58214: LD_ADDR_VAR 0 53
58218: PUSH
58219: LD_INT 1
58221: NEG
58222: PUSH
58223: LD_INT 3
58225: NEG
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 0
58233: PUSH
58234: LD_INT 3
58236: NEG
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 1
58244: PUSH
58245: LD_INT 2
58247: NEG
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: LIST
58257: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58258: LD_ADDR_VAR 0 54
58262: PUSH
58263: LD_INT 2
58265: PUSH
58266: LD_INT 1
58268: NEG
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 3
58276: PUSH
58277: LD_INT 0
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 3
58286: PUSH
58287: LD_INT 1
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: LIST
58298: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58299: LD_ADDR_VAR 0 55
58303: PUSH
58304: LD_INT 3
58306: PUSH
58307: LD_INT 2
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 3
58316: PUSH
58317: LD_INT 3
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 2
58326: PUSH
58327: LD_INT 3
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: LIST
58338: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58339: LD_ADDR_VAR 0 56
58343: PUSH
58344: LD_INT 1
58346: PUSH
58347: LD_INT 3
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: LD_INT 3
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 1
58366: NEG
58367: PUSH
58368: LD_INT 2
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: LIST
58379: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58380: LD_ADDR_VAR 0 57
58384: PUSH
58385: LD_INT 2
58387: NEG
58388: PUSH
58389: LD_INT 1
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 3
58398: NEG
58399: PUSH
58400: LD_INT 0
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 3
58409: NEG
58410: PUSH
58411: LD_INT 1
58413: NEG
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: LIST
58423: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58424: LD_ADDR_VAR 0 58
58428: PUSH
58429: LD_INT 2
58431: NEG
58432: PUSH
58433: LD_INT 3
58435: NEG
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 3
58443: NEG
58444: PUSH
58445: LD_INT 2
58447: NEG
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 3
58455: NEG
58456: PUSH
58457: LD_INT 3
58459: NEG
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: LIST
58469: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58470: LD_ADDR_VAR 0 59
58474: PUSH
58475: LD_INT 1
58477: NEG
58478: PUSH
58479: LD_INT 2
58481: NEG
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 0
58489: PUSH
58490: LD_INT 2
58492: NEG
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 1
58500: PUSH
58501: LD_INT 1
58503: NEG
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: LIST
58513: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58514: LD_ADDR_VAR 0 60
58518: PUSH
58519: LD_INT 1
58521: PUSH
58522: LD_INT 1
58524: NEG
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 2
58532: PUSH
58533: LD_INT 0
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 2
58542: PUSH
58543: LD_INT 1
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: LIST
58554: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58555: LD_ADDR_VAR 0 61
58559: PUSH
58560: LD_INT 2
58562: PUSH
58563: LD_INT 1
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 2
58572: PUSH
58573: LD_INT 2
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 1
58582: PUSH
58583: LD_INT 2
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: LIST
58594: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58595: LD_ADDR_VAR 0 62
58599: PUSH
58600: LD_INT 1
58602: PUSH
58603: LD_INT 2
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 0
58612: PUSH
58613: LD_INT 2
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 1
58622: NEG
58623: PUSH
58624: LD_INT 1
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: LIST
58635: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58636: LD_ADDR_VAR 0 63
58640: PUSH
58641: LD_INT 1
58643: NEG
58644: PUSH
58645: LD_INT 1
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 2
58654: NEG
58655: PUSH
58656: LD_INT 0
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 2
58665: NEG
58666: PUSH
58667: LD_INT 1
58669: NEG
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: LIST
58679: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58680: LD_ADDR_VAR 0 64
58684: PUSH
58685: LD_INT 1
58687: NEG
58688: PUSH
58689: LD_INT 2
58691: NEG
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 2
58699: NEG
58700: PUSH
58701: LD_INT 1
58703: NEG
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 2
58711: NEG
58712: PUSH
58713: LD_INT 2
58715: NEG
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: LIST
58725: ST_TO_ADDR
// end ; 2 :
58726: GO 61992
58728: LD_INT 2
58730: DOUBLE
58731: EQUAL
58732: IFTRUE 58736
58734: GO 61991
58736: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58737: LD_ADDR_VAR 0 29
58741: PUSH
58742: LD_INT 4
58744: PUSH
58745: LD_INT 0
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 4
58754: PUSH
58755: LD_INT 1
58757: NEG
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 5
58765: PUSH
58766: LD_INT 0
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 5
58775: PUSH
58776: LD_INT 1
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 4
58785: PUSH
58786: LD_INT 1
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 3
58795: PUSH
58796: LD_INT 0
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 3
58805: PUSH
58806: LD_INT 1
58808: NEG
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 3
58816: PUSH
58817: LD_INT 2
58819: NEG
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 5
58827: PUSH
58828: LD_INT 2
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 3
58837: PUSH
58838: LD_INT 3
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 3
58847: PUSH
58848: LD_INT 2
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 4
58857: PUSH
58858: LD_INT 3
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 4
58867: PUSH
58868: LD_INT 4
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 3
58877: PUSH
58878: LD_INT 4
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 2
58887: PUSH
58888: LD_INT 3
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 2
58897: PUSH
58898: LD_INT 2
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 4
58907: PUSH
58908: LD_INT 2
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 2
58917: PUSH
58918: LD_INT 4
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 0
58927: PUSH
58928: LD_INT 4
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 0
58937: PUSH
58938: LD_INT 3
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 1
58947: PUSH
58948: LD_INT 4
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 1
58957: PUSH
58958: LD_INT 5
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 0
58967: PUSH
58968: LD_INT 5
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 1
58977: NEG
58978: PUSH
58979: LD_INT 4
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 1
58988: NEG
58989: PUSH
58990: LD_INT 3
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 2
58999: PUSH
59000: LD_INT 5
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_INT 2
59009: NEG
59010: PUSH
59011: LD_INT 3
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 3
59020: NEG
59021: PUSH
59022: LD_INT 0
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 3
59031: NEG
59032: PUSH
59033: LD_INT 1
59035: NEG
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 2
59043: NEG
59044: PUSH
59045: LD_INT 0
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 2
59054: NEG
59055: PUSH
59056: LD_INT 1
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 3
59065: NEG
59066: PUSH
59067: LD_INT 1
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 4
59076: NEG
59077: PUSH
59078: LD_INT 0
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 4
59087: NEG
59088: PUSH
59089: LD_INT 1
59091: NEG
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 4
59099: NEG
59100: PUSH
59101: LD_INT 2
59103: NEG
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 2
59111: NEG
59112: PUSH
59113: LD_INT 2
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 4
59122: NEG
59123: PUSH
59124: LD_INT 4
59126: NEG
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 4
59134: NEG
59135: PUSH
59136: LD_INT 5
59138: NEG
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 3
59146: NEG
59147: PUSH
59148: LD_INT 4
59150: NEG
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 3
59158: NEG
59159: PUSH
59160: LD_INT 3
59162: NEG
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 4
59170: NEG
59171: PUSH
59172: LD_INT 3
59174: NEG
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 5
59182: NEG
59183: PUSH
59184: LD_INT 4
59186: NEG
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 5
59194: NEG
59195: PUSH
59196: LD_INT 5
59198: NEG
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 3
59206: NEG
59207: PUSH
59208: LD_INT 5
59210: NEG
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 5
59218: NEG
59219: PUSH
59220: LD_INT 3
59222: NEG
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59275: LD_ADDR_VAR 0 30
59279: PUSH
59280: LD_INT 4
59282: PUSH
59283: LD_INT 4
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 4
59292: PUSH
59293: LD_INT 3
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 5
59302: PUSH
59303: LD_INT 4
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 5
59312: PUSH
59313: LD_INT 5
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 4
59322: PUSH
59323: LD_INT 5
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 3
59332: PUSH
59333: LD_INT 4
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 3
59342: PUSH
59343: LD_INT 3
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 5
59352: PUSH
59353: LD_INT 3
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 3
59362: PUSH
59363: LD_INT 5
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 0
59372: PUSH
59373: LD_INT 3
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 0
59382: PUSH
59383: LD_INT 2
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 1
59392: PUSH
59393: LD_INT 3
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 1
59402: PUSH
59403: LD_INT 4
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 0
59412: PUSH
59413: LD_INT 4
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 1
59422: NEG
59423: PUSH
59424: LD_INT 3
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 1
59433: NEG
59434: PUSH
59435: LD_INT 2
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 2
59444: PUSH
59445: LD_INT 4
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 2
59454: NEG
59455: PUSH
59456: LD_INT 2
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 4
59465: NEG
59466: PUSH
59467: LD_INT 0
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 4
59476: NEG
59477: PUSH
59478: LD_INT 1
59480: NEG
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 3
59488: NEG
59489: PUSH
59490: LD_INT 0
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 3
59499: NEG
59500: PUSH
59501: LD_INT 1
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 4
59510: NEG
59511: PUSH
59512: LD_INT 1
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 5
59521: NEG
59522: PUSH
59523: LD_INT 0
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 5
59532: NEG
59533: PUSH
59534: LD_INT 1
59536: NEG
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 5
59544: NEG
59545: PUSH
59546: LD_INT 2
59548: NEG
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 3
59556: NEG
59557: PUSH
59558: LD_INT 2
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 3
59567: NEG
59568: PUSH
59569: LD_INT 3
59571: NEG
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 3
59579: NEG
59580: PUSH
59581: LD_INT 4
59583: NEG
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 2
59591: NEG
59592: PUSH
59593: LD_INT 3
59595: NEG
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 2
59603: NEG
59604: PUSH
59605: LD_INT 2
59607: NEG
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 3
59615: NEG
59616: PUSH
59617: LD_INT 2
59619: NEG
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 4
59627: NEG
59628: PUSH
59629: LD_INT 3
59631: NEG
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 4
59639: NEG
59640: PUSH
59641: LD_INT 4
59643: NEG
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 2
59651: NEG
59652: PUSH
59653: LD_INT 4
59655: NEG
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 4
59663: NEG
59664: PUSH
59665: LD_INT 2
59667: NEG
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 0
59675: PUSH
59676: LD_INT 4
59678: NEG
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 0
59686: PUSH
59687: LD_INT 5
59689: NEG
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 1
59697: PUSH
59698: LD_INT 4
59700: NEG
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 1
59708: PUSH
59709: LD_INT 3
59711: NEG
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 0
59719: PUSH
59720: LD_INT 3
59722: NEG
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 1
59730: NEG
59731: PUSH
59732: LD_INT 4
59734: NEG
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 1
59742: NEG
59743: PUSH
59744: LD_INT 5
59746: NEG
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 2
59754: PUSH
59755: LD_INT 3
59757: NEG
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 2
59765: NEG
59766: PUSH
59767: LD_INT 5
59769: NEG
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59822: LD_ADDR_VAR 0 31
59826: PUSH
59827: LD_INT 0
59829: PUSH
59830: LD_INT 4
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 0
59839: PUSH
59840: LD_INT 3
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 1
59849: PUSH
59850: LD_INT 4
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 1
59859: PUSH
59860: LD_INT 5
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 0
59869: PUSH
59870: LD_INT 5
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 1
59879: NEG
59880: PUSH
59881: LD_INT 4
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 1
59890: NEG
59891: PUSH
59892: LD_INT 3
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 2
59901: PUSH
59902: LD_INT 5
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 2
59911: NEG
59912: PUSH
59913: LD_INT 3
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 3
59922: NEG
59923: PUSH
59924: LD_INT 0
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 3
59933: NEG
59934: PUSH
59935: LD_INT 1
59937: NEG
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 2
59945: NEG
59946: PUSH
59947: LD_INT 0
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 2
59956: NEG
59957: PUSH
59958: LD_INT 1
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 3
59967: NEG
59968: PUSH
59969: LD_INT 1
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 4
59978: NEG
59979: PUSH
59980: LD_INT 0
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 4
59989: NEG
59990: PUSH
59991: LD_INT 1
59993: NEG
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 4
60001: NEG
60002: PUSH
60003: LD_INT 2
60005: NEG
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 2
60013: NEG
60014: PUSH
60015: LD_INT 2
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 4
60024: NEG
60025: PUSH
60026: LD_INT 4
60028: NEG
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 4
60036: NEG
60037: PUSH
60038: LD_INT 5
60040: NEG
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 3
60048: NEG
60049: PUSH
60050: LD_INT 4
60052: NEG
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 3
60060: NEG
60061: PUSH
60062: LD_INT 3
60064: NEG
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 4
60072: NEG
60073: PUSH
60074: LD_INT 3
60076: NEG
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 5
60084: NEG
60085: PUSH
60086: LD_INT 4
60088: NEG
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 5
60096: NEG
60097: PUSH
60098: LD_INT 5
60100: NEG
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 3
60108: NEG
60109: PUSH
60110: LD_INT 5
60112: NEG
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 5
60120: NEG
60121: PUSH
60122: LD_INT 3
60124: NEG
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 0
60132: PUSH
60133: LD_INT 3
60135: NEG
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 0
60143: PUSH
60144: LD_INT 4
60146: NEG
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 1
60154: PUSH
60155: LD_INT 3
60157: NEG
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 1
60165: PUSH
60166: LD_INT 2
60168: NEG
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 0
60176: PUSH
60177: LD_INT 2
60179: NEG
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 1
60187: NEG
60188: PUSH
60189: LD_INT 3
60191: NEG
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 1
60199: NEG
60200: PUSH
60201: LD_INT 4
60203: NEG
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 2
60211: PUSH
60212: LD_INT 2
60214: NEG
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 2
60222: NEG
60223: PUSH
60224: LD_INT 4
60226: NEG
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 4
60234: PUSH
60235: LD_INT 0
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 4
60244: PUSH
60245: LD_INT 1
60247: NEG
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 5
60255: PUSH
60256: LD_INT 0
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 5
60265: PUSH
60266: LD_INT 1
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 4
60275: PUSH
60276: LD_INT 1
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 3
60285: PUSH
60286: LD_INT 0
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 3
60295: PUSH
60296: LD_INT 1
60298: NEG
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 3
60306: PUSH
60307: LD_INT 2
60309: NEG
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 5
60317: PUSH
60318: LD_INT 2
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60372: LD_ADDR_VAR 0 32
60376: PUSH
60377: LD_INT 4
60379: NEG
60380: PUSH
60381: LD_INT 0
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 4
60390: NEG
60391: PUSH
60392: LD_INT 1
60394: NEG
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 3
60402: NEG
60403: PUSH
60404: LD_INT 0
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 3
60413: NEG
60414: PUSH
60415: LD_INT 1
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 4
60424: NEG
60425: PUSH
60426: LD_INT 1
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 5
60435: NEG
60436: PUSH
60437: LD_INT 0
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 5
60446: NEG
60447: PUSH
60448: LD_INT 1
60450: NEG
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 5
60458: NEG
60459: PUSH
60460: LD_INT 2
60462: NEG
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 3
60470: NEG
60471: PUSH
60472: LD_INT 2
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 3
60481: NEG
60482: PUSH
60483: LD_INT 3
60485: NEG
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 3
60493: NEG
60494: PUSH
60495: LD_INT 4
60497: NEG
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 2
60505: NEG
60506: PUSH
60507: LD_INT 3
60509: NEG
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 2
60517: NEG
60518: PUSH
60519: LD_INT 2
60521: NEG
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 3
60529: NEG
60530: PUSH
60531: LD_INT 2
60533: NEG
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 4
60541: NEG
60542: PUSH
60543: LD_INT 3
60545: NEG
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 4
60553: NEG
60554: PUSH
60555: LD_INT 4
60557: NEG
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 2
60565: NEG
60566: PUSH
60567: LD_INT 4
60569: NEG
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 4
60577: NEG
60578: PUSH
60579: LD_INT 2
60581: NEG
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 0
60589: PUSH
60590: LD_INT 4
60592: NEG
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 0
60600: PUSH
60601: LD_INT 5
60603: NEG
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 1
60611: PUSH
60612: LD_INT 4
60614: NEG
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 1
60622: PUSH
60623: LD_INT 3
60625: NEG
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 0
60633: PUSH
60634: LD_INT 3
60636: NEG
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 1
60644: NEG
60645: PUSH
60646: LD_INT 4
60648: NEG
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 1
60656: NEG
60657: PUSH
60658: LD_INT 5
60660: NEG
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 2
60668: PUSH
60669: LD_INT 3
60671: NEG
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 2
60679: NEG
60680: PUSH
60681: LD_INT 5
60683: NEG
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 3
60691: PUSH
60692: LD_INT 0
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 3
60701: PUSH
60702: LD_INT 1
60704: NEG
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 4
60712: PUSH
60713: LD_INT 0
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 4
60722: PUSH
60723: LD_INT 1
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 3
60732: PUSH
60733: LD_INT 1
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 2
60742: PUSH
60743: LD_INT 0
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 2
60752: PUSH
60753: LD_INT 1
60755: NEG
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 2
60763: PUSH
60764: LD_INT 2
60766: NEG
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 4
60774: PUSH
60775: LD_INT 2
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 4
60784: PUSH
60785: LD_INT 4
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 4
60794: PUSH
60795: LD_INT 3
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 5
60804: PUSH
60805: LD_INT 4
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 5
60814: PUSH
60815: LD_INT 5
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 4
60824: PUSH
60825: LD_INT 5
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 3
60834: PUSH
60835: LD_INT 4
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 3
60844: PUSH
60845: LD_INT 3
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 5
60854: PUSH
60855: LD_INT 3
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 3
60864: PUSH
60865: LD_INT 5
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60919: LD_ADDR_VAR 0 33
60923: PUSH
60924: LD_INT 4
60926: NEG
60927: PUSH
60928: LD_INT 4
60930: NEG
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 4
60938: NEG
60939: PUSH
60940: LD_INT 5
60942: NEG
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 3
60950: NEG
60951: PUSH
60952: LD_INT 4
60954: NEG
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 3
60962: NEG
60963: PUSH
60964: LD_INT 3
60966: NEG
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 4
60974: NEG
60975: PUSH
60976: LD_INT 3
60978: NEG
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 5
60986: NEG
60987: PUSH
60988: LD_INT 4
60990: NEG
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 5
60998: NEG
60999: PUSH
61000: LD_INT 5
61002: NEG
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 3
61010: NEG
61011: PUSH
61012: LD_INT 5
61014: NEG
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 5
61022: NEG
61023: PUSH
61024: LD_INT 3
61026: NEG
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 0
61034: PUSH
61035: LD_INT 3
61037: NEG
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 0
61045: PUSH
61046: LD_INT 4
61048: NEG
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 1
61056: PUSH
61057: LD_INT 3
61059: NEG
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 1
61067: PUSH
61068: LD_INT 2
61070: NEG
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 0
61078: PUSH
61079: LD_INT 2
61081: NEG
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 1
61089: NEG
61090: PUSH
61091: LD_INT 3
61093: NEG
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 1
61101: NEG
61102: PUSH
61103: LD_INT 4
61105: NEG
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 2
61113: PUSH
61114: LD_INT 2
61116: NEG
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 2
61124: NEG
61125: PUSH
61126: LD_INT 4
61128: NEG
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 4
61136: PUSH
61137: LD_INT 0
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 4
61146: PUSH
61147: LD_INT 1
61149: NEG
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 5
61157: PUSH
61158: LD_INT 0
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 5
61167: PUSH
61168: LD_INT 1
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 4
61177: PUSH
61178: LD_INT 1
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 3
61187: PUSH
61188: LD_INT 0
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 3
61197: PUSH
61198: LD_INT 1
61200: NEG
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 3
61208: PUSH
61209: LD_INT 2
61211: NEG
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 5
61219: PUSH
61220: LD_INT 2
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 3
61229: PUSH
61230: LD_INT 3
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 3
61239: PUSH
61240: LD_INT 2
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 4
61249: PUSH
61250: LD_INT 3
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: LD_INT 4
61259: PUSH
61260: LD_INT 4
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 3
61269: PUSH
61270: LD_INT 4
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 2
61279: PUSH
61280: LD_INT 3
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 2
61289: PUSH
61290: LD_INT 2
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 4
61299: PUSH
61300: LD_INT 2
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 2
61309: PUSH
61310: LD_INT 4
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 0
61319: PUSH
61320: LD_INT 4
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 0
61329: PUSH
61330: LD_INT 3
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 1
61339: PUSH
61340: LD_INT 4
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 1
61349: PUSH
61350: LD_INT 5
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 0
61359: PUSH
61360: LD_INT 5
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 1
61369: NEG
61370: PUSH
61371: LD_INT 4
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 1
61380: NEG
61381: PUSH
61382: LD_INT 3
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 2
61391: PUSH
61392: LD_INT 5
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 2
61401: NEG
61402: PUSH
61403: LD_INT 3
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61457: LD_ADDR_VAR 0 34
61461: PUSH
61462: LD_INT 0
61464: PUSH
61465: LD_INT 4
61467: NEG
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 0
61475: PUSH
61476: LD_INT 5
61478: NEG
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 1
61486: PUSH
61487: LD_INT 4
61489: NEG
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 1
61497: PUSH
61498: LD_INT 3
61500: NEG
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 0
61508: PUSH
61509: LD_INT 3
61511: NEG
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 1
61519: NEG
61520: PUSH
61521: LD_INT 4
61523: NEG
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 1
61531: NEG
61532: PUSH
61533: LD_INT 5
61535: NEG
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 2
61543: PUSH
61544: LD_INT 3
61546: NEG
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 2
61554: NEG
61555: PUSH
61556: LD_INT 5
61558: NEG
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 3
61566: PUSH
61567: LD_INT 0
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 3
61576: PUSH
61577: LD_INT 1
61579: NEG
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: PUSH
61585: LD_INT 4
61587: PUSH
61588: LD_INT 0
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 4
61597: PUSH
61598: LD_INT 1
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 3
61607: PUSH
61608: LD_INT 1
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 2
61617: PUSH
61618: LD_INT 0
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 2
61627: PUSH
61628: LD_INT 1
61630: NEG
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 2
61638: PUSH
61639: LD_INT 2
61641: NEG
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 4
61649: PUSH
61650: LD_INT 2
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 4
61659: PUSH
61660: LD_INT 4
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 4
61669: PUSH
61670: LD_INT 3
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 5
61679: PUSH
61680: LD_INT 4
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 5
61689: PUSH
61690: LD_INT 5
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 4
61699: PUSH
61700: LD_INT 5
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 3
61709: PUSH
61710: LD_INT 4
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: LD_INT 3
61719: PUSH
61720: LD_INT 3
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 5
61729: PUSH
61730: LD_INT 3
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 3
61739: PUSH
61740: LD_INT 5
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 0
61749: PUSH
61750: LD_INT 3
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 0
61759: PUSH
61760: LD_INT 2
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 1
61769: PUSH
61770: LD_INT 3
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 1
61779: PUSH
61780: LD_INT 4
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 0
61789: PUSH
61790: LD_INT 4
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 1
61799: NEG
61800: PUSH
61801: LD_INT 3
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 1
61810: NEG
61811: PUSH
61812: LD_INT 2
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 2
61821: PUSH
61822: LD_INT 4
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 2
61831: NEG
61832: PUSH
61833: LD_INT 2
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 4
61842: NEG
61843: PUSH
61844: LD_INT 0
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 4
61853: NEG
61854: PUSH
61855: LD_INT 1
61857: NEG
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 3
61865: NEG
61866: PUSH
61867: LD_INT 0
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 3
61876: NEG
61877: PUSH
61878: LD_INT 1
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 4
61887: NEG
61888: PUSH
61889: LD_INT 1
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 5
61898: NEG
61899: PUSH
61900: LD_INT 0
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 5
61909: NEG
61910: PUSH
61911: LD_INT 1
61913: NEG
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_INT 5
61921: NEG
61922: PUSH
61923: LD_INT 2
61925: NEG
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 3
61933: NEG
61934: PUSH
61935: LD_INT 2
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: LIST
61979: LIST
61980: LIST
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: ST_TO_ADDR
// end ; end ;
61989: GO 61992
61991: POP
// case btype of b_depot , b_warehouse :
61992: LD_VAR 0 1
61996: PUSH
61997: LD_INT 0
61999: DOUBLE
62000: EQUAL
62001: IFTRUE 62011
62003: LD_INT 1
62005: DOUBLE
62006: EQUAL
62007: IFTRUE 62011
62009: GO 62212
62011: POP
// case nation of nation_american :
62012: LD_VAR 0 5
62016: PUSH
62017: LD_INT 1
62019: DOUBLE
62020: EQUAL
62021: IFTRUE 62025
62023: GO 62081
62025: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62026: LD_ADDR_VAR 0 9
62030: PUSH
62031: LD_VAR 0 11
62035: PUSH
62036: LD_VAR 0 12
62040: PUSH
62041: LD_VAR 0 13
62045: PUSH
62046: LD_VAR 0 14
62050: PUSH
62051: LD_VAR 0 15
62055: PUSH
62056: LD_VAR 0 16
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: PUSH
62069: LD_VAR 0 4
62073: PUSH
62074: LD_INT 1
62076: PLUS
62077: ARRAY
62078: ST_TO_ADDR
62079: GO 62210
62081: LD_INT 2
62083: DOUBLE
62084: EQUAL
62085: IFTRUE 62089
62087: GO 62145
62089: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62090: LD_ADDR_VAR 0 9
62094: PUSH
62095: LD_VAR 0 17
62099: PUSH
62100: LD_VAR 0 18
62104: PUSH
62105: LD_VAR 0 19
62109: PUSH
62110: LD_VAR 0 20
62114: PUSH
62115: LD_VAR 0 21
62119: PUSH
62120: LD_VAR 0 22
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: PUSH
62133: LD_VAR 0 4
62137: PUSH
62138: LD_INT 1
62140: PLUS
62141: ARRAY
62142: ST_TO_ADDR
62143: GO 62210
62145: LD_INT 3
62147: DOUBLE
62148: EQUAL
62149: IFTRUE 62153
62151: GO 62209
62153: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62154: LD_ADDR_VAR 0 9
62158: PUSH
62159: LD_VAR 0 23
62163: PUSH
62164: LD_VAR 0 24
62168: PUSH
62169: LD_VAR 0 25
62173: PUSH
62174: LD_VAR 0 26
62178: PUSH
62179: LD_VAR 0 27
62183: PUSH
62184: LD_VAR 0 28
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: PUSH
62197: LD_VAR 0 4
62201: PUSH
62202: LD_INT 1
62204: PLUS
62205: ARRAY
62206: ST_TO_ADDR
62207: GO 62210
62209: POP
62210: GO 62765
62212: LD_INT 2
62214: DOUBLE
62215: EQUAL
62216: IFTRUE 62226
62218: LD_INT 3
62220: DOUBLE
62221: EQUAL
62222: IFTRUE 62226
62224: GO 62282
62226: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62227: LD_ADDR_VAR 0 9
62231: PUSH
62232: LD_VAR 0 29
62236: PUSH
62237: LD_VAR 0 30
62241: PUSH
62242: LD_VAR 0 31
62246: PUSH
62247: LD_VAR 0 32
62251: PUSH
62252: LD_VAR 0 33
62256: PUSH
62257: LD_VAR 0 34
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: PUSH
62270: LD_VAR 0 4
62274: PUSH
62275: LD_INT 1
62277: PLUS
62278: ARRAY
62279: ST_TO_ADDR
62280: GO 62765
62282: LD_INT 16
62284: DOUBLE
62285: EQUAL
62286: IFTRUE 62344
62288: LD_INT 17
62290: DOUBLE
62291: EQUAL
62292: IFTRUE 62344
62294: LD_INT 18
62296: DOUBLE
62297: EQUAL
62298: IFTRUE 62344
62300: LD_INT 19
62302: DOUBLE
62303: EQUAL
62304: IFTRUE 62344
62306: LD_INT 22
62308: DOUBLE
62309: EQUAL
62310: IFTRUE 62344
62312: LD_INT 20
62314: DOUBLE
62315: EQUAL
62316: IFTRUE 62344
62318: LD_INT 21
62320: DOUBLE
62321: EQUAL
62322: IFTRUE 62344
62324: LD_INT 23
62326: DOUBLE
62327: EQUAL
62328: IFTRUE 62344
62330: LD_INT 24
62332: DOUBLE
62333: EQUAL
62334: IFTRUE 62344
62336: LD_INT 25
62338: DOUBLE
62339: EQUAL
62340: IFTRUE 62344
62342: GO 62400
62344: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62345: LD_ADDR_VAR 0 9
62349: PUSH
62350: LD_VAR 0 35
62354: PUSH
62355: LD_VAR 0 36
62359: PUSH
62360: LD_VAR 0 37
62364: PUSH
62365: LD_VAR 0 38
62369: PUSH
62370: LD_VAR 0 39
62374: PUSH
62375: LD_VAR 0 40
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: PUSH
62388: LD_VAR 0 4
62392: PUSH
62393: LD_INT 1
62395: PLUS
62396: ARRAY
62397: ST_TO_ADDR
62398: GO 62765
62400: LD_INT 6
62402: DOUBLE
62403: EQUAL
62404: IFTRUE 62456
62406: LD_INT 7
62408: DOUBLE
62409: EQUAL
62410: IFTRUE 62456
62412: LD_INT 8
62414: DOUBLE
62415: EQUAL
62416: IFTRUE 62456
62418: LD_INT 13
62420: DOUBLE
62421: EQUAL
62422: IFTRUE 62456
62424: LD_INT 12
62426: DOUBLE
62427: EQUAL
62428: IFTRUE 62456
62430: LD_INT 15
62432: DOUBLE
62433: EQUAL
62434: IFTRUE 62456
62436: LD_INT 11
62438: DOUBLE
62439: EQUAL
62440: IFTRUE 62456
62442: LD_INT 14
62444: DOUBLE
62445: EQUAL
62446: IFTRUE 62456
62448: LD_INT 10
62450: DOUBLE
62451: EQUAL
62452: IFTRUE 62456
62454: GO 62512
62456: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62457: LD_ADDR_VAR 0 9
62461: PUSH
62462: LD_VAR 0 41
62466: PUSH
62467: LD_VAR 0 42
62471: PUSH
62472: LD_VAR 0 43
62476: PUSH
62477: LD_VAR 0 44
62481: PUSH
62482: LD_VAR 0 45
62486: PUSH
62487: LD_VAR 0 46
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: PUSH
62500: LD_VAR 0 4
62504: PUSH
62505: LD_INT 1
62507: PLUS
62508: ARRAY
62509: ST_TO_ADDR
62510: GO 62765
62512: LD_INT 36
62514: DOUBLE
62515: EQUAL
62516: IFTRUE 62520
62518: GO 62576
62520: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62521: LD_ADDR_VAR 0 9
62525: PUSH
62526: LD_VAR 0 47
62530: PUSH
62531: LD_VAR 0 48
62535: PUSH
62536: LD_VAR 0 49
62540: PUSH
62541: LD_VAR 0 50
62545: PUSH
62546: LD_VAR 0 51
62550: PUSH
62551: LD_VAR 0 52
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: PUSH
62564: LD_VAR 0 4
62568: PUSH
62569: LD_INT 1
62571: PLUS
62572: ARRAY
62573: ST_TO_ADDR
62574: GO 62765
62576: LD_INT 4
62578: DOUBLE
62579: EQUAL
62580: IFTRUE 62602
62582: LD_INT 5
62584: DOUBLE
62585: EQUAL
62586: IFTRUE 62602
62588: LD_INT 34
62590: DOUBLE
62591: EQUAL
62592: IFTRUE 62602
62594: LD_INT 37
62596: DOUBLE
62597: EQUAL
62598: IFTRUE 62602
62600: GO 62658
62602: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62603: LD_ADDR_VAR 0 9
62607: PUSH
62608: LD_VAR 0 53
62612: PUSH
62613: LD_VAR 0 54
62617: PUSH
62618: LD_VAR 0 55
62622: PUSH
62623: LD_VAR 0 56
62627: PUSH
62628: LD_VAR 0 57
62632: PUSH
62633: LD_VAR 0 58
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: PUSH
62646: LD_VAR 0 4
62650: PUSH
62651: LD_INT 1
62653: PLUS
62654: ARRAY
62655: ST_TO_ADDR
62656: GO 62765
62658: LD_INT 31
62660: DOUBLE
62661: EQUAL
62662: IFTRUE 62708
62664: LD_INT 32
62666: DOUBLE
62667: EQUAL
62668: IFTRUE 62708
62670: LD_INT 33
62672: DOUBLE
62673: EQUAL
62674: IFTRUE 62708
62676: LD_INT 27
62678: DOUBLE
62679: EQUAL
62680: IFTRUE 62708
62682: LD_INT 26
62684: DOUBLE
62685: EQUAL
62686: IFTRUE 62708
62688: LD_INT 28
62690: DOUBLE
62691: EQUAL
62692: IFTRUE 62708
62694: LD_INT 29
62696: DOUBLE
62697: EQUAL
62698: IFTRUE 62708
62700: LD_INT 30
62702: DOUBLE
62703: EQUAL
62704: IFTRUE 62708
62706: GO 62764
62708: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62709: LD_ADDR_VAR 0 9
62713: PUSH
62714: LD_VAR 0 59
62718: PUSH
62719: LD_VAR 0 60
62723: PUSH
62724: LD_VAR 0 61
62728: PUSH
62729: LD_VAR 0 62
62733: PUSH
62734: LD_VAR 0 63
62738: PUSH
62739: LD_VAR 0 64
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: LIST
62750: LIST
62751: PUSH
62752: LD_VAR 0 4
62756: PUSH
62757: LD_INT 1
62759: PLUS
62760: ARRAY
62761: ST_TO_ADDR
62762: GO 62765
62764: POP
// temp_list2 = [ ] ;
62765: LD_ADDR_VAR 0 10
62769: PUSH
62770: EMPTY
62771: ST_TO_ADDR
// for i in temp_list do
62772: LD_ADDR_VAR 0 8
62776: PUSH
62777: LD_VAR 0 9
62781: PUSH
62782: FOR_IN
62783: IFFALSE 62835
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62785: LD_ADDR_VAR 0 10
62789: PUSH
62790: LD_VAR 0 10
62794: PUSH
62795: LD_VAR 0 8
62799: PUSH
62800: LD_INT 1
62802: ARRAY
62803: PUSH
62804: LD_VAR 0 2
62808: PLUS
62809: PUSH
62810: LD_VAR 0 8
62814: PUSH
62815: LD_INT 2
62817: ARRAY
62818: PUSH
62819: LD_VAR 0 3
62823: PLUS
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: EMPTY
62830: LIST
62831: ADD
62832: ST_TO_ADDR
62833: GO 62782
62835: POP
62836: POP
// result = temp_list2 ;
62837: LD_ADDR_VAR 0 7
62841: PUSH
62842: LD_VAR 0 10
62846: ST_TO_ADDR
// end ;
62847: LD_VAR 0 7
62851: RET
// export function EnemyInRange ( unit , dist ) ; begin
62852: LD_INT 0
62854: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62855: LD_ADDR_VAR 0 3
62859: PUSH
62860: LD_VAR 0 1
62864: PPUSH
62865: CALL_OW 255
62869: PPUSH
62870: LD_VAR 0 1
62874: PPUSH
62875: CALL_OW 250
62879: PPUSH
62880: LD_VAR 0 1
62884: PPUSH
62885: CALL_OW 251
62889: PPUSH
62890: LD_VAR 0 2
62894: PPUSH
62895: CALL 36225 0 4
62899: PUSH
62900: LD_INT 4
62902: ARRAY
62903: ST_TO_ADDR
// end ;
62904: LD_VAR 0 3
62908: RET
// export function PlayerSeeMe ( unit ) ; begin
62909: LD_INT 0
62911: PPUSH
// result := See ( your_side , unit ) ;
62912: LD_ADDR_VAR 0 2
62916: PUSH
62917: LD_OWVAR 2
62921: PPUSH
62922: LD_VAR 0 1
62926: PPUSH
62927: CALL_OW 292
62931: ST_TO_ADDR
// end ;
62932: LD_VAR 0 2
62936: RET
// export function ReverseDir ( unit ) ; begin
62937: LD_INT 0
62939: PPUSH
// if not unit then
62940: LD_VAR 0 1
62944: NOT
62945: IFFALSE 62949
// exit ;
62947: GO 62972
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62949: LD_ADDR_VAR 0 2
62953: PUSH
62954: LD_VAR 0 1
62958: PPUSH
62959: CALL_OW 254
62963: PUSH
62964: LD_INT 3
62966: PLUS
62967: PUSH
62968: LD_INT 6
62970: MOD
62971: ST_TO_ADDR
// end ;
62972: LD_VAR 0 2
62976: RET
// export function ReverseArray ( array ) ; var i ; begin
62977: LD_INT 0
62979: PPUSH
62980: PPUSH
// if not array then
62981: LD_VAR 0 1
62985: NOT
62986: IFFALSE 62990
// exit ;
62988: GO 63045
// result := [ ] ;
62990: LD_ADDR_VAR 0 2
62994: PUSH
62995: EMPTY
62996: ST_TO_ADDR
// for i := array downto 1 do
62997: LD_ADDR_VAR 0 3
63001: PUSH
63002: DOUBLE
63003: LD_VAR 0 1
63007: INC
63008: ST_TO_ADDR
63009: LD_INT 1
63011: PUSH
63012: FOR_DOWNTO
63013: IFFALSE 63043
// result := Join ( result , array [ i ] ) ;
63015: LD_ADDR_VAR 0 2
63019: PUSH
63020: LD_VAR 0 2
63024: PPUSH
63025: LD_VAR 0 1
63029: PUSH
63030: LD_VAR 0 3
63034: ARRAY
63035: PPUSH
63036: CALL 67701 0 2
63040: ST_TO_ADDR
63041: GO 63012
63043: POP
63044: POP
// end ;
63045: LD_VAR 0 2
63049: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63050: LD_INT 0
63052: PPUSH
63053: PPUSH
63054: PPUSH
63055: PPUSH
63056: PPUSH
63057: PPUSH
// if not unit or not hexes then
63058: LD_VAR 0 1
63062: NOT
63063: PUSH
63064: LD_VAR 0 2
63068: NOT
63069: OR
63070: IFFALSE 63074
// exit ;
63072: GO 63197
// dist := 9999 ;
63074: LD_ADDR_VAR 0 5
63078: PUSH
63079: LD_INT 9999
63081: ST_TO_ADDR
// for i = 1 to hexes do
63082: LD_ADDR_VAR 0 4
63086: PUSH
63087: DOUBLE
63088: LD_INT 1
63090: DEC
63091: ST_TO_ADDR
63092: LD_VAR 0 2
63096: PUSH
63097: FOR_TO
63098: IFFALSE 63185
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63100: LD_ADDR_VAR 0 6
63104: PUSH
63105: LD_VAR 0 1
63109: PPUSH
63110: LD_VAR 0 2
63114: PUSH
63115: LD_VAR 0 4
63119: ARRAY
63120: PUSH
63121: LD_INT 1
63123: ARRAY
63124: PPUSH
63125: LD_VAR 0 2
63129: PUSH
63130: LD_VAR 0 4
63134: ARRAY
63135: PUSH
63136: LD_INT 2
63138: ARRAY
63139: PPUSH
63140: CALL_OW 297
63144: ST_TO_ADDR
// if tdist < dist then
63145: LD_VAR 0 6
63149: PUSH
63150: LD_VAR 0 5
63154: LESS
63155: IFFALSE 63183
// begin hex := hexes [ i ] ;
63157: LD_ADDR_VAR 0 8
63161: PUSH
63162: LD_VAR 0 2
63166: PUSH
63167: LD_VAR 0 4
63171: ARRAY
63172: ST_TO_ADDR
// dist := tdist ;
63173: LD_ADDR_VAR 0 5
63177: PUSH
63178: LD_VAR 0 6
63182: ST_TO_ADDR
// end ; end ;
63183: GO 63097
63185: POP
63186: POP
// result := hex ;
63187: LD_ADDR_VAR 0 3
63191: PUSH
63192: LD_VAR 0 8
63196: ST_TO_ADDR
// end ;
63197: LD_VAR 0 3
63201: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63202: LD_INT 0
63204: PPUSH
63205: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63206: LD_VAR 0 1
63210: NOT
63211: PUSH
63212: LD_VAR 0 1
63216: PUSH
63217: LD_INT 21
63219: PUSH
63220: LD_INT 2
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: PUSH
63227: LD_INT 23
63229: PUSH
63230: LD_INT 2
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PPUSH
63241: CALL_OW 69
63245: IN
63246: NOT
63247: OR
63248: IFFALSE 63252
// exit ;
63250: GO 63299
// for i = 1 to 3 do
63252: LD_ADDR_VAR 0 3
63256: PUSH
63257: DOUBLE
63258: LD_INT 1
63260: DEC
63261: ST_TO_ADDR
63262: LD_INT 3
63264: PUSH
63265: FOR_TO
63266: IFFALSE 63297
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63268: LD_VAR 0 1
63272: PPUSH
63273: CALL_OW 250
63277: PPUSH
63278: LD_VAR 0 1
63282: PPUSH
63283: CALL_OW 251
63287: PPUSH
63288: LD_INT 1
63290: PPUSH
63291: CALL_OW 453
63295: GO 63265
63297: POP
63298: POP
// end ;
63299: LD_VAR 0 2
63303: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63304: LD_INT 0
63306: PPUSH
63307: PPUSH
63308: PPUSH
63309: PPUSH
63310: PPUSH
63311: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63312: LD_VAR 0 1
63316: NOT
63317: PUSH
63318: LD_VAR 0 2
63322: NOT
63323: OR
63324: PUSH
63325: LD_VAR 0 1
63329: PPUSH
63330: CALL_OW 314
63334: OR
63335: IFFALSE 63339
// exit ;
63337: GO 63806
// if GetLives ( i ) < 250 then
63339: LD_VAR 0 4
63343: PPUSH
63344: CALL_OW 256
63348: PUSH
63349: LD_INT 250
63351: LESS
63352: IFFALSE 63365
// begin ComAutodestruct ( i ) ;
63354: LD_VAR 0 4
63358: PPUSH
63359: CALL 63202 0 1
// exit ;
63363: GO 63806
// end ; x := GetX ( enemy_unit ) ;
63365: LD_ADDR_VAR 0 7
63369: PUSH
63370: LD_VAR 0 2
63374: PPUSH
63375: CALL_OW 250
63379: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63380: LD_ADDR_VAR 0 8
63384: PUSH
63385: LD_VAR 0 2
63389: PPUSH
63390: CALL_OW 251
63394: ST_TO_ADDR
// if not x or not y then
63395: LD_VAR 0 7
63399: NOT
63400: PUSH
63401: LD_VAR 0 8
63405: NOT
63406: OR
63407: IFFALSE 63411
// exit ;
63409: GO 63806
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63411: LD_ADDR_VAR 0 6
63415: PUSH
63416: LD_VAR 0 7
63420: PPUSH
63421: LD_INT 0
63423: PPUSH
63424: LD_INT 4
63426: PPUSH
63427: CALL_OW 272
63431: PUSH
63432: LD_VAR 0 8
63436: PPUSH
63437: LD_INT 0
63439: PPUSH
63440: LD_INT 4
63442: PPUSH
63443: CALL_OW 273
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_VAR 0 7
63456: PPUSH
63457: LD_INT 1
63459: PPUSH
63460: LD_INT 4
63462: PPUSH
63463: CALL_OW 272
63467: PUSH
63468: LD_VAR 0 8
63472: PPUSH
63473: LD_INT 1
63475: PPUSH
63476: LD_INT 4
63478: PPUSH
63479: CALL_OW 273
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_VAR 0 7
63492: PPUSH
63493: LD_INT 2
63495: PPUSH
63496: LD_INT 4
63498: PPUSH
63499: CALL_OW 272
63503: PUSH
63504: LD_VAR 0 8
63508: PPUSH
63509: LD_INT 2
63511: PPUSH
63512: LD_INT 4
63514: PPUSH
63515: CALL_OW 273
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: LD_VAR 0 7
63528: PPUSH
63529: LD_INT 3
63531: PPUSH
63532: LD_INT 4
63534: PPUSH
63535: CALL_OW 272
63539: PUSH
63540: LD_VAR 0 8
63544: PPUSH
63545: LD_INT 3
63547: PPUSH
63548: LD_INT 4
63550: PPUSH
63551: CALL_OW 273
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: LD_VAR 0 7
63564: PPUSH
63565: LD_INT 4
63567: PPUSH
63568: LD_INT 4
63570: PPUSH
63571: CALL_OW 272
63575: PUSH
63576: LD_VAR 0 8
63580: PPUSH
63581: LD_INT 4
63583: PPUSH
63584: LD_INT 4
63586: PPUSH
63587: CALL_OW 273
63591: PUSH
63592: EMPTY
63593: LIST
63594: LIST
63595: PUSH
63596: LD_VAR 0 7
63600: PPUSH
63601: LD_INT 5
63603: PPUSH
63604: LD_INT 4
63606: PPUSH
63607: CALL_OW 272
63611: PUSH
63612: LD_VAR 0 8
63616: PPUSH
63617: LD_INT 5
63619: PPUSH
63620: LD_INT 4
63622: PPUSH
63623: CALL_OW 273
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: LIST
63639: ST_TO_ADDR
// for i = tmp downto 1 do
63640: LD_ADDR_VAR 0 4
63644: PUSH
63645: DOUBLE
63646: LD_VAR 0 6
63650: INC
63651: ST_TO_ADDR
63652: LD_INT 1
63654: PUSH
63655: FOR_DOWNTO
63656: IFFALSE 63757
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63658: LD_VAR 0 6
63662: PUSH
63663: LD_VAR 0 4
63667: ARRAY
63668: PUSH
63669: LD_INT 1
63671: ARRAY
63672: PPUSH
63673: LD_VAR 0 6
63677: PUSH
63678: LD_VAR 0 4
63682: ARRAY
63683: PUSH
63684: LD_INT 2
63686: ARRAY
63687: PPUSH
63688: CALL_OW 488
63692: NOT
63693: PUSH
63694: LD_VAR 0 6
63698: PUSH
63699: LD_VAR 0 4
63703: ARRAY
63704: PUSH
63705: LD_INT 1
63707: ARRAY
63708: PPUSH
63709: LD_VAR 0 6
63713: PUSH
63714: LD_VAR 0 4
63718: ARRAY
63719: PUSH
63720: LD_INT 2
63722: ARRAY
63723: PPUSH
63724: CALL_OW 428
63728: PUSH
63729: LD_INT 0
63731: NONEQUAL
63732: OR
63733: IFFALSE 63755
// tmp := Delete ( tmp , i ) ;
63735: LD_ADDR_VAR 0 6
63739: PUSH
63740: LD_VAR 0 6
63744: PPUSH
63745: LD_VAR 0 4
63749: PPUSH
63750: CALL_OW 3
63754: ST_TO_ADDR
63755: GO 63655
63757: POP
63758: POP
// j := GetClosestHex ( unit , tmp ) ;
63759: LD_ADDR_VAR 0 5
63763: PUSH
63764: LD_VAR 0 1
63768: PPUSH
63769: LD_VAR 0 6
63773: PPUSH
63774: CALL 63050 0 2
63778: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63779: LD_VAR 0 1
63783: PPUSH
63784: LD_VAR 0 5
63788: PUSH
63789: LD_INT 1
63791: ARRAY
63792: PPUSH
63793: LD_VAR 0 5
63797: PUSH
63798: LD_INT 2
63800: ARRAY
63801: PPUSH
63802: CALL_OW 111
// end ;
63806: LD_VAR 0 3
63810: RET
// export function PrepareApemanSoldier ( ) ; begin
63811: LD_INT 0
63813: PPUSH
// uc_nation := 0 ;
63814: LD_ADDR_OWVAR 21
63818: PUSH
63819: LD_INT 0
63821: ST_TO_ADDR
// hc_sex := sex_male ;
63822: LD_ADDR_OWVAR 27
63826: PUSH
63827: LD_INT 1
63829: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63830: LD_ADDR_OWVAR 28
63834: PUSH
63835: LD_INT 15
63837: ST_TO_ADDR
// hc_gallery :=  ;
63838: LD_ADDR_OWVAR 33
63842: PUSH
63843: LD_STRING 
63845: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63846: LD_ADDR_OWVAR 31
63850: PUSH
63851: LD_INT 0
63853: PPUSH
63854: LD_INT 3
63856: PPUSH
63857: CALL_OW 12
63861: PUSH
63862: LD_INT 0
63864: PPUSH
63865: LD_INT 3
63867: PPUSH
63868: CALL_OW 12
63872: PUSH
63873: LD_INT 0
63875: PUSH
63876: LD_INT 0
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: LIST
63883: LIST
63884: ST_TO_ADDR
// end ;
63885: LD_VAR 0 1
63889: RET
// export function PrepareApemanEngineer ( ) ; begin
63890: LD_INT 0
63892: PPUSH
// uc_nation := 0 ;
63893: LD_ADDR_OWVAR 21
63897: PUSH
63898: LD_INT 0
63900: ST_TO_ADDR
// hc_sex := sex_male ;
63901: LD_ADDR_OWVAR 27
63905: PUSH
63906: LD_INT 1
63908: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63909: LD_ADDR_OWVAR 28
63913: PUSH
63914: LD_INT 16
63916: ST_TO_ADDR
// hc_gallery :=  ;
63917: LD_ADDR_OWVAR 33
63921: PUSH
63922: LD_STRING 
63924: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63925: LD_ADDR_OWVAR 31
63929: PUSH
63930: LD_INT 0
63932: PPUSH
63933: LD_INT 3
63935: PPUSH
63936: CALL_OW 12
63940: PUSH
63941: LD_INT 0
63943: PPUSH
63944: LD_INT 3
63946: PPUSH
63947: CALL_OW 12
63951: PUSH
63952: LD_INT 0
63954: PUSH
63955: LD_INT 0
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: ST_TO_ADDR
// end ;
63964: LD_VAR 0 1
63968: RET
// export function PrepareApeman ( agressivity ) ; begin
63969: LD_INT 0
63971: PPUSH
// uc_side := 0 ;
63972: LD_ADDR_OWVAR 20
63976: PUSH
63977: LD_INT 0
63979: ST_TO_ADDR
// uc_nation := 0 ;
63980: LD_ADDR_OWVAR 21
63984: PUSH
63985: LD_INT 0
63987: ST_TO_ADDR
// hc_sex := sex_male ;
63988: LD_ADDR_OWVAR 27
63992: PUSH
63993: LD_INT 1
63995: ST_TO_ADDR
// hc_class := class_apeman ;
63996: LD_ADDR_OWVAR 28
64000: PUSH
64001: LD_INT 12
64003: ST_TO_ADDR
// hc_gallery :=  ;
64004: LD_ADDR_OWVAR 33
64008: PUSH
64009: LD_STRING 
64011: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64012: LD_ADDR_OWVAR 35
64016: PUSH
64017: LD_VAR 0 1
64021: NEG
64022: PPUSH
64023: LD_VAR 0 1
64027: PPUSH
64028: CALL_OW 12
64032: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64033: LD_ADDR_OWVAR 31
64037: PUSH
64038: LD_INT 0
64040: PPUSH
64041: LD_INT 3
64043: PPUSH
64044: CALL_OW 12
64048: PUSH
64049: LD_INT 0
64051: PPUSH
64052: LD_INT 3
64054: PPUSH
64055: CALL_OW 12
64059: PUSH
64060: LD_INT 0
64062: PUSH
64063: LD_INT 0
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: ST_TO_ADDR
// end ;
64072: LD_VAR 0 2
64076: RET
// export function PrepareTiger ( agressivity ) ; begin
64077: LD_INT 0
64079: PPUSH
// uc_side := 0 ;
64080: LD_ADDR_OWVAR 20
64084: PUSH
64085: LD_INT 0
64087: ST_TO_ADDR
// uc_nation := 0 ;
64088: LD_ADDR_OWVAR 21
64092: PUSH
64093: LD_INT 0
64095: ST_TO_ADDR
// hc_class := class_tiger ;
64096: LD_ADDR_OWVAR 28
64100: PUSH
64101: LD_INT 14
64103: ST_TO_ADDR
// hc_gallery :=  ;
64104: LD_ADDR_OWVAR 33
64108: PUSH
64109: LD_STRING 
64111: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64112: LD_ADDR_OWVAR 35
64116: PUSH
64117: LD_VAR 0 1
64121: NEG
64122: PPUSH
64123: LD_VAR 0 1
64127: PPUSH
64128: CALL_OW 12
64132: ST_TO_ADDR
// end ;
64133: LD_VAR 0 2
64137: RET
// export function PrepareEnchidna ( ) ; begin
64138: LD_INT 0
64140: PPUSH
// uc_side := 0 ;
64141: LD_ADDR_OWVAR 20
64145: PUSH
64146: LD_INT 0
64148: ST_TO_ADDR
// uc_nation := 0 ;
64149: LD_ADDR_OWVAR 21
64153: PUSH
64154: LD_INT 0
64156: ST_TO_ADDR
// hc_class := class_baggie ;
64157: LD_ADDR_OWVAR 28
64161: PUSH
64162: LD_INT 13
64164: ST_TO_ADDR
// hc_gallery :=  ;
64165: LD_ADDR_OWVAR 33
64169: PUSH
64170: LD_STRING 
64172: ST_TO_ADDR
// end ;
64173: LD_VAR 0 1
64177: RET
// export function PrepareFrog ( ) ; begin
64178: LD_INT 0
64180: PPUSH
// uc_side := 0 ;
64181: LD_ADDR_OWVAR 20
64185: PUSH
64186: LD_INT 0
64188: ST_TO_ADDR
// uc_nation := 0 ;
64189: LD_ADDR_OWVAR 21
64193: PUSH
64194: LD_INT 0
64196: ST_TO_ADDR
// hc_class := class_frog ;
64197: LD_ADDR_OWVAR 28
64201: PUSH
64202: LD_INT 19
64204: ST_TO_ADDR
// hc_gallery :=  ;
64205: LD_ADDR_OWVAR 33
64209: PUSH
64210: LD_STRING 
64212: ST_TO_ADDR
// end ;
64213: LD_VAR 0 1
64217: RET
// export function PrepareFish ( ) ; begin
64218: LD_INT 0
64220: PPUSH
// uc_side := 0 ;
64221: LD_ADDR_OWVAR 20
64225: PUSH
64226: LD_INT 0
64228: ST_TO_ADDR
// uc_nation := 0 ;
64229: LD_ADDR_OWVAR 21
64233: PUSH
64234: LD_INT 0
64236: ST_TO_ADDR
// hc_class := class_fish ;
64237: LD_ADDR_OWVAR 28
64241: PUSH
64242: LD_INT 20
64244: ST_TO_ADDR
// hc_gallery :=  ;
64245: LD_ADDR_OWVAR 33
64249: PUSH
64250: LD_STRING 
64252: ST_TO_ADDR
// end ;
64253: LD_VAR 0 1
64257: RET
// export function PrepareBird ( ) ; begin
64258: LD_INT 0
64260: PPUSH
// uc_side := 0 ;
64261: LD_ADDR_OWVAR 20
64265: PUSH
64266: LD_INT 0
64268: ST_TO_ADDR
// uc_nation := 0 ;
64269: LD_ADDR_OWVAR 21
64273: PUSH
64274: LD_INT 0
64276: ST_TO_ADDR
// hc_class := class_phororhacos ;
64277: LD_ADDR_OWVAR 28
64281: PUSH
64282: LD_INT 18
64284: ST_TO_ADDR
// hc_gallery :=  ;
64285: LD_ADDR_OWVAR 33
64289: PUSH
64290: LD_STRING 
64292: ST_TO_ADDR
// end ;
64293: LD_VAR 0 1
64297: RET
// export function PrepareHorse ( ) ; begin
64298: LD_INT 0
64300: PPUSH
// uc_side := 0 ;
64301: LD_ADDR_OWVAR 20
64305: PUSH
64306: LD_INT 0
64308: ST_TO_ADDR
// uc_nation := 0 ;
64309: LD_ADDR_OWVAR 21
64313: PUSH
64314: LD_INT 0
64316: ST_TO_ADDR
// hc_class := class_horse ;
64317: LD_ADDR_OWVAR 28
64321: PUSH
64322: LD_INT 21
64324: ST_TO_ADDR
// hc_gallery :=  ;
64325: LD_ADDR_OWVAR 33
64329: PUSH
64330: LD_STRING 
64332: ST_TO_ADDR
// end ;
64333: LD_VAR 0 1
64337: RET
// export function PrepareMastodont ( ) ; begin
64338: LD_INT 0
64340: PPUSH
// uc_side := 0 ;
64341: LD_ADDR_OWVAR 20
64345: PUSH
64346: LD_INT 0
64348: ST_TO_ADDR
// uc_nation := 0 ;
64349: LD_ADDR_OWVAR 21
64353: PUSH
64354: LD_INT 0
64356: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64357: LD_ADDR_OWVAR 37
64361: PUSH
64362: LD_INT 31
64364: ST_TO_ADDR
// vc_control := control_rider ;
64365: LD_ADDR_OWVAR 38
64369: PUSH
64370: LD_INT 4
64372: ST_TO_ADDR
// end ;
64373: LD_VAR 0 1
64377: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64378: LD_INT 0
64380: PPUSH
64381: PPUSH
64382: PPUSH
// uc_side = 0 ;
64383: LD_ADDR_OWVAR 20
64387: PUSH
64388: LD_INT 0
64390: ST_TO_ADDR
// uc_nation = 0 ;
64391: LD_ADDR_OWVAR 21
64395: PUSH
64396: LD_INT 0
64398: ST_TO_ADDR
// InitHc_All ( ) ;
64399: CALL_OW 584
// InitVc ;
64403: CALL_OW 20
// if mastodonts then
64407: LD_VAR 0 6
64411: IFFALSE 64478
// for i = 1 to mastodonts do
64413: LD_ADDR_VAR 0 11
64417: PUSH
64418: DOUBLE
64419: LD_INT 1
64421: DEC
64422: ST_TO_ADDR
64423: LD_VAR 0 6
64427: PUSH
64428: FOR_TO
64429: IFFALSE 64476
// begin vc_chassis := 31 ;
64431: LD_ADDR_OWVAR 37
64435: PUSH
64436: LD_INT 31
64438: ST_TO_ADDR
// vc_control := control_rider ;
64439: LD_ADDR_OWVAR 38
64443: PUSH
64444: LD_INT 4
64446: ST_TO_ADDR
// animal := CreateVehicle ;
64447: LD_ADDR_VAR 0 12
64451: PUSH
64452: CALL_OW 45
64456: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64457: LD_VAR 0 12
64461: PPUSH
64462: LD_VAR 0 8
64466: PPUSH
64467: LD_INT 0
64469: PPUSH
64470: CALL 66606 0 3
// end ;
64474: GO 64428
64476: POP
64477: POP
// if horses then
64478: LD_VAR 0 5
64482: IFFALSE 64549
// for i = 1 to horses do
64484: LD_ADDR_VAR 0 11
64488: PUSH
64489: DOUBLE
64490: LD_INT 1
64492: DEC
64493: ST_TO_ADDR
64494: LD_VAR 0 5
64498: PUSH
64499: FOR_TO
64500: IFFALSE 64547
// begin hc_class := 21 ;
64502: LD_ADDR_OWVAR 28
64506: PUSH
64507: LD_INT 21
64509: ST_TO_ADDR
// hc_gallery :=  ;
64510: LD_ADDR_OWVAR 33
64514: PUSH
64515: LD_STRING 
64517: ST_TO_ADDR
// animal := CreateHuman ;
64518: LD_ADDR_VAR 0 12
64522: PUSH
64523: CALL_OW 44
64527: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64528: LD_VAR 0 12
64532: PPUSH
64533: LD_VAR 0 8
64537: PPUSH
64538: LD_INT 0
64540: PPUSH
64541: CALL 66606 0 3
// end ;
64545: GO 64499
64547: POP
64548: POP
// if birds then
64549: LD_VAR 0 1
64553: IFFALSE 64620
// for i = 1 to birds do
64555: LD_ADDR_VAR 0 11
64559: PUSH
64560: DOUBLE
64561: LD_INT 1
64563: DEC
64564: ST_TO_ADDR
64565: LD_VAR 0 1
64569: PUSH
64570: FOR_TO
64571: IFFALSE 64618
// begin hc_class := 18 ;
64573: LD_ADDR_OWVAR 28
64577: PUSH
64578: LD_INT 18
64580: ST_TO_ADDR
// hc_gallery =  ;
64581: LD_ADDR_OWVAR 33
64585: PUSH
64586: LD_STRING 
64588: ST_TO_ADDR
// animal := CreateHuman ;
64589: LD_ADDR_VAR 0 12
64593: PUSH
64594: CALL_OW 44
64598: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64599: LD_VAR 0 12
64603: PPUSH
64604: LD_VAR 0 8
64608: PPUSH
64609: LD_INT 0
64611: PPUSH
64612: CALL 66606 0 3
// end ;
64616: GO 64570
64618: POP
64619: POP
// if tigers then
64620: LD_VAR 0 2
64624: IFFALSE 64708
// for i = 1 to tigers do
64626: LD_ADDR_VAR 0 11
64630: PUSH
64631: DOUBLE
64632: LD_INT 1
64634: DEC
64635: ST_TO_ADDR
64636: LD_VAR 0 2
64640: PUSH
64641: FOR_TO
64642: IFFALSE 64706
// begin hc_class = class_tiger ;
64644: LD_ADDR_OWVAR 28
64648: PUSH
64649: LD_INT 14
64651: ST_TO_ADDR
// hc_gallery =  ;
64652: LD_ADDR_OWVAR 33
64656: PUSH
64657: LD_STRING 
64659: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64660: LD_ADDR_OWVAR 35
64664: PUSH
64665: LD_INT 7
64667: NEG
64668: PPUSH
64669: LD_INT 7
64671: PPUSH
64672: CALL_OW 12
64676: ST_TO_ADDR
// animal := CreateHuman ;
64677: LD_ADDR_VAR 0 12
64681: PUSH
64682: CALL_OW 44
64686: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64687: LD_VAR 0 12
64691: PPUSH
64692: LD_VAR 0 8
64696: PPUSH
64697: LD_INT 0
64699: PPUSH
64700: CALL 66606 0 3
// end ;
64704: GO 64641
64706: POP
64707: POP
// if apemans then
64708: LD_VAR 0 3
64712: IFFALSE 64835
// for i = 1 to apemans do
64714: LD_ADDR_VAR 0 11
64718: PUSH
64719: DOUBLE
64720: LD_INT 1
64722: DEC
64723: ST_TO_ADDR
64724: LD_VAR 0 3
64728: PUSH
64729: FOR_TO
64730: IFFALSE 64833
// begin hc_class = class_apeman ;
64732: LD_ADDR_OWVAR 28
64736: PUSH
64737: LD_INT 12
64739: ST_TO_ADDR
// hc_gallery =  ;
64740: LD_ADDR_OWVAR 33
64744: PUSH
64745: LD_STRING 
64747: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64748: LD_ADDR_OWVAR 35
64752: PUSH
64753: LD_INT 2
64755: NEG
64756: PPUSH
64757: LD_INT 2
64759: PPUSH
64760: CALL_OW 12
64764: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64765: LD_ADDR_OWVAR 31
64769: PUSH
64770: LD_INT 1
64772: PPUSH
64773: LD_INT 3
64775: PPUSH
64776: CALL_OW 12
64780: PUSH
64781: LD_INT 1
64783: PPUSH
64784: LD_INT 3
64786: PPUSH
64787: CALL_OW 12
64791: PUSH
64792: LD_INT 0
64794: PUSH
64795: LD_INT 0
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: LIST
64802: LIST
64803: ST_TO_ADDR
// animal := CreateHuman ;
64804: LD_ADDR_VAR 0 12
64808: PUSH
64809: CALL_OW 44
64813: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64814: LD_VAR 0 12
64818: PPUSH
64819: LD_VAR 0 8
64823: PPUSH
64824: LD_INT 0
64826: PPUSH
64827: CALL 66606 0 3
// end ;
64831: GO 64729
64833: POP
64834: POP
// if enchidnas then
64835: LD_VAR 0 4
64839: IFFALSE 64906
// for i = 1 to enchidnas do
64841: LD_ADDR_VAR 0 11
64845: PUSH
64846: DOUBLE
64847: LD_INT 1
64849: DEC
64850: ST_TO_ADDR
64851: LD_VAR 0 4
64855: PUSH
64856: FOR_TO
64857: IFFALSE 64904
// begin hc_class = 13 ;
64859: LD_ADDR_OWVAR 28
64863: PUSH
64864: LD_INT 13
64866: ST_TO_ADDR
// hc_gallery =  ;
64867: LD_ADDR_OWVAR 33
64871: PUSH
64872: LD_STRING 
64874: ST_TO_ADDR
// animal := CreateHuman ;
64875: LD_ADDR_VAR 0 12
64879: PUSH
64880: CALL_OW 44
64884: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64885: LD_VAR 0 12
64889: PPUSH
64890: LD_VAR 0 8
64894: PPUSH
64895: LD_INT 0
64897: PPUSH
64898: CALL 66606 0 3
// end ;
64902: GO 64856
64904: POP
64905: POP
// if fishes then
64906: LD_VAR 0 7
64910: IFFALSE 64977
// for i = 1 to fishes do
64912: LD_ADDR_VAR 0 11
64916: PUSH
64917: DOUBLE
64918: LD_INT 1
64920: DEC
64921: ST_TO_ADDR
64922: LD_VAR 0 7
64926: PUSH
64927: FOR_TO
64928: IFFALSE 64975
// begin hc_class = 20 ;
64930: LD_ADDR_OWVAR 28
64934: PUSH
64935: LD_INT 20
64937: ST_TO_ADDR
// hc_gallery =  ;
64938: LD_ADDR_OWVAR 33
64942: PUSH
64943: LD_STRING 
64945: ST_TO_ADDR
// animal := CreateHuman ;
64946: LD_ADDR_VAR 0 12
64950: PUSH
64951: CALL_OW 44
64955: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64956: LD_VAR 0 12
64960: PPUSH
64961: LD_VAR 0 9
64965: PPUSH
64966: LD_INT 0
64968: PPUSH
64969: CALL 66606 0 3
// end ;
64973: GO 64927
64975: POP
64976: POP
// end ;
64977: LD_VAR 0 10
64981: RET
// export function WantHeal ( sci , unit ) ; begin
64982: LD_INT 0
64984: PPUSH
// if GetTaskList ( sci ) > 0 then
64985: LD_VAR 0 1
64989: PPUSH
64990: CALL_OW 437
64994: PUSH
64995: LD_INT 0
64997: GREATER
64998: IFFALSE 65068
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65000: LD_VAR 0 1
65004: PPUSH
65005: CALL_OW 437
65009: PUSH
65010: LD_INT 1
65012: ARRAY
65013: PUSH
65014: LD_INT 1
65016: ARRAY
65017: PUSH
65018: LD_STRING l
65020: EQUAL
65021: PUSH
65022: LD_VAR 0 1
65026: PPUSH
65027: CALL_OW 437
65031: PUSH
65032: LD_INT 1
65034: ARRAY
65035: PUSH
65036: LD_INT 4
65038: ARRAY
65039: PUSH
65040: LD_VAR 0 2
65044: EQUAL
65045: AND
65046: IFFALSE 65058
// result := true else
65048: LD_ADDR_VAR 0 3
65052: PUSH
65053: LD_INT 1
65055: ST_TO_ADDR
65056: GO 65066
// result := false ;
65058: LD_ADDR_VAR 0 3
65062: PUSH
65063: LD_INT 0
65065: ST_TO_ADDR
// end else
65066: GO 65076
// result := false ;
65068: LD_ADDR_VAR 0 3
65072: PUSH
65073: LD_INT 0
65075: ST_TO_ADDR
// end ;
65076: LD_VAR 0 3
65080: RET
// export function HealTarget ( sci ) ; begin
65081: LD_INT 0
65083: PPUSH
// if not sci then
65084: LD_VAR 0 1
65088: NOT
65089: IFFALSE 65093
// exit ;
65091: GO 65158
// result := 0 ;
65093: LD_ADDR_VAR 0 2
65097: PUSH
65098: LD_INT 0
65100: ST_TO_ADDR
// if GetTaskList ( sci ) then
65101: LD_VAR 0 1
65105: PPUSH
65106: CALL_OW 437
65110: IFFALSE 65158
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65112: LD_VAR 0 1
65116: PPUSH
65117: CALL_OW 437
65121: PUSH
65122: LD_INT 1
65124: ARRAY
65125: PUSH
65126: LD_INT 1
65128: ARRAY
65129: PUSH
65130: LD_STRING l
65132: EQUAL
65133: IFFALSE 65158
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65135: LD_ADDR_VAR 0 2
65139: PUSH
65140: LD_VAR 0 1
65144: PPUSH
65145: CALL_OW 437
65149: PUSH
65150: LD_INT 1
65152: ARRAY
65153: PUSH
65154: LD_INT 4
65156: ARRAY
65157: ST_TO_ADDR
// end ;
65158: LD_VAR 0 2
65162: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65163: LD_INT 0
65165: PPUSH
65166: PPUSH
65167: PPUSH
65168: PPUSH
// if not base_units then
65169: LD_VAR 0 1
65173: NOT
65174: IFFALSE 65178
// exit ;
65176: GO 65265
// result := false ;
65178: LD_ADDR_VAR 0 2
65182: PUSH
65183: LD_INT 0
65185: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65186: LD_ADDR_VAR 0 5
65190: PUSH
65191: LD_VAR 0 1
65195: PPUSH
65196: LD_INT 21
65198: PUSH
65199: LD_INT 3
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PPUSH
65206: CALL_OW 72
65210: ST_TO_ADDR
// if not tmp then
65211: LD_VAR 0 5
65215: NOT
65216: IFFALSE 65220
// exit ;
65218: GO 65265
// for i in tmp do
65220: LD_ADDR_VAR 0 3
65224: PUSH
65225: LD_VAR 0 5
65229: PUSH
65230: FOR_IN
65231: IFFALSE 65263
// begin result := EnemyInRange ( i , 22 ) ;
65233: LD_ADDR_VAR 0 2
65237: PUSH
65238: LD_VAR 0 3
65242: PPUSH
65243: LD_INT 22
65245: PPUSH
65246: CALL 62852 0 2
65250: ST_TO_ADDR
// if result then
65251: LD_VAR 0 2
65255: IFFALSE 65261
// exit ;
65257: POP
65258: POP
65259: GO 65265
// end ;
65261: GO 65230
65263: POP
65264: POP
// end ;
65265: LD_VAR 0 2
65269: RET
// export function FilterByTag ( units , tag ) ; begin
65270: LD_INT 0
65272: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65273: LD_ADDR_VAR 0 3
65277: PUSH
65278: LD_VAR 0 1
65282: PPUSH
65283: LD_INT 120
65285: PUSH
65286: LD_VAR 0 2
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: PPUSH
65295: CALL_OW 72
65299: ST_TO_ADDR
// end ;
65300: LD_VAR 0 3
65304: RET
// export function IsDriver ( un ) ; begin
65305: LD_INT 0
65307: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65308: LD_ADDR_VAR 0 2
65312: PUSH
65313: LD_VAR 0 1
65317: PUSH
65318: LD_INT 55
65320: PUSH
65321: EMPTY
65322: LIST
65323: PPUSH
65324: CALL_OW 69
65328: IN
65329: ST_TO_ADDR
// end ;
65330: LD_VAR 0 2
65334: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65335: LD_INT 0
65337: PPUSH
65338: PPUSH
// list := [ ] ;
65339: LD_ADDR_VAR 0 5
65343: PUSH
65344: EMPTY
65345: ST_TO_ADDR
// case d of 0 :
65346: LD_VAR 0 3
65350: PUSH
65351: LD_INT 0
65353: DOUBLE
65354: EQUAL
65355: IFTRUE 65359
65357: GO 65492
65359: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65360: LD_ADDR_VAR 0 5
65364: PUSH
65365: LD_VAR 0 1
65369: PUSH
65370: LD_INT 4
65372: MINUS
65373: PUSH
65374: LD_VAR 0 2
65378: PUSH
65379: LD_INT 4
65381: MINUS
65382: PUSH
65383: LD_INT 2
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: LIST
65390: PUSH
65391: LD_VAR 0 1
65395: PUSH
65396: LD_INT 3
65398: MINUS
65399: PUSH
65400: LD_VAR 0 2
65404: PUSH
65405: LD_INT 1
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: LIST
65412: PUSH
65413: LD_VAR 0 1
65417: PUSH
65418: LD_INT 4
65420: PLUS
65421: PUSH
65422: LD_VAR 0 2
65426: PUSH
65427: LD_INT 4
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: LIST
65434: PUSH
65435: LD_VAR 0 1
65439: PUSH
65440: LD_INT 3
65442: PLUS
65443: PUSH
65444: LD_VAR 0 2
65448: PUSH
65449: LD_INT 3
65451: PLUS
65452: PUSH
65453: LD_INT 5
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: LIST
65460: PUSH
65461: LD_VAR 0 1
65465: PUSH
65466: LD_VAR 0 2
65470: PUSH
65471: LD_INT 4
65473: PLUS
65474: PUSH
65475: LD_INT 0
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: LIST
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: LIST
65487: LIST
65488: LIST
65489: ST_TO_ADDR
// end ; 1 :
65490: GO 66190
65492: LD_INT 1
65494: DOUBLE
65495: EQUAL
65496: IFTRUE 65500
65498: GO 65633
65500: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65501: LD_ADDR_VAR 0 5
65505: PUSH
65506: LD_VAR 0 1
65510: PUSH
65511: LD_VAR 0 2
65515: PUSH
65516: LD_INT 4
65518: MINUS
65519: PUSH
65520: LD_INT 3
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: LIST
65527: PUSH
65528: LD_VAR 0 1
65532: PUSH
65533: LD_INT 3
65535: MINUS
65536: PUSH
65537: LD_VAR 0 2
65541: PUSH
65542: LD_INT 3
65544: MINUS
65545: PUSH
65546: LD_INT 2
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: LIST
65553: PUSH
65554: LD_VAR 0 1
65558: PUSH
65559: LD_INT 4
65561: MINUS
65562: PUSH
65563: LD_VAR 0 2
65567: PUSH
65568: LD_INT 1
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: LIST
65575: PUSH
65576: LD_VAR 0 1
65580: PUSH
65581: LD_VAR 0 2
65585: PUSH
65586: LD_INT 3
65588: PLUS
65589: PUSH
65590: LD_INT 0
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: LIST
65597: PUSH
65598: LD_VAR 0 1
65602: PUSH
65603: LD_INT 4
65605: PLUS
65606: PUSH
65607: LD_VAR 0 2
65611: PUSH
65612: LD_INT 4
65614: PLUS
65615: PUSH
65616: LD_INT 5
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: LIST
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: LIST
65628: LIST
65629: LIST
65630: ST_TO_ADDR
// end ; 2 :
65631: GO 66190
65633: LD_INT 2
65635: DOUBLE
65636: EQUAL
65637: IFTRUE 65641
65639: GO 65770
65641: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65642: LD_ADDR_VAR 0 5
65646: PUSH
65647: LD_VAR 0 1
65651: PUSH
65652: LD_VAR 0 2
65656: PUSH
65657: LD_INT 3
65659: MINUS
65660: PUSH
65661: LD_INT 3
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: LIST
65668: PUSH
65669: LD_VAR 0 1
65673: PUSH
65674: LD_INT 4
65676: PLUS
65677: PUSH
65678: LD_VAR 0 2
65682: PUSH
65683: LD_INT 4
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: LIST
65690: PUSH
65691: LD_VAR 0 1
65695: PUSH
65696: LD_VAR 0 2
65700: PUSH
65701: LD_INT 4
65703: PLUS
65704: PUSH
65705: LD_INT 0
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: LIST
65712: PUSH
65713: LD_VAR 0 1
65717: PUSH
65718: LD_INT 3
65720: MINUS
65721: PUSH
65722: LD_VAR 0 2
65726: PUSH
65727: LD_INT 1
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: LIST
65734: PUSH
65735: LD_VAR 0 1
65739: PUSH
65740: LD_INT 4
65742: MINUS
65743: PUSH
65744: LD_VAR 0 2
65748: PUSH
65749: LD_INT 4
65751: MINUS
65752: PUSH
65753: LD_INT 2
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: LIST
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: LIST
65765: LIST
65766: LIST
65767: ST_TO_ADDR
// end ; 3 :
65768: GO 66190
65770: LD_INT 3
65772: DOUBLE
65773: EQUAL
65774: IFTRUE 65778
65776: GO 65911
65778: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65779: LD_ADDR_VAR 0 5
65783: PUSH
65784: LD_VAR 0 1
65788: PUSH
65789: LD_INT 3
65791: PLUS
65792: PUSH
65793: LD_VAR 0 2
65797: PUSH
65798: LD_INT 4
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: LIST
65805: PUSH
65806: LD_VAR 0 1
65810: PUSH
65811: LD_INT 4
65813: PLUS
65814: PUSH
65815: LD_VAR 0 2
65819: PUSH
65820: LD_INT 4
65822: PLUS
65823: PUSH
65824: LD_INT 5
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: LIST
65831: PUSH
65832: LD_VAR 0 1
65836: PUSH
65837: LD_INT 4
65839: MINUS
65840: PUSH
65841: LD_VAR 0 2
65845: PUSH
65846: LD_INT 1
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: LIST
65853: PUSH
65854: LD_VAR 0 1
65858: PUSH
65859: LD_VAR 0 2
65863: PUSH
65864: LD_INT 4
65866: MINUS
65867: PUSH
65868: LD_INT 3
65870: PUSH
65871: EMPTY
65872: LIST
65873: LIST
65874: LIST
65875: PUSH
65876: LD_VAR 0 1
65880: PUSH
65881: LD_INT 3
65883: MINUS
65884: PUSH
65885: LD_VAR 0 2
65889: PUSH
65890: LD_INT 3
65892: MINUS
65893: PUSH
65894: LD_INT 2
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: LIST
65901: PUSH
65902: EMPTY
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: LIST
65908: ST_TO_ADDR
// end ; 4 :
65909: GO 66190
65911: LD_INT 4
65913: DOUBLE
65914: EQUAL
65915: IFTRUE 65919
65917: GO 66052
65919: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65920: LD_ADDR_VAR 0 5
65924: PUSH
65925: LD_VAR 0 1
65929: PUSH
65930: LD_VAR 0 2
65934: PUSH
65935: LD_INT 4
65937: PLUS
65938: PUSH
65939: LD_INT 0
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: LIST
65946: PUSH
65947: LD_VAR 0 1
65951: PUSH
65952: LD_INT 3
65954: PLUS
65955: PUSH
65956: LD_VAR 0 2
65960: PUSH
65961: LD_INT 3
65963: PLUS
65964: PUSH
65965: LD_INT 5
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: LIST
65972: PUSH
65973: LD_VAR 0 1
65977: PUSH
65978: LD_INT 4
65980: PLUS
65981: PUSH
65982: LD_VAR 0 2
65986: PUSH
65987: LD_INT 4
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: LIST
65994: PUSH
65995: LD_VAR 0 1
65999: PUSH
66000: LD_VAR 0 2
66004: PUSH
66005: LD_INT 3
66007: MINUS
66008: PUSH
66009: LD_INT 3
66011: PUSH
66012: EMPTY
66013: LIST
66014: LIST
66015: LIST
66016: PUSH
66017: LD_VAR 0 1
66021: PUSH
66022: LD_INT 4
66024: MINUS
66025: PUSH
66026: LD_VAR 0 2
66030: PUSH
66031: LD_INT 4
66033: MINUS
66034: PUSH
66035: LD_INT 2
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: LIST
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: LIST
66047: LIST
66048: LIST
66049: ST_TO_ADDR
// end ; 5 :
66050: GO 66190
66052: LD_INT 5
66054: DOUBLE
66055: EQUAL
66056: IFTRUE 66060
66058: GO 66189
66060: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66061: LD_ADDR_VAR 0 5
66065: PUSH
66066: LD_VAR 0 1
66070: PUSH
66071: LD_INT 4
66073: MINUS
66074: PUSH
66075: LD_VAR 0 2
66079: PUSH
66080: LD_INT 1
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: LIST
66087: PUSH
66088: LD_VAR 0 1
66092: PUSH
66093: LD_VAR 0 2
66097: PUSH
66098: LD_INT 4
66100: MINUS
66101: PUSH
66102: LD_INT 3
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: LIST
66109: PUSH
66110: LD_VAR 0 1
66114: PUSH
66115: LD_INT 4
66117: PLUS
66118: PUSH
66119: LD_VAR 0 2
66123: PUSH
66124: LD_INT 4
66126: PLUS
66127: PUSH
66128: LD_INT 5
66130: PUSH
66131: EMPTY
66132: LIST
66133: LIST
66134: LIST
66135: PUSH
66136: LD_VAR 0 1
66140: PUSH
66141: LD_INT 3
66143: PLUS
66144: PUSH
66145: LD_VAR 0 2
66149: PUSH
66150: LD_INT 4
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: LIST
66157: PUSH
66158: LD_VAR 0 1
66162: PUSH
66163: LD_VAR 0 2
66167: PUSH
66168: LD_INT 3
66170: PLUS
66171: PUSH
66172: LD_INT 0
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: LIST
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: LIST
66184: LIST
66185: LIST
66186: ST_TO_ADDR
// end ; end ;
66187: GO 66190
66189: POP
// result := list ;
66190: LD_ADDR_VAR 0 4
66194: PUSH
66195: LD_VAR 0 5
66199: ST_TO_ADDR
// end ;
66200: LD_VAR 0 4
66204: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66205: LD_INT 0
66207: PPUSH
66208: PPUSH
66209: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66210: LD_VAR 0 1
66214: NOT
66215: PUSH
66216: LD_VAR 0 2
66220: PUSH
66221: LD_INT 1
66223: PUSH
66224: LD_INT 2
66226: PUSH
66227: LD_INT 3
66229: PUSH
66230: LD_INT 4
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: LIST
66237: LIST
66238: IN
66239: NOT
66240: OR
66241: IFFALSE 66245
// exit ;
66243: GO 66328
// tmp := [ ] ;
66245: LD_ADDR_VAR 0 5
66249: PUSH
66250: EMPTY
66251: ST_TO_ADDR
// for i in units do
66252: LD_ADDR_VAR 0 4
66256: PUSH
66257: LD_VAR 0 1
66261: PUSH
66262: FOR_IN
66263: IFFALSE 66297
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
66265: LD_ADDR_VAR 0 5
66269: PUSH
66270: LD_VAR 0 5
66274: PPUSH
66275: LD_VAR 0 4
66279: PPUSH
66280: LD_VAR 0 2
66284: PPUSH
66285: CALL_OW 259
66289: PPUSH
66290: CALL 67701 0 2
66294: ST_TO_ADDR
66295: GO 66262
66297: POP
66298: POP
// if not tmp then
66299: LD_VAR 0 5
66303: NOT
66304: IFFALSE 66308
// exit ;
66306: GO 66328
// result := SortListByListDesc ( units , tmp ) ;
66308: LD_ADDR_VAR 0 3
66312: PUSH
66313: LD_VAR 0 1
66317: PPUSH
66318: LD_VAR 0 5
66322: PPUSH
66323: CALL_OW 77
66327: ST_TO_ADDR
// end ;
66328: LD_VAR 0 3
66332: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66333: LD_INT 0
66335: PPUSH
66336: PPUSH
66337: PPUSH
// result := false ;
66338: LD_ADDR_VAR 0 3
66342: PUSH
66343: LD_INT 0
66345: ST_TO_ADDR
// if not building then
66346: LD_VAR 0 2
66350: NOT
66351: IFFALSE 66355
// exit ;
66353: GO 66493
// x := GetX ( building ) ;
66355: LD_ADDR_VAR 0 4
66359: PUSH
66360: LD_VAR 0 2
66364: PPUSH
66365: CALL_OW 250
66369: ST_TO_ADDR
// y := GetY ( building ) ;
66370: LD_ADDR_VAR 0 5
66374: PUSH
66375: LD_VAR 0 2
66379: PPUSH
66380: CALL_OW 251
66384: ST_TO_ADDR
// if not x or not y then
66385: LD_VAR 0 4
66389: NOT
66390: PUSH
66391: LD_VAR 0 5
66395: NOT
66396: OR
66397: IFFALSE 66401
// exit ;
66399: GO 66493
// if GetTaskList ( unit ) then
66401: LD_VAR 0 1
66405: PPUSH
66406: CALL_OW 437
66410: IFFALSE 66493
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66412: LD_STRING e
66414: PUSH
66415: LD_VAR 0 1
66419: PPUSH
66420: CALL_OW 437
66424: PUSH
66425: LD_INT 1
66427: ARRAY
66428: PUSH
66429: LD_INT 1
66431: ARRAY
66432: EQUAL
66433: PUSH
66434: LD_VAR 0 4
66438: PUSH
66439: LD_VAR 0 1
66443: PPUSH
66444: CALL_OW 437
66448: PUSH
66449: LD_INT 1
66451: ARRAY
66452: PUSH
66453: LD_INT 2
66455: ARRAY
66456: EQUAL
66457: AND
66458: PUSH
66459: LD_VAR 0 5
66463: PUSH
66464: LD_VAR 0 1
66468: PPUSH
66469: CALL_OW 437
66473: PUSH
66474: LD_INT 1
66476: ARRAY
66477: PUSH
66478: LD_INT 3
66480: ARRAY
66481: EQUAL
66482: AND
66483: IFFALSE 66493
// result := true end ;
66485: LD_ADDR_VAR 0 3
66489: PUSH
66490: LD_INT 1
66492: ST_TO_ADDR
// end ;
66493: LD_VAR 0 3
66497: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66498: LD_INT 0
66500: PPUSH
// result := false ;
66501: LD_ADDR_VAR 0 4
66505: PUSH
66506: LD_INT 0
66508: ST_TO_ADDR
// if GetTaskList ( unit ) then
66509: LD_VAR 0 1
66513: PPUSH
66514: CALL_OW 437
66518: IFFALSE 66601
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66520: LD_STRING M
66522: PUSH
66523: LD_VAR 0 1
66527: PPUSH
66528: CALL_OW 437
66532: PUSH
66533: LD_INT 1
66535: ARRAY
66536: PUSH
66537: LD_INT 1
66539: ARRAY
66540: EQUAL
66541: PUSH
66542: LD_VAR 0 2
66546: PUSH
66547: LD_VAR 0 1
66551: PPUSH
66552: CALL_OW 437
66556: PUSH
66557: LD_INT 1
66559: ARRAY
66560: PUSH
66561: LD_INT 2
66563: ARRAY
66564: EQUAL
66565: AND
66566: PUSH
66567: LD_VAR 0 3
66571: PUSH
66572: LD_VAR 0 1
66576: PPUSH
66577: CALL_OW 437
66581: PUSH
66582: LD_INT 1
66584: ARRAY
66585: PUSH
66586: LD_INT 3
66588: ARRAY
66589: EQUAL
66590: AND
66591: IFFALSE 66601
// result := true ;
66593: LD_ADDR_VAR 0 4
66597: PUSH
66598: LD_INT 1
66600: ST_TO_ADDR
// end ; end ;
66601: LD_VAR 0 4
66605: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66606: LD_INT 0
66608: PPUSH
66609: PPUSH
66610: PPUSH
66611: PPUSH
// if not unit or not area then
66612: LD_VAR 0 1
66616: NOT
66617: PUSH
66618: LD_VAR 0 2
66622: NOT
66623: OR
66624: IFFALSE 66628
// exit ;
66626: GO 66804
// tmp := AreaToList ( area , i ) ;
66628: LD_ADDR_VAR 0 6
66632: PUSH
66633: LD_VAR 0 2
66637: PPUSH
66638: LD_VAR 0 5
66642: PPUSH
66643: CALL_OW 517
66647: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66648: LD_ADDR_VAR 0 5
66652: PUSH
66653: DOUBLE
66654: LD_INT 1
66656: DEC
66657: ST_TO_ADDR
66658: LD_VAR 0 6
66662: PUSH
66663: LD_INT 1
66665: ARRAY
66666: PUSH
66667: FOR_TO
66668: IFFALSE 66802
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66670: LD_ADDR_VAR 0 7
66674: PUSH
66675: LD_VAR 0 6
66679: PUSH
66680: LD_INT 1
66682: ARRAY
66683: PUSH
66684: LD_VAR 0 5
66688: ARRAY
66689: PUSH
66690: LD_VAR 0 6
66694: PUSH
66695: LD_INT 2
66697: ARRAY
66698: PUSH
66699: LD_VAR 0 5
66703: ARRAY
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
66709: LD_INT 92
66711: PUSH
66712: LD_VAR 0 7
66716: PUSH
66717: LD_INT 1
66719: ARRAY
66720: PUSH
66721: LD_VAR 0 7
66725: PUSH
66726: LD_INT 2
66728: ARRAY
66729: PUSH
66730: LD_INT 2
66732: PUSH
66733: EMPTY
66734: LIST
66735: LIST
66736: LIST
66737: LIST
66738: PPUSH
66739: CALL_OW 69
66743: PUSH
66744: LD_INT 0
66746: EQUAL
66747: IFFALSE 66800
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66749: LD_VAR 0 1
66753: PPUSH
66754: LD_VAR 0 7
66758: PUSH
66759: LD_INT 1
66761: ARRAY
66762: PPUSH
66763: LD_VAR 0 7
66767: PUSH
66768: LD_INT 2
66770: ARRAY
66771: PPUSH
66772: LD_VAR 0 3
66776: PPUSH
66777: CALL_OW 48
// result := IsPlaced ( unit ) ;
66781: LD_ADDR_VAR 0 4
66785: PUSH
66786: LD_VAR 0 1
66790: PPUSH
66791: CALL_OW 305
66795: ST_TO_ADDR
// exit ;
66796: POP
66797: POP
66798: GO 66804
// end ; end ;
66800: GO 66667
66802: POP
66803: POP
// end ;
66804: LD_VAR 0 4
66808: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66809: LD_INT 0
66811: PPUSH
66812: PPUSH
66813: PPUSH
// if not side or side > 8 then
66814: LD_VAR 0 1
66818: NOT
66819: PUSH
66820: LD_VAR 0 1
66824: PUSH
66825: LD_INT 8
66827: GREATER
66828: OR
66829: IFFALSE 66833
// exit ;
66831: GO 67020
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66833: LD_ADDR_VAR 0 4
66837: PUSH
66838: LD_INT 22
66840: PUSH
66841: LD_VAR 0 1
66845: PUSH
66846: EMPTY
66847: LIST
66848: LIST
66849: PUSH
66850: LD_INT 21
66852: PUSH
66853: LD_INT 3
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: PPUSH
66864: CALL_OW 69
66868: ST_TO_ADDR
// if not tmp then
66869: LD_VAR 0 4
66873: NOT
66874: IFFALSE 66878
// exit ;
66876: GO 67020
// enable_addtolog := true ;
66878: LD_ADDR_OWVAR 81
66882: PUSH
66883: LD_INT 1
66885: ST_TO_ADDR
// AddToLog ( [ ) ;
66886: LD_STRING [
66888: PPUSH
66889: CALL_OW 561
// for i in tmp do
66893: LD_ADDR_VAR 0 3
66897: PUSH
66898: LD_VAR 0 4
66902: PUSH
66903: FOR_IN
66904: IFFALSE 67011
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66906: LD_STRING [
66908: PUSH
66909: LD_VAR 0 3
66913: PPUSH
66914: CALL_OW 266
66918: STR
66919: PUSH
66920: LD_STRING , 
66922: STR
66923: PUSH
66924: LD_VAR 0 3
66928: PPUSH
66929: CALL_OW 250
66933: STR
66934: PUSH
66935: LD_STRING , 
66937: STR
66938: PUSH
66939: LD_VAR 0 3
66943: PPUSH
66944: CALL_OW 251
66948: STR
66949: PUSH
66950: LD_STRING , 
66952: STR
66953: PUSH
66954: LD_VAR 0 3
66958: PPUSH
66959: CALL_OW 254
66963: STR
66964: PUSH
66965: LD_STRING , 
66967: STR
66968: PUSH
66969: LD_VAR 0 3
66973: PPUSH
66974: LD_INT 1
66976: PPUSH
66977: CALL_OW 268
66981: STR
66982: PUSH
66983: LD_STRING , 
66985: STR
66986: PUSH
66987: LD_VAR 0 3
66991: PPUSH
66992: LD_INT 2
66994: PPUSH
66995: CALL_OW 268
66999: STR
67000: PUSH
67001: LD_STRING ],
67003: STR
67004: PPUSH
67005: CALL_OW 561
// end ;
67009: GO 66903
67011: POP
67012: POP
// AddToLog ( ]; ) ;
67013: LD_STRING ];
67015: PPUSH
67016: CALL_OW 561
// end ;
67020: LD_VAR 0 2
67024: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67025: LD_INT 0
67027: PPUSH
67028: PPUSH
67029: PPUSH
67030: PPUSH
67031: PPUSH
// if not area or not rate or not max then
67032: LD_VAR 0 1
67036: NOT
67037: PUSH
67038: LD_VAR 0 2
67042: NOT
67043: OR
67044: PUSH
67045: LD_VAR 0 4
67049: NOT
67050: OR
67051: IFFALSE 67055
// exit ;
67053: GO 67244
// while 1 do
67055: LD_INT 1
67057: IFFALSE 67244
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67059: LD_ADDR_VAR 0 9
67063: PUSH
67064: LD_VAR 0 1
67068: PPUSH
67069: LD_INT 1
67071: PPUSH
67072: CALL_OW 287
67076: PUSH
67077: LD_INT 10
67079: MUL
67080: ST_TO_ADDR
// r := rate / 10 ;
67081: LD_ADDR_VAR 0 7
67085: PUSH
67086: LD_VAR 0 2
67090: PUSH
67091: LD_INT 10
67093: DIVREAL
67094: ST_TO_ADDR
// time := 1 1$00 ;
67095: LD_ADDR_VAR 0 8
67099: PUSH
67100: LD_INT 2100
67102: ST_TO_ADDR
// if amount < min then
67103: LD_VAR 0 9
67107: PUSH
67108: LD_VAR 0 3
67112: LESS
67113: IFFALSE 67131
// r := r * 2 else
67115: LD_ADDR_VAR 0 7
67119: PUSH
67120: LD_VAR 0 7
67124: PUSH
67125: LD_INT 2
67127: MUL
67128: ST_TO_ADDR
67129: GO 67157
// if amount > max then
67131: LD_VAR 0 9
67135: PUSH
67136: LD_VAR 0 4
67140: GREATER
67141: IFFALSE 67157
// r := r / 2 ;
67143: LD_ADDR_VAR 0 7
67147: PUSH
67148: LD_VAR 0 7
67152: PUSH
67153: LD_INT 2
67155: DIVREAL
67156: ST_TO_ADDR
// time := time / r ;
67157: LD_ADDR_VAR 0 8
67161: PUSH
67162: LD_VAR 0 8
67166: PUSH
67167: LD_VAR 0 7
67171: DIVREAL
67172: ST_TO_ADDR
// if time < 0 then
67173: LD_VAR 0 8
67177: PUSH
67178: LD_INT 0
67180: LESS
67181: IFFALSE 67198
// time := time * - 1 ;
67183: LD_ADDR_VAR 0 8
67187: PUSH
67188: LD_VAR 0 8
67192: PUSH
67193: LD_INT 1
67195: NEG
67196: MUL
67197: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67198: LD_VAR 0 8
67202: PUSH
67203: LD_INT 35
67205: PPUSH
67206: LD_INT 875
67208: PPUSH
67209: CALL_OW 12
67213: PLUS
67214: PPUSH
67215: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67219: LD_INT 1
67221: PPUSH
67222: LD_INT 5
67224: PPUSH
67225: CALL_OW 12
67229: PPUSH
67230: LD_VAR 0 1
67234: PPUSH
67235: LD_INT 1
67237: PPUSH
67238: CALL_OW 55
// end ;
67242: GO 67055
// end ;
67244: LD_VAR 0 5
67248: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67249: LD_INT 0
67251: PPUSH
67252: PPUSH
67253: PPUSH
67254: PPUSH
67255: PPUSH
67256: PPUSH
67257: PPUSH
67258: PPUSH
// if not turrets or not factories then
67259: LD_VAR 0 1
67263: NOT
67264: PUSH
67265: LD_VAR 0 2
67269: NOT
67270: OR
67271: IFFALSE 67275
// exit ;
67273: GO 67582
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67275: LD_ADDR_VAR 0 10
67279: PUSH
67280: LD_INT 5
67282: PUSH
67283: LD_INT 6
67285: PUSH
67286: EMPTY
67287: LIST
67288: LIST
67289: PUSH
67290: LD_INT 2
67292: PUSH
67293: LD_INT 4
67295: PUSH
67296: EMPTY
67297: LIST
67298: LIST
67299: PUSH
67300: LD_INT 3
67302: PUSH
67303: LD_INT 5
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: LIST
67314: PUSH
67315: LD_INT 24
67317: PUSH
67318: LD_INT 25
67320: PUSH
67321: EMPTY
67322: LIST
67323: LIST
67324: PUSH
67325: LD_INT 23
67327: PUSH
67328: LD_INT 27
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: PUSH
67335: EMPTY
67336: LIST
67337: LIST
67338: PUSH
67339: LD_INT 42
67341: PUSH
67342: LD_INT 43
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PUSH
67349: LD_INT 44
67351: PUSH
67352: LD_INT 46
67354: PUSH
67355: EMPTY
67356: LIST
67357: LIST
67358: PUSH
67359: LD_INT 45
67361: PUSH
67362: LD_INT 47
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: EMPTY
67370: LIST
67371: LIST
67372: LIST
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: LIST
67378: ST_TO_ADDR
// result := [ ] ;
67379: LD_ADDR_VAR 0 3
67383: PUSH
67384: EMPTY
67385: ST_TO_ADDR
// for i in turrets do
67386: LD_ADDR_VAR 0 4
67390: PUSH
67391: LD_VAR 0 1
67395: PUSH
67396: FOR_IN
67397: IFFALSE 67580
// begin nat := GetNation ( i ) ;
67399: LD_ADDR_VAR 0 7
67403: PUSH
67404: LD_VAR 0 4
67408: PPUSH
67409: CALL_OW 248
67413: ST_TO_ADDR
// weapon := 0 ;
67414: LD_ADDR_VAR 0 8
67418: PUSH
67419: LD_INT 0
67421: ST_TO_ADDR
// if not nat then
67422: LD_VAR 0 7
67426: NOT
67427: IFFALSE 67431
// continue ;
67429: GO 67396
// for j in list [ nat ] do
67431: LD_ADDR_VAR 0 5
67435: PUSH
67436: LD_VAR 0 10
67440: PUSH
67441: LD_VAR 0 7
67445: ARRAY
67446: PUSH
67447: FOR_IN
67448: IFFALSE 67489
// if GetBWeapon ( i ) = j [ 1 ] then
67450: LD_VAR 0 4
67454: PPUSH
67455: CALL_OW 269
67459: PUSH
67460: LD_VAR 0 5
67464: PUSH
67465: LD_INT 1
67467: ARRAY
67468: EQUAL
67469: IFFALSE 67487
// begin weapon := j [ 2 ] ;
67471: LD_ADDR_VAR 0 8
67475: PUSH
67476: LD_VAR 0 5
67480: PUSH
67481: LD_INT 2
67483: ARRAY
67484: ST_TO_ADDR
// break ;
67485: GO 67489
// end ;
67487: GO 67447
67489: POP
67490: POP
// if not weapon then
67491: LD_VAR 0 8
67495: NOT
67496: IFFALSE 67500
// continue ;
67498: GO 67396
// for k in factories do
67500: LD_ADDR_VAR 0 6
67504: PUSH
67505: LD_VAR 0 2
67509: PUSH
67510: FOR_IN
67511: IFFALSE 67576
// begin weapons := AvailableWeaponList ( k ) ;
67513: LD_ADDR_VAR 0 9
67517: PUSH
67518: LD_VAR 0 6
67522: PPUSH
67523: CALL_OW 478
67527: ST_TO_ADDR
// if not weapons then
67528: LD_VAR 0 9
67532: NOT
67533: IFFALSE 67537
// continue ;
67535: GO 67510
// if weapon in weapons then
67537: LD_VAR 0 8
67541: PUSH
67542: LD_VAR 0 9
67546: IN
67547: IFFALSE 67574
// begin result := [ i , weapon ] ;
67549: LD_ADDR_VAR 0 3
67553: PUSH
67554: LD_VAR 0 4
67558: PUSH
67559: LD_VAR 0 8
67563: PUSH
67564: EMPTY
67565: LIST
67566: LIST
67567: ST_TO_ADDR
// exit ;
67568: POP
67569: POP
67570: POP
67571: POP
67572: GO 67582
// end ; end ;
67574: GO 67510
67576: POP
67577: POP
// end ;
67578: GO 67396
67580: POP
67581: POP
// end ;
67582: LD_VAR 0 3
67586: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67587: LD_INT 0
67589: PPUSH
// if not side or side > 8 then
67590: LD_VAR 0 3
67594: NOT
67595: PUSH
67596: LD_VAR 0 3
67600: PUSH
67601: LD_INT 8
67603: GREATER
67604: OR
67605: IFFALSE 67609
// exit ;
67607: GO 67668
// if not range then
67609: LD_VAR 0 4
67613: NOT
67614: IFFALSE 67625
// range := - 12 ;
67616: LD_ADDR_VAR 0 4
67620: PUSH
67621: LD_INT 12
67623: NEG
67624: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67625: LD_VAR 0 1
67629: PPUSH
67630: LD_VAR 0 2
67634: PPUSH
67635: LD_VAR 0 3
67639: PPUSH
67640: LD_VAR 0 4
67644: PPUSH
67645: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67649: LD_VAR 0 1
67653: PPUSH
67654: LD_VAR 0 2
67658: PPUSH
67659: LD_VAR 0 3
67663: PPUSH
67664: CALL_OW 331
// end ;
67668: LD_VAR 0 5
67672: RET
// export function Video ( mode ) ; begin
67673: LD_INT 0
67675: PPUSH
// ingame_video = mode ;
67676: LD_ADDR_OWVAR 52
67680: PUSH
67681: LD_VAR 0 1
67685: ST_TO_ADDR
// interface_hidden = mode ;
67686: LD_ADDR_OWVAR 54
67690: PUSH
67691: LD_VAR 0 1
67695: ST_TO_ADDR
// end ;
67696: LD_VAR 0 2
67700: RET
// export function Join ( array , element ) ; begin
67701: LD_INT 0
67703: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67704: LD_ADDR_VAR 0 3
67708: PUSH
67709: LD_VAR 0 1
67713: PPUSH
67714: LD_VAR 0 1
67718: PUSH
67719: LD_INT 1
67721: PLUS
67722: PPUSH
67723: LD_VAR 0 2
67727: PPUSH
67728: CALL_OW 1
67732: ST_TO_ADDR
// end ;
67733: LD_VAR 0 3
67737: RET
// export function JoinUnion ( array , element ) ; begin
67738: LD_INT 0
67740: PPUSH
// result := array union element ;
67741: LD_ADDR_VAR 0 3
67745: PUSH
67746: LD_VAR 0 1
67750: PUSH
67751: LD_VAR 0 2
67755: UNION
67756: ST_TO_ADDR
// end ;
67757: LD_VAR 0 3
67761: RET
// export function GetBehemoths ( side ) ; begin
67762: LD_INT 0
67764: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67765: LD_ADDR_VAR 0 2
67769: PUSH
67770: LD_INT 22
67772: PUSH
67773: LD_VAR 0 1
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: PUSH
67782: LD_INT 31
67784: PUSH
67785: LD_INT 25
67787: PUSH
67788: EMPTY
67789: LIST
67790: LIST
67791: PUSH
67792: EMPTY
67793: LIST
67794: LIST
67795: PPUSH
67796: CALL_OW 69
67800: ST_TO_ADDR
// end ;
67801: LD_VAR 0 2
67805: RET
// export function Shuffle ( array ) ; var i , index ; begin
67806: LD_INT 0
67808: PPUSH
67809: PPUSH
67810: PPUSH
// result := [ ] ;
67811: LD_ADDR_VAR 0 2
67815: PUSH
67816: EMPTY
67817: ST_TO_ADDR
// if not array then
67818: LD_VAR 0 1
67822: NOT
67823: IFFALSE 67827
// exit ;
67825: GO 67926
// Randomize ;
67827: CALL_OW 10
// for i = array downto 1 do
67831: LD_ADDR_VAR 0 3
67835: PUSH
67836: DOUBLE
67837: LD_VAR 0 1
67841: INC
67842: ST_TO_ADDR
67843: LD_INT 1
67845: PUSH
67846: FOR_DOWNTO
67847: IFFALSE 67924
// begin index := rand ( 1 , array ) ;
67849: LD_ADDR_VAR 0 4
67853: PUSH
67854: LD_INT 1
67856: PPUSH
67857: LD_VAR 0 1
67861: PPUSH
67862: CALL_OW 12
67866: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67867: LD_ADDR_VAR 0 2
67871: PUSH
67872: LD_VAR 0 2
67876: PPUSH
67877: LD_VAR 0 2
67881: PUSH
67882: LD_INT 1
67884: PLUS
67885: PPUSH
67886: LD_VAR 0 1
67890: PUSH
67891: LD_VAR 0 4
67895: ARRAY
67896: PPUSH
67897: CALL_OW 2
67901: ST_TO_ADDR
// array := Delete ( array , index ) ;
67902: LD_ADDR_VAR 0 1
67906: PUSH
67907: LD_VAR 0 1
67911: PPUSH
67912: LD_VAR 0 4
67916: PPUSH
67917: CALL_OW 3
67921: ST_TO_ADDR
// end ;
67922: GO 67846
67924: POP
67925: POP
// end ;
67926: LD_VAR 0 2
67930: RET
// export function GetBaseMaterials ( base ) ; begin
67931: LD_INT 0
67933: PPUSH
// result := [ 0 , 0 , 0 ] ;
67934: LD_ADDR_VAR 0 2
67938: PUSH
67939: LD_INT 0
67941: PUSH
67942: LD_INT 0
67944: PUSH
67945: LD_INT 0
67947: PUSH
67948: EMPTY
67949: LIST
67950: LIST
67951: LIST
67952: ST_TO_ADDR
// if not base then
67953: LD_VAR 0 1
67957: NOT
67958: IFFALSE 67962
// exit ;
67960: GO 68011
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67962: LD_ADDR_VAR 0 2
67966: PUSH
67967: LD_VAR 0 1
67971: PPUSH
67972: LD_INT 1
67974: PPUSH
67975: CALL_OW 275
67979: PUSH
67980: LD_VAR 0 1
67984: PPUSH
67985: LD_INT 2
67987: PPUSH
67988: CALL_OW 275
67992: PUSH
67993: LD_VAR 0 1
67997: PPUSH
67998: LD_INT 3
68000: PPUSH
68001: CALL_OW 275
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: LIST
68010: ST_TO_ADDR
// end ;
68011: LD_VAR 0 2
68015: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68016: LD_INT 0
68018: PPUSH
68019: PPUSH
// result := array ;
68020: LD_ADDR_VAR 0 3
68024: PUSH
68025: LD_VAR 0 1
68029: ST_TO_ADDR
// if size >= result then
68030: LD_VAR 0 2
68034: PUSH
68035: LD_VAR 0 3
68039: GREATEREQUAL
68040: IFFALSE 68044
// exit ;
68042: GO 68094
// if size then
68044: LD_VAR 0 2
68048: IFFALSE 68094
// for i := array downto size do
68050: LD_ADDR_VAR 0 4
68054: PUSH
68055: DOUBLE
68056: LD_VAR 0 1
68060: INC
68061: ST_TO_ADDR
68062: LD_VAR 0 2
68066: PUSH
68067: FOR_DOWNTO
68068: IFFALSE 68092
// result := Delete ( result , result ) ;
68070: LD_ADDR_VAR 0 3
68074: PUSH
68075: LD_VAR 0 3
68079: PPUSH
68080: LD_VAR 0 3
68084: PPUSH
68085: CALL_OW 3
68089: ST_TO_ADDR
68090: GO 68067
68092: POP
68093: POP
// end ;
68094: LD_VAR 0 3
68098: RET
// export function ComExit ( unit ) ; var tmp ; begin
68099: LD_INT 0
68101: PPUSH
68102: PPUSH
// if not IsInUnit ( unit ) then
68103: LD_VAR 0 1
68107: PPUSH
68108: CALL_OW 310
68112: NOT
68113: IFFALSE 68117
// exit ;
68115: GO 68177
// tmp := IsInUnit ( unit ) ;
68117: LD_ADDR_VAR 0 3
68121: PUSH
68122: LD_VAR 0 1
68126: PPUSH
68127: CALL_OW 310
68131: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68132: LD_VAR 0 3
68136: PPUSH
68137: CALL_OW 247
68141: PUSH
68142: LD_INT 2
68144: EQUAL
68145: IFFALSE 68158
// ComExitVehicle ( unit ) else
68147: LD_VAR 0 1
68151: PPUSH
68152: CALL_OW 121
68156: GO 68167
// ComExitBuilding ( unit ) ;
68158: LD_VAR 0 1
68162: PPUSH
68163: CALL_OW 122
// result := tmp ;
68167: LD_ADDR_VAR 0 2
68171: PUSH
68172: LD_VAR 0 3
68176: ST_TO_ADDR
// end ;
68177: LD_VAR 0 2
68181: RET
// export function ComExitAll ( units ) ; var i ; begin
68182: LD_INT 0
68184: PPUSH
68185: PPUSH
// if not units then
68186: LD_VAR 0 1
68190: NOT
68191: IFFALSE 68195
// exit ;
68193: GO 68221
// for i in units do
68195: LD_ADDR_VAR 0 3
68199: PUSH
68200: LD_VAR 0 1
68204: PUSH
68205: FOR_IN
68206: IFFALSE 68219
// ComExit ( i ) ;
68208: LD_VAR 0 3
68212: PPUSH
68213: CALL 68099 0 1
68217: GO 68205
68219: POP
68220: POP
// end ;
68221: LD_VAR 0 2
68225: RET
// export function ResetHc ; begin
68226: LD_INT 0
68228: PPUSH
// InitHc ;
68229: CALL_OW 19
// hc_importance := 0 ;
68233: LD_ADDR_OWVAR 32
68237: PUSH
68238: LD_INT 0
68240: ST_TO_ADDR
// end ;
68241: LD_VAR 0 1
68245: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68246: LD_INT 0
68248: PPUSH
68249: PPUSH
68250: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68251: LD_ADDR_VAR 0 6
68255: PUSH
68256: LD_VAR 0 1
68260: PUSH
68261: LD_VAR 0 3
68265: PLUS
68266: PUSH
68267: LD_INT 2
68269: DIV
68270: ST_TO_ADDR
// if _x < 0 then
68271: LD_VAR 0 6
68275: PUSH
68276: LD_INT 0
68278: LESS
68279: IFFALSE 68296
// _x := _x * - 1 ;
68281: LD_ADDR_VAR 0 6
68285: PUSH
68286: LD_VAR 0 6
68290: PUSH
68291: LD_INT 1
68293: NEG
68294: MUL
68295: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68296: LD_ADDR_VAR 0 7
68300: PUSH
68301: LD_VAR 0 2
68305: PUSH
68306: LD_VAR 0 4
68310: PLUS
68311: PUSH
68312: LD_INT 2
68314: DIV
68315: ST_TO_ADDR
// if _y < 0 then
68316: LD_VAR 0 7
68320: PUSH
68321: LD_INT 0
68323: LESS
68324: IFFALSE 68341
// _y := _y * - 1 ;
68326: LD_ADDR_VAR 0 7
68330: PUSH
68331: LD_VAR 0 7
68335: PUSH
68336: LD_INT 1
68338: NEG
68339: MUL
68340: ST_TO_ADDR
// result := [ _x , _y ] ;
68341: LD_ADDR_VAR 0 5
68345: PUSH
68346: LD_VAR 0 6
68350: PUSH
68351: LD_VAR 0 7
68355: PUSH
68356: EMPTY
68357: LIST
68358: LIST
68359: ST_TO_ADDR
// end ;
68360: LD_VAR 0 5
68364: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68365: LD_INT 0
68367: PPUSH
68368: PPUSH
68369: PPUSH
68370: PPUSH
// task := GetTaskList ( unit ) ;
68371: LD_ADDR_VAR 0 7
68375: PUSH
68376: LD_VAR 0 1
68380: PPUSH
68381: CALL_OW 437
68385: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68386: LD_VAR 0 7
68390: NOT
68391: PUSH
68392: LD_VAR 0 1
68396: PPUSH
68397: LD_VAR 0 2
68401: PPUSH
68402: CALL_OW 308
68406: NOT
68407: AND
68408: IFFALSE 68412
// exit ;
68410: GO 68530
// if IsInArea ( unit , area ) then
68412: LD_VAR 0 1
68416: PPUSH
68417: LD_VAR 0 2
68421: PPUSH
68422: CALL_OW 308
68426: IFFALSE 68444
// begin ComMoveToArea ( unit , goAway ) ;
68428: LD_VAR 0 1
68432: PPUSH
68433: LD_VAR 0 3
68437: PPUSH
68438: CALL_OW 113
// exit ;
68442: GO 68530
// end ; if task [ 1 ] [ 1 ] <> M then
68444: LD_VAR 0 7
68448: PUSH
68449: LD_INT 1
68451: ARRAY
68452: PUSH
68453: LD_INT 1
68455: ARRAY
68456: PUSH
68457: LD_STRING M
68459: NONEQUAL
68460: IFFALSE 68464
// exit ;
68462: GO 68530
// x := task [ 1 ] [ 2 ] ;
68464: LD_ADDR_VAR 0 5
68468: PUSH
68469: LD_VAR 0 7
68473: PUSH
68474: LD_INT 1
68476: ARRAY
68477: PUSH
68478: LD_INT 2
68480: ARRAY
68481: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68482: LD_ADDR_VAR 0 6
68486: PUSH
68487: LD_VAR 0 7
68491: PUSH
68492: LD_INT 1
68494: ARRAY
68495: PUSH
68496: LD_INT 3
68498: ARRAY
68499: ST_TO_ADDR
// if InArea ( x , y , area ) then
68500: LD_VAR 0 5
68504: PPUSH
68505: LD_VAR 0 6
68509: PPUSH
68510: LD_VAR 0 2
68514: PPUSH
68515: CALL_OW 309
68519: IFFALSE 68530
// ComStop ( unit ) ;
68521: LD_VAR 0 1
68525: PPUSH
68526: CALL_OW 141
// end ;
68530: LD_VAR 0 4
68534: RET
// export function Abs ( value ) ; begin
68535: LD_INT 0
68537: PPUSH
// result := value ;
68538: LD_ADDR_VAR 0 2
68542: PUSH
68543: LD_VAR 0 1
68547: ST_TO_ADDR
// if value < 0 then
68548: LD_VAR 0 1
68552: PUSH
68553: LD_INT 0
68555: LESS
68556: IFFALSE 68573
// result := value * - 1 ;
68558: LD_ADDR_VAR 0 2
68562: PUSH
68563: LD_VAR 0 1
68567: PUSH
68568: LD_INT 1
68570: NEG
68571: MUL
68572: ST_TO_ADDR
// end ;
68573: LD_VAR 0 2
68577: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68578: LD_INT 0
68580: PPUSH
68581: PPUSH
68582: PPUSH
68583: PPUSH
68584: PPUSH
68585: PPUSH
68586: PPUSH
68587: PPUSH
// if not unit or not building then
68588: LD_VAR 0 1
68592: NOT
68593: PUSH
68594: LD_VAR 0 2
68598: NOT
68599: OR
68600: IFFALSE 68604
// exit ;
68602: GO 68830
// x := GetX ( building ) ;
68604: LD_ADDR_VAR 0 4
68608: PUSH
68609: LD_VAR 0 2
68613: PPUSH
68614: CALL_OW 250
68618: ST_TO_ADDR
// y := GetY ( building ) ;
68619: LD_ADDR_VAR 0 6
68623: PUSH
68624: LD_VAR 0 2
68628: PPUSH
68629: CALL_OW 251
68633: ST_TO_ADDR
// d := GetDir ( building ) ;
68634: LD_ADDR_VAR 0 8
68638: PUSH
68639: LD_VAR 0 2
68643: PPUSH
68644: CALL_OW 254
68648: ST_TO_ADDR
// r := 4 ;
68649: LD_ADDR_VAR 0 9
68653: PUSH
68654: LD_INT 4
68656: ST_TO_ADDR
// for i := 1 to 5 do
68657: LD_ADDR_VAR 0 10
68661: PUSH
68662: DOUBLE
68663: LD_INT 1
68665: DEC
68666: ST_TO_ADDR
68667: LD_INT 5
68669: PUSH
68670: FOR_TO
68671: IFFALSE 68828
// begin _x := ShiftX ( x , d , r + i ) ;
68673: LD_ADDR_VAR 0 5
68677: PUSH
68678: LD_VAR 0 4
68682: PPUSH
68683: LD_VAR 0 8
68687: PPUSH
68688: LD_VAR 0 9
68692: PUSH
68693: LD_VAR 0 10
68697: PLUS
68698: PPUSH
68699: CALL_OW 272
68703: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68704: LD_ADDR_VAR 0 7
68708: PUSH
68709: LD_VAR 0 6
68713: PPUSH
68714: LD_VAR 0 8
68718: PPUSH
68719: LD_VAR 0 9
68723: PUSH
68724: LD_VAR 0 10
68728: PLUS
68729: PPUSH
68730: CALL_OW 273
68734: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68735: LD_VAR 0 5
68739: PPUSH
68740: LD_VAR 0 7
68744: PPUSH
68745: CALL_OW 488
68749: PUSH
68750: LD_VAR 0 5
68754: PPUSH
68755: LD_VAR 0 7
68759: PPUSH
68760: CALL_OW 428
68764: PPUSH
68765: CALL_OW 247
68769: PUSH
68770: LD_INT 3
68772: PUSH
68773: LD_INT 2
68775: PUSH
68776: EMPTY
68777: LIST
68778: LIST
68779: IN
68780: NOT
68781: AND
68782: IFFALSE 68826
// begin ComMoveXY ( unit , _x , _y ) ;
68784: LD_VAR 0 1
68788: PPUSH
68789: LD_VAR 0 5
68793: PPUSH
68794: LD_VAR 0 7
68798: PPUSH
68799: CALL_OW 111
// result := [ _x , _y ] ;
68803: LD_ADDR_VAR 0 3
68807: PUSH
68808: LD_VAR 0 5
68812: PUSH
68813: LD_VAR 0 7
68817: PUSH
68818: EMPTY
68819: LIST
68820: LIST
68821: ST_TO_ADDR
// exit ;
68822: POP
68823: POP
68824: GO 68830
// end ; end ;
68826: GO 68670
68828: POP
68829: POP
// end ;
68830: LD_VAR 0 3
68834: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68835: LD_INT 0
68837: PPUSH
68838: PPUSH
68839: PPUSH
// result := 0 ;
68840: LD_ADDR_VAR 0 3
68844: PUSH
68845: LD_INT 0
68847: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68848: LD_VAR 0 1
68852: PUSH
68853: LD_INT 0
68855: LESS
68856: PUSH
68857: LD_VAR 0 1
68861: PUSH
68862: LD_INT 8
68864: GREATER
68865: OR
68866: PUSH
68867: LD_VAR 0 2
68871: PUSH
68872: LD_INT 0
68874: LESS
68875: OR
68876: PUSH
68877: LD_VAR 0 2
68881: PUSH
68882: LD_INT 8
68884: GREATER
68885: OR
68886: IFFALSE 68890
// exit ;
68888: GO 68965
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68890: LD_ADDR_VAR 0 4
68894: PUSH
68895: LD_INT 22
68897: PUSH
68898: LD_VAR 0 2
68902: PUSH
68903: EMPTY
68904: LIST
68905: LIST
68906: PPUSH
68907: CALL_OW 69
68911: PUSH
68912: FOR_IN
68913: IFFALSE 68963
// begin un := UnitShoot ( i ) ;
68915: LD_ADDR_VAR 0 5
68919: PUSH
68920: LD_VAR 0 4
68924: PPUSH
68925: CALL_OW 504
68929: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68930: LD_VAR 0 5
68934: PPUSH
68935: CALL_OW 255
68939: PUSH
68940: LD_VAR 0 1
68944: EQUAL
68945: IFFALSE 68961
// begin result := un ;
68947: LD_ADDR_VAR 0 3
68951: PUSH
68952: LD_VAR 0 5
68956: ST_TO_ADDR
// exit ;
68957: POP
68958: POP
68959: GO 68965
// end ; end ;
68961: GO 68912
68963: POP
68964: POP
// end ;
68965: LD_VAR 0 3
68969: RET
// export function GetCargoBay ( units ) ; begin
68970: LD_INT 0
68972: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68973: LD_ADDR_VAR 0 2
68977: PUSH
68978: LD_VAR 0 1
68982: PPUSH
68983: LD_INT 2
68985: PUSH
68986: LD_INT 34
68988: PUSH
68989: LD_INT 12
68991: PUSH
68992: EMPTY
68993: LIST
68994: LIST
68995: PUSH
68996: LD_INT 34
68998: PUSH
68999: LD_INT 51
69001: PUSH
69002: EMPTY
69003: LIST
69004: LIST
69005: PUSH
69006: LD_INT 34
69008: PUSH
69009: LD_INT 32
69011: PUSH
69012: EMPTY
69013: LIST
69014: LIST
69015: PUSH
69016: LD_INT 34
69018: PUSH
69019: LD_INT 89
69021: PUSH
69022: EMPTY
69023: LIST
69024: LIST
69025: PUSH
69026: EMPTY
69027: LIST
69028: LIST
69029: LIST
69030: LIST
69031: LIST
69032: PPUSH
69033: CALL_OW 72
69037: ST_TO_ADDR
// end ;
69038: LD_VAR 0 2
69042: RET
// export function Negate ( value ) ; begin
69043: LD_INT 0
69045: PPUSH
// result := not value ;
69046: LD_ADDR_VAR 0 2
69050: PUSH
69051: LD_VAR 0 1
69055: NOT
69056: ST_TO_ADDR
// end ;
69057: LD_VAR 0 2
69061: RET
// export function Inc ( value ) ; begin
69062: LD_INT 0
69064: PPUSH
// result := value + 1 ;
69065: LD_ADDR_VAR 0 2
69069: PUSH
69070: LD_VAR 0 1
69074: PUSH
69075: LD_INT 1
69077: PLUS
69078: ST_TO_ADDR
// end ;
69079: LD_VAR 0 2
69083: RET
// export function Dec ( value ) ; begin
69084: LD_INT 0
69086: PPUSH
// result := value - 1 ;
69087: LD_ADDR_VAR 0 2
69091: PUSH
69092: LD_VAR 0 1
69096: PUSH
69097: LD_INT 1
69099: MINUS
69100: ST_TO_ADDR
// end ;
69101: LD_VAR 0 2
69105: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69106: LD_INT 0
69108: PPUSH
69109: PPUSH
69110: PPUSH
69111: PPUSH
69112: PPUSH
69113: PPUSH
69114: PPUSH
69115: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69116: LD_VAR 0 1
69120: PPUSH
69121: LD_VAR 0 2
69125: PPUSH
69126: CALL_OW 488
69130: NOT
69131: PUSH
69132: LD_VAR 0 3
69136: PPUSH
69137: LD_VAR 0 4
69141: PPUSH
69142: CALL_OW 488
69146: NOT
69147: OR
69148: IFFALSE 69161
// begin result := - 1 ;
69150: LD_ADDR_VAR 0 5
69154: PUSH
69155: LD_INT 1
69157: NEG
69158: ST_TO_ADDR
// exit ;
69159: GO 69396
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69161: LD_ADDR_VAR 0 12
69165: PUSH
69166: LD_VAR 0 1
69170: PPUSH
69171: LD_VAR 0 2
69175: PPUSH
69176: LD_VAR 0 3
69180: PPUSH
69181: LD_VAR 0 4
69185: PPUSH
69186: CALL 68246 0 4
69190: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69191: LD_ADDR_VAR 0 11
69195: PUSH
69196: LD_VAR 0 1
69200: PPUSH
69201: LD_VAR 0 2
69205: PPUSH
69206: LD_VAR 0 12
69210: PUSH
69211: LD_INT 1
69213: ARRAY
69214: PPUSH
69215: LD_VAR 0 12
69219: PUSH
69220: LD_INT 2
69222: ARRAY
69223: PPUSH
69224: CALL_OW 298
69228: ST_TO_ADDR
// distance := 9999 ;
69229: LD_ADDR_VAR 0 10
69233: PUSH
69234: LD_INT 9999
69236: ST_TO_ADDR
// for i := 0 to 5 do
69237: LD_ADDR_VAR 0 6
69241: PUSH
69242: DOUBLE
69243: LD_INT 0
69245: DEC
69246: ST_TO_ADDR
69247: LD_INT 5
69249: PUSH
69250: FOR_TO
69251: IFFALSE 69394
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69253: LD_ADDR_VAR 0 7
69257: PUSH
69258: LD_VAR 0 1
69262: PPUSH
69263: LD_VAR 0 6
69267: PPUSH
69268: LD_VAR 0 11
69272: PPUSH
69273: CALL_OW 272
69277: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69278: LD_ADDR_VAR 0 8
69282: PUSH
69283: LD_VAR 0 2
69287: PPUSH
69288: LD_VAR 0 6
69292: PPUSH
69293: LD_VAR 0 11
69297: PPUSH
69298: CALL_OW 273
69302: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69303: LD_VAR 0 7
69307: PPUSH
69308: LD_VAR 0 8
69312: PPUSH
69313: CALL_OW 488
69317: NOT
69318: IFFALSE 69322
// continue ;
69320: GO 69250
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69322: LD_ADDR_VAR 0 9
69326: PUSH
69327: LD_VAR 0 12
69331: PUSH
69332: LD_INT 1
69334: ARRAY
69335: PPUSH
69336: LD_VAR 0 12
69340: PUSH
69341: LD_INT 2
69343: ARRAY
69344: PPUSH
69345: LD_VAR 0 7
69349: PPUSH
69350: LD_VAR 0 8
69354: PPUSH
69355: CALL_OW 298
69359: ST_TO_ADDR
// if tmp < distance then
69360: LD_VAR 0 9
69364: PUSH
69365: LD_VAR 0 10
69369: LESS
69370: IFFALSE 69392
// begin result := i ;
69372: LD_ADDR_VAR 0 5
69376: PUSH
69377: LD_VAR 0 6
69381: ST_TO_ADDR
// distance := tmp ;
69382: LD_ADDR_VAR 0 10
69386: PUSH
69387: LD_VAR 0 9
69391: ST_TO_ADDR
// end ; end ;
69392: GO 69250
69394: POP
69395: POP
// end ;
69396: LD_VAR 0 5
69400: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69401: LD_INT 0
69403: PPUSH
69404: PPUSH
// if not driver or not IsInUnit ( driver ) then
69405: LD_VAR 0 1
69409: NOT
69410: PUSH
69411: LD_VAR 0 1
69415: PPUSH
69416: CALL_OW 310
69420: NOT
69421: OR
69422: IFFALSE 69426
// exit ;
69424: GO 69516
// vehicle := IsInUnit ( driver ) ;
69426: LD_ADDR_VAR 0 3
69430: PUSH
69431: LD_VAR 0 1
69435: PPUSH
69436: CALL_OW 310
69440: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69441: LD_VAR 0 1
69445: PPUSH
69446: LD_STRING \
69448: PUSH
69449: LD_INT 0
69451: PUSH
69452: LD_INT 0
69454: PUSH
69455: LD_INT 0
69457: PUSH
69458: LD_INT 0
69460: PUSH
69461: LD_INT 0
69463: PUSH
69464: LD_INT 0
69466: PUSH
69467: EMPTY
69468: LIST
69469: LIST
69470: LIST
69471: LIST
69472: LIST
69473: LIST
69474: LIST
69475: PUSH
69476: LD_STRING E
69478: PUSH
69479: LD_INT 0
69481: PUSH
69482: LD_INT 0
69484: PUSH
69485: LD_VAR 0 3
69489: PUSH
69490: LD_INT 0
69492: PUSH
69493: LD_INT 0
69495: PUSH
69496: LD_INT 0
69498: PUSH
69499: EMPTY
69500: LIST
69501: LIST
69502: LIST
69503: LIST
69504: LIST
69505: LIST
69506: LIST
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: PPUSH
69512: CALL_OW 446
// end ;
69516: LD_VAR 0 2
69520: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69521: LD_INT 0
69523: PPUSH
69524: PPUSH
// if not driver or not IsInUnit ( driver ) then
69525: LD_VAR 0 1
69529: NOT
69530: PUSH
69531: LD_VAR 0 1
69535: PPUSH
69536: CALL_OW 310
69540: NOT
69541: OR
69542: IFFALSE 69546
// exit ;
69544: GO 69636
// vehicle := IsInUnit ( driver ) ;
69546: LD_ADDR_VAR 0 3
69550: PUSH
69551: LD_VAR 0 1
69555: PPUSH
69556: CALL_OW 310
69560: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69561: LD_VAR 0 1
69565: PPUSH
69566: LD_STRING \
69568: PUSH
69569: LD_INT 0
69571: PUSH
69572: LD_INT 0
69574: PUSH
69575: LD_INT 0
69577: PUSH
69578: LD_INT 0
69580: PUSH
69581: LD_INT 0
69583: PUSH
69584: LD_INT 0
69586: PUSH
69587: EMPTY
69588: LIST
69589: LIST
69590: LIST
69591: LIST
69592: LIST
69593: LIST
69594: LIST
69595: PUSH
69596: LD_STRING E
69598: PUSH
69599: LD_INT 0
69601: PUSH
69602: LD_INT 0
69604: PUSH
69605: LD_VAR 0 3
69609: PUSH
69610: LD_INT 0
69612: PUSH
69613: LD_INT 0
69615: PUSH
69616: LD_INT 0
69618: PUSH
69619: EMPTY
69620: LIST
69621: LIST
69622: LIST
69623: LIST
69624: LIST
69625: LIST
69626: LIST
69627: PUSH
69628: EMPTY
69629: LIST
69630: LIST
69631: PPUSH
69632: CALL_OW 447
// end ;
69636: LD_VAR 0 2
69640: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69641: LD_INT 0
69643: PPUSH
69644: PPUSH
69645: PPUSH
// tmp := [ ] ;
69646: LD_ADDR_VAR 0 5
69650: PUSH
69651: EMPTY
69652: ST_TO_ADDR
// for i in units do
69653: LD_ADDR_VAR 0 4
69657: PUSH
69658: LD_VAR 0 1
69662: PUSH
69663: FOR_IN
69664: IFFALSE 69702
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69666: LD_ADDR_VAR 0 5
69670: PUSH
69671: LD_VAR 0 5
69675: PPUSH
69676: LD_VAR 0 5
69680: PUSH
69681: LD_INT 1
69683: PLUS
69684: PPUSH
69685: LD_VAR 0 4
69689: PPUSH
69690: CALL_OW 256
69694: PPUSH
69695: CALL_OW 2
69699: ST_TO_ADDR
69700: GO 69663
69702: POP
69703: POP
// if not tmp then
69704: LD_VAR 0 5
69708: NOT
69709: IFFALSE 69713
// exit ;
69711: GO 69761
// if asc then
69713: LD_VAR 0 2
69717: IFFALSE 69741
// result := SortListByListAsc ( units , tmp ) else
69719: LD_ADDR_VAR 0 3
69723: PUSH
69724: LD_VAR 0 1
69728: PPUSH
69729: LD_VAR 0 5
69733: PPUSH
69734: CALL_OW 76
69738: ST_TO_ADDR
69739: GO 69761
// result := SortListByListDesc ( units , tmp ) ;
69741: LD_ADDR_VAR 0 3
69745: PUSH
69746: LD_VAR 0 1
69750: PPUSH
69751: LD_VAR 0 5
69755: PPUSH
69756: CALL_OW 77
69760: ST_TO_ADDR
// end ;
69761: LD_VAR 0 3
69765: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69766: LD_INT 0
69768: PPUSH
69769: PPUSH
// task := GetTaskList ( mech ) ;
69770: LD_ADDR_VAR 0 4
69774: PUSH
69775: LD_VAR 0 1
69779: PPUSH
69780: CALL_OW 437
69784: ST_TO_ADDR
// if not task then
69785: LD_VAR 0 4
69789: NOT
69790: IFFALSE 69794
// exit ;
69792: GO 69836
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69794: LD_ADDR_VAR 0 3
69798: PUSH
69799: LD_VAR 0 4
69803: PUSH
69804: LD_INT 1
69806: ARRAY
69807: PUSH
69808: LD_INT 1
69810: ARRAY
69811: PUSH
69812: LD_STRING r
69814: EQUAL
69815: PUSH
69816: LD_VAR 0 4
69820: PUSH
69821: LD_INT 1
69823: ARRAY
69824: PUSH
69825: LD_INT 4
69827: ARRAY
69828: PUSH
69829: LD_VAR 0 2
69833: EQUAL
69834: AND
69835: ST_TO_ADDR
// end ;
69836: LD_VAR 0 3
69840: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69841: LD_INT 0
69843: PPUSH
// SetDir ( unit , d ) ;
69844: LD_VAR 0 1
69848: PPUSH
69849: LD_VAR 0 4
69853: PPUSH
69854: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69858: LD_VAR 0 1
69862: PPUSH
69863: LD_VAR 0 2
69867: PPUSH
69868: LD_VAR 0 3
69872: PPUSH
69873: LD_VAR 0 5
69877: PPUSH
69878: CALL_OW 48
// end ;
69882: LD_VAR 0 6
69886: RET
// export function ToNaturalNumber ( number ) ; begin
69887: LD_INT 0
69889: PPUSH
// result := number div 1 ;
69890: LD_ADDR_VAR 0 2
69894: PUSH
69895: LD_VAR 0 1
69899: PUSH
69900: LD_INT 1
69902: DIV
69903: ST_TO_ADDR
// if number < 0 then
69904: LD_VAR 0 1
69908: PUSH
69909: LD_INT 0
69911: LESS
69912: IFFALSE 69922
// result := 0 ;
69914: LD_ADDR_VAR 0 2
69918: PUSH
69919: LD_INT 0
69921: ST_TO_ADDR
// end ;
69922: LD_VAR 0 2
69926: RET
// export function SortByClass ( units , class ) ; var un ; begin
69927: LD_INT 0
69929: PPUSH
69930: PPUSH
// if not units or not class then
69931: LD_VAR 0 1
69935: NOT
69936: PUSH
69937: LD_VAR 0 2
69941: NOT
69942: OR
69943: IFFALSE 69947
// exit ;
69945: GO 70042
// result := [ ] ;
69947: LD_ADDR_VAR 0 3
69951: PUSH
69952: EMPTY
69953: ST_TO_ADDR
// for un in units do
69954: LD_ADDR_VAR 0 4
69958: PUSH
69959: LD_VAR 0 1
69963: PUSH
69964: FOR_IN
69965: IFFALSE 70040
// if GetClass ( un ) = class then
69967: LD_VAR 0 4
69971: PPUSH
69972: CALL_OW 257
69976: PUSH
69977: LD_VAR 0 2
69981: EQUAL
69982: IFFALSE 70009
// result := Insert ( result , 1 , un ) else
69984: LD_ADDR_VAR 0 3
69988: PUSH
69989: LD_VAR 0 3
69993: PPUSH
69994: LD_INT 1
69996: PPUSH
69997: LD_VAR 0 4
70001: PPUSH
70002: CALL_OW 2
70006: ST_TO_ADDR
70007: GO 70038
// result := Replace ( result , result + 1 , un ) ;
70009: LD_ADDR_VAR 0 3
70013: PUSH
70014: LD_VAR 0 3
70018: PPUSH
70019: LD_VAR 0 3
70023: PUSH
70024: LD_INT 1
70026: PLUS
70027: PPUSH
70028: LD_VAR 0 4
70032: PPUSH
70033: CALL_OW 1
70037: ST_TO_ADDR
70038: GO 69964
70040: POP
70041: POP
// end ;
70042: LD_VAR 0 3
70046: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70047: LD_INT 0
70049: PPUSH
70050: PPUSH
70051: PPUSH
70052: PPUSH
70053: PPUSH
70054: PPUSH
70055: PPUSH
// result := [ ] ;
70056: LD_ADDR_VAR 0 4
70060: PUSH
70061: EMPTY
70062: ST_TO_ADDR
// if x - r < 0 then
70063: LD_VAR 0 1
70067: PUSH
70068: LD_VAR 0 3
70072: MINUS
70073: PUSH
70074: LD_INT 0
70076: LESS
70077: IFFALSE 70089
// min_x := 0 else
70079: LD_ADDR_VAR 0 8
70083: PUSH
70084: LD_INT 0
70086: ST_TO_ADDR
70087: GO 70105
// min_x := x - r ;
70089: LD_ADDR_VAR 0 8
70093: PUSH
70094: LD_VAR 0 1
70098: PUSH
70099: LD_VAR 0 3
70103: MINUS
70104: ST_TO_ADDR
// if y - r < 0 then
70105: LD_VAR 0 2
70109: PUSH
70110: LD_VAR 0 3
70114: MINUS
70115: PUSH
70116: LD_INT 0
70118: LESS
70119: IFFALSE 70131
// min_y := 0 else
70121: LD_ADDR_VAR 0 7
70125: PUSH
70126: LD_INT 0
70128: ST_TO_ADDR
70129: GO 70147
// min_y := y - r ;
70131: LD_ADDR_VAR 0 7
70135: PUSH
70136: LD_VAR 0 2
70140: PUSH
70141: LD_VAR 0 3
70145: MINUS
70146: ST_TO_ADDR
// max_x := x + r ;
70147: LD_ADDR_VAR 0 9
70151: PUSH
70152: LD_VAR 0 1
70156: PUSH
70157: LD_VAR 0 3
70161: PLUS
70162: ST_TO_ADDR
// max_y := y + r ;
70163: LD_ADDR_VAR 0 10
70167: PUSH
70168: LD_VAR 0 2
70172: PUSH
70173: LD_VAR 0 3
70177: PLUS
70178: ST_TO_ADDR
// for _x = min_x to max_x do
70179: LD_ADDR_VAR 0 5
70183: PUSH
70184: DOUBLE
70185: LD_VAR 0 8
70189: DEC
70190: ST_TO_ADDR
70191: LD_VAR 0 9
70195: PUSH
70196: FOR_TO
70197: IFFALSE 70298
// for _y = min_y to max_y do
70199: LD_ADDR_VAR 0 6
70203: PUSH
70204: DOUBLE
70205: LD_VAR 0 7
70209: DEC
70210: ST_TO_ADDR
70211: LD_VAR 0 10
70215: PUSH
70216: FOR_TO
70217: IFFALSE 70294
// begin if not ValidHex ( _x , _y ) then
70219: LD_VAR 0 5
70223: PPUSH
70224: LD_VAR 0 6
70228: PPUSH
70229: CALL_OW 488
70233: NOT
70234: IFFALSE 70238
// continue ;
70236: GO 70216
// if GetResourceTypeXY ( _x , _y ) then
70238: LD_VAR 0 5
70242: PPUSH
70243: LD_VAR 0 6
70247: PPUSH
70248: CALL_OW 283
70252: IFFALSE 70292
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70254: LD_ADDR_VAR 0 4
70258: PUSH
70259: LD_VAR 0 4
70263: PPUSH
70264: LD_VAR 0 4
70268: PUSH
70269: LD_INT 1
70271: PLUS
70272: PPUSH
70273: LD_VAR 0 5
70277: PUSH
70278: LD_VAR 0 6
70282: PUSH
70283: EMPTY
70284: LIST
70285: LIST
70286: PPUSH
70287: CALL_OW 1
70291: ST_TO_ADDR
// end ;
70292: GO 70216
70294: POP
70295: POP
70296: GO 70196
70298: POP
70299: POP
// end ;
70300: LD_VAR 0 4
70304: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70305: LD_INT 0
70307: PPUSH
70308: PPUSH
70309: PPUSH
70310: PPUSH
70311: PPUSH
70312: PPUSH
70313: PPUSH
70314: PPUSH
// if not units then
70315: LD_VAR 0 1
70319: NOT
70320: IFFALSE 70324
// exit ;
70322: GO 70848
// result := UnitFilter ( units , [ f_ok ] ) ;
70324: LD_ADDR_VAR 0 3
70328: PUSH
70329: LD_VAR 0 1
70333: PPUSH
70334: LD_INT 50
70336: PUSH
70337: EMPTY
70338: LIST
70339: PPUSH
70340: CALL_OW 72
70344: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70345: LD_ADDR_VAR 0 8
70349: PUSH
70350: LD_VAR 0 1
70354: PUSH
70355: LD_INT 1
70357: ARRAY
70358: PPUSH
70359: CALL_OW 255
70363: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70364: LD_ADDR_VAR 0 10
70368: PUSH
70369: LD_INT 29
70371: PUSH
70372: LD_INT 91
70374: PUSH
70375: LD_INT 49
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: LIST
70382: ST_TO_ADDR
// if not result then
70383: LD_VAR 0 3
70387: NOT
70388: IFFALSE 70392
// exit ;
70390: GO 70848
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70392: LD_ADDR_VAR 0 5
70396: PUSH
70397: LD_INT 81
70399: PUSH
70400: LD_VAR 0 8
70404: PUSH
70405: EMPTY
70406: LIST
70407: LIST
70408: PPUSH
70409: CALL_OW 69
70413: ST_TO_ADDR
// for i in result do
70414: LD_ADDR_VAR 0 4
70418: PUSH
70419: LD_VAR 0 3
70423: PUSH
70424: FOR_IN
70425: IFFALSE 70846
// begin tag := GetTag ( i ) + 1 ;
70427: LD_ADDR_VAR 0 9
70431: PUSH
70432: LD_VAR 0 4
70436: PPUSH
70437: CALL_OW 110
70441: PUSH
70442: LD_INT 1
70444: PLUS
70445: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70446: LD_ADDR_VAR 0 7
70450: PUSH
70451: LD_VAR 0 4
70455: PPUSH
70456: CALL_OW 250
70460: PPUSH
70461: LD_VAR 0 4
70465: PPUSH
70466: CALL_OW 251
70470: PPUSH
70471: LD_INT 6
70473: PPUSH
70474: CALL 70047 0 3
70478: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70479: LD_VAR 0 4
70483: PPUSH
70484: CALL_OW 247
70488: PUSH
70489: LD_INT 2
70491: EQUAL
70492: PUSH
70493: LD_VAR 0 7
70497: AND
70498: PUSH
70499: LD_VAR 0 4
70503: PPUSH
70504: CALL_OW 264
70508: PUSH
70509: LD_VAR 0 10
70513: IN
70514: NOT
70515: AND
70516: IFFALSE 70555
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70518: LD_VAR 0 4
70522: PPUSH
70523: LD_VAR 0 7
70527: PUSH
70528: LD_INT 1
70530: ARRAY
70531: PUSH
70532: LD_INT 1
70534: ARRAY
70535: PPUSH
70536: LD_VAR 0 7
70540: PUSH
70541: LD_INT 1
70543: ARRAY
70544: PUSH
70545: LD_INT 2
70547: ARRAY
70548: PPUSH
70549: CALL_OW 116
70553: GO 70844
// if path > tag then
70555: LD_VAR 0 2
70559: PUSH
70560: LD_VAR 0 9
70564: GREATER
70565: IFFALSE 70773
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70567: LD_ADDR_VAR 0 6
70571: PUSH
70572: LD_VAR 0 5
70576: PPUSH
70577: LD_INT 91
70579: PUSH
70580: LD_VAR 0 4
70584: PUSH
70585: LD_INT 8
70587: PUSH
70588: EMPTY
70589: LIST
70590: LIST
70591: LIST
70592: PPUSH
70593: CALL_OW 72
70597: ST_TO_ADDR
// if nearEnemy then
70598: LD_VAR 0 6
70602: IFFALSE 70671
// begin if GetWeapon ( i ) = ru_time_lapser then
70604: LD_VAR 0 4
70608: PPUSH
70609: CALL_OW 264
70613: PUSH
70614: LD_INT 49
70616: EQUAL
70617: IFFALSE 70645
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70619: LD_VAR 0 4
70623: PPUSH
70624: LD_VAR 0 6
70628: PPUSH
70629: LD_VAR 0 4
70633: PPUSH
70634: CALL_OW 74
70638: PPUSH
70639: CALL_OW 112
70643: GO 70669
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70645: LD_VAR 0 4
70649: PPUSH
70650: LD_VAR 0 6
70654: PPUSH
70655: LD_VAR 0 4
70659: PPUSH
70660: CALL_OW 74
70664: PPUSH
70665: CALL 71773 0 2
// end else
70669: GO 70771
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70671: LD_VAR 0 4
70675: PPUSH
70676: LD_VAR 0 2
70680: PUSH
70681: LD_VAR 0 9
70685: ARRAY
70686: PUSH
70687: LD_INT 1
70689: ARRAY
70690: PPUSH
70691: LD_VAR 0 2
70695: PUSH
70696: LD_VAR 0 9
70700: ARRAY
70701: PUSH
70702: LD_INT 2
70704: ARRAY
70705: PPUSH
70706: CALL_OW 297
70710: PUSH
70711: LD_INT 6
70713: GREATER
70714: IFFALSE 70757
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70716: LD_VAR 0 4
70720: PPUSH
70721: LD_VAR 0 2
70725: PUSH
70726: LD_VAR 0 9
70730: ARRAY
70731: PUSH
70732: LD_INT 1
70734: ARRAY
70735: PPUSH
70736: LD_VAR 0 2
70740: PUSH
70741: LD_VAR 0 9
70745: ARRAY
70746: PUSH
70747: LD_INT 2
70749: ARRAY
70750: PPUSH
70751: CALL_OW 114
70755: GO 70771
// SetTag ( i , tag ) ;
70757: LD_VAR 0 4
70761: PPUSH
70762: LD_VAR 0 9
70766: PPUSH
70767: CALL_OW 109
// end else
70771: GO 70844
// if enemy then
70773: LD_VAR 0 5
70777: IFFALSE 70844
// begin if GetWeapon ( i ) = ru_time_lapser then
70779: LD_VAR 0 4
70783: PPUSH
70784: CALL_OW 264
70788: PUSH
70789: LD_INT 49
70791: EQUAL
70792: IFFALSE 70820
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70794: LD_VAR 0 4
70798: PPUSH
70799: LD_VAR 0 5
70803: PPUSH
70804: LD_VAR 0 4
70808: PPUSH
70809: CALL_OW 74
70813: PPUSH
70814: CALL_OW 112
70818: GO 70844
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70820: LD_VAR 0 4
70824: PPUSH
70825: LD_VAR 0 5
70829: PPUSH
70830: LD_VAR 0 4
70834: PPUSH
70835: CALL_OW 74
70839: PPUSH
70840: CALL 71773 0 2
// end ; end ;
70844: GO 70424
70846: POP
70847: POP
// end ;
70848: LD_VAR 0 3
70852: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70853: LD_INT 0
70855: PPUSH
70856: PPUSH
70857: PPUSH
// if not unit or IsInUnit ( unit ) then
70858: LD_VAR 0 1
70862: NOT
70863: PUSH
70864: LD_VAR 0 1
70868: PPUSH
70869: CALL_OW 310
70873: OR
70874: IFFALSE 70878
// exit ;
70876: GO 70969
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70878: LD_ADDR_VAR 0 4
70882: PUSH
70883: LD_VAR 0 1
70887: PPUSH
70888: CALL_OW 250
70892: PPUSH
70893: LD_VAR 0 2
70897: PPUSH
70898: LD_INT 1
70900: PPUSH
70901: CALL_OW 272
70905: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70906: LD_ADDR_VAR 0 5
70910: PUSH
70911: LD_VAR 0 1
70915: PPUSH
70916: CALL_OW 251
70920: PPUSH
70921: LD_VAR 0 2
70925: PPUSH
70926: LD_INT 1
70928: PPUSH
70929: CALL_OW 273
70933: ST_TO_ADDR
// if ValidHex ( x , y ) then
70934: LD_VAR 0 4
70938: PPUSH
70939: LD_VAR 0 5
70943: PPUSH
70944: CALL_OW 488
70948: IFFALSE 70969
// ComTurnXY ( unit , x , y ) ;
70950: LD_VAR 0 1
70954: PPUSH
70955: LD_VAR 0 4
70959: PPUSH
70960: LD_VAR 0 5
70964: PPUSH
70965: CALL_OW 118
// end ;
70969: LD_VAR 0 3
70973: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70974: LD_INT 0
70976: PPUSH
70977: PPUSH
// result := false ;
70978: LD_ADDR_VAR 0 3
70982: PUSH
70983: LD_INT 0
70985: ST_TO_ADDR
// if not units then
70986: LD_VAR 0 2
70990: NOT
70991: IFFALSE 70995
// exit ;
70993: GO 71040
// for i in units do
70995: LD_ADDR_VAR 0 4
70999: PUSH
71000: LD_VAR 0 2
71004: PUSH
71005: FOR_IN
71006: IFFALSE 71038
// if See ( side , i ) then
71008: LD_VAR 0 1
71012: PPUSH
71013: LD_VAR 0 4
71017: PPUSH
71018: CALL_OW 292
71022: IFFALSE 71036
// begin result := true ;
71024: LD_ADDR_VAR 0 3
71028: PUSH
71029: LD_INT 1
71031: ST_TO_ADDR
// exit ;
71032: POP
71033: POP
71034: GO 71040
// end ;
71036: GO 71005
71038: POP
71039: POP
// end ;
71040: LD_VAR 0 3
71044: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71045: LD_INT 0
71047: PPUSH
71048: PPUSH
71049: PPUSH
71050: PPUSH
// if not unit or not points then
71051: LD_VAR 0 1
71055: NOT
71056: PUSH
71057: LD_VAR 0 2
71061: NOT
71062: OR
71063: IFFALSE 71067
// exit ;
71065: GO 71157
// dist := 99999 ;
71067: LD_ADDR_VAR 0 5
71071: PUSH
71072: LD_INT 99999
71074: ST_TO_ADDR
// for i in points do
71075: LD_ADDR_VAR 0 4
71079: PUSH
71080: LD_VAR 0 2
71084: PUSH
71085: FOR_IN
71086: IFFALSE 71155
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71088: LD_ADDR_VAR 0 6
71092: PUSH
71093: LD_VAR 0 1
71097: PPUSH
71098: LD_VAR 0 4
71102: PUSH
71103: LD_INT 1
71105: ARRAY
71106: PPUSH
71107: LD_VAR 0 4
71111: PUSH
71112: LD_INT 2
71114: ARRAY
71115: PPUSH
71116: CALL_OW 297
71120: ST_TO_ADDR
// if tmpDist < dist then
71121: LD_VAR 0 6
71125: PUSH
71126: LD_VAR 0 5
71130: LESS
71131: IFFALSE 71153
// begin result := i ;
71133: LD_ADDR_VAR 0 3
71137: PUSH
71138: LD_VAR 0 4
71142: ST_TO_ADDR
// dist := tmpDist ;
71143: LD_ADDR_VAR 0 5
71147: PUSH
71148: LD_VAR 0 6
71152: ST_TO_ADDR
// end ; end ;
71153: GO 71085
71155: POP
71156: POP
// end ;
71157: LD_VAR 0 3
71161: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71162: LD_INT 0
71164: PPUSH
// uc_side := side ;
71165: LD_ADDR_OWVAR 20
71169: PUSH
71170: LD_VAR 0 1
71174: ST_TO_ADDR
// uc_nation := 3 ;
71175: LD_ADDR_OWVAR 21
71179: PUSH
71180: LD_INT 3
71182: ST_TO_ADDR
// vc_chassis := 25 ;
71183: LD_ADDR_OWVAR 37
71187: PUSH
71188: LD_INT 25
71190: ST_TO_ADDR
// vc_engine := engine_siberite ;
71191: LD_ADDR_OWVAR 39
71195: PUSH
71196: LD_INT 3
71198: ST_TO_ADDR
// vc_control := control_computer ;
71199: LD_ADDR_OWVAR 38
71203: PUSH
71204: LD_INT 3
71206: ST_TO_ADDR
// vc_weapon := 59 ;
71207: LD_ADDR_OWVAR 40
71211: PUSH
71212: LD_INT 59
71214: ST_TO_ADDR
// result := CreateVehicle ;
71215: LD_ADDR_VAR 0 5
71219: PUSH
71220: CALL_OW 45
71224: ST_TO_ADDR
// SetDir ( result , d ) ;
71225: LD_VAR 0 5
71229: PPUSH
71230: LD_VAR 0 4
71234: PPUSH
71235: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71239: LD_VAR 0 5
71243: PPUSH
71244: LD_VAR 0 2
71248: PPUSH
71249: LD_VAR 0 3
71253: PPUSH
71254: LD_INT 0
71256: PPUSH
71257: CALL_OW 48
// end ;
71261: LD_VAR 0 5
71265: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71266: LD_INT 0
71268: PPUSH
71269: PPUSH
71270: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71271: LD_ADDR_VAR 0 2
71275: PUSH
71276: LD_INT 0
71278: PUSH
71279: LD_INT 0
71281: PUSH
71282: LD_INT 0
71284: PUSH
71285: LD_INT 0
71287: PUSH
71288: EMPTY
71289: LIST
71290: LIST
71291: LIST
71292: LIST
71293: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71294: LD_VAR 0 1
71298: NOT
71299: PUSH
71300: LD_VAR 0 1
71304: PPUSH
71305: CALL_OW 264
71309: PUSH
71310: LD_INT 12
71312: PUSH
71313: LD_INT 51
71315: PUSH
71316: LD_INT 32
71318: PUSH
71319: LD_INT 89
71321: PUSH
71322: EMPTY
71323: LIST
71324: LIST
71325: LIST
71326: LIST
71327: IN
71328: NOT
71329: OR
71330: IFFALSE 71334
// exit ;
71332: GO 71432
// for i := 1 to 3 do
71334: LD_ADDR_VAR 0 3
71338: PUSH
71339: DOUBLE
71340: LD_INT 1
71342: DEC
71343: ST_TO_ADDR
71344: LD_INT 3
71346: PUSH
71347: FOR_TO
71348: IFFALSE 71430
// begin tmp := GetCargo ( cargo , i ) ;
71350: LD_ADDR_VAR 0 4
71354: PUSH
71355: LD_VAR 0 1
71359: PPUSH
71360: LD_VAR 0 3
71364: PPUSH
71365: CALL_OW 289
71369: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71370: LD_ADDR_VAR 0 2
71374: PUSH
71375: LD_VAR 0 2
71379: PPUSH
71380: LD_VAR 0 3
71384: PPUSH
71385: LD_VAR 0 4
71389: PPUSH
71390: CALL_OW 1
71394: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71395: LD_ADDR_VAR 0 2
71399: PUSH
71400: LD_VAR 0 2
71404: PPUSH
71405: LD_INT 4
71407: PPUSH
71408: LD_VAR 0 2
71412: PUSH
71413: LD_INT 4
71415: ARRAY
71416: PUSH
71417: LD_VAR 0 4
71421: PLUS
71422: PPUSH
71423: CALL_OW 1
71427: ST_TO_ADDR
// end ;
71428: GO 71347
71430: POP
71431: POP
// end ;
71432: LD_VAR 0 2
71436: RET
// export function Length ( array ) ; begin
71437: LD_INT 0
71439: PPUSH
// result := array + 0 ;
71440: LD_ADDR_VAR 0 2
71444: PUSH
71445: LD_VAR 0 1
71449: PUSH
71450: LD_INT 0
71452: PLUS
71453: ST_TO_ADDR
// end ;
71454: LD_VAR 0 2
71458: RET
// export function PrepareArray ( array ) ; begin
71459: LD_INT 0
71461: PPUSH
// result := array diff 0 ;
71462: LD_ADDR_VAR 0 2
71466: PUSH
71467: LD_VAR 0 1
71471: PUSH
71472: LD_INT 0
71474: DIFF
71475: ST_TO_ADDR
// if not result [ 1 ] then
71476: LD_VAR 0 2
71480: PUSH
71481: LD_INT 1
71483: ARRAY
71484: NOT
71485: IFFALSE 71505
// result := Delete ( result , 1 ) ;
71487: LD_ADDR_VAR 0 2
71491: PUSH
71492: LD_VAR 0 2
71496: PPUSH
71497: LD_INT 1
71499: PPUSH
71500: CALL_OW 3
71504: ST_TO_ADDR
// end ;
71505: LD_VAR 0 2
71509: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
71510: LD_INT 0
71512: PPUSH
71513: PPUSH
71514: PPUSH
71515: PPUSH
// sibRocketRange := 25 ;
71516: LD_ADDR_VAR 0 6
71520: PUSH
71521: LD_INT 25
71523: ST_TO_ADDR
// result := false ;
71524: LD_ADDR_VAR 0 4
71528: PUSH
71529: LD_INT 0
71531: ST_TO_ADDR
// for i := 0 to 5 do
71532: LD_ADDR_VAR 0 5
71536: PUSH
71537: DOUBLE
71538: LD_INT 0
71540: DEC
71541: ST_TO_ADDR
71542: LD_INT 5
71544: PUSH
71545: FOR_TO
71546: IFFALSE 71613
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
71548: LD_VAR 0 1
71552: PPUSH
71553: LD_VAR 0 5
71557: PPUSH
71558: LD_VAR 0 6
71562: PPUSH
71563: CALL_OW 272
71567: PPUSH
71568: LD_VAR 0 2
71572: PPUSH
71573: LD_VAR 0 5
71577: PPUSH
71578: LD_VAR 0 6
71582: PPUSH
71583: CALL_OW 273
71587: PPUSH
71588: LD_VAR 0 3
71592: PPUSH
71593: CALL_OW 309
71597: IFFALSE 71611
// begin result := true ;
71599: LD_ADDR_VAR 0 4
71603: PUSH
71604: LD_INT 1
71606: ST_TO_ADDR
// exit ;
71607: POP
71608: POP
71609: GO 71615
// end ;
71611: GO 71545
71613: POP
71614: POP
// end ;
71615: LD_VAR 0 4
71619: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
71620: LD_INT 0
71622: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
71623: LD_VAR 0 1
71627: PPUSH
71628: LD_VAR 0 2
71632: PPUSH
71633: LD_INT 0
71635: PPUSH
71636: LD_INT 0
71638: PPUSH
71639: LD_INT 1
71641: PPUSH
71642: LD_INT 0
71644: PPUSH
71645: CALL_OW 587
// end ;
71649: LD_VAR 0 3
71653: RET
// export function CenterOnNow ( unit ) ; begin
71654: LD_INT 0
71656: PPUSH
// result := IsInUnit ( unit ) ;
71657: LD_ADDR_VAR 0 2
71661: PUSH
71662: LD_VAR 0 1
71666: PPUSH
71667: CALL_OW 310
71671: ST_TO_ADDR
// if not result then
71672: LD_VAR 0 2
71676: NOT
71677: IFFALSE 71689
// result := unit ;
71679: LD_ADDR_VAR 0 2
71683: PUSH
71684: LD_VAR 0 1
71688: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
71689: LD_VAR 0 1
71693: PPUSH
71694: CALL_OW 87
// end ;
71698: LD_VAR 0 2
71702: RET
// export function ComMoveHex ( unit , hex ) ; begin
71703: LD_INT 0
71705: PPUSH
// if not hex then
71706: LD_VAR 0 2
71710: NOT
71711: IFFALSE 71715
// exit ;
71713: GO 71768
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
71715: LD_VAR 0 2
71719: PUSH
71720: LD_INT 1
71722: ARRAY
71723: PPUSH
71724: LD_VAR 0 2
71728: PUSH
71729: LD_INT 2
71731: ARRAY
71732: PPUSH
71733: CALL_OW 428
71737: IFFALSE 71741
// exit ;
71739: GO 71768
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
71741: LD_VAR 0 1
71745: PPUSH
71746: LD_VAR 0 2
71750: PUSH
71751: LD_INT 1
71753: ARRAY
71754: PPUSH
71755: LD_VAR 0 2
71759: PUSH
71760: LD_INT 2
71762: ARRAY
71763: PPUSH
71764: CALL_OW 111
// end ;
71768: LD_VAR 0 3
71772: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
71773: LD_INT 0
71775: PPUSH
71776: PPUSH
71777: PPUSH
// if not unit or not enemy then
71778: LD_VAR 0 1
71782: NOT
71783: PUSH
71784: LD_VAR 0 2
71788: NOT
71789: OR
71790: IFFALSE 71794
// exit ;
71792: GO 71918
// x := GetX ( enemy ) ;
71794: LD_ADDR_VAR 0 4
71798: PUSH
71799: LD_VAR 0 2
71803: PPUSH
71804: CALL_OW 250
71808: ST_TO_ADDR
// y := GetY ( enemy ) ;
71809: LD_ADDR_VAR 0 5
71813: PUSH
71814: LD_VAR 0 2
71818: PPUSH
71819: CALL_OW 251
71823: ST_TO_ADDR
// if ValidHex ( x , y ) then
71824: LD_VAR 0 4
71828: PPUSH
71829: LD_VAR 0 5
71833: PPUSH
71834: CALL_OW 488
71838: IFFALSE 71918
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
71840: LD_VAR 0 2
71844: PPUSH
71845: CALL_OW 247
71849: PUSH
71850: LD_INT 3
71852: PUSH
71853: LD_INT 2
71855: PUSH
71856: EMPTY
71857: LIST
71858: LIST
71859: IN
71860: PUSH
71861: LD_VAR 0 1
71865: PPUSH
71866: CALL_OW 255
71870: PPUSH
71871: LD_VAR 0 2
71875: PPUSH
71876: CALL_OW 292
71880: AND
71881: IFFALSE 71899
// ComAttackUnit ( unit , enemy ) else
71883: LD_VAR 0 1
71887: PPUSH
71888: LD_VAR 0 2
71892: PPUSH
71893: CALL_OW 115
71897: GO 71918
// ComAgressiveMove ( unit , x , y ) ;
71899: LD_VAR 0 1
71903: PPUSH
71904: LD_VAR 0 4
71908: PPUSH
71909: LD_VAR 0 5
71913: PPUSH
71914: CALL_OW 114
// end ; end_of_file
71918: LD_VAR 0 3
71922: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71923: LD_VAR 0 1
71927: PUSH
71928: LD_INT 200
71930: DOUBLE
71931: GREATEREQUAL
71932: IFFALSE 71940
71934: LD_INT 299
71936: DOUBLE
71937: LESSEQUAL
71938: IFTRUE 71942
71940: GO 71974
71942: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71943: LD_VAR 0 1
71947: PPUSH
71948: LD_VAR 0 2
71952: PPUSH
71953: LD_VAR 0 3
71957: PPUSH
71958: LD_VAR 0 4
71962: PPUSH
71963: LD_VAR 0 5
71967: PPUSH
71968: CALL 25647 0 5
71972: GO 72051
71974: LD_INT 300
71976: DOUBLE
71977: GREATEREQUAL
71978: IFFALSE 71986
71980: LD_INT 399
71982: DOUBLE
71983: LESSEQUAL
71984: IFTRUE 71988
71986: GO 72050
71988: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71989: LD_VAR 0 1
71993: PPUSH
71994: LD_VAR 0 2
71998: PPUSH
71999: LD_VAR 0 3
72003: PPUSH
72004: LD_VAR 0 4
72008: PPUSH
72009: LD_VAR 0 5
72013: PPUSH
72014: LD_VAR 0 6
72018: PPUSH
72019: LD_VAR 0 7
72023: PPUSH
72024: LD_VAR 0 8
72028: PPUSH
72029: LD_VAR 0 9
72033: PPUSH
72034: LD_VAR 0 10
72038: PPUSH
72039: LD_VAR 0 11
72043: PPUSH
72044: CALL 21972 0 11
72048: GO 72051
72050: POP
// end ;
72051: PPOPN 11
72053: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72054: LD_VAR 0 1
72058: PPUSH
72059: LD_VAR 0 2
72063: PPUSH
72064: LD_VAR 0 3
72068: PPUSH
72069: LD_VAR 0 4
72073: PPUSH
72074: LD_VAR 0 5
72078: PPUSH
72079: CALL 25383 0 5
// end ; end_of_file
72083: PPOPN 5
72085: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72086: LD_VAR 0 1
72090: PPUSH
72091: LD_VAR 0 2
72095: PPUSH
72096: LD_VAR 0 3
72100: PPUSH
72101: LD_VAR 0 4
72105: PPUSH
72106: LD_VAR 0 5
72110: PPUSH
72111: LD_VAR 0 6
72115: PPUSH
72116: CALL 9624 0 6
// end ;
72120: PPOPN 6
72122: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
72123: LD_INT 0
72125: PPUSH
// begin if not units then
72126: LD_VAR 0 1
72130: NOT
72131: IFFALSE 72135
// exit ;
72133: GO 72135
// end ;
72135: PPOPN 7
72137: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72138: CALL 9528 0 0
// end ;
72142: PPOPN 1
72144: END
