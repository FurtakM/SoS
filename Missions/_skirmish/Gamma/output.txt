// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// SetDifficulty ( GetMultiplayerSetting ( 0 ) ) ;
  11: LD_INT 0
  13: PPUSH
  14: CALL_OW 426
  18: PPUSH
  19: CALL 279 0 1
// InGameOn ;
  23: CALL_OW 8
// CenterNowOnXY ( 0 , 0 ) ;
  27: LD_INT 0
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: CALL_OW 86
// RandomizeAll ;
  37: CALL_OW 11
// DestroyTrash ;
  41: CALL 148 0 0
// ShowPath ;
  45: CALL 214 0 0
// RandMusic ( 1 , 3 ) ;
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 3
  54: PPUSH
  55: CALL 222 0 2
// PrepareAnimals ( [ 8 , 7 , 6 ] [ dif ] , 2 , 3 , nature ) ;
  59: LD_INT 8
  61: PUSH
  62: LD_INT 7
  64: PUSH
  65: LD_INT 6
  67: PUSH
  68: EMPTY
  69: LIST
  70: LIST
  71: LIST
  72: PUSH
  73: LD_EXP 1
  77: ARRAY
  78: PPUSH
  79: LD_INT 2
  81: PPUSH
  82: LD_INT 3
  84: PPUSH
  85: LD_INT 10
  87: PPUSH
  88: CALL 329 0 4
// PrepareRussian ;
  92: CALL 1407 0 0
// Action ;
  96: CALL 8617 0 0
// PrepareAmerican ;
 100: CALL 5237 0 0
// end ;
 104: END
// every 2 2$00 + 1 1$0 do var i , bool ;
 105: GO 107
 107: DISABLE
 108: LD_INT 0
 110: PPUSH
 111: PPUSH
// begin bool := Rand ( false , true ) ;
 112: LD_ADDR_VAR 0 2
 116: PUSH
 117: LD_INT 0
 119: PPUSH
 120: LD_INT 1
 122: PPUSH
 123: CALL_OW 12
 127: ST_TO_ADDR
// if bool then
 128: LD_VAR 0 2
 132: IFFALSE 144
// RandMusic ( 1 , 3 ) ;
 134: LD_INT 1
 136: PPUSH
 137: LD_INT 3
 139: PPUSH
 140: CALL 222 0 2
// enable ;
 144: ENABLE
// end ; end_of_file
 145: PPOPN 2
 147: END
// export function DestroyTrash ; var i ; begin
 148: LD_INT 0
 150: PPUSH
 151: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_not , [ f_lives , 5 ] ] ] ) do
 152: LD_ADDR_VAR 0 2
 156: PUSH
 157: LD_INT 22
 159: PUSH
 160: LD_INT 0
 162: PUSH
 163: EMPTY
 164: LIST
 165: LIST
 166: PUSH
 167: LD_INT 3
 169: PUSH
 170: LD_INT 24
 172: PUSH
 173: LD_INT 5
 175: PUSH
 176: EMPTY
 177: LIST
 178: LIST
 179: PUSH
 180: EMPTY
 181: LIST
 182: LIST
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 69
 192: PUSH
 193: FOR_IN
 194: IFFALSE 207
// KillUnit ( i ) ;
 196: LD_VAR 0 2
 200: PPUSH
 201: CALL_OW 66
 205: GO 193
 207: POP
 208: POP
// end ;
 209: LD_VAR 0 1
 213: RET
// export function ShowPath ; begin
 214: LD_INT 0
 216: PPUSH
// end ;
 217: LD_VAR 0 1
 221: RET
// export function RandMusic ( n1 , n2 ) ; var proc ; begin
 222: LD_INT 0
 224: PPUSH
 225: PPUSH
// proc := Rand ( 0 , 100 ) ;
 226: LD_ADDR_VAR 0 4
 230: PUSH
 231: LD_INT 0
 233: PPUSH
 234: LD_INT 100
 236: PPUSH
 237: CALL_OW 12
 241: ST_TO_ADDR
// if proc > 50 then
 242: LD_VAR 0 4
 246: PUSH
 247: LD_INT 50
 249: GREATER
 250: IFFALSE 264
// music_nat := n1 else
 252: LD_ADDR_OWVAR 71
 256: PUSH
 257: LD_VAR 0 1
 261: ST_TO_ADDR
 262: GO 274
// music_nat := n2 ;
 264: LD_ADDR_OWVAR 71
 268: PUSH
 269: LD_VAR 0 2
 273: ST_TO_ADDR
// end ;
 274: LD_VAR 0 3
 278: RET
// export dif ; export function SetDifficulty ( val ) ; begin
 279: LD_INT 0
 281: PPUSH
// if not val then
 282: LD_VAR 0 1
 286: NOT
 287: IFFALSE 297
// val := 2 ;
 289: LD_ADDR_VAR 0 1
 293: PUSH
 294: LD_INT 2
 296: ST_TO_ADDR
// dif := val ;
 297: LD_ADDR_EXP 1
 301: PUSH
 302: LD_VAR 0 1
 306: ST_TO_ADDR
// if dif < 3 then
 307: LD_EXP 1
 311: PUSH
 312: LD_INT 3
 314: LESS
 315: IFFALSE 324
// RemoveEnvironmentArea ( evnt ) ;
 317: LD_INT 9
 319: PPUSH
 320: CALL_OW 355
// end ;
 324: LD_VAR 0 2
 328: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
 333: PPUSH
 334: PPUSH
 335: PPUSH
// uc_nation = nation_nature ;
 336: LD_ADDR_OWVAR 21
 340: PUSH
 341: LD_INT 0
 343: ST_TO_ADDR
// uc_side = 0 ;
 344: LD_ADDR_OWVAR 20
 348: PUSH
 349: LD_INT 0
 351: ST_TO_ADDR
// hc_importance := 0 ;
 352: LD_ADDR_OWVAR 32
 356: PUSH
 357: LD_INT 0
 359: ST_TO_ADDR
// l = 0 ;
 360: LD_ADDR_VAR 0 6
 364: PUSH
 365: LD_INT 0
 367: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
 368: LD_ADDR_OWVAR 24
 372: PUSH
 373: LD_INT 0
 375: PPUSH
 376: LD_INT 5
 378: PPUSH
 379: CALL_OW 12
 383: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
 384: LD_ADDR_OWVAR 35
 388: PUSH
 389: LD_INT 5
 391: NEG
 392: PPUSH
 393: LD_INT 5
 395: PPUSH
 396: CALL_OW 12
 400: ST_TO_ADDR
// hc_gallery =  ;
 401: LD_ADDR_OWVAR 33
 405: PUSH
 406: LD_STRING 
 408: ST_TO_ADDR
// hc_class = class_apeman ;
 409: LD_ADDR_OWVAR 28
 413: PUSH
 414: LD_INT 12
 416: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
 417: LD_ADDR_OWVAR 29
 421: PUSH
 422: LD_INT 11
 424: PPUSH
 425: LD_INT 13
 427: PPUSH
 428: CALL_OW 12
 432: PUSH
 433: LD_INT 10
 435: PPUSH
 436: LD_INT 11
 438: PPUSH
 439: CALL_OW 12
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: ST_TO_ADDR
// hc_sex = sex_male ;
 448: LD_ADDR_OWVAR 27
 452: PUSH
 453: LD_INT 1
 455: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
 456: LD_ADDR_OWVAR 31
 460: PUSH
 461: LD_INT 0
 463: PPUSH
 464: LD_INT 2
 466: PPUSH
 467: CALL_OW 12
 471: PUSH
 472: LD_INT 0
 474: PUSH
 475: LD_INT 0
 477: PUSH
 478: LD_INT 0
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: ST_TO_ADDR
// apeman = CreateHuman ;
 487: LD_ADDR_VAR 0 7
 491: PUSH
 492: CALL_OW 44
 496: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
 497: LD_VAR 0 7
 501: PPUSH
 502: LD_VAR 0 4
 506: PPUSH
 507: LD_INT 0
 509: PPUSH
 510: CALL_OW 49
// l = l + 1 ;
 514: LD_ADDR_VAR 0 6
 518: PUSH
 519: LD_VAR 0 6
 523: PUSH
 524: LD_INT 1
 526: PLUS
 527: ST_TO_ADDR
// end until l = num1 ;
 528: LD_VAR 0 6
 532: PUSH
 533: LD_VAR 0 1
 537: EQUAL
 538: IFFALSE 368
// l = 0 ;
 540: LD_ADDR_VAR 0 6
 544: PUSH
 545: LD_INT 0
 547: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
 548: LD_ADDR_OWVAR 35
 552: PUSH
 553: LD_INT 0
 555: PPUSH
 556: LD_INT 25
 558: PPUSH
 559: CALL_OW 12
 563: ST_TO_ADDR
// hc_class = class_tiger ;
 564: LD_ADDR_OWVAR 28
 568: PUSH
 569: LD_INT 14
 571: ST_TO_ADDR
// hc_sex = sex_male ;
 572: LD_ADDR_OWVAR 27
 576: PUSH
 577: LD_INT 1
 579: ST_TO_ADDR
// hc_gallery = sandnature ;
 580: LD_ADDR_OWVAR 33
 584: PUSH
 585: LD_STRING sandnature
 587: ST_TO_ADDR
// hc_face_number = 3 ;
 588: LD_ADDR_OWVAR 34
 592: PUSH
 593: LD_INT 3
 595: ST_TO_ADDR
// tiger = CreateHuman ;
 596: LD_ADDR_VAR 0 8
 600: PUSH
 601: CALL_OW 44
 605: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
 606: LD_VAR 0 8
 610: PPUSH
 611: LD_VAR 0 4
 615: PPUSH
 616: LD_INT 0
 618: PPUSH
 619: CALL_OW 49
// l = l + 1 ;
 623: LD_ADDR_VAR 0 6
 627: PUSH
 628: LD_VAR 0 6
 632: PUSH
 633: LD_INT 1
 635: PLUS
 636: ST_TO_ADDR
// end until l = num2 ;
 637: LD_VAR 0 6
 641: PUSH
 642: LD_VAR 0 2
 646: EQUAL
 647: IFFALSE 548
// l = 0 ;
 649: LD_ADDR_VAR 0 6
 653: PUSH
 654: LD_INT 0
 656: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
 657: LD_ADDR_OWVAR 28
 661: PUSH
 662: LD_INT 18
 664: ST_TO_ADDR
// hc_gallery = sandnature ;
 665: LD_ADDR_OWVAR 33
 669: PUSH
 670: LD_STRING sandnature
 672: ST_TO_ADDR
// hc_face_number = 1 ;
 673: LD_ADDR_OWVAR 34
 677: PUSH
 678: LD_INT 1
 680: ST_TO_ADDR
// bird = CreateHuman ;
 681: LD_ADDR_VAR 0 9
 685: PUSH
 686: CALL_OW 44
 690: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
 691: LD_VAR 0 9
 695: PPUSH
 696: LD_INT 0
 698: PPUSH
 699: CALL_OW 51
// l = l + 1 ;
 703: LD_ADDR_VAR 0 6
 707: PUSH
 708: LD_VAR 0 6
 712: PUSH
 713: LD_INT 1
 715: PLUS
 716: ST_TO_ADDR
// end until l = num3 ;
 717: LD_VAR 0 6
 721: PUSH
 722: LD_VAR 0 3
 726: EQUAL
 727: IFFALSE 657
// end ;
 729: LD_VAR 0 5
 733: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
 734: LD_INT 0
 736: PPUSH
 737: PPUSH
 738: PPUSH
 739: PPUSH
 740: PPUSH
 741: PPUSH
// InitHc ;
 742: CALL_OW 19
// hc_class := clas ;
 746: LD_ADDR_OWVAR 28
 750: PUSH
 751: LD_VAR 0 1
 755: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
 756: LD_ADDR_VAR 0 4
 760: PUSH
 761: LD_VAR 0 2
 765: PUSH
 766: LD_INT 1
 768: NEG
 769: PPUSH
 770: LD_INT 1
 772: PPUSH
 773: CALL_OW 12
 777: PLUS
 778: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
 779: LD_ADDR_VAR 0 5
 783: PUSH
 784: LD_VAR 0 2
 788: PUSH
 789: LD_INT 1
 791: NEG
 792: PPUSH
 793: LD_INT 1
 795: PPUSH
 796: CALL_OW 12
 800: PLUS
 801: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
 802: LD_ADDR_VAR 0 6
 806: PUSH
 807: LD_VAR 0 2
 811: PUSH
 812: LD_INT 1
 814: NEG
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: CALL_OW 12
 823: PLUS
 824: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
 825: LD_ADDR_VAR 0 7
 829: PUSH
 830: LD_VAR 0 2
 834: PUSH
 835: LD_INT 1
 837: NEG
 838: PPUSH
 839: LD_INT 1
 841: PPUSH
 842: CALL_OW 12
 846: PLUS
 847: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
 848: LD_VAR 0 1
 852: PUSH
 853: LD_INT 1
 855: EQUAL
 856: PUSH
 857: LD_VAR 0 1
 861: PUSH
 862: LD_INT 9
 864: EQUAL
 865: OR
 866: PUSH
 867: LD_VAR 0 1
 871: PUSH
 872: LD_INT 5
 874: EQUAL
 875: OR
 876: PUSH
 877: LD_VAR 0 1
 881: PUSH
 882: LD_INT 8
 884: EQUAL
 885: OR
 886: IFFALSE 911
// bonus := [ 2 , 0 , 0 , 0 ] ;
 888: LD_ADDR_VAR 0 8
 892: PUSH
 893: LD_INT 2
 895: PUSH
 896: LD_INT 0
 898: PUSH
 899: LD_INT 0
 901: PUSH
 902: LD_INT 0
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: ST_TO_ADDR
// if clas = 2 then
 911: LD_VAR 0 1
 915: PUSH
 916: LD_INT 2
 918: EQUAL
 919: IFFALSE 944
// bonus := [ 0 , 2 , 0 , 0 ] ;
 921: LD_ADDR_VAR 0 8
 925: PUSH
 926: LD_INT 0
 928: PUSH
 929: LD_INT 2
 931: PUSH
 932: LD_INT 0
 934: PUSH
 935: LD_INT 0
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: ST_TO_ADDR
// if clas = 3 then
 944: LD_VAR 0 1
 948: PUSH
 949: LD_INT 3
 951: EQUAL
 952: IFFALSE 977
// bonus := [ 0 , 0 , 2 , 0 ] ;
 954: LD_ADDR_VAR 0 8
 958: PUSH
 959: LD_INT 0
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: LD_INT 2
 967: PUSH
 968: LD_INT 0
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: ST_TO_ADDR
// if clas = 4 then
 977: LD_VAR 0 1
 981: PUSH
 982: LD_INT 4
 984: EQUAL
 985: IFFALSE 1010
// bonus := [ 0 , 0 , 0 , 2 ] ;
 987: LD_ADDR_VAR 0 8
 991: PUSH
 992: LD_INT 0
 994: PUSH
 995: LD_INT 0
 997: PUSH
 998: LD_INT 0
1000: PUSH
1001: LD_INT 2
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
1010: LD_VAR 0 1
1014: PUSH
1015: LD_INT 4
1017: GREATER
1018: PUSH
1019: LD_VAR 0 1
1023: PUSH
1024: LD_INT 9
1026: NONEQUAL
1027: AND
1028: PUSH
1029: LD_VAR 0 1
1033: PUSH
1034: LD_INT 5
1036: NONEQUAL
1037: AND
1038: PUSH
1039: LD_VAR 0 1
1043: PUSH
1044: LD_INT 8
1046: NONEQUAL
1047: AND
1048: IFFALSE 1073
// bonus := [ 0 , 0 , 0 , 0 ] ;
1050: LD_ADDR_VAR 0 8
1054: PUSH
1055: LD_INT 0
1057: PUSH
1058: LD_INT 0
1060: PUSH
1061: LD_INT 0
1063: PUSH
1064: LD_INT 0
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
1073: LD_ADDR_OWVAR 30
1077: PUSH
1078: LD_INT 0
1080: PPUSH
1081: LD_INT 2
1083: PPUSH
1084: CALL_OW 12
1088: PUSH
1089: LD_INT 0
1091: PPUSH
1092: LD_INT 2
1094: PPUSH
1095: CALL_OW 12
1099: PUSH
1100: LD_INT 0
1102: PPUSH
1103: LD_INT 2
1105: PPUSH
1106: CALL_OW 12
1110: PUSH
1111: LD_INT 0
1113: PPUSH
1114: LD_INT 2
1116: PPUSH
1117: CALL_OW 12
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: LIST
1127: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
1128: LD_ADDR_OWVAR 31
1132: PUSH
1133: LD_VAR 0 4
1137: PUSH
1138: LD_VAR 0 8
1142: PUSH
1143: LD_INT 1
1145: ARRAY
1146: PLUS
1147: PUSH
1148: LD_VAR 0 5
1152: PUSH
1153: LD_VAR 0 8
1157: PUSH
1158: LD_INT 2
1160: ARRAY
1161: PLUS
1162: PUSH
1163: LD_VAR 0 6
1167: PUSH
1168: LD_VAR 0 8
1172: PUSH
1173: LD_INT 3
1175: ARRAY
1176: PLUS
1177: PUSH
1178: LD_VAR 0 7
1182: PUSH
1183: LD_VAR 0 8
1187: PUSH
1188: LD_INT 4
1190: ARRAY
1191: PLUS
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: ST_TO_ADDR
// if clas = 3 then
1199: LD_VAR 0 1
1203: PUSH
1204: LD_INT 3
1206: EQUAL
1207: IFFALSE 1219
// hc_sex := sex_male else
1209: LD_ADDR_OWVAR 27
1213: PUSH
1214: LD_INT 1
1216: ST_TO_ADDR
1217: GO 1235
// hc_sex := Rand ( sex_male , sex_female ) ;
1219: LD_ADDR_OWVAR 27
1223: PUSH
1224: LD_INT 1
1226: PPUSH
1227: LD_INT 2
1229: PPUSH
1230: CALL_OW 12
1234: ST_TO_ADDR
// hc_gallery :=  ;
1235: LD_ADDR_OWVAR 33
1239: PUSH
1240: LD_STRING 
1242: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 8 , 12 ) ] ;
1243: LD_ADDR_OWVAR 29
1247: PUSH
1248: LD_INT 8
1250: PPUSH
1251: LD_INT 12
1253: PPUSH
1254: CALL_OW 12
1258: PUSH
1259: LD_INT 8
1261: PPUSH
1262: LD_INT 12
1264: PPUSH
1265: CALL_OW 12
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: ST_TO_ADDR
// hc_name :=  ;
1274: LD_ADDR_OWVAR 26
1278: PUSH
1279: LD_STRING 
1281: ST_TO_ADDR
// result := CreateHuman ;
1282: LD_ADDR_VAR 0 3
1286: PUSH
1287: CALL_OW 44
1291: ST_TO_ADDR
// end ;
1292: LD_VAR 0 3
1296: RET
// export function CreateVehicleWithDriver ( chassis , engine , weapon , area , dir , lvl ) ; var veh ; begin
1297: LD_INT 0
1299: PPUSH
1300: PPUSH
// vc_chassis := chassis ;
1301: LD_ADDR_OWVAR 37
1305: PUSH
1306: LD_VAR 0 1
1310: ST_TO_ADDR
// vc_engine := engine ;
1311: LD_ADDR_OWVAR 39
1315: PUSH
1316: LD_VAR 0 2
1320: ST_TO_ADDR
// vc_weapon := weapon ;
1321: LD_ADDR_OWVAR 40
1325: PUSH
1326: LD_VAR 0 3
1330: ST_TO_ADDR
// vc_control := control_manual ;
1331: LD_ADDR_OWVAR 38
1335: PUSH
1336: LD_INT 1
1338: ST_TO_ADDR
// veh := CreateVehicle ;
1339: LD_ADDR_VAR 0 8
1343: PUSH
1344: CALL_OW 45
1348: ST_TO_ADDR
// SetDir ( veh , dir ) ;
1349: LD_VAR 0 8
1353: PPUSH
1354: LD_VAR 0 5
1358: PPUSH
1359: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
1363: LD_VAR 0 8
1367: PPUSH
1368: LD_VAR 0 4
1372: PPUSH
1373: LD_INT 0
1375: PPUSH
1376: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , lvl ) , veh ) ;
1380: LD_INT 3
1382: PPUSH
1383: LD_VAR 0 6
1387: PPUSH
1388: CALL 734 0 2
1392: PPUSH
1393: LD_VAR 0 8
1397: PPUSH
1398: CALL_OW 52
// end ; end_of_file
1402: LD_VAR 0 7
1406: RET
// export Popov , Commander , Platonov , Kapral ; export depot_rdy , dep_x , dep_y ; export function PrepareRussian ; var i , un , skill , team , p ; begin
1407: LD_INT 0
1409: PPUSH
1410: PPUSH
1411: PPUSH
1412: PPUSH
1413: PPUSH
1414: PPUSH
// depot_rdy := false ;
1415: LD_ADDR_EXP 6
1419: PUSH
1420: LD_INT 0
1422: ST_TO_ADDR
// uc_side := 6 ;
1423: LD_ADDR_OWVAR 20
1427: PUSH
1428: LD_INT 6
1430: ST_TO_ADDR
// uc_nation := 3 ;
1431: LD_ADDR_OWVAR 21
1435: PUSH
1436: LD_INT 3
1438: ST_TO_ADDR
// hc_gallery := ru ;
1439: LD_ADDR_OWVAR 33
1443: PUSH
1444: LD_STRING ru
1446: ST_TO_ADDR
// hc_face_number := 10 ;
1447: LD_ADDR_OWVAR 34
1451: PUSH
1452: LD_INT 10
1454: ST_TO_ADDR
// hc_name := Siergiej I. Popov ;
1455: LD_ADDR_OWVAR 26
1459: PUSH
1460: LD_STRING Siergiej I. Popov
1462: ST_TO_ADDR
// hc_class := 1 ;
1463: LD_ADDR_OWVAR 28
1467: PUSH
1468: LD_INT 1
1470: ST_TO_ADDR
// hc_sex := sex_male ;
1471: LD_ADDR_OWVAR 27
1475: PUSH
1476: LD_INT 1
1478: ST_TO_ADDR
// popov := CreateHuman ;
1479: LD_ADDR_EXP 2
1483: PUSH
1484: CALL_OW 44
1488: ST_TO_ADDR
// hc_gallery := general ;
1489: LD_ADDR_OWVAR 33
1493: PUSH
1494: LD_STRING general
1496: ST_TO_ADDR
// hc_face_number := 1 ;
1497: LD_ADDR_OWVAR 34
1501: PUSH
1502: LD_INT 1
1504: ST_TO_ADDR
// hc_name := Mjr. D. N. Platonow ;
1505: LD_ADDR_OWVAR 26
1509: PUSH
1510: LD_STRING Mjr. D. N. Platonow
1512: ST_TO_ADDR
// platonov := CreateHuman ;
1513: LD_ADDR_EXP 4
1517: PUSH
1518: CALL_OW 44
1522: ST_TO_ADDR
// uc_side := 3 ;
1523: LD_ADDR_OWVAR 20
1527: PUSH
1528: LD_INT 3
1530: ST_TO_ADDR
// ChangeSideFog ( 3 , 6 ) ;
1531: LD_INT 3
1533: PPUSH
1534: LD_INT 6
1536: PPUSH
1537: CALL_OW 343
// skill := [ 6 , 5 , 4 ] [ dif ] ;
1541: LD_ADDR_VAR 0 4
1545: PUSH
1546: LD_INT 6
1548: PUSH
1549: LD_INT 5
1551: PUSH
1552: LD_INT 4
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: LIST
1559: PUSH
1560: LD_EXP 1
1564: ARRAY
1565: ST_TO_ADDR
// team := [ ] ;
1566: LD_ADDR_VAR 0 5
1570: PUSH
1571: EMPTY
1572: ST_TO_ADDR
// hc_importance := 100 ;
1573: LD_ADDR_OWVAR 32
1577: PUSH
1578: LD_INT 100
1580: ST_TO_ADDR
// hc_gallery := gamma ;
1581: LD_ADDR_OWVAR 33
1585: PUSH
1586: LD_STRING gamma
1588: ST_TO_ADDR
// hc_face_number := 1 ;
1589: LD_ADDR_OWVAR 34
1593: PUSH
1594: LD_INT 1
1596: ST_TO_ADDR
// hc_class := 1 ;
1597: LD_ADDR_OWVAR 28
1601: PUSH
1602: LD_INT 1
1604: ST_TO_ADDR
// hc_skills := [ [ 8 , 7 , 6 ] [ dif ] , 5 , 3 , 0 ] ;
1605: LD_ADDR_OWVAR 31
1609: PUSH
1610: LD_INT 8
1612: PUSH
1613: LD_INT 7
1615: PUSH
1616: LD_INT 6
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: LIST
1623: PUSH
1624: LD_EXP 1
1628: ARRAY
1629: PUSH
1630: LD_INT 5
1632: PUSH
1633: LD_INT 3
1635: PUSH
1636: LD_INT 0
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: ST_TO_ADDR
// hc_sex := sex_male ;
1645: LD_ADDR_OWVAR 27
1649: PUSH
1650: LD_INT 1
1652: ST_TO_ADDR
// hc_name := Mjr. Jurij Karakanov ;
1653: LD_ADDR_OWVAR 26
1657: PUSH
1658: LD_STRING Mjr. Jurij Karakanov
1660: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1661: LD_ADDR_OWVAR 29
1665: PUSH
1666: LD_INT 10
1668: PUSH
1669: LD_INT 11
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: ST_TO_ADDR
// commander := CreateHuman ;
1676: LD_ADDR_EXP 3
1680: PUSH
1681: CALL_OW 44
1685: ST_TO_ADDR
// team := team ^ commander ;
1686: LD_ADDR_VAR 0 5
1690: PUSH
1691: LD_VAR 0 5
1695: PUSH
1696: LD_EXP 3
1700: ADD
1701: ST_TO_ADDR
// hc_importance := 0 ;
1702: LD_ADDR_OWVAR 32
1706: PUSH
1707: LD_INT 0
1709: ST_TO_ADDR
// hc_name :=  ;
1710: LD_ADDR_OWVAR 26
1714: PUSH
1715: LD_STRING 
1717: ST_TO_ADDR
// hc_gallery :=  ;
1718: LD_ADDR_OWVAR 33
1722: PUSH
1723: LD_STRING 
1725: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
1726: LD_ADDR_OWVAR 29
1730: PUSH
1731: LD_INT 12
1733: PUSH
1734: LD_INT 10
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: ST_TO_ADDR
// hc_sex := sex_male ;
1741: LD_ADDR_OWVAR 27
1745: PUSH
1746: LD_INT 1
1748: ST_TO_ADDR
// Kapral := CreateHuman ;
1749: LD_ADDR_EXP 5
1753: PUSH
1754: CALL_OW 44
1758: ST_TO_ADDR
// for i = 3 downto dif do
1759: LD_ADDR_VAR 0 2
1763: PUSH
1764: DOUBLE
1765: LD_INT 3
1767: INC
1768: ST_TO_ADDR
1769: LD_EXP 1
1773: PUSH
1774: FOR_DOWNTO
1775: IFFALSE 1881
// begin vc_chassis := ru_medium_tracked ;
1777: LD_ADDR_OWVAR 37
1781: PUSH
1782: LD_INT 22
1784: ST_TO_ADDR
// vc_engine := engine_combustion ;
1785: LD_ADDR_OWVAR 39
1789: PUSH
1790: LD_INT 1
1792: ST_TO_ADDR
// vc_control := control_manual ;
1793: LD_ADDR_OWVAR 38
1797: PUSH
1798: LD_INT 1
1800: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_gun , ru_gun ] [ i ] ;
1801: LD_ADDR_OWVAR 40
1805: PUSH
1806: LD_INT 43
1808: PUSH
1809: LD_INT 44
1811: PUSH
1812: LD_INT 44
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: LIST
1819: PUSH
1820: LD_VAR 0 2
1824: ARRAY
1825: ST_TO_ADDR
// vc_fuel_battery := Rand ( 55 , 77 ) ;
1826: LD_ADDR_OWVAR 41
1830: PUSH
1831: LD_INT 55
1833: PPUSH
1834: LD_INT 77
1836: PPUSH
1837: CALL_OW 12
1841: ST_TO_ADDR
// un := CreateVehicle ;
1842: LD_ADDR_VAR 0 3
1846: PUSH
1847: CALL_OW 45
1851: ST_TO_ADDR
// SetDir ( un , 5 ) ;
1852: LD_VAR 0 3
1856: PPUSH
1857: LD_INT 5
1859: PPUSH
1860: CALL_OW 233
// PlaceUnitArea ( un , rus_spawn , false ) ;
1864: LD_VAR 0 3
1868: PPUSH
1869: LD_INT 1
1871: PPUSH
1872: LD_INT 0
1874: PPUSH
1875: CALL_OW 49
// end ;
1879: GO 1774
1881: POP
1882: POP
// vc_weapon := ru_heavy_machine_gun ;
1883: LD_ADDR_OWVAR 40
1887: PUSH
1888: LD_INT 42
1890: ST_TO_ADDR
// vc_fuel_battery := Rand ( 55 , 77 ) ;
1891: LD_ADDR_OWVAR 41
1895: PUSH
1896: LD_INT 55
1898: PPUSH
1899: LD_INT 77
1901: PPUSH
1902: CALL_OW 12
1906: ST_TO_ADDR
// un := CreateVehicle ;
1907: LD_ADDR_VAR 0 3
1911: PUSH
1912: CALL_OW 45
1916: ST_TO_ADDR
// SetDir ( un , 5 ) ;
1917: LD_VAR 0 3
1921: PPUSH
1922: LD_INT 5
1924: PPUSH
1925: CALL_OW 233
// PlaceUnitArea ( un , rus_spawn , false ) ;
1929: LD_VAR 0 3
1933: PPUSH
1934: LD_INT 1
1936: PPUSH
1937: LD_INT 0
1939: PPUSH
1940: CALL_OW 49
// for p = 1 to 4 do
1944: LD_ADDR_VAR 0 6
1948: PUSH
1949: DOUBLE
1950: LD_INT 1
1952: DEC
1953: ST_TO_ADDR
1954: LD_INT 4
1956: PUSH
1957: FOR_TO
1958: IFFALSE 2025
// for i = 1 to [ 5 , 4 , 3 ] [ dif ] do
1960: LD_ADDR_VAR 0 2
1964: PUSH
1965: DOUBLE
1966: LD_INT 1
1968: DEC
1969: ST_TO_ADDR
1970: LD_INT 5
1972: PUSH
1973: LD_INT 4
1975: PUSH
1976: LD_INT 3
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: LIST
1983: PUSH
1984: LD_EXP 1
1988: ARRAY
1989: PUSH
1990: FOR_TO
1991: IFFALSE 2021
// team := team ^ CreateHumanWithClass ( p , skill ) ;
1993: LD_ADDR_VAR 0 5
1997: PUSH
1998: LD_VAR 0 5
2002: PUSH
2003: LD_VAR 0 6
2007: PPUSH
2008: LD_VAR 0 4
2012: PPUSH
2013: CALL 734 0 2
2017: ADD
2018: ST_TO_ADDR
2019: GO 1990
2021: POP
2022: POP
2023: GO 1957
2025: POP
2026: POP
// for i = 1 to team do
2027: LD_ADDR_VAR 0 2
2031: PUSH
2032: DOUBLE
2033: LD_INT 1
2035: DEC
2036: ST_TO_ADDR
2037: LD_VAR 0 5
2041: PUSH
2042: FOR_TO
2043: IFFALSE 2161
// if GetClass ( team [ i ] ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_empty ] ] ) then
2045: LD_VAR 0 5
2049: PUSH
2050: LD_VAR 0 2
2054: ARRAY
2055: PPUSH
2056: CALL_OW 257
2060: PUSH
2061: LD_INT 3
2063: EQUAL
2064: PUSH
2065: LD_INT 22
2067: PUSH
2068: LD_INT 3
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 58
2077: PUSH
2078: EMPTY
2079: LIST
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PPUSH
2085: CALL_OW 69
2089: AND
2090: IFFALSE 2138
// PlaceHumanInUnit ( team [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_empty ] ] ) [ 1 ] ) else
2092: LD_VAR 0 5
2096: PUSH
2097: LD_VAR 0 2
2101: ARRAY
2102: PPUSH
2103: LD_INT 22
2105: PUSH
2106: LD_INT 3
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: PUSH
2113: LD_INT 58
2115: PUSH
2116: EMPTY
2117: LIST
2118: PUSH
2119: EMPTY
2120: LIST
2121: LIST
2122: PPUSH
2123: CALL_OW 69
2127: PUSH
2128: LD_INT 1
2130: ARRAY
2131: PPUSH
2132: CALL_OW 52
2136: GO 2159
// PlaceUnitArea ( team [ i ] , rus_spawn , false ) ;
2138: LD_VAR 0 5
2142: PUSH
2143: LD_VAR 0 2
2147: ARRAY
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: LD_INT 0
2154: PPUSH
2155: CALL_OW 49
2159: GO 2042
2161: POP
2162: POP
// end ;
2163: LD_VAR 0 1
2167: RET
// every 0 0$10 trigger depot_rdy do var i , un , l , driver ;
2168: LD_EXP 6
2172: IFFALSE 2542
2174: GO 2176
2176: DISABLE
2177: LD_INT 0
2179: PPUSH
2180: PPUSH
2181: PPUSH
2182: PPUSH
// begin Wait ( 0 0$07 ) ;
2183: LD_INT 245
2185: PPUSH
2186: CALL_OW 67
// l := 0 ;
2190: LD_ADDR_VAR 0 3
2194: PUSH
2195: LD_INT 0
2197: ST_TO_ADDR
// repeat begin uc_side := 6 ;
2198: LD_ADDR_OWVAR 20
2202: PUSH
2203: LD_INT 6
2205: ST_TO_ADDR
// uc_nation := 3 ;
2206: LD_ADDR_OWVAR 21
2210: PUSH
2211: LD_INT 3
2213: ST_TO_ADDR
// CreateVehicleWithDriver ( ru_medium_tracked , engine_combustion , ru_cargo_bay , rus_cr_spawn , 5 , Rand ( 3 , 6 ) ) ;
2214: LD_INT 22
2216: PPUSH
2217: LD_INT 1
2219: PPUSH
2220: LD_INT 51
2222: PPUSH
2223: LD_INT 5
2225: PPUSH
2226: LD_INT 5
2228: PPUSH
2229: LD_INT 3
2231: PPUSH
2232: LD_INT 6
2234: PPUSH
2235: CALL_OW 12
2239: PPUSH
2240: CALL 1297 0 6
// un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
2244: LD_ADDR_VAR 0 2
2248: PUSH
2249: LD_INT 22
2251: PUSH
2252: LD_INT 6
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 34
2261: PUSH
2262: LD_INT 51
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PPUSH
2273: CALL_OW 69
2277: PUSH
2278: LD_INT 1
2280: ARRAY
2281: ST_TO_ADDR
// SetCargo ( un , mat_cans , 100 ) ;
2282: LD_VAR 0 2
2286: PPUSH
2287: LD_INT 1
2289: PPUSH
2290: LD_INT 100
2292: PPUSH
2293: CALL_OW 290
// ComMoveXY ( un , dep_x + 2 , dep_y ) ;
2297: LD_VAR 0 2
2301: PPUSH
2302: LD_EXP 7
2306: PUSH
2307: LD_INT 2
2309: PLUS
2310: PPUSH
2311: LD_EXP 8
2315: PPUSH
2316: CALL_OW 111
// AddComUnload ( un ) ;
2320: LD_VAR 0 2
2324: PPUSH
2325: CALL_OW 219
// if ( l = 0 ) then
2329: LD_VAR 0 3
2333: PUSH
2334: LD_INT 0
2336: EQUAL
2337: IFFALSE 2373
// begin Wait ( 0 0$03 ) ;
2339: LD_INT 105
2341: PPUSH
2342: CALL_OW 67
// driver := IsDrivenBy ( un ) ;
2346: LD_ADDR_VAR 0 4
2350: PUSH
2351: LD_VAR 0 2
2355: PPUSH
2356: CALL_OW 311
2360: ST_TO_ADDR
// Say ( driver , Dtran ) ;
2361: LD_VAR 0 4
2365: PPUSH
2366: LD_STRING Dtran
2368: PPUSH
2369: CALL_OW 88
// end ; if ( l = [ 7 , 6 , 5 ] [ dif ] - 1 ) then
2373: LD_VAR 0 3
2377: PUSH
2378: LD_INT 7
2380: PUSH
2381: LD_INT 6
2383: PUSH
2384: LD_INT 5
2386: PUSH
2387: EMPTY
2388: LIST
2389: LIST
2390: LIST
2391: PUSH
2392: LD_EXP 1
2396: ARRAY
2397: PUSH
2398: LD_INT 1
2400: MINUS
2401: EQUAL
2402: IFFALSE 2438
// begin Wait ( 0 0$03 ) ;
2404: LD_INT 105
2406: PPUSH
2407: CALL_OW 67
// driver := IsDrivenBy ( un ) ;
2411: LD_ADDR_VAR 0 4
2415: PUSH
2416: LD_VAR 0 2
2420: PPUSH
2421: CALL_OW 311
2425: ST_TO_ADDR
// Say ( driver , Dtrans ) ;
2426: LD_VAR 0 4
2430: PPUSH
2431: LD_STRING Dtrans
2433: PPUSH
2434: CALL_OW 88
// end ; while ( not IsInArea ( un , rus_exit ) ) do
2438: LD_VAR 0 2
2442: PPUSH
2443: LD_INT 6
2445: PPUSH
2446: CALL_OW 308
2450: NOT
2451: IFFALSE 2477
// begin Wait ( 0 0$01 ) ;
2453: LD_INT 35
2455: PPUSH
2456: CALL_OW 67
// AddComMoveXY ( un , 69 , 97 ) ;
2460: LD_VAR 0 2
2464: PPUSH
2465: LD_INT 69
2467: PPUSH
2468: LD_INT 97
2470: PPUSH
2471: CALL_OW 171
// end ;
2475: GO 2438
// RemoveUnit ( un ) ;
2477: LD_VAR 0 2
2481: PPUSH
2482: CALL_OW 64
// l = l + 1 ;
2486: LD_ADDR_VAR 0 3
2490: PUSH
2491: LD_VAR 0 3
2495: PUSH
2496: LD_INT 1
2498: PLUS
2499: ST_TO_ADDR
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
2500: LD_INT 1155
2502: PPUSH
2503: LD_INT 5355
2505: PPUSH
2506: CALL_OW 12
2510: PPUSH
2511: CALL_OW 67
// end until l = [ 7 , 6 , 5 ] [ dif ] ;
2515: LD_VAR 0 3
2519: PUSH
2520: LD_INT 7
2522: PUSH
2523: LD_INT 6
2525: PUSH
2526: LD_INT 5
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: LIST
2533: PUSH
2534: LD_EXP 1
2538: ARRAY
2539: EQUAL
2540: IFFALSE 2198
// end ; end_of_file
2542: PPOPN 4
2544: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_bazooka and event_rocket = false then
2545: LD_VAR 0 1
2549: PUSH
2550: LD_INT 44
2552: EQUAL
2553: PUSH
2554: LD_EXP 20
2558: PUSH
2559: LD_INT 0
2561: EQUAL
2562: AND
2563: IFFALSE 2709
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) > 0 then
2565: LD_INT 22
2567: PUSH
2568: LD_INT 3
2570: PUSH
2571: EMPTY
2572: LIST
2573: LIST
2574: PUSH
2575: LD_INT 25
2577: PUSH
2578: LD_INT 4
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: PPUSH
2589: CALL_OW 69
2593: PUSH
2594: LD_INT 0
2596: GREATER
2597: IFFALSE 2709
// begin event_rocket := true ;
2599: LD_ADDR_EXP 20
2603: PUSH
2604: LD_INT 1
2606: ST_TO_ADDR
// if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) > 0 then
2607: LD_INT 22
2609: PUSH
2610: LD_INT 3
2612: PUSH
2613: EMPTY
2614: LIST
2615: LIST
2616: PUSH
2617: LD_INT 25
2619: PUSH
2620: LD_INT 4
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: PUSH
2627: LD_INT 26
2629: PUSH
2630: LD_INT 1
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: LIST
2641: PUSH
2642: EMPTY
2643: LIST
2644: PPUSH
2645: CALL_OW 69
2649: PUSH
2650: LD_INT 0
2652: GREATER
2653: IFFALSE 2709
// Say ( FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) [ 1 ] , Dsci2 ) ;
2655: LD_INT 22
2657: PUSH
2658: LD_INT 3
2660: PUSH
2661: EMPTY
2662: LIST
2663: LIST
2664: PUSH
2665: LD_INT 25
2667: PUSH
2668: LD_INT 4
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: PUSH
2675: LD_INT 26
2677: PUSH
2678: LD_INT 1
2680: PUSH
2681: EMPTY
2682: LIST
2683: LIST
2684: PUSH
2685: EMPTY
2686: LIST
2687: LIST
2688: LIST
2689: PUSH
2690: EMPTY
2691: LIST
2692: PPUSH
2693: CALL_OW 69
2697: PUSH
2698: LD_INT 1
2700: ARRAY
2701: PPUSH
2702: LD_STRING Dsci2
2704: PPUSH
2705: CALL_OW 88
// end ; end ;
2709: PPOPN 2
2711: END
// on VehicleConstructed ( un , fac ) do begin if GetSide ( un ) = 3 and GetControl ( un ) = control_computer then
2712: LD_VAR 0 1
2716: PPUSH
2717: CALL_OW 255
2721: PUSH
2722: LD_INT 3
2724: EQUAL
2725: PUSH
2726: LD_VAR 0 1
2730: PPUSH
2731: CALL_OW 263
2735: PUSH
2736: LD_INT 3
2738: EQUAL
2739: AND
2740: IFFALSE 2750
// comp_tested := true ;
2742: LD_ADDR_EXP 22
2746: PUSH
2747: LD_INT 1
2749: ST_TO_ADDR
// end ;
2750: PPOPN 2
2752: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
2753: LD_VAR 0 1
2757: PUSH
2758: LD_INT 22
2760: PUSH
2761: LD_INT 1
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: PUSH
2768: LD_INT 21
2770: PUSH
2771: LD_INT 3
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: PPUSH
2782: CALL_OW 69
2786: IN
2787: IFFALSE 2865
// if attacked = false and sikorski_ar = false then
2789: LD_EXP 15
2793: PUSH
2794: LD_INT 0
2796: EQUAL
2797: PUSH
2798: LD_EXP 12
2802: PUSH
2803: LD_INT 0
2805: EQUAL
2806: AND
2807: IFFALSE 2865
// begin attacked := true ;
2809: LD_ADDR_EXP 15
2813: PUSH
2814: LD_INT 1
2816: ST_TO_ADDR
// if IsInUnit ( donald ) then
2817: LD_EXP 13
2821: PPUSH
2822: CALL_OW 310
2826: IFFALSE 2842
// SayRadio ( donald , DGammaF ) else
2828: LD_EXP 13
2832: PPUSH
2833: LD_STRING DGammaF
2835: PPUSH
2836: CALL_OW 94
2840: GO 2865
// if IsInUnit ( van ) then
2842: LD_EXP 14
2846: PPUSH
2847: CALL_OW 310
2851: IFFALSE 2865
// SayRadio ( van , DGammaM ) ;
2853: LD_EXP 14
2857: PPUSH
2858: LD_STRING DGammaM
2860: PPUSH
2861: CALL_OW 94
// end ; if un in FilterAllUnits ( [ f_control , control_remote ] ) then
2865: LD_VAR 0 1
2869: PUSH
2870: LD_INT 33
2872: PUSH
2873: LD_INT 2
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PPUSH
2880: CALL_OW 69
2884: IN
2885: IFFALSE 2896
// ComUnlink ( un ) ;
2887: LD_VAR 0 1
2891: PPUSH
2892: CALL_OW 136
// end ;
2896: PPOPN 1
2898: END
// on ApemanTamed ( ape , sci ) do begin if GetSex ( sci ) = sex_male then
2899: LD_VAR 0 2
2903: PPUSH
2904: CALL_OW 258
2908: PUSH
2909: LD_INT 1
2911: EQUAL
2912: IFFALSE 2926
// Say ( sci , Dsci3 ) ;
2914: LD_VAR 0 2
2918: PPUSH
2919: LD_STRING Dsci3
2921: PPUSH
2922: CALL_OW 88
// end ;
2926: PPOPN 2
2928: END
// on BuildingComplete ( b ) do var i ;
2929: LD_INT 0
2931: PPUSH
// begin if GetBType ( b ) = b_depot and GetSide ( b ) = 3 and depot_rdy = false then
2932: LD_VAR 0 1
2936: PPUSH
2937: CALL_OW 266
2941: PUSH
2942: LD_INT 0
2944: EQUAL
2945: PUSH
2946: LD_VAR 0 1
2950: PPUSH
2951: CALL_OW 255
2955: PUSH
2956: LD_INT 3
2958: EQUAL
2959: AND
2960: PUSH
2961: LD_EXP 6
2965: PUSH
2966: LD_INT 0
2968: EQUAL
2969: AND
2970: IFFALSE 3034
// begin SetBName ( b , kalinin ) ;
2972: LD_VAR 0 1
2976: PPUSH
2977: LD_STRING kalinin
2979: PPUSH
2980: CALL_OW 500
// dep_x := GetX ( b ) ;
2984: LD_ADDR_EXP 7
2988: PUSH
2989: LD_VAR 0 1
2993: PPUSH
2994: CALL_OW 250
2998: ST_TO_ADDR
// dep_y := GetY ( b ) ;
2999: LD_ADDR_EXP 8
3003: PUSH
3004: LD_VAR 0 1
3008: PPUSH
3009: CALL_OW 251
3013: ST_TO_ADDR
// depot_rdy := true ;
3014: LD_ADDR_EXP 6
3018: PUSH
3019: LD_INT 1
3021: ST_TO_ADDR
// SayRadio ( popov , Dpop3 ) ;
3022: LD_EXP 2
3026: PPUSH
3027: LD_STRING Dpop3
3029: PPUSH
3030: CALL_OW 94
// end ; if GetBType ( b ) = b_lab and GetSide ( b ) = 3 and event_comp = false then
3034: LD_VAR 0 1
3038: PPUSH
3039: CALL_OW 266
3043: PUSH
3044: LD_INT 6
3046: EQUAL
3047: PUSH
3048: LD_VAR 0 1
3052: PPUSH
3053: CALL_OW 255
3057: PUSH
3058: LD_INT 3
3060: EQUAL
3061: AND
3062: PUSH
3063: LD_EXP 21
3067: PUSH
3068: LD_INT 0
3070: EQUAL
3071: AND
3072: IFFALSE 3167
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) > 0 then
3074: LD_INT 22
3076: PUSH
3077: LD_INT 3
3079: PUSH
3080: EMPTY
3081: LIST
3082: LIST
3083: PUSH
3084: LD_INT 25
3086: PUSH
3087: LD_INT 4
3089: PUSH
3090: EMPTY
3091: LIST
3092: LIST
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: PPUSH
3098: CALL_OW 69
3102: PUSH
3103: LD_INT 0
3105: GREATER
3106: IFFALSE 3167
// begin event_comp := true ;
3108: LD_ADDR_EXP 21
3112: PUSH
3113: LD_INT 1
3115: ST_TO_ADDR
// Say ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , Dsci1 ) ;
3116: LD_INT 22
3118: PUSH
3119: LD_INT 3
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: LD_INT 25
3128: PUSH
3129: LD_INT 4
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: LD_INT 26
3138: PUSH
3139: LD_INT 1
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: LIST
3150: PPUSH
3151: CALL_OW 69
3155: PUSH
3156: LD_INT 1
3158: ARRAY
3159: PPUSH
3160: LD_STRING Dsci1
3162: PPUSH
3163: CALL_OW 88
// end ; if GetBType ( b ) = b_bunker and GetSide ( b ) = 1 then
3167: LD_VAR 0 1
3171: PPUSH
3172: CALL_OW 266
3176: PUSH
3177: LD_INT 32
3179: EQUAL
3180: PUSH
3181: LD_VAR 0 1
3185: PPUSH
3186: CALL_OW 255
3190: PUSH
3191: LD_INT 1
3193: EQUAL
3194: AND
3195: IFFALSE 3260
// begin RaiseSailEvent ( 6 ) ;
3197: LD_INT 6
3199: PPUSH
3200: CALL_OW 427
// AddComPlaceWeapon ( b , gamma_towers [ 4 ] ) ;
3204: LD_VAR 0 1
3208: PPUSH
3209: LD_EXP 18
3213: PUSH
3214: LD_INT 4
3216: ARRAY
3217: PPUSH
3218: CALL_OW 208
// for i = 1 to 4 do
3222: LD_ADDR_VAR 0 2
3226: PUSH
3227: DOUBLE
3228: LD_INT 1
3230: DEC
3231: ST_TO_ADDR
3232: LD_INT 4
3234: PUSH
3235: FOR_TO
3236: IFFALSE 3258
// gamma_towers := Delete ( gamma_towers , 1 ) ;
3238: LD_ADDR_EXP 18
3242: PUSH
3243: LD_EXP 18
3247: PPUSH
3248: LD_INT 1
3250: PPUSH
3251: CALL_OW 3
3255: ST_TO_ADDR
3256: GO 3235
3258: POP
3259: POP
// end ; end ;
3260: PPOPN 2
3262: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3263: LD_VAR 0 1
3267: PPUSH
3268: CALL 22232 0 1
// if un in Patrol then
3272: LD_VAR 0 1
3276: PUSH
3277: LD_EXP 17
3281: IN
3282: IFFALSE 3300
// Patrol := Patrol diff un ;
3284: LD_ADDR_EXP 17
3288: PUSH
3289: LD_EXP 17
3293: PUSH
3294: LD_VAR 0 1
3298: DIFF
3299: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
3300: LD_VAR 0 1
3304: PUSH
3305: LD_INT 22
3307: PUSH
3308: LD_INT 1
3310: PUSH
3311: EMPTY
3312: LIST
3313: LIST
3314: PUSH
3315: LD_INT 30
3317: PUSH
3318: LD_INT 32
3320: PUSH
3321: EMPTY
3322: LIST
3323: LIST
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: PPUSH
3329: CALL_OW 69
3333: IN
3334: IFFALSE 3420
// begin gamma_towers := gamma_towers ^ GetX ( un ) ;
3336: LD_ADDR_EXP 18
3340: PUSH
3341: LD_EXP 18
3345: PUSH
3346: LD_VAR 0 1
3350: PPUSH
3351: CALL_OW 250
3355: ADD
3356: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetY ( un ) ;
3357: LD_ADDR_EXP 18
3361: PUSH
3362: LD_EXP 18
3366: PUSH
3367: LD_VAR 0 1
3371: PPUSH
3372: CALL_OW 251
3376: ADD
3377: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetDir ( un ) ;
3378: LD_ADDR_EXP 18
3382: PUSH
3383: LD_EXP 18
3387: PUSH
3388: LD_VAR 0 1
3392: PPUSH
3393: CALL_OW 254
3397: ADD
3398: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetBWeapon ( un ) ;
3399: LD_ADDR_EXP 18
3403: PUSH
3404: LD_EXP 18
3408: PUSH
3409: LD_VAR 0 1
3413: PPUSH
3414: CALL_OW 269
3418: ADD
3419: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) then
3420: LD_VAR 0 1
3424: PUSH
3425: LD_INT 33
3427: PUSH
3428: LD_INT 2
3430: PUSH
3431: EMPTY
3432: LIST
3433: LIST
3434: PUSH
3435: LD_INT 3
3437: PUSH
3438: LD_INT 34
3440: PUSH
3441: LD_INT 13
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: PUSH
3448: EMPTY
3449: LIST
3450: LIST
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: PPUSH
3456: CALL_OW 69
3460: IN
3461: IFFALSE 3477
// new_veh := new_veh + 1 ;
3463: LD_ADDR_EXP 19
3467: PUSH
3468: LD_EXP 19
3472: PUSH
3473: LD_INT 1
3475: PLUS
3476: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_weapon , us_crane ] ) then
3477: LD_VAR 0 1
3481: PUSH
3482: LD_INT 34
3484: PUSH
3485: LD_INT 13
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PPUSH
3492: CALL_OW 69
3496: IN
3497: IFFALSE 3518
// AddComConstruct ( am_fac , us_medium_tracked , engine_solar , control_remote , us_crane ) ;
3499: LD_INT 26
3501: PPUSH
3502: LD_INT 3
3504: PPUSH
3505: LD_INT 2
3507: PPUSH
3508: LD_INT 2
3510: PPUSH
3511: LD_INT 13
3513: PPUSH
3514: CALL_OW 185
// if un = am_dep then
3518: LD_VAR 0 1
3522: PUSH
3523: LD_INT 25
3525: EQUAL
3526: IFFALSE 3694
// begin SayRadio ( Platonov , DPlat ) ;
3528: LD_EXP 4
3532: PPUSH
3533: LD_STRING DPlat
3535: PPUSH
3536: CALL_OW 94
// if timer <= 30 30$00 then
3540: LD_EXP 24
3544: PUSH
3545: LD_INT 63000
3547: LESSEQUAL
3548: IFFALSE 3562
// AddMedal ( gamma_med3 , 1 ) else
3550: LD_STRING gamma_med3
3552: PPUSH
3553: LD_INT 1
3555: PPUSH
3556: CALL_OW 101
3560: GO 3612
// if timer <= [ 50 50$00 , 42 42$00 , 35 35$00 ] [ dif ] then
3562: LD_EXP 24
3566: PUSH
3567: LD_INT 105000
3569: PUSH
3570: LD_INT 88200
3572: PUSH
3573: LD_INT 73500
3575: PUSH
3576: EMPTY
3577: LIST
3578: LIST
3579: LIST
3580: PUSH
3581: LD_EXP 1
3585: ARRAY
3586: LESSEQUAL
3587: IFFALSE 3601
// AddMedal ( gamma_med3 , 2 ) else
3589: LD_STRING gamma_med3
3591: PPUSH
3592: LD_INT 2
3594: PPUSH
3595: CALL_OW 101
3599: GO 3612
// AddMedal ( gamma_med3 , - 1 ) ;
3601: LD_STRING gamma_med3
3603: PPUSH
3604: LD_INT 1
3606: NEG
3607: PPUSH
3608: CALL_OW 101
// if not comp_tested then
3612: LD_EXP 22
3616: NOT
3617: IFFALSE 3632
// AddMedal ( gamma_med2 , - 1 ) else
3619: LD_STRING gamma_med2
3621: PPUSH
3622: LD_INT 1
3624: NEG
3625: PPUSH
3626: CALL_OW 101
3630: GO 3642
// AddMedal ( gamma_med2 , 1 ) ;
3632: LD_STRING gamma_med2
3634: PPUSH
3635: LD_INT 1
3637: PPUSH
3638: CALL_OW 101
// if IsDead ( sikorski ) and not sikorski_run then
3642: LD_EXP 9
3646: PPUSH
3647: CALL_OW 301
3651: PUSH
3652: LD_EXP 23
3656: NOT
3657: AND
3658: IFFALSE 3672
// AddMedal ( gamma_med1 , 1 ) else
3660: LD_STRING gamma_med1
3662: PPUSH
3663: LD_INT 1
3665: PPUSH
3666: CALL_OW 101
3670: GO 3683
// AddMedal ( gamma_med1 , - 1 ) ;
3672: LD_STRING gamma_med1
3674: PPUSH
3675: LD_INT 1
3677: NEG
3678: PPUSH
3679: CALL_OW 101
// GiveMedals ( GAMMA_MEDALS ) ;
3683: LD_STRING GAMMA_MEDALS
3685: PPUSH
3686: CALL_OW 102
// YouWin ;
3690: CALL_OW 103
// end ; if un = commander then
3694: LD_VAR 0 1
3698: PUSH
3699: LD_EXP 3
3703: EQUAL
3704: IFFALSE 3713
// YouLost ( comml ) ;
3706: LD_STRING comml
3708: PPUSH
3709: CALL_OW 104
// if un = sikorski then
3713: LD_VAR 0 1
3717: PUSH
3718: LD_EXP 9
3722: EQUAL
3723: IFFALSE 3735
// AddMedal ( gamma_med1 , 1 ) ;
3725: LD_STRING gamma_med1
3727: PPUSH
3728: LD_INT 1
3730: PPUSH
3731: CALL_OW 101
// end ;
3735: PPOPN 1
3737: END
// on SailEvent ( event ) do var i , un , filter , doc , bac , place , engs , crane , b ;
3738: LD_INT 0
3740: PPUSH
3741: PPUSH
3742: PPUSH
3743: PPUSH
3744: PPUSH
3745: PPUSH
3746: PPUSH
3747: PPUSH
3748: PPUSH
// begin if event = 1 then
3749: LD_VAR 0 1
3753: PUSH
3754: LD_INT 1
3756: EQUAL
3757: IFFALSE 4054
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3759: LD_ADDR_VAR 0 4
3763: PUSH
3764: LD_INT 22
3766: PUSH
3767: LD_INT 1
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: PUSH
3774: LD_INT 21
3776: PUSH
3777: LD_INT 3
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PUSH
3784: LD_INT 3
3786: PUSH
3787: LD_INT 24
3789: PUSH
3790: LD_INT 1000
3792: PUSH
3793: EMPTY
3794: LIST
3795: LIST
3796: PUSH
3797: EMPTY
3798: LIST
3799: LIST
3800: PUSH
3801: EMPTY
3802: LIST
3803: LIST
3804: LIST
3805: PPUSH
3806: CALL_OW 69
3810: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ] ) ;
3811: LD_ADDR_VAR 0 8
3815: PUSH
3816: LD_INT 22
3818: PUSH
3819: LD_INT 1
3821: PUSH
3822: EMPTY
3823: LIST
3824: LIST
3825: PUSH
3826: LD_INT 25
3828: PUSH
3829: LD_INT 2
3831: PUSH
3832: EMPTY
3833: LIST
3834: LIST
3835: PUSH
3836: LD_INT 24
3838: PUSH
3839: LD_INT 1000
3841: PUSH
3842: EMPTY
3843: LIST
3844: LIST
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: LIST
3850: PUSH
3851: EMPTY
3852: LIST
3853: PPUSH
3854: CALL_OW 69
3858: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) ;
3859: LD_ADDR_VAR 0 9
3863: PUSH
3864: LD_INT 22
3866: PUSH
3867: LD_INT 1
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: PUSH
3874: LD_INT 34
3876: PUSH
3877: LD_INT 13
3879: PUSH
3880: EMPTY
3881: LIST
3882: LIST
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: PPUSH
3888: CALL_OW 69
3892: ST_TO_ADDR
// if engs > 0 then
3893: LD_VAR 0 8
3897: PUSH
3898: LD_INT 0
3900: GREATER
3901: IFFALSE 4006
// for i = 1 to engs do
3903: LD_ADDR_VAR 0 2
3907: PUSH
3908: DOUBLE
3909: LD_INT 1
3911: DEC
3912: ST_TO_ADDR
3913: LD_VAR 0 8
3917: PUSH
3918: FOR_TO
3919: IFFALSE 4004
// begin if IsInUnit ( engs [ i ] ) then
3921: LD_VAR 0 8
3925: PUSH
3926: LD_VAR 0 2
3930: ARRAY
3931: PPUSH
3932: CALL_OW 310
3936: IFFALSE 3953
// ComExitBuilding ( engs [ i ] ) ;
3938: LD_VAR 0 8
3942: PUSH
3943: LD_VAR 0 2
3947: ARRAY
3948: PPUSH
3949: CALL_OW 122
// Wait ( 0 0$0.2 ) ;
3953: LD_INT 7
3955: PPUSH
3956: CALL_OW 67
// if not HasTask ( engs [ i ] ) then
3960: LD_VAR 0 8
3964: PUSH
3965: LD_VAR 0 2
3969: ARRAY
3970: PPUSH
3971: CALL_OW 314
3975: NOT
3976: IFFALSE 4002
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
3978: LD_VAR 0 8
3982: PUSH
3983: LD_VAR 0 2
3987: ARRAY
3988: PPUSH
3989: LD_VAR 0 4
3993: PUSH
3994: LD_INT 1
3996: ARRAY
3997: PPUSH
3998: CALL_OW 130
// end ;
4002: GO 3918
4004: POP
4005: POP
// if crane > 0 then
4006: LD_VAR 0 9
4010: PUSH
4011: LD_INT 0
4013: GREATER
4014: IFFALSE 4054
// if not HasTask ( crane [ 1 ] ) then
4016: LD_VAR 0 9
4020: PUSH
4021: LD_INT 1
4023: ARRAY
4024: PPUSH
4025: CALL_OW 314
4029: NOT
4030: IFFALSE 4054
// ComRepairBuilding ( crane [ 1 ] , filter [ 1 ] ) ;
4032: LD_VAR 0 9
4036: PUSH
4037: LD_INT 1
4039: ARRAY
4040: PPUSH
4041: LD_VAR 0 4
4045: PUSH
4046: LD_INT 1
4048: ARRAY
4049: PPUSH
4050: CALL_OW 130
// end ; if event = 2 then
4054: LD_VAR 0 1
4058: PUSH
4059: LD_INT 2
4061: EQUAL
4062: IFFALSE 4184
// begin engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
4064: LD_ADDR_VAR 0 8
4068: PUSH
4069: LD_INT 22
4071: PUSH
4072: LD_INT 1
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: PUSH
4079: LD_INT 25
4081: PUSH
4082: LD_INT 2
4084: PUSH
4085: EMPTY
4086: LIST
4087: LIST
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: PPUSH
4093: CALL_OW 69
4097: ST_TO_ADDR
// if engs > 0 then
4098: LD_VAR 0 8
4102: PUSH
4103: LD_INT 0
4105: GREATER
4106: IFFALSE 4184
// for i = 1 to engs do
4108: LD_ADDR_VAR 0 2
4112: PUSH
4113: DOUBLE
4114: LD_INT 1
4116: DEC
4117: ST_TO_ADDR
4118: LD_VAR 0 8
4122: PUSH
4123: FOR_TO
4124: IFFALSE 4182
// if not HasTask ( engs [ i ] ) and not IsInUnit ( engs [ i ] ) then
4126: LD_VAR 0 8
4130: PUSH
4131: LD_VAR 0 2
4135: ARRAY
4136: PPUSH
4137: CALL_OW 314
4141: NOT
4142: PUSH
4143: LD_VAR 0 8
4147: PUSH
4148: LD_VAR 0 2
4152: ARRAY
4153: PPUSH
4154: CALL_OW 310
4158: NOT
4159: AND
4160: IFFALSE 4180
// ComEnterUnit ( engs [ i ] , am_dep ) ;
4162: LD_VAR 0 8
4166: PUSH
4167: LD_VAR 0 2
4171: ARRAY
4172: PPUSH
4173: LD_INT 25
4175: PPUSH
4176: CALL_OW 120
4180: GO 4123
4182: POP
4183: POP
// end ; if event = 3 then
4184: LD_VAR 0 1
4188: PUSH
4189: LD_INT 3
4191: EQUAL
4192: IFFALSE 4556
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_class , 4 ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
4194: LD_ADDR_VAR 0 4
4198: PUSH
4199: LD_INT 22
4201: PUSH
4202: LD_INT 1
4204: PUSH
4205: EMPTY
4206: LIST
4207: LIST
4208: PUSH
4209: LD_INT 21
4211: PUSH
4212: LD_INT 1
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: PUSH
4219: LD_INT 3
4221: PUSH
4222: LD_INT 25
4224: PUSH
4225: LD_INT 4
4227: PUSH
4228: EMPTY
4229: LIST
4230: LIST
4231: PUSH
4232: EMPTY
4233: LIST
4234: LIST
4235: PUSH
4236: LD_INT 3
4238: PUSH
4239: LD_INT 24
4241: PUSH
4242: LD_INT 800
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: PUSH
4249: EMPTY
4250: LIST
4251: LIST
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: LIST
4257: LIST
4258: PUSH
4259: EMPTY
4260: LIST
4261: PPUSH
4262: CALL_OW 69
4266: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
4267: LD_ADDR_VAR 0 5
4271: PUSH
4272: LD_INT 22
4274: PUSH
4275: LD_INT 1
4277: PUSH
4278: EMPTY
4279: LIST
4280: LIST
4281: PUSH
4282: LD_INT 25
4284: PUSH
4285: LD_INT 4
4287: PUSH
4288: EMPTY
4289: LIST
4290: LIST
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: PPUSH
4296: CALL_OW 69
4300: ST_TO_ADDR
// if filter > 0 then
4301: LD_VAR 0 4
4305: PUSH
4306: LD_INT 0
4308: GREATER
4309: IFFALSE 4498
// begin for i = 1 to doc do
4311: LD_ADDR_VAR 0 2
4315: PUSH
4316: DOUBLE
4317: LD_INT 1
4319: DEC
4320: ST_TO_ADDR
4321: LD_VAR 0 5
4325: PUSH
4326: FOR_TO
4327: IFFALSE 4427
// begin if IsInUnit ( doc [ i ] ) then
4329: LD_VAR 0 5
4333: PUSH
4334: LD_VAR 0 2
4338: ARRAY
4339: PPUSH
4340: CALL_OW 310
4344: IFFALSE 4361
// ComExitBuilding ( doc [ i ] ) ;
4346: LD_VAR 0 5
4350: PUSH
4351: LD_VAR 0 2
4355: ARRAY
4356: PPUSH
4357: CALL_OW 122
// if GetDistUnits ( filter [ 1 ] , am_lab ) < 10 and not HasTask ( doc [ i ] ) then
4361: LD_VAR 0 4
4365: PUSH
4366: LD_INT 1
4368: ARRAY
4369: PPUSH
4370: LD_INT 46
4372: PPUSH
4373: CALL_OW 296
4377: PUSH
4378: LD_INT 10
4380: LESS
4381: PUSH
4382: LD_VAR 0 5
4386: PUSH
4387: LD_VAR 0 2
4391: ARRAY
4392: PPUSH
4393: CALL_OW 314
4397: NOT
4398: AND
4399: IFFALSE 4425
// ComHeal ( doc [ i ] , filter [ 1 ] ) ;
4401: LD_VAR 0 5
4405: PUSH
4406: LD_VAR 0 2
4410: ARRAY
4411: PPUSH
4412: LD_VAR 0 4
4416: PUSH
4417: LD_INT 1
4419: ARRAY
4420: PPUSH
4421: CALL_OW 128
// end ;
4425: GO 4326
4427: POP
4428: POP
// for i = 1 to filter do
4429: LD_ADDR_VAR 0 2
4433: PUSH
4434: DOUBLE
4435: LD_INT 1
4437: DEC
4438: ST_TO_ADDR
4439: LD_VAR 0 4
4443: PUSH
4444: FOR_TO
4445: IFFALSE 4494
// if GetDistUnits ( filter [ i ] , am_lab ) > 10 then
4447: LD_VAR 0 4
4451: PUSH
4452: LD_VAR 0 2
4456: ARRAY
4457: PPUSH
4458: LD_INT 46
4460: PPUSH
4461: CALL_OW 296
4465: PUSH
4466: LD_INT 10
4468: GREATER
4469: IFFALSE 4492
// ComMoveXY ( filter [ i ] , 47 , 12 ) ;
4471: LD_VAR 0 4
4475: PUSH
4476: LD_VAR 0 2
4480: ARRAY
4481: PPUSH
4482: LD_INT 47
4484: PPUSH
4485: LD_INT 12
4487: PPUSH
4488: CALL_OW 111
4492: GO 4444
4494: POP
4495: POP
// end else
4496: GO 4556
// for i = 1 to doc do
4498: LD_ADDR_VAR 0 2
4502: PUSH
4503: DOUBLE
4504: LD_INT 1
4506: DEC
4507: ST_TO_ADDR
4508: LD_VAR 0 5
4512: PUSH
4513: FOR_TO
4514: IFFALSE 4554
// if not IsInUnit ( doc [ i ] ) then
4516: LD_VAR 0 5
4520: PUSH
4521: LD_VAR 0 2
4525: ARRAY
4526: PPUSH
4527: CALL_OW 310
4531: NOT
4532: IFFALSE 4552
// ComEnterUnit ( doc [ i ] , am_lab ) ;
4534: LD_VAR 0 5
4538: PUSH
4539: LD_VAR 0 2
4543: ARRAY
4544: PPUSH
4545: LD_INT 46
4547: PPUSH
4548: CALL_OW 120
4552: GO 4513
4554: POP
4555: POP
// end ; if event = 4 then
4556: LD_VAR 0 1
4560: PUSH
4561: LD_INT 4
4563: EQUAL
4564: IFFALSE 4815
// begin bac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
4566: LD_ADDR_VAR 0 6
4570: PUSH
4571: LD_INT 22
4573: PUSH
4574: LD_INT 1
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: LD_INT 30
4583: PUSH
4584: LD_INT 5
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PPUSH
4595: CALL_OW 69
4599: ST_TO_ADDR
// for i = 1 to bac do
4600: LD_ADDR_VAR 0 2
4604: PUSH
4605: DOUBLE
4606: LD_INT 1
4608: DEC
4609: ST_TO_ADDR
4610: LD_VAR 0 6
4614: PUSH
4615: FOR_TO
4616: IFFALSE 4657
// if UnitsInside ( bac [ i ] ) < 6 then
4618: LD_VAR 0 6
4622: PUSH
4623: LD_VAR 0 2
4627: ARRAY
4628: PPUSH
4629: CALL_OW 313
4633: PUSH
4634: LD_INT 6
4636: LESS
4637: IFFALSE 4655
// place := bac [ i ] ;
4639: LD_ADDR_VAR 0 7
4643: PUSH
4644: LD_VAR 0 6
4648: PUSH
4649: LD_VAR 0 2
4653: ARRAY
4654: ST_TO_ADDR
4655: GO 4615
4657: POP
4658: POP
// if place then
4659: LD_VAR 0 7
4663: IFFALSE 4815
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] ] , [ f_lives , 1000 ] ] ] ) diff Patrol ;
4665: LD_ADDR_VAR 0 4
4669: PUSH
4670: LD_INT 22
4672: PUSH
4673: LD_INT 1
4675: PUSH
4676: EMPTY
4677: LIST
4678: LIST
4679: PUSH
4680: LD_INT 2
4682: PUSH
4683: LD_INT 25
4685: PUSH
4686: LD_INT 1
4688: PUSH
4689: EMPTY
4690: LIST
4691: LIST
4692: PUSH
4693: LD_INT 25
4695: PUSH
4696: LD_INT 5
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: LIST
4707: PUSH
4708: LD_INT 24
4710: PUSH
4711: LD_INT 1000
4713: PUSH
4714: EMPTY
4715: LIST
4716: LIST
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: LIST
4722: PUSH
4723: EMPTY
4724: LIST
4725: PPUSH
4726: CALL_OW 69
4730: PUSH
4731: LD_EXP 17
4735: DIFF
4736: ST_TO_ADDR
// for i = 1 to filter do
4737: LD_ADDR_VAR 0 2
4741: PUSH
4742: DOUBLE
4743: LD_INT 1
4745: DEC
4746: ST_TO_ADDR
4747: LD_VAR 0 4
4751: PUSH
4752: FOR_TO
4753: IFFALSE 4813
// if not IsInUnit ( filter [ i ] ) and not HasTask ( filter [ i ] ) then
4755: LD_VAR 0 4
4759: PUSH
4760: LD_VAR 0 2
4764: ARRAY
4765: PPUSH
4766: CALL_OW 310
4770: NOT
4771: PUSH
4772: LD_VAR 0 4
4776: PUSH
4777: LD_VAR 0 2
4781: ARRAY
4782: PPUSH
4783: CALL_OW 314
4787: NOT
4788: AND
4789: IFFALSE 4811
// ComEnterUnit ( filter [ i ] , place ) ;
4791: LD_VAR 0 4
4795: PUSH
4796: LD_VAR 0 2
4800: ARRAY
4801: PPUSH
4802: LD_VAR 0 7
4806: PPUSH
4807: CALL_OW 120
4811: GO 4752
4813: POP
4814: POP
// end ; end ; if event = 5 then
4815: LD_VAR 0 1
4819: PUSH
4820: LD_INT 5
4822: EQUAL
4823: IFFALSE 4977
// begin if FilterUnitsInArea ( am_sec , [ f_enemy , 1 ] ) = 0 then
4825: LD_INT 12
4827: PPUSH
4828: LD_INT 81
4830: PUSH
4831: LD_INT 1
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PPUSH
4838: CALL_OW 70
4842: PUSH
4843: LD_INT 0
4845: EQUAL
4846: IFFALSE 4977
// begin engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
4848: LD_ADDR_VAR 0 8
4852: PUSH
4853: LD_INT 22
4855: PUSH
4856: LD_INT 1
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: LD_INT 25
4865: PUSH
4866: LD_INT 2
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: PPUSH
4877: CALL_OW 69
4881: ST_TO_ADDR
// if engs > 0 then
4882: LD_VAR 0 8
4886: PUSH
4887: LD_INT 0
4889: GREATER
4890: IFFALSE 4977
// for i = 1 to engs do
4892: LD_ADDR_VAR 0 2
4896: PUSH
4897: DOUBLE
4898: LD_INT 1
4900: DEC
4901: ST_TO_ADDR
4902: LD_VAR 0 8
4906: PUSH
4907: FOR_TO
4908: IFFALSE 4975
// if not HasTask ( engs [ i ] ) then
4910: LD_VAR 0 8
4914: PUSH
4915: LD_VAR 0 2
4919: ARRAY
4920: PPUSH
4921: CALL_OW 314
4925: NOT
4926: IFFALSE 4973
// ComBuild ( engs [ i ] , b_bunker , gamma_towers [ 1 ] , gamma_towers [ 2 ] , gamma_towers [ 3 ] ) ;
4928: LD_VAR 0 8
4932: PUSH
4933: LD_VAR 0 2
4937: ARRAY
4938: PPUSH
4939: LD_INT 32
4941: PPUSH
4942: LD_EXP 18
4946: PUSH
4947: LD_INT 1
4949: ARRAY
4950: PPUSH
4951: LD_EXP 18
4955: PUSH
4956: LD_INT 2
4958: ARRAY
4959: PPUSH
4960: LD_EXP 18
4964: PUSH
4965: LD_INT 3
4967: ARRAY
4968: PPUSH
4969: CALL_OW 145
4973: GO 4907
4975: POP
4976: POP
// end ; end ; if event = 6 then
4977: LD_VAR 0 1
4981: PUSH
4982: LD_INT 6
4984: EQUAL
4985: IFFALSE 5169
// begin bac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
4987: LD_ADDR_VAR 0 6
4991: PUSH
4992: LD_INT 22
4994: PUSH
4995: LD_INT 1
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: LD_INT 30
5004: PUSH
5005: LD_INT 5
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: PPUSH
5016: CALL_OW 69
5020: ST_TO_ADDR
// if bac and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ] ) > 0 then
5021: LD_VAR 0 6
5025: PUSH
5026: LD_INT 22
5028: PUSH
5029: LD_INT 1
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: LD_INT 30
5038: PUSH
5039: LD_INT 32
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: PUSH
5046: LD_INT 58
5048: PUSH
5049: EMPTY
5050: LIST
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: LIST
5056: PUSH
5057: EMPTY
5058: LIST
5059: PPUSH
5060: CALL_OW 69
5064: PUSH
5065: LD_INT 0
5067: GREATER
5068: AND
5069: IFFALSE 5169
// begin b := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ] ) [ 1 ] ;
5071: LD_ADDR_VAR 0 10
5075: PUSH
5076: LD_INT 22
5078: PUSH
5079: LD_INT 1
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: PUSH
5086: LD_INT 30
5088: PUSH
5089: LD_INT 32
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PUSH
5096: LD_INT 58
5098: PUSH
5099: EMPTY
5100: LIST
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: LIST
5106: PUSH
5107: EMPTY
5108: LIST
5109: PPUSH
5110: CALL_OW 69
5114: PUSH
5115: LD_INT 1
5117: ARRAY
5118: ST_TO_ADDR
// un := UnitsInside ( bac [ 1 ] ) ;
5119: LD_ADDR_VAR 0 3
5123: PUSH
5124: LD_VAR 0 6
5128: PUSH
5129: LD_INT 1
5131: ARRAY
5132: PPUSH
5133: CALL_OW 313
5137: ST_TO_ADDR
// ComExitBuilding ( un [ 1 ] ) ;
5138: LD_VAR 0 3
5142: PUSH
5143: LD_INT 1
5145: ARRAY
5146: PPUSH
5147: CALL_OW 122
// AddComEnterUnit ( un [ 1 ] , b ) ;
5151: LD_VAR 0 3
5155: PUSH
5156: LD_INT 1
5158: ARRAY
5159: PPUSH
5160: LD_VAR 0 10
5164: PPUSH
5165: CALL_OW 180
// end ; end ; end ;
5169: PPOPN 10
5171: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 3 then
5172: LD_VAR 0 1
5176: PUSH
5177: LD_INT 1
5179: EQUAL
5180: PUSH
5181: LD_VAR 0 2
5185: PUSH
5186: LD_INT 3
5188: EQUAL
5189: AND
5190: IFFALSE 5200
// contact_am := true ;
5192: LD_ADDR_EXP 16
5196: PUSH
5197: LD_INT 1
5199: ST_TO_ADDR
// end ;
5200: PPOPN 2
5202: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5203: LD_VAR 0 1
5207: PPUSH
5208: LD_VAR 0 2
5212: PPUSH
5213: LD_VAR 0 3
5217: PPUSH
5218: CALL 22330 0 3
// end ;
5222: PPOPN 3
5224: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5225: LD_VAR 0 1
5229: PPUSH
5230: CALL 22338 0 1
// end ; end_of_file
5234: PPOPN 1
5236: END
// export Sikorski , Game_Started , SForce , Sikorski_Ar , Donald , Van , attacked , contact_am ; export patrol ; export gamma_towers ; export function PrepareAmerican ; var i , un , b , skill , weapons , sol , lw ; begin
5237: LD_INT 0
5239: PPUSH
5240: PPUSH
5241: PPUSH
5242: PPUSH
5243: PPUSH
5244: PPUSH
5245: PPUSH
5246: PPUSH
// skill := [ 5 , 6 , 7 ] [ dif ] ;
5247: LD_ADDR_VAR 0 5
5251: PUSH
5252: LD_INT 5
5254: PUSH
5255: LD_INT 6
5257: PUSH
5258: LD_INT 7
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: LIST
5265: PUSH
5266: LD_EXP 1
5270: ARRAY
5271: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_gatling_gun , us_gatling_gun , us_double_gun , us_double_gun , us_double_gun , us_heavy_gun ] ;
5272: LD_ADDR_VAR 0 6
5276: PUSH
5277: LD_INT 4
5279: PUSH
5280: LD_INT 4
5282: PUSH
5283: LD_INT 4
5285: PUSH
5286: LD_INT 5
5288: PUSH
5289: LD_INT 5
5291: PUSH
5292: LD_INT 5
5294: PUSH
5295: LD_INT 6
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: ST_TO_ADDR
// SForce := [ ] ;
5307: LD_ADDR_EXP 11
5311: PUSH
5312: EMPTY
5313: ST_TO_ADDR
// Sikorski_Ar := false ;
5314: LD_ADDR_EXP 12
5318: PUSH
5319: LD_INT 0
5321: ST_TO_ADDR
// attacked := false ;
5322: LD_ADDR_EXP 15
5326: PUSH
5327: LD_INT 0
5329: ST_TO_ADDR
// contact_am := false ;
5330: LD_ADDR_EXP 16
5334: PUSH
5335: LD_INT 0
5337: ST_TO_ADDR
// patrol := [ ] ;
5338: LD_ADDR_EXP 17
5342: PUSH
5343: EMPTY
5344: ST_TO_ADDR
// gamma_towers := [ ] ;
5345: LD_ADDR_EXP 18
5349: PUSH
5350: EMPTY
5351: ST_TO_ADDR
// SetBName ( am_dep , gamma ) ;
5352: LD_INT 25
5354: PPUSH
5355: LD_STRING gamma
5357: PPUSH
5358: CALL_OW 500
// uc_side := 1 ;
5362: LD_ADDR_OWVAR 20
5366: PUSH
5367: LD_INT 1
5369: ST_TO_ADDR
// uc_nation := 1 ;
5370: LD_ADDR_OWVAR 21
5374: PUSH
5375: LD_INT 1
5377: ST_TO_ADDR
// hc_importance := 0 ;
5378: LD_ADDR_OWVAR 32
5382: PUSH
5383: LD_INT 0
5385: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
5386: LD_ADDR_OWVAR 26
5390: PUSH
5391: LD_STRING Jeremy Sikorski
5393: ST_TO_ADDR
// hc_gallery := us ;
5394: LD_ADDR_OWVAR 33
5398: PUSH
5399: LD_STRING us
5401: ST_TO_ADDR
// hc_face_number := 19 ;
5402: LD_ADDR_OWVAR 34
5406: PUSH
5407: LD_INT 19
5409: ST_TO_ADDR
// hc_skills := [ Rand ( skill , skill + 2 ) , 4 , 6 , 3 ] ;
5410: LD_ADDR_OWVAR 31
5414: PUSH
5415: LD_VAR 0 5
5419: PPUSH
5420: LD_VAR 0 5
5424: PUSH
5425: LD_INT 2
5427: PLUS
5428: PPUSH
5429: CALL_OW 12
5433: PUSH
5434: LD_INT 4
5436: PUSH
5437: LD_INT 6
5439: PUSH
5440: LD_INT 3
5442: PUSH
5443: EMPTY
5444: LIST
5445: LIST
5446: LIST
5447: LIST
5448: ST_TO_ADDR
// hc_sex := sex_male ;
5449: LD_ADDR_OWVAR 27
5453: PUSH
5454: LD_INT 1
5456: ST_TO_ADDR
// hc_class := 1 ;
5457: LD_ADDR_OWVAR 28
5461: PUSH
5462: LD_INT 1
5464: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
5465: LD_ADDR_OWVAR 29
5469: PUSH
5470: LD_INT 10
5472: PUSH
5473: LD_INT 11
5475: PUSH
5476: EMPTY
5477: LIST
5478: LIST
5479: ST_TO_ADDR
// sikorski := CreateHuman ;
5480: LD_ADDR_EXP 9
5484: PUSH
5485: CALL_OW 44
5489: ST_TO_ADDR
// hc_name := Lucy Donaldson ;
5490: LD_ADDR_OWVAR 26
5494: PUSH
5495: LD_STRING Lucy Donaldson
5497: ST_TO_ADDR
// hc_gallery := us ;
5498: LD_ADDR_OWVAR 33
5502: PUSH
5503: LD_STRING us
5505: ST_TO_ADDR
// hc_face_number := 2 ;
5506: LD_ADDR_OWVAR 34
5510: PUSH
5511: LD_INT 2
5513: ST_TO_ADDR
// hc_skills := [ Rand ( skill , skill + 2 ) , 6 , 4 , 2 ] ;
5514: LD_ADDR_OWVAR 31
5518: PUSH
5519: LD_VAR 0 5
5523: PPUSH
5524: LD_VAR 0 5
5528: PUSH
5529: LD_INT 2
5531: PLUS
5532: PPUSH
5533: CALL_OW 12
5537: PUSH
5538: LD_INT 6
5540: PUSH
5541: LD_INT 4
5543: PUSH
5544: LD_INT 2
5546: PUSH
5547: EMPTY
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: ST_TO_ADDR
// hc_sex := sex_female ;
5553: LD_ADDR_OWVAR 27
5557: PUSH
5558: LD_INT 2
5560: ST_TO_ADDR
// hc_class := 1 ;
5561: LD_ADDR_OWVAR 28
5565: PUSH
5566: LD_INT 1
5568: ST_TO_ADDR
// donald := CreateHuman ;
5569: LD_ADDR_EXP 13
5573: PUSH
5574: CALL_OW 44
5578: ST_TO_ADDR
// hc_name := Peter Van Houten ;
5579: LD_ADDR_OWVAR 26
5583: PUSH
5584: LD_STRING Peter Van Houten
5586: ST_TO_ADDR
// hc_gallery := us ;
5587: LD_ADDR_OWVAR 33
5591: PUSH
5592: LD_STRING us
5594: ST_TO_ADDR
// hc_face_number := 16 ;
5595: LD_ADDR_OWVAR 34
5599: PUSH
5600: LD_INT 16
5602: ST_TO_ADDR
// hc_sex := sex_male ;
5603: LD_ADDR_OWVAR 27
5607: PUSH
5608: LD_INT 1
5610: ST_TO_ADDR
// van := CreateHuman ;
5611: LD_ADDR_EXP 14
5615: PUSH
5616: CALL_OW 44
5620: ST_TO_ADDR
// hc_importance := 0 ;
5621: LD_ADDR_OWVAR 32
5625: PUSH
5626: LD_INT 0
5628: ST_TO_ADDR
// case dif of 1 :
5629: LD_EXP 1
5633: PUSH
5634: LD_INT 1
5636: DOUBLE
5637: EQUAL
5638: IFTRUE 5642
5640: GO 5653
5642: POP
// lw = 1 ; 2 :
5643: LD_ADDR_VAR 0 8
5647: PUSH
5648: LD_INT 1
5650: ST_TO_ADDR
5651: GO 5700
5653: LD_INT 2
5655: DOUBLE
5656: EQUAL
5657: IFTRUE 5661
5659: GO 5680
5661: POP
// lw = Rand ( 1 , 2 ) ; 3 :
5662: LD_ADDR_VAR 0 8
5666: PUSH
5667: LD_INT 1
5669: PPUSH
5670: LD_INT 2
5672: PPUSH
5673: CALL_OW 12
5677: ST_TO_ADDR
5678: GO 5700
5680: LD_INT 3
5682: DOUBLE
5683: EQUAL
5684: IFTRUE 5688
5686: GO 5699
5688: POP
// lw = 2 ; end ;
5689: LD_ADDR_VAR 0 8
5693: PUSH
5694: LD_INT 2
5696: ST_TO_ADDR
5697: GO 5700
5699: POP
// case lw of 1 :
5700: LD_VAR 0 8
5704: PUSH
5705: LD_INT 1
5707: DOUBLE
5708: EQUAL
5709: IFTRUE 5713
5711: GO 5728
5713: POP
// PlaceHumanInUnit ( donald , am_dep ) ; 2 :
5714: LD_EXP 13
5718: PPUSH
5719: LD_INT 25
5721: PPUSH
5722: CALL_OW 52
5726: GO 5752
5728: LD_INT 2
5730: DOUBLE
5731: EQUAL
5732: IFTRUE 5736
5734: GO 5751
5736: POP
// PlaceHumanInUnit ( van , am_dep ) ; end ;
5737: LD_EXP 14
5741: PPUSH
5742: LD_INT 25
5744: PPUSH
5745: CALL_OW 52
5749: GO 5752
5751: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
5752: LD_ADDR_VAR 0 2
5756: PUSH
5757: LD_INT 22
5759: PUSH
5760: LD_INT 1
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PUSH
5767: LD_INT 30
5769: PUSH
5770: LD_INT 32
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: PPUSH
5781: CALL_OW 69
5785: PUSH
5786: FOR_IN
5787: IFFALSE 5841
// begin PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
5789: LD_INT 1
5791: PPUSH
5792: LD_VAR 0 5
5796: PPUSH
5797: CALL 734 0 2
5801: PPUSH
5802: LD_VAR 0 2
5806: PPUSH
5807: CALL_OW 52
// PlaceWeaponTurret ( i , weapons [ Rand ( 1 , weapons ) ] ) ;
5811: LD_VAR 0 2
5815: PPUSH
5816: LD_VAR 0 6
5820: PUSH
5821: LD_INT 1
5823: PPUSH
5824: LD_VAR 0 6
5828: PPUSH
5829: CALL_OW 12
5833: ARRAY
5834: PPUSH
5835: CALL_OW 431
// end ;
5839: GO 5786
5841: POP
5842: POP
// sol := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , class_soldier ] , [ class_sniper ] ] ] ) ;
5843: LD_ADDR_VAR 0 7
5847: PUSH
5848: LD_INT 22
5850: PUSH
5851: LD_INT 1
5853: PUSH
5854: EMPTY
5855: LIST
5856: LIST
5857: PUSH
5858: LD_INT 2
5860: PUSH
5861: LD_INT 25
5863: PUSH
5864: LD_INT 1
5866: PUSH
5867: EMPTY
5868: LIST
5869: LIST
5870: PUSH
5871: LD_INT 5
5873: PUSH
5874: EMPTY
5875: LIST
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: LIST
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: PPUSH
5886: CALL_OW 69
5890: ST_TO_ADDR
// for i = 1 to sol do
5891: LD_ADDR_VAR 0 2
5895: PUSH
5896: DOUBLE
5897: LD_INT 1
5899: DEC
5900: ST_TO_ADDR
5901: LD_VAR 0 7
5905: PUSH
5906: FOR_TO
5907: IFFALSE 5929
// SetTag ( sol [ i ] , 1 ) ;
5909: LD_VAR 0 7
5913: PUSH
5914: LD_VAR 0 2
5918: ARRAY
5919: PPUSH
5920: LD_INT 1
5922: PPUSH
5923: CALL_OW 109
5927: GO 5906
5929: POP
5930: POP
// for i = 1 to 3 do
5931: LD_ADDR_VAR 0 2
5935: PUSH
5936: DOUBLE
5937: LD_INT 1
5939: DEC
5940: ST_TO_ADDR
5941: LD_INT 3
5943: PUSH
5944: FOR_TO
5945: IFFALSE 5969
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , am_ct ) ;
5947: LD_INT 3
5949: PPUSH
5950: LD_VAR 0 5
5954: PPUSH
5955: CALL 734 0 2
5959: PPUSH
5960: LD_INT 56
5962: PPUSH
5963: CALL_OW 52
5967: GO 5944
5969: POP
5970: POP
// for i = 1 to 6 do
5971: LD_ADDR_VAR 0 2
5975: PUSH
5976: DOUBLE
5977: LD_INT 1
5979: DEC
5980: ST_TO_ADDR
5981: LD_INT 6
5983: PUSH
5984: FOR_TO
5985: IFFALSE 6009
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , am_fac ) ;
5987: LD_INT 3
5989: PPUSH
5990: LD_VAR 0 5
5994: PPUSH
5995: CALL 734 0 2
5999: PPUSH
6000: LD_INT 26
6002: PPUSH
6003: CALL_OW 52
6007: GO 5984
6009: POP
6010: POP
// for i = 1 to 5 do
6011: LD_ADDR_VAR 0 2
6015: PUSH
6016: DOUBLE
6017: LD_INT 1
6019: DEC
6020: ST_TO_ADDR
6021: LD_INT 5
6023: PUSH
6024: FOR_TO
6025: IFFALSE 6052
// PlaceUnitArea ( CreateHumanWithClass ( 2 , skill ) , am_base , false ) ;
6027: LD_INT 2
6029: PPUSH
6030: LD_VAR 0 5
6034: PPUSH
6035: CALL 734 0 2
6039: PPUSH
6040: LD_INT 7
6042: PPUSH
6043: LD_INT 0
6045: PPUSH
6046: CALL_OW 49
6050: GO 6024
6052: POP
6053: POP
// for i = 1 to 3 do
6054: LD_ADDR_VAR 0 2
6058: PUSH
6059: DOUBLE
6060: LD_INT 1
6062: DEC
6063: ST_TO_ADDR
6064: LD_INT 3
6066: PUSH
6067: FOR_TO
6068: IFFALSE 6092
// PlaceHumanInUnit ( CreateHumanWithClass ( 4 , skill ) , am_lab ) ;
6070: LD_INT 4
6072: PPUSH
6073: LD_VAR 0 5
6077: PPUSH
6078: CALL 734 0 2
6082: PPUSH
6083: LD_INT 46
6085: PPUSH
6086: CALL_OW 52
6090: GO 6067
6092: POP
6093: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) do
6094: LD_ADDR_VAR 0 2
6098: PUSH
6099: LD_INT 22
6101: PUSH
6102: LD_INT 1
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: PUSH
6109: LD_INT 30
6111: PUSH
6112: LD_INT 5
6114: PUSH
6115: EMPTY
6116: LIST
6117: LIST
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PPUSH
6123: CALL_OW 69
6127: PUSH
6128: FOR_IN
6129: IFFALSE 6243
// begin PlaceHumanInUnit ( CreateHumanWithClass ( class_sniper , skill ) , i ) ;
6131: LD_INT 5
6133: PPUSH
6134: LD_VAR 0 5
6138: PPUSH
6139: CALL 734 0 2
6143: PPUSH
6144: LD_VAR 0 2
6148: PPUSH
6149: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( class_sniper , skill ) , i ) ;
6153: LD_INT 5
6155: PPUSH
6156: LD_VAR 0 5
6160: PPUSH
6161: CALL 734 0 2
6165: PPUSH
6166: LD_VAR 0 2
6170: PPUSH
6171: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6175: LD_INT 1
6177: PPUSH
6178: LD_VAR 0 5
6182: PPUSH
6183: CALL 734 0 2
6187: PPUSH
6188: LD_VAR 0 2
6192: PPUSH
6193: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6197: LD_INT 1
6199: PPUSH
6200: LD_VAR 0 5
6204: PPUSH
6205: CALL 734 0 2
6209: PPUSH
6210: LD_VAR 0 2
6214: PPUSH
6215: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6219: LD_INT 1
6221: PPUSH
6222: LD_VAR 0 5
6226: PPUSH
6227: CALL 734 0 2
6231: PPUSH
6232: LD_VAR 0 2
6236: PPUSH
6237: CALL_OW 52
// end ;
6241: GO 6128
6243: POP
6244: POP
// if dif > 1 then
6245: LD_EXP 1
6249: PUSH
6250: LD_INT 1
6252: GREATER
6253: IFFALSE 6326
// for i = 1 to ( dif - 1 ) do
6255: LD_ADDR_VAR 0 2
6259: PUSH
6260: DOUBLE
6261: LD_INT 1
6263: DEC
6264: ST_TO_ADDR
6265: LD_EXP 1
6269: PUSH
6270: LD_INT 1
6272: MINUS
6273: PUSH
6274: FOR_TO
6275: IFFALSE 6324
// begin patrol := patrol ^ CreateHumanWithClass ( 1 , skill ) ;
6277: LD_ADDR_EXP 17
6281: PUSH
6282: LD_EXP 17
6286: PUSH
6287: LD_INT 1
6289: PPUSH
6290: LD_VAR 0 5
6294: PPUSH
6295: CALL 734 0 2
6299: ADD
6300: ST_TO_ADDR
// PlaceUnitArea ( patrol [ i ] , am_west_spawn , false ) ;
6301: LD_EXP 17
6305: PUSH
6306: LD_VAR 0 2
6310: ARRAY
6311: PPUSH
6312: LD_INT 3
6314: PPUSH
6315: LD_INT 0
6317: PPUSH
6318: CALL_OW 49
// end ;
6322: GO 6274
6324: POP
6325: POP
// game_started := true ;
6326: LD_ADDR_EXP 10
6330: PUSH
6331: LD_INT 1
6333: ST_TO_ADDR
// ComConstruct ( am_fac , us_medium_tracked , engine_solar , control_remote , us_crane ) ;
6334: LD_INT 26
6336: PPUSH
6337: LD_INT 3
6339: PPUSH
6340: LD_INT 2
6342: PPUSH
6343: LD_INT 2
6345: PPUSH
6346: LD_INT 13
6348: PPUSH
6349: CALL_OW 125
// while ( contact_am = false ) do
6353: LD_EXP 16
6357: PUSH
6358: LD_INT 0
6360: EQUAL
6361: IFFALSE 6372
// begin Wait ( 0 0$01 ) ;
6363: LD_INT 35
6365: PPUSH
6366: CALL_OW 67
// end ;
6370: GO 6353
// Wait ( [ 4 4$00 , 3 3$00 , 2 2$30 ] [ dif ] ) ;
6372: LD_INT 8400
6374: PUSH
6375: LD_INT 6300
6377: PUSH
6378: LD_INT 5250
6380: PUSH
6381: EMPTY
6382: LIST
6383: LIST
6384: LIST
6385: PUSH
6386: LD_EXP 1
6390: ARRAY
6391: PPUSH
6392: CALL_OW 67
// case dif of 1 :
6396: LD_EXP 1
6400: PUSH
6401: LD_INT 1
6403: DOUBLE
6404: EQUAL
6405: IFTRUE 6409
6407: GO 6584
6409: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_machine_gun , us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 4 ) ] ) ;
6410: LD_INT 26
6412: PPUSH
6413: LD_INT 3
6415: PPUSH
6416: LD_INT 1
6418: PPUSH
6419: LD_INT 2
6421: PPUSH
6422: LD_INT 2
6424: PUSH
6425: LD_INT 4
6427: PUSH
6428: LD_INT 5
6430: PUSH
6431: LD_INT 5
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: PUSH
6440: LD_INT 1
6442: PPUSH
6443: LD_INT 4
6445: PPUSH
6446: CALL_OW 12
6450: ARRAY
6451: PPUSH
6452: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6456: LD_INT 26
6458: PPUSH
6459: LD_INT 3
6461: PPUSH
6462: LD_INT 1
6464: PPUSH
6465: LD_INT 2
6467: PPUSH
6468: LD_INT 4
6470: PUSH
6471: LD_INT 5
6473: PUSH
6474: LD_INT 5
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: LIST
6481: PUSH
6482: LD_INT 1
6484: PPUSH
6485: LD_INT 3
6487: PPUSH
6488: CALL_OW 12
6492: ARRAY
6493: PPUSH
6494: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6498: LD_INT 26
6500: PPUSH
6501: LD_INT 3
6503: PPUSH
6504: LD_INT 1
6506: PPUSH
6507: LD_INT 2
6509: PPUSH
6510: LD_INT 4
6512: PUSH
6513: LD_INT 5
6515: PUSH
6516: LD_INT 5
6518: PUSH
6519: EMPTY
6520: LIST
6521: LIST
6522: LIST
6523: PUSH
6524: LD_INT 1
6526: PPUSH
6527: LD_INT 3
6529: PPUSH
6530: CALL_OW 12
6534: ARRAY
6535: PPUSH
6536: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6540: LD_INT 26
6542: PPUSH
6543: LD_INT 3
6545: PPUSH
6546: LD_INT 1
6548: PPUSH
6549: LD_INT 2
6551: PPUSH
6552: LD_INT 4
6554: PUSH
6555: LD_INT 3
6557: PUSH
6558: LD_INT 5
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: LIST
6565: PUSH
6566: LD_INT 1
6568: PPUSH
6569: LD_INT 3
6571: PPUSH
6572: CALL_OW 12
6576: ARRAY
6577: PPUSH
6578: CALL_OW 185
// end ; 2 :
6582: GO 7111
6584: LD_INT 2
6586: DOUBLE
6587: EQUAL
6588: IFTRUE 6592
6590: GO 6805
6592: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6593: LD_INT 26
6595: PPUSH
6596: LD_INT 3
6598: PPUSH
6599: LD_INT 1
6601: PPUSH
6602: LD_INT 2
6604: PPUSH
6605: LD_INT 4
6607: PUSH
6608: LD_INT 5
6610: PUSH
6611: LD_INT 5
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: LIST
6618: PUSH
6619: LD_INT 1
6621: PPUSH
6622: LD_INT 3
6624: PPUSH
6625: CALL_OW 12
6629: ARRAY
6630: PPUSH
6631: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6635: LD_INT 26
6637: PPUSH
6638: LD_INT 3
6640: PPUSH
6641: LD_INT 1
6643: PPUSH
6644: LD_INT 2
6646: PPUSH
6647: LD_INT 4
6649: PUSH
6650: LD_INT 5
6652: PUSH
6653: LD_INT 5
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: LIST
6660: PUSH
6661: LD_INT 1
6663: PPUSH
6664: LD_INT 3
6666: PPUSH
6667: CALL_OW 12
6671: ARRAY
6672: PPUSH
6673: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6677: LD_INT 26
6679: PPUSH
6680: LD_INT 3
6682: PPUSH
6683: LD_INT 1
6685: PPUSH
6686: LD_INT 2
6688: PPUSH
6689: LD_INT 4
6691: PUSH
6692: LD_INT 3
6694: PUSH
6695: LD_INT 5
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: LIST
6702: PUSH
6703: LD_INT 1
6705: PPUSH
6706: LD_INT 3
6708: PPUSH
6709: CALL_OW 12
6713: ARRAY
6714: PPUSH
6715: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6719: LD_INT 26
6721: PPUSH
6722: LD_INT 4
6724: PPUSH
6725: LD_INT 1
6727: PPUSH
6728: LD_INT 2
6730: PPUSH
6731: LD_INT 4
6733: PUSH
6734: LD_INT 5
6736: PUSH
6737: LD_INT 6
6739: PUSH
6740: EMPTY
6741: LIST
6742: LIST
6743: LIST
6744: PUSH
6745: LD_INT 1
6747: PPUSH
6748: LD_INT 3
6750: PPUSH
6751: CALL_OW 12
6755: ARRAY
6756: PPUSH
6757: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6761: LD_INT 26
6763: PPUSH
6764: LD_INT 4
6766: PPUSH
6767: LD_INT 1
6769: PPUSH
6770: LD_INT 2
6772: PPUSH
6773: LD_INT 4
6775: PUSH
6776: LD_INT 5
6778: PUSH
6779: LD_INT 6
6781: PUSH
6782: EMPTY
6783: LIST
6784: LIST
6785: LIST
6786: PUSH
6787: LD_INT 1
6789: PPUSH
6790: LD_INT 3
6792: PPUSH
6793: CALL_OW 12
6797: ARRAY
6798: PPUSH
6799: CALL_OW 185
// end ; 3 :
6803: GO 7111
6805: LD_INT 3
6807: DOUBLE
6808: EQUAL
6809: IFTRUE 6813
6811: GO 7110
6813: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6814: LD_INT 26
6816: PPUSH
6817: LD_INT 3
6819: PPUSH
6820: LD_INT 1
6822: PPUSH
6823: LD_INT 2
6825: PPUSH
6826: LD_INT 4
6828: PUSH
6829: LD_INT 5
6831: PUSH
6832: LD_INT 5
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: LIST
6839: PUSH
6840: LD_INT 1
6842: PPUSH
6843: LD_INT 3
6845: PPUSH
6846: CALL_OW 12
6850: ARRAY
6851: PPUSH
6852: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6856: LD_INT 26
6858: PPUSH
6859: LD_INT 3
6861: PPUSH
6862: LD_INT 1
6864: PPUSH
6865: LD_INT 2
6867: PPUSH
6868: LD_INT 4
6870: PUSH
6871: LD_INT 5
6873: PUSH
6874: LD_INT 5
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: LIST
6881: PUSH
6882: LD_INT 1
6884: PPUSH
6885: LD_INT 3
6887: PPUSH
6888: CALL_OW 12
6892: ARRAY
6893: PPUSH
6894: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6898: LD_INT 26
6900: PPUSH
6901: LD_INT 3
6903: PPUSH
6904: LD_INT 1
6906: PPUSH
6907: LD_INT 2
6909: PPUSH
6910: LD_INT 4
6912: PUSH
6913: LD_INT 5
6915: PUSH
6916: LD_INT 5
6918: PUSH
6919: EMPTY
6920: LIST
6921: LIST
6922: LIST
6923: PUSH
6924: LD_INT 1
6926: PPUSH
6927: LD_INT 3
6929: PPUSH
6930: CALL_OW 12
6934: ARRAY
6935: PPUSH
6936: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6940: LD_INT 26
6942: PPUSH
6943: LD_INT 3
6945: PPUSH
6946: LD_INT 1
6948: PPUSH
6949: LD_INT 2
6951: PPUSH
6952: LD_INT 4
6954: PUSH
6955: LD_INT 5
6957: PUSH
6958: LD_INT 5
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: LIST
6965: PUSH
6966: LD_INT 1
6968: PPUSH
6969: LD_INT 3
6971: PPUSH
6972: CALL_OW 12
6976: ARRAY
6977: PPUSH
6978: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6982: LD_INT 26
6984: PPUSH
6985: LD_INT 4
6987: PPUSH
6988: LD_INT 1
6990: PPUSH
6991: LD_INT 2
6993: PPUSH
6994: LD_INT 4
6996: PUSH
6997: LD_INT 5
6999: PUSH
7000: LD_INT 6
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: LIST
7007: PUSH
7008: LD_INT 1
7010: PPUSH
7011: LD_INT 3
7013: PPUSH
7014: CALL_OW 12
7018: ARRAY
7019: PPUSH
7020: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7024: LD_INT 26
7026: PPUSH
7027: LD_INT 4
7029: PPUSH
7030: LD_INT 1
7032: PPUSH
7033: LD_INT 2
7035: PPUSH
7036: LD_INT 4
7038: PUSH
7039: LD_INT 5
7041: PUSH
7042: LD_INT 6
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: LIST
7049: PUSH
7050: LD_INT 1
7052: PPUSH
7053: LD_INT 3
7055: PPUSH
7056: CALL_OW 12
7060: ARRAY
7061: PPUSH
7062: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7066: LD_INT 26
7068: PPUSH
7069: LD_INT 4
7071: PPUSH
7072: LD_INT 1
7074: PPUSH
7075: LD_INT 2
7077: PPUSH
7078: LD_INT 4
7080: PUSH
7081: LD_INT 5
7083: PUSH
7084: LD_INT 6
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: LIST
7091: PUSH
7092: LD_INT 1
7094: PPUSH
7095: LD_INT 3
7097: PPUSH
7098: CALL_OW 12
7102: ARRAY
7103: PPUSH
7104: CALL_OW 185
// end ; end ;
7108: GO 7111
7110: POP
// end ;
7111: LD_VAR 0 1
7115: RET
// every 0 0$01 do var i , filter ;
7116: GO 7118
7118: DISABLE
7119: LD_INT 0
7121: PPUSH
7122: PPUSH
// begin enable ;
7123: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
7124: LD_INT 22
7126: PUSH
7127: LD_INT 1
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: PUSH
7134: LD_INT 25
7136: PUSH
7137: LD_INT 4
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PPUSH
7148: CALL_OW 69
7152: PUSH
7153: LD_INT 0
7155: GREATER
7156: IFFALSE 7165
// RaiseSailEvent ( 3 ) ;
7158: LD_INT 3
7160: PPUSH
7161: CALL_OW 427
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 0 then
7165: LD_INT 22
7167: PUSH
7168: LD_INT 1
7170: PUSH
7171: EMPTY
7172: LIST
7173: LIST
7174: PUSH
7175: LD_INT 21
7177: PUSH
7178: LD_INT 3
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PUSH
7185: LD_INT 3
7187: PUSH
7188: LD_INT 24
7190: PUSH
7191: LD_INT 1000
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: LIST
7206: PPUSH
7207: CALL_OW 69
7211: PUSH
7212: LD_INT 0
7214: GREATER
7215: IFFALSE 7226
// RaiseSailEvent ( 1 ) else
7217: LD_INT 1
7219: PPUSH
7220: CALL_OW 427
7224: GO 7233
// RaiseSailEvent ( 2 ) ;
7226: LD_INT 2
7228: PPUSH
7229: CALL_OW 427
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) > 0 then
7233: LD_INT 22
7235: PUSH
7236: LD_INT 1
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: LD_INT 30
7245: PUSH
7246: LD_INT 5
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PPUSH
7257: CALL_OW 69
7261: PUSH
7262: LD_INT 0
7264: GREATER
7265: IFFALSE 7274
// RaiseSailEvent ( 4 ) ;
7267: LD_INT 4
7269: PPUSH
7270: CALL_OW 427
// if gamma_towers > 0 then
7274: LD_EXP 18
7278: PUSH
7279: LD_INT 0
7281: GREATER
7282: IFFALSE 7291
// RaiseSailEvent ( 5 ) ;
7284: LD_INT 5
7286: PPUSH
7287: CALL_OW 427
// end ;
7291: PPOPN 2
7293: END
// export new_veh ; every 9 9$00 do var chassis , weapon ;
7294: GO 7296
7296: DISABLE
7297: LD_INT 0
7299: PPUSH
7300: PPUSH
// begin enable ;
7301: ENABLE
// if new_veh > 0 then
7302: LD_EXP 19
7306: PUSH
7307: LD_INT 0
7309: GREATER
7310: IFFALSE 7497
// while ( new_veh > 0 ) do
7312: LD_EXP 19
7316: PUSH
7317: LD_INT 0
7319: GREATER
7320: IFFALSE 7497
// begin Wait ( 0 0$01 ) ;
7322: LD_INT 35
7324: PPUSH
7325: CALL_OW 67
// if BuildingStatus ( am_fac ) = bs_idle then
7329: LD_INT 26
7331: PPUSH
7332: CALL_OW 461
7336: PUSH
7337: LD_INT 2
7339: EQUAL
7340: IFFALSE 7495
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ Rand ( 1 , 4 ) ] ;
7342: LD_ADDR_VAR 0 1
7346: PUSH
7347: LD_INT 2
7349: PUSH
7350: LD_INT 3
7352: PUSH
7353: LD_INT 3
7355: PUSH
7356: LD_INT 4
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: PUSH
7365: LD_INT 1
7367: PPUSH
7368: LD_INT 4
7370: PPUSH
7371: CALL_OW 12
7375: ARRAY
7376: ST_TO_ADDR
// if chassis in [ us_medium_wheeled , us_medium_tracked ] then
7377: LD_VAR 0 1
7381: PUSH
7382: LD_INT 2
7384: PUSH
7385: LD_INT 3
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: IN
7392: IFFALSE 7427
// weapon := [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ Rand ( 1 , 3 ) ] else
7394: LD_ADDR_VAR 0 2
7398: PUSH
7399: LD_INT 4
7401: PUSH
7402: LD_INT 5
7404: PUSH
7405: LD_INT 7
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 1
7415: PPUSH
7416: LD_INT 3
7418: PPUSH
7419: CALL_OW 12
7423: ARRAY
7424: ST_TO_ADDR
7425: GO 7458
// weapon := [ us_double_gun , us_rocket_launcher , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ;
7427: LD_ADDR_VAR 0 2
7431: PUSH
7432: LD_INT 5
7434: PUSH
7435: LD_INT 7
7437: PUSH
7438: LD_INT 6
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: LIST
7445: PUSH
7446: LD_INT 1
7448: PPUSH
7449: LD_INT 3
7451: PPUSH
7452: CALL_OW 12
7456: ARRAY
7457: ST_TO_ADDR
// ComConstruct ( am_fac , chassis , engine_combustion , control_remote , weapon ) ;
7458: LD_INT 26
7460: PPUSH
7461: LD_VAR 0 1
7465: PPUSH
7466: LD_INT 1
7468: PPUSH
7469: LD_INT 2
7471: PPUSH
7472: LD_VAR 0 2
7476: PPUSH
7477: CALL_OW 125
// new_veh := new_veh - 1 ;
7481: LD_ADDR_EXP 19
7485: PUSH
7486: LD_EXP 19
7490: PUSH
7491: LD_INT 1
7493: MINUS
7494: ST_TO_ADDR
// end ; end ;
7495: GO 7312
// end ;
7497: PPOPN 2
7499: END
// every 0 0$01 do var v , filter , am_cmeh ;
7500: GO 7502
7502: DISABLE
7503: LD_INT 0
7505: PPUSH
7506: PPUSH
7507: PPUSH
// begin enable ;
7508: ENABLE
// am_cmeh := UnitsInside ( am_ct ) ;
7509: LD_ADDR_VAR 0 3
7513: PUSH
7514: LD_INT 56
7516: PPUSH
7517: CALL_OW 313
7521: ST_TO_ADDR
// filter = FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] ] ] ) ;
7522: LD_ADDR_VAR 0 2
7526: PUSH
7527: LD_INT 22
7529: PUSH
7530: LD_INT 1
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: PUSH
7537: LD_INT 33
7539: PUSH
7540: LD_INT 2
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: PUSH
7547: LD_INT 50
7549: PUSH
7550: EMPTY
7551: LIST
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: LIST
7557: PUSH
7558: EMPTY
7559: LIST
7560: PPUSH
7561: CALL_OW 69
7565: ST_TO_ADDR
// if filter > 0 then
7566: LD_VAR 0 2
7570: PUSH
7571: LD_INT 0
7573: GREATER
7574: IFFALSE 7642
// begin for v in filter do
7576: LD_ADDR_VAR 0 1
7580: PUSH
7581: LD_VAR 0 2
7585: PUSH
7586: FOR_IN
7587: IFFALSE 7640
// begin if not IsControledBy ( v ) and IsOk ( v ) then
7589: LD_VAR 0 1
7593: PPUSH
7594: CALL_OW 312
7598: NOT
7599: PUSH
7600: LD_VAR 0 1
7604: PPUSH
7605: CALL_OW 302
7609: AND
7610: IFFALSE 7638
// ComLinkTo ( v , am_cmeh [ Rand ( 1 , 3 ) ] ) ;
7612: LD_VAR 0 1
7616: PPUSH
7617: LD_VAR 0 3
7621: PUSH
7622: LD_INT 1
7624: PPUSH
7625: LD_INT 3
7627: PPUSH
7628: CALL_OW 12
7632: ARRAY
7633: PPUSH
7634: CALL_OW 135
// end ;
7638: GO 7586
7640: POP
7641: POP
// end ; end ;
7642: PPOPN 3
7644: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) = [ 4 , 5 , 7 ] [ dif ] and BuildingStatus ( am_fac ) = bs_idle do var i , un , enemy ;
7645: LD_INT 33
7647: PUSH
7648: LD_INT 2
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: PUSH
7655: LD_INT 3
7657: PUSH
7658: LD_INT 34
7660: PUSH
7661: LD_INT 13
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PPUSH
7676: CALL_OW 69
7680: PUSH
7681: LD_INT 4
7683: PUSH
7684: LD_INT 5
7686: PUSH
7687: LD_INT 7
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: LIST
7694: PUSH
7695: LD_EXP 1
7699: ARRAY
7700: EQUAL
7701: PUSH
7702: LD_INT 26
7704: PPUSH
7705: CALL_OW 461
7709: PUSH
7710: LD_INT 2
7712: EQUAL
7713: AND
7714: IFFALSE 7925
7716: GO 7718
7718: DISABLE
7719: LD_INT 0
7721: PPUSH
7722: PPUSH
7723: PPUSH
// begin enable ;
7724: ENABLE
// if Sikorski_Ar then
7725: LD_EXP 12
7729: IFFALSE 7806
// SForce := FilterAllUnits ( [ [ f_or , [ f_side , 4 ] , [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ] ] ) else
7731: LD_ADDR_EXP 11
7735: PUSH
7736: LD_INT 2
7738: PUSH
7739: LD_INT 22
7741: PUSH
7742: LD_INT 4
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: PUSH
7749: LD_INT 22
7751: PUSH
7752: LD_INT 1
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: PUSH
7759: LD_INT 33
7761: PUSH
7762: LD_INT 2
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: PUSH
7769: LD_INT 3
7771: PUSH
7772: LD_INT 34
7774: PUSH
7775: LD_INT 13
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: LIST
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: LIST
7795: PUSH
7796: EMPTY
7797: LIST
7798: PPUSH
7799: CALL_OW 69
7803: ST_TO_ADDR
7804: GO 7847
// SForce := FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) ;
7806: LD_ADDR_EXP 11
7810: PUSH
7811: LD_INT 33
7813: PUSH
7814: LD_INT 2
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: PUSH
7821: LD_INT 3
7823: PUSH
7824: LD_INT 34
7826: PUSH
7827: LD_INT 13
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PPUSH
7842: CALL_OW 69
7846: ST_TO_ADDR
// repeat begin for un in SForce do
7847: LD_ADDR_VAR 0 2
7851: PUSH
7852: LD_EXP 11
7856: PUSH
7857: FOR_IN
7858: IFFALSE 7913
// begin enemy := FilterAllUnits ( [ f_side , 3 ] ) ;
7860: LD_ADDR_VAR 0 3
7864: PUSH
7865: LD_INT 22
7867: PUSH
7868: LD_INT 3
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: PPUSH
7875: CALL_OW 69
7879: ST_TO_ADDR
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
7880: LD_VAR 0 2
7884: PPUSH
7885: LD_VAR 0 3
7889: PPUSH
7890: LD_VAR 0 2
7894: PPUSH
7895: CALL_OW 74
7899: PPUSH
7900: CALL_OW 115
// Wait ( 0 0$01 ) ;
7904: LD_INT 35
7906: PPUSH
7907: CALL_OW 67
// end ;
7911: GO 7857
7913: POP
7914: POP
// end until SForce = 0 ;
7915: LD_EXP 11
7919: PUSH
7920: LD_INT 0
7922: EQUAL
7923: IFFALSE 7847
// end ;
7925: PPOPN 3
7927: END
// export function NewForce ( num ) ; var i , filter , veh , tmp ; begin
7928: LD_INT 0
7930: PPUSH
7931: PPUSH
7932: PPUSH
7933: PPUSH
7934: PPUSH
// tmp := FilterUnitsInArea ( spawnArea , [ ] ) ;
7935: LD_ADDR_VAR 0 6
7939: PUSH
7940: LD_INT 14
7942: PPUSH
7943: EMPTY
7944: PPUSH
7945: CALL_OW 70
7949: ST_TO_ADDR
// if tmp then
7950: LD_VAR 0 6
7954: IFFALSE 7988
// for i in tmp do
7956: LD_ADDR_VAR 0 3
7960: PUSH
7961: LD_VAR 0 6
7965: PUSH
7966: FOR_IN
7967: IFFALSE 7986
// ComMoveXY ( i , 42 , 23 ) ;
7969: LD_VAR 0 3
7973: PPUSH
7974: LD_INT 42
7976: PPUSH
7977: LD_INT 23
7979: PPUSH
7980: CALL_OW 111
7984: GO 7966
7986: POP
7987: POP
// EraseResourceArea ( spawnArea , mat_cans ) ;
7988: LD_INT 14
7990: PPUSH
7991: LD_INT 1
7993: PPUSH
7994: CALL_OW 286
// uc_side := 4 ;
7998: LD_ADDR_OWVAR 20
8002: PUSH
8003: LD_INT 4
8005: ST_TO_ADDR
// uc_nation := 1 ;
8006: LD_ADDR_OWVAR 21
8010: PUSH
8011: LD_INT 1
8013: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
8014: LD_ADDR_OWVAR 37
8018: PUSH
8019: LD_INT 4
8021: ST_TO_ADDR
// vc_control := control_manual ;
8022: LD_ADDR_OWVAR 38
8026: PUSH
8027: LD_INT 1
8029: ST_TO_ADDR
// vc_engine := engine_combustion ;
8030: LD_ADDR_OWVAR 39
8034: PUSH
8035: LD_INT 1
8037: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ dif ] ;
8038: LD_ADDR_OWVAR 40
8042: PUSH
8043: LD_INT 4
8045: PUSH
8046: LD_INT 5
8048: PUSH
8049: LD_INT 7
8051: PUSH
8052: EMPTY
8053: LIST
8054: LIST
8055: LIST
8056: PUSH
8057: LD_EXP 1
8061: ARRAY
8062: ST_TO_ADDR
// veh := CreateVehicle ;
8063: LD_ADDR_VAR 0 5
8067: PUSH
8068: CALL_OW 45
8072: ST_TO_ADDR
// PlaceUnitArea ( veh , am_main_spawn , false ) ;
8073: LD_VAR 0 5
8077: PPUSH
8078: LD_INT 2
8080: PPUSH
8081: LD_INT 0
8083: PPUSH
8084: CALL_OW 49
// PlaceHumanInUnit ( sikorski , veh ) ;
8088: LD_EXP 9
8092: PPUSH
8093: LD_VAR 0 5
8097: PPUSH
8098: CALL_OW 52
// SetMark ( veh , 1 ) ;
8102: LD_VAR 0 5
8106: PPUSH
8107: LD_INT 1
8109: PPUSH
8110: CALL_OW 242
// while ( num > 0 ) do
8114: LD_VAR 0 1
8118: PUSH
8119: LD_INT 0
8121: GREATER
8122: IFFALSE 8289
// begin CreateVehicleWithDriver ( [ us_medium_tracked , us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ Rand ( dif , 4 ) ] , engine_combustion , [ us_gatling_gun , us_double_gun , us_double_gun , us_rocket_launcher ] [ Rand ( 1 , dif + 1 ) ] , am_sik , 2 , [ 5 , 6 , 7 ] [ dif ] ) ;
8124: LD_INT 3
8126: PUSH
8127: LD_INT 3
8129: PUSH
8130: LD_INT 3
8132: PUSH
8133: LD_INT 4
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: PUSH
8142: LD_EXP 1
8146: PPUSH
8147: LD_INT 4
8149: PPUSH
8150: CALL_OW 12
8154: ARRAY
8155: PPUSH
8156: LD_INT 1
8158: PPUSH
8159: LD_INT 4
8161: PUSH
8162: LD_INT 5
8164: PUSH
8165: LD_INT 5
8167: PUSH
8168: LD_INT 7
8170: PUSH
8171: EMPTY
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: PUSH
8177: LD_INT 1
8179: PPUSH
8180: LD_EXP 1
8184: PUSH
8185: LD_INT 1
8187: PLUS
8188: PPUSH
8189: CALL_OW 12
8193: ARRAY
8194: PPUSH
8195: LD_INT 11
8197: PPUSH
8198: LD_INT 2
8200: PPUSH
8201: LD_INT 5
8203: PUSH
8204: LD_INT 6
8206: PUSH
8207: LD_INT 7
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: LIST
8214: PUSH
8215: LD_EXP 1
8219: ARRAY
8220: PPUSH
8221: CALL 1297 0 6
// filter := FilterAllUnits ( [ f_side , 4 ] ) ;
8225: LD_ADDR_VAR 0 4
8229: PUSH
8230: LD_INT 22
8232: PUSH
8233: LD_INT 4
8235: PUSH
8236: EMPTY
8237: LIST
8238: LIST
8239: PPUSH
8240: CALL_OW 69
8244: ST_TO_ADDR
// ComMoveXY ( filter [ filter ] , 36 , 18 ) ;
8245: LD_VAR 0 4
8249: PUSH
8250: LD_VAR 0 4
8254: ARRAY
8255: PPUSH
8256: LD_INT 36
8258: PPUSH
8259: LD_INT 18
8261: PPUSH
8262: CALL_OW 111
// Wait ( 0 0$02 ) ;
8266: LD_INT 70
8268: PPUSH
8269: CALL_OW 67
// num := num - 1 ;
8273: LD_ADDR_VAR 0 1
8277: PUSH
8278: LD_VAR 0 1
8282: PUSH
8283: LD_INT 1
8285: MINUS
8286: ST_TO_ADDR
// end ;
8287: GO 8114
// end ;
8289: LD_VAR 0 2
8293: RET
// every 0 0$03 trigger patrol > 0 do var i ;
8294: LD_EXP 17
8298: PUSH
8299: LD_INT 0
8301: GREATER
8302: IFFALSE 8571
8304: GO 8306
8306: DISABLE
8307: LD_INT 0
8309: PPUSH
// begin enable ;
8310: ENABLE
// for i = 1 to patrol do
8311: LD_ADDR_VAR 0 1
8315: PUSH
8316: DOUBLE
8317: LD_INT 1
8319: DEC
8320: ST_TO_ADDR
8321: LD_EXP 17
8325: PUSH
8326: FOR_TO
8327: IFFALSE 8569
// begin if patrol [ i ] and IsLive ( patrol [ i ] ) and not HasTask ( patrol [ i ] ) then
8329: LD_EXP 17
8333: PUSH
8334: LD_VAR 0 1
8338: ARRAY
8339: PUSH
8340: LD_EXP 17
8344: PUSH
8345: LD_VAR 0 1
8349: ARRAY
8350: PPUSH
8351: CALL_OW 300
8355: AND
8356: PUSH
8357: LD_EXP 17
8361: PUSH
8362: LD_VAR 0 1
8366: ARRAY
8367: PPUSH
8368: CALL_OW 314
8372: NOT
8373: AND
8374: IFFALSE 8524
// case i of 1 :
8376: LD_VAR 0 1
8380: PUSH
8381: LD_INT 1
8383: DOUBLE
8384: EQUAL
8385: IFTRUE 8389
8387: GO 8452
8389: POP
// begin ComMoveXY ( patrol [ i ] , 53 , 91 ) ;
8390: LD_EXP 17
8394: PUSH
8395: LD_VAR 0 1
8399: ARRAY
8400: PPUSH
8401: LD_INT 53
8403: PPUSH
8404: LD_INT 91
8406: PPUSH
8407: CALL_OW 111
// AddComWait ( patrol [ i ] , 0 0$07 ) ;
8411: LD_EXP 17
8415: PUSH
8416: LD_VAR 0 1
8420: ARRAY
8421: PPUSH
8422: LD_INT 245
8424: PPUSH
8425: CALL_OW 202
// AddComMoveXY ( patrol [ i ] , 24 , 26 ) ;
8429: LD_EXP 17
8433: PUSH
8434: LD_VAR 0 1
8438: ARRAY
8439: PPUSH
8440: LD_INT 24
8442: PPUSH
8443: LD_INT 26
8445: PPUSH
8446: CALL_OW 171
// end ; 2 :
8450: GO 8524
8452: LD_INT 2
8454: DOUBLE
8455: EQUAL
8456: IFTRUE 8460
8458: GO 8523
8460: POP
// begin ComMoveXY ( patrol [ i ] , 83 , 57 ) ;
8461: LD_EXP 17
8465: PUSH
8466: LD_VAR 0 1
8470: ARRAY
8471: PPUSH
8472: LD_INT 83
8474: PPUSH
8475: LD_INT 57
8477: PPUSH
8478: CALL_OW 111
// AddComWait ( patrol [ i ] , 0 0$07 ) ;
8482: LD_EXP 17
8486: PUSH
8487: LD_VAR 0 1
8491: ARRAY
8492: PPUSH
8493: LD_INT 245
8495: PPUSH
8496: CALL_OW 202
// AddComMoveXY ( patrol [ i ] , 47 , 53 ) ;
8500: LD_EXP 17
8504: PUSH
8505: LD_VAR 0 1
8509: ARRAY
8510: PPUSH
8511: LD_INT 47
8513: PPUSH
8514: LD_INT 53
8516: PPUSH
8517: CALL_OW 171
// end ; end ;
8521: GO 8524
8523: POP
// if GetLives ( patrol [ i ] ) < 1000 then
8524: LD_EXP 17
8528: PUSH
8529: LD_VAR 0 1
8533: ARRAY
8534: PPUSH
8535: CALL_OW 256
8539: PUSH
8540: LD_INT 1000
8542: LESS
8543: IFFALSE 8567
// patrol := patrol diff patrol [ i ] ;
8545: LD_ADDR_EXP 17
8549: PUSH
8550: LD_EXP 17
8554: PUSH
8555: LD_EXP 17
8559: PUSH
8560: LD_VAR 0 1
8564: ARRAY
8565: DIFF
8566: ST_TO_ADDR
// end ;
8567: GO 8326
8569: POP
8570: POP
// end ;
8571: PPOPN 1
8573: END
// every 0 0$10 do
8574: GO 8576
8576: DISABLE
// begin Wait ( [ 20 20$00 , 18 18$00 , 16 16$00 ] [ dif ] ) ;
8577: LD_INT 42000
8579: PUSH
8580: LD_INT 37800
8582: PUSH
8583: LD_INT 33600
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: LIST
8590: PUSH
8591: LD_EXP 1
8595: ARRAY
8596: PPUSH
8597: CALL_OW 67
// if not contact_am then
8601: LD_EXP 16
8605: NOT
8606: IFFALSE 8616
// contact_am := true ;
8608: LD_ADDR_EXP 16
8612: PUSH
8613: LD_INT 1
8615: ST_TO_ADDR
// end ; end_of_file
8616: END
// export event_rocket , event_comp , comp_tested , sikorski_run ; export function Action ; begin
8617: LD_INT 0
8619: PPUSH
// comp_tested := false ;
8620: LD_ADDR_EXP 22
8624: PUSH
8625: LD_INT 0
8627: ST_TO_ADDR
// sikorski_run := false ;
8628: LD_ADDR_EXP 23
8632: PUSH
8633: LD_INT 0
8635: ST_TO_ADDR
// InGameOn ;
8636: CALL_OW 8
// CenterNowOnUnits ( commander ) ;
8640: LD_EXP 3
8644: PPUSH
8645: CALL_OW 87
// Wait ( 0 0$01 ) ;
8649: LD_INT 35
8651: PPUSH
8652: CALL_OW 67
// SayRadio ( popov , Dpop1 ) ;
8656: LD_EXP 2
8660: PPUSH
8661: LD_STRING Dpop1
8663: PPUSH
8664: CALL_OW 94
// Say ( commander , Dcomm1 ) ;
8668: LD_EXP 3
8672: PPUSH
8673: LD_STRING Dcomm1
8675: PPUSH
8676: CALL_OW 88
// SayRadio ( popov , Dpop2 ) ;
8680: LD_EXP 2
8684: PPUSH
8685: LD_STRING Dpop2
8687: PPUSH
8688: CALL_OW 94
// Say ( commander , Dcomm2 ) ;
8692: LD_EXP 3
8696: PPUSH
8697: LD_STRING Dcomm2
8699: PPUSH
8700: CALL_OW 88
// InGameOff ;
8704: CALL_OW 9
// ChangeMissionObjectives ( T1 ) ;
8708: LD_STRING T1
8710: PPUSH
8711: CALL_OW 337
// end ;
8715: LD_VAR 0 1
8719: RET
// every 0 0$01 trigger timer > 2 2$01 do
8720: LD_EXP 24
8724: PUSH
8725: LD_INT 4235
8727: GREATER
8728: IFFALSE 8745
8730: GO 8732
8732: DISABLE
// begin SayRadio ( kapral , DKap1 ) ;
8733: LD_EXP 5
8737: PPUSH
8738: LD_STRING DKap1
8740: PPUSH
8741: CALL_OW 94
// end ;
8745: END
// every 0 0$01 trigger timer > [ 22 22$00 , 25 25$00 , 30 30$00 ] [ dif ] do var i ;
8746: LD_EXP 24
8750: PUSH
8751: LD_INT 46200
8753: PUSH
8754: LD_INT 52500
8756: PUSH
8757: LD_INT 63000
8759: PUSH
8760: EMPTY
8761: LIST
8762: LIST
8763: LIST
8764: PUSH
8765: LD_EXP 1
8769: ARRAY
8770: GREATER
8771: IFFALSE 9138
8773: GO 8775
8775: DISABLE
8776: LD_INT 0
8778: PPUSH
// begin SayRadio ( kapral , DKap2 ) ;
8779: LD_EXP 5
8783: PPUSH
8784: LD_STRING DKap2
8786: PPUSH
8787: CALL_OW 94
// Wait ( 0 0$0.3 ) ;
8791: LD_INT 10
8793: PPUSH
8794: CALL_OW 67
// Say ( commander , Dcommk ) ;
8798: LD_EXP 3
8802: PPUSH
8803: LD_STRING Dcommk
8805: PPUSH
8806: CALL_OW 88
// Wait ( 0 0$44 ) ;
8810: LD_INT 1540
8812: PPUSH
8813: CALL_OW 67
// PlaceUnitArea ( kapral , am_west_spawn , false ) ;
8817: LD_EXP 5
8821: PPUSH
8822: LD_INT 3
8824: PPUSH
8825: LD_INT 0
8827: PPUSH
8828: CALL_OW 49
// CenterNowOnUnits ( kapral ) ;
8832: LD_EXP 5
8836: PPUSH
8837: CALL_OW 87
// Wait ( 0 0$10 ) ;
8841: LD_INT 350
8843: PPUSH
8844: CALL_OW 67
// NewForce ( [ 6 , 7 , 8 ] [ dif ] ) ;
8848: LD_INT 6
8850: PUSH
8851: LD_INT 7
8853: PUSH
8854: LD_INT 8
8856: PUSH
8857: EMPTY
8858: LIST
8859: LIST
8860: LIST
8861: PUSH
8862: LD_EXP 1
8866: ARRAY
8867: PPUSH
8868: CALL 7928 0 1
// Wait ( 2 2$00 ) ;
8872: LD_INT 4200
8874: PPUSH
8875: CALL_OW 67
// while ( FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) < 3 ) do
8879: LD_INT 33
8881: PUSH
8882: LD_INT 2
8884: PUSH
8885: EMPTY
8886: LIST
8887: LIST
8888: PUSH
8889: LD_INT 3
8891: PUSH
8892: LD_INT 34
8894: PUSH
8895: LD_INT 13
8897: PUSH
8898: EMPTY
8899: LIST
8900: LIST
8901: PUSH
8902: EMPTY
8903: LIST
8904: LIST
8905: PUSH
8906: EMPTY
8907: LIST
8908: LIST
8909: PPUSH
8910: CALL_OW 69
8914: PUSH
8915: LD_INT 3
8917: LESS
8918: IFFALSE 8929
// Wait ( 0 0$01 ) ;
8920: LD_INT 35
8922: PPUSH
8923: CALL_OW 67
8927: GO 8879
// uc_side := 4 ;
8929: LD_ADDR_OWVAR 20
8933: PUSH
8934: LD_INT 4
8936: ST_TO_ADDR
// uc_nation := 1 ;
8937: LD_ADDR_OWVAR 21
8941: PUSH
8942: LD_INT 1
8944: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ dif ] do
8945: LD_ADDR_VAR 0 1
8949: PUSH
8950: DOUBLE
8951: LD_INT 1
8953: DEC
8954: ST_TO_ADDR
8955: LD_INT 4
8957: PUSH
8958: LD_INT 5
8960: PUSH
8961: LD_INT 6
8963: PUSH
8964: EMPTY
8965: LIST
8966: LIST
8967: LIST
8968: PUSH
8969: LD_EXP 1
8973: ARRAY
8974: PUSH
8975: FOR_TO
8976: IFFALSE 9018
// PlaceUnitArea ( CreateHumanWithClass ( 1 , [ 5 , 6 , 7 ] [ dif ] ) , am_east_spawn , false ) ;
8978: LD_INT 1
8980: PPUSH
8981: LD_INT 5
8983: PUSH
8984: LD_INT 6
8986: PUSH
8987: LD_INT 7
8989: PUSH
8990: EMPTY
8991: LIST
8992: LIST
8993: LIST
8994: PUSH
8995: LD_EXP 1
8999: ARRAY
9000: PPUSH
9001: CALL 734 0 2
9005: PPUSH
9006: LD_INT 4
9008: PPUSH
9009: LD_INT 0
9011: PPUSH
9012: CALL_OW 49
9016: GO 8975
9018: POP
9019: POP
// sikorski_ar := true ;
9020: LD_ADDR_EXP 12
9024: PUSH
9025: LD_INT 1
9027: ST_TO_ADDR
// SayRadio ( sikorski , DSik1 ) ;
9028: LD_EXP 9
9032: PPUSH
9033: LD_STRING DSik1
9035: PPUSH
9036: CALL_OW 94
// Wait ( 0 0$30 ) ;
9040: LD_INT 1050
9042: PPUSH
9043: CALL_OW 67
// uc_side := 4 ;
9047: LD_ADDR_OWVAR 20
9051: PUSH
9052: LD_INT 4
9054: ST_TO_ADDR
// uc_nation := 1 ;
9055: LD_ADDR_OWVAR 21
9059: PUSH
9060: LD_INT 1
9062: ST_TO_ADDR
// for i = 1 to [ 3 , 4 , 4 ] [ dif ] do
9063: LD_ADDR_VAR 0 1
9067: PUSH
9068: DOUBLE
9069: LD_INT 1
9071: DEC
9072: ST_TO_ADDR
9073: LD_INT 3
9075: PUSH
9076: LD_INT 4
9078: PUSH
9079: LD_INT 4
9081: PUSH
9082: EMPTY
9083: LIST
9084: LIST
9085: LIST
9086: PUSH
9087: LD_EXP 1
9091: ARRAY
9092: PUSH
9093: FOR_TO
9094: IFFALSE 9136
// PlaceUnitArea ( CreateHumanWithClass ( 1 , [ 5 , 6 , 7 ] [ dif ] ) , am_south_spawn , false ) ;
9096: LD_INT 1
9098: PPUSH
9099: LD_INT 5
9101: PUSH
9102: LD_INT 6
9104: PUSH
9105: LD_INT 7
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: LIST
9112: PUSH
9113: LD_EXP 1
9117: ARRAY
9118: PPUSH
9119: CALL 734 0 2
9123: PPUSH
9124: LD_INT 13
9126: PPUSH
9127: LD_INT 0
9129: PPUSH
9130: CALL_OW 49
9134: GO 9093
9136: POP
9137: POP
// end ;
9138: PPOPN 1
9140: END
// every 0 0$0.1 trigger GetLives ( sikorski ) < 650 do
9141: LD_EXP 9
9145: PPUSH
9146: CALL_OW 256
9150: PUSH
9151: LD_INT 650
9153: LESS
9154: IFFALSE 9236
9156: GO 9158
9158: DISABLE
// begin Say ( sikorski , DSik2 ) ;
9159: LD_EXP 9
9163: PPUSH
9164: LD_STRING DSik2
9166: PPUSH
9167: CALL_OW 88
// while ( IsLive ( sikorski ) ) do
9171: LD_EXP 9
9175: PPUSH
9176: CALL_OW 300
9180: IFFALSE 9236
// begin ComMoveToArea ( sikorski , am_main_spawn ) ;
9182: LD_EXP 9
9186: PPUSH
9187: LD_INT 2
9189: PPUSH
9190: CALL_OW 113
// Wait ( 0 0$01 ) ;
9194: LD_INT 35
9196: PPUSH
9197: CALL_OW 67
// if IsInArea ( sikorski , am_main_spawn ) then
9201: LD_EXP 9
9205: PPUSH
9206: LD_INT 2
9208: PPUSH
9209: CALL_OW 308
9213: IFFALSE 9234
// begin RemoveUnit ( sikorski ) ;
9215: LD_EXP 9
9219: PPUSH
9220: CALL_OW 64
// break ;
9224: GO 9236
// sikorski_run := true ;
9226: LD_ADDR_EXP 23
9230: PUSH
9231: LD_INT 1
9233: ST_TO_ADDR
// end ; end ;
9234: GO 9171
// end ;
9236: END
// every 0 0$0.1 trigger GetLives ( sikorski ) < 1000 do
9237: LD_EXP 9
9241: PPUSH
9242: CALL_OW 256
9246: PUSH
9247: LD_INT 1000
9249: LESS
9250: IFFALSE 9267
9252: GO 9254
9254: DISABLE
// Say ( sikorski , DSkik3 ) ; end_of_file
9255: LD_EXP 9
9259: PPUSH
9260: LD_STRING DSkik3
9262: PPUSH
9263: CALL_OW 88
9267: END
// every 1 1$45 + 0 0$15 do
9268: GO 9270
9270: DISABLE
// begin enable ;
9271: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
9272: LD_INT 1
9274: PPUSH
9275: LD_INT 5
9277: PPUSH
9278: CALL_OW 12
9282: PPUSH
9283: LD_INT 8
9285: PPUSH
9286: LD_INT 1
9288: PPUSH
9289: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$37 ) ) ;
9293: LD_INT 350
9295: PPUSH
9296: LD_INT 1295
9298: PPUSH
9299: CALL_OW 12
9303: PPUSH
9304: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
9308: LD_INT 1
9310: PPUSH
9311: LD_INT 5
9313: PPUSH
9314: CALL_OW 12
9318: PPUSH
9319: LD_INT 1
9321: PPUSH
9322: CALL_OW 57
// Wait ( Rand ( 0 0$10 , 0 0$30 ) ) ;
9326: LD_INT 350
9328: PPUSH
9329: LD_INT 1050
9331: PPUSH
9332: CALL_OW 12
9336: PPUSH
9337: CALL_OW 67
// if timer <= [ 12 12$00 , 11 11$00 , 10 10$00 ] [ dif ] then
9341: LD_EXP 24
9345: PUSH
9346: LD_INT 25200
9348: PUSH
9349: LD_INT 23100
9351: PUSH
9352: LD_INT 21000
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: LIST
9359: PUSH
9360: LD_EXP 1
9364: ARRAY
9365: LESSEQUAL
9366: IFFALSE 9389
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
9368: LD_INT 1
9370: PPUSH
9371: LD_INT 5
9373: PPUSH
9374: CALL_OW 12
9378: PPUSH
9379: LD_INT 8
9381: PPUSH
9382: LD_INT 1
9384: PPUSH
9385: CALL_OW 55
// end ;
9389: END
// export timer ; every 1 do
9390: GO 9392
9392: DISABLE
// timer := 0 0$00 ;
9393: LD_ADDR_EXP 24
9397: PUSH
9398: LD_INT 0
9400: ST_TO_ADDR
9401: END
// every 0 0$01 do
9402: GO 9404
9404: DISABLE
// begin enable ;
9405: ENABLE
// Display_Strings := [ #tick , timer ] ;
9406: LD_ADDR_OWVAR 47
9410: PUSH
9411: LD_STRING #tick
9413: PUSH
9414: LD_EXP 24
9418: PUSH
9419: EMPTY
9420: LIST
9421: LIST
9422: ST_TO_ADDR
// timer := timer + 0 0$01 ;
9423: LD_ADDR_EXP 24
9427: PUSH
9428: LD_EXP 24
9432: PUSH
9433: LD_INT 35
9435: PLUS
9436: ST_TO_ADDR
// end ; end_of_file
9437: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
9438: LD_INT 0
9440: PPUSH
// ar_crane := 88 ;
9441: LD_ADDR_EXP 31
9445: PUSH
9446: LD_INT 88
9448: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
9449: LD_ADDR_EXP 26
9453: PUSH
9454: LD_INT 89
9456: ST_TO_ADDR
// us_hack := 99 ;
9457: LD_ADDR_EXP 27
9461: PUSH
9462: LD_INT 99
9464: ST_TO_ADDR
// us_artillery := 97 ;
9465: LD_ADDR_EXP 28
9469: PUSH
9470: LD_INT 97
9472: ST_TO_ADDR
// ar_bio_bomb := 91 ;
9473: LD_ADDR_EXP 29
9477: PUSH
9478: LD_INT 91
9480: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
9481: LD_ADDR_EXP 30
9485: PUSH
9486: LD_INT 92
9488: ST_TO_ADDR
// ru_radar := 98 ;
9489: LD_ADDR_EXP 25
9493: PUSH
9494: LD_INT 98
9496: ST_TO_ADDR
// tech_Artillery := 80 ;
9497: LD_ADDR_EXP 32
9501: PUSH
9502: LD_INT 80
9504: ST_TO_ADDR
// tech_RadMat := 81 ;
9505: LD_ADDR_EXP 33
9509: PUSH
9510: LD_INT 81
9512: ST_TO_ADDR
// tech_BasicTools := 82 ;
9513: LD_ADDR_EXP 34
9517: PUSH
9518: LD_INT 82
9520: ST_TO_ADDR
// tech_Cargo := 83 ;
9521: LD_ADDR_EXP 35
9525: PUSH
9526: LD_INT 83
9528: ST_TO_ADDR
// tech_Track := 84 ;
9529: LD_ADDR_EXP 36
9533: PUSH
9534: LD_INT 84
9536: ST_TO_ADDR
// tech_Crane := 85 ;
9537: LD_ADDR_EXP 37
9541: PUSH
9542: LD_INT 85
9544: ST_TO_ADDR
// tech_Bulldozer := 86 ;
9545: LD_ADDR_EXP 38
9549: PUSH
9550: LD_INT 86
9552: ST_TO_ADDR
// tech_Hovercraft := 87 ;
9553: LD_ADDR_EXP 39
9557: PUSH
9558: LD_INT 87
9560: ST_TO_ADDR
// end ;
9561: LD_VAR 0 1
9565: RET
// every 1 do
9566: GO 9568
9568: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
9569: CALL 9438 0 0
9573: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
9574: LD_VAR 0 2
9578: PUSH
9579: LD_INT 100
9581: EQUAL
9582: IFFALSE 10531
// begin if not StreamModeActive then
9584: LD_EXP 40
9588: NOT
9589: IFFALSE 9599
// StreamModeActive := true ;
9591: LD_ADDR_EXP 40
9595: PUSH
9596: LD_INT 1
9598: ST_TO_ADDR
// if p3 = 0 then
9599: LD_VAR 0 3
9603: PUSH
9604: LD_INT 0
9606: EQUAL
9607: IFFALSE 9613
// InitStreamMode ;
9609: CALL 10764 0 0
// if p3 = 1 then
9613: LD_VAR 0 3
9617: PUSH
9618: LD_INT 1
9620: EQUAL
9621: IFFALSE 9631
// sRocket := true ;
9623: LD_ADDR_EXP 45
9627: PUSH
9628: LD_INT 1
9630: ST_TO_ADDR
// if p3 = 2 then
9631: LD_VAR 0 3
9635: PUSH
9636: LD_INT 2
9638: EQUAL
9639: IFFALSE 9649
// sSpeed := true ;
9641: LD_ADDR_EXP 44
9645: PUSH
9646: LD_INT 1
9648: ST_TO_ADDR
// if p3 = 3 then
9649: LD_VAR 0 3
9653: PUSH
9654: LD_INT 3
9656: EQUAL
9657: IFFALSE 9667
// sEngine := true ;
9659: LD_ADDR_EXP 46
9663: PUSH
9664: LD_INT 1
9666: ST_TO_ADDR
// if p3 = 4 then
9667: LD_VAR 0 3
9671: PUSH
9672: LD_INT 4
9674: EQUAL
9675: IFFALSE 9685
// sSpec := true ;
9677: LD_ADDR_EXP 43
9681: PUSH
9682: LD_INT 1
9684: ST_TO_ADDR
// if p3 = 5 then
9685: LD_VAR 0 3
9689: PUSH
9690: LD_INT 5
9692: EQUAL
9693: IFFALSE 9703
// sLevel := true ;
9695: LD_ADDR_EXP 47
9699: PUSH
9700: LD_INT 1
9702: ST_TO_ADDR
// if p3 = 6 then
9703: LD_VAR 0 3
9707: PUSH
9708: LD_INT 6
9710: EQUAL
9711: IFFALSE 9721
// sArmoury := true ;
9713: LD_ADDR_EXP 48
9717: PUSH
9718: LD_INT 1
9720: ST_TO_ADDR
// if p3 = 7 then
9721: LD_VAR 0 3
9725: PUSH
9726: LD_INT 7
9728: EQUAL
9729: IFFALSE 9739
// sRadar := true ;
9731: LD_ADDR_EXP 49
9735: PUSH
9736: LD_INT 1
9738: ST_TO_ADDR
// if p3 = 8 then
9739: LD_VAR 0 3
9743: PUSH
9744: LD_INT 8
9746: EQUAL
9747: IFFALSE 9757
// sBunker := true ;
9749: LD_ADDR_EXP 50
9753: PUSH
9754: LD_INT 1
9756: ST_TO_ADDR
// if p3 = 9 then
9757: LD_VAR 0 3
9761: PUSH
9762: LD_INT 9
9764: EQUAL
9765: IFFALSE 9775
// sHack := true ;
9767: LD_ADDR_EXP 51
9771: PUSH
9772: LD_INT 1
9774: ST_TO_ADDR
// if p3 = 10 then
9775: LD_VAR 0 3
9779: PUSH
9780: LD_INT 10
9782: EQUAL
9783: IFFALSE 9793
// sFire := true ;
9785: LD_ADDR_EXP 52
9789: PUSH
9790: LD_INT 1
9792: ST_TO_ADDR
// if p3 = 11 then
9793: LD_VAR 0 3
9797: PUSH
9798: LD_INT 11
9800: EQUAL
9801: IFFALSE 9811
// sRefresh := true ;
9803: LD_ADDR_EXP 53
9807: PUSH
9808: LD_INT 1
9810: ST_TO_ADDR
// if p3 = 12 then
9811: LD_VAR 0 3
9815: PUSH
9816: LD_INT 12
9818: EQUAL
9819: IFFALSE 9829
// sExp := true ;
9821: LD_ADDR_EXP 54
9825: PUSH
9826: LD_INT 1
9828: ST_TO_ADDR
// if p3 = 13 then
9829: LD_VAR 0 3
9833: PUSH
9834: LD_INT 13
9836: EQUAL
9837: IFFALSE 9847
// sDepot := true ;
9839: LD_ADDR_EXP 55
9843: PUSH
9844: LD_INT 1
9846: ST_TO_ADDR
// if p3 = 14 then
9847: LD_VAR 0 3
9851: PUSH
9852: LD_INT 14
9854: EQUAL
9855: IFFALSE 9865
// sFlag := true ;
9857: LD_ADDR_EXP 56
9861: PUSH
9862: LD_INT 1
9864: ST_TO_ADDR
// if p3 = 15 then
9865: LD_VAR 0 3
9869: PUSH
9870: LD_INT 15
9872: EQUAL
9873: IFFALSE 9883
// sKamikadze := true ;
9875: LD_ADDR_EXP 64
9879: PUSH
9880: LD_INT 1
9882: ST_TO_ADDR
// if p3 = 16 then
9883: LD_VAR 0 3
9887: PUSH
9888: LD_INT 16
9890: EQUAL
9891: IFFALSE 9901
// sTroll := true ;
9893: LD_ADDR_EXP 65
9897: PUSH
9898: LD_INT 1
9900: ST_TO_ADDR
// if p3 = 17 then
9901: LD_VAR 0 3
9905: PUSH
9906: LD_INT 17
9908: EQUAL
9909: IFFALSE 9919
// sSlow := true ;
9911: LD_ADDR_EXP 66
9915: PUSH
9916: LD_INT 1
9918: ST_TO_ADDR
// if p3 = 18 then
9919: LD_VAR 0 3
9923: PUSH
9924: LD_INT 18
9926: EQUAL
9927: IFFALSE 9937
// sLack := true ;
9929: LD_ADDR_EXP 67
9933: PUSH
9934: LD_INT 1
9936: ST_TO_ADDR
// if p3 = 19 then
9937: LD_VAR 0 3
9941: PUSH
9942: LD_INT 19
9944: EQUAL
9945: IFFALSE 9955
// sTank := true ;
9947: LD_ADDR_EXP 69
9951: PUSH
9952: LD_INT 1
9954: ST_TO_ADDR
// if p3 = 20 then
9955: LD_VAR 0 3
9959: PUSH
9960: LD_INT 20
9962: EQUAL
9963: IFFALSE 9973
// sRemote := true ;
9965: LD_ADDR_EXP 70
9969: PUSH
9970: LD_INT 1
9972: ST_TO_ADDR
// if p3 = 21 then
9973: LD_VAR 0 3
9977: PUSH
9978: LD_INT 21
9980: EQUAL
9981: IFFALSE 9991
// sPowell := true ;
9983: LD_ADDR_EXP 71
9987: PUSH
9988: LD_INT 1
9990: ST_TO_ADDR
// if p3 = 22 then
9991: LD_VAR 0 3
9995: PUSH
9996: LD_INT 22
9998: EQUAL
9999: IFFALSE 10009
// sTeleport := true ;
10001: LD_ADDR_EXP 74
10005: PUSH
10006: LD_INT 1
10008: ST_TO_ADDR
// if p3 = 23 then
10009: LD_VAR 0 3
10013: PUSH
10014: LD_INT 23
10016: EQUAL
10017: IFFALSE 10027
// sOilTower := true ;
10019: LD_ADDR_EXP 76
10023: PUSH
10024: LD_INT 1
10026: ST_TO_ADDR
// if p3 = 24 then
10027: LD_VAR 0 3
10031: PUSH
10032: LD_INT 24
10034: EQUAL
10035: IFFALSE 10045
// sShovel := true ;
10037: LD_ADDR_EXP 77
10041: PUSH
10042: LD_INT 1
10044: ST_TO_ADDR
// if p3 = 25 then
10045: LD_VAR 0 3
10049: PUSH
10050: LD_INT 25
10052: EQUAL
10053: IFFALSE 10063
// sSheik := true ;
10055: LD_ADDR_EXP 78
10059: PUSH
10060: LD_INT 1
10062: ST_TO_ADDR
// if p3 = 26 then
10063: LD_VAR 0 3
10067: PUSH
10068: LD_INT 26
10070: EQUAL
10071: IFFALSE 10081
// sEarthquake := true ;
10073: LD_ADDR_EXP 80
10077: PUSH
10078: LD_INT 1
10080: ST_TO_ADDR
// if p3 = 27 then
10081: LD_VAR 0 3
10085: PUSH
10086: LD_INT 27
10088: EQUAL
10089: IFFALSE 10099
// sAI := true ;
10091: LD_ADDR_EXP 81
10095: PUSH
10096: LD_INT 1
10098: ST_TO_ADDR
// if p3 = 28 then
10099: LD_VAR 0 3
10103: PUSH
10104: LD_INT 28
10106: EQUAL
10107: IFFALSE 10117
// sCargo := true ;
10109: LD_ADDR_EXP 84
10113: PUSH
10114: LD_INT 1
10116: ST_TO_ADDR
// if p3 = 29 then
10117: LD_VAR 0 3
10121: PUSH
10122: LD_INT 29
10124: EQUAL
10125: IFFALSE 10135
// sDLaser := true ;
10127: LD_ADDR_EXP 85
10131: PUSH
10132: LD_INT 1
10134: ST_TO_ADDR
// if p3 = 30 then
10135: LD_VAR 0 3
10139: PUSH
10140: LD_INT 30
10142: EQUAL
10143: IFFALSE 10153
// sExchange := true ;
10145: LD_ADDR_EXP 86
10149: PUSH
10150: LD_INT 1
10152: ST_TO_ADDR
// if p3 = 31 then
10153: LD_VAR 0 3
10157: PUSH
10158: LD_INT 31
10160: EQUAL
10161: IFFALSE 10171
// sFac := true ;
10163: LD_ADDR_EXP 87
10167: PUSH
10168: LD_INT 1
10170: ST_TO_ADDR
// if p3 = 32 then
10171: LD_VAR 0 3
10175: PUSH
10176: LD_INT 32
10178: EQUAL
10179: IFFALSE 10189
// sPower := true ;
10181: LD_ADDR_EXP 88
10185: PUSH
10186: LD_INT 1
10188: ST_TO_ADDR
// if p3 = 33 then
10189: LD_VAR 0 3
10193: PUSH
10194: LD_INT 33
10196: EQUAL
10197: IFFALSE 10207
// sRandom := true ;
10199: LD_ADDR_EXP 89
10203: PUSH
10204: LD_INT 1
10206: ST_TO_ADDR
// if p3 = 34 then
10207: LD_VAR 0 3
10211: PUSH
10212: LD_INT 34
10214: EQUAL
10215: IFFALSE 10225
// sShield := true ;
10217: LD_ADDR_EXP 90
10221: PUSH
10222: LD_INT 1
10224: ST_TO_ADDR
// if p3 = 35 then
10225: LD_VAR 0 3
10229: PUSH
10230: LD_INT 35
10232: EQUAL
10233: IFFALSE 10243
// sTime := true ;
10235: LD_ADDR_EXP 91
10239: PUSH
10240: LD_INT 1
10242: ST_TO_ADDR
// if p3 = 36 then
10243: LD_VAR 0 3
10247: PUSH
10248: LD_INT 36
10250: EQUAL
10251: IFFALSE 10261
// sTools := true ;
10253: LD_ADDR_EXP 92
10257: PUSH
10258: LD_INT 1
10260: ST_TO_ADDR
// if p3 = 101 then
10261: LD_VAR 0 3
10265: PUSH
10266: LD_INT 101
10268: EQUAL
10269: IFFALSE 10279
// sSold := true ;
10271: LD_ADDR_EXP 57
10275: PUSH
10276: LD_INT 1
10278: ST_TO_ADDR
// if p3 = 102 then
10279: LD_VAR 0 3
10283: PUSH
10284: LD_INT 102
10286: EQUAL
10287: IFFALSE 10297
// sDiff := true ;
10289: LD_ADDR_EXP 58
10293: PUSH
10294: LD_INT 1
10296: ST_TO_ADDR
// if p3 = 103 then
10297: LD_VAR 0 3
10301: PUSH
10302: LD_INT 103
10304: EQUAL
10305: IFFALSE 10315
// sFog := true ;
10307: LD_ADDR_EXP 61
10311: PUSH
10312: LD_INT 1
10314: ST_TO_ADDR
// if p3 = 104 then
10315: LD_VAR 0 3
10319: PUSH
10320: LD_INT 104
10322: EQUAL
10323: IFFALSE 10333
// sReset := true ;
10325: LD_ADDR_EXP 62
10329: PUSH
10330: LD_INT 1
10332: ST_TO_ADDR
// if p3 = 105 then
10333: LD_VAR 0 3
10337: PUSH
10338: LD_INT 105
10340: EQUAL
10341: IFFALSE 10351
// sSun := true ;
10343: LD_ADDR_EXP 63
10347: PUSH
10348: LD_INT 1
10350: ST_TO_ADDR
// if p3 = 106 then
10351: LD_VAR 0 3
10355: PUSH
10356: LD_INT 106
10358: EQUAL
10359: IFFALSE 10369
// sTiger := true ;
10361: LD_ADDR_EXP 59
10365: PUSH
10366: LD_INT 1
10368: ST_TO_ADDR
// if p3 = 107 then
10369: LD_VAR 0 3
10373: PUSH
10374: LD_INT 107
10376: EQUAL
10377: IFFALSE 10387
// sBomb := true ;
10379: LD_ADDR_EXP 60
10383: PUSH
10384: LD_INT 1
10386: ST_TO_ADDR
// if p3 = 108 then
10387: LD_VAR 0 3
10391: PUSH
10392: LD_INT 108
10394: EQUAL
10395: IFFALSE 10405
// sWound := true ;
10397: LD_ADDR_EXP 68
10401: PUSH
10402: LD_INT 1
10404: ST_TO_ADDR
// if p3 = 109 then
10405: LD_VAR 0 3
10409: PUSH
10410: LD_INT 109
10412: EQUAL
10413: IFFALSE 10423
// sBetray := true ;
10415: LD_ADDR_EXP 72
10419: PUSH
10420: LD_INT 1
10422: ST_TO_ADDR
// if p3 = 110 then
10423: LD_VAR 0 3
10427: PUSH
10428: LD_INT 110
10430: EQUAL
10431: IFFALSE 10441
// sContamin := true ;
10433: LD_ADDR_EXP 73
10437: PUSH
10438: LD_INT 1
10440: ST_TO_ADDR
// if p3 = 111 then
10441: LD_VAR 0 3
10445: PUSH
10446: LD_INT 111
10448: EQUAL
10449: IFFALSE 10459
// sOil := true ;
10451: LD_ADDR_EXP 75
10455: PUSH
10456: LD_INT 1
10458: ST_TO_ADDR
// if p3 = 112 then
10459: LD_VAR 0 3
10463: PUSH
10464: LD_INT 112
10466: EQUAL
10467: IFFALSE 10477
// sStu := true ;
10469: LD_ADDR_EXP 79
10473: PUSH
10474: LD_INT 1
10476: ST_TO_ADDR
// if p3 = 113 then
10477: LD_VAR 0 3
10481: PUSH
10482: LD_INT 113
10484: EQUAL
10485: IFFALSE 10495
// sBazooka := true ;
10487: LD_ADDR_EXP 82
10491: PUSH
10492: LD_INT 1
10494: ST_TO_ADDR
// if p3 = 114 then
10495: LD_VAR 0 3
10499: PUSH
10500: LD_INT 114
10502: EQUAL
10503: IFFALSE 10513
// sMortar := true ;
10505: LD_ADDR_EXP 83
10509: PUSH
10510: LD_INT 1
10512: ST_TO_ADDR
// if p3 = 115 then
10513: LD_VAR 0 3
10517: PUSH
10518: LD_INT 115
10520: EQUAL
10521: IFFALSE 10531
// sRanger := true ;
10523: LD_ADDR_EXP 93
10527: PUSH
10528: LD_INT 1
10530: ST_TO_ADDR
// end ; if p2 = 101 then
10531: LD_VAR 0 2
10535: PUSH
10536: LD_INT 101
10538: EQUAL
10539: IFFALSE 10742
// begin case p3 of 1 :
10541: LD_VAR 0 3
10545: PUSH
10546: LD_INT 1
10548: DOUBLE
10549: EQUAL
10550: IFTRUE 10554
10552: GO 10561
10554: POP
// hHackUnlimitedResources ; 2 :
10555: CALL 20836 0 0
10559: GO 10742
10561: LD_INT 2
10563: DOUBLE
10564: EQUAL
10565: IFTRUE 10569
10567: GO 10576
10569: POP
// hHackSetLevel10 ; 3 :
10570: CALL 20969 0 0
10574: GO 10742
10576: LD_INT 3
10578: DOUBLE
10579: EQUAL
10580: IFTRUE 10584
10582: GO 10591
10584: POP
// hHackSetLevel10YourUnits ; 4 :
10585: CALL 21054 0 0
10589: GO 10742
10591: LD_INT 4
10593: DOUBLE
10594: EQUAL
10595: IFTRUE 10599
10597: GO 10621
10599: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
10600: LD_VAR 0 4
10604: PPUSH
10605: LD_VAR 0 5
10609: PPUSH
10610: LD_VAR 0 6
10614: PPUSH
10615: CALL 21144 0 3
10619: GO 10742
10621: LD_INT 5
10623: DOUBLE
10624: EQUAL
10625: IFTRUE 10629
10627: GO 10636
10629: POP
// hHackSpawnVehicle ; 6 :
10630: CALL 21205 0 0
10634: GO 10742
10636: LD_INT 6
10638: DOUBLE
10639: EQUAL
10640: IFTRUE 10644
10642: GO 10651
10644: POP
// hHackInvincible ; 7 :
10645: CALL 21751 0 0
10649: GO 10742
10651: LD_INT 7
10653: DOUBLE
10654: EQUAL
10655: IFTRUE 10659
10657: GO 10666
10659: POP
// hHackInvisible ; 8 :
10660: CALL 21862 0 0
10664: GO 10742
10666: LD_INT 8
10668: DOUBLE
10669: EQUAL
10670: IFTRUE 10674
10672: GO 10681
10674: POP
// hHackChangeYourSide ; 9 :
10675: CALL 21919 0 0
10679: GO 10742
10681: LD_INT 9
10683: DOUBLE
10684: EQUAL
10685: IFTRUE 10689
10687: GO 10696
10689: POP
// hHackChangeUnitSide ; 10 :
10690: CALL 21961 0 0
10694: GO 10742
10696: LD_INT 10
10698: DOUBLE
10699: EQUAL
10700: IFTRUE 10704
10702: GO 10711
10704: POP
// hHackFog ; 11 :
10705: CALL 22062 0 0
10709: GO 10742
10711: LD_INT 11
10713: DOUBLE
10714: EQUAL
10715: IFTRUE 10719
10717: GO 10726
10719: POP
// hHackApeman ; 12 :
10720: CALL 22077 0 0
10724: GO 10742
10726: LD_INT 12
10728: DOUBLE
10729: EQUAL
10730: IFTRUE 10734
10732: GO 10741
10734: POP
// hHackBoom ; end ;
10735: CALL 22162 0 0
10739: GO 10742
10741: POP
// end ; end ;
10742: PPOPN 6
10744: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
10745: GO 10747
10747: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
10748: LD_STRING initStreamRollete();
10750: PPUSH
10751: CALL_OW 559
// InitStreamMode ;
10755: CALL 10764 0 0
// DefineStreamItems ( ) ;
10759: CALL 11204 0 0
// end ;
10763: END
// function InitStreamMode ; begin
10764: LD_INT 0
10766: PPUSH
// streamModeActive := false ;
10767: LD_ADDR_EXP 40
10771: PUSH
10772: LD_INT 0
10774: ST_TO_ADDR
// normalCounter := 36 ;
10775: LD_ADDR_EXP 41
10779: PUSH
10780: LD_INT 36
10782: ST_TO_ADDR
// hardcoreCounter := 16 ;
10783: LD_ADDR_EXP 42
10787: PUSH
10788: LD_INT 16
10790: ST_TO_ADDR
// sRocket := false ;
10791: LD_ADDR_EXP 45
10795: PUSH
10796: LD_INT 0
10798: ST_TO_ADDR
// sSpeed := false ;
10799: LD_ADDR_EXP 44
10803: PUSH
10804: LD_INT 0
10806: ST_TO_ADDR
// sEngine := false ;
10807: LD_ADDR_EXP 46
10811: PUSH
10812: LD_INT 0
10814: ST_TO_ADDR
// sSpec := false ;
10815: LD_ADDR_EXP 43
10819: PUSH
10820: LD_INT 0
10822: ST_TO_ADDR
// sLevel := false ;
10823: LD_ADDR_EXP 47
10827: PUSH
10828: LD_INT 0
10830: ST_TO_ADDR
// sArmoury := false ;
10831: LD_ADDR_EXP 48
10835: PUSH
10836: LD_INT 0
10838: ST_TO_ADDR
// sRadar := false ;
10839: LD_ADDR_EXP 49
10843: PUSH
10844: LD_INT 0
10846: ST_TO_ADDR
// sBunker := false ;
10847: LD_ADDR_EXP 50
10851: PUSH
10852: LD_INT 0
10854: ST_TO_ADDR
// sHack := false ;
10855: LD_ADDR_EXP 51
10859: PUSH
10860: LD_INT 0
10862: ST_TO_ADDR
// sFire := false ;
10863: LD_ADDR_EXP 52
10867: PUSH
10868: LD_INT 0
10870: ST_TO_ADDR
// sRefresh := false ;
10871: LD_ADDR_EXP 53
10875: PUSH
10876: LD_INT 0
10878: ST_TO_ADDR
// sExp := false ;
10879: LD_ADDR_EXP 54
10883: PUSH
10884: LD_INT 0
10886: ST_TO_ADDR
// sDepot := false ;
10887: LD_ADDR_EXP 55
10891: PUSH
10892: LD_INT 0
10894: ST_TO_ADDR
// sFlag := false ;
10895: LD_ADDR_EXP 56
10899: PUSH
10900: LD_INT 0
10902: ST_TO_ADDR
// sKamikadze := false ;
10903: LD_ADDR_EXP 64
10907: PUSH
10908: LD_INT 0
10910: ST_TO_ADDR
// sTroll := false ;
10911: LD_ADDR_EXP 65
10915: PUSH
10916: LD_INT 0
10918: ST_TO_ADDR
// sSlow := false ;
10919: LD_ADDR_EXP 66
10923: PUSH
10924: LD_INT 0
10926: ST_TO_ADDR
// sLack := false ;
10927: LD_ADDR_EXP 67
10931: PUSH
10932: LD_INT 0
10934: ST_TO_ADDR
// sTank := false ;
10935: LD_ADDR_EXP 69
10939: PUSH
10940: LD_INT 0
10942: ST_TO_ADDR
// sRemote := false ;
10943: LD_ADDR_EXP 70
10947: PUSH
10948: LD_INT 0
10950: ST_TO_ADDR
// sPowell := false ;
10951: LD_ADDR_EXP 71
10955: PUSH
10956: LD_INT 0
10958: ST_TO_ADDR
// sTeleport := false ;
10959: LD_ADDR_EXP 74
10963: PUSH
10964: LD_INT 0
10966: ST_TO_ADDR
// sOilTower := false ;
10967: LD_ADDR_EXP 76
10971: PUSH
10972: LD_INT 0
10974: ST_TO_ADDR
// sShovel := false ;
10975: LD_ADDR_EXP 77
10979: PUSH
10980: LD_INT 0
10982: ST_TO_ADDR
// sSheik := false ;
10983: LD_ADDR_EXP 78
10987: PUSH
10988: LD_INT 0
10990: ST_TO_ADDR
// sEarthquake := false ;
10991: LD_ADDR_EXP 80
10995: PUSH
10996: LD_INT 0
10998: ST_TO_ADDR
// sAI := false ;
10999: LD_ADDR_EXP 81
11003: PUSH
11004: LD_INT 0
11006: ST_TO_ADDR
// sCargo := false ;
11007: LD_ADDR_EXP 84
11011: PUSH
11012: LD_INT 0
11014: ST_TO_ADDR
// sDLaser := false ;
11015: LD_ADDR_EXP 85
11019: PUSH
11020: LD_INT 0
11022: ST_TO_ADDR
// sExchange := false ;
11023: LD_ADDR_EXP 86
11027: PUSH
11028: LD_INT 0
11030: ST_TO_ADDR
// sFac := false ;
11031: LD_ADDR_EXP 87
11035: PUSH
11036: LD_INT 0
11038: ST_TO_ADDR
// sPower := false ;
11039: LD_ADDR_EXP 88
11043: PUSH
11044: LD_INT 0
11046: ST_TO_ADDR
// sRandom := false ;
11047: LD_ADDR_EXP 89
11051: PUSH
11052: LD_INT 0
11054: ST_TO_ADDR
// sShield := false ;
11055: LD_ADDR_EXP 90
11059: PUSH
11060: LD_INT 0
11062: ST_TO_ADDR
// sTime := false ;
11063: LD_ADDR_EXP 91
11067: PUSH
11068: LD_INT 0
11070: ST_TO_ADDR
// sTools := false ;
11071: LD_ADDR_EXP 92
11075: PUSH
11076: LD_INT 0
11078: ST_TO_ADDR
// sSold := false ;
11079: LD_ADDR_EXP 57
11083: PUSH
11084: LD_INT 0
11086: ST_TO_ADDR
// sDiff := false ;
11087: LD_ADDR_EXP 58
11091: PUSH
11092: LD_INT 0
11094: ST_TO_ADDR
// sFog := false ;
11095: LD_ADDR_EXP 61
11099: PUSH
11100: LD_INT 0
11102: ST_TO_ADDR
// sReset := false ;
11103: LD_ADDR_EXP 62
11107: PUSH
11108: LD_INT 0
11110: ST_TO_ADDR
// sSun := false ;
11111: LD_ADDR_EXP 63
11115: PUSH
11116: LD_INT 0
11118: ST_TO_ADDR
// sTiger := false ;
11119: LD_ADDR_EXP 59
11123: PUSH
11124: LD_INT 0
11126: ST_TO_ADDR
// sBomb := false ;
11127: LD_ADDR_EXP 60
11131: PUSH
11132: LD_INT 0
11134: ST_TO_ADDR
// sWound := false ;
11135: LD_ADDR_EXP 68
11139: PUSH
11140: LD_INT 0
11142: ST_TO_ADDR
// sBetray := false ;
11143: LD_ADDR_EXP 72
11147: PUSH
11148: LD_INT 0
11150: ST_TO_ADDR
// sContamin := false ;
11151: LD_ADDR_EXP 73
11155: PUSH
11156: LD_INT 0
11158: ST_TO_ADDR
// sOil := false ;
11159: LD_ADDR_EXP 75
11163: PUSH
11164: LD_INT 0
11166: ST_TO_ADDR
// sStu := false ;
11167: LD_ADDR_EXP 79
11171: PUSH
11172: LD_INT 0
11174: ST_TO_ADDR
// sBazooka := false ;
11175: LD_ADDR_EXP 82
11179: PUSH
11180: LD_INT 0
11182: ST_TO_ADDR
// sMortar := false ;
11183: LD_ADDR_EXP 83
11187: PUSH
11188: LD_INT 0
11190: ST_TO_ADDR
// sRanger := false ;
11191: LD_ADDR_EXP 93
11195: PUSH
11196: LD_INT 0
11198: ST_TO_ADDR
// end ;
11199: LD_VAR 0 1
11203: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
11204: LD_INT 0
11206: PPUSH
11207: PPUSH
11208: PPUSH
11209: PPUSH
11210: PPUSH
// result := [ ] ;
11211: LD_ADDR_VAR 0 1
11215: PUSH
11216: EMPTY
11217: ST_TO_ADDR
// if campaign_id = 1 then
11218: LD_OWVAR 69
11222: PUSH
11223: LD_INT 1
11225: EQUAL
11226: IFFALSE 14164
// begin case mission_number of 1 :
11228: LD_OWVAR 70
11232: PUSH
11233: LD_INT 1
11235: DOUBLE
11236: EQUAL
11237: IFTRUE 11241
11239: GO 11305
11241: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
11242: LD_ADDR_VAR 0 1
11246: PUSH
11247: LD_INT 2
11249: PUSH
11250: LD_INT 4
11252: PUSH
11253: LD_INT 11
11255: PUSH
11256: LD_INT 12
11258: PUSH
11259: LD_INT 15
11261: PUSH
11262: LD_INT 16
11264: PUSH
11265: LD_INT 22
11267: PUSH
11268: LD_INT 23
11270: PUSH
11271: LD_INT 26
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: PUSH
11285: LD_INT 101
11287: PUSH
11288: LD_INT 102
11290: PUSH
11291: LD_INT 106
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: LIST
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: ST_TO_ADDR
11303: GO 14162
11305: LD_INT 2
11307: DOUBLE
11308: EQUAL
11309: IFTRUE 11313
11311: GO 11385
11313: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
11314: LD_ADDR_VAR 0 1
11318: PUSH
11319: LD_INT 2
11321: PUSH
11322: LD_INT 4
11324: PUSH
11325: LD_INT 11
11327: PUSH
11328: LD_INT 12
11330: PUSH
11331: LD_INT 15
11333: PUSH
11334: LD_INT 16
11336: PUSH
11337: LD_INT 22
11339: PUSH
11340: LD_INT 23
11342: PUSH
11343: LD_INT 26
11345: PUSH
11346: EMPTY
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: PUSH
11357: LD_INT 101
11359: PUSH
11360: LD_INT 102
11362: PUSH
11363: LD_INT 105
11365: PUSH
11366: LD_INT 106
11368: PUSH
11369: LD_INT 108
11371: PUSH
11372: EMPTY
11373: LIST
11374: LIST
11375: LIST
11376: LIST
11377: LIST
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: ST_TO_ADDR
11383: GO 14162
11385: LD_INT 3
11387: DOUBLE
11388: EQUAL
11389: IFTRUE 11393
11391: GO 11469
11393: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
11394: LD_ADDR_VAR 0 1
11398: PUSH
11399: LD_INT 2
11401: PUSH
11402: LD_INT 4
11404: PUSH
11405: LD_INT 5
11407: PUSH
11408: LD_INT 11
11410: PUSH
11411: LD_INT 12
11413: PUSH
11414: LD_INT 15
11416: PUSH
11417: LD_INT 16
11419: PUSH
11420: LD_INT 22
11422: PUSH
11423: LD_INT 26
11425: PUSH
11426: LD_INT 36
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: PUSH
11441: LD_INT 101
11443: PUSH
11444: LD_INT 102
11446: PUSH
11447: LD_INT 105
11449: PUSH
11450: LD_INT 106
11452: PUSH
11453: LD_INT 108
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: PUSH
11463: EMPTY
11464: LIST
11465: LIST
11466: ST_TO_ADDR
11467: GO 14162
11469: LD_INT 4
11471: DOUBLE
11472: EQUAL
11473: IFTRUE 11477
11475: GO 11561
11477: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
11478: LD_ADDR_VAR 0 1
11482: PUSH
11483: LD_INT 2
11485: PUSH
11486: LD_INT 4
11488: PUSH
11489: LD_INT 5
11491: PUSH
11492: LD_INT 8
11494: PUSH
11495: LD_INT 11
11497: PUSH
11498: LD_INT 12
11500: PUSH
11501: LD_INT 15
11503: PUSH
11504: LD_INT 16
11506: PUSH
11507: LD_INT 22
11509: PUSH
11510: LD_INT 23
11512: PUSH
11513: LD_INT 26
11515: PUSH
11516: LD_INT 36
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: PUSH
11533: LD_INT 101
11535: PUSH
11536: LD_INT 102
11538: PUSH
11539: LD_INT 105
11541: PUSH
11542: LD_INT 106
11544: PUSH
11545: LD_INT 108
11547: PUSH
11548: EMPTY
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: ST_TO_ADDR
11559: GO 14162
11561: LD_INT 5
11563: DOUBLE
11564: EQUAL
11565: IFTRUE 11569
11567: GO 11669
11569: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
11570: LD_ADDR_VAR 0 1
11574: PUSH
11575: LD_INT 2
11577: PUSH
11578: LD_INT 4
11580: PUSH
11581: LD_INT 5
11583: PUSH
11584: LD_INT 6
11586: PUSH
11587: LD_INT 8
11589: PUSH
11590: LD_INT 11
11592: PUSH
11593: LD_INT 12
11595: PUSH
11596: LD_INT 15
11598: PUSH
11599: LD_INT 16
11601: PUSH
11602: LD_INT 22
11604: PUSH
11605: LD_INT 23
11607: PUSH
11608: LD_INT 25
11610: PUSH
11611: LD_INT 26
11613: PUSH
11614: LD_INT 36
11616: PUSH
11617: EMPTY
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: PUSH
11633: LD_INT 101
11635: PUSH
11636: LD_INT 102
11638: PUSH
11639: LD_INT 105
11641: PUSH
11642: LD_INT 106
11644: PUSH
11645: LD_INT 108
11647: PUSH
11648: LD_INT 109
11650: PUSH
11651: LD_INT 112
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: ST_TO_ADDR
11667: GO 14162
11669: LD_INT 6
11671: DOUBLE
11672: EQUAL
11673: IFTRUE 11677
11675: GO 11797
11677: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
11678: LD_ADDR_VAR 0 1
11682: PUSH
11683: LD_INT 2
11685: PUSH
11686: LD_INT 4
11688: PUSH
11689: LD_INT 5
11691: PUSH
11692: LD_INT 6
11694: PUSH
11695: LD_INT 8
11697: PUSH
11698: LD_INT 11
11700: PUSH
11701: LD_INT 12
11703: PUSH
11704: LD_INT 15
11706: PUSH
11707: LD_INT 16
11709: PUSH
11710: LD_INT 20
11712: PUSH
11713: LD_INT 21
11715: PUSH
11716: LD_INT 22
11718: PUSH
11719: LD_INT 23
11721: PUSH
11722: LD_INT 25
11724: PUSH
11725: LD_INT 26
11727: PUSH
11728: LD_INT 30
11730: PUSH
11731: LD_INT 31
11733: PUSH
11734: LD_INT 32
11736: PUSH
11737: LD_INT 36
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: PUSH
11761: LD_INT 101
11763: PUSH
11764: LD_INT 102
11766: PUSH
11767: LD_INT 105
11769: PUSH
11770: LD_INT 106
11772: PUSH
11773: LD_INT 108
11775: PUSH
11776: LD_INT 109
11778: PUSH
11779: LD_INT 112
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: PUSH
11791: EMPTY
11792: LIST
11793: LIST
11794: ST_TO_ADDR
11795: GO 14162
11797: LD_INT 7
11799: DOUBLE
11800: EQUAL
11801: IFTRUE 11805
11803: GO 11905
11805: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
11806: LD_ADDR_VAR 0 1
11810: PUSH
11811: LD_INT 2
11813: PUSH
11814: LD_INT 4
11816: PUSH
11817: LD_INT 5
11819: PUSH
11820: LD_INT 7
11822: PUSH
11823: LD_INT 11
11825: PUSH
11826: LD_INT 12
11828: PUSH
11829: LD_INT 15
11831: PUSH
11832: LD_INT 16
11834: PUSH
11835: LD_INT 20
11837: PUSH
11838: LD_INT 21
11840: PUSH
11841: LD_INT 22
11843: PUSH
11844: LD_INT 23
11846: PUSH
11847: LD_INT 25
11849: PUSH
11850: LD_INT 26
11852: PUSH
11853: EMPTY
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: PUSH
11869: LD_INT 101
11871: PUSH
11872: LD_INT 102
11874: PUSH
11875: LD_INT 103
11877: PUSH
11878: LD_INT 105
11880: PUSH
11881: LD_INT 106
11883: PUSH
11884: LD_INT 108
11886: PUSH
11887: LD_INT 112
11889: PUSH
11890: EMPTY
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: ST_TO_ADDR
11903: GO 14162
11905: LD_INT 8
11907: DOUBLE
11908: EQUAL
11909: IFTRUE 11913
11911: GO 12041
11913: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
11914: LD_ADDR_VAR 0 1
11918: PUSH
11919: LD_INT 2
11921: PUSH
11922: LD_INT 4
11924: PUSH
11925: LD_INT 5
11927: PUSH
11928: LD_INT 6
11930: PUSH
11931: LD_INT 7
11933: PUSH
11934: LD_INT 8
11936: PUSH
11937: LD_INT 11
11939: PUSH
11940: LD_INT 12
11942: PUSH
11943: LD_INT 15
11945: PUSH
11946: LD_INT 16
11948: PUSH
11949: LD_INT 20
11951: PUSH
11952: LD_INT 21
11954: PUSH
11955: LD_INT 22
11957: PUSH
11958: LD_INT 23
11960: PUSH
11961: LD_INT 25
11963: PUSH
11964: LD_INT 26
11966: PUSH
11967: LD_INT 30
11969: PUSH
11970: LD_INT 31
11972: PUSH
11973: LD_INT 32
11975: PUSH
11976: LD_INT 36
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: PUSH
12001: LD_INT 101
12003: PUSH
12004: LD_INT 102
12006: PUSH
12007: LD_INT 103
12009: PUSH
12010: LD_INT 105
12012: PUSH
12013: LD_INT 106
12015: PUSH
12016: LD_INT 108
12018: PUSH
12019: LD_INT 109
12021: PUSH
12022: LD_INT 112
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: PUSH
12035: EMPTY
12036: LIST
12037: LIST
12038: ST_TO_ADDR
12039: GO 14162
12041: LD_INT 9
12043: DOUBLE
12044: EQUAL
12045: IFTRUE 12049
12047: GO 12185
12049: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
12050: LD_ADDR_VAR 0 1
12054: PUSH
12055: LD_INT 2
12057: PUSH
12058: LD_INT 4
12060: PUSH
12061: LD_INT 5
12063: PUSH
12064: LD_INT 6
12066: PUSH
12067: LD_INT 7
12069: PUSH
12070: LD_INT 8
12072: PUSH
12073: LD_INT 11
12075: PUSH
12076: LD_INT 12
12078: PUSH
12079: LD_INT 15
12081: PUSH
12082: LD_INT 16
12084: PUSH
12085: LD_INT 20
12087: PUSH
12088: LD_INT 21
12090: PUSH
12091: LD_INT 22
12093: PUSH
12094: LD_INT 23
12096: PUSH
12097: LD_INT 25
12099: PUSH
12100: LD_INT 26
12102: PUSH
12103: LD_INT 28
12105: PUSH
12106: LD_INT 30
12108: PUSH
12109: LD_INT 31
12111: PUSH
12112: LD_INT 32
12114: PUSH
12115: LD_INT 36
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: PUSH
12141: LD_INT 101
12143: PUSH
12144: LD_INT 102
12146: PUSH
12147: LD_INT 103
12149: PUSH
12150: LD_INT 105
12152: PUSH
12153: LD_INT 106
12155: PUSH
12156: LD_INT 108
12158: PUSH
12159: LD_INT 109
12161: PUSH
12162: LD_INT 112
12164: PUSH
12165: LD_INT 114
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: PUSH
12179: EMPTY
12180: LIST
12181: LIST
12182: ST_TO_ADDR
12183: GO 14162
12185: LD_INT 10
12187: DOUBLE
12188: EQUAL
12189: IFTRUE 12193
12191: GO 12377
12193: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
12194: LD_ADDR_VAR 0 1
12198: PUSH
12199: LD_INT 2
12201: PUSH
12202: LD_INT 4
12204: PUSH
12205: LD_INT 5
12207: PUSH
12208: LD_INT 6
12210: PUSH
12211: LD_INT 7
12213: PUSH
12214: LD_INT 8
12216: PUSH
12217: LD_INT 9
12219: PUSH
12220: LD_INT 10
12222: PUSH
12223: LD_INT 11
12225: PUSH
12226: LD_INT 12
12228: PUSH
12229: LD_INT 13
12231: PUSH
12232: LD_INT 14
12234: PUSH
12235: LD_INT 15
12237: PUSH
12238: LD_INT 16
12240: PUSH
12241: LD_INT 17
12243: PUSH
12244: LD_INT 18
12246: PUSH
12247: LD_INT 19
12249: PUSH
12250: LD_INT 20
12252: PUSH
12253: LD_INT 21
12255: PUSH
12256: LD_INT 22
12258: PUSH
12259: LD_INT 23
12261: PUSH
12262: LD_INT 24
12264: PUSH
12265: LD_INT 25
12267: PUSH
12268: LD_INT 26
12270: PUSH
12271: LD_INT 28
12273: PUSH
12274: LD_INT 30
12276: PUSH
12277: LD_INT 31
12279: PUSH
12280: LD_INT 32
12282: PUSH
12283: LD_INT 36
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: PUSH
12317: LD_INT 101
12319: PUSH
12320: LD_INT 102
12322: PUSH
12323: LD_INT 103
12325: PUSH
12326: LD_INT 104
12328: PUSH
12329: LD_INT 105
12331: PUSH
12332: LD_INT 106
12334: PUSH
12335: LD_INT 107
12337: PUSH
12338: LD_INT 108
12340: PUSH
12341: LD_INT 109
12343: PUSH
12344: LD_INT 110
12346: PUSH
12347: LD_INT 111
12349: PUSH
12350: LD_INT 112
12352: PUSH
12353: LD_INT 114
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: ST_TO_ADDR
12375: GO 14162
12377: LD_INT 11
12379: DOUBLE
12380: EQUAL
12381: IFTRUE 12385
12383: GO 12577
12385: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
12386: LD_ADDR_VAR 0 1
12390: PUSH
12391: LD_INT 2
12393: PUSH
12394: LD_INT 3
12396: PUSH
12397: LD_INT 4
12399: PUSH
12400: LD_INT 5
12402: PUSH
12403: LD_INT 6
12405: PUSH
12406: LD_INT 7
12408: PUSH
12409: LD_INT 8
12411: PUSH
12412: LD_INT 9
12414: PUSH
12415: LD_INT 10
12417: PUSH
12418: LD_INT 11
12420: PUSH
12421: LD_INT 12
12423: PUSH
12424: LD_INT 13
12426: PUSH
12427: LD_INT 14
12429: PUSH
12430: LD_INT 15
12432: PUSH
12433: LD_INT 16
12435: PUSH
12436: LD_INT 17
12438: PUSH
12439: LD_INT 18
12441: PUSH
12442: LD_INT 19
12444: PUSH
12445: LD_INT 20
12447: PUSH
12448: LD_INT 21
12450: PUSH
12451: LD_INT 22
12453: PUSH
12454: LD_INT 23
12456: PUSH
12457: LD_INT 24
12459: PUSH
12460: LD_INT 25
12462: PUSH
12463: LD_INT 26
12465: PUSH
12466: LD_INT 28
12468: PUSH
12469: LD_INT 30
12471: PUSH
12472: LD_INT 31
12474: PUSH
12475: LD_INT 32
12477: PUSH
12478: LD_INT 34
12480: PUSH
12481: LD_INT 36
12483: PUSH
12484: EMPTY
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: PUSH
12517: LD_INT 101
12519: PUSH
12520: LD_INT 102
12522: PUSH
12523: LD_INT 103
12525: PUSH
12526: LD_INT 104
12528: PUSH
12529: LD_INT 105
12531: PUSH
12532: LD_INT 106
12534: PUSH
12535: LD_INT 107
12537: PUSH
12538: LD_INT 108
12540: PUSH
12541: LD_INT 109
12543: PUSH
12544: LD_INT 110
12546: PUSH
12547: LD_INT 111
12549: PUSH
12550: LD_INT 112
12552: PUSH
12553: LD_INT 114
12555: PUSH
12556: EMPTY
12557: LIST
12558: LIST
12559: LIST
12560: LIST
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: ST_TO_ADDR
12575: GO 14162
12577: LD_INT 12
12579: DOUBLE
12580: EQUAL
12581: IFTRUE 12585
12583: GO 12793
12585: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
12586: LD_ADDR_VAR 0 1
12590: PUSH
12591: LD_INT 1
12593: PUSH
12594: LD_INT 2
12596: PUSH
12597: LD_INT 3
12599: PUSH
12600: LD_INT 4
12602: PUSH
12603: LD_INT 5
12605: PUSH
12606: LD_INT 6
12608: PUSH
12609: LD_INT 7
12611: PUSH
12612: LD_INT 8
12614: PUSH
12615: LD_INT 9
12617: PUSH
12618: LD_INT 10
12620: PUSH
12621: LD_INT 11
12623: PUSH
12624: LD_INT 12
12626: PUSH
12627: LD_INT 13
12629: PUSH
12630: LD_INT 14
12632: PUSH
12633: LD_INT 15
12635: PUSH
12636: LD_INT 16
12638: PUSH
12639: LD_INT 17
12641: PUSH
12642: LD_INT 18
12644: PUSH
12645: LD_INT 19
12647: PUSH
12648: LD_INT 20
12650: PUSH
12651: LD_INT 21
12653: PUSH
12654: LD_INT 22
12656: PUSH
12657: LD_INT 23
12659: PUSH
12660: LD_INT 24
12662: PUSH
12663: LD_INT 25
12665: PUSH
12666: LD_INT 26
12668: PUSH
12669: LD_INT 27
12671: PUSH
12672: LD_INT 28
12674: PUSH
12675: LD_INT 30
12677: PUSH
12678: LD_INT 31
12680: PUSH
12681: LD_INT 32
12683: PUSH
12684: LD_INT 33
12686: PUSH
12687: LD_INT 34
12689: PUSH
12690: LD_INT 36
12692: PUSH
12693: EMPTY
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: PUSH
12729: LD_INT 101
12731: PUSH
12732: LD_INT 102
12734: PUSH
12735: LD_INT 103
12737: PUSH
12738: LD_INT 104
12740: PUSH
12741: LD_INT 105
12743: PUSH
12744: LD_INT 106
12746: PUSH
12747: LD_INT 107
12749: PUSH
12750: LD_INT 108
12752: PUSH
12753: LD_INT 109
12755: PUSH
12756: LD_INT 110
12758: PUSH
12759: LD_INT 111
12761: PUSH
12762: LD_INT 112
12764: PUSH
12765: LD_INT 113
12767: PUSH
12768: LD_INT 114
12770: PUSH
12771: EMPTY
12772: LIST
12773: LIST
12774: LIST
12775: LIST
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: ST_TO_ADDR
12791: GO 14162
12793: LD_INT 13
12795: DOUBLE
12796: EQUAL
12797: IFTRUE 12801
12799: GO 12997
12801: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
12802: LD_ADDR_VAR 0 1
12806: PUSH
12807: LD_INT 1
12809: PUSH
12810: LD_INT 2
12812: PUSH
12813: LD_INT 3
12815: PUSH
12816: LD_INT 4
12818: PUSH
12819: LD_INT 5
12821: PUSH
12822: LD_INT 8
12824: PUSH
12825: LD_INT 9
12827: PUSH
12828: LD_INT 10
12830: PUSH
12831: LD_INT 11
12833: PUSH
12834: LD_INT 12
12836: PUSH
12837: LD_INT 14
12839: PUSH
12840: LD_INT 15
12842: PUSH
12843: LD_INT 16
12845: PUSH
12846: LD_INT 17
12848: PUSH
12849: LD_INT 18
12851: PUSH
12852: LD_INT 19
12854: PUSH
12855: LD_INT 20
12857: PUSH
12858: LD_INT 21
12860: PUSH
12861: LD_INT 22
12863: PUSH
12864: LD_INT 23
12866: PUSH
12867: LD_INT 24
12869: PUSH
12870: LD_INT 25
12872: PUSH
12873: LD_INT 26
12875: PUSH
12876: LD_INT 27
12878: PUSH
12879: LD_INT 28
12881: PUSH
12882: LD_INT 30
12884: PUSH
12885: LD_INT 31
12887: PUSH
12888: LD_INT 32
12890: PUSH
12891: LD_INT 33
12893: PUSH
12894: LD_INT 34
12896: PUSH
12897: LD_INT 36
12899: PUSH
12900: EMPTY
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: PUSH
12933: LD_INT 101
12935: PUSH
12936: LD_INT 102
12938: PUSH
12939: LD_INT 103
12941: PUSH
12942: LD_INT 104
12944: PUSH
12945: LD_INT 105
12947: PUSH
12948: LD_INT 106
12950: PUSH
12951: LD_INT 107
12953: PUSH
12954: LD_INT 108
12956: PUSH
12957: LD_INT 109
12959: PUSH
12960: LD_INT 110
12962: PUSH
12963: LD_INT 111
12965: PUSH
12966: LD_INT 112
12968: PUSH
12969: LD_INT 113
12971: PUSH
12972: LD_INT 114
12974: PUSH
12975: EMPTY
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: LIST
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: ST_TO_ADDR
12995: GO 14162
12997: LD_INT 14
12999: DOUBLE
13000: EQUAL
13001: IFTRUE 13005
13003: GO 13217
13005: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
13006: LD_ADDR_VAR 0 1
13010: PUSH
13011: LD_INT 1
13013: PUSH
13014: LD_INT 2
13016: PUSH
13017: LD_INT 3
13019: PUSH
13020: LD_INT 4
13022: PUSH
13023: LD_INT 5
13025: PUSH
13026: LD_INT 6
13028: PUSH
13029: LD_INT 7
13031: PUSH
13032: LD_INT 8
13034: PUSH
13035: LD_INT 9
13037: PUSH
13038: LD_INT 10
13040: PUSH
13041: LD_INT 11
13043: PUSH
13044: LD_INT 12
13046: PUSH
13047: LD_INT 13
13049: PUSH
13050: LD_INT 14
13052: PUSH
13053: LD_INT 15
13055: PUSH
13056: LD_INT 16
13058: PUSH
13059: LD_INT 17
13061: PUSH
13062: LD_INT 18
13064: PUSH
13065: LD_INT 19
13067: PUSH
13068: LD_INT 20
13070: PUSH
13071: LD_INT 21
13073: PUSH
13074: LD_INT 22
13076: PUSH
13077: LD_INT 23
13079: PUSH
13080: LD_INT 24
13082: PUSH
13083: LD_INT 25
13085: PUSH
13086: LD_INT 26
13088: PUSH
13089: LD_INT 27
13091: PUSH
13092: LD_INT 28
13094: PUSH
13095: LD_INT 29
13097: PUSH
13098: LD_INT 30
13100: PUSH
13101: LD_INT 31
13103: PUSH
13104: LD_INT 32
13106: PUSH
13107: LD_INT 33
13109: PUSH
13110: LD_INT 34
13112: PUSH
13113: LD_INT 36
13115: PUSH
13116: EMPTY
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: PUSH
13153: LD_INT 101
13155: PUSH
13156: LD_INT 102
13158: PUSH
13159: LD_INT 103
13161: PUSH
13162: LD_INT 104
13164: PUSH
13165: LD_INT 105
13167: PUSH
13168: LD_INT 106
13170: PUSH
13171: LD_INT 107
13173: PUSH
13174: LD_INT 108
13176: PUSH
13177: LD_INT 109
13179: PUSH
13180: LD_INT 110
13182: PUSH
13183: LD_INT 111
13185: PUSH
13186: LD_INT 112
13188: PUSH
13189: LD_INT 113
13191: PUSH
13192: LD_INT 114
13194: PUSH
13195: EMPTY
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: PUSH
13211: EMPTY
13212: LIST
13213: LIST
13214: ST_TO_ADDR
13215: GO 14162
13217: LD_INT 15
13219: DOUBLE
13220: EQUAL
13221: IFTRUE 13225
13223: GO 13437
13225: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
13226: LD_ADDR_VAR 0 1
13230: PUSH
13231: LD_INT 1
13233: PUSH
13234: LD_INT 2
13236: PUSH
13237: LD_INT 3
13239: PUSH
13240: LD_INT 4
13242: PUSH
13243: LD_INT 5
13245: PUSH
13246: LD_INT 6
13248: PUSH
13249: LD_INT 7
13251: PUSH
13252: LD_INT 8
13254: PUSH
13255: LD_INT 9
13257: PUSH
13258: LD_INT 10
13260: PUSH
13261: LD_INT 11
13263: PUSH
13264: LD_INT 12
13266: PUSH
13267: LD_INT 13
13269: PUSH
13270: LD_INT 14
13272: PUSH
13273: LD_INT 15
13275: PUSH
13276: LD_INT 16
13278: PUSH
13279: LD_INT 17
13281: PUSH
13282: LD_INT 18
13284: PUSH
13285: LD_INT 19
13287: PUSH
13288: LD_INT 20
13290: PUSH
13291: LD_INT 21
13293: PUSH
13294: LD_INT 22
13296: PUSH
13297: LD_INT 23
13299: PUSH
13300: LD_INT 24
13302: PUSH
13303: LD_INT 25
13305: PUSH
13306: LD_INT 26
13308: PUSH
13309: LD_INT 27
13311: PUSH
13312: LD_INT 28
13314: PUSH
13315: LD_INT 29
13317: PUSH
13318: LD_INT 30
13320: PUSH
13321: LD_INT 31
13323: PUSH
13324: LD_INT 32
13326: PUSH
13327: LD_INT 33
13329: PUSH
13330: LD_INT 34
13332: PUSH
13333: LD_INT 36
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: PUSH
13373: LD_INT 101
13375: PUSH
13376: LD_INT 102
13378: PUSH
13379: LD_INT 103
13381: PUSH
13382: LD_INT 104
13384: PUSH
13385: LD_INT 105
13387: PUSH
13388: LD_INT 106
13390: PUSH
13391: LD_INT 107
13393: PUSH
13394: LD_INT 108
13396: PUSH
13397: LD_INT 109
13399: PUSH
13400: LD_INT 110
13402: PUSH
13403: LD_INT 111
13405: PUSH
13406: LD_INT 112
13408: PUSH
13409: LD_INT 113
13411: PUSH
13412: LD_INT 114
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: ST_TO_ADDR
13435: GO 14162
13437: LD_INT 16
13439: DOUBLE
13440: EQUAL
13441: IFTRUE 13445
13443: GO 13569
13445: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
13446: LD_ADDR_VAR 0 1
13450: PUSH
13451: LD_INT 2
13453: PUSH
13454: LD_INT 4
13456: PUSH
13457: LD_INT 5
13459: PUSH
13460: LD_INT 7
13462: PUSH
13463: LD_INT 11
13465: PUSH
13466: LD_INT 12
13468: PUSH
13469: LD_INT 15
13471: PUSH
13472: LD_INT 16
13474: PUSH
13475: LD_INT 20
13477: PUSH
13478: LD_INT 21
13480: PUSH
13481: LD_INT 22
13483: PUSH
13484: LD_INT 23
13486: PUSH
13487: LD_INT 25
13489: PUSH
13490: LD_INT 26
13492: PUSH
13493: LD_INT 30
13495: PUSH
13496: LD_INT 31
13498: PUSH
13499: LD_INT 32
13501: PUSH
13502: LD_INT 33
13504: PUSH
13505: LD_INT 34
13507: PUSH
13508: EMPTY
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: PUSH
13529: LD_INT 101
13531: PUSH
13532: LD_INT 102
13534: PUSH
13535: LD_INT 103
13537: PUSH
13538: LD_INT 106
13540: PUSH
13541: LD_INT 108
13543: PUSH
13544: LD_INT 112
13546: PUSH
13547: LD_INT 113
13549: PUSH
13550: LD_INT 114
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: ST_TO_ADDR
13567: GO 14162
13569: LD_INT 17
13571: DOUBLE
13572: EQUAL
13573: IFTRUE 13577
13575: GO 13789
13577: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
13578: LD_ADDR_VAR 0 1
13582: PUSH
13583: LD_INT 1
13585: PUSH
13586: LD_INT 2
13588: PUSH
13589: LD_INT 3
13591: PUSH
13592: LD_INT 4
13594: PUSH
13595: LD_INT 5
13597: PUSH
13598: LD_INT 6
13600: PUSH
13601: LD_INT 7
13603: PUSH
13604: LD_INT 8
13606: PUSH
13607: LD_INT 9
13609: PUSH
13610: LD_INT 10
13612: PUSH
13613: LD_INT 11
13615: PUSH
13616: LD_INT 12
13618: PUSH
13619: LD_INT 13
13621: PUSH
13622: LD_INT 14
13624: PUSH
13625: LD_INT 15
13627: PUSH
13628: LD_INT 16
13630: PUSH
13631: LD_INT 17
13633: PUSH
13634: LD_INT 18
13636: PUSH
13637: LD_INT 19
13639: PUSH
13640: LD_INT 20
13642: PUSH
13643: LD_INT 21
13645: PUSH
13646: LD_INT 22
13648: PUSH
13649: LD_INT 23
13651: PUSH
13652: LD_INT 24
13654: PUSH
13655: LD_INT 25
13657: PUSH
13658: LD_INT 26
13660: PUSH
13661: LD_INT 27
13663: PUSH
13664: LD_INT 28
13666: PUSH
13667: LD_INT 29
13669: PUSH
13670: LD_INT 30
13672: PUSH
13673: LD_INT 31
13675: PUSH
13676: LD_INT 32
13678: PUSH
13679: LD_INT 33
13681: PUSH
13682: LD_INT 34
13684: PUSH
13685: LD_INT 36
13687: PUSH
13688: EMPTY
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: PUSH
13725: LD_INT 101
13727: PUSH
13728: LD_INT 102
13730: PUSH
13731: LD_INT 103
13733: PUSH
13734: LD_INT 104
13736: PUSH
13737: LD_INT 105
13739: PUSH
13740: LD_INT 106
13742: PUSH
13743: LD_INT 107
13745: PUSH
13746: LD_INT 108
13748: PUSH
13749: LD_INT 109
13751: PUSH
13752: LD_INT 110
13754: PUSH
13755: LD_INT 111
13757: PUSH
13758: LD_INT 112
13760: PUSH
13761: LD_INT 113
13763: PUSH
13764: LD_INT 114
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: ST_TO_ADDR
13787: GO 14162
13789: LD_INT 18
13791: DOUBLE
13792: EQUAL
13793: IFTRUE 13797
13795: GO 13933
13797: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
13798: LD_ADDR_VAR 0 1
13802: PUSH
13803: LD_INT 2
13805: PUSH
13806: LD_INT 4
13808: PUSH
13809: LD_INT 5
13811: PUSH
13812: LD_INT 7
13814: PUSH
13815: LD_INT 11
13817: PUSH
13818: LD_INT 12
13820: PUSH
13821: LD_INT 15
13823: PUSH
13824: LD_INT 16
13826: PUSH
13827: LD_INT 20
13829: PUSH
13830: LD_INT 21
13832: PUSH
13833: LD_INT 22
13835: PUSH
13836: LD_INT 23
13838: PUSH
13839: LD_INT 25
13841: PUSH
13842: LD_INT 26
13844: PUSH
13845: LD_INT 30
13847: PUSH
13848: LD_INT 31
13850: PUSH
13851: LD_INT 32
13853: PUSH
13854: LD_INT 33
13856: PUSH
13857: LD_INT 34
13859: PUSH
13860: LD_INT 35
13862: PUSH
13863: LD_INT 36
13865: PUSH
13866: EMPTY
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: PUSH
13889: LD_INT 101
13891: PUSH
13892: LD_INT 102
13894: PUSH
13895: LD_INT 103
13897: PUSH
13898: LD_INT 106
13900: PUSH
13901: LD_INT 108
13903: PUSH
13904: LD_INT 112
13906: PUSH
13907: LD_INT 113
13909: PUSH
13910: LD_INT 114
13912: PUSH
13913: LD_INT 115
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: ST_TO_ADDR
13931: GO 14162
13933: LD_INT 19
13935: DOUBLE
13936: EQUAL
13937: IFTRUE 13941
13939: GO 14161
13941: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
13942: LD_ADDR_VAR 0 1
13946: PUSH
13947: LD_INT 1
13949: PUSH
13950: LD_INT 2
13952: PUSH
13953: LD_INT 3
13955: PUSH
13956: LD_INT 4
13958: PUSH
13959: LD_INT 5
13961: PUSH
13962: LD_INT 6
13964: PUSH
13965: LD_INT 7
13967: PUSH
13968: LD_INT 8
13970: PUSH
13971: LD_INT 9
13973: PUSH
13974: LD_INT 10
13976: PUSH
13977: LD_INT 11
13979: PUSH
13980: LD_INT 12
13982: PUSH
13983: LD_INT 13
13985: PUSH
13986: LD_INT 14
13988: PUSH
13989: LD_INT 15
13991: PUSH
13992: LD_INT 16
13994: PUSH
13995: LD_INT 17
13997: PUSH
13998: LD_INT 18
14000: PUSH
14001: LD_INT 19
14003: PUSH
14004: LD_INT 20
14006: PUSH
14007: LD_INT 21
14009: PUSH
14010: LD_INT 22
14012: PUSH
14013: LD_INT 23
14015: PUSH
14016: LD_INT 24
14018: PUSH
14019: LD_INT 25
14021: PUSH
14022: LD_INT 26
14024: PUSH
14025: LD_INT 27
14027: PUSH
14028: LD_INT 28
14030: PUSH
14031: LD_INT 29
14033: PUSH
14034: LD_INT 30
14036: PUSH
14037: LD_INT 31
14039: PUSH
14040: LD_INT 32
14042: PUSH
14043: LD_INT 33
14045: PUSH
14046: LD_INT 34
14048: PUSH
14049: LD_INT 35
14051: PUSH
14052: LD_INT 36
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: PUSH
14093: LD_INT 101
14095: PUSH
14096: LD_INT 102
14098: PUSH
14099: LD_INT 103
14101: PUSH
14102: LD_INT 104
14104: PUSH
14105: LD_INT 105
14107: PUSH
14108: LD_INT 106
14110: PUSH
14111: LD_INT 107
14113: PUSH
14114: LD_INT 108
14116: PUSH
14117: LD_INT 109
14119: PUSH
14120: LD_INT 110
14122: PUSH
14123: LD_INT 111
14125: PUSH
14126: LD_INT 112
14128: PUSH
14129: LD_INT 113
14131: PUSH
14132: LD_INT 114
14134: PUSH
14135: LD_INT 115
14137: PUSH
14138: EMPTY
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: ST_TO_ADDR
14159: GO 14162
14161: POP
// end else
14162: GO 14381
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
14164: LD_ADDR_VAR 0 1
14168: PUSH
14169: LD_INT 1
14171: PUSH
14172: LD_INT 2
14174: PUSH
14175: LD_INT 3
14177: PUSH
14178: LD_INT 4
14180: PUSH
14181: LD_INT 5
14183: PUSH
14184: LD_INT 6
14186: PUSH
14187: LD_INT 7
14189: PUSH
14190: LD_INT 8
14192: PUSH
14193: LD_INT 9
14195: PUSH
14196: LD_INT 10
14198: PUSH
14199: LD_INT 11
14201: PUSH
14202: LD_INT 12
14204: PUSH
14205: LD_INT 13
14207: PUSH
14208: LD_INT 14
14210: PUSH
14211: LD_INT 15
14213: PUSH
14214: LD_INT 16
14216: PUSH
14217: LD_INT 17
14219: PUSH
14220: LD_INT 18
14222: PUSH
14223: LD_INT 19
14225: PUSH
14226: LD_INT 20
14228: PUSH
14229: LD_INT 21
14231: PUSH
14232: LD_INT 22
14234: PUSH
14235: LD_INT 23
14237: PUSH
14238: LD_INT 24
14240: PUSH
14241: LD_INT 25
14243: PUSH
14244: LD_INT 26
14246: PUSH
14247: LD_INT 27
14249: PUSH
14250: LD_INT 28
14252: PUSH
14253: LD_INT 29
14255: PUSH
14256: LD_INT 30
14258: PUSH
14259: LD_INT 31
14261: PUSH
14262: LD_INT 32
14264: PUSH
14265: LD_INT 33
14267: PUSH
14268: LD_INT 34
14270: PUSH
14271: LD_INT 35
14273: PUSH
14274: LD_INT 36
14276: PUSH
14277: EMPTY
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: PUSH
14315: LD_INT 101
14317: PUSH
14318: LD_INT 102
14320: PUSH
14321: LD_INT 103
14323: PUSH
14324: LD_INT 104
14326: PUSH
14327: LD_INT 105
14329: PUSH
14330: LD_INT 106
14332: PUSH
14333: LD_INT 107
14335: PUSH
14336: LD_INT 108
14338: PUSH
14339: LD_INT 109
14341: PUSH
14342: LD_INT 110
14344: PUSH
14345: LD_INT 111
14347: PUSH
14348: LD_INT 112
14350: PUSH
14351: LD_INT 113
14353: PUSH
14354: LD_INT 114
14356: PUSH
14357: LD_INT 115
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: ST_TO_ADDR
// if result then
14381: LD_VAR 0 1
14385: IFFALSE 14674
// begin normal :=  ;
14387: LD_ADDR_VAR 0 3
14391: PUSH
14392: LD_STRING 
14394: ST_TO_ADDR
// hardcore :=  ;
14395: LD_ADDR_VAR 0 4
14399: PUSH
14400: LD_STRING 
14402: ST_TO_ADDR
// for i = 1 to normalCounter do
14403: LD_ADDR_VAR 0 5
14407: PUSH
14408: DOUBLE
14409: LD_INT 1
14411: DEC
14412: ST_TO_ADDR
14413: LD_EXP 41
14417: PUSH
14418: FOR_TO
14419: IFFALSE 14520
// begin tmp := 0 ;
14421: LD_ADDR_VAR 0 2
14425: PUSH
14426: LD_STRING 0
14428: ST_TO_ADDR
// if result [ 1 ] then
14429: LD_VAR 0 1
14433: PUSH
14434: LD_INT 1
14436: ARRAY
14437: IFFALSE 14502
// if result [ 1 ] [ 1 ] = i then
14439: LD_VAR 0 1
14443: PUSH
14444: LD_INT 1
14446: ARRAY
14447: PUSH
14448: LD_INT 1
14450: ARRAY
14451: PUSH
14452: LD_VAR 0 5
14456: EQUAL
14457: IFFALSE 14502
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14459: LD_ADDR_VAR 0 1
14463: PUSH
14464: LD_VAR 0 1
14468: PPUSH
14469: LD_INT 1
14471: PPUSH
14472: LD_VAR 0 1
14476: PUSH
14477: LD_INT 1
14479: ARRAY
14480: PPUSH
14481: LD_INT 1
14483: PPUSH
14484: CALL_OW 3
14488: PPUSH
14489: CALL_OW 1
14493: ST_TO_ADDR
// tmp := 1 ;
14494: LD_ADDR_VAR 0 2
14498: PUSH
14499: LD_STRING 1
14501: ST_TO_ADDR
// end ; normal := normal & tmp ;
14502: LD_ADDR_VAR 0 3
14506: PUSH
14507: LD_VAR 0 3
14511: PUSH
14512: LD_VAR 0 2
14516: STR
14517: ST_TO_ADDR
// end ;
14518: GO 14418
14520: POP
14521: POP
// for i = 1 to hardcoreCounter do
14522: LD_ADDR_VAR 0 5
14526: PUSH
14527: DOUBLE
14528: LD_INT 1
14530: DEC
14531: ST_TO_ADDR
14532: LD_EXP 42
14536: PUSH
14537: FOR_TO
14538: IFFALSE 14643
// begin tmp := 0 ;
14540: LD_ADDR_VAR 0 2
14544: PUSH
14545: LD_STRING 0
14547: ST_TO_ADDR
// if result [ 2 ] then
14548: LD_VAR 0 1
14552: PUSH
14553: LD_INT 2
14555: ARRAY
14556: IFFALSE 14625
// if result [ 2 ] [ 1 ] = 100 + i then
14558: LD_VAR 0 1
14562: PUSH
14563: LD_INT 2
14565: ARRAY
14566: PUSH
14567: LD_INT 1
14569: ARRAY
14570: PUSH
14571: LD_INT 100
14573: PUSH
14574: LD_VAR 0 5
14578: PLUS
14579: EQUAL
14580: IFFALSE 14625
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14582: LD_ADDR_VAR 0 1
14586: PUSH
14587: LD_VAR 0 1
14591: PPUSH
14592: LD_INT 2
14594: PPUSH
14595: LD_VAR 0 1
14599: PUSH
14600: LD_INT 2
14602: ARRAY
14603: PPUSH
14604: LD_INT 1
14606: PPUSH
14607: CALL_OW 3
14611: PPUSH
14612: CALL_OW 1
14616: ST_TO_ADDR
// tmp := 1 ;
14617: LD_ADDR_VAR 0 2
14621: PUSH
14622: LD_STRING 1
14624: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14625: LD_ADDR_VAR 0 4
14629: PUSH
14630: LD_VAR 0 4
14634: PUSH
14635: LD_VAR 0 2
14639: STR
14640: ST_TO_ADDR
// end ;
14641: GO 14537
14643: POP
14644: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
14645: LD_STRING getStreamItemsFromMission("
14647: PUSH
14648: LD_VAR 0 3
14652: STR
14653: PUSH
14654: LD_STRING ","
14656: STR
14657: PUSH
14658: LD_VAR 0 4
14662: STR
14663: PUSH
14664: LD_STRING ")
14666: STR
14667: PPUSH
14668: CALL_OW 559
// end else
14672: GO 14681
// ToLua ( getStreamItemsFromMission("","") ) ;
14674: LD_STRING getStreamItemsFromMission("","")
14676: PPUSH
14677: CALL_OW 559
// end ;
14681: LD_VAR 0 1
14685: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14686: LD_EXP 40
14690: PUSH
14691: LD_EXP 45
14695: AND
14696: IFFALSE 14820
14698: GO 14700
14700: DISABLE
14701: LD_INT 0
14703: PPUSH
14704: PPUSH
// begin enable ;
14705: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14706: LD_ADDR_VAR 0 2
14710: PUSH
14711: LD_INT 22
14713: PUSH
14714: LD_OWVAR 2
14718: PUSH
14719: EMPTY
14720: LIST
14721: LIST
14722: PUSH
14723: LD_INT 2
14725: PUSH
14726: LD_INT 34
14728: PUSH
14729: LD_INT 7
14731: PUSH
14732: EMPTY
14733: LIST
14734: LIST
14735: PUSH
14736: LD_INT 34
14738: PUSH
14739: LD_INT 45
14741: PUSH
14742: EMPTY
14743: LIST
14744: LIST
14745: PUSH
14746: LD_INT 34
14748: PUSH
14749: LD_INT 28
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: PUSH
14756: LD_INT 34
14758: PUSH
14759: LD_INT 47
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: PUSH
14766: EMPTY
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: PUSH
14773: EMPTY
14774: LIST
14775: LIST
14776: PPUSH
14777: CALL_OW 69
14781: ST_TO_ADDR
// if not tmp then
14782: LD_VAR 0 2
14786: NOT
14787: IFFALSE 14791
// exit ;
14789: GO 14820
// for i in tmp do
14791: LD_ADDR_VAR 0 1
14795: PUSH
14796: LD_VAR 0 2
14800: PUSH
14801: FOR_IN
14802: IFFALSE 14818
// begin SetLives ( i , 0 ) ;
14804: LD_VAR 0 1
14808: PPUSH
14809: LD_INT 0
14811: PPUSH
14812: CALL_OW 234
// end ;
14816: GO 14801
14818: POP
14819: POP
// end ;
14820: PPOPN 2
14822: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14823: LD_EXP 40
14827: PUSH
14828: LD_EXP 46
14832: AND
14833: IFFALSE 14917
14835: GO 14837
14837: DISABLE
14838: LD_INT 0
14840: PPUSH
14841: PPUSH
// begin enable ;
14842: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14843: LD_ADDR_VAR 0 2
14847: PUSH
14848: LD_INT 22
14850: PUSH
14851: LD_OWVAR 2
14855: PUSH
14856: EMPTY
14857: LIST
14858: LIST
14859: PUSH
14860: LD_INT 32
14862: PUSH
14863: LD_INT 3
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PUSH
14870: EMPTY
14871: LIST
14872: LIST
14873: PPUSH
14874: CALL_OW 69
14878: ST_TO_ADDR
// if not tmp then
14879: LD_VAR 0 2
14883: NOT
14884: IFFALSE 14888
// exit ;
14886: GO 14917
// for i in tmp do
14888: LD_ADDR_VAR 0 1
14892: PUSH
14893: LD_VAR 0 2
14897: PUSH
14898: FOR_IN
14899: IFFALSE 14915
// begin SetLives ( i , 0 ) ;
14901: LD_VAR 0 1
14905: PPUSH
14906: LD_INT 0
14908: PPUSH
14909: CALL_OW 234
// end ;
14913: GO 14898
14915: POP
14916: POP
// end ;
14917: PPOPN 2
14919: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14920: LD_EXP 40
14924: PUSH
14925: LD_EXP 43
14929: AND
14930: IFFALSE 15023
14932: GO 14934
14934: DISABLE
14935: LD_INT 0
14937: PPUSH
// begin enable ;
14938: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14939: LD_ADDR_VAR 0 1
14943: PUSH
14944: LD_INT 22
14946: PUSH
14947: LD_OWVAR 2
14951: PUSH
14952: EMPTY
14953: LIST
14954: LIST
14955: PUSH
14956: LD_INT 2
14958: PUSH
14959: LD_INT 25
14961: PUSH
14962: LD_INT 5
14964: PUSH
14965: EMPTY
14966: LIST
14967: LIST
14968: PUSH
14969: LD_INT 25
14971: PUSH
14972: LD_INT 9
14974: PUSH
14975: EMPTY
14976: LIST
14977: LIST
14978: PUSH
14979: LD_INT 25
14981: PUSH
14982: LD_INT 8
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: PUSH
14989: EMPTY
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: PUSH
14995: EMPTY
14996: LIST
14997: LIST
14998: PPUSH
14999: CALL_OW 69
15003: PUSH
15004: FOR_IN
15005: IFFALSE 15021
// begin SetClass ( i , 1 ) ;
15007: LD_VAR 0 1
15011: PPUSH
15012: LD_INT 1
15014: PPUSH
15015: CALL_OW 336
// end ;
15019: GO 15004
15021: POP
15022: POP
// end ;
15023: PPOPN 1
15025: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15026: LD_EXP 40
15030: PUSH
15031: LD_EXP 44
15035: AND
15036: PUSH
15037: LD_OWVAR 65
15041: PUSH
15042: LD_INT 7
15044: LESS
15045: AND
15046: IFFALSE 15060
15048: GO 15050
15050: DISABLE
// begin enable ;
15051: ENABLE
// game_speed := 7 ;
15052: LD_ADDR_OWVAR 65
15056: PUSH
15057: LD_INT 7
15059: ST_TO_ADDR
// end ;
15060: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15061: LD_EXP 40
15065: PUSH
15066: LD_EXP 47
15070: AND
15071: IFFALSE 15273
15073: GO 15075
15075: DISABLE
15076: LD_INT 0
15078: PPUSH
15079: PPUSH
15080: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15081: LD_ADDR_VAR 0 3
15085: PUSH
15086: LD_INT 81
15088: PUSH
15089: LD_OWVAR 2
15093: PUSH
15094: EMPTY
15095: LIST
15096: LIST
15097: PUSH
15098: LD_INT 21
15100: PUSH
15101: LD_INT 1
15103: PUSH
15104: EMPTY
15105: LIST
15106: LIST
15107: PUSH
15108: EMPTY
15109: LIST
15110: LIST
15111: PPUSH
15112: CALL_OW 69
15116: ST_TO_ADDR
// if not tmp then
15117: LD_VAR 0 3
15121: NOT
15122: IFFALSE 15126
// exit ;
15124: GO 15273
// if tmp > 5 then
15126: LD_VAR 0 3
15130: PUSH
15131: LD_INT 5
15133: GREATER
15134: IFFALSE 15146
// k := 5 else
15136: LD_ADDR_VAR 0 2
15140: PUSH
15141: LD_INT 5
15143: ST_TO_ADDR
15144: GO 15156
// k := tmp ;
15146: LD_ADDR_VAR 0 2
15150: PUSH
15151: LD_VAR 0 3
15155: ST_TO_ADDR
// for i := 1 to k do
15156: LD_ADDR_VAR 0 1
15160: PUSH
15161: DOUBLE
15162: LD_INT 1
15164: DEC
15165: ST_TO_ADDR
15166: LD_VAR 0 2
15170: PUSH
15171: FOR_TO
15172: IFFALSE 15271
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15174: LD_VAR 0 3
15178: PUSH
15179: LD_VAR 0 1
15183: ARRAY
15184: PPUSH
15185: LD_VAR 0 1
15189: PUSH
15190: LD_INT 4
15192: MOD
15193: PUSH
15194: LD_INT 1
15196: PLUS
15197: PPUSH
15198: CALL_OW 259
15202: PUSH
15203: LD_INT 10
15205: LESS
15206: IFFALSE 15269
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15208: LD_VAR 0 3
15212: PUSH
15213: LD_VAR 0 1
15217: ARRAY
15218: PPUSH
15219: LD_VAR 0 1
15223: PUSH
15224: LD_INT 4
15226: MOD
15227: PUSH
15228: LD_INT 1
15230: PLUS
15231: PPUSH
15232: LD_VAR 0 3
15236: PUSH
15237: LD_VAR 0 1
15241: ARRAY
15242: PPUSH
15243: LD_VAR 0 1
15247: PUSH
15248: LD_INT 4
15250: MOD
15251: PUSH
15252: LD_INT 1
15254: PLUS
15255: PPUSH
15256: CALL_OW 259
15260: PUSH
15261: LD_INT 1
15263: PLUS
15264: PPUSH
15265: CALL_OW 237
15269: GO 15171
15271: POP
15272: POP
// end ;
15273: PPOPN 3
15275: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15276: LD_EXP 40
15280: PUSH
15281: LD_EXP 48
15285: AND
15286: IFFALSE 15306
15288: GO 15290
15290: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15291: LD_INT 4
15293: PPUSH
15294: LD_OWVAR 2
15298: PPUSH
15299: LD_INT 0
15301: PPUSH
15302: CALL_OW 324
15306: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15307: LD_EXP 40
15311: PUSH
15312: LD_EXP 77
15316: AND
15317: IFFALSE 15337
15319: GO 15321
15321: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15322: LD_INT 19
15324: PPUSH
15325: LD_OWVAR 2
15329: PPUSH
15330: LD_INT 0
15332: PPUSH
15333: CALL_OW 324
15337: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15338: LD_EXP 40
15342: PUSH
15343: LD_EXP 49
15347: AND
15348: IFFALSE 15450
15350: GO 15352
15352: DISABLE
15353: LD_INT 0
15355: PPUSH
15356: PPUSH
// begin enable ;
15357: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15358: LD_ADDR_VAR 0 2
15362: PUSH
15363: LD_INT 22
15365: PUSH
15366: LD_OWVAR 2
15370: PUSH
15371: EMPTY
15372: LIST
15373: LIST
15374: PUSH
15375: LD_INT 2
15377: PUSH
15378: LD_INT 34
15380: PUSH
15381: LD_INT 11
15383: PUSH
15384: EMPTY
15385: LIST
15386: LIST
15387: PUSH
15388: LD_INT 34
15390: PUSH
15391: LD_INT 30
15393: PUSH
15394: EMPTY
15395: LIST
15396: LIST
15397: PUSH
15398: EMPTY
15399: LIST
15400: LIST
15401: LIST
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: PPUSH
15407: CALL_OW 69
15411: ST_TO_ADDR
// if not tmp then
15412: LD_VAR 0 2
15416: NOT
15417: IFFALSE 15421
// exit ;
15419: GO 15450
// for i in tmp do
15421: LD_ADDR_VAR 0 1
15425: PUSH
15426: LD_VAR 0 2
15430: PUSH
15431: FOR_IN
15432: IFFALSE 15448
// begin SetLives ( i , 0 ) ;
15434: LD_VAR 0 1
15438: PPUSH
15439: LD_INT 0
15441: PPUSH
15442: CALL_OW 234
// end ;
15446: GO 15431
15448: POP
15449: POP
// end ;
15450: PPOPN 2
15452: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15453: LD_EXP 40
15457: PUSH
15458: LD_EXP 50
15462: AND
15463: IFFALSE 15483
15465: GO 15467
15467: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15468: LD_INT 32
15470: PPUSH
15471: LD_OWVAR 2
15475: PPUSH
15476: LD_INT 0
15478: PPUSH
15479: CALL_OW 324
15483: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15484: LD_EXP 40
15488: PUSH
15489: LD_EXP 51
15493: AND
15494: IFFALSE 15675
15496: GO 15498
15498: DISABLE
15499: LD_INT 0
15501: PPUSH
15502: PPUSH
15503: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15504: LD_ADDR_VAR 0 2
15508: PUSH
15509: LD_INT 22
15511: PUSH
15512: LD_OWVAR 2
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PUSH
15521: LD_INT 33
15523: PUSH
15524: LD_INT 3
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: PPUSH
15535: CALL_OW 69
15539: ST_TO_ADDR
// if not tmp then
15540: LD_VAR 0 2
15544: NOT
15545: IFFALSE 15549
// exit ;
15547: GO 15675
// side := 0 ;
15549: LD_ADDR_VAR 0 3
15553: PUSH
15554: LD_INT 0
15556: ST_TO_ADDR
// for i := 1 to 8 do
15557: LD_ADDR_VAR 0 1
15561: PUSH
15562: DOUBLE
15563: LD_INT 1
15565: DEC
15566: ST_TO_ADDR
15567: LD_INT 8
15569: PUSH
15570: FOR_TO
15571: IFFALSE 15619
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15573: LD_OWVAR 2
15577: PUSH
15578: LD_VAR 0 1
15582: NONEQUAL
15583: PUSH
15584: LD_OWVAR 2
15588: PPUSH
15589: LD_VAR 0 1
15593: PPUSH
15594: CALL_OW 81
15598: PUSH
15599: LD_INT 2
15601: EQUAL
15602: AND
15603: IFFALSE 15617
// begin side := i ;
15605: LD_ADDR_VAR 0 3
15609: PUSH
15610: LD_VAR 0 1
15614: ST_TO_ADDR
// break ;
15615: GO 15619
// end ;
15617: GO 15570
15619: POP
15620: POP
// if not side then
15621: LD_VAR 0 3
15625: NOT
15626: IFFALSE 15630
// exit ;
15628: GO 15675
// for i := 1 to tmp do
15630: LD_ADDR_VAR 0 1
15634: PUSH
15635: DOUBLE
15636: LD_INT 1
15638: DEC
15639: ST_TO_ADDR
15640: LD_VAR 0 2
15644: PUSH
15645: FOR_TO
15646: IFFALSE 15673
// if Prob ( 60 ) then
15648: LD_INT 60
15650: PPUSH
15651: CALL_OW 13
15655: IFFALSE 15671
// SetSide ( i , side ) ;
15657: LD_VAR 0 1
15661: PPUSH
15662: LD_VAR 0 3
15666: PPUSH
15667: CALL_OW 235
15671: GO 15645
15673: POP
15674: POP
// end ;
15675: PPOPN 3
15677: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15678: LD_EXP 40
15682: PUSH
15683: LD_EXP 53
15687: AND
15688: IFFALSE 15807
15690: GO 15692
15692: DISABLE
15693: LD_INT 0
15695: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15696: LD_ADDR_VAR 0 1
15700: PUSH
15701: LD_INT 22
15703: PUSH
15704: LD_OWVAR 2
15708: PUSH
15709: EMPTY
15710: LIST
15711: LIST
15712: PUSH
15713: LD_INT 21
15715: PUSH
15716: LD_INT 1
15718: PUSH
15719: EMPTY
15720: LIST
15721: LIST
15722: PUSH
15723: LD_INT 3
15725: PUSH
15726: LD_INT 23
15728: PUSH
15729: LD_INT 0
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: LIST
15744: PPUSH
15745: CALL_OW 69
15749: PUSH
15750: FOR_IN
15751: IFFALSE 15805
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15753: LD_VAR 0 1
15757: PPUSH
15758: CALL_OW 257
15762: PUSH
15763: LD_INT 1
15765: PUSH
15766: LD_INT 2
15768: PUSH
15769: LD_INT 3
15771: PUSH
15772: LD_INT 4
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: IN
15781: IFFALSE 15803
// SetClass ( un , rand ( 1 , 4 ) ) ;
15783: LD_VAR 0 1
15787: PPUSH
15788: LD_INT 1
15790: PPUSH
15791: LD_INT 4
15793: PPUSH
15794: CALL_OW 12
15798: PPUSH
15799: CALL_OW 336
15803: GO 15750
15805: POP
15806: POP
// end ;
15807: PPOPN 1
15809: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15810: LD_EXP 40
15814: PUSH
15815: LD_EXP 52
15819: AND
15820: IFFALSE 15899
15822: GO 15824
15824: DISABLE
15825: LD_INT 0
15827: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15828: LD_ADDR_VAR 0 1
15832: PUSH
15833: LD_INT 22
15835: PUSH
15836: LD_OWVAR 2
15840: PUSH
15841: EMPTY
15842: LIST
15843: LIST
15844: PUSH
15845: LD_INT 21
15847: PUSH
15848: LD_INT 3
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: PUSH
15855: EMPTY
15856: LIST
15857: LIST
15858: PPUSH
15859: CALL_OW 69
15863: ST_TO_ADDR
// if not tmp then
15864: LD_VAR 0 1
15868: NOT
15869: IFFALSE 15873
// exit ;
15871: GO 15899
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15873: LD_VAR 0 1
15877: PUSH
15878: LD_INT 1
15880: PPUSH
15881: LD_VAR 0 1
15885: PPUSH
15886: CALL_OW 12
15890: ARRAY
15891: PPUSH
15892: LD_INT 100
15894: PPUSH
15895: CALL_OW 234
// end ;
15899: PPOPN 1
15901: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15902: LD_EXP 40
15906: PUSH
15907: LD_EXP 54
15911: AND
15912: IFFALSE 16010
15914: GO 15916
15916: DISABLE
15917: LD_INT 0
15919: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15920: LD_ADDR_VAR 0 1
15924: PUSH
15925: LD_INT 22
15927: PUSH
15928: LD_OWVAR 2
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: PUSH
15937: LD_INT 21
15939: PUSH
15940: LD_INT 1
15942: PUSH
15943: EMPTY
15944: LIST
15945: LIST
15946: PUSH
15947: EMPTY
15948: LIST
15949: LIST
15950: PPUSH
15951: CALL_OW 69
15955: ST_TO_ADDR
// if not tmp then
15956: LD_VAR 0 1
15960: NOT
15961: IFFALSE 15965
// exit ;
15963: GO 16010
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15965: LD_VAR 0 1
15969: PUSH
15970: LD_INT 1
15972: PPUSH
15973: LD_VAR 0 1
15977: PPUSH
15978: CALL_OW 12
15982: ARRAY
15983: PPUSH
15984: LD_INT 1
15986: PPUSH
15987: LD_INT 4
15989: PPUSH
15990: CALL_OW 12
15994: PPUSH
15995: LD_INT 3000
15997: PPUSH
15998: LD_INT 9000
16000: PPUSH
16001: CALL_OW 12
16005: PPUSH
16006: CALL_OW 492
// end ;
16010: PPOPN 1
16012: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16013: LD_EXP 40
16017: PUSH
16018: LD_EXP 55
16022: AND
16023: IFFALSE 16043
16025: GO 16027
16027: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16028: LD_INT 1
16030: PPUSH
16031: LD_OWVAR 2
16035: PPUSH
16036: LD_INT 0
16038: PPUSH
16039: CALL_OW 324
16043: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16044: LD_EXP 40
16048: PUSH
16049: LD_EXP 56
16053: AND
16054: IFFALSE 16137
16056: GO 16058
16058: DISABLE
16059: LD_INT 0
16061: PPUSH
16062: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16063: LD_ADDR_VAR 0 2
16067: PUSH
16068: LD_INT 22
16070: PUSH
16071: LD_OWVAR 2
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: PUSH
16080: LD_INT 21
16082: PUSH
16083: LD_INT 3
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: PUSH
16090: EMPTY
16091: LIST
16092: LIST
16093: PPUSH
16094: CALL_OW 69
16098: ST_TO_ADDR
// if not tmp then
16099: LD_VAR 0 2
16103: NOT
16104: IFFALSE 16108
// exit ;
16106: GO 16137
// for i in tmp do
16108: LD_ADDR_VAR 0 1
16112: PUSH
16113: LD_VAR 0 2
16117: PUSH
16118: FOR_IN
16119: IFFALSE 16135
// SetBLevel ( i , 10 ) ;
16121: LD_VAR 0 1
16125: PPUSH
16126: LD_INT 10
16128: PPUSH
16129: CALL_OW 241
16133: GO 16118
16135: POP
16136: POP
// end ;
16137: PPOPN 2
16139: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16140: LD_EXP 40
16144: PUSH
16145: LD_EXP 57
16149: AND
16150: IFFALSE 16261
16152: GO 16154
16154: DISABLE
16155: LD_INT 0
16157: PPUSH
16158: PPUSH
16159: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16160: LD_ADDR_VAR 0 3
16164: PUSH
16165: LD_INT 22
16167: PUSH
16168: LD_OWVAR 2
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PUSH
16177: LD_INT 25
16179: PUSH
16180: LD_INT 1
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: PPUSH
16191: CALL_OW 69
16195: ST_TO_ADDR
// if not tmp then
16196: LD_VAR 0 3
16200: NOT
16201: IFFALSE 16205
// exit ;
16203: GO 16261
// un := tmp [ rand ( 1 , tmp ) ] ;
16205: LD_ADDR_VAR 0 2
16209: PUSH
16210: LD_VAR 0 3
16214: PUSH
16215: LD_INT 1
16217: PPUSH
16218: LD_VAR 0 3
16222: PPUSH
16223: CALL_OW 12
16227: ARRAY
16228: ST_TO_ADDR
// if Crawls ( un ) then
16229: LD_VAR 0 2
16233: PPUSH
16234: CALL_OW 318
16238: IFFALSE 16249
// ComWalk ( un ) ;
16240: LD_VAR 0 2
16244: PPUSH
16245: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16249: LD_VAR 0 2
16253: PPUSH
16254: LD_INT 5
16256: PPUSH
16257: CALL_OW 336
// end ;
16261: PPOPN 3
16263: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
16264: LD_EXP 40
16268: PUSH
16269: LD_EXP 58
16273: AND
16274: PUSH
16275: LD_OWVAR 67
16279: PUSH
16280: LD_INT 3
16282: LESS
16283: AND
16284: IFFALSE 16303
16286: GO 16288
16288: DISABLE
// Difficulty := Difficulty + 1 ;
16289: LD_ADDR_OWVAR 67
16293: PUSH
16294: LD_OWVAR 67
16298: PUSH
16299: LD_INT 1
16301: PLUS
16302: ST_TO_ADDR
16303: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16304: LD_EXP 40
16308: PUSH
16309: LD_EXP 59
16313: AND
16314: IFFALSE 16417
16316: GO 16318
16318: DISABLE
16319: LD_INT 0
16321: PPUSH
// begin for i := 1 to 5 do
16322: LD_ADDR_VAR 0 1
16326: PUSH
16327: DOUBLE
16328: LD_INT 1
16330: DEC
16331: ST_TO_ADDR
16332: LD_INT 5
16334: PUSH
16335: FOR_TO
16336: IFFALSE 16415
// begin uc_nation := nation_nature ;
16338: LD_ADDR_OWVAR 21
16342: PUSH
16343: LD_INT 0
16345: ST_TO_ADDR
// uc_side := 0 ;
16346: LD_ADDR_OWVAR 20
16350: PUSH
16351: LD_INT 0
16353: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16354: LD_ADDR_OWVAR 29
16358: PUSH
16359: LD_INT 12
16361: PUSH
16362: LD_INT 12
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: ST_TO_ADDR
// hc_agressivity := 20 ;
16369: LD_ADDR_OWVAR 35
16373: PUSH
16374: LD_INT 20
16376: ST_TO_ADDR
// hc_class := class_tiger ;
16377: LD_ADDR_OWVAR 28
16381: PUSH
16382: LD_INT 14
16384: ST_TO_ADDR
// hc_gallery :=  ;
16385: LD_ADDR_OWVAR 33
16389: PUSH
16390: LD_STRING 
16392: ST_TO_ADDR
// hc_name :=  ;
16393: LD_ADDR_OWVAR 26
16397: PUSH
16398: LD_STRING 
16400: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16401: CALL_OW 44
16405: PPUSH
16406: LD_INT 0
16408: PPUSH
16409: CALL_OW 51
// end ;
16413: GO 16335
16415: POP
16416: POP
// end ;
16417: PPOPN 1
16419: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16420: LD_EXP 40
16424: PUSH
16425: LD_EXP 60
16429: AND
16430: IFFALSE 16439
16432: GO 16434
16434: DISABLE
// StreamSibBomb ;
16435: CALL 16440 0 0
16439: END
// export function StreamSibBomb ; var i , x , y ; begin
16440: LD_INT 0
16442: PPUSH
16443: PPUSH
16444: PPUSH
16445: PPUSH
// result := false ;
16446: LD_ADDR_VAR 0 1
16450: PUSH
16451: LD_INT 0
16453: ST_TO_ADDR
// for i := 1 to 16 do
16454: LD_ADDR_VAR 0 2
16458: PUSH
16459: DOUBLE
16460: LD_INT 1
16462: DEC
16463: ST_TO_ADDR
16464: LD_INT 16
16466: PUSH
16467: FOR_TO
16468: IFFALSE 16667
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16470: LD_ADDR_VAR 0 3
16474: PUSH
16475: LD_INT 10
16477: PUSH
16478: LD_INT 20
16480: PUSH
16481: LD_INT 30
16483: PUSH
16484: LD_INT 40
16486: PUSH
16487: LD_INT 50
16489: PUSH
16490: LD_INT 60
16492: PUSH
16493: LD_INT 70
16495: PUSH
16496: LD_INT 80
16498: PUSH
16499: LD_INT 90
16501: PUSH
16502: LD_INT 100
16504: PUSH
16505: LD_INT 110
16507: PUSH
16508: LD_INT 120
16510: PUSH
16511: LD_INT 130
16513: PUSH
16514: LD_INT 140
16516: PUSH
16517: LD_INT 150
16519: PUSH
16520: EMPTY
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: PUSH
16537: LD_INT 1
16539: PPUSH
16540: LD_INT 15
16542: PPUSH
16543: CALL_OW 12
16547: ARRAY
16548: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16549: LD_ADDR_VAR 0 4
16553: PUSH
16554: LD_INT 10
16556: PUSH
16557: LD_INT 20
16559: PUSH
16560: LD_INT 30
16562: PUSH
16563: LD_INT 40
16565: PUSH
16566: LD_INT 50
16568: PUSH
16569: LD_INT 60
16571: PUSH
16572: LD_INT 70
16574: PUSH
16575: LD_INT 80
16577: PUSH
16578: LD_INT 90
16580: PUSH
16581: LD_INT 100
16583: PUSH
16584: LD_INT 110
16586: PUSH
16587: LD_INT 120
16589: PUSH
16590: LD_INT 130
16592: PUSH
16593: LD_INT 140
16595: PUSH
16596: LD_INT 150
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: PUSH
16616: LD_INT 1
16618: PPUSH
16619: LD_INT 15
16621: PPUSH
16622: CALL_OW 12
16626: ARRAY
16627: ST_TO_ADDR
// if ValidHex ( x , y ) then
16628: LD_VAR 0 3
16632: PPUSH
16633: LD_VAR 0 4
16637: PPUSH
16638: CALL_OW 488
16642: IFFALSE 16665
// begin result := [ x , y ] ;
16644: LD_ADDR_VAR 0 1
16648: PUSH
16649: LD_VAR 0 3
16653: PUSH
16654: LD_VAR 0 4
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: ST_TO_ADDR
// break ;
16663: GO 16667
// end ; end ;
16665: GO 16467
16667: POP
16668: POP
// if result then
16669: LD_VAR 0 1
16673: IFFALSE 16733
// begin ToLua ( playSibBomb() ) ;
16675: LD_STRING playSibBomb()
16677: PPUSH
16678: CALL_OW 559
// wait ( 0 0$14 ) ;
16682: LD_INT 490
16684: PPUSH
16685: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16689: LD_VAR 0 1
16693: PUSH
16694: LD_INT 1
16696: ARRAY
16697: PPUSH
16698: LD_VAR 0 1
16702: PUSH
16703: LD_INT 2
16705: ARRAY
16706: PPUSH
16707: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16711: LD_VAR 0 1
16715: PUSH
16716: LD_INT 1
16718: ARRAY
16719: PPUSH
16720: LD_VAR 0 1
16724: PUSH
16725: LD_INT 2
16727: ARRAY
16728: PPUSH
16729: CALL_OW 429
// end ; end ;
16733: LD_VAR 0 1
16737: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16738: LD_EXP 40
16742: PUSH
16743: LD_EXP 62
16747: AND
16748: IFFALSE 16760
16750: GO 16752
16752: DISABLE
// YouLost (  ) ;
16753: LD_STRING 
16755: PPUSH
16756: CALL_OW 104
16760: END
// every 0 0$1 trigger StreamModeActive and sFog do
16761: LD_EXP 40
16765: PUSH
16766: LD_EXP 61
16770: AND
16771: IFFALSE 16785
16773: GO 16775
16775: DISABLE
// FogOff ( your_side ) ;
16776: LD_OWVAR 2
16780: PPUSH
16781: CALL_OW 344
16785: END
// every 0 0$1 trigger StreamModeActive and sSun do
16786: LD_EXP 40
16790: PUSH
16791: LD_EXP 63
16795: AND
16796: IFFALSE 16824
16798: GO 16800
16800: DISABLE
// begin solar_recharge_percent := 0 ;
16801: LD_ADDR_OWVAR 79
16805: PUSH
16806: LD_INT 0
16808: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16809: LD_INT 10500
16811: PPUSH
16812: CALL_OW 67
// solar_recharge_percent := 100 ;
16816: LD_ADDR_OWVAR 79
16820: PUSH
16821: LD_INT 100
16823: ST_TO_ADDR
// end ;
16824: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16825: LD_EXP 40
16829: PUSH
16830: LD_EXP 64
16834: AND
16835: IFFALSE 17074
16837: GO 16839
16839: DISABLE
16840: LD_INT 0
16842: PPUSH
16843: PPUSH
16844: PPUSH
// begin tmp := [ ] ;
16845: LD_ADDR_VAR 0 3
16849: PUSH
16850: EMPTY
16851: ST_TO_ADDR
// for i := 1 to 6 do
16852: LD_ADDR_VAR 0 1
16856: PUSH
16857: DOUBLE
16858: LD_INT 1
16860: DEC
16861: ST_TO_ADDR
16862: LD_INT 6
16864: PUSH
16865: FOR_TO
16866: IFFALSE 16971
// begin uc_nation := nation_nature ;
16868: LD_ADDR_OWVAR 21
16872: PUSH
16873: LD_INT 0
16875: ST_TO_ADDR
// uc_side := 0 ;
16876: LD_ADDR_OWVAR 20
16880: PUSH
16881: LD_INT 0
16883: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16884: LD_ADDR_OWVAR 29
16888: PUSH
16889: LD_INT 12
16891: PUSH
16892: LD_INT 12
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: ST_TO_ADDR
// hc_agressivity := 20 ;
16899: LD_ADDR_OWVAR 35
16903: PUSH
16904: LD_INT 20
16906: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16907: LD_ADDR_OWVAR 28
16911: PUSH
16912: LD_INT 17
16914: ST_TO_ADDR
// hc_gallery :=  ;
16915: LD_ADDR_OWVAR 33
16919: PUSH
16920: LD_STRING 
16922: ST_TO_ADDR
// hc_name :=  ;
16923: LD_ADDR_OWVAR 26
16927: PUSH
16928: LD_STRING 
16930: ST_TO_ADDR
// un := CreateHuman ;
16931: LD_ADDR_VAR 0 2
16935: PUSH
16936: CALL_OW 44
16940: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16941: LD_VAR 0 2
16945: PPUSH
16946: LD_INT 1
16948: PPUSH
16949: CALL_OW 51
// tmp := tmp ^ un ;
16953: LD_ADDR_VAR 0 3
16957: PUSH
16958: LD_VAR 0 3
16962: PUSH
16963: LD_VAR 0 2
16967: ADD
16968: ST_TO_ADDR
// end ;
16969: GO 16865
16971: POP
16972: POP
// repeat wait ( 0 0$1 ) ;
16973: LD_INT 35
16975: PPUSH
16976: CALL_OW 67
// for un in tmp do
16980: LD_ADDR_VAR 0 2
16984: PUSH
16985: LD_VAR 0 3
16989: PUSH
16990: FOR_IN
16991: IFFALSE 17065
// begin if IsDead ( un ) then
16993: LD_VAR 0 2
16997: PPUSH
16998: CALL_OW 301
17002: IFFALSE 17022
// begin tmp := tmp diff un ;
17004: LD_ADDR_VAR 0 3
17008: PUSH
17009: LD_VAR 0 3
17013: PUSH
17014: LD_VAR 0 2
17018: DIFF
17019: ST_TO_ADDR
// continue ;
17020: GO 16990
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17022: LD_VAR 0 2
17026: PPUSH
17027: LD_INT 3
17029: PUSH
17030: LD_INT 22
17032: PUSH
17033: LD_INT 0
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: PPUSH
17044: CALL_OW 69
17048: PPUSH
17049: LD_VAR 0 2
17053: PPUSH
17054: CALL_OW 74
17058: PPUSH
17059: CALL_OW 115
// end ;
17063: GO 16990
17065: POP
17066: POP
// until not tmp ;
17067: LD_VAR 0 3
17071: NOT
17072: IFFALSE 16973
// end ;
17074: PPOPN 3
17076: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17077: LD_EXP 40
17081: PUSH
17082: LD_EXP 65
17086: AND
17087: IFFALSE 17141
17089: GO 17091
17091: DISABLE
// begin ToLua ( displayTroll(); ) ;
17092: LD_STRING displayTroll();
17094: PPUSH
17095: CALL_OW 559
// wait ( 3 3$00 ) ;
17099: LD_INT 6300
17101: PPUSH
17102: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17106: LD_STRING hideTroll();
17108: PPUSH
17109: CALL_OW 559
// wait ( 1 1$00 ) ;
17113: LD_INT 2100
17115: PPUSH
17116: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17120: LD_STRING displayTroll();
17122: PPUSH
17123: CALL_OW 559
// wait ( 1 1$00 ) ;
17127: LD_INT 2100
17129: PPUSH
17130: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17134: LD_STRING hideTroll();
17136: PPUSH
17137: CALL_OW 559
// end ;
17141: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17142: LD_EXP 40
17146: PUSH
17147: LD_EXP 66
17151: AND
17152: IFFALSE 17215
17154: GO 17156
17156: DISABLE
17157: LD_INT 0
17159: PPUSH
// begin p := 0 ;
17160: LD_ADDR_VAR 0 1
17164: PUSH
17165: LD_INT 0
17167: ST_TO_ADDR
// repeat game_speed := 1 ;
17168: LD_ADDR_OWVAR 65
17172: PUSH
17173: LD_INT 1
17175: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17176: LD_INT 35
17178: PPUSH
17179: CALL_OW 67
// p := p + 1 ;
17183: LD_ADDR_VAR 0 1
17187: PUSH
17188: LD_VAR 0 1
17192: PUSH
17193: LD_INT 1
17195: PLUS
17196: ST_TO_ADDR
// until p >= 60 ;
17197: LD_VAR 0 1
17201: PUSH
17202: LD_INT 60
17204: GREATEREQUAL
17205: IFFALSE 17168
// game_speed := 4 ;
17207: LD_ADDR_OWVAR 65
17211: PUSH
17212: LD_INT 4
17214: ST_TO_ADDR
// end ;
17215: PPOPN 1
17217: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17218: LD_EXP 40
17222: PUSH
17223: LD_EXP 67
17227: AND
17228: IFFALSE 17374
17230: GO 17232
17232: DISABLE
17233: LD_INT 0
17235: PPUSH
17236: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17237: LD_ADDR_VAR 0 1
17241: PUSH
17242: LD_INT 22
17244: PUSH
17245: LD_OWVAR 2
17249: PUSH
17250: EMPTY
17251: LIST
17252: LIST
17253: PUSH
17254: LD_INT 2
17256: PUSH
17257: LD_INT 30
17259: PUSH
17260: LD_INT 0
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PUSH
17267: LD_INT 30
17269: PUSH
17270: LD_INT 1
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: LIST
17281: PUSH
17282: EMPTY
17283: LIST
17284: LIST
17285: PPUSH
17286: CALL_OW 69
17290: ST_TO_ADDR
// if not depot then
17291: LD_VAR 0 1
17295: NOT
17296: IFFALSE 17300
// exit ;
17298: GO 17374
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17300: LD_ADDR_VAR 0 2
17304: PUSH
17305: LD_VAR 0 1
17309: PUSH
17310: LD_INT 1
17312: PPUSH
17313: LD_VAR 0 1
17317: PPUSH
17318: CALL_OW 12
17322: ARRAY
17323: PPUSH
17324: CALL_OW 274
17328: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17329: LD_VAR 0 2
17333: PPUSH
17334: LD_INT 1
17336: PPUSH
17337: LD_INT 0
17339: PPUSH
17340: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17344: LD_VAR 0 2
17348: PPUSH
17349: LD_INT 2
17351: PPUSH
17352: LD_INT 0
17354: PPUSH
17355: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17359: LD_VAR 0 2
17363: PPUSH
17364: LD_INT 3
17366: PPUSH
17367: LD_INT 0
17369: PPUSH
17370: CALL_OW 277
// end ;
17374: PPOPN 2
17376: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17377: LD_EXP 40
17381: PUSH
17382: LD_EXP 68
17386: AND
17387: IFFALSE 17484
17389: GO 17391
17391: DISABLE
17392: LD_INT 0
17394: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17395: LD_ADDR_VAR 0 1
17399: PUSH
17400: LD_INT 22
17402: PUSH
17403: LD_OWVAR 2
17407: PUSH
17408: EMPTY
17409: LIST
17410: LIST
17411: PUSH
17412: LD_INT 21
17414: PUSH
17415: LD_INT 1
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: PUSH
17422: LD_INT 3
17424: PUSH
17425: LD_INT 23
17427: PUSH
17428: LD_INT 0
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: LIST
17443: PPUSH
17444: CALL_OW 69
17448: ST_TO_ADDR
// if not tmp then
17449: LD_VAR 0 1
17453: NOT
17454: IFFALSE 17458
// exit ;
17456: GO 17484
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17458: LD_VAR 0 1
17462: PUSH
17463: LD_INT 1
17465: PPUSH
17466: LD_VAR 0 1
17470: PPUSH
17471: CALL_OW 12
17475: ARRAY
17476: PPUSH
17477: LD_INT 200
17479: PPUSH
17480: CALL_OW 234
// end ;
17484: PPOPN 1
17486: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17487: LD_EXP 40
17491: PUSH
17492: LD_EXP 69
17496: AND
17497: IFFALSE 17576
17499: GO 17501
17501: DISABLE
17502: LD_INT 0
17504: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17505: LD_ADDR_VAR 0 1
17509: PUSH
17510: LD_INT 22
17512: PUSH
17513: LD_OWVAR 2
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: PUSH
17522: LD_INT 21
17524: PUSH
17525: LD_INT 2
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: PPUSH
17536: CALL_OW 69
17540: ST_TO_ADDR
// if not tmp then
17541: LD_VAR 0 1
17545: NOT
17546: IFFALSE 17550
// exit ;
17548: GO 17576
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17550: LD_VAR 0 1
17554: PUSH
17555: LD_INT 1
17557: PPUSH
17558: LD_VAR 0 1
17562: PPUSH
17563: CALL_OW 12
17567: ARRAY
17568: PPUSH
17569: LD_INT 60
17571: PPUSH
17572: CALL_OW 234
// end ;
17576: PPOPN 1
17578: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17579: LD_EXP 40
17583: PUSH
17584: LD_EXP 70
17588: AND
17589: IFFALSE 17688
17591: GO 17593
17593: DISABLE
17594: LD_INT 0
17596: PPUSH
17597: PPUSH
// begin enable ;
17598: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17599: LD_ADDR_VAR 0 1
17603: PUSH
17604: LD_INT 22
17606: PUSH
17607: LD_OWVAR 2
17611: PUSH
17612: EMPTY
17613: LIST
17614: LIST
17615: PUSH
17616: LD_INT 61
17618: PUSH
17619: EMPTY
17620: LIST
17621: PUSH
17622: LD_INT 33
17624: PUSH
17625: LD_INT 2
17627: PUSH
17628: EMPTY
17629: LIST
17630: LIST
17631: PUSH
17632: EMPTY
17633: LIST
17634: LIST
17635: LIST
17636: PPUSH
17637: CALL_OW 69
17641: ST_TO_ADDR
// if not tmp then
17642: LD_VAR 0 1
17646: NOT
17647: IFFALSE 17651
// exit ;
17649: GO 17688
// for i in tmp do
17651: LD_ADDR_VAR 0 2
17655: PUSH
17656: LD_VAR 0 1
17660: PUSH
17661: FOR_IN
17662: IFFALSE 17686
// if IsControledBy ( i ) then
17664: LD_VAR 0 2
17668: PPUSH
17669: CALL_OW 312
17673: IFFALSE 17684
// ComUnlink ( i ) ;
17675: LD_VAR 0 2
17679: PPUSH
17680: CALL_OW 136
17684: GO 17661
17686: POP
17687: POP
// end ;
17688: PPOPN 2
17690: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17691: LD_EXP 40
17695: PUSH
17696: LD_EXP 71
17700: AND
17701: IFFALSE 17841
17703: GO 17705
17705: DISABLE
17706: LD_INT 0
17708: PPUSH
17709: PPUSH
// begin ToLua ( displayPowell(); ) ;
17710: LD_STRING displayPowell();
17712: PPUSH
17713: CALL_OW 559
// uc_side := 0 ;
17717: LD_ADDR_OWVAR 20
17721: PUSH
17722: LD_INT 0
17724: ST_TO_ADDR
// uc_nation := 2 ;
17725: LD_ADDR_OWVAR 21
17729: PUSH
17730: LD_INT 2
17732: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17733: LD_ADDR_OWVAR 37
17737: PUSH
17738: LD_INT 14
17740: ST_TO_ADDR
// vc_engine := engine_siberite ;
17741: LD_ADDR_OWVAR 39
17745: PUSH
17746: LD_INT 3
17748: ST_TO_ADDR
// vc_control := control_apeman ;
17749: LD_ADDR_OWVAR 38
17753: PUSH
17754: LD_INT 5
17756: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17757: LD_ADDR_OWVAR 40
17761: PUSH
17762: LD_INT 29
17764: ST_TO_ADDR
// un := CreateVehicle ;
17765: LD_ADDR_VAR 0 2
17769: PUSH
17770: CALL_OW 45
17774: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17775: LD_VAR 0 2
17779: PPUSH
17780: LD_INT 1
17782: PPUSH
17783: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17787: LD_INT 35
17789: PPUSH
17790: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17794: LD_VAR 0 2
17798: PPUSH
17799: LD_INT 22
17801: PUSH
17802: LD_OWVAR 2
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PPUSH
17811: CALL_OW 69
17815: PPUSH
17816: LD_VAR 0 2
17820: PPUSH
17821: CALL_OW 74
17825: PPUSH
17826: CALL_OW 115
// until IsDead ( un ) ;
17830: LD_VAR 0 2
17834: PPUSH
17835: CALL_OW 301
17839: IFFALSE 17787
// end ;
17841: PPOPN 2
17843: END
// every 0 0$1 trigger StreamModeActive and sStu do
17844: LD_EXP 40
17848: PUSH
17849: LD_EXP 79
17853: AND
17854: IFFALSE 17870
17856: GO 17858
17858: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17859: LD_STRING displayStucuk();
17861: PPUSH
17862: CALL_OW 559
// ResetFog ;
17866: CALL_OW 335
// end ;
17870: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17871: LD_EXP 40
17875: PUSH
17876: LD_EXP 72
17880: AND
17881: IFFALSE 18022
17883: GO 17885
17885: DISABLE
17886: LD_INT 0
17888: PPUSH
17889: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17890: LD_ADDR_VAR 0 2
17894: PUSH
17895: LD_INT 22
17897: PUSH
17898: LD_OWVAR 2
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: PUSH
17907: LD_INT 21
17909: PUSH
17910: LD_INT 1
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: PPUSH
17921: CALL_OW 69
17925: ST_TO_ADDR
// if not tmp then
17926: LD_VAR 0 2
17930: NOT
17931: IFFALSE 17935
// exit ;
17933: GO 18022
// un := tmp [ rand ( 1 , tmp ) ] ;
17935: LD_ADDR_VAR 0 1
17939: PUSH
17940: LD_VAR 0 2
17944: PUSH
17945: LD_INT 1
17947: PPUSH
17948: LD_VAR 0 2
17952: PPUSH
17953: CALL_OW 12
17957: ARRAY
17958: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17959: LD_VAR 0 1
17963: PPUSH
17964: LD_INT 0
17966: PPUSH
17967: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17971: LD_VAR 0 1
17975: PPUSH
17976: LD_OWVAR 3
17980: PUSH
17981: LD_VAR 0 1
17985: DIFF
17986: PPUSH
17987: LD_VAR 0 1
17991: PPUSH
17992: CALL_OW 74
17996: PPUSH
17997: CALL_OW 115
// wait ( 0 0$20 ) ;
18001: LD_INT 700
18003: PPUSH
18004: CALL_OW 67
// SetSide ( un , your_side ) ;
18008: LD_VAR 0 1
18012: PPUSH
18013: LD_OWVAR 2
18017: PPUSH
18018: CALL_OW 235
// end ;
18022: PPOPN 2
18024: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18025: LD_EXP 40
18029: PUSH
18030: LD_EXP 73
18034: AND
18035: IFFALSE 18141
18037: GO 18039
18039: DISABLE
18040: LD_INT 0
18042: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18043: LD_ADDR_VAR 0 1
18047: PUSH
18048: LD_INT 22
18050: PUSH
18051: LD_OWVAR 2
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 2
18062: PUSH
18063: LD_INT 30
18065: PUSH
18066: LD_INT 0
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 30
18075: PUSH
18076: LD_INT 1
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: LIST
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PPUSH
18092: CALL_OW 69
18096: ST_TO_ADDR
// if not depot then
18097: LD_VAR 0 1
18101: NOT
18102: IFFALSE 18106
// exit ;
18104: GO 18141
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18106: LD_VAR 0 1
18110: PUSH
18111: LD_INT 1
18113: ARRAY
18114: PPUSH
18115: CALL_OW 250
18119: PPUSH
18120: LD_VAR 0 1
18124: PUSH
18125: LD_INT 1
18127: ARRAY
18128: PPUSH
18129: CALL_OW 251
18133: PPUSH
18134: LD_INT 70
18136: PPUSH
18137: CALL_OW 495
// end ;
18141: PPOPN 1
18143: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18144: LD_EXP 40
18148: PUSH
18149: LD_EXP 74
18153: AND
18154: IFFALSE 18365
18156: GO 18158
18158: DISABLE
18159: LD_INT 0
18161: PPUSH
18162: PPUSH
18163: PPUSH
18164: PPUSH
18165: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18166: LD_ADDR_VAR 0 5
18170: PUSH
18171: LD_INT 22
18173: PUSH
18174: LD_OWVAR 2
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PUSH
18183: LD_INT 21
18185: PUSH
18186: LD_INT 1
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PPUSH
18197: CALL_OW 69
18201: ST_TO_ADDR
// if not tmp then
18202: LD_VAR 0 5
18206: NOT
18207: IFFALSE 18211
// exit ;
18209: GO 18365
// for i in tmp do
18211: LD_ADDR_VAR 0 1
18215: PUSH
18216: LD_VAR 0 5
18220: PUSH
18221: FOR_IN
18222: IFFALSE 18363
// begin d := rand ( 0 , 5 ) ;
18224: LD_ADDR_VAR 0 4
18228: PUSH
18229: LD_INT 0
18231: PPUSH
18232: LD_INT 5
18234: PPUSH
18235: CALL_OW 12
18239: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18240: LD_ADDR_VAR 0 2
18244: PUSH
18245: LD_VAR 0 1
18249: PPUSH
18250: CALL_OW 250
18254: PPUSH
18255: LD_VAR 0 4
18259: PPUSH
18260: LD_INT 3
18262: PPUSH
18263: LD_INT 12
18265: PPUSH
18266: CALL_OW 12
18270: PPUSH
18271: CALL_OW 272
18275: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18276: LD_ADDR_VAR 0 3
18280: PUSH
18281: LD_VAR 0 1
18285: PPUSH
18286: CALL_OW 251
18290: PPUSH
18291: LD_VAR 0 4
18295: PPUSH
18296: LD_INT 3
18298: PPUSH
18299: LD_INT 12
18301: PPUSH
18302: CALL_OW 12
18306: PPUSH
18307: CALL_OW 273
18311: ST_TO_ADDR
// if ValidHex ( x , y ) then
18312: LD_VAR 0 2
18316: PPUSH
18317: LD_VAR 0 3
18321: PPUSH
18322: CALL_OW 488
18326: IFFALSE 18361
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18328: LD_VAR 0 1
18332: PPUSH
18333: LD_VAR 0 2
18337: PPUSH
18338: LD_VAR 0 3
18342: PPUSH
18343: LD_INT 3
18345: PPUSH
18346: LD_INT 6
18348: PPUSH
18349: CALL_OW 12
18353: PPUSH
18354: LD_INT 1
18356: PPUSH
18357: CALL_OW 483
// end ;
18361: GO 18221
18363: POP
18364: POP
// end ;
18365: PPOPN 5
18367: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18368: LD_EXP 40
18372: PUSH
18373: LD_EXP 75
18377: AND
18378: IFFALSE 18472
18380: GO 18382
18382: DISABLE
18383: LD_INT 0
18385: PPUSH
18386: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18387: LD_ADDR_VAR 0 2
18391: PUSH
18392: LD_INT 22
18394: PUSH
18395: LD_OWVAR 2
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: PUSH
18404: LD_INT 32
18406: PUSH
18407: LD_INT 1
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: PUSH
18414: LD_INT 21
18416: PUSH
18417: LD_INT 2
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: LIST
18428: PPUSH
18429: CALL_OW 69
18433: ST_TO_ADDR
// if not tmp then
18434: LD_VAR 0 2
18438: NOT
18439: IFFALSE 18443
// exit ;
18441: GO 18472
// for i in tmp do
18443: LD_ADDR_VAR 0 1
18447: PUSH
18448: LD_VAR 0 2
18452: PUSH
18453: FOR_IN
18454: IFFALSE 18470
// SetFuel ( i , 0 ) ;
18456: LD_VAR 0 1
18460: PPUSH
18461: LD_INT 0
18463: PPUSH
18464: CALL_OW 240
18468: GO 18453
18470: POP
18471: POP
// end ;
18472: PPOPN 2
18474: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18475: LD_EXP 40
18479: PUSH
18480: LD_EXP 76
18484: AND
18485: IFFALSE 18551
18487: GO 18489
18489: DISABLE
18490: LD_INT 0
18492: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18493: LD_ADDR_VAR 0 1
18497: PUSH
18498: LD_INT 22
18500: PUSH
18501: LD_OWVAR 2
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PUSH
18510: LD_INT 30
18512: PUSH
18513: LD_INT 29
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: PPUSH
18524: CALL_OW 69
18528: ST_TO_ADDR
// if not tmp then
18529: LD_VAR 0 1
18533: NOT
18534: IFFALSE 18538
// exit ;
18536: GO 18551
// DestroyUnit ( tmp [ 1 ] ) ;
18538: LD_VAR 0 1
18542: PUSH
18543: LD_INT 1
18545: ARRAY
18546: PPUSH
18547: CALL_OW 65
// end ;
18551: PPOPN 1
18553: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18554: LD_EXP 40
18558: PUSH
18559: LD_EXP 78
18563: AND
18564: IFFALSE 18693
18566: GO 18568
18568: DISABLE
18569: LD_INT 0
18571: PPUSH
// begin uc_side := 0 ;
18572: LD_ADDR_OWVAR 20
18576: PUSH
18577: LD_INT 0
18579: ST_TO_ADDR
// uc_nation := nation_arabian ;
18580: LD_ADDR_OWVAR 21
18584: PUSH
18585: LD_INT 2
18587: ST_TO_ADDR
// hc_gallery :=  ;
18588: LD_ADDR_OWVAR 33
18592: PUSH
18593: LD_STRING 
18595: ST_TO_ADDR
// hc_name :=  ;
18596: LD_ADDR_OWVAR 26
18600: PUSH
18601: LD_STRING 
18603: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18604: LD_INT 1
18606: PPUSH
18607: LD_INT 11
18609: PPUSH
18610: LD_INT 10
18612: PPUSH
18613: CALL_OW 380
// un := CreateHuman ;
18617: LD_ADDR_VAR 0 1
18621: PUSH
18622: CALL_OW 44
18626: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18627: LD_VAR 0 1
18631: PPUSH
18632: LD_INT 1
18634: PPUSH
18635: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18639: LD_INT 35
18641: PPUSH
18642: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18646: LD_VAR 0 1
18650: PPUSH
18651: LD_INT 22
18653: PUSH
18654: LD_OWVAR 2
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: PPUSH
18663: CALL_OW 69
18667: PPUSH
18668: LD_VAR 0 1
18672: PPUSH
18673: CALL_OW 74
18677: PPUSH
18678: CALL_OW 115
// until IsDead ( un ) ;
18682: LD_VAR 0 1
18686: PPUSH
18687: CALL_OW 301
18691: IFFALSE 18639
// end ;
18693: PPOPN 1
18695: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18696: LD_EXP 40
18700: PUSH
18701: LD_EXP 80
18705: AND
18706: IFFALSE 18718
18708: GO 18710
18710: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18711: LD_STRING earthquake(getX(game), 0, 32)
18713: PPUSH
18714: CALL_OW 559
18718: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18719: LD_EXP 40
18723: PUSH
18724: LD_EXP 81
18728: AND
18729: IFFALSE 18820
18731: GO 18733
18733: DISABLE
18734: LD_INT 0
18736: PPUSH
// begin enable ;
18737: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18738: LD_ADDR_VAR 0 1
18742: PUSH
18743: LD_INT 22
18745: PUSH
18746: LD_OWVAR 2
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PUSH
18755: LD_INT 21
18757: PUSH
18758: LD_INT 2
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: PUSH
18765: LD_INT 33
18767: PUSH
18768: LD_INT 3
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: LIST
18779: PPUSH
18780: CALL_OW 69
18784: ST_TO_ADDR
// if not tmp then
18785: LD_VAR 0 1
18789: NOT
18790: IFFALSE 18794
// exit ;
18792: GO 18820
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18794: LD_VAR 0 1
18798: PUSH
18799: LD_INT 1
18801: PPUSH
18802: LD_VAR 0 1
18806: PPUSH
18807: CALL_OW 12
18811: ARRAY
18812: PPUSH
18813: LD_INT 1
18815: PPUSH
18816: CALL_OW 234
// end ;
18820: PPOPN 1
18822: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18823: LD_EXP 40
18827: PUSH
18828: LD_EXP 82
18832: AND
18833: IFFALSE 18974
18835: GO 18837
18837: DISABLE
18838: LD_INT 0
18840: PPUSH
18841: PPUSH
18842: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18843: LD_ADDR_VAR 0 3
18847: PUSH
18848: LD_INT 22
18850: PUSH
18851: LD_OWVAR 2
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: PUSH
18860: LD_INT 25
18862: PUSH
18863: LD_INT 1
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: PUSH
18870: EMPTY
18871: LIST
18872: LIST
18873: PPUSH
18874: CALL_OW 69
18878: ST_TO_ADDR
// if not tmp then
18879: LD_VAR 0 3
18883: NOT
18884: IFFALSE 18888
// exit ;
18886: GO 18974
// un := tmp [ rand ( 1 , tmp ) ] ;
18888: LD_ADDR_VAR 0 2
18892: PUSH
18893: LD_VAR 0 3
18897: PUSH
18898: LD_INT 1
18900: PPUSH
18901: LD_VAR 0 3
18905: PPUSH
18906: CALL_OW 12
18910: ARRAY
18911: ST_TO_ADDR
// if Crawls ( un ) then
18912: LD_VAR 0 2
18916: PPUSH
18917: CALL_OW 318
18921: IFFALSE 18932
// ComWalk ( un ) ;
18923: LD_VAR 0 2
18927: PPUSH
18928: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18932: LD_VAR 0 2
18936: PPUSH
18937: LD_INT 9
18939: PPUSH
18940: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18944: LD_INT 28
18946: PPUSH
18947: LD_OWVAR 2
18951: PPUSH
18952: LD_INT 2
18954: PPUSH
18955: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18959: LD_INT 29
18961: PPUSH
18962: LD_OWVAR 2
18966: PPUSH
18967: LD_INT 2
18969: PPUSH
18970: CALL_OW 322
// end ;
18974: PPOPN 3
18976: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18977: LD_EXP 40
18981: PUSH
18982: LD_EXP 83
18986: AND
18987: IFFALSE 19098
18989: GO 18991
18991: DISABLE
18992: LD_INT 0
18994: PPUSH
18995: PPUSH
18996: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18997: LD_ADDR_VAR 0 3
19001: PUSH
19002: LD_INT 22
19004: PUSH
19005: LD_OWVAR 2
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 25
19016: PUSH
19017: LD_INT 1
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PPUSH
19028: CALL_OW 69
19032: ST_TO_ADDR
// if not tmp then
19033: LD_VAR 0 3
19037: NOT
19038: IFFALSE 19042
// exit ;
19040: GO 19098
// un := tmp [ rand ( 1 , tmp ) ] ;
19042: LD_ADDR_VAR 0 2
19046: PUSH
19047: LD_VAR 0 3
19051: PUSH
19052: LD_INT 1
19054: PPUSH
19055: LD_VAR 0 3
19059: PPUSH
19060: CALL_OW 12
19064: ARRAY
19065: ST_TO_ADDR
// if Crawls ( un ) then
19066: LD_VAR 0 2
19070: PPUSH
19071: CALL_OW 318
19075: IFFALSE 19086
// ComWalk ( un ) ;
19077: LD_VAR 0 2
19081: PPUSH
19082: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19086: LD_VAR 0 2
19090: PPUSH
19091: LD_INT 8
19093: PPUSH
19094: CALL_OW 336
// end ;
19098: PPOPN 3
19100: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19101: LD_EXP 40
19105: PUSH
19106: LD_EXP 84
19110: AND
19111: IFFALSE 19255
19113: GO 19115
19115: DISABLE
19116: LD_INT 0
19118: PPUSH
19119: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19120: LD_ADDR_VAR 0 2
19124: PUSH
19125: LD_INT 22
19127: PUSH
19128: LD_OWVAR 2
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: PUSH
19137: LD_INT 21
19139: PUSH
19140: LD_INT 2
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: PUSH
19147: LD_INT 2
19149: PUSH
19150: LD_INT 34
19152: PUSH
19153: LD_INT 12
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: PUSH
19160: LD_INT 34
19162: PUSH
19163: LD_INT 51
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: LD_INT 34
19172: PUSH
19173: LD_INT 32
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: LIST
19190: PPUSH
19191: CALL_OW 69
19195: ST_TO_ADDR
// if not tmp then
19196: LD_VAR 0 2
19200: NOT
19201: IFFALSE 19205
// exit ;
19203: GO 19255
// for i in tmp do
19205: LD_ADDR_VAR 0 1
19209: PUSH
19210: LD_VAR 0 2
19214: PUSH
19215: FOR_IN
19216: IFFALSE 19253
// if GetCargo ( i , mat_artifact ) = 0 then
19218: LD_VAR 0 1
19222: PPUSH
19223: LD_INT 4
19225: PPUSH
19226: CALL_OW 289
19230: PUSH
19231: LD_INT 0
19233: EQUAL
19234: IFFALSE 19251
// SetCargo ( i , mat_siberit , 100 ) ;
19236: LD_VAR 0 1
19240: PPUSH
19241: LD_INT 3
19243: PPUSH
19244: LD_INT 100
19246: PPUSH
19247: CALL_OW 290
19251: GO 19215
19253: POP
19254: POP
// end ;
19255: PPOPN 2
19257: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19258: LD_EXP 40
19262: PUSH
19263: LD_EXP 85
19267: AND
19268: IFFALSE 19451
19270: GO 19272
19272: DISABLE
19273: LD_INT 0
19275: PPUSH
19276: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19277: LD_ADDR_VAR 0 2
19281: PUSH
19282: LD_INT 22
19284: PUSH
19285: LD_OWVAR 2
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PPUSH
19294: CALL_OW 69
19298: ST_TO_ADDR
// if not tmp then
19299: LD_VAR 0 2
19303: NOT
19304: IFFALSE 19308
// exit ;
19306: GO 19451
// for i := 1 to 2 do
19308: LD_ADDR_VAR 0 1
19312: PUSH
19313: DOUBLE
19314: LD_INT 1
19316: DEC
19317: ST_TO_ADDR
19318: LD_INT 2
19320: PUSH
19321: FOR_TO
19322: IFFALSE 19449
// begin uc_side := your_side ;
19324: LD_ADDR_OWVAR 20
19328: PUSH
19329: LD_OWVAR 2
19333: ST_TO_ADDR
// uc_nation := nation_american ;
19334: LD_ADDR_OWVAR 21
19338: PUSH
19339: LD_INT 1
19341: ST_TO_ADDR
// vc_chassis := us_morphling ;
19342: LD_ADDR_OWVAR 37
19346: PUSH
19347: LD_INT 5
19349: ST_TO_ADDR
// vc_engine := engine_siberite ;
19350: LD_ADDR_OWVAR 39
19354: PUSH
19355: LD_INT 3
19357: ST_TO_ADDR
// vc_control := control_computer ;
19358: LD_ADDR_OWVAR 38
19362: PUSH
19363: LD_INT 3
19365: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19366: LD_ADDR_OWVAR 40
19370: PUSH
19371: LD_INT 10
19373: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19374: LD_VAR 0 2
19378: PUSH
19379: LD_INT 1
19381: ARRAY
19382: PPUSH
19383: CALL_OW 310
19387: NOT
19388: IFFALSE 19435
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19390: CALL_OW 45
19394: PPUSH
19395: LD_VAR 0 2
19399: PUSH
19400: LD_INT 1
19402: ARRAY
19403: PPUSH
19404: CALL_OW 250
19408: PPUSH
19409: LD_VAR 0 2
19413: PUSH
19414: LD_INT 1
19416: ARRAY
19417: PPUSH
19418: CALL_OW 251
19422: PPUSH
19423: LD_INT 12
19425: PPUSH
19426: LD_INT 1
19428: PPUSH
19429: CALL_OW 50
19433: GO 19447
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19435: CALL_OW 45
19439: PPUSH
19440: LD_INT 1
19442: PPUSH
19443: CALL_OW 51
// end ;
19447: GO 19321
19449: POP
19450: POP
// end ;
19451: PPOPN 2
19453: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19454: LD_EXP 40
19458: PUSH
19459: LD_EXP 86
19463: AND
19464: IFFALSE 19686
19466: GO 19468
19468: DISABLE
19469: LD_INT 0
19471: PPUSH
19472: PPUSH
19473: PPUSH
19474: PPUSH
19475: PPUSH
19476: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19477: LD_ADDR_VAR 0 6
19481: PUSH
19482: LD_INT 22
19484: PUSH
19485: LD_OWVAR 2
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: PUSH
19494: LD_INT 21
19496: PUSH
19497: LD_INT 1
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PUSH
19504: LD_INT 3
19506: PUSH
19507: LD_INT 23
19509: PUSH
19510: LD_INT 0
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: LIST
19525: PPUSH
19526: CALL_OW 69
19530: ST_TO_ADDR
// if not tmp then
19531: LD_VAR 0 6
19535: NOT
19536: IFFALSE 19540
// exit ;
19538: GO 19686
// s1 := rand ( 1 , 4 ) ;
19540: LD_ADDR_VAR 0 2
19544: PUSH
19545: LD_INT 1
19547: PPUSH
19548: LD_INT 4
19550: PPUSH
19551: CALL_OW 12
19555: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19556: LD_ADDR_VAR 0 4
19560: PUSH
19561: LD_VAR 0 6
19565: PUSH
19566: LD_INT 1
19568: ARRAY
19569: PPUSH
19570: LD_VAR 0 2
19574: PPUSH
19575: CALL_OW 259
19579: ST_TO_ADDR
// if s1 = 1 then
19580: LD_VAR 0 2
19584: PUSH
19585: LD_INT 1
19587: EQUAL
19588: IFFALSE 19608
// s2 := rand ( 2 , 4 ) else
19590: LD_ADDR_VAR 0 3
19594: PUSH
19595: LD_INT 2
19597: PPUSH
19598: LD_INT 4
19600: PPUSH
19601: CALL_OW 12
19605: ST_TO_ADDR
19606: GO 19616
// s2 := 1 ;
19608: LD_ADDR_VAR 0 3
19612: PUSH
19613: LD_INT 1
19615: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19616: LD_ADDR_VAR 0 5
19620: PUSH
19621: LD_VAR 0 6
19625: PUSH
19626: LD_INT 1
19628: ARRAY
19629: PPUSH
19630: LD_VAR 0 3
19634: PPUSH
19635: CALL_OW 259
19639: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19640: LD_VAR 0 6
19644: PUSH
19645: LD_INT 1
19647: ARRAY
19648: PPUSH
19649: LD_VAR 0 2
19653: PPUSH
19654: LD_VAR 0 5
19658: PPUSH
19659: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19663: LD_VAR 0 6
19667: PUSH
19668: LD_INT 1
19670: ARRAY
19671: PPUSH
19672: LD_VAR 0 3
19676: PPUSH
19677: LD_VAR 0 4
19681: PPUSH
19682: CALL_OW 237
// end ;
19686: PPOPN 6
19688: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19689: LD_EXP 40
19693: PUSH
19694: LD_EXP 87
19698: AND
19699: IFFALSE 19778
19701: GO 19703
19703: DISABLE
19704: LD_INT 0
19706: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19707: LD_ADDR_VAR 0 1
19711: PUSH
19712: LD_INT 22
19714: PUSH
19715: LD_OWVAR 2
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: PUSH
19724: LD_INT 30
19726: PUSH
19727: LD_INT 3
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: PPUSH
19738: CALL_OW 69
19742: ST_TO_ADDR
// if not tmp then
19743: LD_VAR 0 1
19747: NOT
19748: IFFALSE 19752
// exit ;
19750: GO 19778
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19752: LD_VAR 0 1
19756: PUSH
19757: LD_INT 1
19759: PPUSH
19760: LD_VAR 0 1
19764: PPUSH
19765: CALL_OW 12
19769: ARRAY
19770: PPUSH
19771: LD_INT 1
19773: PPUSH
19774: CALL_OW 234
// end ;
19778: PPOPN 1
19780: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19781: LD_EXP 40
19785: PUSH
19786: LD_EXP 88
19790: AND
19791: IFFALSE 19903
19793: GO 19795
19795: DISABLE
19796: LD_INT 0
19798: PPUSH
19799: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19800: LD_ADDR_VAR 0 2
19804: PUSH
19805: LD_INT 22
19807: PUSH
19808: LD_OWVAR 2
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: PUSH
19817: LD_INT 2
19819: PUSH
19820: LD_INT 30
19822: PUSH
19823: LD_INT 27
19825: PUSH
19826: EMPTY
19827: LIST
19828: LIST
19829: PUSH
19830: LD_INT 30
19832: PUSH
19833: LD_INT 26
19835: PUSH
19836: EMPTY
19837: LIST
19838: LIST
19839: PUSH
19840: LD_INT 30
19842: PUSH
19843: LD_INT 28
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: PPUSH
19860: CALL_OW 69
19864: ST_TO_ADDR
// if not tmp then
19865: LD_VAR 0 2
19869: NOT
19870: IFFALSE 19874
// exit ;
19872: GO 19903
// for i in tmp do
19874: LD_ADDR_VAR 0 1
19878: PUSH
19879: LD_VAR 0 2
19883: PUSH
19884: FOR_IN
19885: IFFALSE 19901
// SetLives ( i , 1 ) ;
19887: LD_VAR 0 1
19891: PPUSH
19892: LD_INT 1
19894: PPUSH
19895: CALL_OW 234
19899: GO 19884
19901: POP
19902: POP
// end ;
19903: PPOPN 2
19905: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19906: LD_EXP 40
19910: PUSH
19911: LD_EXP 89
19915: AND
19916: IFFALSE 20190
19918: GO 19920
19920: DISABLE
19921: LD_INT 0
19923: PPUSH
19924: PPUSH
19925: PPUSH
// begin i := rand ( 1 , 7 ) ;
19926: LD_ADDR_VAR 0 1
19930: PUSH
19931: LD_INT 1
19933: PPUSH
19934: LD_INT 7
19936: PPUSH
19937: CALL_OW 12
19941: ST_TO_ADDR
// case i of 1 :
19942: LD_VAR 0 1
19946: PUSH
19947: LD_INT 1
19949: DOUBLE
19950: EQUAL
19951: IFTRUE 19955
19953: GO 19965
19955: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19956: LD_STRING earthquake(getX(game), 0, 32)
19958: PPUSH
19959: CALL_OW 559
19963: GO 20190
19965: LD_INT 2
19967: DOUBLE
19968: EQUAL
19969: IFTRUE 19973
19971: GO 19987
19973: POP
// begin ToLua ( displayStucuk(); ) ;
19974: LD_STRING displayStucuk();
19976: PPUSH
19977: CALL_OW 559
// ResetFog ;
19981: CALL_OW 335
// end ; 3 :
19985: GO 20190
19987: LD_INT 3
19989: DOUBLE
19990: EQUAL
19991: IFTRUE 19995
19993: GO 20099
19995: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19996: LD_ADDR_VAR 0 2
20000: PUSH
20001: LD_INT 22
20003: PUSH
20004: LD_OWVAR 2
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: PUSH
20013: LD_INT 25
20015: PUSH
20016: LD_INT 1
20018: PUSH
20019: EMPTY
20020: LIST
20021: LIST
20022: PUSH
20023: EMPTY
20024: LIST
20025: LIST
20026: PPUSH
20027: CALL_OW 69
20031: ST_TO_ADDR
// if not tmp then
20032: LD_VAR 0 2
20036: NOT
20037: IFFALSE 20041
// exit ;
20039: GO 20190
// un := tmp [ rand ( 1 , tmp ) ] ;
20041: LD_ADDR_VAR 0 3
20045: PUSH
20046: LD_VAR 0 2
20050: PUSH
20051: LD_INT 1
20053: PPUSH
20054: LD_VAR 0 2
20058: PPUSH
20059: CALL_OW 12
20063: ARRAY
20064: ST_TO_ADDR
// if Crawls ( un ) then
20065: LD_VAR 0 3
20069: PPUSH
20070: CALL_OW 318
20074: IFFALSE 20085
// ComWalk ( un ) ;
20076: LD_VAR 0 3
20080: PPUSH
20081: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20085: LD_VAR 0 3
20089: PPUSH
20090: LD_INT 8
20092: PPUSH
20093: CALL_OW 336
// end ; 4 :
20097: GO 20190
20099: LD_INT 4
20101: DOUBLE
20102: EQUAL
20103: IFTRUE 20107
20105: GO 20168
20107: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20108: LD_ADDR_VAR 0 2
20112: PUSH
20113: LD_INT 22
20115: PUSH
20116: LD_OWVAR 2
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: PUSH
20125: LD_INT 30
20127: PUSH
20128: LD_INT 29
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: PUSH
20135: EMPTY
20136: LIST
20137: LIST
20138: PPUSH
20139: CALL_OW 69
20143: ST_TO_ADDR
// if not tmp then
20144: LD_VAR 0 2
20148: NOT
20149: IFFALSE 20153
// exit ;
20151: GO 20190
// DestroyUnit ( tmp [ 1 ] ) ;
20153: LD_VAR 0 2
20157: PUSH
20158: LD_INT 1
20160: ARRAY
20161: PPUSH
20162: CALL_OW 65
// end ; 5 .. 7 :
20166: GO 20190
20168: LD_INT 5
20170: DOUBLE
20171: GREATEREQUAL
20172: IFFALSE 20180
20174: LD_INT 7
20176: DOUBLE
20177: LESSEQUAL
20178: IFTRUE 20182
20180: GO 20189
20182: POP
// StreamSibBomb ; end ;
20183: CALL 16440 0 0
20187: GO 20190
20189: POP
// end ;
20190: PPOPN 3
20192: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20193: LD_EXP 40
20197: PUSH
20198: LD_EXP 90
20202: AND
20203: IFFALSE 20359
20205: GO 20207
20207: DISABLE
20208: LD_INT 0
20210: PPUSH
20211: PPUSH
20212: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20213: LD_ADDR_VAR 0 2
20217: PUSH
20218: LD_INT 81
20220: PUSH
20221: LD_OWVAR 2
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: LD_INT 2
20232: PUSH
20233: LD_INT 21
20235: PUSH
20236: LD_INT 1
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: PUSH
20243: LD_INT 21
20245: PUSH
20246: LD_INT 2
20248: PUSH
20249: EMPTY
20250: LIST
20251: LIST
20252: PUSH
20253: EMPTY
20254: LIST
20255: LIST
20256: LIST
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: PPUSH
20262: CALL_OW 69
20266: ST_TO_ADDR
// if not tmp then
20267: LD_VAR 0 2
20271: NOT
20272: IFFALSE 20276
// exit ;
20274: GO 20359
// p := 0 ;
20276: LD_ADDR_VAR 0 3
20280: PUSH
20281: LD_INT 0
20283: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20284: LD_INT 35
20286: PPUSH
20287: CALL_OW 67
// p := p + 1 ;
20291: LD_ADDR_VAR 0 3
20295: PUSH
20296: LD_VAR 0 3
20300: PUSH
20301: LD_INT 1
20303: PLUS
20304: ST_TO_ADDR
// for i in tmp do
20305: LD_ADDR_VAR 0 1
20309: PUSH
20310: LD_VAR 0 2
20314: PUSH
20315: FOR_IN
20316: IFFALSE 20347
// if GetLives ( i ) < 1000 then
20318: LD_VAR 0 1
20322: PPUSH
20323: CALL_OW 256
20327: PUSH
20328: LD_INT 1000
20330: LESS
20331: IFFALSE 20345
// SetLives ( i , 1000 ) ;
20333: LD_VAR 0 1
20337: PPUSH
20338: LD_INT 1000
20340: PPUSH
20341: CALL_OW 234
20345: GO 20315
20347: POP
20348: POP
// until p > 20 ;
20349: LD_VAR 0 3
20353: PUSH
20354: LD_INT 20
20356: GREATER
20357: IFFALSE 20284
// end ;
20359: PPOPN 3
20361: END
// every 0 0$1 trigger StreamModeActive and sTime do
20362: LD_EXP 40
20366: PUSH
20367: LD_EXP 91
20371: AND
20372: IFFALSE 20407
20374: GO 20376
20376: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20377: LD_INT 28
20379: PPUSH
20380: LD_OWVAR 2
20384: PPUSH
20385: LD_INT 2
20387: PPUSH
20388: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20392: LD_INT 30
20394: PPUSH
20395: LD_OWVAR 2
20399: PPUSH
20400: LD_INT 2
20402: PPUSH
20403: CALL_OW 322
// end ;
20407: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20408: LD_EXP 40
20412: PUSH
20413: LD_EXP 92
20417: AND
20418: IFFALSE 20539
20420: GO 20422
20422: DISABLE
20423: LD_INT 0
20425: PPUSH
20426: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20427: LD_ADDR_VAR 0 2
20431: PUSH
20432: LD_INT 22
20434: PUSH
20435: LD_OWVAR 2
20439: PUSH
20440: EMPTY
20441: LIST
20442: LIST
20443: PUSH
20444: LD_INT 21
20446: PUSH
20447: LD_INT 1
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: PUSH
20454: LD_INT 3
20456: PUSH
20457: LD_INT 23
20459: PUSH
20460: LD_INT 0
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: LIST
20475: PPUSH
20476: CALL_OW 69
20480: ST_TO_ADDR
// if not tmp then
20481: LD_VAR 0 2
20485: NOT
20486: IFFALSE 20490
// exit ;
20488: GO 20539
// for i in tmp do
20490: LD_ADDR_VAR 0 1
20494: PUSH
20495: LD_VAR 0 2
20499: PUSH
20500: FOR_IN
20501: IFFALSE 20537
// begin if Crawls ( i ) then
20503: LD_VAR 0 1
20507: PPUSH
20508: CALL_OW 318
20512: IFFALSE 20523
// ComWalk ( i ) ;
20514: LD_VAR 0 1
20518: PPUSH
20519: CALL_OW 138
// SetClass ( i , 2 ) ;
20523: LD_VAR 0 1
20527: PPUSH
20528: LD_INT 2
20530: PPUSH
20531: CALL_OW 336
// end ;
20535: GO 20500
20537: POP
20538: POP
// end ;
20539: PPOPN 2
20541: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20542: LD_EXP 40
20546: PUSH
20547: LD_EXP 93
20551: AND
20552: IFFALSE 20833
20554: GO 20556
20556: DISABLE
20557: LD_INT 0
20559: PPUSH
20560: PPUSH
20561: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20562: LD_OWVAR 2
20566: PPUSH
20567: LD_INT 9
20569: PPUSH
20570: LD_INT 1
20572: PPUSH
20573: LD_INT 1
20575: PPUSH
20576: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20580: LD_INT 9
20582: PPUSH
20583: LD_OWVAR 2
20587: PPUSH
20588: CALL_OW 343
// uc_side := 9 ;
20592: LD_ADDR_OWVAR 20
20596: PUSH
20597: LD_INT 9
20599: ST_TO_ADDR
// uc_nation := 2 ;
20600: LD_ADDR_OWVAR 21
20604: PUSH
20605: LD_INT 2
20607: ST_TO_ADDR
// hc_name := Dark Warrior ;
20608: LD_ADDR_OWVAR 26
20612: PUSH
20613: LD_STRING Dark Warrior
20615: ST_TO_ADDR
// hc_gallery :=  ;
20616: LD_ADDR_OWVAR 33
20620: PUSH
20621: LD_STRING 
20623: ST_TO_ADDR
// hc_noskilllimit := true ;
20624: LD_ADDR_OWVAR 76
20628: PUSH
20629: LD_INT 1
20631: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20632: LD_ADDR_OWVAR 31
20636: PUSH
20637: LD_INT 30
20639: PUSH
20640: LD_INT 30
20642: PUSH
20643: LD_INT 30
20645: PUSH
20646: LD_INT 30
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: ST_TO_ADDR
// un := CreateHuman ;
20655: LD_ADDR_VAR 0 3
20659: PUSH
20660: CALL_OW 44
20664: ST_TO_ADDR
// hc_noskilllimit := false ;
20665: LD_ADDR_OWVAR 76
20669: PUSH
20670: LD_INT 0
20672: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20673: LD_VAR 0 3
20677: PPUSH
20678: LD_INT 1
20680: PPUSH
20681: CALL_OW 51
// p := 0 ;
20685: LD_ADDR_VAR 0 2
20689: PUSH
20690: LD_INT 0
20692: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20693: LD_INT 35
20695: PPUSH
20696: CALL_OW 67
// p := p + 1 ;
20700: LD_ADDR_VAR 0 2
20704: PUSH
20705: LD_VAR 0 2
20709: PUSH
20710: LD_INT 1
20712: PLUS
20713: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20714: LD_VAR 0 3
20718: PPUSH
20719: CALL_OW 256
20723: PUSH
20724: LD_INT 1000
20726: LESS
20727: IFFALSE 20741
// SetLives ( un , 1000 ) ;
20729: LD_VAR 0 3
20733: PPUSH
20734: LD_INT 1000
20736: PPUSH
20737: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20741: LD_VAR 0 3
20745: PPUSH
20746: LD_INT 81
20748: PUSH
20749: LD_OWVAR 2
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: PUSH
20758: LD_INT 91
20760: PUSH
20761: LD_VAR 0 3
20765: PUSH
20766: LD_INT 30
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: LIST
20773: PUSH
20774: EMPTY
20775: LIST
20776: LIST
20777: PPUSH
20778: CALL_OW 69
20782: PPUSH
20783: LD_VAR 0 3
20787: PPUSH
20788: CALL_OW 74
20792: PPUSH
20793: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
20797: LD_VAR 0 2
20801: PUSH
20802: LD_INT 60
20804: GREATER
20805: PUSH
20806: LD_VAR 0 3
20810: PPUSH
20811: CALL_OW 301
20815: OR
20816: IFFALSE 20693
// if un then
20818: LD_VAR 0 3
20822: IFFALSE 20833
// RemoveUnit ( un ) ;
20824: LD_VAR 0 3
20828: PPUSH
20829: CALL_OW 64
// end ;
20833: PPOPN 3
20835: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20836: LD_INT 0
20838: PPUSH
20839: PPUSH
20840: PPUSH
20841: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20842: LD_ADDR_VAR 0 4
20846: PUSH
20847: LD_INT 22
20849: PUSH
20850: LD_OWVAR 2
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: PUSH
20859: LD_INT 2
20861: PUSH
20862: LD_INT 30
20864: PUSH
20865: LD_INT 0
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: PUSH
20872: LD_INT 30
20874: PUSH
20875: LD_INT 1
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: LIST
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: PPUSH
20891: CALL_OW 69
20895: ST_TO_ADDR
// if not tmp then
20896: LD_VAR 0 4
20900: NOT
20901: IFFALSE 20905
// exit ;
20903: GO 20964
// for i in tmp do
20905: LD_ADDR_VAR 0 2
20909: PUSH
20910: LD_VAR 0 4
20914: PUSH
20915: FOR_IN
20916: IFFALSE 20962
// for j = 1 to 3 do
20918: LD_ADDR_VAR 0 3
20922: PUSH
20923: DOUBLE
20924: LD_INT 1
20926: DEC
20927: ST_TO_ADDR
20928: LD_INT 3
20930: PUSH
20931: FOR_TO
20932: IFFALSE 20958
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20934: LD_VAR 0 2
20938: PPUSH
20939: CALL_OW 274
20943: PPUSH
20944: LD_VAR 0 3
20948: PPUSH
20949: LD_INT 99999
20951: PPUSH
20952: CALL_OW 277
20956: GO 20931
20958: POP
20959: POP
20960: GO 20915
20962: POP
20963: POP
// end ;
20964: LD_VAR 0 1
20968: RET
// export function hHackSetLevel10 ; var i , j ; begin
20969: LD_INT 0
20971: PPUSH
20972: PPUSH
20973: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20974: LD_ADDR_VAR 0 2
20978: PUSH
20979: LD_INT 21
20981: PUSH
20982: LD_INT 1
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: PPUSH
20989: CALL_OW 69
20993: PUSH
20994: FOR_IN
20995: IFFALSE 21047
// if IsSelected ( i ) then
20997: LD_VAR 0 2
21001: PPUSH
21002: CALL_OW 306
21006: IFFALSE 21045
// begin for j := 1 to 4 do
21008: LD_ADDR_VAR 0 3
21012: PUSH
21013: DOUBLE
21014: LD_INT 1
21016: DEC
21017: ST_TO_ADDR
21018: LD_INT 4
21020: PUSH
21021: FOR_TO
21022: IFFALSE 21043
// SetSkill ( i , j , 10 ) ;
21024: LD_VAR 0 2
21028: PPUSH
21029: LD_VAR 0 3
21033: PPUSH
21034: LD_INT 10
21036: PPUSH
21037: CALL_OW 237
21041: GO 21021
21043: POP
21044: POP
// end ;
21045: GO 20994
21047: POP
21048: POP
// end ;
21049: LD_VAR 0 1
21053: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21054: LD_INT 0
21056: PPUSH
21057: PPUSH
21058: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21059: LD_ADDR_VAR 0 2
21063: PUSH
21064: LD_INT 22
21066: PUSH
21067: LD_OWVAR 2
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: PUSH
21076: LD_INT 21
21078: PUSH
21079: LD_INT 1
21081: PUSH
21082: EMPTY
21083: LIST
21084: LIST
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: PPUSH
21090: CALL_OW 69
21094: PUSH
21095: FOR_IN
21096: IFFALSE 21137
// begin for j := 1 to 4 do
21098: LD_ADDR_VAR 0 3
21102: PUSH
21103: DOUBLE
21104: LD_INT 1
21106: DEC
21107: ST_TO_ADDR
21108: LD_INT 4
21110: PUSH
21111: FOR_TO
21112: IFFALSE 21133
// SetSkill ( i , j , 10 ) ;
21114: LD_VAR 0 2
21118: PPUSH
21119: LD_VAR 0 3
21123: PPUSH
21124: LD_INT 10
21126: PPUSH
21127: CALL_OW 237
21131: GO 21111
21133: POP
21134: POP
// end ;
21135: GO 21095
21137: POP
21138: POP
// end ;
21139: LD_VAR 0 1
21143: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
21144: LD_INT 0
21146: PPUSH
// uc_side := your_side ;
21147: LD_ADDR_OWVAR 20
21151: PUSH
21152: LD_OWVAR 2
21156: ST_TO_ADDR
// uc_nation := nation ;
21157: LD_ADDR_OWVAR 21
21161: PUSH
21162: LD_VAR 0 1
21166: ST_TO_ADDR
// InitHc ;
21167: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21171: LD_INT 0
21173: PPUSH
21174: LD_VAR 0 2
21178: PPUSH
21179: LD_VAR 0 3
21183: PPUSH
21184: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
21188: CALL_OW 44
21192: PPUSH
21193: LD_INT 1
21195: PPUSH
21196: CALL_OW 51
// end ;
21200: LD_VAR 0 4
21204: RET
// export function hHackSpawnVehicle ; begin
21205: LD_INT 0
21207: PPUSH
// uc_side := your_side ;
21208: LD_ADDR_OWVAR 20
21212: PUSH
21213: LD_OWVAR 2
21217: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
21218: LD_ADDR_OWVAR 21
21222: PUSH
21223: LD_INT 1
21225: PPUSH
21226: LD_INT 3
21228: PPUSH
21229: CALL_OW 12
21233: ST_TO_ADDR
// InitVc ;
21234: CALL_OW 20
// case uc_nation of 1 :
21238: LD_OWVAR 21
21242: PUSH
21243: LD_INT 1
21245: DOUBLE
21246: EQUAL
21247: IFTRUE 21251
21249: GO 21395
21251: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
21252: LD_ADDR_OWVAR 37
21256: PUSH
21257: LD_INT 1
21259: PUSH
21260: LD_INT 2
21262: PUSH
21263: LD_INT 3
21265: PUSH
21266: LD_INT 4
21268: PUSH
21269: LD_INT 5
21271: PUSH
21272: EMPTY
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: PUSH
21279: LD_INT 1
21281: PPUSH
21282: LD_INT 5
21284: PPUSH
21285: CALL_OW 12
21289: ARRAY
21290: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
21291: LD_ADDR_OWVAR 39
21295: PUSH
21296: LD_INT 1
21298: PPUSH
21299: LD_INT 3
21301: PPUSH
21302: CALL_OW 12
21306: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
21307: LD_ADDR_OWVAR 38
21311: PUSH
21312: LD_INT 1
21314: PUSH
21315: LD_INT 2
21317: PUSH
21318: LD_INT 3
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: LIST
21325: PUSH
21326: LD_INT 1
21328: PPUSH
21329: LD_INT 3
21331: PPUSH
21332: CALL_OW 12
21336: ARRAY
21337: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
21338: LD_ADDR_OWVAR 40
21342: PUSH
21343: LD_INT 2
21345: PUSH
21346: LD_INT 4
21348: PUSH
21349: LD_INT 5
21351: PUSH
21352: LD_INT 3
21354: PUSH
21355: LD_INT 7
21357: PUSH
21358: LD_INT 8
21360: PUSH
21361: LD_INT 9
21363: PUSH
21364: LD_INT 10
21366: PUSH
21367: LD_INT 6
21369: PUSH
21370: EMPTY
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: PUSH
21381: LD_INT 1
21383: PPUSH
21384: LD_INT 9
21386: PPUSH
21387: CALL_OW 12
21391: ARRAY
21392: ST_TO_ADDR
// end ; 2 :
21393: GO 21660
21395: LD_INT 2
21397: DOUBLE
21398: EQUAL
21399: IFTRUE 21403
21401: GO 21527
21403: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
21404: LD_ADDR_OWVAR 37
21408: PUSH
21409: LD_INT 11
21411: PUSH
21412: LD_INT 12
21414: PUSH
21415: LD_INT 13
21417: PUSH
21418: LD_INT 14
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: PUSH
21427: LD_INT 1
21429: PPUSH
21430: LD_INT 4
21432: PPUSH
21433: CALL_OW 12
21437: ARRAY
21438: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
21439: LD_ADDR_OWVAR 39
21443: PUSH
21444: LD_INT 1
21446: PPUSH
21447: LD_INT 3
21449: PPUSH
21450: CALL_OW 12
21454: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
21455: LD_ADDR_OWVAR 38
21459: PUSH
21460: LD_INT 1
21462: PUSH
21463: LD_INT 2
21465: PUSH
21466: LD_INT 5
21468: PUSH
21469: EMPTY
21470: LIST
21471: LIST
21472: LIST
21473: PUSH
21474: LD_INT 1
21476: PPUSH
21477: LD_INT 3
21479: PPUSH
21480: CALL_OW 12
21484: ARRAY
21485: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
21486: LD_ADDR_OWVAR 40
21490: PUSH
21491: LD_INT 24
21493: PUSH
21494: LD_INT 26
21496: PUSH
21497: LD_INT 27
21499: PUSH
21500: LD_INT 28
21502: PUSH
21503: LD_INT 29
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: PUSH
21513: LD_INT 1
21515: PPUSH
21516: LD_INT 5
21518: PPUSH
21519: CALL_OW 12
21523: ARRAY
21524: ST_TO_ADDR
// end ; 3 :
21525: GO 21660
21527: LD_INT 3
21529: DOUBLE
21530: EQUAL
21531: IFTRUE 21535
21533: GO 21659
21535: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
21536: LD_ADDR_OWVAR 37
21540: PUSH
21541: LD_INT 21
21543: PUSH
21544: LD_INT 23
21546: PUSH
21547: LD_INT 22
21549: PUSH
21550: LD_INT 24
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: PUSH
21559: LD_INT 1
21561: PPUSH
21562: LD_INT 4
21564: PPUSH
21565: CALL_OW 12
21569: ARRAY
21570: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
21571: LD_ADDR_OWVAR 39
21575: PUSH
21576: LD_INT 1
21578: PPUSH
21579: LD_INT 3
21581: PPUSH
21582: CALL_OW 12
21586: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
21587: LD_ADDR_OWVAR 38
21591: PUSH
21592: LD_INT 1
21594: PUSH
21595: LD_INT 3
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: PUSH
21602: LD_INT 1
21604: PPUSH
21605: LD_INT 2
21607: PPUSH
21608: CALL_OW 12
21612: ARRAY
21613: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
21614: LD_ADDR_OWVAR 40
21618: PUSH
21619: LD_INT 42
21621: PUSH
21622: LD_INT 43
21624: PUSH
21625: LD_INT 44
21627: PUSH
21628: LD_INT 46
21630: PUSH
21631: LD_INT 48
21633: PUSH
21634: LD_INT 47
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: PUSH
21645: LD_INT 1
21647: PPUSH
21648: LD_INT 6
21650: PPUSH
21651: CALL_OW 12
21655: ARRAY
21656: ST_TO_ADDR
// end ; end ;
21657: GO 21660
21659: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21660: CALL_OW 45
21664: PPUSH
21665: LD_INT 1
21667: PPUSH
21668: CALL_OW 51
// end ;
21672: LD_VAR 0 1
21676: RET
// export hInvincible ; every 1 do
21677: GO 21679
21679: DISABLE
// hInvincible := [ ] ;
21680: LD_ADDR_EXP 94
21684: PUSH
21685: EMPTY
21686: ST_TO_ADDR
21687: END
// every 10 do var i ;
21688: GO 21690
21690: DISABLE
21691: LD_INT 0
21693: PPUSH
// begin enable ;
21694: ENABLE
// if not hInvincible then
21695: LD_EXP 94
21699: NOT
21700: IFFALSE 21704
// exit ;
21702: GO 21748
// for i in hInvincible do
21704: LD_ADDR_VAR 0 1
21708: PUSH
21709: LD_EXP 94
21713: PUSH
21714: FOR_IN
21715: IFFALSE 21746
// if GetLives ( i ) < 1000 then
21717: LD_VAR 0 1
21721: PPUSH
21722: CALL_OW 256
21726: PUSH
21727: LD_INT 1000
21729: LESS
21730: IFFALSE 21744
// SetLives ( i , 1000 ) ;
21732: LD_VAR 0 1
21736: PPUSH
21737: LD_INT 1000
21739: PPUSH
21740: CALL_OW 234
21744: GO 21714
21746: POP
21747: POP
// end ;
21748: PPOPN 1
21750: END
// export function hHackInvincible ; var i ; begin
21751: LD_INT 0
21753: PPUSH
21754: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21755: LD_ADDR_VAR 0 2
21759: PUSH
21760: LD_INT 2
21762: PUSH
21763: LD_INT 21
21765: PUSH
21766: LD_INT 1
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: LD_INT 21
21775: PUSH
21776: LD_INT 2
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: LIST
21787: PPUSH
21788: CALL_OW 69
21792: PUSH
21793: FOR_IN
21794: IFFALSE 21855
// if IsSelected ( i ) then
21796: LD_VAR 0 2
21800: PPUSH
21801: CALL_OW 306
21805: IFFALSE 21853
// begin if i in hInvincible then
21807: LD_VAR 0 2
21811: PUSH
21812: LD_EXP 94
21816: IN
21817: IFFALSE 21837
// hInvincible := hInvincible diff i else
21819: LD_ADDR_EXP 94
21823: PUSH
21824: LD_EXP 94
21828: PUSH
21829: LD_VAR 0 2
21833: DIFF
21834: ST_TO_ADDR
21835: GO 21853
// hInvincible := hInvincible union i ;
21837: LD_ADDR_EXP 94
21841: PUSH
21842: LD_EXP 94
21846: PUSH
21847: LD_VAR 0 2
21851: UNION
21852: ST_TO_ADDR
// end ;
21853: GO 21793
21855: POP
21856: POP
// end ;
21857: LD_VAR 0 1
21861: RET
// export function hHackInvisible ; var i , j ; begin
21862: LD_INT 0
21864: PPUSH
21865: PPUSH
21866: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21867: LD_ADDR_VAR 0 2
21871: PUSH
21872: LD_INT 21
21874: PUSH
21875: LD_INT 1
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: PPUSH
21882: CALL_OW 69
21886: PUSH
21887: FOR_IN
21888: IFFALSE 21912
// if IsSelected ( i ) then
21890: LD_VAR 0 2
21894: PPUSH
21895: CALL_OW 306
21899: IFFALSE 21910
// ComForceInvisible ( i ) ;
21901: LD_VAR 0 2
21905: PPUSH
21906: CALL_OW 496
21910: GO 21887
21912: POP
21913: POP
// end ;
21914: LD_VAR 0 1
21918: RET
// export function hHackChangeYourSide ; begin
21919: LD_INT 0
21921: PPUSH
// if your_side = 8 then
21922: LD_OWVAR 2
21926: PUSH
21927: LD_INT 8
21929: EQUAL
21930: IFFALSE 21942
// your_side := 0 else
21932: LD_ADDR_OWVAR 2
21936: PUSH
21937: LD_INT 0
21939: ST_TO_ADDR
21940: GO 21956
// your_side := your_side + 1 ;
21942: LD_ADDR_OWVAR 2
21946: PUSH
21947: LD_OWVAR 2
21951: PUSH
21952: LD_INT 1
21954: PLUS
21955: ST_TO_ADDR
// end ;
21956: LD_VAR 0 1
21960: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21961: LD_INT 0
21963: PPUSH
21964: PPUSH
21965: PPUSH
// for i in all_units do
21966: LD_ADDR_VAR 0 2
21970: PUSH
21971: LD_OWVAR 3
21975: PUSH
21976: FOR_IN
21977: IFFALSE 22055
// if IsSelected ( i ) then
21979: LD_VAR 0 2
21983: PPUSH
21984: CALL_OW 306
21988: IFFALSE 22053
// begin j := GetSide ( i ) ;
21990: LD_ADDR_VAR 0 3
21994: PUSH
21995: LD_VAR 0 2
21999: PPUSH
22000: CALL_OW 255
22004: ST_TO_ADDR
// if j = 8 then
22005: LD_VAR 0 3
22009: PUSH
22010: LD_INT 8
22012: EQUAL
22013: IFFALSE 22025
// j := 0 else
22015: LD_ADDR_VAR 0 3
22019: PUSH
22020: LD_INT 0
22022: ST_TO_ADDR
22023: GO 22039
// j := j + 1 ;
22025: LD_ADDR_VAR 0 3
22029: PUSH
22030: LD_VAR 0 3
22034: PUSH
22035: LD_INT 1
22037: PLUS
22038: ST_TO_ADDR
// SetSide ( i , j ) ;
22039: LD_VAR 0 2
22043: PPUSH
22044: LD_VAR 0 3
22048: PPUSH
22049: CALL_OW 235
// end ;
22053: GO 21976
22055: POP
22056: POP
// end ;
22057: LD_VAR 0 1
22061: RET
// export function hHackFog ; begin
22062: LD_INT 0
22064: PPUSH
// FogOff ( true ) ;
22065: LD_INT 1
22067: PPUSH
22068: CALL_OW 344
// end ;
22072: LD_VAR 0 1
22076: RET
// export function hHackApeman ; begin
22077: LD_INT 0
22079: PPUSH
// uc_side := your_side ;
22080: LD_ADDR_OWVAR 20
22084: PUSH
22085: LD_OWVAR 2
22089: ST_TO_ADDR
// uc_nation := 0 ;
22090: LD_ADDR_OWVAR 21
22094: PUSH
22095: LD_INT 0
22097: ST_TO_ADDR
// hc_name :=  ;
22098: LD_ADDR_OWVAR 26
22102: PUSH
22103: LD_STRING 
22105: ST_TO_ADDR
// hc_gallery :=  ;
22106: LD_ADDR_OWVAR 33
22110: PUSH
22111: LD_STRING 
22113: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
22114: LD_ADDR_OWVAR 31
22118: PUSH
22119: LD_INT 0
22121: PUSH
22122: LD_INT 0
22124: PUSH
22125: LD_INT 0
22127: PUSH
22128: LD_INT 0
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: ST_TO_ADDR
// hc_class := class_apeman ;
22137: LD_ADDR_OWVAR 28
22141: PUSH
22142: LD_INT 12
22144: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
22145: CALL_OW 44
22149: PPUSH
22150: LD_INT 1
22152: PPUSH
22153: CALL_OW 51
// end ;
22157: LD_VAR 0 1
22161: RET
// export function hHackBoom ; begin
22162: LD_INT 0
22164: PPUSH
// uc_side := your_side ;
22165: LD_ADDR_OWVAR 20
22169: PUSH
22170: LD_OWVAR 2
22174: ST_TO_ADDR
// uc_nation := 1 ;
22175: LD_ADDR_OWVAR 21
22179: PUSH
22180: LD_INT 1
22182: ST_TO_ADDR
// vc_chassis := us_morphling ;
22183: LD_ADDR_OWVAR 37
22187: PUSH
22188: LD_INT 5
22190: ST_TO_ADDR
// vc_engine := engine_siberite ;
22191: LD_ADDR_OWVAR 39
22195: PUSH
22196: LD_INT 3
22198: ST_TO_ADDR
// vc_control := control_computer ;
22199: LD_ADDR_OWVAR 38
22203: PUSH
22204: LD_INT 3
22206: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
22207: LD_ADDR_OWVAR 40
22211: PUSH
22212: LD_INT 8
22214: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22215: CALL_OW 45
22219: PPUSH
22220: LD_INT 1
22222: PPUSH
22223: CALL_OW 51
// end ; end_of_file
22227: LD_VAR 0 1
22231: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22232: LD_INT 0
22234: PPUSH
22235: PPUSH
22236: PPUSH
22237: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22238: LD_VAR 0 1
22242: PPUSH
22243: CALL_OW 264
22247: PUSH
22248: LD_EXP 29
22252: EQUAL
22253: IFFALSE 22325
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22255: LD_INT 68
22257: PPUSH
22258: LD_VAR 0 1
22262: PPUSH
22263: CALL_OW 255
22267: PPUSH
22268: CALL_OW 321
22272: PUSH
22273: LD_INT 2
22275: EQUAL
22276: IFFALSE 22288
// eff := 70 else
22278: LD_ADDR_VAR 0 4
22282: PUSH
22283: LD_INT 70
22285: ST_TO_ADDR
22286: GO 22296
// eff := 30 ;
22288: LD_ADDR_VAR 0 4
22292: PUSH
22293: LD_INT 30
22295: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22296: LD_VAR 0 1
22300: PPUSH
22301: CALL_OW 250
22305: PPUSH
22306: LD_VAR 0 1
22310: PPUSH
22311: CALL_OW 251
22315: PPUSH
22316: LD_VAR 0 4
22320: PPUSH
22321: CALL_OW 495
// end ; end ;
22325: LD_VAR 0 2
22329: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22330: LD_INT 0
22332: PPUSH
// end ;
22333: LD_VAR 0 4
22337: RET
// export function SOS_Command ( cmd ) ; begin
22338: LD_INT 0
22340: PPUSH
// end ;
22341: LD_VAR 0 2
22345: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22346: LD_VAR 0 1
22350: PUSH
22351: LD_INT 254
22353: EQUAL
22354: PUSH
22355: LD_VAR 0 2
22359: PPUSH
22360: CALL_OW 264
22364: PUSH
22365: LD_EXP 27
22369: EQUAL
22370: AND
22371: PUSH
22372: LD_VAR 0 3
22376: PPUSH
22377: CALL_OW 263
22381: PUSH
22382: LD_INT 3
22384: EQUAL
22385: AND
22386: IFFALSE 22402
// HackDestroyVehicle ( unit , selectedUnit ) ;
22388: LD_VAR 0 2
22392: PPUSH
22393: LD_VAR 0 3
22397: PPUSH
22398: CALL 23909 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22402: LD_VAR 0 1
22406: PUSH
22407: LD_INT 255
22409: EQUAL
22410: PUSH
22411: LD_VAR 0 2
22415: PPUSH
22416: CALL_OW 264
22420: PUSH
22421: LD_INT 14
22423: PUSH
22424: LD_INT 53
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: IN
22431: AND
22432: PUSH
22433: LD_VAR 0 4
22437: PPUSH
22438: LD_VAR 0 5
22442: PPUSH
22443: CALL_OW 488
22447: AND
22448: IFFALSE 22472
// CutTreeXYR ( unit , x , y , 12 ) ;
22450: LD_VAR 0 2
22454: PPUSH
22455: LD_VAR 0 4
22459: PPUSH
22460: LD_VAR 0 5
22464: PPUSH
22465: LD_INT 12
22467: PPUSH
22468: CALL 22475 0 4
// end ;
22472: PPOPN 5
22474: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22475: LD_INT 0
22477: PPUSH
22478: PPUSH
22479: PPUSH
22480: PPUSH
22481: PPUSH
22482: PPUSH
22483: PPUSH
22484: PPUSH
22485: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
22486: LD_VAR 0 1
22490: NOT
22491: PUSH
22492: LD_VAR 0 2
22496: PPUSH
22497: LD_VAR 0 3
22501: PPUSH
22502: CALL_OW 488
22506: NOT
22507: OR
22508: PUSH
22509: LD_VAR 0 4
22513: NOT
22514: OR
22515: IFFALSE 22519
// exit ;
22517: GO 22859
// list := [ ] ;
22519: LD_ADDR_VAR 0 13
22523: PUSH
22524: EMPTY
22525: ST_TO_ADDR
// if x - r < 0 then
22526: LD_VAR 0 2
22530: PUSH
22531: LD_VAR 0 4
22535: MINUS
22536: PUSH
22537: LD_INT 0
22539: LESS
22540: IFFALSE 22552
// min_x := 0 else
22542: LD_ADDR_VAR 0 7
22546: PUSH
22547: LD_INT 0
22549: ST_TO_ADDR
22550: GO 22568
// min_x := x - r ;
22552: LD_ADDR_VAR 0 7
22556: PUSH
22557: LD_VAR 0 2
22561: PUSH
22562: LD_VAR 0 4
22566: MINUS
22567: ST_TO_ADDR
// if y - r < 0 then
22568: LD_VAR 0 3
22572: PUSH
22573: LD_VAR 0 4
22577: MINUS
22578: PUSH
22579: LD_INT 0
22581: LESS
22582: IFFALSE 22594
// min_y := 0 else
22584: LD_ADDR_VAR 0 8
22588: PUSH
22589: LD_INT 0
22591: ST_TO_ADDR
22592: GO 22610
// min_y := y - r ;
22594: LD_ADDR_VAR 0 8
22598: PUSH
22599: LD_VAR 0 3
22603: PUSH
22604: LD_VAR 0 4
22608: MINUS
22609: ST_TO_ADDR
// max_x := x + r ;
22610: LD_ADDR_VAR 0 9
22614: PUSH
22615: LD_VAR 0 2
22619: PUSH
22620: LD_VAR 0 4
22624: PLUS
22625: ST_TO_ADDR
// max_y := y + r ;
22626: LD_ADDR_VAR 0 10
22630: PUSH
22631: LD_VAR 0 3
22635: PUSH
22636: LD_VAR 0 4
22640: PLUS
22641: ST_TO_ADDR
// for _x = min_x to max_x do
22642: LD_ADDR_VAR 0 11
22646: PUSH
22647: DOUBLE
22648: LD_VAR 0 7
22652: DEC
22653: ST_TO_ADDR
22654: LD_VAR 0 9
22658: PUSH
22659: FOR_TO
22660: IFFALSE 22777
// for _y = min_y to max_y do
22662: LD_ADDR_VAR 0 12
22666: PUSH
22667: DOUBLE
22668: LD_VAR 0 8
22672: DEC
22673: ST_TO_ADDR
22674: LD_VAR 0 10
22678: PUSH
22679: FOR_TO
22680: IFFALSE 22773
// begin if not ValidHex ( _x , _y ) then
22682: LD_VAR 0 11
22686: PPUSH
22687: LD_VAR 0 12
22691: PPUSH
22692: CALL_OW 488
22696: NOT
22697: IFFALSE 22701
// continue ;
22699: GO 22679
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22701: LD_VAR 0 11
22705: PPUSH
22706: LD_VAR 0 12
22710: PPUSH
22711: CALL_OW 351
22715: PUSH
22716: LD_VAR 0 11
22720: PPUSH
22721: LD_VAR 0 12
22725: PPUSH
22726: CALL_OW 554
22730: AND
22731: IFFALSE 22771
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22733: LD_ADDR_VAR 0 13
22737: PUSH
22738: LD_VAR 0 13
22742: PPUSH
22743: LD_VAR 0 13
22747: PUSH
22748: LD_INT 1
22750: PLUS
22751: PPUSH
22752: LD_VAR 0 11
22756: PUSH
22757: LD_VAR 0 12
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: PPUSH
22766: CALL_OW 2
22770: ST_TO_ADDR
// end ;
22771: GO 22679
22773: POP
22774: POP
22775: GO 22659
22777: POP
22778: POP
// if not list then
22779: LD_VAR 0 13
22783: NOT
22784: IFFALSE 22788
// exit ;
22786: GO 22859
// for i in list do
22788: LD_ADDR_VAR 0 6
22792: PUSH
22793: LD_VAR 0 13
22797: PUSH
22798: FOR_IN
22799: IFFALSE 22857
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22801: LD_VAR 0 1
22805: PPUSH
22806: LD_STRING M
22808: PUSH
22809: LD_VAR 0 6
22813: PUSH
22814: LD_INT 1
22816: ARRAY
22817: PUSH
22818: LD_VAR 0 6
22822: PUSH
22823: LD_INT 2
22825: ARRAY
22826: PUSH
22827: LD_INT 0
22829: PUSH
22830: LD_INT 0
22832: PUSH
22833: LD_INT 0
22835: PUSH
22836: LD_INT 0
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: PUSH
22848: EMPTY
22849: LIST
22850: PPUSH
22851: CALL_OW 447
22855: GO 22798
22857: POP
22858: POP
// end ;
22859: LD_VAR 0 5
22863: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22864: LD_EXP 95
22868: NOT
22869: IFFALSE 22919
22871: GO 22873
22873: DISABLE
// begin initHack := true ;
22874: LD_ADDR_EXP 95
22878: PUSH
22879: LD_INT 1
22881: ST_TO_ADDR
// hackTanks := [ ] ;
22882: LD_ADDR_EXP 96
22886: PUSH
22887: EMPTY
22888: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22889: LD_ADDR_EXP 97
22893: PUSH
22894: EMPTY
22895: ST_TO_ADDR
// hackLimit := 3 ;
22896: LD_ADDR_EXP 98
22900: PUSH
22901: LD_INT 3
22903: ST_TO_ADDR
// hackDist := 12 ;
22904: LD_ADDR_EXP 99
22908: PUSH
22909: LD_INT 12
22911: ST_TO_ADDR
// hackCounter := [ ] ;
22912: LD_ADDR_EXP 100
22916: PUSH
22917: EMPTY
22918: ST_TO_ADDR
// end ;
22919: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22920: LD_EXP 95
22924: PUSH
22925: LD_INT 34
22927: PUSH
22928: LD_EXP 27
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: PPUSH
22937: CALL_OW 69
22941: AND
22942: IFFALSE 23197
22944: GO 22946
22946: DISABLE
22947: LD_INT 0
22949: PPUSH
22950: PPUSH
// begin enable ;
22951: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22952: LD_ADDR_VAR 0 1
22956: PUSH
22957: LD_INT 34
22959: PUSH
22960: LD_EXP 27
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PPUSH
22969: CALL_OW 69
22973: PUSH
22974: FOR_IN
22975: IFFALSE 23195
// begin if not i in hackTanks then
22977: LD_VAR 0 1
22981: PUSH
22982: LD_EXP 96
22986: IN
22987: NOT
22988: IFFALSE 23071
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22990: LD_ADDR_EXP 96
22994: PUSH
22995: LD_EXP 96
22999: PPUSH
23000: LD_EXP 96
23004: PUSH
23005: LD_INT 1
23007: PLUS
23008: PPUSH
23009: LD_VAR 0 1
23013: PPUSH
23014: CALL_OW 1
23018: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23019: LD_ADDR_EXP 97
23023: PUSH
23024: LD_EXP 97
23028: PPUSH
23029: LD_EXP 97
23033: PUSH
23034: LD_INT 1
23036: PLUS
23037: PPUSH
23038: EMPTY
23039: PPUSH
23040: CALL_OW 1
23044: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23045: LD_ADDR_EXP 100
23049: PUSH
23050: LD_EXP 100
23054: PPUSH
23055: LD_EXP 100
23059: PUSH
23060: LD_INT 1
23062: PLUS
23063: PPUSH
23064: EMPTY
23065: PPUSH
23066: CALL_OW 1
23070: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23071: LD_VAR 0 1
23075: PPUSH
23076: CALL_OW 302
23080: NOT
23081: IFFALSE 23094
// begin HackUnlinkAll ( i ) ;
23083: LD_VAR 0 1
23087: PPUSH
23088: CALL 23200 0 1
// continue ;
23092: GO 22974
// end ; HackCheckCapturedStatus ( i ) ;
23094: LD_VAR 0 1
23098: PPUSH
23099: CALL 23643 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23103: LD_ADDR_VAR 0 2
23107: PUSH
23108: LD_INT 81
23110: PUSH
23111: LD_VAR 0 1
23115: PPUSH
23116: CALL_OW 255
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: PUSH
23125: LD_INT 33
23127: PUSH
23128: LD_INT 3
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: PUSH
23135: LD_INT 91
23137: PUSH
23138: LD_VAR 0 1
23142: PUSH
23143: LD_EXP 99
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: LIST
23152: PUSH
23153: LD_INT 50
23155: PUSH
23156: EMPTY
23157: LIST
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: PPUSH
23165: CALL_OW 69
23169: ST_TO_ADDR
// if not tmp then
23170: LD_VAR 0 2
23174: NOT
23175: IFFALSE 23179
// continue ;
23177: GO 22974
// HackLink ( i , tmp ) ;
23179: LD_VAR 0 1
23183: PPUSH
23184: LD_VAR 0 2
23188: PPUSH
23189: CALL 23336 0 2
// end ;
23193: GO 22974
23195: POP
23196: POP
// end ;
23197: PPOPN 2
23199: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23200: LD_INT 0
23202: PPUSH
23203: PPUSH
23204: PPUSH
// if not hack in hackTanks then
23205: LD_VAR 0 1
23209: PUSH
23210: LD_EXP 96
23214: IN
23215: NOT
23216: IFFALSE 23220
// exit ;
23218: GO 23331
// index := GetElementIndex ( hackTanks , hack ) ;
23220: LD_ADDR_VAR 0 4
23224: PUSH
23225: LD_EXP 96
23229: PPUSH
23230: LD_VAR 0 1
23234: PPUSH
23235: CALL 28751 0 2
23239: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23240: LD_EXP 97
23244: PUSH
23245: LD_VAR 0 4
23249: ARRAY
23250: IFFALSE 23331
// begin for i in hackTanksCaptured [ index ] do
23252: LD_ADDR_VAR 0 3
23256: PUSH
23257: LD_EXP 97
23261: PUSH
23262: LD_VAR 0 4
23266: ARRAY
23267: PUSH
23268: FOR_IN
23269: IFFALSE 23295
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23271: LD_VAR 0 3
23275: PUSH
23276: LD_INT 1
23278: ARRAY
23279: PPUSH
23280: LD_VAR 0 3
23284: PUSH
23285: LD_INT 2
23287: ARRAY
23288: PPUSH
23289: CALL_OW 235
23293: GO 23268
23295: POP
23296: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23297: LD_ADDR_EXP 97
23301: PUSH
23302: LD_EXP 97
23306: PPUSH
23307: LD_VAR 0 4
23311: PPUSH
23312: EMPTY
23313: PPUSH
23314: CALL_OW 1
23318: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23319: LD_VAR 0 1
23323: PPUSH
23324: LD_INT 0
23326: PPUSH
23327: CALL_OW 505
// end ; end ;
23331: LD_VAR 0 2
23335: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23336: LD_INT 0
23338: PPUSH
23339: PPUSH
23340: PPUSH
// if not hack in hackTanks or not vehicles then
23341: LD_VAR 0 1
23345: PUSH
23346: LD_EXP 96
23350: IN
23351: NOT
23352: PUSH
23353: LD_VAR 0 2
23357: NOT
23358: OR
23359: IFFALSE 23363
// exit ;
23361: GO 23638
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23363: LD_ADDR_VAR 0 2
23367: PUSH
23368: LD_VAR 0 1
23372: PPUSH
23373: LD_VAR 0 2
23377: PPUSH
23378: LD_INT 1
23380: PPUSH
23381: LD_INT 1
23383: PPUSH
23384: CALL 29401 0 4
23388: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23389: LD_ADDR_VAR 0 5
23393: PUSH
23394: LD_EXP 96
23398: PPUSH
23399: LD_VAR 0 1
23403: PPUSH
23404: CALL 28751 0 2
23408: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23409: LD_EXP 97
23413: PUSH
23414: LD_VAR 0 5
23418: ARRAY
23419: PUSH
23420: LD_EXP 98
23424: LESS
23425: IFFALSE 23614
// begin for i := 1 to vehicles do
23427: LD_ADDR_VAR 0 4
23431: PUSH
23432: DOUBLE
23433: LD_INT 1
23435: DEC
23436: ST_TO_ADDR
23437: LD_VAR 0 2
23441: PUSH
23442: FOR_TO
23443: IFFALSE 23612
// begin if hackTanksCaptured [ index ] = hackLimit then
23445: LD_EXP 97
23449: PUSH
23450: LD_VAR 0 5
23454: ARRAY
23455: PUSH
23456: LD_EXP 98
23460: EQUAL
23461: IFFALSE 23465
// break ;
23463: GO 23612
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23465: LD_ADDR_EXP 100
23469: PUSH
23470: LD_EXP 100
23474: PPUSH
23475: LD_VAR 0 5
23479: PPUSH
23480: LD_EXP 100
23484: PUSH
23485: LD_VAR 0 5
23489: ARRAY
23490: PUSH
23491: LD_INT 1
23493: PLUS
23494: PPUSH
23495: CALL_OW 1
23499: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23500: LD_ADDR_EXP 97
23504: PUSH
23505: LD_EXP 97
23509: PPUSH
23510: LD_VAR 0 5
23514: PUSH
23515: LD_EXP 97
23519: PUSH
23520: LD_VAR 0 5
23524: ARRAY
23525: PUSH
23526: LD_INT 1
23528: PLUS
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: PPUSH
23534: LD_VAR 0 2
23538: PUSH
23539: LD_VAR 0 4
23543: ARRAY
23544: PUSH
23545: LD_VAR 0 2
23549: PUSH
23550: LD_VAR 0 4
23554: ARRAY
23555: PPUSH
23556: CALL_OW 255
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: PPUSH
23565: CALL 28966 0 3
23569: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23570: LD_VAR 0 2
23574: PUSH
23575: LD_VAR 0 4
23579: ARRAY
23580: PPUSH
23581: LD_VAR 0 1
23585: PPUSH
23586: CALL_OW 255
23590: PPUSH
23591: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23595: LD_VAR 0 2
23599: PUSH
23600: LD_VAR 0 4
23604: ARRAY
23605: PPUSH
23606: CALL_OW 141
// end ;
23610: GO 23442
23612: POP
23613: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23614: LD_VAR 0 1
23618: PPUSH
23619: LD_EXP 97
23623: PUSH
23624: LD_VAR 0 5
23628: ARRAY
23629: PUSH
23630: LD_INT 0
23632: PLUS
23633: PPUSH
23634: CALL_OW 505
// end ;
23638: LD_VAR 0 3
23642: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23643: LD_INT 0
23645: PPUSH
23646: PPUSH
23647: PPUSH
23648: PPUSH
// if not hack in hackTanks then
23649: LD_VAR 0 1
23653: PUSH
23654: LD_EXP 96
23658: IN
23659: NOT
23660: IFFALSE 23664
// exit ;
23662: GO 23904
// index := GetElementIndex ( hackTanks , hack ) ;
23664: LD_ADDR_VAR 0 4
23668: PUSH
23669: LD_EXP 96
23673: PPUSH
23674: LD_VAR 0 1
23678: PPUSH
23679: CALL 28751 0 2
23683: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23684: LD_ADDR_VAR 0 3
23688: PUSH
23689: DOUBLE
23690: LD_EXP 97
23694: PUSH
23695: LD_VAR 0 4
23699: ARRAY
23700: INC
23701: ST_TO_ADDR
23702: LD_INT 1
23704: PUSH
23705: FOR_DOWNTO
23706: IFFALSE 23878
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23708: LD_ADDR_VAR 0 5
23712: PUSH
23713: LD_EXP 97
23717: PUSH
23718: LD_VAR 0 4
23722: ARRAY
23723: PUSH
23724: LD_VAR 0 3
23728: ARRAY
23729: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23730: LD_VAR 0 5
23734: PUSH
23735: LD_INT 1
23737: ARRAY
23738: PPUSH
23739: CALL_OW 302
23743: NOT
23744: PUSH
23745: LD_VAR 0 5
23749: PUSH
23750: LD_INT 1
23752: ARRAY
23753: PPUSH
23754: CALL_OW 255
23758: PUSH
23759: LD_VAR 0 1
23763: PPUSH
23764: CALL_OW 255
23768: NONEQUAL
23769: OR
23770: IFFALSE 23876
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23772: LD_VAR 0 5
23776: PUSH
23777: LD_INT 1
23779: ARRAY
23780: PPUSH
23781: CALL_OW 305
23785: PUSH
23786: LD_VAR 0 5
23790: PUSH
23791: LD_INT 1
23793: ARRAY
23794: PPUSH
23795: CALL_OW 255
23799: PUSH
23800: LD_VAR 0 1
23804: PPUSH
23805: CALL_OW 255
23809: EQUAL
23810: AND
23811: IFFALSE 23835
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23813: LD_VAR 0 5
23817: PUSH
23818: LD_INT 1
23820: ARRAY
23821: PPUSH
23822: LD_VAR 0 5
23826: PUSH
23827: LD_INT 2
23829: ARRAY
23830: PPUSH
23831: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23835: LD_ADDR_EXP 97
23839: PUSH
23840: LD_EXP 97
23844: PPUSH
23845: LD_VAR 0 4
23849: PPUSH
23850: LD_EXP 97
23854: PUSH
23855: LD_VAR 0 4
23859: ARRAY
23860: PPUSH
23861: LD_VAR 0 3
23865: PPUSH
23866: CALL_OW 3
23870: PPUSH
23871: CALL_OW 1
23875: ST_TO_ADDR
// end ; end ;
23876: GO 23705
23878: POP
23879: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23880: LD_VAR 0 1
23884: PPUSH
23885: LD_EXP 97
23889: PUSH
23890: LD_VAR 0 4
23894: ARRAY
23895: PUSH
23896: LD_INT 0
23898: PLUS
23899: PPUSH
23900: CALL_OW 505
// end ;
23904: LD_VAR 0 2
23908: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23909: LD_INT 0
23911: PPUSH
23912: PPUSH
23913: PPUSH
23914: PPUSH
// if not hack in hackTanks then
23915: LD_VAR 0 1
23919: PUSH
23920: LD_EXP 96
23924: IN
23925: NOT
23926: IFFALSE 23930
// exit ;
23928: GO 24015
// index := GetElementIndex ( hackTanks , hack ) ;
23930: LD_ADDR_VAR 0 5
23934: PUSH
23935: LD_EXP 96
23939: PPUSH
23940: LD_VAR 0 1
23944: PPUSH
23945: CALL 28751 0 2
23949: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23950: LD_ADDR_VAR 0 4
23954: PUSH
23955: DOUBLE
23956: LD_INT 1
23958: DEC
23959: ST_TO_ADDR
23960: LD_EXP 97
23964: PUSH
23965: LD_VAR 0 5
23969: ARRAY
23970: PUSH
23971: FOR_TO
23972: IFFALSE 24013
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23974: LD_EXP 97
23978: PUSH
23979: LD_VAR 0 5
23983: ARRAY
23984: PUSH
23985: LD_VAR 0 4
23989: ARRAY
23990: PUSH
23991: LD_INT 1
23993: ARRAY
23994: PUSH
23995: LD_VAR 0 2
23999: EQUAL
24000: IFFALSE 24011
// KillUnit ( vehicle ) ;
24002: LD_VAR 0 2
24006: PPUSH
24007: CALL_OW 66
24011: GO 23971
24013: POP
24014: POP
// end ; end_of_file
24015: LD_VAR 0 3
24019: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24020: LD_INT 0
24022: PPUSH
24023: PPUSH
// if exist_mode then
24024: LD_VAR 0 2
24028: IFFALSE 24053
// unit := CreateCharacter ( prefix & ident ) else
24030: LD_ADDR_VAR 0 5
24034: PUSH
24035: LD_VAR 0 3
24039: PUSH
24040: LD_VAR 0 1
24044: STR
24045: PPUSH
24046: CALL_OW 34
24050: ST_TO_ADDR
24051: GO 24068
// unit := NewCharacter ( ident ) ;
24053: LD_ADDR_VAR 0 5
24057: PUSH
24058: LD_VAR 0 1
24062: PPUSH
24063: CALL_OW 25
24067: ST_TO_ADDR
// result := unit ;
24068: LD_ADDR_VAR 0 4
24072: PUSH
24073: LD_VAR 0 5
24077: ST_TO_ADDR
// end ;
24078: LD_VAR 0 4
24082: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24083: LD_INT 0
24085: PPUSH
24086: PPUSH
// if not side or not nation then
24087: LD_VAR 0 1
24091: NOT
24092: PUSH
24093: LD_VAR 0 2
24097: NOT
24098: OR
24099: IFFALSE 24103
// exit ;
24101: GO 24867
// case nation of nation_american :
24103: LD_VAR 0 2
24107: PUSH
24108: LD_INT 1
24110: DOUBLE
24111: EQUAL
24112: IFTRUE 24116
24114: GO 24330
24116: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24117: LD_ADDR_VAR 0 4
24121: PUSH
24122: LD_INT 35
24124: PUSH
24125: LD_INT 45
24127: PUSH
24128: LD_INT 46
24130: PUSH
24131: LD_INT 47
24133: PUSH
24134: LD_INT 82
24136: PUSH
24137: LD_INT 83
24139: PUSH
24140: LD_INT 84
24142: PUSH
24143: LD_INT 85
24145: PUSH
24146: LD_INT 86
24148: PUSH
24149: LD_INT 1
24151: PUSH
24152: LD_INT 2
24154: PUSH
24155: LD_INT 6
24157: PUSH
24158: LD_INT 15
24160: PUSH
24161: LD_INT 16
24163: PUSH
24164: LD_INT 7
24166: PUSH
24167: LD_INT 12
24169: PUSH
24170: LD_INT 13
24172: PUSH
24173: LD_INT 10
24175: PUSH
24176: LD_INT 14
24178: PUSH
24179: LD_INT 20
24181: PUSH
24182: LD_INT 21
24184: PUSH
24185: LD_INT 22
24187: PUSH
24188: LD_INT 25
24190: PUSH
24191: LD_INT 32
24193: PUSH
24194: LD_INT 27
24196: PUSH
24197: LD_INT 36
24199: PUSH
24200: LD_INT 69
24202: PUSH
24203: LD_INT 39
24205: PUSH
24206: LD_INT 34
24208: PUSH
24209: LD_INT 40
24211: PUSH
24212: LD_INT 48
24214: PUSH
24215: LD_INT 49
24217: PUSH
24218: LD_INT 50
24220: PUSH
24221: LD_INT 51
24223: PUSH
24224: LD_INT 52
24226: PUSH
24227: LD_INT 53
24229: PUSH
24230: LD_INT 54
24232: PUSH
24233: LD_INT 55
24235: PUSH
24236: LD_INT 56
24238: PUSH
24239: LD_INT 57
24241: PUSH
24242: LD_INT 58
24244: PUSH
24245: LD_INT 59
24247: PUSH
24248: LD_INT 60
24250: PUSH
24251: LD_INT 61
24253: PUSH
24254: LD_INT 62
24256: PUSH
24257: LD_INT 80
24259: PUSH
24260: LD_INT 82
24262: PUSH
24263: LD_INT 83
24265: PUSH
24266: LD_INT 84
24268: PUSH
24269: LD_INT 85
24271: PUSH
24272: LD_INT 86
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: ST_TO_ADDR
24328: GO 24791
24330: LD_INT 2
24332: DOUBLE
24333: EQUAL
24334: IFTRUE 24338
24336: GO 24560
24338: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
24339: LD_ADDR_VAR 0 4
24343: PUSH
24344: LD_INT 35
24346: PUSH
24347: LD_INT 45
24349: PUSH
24350: LD_INT 46
24352: PUSH
24353: LD_INT 47
24355: PUSH
24356: LD_INT 82
24358: PUSH
24359: LD_INT 83
24361: PUSH
24362: LD_INT 84
24364: PUSH
24365: LD_INT 85
24367: PUSH
24368: LD_INT 87
24370: PUSH
24371: LD_INT 70
24373: PUSH
24374: LD_INT 1
24376: PUSH
24377: LD_INT 11
24379: PUSH
24380: LD_INT 3
24382: PUSH
24383: LD_INT 4
24385: PUSH
24386: LD_INT 5
24388: PUSH
24389: LD_INT 6
24391: PUSH
24392: LD_INT 15
24394: PUSH
24395: LD_INT 18
24397: PUSH
24398: LD_INT 7
24400: PUSH
24401: LD_INT 17
24403: PUSH
24404: LD_INT 8
24406: PUSH
24407: LD_INT 20
24409: PUSH
24410: LD_INT 21
24412: PUSH
24413: LD_INT 22
24415: PUSH
24416: LD_INT 72
24418: PUSH
24419: LD_INT 26
24421: PUSH
24422: LD_INT 69
24424: PUSH
24425: LD_INT 39
24427: PUSH
24428: LD_INT 40
24430: PUSH
24431: LD_INT 41
24433: PUSH
24434: LD_INT 42
24436: PUSH
24437: LD_INT 43
24439: PUSH
24440: LD_INT 48
24442: PUSH
24443: LD_INT 49
24445: PUSH
24446: LD_INT 50
24448: PUSH
24449: LD_INT 51
24451: PUSH
24452: LD_INT 52
24454: PUSH
24455: LD_INT 53
24457: PUSH
24458: LD_INT 54
24460: PUSH
24461: LD_INT 55
24463: PUSH
24464: LD_INT 56
24466: PUSH
24467: LD_INT 60
24469: PUSH
24470: LD_INT 61
24472: PUSH
24473: LD_INT 62
24475: PUSH
24476: LD_INT 66
24478: PUSH
24479: LD_INT 67
24481: PUSH
24482: LD_INT 68
24484: PUSH
24485: LD_INT 81
24487: PUSH
24488: LD_INT 82
24490: PUSH
24491: LD_INT 83
24493: PUSH
24494: LD_INT 84
24496: PUSH
24497: LD_INT 85
24499: PUSH
24500: LD_INT 87
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: ST_TO_ADDR
24558: GO 24791
24560: LD_INT 3
24562: DOUBLE
24563: EQUAL
24564: IFTRUE 24568
24566: GO 24790
24568: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24569: LD_ADDR_VAR 0 4
24573: PUSH
24574: LD_INT 46
24576: PUSH
24577: LD_INT 47
24579: PUSH
24580: LD_INT 1
24582: PUSH
24583: LD_INT 2
24585: PUSH
24586: LD_INT 82
24588: PUSH
24589: LD_INT 83
24591: PUSH
24592: LD_INT 84
24594: PUSH
24595: LD_INT 85
24597: PUSH
24598: LD_INT 86
24600: PUSH
24601: LD_INT 11
24603: PUSH
24604: LD_INT 9
24606: PUSH
24607: LD_INT 20
24609: PUSH
24610: LD_INT 19
24612: PUSH
24613: LD_INT 21
24615: PUSH
24616: LD_INT 24
24618: PUSH
24619: LD_INT 22
24621: PUSH
24622: LD_INT 25
24624: PUSH
24625: LD_INT 28
24627: PUSH
24628: LD_INT 29
24630: PUSH
24631: LD_INT 30
24633: PUSH
24634: LD_INT 31
24636: PUSH
24637: LD_INT 37
24639: PUSH
24640: LD_INT 38
24642: PUSH
24643: LD_INT 32
24645: PUSH
24646: LD_INT 27
24648: PUSH
24649: LD_INT 33
24651: PUSH
24652: LD_INT 69
24654: PUSH
24655: LD_INT 39
24657: PUSH
24658: LD_INT 34
24660: PUSH
24661: LD_INT 40
24663: PUSH
24664: LD_INT 71
24666: PUSH
24667: LD_INT 23
24669: PUSH
24670: LD_INT 44
24672: PUSH
24673: LD_INT 48
24675: PUSH
24676: LD_INT 49
24678: PUSH
24679: LD_INT 50
24681: PUSH
24682: LD_INT 51
24684: PUSH
24685: LD_INT 52
24687: PUSH
24688: LD_INT 53
24690: PUSH
24691: LD_INT 54
24693: PUSH
24694: LD_INT 55
24696: PUSH
24697: LD_INT 56
24699: PUSH
24700: LD_INT 57
24702: PUSH
24703: LD_INT 58
24705: PUSH
24706: LD_INT 59
24708: PUSH
24709: LD_INT 63
24711: PUSH
24712: LD_INT 64
24714: PUSH
24715: LD_INT 65
24717: PUSH
24718: LD_INT 82
24720: PUSH
24721: LD_INT 83
24723: PUSH
24724: LD_INT 84
24726: PUSH
24727: LD_INT 85
24729: PUSH
24730: LD_INT 86
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: ST_TO_ADDR
24788: GO 24791
24790: POP
// if state > - 1 and state < 3 then
24791: LD_VAR 0 3
24795: PUSH
24796: LD_INT 1
24798: NEG
24799: GREATER
24800: PUSH
24801: LD_VAR 0 3
24805: PUSH
24806: LD_INT 3
24808: LESS
24809: AND
24810: IFFALSE 24867
// for i in result do
24812: LD_ADDR_VAR 0 5
24816: PUSH
24817: LD_VAR 0 4
24821: PUSH
24822: FOR_IN
24823: IFFALSE 24865
// if GetTech ( i , side ) <> state then
24825: LD_VAR 0 5
24829: PPUSH
24830: LD_VAR 0 1
24834: PPUSH
24835: CALL_OW 321
24839: PUSH
24840: LD_VAR 0 3
24844: NONEQUAL
24845: IFFALSE 24863
// result := result diff i ;
24847: LD_ADDR_VAR 0 4
24851: PUSH
24852: LD_VAR 0 4
24856: PUSH
24857: LD_VAR 0 5
24861: DIFF
24862: ST_TO_ADDR
24863: GO 24822
24865: POP
24866: POP
// end ;
24867: LD_VAR 0 4
24871: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24872: LD_INT 0
24874: PPUSH
24875: PPUSH
24876: PPUSH
// result := true ;
24877: LD_ADDR_VAR 0 3
24881: PUSH
24882: LD_INT 1
24884: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24885: LD_ADDR_VAR 0 5
24889: PUSH
24890: LD_VAR 0 2
24894: PPUSH
24895: CALL_OW 480
24899: ST_TO_ADDR
// if not tmp then
24900: LD_VAR 0 5
24904: NOT
24905: IFFALSE 24909
// exit ;
24907: GO 24958
// for i in tmp do
24909: LD_ADDR_VAR 0 4
24913: PUSH
24914: LD_VAR 0 5
24918: PUSH
24919: FOR_IN
24920: IFFALSE 24956
// if GetTech ( i , side ) <> state_researched then
24922: LD_VAR 0 4
24926: PPUSH
24927: LD_VAR 0 1
24931: PPUSH
24932: CALL_OW 321
24936: PUSH
24937: LD_INT 2
24939: NONEQUAL
24940: IFFALSE 24954
// begin result := false ;
24942: LD_ADDR_VAR 0 3
24946: PUSH
24947: LD_INT 0
24949: ST_TO_ADDR
// exit ;
24950: POP
24951: POP
24952: GO 24958
// end ;
24954: GO 24919
24956: POP
24957: POP
// end ;
24958: LD_VAR 0 3
24962: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24963: LD_INT 0
24965: PPUSH
24966: PPUSH
24967: PPUSH
24968: PPUSH
24969: PPUSH
24970: PPUSH
24971: PPUSH
24972: PPUSH
24973: PPUSH
24974: PPUSH
24975: PPUSH
24976: PPUSH
24977: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24978: LD_VAR 0 1
24982: NOT
24983: PUSH
24984: LD_VAR 0 1
24988: PPUSH
24989: CALL_OW 257
24993: PUSH
24994: LD_INT 9
24996: NONEQUAL
24997: OR
24998: IFFALSE 25002
// exit ;
25000: GO 25575
// side := GetSide ( unit ) ;
25002: LD_ADDR_VAR 0 9
25006: PUSH
25007: LD_VAR 0 1
25011: PPUSH
25012: CALL_OW 255
25016: ST_TO_ADDR
// tech_space := tech_spacanom ;
25017: LD_ADDR_VAR 0 12
25021: PUSH
25022: LD_INT 29
25024: ST_TO_ADDR
// tech_time := tech_taurad ;
25025: LD_ADDR_VAR 0 13
25029: PUSH
25030: LD_INT 28
25032: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25033: LD_ADDR_VAR 0 11
25037: PUSH
25038: LD_VAR 0 1
25042: PPUSH
25043: CALL_OW 310
25047: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25048: LD_VAR 0 11
25052: PPUSH
25053: CALL_OW 247
25057: PUSH
25058: LD_INT 2
25060: EQUAL
25061: IFFALSE 25065
// exit ;
25063: GO 25575
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25065: LD_ADDR_VAR 0 8
25069: PUSH
25070: LD_INT 81
25072: PUSH
25073: LD_VAR 0 9
25077: PUSH
25078: EMPTY
25079: LIST
25080: LIST
25081: PUSH
25082: LD_INT 3
25084: PUSH
25085: LD_INT 21
25087: PUSH
25088: LD_INT 3
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PPUSH
25103: CALL_OW 69
25107: ST_TO_ADDR
// if not tmp then
25108: LD_VAR 0 8
25112: NOT
25113: IFFALSE 25117
// exit ;
25115: GO 25575
// if in_unit then
25117: LD_VAR 0 11
25121: IFFALSE 25145
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25123: LD_ADDR_VAR 0 10
25127: PUSH
25128: LD_VAR 0 8
25132: PPUSH
25133: LD_VAR 0 11
25137: PPUSH
25138: CALL_OW 74
25142: ST_TO_ADDR
25143: GO 25165
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25145: LD_ADDR_VAR 0 10
25149: PUSH
25150: LD_VAR 0 8
25154: PPUSH
25155: LD_VAR 0 1
25159: PPUSH
25160: CALL_OW 74
25164: ST_TO_ADDR
// if not enemy then
25165: LD_VAR 0 10
25169: NOT
25170: IFFALSE 25174
// exit ;
25172: GO 25575
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25174: LD_VAR 0 11
25178: PUSH
25179: LD_VAR 0 11
25183: PPUSH
25184: LD_VAR 0 10
25188: PPUSH
25189: CALL_OW 296
25193: PUSH
25194: LD_INT 13
25196: GREATER
25197: AND
25198: PUSH
25199: LD_VAR 0 1
25203: PPUSH
25204: LD_VAR 0 10
25208: PPUSH
25209: CALL_OW 296
25213: PUSH
25214: LD_INT 12
25216: GREATER
25217: OR
25218: IFFALSE 25222
// exit ;
25220: GO 25575
// missile := [ 1 ] ;
25222: LD_ADDR_VAR 0 14
25226: PUSH
25227: LD_INT 1
25229: PUSH
25230: EMPTY
25231: LIST
25232: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25233: LD_VAR 0 9
25237: PPUSH
25238: LD_VAR 0 12
25242: PPUSH
25243: CALL_OW 325
25247: IFFALSE 25276
// missile := Insert ( missile , missile + 1 , 2 ) ;
25249: LD_ADDR_VAR 0 14
25253: PUSH
25254: LD_VAR 0 14
25258: PPUSH
25259: LD_VAR 0 14
25263: PUSH
25264: LD_INT 1
25266: PLUS
25267: PPUSH
25268: LD_INT 2
25270: PPUSH
25271: CALL_OW 2
25275: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25276: LD_VAR 0 9
25280: PPUSH
25281: LD_VAR 0 13
25285: PPUSH
25286: CALL_OW 325
25290: PUSH
25291: LD_VAR 0 10
25295: PPUSH
25296: CALL_OW 255
25300: PPUSH
25301: LD_VAR 0 13
25305: PPUSH
25306: CALL_OW 325
25310: NOT
25311: AND
25312: IFFALSE 25341
// missile := Insert ( missile , missile + 1 , 3 ) ;
25314: LD_ADDR_VAR 0 14
25318: PUSH
25319: LD_VAR 0 14
25323: PPUSH
25324: LD_VAR 0 14
25328: PUSH
25329: LD_INT 1
25331: PLUS
25332: PPUSH
25333: LD_INT 3
25335: PPUSH
25336: CALL_OW 2
25340: ST_TO_ADDR
// if missile < 2 then
25341: LD_VAR 0 14
25345: PUSH
25346: LD_INT 2
25348: LESS
25349: IFFALSE 25353
// exit ;
25351: GO 25575
// x := GetX ( enemy ) ;
25353: LD_ADDR_VAR 0 4
25357: PUSH
25358: LD_VAR 0 10
25362: PPUSH
25363: CALL_OW 250
25367: ST_TO_ADDR
// y := GetY ( enemy ) ;
25368: LD_ADDR_VAR 0 5
25372: PUSH
25373: LD_VAR 0 10
25377: PPUSH
25378: CALL_OW 251
25382: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25383: LD_ADDR_VAR 0 6
25387: PUSH
25388: LD_VAR 0 4
25392: PUSH
25393: LD_INT 1
25395: NEG
25396: PPUSH
25397: LD_INT 1
25399: PPUSH
25400: CALL_OW 12
25404: PLUS
25405: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25406: LD_ADDR_VAR 0 7
25410: PUSH
25411: LD_VAR 0 5
25415: PUSH
25416: LD_INT 1
25418: NEG
25419: PPUSH
25420: LD_INT 1
25422: PPUSH
25423: CALL_OW 12
25427: PLUS
25428: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25429: LD_VAR 0 6
25433: PPUSH
25434: LD_VAR 0 7
25438: PPUSH
25439: CALL_OW 488
25443: NOT
25444: IFFALSE 25466
// begin _x := x ;
25446: LD_ADDR_VAR 0 6
25450: PUSH
25451: LD_VAR 0 4
25455: ST_TO_ADDR
// _y := y ;
25456: LD_ADDR_VAR 0 7
25460: PUSH
25461: LD_VAR 0 5
25465: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25466: LD_ADDR_VAR 0 3
25470: PUSH
25471: LD_INT 1
25473: PPUSH
25474: LD_VAR 0 14
25478: PPUSH
25479: CALL_OW 12
25483: ST_TO_ADDR
// case i of 1 :
25484: LD_VAR 0 3
25488: PUSH
25489: LD_INT 1
25491: DOUBLE
25492: EQUAL
25493: IFTRUE 25497
25495: GO 25514
25497: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25498: LD_VAR 0 1
25502: PPUSH
25503: LD_VAR 0 10
25507: PPUSH
25508: CALL_OW 115
25512: GO 25575
25514: LD_INT 2
25516: DOUBLE
25517: EQUAL
25518: IFTRUE 25522
25520: GO 25544
25522: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25523: LD_VAR 0 1
25527: PPUSH
25528: LD_VAR 0 6
25532: PPUSH
25533: LD_VAR 0 7
25537: PPUSH
25538: CALL_OW 153
25542: GO 25575
25544: LD_INT 3
25546: DOUBLE
25547: EQUAL
25548: IFTRUE 25552
25550: GO 25574
25552: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25553: LD_VAR 0 1
25557: PPUSH
25558: LD_VAR 0 6
25562: PPUSH
25563: LD_VAR 0 7
25567: PPUSH
25568: CALL_OW 154
25572: GO 25575
25574: POP
// end ;
25575: LD_VAR 0 2
25579: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25580: LD_INT 0
25582: PPUSH
25583: PPUSH
25584: PPUSH
25585: PPUSH
25586: PPUSH
25587: PPUSH
// if not unit or not building then
25588: LD_VAR 0 1
25592: NOT
25593: PUSH
25594: LD_VAR 0 2
25598: NOT
25599: OR
25600: IFFALSE 25604
// exit ;
25602: GO 25762
// x := GetX ( building ) ;
25604: LD_ADDR_VAR 0 5
25608: PUSH
25609: LD_VAR 0 2
25613: PPUSH
25614: CALL_OW 250
25618: ST_TO_ADDR
// y := GetY ( building ) ;
25619: LD_ADDR_VAR 0 6
25623: PUSH
25624: LD_VAR 0 2
25628: PPUSH
25629: CALL_OW 251
25633: ST_TO_ADDR
// for i = 0 to 5 do
25634: LD_ADDR_VAR 0 4
25638: PUSH
25639: DOUBLE
25640: LD_INT 0
25642: DEC
25643: ST_TO_ADDR
25644: LD_INT 5
25646: PUSH
25647: FOR_TO
25648: IFFALSE 25760
// begin _x := ShiftX ( x , i , 3 ) ;
25650: LD_ADDR_VAR 0 7
25654: PUSH
25655: LD_VAR 0 5
25659: PPUSH
25660: LD_VAR 0 4
25664: PPUSH
25665: LD_INT 3
25667: PPUSH
25668: CALL_OW 272
25672: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25673: LD_ADDR_VAR 0 8
25677: PUSH
25678: LD_VAR 0 6
25682: PPUSH
25683: LD_VAR 0 4
25687: PPUSH
25688: LD_INT 3
25690: PPUSH
25691: CALL_OW 273
25695: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25696: LD_VAR 0 7
25700: PPUSH
25701: LD_VAR 0 8
25705: PPUSH
25706: CALL_OW 488
25710: NOT
25711: IFFALSE 25715
// continue ;
25713: GO 25647
// if HexInfo ( _x , _y ) = 0 then
25715: LD_VAR 0 7
25719: PPUSH
25720: LD_VAR 0 8
25724: PPUSH
25725: CALL_OW 428
25729: PUSH
25730: LD_INT 0
25732: EQUAL
25733: IFFALSE 25758
// begin ComMoveXY ( unit , _x , _y ) ;
25735: LD_VAR 0 1
25739: PPUSH
25740: LD_VAR 0 7
25744: PPUSH
25745: LD_VAR 0 8
25749: PPUSH
25750: CALL_OW 111
// exit ;
25754: POP
25755: POP
25756: GO 25762
// end ; end ;
25758: GO 25647
25760: POP
25761: POP
// end ;
25762: LD_VAR 0 3
25766: RET
// export function ScanBase ( side , base_area ) ; begin
25767: LD_INT 0
25769: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25770: LD_ADDR_VAR 0 3
25774: PUSH
25775: LD_VAR 0 2
25779: PPUSH
25780: LD_INT 81
25782: PUSH
25783: LD_VAR 0 1
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PPUSH
25792: CALL_OW 70
25796: ST_TO_ADDR
// end ;
25797: LD_VAR 0 3
25801: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25802: LD_INT 0
25804: PPUSH
25805: PPUSH
25806: PPUSH
25807: PPUSH
// result := false ;
25808: LD_ADDR_VAR 0 2
25812: PUSH
25813: LD_INT 0
25815: ST_TO_ADDR
// side := GetSide ( unit ) ;
25816: LD_ADDR_VAR 0 3
25820: PUSH
25821: LD_VAR 0 1
25825: PPUSH
25826: CALL_OW 255
25830: ST_TO_ADDR
// nat := GetNation ( unit ) ;
25831: LD_ADDR_VAR 0 4
25835: PUSH
25836: LD_VAR 0 1
25840: PPUSH
25841: CALL_OW 248
25845: ST_TO_ADDR
// case nat of 1 :
25846: LD_VAR 0 4
25850: PUSH
25851: LD_INT 1
25853: DOUBLE
25854: EQUAL
25855: IFTRUE 25859
25857: GO 25870
25859: POP
// tech := tech_lassight ; 2 :
25860: LD_ADDR_VAR 0 5
25864: PUSH
25865: LD_INT 12
25867: ST_TO_ADDR
25868: GO 25909
25870: LD_INT 2
25872: DOUBLE
25873: EQUAL
25874: IFTRUE 25878
25876: GO 25889
25878: POP
// tech := tech_mortar ; 3 :
25879: LD_ADDR_VAR 0 5
25883: PUSH
25884: LD_INT 41
25886: ST_TO_ADDR
25887: GO 25909
25889: LD_INT 3
25891: DOUBLE
25892: EQUAL
25893: IFTRUE 25897
25895: GO 25908
25897: POP
// tech := tech_bazooka ; end ;
25898: LD_ADDR_VAR 0 5
25902: PUSH
25903: LD_INT 44
25905: ST_TO_ADDR
25906: GO 25909
25908: POP
// if Researched ( side , tech ) then
25909: LD_VAR 0 3
25913: PPUSH
25914: LD_VAR 0 5
25918: PPUSH
25919: CALL_OW 325
25923: IFFALSE 25950
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25925: LD_ADDR_VAR 0 2
25929: PUSH
25930: LD_INT 5
25932: PUSH
25933: LD_INT 8
25935: PUSH
25936: LD_INT 9
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: LIST
25943: PUSH
25944: LD_VAR 0 4
25948: ARRAY
25949: ST_TO_ADDR
// end ;
25950: LD_VAR 0 2
25954: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25955: LD_INT 0
25957: PPUSH
25958: PPUSH
25959: PPUSH
// if not mines then
25960: LD_VAR 0 2
25964: NOT
25965: IFFALSE 25969
// exit ;
25967: GO 26113
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25969: LD_ADDR_VAR 0 5
25973: PUSH
25974: LD_INT 81
25976: PUSH
25977: LD_VAR 0 1
25981: PUSH
25982: EMPTY
25983: LIST
25984: LIST
25985: PUSH
25986: LD_INT 3
25988: PUSH
25989: LD_INT 21
25991: PUSH
25992: LD_INT 3
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PPUSH
26007: CALL_OW 69
26011: ST_TO_ADDR
// for i in mines do
26012: LD_ADDR_VAR 0 4
26016: PUSH
26017: LD_VAR 0 2
26021: PUSH
26022: FOR_IN
26023: IFFALSE 26111
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26025: LD_VAR 0 4
26029: PUSH
26030: LD_INT 1
26032: ARRAY
26033: PPUSH
26034: LD_VAR 0 4
26038: PUSH
26039: LD_INT 2
26041: ARRAY
26042: PPUSH
26043: CALL_OW 458
26047: NOT
26048: IFFALSE 26052
// continue ;
26050: GO 26022
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26052: LD_VAR 0 4
26056: PUSH
26057: LD_INT 1
26059: ARRAY
26060: PPUSH
26061: LD_VAR 0 4
26065: PUSH
26066: LD_INT 2
26068: ARRAY
26069: PPUSH
26070: CALL_OW 428
26074: PUSH
26075: LD_VAR 0 5
26079: IN
26080: IFFALSE 26109
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26082: LD_VAR 0 4
26086: PUSH
26087: LD_INT 1
26089: ARRAY
26090: PPUSH
26091: LD_VAR 0 4
26095: PUSH
26096: LD_INT 2
26098: ARRAY
26099: PPUSH
26100: LD_VAR 0 1
26104: PPUSH
26105: CALL_OW 456
// end ;
26109: GO 26022
26111: POP
26112: POP
// end ;
26113: LD_VAR 0 3
26117: RET
// export function Count ( array ) ; var i ; begin
26118: LD_INT 0
26120: PPUSH
26121: PPUSH
// result := 0 ;
26122: LD_ADDR_VAR 0 2
26126: PUSH
26127: LD_INT 0
26129: ST_TO_ADDR
// for i in array do
26130: LD_ADDR_VAR 0 3
26134: PUSH
26135: LD_VAR 0 1
26139: PUSH
26140: FOR_IN
26141: IFFALSE 26165
// if i then
26143: LD_VAR 0 3
26147: IFFALSE 26163
// result := result + 1 ;
26149: LD_ADDR_VAR 0 2
26153: PUSH
26154: LD_VAR 0 2
26158: PUSH
26159: LD_INT 1
26161: PLUS
26162: ST_TO_ADDR
26163: GO 26140
26165: POP
26166: POP
// end ;
26167: LD_VAR 0 2
26171: RET
// export function IsEmpty ( building ) ; begin
26172: LD_INT 0
26174: PPUSH
// if not building then
26175: LD_VAR 0 1
26179: NOT
26180: IFFALSE 26184
// exit ;
26182: GO 26227
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26184: LD_ADDR_VAR 0 2
26188: PUSH
26189: LD_VAR 0 1
26193: PUSH
26194: LD_INT 22
26196: PUSH
26197: LD_VAR 0 1
26201: PPUSH
26202: CALL_OW 255
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PUSH
26211: LD_INT 58
26213: PUSH
26214: EMPTY
26215: LIST
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: PPUSH
26221: CALL_OW 69
26225: IN
26226: ST_TO_ADDR
// end ;
26227: LD_VAR 0 2
26231: RET
// export function IsNotFull ( building ) ; begin
26232: LD_INT 0
26234: PPUSH
// if not building then
26235: LD_VAR 0 1
26239: NOT
26240: IFFALSE 26244
// exit ;
26242: GO 26263
// result := UnitsInside ( building ) < 6 ;
26244: LD_ADDR_VAR 0 2
26248: PUSH
26249: LD_VAR 0 1
26253: PPUSH
26254: CALL_OW 313
26258: PUSH
26259: LD_INT 6
26261: LESS
26262: ST_TO_ADDR
// end ;
26263: LD_VAR 0 2
26267: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26268: LD_INT 0
26270: PPUSH
26271: PPUSH
26272: PPUSH
26273: PPUSH
// tmp := [ ] ;
26274: LD_ADDR_VAR 0 3
26278: PUSH
26279: EMPTY
26280: ST_TO_ADDR
// list := [ ] ;
26281: LD_ADDR_VAR 0 5
26285: PUSH
26286: EMPTY
26287: ST_TO_ADDR
// for i = 16 to 25 do
26288: LD_ADDR_VAR 0 4
26292: PUSH
26293: DOUBLE
26294: LD_INT 16
26296: DEC
26297: ST_TO_ADDR
26298: LD_INT 25
26300: PUSH
26301: FOR_TO
26302: IFFALSE 26375
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26304: LD_ADDR_VAR 0 3
26308: PUSH
26309: LD_VAR 0 3
26313: PUSH
26314: LD_INT 22
26316: PUSH
26317: LD_VAR 0 1
26321: PPUSH
26322: CALL_OW 255
26326: PUSH
26327: EMPTY
26328: LIST
26329: LIST
26330: PUSH
26331: LD_INT 91
26333: PUSH
26334: LD_VAR 0 1
26338: PUSH
26339: LD_INT 6
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: LIST
26346: PUSH
26347: LD_INT 30
26349: PUSH
26350: LD_VAR 0 4
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: LIST
26363: PUSH
26364: EMPTY
26365: LIST
26366: PPUSH
26367: CALL_OW 69
26371: ADD
26372: ST_TO_ADDR
26373: GO 26301
26375: POP
26376: POP
// for i = 1 to tmp do
26377: LD_ADDR_VAR 0 4
26381: PUSH
26382: DOUBLE
26383: LD_INT 1
26385: DEC
26386: ST_TO_ADDR
26387: LD_VAR 0 3
26391: PUSH
26392: FOR_TO
26393: IFFALSE 26481
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26395: LD_ADDR_VAR 0 5
26399: PUSH
26400: LD_VAR 0 5
26404: PUSH
26405: LD_VAR 0 3
26409: PUSH
26410: LD_VAR 0 4
26414: ARRAY
26415: PPUSH
26416: CALL_OW 266
26420: PUSH
26421: LD_VAR 0 3
26425: PUSH
26426: LD_VAR 0 4
26430: ARRAY
26431: PPUSH
26432: CALL_OW 250
26436: PUSH
26437: LD_VAR 0 3
26441: PUSH
26442: LD_VAR 0 4
26446: ARRAY
26447: PPUSH
26448: CALL_OW 251
26452: PUSH
26453: LD_VAR 0 3
26457: PUSH
26458: LD_VAR 0 4
26462: ARRAY
26463: PPUSH
26464: CALL_OW 254
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: PUSH
26475: EMPTY
26476: LIST
26477: ADD
26478: ST_TO_ADDR
26479: GO 26392
26481: POP
26482: POP
// result := list ;
26483: LD_ADDR_VAR 0 2
26487: PUSH
26488: LD_VAR 0 5
26492: ST_TO_ADDR
// end ;
26493: LD_VAR 0 2
26497: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26498: LD_INT 0
26500: PPUSH
26501: PPUSH
26502: PPUSH
26503: PPUSH
26504: PPUSH
26505: PPUSH
26506: PPUSH
// if not factory then
26507: LD_VAR 0 1
26511: NOT
26512: IFFALSE 26516
// exit ;
26514: GO 27109
// if control = control_apeman then
26516: LD_VAR 0 4
26520: PUSH
26521: LD_INT 5
26523: EQUAL
26524: IFFALSE 26633
// begin tmp := UnitsInside ( factory ) ;
26526: LD_ADDR_VAR 0 8
26530: PUSH
26531: LD_VAR 0 1
26535: PPUSH
26536: CALL_OW 313
26540: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26541: LD_VAR 0 8
26545: PPUSH
26546: LD_INT 25
26548: PUSH
26549: LD_INT 12
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: PPUSH
26556: CALL_OW 72
26560: NOT
26561: IFFALSE 26571
// control := control_manual ;
26563: LD_ADDR_VAR 0 4
26567: PUSH
26568: LD_INT 1
26570: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26571: LD_ADDR_VAR 0 8
26575: PUSH
26576: LD_VAR 0 1
26580: PPUSH
26581: CALL 26268 0 1
26585: ST_TO_ADDR
// if tmp then
26586: LD_VAR 0 8
26590: IFFALSE 26633
// begin for i in tmp do
26592: LD_ADDR_VAR 0 7
26596: PUSH
26597: LD_VAR 0 8
26601: PUSH
26602: FOR_IN
26603: IFFALSE 26631
// if i [ 1 ] = b_ext_radio then
26605: LD_VAR 0 7
26609: PUSH
26610: LD_INT 1
26612: ARRAY
26613: PUSH
26614: LD_INT 22
26616: EQUAL
26617: IFFALSE 26629
// begin control := control_remote ;
26619: LD_ADDR_VAR 0 4
26623: PUSH
26624: LD_INT 2
26626: ST_TO_ADDR
// break ;
26627: GO 26631
// end ;
26629: GO 26602
26631: POP
26632: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26633: LD_VAR 0 1
26637: PPUSH
26638: LD_VAR 0 2
26642: PPUSH
26643: LD_VAR 0 3
26647: PPUSH
26648: LD_VAR 0 4
26652: PPUSH
26653: LD_VAR 0 5
26657: PPUSH
26658: CALL_OW 448
26662: IFFALSE 26697
// begin result := [ chassis , engine , control , weapon ] ;
26664: LD_ADDR_VAR 0 6
26668: PUSH
26669: LD_VAR 0 2
26673: PUSH
26674: LD_VAR 0 3
26678: PUSH
26679: LD_VAR 0 4
26683: PUSH
26684: LD_VAR 0 5
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: ST_TO_ADDR
// exit ;
26695: GO 27109
// end ; _chassis := AvailableChassisList ( factory ) ;
26697: LD_ADDR_VAR 0 9
26701: PUSH
26702: LD_VAR 0 1
26706: PPUSH
26707: CALL_OW 475
26711: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26712: LD_ADDR_VAR 0 11
26716: PUSH
26717: LD_VAR 0 1
26721: PPUSH
26722: CALL_OW 476
26726: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26727: LD_ADDR_VAR 0 12
26731: PUSH
26732: LD_VAR 0 1
26736: PPUSH
26737: CALL_OW 477
26741: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26742: LD_ADDR_VAR 0 10
26746: PUSH
26747: LD_VAR 0 1
26751: PPUSH
26752: CALL_OW 478
26756: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26757: LD_VAR 0 9
26761: NOT
26762: PUSH
26763: LD_VAR 0 11
26767: NOT
26768: OR
26769: PUSH
26770: LD_VAR 0 12
26774: NOT
26775: OR
26776: PUSH
26777: LD_VAR 0 10
26781: NOT
26782: OR
26783: IFFALSE 26818
// begin result := [ chassis , engine , control , weapon ] ;
26785: LD_ADDR_VAR 0 6
26789: PUSH
26790: LD_VAR 0 2
26794: PUSH
26795: LD_VAR 0 3
26799: PUSH
26800: LD_VAR 0 4
26804: PUSH
26805: LD_VAR 0 5
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: LIST
26814: LIST
26815: ST_TO_ADDR
// exit ;
26816: GO 27109
// end ; if not chassis in _chassis then
26818: LD_VAR 0 2
26822: PUSH
26823: LD_VAR 0 9
26827: IN
26828: NOT
26829: IFFALSE 26855
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
26831: LD_ADDR_VAR 0 2
26835: PUSH
26836: LD_VAR 0 9
26840: PUSH
26841: LD_INT 1
26843: PPUSH
26844: LD_VAR 0 9
26848: PPUSH
26849: CALL_OW 12
26853: ARRAY
26854: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26855: LD_VAR 0 2
26859: PPUSH
26860: LD_VAR 0 3
26864: PPUSH
26865: CALL 27114 0 2
26869: NOT
26870: IFFALSE 26929
// repeat engine := _engine [ 1 ] ;
26872: LD_ADDR_VAR 0 3
26876: PUSH
26877: LD_VAR 0 11
26881: PUSH
26882: LD_INT 1
26884: ARRAY
26885: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26886: LD_ADDR_VAR 0 11
26890: PUSH
26891: LD_VAR 0 11
26895: PPUSH
26896: LD_INT 1
26898: PPUSH
26899: CALL_OW 3
26903: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26904: LD_VAR 0 2
26908: PPUSH
26909: LD_VAR 0 3
26913: PPUSH
26914: CALL 27114 0 2
26918: PUSH
26919: LD_VAR 0 11
26923: PUSH
26924: EMPTY
26925: EQUAL
26926: OR
26927: IFFALSE 26872
// if not control in _control then
26929: LD_VAR 0 4
26933: PUSH
26934: LD_VAR 0 12
26938: IN
26939: NOT
26940: IFFALSE 26966
// control := _control [ rand ( 1 , _control ) ] ;
26942: LD_ADDR_VAR 0 4
26946: PUSH
26947: LD_VAR 0 12
26951: PUSH
26952: LD_INT 1
26954: PPUSH
26955: LD_VAR 0 12
26959: PPUSH
26960: CALL_OW 12
26964: ARRAY
26965: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26966: LD_VAR 0 2
26970: PPUSH
26971: LD_VAR 0 5
26975: PPUSH
26976: CALL 27334 0 2
26980: NOT
26981: IFFALSE 27040
// repeat weapon := _weapon [ 1 ] ;
26983: LD_ADDR_VAR 0 5
26987: PUSH
26988: LD_VAR 0 10
26992: PUSH
26993: LD_INT 1
26995: ARRAY
26996: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
26997: LD_ADDR_VAR 0 10
27001: PUSH
27002: LD_VAR 0 10
27006: PPUSH
27007: LD_INT 1
27009: PPUSH
27010: CALL_OW 3
27014: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27015: LD_VAR 0 2
27019: PPUSH
27020: LD_VAR 0 5
27024: PPUSH
27025: CALL 27334 0 2
27029: PUSH
27030: LD_VAR 0 10
27034: PUSH
27035: EMPTY
27036: EQUAL
27037: OR
27038: IFFALSE 26983
// result := [ ] ;
27040: LD_ADDR_VAR 0 6
27044: PUSH
27045: EMPTY
27046: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27047: LD_VAR 0 1
27051: PPUSH
27052: LD_VAR 0 2
27056: PPUSH
27057: LD_VAR 0 3
27061: PPUSH
27062: LD_VAR 0 4
27066: PPUSH
27067: LD_VAR 0 5
27071: PPUSH
27072: CALL_OW 448
27076: IFFALSE 27109
// result := [ chassis , engine , control , weapon ] ;
27078: LD_ADDR_VAR 0 6
27082: PUSH
27083: LD_VAR 0 2
27087: PUSH
27088: LD_VAR 0 3
27092: PUSH
27093: LD_VAR 0 4
27097: PUSH
27098: LD_VAR 0 5
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: ST_TO_ADDR
// end ;
27109: LD_VAR 0 6
27113: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27114: LD_INT 0
27116: PPUSH
// if not chassis or not engine then
27117: LD_VAR 0 1
27121: NOT
27122: PUSH
27123: LD_VAR 0 2
27127: NOT
27128: OR
27129: IFFALSE 27133
// exit ;
27131: GO 27329
// case engine of engine_solar :
27133: LD_VAR 0 2
27137: PUSH
27138: LD_INT 2
27140: DOUBLE
27141: EQUAL
27142: IFTRUE 27146
27144: GO 27184
27146: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27147: LD_ADDR_VAR 0 3
27151: PUSH
27152: LD_INT 11
27154: PUSH
27155: LD_INT 12
27157: PUSH
27158: LD_INT 13
27160: PUSH
27161: LD_INT 14
27163: PUSH
27164: LD_INT 1
27166: PUSH
27167: LD_INT 2
27169: PUSH
27170: LD_INT 3
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: ST_TO_ADDR
27182: GO 27313
27184: LD_INT 1
27186: DOUBLE
27187: EQUAL
27188: IFTRUE 27192
27190: GO 27254
27192: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27193: LD_ADDR_VAR 0 3
27197: PUSH
27198: LD_INT 11
27200: PUSH
27201: LD_INT 12
27203: PUSH
27204: LD_INT 13
27206: PUSH
27207: LD_INT 14
27209: PUSH
27210: LD_INT 1
27212: PUSH
27213: LD_INT 2
27215: PUSH
27216: LD_INT 3
27218: PUSH
27219: LD_INT 4
27221: PUSH
27222: LD_INT 5
27224: PUSH
27225: LD_INT 21
27227: PUSH
27228: LD_INT 23
27230: PUSH
27231: LD_INT 22
27233: PUSH
27234: LD_INT 24
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: ST_TO_ADDR
27252: GO 27313
27254: LD_INT 3
27256: DOUBLE
27257: EQUAL
27258: IFTRUE 27262
27260: GO 27312
27262: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27263: LD_ADDR_VAR 0 3
27267: PUSH
27268: LD_INT 13
27270: PUSH
27271: LD_INT 14
27273: PUSH
27274: LD_INT 2
27276: PUSH
27277: LD_INT 3
27279: PUSH
27280: LD_INT 4
27282: PUSH
27283: LD_INT 5
27285: PUSH
27286: LD_INT 21
27288: PUSH
27289: LD_INT 22
27291: PUSH
27292: LD_INT 23
27294: PUSH
27295: LD_INT 24
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: ST_TO_ADDR
27310: GO 27313
27312: POP
// result := ( chassis in result ) ;
27313: LD_ADDR_VAR 0 3
27317: PUSH
27318: LD_VAR 0 1
27322: PUSH
27323: LD_VAR 0 3
27327: IN
27328: ST_TO_ADDR
// end ;
27329: LD_VAR 0 3
27333: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27334: LD_INT 0
27336: PPUSH
// if not chassis or not weapon then
27337: LD_VAR 0 1
27341: NOT
27342: PUSH
27343: LD_VAR 0 2
27347: NOT
27348: OR
27349: IFFALSE 27353
// exit ;
27351: GO 28379
// case weapon of us_machine_gun :
27353: LD_VAR 0 2
27357: PUSH
27358: LD_INT 2
27360: DOUBLE
27361: EQUAL
27362: IFTRUE 27366
27364: GO 27396
27366: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27367: LD_ADDR_VAR 0 3
27371: PUSH
27372: LD_INT 1
27374: PUSH
27375: LD_INT 2
27377: PUSH
27378: LD_INT 3
27380: PUSH
27381: LD_INT 4
27383: PUSH
27384: LD_INT 5
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: ST_TO_ADDR
27394: GO 28363
27396: LD_INT 3
27398: DOUBLE
27399: EQUAL
27400: IFTRUE 27404
27402: GO 27434
27404: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27405: LD_ADDR_VAR 0 3
27409: PUSH
27410: LD_INT 1
27412: PUSH
27413: LD_INT 2
27415: PUSH
27416: LD_INT 3
27418: PUSH
27419: LD_INT 4
27421: PUSH
27422: LD_INT 5
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: ST_TO_ADDR
27432: GO 28363
27434: LD_INT 11
27436: DOUBLE
27437: EQUAL
27438: IFTRUE 27442
27440: GO 27472
27442: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27443: LD_ADDR_VAR 0 3
27447: PUSH
27448: LD_INT 1
27450: PUSH
27451: LD_INT 2
27453: PUSH
27454: LD_INT 3
27456: PUSH
27457: LD_INT 4
27459: PUSH
27460: LD_INT 5
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: LIST
27467: LIST
27468: LIST
27469: ST_TO_ADDR
27470: GO 28363
27472: LD_INT 4
27474: DOUBLE
27475: EQUAL
27476: IFTRUE 27480
27478: GO 27506
27480: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27481: LD_ADDR_VAR 0 3
27485: PUSH
27486: LD_INT 2
27488: PUSH
27489: LD_INT 3
27491: PUSH
27492: LD_INT 4
27494: PUSH
27495: LD_INT 5
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: ST_TO_ADDR
27504: GO 28363
27506: LD_INT 5
27508: DOUBLE
27509: EQUAL
27510: IFTRUE 27514
27512: GO 27540
27514: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27515: LD_ADDR_VAR 0 3
27519: PUSH
27520: LD_INT 2
27522: PUSH
27523: LD_INT 3
27525: PUSH
27526: LD_INT 4
27528: PUSH
27529: LD_INT 5
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: ST_TO_ADDR
27538: GO 28363
27540: LD_INT 9
27542: DOUBLE
27543: EQUAL
27544: IFTRUE 27548
27546: GO 27574
27548: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27549: LD_ADDR_VAR 0 3
27553: PUSH
27554: LD_INT 2
27556: PUSH
27557: LD_INT 3
27559: PUSH
27560: LD_INT 4
27562: PUSH
27563: LD_INT 5
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: LIST
27570: LIST
27571: ST_TO_ADDR
27572: GO 28363
27574: LD_INT 7
27576: DOUBLE
27577: EQUAL
27578: IFTRUE 27582
27580: GO 27608
27582: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27583: LD_ADDR_VAR 0 3
27587: PUSH
27588: LD_INT 2
27590: PUSH
27591: LD_INT 3
27593: PUSH
27594: LD_INT 4
27596: PUSH
27597: LD_INT 5
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: ST_TO_ADDR
27606: GO 28363
27608: LD_INT 12
27610: DOUBLE
27611: EQUAL
27612: IFTRUE 27616
27614: GO 27642
27616: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27617: LD_ADDR_VAR 0 3
27621: PUSH
27622: LD_INT 2
27624: PUSH
27625: LD_INT 3
27627: PUSH
27628: LD_INT 4
27630: PUSH
27631: LD_INT 5
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: ST_TO_ADDR
27640: GO 28363
27642: LD_INT 13
27644: DOUBLE
27645: EQUAL
27646: IFTRUE 27650
27648: GO 27676
27650: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27651: LD_ADDR_VAR 0 3
27655: PUSH
27656: LD_INT 2
27658: PUSH
27659: LD_INT 3
27661: PUSH
27662: LD_INT 4
27664: PUSH
27665: LD_INT 5
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: ST_TO_ADDR
27674: GO 28363
27676: LD_INT 14
27678: DOUBLE
27679: EQUAL
27680: IFTRUE 27684
27682: GO 27702
27684: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27685: LD_ADDR_VAR 0 3
27689: PUSH
27690: LD_INT 4
27692: PUSH
27693: LD_INT 5
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: ST_TO_ADDR
27700: GO 28363
27702: LD_INT 6
27704: DOUBLE
27705: EQUAL
27706: IFTRUE 27710
27708: GO 27728
27710: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27711: LD_ADDR_VAR 0 3
27715: PUSH
27716: LD_INT 4
27718: PUSH
27719: LD_INT 5
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: ST_TO_ADDR
27726: GO 28363
27728: LD_INT 10
27730: DOUBLE
27731: EQUAL
27732: IFTRUE 27736
27734: GO 27754
27736: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27737: LD_ADDR_VAR 0 3
27741: PUSH
27742: LD_INT 4
27744: PUSH
27745: LD_INT 5
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: ST_TO_ADDR
27752: GO 28363
27754: LD_INT 22
27756: DOUBLE
27757: EQUAL
27758: IFTRUE 27762
27760: GO 27788
27762: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27763: LD_ADDR_VAR 0 3
27767: PUSH
27768: LD_INT 11
27770: PUSH
27771: LD_INT 12
27773: PUSH
27774: LD_INT 13
27776: PUSH
27777: LD_INT 14
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: ST_TO_ADDR
27786: GO 28363
27788: LD_INT 23
27790: DOUBLE
27791: EQUAL
27792: IFTRUE 27796
27794: GO 27822
27796: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27797: LD_ADDR_VAR 0 3
27801: PUSH
27802: LD_INT 11
27804: PUSH
27805: LD_INT 12
27807: PUSH
27808: LD_INT 13
27810: PUSH
27811: LD_INT 14
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: ST_TO_ADDR
27820: GO 28363
27822: LD_INT 24
27824: DOUBLE
27825: EQUAL
27826: IFTRUE 27830
27828: GO 27856
27830: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
27831: LD_ADDR_VAR 0 3
27835: PUSH
27836: LD_INT 11
27838: PUSH
27839: LD_INT 12
27841: PUSH
27842: LD_INT 13
27844: PUSH
27845: LD_INT 14
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: LIST
27852: LIST
27853: ST_TO_ADDR
27854: GO 28363
27856: LD_INT 30
27858: DOUBLE
27859: EQUAL
27860: IFTRUE 27864
27862: GO 27890
27864: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27865: LD_ADDR_VAR 0 3
27869: PUSH
27870: LD_INT 11
27872: PUSH
27873: LD_INT 12
27875: PUSH
27876: LD_INT 13
27878: PUSH
27879: LD_INT 14
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: LIST
27886: LIST
27887: ST_TO_ADDR
27888: GO 28363
27890: LD_INT 25
27892: DOUBLE
27893: EQUAL
27894: IFTRUE 27898
27896: GO 27916
27898: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27899: LD_ADDR_VAR 0 3
27903: PUSH
27904: LD_INT 13
27906: PUSH
27907: LD_INT 14
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: ST_TO_ADDR
27914: GO 28363
27916: LD_INT 27
27918: DOUBLE
27919: EQUAL
27920: IFTRUE 27924
27922: GO 27942
27924: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27925: LD_ADDR_VAR 0 3
27929: PUSH
27930: LD_INT 13
27932: PUSH
27933: LD_INT 14
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: ST_TO_ADDR
27940: GO 28363
27942: LD_INT 28
27944: DOUBLE
27945: EQUAL
27946: IFTRUE 27950
27948: GO 27968
27950: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27951: LD_ADDR_VAR 0 3
27955: PUSH
27956: LD_INT 13
27958: PUSH
27959: LD_INT 14
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: ST_TO_ADDR
27966: GO 28363
27968: LD_INT 29
27970: DOUBLE
27971: EQUAL
27972: IFTRUE 27976
27974: GO 27994
27976: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27977: LD_ADDR_VAR 0 3
27981: PUSH
27982: LD_INT 13
27984: PUSH
27985: LD_INT 14
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: ST_TO_ADDR
27992: GO 28363
27994: LD_INT 31
27996: DOUBLE
27997: EQUAL
27998: IFTRUE 28002
28000: GO 28020
28002: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28003: LD_ADDR_VAR 0 3
28007: PUSH
28008: LD_INT 13
28010: PUSH
28011: LD_INT 14
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: ST_TO_ADDR
28018: GO 28363
28020: LD_INT 26
28022: DOUBLE
28023: EQUAL
28024: IFTRUE 28028
28026: GO 28046
28028: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28029: LD_ADDR_VAR 0 3
28033: PUSH
28034: LD_INT 13
28036: PUSH
28037: LD_INT 14
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: ST_TO_ADDR
28044: GO 28363
28046: LD_INT 42
28048: DOUBLE
28049: EQUAL
28050: IFTRUE 28054
28052: GO 28080
28054: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28055: LD_ADDR_VAR 0 3
28059: PUSH
28060: LD_INT 21
28062: PUSH
28063: LD_INT 22
28065: PUSH
28066: LD_INT 23
28068: PUSH
28069: LD_INT 24
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: ST_TO_ADDR
28078: GO 28363
28080: LD_INT 43
28082: DOUBLE
28083: EQUAL
28084: IFTRUE 28088
28086: GO 28114
28088: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28089: LD_ADDR_VAR 0 3
28093: PUSH
28094: LD_INT 21
28096: PUSH
28097: LD_INT 22
28099: PUSH
28100: LD_INT 23
28102: PUSH
28103: LD_INT 24
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: ST_TO_ADDR
28112: GO 28363
28114: LD_INT 44
28116: DOUBLE
28117: EQUAL
28118: IFTRUE 28122
28120: GO 28148
28122: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28123: LD_ADDR_VAR 0 3
28127: PUSH
28128: LD_INT 21
28130: PUSH
28131: LD_INT 22
28133: PUSH
28134: LD_INT 23
28136: PUSH
28137: LD_INT 24
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: ST_TO_ADDR
28146: GO 28363
28148: LD_INT 45
28150: DOUBLE
28151: EQUAL
28152: IFTRUE 28156
28154: GO 28182
28156: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28157: LD_ADDR_VAR 0 3
28161: PUSH
28162: LD_INT 21
28164: PUSH
28165: LD_INT 22
28167: PUSH
28168: LD_INT 23
28170: PUSH
28171: LD_INT 24
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: ST_TO_ADDR
28180: GO 28363
28182: LD_INT 49
28184: DOUBLE
28185: EQUAL
28186: IFTRUE 28190
28188: GO 28216
28190: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28191: LD_ADDR_VAR 0 3
28195: PUSH
28196: LD_INT 21
28198: PUSH
28199: LD_INT 22
28201: PUSH
28202: LD_INT 23
28204: PUSH
28205: LD_INT 24
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: LIST
28212: LIST
28213: ST_TO_ADDR
28214: GO 28363
28216: LD_INT 51
28218: DOUBLE
28219: EQUAL
28220: IFTRUE 28224
28222: GO 28250
28224: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28225: LD_ADDR_VAR 0 3
28229: PUSH
28230: LD_INT 21
28232: PUSH
28233: LD_INT 22
28235: PUSH
28236: LD_INT 23
28238: PUSH
28239: LD_INT 24
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: LIST
28246: LIST
28247: ST_TO_ADDR
28248: GO 28363
28250: LD_INT 52
28252: DOUBLE
28253: EQUAL
28254: IFTRUE 28258
28256: GO 28284
28258: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28259: LD_ADDR_VAR 0 3
28263: PUSH
28264: LD_INT 21
28266: PUSH
28267: LD_INT 22
28269: PUSH
28270: LD_INT 23
28272: PUSH
28273: LD_INT 24
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: ST_TO_ADDR
28282: GO 28363
28284: LD_INT 53
28286: DOUBLE
28287: EQUAL
28288: IFTRUE 28292
28290: GO 28310
28292: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28293: LD_ADDR_VAR 0 3
28297: PUSH
28298: LD_INT 23
28300: PUSH
28301: LD_INT 24
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: ST_TO_ADDR
28308: GO 28363
28310: LD_INT 46
28312: DOUBLE
28313: EQUAL
28314: IFTRUE 28318
28316: GO 28336
28318: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28319: LD_ADDR_VAR 0 3
28323: PUSH
28324: LD_INT 23
28326: PUSH
28327: LD_INT 24
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: ST_TO_ADDR
28334: GO 28363
28336: LD_INT 47
28338: DOUBLE
28339: EQUAL
28340: IFTRUE 28344
28342: GO 28362
28344: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28345: LD_ADDR_VAR 0 3
28349: PUSH
28350: LD_INT 23
28352: PUSH
28353: LD_INT 24
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: ST_TO_ADDR
28360: GO 28363
28362: POP
// result := ( chassis in result ) ;
28363: LD_ADDR_VAR 0 3
28367: PUSH
28368: LD_VAR 0 1
28372: PUSH
28373: LD_VAR 0 3
28377: IN
28378: ST_TO_ADDR
// end ;
28379: LD_VAR 0 3
28383: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28384: LD_INT 0
28386: PPUSH
28387: PPUSH
28388: PPUSH
28389: PPUSH
28390: PPUSH
28391: PPUSH
28392: PPUSH
// result := array ;
28393: LD_ADDR_VAR 0 5
28397: PUSH
28398: LD_VAR 0 1
28402: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28403: LD_VAR 0 1
28407: NOT
28408: PUSH
28409: LD_VAR 0 2
28413: NOT
28414: OR
28415: PUSH
28416: LD_VAR 0 3
28420: NOT
28421: OR
28422: PUSH
28423: LD_VAR 0 2
28427: PUSH
28428: LD_VAR 0 1
28432: GREATER
28433: OR
28434: PUSH
28435: LD_VAR 0 3
28439: PUSH
28440: LD_VAR 0 1
28444: GREATER
28445: OR
28446: IFFALSE 28450
// exit ;
28448: GO 28746
// if direction then
28450: LD_VAR 0 4
28454: IFFALSE 28518
// begin d := 1 ;
28456: LD_ADDR_VAR 0 9
28460: PUSH
28461: LD_INT 1
28463: ST_TO_ADDR
// if i_from > i_to then
28464: LD_VAR 0 2
28468: PUSH
28469: LD_VAR 0 3
28473: GREATER
28474: IFFALSE 28500
// length := ( array - i_from ) + i_to else
28476: LD_ADDR_VAR 0 11
28480: PUSH
28481: LD_VAR 0 1
28485: PUSH
28486: LD_VAR 0 2
28490: MINUS
28491: PUSH
28492: LD_VAR 0 3
28496: PLUS
28497: ST_TO_ADDR
28498: GO 28516
// length := i_to - i_from ;
28500: LD_ADDR_VAR 0 11
28504: PUSH
28505: LD_VAR 0 3
28509: PUSH
28510: LD_VAR 0 2
28514: MINUS
28515: ST_TO_ADDR
// end else
28516: GO 28579
// begin d := - 1 ;
28518: LD_ADDR_VAR 0 9
28522: PUSH
28523: LD_INT 1
28525: NEG
28526: ST_TO_ADDR
// if i_from > i_to then
28527: LD_VAR 0 2
28531: PUSH
28532: LD_VAR 0 3
28536: GREATER
28537: IFFALSE 28557
// length := i_from - i_to else
28539: LD_ADDR_VAR 0 11
28543: PUSH
28544: LD_VAR 0 2
28548: PUSH
28549: LD_VAR 0 3
28553: MINUS
28554: ST_TO_ADDR
28555: GO 28579
// length := ( array - i_to ) + i_from ;
28557: LD_ADDR_VAR 0 11
28561: PUSH
28562: LD_VAR 0 1
28566: PUSH
28567: LD_VAR 0 3
28571: MINUS
28572: PUSH
28573: LD_VAR 0 2
28577: PLUS
28578: ST_TO_ADDR
// end ; if not length then
28579: LD_VAR 0 11
28583: NOT
28584: IFFALSE 28588
// exit ;
28586: GO 28746
// tmp := array ;
28588: LD_ADDR_VAR 0 10
28592: PUSH
28593: LD_VAR 0 1
28597: ST_TO_ADDR
// for i = 1 to length do
28598: LD_ADDR_VAR 0 6
28602: PUSH
28603: DOUBLE
28604: LD_INT 1
28606: DEC
28607: ST_TO_ADDR
28608: LD_VAR 0 11
28612: PUSH
28613: FOR_TO
28614: IFFALSE 28734
// begin for j = 1 to array do
28616: LD_ADDR_VAR 0 7
28620: PUSH
28621: DOUBLE
28622: LD_INT 1
28624: DEC
28625: ST_TO_ADDR
28626: LD_VAR 0 1
28630: PUSH
28631: FOR_TO
28632: IFFALSE 28720
// begin k := j + d ;
28634: LD_ADDR_VAR 0 8
28638: PUSH
28639: LD_VAR 0 7
28643: PUSH
28644: LD_VAR 0 9
28648: PLUS
28649: ST_TO_ADDR
// if k > array then
28650: LD_VAR 0 8
28654: PUSH
28655: LD_VAR 0 1
28659: GREATER
28660: IFFALSE 28670
// k := 1 ;
28662: LD_ADDR_VAR 0 8
28666: PUSH
28667: LD_INT 1
28669: ST_TO_ADDR
// if not k then
28670: LD_VAR 0 8
28674: NOT
28675: IFFALSE 28687
// k := array ;
28677: LD_ADDR_VAR 0 8
28681: PUSH
28682: LD_VAR 0 1
28686: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
28687: LD_ADDR_VAR 0 10
28691: PUSH
28692: LD_VAR 0 10
28696: PPUSH
28697: LD_VAR 0 8
28701: PPUSH
28702: LD_VAR 0 1
28706: PUSH
28707: LD_VAR 0 7
28711: ARRAY
28712: PPUSH
28713: CALL_OW 1
28717: ST_TO_ADDR
// end ;
28718: GO 28631
28720: POP
28721: POP
// array := tmp ;
28722: LD_ADDR_VAR 0 1
28726: PUSH
28727: LD_VAR 0 10
28731: ST_TO_ADDR
// end ;
28732: GO 28613
28734: POP
28735: POP
// result := array ;
28736: LD_ADDR_VAR 0 5
28740: PUSH
28741: LD_VAR 0 1
28745: ST_TO_ADDR
// end ;
28746: LD_VAR 0 5
28750: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28751: LD_INT 0
28753: PPUSH
28754: PPUSH
// result := 0 ;
28755: LD_ADDR_VAR 0 3
28759: PUSH
28760: LD_INT 0
28762: ST_TO_ADDR
// if not array or not value in array then
28763: LD_VAR 0 1
28767: NOT
28768: PUSH
28769: LD_VAR 0 2
28773: PUSH
28774: LD_VAR 0 1
28778: IN
28779: NOT
28780: OR
28781: IFFALSE 28785
// exit ;
28783: GO 28839
// for i = 1 to array do
28785: LD_ADDR_VAR 0 4
28789: PUSH
28790: DOUBLE
28791: LD_INT 1
28793: DEC
28794: ST_TO_ADDR
28795: LD_VAR 0 1
28799: PUSH
28800: FOR_TO
28801: IFFALSE 28837
// if value = array [ i ] then
28803: LD_VAR 0 2
28807: PUSH
28808: LD_VAR 0 1
28812: PUSH
28813: LD_VAR 0 4
28817: ARRAY
28818: EQUAL
28819: IFFALSE 28835
// begin result := i ;
28821: LD_ADDR_VAR 0 3
28825: PUSH
28826: LD_VAR 0 4
28830: ST_TO_ADDR
// exit ;
28831: POP
28832: POP
28833: GO 28839
// end ;
28835: GO 28800
28837: POP
28838: POP
// end ;
28839: LD_VAR 0 3
28843: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
28844: LD_INT 0
28846: PPUSH
// vc_chassis := chassis ;
28847: LD_ADDR_OWVAR 37
28851: PUSH
28852: LD_VAR 0 1
28856: ST_TO_ADDR
// vc_engine := engine ;
28857: LD_ADDR_OWVAR 39
28861: PUSH
28862: LD_VAR 0 2
28866: ST_TO_ADDR
// vc_control := control ;
28867: LD_ADDR_OWVAR 38
28871: PUSH
28872: LD_VAR 0 3
28876: ST_TO_ADDR
// vc_weapon := weapon ;
28877: LD_ADDR_OWVAR 40
28881: PUSH
28882: LD_VAR 0 4
28886: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28887: LD_ADDR_OWVAR 41
28891: PUSH
28892: LD_VAR 0 5
28896: ST_TO_ADDR
// end ;
28897: LD_VAR 0 6
28901: RET
// export function WantPlant ( unit ) ; var task ; begin
28902: LD_INT 0
28904: PPUSH
28905: PPUSH
// result := false ;
28906: LD_ADDR_VAR 0 2
28910: PUSH
28911: LD_INT 0
28913: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28914: LD_ADDR_VAR 0 3
28918: PUSH
28919: LD_VAR 0 1
28923: PPUSH
28924: CALL_OW 437
28928: ST_TO_ADDR
// if task then
28929: LD_VAR 0 3
28933: IFFALSE 28961
// if task [ 1 ] [ 1 ] = p then
28935: LD_VAR 0 3
28939: PUSH
28940: LD_INT 1
28942: ARRAY
28943: PUSH
28944: LD_INT 1
28946: ARRAY
28947: PUSH
28948: LD_STRING p
28950: EQUAL
28951: IFFALSE 28961
// result := true ;
28953: LD_ADDR_VAR 0 2
28957: PUSH
28958: LD_INT 1
28960: ST_TO_ADDR
// end ;
28961: LD_VAR 0 2
28965: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28966: LD_INT 0
28968: PPUSH
28969: PPUSH
28970: PPUSH
28971: PPUSH
// if pos < 1 then
28972: LD_VAR 0 2
28976: PUSH
28977: LD_INT 1
28979: LESS
28980: IFFALSE 28984
// exit ;
28982: GO 29287
// if pos = 1 then
28984: LD_VAR 0 2
28988: PUSH
28989: LD_INT 1
28991: EQUAL
28992: IFFALSE 29025
// result := Replace ( arr , pos [ 1 ] , value ) else
28994: LD_ADDR_VAR 0 4
28998: PUSH
28999: LD_VAR 0 1
29003: PPUSH
29004: LD_VAR 0 2
29008: PUSH
29009: LD_INT 1
29011: ARRAY
29012: PPUSH
29013: LD_VAR 0 3
29017: PPUSH
29018: CALL_OW 1
29022: ST_TO_ADDR
29023: GO 29287
// begin tmp := arr ;
29025: LD_ADDR_VAR 0 6
29029: PUSH
29030: LD_VAR 0 1
29034: ST_TO_ADDR
// s_arr := [ tmp ] ;
29035: LD_ADDR_VAR 0 7
29039: PUSH
29040: LD_VAR 0 6
29044: PUSH
29045: EMPTY
29046: LIST
29047: ST_TO_ADDR
// for i = 1 to pos - 1 do
29048: LD_ADDR_VAR 0 5
29052: PUSH
29053: DOUBLE
29054: LD_INT 1
29056: DEC
29057: ST_TO_ADDR
29058: LD_VAR 0 2
29062: PUSH
29063: LD_INT 1
29065: MINUS
29066: PUSH
29067: FOR_TO
29068: IFFALSE 29113
// begin tmp := tmp [ pos [ i ] ] ;
29070: LD_ADDR_VAR 0 6
29074: PUSH
29075: LD_VAR 0 6
29079: PUSH
29080: LD_VAR 0 2
29084: PUSH
29085: LD_VAR 0 5
29089: ARRAY
29090: ARRAY
29091: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29092: LD_ADDR_VAR 0 7
29096: PUSH
29097: LD_VAR 0 7
29101: PUSH
29102: LD_VAR 0 6
29106: PUSH
29107: EMPTY
29108: LIST
29109: ADD
29110: ST_TO_ADDR
// end ;
29111: GO 29067
29113: POP
29114: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29115: LD_ADDR_VAR 0 6
29119: PUSH
29120: LD_VAR 0 6
29124: PPUSH
29125: LD_VAR 0 2
29129: PUSH
29130: LD_VAR 0 2
29134: ARRAY
29135: PPUSH
29136: LD_VAR 0 3
29140: PPUSH
29141: CALL_OW 1
29145: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29146: LD_ADDR_VAR 0 7
29150: PUSH
29151: LD_VAR 0 7
29155: PPUSH
29156: LD_VAR 0 7
29160: PPUSH
29161: LD_VAR 0 6
29165: PPUSH
29166: CALL_OW 1
29170: ST_TO_ADDR
// for i = s_arr downto 2 do
29171: LD_ADDR_VAR 0 5
29175: PUSH
29176: DOUBLE
29177: LD_VAR 0 7
29181: INC
29182: ST_TO_ADDR
29183: LD_INT 2
29185: PUSH
29186: FOR_DOWNTO
29187: IFFALSE 29271
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29189: LD_ADDR_VAR 0 6
29193: PUSH
29194: LD_VAR 0 7
29198: PUSH
29199: LD_VAR 0 5
29203: PUSH
29204: LD_INT 1
29206: MINUS
29207: ARRAY
29208: PPUSH
29209: LD_VAR 0 2
29213: PUSH
29214: LD_VAR 0 5
29218: PUSH
29219: LD_INT 1
29221: MINUS
29222: ARRAY
29223: PPUSH
29224: LD_VAR 0 7
29228: PUSH
29229: LD_VAR 0 5
29233: ARRAY
29234: PPUSH
29235: CALL_OW 1
29239: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29240: LD_ADDR_VAR 0 7
29244: PUSH
29245: LD_VAR 0 7
29249: PPUSH
29250: LD_VAR 0 5
29254: PUSH
29255: LD_INT 1
29257: MINUS
29258: PPUSH
29259: LD_VAR 0 6
29263: PPUSH
29264: CALL_OW 1
29268: ST_TO_ADDR
// end ;
29269: GO 29186
29271: POP
29272: POP
// result := s_arr [ 1 ] ;
29273: LD_ADDR_VAR 0 4
29277: PUSH
29278: LD_VAR 0 7
29282: PUSH
29283: LD_INT 1
29285: ARRAY
29286: ST_TO_ADDR
// end ; end ;
29287: LD_VAR 0 4
29291: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29292: LD_INT 0
29294: PPUSH
29295: PPUSH
// if not list then
29296: LD_VAR 0 1
29300: NOT
29301: IFFALSE 29305
// exit ;
29303: GO 29396
// i := list [ pos1 ] ;
29305: LD_ADDR_VAR 0 5
29309: PUSH
29310: LD_VAR 0 1
29314: PUSH
29315: LD_VAR 0 2
29319: ARRAY
29320: ST_TO_ADDR
// if not i then
29321: LD_VAR 0 5
29325: NOT
29326: IFFALSE 29330
// exit ;
29328: GO 29396
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29330: LD_ADDR_VAR 0 1
29334: PUSH
29335: LD_VAR 0 1
29339: PPUSH
29340: LD_VAR 0 2
29344: PPUSH
29345: LD_VAR 0 1
29349: PUSH
29350: LD_VAR 0 3
29354: ARRAY
29355: PPUSH
29356: CALL_OW 1
29360: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29361: LD_ADDR_VAR 0 1
29365: PUSH
29366: LD_VAR 0 1
29370: PPUSH
29371: LD_VAR 0 3
29375: PPUSH
29376: LD_VAR 0 5
29380: PPUSH
29381: CALL_OW 1
29385: ST_TO_ADDR
// result := list ;
29386: LD_ADDR_VAR 0 4
29390: PUSH
29391: LD_VAR 0 1
29395: ST_TO_ADDR
// end ;
29396: LD_VAR 0 4
29400: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29401: LD_INT 0
29403: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29404: LD_ADDR_VAR 0 5
29408: PUSH
29409: LD_VAR 0 1
29413: PPUSH
29414: CALL_OW 250
29418: PPUSH
29419: LD_VAR 0 1
29423: PPUSH
29424: CALL_OW 251
29428: PPUSH
29429: LD_VAR 0 2
29433: PPUSH
29434: LD_VAR 0 3
29438: PPUSH
29439: LD_VAR 0 4
29443: PPUSH
29444: CALL 29454 0 5
29448: ST_TO_ADDR
// end ;
29449: LD_VAR 0 5
29453: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29454: LD_INT 0
29456: PPUSH
29457: PPUSH
29458: PPUSH
29459: PPUSH
// if not list then
29460: LD_VAR 0 3
29464: NOT
29465: IFFALSE 29469
// exit ;
29467: GO 29857
// result := [ ] ;
29469: LD_ADDR_VAR 0 6
29473: PUSH
29474: EMPTY
29475: ST_TO_ADDR
// for i in list do
29476: LD_ADDR_VAR 0 7
29480: PUSH
29481: LD_VAR 0 3
29485: PUSH
29486: FOR_IN
29487: IFFALSE 29689
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29489: LD_ADDR_VAR 0 9
29493: PUSH
29494: LD_VAR 0 7
29498: PPUSH
29499: LD_VAR 0 1
29503: PPUSH
29504: LD_VAR 0 2
29508: PPUSH
29509: CALL_OW 297
29513: ST_TO_ADDR
// if not result then
29514: LD_VAR 0 6
29518: NOT
29519: IFFALSE 29545
// result := [ [ i , tmp ] ] else
29521: LD_ADDR_VAR 0 6
29525: PUSH
29526: LD_VAR 0 7
29530: PUSH
29531: LD_VAR 0 9
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: EMPTY
29541: LIST
29542: ST_TO_ADDR
29543: GO 29687
// begin if result [ result ] [ 2 ] < tmp then
29545: LD_VAR 0 6
29549: PUSH
29550: LD_VAR 0 6
29554: ARRAY
29555: PUSH
29556: LD_INT 2
29558: ARRAY
29559: PUSH
29560: LD_VAR 0 9
29564: LESS
29565: IFFALSE 29607
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29567: LD_ADDR_VAR 0 6
29571: PUSH
29572: LD_VAR 0 6
29576: PPUSH
29577: LD_VAR 0 6
29581: PUSH
29582: LD_INT 1
29584: PLUS
29585: PPUSH
29586: LD_VAR 0 7
29590: PUSH
29591: LD_VAR 0 9
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PPUSH
29600: CALL_OW 2
29604: ST_TO_ADDR
29605: GO 29687
// for j = 1 to result do
29607: LD_ADDR_VAR 0 8
29611: PUSH
29612: DOUBLE
29613: LD_INT 1
29615: DEC
29616: ST_TO_ADDR
29617: LD_VAR 0 6
29621: PUSH
29622: FOR_TO
29623: IFFALSE 29685
// begin if tmp < result [ j ] [ 2 ] then
29625: LD_VAR 0 9
29629: PUSH
29630: LD_VAR 0 6
29634: PUSH
29635: LD_VAR 0 8
29639: ARRAY
29640: PUSH
29641: LD_INT 2
29643: ARRAY
29644: LESS
29645: IFFALSE 29683
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29647: LD_ADDR_VAR 0 6
29651: PUSH
29652: LD_VAR 0 6
29656: PPUSH
29657: LD_VAR 0 8
29661: PPUSH
29662: LD_VAR 0 7
29666: PUSH
29667: LD_VAR 0 9
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: PPUSH
29676: CALL_OW 2
29680: ST_TO_ADDR
// break ;
29681: GO 29685
// end ; end ;
29683: GO 29622
29685: POP
29686: POP
// end ; end ;
29687: GO 29486
29689: POP
29690: POP
// if result and not asc then
29691: LD_VAR 0 6
29695: PUSH
29696: LD_VAR 0 4
29700: NOT
29701: AND
29702: IFFALSE 29777
// begin tmp := result ;
29704: LD_ADDR_VAR 0 9
29708: PUSH
29709: LD_VAR 0 6
29713: ST_TO_ADDR
// for i = tmp downto 1 do
29714: LD_ADDR_VAR 0 7
29718: PUSH
29719: DOUBLE
29720: LD_VAR 0 9
29724: INC
29725: ST_TO_ADDR
29726: LD_INT 1
29728: PUSH
29729: FOR_DOWNTO
29730: IFFALSE 29775
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
29732: LD_ADDR_VAR 0 6
29736: PUSH
29737: LD_VAR 0 6
29741: PPUSH
29742: LD_VAR 0 9
29746: PUSH
29747: LD_VAR 0 7
29751: MINUS
29752: PUSH
29753: LD_INT 1
29755: PLUS
29756: PPUSH
29757: LD_VAR 0 9
29761: PUSH
29762: LD_VAR 0 7
29766: ARRAY
29767: PPUSH
29768: CALL_OW 1
29772: ST_TO_ADDR
29773: GO 29729
29775: POP
29776: POP
// end ; tmp := [ ] ;
29777: LD_ADDR_VAR 0 9
29781: PUSH
29782: EMPTY
29783: ST_TO_ADDR
// if mode then
29784: LD_VAR 0 5
29788: IFFALSE 29857
// begin for i = 1 to result do
29790: LD_ADDR_VAR 0 7
29794: PUSH
29795: DOUBLE
29796: LD_INT 1
29798: DEC
29799: ST_TO_ADDR
29800: LD_VAR 0 6
29804: PUSH
29805: FOR_TO
29806: IFFALSE 29845
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
29808: LD_ADDR_VAR 0 9
29812: PUSH
29813: LD_VAR 0 9
29817: PPUSH
29818: LD_VAR 0 7
29822: PPUSH
29823: LD_VAR 0 6
29827: PUSH
29828: LD_VAR 0 7
29832: ARRAY
29833: PUSH
29834: LD_INT 1
29836: ARRAY
29837: PPUSH
29838: CALL_OW 1
29842: ST_TO_ADDR
29843: GO 29805
29845: POP
29846: POP
// result := tmp ;
29847: LD_ADDR_VAR 0 6
29851: PUSH
29852: LD_VAR 0 9
29856: ST_TO_ADDR
// end ; end ;
29857: LD_VAR 0 6
29861: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
29862: LD_INT 0
29864: PPUSH
29865: PPUSH
29866: PPUSH
29867: PPUSH
29868: PPUSH
29869: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
29870: LD_ADDR_VAR 0 5
29874: PUSH
29875: LD_INT 0
29877: PUSH
29878: LD_INT 0
29880: PUSH
29881: LD_INT 0
29883: PUSH
29884: EMPTY
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: LIST
29890: LIST
29891: ST_TO_ADDR
// if not x or not y then
29892: LD_VAR 0 2
29896: NOT
29897: PUSH
29898: LD_VAR 0 3
29902: NOT
29903: OR
29904: IFFALSE 29908
// exit ;
29906: GO 31554
// if not range then
29908: LD_VAR 0 4
29912: NOT
29913: IFFALSE 29923
// range := 10 ;
29915: LD_ADDR_VAR 0 4
29919: PUSH
29920: LD_INT 10
29922: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29923: LD_ADDR_VAR 0 8
29927: PUSH
29928: LD_INT 81
29930: PUSH
29931: LD_VAR 0 1
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: PUSH
29940: LD_INT 92
29942: PUSH
29943: LD_VAR 0 2
29947: PUSH
29948: LD_VAR 0 3
29952: PUSH
29953: LD_VAR 0 4
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: PUSH
29964: LD_INT 3
29966: PUSH
29967: LD_INT 21
29969: PUSH
29970: LD_INT 3
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: LIST
29985: PPUSH
29986: CALL_OW 69
29990: ST_TO_ADDR
// if not tmp then
29991: LD_VAR 0 8
29995: NOT
29996: IFFALSE 30000
// exit ;
29998: GO 31554
// for i in tmp do
30000: LD_ADDR_VAR 0 6
30004: PUSH
30005: LD_VAR 0 8
30009: PUSH
30010: FOR_IN
30011: IFFALSE 31529
// begin points := [ 0 , 0 , 0 ] ;
30013: LD_ADDR_VAR 0 9
30017: PUSH
30018: LD_INT 0
30020: PUSH
30021: LD_INT 0
30023: PUSH
30024: LD_INT 0
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: LIST
30031: ST_TO_ADDR
// bpoints := 1 ;
30032: LD_ADDR_VAR 0 10
30036: PUSH
30037: LD_INT 1
30039: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30040: LD_VAR 0 6
30044: PPUSH
30045: CALL_OW 247
30049: PUSH
30050: LD_INT 1
30052: DOUBLE
30053: EQUAL
30054: IFTRUE 30058
30056: GO 30636
30058: POP
// begin if GetClass ( i ) = 1 then
30059: LD_VAR 0 6
30063: PPUSH
30064: CALL_OW 257
30068: PUSH
30069: LD_INT 1
30071: EQUAL
30072: IFFALSE 30093
// points := [ 10 , 5 , 3 ] ;
30074: LD_ADDR_VAR 0 9
30078: PUSH
30079: LD_INT 10
30081: PUSH
30082: LD_INT 5
30084: PUSH
30085: LD_INT 3
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: LIST
30092: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30093: LD_VAR 0 6
30097: PPUSH
30098: CALL_OW 257
30102: PUSH
30103: LD_INT 2
30105: PUSH
30106: LD_INT 3
30108: PUSH
30109: LD_INT 4
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: LIST
30116: IN
30117: IFFALSE 30138
// points := [ 3 , 2 , 1 ] ;
30119: LD_ADDR_VAR 0 9
30123: PUSH
30124: LD_INT 3
30126: PUSH
30127: LD_INT 2
30129: PUSH
30130: LD_INT 1
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: LIST
30137: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30138: LD_VAR 0 6
30142: PPUSH
30143: CALL_OW 257
30147: PUSH
30148: LD_INT 5
30150: EQUAL
30151: IFFALSE 30172
// points := [ 130 , 5 , 2 ] ;
30153: LD_ADDR_VAR 0 9
30157: PUSH
30158: LD_INT 130
30160: PUSH
30161: LD_INT 5
30163: PUSH
30164: LD_INT 2
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: LIST
30171: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30172: LD_VAR 0 6
30176: PPUSH
30177: CALL_OW 257
30181: PUSH
30182: LD_INT 8
30184: EQUAL
30185: IFFALSE 30206
// points := [ 35 , 35 , 30 ] ;
30187: LD_ADDR_VAR 0 9
30191: PUSH
30192: LD_INT 35
30194: PUSH
30195: LD_INT 35
30197: PUSH
30198: LD_INT 30
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: LIST
30205: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30206: LD_VAR 0 6
30210: PPUSH
30211: CALL_OW 257
30215: PUSH
30216: LD_INT 9
30218: EQUAL
30219: IFFALSE 30240
// points := [ 20 , 55 , 40 ] ;
30221: LD_ADDR_VAR 0 9
30225: PUSH
30226: LD_INT 20
30228: PUSH
30229: LD_INT 55
30231: PUSH
30232: LD_INT 40
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: LIST
30239: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30240: LD_VAR 0 6
30244: PPUSH
30245: CALL_OW 257
30249: PUSH
30250: LD_INT 12
30252: PUSH
30253: LD_INT 16
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: IN
30260: IFFALSE 30281
// points := [ 5 , 3 , 2 ] ;
30262: LD_ADDR_VAR 0 9
30266: PUSH
30267: LD_INT 5
30269: PUSH
30270: LD_INT 3
30272: PUSH
30273: LD_INT 2
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: LIST
30280: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30281: LD_VAR 0 6
30285: PPUSH
30286: CALL_OW 257
30290: PUSH
30291: LD_INT 17
30293: EQUAL
30294: IFFALSE 30315
// points := [ 100 , 50 , 75 ] ;
30296: LD_ADDR_VAR 0 9
30300: PUSH
30301: LD_INT 100
30303: PUSH
30304: LD_INT 50
30306: PUSH
30307: LD_INT 75
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: LIST
30314: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30315: LD_VAR 0 6
30319: PPUSH
30320: CALL_OW 257
30324: PUSH
30325: LD_INT 15
30327: EQUAL
30328: IFFALSE 30349
// points := [ 10 , 5 , 3 ] ;
30330: LD_ADDR_VAR 0 9
30334: PUSH
30335: LD_INT 10
30337: PUSH
30338: LD_INT 5
30340: PUSH
30341: LD_INT 3
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: LIST
30348: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30349: LD_VAR 0 6
30353: PPUSH
30354: CALL_OW 257
30358: PUSH
30359: LD_INT 14
30361: EQUAL
30362: IFFALSE 30383
// points := [ 10 , 0 , 0 ] ;
30364: LD_ADDR_VAR 0 9
30368: PUSH
30369: LD_INT 10
30371: PUSH
30372: LD_INT 0
30374: PUSH
30375: LD_INT 0
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: LIST
30382: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30383: LD_VAR 0 6
30387: PPUSH
30388: CALL_OW 257
30392: PUSH
30393: LD_INT 11
30395: EQUAL
30396: IFFALSE 30417
// points := [ 30 , 10 , 5 ] ;
30398: LD_ADDR_VAR 0 9
30402: PUSH
30403: LD_INT 30
30405: PUSH
30406: LD_INT 10
30408: PUSH
30409: LD_INT 5
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: LIST
30416: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30417: LD_VAR 0 1
30421: PPUSH
30422: LD_INT 5
30424: PPUSH
30425: CALL_OW 321
30429: PUSH
30430: LD_INT 2
30432: EQUAL
30433: IFFALSE 30450
// bpoints := bpoints * 1.8 ;
30435: LD_ADDR_VAR 0 10
30439: PUSH
30440: LD_VAR 0 10
30444: PUSH
30445: LD_REAL  1.80000000000000E+0000
30448: MUL
30449: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30450: LD_VAR 0 6
30454: PPUSH
30455: CALL_OW 257
30459: PUSH
30460: LD_INT 1
30462: PUSH
30463: LD_INT 2
30465: PUSH
30466: LD_INT 3
30468: PUSH
30469: LD_INT 4
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: IN
30478: PUSH
30479: LD_VAR 0 1
30483: PPUSH
30484: LD_INT 51
30486: PPUSH
30487: CALL_OW 321
30491: PUSH
30492: LD_INT 2
30494: EQUAL
30495: AND
30496: IFFALSE 30513
// bpoints := bpoints * 1.2 ;
30498: LD_ADDR_VAR 0 10
30502: PUSH
30503: LD_VAR 0 10
30507: PUSH
30508: LD_REAL  1.20000000000000E+0000
30511: MUL
30512: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30513: LD_VAR 0 6
30517: PPUSH
30518: CALL_OW 257
30522: PUSH
30523: LD_INT 5
30525: PUSH
30526: LD_INT 7
30528: PUSH
30529: LD_INT 9
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: LIST
30536: IN
30537: PUSH
30538: LD_VAR 0 1
30542: PPUSH
30543: LD_INT 52
30545: PPUSH
30546: CALL_OW 321
30550: PUSH
30551: LD_INT 2
30553: EQUAL
30554: AND
30555: IFFALSE 30572
// bpoints := bpoints * 1.5 ;
30557: LD_ADDR_VAR 0 10
30561: PUSH
30562: LD_VAR 0 10
30566: PUSH
30567: LD_REAL  1.50000000000000E+0000
30570: MUL
30571: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30572: LD_VAR 0 1
30576: PPUSH
30577: LD_INT 66
30579: PPUSH
30580: CALL_OW 321
30584: PUSH
30585: LD_INT 2
30587: EQUAL
30588: IFFALSE 30605
// bpoints := bpoints * 1.1 ;
30590: LD_ADDR_VAR 0 10
30594: PUSH
30595: LD_VAR 0 10
30599: PUSH
30600: LD_REAL  1.10000000000000E+0000
30603: MUL
30604: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
30605: LD_ADDR_VAR 0 10
30609: PUSH
30610: LD_VAR 0 10
30614: PUSH
30615: LD_VAR 0 6
30619: PPUSH
30620: LD_INT 1
30622: PPUSH
30623: CALL_OW 259
30627: PUSH
30628: LD_REAL  1.15000000000000E+0000
30631: MUL
30632: MUL
30633: ST_TO_ADDR
// end ; unit_vehicle :
30634: GO 31458
30636: LD_INT 2
30638: DOUBLE
30639: EQUAL
30640: IFTRUE 30644
30642: GO 31446
30644: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
30645: LD_VAR 0 6
30649: PPUSH
30650: CALL_OW 264
30654: PUSH
30655: LD_INT 2
30657: PUSH
30658: LD_INT 42
30660: PUSH
30661: LD_INT 24
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: LIST
30668: IN
30669: IFFALSE 30690
// points := [ 25 , 5 , 3 ] ;
30671: LD_ADDR_VAR 0 9
30675: PUSH
30676: LD_INT 25
30678: PUSH
30679: LD_INT 5
30681: PUSH
30682: LD_INT 3
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: LIST
30689: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
30690: LD_VAR 0 6
30694: PPUSH
30695: CALL_OW 264
30699: PUSH
30700: LD_INT 4
30702: PUSH
30703: LD_INT 43
30705: PUSH
30706: LD_INT 25
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: LIST
30713: IN
30714: IFFALSE 30735
// points := [ 40 , 15 , 5 ] ;
30716: LD_ADDR_VAR 0 9
30720: PUSH
30721: LD_INT 40
30723: PUSH
30724: LD_INT 15
30726: PUSH
30727: LD_INT 5
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: LIST
30734: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
30735: LD_VAR 0 6
30739: PPUSH
30740: CALL_OW 264
30744: PUSH
30745: LD_INT 3
30747: PUSH
30748: LD_INT 23
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: IN
30755: IFFALSE 30776
// points := [ 7 , 25 , 8 ] ;
30757: LD_ADDR_VAR 0 9
30761: PUSH
30762: LD_INT 7
30764: PUSH
30765: LD_INT 25
30767: PUSH
30768: LD_INT 8
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: LIST
30775: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
30776: LD_VAR 0 6
30780: PPUSH
30781: CALL_OW 264
30785: PUSH
30786: LD_INT 5
30788: PUSH
30789: LD_INT 27
30791: PUSH
30792: LD_INT 44
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: LIST
30799: IN
30800: IFFALSE 30821
// points := [ 14 , 50 , 16 ] ;
30802: LD_ADDR_VAR 0 9
30806: PUSH
30807: LD_INT 14
30809: PUSH
30810: LD_INT 50
30812: PUSH
30813: LD_INT 16
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: LIST
30820: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
30821: LD_VAR 0 6
30825: PPUSH
30826: CALL_OW 264
30830: PUSH
30831: LD_INT 6
30833: PUSH
30834: LD_INT 46
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: IN
30841: IFFALSE 30862
// points := [ 32 , 120 , 70 ] ;
30843: LD_ADDR_VAR 0 9
30847: PUSH
30848: LD_INT 32
30850: PUSH
30851: LD_INT 120
30853: PUSH
30854: LD_INT 70
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: LIST
30861: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
30862: LD_VAR 0 6
30866: PPUSH
30867: CALL_OW 264
30871: PUSH
30872: LD_INT 7
30874: PUSH
30875: LD_INT 28
30877: PUSH
30878: LD_INT 45
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: LIST
30885: IN
30886: IFFALSE 30907
// points := [ 35 , 20 , 45 ] ;
30888: LD_ADDR_VAR 0 9
30892: PUSH
30893: LD_INT 35
30895: PUSH
30896: LD_INT 20
30898: PUSH
30899: LD_INT 45
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: LIST
30906: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30907: LD_VAR 0 6
30911: PPUSH
30912: CALL_OW 264
30916: PUSH
30917: LD_INT 47
30919: PUSH
30920: EMPTY
30921: LIST
30922: IN
30923: IFFALSE 30944
// points := [ 67 , 45 , 75 ] ;
30925: LD_ADDR_VAR 0 9
30929: PUSH
30930: LD_INT 67
30932: PUSH
30933: LD_INT 45
30935: PUSH
30936: LD_INT 75
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: LIST
30943: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30944: LD_VAR 0 6
30948: PPUSH
30949: CALL_OW 264
30953: PUSH
30954: LD_INT 26
30956: PUSH
30957: EMPTY
30958: LIST
30959: IN
30960: IFFALSE 30981
// points := [ 120 , 30 , 80 ] ;
30962: LD_ADDR_VAR 0 9
30966: PUSH
30967: LD_INT 120
30969: PUSH
30970: LD_INT 30
30972: PUSH
30973: LD_INT 80
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: LIST
30980: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30981: LD_VAR 0 6
30985: PPUSH
30986: CALL_OW 264
30990: PUSH
30991: LD_INT 22
30993: PUSH
30994: EMPTY
30995: LIST
30996: IN
30997: IFFALSE 31018
// points := [ 40 , 1 , 1 ] ;
30999: LD_ADDR_VAR 0 9
31003: PUSH
31004: LD_INT 40
31006: PUSH
31007: LD_INT 1
31009: PUSH
31010: LD_INT 1
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: LIST
31017: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31018: LD_VAR 0 6
31022: PPUSH
31023: CALL_OW 264
31027: PUSH
31028: LD_INT 29
31030: PUSH
31031: EMPTY
31032: LIST
31033: IN
31034: IFFALSE 31055
// points := [ 70 , 200 , 400 ] ;
31036: LD_ADDR_VAR 0 9
31040: PUSH
31041: LD_INT 70
31043: PUSH
31044: LD_INT 200
31046: PUSH
31047: LD_INT 400
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: LIST
31054: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31055: LD_VAR 0 6
31059: PPUSH
31060: CALL_OW 264
31064: PUSH
31065: LD_INT 14
31067: PUSH
31068: LD_INT 53
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: IN
31075: IFFALSE 31096
// points := [ 40 , 10 , 20 ] ;
31077: LD_ADDR_VAR 0 9
31081: PUSH
31082: LD_INT 40
31084: PUSH
31085: LD_INT 10
31087: PUSH
31088: LD_INT 20
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: LIST
31095: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31096: LD_VAR 0 6
31100: PPUSH
31101: CALL_OW 264
31105: PUSH
31106: LD_INT 9
31108: PUSH
31109: EMPTY
31110: LIST
31111: IN
31112: IFFALSE 31133
// points := [ 5 , 70 , 20 ] ;
31114: LD_ADDR_VAR 0 9
31118: PUSH
31119: LD_INT 5
31121: PUSH
31122: LD_INT 70
31124: PUSH
31125: LD_INT 20
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: LIST
31132: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31133: LD_VAR 0 6
31137: PPUSH
31138: CALL_OW 264
31142: PUSH
31143: LD_INT 10
31145: PUSH
31146: EMPTY
31147: LIST
31148: IN
31149: IFFALSE 31170
// points := [ 35 , 110 , 70 ] ;
31151: LD_ADDR_VAR 0 9
31155: PUSH
31156: LD_INT 35
31158: PUSH
31159: LD_INT 110
31161: PUSH
31162: LD_INT 70
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: LIST
31169: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31170: LD_VAR 0 6
31174: PPUSH
31175: CALL_OW 265
31179: PUSH
31180: LD_INT 25
31182: EQUAL
31183: IFFALSE 31204
// points := [ 80 , 65 , 100 ] ;
31185: LD_ADDR_VAR 0 9
31189: PUSH
31190: LD_INT 80
31192: PUSH
31193: LD_INT 65
31195: PUSH
31196: LD_INT 100
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: LIST
31203: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31204: LD_VAR 0 6
31208: PPUSH
31209: CALL_OW 263
31213: PUSH
31214: LD_INT 1
31216: EQUAL
31217: IFFALSE 31252
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31219: LD_ADDR_VAR 0 10
31223: PUSH
31224: LD_VAR 0 10
31228: PUSH
31229: LD_VAR 0 6
31233: PPUSH
31234: CALL_OW 311
31238: PPUSH
31239: LD_INT 3
31241: PPUSH
31242: CALL_OW 259
31246: PUSH
31247: LD_INT 4
31249: MUL
31250: MUL
31251: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31252: LD_VAR 0 6
31256: PPUSH
31257: CALL_OW 263
31261: PUSH
31262: LD_INT 2
31264: EQUAL
31265: IFFALSE 31316
// begin j := IsControledBy ( i ) ;
31267: LD_ADDR_VAR 0 7
31271: PUSH
31272: LD_VAR 0 6
31276: PPUSH
31277: CALL_OW 312
31281: ST_TO_ADDR
// if j then
31282: LD_VAR 0 7
31286: IFFALSE 31316
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31288: LD_ADDR_VAR 0 10
31292: PUSH
31293: LD_VAR 0 10
31297: PUSH
31298: LD_VAR 0 7
31302: PPUSH
31303: LD_INT 3
31305: PPUSH
31306: CALL_OW 259
31310: PUSH
31311: LD_INT 3
31313: MUL
31314: MUL
31315: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31316: LD_VAR 0 6
31320: PPUSH
31321: CALL_OW 264
31325: PUSH
31326: LD_INT 5
31328: PUSH
31329: LD_INT 6
31331: PUSH
31332: LD_INT 46
31334: PUSH
31335: LD_INT 44
31337: PUSH
31338: LD_INT 47
31340: PUSH
31341: LD_INT 45
31343: PUSH
31344: LD_INT 28
31346: PUSH
31347: LD_INT 7
31349: PUSH
31350: LD_INT 27
31352: PUSH
31353: LD_INT 29
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: IN
31368: PUSH
31369: LD_VAR 0 1
31373: PPUSH
31374: LD_INT 52
31376: PPUSH
31377: CALL_OW 321
31381: PUSH
31382: LD_INT 2
31384: EQUAL
31385: AND
31386: IFFALSE 31403
// bpoints := bpoints * 1.2 ;
31388: LD_ADDR_VAR 0 10
31392: PUSH
31393: LD_VAR 0 10
31397: PUSH
31398: LD_REAL  1.20000000000000E+0000
31401: MUL
31402: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31403: LD_VAR 0 6
31407: PPUSH
31408: CALL_OW 264
31412: PUSH
31413: LD_INT 6
31415: PUSH
31416: LD_INT 46
31418: PUSH
31419: LD_INT 47
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: LIST
31426: IN
31427: IFFALSE 31444
// bpoints := bpoints * 1.2 ;
31429: LD_ADDR_VAR 0 10
31433: PUSH
31434: LD_VAR 0 10
31438: PUSH
31439: LD_REAL  1.20000000000000E+0000
31442: MUL
31443: ST_TO_ADDR
// end ; unit_building :
31444: GO 31458
31446: LD_INT 3
31448: DOUBLE
31449: EQUAL
31450: IFTRUE 31454
31452: GO 31457
31454: POP
// ; end ;
31455: GO 31458
31457: POP
// for j = 1 to 3 do
31458: LD_ADDR_VAR 0 7
31462: PUSH
31463: DOUBLE
31464: LD_INT 1
31466: DEC
31467: ST_TO_ADDR
31468: LD_INT 3
31470: PUSH
31471: FOR_TO
31472: IFFALSE 31525
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31474: LD_ADDR_VAR 0 5
31478: PUSH
31479: LD_VAR 0 5
31483: PPUSH
31484: LD_VAR 0 7
31488: PPUSH
31489: LD_VAR 0 5
31493: PUSH
31494: LD_VAR 0 7
31498: ARRAY
31499: PUSH
31500: LD_VAR 0 9
31504: PUSH
31505: LD_VAR 0 7
31509: ARRAY
31510: PUSH
31511: LD_VAR 0 10
31515: MUL
31516: PLUS
31517: PPUSH
31518: CALL_OW 1
31522: ST_TO_ADDR
31523: GO 31471
31525: POP
31526: POP
// end ;
31527: GO 30010
31529: POP
31530: POP
// result := Replace ( result , 4 , tmp ) ;
31531: LD_ADDR_VAR 0 5
31535: PUSH
31536: LD_VAR 0 5
31540: PPUSH
31541: LD_INT 4
31543: PPUSH
31544: LD_VAR 0 8
31548: PPUSH
31549: CALL_OW 1
31553: ST_TO_ADDR
// end ;
31554: LD_VAR 0 5
31558: RET
// export function DangerAtRange ( unit , range ) ; begin
31559: LD_INT 0
31561: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31562: LD_ADDR_VAR 0 3
31566: PUSH
31567: LD_VAR 0 1
31571: PPUSH
31572: CALL_OW 255
31576: PPUSH
31577: LD_VAR 0 1
31581: PPUSH
31582: CALL_OW 250
31586: PPUSH
31587: LD_VAR 0 1
31591: PPUSH
31592: CALL_OW 251
31596: PPUSH
31597: LD_VAR 0 2
31601: PPUSH
31602: CALL 29862 0 4
31606: ST_TO_ADDR
// end ;
31607: LD_VAR 0 3
31611: RET
// export function DangerInArea ( side , area ) ; begin
31612: LD_INT 0
31614: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
31615: LD_ADDR_VAR 0 3
31619: PUSH
31620: LD_VAR 0 2
31624: PPUSH
31625: LD_INT 81
31627: PUSH
31628: LD_VAR 0 1
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PPUSH
31637: CALL_OW 70
31641: ST_TO_ADDR
// end ;
31642: LD_VAR 0 3
31646: RET
// export function IsExtension ( b ) ; begin
31647: LD_INT 0
31649: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
31650: LD_ADDR_VAR 0 2
31654: PUSH
31655: LD_VAR 0 1
31659: PUSH
31660: LD_INT 23
31662: PUSH
31663: LD_INT 20
31665: PUSH
31666: LD_INT 22
31668: PUSH
31669: LD_INT 17
31671: PUSH
31672: LD_INT 24
31674: PUSH
31675: LD_INT 21
31677: PUSH
31678: LD_INT 19
31680: PUSH
31681: LD_INT 16
31683: PUSH
31684: LD_INT 25
31686: PUSH
31687: LD_INT 18
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: LIST
31694: LIST
31695: LIST
31696: LIST
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: IN
31702: ST_TO_ADDR
// end ;
31703: LD_VAR 0 2
31707: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
31708: LD_INT 0
31710: PPUSH
31711: PPUSH
31712: PPUSH
// result := [ ] ;
31713: LD_ADDR_VAR 0 3
31717: PUSH
31718: EMPTY
31719: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
31720: LD_ADDR_VAR 0 4
31724: PUSH
31725: LD_VAR 0 2
31729: PPUSH
31730: LD_INT 21
31732: PUSH
31733: LD_INT 3
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PPUSH
31740: CALL_OW 70
31744: ST_TO_ADDR
// if not tmp then
31745: LD_VAR 0 4
31749: NOT
31750: IFFALSE 31754
// exit ;
31752: GO 31812
// for i in tmp do
31754: LD_ADDR_VAR 0 5
31758: PUSH
31759: LD_VAR 0 4
31763: PUSH
31764: FOR_IN
31765: IFFALSE 31800
// if GetBase ( i ) <> base then
31767: LD_VAR 0 5
31771: PPUSH
31772: CALL_OW 274
31776: PUSH
31777: LD_VAR 0 1
31781: NONEQUAL
31782: IFFALSE 31798
// ComLinkToBase ( base , i ) ;
31784: LD_VAR 0 1
31788: PPUSH
31789: LD_VAR 0 5
31793: PPUSH
31794: CALL_OW 169
31798: GO 31764
31800: POP
31801: POP
// result := tmp ;
31802: LD_ADDR_VAR 0 3
31806: PUSH
31807: LD_VAR 0 4
31811: ST_TO_ADDR
// end ;
31812: LD_VAR 0 3
31816: RET
// export function ComComplete ( unit , b ) ; var i ; begin
31817: LD_INT 0
31819: PPUSH
31820: PPUSH
// if BuildingStatus ( b ) = bs_build then
31821: LD_VAR 0 2
31825: PPUSH
31826: CALL_OW 461
31830: PUSH
31831: LD_INT 1
31833: EQUAL
31834: IFFALSE 31894
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
31836: LD_VAR 0 1
31840: PPUSH
31841: LD_STRING h
31843: PUSH
31844: LD_VAR 0 2
31848: PPUSH
31849: CALL_OW 250
31853: PUSH
31854: LD_VAR 0 2
31858: PPUSH
31859: CALL_OW 251
31863: PUSH
31864: LD_VAR 0 2
31868: PUSH
31869: LD_INT 0
31871: PUSH
31872: LD_INT 0
31874: PUSH
31875: LD_INT 0
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: PUSH
31887: EMPTY
31888: LIST
31889: PPUSH
31890: CALL_OW 446
// end ;
31894: LD_VAR 0 3
31898: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31899: LD_INT 0
31901: PPUSH
31902: PPUSH
31903: PPUSH
31904: PPUSH
31905: PPUSH
31906: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
31907: LD_VAR 0 1
31911: NOT
31912: PUSH
31913: LD_VAR 0 1
31917: PPUSH
31918: CALL_OW 263
31922: PUSH
31923: LD_INT 2
31925: EQUAL
31926: NOT
31927: OR
31928: IFFALSE 31932
// exit ;
31930: GO 32248
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31932: LD_ADDR_VAR 0 6
31936: PUSH
31937: LD_INT 22
31939: PUSH
31940: LD_VAR 0 1
31944: PPUSH
31945: CALL_OW 255
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PUSH
31954: LD_INT 2
31956: PUSH
31957: LD_INT 30
31959: PUSH
31960: LD_INT 36
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 34
31969: PUSH
31970: LD_INT 31
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: LIST
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PPUSH
31986: CALL_OW 69
31990: ST_TO_ADDR
// if not tmp then
31991: LD_VAR 0 6
31995: NOT
31996: IFFALSE 32000
// exit ;
31998: GO 32248
// result := [ ] ;
32000: LD_ADDR_VAR 0 2
32004: PUSH
32005: EMPTY
32006: ST_TO_ADDR
// for i in tmp do
32007: LD_ADDR_VAR 0 3
32011: PUSH
32012: LD_VAR 0 6
32016: PUSH
32017: FOR_IN
32018: IFFALSE 32089
// begin t := UnitsInside ( i ) ;
32020: LD_ADDR_VAR 0 4
32024: PUSH
32025: LD_VAR 0 3
32029: PPUSH
32030: CALL_OW 313
32034: ST_TO_ADDR
// if t then
32035: LD_VAR 0 4
32039: IFFALSE 32087
// for j in t do
32041: LD_ADDR_VAR 0 7
32045: PUSH
32046: LD_VAR 0 4
32050: PUSH
32051: FOR_IN
32052: IFFALSE 32085
// result := Insert ( result , result + 1 , j ) ;
32054: LD_ADDR_VAR 0 2
32058: PUSH
32059: LD_VAR 0 2
32063: PPUSH
32064: LD_VAR 0 2
32068: PUSH
32069: LD_INT 1
32071: PLUS
32072: PPUSH
32073: LD_VAR 0 7
32077: PPUSH
32078: CALL_OW 2
32082: ST_TO_ADDR
32083: GO 32051
32085: POP
32086: POP
// end ;
32087: GO 32017
32089: POP
32090: POP
// if not result then
32091: LD_VAR 0 2
32095: NOT
32096: IFFALSE 32100
// exit ;
32098: GO 32248
// mech := result [ 1 ] ;
32100: LD_ADDR_VAR 0 5
32104: PUSH
32105: LD_VAR 0 2
32109: PUSH
32110: LD_INT 1
32112: ARRAY
32113: ST_TO_ADDR
// if result > 1 then
32114: LD_VAR 0 2
32118: PUSH
32119: LD_INT 1
32121: GREATER
32122: IFFALSE 32234
// for i = 2 to result do
32124: LD_ADDR_VAR 0 3
32128: PUSH
32129: DOUBLE
32130: LD_INT 2
32132: DEC
32133: ST_TO_ADDR
32134: LD_VAR 0 2
32138: PUSH
32139: FOR_TO
32140: IFFALSE 32232
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32142: LD_ADDR_VAR 0 4
32146: PUSH
32147: LD_VAR 0 2
32151: PUSH
32152: LD_VAR 0 3
32156: ARRAY
32157: PPUSH
32158: LD_INT 3
32160: PPUSH
32161: CALL_OW 259
32165: PUSH
32166: LD_VAR 0 2
32170: PUSH
32171: LD_VAR 0 3
32175: ARRAY
32176: PPUSH
32177: CALL_OW 432
32181: MINUS
32182: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32183: LD_VAR 0 4
32187: PUSH
32188: LD_VAR 0 5
32192: PPUSH
32193: LD_INT 3
32195: PPUSH
32196: CALL_OW 259
32200: PUSH
32201: LD_VAR 0 5
32205: PPUSH
32206: CALL_OW 432
32210: MINUS
32211: GREATEREQUAL
32212: IFFALSE 32230
// mech := result [ i ] ;
32214: LD_ADDR_VAR 0 5
32218: PUSH
32219: LD_VAR 0 2
32223: PUSH
32224: LD_VAR 0 3
32228: ARRAY
32229: ST_TO_ADDR
// end ;
32230: GO 32139
32232: POP
32233: POP
// ComLinkTo ( vehicle , mech ) ;
32234: LD_VAR 0 1
32238: PPUSH
32239: LD_VAR 0 5
32243: PPUSH
32244: CALL_OW 135
// end ;
32248: LD_VAR 0 2
32252: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32253: LD_INT 0
32255: PPUSH
32256: PPUSH
32257: PPUSH
32258: PPUSH
32259: PPUSH
32260: PPUSH
32261: PPUSH
32262: PPUSH
32263: PPUSH
32264: PPUSH
32265: PPUSH
32266: PPUSH
32267: PPUSH
// result := [ ] ;
32268: LD_ADDR_VAR 0 7
32272: PUSH
32273: EMPTY
32274: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32275: LD_VAR 0 1
32279: PPUSH
32280: CALL_OW 266
32284: PUSH
32285: LD_INT 0
32287: PUSH
32288: LD_INT 1
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: IN
32295: NOT
32296: IFFALSE 32300
// exit ;
32298: GO 33931
// if name then
32300: LD_VAR 0 3
32304: IFFALSE 32320
// SetBName ( base_dep , name ) ;
32306: LD_VAR 0 1
32310: PPUSH
32311: LD_VAR 0 3
32315: PPUSH
32316: CALL_OW 500
// base := GetBase ( base_dep ) ;
32320: LD_ADDR_VAR 0 15
32324: PUSH
32325: LD_VAR 0 1
32329: PPUSH
32330: CALL_OW 274
32334: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32335: LD_ADDR_VAR 0 16
32339: PUSH
32340: LD_VAR 0 1
32344: PPUSH
32345: CALL_OW 255
32349: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32350: LD_ADDR_VAR 0 17
32354: PUSH
32355: LD_VAR 0 1
32359: PPUSH
32360: CALL_OW 248
32364: ST_TO_ADDR
// if sources then
32365: LD_VAR 0 5
32369: IFFALSE 32416
// for i = 1 to 3 do
32371: LD_ADDR_VAR 0 8
32375: PUSH
32376: DOUBLE
32377: LD_INT 1
32379: DEC
32380: ST_TO_ADDR
32381: LD_INT 3
32383: PUSH
32384: FOR_TO
32385: IFFALSE 32414
// AddResourceType ( base , i , sources [ i ] ) ;
32387: LD_VAR 0 15
32391: PPUSH
32392: LD_VAR 0 8
32396: PPUSH
32397: LD_VAR 0 5
32401: PUSH
32402: LD_VAR 0 8
32406: ARRAY
32407: PPUSH
32408: CALL_OW 276
32412: GO 32384
32414: POP
32415: POP
// buildings := GetBaseBuildings ( base , area ) ;
32416: LD_ADDR_VAR 0 18
32420: PUSH
32421: LD_VAR 0 15
32425: PPUSH
32426: LD_VAR 0 2
32430: PPUSH
32431: CALL 31708 0 2
32435: ST_TO_ADDR
// InitHc ;
32436: CALL_OW 19
// InitUc ;
32440: CALL_OW 18
// uc_side := side ;
32444: LD_ADDR_OWVAR 20
32448: PUSH
32449: LD_VAR 0 16
32453: ST_TO_ADDR
// uc_nation := nation ;
32454: LD_ADDR_OWVAR 21
32458: PUSH
32459: LD_VAR 0 17
32463: ST_TO_ADDR
// if buildings then
32464: LD_VAR 0 18
32468: IFFALSE 33790
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32470: LD_ADDR_VAR 0 19
32474: PUSH
32475: LD_VAR 0 18
32479: PPUSH
32480: LD_INT 2
32482: PUSH
32483: LD_INT 30
32485: PUSH
32486: LD_INT 29
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: PUSH
32493: LD_INT 30
32495: PUSH
32496: LD_INT 30
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: LIST
32507: PPUSH
32508: CALL_OW 72
32512: ST_TO_ADDR
// if tmp then
32513: LD_VAR 0 19
32517: IFFALSE 32565
// for i in tmp do
32519: LD_ADDR_VAR 0 8
32523: PUSH
32524: LD_VAR 0 19
32528: PUSH
32529: FOR_IN
32530: IFFALSE 32563
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32532: LD_VAR 0 8
32536: PPUSH
32537: CALL_OW 250
32541: PPUSH
32542: LD_VAR 0 8
32546: PPUSH
32547: CALL_OW 251
32551: PPUSH
32552: LD_VAR 0 16
32556: PPUSH
32557: CALL_OW 441
32561: GO 32529
32563: POP
32564: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
32565: LD_VAR 0 18
32569: PPUSH
32570: LD_INT 2
32572: PUSH
32573: LD_INT 30
32575: PUSH
32576: LD_INT 32
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: PUSH
32583: LD_INT 30
32585: PUSH
32586: LD_INT 33
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: LIST
32597: PPUSH
32598: CALL_OW 72
32602: IFFALSE 32690
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
32604: LD_ADDR_VAR 0 8
32608: PUSH
32609: LD_VAR 0 18
32613: PPUSH
32614: LD_INT 2
32616: PUSH
32617: LD_INT 30
32619: PUSH
32620: LD_INT 32
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: LD_INT 30
32629: PUSH
32630: LD_INT 33
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: LIST
32641: PPUSH
32642: CALL_OW 72
32646: PUSH
32647: FOR_IN
32648: IFFALSE 32688
// begin if not GetBWeapon ( i ) then
32650: LD_VAR 0 8
32654: PPUSH
32655: CALL_OW 269
32659: NOT
32660: IFFALSE 32686
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
32662: LD_VAR 0 8
32666: PPUSH
32667: LD_VAR 0 8
32671: PPUSH
32672: LD_VAR 0 2
32676: PPUSH
32677: CALL 33936 0 2
32681: PPUSH
32682: CALL_OW 431
// end ;
32686: GO 32647
32688: POP
32689: POP
// end ; for i = 1 to personel do
32690: LD_ADDR_VAR 0 8
32694: PUSH
32695: DOUBLE
32696: LD_INT 1
32698: DEC
32699: ST_TO_ADDR
32700: LD_VAR 0 6
32704: PUSH
32705: FOR_TO
32706: IFFALSE 33770
// begin if i > 4 then
32708: LD_VAR 0 8
32712: PUSH
32713: LD_INT 4
32715: GREATER
32716: IFFALSE 32720
// break ;
32718: GO 33770
// case i of 1 :
32720: LD_VAR 0 8
32724: PUSH
32725: LD_INT 1
32727: DOUBLE
32728: EQUAL
32729: IFTRUE 32733
32731: GO 32813
32733: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
32734: LD_ADDR_VAR 0 12
32738: PUSH
32739: LD_VAR 0 18
32743: PPUSH
32744: LD_INT 22
32746: PUSH
32747: LD_VAR 0 16
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: PUSH
32756: LD_INT 58
32758: PUSH
32759: EMPTY
32760: LIST
32761: PUSH
32762: LD_INT 2
32764: PUSH
32765: LD_INT 30
32767: PUSH
32768: LD_INT 32
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PUSH
32775: LD_INT 30
32777: PUSH
32778: LD_INT 4
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: PUSH
32785: LD_INT 30
32787: PUSH
32788: LD_INT 5
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: LIST
32799: LIST
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: LIST
32805: PPUSH
32806: CALL_OW 72
32810: ST_TO_ADDR
32811: GO 33035
32813: LD_INT 2
32815: DOUBLE
32816: EQUAL
32817: IFTRUE 32821
32819: GO 32883
32821: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
32822: LD_ADDR_VAR 0 12
32826: PUSH
32827: LD_VAR 0 18
32831: PPUSH
32832: LD_INT 22
32834: PUSH
32835: LD_VAR 0 16
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: LD_INT 2
32846: PUSH
32847: LD_INT 30
32849: PUSH
32850: LD_INT 0
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: LD_INT 30
32859: PUSH
32860: LD_INT 1
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: LIST
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PPUSH
32876: CALL_OW 72
32880: ST_TO_ADDR
32881: GO 33035
32883: LD_INT 3
32885: DOUBLE
32886: EQUAL
32887: IFTRUE 32891
32889: GO 32953
32891: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32892: LD_ADDR_VAR 0 12
32896: PUSH
32897: LD_VAR 0 18
32901: PPUSH
32902: LD_INT 22
32904: PUSH
32905: LD_VAR 0 16
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: LD_INT 2
32916: PUSH
32917: LD_INT 30
32919: PUSH
32920: LD_INT 2
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 30
32929: PUSH
32930: LD_INT 3
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: LIST
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PPUSH
32946: CALL_OW 72
32950: ST_TO_ADDR
32951: GO 33035
32953: LD_INT 4
32955: DOUBLE
32956: EQUAL
32957: IFTRUE 32961
32959: GO 33034
32961: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32962: LD_ADDR_VAR 0 12
32966: PUSH
32967: LD_VAR 0 18
32971: PPUSH
32972: LD_INT 22
32974: PUSH
32975: LD_VAR 0 16
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: LD_INT 2
32986: PUSH
32987: LD_INT 30
32989: PUSH
32990: LD_INT 6
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 30
32999: PUSH
33000: LD_INT 7
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_INT 30
33009: PUSH
33010: LD_INT 8
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: LIST
33021: LIST
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PPUSH
33027: CALL_OW 72
33031: ST_TO_ADDR
33032: GO 33035
33034: POP
// if i = 1 then
33035: LD_VAR 0 8
33039: PUSH
33040: LD_INT 1
33042: EQUAL
33043: IFFALSE 33154
// begin tmp := [ ] ;
33045: LD_ADDR_VAR 0 19
33049: PUSH
33050: EMPTY
33051: ST_TO_ADDR
// for j in f do
33052: LD_ADDR_VAR 0 9
33056: PUSH
33057: LD_VAR 0 12
33061: PUSH
33062: FOR_IN
33063: IFFALSE 33136
// if GetBType ( j ) = b_bunker then
33065: LD_VAR 0 9
33069: PPUSH
33070: CALL_OW 266
33074: PUSH
33075: LD_INT 32
33077: EQUAL
33078: IFFALSE 33105
// tmp := Insert ( tmp , 1 , j ) else
33080: LD_ADDR_VAR 0 19
33084: PUSH
33085: LD_VAR 0 19
33089: PPUSH
33090: LD_INT 1
33092: PPUSH
33093: LD_VAR 0 9
33097: PPUSH
33098: CALL_OW 2
33102: ST_TO_ADDR
33103: GO 33134
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33105: LD_ADDR_VAR 0 19
33109: PUSH
33110: LD_VAR 0 19
33114: PPUSH
33115: LD_VAR 0 19
33119: PUSH
33120: LD_INT 1
33122: PLUS
33123: PPUSH
33124: LD_VAR 0 9
33128: PPUSH
33129: CALL_OW 2
33133: ST_TO_ADDR
33134: GO 33062
33136: POP
33137: POP
// if tmp then
33138: LD_VAR 0 19
33142: IFFALSE 33154
// f := tmp ;
33144: LD_ADDR_VAR 0 12
33148: PUSH
33149: LD_VAR 0 19
33153: ST_TO_ADDR
// end ; x := personel [ i ] ;
33154: LD_ADDR_VAR 0 13
33158: PUSH
33159: LD_VAR 0 6
33163: PUSH
33164: LD_VAR 0 8
33168: ARRAY
33169: ST_TO_ADDR
// if x = - 1 then
33170: LD_VAR 0 13
33174: PUSH
33175: LD_INT 1
33177: NEG
33178: EQUAL
33179: IFFALSE 33388
// begin for j in f do
33181: LD_ADDR_VAR 0 9
33185: PUSH
33186: LD_VAR 0 12
33190: PUSH
33191: FOR_IN
33192: IFFALSE 33384
// repeat InitHc ;
33194: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33198: LD_VAR 0 9
33202: PPUSH
33203: CALL_OW 266
33207: PUSH
33208: LD_INT 5
33210: EQUAL
33211: IFFALSE 33281
// begin if UnitsInside ( j ) < 3 then
33213: LD_VAR 0 9
33217: PPUSH
33218: CALL_OW 313
33222: PUSH
33223: LD_INT 3
33225: LESS
33226: IFFALSE 33262
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33228: LD_INT 0
33230: PPUSH
33231: LD_INT 5
33233: PUSH
33234: LD_INT 8
33236: PUSH
33237: LD_INT 9
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: LIST
33244: PUSH
33245: LD_VAR 0 17
33249: ARRAY
33250: PPUSH
33251: LD_VAR 0 4
33255: PPUSH
33256: CALL_OW 380
33260: GO 33279
// PrepareHuman ( false , i , skill ) ;
33262: LD_INT 0
33264: PPUSH
33265: LD_VAR 0 8
33269: PPUSH
33270: LD_VAR 0 4
33274: PPUSH
33275: CALL_OW 380
// end else
33279: GO 33298
// PrepareHuman ( false , i , skill ) ;
33281: LD_INT 0
33283: PPUSH
33284: LD_VAR 0 8
33288: PPUSH
33289: LD_VAR 0 4
33293: PPUSH
33294: CALL_OW 380
// un := CreateHuman ;
33298: LD_ADDR_VAR 0 14
33302: PUSH
33303: CALL_OW 44
33307: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33308: LD_ADDR_VAR 0 7
33312: PUSH
33313: LD_VAR 0 7
33317: PPUSH
33318: LD_INT 1
33320: PPUSH
33321: LD_VAR 0 14
33325: PPUSH
33326: CALL_OW 2
33330: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33331: LD_VAR 0 14
33335: PPUSH
33336: LD_VAR 0 9
33340: PPUSH
33341: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33345: LD_VAR 0 9
33349: PPUSH
33350: CALL_OW 313
33354: PUSH
33355: LD_INT 6
33357: EQUAL
33358: PUSH
33359: LD_VAR 0 9
33363: PPUSH
33364: CALL_OW 266
33368: PUSH
33369: LD_INT 32
33371: PUSH
33372: LD_INT 31
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: IN
33379: OR
33380: IFFALSE 33194
33382: GO 33191
33384: POP
33385: POP
// end else
33386: GO 33768
// for j = 1 to x do
33388: LD_ADDR_VAR 0 9
33392: PUSH
33393: DOUBLE
33394: LD_INT 1
33396: DEC
33397: ST_TO_ADDR
33398: LD_VAR 0 13
33402: PUSH
33403: FOR_TO
33404: IFFALSE 33766
// begin InitHc ;
33406: CALL_OW 19
// if not f then
33410: LD_VAR 0 12
33414: NOT
33415: IFFALSE 33504
// begin PrepareHuman ( false , i , skill ) ;
33417: LD_INT 0
33419: PPUSH
33420: LD_VAR 0 8
33424: PPUSH
33425: LD_VAR 0 4
33429: PPUSH
33430: CALL_OW 380
// un := CreateHuman ;
33434: LD_ADDR_VAR 0 14
33438: PUSH
33439: CALL_OW 44
33443: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33444: LD_ADDR_VAR 0 7
33448: PUSH
33449: LD_VAR 0 7
33453: PPUSH
33454: LD_INT 1
33456: PPUSH
33457: LD_VAR 0 14
33461: PPUSH
33462: CALL_OW 2
33466: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33467: LD_VAR 0 14
33471: PPUSH
33472: LD_VAR 0 1
33476: PPUSH
33477: CALL_OW 250
33481: PPUSH
33482: LD_VAR 0 1
33486: PPUSH
33487: CALL_OW 251
33491: PPUSH
33492: LD_INT 10
33494: PPUSH
33495: LD_INT 0
33497: PPUSH
33498: CALL_OW 50
// continue ;
33502: GO 33403
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33504: LD_VAR 0 12
33508: PUSH
33509: LD_INT 1
33511: ARRAY
33512: PPUSH
33513: CALL_OW 313
33517: PUSH
33518: LD_VAR 0 12
33522: PUSH
33523: LD_INT 1
33525: ARRAY
33526: PPUSH
33527: CALL_OW 266
33531: PUSH
33532: LD_INT 32
33534: PUSH
33535: LD_INT 31
33537: PUSH
33538: EMPTY
33539: LIST
33540: LIST
33541: IN
33542: AND
33543: PUSH
33544: LD_VAR 0 12
33548: PUSH
33549: LD_INT 1
33551: ARRAY
33552: PPUSH
33553: CALL_OW 313
33557: PUSH
33558: LD_INT 6
33560: EQUAL
33561: OR
33562: IFFALSE 33582
// f := Delete ( f , 1 ) ;
33564: LD_ADDR_VAR 0 12
33568: PUSH
33569: LD_VAR 0 12
33573: PPUSH
33574: LD_INT 1
33576: PPUSH
33577: CALL_OW 3
33581: ST_TO_ADDR
// if not f then
33582: LD_VAR 0 12
33586: NOT
33587: IFFALSE 33605
// begin x := x + 2 ;
33589: LD_ADDR_VAR 0 13
33593: PUSH
33594: LD_VAR 0 13
33598: PUSH
33599: LD_INT 2
33601: PLUS
33602: ST_TO_ADDR
// continue ;
33603: GO 33403
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
33605: LD_VAR 0 12
33609: PUSH
33610: LD_INT 1
33612: ARRAY
33613: PPUSH
33614: CALL_OW 266
33618: PUSH
33619: LD_INT 5
33621: EQUAL
33622: IFFALSE 33696
// begin if UnitsInside ( f [ 1 ] ) < 3 then
33624: LD_VAR 0 12
33628: PUSH
33629: LD_INT 1
33631: ARRAY
33632: PPUSH
33633: CALL_OW 313
33637: PUSH
33638: LD_INT 3
33640: LESS
33641: IFFALSE 33677
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33643: LD_INT 0
33645: PPUSH
33646: LD_INT 5
33648: PUSH
33649: LD_INT 8
33651: PUSH
33652: LD_INT 9
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: LIST
33659: PUSH
33660: LD_VAR 0 17
33664: ARRAY
33665: PPUSH
33666: LD_VAR 0 4
33670: PPUSH
33671: CALL_OW 380
33675: GO 33694
// PrepareHuman ( false , i , skill ) ;
33677: LD_INT 0
33679: PPUSH
33680: LD_VAR 0 8
33684: PPUSH
33685: LD_VAR 0 4
33689: PPUSH
33690: CALL_OW 380
// end else
33694: GO 33713
// PrepareHuman ( false , i , skill ) ;
33696: LD_INT 0
33698: PPUSH
33699: LD_VAR 0 8
33703: PPUSH
33704: LD_VAR 0 4
33708: PPUSH
33709: CALL_OW 380
// un := CreateHuman ;
33713: LD_ADDR_VAR 0 14
33717: PUSH
33718: CALL_OW 44
33722: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33723: LD_ADDR_VAR 0 7
33727: PUSH
33728: LD_VAR 0 7
33732: PPUSH
33733: LD_INT 1
33735: PPUSH
33736: LD_VAR 0 14
33740: PPUSH
33741: CALL_OW 2
33745: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
33746: LD_VAR 0 14
33750: PPUSH
33751: LD_VAR 0 12
33755: PUSH
33756: LD_INT 1
33758: ARRAY
33759: PPUSH
33760: CALL_OW 52
// end ;
33764: GO 33403
33766: POP
33767: POP
// end ;
33768: GO 32705
33770: POP
33771: POP
// result := result ^ buildings ;
33772: LD_ADDR_VAR 0 7
33776: PUSH
33777: LD_VAR 0 7
33781: PUSH
33782: LD_VAR 0 18
33786: ADD
33787: ST_TO_ADDR
// end else
33788: GO 33931
// begin for i = 1 to personel do
33790: LD_ADDR_VAR 0 8
33794: PUSH
33795: DOUBLE
33796: LD_INT 1
33798: DEC
33799: ST_TO_ADDR
33800: LD_VAR 0 6
33804: PUSH
33805: FOR_TO
33806: IFFALSE 33929
// begin if i > 4 then
33808: LD_VAR 0 8
33812: PUSH
33813: LD_INT 4
33815: GREATER
33816: IFFALSE 33820
// break ;
33818: GO 33929
// x := personel [ i ] ;
33820: LD_ADDR_VAR 0 13
33824: PUSH
33825: LD_VAR 0 6
33829: PUSH
33830: LD_VAR 0 8
33834: ARRAY
33835: ST_TO_ADDR
// if x = - 1 then
33836: LD_VAR 0 13
33840: PUSH
33841: LD_INT 1
33843: NEG
33844: EQUAL
33845: IFFALSE 33849
// continue ;
33847: GO 33805
// PrepareHuman ( false , i , skill ) ;
33849: LD_INT 0
33851: PPUSH
33852: LD_VAR 0 8
33856: PPUSH
33857: LD_VAR 0 4
33861: PPUSH
33862: CALL_OW 380
// un := CreateHuman ;
33866: LD_ADDR_VAR 0 14
33870: PUSH
33871: CALL_OW 44
33875: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33876: LD_VAR 0 14
33880: PPUSH
33881: LD_VAR 0 1
33885: PPUSH
33886: CALL_OW 250
33890: PPUSH
33891: LD_VAR 0 1
33895: PPUSH
33896: CALL_OW 251
33900: PPUSH
33901: LD_INT 10
33903: PPUSH
33904: LD_INT 0
33906: PPUSH
33907: CALL_OW 50
// result := result ^ un ;
33911: LD_ADDR_VAR 0 7
33915: PUSH
33916: LD_VAR 0 7
33920: PUSH
33921: LD_VAR 0 14
33925: ADD
33926: ST_TO_ADDR
// end ;
33927: GO 33805
33929: POP
33930: POP
// end ; end ;
33931: LD_VAR 0 7
33935: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33936: LD_INT 0
33938: PPUSH
33939: PPUSH
33940: PPUSH
33941: PPUSH
33942: PPUSH
33943: PPUSH
33944: PPUSH
33945: PPUSH
33946: PPUSH
33947: PPUSH
33948: PPUSH
33949: PPUSH
33950: PPUSH
33951: PPUSH
33952: PPUSH
33953: PPUSH
// result := false ;
33954: LD_ADDR_VAR 0 3
33958: PUSH
33959: LD_INT 0
33961: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33962: LD_VAR 0 1
33966: NOT
33967: PUSH
33968: LD_VAR 0 1
33972: PPUSH
33973: CALL_OW 266
33977: PUSH
33978: LD_INT 32
33980: PUSH
33981: LD_INT 33
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: IN
33988: NOT
33989: OR
33990: IFFALSE 33994
// exit ;
33992: GO 35130
// nat := GetNation ( tower ) ;
33994: LD_ADDR_VAR 0 12
33998: PUSH
33999: LD_VAR 0 1
34003: PPUSH
34004: CALL_OW 248
34008: ST_TO_ADDR
// side := GetSide ( tower ) ;
34009: LD_ADDR_VAR 0 16
34013: PUSH
34014: LD_VAR 0 1
34018: PPUSH
34019: CALL_OW 255
34023: ST_TO_ADDR
// x := GetX ( tower ) ;
34024: LD_ADDR_VAR 0 10
34028: PUSH
34029: LD_VAR 0 1
34033: PPUSH
34034: CALL_OW 250
34038: ST_TO_ADDR
// y := GetY ( tower ) ;
34039: LD_ADDR_VAR 0 11
34043: PUSH
34044: LD_VAR 0 1
34048: PPUSH
34049: CALL_OW 251
34053: ST_TO_ADDR
// if not x or not y then
34054: LD_VAR 0 10
34058: NOT
34059: PUSH
34060: LD_VAR 0 11
34064: NOT
34065: OR
34066: IFFALSE 34070
// exit ;
34068: GO 35130
// weapon := 0 ;
34070: LD_ADDR_VAR 0 18
34074: PUSH
34075: LD_INT 0
34077: ST_TO_ADDR
// fac_list := [ ] ;
34078: LD_ADDR_VAR 0 17
34082: PUSH
34083: EMPTY
34084: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
34085: LD_ADDR_VAR 0 6
34089: PUSH
34090: LD_VAR 0 1
34094: PPUSH
34095: CALL_OW 274
34099: PPUSH
34100: LD_VAR 0 2
34104: PPUSH
34105: CALL 31708 0 2
34109: PPUSH
34110: LD_INT 30
34112: PUSH
34113: LD_INT 3
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PPUSH
34120: CALL_OW 72
34124: ST_TO_ADDR
// if not factories then
34125: LD_VAR 0 6
34129: NOT
34130: IFFALSE 34134
// exit ;
34132: GO 35130
// for i in factories do
34134: LD_ADDR_VAR 0 8
34138: PUSH
34139: LD_VAR 0 6
34143: PUSH
34144: FOR_IN
34145: IFFALSE 34170
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34147: LD_ADDR_VAR 0 17
34151: PUSH
34152: LD_VAR 0 17
34156: PUSH
34157: LD_VAR 0 8
34161: PPUSH
34162: CALL_OW 478
34166: UNION
34167: ST_TO_ADDR
34168: GO 34144
34170: POP
34171: POP
// if not fac_list then
34172: LD_VAR 0 17
34176: NOT
34177: IFFALSE 34181
// exit ;
34179: GO 35130
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34181: LD_ADDR_VAR 0 5
34185: PUSH
34186: LD_INT 4
34188: PUSH
34189: LD_INT 5
34191: PUSH
34192: LD_INT 9
34194: PUSH
34195: LD_INT 10
34197: PUSH
34198: LD_INT 6
34200: PUSH
34201: LD_INT 7
34203: PUSH
34204: LD_INT 11
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: PUSH
34216: LD_INT 27
34218: PUSH
34219: LD_INT 28
34221: PUSH
34222: LD_INT 26
34224: PUSH
34225: LD_INT 30
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: PUSH
34234: LD_INT 43
34236: PUSH
34237: LD_INT 44
34239: PUSH
34240: LD_INT 46
34242: PUSH
34243: LD_INT 45
34245: PUSH
34246: LD_INT 47
34248: PUSH
34249: LD_INT 49
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: LIST
34264: PUSH
34265: LD_VAR 0 12
34269: ARRAY
34270: ST_TO_ADDR
// for i in list do
34271: LD_ADDR_VAR 0 8
34275: PUSH
34276: LD_VAR 0 5
34280: PUSH
34281: FOR_IN
34282: IFFALSE 34315
// if not i in fac_list then
34284: LD_VAR 0 8
34288: PUSH
34289: LD_VAR 0 17
34293: IN
34294: NOT
34295: IFFALSE 34313
// list := list diff i ;
34297: LD_ADDR_VAR 0 5
34301: PUSH
34302: LD_VAR 0 5
34306: PUSH
34307: LD_VAR 0 8
34311: DIFF
34312: ST_TO_ADDR
34313: GO 34281
34315: POP
34316: POP
// if not list then
34317: LD_VAR 0 5
34321: NOT
34322: IFFALSE 34326
// exit ;
34324: GO 35130
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34326: LD_VAR 0 12
34330: PUSH
34331: LD_INT 3
34333: EQUAL
34334: PUSH
34335: LD_INT 49
34337: PUSH
34338: LD_VAR 0 5
34342: IN
34343: AND
34344: PUSH
34345: LD_INT 31
34347: PPUSH
34348: LD_VAR 0 16
34352: PPUSH
34353: CALL_OW 321
34357: PUSH
34358: LD_INT 2
34360: EQUAL
34361: AND
34362: IFFALSE 34422
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34364: LD_INT 22
34366: PUSH
34367: LD_VAR 0 16
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PUSH
34376: LD_INT 35
34378: PUSH
34379: LD_INT 49
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: PUSH
34386: LD_INT 91
34388: PUSH
34389: LD_VAR 0 1
34393: PUSH
34394: LD_INT 10
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: LIST
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: LIST
34406: PPUSH
34407: CALL_OW 69
34411: NOT
34412: IFFALSE 34422
// weapon := ru_time_lapser ;
34414: LD_ADDR_VAR 0 18
34418: PUSH
34419: LD_INT 49
34421: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34422: LD_VAR 0 12
34426: PUSH
34427: LD_INT 1
34429: PUSH
34430: LD_INT 2
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: IN
34437: PUSH
34438: LD_INT 11
34440: PUSH
34441: LD_VAR 0 5
34445: IN
34446: PUSH
34447: LD_INT 30
34449: PUSH
34450: LD_VAR 0 5
34454: IN
34455: OR
34456: AND
34457: PUSH
34458: LD_INT 6
34460: PPUSH
34461: LD_VAR 0 16
34465: PPUSH
34466: CALL_OW 321
34470: PUSH
34471: LD_INT 2
34473: EQUAL
34474: AND
34475: IFFALSE 34640
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34477: LD_INT 22
34479: PUSH
34480: LD_VAR 0 16
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 2
34491: PUSH
34492: LD_INT 35
34494: PUSH
34495: LD_INT 11
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: PUSH
34502: LD_INT 35
34504: PUSH
34505: LD_INT 30
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 91
34519: PUSH
34520: LD_VAR 0 1
34524: PUSH
34525: LD_INT 18
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: LIST
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: LIST
34537: PPUSH
34538: CALL_OW 69
34542: NOT
34543: PUSH
34544: LD_INT 22
34546: PUSH
34547: LD_VAR 0 16
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 2
34558: PUSH
34559: LD_INT 30
34561: PUSH
34562: LD_INT 32
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: PUSH
34569: LD_INT 30
34571: PUSH
34572: LD_INT 33
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: LIST
34583: PUSH
34584: LD_INT 91
34586: PUSH
34587: LD_VAR 0 1
34591: PUSH
34592: LD_INT 12
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: LIST
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: LIST
34604: PUSH
34605: EMPTY
34606: LIST
34607: PPUSH
34608: CALL_OW 69
34612: PUSH
34613: LD_INT 2
34615: GREATER
34616: AND
34617: IFFALSE 34640
// weapon := [ us_radar , ar_radar ] [ nat ] ;
34619: LD_ADDR_VAR 0 18
34623: PUSH
34624: LD_INT 11
34626: PUSH
34627: LD_INT 30
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: PUSH
34634: LD_VAR 0 12
34638: ARRAY
34639: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
34640: LD_VAR 0 18
34644: NOT
34645: PUSH
34646: LD_INT 40
34648: PPUSH
34649: LD_VAR 0 16
34653: PPUSH
34654: CALL_OW 321
34658: PUSH
34659: LD_INT 2
34661: EQUAL
34662: AND
34663: PUSH
34664: LD_INT 7
34666: PUSH
34667: LD_VAR 0 5
34671: IN
34672: PUSH
34673: LD_INT 28
34675: PUSH
34676: LD_VAR 0 5
34680: IN
34681: OR
34682: PUSH
34683: LD_INT 45
34685: PUSH
34686: LD_VAR 0 5
34690: IN
34691: OR
34692: AND
34693: IFFALSE 34947
// begin hex := GetHexInfo ( x , y ) ;
34695: LD_ADDR_VAR 0 4
34699: PUSH
34700: LD_VAR 0 10
34704: PPUSH
34705: LD_VAR 0 11
34709: PPUSH
34710: CALL_OW 546
34714: ST_TO_ADDR
// if hex [ 1 ] then
34715: LD_VAR 0 4
34719: PUSH
34720: LD_INT 1
34722: ARRAY
34723: IFFALSE 34727
// exit ;
34725: GO 35130
// height := hex [ 2 ] ;
34727: LD_ADDR_VAR 0 15
34731: PUSH
34732: LD_VAR 0 4
34736: PUSH
34737: LD_INT 2
34739: ARRAY
34740: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
34741: LD_ADDR_VAR 0 14
34745: PUSH
34746: LD_INT 0
34748: PUSH
34749: LD_INT 2
34751: PUSH
34752: LD_INT 3
34754: PUSH
34755: LD_INT 5
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: ST_TO_ADDR
// for i in tmp do
34764: LD_ADDR_VAR 0 8
34768: PUSH
34769: LD_VAR 0 14
34773: PUSH
34774: FOR_IN
34775: IFFALSE 34945
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
34777: LD_ADDR_VAR 0 9
34781: PUSH
34782: LD_VAR 0 10
34786: PPUSH
34787: LD_VAR 0 8
34791: PPUSH
34792: LD_INT 5
34794: PPUSH
34795: CALL_OW 272
34799: PUSH
34800: LD_VAR 0 11
34804: PPUSH
34805: LD_VAR 0 8
34809: PPUSH
34810: LD_INT 5
34812: PPUSH
34813: CALL_OW 273
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34822: LD_VAR 0 9
34826: PUSH
34827: LD_INT 1
34829: ARRAY
34830: PPUSH
34831: LD_VAR 0 9
34835: PUSH
34836: LD_INT 2
34838: ARRAY
34839: PPUSH
34840: CALL_OW 488
34844: IFFALSE 34943
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
34846: LD_ADDR_VAR 0 4
34850: PUSH
34851: LD_VAR 0 9
34855: PUSH
34856: LD_INT 1
34858: ARRAY
34859: PPUSH
34860: LD_VAR 0 9
34864: PUSH
34865: LD_INT 2
34867: ARRAY
34868: PPUSH
34869: CALL_OW 546
34873: ST_TO_ADDR
// if hex [ 1 ] then
34874: LD_VAR 0 4
34878: PUSH
34879: LD_INT 1
34881: ARRAY
34882: IFFALSE 34886
// continue ;
34884: GO 34774
// h := hex [ 2 ] ;
34886: LD_ADDR_VAR 0 13
34890: PUSH
34891: LD_VAR 0 4
34895: PUSH
34896: LD_INT 2
34898: ARRAY
34899: ST_TO_ADDR
// if h + 7 < height then
34900: LD_VAR 0 13
34904: PUSH
34905: LD_INT 7
34907: PLUS
34908: PUSH
34909: LD_VAR 0 15
34913: LESS
34914: IFFALSE 34943
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34916: LD_ADDR_VAR 0 18
34920: PUSH
34921: LD_INT 7
34923: PUSH
34924: LD_INT 28
34926: PUSH
34927: LD_INT 45
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: LIST
34934: PUSH
34935: LD_VAR 0 12
34939: ARRAY
34940: ST_TO_ADDR
// break ;
34941: GO 34945
// end ; end ; end ;
34943: GO 34774
34945: POP
34946: POP
// end ; if not weapon then
34947: LD_VAR 0 18
34951: NOT
34952: IFFALSE 35012
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34954: LD_ADDR_VAR 0 5
34958: PUSH
34959: LD_VAR 0 5
34963: PUSH
34964: LD_INT 11
34966: PUSH
34967: LD_INT 30
34969: PUSH
34970: LD_INT 49
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: LIST
34977: DIFF
34978: ST_TO_ADDR
// if not list then
34979: LD_VAR 0 5
34983: NOT
34984: IFFALSE 34988
// exit ;
34986: GO 35130
// weapon := list [ rand ( 1 , list ) ] ;
34988: LD_ADDR_VAR 0 18
34992: PUSH
34993: LD_VAR 0 5
34997: PUSH
34998: LD_INT 1
35000: PPUSH
35001: LD_VAR 0 5
35005: PPUSH
35006: CALL_OW 12
35010: ARRAY
35011: ST_TO_ADDR
// end ; if weapon then
35012: LD_VAR 0 18
35016: IFFALSE 35130
// begin tmp := CostOfWeapon ( weapon ) ;
35018: LD_ADDR_VAR 0 14
35022: PUSH
35023: LD_VAR 0 18
35027: PPUSH
35028: CALL_OW 451
35032: ST_TO_ADDR
// j := GetBase ( tower ) ;
35033: LD_ADDR_VAR 0 9
35037: PUSH
35038: LD_VAR 0 1
35042: PPUSH
35043: CALL_OW 274
35047: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35048: LD_VAR 0 9
35052: PPUSH
35053: LD_INT 1
35055: PPUSH
35056: CALL_OW 275
35060: PUSH
35061: LD_VAR 0 14
35065: PUSH
35066: LD_INT 1
35068: ARRAY
35069: GREATEREQUAL
35070: PUSH
35071: LD_VAR 0 9
35075: PPUSH
35076: LD_INT 2
35078: PPUSH
35079: CALL_OW 275
35083: PUSH
35084: LD_VAR 0 14
35088: PUSH
35089: LD_INT 2
35091: ARRAY
35092: GREATEREQUAL
35093: AND
35094: PUSH
35095: LD_VAR 0 9
35099: PPUSH
35100: LD_INT 3
35102: PPUSH
35103: CALL_OW 275
35107: PUSH
35108: LD_VAR 0 14
35112: PUSH
35113: LD_INT 3
35115: ARRAY
35116: GREATEREQUAL
35117: AND
35118: IFFALSE 35130
// result := weapon ;
35120: LD_ADDR_VAR 0 3
35124: PUSH
35125: LD_VAR 0 18
35129: ST_TO_ADDR
// end ; end ;
35130: LD_VAR 0 3
35134: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35135: LD_INT 0
35137: PPUSH
35138: PPUSH
// result := true ;
35139: LD_ADDR_VAR 0 3
35143: PUSH
35144: LD_INT 1
35146: ST_TO_ADDR
// if array1 = array2 then
35147: LD_VAR 0 1
35151: PUSH
35152: LD_VAR 0 2
35156: EQUAL
35157: IFFALSE 35217
// begin for i = 1 to array1 do
35159: LD_ADDR_VAR 0 4
35163: PUSH
35164: DOUBLE
35165: LD_INT 1
35167: DEC
35168: ST_TO_ADDR
35169: LD_VAR 0 1
35173: PUSH
35174: FOR_TO
35175: IFFALSE 35213
// if array1 [ i ] <> array2 [ i ] then
35177: LD_VAR 0 1
35181: PUSH
35182: LD_VAR 0 4
35186: ARRAY
35187: PUSH
35188: LD_VAR 0 2
35192: PUSH
35193: LD_VAR 0 4
35197: ARRAY
35198: NONEQUAL
35199: IFFALSE 35211
// begin result := false ;
35201: LD_ADDR_VAR 0 3
35205: PUSH
35206: LD_INT 0
35208: ST_TO_ADDR
// break ;
35209: GO 35213
// end ;
35211: GO 35174
35213: POP
35214: POP
// end else
35215: GO 35225
// result := false ;
35217: LD_ADDR_VAR 0 3
35221: PUSH
35222: LD_INT 0
35224: ST_TO_ADDR
// end ;
35225: LD_VAR 0 3
35229: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35230: LD_INT 0
35232: PPUSH
35233: PPUSH
35234: PPUSH
// pom := GetBase ( fac ) ;
35235: LD_ADDR_VAR 0 5
35239: PUSH
35240: LD_VAR 0 1
35244: PPUSH
35245: CALL_OW 274
35249: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35250: LD_ADDR_VAR 0 4
35254: PUSH
35255: LD_VAR 0 2
35259: PUSH
35260: LD_INT 1
35262: ARRAY
35263: PPUSH
35264: LD_VAR 0 2
35268: PUSH
35269: LD_INT 2
35271: ARRAY
35272: PPUSH
35273: LD_VAR 0 2
35277: PUSH
35278: LD_INT 3
35280: ARRAY
35281: PPUSH
35282: LD_VAR 0 2
35286: PUSH
35287: LD_INT 4
35289: ARRAY
35290: PPUSH
35291: CALL_OW 449
35295: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35296: LD_ADDR_VAR 0 3
35300: PUSH
35301: LD_VAR 0 5
35305: PPUSH
35306: LD_INT 1
35308: PPUSH
35309: CALL_OW 275
35313: PUSH
35314: LD_VAR 0 4
35318: PUSH
35319: LD_INT 1
35321: ARRAY
35322: GREATEREQUAL
35323: PUSH
35324: LD_VAR 0 5
35328: PPUSH
35329: LD_INT 2
35331: PPUSH
35332: CALL_OW 275
35336: PUSH
35337: LD_VAR 0 4
35341: PUSH
35342: LD_INT 2
35344: ARRAY
35345: GREATEREQUAL
35346: AND
35347: PUSH
35348: LD_VAR 0 5
35352: PPUSH
35353: LD_INT 3
35355: PPUSH
35356: CALL_OW 275
35360: PUSH
35361: LD_VAR 0 4
35365: PUSH
35366: LD_INT 3
35368: ARRAY
35369: GREATEREQUAL
35370: AND
35371: ST_TO_ADDR
// end ;
35372: LD_VAR 0 3
35376: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35377: LD_INT 0
35379: PPUSH
35380: PPUSH
35381: PPUSH
35382: PPUSH
// pom := GetBase ( building ) ;
35383: LD_ADDR_VAR 0 3
35387: PUSH
35388: LD_VAR 0 1
35392: PPUSH
35393: CALL_OW 274
35397: ST_TO_ADDR
// if not pom then
35398: LD_VAR 0 3
35402: NOT
35403: IFFALSE 35407
// exit ;
35405: GO 35577
// btype := GetBType ( building ) ;
35407: LD_ADDR_VAR 0 5
35411: PUSH
35412: LD_VAR 0 1
35416: PPUSH
35417: CALL_OW 266
35421: ST_TO_ADDR
// if btype = b_armoury then
35422: LD_VAR 0 5
35426: PUSH
35427: LD_INT 4
35429: EQUAL
35430: IFFALSE 35440
// btype := b_barracks ;
35432: LD_ADDR_VAR 0 5
35436: PUSH
35437: LD_INT 5
35439: ST_TO_ADDR
// if btype = b_depot then
35440: LD_VAR 0 5
35444: PUSH
35445: LD_INT 0
35447: EQUAL
35448: IFFALSE 35458
// btype := b_warehouse ;
35450: LD_ADDR_VAR 0 5
35454: PUSH
35455: LD_INT 1
35457: ST_TO_ADDR
// if btype = b_workshop then
35458: LD_VAR 0 5
35462: PUSH
35463: LD_INT 2
35465: EQUAL
35466: IFFALSE 35476
// btype := b_factory ;
35468: LD_ADDR_VAR 0 5
35472: PUSH
35473: LD_INT 3
35475: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35476: LD_ADDR_VAR 0 4
35480: PUSH
35481: LD_VAR 0 5
35485: PPUSH
35486: LD_VAR 0 1
35490: PPUSH
35491: CALL_OW 248
35495: PPUSH
35496: CALL_OW 450
35500: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35501: LD_ADDR_VAR 0 2
35505: PUSH
35506: LD_VAR 0 3
35510: PPUSH
35511: LD_INT 1
35513: PPUSH
35514: CALL_OW 275
35518: PUSH
35519: LD_VAR 0 4
35523: PUSH
35524: LD_INT 1
35526: ARRAY
35527: GREATEREQUAL
35528: PUSH
35529: LD_VAR 0 3
35533: PPUSH
35534: LD_INT 2
35536: PPUSH
35537: CALL_OW 275
35541: PUSH
35542: LD_VAR 0 4
35546: PUSH
35547: LD_INT 2
35549: ARRAY
35550: GREATEREQUAL
35551: AND
35552: PUSH
35553: LD_VAR 0 3
35557: PPUSH
35558: LD_INT 3
35560: PPUSH
35561: CALL_OW 275
35565: PUSH
35566: LD_VAR 0 4
35570: PUSH
35571: LD_INT 3
35573: ARRAY
35574: GREATEREQUAL
35575: AND
35576: ST_TO_ADDR
// end ;
35577: LD_VAR 0 2
35581: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
35582: LD_INT 0
35584: PPUSH
35585: PPUSH
35586: PPUSH
// pom := GetBase ( building ) ;
35587: LD_ADDR_VAR 0 4
35591: PUSH
35592: LD_VAR 0 1
35596: PPUSH
35597: CALL_OW 274
35601: ST_TO_ADDR
// if not pom then
35602: LD_VAR 0 4
35606: NOT
35607: IFFALSE 35611
// exit ;
35609: GO 35712
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35611: LD_ADDR_VAR 0 5
35615: PUSH
35616: LD_VAR 0 2
35620: PPUSH
35621: LD_VAR 0 1
35625: PPUSH
35626: CALL_OW 248
35630: PPUSH
35631: CALL_OW 450
35635: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35636: LD_ADDR_VAR 0 3
35640: PUSH
35641: LD_VAR 0 4
35645: PPUSH
35646: LD_INT 1
35648: PPUSH
35649: CALL_OW 275
35653: PUSH
35654: LD_VAR 0 5
35658: PUSH
35659: LD_INT 1
35661: ARRAY
35662: GREATEREQUAL
35663: PUSH
35664: LD_VAR 0 4
35668: PPUSH
35669: LD_INT 2
35671: PPUSH
35672: CALL_OW 275
35676: PUSH
35677: LD_VAR 0 5
35681: PUSH
35682: LD_INT 2
35684: ARRAY
35685: GREATEREQUAL
35686: AND
35687: PUSH
35688: LD_VAR 0 4
35692: PPUSH
35693: LD_INT 3
35695: PPUSH
35696: CALL_OW 275
35700: PUSH
35701: LD_VAR 0 5
35705: PUSH
35706: LD_INT 3
35708: ARRAY
35709: GREATEREQUAL
35710: AND
35711: ST_TO_ADDR
// end ;
35712: LD_VAR 0 3
35716: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
35717: LD_INT 0
35719: PPUSH
35720: PPUSH
35721: PPUSH
35722: PPUSH
35723: PPUSH
35724: PPUSH
35725: PPUSH
35726: PPUSH
35727: PPUSH
35728: PPUSH
// result := false ;
35729: LD_ADDR_VAR 0 6
35733: PUSH
35734: LD_INT 0
35736: ST_TO_ADDR
// if not base or not btype or not x or not y then
35737: LD_VAR 0 1
35741: NOT
35742: PUSH
35743: LD_VAR 0 2
35747: NOT
35748: OR
35749: PUSH
35750: LD_VAR 0 3
35754: NOT
35755: OR
35756: PUSH
35757: LD_VAR 0 4
35761: NOT
35762: OR
35763: IFFALSE 35767
// exit ;
35765: GO 36376
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
35767: LD_ADDR_VAR 0 12
35771: PUSH
35772: LD_VAR 0 2
35776: PPUSH
35777: LD_VAR 0 3
35781: PPUSH
35782: LD_VAR 0 4
35786: PPUSH
35787: LD_VAR 0 5
35791: PPUSH
35792: LD_VAR 0 1
35796: PUSH
35797: LD_INT 1
35799: ARRAY
35800: PPUSH
35801: CALL_OW 248
35805: PPUSH
35806: LD_INT 0
35808: PPUSH
35809: CALL 37213 0 6
35813: ST_TO_ADDR
// if not hexes then
35814: LD_VAR 0 12
35818: NOT
35819: IFFALSE 35823
// exit ;
35821: GO 36376
// for i = 1 to hexes do
35823: LD_ADDR_VAR 0 7
35827: PUSH
35828: DOUBLE
35829: LD_INT 1
35831: DEC
35832: ST_TO_ADDR
35833: LD_VAR 0 12
35837: PUSH
35838: FOR_TO
35839: IFFALSE 36374
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35841: LD_ADDR_VAR 0 11
35845: PUSH
35846: LD_VAR 0 12
35850: PUSH
35851: LD_VAR 0 7
35855: ARRAY
35856: PUSH
35857: LD_INT 1
35859: ARRAY
35860: PPUSH
35861: LD_VAR 0 12
35865: PUSH
35866: LD_VAR 0 7
35870: ARRAY
35871: PUSH
35872: LD_INT 2
35874: ARRAY
35875: PPUSH
35876: CALL_OW 428
35880: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35881: LD_VAR 0 12
35885: PUSH
35886: LD_VAR 0 7
35890: ARRAY
35891: PUSH
35892: LD_INT 1
35894: ARRAY
35895: PPUSH
35896: LD_VAR 0 12
35900: PUSH
35901: LD_VAR 0 7
35905: ARRAY
35906: PUSH
35907: LD_INT 2
35909: ARRAY
35910: PPUSH
35911: CALL_OW 351
35915: PUSH
35916: LD_VAR 0 12
35920: PUSH
35921: LD_VAR 0 7
35925: ARRAY
35926: PUSH
35927: LD_INT 1
35929: ARRAY
35930: PPUSH
35931: LD_VAR 0 12
35935: PUSH
35936: LD_VAR 0 7
35940: ARRAY
35941: PUSH
35942: LD_INT 2
35944: ARRAY
35945: PPUSH
35946: CALL_OW 488
35950: NOT
35951: OR
35952: PUSH
35953: LD_VAR 0 11
35957: PPUSH
35958: CALL_OW 247
35962: PUSH
35963: LD_INT 3
35965: EQUAL
35966: OR
35967: IFFALSE 35973
// exit ;
35969: POP
35970: POP
35971: GO 36376
// if not tmp or not tmp in base then
35973: LD_VAR 0 11
35977: NOT
35978: PUSH
35979: LD_VAR 0 11
35983: PUSH
35984: LD_VAR 0 1
35988: IN
35989: NOT
35990: OR
35991: IFFALSE 35995
// continue ;
35993: GO 35838
// result := true ;
35995: LD_ADDR_VAR 0 6
35999: PUSH
36000: LD_INT 1
36002: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36003: LD_ADDR_VAR 0 15
36007: PUSH
36008: LD_VAR 0 1
36012: PPUSH
36013: LD_INT 22
36015: PUSH
36016: LD_VAR 0 11
36020: PPUSH
36021: CALL_OW 255
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: PUSH
36030: LD_INT 2
36032: PUSH
36033: LD_INT 30
36035: PUSH
36036: LD_INT 0
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: PUSH
36043: LD_INT 30
36045: PUSH
36046: LD_INT 1
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: LIST
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: PPUSH
36062: CALL_OW 72
36066: ST_TO_ADDR
// if dep then
36067: LD_VAR 0 15
36071: IFFALSE 36207
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36073: LD_ADDR_VAR 0 14
36077: PUSH
36078: LD_VAR 0 15
36082: PUSH
36083: LD_INT 1
36085: ARRAY
36086: PPUSH
36087: CALL_OW 250
36091: PPUSH
36092: LD_VAR 0 15
36096: PUSH
36097: LD_INT 1
36099: ARRAY
36100: PPUSH
36101: CALL_OW 254
36105: PPUSH
36106: LD_INT 5
36108: PPUSH
36109: CALL_OW 272
36113: PUSH
36114: LD_VAR 0 15
36118: PUSH
36119: LD_INT 1
36121: ARRAY
36122: PPUSH
36123: CALL_OW 251
36127: PPUSH
36128: LD_VAR 0 15
36132: PUSH
36133: LD_INT 1
36135: ARRAY
36136: PPUSH
36137: CALL_OW 254
36141: PPUSH
36142: LD_INT 5
36144: PPUSH
36145: CALL_OW 273
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36154: LD_VAR 0 14
36158: PUSH
36159: LD_INT 1
36161: ARRAY
36162: PPUSH
36163: LD_VAR 0 14
36167: PUSH
36168: LD_INT 2
36170: ARRAY
36171: PPUSH
36172: CALL_OW 488
36176: IFFALSE 36207
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36178: LD_VAR 0 11
36182: PPUSH
36183: LD_VAR 0 14
36187: PUSH
36188: LD_INT 1
36190: ARRAY
36191: PPUSH
36192: LD_VAR 0 14
36196: PUSH
36197: LD_INT 2
36199: ARRAY
36200: PPUSH
36201: CALL_OW 111
// continue ;
36205: GO 35838
// end ; end ; r := GetDir ( tmp ) ;
36207: LD_ADDR_VAR 0 13
36211: PUSH
36212: LD_VAR 0 11
36216: PPUSH
36217: CALL_OW 254
36221: ST_TO_ADDR
// if r = 5 then
36222: LD_VAR 0 13
36226: PUSH
36227: LD_INT 5
36229: EQUAL
36230: IFFALSE 36240
// r := 0 ;
36232: LD_ADDR_VAR 0 13
36236: PUSH
36237: LD_INT 0
36239: ST_TO_ADDR
// for j = r to 5 do
36240: LD_ADDR_VAR 0 8
36244: PUSH
36245: DOUBLE
36246: LD_VAR 0 13
36250: DEC
36251: ST_TO_ADDR
36252: LD_INT 5
36254: PUSH
36255: FOR_TO
36256: IFFALSE 36370
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36258: LD_ADDR_VAR 0 9
36262: PUSH
36263: LD_VAR 0 11
36267: PPUSH
36268: CALL_OW 250
36272: PPUSH
36273: LD_VAR 0 8
36277: PPUSH
36278: LD_INT 2
36280: PPUSH
36281: CALL_OW 272
36285: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
36286: LD_ADDR_VAR 0 10
36290: PUSH
36291: LD_VAR 0 11
36295: PPUSH
36296: CALL_OW 251
36300: PPUSH
36301: LD_VAR 0 8
36305: PPUSH
36306: LD_INT 2
36308: PPUSH
36309: CALL_OW 273
36313: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36314: LD_VAR 0 9
36318: PPUSH
36319: LD_VAR 0 10
36323: PPUSH
36324: CALL_OW 488
36328: PUSH
36329: LD_VAR 0 9
36333: PPUSH
36334: LD_VAR 0 10
36338: PPUSH
36339: CALL_OW 428
36343: NOT
36344: AND
36345: IFFALSE 36368
// begin ComMoveXY ( tmp , _x , _y ) ;
36347: LD_VAR 0 11
36351: PPUSH
36352: LD_VAR 0 9
36356: PPUSH
36357: LD_VAR 0 10
36361: PPUSH
36362: CALL_OW 111
// break ;
36366: GO 36370
// end ; end ;
36368: GO 36255
36370: POP
36371: POP
// end ;
36372: GO 35838
36374: POP
36375: POP
// end ;
36376: LD_VAR 0 6
36380: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
36381: LD_INT 0
36383: PPUSH
36384: PPUSH
36385: PPUSH
36386: PPUSH
36387: PPUSH
36388: PPUSH
36389: PPUSH
36390: PPUSH
36391: PPUSH
36392: PPUSH
// result := false ;
36393: LD_ADDR_VAR 0 6
36397: PUSH
36398: LD_INT 0
36400: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36401: LD_VAR 0 1
36405: NOT
36406: PUSH
36407: LD_VAR 0 1
36411: PPUSH
36412: CALL_OW 266
36416: PUSH
36417: LD_INT 0
36419: PUSH
36420: LD_INT 1
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: IN
36427: NOT
36428: OR
36429: PUSH
36430: LD_VAR 0 2
36434: NOT
36435: OR
36436: PUSH
36437: LD_VAR 0 5
36441: PUSH
36442: LD_INT 0
36444: PUSH
36445: LD_INT 1
36447: PUSH
36448: LD_INT 2
36450: PUSH
36451: LD_INT 3
36453: PUSH
36454: LD_INT 4
36456: PUSH
36457: LD_INT 5
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: IN
36468: NOT
36469: OR
36470: PUSH
36471: LD_VAR 0 3
36475: PPUSH
36476: LD_VAR 0 4
36480: PPUSH
36481: CALL_OW 488
36485: NOT
36486: OR
36487: IFFALSE 36491
// exit ;
36489: GO 37208
// pom := GetBase ( depot ) ;
36491: LD_ADDR_VAR 0 10
36495: PUSH
36496: LD_VAR 0 1
36500: PPUSH
36501: CALL_OW 274
36505: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
36506: LD_ADDR_VAR 0 11
36510: PUSH
36511: LD_VAR 0 2
36515: PPUSH
36516: LD_VAR 0 1
36520: PPUSH
36521: CALL_OW 248
36525: PPUSH
36526: CALL_OW 450
36530: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
36531: LD_VAR 0 10
36535: PPUSH
36536: LD_INT 1
36538: PPUSH
36539: CALL_OW 275
36543: PUSH
36544: LD_VAR 0 11
36548: PUSH
36549: LD_INT 1
36551: ARRAY
36552: GREATEREQUAL
36553: PUSH
36554: LD_VAR 0 10
36558: PPUSH
36559: LD_INT 2
36561: PPUSH
36562: CALL_OW 275
36566: PUSH
36567: LD_VAR 0 11
36571: PUSH
36572: LD_INT 2
36574: ARRAY
36575: GREATEREQUAL
36576: AND
36577: PUSH
36578: LD_VAR 0 10
36582: PPUSH
36583: LD_INT 3
36585: PPUSH
36586: CALL_OW 275
36590: PUSH
36591: LD_VAR 0 11
36595: PUSH
36596: LD_INT 3
36598: ARRAY
36599: GREATEREQUAL
36600: AND
36601: NOT
36602: IFFALSE 36606
// exit ;
36604: GO 37208
// if GetBType ( depot ) = b_depot then
36606: LD_VAR 0 1
36610: PPUSH
36611: CALL_OW 266
36615: PUSH
36616: LD_INT 0
36618: EQUAL
36619: IFFALSE 36631
// dist := 28 else
36621: LD_ADDR_VAR 0 14
36625: PUSH
36626: LD_INT 28
36628: ST_TO_ADDR
36629: GO 36639
// dist := 36 ;
36631: LD_ADDR_VAR 0 14
36635: PUSH
36636: LD_INT 36
36638: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
36639: LD_VAR 0 1
36643: PPUSH
36644: LD_VAR 0 3
36648: PPUSH
36649: LD_VAR 0 4
36653: PPUSH
36654: CALL_OW 297
36658: PUSH
36659: LD_VAR 0 14
36663: GREATER
36664: IFFALSE 36668
// exit ;
36666: GO 37208
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
36668: LD_ADDR_VAR 0 12
36672: PUSH
36673: LD_VAR 0 2
36677: PPUSH
36678: LD_VAR 0 3
36682: PPUSH
36683: LD_VAR 0 4
36687: PPUSH
36688: LD_VAR 0 5
36692: PPUSH
36693: LD_VAR 0 1
36697: PPUSH
36698: CALL_OW 248
36702: PPUSH
36703: LD_INT 0
36705: PPUSH
36706: CALL 37213 0 6
36710: ST_TO_ADDR
// if not hexes then
36711: LD_VAR 0 12
36715: NOT
36716: IFFALSE 36720
// exit ;
36718: GO 37208
// hex := GetHexInfo ( x , y ) ;
36720: LD_ADDR_VAR 0 15
36724: PUSH
36725: LD_VAR 0 3
36729: PPUSH
36730: LD_VAR 0 4
36734: PPUSH
36735: CALL_OW 546
36739: ST_TO_ADDR
// if hex [ 1 ] then
36740: LD_VAR 0 15
36744: PUSH
36745: LD_INT 1
36747: ARRAY
36748: IFFALSE 36752
// exit ;
36750: GO 37208
// height := hex [ 2 ] ;
36752: LD_ADDR_VAR 0 13
36756: PUSH
36757: LD_VAR 0 15
36761: PUSH
36762: LD_INT 2
36764: ARRAY
36765: ST_TO_ADDR
// for i = 1 to hexes do
36766: LD_ADDR_VAR 0 7
36770: PUSH
36771: DOUBLE
36772: LD_INT 1
36774: DEC
36775: ST_TO_ADDR
36776: LD_VAR 0 12
36780: PUSH
36781: FOR_TO
36782: IFFALSE 37112
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
36784: LD_VAR 0 12
36788: PUSH
36789: LD_VAR 0 7
36793: ARRAY
36794: PUSH
36795: LD_INT 1
36797: ARRAY
36798: PPUSH
36799: LD_VAR 0 12
36803: PUSH
36804: LD_VAR 0 7
36808: ARRAY
36809: PUSH
36810: LD_INT 2
36812: ARRAY
36813: PPUSH
36814: CALL_OW 488
36818: NOT
36819: PUSH
36820: LD_VAR 0 12
36824: PUSH
36825: LD_VAR 0 7
36829: ARRAY
36830: PUSH
36831: LD_INT 1
36833: ARRAY
36834: PPUSH
36835: LD_VAR 0 12
36839: PUSH
36840: LD_VAR 0 7
36844: ARRAY
36845: PUSH
36846: LD_INT 2
36848: ARRAY
36849: PPUSH
36850: CALL_OW 428
36854: PUSH
36855: LD_INT 0
36857: GREATER
36858: OR
36859: PUSH
36860: LD_VAR 0 12
36864: PUSH
36865: LD_VAR 0 7
36869: ARRAY
36870: PUSH
36871: LD_INT 1
36873: ARRAY
36874: PPUSH
36875: LD_VAR 0 12
36879: PUSH
36880: LD_VAR 0 7
36884: ARRAY
36885: PUSH
36886: LD_INT 2
36888: ARRAY
36889: PPUSH
36890: CALL_OW 351
36894: OR
36895: IFFALSE 36901
// exit ;
36897: POP
36898: POP
36899: GO 37208
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36901: LD_ADDR_VAR 0 8
36905: PUSH
36906: LD_VAR 0 12
36910: PUSH
36911: LD_VAR 0 7
36915: ARRAY
36916: PUSH
36917: LD_INT 1
36919: ARRAY
36920: PPUSH
36921: LD_VAR 0 12
36925: PUSH
36926: LD_VAR 0 7
36930: ARRAY
36931: PUSH
36932: LD_INT 2
36934: ARRAY
36935: PPUSH
36936: CALL_OW 546
36940: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
36941: LD_VAR 0 8
36945: PUSH
36946: LD_INT 1
36948: ARRAY
36949: PUSH
36950: LD_VAR 0 8
36954: PUSH
36955: LD_INT 2
36957: ARRAY
36958: PUSH
36959: LD_VAR 0 13
36963: PUSH
36964: LD_INT 2
36966: PLUS
36967: GREATER
36968: OR
36969: PUSH
36970: LD_VAR 0 8
36974: PUSH
36975: LD_INT 2
36977: ARRAY
36978: PUSH
36979: LD_VAR 0 13
36983: PUSH
36984: LD_INT 2
36986: MINUS
36987: LESS
36988: OR
36989: PUSH
36990: LD_VAR 0 8
36994: PUSH
36995: LD_INT 3
36997: ARRAY
36998: PUSH
36999: LD_INT 0
37001: PUSH
37002: LD_INT 8
37004: PUSH
37005: LD_INT 9
37007: PUSH
37008: LD_INT 10
37010: PUSH
37011: LD_INT 11
37013: PUSH
37014: LD_INT 12
37016: PUSH
37017: LD_INT 13
37019: PUSH
37020: LD_INT 16
37022: PUSH
37023: LD_INT 17
37025: PUSH
37026: LD_INT 18
37028: PUSH
37029: LD_INT 19
37031: PUSH
37032: LD_INT 20
37034: PUSH
37035: LD_INT 21
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: IN
37053: NOT
37054: OR
37055: PUSH
37056: LD_VAR 0 8
37060: PUSH
37061: LD_INT 5
37063: ARRAY
37064: NOT
37065: OR
37066: PUSH
37067: LD_VAR 0 8
37071: PUSH
37072: LD_INT 6
37074: ARRAY
37075: PUSH
37076: LD_INT 1
37078: PUSH
37079: LD_INT 2
37081: PUSH
37082: LD_INT 7
37084: PUSH
37085: LD_INT 9
37087: PUSH
37088: LD_INT 10
37090: PUSH
37091: LD_INT 11
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: IN
37102: NOT
37103: OR
37104: IFFALSE 37110
// exit ;
37106: POP
37107: POP
37108: GO 37208
// end ;
37110: GO 36781
37112: POP
37113: POP
// side := GetSide ( depot ) ;
37114: LD_ADDR_VAR 0 9
37118: PUSH
37119: LD_VAR 0 1
37123: PPUSH
37124: CALL_OW 255
37128: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
37129: LD_VAR 0 9
37133: PPUSH
37134: LD_VAR 0 3
37138: PPUSH
37139: LD_VAR 0 4
37143: PPUSH
37144: LD_INT 20
37146: PPUSH
37147: CALL 29862 0 4
37151: PUSH
37152: LD_INT 4
37154: ARRAY
37155: IFFALSE 37159
// exit ;
37157: GO 37208
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
37159: LD_VAR 0 2
37163: PUSH
37164: LD_INT 29
37166: PUSH
37167: LD_INT 30
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: IN
37174: PUSH
37175: LD_VAR 0 3
37179: PPUSH
37180: LD_VAR 0 4
37184: PPUSH
37185: LD_VAR 0 9
37189: PPUSH
37190: CALL_OW 440
37194: NOT
37195: AND
37196: IFFALSE 37200
// exit ;
37198: GO 37208
// result := true ;
37200: LD_ADDR_VAR 0 6
37204: PUSH
37205: LD_INT 1
37207: ST_TO_ADDR
// end ;
37208: LD_VAR 0 6
37212: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
37213: LD_INT 0
37215: PPUSH
37216: PPUSH
37217: PPUSH
37218: PPUSH
37219: PPUSH
37220: PPUSH
37221: PPUSH
37222: PPUSH
37223: PPUSH
37224: PPUSH
37225: PPUSH
37226: PPUSH
37227: PPUSH
37228: PPUSH
37229: PPUSH
37230: PPUSH
37231: PPUSH
37232: PPUSH
37233: PPUSH
37234: PPUSH
37235: PPUSH
37236: PPUSH
37237: PPUSH
37238: PPUSH
37239: PPUSH
37240: PPUSH
37241: PPUSH
37242: PPUSH
37243: PPUSH
37244: PPUSH
37245: PPUSH
37246: PPUSH
37247: PPUSH
37248: PPUSH
37249: PPUSH
37250: PPUSH
37251: PPUSH
37252: PPUSH
37253: PPUSH
37254: PPUSH
37255: PPUSH
37256: PPUSH
37257: PPUSH
37258: PPUSH
37259: PPUSH
37260: PPUSH
37261: PPUSH
37262: PPUSH
37263: PPUSH
37264: PPUSH
37265: PPUSH
37266: PPUSH
37267: PPUSH
37268: PPUSH
37269: PPUSH
37270: PPUSH
37271: PPUSH
37272: PPUSH
// result = [ ] ;
37273: LD_ADDR_VAR 0 7
37277: PUSH
37278: EMPTY
37279: ST_TO_ADDR
// temp_list = [ ] ;
37280: LD_ADDR_VAR 0 9
37284: PUSH
37285: EMPTY
37286: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
37287: LD_VAR 0 4
37291: PUSH
37292: LD_INT 0
37294: PUSH
37295: LD_INT 1
37297: PUSH
37298: LD_INT 2
37300: PUSH
37301: LD_INT 3
37303: PUSH
37304: LD_INT 4
37306: PUSH
37307: LD_INT 5
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: LIST
37316: LIST
37317: IN
37318: NOT
37319: PUSH
37320: LD_VAR 0 1
37324: PUSH
37325: LD_INT 0
37327: PUSH
37328: LD_INT 1
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: IN
37335: PUSH
37336: LD_VAR 0 5
37340: PUSH
37341: LD_INT 1
37343: PUSH
37344: LD_INT 2
37346: PUSH
37347: LD_INT 3
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: LIST
37354: IN
37355: NOT
37356: AND
37357: OR
37358: IFFALSE 37362
// exit ;
37360: GO 55753
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37362: LD_VAR 0 1
37366: PUSH
37367: LD_INT 6
37369: PUSH
37370: LD_INT 7
37372: PUSH
37373: LD_INT 8
37375: PUSH
37376: LD_INT 13
37378: PUSH
37379: LD_INT 12
37381: PUSH
37382: LD_INT 15
37384: PUSH
37385: LD_INT 11
37387: PUSH
37388: LD_INT 14
37390: PUSH
37391: LD_INT 10
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: IN
37405: IFFALSE 37415
// btype = b_lab ;
37407: LD_ADDR_VAR 0 1
37411: PUSH
37412: LD_INT 6
37414: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37415: LD_VAR 0 6
37419: PUSH
37420: LD_INT 0
37422: PUSH
37423: LD_INT 1
37425: PUSH
37426: LD_INT 2
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: LIST
37433: IN
37434: NOT
37435: PUSH
37436: LD_VAR 0 1
37440: PUSH
37441: LD_INT 0
37443: PUSH
37444: LD_INT 1
37446: PUSH
37447: LD_INT 2
37449: PUSH
37450: LD_INT 3
37452: PUSH
37453: LD_INT 6
37455: PUSH
37456: LD_INT 36
37458: PUSH
37459: LD_INT 4
37461: PUSH
37462: LD_INT 5
37464: PUSH
37465: LD_INT 31
37467: PUSH
37468: LD_INT 32
37470: PUSH
37471: LD_INT 33
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: IN
37487: NOT
37488: PUSH
37489: LD_VAR 0 6
37493: PUSH
37494: LD_INT 1
37496: EQUAL
37497: AND
37498: OR
37499: PUSH
37500: LD_VAR 0 1
37504: PUSH
37505: LD_INT 2
37507: PUSH
37508: LD_INT 3
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: IN
37515: NOT
37516: PUSH
37517: LD_VAR 0 6
37521: PUSH
37522: LD_INT 2
37524: EQUAL
37525: AND
37526: OR
37527: IFFALSE 37537
// mode = 0 ;
37529: LD_ADDR_VAR 0 6
37533: PUSH
37534: LD_INT 0
37536: ST_TO_ADDR
// case mode of 0 :
37537: LD_VAR 0 6
37541: PUSH
37542: LD_INT 0
37544: DOUBLE
37545: EQUAL
37546: IFTRUE 37550
37548: GO 49003
37550: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37551: LD_ADDR_VAR 0 11
37555: PUSH
37556: LD_INT 0
37558: PUSH
37559: LD_INT 0
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: LD_INT 0
37568: PUSH
37569: LD_INT 1
37571: NEG
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: LD_INT 1
37579: PUSH
37580: LD_INT 0
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: PUSH
37587: LD_INT 1
37589: PUSH
37590: LD_INT 1
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: PUSH
37597: LD_INT 0
37599: PUSH
37600: LD_INT 1
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 1
37609: NEG
37610: PUSH
37611: LD_INT 0
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: LD_INT 1
37620: NEG
37621: PUSH
37622: LD_INT 1
37624: NEG
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: PUSH
37630: LD_INT 1
37632: NEG
37633: PUSH
37634: LD_INT 2
37636: NEG
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: LD_INT 0
37644: PUSH
37645: LD_INT 2
37647: NEG
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 1
37655: PUSH
37656: LD_INT 1
37658: NEG
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 1
37666: PUSH
37667: LD_INT 2
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 0
37676: PUSH
37677: LD_INT 2
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: PUSH
37684: LD_INT 1
37686: NEG
37687: PUSH
37688: LD_INT 1
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: LD_INT 1
37697: PUSH
37698: LD_INT 3
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: LD_INT 0
37707: PUSH
37708: LD_INT 3
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: LD_INT 1
37717: NEG
37718: PUSH
37719: LD_INT 2
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: LIST
37743: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37744: LD_ADDR_VAR 0 12
37748: PUSH
37749: LD_INT 0
37751: PUSH
37752: LD_INT 0
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 0
37761: PUSH
37762: LD_INT 1
37764: NEG
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PUSH
37770: LD_INT 1
37772: PUSH
37773: LD_INT 0
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 1
37782: PUSH
37783: LD_INT 1
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 0
37792: PUSH
37793: LD_INT 1
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: LD_INT 1
37802: NEG
37803: PUSH
37804: LD_INT 0
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: PUSH
37811: LD_INT 1
37813: NEG
37814: PUSH
37815: LD_INT 1
37817: NEG
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 1
37825: PUSH
37826: LD_INT 1
37828: NEG
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: PUSH
37834: LD_INT 2
37836: PUSH
37837: LD_INT 0
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 2
37846: PUSH
37847: LD_INT 1
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 1
37856: NEG
37857: PUSH
37858: LD_INT 1
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PUSH
37865: LD_INT 2
37867: NEG
37868: PUSH
37869: LD_INT 0
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 2
37878: NEG
37879: PUSH
37880: LD_INT 1
37882: NEG
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: LD_INT 2
37890: NEG
37891: PUSH
37892: LD_INT 1
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 3
37901: NEG
37902: PUSH
37903: LD_INT 0
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 3
37912: NEG
37913: PUSH
37914: LD_INT 1
37916: NEG
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37940: LD_ADDR_VAR 0 13
37944: PUSH
37945: LD_INT 0
37947: PUSH
37948: LD_INT 0
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 0
37957: PUSH
37958: LD_INT 1
37960: NEG
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: PUSH
37966: LD_INT 1
37968: PUSH
37969: LD_INT 0
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: LD_INT 1
37978: PUSH
37979: LD_INT 1
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: LD_INT 0
37988: PUSH
37989: LD_INT 1
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: LD_INT 1
37998: NEG
37999: PUSH
38000: LD_INT 0
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 1
38009: NEG
38010: PUSH
38011: LD_INT 1
38013: NEG
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: PUSH
38019: LD_INT 1
38021: NEG
38022: PUSH
38023: LD_INT 2
38025: NEG
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: PUSH
38031: LD_INT 2
38033: PUSH
38034: LD_INT 1
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 2
38043: PUSH
38044: LD_INT 2
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 1
38053: PUSH
38054: LD_INT 2
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 2
38063: NEG
38064: PUSH
38065: LD_INT 1
38067: NEG
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 2
38075: NEG
38076: PUSH
38077: LD_INT 2
38079: NEG
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 2
38087: NEG
38088: PUSH
38089: LD_INT 3
38091: NEG
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PUSH
38097: LD_INT 3
38099: NEG
38100: PUSH
38101: LD_INT 2
38103: NEG
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: LD_INT 3
38111: NEG
38112: PUSH
38113: LD_INT 3
38115: NEG
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38139: LD_ADDR_VAR 0 14
38143: PUSH
38144: LD_INT 0
38146: PUSH
38147: LD_INT 0
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 0
38156: PUSH
38157: LD_INT 1
38159: NEG
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: PUSH
38165: LD_INT 1
38167: PUSH
38168: LD_INT 0
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: PUSH
38175: LD_INT 1
38177: PUSH
38178: LD_INT 1
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: LD_INT 0
38187: PUSH
38188: LD_INT 1
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: LD_INT 1
38197: NEG
38198: PUSH
38199: LD_INT 0
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PUSH
38206: LD_INT 1
38208: NEG
38209: PUSH
38210: LD_INT 1
38212: NEG
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: LD_INT 1
38220: NEG
38221: PUSH
38222: LD_INT 2
38224: NEG
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: LD_INT 0
38232: PUSH
38233: LD_INT 2
38235: NEG
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PUSH
38241: LD_INT 1
38243: PUSH
38244: LD_INT 1
38246: NEG
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: PUSH
38252: LD_INT 1
38254: PUSH
38255: LD_INT 2
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: LD_INT 0
38264: PUSH
38265: LD_INT 2
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PUSH
38272: LD_INT 1
38274: NEG
38275: PUSH
38276: LD_INT 1
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: LD_INT 1
38285: NEG
38286: PUSH
38287: LD_INT 3
38289: NEG
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PUSH
38295: LD_INT 0
38297: PUSH
38298: LD_INT 3
38300: NEG
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 1
38308: PUSH
38309: LD_INT 2
38311: NEG
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: LIST
38324: LIST
38325: LIST
38326: LIST
38327: LIST
38328: LIST
38329: LIST
38330: LIST
38331: LIST
38332: LIST
38333: LIST
38334: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38335: LD_ADDR_VAR 0 15
38339: PUSH
38340: LD_INT 0
38342: PUSH
38343: LD_INT 0
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 0
38352: PUSH
38353: LD_INT 1
38355: NEG
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 1
38363: PUSH
38364: LD_INT 0
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 1
38373: PUSH
38374: LD_INT 1
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 0
38383: PUSH
38384: LD_INT 1
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 1
38393: NEG
38394: PUSH
38395: LD_INT 0
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: PUSH
38402: LD_INT 1
38404: NEG
38405: PUSH
38406: LD_INT 1
38408: NEG
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: LD_INT 1
38416: PUSH
38417: LD_INT 1
38419: NEG
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: LD_INT 2
38427: PUSH
38428: LD_INT 0
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 2
38437: PUSH
38438: LD_INT 1
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: PUSH
38445: LD_INT 1
38447: NEG
38448: PUSH
38449: LD_INT 1
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: PUSH
38456: LD_INT 2
38458: NEG
38459: PUSH
38460: LD_INT 0
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 2
38469: NEG
38470: PUSH
38471: LD_INT 1
38473: NEG
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 2
38481: PUSH
38482: LD_INT 1
38484: NEG
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 3
38492: PUSH
38493: LD_INT 0
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 3
38502: PUSH
38503: LD_INT 1
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: LIST
38514: LIST
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: LIST
38521: LIST
38522: LIST
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38528: LD_ADDR_VAR 0 16
38532: PUSH
38533: LD_INT 0
38535: PUSH
38536: LD_INT 0
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 0
38545: PUSH
38546: LD_INT 1
38548: NEG
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: LD_INT 1
38556: PUSH
38557: LD_INT 0
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: LD_INT 1
38566: PUSH
38567: LD_INT 1
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 0
38576: PUSH
38577: LD_INT 1
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: LD_INT 1
38586: NEG
38587: PUSH
38588: LD_INT 0
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PUSH
38595: LD_INT 1
38597: NEG
38598: PUSH
38599: LD_INT 1
38601: NEG
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 1
38609: NEG
38610: PUSH
38611: LD_INT 2
38613: NEG
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 2
38621: PUSH
38622: LD_INT 1
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 2
38631: PUSH
38632: LD_INT 2
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 1
38641: PUSH
38642: LD_INT 2
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 2
38651: NEG
38652: PUSH
38653: LD_INT 1
38655: NEG
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 2
38663: NEG
38664: PUSH
38665: LD_INT 2
38667: NEG
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 3
38675: PUSH
38676: LD_INT 2
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 3
38685: PUSH
38686: LD_INT 3
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 2
38695: PUSH
38696: LD_INT 3
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: LIST
38720: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38721: LD_ADDR_VAR 0 17
38725: PUSH
38726: LD_INT 0
38728: PUSH
38729: LD_INT 0
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 0
38738: PUSH
38739: LD_INT 1
38741: NEG
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: PUSH
38747: LD_INT 1
38749: PUSH
38750: LD_INT 0
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 1
38759: PUSH
38760: LD_INT 1
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: PUSH
38767: LD_INT 0
38769: PUSH
38770: LD_INT 1
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: LD_INT 1
38779: NEG
38780: PUSH
38781: LD_INT 0
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 1
38790: NEG
38791: PUSH
38792: LD_INT 1
38794: NEG
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 1
38802: NEG
38803: PUSH
38804: LD_INT 2
38806: NEG
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 0
38814: PUSH
38815: LD_INT 2
38817: NEG
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 1
38825: PUSH
38826: LD_INT 1
38828: NEG
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 2
38836: PUSH
38837: LD_INT 0
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 2
38846: PUSH
38847: LD_INT 1
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PUSH
38854: LD_INT 2
38856: PUSH
38857: LD_INT 2
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: PUSH
38864: LD_INT 1
38866: PUSH
38867: LD_INT 2
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: PUSH
38874: LD_INT 0
38876: PUSH
38877: LD_INT 2
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 1
38886: NEG
38887: PUSH
38888: LD_INT 1
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 2
38897: NEG
38898: PUSH
38899: LD_INT 0
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 2
38908: NEG
38909: PUSH
38910: LD_INT 1
38912: NEG
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 2
38920: NEG
38921: PUSH
38922: LD_INT 2
38924: NEG
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38951: LD_ADDR_VAR 0 18
38955: PUSH
38956: LD_INT 0
38958: PUSH
38959: LD_INT 0
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PUSH
38966: LD_INT 0
38968: PUSH
38969: LD_INT 1
38971: NEG
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 1
38979: PUSH
38980: LD_INT 0
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 1
38989: PUSH
38990: LD_INT 1
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: LD_INT 0
38999: PUSH
39000: LD_INT 1
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: PUSH
39007: LD_INT 1
39009: NEG
39010: PUSH
39011: LD_INT 0
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: LD_INT 1
39020: NEG
39021: PUSH
39022: LD_INT 1
39024: NEG
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 1
39032: NEG
39033: PUSH
39034: LD_INT 2
39036: NEG
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 0
39044: PUSH
39045: LD_INT 2
39047: NEG
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: PUSH
39053: LD_INT 1
39055: PUSH
39056: LD_INT 1
39058: NEG
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 2
39066: PUSH
39067: LD_INT 0
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 2
39076: PUSH
39077: LD_INT 1
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 2
39086: PUSH
39087: LD_INT 2
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 1
39096: PUSH
39097: LD_INT 2
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: LD_INT 0
39106: PUSH
39107: LD_INT 2
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 1
39116: NEG
39117: PUSH
39118: LD_INT 1
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: LD_INT 2
39127: NEG
39128: PUSH
39129: LD_INT 0
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 2
39138: NEG
39139: PUSH
39140: LD_INT 1
39142: NEG
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: LD_INT 2
39150: NEG
39151: PUSH
39152: LD_INT 2
39154: NEG
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39181: LD_ADDR_VAR 0 19
39185: PUSH
39186: LD_INT 0
39188: PUSH
39189: LD_INT 0
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 0
39198: PUSH
39199: LD_INT 1
39201: NEG
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: PUSH
39207: LD_INT 1
39209: PUSH
39210: LD_INT 0
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: LD_INT 1
39219: PUSH
39220: LD_INT 1
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: LD_INT 0
39229: PUSH
39230: LD_INT 1
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: LD_INT 1
39239: NEG
39240: PUSH
39241: LD_INT 0
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: LD_INT 1
39250: NEG
39251: PUSH
39252: LD_INT 1
39254: NEG
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 1
39262: NEG
39263: PUSH
39264: LD_INT 2
39266: NEG
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 0
39274: PUSH
39275: LD_INT 2
39277: NEG
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 1
39285: PUSH
39286: LD_INT 1
39288: NEG
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: LD_INT 2
39296: PUSH
39297: LD_INT 0
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PUSH
39304: LD_INT 2
39306: PUSH
39307: LD_INT 1
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: LD_INT 2
39316: PUSH
39317: LD_INT 2
39319: PUSH
39320: EMPTY
39321: LIST
39322: LIST
39323: PUSH
39324: LD_INT 1
39326: PUSH
39327: LD_INT 2
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: PUSH
39334: LD_INT 0
39336: PUSH
39337: LD_INT 2
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: LD_INT 1
39346: NEG
39347: PUSH
39348: LD_INT 1
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: LD_INT 2
39357: NEG
39358: PUSH
39359: LD_INT 0
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 2
39368: NEG
39369: PUSH
39370: LD_INT 1
39372: NEG
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 2
39380: NEG
39381: PUSH
39382: LD_INT 2
39384: NEG
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39411: LD_ADDR_VAR 0 20
39415: PUSH
39416: LD_INT 0
39418: PUSH
39419: LD_INT 0
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 0
39428: PUSH
39429: LD_INT 1
39431: NEG
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 1
39439: PUSH
39440: LD_INT 0
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: PUSH
39447: LD_INT 1
39449: PUSH
39450: LD_INT 1
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 0
39459: PUSH
39460: LD_INT 1
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 1
39469: NEG
39470: PUSH
39471: LD_INT 0
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 1
39480: NEG
39481: PUSH
39482: LD_INT 1
39484: NEG
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: LD_INT 1
39492: NEG
39493: PUSH
39494: LD_INT 2
39496: NEG
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 0
39504: PUSH
39505: LD_INT 2
39507: NEG
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 1
39515: PUSH
39516: LD_INT 1
39518: NEG
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PUSH
39524: LD_INT 2
39526: PUSH
39527: LD_INT 0
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: LD_INT 2
39536: PUSH
39537: LD_INT 1
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: LD_INT 2
39546: PUSH
39547: LD_INT 2
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: PUSH
39554: LD_INT 1
39556: PUSH
39557: LD_INT 2
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 0
39566: PUSH
39567: LD_INT 2
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 1
39576: NEG
39577: PUSH
39578: LD_INT 1
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: LD_INT 2
39587: NEG
39588: PUSH
39589: LD_INT 0
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 2
39598: NEG
39599: PUSH
39600: LD_INT 1
39602: NEG
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: PUSH
39608: LD_INT 2
39610: NEG
39611: PUSH
39612: LD_INT 2
39614: NEG
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: LIST
39633: LIST
39634: LIST
39635: LIST
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39641: LD_ADDR_VAR 0 21
39645: PUSH
39646: LD_INT 0
39648: PUSH
39649: LD_INT 0
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 0
39658: PUSH
39659: LD_INT 1
39661: NEG
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 1
39669: PUSH
39670: LD_INT 0
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_INT 1
39679: PUSH
39680: LD_INT 1
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: LD_INT 0
39689: PUSH
39690: LD_INT 1
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 1
39699: NEG
39700: PUSH
39701: LD_INT 0
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 1
39710: NEG
39711: PUSH
39712: LD_INT 1
39714: NEG
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 1
39722: NEG
39723: PUSH
39724: LD_INT 2
39726: NEG
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 0
39734: PUSH
39735: LD_INT 2
39737: NEG
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 1
39745: PUSH
39746: LD_INT 1
39748: NEG
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 2
39756: PUSH
39757: LD_INT 0
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 2
39766: PUSH
39767: LD_INT 1
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 2
39776: PUSH
39777: LD_INT 2
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 1
39786: PUSH
39787: LD_INT 2
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 0
39796: PUSH
39797: LD_INT 2
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 1
39806: NEG
39807: PUSH
39808: LD_INT 1
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 2
39817: NEG
39818: PUSH
39819: LD_INT 0
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: LD_INT 2
39828: NEG
39829: PUSH
39830: LD_INT 1
39832: NEG
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: LD_INT 2
39840: NEG
39841: PUSH
39842: LD_INT 2
39844: NEG
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39871: LD_ADDR_VAR 0 22
39875: PUSH
39876: LD_INT 0
39878: PUSH
39879: LD_INT 0
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 0
39888: PUSH
39889: LD_INT 1
39891: NEG
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 1
39899: PUSH
39900: LD_INT 0
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: LD_INT 1
39909: PUSH
39910: LD_INT 1
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 0
39919: PUSH
39920: LD_INT 1
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 1
39929: NEG
39930: PUSH
39931: LD_INT 0
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 1
39940: NEG
39941: PUSH
39942: LD_INT 1
39944: NEG
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 1
39952: NEG
39953: PUSH
39954: LD_INT 2
39956: NEG
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 0
39964: PUSH
39965: LD_INT 2
39967: NEG
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 1
39975: PUSH
39976: LD_INT 1
39978: NEG
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 2
39986: PUSH
39987: LD_INT 0
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PUSH
39994: LD_INT 2
39996: PUSH
39997: LD_INT 1
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: LD_INT 2
40006: PUSH
40007: LD_INT 2
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 1
40016: PUSH
40017: LD_INT 2
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 0
40026: PUSH
40027: LD_INT 2
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 1
40036: NEG
40037: PUSH
40038: LD_INT 1
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 2
40047: NEG
40048: PUSH
40049: LD_INT 0
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 2
40058: NEG
40059: PUSH
40060: LD_INT 1
40062: NEG
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: LD_INT 2
40070: NEG
40071: PUSH
40072: LD_INT 2
40074: NEG
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40101: LD_ADDR_VAR 0 23
40105: PUSH
40106: LD_INT 0
40108: PUSH
40109: LD_INT 0
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 0
40118: PUSH
40119: LD_INT 1
40121: NEG
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 1
40129: PUSH
40130: LD_INT 0
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 1
40139: PUSH
40140: LD_INT 1
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 0
40149: PUSH
40150: LD_INT 1
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 1
40159: NEG
40160: PUSH
40161: LD_INT 0
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 1
40170: NEG
40171: PUSH
40172: LD_INT 1
40174: NEG
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 1
40182: NEG
40183: PUSH
40184: LD_INT 2
40186: NEG
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 0
40194: PUSH
40195: LD_INT 2
40197: NEG
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 1
40205: PUSH
40206: LD_INT 1
40208: NEG
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: LD_INT 2
40216: PUSH
40217: LD_INT 0
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 2
40226: PUSH
40227: LD_INT 1
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 2
40236: PUSH
40237: LD_INT 2
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 1
40246: PUSH
40247: LD_INT 2
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 0
40256: PUSH
40257: LD_INT 2
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 1
40266: NEG
40267: PUSH
40268: LD_INT 1
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 2
40277: NEG
40278: PUSH
40279: LD_INT 0
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 2
40288: NEG
40289: PUSH
40290: LD_INT 1
40292: NEG
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: LD_INT 2
40300: NEG
40301: PUSH
40302: LD_INT 2
40304: NEG
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 2
40312: NEG
40313: PUSH
40314: LD_INT 3
40316: NEG
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 1
40324: NEG
40325: PUSH
40326: LD_INT 3
40328: NEG
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 1
40336: PUSH
40337: LD_INT 2
40339: NEG
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 2
40347: PUSH
40348: LD_INT 1
40350: NEG
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40381: LD_ADDR_VAR 0 24
40385: PUSH
40386: LD_INT 0
40388: PUSH
40389: LD_INT 0
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 0
40398: PUSH
40399: LD_INT 1
40401: NEG
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 1
40409: PUSH
40410: LD_INT 0
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 1
40419: PUSH
40420: LD_INT 1
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 0
40429: PUSH
40430: LD_INT 1
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 1
40439: NEG
40440: PUSH
40441: LD_INT 0
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 1
40450: NEG
40451: PUSH
40452: LD_INT 1
40454: NEG
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 1
40462: NEG
40463: PUSH
40464: LD_INT 2
40466: NEG
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 0
40474: PUSH
40475: LD_INT 2
40477: NEG
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 1
40485: PUSH
40486: LD_INT 1
40488: NEG
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: LD_INT 2
40496: PUSH
40497: LD_INT 0
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 2
40506: PUSH
40507: LD_INT 1
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 2
40516: PUSH
40517: LD_INT 2
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 1
40526: PUSH
40527: LD_INT 2
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 0
40536: PUSH
40537: LD_INT 2
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 1
40546: NEG
40547: PUSH
40548: LD_INT 1
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: LD_INT 2
40557: NEG
40558: PUSH
40559: LD_INT 0
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 2
40568: NEG
40569: PUSH
40570: LD_INT 1
40572: NEG
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 2
40580: NEG
40581: PUSH
40582: LD_INT 2
40584: NEG
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 1
40592: PUSH
40593: LD_INT 2
40595: NEG
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 2
40603: PUSH
40604: LD_INT 1
40606: NEG
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: LD_INT 3
40614: PUSH
40615: LD_INT 1
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 3
40624: PUSH
40625: LD_INT 2
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
40657: LD_ADDR_VAR 0 25
40661: PUSH
40662: LD_INT 0
40664: PUSH
40665: LD_INT 0
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 0
40674: PUSH
40675: LD_INT 1
40677: NEG
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: PUSH
40683: LD_INT 1
40685: PUSH
40686: LD_INT 0
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 1
40695: PUSH
40696: LD_INT 1
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 0
40705: PUSH
40706: LD_INT 1
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 1
40715: NEG
40716: PUSH
40717: LD_INT 0
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 1
40726: NEG
40727: PUSH
40728: LD_INT 1
40730: NEG
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 1
40738: NEG
40739: PUSH
40740: LD_INT 2
40742: NEG
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: LD_INT 0
40750: PUSH
40751: LD_INT 2
40753: NEG
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 1
40761: PUSH
40762: LD_INT 1
40764: NEG
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 2
40772: PUSH
40773: LD_INT 0
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 2
40782: PUSH
40783: LD_INT 1
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 2
40792: PUSH
40793: LD_INT 2
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 1
40802: PUSH
40803: LD_INT 2
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 0
40812: PUSH
40813: LD_INT 2
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 1
40822: NEG
40823: PUSH
40824: LD_INT 1
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 2
40833: NEG
40834: PUSH
40835: LD_INT 0
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 2
40844: NEG
40845: PUSH
40846: LD_INT 1
40848: NEG
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 2
40856: NEG
40857: PUSH
40858: LD_INT 2
40860: NEG
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 3
40868: PUSH
40869: LD_INT 1
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 3
40878: PUSH
40879: LD_INT 2
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 2
40888: PUSH
40889: LD_INT 3
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 1
40898: PUSH
40899: LD_INT 3
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40931: LD_ADDR_VAR 0 26
40935: PUSH
40936: LD_INT 0
40938: PUSH
40939: LD_INT 0
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 0
40948: PUSH
40949: LD_INT 1
40951: NEG
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 1
40959: PUSH
40960: LD_INT 0
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 1
40969: PUSH
40970: LD_INT 1
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: LD_INT 0
40979: PUSH
40980: LD_INT 1
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 1
40989: NEG
40990: PUSH
40991: LD_INT 0
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 1
41000: NEG
41001: PUSH
41002: LD_INT 1
41004: NEG
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 1
41012: NEG
41013: PUSH
41014: LD_INT 2
41016: NEG
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 0
41024: PUSH
41025: LD_INT 2
41027: NEG
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 1
41035: PUSH
41036: LD_INT 1
41038: NEG
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 2
41046: PUSH
41047: LD_INT 0
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 2
41056: PUSH
41057: LD_INT 1
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 2
41066: PUSH
41067: LD_INT 2
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 1
41076: PUSH
41077: LD_INT 2
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 0
41086: PUSH
41087: LD_INT 2
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 1
41096: NEG
41097: PUSH
41098: LD_INT 1
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 2
41107: NEG
41108: PUSH
41109: LD_INT 0
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 2
41118: NEG
41119: PUSH
41120: LD_INT 1
41122: NEG
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: LD_INT 2
41130: NEG
41131: PUSH
41132: LD_INT 2
41134: NEG
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 2
41142: PUSH
41143: LD_INT 3
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 1
41152: PUSH
41153: LD_INT 3
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 1
41162: NEG
41163: PUSH
41164: LD_INT 2
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 2
41173: NEG
41174: PUSH
41175: LD_INT 1
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41207: LD_ADDR_VAR 0 27
41211: PUSH
41212: LD_INT 0
41214: PUSH
41215: LD_INT 0
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 0
41224: PUSH
41225: LD_INT 1
41227: NEG
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 1
41235: PUSH
41236: LD_INT 0
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 1
41245: PUSH
41246: LD_INT 1
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 0
41255: PUSH
41256: LD_INT 1
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 1
41265: NEG
41266: PUSH
41267: LD_INT 0
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 1
41276: NEG
41277: PUSH
41278: LD_INT 1
41280: NEG
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 1
41288: NEG
41289: PUSH
41290: LD_INT 2
41292: NEG
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 0
41300: PUSH
41301: LD_INT 2
41303: NEG
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 1
41311: PUSH
41312: LD_INT 1
41314: NEG
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 2
41322: PUSH
41323: LD_INT 0
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 2
41332: PUSH
41333: LD_INT 1
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 2
41342: PUSH
41343: LD_INT 2
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 1
41352: PUSH
41353: LD_INT 2
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 0
41362: PUSH
41363: LD_INT 2
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 1
41372: NEG
41373: PUSH
41374: LD_INT 1
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 2
41383: NEG
41384: PUSH
41385: LD_INT 0
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 2
41394: NEG
41395: PUSH
41396: LD_INT 1
41398: NEG
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 2
41406: NEG
41407: PUSH
41408: LD_INT 2
41410: NEG
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 1
41418: NEG
41419: PUSH
41420: LD_INT 2
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 2
41429: NEG
41430: PUSH
41431: LD_INT 1
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 3
41440: NEG
41441: PUSH
41442: LD_INT 1
41444: NEG
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 3
41452: NEG
41453: PUSH
41454: LD_INT 2
41456: NEG
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41487: LD_ADDR_VAR 0 28
41491: PUSH
41492: LD_INT 0
41494: PUSH
41495: LD_INT 0
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PUSH
41502: LD_INT 0
41504: PUSH
41505: LD_INT 1
41507: NEG
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 1
41515: PUSH
41516: LD_INT 0
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 1
41525: PUSH
41526: LD_INT 1
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 0
41535: PUSH
41536: LD_INT 1
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 1
41545: NEG
41546: PUSH
41547: LD_INT 0
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 1
41556: NEG
41557: PUSH
41558: LD_INT 1
41560: NEG
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 1
41568: NEG
41569: PUSH
41570: LD_INT 2
41572: NEG
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 0
41580: PUSH
41581: LD_INT 2
41583: NEG
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 1
41591: PUSH
41592: LD_INT 1
41594: NEG
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 2
41602: PUSH
41603: LD_INT 0
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 2
41612: PUSH
41613: LD_INT 1
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 2
41622: PUSH
41623: LD_INT 2
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 1
41632: PUSH
41633: LD_INT 2
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 0
41642: PUSH
41643: LD_INT 2
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 1
41652: NEG
41653: PUSH
41654: LD_INT 1
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 2
41663: NEG
41664: PUSH
41665: LD_INT 0
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 2
41674: NEG
41675: PUSH
41676: LD_INT 1
41678: NEG
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 2
41686: NEG
41687: PUSH
41688: LD_INT 2
41690: NEG
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 2
41698: NEG
41699: PUSH
41700: LD_INT 3
41702: NEG
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 1
41710: NEG
41711: PUSH
41712: LD_INT 3
41714: NEG
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 3
41722: NEG
41723: PUSH
41724: LD_INT 1
41726: NEG
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: LD_INT 3
41734: NEG
41735: PUSH
41736: LD_INT 2
41738: NEG
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41769: LD_ADDR_VAR 0 29
41773: PUSH
41774: LD_INT 0
41776: PUSH
41777: LD_INT 0
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 0
41786: PUSH
41787: LD_INT 1
41789: NEG
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 1
41797: PUSH
41798: LD_INT 0
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 1
41807: PUSH
41808: LD_INT 1
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 0
41817: PUSH
41818: LD_INT 1
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 1
41827: NEG
41828: PUSH
41829: LD_INT 0
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 1
41838: NEG
41839: PUSH
41840: LD_INT 1
41842: NEG
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 1
41850: NEG
41851: PUSH
41852: LD_INT 2
41854: NEG
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 0
41862: PUSH
41863: LD_INT 2
41865: NEG
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 1
41873: PUSH
41874: LD_INT 1
41876: NEG
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 2
41884: PUSH
41885: LD_INT 0
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 2
41894: PUSH
41895: LD_INT 1
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 1
41904: PUSH
41905: LD_INT 2
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 0
41914: PUSH
41915: LD_INT 2
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 1
41924: NEG
41925: PUSH
41926: LD_INT 1
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 2
41935: NEG
41936: PUSH
41937: LD_INT 1
41939: NEG
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: LD_INT 2
41947: NEG
41948: PUSH
41949: LD_INT 2
41951: NEG
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: LD_INT 2
41959: NEG
41960: PUSH
41961: LD_INT 3
41963: NEG
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 2
41971: PUSH
41972: LD_INT 1
41974: NEG
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 3
41982: PUSH
41983: LD_INT 1
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 1
41992: PUSH
41993: LD_INT 3
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 1
42002: NEG
42003: PUSH
42004: LD_INT 2
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 3
42013: NEG
42014: PUSH
42015: LD_INT 2
42017: NEG
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42048: LD_ADDR_VAR 0 30
42052: PUSH
42053: LD_INT 0
42055: PUSH
42056: LD_INT 0
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 0
42065: PUSH
42066: LD_INT 1
42068: NEG
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 1
42076: PUSH
42077: LD_INT 0
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 1
42086: PUSH
42087: LD_INT 1
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 0
42096: PUSH
42097: LD_INT 1
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 1
42106: NEG
42107: PUSH
42108: LD_INT 0
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 1
42117: NEG
42118: PUSH
42119: LD_INT 1
42121: NEG
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 1
42129: NEG
42130: PUSH
42131: LD_INT 2
42133: NEG
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 0
42141: PUSH
42142: LD_INT 2
42144: NEG
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 1
42152: PUSH
42153: LD_INT 1
42155: NEG
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 2
42163: PUSH
42164: LD_INT 0
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 2
42173: PUSH
42174: LD_INT 1
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 2
42183: PUSH
42184: LD_INT 2
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 1
42193: PUSH
42194: LD_INT 2
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 1
42203: NEG
42204: PUSH
42205: LD_INT 1
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 2
42214: NEG
42215: PUSH
42216: LD_INT 0
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 2
42225: NEG
42226: PUSH
42227: LD_INT 1
42229: NEG
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 1
42237: NEG
42238: PUSH
42239: LD_INT 3
42241: NEG
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 1
42249: PUSH
42250: LD_INT 2
42252: NEG
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 3
42260: PUSH
42261: LD_INT 2
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 2
42270: PUSH
42271: LD_INT 3
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 2
42280: NEG
42281: PUSH
42282: LD_INT 1
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 3
42291: NEG
42292: PUSH
42293: LD_INT 1
42295: NEG
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42326: LD_ADDR_VAR 0 31
42330: PUSH
42331: LD_INT 0
42333: PUSH
42334: LD_INT 0
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: LD_INT 0
42343: PUSH
42344: LD_INT 1
42346: NEG
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 1
42354: PUSH
42355: LD_INT 0
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 1
42364: PUSH
42365: LD_INT 1
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: LD_INT 0
42374: PUSH
42375: LD_INT 1
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: PUSH
42382: LD_INT 1
42384: NEG
42385: PUSH
42386: LD_INT 0
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 1
42395: NEG
42396: PUSH
42397: LD_INT 1
42399: NEG
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 1
42407: NEG
42408: PUSH
42409: LD_INT 2
42411: NEG
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 1
42419: PUSH
42420: LD_INT 1
42422: NEG
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 2
42430: PUSH
42431: LD_INT 0
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 2
42440: PUSH
42441: LD_INT 1
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 2
42450: PUSH
42451: LD_INT 2
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 1
42460: PUSH
42461: LD_INT 2
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 0
42470: PUSH
42471: LD_INT 2
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 1
42480: NEG
42481: PUSH
42482: LD_INT 1
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 2
42491: NEG
42492: PUSH
42493: LD_INT 1
42495: NEG
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 2
42503: NEG
42504: PUSH
42505: LD_INT 2
42507: NEG
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 2
42515: NEG
42516: PUSH
42517: LD_INT 3
42519: NEG
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 2
42527: PUSH
42528: LD_INT 1
42530: NEG
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 3
42538: PUSH
42539: LD_INT 1
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 1
42548: PUSH
42549: LD_INT 3
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 1
42558: NEG
42559: PUSH
42560: LD_INT 2
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 3
42569: NEG
42570: PUSH
42571: LD_INT 2
42573: NEG
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42604: LD_ADDR_VAR 0 32
42608: PUSH
42609: LD_INT 0
42611: PUSH
42612: LD_INT 0
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 0
42621: PUSH
42622: LD_INT 1
42624: NEG
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 1
42632: PUSH
42633: LD_INT 0
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 1
42642: PUSH
42643: LD_INT 1
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 0
42652: PUSH
42653: LD_INT 1
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 1
42662: NEG
42663: PUSH
42664: LD_INT 0
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 1
42673: NEG
42674: PUSH
42675: LD_INT 1
42677: NEG
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 1
42685: NEG
42686: PUSH
42687: LD_INT 2
42689: NEG
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 0
42697: PUSH
42698: LD_INT 2
42700: NEG
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 1
42708: PUSH
42709: LD_INT 1
42711: NEG
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 2
42719: PUSH
42720: LD_INT 1
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 2
42729: PUSH
42730: LD_INT 2
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 1
42739: PUSH
42740: LD_INT 2
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 0
42749: PUSH
42750: LD_INT 2
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 1
42759: NEG
42760: PUSH
42761: LD_INT 1
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 2
42770: NEG
42771: PUSH
42772: LD_INT 0
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 2
42781: NEG
42782: PUSH
42783: LD_INT 1
42785: NEG
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 1
42793: NEG
42794: PUSH
42795: LD_INT 3
42797: NEG
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 1
42805: PUSH
42806: LD_INT 2
42808: NEG
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 3
42816: PUSH
42817: LD_INT 2
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 2
42826: PUSH
42827: LD_INT 3
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 2
42836: NEG
42837: PUSH
42838: LD_INT 1
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 3
42847: NEG
42848: PUSH
42849: LD_INT 1
42851: NEG
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42882: LD_ADDR_VAR 0 33
42886: PUSH
42887: LD_INT 0
42889: PUSH
42890: LD_INT 0
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 0
42899: PUSH
42900: LD_INT 1
42902: NEG
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 1
42910: PUSH
42911: LD_INT 0
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 1
42920: PUSH
42921: LD_INT 1
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 0
42930: PUSH
42931: LD_INT 1
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 1
42940: NEG
42941: PUSH
42942: LD_INT 0
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 1
42951: NEG
42952: PUSH
42953: LD_INT 1
42955: NEG
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 1
42963: NEG
42964: PUSH
42965: LD_INT 2
42967: NEG
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: LD_INT 1
42975: PUSH
42976: LD_INT 1
42978: NEG
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 2
42986: PUSH
42987: LD_INT 0
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 2
42996: PUSH
42997: LD_INT 1
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 1
43006: PUSH
43007: LD_INT 2
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 0
43016: PUSH
43017: LD_INT 2
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 1
43026: NEG
43027: PUSH
43028: LD_INT 1
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 2
43037: NEG
43038: PUSH
43039: LD_INT 0
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 2
43048: NEG
43049: PUSH
43050: LD_INT 1
43052: NEG
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 2
43060: NEG
43061: PUSH
43062: LD_INT 2
43064: NEG
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 2
43072: NEG
43073: PUSH
43074: LD_INT 3
43076: NEG
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 2
43084: PUSH
43085: LD_INT 1
43087: NEG
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 3
43095: PUSH
43096: LD_INT 1
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 1
43105: PUSH
43106: LD_INT 3
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 1
43115: NEG
43116: PUSH
43117: LD_INT 2
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: LD_INT 3
43126: NEG
43127: PUSH
43128: LD_INT 2
43130: NEG
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43161: LD_ADDR_VAR 0 34
43165: PUSH
43166: LD_INT 0
43168: PUSH
43169: LD_INT 0
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 0
43178: PUSH
43179: LD_INT 1
43181: NEG
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 1
43189: PUSH
43190: LD_INT 0
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 1
43199: PUSH
43200: LD_INT 1
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 0
43209: PUSH
43210: LD_INT 1
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 1
43219: NEG
43220: PUSH
43221: LD_INT 0
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 1
43230: NEG
43231: PUSH
43232: LD_INT 1
43234: NEG
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 1
43242: NEG
43243: PUSH
43244: LD_INT 2
43246: NEG
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 0
43254: PUSH
43255: LD_INT 2
43257: NEG
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 1
43265: PUSH
43266: LD_INT 1
43268: NEG
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 2
43276: PUSH
43277: LD_INT 1
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 2
43286: PUSH
43287: LD_INT 2
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 1
43296: PUSH
43297: LD_INT 2
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 1
43306: NEG
43307: PUSH
43308: LD_INT 1
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 2
43317: NEG
43318: PUSH
43319: LD_INT 0
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 2
43328: NEG
43329: PUSH
43330: LD_INT 1
43332: NEG
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 2
43340: NEG
43341: PUSH
43342: LD_INT 2
43344: NEG
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 1
43352: NEG
43353: PUSH
43354: LD_INT 3
43356: NEG
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 1
43364: PUSH
43365: LD_INT 2
43367: NEG
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 3
43375: PUSH
43376: LD_INT 2
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 2
43385: PUSH
43386: LD_INT 3
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 2
43395: NEG
43396: PUSH
43397: LD_INT 1
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 3
43406: NEG
43407: PUSH
43408: LD_INT 1
43410: NEG
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43441: LD_ADDR_VAR 0 35
43445: PUSH
43446: LD_INT 0
43448: PUSH
43449: LD_INT 0
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 0
43458: PUSH
43459: LD_INT 1
43461: NEG
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 1
43469: PUSH
43470: LD_INT 0
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 1
43479: PUSH
43480: LD_INT 1
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 0
43489: PUSH
43490: LD_INT 1
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: LD_INT 1
43499: NEG
43500: PUSH
43501: LD_INT 0
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 1
43510: NEG
43511: PUSH
43512: LD_INT 1
43514: NEG
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 2
43522: PUSH
43523: LD_INT 1
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 2
43532: NEG
43533: PUSH
43534: LD_INT 1
43536: NEG
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43553: LD_ADDR_VAR 0 36
43557: PUSH
43558: LD_INT 0
43560: PUSH
43561: LD_INT 0
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 0
43570: PUSH
43571: LD_INT 1
43573: NEG
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 1
43581: PUSH
43582: LD_INT 0
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 1
43591: PUSH
43592: LD_INT 1
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 0
43601: PUSH
43602: LD_INT 1
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 1
43611: NEG
43612: PUSH
43613: LD_INT 0
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 1
43622: NEG
43623: PUSH
43624: LD_INT 1
43626: NEG
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: LD_INT 1
43634: NEG
43635: PUSH
43636: LD_INT 2
43638: NEG
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 1
43646: PUSH
43647: LD_INT 2
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43665: LD_ADDR_VAR 0 37
43669: PUSH
43670: LD_INT 0
43672: PUSH
43673: LD_INT 0
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 0
43682: PUSH
43683: LD_INT 1
43685: NEG
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 1
43693: PUSH
43694: LD_INT 0
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 1
43703: PUSH
43704: LD_INT 1
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 0
43713: PUSH
43714: LD_INT 1
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 1
43723: NEG
43724: PUSH
43725: LD_INT 0
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 1
43734: NEG
43735: PUSH
43736: LD_INT 1
43738: NEG
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 1
43746: PUSH
43747: LD_INT 1
43749: NEG
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 1
43757: NEG
43758: PUSH
43759: LD_INT 1
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43777: LD_ADDR_VAR 0 38
43781: PUSH
43782: LD_INT 0
43784: PUSH
43785: LD_INT 0
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 0
43794: PUSH
43795: LD_INT 1
43797: NEG
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 1
43805: PUSH
43806: LD_INT 0
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 1
43815: PUSH
43816: LD_INT 1
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 0
43825: PUSH
43826: LD_INT 1
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 1
43835: NEG
43836: PUSH
43837: LD_INT 0
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 1
43846: NEG
43847: PUSH
43848: LD_INT 1
43850: NEG
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 2
43858: PUSH
43859: LD_INT 1
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 2
43868: NEG
43869: PUSH
43870: LD_INT 1
43872: NEG
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43889: LD_ADDR_VAR 0 39
43893: PUSH
43894: LD_INT 0
43896: PUSH
43897: LD_INT 0
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 0
43906: PUSH
43907: LD_INT 1
43909: NEG
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 1
43917: PUSH
43918: LD_INT 0
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 1
43927: PUSH
43928: LD_INT 1
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 0
43937: PUSH
43938: LD_INT 1
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 1
43947: NEG
43948: PUSH
43949: LD_INT 0
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 1
43958: NEG
43959: PUSH
43960: LD_INT 1
43962: NEG
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 1
43970: NEG
43971: PUSH
43972: LD_INT 2
43974: NEG
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 1
43982: PUSH
43983: LD_INT 2
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44001: LD_ADDR_VAR 0 40
44005: PUSH
44006: LD_INT 0
44008: PUSH
44009: LD_INT 0
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 0
44018: PUSH
44019: LD_INT 1
44021: NEG
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 1
44029: PUSH
44030: LD_INT 0
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 1
44039: PUSH
44040: LD_INT 1
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 0
44049: PUSH
44050: LD_INT 1
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 1
44059: NEG
44060: PUSH
44061: LD_INT 0
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 1
44070: NEG
44071: PUSH
44072: LD_INT 1
44074: NEG
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 1
44082: PUSH
44083: LD_INT 1
44085: NEG
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 1
44093: NEG
44094: PUSH
44095: LD_INT 1
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44113: LD_ADDR_VAR 0 41
44117: PUSH
44118: LD_INT 0
44120: PUSH
44121: LD_INT 0
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 0
44130: PUSH
44131: LD_INT 1
44133: NEG
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 1
44141: PUSH
44142: LD_INT 0
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 1
44151: PUSH
44152: LD_INT 1
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 0
44161: PUSH
44162: LD_INT 1
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 1
44171: NEG
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 1
44182: NEG
44183: PUSH
44184: LD_INT 1
44186: NEG
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 1
44194: NEG
44195: PUSH
44196: LD_INT 2
44198: NEG
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 1
44206: PUSH
44207: LD_INT 1
44209: NEG
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 2
44217: PUSH
44218: LD_INT 0
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 2
44227: PUSH
44228: LD_INT 1
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 2
44237: PUSH
44238: LD_INT 2
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 1
44247: PUSH
44248: LD_INT 2
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 1
44257: NEG
44258: PUSH
44259: LD_INT 1
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 2
44268: NEG
44269: PUSH
44270: LD_INT 0
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 2
44279: NEG
44280: PUSH
44281: LD_INT 1
44283: NEG
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 2
44291: NEG
44292: PUSH
44293: LD_INT 2
44295: NEG
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 2
44303: NEG
44304: PUSH
44305: LD_INT 3
44307: NEG
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 2
44315: PUSH
44316: LD_INT 1
44318: NEG
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 3
44326: PUSH
44327: LD_INT 0
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 3
44336: PUSH
44337: LD_INT 1
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 3
44346: PUSH
44347: LD_INT 2
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 3
44356: PUSH
44357: LD_INT 3
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 2
44366: PUSH
44367: LD_INT 3
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 2
44376: NEG
44377: PUSH
44378: LD_INT 1
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 3
44387: NEG
44388: PUSH
44389: LD_INT 0
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 3
44398: NEG
44399: PUSH
44400: LD_INT 1
44402: NEG
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 3
44410: NEG
44411: PUSH
44412: LD_INT 2
44414: NEG
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 3
44422: NEG
44423: PUSH
44424: LD_INT 3
44426: NEG
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44463: LD_ADDR_VAR 0 42
44467: PUSH
44468: LD_INT 0
44470: PUSH
44471: LD_INT 0
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 0
44480: PUSH
44481: LD_INT 1
44483: NEG
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 1
44491: PUSH
44492: LD_INT 0
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 1
44501: PUSH
44502: LD_INT 1
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 0
44511: PUSH
44512: LD_INT 1
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 1
44521: NEG
44522: PUSH
44523: LD_INT 0
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 1
44532: NEG
44533: PUSH
44534: LD_INT 1
44536: NEG
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 1
44544: NEG
44545: PUSH
44546: LD_INT 2
44548: NEG
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 0
44556: PUSH
44557: LD_INT 2
44559: NEG
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 1
44567: PUSH
44568: LD_INT 1
44570: NEG
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 2
44578: PUSH
44579: LD_INT 1
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 2
44588: PUSH
44589: LD_INT 2
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 1
44598: PUSH
44599: LD_INT 2
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 0
44608: PUSH
44609: LD_INT 2
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 1
44618: NEG
44619: PUSH
44620: LD_INT 1
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 2
44629: NEG
44630: PUSH
44631: LD_INT 1
44633: NEG
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 2
44641: NEG
44642: PUSH
44643: LD_INT 2
44645: NEG
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 2
44653: NEG
44654: PUSH
44655: LD_INT 3
44657: NEG
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 1
44665: NEG
44666: PUSH
44667: LD_INT 3
44669: NEG
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 0
44677: PUSH
44678: LD_INT 3
44680: NEG
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 1
44688: PUSH
44689: LD_INT 2
44691: NEG
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 3
44699: PUSH
44700: LD_INT 2
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 3
44709: PUSH
44710: LD_INT 3
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 2
44719: PUSH
44720: LD_INT 3
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 1
44729: PUSH
44730: LD_INT 3
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 0
44739: PUSH
44740: LD_INT 3
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 1
44749: NEG
44750: PUSH
44751: LD_INT 2
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 3
44760: NEG
44761: PUSH
44762: LD_INT 2
44764: NEG
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 3
44772: NEG
44773: PUSH
44774: LD_INT 3
44776: NEG
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44813: LD_ADDR_VAR 0 43
44817: PUSH
44818: LD_INT 0
44820: PUSH
44821: LD_INT 0
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 0
44830: PUSH
44831: LD_INT 1
44833: NEG
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 1
44841: PUSH
44842: LD_INT 0
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 1
44851: PUSH
44852: LD_INT 1
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 0
44861: PUSH
44862: LD_INT 1
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 1
44871: NEG
44872: PUSH
44873: LD_INT 0
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 1
44882: NEG
44883: PUSH
44884: LD_INT 1
44886: NEG
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 1
44894: NEG
44895: PUSH
44896: LD_INT 2
44898: NEG
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 0
44906: PUSH
44907: LD_INT 2
44909: NEG
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 1
44917: PUSH
44918: LD_INT 1
44920: NEG
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 2
44928: PUSH
44929: LD_INT 0
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 2
44938: PUSH
44939: LD_INT 1
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 1
44948: PUSH
44949: LD_INT 2
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 0
44958: PUSH
44959: LD_INT 2
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 1
44968: NEG
44969: PUSH
44970: LD_INT 1
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 2
44979: NEG
44980: PUSH
44981: LD_INT 0
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 2
44990: NEG
44991: PUSH
44992: LD_INT 1
44994: NEG
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 1
45002: NEG
45003: PUSH
45004: LD_INT 3
45006: NEG
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 0
45014: PUSH
45015: LD_INT 3
45017: NEG
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 1
45025: PUSH
45026: LD_INT 2
45028: NEG
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 2
45036: PUSH
45037: LD_INT 1
45039: NEG
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 3
45047: PUSH
45048: LD_INT 0
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 3
45057: PUSH
45058: LD_INT 1
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 1
45067: PUSH
45068: LD_INT 3
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 0
45077: PUSH
45078: LD_INT 3
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 1
45087: NEG
45088: PUSH
45089: LD_INT 2
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 2
45098: NEG
45099: PUSH
45100: LD_INT 1
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 3
45109: NEG
45110: PUSH
45111: LD_INT 0
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 3
45120: NEG
45121: PUSH
45122: LD_INT 1
45124: NEG
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45161: LD_ADDR_VAR 0 44
45165: PUSH
45166: LD_INT 0
45168: PUSH
45169: LD_INT 0
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 0
45178: PUSH
45179: LD_INT 1
45181: NEG
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 1
45189: PUSH
45190: LD_INT 0
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 1
45199: PUSH
45200: LD_INT 1
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 0
45209: PUSH
45210: LD_INT 1
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 1
45219: NEG
45220: PUSH
45221: LD_INT 0
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 1
45230: NEG
45231: PUSH
45232: LD_INT 1
45234: NEG
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 1
45242: NEG
45243: PUSH
45244: LD_INT 2
45246: NEG
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 1
45254: PUSH
45255: LD_INT 1
45257: NEG
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 2
45265: PUSH
45266: LD_INT 0
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 2
45275: PUSH
45276: LD_INT 1
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 2
45285: PUSH
45286: LD_INT 2
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 1
45295: PUSH
45296: LD_INT 2
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 1
45305: NEG
45306: PUSH
45307: LD_INT 1
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 2
45316: NEG
45317: PUSH
45318: LD_INT 0
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 2
45327: NEG
45328: PUSH
45329: LD_INT 1
45331: NEG
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 2
45339: NEG
45340: PUSH
45341: LD_INT 2
45343: NEG
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 2
45351: NEG
45352: PUSH
45353: LD_INT 3
45355: NEG
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 2
45363: PUSH
45364: LD_INT 1
45366: NEG
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 3
45374: PUSH
45375: LD_INT 0
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 3
45384: PUSH
45385: LD_INT 1
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 3
45394: PUSH
45395: LD_INT 2
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 3
45404: PUSH
45405: LD_INT 3
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 2
45414: PUSH
45415: LD_INT 3
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 2
45424: NEG
45425: PUSH
45426: LD_INT 1
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 3
45435: NEG
45436: PUSH
45437: LD_INT 0
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 3
45446: NEG
45447: PUSH
45448: LD_INT 1
45450: NEG
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 3
45458: NEG
45459: PUSH
45460: LD_INT 2
45462: NEG
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 3
45470: NEG
45471: PUSH
45472: LD_INT 3
45474: NEG
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45511: LD_ADDR_VAR 0 45
45515: PUSH
45516: LD_INT 0
45518: PUSH
45519: LD_INT 0
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 0
45528: PUSH
45529: LD_INT 1
45531: NEG
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 1
45539: PUSH
45540: LD_INT 0
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 1
45549: PUSH
45550: LD_INT 1
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 0
45559: PUSH
45560: LD_INT 1
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 1
45569: NEG
45570: PUSH
45571: LD_INT 0
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 1
45580: NEG
45581: PUSH
45582: LD_INT 1
45584: NEG
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 1
45592: NEG
45593: PUSH
45594: LD_INT 2
45596: NEG
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 0
45604: PUSH
45605: LD_INT 2
45607: NEG
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 1
45615: PUSH
45616: LD_INT 1
45618: NEG
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 2
45626: PUSH
45627: LD_INT 1
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 2
45636: PUSH
45637: LD_INT 2
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 1
45646: PUSH
45647: LD_INT 2
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: LD_INT 2
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 1
45666: NEG
45667: PUSH
45668: LD_INT 1
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 2
45677: NEG
45678: PUSH
45679: LD_INT 1
45681: NEG
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 2
45689: NEG
45690: PUSH
45691: LD_INT 2
45693: NEG
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 2
45701: NEG
45702: PUSH
45703: LD_INT 3
45705: NEG
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 1
45713: NEG
45714: PUSH
45715: LD_INT 3
45717: NEG
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 0
45725: PUSH
45726: LD_INT 3
45728: NEG
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 1
45736: PUSH
45737: LD_INT 2
45739: NEG
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 3
45747: PUSH
45748: LD_INT 2
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 3
45757: PUSH
45758: LD_INT 3
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 2
45767: PUSH
45768: LD_INT 3
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 1
45777: PUSH
45778: LD_INT 3
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 0
45787: PUSH
45788: LD_INT 3
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 1
45797: NEG
45798: PUSH
45799: LD_INT 2
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 3
45808: NEG
45809: PUSH
45810: LD_INT 2
45812: NEG
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 3
45820: NEG
45821: PUSH
45822: LD_INT 3
45824: NEG
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45861: LD_ADDR_VAR 0 46
45865: PUSH
45866: LD_INT 0
45868: PUSH
45869: LD_INT 0
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 0
45878: PUSH
45879: LD_INT 1
45881: NEG
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 1
45889: PUSH
45890: LD_INT 0
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 1
45899: PUSH
45900: LD_INT 1
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 0
45909: PUSH
45910: LD_INT 1
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 1
45919: NEG
45920: PUSH
45921: LD_INT 0
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 1
45930: NEG
45931: PUSH
45932: LD_INT 1
45934: NEG
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 1
45942: NEG
45943: PUSH
45944: LD_INT 2
45946: NEG
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 0
45954: PUSH
45955: LD_INT 2
45957: NEG
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 1
45965: PUSH
45966: LD_INT 1
45968: NEG
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 2
45976: PUSH
45977: LD_INT 0
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 2
45986: PUSH
45987: LD_INT 1
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 1
45996: PUSH
45997: LD_INT 2
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 0
46006: PUSH
46007: LD_INT 2
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 1
46016: NEG
46017: PUSH
46018: LD_INT 1
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 2
46027: NEG
46028: PUSH
46029: LD_INT 0
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 2
46038: NEG
46039: PUSH
46040: LD_INT 1
46042: NEG
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 1
46050: NEG
46051: PUSH
46052: LD_INT 3
46054: NEG
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 0
46062: PUSH
46063: LD_INT 3
46065: NEG
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 1
46073: PUSH
46074: LD_INT 2
46076: NEG
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 2
46084: PUSH
46085: LD_INT 1
46087: NEG
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 3
46095: PUSH
46096: LD_INT 0
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 3
46105: PUSH
46106: LD_INT 1
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 1
46115: PUSH
46116: LD_INT 3
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 0
46125: PUSH
46126: LD_INT 3
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 1
46135: NEG
46136: PUSH
46137: LD_INT 2
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 2
46146: NEG
46147: PUSH
46148: LD_INT 1
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 3
46157: NEG
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 3
46168: NEG
46169: PUSH
46170: LD_INT 1
46172: NEG
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46209: LD_ADDR_VAR 0 47
46213: PUSH
46214: LD_INT 0
46216: PUSH
46217: LD_INT 0
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 0
46226: PUSH
46227: LD_INT 1
46229: NEG
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 1
46237: PUSH
46238: LD_INT 0
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 1
46247: PUSH
46248: LD_INT 1
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 0
46257: PUSH
46258: LD_INT 1
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 1
46267: NEG
46268: PUSH
46269: LD_INT 0
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 1
46278: NEG
46279: PUSH
46280: LD_INT 1
46282: NEG
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 1
46290: NEG
46291: PUSH
46292: LD_INT 2
46294: NEG
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 0
46302: PUSH
46303: LD_INT 2
46305: NEG
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 1
46313: PUSH
46314: LD_INT 1
46316: NEG
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 2
46324: NEG
46325: PUSH
46326: LD_INT 1
46328: NEG
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 2
46336: NEG
46337: PUSH
46338: LD_INT 2
46340: NEG
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46360: LD_ADDR_VAR 0 48
46364: PUSH
46365: LD_INT 0
46367: PUSH
46368: LD_INT 0
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 0
46377: PUSH
46378: LD_INT 1
46380: NEG
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 1
46388: PUSH
46389: LD_INT 0
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 1
46398: PUSH
46399: LD_INT 1
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 0
46408: PUSH
46409: LD_INT 1
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 1
46418: NEG
46419: PUSH
46420: LD_INT 0
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 1
46429: NEG
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 1
46441: NEG
46442: PUSH
46443: LD_INT 2
46445: NEG
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 0
46453: PUSH
46454: LD_INT 2
46456: NEG
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 1
46464: PUSH
46465: LD_INT 1
46467: NEG
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 2
46475: PUSH
46476: LD_INT 0
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 2
46485: PUSH
46486: LD_INT 1
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46507: LD_ADDR_VAR 0 49
46511: PUSH
46512: LD_INT 0
46514: PUSH
46515: LD_INT 0
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 0
46524: PUSH
46525: LD_INT 1
46527: NEG
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 1
46535: PUSH
46536: LD_INT 0
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 1
46545: PUSH
46546: LD_INT 1
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 0
46555: PUSH
46556: LD_INT 1
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 1
46565: NEG
46566: PUSH
46567: LD_INT 0
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 1
46576: NEG
46577: PUSH
46578: LD_INT 1
46580: NEG
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 1
46588: PUSH
46589: LD_INT 1
46591: NEG
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 2
46599: PUSH
46600: LD_INT 0
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 2
46609: PUSH
46610: LD_INT 1
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 2
46619: PUSH
46620: LD_INT 2
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 1
46629: PUSH
46630: LD_INT 2
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46651: LD_ADDR_VAR 0 50
46655: PUSH
46656: LD_INT 0
46658: PUSH
46659: LD_INT 0
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 0
46668: PUSH
46669: LD_INT 1
46671: NEG
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 1
46679: PUSH
46680: LD_INT 0
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 1
46689: PUSH
46690: LD_INT 1
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 0
46699: PUSH
46700: LD_INT 1
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 1
46709: NEG
46710: PUSH
46711: LD_INT 0
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 1
46720: NEG
46721: PUSH
46722: LD_INT 1
46724: NEG
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 2
46732: PUSH
46733: LD_INT 1
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 2
46742: PUSH
46743: LD_INT 2
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 1
46752: PUSH
46753: LD_INT 2
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: LD_INT 2
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 1
46772: NEG
46773: PUSH
46774: LD_INT 1
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46795: LD_ADDR_VAR 0 51
46799: PUSH
46800: LD_INT 0
46802: PUSH
46803: LD_INT 0
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 0
46812: PUSH
46813: LD_INT 1
46815: NEG
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 1
46823: PUSH
46824: LD_INT 0
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 1
46833: PUSH
46834: LD_INT 1
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 0
46843: PUSH
46844: LD_INT 1
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 1
46853: NEG
46854: PUSH
46855: LD_INT 0
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 1
46864: NEG
46865: PUSH
46866: LD_INT 1
46868: NEG
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 1
46876: PUSH
46877: LD_INT 2
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 0
46886: PUSH
46887: LD_INT 2
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 1
46896: NEG
46897: PUSH
46898: LD_INT 1
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 2
46907: NEG
46908: PUSH
46909: LD_INT 0
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 2
46918: NEG
46919: PUSH
46920: LD_INT 1
46922: NEG
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46942: LD_ADDR_VAR 0 52
46946: PUSH
46947: LD_INT 0
46949: PUSH
46950: LD_INT 0
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 0
46959: PUSH
46960: LD_INT 1
46962: NEG
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 1
46970: PUSH
46971: LD_INT 0
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 1
46980: PUSH
46981: LD_INT 1
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 0
46990: PUSH
46991: LD_INT 1
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 1
47000: NEG
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 1
47011: NEG
47012: PUSH
47013: LD_INT 1
47015: NEG
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 1
47023: NEG
47024: PUSH
47025: LD_INT 2
47027: NEG
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 1
47035: NEG
47036: PUSH
47037: LD_INT 1
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 2
47046: NEG
47047: PUSH
47048: LD_INT 0
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 2
47057: NEG
47058: PUSH
47059: LD_INT 1
47061: NEG
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 2
47069: NEG
47070: PUSH
47071: LD_INT 2
47073: NEG
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47093: LD_ADDR_VAR 0 53
47097: PUSH
47098: LD_INT 0
47100: PUSH
47101: LD_INT 0
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 0
47110: PUSH
47111: LD_INT 1
47113: NEG
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 1
47121: PUSH
47122: LD_INT 0
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 1
47131: PUSH
47132: LD_INT 1
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 0
47141: PUSH
47142: LD_INT 1
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 1
47151: NEG
47152: PUSH
47153: LD_INT 0
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 1
47162: NEG
47163: PUSH
47164: LD_INT 1
47166: NEG
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 1
47174: NEG
47175: PUSH
47176: LD_INT 2
47178: NEG
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 0
47186: PUSH
47187: LD_INT 2
47189: NEG
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 1
47197: PUSH
47198: LD_INT 1
47200: NEG
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 2
47208: PUSH
47209: LD_INT 0
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 2
47218: PUSH
47219: LD_INT 1
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 2
47228: PUSH
47229: LD_INT 2
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 1
47238: PUSH
47239: LD_INT 2
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 0
47248: PUSH
47249: LD_INT 2
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 1
47258: NEG
47259: PUSH
47260: LD_INT 1
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 2
47269: NEG
47270: PUSH
47271: LD_INT 0
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 2
47280: NEG
47281: PUSH
47282: LD_INT 1
47284: NEG
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 2
47292: NEG
47293: PUSH
47294: LD_INT 2
47296: NEG
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47323: LD_ADDR_VAR 0 54
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: LD_INT 0
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 0
47340: PUSH
47341: LD_INT 1
47343: NEG
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 1
47351: PUSH
47352: LD_INT 0
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 1
47361: PUSH
47362: LD_INT 1
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 0
47371: PUSH
47372: LD_INT 1
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 1
47381: NEG
47382: PUSH
47383: LD_INT 0
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 1
47392: NEG
47393: PUSH
47394: LD_INT 1
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 1
47404: NEG
47405: PUSH
47406: LD_INT 2
47408: NEG
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 0
47416: PUSH
47417: LD_INT 2
47419: NEG
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 1
47427: PUSH
47428: LD_INT 1
47430: NEG
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 2
47438: PUSH
47439: LD_INT 0
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 2
47448: PUSH
47449: LD_INT 1
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 2
47458: PUSH
47459: LD_INT 2
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 1
47468: PUSH
47469: LD_INT 2
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 0
47478: PUSH
47479: LD_INT 2
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 1
47488: NEG
47489: PUSH
47490: LD_INT 1
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 2
47499: NEG
47500: PUSH
47501: LD_INT 0
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 2
47510: NEG
47511: PUSH
47512: LD_INT 1
47514: NEG
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 2
47522: NEG
47523: PUSH
47524: LD_INT 2
47526: NEG
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47553: LD_ADDR_VAR 0 55
47557: PUSH
47558: LD_INT 0
47560: PUSH
47561: LD_INT 0
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 0
47570: PUSH
47571: LD_INT 1
47573: NEG
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 1
47581: PUSH
47582: LD_INT 0
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 1
47591: PUSH
47592: LD_INT 1
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 0
47601: PUSH
47602: LD_INT 1
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 1
47611: NEG
47612: PUSH
47613: LD_INT 0
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 1
47622: NEG
47623: PUSH
47624: LD_INT 1
47626: NEG
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 1
47634: NEG
47635: PUSH
47636: LD_INT 2
47638: NEG
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 0
47646: PUSH
47647: LD_INT 2
47649: NEG
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 1
47657: PUSH
47658: LD_INT 1
47660: NEG
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 2
47668: PUSH
47669: LD_INT 0
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 2
47678: PUSH
47679: LD_INT 1
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 2
47688: PUSH
47689: LD_INT 2
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 1
47698: PUSH
47699: LD_INT 2
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 0
47708: PUSH
47709: LD_INT 2
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 1
47718: NEG
47719: PUSH
47720: LD_INT 1
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 2
47729: NEG
47730: PUSH
47731: LD_INT 0
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 2
47740: NEG
47741: PUSH
47742: LD_INT 1
47744: NEG
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 2
47752: NEG
47753: PUSH
47754: LD_INT 2
47756: NEG
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47783: LD_ADDR_VAR 0 56
47787: PUSH
47788: LD_INT 0
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 0
47800: PUSH
47801: LD_INT 1
47803: NEG
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 1
47811: PUSH
47812: LD_INT 0
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 1
47821: PUSH
47822: LD_INT 1
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 0
47831: PUSH
47832: LD_INT 1
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 1
47841: NEG
47842: PUSH
47843: LD_INT 0
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 1
47852: NEG
47853: PUSH
47854: LD_INT 1
47856: NEG
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 1
47864: NEG
47865: PUSH
47866: LD_INT 2
47868: NEG
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 0
47876: PUSH
47877: LD_INT 2
47879: NEG
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 1
47887: PUSH
47888: LD_INT 1
47890: NEG
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 2
47898: PUSH
47899: LD_INT 0
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 2
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 2
47918: PUSH
47919: LD_INT 2
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 1
47928: PUSH
47929: LD_INT 2
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 0
47938: PUSH
47939: LD_INT 2
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 1
47948: NEG
47949: PUSH
47950: LD_INT 1
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 2
47959: NEG
47960: PUSH
47961: LD_INT 0
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 2
47970: NEG
47971: PUSH
47972: LD_INT 1
47974: NEG
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 2
47982: NEG
47983: PUSH
47984: LD_INT 2
47986: NEG
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48013: LD_ADDR_VAR 0 57
48017: PUSH
48018: LD_INT 0
48020: PUSH
48021: LD_INT 0
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 0
48030: PUSH
48031: LD_INT 1
48033: NEG
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 1
48041: PUSH
48042: LD_INT 0
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 1
48051: PUSH
48052: LD_INT 1
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 0
48061: PUSH
48062: LD_INT 1
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 1
48071: NEG
48072: PUSH
48073: LD_INT 0
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 1
48082: NEG
48083: PUSH
48084: LD_INT 1
48086: NEG
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 1
48094: NEG
48095: PUSH
48096: LD_INT 2
48098: NEG
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 0
48106: PUSH
48107: LD_INT 2
48109: NEG
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 1
48117: PUSH
48118: LD_INT 1
48120: NEG
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 2
48128: PUSH
48129: LD_INT 0
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 2
48138: PUSH
48139: LD_INT 1
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 2
48148: PUSH
48149: LD_INT 2
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 1
48158: PUSH
48159: LD_INT 2
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 0
48168: PUSH
48169: LD_INT 2
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 1
48178: NEG
48179: PUSH
48180: LD_INT 1
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 2
48189: NEG
48190: PUSH
48191: LD_INT 0
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 2
48200: NEG
48201: PUSH
48202: LD_INT 1
48204: NEG
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 2
48212: NEG
48213: PUSH
48214: LD_INT 2
48216: NEG
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48243: LD_ADDR_VAR 0 58
48247: PUSH
48248: LD_INT 0
48250: PUSH
48251: LD_INT 0
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 0
48260: PUSH
48261: LD_INT 1
48263: NEG
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 1
48271: PUSH
48272: LD_INT 0
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 1
48281: PUSH
48282: LD_INT 1
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 0
48291: PUSH
48292: LD_INT 1
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 1
48301: NEG
48302: PUSH
48303: LD_INT 0
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 1
48312: NEG
48313: PUSH
48314: LD_INT 1
48316: NEG
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 1
48324: NEG
48325: PUSH
48326: LD_INT 2
48328: NEG
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 0
48336: PUSH
48337: LD_INT 2
48339: NEG
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 1
48347: PUSH
48348: LD_INT 1
48350: NEG
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 2
48358: PUSH
48359: LD_INT 0
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 2
48368: PUSH
48369: LD_INT 1
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 2
48378: PUSH
48379: LD_INT 2
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 1
48388: PUSH
48389: LD_INT 2
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 0
48398: PUSH
48399: LD_INT 2
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 1
48408: NEG
48409: PUSH
48410: LD_INT 1
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 2
48419: NEG
48420: PUSH
48421: LD_INT 0
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 2
48430: NEG
48431: PUSH
48432: LD_INT 1
48434: NEG
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 2
48442: NEG
48443: PUSH
48444: LD_INT 2
48446: NEG
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48473: LD_ADDR_VAR 0 59
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: LD_INT 0
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 0
48490: PUSH
48491: LD_INT 1
48493: NEG
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 1
48501: PUSH
48502: LD_INT 0
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 1
48511: PUSH
48512: LD_INT 1
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 0
48521: PUSH
48522: LD_INT 1
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 1
48531: NEG
48532: PUSH
48533: LD_INT 0
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 1
48542: NEG
48543: PUSH
48544: LD_INT 1
48546: NEG
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48561: LD_ADDR_VAR 0 60
48565: PUSH
48566: LD_INT 0
48568: PUSH
48569: LD_INT 0
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 0
48578: PUSH
48579: LD_INT 1
48581: NEG
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 1
48589: PUSH
48590: LD_INT 0
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 1
48599: PUSH
48600: LD_INT 1
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 0
48609: PUSH
48610: LD_INT 1
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 1
48619: NEG
48620: PUSH
48621: LD_INT 0
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 1
48630: NEG
48631: PUSH
48632: LD_INT 1
48634: NEG
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48649: LD_ADDR_VAR 0 61
48653: PUSH
48654: LD_INT 0
48656: PUSH
48657: LD_INT 0
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: LD_INT 1
48669: NEG
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 1
48677: PUSH
48678: LD_INT 0
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 1
48687: PUSH
48688: LD_INT 1
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 0
48697: PUSH
48698: LD_INT 1
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 1
48707: NEG
48708: PUSH
48709: LD_INT 0
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 1
48718: NEG
48719: PUSH
48720: LD_INT 1
48722: NEG
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48737: LD_ADDR_VAR 0 62
48741: PUSH
48742: LD_INT 0
48744: PUSH
48745: LD_INT 0
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 0
48754: PUSH
48755: LD_INT 1
48757: NEG
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 1
48765: PUSH
48766: LD_INT 0
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 1
48775: PUSH
48776: LD_INT 1
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 0
48785: PUSH
48786: LD_INT 1
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 1
48795: NEG
48796: PUSH
48797: LD_INT 0
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 1
48806: NEG
48807: PUSH
48808: LD_INT 1
48810: NEG
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48825: LD_ADDR_VAR 0 63
48829: PUSH
48830: LD_INT 0
48832: PUSH
48833: LD_INT 0
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 0
48842: PUSH
48843: LD_INT 1
48845: NEG
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 1
48853: PUSH
48854: LD_INT 0
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 1
48863: PUSH
48864: LD_INT 1
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 0
48873: PUSH
48874: LD_INT 1
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 1
48883: NEG
48884: PUSH
48885: LD_INT 0
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 1
48894: NEG
48895: PUSH
48896: LD_INT 1
48898: NEG
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48913: LD_ADDR_VAR 0 64
48917: PUSH
48918: LD_INT 0
48920: PUSH
48921: LD_INT 0
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 0
48930: PUSH
48931: LD_INT 1
48933: NEG
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: LD_INT 0
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 1
48951: PUSH
48952: LD_INT 1
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 0
48961: PUSH
48962: LD_INT 1
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 1
48971: NEG
48972: PUSH
48973: LD_INT 0
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 1
48982: NEG
48983: PUSH
48984: LD_INT 1
48986: NEG
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: ST_TO_ADDR
// end ; 1 :
49001: GO 54898
49003: LD_INT 1
49005: DOUBLE
49006: EQUAL
49007: IFTRUE 49011
49009: GO 51634
49011: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49012: LD_ADDR_VAR 0 11
49016: PUSH
49017: LD_INT 1
49019: NEG
49020: PUSH
49021: LD_INT 3
49023: NEG
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 0
49031: PUSH
49032: LD_INT 3
49034: NEG
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 1
49042: PUSH
49043: LD_INT 2
49045: NEG
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: LIST
49055: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49056: LD_ADDR_VAR 0 12
49060: PUSH
49061: LD_INT 2
49063: PUSH
49064: LD_INT 1
49066: NEG
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 3
49074: PUSH
49075: LD_INT 0
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 3
49084: PUSH
49085: LD_INT 1
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: LIST
49096: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49097: LD_ADDR_VAR 0 13
49101: PUSH
49102: LD_INT 3
49104: PUSH
49105: LD_INT 2
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 3
49114: PUSH
49115: LD_INT 3
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 2
49124: PUSH
49125: LD_INT 3
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: LIST
49136: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49137: LD_ADDR_VAR 0 14
49141: PUSH
49142: LD_INT 1
49144: PUSH
49145: LD_INT 3
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 0
49154: PUSH
49155: LD_INT 3
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 1
49164: NEG
49165: PUSH
49166: LD_INT 2
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: LIST
49177: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49178: LD_ADDR_VAR 0 15
49182: PUSH
49183: LD_INT 2
49185: NEG
49186: PUSH
49187: LD_INT 1
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 3
49196: NEG
49197: PUSH
49198: LD_INT 0
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 3
49207: NEG
49208: PUSH
49209: LD_INT 1
49211: NEG
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: LIST
49221: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49222: LD_ADDR_VAR 0 16
49226: PUSH
49227: LD_INT 2
49229: NEG
49230: PUSH
49231: LD_INT 3
49233: NEG
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 3
49241: NEG
49242: PUSH
49243: LD_INT 2
49245: NEG
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 3
49253: NEG
49254: PUSH
49255: LD_INT 3
49257: NEG
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: LIST
49267: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49268: LD_ADDR_VAR 0 17
49272: PUSH
49273: LD_INT 1
49275: NEG
49276: PUSH
49277: LD_INT 3
49279: NEG
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 0
49287: PUSH
49288: LD_INT 3
49290: NEG
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 1
49298: PUSH
49299: LD_INT 2
49301: NEG
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: LIST
49311: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49312: LD_ADDR_VAR 0 18
49316: PUSH
49317: LD_INT 2
49319: PUSH
49320: LD_INT 1
49322: NEG
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 3
49330: PUSH
49331: LD_INT 0
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 3
49340: PUSH
49341: LD_INT 1
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: LIST
49352: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49353: LD_ADDR_VAR 0 19
49357: PUSH
49358: LD_INT 3
49360: PUSH
49361: LD_INT 2
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 3
49370: PUSH
49371: LD_INT 3
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 2
49380: PUSH
49381: LD_INT 3
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: LIST
49392: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49393: LD_ADDR_VAR 0 20
49397: PUSH
49398: LD_INT 1
49400: PUSH
49401: LD_INT 3
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 0
49410: PUSH
49411: LD_INT 3
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 1
49420: NEG
49421: PUSH
49422: LD_INT 2
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: LIST
49433: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49434: LD_ADDR_VAR 0 21
49438: PUSH
49439: LD_INT 2
49441: NEG
49442: PUSH
49443: LD_INT 1
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 3
49452: NEG
49453: PUSH
49454: LD_INT 0
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 3
49463: NEG
49464: PUSH
49465: LD_INT 1
49467: NEG
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: LIST
49477: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49478: LD_ADDR_VAR 0 22
49482: PUSH
49483: LD_INT 2
49485: NEG
49486: PUSH
49487: LD_INT 3
49489: NEG
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 3
49497: NEG
49498: PUSH
49499: LD_INT 2
49501: NEG
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 3
49509: NEG
49510: PUSH
49511: LD_INT 3
49513: NEG
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: LIST
49523: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
49524: LD_ADDR_VAR 0 23
49528: PUSH
49529: LD_INT 0
49531: PUSH
49532: LD_INT 3
49534: NEG
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 1
49542: NEG
49543: PUSH
49544: LD_INT 4
49546: NEG
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 1
49554: PUSH
49555: LD_INT 3
49557: NEG
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: LIST
49567: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
49568: LD_ADDR_VAR 0 24
49572: PUSH
49573: LD_INT 3
49575: PUSH
49576: LD_INT 0
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 3
49585: PUSH
49586: LD_INT 1
49588: NEG
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 4
49596: PUSH
49597: LD_INT 1
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: LIST
49608: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
49609: LD_ADDR_VAR 0 25
49613: PUSH
49614: LD_INT 3
49616: PUSH
49617: LD_INT 3
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 4
49626: PUSH
49627: LD_INT 3
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 3
49636: PUSH
49637: LD_INT 4
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: LIST
49648: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
49649: LD_ADDR_VAR 0 26
49653: PUSH
49654: LD_INT 0
49656: PUSH
49657: LD_INT 3
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 1
49666: PUSH
49667: LD_INT 4
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 1
49676: NEG
49677: PUSH
49678: LD_INT 3
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: LIST
49689: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
49690: LD_ADDR_VAR 0 27
49694: PUSH
49695: LD_INT 3
49697: NEG
49698: PUSH
49699: LD_INT 0
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 3
49708: NEG
49709: PUSH
49710: LD_INT 1
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 4
49719: NEG
49720: PUSH
49721: LD_INT 1
49723: NEG
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: LIST
49733: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
49734: LD_ADDR_VAR 0 28
49738: PUSH
49739: LD_INT 3
49741: NEG
49742: PUSH
49743: LD_INT 3
49745: NEG
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 3
49753: NEG
49754: PUSH
49755: LD_INT 4
49757: NEG
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 4
49765: NEG
49766: PUSH
49767: LD_INT 3
49769: NEG
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: LIST
49779: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
49780: LD_ADDR_VAR 0 29
49784: PUSH
49785: LD_INT 1
49787: NEG
49788: PUSH
49789: LD_INT 3
49791: NEG
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 0
49799: PUSH
49800: LD_INT 3
49802: NEG
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 1
49810: PUSH
49811: LD_INT 2
49813: NEG
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 1
49821: NEG
49822: PUSH
49823: LD_INT 4
49825: NEG
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 0
49833: PUSH
49834: LD_INT 4
49836: NEG
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 1
49844: PUSH
49845: LD_INT 3
49847: NEG
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 1
49855: NEG
49856: PUSH
49857: LD_INT 5
49859: NEG
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 0
49867: PUSH
49868: LD_INT 5
49870: NEG
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 1
49878: PUSH
49879: LD_INT 4
49881: NEG
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 1
49889: NEG
49890: PUSH
49891: LD_INT 6
49893: NEG
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 0
49901: PUSH
49902: LD_INT 6
49904: NEG
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 1
49912: PUSH
49913: LD_INT 5
49915: NEG
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
49935: LD_ADDR_VAR 0 30
49939: PUSH
49940: LD_INT 2
49942: PUSH
49943: LD_INT 1
49945: NEG
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 3
49953: PUSH
49954: LD_INT 0
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 3
49963: PUSH
49964: LD_INT 1
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 3
49973: PUSH
49974: LD_INT 1
49976: NEG
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 4
49984: PUSH
49985: LD_INT 0
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 4
49994: PUSH
49995: LD_INT 1
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 4
50004: PUSH
50005: LD_INT 1
50007: NEG
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 5
50015: PUSH
50016: LD_INT 0
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 5
50025: PUSH
50026: LD_INT 1
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 5
50035: PUSH
50036: LD_INT 1
50038: NEG
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 6
50046: PUSH
50047: LD_INT 0
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 6
50056: PUSH
50057: LD_INT 1
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
50078: LD_ADDR_VAR 0 31
50082: PUSH
50083: LD_INT 3
50085: PUSH
50086: LD_INT 2
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 3
50095: PUSH
50096: LD_INT 3
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 2
50105: PUSH
50106: LD_INT 3
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 4
50115: PUSH
50116: LD_INT 3
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 4
50125: PUSH
50126: LD_INT 4
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 3
50135: PUSH
50136: LD_INT 4
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 5
50145: PUSH
50146: LD_INT 4
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 5
50155: PUSH
50156: LD_INT 5
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 4
50165: PUSH
50166: LD_INT 5
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 6
50175: PUSH
50176: LD_INT 5
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 6
50185: PUSH
50186: LD_INT 6
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 5
50195: PUSH
50196: LD_INT 6
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
50217: LD_ADDR_VAR 0 32
50221: PUSH
50222: LD_INT 1
50224: PUSH
50225: LD_INT 3
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 0
50234: PUSH
50235: LD_INT 3
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 1
50244: NEG
50245: PUSH
50246: LD_INT 2
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 1
50255: PUSH
50256: LD_INT 4
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 0
50265: PUSH
50266: LD_INT 4
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 1
50275: NEG
50276: PUSH
50277: LD_INT 3
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 1
50286: PUSH
50287: LD_INT 5
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 0
50296: PUSH
50297: LD_INT 5
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 1
50306: NEG
50307: PUSH
50308: LD_INT 4
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 1
50317: PUSH
50318: LD_INT 6
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 0
50327: PUSH
50328: LD_INT 6
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 1
50337: NEG
50338: PUSH
50339: LD_INT 5
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50360: LD_ADDR_VAR 0 33
50364: PUSH
50365: LD_INT 2
50367: NEG
50368: PUSH
50369: LD_INT 1
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 3
50378: NEG
50379: PUSH
50380: LD_INT 0
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 3
50389: NEG
50390: PUSH
50391: LD_INT 1
50393: NEG
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 3
50401: NEG
50402: PUSH
50403: LD_INT 1
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 4
50412: NEG
50413: PUSH
50414: LD_INT 0
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 4
50423: NEG
50424: PUSH
50425: LD_INT 1
50427: NEG
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 4
50435: NEG
50436: PUSH
50437: LD_INT 1
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 5
50446: NEG
50447: PUSH
50448: LD_INT 0
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 5
50457: NEG
50458: PUSH
50459: LD_INT 1
50461: NEG
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 5
50469: NEG
50470: PUSH
50471: LD_INT 1
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 6
50480: NEG
50481: PUSH
50482: LD_INT 0
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 6
50491: NEG
50492: PUSH
50493: LD_INT 1
50495: NEG
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
50515: LD_ADDR_VAR 0 34
50519: PUSH
50520: LD_INT 2
50522: NEG
50523: PUSH
50524: LD_INT 3
50526: NEG
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 3
50534: NEG
50535: PUSH
50536: LD_INT 2
50538: NEG
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 3
50546: NEG
50547: PUSH
50548: LD_INT 3
50550: NEG
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 3
50558: NEG
50559: PUSH
50560: LD_INT 4
50562: NEG
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 4
50570: NEG
50571: PUSH
50572: LD_INT 3
50574: NEG
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 4
50582: NEG
50583: PUSH
50584: LD_INT 4
50586: NEG
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 4
50594: NEG
50595: PUSH
50596: LD_INT 5
50598: NEG
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 5
50606: NEG
50607: PUSH
50608: LD_INT 4
50610: NEG
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 5
50618: NEG
50619: PUSH
50620: LD_INT 5
50622: NEG
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 5
50630: NEG
50631: PUSH
50632: LD_INT 6
50634: NEG
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 6
50642: NEG
50643: PUSH
50644: LD_INT 5
50646: NEG
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 6
50654: NEG
50655: PUSH
50656: LD_INT 6
50658: NEG
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
50678: LD_ADDR_VAR 0 41
50682: PUSH
50683: LD_INT 0
50685: PUSH
50686: LD_INT 2
50688: NEG
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 1
50696: NEG
50697: PUSH
50698: LD_INT 3
50700: NEG
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 1
50708: PUSH
50709: LD_INT 2
50711: NEG
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: LIST
50721: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
50722: LD_ADDR_VAR 0 42
50726: PUSH
50727: LD_INT 2
50729: PUSH
50730: LD_INT 0
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 2
50739: PUSH
50740: LD_INT 1
50742: NEG
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 3
50750: PUSH
50751: LD_INT 1
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: LIST
50762: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
50763: LD_ADDR_VAR 0 43
50767: PUSH
50768: LD_INT 2
50770: PUSH
50771: LD_INT 2
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 3
50780: PUSH
50781: LD_INT 2
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 2
50790: PUSH
50791: LD_INT 3
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: LIST
50802: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
50803: LD_ADDR_VAR 0 44
50807: PUSH
50808: LD_INT 0
50810: PUSH
50811: LD_INT 2
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 1
50820: PUSH
50821: LD_INT 3
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 1
50830: NEG
50831: PUSH
50832: LD_INT 2
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: LIST
50843: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50844: LD_ADDR_VAR 0 45
50848: PUSH
50849: LD_INT 2
50851: NEG
50852: PUSH
50853: LD_INT 0
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 2
50862: NEG
50863: PUSH
50864: LD_INT 1
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 3
50873: NEG
50874: PUSH
50875: LD_INT 1
50877: NEG
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: LIST
50887: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
50888: LD_ADDR_VAR 0 46
50892: PUSH
50893: LD_INT 2
50895: NEG
50896: PUSH
50897: LD_INT 2
50899: NEG
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 2
50907: NEG
50908: PUSH
50909: LD_INT 3
50911: NEG
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 3
50919: NEG
50920: PUSH
50921: LD_INT 2
50923: NEG
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: LIST
50933: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
50934: LD_ADDR_VAR 0 47
50938: PUSH
50939: LD_INT 2
50941: NEG
50942: PUSH
50943: LD_INT 3
50945: NEG
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 1
50953: NEG
50954: PUSH
50955: LD_INT 3
50957: NEG
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50967: LD_ADDR_VAR 0 48
50971: PUSH
50972: LD_INT 1
50974: PUSH
50975: LD_INT 2
50977: NEG
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 2
50985: PUSH
50986: LD_INT 1
50988: NEG
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
50998: LD_ADDR_VAR 0 49
51002: PUSH
51003: LD_INT 3
51005: PUSH
51006: LD_INT 1
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 3
51015: PUSH
51016: LD_INT 2
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
51027: LD_ADDR_VAR 0 50
51031: PUSH
51032: LD_INT 2
51034: PUSH
51035: LD_INT 3
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 1
51044: PUSH
51045: LD_INT 3
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51056: LD_ADDR_VAR 0 51
51060: PUSH
51061: LD_INT 1
51063: NEG
51064: PUSH
51065: LD_INT 2
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 2
51074: NEG
51075: PUSH
51076: LD_INT 1
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51087: LD_ADDR_VAR 0 52
51091: PUSH
51092: LD_INT 3
51094: NEG
51095: PUSH
51096: LD_INT 1
51098: NEG
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 3
51106: NEG
51107: PUSH
51108: LD_INT 2
51110: NEG
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51120: LD_ADDR_VAR 0 53
51124: PUSH
51125: LD_INT 1
51127: NEG
51128: PUSH
51129: LD_INT 3
51131: NEG
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 0
51139: PUSH
51140: LD_INT 3
51142: NEG
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 1
51150: PUSH
51151: LD_INT 2
51153: NEG
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: LIST
51163: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51164: LD_ADDR_VAR 0 54
51168: PUSH
51169: LD_INT 2
51171: PUSH
51172: LD_INT 1
51174: NEG
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 3
51182: PUSH
51183: LD_INT 0
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 3
51192: PUSH
51193: LD_INT 1
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: LIST
51204: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51205: LD_ADDR_VAR 0 55
51209: PUSH
51210: LD_INT 3
51212: PUSH
51213: LD_INT 2
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 3
51222: PUSH
51223: LD_INT 3
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 2
51232: PUSH
51233: LD_INT 3
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: LIST
51244: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51245: LD_ADDR_VAR 0 56
51249: PUSH
51250: LD_INT 1
51252: PUSH
51253: LD_INT 3
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 0
51262: PUSH
51263: LD_INT 3
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 1
51272: NEG
51273: PUSH
51274: LD_INT 2
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: LIST
51285: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51286: LD_ADDR_VAR 0 57
51290: PUSH
51291: LD_INT 2
51293: NEG
51294: PUSH
51295: LD_INT 1
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 3
51304: NEG
51305: PUSH
51306: LD_INT 0
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 3
51315: NEG
51316: PUSH
51317: LD_INT 1
51319: NEG
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: LIST
51329: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51330: LD_ADDR_VAR 0 58
51334: PUSH
51335: LD_INT 2
51337: NEG
51338: PUSH
51339: LD_INT 3
51341: NEG
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 3
51349: NEG
51350: PUSH
51351: LD_INT 2
51353: NEG
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 3
51361: NEG
51362: PUSH
51363: LD_INT 3
51365: NEG
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: LIST
51375: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51376: LD_ADDR_VAR 0 59
51380: PUSH
51381: LD_INT 1
51383: NEG
51384: PUSH
51385: LD_INT 2
51387: NEG
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 0
51395: PUSH
51396: LD_INT 2
51398: NEG
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 1
51406: PUSH
51407: LD_INT 1
51409: NEG
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: LIST
51419: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51420: LD_ADDR_VAR 0 60
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: LD_INT 1
51430: NEG
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 2
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 2
51448: PUSH
51449: LD_INT 1
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: LIST
51460: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51461: LD_ADDR_VAR 0 61
51465: PUSH
51466: LD_INT 2
51468: PUSH
51469: LD_INT 1
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 2
51478: PUSH
51479: LD_INT 2
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 1
51488: PUSH
51489: LD_INT 2
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: LIST
51500: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51501: LD_ADDR_VAR 0 62
51505: PUSH
51506: LD_INT 1
51508: PUSH
51509: LD_INT 2
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 0
51518: PUSH
51519: LD_INT 2
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 1
51528: NEG
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: LIST
51541: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51542: LD_ADDR_VAR 0 63
51546: PUSH
51547: LD_INT 1
51549: NEG
51550: PUSH
51551: LD_INT 1
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 2
51560: NEG
51561: PUSH
51562: LD_INT 0
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 2
51571: NEG
51572: PUSH
51573: LD_INT 1
51575: NEG
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: LIST
51585: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51586: LD_ADDR_VAR 0 64
51590: PUSH
51591: LD_INT 1
51593: NEG
51594: PUSH
51595: LD_INT 2
51597: NEG
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 2
51605: NEG
51606: PUSH
51607: LD_INT 1
51609: NEG
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 2
51617: NEG
51618: PUSH
51619: LD_INT 2
51621: NEG
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: LIST
51631: ST_TO_ADDR
// end ; 2 :
51632: GO 54898
51634: LD_INT 2
51636: DOUBLE
51637: EQUAL
51638: IFTRUE 51642
51640: GO 54897
51642: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
51643: LD_ADDR_VAR 0 29
51647: PUSH
51648: LD_INT 4
51650: PUSH
51651: LD_INT 0
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 4
51660: PUSH
51661: LD_INT 1
51663: NEG
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 5
51671: PUSH
51672: LD_INT 0
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 5
51681: PUSH
51682: LD_INT 1
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 4
51691: PUSH
51692: LD_INT 1
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 3
51701: PUSH
51702: LD_INT 0
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 3
51711: PUSH
51712: LD_INT 1
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 3
51722: PUSH
51723: LD_INT 2
51725: NEG
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 5
51733: PUSH
51734: LD_INT 2
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 3
51743: PUSH
51744: LD_INT 3
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 3
51753: PUSH
51754: LD_INT 2
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 4
51763: PUSH
51764: LD_INT 3
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 4
51773: PUSH
51774: LD_INT 4
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 3
51783: PUSH
51784: LD_INT 4
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 2
51793: PUSH
51794: LD_INT 3
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 2
51803: PUSH
51804: LD_INT 2
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 4
51813: PUSH
51814: LD_INT 2
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 2
51823: PUSH
51824: LD_INT 4
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 0
51833: PUSH
51834: LD_INT 4
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 0
51843: PUSH
51844: LD_INT 3
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 1
51853: PUSH
51854: LD_INT 4
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 1
51863: PUSH
51864: LD_INT 5
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 0
51873: PUSH
51874: LD_INT 5
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 1
51883: NEG
51884: PUSH
51885: LD_INT 4
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 1
51894: NEG
51895: PUSH
51896: LD_INT 3
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 2
51905: PUSH
51906: LD_INT 5
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 2
51915: NEG
51916: PUSH
51917: LD_INT 3
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 3
51926: NEG
51927: PUSH
51928: LD_INT 0
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 3
51937: NEG
51938: PUSH
51939: LD_INT 1
51941: NEG
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 2
51949: NEG
51950: PUSH
51951: LD_INT 0
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 2
51960: NEG
51961: PUSH
51962: LD_INT 1
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 3
51971: NEG
51972: PUSH
51973: LD_INT 1
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 4
51982: NEG
51983: PUSH
51984: LD_INT 0
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 4
51993: NEG
51994: PUSH
51995: LD_INT 1
51997: NEG
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 4
52005: NEG
52006: PUSH
52007: LD_INT 2
52009: NEG
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 2
52017: NEG
52018: PUSH
52019: LD_INT 2
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 4
52028: NEG
52029: PUSH
52030: LD_INT 4
52032: NEG
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 4
52040: NEG
52041: PUSH
52042: LD_INT 5
52044: NEG
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 3
52052: NEG
52053: PUSH
52054: LD_INT 4
52056: NEG
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 3
52064: NEG
52065: PUSH
52066: LD_INT 3
52068: NEG
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 4
52076: NEG
52077: PUSH
52078: LD_INT 3
52080: NEG
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 5
52088: NEG
52089: PUSH
52090: LD_INT 4
52092: NEG
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 5
52100: NEG
52101: PUSH
52102: LD_INT 5
52104: NEG
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 3
52112: NEG
52113: PUSH
52114: LD_INT 5
52116: NEG
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 5
52124: NEG
52125: PUSH
52126: LD_INT 3
52128: NEG
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
52181: LD_ADDR_VAR 0 30
52185: PUSH
52186: LD_INT 4
52188: PUSH
52189: LD_INT 4
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 4
52198: PUSH
52199: LD_INT 3
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 5
52208: PUSH
52209: LD_INT 4
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 5
52218: PUSH
52219: LD_INT 5
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 4
52228: PUSH
52229: LD_INT 5
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 3
52238: PUSH
52239: LD_INT 4
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 3
52248: PUSH
52249: LD_INT 3
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 5
52258: PUSH
52259: LD_INT 3
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 3
52268: PUSH
52269: LD_INT 5
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 0
52278: PUSH
52279: LD_INT 3
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 0
52288: PUSH
52289: LD_INT 2
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 1
52298: PUSH
52299: LD_INT 3
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 1
52308: PUSH
52309: LD_INT 4
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: LD_INT 4
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: LD_INT 3
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 1
52339: NEG
52340: PUSH
52341: LD_INT 2
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 2
52350: PUSH
52351: LD_INT 4
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 2
52360: NEG
52361: PUSH
52362: LD_INT 2
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 4
52371: NEG
52372: PUSH
52373: LD_INT 0
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 4
52382: NEG
52383: PUSH
52384: LD_INT 1
52386: NEG
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 3
52394: NEG
52395: PUSH
52396: LD_INT 0
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 3
52405: NEG
52406: PUSH
52407: LD_INT 1
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 4
52416: NEG
52417: PUSH
52418: LD_INT 1
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 5
52427: NEG
52428: PUSH
52429: LD_INT 0
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 5
52438: NEG
52439: PUSH
52440: LD_INT 1
52442: NEG
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 5
52450: NEG
52451: PUSH
52452: LD_INT 2
52454: NEG
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 3
52462: NEG
52463: PUSH
52464: LD_INT 2
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 3
52473: NEG
52474: PUSH
52475: LD_INT 3
52477: NEG
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 3
52485: NEG
52486: PUSH
52487: LD_INT 4
52489: NEG
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 2
52497: NEG
52498: PUSH
52499: LD_INT 3
52501: NEG
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 2
52509: NEG
52510: PUSH
52511: LD_INT 2
52513: NEG
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 3
52521: NEG
52522: PUSH
52523: LD_INT 2
52525: NEG
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 4
52533: NEG
52534: PUSH
52535: LD_INT 3
52537: NEG
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 4
52545: NEG
52546: PUSH
52547: LD_INT 4
52549: NEG
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 2
52557: NEG
52558: PUSH
52559: LD_INT 4
52561: NEG
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 4
52569: NEG
52570: PUSH
52571: LD_INT 2
52573: NEG
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 0
52581: PUSH
52582: LD_INT 4
52584: NEG
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 0
52592: PUSH
52593: LD_INT 5
52595: NEG
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 1
52603: PUSH
52604: LD_INT 4
52606: NEG
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 1
52614: PUSH
52615: LD_INT 3
52617: NEG
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 0
52625: PUSH
52626: LD_INT 3
52628: NEG
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 1
52636: NEG
52637: PUSH
52638: LD_INT 4
52640: NEG
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 1
52648: NEG
52649: PUSH
52650: LD_INT 5
52652: NEG
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 2
52660: PUSH
52661: LD_INT 3
52663: NEG
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 2
52671: NEG
52672: PUSH
52673: LD_INT 5
52675: NEG
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
52728: LD_ADDR_VAR 0 31
52732: PUSH
52733: LD_INT 0
52735: PUSH
52736: LD_INT 4
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 0
52745: PUSH
52746: LD_INT 3
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 1
52755: PUSH
52756: LD_INT 4
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 1
52765: PUSH
52766: LD_INT 5
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 0
52775: PUSH
52776: LD_INT 5
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 1
52785: NEG
52786: PUSH
52787: LD_INT 4
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 1
52796: NEG
52797: PUSH
52798: LD_INT 3
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 2
52807: PUSH
52808: LD_INT 5
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 2
52817: NEG
52818: PUSH
52819: LD_INT 3
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 3
52828: NEG
52829: PUSH
52830: LD_INT 0
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 3
52839: NEG
52840: PUSH
52841: LD_INT 1
52843: NEG
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 2
52851: NEG
52852: PUSH
52853: LD_INT 0
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 2
52862: NEG
52863: PUSH
52864: LD_INT 1
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 3
52873: NEG
52874: PUSH
52875: LD_INT 1
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 4
52884: NEG
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 4
52895: NEG
52896: PUSH
52897: LD_INT 1
52899: NEG
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 4
52907: NEG
52908: PUSH
52909: LD_INT 2
52911: NEG
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 2
52919: NEG
52920: PUSH
52921: LD_INT 2
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 4
52930: NEG
52931: PUSH
52932: LD_INT 4
52934: NEG
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 4
52942: NEG
52943: PUSH
52944: LD_INT 5
52946: NEG
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 3
52954: NEG
52955: PUSH
52956: LD_INT 4
52958: NEG
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 3
52966: NEG
52967: PUSH
52968: LD_INT 3
52970: NEG
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 4
52978: NEG
52979: PUSH
52980: LD_INT 3
52982: NEG
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 5
52990: NEG
52991: PUSH
52992: LD_INT 4
52994: NEG
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 5
53002: NEG
53003: PUSH
53004: LD_INT 5
53006: NEG
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 3
53014: NEG
53015: PUSH
53016: LD_INT 5
53018: NEG
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 5
53026: NEG
53027: PUSH
53028: LD_INT 3
53030: NEG
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 0
53038: PUSH
53039: LD_INT 3
53041: NEG
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 0
53049: PUSH
53050: LD_INT 4
53052: NEG
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 1
53060: PUSH
53061: LD_INT 3
53063: NEG
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 1
53071: PUSH
53072: LD_INT 2
53074: NEG
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 0
53082: PUSH
53083: LD_INT 2
53085: NEG
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 1
53093: NEG
53094: PUSH
53095: LD_INT 3
53097: NEG
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 1
53105: NEG
53106: PUSH
53107: LD_INT 4
53109: NEG
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 2
53117: PUSH
53118: LD_INT 2
53120: NEG
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 2
53128: NEG
53129: PUSH
53130: LD_INT 4
53132: NEG
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 4
53140: PUSH
53141: LD_INT 0
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 4
53150: PUSH
53151: LD_INT 1
53153: NEG
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 5
53161: PUSH
53162: LD_INT 0
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 5
53171: PUSH
53172: LD_INT 1
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 4
53181: PUSH
53182: LD_INT 1
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 3
53191: PUSH
53192: LD_INT 0
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 3
53201: PUSH
53202: LD_INT 1
53204: NEG
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 3
53212: PUSH
53213: LD_INT 2
53215: NEG
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 5
53223: PUSH
53224: LD_INT 2
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
53278: LD_ADDR_VAR 0 32
53282: PUSH
53283: LD_INT 4
53285: NEG
53286: PUSH
53287: LD_INT 0
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 4
53296: NEG
53297: PUSH
53298: LD_INT 1
53300: NEG
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 3
53308: NEG
53309: PUSH
53310: LD_INT 0
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 3
53319: NEG
53320: PUSH
53321: LD_INT 1
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 4
53330: NEG
53331: PUSH
53332: LD_INT 1
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 5
53341: NEG
53342: PUSH
53343: LD_INT 0
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 5
53352: NEG
53353: PUSH
53354: LD_INT 1
53356: NEG
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 5
53364: NEG
53365: PUSH
53366: LD_INT 2
53368: NEG
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 3
53376: NEG
53377: PUSH
53378: LD_INT 2
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 3
53387: NEG
53388: PUSH
53389: LD_INT 3
53391: NEG
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 3
53399: NEG
53400: PUSH
53401: LD_INT 4
53403: NEG
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 2
53411: NEG
53412: PUSH
53413: LD_INT 3
53415: NEG
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 2
53423: NEG
53424: PUSH
53425: LD_INT 2
53427: NEG
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 3
53435: NEG
53436: PUSH
53437: LD_INT 2
53439: NEG
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 4
53447: NEG
53448: PUSH
53449: LD_INT 3
53451: NEG
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 4
53459: NEG
53460: PUSH
53461: LD_INT 4
53463: NEG
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 2
53471: NEG
53472: PUSH
53473: LD_INT 4
53475: NEG
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 4
53483: NEG
53484: PUSH
53485: LD_INT 2
53487: NEG
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 0
53495: PUSH
53496: LD_INT 4
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 0
53506: PUSH
53507: LD_INT 5
53509: NEG
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 1
53517: PUSH
53518: LD_INT 4
53520: NEG
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 1
53528: PUSH
53529: LD_INT 3
53531: NEG
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 0
53539: PUSH
53540: LD_INT 3
53542: NEG
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 1
53550: NEG
53551: PUSH
53552: LD_INT 4
53554: NEG
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 1
53562: NEG
53563: PUSH
53564: LD_INT 5
53566: NEG
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 2
53574: PUSH
53575: LD_INT 3
53577: NEG
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 2
53585: NEG
53586: PUSH
53587: LD_INT 5
53589: NEG
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 3
53597: PUSH
53598: LD_INT 0
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 3
53607: PUSH
53608: LD_INT 1
53610: NEG
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 4
53618: PUSH
53619: LD_INT 0
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 4
53628: PUSH
53629: LD_INT 1
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 3
53638: PUSH
53639: LD_INT 1
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 2
53648: PUSH
53649: LD_INT 0
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 2
53658: PUSH
53659: LD_INT 1
53661: NEG
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 2
53669: PUSH
53670: LD_INT 2
53672: NEG
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 4
53680: PUSH
53681: LD_INT 2
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 4
53690: PUSH
53691: LD_INT 4
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 4
53700: PUSH
53701: LD_INT 3
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 5
53710: PUSH
53711: LD_INT 4
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 5
53720: PUSH
53721: LD_INT 5
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 4
53730: PUSH
53731: LD_INT 5
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 3
53740: PUSH
53741: LD_INT 4
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 3
53750: PUSH
53751: LD_INT 3
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 5
53760: PUSH
53761: LD_INT 3
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 3
53770: PUSH
53771: LD_INT 5
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
53825: LD_ADDR_VAR 0 33
53829: PUSH
53830: LD_INT 4
53832: NEG
53833: PUSH
53834: LD_INT 4
53836: NEG
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 4
53844: NEG
53845: PUSH
53846: LD_INT 5
53848: NEG
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 3
53856: NEG
53857: PUSH
53858: LD_INT 4
53860: NEG
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 3
53868: NEG
53869: PUSH
53870: LD_INT 3
53872: NEG
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 4
53880: NEG
53881: PUSH
53882: LD_INT 3
53884: NEG
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 5
53892: NEG
53893: PUSH
53894: LD_INT 4
53896: NEG
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 5
53904: NEG
53905: PUSH
53906: LD_INT 5
53908: NEG
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 3
53916: NEG
53917: PUSH
53918: LD_INT 5
53920: NEG
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 5
53928: NEG
53929: PUSH
53930: LD_INT 3
53932: NEG
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 0
53940: PUSH
53941: LD_INT 3
53943: NEG
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 0
53951: PUSH
53952: LD_INT 4
53954: NEG
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 1
53962: PUSH
53963: LD_INT 3
53965: NEG
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 1
53973: PUSH
53974: LD_INT 2
53976: NEG
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 0
53984: PUSH
53985: LD_INT 2
53987: NEG
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 1
53995: NEG
53996: PUSH
53997: LD_INT 3
53999: NEG
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 1
54007: NEG
54008: PUSH
54009: LD_INT 4
54011: NEG
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 2
54019: PUSH
54020: LD_INT 2
54022: NEG
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 2
54030: NEG
54031: PUSH
54032: LD_INT 4
54034: NEG
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 4
54042: PUSH
54043: LD_INT 0
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 4
54052: PUSH
54053: LD_INT 1
54055: NEG
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 5
54063: PUSH
54064: LD_INT 0
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 5
54073: PUSH
54074: LD_INT 1
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 4
54083: PUSH
54084: LD_INT 1
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 3
54093: PUSH
54094: LD_INT 0
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 3
54103: PUSH
54104: LD_INT 1
54106: NEG
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 3
54114: PUSH
54115: LD_INT 2
54117: NEG
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 5
54125: PUSH
54126: LD_INT 2
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 3
54135: PUSH
54136: LD_INT 3
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 3
54145: PUSH
54146: LD_INT 2
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 4
54155: PUSH
54156: LD_INT 3
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 4
54165: PUSH
54166: LD_INT 4
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 3
54175: PUSH
54176: LD_INT 4
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 2
54185: PUSH
54186: LD_INT 3
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 2
54195: PUSH
54196: LD_INT 2
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 4
54205: PUSH
54206: LD_INT 2
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 2
54215: PUSH
54216: LD_INT 4
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 0
54225: PUSH
54226: LD_INT 4
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 0
54235: PUSH
54236: LD_INT 3
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 1
54245: PUSH
54246: LD_INT 4
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 1
54255: PUSH
54256: LD_INT 5
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 0
54265: PUSH
54266: LD_INT 5
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 1
54275: NEG
54276: PUSH
54277: LD_INT 4
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 1
54286: NEG
54287: PUSH
54288: LD_INT 3
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 2
54297: PUSH
54298: LD_INT 5
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 2
54307: NEG
54308: PUSH
54309: LD_INT 3
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54363: LD_ADDR_VAR 0 34
54367: PUSH
54368: LD_INT 0
54370: PUSH
54371: LD_INT 4
54373: NEG
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 0
54381: PUSH
54382: LD_INT 5
54384: NEG
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 1
54392: PUSH
54393: LD_INT 4
54395: NEG
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 1
54403: PUSH
54404: LD_INT 3
54406: NEG
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 0
54414: PUSH
54415: LD_INT 3
54417: NEG
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 1
54425: NEG
54426: PUSH
54427: LD_INT 4
54429: NEG
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 1
54437: NEG
54438: PUSH
54439: LD_INT 5
54441: NEG
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 2
54449: PUSH
54450: LD_INT 3
54452: NEG
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 2
54460: NEG
54461: PUSH
54462: LD_INT 5
54464: NEG
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 3
54472: PUSH
54473: LD_INT 0
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 3
54482: PUSH
54483: LD_INT 1
54485: NEG
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 4
54493: PUSH
54494: LD_INT 0
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 4
54503: PUSH
54504: LD_INT 1
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 3
54513: PUSH
54514: LD_INT 1
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 2
54523: PUSH
54524: LD_INT 0
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 2
54533: PUSH
54534: LD_INT 1
54536: NEG
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 2
54544: PUSH
54545: LD_INT 2
54547: NEG
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 4
54555: PUSH
54556: LD_INT 2
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 4
54565: PUSH
54566: LD_INT 4
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 4
54575: PUSH
54576: LD_INT 3
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 5
54585: PUSH
54586: LD_INT 4
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 5
54595: PUSH
54596: LD_INT 5
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 4
54605: PUSH
54606: LD_INT 5
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 3
54615: PUSH
54616: LD_INT 4
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 3
54625: PUSH
54626: LD_INT 3
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 5
54635: PUSH
54636: LD_INT 3
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 3
54645: PUSH
54646: LD_INT 5
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 0
54655: PUSH
54656: LD_INT 3
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 0
54665: PUSH
54666: LD_INT 2
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 1
54675: PUSH
54676: LD_INT 3
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 1
54685: PUSH
54686: LD_INT 4
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 0
54695: PUSH
54696: LD_INT 4
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 1
54705: NEG
54706: PUSH
54707: LD_INT 3
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 1
54716: NEG
54717: PUSH
54718: LD_INT 2
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 2
54727: PUSH
54728: LD_INT 4
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 2
54737: NEG
54738: PUSH
54739: LD_INT 2
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 4
54748: NEG
54749: PUSH
54750: LD_INT 0
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 4
54759: NEG
54760: PUSH
54761: LD_INT 1
54763: NEG
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 3
54771: NEG
54772: PUSH
54773: LD_INT 0
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 3
54782: NEG
54783: PUSH
54784: LD_INT 1
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 4
54793: NEG
54794: PUSH
54795: LD_INT 1
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 5
54804: NEG
54805: PUSH
54806: LD_INT 0
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 5
54815: NEG
54816: PUSH
54817: LD_INT 1
54819: NEG
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 5
54827: NEG
54828: PUSH
54829: LD_INT 2
54831: NEG
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 3
54839: NEG
54840: PUSH
54841: LD_INT 2
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: ST_TO_ADDR
// end ; end ;
54895: GO 54898
54897: POP
// case btype of b_depot , b_warehouse :
54898: LD_VAR 0 1
54902: PUSH
54903: LD_INT 0
54905: DOUBLE
54906: EQUAL
54907: IFTRUE 54917
54909: LD_INT 1
54911: DOUBLE
54912: EQUAL
54913: IFTRUE 54917
54915: GO 55118
54917: POP
// case nation of nation_american :
54918: LD_VAR 0 5
54922: PUSH
54923: LD_INT 1
54925: DOUBLE
54926: EQUAL
54927: IFTRUE 54931
54929: GO 54987
54931: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
54932: LD_ADDR_VAR 0 9
54936: PUSH
54937: LD_VAR 0 11
54941: PUSH
54942: LD_VAR 0 12
54946: PUSH
54947: LD_VAR 0 13
54951: PUSH
54952: LD_VAR 0 14
54956: PUSH
54957: LD_VAR 0 15
54961: PUSH
54962: LD_VAR 0 16
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: PUSH
54975: LD_VAR 0 4
54979: PUSH
54980: LD_INT 1
54982: PLUS
54983: ARRAY
54984: ST_TO_ADDR
54985: GO 55116
54987: LD_INT 2
54989: DOUBLE
54990: EQUAL
54991: IFTRUE 54995
54993: GO 55051
54995: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
54996: LD_ADDR_VAR 0 9
55000: PUSH
55001: LD_VAR 0 17
55005: PUSH
55006: LD_VAR 0 18
55010: PUSH
55011: LD_VAR 0 19
55015: PUSH
55016: LD_VAR 0 20
55020: PUSH
55021: LD_VAR 0 21
55025: PUSH
55026: LD_VAR 0 22
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: PUSH
55039: LD_VAR 0 4
55043: PUSH
55044: LD_INT 1
55046: PLUS
55047: ARRAY
55048: ST_TO_ADDR
55049: GO 55116
55051: LD_INT 3
55053: DOUBLE
55054: EQUAL
55055: IFTRUE 55059
55057: GO 55115
55059: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
55060: LD_ADDR_VAR 0 9
55064: PUSH
55065: LD_VAR 0 23
55069: PUSH
55070: LD_VAR 0 24
55074: PUSH
55075: LD_VAR 0 25
55079: PUSH
55080: LD_VAR 0 26
55084: PUSH
55085: LD_VAR 0 27
55089: PUSH
55090: LD_VAR 0 28
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: PUSH
55103: LD_VAR 0 4
55107: PUSH
55108: LD_INT 1
55110: PLUS
55111: ARRAY
55112: ST_TO_ADDR
55113: GO 55116
55115: POP
55116: GO 55671
55118: LD_INT 2
55120: DOUBLE
55121: EQUAL
55122: IFTRUE 55132
55124: LD_INT 3
55126: DOUBLE
55127: EQUAL
55128: IFTRUE 55132
55130: GO 55188
55132: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
55133: LD_ADDR_VAR 0 9
55137: PUSH
55138: LD_VAR 0 29
55142: PUSH
55143: LD_VAR 0 30
55147: PUSH
55148: LD_VAR 0 31
55152: PUSH
55153: LD_VAR 0 32
55157: PUSH
55158: LD_VAR 0 33
55162: PUSH
55163: LD_VAR 0 34
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: PUSH
55176: LD_VAR 0 4
55180: PUSH
55181: LD_INT 1
55183: PLUS
55184: ARRAY
55185: ST_TO_ADDR
55186: GO 55671
55188: LD_INT 16
55190: DOUBLE
55191: EQUAL
55192: IFTRUE 55250
55194: LD_INT 17
55196: DOUBLE
55197: EQUAL
55198: IFTRUE 55250
55200: LD_INT 18
55202: DOUBLE
55203: EQUAL
55204: IFTRUE 55250
55206: LD_INT 19
55208: DOUBLE
55209: EQUAL
55210: IFTRUE 55250
55212: LD_INT 22
55214: DOUBLE
55215: EQUAL
55216: IFTRUE 55250
55218: LD_INT 20
55220: DOUBLE
55221: EQUAL
55222: IFTRUE 55250
55224: LD_INT 21
55226: DOUBLE
55227: EQUAL
55228: IFTRUE 55250
55230: LD_INT 23
55232: DOUBLE
55233: EQUAL
55234: IFTRUE 55250
55236: LD_INT 24
55238: DOUBLE
55239: EQUAL
55240: IFTRUE 55250
55242: LD_INT 25
55244: DOUBLE
55245: EQUAL
55246: IFTRUE 55250
55248: GO 55306
55250: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
55251: LD_ADDR_VAR 0 9
55255: PUSH
55256: LD_VAR 0 35
55260: PUSH
55261: LD_VAR 0 36
55265: PUSH
55266: LD_VAR 0 37
55270: PUSH
55271: LD_VAR 0 38
55275: PUSH
55276: LD_VAR 0 39
55280: PUSH
55281: LD_VAR 0 40
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: PUSH
55294: LD_VAR 0 4
55298: PUSH
55299: LD_INT 1
55301: PLUS
55302: ARRAY
55303: ST_TO_ADDR
55304: GO 55671
55306: LD_INT 6
55308: DOUBLE
55309: EQUAL
55310: IFTRUE 55362
55312: LD_INT 7
55314: DOUBLE
55315: EQUAL
55316: IFTRUE 55362
55318: LD_INT 8
55320: DOUBLE
55321: EQUAL
55322: IFTRUE 55362
55324: LD_INT 13
55326: DOUBLE
55327: EQUAL
55328: IFTRUE 55362
55330: LD_INT 12
55332: DOUBLE
55333: EQUAL
55334: IFTRUE 55362
55336: LD_INT 15
55338: DOUBLE
55339: EQUAL
55340: IFTRUE 55362
55342: LD_INT 11
55344: DOUBLE
55345: EQUAL
55346: IFTRUE 55362
55348: LD_INT 14
55350: DOUBLE
55351: EQUAL
55352: IFTRUE 55362
55354: LD_INT 10
55356: DOUBLE
55357: EQUAL
55358: IFTRUE 55362
55360: GO 55418
55362: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
55363: LD_ADDR_VAR 0 9
55367: PUSH
55368: LD_VAR 0 41
55372: PUSH
55373: LD_VAR 0 42
55377: PUSH
55378: LD_VAR 0 43
55382: PUSH
55383: LD_VAR 0 44
55387: PUSH
55388: LD_VAR 0 45
55392: PUSH
55393: LD_VAR 0 46
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: PUSH
55406: LD_VAR 0 4
55410: PUSH
55411: LD_INT 1
55413: PLUS
55414: ARRAY
55415: ST_TO_ADDR
55416: GO 55671
55418: LD_INT 36
55420: DOUBLE
55421: EQUAL
55422: IFTRUE 55426
55424: GO 55482
55426: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55427: LD_ADDR_VAR 0 9
55431: PUSH
55432: LD_VAR 0 47
55436: PUSH
55437: LD_VAR 0 48
55441: PUSH
55442: LD_VAR 0 49
55446: PUSH
55447: LD_VAR 0 50
55451: PUSH
55452: LD_VAR 0 51
55456: PUSH
55457: LD_VAR 0 52
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: PUSH
55470: LD_VAR 0 4
55474: PUSH
55475: LD_INT 1
55477: PLUS
55478: ARRAY
55479: ST_TO_ADDR
55480: GO 55671
55482: LD_INT 4
55484: DOUBLE
55485: EQUAL
55486: IFTRUE 55508
55488: LD_INT 5
55490: DOUBLE
55491: EQUAL
55492: IFTRUE 55508
55494: LD_INT 34
55496: DOUBLE
55497: EQUAL
55498: IFTRUE 55508
55500: LD_INT 37
55502: DOUBLE
55503: EQUAL
55504: IFTRUE 55508
55506: GO 55564
55508: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
55509: LD_ADDR_VAR 0 9
55513: PUSH
55514: LD_VAR 0 53
55518: PUSH
55519: LD_VAR 0 54
55523: PUSH
55524: LD_VAR 0 55
55528: PUSH
55529: LD_VAR 0 56
55533: PUSH
55534: LD_VAR 0 57
55538: PUSH
55539: LD_VAR 0 58
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: PUSH
55552: LD_VAR 0 4
55556: PUSH
55557: LD_INT 1
55559: PLUS
55560: ARRAY
55561: ST_TO_ADDR
55562: GO 55671
55564: LD_INT 31
55566: DOUBLE
55567: EQUAL
55568: IFTRUE 55614
55570: LD_INT 32
55572: DOUBLE
55573: EQUAL
55574: IFTRUE 55614
55576: LD_INT 33
55578: DOUBLE
55579: EQUAL
55580: IFTRUE 55614
55582: LD_INT 27
55584: DOUBLE
55585: EQUAL
55586: IFTRUE 55614
55588: LD_INT 26
55590: DOUBLE
55591: EQUAL
55592: IFTRUE 55614
55594: LD_INT 28
55596: DOUBLE
55597: EQUAL
55598: IFTRUE 55614
55600: LD_INT 29
55602: DOUBLE
55603: EQUAL
55604: IFTRUE 55614
55606: LD_INT 30
55608: DOUBLE
55609: EQUAL
55610: IFTRUE 55614
55612: GO 55670
55614: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
55615: LD_ADDR_VAR 0 9
55619: PUSH
55620: LD_VAR 0 59
55624: PUSH
55625: LD_VAR 0 60
55629: PUSH
55630: LD_VAR 0 61
55634: PUSH
55635: LD_VAR 0 62
55639: PUSH
55640: LD_VAR 0 63
55644: PUSH
55645: LD_VAR 0 64
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: PUSH
55658: LD_VAR 0 4
55662: PUSH
55663: LD_INT 1
55665: PLUS
55666: ARRAY
55667: ST_TO_ADDR
55668: GO 55671
55670: POP
// temp_list2 = [ ] ;
55671: LD_ADDR_VAR 0 10
55675: PUSH
55676: EMPTY
55677: ST_TO_ADDR
// for i in temp_list do
55678: LD_ADDR_VAR 0 8
55682: PUSH
55683: LD_VAR 0 9
55687: PUSH
55688: FOR_IN
55689: IFFALSE 55741
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
55691: LD_ADDR_VAR 0 10
55695: PUSH
55696: LD_VAR 0 10
55700: PUSH
55701: LD_VAR 0 8
55705: PUSH
55706: LD_INT 1
55708: ARRAY
55709: PUSH
55710: LD_VAR 0 2
55714: PLUS
55715: PUSH
55716: LD_VAR 0 8
55720: PUSH
55721: LD_INT 2
55723: ARRAY
55724: PUSH
55725: LD_VAR 0 3
55729: PLUS
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: EMPTY
55736: LIST
55737: ADD
55738: ST_TO_ADDR
55739: GO 55688
55741: POP
55742: POP
// result = temp_list2 ;
55743: LD_ADDR_VAR 0 7
55747: PUSH
55748: LD_VAR 0 10
55752: ST_TO_ADDR
// end ;
55753: LD_VAR 0 7
55757: RET
// export function EnemyInRange ( unit , dist ) ; begin
55758: LD_INT 0
55760: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
55761: LD_ADDR_VAR 0 3
55765: PUSH
55766: LD_VAR 0 1
55770: PPUSH
55771: CALL_OW 255
55775: PPUSH
55776: LD_VAR 0 1
55780: PPUSH
55781: CALL_OW 250
55785: PPUSH
55786: LD_VAR 0 1
55790: PPUSH
55791: CALL_OW 251
55795: PPUSH
55796: LD_VAR 0 2
55800: PPUSH
55801: CALL 29862 0 4
55805: PUSH
55806: LD_INT 4
55808: ARRAY
55809: ST_TO_ADDR
// end ;
55810: LD_VAR 0 3
55814: RET
// export function PlayerSeeMe ( unit ) ; begin
55815: LD_INT 0
55817: PPUSH
// result := See ( your_side , unit ) ;
55818: LD_ADDR_VAR 0 2
55822: PUSH
55823: LD_OWVAR 2
55827: PPUSH
55828: LD_VAR 0 1
55832: PPUSH
55833: CALL_OW 292
55837: ST_TO_ADDR
// end ;
55838: LD_VAR 0 2
55842: RET
// export function ReverseDir ( unit ) ; begin
55843: LD_INT 0
55845: PPUSH
// if not unit then
55846: LD_VAR 0 1
55850: NOT
55851: IFFALSE 55855
// exit ;
55853: GO 55878
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
55855: LD_ADDR_VAR 0 2
55859: PUSH
55860: LD_VAR 0 1
55864: PPUSH
55865: CALL_OW 254
55869: PUSH
55870: LD_INT 3
55872: PLUS
55873: PUSH
55874: LD_INT 6
55876: MOD
55877: ST_TO_ADDR
// end ;
55878: LD_VAR 0 2
55882: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
55883: LD_INT 0
55885: PPUSH
55886: PPUSH
55887: PPUSH
55888: PPUSH
55889: PPUSH
// if not hexes then
55890: LD_VAR 0 2
55894: NOT
55895: IFFALSE 55899
// exit ;
55897: GO 56047
// dist := 9999 ;
55899: LD_ADDR_VAR 0 5
55903: PUSH
55904: LD_INT 9999
55906: ST_TO_ADDR
// for i = 1 to hexes do
55907: LD_ADDR_VAR 0 4
55911: PUSH
55912: DOUBLE
55913: LD_INT 1
55915: DEC
55916: ST_TO_ADDR
55917: LD_VAR 0 2
55921: PUSH
55922: FOR_TO
55923: IFFALSE 56035
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
55925: LD_VAR 0 1
55929: PPUSH
55930: LD_VAR 0 2
55934: PUSH
55935: LD_VAR 0 4
55939: ARRAY
55940: PUSH
55941: LD_INT 1
55943: ARRAY
55944: PPUSH
55945: LD_VAR 0 2
55949: PUSH
55950: LD_VAR 0 4
55954: ARRAY
55955: PUSH
55956: LD_INT 2
55958: ARRAY
55959: PPUSH
55960: CALL_OW 297
55964: PUSH
55965: LD_VAR 0 5
55969: LESS
55970: IFFALSE 56033
// begin hex := hexes [ i ] ;
55972: LD_ADDR_VAR 0 7
55976: PUSH
55977: LD_VAR 0 2
55981: PUSH
55982: LD_VAR 0 4
55986: ARRAY
55987: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55988: LD_ADDR_VAR 0 5
55992: PUSH
55993: LD_VAR 0 1
55997: PPUSH
55998: LD_VAR 0 2
56002: PUSH
56003: LD_VAR 0 4
56007: ARRAY
56008: PUSH
56009: LD_INT 1
56011: ARRAY
56012: PPUSH
56013: LD_VAR 0 2
56017: PUSH
56018: LD_VAR 0 4
56022: ARRAY
56023: PUSH
56024: LD_INT 2
56026: ARRAY
56027: PPUSH
56028: CALL_OW 297
56032: ST_TO_ADDR
// end ; end ;
56033: GO 55922
56035: POP
56036: POP
// result := hex ;
56037: LD_ADDR_VAR 0 3
56041: PUSH
56042: LD_VAR 0 7
56046: ST_TO_ADDR
// end ;
56047: LD_VAR 0 3
56051: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
56052: LD_INT 0
56054: PPUSH
56055: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
56056: LD_VAR 0 1
56060: NOT
56061: PUSH
56062: LD_VAR 0 1
56066: PUSH
56067: LD_INT 21
56069: PUSH
56070: LD_INT 2
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 23
56079: PUSH
56080: LD_INT 2
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PPUSH
56091: CALL_OW 69
56095: IN
56096: NOT
56097: OR
56098: IFFALSE 56102
// exit ;
56100: GO 56149
// for i = 1 to 3 do
56102: LD_ADDR_VAR 0 3
56106: PUSH
56107: DOUBLE
56108: LD_INT 1
56110: DEC
56111: ST_TO_ADDR
56112: LD_INT 3
56114: PUSH
56115: FOR_TO
56116: IFFALSE 56147
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56118: LD_VAR 0 1
56122: PPUSH
56123: CALL_OW 250
56127: PPUSH
56128: LD_VAR 0 1
56132: PPUSH
56133: CALL_OW 251
56137: PPUSH
56138: LD_INT 1
56140: PPUSH
56141: CALL_OW 453
56145: GO 56115
56147: POP
56148: POP
// end ;
56149: LD_VAR 0 2
56153: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
56154: LD_INT 0
56156: PPUSH
56157: PPUSH
56158: PPUSH
56159: PPUSH
56160: PPUSH
56161: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
56162: LD_VAR 0 1
56166: NOT
56167: PUSH
56168: LD_VAR 0 2
56172: NOT
56173: OR
56174: PUSH
56175: LD_VAR 0 1
56179: PPUSH
56180: CALL_OW 314
56184: OR
56185: IFFALSE 56189
// exit ;
56187: GO 56630
// x := GetX ( enemy_unit ) ;
56189: LD_ADDR_VAR 0 7
56193: PUSH
56194: LD_VAR 0 2
56198: PPUSH
56199: CALL_OW 250
56203: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
56204: LD_ADDR_VAR 0 8
56208: PUSH
56209: LD_VAR 0 2
56213: PPUSH
56214: CALL_OW 251
56218: ST_TO_ADDR
// if not x or not y then
56219: LD_VAR 0 7
56223: NOT
56224: PUSH
56225: LD_VAR 0 8
56229: NOT
56230: OR
56231: IFFALSE 56235
// exit ;
56233: GO 56630
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
56235: LD_ADDR_VAR 0 6
56239: PUSH
56240: LD_VAR 0 7
56244: PPUSH
56245: LD_INT 0
56247: PPUSH
56248: LD_INT 4
56250: PPUSH
56251: CALL_OW 272
56255: PUSH
56256: LD_VAR 0 8
56260: PPUSH
56261: LD_INT 0
56263: PPUSH
56264: LD_INT 4
56266: PPUSH
56267: CALL_OW 273
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_VAR 0 7
56280: PPUSH
56281: LD_INT 1
56283: PPUSH
56284: LD_INT 4
56286: PPUSH
56287: CALL_OW 272
56291: PUSH
56292: LD_VAR 0 8
56296: PPUSH
56297: LD_INT 1
56299: PPUSH
56300: LD_INT 4
56302: PPUSH
56303: CALL_OW 273
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_VAR 0 7
56316: PPUSH
56317: LD_INT 2
56319: PPUSH
56320: LD_INT 4
56322: PPUSH
56323: CALL_OW 272
56327: PUSH
56328: LD_VAR 0 8
56332: PPUSH
56333: LD_INT 2
56335: PPUSH
56336: LD_INT 4
56338: PPUSH
56339: CALL_OW 273
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_VAR 0 7
56352: PPUSH
56353: LD_INT 3
56355: PPUSH
56356: LD_INT 4
56358: PPUSH
56359: CALL_OW 272
56363: PUSH
56364: LD_VAR 0 8
56368: PPUSH
56369: LD_INT 3
56371: PPUSH
56372: LD_INT 4
56374: PPUSH
56375: CALL_OW 273
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_VAR 0 7
56388: PPUSH
56389: LD_INT 4
56391: PPUSH
56392: LD_INT 4
56394: PPUSH
56395: CALL_OW 272
56399: PUSH
56400: LD_VAR 0 8
56404: PPUSH
56405: LD_INT 4
56407: PPUSH
56408: LD_INT 4
56410: PPUSH
56411: CALL_OW 273
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_VAR 0 7
56424: PPUSH
56425: LD_INT 5
56427: PPUSH
56428: LD_INT 4
56430: PPUSH
56431: CALL_OW 272
56435: PUSH
56436: LD_VAR 0 8
56440: PPUSH
56441: LD_INT 5
56443: PPUSH
56444: LD_INT 4
56446: PPUSH
56447: CALL_OW 273
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: ST_TO_ADDR
// for i = tmp downto 1 do
56464: LD_ADDR_VAR 0 4
56468: PUSH
56469: DOUBLE
56470: LD_VAR 0 6
56474: INC
56475: ST_TO_ADDR
56476: LD_INT 1
56478: PUSH
56479: FOR_DOWNTO
56480: IFFALSE 56581
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
56482: LD_VAR 0 6
56486: PUSH
56487: LD_VAR 0 4
56491: ARRAY
56492: PUSH
56493: LD_INT 1
56495: ARRAY
56496: PPUSH
56497: LD_VAR 0 6
56501: PUSH
56502: LD_VAR 0 4
56506: ARRAY
56507: PUSH
56508: LD_INT 2
56510: ARRAY
56511: PPUSH
56512: CALL_OW 488
56516: NOT
56517: PUSH
56518: LD_VAR 0 6
56522: PUSH
56523: LD_VAR 0 4
56527: ARRAY
56528: PUSH
56529: LD_INT 1
56531: ARRAY
56532: PPUSH
56533: LD_VAR 0 6
56537: PUSH
56538: LD_VAR 0 4
56542: ARRAY
56543: PUSH
56544: LD_INT 2
56546: ARRAY
56547: PPUSH
56548: CALL_OW 428
56552: PUSH
56553: LD_INT 0
56555: NONEQUAL
56556: OR
56557: IFFALSE 56579
// tmp := Delete ( tmp , i ) ;
56559: LD_ADDR_VAR 0 6
56563: PUSH
56564: LD_VAR 0 6
56568: PPUSH
56569: LD_VAR 0 4
56573: PPUSH
56574: CALL_OW 3
56578: ST_TO_ADDR
56579: GO 56479
56581: POP
56582: POP
// j := GetClosestHex ( unit , tmp ) ;
56583: LD_ADDR_VAR 0 5
56587: PUSH
56588: LD_VAR 0 1
56592: PPUSH
56593: LD_VAR 0 6
56597: PPUSH
56598: CALL 55883 0 2
56602: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
56603: LD_VAR 0 1
56607: PPUSH
56608: LD_VAR 0 5
56612: PUSH
56613: LD_INT 1
56615: ARRAY
56616: PPUSH
56617: LD_VAR 0 5
56621: PUSH
56622: LD_INT 2
56624: ARRAY
56625: PPUSH
56626: CALL_OW 111
// end ;
56630: LD_VAR 0 3
56634: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
56635: LD_INT 0
56637: PPUSH
56638: PPUSH
56639: PPUSH
// uc_side = 0 ;
56640: LD_ADDR_OWVAR 20
56644: PUSH
56645: LD_INT 0
56647: ST_TO_ADDR
// uc_nation = 0 ;
56648: LD_ADDR_OWVAR 21
56652: PUSH
56653: LD_INT 0
56655: ST_TO_ADDR
// InitHc ;
56656: CALL_OW 19
// InitVc ;
56660: CALL_OW 20
// if mastodonts then
56664: LD_VAR 0 6
56668: IFFALSE 56735
// for i = 1 to mastodonts do
56670: LD_ADDR_VAR 0 11
56674: PUSH
56675: DOUBLE
56676: LD_INT 1
56678: DEC
56679: ST_TO_ADDR
56680: LD_VAR 0 6
56684: PUSH
56685: FOR_TO
56686: IFFALSE 56733
// begin vc_chassis := 31 ;
56688: LD_ADDR_OWVAR 37
56692: PUSH
56693: LD_INT 31
56695: ST_TO_ADDR
// vc_control := control_rider ;
56696: LD_ADDR_OWVAR 38
56700: PUSH
56701: LD_INT 4
56703: ST_TO_ADDR
// animal := CreateVehicle ;
56704: LD_ADDR_VAR 0 12
56708: PUSH
56709: CALL_OW 45
56713: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56714: LD_VAR 0 12
56718: PPUSH
56719: LD_VAR 0 8
56723: PPUSH
56724: LD_INT 0
56726: PPUSH
56727: CALL 58804 0 3
// end ;
56731: GO 56685
56733: POP
56734: POP
// if horses then
56735: LD_VAR 0 5
56739: IFFALSE 56806
// for i = 1 to horses do
56741: LD_ADDR_VAR 0 11
56745: PUSH
56746: DOUBLE
56747: LD_INT 1
56749: DEC
56750: ST_TO_ADDR
56751: LD_VAR 0 5
56755: PUSH
56756: FOR_TO
56757: IFFALSE 56804
// begin hc_class := 21 ;
56759: LD_ADDR_OWVAR 28
56763: PUSH
56764: LD_INT 21
56766: ST_TO_ADDR
// hc_gallery :=  ;
56767: LD_ADDR_OWVAR 33
56771: PUSH
56772: LD_STRING 
56774: ST_TO_ADDR
// animal := CreateHuman ;
56775: LD_ADDR_VAR 0 12
56779: PUSH
56780: CALL_OW 44
56784: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56785: LD_VAR 0 12
56789: PPUSH
56790: LD_VAR 0 8
56794: PPUSH
56795: LD_INT 0
56797: PPUSH
56798: CALL 58804 0 3
// end ;
56802: GO 56756
56804: POP
56805: POP
// if birds then
56806: LD_VAR 0 1
56810: IFFALSE 56877
// for i = 1 to birds do
56812: LD_ADDR_VAR 0 11
56816: PUSH
56817: DOUBLE
56818: LD_INT 1
56820: DEC
56821: ST_TO_ADDR
56822: LD_VAR 0 1
56826: PUSH
56827: FOR_TO
56828: IFFALSE 56875
// begin hc_class = 18 ;
56830: LD_ADDR_OWVAR 28
56834: PUSH
56835: LD_INT 18
56837: ST_TO_ADDR
// hc_gallery =  ;
56838: LD_ADDR_OWVAR 33
56842: PUSH
56843: LD_STRING 
56845: ST_TO_ADDR
// animal := CreateHuman ;
56846: LD_ADDR_VAR 0 12
56850: PUSH
56851: CALL_OW 44
56855: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56856: LD_VAR 0 12
56860: PPUSH
56861: LD_VAR 0 8
56865: PPUSH
56866: LD_INT 0
56868: PPUSH
56869: CALL 58804 0 3
// end ;
56873: GO 56827
56875: POP
56876: POP
// if tigers then
56877: LD_VAR 0 2
56881: IFFALSE 56965
// for i = 1 to tigers do
56883: LD_ADDR_VAR 0 11
56887: PUSH
56888: DOUBLE
56889: LD_INT 1
56891: DEC
56892: ST_TO_ADDR
56893: LD_VAR 0 2
56897: PUSH
56898: FOR_TO
56899: IFFALSE 56963
// begin hc_class = class_tiger ;
56901: LD_ADDR_OWVAR 28
56905: PUSH
56906: LD_INT 14
56908: ST_TO_ADDR
// hc_gallery =  ;
56909: LD_ADDR_OWVAR 33
56913: PUSH
56914: LD_STRING 
56916: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56917: LD_ADDR_OWVAR 35
56921: PUSH
56922: LD_INT 7
56924: NEG
56925: PPUSH
56926: LD_INT 7
56928: PPUSH
56929: CALL_OW 12
56933: ST_TO_ADDR
// animal := CreateHuman ;
56934: LD_ADDR_VAR 0 12
56938: PUSH
56939: CALL_OW 44
56943: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56944: LD_VAR 0 12
56948: PPUSH
56949: LD_VAR 0 8
56953: PPUSH
56954: LD_INT 0
56956: PPUSH
56957: CALL 58804 0 3
// end ;
56961: GO 56898
56963: POP
56964: POP
// if apemans then
56965: LD_VAR 0 3
56969: IFFALSE 57092
// for i = 1 to apemans do
56971: LD_ADDR_VAR 0 11
56975: PUSH
56976: DOUBLE
56977: LD_INT 1
56979: DEC
56980: ST_TO_ADDR
56981: LD_VAR 0 3
56985: PUSH
56986: FOR_TO
56987: IFFALSE 57090
// begin hc_class = class_apeman ;
56989: LD_ADDR_OWVAR 28
56993: PUSH
56994: LD_INT 12
56996: ST_TO_ADDR
// hc_gallery =  ;
56997: LD_ADDR_OWVAR 33
57001: PUSH
57002: LD_STRING 
57004: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
57005: LD_ADDR_OWVAR 35
57009: PUSH
57010: LD_INT 5
57012: NEG
57013: PPUSH
57014: LD_INT 5
57016: PPUSH
57017: CALL_OW 12
57021: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
57022: LD_ADDR_OWVAR 31
57026: PUSH
57027: LD_INT 1
57029: PPUSH
57030: LD_INT 3
57032: PPUSH
57033: CALL_OW 12
57037: PUSH
57038: LD_INT 1
57040: PPUSH
57041: LD_INT 3
57043: PPUSH
57044: CALL_OW 12
57048: PUSH
57049: LD_INT 0
57051: PUSH
57052: LD_INT 0
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: ST_TO_ADDR
// animal := CreateHuman ;
57061: LD_ADDR_VAR 0 12
57065: PUSH
57066: CALL_OW 44
57070: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57071: LD_VAR 0 12
57075: PPUSH
57076: LD_VAR 0 8
57080: PPUSH
57081: LD_INT 0
57083: PPUSH
57084: CALL 58804 0 3
// end ;
57088: GO 56986
57090: POP
57091: POP
// if enchidnas then
57092: LD_VAR 0 4
57096: IFFALSE 57163
// for i = 1 to enchidnas do
57098: LD_ADDR_VAR 0 11
57102: PUSH
57103: DOUBLE
57104: LD_INT 1
57106: DEC
57107: ST_TO_ADDR
57108: LD_VAR 0 4
57112: PUSH
57113: FOR_TO
57114: IFFALSE 57161
// begin hc_class = 13 ;
57116: LD_ADDR_OWVAR 28
57120: PUSH
57121: LD_INT 13
57123: ST_TO_ADDR
// hc_gallery =  ;
57124: LD_ADDR_OWVAR 33
57128: PUSH
57129: LD_STRING 
57131: ST_TO_ADDR
// animal := CreateHuman ;
57132: LD_ADDR_VAR 0 12
57136: PUSH
57137: CALL_OW 44
57141: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57142: LD_VAR 0 12
57146: PPUSH
57147: LD_VAR 0 8
57151: PPUSH
57152: LD_INT 0
57154: PPUSH
57155: CALL 58804 0 3
// end ;
57159: GO 57113
57161: POP
57162: POP
// if fishes then
57163: LD_VAR 0 7
57167: IFFALSE 57234
// for i = 1 to fishes do
57169: LD_ADDR_VAR 0 11
57173: PUSH
57174: DOUBLE
57175: LD_INT 1
57177: DEC
57178: ST_TO_ADDR
57179: LD_VAR 0 7
57183: PUSH
57184: FOR_TO
57185: IFFALSE 57232
// begin hc_class = 20 ;
57187: LD_ADDR_OWVAR 28
57191: PUSH
57192: LD_INT 20
57194: ST_TO_ADDR
// hc_gallery =  ;
57195: LD_ADDR_OWVAR 33
57199: PUSH
57200: LD_STRING 
57202: ST_TO_ADDR
// animal := CreateHuman ;
57203: LD_ADDR_VAR 0 12
57207: PUSH
57208: CALL_OW 44
57212: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
57213: LD_VAR 0 12
57217: PPUSH
57218: LD_VAR 0 9
57222: PPUSH
57223: LD_INT 0
57225: PPUSH
57226: CALL 58804 0 3
// end ;
57230: GO 57184
57232: POP
57233: POP
// end ;
57234: LD_VAR 0 10
57238: RET
// export function WantHeal ( sci , unit ) ; begin
57239: LD_INT 0
57241: PPUSH
// if GetTaskList ( sci ) > 0 then
57242: LD_VAR 0 1
57246: PPUSH
57247: CALL_OW 437
57251: PUSH
57252: LD_INT 0
57254: GREATER
57255: IFFALSE 57325
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
57257: LD_VAR 0 1
57261: PPUSH
57262: CALL_OW 437
57266: PUSH
57267: LD_INT 1
57269: ARRAY
57270: PUSH
57271: LD_INT 1
57273: ARRAY
57274: PUSH
57275: LD_STRING l
57277: EQUAL
57278: PUSH
57279: LD_VAR 0 1
57283: PPUSH
57284: CALL_OW 437
57288: PUSH
57289: LD_INT 1
57291: ARRAY
57292: PUSH
57293: LD_INT 4
57295: ARRAY
57296: PUSH
57297: LD_VAR 0 2
57301: EQUAL
57302: AND
57303: IFFALSE 57315
// result := true else
57305: LD_ADDR_VAR 0 3
57309: PUSH
57310: LD_INT 1
57312: ST_TO_ADDR
57313: GO 57323
// result := false ;
57315: LD_ADDR_VAR 0 3
57319: PUSH
57320: LD_INT 0
57322: ST_TO_ADDR
// end else
57323: GO 57333
// result := false ;
57325: LD_ADDR_VAR 0 3
57329: PUSH
57330: LD_INT 0
57332: ST_TO_ADDR
// end ;
57333: LD_VAR 0 3
57337: RET
// export function HealTarget ( sci ) ; begin
57338: LD_INT 0
57340: PPUSH
// if not sci then
57341: LD_VAR 0 1
57345: NOT
57346: IFFALSE 57350
// exit ;
57348: GO 57415
// result := 0 ;
57350: LD_ADDR_VAR 0 2
57354: PUSH
57355: LD_INT 0
57357: ST_TO_ADDR
// if GetTaskList ( sci ) then
57358: LD_VAR 0 1
57362: PPUSH
57363: CALL_OW 437
57367: IFFALSE 57415
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
57369: LD_VAR 0 1
57373: PPUSH
57374: CALL_OW 437
57378: PUSH
57379: LD_INT 1
57381: ARRAY
57382: PUSH
57383: LD_INT 1
57385: ARRAY
57386: PUSH
57387: LD_STRING l
57389: EQUAL
57390: IFFALSE 57415
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
57392: LD_ADDR_VAR 0 2
57396: PUSH
57397: LD_VAR 0 1
57401: PPUSH
57402: CALL_OW 437
57406: PUSH
57407: LD_INT 1
57409: ARRAY
57410: PUSH
57411: LD_INT 4
57413: ARRAY
57414: ST_TO_ADDR
// end ;
57415: LD_VAR 0 2
57419: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
57420: LD_INT 0
57422: PPUSH
57423: PPUSH
57424: PPUSH
57425: PPUSH
// if not base_units then
57426: LD_VAR 0 1
57430: NOT
57431: IFFALSE 57435
// exit ;
57433: GO 57522
// result := false ;
57435: LD_ADDR_VAR 0 2
57439: PUSH
57440: LD_INT 0
57442: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
57443: LD_ADDR_VAR 0 5
57447: PUSH
57448: LD_VAR 0 1
57452: PPUSH
57453: LD_INT 21
57455: PUSH
57456: LD_INT 3
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PPUSH
57463: CALL_OW 72
57467: ST_TO_ADDR
// if not tmp then
57468: LD_VAR 0 5
57472: NOT
57473: IFFALSE 57477
// exit ;
57475: GO 57522
// for i in tmp do
57477: LD_ADDR_VAR 0 3
57481: PUSH
57482: LD_VAR 0 5
57486: PUSH
57487: FOR_IN
57488: IFFALSE 57520
// begin result := EnemyInRange ( i , 22 ) ;
57490: LD_ADDR_VAR 0 2
57494: PUSH
57495: LD_VAR 0 3
57499: PPUSH
57500: LD_INT 22
57502: PPUSH
57503: CALL 55758 0 2
57507: ST_TO_ADDR
// if result then
57508: LD_VAR 0 2
57512: IFFALSE 57518
// exit ;
57514: POP
57515: POP
57516: GO 57522
// end ;
57518: GO 57487
57520: POP
57521: POP
// end ;
57522: LD_VAR 0 2
57526: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
57527: LD_INT 0
57529: PPUSH
57530: PPUSH
// if not units then
57531: LD_VAR 0 1
57535: NOT
57536: IFFALSE 57540
// exit ;
57538: GO 57610
// result := [ ] ;
57540: LD_ADDR_VAR 0 3
57544: PUSH
57545: EMPTY
57546: ST_TO_ADDR
// for i in units do
57547: LD_ADDR_VAR 0 4
57551: PUSH
57552: LD_VAR 0 1
57556: PUSH
57557: FOR_IN
57558: IFFALSE 57608
// if GetTag ( i ) = tag then
57560: LD_VAR 0 4
57564: PPUSH
57565: CALL_OW 110
57569: PUSH
57570: LD_VAR 0 2
57574: EQUAL
57575: IFFALSE 57606
// result := Insert ( result , result + 1 , i ) ;
57577: LD_ADDR_VAR 0 3
57581: PUSH
57582: LD_VAR 0 3
57586: PPUSH
57587: LD_VAR 0 3
57591: PUSH
57592: LD_INT 1
57594: PLUS
57595: PPUSH
57596: LD_VAR 0 4
57600: PPUSH
57601: CALL_OW 2
57605: ST_TO_ADDR
57606: GO 57557
57608: POP
57609: POP
// end ;
57610: LD_VAR 0 3
57614: RET
// export function IsDriver ( un ) ; begin
57615: LD_INT 0
57617: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
57618: LD_ADDR_VAR 0 2
57622: PUSH
57623: LD_VAR 0 1
57627: PUSH
57628: LD_INT 55
57630: PUSH
57631: EMPTY
57632: LIST
57633: PPUSH
57634: CALL_OW 69
57638: IN
57639: ST_TO_ADDR
// end ;
57640: LD_VAR 0 2
57644: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
57645: LD_INT 0
57647: PPUSH
57648: PPUSH
// list := [ ] ;
57649: LD_ADDR_VAR 0 5
57653: PUSH
57654: EMPTY
57655: ST_TO_ADDR
// case d of 0 :
57656: LD_VAR 0 3
57660: PUSH
57661: LD_INT 0
57663: DOUBLE
57664: EQUAL
57665: IFTRUE 57669
57667: GO 57802
57669: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
57670: LD_ADDR_VAR 0 5
57674: PUSH
57675: LD_VAR 0 1
57679: PUSH
57680: LD_INT 4
57682: MINUS
57683: PUSH
57684: LD_VAR 0 2
57688: PUSH
57689: LD_INT 4
57691: MINUS
57692: PUSH
57693: LD_INT 2
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: LIST
57700: PUSH
57701: LD_VAR 0 1
57705: PUSH
57706: LD_INT 3
57708: MINUS
57709: PUSH
57710: LD_VAR 0 2
57714: PUSH
57715: LD_INT 1
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: LIST
57722: PUSH
57723: LD_VAR 0 1
57727: PUSH
57728: LD_INT 4
57730: PLUS
57731: PUSH
57732: LD_VAR 0 2
57736: PUSH
57737: LD_INT 4
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: LIST
57744: PUSH
57745: LD_VAR 0 1
57749: PUSH
57750: LD_INT 3
57752: PLUS
57753: PUSH
57754: LD_VAR 0 2
57758: PUSH
57759: LD_INT 3
57761: PLUS
57762: PUSH
57763: LD_INT 5
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: LIST
57770: PUSH
57771: LD_VAR 0 1
57775: PUSH
57776: LD_VAR 0 2
57780: PUSH
57781: LD_INT 4
57783: PLUS
57784: PUSH
57785: LD_INT 0
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: LIST
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: ST_TO_ADDR
// end ; 1 :
57800: GO 58500
57802: LD_INT 1
57804: DOUBLE
57805: EQUAL
57806: IFTRUE 57810
57808: GO 57943
57810: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
57811: LD_ADDR_VAR 0 5
57815: PUSH
57816: LD_VAR 0 1
57820: PUSH
57821: LD_VAR 0 2
57825: PUSH
57826: LD_INT 4
57828: MINUS
57829: PUSH
57830: LD_INT 3
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: LIST
57837: PUSH
57838: LD_VAR 0 1
57842: PUSH
57843: LD_INT 3
57845: MINUS
57846: PUSH
57847: LD_VAR 0 2
57851: PUSH
57852: LD_INT 3
57854: MINUS
57855: PUSH
57856: LD_INT 2
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: LIST
57863: PUSH
57864: LD_VAR 0 1
57868: PUSH
57869: LD_INT 4
57871: MINUS
57872: PUSH
57873: LD_VAR 0 2
57877: PUSH
57878: LD_INT 1
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: LIST
57885: PUSH
57886: LD_VAR 0 1
57890: PUSH
57891: LD_VAR 0 2
57895: PUSH
57896: LD_INT 3
57898: PLUS
57899: PUSH
57900: LD_INT 0
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: LIST
57907: PUSH
57908: LD_VAR 0 1
57912: PUSH
57913: LD_INT 4
57915: PLUS
57916: PUSH
57917: LD_VAR 0 2
57921: PUSH
57922: LD_INT 4
57924: PLUS
57925: PUSH
57926: LD_INT 5
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: LIST
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: ST_TO_ADDR
// end ; 2 :
57941: GO 58500
57943: LD_INT 2
57945: DOUBLE
57946: EQUAL
57947: IFTRUE 57951
57949: GO 58080
57951: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57952: LD_ADDR_VAR 0 5
57956: PUSH
57957: LD_VAR 0 1
57961: PUSH
57962: LD_VAR 0 2
57966: PUSH
57967: LD_INT 3
57969: MINUS
57970: PUSH
57971: LD_INT 3
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: LIST
57978: PUSH
57979: LD_VAR 0 1
57983: PUSH
57984: LD_INT 4
57986: PLUS
57987: PUSH
57988: LD_VAR 0 2
57992: PUSH
57993: LD_INT 4
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: LIST
58000: PUSH
58001: LD_VAR 0 1
58005: PUSH
58006: LD_VAR 0 2
58010: PUSH
58011: LD_INT 4
58013: PLUS
58014: PUSH
58015: LD_INT 0
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: LIST
58022: PUSH
58023: LD_VAR 0 1
58027: PUSH
58028: LD_INT 3
58030: MINUS
58031: PUSH
58032: LD_VAR 0 2
58036: PUSH
58037: LD_INT 1
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: LIST
58044: PUSH
58045: LD_VAR 0 1
58049: PUSH
58050: LD_INT 4
58052: MINUS
58053: PUSH
58054: LD_VAR 0 2
58058: PUSH
58059: LD_INT 4
58061: MINUS
58062: PUSH
58063: LD_INT 2
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: LIST
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: ST_TO_ADDR
// end ; 3 :
58078: GO 58500
58080: LD_INT 3
58082: DOUBLE
58083: EQUAL
58084: IFTRUE 58088
58086: GO 58221
58088: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
58089: LD_ADDR_VAR 0 5
58093: PUSH
58094: LD_VAR 0 1
58098: PUSH
58099: LD_INT 3
58101: PLUS
58102: PUSH
58103: LD_VAR 0 2
58107: PUSH
58108: LD_INT 4
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: LIST
58115: PUSH
58116: LD_VAR 0 1
58120: PUSH
58121: LD_INT 4
58123: PLUS
58124: PUSH
58125: LD_VAR 0 2
58129: PUSH
58130: LD_INT 4
58132: PLUS
58133: PUSH
58134: LD_INT 5
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: LIST
58141: PUSH
58142: LD_VAR 0 1
58146: PUSH
58147: LD_INT 4
58149: MINUS
58150: PUSH
58151: LD_VAR 0 2
58155: PUSH
58156: LD_INT 1
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: LIST
58163: PUSH
58164: LD_VAR 0 1
58168: PUSH
58169: LD_VAR 0 2
58173: PUSH
58174: LD_INT 4
58176: MINUS
58177: PUSH
58178: LD_INT 3
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: LIST
58185: PUSH
58186: LD_VAR 0 1
58190: PUSH
58191: LD_INT 3
58193: MINUS
58194: PUSH
58195: LD_VAR 0 2
58199: PUSH
58200: LD_INT 3
58202: MINUS
58203: PUSH
58204: LD_INT 2
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: LIST
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: ST_TO_ADDR
// end ; 4 :
58219: GO 58500
58221: LD_INT 4
58223: DOUBLE
58224: EQUAL
58225: IFTRUE 58229
58227: GO 58362
58229: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
58230: LD_ADDR_VAR 0 5
58234: PUSH
58235: LD_VAR 0 1
58239: PUSH
58240: LD_VAR 0 2
58244: PUSH
58245: LD_INT 4
58247: PLUS
58248: PUSH
58249: LD_INT 0
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: LIST
58256: PUSH
58257: LD_VAR 0 1
58261: PUSH
58262: LD_INT 3
58264: PLUS
58265: PUSH
58266: LD_VAR 0 2
58270: PUSH
58271: LD_INT 3
58273: PLUS
58274: PUSH
58275: LD_INT 5
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: LIST
58282: PUSH
58283: LD_VAR 0 1
58287: PUSH
58288: LD_INT 4
58290: PLUS
58291: PUSH
58292: LD_VAR 0 2
58296: PUSH
58297: LD_INT 4
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: LIST
58304: PUSH
58305: LD_VAR 0 1
58309: PUSH
58310: LD_VAR 0 2
58314: PUSH
58315: LD_INT 3
58317: MINUS
58318: PUSH
58319: LD_INT 3
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: LIST
58326: PUSH
58327: LD_VAR 0 1
58331: PUSH
58332: LD_INT 4
58334: MINUS
58335: PUSH
58336: LD_VAR 0 2
58340: PUSH
58341: LD_INT 4
58343: MINUS
58344: PUSH
58345: LD_INT 2
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: LIST
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: ST_TO_ADDR
// end ; 5 :
58360: GO 58500
58362: LD_INT 5
58364: DOUBLE
58365: EQUAL
58366: IFTRUE 58370
58368: GO 58499
58370: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
58371: LD_ADDR_VAR 0 5
58375: PUSH
58376: LD_VAR 0 1
58380: PUSH
58381: LD_INT 4
58383: MINUS
58384: PUSH
58385: LD_VAR 0 2
58389: PUSH
58390: LD_INT 1
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: LIST
58397: PUSH
58398: LD_VAR 0 1
58402: PUSH
58403: LD_VAR 0 2
58407: PUSH
58408: LD_INT 4
58410: MINUS
58411: PUSH
58412: LD_INT 3
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: LIST
58419: PUSH
58420: LD_VAR 0 1
58424: PUSH
58425: LD_INT 4
58427: PLUS
58428: PUSH
58429: LD_VAR 0 2
58433: PUSH
58434: LD_INT 4
58436: PLUS
58437: PUSH
58438: LD_INT 5
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: LIST
58445: PUSH
58446: LD_VAR 0 1
58450: PUSH
58451: LD_INT 3
58453: PLUS
58454: PUSH
58455: LD_VAR 0 2
58459: PUSH
58460: LD_INT 4
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: LIST
58467: PUSH
58468: LD_VAR 0 1
58472: PUSH
58473: LD_VAR 0 2
58477: PUSH
58478: LD_INT 3
58480: PLUS
58481: PUSH
58482: LD_INT 0
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: LIST
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: ST_TO_ADDR
// end ; end ;
58497: GO 58500
58499: POP
// result := list ;
58500: LD_ADDR_VAR 0 4
58504: PUSH
58505: LD_VAR 0 5
58509: ST_TO_ADDR
// end ;
58510: LD_VAR 0 4
58514: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
58515: LD_INT 0
58517: PPUSH
58518: PPUSH
58519: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
58520: LD_VAR 0 1
58524: NOT
58525: PUSH
58526: LD_VAR 0 2
58530: PUSH
58531: LD_INT 1
58533: PUSH
58534: LD_INT 2
58536: PUSH
58537: LD_INT 3
58539: PUSH
58540: LD_INT 4
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: IN
58549: NOT
58550: OR
58551: IFFALSE 58555
// exit ;
58553: GO 58647
// tmp := [ ] ;
58555: LD_ADDR_VAR 0 5
58559: PUSH
58560: EMPTY
58561: ST_TO_ADDR
// for i in units do
58562: LD_ADDR_VAR 0 4
58566: PUSH
58567: LD_VAR 0 1
58571: PUSH
58572: FOR_IN
58573: IFFALSE 58616
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
58575: LD_ADDR_VAR 0 5
58579: PUSH
58580: LD_VAR 0 5
58584: PPUSH
58585: LD_VAR 0 5
58589: PUSH
58590: LD_INT 1
58592: PLUS
58593: PPUSH
58594: LD_VAR 0 4
58598: PPUSH
58599: LD_VAR 0 2
58603: PPUSH
58604: CALL_OW 259
58608: PPUSH
58609: CALL_OW 2
58613: ST_TO_ADDR
58614: GO 58572
58616: POP
58617: POP
// if not tmp then
58618: LD_VAR 0 5
58622: NOT
58623: IFFALSE 58627
// exit ;
58625: GO 58647
// result := SortListByListDesc ( units , tmp ) ;
58627: LD_ADDR_VAR 0 3
58631: PUSH
58632: LD_VAR 0 1
58636: PPUSH
58637: LD_VAR 0 5
58641: PPUSH
58642: CALL_OW 77
58646: ST_TO_ADDR
// end ;
58647: LD_VAR 0 3
58651: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
58652: LD_INT 0
58654: PPUSH
58655: PPUSH
58656: PPUSH
// x := GetX ( building ) ;
58657: LD_ADDR_VAR 0 4
58661: PUSH
58662: LD_VAR 0 2
58666: PPUSH
58667: CALL_OW 250
58671: ST_TO_ADDR
// y := GetY ( building ) ;
58672: LD_ADDR_VAR 0 5
58676: PUSH
58677: LD_VAR 0 2
58681: PPUSH
58682: CALL_OW 251
58686: ST_TO_ADDR
// if GetTaskList ( unit ) then
58687: LD_VAR 0 1
58691: PPUSH
58692: CALL_OW 437
58696: IFFALSE 58791
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58698: LD_STRING e
58700: PUSH
58701: LD_VAR 0 1
58705: PPUSH
58706: CALL_OW 437
58710: PUSH
58711: LD_INT 1
58713: ARRAY
58714: PUSH
58715: LD_INT 1
58717: ARRAY
58718: EQUAL
58719: PUSH
58720: LD_VAR 0 4
58724: PUSH
58725: LD_VAR 0 1
58729: PPUSH
58730: CALL_OW 437
58734: PUSH
58735: LD_INT 1
58737: ARRAY
58738: PUSH
58739: LD_INT 2
58741: ARRAY
58742: EQUAL
58743: AND
58744: PUSH
58745: LD_VAR 0 5
58749: PUSH
58750: LD_VAR 0 1
58754: PPUSH
58755: CALL_OW 437
58759: PUSH
58760: LD_INT 1
58762: ARRAY
58763: PUSH
58764: LD_INT 3
58766: ARRAY
58767: EQUAL
58768: AND
58769: IFFALSE 58781
// result := true else
58771: LD_ADDR_VAR 0 3
58775: PUSH
58776: LD_INT 1
58778: ST_TO_ADDR
58779: GO 58789
// result := false ;
58781: LD_ADDR_VAR 0 3
58785: PUSH
58786: LD_INT 0
58788: ST_TO_ADDR
// end else
58789: GO 58799
// result := false ;
58791: LD_ADDR_VAR 0 3
58795: PUSH
58796: LD_INT 0
58798: ST_TO_ADDR
// end ;
58799: LD_VAR 0 3
58803: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58804: LD_INT 0
58806: PPUSH
58807: PPUSH
58808: PPUSH
58809: PPUSH
// if not unit or not area then
58810: LD_VAR 0 1
58814: NOT
58815: PUSH
58816: LD_VAR 0 2
58820: NOT
58821: OR
58822: IFFALSE 58826
// exit ;
58824: GO 58990
// tmp := AreaToList ( area , i ) ;
58826: LD_ADDR_VAR 0 6
58830: PUSH
58831: LD_VAR 0 2
58835: PPUSH
58836: LD_VAR 0 5
58840: PPUSH
58841: CALL_OW 517
58845: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58846: LD_ADDR_VAR 0 5
58850: PUSH
58851: DOUBLE
58852: LD_INT 1
58854: DEC
58855: ST_TO_ADDR
58856: LD_VAR 0 6
58860: PUSH
58861: LD_INT 1
58863: ARRAY
58864: PUSH
58865: FOR_TO
58866: IFFALSE 58988
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58868: LD_ADDR_VAR 0 7
58872: PUSH
58873: LD_VAR 0 6
58877: PUSH
58878: LD_INT 1
58880: ARRAY
58881: PUSH
58882: LD_VAR 0 5
58886: ARRAY
58887: PUSH
58888: LD_VAR 0 6
58892: PUSH
58893: LD_INT 2
58895: ARRAY
58896: PUSH
58897: LD_VAR 0 5
58901: ARRAY
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
58907: LD_VAR 0 7
58911: PUSH
58912: LD_INT 1
58914: ARRAY
58915: PPUSH
58916: LD_VAR 0 7
58920: PUSH
58921: LD_INT 2
58923: ARRAY
58924: PPUSH
58925: CALL_OW 428
58929: PUSH
58930: LD_INT 0
58932: EQUAL
58933: IFFALSE 58986
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58935: LD_VAR 0 1
58939: PPUSH
58940: LD_VAR 0 7
58944: PUSH
58945: LD_INT 1
58947: ARRAY
58948: PPUSH
58949: LD_VAR 0 7
58953: PUSH
58954: LD_INT 2
58956: ARRAY
58957: PPUSH
58958: LD_VAR 0 3
58962: PPUSH
58963: CALL_OW 48
// result := IsPlaced ( unit ) ;
58967: LD_ADDR_VAR 0 4
58971: PUSH
58972: LD_VAR 0 1
58976: PPUSH
58977: CALL_OW 305
58981: ST_TO_ADDR
// exit ;
58982: POP
58983: POP
58984: GO 58990
// end ; end ;
58986: GO 58865
58988: POP
58989: POP
// end ;
58990: LD_VAR 0 4
58994: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58995: LD_INT 0
58997: PPUSH
58998: PPUSH
58999: PPUSH
// if not side or side > 8 then
59000: LD_VAR 0 1
59004: NOT
59005: PUSH
59006: LD_VAR 0 1
59010: PUSH
59011: LD_INT 8
59013: GREATER
59014: OR
59015: IFFALSE 59019
// exit ;
59017: GO 59206
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
59019: LD_ADDR_VAR 0 4
59023: PUSH
59024: LD_INT 22
59026: PUSH
59027: LD_VAR 0 1
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 21
59038: PUSH
59039: LD_INT 3
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PPUSH
59050: CALL_OW 69
59054: ST_TO_ADDR
// if not tmp then
59055: LD_VAR 0 4
59059: NOT
59060: IFFALSE 59064
// exit ;
59062: GO 59206
// enable_addtolog := true ;
59064: LD_ADDR_OWVAR 81
59068: PUSH
59069: LD_INT 1
59071: ST_TO_ADDR
// AddToLog ( [ ) ;
59072: LD_STRING [
59074: PPUSH
59075: CALL_OW 561
// for i in tmp do
59079: LD_ADDR_VAR 0 3
59083: PUSH
59084: LD_VAR 0 4
59088: PUSH
59089: FOR_IN
59090: IFFALSE 59197
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
59092: LD_STRING [
59094: PUSH
59095: LD_VAR 0 3
59099: PPUSH
59100: CALL_OW 266
59104: STR
59105: PUSH
59106: LD_STRING , 
59108: STR
59109: PUSH
59110: LD_VAR 0 3
59114: PPUSH
59115: CALL_OW 250
59119: STR
59120: PUSH
59121: LD_STRING , 
59123: STR
59124: PUSH
59125: LD_VAR 0 3
59129: PPUSH
59130: CALL_OW 251
59134: STR
59135: PUSH
59136: LD_STRING , 
59138: STR
59139: PUSH
59140: LD_VAR 0 3
59144: PPUSH
59145: CALL_OW 254
59149: STR
59150: PUSH
59151: LD_STRING , 
59153: STR
59154: PUSH
59155: LD_VAR 0 3
59159: PPUSH
59160: LD_INT 1
59162: PPUSH
59163: CALL_OW 268
59167: STR
59168: PUSH
59169: LD_STRING , 
59171: STR
59172: PUSH
59173: LD_VAR 0 3
59177: PPUSH
59178: LD_INT 2
59180: PPUSH
59181: CALL_OW 268
59185: STR
59186: PUSH
59187: LD_STRING ],
59189: STR
59190: PPUSH
59191: CALL_OW 561
// end ;
59195: GO 59089
59197: POP
59198: POP
// AddToLog ( ]; ) ;
59199: LD_STRING ];
59201: PPUSH
59202: CALL_OW 561
// end ;
59206: LD_VAR 0 2
59210: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
59211: LD_INT 0
59213: PPUSH
59214: PPUSH
59215: PPUSH
59216: PPUSH
59217: PPUSH
// if not area or not rate or not max then
59218: LD_VAR 0 1
59222: NOT
59223: PUSH
59224: LD_VAR 0 2
59228: NOT
59229: OR
59230: PUSH
59231: LD_VAR 0 4
59235: NOT
59236: OR
59237: IFFALSE 59241
// exit ;
59239: GO 59433
// while 1 do
59241: LD_INT 1
59243: IFFALSE 59433
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
59245: LD_ADDR_VAR 0 9
59249: PUSH
59250: LD_VAR 0 1
59254: PPUSH
59255: LD_INT 1
59257: PPUSH
59258: CALL_OW 287
59262: PUSH
59263: LD_INT 10
59265: MUL
59266: ST_TO_ADDR
// r := rate / 10 ;
59267: LD_ADDR_VAR 0 7
59271: PUSH
59272: LD_VAR 0 2
59276: PUSH
59277: LD_INT 10
59279: DIVREAL
59280: ST_TO_ADDR
// time := 1 1$00 ;
59281: LD_ADDR_VAR 0 8
59285: PUSH
59286: LD_INT 2100
59288: ST_TO_ADDR
// if amount < min then
59289: LD_VAR 0 9
59293: PUSH
59294: LD_VAR 0 3
59298: LESS
59299: IFFALSE 59317
// r := r * 2 else
59301: LD_ADDR_VAR 0 7
59305: PUSH
59306: LD_VAR 0 7
59310: PUSH
59311: LD_INT 2
59313: MUL
59314: ST_TO_ADDR
59315: GO 59343
// if amount > max then
59317: LD_VAR 0 9
59321: PUSH
59322: LD_VAR 0 4
59326: GREATER
59327: IFFALSE 59343
// r := r / 2 ;
59329: LD_ADDR_VAR 0 7
59333: PUSH
59334: LD_VAR 0 7
59338: PUSH
59339: LD_INT 2
59341: DIVREAL
59342: ST_TO_ADDR
// time := time / r ;
59343: LD_ADDR_VAR 0 8
59347: PUSH
59348: LD_VAR 0 8
59352: PUSH
59353: LD_VAR 0 7
59357: DIVREAL
59358: ST_TO_ADDR
// if time < 0 then
59359: LD_VAR 0 8
59363: PUSH
59364: LD_INT 0
59366: LESS
59367: IFFALSE 59384
// time := time * - 1 ;
59369: LD_ADDR_VAR 0 8
59373: PUSH
59374: LD_VAR 0 8
59378: PUSH
59379: LD_INT 1
59381: NEG
59382: MUL
59383: ST_TO_ADDR
// wait ( time ) ;
59384: LD_VAR 0 8
59388: PPUSH
59389: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
59393: LD_INT 35
59395: PPUSH
59396: LD_INT 875
59398: PPUSH
59399: CALL_OW 12
59403: PPUSH
59404: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
59408: LD_INT 1
59410: PPUSH
59411: LD_INT 5
59413: PPUSH
59414: CALL_OW 12
59418: PPUSH
59419: LD_VAR 0 1
59423: PPUSH
59424: LD_INT 1
59426: PPUSH
59427: CALL_OW 55
// end ;
59431: GO 59241
// end ;
59433: LD_VAR 0 5
59437: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
59438: LD_INT 0
59440: PPUSH
59441: PPUSH
59442: PPUSH
59443: PPUSH
59444: PPUSH
59445: PPUSH
59446: PPUSH
59447: PPUSH
// if not turrets or not factories then
59448: LD_VAR 0 1
59452: NOT
59453: PUSH
59454: LD_VAR 0 2
59458: NOT
59459: OR
59460: IFFALSE 59464
// exit ;
59462: GO 59771
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
59464: LD_ADDR_VAR 0 10
59468: PUSH
59469: LD_INT 5
59471: PUSH
59472: LD_INT 6
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 2
59481: PUSH
59482: LD_INT 4
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 3
59491: PUSH
59492: LD_INT 5
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 24
59506: PUSH
59507: LD_INT 25
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 23
59516: PUSH
59517: LD_INT 27
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 42
59530: PUSH
59531: LD_INT 43
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 44
59540: PUSH
59541: LD_INT 46
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 45
59550: PUSH
59551: LD_INT 47
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: LIST
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: LIST
59567: ST_TO_ADDR
// result := [ ] ;
59568: LD_ADDR_VAR 0 3
59572: PUSH
59573: EMPTY
59574: ST_TO_ADDR
// for i in turrets do
59575: LD_ADDR_VAR 0 4
59579: PUSH
59580: LD_VAR 0 1
59584: PUSH
59585: FOR_IN
59586: IFFALSE 59769
// begin nat := GetNation ( i ) ;
59588: LD_ADDR_VAR 0 7
59592: PUSH
59593: LD_VAR 0 4
59597: PPUSH
59598: CALL_OW 248
59602: ST_TO_ADDR
// weapon := 0 ;
59603: LD_ADDR_VAR 0 8
59607: PUSH
59608: LD_INT 0
59610: ST_TO_ADDR
// if not nat then
59611: LD_VAR 0 7
59615: NOT
59616: IFFALSE 59620
// continue ;
59618: GO 59585
// for j in list [ nat ] do
59620: LD_ADDR_VAR 0 5
59624: PUSH
59625: LD_VAR 0 10
59629: PUSH
59630: LD_VAR 0 7
59634: ARRAY
59635: PUSH
59636: FOR_IN
59637: IFFALSE 59678
// if GetBWeapon ( i ) = j [ 1 ] then
59639: LD_VAR 0 4
59643: PPUSH
59644: CALL_OW 269
59648: PUSH
59649: LD_VAR 0 5
59653: PUSH
59654: LD_INT 1
59656: ARRAY
59657: EQUAL
59658: IFFALSE 59676
// begin weapon := j [ 2 ] ;
59660: LD_ADDR_VAR 0 8
59664: PUSH
59665: LD_VAR 0 5
59669: PUSH
59670: LD_INT 2
59672: ARRAY
59673: ST_TO_ADDR
// break ;
59674: GO 59678
// end ;
59676: GO 59636
59678: POP
59679: POP
// if not weapon then
59680: LD_VAR 0 8
59684: NOT
59685: IFFALSE 59689
// continue ;
59687: GO 59585
// for k in factories do
59689: LD_ADDR_VAR 0 6
59693: PUSH
59694: LD_VAR 0 2
59698: PUSH
59699: FOR_IN
59700: IFFALSE 59765
// begin weapons := AvailableWeaponList ( k ) ;
59702: LD_ADDR_VAR 0 9
59706: PUSH
59707: LD_VAR 0 6
59711: PPUSH
59712: CALL_OW 478
59716: ST_TO_ADDR
// if not weapons then
59717: LD_VAR 0 9
59721: NOT
59722: IFFALSE 59726
// continue ;
59724: GO 59699
// if weapon in weapons then
59726: LD_VAR 0 8
59730: PUSH
59731: LD_VAR 0 9
59735: IN
59736: IFFALSE 59763
// begin result := [ i , weapon ] ;
59738: LD_ADDR_VAR 0 3
59742: PUSH
59743: LD_VAR 0 4
59747: PUSH
59748: LD_VAR 0 8
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: ST_TO_ADDR
// exit ;
59757: POP
59758: POP
59759: POP
59760: POP
59761: GO 59771
// end ; end ;
59763: GO 59699
59765: POP
59766: POP
// end ;
59767: GO 59585
59769: POP
59770: POP
// end ;
59771: LD_VAR 0 3
59775: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59776: LD_INT 0
59778: PPUSH
// if not side or side > 8 then
59779: LD_VAR 0 3
59783: NOT
59784: PUSH
59785: LD_VAR 0 3
59789: PUSH
59790: LD_INT 8
59792: GREATER
59793: OR
59794: IFFALSE 59798
// exit ;
59796: GO 59857
// if not range then
59798: LD_VAR 0 4
59802: NOT
59803: IFFALSE 59814
// range := - 12 ;
59805: LD_ADDR_VAR 0 4
59809: PUSH
59810: LD_INT 12
59812: NEG
59813: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59814: LD_VAR 0 1
59818: PPUSH
59819: LD_VAR 0 2
59823: PPUSH
59824: LD_VAR 0 3
59828: PPUSH
59829: LD_VAR 0 4
59833: PPUSH
59834: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59838: LD_VAR 0 1
59842: PPUSH
59843: LD_VAR 0 2
59847: PPUSH
59848: LD_VAR 0 3
59852: PPUSH
59853: CALL_OW 331
// end ;
59857: LD_VAR 0 5
59861: RET
// export function Video ( mode ) ; begin
59862: LD_INT 0
59864: PPUSH
// ingame_video = mode ;
59865: LD_ADDR_OWVAR 52
59869: PUSH
59870: LD_VAR 0 1
59874: ST_TO_ADDR
// interface_hidden = mode ;
59875: LD_ADDR_OWVAR 54
59879: PUSH
59880: LD_VAR 0 1
59884: ST_TO_ADDR
// end ;
59885: LD_VAR 0 2
59889: RET
// export function Join ( array , element ) ; begin
59890: LD_INT 0
59892: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59893: LD_ADDR_VAR 0 3
59897: PUSH
59898: LD_VAR 0 1
59902: PPUSH
59903: LD_VAR 0 1
59907: PUSH
59908: LD_INT 1
59910: PLUS
59911: PPUSH
59912: LD_VAR 0 2
59916: PPUSH
59917: CALL_OW 1
59921: ST_TO_ADDR
// end ;
59922: LD_VAR 0 3
59926: RET
// export function JoinUnion ( array , element ) ; begin
59927: LD_INT 0
59929: PPUSH
// result := array union element ;
59930: LD_ADDR_VAR 0 3
59934: PUSH
59935: LD_VAR 0 1
59939: PUSH
59940: LD_VAR 0 2
59944: UNION
59945: ST_TO_ADDR
// end ;
59946: LD_VAR 0 3
59950: RET
// export function GetBehemoths ( side ) ; begin
59951: LD_INT 0
59953: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
59954: LD_ADDR_VAR 0 2
59958: PUSH
59959: LD_INT 22
59961: PUSH
59962: LD_VAR 0 1
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 31
59973: PUSH
59974: LD_INT 25
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PPUSH
59985: CALL_OW 69
59989: ST_TO_ADDR
// end ;
59990: LD_VAR 0 2
59994: RET
// export function Shuffle ( array ) ; var i , index ; begin
59995: LD_INT 0
59997: PPUSH
59998: PPUSH
59999: PPUSH
// result := [ ] ;
60000: LD_ADDR_VAR 0 2
60004: PUSH
60005: EMPTY
60006: ST_TO_ADDR
// if not array then
60007: LD_VAR 0 1
60011: NOT
60012: IFFALSE 60016
// exit ;
60014: GO 60115
// Randomize ;
60016: CALL_OW 10
// for i = array downto 1 do
60020: LD_ADDR_VAR 0 3
60024: PUSH
60025: DOUBLE
60026: LD_VAR 0 1
60030: INC
60031: ST_TO_ADDR
60032: LD_INT 1
60034: PUSH
60035: FOR_DOWNTO
60036: IFFALSE 60113
// begin index := rand ( 1 , array ) ;
60038: LD_ADDR_VAR 0 4
60042: PUSH
60043: LD_INT 1
60045: PPUSH
60046: LD_VAR 0 1
60050: PPUSH
60051: CALL_OW 12
60055: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
60056: LD_ADDR_VAR 0 2
60060: PUSH
60061: LD_VAR 0 2
60065: PPUSH
60066: LD_VAR 0 2
60070: PUSH
60071: LD_INT 1
60073: PLUS
60074: PPUSH
60075: LD_VAR 0 1
60079: PUSH
60080: LD_VAR 0 4
60084: ARRAY
60085: PPUSH
60086: CALL_OW 2
60090: ST_TO_ADDR
// array := Delete ( array , index ) ;
60091: LD_ADDR_VAR 0 1
60095: PUSH
60096: LD_VAR 0 1
60100: PPUSH
60101: LD_VAR 0 4
60105: PPUSH
60106: CALL_OW 3
60110: ST_TO_ADDR
// end ;
60111: GO 60035
60113: POP
60114: POP
// end ;
60115: LD_VAR 0 2
60119: RET
// export function GetBaseMaterials ( base ) ; begin
60120: LD_INT 0
60122: PPUSH
// result := [ 0 , 0 , 0 ] ;
60123: LD_ADDR_VAR 0 2
60127: PUSH
60128: LD_INT 0
60130: PUSH
60131: LD_INT 0
60133: PUSH
60134: LD_INT 0
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: LIST
60141: ST_TO_ADDR
// if not base then
60142: LD_VAR 0 1
60146: NOT
60147: IFFALSE 60151
// exit ;
60149: GO 60200
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
60151: LD_ADDR_VAR 0 2
60155: PUSH
60156: LD_VAR 0 1
60160: PPUSH
60161: LD_INT 1
60163: PPUSH
60164: CALL_OW 275
60168: PUSH
60169: LD_VAR 0 1
60173: PPUSH
60174: LD_INT 2
60176: PPUSH
60177: CALL_OW 275
60181: PUSH
60182: LD_VAR 0 1
60186: PPUSH
60187: LD_INT 3
60189: PPUSH
60190: CALL_OW 275
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: LIST
60199: ST_TO_ADDR
// end ;
60200: LD_VAR 0 2
60204: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
60205: LD_INT 0
60207: PPUSH
60208: PPUSH
// result := array ;
60209: LD_ADDR_VAR 0 3
60213: PUSH
60214: LD_VAR 0 1
60218: ST_TO_ADDR
// if size > 0 then
60219: LD_VAR 0 2
60223: PUSH
60224: LD_INT 0
60226: GREATER
60227: IFFALSE 60273
// for i := array downto size do
60229: LD_ADDR_VAR 0 4
60233: PUSH
60234: DOUBLE
60235: LD_VAR 0 1
60239: INC
60240: ST_TO_ADDR
60241: LD_VAR 0 2
60245: PUSH
60246: FOR_DOWNTO
60247: IFFALSE 60271
// result := Delete ( result , result ) ;
60249: LD_ADDR_VAR 0 3
60253: PUSH
60254: LD_VAR 0 3
60258: PPUSH
60259: LD_VAR 0 3
60263: PPUSH
60264: CALL_OW 3
60268: ST_TO_ADDR
60269: GO 60246
60271: POP
60272: POP
// end ;
60273: LD_VAR 0 3
60277: RET
// export function ComExit ( unit ) ; var tmp ; begin
60278: LD_INT 0
60280: PPUSH
60281: PPUSH
// if not IsInUnit ( unit ) then
60282: LD_VAR 0 1
60286: PPUSH
60287: CALL_OW 310
60291: NOT
60292: IFFALSE 60296
// exit ;
60294: GO 60356
// tmp := IsInUnit ( unit ) ;
60296: LD_ADDR_VAR 0 3
60300: PUSH
60301: LD_VAR 0 1
60305: PPUSH
60306: CALL_OW 310
60310: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
60311: LD_VAR 0 3
60315: PPUSH
60316: CALL_OW 247
60320: PUSH
60321: LD_INT 2
60323: EQUAL
60324: IFFALSE 60337
// ComExitVehicle ( unit ) else
60326: LD_VAR 0 1
60330: PPUSH
60331: CALL_OW 121
60335: GO 60346
// ComExitBuilding ( unit ) ;
60337: LD_VAR 0 1
60341: PPUSH
60342: CALL_OW 122
// result := tmp ;
60346: LD_ADDR_VAR 0 2
60350: PUSH
60351: LD_VAR 0 3
60355: ST_TO_ADDR
// end ;
60356: LD_VAR 0 2
60360: RET
// export function ResetHc ; begin
60361: LD_INT 0
60363: PPUSH
// InitHc ;
60364: CALL_OW 19
// hc_importance := 0 ;
60368: LD_ADDR_OWVAR 32
60372: PUSH
60373: LD_INT 0
60375: ST_TO_ADDR
// end ;
60376: LD_VAR 0 1
60380: RET
