// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// SetDifficulty ( GetMultiplayerSetting ( 0 ) ) ;
  11: LD_INT 0
  13: PPUSH
  14: CALL_OW 426
  18: PPUSH
  19: CALL 279 0 1
// InGameOn ;
  23: CALL_OW 8
// CenterNowOnXY ( 0 , 0 ) ;
  27: LD_INT 0
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: CALL_OW 86
// RandomizeAll ;
  37: CALL_OW 11
// DestroyTrash ;
  41: CALL 148 0 0
// ShowPath ;
  45: CALL 214 0 0
// RandMusic ( 1 , 3 ) ;
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 3
  54: PPUSH
  55: CALL 222 0 2
// PrepareAnimals ( [ 8 , 7 , 6 ] [ dif ] , 2 , 3 , nature ) ;
  59: LD_INT 8
  61: PUSH
  62: LD_INT 7
  64: PUSH
  65: LD_INT 6
  67: PUSH
  68: EMPTY
  69: LIST
  70: LIST
  71: LIST
  72: PUSH
  73: LD_EXP 1
  77: ARRAY
  78: PPUSH
  79: LD_INT 2
  81: PPUSH
  82: LD_INT 3
  84: PPUSH
  85: LD_INT 10
  87: PPUSH
  88: CALL 329 0 4
// PrepareRussian ;
  92: CALL 1407 0 0
// Action ;
  96: CALL 8617 0 0
// PrepareAmerican ;
 100: CALL 5237 0 0
// end ;
 104: END
// every 2 2$00 + 1 1$0 do var i , bool ;
 105: GO 107
 107: DISABLE
 108: LD_INT 0
 110: PPUSH
 111: PPUSH
// begin bool := Rand ( false , true ) ;
 112: LD_ADDR_VAR 0 2
 116: PUSH
 117: LD_INT 0
 119: PPUSH
 120: LD_INT 1
 122: PPUSH
 123: CALL_OW 12
 127: ST_TO_ADDR
// if bool then
 128: LD_VAR 0 2
 132: IFFALSE 144
// RandMusic ( 1 , 3 ) ;
 134: LD_INT 1
 136: PPUSH
 137: LD_INT 3
 139: PPUSH
 140: CALL 222 0 2
// enable ;
 144: ENABLE
// end ; end_of_file
 145: PPOPN 2
 147: END
// export function DestroyTrash ; var i ; begin
 148: LD_INT 0
 150: PPUSH
 151: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_not , [ f_lives , 5 ] ] ] ) do
 152: LD_ADDR_VAR 0 2
 156: PUSH
 157: LD_INT 22
 159: PUSH
 160: LD_INT 0
 162: PUSH
 163: EMPTY
 164: LIST
 165: LIST
 166: PUSH
 167: LD_INT 3
 169: PUSH
 170: LD_INT 24
 172: PUSH
 173: LD_INT 5
 175: PUSH
 176: EMPTY
 177: LIST
 178: LIST
 179: PUSH
 180: EMPTY
 181: LIST
 182: LIST
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 69
 192: PUSH
 193: FOR_IN
 194: IFFALSE 207
// KillUnit ( i ) ;
 196: LD_VAR 0 2
 200: PPUSH
 201: CALL_OW 66
 205: GO 193
 207: POP
 208: POP
// end ;
 209: LD_VAR 0 1
 213: RET
// export function ShowPath ; begin
 214: LD_INT 0
 216: PPUSH
// end ;
 217: LD_VAR 0 1
 221: RET
// export function RandMusic ( n1 , n2 ) ; var proc ; begin
 222: LD_INT 0
 224: PPUSH
 225: PPUSH
// proc := Rand ( 0 , 100 ) ;
 226: LD_ADDR_VAR 0 4
 230: PUSH
 231: LD_INT 0
 233: PPUSH
 234: LD_INT 100
 236: PPUSH
 237: CALL_OW 12
 241: ST_TO_ADDR
// if proc > 50 then
 242: LD_VAR 0 4
 246: PUSH
 247: LD_INT 50
 249: GREATER
 250: IFFALSE 264
// music_nat := n1 else
 252: LD_ADDR_OWVAR 71
 256: PUSH
 257: LD_VAR 0 1
 261: ST_TO_ADDR
 262: GO 274
// music_nat := n2 ;
 264: LD_ADDR_OWVAR 71
 268: PUSH
 269: LD_VAR 0 2
 273: ST_TO_ADDR
// end ;
 274: LD_VAR 0 3
 278: RET
// export dif ; export function SetDifficulty ( val ) ; begin
 279: LD_INT 0
 281: PPUSH
// if not val then
 282: LD_VAR 0 1
 286: NOT
 287: IFFALSE 297
// val := 2 ;
 289: LD_ADDR_VAR 0 1
 293: PUSH
 294: LD_INT 2
 296: ST_TO_ADDR
// dif := val ;
 297: LD_ADDR_EXP 1
 301: PUSH
 302: LD_VAR 0 1
 306: ST_TO_ADDR
// if dif < 3 then
 307: LD_EXP 1
 311: PUSH
 312: LD_INT 3
 314: LESS
 315: IFFALSE 324
// RemoveEnvironmentArea ( evnt ) ;
 317: LD_INT 9
 319: PPUSH
 320: CALL_OW 355
// end ;
 324: LD_VAR 0 2
 328: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
 333: PPUSH
 334: PPUSH
 335: PPUSH
// uc_nation = nation_nature ;
 336: LD_ADDR_OWVAR 21
 340: PUSH
 341: LD_INT 0
 343: ST_TO_ADDR
// uc_side = 0 ;
 344: LD_ADDR_OWVAR 20
 348: PUSH
 349: LD_INT 0
 351: ST_TO_ADDR
// hc_importance := 0 ;
 352: LD_ADDR_OWVAR 32
 356: PUSH
 357: LD_INT 0
 359: ST_TO_ADDR
// l = 0 ;
 360: LD_ADDR_VAR 0 6
 364: PUSH
 365: LD_INT 0
 367: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
 368: LD_ADDR_OWVAR 24
 372: PUSH
 373: LD_INT 0
 375: PPUSH
 376: LD_INT 5
 378: PPUSH
 379: CALL_OW 12
 383: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
 384: LD_ADDR_OWVAR 35
 388: PUSH
 389: LD_INT 5
 391: NEG
 392: PPUSH
 393: LD_INT 5
 395: PPUSH
 396: CALL_OW 12
 400: ST_TO_ADDR
// hc_gallery =  ;
 401: LD_ADDR_OWVAR 33
 405: PUSH
 406: LD_STRING 
 408: ST_TO_ADDR
// hc_class = class_apeman ;
 409: LD_ADDR_OWVAR 28
 413: PUSH
 414: LD_INT 12
 416: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
 417: LD_ADDR_OWVAR 29
 421: PUSH
 422: LD_INT 11
 424: PPUSH
 425: LD_INT 13
 427: PPUSH
 428: CALL_OW 12
 432: PUSH
 433: LD_INT 10
 435: PPUSH
 436: LD_INT 11
 438: PPUSH
 439: CALL_OW 12
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: ST_TO_ADDR
// hc_sex = sex_male ;
 448: LD_ADDR_OWVAR 27
 452: PUSH
 453: LD_INT 1
 455: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
 456: LD_ADDR_OWVAR 31
 460: PUSH
 461: LD_INT 0
 463: PPUSH
 464: LD_INT 2
 466: PPUSH
 467: CALL_OW 12
 471: PUSH
 472: LD_INT 0
 474: PUSH
 475: LD_INT 0
 477: PUSH
 478: LD_INT 0
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: ST_TO_ADDR
// apeman = CreateHuman ;
 487: LD_ADDR_VAR 0 7
 491: PUSH
 492: CALL_OW 44
 496: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
 497: LD_VAR 0 7
 501: PPUSH
 502: LD_VAR 0 4
 506: PPUSH
 507: LD_INT 0
 509: PPUSH
 510: CALL_OW 49
// l = l + 1 ;
 514: LD_ADDR_VAR 0 6
 518: PUSH
 519: LD_VAR 0 6
 523: PUSH
 524: LD_INT 1
 526: PLUS
 527: ST_TO_ADDR
// end until l = num1 ;
 528: LD_VAR 0 6
 532: PUSH
 533: LD_VAR 0 1
 537: EQUAL
 538: IFFALSE 368
// l = 0 ;
 540: LD_ADDR_VAR 0 6
 544: PUSH
 545: LD_INT 0
 547: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
 548: LD_ADDR_OWVAR 35
 552: PUSH
 553: LD_INT 0
 555: PPUSH
 556: LD_INT 25
 558: PPUSH
 559: CALL_OW 12
 563: ST_TO_ADDR
// hc_class = class_tiger ;
 564: LD_ADDR_OWVAR 28
 568: PUSH
 569: LD_INT 14
 571: ST_TO_ADDR
// hc_sex = sex_male ;
 572: LD_ADDR_OWVAR 27
 576: PUSH
 577: LD_INT 1
 579: ST_TO_ADDR
// hc_gallery = sandnature ;
 580: LD_ADDR_OWVAR 33
 584: PUSH
 585: LD_STRING sandnature
 587: ST_TO_ADDR
// hc_face_number = 3 ;
 588: LD_ADDR_OWVAR 34
 592: PUSH
 593: LD_INT 3
 595: ST_TO_ADDR
// tiger = CreateHuman ;
 596: LD_ADDR_VAR 0 8
 600: PUSH
 601: CALL_OW 44
 605: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
 606: LD_VAR 0 8
 610: PPUSH
 611: LD_VAR 0 4
 615: PPUSH
 616: LD_INT 0
 618: PPUSH
 619: CALL_OW 49
// l = l + 1 ;
 623: LD_ADDR_VAR 0 6
 627: PUSH
 628: LD_VAR 0 6
 632: PUSH
 633: LD_INT 1
 635: PLUS
 636: ST_TO_ADDR
// end until l = num2 ;
 637: LD_VAR 0 6
 641: PUSH
 642: LD_VAR 0 2
 646: EQUAL
 647: IFFALSE 548
// l = 0 ;
 649: LD_ADDR_VAR 0 6
 653: PUSH
 654: LD_INT 0
 656: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
 657: LD_ADDR_OWVAR 28
 661: PUSH
 662: LD_INT 18
 664: ST_TO_ADDR
// hc_gallery = sandnature ;
 665: LD_ADDR_OWVAR 33
 669: PUSH
 670: LD_STRING sandnature
 672: ST_TO_ADDR
// hc_face_number = 1 ;
 673: LD_ADDR_OWVAR 34
 677: PUSH
 678: LD_INT 1
 680: ST_TO_ADDR
// bird = CreateHuman ;
 681: LD_ADDR_VAR 0 9
 685: PUSH
 686: CALL_OW 44
 690: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
 691: LD_VAR 0 9
 695: PPUSH
 696: LD_INT 0
 698: PPUSH
 699: CALL_OW 51
// l = l + 1 ;
 703: LD_ADDR_VAR 0 6
 707: PUSH
 708: LD_VAR 0 6
 712: PUSH
 713: LD_INT 1
 715: PLUS
 716: ST_TO_ADDR
// end until l = num3 ;
 717: LD_VAR 0 6
 721: PUSH
 722: LD_VAR 0 3
 726: EQUAL
 727: IFFALSE 657
// end ;
 729: LD_VAR 0 5
 733: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
 734: LD_INT 0
 736: PPUSH
 737: PPUSH
 738: PPUSH
 739: PPUSH
 740: PPUSH
 741: PPUSH
// InitHc ;
 742: CALL_OW 19
// hc_class := clas ;
 746: LD_ADDR_OWVAR 28
 750: PUSH
 751: LD_VAR 0 1
 755: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
 756: LD_ADDR_VAR 0 4
 760: PUSH
 761: LD_VAR 0 2
 765: PUSH
 766: LD_INT 1
 768: NEG
 769: PPUSH
 770: LD_INT 1
 772: PPUSH
 773: CALL_OW 12
 777: PLUS
 778: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
 779: LD_ADDR_VAR 0 5
 783: PUSH
 784: LD_VAR 0 2
 788: PUSH
 789: LD_INT 1
 791: NEG
 792: PPUSH
 793: LD_INT 1
 795: PPUSH
 796: CALL_OW 12
 800: PLUS
 801: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
 802: LD_ADDR_VAR 0 6
 806: PUSH
 807: LD_VAR 0 2
 811: PUSH
 812: LD_INT 1
 814: NEG
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: CALL_OW 12
 823: PLUS
 824: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
 825: LD_ADDR_VAR 0 7
 829: PUSH
 830: LD_VAR 0 2
 834: PUSH
 835: LD_INT 1
 837: NEG
 838: PPUSH
 839: LD_INT 1
 841: PPUSH
 842: CALL_OW 12
 846: PLUS
 847: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
 848: LD_VAR 0 1
 852: PUSH
 853: LD_INT 1
 855: EQUAL
 856: PUSH
 857: LD_VAR 0 1
 861: PUSH
 862: LD_INT 9
 864: EQUAL
 865: OR
 866: PUSH
 867: LD_VAR 0 1
 871: PUSH
 872: LD_INT 5
 874: EQUAL
 875: OR
 876: PUSH
 877: LD_VAR 0 1
 881: PUSH
 882: LD_INT 8
 884: EQUAL
 885: OR
 886: IFFALSE 911
// bonus := [ 2 , 0 , 0 , 0 ] ;
 888: LD_ADDR_VAR 0 8
 892: PUSH
 893: LD_INT 2
 895: PUSH
 896: LD_INT 0
 898: PUSH
 899: LD_INT 0
 901: PUSH
 902: LD_INT 0
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: ST_TO_ADDR
// if clas = 2 then
 911: LD_VAR 0 1
 915: PUSH
 916: LD_INT 2
 918: EQUAL
 919: IFFALSE 944
// bonus := [ 0 , 2 , 0 , 0 ] ;
 921: LD_ADDR_VAR 0 8
 925: PUSH
 926: LD_INT 0
 928: PUSH
 929: LD_INT 2
 931: PUSH
 932: LD_INT 0
 934: PUSH
 935: LD_INT 0
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: ST_TO_ADDR
// if clas = 3 then
 944: LD_VAR 0 1
 948: PUSH
 949: LD_INT 3
 951: EQUAL
 952: IFFALSE 977
// bonus := [ 0 , 0 , 2 , 0 ] ;
 954: LD_ADDR_VAR 0 8
 958: PUSH
 959: LD_INT 0
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: LD_INT 2
 967: PUSH
 968: LD_INT 0
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: ST_TO_ADDR
// if clas = 4 then
 977: LD_VAR 0 1
 981: PUSH
 982: LD_INT 4
 984: EQUAL
 985: IFFALSE 1010
// bonus := [ 0 , 0 , 0 , 2 ] ;
 987: LD_ADDR_VAR 0 8
 991: PUSH
 992: LD_INT 0
 994: PUSH
 995: LD_INT 0
 997: PUSH
 998: LD_INT 0
1000: PUSH
1001: LD_INT 2
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
1010: LD_VAR 0 1
1014: PUSH
1015: LD_INT 4
1017: GREATER
1018: PUSH
1019: LD_VAR 0 1
1023: PUSH
1024: LD_INT 9
1026: NONEQUAL
1027: AND
1028: PUSH
1029: LD_VAR 0 1
1033: PUSH
1034: LD_INT 5
1036: NONEQUAL
1037: AND
1038: PUSH
1039: LD_VAR 0 1
1043: PUSH
1044: LD_INT 8
1046: NONEQUAL
1047: AND
1048: IFFALSE 1073
// bonus := [ 0 , 0 , 0 , 0 ] ;
1050: LD_ADDR_VAR 0 8
1054: PUSH
1055: LD_INT 0
1057: PUSH
1058: LD_INT 0
1060: PUSH
1061: LD_INT 0
1063: PUSH
1064: LD_INT 0
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
1073: LD_ADDR_OWVAR 30
1077: PUSH
1078: LD_INT 0
1080: PPUSH
1081: LD_INT 2
1083: PPUSH
1084: CALL_OW 12
1088: PUSH
1089: LD_INT 0
1091: PPUSH
1092: LD_INT 2
1094: PPUSH
1095: CALL_OW 12
1099: PUSH
1100: LD_INT 0
1102: PPUSH
1103: LD_INT 2
1105: PPUSH
1106: CALL_OW 12
1110: PUSH
1111: LD_INT 0
1113: PPUSH
1114: LD_INT 2
1116: PPUSH
1117: CALL_OW 12
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: LIST
1127: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
1128: LD_ADDR_OWVAR 31
1132: PUSH
1133: LD_VAR 0 4
1137: PUSH
1138: LD_VAR 0 8
1142: PUSH
1143: LD_INT 1
1145: ARRAY
1146: PLUS
1147: PUSH
1148: LD_VAR 0 5
1152: PUSH
1153: LD_VAR 0 8
1157: PUSH
1158: LD_INT 2
1160: ARRAY
1161: PLUS
1162: PUSH
1163: LD_VAR 0 6
1167: PUSH
1168: LD_VAR 0 8
1172: PUSH
1173: LD_INT 3
1175: ARRAY
1176: PLUS
1177: PUSH
1178: LD_VAR 0 7
1182: PUSH
1183: LD_VAR 0 8
1187: PUSH
1188: LD_INT 4
1190: ARRAY
1191: PLUS
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: ST_TO_ADDR
// if clas = 3 then
1199: LD_VAR 0 1
1203: PUSH
1204: LD_INT 3
1206: EQUAL
1207: IFFALSE 1219
// hc_sex := sex_male else
1209: LD_ADDR_OWVAR 27
1213: PUSH
1214: LD_INT 1
1216: ST_TO_ADDR
1217: GO 1235
// hc_sex := Rand ( sex_male , sex_female ) ;
1219: LD_ADDR_OWVAR 27
1223: PUSH
1224: LD_INT 1
1226: PPUSH
1227: LD_INT 2
1229: PPUSH
1230: CALL_OW 12
1234: ST_TO_ADDR
// hc_gallery :=  ;
1235: LD_ADDR_OWVAR 33
1239: PUSH
1240: LD_STRING 
1242: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 8 , 12 ) ] ;
1243: LD_ADDR_OWVAR 29
1247: PUSH
1248: LD_INT 8
1250: PPUSH
1251: LD_INT 12
1253: PPUSH
1254: CALL_OW 12
1258: PUSH
1259: LD_INT 8
1261: PPUSH
1262: LD_INT 12
1264: PPUSH
1265: CALL_OW 12
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: ST_TO_ADDR
// hc_name :=  ;
1274: LD_ADDR_OWVAR 26
1278: PUSH
1279: LD_STRING 
1281: ST_TO_ADDR
// result := CreateHuman ;
1282: LD_ADDR_VAR 0 3
1286: PUSH
1287: CALL_OW 44
1291: ST_TO_ADDR
// end ;
1292: LD_VAR 0 3
1296: RET
// export function CreateVehicleWithDriver ( chassis , engine , weapon , area , dir , lvl ) ; var veh ; begin
1297: LD_INT 0
1299: PPUSH
1300: PPUSH
// vc_chassis := chassis ;
1301: LD_ADDR_OWVAR 37
1305: PUSH
1306: LD_VAR 0 1
1310: ST_TO_ADDR
// vc_engine := engine ;
1311: LD_ADDR_OWVAR 39
1315: PUSH
1316: LD_VAR 0 2
1320: ST_TO_ADDR
// vc_weapon := weapon ;
1321: LD_ADDR_OWVAR 40
1325: PUSH
1326: LD_VAR 0 3
1330: ST_TO_ADDR
// vc_control := control_manual ;
1331: LD_ADDR_OWVAR 38
1335: PUSH
1336: LD_INT 1
1338: ST_TO_ADDR
// veh := CreateVehicle ;
1339: LD_ADDR_VAR 0 8
1343: PUSH
1344: CALL_OW 45
1348: ST_TO_ADDR
// SetDir ( veh , dir ) ;
1349: LD_VAR 0 8
1353: PPUSH
1354: LD_VAR 0 5
1358: PPUSH
1359: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
1363: LD_VAR 0 8
1367: PPUSH
1368: LD_VAR 0 4
1372: PPUSH
1373: LD_INT 0
1375: PPUSH
1376: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , lvl ) , veh ) ;
1380: LD_INT 3
1382: PPUSH
1383: LD_VAR 0 6
1387: PPUSH
1388: CALL 734 0 2
1392: PPUSH
1393: LD_VAR 0 8
1397: PPUSH
1398: CALL_OW 52
// end ; end_of_file
1402: LD_VAR 0 7
1406: RET
// export Popov , Commander , Platonov , Kapral ; export depot_rdy , dep_x , dep_y ; export function PrepareRussian ; var i , un , skill , team , p ; begin
1407: LD_INT 0
1409: PPUSH
1410: PPUSH
1411: PPUSH
1412: PPUSH
1413: PPUSH
1414: PPUSH
// depot_rdy := false ;
1415: LD_ADDR_EXP 6
1419: PUSH
1420: LD_INT 0
1422: ST_TO_ADDR
// uc_side := 6 ;
1423: LD_ADDR_OWVAR 20
1427: PUSH
1428: LD_INT 6
1430: ST_TO_ADDR
// uc_nation := 3 ;
1431: LD_ADDR_OWVAR 21
1435: PUSH
1436: LD_INT 3
1438: ST_TO_ADDR
// hc_gallery := ru ;
1439: LD_ADDR_OWVAR 33
1443: PUSH
1444: LD_STRING ru
1446: ST_TO_ADDR
// hc_face_number := 10 ;
1447: LD_ADDR_OWVAR 34
1451: PUSH
1452: LD_INT 10
1454: ST_TO_ADDR
// hc_name := Siergiej I. Popov ;
1455: LD_ADDR_OWVAR 26
1459: PUSH
1460: LD_STRING Siergiej I. Popov
1462: ST_TO_ADDR
// hc_class := 1 ;
1463: LD_ADDR_OWVAR 28
1467: PUSH
1468: LD_INT 1
1470: ST_TO_ADDR
// hc_sex := sex_male ;
1471: LD_ADDR_OWVAR 27
1475: PUSH
1476: LD_INT 1
1478: ST_TO_ADDR
// popov := CreateHuman ;
1479: LD_ADDR_EXP 2
1483: PUSH
1484: CALL_OW 44
1488: ST_TO_ADDR
// hc_gallery := general ;
1489: LD_ADDR_OWVAR 33
1493: PUSH
1494: LD_STRING general
1496: ST_TO_ADDR
// hc_face_number := 1 ;
1497: LD_ADDR_OWVAR 34
1501: PUSH
1502: LD_INT 1
1504: ST_TO_ADDR
// hc_name := Mjr. D. N. Platonow ;
1505: LD_ADDR_OWVAR 26
1509: PUSH
1510: LD_STRING Mjr. D. N. Platonow
1512: ST_TO_ADDR
// platonov := CreateHuman ;
1513: LD_ADDR_EXP 4
1517: PUSH
1518: CALL_OW 44
1522: ST_TO_ADDR
// uc_side := 3 ;
1523: LD_ADDR_OWVAR 20
1527: PUSH
1528: LD_INT 3
1530: ST_TO_ADDR
// ChangeSideFog ( 3 , 6 ) ;
1531: LD_INT 3
1533: PPUSH
1534: LD_INT 6
1536: PPUSH
1537: CALL_OW 343
// skill := [ 6 , 5 , 4 ] [ dif ] ;
1541: LD_ADDR_VAR 0 4
1545: PUSH
1546: LD_INT 6
1548: PUSH
1549: LD_INT 5
1551: PUSH
1552: LD_INT 4
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: LIST
1559: PUSH
1560: LD_EXP 1
1564: ARRAY
1565: ST_TO_ADDR
// team := [ ] ;
1566: LD_ADDR_VAR 0 5
1570: PUSH
1571: EMPTY
1572: ST_TO_ADDR
// hc_importance := 100 ;
1573: LD_ADDR_OWVAR 32
1577: PUSH
1578: LD_INT 100
1580: ST_TO_ADDR
// hc_gallery := gamma ;
1581: LD_ADDR_OWVAR 33
1585: PUSH
1586: LD_STRING gamma
1588: ST_TO_ADDR
// hc_face_number := 1 ;
1589: LD_ADDR_OWVAR 34
1593: PUSH
1594: LD_INT 1
1596: ST_TO_ADDR
// hc_class := 1 ;
1597: LD_ADDR_OWVAR 28
1601: PUSH
1602: LD_INT 1
1604: ST_TO_ADDR
// hc_skills := [ [ 8 , 7 , 6 ] [ dif ] , 5 , 3 , 0 ] ;
1605: LD_ADDR_OWVAR 31
1609: PUSH
1610: LD_INT 8
1612: PUSH
1613: LD_INT 7
1615: PUSH
1616: LD_INT 6
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: LIST
1623: PUSH
1624: LD_EXP 1
1628: ARRAY
1629: PUSH
1630: LD_INT 5
1632: PUSH
1633: LD_INT 3
1635: PUSH
1636: LD_INT 0
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: ST_TO_ADDR
// hc_sex := sex_male ;
1645: LD_ADDR_OWVAR 27
1649: PUSH
1650: LD_INT 1
1652: ST_TO_ADDR
// hc_name := Mjr. Jurij Karakanov ;
1653: LD_ADDR_OWVAR 26
1657: PUSH
1658: LD_STRING Mjr. Jurij Karakanov
1660: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1661: LD_ADDR_OWVAR 29
1665: PUSH
1666: LD_INT 10
1668: PUSH
1669: LD_INT 11
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: ST_TO_ADDR
// commander := CreateHuman ;
1676: LD_ADDR_EXP 3
1680: PUSH
1681: CALL_OW 44
1685: ST_TO_ADDR
// team := team ^ commander ;
1686: LD_ADDR_VAR 0 5
1690: PUSH
1691: LD_VAR 0 5
1695: PUSH
1696: LD_EXP 3
1700: ADD
1701: ST_TO_ADDR
// hc_importance := 0 ;
1702: LD_ADDR_OWVAR 32
1706: PUSH
1707: LD_INT 0
1709: ST_TO_ADDR
// hc_name :=  ;
1710: LD_ADDR_OWVAR 26
1714: PUSH
1715: LD_STRING 
1717: ST_TO_ADDR
// hc_gallery :=  ;
1718: LD_ADDR_OWVAR 33
1722: PUSH
1723: LD_STRING 
1725: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
1726: LD_ADDR_OWVAR 29
1730: PUSH
1731: LD_INT 12
1733: PUSH
1734: LD_INT 10
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: ST_TO_ADDR
// hc_sex := sex_male ;
1741: LD_ADDR_OWVAR 27
1745: PUSH
1746: LD_INT 1
1748: ST_TO_ADDR
// Kapral := CreateHuman ;
1749: LD_ADDR_EXP 5
1753: PUSH
1754: CALL_OW 44
1758: ST_TO_ADDR
// for i = 3 downto dif do
1759: LD_ADDR_VAR 0 2
1763: PUSH
1764: DOUBLE
1765: LD_INT 3
1767: INC
1768: ST_TO_ADDR
1769: LD_EXP 1
1773: PUSH
1774: FOR_DOWNTO
1775: IFFALSE 1881
// begin vc_chassis := ru_medium_tracked ;
1777: LD_ADDR_OWVAR 37
1781: PUSH
1782: LD_INT 22
1784: ST_TO_ADDR
// vc_engine := engine_combustion ;
1785: LD_ADDR_OWVAR 39
1789: PUSH
1790: LD_INT 1
1792: ST_TO_ADDR
// vc_control := control_manual ;
1793: LD_ADDR_OWVAR 38
1797: PUSH
1798: LD_INT 1
1800: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_gun , ru_gun ] [ i ] ;
1801: LD_ADDR_OWVAR 40
1805: PUSH
1806: LD_INT 43
1808: PUSH
1809: LD_INT 44
1811: PUSH
1812: LD_INT 44
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: LIST
1819: PUSH
1820: LD_VAR 0 2
1824: ARRAY
1825: ST_TO_ADDR
// vc_fuel_battery := Rand ( 55 , 77 ) ;
1826: LD_ADDR_OWVAR 41
1830: PUSH
1831: LD_INT 55
1833: PPUSH
1834: LD_INT 77
1836: PPUSH
1837: CALL_OW 12
1841: ST_TO_ADDR
// un := CreateVehicle ;
1842: LD_ADDR_VAR 0 3
1846: PUSH
1847: CALL_OW 45
1851: ST_TO_ADDR
// SetDir ( un , 5 ) ;
1852: LD_VAR 0 3
1856: PPUSH
1857: LD_INT 5
1859: PPUSH
1860: CALL_OW 233
// PlaceUnitArea ( un , rus_spawn , false ) ;
1864: LD_VAR 0 3
1868: PPUSH
1869: LD_INT 1
1871: PPUSH
1872: LD_INT 0
1874: PPUSH
1875: CALL_OW 49
// end ;
1879: GO 1774
1881: POP
1882: POP
// vc_weapon := ru_heavy_machine_gun ;
1883: LD_ADDR_OWVAR 40
1887: PUSH
1888: LD_INT 42
1890: ST_TO_ADDR
// vc_fuel_battery := Rand ( 55 , 77 ) ;
1891: LD_ADDR_OWVAR 41
1895: PUSH
1896: LD_INT 55
1898: PPUSH
1899: LD_INT 77
1901: PPUSH
1902: CALL_OW 12
1906: ST_TO_ADDR
// un := CreateVehicle ;
1907: LD_ADDR_VAR 0 3
1911: PUSH
1912: CALL_OW 45
1916: ST_TO_ADDR
// SetDir ( un , 5 ) ;
1917: LD_VAR 0 3
1921: PPUSH
1922: LD_INT 5
1924: PPUSH
1925: CALL_OW 233
// PlaceUnitArea ( un , rus_spawn , false ) ;
1929: LD_VAR 0 3
1933: PPUSH
1934: LD_INT 1
1936: PPUSH
1937: LD_INT 0
1939: PPUSH
1940: CALL_OW 49
// for p = 1 to 4 do
1944: LD_ADDR_VAR 0 6
1948: PUSH
1949: DOUBLE
1950: LD_INT 1
1952: DEC
1953: ST_TO_ADDR
1954: LD_INT 4
1956: PUSH
1957: FOR_TO
1958: IFFALSE 2025
// for i = 1 to [ 5 , 4 , 3 ] [ dif ] do
1960: LD_ADDR_VAR 0 2
1964: PUSH
1965: DOUBLE
1966: LD_INT 1
1968: DEC
1969: ST_TO_ADDR
1970: LD_INT 5
1972: PUSH
1973: LD_INT 4
1975: PUSH
1976: LD_INT 3
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: LIST
1983: PUSH
1984: LD_EXP 1
1988: ARRAY
1989: PUSH
1990: FOR_TO
1991: IFFALSE 2021
// team := team ^ CreateHumanWithClass ( p , skill ) ;
1993: LD_ADDR_VAR 0 5
1997: PUSH
1998: LD_VAR 0 5
2002: PUSH
2003: LD_VAR 0 6
2007: PPUSH
2008: LD_VAR 0 4
2012: PPUSH
2013: CALL 734 0 2
2017: ADD
2018: ST_TO_ADDR
2019: GO 1990
2021: POP
2022: POP
2023: GO 1957
2025: POP
2026: POP
// for i = 1 to team do
2027: LD_ADDR_VAR 0 2
2031: PUSH
2032: DOUBLE
2033: LD_INT 1
2035: DEC
2036: ST_TO_ADDR
2037: LD_VAR 0 5
2041: PUSH
2042: FOR_TO
2043: IFFALSE 2161
// if GetClass ( team [ i ] ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_empty ] ] ) then
2045: LD_VAR 0 5
2049: PUSH
2050: LD_VAR 0 2
2054: ARRAY
2055: PPUSH
2056: CALL_OW 257
2060: PUSH
2061: LD_INT 3
2063: EQUAL
2064: PUSH
2065: LD_INT 22
2067: PUSH
2068: LD_INT 3
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 58
2077: PUSH
2078: EMPTY
2079: LIST
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PPUSH
2085: CALL_OW 69
2089: AND
2090: IFFALSE 2138
// PlaceHumanInUnit ( team [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_empty ] ] ) [ 1 ] ) else
2092: LD_VAR 0 5
2096: PUSH
2097: LD_VAR 0 2
2101: ARRAY
2102: PPUSH
2103: LD_INT 22
2105: PUSH
2106: LD_INT 3
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: PUSH
2113: LD_INT 58
2115: PUSH
2116: EMPTY
2117: LIST
2118: PUSH
2119: EMPTY
2120: LIST
2121: LIST
2122: PPUSH
2123: CALL_OW 69
2127: PUSH
2128: LD_INT 1
2130: ARRAY
2131: PPUSH
2132: CALL_OW 52
2136: GO 2159
// PlaceUnitArea ( team [ i ] , rus_spawn , false ) ;
2138: LD_VAR 0 5
2142: PUSH
2143: LD_VAR 0 2
2147: ARRAY
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: LD_INT 0
2154: PPUSH
2155: CALL_OW 49
2159: GO 2042
2161: POP
2162: POP
// end ;
2163: LD_VAR 0 1
2167: RET
// every 0 0$10 trigger depot_rdy do var i , un , l , driver ;
2168: LD_EXP 6
2172: IFFALSE 2542
2174: GO 2176
2176: DISABLE
2177: LD_INT 0
2179: PPUSH
2180: PPUSH
2181: PPUSH
2182: PPUSH
// begin Wait ( 0 0$07 ) ;
2183: LD_INT 245
2185: PPUSH
2186: CALL_OW 67
// l := 0 ;
2190: LD_ADDR_VAR 0 3
2194: PUSH
2195: LD_INT 0
2197: ST_TO_ADDR
// repeat begin uc_side := 6 ;
2198: LD_ADDR_OWVAR 20
2202: PUSH
2203: LD_INT 6
2205: ST_TO_ADDR
// uc_nation := 3 ;
2206: LD_ADDR_OWVAR 21
2210: PUSH
2211: LD_INT 3
2213: ST_TO_ADDR
// CreateVehicleWithDriver ( ru_medium_tracked , engine_combustion , ru_cargo_bay , rus_cr_spawn , 5 , Rand ( 3 , 6 ) ) ;
2214: LD_INT 22
2216: PPUSH
2217: LD_INT 1
2219: PPUSH
2220: LD_INT 51
2222: PPUSH
2223: LD_INT 5
2225: PPUSH
2226: LD_INT 5
2228: PPUSH
2229: LD_INT 3
2231: PPUSH
2232: LD_INT 6
2234: PPUSH
2235: CALL_OW 12
2239: PPUSH
2240: CALL 1297 0 6
// un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
2244: LD_ADDR_VAR 0 2
2248: PUSH
2249: LD_INT 22
2251: PUSH
2252: LD_INT 6
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 34
2261: PUSH
2262: LD_INT 51
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PPUSH
2273: CALL_OW 69
2277: PUSH
2278: LD_INT 1
2280: ARRAY
2281: ST_TO_ADDR
// SetCargo ( un , mat_cans , 100 ) ;
2282: LD_VAR 0 2
2286: PPUSH
2287: LD_INT 1
2289: PPUSH
2290: LD_INT 100
2292: PPUSH
2293: CALL_OW 290
// ComMoveXY ( un , dep_x + 2 , dep_y ) ;
2297: LD_VAR 0 2
2301: PPUSH
2302: LD_EXP 7
2306: PUSH
2307: LD_INT 2
2309: PLUS
2310: PPUSH
2311: LD_EXP 8
2315: PPUSH
2316: CALL_OW 111
// AddComUnload ( un ) ;
2320: LD_VAR 0 2
2324: PPUSH
2325: CALL_OW 219
// if ( l = 0 ) then
2329: LD_VAR 0 3
2333: PUSH
2334: LD_INT 0
2336: EQUAL
2337: IFFALSE 2373
// begin Wait ( 0 0$03 ) ;
2339: LD_INT 105
2341: PPUSH
2342: CALL_OW 67
// driver := IsDrivenBy ( un ) ;
2346: LD_ADDR_VAR 0 4
2350: PUSH
2351: LD_VAR 0 2
2355: PPUSH
2356: CALL_OW 311
2360: ST_TO_ADDR
// Say ( driver , Dtran ) ;
2361: LD_VAR 0 4
2365: PPUSH
2366: LD_STRING Dtran
2368: PPUSH
2369: CALL_OW 88
// end ; if ( l = [ 7 , 6 , 5 ] [ dif ] - 1 ) then
2373: LD_VAR 0 3
2377: PUSH
2378: LD_INT 7
2380: PUSH
2381: LD_INT 6
2383: PUSH
2384: LD_INT 5
2386: PUSH
2387: EMPTY
2388: LIST
2389: LIST
2390: LIST
2391: PUSH
2392: LD_EXP 1
2396: ARRAY
2397: PUSH
2398: LD_INT 1
2400: MINUS
2401: EQUAL
2402: IFFALSE 2438
// begin Wait ( 0 0$03 ) ;
2404: LD_INT 105
2406: PPUSH
2407: CALL_OW 67
// driver := IsDrivenBy ( un ) ;
2411: LD_ADDR_VAR 0 4
2415: PUSH
2416: LD_VAR 0 2
2420: PPUSH
2421: CALL_OW 311
2425: ST_TO_ADDR
// Say ( driver , Dtrans ) ;
2426: LD_VAR 0 4
2430: PPUSH
2431: LD_STRING Dtrans
2433: PPUSH
2434: CALL_OW 88
// end ; while ( not IsInArea ( un , rus_exit ) ) do
2438: LD_VAR 0 2
2442: PPUSH
2443: LD_INT 6
2445: PPUSH
2446: CALL_OW 308
2450: NOT
2451: IFFALSE 2477
// begin Wait ( 0 0$01 ) ;
2453: LD_INT 35
2455: PPUSH
2456: CALL_OW 67
// AddComMoveXY ( un , 69 , 97 ) ;
2460: LD_VAR 0 2
2464: PPUSH
2465: LD_INT 69
2467: PPUSH
2468: LD_INT 97
2470: PPUSH
2471: CALL_OW 171
// end ;
2475: GO 2438
// RemoveUnit ( un ) ;
2477: LD_VAR 0 2
2481: PPUSH
2482: CALL_OW 64
// l = l + 1 ;
2486: LD_ADDR_VAR 0 3
2490: PUSH
2491: LD_VAR 0 3
2495: PUSH
2496: LD_INT 1
2498: PLUS
2499: ST_TO_ADDR
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
2500: LD_INT 1155
2502: PPUSH
2503: LD_INT 5355
2505: PPUSH
2506: CALL_OW 12
2510: PPUSH
2511: CALL_OW 67
// end until l = [ 7 , 6 , 5 ] [ dif ] ;
2515: LD_VAR 0 3
2519: PUSH
2520: LD_INT 7
2522: PUSH
2523: LD_INT 6
2525: PUSH
2526: LD_INT 5
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: LIST
2533: PUSH
2534: LD_EXP 1
2538: ARRAY
2539: EQUAL
2540: IFFALSE 2198
// end ; end_of_file
2542: PPOPN 4
2544: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_bazooka and event_rocket = false then
2545: LD_VAR 0 1
2549: PUSH
2550: LD_INT 44
2552: EQUAL
2553: PUSH
2554: LD_EXP 20
2558: PUSH
2559: LD_INT 0
2561: EQUAL
2562: AND
2563: IFFALSE 2709
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) > 0 then
2565: LD_INT 22
2567: PUSH
2568: LD_INT 3
2570: PUSH
2571: EMPTY
2572: LIST
2573: LIST
2574: PUSH
2575: LD_INT 25
2577: PUSH
2578: LD_INT 4
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: PPUSH
2589: CALL_OW 69
2593: PUSH
2594: LD_INT 0
2596: GREATER
2597: IFFALSE 2709
// begin event_rocket := true ;
2599: LD_ADDR_EXP 20
2603: PUSH
2604: LD_INT 1
2606: ST_TO_ADDR
// if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) > 0 then
2607: LD_INT 22
2609: PUSH
2610: LD_INT 3
2612: PUSH
2613: EMPTY
2614: LIST
2615: LIST
2616: PUSH
2617: LD_INT 25
2619: PUSH
2620: LD_INT 4
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: PUSH
2627: LD_INT 26
2629: PUSH
2630: LD_INT 1
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: LIST
2641: PUSH
2642: EMPTY
2643: LIST
2644: PPUSH
2645: CALL_OW 69
2649: PUSH
2650: LD_INT 0
2652: GREATER
2653: IFFALSE 2709
// Say ( FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) [ 1 ] , Dsci2 ) ;
2655: LD_INT 22
2657: PUSH
2658: LD_INT 3
2660: PUSH
2661: EMPTY
2662: LIST
2663: LIST
2664: PUSH
2665: LD_INT 25
2667: PUSH
2668: LD_INT 4
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: PUSH
2675: LD_INT 26
2677: PUSH
2678: LD_INT 1
2680: PUSH
2681: EMPTY
2682: LIST
2683: LIST
2684: PUSH
2685: EMPTY
2686: LIST
2687: LIST
2688: LIST
2689: PUSH
2690: EMPTY
2691: LIST
2692: PPUSH
2693: CALL_OW 69
2697: PUSH
2698: LD_INT 1
2700: ARRAY
2701: PPUSH
2702: LD_STRING Dsci2
2704: PPUSH
2705: CALL_OW 88
// end ; end ;
2709: PPOPN 2
2711: END
// on VehicleConstructed ( un , fac ) do begin if GetSide ( un ) = 3 and GetControl ( un ) = control_computer then
2712: LD_VAR 0 1
2716: PPUSH
2717: CALL_OW 255
2721: PUSH
2722: LD_INT 3
2724: EQUAL
2725: PUSH
2726: LD_VAR 0 1
2730: PPUSH
2731: CALL_OW 263
2735: PUSH
2736: LD_INT 3
2738: EQUAL
2739: AND
2740: IFFALSE 2750
// comp_tested := true ;
2742: LD_ADDR_EXP 22
2746: PUSH
2747: LD_INT 1
2749: ST_TO_ADDR
// end ;
2750: PPOPN 2
2752: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
2753: LD_VAR 0 1
2757: PUSH
2758: LD_INT 22
2760: PUSH
2761: LD_INT 1
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: PUSH
2768: LD_INT 21
2770: PUSH
2771: LD_INT 3
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: PPUSH
2782: CALL_OW 69
2786: IN
2787: IFFALSE 2865
// if attacked = false and sikorski_ar = false then
2789: LD_EXP 15
2793: PUSH
2794: LD_INT 0
2796: EQUAL
2797: PUSH
2798: LD_EXP 12
2802: PUSH
2803: LD_INT 0
2805: EQUAL
2806: AND
2807: IFFALSE 2865
// begin attacked := true ;
2809: LD_ADDR_EXP 15
2813: PUSH
2814: LD_INT 1
2816: ST_TO_ADDR
// if IsInUnit ( donald ) then
2817: LD_EXP 13
2821: PPUSH
2822: CALL_OW 310
2826: IFFALSE 2842
// SayRadio ( donald , DGammaF ) else
2828: LD_EXP 13
2832: PPUSH
2833: LD_STRING DGammaF
2835: PPUSH
2836: CALL_OW 94
2840: GO 2865
// if IsInUnit ( van ) then
2842: LD_EXP 14
2846: PPUSH
2847: CALL_OW 310
2851: IFFALSE 2865
// SayRadio ( van , DGammaM ) ;
2853: LD_EXP 14
2857: PPUSH
2858: LD_STRING DGammaM
2860: PPUSH
2861: CALL_OW 94
// end ; if un in FilterAllUnits ( [ f_control , control_remote ] ) then
2865: LD_VAR 0 1
2869: PUSH
2870: LD_INT 33
2872: PUSH
2873: LD_INT 2
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PPUSH
2880: CALL_OW 69
2884: IN
2885: IFFALSE 2896
// ComUnlink ( un ) ;
2887: LD_VAR 0 1
2891: PPUSH
2892: CALL_OW 136
// end ;
2896: PPOPN 1
2898: END
// on ApemanTamed ( ape , sci ) do begin if GetSex ( sci ) = sex_male then
2899: LD_VAR 0 2
2903: PPUSH
2904: CALL_OW 258
2908: PUSH
2909: LD_INT 1
2911: EQUAL
2912: IFFALSE 2926
// Say ( sci , Dsci3 ) ;
2914: LD_VAR 0 2
2918: PPUSH
2919: LD_STRING Dsci3
2921: PPUSH
2922: CALL_OW 88
// end ;
2926: PPOPN 2
2928: END
// on BuildingComplete ( b ) do var i ;
2929: LD_INT 0
2931: PPUSH
// begin if GetBType ( b ) = b_depot and GetSide ( b ) = 3 and depot_rdy = false then
2932: LD_VAR 0 1
2936: PPUSH
2937: CALL_OW 266
2941: PUSH
2942: LD_INT 0
2944: EQUAL
2945: PUSH
2946: LD_VAR 0 1
2950: PPUSH
2951: CALL_OW 255
2955: PUSH
2956: LD_INT 3
2958: EQUAL
2959: AND
2960: PUSH
2961: LD_EXP 6
2965: PUSH
2966: LD_INT 0
2968: EQUAL
2969: AND
2970: IFFALSE 3034
// begin SetBName ( b , kalinin ) ;
2972: LD_VAR 0 1
2976: PPUSH
2977: LD_STRING kalinin
2979: PPUSH
2980: CALL_OW 500
// dep_x := GetX ( b ) ;
2984: LD_ADDR_EXP 7
2988: PUSH
2989: LD_VAR 0 1
2993: PPUSH
2994: CALL_OW 250
2998: ST_TO_ADDR
// dep_y := GetY ( b ) ;
2999: LD_ADDR_EXP 8
3003: PUSH
3004: LD_VAR 0 1
3008: PPUSH
3009: CALL_OW 251
3013: ST_TO_ADDR
// depot_rdy := true ;
3014: LD_ADDR_EXP 6
3018: PUSH
3019: LD_INT 1
3021: ST_TO_ADDR
// SayRadio ( popov , Dpop3 ) ;
3022: LD_EXP 2
3026: PPUSH
3027: LD_STRING Dpop3
3029: PPUSH
3030: CALL_OW 94
// end ; if GetBType ( b ) = b_lab and GetSide ( b ) = 3 and event_comp = false then
3034: LD_VAR 0 1
3038: PPUSH
3039: CALL_OW 266
3043: PUSH
3044: LD_INT 6
3046: EQUAL
3047: PUSH
3048: LD_VAR 0 1
3052: PPUSH
3053: CALL_OW 255
3057: PUSH
3058: LD_INT 3
3060: EQUAL
3061: AND
3062: PUSH
3063: LD_EXP 21
3067: PUSH
3068: LD_INT 0
3070: EQUAL
3071: AND
3072: IFFALSE 3167
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) > 0 then
3074: LD_INT 22
3076: PUSH
3077: LD_INT 3
3079: PUSH
3080: EMPTY
3081: LIST
3082: LIST
3083: PUSH
3084: LD_INT 25
3086: PUSH
3087: LD_INT 4
3089: PUSH
3090: EMPTY
3091: LIST
3092: LIST
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: PPUSH
3098: CALL_OW 69
3102: PUSH
3103: LD_INT 0
3105: GREATER
3106: IFFALSE 3167
// begin event_comp := true ;
3108: LD_ADDR_EXP 21
3112: PUSH
3113: LD_INT 1
3115: ST_TO_ADDR
// Say ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , Dsci1 ) ;
3116: LD_INT 22
3118: PUSH
3119: LD_INT 3
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: LD_INT 25
3128: PUSH
3129: LD_INT 4
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: LD_INT 26
3138: PUSH
3139: LD_INT 1
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: LIST
3150: PPUSH
3151: CALL_OW 69
3155: PUSH
3156: LD_INT 1
3158: ARRAY
3159: PPUSH
3160: LD_STRING Dsci1
3162: PPUSH
3163: CALL_OW 88
// end ; if GetBType ( b ) = b_bunker and GetSide ( b ) = 1 then
3167: LD_VAR 0 1
3171: PPUSH
3172: CALL_OW 266
3176: PUSH
3177: LD_INT 32
3179: EQUAL
3180: PUSH
3181: LD_VAR 0 1
3185: PPUSH
3186: CALL_OW 255
3190: PUSH
3191: LD_INT 1
3193: EQUAL
3194: AND
3195: IFFALSE 3260
// begin RaiseSailEvent ( 6 ) ;
3197: LD_INT 6
3199: PPUSH
3200: CALL_OW 427
// AddComPlaceWeapon ( b , gamma_towers [ 4 ] ) ;
3204: LD_VAR 0 1
3208: PPUSH
3209: LD_EXP 18
3213: PUSH
3214: LD_INT 4
3216: ARRAY
3217: PPUSH
3218: CALL_OW 208
// for i = 1 to 4 do
3222: LD_ADDR_VAR 0 2
3226: PUSH
3227: DOUBLE
3228: LD_INT 1
3230: DEC
3231: ST_TO_ADDR
3232: LD_INT 4
3234: PUSH
3235: FOR_TO
3236: IFFALSE 3258
// gamma_towers := Delete ( gamma_towers , 1 ) ;
3238: LD_ADDR_EXP 18
3242: PUSH
3243: LD_EXP 18
3247: PPUSH
3248: LD_INT 1
3250: PPUSH
3251: CALL_OW 3
3255: ST_TO_ADDR
3256: GO 3235
3258: POP
3259: POP
// end ; end ;
3260: PPOPN 2
3262: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3263: LD_VAR 0 1
3267: PPUSH
3268: CALL 22787 0 1
// if un in Patrol then
3272: LD_VAR 0 1
3276: PUSH
3277: LD_EXP 17
3281: IN
3282: IFFALSE 3300
// Patrol := Patrol diff un ;
3284: LD_ADDR_EXP 17
3288: PUSH
3289: LD_EXP 17
3293: PUSH
3294: LD_VAR 0 1
3298: DIFF
3299: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
3300: LD_VAR 0 1
3304: PUSH
3305: LD_INT 22
3307: PUSH
3308: LD_INT 1
3310: PUSH
3311: EMPTY
3312: LIST
3313: LIST
3314: PUSH
3315: LD_INT 30
3317: PUSH
3318: LD_INT 32
3320: PUSH
3321: EMPTY
3322: LIST
3323: LIST
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: PPUSH
3329: CALL_OW 69
3333: IN
3334: IFFALSE 3420
// begin gamma_towers := gamma_towers ^ GetX ( un ) ;
3336: LD_ADDR_EXP 18
3340: PUSH
3341: LD_EXP 18
3345: PUSH
3346: LD_VAR 0 1
3350: PPUSH
3351: CALL_OW 250
3355: ADD
3356: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetY ( un ) ;
3357: LD_ADDR_EXP 18
3361: PUSH
3362: LD_EXP 18
3366: PUSH
3367: LD_VAR 0 1
3371: PPUSH
3372: CALL_OW 251
3376: ADD
3377: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetDir ( un ) ;
3378: LD_ADDR_EXP 18
3382: PUSH
3383: LD_EXP 18
3387: PUSH
3388: LD_VAR 0 1
3392: PPUSH
3393: CALL_OW 254
3397: ADD
3398: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetBWeapon ( un ) ;
3399: LD_ADDR_EXP 18
3403: PUSH
3404: LD_EXP 18
3408: PUSH
3409: LD_VAR 0 1
3413: PPUSH
3414: CALL_OW 269
3418: ADD
3419: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) then
3420: LD_VAR 0 1
3424: PUSH
3425: LD_INT 33
3427: PUSH
3428: LD_INT 2
3430: PUSH
3431: EMPTY
3432: LIST
3433: LIST
3434: PUSH
3435: LD_INT 3
3437: PUSH
3438: LD_INT 34
3440: PUSH
3441: LD_INT 13
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: PUSH
3448: EMPTY
3449: LIST
3450: LIST
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: PPUSH
3456: CALL_OW 69
3460: IN
3461: IFFALSE 3477
// new_veh := new_veh + 1 ;
3463: LD_ADDR_EXP 19
3467: PUSH
3468: LD_EXP 19
3472: PUSH
3473: LD_INT 1
3475: PLUS
3476: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_weapon , us_crane ] ) then
3477: LD_VAR 0 1
3481: PUSH
3482: LD_INT 34
3484: PUSH
3485: LD_INT 13
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PPUSH
3492: CALL_OW 69
3496: IN
3497: IFFALSE 3518
// AddComConstruct ( am_fac , us_medium_tracked , engine_solar , control_remote , us_crane ) ;
3499: LD_INT 26
3501: PPUSH
3502: LD_INT 3
3504: PPUSH
3505: LD_INT 2
3507: PPUSH
3508: LD_INT 2
3510: PPUSH
3511: LD_INT 13
3513: PPUSH
3514: CALL_OW 185
// if un = am_dep then
3518: LD_VAR 0 1
3522: PUSH
3523: LD_INT 25
3525: EQUAL
3526: IFFALSE 3694
// begin SayRadio ( Platonov , DPlat ) ;
3528: LD_EXP 4
3532: PPUSH
3533: LD_STRING DPlat
3535: PPUSH
3536: CALL_OW 94
// if timer <= 30 30$00 then
3540: LD_EXP 24
3544: PUSH
3545: LD_INT 63000
3547: LESSEQUAL
3548: IFFALSE 3562
// AddMedal ( gamma_med3 , 1 ) else
3550: LD_STRING gamma_med3
3552: PPUSH
3553: LD_INT 1
3555: PPUSH
3556: CALL_OW 101
3560: GO 3612
// if timer <= [ 50 50$00 , 42 42$00 , 35 35$00 ] [ dif ] then
3562: LD_EXP 24
3566: PUSH
3567: LD_INT 105000
3569: PUSH
3570: LD_INT 88200
3572: PUSH
3573: LD_INT 73500
3575: PUSH
3576: EMPTY
3577: LIST
3578: LIST
3579: LIST
3580: PUSH
3581: LD_EXP 1
3585: ARRAY
3586: LESSEQUAL
3587: IFFALSE 3601
// AddMedal ( gamma_med3 , 2 ) else
3589: LD_STRING gamma_med3
3591: PPUSH
3592: LD_INT 2
3594: PPUSH
3595: CALL_OW 101
3599: GO 3612
// AddMedal ( gamma_med3 , - 1 ) ;
3601: LD_STRING gamma_med3
3603: PPUSH
3604: LD_INT 1
3606: NEG
3607: PPUSH
3608: CALL_OW 101
// if not comp_tested then
3612: LD_EXP 22
3616: NOT
3617: IFFALSE 3632
// AddMedal ( gamma_med2 , - 1 ) else
3619: LD_STRING gamma_med2
3621: PPUSH
3622: LD_INT 1
3624: NEG
3625: PPUSH
3626: CALL_OW 101
3630: GO 3642
// AddMedal ( gamma_med2 , 1 ) ;
3632: LD_STRING gamma_med2
3634: PPUSH
3635: LD_INT 1
3637: PPUSH
3638: CALL_OW 101
// if IsDead ( sikorski ) and not sikorski_run then
3642: LD_EXP 9
3646: PPUSH
3647: CALL_OW 301
3651: PUSH
3652: LD_EXP 23
3656: NOT
3657: AND
3658: IFFALSE 3672
// AddMedal ( gamma_med1 , 1 ) else
3660: LD_STRING gamma_med1
3662: PPUSH
3663: LD_INT 1
3665: PPUSH
3666: CALL_OW 101
3670: GO 3683
// AddMedal ( gamma_med1 , - 1 ) ;
3672: LD_STRING gamma_med1
3674: PPUSH
3675: LD_INT 1
3677: NEG
3678: PPUSH
3679: CALL_OW 101
// GiveMedals ( GAMMA_MEDALS ) ;
3683: LD_STRING GAMMA_MEDALS
3685: PPUSH
3686: CALL_OW 102
// YouWin ;
3690: CALL_OW 103
// end ; if un = commander then
3694: LD_VAR 0 1
3698: PUSH
3699: LD_EXP 3
3703: EQUAL
3704: IFFALSE 3713
// YouLost ( comml ) ;
3706: LD_STRING comml
3708: PPUSH
3709: CALL_OW 104
// if un = sikorski then
3713: LD_VAR 0 1
3717: PUSH
3718: LD_EXP 9
3722: EQUAL
3723: IFFALSE 3735
// AddMedal ( gamma_med1 , 1 ) ;
3725: LD_STRING gamma_med1
3727: PPUSH
3728: LD_INT 1
3730: PPUSH
3731: CALL_OW 101
// end ;
3735: PPOPN 1
3737: END
// on SailEvent ( event ) do var i , un , filter , doc , bac , place , engs , crane , b ;
3738: LD_INT 0
3740: PPUSH
3741: PPUSH
3742: PPUSH
3743: PPUSH
3744: PPUSH
3745: PPUSH
3746: PPUSH
3747: PPUSH
3748: PPUSH
// begin if event = 1 then
3749: LD_VAR 0 1
3753: PUSH
3754: LD_INT 1
3756: EQUAL
3757: IFFALSE 4054
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3759: LD_ADDR_VAR 0 4
3763: PUSH
3764: LD_INT 22
3766: PUSH
3767: LD_INT 1
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: PUSH
3774: LD_INT 21
3776: PUSH
3777: LD_INT 3
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PUSH
3784: LD_INT 3
3786: PUSH
3787: LD_INT 24
3789: PUSH
3790: LD_INT 1000
3792: PUSH
3793: EMPTY
3794: LIST
3795: LIST
3796: PUSH
3797: EMPTY
3798: LIST
3799: LIST
3800: PUSH
3801: EMPTY
3802: LIST
3803: LIST
3804: LIST
3805: PPUSH
3806: CALL_OW 69
3810: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ] ) ;
3811: LD_ADDR_VAR 0 8
3815: PUSH
3816: LD_INT 22
3818: PUSH
3819: LD_INT 1
3821: PUSH
3822: EMPTY
3823: LIST
3824: LIST
3825: PUSH
3826: LD_INT 25
3828: PUSH
3829: LD_INT 2
3831: PUSH
3832: EMPTY
3833: LIST
3834: LIST
3835: PUSH
3836: LD_INT 24
3838: PUSH
3839: LD_INT 1000
3841: PUSH
3842: EMPTY
3843: LIST
3844: LIST
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: LIST
3850: PUSH
3851: EMPTY
3852: LIST
3853: PPUSH
3854: CALL_OW 69
3858: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) ;
3859: LD_ADDR_VAR 0 9
3863: PUSH
3864: LD_INT 22
3866: PUSH
3867: LD_INT 1
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: PUSH
3874: LD_INT 34
3876: PUSH
3877: LD_INT 13
3879: PUSH
3880: EMPTY
3881: LIST
3882: LIST
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: PPUSH
3888: CALL_OW 69
3892: ST_TO_ADDR
// if engs > 0 then
3893: LD_VAR 0 8
3897: PUSH
3898: LD_INT 0
3900: GREATER
3901: IFFALSE 4006
// for i = 1 to engs do
3903: LD_ADDR_VAR 0 2
3907: PUSH
3908: DOUBLE
3909: LD_INT 1
3911: DEC
3912: ST_TO_ADDR
3913: LD_VAR 0 8
3917: PUSH
3918: FOR_TO
3919: IFFALSE 4004
// begin if IsInUnit ( engs [ i ] ) then
3921: LD_VAR 0 8
3925: PUSH
3926: LD_VAR 0 2
3930: ARRAY
3931: PPUSH
3932: CALL_OW 310
3936: IFFALSE 3953
// ComExitBuilding ( engs [ i ] ) ;
3938: LD_VAR 0 8
3942: PUSH
3943: LD_VAR 0 2
3947: ARRAY
3948: PPUSH
3949: CALL_OW 122
// Wait ( 0 0$0.2 ) ;
3953: LD_INT 7
3955: PPUSH
3956: CALL_OW 67
// if not HasTask ( engs [ i ] ) then
3960: LD_VAR 0 8
3964: PUSH
3965: LD_VAR 0 2
3969: ARRAY
3970: PPUSH
3971: CALL_OW 314
3975: NOT
3976: IFFALSE 4002
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
3978: LD_VAR 0 8
3982: PUSH
3983: LD_VAR 0 2
3987: ARRAY
3988: PPUSH
3989: LD_VAR 0 4
3993: PUSH
3994: LD_INT 1
3996: ARRAY
3997: PPUSH
3998: CALL_OW 130
// end ;
4002: GO 3918
4004: POP
4005: POP
// if crane > 0 then
4006: LD_VAR 0 9
4010: PUSH
4011: LD_INT 0
4013: GREATER
4014: IFFALSE 4054
// if not HasTask ( crane [ 1 ] ) then
4016: LD_VAR 0 9
4020: PUSH
4021: LD_INT 1
4023: ARRAY
4024: PPUSH
4025: CALL_OW 314
4029: NOT
4030: IFFALSE 4054
// ComRepairBuilding ( crane [ 1 ] , filter [ 1 ] ) ;
4032: LD_VAR 0 9
4036: PUSH
4037: LD_INT 1
4039: ARRAY
4040: PPUSH
4041: LD_VAR 0 4
4045: PUSH
4046: LD_INT 1
4048: ARRAY
4049: PPUSH
4050: CALL_OW 130
// end ; if event = 2 then
4054: LD_VAR 0 1
4058: PUSH
4059: LD_INT 2
4061: EQUAL
4062: IFFALSE 4184
// begin engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
4064: LD_ADDR_VAR 0 8
4068: PUSH
4069: LD_INT 22
4071: PUSH
4072: LD_INT 1
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: PUSH
4079: LD_INT 25
4081: PUSH
4082: LD_INT 2
4084: PUSH
4085: EMPTY
4086: LIST
4087: LIST
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: PPUSH
4093: CALL_OW 69
4097: ST_TO_ADDR
// if engs > 0 then
4098: LD_VAR 0 8
4102: PUSH
4103: LD_INT 0
4105: GREATER
4106: IFFALSE 4184
// for i = 1 to engs do
4108: LD_ADDR_VAR 0 2
4112: PUSH
4113: DOUBLE
4114: LD_INT 1
4116: DEC
4117: ST_TO_ADDR
4118: LD_VAR 0 8
4122: PUSH
4123: FOR_TO
4124: IFFALSE 4182
// if not HasTask ( engs [ i ] ) and not IsInUnit ( engs [ i ] ) then
4126: LD_VAR 0 8
4130: PUSH
4131: LD_VAR 0 2
4135: ARRAY
4136: PPUSH
4137: CALL_OW 314
4141: NOT
4142: PUSH
4143: LD_VAR 0 8
4147: PUSH
4148: LD_VAR 0 2
4152: ARRAY
4153: PPUSH
4154: CALL_OW 310
4158: NOT
4159: AND
4160: IFFALSE 4180
// ComEnterUnit ( engs [ i ] , am_dep ) ;
4162: LD_VAR 0 8
4166: PUSH
4167: LD_VAR 0 2
4171: ARRAY
4172: PPUSH
4173: LD_INT 25
4175: PPUSH
4176: CALL_OW 120
4180: GO 4123
4182: POP
4183: POP
// end ; if event = 3 then
4184: LD_VAR 0 1
4188: PUSH
4189: LD_INT 3
4191: EQUAL
4192: IFFALSE 4556
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_class , 4 ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
4194: LD_ADDR_VAR 0 4
4198: PUSH
4199: LD_INT 22
4201: PUSH
4202: LD_INT 1
4204: PUSH
4205: EMPTY
4206: LIST
4207: LIST
4208: PUSH
4209: LD_INT 21
4211: PUSH
4212: LD_INT 1
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: PUSH
4219: LD_INT 3
4221: PUSH
4222: LD_INT 25
4224: PUSH
4225: LD_INT 4
4227: PUSH
4228: EMPTY
4229: LIST
4230: LIST
4231: PUSH
4232: EMPTY
4233: LIST
4234: LIST
4235: PUSH
4236: LD_INT 3
4238: PUSH
4239: LD_INT 24
4241: PUSH
4242: LD_INT 800
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: PUSH
4249: EMPTY
4250: LIST
4251: LIST
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: LIST
4257: LIST
4258: PUSH
4259: EMPTY
4260: LIST
4261: PPUSH
4262: CALL_OW 69
4266: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
4267: LD_ADDR_VAR 0 5
4271: PUSH
4272: LD_INT 22
4274: PUSH
4275: LD_INT 1
4277: PUSH
4278: EMPTY
4279: LIST
4280: LIST
4281: PUSH
4282: LD_INT 25
4284: PUSH
4285: LD_INT 4
4287: PUSH
4288: EMPTY
4289: LIST
4290: LIST
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: PPUSH
4296: CALL_OW 69
4300: ST_TO_ADDR
// if filter > 0 then
4301: LD_VAR 0 4
4305: PUSH
4306: LD_INT 0
4308: GREATER
4309: IFFALSE 4498
// begin for i = 1 to doc do
4311: LD_ADDR_VAR 0 2
4315: PUSH
4316: DOUBLE
4317: LD_INT 1
4319: DEC
4320: ST_TO_ADDR
4321: LD_VAR 0 5
4325: PUSH
4326: FOR_TO
4327: IFFALSE 4427
// begin if IsInUnit ( doc [ i ] ) then
4329: LD_VAR 0 5
4333: PUSH
4334: LD_VAR 0 2
4338: ARRAY
4339: PPUSH
4340: CALL_OW 310
4344: IFFALSE 4361
// ComExitBuilding ( doc [ i ] ) ;
4346: LD_VAR 0 5
4350: PUSH
4351: LD_VAR 0 2
4355: ARRAY
4356: PPUSH
4357: CALL_OW 122
// if GetDistUnits ( filter [ 1 ] , am_lab ) < 10 and not HasTask ( doc [ i ] ) then
4361: LD_VAR 0 4
4365: PUSH
4366: LD_INT 1
4368: ARRAY
4369: PPUSH
4370: LD_INT 46
4372: PPUSH
4373: CALL_OW 296
4377: PUSH
4378: LD_INT 10
4380: LESS
4381: PUSH
4382: LD_VAR 0 5
4386: PUSH
4387: LD_VAR 0 2
4391: ARRAY
4392: PPUSH
4393: CALL_OW 314
4397: NOT
4398: AND
4399: IFFALSE 4425
// ComHeal ( doc [ i ] , filter [ 1 ] ) ;
4401: LD_VAR 0 5
4405: PUSH
4406: LD_VAR 0 2
4410: ARRAY
4411: PPUSH
4412: LD_VAR 0 4
4416: PUSH
4417: LD_INT 1
4419: ARRAY
4420: PPUSH
4421: CALL_OW 128
// end ;
4425: GO 4326
4427: POP
4428: POP
// for i = 1 to filter do
4429: LD_ADDR_VAR 0 2
4433: PUSH
4434: DOUBLE
4435: LD_INT 1
4437: DEC
4438: ST_TO_ADDR
4439: LD_VAR 0 4
4443: PUSH
4444: FOR_TO
4445: IFFALSE 4494
// if GetDistUnits ( filter [ i ] , am_lab ) > 10 then
4447: LD_VAR 0 4
4451: PUSH
4452: LD_VAR 0 2
4456: ARRAY
4457: PPUSH
4458: LD_INT 46
4460: PPUSH
4461: CALL_OW 296
4465: PUSH
4466: LD_INT 10
4468: GREATER
4469: IFFALSE 4492
// ComMoveXY ( filter [ i ] , 47 , 12 ) ;
4471: LD_VAR 0 4
4475: PUSH
4476: LD_VAR 0 2
4480: ARRAY
4481: PPUSH
4482: LD_INT 47
4484: PPUSH
4485: LD_INT 12
4487: PPUSH
4488: CALL_OW 111
4492: GO 4444
4494: POP
4495: POP
// end else
4496: GO 4556
// for i = 1 to doc do
4498: LD_ADDR_VAR 0 2
4502: PUSH
4503: DOUBLE
4504: LD_INT 1
4506: DEC
4507: ST_TO_ADDR
4508: LD_VAR 0 5
4512: PUSH
4513: FOR_TO
4514: IFFALSE 4554
// if not IsInUnit ( doc [ i ] ) then
4516: LD_VAR 0 5
4520: PUSH
4521: LD_VAR 0 2
4525: ARRAY
4526: PPUSH
4527: CALL_OW 310
4531: NOT
4532: IFFALSE 4552
// ComEnterUnit ( doc [ i ] , am_lab ) ;
4534: LD_VAR 0 5
4538: PUSH
4539: LD_VAR 0 2
4543: ARRAY
4544: PPUSH
4545: LD_INT 46
4547: PPUSH
4548: CALL_OW 120
4552: GO 4513
4554: POP
4555: POP
// end ; if event = 4 then
4556: LD_VAR 0 1
4560: PUSH
4561: LD_INT 4
4563: EQUAL
4564: IFFALSE 4815
// begin bac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
4566: LD_ADDR_VAR 0 6
4570: PUSH
4571: LD_INT 22
4573: PUSH
4574: LD_INT 1
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: LD_INT 30
4583: PUSH
4584: LD_INT 5
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PPUSH
4595: CALL_OW 69
4599: ST_TO_ADDR
// for i = 1 to bac do
4600: LD_ADDR_VAR 0 2
4604: PUSH
4605: DOUBLE
4606: LD_INT 1
4608: DEC
4609: ST_TO_ADDR
4610: LD_VAR 0 6
4614: PUSH
4615: FOR_TO
4616: IFFALSE 4657
// if UnitsInside ( bac [ i ] ) < 6 then
4618: LD_VAR 0 6
4622: PUSH
4623: LD_VAR 0 2
4627: ARRAY
4628: PPUSH
4629: CALL_OW 313
4633: PUSH
4634: LD_INT 6
4636: LESS
4637: IFFALSE 4655
// place := bac [ i ] ;
4639: LD_ADDR_VAR 0 7
4643: PUSH
4644: LD_VAR 0 6
4648: PUSH
4649: LD_VAR 0 2
4653: ARRAY
4654: ST_TO_ADDR
4655: GO 4615
4657: POP
4658: POP
// if place then
4659: LD_VAR 0 7
4663: IFFALSE 4815
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] ] , [ f_lives , 1000 ] ] ] ) diff Patrol ;
4665: LD_ADDR_VAR 0 4
4669: PUSH
4670: LD_INT 22
4672: PUSH
4673: LD_INT 1
4675: PUSH
4676: EMPTY
4677: LIST
4678: LIST
4679: PUSH
4680: LD_INT 2
4682: PUSH
4683: LD_INT 25
4685: PUSH
4686: LD_INT 1
4688: PUSH
4689: EMPTY
4690: LIST
4691: LIST
4692: PUSH
4693: LD_INT 25
4695: PUSH
4696: LD_INT 5
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: LIST
4707: PUSH
4708: LD_INT 24
4710: PUSH
4711: LD_INT 1000
4713: PUSH
4714: EMPTY
4715: LIST
4716: LIST
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: LIST
4722: PUSH
4723: EMPTY
4724: LIST
4725: PPUSH
4726: CALL_OW 69
4730: PUSH
4731: LD_EXP 17
4735: DIFF
4736: ST_TO_ADDR
// for i = 1 to filter do
4737: LD_ADDR_VAR 0 2
4741: PUSH
4742: DOUBLE
4743: LD_INT 1
4745: DEC
4746: ST_TO_ADDR
4747: LD_VAR 0 4
4751: PUSH
4752: FOR_TO
4753: IFFALSE 4813
// if not IsInUnit ( filter [ i ] ) and not HasTask ( filter [ i ] ) then
4755: LD_VAR 0 4
4759: PUSH
4760: LD_VAR 0 2
4764: ARRAY
4765: PPUSH
4766: CALL_OW 310
4770: NOT
4771: PUSH
4772: LD_VAR 0 4
4776: PUSH
4777: LD_VAR 0 2
4781: ARRAY
4782: PPUSH
4783: CALL_OW 314
4787: NOT
4788: AND
4789: IFFALSE 4811
// ComEnterUnit ( filter [ i ] , place ) ;
4791: LD_VAR 0 4
4795: PUSH
4796: LD_VAR 0 2
4800: ARRAY
4801: PPUSH
4802: LD_VAR 0 7
4806: PPUSH
4807: CALL_OW 120
4811: GO 4752
4813: POP
4814: POP
// end ; end ; if event = 5 then
4815: LD_VAR 0 1
4819: PUSH
4820: LD_INT 5
4822: EQUAL
4823: IFFALSE 4977
// begin if FilterUnitsInArea ( am_sec , [ f_enemy , 1 ] ) = 0 then
4825: LD_INT 12
4827: PPUSH
4828: LD_INT 81
4830: PUSH
4831: LD_INT 1
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PPUSH
4838: CALL_OW 70
4842: PUSH
4843: LD_INT 0
4845: EQUAL
4846: IFFALSE 4977
// begin engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
4848: LD_ADDR_VAR 0 8
4852: PUSH
4853: LD_INT 22
4855: PUSH
4856: LD_INT 1
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: LD_INT 25
4865: PUSH
4866: LD_INT 2
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: PPUSH
4877: CALL_OW 69
4881: ST_TO_ADDR
// if engs > 0 then
4882: LD_VAR 0 8
4886: PUSH
4887: LD_INT 0
4889: GREATER
4890: IFFALSE 4977
// for i = 1 to engs do
4892: LD_ADDR_VAR 0 2
4896: PUSH
4897: DOUBLE
4898: LD_INT 1
4900: DEC
4901: ST_TO_ADDR
4902: LD_VAR 0 8
4906: PUSH
4907: FOR_TO
4908: IFFALSE 4975
// if not HasTask ( engs [ i ] ) then
4910: LD_VAR 0 8
4914: PUSH
4915: LD_VAR 0 2
4919: ARRAY
4920: PPUSH
4921: CALL_OW 314
4925: NOT
4926: IFFALSE 4973
// ComBuild ( engs [ i ] , b_bunker , gamma_towers [ 1 ] , gamma_towers [ 2 ] , gamma_towers [ 3 ] ) ;
4928: LD_VAR 0 8
4932: PUSH
4933: LD_VAR 0 2
4937: ARRAY
4938: PPUSH
4939: LD_INT 32
4941: PPUSH
4942: LD_EXP 18
4946: PUSH
4947: LD_INT 1
4949: ARRAY
4950: PPUSH
4951: LD_EXP 18
4955: PUSH
4956: LD_INT 2
4958: ARRAY
4959: PPUSH
4960: LD_EXP 18
4964: PUSH
4965: LD_INT 3
4967: ARRAY
4968: PPUSH
4969: CALL_OW 145
4973: GO 4907
4975: POP
4976: POP
// end ; end ; if event = 6 then
4977: LD_VAR 0 1
4981: PUSH
4982: LD_INT 6
4984: EQUAL
4985: IFFALSE 5169
// begin bac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
4987: LD_ADDR_VAR 0 6
4991: PUSH
4992: LD_INT 22
4994: PUSH
4995: LD_INT 1
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: LD_INT 30
5004: PUSH
5005: LD_INT 5
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: PPUSH
5016: CALL_OW 69
5020: ST_TO_ADDR
// if bac and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ] ) > 0 then
5021: LD_VAR 0 6
5025: PUSH
5026: LD_INT 22
5028: PUSH
5029: LD_INT 1
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: LD_INT 30
5038: PUSH
5039: LD_INT 32
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: PUSH
5046: LD_INT 58
5048: PUSH
5049: EMPTY
5050: LIST
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: LIST
5056: PUSH
5057: EMPTY
5058: LIST
5059: PPUSH
5060: CALL_OW 69
5064: PUSH
5065: LD_INT 0
5067: GREATER
5068: AND
5069: IFFALSE 5169
// begin b := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ] ) [ 1 ] ;
5071: LD_ADDR_VAR 0 10
5075: PUSH
5076: LD_INT 22
5078: PUSH
5079: LD_INT 1
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: PUSH
5086: LD_INT 30
5088: PUSH
5089: LD_INT 32
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PUSH
5096: LD_INT 58
5098: PUSH
5099: EMPTY
5100: LIST
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: LIST
5106: PUSH
5107: EMPTY
5108: LIST
5109: PPUSH
5110: CALL_OW 69
5114: PUSH
5115: LD_INT 1
5117: ARRAY
5118: ST_TO_ADDR
// un := UnitsInside ( bac [ 1 ] ) ;
5119: LD_ADDR_VAR 0 3
5123: PUSH
5124: LD_VAR 0 6
5128: PUSH
5129: LD_INT 1
5131: ARRAY
5132: PPUSH
5133: CALL_OW 313
5137: ST_TO_ADDR
// ComExitBuilding ( un [ 1 ] ) ;
5138: LD_VAR 0 3
5142: PUSH
5143: LD_INT 1
5145: ARRAY
5146: PPUSH
5147: CALL_OW 122
// AddComEnterUnit ( un [ 1 ] , b ) ;
5151: LD_VAR 0 3
5155: PUSH
5156: LD_INT 1
5158: ARRAY
5159: PPUSH
5160: LD_VAR 0 10
5164: PPUSH
5165: CALL_OW 180
// end ; end ; end ;
5169: PPOPN 10
5171: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 3 then
5172: LD_VAR 0 1
5176: PUSH
5177: LD_INT 1
5179: EQUAL
5180: PUSH
5181: LD_VAR 0 2
5185: PUSH
5186: LD_INT 3
5188: EQUAL
5189: AND
5190: IFFALSE 5200
// contact_am := true ;
5192: LD_ADDR_EXP 16
5196: PUSH
5197: LD_INT 1
5199: ST_TO_ADDR
// end ;
5200: PPOPN 2
5202: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5203: LD_VAR 0 1
5207: PPUSH
5208: LD_VAR 0 2
5212: PPUSH
5213: LD_VAR 0 3
5217: PPUSH
5218: CALL 22885 0 3
// end ;
5222: PPOPN 3
5224: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5225: LD_VAR 0 1
5229: PPUSH
5230: CALL 22893 0 1
// end ; end_of_file
5234: PPOPN 1
5236: END
// export Sikorski , Game_Started , SForce , Sikorski_Ar , Donald , Van , attacked , contact_am ; export patrol ; export gamma_towers ; export function PrepareAmerican ; var i , un , b , skill , weapons , sol , lw ; begin
5237: LD_INT 0
5239: PPUSH
5240: PPUSH
5241: PPUSH
5242: PPUSH
5243: PPUSH
5244: PPUSH
5245: PPUSH
5246: PPUSH
// skill := [ 5 , 6 , 7 ] [ dif ] ;
5247: LD_ADDR_VAR 0 5
5251: PUSH
5252: LD_INT 5
5254: PUSH
5255: LD_INT 6
5257: PUSH
5258: LD_INT 7
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: LIST
5265: PUSH
5266: LD_EXP 1
5270: ARRAY
5271: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_gatling_gun , us_gatling_gun , us_double_gun , us_double_gun , us_double_gun , us_heavy_gun ] ;
5272: LD_ADDR_VAR 0 6
5276: PUSH
5277: LD_INT 4
5279: PUSH
5280: LD_INT 4
5282: PUSH
5283: LD_INT 4
5285: PUSH
5286: LD_INT 5
5288: PUSH
5289: LD_INT 5
5291: PUSH
5292: LD_INT 5
5294: PUSH
5295: LD_INT 6
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: ST_TO_ADDR
// SForce := [ ] ;
5307: LD_ADDR_EXP 11
5311: PUSH
5312: EMPTY
5313: ST_TO_ADDR
// Sikorski_Ar := false ;
5314: LD_ADDR_EXP 12
5318: PUSH
5319: LD_INT 0
5321: ST_TO_ADDR
// attacked := false ;
5322: LD_ADDR_EXP 15
5326: PUSH
5327: LD_INT 0
5329: ST_TO_ADDR
// contact_am := false ;
5330: LD_ADDR_EXP 16
5334: PUSH
5335: LD_INT 0
5337: ST_TO_ADDR
// patrol := [ ] ;
5338: LD_ADDR_EXP 17
5342: PUSH
5343: EMPTY
5344: ST_TO_ADDR
// gamma_towers := [ ] ;
5345: LD_ADDR_EXP 18
5349: PUSH
5350: EMPTY
5351: ST_TO_ADDR
// SetBName ( am_dep , gamma ) ;
5352: LD_INT 25
5354: PPUSH
5355: LD_STRING gamma
5357: PPUSH
5358: CALL_OW 500
// uc_side := 1 ;
5362: LD_ADDR_OWVAR 20
5366: PUSH
5367: LD_INT 1
5369: ST_TO_ADDR
// uc_nation := 1 ;
5370: LD_ADDR_OWVAR 21
5374: PUSH
5375: LD_INT 1
5377: ST_TO_ADDR
// hc_importance := 0 ;
5378: LD_ADDR_OWVAR 32
5382: PUSH
5383: LD_INT 0
5385: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
5386: LD_ADDR_OWVAR 26
5390: PUSH
5391: LD_STRING Jeremy Sikorski
5393: ST_TO_ADDR
// hc_gallery := us ;
5394: LD_ADDR_OWVAR 33
5398: PUSH
5399: LD_STRING us
5401: ST_TO_ADDR
// hc_face_number := 19 ;
5402: LD_ADDR_OWVAR 34
5406: PUSH
5407: LD_INT 19
5409: ST_TO_ADDR
// hc_skills := [ Rand ( skill , skill + 2 ) , 4 , 6 , 3 ] ;
5410: LD_ADDR_OWVAR 31
5414: PUSH
5415: LD_VAR 0 5
5419: PPUSH
5420: LD_VAR 0 5
5424: PUSH
5425: LD_INT 2
5427: PLUS
5428: PPUSH
5429: CALL_OW 12
5433: PUSH
5434: LD_INT 4
5436: PUSH
5437: LD_INT 6
5439: PUSH
5440: LD_INT 3
5442: PUSH
5443: EMPTY
5444: LIST
5445: LIST
5446: LIST
5447: LIST
5448: ST_TO_ADDR
// hc_sex := sex_male ;
5449: LD_ADDR_OWVAR 27
5453: PUSH
5454: LD_INT 1
5456: ST_TO_ADDR
// hc_class := 1 ;
5457: LD_ADDR_OWVAR 28
5461: PUSH
5462: LD_INT 1
5464: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
5465: LD_ADDR_OWVAR 29
5469: PUSH
5470: LD_INT 10
5472: PUSH
5473: LD_INT 11
5475: PUSH
5476: EMPTY
5477: LIST
5478: LIST
5479: ST_TO_ADDR
// sikorski := CreateHuman ;
5480: LD_ADDR_EXP 9
5484: PUSH
5485: CALL_OW 44
5489: ST_TO_ADDR
// hc_name := Lucy Donaldson ;
5490: LD_ADDR_OWVAR 26
5494: PUSH
5495: LD_STRING Lucy Donaldson
5497: ST_TO_ADDR
// hc_gallery := us ;
5498: LD_ADDR_OWVAR 33
5502: PUSH
5503: LD_STRING us
5505: ST_TO_ADDR
// hc_face_number := 2 ;
5506: LD_ADDR_OWVAR 34
5510: PUSH
5511: LD_INT 2
5513: ST_TO_ADDR
// hc_skills := [ Rand ( skill , skill + 2 ) , 6 , 4 , 2 ] ;
5514: LD_ADDR_OWVAR 31
5518: PUSH
5519: LD_VAR 0 5
5523: PPUSH
5524: LD_VAR 0 5
5528: PUSH
5529: LD_INT 2
5531: PLUS
5532: PPUSH
5533: CALL_OW 12
5537: PUSH
5538: LD_INT 6
5540: PUSH
5541: LD_INT 4
5543: PUSH
5544: LD_INT 2
5546: PUSH
5547: EMPTY
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: ST_TO_ADDR
// hc_sex := sex_female ;
5553: LD_ADDR_OWVAR 27
5557: PUSH
5558: LD_INT 2
5560: ST_TO_ADDR
// hc_class := 1 ;
5561: LD_ADDR_OWVAR 28
5565: PUSH
5566: LD_INT 1
5568: ST_TO_ADDR
// donald := CreateHuman ;
5569: LD_ADDR_EXP 13
5573: PUSH
5574: CALL_OW 44
5578: ST_TO_ADDR
// hc_name := Peter Van Houten ;
5579: LD_ADDR_OWVAR 26
5583: PUSH
5584: LD_STRING Peter Van Houten
5586: ST_TO_ADDR
// hc_gallery := us ;
5587: LD_ADDR_OWVAR 33
5591: PUSH
5592: LD_STRING us
5594: ST_TO_ADDR
// hc_face_number := 16 ;
5595: LD_ADDR_OWVAR 34
5599: PUSH
5600: LD_INT 16
5602: ST_TO_ADDR
// hc_sex := sex_male ;
5603: LD_ADDR_OWVAR 27
5607: PUSH
5608: LD_INT 1
5610: ST_TO_ADDR
// van := CreateHuman ;
5611: LD_ADDR_EXP 14
5615: PUSH
5616: CALL_OW 44
5620: ST_TO_ADDR
// hc_importance := 0 ;
5621: LD_ADDR_OWVAR 32
5625: PUSH
5626: LD_INT 0
5628: ST_TO_ADDR
// case dif of 1 :
5629: LD_EXP 1
5633: PUSH
5634: LD_INT 1
5636: DOUBLE
5637: EQUAL
5638: IFTRUE 5642
5640: GO 5653
5642: POP
// lw = 1 ; 2 :
5643: LD_ADDR_VAR 0 8
5647: PUSH
5648: LD_INT 1
5650: ST_TO_ADDR
5651: GO 5700
5653: LD_INT 2
5655: DOUBLE
5656: EQUAL
5657: IFTRUE 5661
5659: GO 5680
5661: POP
// lw = Rand ( 1 , 2 ) ; 3 :
5662: LD_ADDR_VAR 0 8
5666: PUSH
5667: LD_INT 1
5669: PPUSH
5670: LD_INT 2
5672: PPUSH
5673: CALL_OW 12
5677: ST_TO_ADDR
5678: GO 5700
5680: LD_INT 3
5682: DOUBLE
5683: EQUAL
5684: IFTRUE 5688
5686: GO 5699
5688: POP
// lw = 2 ; end ;
5689: LD_ADDR_VAR 0 8
5693: PUSH
5694: LD_INT 2
5696: ST_TO_ADDR
5697: GO 5700
5699: POP
// case lw of 1 :
5700: LD_VAR 0 8
5704: PUSH
5705: LD_INT 1
5707: DOUBLE
5708: EQUAL
5709: IFTRUE 5713
5711: GO 5728
5713: POP
// PlaceHumanInUnit ( donald , am_dep ) ; 2 :
5714: LD_EXP 13
5718: PPUSH
5719: LD_INT 25
5721: PPUSH
5722: CALL_OW 52
5726: GO 5752
5728: LD_INT 2
5730: DOUBLE
5731: EQUAL
5732: IFTRUE 5736
5734: GO 5751
5736: POP
// PlaceHumanInUnit ( van , am_dep ) ; end ;
5737: LD_EXP 14
5741: PPUSH
5742: LD_INT 25
5744: PPUSH
5745: CALL_OW 52
5749: GO 5752
5751: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
5752: LD_ADDR_VAR 0 2
5756: PUSH
5757: LD_INT 22
5759: PUSH
5760: LD_INT 1
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PUSH
5767: LD_INT 30
5769: PUSH
5770: LD_INT 32
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: PPUSH
5781: CALL_OW 69
5785: PUSH
5786: FOR_IN
5787: IFFALSE 5841
// begin PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
5789: LD_INT 1
5791: PPUSH
5792: LD_VAR 0 5
5796: PPUSH
5797: CALL 734 0 2
5801: PPUSH
5802: LD_VAR 0 2
5806: PPUSH
5807: CALL_OW 52
// PlaceWeaponTurret ( i , weapons [ Rand ( 1 , weapons ) ] ) ;
5811: LD_VAR 0 2
5815: PPUSH
5816: LD_VAR 0 6
5820: PUSH
5821: LD_INT 1
5823: PPUSH
5824: LD_VAR 0 6
5828: PPUSH
5829: CALL_OW 12
5833: ARRAY
5834: PPUSH
5835: CALL_OW 431
// end ;
5839: GO 5786
5841: POP
5842: POP
// sol := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , class_soldier ] , [ class_sniper ] ] ] ) ;
5843: LD_ADDR_VAR 0 7
5847: PUSH
5848: LD_INT 22
5850: PUSH
5851: LD_INT 1
5853: PUSH
5854: EMPTY
5855: LIST
5856: LIST
5857: PUSH
5858: LD_INT 2
5860: PUSH
5861: LD_INT 25
5863: PUSH
5864: LD_INT 1
5866: PUSH
5867: EMPTY
5868: LIST
5869: LIST
5870: PUSH
5871: LD_INT 5
5873: PUSH
5874: EMPTY
5875: LIST
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: LIST
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: PPUSH
5886: CALL_OW 69
5890: ST_TO_ADDR
// for i = 1 to sol do
5891: LD_ADDR_VAR 0 2
5895: PUSH
5896: DOUBLE
5897: LD_INT 1
5899: DEC
5900: ST_TO_ADDR
5901: LD_VAR 0 7
5905: PUSH
5906: FOR_TO
5907: IFFALSE 5929
// SetTag ( sol [ i ] , 1 ) ;
5909: LD_VAR 0 7
5913: PUSH
5914: LD_VAR 0 2
5918: ARRAY
5919: PPUSH
5920: LD_INT 1
5922: PPUSH
5923: CALL_OW 109
5927: GO 5906
5929: POP
5930: POP
// for i = 1 to 3 do
5931: LD_ADDR_VAR 0 2
5935: PUSH
5936: DOUBLE
5937: LD_INT 1
5939: DEC
5940: ST_TO_ADDR
5941: LD_INT 3
5943: PUSH
5944: FOR_TO
5945: IFFALSE 5969
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , am_ct ) ;
5947: LD_INT 3
5949: PPUSH
5950: LD_VAR 0 5
5954: PPUSH
5955: CALL 734 0 2
5959: PPUSH
5960: LD_INT 56
5962: PPUSH
5963: CALL_OW 52
5967: GO 5944
5969: POP
5970: POP
// for i = 1 to 6 do
5971: LD_ADDR_VAR 0 2
5975: PUSH
5976: DOUBLE
5977: LD_INT 1
5979: DEC
5980: ST_TO_ADDR
5981: LD_INT 6
5983: PUSH
5984: FOR_TO
5985: IFFALSE 6009
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , am_fac ) ;
5987: LD_INT 3
5989: PPUSH
5990: LD_VAR 0 5
5994: PPUSH
5995: CALL 734 0 2
5999: PPUSH
6000: LD_INT 26
6002: PPUSH
6003: CALL_OW 52
6007: GO 5984
6009: POP
6010: POP
// for i = 1 to 5 do
6011: LD_ADDR_VAR 0 2
6015: PUSH
6016: DOUBLE
6017: LD_INT 1
6019: DEC
6020: ST_TO_ADDR
6021: LD_INT 5
6023: PUSH
6024: FOR_TO
6025: IFFALSE 6052
// PlaceUnitArea ( CreateHumanWithClass ( 2 , skill ) , am_base , false ) ;
6027: LD_INT 2
6029: PPUSH
6030: LD_VAR 0 5
6034: PPUSH
6035: CALL 734 0 2
6039: PPUSH
6040: LD_INT 7
6042: PPUSH
6043: LD_INT 0
6045: PPUSH
6046: CALL_OW 49
6050: GO 6024
6052: POP
6053: POP
// for i = 1 to 3 do
6054: LD_ADDR_VAR 0 2
6058: PUSH
6059: DOUBLE
6060: LD_INT 1
6062: DEC
6063: ST_TO_ADDR
6064: LD_INT 3
6066: PUSH
6067: FOR_TO
6068: IFFALSE 6092
// PlaceHumanInUnit ( CreateHumanWithClass ( 4 , skill ) , am_lab ) ;
6070: LD_INT 4
6072: PPUSH
6073: LD_VAR 0 5
6077: PPUSH
6078: CALL 734 0 2
6082: PPUSH
6083: LD_INT 46
6085: PPUSH
6086: CALL_OW 52
6090: GO 6067
6092: POP
6093: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) do
6094: LD_ADDR_VAR 0 2
6098: PUSH
6099: LD_INT 22
6101: PUSH
6102: LD_INT 1
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: PUSH
6109: LD_INT 30
6111: PUSH
6112: LD_INT 5
6114: PUSH
6115: EMPTY
6116: LIST
6117: LIST
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PPUSH
6123: CALL_OW 69
6127: PUSH
6128: FOR_IN
6129: IFFALSE 6243
// begin PlaceHumanInUnit ( CreateHumanWithClass ( class_sniper , skill ) , i ) ;
6131: LD_INT 5
6133: PPUSH
6134: LD_VAR 0 5
6138: PPUSH
6139: CALL 734 0 2
6143: PPUSH
6144: LD_VAR 0 2
6148: PPUSH
6149: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( class_sniper , skill ) , i ) ;
6153: LD_INT 5
6155: PPUSH
6156: LD_VAR 0 5
6160: PPUSH
6161: CALL 734 0 2
6165: PPUSH
6166: LD_VAR 0 2
6170: PPUSH
6171: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6175: LD_INT 1
6177: PPUSH
6178: LD_VAR 0 5
6182: PPUSH
6183: CALL 734 0 2
6187: PPUSH
6188: LD_VAR 0 2
6192: PPUSH
6193: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6197: LD_INT 1
6199: PPUSH
6200: LD_VAR 0 5
6204: PPUSH
6205: CALL 734 0 2
6209: PPUSH
6210: LD_VAR 0 2
6214: PPUSH
6215: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6219: LD_INT 1
6221: PPUSH
6222: LD_VAR 0 5
6226: PPUSH
6227: CALL 734 0 2
6231: PPUSH
6232: LD_VAR 0 2
6236: PPUSH
6237: CALL_OW 52
// end ;
6241: GO 6128
6243: POP
6244: POP
// if dif > 1 then
6245: LD_EXP 1
6249: PUSH
6250: LD_INT 1
6252: GREATER
6253: IFFALSE 6326
// for i = 1 to ( dif - 1 ) do
6255: LD_ADDR_VAR 0 2
6259: PUSH
6260: DOUBLE
6261: LD_INT 1
6263: DEC
6264: ST_TO_ADDR
6265: LD_EXP 1
6269: PUSH
6270: LD_INT 1
6272: MINUS
6273: PUSH
6274: FOR_TO
6275: IFFALSE 6324
// begin patrol := patrol ^ CreateHumanWithClass ( 1 , skill ) ;
6277: LD_ADDR_EXP 17
6281: PUSH
6282: LD_EXP 17
6286: PUSH
6287: LD_INT 1
6289: PPUSH
6290: LD_VAR 0 5
6294: PPUSH
6295: CALL 734 0 2
6299: ADD
6300: ST_TO_ADDR
// PlaceUnitArea ( patrol [ i ] , am_west_spawn , false ) ;
6301: LD_EXP 17
6305: PUSH
6306: LD_VAR 0 2
6310: ARRAY
6311: PPUSH
6312: LD_INT 3
6314: PPUSH
6315: LD_INT 0
6317: PPUSH
6318: CALL_OW 49
// end ;
6322: GO 6274
6324: POP
6325: POP
// game_started := true ;
6326: LD_ADDR_EXP 10
6330: PUSH
6331: LD_INT 1
6333: ST_TO_ADDR
// ComConstruct ( am_fac , us_medium_tracked , engine_solar , control_remote , us_crane ) ;
6334: LD_INT 26
6336: PPUSH
6337: LD_INT 3
6339: PPUSH
6340: LD_INT 2
6342: PPUSH
6343: LD_INT 2
6345: PPUSH
6346: LD_INT 13
6348: PPUSH
6349: CALL_OW 125
// while ( contact_am = false ) do
6353: LD_EXP 16
6357: PUSH
6358: LD_INT 0
6360: EQUAL
6361: IFFALSE 6372
// begin Wait ( 0 0$01 ) ;
6363: LD_INT 35
6365: PPUSH
6366: CALL_OW 67
// end ;
6370: GO 6353
// Wait ( [ 4 4$00 , 3 3$00 , 2 2$30 ] [ dif ] ) ;
6372: LD_INT 8400
6374: PUSH
6375: LD_INT 6300
6377: PUSH
6378: LD_INT 5250
6380: PUSH
6381: EMPTY
6382: LIST
6383: LIST
6384: LIST
6385: PUSH
6386: LD_EXP 1
6390: ARRAY
6391: PPUSH
6392: CALL_OW 67
// case dif of 1 :
6396: LD_EXP 1
6400: PUSH
6401: LD_INT 1
6403: DOUBLE
6404: EQUAL
6405: IFTRUE 6409
6407: GO 6584
6409: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_machine_gun , us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 4 ) ] ) ;
6410: LD_INT 26
6412: PPUSH
6413: LD_INT 3
6415: PPUSH
6416: LD_INT 1
6418: PPUSH
6419: LD_INT 2
6421: PPUSH
6422: LD_INT 2
6424: PUSH
6425: LD_INT 4
6427: PUSH
6428: LD_INT 5
6430: PUSH
6431: LD_INT 5
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: PUSH
6440: LD_INT 1
6442: PPUSH
6443: LD_INT 4
6445: PPUSH
6446: CALL_OW 12
6450: ARRAY
6451: PPUSH
6452: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6456: LD_INT 26
6458: PPUSH
6459: LD_INT 3
6461: PPUSH
6462: LD_INT 1
6464: PPUSH
6465: LD_INT 2
6467: PPUSH
6468: LD_INT 4
6470: PUSH
6471: LD_INT 5
6473: PUSH
6474: LD_INT 5
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: LIST
6481: PUSH
6482: LD_INT 1
6484: PPUSH
6485: LD_INT 3
6487: PPUSH
6488: CALL_OW 12
6492: ARRAY
6493: PPUSH
6494: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6498: LD_INT 26
6500: PPUSH
6501: LD_INT 3
6503: PPUSH
6504: LD_INT 1
6506: PPUSH
6507: LD_INT 2
6509: PPUSH
6510: LD_INT 4
6512: PUSH
6513: LD_INT 5
6515: PUSH
6516: LD_INT 5
6518: PUSH
6519: EMPTY
6520: LIST
6521: LIST
6522: LIST
6523: PUSH
6524: LD_INT 1
6526: PPUSH
6527: LD_INT 3
6529: PPUSH
6530: CALL_OW 12
6534: ARRAY
6535: PPUSH
6536: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6540: LD_INT 26
6542: PPUSH
6543: LD_INT 3
6545: PPUSH
6546: LD_INT 1
6548: PPUSH
6549: LD_INT 2
6551: PPUSH
6552: LD_INT 4
6554: PUSH
6555: LD_INT 3
6557: PUSH
6558: LD_INT 5
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: LIST
6565: PUSH
6566: LD_INT 1
6568: PPUSH
6569: LD_INT 3
6571: PPUSH
6572: CALL_OW 12
6576: ARRAY
6577: PPUSH
6578: CALL_OW 185
// end ; 2 :
6582: GO 7111
6584: LD_INT 2
6586: DOUBLE
6587: EQUAL
6588: IFTRUE 6592
6590: GO 6805
6592: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6593: LD_INT 26
6595: PPUSH
6596: LD_INT 3
6598: PPUSH
6599: LD_INT 1
6601: PPUSH
6602: LD_INT 2
6604: PPUSH
6605: LD_INT 4
6607: PUSH
6608: LD_INT 5
6610: PUSH
6611: LD_INT 5
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: LIST
6618: PUSH
6619: LD_INT 1
6621: PPUSH
6622: LD_INT 3
6624: PPUSH
6625: CALL_OW 12
6629: ARRAY
6630: PPUSH
6631: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6635: LD_INT 26
6637: PPUSH
6638: LD_INT 3
6640: PPUSH
6641: LD_INT 1
6643: PPUSH
6644: LD_INT 2
6646: PPUSH
6647: LD_INT 4
6649: PUSH
6650: LD_INT 5
6652: PUSH
6653: LD_INT 5
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: LIST
6660: PUSH
6661: LD_INT 1
6663: PPUSH
6664: LD_INT 3
6666: PPUSH
6667: CALL_OW 12
6671: ARRAY
6672: PPUSH
6673: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6677: LD_INT 26
6679: PPUSH
6680: LD_INT 3
6682: PPUSH
6683: LD_INT 1
6685: PPUSH
6686: LD_INT 2
6688: PPUSH
6689: LD_INT 4
6691: PUSH
6692: LD_INT 3
6694: PUSH
6695: LD_INT 5
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: LIST
6702: PUSH
6703: LD_INT 1
6705: PPUSH
6706: LD_INT 3
6708: PPUSH
6709: CALL_OW 12
6713: ARRAY
6714: PPUSH
6715: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6719: LD_INT 26
6721: PPUSH
6722: LD_INT 4
6724: PPUSH
6725: LD_INT 1
6727: PPUSH
6728: LD_INT 2
6730: PPUSH
6731: LD_INT 4
6733: PUSH
6734: LD_INT 5
6736: PUSH
6737: LD_INT 6
6739: PUSH
6740: EMPTY
6741: LIST
6742: LIST
6743: LIST
6744: PUSH
6745: LD_INT 1
6747: PPUSH
6748: LD_INT 3
6750: PPUSH
6751: CALL_OW 12
6755: ARRAY
6756: PPUSH
6757: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6761: LD_INT 26
6763: PPUSH
6764: LD_INT 4
6766: PPUSH
6767: LD_INT 1
6769: PPUSH
6770: LD_INT 2
6772: PPUSH
6773: LD_INT 4
6775: PUSH
6776: LD_INT 5
6778: PUSH
6779: LD_INT 6
6781: PUSH
6782: EMPTY
6783: LIST
6784: LIST
6785: LIST
6786: PUSH
6787: LD_INT 1
6789: PPUSH
6790: LD_INT 3
6792: PPUSH
6793: CALL_OW 12
6797: ARRAY
6798: PPUSH
6799: CALL_OW 185
// end ; 3 :
6803: GO 7111
6805: LD_INT 3
6807: DOUBLE
6808: EQUAL
6809: IFTRUE 6813
6811: GO 7110
6813: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6814: LD_INT 26
6816: PPUSH
6817: LD_INT 3
6819: PPUSH
6820: LD_INT 1
6822: PPUSH
6823: LD_INT 2
6825: PPUSH
6826: LD_INT 4
6828: PUSH
6829: LD_INT 5
6831: PUSH
6832: LD_INT 5
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: LIST
6839: PUSH
6840: LD_INT 1
6842: PPUSH
6843: LD_INT 3
6845: PPUSH
6846: CALL_OW 12
6850: ARRAY
6851: PPUSH
6852: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6856: LD_INT 26
6858: PPUSH
6859: LD_INT 3
6861: PPUSH
6862: LD_INT 1
6864: PPUSH
6865: LD_INT 2
6867: PPUSH
6868: LD_INT 4
6870: PUSH
6871: LD_INT 5
6873: PUSH
6874: LD_INT 5
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: LIST
6881: PUSH
6882: LD_INT 1
6884: PPUSH
6885: LD_INT 3
6887: PPUSH
6888: CALL_OW 12
6892: ARRAY
6893: PPUSH
6894: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6898: LD_INT 26
6900: PPUSH
6901: LD_INT 3
6903: PPUSH
6904: LD_INT 1
6906: PPUSH
6907: LD_INT 2
6909: PPUSH
6910: LD_INT 4
6912: PUSH
6913: LD_INT 5
6915: PUSH
6916: LD_INT 5
6918: PUSH
6919: EMPTY
6920: LIST
6921: LIST
6922: LIST
6923: PUSH
6924: LD_INT 1
6926: PPUSH
6927: LD_INT 3
6929: PPUSH
6930: CALL_OW 12
6934: ARRAY
6935: PPUSH
6936: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6940: LD_INT 26
6942: PPUSH
6943: LD_INT 3
6945: PPUSH
6946: LD_INT 1
6948: PPUSH
6949: LD_INT 2
6951: PPUSH
6952: LD_INT 4
6954: PUSH
6955: LD_INT 5
6957: PUSH
6958: LD_INT 5
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: LIST
6965: PUSH
6966: LD_INT 1
6968: PPUSH
6969: LD_INT 3
6971: PPUSH
6972: CALL_OW 12
6976: ARRAY
6977: PPUSH
6978: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6982: LD_INT 26
6984: PPUSH
6985: LD_INT 4
6987: PPUSH
6988: LD_INT 1
6990: PPUSH
6991: LD_INT 2
6993: PPUSH
6994: LD_INT 4
6996: PUSH
6997: LD_INT 5
6999: PUSH
7000: LD_INT 6
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: LIST
7007: PUSH
7008: LD_INT 1
7010: PPUSH
7011: LD_INT 3
7013: PPUSH
7014: CALL_OW 12
7018: ARRAY
7019: PPUSH
7020: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7024: LD_INT 26
7026: PPUSH
7027: LD_INT 4
7029: PPUSH
7030: LD_INT 1
7032: PPUSH
7033: LD_INT 2
7035: PPUSH
7036: LD_INT 4
7038: PUSH
7039: LD_INT 5
7041: PUSH
7042: LD_INT 6
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: LIST
7049: PUSH
7050: LD_INT 1
7052: PPUSH
7053: LD_INT 3
7055: PPUSH
7056: CALL_OW 12
7060: ARRAY
7061: PPUSH
7062: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7066: LD_INT 26
7068: PPUSH
7069: LD_INT 4
7071: PPUSH
7072: LD_INT 1
7074: PPUSH
7075: LD_INT 2
7077: PPUSH
7078: LD_INT 4
7080: PUSH
7081: LD_INT 5
7083: PUSH
7084: LD_INT 6
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: LIST
7091: PUSH
7092: LD_INT 1
7094: PPUSH
7095: LD_INT 3
7097: PPUSH
7098: CALL_OW 12
7102: ARRAY
7103: PPUSH
7104: CALL_OW 185
// end ; end ;
7108: GO 7111
7110: POP
// end ;
7111: LD_VAR 0 1
7115: RET
// every 0 0$01 do var i , filter ;
7116: GO 7118
7118: DISABLE
7119: LD_INT 0
7121: PPUSH
7122: PPUSH
// begin enable ;
7123: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
7124: LD_INT 22
7126: PUSH
7127: LD_INT 1
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: PUSH
7134: LD_INT 25
7136: PUSH
7137: LD_INT 4
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PPUSH
7148: CALL_OW 69
7152: PUSH
7153: LD_INT 0
7155: GREATER
7156: IFFALSE 7165
// RaiseSailEvent ( 3 ) ;
7158: LD_INT 3
7160: PPUSH
7161: CALL_OW 427
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 0 then
7165: LD_INT 22
7167: PUSH
7168: LD_INT 1
7170: PUSH
7171: EMPTY
7172: LIST
7173: LIST
7174: PUSH
7175: LD_INT 21
7177: PUSH
7178: LD_INT 3
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PUSH
7185: LD_INT 3
7187: PUSH
7188: LD_INT 24
7190: PUSH
7191: LD_INT 1000
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: LIST
7206: PPUSH
7207: CALL_OW 69
7211: PUSH
7212: LD_INT 0
7214: GREATER
7215: IFFALSE 7226
// RaiseSailEvent ( 1 ) else
7217: LD_INT 1
7219: PPUSH
7220: CALL_OW 427
7224: GO 7233
// RaiseSailEvent ( 2 ) ;
7226: LD_INT 2
7228: PPUSH
7229: CALL_OW 427
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) > 0 then
7233: LD_INT 22
7235: PUSH
7236: LD_INT 1
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: LD_INT 30
7245: PUSH
7246: LD_INT 5
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PPUSH
7257: CALL_OW 69
7261: PUSH
7262: LD_INT 0
7264: GREATER
7265: IFFALSE 7274
// RaiseSailEvent ( 4 ) ;
7267: LD_INT 4
7269: PPUSH
7270: CALL_OW 427
// if gamma_towers > 0 then
7274: LD_EXP 18
7278: PUSH
7279: LD_INT 0
7281: GREATER
7282: IFFALSE 7291
// RaiseSailEvent ( 5 ) ;
7284: LD_INT 5
7286: PPUSH
7287: CALL_OW 427
// end ;
7291: PPOPN 2
7293: END
// export new_veh ; every 9 9$00 do var chassis , weapon ;
7294: GO 7296
7296: DISABLE
7297: LD_INT 0
7299: PPUSH
7300: PPUSH
// begin enable ;
7301: ENABLE
// if new_veh > 0 then
7302: LD_EXP 19
7306: PUSH
7307: LD_INT 0
7309: GREATER
7310: IFFALSE 7497
// while ( new_veh > 0 ) do
7312: LD_EXP 19
7316: PUSH
7317: LD_INT 0
7319: GREATER
7320: IFFALSE 7497
// begin Wait ( 0 0$01 ) ;
7322: LD_INT 35
7324: PPUSH
7325: CALL_OW 67
// if BuildingStatus ( am_fac ) = bs_idle then
7329: LD_INT 26
7331: PPUSH
7332: CALL_OW 461
7336: PUSH
7337: LD_INT 2
7339: EQUAL
7340: IFFALSE 7495
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ Rand ( 1 , 4 ) ] ;
7342: LD_ADDR_VAR 0 1
7346: PUSH
7347: LD_INT 2
7349: PUSH
7350: LD_INT 3
7352: PUSH
7353: LD_INT 3
7355: PUSH
7356: LD_INT 4
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: PUSH
7365: LD_INT 1
7367: PPUSH
7368: LD_INT 4
7370: PPUSH
7371: CALL_OW 12
7375: ARRAY
7376: ST_TO_ADDR
// if chassis in [ us_medium_wheeled , us_medium_tracked ] then
7377: LD_VAR 0 1
7381: PUSH
7382: LD_INT 2
7384: PUSH
7385: LD_INT 3
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: IN
7392: IFFALSE 7427
// weapon := [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ Rand ( 1 , 3 ) ] else
7394: LD_ADDR_VAR 0 2
7398: PUSH
7399: LD_INT 4
7401: PUSH
7402: LD_INT 5
7404: PUSH
7405: LD_INT 7
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 1
7415: PPUSH
7416: LD_INT 3
7418: PPUSH
7419: CALL_OW 12
7423: ARRAY
7424: ST_TO_ADDR
7425: GO 7458
// weapon := [ us_double_gun , us_rocket_launcher , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ;
7427: LD_ADDR_VAR 0 2
7431: PUSH
7432: LD_INT 5
7434: PUSH
7435: LD_INT 7
7437: PUSH
7438: LD_INT 6
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: LIST
7445: PUSH
7446: LD_INT 1
7448: PPUSH
7449: LD_INT 3
7451: PPUSH
7452: CALL_OW 12
7456: ARRAY
7457: ST_TO_ADDR
// ComConstruct ( am_fac , chassis , engine_combustion , control_remote , weapon ) ;
7458: LD_INT 26
7460: PPUSH
7461: LD_VAR 0 1
7465: PPUSH
7466: LD_INT 1
7468: PPUSH
7469: LD_INT 2
7471: PPUSH
7472: LD_VAR 0 2
7476: PPUSH
7477: CALL_OW 125
// new_veh := new_veh - 1 ;
7481: LD_ADDR_EXP 19
7485: PUSH
7486: LD_EXP 19
7490: PUSH
7491: LD_INT 1
7493: MINUS
7494: ST_TO_ADDR
// end ; end ;
7495: GO 7312
// end ;
7497: PPOPN 2
7499: END
// every 0 0$01 do var v , filter , am_cmeh ;
7500: GO 7502
7502: DISABLE
7503: LD_INT 0
7505: PPUSH
7506: PPUSH
7507: PPUSH
// begin enable ;
7508: ENABLE
// am_cmeh := UnitsInside ( am_ct ) ;
7509: LD_ADDR_VAR 0 3
7513: PUSH
7514: LD_INT 56
7516: PPUSH
7517: CALL_OW 313
7521: ST_TO_ADDR
// filter = FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] ] ] ) ;
7522: LD_ADDR_VAR 0 2
7526: PUSH
7527: LD_INT 22
7529: PUSH
7530: LD_INT 1
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: PUSH
7537: LD_INT 33
7539: PUSH
7540: LD_INT 2
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: PUSH
7547: LD_INT 50
7549: PUSH
7550: EMPTY
7551: LIST
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: LIST
7557: PUSH
7558: EMPTY
7559: LIST
7560: PPUSH
7561: CALL_OW 69
7565: ST_TO_ADDR
// if filter > 0 then
7566: LD_VAR 0 2
7570: PUSH
7571: LD_INT 0
7573: GREATER
7574: IFFALSE 7642
// begin for v in filter do
7576: LD_ADDR_VAR 0 1
7580: PUSH
7581: LD_VAR 0 2
7585: PUSH
7586: FOR_IN
7587: IFFALSE 7640
// begin if not IsControledBy ( v ) and IsOk ( v ) then
7589: LD_VAR 0 1
7593: PPUSH
7594: CALL_OW 312
7598: NOT
7599: PUSH
7600: LD_VAR 0 1
7604: PPUSH
7605: CALL_OW 302
7609: AND
7610: IFFALSE 7638
// ComLinkTo ( v , am_cmeh [ Rand ( 1 , 3 ) ] ) ;
7612: LD_VAR 0 1
7616: PPUSH
7617: LD_VAR 0 3
7621: PUSH
7622: LD_INT 1
7624: PPUSH
7625: LD_INT 3
7627: PPUSH
7628: CALL_OW 12
7632: ARRAY
7633: PPUSH
7634: CALL_OW 135
// end ;
7638: GO 7586
7640: POP
7641: POP
// end ; end ;
7642: PPOPN 3
7644: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) = [ 4 , 5 , 7 ] [ dif ] and BuildingStatus ( am_fac ) = bs_idle do var i , un , enemy ;
7645: LD_INT 33
7647: PUSH
7648: LD_INT 2
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: PUSH
7655: LD_INT 3
7657: PUSH
7658: LD_INT 34
7660: PUSH
7661: LD_INT 13
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PPUSH
7676: CALL_OW 69
7680: PUSH
7681: LD_INT 4
7683: PUSH
7684: LD_INT 5
7686: PUSH
7687: LD_INT 7
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: LIST
7694: PUSH
7695: LD_EXP 1
7699: ARRAY
7700: EQUAL
7701: PUSH
7702: LD_INT 26
7704: PPUSH
7705: CALL_OW 461
7709: PUSH
7710: LD_INT 2
7712: EQUAL
7713: AND
7714: IFFALSE 7925
7716: GO 7718
7718: DISABLE
7719: LD_INT 0
7721: PPUSH
7722: PPUSH
7723: PPUSH
// begin enable ;
7724: ENABLE
// if Sikorski_Ar then
7725: LD_EXP 12
7729: IFFALSE 7806
// SForce := FilterAllUnits ( [ [ f_or , [ f_side , 4 ] , [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ] ] ) else
7731: LD_ADDR_EXP 11
7735: PUSH
7736: LD_INT 2
7738: PUSH
7739: LD_INT 22
7741: PUSH
7742: LD_INT 4
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: PUSH
7749: LD_INT 22
7751: PUSH
7752: LD_INT 1
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: PUSH
7759: LD_INT 33
7761: PUSH
7762: LD_INT 2
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: PUSH
7769: LD_INT 3
7771: PUSH
7772: LD_INT 34
7774: PUSH
7775: LD_INT 13
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: LIST
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: LIST
7795: PUSH
7796: EMPTY
7797: LIST
7798: PPUSH
7799: CALL_OW 69
7803: ST_TO_ADDR
7804: GO 7847
// SForce := FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) ;
7806: LD_ADDR_EXP 11
7810: PUSH
7811: LD_INT 33
7813: PUSH
7814: LD_INT 2
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: PUSH
7821: LD_INT 3
7823: PUSH
7824: LD_INT 34
7826: PUSH
7827: LD_INT 13
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PPUSH
7842: CALL_OW 69
7846: ST_TO_ADDR
// repeat begin for un in SForce do
7847: LD_ADDR_VAR 0 2
7851: PUSH
7852: LD_EXP 11
7856: PUSH
7857: FOR_IN
7858: IFFALSE 7913
// begin enemy := FilterAllUnits ( [ f_side , 3 ] ) ;
7860: LD_ADDR_VAR 0 3
7864: PUSH
7865: LD_INT 22
7867: PUSH
7868: LD_INT 3
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: PPUSH
7875: CALL_OW 69
7879: ST_TO_ADDR
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
7880: LD_VAR 0 2
7884: PPUSH
7885: LD_VAR 0 3
7889: PPUSH
7890: LD_VAR 0 2
7894: PPUSH
7895: CALL_OW 74
7899: PPUSH
7900: CALL_OW 115
// Wait ( 0 0$01 ) ;
7904: LD_INT 35
7906: PPUSH
7907: CALL_OW 67
// end ;
7911: GO 7857
7913: POP
7914: POP
// end until SForce = 0 ;
7915: LD_EXP 11
7919: PUSH
7920: LD_INT 0
7922: EQUAL
7923: IFFALSE 7847
// end ;
7925: PPOPN 3
7927: END
// export function NewForce ( num ) ; var i , filter , veh , tmp ; begin
7928: LD_INT 0
7930: PPUSH
7931: PPUSH
7932: PPUSH
7933: PPUSH
7934: PPUSH
// tmp := FilterUnitsInArea ( spawnArea , [ ] ) ;
7935: LD_ADDR_VAR 0 6
7939: PUSH
7940: LD_INT 14
7942: PPUSH
7943: EMPTY
7944: PPUSH
7945: CALL_OW 70
7949: ST_TO_ADDR
// if tmp then
7950: LD_VAR 0 6
7954: IFFALSE 7988
// for i in tmp do
7956: LD_ADDR_VAR 0 3
7960: PUSH
7961: LD_VAR 0 6
7965: PUSH
7966: FOR_IN
7967: IFFALSE 7986
// ComMoveXY ( i , 42 , 23 ) ;
7969: LD_VAR 0 3
7973: PPUSH
7974: LD_INT 42
7976: PPUSH
7977: LD_INT 23
7979: PPUSH
7980: CALL_OW 111
7984: GO 7966
7986: POP
7987: POP
// EraseResourceArea ( spawnArea , mat_cans ) ;
7988: LD_INT 14
7990: PPUSH
7991: LD_INT 1
7993: PPUSH
7994: CALL_OW 286
// uc_side := 4 ;
7998: LD_ADDR_OWVAR 20
8002: PUSH
8003: LD_INT 4
8005: ST_TO_ADDR
// uc_nation := 1 ;
8006: LD_ADDR_OWVAR 21
8010: PUSH
8011: LD_INT 1
8013: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
8014: LD_ADDR_OWVAR 37
8018: PUSH
8019: LD_INT 4
8021: ST_TO_ADDR
// vc_control := control_manual ;
8022: LD_ADDR_OWVAR 38
8026: PUSH
8027: LD_INT 1
8029: ST_TO_ADDR
// vc_engine := engine_combustion ;
8030: LD_ADDR_OWVAR 39
8034: PUSH
8035: LD_INT 1
8037: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ dif ] ;
8038: LD_ADDR_OWVAR 40
8042: PUSH
8043: LD_INT 4
8045: PUSH
8046: LD_INT 5
8048: PUSH
8049: LD_INT 7
8051: PUSH
8052: EMPTY
8053: LIST
8054: LIST
8055: LIST
8056: PUSH
8057: LD_EXP 1
8061: ARRAY
8062: ST_TO_ADDR
// veh := CreateVehicle ;
8063: LD_ADDR_VAR 0 5
8067: PUSH
8068: CALL_OW 45
8072: ST_TO_ADDR
// PlaceUnitArea ( veh , am_main_spawn , false ) ;
8073: LD_VAR 0 5
8077: PPUSH
8078: LD_INT 2
8080: PPUSH
8081: LD_INT 0
8083: PPUSH
8084: CALL_OW 49
// PlaceHumanInUnit ( sikorski , veh ) ;
8088: LD_EXP 9
8092: PPUSH
8093: LD_VAR 0 5
8097: PPUSH
8098: CALL_OW 52
// SetMark ( veh , 1 ) ;
8102: LD_VAR 0 5
8106: PPUSH
8107: LD_INT 1
8109: PPUSH
8110: CALL_OW 242
// while ( num > 0 ) do
8114: LD_VAR 0 1
8118: PUSH
8119: LD_INT 0
8121: GREATER
8122: IFFALSE 8289
// begin CreateVehicleWithDriver ( [ us_medium_tracked , us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ Rand ( dif , 4 ) ] , engine_combustion , [ us_gatling_gun , us_double_gun , us_double_gun , us_rocket_launcher ] [ Rand ( 1 , dif + 1 ) ] , am_sik , 2 , [ 5 , 6 , 7 ] [ dif ] ) ;
8124: LD_INT 3
8126: PUSH
8127: LD_INT 3
8129: PUSH
8130: LD_INT 3
8132: PUSH
8133: LD_INT 4
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: PUSH
8142: LD_EXP 1
8146: PPUSH
8147: LD_INT 4
8149: PPUSH
8150: CALL_OW 12
8154: ARRAY
8155: PPUSH
8156: LD_INT 1
8158: PPUSH
8159: LD_INT 4
8161: PUSH
8162: LD_INT 5
8164: PUSH
8165: LD_INT 5
8167: PUSH
8168: LD_INT 7
8170: PUSH
8171: EMPTY
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: PUSH
8177: LD_INT 1
8179: PPUSH
8180: LD_EXP 1
8184: PUSH
8185: LD_INT 1
8187: PLUS
8188: PPUSH
8189: CALL_OW 12
8193: ARRAY
8194: PPUSH
8195: LD_INT 11
8197: PPUSH
8198: LD_INT 2
8200: PPUSH
8201: LD_INT 5
8203: PUSH
8204: LD_INT 6
8206: PUSH
8207: LD_INT 7
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: LIST
8214: PUSH
8215: LD_EXP 1
8219: ARRAY
8220: PPUSH
8221: CALL 1297 0 6
// filter := FilterAllUnits ( [ f_side , 4 ] ) ;
8225: LD_ADDR_VAR 0 4
8229: PUSH
8230: LD_INT 22
8232: PUSH
8233: LD_INT 4
8235: PUSH
8236: EMPTY
8237: LIST
8238: LIST
8239: PPUSH
8240: CALL_OW 69
8244: ST_TO_ADDR
// ComMoveXY ( filter [ filter ] , 36 , 18 ) ;
8245: LD_VAR 0 4
8249: PUSH
8250: LD_VAR 0 4
8254: ARRAY
8255: PPUSH
8256: LD_INT 36
8258: PPUSH
8259: LD_INT 18
8261: PPUSH
8262: CALL_OW 111
// Wait ( 0 0$02 ) ;
8266: LD_INT 70
8268: PPUSH
8269: CALL_OW 67
// num := num - 1 ;
8273: LD_ADDR_VAR 0 1
8277: PUSH
8278: LD_VAR 0 1
8282: PUSH
8283: LD_INT 1
8285: MINUS
8286: ST_TO_ADDR
// end ;
8287: GO 8114
// end ;
8289: LD_VAR 0 2
8293: RET
// every 0 0$03 trigger patrol > 0 do var i ;
8294: LD_EXP 17
8298: PUSH
8299: LD_INT 0
8301: GREATER
8302: IFFALSE 8571
8304: GO 8306
8306: DISABLE
8307: LD_INT 0
8309: PPUSH
// begin enable ;
8310: ENABLE
// for i = 1 to patrol do
8311: LD_ADDR_VAR 0 1
8315: PUSH
8316: DOUBLE
8317: LD_INT 1
8319: DEC
8320: ST_TO_ADDR
8321: LD_EXP 17
8325: PUSH
8326: FOR_TO
8327: IFFALSE 8569
// begin if patrol [ i ] and IsLive ( patrol [ i ] ) and not HasTask ( patrol [ i ] ) then
8329: LD_EXP 17
8333: PUSH
8334: LD_VAR 0 1
8338: ARRAY
8339: PUSH
8340: LD_EXP 17
8344: PUSH
8345: LD_VAR 0 1
8349: ARRAY
8350: PPUSH
8351: CALL_OW 300
8355: AND
8356: PUSH
8357: LD_EXP 17
8361: PUSH
8362: LD_VAR 0 1
8366: ARRAY
8367: PPUSH
8368: CALL_OW 314
8372: NOT
8373: AND
8374: IFFALSE 8524
// case i of 1 :
8376: LD_VAR 0 1
8380: PUSH
8381: LD_INT 1
8383: DOUBLE
8384: EQUAL
8385: IFTRUE 8389
8387: GO 8452
8389: POP
// begin ComMoveXY ( patrol [ i ] , 53 , 91 ) ;
8390: LD_EXP 17
8394: PUSH
8395: LD_VAR 0 1
8399: ARRAY
8400: PPUSH
8401: LD_INT 53
8403: PPUSH
8404: LD_INT 91
8406: PPUSH
8407: CALL_OW 111
// AddComWait ( patrol [ i ] , 0 0$07 ) ;
8411: LD_EXP 17
8415: PUSH
8416: LD_VAR 0 1
8420: ARRAY
8421: PPUSH
8422: LD_INT 245
8424: PPUSH
8425: CALL_OW 202
// AddComMoveXY ( patrol [ i ] , 24 , 26 ) ;
8429: LD_EXP 17
8433: PUSH
8434: LD_VAR 0 1
8438: ARRAY
8439: PPUSH
8440: LD_INT 24
8442: PPUSH
8443: LD_INT 26
8445: PPUSH
8446: CALL_OW 171
// end ; 2 :
8450: GO 8524
8452: LD_INT 2
8454: DOUBLE
8455: EQUAL
8456: IFTRUE 8460
8458: GO 8523
8460: POP
// begin ComMoveXY ( patrol [ i ] , 83 , 57 ) ;
8461: LD_EXP 17
8465: PUSH
8466: LD_VAR 0 1
8470: ARRAY
8471: PPUSH
8472: LD_INT 83
8474: PPUSH
8475: LD_INT 57
8477: PPUSH
8478: CALL_OW 111
// AddComWait ( patrol [ i ] , 0 0$07 ) ;
8482: LD_EXP 17
8486: PUSH
8487: LD_VAR 0 1
8491: ARRAY
8492: PPUSH
8493: LD_INT 245
8495: PPUSH
8496: CALL_OW 202
// AddComMoveXY ( patrol [ i ] , 47 , 53 ) ;
8500: LD_EXP 17
8504: PUSH
8505: LD_VAR 0 1
8509: ARRAY
8510: PPUSH
8511: LD_INT 47
8513: PPUSH
8514: LD_INT 53
8516: PPUSH
8517: CALL_OW 171
// end ; end ;
8521: GO 8524
8523: POP
// if GetLives ( patrol [ i ] ) < 1000 then
8524: LD_EXP 17
8528: PUSH
8529: LD_VAR 0 1
8533: ARRAY
8534: PPUSH
8535: CALL_OW 256
8539: PUSH
8540: LD_INT 1000
8542: LESS
8543: IFFALSE 8567
// patrol := patrol diff patrol [ i ] ;
8545: LD_ADDR_EXP 17
8549: PUSH
8550: LD_EXP 17
8554: PUSH
8555: LD_EXP 17
8559: PUSH
8560: LD_VAR 0 1
8564: ARRAY
8565: DIFF
8566: ST_TO_ADDR
// end ;
8567: GO 8326
8569: POP
8570: POP
// end ;
8571: PPOPN 1
8573: END
// every 0 0$10 do
8574: GO 8576
8576: DISABLE
// begin Wait ( [ 20 20$00 , 18 18$00 , 16 16$00 ] [ dif ] ) ;
8577: LD_INT 42000
8579: PUSH
8580: LD_INT 37800
8582: PUSH
8583: LD_INT 33600
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: LIST
8590: PUSH
8591: LD_EXP 1
8595: ARRAY
8596: PPUSH
8597: CALL_OW 67
// if not contact_am then
8601: LD_EXP 16
8605: NOT
8606: IFFALSE 8616
// contact_am := true ;
8608: LD_ADDR_EXP 16
8612: PUSH
8613: LD_INT 1
8615: ST_TO_ADDR
// end ; end_of_file
8616: END
// export event_rocket , event_comp , comp_tested , sikorski_run ; export function Action ; begin
8617: LD_INT 0
8619: PPUSH
// comp_tested := false ;
8620: LD_ADDR_EXP 22
8624: PUSH
8625: LD_INT 0
8627: ST_TO_ADDR
// sikorski_run := false ;
8628: LD_ADDR_EXP 23
8632: PUSH
8633: LD_INT 0
8635: ST_TO_ADDR
// InGameOn ;
8636: CALL_OW 8
// CenterNowOnXY ( 5 , 4 ) ;
8640: LD_INT 5
8642: PPUSH
8643: LD_INT 4
8645: PPUSH
8646: CALL_OW 86
// wait ( 0 0$2 ) ;
8650: LD_INT 70
8652: PPUSH
8653: CALL_OW 67
// CenterOnUnits ( commander ) ;
8657: LD_EXP 3
8661: PPUSH
8662: CALL_OW 85
// wait ( 0 0$01 ) ;
8666: LD_INT 35
8668: PPUSH
8669: CALL_OW 67
// SayRadio ( popov , Dpop1 ) ;
8673: LD_EXP 2
8677: PPUSH
8678: LD_STRING Dpop1
8680: PPUSH
8681: CALL_OW 94
// Say ( commander , Dcomm1 ) ;
8685: LD_EXP 3
8689: PPUSH
8690: LD_STRING Dcomm1
8692: PPUSH
8693: CALL_OW 88
// SayRadio ( popov , Dpop2 ) ;
8697: LD_EXP 2
8701: PPUSH
8702: LD_STRING Dpop2
8704: PPUSH
8705: CALL_OW 94
// Say ( commander , Dcomm2 ) ;
8709: LD_EXP 3
8713: PPUSH
8714: LD_STRING Dcomm2
8716: PPUSH
8717: CALL_OW 88
// InGameOff ;
8721: CALL_OW 9
// ChangeMissionObjectives ( T1 ) ;
8725: LD_STRING T1
8727: PPUSH
8728: CALL_OW 337
// end ;
8732: LD_VAR 0 1
8736: RET
// every 0 0$01 trigger timer > 2 2$01 do
8737: LD_EXP 24
8741: PUSH
8742: LD_INT 4235
8744: GREATER
8745: IFFALSE 8762
8747: GO 8749
8749: DISABLE
// begin SayRadio ( kapral , DKap1 ) ;
8750: LD_EXP 5
8754: PPUSH
8755: LD_STRING DKap1
8757: PPUSH
8758: CALL_OW 94
// end ;
8762: END
// every 0 0$01 trigger timer > [ 22 22$00 , 25 25$00 , 30 30$00 ] [ dif ] do var i ;
8763: LD_EXP 24
8767: PUSH
8768: LD_INT 46200
8770: PUSH
8771: LD_INT 52500
8773: PUSH
8774: LD_INT 63000
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: LIST
8781: PUSH
8782: LD_EXP 1
8786: ARRAY
8787: GREATER
8788: IFFALSE 9155
8790: GO 8792
8792: DISABLE
8793: LD_INT 0
8795: PPUSH
// begin SayRadio ( kapral , DKap2 ) ;
8796: LD_EXP 5
8800: PPUSH
8801: LD_STRING DKap2
8803: PPUSH
8804: CALL_OW 94
// Wait ( 0 0$0.3 ) ;
8808: LD_INT 10
8810: PPUSH
8811: CALL_OW 67
// Say ( commander , Dcommk ) ;
8815: LD_EXP 3
8819: PPUSH
8820: LD_STRING Dcommk
8822: PPUSH
8823: CALL_OW 88
// Wait ( 0 0$44 ) ;
8827: LD_INT 1540
8829: PPUSH
8830: CALL_OW 67
// PlaceUnitArea ( kapral , am_west_spawn , false ) ;
8834: LD_EXP 5
8838: PPUSH
8839: LD_INT 3
8841: PPUSH
8842: LD_INT 0
8844: PPUSH
8845: CALL_OW 49
// CenterNowOnUnits ( kapral ) ;
8849: LD_EXP 5
8853: PPUSH
8854: CALL_OW 87
// Wait ( 0 0$10 ) ;
8858: LD_INT 350
8860: PPUSH
8861: CALL_OW 67
// NewForce ( [ 6 , 7 , 8 ] [ dif ] ) ;
8865: LD_INT 6
8867: PUSH
8868: LD_INT 7
8870: PUSH
8871: LD_INT 8
8873: PUSH
8874: EMPTY
8875: LIST
8876: LIST
8877: LIST
8878: PUSH
8879: LD_EXP 1
8883: ARRAY
8884: PPUSH
8885: CALL 7928 0 1
// Wait ( 2 2$00 ) ;
8889: LD_INT 4200
8891: PPUSH
8892: CALL_OW 67
// while ( FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) < 3 ) do
8896: LD_INT 33
8898: PUSH
8899: LD_INT 2
8901: PUSH
8902: EMPTY
8903: LIST
8904: LIST
8905: PUSH
8906: LD_INT 3
8908: PUSH
8909: LD_INT 34
8911: PUSH
8912: LD_INT 13
8914: PUSH
8915: EMPTY
8916: LIST
8917: LIST
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: PPUSH
8927: CALL_OW 69
8931: PUSH
8932: LD_INT 3
8934: LESS
8935: IFFALSE 8946
// Wait ( 0 0$01 ) ;
8937: LD_INT 35
8939: PPUSH
8940: CALL_OW 67
8944: GO 8896
// uc_side := 4 ;
8946: LD_ADDR_OWVAR 20
8950: PUSH
8951: LD_INT 4
8953: ST_TO_ADDR
// uc_nation := 1 ;
8954: LD_ADDR_OWVAR 21
8958: PUSH
8959: LD_INT 1
8961: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ dif ] do
8962: LD_ADDR_VAR 0 1
8966: PUSH
8967: DOUBLE
8968: LD_INT 1
8970: DEC
8971: ST_TO_ADDR
8972: LD_INT 4
8974: PUSH
8975: LD_INT 5
8977: PUSH
8978: LD_INT 6
8980: PUSH
8981: EMPTY
8982: LIST
8983: LIST
8984: LIST
8985: PUSH
8986: LD_EXP 1
8990: ARRAY
8991: PUSH
8992: FOR_TO
8993: IFFALSE 9035
// PlaceUnitArea ( CreateHumanWithClass ( 1 , [ 5 , 6 , 7 ] [ dif ] ) , am_east_spawn , false ) ;
8995: LD_INT 1
8997: PPUSH
8998: LD_INT 5
9000: PUSH
9001: LD_INT 6
9003: PUSH
9004: LD_INT 7
9006: PUSH
9007: EMPTY
9008: LIST
9009: LIST
9010: LIST
9011: PUSH
9012: LD_EXP 1
9016: ARRAY
9017: PPUSH
9018: CALL 734 0 2
9022: PPUSH
9023: LD_INT 4
9025: PPUSH
9026: LD_INT 0
9028: PPUSH
9029: CALL_OW 49
9033: GO 8992
9035: POP
9036: POP
// sikorski_ar := true ;
9037: LD_ADDR_EXP 12
9041: PUSH
9042: LD_INT 1
9044: ST_TO_ADDR
// SayRadio ( sikorski , DSik1 ) ;
9045: LD_EXP 9
9049: PPUSH
9050: LD_STRING DSik1
9052: PPUSH
9053: CALL_OW 94
// Wait ( 0 0$30 ) ;
9057: LD_INT 1050
9059: PPUSH
9060: CALL_OW 67
// uc_side := 4 ;
9064: LD_ADDR_OWVAR 20
9068: PUSH
9069: LD_INT 4
9071: ST_TO_ADDR
// uc_nation := 1 ;
9072: LD_ADDR_OWVAR 21
9076: PUSH
9077: LD_INT 1
9079: ST_TO_ADDR
// for i = 1 to [ 3 , 4 , 4 ] [ dif ] do
9080: LD_ADDR_VAR 0 1
9084: PUSH
9085: DOUBLE
9086: LD_INT 1
9088: DEC
9089: ST_TO_ADDR
9090: LD_INT 3
9092: PUSH
9093: LD_INT 4
9095: PUSH
9096: LD_INT 4
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: LIST
9103: PUSH
9104: LD_EXP 1
9108: ARRAY
9109: PUSH
9110: FOR_TO
9111: IFFALSE 9153
// PlaceUnitArea ( CreateHumanWithClass ( 1 , [ 5 , 6 , 7 ] [ dif ] ) , am_south_spawn , false ) ;
9113: LD_INT 1
9115: PPUSH
9116: LD_INT 5
9118: PUSH
9119: LD_INT 6
9121: PUSH
9122: LD_INT 7
9124: PUSH
9125: EMPTY
9126: LIST
9127: LIST
9128: LIST
9129: PUSH
9130: LD_EXP 1
9134: ARRAY
9135: PPUSH
9136: CALL 734 0 2
9140: PPUSH
9141: LD_INT 13
9143: PPUSH
9144: LD_INT 0
9146: PPUSH
9147: CALL_OW 49
9151: GO 9110
9153: POP
9154: POP
// end ;
9155: PPOPN 1
9157: END
// every 0 0$0.1 trigger GetLives ( sikorski ) < 650 do
9158: LD_EXP 9
9162: PPUSH
9163: CALL_OW 256
9167: PUSH
9168: LD_INT 650
9170: LESS
9171: IFFALSE 9253
9173: GO 9175
9175: DISABLE
// begin Say ( sikorski , DSik2 ) ;
9176: LD_EXP 9
9180: PPUSH
9181: LD_STRING DSik2
9183: PPUSH
9184: CALL_OW 88
// while ( IsLive ( sikorski ) ) do
9188: LD_EXP 9
9192: PPUSH
9193: CALL_OW 300
9197: IFFALSE 9253
// begin ComMoveToArea ( sikorski , am_main_spawn ) ;
9199: LD_EXP 9
9203: PPUSH
9204: LD_INT 2
9206: PPUSH
9207: CALL_OW 113
// Wait ( 0 0$01 ) ;
9211: LD_INT 35
9213: PPUSH
9214: CALL_OW 67
// if IsInArea ( sikorski , am_main_spawn ) then
9218: LD_EXP 9
9222: PPUSH
9223: LD_INT 2
9225: PPUSH
9226: CALL_OW 308
9230: IFFALSE 9251
// begin RemoveUnit ( sikorski ) ;
9232: LD_EXP 9
9236: PPUSH
9237: CALL_OW 64
// break ;
9241: GO 9253
// sikorski_run := true ;
9243: LD_ADDR_EXP 23
9247: PUSH
9248: LD_INT 1
9250: ST_TO_ADDR
// end ; end ;
9251: GO 9188
// end ;
9253: END
// every 0 0$0.1 trigger GetLives ( sikorski ) < 1000 do
9254: LD_EXP 9
9258: PPUSH
9259: CALL_OW 256
9263: PUSH
9264: LD_INT 1000
9266: LESS
9267: IFFALSE 9284
9269: GO 9271
9271: DISABLE
// Say ( sikorski , DSkik3 ) ; end_of_file
9272: LD_EXP 9
9276: PPUSH
9277: LD_STRING DSkik3
9279: PPUSH
9280: CALL_OW 88
9284: END
// every 1 1$45 + 0 0$15 do
9285: GO 9287
9287: DISABLE
// begin enable ;
9288: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
9289: LD_INT 1
9291: PPUSH
9292: LD_INT 5
9294: PPUSH
9295: CALL_OW 12
9299: PPUSH
9300: LD_INT 8
9302: PPUSH
9303: LD_INT 1
9305: PPUSH
9306: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$37 ) ) ;
9310: LD_INT 350
9312: PPUSH
9313: LD_INT 1295
9315: PPUSH
9316: CALL_OW 12
9320: PPUSH
9321: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
9325: LD_INT 1
9327: PPUSH
9328: LD_INT 5
9330: PPUSH
9331: CALL_OW 12
9335: PPUSH
9336: LD_INT 1
9338: PPUSH
9339: CALL_OW 57
// Wait ( Rand ( 0 0$10 , 0 0$30 ) ) ;
9343: LD_INT 350
9345: PPUSH
9346: LD_INT 1050
9348: PPUSH
9349: CALL_OW 12
9353: PPUSH
9354: CALL_OW 67
// if timer <= [ 12 12$00 , 11 11$00 , 10 10$00 ] [ dif ] then
9358: LD_EXP 24
9362: PUSH
9363: LD_INT 25200
9365: PUSH
9366: LD_INT 23100
9368: PUSH
9369: LD_INT 21000
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: LIST
9376: PUSH
9377: LD_EXP 1
9381: ARRAY
9382: LESSEQUAL
9383: IFFALSE 9406
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
9385: LD_INT 1
9387: PPUSH
9388: LD_INT 5
9390: PPUSH
9391: CALL_OW 12
9395: PPUSH
9396: LD_INT 8
9398: PPUSH
9399: LD_INT 1
9401: PPUSH
9402: CALL_OW 55
// end ;
9406: END
// export timer ; every 1 do
9407: GO 9409
9409: DISABLE
// timer := 0 0$00 ;
9410: LD_ADDR_EXP 24
9414: PUSH
9415: LD_INT 0
9417: ST_TO_ADDR
9418: END
// every 0 0$01 do
9419: GO 9421
9421: DISABLE
// begin enable ;
9422: ENABLE
// Display_Strings := [ #tick , timer ] ;
9423: LD_ADDR_OWVAR 47
9427: PUSH
9428: LD_STRING #tick
9430: PUSH
9431: LD_EXP 24
9435: PUSH
9436: EMPTY
9437: LIST
9438: LIST
9439: ST_TO_ADDR
// timer := timer + 0 0$01 ;
9440: LD_ADDR_EXP 24
9444: PUSH
9445: LD_EXP 24
9449: PUSH
9450: LD_INT 35
9452: PLUS
9453: ST_TO_ADDR
// end ; end_of_file
9454: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
9455: LD_INT 0
9457: PPUSH
// ar_miner := 81 ;
9458: LD_ADDR_EXP 32
9462: PUSH
9463: LD_INT 81
9465: ST_TO_ADDR
// ar_crane := 88 ;
9466: LD_ADDR_EXP 31
9470: PUSH
9471: LD_INT 88
9473: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
9474: LD_ADDR_EXP 26
9478: PUSH
9479: LD_INT 89
9481: ST_TO_ADDR
// us_hack := 99 ;
9482: LD_ADDR_EXP 27
9486: PUSH
9487: LD_INT 99
9489: ST_TO_ADDR
// us_artillery := 97 ;
9490: LD_ADDR_EXP 28
9494: PUSH
9495: LD_INT 97
9497: ST_TO_ADDR
// ar_bio_bomb := 91 ;
9498: LD_ADDR_EXP 29
9502: PUSH
9503: LD_INT 91
9505: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
9506: LD_ADDR_EXP 30
9510: PUSH
9511: LD_INT 92
9513: ST_TO_ADDR
// ru_radar := 98 ;
9514: LD_ADDR_EXP 25
9518: PUSH
9519: LD_INT 98
9521: ST_TO_ADDR
// tech_Artillery := 80 ;
9522: LD_ADDR_EXP 33
9526: PUSH
9527: LD_INT 80
9529: ST_TO_ADDR
// tech_RadMat := 81 ;
9530: LD_ADDR_EXP 34
9534: PUSH
9535: LD_INT 81
9537: ST_TO_ADDR
// tech_BasicTools := 82 ;
9538: LD_ADDR_EXP 35
9542: PUSH
9543: LD_INT 82
9545: ST_TO_ADDR
// tech_Cargo := 83 ;
9546: LD_ADDR_EXP 36
9550: PUSH
9551: LD_INT 83
9553: ST_TO_ADDR
// tech_Track := 84 ;
9554: LD_ADDR_EXP 37
9558: PUSH
9559: LD_INT 84
9561: ST_TO_ADDR
// tech_Crane := 85 ;
9562: LD_ADDR_EXP 38
9566: PUSH
9567: LD_INT 85
9569: ST_TO_ADDR
// tech_Bulldozer := 86 ;
9570: LD_ADDR_EXP 39
9574: PUSH
9575: LD_INT 86
9577: ST_TO_ADDR
// tech_Hovercraft := 87 ;
9578: LD_ADDR_EXP 40
9582: PUSH
9583: LD_INT 87
9585: ST_TO_ADDR
// class_mastodont := 31 ;
9586: LD_ADDR_EXP 41
9590: PUSH
9591: LD_INT 31
9593: ST_TO_ADDR
// class_horse := 21 ;
9594: LD_ADDR_EXP 42
9598: PUSH
9599: LD_INT 21
9601: ST_TO_ADDR
// end ;
9602: LD_VAR 0 1
9606: RET
// every 1 do
9607: GO 9609
9609: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
9610: CALL 9455 0 0
9614: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9615: LD_INT 0
9617: PPUSH
// if p2 = 100 then
9618: LD_VAR 0 2
9622: PUSH
9623: LD_INT 100
9625: EQUAL
9626: IFFALSE 10575
// begin if not StreamModeActive then
9628: LD_EXP 43
9632: NOT
9633: IFFALSE 9643
// StreamModeActive := true ;
9635: LD_ADDR_EXP 43
9639: PUSH
9640: LD_INT 1
9642: ST_TO_ADDR
// if p3 = 0 then
9643: LD_VAR 0 3
9647: PUSH
9648: LD_INT 0
9650: EQUAL
9651: IFFALSE 9657
// InitStreamMode ;
9653: CALL 10735 0 0
// if p3 = 1 then
9657: LD_VAR 0 3
9661: PUSH
9662: LD_INT 1
9664: EQUAL
9665: IFFALSE 9675
// sRocket := true ;
9667: LD_ADDR_EXP 48
9671: PUSH
9672: LD_INT 1
9674: ST_TO_ADDR
// if p3 = 2 then
9675: LD_VAR 0 3
9679: PUSH
9680: LD_INT 2
9682: EQUAL
9683: IFFALSE 9693
// sSpeed := true ;
9685: LD_ADDR_EXP 47
9689: PUSH
9690: LD_INT 1
9692: ST_TO_ADDR
// if p3 = 3 then
9693: LD_VAR 0 3
9697: PUSH
9698: LD_INT 3
9700: EQUAL
9701: IFFALSE 9711
// sEngine := true ;
9703: LD_ADDR_EXP 49
9707: PUSH
9708: LD_INT 1
9710: ST_TO_ADDR
// if p3 = 4 then
9711: LD_VAR 0 3
9715: PUSH
9716: LD_INT 4
9718: EQUAL
9719: IFFALSE 9729
// sSpec := true ;
9721: LD_ADDR_EXP 46
9725: PUSH
9726: LD_INT 1
9728: ST_TO_ADDR
// if p3 = 5 then
9729: LD_VAR 0 3
9733: PUSH
9734: LD_INT 5
9736: EQUAL
9737: IFFALSE 9747
// sLevel := true ;
9739: LD_ADDR_EXP 50
9743: PUSH
9744: LD_INT 1
9746: ST_TO_ADDR
// if p3 = 6 then
9747: LD_VAR 0 3
9751: PUSH
9752: LD_INT 6
9754: EQUAL
9755: IFFALSE 9765
// sArmoury := true ;
9757: LD_ADDR_EXP 51
9761: PUSH
9762: LD_INT 1
9764: ST_TO_ADDR
// if p3 = 7 then
9765: LD_VAR 0 3
9769: PUSH
9770: LD_INT 7
9772: EQUAL
9773: IFFALSE 9783
// sRadar := true ;
9775: LD_ADDR_EXP 52
9779: PUSH
9780: LD_INT 1
9782: ST_TO_ADDR
// if p3 = 8 then
9783: LD_VAR 0 3
9787: PUSH
9788: LD_INT 8
9790: EQUAL
9791: IFFALSE 9801
// sBunker := true ;
9793: LD_ADDR_EXP 53
9797: PUSH
9798: LD_INT 1
9800: ST_TO_ADDR
// if p3 = 9 then
9801: LD_VAR 0 3
9805: PUSH
9806: LD_INT 9
9808: EQUAL
9809: IFFALSE 9819
// sHack := true ;
9811: LD_ADDR_EXP 54
9815: PUSH
9816: LD_INT 1
9818: ST_TO_ADDR
// if p3 = 10 then
9819: LD_VAR 0 3
9823: PUSH
9824: LD_INT 10
9826: EQUAL
9827: IFFALSE 9837
// sFire := true ;
9829: LD_ADDR_EXP 55
9833: PUSH
9834: LD_INT 1
9836: ST_TO_ADDR
// if p3 = 11 then
9837: LD_VAR 0 3
9841: PUSH
9842: LD_INT 11
9844: EQUAL
9845: IFFALSE 9855
// sRefresh := true ;
9847: LD_ADDR_EXP 56
9851: PUSH
9852: LD_INT 1
9854: ST_TO_ADDR
// if p3 = 12 then
9855: LD_VAR 0 3
9859: PUSH
9860: LD_INT 12
9862: EQUAL
9863: IFFALSE 9873
// sExp := true ;
9865: LD_ADDR_EXP 57
9869: PUSH
9870: LD_INT 1
9872: ST_TO_ADDR
// if p3 = 13 then
9873: LD_VAR 0 3
9877: PUSH
9878: LD_INT 13
9880: EQUAL
9881: IFFALSE 9891
// sDepot := true ;
9883: LD_ADDR_EXP 58
9887: PUSH
9888: LD_INT 1
9890: ST_TO_ADDR
// if p3 = 14 then
9891: LD_VAR 0 3
9895: PUSH
9896: LD_INT 14
9898: EQUAL
9899: IFFALSE 9909
// sFlag := true ;
9901: LD_ADDR_EXP 59
9905: PUSH
9906: LD_INT 1
9908: ST_TO_ADDR
// if p3 = 15 then
9909: LD_VAR 0 3
9913: PUSH
9914: LD_INT 15
9916: EQUAL
9917: IFFALSE 9927
// sKamikadze := true ;
9919: LD_ADDR_EXP 67
9923: PUSH
9924: LD_INT 1
9926: ST_TO_ADDR
// if p3 = 16 then
9927: LD_VAR 0 3
9931: PUSH
9932: LD_INT 16
9934: EQUAL
9935: IFFALSE 9945
// sTroll := true ;
9937: LD_ADDR_EXP 68
9941: PUSH
9942: LD_INT 1
9944: ST_TO_ADDR
// if p3 = 17 then
9945: LD_VAR 0 3
9949: PUSH
9950: LD_INT 17
9952: EQUAL
9953: IFFALSE 9963
// sSlow := true ;
9955: LD_ADDR_EXP 69
9959: PUSH
9960: LD_INT 1
9962: ST_TO_ADDR
// if p3 = 18 then
9963: LD_VAR 0 3
9967: PUSH
9968: LD_INT 18
9970: EQUAL
9971: IFFALSE 9981
// sLack := true ;
9973: LD_ADDR_EXP 70
9977: PUSH
9978: LD_INT 1
9980: ST_TO_ADDR
// if p3 = 19 then
9981: LD_VAR 0 3
9985: PUSH
9986: LD_INT 19
9988: EQUAL
9989: IFFALSE 9999
// sTank := true ;
9991: LD_ADDR_EXP 72
9995: PUSH
9996: LD_INT 1
9998: ST_TO_ADDR
// if p3 = 20 then
9999: LD_VAR 0 3
10003: PUSH
10004: LD_INT 20
10006: EQUAL
10007: IFFALSE 10017
// sRemote := true ;
10009: LD_ADDR_EXP 73
10013: PUSH
10014: LD_INT 1
10016: ST_TO_ADDR
// if p3 = 21 then
10017: LD_VAR 0 3
10021: PUSH
10022: LD_INT 21
10024: EQUAL
10025: IFFALSE 10035
// sPowell := true ;
10027: LD_ADDR_EXP 74
10031: PUSH
10032: LD_INT 1
10034: ST_TO_ADDR
// if p3 = 22 then
10035: LD_VAR 0 3
10039: PUSH
10040: LD_INT 22
10042: EQUAL
10043: IFFALSE 10053
// sTeleport := true ;
10045: LD_ADDR_EXP 77
10049: PUSH
10050: LD_INT 1
10052: ST_TO_ADDR
// if p3 = 23 then
10053: LD_VAR 0 3
10057: PUSH
10058: LD_INT 23
10060: EQUAL
10061: IFFALSE 10071
// sOilTower := true ;
10063: LD_ADDR_EXP 79
10067: PUSH
10068: LD_INT 1
10070: ST_TO_ADDR
// if p3 = 24 then
10071: LD_VAR 0 3
10075: PUSH
10076: LD_INT 24
10078: EQUAL
10079: IFFALSE 10089
// sShovel := true ;
10081: LD_ADDR_EXP 80
10085: PUSH
10086: LD_INT 1
10088: ST_TO_ADDR
// if p3 = 25 then
10089: LD_VAR 0 3
10093: PUSH
10094: LD_INT 25
10096: EQUAL
10097: IFFALSE 10107
// sSheik := true ;
10099: LD_ADDR_EXP 81
10103: PUSH
10104: LD_INT 1
10106: ST_TO_ADDR
// if p3 = 26 then
10107: LD_VAR 0 3
10111: PUSH
10112: LD_INT 26
10114: EQUAL
10115: IFFALSE 10125
// sEarthquake := true ;
10117: LD_ADDR_EXP 83
10121: PUSH
10122: LD_INT 1
10124: ST_TO_ADDR
// if p3 = 27 then
10125: LD_VAR 0 3
10129: PUSH
10130: LD_INT 27
10132: EQUAL
10133: IFFALSE 10143
// sAI := true ;
10135: LD_ADDR_EXP 84
10139: PUSH
10140: LD_INT 1
10142: ST_TO_ADDR
// if p3 = 28 then
10143: LD_VAR 0 3
10147: PUSH
10148: LD_INT 28
10150: EQUAL
10151: IFFALSE 10161
// sCargo := true ;
10153: LD_ADDR_EXP 87
10157: PUSH
10158: LD_INT 1
10160: ST_TO_ADDR
// if p3 = 29 then
10161: LD_VAR 0 3
10165: PUSH
10166: LD_INT 29
10168: EQUAL
10169: IFFALSE 10179
// sDLaser := true ;
10171: LD_ADDR_EXP 88
10175: PUSH
10176: LD_INT 1
10178: ST_TO_ADDR
// if p3 = 30 then
10179: LD_VAR 0 3
10183: PUSH
10184: LD_INT 30
10186: EQUAL
10187: IFFALSE 10197
// sExchange := true ;
10189: LD_ADDR_EXP 89
10193: PUSH
10194: LD_INT 1
10196: ST_TO_ADDR
// if p3 = 31 then
10197: LD_VAR 0 3
10201: PUSH
10202: LD_INT 31
10204: EQUAL
10205: IFFALSE 10215
// sFac := true ;
10207: LD_ADDR_EXP 90
10211: PUSH
10212: LD_INT 1
10214: ST_TO_ADDR
// if p3 = 32 then
10215: LD_VAR 0 3
10219: PUSH
10220: LD_INT 32
10222: EQUAL
10223: IFFALSE 10233
// sPower := true ;
10225: LD_ADDR_EXP 91
10229: PUSH
10230: LD_INT 1
10232: ST_TO_ADDR
// if p3 = 33 then
10233: LD_VAR 0 3
10237: PUSH
10238: LD_INT 33
10240: EQUAL
10241: IFFALSE 10251
// sRandom := true ;
10243: LD_ADDR_EXP 92
10247: PUSH
10248: LD_INT 1
10250: ST_TO_ADDR
// if p3 = 34 then
10251: LD_VAR 0 3
10255: PUSH
10256: LD_INT 34
10258: EQUAL
10259: IFFALSE 10269
// sShield := true ;
10261: LD_ADDR_EXP 93
10265: PUSH
10266: LD_INT 1
10268: ST_TO_ADDR
// if p3 = 35 then
10269: LD_VAR 0 3
10273: PUSH
10274: LD_INT 35
10276: EQUAL
10277: IFFALSE 10287
// sTime := true ;
10279: LD_ADDR_EXP 94
10283: PUSH
10284: LD_INT 1
10286: ST_TO_ADDR
// if p3 = 36 then
10287: LD_VAR 0 3
10291: PUSH
10292: LD_INT 36
10294: EQUAL
10295: IFFALSE 10305
// sTools := true ;
10297: LD_ADDR_EXP 95
10301: PUSH
10302: LD_INT 1
10304: ST_TO_ADDR
// if p3 = 101 then
10305: LD_VAR 0 3
10309: PUSH
10310: LD_INT 101
10312: EQUAL
10313: IFFALSE 10323
// sSold := true ;
10315: LD_ADDR_EXP 60
10319: PUSH
10320: LD_INT 1
10322: ST_TO_ADDR
// if p3 = 102 then
10323: LD_VAR 0 3
10327: PUSH
10328: LD_INT 102
10330: EQUAL
10331: IFFALSE 10341
// sDiff := true ;
10333: LD_ADDR_EXP 61
10337: PUSH
10338: LD_INT 1
10340: ST_TO_ADDR
// if p3 = 103 then
10341: LD_VAR 0 3
10345: PUSH
10346: LD_INT 103
10348: EQUAL
10349: IFFALSE 10359
// sFog := true ;
10351: LD_ADDR_EXP 64
10355: PUSH
10356: LD_INT 1
10358: ST_TO_ADDR
// if p3 = 104 then
10359: LD_VAR 0 3
10363: PUSH
10364: LD_INT 104
10366: EQUAL
10367: IFFALSE 10377
// sReset := true ;
10369: LD_ADDR_EXP 65
10373: PUSH
10374: LD_INT 1
10376: ST_TO_ADDR
// if p3 = 105 then
10377: LD_VAR 0 3
10381: PUSH
10382: LD_INT 105
10384: EQUAL
10385: IFFALSE 10395
// sSun := true ;
10387: LD_ADDR_EXP 66
10391: PUSH
10392: LD_INT 1
10394: ST_TO_ADDR
// if p3 = 106 then
10395: LD_VAR 0 3
10399: PUSH
10400: LD_INT 106
10402: EQUAL
10403: IFFALSE 10413
// sTiger := true ;
10405: LD_ADDR_EXP 62
10409: PUSH
10410: LD_INT 1
10412: ST_TO_ADDR
// if p3 = 107 then
10413: LD_VAR 0 3
10417: PUSH
10418: LD_INT 107
10420: EQUAL
10421: IFFALSE 10431
// sBomb := true ;
10423: LD_ADDR_EXP 63
10427: PUSH
10428: LD_INT 1
10430: ST_TO_ADDR
// if p3 = 108 then
10431: LD_VAR 0 3
10435: PUSH
10436: LD_INT 108
10438: EQUAL
10439: IFFALSE 10449
// sWound := true ;
10441: LD_ADDR_EXP 71
10445: PUSH
10446: LD_INT 1
10448: ST_TO_ADDR
// if p3 = 109 then
10449: LD_VAR 0 3
10453: PUSH
10454: LD_INT 109
10456: EQUAL
10457: IFFALSE 10467
// sBetray := true ;
10459: LD_ADDR_EXP 75
10463: PUSH
10464: LD_INT 1
10466: ST_TO_ADDR
// if p3 = 110 then
10467: LD_VAR 0 3
10471: PUSH
10472: LD_INT 110
10474: EQUAL
10475: IFFALSE 10485
// sContamin := true ;
10477: LD_ADDR_EXP 76
10481: PUSH
10482: LD_INT 1
10484: ST_TO_ADDR
// if p3 = 111 then
10485: LD_VAR 0 3
10489: PUSH
10490: LD_INT 111
10492: EQUAL
10493: IFFALSE 10503
// sOil := true ;
10495: LD_ADDR_EXP 78
10499: PUSH
10500: LD_INT 1
10502: ST_TO_ADDR
// if p3 = 112 then
10503: LD_VAR 0 3
10507: PUSH
10508: LD_INT 112
10510: EQUAL
10511: IFFALSE 10521
// sStu := true ;
10513: LD_ADDR_EXP 82
10517: PUSH
10518: LD_INT 1
10520: ST_TO_ADDR
// if p3 = 113 then
10521: LD_VAR 0 3
10525: PUSH
10526: LD_INT 113
10528: EQUAL
10529: IFFALSE 10539
// sBazooka := true ;
10531: LD_ADDR_EXP 85
10535: PUSH
10536: LD_INT 1
10538: ST_TO_ADDR
// if p3 = 114 then
10539: LD_VAR 0 3
10543: PUSH
10544: LD_INT 114
10546: EQUAL
10547: IFFALSE 10557
// sMortar := true ;
10549: LD_ADDR_EXP 86
10553: PUSH
10554: LD_INT 1
10556: ST_TO_ADDR
// if p3 = 115 then
10557: LD_VAR 0 3
10561: PUSH
10562: LD_INT 115
10564: EQUAL
10565: IFFALSE 10575
// sRanger := true ;
10567: LD_ADDR_EXP 96
10571: PUSH
10572: LD_INT 1
10574: ST_TO_ADDR
// end ; if p2 = 101 then
10575: LD_VAR 0 2
10579: PUSH
10580: LD_INT 101
10582: EQUAL
10583: IFFALSE 10711
// begin case p3 of 1 :
10585: LD_VAR 0 3
10589: PUSH
10590: LD_INT 1
10592: DOUBLE
10593: EQUAL
10594: IFTRUE 10598
10596: GO 10605
10598: POP
// hHackUnlimitedResources ; 2 :
10599: CALL 21748 0 0
10603: GO 10711
10605: LD_INT 2
10607: DOUBLE
10608: EQUAL
10609: IFTRUE 10613
10611: GO 10620
10613: POP
// hHackSetLevel10 ; 3 :
10614: CALL 21881 0 0
10618: GO 10711
10620: LD_INT 3
10622: DOUBLE
10623: EQUAL
10624: IFTRUE 10628
10626: GO 10635
10628: POP
// hHackSetLevel10YourUnits ; 4 :
10629: CALL 21966 0 0
10633: GO 10711
10635: LD_INT 4
10637: DOUBLE
10638: EQUAL
10639: IFTRUE 10643
10641: GO 10650
10643: POP
// hHackInvincible ; 5 :
10644: CALL 22414 0 0
10648: GO 10711
10650: LD_INT 5
10652: DOUBLE
10653: EQUAL
10654: IFTRUE 10658
10656: GO 10665
10658: POP
// hHackInvisible ; 6 :
10659: CALL 22525 0 0
10663: GO 10711
10665: LD_INT 6
10667: DOUBLE
10668: EQUAL
10669: IFTRUE 10673
10671: GO 10680
10673: POP
// hHackChangeYourSide ; 7 :
10674: CALL 22582 0 0
10678: GO 10711
10680: LD_INT 7
10682: DOUBLE
10683: EQUAL
10684: IFTRUE 10688
10686: GO 10695
10688: POP
// hHackChangeUnitSide ; 8 :
10689: CALL 22624 0 0
10693: GO 10711
10695: LD_INT 8
10697: DOUBLE
10698: EQUAL
10699: IFTRUE 10703
10701: GO 10710
10703: POP
// hHackFog ; end ;
10704: CALL 22725 0 0
10708: GO 10711
10710: POP
// end ; end ;
10711: LD_VAR 0 7
10715: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
10716: GO 10718
10718: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
10719: LD_STRING initStreamRollete();
10721: PPUSH
10722: CALL_OW 559
// InitStreamMode ;
10726: CALL 10735 0 0
// DefineStreamItems ( ) ;
10730: CALL 11175 0 0
// end ;
10734: END
// function InitStreamMode ; begin
10735: LD_INT 0
10737: PPUSH
// streamModeActive := false ;
10738: LD_ADDR_EXP 43
10742: PUSH
10743: LD_INT 0
10745: ST_TO_ADDR
// normalCounter := 36 ;
10746: LD_ADDR_EXP 44
10750: PUSH
10751: LD_INT 36
10753: ST_TO_ADDR
// hardcoreCounter := 16 ;
10754: LD_ADDR_EXP 45
10758: PUSH
10759: LD_INT 16
10761: ST_TO_ADDR
// sRocket := false ;
10762: LD_ADDR_EXP 48
10766: PUSH
10767: LD_INT 0
10769: ST_TO_ADDR
// sSpeed := false ;
10770: LD_ADDR_EXP 47
10774: PUSH
10775: LD_INT 0
10777: ST_TO_ADDR
// sEngine := false ;
10778: LD_ADDR_EXP 49
10782: PUSH
10783: LD_INT 0
10785: ST_TO_ADDR
// sSpec := false ;
10786: LD_ADDR_EXP 46
10790: PUSH
10791: LD_INT 0
10793: ST_TO_ADDR
// sLevel := false ;
10794: LD_ADDR_EXP 50
10798: PUSH
10799: LD_INT 0
10801: ST_TO_ADDR
// sArmoury := false ;
10802: LD_ADDR_EXP 51
10806: PUSH
10807: LD_INT 0
10809: ST_TO_ADDR
// sRadar := false ;
10810: LD_ADDR_EXP 52
10814: PUSH
10815: LD_INT 0
10817: ST_TO_ADDR
// sBunker := false ;
10818: LD_ADDR_EXP 53
10822: PUSH
10823: LD_INT 0
10825: ST_TO_ADDR
// sHack := false ;
10826: LD_ADDR_EXP 54
10830: PUSH
10831: LD_INT 0
10833: ST_TO_ADDR
// sFire := false ;
10834: LD_ADDR_EXP 55
10838: PUSH
10839: LD_INT 0
10841: ST_TO_ADDR
// sRefresh := false ;
10842: LD_ADDR_EXP 56
10846: PUSH
10847: LD_INT 0
10849: ST_TO_ADDR
// sExp := false ;
10850: LD_ADDR_EXP 57
10854: PUSH
10855: LD_INT 0
10857: ST_TO_ADDR
// sDepot := false ;
10858: LD_ADDR_EXP 58
10862: PUSH
10863: LD_INT 0
10865: ST_TO_ADDR
// sFlag := false ;
10866: LD_ADDR_EXP 59
10870: PUSH
10871: LD_INT 0
10873: ST_TO_ADDR
// sKamikadze := false ;
10874: LD_ADDR_EXP 67
10878: PUSH
10879: LD_INT 0
10881: ST_TO_ADDR
// sTroll := false ;
10882: LD_ADDR_EXP 68
10886: PUSH
10887: LD_INT 0
10889: ST_TO_ADDR
// sSlow := false ;
10890: LD_ADDR_EXP 69
10894: PUSH
10895: LD_INT 0
10897: ST_TO_ADDR
// sLack := false ;
10898: LD_ADDR_EXP 70
10902: PUSH
10903: LD_INT 0
10905: ST_TO_ADDR
// sTank := false ;
10906: LD_ADDR_EXP 72
10910: PUSH
10911: LD_INT 0
10913: ST_TO_ADDR
// sRemote := false ;
10914: LD_ADDR_EXP 73
10918: PUSH
10919: LD_INT 0
10921: ST_TO_ADDR
// sPowell := false ;
10922: LD_ADDR_EXP 74
10926: PUSH
10927: LD_INT 0
10929: ST_TO_ADDR
// sTeleport := false ;
10930: LD_ADDR_EXP 77
10934: PUSH
10935: LD_INT 0
10937: ST_TO_ADDR
// sOilTower := false ;
10938: LD_ADDR_EXP 79
10942: PUSH
10943: LD_INT 0
10945: ST_TO_ADDR
// sShovel := false ;
10946: LD_ADDR_EXP 80
10950: PUSH
10951: LD_INT 0
10953: ST_TO_ADDR
// sSheik := false ;
10954: LD_ADDR_EXP 81
10958: PUSH
10959: LD_INT 0
10961: ST_TO_ADDR
// sEarthquake := false ;
10962: LD_ADDR_EXP 83
10966: PUSH
10967: LD_INT 0
10969: ST_TO_ADDR
// sAI := false ;
10970: LD_ADDR_EXP 84
10974: PUSH
10975: LD_INT 0
10977: ST_TO_ADDR
// sCargo := false ;
10978: LD_ADDR_EXP 87
10982: PUSH
10983: LD_INT 0
10985: ST_TO_ADDR
// sDLaser := false ;
10986: LD_ADDR_EXP 88
10990: PUSH
10991: LD_INT 0
10993: ST_TO_ADDR
// sExchange := false ;
10994: LD_ADDR_EXP 89
10998: PUSH
10999: LD_INT 0
11001: ST_TO_ADDR
// sFac := false ;
11002: LD_ADDR_EXP 90
11006: PUSH
11007: LD_INT 0
11009: ST_TO_ADDR
// sPower := false ;
11010: LD_ADDR_EXP 91
11014: PUSH
11015: LD_INT 0
11017: ST_TO_ADDR
// sRandom := false ;
11018: LD_ADDR_EXP 92
11022: PUSH
11023: LD_INT 0
11025: ST_TO_ADDR
// sShield := false ;
11026: LD_ADDR_EXP 93
11030: PUSH
11031: LD_INT 0
11033: ST_TO_ADDR
// sTime := false ;
11034: LD_ADDR_EXP 94
11038: PUSH
11039: LD_INT 0
11041: ST_TO_ADDR
// sTools := false ;
11042: LD_ADDR_EXP 95
11046: PUSH
11047: LD_INT 0
11049: ST_TO_ADDR
// sSold := false ;
11050: LD_ADDR_EXP 60
11054: PUSH
11055: LD_INT 0
11057: ST_TO_ADDR
// sDiff := false ;
11058: LD_ADDR_EXP 61
11062: PUSH
11063: LD_INT 0
11065: ST_TO_ADDR
// sFog := false ;
11066: LD_ADDR_EXP 64
11070: PUSH
11071: LD_INT 0
11073: ST_TO_ADDR
// sReset := false ;
11074: LD_ADDR_EXP 65
11078: PUSH
11079: LD_INT 0
11081: ST_TO_ADDR
// sSun := false ;
11082: LD_ADDR_EXP 66
11086: PUSH
11087: LD_INT 0
11089: ST_TO_ADDR
// sTiger := false ;
11090: LD_ADDR_EXP 62
11094: PUSH
11095: LD_INT 0
11097: ST_TO_ADDR
// sBomb := false ;
11098: LD_ADDR_EXP 63
11102: PUSH
11103: LD_INT 0
11105: ST_TO_ADDR
// sWound := false ;
11106: LD_ADDR_EXP 71
11110: PUSH
11111: LD_INT 0
11113: ST_TO_ADDR
// sBetray := false ;
11114: LD_ADDR_EXP 75
11118: PUSH
11119: LD_INT 0
11121: ST_TO_ADDR
// sContamin := false ;
11122: LD_ADDR_EXP 76
11126: PUSH
11127: LD_INT 0
11129: ST_TO_ADDR
// sOil := false ;
11130: LD_ADDR_EXP 78
11134: PUSH
11135: LD_INT 0
11137: ST_TO_ADDR
// sStu := false ;
11138: LD_ADDR_EXP 82
11142: PUSH
11143: LD_INT 0
11145: ST_TO_ADDR
// sBazooka := false ;
11146: LD_ADDR_EXP 85
11150: PUSH
11151: LD_INT 0
11153: ST_TO_ADDR
// sMortar := false ;
11154: LD_ADDR_EXP 86
11158: PUSH
11159: LD_INT 0
11161: ST_TO_ADDR
// sRanger := false ;
11162: LD_ADDR_EXP 96
11166: PUSH
11167: LD_INT 0
11169: ST_TO_ADDR
// end ;
11170: LD_VAR 0 1
11174: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
11175: LD_INT 0
11177: PPUSH
11178: PPUSH
11179: PPUSH
11180: PPUSH
11181: PPUSH
// result := [ ] ;
11182: LD_ADDR_VAR 0 1
11186: PUSH
11187: EMPTY
11188: ST_TO_ADDR
// if campaign_id = 1 then
11189: LD_OWVAR 69
11193: PUSH
11194: LD_INT 1
11196: EQUAL
11197: IFFALSE 14135
// begin case mission_number of 1 :
11199: LD_OWVAR 70
11203: PUSH
11204: LD_INT 1
11206: DOUBLE
11207: EQUAL
11208: IFTRUE 11212
11210: GO 11276
11212: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
11213: LD_ADDR_VAR 0 1
11217: PUSH
11218: LD_INT 2
11220: PUSH
11221: LD_INT 4
11223: PUSH
11224: LD_INT 11
11226: PUSH
11227: LD_INT 12
11229: PUSH
11230: LD_INT 15
11232: PUSH
11233: LD_INT 16
11235: PUSH
11236: LD_INT 22
11238: PUSH
11239: LD_INT 23
11241: PUSH
11242: LD_INT 26
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: PUSH
11256: LD_INT 101
11258: PUSH
11259: LD_INT 102
11261: PUSH
11262: LD_INT 106
11264: PUSH
11265: EMPTY
11266: LIST
11267: LIST
11268: LIST
11269: PUSH
11270: EMPTY
11271: LIST
11272: LIST
11273: ST_TO_ADDR
11274: GO 14133
11276: LD_INT 2
11278: DOUBLE
11279: EQUAL
11280: IFTRUE 11284
11282: GO 11356
11284: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
11285: LD_ADDR_VAR 0 1
11289: PUSH
11290: LD_INT 2
11292: PUSH
11293: LD_INT 4
11295: PUSH
11296: LD_INT 11
11298: PUSH
11299: LD_INT 12
11301: PUSH
11302: LD_INT 15
11304: PUSH
11305: LD_INT 16
11307: PUSH
11308: LD_INT 22
11310: PUSH
11311: LD_INT 23
11313: PUSH
11314: LD_INT 26
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: PUSH
11328: LD_INT 101
11330: PUSH
11331: LD_INT 102
11333: PUSH
11334: LD_INT 105
11336: PUSH
11337: LD_INT 106
11339: PUSH
11340: LD_INT 108
11342: PUSH
11343: EMPTY
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: ST_TO_ADDR
11354: GO 14133
11356: LD_INT 3
11358: DOUBLE
11359: EQUAL
11360: IFTRUE 11364
11362: GO 11440
11364: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
11365: LD_ADDR_VAR 0 1
11369: PUSH
11370: LD_INT 2
11372: PUSH
11373: LD_INT 4
11375: PUSH
11376: LD_INT 5
11378: PUSH
11379: LD_INT 11
11381: PUSH
11382: LD_INT 12
11384: PUSH
11385: LD_INT 15
11387: PUSH
11388: LD_INT 16
11390: PUSH
11391: LD_INT 22
11393: PUSH
11394: LD_INT 26
11396: PUSH
11397: LD_INT 36
11399: PUSH
11400: EMPTY
11401: LIST
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: PUSH
11412: LD_INT 101
11414: PUSH
11415: LD_INT 102
11417: PUSH
11418: LD_INT 105
11420: PUSH
11421: LD_INT 106
11423: PUSH
11424: LD_INT 108
11426: PUSH
11427: EMPTY
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: ST_TO_ADDR
11438: GO 14133
11440: LD_INT 4
11442: DOUBLE
11443: EQUAL
11444: IFTRUE 11448
11446: GO 11532
11448: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
11449: LD_ADDR_VAR 0 1
11453: PUSH
11454: LD_INT 2
11456: PUSH
11457: LD_INT 4
11459: PUSH
11460: LD_INT 5
11462: PUSH
11463: LD_INT 8
11465: PUSH
11466: LD_INT 11
11468: PUSH
11469: LD_INT 12
11471: PUSH
11472: LD_INT 15
11474: PUSH
11475: LD_INT 16
11477: PUSH
11478: LD_INT 22
11480: PUSH
11481: LD_INT 23
11483: PUSH
11484: LD_INT 26
11486: PUSH
11487: LD_INT 36
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: PUSH
11504: LD_INT 101
11506: PUSH
11507: LD_INT 102
11509: PUSH
11510: LD_INT 105
11512: PUSH
11513: LD_INT 106
11515: PUSH
11516: LD_INT 108
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: ST_TO_ADDR
11530: GO 14133
11532: LD_INT 5
11534: DOUBLE
11535: EQUAL
11536: IFTRUE 11540
11538: GO 11640
11540: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
11541: LD_ADDR_VAR 0 1
11545: PUSH
11546: LD_INT 2
11548: PUSH
11549: LD_INT 4
11551: PUSH
11552: LD_INT 5
11554: PUSH
11555: LD_INT 6
11557: PUSH
11558: LD_INT 8
11560: PUSH
11561: LD_INT 11
11563: PUSH
11564: LD_INT 12
11566: PUSH
11567: LD_INT 15
11569: PUSH
11570: LD_INT 16
11572: PUSH
11573: LD_INT 22
11575: PUSH
11576: LD_INT 23
11578: PUSH
11579: LD_INT 25
11581: PUSH
11582: LD_INT 26
11584: PUSH
11585: LD_INT 36
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: PUSH
11604: LD_INT 101
11606: PUSH
11607: LD_INT 102
11609: PUSH
11610: LD_INT 105
11612: PUSH
11613: LD_INT 106
11615: PUSH
11616: LD_INT 108
11618: PUSH
11619: LD_INT 109
11621: PUSH
11622: LD_INT 112
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: LIST
11633: PUSH
11634: EMPTY
11635: LIST
11636: LIST
11637: ST_TO_ADDR
11638: GO 14133
11640: LD_INT 6
11642: DOUBLE
11643: EQUAL
11644: IFTRUE 11648
11646: GO 11768
11648: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
11649: LD_ADDR_VAR 0 1
11653: PUSH
11654: LD_INT 2
11656: PUSH
11657: LD_INT 4
11659: PUSH
11660: LD_INT 5
11662: PUSH
11663: LD_INT 6
11665: PUSH
11666: LD_INT 8
11668: PUSH
11669: LD_INT 11
11671: PUSH
11672: LD_INT 12
11674: PUSH
11675: LD_INT 15
11677: PUSH
11678: LD_INT 16
11680: PUSH
11681: LD_INT 20
11683: PUSH
11684: LD_INT 21
11686: PUSH
11687: LD_INT 22
11689: PUSH
11690: LD_INT 23
11692: PUSH
11693: LD_INT 25
11695: PUSH
11696: LD_INT 26
11698: PUSH
11699: LD_INT 30
11701: PUSH
11702: LD_INT 31
11704: PUSH
11705: LD_INT 32
11707: PUSH
11708: LD_INT 36
11710: PUSH
11711: EMPTY
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: PUSH
11732: LD_INT 101
11734: PUSH
11735: LD_INT 102
11737: PUSH
11738: LD_INT 105
11740: PUSH
11741: LD_INT 106
11743: PUSH
11744: LD_INT 108
11746: PUSH
11747: LD_INT 109
11749: PUSH
11750: LD_INT 112
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: PUSH
11762: EMPTY
11763: LIST
11764: LIST
11765: ST_TO_ADDR
11766: GO 14133
11768: LD_INT 7
11770: DOUBLE
11771: EQUAL
11772: IFTRUE 11776
11774: GO 11876
11776: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
11777: LD_ADDR_VAR 0 1
11781: PUSH
11782: LD_INT 2
11784: PUSH
11785: LD_INT 4
11787: PUSH
11788: LD_INT 5
11790: PUSH
11791: LD_INT 7
11793: PUSH
11794: LD_INT 11
11796: PUSH
11797: LD_INT 12
11799: PUSH
11800: LD_INT 15
11802: PUSH
11803: LD_INT 16
11805: PUSH
11806: LD_INT 20
11808: PUSH
11809: LD_INT 21
11811: PUSH
11812: LD_INT 22
11814: PUSH
11815: LD_INT 23
11817: PUSH
11818: LD_INT 25
11820: PUSH
11821: LD_INT 26
11823: PUSH
11824: EMPTY
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: PUSH
11840: LD_INT 101
11842: PUSH
11843: LD_INT 102
11845: PUSH
11846: LD_INT 103
11848: PUSH
11849: LD_INT 105
11851: PUSH
11852: LD_INT 106
11854: PUSH
11855: LD_INT 108
11857: PUSH
11858: LD_INT 112
11860: PUSH
11861: EMPTY
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: PUSH
11870: EMPTY
11871: LIST
11872: LIST
11873: ST_TO_ADDR
11874: GO 14133
11876: LD_INT 8
11878: DOUBLE
11879: EQUAL
11880: IFTRUE 11884
11882: GO 12012
11884: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
11885: LD_ADDR_VAR 0 1
11889: PUSH
11890: LD_INT 2
11892: PUSH
11893: LD_INT 4
11895: PUSH
11896: LD_INT 5
11898: PUSH
11899: LD_INT 6
11901: PUSH
11902: LD_INT 7
11904: PUSH
11905: LD_INT 8
11907: PUSH
11908: LD_INT 11
11910: PUSH
11911: LD_INT 12
11913: PUSH
11914: LD_INT 15
11916: PUSH
11917: LD_INT 16
11919: PUSH
11920: LD_INT 20
11922: PUSH
11923: LD_INT 21
11925: PUSH
11926: LD_INT 22
11928: PUSH
11929: LD_INT 23
11931: PUSH
11932: LD_INT 25
11934: PUSH
11935: LD_INT 26
11937: PUSH
11938: LD_INT 30
11940: PUSH
11941: LD_INT 31
11943: PUSH
11944: LD_INT 32
11946: PUSH
11947: LD_INT 36
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: PUSH
11972: LD_INT 101
11974: PUSH
11975: LD_INT 102
11977: PUSH
11978: LD_INT 103
11980: PUSH
11981: LD_INT 105
11983: PUSH
11984: LD_INT 106
11986: PUSH
11987: LD_INT 108
11989: PUSH
11990: LD_INT 109
11992: PUSH
11993: LD_INT 112
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: ST_TO_ADDR
12010: GO 14133
12012: LD_INT 9
12014: DOUBLE
12015: EQUAL
12016: IFTRUE 12020
12018: GO 12156
12020: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
12021: LD_ADDR_VAR 0 1
12025: PUSH
12026: LD_INT 2
12028: PUSH
12029: LD_INT 4
12031: PUSH
12032: LD_INT 5
12034: PUSH
12035: LD_INT 6
12037: PUSH
12038: LD_INT 7
12040: PUSH
12041: LD_INT 8
12043: PUSH
12044: LD_INT 11
12046: PUSH
12047: LD_INT 12
12049: PUSH
12050: LD_INT 15
12052: PUSH
12053: LD_INT 16
12055: PUSH
12056: LD_INT 20
12058: PUSH
12059: LD_INT 21
12061: PUSH
12062: LD_INT 22
12064: PUSH
12065: LD_INT 23
12067: PUSH
12068: LD_INT 25
12070: PUSH
12071: LD_INT 26
12073: PUSH
12074: LD_INT 28
12076: PUSH
12077: LD_INT 30
12079: PUSH
12080: LD_INT 31
12082: PUSH
12083: LD_INT 32
12085: PUSH
12086: LD_INT 36
12088: PUSH
12089: EMPTY
12090: LIST
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: PUSH
12112: LD_INT 101
12114: PUSH
12115: LD_INT 102
12117: PUSH
12118: LD_INT 103
12120: PUSH
12121: LD_INT 105
12123: PUSH
12124: LD_INT 106
12126: PUSH
12127: LD_INT 108
12129: PUSH
12130: LD_INT 109
12132: PUSH
12133: LD_INT 112
12135: PUSH
12136: LD_INT 114
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: ST_TO_ADDR
12154: GO 14133
12156: LD_INT 10
12158: DOUBLE
12159: EQUAL
12160: IFTRUE 12164
12162: GO 12348
12164: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
12165: LD_ADDR_VAR 0 1
12169: PUSH
12170: LD_INT 2
12172: PUSH
12173: LD_INT 4
12175: PUSH
12176: LD_INT 5
12178: PUSH
12179: LD_INT 6
12181: PUSH
12182: LD_INT 7
12184: PUSH
12185: LD_INT 8
12187: PUSH
12188: LD_INT 9
12190: PUSH
12191: LD_INT 10
12193: PUSH
12194: LD_INT 11
12196: PUSH
12197: LD_INT 12
12199: PUSH
12200: LD_INT 13
12202: PUSH
12203: LD_INT 14
12205: PUSH
12206: LD_INT 15
12208: PUSH
12209: LD_INT 16
12211: PUSH
12212: LD_INT 17
12214: PUSH
12215: LD_INT 18
12217: PUSH
12218: LD_INT 19
12220: PUSH
12221: LD_INT 20
12223: PUSH
12224: LD_INT 21
12226: PUSH
12227: LD_INT 22
12229: PUSH
12230: LD_INT 23
12232: PUSH
12233: LD_INT 24
12235: PUSH
12236: LD_INT 25
12238: PUSH
12239: LD_INT 26
12241: PUSH
12242: LD_INT 28
12244: PUSH
12245: LD_INT 30
12247: PUSH
12248: LD_INT 31
12250: PUSH
12251: LD_INT 32
12253: PUSH
12254: LD_INT 36
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: PUSH
12288: LD_INT 101
12290: PUSH
12291: LD_INT 102
12293: PUSH
12294: LD_INT 103
12296: PUSH
12297: LD_INT 104
12299: PUSH
12300: LD_INT 105
12302: PUSH
12303: LD_INT 106
12305: PUSH
12306: LD_INT 107
12308: PUSH
12309: LD_INT 108
12311: PUSH
12312: LD_INT 109
12314: PUSH
12315: LD_INT 110
12317: PUSH
12318: LD_INT 111
12320: PUSH
12321: LD_INT 112
12323: PUSH
12324: LD_INT 114
12326: PUSH
12327: EMPTY
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: ST_TO_ADDR
12346: GO 14133
12348: LD_INT 11
12350: DOUBLE
12351: EQUAL
12352: IFTRUE 12356
12354: GO 12548
12356: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
12357: LD_ADDR_VAR 0 1
12361: PUSH
12362: LD_INT 2
12364: PUSH
12365: LD_INT 3
12367: PUSH
12368: LD_INT 4
12370: PUSH
12371: LD_INT 5
12373: PUSH
12374: LD_INT 6
12376: PUSH
12377: LD_INT 7
12379: PUSH
12380: LD_INT 8
12382: PUSH
12383: LD_INT 9
12385: PUSH
12386: LD_INT 10
12388: PUSH
12389: LD_INT 11
12391: PUSH
12392: LD_INT 12
12394: PUSH
12395: LD_INT 13
12397: PUSH
12398: LD_INT 14
12400: PUSH
12401: LD_INT 15
12403: PUSH
12404: LD_INT 16
12406: PUSH
12407: LD_INT 17
12409: PUSH
12410: LD_INT 18
12412: PUSH
12413: LD_INT 19
12415: PUSH
12416: LD_INT 20
12418: PUSH
12419: LD_INT 21
12421: PUSH
12422: LD_INT 22
12424: PUSH
12425: LD_INT 23
12427: PUSH
12428: LD_INT 24
12430: PUSH
12431: LD_INT 25
12433: PUSH
12434: LD_INT 26
12436: PUSH
12437: LD_INT 28
12439: PUSH
12440: LD_INT 30
12442: PUSH
12443: LD_INT 31
12445: PUSH
12446: LD_INT 32
12448: PUSH
12449: LD_INT 34
12451: PUSH
12452: LD_INT 36
12454: PUSH
12455: EMPTY
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: PUSH
12488: LD_INT 101
12490: PUSH
12491: LD_INT 102
12493: PUSH
12494: LD_INT 103
12496: PUSH
12497: LD_INT 104
12499: PUSH
12500: LD_INT 105
12502: PUSH
12503: LD_INT 106
12505: PUSH
12506: LD_INT 107
12508: PUSH
12509: LD_INT 108
12511: PUSH
12512: LD_INT 109
12514: PUSH
12515: LD_INT 110
12517: PUSH
12518: LD_INT 111
12520: PUSH
12521: LD_INT 112
12523: PUSH
12524: LD_INT 114
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: ST_TO_ADDR
12546: GO 14133
12548: LD_INT 12
12550: DOUBLE
12551: EQUAL
12552: IFTRUE 12556
12554: GO 12764
12556: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
12557: LD_ADDR_VAR 0 1
12561: PUSH
12562: LD_INT 1
12564: PUSH
12565: LD_INT 2
12567: PUSH
12568: LD_INT 3
12570: PUSH
12571: LD_INT 4
12573: PUSH
12574: LD_INT 5
12576: PUSH
12577: LD_INT 6
12579: PUSH
12580: LD_INT 7
12582: PUSH
12583: LD_INT 8
12585: PUSH
12586: LD_INT 9
12588: PUSH
12589: LD_INT 10
12591: PUSH
12592: LD_INT 11
12594: PUSH
12595: LD_INT 12
12597: PUSH
12598: LD_INT 13
12600: PUSH
12601: LD_INT 14
12603: PUSH
12604: LD_INT 15
12606: PUSH
12607: LD_INT 16
12609: PUSH
12610: LD_INT 17
12612: PUSH
12613: LD_INT 18
12615: PUSH
12616: LD_INT 19
12618: PUSH
12619: LD_INT 20
12621: PUSH
12622: LD_INT 21
12624: PUSH
12625: LD_INT 22
12627: PUSH
12628: LD_INT 23
12630: PUSH
12631: LD_INT 24
12633: PUSH
12634: LD_INT 25
12636: PUSH
12637: LD_INT 26
12639: PUSH
12640: LD_INT 27
12642: PUSH
12643: LD_INT 28
12645: PUSH
12646: LD_INT 30
12648: PUSH
12649: LD_INT 31
12651: PUSH
12652: LD_INT 32
12654: PUSH
12655: LD_INT 33
12657: PUSH
12658: LD_INT 34
12660: PUSH
12661: LD_INT 36
12663: PUSH
12664: EMPTY
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: PUSH
12700: LD_INT 101
12702: PUSH
12703: LD_INT 102
12705: PUSH
12706: LD_INT 103
12708: PUSH
12709: LD_INT 104
12711: PUSH
12712: LD_INT 105
12714: PUSH
12715: LD_INT 106
12717: PUSH
12718: LD_INT 107
12720: PUSH
12721: LD_INT 108
12723: PUSH
12724: LD_INT 109
12726: PUSH
12727: LD_INT 110
12729: PUSH
12730: LD_INT 111
12732: PUSH
12733: LD_INT 112
12735: PUSH
12736: LD_INT 113
12738: PUSH
12739: LD_INT 114
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: PUSH
12758: EMPTY
12759: LIST
12760: LIST
12761: ST_TO_ADDR
12762: GO 14133
12764: LD_INT 13
12766: DOUBLE
12767: EQUAL
12768: IFTRUE 12772
12770: GO 12968
12772: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
12773: LD_ADDR_VAR 0 1
12777: PUSH
12778: LD_INT 1
12780: PUSH
12781: LD_INT 2
12783: PUSH
12784: LD_INT 3
12786: PUSH
12787: LD_INT 4
12789: PUSH
12790: LD_INT 5
12792: PUSH
12793: LD_INT 8
12795: PUSH
12796: LD_INT 9
12798: PUSH
12799: LD_INT 10
12801: PUSH
12802: LD_INT 11
12804: PUSH
12805: LD_INT 12
12807: PUSH
12808: LD_INT 14
12810: PUSH
12811: LD_INT 15
12813: PUSH
12814: LD_INT 16
12816: PUSH
12817: LD_INT 17
12819: PUSH
12820: LD_INT 18
12822: PUSH
12823: LD_INT 19
12825: PUSH
12826: LD_INT 20
12828: PUSH
12829: LD_INT 21
12831: PUSH
12832: LD_INT 22
12834: PUSH
12835: LD_INT 23
12837: PUSH
12838: LD_INT 24
12840: PUSH
12841: LD_INT 25
12843: PUSH
12844: LD_INT 26
12846: PUSH
12847: LD_INT 27
12849: PUSH
12850: LD_INT 28
12852: PUSH
12853: LD_INT 30
12855: PUSH
12856: LD_INT 31
12858: PUSH
12859: LD_INT 32
12861: PUSH
12862: LD_INT 33
12864: PUSH
12865: LD_INT 34
12867: PUSH
12868: LD_INT 36
12870: PUSH
12871: EMPTY
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: PUSH
12904: LD_INT 101
12906: PUSH
12907: LD_INT 102
12909: PUSH
12910: LD_INT 103
12912: PUSH
12913: LD_INT 104
12915: PUSH
12916: LD_INT 105
12918: PUSH
12919: LD_INT 106
12921: PUSH
12922: LD_INT 107
12924: PUSH
12925: LD_INT 108
12927: PUSH
12928: LD_INT 109
12930: PUSH
12931: LD_INT 110
12933: PUSH
12934: LD_INT 111
12936: PUSH
12937: LD_INT 112
12939: PUSH
12940: LD_INT 113
12942: PUSH
12943: LD_INT 114
12945: PUSH
12946: EMPTY
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: ST_TO_ADDR
12966: GO 14133
12968: LD_INT 14
12970: DOUBLE
12971: EQUAL
12972: IFTRUE 12976
12974: GO 13188
12976: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
12977: LD_ADDR_VAR 0 1
12981: PUSH
12982: LD_INT 1
12984: PUSH
12985: LD_INT 2
12987: PUSH
12988: LD_INT 3
12990: PUSH
12991: LD_INT 4
12993: PUSH
12994: LD_INT 5
12996: PUSH
12997: LD_INT 6
12999: PUSH
13000: LD_INT 7
13002: PUSH
13003: LD_INT 8
13005: PUSH
13006: LD_INT 9
13008: PUSH
13009: LD_INT 10
13011: PUSH
13012: LD_INT 11
13014: PUSH
13015: LD_INT 12
13017: PUSH
13018: LD_INT 13
13020: PUSH
13021: LD_INT 14
13023: PUSH
13024: LD_INT 15
13026: PUSH
13027: LD_INT 16
13029: PUSH
13030: LD_INT 17
13032: PUSH
13033: LD_INT 18
13035: PUSH
13036: LD_INT 19
13038: PUSH
13039: LD_INT 20
13041: PUSH
13042: LD_INT 21
13044: PUSH
13045: LD_INT 22
13047: PUSH
13048: LD_INT 23
13050: PUSH
13051: LD_INT 24
13053: PUSH
13054: LD_INT 25
13056: PUSH
13057: LD_INT 26
13059: PUSH
13060: LD_INT 27
13062: PUSH
13063: LD_INT 28
13065: PUSH
13066: LD_INT 29
13068: PUSH
13069: LD_INT 30
13071: PUSH
13072: LD_INT 31
13074: PUSH
13075: LD_INT 32
13077: PUSH
13078: LD_INT 33
13080: PUSH
13081: LD_INT 34
13083: PUSH
13084: LD_INT 36
13086: PUSH
13087: EMPTY
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: PUSH
13124: LD_INT 101
13126: PUSH
13127: LD_INT 102
13129: PUSH
13130: LD_INT 103
13132: PUSH
13133: LD_INT 104
13135: PUSH
13136: LD_INT 105
13138: PUSH
13139: LD_INT 106
13141: PUSH
13142: LD_INT 107
13144: PUSH
13145: LD_INT 108
13147: PUSH
13148: LD_INT 109
13150: PUSH
13151: LD_INT 110
13153: PUSH
13154: LD_INT 111
13156: PUSH
13157: LD_INT 112
13159: PUSH
13160: LD_INT 113
13162: PUSH
13163: LD_INT 114
13165: PUSH
13166: EMPTY
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: PUSH
13182: EMPTY
13183: LIST
13184: LIST
13185: ST_TO_ADDR
13186: GO 14133
13188: LD_INT 15
13190: DOUBLE
13191: EQUAL
13192: IFTRUE 13196
13194: GO 13408
13196: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
13197: LD_ADDR_VAR 0 1
13201: PUSH
13202: LD_INT 1
13204: PUSH
13205: LD_INT 2
13207: PUSH
13208: LD_INT 3
13210: PUSH
13211: LD_INT 4
13213: PUSH
13214: LD_INT 5
13216: PUSH
13217: LD_INT 6
13219: PUSH
13220: LD_INT 7
13222: PUSH
13223: LD_INT 8
13225: PUSH
13226: LD_INT 9
13228: PUSH
13229: LD_INT 10
13231: PUSH
13232: LD_INT 11
13234: PUSH
13235: LD_INT 12
13237: PUSH
13238: LD_INT 13
13240: PUSH
13241: LD_INT 14
13243: PUSH
13244: LD_INT 15
13246: PUSH
13247: LD_INT 16
13249: PUSH
13250: LD_INT 17
13252: PUSH
13253: LD_INT 18
13255: PUSH
13256: LD_INT 19
13258: PUSH
13259: LD_INT 20
13261: PUSH
13262: LD_INT 21
13264: PUSH
13265: LD_INT 22
13267: PUSH
13268: LD_INT 23
13270: PUSH
13271: LD_INT 24
13273: PUSH
13274: LD_INT 25
13276: PUSH
13277: LD_INT 26
13279: PUSH
13280: LD_INT 27
13282: PUSH
13283: LD_INT 28
13285: PUSH
13286: LD_INT 29
13288: PUSH
13289: LD_INT 30
13291: PUSH
13292: LD_INT 31
13294: PUSH
13295: LD_INT 32
13297: PUSH
13298: LD_INT 33
13300: PUSH
13301: LD_INT 34
13303: PUSH
13304: LD_INT 36
13306: PUSH
13307: EMPTY
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: PUSH
13344: LD_INT 101
13346: PUSH
13347: LD_INT 102
13349: PUSH
13350: LD_INT 103
13352: PUSH
13353: LD_INT 104
13355: PUSH
13356: LD_INT 105
13358: PUSH
13359: LD_INT 106
13361: PUSH
13362: LD_INT 107
13364: PUSH
13365: LD_INT 108
13367: PUSH
13368: LD_INT 109
13370: PUSH
13371: LD_INT 110
13373: PUSH
13374: LD_INT 111
13376: PUSH
13377: LD_INT 112
13379: PUSH
13380: LD_INT 113
13382: PUSH
13383: LD_INT 114
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: ST_TO_ADDR
13406: GO 14133
13408: LD_INT 16
13410: DOUBLE
13411: EQUAL
13412: IFTRUE 13416
13414: GO 13540
13416: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
13417: LD_ADDR_VAR 0 1
13421: PUSH
13422: LD_INT 2
13424: PUSH
13425: LD_INT 4
13427: PUSH
13428: LD_INT 5
13430: PUSH
13431: LD_INT 7
13433: PUSH
13434: LD_INT 11
13436: PUSH
13437: LD_INT 12
13439: PUSH
13440: LD_INT 15
13442: PUSH
13443: LD_INT 16
13445: PUSH
13446: LD_INT 20
13448: PUSH
13449: LD_INT 21
13451: PUSH
13452: LD_INT 22
13454: PUSH
13455: LD_INT 23
13457: PUSH
13458: LD_INT 25
13460: PUSH
13461: LD_INT 26
13463: PUSH
13464: LD_INT 30
13466: PUSH
13467: LD_INT 31
13469: PUSH
13470: LD_INT 32
13472: PUSH
13473: LD_INT 33
13475: PUSH
13476: LD_INT 34
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: PUSH
13500: LD_INT 101
13502: PUSH
13503: LD_INT 102
13505: PUSH
13506: LD_INT 103
13508: PUSH
13509: LD_INT 106
13511: PUSH
13512: LD_INT 108
13514: PUSH
13515: LD_INT 112
13517: PUSH
13518: LD_INT 113
13520: PUSH
13521: LD_INT 114
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: ST_TO_ADDR
13538: GO 14133
13540: LD_INT 17
13542: DOUBLE
13543: EQUAL
13544: IFTRUE 13548
13546: GO 13760
13548: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
13549: LD_ADDR_VAR 0 1
13553: PUSH
13554: LD_INT 1
13556: PUSH
13557: LD_INT 2
13559: PUSH
13560: LD_INT 3
13562: PUSH
13563: LD_INT 4
13565: PUSH
13566: LD_INT 5
13568: PUSH
13569: LD_INT 6
13571: PUSH
13572: LD_INT 7
13574: PUSH
13575: LD_INT 8
13577: PUSH
13578: LD_INT 9
13580: PUSH
13581: LD_INT 10
13583: PUSH
13584: LD_INT 11
13586: PUSH
13587: LD_INT 12
13589: PUSH
13590: LD_INT 13
13592: PUSH
13593: LD_INT 14
13595: PUSH
13596: LD_INT 15
13598: PUSH
13599: LD_INT 16
13601: PUSH
13602: LD_INT 17
13604: PUSH
13605: LD_INT 18
13607: PUSH
13608: LD_INT 19
13610: PUSH
13611: LD_INT 20
13613: PUSH
13614: LD_INT 21
13616: PUSH
13617: LD_INT 22
13619: PUSH
13620: LD_INT 23
13622: PUSH
13623: LD_INT 24
13625: PUSH
13626: LD_INT 25
13628: PUSH
13629: LD_INT 26
13631: PUSH
13632: LD_INT 27
13634: PUSH
13635: LD_INT 28
13637: PUSH
13638: LD_INT 29
13640: PUSH
13641: LD_INT 30
13643: PUSH
13644: LD_INT 31
13646: PUSH
13647: LD_INT 32
13649: PUSH
13650: LD_INT 33
13652: PUSH
13653: LD_INT 34
13655: PUSH
13656: LD_INT 36
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: PUSH
13696: LD_INT 101
13698: PUSH
13699: LD_INT 102
13701: PUSH
13702: LD_INT 103
13704: PUSH
13705: LD_INT 104
13707: PUSH
13708: LD_INT 105
13710: PUSH
13711: LD_INT 106
13713: PUSH
13714: LD_INT 107
13716: PUSH
13717: LD_INT 108
13719: PUSH
13720: LD_INT 109
13722: PUSH
13723: LD_INT 110
13725: PUSH
13726: LD_INT 111
13728: PUSH
13729: LD_INT 112
13731: PUSH
13732: LD_INT 113
13734: PUSH
13735: LD_INT 114
13737: PUSH
13738: EMPTY
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: ST_TO_ADDR
13758: GO 14133
13760: LD_INT 18
13762: DOUBLE
13763: EQUAL
13764: IFTRUE 13768
13766: GO 13904
13768: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
13769: LD_ADDR_VAR 0 1
13773: PUSH
13774: LD_INT 2
13776: PUSH
13777: LD_INT 4
13779: PUSH
13780: LD_INT 5
13782: PUSH
13783: LD_INT 7
13785: PUSH
13786: LD_INT 11
13788: PUSH
13789: LD_INT 12
13791: PUSH
13792: LD_INT 15
13794: PUSH
13795: LD_INT 16
13797: PUSH
13798: LD_INT 20
13800: PUSH
13801: LD_INT 21
13803: PUSH
13804: LD_INT 22
13806: PUSH
13807: LD_INT 23
13809: PUSH
13810: LD_INT 25
13812: PUSH
13813: LD_INT 26
13815: PUSH
13816: LD_INT 30
13818: PUSH
13819: LD_INT 31
13821: PUSH
13822: LD_INT 32
13824: PUSH
13825: LD_INT 33
13827: PUSH
13828: LD_INT 34
13830: PUSH
13831: LD_INT 35
13833: PUSH
13834: LD_INT 36
13836: PUSH
13837: EMPTY
13838: LIST
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: LIST
13845: LIST
13846: LIST
13847: LIST
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: LIST
13859: PUSH
13860: LD_INT 101
13862: PUSH
13863: LD_INT 102
13865: PUSH
13866: LD_INT 103
13868: PUSH
13869: LD_INT 106
13871: PUSH
13872: LD_INT 108
13874: PUSH
13875: LD_INT 112
13877: PUSH
13878: LD_INT 113
13880: PUSH
13881: LD_INT 114
13883: PUSH
13884: LD_INT 115
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: ST_TO_ADDR
13902: GO 14133
13904: LD_INT 19
13906: DOUBLE
13907: EQUAL
13908: IFTRUE 13912
13910: GO 14132
13912: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
13913: LD_ADDR_VAR 0 1
13917: PUSH
13918: LD_INT 1
13920: PUSH
13921: LD_INT 2
13923: PUSH
13924: LD_INT 3
13926: PUSH
13927: LD_INT 4
13929: PUSH
13930: LD_INT 5
13932: PUSH
13933: LD_INT 6
13935: PUSH
13936: LD_INT 7
13938: PUSH
13939: LD_INT 8
13941: PUSH
13942: LD_INT 9
13944: PUSH
13945: LD_INT 10
13947: PUSH
13948: LD_INT 11
13950: PUSH
13951: LD_INT 12
13953: PUSH
13954: LD_INT 13
13956: PUSH
13957: LD_INT 14
13959: PUSH
13960: LD_INT 15
13962: PUSH
13963: LD_INT 16
13965: PUSH
13966: LD_INT 17
13968: PUSH
13969: LD_INT 18
13971: PUSH
13972: LD_INT 19
13974: PUSH
13975: LD_INT 20
13977: PUSH
13978: LD_INT 21
13980: PUSH
13981: LD_INT 22
13983: PUSH
13984: LD_INT 23
13986: PUSH
13987: LD_INT 24
13989: PUSH
13990: LD_INT 25
13992: PUSH
13993: LD_INT 26
13995: PUSH
13996: LD_INT 27
13998: PUSH
13999: LD_INT 28
14001: PUSH
14002: LD_INT 29
14004: PUSH
14005: LD_INT 30
14007: PUSH
14008: LD_INT 31
14010: PUSH
14011: LD_INT 32
14013: PUSH
14014: LD_INT 33
14016: PUSH
14017: LD_INT 34
14019: PUSH
14020: LD_INT 35
14022: PUSH
14023: LD_INT 36
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: PUSH
14064: LD_INT 101
14066: PUSH
14067: LD_INT 102
14069: PUSH
14070: LD_INT 103
14072: PUSH
14073: LD_INT 104
14075: PUSH
14076: LD_INT 105
14078: PUSH
14079: LD_INT 106
14081: PUSH
14082: LD_INT 107
14084: PUSH
14085: LD_INT 108
14087: PUSH
14088: LD_INT 109
14090: PUSH
14091: LD_INT 110
14093: PUSH
14094: LD_INT 111
14096: PUSH
14097: LD_INT 112
14099: PUSH
14100: LD_INT 113
14102: PUSH
14103: LD_INT 114
14105: PUSH
14106: LD_INT 115
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: PUSH
14126: EMPTY
14127: LIST
14128: LIST
14129: ST_TO_ADDR
14130: GO 14133
14132: POP
// end else
14133: GO 14352
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
14135: LD_ADDR_VAR 0 1
14139: PUSH
14140: LD_INT 1
14142: PUSH
14143: LD_INT 2
14145: PUSH
14146: LD_INT 3
14148: PUSH
14149: LD_INT 4
14151: PUSH
14152: LD_INT 5
14154: PUSH
14155: LD_INT 6
14157: PUSH
14158: LD_INT 7
14160: PUSH
14161: LD_INT 8
14163: PUSH
14164: LD_INT 9
14166: PUSH
14167: LD_INT 10
14169: PUSH
14170: LD_INT 11
14172: PUSH
14173: LD_INT 12
14175: PUSH
14176: LD_INT 13
14178: PUSH
14179: LD_INT 14
14181: PUSH
14182: LD_INT 15
14184: PUSH
14185: LD_INT 16
14187: PUSH
14188: LD_INT 17
14190: PUSH
14191: LD_INT 18
14193: PUSH
14194: LD_INT 19
14196: PUSH
14197: LD_INT 20
14199: PUSH
14200: LD_INT 21
14202: PUSH
14203: LD_INT 22
14205: PUSH
14206: LD_INT 23
14208: PUSH
14209: LD_INT 24
14211: PUSH
14212: LD_INT 25
14214: PUSH
14215: LD_INT 26
14217: PUSH
14218: LD_INT 27
14220: PUSH
14221: LD_INT 28
14223: PUSH
14224: LD_INT 29
14226: PUSH
14227: LD_INT 30
14229: PUSH
14230: LD_INT 31
14232: PUSH
14233: LD_INT 32
14235: PUSH
14236: LD_INT 33
14238: PUSH
14239: LD_INT 34
14241: PUSH
14242: LD_INT 35
14244: PUSH
14245: LD_INT 36
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: PUSH
14286: LD_INT 101
14288: PUSH
14289: LD_INT 102
14291: PUSH
14292: LD_INT 103
14294: PUSH
14295: LD_INT 104
14297: PUSH
14298: LD_INT 105
14300: PUSH
14301: LD_INT 106
14303: PUSH
14304: LD_INT 107
14306: PUSH
14307: LD_INT 108
14309: PUSH
14310: LD_INT 109
14312: PUSH
14313: LD_INT 110
14315: PUSH
14316: LD_INT 111
14318: PUSH
14319: LD_INT 112
14321: PUSH
14322: LD_INT 113
14324: PUSH
14325: LD_INT 114
14327: PUSH
14328: LD_INT 115
14330: PUSH
14331: EMPTY
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: ST_TO_ADDR
// if result then
14352: LD_VAR 0 1
14356: IFFALSE 14645
// begin normal :=  ;
14358: LD_ADDR_VAR 0 3
14362: PUSH
14363: LD_STRING 
14365: ST_TO_ADDR
// hardcore :=  ;
14366: LD_ADDR_VAR 0 4
14370: PUSH
14371: LD_STRING 
14373: ST_TO_ADDR
// for i = 1 to normalCounter do
14374: LD_ADDR_VAR 0 5
14378: PUSH
14379: DOUBLE
14380: LD_INT 1
14382: DEC
14383: ST_TO_ADDR
14384: LD_EXP 44
14388: PUSH
14389: FOR_TO
14390: IFFALSE 14491
// begin tmp := 0 ;
14392: LD_ADDR_VAR 0 2
14396: PUSH
14397: LD_STRING 0
14399: ST_TO_ADDR
// if result [ 1 ] then
14400: LD_VAR 0 1
14404: PUSH
14405: LD_INT 1
14407: ARRAY
14408: IFFALSE 14473
// if result [ 1 ] [ 1 ] = i then
14410: LD_VAR 0 1
14414: PUSH
14415: LD_INT 1
14417: ARRAY
14418: PUSH
14419: LD_INT 1
14421: ARRAY
14422: PUSH
14423: LD_VAR 0 5
14427: EQUAL
14428: IFFALSE 14473
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14430: LD_ADDR_VAR 0 1
14434: PUSH
14435: LD_VAR 0 1
14439: PPUSH
14440: LD_INT 1
14442: PPUSH
14443: LD_VAR 0 1
14447: PUSH
14448: LD_INT 1
14450: ARRAY
14451: PPUSH
14452: LD_INT 1
14454: PPUSH
14455: CALL_OW 3
14459: PPUSH
14460: CALL_OW 1
14464: ST_TO_ADDR
// tmp := 1 ;
14465: LD_ADDR_VAR 0 2
14469: PUSH
14470: LD_STRING 1
14472: ST_TO_ADDR
// end ; normal := normal & tmp ;
14473: LD_ADDR_VAR 0 3
14477: PUSH
14478: LD_VAR 0 3
14482: PUSH
14483: LD_VAR 0 2
14487: STR
14488: ST_TO_ADDR
// end ;
14489: GO 14389
14491: POP
14492: POP
// for i = 1 to hardcoreCounter do
14493: LD_ADDR_VAR 0 5
14497: PUSH
14498: DOUBLE
14499: LD_INT 1
14501: DEC
14502: ST_TO_ADDR
14503: LD_EXP 45
14507: PUSH
14508: FOR_TO
14509: IFFALSE 14614
// begin tmp := 0 ;
14511: LD_ADDR_VAR 0 2
14515: PUSH
14516: LD_STRING 0
14518: ST_TO_ADDR
// if result [ 2 ] then
14519: LD_VAR 0 1
14523: PUSH
14524: LD_INT 2
14526: ARRAY
14527: IFFALSE 14596
// if result [ 2 ] [ 1 ] = 100 + i then
14529: LD_VAR 0 1
14533: PUSH
14534: LD_INT 2
14536: ARRAY
14537: PUSH
14538: LD_INT 1
14540: ARRAY
14541: PUSH
14542: LD_INT 100
14544: PUSH
14545: LD_VAR 0 5
14549: PLUS
14550: EQUAL
14551: IFFALSE 14596
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14553: LD_ADDR_VAR 0 1
14557: PUSH
14558: LD_VAR 0 1
14562: PPUSH
14563: LD_INT 2
14565: PPUSH
14566: LD_VAR 0 1
14570: PUSH
14571: LD_INT 2
14573: ARRAY
14574: PPUSH
14575: LD_INT 1
14577: PPUSH
14578: CALL_OW 3
14582: PPUSH
14583: CALL_OW 1
14587: ST_TO_ADDR
// tmp := 1 ;
14588: LD_ADDR_VAR 0 2
14592: PUSH
14593: LD_STRING 1
14595: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14596: LD_ADDR_VAR 0 4
14600: PUSH
14601: LD_VAR 0 4
14605: PUSH
14606: LD_VAR 0 2
14610: STR
14611: ST_TO_ADDR
// end ;
14612: GO 14508
14614: POP
14615: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
14616: LD_STRING getStreamItemsFromMission("
14618: PUSH
14619: LD_VAR 0 3
14623: STR
14624: PUSH
14625: LD_STRING ","
14627: STR
14628: PUSH
14629: LD_VAR 0 4
14633: STR
14634: PUSH
14635: LD_STRING ")
14637: STR
14638: PPUSH
14639: CALL_OW 559
// end else
14643: GO 14652
// ToLua ( getStreamItemsFromMission("","") ) ;
14645: LD_STRING getStreamItemsFromMission("","")
14647: PPUSH
14648: CALL_OW 559
// end ;
14652: LD_VAR 0 1
14656: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14657: LD_EXP 43
14661: PUSH
14662: LD_EXP 48
14666: AND
14667: IFFALSE 14791
14669: GO 14671
14671: DISABLE
14672: LD_INT 0
14674: PPUSH
14675: PPUSH
// begin enable ;
14676: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14677: LD_ADDR_VAR 0 2
14681: PUSH
14682: LD_INT 22
14684: PUSH
14685: LD_OWVAR 2
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: PUSH
14694: LD_INT 2
14696: PUSH
14697: LD_INT 34
14699: PUSH
14700: LD_INT 7
14702: PUSH
14703: EMPTY
14704: LIST
14705: LIST
14706: PUSH
14707: LD_INT 34
14709: PUSH
14710: LD_INT 45
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: PUSH
14717: LD_INT 34
14719: PUSH
14720: LD_INT 28
14722: PUSH
14723: EMPTY
14724: LIST
14725: LIST
14726: PUSH
14727: LD_INT 34
14729: PUSH
14730: LD_INT 47
14732: PUSH
14733: EMPTY
14734: LIST
14735: LIST
14736: PUSH
14737: EMPTY
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: PPUSH
14748: CALL_OW 69
14752: ST_TO_ADDR
// if not tmp then
14753: LD_VAR 0 2
14757: NOT
14758: IFFALSE 14762
// exit ;
14760: GO 14791
// for i in tmp do
14762: LD_ADDR_VAR 0 1
14766: PUSH
14767: LD_VAR 0 2
14771: PUSH
14772: FOR_IN
14773: IFFALSE 14789
// begin SetLives ( i , 0 ) ;
14775: LD_VAR 0 1
14779: PPUSH
14780: LD_INT 0
14782: PPUSH
14783: CALL_OW 234
// end ;
14787: GO 14772
14789: POP
14790: POP
// end ;
14791: PPOPN 2
14793: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14794: LD_EXP 43
14798: PUSH
14799: LD_EXP 49
14803: AND
14804: IFFALSE 14888
14806: GO 14808
14808: DISABLE
14809: LD_INT 0
14811: PPUSH
14812: PPUSH
// begin enable ;
14813: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14814: LD_ADDR_VAR 0 2
14818: PUSH
14819: LD_INT 22
14821: PUSH
14822: LD_OWVAR 2
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: PUSH
14831: LD_INT 32
14833: PUSH
14834: LD_INT 3
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: PPUSH
14845: CALL_OW 69
14849: ST_TO_ADDR
// if not tmp then
14850: LD_VAR 0 2
14854: NOT
14855: IFFALSE 14859
// exit ;
14857: GO 14888
// for i in tmp do
14859: LD_ADDR_VAR 0 1
14863: PUSH
14864: LD_VAR 0 2
14868: PUSH
14869: FOR_IN
14870: IFFALSE 14886
// begin SetLives ( i , 0 ) ;
14872: LD_VAR 0 1
14876: PPUSH
14877: LD_INT 0
14879: PPUSH
14880: CALL_OW 234
// end ;
14884: GO 14869
14886: POP
14887: POP
// end ;
14888: PPOPN 2
14890: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14891: LD_EXP 43
14895: PUSH
14896: LD_EXP 46
14900: AND
14901: IFFALSE 14994
14903: GO 14905
14905: DISABLE
14906: LD_INT 0
14908: PPUSH
// begin enable ;
14909: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14910: LD_ADDR_VAR 0 1
14914: PUSH
14915: LD_INT 22
14917: PUSH
14918: LD_OWVAR 2
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: PUSH
14927: LD_INT 2
14929: PUSH
14930: LD_INT 25
14932: PUSH
14933: LD_INT 5
14935: PUSH
14936: EMPTY
14937: LIST
14938: LIST
14939: PUSH
14940: LD_INT 25
14942: PUSH
14943: LD_INT 9
14945: PUSH
14946: EMPTY
14947: LIST
14948: LIST
14949: PUSH
14950: LD_INT 25
14952: PUSH
14953: LD_INT 8
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: PUSH
14960: EMPTY
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: PPUSH
14970: CALL_OW 69
14974: PUSH
14975: FOR_IN
14976: IFFALSE 14992
// begin SetClass ( i , 1 ) ;
14978: LD_VAR 0 1
14982: PPUSH
14983: LD_INT 1
14985: PPUSH
14986: CALL_OW 336
// end ;
14990: GO 14975
14992: POP
14993: POP
// end ;
14994: PPOPN 1
14996: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14997: LD_EXP 43
15001: PUSH
15002: LD_EXP 47
15006: AND
15007: PUSH
15008: LD_OWVAR 65
15012: PUSH
15013: LD_INT 7
15015: LESS
15016: AND
15017: IFFALSE 15031
15019: GO 15021
15021: DISABLE
// begin enable ;
15022: ENABLE
// game_speed := 7 ;
15023: LD_ADDR_OWVAR 65
15027: PUSH
15028: LD_INT 7
15030: ST_TO_ADDR
// end ;
15031: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15032: LD_EXP 43
15036: PUSH
15037: LD_EXP 50
15041: AND
15042: IFFALSE 15244
15044: GO 15046
15046: DISABLE
15047: LD_INT 0
15049: PPUSH
15050: PPUSH
15051: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15052: LD_ADDR_VAR 0 3
15056: PUSH
15057: LD_INT 81
15059: PUSH
15060: LD_OWVAR 2
15064: PUSH
15065: EMPTY
15066: LIST
15067: LIST
15068: PUSH
15069: LD_INT 21
15071: PUSH
15072: LD_INT 1
15074: PUSH
15075: EMPTY
15076: LIST
15077: LIST
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: PPUSH
15083: CALL_OW 69
15087: ST_TO_ADDR
// if not tmp then
15088: LD_VAR 0 3
15092: NOT
15093: IFFALSE 15097
// exit ;
15095: GO 15244
// if tmp > 5 then
15097: LD_VAR 0 3
15101: PUSH
15102: LD_INT 5
15104: GREATER
15105: IFFALSE 15117
// k := 5 else
15107: LD_ADDR_VAR 0 2
15111: PUSH
15112: LD_INT 5
15114: ST_TO_ADDR
15115: GO 15127
// k := tmp ;
15117: LD_ADDR_VAR 0 2
15121: PUSH
15122: LD_VAR 0 3
15126: ST_TO_ADDR
// for i := 1 to k do
15127: LD_ADDR_VAR 0 1
15131: PUSH
15132: DOUBLE
15133: LD_INT 1
15135: DEC
15136: ST_TO_ADDR
15137: LD_VAR 0 2
15141: PUSH
15142: FOR_TO
15143: IFFALSE 15242
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15145: LD_VAR 0 3
15149: PUSH
15150: LD_VAR 0 1
15154: ARRAY
15155: PPUSH
15156: LD_VAR 0 1
15160: PUSH
15161: LD_INT 4
15163: MOD
15164: PUSH
15165: LD_INT 1
15167: PLUS
15168: PPUSH
15169: CALL_OW 259
15173: PUSH
15174: LD_INT 10
15176: LESS
15177: IFFALSE 15240
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15179: LD_VAR 0 3
15183: PUSH
15184: LD_VAR 0 1
15188: ARRAY
15189: PPUSH
15190: LD_VAR 0 1
15194: PUSH
15195: LD_INT 4
15197: MOD
15198: PUSH
15199: LD_INT 1
15201: PLUS
15202: PPUSH
15203: LD_VAR 0 3
15207: PUSH
15208: LD_VAR 0 1
15212: ARRAY
15213: PPUSH
15214: LD_VAR 0 1
15218: PUSH
15219: LD_INT 4
15221: MOD
15222: PUSH
15223: LD_INT 1
15225: PLUS
15226: PPUSH
15227: CALL_OW 259
15231: PUSH
15232: LD_INT 1
15234: PLUS
15235: PPUSH
15236: CALL_OW 237
15240: GO 15142
15242: POP
15243: POP
// end ;
15244: PPOPN 3
15246: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15247: LD_EXP 43
15251: PUSH
15252: LD_EXP 51
15256: AND
15257: IFFALSE 15277
15259: GO 15261
15261: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15262: LD_INT 4
15264: PPUSH
15265: LD_OWVAR 2
15269: PPUSH
15270: LD_INT 0
15272: PPUSH
15273: CALL_OW 324
15277: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15278: LD_EXP 43
15282: PUSH
15283: LD_EXP 80
15287: AND
15288: IFFALSE 15308
15290: GO 15292
15292: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15293: LD_INT 19
15295: PPUSH
15296: LD_OWVAR 2
15300: PPUSH
15301: LD_INT 0
15303: PPUSH
15304: CALL_OW 324
15308: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15309: LD_EXP 43
15313: PUSH
15314: LD_EXP 52
15318: AND
15319: IFFALSE 15421
15321: GO 15323
15323: DISABLE
15324: LD_INT 0
15326: PPUSH
15327: PPUSH
// begin enable ;
15328: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15329: LD_ADDR_VAR 0 2
15333: PUSH
15334: LD_INT 22
15336: PUSH
15337: LD_OWVAR 2
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: PUSH
15346: LD_INT 2
15348: PUSH
15349: LD_INT 34
15351: PUSH
15352: LD_INT 11
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: PUSH
15359: LD_INT 34
15361: PUSH
15362: LD_INT 30
15364: PUSH
15365: EMPTY
15366: LIST
15367: LIST
15368: PUSH
15369: EMPTY
15370: LIST
15371: LIST
15372: LIST
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: PPUSH
15378: CALL_OW 69
15382: ST_TO_ADDR
// if not tmp then
15383: LD_VAR 0 2
15387: NOT
15388: IFFALSE 15392
// exit ;
15390: GO 15421
// for i in tmp do
15392: LD_ADDR_VAR 0 1
15396: PUSH
15397: LD_VAR 0 2
15401: PUSH
15402: FOR_IN
15403: IFFALSE 15419
// begin SetLives ( i , 0 ) ;
15405: LD_VAR 0 1
15409: PPUSH
15410: LD_INT 0
15412: PPUSH
15413: CALL_OW 234
// end ;
15417: GO 15402
15419: POP
15420: POP
// end ;
15421: PPOPN 2
15423: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15424: LD_EXP 43
15428: PUSH
15429: LD_EXP 53
15433: AND
15434: IFFALSE 15454
15436: GO 15438
15438: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15439: LD_INT 32
15441: PPUSH
15442: LD_OWVAR 2
15446: PPUSH
15447: LD_INT 0
15449: PPUSH
15450: CALL_OW 324
15454: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15455: LD_EXP 43
15459: PUSH
15460: LD_EXP 54
15464: AND
15465: IFFALSE 15646
15467: GO 15469
15469: DISABLE
15470: LD_INT 0
15472: PPUSH
15473: PPUSH
15474: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15475: LD_ADDR_VAR 0 2
15479: PUSH
15480: LD_INT 22
15482: PUSH
15483: LD_OWVAR 2
15487: PUSH
15488: EMPTY
15489: LIST
15490: LIST
15491: PUSH
15492: LD_INT 33
15494: PUSH
15495: LD_INT 3
15497: PUSH
15498: EMPTY
15499: LIST
15500: LIST
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PPUSH
15506: CALL_OW 69
15510: ST_TO_ADDR
// if not tmp then
15511: LD_VAR 0 2
15515: NOT
15516: IFFALSE 15520
// exit ;
15518: GO 15646
// side := 0 ;
15520: LD_ADDR_VAR 0 3
15524: PUSH
15525: LD_INT 0
15527: ST_TO_ADDR
// for i := 1 to 8 do
15528: LD_ADDR_VAR 0 1
15532: PUSH
15533: DOUBLE
15534: LD_INT 1
15536: DEC
15537: ST_TO_ADDR
15538: LD_INT 8
15540: PUSH
15541: FOR_TO
15542: IFFALSE 15590
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15544: LD_OWVAR 2
15548: PUSH
15549: LD_VAR 0 1
15553: NONEQUAL
15554: PUSH
15555: LD_OWVAR 2
15559: PPUSH
15560: LD_VAR 0 1
15564: PPUSH
15565: CALL_OW 81
15569: PUSH
15570: LD_INT 2
15572: EQUAL
15573: AND
15574: IFFALSE 15588
// begin side := i ;
15576: LD_ADDR_VAR 0 3
15580: PUSH
15581: LD_VAR 0 1
15585: ST_TO_ADDR
// break ;
15586: GO 15590
// end ;
15588: GO 15541
15590: POP
15591: POP
// if not side then
15592: LD_VAR 0 3
15596: NOT
15597: IFFALSE 15601
// exit ;
15599: GO 15646
// for i := 1 to tmp do
15601: LD_ADDR_VAR 0 1
15605: PUSH
15606: DOUBLE
15607: LD_INT 1
15609: DEC
15610: ST_TO_ADDR
15611: LD_VAR 0 2
15615: PUSH
15616: FOR_TO
15617: IFFALSE 15644
// if Prob ( 60 ) then
15619: LD_INT 60
15621: PPUSH
15622: CALL_OW 13
15626: IFFALSE 15642
// SetSide ( i , side ) ;
15628: LD_VAR 0 1
15632: PPUSH
15633: LD_VAR 0 3
15637: PPUSH
15638: CALL_OW 235
15642: GO 15616
15644: POP
15645: POP
// end ;
15646: PPOPN 3
15648: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15649: LD_EXP 43
15653: PUSH
15654: LD_EXP 56
15658: AND
15659: IFFALSE 15778
15661: GO 15663
15663: DISABLE
15664: LD_INT 0
15666: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15667: LD_ADDR_VAR 0 1
15671: PUSH
15672: LD_INT 22
15674: PUSH
15675: LD_OWVAR 2
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PUSH
15684: LD_INT 21
15686: PUSH
15687: LD_INT 1
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: PUSH
15694: LD_INT 3
15696: PUSH
15697: LD_INT 23
15699: PUSH
15700: LD_INT 0
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: LIST
15715: PPUSH
15716: CALL_OW 69
15720: PUSH
15721: FOR_IN
15722: IFFALSE 15776
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15724: LD_VAR 0 1
15728: PPUSH
15729: CALL_OW 257
15733: PUSH
15734: LD_INT 1
15736: PUSH
15737: LD_INT 2
15739: PUSH
15740: LD_INT 3
15742: PUSH
15743: LD_INT 4
15745: PUSH
15746: EMPTY
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: IN
15752: IFFALSE 15774
// SetClass ( un , rand ( 1 , 4 ) ) ;
15754: LD_VAR 0 1
15758: PPUSH
15759: LD_INT 1
15761: PPUSH
15762: LD_INT 4
15764: PPUSH
15765: CALL_OW 12
15769: PPUSH
15770: CALL_OW 336
15774: GO 15721
15776: POP
15777: POP
// end ;
15778: PPOPN 1
15780: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15781: LD_EXP 43
15785: PUSH
15786: LD_EXP 55
15790: AND
15791: IFFALSE 15870
15793: GO 15795
15795: DISABLE
15796: LD_INT 0
15798: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15799: LD_ADDR_VAR 0 1
15803: PUSH
15804: LD_INT 22
15806: PUSH
15807: LD_OWVAR 2
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: PUSH
15816: LD_INT 21
15818: PUSH
15819: LD_INT 3
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PPUSH
15830: CALL_OW 69
15834: ST_TO_ADDR
// if not tmp then
15835: LD_VAR 0 1
15839: NOT
15840: IFFALSE 15844
// exit ;
15842: GO 15870
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15844: LD_VAR 0 1
15848: PUSH
15849: LD_INT 1
15851: PPUSH
15852: LD_VAR 0 1
15856: PPUSH
15857: CALL_OW 12
15861: ARRAY
15862: PPUSH
15863: LD_INT 100
15865: PPUSH
15866: CALL_OW 234
// end ;
15870: PPOPN 1
15872: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15873: LD_EXP 43
15877: PUSH
15878: LD_EXP 57
15882: AND
15883: IFFALSE 15981
15885: GO 15887
15887: DISABLE
15888: LD_INT 0
15890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15891: LD_ADDR_VAR 0 1
15895: PUSH
15896: LD_INT 22
15898: PUSH
15899: LD_OWVAR 2
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: PUSH
15908: LD_INT 21
15910: PUSH
15911: LD_INT 1
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: PPUSH
15922: CALL_OW 69
15926: ST_TO_ADDR
// if not tmp then
15927: LD_VAR 0 1
15931: NOT
15932: IFFALSE 15936
// exit ;
15934: GO 15981
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15936: LD_VAR 0 1
15940: PUSH
15941: LD_INT 1
15943: PPUSH
15944: LD_VAR 0 1
15948: PPUSH
15949: CALL_OW 12
15953: ARRAY
15954: PPUSH
15955: LD_INT 1
15957: PPUSH
15958: LD_INT 4
15960: PPUSH
15961: CALL_OW 12
15965: PPUSH
15966: LD_INT 3000
15968: PPUSH
15969: LD_INT 9000
15971: PPUSH
15972: CALL_OW 12
15976: PPUSH
15977: CALL_OW 492
// end ;
15981: PPOPN 1
15983: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15984: LD_EXP 43
15988: PUSH
15989: LD_EXP 58
15993: AND
15994: IFFALSE 16014
15996: GO 15998
15998: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15999: LD_INT 1
16001: PPUSH
16002: LD_OWVAR 2
16006: PPUSH
16007: LD_INT 0
16009: PPUSH
16010: CALL_OW 324
16014: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16015: LD_EXP 43
16019: PUSH
16020: LD_EXP 59
16024: AND
16025: IFFALSE 16108
16027: GO 16029
16029: DISABLE
16030: LD_INT 0
16032: PPUSH
16033: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16034: LD_ADDR_VAR 0 2
16038: PUSH
16039: LD_INT 22
16041: PUSH
16042: LD_OWVAR 2
16046: PUSH
16047: EMPTY
16048: LIST
16049: LIST
16050: PUSH
16051: LD_INT 21
16053: PUSH
16054: LD_INT 3
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: PUSH
16061: EMPTY
16062: LIST
16063: LIST
16064: PPUSH
16065: CALL_OW 69
16069: ST_TO_ADDR
// if not tmp then
16070: LD_VAR 0 2
16074: NOT
16075: IFFALSE 16079
// exit ;
16077: GO 16108
// for i in tmp do
16079: LD_ADDR_VAR 0 1
16083: PUSH
16084: LD_VAR 0 2
16088: PUSH
16089: FOR_IN
16090: IFFALSE 16106
// SetBLevel ( i , 10 ) ;
16092: LD_VAR 0 1
16096: PPUSH
16097: LD_INT 10
16099: PPUSH
16100: CALL_OW 241
16104: GO 16089
16106: POP
16107: POP
// end ;
16108: PPOPN 2
16110: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16111: LD_EXP 43
16115: PUSH
16116: LD_EXP 60
16120: AND
16121: IFFALSE 16232
16123: GO 16125
16125: DISABLE
16126: LD_INT 0
16128: PPUSH
16129: PPUSH
16130: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16131: LD_ADDR_VAR 0 3
16135: PUSH
16136: LD_INT 22
16138: PUSH
16139: LD_OWVAR 2
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PUSH
16148: LD_INT 25
16150: PUSH
16151: LD_INT 1
16153: PUSH
16154: EMPTY
16155: LIST
16156: LIST
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: PPUSH
16162: CALL_OW 69
16166: ST_TO_ADDR
// if not tmp then
16167: LD_VAR 0 3
16171: NOT
16172: IFFALSE 16176
// exit ;
16174: GO 16232
// un := tmp [ rand ( 1 , tmp ) ] ;
16176: LD_ADDR_VAR 0 2
16180: PUSH
16181: LD_VAR 0 3
16185: PUSH
16186: LD_INT 1
16188: PPUSH
16189: LD_VAR 0 3
16193: PPUSH
16194: CALL_OW 12
16198: ARRAY
16199: ST_TO_ADDR
// if Crawls ( un ) then
16200: LD_VAR 0 2
16204: PPUSH
16205: CALL_OW 318
16209: IFFALSE 16220
// ComWalk ( un ) ;
16211: LD_VAR 0 2
16215: PPUSH
16216: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16220: LD_VAR 0 2
16224: PPUSH
16225: LD_INT 5
16227: PPUSH
16228: CALL_OW 336
// end ;
16232: PPOPN 3
16234: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
16235: LD_EXP 43
16239: PUSH
16240: LD_EXP 61
16244: AND
16245: PUSH
16246: LD_OWVAR 67
16250: PUSH
16251: LD_INT 3
16253: LESS
16254: AND
16255: IFFALSE 16274
16257: GO 16259
16259: DISABLE
// Difficulty := Difficulty + 1 ;
16260: LD_ADDR_OWVAR 67
16264: PUSH
16265: LD_OWVAR 67
16269: PUSH
16270: LD_INT 1
16272: PLUS
16273: ST_TO_ADDR
16274: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16275: LD_EXP 43
16279: PUSH
16280: LD_EXP 62
16284: AND
16285: IFFALSE 16388
16287: GO 16289
16289: DISABLE
16290: LD_INT 0
16292: PPUSH
// begin for i := 1 to 5 do
16293: LD_ADDR_VAR 0 1
16297: PUSH
16298: DOUBLE
16299: LD_INT 1
16301: DEC
16302: ST_TO_ADDR
16303: LD_INT 5
16305: PUSH
16306: FOR_TO
16307: IFFALSE 16386
// begin uc_nation := nation_nature ;
16309: LD_ADDR_OWVAR 21
16313: PUSH
16314: LD_INT 0
16316: ST_TO_ADDR
// uc_side := 0 ;
16317: LD_ADDR_OWVAR 20
16321: PUSH
16322: LD_INT 0
16324: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16325: LD_ADDR_OWVAR 29
16329: PUSH
16330: LD_INT 12
16332: PUSH
16333: LD_INT 12
16335: PUSH
16336: EMPTY
16337: LIST
16338: LIST
16339: ST_TO_ADDR
// hc_agressivity := 20 ;
16340: LD_ADDR_OWVAR 35
16344: PUSH
16345: LD_INT 20
16347: ST_TO_ADDR
// hc_class := class_tiger ;
16348: LD_ADDR_OWVAR 28
16352: PUSH
16353: LD_INT 14
16355: ST_TO_ADDR
// hc_gallery :=  ;
16356: LD_ADDR_OWVAR 33
16360: PUSH
16361: LD_STRING 
16363: ST_TO_ADDR
// hc_name :=  ;
16364: LD_ADDR_OWVAR 26
16368: PUSH
16369: LD_STRING 
16371: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16372: CALL_OW 44
16376: PPUSH
16377: LD_INT 0
16379: PPUSH
16380: CALL_OW 51
// end ;
16384: GO 16306
16386: POP
16387: POP
// end ;
16388: PPOPN 1
16390: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16391: LD_EXP 43
16395: PUSH
16396: LD_EXP 63
16400: AND
16401: IFFALSE 16410
16403: GO 16405
16405: DISABLE
// StreamSibBomb ;
16406: CALL 16411 0 0
16410: END
// export function StreamSibBomb ; var i , x , y ; begin
16411: LD_INT 0
16413: PPUSH
16414: PPUSH
16415: PPUSH
16416: PPUSH
// result := false ;
16417: LD_ADDR_VAR 0 1
16421: PUSH
16422: LD_INT 0
16424: ST_TO_ADDR
// for i := 1 to 16 do
16425: LD_ADDR_VAR 0 2
16429: PUSH
16430: DOUBLE
16431: LD_INT 1
16433: DEC
16434: ST_TO_ADDR
16435: LD_INT 16
16437: PUSH
16438: FOR_TO
16439: IFFALSE 16638
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16441: LD_ADDR_VAR 0 3
16445: PUSH
16446: LD_INT 10
16448: PUSH
16449: LD_INT 20
16451: PUSH
16452: LD_INT 30
16454: PUSH
16455: LD_INT 40
16457: PUSH
16458: LD_INT 50
16460: PUSH
16461: LD_INT 60
16463: PUSH
16464: LD_INT 70
16466: PUSH
16467: LD_INT 80
16469: PUSH
16470: LD_INT 90
16472: PUSH
16473: LD_INT 100
16475: PUSH
16476: LD_INT 110
16478: PUSH
16479: LD_INT 120
16481: PUSH
16482: LD_INT 130
16484: PUSH
16485: LD_INT 140
16487: PUSH
16488: LD_INT 150
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: PUSH
16508: LD_INT 1
16510: PPUSH
16511: LD_INT 15
16513: PPUSH
16514: CALL_OW 12
16518: ARRAY
16519: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16520: LD_ADDR_VAR 0 4
16524: PUSH
16525: LD_INT 10
16527: PUSH
16528: LD_INT 20
16530: PUSH
16531: LD_INT 30
16533: PUSH
16534: LD_INT 40
16536: PUSH
16537: LD_INT 50
16539: PUSH
16540: LD_INT 60
16542: PUSH
16543: LD_INT 70
16545: PUSH
16546: LD_INT 80
16548: PUSH
16549: LD_INT 90
16551: PUSH
16552: LD_INT 100
16554: PUSH
16555: LD_INT 110
16557: PUSH
16558: LD_INT 120
16560: PUSH
16561: LD_INT 130
16563: PUSH
16564: LD_INT 140
16566: PUSH
16567: LD_INT 150
16569: PUSH
16570: EMPTY
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: PUSH
16587: LD_INT 1
16589: PPUSH
16590: LD_INT 15
16592: PPUSH
16593: CALL_OW 12
16597: ARRAY
16598: ST_TO_ADDR
// if ValidHex ( x , y ) then
16599: LD_VAR 0 3
16603: PPUSH
16604: LD_VAR 0 4
16608: PPUSH
16609: CALL_OW 488
16613: IFFALSE 16636
// begin result := [ x , y ] ;
16615: LD_ADDR_VAR 0 1
16619: PUSH
16620: LD_VAR 0 3
16624: PUSH
16625: LD_VAR 0 4
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: ST_TO_ADDR
// break ;
16634: GO 16638
// end ; end ;
16636: GO 16438
16638: POP
16639: POP
// if result then
16640: LD_VAR 0 1
16644: IFFALSE 16704
// begin ToLua ( playSibBomb() ) ;
16646: LD_STRING playSibBomb()
16648: PPUSH
16649: CALL_OW 559
// wait ( 0 0$14 ) ;
16653: LD_INT 490
16655: PPUSH
16656: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16660: LD_VAR 0 1
16664: PUSH
16665: LD_INT 1
16667: ARRAY
16668: PPUSH
16669: LD_VAR 0 1
16673: PUSH
16674: LD_INT 2
16676: ARRAY
16677: PPUSH
16678: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16682: LD_VAR 0 1
16686: PUSH
16687: LD_INT 1
16689: ARRAY
16690: PPUSH
16691: LD_VAR 0 1
16695: PUSH
16696: LD_INT 2
16698: ARRAY
16699: PPUSH
16700: CALL_OW 429
// end ; end ;
16704: LD_VAR 0 1
16708: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16709: LD_EXP 43
16713: PUSH
16714: LD_EXP 65
16718: AND
16719: IFFALSE 16731
16721: GO 16723
16723: DISABLE
// YouLost (  ) ;
16724: LD_STRING 
16726: PPUSH
16727: CALL_OW 104
16731: END
// every 0 0$1 trigger StreamModeActive and sFog do
16732: LD_EXP 43
16736: PUSH
16737: LD_EXP 64
16741: AND
16742: IFFALSE 16756
16744: GO 16746
16746: DISABLE
// FogOff ( your_side ) ;
16747: LD_OWVAR 2
16751: PPUSH
16752: CALL_OW 344
16756: END
// every 0 0$1 trigger StreamModeActive and sSun do
16757: LD_EXP 43
16761: PUSH
16762: LD_EXP 66
16766: AND
16767: IFFALSE 16795
16769: GO 16771
16771: DISABLE
// begin solar_recharge_percent := 0 ;
16772: LD_ADDR_OWVAR 79
16776: PUSH
16777: LD_INT 0
16779: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16780: LD_INT 10500
16782: PPUSH
16783: CALL_OW 67
// solar_recharge_percent := 100 ;
16787: LD_ADDR_OWVAR 79
16791: PUSH
16792: LD_INT 100
16794: ST_TO_ADDR
// end ;
16795: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16796: LD_EXP 43
16800: PUSH
16801: LD_EXP 67
16805: AND
16806: IFFALSE 17045
16808: GO 16810
16810: DISABLE
16811: LD_INT 0
16813: PPUSH
16814: PPUSH
16815: PPUSH
// begin tmp := [ ] ;
16816: LD_ADDR_VAR 0 3
16820: PUSH
16821: EMPTY
16822: ST_TO_ADDR
// for i := 1 to 6 do
16823: LD_ADDR_VAR 0 1
16827: PUSH
16828: DOUBLE
16829: LD_INT 1
16831: DEC
16832: ST_TO_ADDR
16833: LD_INT 6
16835: PUSH
16836: FOR_TO
16837: IFFALSE 16942
// begin uc_nation := nation_nature ;
16839: LD_ADDR_OWVAR 21
16843: PUSH
16844: LD_INT 0
16846: ST_TO_ADDR
// uc_side := 0 ;
16847: LD_ADDR_OWVAR 20
16851: PUSH
16852: LD_INT 0
16854: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16855: LD_ADDR_OWVAR 29
16859: PUSH
16860: LD_INT 12
16862: PUSH
16863: LD_INT 12
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: ST_TO_ADDR
// hc_agressivity := 20 ;
16870: LD_ADDR_OWVAR 35
16874: PUSH
16875: LD_INT 20
16877: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16878: LD_ADDR_OWVAR 28
16882: PUSH
16883: LD_INT 17
16885: ST_TO_ADDR
// hc_gallery :=  ;
16886: LD_ADDR_OWVAR 33
16890: PUSH
16891: LD_STRING 
16893: ST_TO_ADDR
// hc_name :=  ;
16894: LD_ADDR_OWVAR 26
16898: PUSH
16899: LD_STRING 
16901: ST_TO_ADDR
// un := CreateHuman ;
16902: LD_ADDR_VAR 0 2
16906: PUSH
16907: CALL_OW 44
16911: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16912: LD_VAR 0 2
16916: PPUSH
16917: LD_INT 1
16919: PPUSH
16920: CALL_OW 51
// tmp := tmp ^ un ;
16924: LD_ADDR_VAR 0 3
16928: PUSH
16929: LD_VAR 0 3
16933: PUSH
16934: LD_VAR 0 2
16938: ADD
16939: ST_TO_ADDR
// end ;
16940: GO 16836
16942: POP
16943: POP
// repeat wait ( 0 0$1 ) ;
16944: LD_INT 35
16946: PPUSH
16947: CALL_OW 67
// for un in tmp do
16951: LD_ADDR_VAR 0 2
16955: PUSH
16956: LD_VAR 0 3
16960: PUSH
16961: FOR_IN
16962: IFFALSE 17036
// begin if IsDead ( un ) then
16964: LD_VAR 0 2
16968: PPUSH
16969: CALL_OW 301
16973: IFFALSE 16993
// begin tmp := tmp diff un ;
16975: LD_ADDR_VAR 0 3
16979: PUSH
16980: LD_VAR 0 3
16984: PUSH
16985: LD_VAR 0 2
16989: DIFF
16990: ST_TO_ADDR
// continue ;
16991: GO 16961
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16993: LD_VAR 0 2
16997: PPUSH
16998: LD_INT 3
17000: PUSH
17001: LD_INT 22
17003: PUSH
17004: LD_INT 0
17006: PUSH
17007: EMPTY
17008: LIST
17009: LIST
17010: PUSH
17011: EMPTY
17012: LIST
17013: LIST
17014: PPUSH
17015: CALL_OW 69
17019: PPUSH
17020: LD_VAR 0 2
17024: PPUSH
17025: CALL_OW 74
17029: PPUSH
17030: CALL_OW 115
// end ;
17034: GO 16961
17036: POP
17037: POP
// until not tmp ;
17038: LD_VAR 0 3
17042: NOT
17043: IFFALSE 16944
// end ;
17045: PPOPN 3
17047: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17048: LD_EXP 43
17052: PUSH
17053: LD_EXP 68
17057: AND
17058: IFFALSE 17112
17060: GO 17062
17062: DISABLE
// begin ToLua ( displayTroll(); ) ;
17063: LD_STRING displayTroll();
17065: PPUSH
17066: CALL_OW 559
// wait ( 3 3$00 ) ;
17070: LD_INT 6300
17072: PPUSH
17073: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17077: LD_STRING hideTroll();
17079: PPUSH
17080: CALL_OW 559
// wait ( 1 1$00 ) ;
17084: LD_INT 2100
17086: PPUSH
17087: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17091: LD_STRING displayTroll();
17093: PPUSH
17094: CALL_OW 559
// wait ( 1 1$00 ) ;
17098: LD_INT 2100
17100: PPUSH
17101: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17105: LD_STRING hideTroll();
17107: PPUSH
17108: CALL_OW 559
// end ;
17112: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17113: LD_EXP 43
17117: PUSH
17118: LD_EXP 69
17122: AND
17123: IFFALSE 17186
17125: GO 17127
17127: DISABLE
17128: LD_INT 0
17130: PPUSH
// begin p := 0 ;
17131: LD_ADDR_VAR 0 1
17135: PUSH
17136: LD_INT 0
17138: ST_TO_ADDR
// repeat game_speed := 1 ;
17139: LD_ADDR_OWVAR 65
17143: PUSH
17144: LD_INT 1
17146: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17147: LD_INT 35
17149: PPUSH
17150: CALL_OW 67
// p := p + 1 ;
17154: LD_ADDR_VAR 0 1
17158: PUSH
17159: LD_VAR 0 1
17163: PUSH
17164: LD_INT 1
17166: PLUS
17167: ST_TO_ADDR
// until p >= 60 ;
17168: LD_VAR 0 1
17172: PUSH
17173: LD_INT 60
17175: GREATEREQUAL
17176: IFFALSE 17139
// game_speed := 4 ;
17178: LD_ADDR_OWVAR 65
17182: PUSH
17183: LD_INT 4
17185: ST_TO_ADDR
// end ;
17186: PPOPN 1
17188: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17189: LD_EXP 43
17193: PUSH
17194: LD_EXP 70
17198: AND
17199: IFFALSE 17345
17201: GO 17203
17203: DISABLE
17204: LD_INT 0
17206: PPUSH
17207: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17208: LD_ADDR_VAR 0 1
17212: PUSH
17213: LD_INT 22
17215: PUSH
17216: LD_OWVAR 2
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: PUSH
17225: LD_INT 2
17227: PUSH
17228: LD_INT 30
17230: PUSH
17231: LD_INT 0
17233: PUSH
17234: EMPTY
17235: LIST
17236: LIST
17237: PUSH
17238: LD_INT 30
17240: PUSH
17241: LD_INT 1
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: LIST
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: PPUSH
17257: CALL_OW 69
17261: ST_TO_ADDR
// if not depot then
17262: LD_VAR 0 1
17266: NOT
17267: IFFALSE 17271
// exit ;
17269: GO 17345
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17271: LD_ADDR_VAR 0 2
17275: PUSH
17276: LD_VAR 0 1
17280: PUSH
17281: LD_INT 1
17283: PPUSH
17284: LD_VAR 0 1
17288: PPUSH
17289: CALL_OW 12
17293: ARRAY
17294: PPUSH
17295: CALL_OW 274
17299: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17300: LD_VAR 0 2
17304: PPUSH
17305: LD_INT 1
17307: PPUSH
17308: LD_INT 0
17310: PPUSH
17311: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17315: LD_VAR 0 2
17319: PPUSH
17320: LD_INT 2
17322: PPUSH
17323: LD_INT 0
17325: PPUSH
17326: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17330: LD_VAR 0 2
17334: PPUSH
17335: LD_INT 3
17337: PPUSH
17338: LD_INT 0
17340: PPUSH
17341: CALL_OW 277
// end ;
17345: PPOPN 2
17347: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17348: LD_EXP 43
17352: PUSH
17353: LD_EXP 71
17357: AND
17358: IFFALSE 17455
17360: GO 17362
17362: DISABLE
17363: LD_INT 0
17365: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17366: LD_ADDR_VAR 0 1
17370: PUSH
17371: LD_INT 22
17373: PUSH
17374: LD_OWVAR 2
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: PUSH
17383: LD_INT 21
17385: PUSH
17386: LD_INT 1
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: PUSH
17393: LD_INT 3
17395: PUSH
17396: LD_INT 23
17398: PUSH
17399: LD_INT 0
17401: PUSH
17402: EMPTY
17403: LIST
17404: LIST
17405: PUSH
17406: EMPTY
17407: LIST
17408: LIST
17409: PUSH
17410: EMPTY
17411: LIST
17412: LIST
17413: LIST
17414: PPUSH
17415: CALL_OW 69
17419: ST_TO_ADDR
// if not tmp then
17420: LD_VAR 0 1
17424: NOT
17425: IFFALSE 17429
// exit ;
17427: GO 17455
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17429: LD_VAR 0 1
17433: PUSH
17434: LD_INT 1
17436: PPUSH
17437: LD_VAR 0 1
17441: PPUSH
17442: CALL_OW 12
17446: ARRAY
17447: PPUSH
17448: LD_INT 200
17450: PPUSH
17451: CALL_OW 234
// end ;
17455: PPOPN 1
17457: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17458: LD_EXP 43
17462: PUSH
17463: LD_EXP 72
17467: AND
17468: IFFALSE 17547
17470: GO 17472
17472: DISABLE
17473: LD_INT 0
17475: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17476: LD_ADDR_VAR 0 1
17480: PUSH
17481: LD_INT 22
17483: PUSH
17484: LD_OWVAR 2
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PUSH
17493: LD_INT 21
17495: PUSH
17496: LD_INT 2
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: PPUSH
17507: CALL_OW 69
17511: ST_TO_ADDR
// if not tmp then
17512: LD_VAR 0 1
17516: NOT
17517: IFFALSE 17521
// exit ;
17519: GO 17547
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17521: LD_VAR 0 1
17525: PUSH
17526: LD_INT 1
17528: PPUSH
17529: LD_VAR 0 1
17533: PPUSH
17534: CALL_OW 12
17538: ARRAY
17539: PPUSH
17540: LD_INT 60
17542: PPUSH
17543: CALL_OW 234
// end ;
17547: PPOPN 1
17549: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17550: LD_EXP 43
17554: PUSH
17555: LD_EXP 73
17559: AND
17560: IFFALSE 17659
17562: GO 17564
17564: DISABLE
17565: LD_INT 0
17567: PPUSH
17568: PPUSH
// begin enable ;
17569: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17570: LD_ADDR_VAR 0 1
17574: PUSH
17575: LD_INT 22
17577: PUSH
17578: LD_OWVAR 2
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PUSH
17587: LD_INT 61
17589: PUSH
17590: EMPTY
17591: LIST
17592: PUSH
17593: LD_INT 33
17595: PUSH
17596: LD_INT 2
17598: PUSH
17599: EMPTY
17600: LIST
17601: LIST
17602: PUSH
17603: EMPTY
17604: LIST
17605: LIST
17606: LIST
17607: PPUSH
17608: CALL_OW 69
17612: ST_TO_ADDR
// if not tmp then
17613: LD_VAR 0 1
17617: NOT
17618: IFFALSE 17622
// exit ;
17620: GO 17659
// for i in tmp do
17622: LD_ADDR_VAR 0 2
17626: PUSH
17627: LD_VAR 0 1
17631: PUSH
17632: FOR_IN
17633: IFFALSE 17657
// if IsControledBy ( i ) then
17635: LD_VAR 0 2
17639: PPUSH
17640: CALL_OW 312
17644: IFFALSE 17655
// ComUnlink ( i ) ;
17646: LD_VAR 0 2
17650: PPUSH
17651: CALL_OW 136
17655: GO 17632
17657: POP
17658: POP
// end ;
17659: PPOPN 2
17661: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17662: LD_EXP 43
17666: PUSH
17667: LD_EXP 74
17671: AND
17672: IFFALSE 17812
17674: GO 17676
17676: DISABLE
17677: LD_INT 0
17679: PPUSH
17680: PPUSH
// begin ToLua ( displayPowell(); ) ;
17681: LD_STRING displayPowell();
17683: PPUSH
17684: CALL_OW 559
// uc_side := 0 ;
17688: LD_ADDR_OWVAR 20
17692: PUSH
17693: LD_INT 0
17695: ST_TO_ADDR
// uc_nation := 2 ;
17696: LD_ADDR_OWVAR 21
17700: PUSH
17701: LD_INT 2
17703: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17704: LD_ADDR_OWVAR 37
17708: PUSH
17709: LD_INT 14
17711: ST_TO_ADDR
// vc_engine := engine_siberite ;
17712: LD_ADDR_OWVAR 39
17716: PUSH
17717: LD_INT 3
17719: ST_TO_ADDR
// vc_control := control_apeman ;
17720: LD_ADDR_OWVAR 38
17724: PUSH
17725: LD_INT 5
17727: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17728: LD_ADDR_OWVAR 40
17732: PUSH
17733: LD_INT 29
17735: ST_TO_ADDR
// un := CreateVehicle ;
17736: LD_ADDR_VAR 0 2
17740: PUSH
17741: CALL_OW 45
17745: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17746: LD_VAR 0 2
17750: PPUSH
17751: LD_INT 1
17753: PPUSH
17754: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17758: LD_INT 35
17760: PPUSH
17761: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17765: LD_VAR 0 2
17769: PPUSH
17770: LD_INT 22
17772: PUSH
17773: LD_OWVAR 2
17777: PUSH
17778: EMPTY
17779: LIST
17780: LIST
17781: PPUSH
17782: CALL_OW 69
17786: PPUSH
17787: LD_VAR 0 2
17791: PPUSH
17792: CALL_OW 74
17796: PPUSH
17797: CALL_OW 115
// until IsDead ( un ) ;
17801: LD_VAR 0 2
17805: PPUSH
17806: CALL_OW 301
17810: IFFALSE 17758
// end ;
17812: PPOPN 2
17814: END
// every 0 0$1 trigger StreamModeActive and sStu do
17815: LD_EXP 43
17819: PUSH
17820: LD_EXP 82
17824: AND
17825: IFFALSE 17841
17827: GO 17829
17829: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17830: LD_STRING displayStucuk();
17832: PPUSH
17833: CALL_OW 559
// ResetFog ;
17837: CALL_OW 335
// end ;
17841: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17842: LD_EXP 43
17846: PUSH
17847: LD_EXP 75
17851: AND
17852: IFFALSE 17993
17854: GO 17856
17856: DISABLE
17857: LD_INT 0
17859: PPUSH
17860: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17861: LD_ADDR_VAR 0 2
17865: PUSH
17866: LD_INT 22
17868: PUSH
17869: LD_OWVAR 2
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: PUSH
17878: LD_INT 21
17880: PUSH
17881: LD_INT 1
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PUSH
17888: EMPTY
17889: LIST
17890: LIST
17891: PPUSH
17892: CALL_OW 69
17896: ST_TO_ADDR
// if not tmp then
17897: LD_VAR 0 2
17901: NOT
17902: IFFALSE 17906
// exit ;
17904: GO 17993
// un := tmp [ rand ( 1 , tmp ) ] ;
17906: LD_ADDR_VAR 0 1
17910: PUSH
17911: LD_VAR 0 2
17915: PUSH
17916: LD_INT 1
17918: PPUSH
17919: LD_VAR 0 2
17923: PPUSH
17924: CALL_OW 12
17928: ARRAY
17929: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17930: LD_VAR 0 1
17934: PPUSH
17935: LD_INT 0
17937: PPUSH
17938: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17942: LD_VAR 0 1
17946: PPUSH
17947: LD_OWVAR 3
17951: PUSH
17952: LD_VAR 0 1
17956: DIFF
17957: PPUSH
17958: LD_VAR 0 1
17962: PPUSH
17963: CALL_OW 74
17967: PPUSH
17968: CALL_OW 115
// wait ( 0 0$20 ) ;
17972: LD_INT 700
17974: PPUSH
17975: CALL_OW 67
// SetSide ( un , your_side ) ;
17979: LD_VAR 0 1
17983: PPUSH
17984: LD_OWVAR 2
17988: PPUSH
17989: CALL_OW 235
// end ;
17993: PPOPN 2
17995: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17996: LD_EXP 43
18000: PUSH
18001: LD_EXP 76
18005: AND
18006: IFFALSE 18112
18008: GO 18010
18010: DISABLE
18011: LD_INT 0
18013: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18014: LD_ADDR_VAR 0 1
18018: PUSH
18019: LD_INT 22
18021: PUSH
18022: LD_OWVAR 2
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: PUSH
18031: LD_INT 2
18033: PUSH
18034: LD_INT 30
18036: PUSH
18037: LD_INT 0
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: PUSH
18044: LD_INT 30
18046: PUSH
18047: LD_INT 1
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: PUSH
18054: EMPTY
18055: LIST
18056: LIST
18057: LIST
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: PPUSH
18063: CALL_OW 69
18067: ST_TO_ADDR
// if not depot then
18068: LD_VAR 0 1
18072: NOT
18073: IFFALSE 18077
// exit ;
18075: GO 18112
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18077: LD_VAR 0 1
18081: PUSH
18082: LD_INT 1
18084: ARRAY
18085: PPUSH
18086: CALL_OW 250
18090: PPUSH
18091: LD_VAR 0 1
18095: PUSH
18096: LD_INT 1
18098: ARRAY
18099: PPUSH
18100: CALL_OW 251
18104: PPUSH
18105: LD_INT 70
18107: PPUSH
18108: CALL_OW 495
// end ;
18112: PPOPN 1
18114: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18115: LD_EXP 43
18119: PUSH
18120: LD_EXP 77
18124: AND
18125: IFFALSE 18336
18127: GO 18129
18129: DISABLE
18130: LD_INT 0
18132: PPUSH
18133: PPUSH
18134: PPUSH
18135: PPUSH
18136: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18137: LD_ADDR_VAR 0 5
18141: PUSH
18142: LD_INT 22
18144: PUSH
18145: LD_OWVAR 2
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PUSH
18154: LD_INT 21
18156: PUSH
18157: LD_INT 1
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: PPUSH
18168: CALL_OW 69
18172: ST_TO_ADDR
// if not tmp then
18173: LD_VAR 0 5
18177: NOT
18178: IFFALSE 18182
// exit ;
18180: GO 18336
// for i in tmp do
18182: LD_ADDR_VAR 0 1
18186: PUSH
18187: LD_VAR 0 5
18191: PUSH
18192: FOR_IN
18193: IFFALSE 18334
// begin d := rand ( 0 , 5 ) ;
18195: LD_ADDR_VAR 0 4
18199: PUSH
18200: LD_INT 0
18202: PPUSH
18203: LD_INT 5
18205: PPUSH
18206: CALL_OW 12
18210: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18211: LD_ADDR_VAR 0 2
18215: PUSH
18216: LD_VAR 0 1
18220: PPUSH
18221: CALL_OW 250
18225: PPUSH
18226: LD_VAR 0 4
18230: PPUSH
18231: LD_INT 3
18233: PPUSH
18234: LD_INT 12
18236: PPUSH
18237: CALL_OW 12
18241: PPUSH
18242: CALL_OW 272
18246: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18247: LD_ADDR_VAR 0 3
18251: PUSH
18252: LD_VAR 0 1
18256: PPUSH
18257: CALL_OW 251
18261: PPUSH
18262: LD_VAR 0 4
18266: PPUSH
18267: LD_INT 3
18269: PPUSH
18270: LD_INT 12
18272: PPUSH
18273: CALL_OW 12
18277: PPUSH
18278: CALL_OW 273
18282: ST_TO_ADDR
// if ValidHex ( x , y ) then
18283: LD_VAR 0 2
18287: PPUSH
18288: LD_VAR 0 3
18292: PPUSH
18293: CALL_OW 488
18297: IFFALSE 18332
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18299: LD_VAR 0 1
18303: PPUSH
18304: LD_VAR 0 2
18308: PPUSH
18309: LD_VAR 0 3
18313: PPUSH
18314: LD_INT 3
18316: PPUSH
18317: LD_INT 6
18319: PPUSH
18320: CALL_OW 12
18324: PPUSH
18325: LD_INT 1
18327: PPUSH
18328: CALL_OW 483
// end ;
18332: GO 18192
18334: POP
18335: POP
// end ;
18336: PPOPN 5
18338: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18339: LD_EXP 43
18343: PUSH
18344: LD_EXP 78
18348: AND
18349: IFFALSE 18443
18351: GO 18353
18353: DISABLE
18354: LD_INT 0
18356: PPUSH
18357: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18358: LD_ADDR_VAR 0 2
18362: PUSH
18363: LD_INT 22
18365: PUSH
18366: LD_OWVAR 2
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: PUSH
18375: LD_INT 32
18377: PUSH
18378: LD_INT 1
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: PUSH
18385: LD_INT 21
18387: PUSH
18388: LD_INT 2
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: PUSH
18395: EMPTY
18396: LIST
18397: LIST
18398: LIST
18399: PPUSH
18400: CALL_OW 69
18404: ST_TO_ADDR
// if not tmp then
18405: LD_VAR 0 2
18409: NOT
18410: IFFALSE 18414
// exit ;
18412: GO 18443
// for i in tmp do
18414: LD_ADDR_VAR 0 1
18418: PUSH
18419: LD_VAR 0 2
18423: PUSH
18424: FOR_IN
18425: IFFALSE 18441
// SetFuel ( i , 0 ) ;
18427: LD_VAR 0 1
18431: PPUSH
18432: LD_INT 0
18434: PPUSH
18435: CALL_OW 240
18439: GO 18424
18441: POP
18442: POP
// end ;
18443: PPOPN 2
18445: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18446: LD_EXP 43
18450: PUSH
18451: LD_EXP 79
18455: AND
18456: IFFALSE 18522
18458: GO 18460
18460: DISABLE
18461: LD_INT 0
18463: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18464: LD_ADDR_VAR 0 1
18468: PUSH
18469: LD_INT 22
18471: PUSH
18472: LD_OWVAR 2
18476: PUSH
18477: EMPTY
18478: LIST
18479: LIST
18480: PUSH
18481: LD_INT 30
18483: PUSH
18484: LD_INT 29
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: PUSH
18491: EMPTY
18492: LIST
18493: LIST
18494: PPUSH
18495: CALL_OW 69
18499: ST_TO_ADDR
// if not tmp then
18500: LD_VAR 0 1
18504: NOT
18505: IFFALSE 18509
// exit ;
18507: GO 18522
// DestroyUnit ( tmp [ 1 ] ) ;
18509: LD_VAR 0 1
18513: PUSH
18514: LD_INT 1
18516: ARRAY
18517: PPUSH
18518: CALL_OW 65
// end ;
18522: PPOPN 1
18524: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18525: LD_EXP 43
18529: PUSH
18530: LD_EXP 81
18534: AND
18535: IFFALSE 18664
18537: GO 18539
18539: DISABLE
18540: LD_INT 0
18542: PPUSH
// begin uc_side := 0 ;
18543: LD_ADDR_OWVAR 20
18547: PUSH
18548: LD_INT 0
18550: ST_TO_ADDR
// uc_nation := nation_arabian ;
18551: LD_ADDR_OWVAR 21
18555: PUSH
18556: LD_INT 2
18558: ST_TO_ADDR
// hc_gallery :=  ;
18559: LD_ADDR_OWVAR 33
18563: PUSH
18564: LD_STRING 
18566: ST_TO_ADDR
// hc_name :=  ;
18567: LD_ADDR_OWVAR 26
18571: PUSH
18572: LD_STRING 
18574: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18575: LD_INT 1
18577: PPUSH
18578: LD_INT 11
18580: PPUSH
18581: LD_INT 10
18583: PPUSH
18584: CALL_OW 380
// un := CreateHuman ;
18588: LD_ADDR_VAR 0 1
18592: PUSH
18593: CALL_OW 44
18597: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18598: LD_VAR 0 1
18602: PPUSH
18603: LD_INT 1
18605: PPUSH
18606: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18610: LD_INT 35
18612: PPUSH
18613: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18617: LD_VAR 0 1
18621: PPUSH
18622: LD_INT 22
18624: PUSH
18625: LD_OWVAR 2
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: PPUSH
18634: CALL_OW 69
18638: PPUSH
18639: LD_VAR 0 1
18643: PPUSH
18644: CALL_OW 74
18648: PPUSH
18649: CALL_OW 115
// until IsDead ( un ) ;
18653: LD_VAR 0 1
18657: PPUSH
18658: CALL_OW 301
18662: IFFALSE 18610
// end ;
18664: PPOPN 1
18666: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18667: LD_EXP 43
18671: PUSH
18672: LD_EXP 83
18676: AND
18677: IFFALSE 18689
18679: GO 18681
18681: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18682: LD_STRING earthquake(getX(game), 0, 32)
18684: PPUSH
18685: CALL_OW 559
18689: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18690: LD_EXP 43
18694: PUSH
18695: LD_EXP 84
18699: AND
18700: IFFALSE 18791
18702: GO 18704
18704: DISABLE
18705: LD_INT 0
18707: PPUSH
// begin enable ;
18708: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18709: LD_ADDR_VAR 0 1
18713: PUSH
18714: LD_INT 22
18716: PUSH
18717: LD_OWVAR 2
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: PUSH
18726: LD_INT 21
18728: PUSH
18729: LD_INT 2
18731: PUSH
18732: EMPTY
18733: LIST
18734: LIST
18735: PUSH
18736: LD_INT 33
18738: PUSH
18739: LD_INT 3
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: PUSH
18746: EMPTY
18747: LIST
18748: LIST
18749: LIST
18750: PPUSH
18751: CALL_OW 69
18755: ST_TO_ADDR
// if not tmp then
18756: LD_VAR 0 1
18760: NOT
18761: IFFALSE 18765
// exit ;
18763: GO 18791
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18765: LD_VAR 0 1
18769: PUSH
18770: LD_INT 1
18772: PPUSH
18773: LD_VAR 0 1
18777: PPUSH
18778: CALL_OW 12
18782: ARRAY
18783: PPUSH
18784: LD_INT 1
18786: PPUSH
18787: CALL_OW 234
// end ;
18791: PPOPN 1
18793: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18794: LD_EXP 43
18798: PUSH
18799: LD_EXP 85
18803: AND
18804: IFFALSE 18945
18806: GO 18808
18808: DISABLE
18809: LD_INT 0
18811: PPUSH
18812: PPUSH
18813: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18814: LD_ADDR_VAR 0 3
18818: PUSH
18819: LD_INT 22
18821: PUSH
18822: LD_OWVAR 2
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: PUSH
18831: LD_INT 25
18833: PUSH
18834: LD_INT 1
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: PUSH
18841: EMPTY
18842: LIST
18843: LIST
18844: PPUSH
18845: CALL_OW 69
18849: ST_TO_ADDR
// if not tmp then
18850: LD_VAR 0 3
18854: NOT
18855: IFFALSE 18859
// exit ;
18857: GO 18945
// un := tmp [ rand ( 1 , tmp ) ] ;
18859: LD_ADDR_VAR 0 2
18863: PUSH
18864: LD_VAR 0 3
18868: PUSH
18869: LD_INT 1
18871: PPUSH
18872: LD_VAR 0 3
18876: PPUSH
18877: CALL_OW 12
18881: ARRAY
18882: ST_TO_ADDR
// if Crawls ( un ) then
18883: LD_VAR 0 2
18887: PPUSH
18888: CALL_OW 318
18892: IFFALSE 18903
// ComWalk ( un ) ;
18894: LD_VAR 0 2
18898: PPUSH
18899: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18903: LD_VAR 0 2
18907: PPUSH
18908: LD_INT 9
18910: PPUSH
18911: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18915: LD_INT 28
18917: PPUSH
18918: LD_OWVAR 2
18922: PPUSH
18923: LD_INT 2
18925: PPUSH
18926: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18930: LD_INT 29
18932: PPUSH
18933: LD_OWVAR 2
18937: PPUSH
18938: LD_INT 2
18940: PPUSH
18941: CALL_OW 322
// end ;
18945: PPOPN 3
18947: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18948: LD_EXP 43
18952: PUSH
18953: LD_EXP 86
18957: AND
18958: IFFALSE 19069
18960: GO 18962
18962: DISABLE
18963: LD_INT 0
18965: PPUSH
18966: PPUSH
18967: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18968: LD_ADDR_VAR 0 3
18972: PUSH
18973: LD_INT 22
18975: PUSH
18976: LD_OWVAR 2
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: PUSH
18985: LD_INT 25
18987: PUSH
18988: LD_INT 1
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: PPUSH
18999: CALL_OW 69
19003: ST_TO_ADDR
// if not tmp then
19004: LD_VAR 0 3
19008: NOT
19009: IFFALSE 19013
// exit ;
19011: GO 19069
// un := tmp [ rand ( 1 , tmp ) ] ;
19013: LD_ADDR_VAR 0 2
19017: PUSH
19018: LD_VAR 0 3
19022: PUSH
19023: LD_INT 1
19025: PPUSH
19026: LD_VAR 0 3
19030: PPUSH
19031: CALL_OW 12
19035: ARRAY
19036: ST_TO_ADDR
// if Crawls ( un ) then
19037: LD_VAR 0 2
19041: PPUSH
19042: CALL_OW 318
19046: IFFALSE 19057
// ComWalk ( un ) ;
19048: LD_VAR 0 2
19052: PPUSH
19053: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19057: LD_VAR 0 2
19061: PPUSH
19062: LD_INT 8
19064: PPUSH
19065: CALL_OW 336
// end ;
19069: PPOPN 3
19071: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19072: LD_EXP 43
19076: PUSH
19077: LD_EXP 87
19081: AND
19082: IFFALSE 19226
19084: GO 19086
19086: DISABLE
19087: LD_INT 0
19089: PPUSH
19090: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19091: LD_ADDR_VAR 0 2
19095: PUSH
19096: LD_INT 22
19098: PUSH
19099: LD_OWVAR 2
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: PUSH
19108: LD_INT 21
19110: PUSH
19111: LD_INT 2
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 2
19120: PUSH
19121: LD_INT 34
19123: PUSH
19124: LD_INT 12
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: PUSH
19131: LD_INT 34
19133: PUSH
19134: LD_INT 51
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: LD_INT 34
19143: PUSH
19144: LD_INT 32
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: LIST
19161: PPUSH
19162: CALL_OW 69
19166: ST_TO_ADDR
// if not tmp then
19167: LD_VAR 0 2
19171: NOT
19172: IFFALSE 19176
// exit ;
19174: GO 19226
// for i in tmp do
19176: LD_ADDR_VAR 0 1
19180: PUSH
19181: LD_VAR 0 2
19185: PUSH
19186: FOR_IN
19187: IFFALSE 19224
// if GetCargo ( i , mat_artifact ) = 0 then
19189: LD_VAR 0 1
19193: PPUSH
19194: LD_INT 4
19196: PPUSH
19197: CALL_OW 289
19201: PUSH
19202: LD_INT 0
19204: EQUAL
19205: IFFALSE 19222
// SetCargo ( i , mat_siberit , 100 ) ;
19207: LD_VAR 0 1
19211: PPUSH
19212: LD_INT 3
19214: PPUSH
19215: LD_INT 100
19217: PPUSH
19218: CALL_OW 290
19222: GO 19186
19224: POP
19225: POP
// end ;
19226: PPOPN 2
19228: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19229: LD_EXP 43
19233: PUSH
19234: LD_EXP 88
19238: AND
19239: IFFALSE 19422
19241: GO 19243
19243: DISABLE
19244: LD_INT 0
19246: PPUSH
19247: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19248: LD_ADDR_VAR 0 2
19252: PUSH
19253: LD_INT 22
19255: PUSH
19256: LD_OWVAR 2
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: PPUSH
19265: CALL_OW 69
19269: ST_TO_ADDR
// if not tmp then
19270: LD_VAR 0 2
19274: NOT
19275: IFFALSE 19279
// exit ;
19277: GO 19422
// for i := 1 to 2 do
19279: LD_ADDR_VAR 0 1
19283: PUSH
19284: DOUBLE
19285: LD_INT 1
19287: DEC
19288: ST_TO_ADDR
19289: LD_INT 2
19291: PUSH
19292: FOR_TO
19293: IFFALSE 19420
// begin uc_side := your_side ;
19295: LD_ADDR_OWVAR 20
19299: PUSH
19300: LD_OWVAR 2
19304: ST_TO_ADDR
// uc_nation := nation_american ;
19305: LD_ADDR_OWVAR 21
19309: PUSH
19310: LD_INT 1
19312: ST_TO_ADDR
// vc_chassis := us_morphling ;
19313: LD_ADDR_OWVAR 37
19317: PUSH
19318: LD_INT 5
19320: ST_TO_ADDR
// vc_engine := engine_siberite ;
19321: LD_ADDR_OWVAR 39
19325: PUSH
19326: LD_INT 3
19328: ST_TO_ADDR
// vc_control := control_computer ;
19329: LD_ADDR_OWVAR 38
19333: PUSH
19334: LD_INT 3
19336: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19337: LD_ADDR_OWVAR 40
19341: PUSH
19342: LD_INT 10
19344: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19345: LD_VAR 0 2
19349: PUSH
19350: LD_INT 1
19352: ARRAY
19353: PPUSH
19354: CALL_OW 310
19358: NOT
19359: IFFALSE 19406
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19361: CALL_OW 45
19365: PPUSH
19366: LD_VAR 0 2
19370: PUSH
19371: LD_INT 1
19373: ARRAY
19374: PPUSH
19375: CALL_OW 250
19379: PPUSH
19380: LD_VAR 0 2
19384: PUSH
19385: LD_INT 1
19387: ARRAY
19388: PPUSH
19389: CALL_OW 251
19393: PPUSH
19394: LD_INT 12
19396: PPUSH
19397: LD_INT 1
19399: PPUSH
19400: CALL_OW 50
19404: GO 19418
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19406: CALL_OW 45
19410: PPUSH
19411: LD_INT 1
19413: PPUSH
19414: CALL_OW 51
// end ;
19418: GO 19292
19420: POP
19421: POP
// end ;
19422: PPOPN 2
19424: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19425: LD_EXP 43
19429: PUSH
19430: LD_EXP 89
19434: AND
19435: IFFALSE 19657
19437: GO 19439
19439: DISABLE
19440: LD_INT 0
19442: PPUSH
19443: PPUSH
19444: PPUSH
19445: PPUSH
19446: PPUSH
19447: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19448: LD_ADDR_VAR 0 6
19452: PUSH
19453: LD_INT 22
19455: PUSH
19456: LD_OWVAR 2
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: PUSH
19465: LD_INT 21
19467: PUSH
19468: LD_INT 1
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: LD_INT 3
19477: PUSH
19478: LD_INT 23
19480: PUSH
19481: LD_INT 0
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: EMPTY
19489: LIST
19490: LIST
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: LIST
19496: PPUSH
19497: CALL_OW 69
19501: ST_TO_ADDR
// if not tmp then
19502: LD_VAR 0 6
19506: NOT
19507: IFFALSE 19511
// exit ;
19509: GO 19657
// s1 := rand ( 1 , 4 ) ;
19511: LD_ADDR_VAR 0 2
19515: PUSH
19516: LD_INT 1
19518: PPUSH
19519: LD_INT 4
19521: PPUSH
19522: CALL_OW 12
19526: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19527: LD_ADDR_VAR 0 4
19531: PUSH
19532: LD_VAR 0 6
19536: PUSH
19537: LD_INT 1
19539: ARRAY
19540: PPUSH
19541: LD_VAR 0 2
19545: PPUSH
19546: CALL_OW 259
19550: ST_TO_ADDR
// if s1 = 1 then
19551: LD_VAR 0 2
19555: PUSH
19556: LD_INT 1
19558: EQUAL
19559: IFFALSE 19579
// s2 := rand ( 2 , 4 ) else
19561: LD_ADDR_VAR 0 3
19565: PUSH
19566: LD_INT 2
19568: PPUSH
19569: LD_INT 4
19571: PPUSH
19572: CALL_OW 12
19576: ST_TO_ADDR
19577: GO 19587
// s2 := 1 ;
19579: LD_ADDR_VAR 0 3
19583: PUSH
19584: LD_INT 1
19586: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19587: LD_ADDR_VAR 0 5
19591: PUSH
19592: LD_VAR 0 6
19596: PUSH
19597: LD_INT 1
19599: ARRAY
19600: PPUSH
19601: LD_VAR 0 3
19605: PPUSH
19606: CALL_OW 259
19610: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19611: LD_VAR 0 6
19615: PUSH
19616: LD_INT 1
19618: ARRAY
19619: PPUSH
19620: LD_VAR 0 2
19624: PPUSH
19625: LD_VAR 0 5
19629: PPUSH
19630: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19634: LD_VAR 0 6
19638: PUSH
19639: LD_INT 1
19641: ARRAY
19642: PPUSH
19643: LD_VAR 0 3
19647: PPUSH
19648: LD_VAR 0 4
19652: PPUSH
19653: CALL_OW 237
// end ;
19657: PPOPN 6
19659: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19660: LD_EXP 43
19664: PUSH
19665: LD_EXP 90
19669: AND
19670: IFFALSE 19749
19672: GO 19674
19674: DISABLE
19675: LD_INT 0
19677: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19678: LD_ADDR_VAR 0 1
19682: PUSH
19683: LD_INT 22
19685: PUSH
19686: LD_OWVAR 2
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PUSH
19695: LD_INT 30
19697: PUSH
19698: LD_INT 3
19700: PUSH
19701: EMPTY
19702: LIST
19703: LIST
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: PPUSH
19709: CALL_OW 69
19713: ST_TO_ADDR
// if not tmp then
19714: LD_VAR 0 1
19718: NOT
19719: IFFALSE 19723
// exit ;
19721: GO 19749
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19723: LD_VAR 0 1
19727: PUSH
19728: LD_INT 1
19730: PPUSH
19731: LD_VAR 0 1
19735: PPUSH
19736: CALL_OW 12
19740: ARRAY
19741: PPUSH
19742: LD_INT 1
19744: PPUSH
19745: CALL_OW 234
// end ;
19749: PPOPN 1
19751: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19752: LD_EXP 43
19756: PUSH
19757: LD_EXP 91
19761: AND
19762: IFFALSE 19874
19764: GO 19766
19766: DISABLE
19767: LD_INT 0
19769: PPUSH
19770: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19771: LD_ADDR_VAR 0 2
19775: PUSH
19776: LD_INT 22
19778: PUSH
19779: LD_OWVAR 2
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: PUSH
19788: LD_INT 2
19790: PUSH
19791: LD_INT 30
19793: PUSH
19794: LD_INT 27
19796: PUSH
19797: EMPTY
19798: LIST
19799: LIST
19800: PUSH
19801: LD_INT 30
19803: PUSH
19804: LD_INT 26
19806: PUSH
19807: EMPTY
19808: LIST
19809: LIST
19810: PUSH
19811: LD_INT 30
19813: PUSH
19814: LD_INT 28
19816: PUSH
19817: EMPTY
19818: LIST
19819: LIST
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PPUSH
19831: CALL_OW 69
19835: ST_TO_ADDR
// if not tmp then
19836: LD_VAR 0 2
19840: NOT
19841: IFFALSE 19845
// exit ;
19843: GO 19874
// for i in tmp do
19845: LD_ADDR_VAR 0 1
19849: PUSH
19850: LD_VAR 0 2
19854: PUSH
19855: FOR_IN
19856: IFFALSE 19872
// SetLives ( i , 1 ) ;
19858: LD_VAR 0 1
19862: PPUSH
19863: LD_INT 1
19865: PPUSH
19866: CALL_OW 234
19870: GO 19855
19872: POP
19873: POP
// end ;
19874: PPOPN 2
19876: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19877: LD_EXP 43
19881: PUSH
19882: LD_EXP 92
19886: AND
19887: IFFALSE 20161
19889: GO 19891
19891: DISABLE
19892: LD_INT 0
19894: PPUSH
19895: PPUSH
19896: PPUSH
// begin i := rand ( 1 , 7 ) ;
19897: LD_ADDR_VAR 0 1
19901: PUSH
19902: LD_INT 1
19904: PPUSH
19905: LD_INT 7
19907: PPUSH
19908: CALL_OW 12
19912: ST_TO_ADDR
// case i of 1 :
19913: LD_VAR 0 1
19917: PUSH
19918: LD_INT 1
19920: DOUBLE
19921: EQUAL
19922: IFTRUE 19926
19924: GO 19936
19926: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19927: LD_STRING earthquake(getX(game), 0, 32)
19929: PPUSH
19930: CALL_OW 559
19934: GO 20161
19936: LD_INT 2
19938: DOUBLE
19939: EQUAL
19940: IFTRUE 19944
19942: GO 19958
19944: POP
// begin ToLua ( displayStucuk(); ) ;
19945: LD_STRING displayStucuk();
19947: PPUSH
19948: CALL_OW 559
// ResetFog ;
19952: CALL_OW 335
// end ; 3 :
19956: GO 20161
19958: LD_INT 3
19960: DOUBLE
19961: EQUAL
19962: IFTRUE 19966
19964: GO 20070
19966: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19967: LD_ADDR_VAR 0 2
19971: PUSH
19972: LD_INT 22
19974: PUSH
19975: LD_OWVAR 2
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: PUSH
19984: LD_INT 25
19986: PUSH
19987: LD_INT 1
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: PUSH
19994: EMPTY
19995: LIST
19996: LIST
19997: PPUSH
19998: CALL_OW 69
20002: ST_TO_ADDR
// if not tmp then
20003: LD_VAR 0 2
20007: NOT
20008: IFFALSE 20012
// exit ;
20010: GO 20161
// un := tmp [ rand ( 1 , tmp ) ] ;
20012: LD_ADDR_VAR 0 3
20016: PUSH
20017: LD_VAR 0 2
20021: PUSH
20022: LD_INT 1
20024: PPUSH
20025: LD_VAR 0 2
20029: PPUSH
20030: CALL_OW 12
20034: ARRAY
20035: ST_TO_ADDR
// if Crawls ( un ) then
20036: LD_VAR 0 3
20040: PPUSH
20041: CALL_OW 318
20045: IFFALSE 20056
// ComWalk ( un ) ;
20047: LD_VAR 0 3
20051: PPUSH
20052: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20056: LD_VAR 0 3
20060: PPUSH
20061: LD_INT 8
20063: PPUSH
20064: CALL_OW 336
// end ; 4 :
20068: GO 20161
20070: LD_INT 4
20072: DOUBLE
20073: EQUAL
20074: IFTRUE 20078
20076: GO 20139
20078: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20079: LD_ADDR_VAR 0 2
20083: PUSH
20084: LD_INT 22
20086: PUSH
20087: LD_OWVAR 2
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: PUSH
20096: LD_INT 30
20098: PUSH
20099: LD_INT 29
20101: PUSH
20102: EMPTY
20103: LIST
20104: LIST
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: PPUSH
20110: CALL_OW 69
20114: ST_TO_ADDR
// if not tmp then
20115: LD_VAR 0 2
20119: NOT
20120: IFFALSE 20124
// exit ;
20122: GO 20161
// DestroyUnit ( tmp [ 1 ] ) ;
20124: LD_VAR 0 2
20128: PUSH
20129: LD_INT 1
20131: ARRAY
20132: PPUSH
20133: CALL_OW 65
// end ; 5 .. 7 :
20137: GO 20161
20139: LD_INT 5
20141: DOUBLE
20142: GREATEREQUAL
20143: IFFALSE 20151
20145: LD_INT 7
20147: DOUBLE
20148: LESSEQUAL
20149: IFTRUE 20153
20151: GO 20160
20153: POP
// StreamSibBomb ; end ;
20154: CALL 16411 0 0
20158: GO 20161
20160: POP
// end ;
20161: PPOPN 3
20163: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20164: LD_EXP 43
20168: PUSH
20169: LD_EXP 93
20173: AND
20174: IFFALSE 20330
20176: GO 20178
20178: DISABLE
20179: LD_INT 0
20181: PPUSH
20182: PPUSH
20183: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20184: LD_ADDR_VAR 0 2
20188: PUSH
20189: LD_INT 81
20191: PUSH
20192: LD_OWVAR 2
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: PUSH
20201: LD_INT 2
20203: PUSH
20204: LD_INT 21
20206: PUSH
20207: LD_INT 1
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: PUSH
20214: LD_INT 21
20216: PUSH
20217: LD_INT 2
20219: PUSH
20220: EMPTY
20221: LIST
20222: LIST
20223: PUSH
20224: EMPTY
20225: LIST
20226: LIST
20227: LIST
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: PPUSH
20233: CALL_OW 69
20237: ST_TO_ADDR
// if not tmp then
20238: LD_VAR 0 2
20242: NOT
20243: IFFALSE 20247
// exit ;
20245: GO 20330
// p := 0 ;
20247: LD_ADDR_VAR 0 3
20251: PUSH
20252: LD_INT 0
20254: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20255: LD_INT 35
20257: PPUSH
20258: CALL_OW 67
// p := p + 1 ;
20262: LD_ADDR_VAR 0 3
20266: PUSH
20267: LD_VAR 0 3
20271: PUSH
20272: LD_INT 1
20274: PLUS
20275: ST_TO_ADDR
// for i in tmp do
20276: LD_ADDR_VAR 0 1
20280: PUSH
20281: LD_VAR 0 2
20285: PUSH
20286: FOR_IN
20287: IFFALSE 20318
// if GetLives ( i ) < 1000 then
20289: LD_VAR 0 1
20293: PPUSH
20294: CALL_OW 256
20298: PUSH
20299: LD_INT 1000
20301: LESS
20302: IFFALSE 20316
// SetLives ( i , 1000 ) ;
20304: LD_VAR 0 1
20308: PPUSH
20309: LD_INT 1000
20311: PPUSH
20312: CALL_OW 234
20316: GO 20286
20318: POP
20319: POP
// until p > 20 ;
20320: LD_VAR 0 3
20324: PUSH
20325: LD_INT 20
20327: GREATER
20328: IFFALSE 20255
// end ;
20330: PPOPN 3
20332: END
// every 0 0$1 trigger StreamModeActive and sTime do
20333: LD_EXP 43
20337: PUSH
20338: LD_EXP 94
20342: AND
20343: IFFALSE 20378
20345: GO 20347
20347: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20348: LD_INT 28
20350: PPUSH
20351: LD_OWVAR 2
20355: PPUSH
20356: LD_INT 2
20358: PPUSH
20359: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20363: LD_INT 30
20365: PPUSH
20366: LD_OWVAR 2
20370: PPUSH
20371: LD_INT 2
20373: PPUSH
20374: CALL_OW 322
// end ;
20378: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20379: LD_EXP 43
20383: PUSH
20384: LD_EXP 95
20388: AND
20389: IFFALSE 20510
20391: GO 20393
20393: DISABLE
20394: LD_INT 0
20396: PPUSH
20397: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20398: LD_ADDR_VAR 0 2
20402: PUSH
20403: LD_INT 22
20405: PUSH
20406: LD_OWVAR 2
20410: PUSH
20411: EMPTY
20412: LIST
20413: LIST
20414: PUSH
20415: LD_INT 21
20417: PUSH
20418: LD_INT 1
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: PUSH
20425: LD_INT 3
20427: PUSH
20428: LD_INT 23
20430: PUSH
20431: LD_INT 0
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: LIST
20446: PPUSH
20447: CALL_OW 69
20451: ST_TO_ADDR
// if not tmp then
20452: LD_VAR 0 2
20456: NOT
20457: IFFALSE 20461
// exit ;
20459: GO 20510
// for i in tmp do
20461: LD_ADDR_VAR 0 1
20465: PUSH
20466: LD_VAR 0 2
20470: PUSH
20471: FOR_IN
20472: IFFALSE 20508
// begin if Crawls ( i ) then
20474: LD_VAR 0 1
20478: PPUSH
20479: CALL_OW 318
20483: IFFALSE 20494
// ComWalk ( i ) ;
20485: LD_VAR 0 1
20489: PPUSH
20490: CALL_OW 138
// SetClass ( i , 2 ) ;
20494: LD_VAR 0 1
20498: PPUSH
20499: LD_INT 2
20501: PPUSH
20502: CALL_OW 336
// end ;
20506: GO 20471
20508: POP
20509: POP
// end ;
20510: PPOPN 2
20512: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20513: LD_EXP 43
20517: PUSH
20518: LD_EXP 96
20522: AND
20523: IFFALSE 20804
20525: GO 20527
20527: DISABLE
20528: LD_INT 0
20530: PPUSH
20531: PPUSH
20532: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20533: LD_OWVAR 2
20537: PPUSH
20538: LD_INT 9
20540: PPUSH
20541: LD_INT 1
20543: PPUSH
20544: LD_INT 1
20546: PPUSH
20547: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20551: LD_INT 9
20553: PPUSH
20554: LD_OWVAR 2
20558: PPUSH
20559: CALL_OW 343
// uc_side := 9 ;
20563: LD_ADDR_OWVAR 20
20567: PUSH
20568: LD_INT 9
20570: ST_TO_ADDR
// uc_nation := 2 ;
20571: LD_ADDR_OWVAR 21
20575: PUSH
20576: LD_INT 2
20578: ST_TO_ADDR
// hc_name := Dark Warrior ;
20579: LD_ADDR_OWVAR 26
20583: PUSH
20584: LD_STRING Dark Warrior
20586: ST_TO_ADDR
// hc_gallery :=  ;
20587: LD_ADDR_OWVAR 33
20591: PUSH
20592: LD_STRING 
20594: ST_TO_ADDR
// hc_noskilllimit := true ;
20595: LD_ADDR_OWVAR 76
20599: PUSH
20600: LD_INT 1
20602: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20603: LD_ADDR_OWVAR 31
20607: PUSH
20608: LD_INT 30
20610: PUSH
20611: LD_INT 30
20613: PUSH
20614: LD_INT 30
20616: PUSH
20617: LD_INT 30
20619: PUSH
20620: EMPTY
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: ST_TO_ADDR
// un := CreateHuman ;
20626: LD_ADDR_VAR 0 3
20630: PUSH
20631: CALL_OW 44
20635: ST_TO_ADDR
// hc_noskilllimit := false ;
20636: LD_ADDR_OWVAR 76
20640: PUSH
20641: LD_INT 0
20643: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20644: LD_VAR 0 3
20648: PPUSH
20649: LD_INT 1
20651: PPUSH
20652: CALL_OW 51
// p := 0 ;
20656: LD_ADDR_VAR 0 2
20660: PUSH
20661: LD_INT 0
20663: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20664: LD_INT 35
20666: PPUSH
20667: CALL_OW 67
// p := p + 1 ;
20671: LD_ADDR_VAR 0 2
20675: PUSH
20676: LD_VAR 0 2
20680: PUSH
20681: LD_INT 1
20683: PLUS
20684: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20685: LD_VAR 0 3
20689: PPUSH
20690: CALL_OW 256
20694: PUSH
20695: LD_INT 1000
20697: LESS
20698: IFFALSE 20712
// SetLives ( un , 1000 ) ;
20700: LD_VAR 0 3
20704: PPUSH
20705: LD_INT 1000
20707: PPUSH
20708: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20712: LD_VAR 0 3
20716: PPUSH
20717: LD_INT 81
20719: PUSH
20720: LD_OWVAR 2
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: PUSH
20729: LD_INT 91
20731: PUSH
20732: LD_VAR 0 3
20736: PUSH
20737: LD_INT 30
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: LIST
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: PPUSH
20749: CALL_OW 69
20753: PPUSH
20754: LD_VAR 0 3
20758: PPUSH
20759: CALL_OW 74
20763: PPUSH
20764: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
20768: LD_VAR 0 2
20772: PUSH
20773: LD_INT 60
20775: GREATER
20776: PUSH
20777: LD_VAR 0 3
20781: PPUSH
20782: CALL_OW 301
20786: OR
20787: IFFALSE 20664
// if un then
20789: LD_VAR 0 3
20793: IFFALSE 20804
// RemoveUnit ( un ) ;
20795: LD_VAR 0 3
20799: PPUSH
20800: CALL_OW 64
// end ;
20804: PPOPN 3
20806: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20807: LD_INT 0
20809: PPUSH
// case cmd of 301 :
20810: LD_VAR 0 1
20814: PUSH
20815: LD_INT 301
20817: DOUBLE
20818: EQUAL
20819: IFTRUE 20823
20821: GO 20855
20823: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20824: LD_VAR 0 6
20828: PPUSH
20829: LD_VAR 0 7
20833: PPUSH
20834: LD_VAR 0 8
20838: PPUSH
20839: LD_VAR 0 4
20843: PPUSH
20844: LD_VAR 0 5
20848: PPUSH
20849: CALL 22056 0 5
20853: GO 20976
20855: LD_INT 302
20857: DOUBLE
20858: EQUAL
20859: IFTRUE 20863
20861: GO 20900
20863: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20864: LD_VAR 0 6
20868: PPUSH
20869: LD_VAR 0 7
20873: PPUSH
20874: LD_VAR 0 8
20878: PPUSH
20879: LD_VAR 0 9
20883: PPUSH
20884: LD_VAR 0 4
20888: PPUSH
20889: LD_VAR 0 5
20893: PPUSH
20894: CALL 22147 0 6
20898: GO 20976
20900: LD_INT 303
20902: DOUBLE
20903: EQUAL
20904: IFTRUE 20908
20906: GO 20945
20908: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20909: LD_VAR 0 6
20913: PPUSH
20914: LD_VAR 0 7
20918: PPUSH
20919: LD_VAR 0 8
20923: PPUSH
20924: LD_VAR 0 9
20928: PPUSH
20929: LD_VAR 0 4
20933: PPUSH
20934: LD_VAR 0 5
20938: PPUSH
20939: CALL 20981 0 6
20943: GO 20976
20945: LD_INT 304
20947: DOUBLE
20948: EQUAL
20949: IFTRUE 20953
20951: GO 20975
20953: POP
// hHackTeleport ( unit , x , y ) ; end ;
20954: LD_VAR 0 2
20958: PPUSH
20959: LD_VAR 0 4
20963: PPUSH
20964: LD_VAR 0 5
20968: PPUSH
20969: CALL 22740 0 3
20973: GO 20976
20975: POP
// end ;
20976: LD_VAR 0 12
20980: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20981: LD_INT 0
20983: PPUSH
20984: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20985: LD_VAR 0 1
20989: PUSH
20990: LD_INT 1
20992: LESS
20993: PUSH
20994: LD_VAR 0 1
20998: PUSH
20999: LD_INT 3
21001: GREATER
21002: OR
21003: PUSH
21004: LD_VAR 0 5
21008: PPUSH
21009: LD_VAR 0 6
21013: PPUSH
21014: CALL_OW 428
21018: OR
21019: IFFALSE 21023
// exit ;
21021: GO 21743
// uc_side := your_side ;
21023: LD_ADDR_OWVAR 20
21027: PUSH
21028: LD_OWVAR 2
21032: ST_TO_ADDR
// uc_nation := nation ;
21033: LD_ADDR_OWVAR 21
21037: PUSH
21038: LD_VAR 0 1
21042: ST_TO_ADDR
// bc_level = 1 ;
21043: LD_ADDR_OWVAR 43
21047: PUSH
21048: LD_INT 1
21050: ST_TO_ADDR
// case btype of 1 :
21051: LD_VAR 0 2
21055: PUSH
21056: LD_INT 1
21058: DOUBLE
21059: EQUAL
21060: IFTRUE 21064
21062: GO 21075
21064: POP
// bc_type := b_depot ; 2 :
21065: LD_ADDR_OWVAR 42
21069: PUSH
21070: LD_INT 0
21072: ST_TO_ADDR
21073: GO 21687
21075: LD_INT 2
21077: DOUBLE
21078: EQUAL
21079: IFTRUE 21083
21081: GO 21094
21083: POP
// bc_type := b_warehouse ; 3 :
21084: LD_ADDR_OWVAR 42
21088: PUSH
21089: LD_INT 1
21091: ST_TO_ADDR
21092: GO 21687
21094: LD_INT 3
21096: DOUBLE
21097: EQUAL
21098: IFTRUE 21102
21100: GO 21113
21102: POP
// bc_type := b_lab ; 4 .. 9 :
21103: LD_ADDR_OWVAR 42
21107: PUSH
21108: LD_INT 6
21110: ST_TO_ADDR
21111: GO 21687
21113: LD_INT 4
21115: DOUBLE
21116: GREATEREQUAL
21117: IFFALSE 21125
21119: LD_INT 9
21121: DOUBLE
21122: LESSEQUAL
21123: IFTRUE 21127
21125: GO 21179
21127: POP
// begin bc_type := b_lab_half ;
21128: LD_ADDR_OWVAR 42
21132: PUSH
21133: LD_INT 7
21135: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21136: LD_ADDR_OWVAR 44
21140: PUSH
21141: LD_INT 10
21143: PUSH
21144: LD_INT 11
21146: PUSH
21147: LD_INT 12
21149: PUSH
21150: LD_INT 15
21152: PUSH
21153: LD_INT 14
21155: PUSH
21156: LD_INT 13
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: PUSH
21167: LD_VAR 0 2
21171: PUSH
21172: LD_INT 3
21174: MINUS
21175: ARRAY
21176: ST_TO_ADDR
// end ; 10 .. 13 :
21177: GO 21687
21179: LD_INT 10
21181: DOUBLE
21182: GREATEREQUAL
21183: IFFALSE 21191
21185: LD_INT 13
21187: DOUBLE
21188: LESSEQUAL
21189: IFTRUE 21193
21191: GO 21270
21193: POP
// begin bc_type := b_lab_full ;
21194: LD_ADDR_OWVAR 42
21198: PUSH
21199: LD_INT 8
21201: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21202: LD_ADDR_OWVAR 44
21206: PUSH
21207: LD_INT 10
21209: PUSH
21210: LD_INT 12
21212: PUSH
21213: LD_INT 14
21215: PUSH
21216: LD_INT 13
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: PUSH
21225: LD_VAR 0 2
21229: PUSH
21230: LD_INT 9
21232: MINUS
21233: ARRAY
21234: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21235: LD_ADDR_OWVAR 45
21239: PUSH
21240: LD_INT 11
21242: PUSH
21243: LD_INT 15
21245: PUSH
21246: LD_INT 12
21248: PUSH
21249: LD_INT 15
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: PUSH
21258: LD_VAR 0 2
21262: PUSH
21263: LD_INT 9
21265: MINUS
21266: ARRAY
21267: ST_TO_ADDR
// end ; 14 :
21268: GO 21687
21270: LD_INT 14
21272: DOUBLE
21273: EQUAL
21274: IFTRUE 21278
21276: GO 21289
21278: POP
// bc_type := b_workshop ; 15 :
21279: LD_ADDR_OWVAR 42
21283: PUSH
21284: LD_INT 2
21286: ST_TO_ADDR
21287: GO 21687
21289: LD_INT 15
21291: DOUBLE
21292: EQUAL
21293: IFTRUE 21297
21295: GO 21308
21297: POP
// bc_type := b_factory ; 16 :
21298: LD_ADDR_OWVAR 42
21302: PUSH
21303: LD_INT 3
21305: ST_TO_ADDR
21306: GO 21687
21308: LD_INT 16
21310: DOUBLE
21311: EQUAL
21312: IFTRUE 21316
21314: GO 21327
21316: POP
// bc_type := b_ext_gun ; 17 :
21317: LD_ADDR_OWVAR 42
21321: PUSH
21322: LD_INT 17
21324: ST_TO_ADDR
21325: GO 21687
21327: LD_INT 17
21329: DOUBLE
21330: EQUAL
21331: IFTRUE 21335
21333: GO 21363
21335: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21336: LD_ADDR_OWVAR 42
21340: PUSH
21341: LD_INT 19
21343: PUSH
21344: LD_INT 23
21346: PUSH
21347: LD_INT 19
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: LIST
21354: PUSH
21355: LD_VAR 0 1
21359: ARRAY
21360: ST_TO_ADDR
21361: GO 21687
21363: LD_INT 18
21365: DOUBLE
21366: EQUAL
21367: IFTRUE 21371
21369: GO 21382
21371: POP
// bc_type := b_ext_radar ; 19 :
21372: LD_ADDR_OWVAR 42
21376: PUSH
21377: LD_INT 20
21379: ST_TO_ADDR
21380: GO 21687
21382: LD_INT 19
21384: DOUBLE
21385: EQUAL
21386: IFTRUE 21390
21388: GO 21401
21390: POP
// bc_type := b_ext_radio ; 20 :
21391: LD_ADDR_OWVAR 42
21395: PUSH
21396: LD_INT 22
21398: ST_TO_ADDR
21399: GO 21687
21401: LD_INT 20
21403: DOUBLE
21404: EQUAL
21405: IFTRUE 21409
21407: GO 21420
21409: POP
// bc_type := b_ext_siberium ; 21 :
21410: LD_ADDR_OWVAR 42
21414: PUSH
21415: LD_INT 21
21417: ST_TO_ADDR
21418: GO 21687
21420: LD_INT 21
21422: DOUBLE
21423: EQUAL
21424: IFTRUE 21428
21426: GO 21439
21428: POP
// bc_type := b_ext_computer ; 22 :
21429: LD_ADDR_OWVAR 42
21433: PUSH
21434: LD_INT 24
21436: ST_TO_ADDR
21437: GO 21687
21439: LD_INT 22
21441: DOUBLE
21442: EQUAL
21443: IFTRUE 21447
21445: GO 21458
21447: POP
// bc_type := b_ext_track ; 23 :
21448: LD_ADDR_OWVAR 42
21452: PUSH
21453: LD_INT 16
21455: ST_TO_ADDR
21456: GO 21687
21458: LD_INT 23
21460: DOUBLE
21461: EQUAL
21462: IFTRUE 21466
21464: GO 21477
21466: POP
// bc_type := b_ext_laser ; 24 :
21467: LD_ADDR_OWVAR 42
21471: PUSH
21472: LD_INT 25
21474: ST_TO_ADDR
21475: GO 21687
21477: LD_INT 24
21479: DOUBLE
21480: EQUAL
21481: IFTRUE 21485
21483: GO 21496
21485: POP
// bc_type := b_control_tower ; 25 :
21486: LD_ADDR_OWVAR 42
21490: PUSH
21491: LD_INT 36
21493: ST_TO_ADDR
21494: GO 21687
21496: LD_INT 25
21498: DOUBLE
21499: EQUAL
21500: IFTRUE 21504
21502: GO 21515
21504: POP
// bc_type := b_breastwork ; 26 :
21505: LD_ADDR_OWVAR 42
21509: PUSH
21510: LD_INT 31
21512: ST_TO_ADDR
21513: GO 21687
21515: LD_INT 26
21517: DOUBLE
21518: EQUAL
21519: IFTRUE 21523
21521: GO 21534
21523: POP
// bc_type := b_bunker ; 27 :
21524: LD_ADDR_OWVAR 42
21528: PUSH
21529: LD_INT 32
21531: ST_TO_ADDR
21532: GO 21687
21534: LD_INT 27
21536: DOUBLE
21537: EQUAL
21538: IFTRUE 21542
21540: GO 21553
21542: POP
// bc_type := b_turret ; 28 :
21543: LD_ADDR_OWVAR 42
21547: PUSH
21548: LD_INT 33
21550: ST_TO_ADDR
21551: GO 21687
21553: LD_INT 28
21555: DOUBLE
21556: EQUAL
21557: IFTRUE 21561
21559: GO 21572
21561: POP
// bc_type := b_armoury ; 29 :
21562: LD_ADDR_OWVAR 42
21566: PUSH
21567: LD_INT 4
21569: ST_TO_ADDR
21570: GO 21687
21572: LD_INT 29
21574: DOUBLE
21575: EQUAL
21576: IFTRUE 21580
21578: GO 21591
21580: POP
// bc_type := b_barracks ; 30 :
21581: LD_ADDR_OWVAR 42
21585: PUSH
21586: LD_INT 5
21588: ST_TO_ADDR
21589: GO 21687
21591: LD_INT 30
21593: DOUBLE
21594: EQUAL
21595: IFTRUE 21599
21597: GO 21610
21599: POP
// bc_type := b_solar_power ; 31 :
21600: LD_ADDR_OWVAR 42
21604: PUSH
21605: LD_INT 27
21607: ST_TO_ADDR
21608: GO 21687
21610: LD_INT 31
21612: DOUBLE
21613: EQUAL
21614: IFTRUE 21618
21616: GO 21629
21618: POP
// bc_type := b_oil_power ; 32 :
21619: LD_ADDR_OWVAR 42
21623: PUSH
21624: LD_INT 26
21626: ST_TO_ADDR
21627: GO 21687
21629: LD_INT 32
21631: DOUBLE
21632: EQUAL
21633: IFTRUE 21637
21635: GO 21648
21637: POP
// bc_type := b_siberite_power ; 33 :
21638: LD_ADDR_OWVAR 42
21642: PUSH
21643: LD_INT 28
21645: ST_TO_ADDR
21646: GO 21687
21648: LD_INT 33
21650: DOUBLE
21651: EQUAL
21652: IFTRUE 21656
21654: GO 21667
21656: POP
// bc_type := b_oil_mine ; 34 :
21657: LD_ADDR_OWVAR 42
21661: PUSH
21662: LD_INT 29
21664: ST_TO_ADDR
21665: GO 21687
21667: LD_INT 34
21669: DOUBLE
21670: EQUAL
21671: IFTRUE 21675
21673: GO 21686
21675: POP
// bc_type := b_siberite_mine ; end ;
21676: LD_ADDR_OWVAR 42
21680: PUSH
21681: LD_INT 30
21683: ST_TO_ADDR
21684: GO 21687
21686: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21687: LD_ADDR_VAR 0 8
21691: PUSH
21692: LD_VAR 0 5
21696: PPUSH
21697: LD_VAR 0 6
21701: PPUSH
21702: LD_VAR 0 3
21706: PPUSH
21707: CALL_OW 47
21711: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21712: LD_OWVAR 42
21716: PUSH
21717: LD_INT 32
21719: PUSH
21720: LD_INT 33
21722: PUSH
21723: EMPTY
21724: LIST
21725: LIST
21726: IN
21727: IFFALSE 21743
// PlaceWeaponTurret ( b , weapon ) ;
21729: LD_VAR 0 8
21733: PPUSH
21734: LD_VAR 0 4
21738: PPUSH
21739: CALL_OW 431
// end ;
21743: LD_VAR 0 7
21747: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21748: LD_INT 0
21750: PPUSH
21751: PPUSH
21752: PPUSH
21753: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21754: LD_ADDR_VAR 0 4
21758: PUSH
21759: LD_INT 22
21761: PUSH
21762: LD_OWVAR 2
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: PUSH
21771: LD_INT 2
21773: PUSH
21774: LD_INT 30
21776: PUSH
21777: LD_INT 0
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: PUSH
21784: LD_INT 30
21786: PUSH
21787: LD_INT 1
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: LIST
21798: PUSH
21799: EMPTY
21800: LIST
21801: LIST
21802: PPUSH
21803: CALL_OW 69
21807: ST_TO_ADDR
// if not tmp then
21808: LD_VAR 0 4
21812: NOT
21813: IFFALSE 21817
// exit ;
21815: GO 21876
// for i in tmp do
21817: LD_ADDR_VAR 0 2
21821: PUSH
21822: LD_VAR 0 4
21826: PUSH
21827: FOR_IN
21828: IFFALSE 21874
// for j = 1 to 3 do
21830: LD_ADDR_VAR 0 3
21834: PUSH
21835: DOUBLE
21836: LD_INT 1
21838: DEC
21839: ST_TO_ADDR
21840: LD_INT 3
21842: PUSH
21843: FOR_TO
21844: IFFALSE 21870
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21846: LD_VAR 0 2
21850: PPUSH
21851: CALL_OW 274
21855: PPUSH
21856: LD_VAR 0 3
21860: PPUSH
21861: LD_INT 99999
21863: PPUSH
21864: CALL_OW 277
21868: GO 21843
21870: POP
21871: POP
21872: GO 21827
21874: POP
21875: POP
// end ;
21876: LD_VAR 0 1
21880: RET
// export function hHackSetLevel10 ; var i , j ; begin
21881: LD_INT 0
21883: PPUSH
21884: PPUSH
21885: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21886: LD_ADDR_VAR 0 2
21890: PUSH
21891: LD_INT 21
21893: PUSH
21894: LD_INT 1
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: PPUSH
21901: CALL_OW 69
21905: PUSH
21906: FOR_IN
21907: IFFALSE 21959
// if IsSelected ( i ) then
21909: LD_VAR 0 2
21913: PPUSH
21914: CALL_OW 306
21918: IFFALSE 21957
// begin for j := 1 to 4 do
21920: LD_ADDR_VAR 0 3
21924: PUSH
21925: DOUBLE
21926: LD_INT 1
21928: DEC
21929: ST_TO_ADDR
21930: LD_INT 4
21932: PUSH
21933: FOR_TO
21934: IFFALSE 21955
// SetSkill ( i , j , 10 ) ;
21936: LD_VAR 0 2
21940: PPUSH
21941: LD_VAR 0 3
21945: PPUSH
21946: LD_INT 10
21948: PPUSH
21949: CALL_OW 237
21953: GO 21933
21955: POP
21956: POP
// end ;
21957: GO 21906
21959: POP
21960: POP
// end ;
21961: LD_VAR 0 1
21965: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21966: LD_INT 0
21968: PPUSH
21969: PPUSH
21970: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21971: LD_ADDR_VAR 0 2
21975: PUSH
21976: LD_INT 22
21978: PUSH
21979: LD_OWVAR 2
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PUSH
21988: LD_INT 21
21990: PUSH
21991: LD_INT 1
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: EMPTY
21999: LIST
22000: LIST
22001: PPUSH
22002: CALL_OW 69
22006: PUSH
22007: FOR_IN
22008: IFFALSE 22049
// begin for j := 1 to 4 do
22010: LD_ADDR_VAR 0 3
22014: PUSH
22015: DOUBLE
22016: LD_INT 1
22018: DEC
22019: ST_TO_ADDR
22020: LD_INT 4
22022: PUSH
22023: FOR_TO
22024: IFFALSE 22045
// SetSkill ( i , j , 10 ) ;
22026: LD_VAR 0 2
22030: PPUSH
22031: LD_VAR 0 3
22035: PPUSH
22036: LD_INT 10
22038: PPUSH
22039: CALL_OW 237
22043: GO 22023
22045: POP
22046: POP
// end ;
22047: GO 22007
22049: POP
22050: POP
// end ;
22051: LD_VAR 0 1
22055: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22056: LD_INT 0
22058: PPUSH
// uc_side := your_side ;
22059: LD_ADDR_OWVAR 20
22063: PUSH
22064: LD_OWVAR 2
22068: ST_TO_ADDR
// uc_nation := nation ;
22069: LD_ADDR_OWVAR 21
22073: PUSH
22074: LD_VAR 0 1
22078: ST_TO_ADDR
// InitHc ;
22079: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22083: LD_INT 0
22085: PPUSH
22086: LD_VAR 0 2
22090: PPUSH
22091: LD_VAR 0 3
22095: PPUSH
22096: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22100: LD_VAR 0 4
22104: PPUSH
22105: LD_VAR 0 5
22109: PPUSH
22110: CALL_OW 428
22114: PUSH
22115: LD_INT 0
22117: EQUAL
22118: IFFALSE 22142
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22120: CALL_OW 44
22124: PPUSH
22125: LD_VAR 0 4
22129: PPUSH
22130: LD_VAR 0 5
22134: PPUSH
22135: LD_INT 1
22137: PPUSH
22138: CALL_OW 48
// end ;
22142: LD_VAR 0 6
22146: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22147: LD_INT 0
22149: PPUSH
22150: PPUSH
// uc_side := your_side ;
22151: LD_ADDR_OWVAR 20
22155: PUSH
22156: LD_OWVAR 2
22160: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22161: LD_VAR 0 1
22165: PUSH
22166: LD_INT 1
22168: PUSH
22169: LD_INT 2
22171: PUSH
22172: LD_INT 3
22174: PUSH
22175: LD_INT 4
22177: PUSH
22178: LD_INT 5
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: IN
22188: IFFALSE 22200
// uc_nation := nation_american else
22190: LD_ADDR_OWVAR 21
22194: PUSH
22195: LD_INT 1
22197: ST_TO_ADDR
22198: GO 22243
// if chassis in [ 11 , 12 , 13 , 14 ] then
22200: LD_VAR 0 1
22204: PUSH
22205: LD_INT 11
22207: PUSH
22208: LD_INT 12
22210: PUSH
22211: LD_INT 13
22213: PUSH
22214: LD_INT 14
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: IN
22223: IFFALSE 22235
// uc_nation := nation_arabian else
22225: LD_ADDR_OWVAR 21
22229: PUSH
22230: LD_INT 2
22232: ST_TO_ADDR
22233: GO 22243
// uc_nation := nation_russian ;
22235: LD_ADDR_OWVAR 21
22239: PUSH
22240: LD_INT 3
22242: ST_TO_ADDR
// vc_chassis := chassis ;
22243: LD_ADDR_OWVAR 37
22247: PUSH
22248: LD_VAR 0 1
22252: ST_TO_ADDR
// vc_engine := engine ;
22253: LD_ADDR_OWVAR 39
22257: PUSH
22258: LD_VAR 0 2
22262: ST_TO_ADDR
// vc_control := control ;
22263: LD_ADDR_OWVAR 38
22267: PUSH
22268: LD_VAR 0 3
22272: ST_TO_ADDR
// vc_weapon := weapon ;
22273: LD_ADDR_OWVAR 40
22277: PUSH
22278: LD_VAR 0 4
22282: ST_TO_ADDR
// un := CreateVehicle ;
22283: LD_ADDR_VAR 0 8
22287: PUSH
22288: CALL_OW 45
22292: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22293: LD_VAR 0 8
22297: PPUSH
22298: LD_INT 0
22300: PPUSH
22301: LD_INT 5
22303: PPUSH
22304: CALL_OW 12
22308: PPUSH
22309: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22313: LD_VAR 0 8
22317: PPUSH
22318: LD_VAR 0 5
22322: PPUSH
22323: LD_VAR 0 6
22327: PPUSH
22328: LD_INT 1
22330: PPUSH
22331: CALL_OW 48
// end ;
22335: LD_VAR 0 7
22339: RET
// export hInvincible ; every 1 do
22340: GO 22342
22342: DISABLE
// hInvincible := [ ] ;
22343: LD_ADDR_EXP 97
22347: PUSH
22348: EMPTY
22349: ST_TO_ADDR
22350: END
// every 10 do var i ;
22351: GO 22353
22353: DISABLE
22354: LD_INT 0
22356: PPUSH
// begin enable ;
22357: ENABLE
// if not hInvincible then
22358: LD_EXP 97
22362: NOT
22363: IFFALSE 22367
// exit ;
22365: GO 22411
// for i in hInvincible do
22367: LD_ADDR_VAR 0 1
22371: PUSH
22372: LD_EXP 97
22376: PUSH
22377: FOR_IN
22378: IFFALSE 22409
// if GetLives ( i ) < 1000 then
22380: LD_VAR 0 1
22384: PPUSH
22385: CALL_OW 256
22389: PUSH
22390: LD_INT 1000
22392: LESS
22393: IFFALSE 22407
// SetLives ( i , 1000 ) ;
22395: LD_VAR 0 1
22399: PPUSH
22400: LD_INT 1000
22402: PPUSH
22403: CALL_OW 234
22407: GO 22377
22409: POP
22410: POP
// end ;
22411: PPOPN 1
22413: END
// export function hHackInvincible ; var i ; begin
22414: LD_INT 0
22416: PPUSH
22417: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22418: LD_ADDR_VAR 0 2
22422: PUSH
22423: LD_INT 2
22425: PUSH
22426: LD_INT 21
22428: PUSH
22429: LD_INT 1
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: PUSH
22436: LD_INT 21
22438: PUSH
22439: LD_INT 2
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: LIST
22450: PPUSH
22451: CALL_OW 69
22455: PUSH
22456: FOR_IN
22457: IFFALSE 22518
// if IsSelected ( i ) then
22459: LD_VAR 0 2
22463: PPUSH
22464: CALL_OW 306
22468: IFFALSE 22516
// begin if i in hInvincible then
22470: LD_VAR 0 2
22474: PUSH
22475: LD_EXP 97
22479: IN
22480: IFFALSE 22500
// hInvincible := hInvincible diff i else
22482: LD_ADDR_EXP 97
22486: PUSH
22487: LD_EXP 97
22491: PUSH
22492: LD_VAR 0 2
22496: DIFF
22497: ST_TO_ADDR
22498: GO 22516
// hInvincible := hInvincible union i ;
22500: LD_ADDR_EXP 97
22504: PUSH
22505: LD_EXP 97
22509: PUSH
22510: LD_VAR 0 2
22514: UNION
22515: ST_TO_ADDR
// end ;
22516: GO 22456
22518: POP
22519: POP
// end ;
22520: LD_VAR 0 1
22524: RET
// export function hHackInvisible ; var i , j ; begin
22525: LD_INT 0
22527: PPUSH
22528: PPUSH
22529: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22530: LD_ADDR_VAR 0 2
22534: PUSH
22535: LD_INT 21
22537: PUSH
22538: LD_INT 1
22540: PUSH
22541: EMPTY
22542: LIST
22543: LIST
22544: PPUSH
22545: CALL_OW 69
22549: PUSH
22550: FOR_IN
22551: IFFALSE 22575
// if IsSelected ( i ) then
22553: LD_VAR 0 2
22557: PPUSH
22558: CALL_OW 306
22562: IFFALSE 22573
// ComForceInvisible ( i ) ;
22564: LD_VAR 0 2
22568: PPUSH
22569: CALL_OW 496
22573: GO 22550
22575: POP
22576: POP
// end ;
22577: LD_VAR 0 1
22581: RET
// export function hHackChangeYourSide ; begin
22582: LD_INT 0
22584: PPUSH
// if your_side = 8 then
22585: LD_OWVAR 2
22589: PUSH
22590: LD_INT 8
22592: EQUAL
22593: IFFALSE 22605
// your_side := 0 else
22595: LD_ADDR_OWVAR 2
22599: PUSH
22600: LD_INT 0
22602: ST_TO_ADDR
22603: GO 22619
// your_side := your_side + 1 ;
22605: LD_ADDR_OWVAR 2
22609: PUSH
22610: LD_OWVAR 2
22614: PUSH
22615: LD_INT 1
22617: PLUS
22618: ST_TO_ADDR
// end ;
22619: LD_VAR 0 1
22623: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22624: LD_INT 0
22626: PPUSH
22627: PPUSH
22628: PPUSH
// for i in all_units do
22629: LD_ADDR_VAR 0 2
22633: PUSH
22634: LD_OWVAR 3
22638: PUSH
22639: FOR_IN
22640: IFFALSE 22718
// if IsSelected ( i ) then
22642: LD_VAR 0 2
22646: PPUSH
22647: CALL_OW 306
22651: IFFALSE 22716
// begin j := GetSide ( i ) ;
22653: LD_ADDR_VAR 0 3
22657: PUSH
22658: LD_VAR 0 2
22662: PPUSH
22663: CALL_OW 255
22667: ST_TO_ADDR
// if j = 8 then
22668: LD_VAR 0 3
22672: PUSH
22673: LD_INT 8
22675: EQUAL
22676: IFFALSE 22688
// j := 0 else
22678: LD_ADDR_VAR 0 3
22682: PUSH
22683: LD_INT 0
22685: ST_TO_ADDR
22686: GO 22702
// j := j + 1 ;
22688: LD_ADDR_VAR 0 3
22692: PUSH
22693: LD_VAR 0 3
22697: PUSH
22698: LD_INT 1
22700: PLUS
22701: ST_TO_ADDR
// SetSide ( i , j ) ;
22702: LD_VAR 0 2
22706: PPUSH
22707: LD_VAR 0 3
22711: PPUSH
22712: CALL_OW 235
// end ;
22716: GO 22639
22718: POP
22719: POP
// end ;
22720: LD_VAR 0 1
22724: RET
// export function hHackFog ; begin
22725: LD_INT 0
22727: PPUSH
// FogOff ( true ) ;
22728: LD_INT 1
22730: PPUSH
22731: CALL_OW 344
// end ;
22735: LD_VAR 0 1
22739: RET
// export function hHackTeleport ( unit , x , y ) ; begin
22740: LD_INT 0
22742: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
22743: LD_VAR 0 1
22747: PPUSH
22748: LD_VAR 0 2
22752: PPUSH
22753: LD_VAR 0 3
22757: PPUSH
22758: LD_INT 1
22760: PPUSH
22761: LD_INT 1
22763: PPUSH
22764: CALL_OW 483
// CenterOnXY ( x , y ) ;
22768: LD_VAR 0 2
22772: PPUSH
22773: LD_VAR 0 3
22777: PPUSH
22778: CALL_OW 84
// end ; end_of_file
22782: LD_VAR 0 4
22786: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22787: LD_INT 0
22789: PPUSH
22790: PPUSH
22791: PPUSH
22792: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22793: LD_VAR 0 1
22797: PPUSH
22798: CALL_OW 264
22802: PUSH
22803: LD_EXP 29
22807: EQUAL
22808: IFFALSE 22880
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22810: LD_INT 68
22812: PPUSH
22813: LD_VAR 0 1
22817: PPUSH
22818: CALL_OW 255
22822: PPUSH
22823: CALL_OW 321
22827: PUSH
22828: LD_INT 2
22830: EQUAL
22831: IFFALSE 22843
// eff := 70 else
22833: LD_ADDR_VAR 0 4
22837: PUSH
22838: LD_INT 70
22840: ST_TO_ADDR
22841: GO 22851
// eff := 30 ;
22843: LD_ADDR_VAR 0 4
22847: PUSH
22848: LD_INT 30
22850: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22851: LD_VAR 0 1
22855: PPUSH
22856: CALL_OW 250
22860: PPUSH
22861: LD_VAR 0 1
22865: PPUSH
22866: CALL_OW 251
22870: PPUSH
22871: LD_VAR 0 4
22875: PPUSH
22876: CALL_OW 495
// end ; end ;
22880: LD_VAR 0 2
22884: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22885: LD_INT 0
22887: PPUSH
// end ;
22888: LD_VAR 0 4
22892: RET
// export function SOS_Command ( cmd ) ; begin
22893: LD_INT 0
22895: PPUSH
// end ;
22896: LD_VAR 0 2
22900: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
22901: LD_INT 0
22903: PPUSH
// if cmd = 121 then
22904: LD_VAR 0 1
22908: PUSH
22909: LD_INT 121
22911: EQUAL
22912: IFFALSE 22914
// end ;
22914: LD_VAR 0 6
22918: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22919: LD_INT 0
22921: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22922: LD_VAR 0 1
22926: PUSH
22927: LD_INT 250
22929: EQUAL
22930: PUSH
22931: LD_VAR 0 2
22935: PPUSH
22936: CALL_OW 264
22940: PUSH
22941: LD_EXP 32
22945: EQUAL
22946: AND
22947: IFFALSE 22968
// MinerPlaceMine ( unit , x , y ) ;
22949: LD_VAR 0 2
22953: PPUSH
22954: LD_VAR 0 4
22958: PPUSH
22959: LD_VAR 0 5
22963: PPUSH
22964: CALL 25317 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
22968: LD_VAR 0 1
22972: PUSH
22973: LD_INT 251
22975: EQUAL
22976: PUSH
22977: LD_VAR 0 2
22981: PPUSH
22982: CALL_OW 264
22986: PUSH
22987: LD_EXP 32
22991: EQUAL
22992: AND
22993: IFFALSE 23014
// MinerDetonateMine ( unit , x , y ) ;
22995: LD_VAR 0 2
22999: PPUSH
23000: LD_VAR 0 4
23004: PPUSH
23005: LD_VAR 0 5
23009: PPUSH
23010: CALL 25594 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23014: LD_VAR 0 1
23018: PUSH
23019: LD_INT 252
23021: EQUAL
23022: PUSH
23023: LD_VAR 0 2
23027: PPUSH
23028: CALL_OW 264
23032: PUSH
23033: LD_EXP 32
23037: EQUAL
23038: AND
23039: IFFALSE 23060
// MinerCreateMinefield ( unit , x , y ) ;
23041: LD_VAR 0 2
23045: PPUSH
23046: LD_VAR 0 4
23050: PPUSH
23051: LD_VAR 0 5
23055: PPUSH
23056: CALL 26011 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23060: LD_VAR 0 1
23064: PUSH
23065: LD_INT 253
23067: EQUAL
23068: PUSH
23069: LD_VAR 0 2
23073: PPUSH
23074: CALL_OW 257
23078: PUSH
23079: LD_INT 5
23081: EQUAL
23082: AND
23083: IFFALSE 23104
// ComBinocular ( unit , x , y ) ;
23085: LD_VAR 0 2
23089: PPUSH
23090: LD_VAR 0 4
23094: PPUSH
23095: LD_VAR 0 5
23099: PPUSH
23100: CALL 26382 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23104: LD_VAR 0 1
23108: PUSH
23109: LD_INT 254
23111: EQUAL
23112: PUSH
23113: LD_VAR 0 2
23117: PPUSH
23118: CALL_OW 264
23122: PUSH
23123: LD_EXP 27
23127: EQUAL
23128: AND
23129: PUSH
23130: LD_VAR 0 3
23134: PPUSH
23135: CALL_OW 263
23139: PUSH
23140: LD_INT 3
23142: EQUAL
23143: AND
23144: IFFALSE 23160
// HackDestroyVehicle ( unit , selectedUnit ) ;
23146: LD_VAR 0 2
23150: PPUSH
23151: LD_VAR 0 3
23155: PPUSH
23156: CALL 24677 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23160: LD_VAR 0 1
23164: PUSH
23165: LD_INT 255
23167: EQUAL
23168: PUSH
23169: LD_VAR 0 2
23173: PPUSH
23174: CALL_OW 264
23178: PUSH
23179: LD_INT 14
23181: PUSH
23182: LD_INT 53
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: IN
23189: AND
23190: PUSH
23191: LD_VAR 0 4
23195: PPUSH
23196: LD_VAR 0 5
23200: PPUSH
23201: CALL_OW 488
23205: AND
23206: IFFALSE 23230
// CutTreeXYR ( unit , x , y , 12 ) ;
23208: LD_VAR 0 2
23212: PPUSH
23213: LD_VAR 0 4
23217: PPUSH
23218: LD_VAR 0 5
23222: PPUSH
23223: LD_INT 12
23225: PPUSH
23226: CALL 23243 0 4
// end ;
23230: LD_VAR 0 6
23234: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
23235: LD_INT 0
23237: PPUSH
// end ;
23238: LD_VAR 0 4
23242: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23243: LD_INT 0
23245: PPUSH
23246: PPUSH
23247: PPUSH
23248: PPUSH
23249: PPUSH
23250: PPUSH
23251: PPUSH
23252: PPUSH
23253: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23254: LD_VAR 0 1
23258: NOT
23259: PUSH
23260: LD_VAR 0 2
23264: PPUSH
23265: LD_VAR 0 3
23269: PPUSH
23270: CALL_OW 488
23274: NOT
23275: OR
23276: PUSH
23277: LD_VAR 0 4
23281: NOT
23282: OR
23283: IFFALSE 23287
// exit ;
23285: GO 23627
// list := [ ] ;
23287: LD_ADDR_VAR 0 13
23291: PUSH
23292: EMPTY
23293: ST_TO_ADDR
// if x - r < 0 then
23294: LD_VAR 0 2
23298: PUSH
23299: LD_VAR 0 4
23303: MINUS
23304: PUSH
23305: LD_INT 0
23307: LESS
23308: IFFALSE 23320
// min_x := 0 else
23310: LD_ADDR_VAR 0 7
23314: PUSH
23315: LD_INT 0
23317: ST_TO_ADDR
23318: GO 23336
// min_x := x - r ;
23320: LD_ADDR_VAR 0 7
23324: PUSH
23325: LD_VAR 0 2
23329: PUSH
23330: LD_VAR 0 4
23334: MINUS
23335: ST_TO_ADDR
// if y - r < 0 then
23336: LD_VAR 0 3
23340: PUSH
23341: LD_VAR 0 4
23345: MINUS
23346: PUSH
23347: LD_INT 0
23349: LESS
23350: IFFALSE 23362
// min_y := 0 else
23352: LD_ADDR_VAR 0 8
23356: PUSH
23357: LD_INT 0
23359: ST_TO_ADDR
23360: GO 23378
// min_y := y - r ;
23362: LD_ADDR_VAR 0 8
23366: PUSH
23367: LD_VAR 0 3
23371: PUSH
23372: LD_VAR 0 4
23376: MINUS
23377: ST_TO_ADDR
// max_x := x + r ;
23378: LD_ADDR_VAR 0 9
23382: PUSH
23383: LD_VAR 0 2
23387: PUSH
23388: LD_VAR 0 4
23392: PLUS
23393: ST_TO_ADDR
// max_y := y + r ;
23394: LD_ADDR_VAR 0 10
23398: PUSH
23399: LD_VAR 0 3
23403: PUSH
23404: LD_VAR 0 4
23408: PLUS
23409: ST_TO_ADDR
// for _x = min_x to max_x do
23410: LD_ADDR_VAR 0 11
23414: PUSH
23415: DOUBLE
23416: LD_VAR 0 7
23420: DEC
23421: ST_TO_ADDR
23422: LD_VAR 0 9
23426: PUSH
23427: FOR_TO
23428: IFFALSE 23545
// for _y = min_y to max_y do
23430: LD_ADDR_VAR 0 12
23434: PUSH
23435: DOUBLE
23436: LD_VAR 0 8
23440: DEC
23441: ST_TO_ADDR
23442: LD_VAR 0 10
23446: PUSH
23447: FOR_TO
23448: IFFALSE 23541
// begin if not ValidHex ( _x , _y ) then
23450: LD_VAR 0 11
23454: PPUSH
23455: LD_VAR 0 12
23459: PPUSH
23460: CALL_OW 488
23464: NOT
23465: IFFALSE 23469
// continue ;
23467: GO 23447
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23469: LD_VAR 0 11
23473: PPUSH
23474: LD_VAR 0 12
23478: PPUSH
23479: CALL_OW 351
23483: PUSH
23484: LD_VAR 0 11
23488: PPUSH
23489: LD_VAR 0 12
23493: PPUSH
23494: CALL_OW 554
23498: AND
23499: IFFALSE 23539
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23501: LD_ADDR_VAR 0 13
23505: PUSH
23506: LD_VAR 0 13
23510: PPUSH
23511: LD_VAR 0 13
23515: PUSH
23516: LD_INT 1
23518: PLUS
23519: PPUSH
23520: LD_VAR 0 11
23524: PUSH
23525: LD_VAR 0 12
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: PPUSH
23534: CALL_OW 2
23538: ST_TO_ADDR
// end ;
23539: GO 23447
23541: POP
23542: POP
23543: GO 23427
23545: POP
23546: POP
// if not list then
23547: LD_VAR 0 13
23551: NOT
23552: IFFALSE 23556
// exit ;
23554: GO 23627
// for i in list do
23556: LD_ADDR_VAR 0 6
23560: PUSH
23561: LD_VAR 0 13
23565: PUSH
23566: FOR_IN
23567: IFFALSE 23625
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23569: LD_VAR 0 1
23573: PPUSH
23574: LD_STRING M
23576: PUSH
23577: LD_VAR 0 6
23581: PUSH
23582: LD_INT 1
23584: ARRAY
23585: PUSH
23586: LD_VAR 0 6
23590: PUSH
23591: LD_INT 2
23593: ARRAY
23594: PUSH
23595: LD_INT 0
23597: PUSH
23598: LD_INT 0
23600: PUSH
23601: LD_INT 0
23603: PUSH
23604: LD_INT 0
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: PUSH
23616: EMPTY
23617: LIST
23618: PPUSH
23619: CALL_OW 447
23623: GO 23566
23625: POP
23626: POP
// end ;
23627: LD_VAR 0 5
23631: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23632: LD_EXP 100
23636: NOT
23637: IFFALSE 23687
23639: GO 23641
23641: DISABLE
// begin initHack := true ;
23642: LD_ADDR_EXP 100
23646: PUSH
23647: LD_INT 1
23649: ST_TO_ADDR
// hackTanks := [ ] ;
23650: LD_ADDR_EXP 101
23654: PUSH
23655: EMPTY
23656: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23657: LD_ADDR_EXP 102
23661: PUSH
23662: EMPTY
23663: ST_TO_ADDR
// hackLimit := 3 ;
23664: LD_ADDR_EXP 103
23668: PUSH
23669: LD_INT 3
23671: ST_TO_ADDR
// hackDist := 12 ;
23672: LD_ADDR_EXP 104
23676: PUSH
23677: LD_INT 12
23679: ST_TO_ADDR
// hackCounter := [ ] ;
23680: LD_ADDR_EXP 105
23684: PUSH
23685: EMPTY
23686: ST_TO_ADDR
// end ;
23687: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23688: LD_EXP 100
23692: PUSH
23693: LD_INT 34
23695: PUSH
23696: LD_EXP 27
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PPUSH
23705: CALL_OW 69
23709: AND
23710: IFFALSE 23965
23712: GO 23714
23714: DISABLE
23715: LD_INT 0
23717: PPUSH
23718: PPUSH
// begin enable ;
23719: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23720: LD_ADDR_VAR 0 1
23724: PUSH
23725: LD_INT 34
23727: PUSH
23728: LD_EXP 27
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: PPUSH
23737: CALL_OW 69
23741: PUSH
23742: FOR_IN
23743: IFFALSE 23963
// begin if not i in hackTanks then
23745: LD_VAR 0 1
23749: PUSH
23750: LD_EXP 101
23754: IN
23755: NOT
23756: IFFALSE 23839
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23758: LD_ADDR_EXP 101
23762: PUSH
23763: LD_EXP 101
23767: PPUSH
23768: LD_EXP 101
23772: PUSH
23773: LD_INT 1
23775: PLUS
23776: PPUSH
23777: LD_VAR 0 1
23781: PPUSH
23782: CALL_OW 1
23786: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23787: LD_ADDR_EXP 102
23791: PUSH
23792: LD_EXP 102
23796: PPUSH
23797: LD_EXP 102
23801: PUSH
23802: LD_INT 1
23804: PLUS
23805: PPUSH
23806: EMPTY
23807: PPUSH
23808: CALL_OW 1
23812: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23813: LD_ADDR_EXP 105
23817: PUSH
23818: LD_EXP 105
23822: PPUSH
23823: LD_EXP 105
23827: PUSH
23828: LD_INT 1
23830: PLUS
23831: PPUSH
23832: EMPTY
23833: PPUSH
23834: CALL_OW 1
23838: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23839: LD_VAR 0 1
23843: PPUSH
23844: CALL_OW 302
23848: NOT
23849: IFFALSE 23862
// begin HackUnlinkAll ( i ) ;
23851: LD_VAR 0 1
23855: PPUSH
23856: CALL 23968 0 1
// continue ;
23860: GO 23742
// end ; HackCheckCapturedStatus ( i ) ;
23862: LD_VAR 0 1
23866: PPUSH
23867: CALL 24411 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23871: LD_ADDR_VAR 0 2
23875: PUSH
23876: LD_INT 81
23878: PUSH
23879: LD_VAR 0 1
23883: PPUSH
23884: CALL_OW 255
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: PUSH
23893: LD_INT 33
23895: PUSH
23896: LD_INT 3
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: PUSH
23903: LD_INT 91
23905: PUSH
23906: LD_VAR 0 1
23910: PUSH
23911: LD_EXP 104
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: LIST
23920: PUSH
23921: LD_INT 50
23923: PUSH
23924: EMPTY
23925: LIST
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: PPUSH
23933: CALL_OW 69
23937: ST_TO_ADDR
// if not tmp then
23938: LD_VAR 0 2
23942: NOT
23943: IFFALSE 23947
// continue ;
23945: GO 23742
// HackLink ( i , tmp ) ;
23947: LD_VAR 0 1
23951: PPUSH
23952: LD_VAR 0 2
23956: PPUSH
23957: CALL 24104 0 2
// end ;
23961: GO 23742
23963: POP
23964: POP
// end ;
23965: PPOPN 2
23967: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23968: LD_INT 0
23970: PPUSH
23971: PPUSH
23972: PPUSH
// if not hack in hackTanks then
23973: LD_VAR 0 1
23977: PUSH
23978: LD_EXP 101
23982: IN
23983: NOT
23984: IFFALSE 23988
// exit ;
23986: GO 24099
// index := GetElementIndex ( hackTanks , hack ) ;
23988: LD_ADDR_VAR 0 4
23992: PUSH
23993: LD_EXP 101
23997: PPUSH
23998: LD_VAR 0 1
24002: PPUSH
24003: CALL 31533 0 2
24007: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24008: LD_EXP 102
24012: PUSH
24013: LD_VAR 0 4
24017: ARRAY
24018: IFFALSE 24099
// begin for i in hackTanksCaptured [ index ] do
24020: LD_ADDR_VAR 0 3
24024: PUSH
24025: LD_EXP 102
24029: PUSH
24030: LD_VAR 0 4
24034: ARRAY
24035: PUSH
24036: FOR_IN
24037: IFFALSE 24063
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24039: LD_VAR 0 3
24043: PUSH
24044: LD_INT 1
24046: ARRAY
24047: PPUSH
24048: LD_VAR 0 3
24052: PUSH
24053: LD_INT 2
24055: ARRAY
24056: PPUSH
24057: CALL_OW 235
24061: GO 24036
24063: POP
24064: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24065: LD_ADDR_EXP 102
24069: PUSH
24070: LD_EXP 102
24074: PPUSH
24075: LD_VAR 0 4
24079: PPUSH
24080: EMPTY
24081: PPUSH
24082: CALL_OW 1
24086: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24087: LD_VAR 0 1
24091: PPUSH
24092: LD_INT 0
24094: PPUSH
24095: CALL_OW 505
// end ; end ;
24099: LD_VAR 0 2
24103: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24104: LD_INT 0
24106: PPUSH
24107: PPUSH
24108: PPUSH
// if not hack in hackTanks or not vehicles then
24109: LD_VAR 0 1
24113: PUSH
24114: LD_EXP 101
24118: IN
24119: NOT
24120: PUSH
24121: LD_VAR 0 2
24125: NOT
24126: OR
24127: IFFALSE 24131
// exit ;
24129: GO 24406
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24131: LD_ADDR_VAR 0 2
24135: PUSH
24136: LD_VAR 0 1
24140: PPUSH
24141: LD_VAR 0 2
24145: PPUSH
24146: LD_INT 1
24148: PPUSH
24149: LD_INT 1
24151: PPUSH
24152: CALL 32183 0 4
24156: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24157: LD_ADDR_VAR 0 5
24161: PUSH
24162: LD_EXP 101
24166: PPUSH
24167: LD_VAR 0 1
24171: PPUSH
24172: CALL 31533 0 2
24176: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24177: LD_EXP 102
24181: PUSH
24182: LD_VAR 0 5
24186: ARRAY
24187: PUSH
24188: LD_EXP 103
24192: LESS
24193: IFFALSE 24382
// begin for i := 1 to vehicles do
24195: LD_ADDR_VAR 0 4
24199: PUSH
24200: DOUBLE
24201: LD_INT 1
24203: DEC
24204: ST_TO_ADDR
24205: LD_VAR 0 2
24209: PUSH
24210: FOR_TO
24211: IFFALSE 24380
// begin if hackTanksCaptured [ index ] = hackLimit then
24213: LD_EXP 102
24217: PUSH
24218: LD_VAR 0 5
24222: ARRAY
24223: PUSH
24224: LD_EXP 103
24228: EQUAL
24229: IFFALSE 24233
// break ;
24231: GO 24380
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24233: LD_ADDR_EXP 105
24237: PUSH
24238: LD_EXP 105
24242: PPUSH
24243: LD_VAR 0 5
24247: PPUSH
24248: LD_EXP 105
24252: PUSH
24253: LD_VAR 0 5
24257: ARRAY
24258: PUSH
24259: LD_INT 1
24261: PLUS
24262: PPUSH
24263: CALL_OW 1
24267: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24268: LD_ADDR_EXP 102
24272: PUSH
24273: LD_EXP 102
24277: PPUSH
24278: LD_VAR 0 5
24282: PUSH
24283: LD_EXP 102
24287: PUSH
24288: LD_VAR 0 5
24292: ARRAY
24293: PUSH
24294: LD_INT 1
24296: PLUS
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PPUSH
24302: LD_VAR 0 2
24306: PUSH
24307: LD_VAR 0 4
24311: ARRAY
24312: PUSH
24313: LD_VAR 0 2
24317: PUSH
24318: LD_VAR 0 4
24322: ARRAY
24323: PPUSH
24324: CALL_OW 255
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: PPUSH
24333: CALL 31748 0 3
24337: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24338: LD_VAR 0 2
24342: PUSH
24343: LD_VAR 0 4
24347: ARRAY
24348: PPUSH
24349: LD_VAR 0 1
24353: PPUSH
24354: CALL_OW 255
24358: PPUSH
24359: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24363: LD_VAR 0 2
24367: PUSH
24368: LD_VAR 0 4
24372: ARRAY
24373: PPUSH
24374: CALL_OW 141
// end ;
24378: GO 24210
24380: POP
24381: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24382: LD_VAR 0 1
24386: PPUSH
24387: LD_EXP 102
24391: PUSH
24392: LD_VAR 0 5
24396: ARRAY
24397: PUSH
24398: LD_INT 0
24400: PLUS
24401: PPUSH
24402: CALL_OW 505
// end ;
24406: LD_VAR 0 3
24410: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24411: LD_INT 0
24413: PPUSH
24414: PPUSH
24415: PPUSH
24416: PPUSH
// if not hack in hackTanks then
24417: LD_VAR 0 1
24421: PUSH
24422: LD_EXP 101
24426: IN
24427: NOT
24428: IFFALSE 24432
// exit ;
24430: GO 24672
// index := GetElementIndex ( hackTanks , hack ) ;
24432: LD_ADDR_VAR 0 4
24436: PUSH
24437: LD_EXP 101
24441: PPUSH
24442: LD_VAR 0 1
24446: PPUSH
24447: CALL 31533 0 2
24451: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24452: LD_ADDR_VAR 0 3
24456: PUSH
24457: DOUBLE
24458: LD_EXP 102
24462: PUSH
24463: LD_VAR 0 4
24467: ARRAY
24468: INC
24469: ST_TO_ADDR
24470: LD_INT 1
24472: PUSH
24473: FOR_DOWNTO
24474: IFFALSE 24646
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24476: LD_ADDR_VAR 0 5
24480: PUSH
24481: LD_EXP 102
24485: PUSH
24486: LD_VAR 0 4
24490: ARRAY
24491: PUSH
24492: LD_VAR 0 3
24496: ARRAY
24497: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24498: LD_VAR 0 5
24502: PUSH
24503: LD_INT 1
24505: ARRAY
24506: PPUSH
24507: CALL_OW 302
24511: NOT
24512: PUSH
24513: LD_VAR 0 5
24517: PUSH
24518: LD_INT 1
24520: ARRAY
24521: PPUSH
24522: CALL_OW 255
24526: PUSH
24527: LD_VAR 0 1
24531: PPUSH
24532: CALL_OW 255
24536: NONEQUAL
24537: OR
24538: IFFALSE 24644
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24540: LD_VAR 0 5
24544: PUSH
24545: LD_INT 1
24547: ARRAY
24548: PPUSH
24549: CALL_OW 305
24553: PUSH
24554: LD_VAR 0 5
24558: PUSH
24559: LD_INT 1
24561: ARRAY
24562: PPUSH
24563: CALL_OW 255
24567: PUSH
24568: LD_VAR 0 1
24572: PPUSH
24573: CALL_OW 255
24577: EQUAL
24578: AND
24579: IFFALSE 24603
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24581: LD_VAR 0 5
24585: PUSH
24586: LD_INT 1
24588: ARRAY
24589: PPUSH
24590: LD_VAR 0 5
24594: PUSH
24595: LD_INT 2
24597: ARRAY
24598: PPUSH
24599: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24603: LD_ADDR_EXP 102
24607: PUSH
24608: LD_EXP 102
24612: PPUSH
24613: LD_VAR 0 4
24617: PPUSH
24618: LD_EXP 102
24622: PUSH
24623: LD_VAR 0 4
24627: ARRAY
24628: PPUSH
24629: LD_VAR 0 3
24633: PPUSH
24634: CALL_OW 3
24638: PPUSH
24639: CALL_OW 1
24643: ST_TO_ADDR
// end ; end ;
24644: GO 24473
24646: POP
24647: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24648: LD_VAR 0 1
24652: PPUSH
24653: LD_EXP 102
24657: PUSH
24658: LD_VAR 0 4
24662: ARRAY
24663: PUSH
24664: LD_INT 0
24666: PLUS
24667: PPUSH
24668: CALL_OW 505
// end ;
24672: LD_VAR 0 2
24676: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24677: LD_INT 0
24679: PPUSH
24680: PPUSH
24681: PPUSH
24682: PPUSH
// if not hack in hackTanks then
24683: LD_VAR 0 1
24687: PUSH
24688: LD_EXP 101
24692: IN
24693: NOT
24694: IFFALSE 24698
// exit ;
24696: GO 24783
// index := GetElementIndex ( hackTanks , hack ) ;
24698: LD_ADDR_VAR 0 5
24702: PUSH
24703: LD_EXP 101
24707: PPUSH
24708: LD_VAR 0 1
24712: PPUSH
24713: CALL 31533 0 2
24717: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24718: LD_ADDR_VAR 0 4
24722: PUSH
24723: DOUBLE
24724: LD_INT 1
24726: DEC
24727: ST_TO_ADDR
24728: LD_EXP 102
24732: PUSH
24733: LD_VAR 0 5
24737: ARRAY
24738: PUSH
24739: FOR_TO
24740: IFFALSE 24781
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24742: LD_EXP 102
24746: PUSH
24747: LD_VAR 0 5
24751: ARRAY
24752: PUSH
24753: LD_VAR 0 4
24757: ARRAY
24758: PUSH
24759: LD_INT 1
24761: ARRAY
24762: PUSH
24763: LD_VAR 0 2
24767: EQUAL
24768: IFFALSE 24779
// KillUnit ( vehicle ) ;
24770: LD_VAR 0 2
24774: PPUSH
24775: CALL_OW 66
24779: GO 24739
24781: POP
24782: POP
// end ;
24783: LD_VAR 0 3
24787: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
24788: LD_EXP 106
24792: NOT
24793: IFFALSE 24828
24795: GO 24797
24797: DISABLE
// begin initMiner := true ;
24798: LD_ADDR_EXP 106
24802: PUSH
24803: LD_INT 1
24805: ST_TO_ADDR
// minersList := [ ] ;
24806: LD_ADDR_EXP 107
24810: PUSH
24811: EMPTY
24812: ST_TO_ADDR
// minerMinesList := [ ] ;
24813: LD_ADDR_EXP 108
24817: PUSH
24818: EMPTY
24819: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
24820: LD_ADDR_EXP 109
24824: PUSH
24825: LD_INT 5
24827: ST_TO_ADDR
// end ;
24828: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
24829: LD_EXP 106
24833: PUSH
24834: LD_INT 34
24836: PUSH
24837: LD_EXP 32
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: PPUSH
24846: CALL_OW 69
24850: AND
24851: IFFALSE 25314
24853: GO 24855
24855: DISABLE
24856: LD_INT 0
24858: PPUSH
24859: PPUSH
24860: PPUSH
24861: PPUSH
// begin enable ;
24862: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24863: LD_ADDR_VAR 0 1
24867: PUSH
24868: LD_INT 34
24870: PUSH
24871: LD_EXP 32
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PPUSH
24880: CALL_OW 69
24884: PUSH
24885: FOR_IN
24886: IFFALSE 24958
// begin if not i in minersList then
24888: LD_VAR 0 1
24892: PUSH
24893: LD_EXP 107
24897: IN
24898: NOT
24899: IFFALSE 24956
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24901: LD_ADDR_EXP 107
24905: PUSH
24906: LD_EXP 107
24910: PPUSH
24911: LD_EXP 107
24915: PUSH
24916: LD_INT 1
24918: PLUS
24919: PPUSH
24920: LD_VAR 0 1
24924: PPUSH
24925: CALL_OW 1
24929: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24930: LD_ADDR_EXP 108
24934: PUSH
24935: LD_EXP 108
24939: PPUSH
24940: LD_EXP 108
24944: PUSH
24945: LD_INT 1
24947: PLUS
24948: PPUSH
24949: EMPTY
24950: PPUSH
24951: CALL_OW 1
24955: ST_TO_ADDR
// end end ;
24956: GO 24885
24958: POP
24959: POP
// for i := minerMinesList downto 1 do
24960: LD_ADDR_VAR 0 1
24964: PUSH
24965: DOUBLE
24966: LD_EXP 108
24970: INC
24971: ST_TO_ADDR
24972: LD_INT 1
24974: PUSH
24975: FOR_DOWNTO
24976: IFFALSE 25312
// begin if IsLive ( minersList [ i ] ) then
24978: LD_EXP 107
24982: PUSH
24983: LD_VAR 0 1
24987: ARRAY
24988: PPUSH
24989: CALL_OW 300
24993: IFFALSE 25021
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
24995: LD_EXP 107
24999: PUSH
25000: LD_VAR 0 1
25004: ARRAY
25005: PPUSH
25006: LD_EXP 108
25010: PUSH
25011: LD_VAR 0 1
25015: ARRAY
25016: PPUSH
25017: CALL_OW 505
// if not minerMinesList [ i ] then
25021: LD_EXP 108
25025: PUSH
25026: LD_VAR 0 1
25030: ARRAY
25031: NOT
25032: IFFALSE 25036
// continue ;
25034: GO 24975
// for j := minerMinesList [ i ] downto 1 do
25036: LD_ADDR_VAR 0 2
25040: PUSH
25041: DOUBLE
25042: LD_EXP 108
25046: PUSH
25047: LD_VAR 0 1
25051: ARRAY
25052: INC
25053: ST_TO_ADDR
25054: LD_INT 1
25056: PUSH
25057: FOR_DOWNTO
25058: IFFALSE 25308
// begin side := GetSide ( minersList [ i ] ) ;
25060: LD_ADDR_VAR 0 3
25064: PUSH
25065: LD_EXP 107
25069: PUSH
25070: LD_VAR 0 1
25074: ARRAY
25075: PPUSH
25076: CALL_OW 255
25080: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25081: LD_ADDR_VAR 0 4
25085: PUSH
25086: LD_EXP 108
25090: PUSH
25091: LD_VAR 0 1
25095: ARRAY
25096: PUSH
25097: LD_VAR 0 2
25101: ARRAY
25102: PUSH
25103: LD_INT 1
25105: ARRAY
25106: PPUSH
25107: LD_EXP 108
25111: PUSH
25112: LD_VAR 0 1
25116: ARRAY
25117: PUSH
25118: LD_VAR 0 2
25122: ARRAY
25123: PUSH
25124: LD_INT 2
25126: ARRAY
25127: PPUSH
25128: CALL_OW 428
25132: ST_TO_ADDR
// if not tmp then
25133: LD_VAR 0 4
25137: NOT
25138: IFFALSE 25142
// continue ;
25140: GO 25057
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25142: LD_VAR 0 4
25146: PUSH
25147: LD_INT 81
25149: PUSH
25150: LD_VAR 0 3
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: PPUSH
25159: CALL_OW 69
25163: IN
25164: PUSH
25165: LD_EXP 108
25169: PUSH
25170: LD_VAR 0 1
25174: ARRAY
25175: PUSH
25176: LD_VAR 0 2
25180: ARRAY
25181: PUSH
25182: LD_INT 1
25184: ARRAY
25185: PPUSH
25186: LD_EXP 108
25190: PUSH
25191: LD_VAR 0 1
25195: ARRAY
25196: PUSH
25197: LD_VAR 0 2
25201: ARRAY
25202: PUSH
25203: LD_INT 2
25205: ARRAY
25206: PPUSH
25207: CALL_OW 458
25211: AND
25212: IFFALSE 25306
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25214: LD_EXP 108
25218: PUSH
25219: LD_VAR 0 1
25223: ARRAY
25224: PUSH
25225: LD_VAR 0 2
25229: ARRAY
25230: PUSH
25231: LD_INT 1
25233: ARRAY
25234: PPUSH
25235: LD_EXP 108
25239: PUSH
25240: LD_VAR 0 1
25244: ARRAY
25245: PUSH
25246: LD_VAR 0 2
25250: ARRAY
25251: PUSH
25252: LD_INT 2
25254: ARRAY
25255: PPUSH
25256: LD_VAR 0 3
25260: PPUSH
25261: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25265: LD_ADDR_EXP 108
25269: PUSH
25270: LD_EXP 108
25274: PPUSH
25275: LD_VAR 0 1
25279: PPUSH
25280: LD_EXP 108
25284: PUSH
25285: LD_VAR 0 1
25289: ARRAY
25290: PPUSH
25291: LD_VAR 0 2
25295: PPUSH
25296: CALL_OW 3
25300: PPUSH
25301: CALL_OW 1
25305: ST_TO_ADDR
// end ; end ;
25306: GO 25057
25308: POP
25309: POP
// end ;
25310: GO 24975
25312: POP
25313: POP
// end ;
25314: PPOPN 4
25316: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25317: LD_INT 0
25319: PPUSH
25320: PPUSH
// result := false ;
25321: LD_ADDR_VAR 0 4
25325: PUSH
25326: LD_INT 0
25328: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25329: LD_VAR 0 1
25333: PPUSH
25334: CALL_OW 264
25338: PUSH
25339: LD_EXP 32
25343: EQUAL
25344: NOT
25345: IFFALSE 25349
// exit ;
25347: GO 25589
// index := GetElementIndex ( minersList , unit ) ;
25349: LD_ADDR_VAR 0 5
25353: PUSH
25354: LD_EXP 107
25358: PPUSH
25359: LD_VAR 0 1
25363: PPUSH
25364: CALL 31533 0 2
25368: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25369: LD_EXP 108
25373: PUSH
25374: LD_VAR 0 5
25378: ARRAY
25379: PUSH
25380: LD_EXP 109
25384: GREATEREQUAL
25385: IFFALSE 25389
// exit ;
25387: GO 25589
// ComMoveXY ( unit , x , y ) ;
25389: LD_VAR 0 1
25393: PPUSH
25394: LD_VAR 0 2
25398: PPUSH
25399: LD_VAR 0 3
25403: PPUSH
25404: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25408: LD_INT 35
25410: PPUSH
25411: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25415: LD_VAR 0 1
25419: PPUSH
25420: LD_VAR 0 2
25424: PPUSH
25425: LD_VAR 0 3
25429: PPUSH
25430: CALL 61930 0 3
25434: NOT
25435: PUSH
25436: LD_VAR 0 1
25440: PPUSH
25441: CALL_OW 314
25445: AND
25446: IFFALSE 25450
// exit ;
25448: GO 25589
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25450: LD_VAR 0 2
25454: PPUSH
25455: LD_VAR 0 3
25459: PPUSH
25460: CALL_OW 428
25464: PUSH
25465: LD_VAR 0 1
25469: EQUAL
25470: PUSH
25471: LD_VAR 0 1
25475: PPUSH
25476: CALL_OW 314
25480: NOT
25481: AND
25482: IFFALSE 25408
// PlaySoundXY ( x , y , PlantMine ) ;
25484: LD_VAR 0 2
25488: PPUSH
25489: LD_VAR 0 3
25493: PPUSH
25494: LD_STRING PlantMine
25496: PPUSH
25497: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25501: LD_VAR 0 2
25505: PPUSH
25506: LD_VAR 0 3
25510: PPUSH
25511: LD_VAR 0 1
25515: PPUSH
25516: CALL_OW 255
25520: PPUSH
25521: LD_INT 0
25523: PPUSH
25524: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25528: LD_ADDR_EXP 108
25532: PUSH
25533: LD_EXP 108
25537: PPUSH
25538: LD_VAR 0 5
25542: PUSH
25543: LD_EXP 108
25547: PUSH
25548: LD_VAR 0 5
25552: ARRAY
25553: PUSH
25554: LD_INT 1
25556: PLUS
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: PPUSH
25562: LD_VAR 0 2
25566: PUSH
25567: LD_VAR 0 3
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PPUSH
25576: CALL 31748 0 3
25580: ST_TO_ADDR
// result := true ;
25581: LD_ADDR_VAR 0 4
25585: PUSH
25586: LD_INT 1
25588: ST_TO_ADDR
// end ;
25589: LD_VAR 0 4
25593: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25594: LD_INT 0
25596: PPUSH
25597: PPUSH
25598: PPUSH
// if not unit in minersList then
25599: LD_VAR 0 1
25603: PUSH
25604: LD_EXP 107
25608: IN
25609: NOT
25610: IFFALSE 25614
// exit ;
25612: GO 26006
// index := GetElementIndex ( minersList , unit ) ;
25614: LD_ADDR_VAR 0 6
25618: PUSH
25619: LD_EXP 107
25623: PPUSH
25624: LD_VAR 0 1
25628: PPUSH
25629: CALL 31533 0 2
25633: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25634: LD_ADDR_VAR 0 5
25638: PUSH
25639: DOUBLE
25640: LD_EXP 108
25644: PUSH
25645: LD_VAR 0 6
25649: ARRAY
25650: INC
25651: ST_TO_ADDR
25652: LD_INT 1
25654: PUSH
25655: FOR_DOWNTO
25656: IFFALSE 25817
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25658: LD_EXP 108
25662: PUSH
25663: LD_VAR 0 6
25667: ARRAY
25668: PUSH
25669: LD_VAR 0 5
25673: ARRAY
25674: PUSH
25675: LD_INT 1
25677: ARRAY
25678: PUSH
25679: LD_VAR 0 2
25683: EQUAL
25684: PUSH
25685: LD_EXP 108
25689: PUSH
25690: LD_VAR 0 6
25694: ARRAY
25695: PUSH
25696: LD_VAR 0 5
25700: ARRAY
25701: PUSH
25702: LD_INT 2
25704: ARRAY
25705: PUSH
25706: LD_VAR 0 3
25710: EQUAL
25711: AND
25712: IFFALSE 25815
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25714: LD_EXP 108
25718: PUSH
25719: LD_VAR 0 6
25723: ARRAY
25724: PUSH
25725: LD_VAR 0 5
25729: ARRAY
25730: PUSH
25731: LD_INT 1
25733: ARRAY
25734: PPUSH
25735: LD_EXP 108
25739: PUSH
25740: LD_VAR 0 6
25744: ARRAY
25745: PUSH
25746: LD_VAR 0 5
25750: ARRAY
25751: PUSH
25752: LD_INT 2
25754: ARRAY
25755: PPUSH
25756: LD_VAR 0 1
25760: PPUSH
25761: CALL_OW 255
25765: PPUSH
25766: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25770: LD_ADDR_EXP 108
25774: PUSH
25775: LD_EXP 108
25779: PPUSH
25780: LD_VAR 0 6
25784: PPUSH
25785: LD_EXP 108
25789: PUSH
25790: LD_VAR 0 6
25794: ARRAY
25795: PPUSH
25796: LD_VAR 0 5
25800: PPUSH
25801: CALL_OW 3
25805: PPUSH
25806: CALL_OW 1
25810: ST_TO_ADDR
// exit ;
25811: POP
25812: POP
25813: GO 26006
// end ; end ;
25815: GO 25655
25817: POP
25818: POP
// for i := minerMinesList [ index ] downto 1 do
25819: LD_ADDR_VAR 0 5
25823: PUSH
25824: DOUBLE
25825: LD_EXP 108
25829: PUSH
25830: LD_VAR 0 6
25834: ARRAY
25835: INC
25836: ST_TO_ADDR
25837: LD_INT 1
25839: PUSH
25840: FOR_DOWNTO
25841: IFFALSE 26004
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25843: LD_EXP 108
25847: PUSH
25848: LD_VAR 0 6
25852: ARRAY
25853: PUSH
25854: LD_VAR 0 5
25858: ARRAY
25859: PUSH
25860: LD_INT 1
25862: ARRAY
25863: PPUSH
25864: LD_EXP 108
25868: PUSH
25869: LD_VAR 0 6
25873: ARRAY
25874: PUSH
25875: LD_VAR 0 5
25879: ARRAY
25880: PUSH
25881: LD_INT 2
25883: ARRAY
25884: PPUSH
25885: LD_VAR 0 2
25889: PPUSH
25890: LD_VAR 0 3
25894: PPUSH
25895: CALL_OW 298
25899: PUSH
25900: LD_INT 6
25902: LESS
25903: IFFALSE 26002
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25905: LD_EXP 108
25909: PUSH
25910: LD_VAR 0 6
25914: ARRAY
25915: PUSH
25916: LD_VAR 0 5
25920: ARRAY
25921: PUSH
25922: LD_INT 1
25924: ARRAY
25925: PPUSH
25926: LD_EXP 108
25930: PUSH
25931: LD_VAR 0 6
25935: ARRAY
25936: PUSH
25937: LD_VAR 0 5
25941: ARRAY
25942: PUSH
25943: LD_INT 2
25945: ARRAY
25946: PPUSH
25947: LD_VAR 0 1
25951: PPUSH
25952: CALL_OW 255
25956: PPUSH
25957: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25961: LD_ADDR_EXP 108
25965: PUSH
25966: LD_EXP 108
25970: PPUSH
25971: LD_VAR 0 6
25975: PPUSH
25976: LD_EXP 108
25980: PUSH
25981: LD_VAR 0 6
25985: ARRAY
25986: PPUSH
25987: LD_VAR 0 5
25991: PPUSH
25992: CALL_OW 3
25996: PPUSH
25997: CALL_OW 1
26001: ST_TO_ADDR
// end ; end ;
26002: GO 25840
26004: POP
26005: POP
// end ;
26006: LD_VAR 0 4
26010: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26011: LD_INT 0
26013: PPUSH
26014: PPUSH
26015: PPUSH
26016: PPUSH
26017: PPUSH
26018: PPUSH
26019: PPUSH
26020: PPUSH
26021: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26022: LD_VAR 0 1
26026: PPUSH
26027: CALL_OW 264
26031: PUSH
26032: LD_EXP 32
26036: EQUAL
26037: NOT
26038: PUSH
26039: LD_VAR 0 1
26043: PUSH
26044: LD_EXP 107
26048: IN
26049: NOT
26050: OR
26051: IFFALSE 26055
// exit ;
26053: GO 26377
// index := GetElementIndex ( minersList , unit ) ;
26055: LD_ADDR_VAR 0 6
26059: PUSH
26060: LD_EXP 107
26064: PPUSH
26065: LD_VAR 0 1
26069: PPUSH
26070: CALL 31533 0 2
26074: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26075: LD_ADDR_VAR 0 8
26079: PUSH
26080: LD_EXP 109
26084: PUSH
26085: LD_EXP 108
26089: PUSH
26090: LD_VAR 0 6
26094: ARRAY
26095: MINUS
26096: ST_TO_ADDR
// if not minesFreeAmount then
26097: LD_VAR 0 8
26101: NOT
26102: IFFALSE 26106
// exit ;
26104: GO 26377
// tmp := [ ] ;
26106: LD_ADDR_VAR 0 7
26110: PUSH
26111: EMPTY
26112: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26113: LD_ADDR_VAR 0 5
26117: PUSH
26118: DOUBLE
26119: LD_INT 1
26121: DEC
26122: ST_TO_ADDR
26123: LD_VAR 0 8
26127: PUSH
26128: FOR_TO
26129: IFFALSE 26324
// begin _d := rand ( 0 , 5 ) ;
26131: LD_ADDR_VAR 0 11
26135: PUSH
26136: LD_INT 0
26138: PPUSH
26139: LD_INT 5
26141: PPUSH
26142: CALL_OW 12
26146: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26147: LD_ADDR_VAR 0 12
26151: PUSH
26152: LD_INT 2
26154: PPUSH
26155: LD_INT 6
26157: PPUSH
26158: CALL_OW 12
26162: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26163: LD_ADDR_VAR 0 9
26167: PUSH
26168: LD_VAR 0 2
26172: PPUSH
26173: LD_VAR 0 11
26177: PPUSH
26178: LD_VAR 0 12
26182: PPUSH
26183: CALL_OW 272
26187: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26188: LD_ADDR_VAR 0 10
26192: PUSH
26193: LD_VAR 0 3
26197: PPUSH
26198: LD_VAR 0 11
26202: PPUSH
26203: LD_VAR 0 12
26207: PPUSH
26208: CALL_OW 273
26212: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26213: LD_VAR 0 9
26217: PPUSH
26218: LD_VAR 0 10
26222: PPUSH
26223: CALL_OW 488
26227: PUSH
26228: LD_VAR 0 9
26232: PUSH
26233: LD_VAR 0 10
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PUSH
26242: LD_VAR 0 7
26246: IN
26247: NOT
26248: AND
26249: PUSH
26250: LD_VAR 0 9
26254: PPUSH
26255: LD_VAR 0 10
26259: PPUSH
26260: CALL_OW 458
26264: NOT
26265: AND
26266: IFFALSE 26308
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26268: LD_ADDR_VAR 0 7
26272: PUSH
26273: LD_VAR 0 7
26277: PPUSH
26278: LD_VAR 0 7
26282: PUSH
26283: LD_INT 1
26285: PLUS
26286: PPUSH
26287: LD_VAR 0 9
26291: PUSH
26292: LD_VAR 0 10
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PPUSH
26301: CALL_OW 1
26305: ST_TO_ADDR
26306: GO 26322
// i := i - 1 ;
26308: LD_ADDR_VAR 0 5
26312: PUSH
26313: LD_VAR 0 5
26317: PUSH
26318: LD_INT 1
26320: MINUS
26321: ST_TO_ADDR
// end ;
26322: GO 26128
26324: POP
26325: POP
// for i in tmp do
26326: LD_ADDR_VAR 0 5
26330: PUSH
26331: LD_VAR 0 7
26335: PUSH
26336: FOR_IN
26337: IFFALSE 26375
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26339: LD_VAR 0 1
26343: PPUSH
26344: LD_VAR 0 5
26348: PUSH
26349: LD_INT 1
26351: ARRAY
26352: PPUSH
26353: LD_VAR 0 5
26357: PUSH
26358: LD_INT 2
26360: ARRAY
26361: PPUSH
26362: CALL 25317 0 3
26366: NOT
26367: IFFALSE 26373
// exit ;
26369: POP
26370: POP
26371: GO 26377
26373: GO 26336
26375: POP
26376: POP
// end ;
26377: LD_VAR 0 4
26381: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26382: LD_INT 0
26384: PPUSH
26385: PPUSH
26386: PPUSH
26387: PPUSH
26388: PPUSH
26389: PPUSH
26390: PPUSH
// if not GetClass ( unit ) = class_sniper then
26391: LD_VAR 0 1
26395: PPUSH
26396: CALL_OW 257
26400: PUSH
26401: LD_INT 5
26403: EQUAL
26404: NOT
26405: IFFALSE 26409
// exit ;
26407: GO 26797
// dist := 8 ;
26409: LD_ADDR_VAR 0 5
26413: PUSH
26414: LD_INT 8
26416: ST_TO_ADDR
// viewRange := 12 ;
26417: LD_ADDR_VAR 0 7
26421: PUSH
26422: LD_INT 12
26424: ST_TO_ADDR
// side := GetSide ( unit ) ;
26425: LD_ADDR_VAR 0 6
26429: PUSH
26430: LD_VAR 0 1
26434: PPUSH
26435: CALL_OW 255
26439: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26440: LD_INT 61
26442: PPUSH
26443: LD_VAR 0 6
26447: PPUSH
26448: CALL_OW 321
26452: PUSH
26453: LD_INT 2
26455: EQUAL
26456: IFFALSE 26466
// viewRange := 16 ;
26458: LD_ADDR_VAR 0 7
26462: PUSH
26463: LD_INT 16
26465: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26466: LD_VAR 0 1
26470: PPUSH
26471: LD_VAR 0 2
26475: PPUSH
26476: LD_VAR 0 3
26480: PPUSH
26481: CALL_OW 297
26485: PUSH
26486: LD_VAR 0 5
26490: GREATER
26491: IFFALSE 26570
// begin ComMoveXY ( unit , x , y ) ;
26493: LD_VAR 0 1
26497: PPUSH
26498: LD_VAR 0 2
26502: PPUSH
26503: LD_VAR 0 3
26507: PPUSH
26508: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26512: LD_INT 35
26514: PPUSH
26515: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26519: LD_VAR 0 1
26523: PPUSH
26524: LD_VAR 0 2
26528: PPUSH
26529: LD_VAR 0 3
26533: PPUSH
26534: CALL 61930 0 3
26538: NOT
26539: IFFALSE 26543
// exit ;
26541: GO 26797
// until GetDistUnitXY ( unit , x , y ) < dist ;
26543: LD_VAR 0 1
26547: PPUSH
26548: LD_VAR 0 2
26552: PPUSH
26553: LD_VAR 0 3
26557: PPUSH
26558: CALL_OW 297
26562: PUSH
26563: LD_VAR 0 5
26567: LESS
26568: IFFALSE 26512
// end ; ComTurnXY ( unit , x , y ) ;
26570: LD_VAR 0 1
26574: PPUSH
26575: LD_VAR 0 2
26579: PPUSH
26580: LD_VAR 0 3
26584: PPUSH
26585: CALL_OW 118
// wait ( 5 ) ;
26589: LD_INT 5
26591: PPUSH
26592: CALL_OW 67
// _d := GetDir ( unit ) ;
26596: LD_ADDR_VAR 0 10
26600: PUSH
26601: LD_VAR 0 1
26605: PPUSH
26606: CALL_OW 254
26610: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26611: LD_ADDR_VAR 0 8
26615: PUSH
26616: LD_VAR 0 1
26620: PPUSH
26621: CALL_OW 250
26625: PPUSH
26626: LD_VAR 0 10
26630: PPUSH
26631: LD_VAR 0 5
26635: PPUSH
26636: CALL_OW 272
26640: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26641: LD_ADDR_VAR 0 9
26645: PUSH
26646: LD_VAR 0 1
26650: PPUSH
26651: CALL_OW 251
26655: PPUSH
26656: LD_VAR 0 10
26660: PPUSH
26661: LD_VAR 0 5
26665: PPUSH
26666: CALL_OW 273
26670: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26671: LD_VAR 0 8
26675: PPUSH
26676: LD_VAR 0 9
26680: PPUSH
26681: CALL_OW 488
26685: NOT
26686: IFFALSE 26690
// exit ;
26688: GO 26797
// ComAnimCustom ( unit , 1 ) ;
26690: LD_VAR 0 1
26694: PPUSH
26695: LD_INT 1
26697: PPUSH
26698: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26702: LD_VAR 0 8
26706: PPUSH
26707: LD_VAR 0 9
26711: PPUSH
26712: LD_VAR 0 6
26716: PPUSH
26717: LD_VAR 0 7
26721: PPUSH
26722: CALL_OW 330
// repeat wait ( 1 ) ;
26726: LD_INT 1
26728: PPUSH
26729: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
26733: LD_VAR 0 1
26737: PPUSH
26738: CALL_OW 316
26742: PUSH
26743: LD_VAR 0 1
26747: PPUSH
26748: CALL_OW 314
26752: OR
26753: PUSH
26754: LD_VAR 0 1
26758: PPUSH
26759: CALL_OW 302
26763: NOT
26764: OR
26765: PUSH
26766: LD_VAR 0 1
26770: PPUSH
26771: CALL_OW 301
26775: OR
26776: IFFALSE 26726
// RemoveSeeing ( _x , _y , side ) ;
26778: LD_VAR 0 8
26782: PPUSH
26783: LD_VAR 0 9
26787: PPUSH
26788: LD_VAR 0 6
26792: PPUSH
26793: CALL_OW 331
// end ; end_of_file
26797: LD_VAR 0 4
26801: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26802: LD_INT 0
26804: PPUSH
26805: PPUSH
// if exist_mode then
26806: LD_VAR 0 2
26810: IFFALSE 26835
// unit := CreateCharacter ( prefix & ident ) else
26812: LD_ADDR_VAR 0 5
26816: PUSH
26817: LD_VAR 0 3
26821: PUSH
26822: LD_VAR 0 1
26826: STR
26827: PPUSH
26828: CALL_OW 34
26832: ST_TO_ADDR
26833: GO 26850
// unit := NewCharacter ( ident ) ;
26835: LD_ADDR_VAR 0 5
26839: PUSH
26840: LD_VAR 0 1
26844: PPUSH
26845: CALL_OW 25
26849: ST_TO_ADDR
// result := unit ;
26850: LD_ADDR_VAR 0 4
26854: PUSH
26855: LD_VAR 0 5
26859: ST_TO_ADDR
// end ;
26860: LD_VAR 0 4
26864: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26865: LD_INT 0
26867: PPUSH
26868: PPUSH
// if not side or not nation then
26869: LD_VAR 0 1
26873: NOT
26874: PUSH
26875: LD_VAR 0 2
26879: NOT
26880: OR
26881: IFFALSE 26885
// exit ;
26883: GO 27649
// case nation of nation_american :
26885: LD_VAR 0 2
26889: PUSH
26890: LD_INT 1
26892: DOUBLE
26893: EQUAL
26894: IFTRUE 26898
26896: GO 27112
26898: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26899: LD_ADDR_VAR 0 4
26903: PUSH
26904: LD_INT 35
26906: PUSH
26907: LD_INT 45
26909: PUSH
26910: LD_INT 46
26912: PUSH
26913: LD_INT 47
26915: PUSH
26916: LD_INT 82
26918: PUSH
26919: LD_INT 83
26921: PUSH
26922: LD_INT 84
26924: PUSH
26925: LD_INT 85
26927: PUSH
26928: LD_INT 86
26930: PUSH
26931: LD_INT 1
26933: PUSH
26934: LD_INT 2
26936: PUSH
26937: LD_INT 6
26939: PUSH
26940: LD_INT 15
26942: PUSH
26943: LD_INT 16
26945: PUSH
26946: LD_INT 7
26948: PUSH
26949: LD_INT 12
26951: PUSH
26952: LD_INT 13
26954: PUSH
26955: LD_INT 10
26957: PUSH
26958: LD_INT 14
26960: PUSH
26961: LD_INT 20
26963: PUSH
26964: LD_INT 21
26966: PUSH
26967: LD_INT 22
26969: PUSH
26970: LD_INT 25
26972: PUSH
26973: LD_INT 32
26975: PUSH
26976: LD_INT 27
26978: PUSH
26979: LD_INT 36
26981: PUSH
26982: LD_INT 69
26984: PUSH
26985: LD_INT 39
26987: PUSH
26988: LD_INT 34
26990: PUSH
26991: LD_INT 40
26993: PUSH
26994: LD_INT 48
26996: PUSH
26997: LD_INT 49
26999: PUSH
27000: LD_INT 50
27002: PUSH
27003: LD_INT 51
27005: PUSH
27006: LD_INT 52
27008: PUSH
27009: LD_INT 53
27011: PUSH
27012: LD_INT 54
27014: PUSH
27015: LD_INT 55
27017: PUSH
27018: LD_INT 56
27020: PUSH
27021: LD_INT 57
27023: PUSH
27024: LD_INT 58
27026: PUSH
27027: LD_INT 59
27029: PUSH
27030: LD_INT 60
27032: PUSH
27033: LD_INT 61
27035: PUSH
27036: LD_INT 62
27038: PUSH
27039: LD_INT 80
27041: PUSH
27042: LD_INT 82
27044: PUSH
27045: LD_INT 83
27047: PUSH
27048: LD_INT 84
27050: PUSH
27051: LD_INT 85
27053: PUSH
27054: LD_INT 86
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: LIST
27079: LIST
27080: LIST
27081: LIST
27082: LIST
27083: LIST
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: LIST
27090: LIST
27091: LIST
27092: LIST
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: ST_TO_ADDR
27110: GO 27573
27112: LD_INT 2
27114: DOUBLE
27115: EQUAL
27116: IFTRUE 27120
27118: GO 27342
27120: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
27121: LD_ADDR_VAR 0 4
27125: PUSH
27126: LD_INT 35
27128: PUSH
27129: LD_INT 45
27131: PUSH
27132: LD_INT 46
27134: PUSH
27135: LD_INT 47
27137: PUSH
27138: LD_INT 82
27140: PUSH
27141: LD_INT 83
27143: PUSH
27144: LD_INT 84
27146: PUSH
27147: LD_INT 85
27149: PUSH
27150: LD_INT 87
27152: PUSH
27153: LD_INT 70
27155: PUSH
27156: LD_INT 1
27158: PUSH
27159: LD_INT 11
27161: PUSH
27162: LD_INT 3
27164: PUSH
27165: LD_INT 4
27167: PUSH
27168: LD_INT 5
27170: PUSH
27171: LD_INT 6
27173: PUSH
27174: LD_INT 15
27176: PUSH
27177: LD_INT 18
27179: PUSH
27180: LD_INT 7
27182: PUSH
27183: LD_INT 17
27185: PUSH
27186: LD_INT 8
27188: PUSH
27189: LD_INT 20
27191: PUSH
27192: LD_INT 21
27194: PUSH
27195: LD_INT 22
27197: PUSH
27198: LD_INT 72
27200: PUSH
27201: LD_INT 26
27203: PUSH
27204: LD_INT 69
27206: PUSH
27207: LD_INT 39
27209: PUSH
27210: LD_INT 40
27212: PUSH
27213: LD_INT 41
27215: PUSH
27216: LD_INT 42
27218: PUSH
27219: LD_INT 43
27221: PUSH
27222: LD_INT 48
27224: PUSH
27225: LD_INT 49
27227: PUSH
27228: LD_INT 50
27230: PUSH
27231: LD_INT 51
27233: PUSH
27234: LD_INT 52
27236: PUSH
27237: LD_INT 53
27239: PUSH
27240: LD_INT 54
27242: PUSH
27243: LD_INT 55
27245: PUSH
27246: LD_INT 56
27248: PUSH
27249: LD_INT 60
27251: PUSH
27252: LD_INT 61
27254: PUSH
27255: LD_INT 62
27257: PUSH
27258: LD_INT 66
27260: PUSH
27261: LD_INT 67
27263: PUSH
27264: LD_INT 68
27266: PUSH
27267: LD_INT 81
27269: PUSH
27270: LD_INT 82
27272: PUSH
27273: LD_INT 83
27275: PUSH
27276: LD_INT 84
27278: PUSH
27279: LD_INT 85
27281: PUSH
27282: LD_INT 87
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: LIST
27318: LIST
27319: LIST
27320: LIST
27321: LIST
27322: LIST
27323: LIST
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: ST_TO_ADDR
27340: GO 27573
27342: LD_INT 3
27344: DOUBLE
27345: EQUAL
27346: IFTRUE 27350
27348: GO 27572
27350: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27351: LD_ADDR_VAR 0 4
27355: PUSH
27356: LD_INT 46
27358: PUSH
27359: LD_INT 47
27361: PUSH
27362: LD_INT 1
27364: PUSH
27365: LD_INT 2
27367: PUSH
27368: LD_INT 82
27370: PUSH
27371: LD_INT 83
27373: PUSH
27374: LD_INT 84
27376: PUSH
27377: LD_INT 85
27379: PUSH
27380: LD_INT 86
27382: PUSH
27383: LD_INT 11
27385: PUSH
27386: LD_INT 9
27388: PUSH
27389: LD_INT 20
27391: PUSH
27392: LD_INT 19
27394: PUSH
27395: LD_INT 21
27397: PUSH
27398: LD_INT 24
27400: PUSH
27401: LD_INT 22
27403: PUSH
27404: LD_INT 25
27406: PUSH
27407: LD_INT 28
27409: PUSH
27410: LD_INT 29
27412: PUSH
27413: LD_INT 30
27415: PUSH
27416: LD_INT 31
27418: PUSH
27419: LD_INT 37
27421: PUSH
27422: LD_INT 38
27424: PUSH
27425: LD_INT 32
27427: PUSH
27428: LD_INT 27
27430: PUSH
27431: LD_INT 33
27433: PUSH
27434: LD_INT 69
27436: PUSH
27437: LD_INT 39
27439: PUSH
27440: LD_INT 34
27442: PUSH
27443: LD_INT 40
27445: PUSH
27446: LD_INT 71
27448: PUSH
27449: LD_INT 23
27451: PUSH
27452: LD_INT 44
27454: PUSH
27455: LD_INT 48
27457: PUSH
27458: LD_INT 49
27460: PUSH
27461: LD_INT 50
27463: PUSH
27464: LD_INT 51
27466: PUSH
27467: LD_INT 52
27469: PUSH
27470: LD_INT 53
27472: PUSH
27473: LD_INT 54
27475: PUSH
27476: LD_INT 55
27478: PUSH
27479: LD_INT 56
27481: PUSH
27482: LD_INT 57
27484: PUSH
27485: LD_INT 58
27487: PUSH
27488: LD_INT 59
27490: PUSH
27491: LD_INT 63
27493: PUSH
27494: LD_INT 64
27496: PUSH
27497: LD_INT 65
27499: PUSH
27500: LD_INT 82
27502: PUSH
27503: LD_INT 83
27505: PUSH
27506: LD_INT 84
27508: PUSH
27509: LD_INT 85
27511: PUSH
27512: LD_INT 86
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: ST_TO_ADDR
27570: GO 27573
27572: POP
// if state > - 1 and state < 3 then
27573: LD_VAR 0 3
27577: PUSH
27578: LD_INT 1
27580: NEG
27581: GREATER
27582: PUSH
27583: LD_VAR 0 3
27587: PUSH
27588: LD_INT 3
27590: LESS
27591: AND
27592: IFFALSE 27649
// for i in result do
27594: LD_ADDR_VAR 0 5
27598: PUSH
27599: LD_VAR 0 4
27603: PUSH
27604: FOR_IN
27605: IFFALSE 27647
// if GetTech ( i , side ) <> state then
27607: LD_VAR 0 5
27611: PPUSH
27612: LD_VAR 0 1
27616: PPUSH
27617: CALL_OW 321
27621: PUSH
27622: LD_VAR 0 3
27626: NONEQUAL
27627: IFFALSE 27645
// result := result diff i ;
27629: LD_ADDR_VAR 0 4
27633: PUSH
27634: LD_VAR 0 4
27638: PUSH
27639: LD_VAR 0 5
27643: DIFF
27644: ST_TO_ADDR
27645: GO 27604
27647: POP
27648: POP
// end ;
27649: LD_VAR 0 4
27653: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27654: LD_INT 0
27656: PPUSH
27657: PPUSH
27658: PPUSH
// result := true ;
27659: LD_ADDR_VAR 0 3
27663: PUSH
27664: LD_INT 1
27666: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27667: LD_ADDR_VAR 0 5
27671: PUSH
27672: LD_VAR 0 2
27676: PPUSH
27677: CALL_OW 480
27681: ST_TO_ADDR
// if not tmp then
27682: LD_VAR 0 5
27686: NOT
27687: IFFALSE 27691
// exit ;
27689: GO 27740
// for i in tmp do
27691: LD_ADDR_VAR 0 4
27695: PUSH
27696: LD_VAR 0 5
27700: PUSH
27701: FOR_IN
27702: IFFALSE 27738
// if GetTech ( i , side ) <> state_researched then
27704: LD_VAR 0 4
27708: PPUSH
27709: LD_VAR 0 1
27713: PPUSH
27714: CALL_OW 321
27718: PUSH
27719: LD_INT 2
27721: NONEQUAL
27722: IFFALSE 27736
// begin result := false ;
27724: LD_ADDR_VAR 0 3
27728: PUSH
27729: LD_INT 0
27731: ST_TO_ADDR
// exit ;
27732: POP
27733: POP
27734: GO 27740
// end ;
27736: GO 27701
27738: POP
27739: POP
// end ;
27740: LD_VAR 0 3
27744: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27745: LD_INT 0
27747: PPUSH
27748: PPUSH
27749: PPUSH
27750: PPUSH
27751: PPUSH
27752: PPUSH
27753: PPUSH
27754: PPUSH
27755: PPUSH
27756: PPUSH
27757: PPUSH
27758: PPUSH
27759: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27760: LD_VAR 0 1
27764: NOT
27765: PUSH
27766: LD_VAR 0 1
27770: PPUSH
27771: CALL_OW 257
27775: PUSH
27776: LD_INT 9
27778: NONEQUAL
27779: OR
27780: IFFALSE 27784
// exit ;
27782: GO 28357
// side := GetSide ( unit ) ;
27784: LD_ADDR_VAR 0 9
27788: PUSH
27789: LD_VAR 0 1
27793: PPUSH
27794: CALL_OW 255
27798: ST_TO_ADDR
// tech_space := tech_spacanom ;
27799: LD_ADDR_VAR 0 12
27803: PUSH
27804: LD_INT 29
27806: ST_TO_ADDR
// tech_time := tech_taurad ;
27807: LD_ADDR_VAR 0 13
27811: PUSH
27812: LD_INT 28
27814: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27815: LD_ADDR_VAR 0 11
27819: PUSH
27820: LD_VAR 0 1
27824: PPUSH
27825: CALL_OW 310
27829: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27830: LD_VAR 0 11
27834: PPUSH
27835: CALL_OW 247
27839: PUSH
27840: LD_INT 2
27842: EQUAL
27843: IFFALSE 27847
// exit ;
27845: GO 28357
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27847: LD_ADDR_VAR 0 8
27851: PUSH
27852: LD_INT 81
27854: PUSH
27855: LD_VAR 0 9
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: LD_INT 3
27866: PUSH
27867: LD_INT 21
27869: PUSH
27870: LD_INT 3
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PPUSH
27885: CALL_OW 69
27889: ST_TO_ADDR
// if not tmp then
27890: LD_VAR 0 8
27894: NOT
27895: IFFALSE 27899
// exit ;
27897: GO 28357
// if in_unit then
27899: LD_VAR 0 11
27903: IFFALSE 27927
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27905: LD_ADDR_VAR 0 10
27909: PUSH
27910: LD_VAR 0 8
27914: PPUSH
27915: LD_VAR 0 11
27919: PPUSH
27920: CALL_OW 74
27924: ST_TO_ADDR
27925: GO 27947
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27927: LD_ADDR_VAR 0 10
27931: PUSH
27932: LD_VAR 0 8
27936: PPUSH
27937: LD_VAR 0 1
27941: PPUSH
27942: CALL_OW 74
27946: ST_TO_ADDR
// if not enemy then
27947: LD_VAR 0 10
27951: NOT
27952: IFFALSE 27956
// exit ;
27954: GO 28357
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27956: LD_VAR 0 11
27960: PUSH
27961: LD_VAR 0 11
27965: PPUSH
27966: LD_VAR 0 10
27970: PPUSH
27971: CALL_OW 296
27975: PUSH
27976: LD_INT 13
27978: GREATER
27979: AND
27980: PUSH
27981: LD_VAR 0 1
27985: PPUSH
27986: LD_VAR 0 10
27990: PPUSH
27991: CALL_OW 296
27995: PUSH
27996: LD_INT 12
27998: GREATER
27999: OR
28000: IFFALSE 28004
// exit ;
28002: GO 28357
// missile := [ 1 ] ;
28004: LD_ADDR_VAR 0 14
28008: PUSH
28009: LD_INT 1
28011: PUSH
28012: EMPTY
28013: LIST
28014: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28015: LD_VAR 0 9
28019: PPUSH
28020: LD_VAR 0 12
28024: PPUSH
28025: CALL_OW 325
28029: IFFALSE 28058
// missile := Insert ( missile , missile + 1 , 2 ) ;
28031: LD_ADDR_VAR 0 14
28035: PUSH
28036: LD_VAR 0 14
28040: PPUSH
28041: LD_VAR 0 14
28045: PUSH
28046: LD_INT 1
28048: PLUS
28049: PPUSH
28050: LD_INT 2
28052: PPUSH
28053: CALL_OW 2
28057: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28058: LD_VAR 0 9
28062: PPUSH
28063: LD_VAR 0 13
28067: PPUSH
28068: CALL_OW 325
28072: PUSH
28073: LD_VAR 0 10
28077: PPUSH
28078: CALL_OW 255
28082: PPUSH
28083: LD_VAR 0 13
28087: PPUSH
28088: CALL_OW 325
28092: NOT
28093: AND
28094: IFFALSE 28123
// missile := Insert ( missile , missile + 1 , 3 ) ;
28096: LD_ADDR_VAR 0 14
28100: PUSH
28101: LD_VAR 0 14
28105: PPUSH
28106: LD_VAR 0 14
28110: PUSH
28111: LD_INT 1
28113: PLUS
28114: PPUSH
28115: LD_INT 3
28117: PPUSH
28118: CALL_OW 2
28122: ST_TO_ADDR
// if missile < 2 then
28123: LD_VAR 0 14
28127: PUSH
28128: LD_INT 2
28130: LESS
28131: IFFALSE 28135
// exit ;
28133: GO 28357
// x := GetX ( enemy ) ;
28135: LD_ADDR_VAR 0 4
28139: PUSH
28140: LD_VAR 0 10
28144: PPUSH
28145: CALL_OW 250
28149: ST_TO_ADDR
// y := GetY ( enemy ) ;
28150: LD_ADDR_VAR 0 5
28154: PUSH
28155: LD_VAR 0 10
28159: PPUSH
28160: CALL_OW 251
28164: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28165: LD_ADDR_VAR 0 6
28169: PUSH
28170: LD_VAR 0 4
28174: PUSH
28175: LD_INT 1
28177: NEG
28178: PPUSH
28179: LD_INT 1
28181: PPUSH
28182: CALL_OW 12
28186: PLUS
28187: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28188: LD_ADDR_VAR 0 7
28192: PUSH
28193: LD_VAR 0 5
28197: PUSH
28198: LD_INT 1
28200: NEG
28201: PPUSH
28202: LD_INT 1
28204: PPUSH
28205: CALL_OW 12
28209: PLUS
28210: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28211: LD_VAR 0 6
28215: PPUSH
28216: LD_VAR 0 7
28220: PPUSH
28221: CALL_OW 488
28225: NOT
28226: IFFALSE 28248
// begin _x := x ;
28228: LD_ADDR_VAR 0 6
28232: PUSH
28233: LD_VAR 0 4
28237: ST_TO_ADDR
// _y := y ;
28238: LD_ADDR_VAR 0 7
28242: PUSH
28243: LD_VAR 0 5
28247: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28248: LD_ADDR_VAR 0 3
28252: PUSH
28253: LD_INT 1
28255: PPUSH
28256: LD_VAR 0 14
28260: PPUSH
28261: CALL_OW 12
28265: ST_TO_ADDR
// case i of 1 :
28266: LD_VAR 0 3
28270: PUSH
28271: LD_INT 1
28273: DOUBLE
28274: EQUAL
28275: IFTRUE 28279
28277: GO 28296
28279: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28280: LD_VAR 0 1
28284: PPUSH
28285: LD_VAR 0 10
28289: PPUSH
28290: CALL_OW 115
28294: GO 28357
28296: LD_INT 2
28298: DOUBLE
28299: EQUAL
28300: IFTRUE 28304
28302: GO 28326
28304: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28305: LD_VAR 0 1
28309: PPUSH
28310: LD_VAR 0 6
28314: PPUSH
28315: LD_VAR 0 7
28319: PPUSH
28320: CALL_OW 153
28324: GO 28357
28326: LD_INT 3
28328: DOUBLE
28329: EQUAL
28330: IFTRUE 28334
28332: GO 28356
28334: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28335: LD_VAR 0 1
28339: PPUSH
28340: LD_VAR 0 6
28344: PPUSH
28345: LD_VAR 0 7
28349: PPUSH
28350: CALL_OW 154
28354: GO 28357
28356: POP
// end ;
28357: LD_VAR 0 2
28361: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28362: LD_INT 0
28364: PPUSH
28365: PPUSH
28366: PPUSH
28367: PPUSH
28368: PPUSH
28369: PPUSH
// if not unit or not building then
28370: LD_VAR 0 1
28374: NOT
28375: PUSH
28376: LD_VAR 0 2
28380: NOT
28381: OR
28382: IFFALSE 28386
// exit ;
28384: GO 28544
// x := GetX ( building ) ;
28386: LD_ADDR_VAR 0 5
28390: PUSH
28391: LD_VAR 0 2
28395: PPUSH
28396: CALL_OW 250
28400: ST_TO_ADDR
// y := GetY ( building ) ;
28401: LD_ADDR_VAR 0 6
28405: PUSH
28406: LD_VAR 0 2
28410: PPUSH
28411: CALL_OW 251
28415: ST_TO_ADDR
// for i = 0 to 5 do
28416: LD_ADDR_VAR 0 4
28420: PUSH
28421: DOUBLE
28422: LD_INT 0
28424: DEC
28425: ST_TO_ADDR
28426: LD_INT 5
28428: PUSH
28429: FOR_TO
28430: IFFALSE 28542
// begin _x := ShiftX ( x , i , 3 ) ;
28432: LD_ADDR_VAR 0 7
28436: PUSH
28437: LD_VAR 0 5
28441: PPUSH
28442: LD_VAR 0 4
28446: PPUSH
28447: LD_INT 3
28449: PPUSH
28450: CALL_OW 272
28454: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28455: LD_ADDR_VAR 0 8
28459: PUSH
28460: LD_VAR 0 6
28464: PPUSH
28465: LD_VAR 0 4
28469: PPUSH
28470: LD_INT 3
28472: PPUSH
28473: CALL_OW 273
28477: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28478: LD_VAR 0 7
28482: PPUSH
28483: LD_VAR 0 8
28487: PPUSH
28488: CALL_OW 488
28492: NOT
28493: IFFALSE 28497
// continue ;
28495: GO 28429
// if HexInfo ( _x , _y ) = 0 then
28497: LD_VAR 0 7
28501: PPUSH
28502: LD_VAR 0 8
28506: PPUSH
28507: CALL_OW 428
28511: PUSH
28512: LD_INT 0
28514: EQUAL
28515: IFFALSE 28540
// begin ComMoveXY ( unit , _x , _y ) ;
28517: LD_VAR 0 1
28521: PPUSH
28522: LD_VAR 0 7
28526: PPUSH
28527: LD_VAR 0 8
28531: PPUSH
28532: CALL_OW 111
// exit ;
28536: POP
28537: POP
28538: GO 28544
// end ; end ;
28540: GO 28429
28542: POP
28543: POP
// end ;
28544: LD_VAR 0 3
28548: RET
// export function ScanBase ( side , base_area ) ; begin
28549: LD_INT 0
28551: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28552: LD_ADDR_VAR 0 3
28556: PUSH
28557: LD_VAR 0 2
28561: PPUSH
28562: LD_INT 81
28564: PUSH
28565: LD_VAR 0 1
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PPUSH
28574: CALL_OW 70
28578: ST_TO_ADDR
// end ;
28579: LD_VAR 0 3
28583: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28584: LD_INT 0
28586: PPUSH
28587: PPUSH
28588: PPUSH
28589: PPUSH
// result := false ;
28590: LD_ADDR_VAR 0 2
28594: PUSH
28595: LD_INT 0
28597: ST_TO_ADDR
// side := GetSide ( unit ) ;
28598: LD_ADDR_VAR 0 3
28602: PUSH
28603: LD_VAR 0 1
28607: PPUSH
28608: CALL_OW 255
28612: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28613: LD_ADDR_VAR 0 4
28617: PUSH
28618: LD_VAR 0 1
28622: PPUSH
28623: CALL_OW 248
28627: ST_TO_ADDR
// case nat of 1 :
28628: LD_VAR 0 4
28632: PUSH
28633: LD_INT 1
28635: DOUBLE
28636: EQUAL
28637: IFTRUE 28641
28639: GO 28652
28641: POP
// tech := tech_lassight ; 2 :
28642: LD_ADDR_VAR 0 5
28646: PUSH
28647: LD_INT 12
28649: ST_TO_ADDR
28650: GO 28691
28652: LD_INT 2
28654: DOUBLE
28655: EQUAL
28656: IFTRUE 28660
28658: GO 28671
28660: POP
// tech := tech_mortar ; 3 :
28661: LD_ADDR_VAR 0 5
28665: PUSH
28666: LD_INT 41
28668: ST_TO_ADDR
28669: GO 28691
28671: LD_INT 3
28673: DOUBLE
28674: EQUAL
28675: IFTRUE 28679
28677: GO 28690
28679: POP
// tech := tech_bazooka ; end ;
28680: LD_ADDR_VAR 0 5
28684: PUSH
28685: LD_INT 44
28687: ST_TO_ADDR
28688: GO 28691
28690: POP
// if Researched ( side , tech ) then
28691: LD_VAR 0 3
28695: PPUSH
28696: LD_VAR 0 5
28700: PPUSH
28701: CALL_OW 325
28705: IFFALSE 28732
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28707: LD_ADDR_VAR 0 2
28711: PUSH
28712: LD_INT 5
28714: PUSH
28715: LD_INT 8
28717: PUSH
28718: LD_INT 9
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: LIST
28725: PUSH
28726: LD_VAR 0 4
28730: ARRAY
28731: ST_TO_ADDR
// end ;
28732: LD_VAR 0 2
28736: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28737: LD_INT 0
28739: PPUSH
28740: PPUSH
28741: PPUSH
// if not mines then
28742: LD_VAR 0 2
28746: NOT
28747: IFFALSE 28751
// exit ;
28749: GO 28895
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28751: LD_ADDR_VAR 0 5
28755: PUSH
28756: LD_INT 81
28758: PUSH
28759: LD_VAR 0 1
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: LD_INT 3
28770: PUSH
28771: LD_INT 21
28773: PUSH
28774: LD_INT 3
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: PPUSH
28789: CALL_OW 69
28793: ST_TO_ADDR
// for i in mines do
28794: LD_ADDR_VAR 0 4
28798: PUSH
28799: LD_VAR 0 2
28803: PUSH
28804: FOR_IN
28805: IFFALSE 28893
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28807: LD_VAR 0 4
28811: PUSH
28812: LD_INT 1
28814: ARRAY
28815: PPUSH
28816: LD_VAR 0 4
28820: PUSH
28821: LD_INT 2
28823: ARRAY
28824: PPUSH
28825: CALL_OW 458
28829: NOT
28830: IFFALSE 28834
// continue ;
28832: GO 28804
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28834: LD_VAR 0 4
28838: PUSH
28839: LD_INT 1
28841: ARRAY
28842: PPUSH
28843: LD_VAR 0 4
28847: PUSH
28848: LD_INT 2
28850: ARRAY
28851: PPUSH
28852: CALL_OW 428
28856: PUSH
28857: LD_VAR 0 5
28861: IN
28862: IFFALSE 28891
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28864: LD_VAR 0 4
28868: PUSH
28869: LD_INT 1
28871: ARRAY
28872: PPUSH
28873: LD_VAR 0 4
28877: PUSH
28878: LD_INT 2
28880: ARRAY
28881: PPUSH
28882: LD_VAR 0 1
28886: PPUSH
28887: CALL_OW 456
// end ;
28891: GO 28804
28893: POP
28894: POP
// end ;
28895: LD_VAR 0 3
28899: RET
// export function Count ( array ) ; var i ; begin
28900: LD_INT 0
28902: PPUSH
28903: PPUSH
// result := 0 ;
28904: LD_ADDR_VAR 0 2
28908: PUSH
28909: LD_INT 0
28911: ST_TO_ADDR
// for i in array do
28912: LD_ADDR_VAR 0 3
28916: PUSH
28917: LD_VAR 0 1
28921: PUSH
28922: FOR_IN
28923: IFFALSE 28947
// if i then
28925: LD_VAR 0 3
28929: IFFALSE 28945
// result := result + 1 ;
28931: LD_ADDR_VAR 0 2
28935: PUSH
28936: LD_VAR 0 2
28940: PUSH
28941: LD_INT 1
28943: PLUS
28944: ST_TO_ADDR
28945: GO 28922
28947: POP
28948: POP
// end ;
28949: LD_VAR 0 2
28953: RET
// export function IsEmpty ( building ) ; begin
28954: LD_INT 0
28956: PPUSH
// if not building then
28957: LD_VAR 0 1
28961: NOT
28962: IFFALSE 28966
// exit ;
28964: GO 29009
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28966: LD_ADDR_VAR 0 2
28970: PUSH
28971: LD_VAR 0 1
28975: PUSH
28976: LD_INT 22
28978: PUSH
28979: LD_VAR 0 1
28983: PPUSH
28984: CALL_OW 255
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: PUSH
28993: LD_INT 58
28995: PUSH
28996: EMPTY
28997: LIST
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PPUSH
29003: CALL_OW 69
29007: IN
29008: ST_TO_ADDR
// end ;
29009: LD_VAR 0 2
29013: RET
// export function IsNotFull ( building ) ; begin
29014: LD_INT 0
29016: PPUSH
// if not building then
29017: LD_VAR 0 1
29021: NOT
29022: IFFALSE 29026
// exit ;
29024: GO 29045
// result := UnitsInside ( building ) < 6 ;
29026: LD_ADDR_VAR 0 2
29030: PUSH
29031: LD_VAR 0 1
29035: PPUSH
29036: CALL_OW 313
29040: PUSH
29041: LD_INT 6
29043: LESS
29044: ST_TO_ADDR
// end ;
29045: LD_VAR 0 2
29049: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29050: LD_INT 0
29052: PPUSH
29053: PPUSH
29054: PPUSH
29055: PPUSH
// tmp := [ ] ;
29056: LD_ADDR_VAR 0 3
29060: PUSH
29061: EMPTY
29062: ST_TO_ADDR
// list := [ ] ;
29063: LD_ADDR_VAR 0 5
29067: PUSH
29068: EMPTY
29069: ST_TO_ADDR
// for i = 16 to 25 do
29070: LD_ADDR_VAR 0 4
29074: PUSH
29075: DOUBLE
29076: LD_INT 16
29078: DEC
29079: ST_TO_ADDR
29080: LD_INT 25
29082: PUSH
29083: FOR_TO
29084: IFFALSE 29157
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29086: LD_ADDR_VAR 0 3
29090: PUSH
29091: LD_VAR 0 3
29095: PUSH
29096: LD_INT 22
29098: PUSH
29099: LD_VAR 0 1
29103: PPUSH
29104: CALL_OW 255
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: LD_INT 91
29115: PUSH
29116: LD_VAR 0 1
29120: PUSH
29121: LD_INT 6
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 30
29131: PUSH
29132: LD_VAR 0 4
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: LIST
29145: PUSH
29146: EMPTY
29147: LIST
29148: PPUSH
29149: CALL_OW 69
29153: ADD
29154: ST_TO_ADDR
29155: GO 29083
29157: POP
29158: POP
// for i = 1 to tmp do
29159: LD_ADDR_VAR 0 4
29163: PUSH
29164: DOUBLE
29165: LD_INT 1
29167: DEC
29168: ST_TO_ADDR
29169: LD_VAR 0 3
29173: PUSH
29174: FOR_TO
29175: IFFALSE 29263
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29177: LD_ADDR_VAR 0 5
29181: PUSH
29182: LD_VAR 0 5
29186: PUSH
29187: LD_VAR 0 3
29191: PUSH
29192: LD_VAR 0 4
29196: ARRAY
29197: PPUSH
29198: CALL_OW 266
29202: PUSH
29203: LD_VAR 0 3
29207: PUSH
29208: LD_VAR 0 4
29212: ARRAY
29213: PPUSH
29214: CALL_OW 250
29218: PUSH
29219: LD_VAR 0 3
29223: PUSH
29224: LD_VAR 0 4
29228: ARRAY
29229: PPUSH
29230: CALL_OW 251
29234: PUSH
29235: LD_VAR 0 3
29239: PUSH
29240: LD_VAR 0 4
29244: ARRAY
29245: PPUSH
29246: CALL_OW 254
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: PUSH
29257: EMPTY
29258: LIST
29259: ADD
29260: ST_TO_ADDR
29261: GO 29174
29263: POP
29264: POP
// result := list ;
29265: LD_ADDR_VAR 0 2
29269: PUSH
29270: LD_VAR 0 5
29274: ST_TO_ADDR
// end ;
29275: LD_VAR 0 2
29279: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29280: LD_INT 0
29282: PPUSH
29283: PPUSH
29284: PPUSH
29285: PPUSH
29286: PPUSH
29287: PPUSH
29288: PPUSH
// if not factory then
29289: LD_VAR 0 1
29293: NOT
29294: IFFALSE 29298
// exit ;
29296: GO 29891
// if control = control_apeman then
29298: LD_VAR 0 4
29302: PUSH
29303: LD_INT 5
29305: EQUAL
29306: IFFALSE 29415
// begin tmp := UnitsInside ( factory ) ;
29308: LD_ADDR_VAR 0 8
29312: PUSH
29313: LD_VAR 0 1
29317: PPUSH
29318: CALL_OW 313
29322: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29323: LD_VAR 0 8
29327: PPUSH
29328: LD_INT 25
29330: PUSH
29331: LD_INT 12
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PPUSH
29338: CALL_OW 72
29342: NOT
29343: IFFALSE 29353
// control := control_manual ;
29345: LD_ADDR_VAR 0 4
29349: PUSH
29350: LD_INT 1
29352: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29353: LD_ADDR_VAR 0 8
29357: PUSH
29358: LD_VAR 0 1
29362: PPUSH
29363: CALL 29050 0 1
29367: ST_TO_ADDR
// if tmp then
29368: LD_VAR 0 8
29372: IFFALSE 29415
// begin for i in tmp do
29374: LD_ADDR_VAR 0 7
29378: PUSH
29379: LD_VAR 0 8
29383: PUSH
29384: FOR_IN
29385: IFFALSE 29413
// if i [ 1 ] = b_ext_radio then
29387: LD_VAR 0 7
29391: PUSH
29392: LD_INT 1
29394: ARRAY
29395: PUSH
29396: LD_INT 22
29398: EQUAL
29399: IFFALSE 29411
// begin control := control_remote ;
29401: LD_ADDR_VAR 0 4
29405: PUSH
29406: LD_INT 2
29408: ST_TO_ADDR
// break ;
29409: GO 29413
// end ;
29411: GO 29384
29413: POP
29414: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29415: LD_VAR 0 1
29419: PPUSH
29420: LD_VAR 0 2
29424: PPUSH
29425: LD_VAR 0 3
29429: PPUSH
29430: LD_VAR 0 4
29434: PPUSH
29435: LD_VAR 0 5
29439: PPUSH
29440: CALL_OW 448
29444: IFFALSE 29479
// begin result := [ chassis , engine , control , weapon ] ;
29446: LD_ADDR_VAR 0 6
29450: PUSH
29451: LD_VAR 0 2
29455: PUSH
29456: LD_VAR 0 3
29460: PUSH
29461: LD_VAR 0 4
29465: PUSH
29466: LD_VAR 0 5
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: LIST
29475: LIST
29476: ST_TO_ADDR
// exit ;
29477: GO 29891
// end ; _chassis := AvailableChassisList ( factory ) ;
29479: LD_ADDR_VAR 0 9
29483: PUSH
29484: LD_VAR 0 1
29488: PPUSH
29489: CALL_OW 475
29493: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29494: LD_ADDR_VAR 0 11
29498: PUSH
29499: LD_VAR 0 1
29503: PPUSH
29504: CALL_OW 476
29508: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29509: LD_ADDR_VAR 0 12
29513: PUSH
29514: LD_VAR 0 1
29518: PPUSH
29519: CALL_OW 477
29523: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29524: LD_ADDR_VAR 0 10
29528: PUSH
29529: LD_VAR 0 1
29533: PPUSH
29534: CALL_OW 478
29538: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29539: LD_VAR 0 9
29543: NOT
29544: PUSH
29545: LD_VAR 0 11
29549: NOT
29550: OR
29551: PUSH
29552: LD_VAR 0 12
29556: NOT
29557: OR
29558: PUSH
29559: LD_VAR 0 10
29563: NOT
29564: OR
29565: IFFALSE 29600
// begin result := [ chassis , engine , control , weapon ] ;
29567: LD_ADDR_VAR 0 6
29571: PUSH
29572: LD_VAR 0 2
29576: PUSH
29577: LD_VAR 0 3
29581: PUSH
29582: LD_VAR 0 4
29586: PUSH
29587: LD_VAR 0 5
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: LIST
29596: LIST
29597: ST_TO_ADDR
// exit ;
29598: GO 29891
// end ; if not chassis in _chassis then
29600: LD_VAR 0 2
29604: PUSH
29605: LD_VAR 0 9
29609: IN
29610: NOT
29611: IFFALSE 29637
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29613: LD_ADDR_VAR 0 2
29617: PUSH
29618: LD_VAR 0 9
29622: PUSH
29623: LD_INT 1
29625: PPUSH
29626: LD_VAR 0 9
29630: PPUSH
29631: CALL_OW 12
29635: ARRAY
29636: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29637: LD_VAR 0 2
29641: PPUSH
29642: LD_VAR 0 3
29646: PPUSH
29647: CALL 29896 0 2
29651: NOT
29652: IFFALSE 29711
// repeat engine := _engine [ 1 ] ;
29654: LD_ADDR_VAR 0 3
29658: PUSH
29659: LD_VAR 0 11
29663: PUSH
29664: LD_INT 1
29666: ARRAY
29667: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29668: LD_ADDR_VAR 0 11
29672: PUSH
29673: LD_VAR 0 11
29677: PPUSH
29678: LD_INT 1
29680: PPUSH
29681: CALL_OW 3
29685: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29686: LD_VAR 0 2
29690: PPUSH
29691: LD_VAR 0 3
29695: PPUSH
29696: CALL 29896 0 2
29700: PUSH
29701: LD_VAR 0 11
29705: PUSH
29706: EMPTY
29707: EQUAL
29708: OR
29709: IFFALSE 29654
// if not control in _control then
29711: LD_VAR 0 4
29715: PUSH
29716: LD_VAR 0 12
29720: IN
29721: NOT
29722: IFFALSE 29748
// control := _control [ rand ( 1 , _control ) ] ;
29724: LD_ADDR_VAR 0 4
29728: PUSH
29729: LD_VAR 0 12
29733: PUSH
29734: LD_INT 1
29736: PPUSH
29737: LD_VAR 0 12
29741: PPUSH
29742: CALL_OW 12
29746: ARRAY
29747: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29748: LD_VAR 0 2
29752: PPUSH
29753: LD_VAR 0 5
29757: PPUSH
29758: CALL 30116 0 2
29762: NOT
29763: IFFALSE 29822
// repeat weapon := _weapon [ 1 ] ;
29765: LD_ADDR_VAR 0 5
29769: PUSH
29770: LD_VAR 0 10
29774: PUSH
29775: LD_INT 1
29777: ARRAY
29778: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29779: LD_ADDR_VAR 0 10
29783: PUSH
29784: LD_VAR 0 10
29788: PPUSH
29789: LD_INT 1
29791: PPUSH
29792: CALL_OW 3
29796: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29797: LD_VAR 0 2
29801: PPUSH
29802: LD_VAR 0 5
29806: PPUSH
29807: CALL 30116 0 2
29811: PUSH
29812: LD_VAR 0 10
29816: PUSH
29817: EMPTY
29818: EQUAL
29819: OR
29820: IFFALSE 29765
// result := [ ] ;
29822: LD_ADDR_VAR 0 6
29826: PUSH
29827: EMPTY
29828: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29829: LD_VAR 0 1
29833: PPUSH
29834: LD_VAR 0 2
29838: PPUSH
29839: LD_VAR 0 3
29843: PPUSH
29844: LD_VAR 0 4
29848: PPUSH
29849: LD_VAR 0 5
29853: PPUSH
29854: CALL_OW 448
29858: IFFALSE 29891
// result := [ chassis , engine , control , weapon ] ;
29860: LD_ADDR_VAR 0 6
29864: PUSH
29865: LD_VAR 0 2
29869: PUSH
29870: LD_VAR 0 3
29874: PUSH
29875: LD_VAR 0 4
29879: PUSH
29880: LD_VAR 0 5
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: ST_TO_ADDR
// end ;
29891: LD_VAR 0 6
29895: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29896: LD_INT 0
29898: PPUSH
// if not chassis or not engine then
29899: LD_VAR 0 1
29903: NOT
29904: PUSH
29905: LD_VAR 0 2
29909: NOT
29910: OR
29911: IFFALSE 29915
// exit ;
29913: GO 30111
// case engine of engine_solar :
29915: LD_VAR 0 2
29919: PUSH
29920: LD_INT 2
29922: DOUBLE
29923: EQUAL
29924: IFTRUE 29928
29926: GO 29966
29928: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29929: LD_ADDR_VAR 0 3
29933: PUSH
29934: LD_INT 11
29936: PUSH
29937: LD_INT 12
29939: PUSH
29940: LD_INT 13
29942: PUSH
29943: LD_INT 14
29945: PUSH
29946: LD_INT 1
29948: PUSH
29949: LD_INT 2
29951: PUSH
29952: LD_INT 3
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: ST_TO_ADDR
29964: GO 30095
29966: LD_INT 1
29968: DOUBLE
29969: EQUAL
29970: IFTRUE 29974
29972: GO 30036
29974: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29975: LD_ADDR_VAR 0 3
29979: PUSH
29980: LD_INT 11
29982: PUSH
29983: LD_INT 12
29985: PUSH
29986: LD_INT 13
29988: PUSH
29989: LD_INT 14
29991: PUSH
29992: LD_INT 1
29994: PUSH
29995: LD_INT 2
29997: PUSH
29998: LD_INT 3
30000: PUSH
30001: LD_INT 4
30003: PUSH
30004: LD_INT 5
30006: PUSH
30007: LD_INT 21
30009: PUSH
30010: LD_INT 23
30012: PUSH
30013: LD_INT 22
30015: PUSH
30016: LD_INT 24
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: ST_TO_ADDR
30034: GO 30095
30036: LD_INT 3
30038: DOUBLE
30039: EQUAL
30040: IFTRUE 30044
30042: GO 30094
30044: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30045: LD_ADDR_VAR 0 3
30049: PUSH
30050: LD_INT 13
30052: PUSH
30053: LD_INT 14
30055: PUSH
30056: LD_INT 2
30058: PUSH
30059: LD_INT 3
30061: PUSH
30062: LD_INT 4
30064: PUSH
30065: LD_INT 5
30067: PUSH
30068: LD_INT 21
30070: PUSH
30071: LD_INT 22
30073: PUSH
30074: LD_INT 23
30076: PUSH
30077: LD_INT 24
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: ST_TO_ADDR
30092: GO 30095
30094: POP
// result := ( chassis in result ) ;
30095: LD_ADDR_VAR 0 3
30099: PUSH
30100: LD_VAR 0 1
30104: PUSH
30105: LD_VAR 0 3
30109: IN
30110: ST_TO_ADDR
// end ;
30111: LD_VAR 0 3
30115: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30116: LD_INT 0
30118: PPUSH
// if not chassis or not weapon then
30119: LD_VAR 0 1
30123: NOT
30124: PUSH
30125: LD_VAR 0 2
30129: NOT
30130: OR
30131: IFFALSE 30135
// exit ;
30133: GO 31161
// case weapon of us_machine_gun :
30135: LD_VAR 0 2
30139: PUSH
30140: LD_INT 2
30142: DOUBLE
30143: EQUAL
30144: IFTRUE 30148
30146: GO 30178
30148: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30149: LD_ADDR_VAR 0 3
30153: PUSH
30154: LD_INT 1
30156: PUSH
30157: LD_INT 2
30159: PUSH
30160: LD_INT 3
30162: PUSH
30163: LD_INT 4
30165: PUSH
30166: LD_INT 5
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: ST_TO_ADDR
30176: GO 31145
30178: LD_INT 3
30180: DOUBLE
30181: EQUAL
30182: IFTRUE 30186
30184: GO 30216
30186: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30187: LD_ADDR_VAR 0 3
30191: PUSH
30192: LD_INT 1
30194: PUSH
30195: LD_INT 2
30197: PUSH
30198: LD_INT 3
30200: PUSH
30201: LD_INT 4
30203: PUSH
30204: LD_INT 5
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: ST_TO_ADDR
30214: GO 31145
30216: LD_INT 11
30218: DOUBLE
30219: EQUAL
30220: IFTRUE 30224
30222: GO 30254
30224: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30225: LD_ADDR_VAR 0 3
30229: PUSH
30230: LD_INT 1
30232: PUSH
30233: LD_INT 2
30235: PUSH
30236: LD_INT 3
30238: PUSH
30239: LD_INT 4
30241: PUSH
30242: LD_INT 5
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: ST_TO_ADDR
30252: GO 31145
30254: LD_INT 4
30256: DOUBLE
30257: EQUAL
30258: IFTRUE 30262
30260: GO 30288
30262: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30263: LD_ADDR_VAR 0 3
30267: PUSH
30268: LD_INT 2
30270: PUSH
30271: LD_INT 3
30273: PUSH
30274: LD_INT 4
30276: PUSH
30277: LD_INT 5
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: ST_TO_ADDR
30286: GO 31145
30288: LD_INT 5
30290: DOUBLE
30291: EQUAL
30292: IFTRUE 30296
30294: GO 30322
30296: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30297: LD_ADDR_VAR 0 3
30301: PUSH
30302: LD_INT 2
30304: PUSH
30305: LD_INT 3
30307: PUSH
30308: LD_INT 4
30310: PUSH
30311: LD_INT 5
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: ST_TO_ADDR
30320: GO 31145
30322: LD_INT 9
30324: DOUBLE
30325: EQUAL
30326: IFTRUE 30330
30328: GO 30356
30330: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30331: LD_ADDR_VAR 0 3
30335: PUSH
30336: LD_INT 2
30338: PUSH
30339: LD_INT 3
30341: PUSH
30342: LD_INT 4
30344: PUSH
30345: LD_INT 5
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: ST_TO_ADDR
30354: GO 31145
30356: LD_INT 7
30358: DOUBLE
30359: EQUAL
30360: IFTRUE 30364
30362: GO 30390
30364: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30365: LD_ADDR_VAR 0 3
30369: PUSH
30370: LD_INT 2
30372: PUSH
30373: LD_INT 3
30375: PUSH
30376: LD_INT 4
30378: PUSH
30379: LD_INT 5
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: ST_TO_ADDR
30388: GO 31145
30390: LD_INT 12
30392: DOUBLE
30393: EQUAL
30394: IFTRUE 30398
30396: GO 30424
30398: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30399: LD_ADDR_VAR 0 3
30403: PUSH
30404: LD_INT 2
30406: PUSH
30407: LD_INT 3
30409: PUSH
30410: LD_INT 4
30412: PUSH
30413: LD_INT 5
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: LIST
30420: LIST
30421: ST_TO_ADDR
30422: GO 31145
30424: LD_INT 13
30426: DOUBLE
30427: EQUAL
30428: IFTRUE 30432
30430: GO 30458
30432: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30433: LD_ADDR_VAR 0 3
30437: PUSH
30438: LD_INT 2
30440: PUSH
30441: LD_INT 3
30443: PUSH
30444: LD_INT 4
30446: PUSH
30447: LD_INT 5
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: ST_TO_ADDR
30456: GO 31145
30458: LD_INT 14
30460: DOUBLE
30461: EQUAL
30462: IFTRUE 30466
30464: GO 30484
30466: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30467: LD_ADDR_VAR 0 3
30471: PUSH
30472: LD_INT 4
30474: PUSH
30475: LD_INT 5
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: ST_TO_ADDR
30482: GO 31145
30484: LD_INT 6
30486: DOUBLE
30487: EQUAL
30488: IFTRUE 30492
30490: GO 30510
30492: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30493: LD_ADDR_VAR 0 3
30497: PUSH
30498: LD_INT 4
30500: PUSH
30501: LD_INT 5
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: ST_TO_ADDR
30508: GO 31145
30510: LD_INT 10
30512: DOUBLE
30513: EQUAL
30514: IFTRUE 30518
30516: GO 30536
30518: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30519: LD_ADDR_VAR 0 3
30523: PUSH
30524: LD_INT 4
30526: PUSH
30527: LD_INT 5
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: ST_TO_ADDR
30534: GO 31145
30536: LD_INT 22
30538: DOUBLE
30539: EQUAL
30540: IFTRUE 30544
30542: GO 30570
30544: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30545: LD_ADDR_VAR 0 3
30549: PUSH
30550: LD_INT 11
30552: PUSH
30553: LD_INT 12
30555: PUSH
30556: LD_INT 13
30558: PUSH
30559: LD_INT 14
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: ST_TO_ADDR
30568: GO 31145
30570: LD_INT 23
30572: DOUBLE
30573: EQUAL
30574: IFTRUE 30578
30576: GO 30604
30578: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30579: LD_ADDR_VAR 0 3
30583: PUSH
30584: LD_INT 11
30586: PUSH
30587: LD_INT 12
30589: PUSH
30590: LD_INT 13
30592: PUSH
30593: LD_INT 14
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: ST_TO_ADDR
30602: GO 31145
30604: LD_INT 24
30606: DOUBLE
30607: EQUAL
30608: IFTRUE 30612
30610: GO 30638
30612: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30613: LD_ADDR_VAR 0 3
30617: PUSH
30618: LD_INT 11
30620: PUSH
30621: LD_INT 12
30623: PUSH
30624: LD_INT 13
30626: PUSH
30627: LD_INT 14
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: LIST
30634: LIST
30635: ST_TO_ADDR
30636: GO 31145
30638: LD_INT 30
30640: DOUBLE
30641: EQUAL
30642: IFTRUE 30646
30644: GO 30672
30646: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30647: LD_ADDR_VAR 0 3
30651: PUSH
30652: LD_INT 11
30654: PUSH
30655: LD_INT 12
30657: PUSH
30658: LD_INT 13
30660: PUSH
30661: LD_INT 14
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: ST_TO_ADDR
30670: GO 31145
30672: LD_INT 25
30674: DOUBLE
30675: EQUAL
30676: IFTRUE 30680
30678: GO 30698
30680: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30681: LD_ADDR_VAR 0 3
30685: PUSH
30686: LD_INT 13
30688: PUSH
30689: LD_INT 14
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: ST_TO_ADDR
30696: GO 31145
30698: LD_INT 27
30700: DOUBLE
30701: EQUAL
30702: IFTRUE 30706
30704: GO 30724
30706: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30707: LD_ADDR_VAR 0 3
30711: PUSH
30712: LD_INT 13
30714: PUSH
30715: LD_INT 14
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: ST_TO_ADDR
30722: GO 31145
30724: LD_INT 28
30726: DOUBLE
30727: EQUAL
30728: IFTRUE 30732
30730: GO 30750
30732: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30733: LD_ADDR_VAR 0 3
30737: PUSH
30738: LD_INT 13
30740: PUSH
30741: LD_INT 14
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: ST_TO_ADDR
30748: GO 31145
30750: LD_INT 29
30752: DOUBLE
30753: EQUAL
30754: IFTRUE 30758
30756: GO 30776
30758: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30759: LD_ADDR_VAR 0 3
30763: PUSH
30764: LD_INT 13
30766: PUSH
30767: LD_INT 14
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: ST_TO_ADDR
30774: GO 31145
30776: LD_INT 31
30778: DOUBLE
30779: EQUAL
30780: IFTRUE 30784
30782: GO 30802
30784: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30785: LD_ADDR_VAR 0 3
30789: PUSH
30790: LD_INT 13
30792: PUSH
30793: LD_INT 14
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: ST_TO_ADDR
30800: GO 31145
30802: LD_INT 26
30804: DOUBLE
30805: EQUAL
30806: IFTRUE 30810
30808: GO 30828
30810: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30811: LD_ADDR_VAR 0 3
30815: PUSH
30816: LD_INT 13
30818: PUSH
30819: LD_INT 14
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: ST_TO_ADDR
30826: GO 31145
30828: LD_INT 42
30830: DOUBLE
30831: EQUAL
30832: IFTRUE 30836
30834: GO 30862
30836: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30837: LD_ADDR_VAR 0 3
30841: PUSH
30842: LD_INT 21
30844: PUSH
30845: LD_INT 22
30847: PUSH
30848: LD_INT 23
30850: PUSH
30851: LD_INT 24
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: ST_TO_ADDR
30860: GO 31145
30862: LD_INT 43
30864: DOUBLE
30865: EQUAL
30866: IFTRUE 30870
30868: GO 30896
30870: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30871: LD_ADDR_VAR 0 3
30875: PUSH
30876: LD_INT 21
30878: PUSH
30879: LD_INT 22
30881: PUSH
30882: LD_INT 23
30884: PUSH
30885: LD_INT 24
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: ST_TO_ADDR
30894: GO 31145
30896: LD_INT 44
30898: DOUBLE
30899: EQUAL
30900: IFTRUE 30904
30902: GO 30930
30904: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30905: LD_ADDR_VAR 0 3
30909: PUSH
30910: LD_INT 21
30912: PUSH
30913: LD_INT 22
30915: PUSH
30916: LD_INT 23
30918: PUSH
30919: LD_INT 24
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: ST_TO_ADDR
30928: GO 31145
30930: LD_INT 45
30932: DOUBLE
30933: EQUAL
30934: IFTRUE 30938
30936: GO 30964
30938: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30939: LD_ADDR_VAR 0 3
30943: PUSH
30944: LD_INT 21
30946: PUSH
30947: LD_INT 22
30949: PUSH
30950: LD_INT 23
30952: PUSH
30953: LD_INT 24
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: LIST
30960: LIST
30961: ST_TO_ADDR
30962: GO 31145
30964: LD_INT 49
30966: DOUBLE
30967: EQUAL
30968: IFTRUE 30972
30970: GO 30998
30972: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30973: LD_ADDR_VAR 0 3
30977: PUSH
30978: LD_INT 21
30980: PUSH
30981: LD_INT 22
30983: PUSH
30984: LD_INT 23
30986: PUSH
30987: LD_INT 24
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: ST_TO_ADDR
30996: GO 31145
30998: LD_INT 51
31000: DOUBLE
31001: EQUAL
31002: IFTRUE 31006
31004: GO 31032
31006: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31007: LD_ADDR_VAR 0 3
31011: PUSH
31012: LD_INT 21
31014: PUSH
31015: LD_INT 22
31017: PUSH
31018: LD_INT 23
31020: PUSH
31021: LD_INT 24
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: ST_TO_ADDR
31030: GO 31145
31032: LD_INT 52
31034: DOUBLE
31035: EQUAL
31036: IFTRUE 31040
31038: GO 31066
31040: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31041: LD_ADDR_VAR 0 3
31045: PUSH
31046: LD_INT 21
31048: PUSH
31049: LD_INT 22
31051: PUSH
31052: LD_INT 23
31054: PUSH
31055: LD_INT 24
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: ST_TO_ADDR
31064: GO 31145
31066: LD_INT 53
31068: DOUBLE
31069: EQUAL
31070: IFTRUE 31074
31072: GO 31092
31074: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31075: LD_ADDR_VAR 0 3
31079: PUSH
31080: LD_INT 23
31082: PUSH
31083: LD_INT 24
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: ST_TO_ADDR
31090: GO 31145
31092: LD_INT 46
31094: DOUBLE
31095: EQUAL
31096: IFTRUE 31100
31098: GO 31118
31100: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31101: LD_ADDR_VAR 0 3
31105: PUSH
31106: LD_INT 23
31108: PUSH
31109: LD_INT 24
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: ST_TO_ADDR
31116: GO 31145
31118: LD_INT 47
31120: DOUBLE
31121: EQUAL
31122: IFTRUE 31126
31124: GO 31144
31126: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31127: LD_ADDR_VAR 0 3
31131: PUSH
31132: LD_INT 23
31134: PUSH
31135: LD_INT 24
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: ST_TO_ADDR
31142: GO 31145
31144: POP
// result := ( chassis in result ) ;
31145: LD_ADDR_VAR 0 3
31149: PUSH
31150: LD_VAR 0 1
31154: PUSH
31155: LD_VAR 0 3
31159: IN
31160: ST_TO_ADDR
// end ;
31161: LD_VAR 0 3
31165: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31166: LD_INT 0
31168: PPUSH
31169: PPUSH
31170: PPUSH
31171: PPUSH
31172: PPUSH
31173: PPUSH
31174: PPUSH
// result := array ;
31175: LD_ADDR_VAR 0 5
31179: PUSH
31180: LD_VAR 0 1
31184: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31185: LD_VAR 0 1
31189: NOT
31190: PUSH
31191: LD_VAR 0 2
31195: NOT
31196: OR
31197: PUSH
31198: LD_VAR 0 3
31202: NOT
31203: OR
31204: PUSH
31205: LD_VAR 0 2
31209: PUSH
31210: LD_VAR 0 1
31214: GREATER
31215: OR
31216: PUSH
31217: LD_VAR 0 3
31221: PUSH
31222: LD_VAR 0 1
31226: GREATER
31227: OR
31228: IFFALSE 31232
// exit ;
31230: GO 31528
// if direction then
31232: LD_VAR 0 4
31236: IFFALSE 31300
// begin d := 1 ;
31238: LD_ADDR_VAR 0 9
31242: PUSH
31243: LD_INT 1
31245: ST_TO_ADDR
// if i_from > i_to then
31246: LD_VAR 0 2
31250: PUSH
31251: LD_VAR 0 3
31255: GREATER
31256: IFFALSE 31282
// length := ( array - i_from ) + i_to else
31258: LD_ADDR_VAR 0 11
31262: PUSH
31263: LD_VAR 0 1
31267: PUSH
31268: LD_VAR 0 2
31272: MINUS
31273: PUSH
31274: LD_VAR 0 3
31278: PLUS
31279: ST_TO_ADDR
31280: GO 31298
// length := i_to - i_from ;
31282: LD_ADDR_VAR 0 11
31286: PUSH
31287: LD_VAR 0 3
31291: PUSH
31292: LD_VAR 0 2
31296: MINUS
31297: ST_TO_ADDR
// end else
31298: GO 31361
// begin d := - 1 ;
31300: LD_ADDR_VAR 0 9
31304: PUSH
31305: LD_INT 1
31307: NEG
31308: ST_TO_ADDR
// if i_from > i_to then
31309: LD_VAR 0 2
31313: PUSH
31314: LD_VAR 0 3
31318: GREATER
31319: IFFALSE 31339
// length := i_from - i_to else
31321: LD_ADDR_VAR 0 11
31325: PUSH
31326: LD_VAR 0 2
31330: PUSH
31331: LD_VAR 0 3
31335: MINUS
31336: ST_TO_ADDR
31337: GO 31361
// length := ( array - i_to ) + i_from ;
31339: LD_ADDR_VAR 0 11
31343: PUSH
31344: LD_VAR 0 1
31348: PUSH
31349: LD_VAR 0 3
31353: MINUS
31354: PUSH
31355: LD_VAR 0 2
31359: PLUS
31360: ST_TO_ADDR
// end ; if not length then
31361: LD_VAR 0 11
31365: NOT
31366: IFFALSE 31370
// exit ;
31368: GO 31528
// tmp := array ;
31370: LD_ADDR_VAR 0 10
31374: PUSH
31375: LD_VAR 0 1
31379: ST_TO_ADDR
// for i = 1 to length do
31380: LD_ADDR_VAR 0 6
31384: PUSH
31385: DOUBLE
31386: LD_INT 1
31388: DEC
31389: ST_TO_ADDR
31390: LD_VAR 0 11
31394: PUSH
31395: FOR_TO
31396: IFFALSE 31516
// begin for j = 1 to array do
31398: LD_ADDR_VAR 0 7
31402: PUSH
31403: DOUBLE
31404: LD_INT 1
31406: DEC
31407: ST_TO_ADDR
31408: LD_VAR 0 1
31412: PUSH
31413: FOR_TO
31414: IFFALSE 31502
// begin k := j + d ;
31416: LD_ADDR_VAR 0 8
31420: PUSH
31421: LD_VAR 0 7
31425: PUSH
31426: LD_VAR 0 9
31430: PLUS
31431: ST_TO_ADDR
// if k > array then
31432: LD_VAR 0 8
31436: PUSH
31437: LD_VAR 0 1
31441: GREATER
31442: IFFALSE 31452
// k := 1 ;
31444: LD_ADDR_VAR 0 8
31448: PUSH
31449: LD_INT 1
31451: ST_TO_ADDR
// if not k then
31452: LD_VAR 0 8
31456: NOT
31457: IFFALSE 31469
// k := array ;
31459: LD_ADDR_VAR 0 8
31463: PUSH
31464: LD_VAR 0 1
31468: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31469: LD_ADDR_VAR 0 10
31473: PUSH
31474: LD_VAR 0 10
31478: PPUSH
31479: LD_VAR 0 8
31483: PPUSH
31484: LD_VAR 0 1
31488: PUSH
31489: LD_VAR 0 7
31493: ARRAY
31494: PPUSH
31495: CALL_OW 1
31499: ST_TO_ADDR
// end ;
31500: GO 31413
31502: POP
31503: POP
// array := tmp ;
31504: LD_ADDR_VAR 0 1
31508: PUSH
31509: LD_VAR 0 10
31513: ST_TO_ADDR
// end ;
31514: GO 31395
31516: POP
31517: POP
// result := array ;
31518: LD_ADDR_VAR 0 5
31522: PUSH
31523: LD_VAR 0 1
31527: ST_TO_ADDR
// end ;
31528: LD_VAR 0 5
31532: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31533: LD_INT 0
31535: PPUSH
31536: PPUSH
// result := 0 ;
31537: LD_ADDR_VAR 0 3
31541: PUSH
31542: LD_INT 0
31544: ST_TO_ADDR
// if not array or not value in array then
31545: LD_VAR 0 1
31549: NOT
31550: PUSH
31551: LD_VAR 0 2
31555: PUSH
31556: LD_VAR 0 1
31560: IN
31561: NOT
31562: OR
31563: IFFALSE 31567
// exit ;
31565: GO 31621
// for i = 1 to array do
31567: LD_ADDR_VAR 0 4
31571: PUSH
31572: DOUBLE
31573: LD_INT 1
31575: DEC
31576: ST_TO_ADDR
31577: LD_VAR 0 1
31581: PUSH
31582: FOR_TO
31583: IFFALSE 31619
// if value = array [ i ] then
31585: LD_VAR 0 2
31589: PUSH
31590: LD_VAR 0 1
31594: PUSH
31595: LD_VAR 0 4
31599: ARRAY
31600: EQUAL
31601: IFFALSE 31617
// begin result := i ;
31603: LD_ADDR_VAR 0 3
31607: PUSH
31608: LD_VAR 0 4
31612: ST_TO_ADDR
// exit ;
31613: POP
31614: POP
31615: GO 31621
// end ;
31617: GO 31582
31619: POP
31620: POP
// end ;
31621: LD_VAR 0 3
31625: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31626: LD_INT 0
31628: PPUSH
// vc_chassis := chassis ;
31629: LD_ADDR_OWVAR 37
31633: PUSH
31634: LD_VAR 0 1
31638: ST_TO_ADDR
// vc_engine := engine ;
31639: LD_ADDR_OWVAR 39
31643: PUSH
31644: LD_VAR 0 2
31648: ST_TO_ADDR
// vc_control := control ;
31649: LD_ADDR_OWVAR 38
31653: PUSH
31654: LD_VAR 0 3
31658: ST_TO_ADDR
// vc_weapon := weapon ;
31659: LD_ADDR_OWVAR 40
31663: PUSH
31664: LD_VAR 0 4
31668: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31669: LD_ADDR_OWVAR 41
31673: PUSH
31674: LD_VAR 0 5
31678: ST_TO_ADDR
// end ;
31679: LD_VAR 0 6
31683: RET
// export function WantPlant ( unit ) ; var task ; begin
31684: LD_INT 0
31686: PPUSH
31687: PPUSH
// result := false ;
31688: LD_ADDR_VAR 0 2
31692: PUSH
31693: LD_INT 0
31695: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31696: LD_ADDR_VAR 0 3
31700: PUSH
31701: LD_VAR 0 1
31705: PPUSH
31706: CALL_OW 437
31710: ST_TO_ADDR
// if task then
31711: LD_VAR 0 3
31715: IFFALSE 31743
// if task [ 1 ] [ 1 ] = p then
31717: LD_VAR 0 3
31721: PUSH
31722: LD_INT 1
31724: ARRAY
31725: PUSH
31726: LD_INT 1
31728: ARRAY
31729: PUSH
31730: LD_STRING p
31732: EQUAL
31733: IFFALSE 31743
// result := true ;
31735: LD_ADDR_VAR 0 2
31739: PUSH
31740: LD_INT 1
31742: ST_TO_ADDR
// end ;
31743: LD_VAR 0 2
31747: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31748: LD_INT 0
31750: PPUSH
31751: PPUSH
31752: PPUSH
31753: PPUSH
// if pos < 1 then
31754: LD_VAR 0 2
31758: PUSH
31759: LD_INT 1
31761: LESS
31762: IFFALSE 31766
// exit ;
31764: GO 32069
// if pos = 1 then
31766: LD_VAR 0 2
31770: PUSH
31771: LD_INT 1
31773: EQUAL
31774: IFFALSE 31807
// result := Replace ( arr , pos [ 1 ] , value ) else
31776: LD_ADDR_VAR 0 4
31780: PUSH
31781: LD_VAR 0 1
31785: PPUSH
31786: LD_VAR 0 2
31790: PUSH
31791: LD_INT 1
31793: ARRAY
31794: PPUSH
31795: LD_VAR 0 3
31799: PPUSH
31800: CALL_OW 1
31804: ST_TO_ADDR
31805: GO 32069
// begin tmp := arr ;
31807: LD_ADDR_VAR 0 6
31811: PUSH
31812: LD_VAR 0 1
31816: ST_TO_ADDR
// s_arr := [ tmp ] ;
31817: LD_ADDR_VAR 0 7
31821: PUSH
31822: LD_VAR 0 6
31826: PUSH
31827: EMPTY
31828: LIST
31829: ST_TO_ADDR
// for i = 1 to pos - 1 do
31830: LD_ADDR_VAR 0 5
31834: PUSH
31835: DOUBLE
31836: LD_INT 1
31838: DEC
31839: ST_TO_ADDR
31840: LD_VAR 0 2
31844: PUSH
31845: LD_INT 1
31847: MINUS
31848: PUSH
31849: FOR_TO
31850: IFFALSE 31895
// begin tmp := tmp [ pos [ i ] ] ;
31852: LD_ADDR_VAR 0 6
31856: PUSH
31857: LD_VAR 0 6
31861: PUSH
31862: LD_VAR 0 2
31866: PUSH
31867: LD_VAR 0 5
31871: ARRAY
31872: ARRAY
31873: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31874: LD_ADDR_VAR 0 7
31878: PUSH
31879: LD_VAR 0 7
31883: PUSH
31884: LD_VAR 0 6
31888: PUSH
31889: EMPTY
31890: LIST
31891: ADD
31892: ST_TO_ADDR
// end ;
31893: GO 31849
31895: POP
31896: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31897: LD_ADDR_VAR 0 6
31901: PUSH
31902: LD_VAR 0 6
31906: PPUSH
31907: LD_VAR 0 2
31911: PUSH
31912: LD_VAR 0 2
31916: ARRAY
31917: PPUSH
31918: LD_VAR 0 3
31922: PPUSH
31923: CALL_OW 1
31927: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31928: LD_ADDR_VAR 0 7
31932: PUSH
31933: LD_VAR 0 7
31937: PPUSH
31938: LD_VAR 0 7
31942: PPUSH
31943: LD_VAR 0 6
31947: PPUSH
31948: CALL_OW 1
31952: ST_TO_ADDR
// for i = s_arr downto 2 do
31953: LD_ADDR_VAR 0 5
31957: PUSH
31958: DOUBLE
31959: LD_VAR 0 7
31963: INC
31964: ST_TO_ADDR
31965: LD_INT 2
31967: PUSH
31968: FOR_DOWNTO
31969: IFFALSE 32053
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31971: LD_ADDR_VAR 0 6
31975: PUSH
31976: LD_VAR 0 7
31980: PUSH
31981: LD_VAR 0 5
31985: PUSH
31986: LD_INT 1
31988: MINUS
31989: ARRAY
31990: PPUSH
31991: LD_VAR 0 2
31995: PUSH
31996: LD_VAR 0 5
32000: PUSH
32001: LD_INT 1
32003: MINUS
32004: ARRAY
32005: PPUSH
32006: LD_VAR 0 7
32010: PUSH
32011: LD_VAR 0 5
32015: ARRAY
32016: PPUSH
32017: CALL_OW 1
32021: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32022: LD_ADDR_VAR 0 7
32026: PUSH
32027: LD_VAR 0 7
32031: PPUSH
32032: LD_VAR 0 5
32036: PUSH
32037: LD_INT 1
32039: MINUS
32040: PPUSH
32041: LD_VAR 0 6
32045: PPUSH
32046: CALL_OW 1
32050: ST_TO_ADDR
// end ;
32051: GO 31968
32053: POP
32054: POP
// result := s_arr [ 1 ] ;
32055: LD_ADDR_VAR 0 4
32059: PUSH
32060: LD_VAR 0 7
32064: PUSH
32065: LD_INT 1
32067: ARRAY
32068: ST_TO_ADDR
// end ; end ;
32069: LD_VAR 0 4
32073: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32074: LD_INT 0
32076: PPUSH
32077: PPUSH
// if not list then
32078: LD_VAR 0 1
32082: NOT
32083: IFFALSE 32087
// exit ;
32085: GO 32178
// i := list [ pos1 ] ;
32087: LD_ADDR_VAR 0 5
32091: PUSH
32092: LD_VAR 0 1
32096: PUSH
32097: LD_VAR 0 2
32101: ARRAY
32102: ST_TO_ADDR
// if not i then
32103: LD_VAR 0 5
32107: NOT
32108: IFFALSE 32112
// exit ;
32110: GO 32178
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32112: LD_ADDR_VAR 0 1
32116: PUSH
32117: LD_VAR 0 1
32121: PPUSH
32122: LD_VAR 0 2
32126: PPUSH
32127: LD_VAR 0 1
32131: PUSH
32132: LD_VAR 0 3
32136: ARRAY
32137: PPUSH
32138: CALL_OW 1
32142: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32143: LD_ADDR_VAR 0 1
32147: PUSH
32148: LD_VAR 0 1
32152: PPUSH
32153: LD_VAR 0 3
32157: PPUSH
32158: LD_VAR 0 5
32162: PPUSH
32163: CALL_OW 1
32167: ST_TO_ADDR
// result := list ;
32168: LD_ADDR_VAR 0 4
32172: PUSH
32173: LD_VAR 0 1
32177: ST_TO_ADDR
// end ;
32178: LD_VAR 0 4
32182: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32183: LD_INT 0
32185: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32186: LD_ADDR_VAR 0 5
32190: PUSH
32191: LD_VAR 0 1
32195: PPUSH
32196: CALL_OW 250
32200: PPUSH
32201: LD_VAR 0 1
32205: PPUSH
32206: CALL_OW 251
32210: PPUSH
32211: LD_VAR 0 2
32215: PPUSH
32216: LD_VAR 0 3
32220: PPUSH
32221: LD_VAR 0 4
32225: PPUSH
32226: CALL 32236 0 5
32230: ST_TO_ADDR
// end ;
32231: LD_VAR 0 5
32235: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32236: LD_INT 0
32238: PPUSH
32239: PPUSH
32240: PPUSH
32241: PPUSH
// if not list then
32242: LD_VAR 0 3
32246: NOT
32247: IFFALSE 32251
// exit ;
32249: GO 32639
// result := [ ] ;
32251: LD_ADDR_VAR 0 6
32255: PUSH
32256: EMPTY
32257: ST_TO_ADDR
// for i in list do
32258: LD_ADDR_VAR 0 7
32262: PUSH
32263: LD_VAR 0 3
32267: PUSH
32268: FOR_IN
32269: IFFALSE 32471
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32271: LD_ADDR_VAR 0 9
32275: PUSH
32276: LD_VAR 0 7
32280: PPUSH
32281: LD_VAR 0 1
32285: PPUSH
32286: LD_VAR 0 2
32290: PPUSH
32291: CALL_OW 297
32295: ST_TO_ADDR
// if not result then
32296: LD_VAR 0 6
32300: NOT
32301: IFFALSE 32327
// result := [ [ i , tmp ] ] else
32303: LD_ADDR_VAR 0 6
32307: PUSH
32308: LD_VAR 0 7
32312: PUSH
32313: LD_VAR 0 9
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: EMPTY
32323: LIST
32324: ST_TO_ADDR
32325: GO 32469
// begin if result [ result ] [ 2 ] < tmp then
32327: LD_VAR 0 6
32331: PUSH
32332: LD_VAR 0 6
32336: ARRAY
32337: PUSH
32338: LD_INT 2
32340: ARRAY
32341: PUSH
32342: LD_VAR 0 9
32346: LESS
32347: IFFALSE 32389
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32349: LD_ADDR_VAR 0 6
32353: PUSH
32354: LD_VAR 0 6
32358: PPUSH
32359: LD_VAR 0 6
32363: PUSH
32364: LD_INT 1
32366: PLUS
32367: PPUSH
32368: LD_VAR 0 7
32372: PUSH
32373: LD_VAR 0 9
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: PPUSH
32382: CALL_OW 2
32386: ST_TO_ADDR
32387: GO 32469
// for j = 1 to result do
32389: LD_ADDR_VAR 0 8
32393: PUSH
32394: DOUBLE
32395: LD_INT 1
32397: DEC
32398: ST_TO_ADDR
32399: LD_VAR 0 6
32403: PUSH
32404: FOR_TO
32405: IFFALSE 32467
// begin if tmp < result [ j ] [ 2 ] then
32407: LD_VAR 0 9
32411: PUSH
32412: LD_VAR 0 6
32416: PUSH
32417: LD_VAR 0 8
32421: ARRAY
32422: PUSH
32423: LD_INT 2
32425: ARRAY
32426: LESS
32427: IFFALSE 32465
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32429: LD_ADDR_VAR 0 6
32433: PUSH
32434: LD_VAR 0 6
32438: PPUSH
32439: LD_VAR 0 8
32443: PPUSH
32444: LD_VAR 0 7
32448: PUSH
32449: LD_VAR 0 9
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PPUSH
32458: CALL_OW 2
32462: ST_TO_ADDR
// break ;
32463: GO 32467
// end ; end ;
32465: GO 32404
32467: POP
32468: POP
// end ; end ;
32469: GO 32268
32471: POP
32472: POP
// if result and not asc then
32473: LD_VAR 0 6
32477: PUSH
32478: LD_VAR 0 4
32482: NOT
32483: AND
32484: IFFALSE 32559
// begin tmp := result ;
32486: LD_ADDR_VAR 0 9
32490: PUSH
32491: LD_VAR 0 6
32495: ST_TO_ADDR
// for i = tmp downto 1 do
32496: LD_ADDR_VAR 0 7
32500: PUSH
32501: DOUBLE
32502: LD_VAR 0 9
32506: INC
32507: ST_TO_ADDR
32508: LD_INT 1
32510: PUSH
32511: FOR_DOWNTO
32512: IFFALSE 32557
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32514: LD_ADDR_VAR 0 6
32518: PUSH
32519: LD_VAR 0 6
32523: PPUSH
32524: LD_VAR 0 9
32528: PUSH
32529: LD_VAR 0 7
32533: MINUS
32534: PUSH
32535: LD_INT 1
32537: PLUS
32538: PPUSH
32539: LD_VAR 0 9
32543: PUSH
32544: LD_VAR 0 7
32548: ARRAY
32549: PPUSH
32550: CALL_OW 1
32554: ST_TO_ADDR
32555: GO 32511
32557: POP
32558: POP
// end ; tmp := [ ] ;
32559: LD_ADDR_VAR 0 9
32563: PUSH
32564: EMPTY
32565: ST_TO_ADDR
// if mode then
32566: LD_VAR 0 5
32570: IFFALSE 32639
// begin for i = 1 to result do
32572: LD_ADDR_VAR 0 7
32576: PUSH
32577: DOUBLE
32578: LD_INT 1
32580: DEC
32581: ST_TO_ADDR
32582: LD_VAR 0 6
32586: PUSH
32587: FOR_TO
32588: IFFALSE 32627
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32590: LD_ADDR_VAR 0 9
32594: PUSH
32595: LD_VAR 0 9
32599: PPUSH
32600: LD_VAR 0 7
32604: PPUSH
32605: LD_VAR 0 6
32609: PUSH
32610: LD_VAR 0 7
32614: ARRAY
32615: PUSH
32616: LD_INT 1
32618: ARRAY
32619: PPUSH
32620: CALL_OW 1
32624: ST_TO_ADDR
32625: GO 32587
32627: POP
32628: POP
// result := tmp ;
32629: LD_ADDR_VAR 0 6
32633: PUSH
32634: LD_VAR 0 9
32638: ST_TO_ADDR
// end ; end ;
32639: LD_VAR 0 6
32643: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32644: LD_INT 0
32646: PPUSH
32647: PPUSH
32648: PPUSH
32649: PPUSH
32650: PPUSH
32651: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32652: LD_ADDR_VAR 0 5
32656: PUSH
32657: LD_INT 0
32659: PUSH
32660: LD_INT 0
32662: PUSH
32663: LD_INT 0
32665: PUSH
32666: EMPTY
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: ST_TO_ADDR
// if not x or not y then
32674: LD_VAR 0 2
32678: NOT
32679: PUSH
32680: LD_VAR 0 3
32684: NOT
32685: OR
32686: IFFALSE 32690
// exit ;
32688: GO 34336
// if not range then
32690: LD_VAR 0 4
32694: NOT
32695: IFFALSE 32705
// range := 10 ;
32697: LD_ADDR_VAR 0 4
32701: PUSH
32702: LD_INT 10
32704: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32705: LD_ADDR_VAR 0 8
32709: PUSH
32710: LD_INT 81
32712: PUSH
32713: LD_VAR 0 1
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 92
32724: PUSH
32725: LD_VAR 0 2
32729: PUSH
32730: LD_VAR 0 3
32734: PUSH
32735: LD_VAR 0 4
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 3
32748: PUSH
32749: LD_INT 21
32751: PUSH
32752: LD_INT 3
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: LIST
32767: PPUSH
32768: CALL_OW 69
32772: ST_TO_ADDR
// if not tmp then
32773: LD_VAR 0 8
32777: NOT
32778: IFFALSE 32782
// exit ;
32780: GO 34336
// for i in tmp do
32782: LD_ADDR_VAR 0 6
32786: PUSH
32787: LD_VAR 0 8
32791: PUSH
32792: FOR_IN
32793: IFFALSE 34311
// begin points := [ 0 , 0 , 0 ] ;
32795: LD_ADDR_VAR 0 9
32799: PUSH
32800: LD_INT 0
32802: PUSH
32803: LD_INT 0
32805: PUSH
32806: LD_INT 0
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: LIST
32813: ST_TO_ADDR
// bpoints := 1 ;
32814: LD_ADDR_VAR 0 10
32818: PUSH
32819: LD_INT 1
32821: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32822: LD_VAR 0 6
32826: PPUSH
32827: CALL_OW 247
32831: PUSH
32832: LD_INT 1
32834: DOUBLE
32835: EQUAL
32836: IFTRUE 32840
32838: GO 33418
32840: POP
// begin if GetClass ( i ) = 1 then
32841: LD_VAR 0 6
32845: PPUSH
32846: CALL_OW 257
32850: PUSH
32851: LD_INT 1
32853: EQUAL
32854: IFFALSE 32875
// points := [ 10 , 5 , 3 ] ;
32856: LD_ADDR_VAR 0 9
32860: PUSH
32861: LD_INT 10
32863: PUSH
32864: LD_INT 5
32866: PUSH
32867: LD_INT 3
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: LIST
32874: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32875: LD_VAR 0 6
32879: PPUSH
32880: CALL_OW 257
32884: PUSH
32885: LD_INT 2
32887: PUSH
32888: LD_INT 3
32890: PUSH
32891: LD_INT 4
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: LIST
32898: IN
32899: IFFALSE 32920
// points := [ 3 , 2 , 1 ] ;
32901: LD_ADDR_VAR 0 9
32905: PUSH
32906: LD_INT 3
32908: PUSH
32909: LD_INT 2
32911: PUSH
32912: LD_INT 1
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: LIST
32919: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32920: LD_VAR 0 6
32924: PPUSH
32925: CALL_OW 257
32929: PUSH
32930: LD_INT 5
32932: EQUAL
32933: IFFALSE 32954
// points := [ 130 , 5 , 2 ] ;
32935: LD_ADDR_VAR 0 9
32939: PUSH
32940: LD_INT 130
32942: PUSH
32943: LD_INT 5
32945: PUSH
32946: LD_INT 2
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: LIST
32953: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32954: LD_VAR 0 6
32958: PPUSH
32959: CALL_OW 257
32963: PUSH
32964: LD_INT 8
32966: EQUAL
32967: IFFALSE 32988
// points := [ 35 , 35 , 30 ] ;
32969: LD_ADDR_VAR 0 9
32973: PUSH
32974: LD_INT 35
32976: PUSH
32977: LD_INT 35
32979: PUSH
32980: LD_INT 30
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: LIST
32987: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32988: LD_VAR 0 6
32992: PPUSH
32993: CALL_OW 257
32997: PUSH
32998: LD_INT 9
33000: EQUAL
33001: IFFALSE 33022
// points := [ 20 , 55 , 40 ] ;
33003: LD_ADDR_VAR 0 9
33007: PUSH
33008: LD_INT 20
33010: PUSH
33011: LD_INT 55
33013: PUSH
33014: LD_INT 40
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: LIST
33021: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33022: LD_VAR 0 6
33026: PPUSH
33027: CALL_OW 257
33031: PUSH
33032: LD_INT 12
33034: PUSH
33035: LD_INT 16
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: IN
33042: IFFALSE 33063
// points := [ 5 , 3 , 2 ] ;
33044: LD_ADDR_VAR 0 9
33048: PUSH
33049: LD_INT 5
33051: PUSH
33052: LD_INT 3
33054: PUSH
33055: LD_INT 2
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: LIST
33062: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33063: LD_VAR 0 6
33067: PPUSH
33068: CALL_OW 257
33072: PUSH
33073: LD_INT 17
33075: EQUAL
33076: IFFALSE 33097
// points := [ 100 , 50 , 75 ] ;
33078: LD_ADDR_VAR 0 9
33082: PUSH
33083: LD_INT 100
33085: PUSH
33086: LD_INT 50
33088: PUSH
33089: LD_INT 75
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: LIST
33096: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33097: LD_VAR 0 6
33101: PPUSH
33102: CALL_OW 257
33106: PUSH
33107: LD_INT 15
33109: EQUAL
33110: IFFALSE 33131
// points := [ 10 , 5 , 3 ] ;
33112: LD_ADDR_VAR 0 9
33116: PUSH
33117: LD_INT 10
33119: PUSH
33120: LD_INT 5
33122: PUSH
33123: LD_INT 3
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: LIST
33130: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33131: LD_VAR 0 6
33135: PPUSH
33136: CALL_OW 257
33140: PUSH
33141: LD_INT 14
33143: EQUAL
33144: IFFALSE 33165
// points := [ 10 , 0 , 0 ] ;
33146: LD_ADDR_VAR 0 9
33150: PUSH
33151: LD_INT 10
33153: PUSH
33154: LD_INT 0
33156: PUSH
33157: LD_INT 0
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: LIST
33164: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33165: LD_VAR 0 6
33169: PPUSH
33170: CALL_OW 257
33174: PUSH
33175: LD_INT 11
33177: EQUAL
33178: IFFALSE 33199
// points := [ 30 , 10 , 5 ] ;
33180: LD_ADDR_VAR 0 9
33184: PUSH
33185: LD_INT 30
33187: PUSH
33188: LD_INT 10
33190: PUSH
33191: LD_INT 5
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: LIST
33198: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33199: LD_VAR 0 1
33203: PPUSH
33204: LD_INT 5
33206: PPUSH
33207: CALL_OW 321
33211: PUSH
33212: LD_INT 2
33214: EQUAL
33215: IFFALSE 33232
// bpoints := bpoints * 1.8 ;
33217: LD_ADDR_VAR 0 10
33221: PUSH
33222: LD_VAR 0 10
33226: PUSH
33227: LD_REAL  1.80000000000000E+0000
33230: MUL
33231: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33232: LD_VAR 0 6
33236: PPUSH
33237: CALL_OW 257
33241: PUSH
33242: LD_INT 1
33244: PUSH
33245: LD_INT 2
33247: PUSH
33248: LD_INT 3
33250: PUSH
33251: LD_INT 4
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: IN
33260: PUSH
33261: LD_VAR 0 1
33265: PPUSH
33266: LD_INT 51
33268: PPUSH
33269: CALL_OW 321
33273: PUSH
33274: LD_INT 2
33276: EQUAL
33277: AND
33278: IFFALSE 33295
// bpoints := bpoints * 1.2 ;
33280: LD_ADDR_VAR 0 10
33284: PUSH
33285: LD_VAR 0 10
33289: PUSH
33290: LD_REAL  1.20000000000000E+0000
33293: MUL
33294: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33295: LD_VAR 0 6
33299: PPUSH
33300: CALL_OW 257
33304: PUSH
33305: LD_INT 5
33307: PUSH
33308: LD_INT 7
33310: PUSH
33311: LD_INT 9
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: LIST
33318: IN
33319: PUSH
33320: LD_VAR 0 1
33324: PPUSH
33325: LD_INT 52
33327: PPUSH
33328: CALL_OW 321
33332: PUSH
33333: LD_INT 2
33335: EQUAL
33336: AND
33337: IFFALSE 33354
// bpoints := bpoints * 1.5 ;
33339: LD_ADDR_VAR 0 10
33343: PUSH
33344: LD_VAR 0 10
33348: PUSH
33349: LD_REAL  1.50000000000000E+0000
33352: MUL
33353: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33354: LD_VAR 0 1
33358: PPUSH
33359: LD_INT 66
33361: PPUSH
33362: CALL_OW 321
33366: PUSH
33367: LD_INT 2
33369: EQUAL
33370: IFFALSE 33387
// bpoints := bpoints * 1.1 ;
33372: LD_ADDR_VAR 0 10
33376: PUSH
33377: LD_VAR 0 10
33381: PUSH
33382: LD_REAL  1.10000000000000E+0000
33385: MUL
33386: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33387: LD_ADDR_VAR 0 10
33391: PUSH
33392: LD_VAR 0 10
33396: PUSH
33397: LD_VAR 0 6
33401: PPUSH
33402: LD_INT 1
33404: PPUSH
33405: CALL_OW 259
33409: PUSH
33410: LD_REAL  1.15000000000000E+0000
33413: MUL
33414: MUL
33415: ST_TO_ADDR
// end ; unit_vehicle :
33416: GO 34240
33418: LD_INT 2
33420: DOUBLE
33421: EQUAL
33422: IFTRUE 33426
33424: GO 34228
33426: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33427: LD_VAR 0 6
33431: PPUSH
33432: CALL_OW 264
33436: PUSH
33437: LD_INT 2
33439: PUSH
33440: LD_INT 42
33442: PUSH
33443: LD_INT 24
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: LIST
33450: IN
33451: IFFALSE 33472
// points := [ 25 , 5 , 3 ] ;
33453: LD_ADDR_VAR 0 9
33457: PUSH
33458: LD_INT 25
33460: PUSH
33461: LD_INT 5
33463: PUSH
33464: LD_INT 3
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: LIST
33471: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33472: LD_VAR 0 6
33476: PPUSH
33477: CALL_OW 264
33481: PUSH
33482: LD_INT 4
33484: PUSH
33485: LD_INT 43
33487: PUSH
33488: LD_INT 25
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: LIST
33495: IN
33496: IFFALSE 33517
// points := [ 40 , 15 , 5 ] ;
33498: LD_ADDR_VAR 0 9
33502: PUSH
33503: LD_INT 40
33505: PUSH
33506: LD_INT 15
33508: PUSH
33509: LD_INT 5
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: LIST
33516: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33517: LD_VAR 0 6
33521: PPUSH
33522: CALL_OW 264
33526: PUSH
33527: LD_INT 3
33529: PUSH
33530: LD_INT 23
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: IN
33537: IFFALSE 33558
// points := [ 7 , 25 , 8 ] ;
33539: LD_ADDR_VAR 0 9
33543: PUSH
33544: LD_INT 7
33546: PUSH
33547: LD_INT 25
33549: PUSH
33550: LD_INT 8
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: LIST
33557: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33558: LD_VAR 0 6
33562: PPUSH
33563: CALL_OW 264
33567: PUSH
33568: LD_INT 5
33570: PUSH
33571: LD_INT 27
33573: PUSH
33574: LD_INT 44
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: LIST
33581: IN
33582: IFFALSE 33603
// points := [ 14 , 50 , 16 ] ;
33584: LD_ADDR_VAR 0 9
33588: PUSH
33589: LD_INT 14
33591: PUSH
33592: LD_INT 50
33594: PUSH
33595: LD_INT 16
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: LIST
33602: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33603: LD_VAR 0 6
33607: PPUSH
33608: CALL_OW 264
33612: PUSH
33613: LD_INT 6
33615: PUSH
33616: LD_INT 46
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: IN
33623: IFFALSE 33644
// points := [ 32 , 120 , 70 ] ;
33625: LD_ADDR_VAR 0 9
33629: PUSH
33630: LD_INT 32
33632: PUSH
33633: LD_INT 120
33635: PUSH
33636: LD_INT 70
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: LIST
33643: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
33644: LD_VAR 0 6
33648: PPUSH
33649: CALL_OW 264
33653: PUSH
33654: LD_INT 7
33656: PUSH
33657: LD_INT 28
33659: PUSH
33660: LD_INT 45
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: LIST
33667: IN
33668: IFFALSE 33689
// points := [ 35 , 20 , 45 ] ;
33670: LD_ADDR_VAR 0 9
33674: PUSH
33675: LD_INT 35
33677: PUSH
33678: LD_INT 20
33680: PUSH
33681: LD_INT 45
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: LIST
33688: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33689: LD_VAR 0 6
33693: PPUSH
33694: CALL_OW 264
33698: PUSH
33699: LD_INT 47
33701: PUSH
33702: EMPTY
33703: LIST
33704: IN
33705: IFFALSE 33726
// points := [ 67 , 45 , 75 ] ;
33707: LD_ADDR_VAR 0 9
33711: PUSH
33712: LD_INT 67
33714: PUSH
33715: LD_INT 45
33717: PUSH
33718: LD_INT 75
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: LIST
33725: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33726: LD_VAR 0 6
33730: PPUSH
33731: CALL_OW 264
33735: PUSH
33736: LD_INT 26
33738: PUSH
33739: EMPTY
33740: LIST
33741: IN
33742: IFFALSE 33763
// points := [ 120 , 30 , 80 ] ;
33744: LD_ADDR_VAR 0 9
33748: PUSH
33749: LD_INT 120
33751: PUSH
33752: LD_INT 30
33754: PUSH
33755: LD_INT 80
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: LIST
33762: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33763: LD_VAR 0 6
33767: PPUSH
33768: CALL_OW 264
33772: PUSH
33773: LD_INT 22
33775: PUSH
33776: EMPTY
33777: LIST
33778: IN
33779: IFFALSE 33800
// points := [ 40 , 1 , 1 ] ;
33781: LD_ADDR_VAR 0 9
33785: PUSH
33786: LD_INT 40
33788: PUSH
33789: LD_INT 1
33791: PUSH
33792: LD_INT 1
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: LIST
33799: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33800: LD_VAR 0 6
33804: PPUSH
33805: CALL_OW 264
33809: PUSH
33810: LD_INT 29
33812: PUSH
33813: EMPTY
33814: LIST
33815: IN
33816: IFFALSE 33837
// points := [ 70 , 200 , 400 ] ;
33818: LD_ADDR_VAR 0 9
33822: PUSH
33823: LD_INT 70
33825: PUSH
33826: LD_INT 200
33828: PUSH
33829: LD_INT 400
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: LIST
33836: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33837: LD_VAR 0 6
33841: PPUSH
33842: CALL_OW 264
33846: PUSH
33847: LD_INT 14
33849: PUSH
33850: LD_INT 53
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: IN
33857: IFFALSE 33878
// points := [ 40 , 10 , 20 ] ;
33859: LD_ADDR_VAR 0 9
33863: PUSH
33864: LD_INT 40
33866: PUSH
33867: LD_INT 10
33869: PUSH
33870: LD_INT 20
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: LIST
33877: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33878: LD_VAR 0 6
33882: PPUSH
33883: CALL_OW 264
33887: PUSH
33888: LD_INT 9
33890: PUSH
33891: EMPTY
33892: LIST
33893: IN
33894: IFFALSE 33915
// points := [ 5 , 70 , 20 ] ;
33896: LD_ADDR_VAR 0 9
33900: PUSH
33901: LD_INT 5
33903: PUSH
33904: LD_INT 70
33906: PUSH
33907: LD_INT 20
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: LIST
33914: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33915: LD_VAR 0 6
33919: PPUSH
33920: CALL_OW 264
33924: PUSH
33925: LD_INT 10
33927: PUSH
33928: EMPTY
33929: LIST
33930: IN
33931: IFFALSE 33952
// points := [ 35 , 110 , 70 ] ;
33933: LD_ADDR_VAR 0 9
33937: PUSH
33938: LD_INT 35
33940: PUSH
33941: LD_INT 110
33943: PUSH
33944: LD_INT 70
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: LIST
33951: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33952: LD_VAR 0 6
33956: PPUSH
33957: CALL_OW 265
33961: PUSH
33962: LD_INT 25
33964: EQUAL
33965: IFFALSE 33986
// points := [ 80 , 65 , 100 ] ;
33967: LD_ADDR_VAR 0 9
33971: PUSH
33972: LD_INT 80
33974: PUSH
33975: LD_INT 65
33977: PUSH
33978: LD_INT 100
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: LIST
33985: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33986: LD_VAR 0 6
33990: PPUSH
33991: CALL_OW 263
33995: PUSH
33996: LD_INT 1
33998: EQUAL
33999: IFFALSE 34034
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34001: LD_ADDR_VAR 0 10
34005: PUSH
34006: LD_VAR 0 10
34010: PUSH
34011: LD_VAR 0 6
34015: PPUSH
34016: CALL_OW 311
34020: PPUSH
34021: LD_INT 3
34023: PPUSH
34024: CALL_OW 259
34028: PUSH
34029: LD_INT 4
34031: MUL
34032: MUL
34033: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34034: LD_VAR 0 6
34038: PPUSH
34039: CALL_OW 263
34043: PUSH
34044: LD_INT 2
34046: EQUAL
34047: IFFALSE 34098
// begin j := IsControledBy ( i ) ;
34049: LD_ADDR_VAR 0 7
34053: PUSH
34054: LD_VAR 0 6
34058: PPUSH
34059: CALL_OW 312
34063: ST_TO_ADDR
// if j then
34064: LD_VAR 0 7
34068: IFFALSE 34098
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34070: LD_ADDR_VAR 0 10
34074: PUSH
34075: LD_VAR 0 10
34079: PUSH
34080: LD_VAR 0 7
34084: PPUSH
34085: LD_INT 3
34087: PPUSH
34088: CALL_OW 259
34092: PUSH
34093: LD_INT 3
34095: MUL
34096: MUL
34097: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34098: LD_VAR 0 6
34102: PPUSH
34103: CALL_OW 264
34107: PUSH
34108: LD_INT 5
34110: PUSH
34111: LD_INT 6
34113: PUSH
34114: LD_INT 46
34116: PUSH
34117: LD_INT 44
34119: PUSH
34120: LD_INT 47
34122: PUSH
34123: LD_INT 45
34125: PUSH
34126: LD_INT 28
34128: PUSH
34129: LD_INT 7
34131: PUSH
34132: LD_INT 27
34134: PUSH
34135: LD_INT 29
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: IN
34150: PUSH
34151: LD_VAR 0 1
34155: PPUSH
34156: LD_INT 52
34158: PPUSH
34159: CALL_OW 321
34163: PUSH
34164: LD_INT 2
34166: EQUAL
34167: AND
34168: IFFALSE 34185
// bpoints := bpoints * 1.2 ;
34170: LD_ADDR_VAR 0 10
34174: PUSH
34175: LD_VAR 0 10
34179: PUSH
34180: LD_REAL  1.20000000000000E+0000
34183: MUL
34184: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34185: LD_VAR 0 6
34189: PPUSH
34190: CALL_OW 264
34194: PUSH
34195: LD_INT 6
34197: PUSH
34198: LD_INT 46
34200: PUSH
34201: LD_INT 47
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: LIST
34208: IN
34209: IFFALSE 34226
// bpoints := bpoints * 1.2 ;
34211: LD_ADDR_VAR 0 10
34215: PUSH
34216: LD_VAR 0 10
34220: PUSH
34221: LD_REAL  1.20000000000000E+0000
34224: MUL
34225: ST_TO_ADDR
// end ; unit_building :
34226: GO 34240
34228: LD_INT 3
34230: DOUBLE
34231: EQUAL
34232: IFTRUE 34236
34234: GO 34239
34236: POP
// ; end ;
34237: GO 34240
34239: POP
// for j = 1 to 3 do
34240: LD_ADDR_VAR 0 7
34244: PUSH
34245: DOUBLE
34246: LD_INT 1
34248: DEC
34249: ST_TO_ADDR
34250: LD_INT 3
34252: PUSH
34253: FOR_TO
34254: IFFALSE 34307
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34256: LD_ADDR_VAR 0 5
34260: PUSH
34261: LD_VAR 0 5
34265: PPUSH
34266: LD_VAR 0 7
34270: PPUSH
34271: LD_VAR 0 5
34275: PUSH
34276: LD_VAR 0 7
34280: ARRAY
34281: PUSH
34282: LD_VAR 0 9
34286: PUSH
34287: LD_VAR 0 7
34291: ARRAY
34292: PUSH
34293: LD_VAR 0 10
34297: MUL
34298: PLUS
34299: PPUSH
34300: CALL_OW 1
34304: ST_TO_ADDR
34305: GO 34253
34307: POP
34308: POP
// end ;
34309: GO 32792
34311: POP
34312: POP
// result := Replace ( result , 4 , tmp ) ;
34313: LD_ADDR_VAR 0 5
34317: PUSH
34318: LD_VAR 0 5
34322: PPUSH
34323: LD_INT 4
34325: PPUSH
34326: LD_VAR 0 8
34330: PPUSH
34331: CALL_OW 1
34335: ST_TO_ADDR
// end ;
34336: LD_VAR 0 5
34340: RET
// export function DangerAtRange ( unit , range ) ; begin
34341: LD_INT 0
34343: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34344: LD_ADDR_VAR 0 3
34348: PUSH
34349: LD_VAR 0 1
34353: PPUSH
34354: CALL_OW 255
34358: PPUSH
34359: LD_VAR 0 1
34363: PPUSH
34364: CALL_OW 250
34368: PPUSH
34369: LD_VAR 0 1
34373: PPUSH
34374: CALL_OW 251
34378: PPUSH
34379: LD_VAR 0 2
34383: PPUSH
34384: CALL 32644 0 4
34388: ST_TO_ADDR
// end ;
34389: LD_VAR 0 3
34393: RET
// export function DangerInArea ( side , area ) ; begin
34394: LD_INT 0
34396: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34397: LD_ADDR_VAR 0 3
34401: PUSH
34402: LD_VAR 0 2
34406: PPUSH
34407: LD_INT 81
34409: PUSH
34410: LD_VAR 0 1
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PPUSH
34419: CALL_OW 70
34423: ST_TO_ADDR
// end ;
34424: LD_VAR 0 3
34428: RET
// export function IsExtension ( b ) ; begin
34429: LD_INT 0
34431: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34432: LD_ADDR_VAR 0 2
34436: PUSH
34437: LD_VAR 0 1
34441: PUSH
34442: LD_INT 23
34444: PUSH
34445: LD_INT 20
34447: PUSH
34448: LD_INT 22
34450: PUSH
34451: LD_INT 17
34453: PUSH
34454: LD_INT 24
34456: PUSH
34457: LD_INT 21
34459: PUSH
34460: LD_INT 19
34462: PUSH
34463: LD_INT 16
34465: PUSH
34466: LD_INT 25
34468: PUSH
34469: LD_INT 18
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: IN
34484: ST_TO_ADDR
// end ;
34485: LD_VAR 0 2
34489: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34490: LD_INT 0
34492: PPUSH
34493: PPUSH
34494: PPUSH
// result := [ ] ;
34495: LD_ADDR_VAR 0 4
34499: PUSH
34500: EMPTY
34501: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34502: LD_ADDR_VAR 0 5
34506: PUSH
34507: LD_VAR 0 2
34511: PPUSH
34512: LD_INT 21
34514: PUSH
34515: LD_INT 3
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: PPUSH
34522: CALL_OW 70
34526: ST_TO_ADDR
// if not tmp then
34527: LD_VAR 0 5
34531: NOT
34532: IFFALSE 34536
// exit ;
34534: GO 34600
// if checkLink then
34536: LD_VAR 0 3
34540: IFFALSE 34590
// begin for i in tmp do
34542: LD_ADDR_VAR 0 6
34546: PUSH
34547: LD_VAR 0 5
34551: PUSH
34552: FOR_IN
34553: IFFALSE 34588
// if GetBase ( i ) <> base then
34555: LD_VAR 0 6
34559: PPUSH
34560: CALL_OW 274
34564: PUSH
34565: LD_VAR 0 1
34569: NONEQUAL
34570: IFFALSE 34586
// ComLinkToBase ( base , i ) ;
34572: LD_VAR 0 1
34576: PPUSH
34577: LD_VAR 0 6
34581: PPUSH
34582: CALL_OW 169
34586: GO 34552
34588: POP
34589: POP
// end ; result := tmp ;
34590: LD_ADDR_VAR 0 4
34594: PUSH
34595: LD_VAR 0 5
34599: ST_TO_ADDR
// end ;
34600: LD_VAR 0 4
34604: RET
// export function ComComplete ( units , b ) ; var i ; begin
34605: LD_INT 0
34607: PPUSH
34608: PPUSH
// if not units then
34609: LD_VAR 0 1
34613: NOT
34614: IFFALSE 34618
// exit ;
34616: GO 34708
// for i in units do
34618: LD_ADDR_VAR 0 4
34622: PUSH
34623: LD_VAR 0 1
34627: PUSH
34628: FOR_IN
34629: IFFALSE 34706
// if BuildingStatus ( b ) = bs_build then
34631: LD_VAR 0 2
34635: PPUSH
34636: CALL_OW 461
34640: PUSH
34641: LD_INT 1
34643: EQUAL
34644: IFFALSE 34704
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34646: LD_VAR 0 4
34650: PPUSH
34651: LD_STRING h
34653: PUSH
34654: LD_VAR 0 2
34658: PPUSH
34659: CALL_OW 250
34663: PUSH
34664: LD_VAR 0 2
34668: PPUSH
34669: CALL_OW 251
34673: PUSH
34674: LD_VAR 0 2
34678: PUSH
34679: LD_INT 0
34681: PUSH
34682: LD_INT 0
34684: PUSH
34685: LD_INT 0
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: PUSH
34697: EMPTY
34698: LIST
34699: PPUSH
34700: CALL_OW 446
34704: GO 34628
34706: POP
34707: POP
// end ;
34708: LD_VAR 0 3
34712: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34713: LD_INT 0
34715: PPUSH
34716: PPUSH
34717: PPUSH
34718: PPUSH
34719: PPUSH
34720: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
34721: LD_VAR 0 1
34725: NOT
34726: PUSH
34727: LD_VAR 0 1
34731: PPUSH
34732: CALL_OW 263
34736: PUSH
34737: LD_INT 2
34739: EQUAL
34740: NOT
34741: OR
34742: IFFALSE 34746
// exit ;
34744: GO 35062
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34746: LD_ADDR_VAR 0 6
34750: PUSH
34751: LD_INT 22
34753: PUSH
34754: LD_VAR 0 1
34758: PPUSH
34759: CALL_OW 255
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 2
34770: PUSH
34771: LD_INT 30
34773: PUSH
34774: LD_INT 36
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: PUSH
34781: LD_INT 34
34783: PUSH
34784: LD_INT 31
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: LIST
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PPUSH
34800: CALL_OW 69
34804: ST_TO_ADDR
// if not tmp then
34805: LD_VAR 0 6
34809: NOT
34810: IFFALSE 34814
// exit ;
34812: GO 35062
// result := [ ] ;
34814: LD_ADDR_VAR 0 2
34818: PUSH
34819: EMPTY
34820: ST_TO_ADDR
// for i in tmp do
34821: LD_ADDR_VAR 0 3
34825: PUSH
34826: LD_VAR 0 6
34830: PUSH
34831: FOR_IN
34832: IFFALSE 34903
// begin t := UnitsInside ( i ) ;
34834: LD_ADDR_VAR 0 4
34838: PUSH
34839: LD_VAR 0 3
34843: PPUSH
34844: CALL_OW 313
34848: ST_TO_ADDR
// if t then
34849: LD_VAR 0 4
34853: IFFALSE 34901
// for j in t do
34855: LD_ADDR_VAR 0 7
34859: PUSH
34860: LD_VAR 0 4
34864: PUSH
34865: FOR_IN
34866: IFFALSE 34899
// result := Insert ( result , result + 1 , j ) ;
34868: LD_ADDR_VAR 0 2
34872: PUSH
34873: LD_VAR 0 2
34877: PPUSH
34878: LD_VAR 0 2
34882: PUSH
34883: LD_INT 1
34885: PLUS
34886: PPUSH
34887: LD_VAR 0 7
34891: PPUSH
34892: CALL_OW 2
34896: ST_TO_ADDR
34897: GO 34865
34899: POP
34900: POP
// end ;
34901: GO 34831
34903: POP
34904: POP
// if not result then
34905: LD_VAR 0 2
34909: NOT
34910: IFFALSE 34914
// exit ;
34912: GO 35062
// mech := result [ 1 ] ;
34914: LD_ADDR_VAR 0 5
34918: PUSH
34919: LD_VAR 0 2
34923: PUSH
34924: LD_INT 1
34926: ARRAY
34927: ST_TO_ADDR
// if result > 1 then
34928: LD_VAR 0 2
34932: PUSH
34933: LD_INT 1
34935: GREATER
34936: IFFALSE 35048
// for i = 2 to result do
34938: LD_ADDR_VAR 0 3
34942: PUSH
34943: DOUBLE
34944: LD_INT 2
34946: DEC
34947: ST_TO_ADDR
34948: LD_VAR 0 2
34952: PUSH
34953: FOR_TO
34954: IFFALSE 35046
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34956: LD_ADDR_VAR 0 4
34960: PUSH
34961: LD_VAR 0 2
34965: PUSH
34966: LD_VAR 0 3
34970: ARRAY
34971: PPUSH
34972: LD_INT 3
34974: PPUSH
34975: CALL_OW 259
34979: PUSH
34980: LD_VAR 0 2
34984: PUSH
34985: LD_VAR 0 3
34989: ARRAY
34990: PPUSH
34991: CALL_OW 432
34995: MINUS
34996: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34997: LD_VAR 0 4
35001: PUSH
35002: LD_VAR 0 5
35006: PPUSH
35007: LD_INT 3
35009: PPUSH
35010: CALL_OW 259
35014: PUSH
35015: LD_VAR 0 5
35019: PPUSH
35020: CALL_OW 432
35024: MINUS
35025: GREATEREQUAL
35026: IFFALSE 35044
// mech := result [ i ] ;
35028: LD_ADDR_VAR 0 5
35032: PUSH
35033: LD_VAR 0 2
35037: PUSH
35038: LD_VAR 0 3
35042: ARRAY
35043: ST_TO_ADDR
// end ;
35044: GO 34953
35046: POP
35047: POP
// ComLinkTo ( vehicle , mech ) ;
35048: LD_VAR 0 1
35052: PPUSH
35053: LD_VAR 0 5
35057: PPUSH
35058: CALL_OW 135
// end ;
35062: LD_VAR 0 2
35066: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35067: LD_INT 0
35069: PPUSH
35070: PPUSH
35071: PPUSH
35072: PPUSH
35073: PPUSH
35074: PPUSH
35075: PPUSH
35076: PPUSH
35077: PPUSH
35078: PPUSH
35079: PPUSH
35080: PPUSH
35081: PPUSH
// result := [ ] ;
35082: LD_ADDR_VAR 0 7
35086: PUSH
35087: EMPTY
35088: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35089: LD_VAR 0 1
35093: PPUSH
35094: CALL_OW 266
35098: PUSH
35099: LD_INT 0
35101: PUSH
35102: LD_INT 1
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: IN
35109: NOT
35110: IFFALSE 35114
// exit ;
35112: GO 36748
// if name then
35114: LD_VAR 0 3
35118: IFFALSE 35134
// SetBName ( base_dep , name ) ;
35120: LD_VAR 0 1
35124: PPUSH
35125: LD_VAR 0 3
35129: PPUSH
35130: CALL_OW 500
// base := GetBase ( base_dep ) ;
35134: LD_ADDR_VAR 0 15
35138: PUSH
35139: LD_VAR 0 1
35143: PPUSH
35144: CALL_OW 274
35148: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35149: LD_ADDR_VAR 0 16
35153: PUSH
35154: LD_VAR 0 1
35158: PPUSH
35159: CALL_OW 255
35163: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35164: LD_ADDR_VAR 0 17
35168: PUSH
35169: LD_VAR 0 1
35173: PPUSH
35174: CALL_OW 248
35178: ST_TO_ADDR
// if sources then
35179: LD_VAR 0 5
35183: IFFALSE 35230
// for i = 1 to 3 do
35185: LD_ADDR_VAR 0 8
35189: PUSH
35190: DOUBLE
35191: LD_INT 1
35193: DEC
35194: ST_TO_ADDR
35195: LD_INT 3
35197: PUSH
35198: FOR_TO
35199: IFFALSE 35228
// AddResourceType ( base , i , sources [ i ] ) ;
35201: LD_VAR 0 15
35205: PPUSH
35206: LD_VAR 0 8
35210: PPUSH
35211: LD_VAR 0 5
35215: PUSH
35216: LD_VAR 0 8
35220: ARRAY
35221: PPUSH
35222: CALL_OW 276
35226: GO 35198
35228: POP
35229: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35230: LD_ADDR_VAR 0 18
35234: PUSH
35235: LD_VAR 0 15
35239: PPUSH
35240: LD_VAR 0 2
35244: PPUSH
35245: LD_INT 1
35247: PPUSH
35248: CALL 34490 0 3
35252: ST_TO_ADDR
// InitHc ;
35253: CALL_OW 19
// InitUc ;
35257: CALL_OW 18
// uc_side := side ;
35261: LD_ADDR_OWVAR 20
35265: PUSH
35266: LD_VAR 0 16
35270: ST_TO_ADDR
// uc_nation := nation ;
35271: LD_ADDR_OWVAR 21
35275: PUSH
35276: LD_VAR 0 17
35280: ST_TO_ADDR
// if buildings then
35281: LD_VAR 0 18
35285: IFFALSE 36607
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35287: LD_ADDR_VAR 0 19
35291: PUSH
35292: LD_VAR 0 18
35296: PPUSH
35297: LD_INT 2
35299: PUSH
35300: LD_INT 30
35302: PUSH
35303: LD_INT 29
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: LD_INT 30
35312: PUSH
35313: LD_INT 30
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: LIST
35324: PPUSH
35325: CALL_OW 72
35329: ST_TO_ADDR
// if tmp then
35330: LD_VAR 0 19
35334: IFFALSE 35382
// for i in tmp do
35336: LD_ADDR_VAR 0 8
35340: PUSH
35341: LD_VAR 0 19
35345: PUSH
35346: FOR_IN
35347: IFFALSE 35380
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35349: LD_VAR 0 8
35353: PPUSH
35354: CALL_OW 250
35358: PPUSH
35359: LD_VAR 0 8
35363: PPUSH
35364: CALL_OW 251
35368: PPUSH
35369: LD_VAR 0 16
35373: PPUSH
35374: CALL_OW 441
35378: GO 35346
35380: POP
35381: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35382: LD_VAR 0 18
35386: PPUSH
35387: LD_INT 2
35389: PUSH
35390: LD_INT 30
35392: PUSH
35393: LD_INT 32
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: LD_INT 30
35402: PUSH
35403: LD_INT 33
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: LIST
35414: PPUSH
35415: CALL_OW 72
35419: IFFALSE 35507
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35421: LD_ADDR_VAR 0 8
35425: PUSH
35426: LD_VAR 0 18
35430: PPUSH
35431: LD_INT 2
35433: PUSH
35434: LD_INT 30
35436: PUSH
35437: LD_INT 32
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 30
35446: PUSH
35447: LD_INT 33
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: LIST
35458: PPUSH
35459: CALL_OW 72
35463: PUSH
35464: FOR_IN
35465: IFFALSE 35505
// begin if not GetBWeapon ( i ) then
35467: LD_VAR 0 8
35471: PPUSH
35472: CALL_OW 269
35476: NOT
35477: IFFALSE 35503
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35479: LD_VAR 0 8
35483: PPUSH
35484: LD_VAR 0 8
35488: PPUSH
35489: LD_VAR 0 2
35493: PPUSH
35494: CALL 36753 0 2
35498: PPUSH
35499: CALL_OW 431
// end ;
35503: GO 35464
35505: POP
35506: POP
// end ; for i = 1 to personel do
35507: LD_ADDR_VAR 0 8
35511: PUSH
35512: DOUBLE
35513: LD_INT 1
35515: DEC
35516: ST_TO_ADDR
35517: LD_VAR 0 6
35521: PUSH
35522: FOR_TO
35523: IFFALSE 36587
// begin if i > 4 then
35525: LD_VAR 0 8
35529: PUSH
35530: LD_INT 4
35532: GREATER
35533: IFFALSE 35537
// break ;
35535: GO 36587
// case i of 1 :
35537: LD_VAR 0 8
35541: PUSH
35542: LD_INT 1
35544: DOUBLE
35545: EQUAL
35546: IFTRUE 35550
35548: GO 35630
35550: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35551: LD_ADDR_VAR 0 12
35555: PUSH
35556: LD_VAR 0 18
35560: PPUSH
35561: LD_INT 22
35563: PUSH
35564: LD_VAR 0 16
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 58
35575: PUSH
35576: EMPTY
35577: LIST
35578: PUSH
35579: LD_INT 2
35581: PUSH
35582: LD_INT 30
35584: PUSH
35585: LD_INT 32
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: LD_INT 30
35594: PUSH
35595: LD_INT 4
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: PUSH
35602: LD_INT 30
35604: PUSH
35605: LD_INT 5
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: LIST
35622: PPUSH
35623: CALL_OW 72
35627: ST_TO_ADDR
35628: GO 35852
35630: LD_INT 2
35632: DOUBLE
35633: EQUAL
35634: IFTRUE 35638
35636: GO 35700
35638: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35639: LD_ADDR_VAR 0 12
35643: PUSH
35644: LD_VAR 0 18
35648: PPUSH
35649: LD_INT 22
35651: PUSH
35652: LD_VAR 0 16
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: LD_INT 2
35663: PUSH
35664: LD_INT 30
35666: PUSH
35667: LD_INT 0
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: PUSH
35674: LD_INT 30
35676: PUSH
35677: LD_INT 1
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: LIST
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PPUSH
35693: CALL_OW 72
35697: ST_TO_ADDR
35698: GO 35852
35700: LD_INT 3
35702: DOUBLE
35703: EQUAL
35704: IFTRUE 35708
35706: GO 35770
35708: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35709: LD_ADDR_VAR 0 12
35713: PUSH
35714: LD_VAR 0 18
35718: PPUSH
35719: LD_INT 22
35721: PUSH
35722: LD_VAR 0 16
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: LD_INT 2
35733: PUSH
35734: LD_INT 30
35736: PUSH
35737: LD_INT 2
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: PUSH
35744: LD_INT 30
35746: PUSH
35747: LD_INT 3
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: LIST
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PPUSH
35763: CALL_OW 72
35767: ST_TO_ADDR
35768: GO 35852
35770: LD_INT 4
35772: DOUBLE
35773: EQUAL
35774: IFTRUE 35778
35776: GO 35851
35778: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35779: LD_ADDR_VAR 0 12
35783: PUSH
35784: LD_VAR 0 18
35788: PPUSH
35789: LD_INT 22
35791: PUSH
35792: LD_VAR 0 16
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: LD_INT 2
35803: PUSH
35804: LD_INT 30
35806: PUSH
35807: LD_INT 6
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: LD_INT 30
35816: PUSH
35817: LD_INT 7
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: PUSH
35824: LD_INT 30
35826: PUSH
35827: LD_INT 8
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: PPUSH
35844: CALL_OW 72
35848: ST_TO_ADDR
35849: GO 35852
35851: POP
// if i = 1 then
35852: LD_VAR 0 8
35856: PUSH
35857: LD_INT 1
35859: EQUAL
35860: IFFALSE 35971
// begin tmp := [ ] ;
35862: LD_ADDR_VAR 0 19
35866: PUSH
35867: EMPTY
35868: ST_TO_ADDR
// for j in f do
35869: LD_ADDR_VAR 0 9
35873: PUSH
35874: LD_VAR 0 12
35878: PUSH
35879: FOR_IN
35880: IFFALSE 35953
// if GetBType ( j ) = b_bunker then
35882: LD_VAR 0 9
35886: PPUSH
35887: CALL_OW 266
35891: PUSH
35892: LD_INT 32
35894: EQUAL
35895: IFFALSE 35922
// tmp := Insert ( tmp , 1 , j ) else
35897: LD_ADDR_VAR 0 19
35901: PUSH
35902: LD_VAR 0 19
35906: PPUSH
35907: LD_INT 1
35909: PPUSH
35910: LD_VAR 0 9
35914: PPUSH
35915: CALL_OW 2
35919: ST_TO_ADDR
35920: GO 35951
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35922: LD_ADDR_VAR 0 19
35926: PUSH
35927: LD_VAR 0 19
35931: PPUSH
35932: LD_VAR 0 19
35936: PUSH
35937: LD_INT 1
35939: PLUS
35940: PPUSH
35941: LD_VAR 0 9
35945: PPUSH
35946: CALL_OW 2
35950: ST_TO_ADDR
35951: GO 35879
35953: POP
35954: POP
// if tmp then
35955: LD_VAR 0 19
35959: IFFALSE 35971
// f := tmp ;
35961: LD_ADDR_VAR 0 12
35965: PUSH
35966: LD_VAR 0 19
35970: ST_TO_ADDR
// end ; x := personel [ i ] ;
35971: LD_ADDR_VAR 0 13
35975: PUSH
35976: LD_VAR 0 6
35980: PUSH
35981: LD_VAR 0 8
35985: ARRAY
35986: ST_TO_ADDR
// if x = - 1 then
35987: LD_VAR 0 13
35991: PUSH
35992: LD_INT 1
35994: NEG
35995: EQUAL
35996: IFFALSE 36205
// begin for j in f do
35998: LD_ADDR_VAR 0 9
36002: PUSH
36003: LD_VAR 0 12
36007: PUSH
36008: FOR_IN
36009: IFFALSE 36201
// repeat InitHc ;
36011: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36015: LD_VAR 0 9
36019: PPUSH
36020: CALL_OW 266
36024: PUSH
36025: LD_INT 5
36027: EQUAL
36028: IFFALSE 36098
// begin if UnitsInside ( j ) < 3 then
36030: LD_VAR 0 9
36034: PPUSH
36035: CALL_OW 313
36039: PUSH
36040: LD_INT 3
36042: LESS
36043: IFFALSE 36079
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36045: LD_INT 0
36047: PPUSH
36048: LD_INT 5
36050: PUSH
36051: LD_INT 8
36053: PUSH
36054: LD_INT 9
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: LIST
36061: PUSH
36062: LD_VAR 0 17
36066: ARRAY
36067: PPUSH
36068: LD_VAR 0 4
36072: PPUSH
36073: CALL_OW 380
36077: GO 36096
// PrepareHuman ( false , i , skill ) ;
36079: LD_INT 0
36081: PPUSH
36082: LD_VAR 0 8
36086: PPUSH
36087: LD_VAR 0 4
36091: PPUSH
36092: CALL_OW 380
// end else
36096: GO 36115
// PrepareHuman ( false , i , skill ) ;
36098: LD_INT 0
36100: PPUSH
36101: LD_VAR 0 8
36105: PPUSH
36106: LD_VAR 0 4
36110: PPUSH
36111: CALL_OW 380
// un := CreateHuman ;
36115: LD_ADDR_VAR 0 14
36119: PUSH
36120: CALL_OW 44
36124: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36125: LD_ADDR_VAR 0 7
36129: PUSH
36130: LD_VAR 0 7
36134: PPUSH
36135: LD_INT 1
36137: PPUSH
36138: LD_VAR 0 14
36142: PPUSH
36143: CALL_OW 2
36147: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36148: LD_VAR 0 14
36152: PPUSH
36153: LD_VAR 0 9
36157: PPUSH
36158: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36162: LD_VAR 0 9
36166: PPUSH
36167: CALL_OW 313
36171: PUSH
36172: LD_INT 6
36174: EQUAL
36175: PUSH
36176: LD_VAR 0 9
36180: PPUSH
36181: CALL_OW 266
36185: PUSH
36186: LD_INT 32
36188: PUSH
36189: LD_INT 31
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: IN
36196: OR
36197: IFFALSE 36011
36199: GO 36008
36201: POP
36202: POP
// end else
36203: GO 36585
// for j = 1 to x do
36205: LD_ADDR_VAR 0 9
36209: PUSH
36210: DOUBLE
36211: LD_INT 1
36213: DEC
36214: ST_TO_ADDR
36215: LD_VAR 0 13
36219: PUSH
36220: FOR_TO
36221: IFFALSE 36583
// begin InitHc ;
36223: CALL_OW 19
// if not f then
36227: LD_VAR 0 12
36231: NOT
36232: IFFALSE 36321
// begin PrepareHuman ( false , i , skill ) ;
36234: LD_INT 0
36236: PPUSH
36237: LD_VAR 0 8
36241: PPUSH
36242: LD_VAR 0 4
36246: PPUSH
36247: CALL_OW 380
// un := CreateHuman ;
36251: LD_ADDR_VAR 0 14
36255: PUSH
36256: CALL_OW 44
36260: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36261: LD_ADDR_VAR 0 7
36265: PUSH
36266: LD_VAR 0 7
36270: PPUSH
36271: LD_INT 1
36273: PPUSH
36274: LD_VAR 0 14
36278: PPUSH
36279: CALL_OW 2
36283: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36284: LD_VAR 0 14
36288: PPUSH
36289: LD_VAR 0 1
36293: PPUSH
36294: CALL_OW 250
36298: PPUSH
36299: LD_VAR 0 1
36303: PPUSH
36304: CALL_OW 251
36308: PPUSH
36309: LD_INT 10
36311: PPUSH
36312: LD_INT 0
36314: PPUSH
36315: CALL_OW 50
// continue ;
36319: GO 36220
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36321: LD_VAR 0 12
36325: PUSH
36326: LD_INT 1
36328: ARRAY
36329: PPUSH
36330: CALL_OW 313
36334: PUSH
36335: LD_VAR 0 12
36339: PUSH
36340: LD_INT 1
36342: ARRAY
36343: PPUSH
36344: CALL_OW 266
36348: PUSH
36349: LD_INT 32
36351: PUSH
36352: LD_INT 31
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: IN
36359: AND
36360: PUSH
36361: LD_VAR 0 12
36365: PUSH
36366: LD_INT 1
36368: ARRAY
36369: PPUSH
36370: CALL_OW 313
36374: PUSH
36375: LD_INT 6
36377: EQUAL
36378: OR
36379: IFFALSE 36399
// f := Delete ( f , 1 ) ;
36381: LD_ADDR_VAR 0 12
36385: PUSH
36386: LD_VAR 0 12
36390: PPUSH
36391: LD_INT 1
36393: PPUSH
36394: CALL_OW 3
36398: ST_TO_ADDR
// if not f then
36399: LD_VAR 0 12
36403: NOT
36404: IFFALSE 36422
// begin x := x + 2 ;
36406: LD_ADDR_VAR 0 13
36410: PUSH
36411: LD_VAR 0 13
36415: PUSH
36416: LD_INT 2
36418: PLUS
36419: ST_TO_ADDR
// continue ;
36420: GO 36220
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36422: LD_VAR 0 12
36426: PUSH
36427: LD_INT 1
36429: ARRAY
36430: PPUSH
36431: CALL_OW 266
36435: PUSH
36436: LD_INT 5
36438: EQUAL
36439: IFFALSE 36513
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36441: LD_VAR 0 12
36445: PUSH
36446: LD_INT 1
36448: ARRAY
36449: PPUSH
36450: CALL_OW 313
36454: PUSH
36455: LD_INT 3
36457: LESS
36458: IFFALSE 36494
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36460: LD_INT 0
36462: PPUSH
36463: LD_INT 5
36465: PUSH
36466: LD_INT 8
36468: PUSH
36469: LD_INT 9
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: LIST
36476: PUSH
36477: LD_VAR 0 17
36481: ARRAY
36482: PPUSH
36483: LD_VAR 0 4
36487: PPUSH
36488: CALL_OW 380
36492: GO 36511
// PrepareHuman ( false , i , skill ) ;
36494: LD_INT 0
36496: PPUSH
36497: LD_VAR 0 8
36501: PPUSH
36502: LD_VAR 0 4
36506: PPUSH
36507: CALL_OW 380
// end else
36511: GO 36530
// PrepareHuman ( false , i , skill ) ;
36513: LD_INT 0
36515: PPUSH
36516: LD_VAR 0 8
36520: PPUSH
36521: LD_VAR 0 4
36525: PPUSH
36526: CALL_OW 380
// un := CreateHuman ;
36530: LD_ADDR_VAR 0 14
36534: PUSH
36535: CALL_OW 44
36539: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36540: LD_ADDR_VAR 0 7
36544: PUSH
36545: LD_VAR 0 7
36549: PPUSH
36550: LD_INT 1
36552: PPUSH
36553: LD_VAR 0 14
36557: PPUSH
36558: CALL_OW 2
36562: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36563: LD_VAR 0 14
36567: PPUSH
36568: LD_VAR 0 12
36572: PUSH
36573: LD_INT 1
36575: ARRAY
36576: PPUSH
36577: CALL_OW 52
// end ;
36581: GO 36220
36583: POP
36584: POP
// end ;
36585: GO 35522
36587: POP
36588: POP
// result := result ^ buildings ;
36589: LD_ADDR_VAR 0 7
36593: PUSH
36594: LD_VAR 0 7
36598: PUSH
36599: LD_VAR 0 18
36603: ADD
36604: ST_TO_ADDR
// end else
36605: GO 36748
// begin for i = 1 to personel do
36607: LD_ADDR_VAR 0 8
36611: PUSH
36612: DOUBLE
36613: LD_INT 1
36615: DEC
36616: ST_TO_ADDR
36617: LD_VAR 0 6
36621: PUSH
36622: FOR_TO
36623: IFFALSE 36746
// begin if i > 4 then
36625: LD_VAR 0 8
36629: PUSH
36630: LD_INT 4
36632: GREATER
36633: IFFALSE 36637
// break ;
36635: GO 36746
// x := personel [ i ] ;
36637: LD_ADDR_VAR 0 13
36641: PUSH
36642: LD_VAR 0 6
36646: PUSH
36647: LD_VAR 0 8
36651: ARRAY
36652: ST_TO_ADDR
// if x = - 1 then
36653: LD_VAR 0 13
36657: PUSH
36658: LD_INT 1
36660: NEG
36661: EQUAL
36662: IFFALSE 36666
// continue ;
36664: GO 36622
// PrepareHuman ( false , i , skill ) ;
36666: LD_INT 0
36668: PPUSH
36669: LD_VAR 0 8
36673: PPUSH
36674: LD_VAR 0 4
36678: PPUSH
36679: CALL_OW 380
// un := CreateHuman ;
36683: LD_ADDR_VAR 0 14
36687: PUSH
36688: CALL_OW 44
36692: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36693: LD_VAR 0 14
36697: PPUSH
36698: LD_VAR 0 1
36702: PPUSH
36703: CALL_OW 250
36707: PPUSH
36708: LD_VAR 0 1
36712: PPUSH
36713: CALL_OW 251
36717: PPUSH
36718: LD_INT 10
36720: PPUSH
36721: LD_INT 0
36723: PPUSH
36724: CALL_OW 50
// result := result ^ un ;
36728: LD_ADDR_VAR 0 7
36732: PUSH
36733: LD_VAR 0 7
36737: PUSH
36738: LD_VAR 0 14
36742: ADD
36743: ST_TO_ADDR
// end ;
36744: GO 36622
36746: POP
36747: POP
// end ; end ;
36748: LD_VAR 0 7
36752: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36753: LD_INT 0
36755: PPUSH
36756: PPUSH
36757: PPUSH
36758: PPUSH
36759: PPUSH
36760: PPUSH
36761: PPUSH
36762: PPUSH
36763: PPUSH
36764: PPUSH
36765: PPUSH
36766: PPUSH
36767: PPUSH
36768: PPUSH
36769: PPUSH
36770: PPUSH
// result := false ;
36771: LD_ADDR_VAR 0 3
36775: PUSH
36776: LD_INT 0
36778: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36779: LD_VAR 0 1
36783: NOT
36784: PUSH
36785: LD_VAR 0 1
36789: PPUSH
36790: CALL_OW 266
36794: PUSH
36795: LD_INT 32
36797: PUSH
36798: LD_INT 33
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: IN
36805: NOT
36806: OR
36807: IFFALSE 36811
// exit ;
36809: GO 37950
// nat := GetNation ( tower ) ;
36811: LD_ADDR_VAR 0 12
36815: PUSH
36816: LD_VAR 0 1
36820: PPUSH
36821: CALL_OW 248
36825: ST_TO_ADDR
// side := GetSide ( tower ) ;
36826: LD_ADDR_VAR 0 16
36830: PUSH
36831: LD_VAR 0 1
36835: PPUSH
36836: CALL_OW 255
36840: ST_TO_ADDR
// x := GetX ( tower ) ;
36841: LD_ADDR_VAR 0 10
36845: PUSH
36846: LD_VAR 0 1
36850: PPUSH
36851: CALL_OW 250
36855: ST_TO_ADDR
// y := GetY ( tower ) ;
36856: LD_ADDR_VAR 0 11
36860: PUSH
36861: LD_VAR 0 1
36865: PPUSH
36866: CALL_OW 251
36870: ST_TO_ADDR
// if not x or not y then
36871: LD_VAR 0 10
36875: NOT
36876: PUSH
36877: LD_VAR 0 11
36881: NOT
36882: OR
36883: IFFALSE 36887
// exit ;
36885: GO 37950
// weapon := 0 ;
36887: LD_ADDR_VAR 0 18
36891: PUSH
36892: LD_INT 0
36894: ST_TO_ADDR
// fac_list := [ ] ;
36895: LD_ADDR_VAR 0 17
36899: PUSH
36900: EMPTY
36901: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36902: LD_ADDR_VAR 0 6
36906: PUSH
36907: LD_VAR 0 1
36911: PPUSH
36912: CALL_OW 274
36916: PPUSH
36917: LD_VAR 0 2
36921: PPUSH
36922: LD_INT 0
36924: PPUSH
36925: CALL 34490 0 3
36929: PPUSH
36930: LD_INT 30
36932: PUSH
36933: LD_INT 3
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PPUSH
36940: CALL_OW 72
36944: ST_TO_ADDR
// if not factories then
36945: LD_VAR 0 6
36949: NOT
36950: IFFALSE 36954
// exit ;
36952: GO 37950
// for i in factories do
36954: LD_ADDR_VAR 0 8
36958: PUSH
36959: LD_VAR 0 6
36963: PUSH
36964: FOR_IN
36965: IFFALSE 36990
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36967: LD_ADDR_VAR 0 17
36971: PUSH
36972: LD_VAR 0 17
36976: PUSH
36977: LD_VAR 0 8
36981: PPUSH
36982: CALL_OW 478
36986: UNION
36987: ST_TO_ADDR
36988: GO 36964
36990: POP
36991: POP
// if not fac_list then
36992: LD_VAR 0 17
36996: NOT
36997: IFFALSE 37001
// exit ;
36999: GO 37950
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37001: LD_ADDR_VAR 0 5
37005: PUSH
37006: LD_INT 4
37008: PUSH
37009: LD_INT 5
37011: PUSH
37012: LD_INT 9
37014: PUSH
37015: LD_INT 10
37017: PUSH
37018: LD_INT 6
37020: PUSH
37021: LD_INT 7
37023: PUSH
37024: LD_INT 11
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 27
37038: PUSH
37039: LD_INT 28
37041: PUSH
37042: LD_INT 26
37044: PUSH
37045: LD_INT 30
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: PUSH
37054: LD_INT 43
37056: PUSH
37057: LD_INT 44
37059: PUSH
37060: LD_INT 46
37062: PUSH
37063: LD_INT 45
37065: PUSH
37066: LD_INT 47
37068: PUSH
37069: LD_INT 49
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: LIST
37084: PUSH
37085: LD_VAR 0 12
37089: ARRAY
37090: ST_TO_ADDR
// for i in list do
37091: LD_ADDR_VAR 0 8
37095: PUSH
37096: LD_VAR 0 5
37100: PUSH
37101: FOR_IN
37102: IFFALSE 37135
// if not i in fac_list then
37104: LD_VAR 0 8
37108: PUSH
37109: LD_VAR 0 17
37113: IN
37114: NOT
37115: IFFALSE 37133
// list := list diff i ;
37117: LD_ADDR_VAR 0 5
37121: PUSH
37122: LD_VAR 0 5
37126: PUSH
37127: LD_VAR 0 8
37131: DIFF
37132: ST_TO_ADDR
37133: GO 37101
37135: POP
37136: POP
// if not list then
37137: LD_VAR 0 5
37141: NOT
37142: IFFALSE 37146
// exit ;
37144: GO 37950
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37146: LD_VAR 0 12
37150: PUSH
37151: LD_INT 3
37153: EQUAL
37154: PUSH
37155: LD_INT 49
37157: PUSH
37158: LD_VAR 0 5
37162: IN
37163: AND
37164: PUSH
37165: LD_INT 31
37167: PPUSH
37168: LD_VAR 0 16
37172: PPUSH
37173: CALL_OW 321
37177: PUSH
37178: LD_INT 2
37180: EQUAL
37181: AND
37182: IFFALSE 37242
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37184: LD_INT 22
37186: PUSH
37187: LD_VAR 0 16
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: LD_INT 35
37198: PUSH
37199: LD_INT 49
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 91
37208: PUSH
37209: LD_VAR 0 1
37213: PUSH
37214: LD_INT 10
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: LIST
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: LIST
37226: PPUSH
37227: CALL_OW 69
37231: NOT
37232: IFFALSE 37242
// weapon := ru_time_lapser ;
37234: LD_ADDR_VAR 0 18
37238: PUSH
37239: LD_INT 49
37241: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37242: LD_VAR 0 12
37246: PUSH
37247: LD_INT 1
37249: PUSH
37250: LD_INT 2
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: IN
37257: PUSH
37258: LD_INT 11
37260: PUSH
37261: LD_VAR 0 5
37265: IN
37266: PUSH
37267: LD_INT 30
37269: PUSH
37270: LD_VAR 0 5
37274: IN
37275: OR
37276: AND
37277: PUSH
37278: LD_INT 6
37280: PPUSH
37281: LD_VAR 0 16
37285: PPUSH
37286: CALL_OW 321
37290: PUSH
37291: LD_INT 2
37293: EQUAL
37294: AND
37295: IFFALSE 37460
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37297: LD_INT 22
37299: PUSH
37300: LD_VAR 0 16
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 2
37311: PUSH
37312: LD_INT 35
37314: PUSH
37315: LD_INT 11
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PUSH
37322: LD_INT 35
37324: PUSH
37325: LD_INT 30
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: LIST
37336: PUSH
37337: LD_INT 91
37339: PUSH
37340: LD_VAR 0 1
37344: PUSH
37345: LD_INT 18
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: LIST
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: LIST
37357: PPUSH
37358: CALL_OW 69
37362: NOT
37363: PUSH
37364: LD_INT 22
37366: PUSH
37367: LD_VAR 0 16
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: LD_INT 2
37378: PUSH
37379: LD_INT 30
37381: PUSH
37382: LD_INT 32
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 30
37391: PUSH
37392: LD_INT 33
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: LIST
37403: PUSH
37404: LD_INT 91
37406: PUSH
37407: LD_VAR 0 1
37411: PUSH
37412: LD_INT 12
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: LIST
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: LIST
37424: PUSH
37425: EMPTY
37426: LIST
37427: PPUSH
37428: CALL_OW 69
37432: PUSH
37433: LD_INT 2
37435: GREATER
37436: AND
37437: IFFALSE 37460
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37439: LD_ADDR_VAR 0 18
37443: PUSH
37444: LD_INT 11
37446: PUSH
37447: LD_INT 30
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: LD_VAR 0 12
37458: ARRAY
37459: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37460: LD_VAR 0 18
37464: NOT
37465: PUSH
37466: LD_INT 40
37468: PPUSH
37469: LD_VAR 0 16
37473: PPUSH
37474: CALL_OW 321
37478: PUSH
37479: LD_INT 2
37481: EQUAL
37482: AND
37483: PUSH
37484: LD_INT 7
37486: PUSH
37487: LD_VAR 0 5
37491: IN
37492: PUSH
37493: LD_INT 28
37495: PUSH
37496: LD_VAR 0 5
37500: IN
37501: OR
37502: PUSH
37503: LD_INT 45
37505: PUSH
37506: LD_VAR 0 5
37510: IN
37511: OR
37512: AND
37513: IFFALSE 37767
// begin hex := GetHexInfo ( x , y ) ;
37515: LD_ADDR_VAR 0 4
37519: PUSH
37520: LD_VAR 0 10
37524: PPUSH
37525: LD_VAR 0 11
37529: PPUSH
37530: CALL_OW 546
37534: ST_TO_ADDR
// if hex [ 1 ] then
37535: LD_VAR 0 4
37539: PUSH
37540: LD_INT 1
37542: ARRAY
37543: IFFALSE 37547
// exit ;
37545: GO 37950
// height := hex [ 2 ] ;
37547: LD_ADDR_VAR 0 15
37551: PUSH
37552: LD_VAR 0 4
37556: PUSH
37557: LD_INT 2
37559: ARRAY
37560: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37561: LD_ADDR_VAR 0 14
37565: PUSH
37566: LD_INT 0
37568: PUSH
37569: LD_INT 2
37571: PUSH
37572: LD_INT 3
37574: PUSH
37575: LD_INT 5
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: ST_TO_ADDR
// for i in tmp do
37584: LD_ADDR_VAR 0 8
37588: PUSH
37589: LD_VAR 0 14
37593: PUSH
37594: FOR_IN
37595: IFFALSE 37765
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37597: LD_ADDR_VAR 0 9
37601: PUSH
37602: LD_VAR 0 10
37606: PPUSH
37607: LD_VAR 0 8
37611: PPUSH
37612: LD_INT 5
37614: PPUSH
37615: CALL_OW 272
37619: PUSH
37620: LD_VAR 0 11
37624: PPUSH
37625: LD_VAR 0 8
37629: PPUSH
37630: LD_INT 5
37632: PPUSH
37633: CALL_OW 273
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37642: LD_VAR 0 9
37646: PUSH
37647: LD_INT 1
37649: ARRAY
37650: PPUSH
37651: LD_VAR 0 9
37655: PUSH
37656: LD_INT 2
37658: ARRAY
37659: PPUSH
37660: CALL_OW 488
37664: IFFALSE 37763
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37666: LD_ADDR_VAR 0 4
37670: PUSH
37671: LD_VAR 0 9
37675: PUSH
37676: LD_INT 1
37678: ARRAY
37679: PPUSH
37680: LD_VAR 0 9
37684: PUSH
37685: LD_INT 2
37687: ARRAY
37688: PPUSH
37689: CALL_OW 546
37693: ST_TO_ADDR
// if hex [ 1 ] then
37694: LD_VAR 0 4
37698: PUSH
37699: LD_INT 1
37701: ARRAY
37702: IFFALSE 37706
// continue ;
37704: GO 37594
// h := hex [ 2 ] ;
37706: LD_ADDR_VAR 0 13
37710: PUSH
37711: LD_VAR 0 4
37715: PUSH
37716: LD_INT 2
37718: ARRAY
37719: ST_TO_ADDR
// if h + 7 < height then
37720: LD_VAR 0 13
37724: PUSH
37725: LD_INT 7
37727: PLUS
37728: PUSH
37729: LD_VAR 0 15
37733: LESS
37734: IFFALSE 37763
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37736: LD_ADDR_VAR 0 18
37740: PUSH
37741: LD_INT 7
37743: PUSH
37744: LD_INT 28
37746: PUSH
37747: LD_INT 45
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: LIST
37754: PUSH
37755: LD_VAR 0 12
37759: ARRAY
37760: ST_TO_ADDR
// break ;
37761: GO 37765
// end ; end ; end ;
37763: GO 37594
37765: POP
37766: POP
// end ; if not weapon then
37767: LD_VAR 0 18
37771: NOT
37772: IFFALSE 37832
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37774: LD_ADDR_VAR 0 5
37778: PUSH
37779: LD_VAR 0 5
37783: PUSH
37784: LD_INT 11
37786: PUSH
37787: LD_INT 30
37789: PUSH
37790: LD_INT 49
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: LIST
37797: DIFF
37798: ST_TO_ADDR
// if not list then
37799: LD_VAR 0 5
37803: NOT
37804: IFFALSE 37808
// exit ;
37806: GO 37950
// weapon := list [ rand ( 1 , list ) ] ;
37808: LD_ADDR_VAR 0 18
37812: PUSH
37813: LD_VAR 0 5
37817: PUSH
37818: LD_INT 1
37820: PPUSH
37821: LD_VAR 0 5
37825: PPUSH
37826: CALL_OW 12
37830: ARRAY
37831: ST_TO_ADDR
// end ; if weapon then
37832: LD_VAR 0 18
37836: IFFALSE 37950
// begin tmp := CostOfWeapon ( weapon ) ;
37838: LD_ADDR_VAR 0 14
37842: PUSH
37843: LD_VAR 0 18
37847: PPUSH
37848: CALL_OW 451
37852: ST_TO_ADDR
// j := GetBase ( tower ) ;
37853: LD_ADDR_VAR 0 9
37857: PUSH
37858: LD_VAR 0 1
37862: PPUSH
37863: CALL_OW 274
37867: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37868: LD_VAR 0 9
37872: PPUSH
37873: LD_INT 1
37875: PPUSH
37876: CALL_OW 275
37880: PUSH
37881: LD_VAR 0 14
37885: PUSH
37886: LD_INT 1
37888: ARRAY
37889: GREATEREQUAL
37890: PUSH
37891: LD_VAR 0 9
37895: PPUSH
37896: LD_INT 2
37898: PPUSH
37899: CALL_OW 275
37903: PUSH
37904: LD_VAR 0 14
37908: PUSH
37909: LD_INT 2
37911: ARRAY
37912: GREATEREQUAL
37913: AND
37914: PUSH
37915: LD_VAR 0 9
37919: PPUSH
37920: LD_INT 3
37922: PPUSH
37923: CALL_OW 275
37927: PUSH
37928: LD_VAR 0 14
37932: PUSH
37933: LD_INT 3
37935: ARRAY
37936: GREATEREQUAL
37937: AND
37938: IFFALSE 37950
// result := weapon ;
37940: LD_ADDR_VAR 0 3
37944: PUSH
37945: LD_VAR 0 18
37949: ST_TO_ADDR
// end ; end ;
37950: LD_VAR 0 3
37954: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37955: LD_INT 0
37957: PPUSH
37958: PPUSH
// result := true ;
37959: LD_ADDR_VAR 0 3
37963: PUSH
37964: LD_INT 1
37966: ST_TO_ADDR
// if array1 = array2 then
37967: LD_VAR 0 1
37971: PUSH
37972: LD_VAR 0 2
37976: EQUAL
37977: IFFALSE 38037
// begin for i = 1 to array1 do
37979: LD_ADDR_VAR 0 4
37983: PUSH
37984: DOUBLE
37985: LD_INT 1
37987: DEC
37988: ST_TO_ADDR
37989: LD_VAR 0 1
37993: PUSH
37994: FOR_TO
37995: IFFALSE 38033
// if array1 [ i ] <> array2 [ i ] then
37997: LD_VAR 0 1
38001: PUSH
38002: LD_VAR 0 4
38006: ARRAY
38007: PUSH
38008: LD_VAR 0 2
38012: PUSH
38013: LD_VAR 0 4
38017: ARRAY
38018: NONEQUAL
38019: IFFALSE 38031
// begin result := false ;
38021: LD_ADDR_VAR 0 3
38025: PUSH
38026: LD_INT 0
38028: ST_TO_ADDR
// break ;
38029: GO 38033
// end ;
38031: GO 37994
38033: POP
38034: POP
// end else
38035: GO 38045
// result := false ;
38037: LD_ADDR_VAR 0 3
38041: PUSH
38042: LD_INT 0
38044: ST_TO_ADDR
// end ;
38045: LD_VAR 0 3
38049: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38050: LD_INT 0
38052: PPUSH
38053: PPUSH
// if not array1 or not array2 then
38054: LD_VAR 0 1
38058: NOT
38059: PUSH
38060: LD_VAR 0 2
38064: NOT
38065: OR
38066: IFFALSE 38070
// exit ;
38068: GO 38134
// result := true ;
38070: LD_ADDR_VAR 0 3
38074: PUSH
38075: LD_INT 1
38077: ST_TO_ADDR
// for i = 1 to array1 do
38078: LD_ADDR_VAR 0 4
38082: PUSH
38083: DOUBLE
38084: LD_INT 1
38086: DEC
38087: ST_TO_ADDR
38088: LD_VAR 0 1
38092: PUSH
38093: FOR_TO
38094: IFFALSE 38132
// if array1 [ i ] <> array2 [ i ] then
38096: LD_VAR 0 1
38100: PUSH
38101: LD_VAR 0 4
38105: ARRAY
38106: PUSH
38107: LD_VAR 0 2
38111: PUSH
38112: LD_VAR 0 4
38116: ARRAY
38117: NONEQUAL
38118: IFFALSE 38130
// begin result := false ;
38120: LD_ADDR_VAR 0 3
38124: PUSH
38125: LD_INT 0
38127: ST_TO_ADDR
// break ;
38128: GO 38132
// end ;
38130: GO 38093
38132: POP
38133: POP
// end ;
38134: LD_VAR 0 3
38138: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38139: LD_INT 0
38141: PPUSH
38142: PPUSH
38143: PPUSH
// pom := GetBase ( fac ) ;
38144: LD_ADDR_VAR 0 5
38148: PUSH
38149: LD_VAR 0 1
38153: PPUSH
38154: CALL_OW 274
38158: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38159: LD_ADDR_VAR 0 4
38163: PUSH
38164: LD_VAR 0 2
38168: PUSH
38169: LD_INT 1
38171: ARRAY
38172: PPUSH
38173: LD_VAR 0 2
38177: PUSH
38178: LD_INT 2
38180: ARRAY
38181: PPUSH
38182: LD_VAR 0 2
38186: PUSH
38187: LD_INT 3
38189: ARRAY
38190: PPUSH
38191: LD_VAR 0 2
38195: PUSH
38196: LD_INT 4
38198: ARRAY
38199: PPUSH
38200: CALL_OW 449
38204: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38205: LD_ADDR_VAR 0 3
38209: PUSH
38210: LD_VAR 0 5
38214: PPUSH
38215: LD_INT 1
38217: PPUSH
38218: CALL_OW 275
38222: PUSH
38223: LD_VAR 0 4
38227: PUSH
38228: LD_INT 1
38230: ARRAY
38231: GREATEREQUAL
38232: PUSH
38233: LD_VAR 0 5
38237: PPUSH
38238: LD_INT 2
38240: PPUSH
38241: CALL_OW 275
38245: PUSH
38246: LD_VAR 0 4
38250: PUSH
38251: LD_INT 2
38253: ARRAY
38254: GREATEREQUAL
38255: AND
38256: PUSH
38257: LD_VAR 0 5
38261: PPUSH
38262: LD_INT 3
38264: PPUSH
38265: CALL_OW 275
38269: PUSH
38270: LD_VAR 0 4
38274: PUSH
38275: LD_INT 3
38277: ARRAY
38278: GREATEREQUAL
38279: AND
38280: ST_TO_ADDR
// end ;
38281: LD_VAR 0 3
38285: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38286: LD_INT 0
38288: PPUSH
38289: PPUSH
38290: PPUSH
38291: PPUSH
// pom := GetBase ( building ) ;
38292: LD_ADDR_VAR 0 3
38296: PUSH
38297: LD_VAR 0 1
38301: PPUSH
38302: CALL_OW 274
38306: ST_TO_ADDR
// if not pom then
38307: LD_VAR 0 3
38311: NOT
38312: IFFALSE 38316
// exit ;
38314: GO 38486
// btype := GetBType ( building ) ;
38316: LD_ADDR_VAR 0 5
38320: PUSH
38321: LD_VAR 0 1
38325: PPUSH
38326: CALL_OW 266
38330: ST_TO_ADDR
// if btype = b_armoury then
38331: LD_VAR 0 5
38335: PUSH
38336: LD_INT 4
38338: EQUAL
38339: IFFALSE 38349
// btype := b_barracks ;
38341: LD_ADDR_VAR 0 5
38345: PUSH
38346: LD_INT 5
38348: ST_TO_ADDR
// if btype = b_depot then
38349: LD_VAR 0 5
38353: PUSH
38354: LD_INT 0
38356: EQUAL
38357: IFFALSE 38367
// btype := b_warehouse ;
38359: LD_ADDR_VAR 0 5
38363: PUSH
38364: LD_INT 1
38366: ST_TO_ADDR
// if btype = b_workshop then
38367: LD_VAR 0 5
38371: PUSH
38372: LD_INT 2
38374: EQUAL
38375: IFFALSE 38385
// btype := b_factory ;
38377: LD_ADDR_VAR 0 5
38381: PUSH
38382: LD_INT 3
38384: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38385: LD_ADDR_VAR 0 4
38389: PUSH
38390: LD_VAR 0 5
38394: PPUSH
38395: LD_VAR 0 1
38399: PPUSH
38400: CALL_OW 248
38404: PPUSH
38405: CALL_OW 450
38409: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38410: LD_ADDR_VAR 0 2
38414: PUSH
38415: LD_VAR 0 3
38419: PPUSH
38420: LD_INT 1
38422: PPUSH
38423: CALL_OW 275
38427: PUSH
38428: LD_VAR 0 4
38432: PUSH
38433: LD_INT 1
38435: ARRAY
38436: GREATEREQUAL
38437: PUSH
38438: LD_VAR 0 3
38442: PPUSH
38443: LD_INT 2
38445: PPUSH
38446: CALL_OW 275
38450: PUSH
38451: LD_VAR 0 4
38455: PUSH
38456: LD_INT 2
38458: ARRAY
38459: GREATEREQUAL
38460: AND
38461: PUSH
38462: LD_VAR 0 3
38466: PPUSH
38467: LD_INT 3
38469: PPUSH
38470: CALL_OW 275
38474: PUSH
38475: LD_VAR 0 4
38479: PUSH
38480: LD_INT 3
38482: ARRAY
38483: GREATEREQUAL
38484: AND
38485: ST_TO_ADDR
// end ;
38486: LD_VAR 0 2
38490: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38491: LD_INT 0
38493: PPUSH
38494: PPUSH
38495: PPUSH
// pom := GetBase ( building ) ;
38496: LD_ADDR_VAR 0 4
38500: PUSH
38501: LD_VAR 0 1
38505: PPUSH
38506: CALL_OW 274
38510: ST_TO_ADDR
// if not pom then
38511: LD_VAR 0 4
38515: NOT
38516: IFFALSE 38520
// exit ;
38518: GO 38621
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38520: LD_ADDR_VAR 0 5
38524: PUSH
38525: LD_VAR 0 2
38529: PPUSH
38530: LD_VAR 0 1
38534: PPUSH
38535: CALL_OW 248
38539: PPUSH
38540: CALL_OW 450
38544: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38545: LD_ADDR_VAR 0 3
38549: PUSH
38550: LD_VAR 0 4
38554: PPUSH
38555: LD_INT 1
38557: PPUSH
38558: CALL_OW 275
38562: PUSH
38563: LD_VAR 0 5
38567: PUSH
38568: LD_INT 1
38570: ARRAY
38571: GREATEREQUAL
38572: PUSH
38573: LD_VAR 0 4
38577: PPUSH
38578: LD_INT 2
38580: PPUSH
38581: CALL_OW 275
38585: PUSH
38586: LD_VAR 0 5
38590: PUSH
38591: LD_INT 2
38593: ARRAY
38594: GREATEREQUAL
38595: AND
38596: PUSH
38597: LD_VAR 0 4
38601: PPUSH
38602: LD_INT 3
38604: PPUSH
38605: CALL_OW 275
38609: PUSH
38610: LD_VAR 0 5
38614: PUSH
38615: LD_INT 3
38617: ARRAY
38618: GREATEREQUAL
38619: AND
38620: ST_TO_ADDR
// end ;
38621: LD_VAR 0 3
38625: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38626: LD_INT 0
38628: PPUSH
38629: PPUSH
38630: PPUSH
38631: PPUSH
38632: PPUSH
38633: PPUSH
38634: PPUSH
38635: PPUSH
38636: PPUSH
38637: PPUSH
38638: PPUSH
// result := false ;
38639: LD_ADDR_VAR 0 8
38643: PUSH
38644: LD_INT 0
38646: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38647: LD_VAR 0 5
38651: NOT
38652: PUSH
38653: LD_VAR 0 1
38657: NOT
38658: OR
38659: PUSH
38660: LD_VAR 0 2
38664: NOT
38665: OR
38666: PUSH
38667: LD_VAR 0 3
38671: NOT
38672: OR
38673: IFFALSE 38677
// exit ;
38675: GO 39491
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38677: LD_ADDR_VAR 0 14
38681: PUSH
38682: LD_VAR 0 1
38686: PPUSH
38687: LD_VAR 0 2
38691: PPUSH
38692: LD_VAR 0 3
38696: PPUSH
38697: LD_VAR 0 4
38701: PPUSH
38702: LD_VAR 0 5
38706: PUSH
38707: LD_INT 1
38709: ARRAY
38710: PPUSH
38711: CALL_OW 248
38715: PPUSH
38716: LD_INT 0
38718: PPUSH
38719: CALL 40328 0 6
38723: ST_TO_ADDR
// if not hexes then
38724: LD_VAR 0 14
38728: NOT
38729: IFFALSE 38733
// exit ;
38731: GO 39491
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38733: LD_ADDR_VAR 0 17
38737: PUSH
38738: LD_VAR 0 5
38742: PPUSH
38743: LD_INT 22
38745: PUSH
38746: LD_VAR 0 13
38750: PPUSH
38751: CALL_OW 255
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 2
38762: PUSH
38763: LD_INT 30
38765: PUSH
38766: LD_INT 0
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 30
38775: PUSH
38776: LD_INT 1
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: LIST
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PPUSH
38792: CALL_OW 72
38796: ST_TO_ADDR
// for i = 1 to hexes do
38797: LD_ADDR_VAR 0 9
38801: PUSH
38802: DOUBLE
38803: LD_INT 1
38805: DEC
38806: ST_TO_ADDR
38807: LD_VAR 0 14
38811: PUSH
38812: FOR_TO
38813: IFFALSE 39489
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38815: LD_ADDR_VAR 0 13
38819: PUSH
38820: LD_VAR 0 14
38824: PUSH
38825: LD_VAR 0 9
38829: ARRAY
38830: PUSH
38831: LD_INT 1
38833: ARRAY
38834: PPUSH
38835: LD_VAR 0 14
38839: PUSH
38840: LD_VAR 0 9
38844: ARRAY
38845: PUSH
38846: LD_INT 2
38848: ARRAY
38849: PPUSH
38850: CALL_OW 428
38854: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38855: LD_VAR 0 14
38859: PUSH
38860: LD_VAR 0 9
38864: ARRAY
38865: PUSH
38866: LD_INT 1
38868: ARRAY
38869: PPUSH
38870: LD_VAR 0 14
38874: PUSH
38875: LD_VAR 0 9
38879: ARRAY
38880: PUSH
38881: LD_INT 2
38883: ARRAY
38884: PPUSH
38885: CALL_OW 351
38889: PUSH
38890: LD_VAR 0 14
38894: PUSH
38895: LD_VAR 0 9
38899: ARRAY
38900: PUSH
38901: LD_INT 1
38903: ARRAY
38904: PPUSH
38905: LD_VAR 0 14
38909: PUSH
38910: LD_VAR 0 9
38914: ARRAY
38915: PUSH
38916: LD_INT 2
38918: ARRAY
38919: PPUSH
38920: CALL_OW 488
38924: NOT
38925: OR
38926: PUSH
38927: LD_VAR 0 13
38931: PPUSH
38932: CALL_OW 247
38936: PUSH
38937: LD_INT 3
38939: EQUAL
38940: OR
38941: IFFALSE 38947
// exit ;
38943: POP
38944: POP
38945: GO 39491
// if not tmp then
38947: LD_VAR 0 13
38951: NOT
38952: IFFALSE 38956
// continue ;
38954: GO 38812
// result := true ;
38956: LD_ADDR_VAR 0 8
38960: PUSH
38961: LD_INT 1
38963: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38964: LD_VAR 0 6
38968: PUSH
38969: LD_VAR 0 13
38973: PPUSH
38974: CALL_OW 247
38978: PUSH
38979: LD_INT 2
38981: EQUAL
38982: AND
38983: PUSH
38984: LD_VAR 0 13
38988: PPUSH
38989: CALL_OW 263
38993: PUSH
38994: LD_INT 1
38996: EQUAL
38997: AND
38998: IFFALSE 39162
// begin if IsDrivenBy ( tmp ) then
39000: LD_VAR 0 13
39004: PPUSH
39005: CALL_OW 311
39009: IFFALSE 39013
// continue ;
39011: GO 38812
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39013: LD_VAR 0 6
39017: PPUSH
39018: LD_INT 3
39020: PUSH
39021: LD_INT 60
39023: PUSH
39024: EMPTY
39025: LIST
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 3
39033: PUSH
39034: LD_INT 55
39036: PUSH
39037: EMPTY
39038: LIST
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PPUSH
39048: CALL_OW 72
39052: IFFALSE 39160
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39054: LD_ADDR_VAR 0 18
39058: PUSH
39059: LD_VAR 0 6
39063: PPUSH
39064: LD_INT 3
39066: PUSH
39067: LD_INT 60
39069: PUSH
39070: EMPTY
39071: LIST
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: LD_INT 3
39079: PUSH
39080: LD_INT 55
39082: PUSH
39083: EMPTY
39084: LIST
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PPUSH
39094: CALL_OW 72
39098: PUSH
39099: LD_INT 1
39101: ARRAY
39102: ST_TO_ADDR
// if IsInUnit ( driver ) then
39103: LD_VAR 0 18
39107: PPUSH
39108: CALL_OW 310
39112: IFFALSE 39123
// ComExit ( driver ) ;
39114: LD_VAR 0 18
39118: PPUSH
39119: CALL 63512 0 1
// AddComEnterUnit ( driver , tmp ) ;
39123: LD_VAR 0 18
39127: PPUSH
39128: LD_VAR 0 13
39132: PPUSH
39133: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39137: LD_VAR 0 18
39141: PPUSH
39142: LD_VAR 0 7
39146: PPUSH
39147: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39151: LD_VAR 0 18
39155: PPUSH
39156: CALL_OW 181
// end ; continue ;
39160: GO 38812
// end ; if not cleaners or not tmp in cleaners then
39162: LD_VAR 0 6
39166: NOT
39167: PUSH
39168: LD_VAR 0 13
39172: PUSH
39173: LD_VAR 0 6
39177: IN
39178: NOT
39179: OR
39180: IFFALSE 39487
// begin if dep then
39182: LD_VAR 0 17
39186: IFFALSE 39322
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39188: LD_ADDR_VAR 0 16
39192: PUSH
39193: LD_VAR 0 17
39197: PUSH
39198: LD_INT 1
39200: ARRAY
39201: PPUSH
39202: CALL_OW 250
39206: PPUSH
39207: LD_VAR 0 17
39211: PUSH
39212: LD_INT 1
39214: ARRAY
39215: PPUSH
39216: CALL_OW 254
39220: PPUSH
39221: LD_INT 5
39223: PPUSH
39224: CALL_OW 272
39228: PUSH
39229: LD_VAR 0 17
39233: PUSH
39234: LD_INT 1
39236: ARRAY
39237: PPUSH
39238: CALL_OW 251
39242: PPUSH
39243: LD_VAR 0 17
39247: PUSH
39248: LD_INT 1
39250: ARRAY
39251: PPUSH
39252: CALL_OW 254
39256: PPUSH
39257: LD_INT 5
39259: PPUSH
39260: CALL_OW 273
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39269: LD_VAR 0 16
39273: PUSH
39274: LD_INT 1
39276: ARRAY
39277: PPUSH
39278: LD_VAR 0 16
39282: PUSH
39283: LD_INT 2
39285: ARRAY
39286: PPUSH
39287: CALL_OW 488
39291: IFFALSE 39322
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39293: LD_VAR 0 13
39297: PPUSH
39298: LD_VAR 0 16
39302: PUSH
39303: LD_INT 1
39305: ARRAY
39306: PPUSH
39307: LD_VAR 0 16
39311: PUSH
39312: LD_INT 2
39314: ARRAY
39315: PPUSH
39316: CALL_OW 111
// continue ;
39320: GO 38812
// end ; end ; r := GetDir ( tmp ) ;
39322: LD_ADDR_VAR 0 15
39326: PUSH
39327: LD_VAR 0 13
39331: PPUSH
39332: CALL_OW 254
39336: ST_TO_ADDR
// if r = 5 then
39337: LD_VAR 0 15
39341: PUSH
39342: LD_INT 5
39344: EQUAL
39345: IFFALSE 39355
// r := 0 ;
39347: LD_ADDR_VAR 0 15
39351: PUSH
39352: LD_INT 0
39354: ST_TO_ADDR
// for j = r to 5 do
39355: LD_ADDR_VAR 0 10
39359: PUSH
39360: DOUBLE
39361: LD_VAR 0 15
39365: DEC
39366: ST_TO_ADDR
39367: LD_INT 5
39369: PUSH
39370: FOR_TO
39371: IFFALSE 39485
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39373: LD_ADDR_VAR 0 11
39377: PUSH
39378: LD_VAR 0 13
39382: PPUSH
39383: CALL_OW 250
39387: PPUSH
39388: LD_VAR 0 10
39392: PPUSH
39393: LD_INT 2
39395: PPUSH
39396: CALL_OW 272
39400: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39401: LD_ADDR_VAR 0 12
39405: PUSH
39406: LD_VAR 0 13
39410: PPUSH
39411: CALL_OW 251
39415: PPUSH
39416: LD_VAR 0 10
39420: PPUSH
39421: LD_INT 2
39423: PPUSH
39424: CALL_OW 273
39428: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39429: LD_VAR 0 11
39433: PPUSH
39434: LD_VAR 0 12
39438: PPUSH
39439: CALL_OW 488
39443: PUSH
39444: LD_VAR 0 11
39448: PPUSH
39449: LD_VAR 0 12
39453: PPUSH
39454: CALL_OW 428
39458: NOT
39459: AND
39460: IFFALSE 39483
// begin ComMoveXY ( tmp , _x , _y ) ;
39462: LD_VAR 0 13
39466: PPUSH
39467: LD_VAR 0 11
39471: PPUSH
39472: LD_VAR 0 12
39476: PPUSH
39477: CALL_OW 111
// break ;
39481: GO 39485
// end ; end ;
39483: GO 39370
39485: POP
39486: POP
// end ; end ;
39487: GO 38812
39489: POP
39490: POP
// end ;
39491: LD_VAR 0 8
39495: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
39496: LD_INT 0
39498: PPUSH
39499: PPUSH
39500: PPUSH
39501: PPUSH
39502: PPUSH
39503: PPUSH
39504: PPUSH
39505: PPUSH
39506: PPUSH
39507: PPUSH
// result := false ;
39508: LD_ADDR_VAR 0 6
39512: PUSH
39513: LD_INT 0
39515: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39516: LD_VAR 0 1
39520: NOT
39521: PUSH
39522: LD_VAR 0 1
39526: PPUSH
39527: CALL_OW 266
39531: PUSH
39532: LD_INT 0
39534: PUSH
39535: LD_INT 1
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: IN
39542: NOT
39543: OR
39544: PUSH
39545: LD_VAR 0 2
39549: NOT
39550: OR
39551: PUSH
39552: LD_VAR 0 5
39556: PUSH
39557: LD_INT 0
39559: PUSH
39560: LD_INT 1
39562: PUSH
39563: LD_INT 2
39565: PUSH
39566: LD_INT 3
39568: PUSH
39569: LD_INT 4
39571: PUSH
39572: LD_INT 5
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: IN
39583: NOT
39584: OR
39585: PUSH
39586: LD_VAR 0 3
39590: PPUSH
39591: LD_VAR 0 4
39595: PPUSH
39596: CALL_OW 488
39600: NOT
39601: OR
39602: IFFALSE 39606
// exit ;
39604: GO 40323
// pom := GetBase ( depot ) ;
39606: LD_ADDR_VAR 0 10
39610: PUSH
39611: LD_VAR 0 1
39615: PPUSH
39616: CALL_OW 274
39620: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39621: LD_ADDR_VAR 0 11
39625: PUSH
39626: LD_VAR 0 2
39630: PPUSH
39631: LD_VAR 0 1
39635: PPUSH
39636: CALL_OW 248
39640: PPUSH
39641: CALL_OW 450
39645: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39646: LD_VAR 0 10
39650: PPUSH
39651: LD_INT 1
39653: PPUSH
39654: CALL_OW 275
39658: PUSH
39659: LD_VAR 0 11
39663: PUSH
39664: LD_INT 1
39666: ARRAY
39667: GREATEREQUAL
39668: PUSH
39669: LD_VAR 0 10
39673: PPUSH
39674: LD_INT 2
39676: PPUSH
39677: CALL_OW 275
39681: PUSH
39682: LD_VAR 0 11
39686: PUSH
39687: LD_INT 2
39689: ARRAY
39690: GREATEREQUAL
39691: AND
39692: PUSH
39693: LD_VAR 0 10
39697: PPUSH
39698: LD_INT 3
39700: PPUSH
39701: CALL_OW 275
39705: PUSH
39706: LD_VAR 0 11
39710: PUSH
39711: LD_INT 3
39713: ARRAY
39714: GREATEREQUAL
39715: AND
39716: NOT
39717: IFFALSE 39721
// exit ;
39719: GO 40323
// if GetBType ( depot ) = b_depot then
39721: LD_VAR 0 1
39725: PPUSH
39726: CALL_OW 266
39730: PUSH
39731: LD_INT 0
39733: EQUAL
39734: IFFALSE 39746
// dist := 28 else
39736: LD_ADDR_VAR 0 14
39740: PUSH
39741: LD_INT 28
39743: ST_TO_ADDR
39744: GO 39754
// dist := 36 ;
39746: LD_ADDR_VAR 0 14
39750: PUSH
39751: LD_INT 36
39753: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39754: LD_VAR 0 1
39758: PPUSH
39759: LD_VAR 0 3
39763: PPUSH
39764: LD_VAR 0 4
39768: PPUSH
39769: CALL_OW 297
39773: PUSH
39774: LD_VAR 0 14
39778: GREATER
39779: IFFALSE 39783
// exit ;
39781: GO 40323
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39783: LD_ADDR_VAR 0 12
39787: PUSH
39788: LD_VAR 0 2
39792: PPUSH
39793: LD_VAR 0 3
39797: PPUSH
39798: LD_VAR 0 4
39802: PPUSH
39803: LD_VAR 0 5
39807: PPUSH
39808: LD_VAR 0 1
39812: PPUSH
39813: CALL_OW 248
39817: PPUSH
39818: LD_INT 0
39820: PPUSH
39821: CALL 40328 0 6
39825: ST_TO_ADDR
// if not hexes then
39826: LD_VAR 0 12
39830: NOT
39831: IFFALSE 39835
// exit ;
39833: GO 40323
// hex := GetHexInfo ( x , y ) ;
39835: LD_ADDR_VAR 0 15
39839: PUSH
39840: LD_VAR 0 3
39844: PPUSH
39845: LD_VAR 0 4
39849: PPUSH
39850: CALL_OW 546
39854: ST_TO_ADDR
// if hex [ 1 ] then
39855: LD_VAR 0 15
39859: PUSH
39860: LD_INT 1
39862: ARRAY
39863: IFFALSE 39867
// exit ;
39865: GO 40323
// height := hex [ 2 ] ;
39867: LD_ADDR_VAR 0 13
39871: PUSH
39872: LD_VAR 0 15
39876: PUSH
39877: LD_INT 2
39879: ARRAY
39880: ST_TO_ADDR
// for i = 1 to hexes do
39881: LD_ADDR_VAR 0 7
39885: PUSH
39886: DOUBLE
39887: LD_INT 1
39889: DEC
39890: ST_TO_ADDR
39891: LD_VAR 0 12
39895: PUSH
39896: FOR_TO
39897: IFFALSE 40227
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39899: LD_VAR 0 12
39903: PUSH
39904: LD_VAR 0 7
39908: ARRAY
39909: PUSH
39910: LD_INT 1
39912: ARRAY
39913: PPUSH
39914: LD_VAR 0 12
39918: PUSH
39919: LD_VAR 0 7
39923: ARRAY
39924: PUSH
39925: LD_INT 2
39927: ARRAY
39928: PPUSH
39929: CALL_OW 488
39933: NOT
39934: PUSH
39935: LD_VAR 0 12
39939: PUSH
39940: LD_VAR 0 7
39944: ARRAY
39945: PUSH
39946: LD_INT 1
39948: ARRAY
39949: PPUSH
39950: LD_VAR 0 12
39954: PUSH
39955: LD_VAR 0 7
39959: ARRAY
39960: PUSH
39961: LD_INT 2
39963: ARRAY
39964: PPUSH
39965: CALL_OW 428
39969: PUSH
39970: LD_INT 0
39972: GREATER
39973: OR
39974: PUSH
39975: LD_VAR 0 12
39979: PUSH
39980: LD_VAR 0 7
39984: ARRAY
39985: PUSH
39986: LD_INT 1
39988: ARRAY
39989: PPUSH
39990: LD_VAR 0 12
39994: PUSH
39995: LD_VAR 0 7
39999: ARRAY
40000: PUSH
40001: LD_INT 2
40003: ARRAY
40004: PPUSH
40005: CALL_OW 351
40009: OR
40010: IFFALSE 40016
// exit ;
40012: POP
40013: POP
40014: GO 40323
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40016: LD_ADDR_VAR 0 8
40020: PUSH
40021: LD_VAR 0 12
40025: PUSH
40026: LD_VAR 0 7
40030: ARRAY
40031: PUSH
40032: LD_INT 1
40034: ARRAY
40035: PPUSH
40036: LD_VAR 0 12
40040: PUSH
40041: LD_VAR 0 7
40045: ARRAY
40046: PUSH
40047: LD_INT 2
40049: ARRAY
40050: PPUSH
40051: CALL_OW 546
40055: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40056: LD_VAR 0 8
40060: PUSH
40061: LD_INT 1
40063: ARRAY
40064: PUSH
40065: LD_VAR 0 8
40069: PUSH
40070: LD_INT 2
40072: ARRAY
40073: PUSH
40074: LD_VAR 0 13
40078: PUSH
40079: LD_INT 2
40081: PLUS
40082: GREATER
40083: OR
40084: PUSH
40085: LD_VAR 0 8
40089: PUSH
40090: LD_INT 2
40092: ARRAY
40093: PUSH
40094: LD_VAR 0 13
40098: PUSH
40099: LD_INT 2
40101: MINUS
40102: LESS
40103: OR
40104: PUSH
40105: LD_VAR 0 8
40109: PUSH
40110: LD_INT 3
40112: ARRAY
40113: PUSH
40114: LD_INT 0
40116: PUSH
40117: LD_INT 8
40119: PUSH
40120: LD_INT 9
40122: PUSH
40123: LD_INT 10
40125: PUSH
40126: LD_INT 11
40128: PUSH
40129: LD_INT 12
40131: PUSH
40132: LD_INT 13
40134: PUSH
40135: LD_INT 16
40137: PUSH
40138: LD_INT 17
40140: PUSH
40141: LD_INT 18
40143: PUSH
40144: LD_INT 19
40146: PUSH
40147: LD_INT 20
40149: PUSH
40150: LD_INT 21
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: IN
40168: NOT
40169: OR
40170: PUSH
40171: LD_VAR 0 8
40175: PUSH
40176: LD_INT 5
40178: ARRAY
40179: NOT
40180: OR
40181: PUSH
40182: LD_VAR 0 8
40186: PUSH
40187: LD_INT 6
40189: ARRAY
40190: PUSH
40191: LD_INT 1
40193: PUSH
40194: LD_INT 2
40196: PUSH
40197: LD_INT 7
40199: PUSH
40200: LD_INT 9
40202: PUSH
40203: LD_INT 10
40205: PUSH
40206: LD_INT 11
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: IN
40217: NOT
40218: OR
40219: IFFALSE 40225
// exit ;
40221: POP
40222: POP
40223: GO 40323
// end ;
40225: GO 39896
40227: POP
40228: POP
// side := GetSide ( depot ) ;
40229: LD_ADDR_VAR 0 9
40233: PUSH
40234: LD_VAR 0 1
40238: PPUSH
40239: CALL_OW 255
40243: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40244: LD_VAR 0 9
40248: PPUSH
40249: LD_VAR 0 3
40253: PPUSH
40254: LD_VAR 0 4
40258: PPUSH
40259: LD_INT 20
40261: PPUSH
40262: CALL 32644 0 4
40266: PUSH
40267: LD_INT 4
40269: ARRAY
40270: IFFALSE 40274
// exit ;
40272: GO 40323
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40274: LD_VAR 0 2
40278: PUSH
40279: LD_INT 29
40281: PUSH
40282: LD_INT 30
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: IN
40289: PUSH
40290: LD_VAR 0 3
40294: PPUSH
40295: LD_VAR 0 4
40299: PPUSH
40300: LD_VAR 0 9
40304: PPUSH
40305: CALL_OW 440
40309: NOT
40310: AND
40311: IFFALSE 40315
// exit ;
40313: GO 40323
// result := true ;
40315: LD_ADDR_VAR 0 6
40319: PUSH
40320: LD_INT 1
40322: ST_TO_ADDR
// end ;
40323: LD_VAR 0 6
40327: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40328: LD_INT 0
40330: PPUSH
40331: PPUSH
40332: PPUSH
40333: PPUSH
40334: PPUSH
40335: PPUSH
40336: PPUSH
40337: PPUSH
40338: PPUSH
40339: PPUSH
40340: PPUSH
40341: PPUSH
40342: PPUSH
40343: PPUSH
40344: PPUSH
40345: PPUSH
40346: PPUSH
40347: PPUSH
40348: PPUSH
40349: PPUSH
40350: PPUSH
40351: PPUSH
40352: PPUSH
40353: PPUSH
40354: PPUSH
40355: PPUSH
40356: PPUSH
40357: PPUSH
40358: PPUSH
40359: PPUSH
40360: PPUSH
40361: PPUSH
40362: PPUSH
40363: PPUSH
40364: PPUSH
40365: PPUSH
40366: PPUSH
40367: PPUSH
40368: PPUSH
40369: PPUSH
40370: PPUSH
40371: PPUSH
40372: PPUSH
40373: PPUSH
40374: PPUSH
40375: PPUSH
40376: PPUSH
40377: PPUSH
40378: PPUSH
40379: PPUSH
40380: PPUSH
40381: PPUSH
40382: PPUSH
40383: PPUSH
40384: PPUSH
40385: PPUSH
40386: PPUSH
40387: PPUSH
// result = [ ] ;
40388: LD_ADDR_VAR 0 7
40392: PUSH
40393: EMPTY
40394: ST_TO_ADDR
// temp_list = [ ] ;
40395: LD_ADDR_VAR 0 9
40399: PUSH
40400: EMPTY
40401: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40402: LD_VAR 0 4
40406: PUSH
40407: LD_INT 0
40409: PUSH
40410: LD_INT 1
40412: PUSH
40413: LD_INT 2
40415: PUSH
40416: LD_INT 3
40418: PUSH
40419: LD_INT 4
40421: PUSH
40422: LD_INT 5
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: IN
40433: NOT
40434: PUSH
40435: LD_VAR 0 1
40439: PUSH
40440: LD_INT 0
40442: PUSH
40443: LD_INT 1
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: IN
40450: PUSH
40451: LD_VAR 0 5
40455: PUSH
40456: LD_INT 1
40458: PUSH
40459: LD_INT 2
40461: PUSH
40462: LD_INT 3
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: LIST
40469: IN
40470: NOT
40471: AND
40472: OR
40473: IFFALSE 40477
// exit ;
40475: GO 58868
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40477: LD_VAR 0 1
40481: PUSH
40482: LD_INT 6
40484: PUSH
40485: LD_INT 7
40487: PUSH
40488: LD_INT 8
40490: PUSH
40491: LD_INT 13
40493: PUSH
40494: LD_INT 12
40496: PUSH
40497: LD_INT 15
40499: PUSH
40500: LD_INT 11
40502: PUSH
40503: LD_INT 14
40505: PUSH
40506: LD_INT 10
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: IN
40520: IFFALSE 40530
// btype = b_lab ;
40522: LD_ADDR_VAR 0 1
40526: PUSH
40527: LD_INT 6
40529: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40530: LD_VAR 0 6
40534: PUSH
40535: LD_INT 0
40537: PUSH
40538: LD_INT 1
40540: PUSH
40541: LD_INT 2
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: LIST
40548: IN
40549: NOT
40550: PUSH
40551: LD_VAR 0 1
40555: PUSH
40556: LD_INT 0
40558: PUSH
40559: LD_INT 1
40561: PUSH
40562: LD_INT 2
40564: PUSH
40565: LD_INT 3
40567: PUSH
40568: LD_INT 6
40570: PUSH
40571: LD_INT 36
40573: PUSH
40574: LD_INT 4
40576: PUSH
40577: LD_INT 5
40579: PUSH
40580: LD_INT 31
40582: PUSH
40583: LD_INT 32
40585: PUSH
40586: LD_INT 33
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: IN
40602: NOT
40603: PUSH
40604: LD_VAR 0 6
40608: PUSH
40609: LD_INT 1
40611: EQUAL
40612: AND
40613: OR
40614: PUSH
40615: LD_VAR 0 1
40619: PUSH
40620: LD_INT 2
40622: PUSH
40623: LD_INT 3
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: IN
40630: NOT
40631: PUSH
40632: LD_VAR 0 6
40636: PUSH
40637: LD_INT 2
40639: EQUAL
40640: AND
40641: OR
40642: IFFALSE 40652
// mode = 0 ;
40644: LD_ADDR_VAR 0 6
40648: PUSH
40649: LD_INT 0
40651: ST_TO_ADDR
// case mode of 0 :
40652: LD_VAR 0 6
40656: PUSH
40657: LD_INT 0
40659: DOUBLE
40660: EQUAL
40661: IFTRUE 40665
40663: GO 52118
40665: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40666: LD_ADDR_VAR 0 11
40670: PUSH
40671: LD_INT 0
40673: PUSH
40674: LD_INT 0
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 0
40683: PUSH
40684: LD_INT 1
40686: NEG
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: LD_INT 1
40694: PUSH
40695: LD_INT 0
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 1
40704: PUSH
40705: LD_INT 1
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 0
40714: PUSH
40715: LD_INT 1
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 1
40724: NEG
40725: PUSH
40726: LD_INT 0
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 1
40735: NEG
40736: PUSH
40737: LD_INT 1
40739: NEG
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 1
40747: NEG
40748: PUSH
40749: LD_INT 2
40751: NEG
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 0
40759: PUSH
40760: LD_INT 2
40762: NEG
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 1
40770: PUSH
40771: LD_INT 1
40773: NEG
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: LD_INT 1
40781: PUSH
40782: LD_INT 2
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 0
40791: PUSH
40792: LD_INT 2
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 1
40801: NEG
40802: PUSH
40803: LD_INT 1
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 1
40812: PUSH
40813: LD_INT 3
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 0
40822: PUSH
40823: LD_INT 3
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 1
40832: NEG
40833: PUSH
40834: LD_INT 2
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40859: LD_ADDR_VAR 0 12
40863: PUSH
40864: LD_INT 0
40866: PUSH
40867: LD_INT 0
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 0
40876: PUSH
40877: LD_INT 1
40879: NEG
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 1
40887: PUSH
40888: LD_INT 0
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 1
40897: PUSH
40898: LD_INT 1
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 0
40907: PUSH
40908: LD_INT 1
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 1
40917: NEG
40918: PUSH
40919: LD_INT 0
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 1
40928: NEG
40929: PUSH
40930: LD_INT 1
40932: NEG
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 1
40940: PUSH
40941: LD_INT 1
40943: NEG
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 2
40951: PUSH
40952: LD_INT 0
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 2
40961: PUSH
40962: LD_INT 1
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 1
40971: NEG
40972: PUSH
40973: LD_INT 1
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 2
40982: NEG
40983: PUSH
40984: LD_INT 0
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 2
40993: NEG
40994: PUSH
40995: LD_INT 1
40997: NEG
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 2
41005: NEG
41006: PUSH
41007: LD_INT 1
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 3
41016: NEG
41017: PUSH
41018: LD_INT 0
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 3
41027: NEG
41028: PUSH
41029: LD_INT 1
41031: NEG
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41055: LD_ADDR_VAR 0 13
41059: PUSH
41060: LD_INT 0
41062: PUSH
41063: LD_INT 0
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 0
41072: PUSH
41073: LD_INT 1
41075: NEG
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: LD_INT 1
41083: PUSH
41084: LD_INT 0
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 1
41093: PUSH
41094: LD_INT 1
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 0
41103: PUSH
41104: LD_INT 1
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 1
41113: NEG
41114: PUSH
41115: LD_INT 0
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 1
41124: NEG
41125: PUSH
41126: LD_INT 1
41128: NEG
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 1
41136: NEG
41137: PUSH
41138: LD_INT 2
41140: NEG
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 2
41148: PUSH
41149: LD_INT 1
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 2
41158: PUSH
41159: LD_INT 2
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 1
41168: PUSH
41169: LD_INT 2
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 2
41178: NEG
41179: PUSH
41180: LD_INT 1
41182: NEG
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PUSH
41188: LD_INT 2
41190: NEG
41191: PUSH
41192: LD_INT 2
41194: NEG
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 2
41202: NEG
41203: PUSH
41204: LD_INT 3
41206: NEG
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 3
41214: NEG
41215: PUSH
41216: LD_INT 2
41218: NEG
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 3
41226: NEG
41227: PUSH
41228: LD_INT 3
41230: NEG
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41254: LD_ADDR_VAR 0 14
41258: PUSH
41259: LD_INT 0
41261: PUSH
41262: LD_INT 0
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 0
41271: PUSH
41272: LD_INT 1
41274: NEG
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 1
41282: PUSH
41283: LD_INT 0
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 1
41292: PUSH
41293: LD_INT 1
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 0
41302: PUSH
41303: LD_INT 1
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 1
41312: NEG
41313: PUSH
41314: LD_INT 0
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 1
41323: NEG
41324: PUSH
41325: LD_INT 1
41327: NEG
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 1
41335: NEG
41336: PUSH
41337: LD_INT 2
41339: NEG
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 0
41347: PUSH
41348: LD_INT 2
41350: NEG
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 1
41358: PUSH
41359: LD_INT 1
41361: NEG
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 1
41369: PUSH
41370: LD_INT 2
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 0
41379: PUSH
41380: LD_INT 2
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 1
41389: NEG
41390: PUSH
41391: LD_INT 1
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 1
41400: NEG
41401: PUSH
41402: LD_INT 3
41404: NEG
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 0
41412: PUSH
41413: LD_INT 3
41415: NEG
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 1
41423: PUSH
41424: LD_INT 2
41426: NEG
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41450: LD_ADDR_VAR 0 15
41454: PUSH
41455: LD_INT 0
41457: PUSH
41458: LD_INT 0
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: LD_INT 0
41467: PUSH
41468: LD_INT 1
41470: NEG
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 1
41478: PUSH
41479: LD_INT 0
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 1
41488: PUSH
41489: LD_INT 1
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 0
41498: PUSH
41499: LD_INT 1
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 1
41508: NEG
41509: PUSH
41510: LD_INT 0
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 1
41519: NEG
41520: PUSH
41521: LD_INT 1
41523: NEG
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 1
41531: PUSH
41532: LD_INT 1
41534: NEG
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 2
41542: PUSH
41543: LD_INT 0
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 2
41552: PUSH
41553: LD_INT 1
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 1
41562: NEG
41563: PUSH
41564: LD_INT 1
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 2
41573: NEG
41574: PUSH
41575: LD_INT 0
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 2
41584: NEG
41585: PUSH
41586: LD_INT 1
41588: NEG
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 2
41596: PUSH
41597: LD_INT 1
41599: NEG
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 3
41607: PUSH
41608: LD_INT 0
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 3
41617: PUSH
41618: LD_INT 1
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41643: LD_ADDR_VAR 0 16
41647: PUSH
41648: LD_INT 0
41650: PUSH
41651: LD_INT 0
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 0
41660: PUSH
41661: LD_INT 1
41663: NEG
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 1
41671: PUSH
41672: LD_INT 0
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 1
41681: PUSH
41682: LD_INT 1
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 0
41691: PUSH
41692: LD_INT 1
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 1
41701: NEG
41702: PUSH
41703: LD_INT 0
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 1
41712: NEG
41713: PUSH
41714: LD_INT 1
41716: NEG
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 1
41724: NEG
41725: PUSH
41726: LD_INT 2
41728: NEG
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 2
41736: PUSH
41737: LD_INT 1
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 2
41746: PUSH
41747: LD_INT 2
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 1
41756: PUSH
41757: LD_INT 2
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 2
41766: NEG
41767: PUSH
41768: LD_INT 1
41770: NEG
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 2
41778: NEG
41779: PUSH
41780: LD_INT 2
41782: NEG
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 3
41790: PUSH
41791: LD_INT 2
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 3
41800: PUSH
41801: LD_INT 3
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 2
41810: PUSH
41811: LD_INT 3
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41836: LD_ADDR_VAR 0 17
41840: PUSH
41841: LD_INT 0
41843: PUSH
41844: LD_INT 0
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 0
41853: PUSH
41854: LD_INT 1
41856: NEG
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 1
41864: PUSH
41865: LD_INT 0
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 1
41874: PUSH
41875: LD_INT 1
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 0
41884: PUSH
41885: LD_INT 1
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 1
41894: NEG
41895: PUSH
41896: LD_INT 0
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 1
41905: NEG
41906: PUSH
41907: LD_INT 1
41909: NEG
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 1
41917: NEG
41918: PUSH
41919: LD_INT 2
41921: NEG
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 0
41929: PUSH
41930: LD_INT 2
41932: NEG
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 1
41940: PUSH
41941: LD_INT 1
41943: NEG
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 2
41951: PUSH
41952: LD_INT 0
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 2
41961: PUSH
41962: LD_INT 1
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 2
41971: PUSH
41972: LD_INT 2
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 1
41981: PUSH
41982: LD_INT 2
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 0
41991: PUSH
41992: LD_INT 2
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 1
42001: NEG
42002: PUSH
42003: LD_INT 1
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 2
42012: NEG
42013: PUSH
42014: LD_INT 0
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: LD_INT 2
42023: NEG
42024: PUSH
42025: LD_INT 1
42027: NEG
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 2
42035: NEG
42036: PUSH
42037: LD_INT 2
42039: NEG
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42066: LD_ADDR_VAR 0 18
42070: PUSH
42071: LD_INT 0
42073: PUSH
42074: LD_INT 0
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 0
42083: PUSH
42084: LD_INT 1
42086: NEG
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 1
42094: PUSH
42095: LD_INT 0
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: LD_INT 1
42104: PUSH
42105: LD_INT 1
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: LD_INT 0
42114: PUSH
42115: LD_INT 1
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 1
42124: NEG
42125: PUSH
42126: LD_INT 0
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 1
42135: NEG
42136: PUSH
42137: LD_INT 1
42139: NEG
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 1
42147: NEG
42148: PUSH
42149: LD_INT 2
42151: NEG
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 0
42159: PUSH
42160: LD_INT 2
42162: NEG
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 1
42170: PUSH
42171: LD_INT 1
42173: NEG
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 2
42181: PUSH
42182: LD_INT 0
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 2
42191: PUSH
42192: LD_INT 1
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 2
42201: PUSH
42202: LD_INT 2
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 1
42211: PUSH
42212: LD_INT 2
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 0
42221: PUSH
42222: LD_INT 2
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 1
42231: NEG
42232: PUSH
42233: LD_INT 1
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 2
42242: NEG
42243: PUSH
42244: LD_INT 0
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 2
42253: NEG
42254: PUSH
42255: LD_INT 1
42257: NEG
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 2
42265: NEG
42266: PUSH
42267: LD_INT 2
42269: NEG
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42296: LD_ADDR_VAR 0 19
42300: PUSH
42301: LD_INT 0
42303: PUSH
42304: LD_INT 0
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 0
42313: PUSH
42314: LD_INT 1
42316: NEG
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 1
42324: PUSH
42325: LD_INT 0
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 1
42334: PUSH
42335: LD_INT 1
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 0
42344: PUSH
42345: LD_INT 1
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 1
42354: NEG
42355: PUSH
42356: LD_INT 0
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 1
42365: NEG
42366: PUSH
42367: LD_INT 1
42369: NEG
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 1
42377: NEG
42378: PUSH
42379: LD_INT 2
42381: NEG
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 0
42389: PUSH
42390: LD_INT 2
42392: NEG
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 1
42400: PUSH
42401: LD_INT 1
42403: NEG
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 2
42411: PUSH
42412: LD_INT 0
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: LD_INT 2
42421: PUSH
42422: LD_INT 1
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 2
42431: PUSH
42432: LD_INT 2
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 1
42441: PUSH
42442: LD_INT 2
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 0
42451: PUSH
42452: LD_INT 2
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: LD_INT 1
42461: NEG
42462: PUSH
42463: LD_INT 1
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 2
42472: NEG
42473: PUSH
42474: LD_INT 0
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 2
42483: NEG
42484: PUSH
42485: LD_INT 1
42487: NEG
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 2
42495: NEG
42496: PUSH
42497: LD_INT 2
42499: NEG
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42526: LD_ADDR_VAR 0 20
42530: PUSH
42531: LD_INT 0
42533: PUSH
42534: LD_INT 0
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 0
42543: PUSH
42544: LD_INT 1
42546: NEG
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 1
42554: PUSH
42555: LD_INT 0
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: LD_INT 1
42564: PUSH
42565: LD_INT 1
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 0
42574: PUSH
42575: LD_INT 1
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 1
42584: NEG
42585: PUSH
42586: LD_INT 0
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 1
42595: NEG
42596: PUSH
42597: LD_INT 1
42599: NEG
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 1
42607: NEG
42608: PUSH
42609: LD_INT 2
42611: NEG
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 0
42619: PUSH
42620: LD_INT 2
42622: NEG
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 1
42630: PUSH
42631: LD_INT 1
42633: NEG
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 2
42641: PUSH
42642: LD_INT 0
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 2
42651: PUSH
42652: LD_INT 1
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 2
42661: PUSH
42662: LD_INT 2
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 1
42671: PUSH
42672: LD_INT 2
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 0
42681: PUSH
42682: LD_INT 2
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 1
42691: NEG
42692: PUSH
42693: LD_INT 1
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 2
42702: NEG
42703: PUSH
42704: LD_INT 0
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 2
42713: NEG
42714: PUSH
42715: LD_INT 1
42717: NEG
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 2
42725: NEG
42726: PUSH
42727: LD_INT 2
42729: NEG
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42756: LD_ADDR_VAR 0 21
42760: PUSH
42761: LD_INT 0
42763: PUSH
42764: LD_INT 0
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 0
42773: PUSH
42774: LD_INT 1
42776: NEG
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 1
42784: PUSH
42785: LD_INT 0
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 1
42794: PUSH
42795: LD_INT 1
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 0
42804: PUSH
42805: LD_INT 1
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 1
42814: NEG
42815: PUSH
42816: LD_INT 0
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 1
42825: NEG
42826: PUSH
42827: LD_INT 1
42829: NEG
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 1
42837: NEG
42838: PUSH
42839: LD_INT 2
42841: NEG
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 0
42849: PUSH
42850: LD_INT 2
42852: NEG
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 1
42860: PUSH
42861: LD_INT 1
42863: NEG
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 2
42871: PUSH
42872: LD_INT 0
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 2
42881: PUSH
42882: LD_INT 1
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 2
42891: PUSH
42892: LD_INT 2
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 1
42901: PUSH
42902: LD_INT 2
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 0
42911: PUSH
42912: LD_INT 2
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 1
42921: NEG
42922: PUSH
42923: LD_INT 1
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 2
42932: NEG
42933: PUSH
42934: LD_INT 0
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 2
42943: NEG
42944: PUSH
42945: LD_INT 1
42947: NEG
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 2
42955: NEG
42956: PUSH
42957: LD_INT 2
42959: NEG
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42986: LD_ADDR_VAR 0 22
42990: PUSH
42991: LD_INT 0
42993: PUSH
42994: LD_INT 0
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 0
43003: PUSH
43004: LD_INT 1
43006: NEG
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 1
43014: PUSH
43015: LD_INT 0
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 1
43024: PUSH
43025: LD_INT 1
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 0
43034: PUSH
43035: LD_INT 1
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 1
43044: NEG
43045: PUSH
43046: LD_INT 0
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 1
43055: NEG
43056: PUSH
43057: LD_INT 1
43059: NEG
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 1
43067: NEG
43068: PUSH
43069: LD_INT 2
43071: NEG
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 0
43079: PUSH
43080: LD_INT 2
43082: NEG
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 1
43090: PUSH
43091: LD_INT 1
43093: NEG
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 2
43101: PUSH
43102: LD_INT 0
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 2
43111: PUSH
43112: LD_INT 1
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 2
43121: PUSH
43122: LD_INT 2
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 1
43131: PUSH
43132: LD_INT 2
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 0
43141: PUSH
43142: LD_INT 2
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 1
43151: NEG
43152: PUSH
43153: LD_INT 1
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 2
43162: NEG
43163: PUSH
43164: LD_INT 0
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 2
43173: NEG
43174: PUSH
43175: LD_INT 1
43177: NEG
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 2
43185: NEG
43186: PUSH
43187: LD_INT 2
43189: NEG
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43216: LD_ADDR_VAR 0 23
43220: PUSH
43221: LD_INT 0
43223: PUSH
43224: LD_INT 0
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 0
43233: PUSH
43234: LD_INT 1
43236: NEG
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 1
43244: PUSH
43245: LD_INT 0
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 1
43254: PUSH
43255: LD_INT 1
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 0
43264: PUSH
43265: LD_INT 1
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 1
43274: NEG
43275: PUSH
43276: LD_INT 0
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 1
43285: NEG
43286: PUSH
43287: LD_INT 1
43289: NEG
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 1
43297: NEG
43298: PUSH
43299: LD_INT 2
43301: NEG
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 0
43309: PUSH
43310: LD_INT 2
43312: NEG
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 1
43320: PUSH
43321: LD_INT 1
43323: NEG
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 2
43331: PUSH
43332: LD_INT 0
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 2
43341: PUSH
43342: LD_INT 1
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 2
43351: PUSH
43352: LD_INT 2
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 1
43361: PUSH
43362: LD_INT 2
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 0
43371: PUSH
43372: LD_INT 2
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 1
43381: NEG
43382: PUSH
43383: LD_INT 1
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 2
43392: NEG
43393: PUSH
43394: LD_INT 0
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 2
43403: NEG
43404: PUSH
43405: LD_INT 1
43407: NEG
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 2
43415: NEG
43416: PUSH
43417: LD_INT 2
43419: NEG
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 2
43427: NEG
43428: PUSH
43429: LD_INT 3
43431: NEG
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 1
43439: NEG
43440: PUSH
43441: LD_INT 3
43443: NEG
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: LD_INT 1
43451: PUSH
43452: LD_INT 2
43454: NEG
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 2
43462: PUSH
43463: LD_INT 1
43465: NEG
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43496: LD_ADDR_VAR 0 24
43500: PUSH
43501: LD_INT 0
43503: PUSH
43504: LD_INT 0
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 0
43513: PUSH
43514: LD_INT 1
43516: NEG
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 1
43524: PUSH
43525: LD_INT 0
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 1
43534: PUSH
43535: LD_INT 1
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 0
43544: PUSH
43545: LD_INT 1
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 1
43554: NEG
43555: PUSH
43556: LD_INT 0
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 1
43565: NEG
43566: PUSH
43567: LD_INT 1
43569: NEG
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 1
43577: NEG
43578: PUSH
43579: LD_INT 2
43581: NEG
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 0
43589: PUSH
43590: LD_INT 2
43592: NEG
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 1
43600: PUSH
43601: LD_INT 1
43603: NEG
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 2
43611: PUSH
43612: LD_INT 0
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 2
43621: PUSH
43622: LD_INT 1
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 2
43631: PUSH
43632: LD_INT 2
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 1
43641: PUSH
43642: LD_INT 2
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 0
43651: PUSH
43652: LD_INT 2
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 1
43661: NEG
43662: PUSH
43663: LD_INT 1
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 2
43672: NEG
43673: PUSH
43674: LD_INT 0
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 2
43683: NEG
43684: PUSH
43685: LD_INT 1
43687: NEG
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 2
43695: NEG
43696: PUSH
43697: LD_INT 2
43699: NEG
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 1
43707: PUSH
43708: LD_INT 2
43710: NEG
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 2
43718: PUSH
43719: LD_INT 1
43721: NEG
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 3
43729: PUSH
43730: LD_INT 1
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 3
43739: PUSH
43740: LD_INT 2
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43772: LD_ADDR_VAR 0 25
43776: PUSH
43777: LD_INT 0
43779: PUSH
43780: LD_INT 0
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 0
43789: PUSH
43790: LD_INT 1
43792: NEG
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 1
43800: PUSH
43801: LD_INT 0
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 1
43810: PUSH
43811: LD_INT 1
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 0
43820: PUSH
43821: LD_INT 1
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 1
43830: NEG
43831: PUSH
43832: LD_INT 0
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 1
43841: NEG
43842: PUSH
43843: LD_INT 1
43845: NEG
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 1
43853: NEG
43854: PUSH
43855: LD_INT 2
43857: NEG
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 0
43865: PUSH
43866: LD_INT 2
43868: NEG
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 1
43876: PUSH
43877: LD_INT 1
43879: NEG
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 2
43887: PUSH
43888: LD_INT 0
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 2
43897: PUSH
43898: LD_INT 1
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 2
43907: PUSH
43908: LD_INT 2
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 1
43917: PUSH
43918: LD_INT 2
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: LD_INT 2
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 1
43937: NEG
43938: PUSH
43939: LD_INT 1
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 2
43948: NEG
43949: PUSH
43950: LD_INT 0
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 2
43959: NEG
43960: PUSH
43961: LD_INT 1
43963: NEG
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 2
43971: NEG
43972: PUSH
43973: LD_INT 2
43975: NEG
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 3
43983: PUSH
43984: LD_INT 1
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 3
43993: PUSH
43994: LD_INT 2
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 2
44003: PUSH
44004: LD_INT 3
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 1
44013: PUSH
44014: LD_INT 3
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44046: LD_ADDR_VAR 0 26
44050: PUSH
44051: LD_INT 0
44053: PUSH
44054: LD_INT 0
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 0
44063: PUSH
44064: LD_INT 1
44066: NEG
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 1
44074: PUSH
44075: LD_INT 0
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: LD_INT 1
44084: PUSH
44085: LD_INT 1
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 0
44094: PUSH
44095: LD_INT 1
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 1
44104: NEG
44105: PUSH
44106: LD_INT 0
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 1
44115: NEG
44116: PUSH
44117: LD_INT 1
44119: NEG
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 1
44127: NEG
44128: PUSH
44129: LD_INT 2
44131: NEG
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 0
44139: PUSH
44140: LD_INT 2
44142: NEG
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 1
44150: PUSH
44151: LD_INT 1
44153: NEG
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 2
44161: PUSH
44162: LD_INT 0
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 2
44171: PUSH
44172: LD_INT 1
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 2
44181: PUSH
44182: LD_INT 2
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 1
44191: PUSH
44192: LD_INT 2
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 0
44201: PUSH
44202: LD_INT 2
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 1
44211: NEG
44212: PUSH
44213: LD_INT 1
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 2
44222: NEG
44223: PUSH
44224: LD_INT 0
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 2
44233: NEG
44234: PUSH
44235: LD_INT 1
44237: NEG
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 2
44245: NEG
44246: PUSH
44247: LD_INT 2
44249: NEG
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 2
44257: PUSH
44258: LD_INT 3
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 1
44267: PUSH
44268: LD_INT 3
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 1
44277: NEG
44278: PUSH
44279: LD_INT 2
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 2
44288: NEG
44289: PUSH
44290: LD_INT 1
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44322: LD_ADDR_VAR 0 27
44326: PUSH
44327: LD_INT 0
44329: PUSH
44330: LD_INT 0
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 0
44339: PUSH
44340: LD_INT 1
44342: NEG
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 1
44350: PUSH
44351: LD_INT 0
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 1
44360: PUSH
44361: LD_INT 1
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 0
44370: PUSH
44371: LD_INT 1
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 1
44380: NEG
44381: PUSH
44382: LD_INT 0
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 1
44391: NEG
44392: PUSH
44393: LD_INT 1
44395: NEG
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 1
44403: NEG
44404: PUSH
44405: LD_INT 2
44407: NEG
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 0
44415: PUSH
44416: LD_INT 2
44418: NEG
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 1
44426: PUSH
44427: LD_INT 1
44429: NEG
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 2
44437: PUSH
44438: LD_INT 0
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 2
44447: PUSH
44448: LD_INT 1
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 2
44457: PUSH
44458: LD_INT 2
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 1
44467: PUSH
44468: LD_INT 2
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 0
44477: PUSH
44478: LD_INT 2
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 1
44487: NEG
44488: PUSH
44489: LD_INT 1
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 2
44498: NEG
44499: PUSH
44500: LD_INT 0
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 2
44509: NEG
44510: PUSH
44511: LD_INT 1
44513: NEG
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 2
44521: NEG
44522: PUSH
44523: LD_INT 2
44525: NEG
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 1
44533: NEG
44534: PUSH
44535: LD_INT 2
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 2
44544: NEG
44545: PUSH
44546: LD_INT 1
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 3
44555: NEG
44556: PUSH
44557: LD_INT 1
44559: NEG
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 3
44567: NEG
44568: PUSH
44569: LD_INT 2
44571: NEG
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44602: LD_ADDR_VAR 0 28
44606: PUSH
44607: LD_INT 0
44609: PUSH
44610: LD_INT 0
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 0
44619: PUSH
44620: LD_INT 1
44622: NEG
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 1
44630: PUSH
44631: LD_INT 0
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 1
44640: PUSH
44641: LD_INT 1
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 0
44650: PUSH
44651: LD_INT 1
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 1
44660: NEG
44661: PUSH
44662: LD_INT 0
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 1
44671: NEG
44672: PUSH
44673: LD_INT 1
44675: NEG
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 1
44683: NEG
44684: PUSH
44685: LD_INT 2
44687: NEG
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 0
44695: PUSH
44696: LD_INT 2
44698: NEG
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 1
44706: PUSH
44707: LD_INT 1
44709: NEG
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 2
44717: PUSH
44718: LD_INT 0
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 2
44727: PUSH
44728: LD_INT 1
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 2
44737: PUSH
44738: LD_INT 2
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 1
44747: PUSH
44748: LD_INT 2
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 0
44757: PUSH
44758: LD_INT 2
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 1
44767: NEG
44768: PUSH
44769: LD_INT 1
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 2
44778: NEG
44779: PUSH
44780: LD_INT 0
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 2
44789: NEG
44790: PUSH
44791: LD_INT 1
44793: NEG
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 2
44801: NEG
44802: PUSH
44803: LD_INT 2
44805: NEG
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 2
44813: NEG
44814: PUSH
44815: LD_INT 3
44817: NEG
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 1
44825: NEG
44826: PUSH
44827: LD_INT 3
44829: NEG
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 3
44837: NEG
44838: PUSH
44839: LD_INT 1
44841: NEG
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 3
44849: NEG
44850: PUSH
44851: LD_INT 2
44853: NEG
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44884: LD_ADDR_VAR 0 29
44888: PUSH
44889: LD_INT 0
44891: PUSH
44892: LD_INT 0
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 0
44901: PUSH
44902: LD_INT 1
44904: NEG
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 1
44912: PUSH
44913: LD_INT 0
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 1
44922: PUSH
44923: LD_INT 1
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 0
44932: PUSH
44933: LD_INT 1
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 1
44942: NEG
44943: PUSH
44944: LD_INT 0
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 1
44953: NEG
44954: PUSH
44955: LD_INT 1
44957: NEG
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 1
44965: NEG
44966: PUSH
44967: LD_INT 2
44969: NEG
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 0
44977: PUSH
44978: LD_INT 2
44980: NEG
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 1
44988: PUSH
44989: LD_INT 1
44991: NEG
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 2
44999: PUSH
45000: LD_INT 0
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 2
45009: PUSH
45010: LD_INT 1
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 1
45019: PUSH
45020: LD_INT 2
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 0
45029: PUSH
45030: LD_INT 2
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 1
45039: NEG
45040: PUSH
45041: LD_INT 1
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 2
45050: NEG
45051: PUSH
45052: LD_INT 1
45054: NEG
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 2
45062: NEG
45063: PUSH
45064: LD_INT 2
45066: NEG
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 2
45074: NEG
45075: PUSH
45076: LD_INT 3
45078: NEG
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 2
45086: PUSH
45087: LD_INT 1
45089: NEG
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 3
45097: PUSH
45098: LD_INT 1
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 1
45107: PUSH
45108: LD_INT 3
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 1
45117: NEG
45118: PUSH
45119: LD_INT 2
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 3
45128: NEG
45129: PUSH
45130: LD_INT 2
45132: NEG
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45163: LD_ADDR_VAR 0 30
45167: PUSH
45168: LD_INT 0
45170: PUSH
45171: LD_INT 0
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 0
45180: PUSH
45181: LD_INT 1
45183: NEG
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 1
45191: PUSH
45192: LD_INT 0
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 1
45201: PUSH
45202: LD_INT 1
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 0
45211: PUSH
45212: LD_INT 1
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 1
45221: NEG
45222: PUSH
45223: LD_INT 0
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 1
45232: NEG
45233: PUSH
45234: LD_INT 1
45236: NEG
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 1
45244: NEG
45245: PUSH
45246: LD_INT 2
45248: NEG
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 0
45256: PUSH
45257: LD_INT 2
45259: NEG
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 1
45267: PUSH
45268: LD_INT 1
45270: NEG
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 2
45278: PUSH
45279: LD_INT 0
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 2
45288: PUSH
45289: LD_INT 1
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 2
45298: PUSH
45299: LD_INT 2
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 1
45308: PUSH
45309: LD_INT 2
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 1
45318: NEG
45319: PUSH
45320: LD_INT 1
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 2
45329: NEG
45330: PUSH
45331: LD_INT 0
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 2
45340: NEG
45341: PUSH
45342: LD_INT 1
45344: NEG
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 1
45352: NEG
45353: PUSH
45354: LD_INT 3
45356: NEG
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 1
45364: PUSH
45365: LD_INT 2
45367: NEG
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 3
45375: PUSH
45376: LD_INT 2
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 2
45385: PUSH
45386: LD_INT 3
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 2
45395: NEG
45396: PUSH
45397: LD_INT 1
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 3
45406: NEG
45407: PUSH
45408: LD_INT 1
45410: NEG
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45441: LD_ADDR_VAR 0 31
45445: PUSH
45446: LD_INT 0
45448: PUSH
45449: LD_INT 0
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 0
45458: PUSH
45459: LD_INT 1
45461: NEG
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 1
45469: PUSH
45470: LD_INT 0
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 1
45479: PUSH
45480: LD_INT 1
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 0
45489: PUSH
45490: LD_INT 1
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 1
45499: NEG
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 1
45510: NEG
45511: PUSH
45512: LD_INT 1
45514: NEG
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 1
45522: NEG
45523: PUSH
45524: LD_INT 2
45526: NEG
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 1
45534: PUSH
45535: LD_INT 1
45537: NEG
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 2
45545: PUSH
45546: LD_INT 0
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 2
45555: PUSH
45556: LD_INT 1
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 2
45565: PUSH
45566: LD_INT 2
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 1
45575: PUSH
45576: LD_INT 2
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 0
45585: PUSH
45586: LD_INT 2
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 1
45595: NEG
45596: PUSH
45597: LD_INT 1
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 2
45606: NEG
45607: PUSH
45608: LD_INT 1
45610: NEG
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 2
45618: NEG
45619: PUSH
45620: LD_INT 2
45622: NEG
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 2
45630: NEG
45631: PUSH
45632: LD_INT 3
45634: NEG
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 2
45642: PUSH
45643: LD_INT 1
45645: NEG
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 3
45653: PUSH
45654: LD_INT 1
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 1
45663: PUSH
45664: LD_INT 3
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 1
45673: NEG
45674: PUSH
45675: LD_INT 2
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 3
45684: NEG
45685: PUSH
45686: LD_INT 2
45688: NEG
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45719: LD_ADDR_VAR 0 32
45723: PUSH
45724: LD_INT 0
45726: PUSH
45727: LD_INT 0
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 0
45736: PUSH
45737: LD_INT 1
45739: NEG
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 1
45747: PUSH
45748: LD_INT 0
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 1
45757: PUSH
45758: LD_INT 1
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 0
45767: PUSH
45768: LD_INT 1
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 1
45777: NEG
45778: PUSH
45779: LD_INT 0
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 1
45788: NEG
45789: PUSH
45790: LD_INT 1
45792: NEG
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 1
45800: NEG
45801: PUSH
45802: LD_INT 2
45804: NEG
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 0
45812: PUSH
45813: LD_INT 2
45815: NEG
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 1
45823: PUSH
45824: LD_INT 1
45826: NEG
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 2
45834: PUSH
45835: LD_INT 1
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 2
45844: PUSH
45845: LD_INT 2
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 1
45854: PUSH
45855: LD_INT 2
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 0
45864: PUSH
45865: LD_INT 2
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 1
45874: NEG
45875: PUSH
45876: LD_INT 1
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 2
45885: NEG
45886: PUSH
45887: LD_INT 0
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 2
45896: NEG
45897: PUSH
45898: LD_INT 1
45900: NEG
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 1
45908: NEG
45909: PUSH
45910: LD_INT 3
45912: NEG
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 1
45920: PUSH
45921: LD_INT 2
45923: NEG
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 3
45931: PUSH
45932: LD_INT 2
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 2
45941: PUSH
45942: LD_INT 3
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 2
45951: NEG
45952: PUSH
45953: LD_INT 1
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 3
45962: NEG
45963: PUSH
45964: LD_INT 1
45966: NEG
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45997: LD_ADDR_VAR 0 33
46001: PUSH
46002: LD_INT 0
46004: PUSH
46005: LD_INT 0
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 0
46014: PUSH
46015: LD_INT 1
46017: NEG
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 1
46025: PUSH
46026: LD_INT 0
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 1
46035: PUSH
46036: LD_INT 1
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 0
46045: PUSH
46046: LD_INT 1
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 1
46055: NEG
46056: PUSH
46057: LD_INT 0
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 1
46066: NEG
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 1
46078: NEG
46079: PUSH
46080: LD_INT 2
46082: NEG
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 1
46090: PUSH
46091: LD_INT 1
46093: NEG
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 2
46101: PUSH
46102: LD_INT 0
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 2
46111: PUSH
46112: LD_INT 1
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 1
46121: PUSH
46122: LD_INT 2
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 0
46131: PUSH
46132: LD_INT 2
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 1
46141: NEG
46142: PUSH
46143: LD_INT 1
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 2
46152: NEG
46153: PUSH
46154: LD_INT 0
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 2
46163: NEG
46164: PUSH
46165: LD_INT 1
46167: NEG
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 2
46175: NEG
46176: PUSH
46177: LD_INT 2
46179: NEG
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 2
46187: NEG
46188: PUSH
46189: LD_INT 3
46191: NEG
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 2
46199: PUSH
46200: LD_INT 1
46202: NEG
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 3
46210: PUSH
46211: LD_INT 1
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 1
46220: PUSH
46221: LD_INT 3
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 1
46230: NEG
46231: PUSH
46232: LD_INT 2
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 3
46241: NEG
46242: PUSH
46243: LD_INT 2
46245: NEG
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46276: LD_ADDR_VAR 0 34
46280: PUSH
46281: LD_INT 0
46283: PUSH
46284: LD_INT 0
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 0
46293: PUSH
46294: LD_INT 1
46296: NEG
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 1
46304: PUSH
46305: LD_INT 0
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 1
46314: PUSH
46315: LD_INT 1
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 0
46324: PUSH
46325: LD_INT 1
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 1
46334: NEG
46335: PUSH
46336: LD_INT 0
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 1
46345: NEG
46346: PUSH
46347: LD_INT 1
46349: NEG
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 1
46357: NEG
46358: PUSH
46359: LD_INT 2
46361: NEG
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 0
46369: PUSH
46370: LD_INT 2
46372: NEG
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 1
46380: PUSH
46381: LD_INT 1
46383: NEG
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 2
46391: PUSH
46392: LD_INT 1
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 2
46401: PUSH
46402: LD_INT 2
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 1
46411: PUSH
46412: LD_INT 2
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 1
46421: NEG
46422: PUSH
46423: LD_INT 1
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 2
46432: NEG
46433: PUSH
46434: LD_INT 0
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 2
46443: NEG
46444: PUSH
46445: LD_INT 1
46447: NEG
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 2
46455: NEG
46456: PUSH
46457: LD_INT 2
46459: NEG
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 1
46467: NEG
46468: PUSH
46469: LD_INT 3
46471: NEG
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 1
46479: PUSH
46480: LD_INT 2
46482: NEG
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 3
46490: PUSH
46491: LD_INT 2
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 2
46500: PUSH
46501: LD_INT 3
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 2
46510: NEG
46511: PUSH
46512: LD_INT 1
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 3
46521: NEG
46522: PUSH
46523: LD_INT 1
46525: NEG
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46556: LD_ADDR_VAR 0 35
46560: PUSH
46561: LD_INT 0
46563: PUSH
46564: LD_INT 0
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 0
46573: PUSH
46574: LD_INT 1
46576: NEG
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 1
46584: PUSH
46585: LD_INT 0
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 1
46594: PUSH
46595: LD_INT 1
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 0
46604: PUSH
46605: LD_INT 1
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 1
46614: NEG
46615: PUSH
46616: LD_INT 0
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 1
46625: NEG
46626: PUSH
46627: LD_INT 1
46629: NEG
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 2
46637: PUSH
46638: LD_INT 1
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 2
46647: NEG
46648: PUSH
46649: LD_INT 1
46651: NEG
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46668: LD_ADDR_VAR 0 36
46672: PUSH
46673: LD_INT 0
46675: PUSH
46676: LD_INT 0
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 0
46685: PUSH
46686: LD_INT 1
46688: NEG
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 1
46696: PUSH
46697: LD_INT 0
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 1
46706: PUSH
46707: LD_INT 1
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 0
46716: PUSH
46717: LD_INT 1
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 1
46726: NEG
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 1
46737: NEG
46738: PUSH
46739: LD_INT 1
46741: NEG
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 1
46749: NEG
46750: PUSH
46751: LD_INT 2
46753: NEG
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 1
46761: PUSH
46762: LD_INT 2
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46780: LD_ADDR_VAR 0 37
46784: PUSH
46785: LD_INT 0
46787: PUSH
46788: LD_INT 0
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 0
46797: PUSH
46798: LD_INT 1
46800: NEG
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 1
46808: PUSH
46809: LD_INT 0
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 1
46818: PUSH
46819: LD_INT 1
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 0
46828: PUSH
46829: LD_INT 1
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 1
46838: NEG
46839: PUSH
46840: LD_INT 0
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 1
46849: NEG
46850: PUSH
46851: LD_INT 1
46853: NEG
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 1
46861: PUSH
46862: LD_INT 1
46864: NEG
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 1
46872: NEG
46873: PUSH
46874: LD_INT 1
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46892: LD_ADDR_VAR 0 38
46896: PUSH
46897: LD_INT 0
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 0
46909: PUSH
46910: LD_INT 1
46912: NEG
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 1
46920: PUSH
46921: LD_INT 0
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 1
46930: PUSH
46931: LD_INT 1
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 0
46940: PUSH
46941: LD_INT 1
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 1
46950: NEG
46951: PUSH
46952: LD_INT 0
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 1
46961: NEG
46962: PUSH
46963: LD_INT 1
46965: NEG
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 2
46973: PUSH
46974: LD_INT 1
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 2
46983: NEG
46984: PUSH
46985: LD_INT 1
46987: NEG
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47004: LD_ADDR_VAR 0 39
47008: PUSH
47009: LD_INT 0
47011: PUSH
47012: LD_INT 0
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 0
47021: PUSH
47022: LD_INT 1
47024: NEG
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 1
47032: PUSH
47033: LD_INT 0
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 1
47042: PUSH
47043: LD_INT 1
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 0
47052: PUSH
47053: LD_INT 1
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 1
47062: NEG
47063: PUSH
47064: LD_INT 0
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 1
47073: NEG
47074: PUSH
47075: LD_INT 1
47077: NEG
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 1
47085: NEG
47086: PUSH
47087: LD_INT 2
47089: NEG
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 1
47097: PUSH
47098: LD_INT 2
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47116: LD_ADDR_VAR 0 40
47120: PUSH
47121: LD_INT 0
47123: PUSH
47124: LD_INT 0
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 0
47133: PUSH
47134: LD_INT 1
47136: NEG
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 1
47144: PUSH
47145: LD_INT 0
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 1
47154: PUSH
47155: LD_INT 1
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 0
47164: PUSH
47165: LD_INT 1
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 1
47174: NEG
47175: PUSH
47176: LD_INT 0
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 1
47185: NEG
47186: PUSH
47187: LD_INT 1
47189: NEG
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 1
47197: PUSH
47198: LD_INT 1
47200: NEG
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 1
47208: NEG
47209: PUSH
47210: LD_INT 1
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47228: LD_ADDR_VAR 0 41
47232: PUSH
47233: LD_INT 0
47235: PUSH
47236: LD_INT 0
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 0
47245: PUSH
47246: LD_INT 1
47248: NEG
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 1
47256: PUSH
47257: LD_INT 0
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 1
47266: PUSH
47267: LD_INT 1
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 0
47276: PUSH
47277: LD_INT 1
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 1
47286: NEG
47287: PUSH
47288: LD_INT 0
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 1
47297: NEG
47298: PUSH
47299: LD_INT 1
47301: NEG
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 1
47309: NEG
47310: PUSH
47311: LD_INT 2
47313: NEG
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 1
47321: PUSH
47322: LD_INT 1
47324: NEG
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 2
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 2
47342: PUSH
47343: LD_INT 1
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 2
47352: PUSH
47353: LD_INT 2
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 1
47362: PUSH
47363: LD_INT 2
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 1
47372: NEG
47373: PUSH
47374: LD_INT 1
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 2
47383: NEG
47384: PUSH
47385: LD_INT 0
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 2
47394: NEG
47395: PUSH
47396: LD_INT 1
47398: NEG
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 2
47406: NEG
47407: PUSH
47408: LD_INT 2
47410: NEG
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 2
47418: NEG
47419: PUSH
47420: LD_INT 3
47422: NEG
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 2
47430: PUSH
47431: LD_INT 1
47433: NEG
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 3
47441: PUSH
47442: LD_INT 0
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 3
47451: PUSH
47452: LD_INT 1
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 3
47461: PUSH
47462: LD_INT 2
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 3
47471: PUSH
47472: LD_INT 3
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 2
47481: PUSH
47482: LD_INT 3
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 2
47491: NEG
47492: PUSH
47493: LD_INT 1
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 3
47502: NEG
47503: PUSH
47504: LD_INT 0
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 3
47513: NEG
47514: PUSH
47515: LD_INT 1
47517: NEG
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 3
47525: NEG
47526: PUSH
47527: LD_INT 2
47529: NEG
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 3
47537: NEG
47538: PUSH
47539: LD_INT 3
47541: NEG
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47578: LD_ADDR_VAR 0 42
47582: PUSH
47583: LD_INT 0
47585: PUSH
47586: LD_INT 0
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 0
47595: PUSH
47596: LD_INT 1
47598: NEG
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 1
47606: PUSH
47607: LD_INT 0
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 1
47616: PUSH
47617: LD_INT 1
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 0
47626: PUSH
47627: LD_INT 1
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 1
47636: NEG
47637: PUSH
47638: LD_INT 0
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 1
47647: NEG
47648: PUSH
47649: LD_INT 1
47651: NEG
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 1
47659: NEG
47660: PUSH
47661: LD_INT 2
47663: NEG
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 0
47671: PUSH
47672: LD_INT 2
47674: NEG
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 1
47682: PUSH
47683: LD_INT 1
47685: NEG
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 2
47693: PUSH
47694: LD_INT 1
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 2
47703: PUSH
47704: LD_INT 2
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 1
47713: PUSH
47714: LD_INT 2
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 0
47723: PUSH
47724: LD_INT 2
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 1
47733: NEG
47734: PUSH
47735: LD_INT 1
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 2
47744: NEG
47745: PUSH
47746: LD_INT 1
47748: NEG
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 2
47756: NEG
47757: PUSH
47758: LD_INT 2
47760: NEG
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 2
47768: NEG
47769: PUSH
47770: LD_INT 3
47772: NEG
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 1
47780: NEG
47781: PUSH
47782: LD_INT 3
47784: NEG
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 0
47792: PUSH
47793: LD_INT 3
47795: NEG
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 1
47803: PUSH
47804: LD_INT 2
47806: NEG
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 3
47814: PUSH
47815: LD_INT 2
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 3
47824: PUSH
47825: LD_INT 3
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 2
47834: PUSH
47835: LD_INT 3
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 1
47844: PUSH
47845: LD_INT 3
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 0
47854: PUSH
47855: LD_INT 3
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 1
47864: NEG
47865: PUSH
47866: LD_INT 2
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 3
47875: NEG
47876: PUSH
47877: LD_INT 2
47879: NEG
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 3
47887: NEG
47888: PUSH
47889: LD_INT 3
47891: NEG
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47928: LD_ADDR_VAR 0 43
47932: PUSH
47933: LD_INT 0
47935: PUSH
47936: LD_INT 0
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 0
47945: PUSH
47946: LD_INT 1
47948: NEG
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 1
47956: PUSH
47957: LD_INT 0
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 1
47966: PUSH
47967: LD_INT 1
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 0
47976: PUSH
47977: LD_INT 1
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 1
47986: NEG
47987: PUSH
47988: LD_INT 0
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 1
47997: NEG
47998: PUSH
47999: LD_INT 1
48001: NEG
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 1
48009: NEG
48010: PUSH
48011: LD_INT 2
48013: NEG
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 0
48021: PUSH
48022: LD_INT 2
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 1
48032: PUSH
48033: LD_INT 1
48035: NEG
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 2
48043: PUSH
48044: LD_INT 0
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 2
48053: PUSH
48054: LD_INT 1
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 1
48063: PUSH
48064: LD_INT 2
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 0
48073: PUSH
48074: LD_INT 2
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 1
48083: NEG
48084: PUSH
48085: LD_INT 1
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 2
48094: NEG
48095: PUSH
48096: LD_INT 0
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 2
48105: NEG
48106: PUSH
48107: LD_INT 1
48109: NEG
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 1
48117: NEG
48118: PUSH
48119: LD_INT 3
48121: NEG
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 0
48129: PUSH
48130: LD_INT 3
48132: NEG
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 1
48140: PUSH
48141: LD_INT 2
48143: NEG
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 2
48151: PUSH
48152: LD_INT 1
48154: NEG
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 3
48162: PUSH
48163: LD_INT 0
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 3
48172: PUSH
48173: LD_INT 1
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 1
48182: PUSH
48183: LD_INT 3
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 0
48192: PUSH
48193: LD_INT 3
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 1
48202: NEG
48203: PUSH
48204: LD_INT 2
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 2
48213: NEG
48214: PUSH
48215: LD_INT 1
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 3
48224: NEG
48225: PUSH
48226: LD_INT 0
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 3
48235: NEG
48236: PUSH
48237: LD_INT 1
48239: NEG
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48276: LD_ADDR_VAR 0 44
48280: PUSH
48281: LD_INT 0
48283: PUSH
48284: LD_INT 0
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 0
48293: PUSH
48294: LD_INT 1
48296: NEG
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 1
48304: PUSH
48305: LD_INT 0
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 1
48314: PUSH
48315: LD_INT 1
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 0
48324: PUSH
48325: LD_INT 1
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: NEG
48335: PUSH
48336: LD_INT 0
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 1
48345: NEG
48346: PUSH
48347: LD_INT 1
48349: NEG
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 1
48357: NEG
48358: PUSH
48359: LD_INT 2
48361: NEG
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 1
48369: PUSH
48370: LD_INT 1
48372: NEG
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 2
48380: PUSH
48381: LD_INT 0
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 2
48390: PUSH
48391: LD_INT 1
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 2
48400: PUSH
48401: LD_INT 2
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 1
48410: PUSH
48411: LD_INT 2
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 1
48420: NEG
48421: PUSH
48422: LD_INT 1
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 2
48431: NEG
48432: PUSH
48433: LD_INT 0
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 2
48442: NEG
48443: PUSH
48444: LD_INT 1
48446: NEG
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 2
48454: NEG
48455: PUSH
48456: LD_INT 2
48458: NEG
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 2
48466: NEG
48467: PUSH
48468: LD_INT 3
48470: NEG
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 2
48478: PUSH
48479: LD_INT 1
48481: NEG
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 3
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 3
48499: PUSH
48500: LD_INT 1
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 3
48509: PUSH
48510: LD_INT 2
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 3
48519: PUSH
48520: LD_INT 3
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 2
48529: PUSH
48530: LD_INT 3
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 2
48539: NEG
48540: PUSH
48541: LD_INT 1
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 3
48550: NEG
48551: PUSH
48552: LD_INT 0
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 3
48561: NEG
48562: PUSH
48563: LD_INT 1
48565: NEG
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 3
48573: NEG
48574: PUSH
48575: LD_INT 2
48577: NEG
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 3
48585: NEG
48586: PUSH
48587: LD_INT 3
48589: NEG
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48626: LD_ADDR_VAR 0 45
48630: PUSH
48631: LD_INT 0
48633: PUSH
48634: LD_INT 0
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 0
48643: PUSH
48644: LD_INT 1
48646: NEG
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 1
48654: PUSH
48655: LD_INT 0
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 1
48664: PUSH
48665: LD_INT 1
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 0
48674: PUSH
48675: LD_INT 1
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 1
48684: NEG
48685: PUSH
48686: LD_INT 0
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 1
48695: NEG
48696: PUSH
48697: LD_INT 1
48699: NEG
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 1
48707: NEG
48708: PUSH
48709: LD_INT 2
48711: NEG
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 0
48719: PUSH
48720: LD_INT 2
48722: NEG
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 1
48730: PUSH
48731: LD_INT 1
48733: NEG
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 2
48741: PUSH
48742: LD_INT 1
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 2
48751: PUSH
48752: LD_INT 2
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 1
48761: PUSH
48762: LD_INT 2
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 0
48771: PUSH
48772: LD_INT 2
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 1
48781: NEG
48782: PUSH
48783: LD_INT 1
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 2
48792: NEG
48793: PUSH
48794: LD_INT 1
48796: NEG
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 2
48804: NEG
48805: PUSH
48806: LD_INT 2
48808: NEG
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 2
48816: NEG
48817: PUSH
48818: LD_INT 3
48820: NEG
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 1
48828: NEG
48829: PUSH
48830: LD_INT 3
48832: NEG
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 0
48840: PUSH
48841: LD_INT 3
48843: NEG
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 1
48851: PUSH
48852: LD_INT 2
48854: NEG
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 3
48862: PUSH
48863: LD_INT 2
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 3
48872: PUSH
48873: LD_INT 3
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 2
48882: PUSH
48883: LD_INT 3
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 1
48892: PUSH
48893: LD_INT 3
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 0
48902: PUSH
48903: LD_INT 3
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 1
48912: NEG
48913: PUSH
48914: LD_INT 2
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 3
48923: NEG
48924: PUSH
48925: LD_INT 2
48927: NEG
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 3
48935: NEG
48936: PUSH
48937: LD_INT 3
48939: NEG
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48976: LD_ADDR_VAR 0 46
48980: PUSH
48981: LD_INT 0
48983: PUSH
48984: LD_INT 0
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 0
48993: PUSH
48994: LD_INT 1
48996: NEG
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 1
49004: PUSH
49005: LD_INT 0
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 1
49014: PUSH
49015: LD_INT 1
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 0
49024: PUSH
49025: LD_INT 1
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 1
49034: NEG
49035: PUSH
49036: LD_INT 0
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 1
49045: NEG
49046: PUSH
49047: LD_INT 1
49049: NEG
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 1
49057: NEG
49058: PUSH
49059: LD_INT 2
49061: NEG
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 0
49069: PUSH
49070: LD_INT 2
49072: NEG
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 1
49080: PUSH
49081: LD_INT 1
49083: NEG
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 2
49091: PUSH
49092: LD_INT 0
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 2
49101: PUSH
49102: LD_INT 1
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 1
49111: PUSH
49112: LD_INT 2
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 0
49121: PUSH
49122: LD_INT 2
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 1
49131: NEG
49132: PUSH
49133: LD_INT 1
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 2
49142: NEG
49143: PUSH
49144: LD_INT 0
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 2
49153: NEG
49154: PUSH
49155: LD_INT 1
49157: NEG
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 1
49165: NEG
49166: PUSH
49167: LD_INT 3
49169: NEG
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 0
49177: PUSH
49178: LD_INT 3
49180: NEG
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 1
49188: PUSH
49189: LD_INT 2
49191: NEG
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 2
49199: PUSH
49200: LD_INT 1
49202: NEG
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 3
49210: PUSH
49211: LD_INT 0
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 3
49220: PUSH
49221: LD_INT 1
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 1
49230: PUSH
49231: LD_INT 3
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 0
49240: PUSH
49241: LD_INT 3
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 1
49250: NEG
49251: PUSH
49252: LD_INT 2
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 2
49261: NEG
49262: PUSH
49263: LD_INT 1
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 3
49272: NEG
49273: PUSH
49274: LD_INT 0
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 3
49283: NEG
49284: PUSH
49285: LD_INT 1
49287: NEG
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49324: LD_ADDR_VAR 0 47
49328: PUSH
49329: LD_INT 0
49331: PUSH
49332: LD_INT 0
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 0
49341: PUSH
49342: LD_INT 1
49344: NEG
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 1
49352: PUSH
49353: LD_INT 0
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 1
49362: PUSH
49363: LD_INT 1
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 0
49372: PUSH
49373: LD_INT 1
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 1
49382: NEG
49383: PUSH
49384: LD_INT 0
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 1
49393: NEG
49394: PUSH
49395: LD_INT 1
49397: NEG
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 1
49405: NEG
49406: PUSH
49407: LD_INT 2
49409: NEG
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 0
49417: PUSH
49418: LD_INT 2
49420: NEG
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 1
49428: PUSH
49429: LD_INT 1
49431: NEG
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 2
49439: NEG
49440: PUSH
49441: LD_INT 1
49443: NEG
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 2
49451: NEG
49452: PUSH
49453: LD_INT 2
49455: NEG
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49475: LD_ADDR_VAR 0 48
49479: PUSH
49480: LD_INT 0
49482: PUSH
49483: LD_INT 0
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 0
49492: PUSH
49493: LD_INT 1
49495: NEG
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 1
49503: PUSH
49504: LD_INT 0
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 1
49513: PUSH
49514: LD_INT 1
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 0
49523: PUSH
49524: LD_INT 1
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 1
49533: NEG
49534: PUSH
49535: LD_INT 0
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 1
49544: NEG
49545: PUSH
49546: LD_INT 1
49548: NEG
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 1
49556: NEG
49557: PUSH
49558: LD_INT 2
49560: NEG
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 0
49568: PUSH
49569: LD_INT 2
49571: NEG
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 1
49579: PUSH
49580: LD_INT 1
49582: NEG
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 2
49590: PUSH
49591: LD_INT 0
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 2
49600: PUSH
49601: LD_INT 1
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49622: LD_ADDR_VAR 0 49
49626: PUSH
49627: LD_INT 0
49629: PUSH
49630: LD_INT 0
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 0
49639: PUSH
49640: LD_INT 1
49642: NEG
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 1
49650: PUSH
49651: LD_INT 0
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 1
49660: PUSH
49661: LD_INT 1
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 0
49670: PUSH
49671: LD_INT 1
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 1
49680: NEG
49681: PUSH
49682: LD_INT 0
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 1
49691: NEG
49692: PUSH
49693: LD_INT 1
49695: NEG
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 1
49703: PUSH
49704: LD_INT 1
49706: NEG
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 2
49714: PUSH
49715: LD_INT 0
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 2
49724: PUSH
49725: LD_INT 1
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 2
49734: PUSH
49735: LD_INT 2
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 1
49744: PUSH
49745: LD_INT 2
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49766: LD_ADDR_VAR 0 50
49770: PUSH
49771: LD_INT 0
49773: PUSH
49774: LD_INT 0
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: LD_INT 1
49786: NEG
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 1
49794: PUSH
49795: LD_INT 0
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 1
49804: PUSH
49805: LD_INT 1
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 0
49814: PUSH
49815: LD_INT 1
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 1
49824: NEG
49825: PUSH
49826: LD_INT 0
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 1
49835: NEG
49836: PUSH
49837: LD_INT 1
49839: NEG
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 2
49847: PUSH
49848: LD_INT 1
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 2
49857: PUSH
49858: LD_INT 2
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 1
49867: PUSH
49868: LD_INT 2
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 0
49877: PUSH
49878: LD_INT 2
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 1
49887: NEG
49888: PUSH
49889: LD_INT 1
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49910: LD_ADDR_VAR 0 51
49914: PUSH
49915: LD_INT 0
49917: PUSH
49918: LD_INT 0
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 0
49927: PUSH
49928: LD_INT 1
49930: NEG
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 1
49938: PUSH
49939: LD_INT 0
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 1
49948: PUSH
49949: LD_INT 1
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 0
49958: PUSH
49959: LD_INT 1
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 1
49968: NEG
49969: PUSH
49970: LD_INT 0
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 1
49979: NEG
49980: PUSH
49981: LD_INT 1
49983: NEG
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 1
49991: PUSH
49992: LD_INT 2
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 0
50001: PUSH
50002: LD_INT 2
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 1
50011: NEG
50012: PUSH
50013: LD_INT 1
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 2
50022: NEG
50023: PUSH
50024: LD_INT 0
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 2
50033: NEG
50034: PUSH
50035: LD_INT 1
50037: NEG
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50057: LD_ADDR_VAR 0 52
50061: PUSH
50062: LD_INT 0
50064: PUSH
50065: LD_INT 0
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 0
50074: PUSH
50075: LD_INT 1
50077: NEG
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 1
50085: PUSH
50086: LD_INT 0
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 1
50095: PUSH
50096: LD_INT 1
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 0
50105: PUSH
50106: LD_INT 1
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 1
50115: NEG
50116: PUSH
50117: LD_INT 0
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 1
50126: NEG
50127: PUSH
50128: LD_INT 1
50130: NEG
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 1
50138: NEG
50139: PUSH
50140: LD_INT 2
50142: NEG
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 1
50150: NEG
50151: PUSH
50152: LD_INT 1
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 2
50161: NEG
50162: PUSH
50163: LD_INT 0
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 2
50172: NEG
50173: PUSH
50174: LD_INT 1
50176: NEG
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 2
50184: NEG
50185: PUSH
50186: LD_INT 2
50188: NEG
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50208: LD_ADDR_VAR 0 53
50212: PUSH
50213: LD_INT 0
50215: PUSH
50216: LD_INT 0
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 0
50225: PUSH
50226: LD_INT 1
50228: NEG
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 1
50236: PUSH
50237: LD_INT 0
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 1
50246: PUSH
50247: LD_INT 1
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 0
50256: PUSH
50257: LD_INT 1
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 1
50266: NEG
50267: PUSH
50268: LD_INT 0
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 1
50277: NEG
50278: PUSH
50279: LD_INT 1
50281: NEG
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 1
50289: NEG
50290: PUSH
50291: LD_INT 2
50293: NEG
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 0
50301: PUSH
50302: LD_INT 2
50304: NEG
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 1
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 2
50323: PUSH
50324: LD_INT 0
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 2
50333: PUSH
50334: LD_INT 1
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 2
50343: PUSH
50344: LD_INT 2
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 1
50353: PUSH
50354: LD_INT 2
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 0
50363: PUSH
50364: LD_INT 2
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 1
50373: NEG
50374: PUSH
50375: LD_INT 1
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 2
50384: NEG
50385: PUSH
50386: LD_INT 0
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 2
50395: NEG
50396: PUSH
50397: LD_INT 1
50399: NEG
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 2
50407: NEG
50408: PUSH
50409: LD_INT 2
50411: NEG
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50438: LD_ADDR_VAR 0 54
50442: PUSH
50443: LD_INT 0
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 0
50455: PUSH
50456: LD_INT 1
50458: NEG
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 1
50466: PUSH
50467: LD_INT 0
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 1
50476: PUSH
50477: LD_INT 1
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 0
50486: PUSH
50487: LD_INT 1
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 1
50496: NEG
50497: PUSH
50498: LD_INT 0
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 1
50507: NEG
50508: PUSH
50509: LD_INT 1
50511: NEG
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 1
50519: NEG
50520: PUSH
50521: LD_INT 2
50523: NEG
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 0
50531: PUSH
50532: LD_INT 2
50534: NEG
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 1
50542: PUSH
50543: LD_INT 1
50545: NEG
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 2
50553: PUSH
50554: LD_INT 0
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 2
50563: PUSH
50564: LD_INT 1
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 2
50573: PUSH
50574: LD_INT 2
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 1
50583: PUSH
50584: LD_INT 2
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 0
50593: PUSH
50594: LD_INT 2
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 1
50603: NEG
50604: PUSH
50605: LD_INT 1
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 2
50614: NEG
50615: PUSH
50616: LD_INT 0
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 2
50625: NEG
50626: PUSH
50627: LD_INT 1
50629: NEG
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 2
50637: NEG
50638: PUSH
50639: LD_INT 2
50641: NEG
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50668: LD_ADDR_VAR 0 55
50672: PUSH
50673: LD_INT 0
50675: PUSH
50676: LD_INT 0
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 0
50685: PUSH
50686: LD_INT 1
50688: NEG
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 1
50696: PUSH
50697: LD_INT 0
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 1
50706: PUSH
50707: LD_INT 1
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 0
50716: PUSH
50717: LD_INT 1
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 1
50726: NEG
50727: PUSH
50728: LD_INT 0
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 1
50737: NEG
50738: PUSH
50739: LD_INT 1
50741: NEG
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 1
50749: NEG
50750: PUSH
50751: LD_INT 2
50753: NEG
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 0
50761: PUSH
50762: LD_INT 2
50764: NEG
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 1
50772: PUSH
50773: LD_INT 1
50775: NEG
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 2
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 2
50793: PUSH
50794: LD_INT 1
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 2
50803: PUSH
50804: LD_INT 2
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 1
50813: PUSH
50814: LD_INT 2
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 0
50823: PUSH
50824: LD_INT 2
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 1
50833: NEG
50834: PUSH
50835: LD_INT 1
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 2
50844: NEG
50845: PUSH
50846: LD_INT 0
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 2
50855: NEG
50856: PUSH
50857: LD_INT 1
50859: NEG
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 2
50867: NEG
50868: PUSH
50869: LD_INT 2
50871: NEG
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50898: LD_ADDR_VAR 0 56
50902: PUSH
50903: LD_INT 0
50905: PUSH
50906: LD_INT 0
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 0
50915: PUSH
50916: LD_INT 1
50918: NEG
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 1
50926: PUSH
50927: LD_INT 0
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 1
50936: PUSH
50937: LD_INT 1
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 0
50946: PUSH
50947: LD_INT 1
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 1
50956: NEG
50957: PUSH
50958: LD_INT 0
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 1
50967: NEG
50968: PUSH
50969: LD_INT 1
50971: NEG
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 1
50979: NEG
50980: PUSH
50981: LD_INT 2
50983: NEG
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 0
50991: PUSH
50992: LD_INT 2
50994: NEG
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 1
51002: PUSH
51003: LD_INT 1
51005: NEG
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 2
51013: PUSH
51014: LD_INT 0
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 2
51023: PUSH
51024: LD_INT 1
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 2
51033: PUSH
51034: LD_INT 2
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 1
51043: PUSH
51044: LD_INT 2
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 0
51053: PUSH
51054: LD_INT 2
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 1
51063: NEG
51064: PUSH
51065: LD_INT 1
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 2
51074: NEG
51075: PUSH
51076: LD_INT 0
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 2
51085: NEG
51086: PUSH
51087: LD_INT 1
51089: NEG
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 2
51097: NEG
51098: PUSH
51099: LD_INT 2
51101: NEG
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51128: LD_ADDR_VAR 0 57
51132: PUSH
51133: LD_INT 0
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 0
51145: PUSH
51146: LD_INT 1
51148: NEG
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 1
51156: PUSH
51157: LD_INT 0
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 1
51166: PUSH
51167: LD_INT 1
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 0
51176: PUSH
51177: LD_INT 1
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 1
51186: NEG
51187: PUSH
51188: LD_INT 0
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 1
51197: NEG
51198: PUSH
51199: LD_INT 1
51201: NEG
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 1
51209: NEG
51210: PUSH
51211: LD_INT 2
51213: NEG
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 0
51221: PUSH
51222: LD_INT 2
51224: NEG
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 1
51232: PUSH
51233: LD_INT 1
51235: NEG
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 2
51243: PUSH
51244: LD_INT 0
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 2
51253: PUSH
51254: LD_INT 1
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 2
51263: PUSH
51264: LD_INT 2
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 1
51273: PUSH
51274: LD_INT 2
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 0
51283: PUSH
51284: LD_INT 2
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 1
51293: NEG
51294: PUSH
51295: LD_INT 1
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 2
51304: NEG
51305: PUSH
51306: LD_INT 0
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 2
51315: NEG
51316: PUSH
51317: LD_INT 1
51319: NEG
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 2
51327: NEG
51328: PUSH
51329: LD_INT 2
51331: NEG
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51358: LD_ADDR_VAR 0 58
51362: PUSH
51363: LD_INT 0
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 0
51375: PUSH
51376: LD_INT 1
51378: NEG
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 1
51386: PUSH
51387: LD_INT 0
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 1
51396: PUSH
51397: LD_INT 1
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 0
51406: PUSH
51407: LD_INT 1
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 1
51416: NEG
51417: PUSH
51418: LD_INT 0
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 1
51427: NEG
51428: PUSH
51429: LD_INT 1
51431: NEG
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 1
51439: NEG
51440: PUSH
51441: LD_INT 2
51443: NEG
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 0
51451: PUSH
51452: LD_INT 2
51454: NEG
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 1
51462: PUSH
51463: LD_INT 1
51465: NEG
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 2
51473: PUSH
51474: LD_INT 0
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 2
51483: PUSH
51484: LD_INT 1
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 2
51493: PUSH
51494: LD_INT 2
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 1
51503: PUSH
51504: LD_INT 2
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 0
51513: PUSH
51514: LD_INT 2
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 1
51523: NEG
51524: PUSH
51525: LD_INT 1
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 2
51534: NEG
51535: PUSH
51536: LD_INT 0
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 2
51545: NEG
51546: PUSH
51547: LD_INT 1
51549: NEG
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 2
51557: NEG
51558: PUSH
51559: LD_INT 2
51561: NEG
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51588: LD_ADDR_VAR 0 59
51592: PUSH
51593: LD_INT 0
51595: PUSH
51596: LD_INT 0
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 0
51605: PUSH
51606: LD_INT 1
51608: NEG
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 1
51616: PUSH
51617: LD_INT 0
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 1
51626: PUSH
51627: LD_INT 1
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 0
51636: PUSH
51637: LD_INT 1
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 1
51646: NEG
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 1
51657: NEG
51658: PUSH
51659: LD_INT 1
51661: NEG
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51676: LD_ADDR_VAR 0 60
51680: PUSH
51681: LD_INT 0
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 0
51693: PUSH
51694: LD_INT 1
51696: NEG
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 1
51704: PUSH
51705: LD_INT 0
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 1
51714: PUSH
51715: LD_INT 1
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: LD_INT 1
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 1
51734: NEG
51735: PUSH
51736: LD_INT 0
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: NEG
51746: PUSH
51747: LD_INT 1
51749: NEG
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51764: LD_ADDR_VAR 0 61
51768: PUSH
51769: LD_INT 0
51771: PUSH
51772: LD_INT 0
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 0
51781: PUSH
51782: LD_INT 1
51784: NEG
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 1
51792: PUSH
51793: LD_INT 0
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 1
51802: PUSH
51803: LD_INT 1
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: LD_INT 1
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 1
51822: NEG
51823: PUSH
51824: LD_INT 0
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 1
51833: NEG
51834: PUSH
51835: LD_INT 1
51837: NEG
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51852: LD_ADDR_VAR 0 62
51856: PUSH
51857: LD_INT 0
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 0
51869: PUSH
51870: LD_INT 1
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 1
51880: PUSH
51881: LD_INT 0
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 1
51890: PUSH
51891: LD_INT 1
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 0
51900: PUSH
51901: LD_INT 1
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 1
51910: NEG
51911: PUSH
51912: LD_INT 0
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 1
51921: NEG
51922: PUSH
51923: LD_INT 1
51925: NEG
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51940: LD_ADDR_VAR 0 63
51944: PUSH
51945: LD_INT 0
51947: PUSH
51948: LD_INT 0
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 0
51957: PUSH
51958: LD_INT 1
51960: NEG
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 1
51968: PUSH
51969: LD_INT 0
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 1
51978: PUSH
51979: LD_INT 1
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 0
51988: PUSH
51989: LD_INT 1
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 1
51998: NEG
51999: PUSH
52000: LD_INT 0
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 1
52009: NEG
52010: PUSH
52011: LD_INT 1
52013: NEG
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52028: LD_ADDR_VAR 0 64
52032: PUSH
52033: LD_INT 0
52035: PUSH
52036: LD_INT 0
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 0
52045: PUSH
52046: LD_INT 1
52048: NEG
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 1
52056: PUSH
52057: LD_INT 0
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 1
52066: PUSH
52067: LD_INT 1
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 0
52076: PUSH
52077: LD_INT 1
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 1
52086: NEG
52087: PUSH
52088: LD_INT 0
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 1
52097: NEG
52098: PUSH
52099: LD_INT 1
52101: NEG
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: ST_TO_ADDR
// end ; 1 :
52116: GO 58013
52118: LD_INT 1
52120: DOUBLE
52121: EQUAL
52122: IFTRUE 52126
52124: GO 54749
52126: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52127: LD_ADDR_VAR 0 11
52131: PUSH
52132: LD_INT 1
52134: NEG
52135: PUSH
52136: LD_INT 3
52138: NEG
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 0
52146: PUSH
52147: LD_INT 3
52149: NEG
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 1
52157: PUSH
52158: LD_INT 2
52160: NEG
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: LIST
52170: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52171: LD_ADDR_VAR 0 12
52175: PUSH
52176: LD_INT 2
52178: PUSH
52179: LD_INT 1
52181: NEG
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 3
52189: PUSH
52190: LD_INT 0
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 3
52199: PUSH
52200: LD_INT 1
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: LIST
52211: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52212: LD_ADDR_VAR 0 13
52216: PUSH
52217: LD_INT 3
52219: PUSH
52220: LD_INT 2
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 3
52229: PUSH
52230: LD_INT 3
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 2
52239: PUSH
52240: LD_INT 3
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: LIST
52251: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52252: LD_ADDR_VAR 0 14
52256: PUSH
52257: LD_INT 1
52259: PUSH
52260: LD_INT 3
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 0
52269: PUSH
52270: LD_INT 3
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 1
52279: NEG
52280: PUSH
52281: LD_INT 2
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: LIST
52292: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52293: LD_ADDR_VAR 0 15
52297: PUSH
52298: LD_INT 2
52300: NEG
52301: PUSH
52302: LD_INT 1
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 3
52311: NEG
52312: PUSH
52313: LD_INT 0
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 3
52322: NEG
52323: PUSH
52324: LD_INT 1
52326: NEG
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: LIST
52336: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52337: LD_ADDR_VAR 0 16
52341: PUSH
52342: LD_INT 2
52344: NEG
52345: PUSH
52346: LD_INT 3
52348: NEG
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 3
52356: NEG
52357: PUSH
52358: LD_INT 2
52360: NEG
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 3
52368: NEG
52369: PUSH
52370: LD_INT 3
52372: NEG
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: LIST
52382: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52383: LD_ADDR_VAR 0 17
52387: PUSH
52388: LD_INT 1
52390: NEG
52391: PUSH
52392: LD_INT 3
52394: NEG
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 0
52402: PUSH
52403: LD_INT 3
52405: NEG
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 1
52413: PUSH
52414: LD_INT 2
52416: NEG
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: LIST
52426: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52427: LD_ADDR_VAR 0 18
52431: PUSH
52432: LD_INT 2
52434: PUSH
52435: LD_INT 1
52437: NEG
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 3
52445: PUSH
52446: LD_INT 0
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 3
52455: PUSH
52456: LD_INT 1
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: LIST
52467: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52468: LD_ADDR_VAR 0 19
52472: PUSH
52473: LD_INT 3
52475: PUSH
52476: LD_INT 2
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 3
52485: PUSH
52486: LD_INT 3
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 2
52495: PUSH
52496: LD_INT 3
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: LIST
52507: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52508: LD_ADDR_VAR 0 20
52512: PUSH
52513: LD_INT 1
52515: PUSH
52516: LD_INT 3
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 0
52525: PUSH
52526: LD_INT 3
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 1
52535: NEG
52536: PUSH
52537: LD_INT 2
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: LIST
52548: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52549: LD_ADDR_VAR 0 21
52553: PUSH
52554: LD_INT 2
52556: NEG
52557: PUSH
52558: LD_INT 1
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 3
52567: NEG
52568: PUSH
52569: LD_INT 0
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 3
52578: NEG
52579: PUSH
52580: LD_INT 1
52582: NEG
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: LIST
52592: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52593: LD_ADDR_VAR 0 22
52597: PUSH
52598: LD_INT 2
52600: NEG
52601: PUSH
52602: LD_INT 3
52604: NEG
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 3
52612: NEG
52613: PUSH
52614: LD_INT 2
52616: NEG
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 3
52624: NEG
52625: PUSH
52626: LD_INT 3
52628: NEG
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: LIST
52638: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52639: LD_ADDR_VAR 0 23
52643: PUSH
52644: LD_INT 0
52646: PUSH
52647: LD_INT 3
52649: NEG
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 1
52657: NEG
52658: PUSH
52659: LD_INT 4
52661: NEG
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 1
52669: PUSH
52670: LD_INT 3
52672: NEG
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: LIST
52682: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52683: LD_ADDR_VAR 0 24
52687: PUSH
52688: LD_INT 3
52690: PUSH
52691: LD_INT 0
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 3
52700: PUSH
52701: LD_INT 1
52703: NEG
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 4
52711: PUSH
52712: LD_INT 1
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: LIST
52723: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52724: LD_ADDR_VAR 0 25
52728: PUSH
52729: LD_INT 3
52731: PUSH
52732: LD_INT 3
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 4
52741: PUSH
52742: LD_INT 3
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 3
52751: PUSH
52752: LD_INT 4
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: LIST
52763: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52764: LD_ADDR_VAR 0 26
52768: PUSH
52769: LD_INT 0
52771: PUSH
52772: LD_INT 3
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 1
52781: PUSH
52782: LD_INT 4
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 1
52791: NEG
52792: PUSH
52793: LD_INT 3
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: LIST
52804: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52805: LD_ADDR_VAR 0 27
52809: PUSH
52810: LD_INT 3
52812: NEG
52813: PUSH
52814: LD_INT 0
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 3
52823: NEG
52824: PUSH
52825: LD_INT 1
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 4
52834: NEG
52835: PUSH
52836: LD_INT 1
52838: NEG
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: LIST
52848: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52849: LD_ADDR_VAR 0 28
52853: PUSH
52854: LD_INT 3
52856: NEG
52857: PUSH
52858: LD_INT 3
52860: NEG
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 3
52868: NEG
52869: PUSH
52870: LD_INT 4
52872: NEG
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 4
52880: NEG
52881: PUSH
52882: LD_INT 3
52884: NEG
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: LIST
52894: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52895: LD_ADDR_VAR 0 29
52899: PUSH
52900: LD_INT 1
52902: NEG
52903: PUSH
52904: LD_INT 3
52906: NEG
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 0
52914: PUSH
52915: LD_INT 3
52917: NEG
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 1
52925: PUSH
52926: LD_INT 2
52928: NEG
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 1
52936: NEG
52937: PUSH
52938: LD_INT 4
52940: NEG
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 0
52948: PUSH
52949: LD_INT 4
52951: NEG
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 1
52959: PUSH
52960: LD_INT 3
52962: NEG
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 1
52970: NEG
52971: PUSH
52972: LD_INT 5
52974: NEG
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 0
52982: PUSH
52983: LD_INT 5
52985: NEG
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 1
52993: PUSH
52994: LD_INT 4
52996: NEG
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 1
53004: NEG
53005: PUSH
53006: LD_INT 6
53008: NEG
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 0
53016: PUSH
53017: LD_INT 6
53019: NEG
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 1
53027: PUSH
53028: LD_INT 5
53030: NEG
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53050: LD_ADDR_VAR 0 30
53054: PUSH
53055: LD_INT 2
53057: PUSH
53058: LD_INT 1
53060: NEG
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 3
53068: PUSH
53069: LD_INT 0
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 3
53078: PUSH
53079: LD_INT 1
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 3
53088: PUSH
53089: LD_INT 1
53091: NEG
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 4
53099: PUSH
53100: LD_INT 0
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 4
53109: PUSH
53110: LD_INT 1
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 4
53119: PUSH
53120: LD_INT 1
53122: NEG
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 5
53130: PUSH
53131: LD_INT 0
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 5
53140: PUSH
53141: LD_INT 1
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 5
53150: PUSH
53151: LD_INT 1
53153: NEG
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 6
53161: PUSH
53162: LD_INT 0
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 6
53171: PUSH
53172: LD_INT 1
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53193: LD_ADDR_VAR 0 31
53197: PUSH
53198: LD_INT 3
53200: PUSH
53201: LD_INT 2
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 3
53210: PUSH
53211: LD_INT 3
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 2
53220: PUSH
53221: LD_INT 3
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 4
53230: PUSH
53231: LD_INT 3
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 4
53240: PUSH
53241: LD_INT 4
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 3
53250: PUSH
53251: LD_INT 4
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 5
53260: PUSH
53261: LD_INT 4
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 5
53270: PUSH
53271: LD_INT 5
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 4
53280: PUSH
53281: LD_INT 5
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 6
53290: PUSH
53291: LD_INT 5
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 6
53300: PUSH
53301: LD_INT 6
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 5
53310: PUSH
53311: LD_INT 6
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53332: LD_ADDR_VAR 0 32
53336: PUSH
53337: LD_INT 1
53339: PUSH
53340: LD_INT 3
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 0
53349: PUSH
53350: LD_INT 3
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 1
53359: NEG
53360: PUSH
53361: LD_INT 2
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 1
53370: PUSH
53371: LD_INT 4
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 0
53380: PUSH
53381: LD_INT 4
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 1
53390: NEG
53391: PUSH
53392: LD_INT 3
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 1
53401: PUSH
53402: LD_INT 5
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 0
53411: PUSH
53412: LD_INT 5
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 1
53421: NEG
53422: PUSH
53423: LD_INT 4
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 1
53432: PUSH
53433: LD_INT 6
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 0
53442: PUSH
53443: LD_INT 6
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 1
53452: NEG
53453: PUSH
53454: LD_INT 5
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53475: LD_ADDR_VAR 0 33
53479: PUSH
53480: LD_INT 2
53482: NEG
53483: PUSH
53484: LD_INT 1
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 3
53493: NEG
53494: PUSH
53495: LD_INT 0
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 3
53504: NEG
53505: PUSH
53506: LD_INT 1
53508: NEG
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 3
53516: NEG
53517: PUSH
53518: LD_INT 1
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 4
53527: NEG
53528: PUSH
53529: LD_INT 0
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 4
53538: NEG
53539: PUSH
53540: LD_INT 1
53542: NEG
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 4
53550: NEG
53551: PUSH
53552: LD_INT 1
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 5
53561: NEG
53562: PUSH
53563: LD_INT 0
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 5
53572: NEG
53573: PUSH
53574: LD_INT 1
53576: NEG
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 5
53584: NEG
53585: PUSH
53586: LD_INT 1
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 6
53595: NEG
53596: PUSH
53597: LD_INT 0
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 6
53606: NEG
53607: PUSH
53608: LD_INT 1
53610: NEG
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53630: LD_ADDR_VAR 0 34
53634: PUSH
53635: LD_INT 2
53637: NEG
53638: PUSH
53639: LD_INT 3
53641: NEG
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 3
53649: NEG
53650: PUSH
53651: LD_INT 2
53653: NEG
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 3
53661: NEG
53662: PUSH
53663: LD_INT 3
53665: NEG
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 3
53673: NEG
53674: PUSH
53675: LD_INT 4
53677: NEG
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 4
53685: NEG
53686: PUSH
53687: LD_INT 3
53689: NEG
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 4
53697: NEG
53698: PUSH
53699: LD_INT 4
53701: NEG
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 4
53709: NEG
53710: PUSH
53711: LD_INT 5
53713: NEG
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 5
53721: NEG
53722: PUSH
53723: LD_INT 4
53725: NEG
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 5
53733: NEG
53734: PUSH
53735: LD_INT 5
53737: NEG
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 5
53745: NEG
53746: PUSH
53747: LD_INT 6
53749: NEG
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 6
53757: NEG
53758: PUSH
53759: LD_INT 5
53761: NEG
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 6
53769: NEG
53770: PUSH
53771: LD_INT 6
53773: NEG
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53793: LD_ADDR_VAR 0 41
53797: PUSH
53798: LD_INT 0
53800: PUSH
53801: LD_INT 2
53803: NEG
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 1
53811: NEG
53812: PUSH
53813: LD_INT 3
53815: NEG
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 1
53823: PUSH
53824: LD_INT 2
53826: NEG
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: LIST
53836: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53837: LD_ADDR_VAR 0 42
53841: PUSH
53842: LD_INT 2
53844: PUSH
53845: LD_INT 0
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 2
53854: PUSH
53855: LD_INT 1
53857: NEG
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 3
53865: PUSH
53866: LD_INT 1
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: LIST
53877: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53878: LD_ADDR_VAR 0 43
53882: PUSH
53883: LD_INT 2
53885: PUSH
53886: LD_INT 2
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 3
53895: PUSH
53896: LD_INT 2
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 2
53905: PUSH
53906: LD_INT 3
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: LIST
53917: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53918: LD_ADDR_VAR 0 44
53922: PUSH
53923: LD_INT 0
53925: PUSH
53926: LD_INT 2
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 1
53935: PUSH
53936: LD_INT 3
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 1
53945: NEG
53946: PUSH
53947: LD_INT 2
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: LIST
53958: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53959: LD_ADDR_VAR 0 45
53963: PUSH
53964: LD_INT 2
53966: NEG
53967: PUSH
53968: LD_INT 0
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 2
53977: NEG
53978: PUSH
53979: LD_INT 1
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 3
53988: NEG
53989: PUSH
53990: LD_INT 1
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: LIST
54002: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54003: LD_ADDR_VAR 0 46
54007: PUSH
54008: LD_INT 2
54010: NEG
54011: PUSH
54012: LD_INT 2
54014: NEG
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 2
54022: NEG
54023: PUSH
54024: LD_INT 3
54026: NEG
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 3
54034: NEG
54035: PUSH
54036: LD_INT 2
54038: NEG
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: LIST
54048: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54049: LD_ADDR_VAR 0 47
54053: PUSH
54054: LD_INT 2
54056: NEG
54057: PUSH
54058: LD_INT 3
54060: NEG
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 1
54068: NEG
54069: PUSH
54070: LD_INT 3
54072: NEG
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54082: LD_ADDR_VAR 0 48
54086: PUSH
54087: LD_INT 1
54089: PUSH
54090: LD_INT 2
54092: NEG
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 2
54100: PUSH
54101: LD_INT 1
54103: NEG
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54113: LD_ADDR_VAR 0 49
54117: PUSH
54118: LD_INT 3
54120: PUSH
54121: LD_INT 1
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 3
54130: PUSH
54131: LD_INT 2
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54142: LD_ADDR_VAR 0 50
54146: PUSH
54147: LD_INT 2
54149: PUSH
54150: LD_INT 3
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 1
54159: PUSH
54160: LD_INT 3
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54171: LD_ADDR_VAR 0 51
54175: PUSH
54176: LD_INT 1
54178: NEG
54179: PUSH
54180: LD_INT 2
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 2
54189: NEG
54190: PUSH
54191: LD_INT 1
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54202: LD_ADDR_VAR 0 52
54206: PUSH
54207: LD_INT 3
54209: NEG
54210: PUSH
54211: LD_INT 1
54213: NEG
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 3
54221: NEG
54222: PUSH
54223: LD_INT 2
54225: NEG
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54235: LD_ADDR_VAR 0 53
54239: PUSH
54240: LD_INT 1
54242: NEG
54243: PUSH
54244: LD_INT 3
54246: NEG
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 0
54254: PUSH
54255: LD_INT 3
54257: NEG
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 1
54265: PUSH
54266: LD_INT 2
54268: NEG
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: LIST
54278: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54279: LD_ADDR_VAR 0 54
54283: PUSH
54284: LD_INT 2
54286: PUSH
54287: LD_INT 1
54289: NEG
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 3
54297: PUSH
54298: LD_INT 0
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 3
54307: PUSH
54308: LD_INT 1
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: LIST
54319: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54320: LD_ADDR_VAR 0 55
54324: PUSH
54325: LD_INT 3
54327: PUSH
54328: LD_INT 2
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 3
54337: PUSH
54338: LD_INT 3
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 2
54347: PUSH
54348: LD_INT 3
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: LIST
54359: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54360: LD_ADDR_VAR 0 56
54364: PUSH
54365: LD_INT 1
54367: PUSH
54368: LD_INT 3
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 0
54377: PUSH
54378: LD_INT 3
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 1
54387: NEG
54388: PUSH
54389: LD_INT 2
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: LIST
54400: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54401: LD_ADDR_VAR 0 57
54405: PUSH
54406: LD_INT 2
54408: NEG
54409: PUSH
54410: LD_INT 1
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 3
54419: NEG
54420: PUSH
54421: LD_INT 0
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 3
54430: NEG
54431: PUSH
54432: LD_INT 1
54434: NEG
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: LIST
54444: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54445: LD_ADDR_VAR 0 58
54449: PUSH
54450: LD_INT 2
54452: NEG
54453: PUSH
54454: LD_INT 3
54456: NEG
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 3
54464: NEG
54465: PUSH
54466: LD_INT 2
54468: NEG
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 3
54476: NEG
54477: PUSH
54478: LD_INT 3
54480: NEG
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: LIST
54490: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54491: LD_ADDR_VAR 0 59
54495: PUSH
54496: LD_INT 1
54498: NEG
54499: PUSH
54500: LD_INT 2
54502: NEG
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 0
54510: PUSH
54511: LD_INT 2
54513: NEG
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 1
54521: PUSH
54522: LD_INT 1
54524: NEG
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: LIST
54534: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54535: LD_ADDR_VAR 0 60
54539: PUSH
54540: LD_INT 1
54542: PUSH
54543: LD_INT 1
54545: NEG
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 2
54553: PUSH
54554: LD_INT 0
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 2
54563: PUSH
54564: LD_INT 1
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: LIST
54575: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54576: LD_ADDR_VAR 0 61
54580: PUSH
54581: LD_INT 2
54583: PUSH
54584: LD_INT 1
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 2
54593: PUSH
54594: LD_INT 2
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 1
54603: PUSH
54604: LD_INT 2
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: LIST
54615: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54616: LD_ADDR_VAR 0 62
54620: PUSH
54621: LD_INT 1
54623: PUSH
54624: LD_INT 2
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 0
54633: PUSH
54634: LD_INT 2
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 1
54643: NEG
54644: PUSH
54645: LD_INT 1
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: LIST
54656: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54657: LD_ADDR_VAR 0 63
54661: PUSH
54662: LD_INT 1
54664: NEG
54665: PUSH
54666: LD_INT 1
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 2
54675: NEG
54676: PUSH
54677: LD_INT 0
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 2
54686: NEG
54687: PUSH
54688: LD_INT 1
54690: NEG
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: LIST
54700: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54701: LD_ADDR_VAR 0 64
54705: PUSH
54706: LD_INT 1
54708: NEG
54709: PUSH
54710: LD_INT 2
54712: NEG
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 2
54720: NEG
54721: PUSH
54722: LD_INT 1
54724: NEG
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 2
54732: NEG
54733: PUSH
54734: LD_INT 2
54736: NEG
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: LIST
54746: ST_TO_ADDR
// end ; 2 :
54747: GO 58013
54749: LD_INT 2
54751: DOUBLE
54752: EQUAL
54753: IFTRUE 54757
54755: GO 58012
54757: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54758: LD_ADDR_VAR 0 29
54762: PUSH
54763: LD_INT 4
54765: PUSH
54766: LD_INT 0
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 4
54775: PUSH
54776: LD_INT 1
54778: NEG
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 5
54786: PUSH
54787: LD_INT 0
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 5
54796: PUSH
54797: LD_INT 1
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 4
54806: PUSH
54807: LD_INT 1
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 3
54816: PUSH
54817: LD_INT 0
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 3
54826: PUSH
54827: LD_INT 1
54829: NEG
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 3
54837: PUSH
54838: LD_INT 2
54840: NEG
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 5
54848: PUSH
54849: LD_INT 2
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 3
54858: PUSH
54859: LD_INT 3
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 3
54868: PUSH
54869: LD_INT 2
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 4
54878: PUSH
54879: LD_INT 3
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 4
54888: PUSH
54889: LD_INT 4
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 3
54898: PUSH
54899: LD_INT 4
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 2
54908: PUSH
54909: LD_INT 3
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 2
54918: PUSH
54919: LD_INT 2
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 4
54928: PUSH
54929: LD_INT 2
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 2
54938: PUSH
54939: LD_INT 4
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 0
54948: PUSH
54949: LD_INT 4
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 0
54958: PUSH
54959: LD_INT 3
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 1
54968: PUSH
54969: LD_INT 4
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 1
54978: PUSH
54979: LD_INT 5
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 0
54988: PUSH
54989: LD_INT 5
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 1
54998: NEG
54999: PUSH
55000: LD_INT 4
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 1
55009: NEG
55010: PUSH
55011: LD_INT 3
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 2
55020: PUSH
55021: LD_INT 5
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 2
55030: NEG
55031: PUSH
55032: LD_INT 3
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 3
55041: NEG
55042: PUSH
55043: LD_INT 0
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 3
55052: NEG
55053: PUSH
55054: LD_INT 1
55056: NEG
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 2
55064: NEG
55065: PUSH
55066: LD_INT 0
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 2
55075: NEG
55076: PUSH
55077: LD_INT 1
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 3
55086: NEG
55087: PUSH
55088: LD_INT 1
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 4
55097: NEG
55098: PUSH
55099: LD_INT 0
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 4
55108: NEG
55109: PUSH
55110: LD_INT 1
55112: NEG
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 4
55120: NEG
55121: PUSH
55122: LD_INT 2
55124: NEG
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 2
55132: NEG
55133: PUSH
55134: LD_INT 2
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 4
55143: NEG
55144: PUSH
55145: LD_INT 4
55147: NEG
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 4
55155: NEG
55156: PUSH
55157: LD_INT 5
55159: NEG
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 3
55167: NEG
55168: PUSH
55169: LD_INT 4
55171: NEG
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 3
55179: NEG
55180: PUSH
55181: LD_INT 3
55183: NEG
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 4
55191: NEG
55192: PUSH
55193: LD_INT 3
55195: NEG
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 5
55203: NEG
55204: PUSH
55205: LD_INT 4
55207: NEG
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 5
55215: NEG
55216: PUSH
55217: LD_INT 5
55219: NEG
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 3
55227: NEG
55228: PUSH
55229: LD_INT 5
55231: NEG
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 5
55239: NEG
55240: PUSH
55241: LD_INT 3
55243: NEG
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55296: LD_ADDR_VAR 0 30
55300: PUSH
55301: LD_INT 4
55303: PUSH
55304: LD_INT 4
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 4
55313: PUSH
55314: LD_INT 3
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 5
55323: PUSH
55324: LD_INT 4
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 5
55333: PUSH
55334: LD_INT 5
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 4
55343: PUSH
55344: LD_INT 5
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 3
55353: PUSH
55354: LD_INT 4
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 3
55363: PUSH
55364: LD_INT 3
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 5
55373: PUSH
55374: LD_INT 3
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 3
55383: PUSH
55384: LD_INT 5
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 0
55393: PUSH
55394: LD_INT 3
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 0
55403: PUSH
55404: LD_INT 2
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 1
55413: PUSH
55414: LD_INT 3
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 1
55423: PUSH
55424: LD_INT 4
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 0
55433: PUSH
55434: LD_INT 4
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 1
55443: NEG
55444: PUSH
55445: LD_INT 3
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 1
55454: NEG
55455: PUSH
55456: LD_INT 2
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 2
55465: PUSH
55466: LD_INT 4
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 2
55475: NEG
55476: PUSH
55477: LD_INT 2
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 4
55486: NEG
55487: PUSH
55488: LD_INT 0
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 4
55497: NEG
55498: PUSH
55499: LD_INT 1
55501: NEG
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 3
55509: NEG
55510: PUSH
55511: LD_INT 0
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 3
55520: NEG
55521: PUSH
55522: LD_INT 1
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 4
55531: NEG
55532: PUSH
55533: LD_INT 1
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 5
55542: NEG
55543: PUSH
55544: LD_INT 0
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 5
55553: NEG
55554: PUSH
55555: LD_INT 1
55557: NEG
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 5
55565: NEG
55566: PUSH
55567: LD_INT 2
55569: NEG
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 3
55577: NEG
55578: PUSH
55579: LD_INT 2
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 3
55588: NEG
55589: PUSH
55590: LD_INT 3
55592: NEG
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 3
55600: NEG
55601: PUSH
55602: LD_INT 4
55604: NEG
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 2
55612: NEG
55613: PUSH
55614: LD_INT 3
55616: NEG
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 2
55624: NEG
55625: PUSH
55626: LD_INT 2
55628: NEG
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 3
55636: NEG
55637: PUSH
55638: LD_INT 2
55640: NEG
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 4
55648: NEG
55649: PUSH
55650: LD_INT 3
55652: NEG
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 4
55660: NEG
55661: PUSH
55662: LD_INT 4
55664: NEG
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 2
55672: NEG
55673: PUSH
55674: LD_INT 4
55676: NEG
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 4
55684: NEG
55685: PUSH
55686: LD_INT 2
55688: NEG
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 0
55696: PUSH
55697: LD_INT 4
55699: NEG
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 0
55707: PUSH
55708: LD_INT 5
55710: NEG
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 1
55718: PUSH
55719: LD_INT 4
55721: NEG
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 1
55729: PUSH
55730: LD_INT 3
55732: NEG
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 0
55740: PUSH
55741: LD_INT 3
55743: NEG
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 1
55751: NEG
55752: PUSH
55753: LD_INT 4
55755: NEG
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 1
55763: NEG
55764: PUSH
55765: LD_INT 5
55767: NEG
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 2
55775: PUSH
55776: LD_INT 3
55778: NEG
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 2
55786: NEG
55787: PUSH
55788: LD_INT 5
55790: NEG
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55843: LD_ADDR_VAR 0 31
55847: PUSH
55848: LD_INT 0
55850: PUSH
55851: LD_INT 4
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 0
55860: PUSH
55861: LD_INT 3
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 1
55870: PUSH
55871: LD_INT 4
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 1
55880: PUSH
55881: LD_INT 5
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 0
55890: PUSH
55891: LD_INT 5
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 1
55900: NEG
55901: PUSH
55902: LD_INT 4
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 1
55911: NEG
55912: PUSH
55913: LD_INT 3
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 2
55922: PUSH
55923: LD_INT 5
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 2
55932: NEG
55933: PUSH
55934: LD_INT 3
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 3
55943: NEG
55944: PUSH
55945: LD_INT 0
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 3
55954: NEG
55955: PUSH
55956: LD_INT 1
55958: NEG
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 2
55966: NEG
55967: PUSH
55968: LD_INT 0
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 2
55977: NEG
55978: PUSH
55979: LD_INT 1
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 3
55988: NEG
55989: PUSH
55990: LD_INT 1
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 4
55999: NEG
56000: PUSH
56001: LD_INT 0
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 4
56010: NEG
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 4
56022: NEG
56023: PUSH
56024: LD_INT 2
56026: NEG
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 2
56034: NEG
56035: PUSH
56036: LD_INT 2
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 4
56045: NEG
56046: PUSH
56047: LD_INT 4
56049: NEG
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 4
56057: NEG
56058: PUSH
56059: LD_INT 5
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 3
56069: NEG
56070: PUSH
56071: LD_INT 4
56073: NEG
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 3
56081: NEG
56082: PUSH
56083: LD_INT 3
56085: NEG
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 4
56093: NEG
56094: PUSH
56095: LD_INT 3
56097: NEG
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 5
56105: NEG
56106: PUSH
56107: LD_INT 4
56109: NEG
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 5
56117: NEG
56118: PUSH
56119: LD_INT 5
56121: NEG
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 3
56129: NEG
56130: PUSH
56131: LD_INT 5
56133: NEG
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 5
56141: NEG
56142: PUSH
56143: LD_INT 3
56145: NEG
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 0
56153: PUSH
56154: LD_INT 3
56156: NEG
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 0
56164: PUSH
56165: LD_INT 4
56167: NEG
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 1
56175: PUSH
56176: LD_INT 3
56178: NEG
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 1
56186: PUSH
56187: LD_INT 2
56189: NEG
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 0
56197: PUSH
56198: LD_INT 2
56200: NEG
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 1
56208: NEG
56209: PUSH
56210: LD_INT 3
56212: NEG
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 1
56220: NEG
56221: PUSH
56222: LD_INT 4
56224: NEG
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 2
56232: PUSH
56233: LD_INT 2
56235: NEG
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 2
56243: NEG
56244: PUSH
56245: LD_INT 4
56247: NEG
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 4
56255: PUSH
56256: LD_INT 0
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 4
56265: PUSH
56266: LD_INT 1
56268: NEG
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 5
56276: PUSH
56277: LD_INT 0
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 5
56286: PUSH
56287: LD_INT 1
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 4
56296: PUSH
56297: LD_INT 1
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 3
56306: PUSH
56307: LD_INT 0
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 3
56316: PUSH
56317: LD_INT 1
56319: NEG
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 3
56327: PUSH
56328: LD_INT 2
56330: NEG
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 5
56338: PUSH
56339: LD_INT 2
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56393: LD_ADDR_VAR 0 32
56397: PUSH
56398: LD_INT 4
56400: NEG
56401: PUSH
56402: LD_INT 0
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 4
56411: NEG
56412: PUSH
56413: LD_INT 1
56415: NEG
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 3
56423: NEG
56424: PUSH
56425: LD_INT 0
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 3
56434: NEG
56435: PUSH
56436: LD_INT 1
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 4
56445: NEG
56446: PUSH
56447: LD_INT 1
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 5
56456: NEG
56457: PUSH
56458: LD_INT 0
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 5
56467: NEG
56468: PUSH
56469: LD_INT 1
56471: NEG
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 5
56479: NEG
56480: PUSH
56481: LD_INT 2
56483: NEG
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 3
56491: NEG
56492: PUSH
56493: LD_INT 2
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 3
56502: NEG
56503: PUSH
56504: LD_INT 3
56506: NEG
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 3
56514: NEG
56515: PUSH
56516: LD_INT 4
56518: NEG
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 2
56526: NEG
56527: PUSH
56528: LD_INT 3
56530: NEG
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 2
56538: NEG
56539: PUSH
56540: LD_INT 2
56542: NEG
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 3
56550: NEG
56551: PUSH
56552: LD_INT 2
56554: NEG
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 4
56562: NEG
56563: PUSH
56564: LD_INT 3
56566: NEG
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 4
56574: NEG
56575: PUSH
56576: LD_INT 4
56578: NEG
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 2
56586: NEG
56587: PUSH
56588: LD_INT 4
56590: NEG
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 4
56598: NEG
56599: PUSH
56600: LD_INT 2
56602: NEG
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 0
56610: PUSH
56611: LD_INT 4
56613: NEG
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 0
56621: PUSH
56622: LD_INT 5
56624: NEG
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 1
56632: PUSH
56633: LD_INT 4
56635: NEG
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 1
56643: PUSH
56644: LD_INT 3
56646: NEG
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 0
56654: PUSH
56655: LD_INT 3
56657: NEG
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 1
56665: NEG
56666: PUSH
56667: LD_INT 4
56669: NEG
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 1
56677: NEG
56678: PUSH
56679: LD_INT 5
56681: NEG
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 2
56689: PUSH
56690: LD_INT 3
56692: NEG
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 2
56700: NEG
56701: PUSH
56702: LD_INT 5
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 3
56712: PUSH
56713: LD_INT 0
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 3
56722: PUSH
56723: LD_INT 1
56725: NEG
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 4
56733: PUSH
56734: LD_INT 0
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 4
56743: PUSH
56744: LD_INT 1
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 3
56753: PUSH
56754: LD_INT 1
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 2
56763: PUSH
56764: LD_INT 0
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 2
56773: PUSH
56774: LD_INT 1
56776: NEG
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 2
56784: PUSH
56785: LD_INT 2
56787: NEG
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 4
56795: PUSH
56796: LD_INT 2
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 4
56805: PUSH
56806: LD_INT 4
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 4
56815: PUSH
56816: LD_INT 3
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 5
56825: PUSH
56826: LD_INT 4
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 5
56835: PUSH
56836: LD_INT 5
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 4
56845: PUSH
56846: LD_INT 5
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 3
56855: PUSH
56856: LD_INT 4
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 3
56865: PUSH
56866: LD_INT 3
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 5
56875: PUSH
56876: LD_INT 3
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 3
56885: PUSH
56886: LD_INT 5
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56940: LD_ADDR_VAR 0 33
56944: PUSH
56945: LD_INT 4
56947: NEG
56948: PUSH
56949: LD_INT 4
56951: NEG
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 4
56959: NEG
56960: PUSH
56961: LD_INT 5
56963: NEG
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 3
56971: NEG
56972: PUSH
56973: LD_INT 4
56975: NEG
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 3
56983: NEG
56984: PUSH
56985: LD_INT 3
56987: NEG
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 4
56995: NEG
56996: PUSH
56997: LD_INT 3
56999: NEG
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 5
57007: NEG
57008: PUSH
57009: LD_INT 4
57011: NEG
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 5
57019: NEG
57020: PUSH
57021: LD_INT 5
57023: NEG
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 3
57031: NEG
57032: PUSH
57033: LD_INT 5
57035: NEG
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 5
57043: NEG
57044: PUSH
57045: LD_INT 3
57047: NEG
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 0
57055: PUSH
57056: LD_INT 3
57058: NEG
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 0
57066: PUSH
57067: LD_INT 4
57069: NEG
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 1
57077: PUSH
57078: LD_INT 3
57080: NEG
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 1
57088: PUSH
57089: LD_INT 2
57091: NEG
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 0
57099: PUSH
57100: LD_INT 2
57102: NEG
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 1
57110: NEG
57111: PUSH
57112: LD_INT 3
57114: NEG
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 1
57122: NEG
57123: PUSH
57124: LD_INT 4
57126: NEG
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 2
57134: PUSH
57135: LD_INT 2
57137: NEG
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 2
57145: NEG
57146: PUSH
57147: LD_INT 4
57149: NEG
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 4
57157: PUSH
57158: LD_INT 0
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 4
57167: PUSH
57168: LD_INT 1
57170: NEG
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 5
57178: PUSH
57179: LD_INT 0
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 5
57188: PUSH
57189: LD_INT 1
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 4
57198: PUSH
57199: LD_INT 1
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 3
57208: PUSH
57209: LD_INT 0
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 3
57218: PUSH
57219: LD_INT 1
57221: NEG
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 3
57229: PUSH
57230: LD_INT 2
57232: NEG
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 5
57240: PUSH
57241: LD_INT 2
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 3
57250: PUSH
57251: LD_INT 3
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 3
57260: PUSH
57261: LD_INT 2
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 4
57270: PUSH
57271: LD_INT 3
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 4
57280: PUSH
57281: LD_INT 4
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 3
57290: PUSH
57291: LD_INT 4
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 2
57300: PUSH
57301: LD_INT 3
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 2
57310: PUSH
57311: LD_INT 2
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 4
57320: PUSH
57321: LD_INT 2
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 2
57330: PUSH
57331: LD_INT 4
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 0
57340: PUSH
57341: LD_INT 4
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 0
57350: PUSH
57351: LD_INT 3
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 1
57360: PUSH
57361: LD_INT 4
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 1
57370: PUSH
57371: LD_INT 5
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 0
57380: PUSH
57381: LD_INT 5
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 1
57390: NEG
57391: PUSH
57392: LD_INT 4
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 1
57401: NEG
57402: PUSH
57403: LD_INT 3
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 2
57412: PUSH
57413: LD_INT 5
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 2
57422: NEG
57423: PUSH
57424: LD_INT 3
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57478: LD_ADDR_VAR 0 34
57482: PUSH
57483: LD_INT 0
57485: PUSH
57486: LD_INT 4
57488: NEG
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 0
57496: PUSH
57497: LD_INT 5
57499: NEG
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 1
57507: PUSH
57508: LD_INT 4
57510: NEG
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 1
57518: PUSH
57519: LD_INT 3
57521: NEG
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 0
57529: PUSH
57530: LD_INT 3
57532: NEG
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 1
57540: NEG
57541: PUSH
57542: LD_INT 4
57544: NEG
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 1
57552: NEG
57553: PUSH
57554: LD_INT 5
57556: NEG
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 2
57564: PUSH
57565: LD_INT 3
57567: NEG
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 2
57575: NEG
57576: PUSH
57577: LD_INT 5
57579: NEG
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 3
57587: PUSH
57588: LD_INT 0
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 3
57597: PUSH
57598: LD_INT 1
57600: NEG
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 4
57608: PUSH
57609: LD_INT 0
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 4
57618: PUSH
57619: LD_INT 1
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 3
57628: PUSH
57629: LD_INT 1
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 2
57638: PUSH
57639: LD_INT 0
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 2
57648: PUSH
57649: LD_INT 1
57651: NEG
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 2
57659: PUSH
57660: LD_INT 2
57662: NEG
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 4
57670: PUSH
57671: LD_INT 2
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 4
57680: PUSH
57681: LD_INT 4
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 4
57690: PUSH
57691: LD_INT 3
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 5
57700: PUSH
57701: LD_INT 4
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 5
57710: PUSH
57711: LD_INT 5
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 4
57720: PUSH
57721: LD_INT 5
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 3
57730: PUSH
57731: LD_INT 4
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 3
57740: PUSH
57741: LD_INT 3
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 5
57750: PUSH
57751: LD_INT 3
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 3
57760: PUSH
57761: LD_INT 5
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 0
57770: PUSH
57771: LD_INT 3
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 0
57780: PUSH
57781: LD_INT 2
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 1
57790: PUSH
57791: LD_INT 3
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 1
57800: PUSH
57801: LD_INT 4
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 0
57810: PUSH
57811: LD_INT 4
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 1
57820: NEG
57821: PUSH
57822: LD_INT 3
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 1
57831: NEG
57832: PUSH
57833: LD_INT 2
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 2
57842: PUSH
57843: LD_INT 4
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 2
57852: NEG
57853: PUSH
57854: LD_INT 2
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 4
57863: NEG
57864: PUSH
57865: LD_INT 0
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 4
57874: NEG
57875: PUSH
57876: LD_INT 1
57878: NEG
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 3
57886: NEG
57887: PUSH
57888: LD_INT 0
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 3
57897: NEG
57898: PUSH
57899: LD_INT 1
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 4
57908: NEG
57909: PUSH
57910: LD_INT 1
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 5
57919: NEG
57920: PUSH
57921: LD_INT 0
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 5
57930: NEG
57931: PUSH
57932: LD_INT 1
57934: NEG
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 5
57942: NEG
57943: PUSH
57944: LD_INT 2
57946: NEG
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 3
57954: NEG
57955: PUSH
57956: LD_INT 2
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: ST_TO_ADDR
// end ; end ;
58010: GO 58013
58012: POP
// case btype of b_depot , b_warehouse :
58013: LD_VAR 0 1
58017: PUSH
58018: LD_INT 0
58020: DOUBLE
58021: EQUAL
58022: IFTRUE 58032
58024: LD_INT 1
58026: DOUBLE
58027: EQUAL
58028: IFTRUE 58032
58030: GO 58233
58032: POP
// case nation of nation_american :
58033: LD_VAR 0 5
58037: PUSH
58038: LD_INT 1
58040: DOUBLE
58041: EQUAL
58042: IFTRUE 58046
58044: GO 58102
58046: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58047: LD_ADDR_VAR 0 9
58051: PUSH
58052: LD_VAR 0 11
58056: PUSH
58057: LD_VAR 0 12
58061: PUSH
58062: LD_VAR 0 13
58066: PUSH
58067: LD_VAR 0 14
58071: PUSH
58072: LD_VAR 0 15
58076: PUSH
58077: LD_VAR 0 16
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: PUSH
58090: LD_VAR 0 4
58094: PUSH
58095: LD_INT 1
58097: PLUS
58098: ARRAY
58099: ST_TO_ADDR
58100: GO 58231
58102: LD_INT 2
58104: DOUBLE
58105: EQUAL
58106: IFTRUE 58110
58108: GO 58166
58110: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58111: LD_ADDR_VAR 0 9
58115: PUSH
58116: LD_VAR 0 17
58120: PUSH
58121: LD_VAR 0 18
58125: PUSH
58126: LD_VAR 0 19
58130: PUSH
58131: LD_VAR 0 20
58135: PUSH
58136: LD_VAR 0 21
58140: PUSH
58141: LD_VAR 0 22
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: PUSH
58154: LD_VAR 0 4
58158: PUSH
58159: LD_INT 1
58161: PLUS
58162: ARRAY
58163: ST_TO_ADDR
58164: GO 58231
58166: LD_INT 3
58168: DOUBLE
58169: EQUAL
58170: IFTRUE 58174
58172: GO 58230
58174: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58175: LD_ADDR_VAR 0 9
58179: PUSH
58180: LD_VAR 0 23
58184: PUSH
58185: LD_VAR 0 24
58189: PUSH
58190: LD_VAR 0 25
58194: PUSH
58195: LD_VAR 0 26
58199: PUSH
58200: LD_VAR 0 27
58204: PUSH
58205: LD_VAR 0 28
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: PUSH
58218: LD_VAR 0 4
58222: PUSH
58223: LD_INT 1
58225: PLUS
58226: ARRAY
58227: ST_TO_ADDR
58228: GO 58231
58230: POP
58231: GO 58786
58233: LD_INT 2
58235: DOUBLE
58236: EQUAL
58237: IFTRUE 58247
58239: LD_INT 3
58241: DOUBLE
58242: EQUAL
58243: IFTRUE 58247
58245: GO 58303
58247: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58248: LD_ADDR_VAR 0 9
58252: PUSH
58253: LD_VAR 0 29
58257: PUSH
58258: LD_VAR 0 30
58262: PUSH
58263: LD_VAR 0 31
58267: PUSH
58268: LD_VAR 0 32
58272: PUSH
58273: LD_VAR 0 33
58277: PUSH
58278: LD_VAR 0 34
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: PUSH
58291: LD_VAR 0 4
58295: PUSH
58296: LD_INT 1
58298: PLUS
58299: ARRAY
58300: ST_TO_ADDR
58301: GO 58786
58303: LD_INT 16
58305: DOUBLE
58306: EQUAL
58307: IFTRUE 58365
58309: LD_INT 17
58311: DOUBLE
58312: EQUAL
58313: IFTRUE 58365
58315: LD_INT 18
58317: DOUBLE
58318: EQUAL
58319: IFTRUE 58365
58321: LD_INT 19
58323: DOUBLE
58324: EQUAL
58325: IFTRUE 58365
58327: LD_INT 22
58329: DOUBLE
58330: EQUAL
58331: IFTRUE 58365
58333: LD_INT 20
58335: DOUBLE
58336: EQUAL
58337: IFTRUE 58365
58339: LD_INT 21
58341: DOUBLE
58342: EQUAL
58343: IFTRUE 58365
58345: LD_INT 23
58347: DOUBLE
58348: EQUAL
58349: IFTRUE 58365
58351: LD_INT 24
58353: DOUBLE
58354: EQUAL
58355: IFTRUE 58365
58357: LD_INT 25
58359: DOUBLE
58360: EQUAL
58361: IFTRUE 58365
58363: GO 58421
58365: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58366: LD_ADDR_VAR 0 9
58370: PUSH
58371: LD_VAR 0 35
58375: PUSH
58376: LD_VAR 0 36
58380: PUSH
58381: LD_VAR 0 37
58385: PUSH
58386: LD_VAR 0 38
58390: PUSH
58391: LD_VAR 0 39
58395: PUSH
58396: LD_VAR 0 40
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: PUSH
58409: LD_VAR 0 4
58413: PUSH
58414: LD_INT 1
58416: PLUS
58417: ARRAY
58418: ST_TO_ADDR
58419: GO 58786
58421: LD_INT 6
58423: DOUBLE
58424: EQUAL
58425: IFTRUE 58477
58427: LD_INT 7
58429: DOUBLE
58430: EQUAL
58431: IFTRUE 58477
58433: LD_INT 8
58435: DOUBLE
58436: EQUAL
58437: IFTRUE 58477
58439: LD_INT 13
58441: DOUBLE
58442: EQUAL
58443: IFTRUE 58477
58445: LD_INT 12
58447: DOUBLE
58448: EQUAL
58449: IFTRUE 58477
58451: LD_INT 15
58453: DOUBLE
58454: EQUAL
58455: IFTRUE 58477
58457: LD_INT 11
58459: DOUBLE
58460: EQUAL
58461: IFTRUE 58477
58463: LD_INT 14
58465: DOUBLE
58466: EQUAL
58467: IFTRUE 58477
58469: LD_INT 10
58471: DOUBLE
58472: EQUAL
58473: IFTRUE 58477
58475: GO 58533
58477: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58478: LD_ADDR_VAR 0 9
58482: PUSH
58483: LD_VAR 0 41
58487: PUSH
58488: LD_VAR 0 42
58492: PUSH
58493: LD_VAR 0 43
58497: PUSH
58498: LD_VAR 0 44
58502: PUSH
58503: LD_VAR 0 45
58507: PUSH
58508: LD_VAR 0 46
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: PUSH
58521: LD_VAR 0 4
58525: PUSH
58526: LD_INT 1
58528: PLUS
58529: ARRAY
58530: ST_TO_ADDR
58531: GO 58786
58533: LD_INT 36
58535: DOUBLE
58536: EQUAL
58537: IFTRUE 58541
58539: GO 58597
58541: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58542: LD_ADDR_VAR 0 9
58546: PUSH
58547: LD_VAR 0 47
58551: PUSH
58552: LD_VAR 0 48
58556: PUSH
58557: LD_VAR 0 49
58561: PUSH
58562: LD_VAR 0 50
58566: PUSH
58567: LD_VAR 0 51
58571: PUSH
58572: LD_VAR 0 52
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: PUSH
58585: LD_VAR 0 4
58589: PUSH
58590: LD_INT 1
58592: PLUS
58593: ARRAY
58594: ST_TO_ADDR
58595: GO 58786
58597: LD_INT 4
58599: DOUBLE
58600: EQUAL
58601: IFTRUE 58623
58603: LD_INT 5
58605: DOUBLE
58606: EQUAL
58607: IFTRUE 58623
58609: LD_INT 34
58611: DOUBLE
58612: EQUAL
58613: IFTRUE 58623
58615: LD_INT 37
58617: DOUBLE
58618: EQUAL
58619: IFTRUE 58623
58621: GO 58679
58623: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58624: LD_ADDR_VAR 0 9
58628: PUSH
58629: LD_VAR 0 53
58633: PUSH
58634: LD_VAR 0 54
58638: PUSH
58639: LD_VAR 0 55
58643: PUSH
58644: LD_VAR 0 56
58648: PUSH
58649: LD_VAR 0 57
58653: PUSH
58654: LD_VAR 0 58
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: PUSH
58667: LD_VAR 0 4
58671: PUSH
58672: LD_INT 1
58674: PLUS
58675: ARRAY
58676: ST_TO_ADDR
58677: GO 58786
58679: LD_INT 31
58681: DOUBLE
58682: EQUAL
58683: IFTRUE 58729
58685: LD_INT 32
58687: DOUBLE
58688: EQUAL
58689: IFTRUE 58729
58691: LD_INT 33
58693: DOUBLE
58694: EQUAL
58695: IFTRUE 58729
58697: LD_INT 27
58699: DOUBLE
58700: EQUAL
58701: IFTRUE 58729
58703: LD_INT 26
58705: DOUBLE
58706: EQUAL
58707: IFTRUE 58729
58709: LD_INT 28
58711: DOUBLE
58712: EQUAL
58713: IFTRUE 58729
58715: LD_INT 29
58717: DOUBLE
58718: EQUAL
58719: IFTRUE 58729
58721: LD_INT 30
58723: DOUBLE
58724: EQUAL
58725: IFTRUE 58729
58727: GO 58785
58729: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58730: LD_ADDR_VAR 0 9
58734: PUSH
58735: LD_VAR 0 59
58739: PUSH
58740: LD_VAR 0 60
58744: PUSH
58745: LD_VAR 0 61
58749: PUSH
58750: LD_VAR 0 62
58754: PUSH
58755: LD_VAR 0 63
58759: PUSH
58760: LD_VAR 0 64
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: PUSH
58773: LD_VAR 0 4
58777: PUSH
58778: LD_INT 1
58780: PLUS
58781: ARRAY
58782: ST_TO_ADDR
58783: GO 58786
58785: POP
// temp_list2 = [ ] ;
58786: LD_ADDR_VAR 0 10
58790: PUSH
58791: EMPTY
58792: ST_TO_ADDR
// for i in temp_list do
58793: LD_ADDR_VAR 0 8
58797: PUSH
58798: LD_VAR 0 9
58802: PUSH
58803: FOR_IN
58804: IFFALSE 58856
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58806: LD_ADDR_VAR 0 10
58810: PUSH
58811: LD_VAR 0 10
58815: PUSH
58816: LD_VAR 0 8
58820: PUSH
58821: LD_INT 1
58823: ARRAY
58824: PUSH
58825: LD_VAR 0 2
58829: PLUS
58830: PUSH
58831: LD_VAR 0 8
58835: PUSH
58836: LD_INT 2
58838: ARRAY
58839: PUSH
58840: LD_VAR 0 3
58844: PLUS
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: EMPTY
58851: LIST
58852: ADD
58853: ST_TO_ADDR
58854: GO 58803
58856: POP
58857: POP
// result = temp_list2 ;
58858: LD_ADDR_VAR 0 7
58862: PUSH
58863: LD_VAR 0 10
58867: ST_TO_ADDR
// end ;
58868: LD_VAR 0 7
58872: RET
// export function EnemyInRange ( unit , dist ) ; begin
58873: LD_INT 0
58875: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58876: LD_ADDR_VAR 0 3
58880: PUSH
58881: LD_VAR 0 1
58885: PPUSH
58886: CALL_OW 255
58890: PPUSH
58891: LD_VAR 0 1
58895: PPUSH
58896: CALL_OW 250
58900: PPUSH
58901: LD_VAR 0 1
58905: PPUSH
58906: CALL_OW 251
58910: PPUSH
58911: LD_VAR 0 2
58915: PPUSH
58916: CALL 32644 0 4
58920: PUSH
58921: LD_INT 4
58923: ARRAY
58924: ST_TO_ADDR
// end ;
58925: LD_VAR 0 3
58929: RET
// export function PlayerSeeMe ( unit ) ; begin
58930: LD_INT 0
58932: PPUSH
// result := See ( your_side , unit ) ;
58933: LD_ADDR_VAR 0 2
58937: PUSH
58938: LD_OWVAR 2
58942: PPUSH
58943: LD_VAR 0 1
58947: PPUSH
58948: CALL_OW 292
58952: ST_TO_ADDR
// end ;
58953: LD_VAR 0 2
58957: RET
// export function ReverseDir ( unit ) ; begin
58958: LD_INT 0
58960: PPUSH
// if not unit then
58961: LD_VAR 0 1
58965: NOT
58966: IFFALSE 58970
// exit ;
58968: GO 58993
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58970: LD_ADDR_VAR 0 2
58974: PUSH
58975: LD_VAR 0 1
58979: PPUSH
58980: CALL_OW 254
58984: PUSH
58985: LD_INT 3
58987: PLUS
58988: PUSH
58989: LD_INT 6
58991: MOD
58992: ST_TO_ADDR
// end ;
58993: LD_VAR 0 2
58997: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
58998: LD_INT 0
59000: PPUSH
59001: PPUSH
59002: PPUSH
59003: PPUSH
59004: PPUSH
// if not hexes then
59005: LD_VAR 0 2
59009: NOT
59010: IFFALSE 59014
// exit ;
59012: GO 59162
// dist := 9999 ;
59014: LD_ADDR_VAR 0 5
59018: PUSH
59019: LD_INT 9999
59021: ST_TO_ADDR
// for i = 1 to hexes do
59022: LD_ADDR_VAR 0 4
59026: PUSH
59027: DOUBLE
59028: LD_INT 1
59030: DEC
59031: ST_TO_ADDR
59032: LD_VAR 0 2
59036: PUSH
59037: FOR_TO
59038: IFFALSE 59150
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
59040: LD_VAR 0 1
59044: PPUSH
59045: LD_VAR 0 2
59049: PUSH
59050: LD_VAR 0 4
59054: ARRAY
59055: PUSH
59056: LD_INT 1
59058: ARRAY
59059: PPUSH
59060: LD_VAR 0 2
59064: PUSH
59065: LD_VAR 0 4
59069: ARRAY
59070: PUSH
59071: LD_INT 2
59073: ARRAY
59074: PPUSH
59075: CALL_OW 297
59079: PUSH
59080: LD_VAR 0 5
59084: LESS
59085: IFFALSE 59148
// begin hex := hexes [ i ] ;
59087: LD_ADDR_VAR 0 7
59091: PUSH
59092: LD_VAR 0 2
59096: PUSH
59097: LD_VAR 0 4
59101: ARRAY
59102: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59103: LD_ADDR_VAR 0 5
59107: PUSH
59108: LD_VAR 0 1
59112: PPUSH
59113: LD_VAR 0 2
59117: PUSH
59118: LD_VAR 0 4
59122: ARRAY
59123: PUSH
59124: LD_INT 1
59126: ARRAY
59127: PPUSH
59128: LD_VAR 0 2
59132: PUSH
59133: LD_VAR 0 4
59137: ARRAY
59138: PUSH
59139: LD_INT 2
59141: ARRAY
59142: PPUSH
59143: CALL_OW 297
59147: ST_TO_ADDR
// end ; end ;
59148: GO 59037
59150: POP
59151: POP
// result := hex ;
59152: LD_ADDR_VAR 0 3
59156: PUSH
59157: LD_VAR 0 7
59161: ST_TO_ADDR
// end ;
59162: LD_VAR 0 3
59166: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59167: LD_INT 0
59169: PPUSH
59170: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59171: LD_VAR 0 1
59175: NOT
59176: PUSH
59177: LD_VAR 0 1
59181: PUSH
59182: LD_INT 21
59184: PUSH
59185: LD_INT 2
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 23
59194: PUSH
59195: LD_INT 2
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PPUSH
59206: CALL_OW 69
59210: IN
59211: NOT
59212: OR
59213: IFFALSE 59217
// exit ;
59215: GO 59264
// for i = 1 to 3 do
59217: LD_ADDR_VAR 0 3
59221: PUSH
59222: DOUBLE
59223: LD_INT 1
59225: DEC
59226: ST_TO_ADDR
59227: LD_INT 3
59229: PUSH
59230: FOR_TO
59231: IFFALSE 59262
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59233: LD_VAR 0 1
59237: PPUSH
59238: CALL_OW 250
59242: PPUSH
59243: LD_VAR 0 1
59247: PPUSH
59248: CALL_OW 251
59252: PPUSH
59253: LD_INT 1
59255: PPUSH
59256: CALL_OW 453
59260: GO 59230
59262: POP
59263: POP
// end ;
59264: LD_VAR 0 2
59268: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59269: LD_INT 0
59271: PPUSH
59272: PPUSH
59273: PPUSH
59274: PPUSH
59275: PPUSH
59276: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59277: LD_VAR 0 1
59281: NOT
59282: PUSH
59283: LD_VAR 0 2
59287: NOT
59288: OR
59289: PUSH
59290: LD_VAR 0 1
59294: PPUSH
59295: CALL_OW 314
59299: OR
59300: IFFALSE 59304
// exit ;
59302: GO 59745
// x := GetX ( enemy_unit ) ;
59304: LD_ADDR_VAR 0 7
59308: PUSH
59309: LD_VAR 0 2
59313: PPUSH
59314: CALL_OW 250
59318: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59319: LD_ADDR_VAR 0 8
59323: PUSH
59324: LD_VAR 0 2
59328: PPUSH
59329: CALL_OW 251
59333: ST_TO_ADDR
// if not x or not y then
59334: LD_VAR 0 7
59338: NOT
59339: PUSH
59340: LD_VAR 0 8
59344: NOT
59345: OR
59346: IFFALSE 59350
// exit ;
59348: GO 59745
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59350: LD_ADDR_VAR 0 6
59354: PUSH
59355: LD_VAR 0 7
59359: PPUSH
59360: LD_INT 0
59362: PPUSH
59363: LD_INT 4
59365: PPUSH
59366: CALL_OW 272
59370: PUSH
59371: LD_VAR 0 8
59375: PPUSH
59376: LD_INT 0
59378: PPUSH
59379: LD_INT 4
59381: PPUSH
59382: CALL_OW 273
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_VAR 0 7
59395: PPUSH
59396: LD_INT 1
59398: PPUSH
59399: LD_INT 4
59401: PPUSH
59402: CALL_OW 272
59406: PUSH
59407: LD_VAR 0 8
59411: PPUSH
59412: LD_INT 1
59414: PPUSH
59415: LD_INT 4
59417: PPUSH
59418: CALL_OW 273
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_VAR 0 7
59431: PPUSH
59432: LD_INT 2
59434: PPUSH
59435: LD_INT 4
59437: PPUSH
59438: CALL_OW 272
59442: PUSH
59443: LD_VAR 0 8
59447: PPUSH
59448: LD_INT 2
59450: PPUSH
59451: LD_INT 4
59453: PPUSH
59454: CALL_OW 273
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_VAR 0 7
59467: PPUSH
59468: LD_INT 3
59470: PPUSH
59471: LD_INT 4
59473: PPUSH
59474: CALL_OW 272
59478: PUSH
59479: LD_VAR 0 8
59483: PPUSH
59484: LD_INT 3
59486: PPUSH
59487: LD_INT 4
59489: PPUSH
59490: CALL_OW 273
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_VAR 0 7
59503: PPUSH
59504: LD_INT 4
59506: PPUSH
59507: LD_INT 4
59509: PPUSH
59510: CALL_OW 272
59514: PUSH
59515: LD_VAR 0 8
59519: PPUSH
59520: LD_INT 4
59522: PPUSH
59523: LD_INT 4
59525: PPUSH
59526: CALL_OW 273
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_VAR 0 7
59539: PPUSH
59540: LD_INT 5
59542: PPUSH
59543: LD_INT 4
59545: PPUSH
59546: CALL_OW 272
59550: PUSH
59551: LD_VAR 0 8
59555: PPUSH
59556: LD_INT 5
59558: PPUSH
59559: LD_INT 4
59561: PPUSH
59562: CALL_OW 273
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: ST_TO_ADDR
// for i = tmp downto 1 do
59579: LD_ADDR_VAR 0 4
59583: PUSH
59584: DOUBLE
59585: LD_VAR 0 6
59589: INC
59590: ST_TO_ADDR
59591: LD_INT 1
59593: PUSH
59594: FOR_DOWNTO
59595: IFFALSE 59696
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59597: LD_VAR 0 6
59601: PUSH
59602: LD_VAR 0 4
59606: ARRAY
59607: PUSH
59608: LD_INT 1
59610: ARRAY
59611: PPUSH
59612: LD_VAR 0 6
59616: PUSH
59617: LD_VAR 0 4
59621: ARRAY
59622: PUSH
59623: LD_INT 2
59625: ARRAY
59626: PPUSH
59627: CALL_OW 488
59631: NOT
59632: PUSH
59633: LD_VAR 0 6
59637: PUSH
59638: LD_VAR 0 4
59642: ARRAY
59643: PUSH
59644: LD_INT 1
59646: ARRAY
59647: PPUSH
59648: LD_VAR 0 6
59652: PUSH
59653: LD_VAR 0 4
59657: ARRAY
59658: PUSH
59659: LD_INT 2
59661: ARRAY
59662: PPUSH
59663: CALL_OW 428
59667: PUSH
59668: LD_INT 0
59670: NONEQUAL
59671: OR
59672: IFFALSE 59694
// tmp := Delete ( tmp , i ) ;
59674: LD_ADDR_VAR 0 6
59678: PUSH
59679: LD_VAR 0 6
59683: PPUSH
59684: LD_VAR 0 4
59688: PPUSH
59689: CALL_OW 3
59693: ST_TO_ADDR
59694: GO 59594
59696: POP
59697: POP
// j := GetClosestHex ( unit , tmp ) ;
59698: LD_ADDR_VAR 0 5
59702: PUSH
59703: LD_VAR 0 1
59707: PPUSH
59708: LD_VAR 0 6
59712: PPUSH
59713: CALL 58998 0 2
59717: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59718: LD_VAR 0 1
59722: PPUSH
59723: LD_VAR 0 5
59727: PUSH
59728: LD_INT 1
59730: ARRAY
59731: PPUSH
59732: LD_VAR 0 5
59736: PUSH
59737: LD_INT 2
59739: ARRAY
59740: PPUSH
59741: CALL_OW 111
// end ;
59745: LD_VAR 0 3
59749: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59750: LD_INT 0
59752: PPUSH
59753: PPUSH
59754: PPUSH
// uc_side = 0 ;
59755: LD_ADDR_OWVAR 20
59759: PUSH
59760: LD_INT 0
59762: ST_TO_ADDR
// uc_nation = 0 ;
59763: LD_ADDR_OWVAR 21
59767: PUSH
59768: LD_INT 0
59770: ST_TO_ADDR
// InitHc_All ( ) ;
59771: CALL_OW 584
// InitVc ;
59775: CALL_OW 20
// if mastodonts then
59779: LD_VAR 0 6
59783: IFFALSE 59850
// for i = 1 to mastodonts do
59785: LD_ADDR_VAR 0 11
59789: PUSH
59790: DOUBLE
59791: LD_INT 1
59793: DEC
59794: ST_TO_ADDR
59795: LD_VAR 0 6
59799: PUSH
59800: FOR_TO
59801: IFFALSE 59848
// begin vc_chassis := 31 ;
59803: LD_ADDR_OWVAR 37
59807: PUSH
59808: LD_INT 31
59810: ST_TO_ADDR
// vc_control := control_rider ;
59811: LD_ADDR_OWVAR 38
59815: PUSH
59816: LD_INT 4
59818: ST_TO_ADDR
// animal := CreateVehicle ;
59819: LD_ADDR_VAR 0 12
59823: PUSH
59824: CALL_OW 45
59828: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59829: LD_VAR 0 12
59833: PPUSH
59834: LD_VAR 0 8
59838: PPUSH
59839: LD_INT 0
59841: PPUSH
59842: CALL 62038 0 3
// end ;
59846: GO 59800
59848: POP
59849: POP
// if horses then
59850: LD_VAR 0 5
59854: IFFALSE 59921
// for i = 1 to horses do
59856: LD_ADDR_VAR 0 11
59860: PUSH
59861: DOUBLE
59862: LD_INT 1
59864: DEC
59865: ST_TO_ADDR
59866: LD_VAR 0 5
59870: PUSH
59871: FOR_TO
59872: IFFALSE 59919
// begin hc_class := 21 ;
59874: LD_ADDR_OWVAR 28
59878: PUSH
59879: LD_INT 21
59881: ST_TO_ADDR
// hc_gallery :=  ;
59882: LD_ADDR_OWVAR 33
59886: PUSH
59887: LD_STRING 
59889: ST_TO_ADDR
// animal := CreateHuman ;
59890: LD_ADDR_VAR 0 12
59894: PUSH
59895: CALL_OW 44
59899: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59900: LD_VAR 0 12
59904: PPUSH
59905: LD_VAR 0 8
59909: PPUSH
59910: LD_INT 0
59912: PPUSH
59913: CALL 62038 0 3
// end ;
59917: GO 59871
59919: POP
59920: POP
// if birds then
59921: LD_VAR 0 1
59925: IFFALSE 59992
// for i = 1 to birds do
59927: LD_ADDR_VAR 0 11
59931: PUSH
59932: DOUBLE
59933: LD_INT 1
59935: DEC
59936: ST_TO_ADDR
59937: LD_VAR 0 1
59941: PUSH
59942: FOR_TO
59943: IFFALSE 59990
// begin hc_class = 18 ;
59945: LD_ADDR_OWVAR 28
59949: PUSH
59950: LD_INT 18
59952: ST_TO_ADDR
// hc_gallery =  ;
59953: LD_ADDR_OWVAR 33
59957: PUSH
59958: LD_STRING 
59960: ST_TO_ADDR
// animal := CreateHuman ;
59961: LD_ADDR_VAR 0 12
59965: PUSH
59966: CALL_OW 44
59970: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59971: LD_VAR 0 12
59975: PPUSH
59976: LD_VAR 0 8
59980: PPUSH
59981: LD_INT 0
59983: PPUSH
59984: CALL 62038 0 3
// end ;
59988: GO 59942
59990: POP
59991: POP
// if tigers then
59992: LD_VAR 0 2
59996: IFFALSE 60080
// for i = 1 to tigers do
59998: LD_ADDR_VAR 0 11
60002: PUSH
60003: DOUBLE
60004: LD_INT 1
60006: DEC
60007: ST_TO_ADDR
60008: LD_VAR 0 2
60012: PUSH
60013: FOR_TO
60014: IFFALSE 60078
// begin hc_class = class_tiger ;
60016: LD_ADDR_OWVAR 28
60020: PUSH
60021: LD_INT 14
60023: ST_TO_ADDR
// hc_gallery =  ;
60024: LD_ADDR_OWVAR 33
60028: PUSH
60029: LD_STRING 
60031: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60032: LD_ADDR_OWVAR 35
60036: PUSH
60037: LD_INT 7
60039: NEG
60040: PPUSH
60041: LD_INT 7
60043: PPUSH
60044: CALL_OW 12
60048: ST_TO_ADDR
// animal := CreateHuman ;
60049: LD_ADDR_VAR 0 12
60053: PUSH
60054: CALL_OW 44
60058: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60059: LD_VAR 0 12
60063: PPUSH
60064: LD_VAR 0 8
60068: PPUSH
60069: LD_INT 0
60071: PPUSH
60072: CALL 62038 0 3
// end ;
60076: GO 60013
60078: POP
60079: POP
// if apemans then
60080: LD_VAR 0 3
60084: IFFALSE 60207
// for i = 1 to apemans do
60086: LD_ADDR_VAR 0 11
60090: PUSH
60091: DOUBLE
60092: LD_INT 1
60094: DEC
60095: ST_TO_ADDR
60096: LD_VAR 0 3
60100: PUSH
60101: FOR_TO
60102: IFFALSE 60205
// begin hc_class = class_apeman ;
60104: LD_ADDR_OWVAR 28
60108: PUSH
60109: LD_INT 12
60111: ST_TO_ADDR
// hc_gallery =  ;
60112: LD_ADDR_OWVAR 33
60116: PUSH
60117: LD_STRING 
60119: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
60120: LD_ADDR_OWVAR 35
60124: PUSH
60125: LD_INT 5
60127: NEG
60128: PPUSH
60129: LD_INT 5
60131: PPUSH
60132: CALL_OW 12
60136: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60137: LD_ADDR_OWVAR 31
60141: PUSH
60142: LD_INT 1
60144: PPUSH
60145: LD_INT 3
60147: PPUSH
60148: CALL_OW 12
60152: PUSH
60153: LD_INT 1
60155: PPUSH
60156: LD_INT 3
60158: PPUSH
60159: CALL_OW 12
60163: PUSH
60164: LD_INT 0
60166: PUSH
60167: LD_INT 0
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: ST_TO_ADDR
// animal := CreateHuman ;
60176: LD_ADDR_VAR 0 12
60180: PUSH
60181: CALL_OW 44
60185: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60186: LD_VAR 0 12
60190: PPUSH
60191: LD_VAR 0 8
60195: PPUSH
60196: LD_INT 0
60198: PPUSH
60199: CALL 62038 0 3
// end ;
60203: GO 60101
60205: POP
60206: POP
// if enchidnas then
60207: LD_VAR 0 4
60211: IFFALSE 60278
// for i = 1 to enchidnas do
60213: LD_ADDR_VAR 0 11
60217: PUSH
60218: DOUBLE
60219: LD_INT 1
60221: DEC
60222: ST_TO_ADDR
60223: LD_VAR 0 4
60227: PUSH
60228: FOR_TO
60229: IFFALSE 60276
// begin hc_class = 13 ;
60231: LD_ADDR_OWVAR 28
60235: PUSH
60236: LD_INT 13
60238: ST_TO_ADDR
// hc_gallery =  ;
60239: LD_ADDR_OWVAR 33
60243: PUSH
60244: LD_STRING 
60246: ST_TO_ADDR
// animal := CreateHuman ;
60247: LD_ADDR_VAR 0 12
60251: PUSH
60252: CALL_OW 44
60256: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60257: LD_VAR 0 12
60261: PPUSH
60262: LD_VAR 0 8
60266: PPUSH
60267: LD_INT 0
60269: PPUSH
60270: CALL 62038 0 3
// end ;
60274: GO 60228
60276: POP
60277: POP
// if fishes then
60278: LD_VAR 0 7
60282: IFFALSE 60349
// for i = 1 to fishes do
60284: LD_ADDR_VAR 0 11
60288: PUSH
60289: DOUBLE
60290: LD_INT 1
60292: DEC
60293: ST_TO_ADDR
60294: LD_VAR 0 7
60298: PUSH
60299: FOR_TO
60300: IFFALSE 60347
// begin hc_class = 20 ;
60302: LD_ADDR_OWVAR 28
60306: PUSH
60307: LD_INT 20
60309: ST_TO_ADDR
// hc_gallery =  ;
60310: LD_ADDR_OWVAR 33
60314: PUSH
60315: LD_STRING 
60317: ST_TO_ADDR
// animal := CreateHuman ;
60318: LD_ADDR_VAR 0 12
60322: PUSH
60323: CALL_OW 44
60327: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60328: LD_VAR 0 12
60332: PPUSH
60333: LD_VAR 0 9
60337: PPUSH
60338: LD_INT 0
60340: PPUSH
60341: CALL 62038 0 3
// end ;
60345: GO 60299
60347: POP
60348: POP
// end ;
60349: LD_VAR 0 10
60353: RET
// export function WantHeal ( sci , unit ) ; begin
60354: LD_INT 0
60356: PPUSH
// if GetTaskList ( sci ) > 0 then
60357: LD_VAR 0 1
60361: PPUSH
60362: CALL_OW 437
60366: PUSH
60367: LD_INT 0
60369: GREATER
60370: IFFALSE 60440
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60372: LD_VAR 0 1
60376: PPUSH
60377: CALL_OW 437
60381: PUSH
60382: LD_INT 1
60384: ARRAY
60385: PUSH
60386: LD_INT 1
60388: ARRAY
60389: PUSH
60390: LD_STRING l
60392: EQUAL
60393: PUSH
60394: LD_VAR 0 1
60398: PPUSH
60399: CALL_OW 437
60403: PUSH
60404: LD_INT 1
60406: ARRAY
60407: PUSH
60408: LD_INT 4
60410: ARRAY
60411: PUSH
60412: LD_VAR 0 2
60416: EQUAL
60417: AND
60418: IFFALSE 60430
// result := true else
60420: LD_ADDR_VAR 0 3
60424: PUSH
60425: LD_INT 1
60427: ST_TO_ADDR
60428: GO 60438
// result := false ;
60430: LD_ADDR_VAR 0 3
60434: PUSH
60435: LD_INT 0
60437: ST_TO_ADDR
// end else
60438: GO 60448
// result := false ;
60440: LD_ADDR_VAR 0 3
60444: PUSH
60445: LD_INT 0
60447: ST_TO_ADDR
// end ;
60448: LD_VAR 0 3
60452: RET
// export function HealTarget ( sci ) ; begin
60453: LD_INT 0
60455: PPUSH
// if not sci then
60456: LD_VAR 0 1
60460: NOT
60461: IFFALSE 60465
// exit ;
60463: GO 60530
// result := 0 ;
60465: LD_ADDR_VAR 0 2
60469: PUSH
60470: LD_INT 0
60472: ST_TO_ADDR
// if GetTaskList ( sci ) then
60473: LD_VAR 0 1
60477: PPUSH
60478: CALL_OW 437
60482: IFFALSE 60530
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60484: LD_VAR 0 1
60488: PPUSH
60489: CALL_OW 437
60493: PUSH
60494: LD_INT 1
60496: ARRAY
60497: PUSH
60498: LD_INT 1
60500: ARRAY
60501: PUSH
60502: LD_STRING l
60504: EQUAL
60505: IFFALSE 60530
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60507: LD_ADDR_VAR 0 2
60511: PUSH
60512: LD_VAR 0 1
60516: PPUSH
60517: CALL_OW 437
60521: PUSH
60522: LD_INT 1
60524: ARRAY
60525: PUSH
60526: LD_INT 4
60528: ARRAY
60529: ST_TO_ADDR
// end ;
60530: LD_VAR 0 2
60534: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60535: LD_INT 0
60537: PPUSH
60538: PPUSH
60539: PPUSH
60540: PPUSH
// if not base_units then
60541: LD_VAR 0 1
60545: NOT
60546: IFFALSE 60550
// exit ;
60548: GO 60637
// result := false ;
60550: LD_ADDR_VAR 0 2
60554: PUSH
60555: LD_INT 0
60557: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60558: LD_ADDR_VAR 0 5
60562: PUSH
60563: LD_VAR 0 1
60567: PPUSH
60568: LD_INT 21
60570: PUSH
60571: LD_INT 3
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PPUSH
60578: CALL_OW 72
60582: ST_TO_ADDR
// if not tmp then
60583: LD_VAR 0 5
60587: NOT
60588: IFFALSE 60592
// exit ;
60590: GO 60637
// for i in tmp do
60592: LD_ADDR_VAR 0 3
60596: PUSH
60597: LD_VAR 0 5
60601: PUSH
60602: FOR_IN
60603: IFFALSE 60635
// begin result := EnemyInRange ( i , 22 ) ;
60605: LD_ADDR_VAR 0 2
60609: PUSH
60610: LD_VAR 0 3
60614: PPUSH
60615: LD_INT 22
60617: PPUSH
60618: CALL 58873 0 2
60622: ST_TO_ADDR
// if result then
60623: LD_VAR 0 2
60627: IFFALSE 60633
// exit ;
60629: POP
60630: POP
60631: GO 60637
// end ;
60633: GO 60602
60635: POP
60636: POP
// end ;
60637: LD_VAR 0 2
60641: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
60642: LD_INT 0
60644: PPUSH
60645: PPUSH
// if not units then
60646: LD_VAR 0 1
60650: NOT
60651: IFFALSE 60655
// exit ;
60653: GO 60725
// result := [ ] ;
60655: LD_ADDR_VAR 0 3
60659: PUSH
60660: EMPTY
60661: ST_TO_ADDR
// for i in units do
60662: LD_ADDR_VAR 0 4
60666: PUSH
60667: LD_VAR 0 1
60671: PUSH
60672: FOR_IN
60673: IFFALSE 60723
// if GetTag ( i ) = tag then
60675: LD_VAR 0 4
60679: PPUSH
60680: CALL_OW 110
60684: PUSH
60685: LD_VAR 0 2
60689: EQUAL
60690: IFFALSE 60721
// result := Insert ( result , result + 1 , i ) ;
60692: LD_ADDR_VAR 0 3
60696: PUSH
60697: LD_VAR 0 3
60701: PPUSH
60702: LD_VAR 0 3
60706: PUSH
60707: LD_INT 1
60709: PLUS
60710: PPUSH
60711: LD_VAR 0 4
60715: PPUSH
60716: CALL_OW 2
60720: ST_TO_ADDR
60721: GO 60672
60723: POP
60724: POP
// end ;
60725: LD_VAR 0 3
60729: RET
// export function IsDriver ( un ) ; begin
60730: LD_INT 0
60732: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60733: LD_ADDR_VAR 0 2
60737: PUSH
60738: LD_VAR 0 1
60742: PUSH
60743: LD_INT 55
60745: PUSH
60746: EMPTY
60747: LIST
60748: PPUSH
60749: CALL_OW 69
60753: IN
60754: ST_TO_ADDR
// end ;
60755: LD_VAR 0 2
60759: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60760: LD_INT 0
60762: PPUSH
60763: PPUSH
// list := [ ] ;
60764: LD_ADDR_VAR 0 5
60768: PUSH
60769: EMPTY
60770: ST_TO_ADDR
// case d of 0 :
60771: LD_VAR 0 3
60775: PUSH
60776: LD_INT 0
60778: DOUBLE
60779: EQUAL
60780: IFTRUE 60784
60782: GO 60917
60784: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60785: LD_ADDR_VAR 0 5
60789: PUSH
60790: LD_VAR 0 1
60794: PUSH
60795: LD_INT 4
60797: MINUS
60798: PUSH
60799: LD_VAR 0 2
60803: PUSH
60804: LD_INT 4
60806: MINUS
60807: PUSH
60808: LD_INT 2
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: LIST
60815: PUSH
60816: LD_VAR 0 1
60820: PUSH
60821: LD_INT 3
60823: MINUS
60824: PUSH
60825: LD_VAR 0 2
60829: PUSH
60830: LD_INT 1
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: LIST
60837: PUSH
60838: LD_VAR 0 1
60842: PUSH
60843: LD_INT 4
60845: PLUS
60846: PUSH
60847: LD_VAR 0 2
60851: PUSH
60852: LD_INT 4
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: LIST
60859: PUSH
60860: LD_VAR 0 1
60864: PUSH
60865: LD_INT 3
60867: PLUS
60868: PUSH
60869: LD_VAR 0 2
60873: PUSH
60874: LD_INT 3
60876: PLUS
60877: PUSH
60878: LD_INT 5
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: LIST
60885: PUSH
60886: LD_VAR 0 1
60890: PUSH
60891: LD_VAR 0 2
60895: PUSH
60896: LD_INT 4
60898: PLUS
60899: PUSH
60900: LD_INT 0
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: LIST
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: ST_TO_ADDR
// end ; 1 :
60915: GO 61615
60917: LD_INT 1
60919: DOUBLE
60920: EQUAL
60921: IFTRUE 60925
60923: GO 61058
60925: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60926: LD_ADDR_VAR 0 5
60930: PUSH
60931: LD_VAR 0 1
60935: PUSH
60936: LD_VAR 0 2
60940: PUSH
60941: LD_INT 4
60943: MINUS
60944: PUSH
60945: LD_INT 3
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: LIST
60952: PUSH
60953: LD_VAR 0 1
60957: PUSH
60958: LD_INT 3
60960: MINUS
60961: PUSH
60962: LD_VAR 0 2
60966: PUSH
60967: LD_INT 3
60969: MINUS
60970: PUSH
60971: LD_INT 2
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: LIST
60978: PUSH
60979: LD_VAR 0 1
60983: PUSH
60984: LD_INT 4
60986: MINUS
60987: PUSH
60988: LD_VAR 0 2
60992: PUSH
60993: LD_INT 1
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: LIST
61000: PUSH
61001: LD_VAR 0 1
61005: PUSH
61006: LD_VAR 0 2
61010: PUSH
61011: LD_INT 3
61013: PLUS
61014: PUSH
61015: LD_INT 0
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: LIST
61022: PUSH
61023: LD_VAR 0 1
61027: PUSH
61028: LD_INT 4
61030: PLUS
61031: PUSH
61032: LD_VAR 0 2
61036: PUSH
61037: LD_INT 4
61039: PLUS
61040: PUSH
61041: LD_INT 5
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: LIST
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: ST_TO_ADDR
// end ; 2 :
61056: GO 61615
61058: LD_INT 2
61060: DOUBLE
61061: EQUAL
61062: IFTRUE 61066
61064: GO 61195
61066: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61067: LD_ADDR_VAR 0 5
61071: PUSH
61072: LD_VAR 0 1
61076: PUSH
61077: LD_VAR 0 2
61081: PUSH
61082: LD_INT 3
61084: MINUS
61085: PUSH
61086: LD_INT 3
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: LIST
61093: PUSH
61094: LD_VAR 0 1
61098: PUSH
61099: LD_INT 4
61101: PLUS
61102: PUSH
61103: LD_VAR 0 2
61107: PUSH
61108: LD_INT 4
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: LIST
61115: PUSH
61116: LD_VAR 0 1
61120: PUSH
61121: LD_VAR 0 2
61125: PUSH
61126: LD_INT 4
61128: PLUS
61129: PUSH
61130: LD_INT 0
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: LIST
61137: PUSH
61138: LD_VAR 0 1
61142: PUSH
61143: LD_INT 3
61145: MINUS
61146: PUSH
61147: LD_VAR 0 2
61151: PUSH
61152: LD_INT 1
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: LIST
61159: PUSH
61160: LD_VAR 0 1
61164: PUSH
61165: LD_INT 4
61167: MINUS
61168: PUSH
61169: LD_VAR 0 2
61173: PUSH
61174: LD_INT 4
61176: MINUS
61177: PUSH
61178: LD_INT 2
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: LIST
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: ST_TO_ADDR
// end ; 3 :
61193: GO 61615
61195: LD_INT 3
61197: DOUBLE
61198: EQUAL
61199: IFTRUE 61203
61201: GO 61336
61203: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61204: LD_ADDR_VAR 0 5
61208: PUSH
61209: LD_VAR 0 1
61213: PUSH
61214: LD_INT 3
61216: PLUS
61217: PUSH
61218: LD_VAR 0 2
61222: PUSH
61223: LD_INT 4
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: LIST
61230: PUSH
61231: LD_VAR 0 1
61235: PUSH
61236: LD_INT 4
61238: PLUS
61239: PUSH
61240: LD_VAR 0 2
61244: PUSH
61245: LD_INT 4
61247: PLUS
61248: PUSH
61249: LD_INT 5
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: LIST
61256: PUSH
61257: LD_VAR 0 1
61261: PUSH
61262: LD_INT 4
61264: MINUS
61265: PUSH
61266: LD_VAR 0 2
61270: PUSH
61271: LD_INT 1
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: LIST
61278: PUSH
61279: LD_VAR 0 1
61283: PUSH
61284: LD_VAR 0 2
61288: PUSH
61289: LD_INT 4
61291: MINUS
61292: PUSH
61293: LD_INT 3
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: LIST
61300: PUSH
61301: LD_VAR 0 1
61305: PUSH
61306: LD_INT 3
61308: MINUS
61309: PUSH
61310: LD_VAR 0 2
61314: PUSH
61315: LD_INT 3
61317: MINUS
61318: PUSH
61319: LD_INT 2
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: LIST
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: ST_TO_ADDR
// end ; 4 :
61334: GO 61615
61336: LD_INT 4
61338: DOUBLE
61339: EQUAL
61340: IFTRUE 61344
61342: GO 61477
61344: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61345: LD_ADDR_VAR 0 5
61349: PUSH
61350: LD_VAR 0 1
61354: PUSH
61355: LD_VAR 0 2
61359: PUSH
61360: LD_INT 4
61362: PLUS
61363: PUSH
61364: LD_INT 0
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: LIST
61371: PUSH
61372: LD_VAR 0 1
61376: PUSH
61377: LD_INT 3
61379: PLUS
61380: PUSH
61381: LD_VAR 0 2
61385: PUSH
61386: LD_INT 3
61388: PLUS
61389: PUSH
61390: LD_INT 5
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: LIST
61397: PUSH
61398: LD_VAR 0 1
61402: PUSH
61403: LD_INT 4
61405: PLUS
61406: PUSH
61407: LD_VAR 0 2
61411: PUSH
61412: LD_INT 4
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: LIST
61419: PUSH
61420: LD_VAR 0 1
61424: PUSH
61425: LD_VAR 0 2
61429: PUSH
61430: LD_INT 3
61432: MINUS
61433: PUSH
61434: LD_INT 3
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: LIST
61441: PUSH
61442: LD_VAR 0 1
61446: PUSH
61447: LD_INT 4
61449: MINUS
61450: PUSH
61451: LD_VAR 0 2
61455: PUSH
61456: LD_INT 4
61458: MINUS
61459: PUSH
61460: LD_INT 2
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: LIST
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: ST_TO_ADDR
// end ; 5 :
61475: GO 61615
61477: LD_INT 5
61479: DOUBLE
61480: EQUAL
61481: IFTRUE 61485
61483: GO 61614
61485: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61486: LD_ADDR_VAR 0 5
61490: PUSH
61491: LD_VAR 0 1
61495: PUSH
61496: LD_INT 4
61498: MINUS
61499: PUSH
61500: LD_VAR 0 2
61504: PUSH
61505: LD_INT 1
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: LIST
61512: PUSH
61513: LD_VAR 0 1
61517: PUSH
61518: LD_VAR 0 2
61522: PUSH
61523: LD_INT 4
61525: MINUS
61526: PUSH
61527: LD_INT 3
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: LIST
61534: PUSH
61535: LD_VAR 0 1
61539: PUSH
61540: LD_INT 4
61542: PLUS
61543: PUSH
61544: LD_VAR 0 2
61548: PUSH
61549: LD_INT 4
61551: PLUS
61552: PUSH
61553: LD_INT 5
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: LIST
61560: PUSH
61561: LD_VAR 0 1
61565: PUSH
61566: LD_INT 3
61568: PLUS
61569: PUSH
61570: LD_VAR 0 2
61574: PUSH
61575: LD_INT 4
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: LIST
61582: PUSH
61583: LD_VAR 0 1
61587: PUSH
61588: LD_VAR 0 2
61592: PUSH
61593: LD_INT 3
61595: PLUS
61596: PUSH
61597: LD_INT 0
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: LIST
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: ST_TO_ADDR
// end ; end ;
61612: GO 61615
61614: POP
// result := list ;
61615: LD_ADDR_VAR 0 4
61619: PUSH
61620: LD_VAR 0 5
61624: ST_TO_ADDR
// end ;
61625: LD_VAR 0 4
61629: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61630: LD_INT 0
61632: PPUSH
61633: PPUSH
61634: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61635: LD_VAR 0 1
61639: NOT
61640: PUSH
61641: LD_VAR 0 2
61645: PUSH
61646: LD_INT 1
61648: PUSH
61649: LD_INT 2
61651: PUSH
61652: LD_INT 3
61654: PUSH
61655: LD_INT 4
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: IN
61664: NOT
61665: OR
61666: IFFALSE 61670
// exit ;
61668: GO 61762
// tmp := [ ] ;
61670: LD_ADDR_VAR 0 5
61674: PUSH
61675: EMPTY
61676: ST_TO_ADDR
// for i in units do
61677: LD_ADDR_VAR 0 4
61681: PUSH
61682: LD_VAR 0 1
61686: PUSH
61687: FOR_IN
61688: IFFALSE 61731
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
61690: LD_ADDR_VAR 0 5
61694: PUSH
61695: LD_VAR 0 5
61699: PPUSH
61700: LD_VAR 0 5
61704: PUSH
61705: LD_INT 1
61707: PLUS
61708: PPUSH
61709: LD_VAR 0 4
61713: PPUSH
61714: LD_VAR 0 2
61718: PPUSH
61719: CALL_OW 259
61723: PPUSH
61724: CALL_OW 2
61728: ST_TO_ADDR
61729: GO 61687
61731: POP
61732: POP
// if not tmp then
61733: LD_VAR 0 5
61737: NOT
61738: IFFALSE 61742
// exit ;
61740: GO 61762
// result := SortListByListDesc ( units , tmp ) ;
61742: LD_ADDR_VAR 0 3
61746: PUSH
61747: LD_VAR 0 1
61751: PPUSH
61752: LD_VAR 0 5
61756: PPUSH
61757: CALL_OW 77
61761: ST_TO_ADDR
// end ;
61762: LD_VAR 0 3
61766: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61767: LD_INT 0
61769: PPUSH
61770: PPUSH
61771: PPUSH
// result := false ;
61772: LD_ADDR_VAR 0 3
61776: PUSH
61777: LD_INT 0
61779: ST_TO_ADDR
// x := GetX ( building ) ;
61780: LD_ADDR_VAR 0 4
61784: PUSH
61785: LD_VAR 0 2
61789: PPUSH
61790: CALL_OW 250
61794: ST_TO_ADDR
// y := GetY ( building ) ;
61795: LD_ADDR_VAR 0 5
61799: PUSH
61800: LD_VAR 0 2
61804: PPUSH
61805: CALL_OW 251
61809: ST_TO_ADDR
// if not building or not x or not y then
61810: LD_VAR 0 2
61814: NOT
61815: PUSH
61816: LD_VAR 0 4
61820: NOT
61821: OR
61822: PUSH
61823: LD_VAR 0 5
61827: NOT
61828: OR
61829: IFFALSE 61833
// exit ;
61831: GO 61925
// if GetTaskList ( unit ) then
61833: LD_VAR 0 1
61837: PPUSH
61838: CALL_OW 437
61842: IFFALSE 61925
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61844: LD_STRING e
61846: PUSH
61847: LD_VAR 0 1
61851: PPUSH
61852: CALL_OW 437
61856: PUSH
61857: LD_INT 1
61859: ARRAY
61860: PUSH
61861: LD_INT 1
61863: ARRAY
61864: EQUAL
61865: PUSH
61866: LD_VAR 0 4
61870: PUSH
61871: LD_VAR 0 1
61875: PPUSH
61876: CALL_OW 437
61880: PUSH
61881: LD_INT 1
61883: ARRAY
61884: PUSH
61885: LD_INT 2
61887: ARRAY
61888: EQUAL
61889: AND
61890: PUSH
61891: LD_VAR 0 5
61895: PUSH
61896: LD_VAR 0 1
61900: PPUSH
61901: CALL_OW 437
61905: PUSH
61906: LD_INT 1
61908: ARRAY
61909: PUSH
61910: LD_INT 3
61912: ARRAY
61913: EQUAL
61914: AND
61915: IFFALSE 61925
// result := true end ;
61917: LD_ADDR_VAR 0 3
61921: PUSH
61922: LD_INT 1
61924: ST_TO_ADDR
// end ;
61925: LD_VAR 0 3
61929: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61930: LD_INT 0
61932: PPUSH
// result := false ;
61933: LD_ADDR_VAR 0 4
61937: PUSH
61938: LD_INT 0
61940: ST_TO_ADDR
// if GetTaskList ( unit ) then
61941: LD_VAR 0 1
61945: PPUSH
61946: CALL_OW 437
61950: IFFALSE 62033
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61952: LD_STRING M
61954: PUSH
61955: LD_VAR 0 1
61959: PPUSH
61960: CALL_OW 437
61964: PUSH
61965: LD_INT 1
61967: ARRAY
61968: PUSH
61969: LD_INT 1
61971: ARRAY
61972: EQUAL
61973: PUSH
61974: LD_VAR 0 2
61978: PUSH
61979: LD_VAR 0 1
61983: PPUSH
61984: CALL_OW 437
61988: PUSH
61989: LD_INT 1
61991: ARRAY
61992: PUSH
61993: LD_INT 2
61995: ARRAY
61996: EQUAL
61997: AND
61998: PUSH
61999: LD_VAR 0 3
62003: PUSH
62004: LD_VAR 0 1
62008: PPUSH
62009: CALL_OW 437
62013: PUSH
62014: LD_INT 1
62016: ARRAY
62017: PUSH
62018: LD_INT 3
62020: ARRAY
62021: EQUAL
62022: AND
62023: IFFALSE 62033
// result := true ;
62025: LD_ADDR_VAR 0 4
62029: PUSH
62030: LD_INT 1
62032: ST_TO_ADDR
// end ; end ;
62033: LD_VAR 0 4
62037: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62038: LD_INT 0
62040: PPUSH
62041: PPUSH
62042: PPUSH
62043: PPUSH
// if not unit or not area then
62044: LD_VAR 0 1
62048: NOT
62049: PUSH
62050: LD_VAR 0 2
62054: NOT
62055: OR
62056: IFFALSE 62060
// exit ;
62058: GO 62224
// tmp := AreaToList ( area , i ) ;
62060: LD_ADDR_VAR 0 6
62064: PUSH
62065: LD_VAR 0 2
62069: PPUSH
62070: LD_VAR 0 5
62074: PPUSH
62075: CALL_OW 517
62079: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62080: LD_ADDR_VAR 0 5
62084: PUSH
62085: DOUBLE
62086: LD_INT 1
62088: DEC
62089: ST_TO_ADDR
62090: LD_VAR 0 6
62094: PUSH
62095: LD_INT 1
62097: ARRAY
62098: PUSH
62099: FOR_TO
62100: IFFALSE 62222
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62102: LD_ADDR_VAR 0 7
62106: PUSH
62107: LD_VAR 0 6
62111: PUSH
62112: LD_INT 1
62114: ARRAY
62115: PUSH
62116: LD_VAR 0 5
62120: ARRAY
62121: PUSH
62122: LD_VAR 0 6
62126: PUSH
62127: LD_INT 2
62129: ARRAY
62130: PUSH
62131: LD_VAR 0 5
62135: ARRAY
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
62141: LD_VAR 0 7
62145: PUSH
62146: LD_INT 1
62148: ARRAY
62149: PPUSH
62150: LD_VAR 0 7
62154: PUSH
62155: LD_INT 2
62157: ARRAY
62158: PPUSH
62159: CALL_OW 428
62163: PUSH
62164: LD_INT 0
62166: EQUAL
62167: IFFALSE 62220
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62169: LD_VAR 0 1
62173: PPUSH
62174: LD_VAR 0 7
62178: PUSH
62179: LD_INT 1
62181: ARRAY
62182: PPUSH
62183: LD_VAR 0 7
62187: PUSH
62188: LD_INT 2
62190: ARRAY
62191: PPUSH
62192: LD_VAR 0 3
62196: PPUSH
62197: CALL_OW 48
// result := IsPlaced ( unit ) ;
62201: LD_ADDR_VAR 0 4
62205: PUSH
62206: LD_VAR 0 1
62210: PPUSH
62211: CALL_OW 305
62215: ST_TO_ADDR
// exit ;
62216: POP
62217: POP
62218: GO 62224
// end ; end ;
62220: GO 62099
62222: POP
62223: POP
// end ;
62224: LD_VAR 0 4
62228: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62229: LD_INT 0
62231: PPUSH
62232: PPUSH
62233: PPUSH
// if not side or side > 8 then
62234: LD_VAR 0 1
62238: NOT
62239: PUSH
62240: LD_VAR 0 1
62244: PUSH
62245: LD_INT 8
62247: GREATER
62248: OR
62249: IFFALSE 62253
// exit ;
62251: GO 62440
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62253: LD_ADDR_VAR 0 4
62257: PUSH
62258: LD_INT 22
62260: PUSH
62261: LD_VAR 0 1
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 21
62272: PUSH
62273: LD_INT 3
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: PPUSH
62284: CALL_OW 69
62288: ST_TO_ADDR
// if not tmp then
62289: LD_VAR 0 4
62293: NOT
62294: IFFALSE 62298
// exit ;
62296: GO 62440
// enable_addtolog := true ;
62298: LD_ADDR_OWVAR 81
62302: PUSH
62303: LD_INT 1
62305: ST_TO_ADDR
// AddToLog ( [ ) ;
62306: LD_STRING [
62308: PPUSH
62309: CALL_OW 561
// for i in tmp do
62313: LD_ADDR_VAR 0 3
62317: PUSH
62318: LD_VAR 0 4
62322: PUSH
62323: FOR_IN
62324: IFFALSE 62431
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62326: LD_STRING [
62328: PUSH
62329: LD_VAR 0 3
62333: PPUSH
62334: CALL_OW 266
62338: STR
62339: PUSH
62340: LD_STRING , 
62342: STR
62343: PUSH
62344: LD_VAR 0 3
62348: PPUSH
62349: CALL_OW 250
62353: STR
62354: PUSH
62355: LD_STRING , 
62357: STR
62358: PUSH
62359: LD_VAR 0 3
62363: PPUSH
62364: CALL_OW 251
62368: STR
62369: PUSH
62370: LD_STRING , 
62372: STR
62373: PUSH
62374: LD_VAR 0 3
62378: PPUSH
62379: CALL_OW 254
62383: STR
62384: PUSH
62385: LD_STRING , 
62387: STR
62388: PUSH
62389: LD_VAR 0 3
62393: PPUSH
62394: LD_INT 1
62396: PPUSH
62397: CALL_OW 268
62401: STR
62402: PUSH
62403: LD_STRING , 
62405: STR
62406: PUSH
62407: LD_VAR 0 3
62411: PPUSH
62412: LD_INT 2
62414: PPUSH
62415: CALL_OW 268
62419: STR
62420: PUSH
62421: LD_STRING ],
62423: STR
62424: PPUSH
62425: CALL_OW 561
// end ;
62429: GO 62323
62431: POP
62432: POP
// AddToLog ( ]; ) ;
62433: LD_STRING ];
62435: PPUSH
62436: CALL_OW 561
// end ;
62440: LD_VAR 0 2
62444: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62445: LD_INT 0
62447: PPUSH
62448: PPUSH
62449: PPUSH
62450: PPUSH
62451: PPUSH
// if not area or not rate or not max then
62452: LD_VAR 0 1
62456: NOT
62457: PUSH
62458: LD_VAR 0 2
62462: NOT
62463: OR
62464: PUSH
62465: LD_VAR 0 4
62469: NOT
62470: OR
62471: IFFALSE 62475
// exit ;
62473: GO 62667
// while 1 do
62475: LD_INT 1
62477: IFFALSE 62667
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62479: LD_ADDR_VAR 0 9
62483: PUSH
62484: LD_VAR 0 1
62488: PPUSH
62489: LD_INT 1
62491: PPUSH
62492: CALL_OW 287
62496: PUSH
62497: LD_INT 10
62499: MUL
62500: ST_TO_ADDR
// r := rate / 10 ;
62501: LD_ADDR_VAR 0 7
62505: PUSH
62506: LD_VAR 0 2
62510: PUSH
62511: LD_INT 10
62513: DIVREAL
62514: ST_TO_ADDR
// time := 1 1$00 ;
62515: LD_ADDR_VAR 0 8
62519: PUSH
62520: LD_INT 2100
62522: ST_TO_ADDR
// if amount < min then
62523: LD_VAR 0 9
62527: PUSH
62528: LD_VAR 0 3
62532: LESS
62533: IFFALSE 62551
// r := r * 2 else
62535: LD_ADDR_VAR 0 7
62539: PUSH
62540: LD_VAR 0 7
62544: PUSH
62545: LD_INT 2
62547: MUL
62548: ST_TO_ADDR
62549: GO 62577
// if amount > max then
62551: LD_VAR 0 9
62555: PUSH
62556: LD_VAR 0 4
62560: GREATER
62561: IFFALSE 62577
// r := r / 2 ;
62563: LD_ADDR_VAR 0 7
62567: PUSH
62568: LD_VAR 0 7
62572: PUSH
62573: LD_INT 2
62575: DIVREAL
62576: ST_TO_ADDR
// time := time / r ;
62577: LD_ADDR_VAR 0 8
62581: PUSH
62582: LD_VAR 0 8
62586: PUSH
62587: LD_VAR 0 7
62591: DIVREAL
62592: ST_TO_ADDR
// if time < 0 then
62593: LD_VAR 0 8
62597: PUSH
62598: LD_INT 0
62600: LESS
62601: IFFALSE 62618
// time := time * - 1 ;
62603: LD_ADDR_VAR 0 8
62607: PUSH
62608: LD_VAR 0 8
62612: PUSH
62613: LD_INT 1
62615: NEG
62616: MUL
62617: ST_TO_ADDR
// wait ( time ) ;
62618: LD_VAR 0 8
62622: PPUSH
62623: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
62627: LD_INT 35
62629: PPUSH
62630: LD_INT 875
62632: PPUSH
62633: CALL_OW 12
62637: PPUSH
62638: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62642: LD_INT 1
62644: PPUSH
62645: LD_INT 5
62647: PPUSH
62648: CALL_OW 12
62652: PPUSH
62653: LD_VAR 0 1
62657: PPUSH
62658: LD_INT 1
62660: PPUSH
62661: CALL_OW 55
// end ;
62665: GO 62475
// end ;
62667: LD_VAR 0 5
62671: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62672: LD_INT 0
62674: PPUSH
62675: PPUSH
62676: PPUSH
62677: PPUSH
62678: PPUSH
62679: PPUSH
62680: PPUSH
62681: PPUSH
// if not turrets or not factories then
62682: LD_VAR 0 1
62686: NOT
62687: PUSH
62688: LD_VAR 0 2
62692: NOT
62693: OR
62694: IFFALSE 62698
// exit ;
62696: GO 63005
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62698: LD_ADDR_VAR 0 10
62702: PUSH
62703: LD_INT 5
62705: PUSH
62706: LD_INT 6
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: LD_INT 2
62715: PUSH
62716: LD_INT 4
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 3
62725: PUSH
62726: LD_INT 5
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: LIST
62737: PUSH
62738: LD_INT 24
62740: PUSH
62741: LD_INT 25
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: PUSH
62748: LD_INT 23
62750: PUSH
62751: LD_INT 27
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 42
62764: PUSH
62765: LD_INT 43
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: LD_INT 44
62774: PUSH
62775: LD_INT 46
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 45
62784: PUSH
62785: LD_INT 47
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: LIST
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: LIST
62801: ST_TO_ADDR
// result := [ ] ;
62802: LD_ADDR_VAR 0 3
62806: PUSH
62807: EMPTY
62808: ST_TO_ADDR
// for i in turrets do
62809: LD_ADDR_VAR 0 4
62813: PUSH
62814: LD_VAR 0 1
62818: PUSH
62819: FOR_IN
62820: IFFALSE 63003
// begin nat := GetNation ( i ) ;
62822: LD_ADDR_VAR 0 7
62826: PUSH
62827: LD_VAR 0 4
62831: PPUSH
62832: CALL_OW 248
62836: ST_TO_ADDR
// weapon := 0 ;
62837: LD_ADDR_VAR 0 8
62841: PUSH
62842: LD_INT 0
62844: ST_TO_ADDR
// if not nat then
62845: LD_VAR 0 7
62849: NOT
62850: IFFALSE 62854
// continue ;
62852: GO 62819
// for j in list [ nat ] do
62854: LD_ADDR_VAR 0 5
62858: PUSH
62859: LD_VAR 0 10
62863: PUSH
62864: LD_VAR 0 7
62868: ARRAY
62869: PUSH
62870: FOR_IN
62871: IFFALSE 62912
// if GetBWeapon ( i ) = j [ 1 ] then
62873: LD_VAR 0 4
62877: PPUSH
62878: CALL_OW 269
62882: PUSH
62883: LD_VAR 0 5
62887: PUSH
62888: LD_INT 1
62890: ARRAY
62891: EQUAL
62892: IFFALSE 62910
// begin weapon := j [ 2 ] ;
62894: LD_ADDR_VAR 0 8
62898: PUSH
62899: LD_VAR 0 5
62903: PUSH
62904: LD_INT 2
62906: ARRAY
62907: ST_TO_ADDR
// break ;
62908: GO 62912
// end ;
62910: GO 62870
62912: POP
62913: POP
// if not weapon then
62914: LD_VAR 0 8
62918: NOT
62919: IFFALSE 62923
// continue ;
62921: GO 62819
// for k in factories do
62923: LD_ADDR_VAR 0 6
62927: PUSH
62928: LD_VAR 0 2
62932: PUSH
62933: FOR_IN
62934: IFFALSE 62999
// begin weapons := AvailableWeaponList ( k ) ;
62936: LD_ADDR_VAR 0 9
62940: PUSH
62941: LD_VAR 0 6
62945: PPUSH
62946: CALL_OW 478
62950: ST_TO_ADDR
// if not weapons then
62951: LD_VAR 0 9
62955: NOT
62956: IFFALSE 62960
// continue ;
62958: GO 62933
// if weapon in weapons then
62960: LD_VAR 0 8
62964: PUSH
62965: LD_VAR 0 9
62969: IN
62970: IFFALSE 62997
// begin result := [ i , weapon ] ;
62972: LD_ADDR_VAR 0 3
62976: PUSH
62977: LD_VAR 0 4
62981: PUSH
62982: LD_VAR 0 8
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: ST_TO_ADDR
// exit ;
62991: POP
62992: POP
62993: POP
62994: POP
62995: GO 63005
// end ; end ;
62997: GO 62933
62999: POP
63000: POP
// end ;
63001: GO 62819
63003: POP
63004: POP
// end ;
63005: LD_VAR 0 3
63009: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63010: LD_INT 0
63012: PPUSH
// if not side or side > 8 then
63013: LD_VAR 0 3
63017: NOT
63018: PUSH
63019: LD_VAR 0 3
63023: PUSH
63024: LD_INT 8
63026: GREATER
63027: OR
63028: IFFALSE 63032
// exit ;
63030: GO 63091
// if not range then
63032: LD_VAR 0 4
63036: NOT
63037: IFFALSE 63048
// range := - 12 ;
63039: LD_ADDR_VAR 0 4
63043: PUSH
63044: LD_INT 12
63046: NEG
63047: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63048: LD_VAR 0 1
63052: PPUSH
63053: LD_VAR 0 2
63057: PPUSH
63058: LD_VAR 0 3
63062: PPUSH
63063: LD_VAR 0 4
63067: PPUSH
63068: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63072: LD_VAR 0 1
63076: PPUSH
63077: LD_VAR 0 2
63081: PPUSH
63082: LD_VAR 0 3
63086: PPUSH
63087: CALL_OW 331
// end ;
63091: LD_VAR 0 5
63095: RET
// export function Video ( mode ) ; begin
63096: LD_INT 0
63098: PPUSH
// ingame_video = mode ;
63099: LD_ADDR_OWVAR 52
63103: PUSH
63104: LD_VAR 0 1
63108: ST_TO_ADDR
// interface_hidden = mode ;
63109: LD_ADDR_OWVAR 54
63113: PUSH
63114: LD_VAR 0 1
63118: ST_TO_ADDR
// end ;
63119: LD_VAR 0 2
63123: RET
// export function Join ( array , element ) ; begin
63124: LD_INT 0
63126: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63127: LD_ADDR_VAR 0 3
63131: PUSH
63132: LD_VAR 0 1
63136: PPUSH
63137: LD_VAR 0 1
63141: PUSH
63142: LD_INT 1
63144: PLUS
63145: PPUSH
63146: LD_VAR 0 2
63150: PPUSH
63151: CALL_OW 1
63155: ST_TO_ADDR
// end ;
63156: LD_VAR 0 3
63160: RET
// export function JoinUnion ( array , element ) ; begin
63161: LD_INT 0
63163: PPUSH
// result := array union element ;
63164: LD_ADDR_VAR 0 3
63168: PUSH
63169: LD_VAR 0 1
63173: PUSH
63174: LD_VAR 0 2
63178: UNION
63179: ST_TO_ADDR
// end ;
63180: LD_VAR 0 3
63184: RET
// export function GetBehemoths ( side ) ; begin
63185: LD_INT 0
63187: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
63188: LD_ADDR_VAR 0 2
63192: PUSH
63193: LD_INT 22
63195: PUSH
63196: LD_VAR 0 1
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: LD_INT 31
63207: PUSH
63208: LD_INT 25
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PPUSH
63219: CALL_OW 69
63223: ST_TO_ADDR
// end ;
63224: LD_VAR 0 2
63228: RET
// export function Shuffle ( array ) ; var i , index ; begin
63229: LD_INT 0
63231: PPUSH
63232: PPUSH
63233: PPUSH
// result := [ ] ;
63234: LD_ADDR_VAR 0 2
63238: PUSH
63239: EMPTY
63240: ST_TO_ADDR
// if not array then
63241: LD_VAR 0 1
63245: NOT
63246: IFFALSE 63250
// exit ;
63248: GO 63349
// Randomize ;
63250: CALL_OW 10
// for i = array downto 1 do
63254: LD_ADDR_VAR 0 3
63258: PUSH
63259: DOUBLE
63260: LD_VAR 0 1
63264: INC
63265: ST_TO_ADDR
63266: LD_INT 1
63268: PUSH
63269: FOR_DOWNTO
63270: IFFALSE 63347
// begin index := rand ( 1 , array ) ;
63272: LD_ADDR_VAR 0 4
63276: PUSH
63277: LD_INT 1
63279: PPUSH
63280: LD_VAR 0 1
63284: PPUSH
63285: CALL_OW 12
63289: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63290: LD_ADDR_VAR 0 2
63294: PUSH
63295: LD_VAR 0 2
63299: PPUSH
63300: LD_VAR 0 2
63304: PUSH
63305: LD_INT 1
63307: PLUS
63308: PPUSH
63309: LD_VAR 0 1
63313: PUSH
63314: LD_VAR 0 4
63318: ARRAY
63319: PPUSH
63320: CALL_OW 2
63324: ST_TO_ADDR
// array := Delete ( array , index ) ;
63325: LD_ADDR_VAR 0 1
63329: PUSH
63330: LD_VAR 0 1
63334: PPUSH
63335: LD_VAR 0 4
63339: PPUSH
63340: CALL_OW 3
63344: ST_TO_ADDR
// end ;
63345: GO 63269
63347: POP
63348: POP
// end ;
63349: LD_VAR 0 2
63353: RET
// export function GetBaseMaterials ( base ) ; begin
63354: LD_INT 0
63356: PPUSH
// result := [ 0 , 0 , 0 ] ;
63357: LD_ADDR_VAR 0 2
63361: PUSH
63362: LD_INT 0
63364: PUSH
63365: LD_INT 0
63367: PUSH
63368: LD_INT 0
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: LIST
63375: ST_TO_ADDR
// if not base then
63376: LD_VAR 0 1
63380: NOT
63381: IFFALSE 63385
// exit ;
63383: GO 63434
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63385: LD_ADDR_VAR 0 2
63389: PUSH
63390: LD_VAR 0 1
63394: PPUSH
63395: LD_INT 1
63397: PPUSH
63398: CALL_OW 275
63402: PUSH
63403: LD_VAR 0 1
63407: PPUSH
63408: LD_INT 2
63410: PPUSH
63411: CALL_OW 275
63415: PUSH
63416: LD_VAR 0 1
63420: PPUSH
63421: LD_INT 3
63423: PPUSH
63424: CALL_OW 275
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: LIST
63433: ST_TO_ADDR
// end ;
63434: LD_VAR 0 2
63438: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63439: LD_INT 0
63441: PPUSH
63442: PPUSH
// result := array ;
63443: LD_ADDR_VAR 0 3
63447: PUSH
63448: LD_VAR 0 1
63452: ST_TO_ADDR
// if size > 0 then
63453: LD_VAR 0 2
63457: PUSH
63458: LD_INT 0
63460: GREATER
63461: IFFALSE 63507
// for i := array downto size do
63463: LD_ADDR_VAR 0 4
63467: PUSH
63468: DOUBLE
63469: LD_VAR 0 1
63473: INC
63474: ST_TO_ADDR
63475: LD_VAR 0 2
63479: PUSH
63480: FOR_DOWNTO
63481: IFFALSE 63505
// result := Delete ( result , result ) ;
63483: LD_ADDR_VAR 0 3
63487: PUSH
63488: LD_VAR 0 3
63492: PPUSH
63493: LD_VAR 0 3
63497: PPUSH
63498: CALL_OW 3
63502: ST_TO_ADDR
63503: GO 63480
63505: POP
63506: POP
// end ;
63507: LD_VAR 0 3
63511: RET
// export function ComExit ( unit ) ; var tmp ; begin
63512: LD_INT 0
63514: PPUSH
63515: PPUSH
// if not IsInUnit ( unit ) then
63516: LD_VAR 0 1
63520: PPUSH
63521: CALL_OW 310
63525: NOT
63526: IFFALSE 63530
// exit ;
63528: GO 63590
// tmp := IsInUnit ( unit ) ;
63530: LD_ADDR_VAR 0 3
63534: PUSH
63535: LD_VAR 0 1
63539: PPUSH
63540: CALL_OW 310
63544: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63545: LD_VAR 0 3
63549: PPUSH
63550: CALL_OW 247
63554: PUSH
63555: LD_INT 2
63557: EQUAL
63558: IFFALSE 63571
// ComExitVehicle ( unit ) else
63560: LD_VAR 0 1
63564: PPUSH
63565: CALL_OW 121
63569: GO 63580
// ComExitBuilding ( unit ) ;
63571: LD_VAR 0 1
63575: PPUSH
63576: CALL_OW 122
// result := tmp ;
63580: LD_ADDR_VAR 0 2
63584: PUSH
63585: LD_VAR 0 3
63589: ST_TO_ADDR
// end ;
63590: LD_VAR 0 2
63594: RET
// export function ComExitAll ( units ) ; var i ; begin
63595: LD_INT 0
63597: PPUSH
63598: PPUSH
// if not units then
63599: LD_VAR 0 1
63603: NOT
63604: IFFALSE 63608
// exit ;
63606: GO 63634
// for i in units do
63608: LD_ADDR_VAR 0 3
63612: PUSH
63613: LD_VAR 0 1
63617: PUSH
63618: FOR_IN
63619: IFFALSE 63632
// ComExit ( i ) ;
63621: LD_VAR 0 3
63625: PPUSH
63626: CALL 63512 0 1
63630: GO 63618
63632: POP
63633: POP
// end ;
63634: LD_VAR 0 2
63638: RET
// export function ResetHc ; begin
63639: LD_INT 0
63641: PPUSH
// InitHc ;
63642: CALL_OW 19
// hc_importance := 0 ;
63646: LD_ADDR_OWVAR 32
63650: PUSH
63651: LD_INT 0
63653: ST_TO_ADDR
// end ;
63654: LD_VAR 0 1
63658: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63659: LD_INT 0
63661: PPUSH
63662: PPUSH
63663: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63664: LD_ADDR_VAR 0 6
63668: PUSH
63669: LD_VAR 0 1
63673: PUSH
63674: LD_VAR 0 3
63678: PLUS
63679: PUSH
63680: LD_INT 2
63682: DIV
63683: ST_TO_ADDR
// if _x < 0 then
63684: LD_VAR 0 6
63688: PUSH
63689: LD_INT 0
63691: LESS
63692: IFFALSE 63709
// _x := _x * - 1 ;
63694: LD_ADDR_VAR 0 6
63698: PUSH
63699: LD_VAR 0 6
63703: PUSH
63704: LD_INT 1
63706: NEG
63707: MUL
63708: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63709: LD_ADDR_VAR 0 7
63713: PUSH
63714: LD_VAR 0 2
63718: PUSH
63719: LD_VAR 0 4
63723: PLUS
63724: PUSH
63725: LD_INT 2
63727: DIV
63728: ST_TO_ADDR
// if _y < 0 then
63729: LD_VAR 0 7
63733: PUSH
63734: LD_INT 0
63736: LESS
63737: IFFALSE 63754
// _y := _y * - 1 ;
63739: LD_ADDR_VAR 0 7
63743: PUSH
63744: LD_VAR 0 7
63748: PUSH
63749: LD_INT 1
63751: NEG
63752: MUL
63753: ST_TO_ADDR
// result := [ _x , _y ] ;
63754: LD_ADDR_VAR 0 5
63758: PUSH
63759: LD_VAR 0 6
63763: PUSH
63764: LD_VAR 0 7
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: ST_TO_ADDR
// end ;
63773: LD_VAR 0 5
63777: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63778: LD_INT 0
63780: PPUSH
63781: PPUSH
63782: PPUSH
63783: PPUSH
// task := GetTaskList ( unit ) ;
63784: LD_ADDR_VAR 0 7
63788: PUSH
63789: LD_VAR 0 1
63793: PPUSH
63794: CALL_OW 437
63798: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63799: LD_VAR 0 7
63803: NOT
63804: PUSH
63805: LD_VAR 0 1
63809: PPUSH
63810: LD_VAR 0 2
63814: PPUSH
63815: CALL_OW 308
63819: NOT
63820: AND
63821: IFFALSE 63825
// exit ;
63823: GO 63943
// if IsInArea ( unit , area ) then
63825: LD_VAR 0 1
63829: PPUSH
63830: LD_VAR 0 2
63834: PPUSH
63835: CALL_OW 308
63839: IFFALSE 63857
// begin ComMoveToArea ( unit , goAway ) ;
63841: LD_VAR 0 1
63845: PPUSH
63846: LD_VAR 0 3
63850: PPUSH
63851: CALL_OW 113
// exit ;
63855: GO 63943
// end ; if task [ 1 ] [ 1 ] <> M then
63857: LD_VAR 0 7
63861: PUSH
63862: LD_INT 1
63864: ARRAY
63865: PUSH
63866: LD_INT 1
63868: ARRAY
63869: PUSH
63870: LD_STRING M
63872: NONEQUAL
63873: IFFALSE 63877
// exit ;
63875: GO 63943
// x := task [ 1 ] [ 2 ] ;
63877: LD_ADDR_VAR 0 5
63881: PUSH
63882: LD_VAR 0 7
63886: PUSH
63887: LD_INT 1
63889: ARRAY
63890: PUSH
63891: LD_INT 2
63893: ARRAY
63894: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63895: LD_ADDR_VAR 0 6
63899: PUSH
63900: LD_VAR 0 7
63904: PUSH
63905: LD_INT 1
63907: ARRAY
63908: PUSH
63909: LD_INT 3
63911: ARRAY
63912: ST_TO_ADDR
// if InArea ( x , y , area ) then
63913: LD_VAR 0 5
63917: PPUSH
63918: LD_VAR 0 6
63922: PPUSH
63923: LD_VAR 0 2
63927: PPUSH
63928: CALL_OW 309
63932: IFFALSE 63943
// ComStop ( unit ) ;
63934: LD_VAR 0 1
63938: PPUSH
63939: CALL_OW 141
// end ;
63943: LD_VAR 0 4
63947: RET
// export function Abs ( value ) ; begin
63948: LD_INT 0
63950: PPUSH
// result := value ;
63951: LD_ADDR_VAR 0 2
63955: PUSH
63956: LD_VAR 0 1
63960: ST_TO_ADDR
// if value < 0 then
63961: LD_VAR 0 1
63965: PUSH
63966: LD_INT 0
63968: LESS
63969: IFFALSE 63986
// result := value * - 1 ;
63971: LD_ADDR_VAR 0 2
63975: PUSH
63976: LD_VAR 0 1
63980: PUSH
63981: LD_INT 1
63983: NEG
63984: MUL
63985: ST_TO_ADDR
// end ;
63986: LD_VAR 0 2
63990: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63991: LD_INT 0
63993: PPUSH
63994: PPUSH
63995: PPUSH
63996: PPUSH
63997: PPUSH
63998: PPUSH
63999: PPUSH
64000: PPUSH
// if not unit or not building then
64001: LD_VAR 0 1
64005: NOT
64006: PUSH
64007: LD_VAR 0 2
64011: NOT
64012: OR
64013: IFFALSE 64017
// exit ;
64015: GO 64243
// x := GetX ( building ) ;
64017: LD_ADDR_VAR 0 4
64021: PUSH
64022: LD_VAR 0 2
64026: PPUSH
64027: CALL_OW 250
64031: ST_TO_ADDR
// y := GetY ( building ) ;
64032: LD_ADDR_VAR 0 6
64036: PUSH
64037: LD_VAR 0 2
64041: PPUSH
64042: CALL_OW 251
64046: ST_TO_ADDR
// d := GetDir ( building ) ;
64047: LD_ADDR_VAR 0 8
64051: PUSH
64052: LD_VAR 0 2
64056: PPUSH
64057: CALL_OW 254
64061: ST_TO_ADDR
// r := 4 ;
64062: LD_ADDR_VAR 0 9
64066: PUSH
64067: LD_INT 4
64069: ST_TO_ADDR
// for i := 1 to 5 do
64070: LD_ADDR_VAR 0 10
64074: PUSH
64075: DOUBLE
64076: LD_INT 1
64078: DEC
64079: ST_TO_ADDR
64080: LD_INT 5
64082: PUSH
64083: FOR_TO
64084: IFFALSE 64241
// begin _x := ShiftX ( x , d , r + i ) ;
64086: LD_ADDR_VAR 0 5
64090: PUSH
64091: LD_VAR 0 4
64095: PPUSH
64096: LD_VAR 0 8
64100: PPUSH
64101: LD_VAR 0 9
64105: PUSH
64106: LD_VAR 0 10
64110: PLUS
64111: PPUSH
64112: CALL_OW 272
64116: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64117: LD_ADDR_VAR 0 7
64121: PUSH
64122: LD_VAR 0 6
64126: PPUSH
64127: LD_VAR 0 8
64131: PPUSH
64132: LD_VAR 0 9
64136: PUSH
64137: LD_VAR 0 10
64141: PLUS
64142: PPUSH
64143: CALL_OW 273
64147: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64148: LD_VAR 0 5
64152: PPUSH
64153: LD_VAR 0 7
64157: PPUSH
64158: CALL_OW 488
64162: PUSH
64163: LD_VAR 0 5
64167: PPUSH
64168: LD_VAR 0 7
64172: PPUSH
64173: CALL_OW 428
64177: PPUSH
64178: CALL_OW 247
64182: PUSH
64183: LD_INT 3
64185: PUSH
64186: LD_INT 2
64188: PUSH
64189: EMPTY
64190: LIST
64191: LIST
64192: IN
64193: NOT
64194: AND
64195: IFFALSE 64239
// begin ComMoveXY ( unit , _x , _y ) ;
64197: LD_VAR 0 1
64201: PPUSH
64202: LD_VAR 0 5
64206: PPUSH
64207: LD_VAR 0 7
64211: PPUSH
64212: CALL_OW 111
// result := [ _x , _y ] ;
64216: LD_ADDR_VAR 0 3
64220: PUSH
64221: LD_VAR 0 5
64225: PUSH
64226: LD_VAR 0 7
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: ST_TO_ADDR
// exit ;
64235: POP
64236: POP
64237: GO 64243
// end ; end ;
64239: GO 64083
64241: POP
64242: POP
// end ;
64243: LD_VAR 0 3
64247: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64248: LD_INT 0
64250: PPUSH
64251: PPUSH
64252: PPUSH
// result := 0 ;
64253: LD_ADDR_VAR 0 3
64257: PUSH
64258: LD_INT 0
64260: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64261: LD_VAR 0 1
64265: PUSH
64266: LD_INT 0
64268: LESS
64269: PUSH
64270: LD_VAR 0 1
64274: PUSH
64275: LD_INT 8
64277: GREATER
64278: OR
64279: PUSH
64280: LD_VAR 0 2
64284: PUSH
64285: LD_INT 0
64287: LESS
64288: OR
64289: PUSH
64290: LD_VAR 0 2
64294: PUSH
64295: LD_INT 8
64297: GREATER
64298: OR
64299: IFFALSE 64303
// exit ;
64301: GO 64378
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64303: LD_ADDR_VAR 0 4
64307: PUSH
64308: LD_INT 22
64310: PUSH
64311: LD_VAR 0 2
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: PPUSH
64320: CALL_OW 69
64324: PUSH
64325: FOR_IN
64326: IFFALSE 64376
// begin un := UnitShoot ( i ) ;
64328: LD_ADDR_VAR 0 5
64332: PUSH
64333: LD_VAR 0 4
64337: PPUSH
64338: CALL_OW 504
64342: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64343: LD_VAR 0 5
64347: PPUSH
64348: CALL_OW 255
64352: PUSH
64353: LD_VAR 0 1
64357: EQUAL
64358: IFFALSE 64374
// begin result := un ;
64360: LD_ADDR_VAR 0 3
64364: PUSH
64365: LD_VAR 0 5
64369: ST_TO_ADDR
// exit ;
64370: POP
64371: POP
64372: GO 64378
// end ; end ;
64374: GO 64325
64376: POP
64377: POP
// end ;
64378: LD_VAR 0 3
64382: RET
// export function GetCargoBay ( units ) ; begin
64383: LD_INT 0
64385: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64386: LD_ADDR_VAR 0 2
64390: PUSH
64391: LD_VAR 0 1
64395: PPUSH
64396: LD_INT 2
64398: PUSH
64399: LD_INT 34
64401: PUSH
64402: LD_INT 12
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 34
64411: PUSH
64412: LD_INT 51
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: LD_INT 34
64421: PUSH
64422: LD_INT 32
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: PUSH
64429: LD_INT 34
64431: PUSH
64432: LD_EXP 26
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: PUSH
64441: EMPTY
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: PPUSH
64448: CALL_OW 72
64452: ST_TO_ADDR
// end ; end_of_file
64453: LD_VAR 0 2
64457: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
64458: LD_VAR 0 1
64462: PUSH
64463: LD_INT 200
64465: DOUBLE
64466: GREATEREQUAL
64467: IFFALSE 64475
64469: LD_INT 299
64471: DOUBLE
64472: LESSEQUAL
64473: IFTRUE 64477
64475: GO 64509
64477: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
64478: LD_VAR 0 1
64482: PPUSH
64483: LD_VAR 0 2
64487: PPUSH
64488: LD_VAR 0 3
64492: PPUSH
64493: LD_VAR 0 4
64497: PPUSH
64498: LD_VAR 0 5
64502: PPUSH
64503: CALL 22919 0 5
64507: GO 64586
64509: LD_INT 300
64511: DOUBLE
64512: GREATEREQUAL
64513: IFFALSE 64521
64515: LD_INT 399
64517: DOUBLE
64518: LESSEQUAL
64519: IFTRUE 64523
64521: GO 64585
64523: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
64524: LD_VAR 0 1
64528: PPUSH
64529: LD_VAR 0 2
64533: PPUSH
64534: LD_VAR 0 3
64538: PPUSH
64539: LD_VAR 0 4
64543: PPUSH
64544: LD_VAR 0 5
64548: PPUSH
64549: LD_VAR 0 6
64553: PPUSH
64554: LD_VAR 0 7
64558: PPUSH
64559: LD_VAR 0 8
64563: PPUSH
64564: LD_VAR 0 9
64568: PPUSH
64569: LD_VAR 0 10
64573: PPUSH
64574: LD_VAR 0 11
64578: PPUSH
64579: CALL 20807 0 11
64583: GO 64586
64585: POP
// end ;
64586: PPOPN 11
64588: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
64589: LD_VAR 0 1
64593: PPUSH
64594: LD_VAR 0 2
64598: PPUSH
64599: LD_VAR 0 3
64603: PPUSH
64604: LD_VAR 0 4
64608: PPUSH
64609: LD_VAR 0 5
64613: PPUSH
64614: CALL 22901 0 5
// end ; end_of_file
64618: PPOPN 5
64620: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
64621: LD_VAR 0 1
64625: PPUSH
64626: LD_VAR 0 2
64630: PPUSH
64631: LD_VAR 0 3
64635: PPUSH
64636: LD_VAR 0 4
64640: PPUSH
64641: LD_VAR 0 5
64645: PPUSH
64646: LD_VAR 0 6
64650: PPUSH
64651: CALL 9615 0 6
// end ;
64655: PPOPN 6
64657: END
