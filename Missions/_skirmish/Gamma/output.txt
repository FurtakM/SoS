// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// SetDifficulty ( GetMultiplayerSetting ( 0 ) ) ;
  11: LD_INT 0
  13: PPUSH
  14: CALL_OW 426
  18: PPUSH
  19: CALL 279 0 1
// InGameOn ;
  23: CALL_OW 8
// CenterNowOnXY ( 0 , 0 ) ;
  27: LD_INT 0
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: CALL_OW 86
// RandomizeAll ;
  37: CALL_OW 11
// DestroyTrash ;
  41: CALL 148 0 0
// ShowPath ;
  45: CALL 214 0 0
// RandMusic ( 1 , 3 ) ;
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 3
  54: PPUSH
  55: CALL 222 0 2
// PrepareAnimals ( [ 8 , 7 , 6 ] [ dif ] , 2 , 3 , nature ) ;
  59: LD_INT 8
  61: PUSH
  62: LD_INT 7
  64: PUSH
  65: LD_INT 6
  67: PUSH
  68: EMPTY
  69: LIST
  70: LIST
  71: LIST
  72: PUSH
  73: LD_EXP 1
  77: ARRAY
  78: PPUSH
  79: LD_INT 2
  81: PPUSH
  82: LD_INT 3
  84: PPUSH
  85: LD_INT 10
  87: PPUSH
  88: CALL 329 0 4
// PrepareRussian ;
  92: CALL 1419 0 0
// Action ;
  96: CALL 8681 0 0
// PrepareAmerican ;
 100: CALL 5293 0 0
// end ;
 104: END
// every 2 2$00 + 1 1$0 do var i , bool ;
 105: GO 107
 107: DISABLE
 108: LD_INT 0
 110: PPUSH
 111: PPUSH
// begin bool := Rand ( false , true ) ;
 112: LD_ADDR_VAR 0 2
 116: PUSH
 117: LD_INT 0
 119: PPUSH
 120: LD_INT 1
 122: PPUSH
 123: CALL_OW 12
 127: ST_TO_ADDR
// if bool then
 128: LD_VAR 0 2
 132: IFFALSE 144
// RandMusic ( 1 , 3 ) ;
 134: LD_INT 1
 136: PPUSH
 137: LD_INT 3
 139: PPUSH
 140: CALL 222 0 2
// enable ;
 144: ENABLE
// end ; end_of_file
 145: PPOPN 2
 147: END
// export function DestroyTrash ; var i ; begin
 148: LD_INT 0
 150: PPUSH
 151: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_not , [ f_lives , 5 ] ] ] ) do
 152: LD_ADDR_VAR 0 2
 156: PUSH
 157: LD_INT 22
 159: PUSH
 160: LD_INT 0
 162: PUSH
 163: EMPTY
 164: LIST
 165: LIST
 166: PUSH
 167: LD_INT 3
 169: PUSH
 170: LD_INT 24
 172: PUSH
 173: LD_INT 5
 175: PUSH
 176: EMPTY
 177: LIST
 178: LIST
 179: PUSH
 180: EMPTY
 181: LIST
 182: LIST
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 69
 192: PUSH
 193: FOR_IN
 194: IFFALSE 207
// KillUnit ( i ) ;
 196: LD_VAR 0 2
 200: PPUSH
 201: CALL_OW 66
 205: GO 193
 207: POP
 208: POP
// end ;
 209: LD_VAR 0 1
 213: RET
// export function ShowPath ; begin
 214: LD_INT 0
 216: PPUSH
// end ;
 217: LD_VAR 0 1
 221: RET
// export function RandMusic ( n1 , n2 ) ; var proc ; begin
 222: LD_INT 0
 224: PPUSH
 225: PPUSH
// proc := Rand ( 0 , 100 ) ;
 226: LD_ADDR_VAR 0 4
 230: PUSH
 231: LD_INT 0
 233: PPUSH
 234: LD_INT 100
 236: PPUSH
 237: CALL_OW 12
 241: ST_TO_ADDR
// if proc > 50 then
 242: LD_VAR 0 4
 246: PUSH
 247: LD_INT 50
 249: GREATER
 250: IFFALSE 264
// music_nat := n1 else
 252: LD_ADDR_OWVAR 71
 256: PUSH
 257: LD_VAR 0 1
 261: ST_TO_ADDR
 262: GO 274
// music_nat := n2 ;
 264: LD_ADDR_OWVAR 71
 268: PUSH
 269: LD_VAR 0 2
 273: ST_TO_ADDR
// end ;
 274: LD_VAR 0 3
 278: RET
// export dif ; export function SetDifficulty ( val ) ; begin
 279: LD_INT 0
 281: PPUSH
// if not val then
 282: LD_VAR 0 1
 286: NOT
 287: IFFALSE 297
// val := 2 ;
 289: LD_ADDR_VAR 0 1
 293: PUSH
 294: LD_INT 2
 296: ST_TO_ADDR
// dif := val ;
 297: LD_ADDR_EXP 1
 301: PUSH
 302: LD_VAR 0 1
 306: ST_TO_ADDR
// if dif < 3 then
 307: LD_EXP 1
 311: PUSH
 312: LD_INT 3
 314: LESS
 315: IFFALSE 324
// RemoveEnvironmentArea ( evnt ) ;
 317: LD_INT 9
 319: PPUSH
 320: CALL_OW 355
// end ;
 324: LD_VAR 0 2
 328: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
 333: PPUSH
 334: PPUSH
 335: PPUSH
// uc_nation = nation_nature ;
 336: LD_ADDR_OWVAR 21
 340: PUSH
 341: LD_INT 0
 343: ST_TO_ADDR
// uc_side = 0 ;
 344: LD_ADDR_OWVAR 20
 348: PUSH
 349: LD_INT 0
 351: ST_TO_ADDR
// hc_importance := 0 ;
 352: LD_ADDR_OWVAR 32
 356: PUSH
 357: LD_INT 0
 359: ST_TO_ADDR
// l = 0 ;
 360: LD_ADDR_VAR 0 6
 364: PUSH
 365: LD_INT 0
 367: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
 368: LD_ADDR_OWVAR 24
 372: PUSH
 373: LD_INT 0
 375: PPUSH
 376: LD_INT 5
 378: PPUSH
 379: CALL_OW 12
 383: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
 384: LD_ADDR_OWVAR 35
 388: PUSH
 389: LD_INT 5
 391: NEG
 392: PPUSH
 393: LD_INT 5
 395: PPUSH
 396: CALL_OW 12
 400: ST_TO_ADDR
// hc_gallery =  ;
 401: LD_ADDR_OWVAR 33
 405: PUSH
 406: LD_STRING 
 408: ST_TO_ADDR
// hc_class = class_apeman ;
 409: LD_ADDR_OWVAR 28
 413: PUSH
 414: LD_INT 12
 416: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
 417: LD_ADDR_OWVAR 29
 421: PUSH
 422: LD_INT 11
 424: PPUSH
 425: LD_INT 13
 427: PPUSH
 428: CALL_OW 12
 432: PUSH
 433: LD_INT 10
 435: PPUSH
 436: LD_INT 11
 438: PPUSH
 439: CALL_OW 12
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: ST_TO_ADDR
// hc_sex = sex_male ;
 448: LD_ADDR_OWVAR 27
 452: PUSH
 453: LD_INT 1
 455: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
 456: LD_ADDR_OWVAR 31
 460: PUSH
 461: LD_INT 0
 463: PPUSH
 464: LD_INT 2
 466: PPUSH
 467: CALL_OW 12
 471: PUSH
 472: LD_INT 0
 474: PUSH
 475: LD_INT 0
 477: PUSH
 478: LD_INT 0
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: ST_TO_ADDR
// apeman = CreateHuman ;
 487: LD_ADDR_VAR 0 7
 491: PUSH
 492: CALL_OW 44
 496: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
 497: LD_VAR 0 7
 501: PPUSH
 502: LD_VAR 0 4
 506: PPUSH
 507: LD_INT 0
 509: PPUSH
 510: CALL_OW 49
// l = l + 1 ;
 514: LD_ADDR_VAR 0 6
 518: PUSH
 519: LD_VAR 0 6
 523: PUSH
 524: LD_INT 1
 526: PLUS
 527: ST_TO_ADDR
// end until l = num1 ;
 528: LD_VAR 0 6
 532: PUSH
 533: LD_VAR 0 1
 537: EQUAL
 538: IFFALSE 368
// l = 0 ;
 540: LD_ADDR_VAR 0 6
 544: PUSH
 545: LD_INT 0
 547: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
 548: LD_ADDR_OWVAR 35
 552: PUSH
 553: LD_INT 0
 555: PPUSH
 556: LD_INT 25
 558: PPUSH
 559: CALL_OW 12
 563: ST_TO_ADDR
// hc_class = class_tiger ;
 564: LD_ADDR_OWVAR 28
 568: PUSH
 569: LD_INT 14
 571: ST_TO_ADDR
// hc_sex = sex_male ;
 572: LD_ADDR_OWVAR 27
 576: PUSH
 577: LD_INT 1
 579: ST_TO_ADDR
// hc_gallery = sandnature ;
 580: LD_ADDR_OWVAR 33
 584: PUSH
 585: LD_STRING sandnature
 587: ST_TO_ADDR
// hc_face_number = 3 ;
 588: LD_ADDR_OWVAR 34
 592: PUSH
 593: LD_INT 3
 595: ST_TO_ADDR
// tiger = CreateHuman ;
 596: LD_ADDR_VAR 0 8
 600: PUSH
 601: CALL_OW 44
 605: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
 606: LD_VAR 0 8
 610: PPUSH
 611: LD_VAR 0 4
 615: PPUSH
 616: LD_INT 0
 618: PPUSH
 619: CALL_OW 49
// l = l + 1 ;
 623: LD_ADDR_VAR 0 6
 627: PUSH
 628: LD_VAR 0 6
 632: PUSH
 633: LD_INT 1
 635: PLUS
 636: ST_TO_ADDR
// end until l = num2 ;
 637: LD_VAR 0 6
 641: PUSH
 642: LD_VAR 0 2
 646: EQUAL
 647: IFFALSE 548
// l = 0 ;
 649: LD_ADDR_VAR 0 6
 653: PUSH
 654: LD_INT 0
 656: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
 657: LD_ADDR_OWVAR 28
 661: PUSH
 662: LD_INT 18
 664: ST_TO_ADDR
// hc_gallery = sandnature ;
 665: LD_ADDR_OWVAR 33
 669: PUSH
 670: LD_STRING sandnature
 672: ST_TO_ADDR
// hc_face_number = 1 ;
 673: LD_ADDR_OWVAR 34
 677: PUSH
 678: LD_INT 1
 680: ST_TO_ADDR
// bird = CreateHuman ;
 681: LD_ADDR_VAR 0 9
 685: PUSH
 686: CALL_OW 44
 690: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
 691: LD_VAR 0 9
 695: PPUSH
 696: LD_INT 0
 698: PPUSH
 699: CALL_OW 51
// l = l + 1 ;
 703: LD_ADDR_VAR 0 6
 707: PUSH
 708: LD_VAR 0 6
 712: PUSH
 713: LD_INT 1
 715: PLUS
 716: ST_TO_ADDR
// end until l = num3 ;
 717: LD_VAR 0 6
 721: PUSH
 722: LD_VAR 0 3
 726: EQUAL
 727: IFFALSE 657
// end ;
 729: LD_VAR 0 5
 733: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
 734: LD_INT 0
 736: PPUSH
 737: PPUSH
 738: PPUSH
 739: PPUSH
 740: PPUSH
 741: PPUSH
// InitHc ;
 742: CALL_OW 19
// hc_class := clas ;
 746: LD_ADDR_OWVAR 28
 750: PUSH
 751: LD_VAR 0 1
 755: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
 756: LD_ADDR_VAR 0 4
 760: PUSH
 761: LD_VAR 0 2
 765: PUSH
 766: LD_INT 1
 768: NEG
 769: PPUSH
 770: LD_INT 1
 772: PPUSH
 773: CALL_OW 12
 777: PLUS
 778: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
 779: LD_ADDR_VAR 0 5
 783: PUSH
 784: LD_VAR 0 2
 788: PUSH
 789: LD_INT 1
 791: NEG
 792: PPUSH
 793: LD_INT 1
 795: PPUSH
 796: CALL_OW 12
 800: PLUS
 801: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
 802: LD_ADDR_VAR 0 6
 806: PUSH
 807: LD_VAR 0 2
 811: PUSH
 812: LD_INT 1
 814: NEG
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: CALL_OW 12
 823: PLUS
 824: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
 825: LD_ADDR_VAR 0 7
 829: PUSH
 830: LD_VAR 0 2
 834: PUSH
 835: LD_INT 1
 837: NEG
 838: PPUSH
 839: LD_INT 1
 841: PPUSH
 842: CALL_OW 12
 846: PLUS
 847: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
 848: LD_VAR 0 1
 852: PUSH
 853: LD_INT 1
 855: EQUAL
 856: IFTRUE 868
 858: PUSH
 859: LD_VAR 0 1
 863: PUSH
 864: LD_INT 9
 866: EQUAL
 867: OR
 868: IFTRUE 880
 870: PUSH
 871: LD_VAR 0 1
 875: PUSH
 876: LD_INT 5
 878: EQUAL
 879: OR
 880: IFTRUE 892
 882: PUSH
 883: LD_VAR 0 1
 887: PUSH
 888: LD_INT 8
 890: EQUAL
 891: OR
 892: IFFALSE 917
// bonus := [ 2 , 0 , 0 , 0 ] ;
 894: LD_ADDR_VAR 0 8
 898: PUSH
 899: LD_INT 2
 901: PUSH
 902: LD_INT 0
 904: PUSH
 905: LD_INT 0
 907: PUSH
 908: LD_INT 0
 910: PUSH
 911: EMPTY
 912: LIST
 913: LIST
 914: LIST
 915: LIST
 916: ST_TO_ADDR
// if clas = 2 then
 917: LD_VAR 0 1
 921: PUSH
 922: LD_INT 2
 924: EQUAL
 925: IFFALSE 950
// bonus := [ 0 , 2 , 0 , 0 ] ;
 927: LD_ADDR_VAR 0 8
 931: PUSH
 932: LD_INT 0
 934: PUSH
 935: LD_INT 2
 937: PUSH
 938: LD_INT 0
 940: PUSH
 941: LD_INT 0
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: LIST
 948: LIST
 949: ST_TO_ADDR
// if clas = 3 then
 950: LD_VAR 0 1
 954: PUSH
 955: LD_INT 3
 957: EQUAL
 958: IFFALSE 983
// bonus := [ 0 , 0 , 2 , 0 ] ;
 960: LD_ADDR_VAR 0 8
 964: PUSH
 965: LD_INT 0
 967: PUSH
 968: LD_INT 0
 970: PUSH
 971: LD_INT 2
 973: PUSH
 974: LD_INT 0
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: LIST
 981: LIST
 982: ST_TO_ADDR
// if clas = 4 then
 983: LD_VAR 0 1
 987: PUSH
 988: LD_INT 4
 990: EQUAL
 991: IFFALSE 1016
// bonus := [ 0 , 0 , 0 , 2 ] ;
 993: LD_ADDR_VAR 0 8
 997: PUSH
 998: LD_INT 0
1000: PUSH
1001: LD_INT 0
1003: PUSH
1004: LD_INT 0
1006: PUSH
1007: LD_INT 2
1009: PUSH
1010: EMPTY
1011: LIST
1012: LIST
1013: LIST
1014: LIST
1015: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
1016: LD_VAR 0 1
1020: PUSH
1021: LD_INT 4
1023: GREATER
1024: IFFALSE 1036
1026: PUSH
1027: LD_VAR 0 1
1031: PUSH
1032: LD_INT 9
1034: NONEQUAL
1035: AND
1036: IFFALSE 1048
1038: PUSH
1039: LD_VAR 0 1
1043: PUSH
1044: LD_INT 5
1046: NONEQUAL
1047: AND
1048: IFFALSE 1060
1050: PUSH
1051: LD_VAR 0 1
1055: PUSH
1056: LD_INT 8
1058: NONEQUAL
1059: AND
1060: IFFALSE 1085
// bonus := [ 0 , 0 , 0 , 0 ] ;
1062: LD_ADDR_VAR 0 8
1066: PUSH
1067: LD_INT 0
1069: PUSH
1070: LD_INT 0
1072: PUSH
1073: LD_INT 0
1075: PUSH
1076: LD_INT 0
1078: PUSH
1079: EMPTY
1080: LIST
1081: LIST
1082: LIST
1083: LIST
1084: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
1085: LD_ADDR_OWVAR 30
1089: PUSH
1090: LD_INT 0
1092: PPUSH
1093: LD_INT 2
1095: PPUSH
1096: CALL_OW 12
1100: PUSH
1101: LD_INT 0
1103: PPUSH
1104: LD_INT 2
1106: PPUSH
1107: CALL_OW 12
1111: PUSH
1112: LD_INT 0
1114: PPUSH
1115: LD_INT 2
1117: PPUSH
1118: CALL_OW 12
1122: PUSH
1123: LD_INT 0
1125: PPUSH
1126: LD_INT 2
1128: PPUSH
1129: CALL_OW 12
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: LIST
1138: LIST
1139: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
1140: LD_ADDR_OWVAR 31
1144: PUSH
1145: LD_VAR 0 4
1149: PUSH
1150: LD_VAR 0 8
1154: PUSH
1155: LD_INT 1
1157: ARRAY
1158: PLUS
1159: PUSH
1160: LD_VAR 0 5
1164: PUSH
1165: LD_VAR 0 8
1169: PUSH
1170: LD_INT 2
1172: ARRAY
1173: PLUS
1174: PUSH
1175: LD_VAR 0 6
1179: PUSH
1180: LD_VAR 0 8
1184: PUSH
1185: LD_INT 3
1187: ARRAY
1188: PLUS
1189: PUSH
1190: LD_VAR 0 7
1194: PUSH
1195: LD_VAR 0 8
1199: PUSH
1200: LD_INT 4
1202: ARRAY
1203: PLUS
1204: PUSH
1205: EMPTY
1206: LIST
1207: LIST
1208: LIST
1209: LIST
1210: ST_TO_ADDR
// if clas = 3 then
1211: LD_VAR 0 1
1215: PUSH
1216: LD_INT 3
1218: EQUAL
1219: IFFALSE 1231
// hc_sex := sex_male else
1221: LD_ADDR_OWVAR 27
1225: PUSH
1226: LD_INT 1
1228: ST_TO_ADDR
1229: GO 1247
// hc_sex := Rand ( sex_male , sex_female ) ;
1231: LD_ADDR_OWVAR 27
1235: PUSH
1236: LD_INT 1
1238: PPUSH
1239: LD_INT 2
1241: PPUSH
1242: CALL_OW 12
1246: ST_TO_ADDR
// hc_gallery :=  ;
1247: LD_ADDR_OWVAR 33
1251: PUSH
1252: LD_STRING 
1254: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 8 , 12 ) ] ;
1255: LD_ADDR_OWVAR 29
1259: PUSH
1260: LD_INT 8
1262: PPUSH
1263: LD_INT 12
1265: PPUSH
1266: CALL_OW 12
1270: PUSH
1271: LD_INT 8
1273: PPUSH
1274: LD_INT 12
1276: PPUSH
1277: CALL_OW 12
1281: PUSH
1282: EMPTY
1283: LIST
1284: LIST
1285: ST_TO_ADDR
// hc_name :=  ;
1286: LD_ADDR_OWVAR 26
1290: PUSH
1291: LD_STRING 
1293: ST_TO_ADDR
// result := CreateHuman ;
1294: LD_ADDR_VAR 0 3
1298: PUSH
1299: CALL_OW 44
1303: ST_TO_ADDR
// end ;
1304: LD_VAR 0 3
1308: RET
// export function CreateVehicleWithDriver ( chassis , engine , weapon , area , dir , lvl ) ; var veh ; begin
1309: LD_INT 0
1311: PPUSH
1312: PPUSH
// vc_chassis := chassis ;
1313: LD_ADDR_OWVAR 37
1317: PUSH
1318: LD_VAR 0 1
1322: ST_TO_ADDR
// vc_engine := engine ;
1323: LD_ADDR_OWVAR 39
1327: PUSH
1328: LD_VAR 0 2
1332: ST_TO_ADDR
// vc_weapon := weapon ;
1333: LD_ADDR_OWVAR 40
1337: PUSH
1338: LD_VAR 0 3
1342: ST_TO_ADDR
// vc_control := control_manual ;
1343: LD_ADDR_OWVAR 38
1347: PUSH
1348: LD_INT 1
1350: ST_TO_ADDR
// veh := CreateVehicle ;
1351: LD_ADDR_VAR 0 8
1355: PUSH
1356: CALL_OW 45
1360: ST_TO_ADDR
// SetDir ( veh , dir ) ;
1361: LD_VAR 0 8
1365: PPUSH
1366: LD_VAR 0 5
1370: PPUSH
1371: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
1375: LD_VAR 0 8
1379: PPUSH
1380: LD_VAR 0 4
1384: PPUSH
1385: LD_INT 0
1387: PPUSH
1388: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , lvl ) , veh ) ;
1392: LD_INT 3
1394: PPUSH
1395: LD_VAR 0 6
1399: PPUSH
1400: CALL 734 0 2
1404: PPUSH
1405: LD_VAR 0 8
1409: PPUSH
1410: CALL_OW 52
// end ; end_of_file
1414: LD_VAR 0 7
1418: RET
// export Popov , Commander , Platonov , Kapral ; export depot_rdy , dep_x , dep_y ; export function PrepareRussian ; var i , un , skill , team , p ; begin
1419: LD_INT 0
1421: PPUSH
1422: PPUSH
1423: PPUSH
1424: PPUSH
1425: PPUSH
1426: PPUSH
// depot_rdy := false ;
1427: LD_ADDR_EXP 6
1431: PUSH
1432: LD_INT 0
1434: ST_TO_ADDR
// uc_side := 6 ;
1435: LD_ADDR_OWVAR 20
1439: PUSH
1440: LD_INT 6
1442: ST_TO_ADDR
// uc_nation := 3 ;
1443: LD_ADDR_OWVAR 21
1447: PUSH
1448: LD_INT 3
1450: ST_TO_ADDR
// hc_gallery := ru ;
1451: LD_ADDR_OWVAR 33
1455: PUSH
1456: LD_STRING ru
1458: ST_TO_ADDR
// hc_face_number := 10 ;
1459: LD_ADDR_OWVAR 34
1463: PUSH
1464: LD_INT 10
1466: ST_TO_ADDR
// hc_name := Popov ;
1467: LD_ADDR_OWVAR 26
1471: PUSH
1472: LD_STRING Popov
1474: ST_TO_ADDR
// hc_class := 1 ;
1475: LD_ADDR_OWVAR 28
1479: PUSH
1480: LD_INT 1
1482: ST_TO_ADDR
// hc_sex := sex_male ;
1483: LD_ADDR_OWVAR 27
1487: PUSH
1488: LD_INT 1
1490: ST_TO_ADDR
// popov := CreateHuman ;
1491: LD_ADDR_EXP 2
1495: PUSH
1496: CALL_OW 44
1500: ST_TO_ADDR
// hc_gallery := general ;
1501: LD_ADDR_OWVAR 33
1505: PUSH
1506: LD_STRING general
1508: ST_TO_ADDR
// hc_face_number := 1 ;
1509: LD_ADDR_OWVAR 34
1513: PUSH
1514: LD_INT 1
1516: ST_TO_ADDR
// hc_name := Platonov ;
1517: LD_ADDR_OWVAR 26
1521: PUSH
1522: LD_STRING Platonov
1524: ST_TO_ADDR
// platonov := CreateHuman ;
1525: LD_ADDR_EXP 4
1529: PUSH
1530: CALL_OW 44
1534: ST_TO_ADDR
// uc_side := 3 ;
1535: LD_ADDR_OWVAR 20
1539: PUSH
1540: LD_INT 3
1542: ST_TO_ADDR
// ChangeSideFog ( 3 , 6 ) ;
1543: LD_INT 3
1545: PPUSH
1546: LD_INT 6
1548: PPUSH
1549: CALL_OW 343
// skill := [ 6 , 5 , 4 ] [ dif ] ;
1553: LD_ADDR_VAR 0 4
1557: PUSH
1558: LD_INT 6
1560: PUSH
1561: LD_INT 5
1563: PUSH
1564: LD_INT 4
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: LIST
1571: PUSH
1572: LD_EXP 1
1576: ARRAY
1577: ST_TO_ADDR
// team := [ ] ;
1578: LD_ADDR_VAR 0 5
1582: PUSH
1583: EMPTY
1584: ST_TO_ADDR
// hc_importance := 100 ;
1585: LD_ADDR_OWVAR 32
1589: PUSH
1590: LD_INT 100
1592: ST_TO_ADDR
// hc_gallery := gamma ;
1593: LD_ADDR_OWVAR 33
1597: PUSH
1598: LD_STRING gamma
1600: ST_TO_ADDR
// hc_face_number := 1 ;
1601: LD_ADDR_OWVAR 34
1605: PUSH
1606: LD_INT 1
1608: ST_TO_ADDR
// hc_class := 1 ;
1609: LD_ADDR_OWVAR 28
1613: PUSH
1614: LD_INT 1
1616: ST_TO_ADDR
// hc_skills := [ [ 8 , 7 , 6 ] [ dif ] , 5 , 3 , 0 ] ;
1617: LD_ADDR_OWVAR 31
1621: PUSH
1622: LD_INT 8
1624: PUSH
1625: LD_INT 7
1627: PUSH
1628: LD_INT 6
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: LIST
1635: PUSH
1636: LD_EXP 1
1640: ARRAY
1641: PUSH
1642: LD_INT 5
1644: PUSH
1645: LD_INT 3
1647: PUSH
1648: LD_INT 0
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: LIST
1655: LIST
1656: ST_TO_ADDR
// hc_sex := sex_male ;
1657: LD_ADDR_OWVAR 27
1661: PUSH
1662: LD_INT 1
1664: ST_TO_ADDR
// hc_name := Mjr. Jurij Karakanov ;
1665: LD_ADDR_OWVAR 26
1669: PUSH
1670: LD_STRING Mjr. Jurij Karakanov
1672: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1673: LD_ADDR_OWVAR 29
1677: PUSH
1678: LD_INT 10
1680: PUSH
1681: LD_INT 11
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: ST_TO_ADDR
// commander := CreateHuman ;
1688: LD_ADDR_EXP 3
1692: PUSH
1693: CALL_OW 44
1697: ST_TO_ADDR
// team := team ^ commander ;
1698: LD_ADDR_VAR 0 5
1702: PUSH
1703: LD_VAR 0 5
1707: PUSH
1708: LD_EXP 3
1712: ADD
1713: ST_TO_ADDR
// hc_importance := 0 ;
1714: LD_ADDR_OWVAR 32
1718: PUSH
1719: LD_INT 0
1721: ST_TO_ADDR
// hc_name :=  ;
1722: LD_ADDR_OWVAR 26
1726: PUSH
1727: LD_STRING 
1729: ST_TO_ADDR
// hc_gallery :=  ;
1730: LD_ADDR_OWVAR 33
1734: PUSH
1735: LD_STRING 
1737: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
1738: LD_ADDR_OWVAR 29
1742: PUSH
1743: LD_INT 12
1745: PUSH
1746: LD_INT 10
1748: PUSH
1749: EMPTY
1750: LIST
1751: LIST
1752: ST_TO_ADDR
// hc_sex := sex_male ;
1753: LD_ADDR_OWVAR 27
1757: PUSH
1758: LD_INT 1
1760: ST_TO_ADDR
// Kapral := CreateHuman ;
1761: LD_ADDR_EXP 5
1765: PUSH
1766: CALL_OW 44
1770: ST_TO_ADDR
// for i = 3 downto dif do
1771: LD_ADDR_VAR 0 2
1775: PUSH
1776: DOUBLE
1777: LD_INT 3
1779: INC
1780: ST_TO_ADDR
1781: LD_EXP 1
1785: PUSH
1786: FOR_DOWNTO
1787: IFFALSE 1893
// begin vc_chassis := ru_medium_tracked ;
1789: LD_ADDR_OWVAR 37
1793: PUSH
1794: LD_INT 22
1796: ST_TO_ADDR
// vc_engine := engine_combustion ;
1797: LD_ADDR_OWVAR 39
1801: PUSH
1802: LD_INT 1
1804: ST_TO_ADDR
// vc_control := control_manual ;
1805: LD_ADDR_OWVAR 38
1809: PUSH
1810: LD_INT 1
1812: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_gun , ru_gun ] [ i ] ;
1813: LD_ADDR_OWVAR 40
1817: PUSH
1818: LD_INT 43
1820: PUSH
1821: LD_INT 44
1823: PUSH
1824: LD_INT 44
1826: PUSH
1827: EMPTY
1828: LIST
1829: LIST
1830: LIST
1831: PUSH
1832: LD_VAR 0 2
1836: ARRAY
1837: ST_TO_ADDR
// vc_fuel_battery := Rand ( 55 , 77 ) ;
1838: LD_ADDR_OWVAR 41
1842: PUSH
1843: LD_INT 55
1845: PPUSH
1846: LD_INT 77
1848: PPUSH
1849: CALL_OW 12
1853: ST_TO_ADDR
// un := CreateVehicle ;
1854: LD_ADDR_VAR 0 3
1858: PUSH
1859: CALL_OW 45
1863: ST_TO_ADDR
// SetDir ( un , 5 ) ;
1864: LD_VAR 0 3
1868: PPUSH
1869: LD_INT 5
1871: PPUSH
1872: CALL_OW 233
// PlaceUnitArea ( un , rus_spawn , false ) ;
1876: LD_VAR 0 3
1880: PPUSH
1881: LD_INT 1
1883: PPUSH
1884: LD_INT 0
1886: PPUSH
1887: CALL_OW 49
// end ;
1891: GO 1786
1893: POP
1894: POP
// vc_weapon := ru_heavy_machine_gun ;
1895: LD_ADDR_OWVAR 40
1899: PUSH
1900: LD_INT 42
1902: ST_TO_ADDR
// vc_fuel_battery := Rand ( 55 , 77 ) ;
1903: LD_ADDR_OWVAR 41
1907: PUSH
1908: LD_INT 55
1910: PPUSH
1911: LD_INT 77
1913: PPUSH
1914: CALL_OW 12
1918: ST_TO_ADDR
// un := CreateVehicle ;
1919: LD_ADDR_VAR 0 3
1923: PUSH
1924: CALL_OW 45
1928: ST_TO_ADDR
// SetDir ( un , 5 ) ;
1929: LD_VAR 0 3
1933: PPUSH
1934: LD_INT 5
1936: PPUSH
1937: CALL_OW 233
// PlaceUnitArea ( un , rus_spawn , false ) ;
1941: LD_VAR 0 3
1945: PPUSH
1946: LD_INT 1
1948: PPUSH
1949: LD_INT 0
1951: PPUSH
1952: CALL_OW 49
// for p = 1 to 4 do
1956: LD_ADDR_VAR 0 6
1960: PUSH
1961: DOUBLE
1962: LD_INT 1
1964: DEC
1965: ST_TO_ADDR
1966: LD_INT 4
1968: PUSH
1969: FOR_TO
1970: IFFALSE 2037
// for i = 1 to [ 5 , 4 , 3 ] [ dif ] do
1972: LD_ADDR_VAR 0 2
1976: PUSH
1977: DOUBLE
1978: LD_INT 1
1980: DEC
1981: ST_TO_ADDR
1982: LD_INT 5
1984: PUSH
1985: LD_INT 4
1987: PUSH
1988: LD_INT 3
1990: PUSH
1991: EMPTY
1992: LIST
1993: LIST
1994: LIST
1995: PUSH
1996: LD_EXP 1
2000: ARRAY
2001: PUSH
2002: FOR_TO
2003: IFFALSE 2033
// team := team ^ CreateHumanWithClass ( p , skill ) ;
2005: LD_ADDR_VAR 0 5
2009: PUSH
2010: LD_VAR 0 5
2014: PUSH
2015: LD_VAR 0 6
2019: PPUSH
2020: LD_VAR 0 4
2024: PPUSH
2025: CALL 734 0 2
2029: ADD
2030: ST_TO_ADDR
2031: GO 2002
2033: POP
2034: POP
2035: GO 1969
2037: POP
2038: POP
// for i = 1 to team do
2039: LD_ADDR_VAR 0 2
2043: PUSH
2044: DOUBLE
2045: LD_INT 1
2047: DEC
2048: ST_TO_ADDR
2049: LD_VAR 0 5
2053: PUSH
2054: FOR_TO
2055: IFFALSE 2175
// if GetClass ( team [ i ] ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_empty ] ] ) then
2057: LD_VAR 0 5
2061: PUSH
2062: LD_VAR 0 2
2066: ARRAY
2067: PPUSH
2068: CALL_OW 257
2072: PUSH
2073: LD_INT 3
2075: EQUAL
2076: IFFALSE 2104
2078: PUSH
2079: LD_INT 22
2081: PUSH
2082: LD_INT 3
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: PUSH
2089: LD_INT 58
2091: PUSH
2092: EMPTY
2093: LIST
2094: PUSH
2095: EMPTY
2096: LIST
2097: LIST
2098: PPUSH
2099: CALL_OW 69
2103: AND
2104: IFFALSE 2152
// PlaceHumanInUnit ( team [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_empty ] ] ) [ 1 ] ) else
2106: LD_VAR 0 5
2110: PUSH
2111: LD_VAR 0 2
2115: ARRAY
2116: PPUSH
2117: LD_INT 22
2119: PUSH
2120: LD_INT 3
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: PUSH
2127: LD_INT 58
2129: PUSH
2130: EMPTY
2131: LIST
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: PPUSH
2137: CALL_OW 69
2141: PUSH
2142: LD_INT 1
2144: ARRAY
2145: PPUSH
2146: CALL_OW 52
2150: GO 2173
// PlaceUnitArea ( team [ i ] , rus_spawn , false ) ;
2152: LD_VAR 0 5
2156: PUSH
2157: LD_VAR 0 2
2161: ARRAY
2162: PPUSH
2163: LD_INT 1
2165: PPUSH
2166: LD_INT 0
2168: PPUSH
2169: CALL_OW 49
2173: GO 2054
2175: POP
2176: POP
// end ;
2177: LD_VAR 0 1
2181: RET
// every 0 0$10 trigger depot_rdy do var i , un , l , driver ;
2182: LD_EXP 6
2186: IFFALSE 2556
2188: GO 2190
2190: DISABLE
2191: LD_INT 0
2193: PPUSH
2194: PPUSH
2195: PPUSH
2196: PPUSH
// begin Wait ( 0 0$07 ) ;
2197: LD_INT 245
2199: PPUSH
2200: CALL_OW 67
// l := 0 ;
2204: LD_ADDR_VAR 0 3
2208: PUSH
2209: LD_INT 0
2211: ST_TO_ADDR
// repeat begin uc_side := 6 ;
2212: LD_ADDR_OWVAR 20
2216: PUSH
2217: LD_INT 6
2219: ST_TO_ADDR
// uc_nation := 3 ;
2220: LD_ADDR_OWVAR 21
2224: PUSH
2225: LD_INT 3
2227: ST_TO_ADDR
// CreateVehicleWithDriver ( ru_medium_tracked , engine_combustion , ru_cargo_bay , rus_cr_spawn , 5 , Rand ( 3 , 6 ) ) ;
2228: LD_INT 22
2230: PPUSH
2231: LD_INT 1
2233: PPUSH
2234: LD_INT 51
2236: PPUSH
2237: LD_INT 5
2239: PPUSH
2240: LD_INT 5
2242: PPUSH
2243: LD_INT 3
2245: PPUSH
2246: LD_INT 6
2248: PPUSH
2249: CALL_OW 12
2253: PPUSH
2254: CALL 1309 0 6
// un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
2258: LD_ADDR_VAR 0 2
2262: PUSH
2263: LD_INT 22
2265: PUSH
2266: LD_INT 6
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PUSH
2273: LD_INT 34
2275: PUSH
2276: LD_INT 51
2278: PUSH
2279: EMPTY
2280: LIST
2281: LIST
2282: PUSH
2283: EMPTY
2284: LIST
2285: LIST
2286: PPUSH
2287: CALL_OW 69
2291: PUSH
2292: LD_INT 1
2294: ARRAY
2295: ST_TO_ADDR
// SetCargo ( un , mat_cans , 100 ) ;
2296: LD_VAR 0 2
2300: PPUSH
2301: LD_INT 1
2303: PPUSH
2304: LD_INT 100
2306: PPUSH
2307: CALL_OW 290
// ComMoveXY ( un , dep_x + 2 , dep_y ) ;
2311: LD_VAR 0 2
2315: PPUSH
2316: LD_EXP 7
2320: PUSH
2321: LD_INT 2
2323: PLUS
2324: PPUSH
2325: LD_EXP 8
2329: PPUSH
2330: CALL_OW 111
// AddComUnload ( un ) ;
2334: LD_VAR 0 2
2338: PPUSH
2339: CALL_OW 219
// if ( l = 0 ) then
2343: LD_VAR 0 3
2347: PUSH
2348: LD_INT 0
2350: EQUAL
2351: IFFALSE 2387
// begin Wait ( 0 0$03 ) ;
2353: LD_INT 105
2355: PPUSH
2356: CALL_OW 67
// driver := IsDrivenBy ( un ) ;
2360: LD_ADDR_VAR 0 4
2364: PUSH
2365: LD_VAR 0 2
2369: PPUSH
2370: CALL_OW 311
2374: ST_TO_ADDR
// Say ( driver , Dtran ) ;
2375: LD_VAR 0 4
2379: PPUSH
2380: LD_STRING Dtran
2382: PPUSH
2383: CALL_OW 88
// end ; if ( l = [ 7 , 6 , 5 ] [ dif ] - 1 ) then
2387: LD_VAR 0 3
2391: PUSH
2392: LD_INT 7
2394: PUSH
2395: LD_INT 6
2397: PUSH
2398: LD_INT 5
2400: PUSH
2401: EMPTY
2402: LIST
2403: LIST
2404: LIST
2405: PUSH
2406: LD_EXP 1
2410: ARRAY
2411: PUSH
2412: LD_INT 1
2414: MINUS
2415: EQUAL
2416: IFFALSE 2452
// begin Wait ( 0 0$03 ) ;
2418: LD_INT 105
2420: PPUSH
2421: CALL_OW 67
// driver := IsDrivenBy ( un ) ;
2425: LD_ADDR_VAR 0 4
2429: PUSH
2430: LD_VAR 0 2
2434: PPUSH
2435: CALL_OW 311
2439: ST_TO_ADDR
// Say ( driver , Dtrans ) ;
2440: LD_VAR 0 4
2444: PPUSH
2445: LD_STRING Dtrans
2447: PPUSH
2448: CALL_OW 88
// end ; while ( not IsInArea ( un , rus_exit ) ) do
2452: LD_VAR 0 2
2456: PPUSH
2457: LD_INT 6
2459: PPUSH
2460: CALL_OW 308
2464: NOT
2465: IFFALSE 2491
// begin Wait ( 0 0$01 ) ;
2467: LD_INT 35
2469: PPUSH
2470: CALL_OW 67
// AddComMoveXY ( un , 69 , 97 ) ;
2474: LD_VAR 0 2
2478: PPUSH
2479: LD_INT 69
2481: PPUSH
2482: LD_INT 97
2484: PPUSH
2485: CALL_OW 171
// end ;
2489: GO 2452
// RemoveUnit ( un ) ;
2491: LD_VAR 0 2
2495: PPUSH
2496: CALL_OW 64
// l = l + 1 ;
2500: LD_ADDR_VAR 0 3
2504: PUSH
2505: LD_VAR 0 3
2509: PUSH
2510: LD_INT 1
2512: PLUS
2513: ST_TO_ADDR
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
2514: LD_INT 1155
2516: PPUSH
2517: LD_INT 5355
2519: PPUSH
2520: CALL_OW 12
2524: PPUSH
2525: CALL_OW 67
// end until l = [ 7 , 6 , 5 ] [ dif ] ;
2529: LD_VAR 0 3
2533: PUSH
2534: LD_INT 7
2536: PUSH
2537: LD_INT 6
2539: PUSH
2540: LD_INT 5
2542: PUSH
2543: EMPTY
2544: LIST
2545: LIST
2546: LIST
2547: PUSH
2548: LD_EXP 1
2552: ARRAY
2553: EQUAL
2554: IFFALSE 2212
// end ; end_of_file
2556: PPOPN 4
2558: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_bazooka and event_rocket = false then
2559: LD_VAR 0 1
2563: PUSH
2564: LD_INT 44
2566: EQUAL
2567: IFFALSE 2579
2569: PUSH
2570: LD_EXP 20
2574: PUSH
2575: LD_INT 0
2577: EQUAL
2578: AND
2579: IFFALSE 2725
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) > 0 then
2581: LD_INT 22
2583: PUSH
2584: LD_INT 3
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: PUSH
2591: LD_INT 25
2593: PUSH
2594: LD_INT 4
2596: PUSH
2597: EMPTY
2598: LIST
2599: LIST
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: PPUSH
2605: CALL_OW 69
2609: PUSH
2610: LD_INT 0
2612: GREATER
2613: IFFALSE 2725
// begin event_rocket := true ;
2615: LD_ADDR_EXP 20
2619: PUSH
2620: LD_INT 1
2622: ST_TO_ADDR
// if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) > 0 then
2623: LD_INT 22
2625: PUSH
2626: LD_INT 3
2628: PUSH
2629: EMPTY
2630: LIST
2631: LIST
2632: PUSH
2633: LD_INT 25
2635: PUSH
2636: LD_INT 4
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: PUSH
2643: LD_INT 26
2645: PUSH
2646: LD_INT 1
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: PUSH
2653: EMPTY
2654: LIST
2655: LIST
2656: LIST
2657: PUSH
2658: EMPTY
2659: LIST
2660: PPUSH
2661: CALL_OW 69
2665: PUSH
2666: LD_INT 0
2668: GREATER
2669: IFFALSE 2725
// Say ( FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) [ 1 ] , Dsci2 ) ;
2671: LD_INT 22
2673: PUSH
2674: LD_INT 3
2676: PUSH
2677: EMPTY
2678: LIST
2679: LIST
2680: PUSH
2681: LD_INT 25
2683: PUSH
2684: LD_INT 4
2686: PUSH
2687: EMPTY
2688: LIST
2689: LIST
2690: PUSH
2691: LD_INT 26
2693: PUSH
2694: LD_INT 1
2696: PUSH
2697: EMPTY
2698: LIST
2699: LIST
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: LIST
2705: PUSH
2706: EMPTY
2707: LIST
2708: PPUSH
2709: CALL_OW 69
2713: PUSH
2714: LD_INT 1
2716: ARRAY
2717: PPUSH
2718: LD_STRING Dsci2
2720: PPUSH
2721: CALL_OW 88
// end ; end ;
2725: PPOPN 2
2727: END
// on VehicleConstructed ( un , fac ) do begin SOS_VehicleConstructed ( un , fac ) ;
2728: LD_VAR 0 1
2732: PPUSH
2733: LD_VAR 0 2
2737: PPUSH
2738: CALL 25656 0 2
// if GetSide ( un ) = 3 and GetControl ( un ) = control_computer then
2742: LD_VAR 0 1
2746: PPUSH
2747: CALL_OW 255
2751: PUSH
2752: LD_INT 3
2754: EQUAL
2755: IFFALSE 2772
2757: PUSH
2758: LD_VAR 0 1
2762: PPUSH
2763: CALL_OW 263
2767: PUSH
2768: LD_INT 3
2770: EQUAL
2771: AND
2772: IFFALSE 2782
// comp_tested := true ;
2774: LD_ADDR_EXP 22
2778: PUSH
2779: LD_INT 1
2781: ST_TO_ADDR
// end ;
2782: PPOPN 2
2784: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
2785: LD_VAR 0 1
2789: PUSH
2790: LD_INT 22
2792: PUSH
2793: LD_INT 1
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: PUSH
2800: LD_INT 21
2802: PUSH
2803: LD_INT 3
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: PUSH
2810: EMPTY
2811: LIST
2812: LIST
2813: PPUSH
2814: CALL_OW 69
2818: IN
2819: IFFALSE 2899
// if attacked = false and sikorski_ar = false then
2821: LD_EXP 15
2825: PUSH
2826: LD_INT 0
2828: EQUAL
2829: IFFALSE 2841
2831: PUSH
2832: LD_EXP 12
2836: PUSH
2837: LD_INT 0
2839: EQUAL
2840: AND
2841: IFFALSE 2899
// begin attacked := true ;
2843: LD_ADDR_EXP 15
2847: PUSH
2848: LD_INT 1
2850: ST_TO_ADDR
// if IsInUnit ( donald ) then
2851: LD_EXP 13
2855: PPUSH
2856: CALL_OW 310
2860: IFFALSE 2876
// SayRadio ( donald , DGammaF ) else
2862: LD_EXP 13
2866: PPUSH
2867: LD_STRING DGammaF
2869: PPUSH
2870: CALL_OW 94
2874: GO 2899
// if IsInUnit ( van ) then
2876: LD_EXP 14
2880: PPUSH
2881: CALL_OW 310
2885: IFFALSE 2899
// SayRadio ( van , DGammaM ) ;
2887: LD_EXP 14
2891: PPUSH
2892: LD_STRING DGammaM
2894: PPUSH
2895: CALL_OW 94
// end ; if un in FilterAllUnits ( [ f_control , control_remote ] ) then
2899: LD_VAR 0 1
2903: PUSH
2904: LD_INT 33
2906: PUSH
2907: LD_INT 2
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: PPUSH
2914: CALL_OW 69
2918: IN
2919: IFFALSE 2930
// ComUnlink ( un ) ;
2921: LD_VAR 0 1
2925: PPUSH
2926: CALL_OW 136
// end ;
2930: PPOPN 1
2932: END
// on ApemanTamed ( ape , sci ) do begin if GetSex ( sci ) = sex_male then
2933: LD_VAR 0 2
2937: PPUSH
2938: CALL_OW 258
2942: PUSH
2943: LD_INT 1
2945: EQUAL
2946: IFFALSE 2960
// Say ( sci , Dsci3 ) ;
2948: LD_VAR 0 2
2952: PPUSH
2953: LD_STRING Dsci3
2955: PPUSH
2956: CALL_OW 88
// end ;
2960: PPOPN 2
2962: END
// on BuildingComplete ( b ) do var i ;
2963: LD_INT 0
2965: PPUSH
// begin if GetBType ( b ) = b_depot and GetSide ( b ) = 3 and depot_rdy = false then
2966: LD_VAR 0 1
2970: PPUSH
2971: CALL_OW 266
2975: PUSH
2976: LD_INT 0
2978: EQUAL
2979: IFFALSE 2996
2981: PUSH
2982: LD_VAR 0 1
2986: PPUSH
2987: CALL_OW 255
2991: PUSH
2992: LD_INT 3
2994: EQUAL
2995: AND
2996: IFFALSE 3008
2998: PUSH
2999: LD_EXP 6
3003: PUSH
3004: LD_INT 0
3006: EQUAL
3007: AND
3008: IFFALSE 3072
// begin SetBName ( b , kalinin ) ;
3010: LD_VAR 0 1
3014: PPUSH
3015: LD_STRING kalinin
3017: PPUSH
3018: CALL_OW 500
// dep_x := GetX ( b ) ;
3022: LD_ADDR_EXP 7
3026: PUSH
3027: LD_VAR 0 1
3031: PPUSH
3032: CALL_OW 250
3036: ST_TO_ADDR
// dep_y := GetY ( b ) ;
3037: LD_ADDR_EXP 8
3041: PUSH
3042: LD_VAR 0 1
3046: PPUSH
3047: CALL_OW 251
3051: ST_TO_ADDR
// depot_rdy := true ;
3052: LD_ADDR_EXP 6
3056: PUSH
3057: LD_INT 1
3059: ST_TO_ADDR
// SayRadio ( popov , Dpop3 ) ;
3060: LD_EXP 2
3064: PPUSH
3065: LD_STRING Dpop3
3067: PPUSH
3068: CALL_OW 94
// end ; if GetBType ( b ) = b_lab and GetSide ( b ) = 3 and event_comp = false then
3072: LD_VAR 0 1
3076: PPUSH
3077: CALL_OW 266
3081: PUSH
3082: LD_INT 6
3084: EQUAL
3085: IFFALSE 3102
3087: PUSH
3088: LD_VAR 0 1
3092: PPUSH
3093: CALL_OW 255
3097: PUSH
3098: LD_INT 3
3100: EQUAL
3101: AND
3102: IFFALSE 3114
3104: PUSH
3105: LD_EXP 21
3109: PUSH
3110: LD_INT 0
3112: EQUAL
3113: AND
3114: IFFALSE 3209
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) > 0 then
3116: LD_INT 22
3118: PUSH
3119: LD_INT 3
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: LD_INT 25
3128: PUSH
3129: LD_INT 4
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: PPUSH
3140: CALL_OW 69
3144: PUSH
3145: LD_INT 0
3147: GREATER
3148: IFFALSE 3209
// begin event_comp := true ;
3150: LD_ADDR_EXP 21
3154: PUSH
3155: LD_INT 1
3157: ST_TO_ADDR
// Say ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , Dsci1 ) ;
3158: LD_INT 22
3160: PUSH
3161: LD_INT 3
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: PUSH
3168: LD_INT 25
3170: PUSH
3171: LD_INT 4
3173: PUSH
3174: EMPTY
3175: LIST
3176: LIST
3177: PUSH
3178: LD_INT 26
3180: PUSH
3181: LD_INT 1
3183: PUSH
3184: EMPTY
3185: LIST
3186: LIST
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: LIST
3192: PPUSH
3193: CALL_OW 69
3197: PUSH
3198: LD_INT 1
3200: ARRAY
3201: PPUSH
3202: LD_STRING Dsci1
3204: PPUSH
3205: CALL_OW 88
// end ; if GetBType ( b ) = b_bunker and GetSide ( b ) = 1 then
3209: LD_VAR 0 1
3213: PPUSH
3214: CALL_OW 266
3218: PUSH
3219: LD_INT 32
3221: EQUAL
3222: IFFALSE 3239
3224: PUSH
3225: LD_VAR 0 1
3229: PPUSH
3230: CALL_OW 255
3234: PUSH
3235: LD_INT 1
3237: EQUAL
3238: AND
3239: IFFALSE 3304
// begin RaiseSailEvent ( 6 ) ;
3241: LD_INT 6
3243: PPUSH
3244: CALL_OW 427
// AddComPlaceWeapon ( b , gamma_towers [ 4 ] ) ;
3248: LD_VAR 0 1
3252: PPUSH
3253: LD_EXP 18
3257: PUSH
3258: LD_INT 4
3260: ARRAY
3261: PPUSH
3262: CALL_OW 208
// for i = 1 to 4 do
3266: LD_ADDR_VAR 0 2
3270: PUSH
3271: DOUBLE
3272: LD_INT 1
3274: DEC
3275: ST_TO_ADDR
3276: LD_INT 4
3278: PUSH
3279: FOR_TO
3280: IFFALSE 3302
// gamma_towers := Delete ( gamma_towers , 1 ) ;
3282: LD_ADDR_EXP 18
3286: PUSH
3287: LD_EXP 18
3291: PPUSH
3292: LD_INT 1
3294: PPUSH
3295: CALL_OW 3
3299: ST_TO_ADDR
3300: GO 3279
3302: POP
3303: POP
// end ; end ;
3304: PPOPN 2
3306: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3307: LD_VAR 0 1
3311: PPUSH
3312: CALL 25598 0 1
// if un in Patrol then
3316: LD_VAR 0 1
3320: PUSH
3321: LD_EXP 17
3325: IN
3326: IFFALSE 3344
// Patrol := Patrol diff un ;
3328: LD_ADDR_EXP 17
3332: PUSH
3333: LD_EXP 17
3337: PUSH
3338: LD_VAR 0 1
3342: DIFF
3343: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
3344: LD_VAR 0 1
3348: PUSH
3349: LD_INT 22
3351: PUSH
3352: LD_INT 1
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PUSH
3359: LD_INT 30
3361: PUSH
3362: LD_INT 32
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: PUSH
3369: EMPTY
3370: LIST
3371: LIST
3372: PPUSH
3373: CALL_OW 69
3377: IN
3378: IFFALSE 3464
// begin gamma_towers := gamma_towers ^ GetX ( un ) ;
3380: LD_ADDR_EXP 18
3384: PUSH
3385: LD_EXP 18
3389: PUSH
3390: LD_VAR 0 1
3394: PPUSH
3395: CALL_OW 250
3399: ADD
3400: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetY ( un ) ;
3401: LD_ADDR_EXP 18
3405: PUSH
3406: LD_EXP 18
3410: PUSH
3411: LD_VAR 0 1
3415: PPUSH
3416: CALL_OW 251
3420: ADD
3421: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetDir ( un ) ;
3422: LD_ADDR_EXP 18
3426: PUSH
3427: LD_EXP 18
3431: PUSH
3432: LD_VAR 0 1
3436: PPUSH
3437: CALL_OW 254
3441: ADD
3442: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetBWeapon ( un ) ;
3443: LD_ADDR_EXP 18
3447: PUSH
3448: LD_EXP 18
3452: PUSH
3453: LD_VAR 0 1
3457: PPUSH
3458: CALL_OW 269
3462: ADD
3463: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) then
3464: LD_VAR 0 1
3468: PUSH
3469: LD_INT 33
3471: PUSH
3472: LD_INT 2
3474: PUSH
3475: EMPTY
3476: LIST
3477: LIST
3478: PUSH
3479: LD_INT 3
3481: PUSH
3482: LD_INT 34
3484: PUSH
3485: LD_INT 13
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PUSH
3492: EMPTY
3493: LIST
3494: LIST
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PPUSH
3500: CALL_OW 69
3504: IN
3505: IFFALSE 3521
// new_veh := new_veh + 1 ;
3507: LD_ADDR_EXP 19
3511: PUSH
3512: LD_EXP 19
3516: PUSH
3517: LD_INT 1
3519: PLUS
3520: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_weapon , us_crane ] ) then
3521: LD_VAR 0 1
3525: PUSH
3526: LD_INT 34
3528: PUSH
3529: LD_INT 13
3531: PUSH
3532: EMPTY
3533: LIST
3534: LIST
3535: PPUSH
3536: CALL_OW 69
3540: IN
3541: IFFALSE 3562
// AddComConstruct ( am_fac , us_medium_tracked , engine_solar , control_remote , us_crane ) ;
3543: LD_INT 26
3545: PPUSH
3546: LD_INT 3
3548: PPUSH
3549: LD_INT 2
3551: PPUSH
3552: LD_INT 2
3554: PPUSH
3555: LD_INT 13
3557: PPUSH
3558: CALL_OW 185
// if un = am_dep then
3562: LD_VAR 0 1
3566: PUSH
3567: LD_INT 25
3569: EQUAL
3570: IFFALSE 3740
// begin SayRadio ( Platonov , DPlat ) ;
3572: LD_EXP 4
3576: PPUSH
3577: LD_STRING DPlat
3579: PPUSH
3580: CALL_OW 94
// if timer <= 30 30$00 then
3584: LD_EXP 24
3588: PUSH
3589: LD_INT 63000
3591: LESSEQUAL
3592: IFFALSE 3606
// AddMedal ( gamma_med3 , 1 ) else
3594: LD_STRING gamma_med3
3596: PPUSH
3597: LD_INT 1
3599: PPUSH
3600: CALL_OW 101
3604: GO 3656
// if timer <= [ 50 50$00 , 42 42$00 , 35 35$00 ] [ dif ] then
3606: LD_EXP 24
3610: PUSH
3611: LD_INT 105000
3613: PUSH
3614: LD_INT 88200
3616: PUSH
3617: LD_INT 73500
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: LIST
3624: PUSH
3625: LD_EXP 1
3629: ARRAY
3630: LESSEQUAL
3631: IFFALSE 3645
// AddMedal ( gamma_med3 , 2 ) else
3633: LD_STRING gamma_med3
3635: PPUSH
3636: LD_INT 2
3638: PPUSH
3639: CALL_OW 101
3643: GO 3656
// AddMedal ( gamma_med3 , - 1 ) ;
3645: LD_STRING gamma_med3
3647: PPUSH
3648: LD_INT 1
3650: NEG
3651: PPUSH
3652: CALL_OW 101
// if not comp_tested then
3656: LD_EXP 22
3660: NOT
3661: IFFALSE 3676
// AddMedal ( gamma_med2 , - 1 ) else
3663: LD_STRING gamma_med2
3665: PPUSH
3666: LD_INT 1
3668: NEG
3669: PPUSH
3670: CALL_OW 101
3674: GO 3686
// AddMedal ( gamma_med2 , 1 ) ;
3676: LD_STRING gamma_med2
3678: PPUSH
3679: LD_INT 1
3681: PPUSH
3682: CALL_OW 101
// if IsDead ( sikorski ) and not sikorski_run then
3686: LD_EXP 9
3690: PPUSH
3691: CALL_OW 301
3695: IFFALSE 3704
3697: PUSH
3698: LD_EXP 23
3702: NOT
3703: AND
3704: IFFALSE 3718
// AddMedal ( gamma_med1 , 1 ) else
3706: LD_STRING gamma_med1
3708: PPUSH
3709: LD_INT 1
3711: PPUSH
3712: CALL_OW 101
3716: GO 3729
// AddMedal ( gamma_med1 , - 1 ) ;
3718: LD_STRING gamma_med1
3720: PPUSH
3721: LD_INT 1
3723: NEG
3724: PPUSH
3725: CALL_OW 101
// GiveMedals ( GAMMA_MEDALS ) ;
3729: LD_STRING GAMMA_MEDALS
3731: PPUSH
3732: CALL_OW 102
// YouWin ;
3736: CALL_OW 103
// end ; if un = commander then
3740: LD_VAR 0 1
3744: PUSH
3745: LD_EXP 3
3749: EQUAL
3750: IFFALSE 3759
// YouLost ( comml ) ;
3752: LD_STRING comml
3754: PPUSH
3755: CALL_OW 104
// if un = sikorski then
3759: LD_VAR 0 1
3763: PUSH
3764: LD_EXP 9
3768: EQUAL
3769: IFFALSE 3781
// AddMedal ( gamma_med1 , 1 ) ;
3771: LD_STRING gamma_med1
3773: PPUSH
3774: LD_INT 1
3776: PPUSH
3777: CALL_OW 101
// end ;
3781: PPOPN 1
3783: END
// on SailEvent ( event ) do var i , un , filter , doc , bac , place , engs , crane , b ;
3784: LD_INT 0
3786: PPUSH
3787: PPUSH
3788: PPUSH
3789: PPUSH
3790: PPUSH
3791: PPUSH
3792: PPUSH
3793: PPUSH
3794: PPUSH
// begin if event = 1 then
3795: LD_VAR 0 1
3799: PUSH
3800: LD_INT 1
3802: EQUAL
3803: IFFALSE 4100
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3805: LD_ADDR_VAR 0 4
3809: PUSH
3810: LD_INT 22
3812: PUSH
3813: LD_INT 1
3815: PUSH
3816: EMPTY
3817: LIST
3818: LIST
3819: PUSH
3820: LD_INT 21
3822: PUSH
3823: LD_INT 3
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: PUSH
3830: LD_INT 3
3832: PUSH
3833: LD_INT 24
3835: PUSH
3836: LD_INT 1000
3838: PUSH
3839: EMPTY
3840: LIST
3841: LIST
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: PUSH
3847: EMPTY
3848: LIST
3849: LIST
3850: LIST
3851: PPUSH
3852: CALL_OW 69
3856: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ] ) ;
3857: LD_ADDR_VAR 0 8
3861: PUSH
3862: LD_INT 22
3864: PUSH
3865: LD_INT 1
3867: PUSH
3868: EMPTY
3869: LIST
3870: LIST
3871: PUSH
3872: LD_INT 25
3874: PUSH
3875: LD_INT 2
3877: PUSH
3878: EMPTY
3879: LIST
3880: LIST
3881: PUSH
3882: LD_INT 24
3884: PUSH
3885: LD_INT 1000
3887: PUSH
3888: EMPTY
3889: LIST
3890: LIST
3891: PUSH
3892: EMPTY
3893: LIST
3894: LIST
3895: LIST
3896: PUSH
3897: EMPTY
3898: LIST
3899: PPUSH
3900: CALL_OW 69
3904: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) ;
3905: LD_ADDR_VAR 0 9
3909: PUSH
3910: LD_INT 22
3912: PUSH
3913: LD_INT 1
3915: PUSH
3916: EMPTY
3917: LIST
3918: LIST
3919: PUSH
3920: LD_INT 34
3922: PUSH
3923: LD_INT 13
3925: PUSH
3926: EMPTY
3927: LIST
3928: LIST
3929: PUSH
3930: EMPTY
3931: LIST
3932: LIST
3933: PPUSH
3934: CALL_OW 69
3938: ST_TO_ADDR
// if engs > 0 then
3939: LD_VAR 0 8
3943: PUSH
3944: LD_INT 0
3946: GREATER
3947: IFFALSE 4052
// for i = 1 to engs do
3949: LD_ADDR_VAR 0 2
3953: PUSH
3954: DOUBLE
3955: LD_INT 1
3957: DEC
3958: ST_TO_ADDR
3959: LD_VAR 0 8
3963: PUSH
3964: FOR_TO
3965: IFFALSE 4050
// begin if IsInUnit ( engs [ i ] ) then
3967: LD_VAR 0 8
3971: PUSH
3972: LD_VAR 0 2
3976: ARRAY
3977: PPUSH
3978: CALL_OW 310
3982: IFFALSE 3999
// ComExitBuilding ( engs [ i ] ) ;
3984: LD_VAR 0 8
3988: PUSH
3989: LD_VAR 0 2
3993: ARRAY
3994: PPUSH
3995: CALL_OW 122
// Wait ( 0 0$0.2 ) ;
3999: LD_INT 7
4001: PPUSH
4002: CALL_OW 67
// if not HasTask ( engs [ i ] ) then
4006: LD_VAR 0 8
4010: PUSH
4011: LD_VAR 0 2
4015: ARRAY
4016: PPUSH
4017: CALL_OW 314
4021: NOT
4022: IFFALSE 4048
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
4024: LD_VAR 0 8
4028: PUSH
4029: LD_VAR 0 2
4033: ARRAY
4034: PPUSH
4035: LD_VAR 0 4
4039: PUSH
4040: LD_INT 1
4042: ARRAY
4043: PPUSH
4044: CALL_OW 130
// end ;
4048: GO 3964
4050: POP
4051: POP
// if crane > 0 then
4052: LD_VAR 0 9
4056: PUSH
4057: LD_INT 0
4059: GREATER
4060: IFFALSE 4100
// if not HasTask ( crane [ 1 ] ) then
4062: LD_VAR 0 9
4066: PUSH
4067: LD_INT 1
4069: ARRAY
4070: PPUSH
4071: CALL_OW 314
4075: NOT
4076: IFFALSE 4100
// ComRepairBuilding ( crane [ 1 ] , filter [ 1 ] ) ;
4078: LD_VAR 0 9
4082: PUSH
4083: LD_INT 1
4085: ARRAY
4086: PPUSH
4087: LD_VAR 0 4
4091: PUSH
4092: LD_INT 1
4094: ARRAY
4095: PPUSH
4096: CALL_OW 130
// end ; if event = 2 then
4100: LD_VAR 0 1
4104: PUSH
4105: LD_INT 2
4107: EQUAL
4108: IFFALSE 4232
// begin engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
4110: LD_ADDR_VAR 0 8
4114: PUSH
4115: LD_INT 22
4117: PUSH
4118: LD_INT 1
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: PUSH
4125: LD_INT 25
4127: PUSH
4128: LD_INT 2
4130: PUSH
4131: EMPTY
4132: LIST
4133: LIST
4134: PUSH
4135: EMPTY
4136: LIST
4137: LIST
4138: PPUSH
4139: CALL_OW 69
4143: ST_TO_ADDR
// if engs > 0 then
4144: LD_VAR 0 8
4148: PUSH
4149: LD_INT 0
4151: GREATER
4152: IFFALSE 4232
// for i = 1 to engs do
4154: LD_ADDR_VAR 0 2
4158: PUSH
4159: DOUBLE
4160: LD_INT 1
4162: DEC
4163: ST_TO_ADDR
4164: LD_VAR 0 8
4168: PUSH
4169: FOR_TO
4170: IFFALSE 4230
// if not HasTask ( engs [ i ] ) and not IsInUnit ( engs [ i ] ) then
4172: LD_VAR 0 8
4176: PUSH
4177: LD_VAR 0 2
4181: ARRAY
4182: PPUSH
4183: CALL_OW 314
4187: NOT
4188: IFFALSE 4208
4190: PUSH
4191: LD_VAR 0 8
4195: PUSH
4196: LD_VAR 0 2
4200: ARRAY
4201: PPUSH
4202: CALL_OW 310
4206: NOT
4207: AND
4208: IFFALSE 4228
// ComEnterUnit ( engs [ i ] , am_dep ) ;
4210: LD_VAR 0 8
4214: PUSH
4215: LD_VAR 0 2
4219: ARRAY
4220: PPUSH
4221: LD_INT 25
4223: PPUSH
4224: CALL_OW 120
4228: GO 4169
4230: POP
4231: POP
// end ; if event = 3 then
4232: LD_VAR 0 1
4236: PUSH
4237: LD_INT 3
4239: EQUAL
4240: IFFALSE 4606
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_class , 4 ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
4242: LD_ADDR_VAR 0 4
4246: PUSH
4247: LD_INT 22
4249: PUSH
4250: LD_INT 1
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: PUSH
4257: LD_INT 21
4259: PUSH
4260: LD_INT 1
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PUSH
4267: LD_INT 3
4269: PUSH
4270: LD_INT 25
4272: PUSH
4273: LD_INT 4
4275: PUSH
4276: EMPTY
4277: LIST
4278: LIST
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: PUSH
4284: LD_INT 3
4286: PUSH
4287: LD_INT 24
4289: PUSH
4290: LD_INT 800
4292: PUSH
4293: EMPTY
4294: LIST
4295: LIST
4296: PUSH
4297: EMPTY
4298: LIST
4299: LIST
4300: PUSH
4301: EMPTY
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: PUSH
4307: EMPTY
4308: LIST
4309: PPUSH
4310: CALL_OW 69
4314: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
4315: LD_ADDR_VAR 0 5
4319: PUSH
4320: LD_INT 22
4322: PUSH
4323: LD_INT 1
4325: PUSH
4326: EMPTY
4327: LIST
4328: LIST
4329: PUSH
4330: LD_INT 25
4332: PUSH
4333: LD_INT 4
4335: PUSH
4336: EMPTY
4337: LIST
4338: LIST
4339: PUSH
4340: EMPTY
4341: LIST
4342: LIST
4343: PPUSH
4344: CALL_OW 69
4348: ST_TO_ADDR
// if filter > 0 then
4349: LD_VAR 0 4
4353: PUSH
4354: LD_INT 0
4356: GREATER
4357: IFFALSE 4548
// begin for i = 1 to doc do
4359: LD_ADDR_VAR 0 2
4363: PUSH
4364: DOUBLE
4365: LD_INT 1
4367: DEC
4368: ST_TO_ADDR
4369: LD_VAR 0 5
4373: PUSH
4374: FOR_TO
4375: IFFALSE 4477
// begin if IsInUnit ( doc [ i ] ) then
4377: LD_VAR 0 5
4381: PUSH
4382: LD_VAR 0 2
4386: ARRAY
4387: PPUSH
4388: CALL_OW 310
4392: IFFALSE 4409
// ComExitBuilding ( doc [ i ] ) ;
4394: LD_VAR 0 5
4398: PUSH
4399: LD_VAR 0 2
4403: ARRAY
4404: PPUSH
4405: CALL_OW 122
// if GetDistUnits ( filter [ 1 ] , am_lab ) < 10 and not HasTask ( doc [ i ] ) then
4409: LD_VAR 0 4
4413: PUSH
4414: LD_INT 1
4416: ARRAY
4417: PPUSH
4418: LD_INT 46
4420: PPUSH
4421: CALL_OW 296
4425: PUSH
4426: LD_INT 10
4428: LESS
4429: IFFALSE 4449
4431: PUSH
4432: LD_VAR 0 5
4436: PUSH
4437: LD_VAR 0 2
4441: ARRAY
4442: PPUSH
4443: CALL_OW 314
4447: NOT
4448: AND
4449: IFFALSE 4475
// ComHeal ( doc [ i ] , filter [ 1 ] ) ;
4451: LD_VAR 0 5
4455: PUSH
4456: LD_VAR 0 2
4460: ARRAY
4461: PPUSH
4462: LD_VAR 0 4
4466: PUSH
4467: LD_INT 1
4469: ARRAY
4470: PPUSH
4471: CALL_OW 128
// end ;
4475: GO 4374
4477: POP
4478: POP
// for i = 1 to filter do
4479: LD_ADDR_VAR 0 2
4483: PUSH
4484: DOUBLE
4485: LD_INT 1
4487: DEC
4488: ST_TO_ADDR
4489: LD_VAR 0 4
4493: PUSH
4494: FOR_TO
4495: IFFALSE 4544
// if GetDistUnits ( filter [ i ] , am_lab ) > 10 then
4497: LD_VAR 0 4
4501: PUSH
4502: LD_VAR 0 2
4506: ARRAY
4507: PPUSH
4508: LD_INT 46
4510: PPUSH
4511: CALL_OW 296
4515: PUSH
4516: LD_INT 10
4518: GREATER
4519: IFFALSE 4542
// ComMoveXY ( filter [ i ] , 47 , 12 ) ;
4521: LD_VAR 0 4
4525: PUSH
4526: LD_VAR 0 2
4530: ARRAY
4531: PPUSH
4532: LD_INT 47
4534: PPUSH
4535: LD_INT 12
4537: PPUSH
4538: CALL_OW 111
4542: GO 4494
4544: POP
4545: POP
// end else
4546: GO 4606
// for i = 1 to doc do
4548: LD_ADDR_VAR 0 2
4552: PUSH
4553: DOUBLE
4554: LD_INT 1
4556: DEC
4557: ST_TO_ADDR
4558: LD_VAR 0 5
4562: PUSH
4563: FOR_TO
4564: IFFALSE 4604
// if not IsInUnit ( doc [ i ] ) then
4566: LD_VAR 0 5
4570: PUSH
4571: LD_VAR 0 2
4575: ARRAY
4576: PPUSH
4577: CALL_OW 310
4581: NOT
4582: IFFALSE 4602
// ComEnterUnit ( doc [ i ] , am_lab ) ;
4584: LD_VAR 0 5
4588: PUSH
4589: LD_VAR 0 2
4593: ARRAY
4594: PPUSH
4595: LD_INT 46
4597: PPUSH
4598: CALL_OW 120
4602: GO 4563
4604: POP
4605: POP
// end ; if event = 4 then
4606: LD_VAR 0 1
4610: PUSH
4611: LD_INT 4
4613: EQUAL
4614: IFFALSE 4867
// begin bac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
4616: LD_ADDR_VAR 0 6
4620: PUSH
4621: LD_INT 22
4623: PUSH
4624: LD_INT 1
4626: PUSH
4627: EMPTY
4628: LIST
4629: LIST
4630: PUSH
4631: LD_INT 30
4633: PUSH
4634: LD_INT 5
4636: PUSH
4637: EMPTY
4638: LIST
4639: LIST
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: PPUSH
4645: CALL_OW 69
4649: ST_TO_ADDR
// for i = 1 to bac do
4650: LD_ADDR_VAR 0 2
4654: PUSH
4655: DOUBLE
4656: LD_INT 1
4658: DEC
4659: ST_TO_ADDR
4660: LD_VAR 0 6
4664: PUSH
4665: FOR_TO
4666: IFFALSE 4707
// if UnitsInside ( bac [ i ] ) < 6 then
4668: LD_VAR 0 6
4672: PUSH
4673: LD_VAR 0 2
4677: ARRAY
4678: PPUSH
4679: CALL_OW 313
4683: PUSH
4684: LD_INT 6
4686: LESS
4687: IFFALSE 4705
// place := bac [ i ] ;
4689: LD_ADDR_VAR 0 7
4693: PUSH
4694: LD_VAR 0 6
4698: PUSH
4699: LD_VAR 0 2
4703: ARRAY
4704: ST_TO_ADDR
4705: GO 4665
4707: POP
4708: POP
// if place then
4709: LD_VAR 0 7
4713: IFFALSE 4867
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] ] , [ f_lives , 1000 ] ] ] ) diff Patrol ;
4715: LD_ADDR_VAR 0 4
4719: PUSH
4720: LD_INT 22
4722: PUSH
4723: LD_INT 1
4725: PUSH
4726: EMPTY
4727: LIST
4728: LIST
4729: PUSH
4730: LD_INT 2
4732: PUSH
4733: LD_INT 25
4735: PUSH
4736: LD_INT 1
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: PUSH
4743: LD_INT 25
4745: PUSH
4746: LD_INT 5
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: LIST
4757: PUSH
4758: LD_INT 24
4760: PUSH
4761: LD_INT 1000
4763: PUSH
4764: EMPTY
4765: LIST
4766: LIST
4767: PUSH
4768: EMPTY
4769: LIST
4770: LIST
4771: LIST
4772: PUSH
4773: EMPTY
4774: LIST
4775: PPUSH
4776: CALL_OW 69
4780: PUSH
4781: LD_EXP 17
4785: DIFF
4786: ST_TO_ADDR
// for i = 1 to filter do
4787: LD_ADDR_VAR 0 2
4791: PUSH
4792: DOUBLE
4793: LD_INT 1
4795: DEC
4796: ST_TO_ADDR
4797: LD_VAR 0 4
4801: PUSH
4802: FOR_TO
4803: IFFALSE 4865
// if not IsInUnit ( filter [ i ] ) and not HasTask ( filter [ i ] ) then
4805: LD_VAR 0 4
4809: PUSH
4810: LD_VAR 0 2
4814: ARRAY
4815: PPUSH
4816: CALL_OW 310
4820: NOT
4821: IFFALSE 4841
4823: PUSH
4824: LD_VAR 0 4
4828: PUSH
4829: LD_VAR 0 2
4833: ARRAY
4834: PPUSH
4835: CALL_OW 314
4839: NOT
4840: AND
4841: IFFALSE 4863
// ComEnterUnit ( filter [ i ] , place ) ;
4843: LD_VAR 0 4
4847: PUSH
4848: LD_VAR 0 2
4852: ARRAY
4853: PPUSH
4854: LD_VAR 0 7
4858: PPUSH
4859: CALL_OW 120
4863: GO 4802
4865: POP
4866: POP
// end ; end ; if event = 5 then
4867: LD_VAR 0 1
4871: PUSH
4872: LD_INT 5
4874: EQUAL
4875: IFFALSE 5029
// begin if FilterUnitsInArea ( am_sec , [ f_enemy , 1 ] ) = 0 then
4877: LD_INT 12
4879: PPUSH
4880: LD_INT 81
4882: PUSH
4883: LD_INT 1
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: PPUSH
4890: CALL_OW 70
4894: PUSH
4895: LD_INT 0
4897: EQUAL
4898: IFFALSE 5029
// begin engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
4900: LD_ADDR_VAR 0 8
4904: PUSH
4905: LD_INT 22
4907: PUSH
4908: LD_INT 1
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: PUSH
4915: LD_INT 25
4917: PUSH
4918: LD_INT 2
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: PUSH
4925: EMPTY
4926: LIST
4927: LIST
4928: PPUSH
4929: CALL_OW 69
4933: ST_TO_ADDR
// if engs > 0 then
4934: LD_VAR 0 8
4938: PUSH
4939: LD_INT 0
4941: GREATER
4942: IFFALSE 5029
// for i = 1 to engs do
4944: LD_ADDR_VAR 0 2
4948: PUSH
4949: DOUBLE
4950: LD_INT 1
4952: DEC
4953: ST_TO_ADDR
4954: LD_VAR 0 8
4958: PUSH
4959: FOR_TO
4960: IFFALSE 5027
// if not HasTask ( engs [ i ] ) then
4962: LD_VAR 0 8
4966: PUSH
4967: LD_VAR 0 2
4971: ARRAY
4972: PPUSH
4973: CALL_OW 314
4977: NOT
4978: IFFALSE 5025
// ComBuild ( engs [ i ] , b_bunker , gamma_towers [ 1 ] , gamma_towers [ 2 ] , gamma_towers [ 3 ] ) ;
4980: LD_VAR 0 8
4984: PUSH
4985: LD_VAR 0 2
4989: ARRAY
4990: PPUSH
4991: LD_INT 32
4993: PPUSH
4994: LD_EXP 18
4998: PUSH
4999: LD_INT 1
5001: ARRAY
5002: PPUSH
5003: LD_EXP 18
5007: PUSH
5008: LD_INT 2
5010: ARRAY
5011: PPUSH
5012: LD_EXP 18
5016: PUSH
5017: LD_INT 3
5019: ARRAY
5020: PPUSH
5021: CALL_OW 145
5025: GO 4959
5027: POP
5028: POP
// end ; end ; if event = 6 then
5029: LD_VAR 0 1
5033: PUSH
5034: LD_INT 6
5036: EQUAL
5037: IFFALSE 5223
// begin bac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
5039: LD_ADDR_VAR 0 6
5043: PUSH
5044: LD_INT 22
5046: PUSH
5047: LD_INT 1
5049: PUSH
5050: EMPTY
5051: LIST
5052: LIST
5053: PUSH
5054: LD_INT 30
5056: PUSH
5057: LD_INT 5
5059: PUSH
5060: EMPTY
5061: LIST
5062: LIST
5063: PUSH
5064: EMPTY
5065: LIST
5066: LIST
5067: PPUSH
5068: CALL_OW 69
5072: ST_TO_ADDR
// if bac and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ] ) > 0 then
5073: LD_VAR 0 6
5077: IFFALSE 5123
5079: PUSH
5080: LD_INT 22
5082: PUSH
5083: LD_INT 1
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: PUSH
5090: LD_INT 30
5092: PUSH
5093: LD_INT 32
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: PUSH
5100: LD_INT 58
5102: PUSH
5103: EMPTY
5104: LIST
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: LIST
5110: PUSH
5111: EMPTY
5112: LIST
5113: PPUSH
5114: CALL_OW 69
5118: PUSH
5119: LD_INT 0
5121: GREATER
5122: AND
5123: IFFALSE 5223
// begin b := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ] ) [ 1 ] ;
5125: LD_ADDR_VAR 0 10
5129: PUSH
5130: LD_INT 22
5132: PUSH
5133: LD_INT 1
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: PUSH
5140: LD_INT 30
5142: PUSH
5143: LD_INT 32
5145: PUSH
5146: EMPTY
5147: LIST
5148: LIST
5149: PUSH
5150: LD_INT 58
5152: PUSH
5153: EMPTY
5154: LIST
5155: PUSH
5156: EMPTY
5157: LIST
5158: LIST
5159: LIST
5160: PUSH
5161: EMPTY
5162: LIST
5163: PPUSH
5164: CALL_OW 69
5168: PUSH
5169: LD_INT 1
5171: ARRAY
5172: ST_TO_ADDR
// un := UnitsInside ( bac [ 1 ] ) ;
5173: LD_ADDR_VAR 0 3
5177: PUSH
5178: LD_VAR 0 6
5182: PUSH
5183: LD_INT 1
5185: ARRAY
5186: PPUSH
5187: CALL_OW 313
5191: ST_TO_ADDR
// ComExitBuilding ( un [ 1 ] ) ;
5192: LD_VAR 0 3
5196: PUSH
5197: LD_INT 1
5199: ARRAY
5200: PPUSH
5201: CALL_OW 122
// AddComEnterUnit ( un [ 1 ] , b ) ;
5205: LD_VAR 0 3
5209: PUSH
5210: LD_INT 1
5212: ARRAY
5213: PPUSH
5214: LD_VAR 0 10
5218: PPUSH
5219: CALL_OW 180
// end ; end ; end ;
5223: PPOPN 10
5225: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 3 then
5226: LD_VAR 0 1
5230: PUSH
5231: LD_INT 1
5233: EQUAL
5234: IFFALSE 5246
5236: PUSH
5237: LD_VAR 0 2
5241: PUSH
5242: LD_INT 3
5244: EQUAL
5245: AND
5246: IFFALSE 5256
// contact_am := true ;
5248: LD_ADDR_EXP 16
5252: PUSH
5253: LD_INT 1
5255: ST_TO_ADDR
// end ;
5256: PPOPN 2
5258: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5259: LD_VAR 0 1
5263: PPUSH
5264: LD_VAR 0 2
5268: PPUSH
5269: LD_VAR 0 3
5273: PPUSH
5274: CALL 25632 0 3
// end ;
5278: PPOPN 3
5280: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5281: LD_VAR 0 1
5285: PPUSH
5286: CALL 25640 0 1
// end ; end_of_file
5290: PPOPN 1
5292: END
// export Sikorski , Game_Started , SForce , Sikorski_Ar , Donald , Van , attacked , contact_am ; export patrol ; export gamma_towers ; export function PrepareAmerican ; var i , un , b , skill , weapons , sol , lw ; begin
5293: LD_INT 0
5295: PPUSH
5296: PPUSH
5297: PPUSH
5298: PPUSH
5299: PPUSH
5300: PPUSH
5301: PPUSH
5302: PPUSH
// skill := [ 5 , 6 , 7 ] [ dif ] ;
5303: LD_ADDR_VAR 0 5
5307: PUSH
5308: LD_INT 5
5310: PUSH
5311: LD_INT 6
5313: PUSH
5314: LD_INT 7
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: LIST
5321: PUSH
5322: LD_EXP 1
5326: ARRAY
5327: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_gatling_gun , us_gatling_gun , us_double_gun , us_double_gun , us_double_gun , us_heavy_gun ] ;
5328: LD_ADDR_VAR 0 6
5332: PUSH
5333: LD_INT 4
5335: PUSH
5336: LD_INT 4
5338: PUSH
5339: LD_INT 4
5341: PUSH
5342: LD_INT 5
5344: PUSH
5345: LD_INT 5
5347: PUSH
5348: LD_INT 5
5350: PUSH
5351: LD_INT 6
5353: PUSH
5354: EMPTY
5355: LIST
5356: LIST
5357: LIST
5358: LIST
5359: LIST
5360: LIST
5361: LIST
5362: ST_TO_ADDR
// SForce := [ ] ;
5363: LD_ADDR_EXP 11
5367: PUSH
5368: EMPTY
5369: ST_TO_ADDR
// Sikorski_Ar := false ;
5370: LD_ADDR_EXP 12
5374: PUSH
5375: LD_INT 0
5377: ST_TO_ADDR
// attacked := false ;
5378: LD_ADDR_EXP 15
5382: PUSH
5383: LD_INT 0
5385: ST_TO_ADDR
// contact_am := false ;
5386: LD_ADDR_EXP 16
5390: PUSH
5391: LD_INT 0
5393: ST_TO_ADDR
// patrol := [ ] ;
5394: LD_ADDR_EXP 17
5398: PUSH
5399: EMPTY
5400: ST_TO_ADDR
// gamma_towers := [ ] ;
5401: LD_ADDR_EXP 18
5405: PUSH
5406: EMPTY
5407: ST_TO_ADDR
// SetBName ( am_dep , gamma ) ;
5408: LD_INT 25
5410: PPUSH
5411: LD_STRING gamma
5413: PPUSH
5414: CALL_OW 500
// uc_side := 1 ;
5418: LD_ADDR_OWVAR 20
5422: PUSH
5423: LD_INT 1
5425: ST_TO_ADDR
// uc_nation := 1 ;
5426: LD_ADDR_OWVAR 21
5430: PUSH
5431: LD_INT 1
5433: ST_TO_ADDR
// hc_importance := 0 ;
5434: LD_ADDR_OWVAR 32
5438: PUSH
5439: LD_INT 0
5441: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
5442: LD_ADDR_OWVAR 26
5446: PUSH
5447: LD_STRING Jeremy Sikorski
5449: ST_TO_ADDR
// hc_gallery := us ;
5450: LD_ADDR_OWVAR 33
5454: PUSH
5455: LD_STRING us
5457: ST_TO_ADDR
// hc_face_number := 19 ;
5458: LD_ADDR_OWVAR 34
5462: PUSH
5463: LD_INT 19
5465: ST_TO_ADDR
// hc_skills := [ Rand ( skill , skill + 2 ) , 4 , 6 , 3 ] ;
5466: LD_ADDR_OWVAR 31
5470: PUSH
5471: LD_VAR 0 5
5475: PPUSH
5476: LD_VAR 0 5
5480: PUSH
5481: LD_INT 2
5483: PLUS
5484: PPUSH
5485: CALL_OW 12
5489: PUSH
5490: LD_INT 4
5492: PUSH
5493: LD_INT 6
5495: PUSH
5496: LD_INT 3
5498: PUSH
5499: EMPTY
5500: LIST
5501: LIST
5502: LIST
5503: LIST
5504: ST_TO_ADDR
// hc_sex := sex_male ;
5505: LD_ADDR_OWVAR 27
5509: PUSH
5510: LD_INT 1
5512: ST_TO_ADDR
// hc_class := 1 ;
5513: LD_ADDR_OWVAR 28
5517: PUSH
5518: LD_INT 1
5520: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
5521: LD_ADDR_OWVAR 29
5525: PUSH
5526: LD_INT 10
5528: PUSH
5529: LD_INT 11
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: ST_TO_ADDR
// sikorski := CreateHuman ;
5536: LD_ADDR_EXP 9
5540: PUSH
5541: CALL_OW 44
5545: ST_TO_ADDR
// hc_name := Lucy Donaldson ;
5546: LD_ADDR_OWVAR 26
5550: PUSH
5551: LD_STRING Lucy Donaldson
5553: ST_TO_ADDR
// hc_gallery := us ;
5554: LD_ADDR_OWVAR 33
5558: PUSH
5559: LD_STRING us
5561: ST_TO_ADDR
// hc_face_number := 2 ;
5562: LD_ADDR_OWVAR 34
5566: PUSH
5567: LD_INT 2
5569: ST_TO_ADDR
// hc_skills := [ Rand ( skill , skill + 2 ) , 6 , 4 , 2 ] ;
5570: LD_ADDR_OWVAR 31
5574: PUSH
5575: LD_VAR 0 5
5579: PPUSH
5580: LD_VAR 0 5
5584: PUSH
5585: LD_INT 2
5587: PLUS
5588: PPUSH
5589: CALL_OW 12
5593: PUSH
5594: LD_INT 6
5596: PUSH
5597: LD_INT 4
5599: PUSH
5600: LD_INT 2
5602: PUSH
5603: EMPTY
5604: LIST
5605: LIST
5606: LIST
5607: LIST
5608: ST_TO_ADDR
// hc_sex := sex_female ;
5609: LD_ADDR_OWVAR 27
5613: PUSH
5614: LD_INT 2
5616: ST_TO_ADDR
// hc_class := 1 ;
5617: LD_ADDR_OWVAR 28
5621: PUSH
5622: LD_INT 1
5624: ST_TO_ADDR
// donald := CreateHuman ;
5625: LD_ADDR_EXP 13
5629: PUSH
5630: CALL_OW 44
5634: ST_TO_ADDR
// hc_name := Peter Van Houten ;
5635: LD_ADDR_OWVAR 26
5639: PUSH
5640: LD_STRING Peter Van Houten
5642: ST_TO_ADDR
// hc_gallery := us ;
5643: LD_ADDR_OWVAR 33
5647: PUSH
5648: LD_STRING us
5650: ST_TO_ADDR
// hc_face_number := 16 ;
5651: LD_ADDR_OWVAR 34
5655: PUSH
5656: LD_INT 16
5658: ST_TO_ADDR
// hc_sex := sex_male ;
5659: LD_ADDR_OWVAR 27
5663: PUSH
5664: LD_INT 1
5666: ST_TO_ADDR
// van := CreateHuman ;
5667: LD_ADDR_EXP 14
5671: PUSH
5672: CALL_OW 44
5676: ST_TO_ADDR
// hc_importance := 0 ;
5677: LD_ADDR_OWVAR 32
5681: PUSH
5682: LD_INT 0
5684: ST_TO_ADDR
// case dif of 1 :
5685: LD_EXP 1
5689: PUSH
5690: LD_INT 1
5692: DOUBLE
5693: EQUAL
5694: IFTRUE 5698
5696: GO 5709
5698: POP
// lw = 1 ; 2 :
5699: LD_ADDR_VAR 0 8
5703: PUSH
5704: LD_INT 1
5706: ST_TO_ADDR
5707: GO 5756
5709: LD_INT 2
5711: DOUBLE
5712: EQUAL
5713: IFTRUE 5717
5715: GO 5736
5717: POP
// lw = Rand ( 1 , 2 ) ; 3 :
5718: LD_ADDR_VAR 0 8
5722: PUSH
5723: LD_INT 1
5725: PPUSH
5726: LD_INT 2
5728: PPUSH
5729: CALL_OW 12
5733: ST_TO_ADDR
5734: GO 5756
5736: LD_INT 3
5738: DOUBLE
5739: EQUAL
5740: IFTRUE 5744
5742: GO 5755
5744: POP
// lw = 2 ; end ;
5745: LD_ADDR_VAR 0 8
5749: PUSH
5750: LD_INT 2
5752: ST_TO_ADDR
5753: GO 5756
5755: POP
// case lw of 1 :
5756: LD_VAR 0 8
5760: PUSH
5761: LD_INT 1
5763: DOUBLE
5764: EQUAL
5765: IFTRUE 5769
5767: GO 5784
5769: POP
// PlaceHumanInUnit ( donald , am_dep ) ; 2 :
5770: LD_EXP 13
5774: PPUSH
5775: LD_INT 25
5777: PPUSH
5778: CALL_OW 52
5782: GO 5808
5784: LD_INT 2
5786: DOUBLE
5787: EQUAL
5788: IFTRUE 5792
5790: GO 5807
5792: POP
// PlaceHumanInUnit ( van , am_dep ) ; end ;
5793: LD_EXP 14
5797: PPUSH
5798: LD_INT 25
5800: PPUSH
5801: CALL_OW 52
5805: GO 5808
5807: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
5808: LD_ADDR_VAR 0 2
5812: PUSH
5813: LD_INT 22
5815: PUSH
5816: LD_INT 1
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: PUSH
5823: LD_INT 30
5825: PUSH
5826: LD_INT 32
5828: PUSH
5829: EMPTY
5830: LIST
5831: LIST
5832: PUSH
5833: EMPTY
5834: LIST
5835: LIST
5836: PPUSH
5837: CALL_OW 69
5841: PUSH
5842: FOR_IN
5843: IFFALSE 5897
// begin PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
5845: LD_INT 1
5847: PPUSH
5848: LD_VAR 0 5
5852: PPUSH
5853: CALL 734 0 2
5857: PPUSH
5858: LD_VAR 0 2
5862: PPUSH
5863: CALL_OW 52
// PlaceWeaponTurret ( i , weapons [ Rand ( 1 , weapons ) ] ) ;
5867: LD_VAR 0 2
5871: PPUSH
5872: LD_VAR 0 6
5876: PUSH
5877: LD_INT 1
5879: PPUSH
5880: LD_VAR 0 6
5884: PPUSH
5885: CALL_OW 12
5889: ARRAY
5890: PPUSH
5891: CALL_OW 431
// end ;
5895: GO 5842
5897: POP
5898: POP
// sol := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , class_soldier ] , [ class_sniper ] ] ] ) ;
5899: LD_ADDR_VAR 0 7
5903: PUSH
5904: LD_INT 22
5906: PUSH
5907: LD_INT 1
5909: PUSH
5910: EMPTY
5911: LIST
5912: LIST
5913: PUSH
5914: LD_INT 2
5916: PUSH
5917: LD_INT 25
5919: PUSH
5920: LD_INT 1
5922: PUSH
5923: EMPTY
5924: LIST
5925: LIST
5926: PUSH
5927: LD_INT 5
5929: PUSH
5930: EMPTY
5931: LIST
5932: PUSH
5933: EMPTY
5934: LIST
5935: LIST
5936: LIST
5937: PUSH
5938: EMPTY
5939: LIST
5940: LIST
5941: PPUSH
5942: CALL_OW 69
5946: ST_TO_ADDR
// for i = 1 to sol do
5947: LD_ADDR_VAR 0 2
5951: PUSH
5952: DOUBLE
5953: LD_INT 1
5955: DEC
5956: ST_TO_ADDR
5957: LD_VAR 0 7
5961: PUSH
5962: FOR_TO
5963: IFFALSE 5985
// SetTag ( sol [ i ] , 1 ) ;
5965: LD_VAR 0 7
5969: PUSH
5970: LD_VAR 0 2
5974: ARRAY
5975: PPUSH
5976: LD_INT 1
5978: PPUSH
5979: CALL_OW 109
5983: GO 5962
5985: POP
5986: POP
// for i = 1 to 3 do
5987: LD_ADDR_VAR 0 2
5991: PUSH
5992: DOUBLE
5993: LD_INT 1
5995: DEC
5996: ST_TO_ADDR
5997: LD_INT 3
5999: PUSH
6000: FOR_TO
6001: IFFALSE 6025
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , am_ct ) ;
6003: LD_INT 3
6005: PPUSH
6006: LD_VAR 0 5
6010: PPUSH
6011: CALL 734 0 2
6015: PPUSH
6016: LD_INT 56
6018: PPUSH
6019: CALL_OW 52
6023: GO 6000
6025: POP
6026: POP
// for i = 1 to 6 do
6027: LD_ADDR_VAR 0 2
6031: PUSH
6032: DOUBLE
6033: LD_INT 1
6035: DEC
6036: ST_TO_ADDR
6037: LD_INT 6
6039: PUSH
6040: FOR_TO
6041: IFFALSE 6065
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , am_fac ) ;
6043: LD_INT 3
6045: PPUSH
6046: LD_VAR 0 5
6050: PPUSH
6051: CALL 734 0 2
6055: PPUSH
6056: LD_INT 26
6058: PPUSH
6059: CALL_OW 52
6063: GO 6040
6065: POP
6066: POP
// for i = 1 to 5 do
6067: LD_ADDR_VAR 0 2
6071: PUSH
6072: DOUBLE
6073: LD_INT 1
6075: DEC
6076: ST_TO_ADDR
6077: LD_INT 5
6079: PUSH
6080: FOR_TO
6081: IFFALSE 6108
// PlaceUnitArea ( CreateHumanWithClass ( 2 , skill ) , am_base , false ) ;
6083: LD_INT 2
6085: PPUSH
6086: LD_VAR 0 5
6090: PPUSH
6091: CALL 734 0 2
6095: PPUSH
6096: LD_INT 7
6098: PPUSH
6099: LD_INT 0
6101: PPUSH
6102: CALL_OW 49
6106: GO 6080
6108: POP
6109: POP
// for i = 1 to 3 do
6110: LD_ADDR_VAR 0 2
6114: PUSH
6115: DOUBLE
6116: LD_INT 1
6118: DEC
6119: ST_TO_ADDR
6120: LD_INT 3
6122: PUSH
6123: FOR_TO
6124: IFFALSE 6148
// PlaceHumanInUnit ( CreateHumanWithClass ( 4 , skill ) , am_lab ) ;
6126: LD_INT 4
6128: PPUSH
6129: LD_VAR 0 5
6133: PPUSH
6134: CALL 734 0 2
6138: PPUSH
6139: LD_INT 46
6141: PPUSH
6142: CALL_OW 52
6146: GO 6123
6148: POP
6149: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) do
6150: LD_ADDR_VAR 0 2
6154: PUSH
6155: LD_INT 22
6157: PUSH
6158: LD_INT 1
6160: PUSH
6161: EMPTY
6162: LIST
6163: LIST
6164: PUSH
6165: LD_INT 30
6167: PUSH
6168: LD_INT 5
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PPUSH
6179: CALL_OW 69
6183: PUSH
6184: FOR_IN
6185: IFFALSE 6299
// begin PlaceHumanInUnit ( CreateHumanWithClass ( class_sniper , skill ) , i ) ;
6187: LD_INT 5
6189: PPUSH
6190: LD_VAR 0 5
6194: PPUSH
6195: CALL 734 0 2
6199: PPUSH
6200: LD_VAR 0 2
6204: PPUSH
6205: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( class_sniper , skill ) , i ) ;
6209: LD_INT 5
6211: PPUSH
6212: LD_VAR 0 5
6216: PPUSH
6217: CALL 734 0 2
6221: PPUSH
6222: LD_VAR 0 2
6226: PPUSH
6227: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6231: LD_INT 1
6233: PPUSH
6234: LD_VAR 0 5
6238: PPUSH
6239: CALL 734 0 2
6243: PPUSH
6244: LD_VAR 0 2
6248: PPUSH
6249: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6253: LD_INT 1
6255: PPUSH
6256: LD_VAR 0 5
6260: PPUSH
6261: CALL 734 0 2
6265: PPUSH
6266: LD_VAR 0 2
6270: PPUSH
6271: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6275: LD_INT 1
6277: PPUSH
6278: LD_VAR 0 5
6282: PPUSH
6283: CALL 734 0 2
6287: PPUSH
6288: LD_VAR 0 2
6292: PPUSH
6293: CALL_OW 52
// end ;
6297: GO 6184
6299: POP
6300: POP
// if dif > 1 then
6301: LD_EXP 1
6305: PUSH
6306: LD_INT 1
6308: GREATER
6309: IFFALSE 6382
// for i = 1 to ( dif - 1 ) do
6311: LD_ADDR_VAR 0 2
6315: PUSH
6316: DOUBLE
6317: LD_INT 1
6319: DEC
6320: ST_TO_ADDR
6321: LD_EXP 1
6325: PUSH
6326: LD_INT 1
6328: MINUS
6329: PUSH
6330: FOR_TO
6331: IFFALSE 6380
// begin patrol := patrol ^ CreateHumanWithClass ( 1 , skill ) ;
6333: LD_ADDR_EXP 17
6337: PUSH
6338: LD_EXP 17
6342: PUSH
6343: LD_INT 1
6345: PPUSH
6346: LD_VAR 0 5
6350: PPUSH
6351: CALL 734 0 2
6355: ADD
6356: ST_TO_ADDR
// PlaceUnitArea ( patrol [ i ] , am_west_spawn , false ) ;
6357: LD_EXP 17
6361: PUSH
6362: LD_VAR 0 2
6366: ARRAY
6367: PPUSH
6368: LD_INT 3
6370: PPUSH
6371: LD_INT 0
6373: PPUSH
6374: CALL_OW 49
// end ;
6378: GO 6330
6380: POP
6381: POP
// game_started := true ;
6382: LD_ADDR_EXP 10
6386: PUSH
6387: LD_INT 1
6389: ST_TO_ADDR
// ComConstruct ( am_fac , us_medium_tracked , engine_solar , control_remote , us_crane ) ;
6390: LD_INT 26
6392: PPUSH
6393: LD_INT 3
6395: PPUSH
6396: LD_INT 2
6398: PPUSH
6399: LD_INT 2
6401: PPUSH
6402: LD_INT 13
6404: PPUSH
6405: CALL_OW 125
// while ( contact_am = false ) do
6409: LD_EXP 16
6413: PUSH
6414: LD_INT 0
6416: EQUAL
6417: IFFALSE 6428
// begin Wait ( 0 0$01 ) ;
6419: LD_INT 35
6421: PPUSH
6422: CALL_OW 67
// end ;
6426: GO 6409
// Wait ( [ 4 4$00 , 3 3$00 , 2 2$30 ] [ dif ] ) ;
6428: LD_INT 8400
6430: PUSH
6431: LD_INT 6300
6433: PUSH
6434: LD_INT 5250
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: LIST
6441: PUSH
6442: LD_EXP 1
6446: ARRAY
6447: PPUSH
6448: CALL_OW 67
// case dif of 1 :
6452: LD_EXP 1
6456: PUSH
6457: LD_INT 1
6459: DOUBLE
6460: EQUAL
6461: IFTRUE 6465
6463: GO 6640
6465: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_machine_gun , us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 4 ) ] ) ;
6466: LD_INT 26
6468: PPUSH
6469: LD_INT 3
6471: PPUSH
6472: LD_INT 1
6474: PPUSH
6475: LD_INT 2
6477: PPUSH
6478: LD_INT 2
6480: PUSH
6481: LD_INT 4
6483: PUSH
6484: LD_INT 5
6486: PUSH
6487: LD_INT 5
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: LIST
6494: LIST
6495: PUSH
6496: LD_INT 1
6498: PPUSH
6499: LD_INT 4
6501: PPUSH
6502: CALL_OW 12
6506: ARRAY
6507: PPUSH
6508: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6512: LD_INT 26
6514: PPUSH
6515: LD_INT 3
6517: PPUSH
6518: LD_INT 1
6520: PPUSH
6521: LD_INT 2
6523: PPUSH
6524: LD_INT 4
6526: PUSH
6527: LD_INT 5
6529: PUSH
6530: LD_INT 5
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: LIST
6537: PUSH
6538: LD_INT 1
6540: PPUSH
6541: LD_INT 3
6543: PPUSH
6544: CALL_OW 12
6548: ARRAY
6549: PPUSH
6550: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6554: LD_INT 26
6556: PPUSH
6557: LD_INT 3
6559: PPUSH
6560: LD_INT 1
6562: PPUSH
6563: LD_INT 2
6565: PPUSH
6566: LD_INT 4
6568: PUSH
6569: LD_INT 5
6571: PUSH
6572: LD_INT 5
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: LIST
6579: PUSH
6580: LD_INT 1
6582: PPUSH
6583: LD_INT 3
6585: PPUSH
6586: CALL_OW 12
6590: ARRAY
6591: PPUSH
6592: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6596: LD_INT 26
6598: PPUSH
6599: LD_INT 3
6601: PPUSH
6602: LD_INT 1
6604: PPUSH
6605: LD_INT 2
6607: PPUSH
6608: LD_INT 4
6610: PUSH
6611: LD_INT 3
6613: PUSH
6614: LD_INT 5
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: LIST
6621: PUSH
6622: LD_INT 1
6624: PPUSH
6625: LD_INT 3
6627: PPUSH
6628: CALL_OW 12
6632: ARRAY
6633: PPUSH
6634: CALL_OW 185
// end ; 2 :
6638: GO 7167
6640: LD_INT 2
6642: DOUBLE
6643: EQUAL
6644: IFTRUE 6648
6646: GO 6861
6648: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6649: LD_INT 26
6651: PPUSH
6652: LD_INT 3
6654: PPUSH
6655: LD_INT 1
6657: PPUSH
6658: LD_INT 2
6660: PPUSH
6661: LD_INT 4
6663: PUSH
6664: LD_INT 5
6666: PUSH
6667: LD_INT 5
6669: PUSH
6670: EMPTY
6671: LIST
6672: LIST
6673: LIST
6674: PUSH
6675: LD_INT 1
6677: PPUSH
6678: LD_INT 3
6680: PPUSH
6681: CALL_OW 12
6685: ARRAY
6686: PPUSH
6687: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6691: LD_INT 26
6693: PPUSH
6694: LD_INT 3
6696: PPUSH
6697: LD_INT 1
6699: PPUSH
6700: LD_INT 2
6702: PPUSH
6703: LD_INT 4
6705: PUSH
6706: LD_INT 5
6708: PUSH
6709: LD_INT 5
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: LIST
6716: PUSH
6717: LD_INT 1
6719: PPUSH
6720: LD_INT 3
6722: PPUSH
6723: CALL_OW 12
6727: ARRAY
6728: PPUSH
6729: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6733: LD_INT 26
6735: PPUSH
6736: LD_INT 3
6738: PPUSH
6739: LD_INT 1
6741: PPUSH
6742: LD_INT 2
6744: PPUSH
6745: LD_INT 4
6747: PUSH
6748: LD_INT 3
6750: PUSH
6751: LD_INT 5
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 1
6761: PPUSH
6762: LD_INT 3
6764: PPUSH
6765: CALL_OW 12
6769: ARRAY
6770: PPUSH
6771: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6775: LD_INT 26
6777: PPUSH
6778: LD_INT 4
6780: PPUSH
6781: LD_INT 1
6783: PPUSH
6784: LD_INT 2
6786: PPUSH
6787: LD_INT 4
6789: PUSH
6790: LD_INT 5
6792: PUSH
6793: LD_INT 6
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: LIST
6800: PUSH
6801: LD_INT 1
6803: PPUSH
6804: LD_INT 3
6806: PPUSH
6807: CALL_OW 12
6811: ARRAY
6812: PPUSH
6813: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_heavy_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6817: LD_INT 26
6819: PPUSH
6820: LD_INT 4
6822: PPUSH
6823: LD_INT 1
6825: PPUSH
6826: LD_INT 2
6828: PPUSH
6829: LD_INT 4
6831: PUSH
6832: LD_INT 6
6834: PUSH
6835: LD_INT 6
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: LIST
6842: PUSH
6843: LD_INT 1
6845: PPUSH
6846: LD_INT 3
6848: PPUSH
6849: CALL_OW 12
6853: ARRAY
6854: PPUSH
6855: CALL_OW 185
// end ; 3 :
6859: GO 7167
6861: LD_INT 3
6863: DOUBLE
6864: EQUAL
6865: IFTRUE 6869
6867: GO 7166
6869: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6870: LD_INT 26
6872: PPUSH
6873: LD_INT 3
6875: PPUSH
6876: LD_INT 1
6878: PPUSH
6879: LD_INT 2
6881: PPUSH
6882: LD_INT 4
6884: PUSH
6885: LD_INT 5
6887: PUSH
6888: LD_INT 5
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: LIST
6895: PUSH
6896: LD_INT 1
6898: PPUSH
6899: LD_INT 3
6901: PPUSH
6902: CALL_OW 12
6906: ARRAY
6907: PPUSH
6908: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6912: LD_INT 26
6914: PPUSH
6915: LD_INT 3
6917: PPUSH
6918: LD_INT 1
6920: PPUSH
6921: LD_INT 2
6923: PPUSH
6924: LD_INT 4
6926: PUSH
6927: LD_INT 5
6929: PUSH
6930: LD_INT 5
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: LIST
6937: PUSH
6938: LD_INT 1
6940: PPUSH
6941: LD_INT 3
6943: PPUSH
6944: CALL_OW 12
6948: ARRAY
6949: PPUSH
6950: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6954: LD_INT 26
6956: PPUSH
6957: LD_INT 3
6959: PPUSH
6960: LD_INT 1
6962: PPUSH
6963: LD_INT 2
6965: PPUSH
6966: LD_INT 4
6968: PUSH
6969: LD_INT 5
6971: PUSH
6972: LD_INT 5
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: LIST
6979: PUSH
6980: LD_INT 1
6982: PPUSH
6983: LD_INT 3
6985: PPUSH
6986: CALL_OW 12
6990: ARRAY
6991: PPUSH
6992: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6996: LD_INT 26
6998: PPUSH
6999: LD_INT 3
7001: PPUSH
7002: LD_INT 1
7004: PPUSH
7005: LD_INT 2
7007: PPUSH
7008: LD_INT 4
7010: PUSH
7011: LD_INT 5
7013: PUSH
7014: LD_INT 5
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: LIST
7021: PUSH
7022: LD_INT 1
7024: PPUSH
7025: LD_INT 3
7027: PPUSH
7028: CALL_OW 12
7032: ARRAY
7033: PPUSH
7034: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_heavy_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7038: LD_INT 26
7040: PPUSH
7041: LD_INT 4
7043: PPUSH
7044: LD_INT 1
7046: PPUSH
7047: LD_INT 2
7049: PPUSH
7050: LD_INT 4
7052: PUSH
7053: LD_INT 6
7055: PUSH
7056: LD_INT 6
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: LIST
7063: PUSH
7064: LD_INT 1
7066: PPUSH
7067: LD_INT 3
7069: PPUSH
7070: CALL_OW 12
7074: ARRAY
7075: PPUSH
7076: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_heavy_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7080: LD_INT 26
7082: PPUSH
7083: LD_INT 4
7085: PPUSH
7086: LD_INT 1
7088: PPUSH
7089: LD_INT 2
7091: PPUSH
7092: LD_INT 4
7094: PUSH
7095: LD_INT 6
7097: PUSH
7098: LD_INT 6
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: LIST
7105: PUSH
7106: LD_INT 1
7108: PPUSH
7109: LD_INT 3
7111: PPUSH
7112: CALL_OW 12
7116: ARRAY
7117: PPUSH
7118: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_heavy_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7122: LD_INT 26
7124: PPUSH
7125: LD_INT 4
7127: PPUSH
7128: LD_INT 1
7130: PPUSH
7131: LD_INT 2
7133: PPUSH
7134: LD_INT 4
7136: PUSH
7137: LD_INT 6
7139: PUSH
7140: LD_INT 6
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: LIST
7147: PUSH
7148: LD_INT 1
7150: PPUSH
7151: LD_INT 3
7153: PPUSH
7154: CALL_OW 12
7158: ARRAY
7159: PPUSH
7160: CALL_OW 185
// end ; end ;
7164: GO 7167
7166: POP
// end ;
7167: LD_VAR 0 1
7171: RET
// every 0 0$01 do var i , filter ;
7172: GO 7174
7174: DISABLE
7175: LD_INT 0
7177: PPUSH
7178: PPUSH
// begin enable ;
7179: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
7180: LD_INT 22
7182: PUSH
7183: LD_INT 1
7185: PUSH
7186: EMPTY
7187: LIST
7188: LIST
7189: PUSH
7190: LD_INT 25
7192: PUSH
7193: LD_INT 4
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: PPUSH
7204: CALL_OW 69
7208: PUSH
7209: LD_INT 0
7211: GREATER
7212: IFFALSE 7221
// RaiseSailEvent ( 3 ) ;
7214: LD_INT 3
7216: PPUSH
7217: CALL_OW 427
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 0 then
7221: LD_INT 22
7223: PUSH
7224: LD_INT 1
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: PUSH
7231: LD_INT 21
7233: PUSH
7234: LD_INT 3
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: PUSH
7241: LD_INT 3
7243: PUSH
7244: LD_INT 24
7246: PUSH
7247: LD_INT 1000
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: PUSH
7258: EMPTY
7259: LIST
7260: LIST
7261: LIST
7262: PPUSH
7263: CALL_OW 69
7267: PUSH
7268: LD_INT 0
7270: GREATER
7271: IFFALSE 7282
// RaiseSailEvent ( 1 ) else
7273: LD_INT 1
7275: PPUSH
7276: CALL_OW 427
7280: GO 7289
// RaiseSailEvent ( 2 ) ;
7282: LD_INT 2
7284: PPUSH
7285: CALL_OW 427
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) > 0 then
7289: LD_INT 22
7291: PUSH
7292: LD_INT 1
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: PUSH
7299: LD_INT 30
7301: PUSH
7302: LD_INT 5
7304: PUSH
7305: EMPTY
7306: LIST
7307: LIST
7308: PUSH
7309: EMPTY
7310: LIST
7311: LIST
7312: PPUSH
7313: CALL_OW 69
7317: PUSH
7318: LD_INT 0
7320: GREATER
7321: IFFALSE 7330
// RaiseSailEvent ( 4 ) ;
7323: LD_INT 4
7325: PPUSH
7326: CALL_OW 427
// if gamma_towers > 0 then
7330: LD_EXP 18
7334: PUSH
7335: LD_INT 0
7337: GREATER
7338: IFFALSE 7347
// RaiseSailEvent ( 5 ) ;
7340: LD_INT 5
7342: PPUSH
7343: CALL_OW 427
// end ;
7347: PPOPN 2
7349: END
// export new_veh ; every 9 9$00 do var chassis , weapon ;
7350: GO 7352
7352: DISABLE
7353: LD_INT 0
7355: PPUSH
7356: PPUSH
// begin enable ;
7357: ENABLE
// if new_veh > 0 then
7358: LD_EXP 19
7362: PUSH
7363: LD_INT 0
7365: GREATER
7366: IFFALSE 7553
// while ( new_veh > 0 ) do
7368: LD_EXP 19
7372: PUSH
7373: LD_INT 0
7375: GREATER
7376: IFFALSE 7553
// begin Wait ( 0 0$01 ) ;
7378: LD_INT 35
7380: PPUSH
7381: CALL_OW 67
// if BuildingStatus ( am_fac ) = bs_idle then
7385: LD_INT 26
7387: PPUSH
7388: CALL_OW 461
7392: PUSH
7393: LD_INT 2
7395: EQUAL
7396: IFFALSE 7551
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ Rand ( 1 , 4 ) ] ;
7398: LD_ADDR_VAR 0 1
7402: PUSH
7403: LD_INT 2
7405: PUSH
7406: LD_INT 3
7408: PUSH
7409: LD_INT 3
7411: PUSH
7412: LD_INT 4
7414: PUSH
7415: EMPTY
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: PUSH
7421: LD_INT 1
7423: PPUSH
7424: LD_INT 4
7426: PPUSH
7427: CALL_OW 12
7431: ARRAY
7432: ST_TO_ADDR
// if chassis in [ us_medium_wheeled , us_medium_tracked ] then
7433: LD_VAR 0 1
7437: PUSH
7438: LD_INT 2
7440: PUSH
7441: LD_INT 3
7443: PUSH
7444: EMPTY
7445: LIST
7446: LIST
7447: IN
7448: IFFALSE 7483
// weapon := [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ Rand ( 1 , 3 ) ] else
7450: LD_ADDR_VAR 0 2
7454: PUSH
7455: LD_INT 4
7457: PUSH
7458: LD_INT 5
7460: PUSH
7461: LD_INT 7
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: LIST
7468: PUSH
7469: LD_INT 1
7471: PPUSH
7472: LD_INT 3
7474: PPUSH
7475: CALL_OW 12
7479: ARRAY
7480: ST_TO_ADDR
7481: GO 7514
// weapon := [ us_double_gun , us_rocket_launcher , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ;
7483: LD_ADDR_VAR 0 2
7487: PUSH
7488: LD_INT 5
7490: PUSH
7491: LD_INT 7
7493: PUSH
7494: LD_INT 6
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: LIST
7501: PUSH
7502: LD_INT 1
7504: PPUSH
7505: LD_INT 3
7507: PPUSH
7508: CALL_OW 12
7512: ARRAY
7513: ST_TO_ADDR
// ComConstruct ( am_fac , chassis , engine_combustion , control_remote , weapon ) ;
7514: LD_INT 26
7516: PPUSH
7517: LD_VAR 0 1
7521: PPUSH
7522: LD_INT 1
7524: PPUSH
7525: LD_INT 2
7527: PPUSH
7528: LD_VAR 0 2
7532: PPUSH
7533: CALL_OW 125
// new_veh := new_veh - 1 ;
7537: LD_ADDR_EXP 19
7541: PUSH
7542: LD_EXP 19
7546: PUSH
7547: LD_INT 1
7549: MINUS
7550: ST_TO_ADDR
// end ; end ;
7551: GO 7368
// end ;
7553: PPOPN 2
7555: END
// every 0 0$01 do var v , filter , am_cmeh ;
7556: GO 7558
7558: DISABLE
7559: LD_INT 0
7561: PPUSH
7562: PPUSH
7563: PPUSH
// begin enable ;
7564: ENABLE
// am_cmeh := UnitsInside ( am_ct ) ;
7565: LD_ADDR_VAR 0 3
7569: PUSH
7570: LD_INT 56
7572: PPUSH
7573: CALL_OW 313
7577: ST_TO_ADDR
// filter = FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] ] ] ) ;
7578: LD_ADDR_VAR 0 2
7582: PUSH
7583: LD_INT 22
7585: PUSH
7586: LD_INT 1
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: PUSH
7593: LD_INT 33
7595: PUSH
7596: LD_INT 2
7598: PUSH
7599: EMPTY
7600: LIST
7601: LIST
7602: PUSH
7603: LD_INT 50
7605: PUSH
7606: EMPTY
7607: LIST
7608: PUSH
7609: EMPTY
7610: LIST
7611: LIST
7612: LIST
7613: PUSH
7614: EMPTY
7615: LIST
7616: PPUSH
7617: CALL_OW 69
7621: ST_TO_ADDR
// if filter > 0 then
7622: LD_VAR 0 2
7626: PUSH
7627: LD_INT 0
7629: GREATER
7630: IFFALSE 7700
// begin for v in filter do
7632: LD_ADDR_VAR 0 1
7636: PUSH
7637: LD_VAR 0 2
7641: PUSH
7642: FOR_IN
7643: IFFALSE 7698
// begin if not IsControledBy ( v ) and IsOk ( v ) then
7645: LD_VAR 0 1
7649: PPUSH
7650: CALL_OW 312
7654: NOT
7655: IFFALSE 7668
7657: PUSH
7658: LD_VAR 0 1
7662: PPUSH
7663: CALL_OW 302
7667: AND
7668: IFFALSE 7696
// ComLinkTo ( v , am_cmeh [ Rand ( 1 , 3 ) ] ) ;
7670: LD_VAR 0 1
7674: PPUSH
7675: LD_VAR 0 3
7679: PUSH
7680: LD_INT 1
7682: PPUSH
7683: LD_INT 3
7685: PPUSH
7686: CALL_OW 12
7690: ARRAY
7691: PPUSH
7692: CALL_OW 135
// end ;
7696: GO 7642
7698: POP
7699: POP
// end ; end ;
7700: PPOPN 3
7702: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) = [ 4 , 5 , 7 ] [ dif ] and BuildingStatus ( am_fac ) = bs_idle do var i , un , enemy ;
7703: LD_INT 33
7705: PUSH
7706: LD_INT 2
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: PUSH
7713: LD_INT 3
7715: PUSH
7716: LD_INT 34
7718: PUSH
7719: LD_INT 13
7721: PUSH
7722: EMPTY
7723: LIST
7724: LIST
7725: PUSH
7726: EMPTY
7727: LIST
7728: LIST
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: PPUSH
7734: CALL_OW 69
7738: PUSH
7739: LD_INT 4
7741: PUSH
7742: LD_INT 5
7744: PUSH
7745: LD_INT 7
7747: PUSH
7748: EMPTY
7749: LIST
7750: LIST
7751: LIST
7752: PUSH
7753: LD_EXP 1
7757: ARRAY
7758: EQUAL
7759: IFFALSE 7774
7761: PUSH
7762: LD_INT 26
7764: PPUSH
7765: CALL_OW 461
7769: PUSH
7770: LD_INT 2
7772: EQUAL
7773: AND
7774: IFFALSE 7985
7776: GO 7778
7778: DISABLE
7779: LD_INT 0
7781: PPUSH
7782: PPUSH
7783: PPUSH
// begin enable ;
7784: ENABLE
// if Sikorski_Ar then
7785: LD_EXP 12
7789: IFFALSE 7866
// SForce := FilterAllUnits ( [ [ f_or , [ f_side , 4 ] , [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ] ] ) else
7791: LD_ADDR_EXP 11
7795: PUSH
7796: LD_INT 2
7798: PUSH
7799: LD_INT 22
7801: PUSH
7802: LD_INT 4
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: PUSH
7809: LD_INT 22
7811: PUSH
7812: LD_INT 1
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: PUSH
7819: LD_INT 33
7821: PUSH
7822: LD_INT 2
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: PUSH
7829: LD_INT 3
7831: PUSH
7832: LD_INT 34
7834: PUSH
7835: LD_INT 13
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: PUSH
7846: EMPTY
7847: LIST
7848: LIST
7849: LIST
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: LIST
7855: PUSH
7856: EMPTY
7857: LIST
7858: PPUSH
7859: CALL_OW 69
7863: ST_TO_ADDR
7864: GO 7907
// SForce := FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) ;
7866: LD_ADDR_EXP 11
7870: PUSH
7871: LD_INT 33
7873: PUSH
7874: LD_INT 2
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: PUSH
7881: LD_INT 3
7883: PUSH
7884: LD_INT 34
7886: PUSH
7887: LD_INT 13
7889: PUSH
7890: EMPTY
7891: LIST
7892: LIST
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: PUSH
7898: EMPTY
7899: LIST
7900: LIST
7901: PPUSH
7902: CALL_OW 69
7906: ST_TO_ADDR
// repeat begin for un in SForce do
7907: LD_ADDR_VAR 0 2
7911: PUSH
7912: LD_EXP 11
7916: PUSH
7917: FOR_IN
7918: IFFALSE 7973
// begin enemy := FilterAllUnits ( [ f_side , 3 ] ) ;
7920: LD_ADDR_VAR 0 3
7924: PUSH
7925: LD_INT 22
7927: PUSH
7928: LD_INT 3
7930: PUSH
7931: EMPTY
7932: LIST
7933: LIST
7934: PPUSH
7935: CALL_OW 69
7939: ST_TO_ADDR
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
7940: LD_VAR 0 2
7944: PPUSH
7945: LD_VAR 0 3
7949: PPUSH
7950: LD_VAR 0 2
7954: PPUSH
7955: CALL_OW 74
7959: PPUSH
7960: CALL_OW 115
// Wait ( 0 0$01 ) ;
7964: LD_INT 35
7966: PPUSH
7967: CALL_OW 67
// end ;
7971: GO 7917
7973: POP
7974: POP
// end until SForce = 0 ;
7975: LD_EXP 11
7979: PUSH
7980: LD_INT 0
7982: EQUAL
7983: IFFALSE 7907
// end ;
7985: PPOPN 3
7987: END
// export function NewForce ( num ) ; var i , filter , veh , tmp ; begin
7988: LD_INT 0
7990: PPUSH
7991: PPUSH
7992: PPUSH
7993: PPUSH
7994: PPUSH
// tmp := FilterUnitsInArea ( spawnArea , [ ] ) ;
7995: LD_ADDR_VAR 0 6
7999: PUSH
8000: LD_INT 14
8002: PPUSH
8003: EMPTY
8004: PPUSH
8005: CALL_OW 70
8009: ST_TO_ADDR
// if tmp then
8010: LD_VAR 0 6
8014: IFFALSE 8048
// for i in tmp do
8016: LD_ADDR_VAR 0 3
8020: PUSH
8021: LD_VAR 0 6
8025: PUSH
8026: FOR_IN
8027: IFFALSE 8046
// ComMoveXY ( i , 42 , 23 ) ;
8029: LD_VAR 0 3
8033: PPUSH
8034: LD_INT 42
8036: PPUSH
8037: LD_INT 23
8039: PPUSH
8040: CALL_OW 111
8044: GO 8026
8046: POP
8047: POP
// EraseResourceArea ( spawnArea , mat_cans ) ;
8048: LD_INT 14
8050: PPUSH
8051: LD_INT 1
8053: PPUSH
8054: CALL_OW 286
// uc_side := 4 ;
8058: LD_ADDR_OWVAR 20
8062: PUSH
8063: LD_INT 4
8065: ST_TO_ADDR
// uc_nation := 1 ;
8066: LD_ADDR_OWVAR 21
8070: PUSH
8071: LD_INT 1
8073: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
8074: LD_ADDR_OWVAR 37
8078: PUSH
8079: LD_INT 4
8081: ST_TO_ADDR
// vc_control := control_manual ;
8082: LD_ADDR_OWVAR 38
8086: PUSH
8087: LD_INT 1
8089: ST_TO_ADDR
// vc_engine := engine_combustion ;
8090: LD_ADDR_OWVAR 39
8094: PUSH
8095: LD_INT 1
8097: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ dif ] ;
8098: LD_ADDR_OWVAR 40
8102: PUSH
8103: LD_INT 4
8105: PUSH
8106: LD_INT 5
8108: PUSH
8109: LD_INT 7
8111: PUSH
8112: EMPTY
8113: LIST
8114: LIST
8115: LIST
8116: PUSH
8117: LD_EXP 1
8121: ARRAY
8122: ST_TO_ADDR
// veh := CreateVehicle ;
8123: LD_ADDR_VAR 0 5
8127: PUSH
8128: CALL_OW 45
8132: ST_TO_ADDR
// PlaceUnitArea ( veh , am_main_spawn , false ) ;
8133: LD_VAR 0 5
8137: PPUSH
8138: LD_INT 2
8140: PPUSH
8141: LD_INT 0
8143: PPUSH
8144: CALL_OW 49
// PlaceHumanInUnit ( sikorski , veh ) ;
8148: LD_EXP 9
8152: PPUSH
8153: LD_VAR 0 5
8157: PPUSH
8158: CALL_OW 52
// SetMark ( veh , 1 ) ;
8162: LD_VAR 0 5
8166: PPUSH
8167: LD_INT 1
8169: PPUSH
8170: CALL_OW 242
// while ( num > 0 ) do
8174: LD_VAR 0 1
8178: PUSH
8179: LD_INT 0
8181: GREATER
8182: IFFALSE 8349
// begin CreateVehicleWithDriver ( [ us_medium_tracked , us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ Rand ( dif , 4 ) ] , engine_combustion , [ us_gatling_gun , us_double_gun , us_double_gun , us_rocket_launcher ] [ Rand ( 1 , dif + 1 ) ] , am_sik , 2 , [ 5 , 6 , 7 ] [ dif ] ) ;
8184: LD_INT 3
8186: PUSH
8187: LD_INT 3
8189: PUSH
8190: LD_INT 3
8192: PUSH
8193: LD_INT 4
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: LIST
8200: LIST
8201: PUSH
8202: LD_EXP 1
8206: PPUSH
8207: LD_INT 4
8209: PPUSH
8210: CALL_OW 12
8214: ARRAY
8215: PPUSH
8216: LD_INT 1
8218: PPUSH
8219: LD_INT 4
8221: PUSH
8222: LD_INT 5
8224: PUSH
8225: LD_INT 5
8227: PUSH
8228: LD_INT 7
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: PUSH
8237: LD_INT 1
8239: PPUSH
8240: LD_EXP 1
8244: PUSH
8245: LD_INT 1
8247: PLUS
8248: PPUSH
8249: CALL_OW 12
8253: ARRAY
8254: PPUSH
8255: LD_INT 11
8257: PPUSH
8258: LD_INT 2
8260: PPUSH
8261: LD_INT 5
8263: PUSH
8264: LD_INT 6
8266: PUSH
8267: LD_INT 7
8269: PUSH
8270: EMPTY
8271: LIST
8272: LIST
8273: LIST
8274: PUSH
8275: LD_EXP 1
8279: ARRAY
8280: PPUSH
8281: CALL 1309 0 6
// filter := FilterAllUnits ( [ f_side , 4 ] ) ;
8285: LD_ADDR_VAR 0 4
8289: PUSH
8290: LD_INT 22
8292: PUSH
8293: LD_INT 4
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: PPUSH
8300: CALL_OW 69
8304: ST_TO_ADDR
// ComMoveXY ( filter [ filter ] , 36 , 18 ) ;
8305: LD_VAR 0 4
8309: PUSH
8310: LD_VAR 0 4
8314: ARRAY
8315: PPUSH
8316: LD_INT 36
8318: PPUSH
8319: LD_INT 18
8321: PPUSH
8322: CALL_OW 111
// Wait ( 0 0$02 ) ;
8326: LD_INT 70
8328: PPUSH
8329: CALL_OW 67
// num := num - 1 ;
8333: LD_ADDR_VAR 0 1
8337: PUSH
8338: LD_VAR 0 1
8342: PUSH
8343: LD_INT 1
8345: MINUS
8346: ST_TO_ADDR
// end ;
8347: GO 8174
// end ;
8349: LD_VAR 0 2
8353: RET
// every 0 0$03 trigger patrol > 0 do var i ;
8354: LD_EXP 17
8358: PUSH
8359: LD_INT 0
8361: GREATER
8362: IFFALSE 8635
8364: GO 8366
8366: DISABLE
8367: LD_INT 0
8369: PPUSH
// begin enable ;
8370: ENABLE
// for i = 1 to patrol do
8371: LD_ADDR_VAR 0 1
8375: PUSH
8376: DOUBLE
8377: LD_INT 1
8379: DEC
8380: ST_TO_ADDR
8381: LD_EXP 17
8385: PUSH
8386: FOR_TO
8387: IFFALSE 8633
// begin if patrol [ i ] and IsLive ( patrol [ i ] ) and not HasTask ( patrol [ i ] ) then
8389: LD_EXP 17
8393: PUSH
8394: LD_VAR 0 1
8398: ARRAY
8399: IFFALSE 8418
8401: PUSH
8402: LD_EXP 17
8406: PUSH
8407: LD_VAR 0 1
8411: ARRAY
8412: PPUSH
8413: CALL_OW 300
8417: AND
8418: IFFALSE 8438
8420: PUSH
8421: LD_EXP 17
8425: PUSH
8426: LD_VAR 0 1
8430: ARRAY
8431: PPUSH
8432: CALL_OW 314
8436: NOT
8437: AND
8438: IFFALSE 8588
// case i of 1 :
8440: LD_VAR 0 1
8444: PUSH
8445: LD_INT 1
8447: DOUBLE
8448: EQUAL
8449: IFTRUE 8453
8451: GO 8516
8453: POP
// begin ComMoveXY ( patrol [ i ] , 53 , 91 ) ;
8454: LD_EXP 17
8458: PUSH
8459: LD_VAR 0 1
8463: ARRAY
8464: PPUSH
8465: LD_INT 53
8467: PPUSH
8468: LD_INT 91
8470: PPUSH
8471: CALL_OW 111
// AddComWait ( patrol [ i ] , 0 0$07 ) ;
8475: LD_EXP 17
8479: PUSH
8480: LD_VAR 0 1
8484: ARRAY
8485: PPUSH
8486: LD_INT 245
8488: PPUSH
8489: CALL_OW 202
// AddComMoveXY ( patrol [ i ] , 24 , 26 ) ;
8493: LD_EXP 17
8497: PUSH
8498: LD_VAR 0 1
8502: ARRAY
8503: PPUSH
8504: LD_INT 24
8506: PPUSH
8507: LD_INT 26
8509: PPUSH
8510: CALL_OW 171
// end ; 2 :
8514: GO 8588
8516: LD_INT 2
8518: DOUBLE
8519: EQUAL
8520: IFTRUE 8524
8522: GO 8587
8524: POP
// begin ComMoveXY ( patrol [ i ] , 83 , 57 ) ;
8525: LD_EXP 17
8529: PUSH
8530: LD_VAR 0 1
8534: ARRAY
8535: PPUSH
8536: LD_INT 83
8538: PPUSH
8539: LD_INT 57
8541: PPUSH
8542: CALL_OW 111
// AddComWait ( patrol [ i ] , 0 0$07 ) ;
8546: LD_EXP 17
8550: PUSH
8551: LD_VAR 0 1
8555: ARRAY
8556: PPUSH
8557: LD_INT 245
8559: PPUSH
8560: CALL_OW 202
// AddComMoveXY ( patrol [ i ] , 47 , 53 ) ;
8564: LD_EXP 17
8568: PUSH
8569: LD_VAR 0 1
8573: ARRAY
8574: PPUSH
8575: LD_INT 47
8577: PPUSH
8578: LD_INT 53
8580: PPUSH
8581: CALL_OW 171
// end ; end ;
8585: GO 8588
8587: POP
// if GetLives ( patrol [ i ] ) < 1000 then
8588: LD_EXP 17
8592: PUSH
8593: LD_VAR 0 1
8597: ARRAY
8598: PPUSH
8599: CALL_OW 256
8603: PUSH
8604: LD_INT 1000
8606: LESS
8607: IFFALSE 8631
// patrol := patrol diff patrol [ i ] ;
8609: LD_ADDR_EXP 17
8613: PUSH
8614: LD_EXP 17
8618: PUSH
8619: LD_EXP 17
8623: PUSH
8624: LD_VAR 0 1
8628: ARRAY
8629: DIFF
8630: ST_TO_ADDR
// end ;
8631: GO 8386
8633: POP
8634: POP
// end ;
8635: PPOPN 1
8637: END
// every 0 0$10 do
8638: GO 8640
8640: DISABLE
// begin Wait ( [ 20 20$00 , 18 18$00 , 16 16$00 ] [ dif ] ) ;
8641: LD_INT 42000
8643: PUSH
8644: LD_INT 37800
8646: PUSH
8647: LD_INT 33600
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: LIST
8654: PUSH
8655: LD_EXP 1
8659: ARRAY
8660: PPUSH
8661: CALL_OW 67
// if not contact_am then
8665: LD_EXP 16
8669: NOT
8670: IFFALSE 8680
// contact_am := true ;
8672: LD_ADDR_EXP 16
8676: PUSH
8677: LD_INT 1
8679: ST_TO_ADDR
// end ; end_of_file
8680: END
// export event_rocket , event_comp , comp_tested , sikorski_run ; export function Action ; begin
8681: LD_INT 0
8683: PPUSH
// comp_tested := false ;
8684: LD_ADDR_EXP 22
8688: PUSH
8689: LD_INT 0
8691: ST_TO_ADDR
// sikorski_run := false ;
8692: LD_ADDR_EXP 23
8696: PUSH
8697: LD_INT 0
8699: ST_TO_ADDR
// InGameOn ;
8700: CALL_OW 8
// CenterNowOnXY ( 5 , 4 ) ;
8704: LD_INT 5
8706: PPUSH
8707: LD_INT 4
8709: PPUSH
8710: CALL_OW 86
// wait ( 0 0$2 ) ;
8714: LD_INT 70
8716: PPUSH
8717: CALL_OW 67
// CenterOnUnits ( commander ) ;
8721: LD_EXP 3
8725: PPUSH
8726: CALL_OW 85
// wait ( 0 0$01 ) ;
8730: LD_INT 35
8732: PPUSH
8733: CALL_OW 67
// SayRadio ( popov , Dpop1 ) ;
8737: LD_EXP 2
8741: PPUSH
8742: LD_STRING Dpop1
8744: PPUSH
8745: CALL_OW 94
// Say ( commander , Dcomm1 ) ;
8749: LD_EXP 3
8753: PPUSH
8754: LD_STRING Dcomm1
8756: PPUSH
8757: CALL_OW 88
// SayRadio ( popov , Dpop2 ) ;
8761: LD_EXP 2
8765: PPUSH
8766: LD_STRING Dpop2
8768: PPUSH
8769: CALL_OW 94
// Say ( commander , Dcomm2 ) ;
8773: LD_EXP 3
8777: PPUSH
8778: LD_STRING Dcomm2
8780: PPUSH
8781: CALL_OW 88
// InGameOff ;
8785: CALL_OW 9
// ChangeMissionObjectives ( T1 ) ;
8789: LD_STRING T1
8791: PPUSH
8792: CALL_OW 337
// end ;
8796: LD_VAR 0 1
8800: RET
// every 0 0$01 trigger timer > 2 2$01 do
8801: LD_EXP 24
8805: PUSH
8806: LD_INT 4235
8808: GREATER
8809: IFFALSE 8826
8811: GO 8813
8813: DISABLE
// begin SayRadio ( kapral , DKap1 ) ;
8814: LD_EXP 5
8818: PPUSH
8819: LD_STRING DKap1
8821: PPUSH
8822: CALL_OW 94
// end ;
8826: END
// every 0 0$01 trigger timer > [ 22 22$00 , 25 25$00 , 30 30$00 ] [ dif ] do var i ;
8827: LD_EXP 24
8831: PUSH
8832: LD_INT 46200
8834: PUSH
8835: LD_INT 52500
8837: PUSH
8838: LD_INT 63000
8840: PUSH
8841: EMPTY
8842: LIST
8843: LIST
8844: LIST
8845: PUSH
8846: LD_EXP 1
8850: ARRAY
8851: GREATER
8852: IFFALSE 9219
8854: GO 8856
8856: DISABLE
8857: LD_INT 0
8859: PPUSH
// begin SayRadio ( kapral , DKap2 ) ;
8860: LD_EXP 5
8864: PPUSH
8865: LD_STRING DKap2
8867: PPUSH
8868: CALL_OW 94
// Wait ( 0 0$0.3 ) ;
8872: LD_INT 10
8874: PPUSH
8875: CALL_OW 67
// Say ( commander , Dcommk ) ;
8879: LD_EXP 3
8883: PPUSH
8884: LD_STRING Dcommk
8886: PPUSH
8887: CALL_OW 88
// Wait ( 0 0$44 ) ;
8891: LD_INT 1540
8893: PPUSH
8894: CALL_OW 67
// PlaceUnitArea ( kapral , am_west_spawn , false ) ;
8898: LD_EXP 5
8902: PPUSH
8903: LD_INT 3
8905: PPUSH
8906: LD_INT 0
8908: PPUSH
8909: CALL_OW 49
// CenterNowOnUnits ( kapral ) ;
8913: LD_EXP 5
8917: PPUSH
8918: CALL_OW 87
// Wait ( 0 0$10 ) ;
8922: LD_INT 350
8924: PPUSH
8925: CALL_OW 67
// NewForce ( [ 6 , 7 , 8 ] [ dif ] ) ;
8929: LD_INT 6
8931: PUSH
8932: LD_INT 7
8934: PUSH
8935: LD_INT 8
8937: PUSH
8938: EMPTY
8939: LIST
8940: LIST
8941: LIST
8942: PUSH
8943: LD_EXP 1
8947: ARRAY
8948: PPUSH
8949: CALL 7988 0 1
// Wait ( 2 2$00 ) ;
8953: LD_INT 4200
8955: PPUSH
8956: CALL_OW 67
// while ( FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) < 3 ) do
8960: LD_INT 33
8962: PUSH
8963: LD_INT 2
8965: PUSH
8966: EMPTY
8967: LIST
8968: LIST
8969: PUSH
8970: LD_INT 3
8972: PUSH
8973: LD_INT 34
8975: PUSH
8976: LD_INT 13
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: PUSH
8983: EMPTY
8984: LIST
8985: LIST
8986: PUSH
8987: EMPTY
8988: LIST
8989: LIST
8990: PPUSH
8991: CALL_OW 69
8995: PUSH
8996: LD_INT 3
8998: LESS
8999: IFFALSE 9010
// Wait ( 0 0$01 ) ;
9001: LD_INT 35
9003: PPUSH
9004: CALL_OW 67
9008: GO 8960
// uc_side := 4 ;
9010: LD_ADDR_OWVAR 20
9014: PUSH
9015: LD_INT 4
9017: ST_TO_ADDR
// uc_nation := 1 ;
9018: LD_ADDR_OWVAR 21
9022: PUSH
9023: LD_INT 1
9025: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ dif ] do
9026: LD_ADDR_VAR 0 1
9030: PUSH
9031: DOUBLE
9032: LD_INT 1
9034: DEC
9035: ST_TO_ADDR
9036: LD_INT 4
9038: PUSH
9039: LD_INT 5
9041: PUSH
9042: LD_INT 6
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: LIST
9049: PUSH
9050: LD_EXP 1
9054: ARRAY
9055: PUSH
9056: FOR_TO
9057: IFFALSE 9099
// PlaceUnitArea ( CreateHumanWithClass ( 1 , [ 5 , 6 , 7 ] [ dif ] ) , am_east_spawn , false ) ;
9059: LD_INT 1
9061: PPUSH
9062: LD_INT 5
9064: PUSH
9065: LD_INT 6
9067: PUSH
9068: LD_INT 7
9070: PUSH
9071: EMPTY
9072: LIST
9073: LIST
9074: LIST
9075: PUSH
9076: LD_EXP 1
9080: ARRAY
9081: PPUSH
9082: CALL 734 0 2
9086: PPUSH
9087: LD_INT 4
9089: PPUSH
9090: LD_INT 0
9092: PPUSH
9093: CALL_OW 49
9097: GO 9056
9099: POP
9100: POP
// sikorski_ar := true ;
9101: LD_ADDR_EXP 12
9105: PUSH
9106: LD_INT 1
9108: ST_TO_ADDR
// SayRadio ( sikorski , DSik1 ) ;
9109: LD_EXP 9
9113: PPUSH
9114: LD_STRING DSik1
9116: PPUSH
9117: CALL_OW 94
// Wait ( 0 0$30 ) ;
9121: LD_INT 1050
9123: PPUSH
9124: CALL_OW 67
// uc_side := 4 ;
9128: LD_ADDR_OWVAR 20
9132: PUSH
9133: LD_INT 4
9135: ST_TO_ADDR
// uc_nation := 1 ;
9136: LD_ADDR_OWVAR 21
9140: PUSH
9141: LD_INT 1
9143: ST_TO_ADDR
// for i = 1 to [ 3 , 4 , 4 ] [ dif ] do
9144: LD_ADDR_VAR 0 1
9148: PUSH
9149: DOUBLE
9150: LD_INT 1
9152: DEC
9153: ST_TO_ADDR
9154: LD_INT 3
9156: PUSH
9157: LD_INT 4
9159: PUSH
9160: LD_INT 4
9162: PUSH
9163: EMPTY
9164: LIST
9165: LIST
9166: LIST
9167: PUSH
9168: LD_EXP 1
9172: ARRAY
9173: PUSH
9174: FOR_TO
9175: IFFALSE 9217
// PlaceUnitArea ( CreateHumanWithClass ( 1 , [ 5 , 6 , 7 ] [ dif ] ) , am_south_spawn , false ) ;
9177: LD_INT 1
9179: PPUSH
9180: LD_INT 5
9182: PUSH
9183: LD_INT 6
9185: PUSH
9186: LD_INT 7
9188: PUSH
9189: EMPTY
9190: LIST
9191: LIST
9192: LIST
9193: PUSH
9194: LD_EXP 1
9198: ARRAY
9199: PPUSH
9200: CALL 734 0 2
9204: PPUSH
9205: LD_INT 13
9207: PPUSH
9208: LD_INT 0
9210: PPUSH
9211: CALL_OW 49
9215: GO 9174
9217: POP
9218: POP
// end ;
9219: PPOPN 1
9221: END
// every 0 0$0.1 trigger GetLives ( sikorski ) < 650 do
9222: LD_EXP 9
9226: PPUSH
9227: CALL_OW 256
9231: PUSH
9232: LD_INT 650
9234: LESS
9235: IFFALSE 9317
9237: GO 9239
9239: DISABLE
// begin Say ( sikorski , DSik2 ) ;
9240: LD_EXP 9
9244: PPUSH
9245: LD_STRING DSik2
9247: PPUSH
9248: CALL_OW 88
// while ( IsLive ( sikorski ) ) do
9252: LD_EXP 9
9256: PPUSH
9257: CALL_OW 300
9261: IFFALSE 9317
// begin ComMoveToArea ( sikorski , am_main_spawn ) ;
9263: LD_EXP 9
9267: PPUSH
9268: LD_INT 2
9270: PPUSH
9271: CALL_OW 113
// Wait ( 0 0$01 ) ;
9275: LD_INT 35
9277: PPUSH
9278: CALL_OW 67
// if IsInArea ( sikorski , am_main_spawn ) then
9282: LD_EXP 9
9286: PPUSH
9287: LD_INT 2
9289: PPUSH
9290: CALL_OW 308
9294: IFFALSE 9315
// begin RemoveUnit ( sikorski ) ;
9296: LD_EXP 9
9300: PPUSH
9301: CALL_OW 64
// break ;
9305: GO 9317
// sikorski_run := true ;
9307: LD_ADDR_EXP 23
9311: PUSH
9312: LD_INT 1
9314: ST_TO_ADDR
// end ; end ;
9315: GO 9252
// end ;
9317: END
// every 0 0$0.1 trigger GetLives ( sikorski ) < 1000 do
9318: LD_EXP 9
9322: PPUSH
9323: CALL_OW 256
9327: PUSH
9328: LD_INT 1000
9330: LESS
9331: IFFALSE 9348
9333: GO 9335
9335: DISABLE
// Say ( sikorski , DSkik3 ) ; end_of_file
9336: LD_EXP 9
9340: PPUSH
9341: LD_STRING DSkik3
9343: PPUSH
9344: CALL_OW 88
9348: END
// every 1 1$45 + 0 0$15 do
9349: GO 9351
9351: DISABLE
// begin enable ;
9352: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
9353: LD_INT 1
9355: PPUSH
9356: LD_INT 5
9358: PPUSH
9359: CALL_OW 12
9363: PPUSH
9364: LD_INT 8
9366: PPUSH
9367: LD_INT 1
9369: PPUSH
9370: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$37 ) ) ;
9374: LD_INT 350
9376: PPUSH
9377: LD_INT 1295
9379: PPUSH
9380: CALL_OW 12
9384: PPUSH
9385: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
9389: LD_INT 1
9391: PPUSH
9392: LD_INT 5
9394: PPUSH
9395: CALL_OW 12
9399: PPUSH
9400: LD_INT 1
9402: PPUSH
9403: CALL_OW 57
// Wait ( Rand ( 0 0$10 , 0 0$30 ) ) ;
9407: LD_INT 350
9409: PPUSH
9410: LD_INT 1050
9412: PPUSH
9413: CALL_OW 12
9417: PPUSH
9418: CALL_OW 67
// if timer <= [ 12 12$00 , 11 11$00 , 10 10$00 ] [ dif ] then
9422: LD_EXP 24
9426: PUSH
9427: LD_INT 25200
9429: PUSH
9430: LD_INT 23100
9432: PUSH
9433: LD_INT 21000
9435: PUSH
9436: EMPTY
9437: LIST
9438: LIST
9439: LIST
9440: PUSH
9441: LD_EXP 1
9445: ARRAY
9446: LESSEQUAL
9447: IFFALSE 9470
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
9449: LD_INT 1
9451: PPUSH
9452: LD_INT 5
9454: PPUSH
9455: CALL_OW 12
9459: PPUSH
9460: LD_INT 8
9462: PPUSH
9463: LD_INT 1
9465: PPUSH
9466: CALL_OW 55
// end ;
9470: END
// export timer ; every 1 do
9471: GO 9473
9473: DISABLE
// timer := 0 0$00 ;
9474: LD_ADDR_EXP 24
9478: PUSH
9479: LD_INT 0
9481: ST_TO_ADDR
9482: END
// every 0 0$01 do
9483: GO 9485
9485: DISABLE
// begin enable ;
9486: ENABLE
// Display_Strings := [ #tick , timer ] ;
9487: LD_ADDR_OWVAR 47
9491: PUSH
9492: LD_STRING #tick
9494: PUSH
9495: LD_EXP 24
9499: PUSH
9500: EMPTY
9501: LIST
9502: LIST
9503: ST_TO_ADDR
// timer := timer + 0 0$01 ;
9504: LD_ADDR_EXP 24
9508: PUSH
9509: LD_EXP 24
9513: PUSH
9514: LD_INT 35
9516: PLUS
9517: ST_TO_ADDR
// end ; end_of_file end_of_file
9518: END
// export globalGameSaveCounter ; every 0 0$1 do
9519: GO 9521
9521: DISABLE
// begin enable ;
9522: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
9523: LD_STRING updateTimer(
9525: PUSH
9526: LD_OWVAR 1
9530: STR
9531: PUSH
9532: LD_STRING );
9534: STR
9535: PPUSH
9536: CALL_OW 559
// end ;
9540: END
// every 0 0$1 do
9541: GO 9543
9543: DISABLE
// begin globalGameSaveCounter := 0 ;
9544: LD_ADDR_EXP 25
9548: PUSH
9549: LD_INT 0
9551: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
9552: LD_STRING setGameSaveCounter(0)
9554: PPUSH
9555: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
9559: LD_STRING initStreamRollete();
9561: PPUSH
9562: CALL_OW 559
// InitStreamMode ;
9566: CALL 10911 0 0
// DefineStreamItems ( false ) ;
9570: LD_INT 0
9572: PPUSH
9573: CALL 11375 0 1
// end ;
9577: END
// export function SOS_MapStart ( ) ; begin
9578: LD_INT 0
9580: PPUSH
// if streamModeActive then
9581: LD_EXP 26
9585: IFFALSE 9594
// DefineStreamItems ( true ) ;
9587: LD_INT 1
9589: PPUSH
9590: CALL 11375 0 1
// UpdateLuaVariables ( ) ;
9594: CALL 9611 0 0
// UpdateFactoryWaypoints ( ) ;
9598: CALL 24497 0 0
// UpdateWarehouseGatheringPoints ( ) ;
9602: CALL 24749 0 0
// end ;
9606: LD_VAR 0 1
9610: RET
// function UpdateLuaVariables ( ) ; begin
9611: LD_INT 0
9613: PPUSH
// if globalGameSaveCounter then
9614: LD_EXP 25
9618: IFFALSE 9652
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
9620: LD_ADDR_EXP 25
9624: PUSH
9625: LD_EXP 25
9629: PPUSH
9630: CALL 71330 0 1
9634: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
9635: LD_STRING setGameSaveCounter(
9637: PUSH
9638: LD_EXP 25
9642: STR
9643: PUSH
9644: LD_STRING )
9646: STR
9647: PPUSH
9648: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
9652: LD_STRING setGameDifficulty(
9654: PUSH
9655: LD_OWVAR 67
9659: STR
9660: PUSH
9661: LD_STRING )
9663: STR
9664: PPUSH
9665: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
9669: LD_STRING displayDifficulty(
9671: PUSH
9672: LD_OWVAR 67
9676: STR
9677: PUSH
9678: LD_STRING )
9680: STR
9681: PPUSH
9682: CALL_OW 559
// end ;
9686: LD_VAR 0 1
9690: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9691: LD_INT 0
9693: PPUSH
// if p2 = stream_mode then
9694: LD_VAR 0 2
9698: PUSH
9699: LD_INT 100
9701: EQUAL
9702: IFFALSE 10705
// begin if not StreamModeActive then
9704: LD_EXP 26
9708: NOT
9709: IFFALSE 9719
// StreamModeActive := true ;
9711: LD_ADDR_EXP 26
9715: PUSH
9716: LD_INT 1
9718: ST_TO_ADDR
// if p3 = 0 then
9719: LD_VAR 0 3
9723: PUSH
9724: LD_INT 0
9726: EQUAL
9727: IFFALSE 9733
// InitStreamMode ;
9729: CALL 10911 0 0
// if p3 = 1 then
9733: LD_VAR 0 3
9737: PUSH
9738: LD_INT 1
9740: EQUAL
9741: IFFALSE 9751
// sRocket := true ;
9743: LD_ADDR_EXP 31
9747: PUSH
9748: LD_INT 1
9750: ST_TO_ADDR
// if p3 = 2 then
9751: LD_VAR 0 3
9755: PUSH
9756: LD_INT 2
9758: EQUAL
9759: IFFALSE 9769
// sSpeed := true ;
9761: LD_ADDR_EXP 30
9765: PUSH
9766: LD_INT 1
9768: ST_TO_ADDR
// if p3 = 3 then
9769: LD_VAR 0 3
9773: PUSH
9774: LD_INT 3
9776: EQUAL
9777: IFFALSE 9787
// sEngine := true ;
9779: LD_ADDR_EXP 32
9783: PUSH
9784: LD_INT 1
9786: ST_TO_ADDR
// if p3 = 4 then
9787: LD_VAR 0 3
9791: PUSH
9792: LD_INT 4
9794: EQUAL
9795: IFFALSE 9805
// sSpec := true ;
9797: LD_ADDR_EXP 29
9801: PUSH
9802: LD_INT 1
9804: ST_TO_ADDR
// if p3 = 5 then
9805: LD_VAR 0 3
9809: PUSH
9810: LD_INT 5
9812: EQUAL
9813: IFFALSE 9823
// sLevel := true ;
9815: LD_ADDR_EXP 33
9819: PUSH
9820: LD_INT 1
9822: ST_TO_ADDR
// if p3 = 6 then
9823: LD_VAR 0 3
9827: PUSH
9828: LD_INT 6
9830: EQUAL
9831: IFFALSE 9841
// sArmoury := true ;
9833: LD_ADDR_EXP 34
9837: PUSH
9838: LD_INT 1
9840: ST_TO_ADDR
// if p3 = 7 then
9841: LD_VAR 0 3
9845: PUSH
9846: LD_INT 7
9848: EQUAL
9849: IFFALSE 9859
// sRadar := true ;
9851: LD_ADDR_EXP 35
9855: PUSH
9856: LD_INT 1
9858: ST_TO_ADDR
// if p3 = 8 then
9859: LD_VAR 0 3
9863: PUSH
9864: LD_INT 8
9866: EQUAL
9867: IFFALSE 9877
// sBunker := true ;
9869: LD_ADDR_EXP 36
9873: PUSH
9874: LD_INT 1
9876: ST_TO_ADDR
// if p3 = 9 then
9877: LD_VAR 0 3
9881: PUSH
9882: LD_INT 9
9884: EQUAL
9885: IFFALSE 9895
// sHack := true ;
9887: LD_ADDR_EXP 37
9891: PUSH
9892: LD_INT 1
9894: ST_TO_ADDR
// if p3 = 10 then
9895: LD_VAR 0 3
9899: PUSH
9900: LD_INT 10
9902: EQUAL
9903: IFFALSE 9913
// sFire := true ;
9905: LD_ADDR_EXP 38
9909: PUSH
9910: LD_INT 1
9912: ST_TO_ADDR
// if p3 = 11 then
9913: LD_VAR 0 3
9917: PUSH
9918: LD_INT 11
9920: EQUAL
9921: IFFALSE 9931
// sRefresh := true ;
9923: LD_ADDR_EXP 39
9927: PUSH
9928: LD_INT 1
9930: ST_TO_ADDR
// if p3 = 12 then
9931: LD_VAR 0 3
9935: PUSH
9936: LD_INT 12
9938: EQUAL
9939: IFFALSE 9949
// sExp := true ;
9941: LD_ADDR_EXP 40
9945: PUSH
9946: LD_INT 1
9948: ST_TO_ADDR
// if p3 = 13 then
9949: LD_VAR 0 3
9953: PUSH
9954: LD_INT 13
9956: EQUAL
9957: IFFALSE 9967
// sDepot := true ;
9959: LD_ADDR_EXP 41
9963: PUSH
9964: LD_INT 1
9966: ST_TO_ADDR
// if p3 = 14 then
9967: LD_VAR 0 3
9971: PUSH
9972: LD_INT 14
9974: EQUAL
9975: IFFALSE 9985
// sFlag := true ;
9977: LD_ADDR_EXP 42
9981: PUSH
9982: LD_INT 1
9984: ST_TO_ADDR
// if p3 = 15 then
9985: LD_VAR 0 3
9989: PUSH
9990: LD_INT 15
9992: EQUAL
9993: IFFALSE 10003
// sKamikadze := true ;
9995: LD_ADDR_EXP 50
9999: PUSH
10000: LD_INT 1
10002: ST_TO_ADDR
// if p3 = 16 then
10003: LD_VAR 0 3
10007: PUSH
10008: LD_INT 16
10010: EQUAL
10011: IFFALSE 10021
// sTroll := true ;
10013: LD_ADDR_EXP 51
10017: PUSH
10018: LD_INT 1
10020: ST_TO_ADDR
// if p3 = 17 then
10021: LD_VAR 0 3
10025: PUSH
10026: LD_INT 17
10028: EQUAL
10029: IFFALSE 10039
// sSlow := true ;
10031: LD_ADDR_EXP 52
10035: PUSH
10036: LD_INT 1
10038: ST_TO_ADDR
// if p3 = 18 then
10039: LD_VAR 0 3
10043: PUSH
10044: LD_INT 18
10046: EQUAL
10047: IFFALSE 10057
// sLack := true ;
10049: LD_ADDR_EXP 53
10053: PUSH
10054: LD_INT 1
10056: ST_TO_ADDR
// if p3 = 19 then
10057: LD_VAR 0 3
10061: PUSH
10062: LD_INT 19
10064: EQUAL
10065: IFFALSE 10075
// sTank := true ;
10067: LD_ADDR_EXP 55
10071: PUSH
10072: LD_INT 1
10074: ST_TO_ADDR
// if p3 = 20 then
10075: LD_VAR 0 3
10079: PUSH
10080: LD_INT 20
10082: EQUAL
10083: IFFALSE 10093
// sRemote := true ;
10085: LD_ADDR_EXP 56
10089: PUSH
10090: LD_INT 1
10092: ST_TO_ADDR
// if p3 = 21 then
10093: LD_VAR 0 3
10097: PUSH
10098: LD_INT 21
10100: EQUAL
10101: IFFALSE 10111
// sPowell := true ;
10103: LD_ADDR_EXP 57
10107: PUSH
10108: LD_INT 1
10110: ST_TO_ADDR
// if p3 = 22 then
10111: LD_VAR 0 3
10115: PUSH
10116: LD_INT 22
10118: EQUAL
10119: IFFALSE 10129
// sTeleport := true ;
10121: LD_ADDR_EXP 60
10125: PUSH
10126: LD_INT 1
10128: ST_TO_ADDR
// if p3 = 23 then
10129: LD_VAR 0 3
10133: PUSH
10134: LD_INT 23
10136: EQUAL
10137: IFFALSE 10147
// sOilTower := true ;
10139: LD_ADDR_EXP 62
10143: PUSH
10144: LD_INT 1
10146: ST_TO_ADDR
// if p3 = 24 then
10147: LD_VAR 0 3
10151: PUSH
10152: LD_INT 24
10154: EQUAL
10155: IFFALSE 10165
// sShovel := true ;
10157: LD_ADDR_EXP 63
10161: PUSH
10162: LD_INT 1
10164: ST_TO_ADDR
// if p3 = 25 then
10165: LD_VAR 0 3
10169: PUSH
10170: LD_INT 25
10172: EQUAL
10173: IFFALSE 10183
// sSheik := true ;
10175: LD_ADDR_EXP 64
10179: PUSH
10180: LD_INT 1
10182: ST_TO_ADDR
// if p3 = 26 then
10183: LD_VAR 0 3
10187: PUSH
10188: LD_INT 26
10190: EQUAL
10191: IFFALSE 10201
// sEarthquake := true ;
10193: LD_ADDR_EXP 66
10197: PUSH
10198: LD_INT 1
10200: ST_TO_ADDR
// if p3 = 27 then
10201: LD_VAR 0 3
10205: PUSH
10206: LD_INT 27
10208: EQUAL
10209: IFFALSE 10219
// sAI := true ;
10211: LD_ADDR_EXP 67
10215: PUSH
10216: LD_INT 1
10218: ST_TO_ADDR
// if p3 = 28 then
10219: LD_VAR 0 3
10223: PUSH
10224: LD_INT 28
10226: EQUAL
10227: IFFALSE 10237
// sCargo := true ;
10229: LD_ADDR_EXP 70
10233: PUSH
10234: LD_INT 1
10236: ST_TO_ADDR
// if p3 = 29 then
10237: LD_VAR 0 3
10241: PUSH
10242: LD_INT 29
10244: EQUAL
10245: IFFALSE 10255
// sDLaser := true ;
10247: LD_ADDR_EXP 71
10251: PUSH
10252: LD_INT 1
10254: ST_TO_ADDR
// if p3 = 30 then
10255: LD_VAR 0 3
10259: PUSH
10260: LD_INT 30
10262: EQUAL
10263: IFFALSE 10273
// sExchange := true ;
10265: LD_ADDR_EXP 72
10269: PUSH
10270: LD_INT 1
10272: ST_TO_ADDR
// if p3 = 31 then
10273: LD_VAR 0 3
10277: PUSH
10278: LD_INT 31
10280: EQUAL
10281: IFFALSE 10291
// sFac := true ;
10283: LD_ADDR_EXP 73
10287: PUSH
10288: LD_INT 1
10290: ST_TO_ADDR
// if p3 = 32 then
10291: LD_VAR 0 3
10295: PUSH
10296: LD_INT 32
10298: EQUAL
10299: IFFALSE 10309
// sPower := true ;
10301: LD_ADDR_EXP 74
10305: PUSH
10306: LD_INT 1
10308: ST_TO_ADDR
// if p3 = 33 then
10309: LD_VAR 0 3
10313: PUSH
10314: LD_INT 33
10316: EQUAL
10317: IFFALSE 10327
// sRandom := true ;
10319: LD_ADDR_EXP 75
10323: PUSH
10324: LD_INT 1
10326: ST_TO_ADDR
// if p3 = 34 then
10327: LD_VAR 0 3
10331: PUSH
10332: LD_INT 34
10334: EQUAL
10335: IFFALSE 10345
// sShield := true ;
10337: LD_ADDR_EXP 76
10341: PUSH
10342: LD_INT 1
10344: ST_TO_ADDR
// if p3 = 35 then
10345: LD_VAR 0 3
10349: PUSH
10350: LD_INT 35
10352: EQUAL
10353: IFFALSE 10363
// sTime := true ;
10355: LD_ADDR_EXP 77
10359: PUSH
10360: LD_INT 1
10362: ST_TO_ADDR
// if p3 = 36 then
10363: LD_VAR 0 3
10367: PUSH
10368: LD_INT 36
10370: EQUAL
10371: IFFALSE 10381
// sTools := true ;
10373: LD_ADDR_EXP 78
10377: PUSH
10378: LD_INT 1
10380: ST_TO_ADDR
// if p3 = 101 then
10381: LD_VAR 0 3
10385: PUSH
10386: LD_INT 101
10388: EQUAL
10389: IFFALSE 10399
// sSold := true ;
10391: LD_ADDR_EXP 43
10395: PUSH
10396: LD_INT 1
10398: ST_TO_ADDR
// if p3 = 102 then
10399: LD_VAR 0 3
10403: PUSH
10404: LD_INT 102
10406: EQUAL
10407: IFFALSE 10417
// sDiff := true ;
10409: LD_ADDR_EXP 44
10413: PUSH
10414: LD_INT 1
10416: ST_TO_ADDR
// if p3 = 103 then
10417: LD_VAR 0 3
10421: PUSH
10422: LD_INT 103
10424: EQUAL
10425: IFFALSE 10435
// sFog := true ;
10427: LD_ADDR_EXP 47
10431: PUSH
10432: LD_INT 1
10434: ST_TO_ADDR
// if p3 = 104 then
10435: LD_VAR 0 3
10439: PUSH
10440: LD_INT 104
10442: EQUAL
10443: IFFALSE 10453
// sReset := true ;
10445: LD_ADDR_EXP 48
10449: PUSH
10450: LD_INT 1
10452: ST_TO_ADDR
// if p3 = 105 then
10453: LD_VAR 0 3
10457: PUSH
10458: LD_INT 105
10460: EQUAL
10461: IFFALSE 10471
// sSun := true ;
10463: LD_ADDR_EXP 49
10467: PUSH
10468: LD_INT 1
10470: ST_TO_ADDR
// if p3 = 106 then
10471: LD_VAR 0 3
10475: PUSH
10476: LD_INT 106
10478: EQUAL
10479: IFFALSE 10489
// sTiger := true ;
10481: LD_ADDR_EXP 45
10485: PUSH
10486: LD_INT 1
10488: ST_TO_ADDR
// if p3 = 107 then
10489: LD_VAR 0 3
10493: PUSH
10494: LD_INT 107
10496: EQUAL
10497: IFFALSE 10507
// sBomb := true ;
10499: LD_ADDR_EXP 46
10503: PUSH
10504: LD_INT 1
10506: ST_TO_ADDR
// if p3 = 108 then
10507: LD_VAR 0 3
10511: PUSH
10512: LD_INT 108
10514: EQUAL
10515: IFFALSE 10525
// sWound := true ;
10517: LD_ADDR_EXP 54
10521: PUSH
10522: LD_INT 1
10524: ST_TO_ADDR
// if p3 = 109 then
10525: LD_VAR 0 3
10529: PUSH
10530: LD_INT 109
10532: EQUAL
10533: IFFALSE 10543
// sBetray := true ;
10535: LD_ADDR_EXP 58
10539: PUSH
10540: LD_INT 1
10542: ST_TO_ADDR
// if p3 = 110 then
10543: LD_VAR 0 3
10547: PUSH
10548: LD_INT 110
10550: EQUAL
10551: IFFALSE 10561
// sContamin := true ;
10553: LD_ADDR_EXP 59
10557: PUSH
10558: LD_INT 1
10560: ST_TO_ADDR
// if p3 = 111 then
10561: LD_VAR 0 3
10565: PUSH
10566: LD_INT 111
10568: EQUAL
10569: IFFALSE 10579
// sOil := true ;
10571: LD_ADDR_EXP 61
10575: PUSH
10576: LD_INT 1
10578: ST_TO_ADDR
// if p3 = 112 then
10579: LD_VAR 0 3
10583: PUSH
10584: LD_INT 112
10586: EQUAL
10587: IFFALSE 10597
// sStu := true ;
10589: LD_ADDR_EXP 65
10593: PUSH
10594: LD_INT 1
10596: ST_TO_ADDR
// if p3 = 113 then
10597: LD_VAR 0 3
10601: PUSH
10602: LD_INT 113
10604: EQUAL
10605: IFFALSE 10615
// sBazooka := true ;
10607: LD_ADDR_EXP 68
10611: PUSH
10612: LD_INT 1
10614: ST_TO_ADDR
// if p3 = 114 then
10615: LD_VAR 0 3
10619: PUSH
10620: LD_INT 114
10622: EQUAL
10623: IFFALSE 10633
// sMortar := true ;
10625: LD_ADDR_EXP 69
10629: PUSH
10630: LD_INT 1
10632: ST_TO_ADDR
// if p3 = 115 then
10633: LD_VAR 0 3
10637: PUSH
10638: LD_INT 115
10640: EQUAL
10641: IFFALSE 10651
// sRanger := true ;
10643: LD_ADDR_EXP 79
10647: PUSH
10648: LD_INT 1
10650: ST_TO_ADDR
// if p3 = 116 then
10651: LD_VAR 0 3
10655: PUSH
10656: LD_INT 116
10658: EQUAL
10659: IFFALSE 10669
// sComputer := true ;
10661: LD_ADDR_EXP 80
10665: PUSH
10666: LD_INT 1
10668: ST_TO_ADDR
// if p3 = 117 then
10669: LD_VAR 0 3
10673: PUSH
10674: LD_INT 117
10676: EQUAL
10677: IFFALSE 10687
// s30 := true ;
10679: LD_ADDR_EXP 81
10683: PUSH
10684: LD_INT 1
10686: ST_TO_ADDR
// if p3 = 118 then
10687: LD_VAR 0 3
10691: PUSH
10692: LD_INT 118
10694: EQUAL
10695: IFFALSE 10705
// s60 := true ;
10697: LD_ADDR_EXP 82
10701: PUSH
10702: LD_INT 1
10704: ST_TO_ADDR
// end ; if p2 = hack_mode then
10705: LD_VAR 0 2
10709: PUSH
10710: LD_INT 101
10712: EQUAL
10713: IFFALSE 10841
// begin case p3 of 1 :
10715: LD_VAR 0 3
10719: PUSH
10720: LD_INT 1
10722: DOUBLE
10723: EQUAL
10724: IFTRUE 10728
10726: GO 10735
10728: POP
// hHackUnlimitedResources ; 2 :
10729: CALL 23104 0 0
10733: GO 10841
10735: LD_INT 2
10737: DOUBLE
10738: EQUAL
10739: IFTRUE 10743
10741: GO 10750
10743: POP
// hHackSetLevel10 ; 3 :
10744: CALL 23237 0 0
10748: GO 10841
10750: LD_INT 3
10752: DOUBLE
10753: EQUAL
10754: IFTRUE 10758
10756: GO 10765
10758: POP
// hHackSetLevel10YourUnits ; 4 :
10759: CALL 23322 0 0
10763: GO 10841
10765: LD_INT 4
10767: DOUBLE
10768: EQUAL
10769: IFTRUE 10773
10771: GO 10780
10773: POP
// hHackInvincible ; 5 :
10774: CALL 23770 0 0
10778: GO 10841
10780: LD_INT 5
10782: DOUBLE
10783: EQUAL
10784: IFTRUE 10788
10786: GO 10795
10788: POP
// hHackInvisible ; 6 :
10789: CALL 23881 0 0
10793: GO 10841
10795: LD_INT 6
10797: DOUBLE
10798: EQUAL
10799: IFTRUE 10803
10801: GO 10810
10803: POP
// hHackChangeYourSide ; 7 :
10804: CALL 23938 0 0
10808: GO 10841
10810: LD_INT 7
10812: DOUBLE
10813: EQUAL
10814: IFTRUE 10818
10816: GO 10825
10818: POP
// hHackChangeUnitSide ; 8 :
10819: CALL 23980 0 0
10823: GO 10841
10825: LD_INT 8
10827: DOUBLE
10828: EQUAL
10829: IFTRUE 10833
10831: GO 10840
10833: POP
// hHackFog ; end ;
10834: CALL 24081 0 0
10838: GO 10841
10840: POP
// end ; if p2 = game_save_mode then
10841: LD_VAR 0 2
10845: PUSH
10846: LD_INT 102
10848: EQUAL
10849: IFFALSE 10906
// begin if p3 = 1 then
10851: LD_VAR 0 3
10855: PUSH
10856: LD_INT 1
10858: EQUAL
10859: IFFALSE 10871
// globalGameSaveCounter := p4 ;
10861: LD_ADDR_EXP 25
10865: PUSH
10866: LD_VAR 0 4
10870: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
10871: LD_VAR 0 3
10875: PUSH
10876: LD_INT 2
10878: EQUAL
10879: IFFALSE 10887
10881: PUSH
10882: LD_EXP 25
10886: AND
10887: IFFALSE 10906
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10889: LD_STRING setGameSaveCounter(
10891: PUSH
10892: LD_EXP 25
10896: STR
10897: PUSH
10898: LD_STRING )
10900: STR
10901: PPUSH
10902: CALL_OW 559
// end ; end ;
10906: LD_VAR 0 7
10910: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
10911: LD_INT 0
10913: PPUSH
// streamModeActive := false ;
10914: LD_ADDR_EXP 26
10918: PUSH
10919: LD_INT 0
10921: ST_TO_ADDR
// normalCounter := 36 ;
10922: LD_ADDR_EXP 27
10926: PUSH
10927: LD_INT 36
10929: ST_TO_ADDR
// hardcoreCounter := 18 ;
10930: LD_ADDR_EXP 28
10934: PUSH
10935: LD_INT 18
10937: ST_TO_ADDR
// sRocket := false ;
10938: LD_ADDR_EXP 31
10942: PUSH
10943: LD_INT 0
10945: ST_TO_ADDR
// sSpeed := false ;
10946: LD_ADDR_EXP 30
10950: PUSH
10951: LD_INT 0
10953: ST_TO_ADDR
// sEngine := false ;
10954: LD_ADDR_EXP 32
10958: PUSH
10959: LD_INT 0
10961: ST_TO_ADDR
// sSpec := false ;
10962: LD_ADDR_EXP 29
10966: PUSH
10967: LD_INT 0
10969: ST_TO_ADDR
// sLevel := false ;
10970: LD_ADDR_EXP 33
10974: PUSH
10975: LD_INT 0
10977: ST_TO_ADDR
// sArmoury := false ;
10978: LD_ADDR_EXP 34
10982: PUSH
10983: LD_INT 0
10985: ST_TO_ADDR
// sRadar := false ;
10986: LD_ADDR_EXP 35
10990: PUSH
10991: LD_INT 0
10993: ST_TO_ADDR
// sBunker := false ;
10994: LD_ADDR_EXP 36
10998: PUSH
10999: LD_INT 0
11001: ST_TO_ADDR
// sHack := false ;
11002: LD_ADDR_EXP 37
11006: PUSH
11007: LD_INT 0
11009: ST_TO_ADDR
// sFire := false ;
11010: LD_ADDR_EXP 38
11014: PUSH
11015: LD_INT 0
11017: ST_TO_ADDR
// sRefresh := false ;
11018: LD_ADDR_EXP 39
11022: PUSH
11023: LD_INT 0
11025: ST_TO_ADDR
// sExp := false ;
11026: LD_ADDR_EXP 40
11030: PUSH
11031: LD_INT 0
11033: ST_TO_ADDR
// sDepot := false ;
11034: LD_ADDR_EXP 41
11038: PUSH
11039: LD_INT 0
11041: ST_TO_ADDR
// sFlag := false ;
11042: LD_ADDR_EXP 42
11046: PUSH
11047: LD_INT 0
11049: ST_TO_ADDR
// sKamikadze := false ;
11050: LD_ADDR_EXP 50
11054: PUSH
11055: LD_INT 0
11057: ST_TO_ADDR
// sTroll := false ;
11058: LD_ADDR_EXP 51
11062: PUSH
11063: LD_INT 0
11065: ST_TO_ADDR
// sSlow := false ;
11066: LD_ADDR_EXP 52
11070: PUSH
11071: LD_INT 0
11073: ST_TO_ADDR
// sLack := false ;
11074: LD_ADDR_EXP 53
11078: PUSH
11079: LD_INT 0
11081: ST_TO_ADDR
// sTank := false ;
11082: LD_ADDR_EXP 55
11086: PUSH
11087: LD_INT 0
11089: ST_TO_ADDR
// sRemote := false ;
11090: LD_ADDR_EXP 56
11094: PUSH
11095: LD_INT 0
11097: ST_TO_ADDR
// sPowell := false ;
11098: LD_ADDR_EXP 57
11102: PUSH
11103: LD_INT 0
11105: ST_TO_ADDR
// sTeleport := false ;
11106: LD_ADDR_EXP 60
11110: PUSH
11111: LD_INT 0
11113: ST_TO_ADDR
// sOilTower := false ;
11114: LD_ADDR_EXP 62
11118: PUSH
11119: LD_INT 0
11121: ST_TO_ADDR
// sShovel := false ;
11122: LD_ADDR_EXP 63
11126: PUSH
11127: LD_INT 0
11129: ST_TO_ADDR
// sSheik := false ;
11130: LD_ADDR_EXP 64
11134: PUSH
11135: LD_INT 0
11137: ST_TO_ADDR
// sEarthquake := false ;
11138: LD_ADDR_EXP 66
11142: PUSH
11143: LD_INT 0
11145: ST_TO_ADDR
// sAI := false ;
11146: LD_ADDR_EXP 67
11150: PUSH
11151: LD_INT 0
11153: ST_TO_ADDR
// sCargo := false ;
11154: LD_ADDR_EXP 70
11158: PUSH
11159: LD_INT 0
11161: ST_TO_ADDR
// sDLaser := false ;
11162: LD_ADDR_EXP 71
11166: PUSH
11167: LD_INT 0
11169: ST_TO_ADDR
// sExchange := false ;
11170: LD_ADDR_EXP 72
11174: PUSH
11175: LD_INT 0
11177: ST_TO_ADDR
// sFac := false ;
11178: LD_ADDR_EXP 73
11182: PUSH
11183: LD_INT 0
11185: ST_TO_ADDR
// sPower := false ;
11186: LD_ADDR_EXP 74
11190: PUSH
11191: LD_INT 0
11193: ST_TO_ADDR
// sRandom := false ;
11194: LD_ADDR_EXP 75
11198: PUSH
11199: LD_INT 0
11201: ST_TO_ADDR
// sShield := false ;
11202: LD_ADDR_EXP 76
11206: PUSH
11207: LD_INT 0
11209: ST_TO_ADDR
// sTime := false ;
11210: LD_ADDR_EXP 77
11214: PUSH
11215: LD_INT 0
11217: ST_TO_ADDR
// sTools := false ;
11218: LD_ADDR_EXP 78
11222: PUSH
11223: LD_INT 0
11225: ST_TO_ADDR
// sSold := false ;
11226: LD_ADDR_EXP 43
11230: PUSH
11231: LD_INT 0
11233: ST_TO_ADDR
// sDiff := false ;
11234: LD_ADDR_EXP 44
11238: PUSH
11239: LD_INT 0
11241: ST_TO_ADDR
// sFog := false ;
11242: LD_ADDR_EXP 47
11246: PUSH
11247: LD_INT 0
11249: ST_TO_ADDR
// sReset := false ;
11250: LD_ADDR_EXP 48
11254: PUSH
11255: LD_INT 0
11257: ST_TO_ADDR
// sSun := false ;
11258: LD_ADDR_EXP 49
11262: PUSH
11263: LD_INT 0
11265: ST_TO_ADDR
// sTiger := false ;
11266: LD_ADDR_EXP 45
11270: PUSH
11271: LD_INT 0
11273: ST_TO_ADDR
// sBomb := false ;
11274: LD_ADDR_EXP 46
11278: PUSH
11279: LD_INT 0
11281: ST_TO_ADDR
// sWound := false ;
11282: LD_ADDR_EXP 54
11286: PUSH
11287: LD_INT 0
11289: ST_TO_ADDR
// sBetray := false ;
11290: LD_ADDR_EXP 58
11294: PUSH
11295: LD_INT 0
11297: ST_TO_ADDR
// sContamin := false ;
11298: LD_ADDR_EXP 59
11302: PUSH
11303: LD_INT 0
11305: ST_TO_ADDR
// sOil := false ;
11306: LD_ADDR_EXP 61
11310: PUSH
11311: LD_INT 0
11313: ST_TO_ADDR
// sStu := false ;
11314: LD_ADDR_EXP 65
11318: PUSH
11319: LD_INT 0
11321: ST_TO_ADDR
// sBazooka := false ;
11322: LD_ADDR_EXP 68
11326: PUSH
11327: LD_INT 0
11329: ST_TO_ADDR
// sMortar := false ;
11330: LD_ADDR_EXP 69
11334: PUSH
11335: LD_INT 0
11337: ST_TO_ADDR
// sRanger := false ;
11338: LD_ADDR_EXP 79
11342: PUSH
11343: LD_INT 0
11345: ST_TO_ADDR
// sComputer := false ;
11346: LD_ADDR_EXP 80
11350: PUSH
11351: LD_INT 0
11353: ST_TO_ADDR
// s30 := false ;
11354: LD_ADDR_EXP 81
11358: PUSH
11359: LD_INT 0
11361: ST_TO_ADDR
// s60 := false ;
11362: LD_ADDR_EXP 82
11366: PUSH
11367: LD_INT 0
11369: ST_TO_ADDR
// end ;
11370: LD_VAR 0 1
11374: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
11375: LD_INT 0
11377: PPUSH
11378: PPUSH
11379: PPUSH
11380: PPUSH
11381: PPUSH
11382: PPUSH
11383: PPUSH
// result := [ ] ;
11384: LD_ADDR_VAR 0 2
11388: PUSH
11389: EMPTY
11390: ST_TO_ADDR
// if campaign_id = 1 then
11391: LD_OWVAR 69
11395: PUSH
11396: LD_INT 1
11398: EQUAL
11399: IFFALSE 14565
// begin case mission_number of 1 :
11401: LD_OWVAR 70
11405: PUSH
11406: LD_INT 1
11408: DOUBLE
11409: EQUAL
11410: IFTRUE 11414
11412: GO 11490
11414: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
11415: LD_ADDR_VAR 0 2
11419: PUSH
11420: LD_INT 2
11422: PUSH
11423: LD_INT 4
11425: PUSH
11426: LD_INT 11
11428: PUSH
11429: LD_INT 12
11431: PUSH
11432: LD_INT 15
11434: PUSH
11435: LD_INT 16
11437: PUSH
11438: LD_INT 22
11440: PUSH
11441: LD_INT 23
11443: PUSH
11444: LD_INT 26
11446: PUSH
11447: EMPTY
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: PUSH
11458: LD_INT 101
11460: PUSH
11461: LD_INT 102
11463: PUSH
11464: LD_INT 106
11466: PUSH
11467: LD_INT 116
11469: PUSH
11470: LD_INT 117
11472: PUSH
11473: LD_INT 118
11475: PUSH
11476: EMPTY
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: PUSH
11484: EMPTY
11485: LIST
11486: LIST
11487: ST_TO_ADDR
11488: GO 14563
11490: LD_INT 2
11492: DOUBLE
11493: EQUAL
11494: IFTRUE 11498
11496: GO 11582
11498: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
11499: LD_ADDR_VAR 0 2
11503: PUSH
11504: LD_INT 2
11506: PUSH
11507: LD_INT 4
11509: PUSH
11510: LD_INT 11
11512: PUSH
11513: LD_INT 12
11515: PUSH
11516: LD_INT 15
11518: PUSH
11519: LD_INT 16
11521: PUSH
11522: LD_INT 22
11524: PUSH
11525: LD_INT 23
11527: PUSH
11528: LD_INT 26
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: PUSH
11542: LD_INT 101
11544: PUSH
11545: LD_INT 102
11547: PUSH
11548: LD_INT 105
11550: PUSH
11551: LD_INT 106
11553: PUSH
11554: LD_INT 108
11556: PUSH
11557: LD_INT 116
11559: PUSH
11560: LD_INT 117
11562: PUSH
11563: LD_INT 118
11565: PUSH
11566: EMPTY
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: PUSH
11576: EMPTY
11577: LIST
11578: LIST
11579: ST_TO_ADDR
11580: GO 14563
11582: LD_INT 3
11584: DOUBLE
11585: EQUAL
11586: IFTRUE 11590
11588: GO 11678
11590: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
11591: LD_ADDR_VAR 0 2
11595: PUSH
11596: LD_INT 2
11598: PUSH
11599: LD_INT 4
11601: PUSH
11602: LD_INT 5
11604: PUSH
11605: LD_INT 11
11607: PUSH
11608: LD_INT 12
11610: PUSH
11611: LD_INT 15
11613: PUSH
11614: LD_INT 16
11616: PUSH
11617: LD_INT 22
11619: PUSH
11620: LD_INT 26
11622: PUSH
11623: LD_INT 36
11625: PUSH
11626: EMPTY
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: PUSH
11638: LD_INT 101
11640: PUSH
11641: LD_INT 102
11643: PUSH
11644: LD_INT 105
11646: PUSH
11647: LD_INT 106
11649: PUSH
11650: LD_INT 108
11652: PUSH
11653: LD_INT 116
11655: PUSH
11656: LD_INT 117
11658: PUSH
11659: LD_INT 118
11661: PUSH
11662: EMPTY
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: ST_TO_ADDR
11676: GO 14563
11678: LD_INT 4
11680: DOUBLE
11681: EQUAL
11682: IFTRUE 11686
11684: GO 11782
11686: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
11687: LD_ADDR_VAR 0 2
11691: PUSH
11692: LD_INT 2
11694: PUSH
11695: LD_INT 4
11697: PUSH
11698: LD_INT 5
11700: PUSH
11701: LD_INT 8
11703: PUSH
11704: LD_INT 11
11706: PUSH
11707: LD_INT 12
11709: PUSH
11710: LD_INT 15
11712: PUSH
11713: LD_INT 16
11715: PUSH
11716: LD_INT 22
11718: PUSH
11719: LD_INT 23
11721: PUSH
11722: LD_INT 26
11724: PUSH
11725: LD_INT 36
11727: PUSH
11728: EMPTY
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: PUSH
11742: LD_INT 101
11744: PUSH
11745: LD_INT 102
11747: PUSH
11748: LD_INT 105
11750: PUSH
11751: LD_INT 106
11753: PUSH
11754: LD_INT 108
11756: PUSH
11757: LD_INT 116
11759: PUSH
11760: LD_INT 117
11762: PUSH
11763: LD_INT 118
11765: PUSH
11766: EMPTY
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: PUSH
11776: EMPTY
11777: LIST
11778: LIST
11779: ST_TO_ADDR
11780: GO 14563
11782: LD_INT 5
11784: DOUBLE
11785: EQUAL
11786: IFTRUE 11790
11788: GO 11902
11790: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
11791: LD_ADDR_VAR 0 2
11795: PUSH
11796: LD_INT 2
11798: PUSH
11799: LD_INT 4
11801: PUSH
11802: LD_INT 5
11804: PUSH
11805: LD_INT 6
11807: PUSH
11808: LD_INT 8
11810: PUSH
11811: LD_INT 11
11813: PUSH
11814: LD_INT 12
11816: PUSH
11817: LD_INT 15
11819: PUSH
11820: LD_INT 16
11822: PUSH
11823: LD_INT 22
11825: PUSH
11826: LD_INT 23
11828: PUSH
11829: LD_INT 25
11831: PUSH
11832: LD_INT 26
11834: PUSH
11835: LD_INT 36
11837: PUSH
11838: EMPTY
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: PUSH
11854: LD_INT 101
11856: PUSH
11857: LD_INT 102
11859: PUSH
11860: LD_INT 105
11862: PUSH
11863: LD_INT 106
11865: PUSH
11866: LD_INT 108
11868: PUSH
11869: LD_INT 109
11871: PUSH
11872: LD_INT 112
11874: PUSH
11875: LD_INT 116
11877: PUSH
11878: LD_INT 117
11880: PUSH
11881: LD_INT 118
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: ST_TO_ADDR
11900: GO 14563
11902: LD_INT 6
11904: DOUBLE
11905: EQUAL
11906: IFTRUE 11910
11908: GO 12042
11910: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
11911: LD_ADDR_VAR 0 2
11915: PUSH
11916: LD_INT 2
11918: PUSH
11919: LD_INT 4
11921: PUSH
11922: LD_INT 5
11924: PUSH
11925: LD_INT 6
11927: PUSH
11928: LD_INT 8
11930: PUSH
11931: LD_INT 11
11933: PUSH
11934: LD_INT 12
11936: PUSH
11937: LD_INT 15
11939: PUSH
11940: LD_INT 16
11942: PUSH
11943: LD_INT 20
11945: PUSH
11946: LD_INT 21
11948: PUSH
11949: LD_INT 22
11951: PUSH
11952: LD_INT 23
11954: PUSH
11955: LD_INT 25
11957: PUSH
11958: LD_INT 26
11960: PUSH
11961: LD_INT 30
11963: PUSH
11964: LD_INT 31
11966: PUSH
11967: LD_INT 32
11969: PUSH
11970: LD_INT 36
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: PUSH
11994: LD_INT 101
11996: PUSH
11997: LD_INT 102
11999: PUSH
12000: LD_INT 105
12002: PUSH
12003: LD_INT 106
12005: PUSH
12006: LD_INT 108
12008: PUSH
12009: LD_INT 109
12011: PUSH
12012: LD_INT 112
12014: PUSH
12015: LD_INT 116
12017: PUSH
12018: LD_INT 117
12020: PUSH
12021: LD_INT 118
12023: PUSH
12024: EMPTY
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: ST_TO_ADDR
12040: GO 14563
12042: LD_INT 7
12044: DOUBLE
12045: EQUAL
12046: IFTRUE 12050
12048: GO 12162
12050: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12051: LD_ADDR_VAR 0 2
12055: PUSH
12056: LD_INT 2
12058: PUSH
12059: LD_INT 4
12061: PUSH
12062: LD_INT 5
12064: PUSH
12065: LD_INT 7
12067: PUSH
12068: LD_INT 11
12070: PUSH
12071: LD_INT 12
12073: PUSH
12074: LD_INT 15
12076: PUSH
12077: LD_INT 16
12079: PUSH
12080: LD_INT 20
12082: PUSH
12083: LD_INT 21
12085: PUSH
12086: LD_INT 22
12088: PUSH
12089: LD_INT 23
12091: PUSH
12092: LD_INT 25
12094: PUSH
12095: LD_INT 26
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: PUSH
12114: LD_INT 101
12116: PUSH
12117: LD_INT 102
12119: PUSH
12120: LD_INT 103
12122: PUSH
12123: LD_INT 105
12125: PUSH
12126: LD_INT 106
12128: PUSH
12129: LD_INT 108
12131: PUSH
12132: LD_INT 112
12134: PUSH
12135: LD_INT 116
12137: PUSH
12138: LD_INT 117
12140: PUSH
12141: LD_INT 118
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: ST_TO_ADDR
12160: GO 14563
12162: LD_INT 8
12164: DOUBLE
12165: EQUAL
12166: IFTRUE 12170
12168: GO 12310
12170: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12171: LD_ADDR_VAR 0 2
12175: PUSH
12176: LD_INT 2
12178: PUSH
12179: LD_INT 4
12181: PUSH
12182: LD_INT 5
12184: PUSH
12185: LD_INT 6
12187: PUSH
12188: LD_INT 7
12190: PUSH
12191: LD_INT 8
12193: PUSH
12194: LD_INT 11
12196: PUSH
12197: LD_INT 12
12199: PUSH
12200: LD_INT 15
12202: PUSH
12203: LD_INT 16
12205: PUSH
12206: LD_INT 20
12208: PUSH
12209: LD_INT 21
12211: PUSH
12212: LD_INT 22
12214: PUSH
12215: LD_INT 23
12217: PUSH
12218: LD_INT 25
12220: PUSH
12221: LD_INT 26
12223: PUSH
12224: LD_INT 30
12226: PUSH
12227: LD_INT 31
12229: PUSH
12230: LD_INT 32
12232: PUSH
12233: LD_INT 36
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: PUSH
12258: LD_INT 101
12260: PUSH
12261: LD_INT 102
12263: PUSH
12264: LD_INT 103
12266: PUSH
12267: LD_INT 105
12269: PUSH
12270: LD_INT 106
12272: PUSH
12273: LD_INT 108
12275: PUSH
12276: LD_INT 109
12278: PUSH
12279: LD_INT 112
12281: PUSH
12282: LD_INT 116
12284: PUSH
12285: LD_INT 117
12287: PUSH
12288: LD_INT 118
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: PUSH
12304: EMPTY
12305: LIST
12306: LIST
12307: ST_TO_ADDR
12308: GO 14563
12310: LD_INT 9
12312: DOUBLE
12313: EQUAL
12314: IFTRUE 12318
12316: GO 12466
12318: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
12319: LD_ADDR_VAR 0 2
12323: PUSH
12324: LD_INT 2
12326: PUSH
12327: LD_INT 4
12329: PUSH
12330: LD_INT 5
12332: PUSH
12333: LD_INT 6
12335: PUSH
12336: LD_INT 7
12338: PUSH
12339: LD_INT 8
12341: PUSH
12342: LD_INT 11
12344: PUSH
12345: LD_INT 12
12347: PUSH
12348: LD_INT 15
12350: PUSH
12351: LD_INT 16
12353: PUSH
12354: LD_INT 20
12356: PUSH
12357: LD_INT 21
12359: PUSH
12360: LD_INT 22
12362: PUSH
12363: LD_INT 23
12365: PUSH
12366: LD_INT 25
12368: PUSH
12369: LD_INT 26
12371: PUSH
12372: LD_INT 28
12374: PUSH
12375: LD_INT 30
12377: PUSH
12378: LD_INT 31
12380: PUSH
12381: LD_INT 32
12383: PUSH
12384: LD_INT 36
12386: PUSH
12387: EMPTY
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: LIST
12395: LIST
12396: LIST
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: PUSH
12410: LD_INT 101
12412: PUSH
12413: LD_INT 102
12415: PUSH
12416: LD_INT 103
12418: PUSH
12419: LD_INT 105
12421: PUSH
12422: LD_INT 106
12424: PUSH
12425: LD_INT 108
12427: PUSH
12428: LD_INT 109
12430: PUSH
12431: LD_INT 112
12433: PUSH
12434: LD_INT 114
12436: PUSH
12437: LD_INT 116
12439: PUSH
12440: LD_INT 117
12442: PUSH
12443: LD_INT 118
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: PUSH
12460: EMPTY
12461: LIST
12462: LIST
12463: ST_TO_ADDR
12464: GO 14563
12466: LD_INT 10
12468: DOUBLE
12469: EQUAL
12470: IFTRUE 12474
12472: GO 12670
12474: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
12475: LD_ADDR_VAR 0 2
12479: PUSH
12480: LD_INT 2
12482: PUSH
12483: LD_INT 4
12485: PUSH
12486: LD_INT 5
12488: PUSH
12489: LD_INT 6
12491: PUSH
12492: LD_INT 7
12494: PUSH
12495: LD_INT 8
12497: PUSH
12498: LD_INT 9
12500: PUSH
12501: LD_INT 10
12503: PUSH
12504: LD_INT 11
12506: PUSH
12507: LD_INT 12
12509: PUSH
12510: LD_INT 13
12512: PUSH
12513: LD_INT 14
12515: PUSH
12516: LD_INT 15
12518: PUSH
12519: LD_INT 16
12521: PUSH
12522: LD_INT 17
12524: PUSH
12525: LD_INT 18
12527: PUSH
12528: LD_INT 19
12530: PUSH
12531: LD_INT 20
12533: PUSH
12534: LD_INT 21
12536: PUSH
12537: LD_INT 22
12539: PUSH
12540: LD_INT 23
12542: PUSH
12543: LD_INT 24
12545: PUSH
12546: LD_INT 25
12548: PUSH
12549: LD_INT 26
12551: PUSH
12552: LD_INT 28
12554: PUSH
12555: LD_INT 30
12557: PUSH
12558: LD_INT 31
12560: PUSH
12561: LD_INT 32
12563: PUSH
12564: LD_INT 36
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: PUSH
12598: LD_INT 101
12600: PUSH
12601: LD_INT 102
12603: PUSH
12604: LD_INT 103
12606: PUSH
12607: LD_INT 104
12609: PUSH
12610: LD_INT 105
12612: PUSH
12613: LD_INT 106
12615: PUSH
12616: LD_INT 107
12618: PUSH
12619: LD_INT 108
12621: PUSH
12622: LD_INT 109
12624: PUSH
12625: LD_INT 110
12627: PUSH
12628: LD_INT 111
12630: PUSH
12631: LD_INT 112
12633: PUSH
12634: LD_INT 114
12636: PUSH
12637: LD_INT 116
12639: PUSH
12640: LD_INT 117
12642: PUSH
12643: LD_INT 118
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: PUSH
12664: EMPTY
12665: LIST
12666: LIST
12667: ST_TO_ADDR
12668: GO 14563
12670: LD_INT 11
12672: DOUBLE
12673: EQUAL
12674: IFTRUE 12678
12676: GO 12882
12678: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
12679: LD_ADDR_VAR 0 2
12683: PUSH
12684: LD_INT 2
12686: PUSH
12687: LD_INT 3
12689: PUSH
12690: LD_INT 4
12692: PUSH
12693: LD_INT 5
12695: PUSH
12696: LD_INT 6
12698: PUSH
12699: LD_INT 7
12701: PUSH
12702: LD_INT 8
12704: PUSH
12705: LD_INT 9
12707: PUSH
12708: LD_INT 10
12710: PUSH
12711: LD_INT 11
12713: PUSH
12714: LD_INT 12
12716: PUSH
12717: LD_INT 13
12719: PUSH
12720: LD_INT 14
12722: PUSH
12723: LD_INT 15
12725: PUSH
12726: LD_INT 16
12728: PUSH
12729: LD_INT 17
12731: PUSH
12732: LD_INT 18
12734: PUSH
12735: LD_INT 19
12737: PUSH
12738: LD_INT 20
12740: PUSH
12741: LD_INT 21
12743: PUSH
12744: LD_INT 22
12746: PUSH
12747: LD_INT 23
12749: PUSH
12750: LD_INT 24
12752: PUSH
12753: LD_INT 25
12755: PUSH
12756: LD_INT 26
12758: PUSH
12759: LD_INT 28
12761: PUSH
12762: LD_INT 30
12764: PUSH
12765: LD_INT 31
12767: PUSH
12768: LD_INT 32
12770: PUSH
12771: LD_INT 34
12773: PUSH
12774: LD_INT 36
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: PUSH
12810: LD_INT 101
12812: PUSH
12813: LD_INT 102
12815: PUSH
12816: LD_INT 103
12818: PUSH
12819: LD_INT 104
12821: PUSH
12822: LD_INT 105
12824: PUSH
12825: LD_INT 106
12827: PUSH
12828: LD_INT 107
12830: PUSH
12831: LD_INT 108
12833: PUSH
12834: LD_INT 109
12836: PUSH
12837: LD_INT 110
12839: PUSH
12840: LD_INT 111
12842: PUSH
12843: LD_INT 112
12845: PUSH
12846: LD_INT 114
12848: PUSH
12849: LD_INT 116
12851: PUSH
12852: LD_INT 117
12854: PUSH
12855: LD_INT 118
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: ST_TO_ADDR
12880: GO 14563
12882: LD_INT 12
12884: DOUBLE
12885: EQUAL
12886: IFTRUE 12890
12888: GO 13110
12890: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
12891: LD_ADDR_VAR 0 2
12895: PUSH
12896: LD_INT 1
12898: PUSH
12899: LD_INT 2
12901: PUSH
12902: LD_INT 3
12904: PUSH
12905: LD_INT 4
12907: PUSH
12908: LD_INT 5
12910: PUSH
12911: LD_INT 6
12913: PUSH
12914: LD_INT 7
12916: PUSH
12917: LD_INT 8
12919: PUSH
12920: LD_INT 9
12922: PUSH
12923: LD_INT 10
12925: PUSH
12926: LD_INT 11
12928: PUSH
12929: LD_INT 12
12931: PUSH
12932: LD_INT 13
12934: PUSH
12935: LD_INT 14
12937: PUSH
12938: LD_INT 15
12940: PUSH
12941: LD_INT 16
12943: PUSH
12944: LD_INT 17
12946: PUSH
12947: LD_INT 18
12949: PUSH
12950: LD_INT 19
12952: PUSH
12953: LD_INT 20
12955: PUSH
12956: LD_INT 21
12958: PUSH
12959: LD_INT 22
12961: PUSH
12962: LD_INT 23
12964: PUSH
12965: LD_INT 24
12967: PUSH
12968: LD_INT 25
12970: PUSH
12971: LD_INT 26
12973: PUSH
12974: LD_INT 27
12976: PUSH
12977: LD_INT 28
12979: PUSH
12980: LD_INT 30
12982: PUSH
12983: LD_INT 31
12985: PUSH
12986: LD_INT 32
12988: PUSH
12989: LD_INT 33
12991: PUSH
12992: LD_INT 34
12994: PUSH
12995: LD_INT 36
12997: PUSH
12998: EMPTY
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: PUSH
13034: LD_INT 101
13036: PUSH
13037: LD_INT 102
13039: PUSH
13040: LD_INT 103
13042: PUSH
13043: LD_INT 104
13045: PUSH
13046: LD_INT 105
13048: PUSH
13049: LD_INT 106
13051: PUSH
13052: LD_INT 107
13054: PUSH
13055: LD_INT 108
13057: PUSH
13058: LD_INT 109
13060: PUSH
13061: LD_INT 110
13063: PUSH
13064: LD_INT 111
13066: PUSH
13067: LD_INT 112
13069: PUSH
13070: LD_INT 113
13072: PUSH
13073: LD_INT 114
13075: PUSH
13076: LD_INT 116
13078: PUSH
13079: LD_INT 117
13081: PUSH
13082: LD_INT 118
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: PUSH
13104: EMPTY
13105: LIST
13106: LIST
13107: ST_TO_ADDR
13108: GO 14563
13110: LD_INT 13
13112: DOUBLE
13113: EQUAL
13114: IFTRUE 13118
13116: GO 13326
13118: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13119: LD_ADDR_VAR 0 2
13123: PUSH
13124: LD_INT 1
13126: PUSH
13127: LD_INT 2
13129: PUSH
13130: LD_INT 3
13132: PUSH
13133: LD_INT 4
13135: PUSH
13136: LD_INT 5
13138: PUSH
13139: LD_INT 8
13141: PUSH
13142: LD_INT 9
13144: PUSH
13145: LD_INT 10
13147: PUSH
13148: LD_INT 11
13150: PUSH
13151: LD_INT 12
13153: PUSH
13154: LD_INT 14
13156: PUSH
13157: LD_INT 15
13159: PUSH
13160: LD_INT 16
13162: PUSH
13163: LD_INT 17
13165: PUSH
13166: LD_INT 18
13168: PUSH
13169: LD_INT 19
13171: PUSH
13172: LD_INT 20
13174: PUSH
13175: LD_INT 21
13177: PUSH
13178: LD_INT 22
13180: PUSH
13181: LD_INT 23
13183: PUSH
13184: LD_INT 24
13186: PUSH
13187: LD_INT 25
13189: PUSH
13190: LD_INT 26
13192: PUSH
13193: LD_INT 27
13195: PUSH
13196: LD_INT 28
13198: PUSH
13199: LD_INT 30
13201: PUSH
13202: LD_INT 31
13204: PUSH
13205: LD_INT 32
13207: PUSH
13208: LD_INT 33
13210: PUSH
13211: LD_INT 34
13213: PUSH
13214: LD_INT 36
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: PUSH
13250: LD_INT 101
13252: PUSH
13253: LD_INT 102
13255: PUSH
13256: LD_INT 103
13258: PUSH
13259: LD_INT 104
13261: PUSH
13262: LD_INT 105
13264: PUSH
13265: LD_INT 106
13267: PUSH
13268: LD_INT 107
13270: PUSH
13271: LD_INT 108
13273: PUSH
13274: LD_INT 109
13276: PUSH
13277: LD_INT 110
13279: PUSH
13280: LD_INT 111
13282: PUSH
13283: LD_INT 112
13285: PUSH
13286: LD_INT 113
13288: PUSH
13289: LD_INT 114
13291: PUSH
13292: LD_INT 116
13294: PUSH
13295: LD_INT 117
13297: PUSH
13298: LD_INT 118
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: ST_TO_ADDR
13324: GO 14563
13326: LD_INT 14
13328: DOUBLE
13329: EQUAL
13330: IFTRUE 13334
13332: GO 13558
13334: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
13335: LD_ADDR_VAR 0 2
13339: PUSH
13340: LD_INT 1
13342: PUSH
13343: LD_INT 2
13345: PUSH
13346: LD_INT 3
13348: PUSH
13349: LD_INT 4
13351: PUSH
13352: LD_INT 5
13354: PUSH
13355: LD_INT 6
13357: PUSH
13358: LD_INT 7
13360: PUSH
13361: LD_INT 8
13363: PUSH
13364: LD_INT 9
13366: PUSH
13367: LD_INT 10
13369: PUSH
13370: LD_INT 11
13372: PUSH
13373: LD_INT 12
13375: PUSH
13376: LD_INT 13
13378: PUSH
13379: LD_INT 14
13381: PUSH
13382: LD_INT 15
13384: PUSH
13385: LD_INT 16
13387: PUSH
13388: LD_INT 17
13390: PUSH
13391: LD_INT 18
13393: PUSH
13394: LD_INT 19
13396: PUSH
13397: LD_INT 20
13399: PUSH
13400: LD_INT 21
13402: PUSH
13403: LD_INT 22
13405: PUSH
13406: LD_INT 23
13408: PUSH
13409: LD_INT 24
13411: PUSH
13412: LD_INT 25
13414: PUSH
13415: LD_INT 26
13417: PUSH
13418: LD_INT 27
13420: PUSH
13421: LD_INT 28
13423: PUSH
13424: LD_INT 29
13426: PUSH
13427: LD_INT 30
13429: PUSH
13430: LD_INT 31
13432: PUSH
13433: LD_INT 32
13435: PUSH
13436: LD_INT 33
13438: PUSH
13439: LD_INT 34
13441: PUSH
13442: LD_INT 36
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: PUSH
13482: LD_INT 101
13484: PUSH
13485: LD_INT 102
13487: PUSH
13488: LD_INT 103
13490: PUSH
13491: LD_INT 104
13493: PUSH
13494: LD_INT 105
13496: PUSH
13497: LD_INT 106
13499: PUSH
13500: LD_INT 107
13502: PUSH
13503: LD_INT 108
13505: PUSH
13506: LD_INT 109
13508: PUSH
13509: LD_INT 110
13511: PUSH
13512: LD_INT 111
13514: PUSH
13515: LD_INT 112
13517: PUSH
13518: LD_INT 113
13520: PUSH
13521: LD_INT 114
13523: PUSH
13524: LD_INT 116
13526: PUSH
13527: LD_INT 117
13529: PUSH
13530: LD_INT 118
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: ST_TO_ADDR
13556: GO 14563
13558: LD_INT 15
13560: DOUBLE
13561: EQUAL
13562: IFTRUE 13566
13564: GO 13790
13566: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
13567: LD_ADDR_VAR 0 2
13571: PUSH
13572: LD_INT 1
13574: PUSH
13575: LD_INT 2
13577: PUSH
13578: LD_INT 3
13580: PUSH
13581: LD_INT 4
13583: PUSH
13584: LD_INT 5
13586: PUSH
13587: LD_INT 6
13589: PUSH
13590: LD_INT 7
13592: PUSH
13593: LD_INT 8
13595: PUSH
13596: LD_INT 9
13598: PUSH
13599: LD_INT 10
13601: PUSH
13602: LD_INT 11
13604: PUSH
13605: LD_INT 12
13607: PUSH
13608: LD_INT 13
13610: PUSH
13611: LD_INT 14
13613: PUSH
13614: LD_INT 15
13616: PUSH
13617: LD_INT 16
13619: PUSH
13620: LD_INT 17
13622: PUSH
13623: LD_INT 18
13625: PUSH
13626: LD_INT 19
13628: PUSH
13629: LD_INT 20
13631: PUSH
13632: LD_INT 21
13634: PUSH
13635: LD_INT 22
13637: PUSH
13638: LD_INT 23
13640: PUSH
13641: LD_INT 24
13643: PUSH
13644: LD_INT 25
13646: PUSH
13647: LD_INT 26
13649: PUSH
13650: LD_INT 27
13652: PUSH
13653: LD_INT 28
13655: PUSH
13656: LD_INT 29
13658: PUSH
13659: LD_INT 30
13661: PUSH
13662: LD_INT 31
13664: PUSH
13665: LD_INT 32
13667: PUSH
13668: LD_INT 33
13670: PUSH
13671: LD_INT 34
13673: PUSH
13674: LD_INT 36
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: PUSH
13714: LD_INT 101
13716: PUSH
13717: LD_INT 102
13719: PUSH
13720: LD_INT 103
13722: PUSH
13723: LD_INT 104
13725: PUSH
13726: LD_INT 105
13728: PUSH
13729: LD_INT 106
13731: PUSH
13732: LD_INT 107
13734: PUSH
13735: LD_INT 108
13737: PUSH
13738: LD_INT 109
13740: PUSH
13741: LD_INT 110
13743: PUSH
13744: LD_INT 111
13746: PUSH
13747: LD_INT 112
13749: PUSH
13750: LD_INT 113
13752: PUSH
13753: LD_INT 114
13755: PUSH
13756: LD_INT 116
13758: PUSH
13759: LD_INT 117
13761: PUSH
13762: LD_INT 118
13764: PUSH
13765: EMPTY
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: PUSH
13784: EMPTY
13785: LIST
13786: LIST
13787: ST_TO_ADDR
13788: GO 14563
13790: LD_INT 16
13792: DOUBLE
13793: EQUAL
13794: IFTRUE 13798
13796: GO 13934
13798: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
13799: LD_ADDR_VAR 0 2
13803: PUSH
13804: LD_INT 2
13806: PUSH
13807: LD_INT 4
13809: PUSH
13810: LD_INT 5
13812: PUSH
13813: LD_INT 7
13815: PUSH
13816: LD_INT 11
13818: PUSH
13819: LD_INT 12
13821: PUSH
13822: LD_INT 15
13824: PUSH
13825: LD_INT 16
13827: PUSH
13828: LD_INT 20
13830: PUSH
13831: LD_INT 21
13833: PUSH
13834: LD_INT 22
13836: PUSH
13837: LD_INT 23
13839: PUSH
13840: LD_INT 25
13842: PUSH
13843: LD_INT 26
13845: PUSH
13846: LD_INT 30
13848: PUSH
13849: LD_INT 31
13851: PUSH
13852: LD_INT 32
13854: PUSH
13855: LD_INT 33
13857: PUSH
13858: LD_INT 34
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: PUSH
13882: LD_INT 101
13884: PUSH
13885: LD_INT 102
13887: PUSH
13888: LD_INT 103
13890: PUSH
13891: LD_INT 106
13893: PUSH
13894: LD_INT 108
13896: PUSH
13897: LD_INT 112
13899: PUSH
13900: LD_INT 113
13902: PUSH
13903: LD_INT 114
13905: PUSH
13906: LD_INT 116
13908: PUSH
13909: LD_INT 117
13911: PUSH
13912: LD_INT 118
13914: PUSH
13915: EMPTY
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: PUSH
13928: EMPTY
13929: LIST
13930: LIST
13931: ST_TO_ADDR
13932: GO 14563
13934: LD_INT 17
13936: DOUBLE
13937: EQUAL
13938: IFTRUE 13942
13940: GO 14166
13942: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
13943: LD_ADDR_VAR 0 2
13947: PUSH
13948: LD_INT 1
13950: PUSH
13951: LD_INT 2
13953: PUSH
13954: LD_INT 3
13956: PUSH
13957: LD_INT 4
13959: PUSH
13960: LD_INT 5
13962: PUSH
13963: LD_INT 6
13965: PUSH
13966: LD_INT 7
13968: PUSH
13969: LD_INT 8
13971: PUSH
13972: LD_INT 9
13974: PUSH
13975: LD_INT 10
13977: PUSH
13978: LD_INT 11
13980: PUSH
13981: LD_INT 12
13983: PUSH
13984: LD_INT 13
13986: PUSH
13987: LD_INT 14
13989: PUSH
13990: LD_INT 15
13992: PUSH
13993: LD_INT 16
13995: PUSH
13996: LD_INT 17
13998: PUSH
13999: LD_INT 18
14001: PUSH
14002: LD_INT 19
14004: PUSH
14005: LD_INT 20
14007: PUSH
14008: LD_INT 21
14010: PUSH
14011: LD_INT 22
14013: PUSH
14014: LD_INT 23
14016: PUSH
14017: LD_INT 24
14019: PUSH
14020: LD_INT 25
14022: PUSH
14023: LD_INT 26
14025: PUSH
14026: LD_INT 27
14028: PUSH
14029: LD_INT 28
14031: PUSH
14032: LD_INT 29
14034: PUSH
14035: LD_INT 30
14037: PUSH
14038: LD_INT 31
14040: PUSH
14041: LD_INT 32
14043: PUSH
14044: LD_INT 33
14046: PUSH
14047: LD_INT 34
14049: PUSH
14050: LD_INT 36
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: PUSH
14090: LD_INT 101
14092: PUSH
14093: LD_INT 102
14095: PUSH
14096: LD_INT 103
14098: PUSH
14099: LD_INT 104
14101: PUSH
14102: LD_INT 105
14104: PUSH
14105: LD_INT 106
14107: PUSH
14108: LD_INT 107
14110: PUSH
14111: LD_INT 108
14113: PUSH
14114: LD_INT 109
14116: PUSH
14117: LD_INT 110
14119: PUSH
14120: LD_INT 111
14122: PUSH
14123: LD_INT 112
14125: PUSH
14126: LD_INT 113
14128: PUSH
14129: LD_INT 114
14131: PUSH
14132: LD_INT 116
14134: PUSH
14135: LD_INT 117
14137: PUSH
14138: LD_INT 118
14140: PUSH
14141: EMPTY
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: ST_TO_ADDR
14164: GO 14563
14166: LD_INT 18
14168: DOUBLE
14169: EQUAL
14170: IFTRUE 14174
14172: GO 14322
14174: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14175: LD_ADDR_VAR 0 2
14179: PUSH
14180: LD_INT 2
14182: PUSH
14183: LD_INT 4
14185: PUSH
14186: LD_INT 5
14188: PUSH
14189: LD_INT 7
14191: PUSH
14192: LD_INT 11
14194: PUSH
14195: LD_INT 12
14197: PUSH
14198: LD_INT 15
14200: PUSH
14201: LD_INT 16
14203: PUSH
14204: LD_INT 20
14206: PUSH
14207: LD_INT 21
14209: PUSH
14210: LD_INT 22
14212: PUSH
14213: LD_INT 23
14215: PUSH
14216: LD_INT 25
14218: PUSH
14219: LD_INT 26
14221: PUSH
14222: LD_INT 30
14224: PUSH
14225: LD_INT 31
14227: PUSH
14228: LD_INT 32
14230: PUSH
14231: LD_INT 33
14233: PUSH
14234: LD_INT 34
14236: PUSH
14237: LD_INT 35
14239: PUSH
14240: LD_INT 36
14242: PUSH
14243: EMPTY
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: PUSH
14266: LD_INT 101
14268: PUSH
14269: LD_INT 102
14271: PUSH
14272: LD_INT 103
14274: PUSH
14275: LD_INT 106
14277: PUSH
14278: LD_INT 108
14280: PUSH
14281: LD_INT 112
14283: PUSH
14284: LD_INT 113
14286: PUSH
14287: LD_INT 114
14289: PUSH
14290: LD_INT 115
14292: PUSH
14293: LD_INT 116
14295: PUSH
14296: LD_INT 117
14298: PUSH
14299: LD_INT 118
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: ST_TO_ADDR
14320: GO 14563
14322: LD_INT 19
14324: DOUBLE
14325: EQUAL
14326: IFTRUE 14330
14328: GO 14562
14330: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
14331: LD_ADDR_VAR 0 2
14335: PUSH
14336: LD_INT 1
14338: PUSH
14339: LD_INT 2
14341: PUSH
14342: LD_INT 3
14344: PUSH
14345: LD_INT 4
14347: PUSH
14348: LD_INT 5
14350: PUSH
14351: LD_INT 6
14353: PUSH
14354: LD_INT 7
14356: PUSH
14357: LD_INT 8
14359: PUSH
14360: LD_INT 9
14362: PUSH
14363: LD_INT 10
14365: PUSH
14366: LD_INT 11
14368: PUSH
14369: LD_INT 12
14371: PUSH
14372: LD_INT 13
14374: PUSH
14375: LD_INT 14
14377: PUSH
14378: LD_INT 15
14380: PUSH
14381: LD_INT 16
14383: PUSH
14384: LD_INT 17
14386: PUSH
14387: LD_INT 18
14389: PUSH
14390: LD_INT 19
14392: PUSH
14393: LD_INT 20
14395: PUSH
14396: LD_INT 21
14398: PUSH
14399: LD_INT 22
14401: PUSH
14402: LD_INT 23
14404: PUSH
14405: LD_INT 24
14407: PUSH
14408: LD_INT 25
14410: PUSH
14411: LD_INT 26
14413: PUSH
14414: LD_INT 27
14416: PUSH
14417: LD_INT 28
14419: PUSH
14420: LD_INT 29
14422: PUSH
14423: LD_INT 30
14425: PUSH
14426: LD_INT 31
14428: PUSH
14429: LD_INT 32
14431: PUSH
14432: LD_INT 33
14434: PUSH
14435: LD_INT 34
14437: PUSH
14438: LD_INT 35
14440: PUSH
14441: LD_INT 36
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: PUSH
14482: LD_INT 101
14484: PUSH
14485: LD_INT 102
14487: PUSH
14488: LD_INT 103
14490: PUSH
14491: LD_INT 104
14493: PUSH
14494: LD_INT 105
14496: PUSH
14497: LD_INT 106
14499: PUSH
14500: LD_INT 107
14502: PUSH
14503: LD_INT 108
14505: PUSH
14506: LD_INT 109
14508: PUSH
14509: LD_INT 110
14511: PUSH
14512: LD_INT 111
14514: PUSH
14515: LD_INT 112
14517: PUSH
14518: LD_INT 113
14520: PUSH
14521: LD_INT 114
14523: PUSH
14524: LD_INT 115
14526: PUSH
14527: LD_INT 116
14529: PUSH
14530: LD_INT 117
14532: PUSH
14533: LD_INT 118
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: PUSH
14556: EMPTY
14557: LIST
14558: LIST
14559: ST_TO_ADDR
14560: GO 14563
14562: POP
// end else
14563: GO 14794
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
14565: LD_ADDR_VAR 0 2
14569: PUSH
14570: LD_INT 1
14572: PUSH
14573: LD_INT 2
14575: PUSH
14576: LD_INT 3
14578: PUSH
14579: LD_INT 4
14581: PUSH
14582: LD_INT 5
14584: PUSH
14585: LD_INT 6
14587: PUSH
14588: LD_INT 7
14590: PUSH
14591: LD_INT 8
14593: PUSH
14594: LD_INT 9
14596: PUSH
14597: LD_INT 10
14599: PUSH
14600: LD_INT 11
14602: PUSH
14603: LD_INT 12
14605: PUSH
14606: LD_INT 13
14608: PUSH
14609: LD_INT 14
14611: PUSH
14612: LD_INT 15
14614: PUSH
14615: LD_INT 16
14617: PUSH
14618: LD_INT 17
14620: PUSH
14621: LD_INT 18
14623: PUSH
14624: LD_INT 19
14626: PUSH
14627: LD_INT 20
14629: PUSH
14630: LD_INT 21
14632: PUSH
14633: LD_INT 22
14635: PUSH
14636: LD_INT 23
14638: PUSH
14639: LD_INT 24
14641: PUSH
14642: LD_INT 25
14644: PUSH
14645: LD_INT 26
14647: PUSH
14648: LD_INT 27
14650: PUSH
14651: LD_INT 28
14653: PUSH
14654: LD_INT 29
14656: PUSH
14657: LD_INT 30
14659: PUSH
14660: LD_INT 31
14662: PUSH
14663: LD_INT 32
14665: PUSH
14666: LD_INT 33
14668: PUSH
14669: LD_INT 34
14671: PUSH
14672: LD_INT 35
14674: PUSH
14675: LD_INT 36
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: PUSH
14716: LD_INT 101
14718: PUSH
14719: LD_INT 102
14721: PUSH
14722: LD_INT 103
14724: PUSH
14725: LD_INT 104
14727: PUSH
14728: LD_INT 105
14730: PUSH
14731: LD_INT 106
14733: PUSH
14734: LD_INT 107
14736: PUSH
14737: LD_INT 108
14739: PUSH
14740: LD_INT 109
14742: PUSH
14743: LD_INT 110
14745: PUSH
14746: LD_INT 111
14748: PUSH
14749: LD_INT 112
14751: PUSH
14752: LD_INT 113
14754: PUSH
14755: LD_INT 114
14757: PUSH
14758: LD_INT 115
14760: PUSH
14761: LD_INT 116
14763: PUSH
14764: LD_INT 117
14766: PUSH
14767: LD_INT 118
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: PUSH
14790: EMPTY
14791: LIST
14792: LIST
14793: ST_TO_ADDR
// if result then
14794: LD_VAR 0 2
14798: IFFALSE 15584
// begin normal :=  ;
14800: LD_ADDR_VAR 0 5
14804: PUSH
14805: LD_STRING 
14807: ST_TO_ADDR
// hardcore :=  ;
14808: LD_ADDR_VAR 0 6
14812: PUSH
14813: LD_STRING 
14815: ST_TO_ADDR
// active :=  ;
14816: LD_ADDR_VAR 0 7
14820: PUSH
14821: LD_STRING 
14823: ST_TO_ADDR
// for i = 1 to normalCounter do
14824: LD_ADDR_VAR 0 8
14828: PUSH
14829: DOUBLE
14830: LD_INT 1
14832: DEC
14833: ST_TO_ADDR
14834: LD_EXP 27
14838: PUSH
14839: FOR_TO
14840: IFFALSE 14941
// begin tmp := 0 ;
14842: LD_ADDR_VAR 0 3
14846: PUSH
14847: LD_STRING 0
14849: ST_TO_ADDR
// if result [ 1 ] then
14850: LD_VAR 0 2
14854: PUSH
14855: LD_INT 1
14857: ARRAY
14858: IFFALSE 14923
// if result [ 1 ] [ 1 ] = i then
14860: LD_VAR 0 2
14864: PUSH
14865: LD_INT 1
14867: ARRAY
14868: PUSH
14869: LD_INT 1
14871: ARRAY
14872: PUSH
14873: LD_VAR 0 8
14877: EQUAL
14878: IFFALSE 14923
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14880: LD_ADDR_VAR 0 2
14884: PUSH
14885: LD_VAR 0 2
14889: PPUSH
14890: LD_INT 1
14892: PPUSH
14893: LD_VAR 0 2
14897: PUSH
14898: LD_INT 1
14900: ARRAY
14901: PPUSH
14902: LD_INT 1
14904: PPUSH
14905: CALL_OW 3
14909: PPUSH
14910: CALL_OW 1
14914: ST_TO_ADDR
// tmp := 1 ;
14915: LD_ADDR_VAR 0 3
14919: PUSH
14920: LD_STRING 1
14922: ST_TO_ADDR
// end ; normal := normal & tmp ;
14923: LD_ADDR_VAR 0 5
14927: PUSH
14928: LD_VAR 0 5
14932: PUSH
14933: LD_VAR 0 3
14937: STR
14938: ST_TO_ADDR
// end ;
14939: GO 14839
14941: POP
14942: POP
// for i = 1 to hardcoreCounter do
14943: LD_ADDR_VAR 0 8
14947: PUSH
14948: DOUBLE
14949: LD_INT 1
14951: DEC
14952: ST_TO_ADDR
14953: LD_EXP 28
14957: PUSH
14958: FOR_TO
14959: IFFALSE 15064
// begin tmp := 0 ;
14961: LD_ADDR_VAR 0 3
14965: PUSH
14966: LD_STRING 0
14968: ST_TO_ADDR
// if result [ 2 ] then
14969: LD_VAR 0 2
14973: PUSH
14974: LD_INT 2
14976: ARRAY
14977: IFFALSE 15046
// if result [ 2 ] [ 1 ] = 100 + i then
14979: LD_VAR 0 2
14983: PUSH
14984: LD_INT 2
14986: ARRAY
14987: PUSH
14988: LD_INT 1
14990: ARRAY
14991: PUSH
14992: LD_INT 100
14994: PUSH
14995: LD_VAR 0 8
14999: PLUS
15000: EQUAL
15001: IFFALSE 15046
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15003: LD_ADDR_VAR 0 2
15007: PUSH
15008: LD_VAR 0 2
15012: PPUSH
15013: LD_INT 2
15015: PPUSH
15016: LD_VAR 0 2
15020: PUSH
15021: LD_INT 2
15023: ARRAY
15024: PPUSH
15025: LD_INT 1
15027: PPUSH
15028: CALL_OW 3
15032: PPUSH
15033: CALL_OW 1
15037: ST_TO_ADDR
// tmp := 1 ;
15038: LD_ADDR_VAR 0 3
15042: PUSH
15043: LD_STRING 1
15045: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15046: LD_ADDR_VAR 0 6
15050: PUSH
15051: LD_VAR 0 6
15055: PUSH
15056: LD_VAR 0 3
15060: STR
15061: ST_TO_ADDR
// end ;
15062: GO 14958
15064: POP
15065: POP
// if isGameLoad then
15066: LD_VAR 0 1
15070: IFFALSE 15545
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15072: LD_ADDR_VAR 0 4
15076: PUSH
15077: LD_EXP 31
15081: PUSH
15082: LD_EXP 30
15086: PUSH
15087: LD_EXP 32
15091: PUSH
15092: LD_EXP 29
15096: PUSH
15097: LD_EXP 33
15101: PUSH
15102: LD_EXP 34
15106: PUSH
15107: LD_EXP 35
15111: PUSH
15112: LD_EXP 36
15116: PUSH
15117: LD_EXP 37
15121: PUSH
15122: LD_EXP 38
15126: PUSH
15127: LD_EXP 39
15131: PUSH
15132: LD_EXP 40
15136: PUSH
15137: LD_EXP 41
15141: PUSH
15142: LD_EXP 42
15146: PUSH
15147: LD_EXP 50
15151: PUSH
15152: LD_EXP 51
15156: PUSH
15157: LD_EXP 52
15161: PUSH
15162: LD_EXP 53
15166: PUSH
15167: LD_EXP 55
15171: PUSH
15172: LD_EXP 56
15176: PUSH
15177: LD_EXP 57
15181: PUSH
15182: LD_EXP 60
15186: PUSH
15187: LD_EXP 62
15191: PUSH
15192: LD_EXP 63
15196: PUSH
15197: LD_EXP 64
15201: PUSH
15202: LD_EXP 66
15206: PUSH
15207: LD_EXP 67
15211: PUSH
15212: LD_EXP 70
15216: PUSH
15217: LD_EXP 71
15221: PUSH
15222: LD_EXP 72
15226: PUSH
15227: LD_EXP 73
15231: PUSH
15232: LD_EXP 74
15236: PUSH
15237: LD_EXP 75
15241: PUSH
15242: LD_EXP 76
15246: PUSH
15247: LD_EXP 77
15251: PUSH
15252: LD_EXP 78
15256: PUSH
15257: LD_EXP 43
15261: PUSH
15262: LD_EXP 44
15266: PUSH
15267: LD_EXP 47
15271: PUSH
15272: LD_EXP 48
15276: PUSH
15277: LD_EXP 49
15281: PUSH
15282: LD_EXP 45
15286: PUSH
15287: LD_EXP 46
15291: PUSH
15292: LD_EXP 54
15296: PUSH
15297: LD_EXP 58
15301: PUSH
15302: LD_EXP 59
15306: PUSH
15307: LD_EXP 61
15311: PUSH
15312: LD_EXP 65
15316: PUSH
15317: LD_EXP 68
15321: PUSH
15322: LD_EXP 69
15326: PUSH
15327: LD_EXP 79
15331: PUSH
15332: LD_EXP 80
15336: PUSH
15337: LD_EXP 81
15341: PUSH
15342: LD_EXP 82
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: ST_TO_ADDR
// tmp :=  ;
15403: LD_ADDR_VAR 0 3
15407: PUSH
15408: LD_STRING 
15410: ST_TO_ADDR
// for i = 1 to normalCounter do
15411: LD_ADDR_VAR 0 8
15415: PUSH
15416: DOUBLE
15417: LD_INT 1
15419: DEC
15420: ST_TO_ADDR
15421: LD_EXP 27
15425: PUSH
15426: FOR_TO
15427: IFFALSE 15463
// begin if flags [ i ] then
15429: LD_VAR 0 4
15433: PUSH
15434: LD_VAR 0 8
15438: ARRAY
15439: IFFALSE 15461
// tmp := tmp & i & ; ;
15441: LD_ADDR_VAR 0 3
15445: PUSH
15446: LD_VAR 0 3
15450: PUSH
15451: LD_VAR 0 8
15455: STR
15456: PUSH
15457: LD_STRING ;
15459: STR
15460: ST_TO_ADDR
// end ;
15461: GO 15426
15463: POP
15464: POP
// for i = 1 to hardcoreCounter do
15465: LD_ADDR_VAR 0 8
15469: PUSH
15470: DOUBLE
15471: LD_INT 1
15473: DEC
15474: ST_TO_ADDR
15475: LD_EXP 28
15479: PUSH
15480: FOR_TO
15481: IFFALSE 15527
// begin if flags [ normalCounter + i ] then
15483: LD_VAR 0 4
15487: PUSH
15488: LD_EXP 27
15492: PUSH
15493: LD_VAR 0 8
15497: PLUS
15498: ARRAY
15499: IFFALSE 15525
// tmp := tmp & ( 100 + i ) & ; ;
15501: LD_ADDR_VAR 0 3
15505: PUSH
15506: LD_VAR 0 3
15510: PUSH
15511: LD_INT 100
15513: PUSH
15514: LD_VAR 0 8
15518: PLUS
15519: STR
15520: PUSH
15521: LD_STRING ;
15523: STR
15524: ST_TO_ADDR
// end ;
15525: GO 15480
15527: POP
15528: POP
// if tmp then
15529: LD_VAR 0 3
15533: IFFALSE 15545
// active := tmp ;
15535: LD_ADDR_VAR 0 7
15539: PUSH
15540: LD_VAR 0 3
15544: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
15545: LD_STRING getStreamItemsFromMission("
15547: PUSH
15548: LD_VAR 0 5
15552: STR
15553: PUSH
15554: LD_STRING ","
15556: STR
15557: PUSH
15558: LD_VAR 0 6
15562: STR
15563: PUSH
15564: LD_STRING ","
15566: STR
15567: PUSH
15568: LD_VAR 0 7
15572: STR
15573: PUSH
15574: LD_STRING ")
15576: STR
15577: PPUSH
15578: CALL_OW 559
// end else
15582: GO 15591
// ToLua ( getStreamItemsFromMission("","","") ) ;
15584: LD_STRING getStreamItemsFromMission("","","")
15586: PPUSH
15587: CALL_OW 559
// end ;
15591: LD_VAR 0 2
15595: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15596: LD_EXP 26
15600: IFFALSE 15608
15602: PUSH
15603: LD_EXP 31
15607: AND
15608: IFFALSE 15732
15610: GO 15612
15612: DISABLE
15613: LD_INT 0
15615: PPUSH
15616: PPUSH
// begin enable ;
15617: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15618: LD_ADDR_VAR 0 2
15622: PUSH
15623: LD_INT 22
15625: PUSH
15626: LD_OWVAR 2
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: PUSH
15635: LD_INT 2
15637: PUSH
15638: LD_INT 34
15640: PUSH
15641: LD_INT 7
15643: PUSH
15644: EMPTY
15645: LIST
15646: LIST
15647: PUSH
15648: LD_INT 34
15650: PUSH
15651: LD_INT 45
15653: PUSH
15654: EMPTY
15655: LIST
15656: LIST
15657: PUSH
15658: LD_INT 34
15660: PUSH
15661: LD_INT 28
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: PUSH
15668: LD_INT 34
15670: PUSH
15671: LD_INT 47
15673: PUSH
15674: EMPTY
15675: LIST
15676: LIST
15677: PUSH
15678: EMPTY
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: PPUSH
15689: CALL_OW 69
15693: ST_TO_ADDR
// if not tmp then
15694: LD_VAR 0 2
15698: NOT
15699: IFFALSE 15703
// exit ;
15701: GO 15732
// for i in tmp do
15703: LD_ADDR_VAR 0 1
15707: PUSH
15708: LD_VAR 0 2
15712: PUSH
15713: FOR_IN
15714: IFFALSE 15730
// begin SetLives ( i , 0 ) ;
15716: LD_VAR 0 1
15720: PPUSH
15721: LD_INT 0
15723: PPUSH
15724: CALL_OW 234
// end ;
15728: GO 15713
15730: POP
15731: POP
// end ;
15732: PPOPN 2
15734: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15735: LD_EXP 26
15739: IFFALSE 15747
15741: PUSH
15742: LD_EXP 32
15746: AND
15747: IFFALSE 15831
15749: GO 15751
15751: DISABLE
15752: LD_INT 0
15754: PPUSH
15755: PPUSH
// begin enable ;
15756: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15757: LD_ADDR_VAR 0 2
15761: PUSH
15762: LD_INT 22
15764: PUSH
15765: LD_OWVAR 2
15769: PUSH
15770: EMPTY
15771: LIST
15772: LIST
15773: PUSH
15774: LD_INT 32
15776: PUSH
15777: LD_INT 3
15779: PUSH
15780: EMPTY
15781: LIST
15782: LIST
15783: PUSH
15784: EMPTY
15785: LIST
15786: LIST
15787: PPUSH
15788: CALL_OW 69
15792: ST_TO_ADDR
// if not tmp then
15793: LD_VAR 0 2
15797: NOT
15798: IFFALSE 15802
// exit ;
15800: GO 15831
// for i in tmp do
15802: LD_ADDR_VAR 0 1
15806: PUSH
15807: LD_VAR 0 2
15811: PUSH
15812: FOR_IN
15813: IFFALSE 15829
// begin SetLives ( i , 0 ) ;
15815: LD_VAR 0 1
15819: PPUSH
15820: LD_INT 0
15822: PPUSH
15823: CALL_OW 234
// end ;
15827: GO 15812
15829: POP
15830: POP
// end ;
15831: PPOPN 2
15833: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15834: LD_EXP 26
15838: IFFALSE 15846
15840: PUSH
15841: LD_EXP 29
15845: AND
15846: IFFALSE 15939
15848: GO 15850
15850: DISABLE
15851: LD_INT 0
15853: PPUSH
// begin enable ;
15854: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15855: LD_ADDR_VAR 0 1
15859: PUSH
15860: LD_INT 22
15862: PUSH
15863: LD_OWVAR 2
15867: PUSH
15868: EMPTY
15869: LIST
15870: LIST
15871: PUSH
15872: LD_INT 2
15874: PUSH
15875: LD_INT 25
15877: PUSH
15878: LD_INT 5
15880: PUSH
15881: EMPTY
15882: LIST
15883: LIST
15884: PUSH
15885: LD_INT 25
15887: PUSH
15888: LD_INT 9
15890: PUSH
15891: EMPTY
15892: LIST
15893: LIST
15894: PUSH
15895: LD_INT 25
15897: PUSH
15898: LD_INT 8
15900: PUSH
15901: EMPTY
15902: LIST
15903: LIST
15904: PUSH
15905: EMPTY
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: PPUSH
15915: CALL_OW 69
15919: PUSH
15920: FOR_IN
15921: IFFALSE 15937
// begin SetClass ( i , 1 ) ;
15923: LD_VAR 0 1
15927: PPUSH
15928: LD_INT 1
15930: PPUSH
15931: CALL_OW 336
// end ;
15935: GO 15920
15937: POP
15938: POP
// end ;
15939: PPOPN 1
15941: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15942: LD_EXP 26
15946: IFFALSE 15954
15948: PUSH
15949: LD_EXP 30
15953: AND
15954: IFFALSE 15966
15956: PUSH
15957: LD_OWVAR 65
15961: PUSH
15962: LD_INT 7
15964: LESS
15965: AND
15966: IFFALSE 15980
15968: GO 15970
15970: DISABLE
// begin enable ;
15971: ENABLE
// game_speed := 7 ;
15972: LD_ADDR_OWVAR 65
15976: PUSH
15977: LD_INT 7
15979: ST_TO_ADDR
// end ;
15980: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15981: LD_EXP 26
15985: IFFALSE 15993
15987: PUSH
15988: LD_EXP 33
15992: AND
15993: IFFALSE 16195
15995: GO 15997
15997: DISABLE
15998: LD_INT 0
16000: PPUSH
16001: PPUSH
16002: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16003: LD_ADDR_VAR 0 3
16007: PUSH
16008: LD_INT 81
16010: PUSH
16011: LD_OWVAR 2
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: PUSH
16020: LD_INT 21
16022: PUSH
16023: LD_INT 1
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: PPUSH
16034: CALL_OW 69
16038: ST_TO_ADDR
// if not tmp then
16039: LD_VAR 0 3
16043: NOT
16044: IFFALSE 16048
// exit ;
16046: GO 16195
// if tmp > 5 then
16048: LD_VAR 0 3
16052: PUSH
16053: LD_INT 5
16055: GREATER
16056: IFFALSE 16068
// k := 5 else
16058: LD_ADDR_VAR 0 2
16062: PUSH
16063: LD_INT 5
16065: ST_TO_ADDR
16066: GO 16078
// k := tmp ;
16068: LD_ADDR_VAR 0 2
16072: PUSH
16073: LD_VAR 0 3
16077: ST_TO_ADDR
// for i := 1 to k do
16078: LD_ADDR_VAR 0 1
16082: PUSH
16083: DOUBLE
16084: LD_INT 1
16086: DEC
16087: ST_TO_ADDR
16088: LD_VAR 0 2
16092: PUSH
16093: FOR_TO
16094: IFFALSE 16193
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16096: LD_VAR 0 3
16100: PUSH
16101: LD_VAR 0 1
16105: ARRAY
16106: PPUSH
16107: LD_VAR 0 1
16111: PUSH
16112: LD_INT 4
16114: MOD
16115: PUSH
16116: LD_INT 1
16118: PLUS
16119: PPUSH
16120: CALL_OW 259
16124: PUSH
16125: LD_INT 10
16127: LESS
16128: IFFALSE 16191
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16130: LD_VAR 0 3
16134: PUSH
16135: LD_VAR 0 1
16139: ARRAY
16140: PPUSH
16141: LD_VAR 0 1
16145: PUSH
16146: LD_INT 4
16148: MOD
16149: PUSH
16150: LD_INT 1
16152: PLUS
16153: PPUSH
16154: LD_VAR 0 3
16158: PUSH
16159: LD_VAR 0 1
16163: ARRAY
16164: PPUSH
16165: LD_VAR 0 1
16169: PUSH
16170: LD_INT 4
16172: MOD
16173: PUSH
16174: LD_INT 1
16176: PLUS
16177: PPUSH
16178: CALL_OW 259
16182: PUSH
16183: LD_INT 1
16185: PLUS
16186: PPUSH
16187: CALL_OW 237
16191: GO 16093
16193: POP
16194: POP
// end ;
16195: PPOPN 3
16197: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16198: LD_EXP 26
16202: IFFALSE 16210
16204: PUSH
16205: LD_EXP 34
16209: AND
16210: IFFALSE 16230
16212: GO 16214
16214: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16215: LD_INT 4
16217: PPUSH
16218: LD_OWVAR 2
16222: PPUSH
16223: LD_INT 0
16225: PPUSH
16226: CALL_OW 324
16230: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16231: LD_EXP 26
16235: IFFALSE 16243
16237: PUSH
16238: LD_EXP 63
16242: AND
16243: IFFALSE 16263
16245: GO 16247
16247: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16248: LD_INT 19
16250: PPUSH
16251: LD_OWVAR 2
16255: PPUSH
16256: LD_INT 0
16258: PPUSH
16259: CALL_OW 324
16263: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16264: LD_EXP 26
16268: IFFALSE 16276
16270: PUSH
16271: LD_EXP 35
16275: AND
16276: IFFALSE 16378
16278: GO 16280
16280: DISABLE
16281: LD_INT 0
16283: PPUSH
16284: PPUSH
// begin enable ;
16285: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16286: LD_ADDR_VAR 0 2
16290: PUSH
16291: LD_INT 22
16293: PUSH
16294: LD_OWVAR 2
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: PUSH
16303: LD_INT 2
16305: PUSH
16306: LD_INT 34
16308: PUSH
16309: LD_INT 11
16311: PUSH
16312: EMPTY
16313: LIST
16314: LIST
16315: PUSH
16316: LD_INT 34
16318: PUSH
16319: LD_INT 30
16321: PUSH
16322: EMPTY
16323: LIST
16324: LIST
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: LIST
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: PPUSH
16335: CALL_OW 69
16339: ST_TO_ADDR
// if not tmp then
16340: LD_VAR 0 2
16344: NOT
16345: IFFALSE 16349
// exit ;
16347: GO 16378
// for i in tmp do
16349: LD_ADDR_VAR 0 1
16353: PUSH
16354: LD_VAR 0 2
16358: PUSH
16359: FOR_IN
16360: IFFALSE 16376
// begin SetLives ( i , 0 ) ;
16362: LD_VAR 0 1
16366: PPUSH
16367: LD_INT 0
16369: PPUSH
16370: CALL_OW 234
// end ;
16374: GO 16359
16376: POP
16377: POP
// end ;
16378: PPOPN 2
16380: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16381: LD_EXP 26
16385: IFFALSE 16393
16387: PUSH
16388: LD_EXP 36
16392: AND
16393: IFFALSE 16413
16395: GO 16397
16397: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16398: LD_INT 32
16400: PPUSH
16401: LD_OWVAR 2
16405: PPUSH
16406: LD_INT 0
16408: PPUSH
16409: CALL_OW 324
16413: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16414: LD_EXP 26
16418: IFFALSE 16426
16420: PUSH
16421: LD_EXP 37
16425: AND
16426: IFFALSE 16609
16428: GO 16430
16430: DISABLE
16431: LD_INT 0
16433: PPUSH
16434: PPUSH
16435: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16436: LD_ADDR_VAR 0 2
16440: PUSH
16441: LD_INT 22
16443: PUSH
16444: LD_OWVAR 2
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: PUSH
16453: LD_INT 33
16455: PUSH
16456: LD_INT 3
16458: PUSH
16459: EMPTY
16460: LIST
16461: LIST
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: PPUSH
16467: CALL_OW 69
16471: ST_TO_ADDR
// if not tmp then
16472: LD_VAR 0 2
16476: NOT
16477: IFFALSE 16481
// exit ;
16479: GO 16609
// side := 0 ;
16481: LD_ADDR_VAR 0 3
16485: PUSH
16486: LD_INT 0
16488: ST_TO_ADDR
// for i := 1 to 8 do
16489: LD_ADDR_VAR 0 1
16493: PUSH
16494: DOUBLE
16495: LD_INT 1
16497: DEC
16498: ST_TO_ADDR
16499: LD_INT 8
16501: PUSH
16502: FOR_TO
16503: IFFALSE 16553
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16505: LD_OWVAR 2
16509: PUSH
16510: LD_VAR 0 1
16514: NONEQUAL
16515: IFFALSE 16537
16517: PUSH
16518: LD_OWVAR 2
16522: PPUSH
16523: LD_VAR 0 1
16527: PPUSH
16528: CALL_OW 81
16532: PUSH
16533: LD_INT 2
16535: EQUAL
16536: AND
16537: IFFALSE 16551
// begin side := i ;
16539: LD_ADDR_VAR 0 3
16543: PUSH
16544: LD_VAR 0 1
16548: ST_TO_ADDR
// break ;
16549: GO 16553
// end ;
16551: GO 16502
16553: POP
16554: POP
// if not side then
16555: LD_VAR 0 3
16559: NOT
16560: IFFALSE 16564
// exit ;
16562: GO 16609
// for i := 1 to tmp do
16564: LD_ADDR_VAR 0 1
16568: PUSH
16569: DOUBLE
16570: LD_INT 1
16572: DEC
16573: ST_TO_ADDR
16574: LD_VAR 0 2
16578: PUSH
16579: FOR_TO
16580: IFFALSE 16607
// if Prob ( 60 ) then
16582: LD_INT 60
16584: PPUSH
16585: CALL_OW 13
16589: IFFALSE 16605
// SetSide ( i , side ) ;
16591: LD_VAR 0 1
16595: PPUSH
16596: LD_VAR 0 3
16600: PPUSH
16601: CALL_OW 235
16605: GO 16579
16607: POP
16608: POP
// end ;
16609: PPOPN 3
16611: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16612: LD_EXP 26
16616: IFFALSE 16624
16618: PUSH
16619: LD_EXP 39
16623: AND
16624: IFFALSE 16743
16626: GO 16628
16628: DISABLE
16629: LD_INT 0
16631: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16632: LD_ADDR_VAR 0 1
16636: PUSH
16637: LD_INT 22
16639: PUSH
16640: LD_OWVAR 2
16644: PUSH
16645: EMPTY
16646: LIST
16647: LIST
16648: PUSH
16649: LD_INT 21
16651: PUSH
16652: LD_INT 1
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: PUSH
16659: LD_INT 3
16661: PUSH
16662: LD_INT 23
16664: PUSH
16665: LD_INT 0
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: LIST
16680: PPUSH
16681: CALL_OW 69
16685: PUSH
16686: FOR_IN
16687: IFFALSE 16741
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16689: LD_VAR 0 1
16693: PPUSH
16694: CALL_OW 257
16698: PUSH
16699: LD_INT 1
16701: PUSH
16702: LD_INT 2
16704: PUSH
16705: LD_INT 3
16707: PUSH
16708: LD_INT 4
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: IN
16717: IFFALSE 16739
// SetClass ( un , rand ( 1 , 4 ) ) ;
16719: LD_VAR 0 1
16723: PPUSH
16724: LD_INT 1
16726: PPUSH
16727: LD_INT 4
16729: PPUSH
16730: CALL_OW 12
16734: PPUSH
16735: CALL_OW 336
16739: GO 16686
16741: POP
16742: POP
// end ;
16743: PPOPN 1
16745: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16746: LD_EXP 26
16750: IFFALSE 16758
16752: PUSH
16753: LD_EXP 38
16757: AND
16758: IFFALSE 16837
16760: GO 16762
16762: DISABLE
16763: LD_INT 0
16765: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16766: LD_ADDR_VAR 0 1
16770: PUSH
16771: LD_INT 22
16773: PUSH
16774: LD_OWVAR 2
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: PUSH
16783: LD_INT 21
16785: PUSH
16786: LD_INT 3
16788: PUSH
16789: EMPTY
16790: LIST
16791: LIST
16792: PUSH
16793: EMPTY
16794: LIST
16795: LIST
16796: PPUSH
16797: CALL_OW 69
16801: ST_TO_ADDR
// if not tmp then
16802: LD_VAR 0 1
16806: NOT
16807: IFFALSE 16811
// exit ;
16809: GO 16837
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16811: LD_VAR 0 1
16815: PUSH
16816: LD_INT 1
16818: PPUSH
16819: LD_VAR 0 1
16823: PPUSH
16824: CALL_OW 12
16828: ARRAY
16829: PPUSH
16830: LD_INT 100
16832: PPUSH
16833: CALL_OW 234
// end ;
16837: PPOPN 1
16839: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16840: LD_EXP 26
16844: IFFALSE 16852
16846: PUSH
16847: LD_EXP 40
16851: AND
16852: IFFALSE 16950
16854: GO 16856
16856: DISABLE
16857: LD_INT 0
16859: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16860: LD_ADDR_VAR 0 1
16864: PUSH
16865: LD_INT 22
16867: PUSH
16868: LD_OWVAR 2
16872: PUSH
16873: EMPTY
16874: LIST
16875: LIST
16876: PUSH
16877: LD_INT 21
16879: PUSH
16880: LD_INT 1
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PPUSH
16891: CALL_OW 69
16895: ST_TO_ADDR
// if not tmp then
16896: LD_VAR 0 1
16900: NOT
16901: IFFALSE 16905
// exit ;
16903: GO 16950
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16905: LD_VAR 0 1
16909: PUSH
16910: LD_INT 1
16912: PPUSH
16913: LD_VAR 0 1
16917: PPUSH
16918: CALL_OW 12
16922: ARRAY
16923: PPUSH
16924: LD_INT 1
16926: PPUSH
16927: LD_INT 4
16929: PPUSH
16930: CALL_OW 12
16934: PPUSH
16935: LD_INT 3000
16937: PPUSH
16938: LD_INT 9000
16940: PPUSH
16941: CALL_OW 12
16945: PPUSH
16946: CALL_OW 492
// end ;
16950: PPOPN 1
16952: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16953: LD_EXP 26
16957: IFFALSE 16965
16959: PUSH
16960: LD_EXP 41
16964: AND
16965: IFFALSE 16985
16967: GO 16969
16969: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16970: LD_INT 1
16972: PPUSH
16973: LD_OWVAR 2
16977: PPUSH
16978: LD_INT 0
16980: PPUSH
16981: CALL_OW 324
16985: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16986: LD_EXP 26
16990: IFFALSE 16998
16992: PUSH
16993: LD_EXP 42
16997: AND
16998: IFFALSE 17081
17000: GO 17002
17002: DISABLE
17003: LD_INT 0
17005: PPUSH
17006: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17007: LD_ADDR_VAR 0 2
17011: PUSH
17012: LD_INT 22
17014: PUSH
17015: LD_OWVAR 2
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PUSH
17024: LD_INT 21
17026: PUSH
17027: LD_INT 3
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: PPUSH
17038: CALL_OW 69
17042: ST_TO_ADDR
// if not tmp then
17043: LD_VAR 0 2
17047: NOT
17048: IFFALSE 17052
// exit ;
17050: GO 17081
// for i in tmp do
17052: LD_ADDR_VAR 0 1
17056: PUSH
17057: LD_VAR 0 2
17061: PUSH
17062: FOR_IN
17063: IFFALSE 17079
// SetBLevel ( i , 10 ) ;
17065: LD_VAR 0 1
17069: PPUSH
17070: LD_INT 10
17072: PPUSH
17073: CALL_OW 241
17077: GO 17062
17079: POP
17080: POP
// end ;
17081: PPOPN 2
17083: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17084: LD_EXP 26
17088: IFFALSE 17096
17090: PUSH
17091: LD_EXP 43
17095: AND
17096: IFFALSE 17207
17098: GO 17100
17100: DISABLE
17101: LD_INT 0
17103: PPUSH
17104: PPUSH
17105: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17106: LD_ADDR_VAR 0 3
17110: PUSH
17111: LD_INT 22
17113: PUSH
17114: LD_OWVAR 2
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: PUSH
17123: LD_INT 25
17125: PUSH
17126: LD_INT 1
17128: PUSH
17129: EMPTY
17130: LIST
17131: LIST
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: PPUSH
17137: CALL_OW 69
17141: ST_TO_ADDR
// if not tmp then
17142: LD_VAR 0 3
17146: NOT
17147: IFFALSE 17151
// exit ;
17149: GO 17207
// un := tmp [ rand ( 1 , tmp ) ] ;
17151: LD_ADDR_VAR 0 2
17155: PUSH
17156: LD_VAR 0 3
17160: PUSH
17161: LD_INT 1
17163: PPUSH
17164: LD_VAR 0 3
17168: PPUSH
17169: CALL_OW 12
17173: ARRAY
17174: ST_TO_ADDR
// if Crawls ( un ) then
17175: LD_VAR 0 2
17179: PPUSH
17180: CALL_OW 318
17184: IFFALSE 17195
// ComWalk ( un ) ;
17186: LD_VAR 0 2
17190: PPUSH
17191: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17195: LD_VAR 0 2
17199: PPUSH
17200: LD_INT 5
17202: PPUSH
17203: CALL_OW 336
// end ;
17207: PPOPN 3
17209: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17210: LD_EXP 26
17214: IFFALSE 17222
17216: PUSH
17217: LD_EXP 44
17221: AND
17222: IFFALSE 17234
17224: PUSH
17225: LD_OWVAR 67
17229: PUSH
17230: LD_INT 4
17232: LESS
17233: AND
17234: IFFALSE 17253
17236: GO 17238
17238: DISABLE
// begin Difficulty := Difficulty + 1 ;
17239: LD_ADDR_OWVAR 67
17243: PUSH
17244: LD_OWVAR 67
17248: PUSH
17249: LD_INT 1
17251: PLUS
17252: ST_TO_ADDR
// end ;
17253: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17254: LD_EXP 26
17258: IFFALSE 17266
17260: PUSH
17261: LD_EXP 45
17265: AND
17266: IFFALSE 17369
17268: GO 17270
17270: DISABLE
17271: LD_INT 0
17273: PPUSH
// begin for i := 1 to 5 do
17274: LD_ADDR_VAR 0 1
17278: PUSH
17279: DOUBLE
17280: LD_INT 1
17282: DEC
17283: ST_TO_ADDR
17284: LD_INT 5
17286: PUSH
17287: FOR_TO
17288: IFFALSE 17367
// begin uc_nation := nation_nature ;
17290: LD_ADDR_OWVAR 21
17294: PUSH
17295: LD_INT 0
17297: ST_TO_ADDR
// uc_side := 0 ;
17298: LD_ADDR_OWVAR 20
17302: PUSH
17303: LD_INT 0
17305: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17306: LD_ADDR_OWVAR 29
17310: PUSH
17311: LD_INT 12
17313: PUSH
17314: LD_INT 12
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: ST_TO_ADDR
// hc_agressivity := 20 ;
17321: LD_ADDR_OWVAR 35
17325: PUSH
17326: LD_INT 20
17328: ST_TO_ADDR
// hc_class := class_tiger ;
17329: LD_ADDR_OWVAR 28
17333: PUSH
17334: LD_INT 14
17336: ST_TO_ADDR
// hc_gallery :=  ;
17337: LD_ADDR_OWVAR 33
17341: PUSH
17342: LD_STRING 
17344: ST_TO_ADDR
// hc_name :=  ;
17345: LD_ADDR_OWVAR 26
17349: PUSH
17350: LD_STRING 
17352: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17353: CALL_OW 44
17357: PPUSH
17358: LD_INT 0
17360: PPUSH
17361: CALL_OW 51
// end ;
17365: GO 17287
17367: POP
17368: POP
// end ;
17369: PPOPN 1
17371: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17372: LD_EXP 26
17376: IFFALSE 17384
17378: PUSH
17379: LD_EXP 46
17383: AND
17384: IFFALSE 17393
17386: GO 17388
17388: DISABLE
// StreamSibBomb ;
17389: CALL 17394 0 0
17393: END
// export function StreamSibBomb ; var i , x , y ; begin
17394: LD_INT 0
17396: PPUSH
17397: PPUSH
17398: PPUSH
17399: PPUSH
// result := false ;
17400: LD_ADDR_VAR 0 1
17404: PUSH
17405: LD_INT 0
17407: ST_TO_ADDR
// for i := 1 to 16 do
17408: LD_ADDR_VAR 0 2
17412: PUSH
17413: DOUBLE
17414: LD_INT 1
17416: DEC
17417: ST_TO_ADDR
17418: LD_INT 16
17420: PUSH
17421: FOR_TO
17422: IFFALSE 17621
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17424: LD_ADDR_VAR 0 3
17428: PUSH
17429: LD_INT 10
17431: PUSH
17432: LD_INT 20
17434: PUSH
17435: LD_INT 30
17437: PUSH
17438: LD_INT 40
17440: PUSH
17441: LD_INT 50
17443: PUSH
17444: LD_INT 60
17446: PUSH
17447: LD_INT 70
17449: PUSH
17450: LD_INT 80
17452: PUSH
17453: LD_INT 90
17455: PUSH
17456: LD_INT 100
17458: PUSH
17459: LD_INT 110
17461: PUSH
17462: LD_INT 120
17464: PUSH
17465: LD_INT 130
17467: PUSH
17468: LD_INT 140
17470: PUSH
17471: LD_INT 150
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: PUSH
17491: LD_INT 1
17493: PPUSH
17494: LD_INT 15
17496: PPUSH
17497: CALL_OW 12
17501: ARRAY
17502: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17503: LD_ADDR_VAR 0 4
17507: PUSH
17508: LD_INT 10
17510: PUSH
17511: LD_INT 20
17513: PUSH
17514: LD_INT 30
17516: PUSH
17517: LD_INT 40
17519: PUSH
17520: LD_INT 50
17522: PUSH
17523: LD_INT 60
17525: PUSH
17526: LD_INT 70
17528: PUSH
17529: LD_INT 80
17531: PUSH
17532: LD_INT 90
17534: PUSH
17535: LD_INT 100
17537: PUSH
17538: LD_INT 110
17540: PUSH
17541: LD_INT 120
17543: PUSH
17544: LD_INT 130
17546: PUSH
17547: LD_INT 140
17549: PUSH
17550: LD_INT 150
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: PUSH
17570: LD_INT 1
17572: PPUSH
17573: LD_INT 15
17575: PPUSH
17576: CALL_OW 12
17580: ARRAY
17581: ST_TO_ADDR
// if ValidHex ( x , y ) then
17582: LD_VAR 0 3
17586: PPUSH
17587: LD_VAR 0 4
17591: PPUSH
17592: CALL_OW 488
17596: IFFALSE 17619
// begin result := [ x , y ] ;
17598: LD_ADDR_VAR 0 1
17602: PUSH
17603: LD_VAR 0 3
17607: PUSH
17608: LD_VAR 0 4
17612: PUSH
17613: EMPTY
17614: LIST
17615: LIST
17616: ST_TO_ADDR
// break ;
17617: GO 17621
// end ; end ;
17619: GO 17421
17621: POP
17622: POP
// if result then
17623: LD_VAR 0 1
17627: IFFALSE 17687
// begin ToLua ( playSibBomb() ) ;
17629: LD_STRING playSibBomb()
17631: PPUSH
17632: CALL_OW 559
// wait ( 0 0$14 ) ;
17636: LD_INT 490
17638: PPUSH
17639: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17643: LD_VAR 0 1
17647: PUSH
17648: LD_INT 1
17650: ARRAY
17651: PPUSH
17652: LD_VAR 0 1
17656: PUSH
17657: LD_INT 2
17659: ARRAY
17660: PPUSH
17661: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17665: LD_VAR 0 1
17669: PUSH
17670: LD_INT 1
17672: ARRAY
17673: PPUSH
17674: LD_VAR 0 1
17678: PUSH
17679: LD_INT 2
17681: ARRAY
17682: PPUSH
17683: CALL_OW 429
// end ; end ;
17687: LD_VAR 0 1
17691: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17692: LD_EXP 26
17696: IFFALSE 17704
17698: PUSH
17699: LD_EXP 48
17703: AND
17704: IFFALSE 17716
17706: GO 17708
17708: DISABLE
// YouLost (  ) ;
17709: LD_STRING 
17711: PPUSH
17712: CALL_OW 104
17716: END
// every 0 0$1 trigger StreamModeActive and sFog do
17717: LD_EXP 26
17721: IFFALSE 17729
17723: PUSH
17724: LD_EXP 47
17728: AND
17729: IFFALSE 17743
17731: GO 17733
17733: DISABLE
// FogOff ( your_side ) ;
17734: LD_OWVAR 2
17738: PPUSH
17739: CALL_OW 344
17743: END
// every 0 0$1 trigger StreamModeActive and sSun do
17744: LD_EXP 26
17748: IFFALSE 17756
17750: PUSH
17751: LD_EXP 49
17755: AND
17756: IFFALSE 17784
17758: GO 17760
17760: DISABLE
// begin solar_recharge_percent := 0 ;
17761: LD_ADDR_OWVAR 79
17765: PUSH
17766: LD_INT 0
17768: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17769: LD_INT 10500
17771: PPUSH
17772: CALL_OW 67
// solar_recharge_percent := 100 ;
17776: LD_ADDR_OWVAR 79
17780: PUSH
17781: LD_INT 100
17783: ST_TO_ADDR
// end ;
17784: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17785: LD_EXP 26
17789: IFFALSE 17797
17791: PUSH
17792: LD_EXP 50
17796: AND
17797: IFFALSE 18036
17799: GO 17801
17801: DISABLE
17802: LD_INT 0
17804: PPUSH
17805: PPUSH
17806: PPUSH
// begin tmp := [ ] ;
17807: LD_ADDR_VAR 0 3
17811: PUSH
17812: EMPTY
17813: ST_TO_ADDR
// for i := 1 to 6 do
17814: LD_ADDR_VAR 0 1
17818: PUSH
17819: DOUBLE
17820: LD_INT 1
17822: DEC
17823: ST_TO_ADDR
17824: LD_INT 6
17826: PUSH
17827: FOR_TO
17828: IFFALSE 17933
// begin uc_nation := nation_nature ;
17830: LD_ADDR_OWVAR 21
17834: PUSH
17835: LD_INT 0
17837: ST_TO_ADDR
// uc_side := 0 ;
17838: LD_ADDR_OWVAR 20
17842: PUSH
17843: LD_INT 0
17845: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17846: LD_ADDR_OWVAR 29
17850: PUSH
17851: LD_INT 12
17853: PUSH
17854: LD_INT 12
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: ST_TO_ADDR
// hc_agressivity := 20 ;
17861: LD_ADDR_OWVAR 35
17865: PUSH
17866: LD_INT 20
17868: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17869: LD_ADDR_OWVAR 28
17873: PUSH
17874: LD_INT 17
17876: ST_TO_ADDR
// hc_gallery :=  ;
17877: LD_ADDR_OWVAR 33
17881: PUSH
17882: LD_STRING 
17884: ST_TO_ADDR
// hc_name :=  ;
17885: LD_ADDR_OWVAR 26
17889: PUSH
17890: LD_STRING 
17892: ST_TO_ADDR
// un := CreateHuman ;
17893: LD_ADDR_VAR 0 2
17897: PUSH
17898: CALL_OW 44
17902: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17903: LD_VAR 0 2
17907: PPUSH
17908: LD_INT 1
17910: PPUSH
17911: CALL_OW 51
// tmp := tmp ^ un ;
17915: LD_ADDR_VAR 0 3
17919: PUSH
17920: LD_VAR 0 3
17924: PUSH
17925: LD_VAR 0 2
17929: ADD
17930: ST_TO_ADDR
// end ;
17931: GO 17827
17933: POP
17934: POP
// repeat wait ( 0 0$1 ) ;
17935: LD_INT 35
17937: PPUSH
17938: CALL_OW 67
// for un in tmp do
17942: LD_ADDR_VAR 0 2
17946: PUSH
17947: LD_VAR 0 3
17951: PUSH
17952: FOR_IN
17953: IFFALSE 18027
// begin if IsDead ( un ) then
17955: LD_VAR 0 2
17959: PPUSH
17960: CALL_OW 301
17964: IFFALSE 17984
// begin tmp := tmp diff un ;
17966: LD_ADDR_VAR 0 3
17970: PUSH
17971: LD_VAR 0 3
17975: PUSH
17976: LD_VAR 0 2
17980: DIFF
17981: ST_TO_ADDR
// continue ;
17982: GO 17952
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17984: LD_VAR 0 2
17988: PPUSH
17989: LD_INT 3
17991: PUSH
17992: LD_INT 22
17994: PUSH
17995: LD_INT 0
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PPUSH
18006: CALL_OW 69
18010: PPUSH
18011: LD_VAR 0 2
18015: PPUSH
18016: CALL_OW 74
18020: PPUSH
18021: CALL_OW 115
// end ;
18025: GO 17952
18027: POP
18028: POP
// until not tmp ;
18029: LD_VAR 0 3
18033: NOT
18034: IFFALSE 17935
// end ;
18036: PPOPN 3
18038: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18039: LD_EXP 26
18043: IFFALSE 18051
18045: PUSH
18046: LD_EXP 51
18050: AND
18051: IFFALSE 18105
18053: GO 18055
18055: DISABLE
// begin ToLua ( displayTroll(); ) ;
18056: LD_STRING displayTroll();
18058: PPUSH
18059: CALL_OW 559
// wait ( 3 3$00 ) ;
18063: LD_INT 6300
18065: PPUSH
18066: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18070: LD_STRING hideTroll();
18072: PPUSH
18073: CALL_OW 559
// wait ( 1 1$00 ) ;
18077: LD_INT 2100
18079: PPUSH
18080: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18084: LD_STRING displayTroll();
18086: PPUSH
18087: CALL_OW 559
// wait ( 1 1$00 ) ;
18091: LD_INT 2100
18093: PPUSH
18094: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18098: LD_STRING hideTroll();
18100: PPUSH
18101: CALL_OW 559
// end ;
18105: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18106: LD_EXP 26
18110: IFFALSE 18118
18112: PUSH
18113: LD_EXP 52
18117: AND
18118: IFFALSE 18181
18120: GO 18122
18122: DISABLE
18123: LD_INT 0
18125: PPUSH
// begin p := 0 ;
18126: LD_ADDR_VAR 0 1
18130: PUSH
18131: LD_INT 0
18133: ST_TO_ADDR
// repeat game_speed := 1 ;
18134: LD_ADDR_OWVAR 65
18138: PUSH
18139: LD_INT 1
18141: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18142: LD_INT 35
18144: PPUSH
18145: CALL_OW 67
// p := p + 1 ;
18149: LD_ADDR_VAR 0 1
18153: PUSH
18154: LD_VAR 0 1
18158: PUSH
18159: LD_INT 1
18161: PLUS
18162: ST_TO_ADDR
// until p >= 60 ;
18163: LD_VAR 0 1
18167: PUSH
18168: LD_INT 60
18170: GREATEREQUAL
18171: IFFALSE 18134
// game_speed := 4 ;
18173: LD_ADDR_OWVAR 65
18177: PUSH
18178: LD_INT 4
18180: ST_TO_ADDR
// end ;
18181: PPOPN 1
18183: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18184: LD_EXP 26
18188: IFFALSE 18196
18190: PUSH
18191: LD_EXP 53
18195: AND
18196: IFFALSE 18342
18198: GO 18200
18200: DISABLE
18201: LD_INT 0
18203: PPUSH
18204: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18205: LD_ADDR_VAR 0 1
18209: PUSH
18210: LD_INT 22
18212: PUSH
18213: LD_OWVAR 2
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PUSH
18222: LD_INT 2
18224: PUSH
18225: LD_INT 30
18227: PUSH
18228: LD_INT 0
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: PUSH
18235: LD_INT 30
18237: PUSH
18238: LD_INT 1
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: PUSH
18245: EMPTY
18246: LIST
18247: LIST
18248: LIST
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: PPUSH
18254: CALL_OW 69
18258: ST_TO_ADDR
// if not depot then
18259: LD_VAR 0 1
18263: NOT
18264: IFFALSE 18268
// exit ;
18266: GO 18342
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18268: LD_ADDR_VAR 0 2
18272: PUSH
18273: LD_VAR 0 1
18277: PUSH
18278: LD_INT 1
18280: PPUSH
18281: LD_VAR 0 1
18285: PPUSH
18286: CALL_OW 12
18290: ARRAY
18291: PPUSH
18292: CALL_OW 274
18296: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18297: LD_VAR 0 2
18301: PPUSH
18302: LD_INT 1
18304: PPUSH
18305: LD_INT 0
18307: PPUSH
18308: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18312: LD_VAR 0 2
18316: PPUSH
18317: LD_INT 2
18319: PPUSH
18320: LD_INT 0
18322: PPUSH
18323: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18327: LD_VAR 0 2
18331: PPUSH
18332: LD_INT 3
18334: PPUSH
18335: LD_INT 0
18337: PPUSH
18338: CALL_OW 277
// end ;
18342: PPOPN 2
18344: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18345: LD_EXP 26
18349: IFFALSE 18357
18351: PUSH
18352: LD_EXP 54
18356: AND
18357: IFFALSE 18454
18359: GO 18361
18361: DISABLE
18362: LD_INT 0
18364: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18365: LD_ADDR_VAR 0 1
18369: PUSH
18370: LD_INT 22
18372: PUSH
18373: LD_OWVAR 2
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 21
18384: PUSH
18385: LD_INT 1
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: LD_INT 3
18394: PUSH
18395: LD_INT 23
18397: PUSH
18398: LD_INT 0
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: LIST
18413: PPUSH
18414: CALL_OW 69
18418: ST_TO_ADDR
// if not tmp then
18419: LD_VAR 0 1
18423: NOT
18424: IFFALSE 18428
// exit ;
18426: GO 18454
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18428: LD_VAR 0 1
18432: PUSH
18433: LD_INT 1
18435: PPUSH
18436: LD_VAR 0 1
18440: PPUSH
18441: CALL_OW 12
18445: ARRAY
18446: PPUSH
18447: LD_INT 200
18449: PPUSH
18450: CALL_OW 234
// end ;
18454: PPOPN 1
18456: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18457: LD_EXP 26
18461: IFFALSE 18469
18463: PUSH
18464: LD_EXP 55
18468: AND
18469: IFFALSE 18548
18471: GO 18473
18473: DISABLE
18474: LD_INT 0
18476: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18477: LD_ADDR_VAR 0 1
18481: PUSH
18482: LD_INT 22
18484: PUSH
18485: LD_OWVAR 2
18489: PUSH
18490: EMPTY
18491: LIST
18492: LIST
18493: PUSH
18494: LD_INT 21
18496: PUSH
18497: LD_INT 2
18499: PUSH
18500: EMPTY
18501: LIST
18502: LIST
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: PPUSH
18508: CALL_OW 69
18512: ST_TO_ADDR
// if not tmp then
18513: LD_VAR 0 1
18517: NOT
18518: IFFALSE 18522
// exit ;
18520: GO 18548
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18522: LD_VAR 0 1
18526: PUSH
18527: LD_INT 1
18529: PPUSH
18530: LD_VAR 0 1
18534: PPUSH
18535: CALL_OW 12
18539: ARRAY
18540: PPUSH
18541: LD_INT 60
18543: PPUSH
18544: CALL_OW 234
// end ;
18548: PPOPN 1
18550: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18551: LD_EXP 26
18555: IFFALSE 18563
18557: PUSH
18558: LD_EXP 56
18562: AND
18563: IFFALSE 18662
18565: GO 18567
18567: DISABLE
18568: LD_INT 0
18570: PPUSH
18571: PPUSH
// begin enable ;
18572: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18573: LD_ADDR_VAR 0 1
18577: PUSH
18578: LD_INT 22
18580: PUSH
18581: LD_OWVAR 2
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: PUSH
18590: LD_INT 61
18592: PUSH
18593: EMPTY
18594: LIST
18595: PUSH
18596: LD_INT 33
18598: PUSH
18599: LD_INT 2
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: LIST
18610: PPUSH
18611: CALL_OW 69
18615: ST_TO_ADDR
// if not tmp then
18616: LD_VAR 0 1
18620: NOT
18621: IFFALSE 18625
// exit ;
18623: GO 18662
// for i in tmp do
18625: LD_ADDR_VAR 0 2
18629: PUSH
18630: LD_VAR 0 1
18634: PUSH
18635: FOR_IN
18636: IFFALSE 18660
// if IsControledBy ( i ) then
18638: LD_VAR 0 2
18642: PPUSH
18643: CALL_OW 312
18647: IFFALSE 18658
// ComUnlink ( i ) ;
18649: LD_VAR 0 2
18653: PPUSH
18654: CALL_OW 136
18658: GO 18635
18660: POP
18661: POP
// end ;
18662: PPOPN 2
18664: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18665: LD_EXP 26
18669: IFFALSE 18677
18671: PUSH
18672: LD_EXP 57
18676: AND
18677: IFFALSE 18817
18679: GO 18681
18681: DISABLE
18682: LD_INT 0
18684: PPUSH
18685: PPUSH
// begin ToLua ( displayPowell(); ) ;
18686: LD_STRING displayPowell();
18688: PPUSH
18689: CALL_OW 559
// uc_side := 0 ;
18693: LD_ADDR_OWVAR 20
18697: PUSH
18698: LD_INT 0
18700: ST_TO_ADDR
// uc_nation := 2 ;
18701: LD_ADDR_OWVAR 21
18705: PUSH
18706: LD_INT 2
18708: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18709: LD_ADDR_OWVAR 37
18713: PUSH
18714: LD_INT 14
18716: ST_TO_ADDR
// vc_engine := engine_siberite ;
18717: LD_ADDR_OWVAR 39
18721: PUSH
18722: LD_INT 3
18724: ST_TO_ADDR
// vc_control := control_apeman ;
18725: LD_ADDR_OWVAR 38
18729: PUSH
18730: LD_INT 5
18732: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18733: LD_ADDR_OWVAR 40
18737: PUSH
18738: LD_INT 29
18740: ST_TO_ADDR
// un := CreateVehicle ;
18741: LD_ADDR_VAR 0 2
18745: PUSH
18746: CALL_OW 45
18750: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18751: LD_VAR 0 2
18755: PPUSH
18756: LD_INT 1
18758: PPUSH
18759: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18763: LD_INT 35
18765: PPUSH
18766: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18770: LD_VAR 0 2
18774: PPUSH
18775: LD_INT 22
18777: PUSH
18778: LD_OWVAR 2
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: PPUSH
18787: CALL_OW 69
18791: PPUSH
18792: LD_VAR 0 2
18796: PPUSH
18797: CALL_OW 74
18801: PPUSH
18802: CALL_OW 115
// until IsDead ( un ) ;
18806: LD_VAR 0 2
18810: PPUSH
18811: CALL_OW 301
18815: IFFALSE 18763
// end ;
18817: PPOPN 2
18819: END
// every 0 0$1 trigger StreamModeActive and sStu do
18820: LD_EXP 26
18824: IFFALSE 18832
18826: PUSH
18827: LD_EXP 65
18831: AND
18832: IFFALSE 18848
18834: GO 18836
18836: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18837: LD_STRING displayStucuk();
18839: PPUSH
18840: CALL_OW 559
// ResetFog ;
18844: CALL_OW 335
// end ;
18848: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18849: LD_EXP 26
18853: IFFALSE 18861
18855: PUSH
18856: LD_EXP 58
18860: AND
18861: IFFALSE 19002
18863: GO 18865
18865: DISABLE
18866: LD_INT 0
18868: PPUSH
18869: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18870: LD_ADDR_VAR 0 2
18874: PUSH
18875: LD_INT 22
18877: PUSH
18878: LD_OWVAR 2
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 21
18889: PUSH
18890: LD_INT 1
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PPUSH
18901: CALL_OW 69
18905: ST_TO_ADDR
// if not tmp then
18906: LD_VAR 0 2
18910: NOT
18911: IFFALSE 18915
// exit ;
18913: GO 19002
// un := tmp [ rand ( 1 , tmp ) ] ;
18915: LD_ADDR_VAR 0 1
18919: PUSH
18920: LD_VAR 0 2
18924: PUSH
18925: LD_INT 1
18927: PPUSH
18928: LD_VAR 0 2
18932: PPUSH
18933: CALL_OW 12
18937: ARRAY
18938: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18939: LD_VAR 0 1
18943: PPUSH
18944: LD_INT 0
18946: PPUSH
18947: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18951: LD_VAR 0 1
18955: PPUSH
18956: LD_OWVAR 3
18960: PUSH
18961: LD_VAR 0 1
18965: DIFF
18966: PPUSH
18967: LD_VAR 0 1
18971: PPUSH
18972: CALL_OW 74
18976: PPUSH
18977: CALL_OW 115
// wait ( 0 0$20 ) ;
18981: LD_INT 700
18983: PPUSH
18984: CALL_OW 67
// SetSide ( un , your_side ) ;
18988: LD_VAR 0 1
18992: PPUSH
18993: LD_OWVAR 2
18997: PPUSH
18998: CALL_OW 235
// end ;
19002: PPOPN 2
19004: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19005: LD_EXP 26
19009: IFFALSE 19017
19011: PUSH
19012: LD_EXP 59
19016: AND
19017: IFFALSE 19123
19019: GO 19021
19021: DISABLE
19022: LD_INT 0
19024: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19025: LD_ADDR_VAR 0 1
19029: PUSH
19030: LD_INT 22
19032: PUSH
19033: LD_OWVAR 2
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: PUSH
19042: LD_INT 2
19044: PUSH
19045: LD_INT 30
19047: PUSH
19048: LD_INT 0
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: PUSH
19055: LD_INT 30
19057: PUSH
19058: LD_INT 1
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: LIST
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: PPUSH
19074: CALL_OW 69
19078: ST_TO_ADDR
// if not depot then
19079: LD_VAR 0 1
19083: NOT
19084: IFFALSE 19088
// exit ;
19086: GO 19123
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19088: LD_VAR 0 1
19092: PUSH
19093: LD_INT 1
19095: ARRAY
19096: PPUSH
19097: CALL_OW 250
19101: PPUSH
19102: LD_VAR 0 1
19106: PUSH
19107: LD_INT 1
19109: ARRAY
19110: PPUSH
19111: CALL_OW 251
19115: PPUSH
19116: LD_INT 70
19118: PPUSH
19119: CALL_OW 495
// end ;
19123: PPOPN 1
19125: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19126: LD_EXP 26
19130: IFFALSE 19138
19132: PUSH
19133: LD_EXP 60
19137: AND
19138: IFFALSE 19349
19140: GO 19142
19142: DISABLE
19143: LD_INT 0
19145: PPUSH
19146: PPUSH
19147: PPUSH
19148: PPUSH
19149: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19150: LD_ADDR_VAR 0 5
19154: PUSH
19155: LD_INT 22
19157: PUSH
19158: LD_OWVAR 2
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: PUSH
19167: LD_INT 21
19169: PUSH
19170: LD_INT 1
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PPUSH
19181: CALL_OW 69
19185: ST_TO_ADDR
// if not tmp then
19186: LD_VAR 0 5
19190: NOT
19191: IFFALSE 19195
// exit ;
19193: GO 19349
// for i in tmp do
19195: LD_ADDR_VAR 0 1
19199: PUSH
19200: LD_VAR 0 5
19204: PUSH
19205: FOR_IN
19206: IFFALSE 19347
// begin d := rand ( 0 , 5 ) ;
19208: LD_ADDR_VAR 0 4
19212: PUSH
19213: LD_INT 0
19215: PPUSH
19216: LD_INT 5
19218: PPUSH
19219: CALL_OW 12
19223: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19224: LD_ADDR_VAR 0 2
19228: PUSH
19229: LD_VAR 0 1
19233: PPUSH
19234: CALL_OW 250
19238: PPUSH
19239: LD_VAR 0 4
19243: PPUSH
19244: LD_INT 3
19246: PPUSH
19247: LD_INT 12
19249: PPUSH
19250: CALL_OW 12
19254: PPUSH
19255: CALL_OW 272
19259: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19260: LD_ADDR_VAR 0 3
19264: PUSH
19265: LD_VAR 0 1
19269: PPUSH
19270: CALL_OW 251
19274: PPUSH
19275: LD_VAR 0 4
19279: PPUSH
19280: LD_INT 3
19282: PPUSH
19283: LD_INT 12
19285: PPUSH
19286: CALL_OW 12
19290: PPUSH
19291: CALL_OW 273
19295: ST_TO_ADDR
// if ValidHex ( x , y ) then
19296: LD_VAR 0 2
19300: PPUSH
19301: LD_VAR 0 3
19305: PPUSH
19306: CALL_OW 488
19310: IFFALSE 19345
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19312: LD_VAR 0 1
19316: PPUSH
19317: LD_VAR 0 2
19321: PPUSH
19322: LD_VAR 0 3
19326: PPUSH
19327: LD_INT 3
19329: PPUSH
19330: LD_INT 6
19332: PPUSH
19333: CALL_OW 12
19337: PPUSH
19338: LD_INT 1
19340: PPUSH
19341: CALL_OW 483
// end ;
19345: GO 19205
19347: POP
19348: POP
// end ;
19349: PPOPN 5
19351: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19352: LD_EXP 26
19356: IFFALSE 19364
19358: PUSH
19359: LD_EXP 61
19363: AND
19364: IFFALSE 19458
19366: GO 19368
19368: DISABLE
19369: LD_INT 0
19371: PPUSH
19372: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19373: LD_ADDR_VAR 0 2
19377: PUSH
19378: LD_INT 22
19380: PUSH
19381: LD_OWVAR 2
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: PUSH
19390: LD_INT 32
19392: PUSH
19393: LD_INT 1
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: PUSH
19400: LD_INT 21
19402: PUSH
19403: LD_INT 2
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: LIST
19414: PPUSH
19415: CALL_OW 69
19419: ST_TO_ADDR
// if not tmp then
19420: LD_VAR 0 2
19424: NOT
19425: IFFALSE 19429
// exit ;
19427: GO 19458
// for i in tmp do
19429: LD_ADDR_VAR 0 1
19433: PUSH
19434: LD_VAR 0 2
19438: PUSH
19439: FOR_IN
19440: IFFALSE 19456
// SetFuel ( i , 0 ) ;
19442: LD_VAR 0 1
19446: PPUSH
19447: LD_INT 0
19449: PPUSH
19450: CALL_OW 240
19454: GO 19439
19456: POP
19457: POP
// end ;
19458: PPOPN 2
19460: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19461: LD_EXP 26
19465: IFFALSE 19473
19467: PUSH
19468: LD_EXP 62
19472: AND
19473: IFFALSE 19539
19475: GO 19477
19477: DISABLE
19478: LD_INT 0
19480: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19481: LD_ADDR_VAR 0 1
19485: PUSH
19486: LD_INT 22
19488: PUSH
19489: LD_OWVAR 2
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PUSH
19498: LD_INT 30
19500: PUSH
19501: LD_INT 29
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PPUSH
19512: CALL_OW 69
19516: ST_TO_ADDR
// if not tmp then
19517: LD_VAR 0 1
19521: NOT
19522: IFFALSE 19526
// exit ;
19524: GO 19539
// DestroyUnit ( tmp [ 1 ] ) ;
19526: LD_VAR 0 1
19530: PUSH
19531: LD_INT 1
19533: ARRAY
19534: PPUSH
19535: CALL_OW 65
// end ;
19539: PPOPN 1
19541: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19542: LD_EXP 26
19546: IFFALSE 19554
19548: PUSH
19549: LD_EXP 64
19553: AND
19554: IFFALSE 19683
19556: GO 19558
19558: DISABLE
19559: LD_INT 0
19561: PPUSH
// begin uc_side := 0 ;
19562: LD_ADDR_OWVAR 20
19566: PUSH
19567: LD_INT 0
19569: ST_TO_ADDR
// uc_nation := nation_arabian ;
19570: LD_ADDR_OWVAR 21
19574: PUSH
19575: LD_INT 2
19577: ST_TO_ADDR
// hc_gallery :=  ;
19578: LD_ADDR_OWVAR 33
19582: PUSH
19583: LD_STRING 
19585: ST_TO_ADDR
// hc_name :=  ;
19586: LD_ADDR_OWVAR 26
19590: PUSH
19591: LD_STRING 
19593: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19594: LD_INT 1
19596: PPUSH
19597: LD_INT 11
19599: PPUSH
19600: LD_INT 10
19602: PPUSH
19603: CALL_OW 380
// un := CreateHuman ;
19607: LD_ADDR_VAR 0 1
19611: PUSH
19612: CALL_OW 44
19616: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19617: LD_VAR 0 1
19621: PPUSH
19622: LD_INT 1
19624: PPUSH
19625: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19629: LD_INT 35
19631: PPUSH
19632: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19636: LD_VAR 0 1
19640: PPUSH
19641: LD_INT 22
19643: PUSH
19644: LD_OWVAR 2
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PPUSH
19653: CALL_OW 69
19657: PPUSH
19658: LD_VAR 0 1
19662: PPUSH
19663: CALL_OW 74
19667: PPUSH
19668: CALL_OW 115
// until IsDead ( un ) ;
19672: LD_VAR 0 1
19676: PPUSH
19677: CALL_OW 301
19681: IFFALSE 19629
// end ;
19683: PPOPN 1
19685: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19686: LD_EXP 26
19690: IFFALSE 19698
19692: PUSH
19693: LD_EXP 66
19697: AND
19698: IFFALSE 19710
19700: GO 19702
19702: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19703: LD_STRING earthquake(getX(game), 0, 32)
19705: PPUSH
19706: CALL_OW 559
19710: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19711: LD_EXP 26
19715: IFFALSE 19723
19717: PUSH
19718: LD_EXP 67
19722: AND
19723: IFFALSE 19814
19725: GO 19727
19727: DISABLE
19728: LD_INT 0
19730: PPUSH
// begin enable ;
19731: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19732: LD_ADDR_VAR 0 1
19736: PUSH
19737: LD_INT 22
19739: PUSH
19740: LD_OWVAR 2
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: PUSH
19749: LD_INT 21
19751: PUSH
19752: LD_INT 2
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: LD_INT 33
19761: PUSH
19762: LD_INT 3
19764: PUSH
19765: EMPTY
19766: LIST
19767: LIST
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: LIST
19773: PPUSH
19774: CALL_OW 69
19778: ST_TO_ADDR
// if not tmp then
19779: LD_VAR 0 1
19783: NOT
19784: IFFALSE 19788
// exit ;
19786: GO 19814
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19788: LD_VAR 0 1
19792: PUSH
19793: LD_INT 1
19795: PPUSH
19796: LD_VAR 0 1
19800: PPUSH
19801: CALL_OW 12
19805: ARRAY
19806: PPUSH
19807: LD_INT 1
19809: PPUSH
19810: CALL_OW 234
// end ;
19814: PPOPN 1
19816: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19817: LD_EXP 26
19821: IFFALSE 19829
19823: PUSH
19824: LD_EXP 68
19828: AND
19829: IFFALSE 19970
19831: GO 19833
19833: DISABLE
19834: LD_INT 0
19836: PPUSH
19837: PPUSH
19838: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19839: LD_ADDR_VAR 0 3
19843: PUSH
19844: LD_INT 22
19846: PUSH
19847: LD_OWVAR 2
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PUSH
19856: LD_INT 25
19858: PUSH
19859: LD_INT 1
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: PPUSH
19870: CALL_OW 69
19874: ST_TO_ADDR
// if not tmp then
19875: LD_VAR 0 3
19879: NOT
19880: IFFALSE 19884
// exit ;
19882: GO 19970
// un := tmp [ rand ( 1 , tmp ) ] ;
19884: LD_ADDR_VAR 0 2
19888: PUSH
19889: LD_VAR 0 3
19893: PUSH
19894: LD_INT 1
19896: PPUSH
19897: LD_VAR 0 3
19901: PPUSH
19902: CALL_OW 12
19906: ARRAY
19907: ST_TO_ADDR
// if Crawls ( un ) then
19908: LD_VAR 0 2
19912: PPUSH
19913: CALL_OW 318
19917: IFFALSE 19928
// ComWalk ( un ) ;
19919: LD_VAR 0 2
19923: PPUSH
19924: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19928: LD_VAR 0 2
19932: PPUSH
19933: LD_INT 9
19935: PPUSH
19936: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19940: LD_INT 28
19942: PPUSH
19943: LD_OWVAR 2
19947: PPUSH
19948: LD_INT 2
19950: PPUSH
19951: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19955: LD_INT 29
19957: PPUSH
19958: LD_OWVAR 2
19962: PPUSH
19963: LD_INT 2
19965: PPUSH
19966: CALL_OW 322
// end ;
19970: PPOPN 3
19972: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19973: LD_EXP 26
19977: IFFALSE 19985
19979: PUSH
19980: LD_EXP 69
19984: AND
19985: IFFALSE 20096
19987: GO 19989
19989: DISABLE
19990: LD_INT 0
19992: PPUSH
19993: PPUSH
19994: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19995: LD_ADDR_VAR 0 3
19999: PUSH
20000: LD_INT 22
20002: PUSH
20003: LD_OWVAR 2
20007: PUSH
20008: EMPTY
20009: LIST
20010: LIST
20011: PUSH
20012: LD_INT 25
20014: PUSH
20015: LD_INT 1
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PPUSH
20026: CALL_OW 69
20030: ST_TO_ADDR
// if not tmp then
20031: LD_VAR 0 3
20035: NOT
20036: IFFALSE 20040
// exit ;
20038: GO 20096
// un := tmp [ rand ( 1 , tmp ) ] ;
20040: LD_ADDR_VAR 0 2
20044: PUSH
20045: LD_VAR 0 3
20049: PUSH
20050: LD_INT 1
20052: PPUSH
20053: LD_VAR 0 3
20057: PPUSH
20058: CALL_OW 12
20062: ARRAY
20063: ST_TO_ADDR
// if Crawls ( un ) then
20064: LD_VAR 0 2
20068: PPUSH
20069: CALL_OW 318
20073: IFFALSE 20084
// ComWalk ( un ) ;
20075: LD_VAR 0 2
20079: PPUSH
20080: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20084: LD_VAR 0 2
20088: PPUSH
20089: LD_INT 8
20091: PPUSH
20092: CALL_OW 336
// end ;
20096: PPOPN 3
20098: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20099: LD_EXP 26
20103: IFFALSE 20111
20105: PUSH
20106: LD_EXP 70
20110: AND
20111: IFFALSE 20255
20113: GO 20115
20115: DISABLE
20116: LD_INT 0
20118: PPUSH
20119: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20120: LD_ADDR_VAR 0 2
20124: PUSH
20125: LD_INT 22
20127: PUSH
20128: LD_OWVAR 2
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: PUSH
20137: LD_INT 21
20139: PUSH
20140: LD_INT 2
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: PUSH
20147: LD_INT 2
20149: PUSH
20150: LD_INT 34
20152: PUSH
20153: LD_INT 12
20155: PUSH
20156: EMPTY
20157: LIST
20158: LIST
20159: PUSH
20160: LD_INT 34
20162: PUSH
20163: LD_INT 51
20165: PUSH
20166: EMPTY
20167: LIST
20168: LIST
20169: PUSH
20170: LD_INT 34
20172: PUSH
20173: LD_INT 32
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: PUSH
20186: EMPTY
20187: LIST
20188: LIST
20189: LIST
20190: PPUSH
20191: CALL_OW 69
20195: ST_TO_ADDR
// if not tmp then
20196: LD_VAR 0 2
20200: NOT
20201: IFFALSE 20205
// exit ;
20203: GO 20255
// for i in tmp do
20205: LD_ADDR_VAR 0 1
20209: PUSH
20210: LD_VAR 0 2
20214: PUSH
20215: FOR_IN
20216: IFFALSE 20253
// if GetCargo ( i , mat_artifact ) = 0 then
20218: LD_VAR 0 1
20222: PPUSH
20223: LD_INT 4
20225: PPUSH
20226: CALL_OW 289
20230: PUSH
20231: LD_INT 0
20233: EQUAL
20234: IFFALSE 20251
// SetCargo ( i , mat_siberit , 100 ) ;
20236: LD_VAR 0 1
20240: PPUSH
20241: LD_INT 3
20243: PPUSH
20244: LD_INT 100
20246: PPUSH
20247: CALL_OW 290
20251: GO 20215
20253: POP
20254: POP
// end ;
20255: PPOPN 2
20257: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20258: LD_EXP 26
20262: IFFALSE 20270
20264: PUSH
20265: LD_EXP 71
20269: AND
20270: IFFALSE 20453
20272: GO 20274
20274: DISABLE
20275: LD_INT 0
20277: PPUSH
20278: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20279: LD_ADDR_VAR 0 2
20283: PUSH
20284: LD_INT 22
20286: PUSH
20287: LD_OWVAR 2
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PPUSH
20296: CALL_OW 69
20300: ST_TO_ADDR
// if not tmp then
20301: LD_VAR 0 2
20305: NOT
20306: IFFALSE 20310
// exit ;
20308: GO 20453
// for i := 1 to 2 do
20310: LD_ADDR_VAR 0 1
20314: PUSH
20315: DOUBLE
20316: LD_INT 1
20318: DEC
20319: ST_TO_ADDR
20320: LD_INT 2
20322: PUSH
20323: FOR_TO
20324: IFFALSE 20451
// begin uc_side := your_side ;
20326: LD_ADDR_OWVAR 20
20330: PUSH
20331: LD_OWVAR 2
20335: ST_TO_ADDR
// uc_nation := nation_american ;
20336: LD_ADDR_OWVAR 21
20340: PUSH
20341: LD_INT 1
20343: ST_TO_ADDR
// vc_chassis := us_morphling ;
20344: LD_ADDR_OWVAR 37
20348: PUSH
20349: LD_INT 5
20351: ST_TO_ADDR
// vc_engine := engine_siberite ;
20352: LD_ADDR_OWVAR 39
20356: PUSH
20357: LD_INT 3
20359: ST_TO_ADDR
// vc_control := control_computer ;
20360: LD_ADDR_OWVAR 38
20364: PUSH
20365: LD_INT 3
20367: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20368: LD_ADDR_OWVAR 40
20372: PUSH
20373: LD_INT 10
20375: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20376: LD_VAR 0 2
20380: PUSH
20381: LD_INT 1
20383: ARRAY
20384: PPUSH
20385: CALL_OW 310
20389: NOT
20390: IFFALSE 20437
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20392: CALL_OW 45
20396: PPUSH
20397: LD_VAR 0 2
20401: PUSH
20402: LD_INT 1
20404: ARRAY
20405: PPUSH
20406: CALL_OW 250
20410: PPUSH
20411: LD_VAR 0 2
20415: PUSH
20416: LD_INT 1
20418: ARRAY
20419: PPUSH
20420: CALL_OW 251
20424: PPUSH
20425: LD_INT 12
20427: PPUSH
20428: LD_INT 1
20430: PPUSH
20431: CALL_OW 50
20435: GO 20449
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20437: CALL_OW 45
20441: PPUSH
20442: LD_INT 1
20444: PPUSH
20445: CALL_OW 51
// end ;
20449: GO 20323
20451: POP
20452: POP
// end ;
20453: PPOPN 2
20455: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20456: LD_EXP 26
20460: IFFALSE 20468
20462: PUSH
20463: LD_EXP 72
20467: AND
20468: IFFALSE 20690
20470: GO 20472
20472: DISABLE
20473: LD_INT 0
20475: PPUSH
20476: PPUSH
20477: PPUSH
20478: PPUSH
20479: PPUSH
20480: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20481: LD_ADDR_VAR 0 6
20485: PUSH
20486: LD_INT 22
20488: PUSH
20489: LD_OWVAR 2
20493: PUSH
20494: EMPTY
20495: LIST
20496: LIST
20497: PUSH
20498: LD_INT 21
20500: PUSH
20501: LD_INT 1
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: PUSH
20508: LD_INT 3
20510: PUSH
20511: LD_INT 23
20513: PUSH
20514: LD_INT 0
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: LIST
20529: PPUSH
20530: CALL_OW 69
20534: ST_TO_ADDR
// if not tmp then
20535: LD_VAR 0 6
20539: NOT
20540: IFFALSE 20544
// exit ;
20542: GO 20690
// s1 := rand ( 1 , 4 ) ;
20544: LD_ADDR_VAR 0 2
20548: PUSH
20549: LD_INT 1
20551: PPUSH
20552: LD_INT 4
20554: PPUSH
20555: CALL_OW 12
20559: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20560: LD_ADDR_VAR 0 4
20564: PUSH
20565: LD_VAR 0 6
20569: PUSH
20570: LD_INT 1
20572: ARRAY
20573: PPUSH
20574: LD_VAR 0 2
20578: PPUSH
20579: CALL_OW 259
20583: ST_TO_ADDR
// if s1 = 1 then
20584: LD_VAR 0 2
20588: PUSH
20589: LD_INT 1
20591: EQUAL
20592: IFFALSE 20612
// s2 := rand ( 2 , 4 ) else
20594: LD_ADDR_VAR 0 3
20598: PUSH
20599: LD_INT 2
20601: PPUSH
20602: LD_INT 4
20604: PPUSH
20605: CALL_OW 12
20609: ST_TO_ADDR
20610: GO 20620
// s2 := 1 ;
20612: LD_ADDR_VAR 0 3
20616: PUSH
20617: LD_INT 1
20619: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20620: LD_ADDR_VAR 0 5
20624: PUSH
20625: LD_VAR 0 6
20629: PUSH
20630: LD_INT 1
20632: ARRAY
20633: PPUSH
20634: LD_VAR 0 3
20638: PPUSH
20639: CALL_OW 259
20643: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20644: LD_VAR 0 6
20648: PUSH
20649: LD_INT 1
20651: ARRAY
20652: PPUSH
20653: LD_VAR 0 2
20657: PPUSH
20658: LD_VAR 0 5
20662: PPUSH
20663: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20667: LD_VAR 0 6
20671: PUSH
20672: LD_INT 1
20674: ARRAY
20675: PPUSH
20676: LD_VAR 0 3
20680: PPUSH
20681: LD_VAR 0 4
20685: PPUSH
20686: CALL_OW 237
// end ;
20690: PPOPN 6
20692: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20693: LD_EXP 26
20697: IFFALSE 20705
20699: PUSH
20700: LD_EXP 73
20704: AND
20705: IFFALSE 20784
20707: GO 20709
20709: DISABLE
20710: LD_INT 0
20712: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20713: LD_ADDR_VAR 0 1
20717: PUSH
20718: LD_INT 22
20720: PUSH
20721: LD_OWVAR 2
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: PUSH
20730: LD_INT 30
20732: PUSH
20733: LD_INT 3
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: PPUSH
20744: CALL_OW 69
20748: ST_TO_ADDR
// if not tmp then
20749: LD_VAR 0 1
20753: NOT
20754: IFFALSE 20758
// exit ;
20756: GO 20784
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20758: LD_VAR 0 1
20762: PUSH
20763: LD_INT 1
20765: PPUSH
20766: LD_VAR 0 1
20770: PPUSH
20771: CALL_OW 12
20775: ARRAY
20776: PPUSH
20777: LD_INT 1
20779: PPUSH
20780: CALL_OW 234
// end ;
20784: PPOPN 1
20786: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20787: LD_EXP 26
20791: IFFALSE 20799
20793: PUSH
20794: LD_EXP 74
20798: AND
20799: IFFALSE 20911
20801: GO 20803
20803: DISABLE
20804: LD_INT 0
20806: PPUSH
20807: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20808: LD_ADDR_VAR 0 2
20812: PUSH
20813: LD_INT 22
20815: PUSH
20816: LD_OWVAR 2
20820: PUSH
20821: EMPTY
20822: LIST
20823: LIST
20824: PUSH
20825: LD_INT 2
20827: PUSH
20828: LD_INT 30
20830: PUSH
20831: LD_INT 27
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: PUSH
20838: LD_INT 30
20840: PUSH
20841: LD_INT 26
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: PUSH
20848: LD_INT 30
20850: PUSH
20851: LD_INT 28
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: PUSH
20864: EMPTY
20865: LIST
20866: LIST
20867: PPUSH
20868: CALL_OW 69
20872: ST_TO_ADDR
// if not tmp then
20873: LD_VAR 0 2
20877: NOT
20878: IFFALSE 20882
// exit ;
20880: GO 20911
// for i in tmp do
20882: LD_ADDR_VAR 0 1
20886: PUSH
20887: LD_VAR 0 2
20891: PUSH
20892: FOR_IN
20893: IFFALSE 20909
// SetLives ( i , 1 ) ;
20895: LD_VAR 0 1
20899: PPUSH
20900: LD_INT 1
20902: PPUSH
20903: CALL_OW 234
20907: GO 20892
20909: POP
20910: POP
// end ;
20911: PPOPN 2
20913: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20914: LD_EXP 26
20918: IFFALSE 20926
20920: PUSH
20921: LD_EXP 75
20925: AND
20926: IFFALSE 21213
20928: GO 20930
20930: DISABLE
20931: LD_INT 0
20933: PPUSH
20934: PPUSH
20935: PPUSH
// begin i := rand ( 1 , 7 ) ;
20936: LD_ADDR_VAR 0 1
20940: PUSH
20941: LD_INT 1
20943: PPUSH
20944: LD_INT 7
20946: PPUSH
20947: CALL_OW 12
20951: ST_TO_ADDR
// case i of 1 :
20952: LD_VAR 0 1
20956: PUSH
20957: LD_INT 1
20959: DOUBLE
20960: EQUAL
20961: IFTRUE 20965
20963: GO 20975
20965: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20966: LD_STRING earthquake(getX(game), 0, 32)
20968: PPUSH
20969: CALL_OW 559
20973: GO 21213
20975: LD_INT 2
20977: DOUBLE
20978: EQUAL
20979: IFTRUE 20983
20981: GO 20997
20983: POP
// begin ToLua ( displayStucuk(); ) ;
20984: LD_STRING displayStucuk();
20986: PPUSH
20987: CALL_OW 559
// ResetFog ;
20991: CALL_OW 335
// end ; 3 :
20995: GO 21213
20997: LD_INT 3
20999: DOUBLE
21000: EQUAL
21001: IFTRUE 21005
21003: GO 21109
21005: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21006: LD_ADDR_VAR 0 2
21010: PUSH
21011: LD_INT 22
21013: PUSH
21014: LD_OWVAR 2
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: PUSH
21023: LD_INT 25
21025: PUSH
21026: LD_INT 1
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PPUSH
21037: CALL_OW 69
21041: ST_TO_ADDR
// if not tmp then
21042: LD_VAR 0 2
21046: NOT
21047: IFFALSE 21051
// exit ;
21049: GO 21213
// un := tmp [ rand ( 1 , tmp ) ] ;
21051: LD_ADDR_VAR 0 3
21055: PUSH
21056: LD_VAR 0 2
21060: PUSH
21061: LD_INT 1
21063: PPUSH
21064: LD_VAR 0 2
21068: PPUSH
21069: CALL_OW 12
21073: ARRAY
21074: ST_TO_ADDR
// if Crawls ( un ) then
21075: LD_VAR 0 3
21079: PPUSH
21080: CALL_OW 318
21084: IFFALSE 21095
// ComWalk ( un ) ;
21086: LD_VAR 0 3
21090: PPUSH
21091: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21095: LD_VAR 0 3
21099: PPUSH
21100: LD_INT 8
21102: PPUSH
21103: CALL_OW 336
// end ; 4 :
21107: GO 21213
21109: LD_INT 4
21111: DOUBLE
21112: EQUAL
21113: IFTRUE 21117
21115: GO 21191
21117: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21118: LD_ADDR_VAR 0 2
21122: PUSH
21123: LD_INT 22
21125: PUSH
21126: LD_OWVAR 2
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: PUSH
21135: LD_INT 30
21137: PUSH
21138: LD_INT 29
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: PPUSH
21149: CALL_OW 69
21153: ST_TO_ADDR
// if not tmp then
21154: LD_VAR 0 2
21158: NOT
21159: IFFALSE 21163
// exit ;
21161: GO 21213
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21163: LD_VAR 0 2
21167: PUSH
21168: LD_INT 1
21170: ARRAY
21171: PPUSH
21172: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21176: LD_VAR 0 2
21180: PUSH
21181: LD_INT 1
21183: ARRAY
21184: PPUSH
21185: CALL_OW 65
// end ; 5 .. 7 :
21189: GO 21213
21191: LD_INT 5
21193: DOUBLE
21194: GREATEREQUAL
21195: IFFALSE 21203
21197: LD_INT 7
21199: DOUBLE
21200: LESSEQUAL
21201: IFTRUE 21205
21203: GO 21212
21205: POP
// StreamSibBomb ; end ;
21206: CALL 17394 0 0
21210: GO 21213
21212: POP
// end ;
21213: PPOPN 3
21215: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21216: LD_EXP 26
21220: IFFALSE 21228
21222: PUSH
21223: LD_EXP 76
21227: AND
21228: IFFALSE 21384
21230: GO 21232
21232: DISABLE
21233: LD_INT 0
21235: PPUSH
21236: PPUSH
21237: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21238: LD_ADDR_VAR 0 2
21242: PUSH
21243: LD_INT 81
21245: PUSH
21246: LD_OWVAR 2
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: PUSH
21255: LD_INT 2
21257: PUSH
21258: LD_INT 21
21260: PUSH
21261: LD_INT 1
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: PUSH
21268: LD_INT 21
21270: PUSH
21271: LD_INT 2
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: LIST
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: PPUSH
21287: CALL_OW 69
21291: ST_TO_ADDR
// if not tmp then
21292: LD_VAR 0 2
21296: NOT
21297: IFFALSE 21301
// exit ;
21299: GO 21384
// p := 0 ;
21301: LD_ADDR_VAR 0 3
21305: PUSH
21306: LD_INT 0
21308: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21309: LD_INT 35
21311: PPUSH
21312: CALL_OW 67
// p := p + 1 ;
21316: LD_ADDR_VAR 0 3
21320: PUSH
21321: LD_VAR 0 3
21325: PUSH
21326: LD_INT 1
21328: PLUS
21329: ST_TO_ADDR
// for i in tmp do
21330: LD_ADDR_VAR 0 1
21334: PUSH
21335: LD_VAR 0 2
21339: PUSH
21340: FOR_IN
21341: IFFALSE 21372
// if GetLives ( i ) < 1000 then
21343: LD_VAR 0 1
21347: PPUSH
21348: CALL_OW 256
21352: PUSH
21353: LD_INT 1000
21355: LESS
21356: IFFALSE 21370
// SetLives ( i , 1000 ) ;
21358: LD_VAR 0 1
21362: PPUSH
21363: LD_INT 1000
21365: PPUSH
21366: CALL_OW 234
21370: GO 21340
21372: POP
21373: POP
// until p > 20 ;
21374: LD_VAR 0 3
21378: PUSH
21379: LD_INT 20
21381: GREATER
21382: IFFALSE 21309
// end ;
21384: PPOPN 3
21386: END
// every 0 0$1 trigger StreamModeActive and sTime do
21387: LD_EXP 26
21391: IFFALSE 21399
21393: PUSH
21394: LD_EXP 77
21398: AND
21399: IFFALSE 21434
21401: GO 21403
21403: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21404: LD_INT 28
21406: PPUSH
21407: LD_OWVAR 2
21411: PPUSH
21412: LD_INT 2
21414: PPUSH
21415: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21419: LD_INT 30
21421: PPUSH
21422: LD_OWVAR 2
21426: PPUSH
21427: LD_INT 2
21429: PPUSH
21430: CALL_OW 322
// end ;
21434: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21435: LD_EXP 26
21439: IFFALSE 21447
21441: PUSH
21442: LD_EXP 78
21446: AND
21447: IFFALSE 21568
21449: GO 21451
21451: DISABLE
21452: LD_INT 0
21454: PPUSH
21455: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21456: LD_ADDR_VAR 0 2
21460: PUSH
21461: LD_INT 22
21463: PUSH
21464: LD_OWVAR 2
21468: PUSH
21469: EMPTY
21470: LIST
21471: LIST
21472: PUSH
21473: LD_INT 21
21475: PUSH
21476: LD_INT 1
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: PUSH
21483: LD_INT 3
21485: PUSH
21486: LD_INT 23
21488: PUSH
21489: LD_INT 0
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: LIST
21504: PPUSH
21505: CALL_OW 69
21509: ST_TO_ADDR
// if not tmp then
21510: LD_VAR 0 2
21514: NOT
21515: IFFALSE 21519
// exit ;
21517: GO 21568
// for i in tmp do
21519: LD_ADDR_VAR 0 1
21523: PUSH
21524: LD_VAR 0 2
21528: PUSH
21529: FOR_IN
21530: IFFALSE 21566
// begin if Crawls ( i ) then
21532: LD_VAR 0 1
21536: PPUSH
21537: CALL_OW 318
21541: IFFALSE 21552
// ComWalk ( i ) ;
21543: LD_VAR 0 1
21547: PPUSH
21548: CALL_OW 138
// SetClass ( i , 2 ) ;
21552: LD_VAR 0 1
21556: PPUSH
21557: LD_INT 2
21559: PPUSH
21560: CALL_OW 336
// end ;
21564: GO 21529
21566: POP
21567: POP
// end ;
21568: PPOPN 2
21570: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21571: LD_EXP 26
21575: IFFALSE 21583
21577: PUSH
21578: LD_EXP 79
21582: AND
21583: IFFALSE 21873
21585: GO 21587
21587: DISABLE
21588: LD_INT 0
21590: PPUSH
21591: PPUSH
21592: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21593: LD_OWVAR 2
21597: PPUSH
21598: LD_INT 9
21600: PPUSH
21601: LD_INT 1
21603: PPUSH
21604: LD_INT 1
21606: PPUSH
21607: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21611: LD_INT 9
21613: PPUSH
21614: LD_OWVAR 2
21618: PPUSH
21619: CALL_OW 343
// uc_side := 9 ;
21623: LD_ADDR_OWVAR 20
21627: PUSH
21628: LD_INT 9
21630: ST_TO_ADDR
// uc_nation := 2 ;
21631: LD_ADDR_OWVAR 21
21635: PUSH
21636: LD_INT 2
21638: ST_TO_ADDR
// hc_name := Dark Warrior ;
21639: LD_ADDR_OWVAR 26
21643: PUSH
21644: LD_STRING Dark Warrior
21646: ST_TO_ADDR
// hc_gallery :=  ;
21647: LD_ADDR_OWVAR 33
21651: PUSH
21652: LD_STRING 
21654: ST_TO_ADDR
// hc_noskilllimit := true ;
21655: LD_ADDR_OWVAR 76
21659: PUSH
21660: LD_INT 1
21662: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
21663: LD_ADDR_OWVAR 31
21667: PUSH
21668: LD_INT 30
21670: PUSH
21671: LD_INT 30
21673: PUSH
21674: LD_INT 30
21676: PUSH
21677: LD_INT 30
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: ST_TO_ADDR
// un := CreateHuman ;
21686: LD_ADDR_VAR 0 3
21690: PUSH
21691: CALL_OW 44
21695: ST_TO_ADDR
// hc_noskilllimit := false ;
21696: LD_ADDR_OWVAR 76
21700: PUSH
21701: LD_INT 0
21703: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21704: LD_VAR 0 3
21708: PPUSH
21709: LD_INT 1
21711: PPUSH
21712: CALL_OW 51
// ToLua ( playRanger() ) ;
21716: LD_STRING playRanger()
21718: PPUSH
21719: CALL_OW 559
// p := 0 ;
21723: LD_ADDR_VAR 0 2
21727: PUSH
21728: LD_INT 0
21730: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21731: LD_INT 35
21733: PPUSH
21734: CALL_OW 67
// p := p + 1 ;
21738: LD_ADDR_VAR 0 2
21742: PUSH
21743: LD_VAR 0 2
21747: PUSH
21748: LD_INT 1
21750: PLUS
21751: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21752: LD_VAR 0 3
21756: PPUSH
21757: CALL_OW 256
21761: PUSH
21762: LD_INT 1000
21764: LESS
21765: IFFALSE 21779
// SetLives ( un , 1000 ) ;
21767: LD_VAR 0 3
21771: PPUSH
21772: LD_INT 1000
21774: PPUSH
21775: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21779: LD_VAR 0 3
21783: PPUSH
21784: LD_INT 81
21786: PUSH
21787: LD_OWVAR 2
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: PUSH
21796: LD_INT 91
21798: PUSH
21799: LD_VAR 0 3
21803: PUSH
21804: LD_INT 30
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: LIST
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: PPUSH
21816: CALL_OW 69
21820: PPUSH
21821: LD_VAR 0 3
21825: PPUSH
21826: CALL_OW 74
21830: PPUSH
21831: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
21835: LD_VAR 0 2
21839: PUSH
21840: LD_INT 80
21842: GREATER
21843: IFTRUE 21856
21845: PUSH
21846: LD_VAR 0 3
21850: PPUSH
21851: CALL_OW 301
21855: OR
21856: IFFALSE 21731
// if un then
21858: LD_VAR 0 3
21862: IFFALSE 21873
// RemoveUnit ( un ) ;
21864: LD_VAR 0 3
21868: PPUSH
21869: CALL_OW 64
// end ;
21873: PPOPN 3
21875: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
21876: LD_EXP 80
21880: IFFALSE 21996
21882: GO 21884
21884: DISABLE
21885: LD_INT 0
21887: PPUSH
21888: PPUSH
21889: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21890: LD_ADDR_VAR 0 2
21894: PUSH
21895: LD_INT 81
21897: PUSH
21898: LD_OWVAR 2
21902: PUSH
21903: EMPTY
21904: LIST
21905: LIST
21906: PUSH
21907: LD_INT 21
21909: PUSH
21910: LD_INT 1
21912: PUSH
21913: EMPTY
21914: LIST
21915: LIST
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: PPUSH
21921: CALL_OW 69
21925: ST_TO_ADDR
// ToLua ( playComputer() ) ;
21926: LD_STRING playComputer()
21928: PPUSH
21929: CALL_OW 559
// if not tmp then
21933: LD_VAR 0 2
21937: NOT
21938: IFFALSE 21942
// exit ;
21940: GO 21996
// for i in tmp do
21942: LD_ADDR_VAR 0 1
21946: PUSH
21947: LD_VAR 0 2
21951: PUSH
21952: FOR_IN
21953: IFFALSE 21994
// for j := 1 to 4 do
21955: LD_ADDR_VAR 0 3
21959: PUSH
21960: DOUBLE
21961: LD_INT 1
21963: DEC
21964: ST_TO_ADDR
21965: LD_INT 4
21967: PUSH
21968: FOR_TO
21969: IFFALSE 21990
// SetSkill ( i , j , 10 ) ;
21971: LD_VAR 0 1
21975: PPUSH
21976: LD_VAR 0 3
21980: PPUSH
21981: LD_INT 10
21983: PPUSH
21984: CALL_OW 237
21988: GO 21968
21990: POP
21991: POP
21992: GO 21952
21994: POP
21995: POP
// end ;
21996: PPOPN 3
21998: END
// every 0 0$1 trigger s30 do var i , tmp ;
21999: LD_EXP 81
22003: IFFALSE 22072
22005: GO 22007
22007: DISABLE
22008: LD_INT 0
22010: PPUSH
22011: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22012: LD_ADDR_VAR 0 2
22016: PUSH
22017: LD_INT 22
22019: PUSH
22020: LD_OWVAR 2
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PPUSH
22029: CALL_OW 69
22033: ST_TO_ADDR
// if not tmp then
22034: LD_VAR 0 2
22038: NOT
22039: IFFALSE 22043
// exit ;
22041: GO 22072
// for i in tmp do
22043: LD_ADDR_VAR 0 1
22047: PUSH
22048: LD_VAR 0 2
22052: PUSH
22053: FOR_IN
22054: IFFALSE 22070
// SetLives ( i , 300 ) ;
22056: LD_VAR 0 1
22060: PPUSH
22061: LD_INT 300
22063: PPUSH
22064: CALL_OW 234
22068: GO 22053
22070: POP
22071: POP
// end ;
22072: PPOPN 2
22074: END
// every 0 0$1 trigger s60 do var i , tmp ;
22075: LD_EXP 82
22079: IFFALSE 22148
22081: GO 22083
22083: DISABLE
22084: LD_INT 0
22086: PPUSH
22087: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22088: LD_ADDR_VAR 0 2
22092: PUSH
22093: LD_INT 22
22095: PUSH
22096: LD_OWVAR 2
22100: PUSH
22101: EMPTY
22102: LIST
22103: LIST
22104: PPUSH
22105: CALL_OW 69
22109: ST_TO_ADDR
// if not tmp then
22110: LD_VAR 0 2
22114: NOT
22115: IFFALSE 22119
// exit ;
22117: GO 22148
// for i in tmp do
22119: LD_ADDR_VAR 0 1
22123: PUSH
22124: LD_VAR 0 2
22128: PUSH
22129: FOR_IN
22130: IFFALSE 22146
// SetLives ( i , 600 ) ;
22132: LD_VAR 0 1
22136: PPUSH
22137: LD_INT 600
22139: PPUSH
22140: CALL_OW 234
22144: GO 22129
22146: POP
22147: POP
// end ;
22148: PPOPN 2
22150: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22151: LD_INT 0
22153: PPUSH
// case cmd of 301 :
22154: LD_VAR 0 1
22158: PUSH
22159: LD_INT 301
22161: DOUBLE
22162: EQUAL
22163: IFTRUE 22167
22165: GO 22199
22167: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22168: LD_VAR 0 6
22172: PPUSH
22173: LD_VAR 0 7
22177: PPUSH
22178: LD_VAR 0 8
22182: PPUSH
22183: LD_VAR 0 4
22187: PPUSH
22188: LD_VAR 0 5
22192: PPUSH
22193: CALL 23412 0 5
22197: GO 22320
22199: LD_INT 302
22201: DOUBLE
22202: EQUAL
22203: IFTRUE 22207
22205: GO 22244
22207: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22208: LD_VAR 0 6
22212: PPUSH
22213: LD_VAR 0 7
22217: PPUSH
22218: LD_VAR 0 8
22222: PPUSH
22223: LD_VAR 0 9
22227: PPUSH
22228: LD_VAR 0 4
22232: PPUSH
22233: LD_VAR 0 5
22237: PPUSH
22238: CALL 23503 0 6
22242: GO 22320
22244: LD_INT 303
22246: DOUBLE
22247: EQUAL
22248: IFTRUE 22252
22250: GO 22289
22252: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22253: LD_VAR 0 6
22257: PPUSH
22258: LD_VAR 0 7
22262: PPUSH
22263: LD_VAR 0 8
22267: PPUSH
22268: LD_VAR 0 9
22272: PPUSH
22273: LD_VAR 0 4
22277: PPUSH
22278: LD_VAR 0 5
22282: PPUSH
22283: CALL 22325 0 6
22287: GO 22320
22289: LD_INT 304
22291: DOUBLE
22292: EQUAL
22293: IFTRUE 22297
22295: GO 22319
22297: POP
// hHackTeleport ( unit , x , y ) ; end ;
22298: LD_VAR 0 2
22302: PPUSH
22303: LD_VAR 0 4
22307: PPUSH
22308: LD_VAR 0 5
22312: PPUSH
22313: CALL 24096 0 3
22317: GO 22320
22319: POP
// end ;
22320: LD_VAR 0 12
22324: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22325: LD_INT 0
22327: PPUSH
22328: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22329: LD_VAR 0 1
22333: PUSH
22334: LD_INT 1
22336: LESS
22337: IFTRUE 22349
22339: PUSH
22340: LD_VAR 0 1
22344: PUSH
22345: LD_INT 3
22347: GREATER
22348: OR
22349: IFTRUE 22367
22351: PUSH
22352: LD_VAR 0 5
22356: PPUSH
22357: LD_VAR 0 6
22361: PPUSH
22362: CALL_OW 428
22366: OR
22367: IFFALSE 22371
// exit ;
22369: GO 23099
// uc_side := your_side ;
22371: LD_ADDR_OWVAR 20
22375: PUSH
22376: LD_OWVAR 2
22380: ST_TO_ADDR
// uc_nation := nation ;
22381: LD_ADDR_OWVAR 21
22385: PUSH
22386: LD_VAR 0 1
22390: ST_TO_ADDR
// bc_level = 1 ;
22391: LD_ADDR_OWVAR 43
22395: PUSH
22396: LD_INT 1
22398: ST_TO_ADDR
// case btype of 1 :
22399: LD_VAR 0 2
22403: PUSH
22404: LD_INT 1
22406: DOUBLE
22407: EQUAL
22408: IFTRUE 22412
22410: GO 22423
22412: POP
// bc_type := b_depot ; 2 :
22413: LD_ADDR_OWVAR 42
22417: PUSH
22418: LD_INT 0
22420: ST_TO_ADDR
22421: GO 23043
22423: LD_INT 2
22425: DOUBLE
22426: EQUAL
22427: IFTRUE 22431
22429: GO 22442
22431: POP
// bc_type := b_warehouse ; 3 :
22432: LD_ADDR_OWVAR 42
22436: PUSH
22437: LD_INT 1
22439: ST_TO_ADDR
22440: GO 23043
22442: LD_INT 3
22444: DOUBLE
22445: EQUAL
22446: IFTRUE 22450
22448: GO 22461
22450: POP
// bc_type := b_lab ; 4 .. 9 :
22451: LD_ADDR_OWVAR 42
22455: PUSH
22456: LD_INT 6
22458: ST_TO_ADDR
22459: GO 23043
22461: LD_INT 4
22463: DOUBLE
22464: GREATEREQUAL
22465: IFFALSE 22473
22467: LD_INT 9
22469: DOUBLE
22470: LESSEQUAL
22471: IFTRUE 22475
22473: GO 22535
22475: POP
// begin bc_type := b_lab_half ;
22476: LD_ADDR_OWVAR 42
22480: PUSH
22481: LD_INT 7
22483: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22484: LD_ADDR_OWVAR 44
22488: PUSH
22489: LD_INT 10
22491: PUSH
22492: LD_INT 11
22494: PUSH
22495: LD_INT 12
22497: PUSH
22498: LD_INT 15
22500: PUSH
22501: LD_INT 14
22503: PUSH
22504: LD_INT 13
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: PUSH
22515: LD_VAR 0 2
22519: PUSH
22520: LD_INT 3
22522: MINUS
22523: ARRAY
22524: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
22525: LD_ADDR_OWVAR 45
22529: PUSH
22530: LD_INT 9
22532: ST_TO_ADDR
// end ; 10 .. 13 :
22533: GO 23043
22535: LD_INT 10
22537: DOUBLE
22538: GREATEREQUAL
22539: IFFALSE 22547
22541: LD_INT 13
22543: DOUBLE
22544: LESSEQUAL
22545: IFTRUE 22549
22547: GO 22626
22549: POP
// begin bc_type := b_lab_full ;
22550: LD_ADDR_OWVAR 42
22554: PUSH
22555: LD_INT 8
22557: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22558: LD_ADDR_OWVAR 44
22562: PUSH
22563: LD_INT 10
22565: PUSH
22566: LD_INT 12
22568: PUSH
22569: LD_INT 14
22571: PUSH
22572: LD_INT 13
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: PUSH
22581: LD_VAR 0 2
22585: PUSH
22586: LD_INT 9
22588: MINUS
22589: ARRAY
22590: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22591: LD_ADDR_OWVAR 45
22595: PUSH
22596: LD_INT 11
22598: PUSH
22599: LD_INT 15
22601: PUSH
22602: LD_INT 12
22604: PUSH
22605: LD_INT 15
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: PUSH
22614: LD_VAR 0 2
22618: PUSH
22619: LD_INT 9
22621: MINUS
22622: ARRAY
22623: ST_TO_ADDR
// end ; 14 :
22624: GO 23043
22626: LD_INT 14
22628: DOUBLE
22629: EQUAL
22630: IFTRUE 22634
22632: GO 22645
22634: POP
// bc_type := b_workshop ; 15 :
22635: LD_ADDR_OWVAR 42
22639: PUSH
22640: LD_INT 2
22642: ST_TO_ADDR
22643: GO 23043
22645: LD_INT 15
22647: DOUBLE
22648: EQUAL
22649: IFTRUE 22653
22651: GO 22664
22653: POP
// bc_type := b_factory ; 16 :
22654: LD_ADDR_OWVAR 42
22658: PUSH
22659: LD_INT 3
22661: ST_TO_ADDR
22662: GO 23043
22664: LD_INT 16
22666: DOUBLE
22667: EQUAL
22668: IFTRUE 22672
22670: GO 22683
22672: POP
// bc_type := b_ext_gun ; 17 :
22673: LD_ADDR_OWVAR 42
22677: PUSH
22678: LD_INT 17
22680: ST_TO_ADDR
22681: GO 23043
22683: LD_INT 17
22685: DOUBLE
22686: EQUAL
22687: IFTRUE 22691
22689: GO 22719
22691: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22692: LD_ADDR_OWVAR 42
22696: PUSH
22697: LD_INT 19
22699: PUSH
22700: LD_INT 23
22702: PUSH
22703: LD_INT 19
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: LIST
22710: PUSH
22711: LD_VAR 0 1
22715: ARRAY
22716: ST_TO_ADDR
22717: GO 23043
22719: LD_INT 18
22721: DOUBLE
22722: EQUAL
22723: IFTRUE 22727
22725: GO 22738
22727: POP
// bc_type := b_ext_radar ; 19 :
22728: LD_ADDR_OWVAR 42
22732: PUSH
22733: LD_INT 20
22735: ST_TO_ADDR
22736: GO 23043
22738: LD_INT 19
22740: DOUBLE
22741: EQUAL
22742: IFTRUE 22746
22744: GO 22757
22746: POP
// bc_type := b_ext_radio ; 20 :
22747: LD_ADDR_OWVAR 42
22751: PUSH
22752: LD_INT 22
22754: ST_TO_ADDR
22755: GO 23043
22757: LD_INT 20
22759: DOUBLE
22760: EQUAL
22761: IFTRUE 22765
22763: GO 22776
22765: POP
// bc_type := b_ext_siberium ; 21 :
22766: LD_ADDR_OWVAR 42
22770: PUSH
22771: LD_INT 21
22773: ST_TO_ADDR
22774: GO 23043
22776: LD_INT 21
22778: DOUBLE
22779: EQUAL
22780: IFTRUE 22784
22782: GO 22795
22784: POP
// bc_type := b_ext_computer ; 22 :
22785: LD_ADDR_OWVAR 42
22789: PUSH
22790: LD_INT 24
22792: ST_TO_ADDR
22793: GO 23043
22795: LD_INT 22
22797: DOUBLE
22798: EQUAL
22799: IFTRUE 22803
22801: GO 22814
22803: POP
// bc_type := b_ext_track ; 23 :
22804: LD_ADDR_OWVAR 42
22808: PUSH
22809: LD_INT 16
22811: ST_TO_ADDR
22812: GO 23043
22814: LD_INT 23
22816: DOUBLE
22817: EQUAL
22818: IFTRUE 22822
22820: GO 22833
22822: POP
// bc_type := b_ext_laser ; 24 :
22823: LD_ADDR_OWVAR 42
22827: PUSH
22828: LD_INT 25
22830: ST_TO_ADDR
22831: GO 23043
22833: LD_INT 24
22835: DOUBLE
22836: EQUAL
22837: IFTRUE 22841
22839: GO 22852
22841: POP
// bc_type := b_control_tower ; 25 :
22842: LD_ADDR_OWVAR 42
22846: PUSH
22847: LD_INT 36
22849: ST_TO_ADDR
22850: GO 23043
22852: LD_INT 25
22854: DOUBLE
22855: EQUAL
22856: IFTRUE 22860
22858: GO 22871
22860: POP
// bc_type := b_breastwork ; 26 :
22861: LD_ADDR_OWVAR 42
22865: PUSH
22866: LD_INT 31
22868: ST_TO_ADDR
22869: GO 23043
22871: LD_INT 26
22873: DOUBLE
22874: EQUAL
22875: IFTRUE 22879
22877: GO 22890
22879: POP
// bc_type := b_bunker ; 27 :
22880: LD_ADDR_OWVAR 42
22884: PUSH
22885: LD_INT 32
22887: ST_TO_ADDR
22888: GO 23043
22890: LD_INT 27
22892: DOUBLE
22893: EQUAL
22894: IFTRUE 22898
22896: GO 22909
22898: POP
// bc_type := b_turret ; 28 :
22899: LD_ADDR_OWVAR 42
22903: PUSH
22904: LD_INT 33
22906: ST_TO_ADDR
22907: GO 23043
22909: LD_INT 28
22911: DOUBLE
22912: EQUAL
22913: IFTRUE 22917
22915: GO 22928
22917: POP
// bc_type := b_armoury ; 29 :
22918: LD_ADDR_OWVAR 42
22922: PUSH
22923: LD_INT 4
22925: ST_TO_ADDR
22926: GO 23043
22928: LD_INT 29
22930: DOUBLE
22931: EQUAL
22932: IFTRUE 22936
22934: GO 22947
22936: POP
// bc_type := b_barracks ; 30 :
22937: LD_ADDR_OWVAR 42
22941: PUSH
22942: LD_INT 5
22944: ST_TO_ADDR
22945: GO 23043
22947: LD_INT 30
22949: DOUBLE
22950: EQUAL
22951: IFTRUE 22955
22953: GO 22966
22955: POP
// bc_type := b_solar_power ; 31 :
22956: LD_ADDR_OWVAR 42
22960: PUSH
22961: LD_INT 27
22963: ST_TO_ADDR
22964: GO 23043
22966: LD_INT 31
22968: DOUBLE
22969: EQUAL
22970: IFTRUE 22974
22972: GO 22985
22974: POP
// bc_type := b_oil_power ; 32 :
22975: LD_ADDR_OWVAR 42
22979: PUSH
22980: LD_INT 26
22982: ST_TO_ADDR
22983: GO 23043
22985: LD_INT 32
22987: DOUBLE
22988: EQUAL
22989: IFTRUE 22993
22991: GO 23004
22993: POP
// bc_type := b_siberite_power ; 33 :
22994: LD_ADDR_OWVAR 42
22998: PUSH
22999: LD_INT 28
23001: ST_TO_ADDR
23002: GO 23043
23004: LD_INT 33
23006: DOUBLE
23007: EQUAL
23008: IFTRUE 23012
23010: GO 23023
23012: POP
// bc_type := b_oil_mine ; 34 :
23013: LD_ADDR_OWVAR 42
23017: PUSH
23018: LD_INT 29
23020: ST_TO_ADDR
23021: GO 23043
23023: LD_INT 34
23025: DOUBLE
23026: EQUAL
23027: IFTRUE 23031
23029: GO 23042
23031: POP
// bc_type := b_siberite_mine ; end ;
23032: LD_ADDR_OWVAR 42
23036: PUSH
23037: LD_INT 30
23039: ST_TO_ADDR
23040: GO 23043
23042: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23043: LD_ADDR_VAR 0 8
23047: PUSH
23048: LD_VAR 0 5
23052: PPUSH
23053: LD_VAR 0 6
23057: PPUSH
23058: LD_VAR 0 3
23062: PPUSH
23063: CALL_OW 47
23067: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23068: LD_OWVAR 42
23072: PUSH
23073: LD_INT 32
23075: PUSH
23076: LD_INT 33
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: IN
23083: IFFALSE 23099
// PlaceWeaponTurret ( b , weapon ) ;
23085: LD_VAR 0 8
23089: PPUSH
23090: LD_VAR 0 4
23094: PPUSH
23095: CALL_OW 431
// end ;
23099: LD_VAR 0 7
23103: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23104: LD_INT 0
23106: PPUSH
23107: PPUSH
23108: PPUSH
23109: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23110: LD_ADDR_VAR 0 4
23114: PUSH
23115: LD_INT 22
23117: PUSH
23118: LD_OWVAR 2
23122: PUSH
23123: EMPTY
23124: LIST
23125: LIST
23126: PUSH
23127: LD_INT 2
23129: PUSH
23130: LD_INT 30
23132: PUSH
23133: LD_INT 0
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PUSH
23140: LD_INT 30
23142: PUSH
23143: LD_INT 1
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: LIST
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: PPUSH
23159: CALL_OW 69
23163: ST_TO_ADDR
// if not tmp then
23164: LD_VAR 0 4
23168: NOT
23169: IFFALSE 23173
// exit ;
23171: GO 23232
// for i in tmp do
23173: LD_ADDR_VAR 0 2
23177: PUSH
23178: LD_VAR 0 4
23182: PUSH
23183: FOR_IN
23184: IFFALSE 23230
// for j = 1 to 3 do
23186: LD_ADDR_VAR 0 3
23190: PUSH
23191: DOUBLE
23192: LD_INT 1
23194: DEC
23195: ST_TO_ADDR
23196: LD_INT 3
23198: PUSH
23199: FOR_TO
23200: IFFALSE 23226
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23202: LD_VAR 0 2
23206: PPUSH
23207: CALL_OW 274
23211: PPUSH
23212: LD_VAR 0 3
23216: PPUSH
23217: LD_INT 99999
23219: PPUSH
23220: CALL_OW 277
23224: GO 23199
23226: POP
23227: POP
23228: GO 23183
23230: POP
23231: POP
// end ;
23232: LD_VAR 0 1
23236: RET
// export function hHackSetLevel10 ; var i , j ; begin
23237: LD_INT 0
23239: PPUSH
23240: PPUSH
23241: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23242: LD_ADDR_VAR 0 2
23246: PUSH
23247: LD_INT 21
23249: PUSH
23250: LD_INT 1
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: PPUSH
23257: CALL_OW 69
23261: PUSH
23262: FOR_IN
23263: IFFALSE 23315
// if IsSelected ( i ) then
23265: LD_VAR 0 2
23269: PPUSH
23270: CALL_OW 306
23274: IFFALSE 23313
// begin for j := 1 to 4 do
23276: LD_ADDR_VAR 0 3
23280: PUSH
23281: DOUBLE
23282: LD_INT 1
23284: DEC
23285: ST_TO_ADDR
23286: LD_INT 4
23288: PUSH
23289: FOR_TO
23290: IFFALSE 23311
// SetSkill ( i , j , 10 ) ;
23292: LD_VAR 0 2
23296: PPUSH
23297: LD_VAR 0 3
23301: PPUSH
23302: LD_INT 10
23304: PPUSH
23305: CALL_OW 237
23309: GO 23289
23311: POP
23312: POP
// end ;
23313: GO 23262
23315: POP
23316: POP
// end ;
23317: LD_VAR 0 1
23321: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23322: LD_INT 0
23324: PPUSH
23325: PPUSH
23326: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23327: LD_ADDR_VAR 0 2
23331: PUSH
23332: LD_INT 22
23334: PUSH
23335: LD_OWVAR 2
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: PUSH
23344: LD_INT 21
23346: PUSH
23347: LD_INT 1
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PPUSH
23358: CALL_OW 69
23362: PUSH
23363: FOR_IN
23364: IFFALSE 23405
// begin for j := 1 to 4 do
23366: LD_ADDR_VAR 0 3
23370: PUSH
23371: DOUBLE
23372: LD_INT 1
23374: DEC
23375: ST_TO_ADDR
23376: LD_INT 4
23378: PUSH
23379: FOR_TO
23380: IFFALSE 23401
// SetSkill ( i , j , 10 ) ;
23382: LD_VAR 0 2
23386: PPUSH
23387: LD_VAR 0 3
23391: PPUSH
23392: LD_INT 10
23394: PPUSH
23395: CALL_OW 237
23399: GO 23379
23401: POP
23402: POP
// end ;
23403: GO 23363
23405: POP
23406: POP
// end ;
23407: LD_VAR 0 1
23411: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23412: LD_INT 0
23414: PPUSH
// uc_side := your_side ;
23415: LD_ADDR_OWVAR 20
23419: PUSH
23420: LD_OWVAR 2
23424: ST_TO_ADDR
// uc_nation := nation ;
23425: LD_ADDR_OWVAR 21
23429: PUSH
23430: LD_VAR 0 1
23434: ST_TO_ADDR
// InitHc ;
23435: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23439: LD_INT 0
23441: PPUSH
23442: LD_VAR 0 2
23446: PPUSH
23447: LD_VAR 0 3
23451: PPUSH
23452: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23456: LD_VAR 0 4
23460: PPUSH
23461: LD_VAR 0 5
23465: PPUSH
23466: CALL_OW 428
23470: PUSH
23471: LD_INT 0
23473: EQUAL
23474: IFFALSE 23498
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23476: CALL_OW 44
23480: PPUSH
23481: LD_VAR 0 4
23485: PPUSH
23486: LD_VAR 0 5
23490: PPUSH
23491: LD_INT 1
23493: PPUSH
23494: CALL_OW 48
// end ;
23498: LD_VAR 0 6
23502: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23503: LD_INT 0
23505: PPUSH
23506: PPUSH
// uc_side := your_side ;
23507: LD_ADDR_OWVAR 20
23511: PUSH
23512: LD_OWVAR 2
23516: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23517: LD_VAR 0 1
23521: PUSH
23522: LD_INT 1
23524: PUSH
23525: LD_INT 2
23527: PUSH
23528: LD_INT 3
23530: PUSH
23531: LD_INT 4
23533: PUSH
23534: LD_INT 5
23536: PUSH
23537: EMPTY
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: IN
23544: IFFALSE 23556
// uc_nation := nation_american else
23546: LD_ADDR_OWVAR 21
23550: PUSH
23551: LD_INT 1
23553: ST_TO_ADDR
23554: GO 23599
// if chassis in [ 11 , 12 , 13 , 14 ] then
23556: LD_VAR 0 1
23560: PUSH
23561: LD_INT 11
23563: PUSH
23564: LD_INT 12
23566: PUSH
23567: LD_INT 13
23569: PUSH
23570: LD_INT 14
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: IN
23579: IFFALSE 23591
// uc_nation := nation_arabian else
23581: LD_ADDR_OWVAR 21
23585: PUSH
23586: LD_INT 2
23588: ST_TO_ADDR
23589: GO 23599
// uc_nation := nation_russian ;
23591: LD_ADDR_OWVAR 21
23595: PUSH
23596: LD_INT 3
23598: ST_TO_ADDR
// vc_chassis := chassis ;
23599: LD_ADDR_OWVAR 37
23603: PUSH
23604: LD_VAR 0 1
23608: ST_TO_ADDR
// vc_engine := engine ;
23609: LD_ADDR_OWVAR 39
23613: PUSH
23614: LD_VAR 0 2
23618: ST_TO_ADDR
// vc_control := control ;
23619: LD_ADDR_OWVAR 38
23623: PUSH
23624: LD_VAR 0 3
23628: ST_TO_ADDR
// vc_weapon := weapon ;
23629: LD_ADDR_OWVAR 40
23633: PUSH
23634: LD_VAR 0 4
23638: ST_TO_ADDR
// un := CreateVehicle ;
23639: LD_ADDR_VAR 0 8
23643: PUSH
23644: CALL_OW 45
23648: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23649: LD_VAR 0 8
23653: PPUSH
23654: LD_INT 0
23656: PPUSH
23657: LD_INT 5
23659: PPUSH
23660: CALL_OW 12
23664: PPUSH
23665: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23669: LD_VAR 0 8
23673: PPUSH
23674: LD_VAR 0 5
23678: PPUSH
23679: LD_VAR 0 6
23683: PPUSH
23684: LD_INT 1
23686: PPUSH
23687: CALL_OW 48
// end ;
23691: LD_VAR 0 7
23695: RET
// export hInvincible ; every 1 do
23696: GO 23698
23698: DISABLE
// hInvincible := [ ] ;
23699: LD_ADDR_EXP 83
23703: PUSH
23704: EMPTY
23705: ST_TO_ADDR
23706: END
// every 10 do var i ;
23707: GO 23709
23709: DISABLE
23710: LD_INT 0
23712: PPUSH
// begin enable ;
23713: ENABLE
// if not hInvincible then
23714: LD_EXP 83
23718: NOT
23719: IFFALSE 23723
// exit ;
23721: GO 23767
// for i in hInvincible do
23723: LD_ADDR_VAR 0 1
23727: PUSH
23728: LD_EXP 83
23732: PUSH
23733: FOR_IN
23734: IFFALSE 23765
// if GetLives ( i ) < 1000 then
23736: LD_VAR 0 1
23740: PPUSH
23741: CALL_OW 256
23745: PUSH
23746: LD_INT 1000
23748: LESS
23749: IFFALSE 23763
// SetLives ( i , 1000 ) ;
23751: LD_VAR 0 1
23755: PPUSH
23756: LD_INT 1000
23758: PPUSH
23759: CALL_OW 234
23763: GO 23733
23765: POP
23766: POP
// end ;
23767: PPOPN 1
23769: END
// export function hHackInvincible ; var i ; begin
23770: LD_INT 0
23772: PPUSH
23773: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23774: LD_ADDR_VAR 0 2
23778: PUSH
23779: LD_INT 2
23781: PUSH
23782: LD_INT 21
23784: PUSH
23785: LD_INT 1
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PUSH
23792: LD_INT 21
23794: PUSH
23795: LD_INT 2
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: LIST
23806: PPUSH
23807: CALL_OW 69
23811: PUSH
23812: FOR_IN
23813: IFFALSE 23874
// if IsSelected ( i ) then
23815: LD_VAR 0 2
23819: PPUSH
23820: CALL_OW 306
23824: IFFALSE 23872
// begin if i in hInvincible then
23826: LD_VAR 0 2
23830: PUSH
23831: LD_EXP 83
23835: IN
23836: IFFALSE 23856
// hInvincible := hInvincible diff i else
23838: LD_ADDR_EXP 83
23842: PUSH
23843: LD_EXP 83
23847: PUSH
23848: LD_VAR 0 2
23852: DIFF
23853: ST_TO_ADDR
23854: GO 23872
// hInvincible := hInvincible union i ;
23856: LD_ADDR_EXP 83
23860: PUSH
23861: LD_EXP 83
23865: PUSH
23866: LD_VAR 0 2
23870: UNION
23871: ST_TO_ADDR
// end ;
23872: GO 23812
23874: POP
23875: POP
// end ;
23876: LD_VAR 0 1
23880: RET
// export function hHackInvisible ; var i , j ; begin
23881: LD_INT 0
23883: PPUSH
23884: PPUSH
23885: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23886: LD_ADDR_VAR 0 2
23890: PUSH
23891: LD_INT 21
23893: PUSH
23894: LD_INT 1
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PPUSH
23901: CALL_OW 69
23905: PUSH
23906: FOR_IN
23907: IFFALSE 23931
// if IsSelected ( i ) then
23909: LD_VAR 0 2
23913: PPUSH
23914: CALL_OW 306
23918: IFFALSE 23929
// ComForceInvisible ( i ) ;
23920: LD_VAR 0 2
23924: PPUSH
23925: CALL_OW 496
23929: GO 23906
23931: POP
23932: POP
// end ;
23933: LD_VAR 0 1
23937: RET
// export function hHackChangeYourSide ; begin
23938: LD_INT 0
23940: PPUSH
// if your_side = 8 then
23941: LD_OWVAR 2
23945: PUSH
23946: LD_INT 8
23948: EQUAL
23949: IFFALSE 23961
// your_side := 0 else
23951: LD_ADDR_OWVAR 2
23955: PUSH
23956: LD_INT 0
23958: ST_TO_ADDR
23959: GO 23975
// your_side := your_side + 1 ;
23961: LD_ADDR_OWVAR 2
23965: PUSH
23966: LD_OWVAR 2
23970: PUSH
23971: LD_INT 1
23973: PLUS
23974: ST_TO_ADDR
// end ;
23975: LD_VAR 0 1
23979: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23980: LD_INT 0
23982: PPUSH
23983: PPUSH
23984: PPUSH
// for i in all_units do
23985: LD_ADDR_VAR 0 2
23989: PUSH
23990: LD_OWVAR 3
23994: PUSH
23995: FOR_IN
23996: IFFALSE 24074
// if IsSelected ( i ) then
23998: LD_VAR 0 2
24002: PPUSH
24003: CALL_OW 306
24007: IFFALSE 24072
// begin j := GetSide ( i ) ;
24009: LD_ADDR_VAR 0 3
24013: PUSH
24014: LD_VAR 0 2
24018: PPUSH
24019: CALL_OW 255
24023: ST_TO_ADDR
// if j = 8 then
24024: LD_VAR 0 3
24028: PUSH
24029: LD_INT 8
24031: EQUAL
24032: IFFALSE 24044
// j := 0 else
24034: LD_ADDR_VAR 0 3
24038: PUSH
24039: LD_INT 0
24041: ST_TO_ADDR
24042: GO 24058
// j := j + 1 ;
24044: LD_ADDR_VAR 0 3
24048: PUSH
24049: LD_VAR 0 3
24053: PUSH
24054: LD_INT 1
24056: PLUS
24057: ST_TO_ADDR
// SetSide ( i , j ) ;
24058: LD_VAR 0 2
24062: PPUSH
24063: LD_VAR 0 3
24067: PPUSH
24068: CALL_OW 235
// end ;
24072: GO 23995
24074: POP
24075: POP
// end ;
24076: LD_VAR 0 1
24080: RET
// export function hHackFog ; begin
24081: LD_INT 0
24083: PPUSH
// FogOff ( true ) ;
24084: LD_INT 1
24086: PPUSH
24087: CALL_OW 344
// end ;
24091: LD_VAR 0 1
24095: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24096: LD_INT 0
24098: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24099: LD_VAR 0 1
24103: PPUSH
24104: LD_VAR 0 2
24108: PPUSH
24109: LD_VAR 0 3
24113: PPUSH
24114: LD_INT 1
24116: PPUSH
24117: LD_INT 1
24119: PPUSH
24120: CALL_OW 483
// CenterOnXY ( x , y ) ;
24124: LD_VAR 0 2
24128: PPUSH
24129: LD_VAR 0 3
24133: PPUSH
24134: CALL_OW 84
// end ;
24138: LD_VAR 0 4
24142: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
24143: LD_INT 0
24145: PPUSH
24146: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
24147: LD_VAR 0 1
24151: NOT
24152: IFTRUE 24171
24154: PUSH
24155: LD_VAR 0 2
24159: PPUSH
24160: LD_VAR 0 3
24164: PPUSH
24165: CALL_OW 488
24169: NOT
24170: OR
24171: IFTRUE 24206
24173: PUSH
24174: LD_VAR 0 1
24178: PPUSH
24179: CALL_OW 266
24183: PUSH
24184: LD_INT 3
24186: NONEQUAL
24187: IFFALSE 24205
24189: PUSH
24190: LD_VAR 0 1
24194: PPUSH
24195: CALL_OW 247
24199: PUSH
24200: LD_INT 1
24202: EQUAL
24203: NOT
24204: AND
24205: OR
24206: IFFALSE 24210
// exit ;
24208: GO 24492
// if GetType ( factory ) = unit_human then
24210: LD_VAR 0 1
24214: PPUSH
24215: CALL_OW 247
24219: PUSH
24220: LD_INT 1
24222: EQUAL
24223: IFFALSE 24240
// factory := IsInUnit ( factory ) ;
24225: LD_ADDR_VAR 0 1
24229: PUSH
24230: LD_VAR 0 1
24234: PPUSH
24235: CALL_OW 310
24239: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
24240: LD_VAR 0 1
24244: PPUSH
24245: CALL_OW 266
24249: PUSH
24250: LD_INT 3
24252: NONEQUAL
24253: IFFALSE 24257
// exit ;
24255: GO 24492
// for i := 1 to Count ( factoryWaypoints ) do
24257: LD_ADDR_VAR 0 5
24261: PUSH
24262: DOUBLE
24263: LD_INT 1
24265: DEC
24266: ST_TO_ADDR
24267: LD_EXP 84
24271: PPUSH
24272: CALL 34025 0 1
24276: PUSH
24277: FOR_TO
24278: IFFALSE 24440
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
24280: LD_VAR 0 2
24284: PPUSH
24285: LD_VAR 0 3
24289: PPUSH
24290: CALL_OW 428
24294: PUSH
24295: LD_EXP 84
24299: PUSH
24300: LD_VAR 0 5
24304: ARRAY
24305: PUSH
24306: LD_INT 2
24308: ARRAY
24309: EQUAL
24310: IFFALSE 24342
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
24312: LD_ADDR_EXP 84
24316: PUSH
24317: LD_EXP 84
24321: PPUSH
24322: LD_VAR 0 5
24326: PPUSH
24327: CALL_OW 3
24331: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24332: CALL 24497 0 0
// exit ;
24336: POP
24337: POP
24338: GO 24492
// end else
24340: GO 24438
// if factory = factoryWaypoints [ i ] [ 2 ] then
24342: LD_VAR 0 1
24346: PUSH
24347: LD_EXP 84
24351: PUSH
24352: LD_VAR 0 5
24356: ARRAY
24357: PUSH
24358: LD_INT 2
24360: ARRAY
24361: EQUAL
24362: IFFALSE 24438
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
24364: LD_ADDR_EXP 84
24368: PUSH
24369: LD_EXP 84
24373: PPUSH
24374: LD_VAR 0 5
24378: PPUSH
24379: CALL_OW 3
24383: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
24384: LD_ADDR_EXP 84
24388: PUSH
24389: LD_EXP 84
24393: PPUSH
24394: LD_VAR 0 1
24398: PPUSH
24399: CALL_OW 255
24403: PUSH
24404: LD_VAR 0 1
24408: PUSH
24409: LD_VAR 0 2
24413: PUSH
24414: LD_VAR 0 3
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: PPUSH
24425: CALL 69957 0 2
24429: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24430: CALL 24497 0 0
// exit ;
24434: POP
24435: POP
24436: GO 24492
// end ; end ;
24438: GO 24277
24440: POP
24441: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
24442: LD_ADDR_EXP 84
24446: PUSH
24447: LD_EXP 84
24451: PPUSH
24452: LD_VAR 0 1
24456: PPUSH
24457: CALL_OW 255
24461: PUSH
24462: LD_VAR 0 1
24466: PUSH
24467: LD_VAR 0 2
24471: PUSH
24472: LD_VAR 0 3
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: PPUSH
24483: CALL 69957 0 2
24487: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24488: CALL 24497 0 0
// end ;
24492: LD_VAR 0 4
24496: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
24497: LD_INT 0
24499: PPUSH
24500: PPUSH
24501: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24502: LD_STRING resetFactoryWaypoint();
24504: PPUSH
24505: CALL_OW 559
// if factoryWaypoints then
24509: LD_EXP 84
24513: IFFALSE 24634
// begin list := factoryWaypoints ;
24515: LD_ADDR_VAR 0 3
24519: PUSH
24520: LD_EXP 84
24524: ST_TO_ADDR
// for i := 1 to list do
24525: LD_ADDR_VAR 0 2
24529: PUSH
24530: DOUBLE
24531: LD_INT 1
24533: DEC
24534: ST_TO_ADDR
24535: LD_VAR 0 3
24539: PUSH
24540: FOR_TO
24541: IFFALSE 24632
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24543: LD_STRING setFactoryWaypointXY(
24545: PUSH
24546: LD_VAR 0 3
24550: PUSH
24551: LD_VAR 0 2
24555: ARRAY
24556: PUSH
24557: LD_INT 1
24559: ARRAY
24560: STR
24561: PUSH
24562: LD_STRING ,
24564: STR
24565: PUSH
24566: LD_VAR 0 3
24570: PUSH
24571: LD_VAR 0 2
24575: ARRAY
24576: PUSH
24577: LD_INT 2
24579: ARRAY
24580: STR
24581: PUSH
24582: LD_STRING ,
24584: STR
24585: PUSH
24586: LD_VAR 0 3
24590: PUSH
24591: LD_VAR 0 2
24595: ARRAY
24596: PUSH
24597: LD_INT 3
24599: ARRAY
24600: STR
24601: PUSH
24602: LD_STRING ,
24604: STR
24605: PUSH
24606: LD_VAR 0 3
24610: PUSH
24611: LD_VAR 0 2
24615: ARRAY
24616: PUSH
24617: LD_INT 4
24619: ARRAY
24620: STR
24621: PUSH
24622: LD_STRING )
24624: STR
24625: PPUSH
24626: CALL_OW 559
24630: GO 24540
24632: POP
24633: POP
// end ; end ;
24634: LD_VAR 0 1
24638: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
24639: LD_INT 0
24641: PPUSH
// if HexInfo ( x , y ) = warehouse then
24642: LD_VAR 0 2
24646: PPUSH
24647: LD_VAR 0 3
24651: PPUSH
24652: CALL_OW 428
24656: PUSH
24657: LD_VAR 0 1
24661: EQUAL
24662: IFFALSE 24689
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
24664: LD_ADDR_EXP 86
24668: PUSH
24669: LD_EXP 86
24673: PPUSH
24674: LD_VAR 0 1
24678: PPUSH
24679: LD_INT 0
24681: PPUSH
24682: CALL_OW 1
24686: ST_TO_ADDR
24687: GO 24740
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
24689: LD_ADDR_EXP 86
24693: PUSH
24694: LD_EXP 86
24698: PPUSH
24699: LD_VAR 0 1
24703: PPUSH
24704: LD_VAR 0 1
24708: PPUSH
24709: CALL_OW 255
24713: PUSH
24714: LD_VAR 0 1
24718: PUSH
24719: LD_VAR 0 2
24723: PUSH
24724: LD_VAR 0 3
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: PPUSH
24735: CALL_OW 1
24739: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
24740: CALL 24749 0 0
// end ;
24744: LD_VAR 0 4
24748: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
24749: LD_INT 0
24751: PPUSH
24752: PPUSH
24753: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
24754: LD_STRING resetWarehouseGatheringPoints();
24756: PPUSH
24757: CALL_OW 559
// if warehouseGatheringPoints then
24761: LD_EXP 86
24765: IFFALSE 24891
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
24767: LD_ADDR_VAR 0 3
24771: PUSH
24772: LD_EXP 86
24776: PPUSH
24777: CALL 73891 0 1
24781: ST_TO_ADDR
// for i := 1 to list do
24782: LD_ADDR_VAR 0 2
24786: PUSH
24787: DOUBLE
24788: LD_INT 1
24790: DEC
24791: ST_TO_ADDR
24792: LD_VAR 0 3
24796: PUSH
24797: FOR_TO
24798: IFFALSE 24889
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24800: LD_STRING setWarehouseGatheringPointXY(
24802: PUSH
24803: LD_VAR 0 3
24807: PUSH
24808: LD_VAR 0 2
24812: ARRAY
24813: PUSH
24814: LD_INT 1
24816: ARRAY
24817: STR
24818: PUSH
24819: LD_STRING ,
24821: STR
24822: PUSH
24823: LD_VAR 0 3
24827: PUSH
24828: LD_VAR 0 2
24832: ARRAY
24833: PUSH
24834: LD_INT 2
24836: ARRAY
24837: STR
24838: PUSH
24839: LD_STRING ,
24841: STR
24842: PUSH
24843: LD_VAR 0 3
24847: PUSH
24848: LD_VAR 0 2
24852: ARRAY
24853: PUSH
24854: LD_INT 3
24856: ARRAY
24857: STR
24858: PUSH
24859: LD_STRING ,
24861: STR
24862: PUSH
24863: LD_VAR 0 3
24867: PUSH
24868: LD_VAR 0 2
24872: ARRAY
24873: PUSH
24874: LD_INT 4
24876: ARRAY
24877: STR
24878: PUSH
24879: LD_STRING )
24881: STR
24882: PPUSH
24883: CALL_OW 559
24887: GO 24797
24889: POP
24890: POP
// end ; end ;
24891: LD_VAR 0 1
24895: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
24896: LD_EXP 86
24900: IFFALSE 25595
24902: GO 24904
24904: DISABLE
24905: LD_INT 0
24907: PPUSH
24908: PPUSH
24909: PPUSH
24910: PPUSH
24911: PPUSH
24912: PPUSH
24913: PPUSH
24914: PPUSH
24915: PPUSH
// begin enable ;
24916: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
24917: LD_ADDR_VAR 0 3
24921: PUSH
24922: LD_EXP 86
24926: PPUSH
24927: CALL 73891 0 1
24931: ST_TO_ADDR
// if not list then
24932: LD_VAR 0 3
24936: NOT
24937: IFFALSE 24941
// exit ;
24939: GO 25595
// for i := 1 to list do
24941: LD_ADDR_VAR 0 1
24945: PUSH
24946: DOUBLE
24947: LD_INT 1
24949: DEC
24950: ST_TO_ADDR
24951: LD_VAR 0 3
24955: PUSH
24956: FOR_TO
24957: IFFALSE 25593
// begin depot := list [ i ] [ 2 ] ;
24959: LD_ADDR_VAR 0 8
24963: PUSH
24964: LD_VAR 0 3
24968: PUSH
24969: LD_VAR 0 1
24973: ARRAY
24974: PUSH
24975: LD_INT 2
24977: ARRAY
24978: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
24979: LD_ADDR_VAR 0 5
24983: PUSH
24984: LD_VAR 0 3
24988: PUSH
24989: LD_VAR 0 1
24993: ARRAY
24994: PUSH
24995: LD_INT 1
24997: ARRAY
24998: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
24999: LD_VAR 0 8
25003: PPUSH
25004: CALL_OW 301
25008: IFTRUE 25027
25010: PUSH
25011: LD_VAR 0 5
25015: PUSH
25016: LD_VAR 0 8
25020: PPUSH
25021: CALL_OW 255
25025: NONEQUAL
25026: OR
25027: IFFALSE 25056
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
25029: LD_ADDR_EXP 86
25033: PUSH
25034: LD_EXP 86
25038: PPUSH
25039: LD_VAR 0 8
25043: PPUSH
25044: LD_INT 0
25046: PPUSH
25047: CALL_OW 1
25051: ST_TO_ADDR
// exit ;
25052: POP
25053: POP
25054: GO 25595
// end ; x := list [ i ] [ 3 ] ;
25056: LD_ADDR_VAR 0 6
25060: PUSH
25061: LD_VAR 0 3
25065: PUSH
25066: LD_VAR 0 1
25070: ARRAY
25071: PUSH
25072: LD_INT 3
25074: ARRAY
25075: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
25076: LD_ADDR_VAR 0 7
25080: PUSH
25081: LD_VAR 0 3
25085: PUSH
25086: LD_VAR 0 1
25090: ARRAY
25091: PUSH
25092: LD_INT 4
25094: ARRAY
25095: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
25096: LD_ADDR_VAR 0 9
25100: PUSH
25101: LD_VAR 0 6
25105: PPUSH
25106: LD_VAR 0 7
25110: PPUSH
25111: LD_INT 16
25113: PPUSH
25114: CALL 72465 0 3
25118: ST_TO_ADDR
// if not cratesNearbyPoint then
25119: LD_VAR 0 9
25123: NOT
25124: IFFALSE 25130
// exit ;
25126: POP
25127: POP
25128: GO 25595
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
25130: LD_ADDR_VAR 0 4
25134: PUSH
25135: LD_INT 22
25137: PUSH
25138: LD_VAR 0 5
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: LD_INT 3
25149: PUSH
25150: LD_INT 60
25152: PUSH
25153: EMPTY
25154: LIST
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PUSH
25160: LD_INT 91
25162: PUSH
25163: LD_VAR 0 8
25167: PUSH
25168: LD_INT 6
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: LIST
25175: PUSH
25176: LD_INT 2
25178: PUSH
25179: LD_INT 25
25181: PUSH
25182: LD_INT 2
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: PUSH
25189: LD_INT 25
25191: PUSH
25192: LD_INT 16
25194: PUSH
25195: EMPTY
25196: LIST
25197: LIST
25198: PUSH
25199: EMPTY
25200: LIST
25201: LIST
25202: LIST
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: PPUSH
25210: CALL_OW 69
25214: PUSH
25215: LD_VAR 0 8
25219: PPUSH
25220: CALL_OW 313
25224: PPUSH
25225: LD_INT 3
25227: PUSH
25228: LD_INT 60
25230: PUSH
25231: EMPTY
25232: LIST
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: PUSH
25238: LD_INT 2
25240: PUSH
25241: LD_INT 25
25243: PUSH
25244: LD_INT 2
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: LD_INT 25
25253: PUSH
25254: LD_INT 16
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: LIST
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PPUSH
25270: CALL_OW 72
25274: UNION
25275: ST_TO_ADDR
// if tmp then
25276: LD_VAR 0 4
25280: IFFALSE 25360
// begin tmp := ShrinkArray ( tmp , 3 ) ;
25282: LD_ADDR_VAR 0 4
25286: PUSH
25287: LD_VAR 0 4
25291: PPUSH
25292: LD_INT 3
25294: PPUSH
25295: CALL 70272 0 2
25299: ST_TO_ADDR
// for j in tmp do
25300: LD_ADDR_VAR 0 2
25304: PUSH
25305: LD_VAR 0 4
25309: PUSH
25310: FOR_IN
25311: IFFALSE 25354
// begin if IsInUnit ( j ) then
25313: LD_VAR 0 2
25317: PPUSH
25318: CALL_OW 310
25322: IFFALSE 25333
// ComExit ( j ) ;
25324: LD_VAR 0 2
25328: PPUSH
25329: CALL 70355 0 1
// AddComCollect ( j , x , y ) ;
25333: LD_VAR 0 2
25337: PPUSH
25338: LD_VAR 0 6
25342: PPUSH
25343: LD_VAR 0 7
25347: PPUSH
25348: CALL_OW 177
// end ;
25352: GO 25310
25354: POP
25355: POP
// exit ;
25356: POP
25357: POP
25358: GO 25595
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
25360: LD_ADDR_VAR 0 4
25364: PUSH
25365: LD_INT 22
25367: PUSH
25368: LD_VAR 0 5
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: LD_INT 91
25379: PUSH
25380: LD_VAR 0 8
25384: PUSH
25385: LD_INT 8
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: LIST
25392: PUSH
25393: LD_INT 2
25395: PUSH
25396: LD_INT 34
25398: PUSH
25399: LD_INT 12
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: PUSH
25406: LD_INT 34
25408: PUSH
25409: LD_INT 51
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: PUSH
25416: LD_INT 34
25418: PUSH
25419: LD_INT 32
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: PUSH
25426: LD_INT 34
25428: PUSH
25429: LD_INT 89
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: PUSH
25443: EMPTY
25444: LIST
25445: LIST
25446: LIST
25447: PPUSH
25448: CALL_OW 69
25452: ST_TO_ADDR
// if tmp then
25453: LD_VAR 0 4
25457: IFFALSE 25591
// begin for j in tmp do
25459: LD_ADDR_VAR 0 2
25463: PUSH
25464: LD_VAR 0 4
25468: PUSH
25469: FOR_IN
25470: IFFALSE 25589
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
25472: LD_VAR 0 2
25476: PPUSH
25477: CALL_OW 262
25481: PUSH
25482: LD_INT 3
25484: EQUAL
25485: IFTRUE 25502
25487: PUSH
25488: LD_VAR 0 2
25492: PPUSH
25493: CALL_OW 261
25497: PUSH
25498: LD_INT 20
25500: GREATER
25501: OR
25502: IFFALSE 25516
25504: PUSH
25505: LD_VAR 0 2
25509: PPUSH
25510: CALL_OW 314
25514: NOT
25515: AND
25516: IFFALSE 25546
25518: PUSH
25519: LD_VAR 0 2
25523: PPUSH
25524: CALL_OW 263
25528: PUSH
25529: LD_INT 1
25531: NONEQUAL
25532: IFTRUE 25545
25534: PUSH
25535: LD_VAR 0 2
25539: PPUSH
25540: CALL_OW 311
25544: OR
25545: AND
25546: IFFALSE 25587
// begin ComCollect ( j , x , y ) ;
25548: LD_VAR 0 2
25552: PPUSH
25553: LD_VAR 0 6
25557: PPUSH
25558: LD_VAR 0 7
25562: PPUSH
25563: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
25567: LD_VAR 0 2
25571: PPUSH
25572: LD_VAR 0 8
25576: PPUSH
25577: CALL_OW 172
// exit ;
25581: POP
25582: POP
25583: POP
25584: POP
25585: GO 25595
// end ;
25587: GO 25469
25589: POP
25590: POP
// end ; end ;
25591: GO 24956
25593: POP
25594: POP
// end ; end_of_file
25595: PPOPN 9
25597: END
// export function SOS_UnitDestroyed ( un ) ; begin
25598: LD_INT 0
25600: PPUSH
// ComRadiation ( un ) ;
25601: LD_VAR 0 1
25605: PPUSH
25606: CALL 26687 0 1
// end ;
25610: LD_VAR 0 2
25614: RET
// export function SOS_UnitKamikazed ( un ) ; begin
25615: LD_INT 0
25617: PPUSH
// ComRadiation ( un ) ;
25618: LD_VAR 0 1
25622: PPUSH
25623: CALL 26687 0 1
// end ;
25627: LD_VAR 0 2
25631: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25632: LD_INT 0
25634: PPUSH
// end ;
25635: LD_VAR 0 4
25639: RET
// export function SOS_Command ( cmd ) ; begin
25640: LD_INT 0
25642: PPUSH
// end ;
25643: LD_VAR 0 2
25647: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25648: LD_INT 0
25650: PPUSH
// end ;
25651: LD_VAR 0 6
25655: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
25656: LD_INT 0
25658: PPUSH
25659: PPUSH
25660: PPUSH
25661: PPUSH
// if not vehicle or not factory then
25662: LD_VAR 0 1
25666: NOT
25667: IFTRUE 25676
25669: PUSH
25670: LD_VAR 0 2
25674: NOT
25675: OR
25676: IFFALSE 25680
// exit ;
25678: GO 26262
// if not factoryWaypoints then
25680: LD_EXP 84
25684: NOT
25685: IFFALSE 25689
// exit ;
25687: GO 26262
// for i := 1 to Count ( factoryWaypoints ) do
25689: LD_ADDR_VAR 0 4
25693: PUSH
25694: DOUBLE
25695: LD_INT 1
25697: DEC
25698: ST_TO_ADDR
25699: LD_EXP 84
25703: PPUSH
25704: CALL 34025 0 1
25708: PUSH
25709: FOR_TO
25710: IFFALSE 26260
// if factoryWaypoints [ i ] [ 2 ] = factory then
25712: LD_EXP 84
25716: PUSH
25717: LD_VAR 0 4
25721: ARRAY
25722: PUSH
25723: LD_INT 2
25725: ARRAY
25726: PUSH
25727: LD_VAR 0 2
25731: EQUAL
25732: IFFALSE 26258
// begin if GetControl ( vehicle ) = control_manual then
25734: LD_VAR 0 1
25738: PPUSH
25739: CALL_OW 263
25743: PUSH
25744: LD_INT 1
25746: EQUAL
25747: IFFALSE 26111
// begin driver := IsDrivenBy ( vehicle ) ;
25749: LD_ADDR_VAR 0 5
25753: PUSH
25754: LD_VAR 0 1
25758: PPUSH
25759: CALL_OW 311
25763: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
25764: LD_VAR 0 5
25768: PUSH
25769: LD_EXP 85
25773: IN
25774: IFTRUE 25788
25776: PUSH
25777: LD_VAR 0 1
25781: PUSH
25782: LD_EXP 85
25786: IN
25787: OR
25788: IFFALSE 25794
// exit ;
25790: POP
25791: POP
25792: GO 26262
// if not HasTask ( driver ) then
25794: LD_VAR 0 5
25798: PPUSH
25799: CALL_OW 314
25803: NOT
25804: IFFALSE 26109
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
25806: LD_ADDR_EXP 85
25810: PUSH
25811: LD_EXP 85
25815: PPUSH
25816: LD_VAR 0 5
25820: PPUSH
25821: CALL 69957 0 2
25825: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
25826: LD_ADDR_EXP 85
25830: PUSH
25831: LD_EXP 85
25835: PPUSH
25836: LD_VAR 0 1
25840: PPUSH
25841: CALL 69957 0 2
25845: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
25846: LD_ADDR_VAR 0 6
25850: PUSH
25851: LD_EXP 84
25855: PUSH
25856: LD_VAR 0 4
25860: ARRAY
25861: PUSH
25862: LD_INT 3
25864: ARRAY
25865: PPUSH
25866: LD_EXP 84
25870: PUSH
25871: LD_VAR 0 4
25875: ARRAY
25876: PUSH
25877: LD_INT 4
25879: ARRAY
25880: PPUSH
25881: CALL_OW 428
25885: ST_TO_ADDR
// if hex then
25886: LD_VAR 0 6
25890: IFFALSE 25908
// ComMoveUnit ( driver , hex ) else
25892: LD_VAR 0 5
25896: PPUSH
25897: LD_VAR 0 6
25901: PPUSH
25902: CALL_OW 112
25906: GO 25992
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
25908: LD_VAR 0 1
25912: PPUSH
25913: LD_EXP 84
25917: PUSH
25918: LD_VAR 0 4
25922: ARRAY
25923: PUSH
25924: LD_INT 3
25926: ARRAY
25927: PPUSH
25928: LD_EXP 84
25932: PUSH
25933: LD_VAR 0 4
25937: ARRAY
25938: PUSH
25939: LD_INT 4
25941: ARRAY
25942: PPUSH
25943: CALL_OW 297
25947: PUSH
25948: LD_INT 0
25950: GREATER
25951: IFFALSE 25992
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
25953: LD_VAR 0 5
25957: PPUSH
25958: LD_EXP 84
25962: PUSH
25963: LD_VAR 0 4
25967: ARRAY
25968: PUSH
25969: LD_INT 3
25971: ARRAY
25972: PPUSH
25973: LD_EXP 84
25977: PUSH
25978: LD_VAR 0 4
25982: ARRAY
25983: PUSH
25984: LD_INT 4
25986: ARRAY
25987: PPUSH
25988: CALL_OW 111
// AddComExitVehicle ( driver ) ;
25992: LD_VAR 0 5
25996: PPUSH
25997: CALL_OW 181
// if Multiplayer then
26001: LD_OWVAR 4
26005: IFFALSE 26054
// begin repeat wait ( 10 ) ;
26007: LD_INT 10
26009: PPUSH
26010: CALL_OW 67
// until not IsInUnit ( driver ) ;
26014: LD_VAR 0 5
26018: PPUSH
26019: CALL_OW 310
26023: NOT
26024: IFFALSE 26007
// if not HasTask ( driver ) then
26026: LD_VAR 0 5
26030: PPUSH
26031: CALL_OW 314
26035: NOT
26036: IFFALSE 26052
// ComEnterUnit ( driver , factory ) ;
26038: LD_VAR 0 5
26042: PPUSH
26043: LD_VAR 0 2
26047: PPUSH
26048: CALL_OW 120
// end else
26052: GO 26068
// AddComEnterUnit ( driver , factory ) ;
26054: LD_VAR 0 5
26058: PPUSH
26059: LD_VAR 0 2
26063: PPUSH
26064: CALL_OW 180
// wait ( 0 0$1 ) ;
26068: LD_INT 35
26070: PPUSH
26071: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
26075: LD_ADDR_EXP 85
26079: PUSH
26080: LD_EXP 85
26084: PUSH
26085: LD_VAR 0 5
26089: DIFF
26090: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
26091: LD_ADDR_EXP 85
26095: PUSH
26096: LD_EXP 85
26100: PUSH
26101: LD_VAR 0 1
26105: DIFF
26106: ST_TO_ADDR
// break ;
26107: GO 26260
// end ; end else
26109: GO 26258
// if GetControl ( vehicle ) = control_remote then
26111: LD_VAR 0 1
26115: PPUSH
26116: CALL_OW 263
26120: PUSH
26121: LD_INT 2
26123: EQUAL
26124: IFFALSE 26210
// begin wait ( 0 0$2 ) ;
26126: LD_INT 70
26128: PPUSH
26129: CALL_OW 67
// repeat wait ( 10 ) ;
26133: LD_INT 10
26135: PPUSH
26136: CALL_OW 67
// Connect ( vehicle ) ;
26140: LD_VAR 0 1
26144: PPUSH
26145: CALL 40269 0 1
// until IsControledBy ( vehicle ) ;
26149: LD_VAR 0 1
26153: PPUSH
26154: CALL_OW 312
26158: IFFALSE 26133
// wait ( 10 ) ;
26160: LD_INT 10
26162: PPUSH
26163: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
26167: LD_VAR 0 1
26171: PPUSH
26172: LD_EXP 84
26176: PUSH
26177: LD_VAR 0 4
26181: ARRAY
26182: PUSH
26183: LD_INT 3
26185: ARRAY
26186: PPUSH
26187: LD_EXP 84
26191: PUSH
26192: LD_VAR 0 4
26196: ARRAY
26197: PUSH
26198: LD_INT 4
26200: ARRAY
26201: PPUSH
26202: CALL_OW 111
// break ;
26206: GO 26260
// end else
26208: GO 26258
// begin wait ( 0 0$3 ) ;
26210: LD_INT 105
26212: PPUSH
26213: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
26217: LD_VAR 0 1
26221: PPUSH
26222: LD_EXP 84
26226: PUSH
26227: LD_VAR 0 4
26231: ARRAY
26232: PUSH
26233: LD_INT 3
26235: ARRAY
26236: PPUSH
26237: LD_EXP 84
26241: PUSH
26242: LD_VAR 0 4
26246: ARRAY
26247: PUSH
26248: LD_INT 4
26250: ARRAY
26251: PPUSH
26252: CALL_OW 111
// break ;
26256: GO 26260
// end ; end ;
26258: GO 25709
26260: POP
26261: POP
// end ;
26262: LD_VAR 0 3
26266: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26267: LD_INT 0
26269: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26270: LD_VAR 0 1
26274: PUSH
26275: LD_INT 250
26277: EQUAL
26278: IFFALSE 26295
26280: PUSH
26281: LD_VAR 0 2
26285: PPUSH
26286: CALL_OW 264
26290: PUSH
26291: LD_INT 81
26293: EQUAL
26294: AND
26295: IFFALSE 26316
// MinerPlaceMine ( unit , x , y ) ;
26297: LD_VAR 0 2
26301: PPUSH
26302: LD_VAR 0 4
26306: PPUSH
26307: LD_VAR 0 5
26311: PPUSH
26312: CALL 29448 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26316: LD_VAR 0 1
26320: PUSH
26321: LD_INT 251
26323: EQUAL
26324: IFFALSE 26341
26326: PUSH
26327: LD_VAR 0 2
26331: PPUSH
26332: CALL_OW 264
26336: PUSH
26337: LD_INT 81
26339: EQUAL
26340: AND
26341: IFFALSE 26362
// MinerDetonateMine ( unit , x , y ) ;
26343: LD_VAR 0 2
26347: PPUSH
26348: LD_VAR 0 4
26352: PPUSH
26353: LD_VAR 0 5
26357: PPUSH
26358: CALL 29727 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26362: LD_VAR 0 1
26366: PUSH
26367: LD_INT 252
26369: EQUAL
26370: IFFALSE 26387
26372: PUSH
26373: LD_VAR 0 2
26377: PPUSH
26378: CALL_OW 264
26382: PUSH
26383: LD_INT 81
26385: EQUAL
26386: AND
26387: IFFALSE 26408
// MinerCreateMinefield ( unit , x , y ) ;
26389: LD_VAR 0 2
26393: PPUSH
26394: LD_VAR 0 4
26398: PPUSH
26399: LD_VAR 0 5
26403: PPUSH
26404: CALL 30146 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26408: LD_VAR 0 1
26412: PUSH
26413: LD_INT 253
26415: EQUAL
26416: IFFALSE 26433
26418: PUSH
26419: LD_VAR 0 2
26423: PPUSH
26424: CALL_OW 257
26428: PUSH
26429: LD_INT 5
26431: EQUAL
26432: AND
26433: IFFALSE 26454
// ComBinocular ( unit , x , y ) ;
26435: LD_VAR 0 2
26439: PPUSH
26440: LD_VAR 0 4
26444: PPUSH
26445: LD_VAR 0 5
26449: PPUSH
26450: CALL 30521 0 3
// if selectedUnit then
26454: LD_VAR 0 3
26458: IFFALSE 26518
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26460: LD_VAR 0 1
26464: PUSH
26465: LD_INT 254
26467: EQUAL
26468: IFFALSE 26485
26470: PUSH
26471: LD_VAR 0 2
26475: PPUSH
26476: CALL_OW 264
26480: PUSH
26481: LD_INT 99
26483: EQUAL
26484: AND
26485: IFFALSE 26502
26487: PUSH
26488: LD_VAR 0 3
26492: PPUSH
26493: CALL_OW 263
26497: PUSH
26498: LD_INT 3
26500: EQUAL
26501: AND
26502: IFFALSE 26518
// HackDestroyVehicle ( unit , selectedUnit ) ;
26504: LD_VAR 0 2
26508: PPUSH
26509: LD_VAR 0 3
26513: PPUSH
26514: CALL 28808 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26518: LD_VAR 0 1
26522: PUSH
26523: LD_INT 255
26525: EQUAL
26526: IFFALSE 26550
26528: PUSH
26529: LD_VAR 0 2
26533: PPUSH
26534: CALL_OW 264
26538: PUSH
26539: LD_INT 14
26541: PUSH
26542: LD_INT 53
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: IN
26549: AND
26550: IFFALSE 26568
26552: PUSH
26553: LD_VAR 0 4
26557: PPUSH
26558: LD_VAR 0 5
26562: PPUSH
26563: CALL_OW 488
26567: AND
26568: IFFALSE 26592
// CutTreeXYR ( unit , x , y , 12 ) ;
26570: LD_VAR 0 2
26574: PPUSH
26575: LD_VAR 0 4
26579: PPUSH
26580: LD_VAR 0 5
26584: PPUSH
26585: LD_INT 12
26587: PPUSH
26588: CALL 26783 0 4
// if cmd = 256 then
26592: LD_VAR 0 1
26596: PUSH
26597: LD_INT 256
26599: EQUAL
26600: IFFALSE 26621
// SetFactoryWaypoint ( unit , x , y ) ;
26602: LD_VAR 0 2
26606: PPUSH
26607: LD_VAR 0 4
26611: PPUSH
26612: LD_VAR 0 5
26616: PPUSH
26617: CALL 24143 0 3
// if cmd = 257 then
26621: LD_VAR 0 1
26625: PUSH
26626: LD_INT 257
26628: EQUAL
26629: IFFALSE 26650
// SetWarehouseGatheringPoint ( unit , x , y ) ;
26631: LD_VAR 0 2
26635: PPUSH
26636: LD_VAR 0 4
26640: PPUSH
26641: LD_VAR 0 5
26645: PPUSH
26646: CALL 24639 0 3
// if cmd = 258 then
26650: LD_VAR 0 1
26654: PUSH
26655: LD_INT 258
26657: EQUAL
26658: IFFALSE 26682
// BurnTreeXYR ( unit , x , y , 8 ) ;
26660: LD_VAR 0 2
26664: PPUSH
26665: LD_VAR 0 4
26669: PPUSH
26670: LD_VAR 0 5
26674: PPUSH
26675: LD_INT 8
26677: PPUSH
26678: CALL 27183 0 4
// end ;
26682: LD_VAR 0 6
26686: RET
// export function ComRadiation ( un ) ; var eff ; begin
26687: LD_INT 0
26689: PPUSH
26690: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
26691: LD_VAR 0 1
26695: PPUSH
26696: CALL_OW 264
26700: PUSH
26701: LD_INT 91
26703: NONEQUAL
26704: IFFALSE 26708
// exit ;
26706: GO 26778
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26708: LD_INT 68
26710: PPUSH
26711: LD_VAR 0 1
26715: PPUSH
26716: CALL_OW 255
26720: PPUSH
26721: CALL_OW 321
26725: PUSH
26726: LD_INT 2
26728: EQUAL
26729: IFFALSE 26741
// eff := 50 else
26731: LD_ADDR_VAR 0 3
26735: PUSH
26736: LD_INT 50
26738: ST_TO_ADDR
26739: GO 26749
// eff := 25 ;
26741: LD_ADDR_VAR 0 3
26745: PUSH
26746: LD_INT 25
26748: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26749: LD_VAR 0 1
26753: PPUSH
26754: CALL_OW 250
26758: PPUSH
26759: LD_VAR 0 1
26763: PPUSH
26764: CALL_OW 251
26768: PPUSH
26769: LD_VAR 0 3
26773: PPUSH
26774: CALL_OW 495
// end ;
26778: LD_VAR 0 2
26782: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26783: LD_INT 0
26785: PPUSH
26786: PPUSH
26787: PPUSH
26788: PPUSH
26789: PPUSH
26790: PPUSH
26791: PPUSH
26792: PPUSH
26793: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
26794: LD_VAR 0 1
26798: PPUSH
26799: CALL_OW 302
26803: NOT
26804: IFTRUE 26823
26806: PUSH
26807: LD_VAR 0 2
26811: PPUSH
26812: LD_VAR 0 3
26816: PPUSH
26817: CALL_OW 488
26821: NOT
26822: OR
26823: IFTRUE 26832
26825: PUSH
26826: LD_VAR 0 4
26830: NOT
26831: OR
26832: IFFALSE 26836
// exit ;
26834: GO 27178
// list := [ ] ;
26836: LD_ADDR_VAR 0 13
26840: PUSH
26841: EMPTY
26842: ST_TO_ADDR
// if x - r < 0 then
26843: LD_VAR 0 2
26847: PUSH
26848: LD_VAR 0 4
26852: MINUS
26853: PUSH
26854: LD_INT 0
26856: LESS
26857: IFFALSE 26869
// min_x := 0 else
26859: LD_ADDR_VAR 0 7
26863: PUSH
26864: LD_INT 0
26866: ST_TO_ADDR
26867: GO 26885
// min_x := x - r ;
26869: LD_ADDR_VAR 0 7
26873: PUSH
26874: LD_VAR 0 2
26878: PUSH
26879: LD_VAR 0 4
26883: MINUS
26884: ST_TO_ADDR
// if y - r < 0 then
26885: LD_VAR 0 3
26889: PUSH
26890: LD_VAR 0 4
26894: MINUS
26895: PUSH
26896: LD_INT 0
26898: LESS
26899: IFFALSE 26911
// min_y := 0 else
26901: LD_ADDR_VAR 0 8
26905: PUSH
26906: LD_INT 0
26908: ST_TO_ADDR
26909: GO 26927
// min_y := y - r ;
26911: LD_ADDR_VAR 0 8
26915: PUSH
26916: LD_VAR 0 3
26920: PUSH
26921: LD_VAR 0 4
26925: MINUS
26926: ST_TO_ADDR
// max_x := x + r ;
26927: LD_ADDR_VAR 0 9
26931: PUSH
26932: LD_VAR 0 2
26936: PUSH
26937: LD_VAR 0 4
26941: PLUS
26942: ST_TO_ADDR
// max_y := y + r ;
26943: LD_ADDR_VAR 0 10
26947: PUSH
26948: LD_VAR 0 3
26952: PUSH
26953: LD_VAR 0 4
26957: PLUS
26958: ST_TO_ADDR
// for _x = min_x to max_x do
26959: LD_ADDR_VAR 0 11
26963: PUSH
26964: DOUBLE
26965: LD_VAR 0 7
26969: DEC
26970: ST_TO_ADDR
26971: LD_VAR 0 9
26975: PUSH
26976: FOR_TO
26977: IFFALSE 27096
// for _y = min_y to max_y do
26979: LD_ADDR_VAR 0 12
26983: PUSH
26984: DOUBLE
26985: LD_VAR 0 8
26989: DEC
26990: ST_TO_ADDR
26991: LD_VAR 0 10
26995: PUSH
26996: FOR_TO
26997: IFFALSE 27092
// begin if not ValidHex ( _x , _y ) then
26999: LD_VAR 0 11
27003: PPUSH
27004: LD_VAR 0 12
27008: PPUSH
27009: CALL_OW 488
27013: NOT
27014: IFFALSE 27018
// continue ;
27016: GO 26996
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27018: LD_VAR 0 11
27022: PPUSH
27023: LD_VAR 0 12
27027: PPUSH
27028: CALL_OW 351
27032: IFFALSE 27050
27034: PUSH
27035: LD_VAR 0 11
27039: PPUSH
27040: LD_VAR 0 12
27044: PPUSH
27045: CALL_OW 554
27049: AND
27050: IFFALSE 27090
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27052: LD_ADDR_VAR 0 13
27056: PUSH
27057: LD_VAR 0 13
27061: PPUSH
27062: LD_VAR 0 13
27066: PUSH
27067: LD_INT 1
27069: PLUS
27070: PPUSH
27071: LD_VAR 0 11
27075: PUSH
27076: LD_VAR 0 12
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PPUSH
27085: CALL_OW 2
27089: ST_TO_ADDR
// end ;
27090: GO 26996
27092: POP
27093: POP
27094: GO 26976
27096: POP
27097: POP
// if not list then
27098: LD_VAR 0 13
27102: NOT
27103: IFFALSE 27107
// exit ;
27105: GO 27178
// for i in list do
27107: LD_ADDR_VAR 0 6
27111: PUSH
27112: LD_VAR 0 13
27116: PUSH
27117: FOR_IN
27118: IFFALSE 27176
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27120: LD_VAR 0 1
27124: PPUSH
27125: LD_STRING M
27127: PUSH
27128: LD_VAR 0 6
27132: PUSH
27133: LD_INT 1
27135: ARRAY
27136: PUSH
27137: LD_VAR 0 6
27141: PUSH
27142: LD_INT 2
27144: ARRAY
27145: PUSH
27146: LD_INT 0
27148: PUSH
27149: LD_INT 0
27151: PUSH
27152: LD_INT 0
27154: PUSH
27155: LD_INT 0
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: PUSH
27167: EMPTY
27168: LIST
27169: PPUSH
27170: CALL_OW 447
27174: GO 27117
27176: POP
27177: POP
// end ;
27178: LD_VAR 0 5
27182: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
27183: LD_INT 0
27185: PPUSH
27186: PPUSH
27187: PPUSH
27188: PPUSH
27189: PPUSH
27190: PPUSH
27191: PPUSH
27192: PPUSH
27193: PPUSH
27194: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
27195: LD_VAR 0 1
27199: PPUSH
27200: CALL_OW 302
27204: NOT
27205: IFTRUE 27224
27207: PUSH
27208: LD_VAR 0 2
27212: PPUSH
27213: LD_VAR 0 3
27217: PPUSH
27218: CALL_OW 488
27222: NOT
27223: OR
27224: IFTRUE 27233
27226: PUSH
27227: LD_VAR 0 4
27231: NOT
27232: OR
27233: IFFALSE 27237
// exit ;
27235: GO 27754
// list := [ ] ;
27237: LD_ADDR_VAR 0 13
27241: PUSH
27242: EMPTY
27243: ST_TO_ADDR
// if x - r < 0 then
27244: LD_VAR 0 2
27248: PUSH
27249: LD_VAR 0 4
27253: MINUS
27254: PUSH
27255: LD_INT 0
27257: LESS
27258: IFFALSE 27270
// min_x := 0 else
27260: LD_ADDR_VAR 0 7
27264: PUSH
27265: LD_INT 0
27267: ST_TO_ADDR
27268: GO 27286
// min_x := x - r ;
27270: LD_ADDR_VAR 0 7
27274: PUSH
27275: LD_VAR 0 2
27279: PUSH
27280: LD_VAR 0 4
27284: MINUS
27285: ST_TO_ADDR
// if y - r < 0 then
27286: LD_VAR 0 3
27290: PUSH
27291: LD_VAR 0 4
27295: MINUS
27296: PUSH
27297: LD_INT 0
27299: LESS
27300: IFFALSE 27312
// min_y := 0 else
27302: LD_ADDR_VAR 0 8
27306: PUSH
27307: LD_INT 0
27309: ST_TO_ADDR
27310: GO 27328
// min_y := y - r ;
27312: LD_ADDR_VAR 0 8
27316: PUSH
27317: LD_VAR 0 3
27321: PUSH
27322: LD_VAR 0 4
27326: MINUS
27327: ST_TO_ADDR
// max_x := x + r ;
27328: LD_ADDR_VAR 0 9
27332: PUSH
27333: LD_VAR 0 2
27337: PUSH
27338: LD_VAR 0 4
27342: PLUS
27343: ST_TO_ADDR
// max_y := y + r ;
27344: LD_ADDR_VAR 0 10
27348: PUSH
27349: LD_VAR 0 3
27353: PUSH
27354: LD_VAR 0 4
27358: PLUS
27359: ST_TO_ADDR
// for _x = min_x to max_x do
27360: LD_ADDR_VAR 0 11
27364: PUSH
27365: DOUBLE
27366: LD_VAR 0 7
27370: DEC
27371: ST_TO_ADDR
27372: LD_VAR 0 9
27376: PUSH
27377: FOR_TO
27378: IFFALSE 27497
// for _y = min_y to max_y do
27380: LD_ADDR_VAR 0 12
27384: PUSH
27385: DOUBLE
27386: LD_VAR 0 8
27390: DEC
27391: ST_TO_ADDR
27392: LD_VAR 0 10
27396: PUSH
27397: FOR_TO
27398: IFFALSE 27493
// begin if not ValidHex ( _x , _y ) then
27400: LD_VAR 0 11
27404: PPUSH
27405: LD_VAR 0 12
27409: PPUSH
27410: CALL_OW 488
27414: NOT
27415: IFFALSE 27419
// continue ;
27417: GO 27397
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27419: LD_VAR 0 11
27423: PPUSH
27424: LD_VAR 0 12
27428: PPUSH
27429: CALL_OW 351
27433: IFFALSE 27451
27435: PUSH
27436: LD_VAR 0 11
27440: PPUSH
27441: LD_VAR 0 12
27445: PPUSH
27446: CALL_OW 554
27450: AND
27451: IFFALSE 27491
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27453: LD_ADDR_VAR 0 13
27457: PUSH
27458: LD_VAR 0 13
27462: PPUSH
27463: LD_VAR 0 13
27467: PUSH
27468: LD_INT 1
27470: PLUS
27471: PPUSH
27472: LD_VAR 0 11
27476: PUSH
27477: LD_VAR 0 12
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PPUSH
27486: CALL_OW 2
27490: ST_TO_ADDR
// end ;
27491: GO 27397
27493: POP
27494: POP
27495: GO 27377
27497: POP
27498: POP
// if not list then
27499: LD_VAR 0 13
27503: NOT
27504: IFFALSE 27508
// exit ;
27506: GO 27754
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
27508: LD_ADDR_VAR 0 13
27512: PUSH
27513: LD_VAR 0 1
27517: PPUSH
27518: LD_VAR 0 13
27522: PPUSH
27523: LD_INT 1
27525: PPUSH
27526: LD_INT 1
27528: PPUSH
27529: CALL 37397 0 4
27533: ST_TO_ADDR
// ComStop ( flame ) ;
27534: LD_VAR 0 1
27538: PPUSH
27539: CALL_OW 141
// for i in list do
27543: LD_ADDR_VAR 0 6
27547: PUSH
27548: LD_VAR 0 13
27552: PUSH
27553: FOR_IN
27554: IFFALSE 27585
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
27556: LD_VAR 0 1
27560: PPUSH
27561: LD_VAR 0 6
27565: PUSH
27566: LD_INT 1
27568: ARRAY
27569: PPUSH
27570: LD_VAR 0 6
27574: PUSH
27575: LD_INT 2
27577: ARRAY
27578: PPUSH
27579: CALL_OW 176
27583: GO 27553
27585: POP
27586: POP
// repeat wait ( 0 0$1 ) ;
27587: LD_INT 35
27589: PPUSH
27590: CALL_OW 67
// task := GetTaskList ( flame ) ;
27594: LD_ADDR_VAR 0 14
27598: PUSH
27599: LD_VAR 0 1
27603: PPUSH
27604: CALL_OW 437
27608: ST_TO_ADDR
// if not task then
27609: LD_VAR 0 14
27613: NOT
27614: IFFALSE 27618
// exit ;
27616: GO 27754
// if task [ 1 ] [ 1 ] <> | then
27618: LD_VAR 0 14
27622: PUSH
27623: LD_INT 1
27625: ARRAY
27626: PUSH
27627: LD_INT 1
27629: ARRAY
27630: PUSH
27631: LD_STRING |
27633: NONEQUAL
27634: IFFALSE 27638
// exit ;
27636: GO 27754
// _x := task [ 1 ] [ 2 ] ;
27638: LD_ADDR_VAR 0 11
27642: PUSH
27643: LD_VAR 0 14
27647: PUSH
27648: LD_INT 1
27650: ARRAY
27651: PUSH
27652: LD_INT 2
27654: ARRAY
27655: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
27656: LD_ADDR_VAR 0 12
27660: PUSH
27661: LD_VAR 0 14
27665: PUSH
27666: LD_INT 1
27668: ARRAY
27669: PUSH
27670: LD_INT 3
27672: ARRAY
27673: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
27674: LD_VAR 0 11
27678: PPUSH
27679: LD_VAR 0 12
27683: PPUSH
27684: CALL_OW 351
27688: NOT
27689: IFTRUE 27708
27691: PUSH
27692: LD_VAR 0 11
27696: PPUSH
27697: LD_VAR 0 12
27701: PPUSH
27702: CALL_OW 554
27706: NOT
27707: OR
27708: IFFALSE 27742
// begin task := Delete ( task , 1 ) ;
27710: LD_ADDR_VAR 0 14
27714: PUSH
27715: LD_VAR 0 14
27719: PPUSH
27720: LD_INT 1
27722: PPUSH
27723: CALL_OW 3
27727: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
27728: LD_VAR 0 1
27732: PPUSH
27733: LD_VAR 0 14
27737: PPUSH
27738: CALL_OW 446
// end ; until not HasTask ( flame ) ;
27742: LD_VAR 0 1
27746: PPUSH
27747: CALL_OW 314
27751: NOT
27752: IFFALSE 27587
// end ;
27754: LD_VAR 0 5
27758: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27759: LD_EXP 88
27763: NOT
27764: IFFALSE 27814
27766: GO 27768
27768: DISABLE
// begin initHack := true ;
27769: LD_ADDR_EXP 88
27773: PUSH
27774: LD_INT 1
27776: ST_TO_ADDR
// hackTanks := [ ] ;
27777: LD_ADDR_EXP 89
27781: PUSH
27782: EMPTY
27783: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27784: LD_ADDR_EXP 90
27788: PUSH
27789: EMPTY
27790: ST_TO_ADDR
// hackLimit := 3 ;
27791: LD_ADDR_EXP 91
27795: PUSH
27796: LD_INT 3
27798: ST_TO_ADDR
// hackDist := 12 ;
27799: LD_ADDR_EXP 92
27803: PUSH
27804: LD_INT 12
27806: ST_TO_ADDR
// hackCounter := [ ] ;
27807: LD_ADDR_EXP 93
27811: PUSH
27812: EMPTY
27813: ST_TO_ADDR
// end ;
27814: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27815: LD_EXP 88
27819: IFFALSE 27837
27821: PUSH
27822: LD_INT 34
27824: PUSH
27825: LD_INT 99
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PPUSH
27832: CALL_OW 69
27836: AND
27837: IFFALSE 28090
27839: GO 27841
27841: DISABLE
27842: LD_INT 0
27844: PPUSH
27845: PPUSH
// begin enable ;
27846: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27847: LD_ADDR_VAR 0 1
27851: PUSH
27852: LD_INT 34
27854: PUSH
27855: LD_INT 99
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: PPUSH
27862: CALL_OW 69
27866: PUSH
27867: FOR_IN
27868: IFFALSE 28088
// begin if not i in hackTanks then
27870: LD_VAR 0 1
27874: PUSH
27875: LD_EXP 89
27879: IN
27880: NOT
27881: IFFALSE 27964
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
27883: LD_ADDR_EXP 89
27887: PUSH
27888: LD_EXP 89
27892: PPUSH
27893: LD_EXP 89
27897: PUSH
27898: LD_INT 1
27900: PLUS
27901: PPUSH
27902: LD_VAR 0 1
27906: PPUSH
27907: CALL_OW 1
27911: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27912: LD_ADDR_EXP 90
27916: PUSH
27917: LD_EXP 90
27921: PPUSH
27922: LD_EXP 90
27926: PUSH
27927: LD_INT 1
27929: PLUS
27930: PPUSH
27931: EMPTY
27932: PPUSH
27933: CALL_OW 1
27937: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27938: LD_ADDR_EXP 93
27942: PUSH
27943: LD_EXP 93
27947: PPUSH
27948: LD_EXP 93
27952: PUSH
27953: LD_INT 1
27955: PLUS
27956: PPUSH
27957: EMPTY
27958: PPUSH
27959: CALL_OW 1
27963: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27964: LD_VAR 0 1
27968: PPUSH
27969: CALL_OW 302
27973: NOT
27974: IFFALSE 27987
// begin HackUnlinkAll ( i ) ;
27976: LD_VAR 0 1
27980: PPUSH
27981: CALL 28093 0 1
// continue ;
27985: GO 27867
// end ; HackCheckCapturedStatus ( i ) ;
27987: LD_VAR 0 1
27991: PPUSH
27992: CALL 28538 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27996: LD_ADDR_VAR 0 2
28000: PUSH
28001: LD_INT 81
28003: PUSH
28004: LD_VAR 0 1
28008: PPUSH
28009: CALL_OW 255
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: PUSH
28018: LD_INT 33
28020: PUSH
28021: LD_INT 3
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: PUSH
28028: LD_INT 91
28030: PUSH
28031: LD_VAR 0 1
28035: PUSH
28036: LD_EXP 92
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: LIST
28045: PUSH
28046: LD_INT 50
28048: PUSH
28049: EMPTY
28050: LIST
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: PPUSH
28058: CALL_OW 69
28062: ST_TO_ADDR
// if not tmp then
28063: LD_VAR 0 2
28067: NOT
28068: IFFALSE 28072
// continue ;
28070: GO 27867
// HackLink ( i , tmp ) ;
28072: LD_VAR 0 1
28076: PPUSH
28077: LD_VAR 0 2
28081: PPUSH
28082: CALL 28229 0 2
// end ;
28086: GO 27867
28088: POP
28089: POP
// end ;
28090: PPOPN 2
28092: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28093: LD_INT 0
28095: PPUSH
28096: PPUSH
28097: PPUSH
// if not hack in hackTanks then
28098: LD_VAR 0 1
28102: PUSH
28103: LD_EXP 89
28107: IN
28108: NOT
28109: IFFALSE 28113
// exit ;
28111: GO 28224
// index := GetElementIndex ( hackTanks , hack ) ;
28113: LD_ADDR_VAR 0 4
28117: PUSH
28118: LD_EXP 89
28122: PPUSH
28123: LD_VAR 0 1
28127: PPUSH
28128: CALL 36692 0 2
28132: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28133: LD_EXP 90
28137: PUSH
28138: LD_VAR 0 4
28142: ARRAY
28143: IFFALSE 28224
// begin for i in hackTanksCaptured [ index ] do
28145: LD_ADDR_VAR 0 3
28149: PUSH
28150: LD_EXP 90
28154: PUSH
28155: LD_VAR 0 4
28159: ARRAY
28160: PUSH
28161: FOR_IN
28162: IFFALSE 28188
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28164: LD_VAR 0 3
28168: PUSH
28169: LD_INT 1
28171: ARRAY
28172: PPUSH
28173: LD_VAR 0 3
28177: PUSH
28178: LD_INT 2
28180: ARRAY
28181: PPUSH
28182: CALL_OW 235
28186: GO 28161
28188: POP
28189: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28190: LD_ADDR_EXP 90
28194: PUSH
28195: LD_EXP 90
28199: PPUSH
28200: LD_VAR 0 4
28204: PPUSH
28205: EMPTY
28206: PPUSH
28207: CALL_OW 1
28211: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28212: LD_VAR 0 1
28216: PPUSH
28217: LD_INT 0
28219: PPUSH
28220: CALL_OW 505
// end ; end ;
28224: LD_VAR 0 2
28228: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28229: LD_INT 0
28231: PPUSH
28232: PPUSH
28233: PPUSH
// if not hack in hackTanks or not vehicles then
28234: LD_VAR 0 1
28238: PUSH
28239: LD_EXP 89
28243: IN
28244: NOT
28245: IFTRUE 28254
28247: PUSH
28248: LD_VAR 0 2
28252: NOT
28253: OR
28254: IFFALSE 28258
// exit ;
28256: GO 28533
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28258: LD_ADDR_VAR 0 2
28262: PUSH
28263: LD_VAR 0 1
28267: PPUSH
28268: LD_VAR 0 2
28272: PPUSH
28273: LD_INT 1
28275: PPUSH
28276: LD_INT 1
28278: PPUSH
28279: CALL 37344 0 4
28283: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28284: LD_ADDR_VAR 0 5
28288: PUSH
28289: LD_EXP 89
28293: PPUSH
28294: LD_VAR 0 1
28298: PPUSH
28299: CALL 36692 0 2
28303: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28304: LD_EXP 90
28308: PUSH
28309: LD_VAR 0 5
28313: ARRAY
28314: PUSH
28315: LD_EXP 91
28319: LESS
28320: IFFALSE 28509
// begin for i := 1 to vehicles do
28322: LD_ADDR_VAR 0 4
28326: PUSH
28327: DOUBLE
28328: LD_INT 1
28330: DEC
28331: ST_TO_ADDR
28332: LD_VAR 0 2
28336: PUSH
28337: FOR_TO
28338: IFFALSE 28507
// begin if hackTanksCaptured [ index ] = hackLimit then
28340: LD_EXP 90
28344: PUSH
28345: LD_VAR 0 5
28349: ARRAY
28350: PUSH
28351: LD_EXP 91
28355: EQUAL
28356: IFFALSE 28360
// break ;
28358: GO 28507
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28360: LD_ADDR_EXP 93
28364: PUSH
28365: LD_EXP 93
28369: PPUSH
28370: LD_VAR 0 5
28374: PPUSH
28375: LD_EXP 93
28379: PUSH
28380: LD_VAR 0 5
28384: ARRAY
28385: PUSH
28386: LD_INT 1
28388: PLUS
28389: PPUSH
28390: CALL_OW 1
28394: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28395: LD_ADDR_EXP 90
28399: PUSH
28400: LD_EXP 90
28404: PPUSH
28405: LD_VAR 0 5
28409: PUSH
28410: LD_EXP 90
28414: PUSH
28415: LD_VAR 0 5
28419: ARRAY
28420: PUSH
28421: LD_INT 1
28423: PLUS
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: PPUSH
28429: LD_VAR 0 2
28433: PUSH
28434: LD_VAR 0 4
28438: ARRAY
28439: PUSH
28440: LD_VAR 0 2
28444: PUSH
28445: LD_VAR 0 4
28449: ARRAY
28450: PPUSH
28451: CALL_OW 255
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PPUSH
28460: CALL 36909 0 3
28464: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28465: LD_VAR 0 2
28469: PUSH
28470: LD_VAR 0 4
28474: ARRAY
28475: PPUSH
28476: LD_VAR 0 1
28480: PPUSH
28481: CALL_OW 255
28485: PPUSH
28486: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28490: LD_VAR 0 2
28494: PUSH
28495: LD_VAR 0 4
28499: ARRAY
28500: PPUSH
28501: CALL_OW 141
// end ;
28505: GO 28337
28507: POP
28508: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28509: LD_VAR 0 1
28513: PPUSH
28514: LD_EXP 90
28518: PUSH
28519: LD_VAR 0 5
28523: ARRAY
28524: PUSH
28525: LD_INT 0
28527: PLUS
28528: PPUSH
28529: CALL_OW 505
// end ;
28533: LD_VAR 0 3
28537: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28538: LD_INT 0
28540: PPUSH
28541: PPUSH
28542: PPUSH
28543: PPUSH
// if not hack in hackTanks then
28544: LD_VAR 0 1
28548: PUSH
28549: LD_EXP 89
28553: IN
28554: NOT
28555: IFFALSE 28559
// exit ;
28557: GO 28803
// index := GetElementIndex ( hackTanks , hack ) ;
28559: LD_ADDR_VAR 0 4
28563: PUSH
28564: LD_EXP 89
28568: PPUSH
28569: LD_VAR 0 1
28573: PPUSH
28574: CALL 36692 0 2
28578: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28579: LD_ADDR_VAR 0 3
28583: PUSH
28584: DOUBLE
28585: LD_EXP 90
28589: PUSH
28590: LD_VAR 0 4
28594: ARRAY
28595: INC
28596: ST_TO_ADDR
28597: LD_INT 1
28599: PUSH
28600: FOR_DOWNTO
28601: IFFALSE 28777
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28603: LD_ADDR_VAR 0 5
28607: PUSH
28608: LD_EXP 90
28612: PUSH
28613: LD_VAR 0 4
28617: ARRAY
28618: PUSH
28619: LD_VAR 0 3
28623: ARRAY
28624: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28625: LD_VAR 0 5
28629: PUSH
28630: LD_INT 1
28632: ARRAY
28633: PPUSH
28634: CALL_OW 302
28638: NOT
28639: IFTRUE 28667
28641: PUSH
28642: LD_VAR 0 5
28646: PUSH
28647: LD_INT 1
28649: ARRAY
28650: PPUSH
28651: CALL_OW 255
28655: PUSH
28656: LD_VAR 0 1
28660: PPUSH
28661: CALL_OW 255
28665: NONEQUAL
28666: OR
28667: IFFALSE 28775
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28669: LD_VAR 0 5
28673: PUSH
28674: LD_INT 1
28676: ARRAY
28677: PPUSH
28678: CALL_OW 305
28682: IFFALSE 28710
28684: PUSH
28685: LD_VAR 0 5
28689: PUSH
28690: LD_INT 1
28692: ARRAY
28693: PPUSH
28694: CALL_OW 255
28698: PUSH
28699: LD_VAR 0 1
28703: PPUSH
28704: CALL_OW 255
28708: EQUAL
28709: AND
28710: IFFALSE 28734
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28712: LD_VAR 0 5
28716: PUSH
28717: LD_INT 1
28719: ARRAY
28720: PPUSH
28721: LD_VAR 0 5
28725: PUSH
28726: LD_INT 2
28728: ARRAY
28729: PPUSH
28730: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28734: LD_ADDR_EXP 90
28738: PUSH
28739: LD_EXP 90
28743: PPUSH
28744: LD_VAR 0 4
28748: PPUSH
28749: LD_EXP 90
28753: PUSH
28754: LD_VAR 0 4
28758: ARRAY
28759: PPUSH
28760: LD_VAR 0 3
28764: PPUSH
28765: CALL_OW 3
28769: PPUSH
28770: CALL_OW 1
28774: ST_TO_ADDR
// end ; end ;
28775: GO 28600
28777: POP
28778: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28779: LD_VAR 0 1
28783: PPUSH
28784: LD_EXP 90
28788: PUSH
28789: LD_VAR 0 4
28793: ARRAY
28794: PUSH
28795: LD_INT 0
28797: PLUS
28798: PPUSH
28799: CALL_OW 505
// end ;
28803: LD_VAR 0 2
28807: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28808: LD_INT 0
28810: PPUSH
28811: PPUSH
28812: PPUSH
28813: PPUSH
// if not hack in hackTanks then
28814: LD_VAR 0 1
28818: PUSH
28819: LD_EXP 89
28823: IN
28824: NOT
28825: IFFALSE 28829
// exit ;
28827: GO 28914
// index := GetElementIndex ( hackTanks , hack ) ;
28829: LD_ADDR_VAR 0 5
28833: PUSH
28834: LD_EXP 89
28838: PPUSH
28839: LD_VAR 0 1
28843: PPUSH
28844: CALL 36692 0 2
28848: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28849: LD_ADDR_VAR 0 4
28853: PUSH
28854: DOUBLE
28855: LD_INT 1
28857: DEC
28858: ST_TO_ADDR
28859: LD_EXP 90
28863: PUSH
28864: LD_VAR 0 5
28868: ARRAY
28869: PUSH
28870: FOR_TO
28871: IFFALSE 28912
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28873: LD_EXP 90
28877: PUSH
28878: LD_VAR 0 5
28882: ARRAY
28883: PUSH
28884: LD_VAR 0 4
28888: ARRAY
28889: PUSH
28890: LD_INT 1
28892: ARRAY
28893: PUSH
28894: LD_VAR 0 2
28898: EQUAL
28899: IFFALSE 28910
// KillUnit ( vehicle ) ;
28901: LD_VAR 0 2
28905: PPUSH
28906: CALL_OW 66
28910: GO 28870
28912: POP
28913: POP
// end ;
28914: LD_VAR 0 3
28918: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
28919: LD_EXP 94
28923: NOT
28924: IFFALSE 28959
28926: GO 28928
28928: DISABLE
// begin initMiner := true ;
28929: LD_ADDR_EXP 94
28933: PUSH
28934: LD_INT 1
28936: ST_TO_ADDR
// minersList := [ ] ;
28937: LD_ADDR_EXP 95
28941: PUSH
28942: EMPTY
28943: ST_TO_ADDR
// minerMinesList := [ ] ;
28944: LD_ADDR_EXP 96
28948: PUSH
28949: EMPTY
28950: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28951: LD_ADDR_EXP 97
28955: PUSH
28956: LD_INT 5
28958: ST_TO_ADDR
// end ;
28959: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28960: LD_EXP 94
28964: IFFALSE 28982
28966: PUSH
28967: LD_INT 34
28969: PUSH
28970: LD_INT 81
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PPUSH
28977: CALL_OW 69
28981: AND
28982: IFFALSE 29445
28984: GO 28986
28986: DISABLE
28987: LD_INT 0
28989: PPUSH
28990: PPUSH
28991: PPUSH
28992: PPUSH
// begin enable ;
28993: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28994: LD_ADDR_VAR 0 1
28998: PUSH
28999: LD_INT 34
29001: PUSH
29002: LD_INT 81
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: PPUSH
29009: CALL_OW 69
29013: PUSH
29014: FOR_IN
29015: IFFALSE 29087
// begin if not i in minersList then
29017: LD_VAR 0 1
29021: PUSH
29022: LD_EXP 95
29026: IN
29027: NOT
29028: IFFALSE 29085
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29030: LD_ADDR_EXP 95
29034: PUSH
29035: LD_EXP 95
29039: PPUSH
29040: LD_EXP 95
29044: PUSH
29045: LD_INT 1
29047: PLUS
29048: PPUSH
29049: LD_VAR 0 1
29053: PPUSH
29054: CALL_OW 1
29058: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29059: LD_ADDR_EXP 96
29063: PUSH
29064: LD_EXP 96
29068: PPUSH
29069: LD_EXP 96
29073: PUSH
29074: LD_INT 1
29076: PLUS
29077: PPUSH
29078: EMPTY
29079: PPUSH
29080: CALL_OW 1
29084: ST_TO_ADDR
// end end ;
29085: GO 29014
29087: POP
29088: POP
// for i := minerMinesList downto 1 do
29089: LD_ADDR_VAR 0 1
29093: PUSH
29094: DOUBLE
29095: LD_EXP 96
29099: INC
29100: ST_TO_ADDR
29101: LD_INT 1
29103: PUSH
29104: FOR_DOWNTO
29105: IFFALSE 29443
// begin if IsLive ( minersList [ i ] ) then
29107: LD_EXP 95
29111: PUSH
29112: LD_VAR 0 1
29116: ARRAY
29117: PPUSH
29118: CALL_OW 300
29122: IFFALSE 29150
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29124: LD_EXP 95
29128: PUSH
29129: LD_VAR 0 1
29133: ARRAY
29134: PPUSH
29135: LD_EXP 96
29139: PUSH
29140: LD_VAR 0 1
29144: ARRAY
29145: PPUSH
29146: CALL_OW 505
// if not minerMinesList [ i ] then
29150: LD_EXP 96
29154: PUSH
29155: LD_VAR 0 1
29159: ARRAY
29160: NOT
29161: IFFALSE 29165
// continue ;
29163: GO 29104
// for j := minerMinesList [ i ] downto 1 do
29165: LD_ADDR_VAR 0 2
29169: PUSH
29170: DOUBLE
29171: LD_EXP 96
29175: PUSH
29176: LD_VAR 0 1
29180: ARRAY
29181: INC
29182: ST_TO_ADDR
29183: LD_INT 1
29185: PUSH
29186: FOR_DOWNTO
29187: IFFALSE 29439
// begin side := GetSide ( minersList [ i ] ) ;
29189: LD_ADDR_VAR 0 3
29193: PUSH
29194: LD_EXP 95
29198: PUSH
29199: LD_VAR 0 1
29203: ARRAY
29204: PPUSH
29205: CALL_OW 255
29209: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29210: LD_ADDR_VAR 0 4
29214: PUSH
29215: LD_EXP 96
29219: PUSH
29220: LD_VAR 0 1
29224: ARRAY
29225: PUSH
29226: LD_VAR 0 2
29230: ARRAY
29231: PUSH
29232: LD_INT 1
29234: ARRAY
29235: PPUSH
29236: LD_EXP 96
29240: PUSH
29241: LD_VAR 0 1
29245: ARRAY
29246: PUSH
29247: LD_VAR 0 2
29251: ARRAY
29252: PUSH
29253: LD_INT 2
29255: ARRAY
29256: PPUSH
29257: CALL_OW 428
29261: ST_TO_ADDR
// if not tmp then
29262: LD_VAR 0 4
29266: NOT
29267: IFFALSE 29271
// continue ;
29269: GO 29186
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29271: LD_VAR 0 4
29275: PUSH
29276: LD_INT 81
29278: PUSH
29279: LD_VAR 0 3
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PPUSH
29288: CALL_OW 69
29292: IN
29293: IFFALSE 29343
29295: PUSH
29296: LD_EXP 96
29300: PUSH
29301: LD_VAR 0 1
29305: ARRAY
29306: PUSH
29307: LD_VAR 0 2
29311: ARRAY
29312: PUSH
29313: LD_INT 1
29315: ARRAY
29316: PPUSH
29317: LD_EXP 96
29321: PUSH
29322: LD_VAR 0 1
29326: ARRAY
29327: PUSH
29328: LD_VAR 0 2
29332: ARRAY
29333: PUSH
29334: LD_INT 2
29336: ARRAY
29337: PPUSH
29338: CALL_OW 458
29342: AND
29343: IFFALSE 29437
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29345: LD_EXP 96
29349: PUSH
29350: LD_VAR 0 1
29354: ARRAY
29355: PUSH
29356: LD_VAR 0 2
29360: ARRAY
29361: PUSH
29362: LD_INT 1
29364: ARRAY
29365: PPUSH
29366: LD_EXP 96
29370: PUSH
29371: LD_VAR 0 1
29375: ARRAY
29376: PUSH
29377: LD_VAR 0 2
29381: ARRAY
29382: PUSH
29383: LD_INT 2
29385: ARRAY
29386: PPUSH
29387: LD_VAR 0 3
29391: PPUSH
29392: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29396: LD_ADDR_EXP 96
29400: PUSH
29401: LD_EXP 96
29405: PPUSH
29406: LD_VAR 0 1
29410: PPUSH
29411: LD_EXP 96
29415: PUSH
29416: LD_VAR 0 1
29420: ARRAY
29421: PPUSH
29422: LD_VAR 0 2
29426: PPUSH
29427: CALL_OW 3
29431: PPUSH
29432: CALL_OW 1
29436: ST_TO_ADDR
// end ; end ;
29437: GO 29186
29439: POP
29440: POP
// end ;
29441: GO 29104
29443: POP
29444: POP
// end ;
29445: PPOPN 4
29447: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29448: LD_INT 0
29450: PPUSH
29451: PPUSH
// result := false ;
29452: LD_ADDR_VAR 0 4
29456: PUSH
29457: LD_INT 0
29459: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29460: LD_VAR 0 1
29464: PPUSH
29465: CALL_OW 264
29469: PUSH
29470: LD_INT 81
29472: EQUAL
29473: NOT
29474: IFFALSE 29478
// exit ;
29476: GO 29722
// index := GetElementIndex ( minersList , unit ) ;
29478: LD_ADDR_VAR 0 5
29482: PUSH
29483: LD_EXP 95
29487: PPUSH
29488: LD_VAR 0 1
29492: PPUSH
29493: CALL 36692 0 2
29497: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29498: LD_EXP 96
29502: PUSH
29503: LD_VAR 0 5
29507: ARRAY
29508: PUSH
29509: LD_EXP 97
29513: GREATEREQUAL
29514: IFFALSE 29518
// exit ;
29516: GO 29722
// ComMoveXY ( unit , x , y ) ;
29518: LD_VAR 0 1
29522: PPUSH
29523: LD_VAR 0 2
29527: PPUSH
29528: LD_VAR 0 3
29532: PPUSH
29533: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29537: LD_INT 35
29539: PPUSH
29540: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29544: LD_VAR 0 1
29548: PPUSH
29549: LD_VAR 0 2
29553: PPUSH
29554: LD_VAR 0 3
29558: PPUSH
29559: CALL 68738 0 3
29563: NOT
29564: IFFALSE 29577
29566: PUSH
29567: LD_VAR 0 1
29571: PPUSH
29572: CALL_OW 314
29576: AND
29577: IFFALSE 29581
// exit ;
29579: GO 29722
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29581: LD_VAR 0 2
29585: PPUSH
29586: LD_VAR 0 3
29590: PPUSH
29591: CALL_OW 428
29595: PUSH
29596: LD_VAR 0 1
29600: EQUAL
29601: IFFALSE 29615
29603: PUSH
29604: LD_VAR 0 1
29608: PPUSH
29609: CALL_OW 314
29613: NOT
29614: AND
29615: IFFALSE 29537
// PlaySoundXY ( x , y , PlantMine ) ;
29617: LD_VAR 0 2
29621: PPUSH
29622: LD_VAR 0 3
29626: PPUSH
29627: LD_STRING PlantMine
29629: PPUSH
29630: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29634: LD_VAR 0 2
29638: PPUSH
29639: LD_VAR 0 3
29643: PPUSH
29644: LD_VAR 0 1
29648: PPUSH
29649: CALL_OW 255
29653: PPUSH
29654: LD_INT 0
29656: PPUSH
29657: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29661: LD_ADDR_EXP 96
29665: PUSH
29666: LD_EXP 96
29670: PPUSH
29671: LD_VAR 0 5
29675: PUSH
29676: LD_EXP 96
29680: PUSH
29681: LD_VAR 0 5
29685: ARRAY
29686: PUSH
29687: LD_INT 1
29689: PLUS
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PPUSH
29695: LD_VAR 0 2
29699: PUSH
29700: LD_VAR 0 3
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PPUSH
29709: CALL 36909 0 3
29713: ST_TO_ADDR
// result := true ;
29714: LD_ADDR_VAR 0 4
29718: PUSH
29719: LD_INT 1
29721: ST_TO_ADDR
// end ;
29722: LD_VAR 0 4
29726: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29727: LD_INT 0
29729: PPUSH
29730: PPUSH
29731: PPUSH
// if not unit in minersList then
29732: LD_VAR 0 1
29736: PUSH
29737: LD_EXP 95
29741: IN
29742: NOT
29743: IFFALSE 29747
// exit ;
29745: GO 30141
// index := GetElementIndex ( minersList , unit ) ;
29747: LD_ADDR_VAR 0 6
29751: PUSH
29752: LD_EXP 95
29756: PPUSH
29757: LD_VAR 0 1
29761: PPUSH
29762: CALL 36692 0 2
29766: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29767: LD_ADDR_VAR 0 5
29771: PUSH
29772: DOUBLE
29773: LD_EXP 96
29777: PUSH
29778: LD_VAR 0 6
29782: ARRAY
29783: INC
29784: ST_TO_ADDR
29785: LD_INT 1
29787: PUSH
29788: FOR_DOWNTO
29789: IFFALSE 29952
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29791: LD_EXP 96
29795: PUSH
29796: LD_VAR 0 6
29800: ARRAY
29801: PUSH
29802: LD_VAR 0 5
29806: ARRAY
29807: PUSH
29808: LD_INT 1
29810: ARRAY
29811: PUSH
29812: LD_VAR 0 2
29816: EQUAL
29817: IFFALSE 29847
29819: PUSH
29820: LD_EXP 96
29824: PUSH
29825: LD_VAR 0 6
29829: ARRAY
29830: PUSH
29831: LD_VAR 0 5
29835: ARRAY
29836: PUSH
29837: LD_INT 2
29839: ARRAY
29840: PUSH
29841: LD_VAR 0 3
29845: EQUAL
29846: AND
29847: IFFALSE 29950
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29849: LD_EXP 96
29853: PUSH
29854: LD_VAR 0 6
29858: ARRAY
29859: PUSH
29860: LD_VAR 0 5
29864: ARRAY
29865: PUSH
29866: LD_INT 1
29868: ARRAY
29869: PPUSH
29870: LD_EXP 96
29874: PUSH
29875: LD_VAR 0 6
29879: ARRAY
29880: PUSH
29881: LD_VAR 0 5
29885: ARRAY
29886: PUSH
29887: LD_INT 2
29889: ARRAY
29890: PPUSH
29891: LD_VAR 0 1
29895: PPUSH
29896: CALL_OW 255
29900: PPUSH
29901: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29905: LD_ADDR_EXP 96
29909: PUSH
29910: LD_EXP 96
29914: PPUSH
29915: LD_VAR 0 6
29919: PPUSH
29920: LD_EXP 96
29924: PUSH
29925: LD_VAR 0 6
29929: ARRAY
29930: PPUSH
29931: LD_VAR 0 5
29935: PPUSH
29936: CALL_OW 3
29940: PPUSH
29941: CALL_OW 1
29945: ST_TO_ADDR
// exit ;
29946: POP
29947: POP
29948: GO 30141
// end ; end ;
29950: GO 29788
29952: POP
29953: POP
// for i := minerMinesList [ index ] downto 1 do
29954: LD_ADDR_VAR 0 5
29958: PUSH
29959: DOUBLE
29960: LD_EXP 96
29964: PUSH
29965: LD_VAR 0 6
29969: ARRAY
29970: INC
29971: ST_TO_ADDR
29972: LD_INT 1
29974: PUSH
29975: FOR_DOWNTO
29976: IFFALSE 30139
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29978: LD_EXP 96
29982: PUSH
29983: LD_VAR 0 6
29987: ARRAY
29988: PUSH
29989: LD_VAR 0 5
29993: ARRAY
29994: PUSH
29995: LD_INT 1
29997: ARRAY
29998: PPUSH
29999: LD_EXP 96
30003: PUSH
30004: LD_VAR 0 6
30008: ARRAY
30009: PUSH
30010: LD_VAR 0 5
30014: ARRAY
30015: PUSH
30016: LD_INT 2
30018: ARRAY
30019: PPUSH
30020: LD_VAR 0 2
30024: PPUSH
30025: LD_VAR 0 3
30029: PPUSH
30030: CALL_OW 298
30034: PUSH
30035: LD_INT 6
30037: LESS
30038: IFFALSE 30137
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30040: LD_EXP 96
30044: PUSH
30045: LD_VAR 0 6
30049: ARRAY
30050: PUSH
30051: LD_VAR 0 5
30055: ARRAY
30056: PUSH
30057: LD_INT 1
30059: ARRAY
30060: PPUSH
30061: LD_EXP 96
30065: PUSH
30066: LD_VAR 0 6
30070: ARRAY
30071: PUSH
30072: LD_VAR 0 5
30076: ARRAY
30077: PUSH
30078: LD_INT 2
30080: ARRAY
30081: PPUSH
30082: LD_VAR 0 1
30086: PPUSH
30087: CALL_OW 255
30091: PPUSH
30092: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30096: LD_ADDR_EXP 96
30100: PUSH
30101: LD_EXP 96
30105: PPUSH
30106: LD_VAR 0 6
30110: PPUSH
30111: LD_EXP 96
30115: PUSH
30116: LD_VAR 0 6
30120: ARRAY
30121: PPUSH
30122: LD_VAR 0 5
30126: PPUSH
30127: CALL_OW 3
30131: PPUSH
30132: CALL_OW 1
30136: ST_TO_ADDR
// end ; end ;
30137: GO 29975
30139: POP
30140: POP
// end ;
30141: LD_VAR 0 4
30145: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30146: LD_INT 0
30148: PPUSH
30149: PPUSH
30150: PPUSH
30151: PPUSH
30152: PPUSH
30153: PPUSH
30154: PPUSH
30155: PPUSH
30156: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30157: LD_VAR 0 1
30161: PPUSH
30162: CALL_OW 264
30166: PUSH
30167: LD_INT 81
30169: EQUAL
30170: NOT
30171: IFTRUE 30186
30173: PUSH
30174: LD_VAR 0 1
30178: PUSH
30179: LD_EXP 95
30183: IN
30184: NOT
30185: OR
30186: IFFALSE 30190
// exit ;
30188: GO 30516
// index := GetElementIndex ( minersList , unit ) ;
30190: LD_ADDR_VAR 0 6
30194: PUSH
30195: LD_EXP 95
30199: PPUSH
30200: LD_VAR 0 1
30204: PPUSH
30205: CALL 36692 0 2
30209: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30210: LD_ADDR_VAR 0 8
30214: PUSH
30215: LD_EXP 97
30219: PUSH
30220: LD_EXP 96
30224: PUSH
30225: LD_VAR 0 6
30229: ARRAY
30230: MINUS
30231: ST_TO_ADDR
// if not minesFreeAmount then
30232: LD_VAR 0 8
30236: NOT
30237: IFFALSE 30241
// exit ;
30239: GO 30516
// tmp := [ ] ;
30241: LD_ADDR_VAR 0 7
30245: PUSH
30246: EMPTY
30247: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30248: LD_ADDR_VAR 0 5
30252: PUSH
30253: DOUBLE
30254: LD_INT 1
30256: DEC
30257: ST_TO_ADDR
30258: LD_VAR 0 8
30262: PUSH
30263: FOR_TO
30264: IFFALSE 30463
// begin _d := rand ( 0 , 5 ) ;
30266: LD_ADDR_VAR 0 11
30270: PUSH
30271: LD_INT 0
30273: PPUSH
30274: LD_INT 5
30276: PPUSH
30277: CALL_OW 12
30281: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30282: LD_ADDR_VAR 0 12
30286: PUSH
30287: LD_INT 2
30289: PPUSH
30290: LD_INT 6
30292: PPUSH
30293: CALL_OW 12
30297: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30298: LD_ADDR_VAR 0 9
30302: PUSH
30303: LD_VAR 0 2
30307: PPUSH
30308: LD_VAR 0 11
30312: PPUSH
30313: LD_VAR 0 12
30317: PPUSH
30318: CALL_OW 272
30322: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30323: LD_ADDR_VAR 0 10
30327: PUSH
30328: LD_VAR 0 3
30332: PPUSH
30333: LD_VAR 0 11
30337: PPUSH
30338: LD_VAR 0 12
30342: PPUSH
30343: CALL_OW 273
30347: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30348: LD_VAR 0 9
30352: PPUSH
30353: LD_VAR 0 10
30357: PPUSH
30358: CALL_OW 488
30362: IFFALSE 30386
30364: PUSH
30365: LD_VAR 0 9
30369: PUSH
30370: LD_VAR 0 10
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_VAR 0 7
30383: IN
30384: NOT
30385: AND
30386: IFFALSE 30405
30388: PUSH
30389: LD_VAR 0 9
30393: PPUSH
30394: LD_VAR 0 10
30398: PPUSH
30399: CALL_OW 458
30403: NOT
30404: AND
30405: IFFALSE 30447
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30407: LD_ADDR_VAR 0 7
30411: PUSH
30412: LD_VAR 0 7
30416: PPUSH
30417: LD_VAR 0 7
30421: PUSH
30422: LD_INT 1
30424: PLUS
30425: PPUSH
30426: LD_VAR 0 9
30430: PUSH
30431: LD_VAR 0 10
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PPUSH
30440: CALL_OW 1
30444: ST_TO_ADDR
30445: GO 30461
// i := i - 1 ;
30447: LD_ADDR_VAR 0 5
30451: PUSH
30452: LD_VAR 0 5
30456: PUSH
30457: LD_INT 1
30459: MINUS
30460: ST_TO_ADDR
// end ;
30461: GO 30263
30463: POP
30464: POP
// for i in tmp do
30465: LD_ADDR_VAR 0 5
30469: PUSH
30470: LD_VAR 0 7
30474: PUSH
30475: FOR_IN
30476: IFFALSE 30514
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30478: LD_VAR 0 1
30482: PPUSH
30483: LD_VAR 0 5
30487: PUSH
30488: LD_INT 1
30490: ARRAY
30491: PPUSH
30492: LD_VAR 0 5
30496: PUSH
30497: LD_INT 2
30499: ARRAY
30500: PPUSH
30501: CALL 29448 0 3
30505: NOT
30506: IFFALSE 30512
// exit ;
30508: POP
30509: POP
30510: GO 30516
30512: GO 30475
30514: POP
30515: POP
// end ;
30516: LD_VAR 0 4
30520: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
30521: LD_INT 0
30523: PPUSH
30524: PPUSH
30525: PPUSH
30526: PPUSH
30527: PPUSH
30528: PPUSH
30529: PPUSH
30530: PPUSH
30531: PPUSH
// if GetClass ( unit ) <> class_sniper then
30532: LD_VAR 0 1
30536: PPUSH
30537: CALL_OW 257
30541: PUSH
30542: LD_INT 5
30544: NONEQUAL
30545: IFFALSE 30549
// exit ;
30547: GO 31019
// dist := 8 ;
30549: LD_ADDR_VAR 0 5
30553: PUSH
30554: LD_INT 8
30556: ST_TO_ADDR
// viewRange := 12 ;
30557: LD_ADDR_VAR 0 8
30561: PUSH
30562: LD_INT 12
30564: ST_TO_ADDR
// side := GetSide ( unit ) ;
30565: LD_ADDR_VAR 0 6
30569: PUSH
30570: LD_VAR 0 1
30574: PPUSH
30575: CALL_OW 255
30579: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30580: LD_INT 61
30582: PPUSH
30583: LD_VAR 0 6
30587: PPUSH
30588: CALL_OW 321
30592: PUSH
30593: LD_INT 2
30595: EQUAL
30596: IFFALSE 30606
// viewRange := 16 ;
30598: LD_ADDR_VAR 0 8
30602: PUSH
30603: LD_INT 16
30605: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30606: LD_VAR 0 1
30610: PPUSH
30611: LD_VAR 0 2
30615: PPUSH
30616: LD_VAR 0 3
30620: PPUSH
30621: CALL_OW 297
30625: PUSH
30626: LD_VAR 0 5
30630: GREATER
30631: IFFALSE 30710
// begin ComMoveXY ( unit , x , y ) ;
30633: LD_VAR 0 1
30637: PPUSH
30638: LD_VAR 0 2
30642: PPUSH
30643: LD_VAR 0 3
30647: PPUSH
30648: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30652: LD_INT 35
30654: PPUSH
30655: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30659: LD_VAR 0 1
30663: PPUSH
30664: LD_VAR 0 2
30668: PPUSH
30669: LD_VAR 0 3
30673: PPUSH
30674: CALL 68738 0 3
30678: NOT
30679: IFFALSE 30683
// exit ;
30681: GO 31019
// until GetDistUnitXY ( unit , x , y ) < dist ;
30683: LD_VAR 0 1
30687: PPUSH
30688: LD_VAR 0 2
30692: PPUSH
30693: LD_VAR 0 3
30697: PPUSH
30698: CALL_OW 297
30702: PUSH
30703: LD_VAR 0 5
30707: LESS
30708: IFFALSE 30652
// end ; ComTurnXY ( unit , x , y ) ;
30710: LD_VAR 0 1
30714: PPUSH
30715: LD_VAR 0 2
30719: PPUSH
30720: LD_VAR 0 3
30724: PPUSH
30725: CALL_OW 118
// repeat if Multiplayer then
30729: LD_OWVAR 4
30733: IFFALSE 30744
// wait ( 35 ) else
30735: LD_INT 35
30737: PPUSH
30738: CALL_OW 67
30742: GO 30751
// wait ( 5 ) ;
30744: LD_INT 5
30746: PPUSH
30747: CALL_OW 67
// _d := GetDir ( unit ) ;
30751: LD_ADDR_VAR 0 11
30755: PUSH
30756: LD_VAR 0 1
30760: PPUSH
30761: CALL_OW 254
30765: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
30766: LD_ADDR_VAR 0 7
30770: PUSH
30771: LD_VAR 0 1
30775: PPUSH
30776: CALL_OW 250
30780: PPUSH
30781: LD_VAR 0 1
30785: PPUSH
30786: CALL_OW 251
30790: PPUSH
30791: LD_VAR 0 2
30795: PPUSH
30796: LD_VAR 0 3
30800: PPUSH
30801: CALL 71374 0 4
30805: ST_TO_ADDR
// until dir = _d ;
30806: LD_VAR 0 7
30810: PUSH
30811: LD_VAR 0 11
30815: EQUAL
30816: IFFALSE 30729
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
30818: LD_ADDR_VAR 0 9
30822: PUSH
30823: LD_VAR 0 1
30827: PPUSH
30828: CALL_OW 250
30832: PPUSH
30833: LD_VAR 0 7
30837: PPUSH
30838: LD_VAR 0 5
30842: PPUSH
30843: CALL_OW 272
30847: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
30848: LD_ADDR_VAR 0 10
30852: PUSH
30853: LD_VAR 0 1
30857: PPUSH
30858: CALL_OW 251
30862: PPUSH
30863: LD_VAR 0 7
30867: PPUSH
30868: LD_VAR 0 5
30872: PPUSH
30873: CALL_OW 273
30877: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30878: LD_VAR 0 9
30882: PPUSH
30883: LD_VAR 0 10
30887: PPUSH
30888: CALL_OW 488
30892: NOT
30893: IFFALSE 30897
// exit ;
30895: GO 31019
// ComAnimCustom ( unit , 1 ) ;
30897: LD_VAR 0 1
30901: PPUSH
30902: LD_INT 1
30904: PPUSH
30905: CALL_OW 592
// p := 0 ;
30909: LD_ADDR_VAR 0 12
30913: PUSH
30914: LD_INT 0
30916: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30917: LD_VAR 0 9
30921: PPUSH
30922: LD_VAR 0 10
30926: PPUSH
30927: LD_VAR 0 6
30931: PPUSH
30932: LD_VAR 0 8
30936: PPUSH
30937: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
30941: LD_INT 35
30943: PPUSH
30944: CALL_OW 67
// p := Inc ( p ) ;
30948: LD_ADDR_VAR 0 12
30952: PUSH
30953: LD_VAR 0 12
30957: PPUSH
30958: CALL 71330 0 1
30962: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
30963: LD_VAR 0 12
30967: PUSH
30968: LD_INT 3
30970: EQUAL
30971: IFTRUE 30985
30973: PUSH
30974: LD_VAR 0 1
30978: PPUSH
30979: CALL_OW 302
30983: NOT
30984: OR
30985: IFTRUE 30998
30987: PUSH
30988: LD_VAR 0 1
30992: PPUSH
30993: CALL_OW 301
30997: OR
30998: IFFALSE 30941
// RemoveSeeing ( _x , _y , side ) ;
31000: LD_VAR 0 9
31004: PPUSH
31005: LD_VAR 0 10
31009: PPUSH
31010: LD_VAR 0 6
31014: PPUSH
31015: CALL_OW 331
// end ;
31019: LD_VAR 0 4
31023: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
31024: LD_INT 0
31026: PPUSH
31027: PPUSH
31028: PPUSH
31029: PPUSH
31030: PPUSH
31031: PPUSH
31032: PPUSH
31033: PPUSH
31034: PPUSH
31035: PPUSH
31036: PPUSH
// if not unit then
31037: LD_VAR 0 1
31041: NOT
31042: IFFALSE 31046
// exit ;
31044: GO 31317
// side := GetSide ( unit ) ;
31046: LD_ADDR_VAR 0 3
31050: PUSH
31051: LD_VAR 0 1
31055: PPUSH
31056: CALL_OW 255
31060: ST_TO_ADDR
// x := GetX ( unit ) ;
31061: LD_ADDR_VAR 0 5
31065: PUSH
31066: LD_VAR 0 1
31070: PPUSH
31071: CALL_OW 250
31075: ST_TO_ADDR
// y := GetY ( unit ) ;
31076: LD_ADDR_VAR 0 6
31080: PUSH
31081: LD_VAR 0 1
31085: PPUSH
31086: CALL_OW 251
31090: ST_TO_ADDR
// r := 8 ;
31091: LD_ADDR_VAR 0 4
31095: PUSH
31096: LD_INT 8
31098: ST_TO_ADDR
// if x - r < 0 then
31099: LD_VAR 0 5
31103: PUSH
31104: LD_VAR 0 4
31108: MINUS
31109: PUSH
31110: LD_INT 0
31112: LESS
31113: IFFALSE 31125
// min_x := 0 else
31115: LD_ADDR_VAR 0 7
31119: PUSH
31120: LD_INT 0
31122: ST_TO_ADDR
31123: GO 31141
// min_x := x - r ;
31125: LD_ADDR_VAR 0 7
31129: PUSH
31130: LD_VAR 0 5
31134: PUSH
31135: LD_VAR 0 4
31139: MINUS
31140: ST_TO_ADDR
// if y - r < 0 then
31141: LD_VAR 0 6
31145: PUSH
31146: LD_VAR 0 4
31150: MINUS
31151: PUSH
31152: LD_INT 0
31154: LESS
31155: IFFALSE 31167
// min_y := 0 else
31157: LD_ADDR_VAR 0 8
31161: PUSH
31162: LD_INT 0
31164: ST_TO_ADDR
31165: GO 31183
// min_y := y - r ;
31167: LD_ADDR_VAR 0 8
31171: PUSH
31172: LD_VAR 0 6
31176: PUSH
31177: LD_VAR 0 4
31181: MINUS
31182: ST_TO_ADDR
// max_x := x + r ;
31183: LD_ADDR_VAR 0 9
31187: PUSH
31188: LD_VAR 0 5
31192: PUSH
31193: LD_VAR 0 4
31197: PLUS
31198: ST_TO_ADDR
// max_y := y + r ;
31199: LD_ADDR_VAR 0 10
31203: PUSH
31204: LD_VAR 0 6
31208: PUSH
31209: LD_VAR 0 4
31213: PLUS
31214: ST_TO_ADDR
// for _x = min_x to max_x do
31215: LD_ADDR_VAR 0 11
31219: PUSH
31220: DOUBLE
31221: LD_VAR 0 7
31225: DEC
31226: ST_TO_ADDR
31227: LD_VAR 0 9
31231: PUSH
31232: FOR_TO
31233: IFFALSE 31315
// for _y = min_y to max_y do
31235: LD_ADDR_VAR 0 12
31239: PUSH
31240: DOUBLE
31241: LD_VAR 0 8
31245: DEC
31246: ST_TO_ADDR
31247: LD_VAR 0 10
31251: PUSH
31252: FOR_TO
31253: IFFALSE 31311
// begin if not ValidHex ( _x , _y ) then
31255: LD_VAR 0 11
31259: PPUSH
31260: LD_VAR 0 12
31264: PPUSH
31265: CALL_OW 488
31269: NOT
31270: IFFALSE 31274
// continue ;
31272: GO 31252
// if MineAtPos ( _x , _y ) then
31274: LD_VAR 0 11
31278: PPUSH
31279: LD_VAR 0 12
31283: PPUSH
31284: CALL_OW 458
31288: IFFALSE 31309
// ViewMineAtPos ( _x , _y , side ) ;
31290: LD_VAR 0 11
31294: PPUSH
31295: LD_VAR 0 12
31299: PPUSH
31300: LD_VAR 0 3
31304: PPUSH
31305: CALL_OW 457
// end ;
31309: GO 31252
31311: POP
31312: POP
31313: GO 31232
31315: POP
31316: POP
// end ;
31317: LD_VAR 0 2
31321: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
31322: LD_INT 0
31324: PPUSH
31325: PPUSH
31326: PPUSH
31327: PPUSH
31328: PPUSH
31329: PPUSH
// if not units then
31330: LD_VAR 0 1
31334: NOT
31335: IFFALSE 31339
// exit ;
31337: GO 31769
// scaners := [ ] ;
31339: LD_ADDR_VAR 0 6
31343: PUSH
31344: EMPTY
31345: ST_TO_ADDR
// for i in units do
31346: LD_ADDR_VAR 0 3
31350: PUSH
31351: LD_VAR 0 1
31355: PUSH
31356: FOR_IN
31357: IFFALSE 31514
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
31359: LD_VAR 0 3
31363: PPUSH
31364: CALL_OW 264
31368: PUSH
31369: LD_INT 11
31371: NONEQUAL
31372: IFTRUE 31386
31374: PUSH
31375: LD_VAR 0 3
31379: PPUSH
31380: CALL_OW 302
31384: NOT
31385: OR
31386: IFTRUE 31403
31388: PUSH
31389: LD_VAR 0 3
31393: PPUSH
31394: CALL_OW 110
31398: PUSH
31399: LD_INT 502
31401: EQUAL
31402: OR
31403: IFFALSE 31407
// continue ;
31405: GO 31356
// ComStop ( i ) ;
31407: LD_VAR 0 3
31411: PPUSH
31412: CALL_OW 141
// x := GetX ( i ) ;
31416: LD_ADDR_VAR 0 4
31420: PUSH
31421: LD_VAR 0 3
31425: PPUSH
31426: CALL_OW 250
31430: ST_TO_ADDR
// y := GetY ( i ) ;
31431: LD_ADDR_VAR 0 5
31435: PUSH
31436: LD_VAR 0 3
31440: PPUSH
31441: CALL_OW 251
31445: ST_TO_ADDR
// if GetSide ( i ) = your_side then
31446: LD_VAR 0 3
31450: PPUSH
31451: CALL_OW 255
31455: PUSH
31456: LD_OWVAR 2
31460: EQUAL
31461: IFFALSE 31480
// PlaySoundXY ( x , y , mineDetector ) ;
31463: LD_VAR 0 4
31467: PPUSH
31468: LD_VAR 0 5
31472: PPUSH
31473: LD_STRING mineDetector
31475: PPUSH
31476: CALL_OW 366
// scaners := Join ( scaners , i ) ;
31480: LD_ADDR_VAR 0 6
31484: PUSH
31485: LD_VAR 0 6
31489: PPUSH
31490: LD_VAR 0 3
31494: PPUSH
31495: CALL 69957 0 2
31499: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
31500: LD_VAR 0 3
31504: PPUSH
31505: LD_INT 502
31507: PPUSH
31508: CALL_OW 109
// end ;
31512: GO 31356
31514: POP
31515: POP
// if not scaners then
31516: LD_VAR 0 6
31520: NOT
31521: IFFALSE 31525
// exit ;
31523: GO 31769
// wait ( 3 ) ;
31525: LD_INT 3
31527: PPUSH
31528: CALL_OW 67
// timer := 6 ;
31532: LD_ADDR_VAR 0 7
31536: PUSH
31537: LD_INT 6
31539: ST_TO_ADDR
// repeat for i in scaners do
31540: LD_ADDR_VAR 0 3
31544: PUSH
31545: LD_VAR 0 6
31549: PUSH
31550: FOR_IN
31551: IFFALSE 31667
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
31553: LD_VAR 0 3
31557: PPUSH
31558: CALL_OW 302
31562: NOT
31563: IFTRUE 31576
31565: PUSH
31566: LD_VAR 0 3
31570: PPUSH
31571: CALL_OW 314
31575: OR
31576: IFTRUE 31607
31578: PUSH
31579: LD_VAR 0 3
31583: PPUSH
31584: CALL_OW 263
31588: PUSH
31589: LD_INT 1
31591: EQUAL
31592: IFFALSE 31606
31594: PUSH
31595: LD_VAR 0 3
31599: PPUSH
31600: CALL_OW 311
31604: NOT
31605: AND
31606: OR
31607: IFFALSE 31651
// begin SetUnitDisplayNumber ( i , 0 ) ;
31609: LD_VAR 0 3
31613: PPUSH
31614: LD_INT 0
31616: PPUSH
31617: CALL_OW 505
// SetTag ( i , 0 ) ;
31621: LD_VAR 0 3
31625: PPUSH
31626: LD_INT 0
31628: PPUSH
31629: CALL_OW 109
// scaners := scaners diff i ;
31633: LD_ADDR_VAR 0 6
31637: PUSH
31638: LD_VAR 0 6
31642: PUSH
31643: LD_VAR 0 3
31647: DIFF
31648: ST_TO_ADDR
// continue ;
31649: GO 31550
// end ; SetUnitDisplayNumber ( i , timer ) ;
31651: LD_VAR 0 3
31655: PPUSH
31656: LD_VAR 0 7
31660: PPUSH
31661: CALL_OW 505
// end ;
31665: GO 31550
31667: POP
31668: POP
// if not scaners then
31669: LD_VAR 0 6
31673: NOT
31674: IFFALSE 31678
// exit ;
31676: GO 31769
// timer := Dec ( timer ) ;
31678: LD_ADDR_VAR 0 7
31682: PUSH
31683: LD_VAR 0 7
31687: PPUSH
31688: CALL 71352 0 1
31692: ST_TO_ADDR
// wait ( 0 0$1 ) ;
31693: LD_INT 35
31695: PPUSH
31696: CALL_OW 67
// until timer = 0 ;
31700: LD_VAR 0 7
31704: PUSH
31705: LD_INT 0
31707: EQUAL
31708: IFFALSE 31540
// if not scaners then
31710: LD_VAR 0 6
31714: NOT
31715: IFFALSE 31719
// exit ;
31717: GO 31769
// for i in scaners do
31719: LD_ADDR_VAR 0 3
31723: PUSH
31724: LD_VAR 0 6
31728: PUSH
31729: FOR_IN
31730: IFFALSE 31767
// begin SetUnitDisplayNumber ( i , 0 ) ;
31732: LD_VAR 0 3
31736: PPUSH
31737: LD_INT 0
31739: PPUSH
31740: CALL_OW 505
// SetTag ( i , 0 ) ;
31744: LD_VAR 0 3
31748: PPUSH
31749: LD_INT 0
31751: PPUSH
31752: CALL_OW 109
// RevealDetectorMine ( i ) ;
31756: LD_VAR 0 3
31760: PPUSH
31761: CALL 31024 0 1
// end ;
31765: GO 31729
31767: POP
31768: POP
// end ;
31769: LD_VAR 0 2
31773: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
31774: LD_INT 0
31776: PPUSH
// if p1 = mine_detector_mode then
31777: LD_VAR 0 2
31781: PUSH
31782: LD_INT 103
31784: EQUAL
31785: IFFALSE 31796
// DetectMine ( units ) ;
31787: LD_VAR 0 1
31791: PPUSH
31792: CALL 31322 0 1
// end ; end_of_file
31796: LD_VAR 0 7
31800: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31801: LD_INT 0
31803: PPUSH
31804: PPUSH
// if exist_mode then
31805: LD_VAR 0 2
31809: IFFALSE 31855
// begin unit := CreateCharacter ( prefix & ident ) ;
31811: LD_ADDR_VAR 0 5
31815: PUSH
31816: LD_VAR 0 3
31820: PUSH
31821: LD_VAR 0 1
31825: STR
31826: PPUSH
31827: CALL_OW 34
31831: ST_TO_ADDR
// if unit then
31832: LD_VAR 0 5
31836: IFFALSE 31853
// DeleteCharacters ( prefix & ident ) ;
31838: LD_VAR 0 3
31842: PUSH
31843: LD_VAR 0 1
31847: STR
31848: PPUSH
31849: CALL_OW 40
// end else
31853: GO 31870
// unit := NewCharacter ( ident ) ;
31855: LD_ADDR_VAR 0 5
31859: PUSH
31860: LD_VAR 0 1
31864: PPUSH
31865: CALL_OW 25
31869: ST_TO_ADDR
// result := unit ;
31870: LD_ADDR_VAR 0 4
31874: PUSH
31875: LD_VAR 0 5
31879: ST_TO_ADDR
// end ;
31880: LD_VAR 0 4
31884: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
31885: LD_INT 0
31887: PPUSH
31888: PPUSH
// if exist_mode then
31889: LD_VAR 0 2
31893: IFFALSE 31918
// unit := CreateCharacter ( prefix & ident ) else
31895: LD_ADDR_VAR 0 5
31899: PUSH
31900: LD_VAR 0 3
31904: PUSH
31905: LD_VAR 0 1
31909: STR
31910: PPUSH
31911: CALL_OW 34
31915: ST_TO_ADDR
31916: GO 31933
// unit := NewCharacter ( ident ) ;
31918: LD_ADDR_VAR 0 5
31922: PUSH
31923: LD_VAR 0 1
31927: PPUSH
31928: CALL_OW 25
31932: ST_TO_ADDR
// result := unit ;
31933: LD_ADDR_VAR 0 4
31937: PUSH
31938: LD_VAR 0 5
31942: ST_TO_ADDR
// end ;
31943: LD_VAR 0 4
31947: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31948: LD_INT 0
31950: PPUSH
31951: PPUSH
// if not side or not nation then
31952: LD_VAR 0 1
31956: NOT
31957: IFTRUE 31966
31959: PUSH
31960: LD_VAR 0 2
31964: NOT
31965: OR
31966: IFFALSE 31970
// exit ;
31968: GO 32764
// case nation of nation_american :
31970: LD_VAR 0 2
31974: PUSH
31975: LD_INT 1
31977: DOUBLE
31978: EQUAL
31979: IFTRUE 31983
31981: GO 32205
31983: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
31984: LD_ADDR_VAR 0 4
31988: PUSH
31989: LD_INT 35
31991: PUSH
31992: LD_INT 45
31994: PUSH
31995: LD_INT 46
31997: PUSH
31998: LD_INT 47
32000: PUSH
32001: LD_INT 82
32003: PUSH
32004: LD_INT 83
32006: PUSH
32007: LD_INT 84
32009: PUSH
32010: LD_INT 85
32012: PUSH
32013: LD_INT 86
32015: PUSH
32016: LD_INT 1
32018: PUSH
32019: LD_INT 2
32021: PUSH
32022: LD_INT 6
32024: PUSH
32025: LD_INT 15
32027: PUSH
32028: LD_INT 16
32030: PUSH
32031: LD_INT 7
32033: PUSH
32034: LD_INT 12
32036: PUSH
32037: LD_INT 13
32039: PUSH
32040: LD_INT 10
32042: PUSH
32043: LD_INT 14
32045: PUSH
32046: LD_INT 20
32048: PUSH
32049: LD_INT 21
32051: PUSH
32052: LD_INT 22
32054: PUSH
32055: LD_INT 25
32057: PUSH
32058: LD_INT 32
32060: PUSH
32061: LD_INT 27
32063: PUSH
32064: LD_INT 36
32066: PUSH
32067: LD_INT 69
32069: PUSH
32070: LD_INT 39
32072: PUSH
32073: LD_INT 34
32075: PUSH
32076: LD_INT 40
32078: PUSH
32079: LD_INT 48
32081: PUSH
32082: LD_INT 49
32084: PUSH
32085: LD_INT 50
32087: PUSH
32088: LD_INT 51
32090: PUSH
32091: LD_INT 52
32093: PUSH
32094: LD_INT 53
32096: PUSH
32097: LD_INT 54
32099: PUSH
32100: LD_INT 55
32102: PUSH
32103: LD_INT 56
32105: PUSH
32106: LD_INT 57
32108: PUSH
32109: LD_INT 58
32111: PUSH
32112: LD_INT 59
32114: PUSH
32115: LD_INT 60
32117: PUSH
32118: LD_INT 61
32120: PUSH
32121: LD_INT 62
32123: PUSH
32124: LD_INT 80
32126: PUSH
32127: LD_INT 82
32129: PUSH
32130: LD_INT 83
32132: PUSH
32133: LD_INT 84
32135: PUSH
32136: LD_INT 85
32138: PUSH
32139: LD_INT 86
32141: PUSH
32142: LD_INT 90
32144: PUSH
32145: LD_INT 93
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: ST_TO_ADDR
32203: GO 32686
32205: LD_INT 2
32207: DOUBLE
32208: EQUAL
32209: IFTRUE 32213
32211: GO 32447
32213: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
32214: LD_ADDR_VAR 0 4
32218: PUSH
32219: LD_INT 35
32221: PUSH
32222: LD_INT 45
32224: PUSH
32225: LD_INT 46
32227: PUSH
32228: LD_INT 47
32230: PUSH
32231: LD_INT 82
32233: PUSH
32234: LD_INT 83
32236: PUSH
32237: LD_INT 84
32239: PUSH
32240: LD_INT 85
32242: PUSH
32243: LD_INT 87
32245: PUSH
32246: LD_INT 70
32248: PUSH
32249: LD_INT 1
32251: PUSH
32252: LD_INT 11
32254: PUSH
32255: LD_INT 3
32257: PUSH
32258: LD_INT 4
32260: PUSH
32261: LD_INT 5
32263: PUSH
32264: LD_INT 6
32266: PUSH
32267: LD_INT 15
32269: PUSH
32270: LD_INT 18
32272: PUSH
32273: LD_INT 7
32275: PUSH
32276: LD_INT 17
32278: PUSH
32279: LD_INT 8
32281: PUSH
32282: LD_INT 20
32284: PUSH
32285: LD_INT 21
32287: PUSH
32288: LD_INT 22
32290: PUSH
32291: LD_INT 72
32293: PUSH
32294: LD_INT 26
32296: PUSH
32297: LD_INT 69
32299: PUSH
32300: LD_INT 39
32302: PUSH
32303: LD_INT 40
32305: PUSH
32306: LD_INT 41
32308: PUSH
32309: LD_INT 42
32311: PUSH
32312: LD_INT 43
32314: PUSH
32315: LD_INT 48
32317: PUSH
32318: LD_INT 49
32320: PUSH
32321: LD_INT 50
32323: PUSH
32324: LD_INT 51
32326: PUSH
32327: LD_INT 52
32329: PUSH
32330: LD_INT 53
32332: PUSH
32333: LD_INT 54
32335: PUSH
32336: LD_INT 55
32338: PUSH
32339: LD_INT 56
32341: PUSH
32342: LD_INT 60
32344: PUSH
32345: LD_INT 61
32347: PUSH
32348: LD_INT 62
32350: PUSH
32351: LD_INT 66
32353: PUSH
32354: LD_INT 67
32356: PUSH
32357: LD_INT 68
32359: PUSH
32360: LD_INT 81
32362: PUSH
32363: LD_INT 82
32365: PUSH
32366: LD_INT 83
32368: PUSH
32369: LD_INT 84
32371: PUSH
32372: LD_INT 85
32374: PUSH
32375: LD_INT 87
32377: PUSH
32378: LD_INT 88
32380: PUSH
32381: LD_INT 92
32383: PUSH
32384: LD_INT 94
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: ST_TO_ADDR
32445: GO 32686
32447: LD_INT 3
32449: DOUBLE
32450: EQUAL
32451: IFTRUE 32455
32453: GO 32685
32455: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
32456: LD_ADDR_VAR 0 4
32460: PUSH
32461: LD_INT 46
32463: PUSH
32464: LD_INT 47
32466: PUSH
32467: LD_INT 1
32469: PUSH
32470: LD_INT 2
32472: PUSH
32473: LD_INT 82
32475: PUSH
32476: LD_INT 83
32478: PUSH
32479: LD_INT 84
32481: PUSH
32482: LD_INT 85
32484: PUSH
32485: LD_INT 86
32487: PUSH
32488: LD_INT 11
32490: PUSH
32491: LD_INT 9
32493: PUSH
32494: LD_INT 20
32496: PUSH
32497: LD_INT 19
32499: PUSH
32500: LD_INT 21
32502: PUSH
32503: LD_INT 24
32505: PUSH
32506: LD_INT 22
32508: PUSH
32509: LD_INT 25
32511: PUSH
32512: LD_INT 28
32514: PUSH
32515: LD_INT 29
32517: PUSH
32518: LD_INT 30
32520: PUSH
32521: LD_INT 31
32523: PUSH
32524: LD_INT 37
32526: PUSH
32527: LD_INT 38
32529: PUSH
32530: LD_INT 32
32532: PUSH
32533: LD_INT 27
32535: PUSH
32536: LD_INT 33
32538: PUSH
32539: LD_INT 69
32541: PUSH
32542: LD_INT 39
32544: PUSH
32545: LD_INT 34
32547: PUSH
32548: LD_INT 40
32550: PUSH
32551: LD_INT 71
32553: PUSH
32554: LD_INT 23
32556: PUSH
32557: LD_INT 44
32559: PUSH
32560: LD_INT 48
32562: PUSH
32563: LD_INT 49
32565: PUSH
32566: LD_INT 50
32568: PUSH
32569: LD_INT 51
32571: PUSH
32572: LD_INT 52
32574: PUSH
32575: LD_INT 53
32577: PUSH
32578: LD_INT 54
32580: PUSH
32581: LD_INT 55
32583: PUSH
32584: LD_INT 56
32586: PUSH
32587: LD_INT 57
32589: PUSH
32590: LD_INT 58
32592: PUSH
32593: LD_INT 59
32595: PUSH
32596: LD_INT 63
32598: PUSH
32599: LD_INT 64
32601: PUSH
32602: LD_INT 65
32604: PUSH
32605: LD_INT 82
32607: PUSH
32608: LD_INT 83
32610: PUSH
32611: LD_INT 84
32613: PUSH
32614: LD_INT 85
32616: PUSH
32617: LD_INT 86
32619: PUSH
32620: LD_INT 89
32622: PUSH
32623: LD_INT 91
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: ST_TO_ADDR
32683: GO 32686
32685: POP
// if state > - 1 and state < 3 then
32686: LD_VAR 0 3
32690: PUSH
32691: LD_INT 1
32693: NEG
32694: GREATER
32695: IFFALSE 32707
32697: PUSH
32698: LD_VAR 0 3
32702: PUSH
32703: LD_INT 3
32705: LESS
32706: AND
32707: IFFALSE 32764
// for i in result do
32709: LD_ADDR_VAR 0 5
32713: PUSH
32714: LD_VAR 0 4
32718: PUSH
32719: FOR_IN
32720: IFFALSE 32762
// if GetTech ( i , side ) <> state then
32722: LD_VAR 0 5
32726: PPUSH
32727: LD_VAR 0 1
32731: PPUSH
32732: CALL_OW 321
32736: PUSH
32737: LD_VAR 0 3
32741: NONEQUAL
32742: IFFALSE 32760
// result := result diff i ;
32744: LD_ADDR_VAR 0 4
32748: PUSH
32749: LD_VAR 0 4
32753: PUSH
32754: LD_VAR 0 5
32758: DIFF
32759: ST_TO_ADDR
32760: GO 32719
32762: POP
32763: POP
// end ;
32764: LD_VAR 0 4
32768: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32769: LD_INT 0
32771: PPUSH
32772: PPUSH
32773: PPUSH
// result := true ;
32774: LD_ADDR_VAR 0 3
32778: PUSH
32779: LD_INT 1
32781: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32782: LD_ADDR_VAR 0 5
32786: PUSH
32787: LD_VAR 0 2
32791: PPUSH
32792: CALL_OW 480
32796: ST_TO_ADDR
// if not tmp then
32797: LD_VAR 0 5
32801: NOT
32802: IFFALSE 32806
// exit ;
32804: GO 32855
// for i in tmp do
32806: LD_ADDR_VAR 0 4
32810: PUSH
32811: LD_VAR 0 5
32815: PUSH
32816: FOR_IN
32817: IFFALSE 32853
// if GetTech ( i , side ) <> state_researched then
32819: LD_VAR 0 4
32823: PPUSH
32824: LD_VAR 0 1
32828: PPUSH
32829: CALL_OW 321
32833: PUSH
32834: LD_INT 2
32836: NONEQUAL
32837: IFFALSE 32851
// begin result := false ;
32839: LD_ADDR_VAR 0 3
32843: PUSH
32844: LD_INT 0
32846: ST_TO_ADDR
// exit ;
32847: POP
32848: POP
32849: GO 32855
// end ;
32851: GO 32816
32853: POP
32854: POP
// end ;
32855: LD_VAR 0 3
32859: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32860: LD_INT 0
32862: PPUSH
32863: PPUSH
32864: PPUSH
32865: PPUSH
32866: PPUSH
32867: PPUSH
32868: PPUSH
32869: PPUSH
32870: PPUSH
32871: PPUSH
32872: PPUSH
32873: PPUSH
32874: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32875: LD_VAR 0 1
32879: NOT
32880: IFTRUE 32897
32882: PUSH
32883: LD_VAR 0 1
32887: PPUSH
32888: CALL_OW 257
32892: PUSH
32893: LD_INT 9
32895: NONEQUAL
32896: OR
32897: IFFALSE 32901
// exit ;
32899: GO 33480
// side := GetSide ( unit ) ;
32901: LD_ADDR_VAR 0 9
32905: PUSH
32906: LD_VAR 0 1
32910: PPUSH
32911: CALL_OW 255
32915: ST_TO_ADDR
// tech_space := tech_spacanom ;
32916: LD_ADDR_VAR 0 12
32920: PUSH
32921: LD_INT 29
32923: ST_TO_ADDR
// tech_time := tech_taurad ;
32924: LD_ADDR_VAR 0 13
32928: PUSH
32929: LD_INT 28
32931: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32932: LD_ADDR_VAR 0 11
32936: PUSH
32937: LD_VAR 0 1
32941: PPUSH
32942: CALL_OW 310
32946: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32947: LD_VAR 0 11
32951: PPUSH
32952: CALL_OW 247
32956: PUSH
32957: LD_INT 2
32959: EQUAL
32960: IFFALSE 32964
// exit ;
32962: GO 33480
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32964: LD_ADDR_VAR 0 8
32968: PUSH
32969: LD_INT 81
32971: PUSH
32972: LD_VAR 0 9
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 3
32983: PUSH
32984: LD_INT 21
32986: PUSH
32987: LD_INT 3
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PPUSH
33002: CALL_OW 69
33006: ST_TO_ADDR
// if not tmp then
33007: LD_VAR 0 8
33011: NOT
33012: IFFALSE 33016
// exit ;
33014: GO 33480
// if in_unit then
33016: LD_VAR 0 11
33020: IFFALSE 33044
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33022: LD_ADDR_VAR 0 10
33026: PUSH
33027: LD_VAR 0 8
33031: PPUSH
33032: LD_VAR 0 11
33036: PPUSH
33037: CALL_OW 74
33041: ST_TO_ADDR
33042: GO 33064
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33044: LD_ADDR_VAR 0 10
33048: PUSH
33049: LD_VAR 0 8
33053: PPUSH
33054: LD_VAR 0 1
33058: PPUSH
33059: CALL_OW 74
33063: ST_TO_ADDR
// if not enemy then
33064: LD_VAR 0 10
33068: NOT
33069: IFFALSE 33073
// exit ;
33071: GO 33480
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33073: LD_VAR 0 11
33077: IFFALSE 33099
33079: PUSH
33080: LD_VAR 0 11
33084: PPUSH
33085: LD_VAR 0 10
33089: PPUSH
33090: CALL_OW 296
33094: PUSH
33095: LD_INT 13
33097: GREATER
33098: AND
33099: IFTRUE 33121
33101: PUSH
33102: LD_VAR 0 1
33106: PPUSH
33107: LD_VAR 0 10
33111: PPUSH
33112: CALL_OW 296
33116: PUSH
33117: LD_INT 12
33119: GREATER
33120: OR
33121: IFFALSE 33125
// exit ;
33123: GO 33480
// missile := [ 1 ] ;
33125: LD_ADDR_VAR 0 14
33129: PUSH
33130: LD_INT 1
33132: PUSH
33133: EMPTY
33134: LIST
33135: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33136: LD_VAR 0 9
33140: PPUSH
33141: LD_VAR 0 12
33145: PPUSH
33146: CALL_OW 325
33150: IFFALSE 33179
// missile := Replace ( missile , missile + 1 , 2 ) ;
33152: LD_ADDR_VAR 0 14
33156: PUSH
33157: LD_VAR 0 14
33161: PPUSH
33162: LD_VAR 0 14
33166: PUSH
33167: LD_INT 1
33169: PLUS
33170: PPUSH
33171: LD_INT 2
33173: PPUSH
33174: CALL_OW 1
33178: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33179: LD_VAR 0 9
33183: PPUSH
33184: LD_VAR 0 13
33188: PPUSH
33189: CALL_OW 325
33193: IFFALSE 33217
33195: PUSH
33196: LD_VAR 0 10
33200: PPUSH
33201: CALL_OW 255
33205: PPUSH
33206: LD_VAR 0 13
33210: PPUSH
33211: CALL_OW 325
33215: NOT
33216: AND
33217: IFFALSE 33246
// missile := Replace ( missile , missile + 1 , 3 ) ;
33219: LD_ADDR_VAR 0 14
33223: PUSH
33224: LD_VAR 0 14
33228: PPUSH
33229: LD_VAR 0 14
33233: PUSH
33234: LD_INT 1
33236: PLUS
33237: PPUSH
33238: LD_INT 3
33240: PPUSH
33241: CALL_OW 1
33245: ST_TO_ADDR
// if missile < 2 then
33246: LD_VAR 0 14
33250: PUSH
33251: LD_INT 2
33253: LESS
33254: IFFALSE 33258
// exit ;
33256: GO 33480
// x := GetX ( enemy ) ;
33258: LD_ADDR_VAR 0 4
33262: PUSH
33263: LD_VAR 0 10
33267: PPUSH
33268: CALL_OW 250
33272: ST_TO_ADDR
// y := GetY ( enemy ) ;
33273: LD_ADDR_VAR 0 5
33277: PUSH
33278: LD_VAR 0 10
33282: PPUSH
33283: CALL_OW 251
33287: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33288: LD_ADDR_VAR 0 6
33292: PUSH
33293: LD_VAR 0 4
33297: PUSH
33298: LD_INT 1
33300: NEG
33301: PPUSH
33302: LD_INT 1
33304: PPUSH
33305: CALL_OW 12
33309: PLUS
33310: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33311: LD_ADDR_VAR 0 7
33315: PUSH
33316: LD_VAR 0 5
33320: PUSH
33321: LD_INT 1
33323: NEG
33324: PPUSH
33325: LD_INT 1
33327: PPUSH
33328: CALL_OW 12
33332: PLUS
33333: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33334: LD_VAR 0 6
33338: PPUSH
33339: LD_VAR 0 7
33343: PPUSH
33344: CALL_OW 488
33348: NOT
33349: IFFALSE 33371
// begin _x := x ;
33351: LD_ADDR_VAR 0 6
33355: PUSH
33356: LD_VAR 0 4
33360: ST_TO_ADDR
// _y := y ;
33361: LD_ADDR_VAR 0 7
33365: PUSH
33366: LD_VAR 0 5
33370: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33371: LD_ADDR_VAR 0 3
33375: PUSH
33376: LD_INT 1
33378: PPUSH
33379: LD_VAR 0 14
33383: PPUSH
33384: CALL_OW 12
33388: ST_TO_ADDR
// case i of 1 :
33389: LD_VAR 0 3
33393: PUSH
33394: LD_INT 1
33396: DOUBLE
33397: EQUAL
33398: IFTRUE 33402
33400: GO 33419
33402: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33403: LD_VAR 0 1
33407: PPUSH
33408: LD_VAR 0 10
33412: PPUSH
33413: CALL_OW 115
33417: GO 33480
33419: LD_INT 2
33421: DOUBLE
33422: EQUAL
33423: IFTRUE 33427
33425: GO 33449
33427: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33428: LD_VAR 0 1
33432: PPUSH
33433: LD_VAR 0 6
33437: PPUSH
33438: LD_VAR 0 7
33442: PPUSH
33443: CALL_OW 153
33447: GO 33480
33449: LD_INT 3
33451: DOUBLE
33452: EQUAL
33453: IFTRUE 33457
33455: GO 33479
33457: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33458: LD_VAR 0 1
33462: PPUSH
33463: LD_VAR 0 6
33467: PPUSH
33468: LD_VAR 0 7
33472: PPUSH
33473: CALL_OW 154
33477: GO 33480
33479: POP
// end ;
33480: LD_VAR 0 2
33484: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33485: LD_INT 0
33487: PPUSH
33488: PPUSH
33489: PPUSH
33490: PPUSH
33491: PPUSH
33492: PPUSH
// if not unit or not building then
33493: LD_VAR 0 1
33497: NOT
33498: IFTRUE 33507
33500: PUSH
33501: LD_VAR 0 2
33505: NOT
33506: OR
33507: IFFALSE 33511
// exit ;
33509: GO 33669
// x := GetX ( building ) ;
33511: LD_ADDR_VAR 0 5
33515: PUSH
33516: LD_VAR 0 2
33520: PPUSH
33521: CALL_OW 250
33525: ST_TO_ADDR
// y := GetY ( building ) ;
33526: LD_ADDR_VAR 0 6
33530: PUSH
33531: LD_VAR 0 2
33535: PPUSH
33536: CALL_OW 251
33540: ST_TO_ADDR
// for i := 0 to 5 do
33541: LD_ADDR_VAR 0 4
33545: PUSH
33546: DOUBLE
33547: LD_INT 0
33549: DEC
33550: ST_TO_ADDR
33551: LD_INT 5
33553: PUSH
33554: FOR_TO
33555: IFFALSE 33667
// begin _x := ShiftX ( x , i , 3 ) ;
33557: LD_ADDR_VAR 0 7
33561: PUSH
33562: LD_VAR 0 5
33566: PPUSH
33567: LD_VAR 0 4
33571: PPUSH
33572: LD_INT 3
33574: PPUSH
33575: CALL_OW 272
33579: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33580: LD_ADDR_VAR 0 8
33584: PUSH
33585: LD_VAR 0 6
33589: PPUSH
33590: LD_VAR 0 4
33594: PPUSH
33595: LD_INT 3
33597: PPUSH
33598: CALL_OW 273
33602: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33603: LD_VAR 0 7
33607: PPUSH
33608: LD_VAR 0 8
33612: PPUSH
33613: CALL_OW 488
33617: NOT
33618: IFFALSE 33622
// continue ;
33620: GO 33554
// if HexInfo ( _x , _y ) = 0 then
33622: LD_VAR 0 7
33626: PPUSH
33627: LD_VAR 0 8
33631: PPUSH
33632: CALL_OW 428
33636: PUSH
33637: LD_INT 0
33639: EQUAL
33640: IFFALSE 33665
// begin ComMoveXY ( unit , _x , _y ) ;
33642: LD_VAR 0 1
33646: PPUSH
33647: LD_VAR 0 7
33651: PPUSH
33652: LD_VAR 0 8
33656: PPUSH
33657: CALL_OW 111
// exit ;
33661: POP
33662: POP
33663: GO 33669
// end ; end ;
33665: GO 33554
33667: POP
33668: POP
// end ;
33669: LD_VAR 0 3
33673: RET
// export function ScanBase ( side , base_area ) ; begin
33674: LD_INT 0
33676: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33677: LD_ADDR_VAR 0 3
33681: PUSH
33682: LD_VAR 0 2
33686: PPUSH
33687: LD_INT 81
33689: PUSH
33690: LD_VAR 0 1
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PPUSH
33699: CALL_OW 70
33703: ST_TO_ADDR
// end ;
33704: LD_VAR 0 3
33708: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33709: LD_INT 0
33711: PPUSH
33712: PPUSH
33713: PPUSH
33714: PPUSH
// result := false ;
33715: LD_ADDR_VAR 0 2
33719: PUSH
33720: LD_INT 0
33722: ST_TO_ADDR
// side := GetSide ( unit ) ;
33723: LD_ADDR_VAR 0 3
33727: PUSH
33728: LD_VAR 0 1
33732: PPUSH
33733: CALL_OW 255
33737: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33738: LD_ADDR_VAR 0 4
33742: PUSH
33743: LD_VAR 0 1
33747: PPUSH
33748: CALL_OW 248
33752: ST_TO_ADDR
// case nat of 1 :
33753: LD_VAR 0 4
33757: PUSH
33758: LD_INT 1
33760: DOUBLE
33761: EQUAL
33762: IFTRUE 33766
33764: GO 33777
33766: POP
// tech := tech_lassight ; 2 :
33767: LD_ADDR_VAR 0 5
33771: PUSH
33772: LD_INT 12
33774: ST_TO_ADDR
33775: GO 33816
33777: LD_INT 2
33779: DOUBLE
33780: EQUAL
33781: IFTRUE 33785
33783: GO 33796
33785: POP
// tech := tech_mortar ; 3 :
33786: LD_ADDR_VAR 0 5
33790: PUSH
33791: LD_INT 41
33793: ST_TO_ADDR
33794: GO 33816
33796: LD_INT 3
33798: DOUBLE
33799: EQUAL
33800: IFTRUE 33804
33802: GO 33815
33804: POP
// tech := tech_bazooka ; end ;
33805: LD_ADDR_VAR 0 5
33809: PUSH
33810: LD_INT 44
33812: ST_TO_ADDR
33813: GO 33816
33815: POP
// if Researched ( side , tech ) then
33816: LD_VAR 0 3
33820: PPUSH
33821: LD_VAR 0 5
33825: PPUSH
33826: CALL_OW 325
33830: IFFALSE 33857
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33832: LD_ADDR_VAR 0 2
33836: PUSH
33837: LD_INT 5
33839: PUSH
33840: LD_INT 8
33842: PUSH
33843: LD_INT 9
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: LIST
33850: PUSH
33851: LD_VAR 0 4
33855: ARRAY
33856: ST_TO_ADDR
// end ;
33857: LD_VAR 0 2
33861: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33862: LD_INT 0
33864: PPUSH
33865: PPUSH
33866: PPUSH
// if not mines then
33867: LD_VAR 0 2
33871: NOT
33872: IFFALSE 33876
// exit ;
33874: GO 34020
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33876: LD_ADDR_VAR 0 5
33880: PUSH
33881: LD_INT 81
33883: PUSH
33884: LD_VAR 0 1
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: LD_INT 3
33895: PUSH
33896: LD_INT 21
33898: PUSH
33899: LD_INT 3
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: PPUSH
33914: CALL_OW 69
33918: ST_TO_ADDR
// for i in mines do
33919: LD_ADDR_VAR 0 4
33923: PUSH
33924: LD_VAR 0 2
33928: PUSH
33929: FOR_IN
33930: IFFALSE 34018
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33932: LD_VAR 0 4
33936: PUSH
33937: LD_INT 1
33939: ARRAY
33940: PPUSH
33941: LD_VAR 0 4
33945: PUSH
33946: LD_INT 2
33948: ARRAY
33949: PPUSH
33950: CALL_OW 458
33954: NOT
33955: IFFALSE 33959
// continue ;
33957: GO 33929
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33959: LD_VAR 0 4
33963: PUSH
33964: LD_INT 1
33966: ARRAY
33967: PPUSH
33968: LD_VAR 0 4
33972: PUSH
33973: LD_INT 2
33975: ARRAY
33976: PPUSH
33977: CALL_OW 428
33981: PUSH
33982: LD_VAR 0 5
33986: IN
33987: IFFALSE 34016
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33989: LD_VAR 0 4
33993: PUSH
33994: LD_INT 1
33996: ARRAY
33997: PPUSH
33998: LD_VAR 0 4
34002: PUSH
34003: LD_INT 2
34005: ARRAY
34006: PPUSH
34007: LD_VAR 0 1
34011: PPUSH
34012: CALL_OW 456
// end ;
34016: GO 33929
34018: POP
34019: POP
// end ;
34020: LD_VAR 0 3
34024: RET
// export function Count ( array ) ; begin
34025: LD_INT 0
34027: PPUSH
// result := array + 0 ;
34028: LD_ADDR_VAR 0 2
34032: PUSH
34033: LD_VAR 0 1
34037: PUSH
34038: LD_INT 0
34040: PLUS
34041: ST_TO_ADDR
// end ;
34042: LD_VAR 0 2
34046: RET
// export function IsEmpty ( building ) ; begin
34047: LD_INT 0
34049: PPUSH
// if not building then
34050: LD_VAR 0 1
34054: NOT
34055: IFFALSE 34059
// exit ;
34057: GO 34102
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34059: LD_ADDR_VAR 0 2
34063: PUSH
34064: LD_VAR 0 1
34068: PUSH
34069: LD_INT 22
34071: PUSH
34072: LD_VAR 0 1
34076: PPUSH
34077: CALL_OW 255
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 58
34088: PUSH
34089: EMPTY
34090: LIST
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: PPUSH
34096: CALL_OW 69
34100: IN
34101: ST_TO_ADDR
// end ;
34102: LD_VAR 0 2
34106: RET
// export function IsNotFull ( building ) ; var places ; begin
34107: LD_INT 0
34109: PPUSH
34110: PPUSH
// if not building then
34111: LD_VAR 0 1
34115: NOT
34116: IFFALSE 34120
// exit ;
34118: GO 34148
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
34120: LD_ADDR_VAR 0 2
34124: PUSH
34125: LD_VAR 0 1
34129: PPUSH
34130: LD_INT 3
34132: PUSH
34133: LD_INT 62
34135: PUSH
34136: EMPTY
34137: LIST
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PPUSH
34143: CALL_OW 72
34147: ST_TO_ADDR
// end ;
34148: LD_VAR 0 2
34152: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34153: LD_INT 0
34155: PPUSH
34156: PPUSH
34157: PPUSH
34158: PPUSH
// tmp := [ ] ;
34159: LD_ADDR_VAR 0 3
34163: PUSH
34164: EMPTY
34165: ST_TO_ADDR
// list := [ ] ;
34166: LD_ADDR_VAR 0 5
34170: PUSH
34171: EMPTY
34172: ST_TO_ADDR
// for i = 16 to 25 do
34173: LD_ADDR_VAR 0 4
34177: PUSH
34178: DOUBLE
34179: LD_INT 16
34181: DEC
34182: ST_TO_ADDR
34183: LD_INT 25
34185: PUSH
34186: FOR_TO
34187: IFFALSE 34260
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34189: LD_ADDR_VAR 0 3
34193: PUSH
34194: LD_VAR 0 3
34198: PUSH
34199: LD_INT 22
34201: PUSH
34202: LD_VAR 0 1
34206: PPUSH
34207: CALL_OW 255
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: PUSH
34216: LD_INT 91
34218: PUSH
34219: LD_VAR 0 1
34223: PUSH
34224: LD_INT 6
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: LIST
34231: PUSH
34232: LD_INT 30
34234: PUSH
34235: LD_VAR 0 4
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: LIST
34248: PUSH
34249: EMPTY
34250: LIST
34251: PPUSH
34252: CALL_OW 69
34256: ADD
34257: ST_TO_ADDR
34258: GO 34186
34260: POP
34261: POP
// for i = 1 to tmp do
34262: LD_ADDR_VAR 0 4
34266: PUSH
34267: DOUBLE
34268: LD_INT 1
34270: DEC
34271: ST_TO_ADDR
34272: LD_VAR 0 3
34276: PUSH
34277: FOR_TO
34278: IFFALSE 34366
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34280: LD_ADDR_VAR 0 5
34284: PUSH
34285: LD_VAR 0 5
34289: PUSH
34290: LD_VAR 0 3
34294: PUSH
34295: LD_VAR 0 4
34299: ARRAY
34300: PPUSH
34301: CALL_OW 266
34305: PUSH
34306: LD_VAR 0 3
34310: PUSH
34311: LD_VAR 0 4
34315: ARRAY
34316: PPUSH
34317: CALL_OW 250
34321: PUSH
34322: LD_VAR 0 3
34326: PUSH
34327: LD_VAR 0 4
34331: ARRAY
34332: PPUSH
34333: CALL_OW 251
34337: PUSH
34338: LD_VAR 0 3
34342: PUSH
34343: LD_VAR 0 4
34347: ARRAY
34348: PPUSH
34349: CALL_OW 254
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: LIST
34358: LIST
34359: PUSH
34360: EMPTY
34361: LIST
34362: ADD
34363: ST_TO_ADDR
34364: GO 34277
34366: POP
34367: POP
// result := list ;
34368: LD_ADDR_VAR 0 2
34372: PUSH
34373: LD_VAR 0 5
34377: ST_TO_ADDR
// end ;
34378: LD_VAR 0 2
34382: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34383: LD_INT 0
34385: PPUSH
34386: PPUSH
34387: PPUSH
34388: PPUSH
34389: PPUSH
34390: PPUSH
34391: PPUSH
// if not factory then
34392: LD_VAR 0 1
34396: NOT
34397: IFFALSE 34401
// exit ;
34399: GO 35004
// if control = control_apeman then
34401: LD_VAR 0 4
34405: PUSH
34406: LD_INT 5
34408: EQUAL
34409: IFFALSE 34518
// begin tmp := UnitsInside ( factory ) ;
34411: LD_ADDR_VAR 0 8
34415: PUSH
34416: LD_VAR 0 1
34420: PPUSH
34421: CALL_OW 313
34425: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34426: LD_VAR 0 8
34430: PPUSH
34431: LD_INT 25
34433: PUSH
34434: LD_INT 12
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: PPUSH
34441: CALL_OW 72
34445: NOT
34446: IFFALSE 34456
// control := control_manual ;
34448: LD_ADDR_VAR 0 4
34452: PUSH
34453: LD_INT 1
34455: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34456: LD_ADDR_VAR 0 8
34460: PUSH
34461: LD_VAR 0 1
34465: PPUSH
34466: CALL 34153 0 1
34470: ST_TO_ADDR
// if tmp then
34471: LD_VAR 0 8
34475: IFFALSE 34518
// begin for i in tmp do
34477: LD_ADDR_VAR 0 7
34481: PUSH
34482: LD_VAR 0 8
34486: PUSH
34487: FOR_IN
34488: IFFALSE 34516
// if i [ 1 ] = b_ext_radio then
34490: LD_VAR 0 7
34494: PUSH
34495: LD_INT 1
34497: ARRAY
34498: PUSH
34499: LD_INT 22
34501: EQUAL
34502: IFFALSE 34514
// begin control := control_remote ;
34504: LD_ADDR_VAR 0 4
34508: PUSH
34509: LD_INT 2
34511: ST_TO_ADDR
// break ;
34512: GO 34516
// end ;
34514: GO 34487
34516: POP
34517: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34518: LD_VAR 0 1
34522: PPUSH
34523: LD_VAR 0 2
34527: PPUSH
34528: LD_VAR 0 3
34532: PPUSH
34533: LD_VAR 0 4
34537: PPUSH
34538: LD_VAR 0 5
34542: PPUSH
34543: CALL_OW 448
34547: IFFALSE 34582
// begin result := [ chassis , engine , control , weapon ] ;
34549: LD_ADDR_VAR 0 6
34553: PUSH
34554: LD_VAR 0 2
34558: PUSH
34559: LD_VAR 0 3
34563: PUSH
34564: LD_VAR 0 4
34568: PUSH
34569: LD_VAR 0 5
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: ST_TO_ADDR
// exit ;
34580: GO 35004
// end ; _chassis := AvailableChassisList ( factory ) ;
34582: LD_ADDR_VAR 0 9
34586: PUSH
34587: LD_VAR 0 1
34591: PPUSH
34592: CALL_OW 475
34596: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34597: LD_ADDR_VAR 0 11
34601: PUSH
34602: LD_VAR 0 1
34606: PPUSH
34607: CALL_OW 476
34611: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34612: LD_ADDR_VAR 0 12
34616: PUSH
34617: LD_VAR 0 1
34621: PPUSH
34622: CALL_OW 477
34626: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34627: LD_ADDR_VAR 0 10
34631: PUSH
34632: LD_VAR 0 1
34636: PPUSH
34637: CALL_OW 478
34641: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34642: LD_VAR 0 9
34646: NOT
34647: IFTRUE 34656
34649: PUSH
34650: LD_VAR 0 11
34654: NOT
34655: OR
34656: IFTRUE 34665
34658: PUSH
34659: LD_VAR 0 12
34663: NOT
34664: OR
34665: IFTRUE 34674
34667: PUSH
34668: LD_VAR 0 10
34672: NOT
34673: OR
34674: IFFALSE 34709
// begin result := [ chassis , engine , control , weapon ] ;
34676: LD_ADDR_VAR 0 6
34680: PUSH
34681: LD_VAR 0 2
34685: PUSH
34686: LD_VAR 0 3
34690: PUSH
34691: LD_VAR 0 4
34695: PUSH
34696: LD_VAR 0 5
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: ST_TO_ADDR
// exit ;
34707: GO 35004
// end ; if not chassis in _chassis then
34709: LD_VAR 0 2
34713: PUSH
34714: LD_VAR 0 9
34718: IN
34719: NOT
34720: IFFALSE 34746
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34722: LD_ADDR_VAR 0 2
34726: PUSH
34727: LD_VAR 0 9
34731: PUSH
34732: LD_INT 1
34734: PPUSH
34735: LD_VAR 0 9
34739: PPUSH
34740: CALL_OW 12
34744: ARRAY
34745: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34746: LD_VAR 0 2
34750: PPUSH
34751: LD_VAR 0 3
34755: PPUSH
34756: CALL 35009 0 2
34760: NOT
34761: IFFALSE 34822
// repeat engine := _engine [ 1 ] ;
34763: LD_ADDR_VAR 0 3
34767: PUSH
34768: LD_VAR 0 11
34772: PUSH
34773: LD_INT 1
34775: ARRAY
34776: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34777: LD_ADDR_VAR 0 11
34781: PUSH
34782: LD_VAR 0 11
34786: PPUSH
34787: LD_INT 1
34789: PPUSH
34790: CALL_OW 3
34794: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34795: LD_VAR 0 2
34799: PPUSH
34800: LD_VAR 0 3
34804: PPUSH
34805: CALL 35009 0 2
34809: IFTRUE 34820
34811: PUSH
34812: LD_VAR 0 11
34816: PUSH
34817: EMPTY
34818: EQUAL
34819: OR
34820: IFFALSE 34763
// if not control in _control then
34822: LD_VAR 0 4
34826: PUSH
34827: LD_VAR 0 12
34831: IN
34832: NOT
34833: IFFALSE 34859
// control := _control [ rand ( 1 , _control ) ] ;
34835: LD_ADDR_VAR 0 4
34839: PUSH
34840: LD_VAR 0 12
34844: PUSH
34845: LD_INT 1
34847: PPUSH
34848: LD_VAR 0 12
34852: PPUSH
34853: CALL_OW 12
34857: ARRAY
34858: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34859: LD_VAR 0 2
34863: PPUSH
34864: LD_VAR 0 5
34868: PPUSH
34869: CALL 35231 0 2
34873: NOT
34874: IFFALSE 34935
// repeat weapon := _weapon [ 1 ] ;
34876: LD_ADDR_VAR 0 5
34880: PUSH
34881: LD_VAR 0 10
34885: PUSH
34886: LD_INT 1
34888: ARRAY
34889: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34890: LD_ADDR_VAR 0 10
34894: PUSH
34895: LD_VAR 0 10
34899: PPUSH
34900: LD_INT 1
34902: PPUSH
34903: CALL_OW 3
34907: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34908: LD_VAR 0 2
34912: PPUSH
34913: LD_VAR 0 5
34917: PPUSH
34918: CALL 35231 0 2
34922: IFTRUE 34933
34924: PUSH
34925: LD_VAR 0 10
34929: PUSH
34930: EMPTY
34931: EQUAL
34932: OR
34933: IFFALSE 34876
// result := [ ] ;
34935: LD_ADDR_VAR 0 6
34939: PUSH
34940: EMPTY
34941: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34942: LD_VAR 0 1
34946: PPUSH
34947: LD_VAR 0 2
34951: PPUSH
34952: LD_VAR 0 3
34956: PPUSH
34957: LD_VAR 0 4
34961: PPUSH
34962: LD_VAR 0 5
34966: PPUSH
34967: CALL_OW 448
34971: IFFALSE 35004
// result := [ chassis , engine , control , weapon ] ;
34973: LD_ADDR_VAR 0 6
34977: PUSH
34978: LD_VAR 0 2
34982: PUSH
34983: LD_VAR 0 3
34987: PUSH
34988: LD_VAR 0 4
34992: PUSH
34993: LD_VAR 0 5
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: ST_TO_ADDR
// end ;
35004: LD_VAR 0 6
35008: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
35009: LD_INT 0
35011: PPUSH
// if not chassis or not engine then
35012: LD_VAR 0 1
35016: NOT
35017: IFTRUE 35026
35019: PUSH
35020: LD_VAR 0 2
35024: NOT
35025: OR
35026: IFFALSE 35030
// exit ;
35028: GO 35226
// case engine of engine_solar :
35030: LD_VAR 0 2
35034: PUSH
35035: LD_INT 2
35037: DOUBLE
35038: EQUAL
35039: IFTRUE 35043
35041: GO 35081
35043: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35044: LD_ADDR_VAR 0 3
35048: PUSH
35049: LD_INT 11
35051: PUSH
35052: LD_INT 12
35054: PUSH
35055: LD_INT 13
35057: PUSH
35058: LD_INT 14
35060: PUSH
35061: LD_INT 1
35063: PUSH
35064: LD_INT 2
35066: PUSH
35067: LD_INT 3
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: ST_TO_ADDR
35079: GO 35210
35081: LD_INT 1
35083: DOUBLE
35084: EQUAL
35085: IFTRUE 35089
35087: GO 35151
35089: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35090: LD_ADDR_VAR 0 3
35094: PUSH
35095: LD_INT 11
35097: PUSH
35098: LD_INT 12
35100: PUSH
35101: LD_INT 13
35103: PUSH
35104: LD_INT 14
35106: PUSH
35107: LD_INT 1
35109: PUSH
35110: LD_INT 2
35112: PUSH
35113: LD_INT 3
35115: PUSH
35116: LD_INT 4
35118: PUSH
35119: LD_INT 5
35121: PUSH
35122: LD_INT 21
35124: PUSH
35125: LD_INT 23
35127: PUSH
35128: LD_INT 22
35130: PUSH
35131: LD_INT 24
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: ST_TO_ADDR
35149: GO 35210
35151: LD_INT 3
35153: DOUBLE
35154: EQUAL
35155: IFTRUE 35159
35157: GO 35209
35159: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35160: LD_ADDR_VAR 0 3
35164: PUSH
35165: LD_INT 13
35167: PUSH
35168: LD_INT 14
35170: PUSH
35171: LD_INT 2
35173: PUSH
35174: LD_INT 3
35176: PUSH
35177: LD_INT 4
35179: PUSH
35180: LD_INT 5
35182: PUSH
35183: LD_INT 21
35185: PUSH
35186: LD_INT 22
35188: PUSH
35189: LD_INT 23
35191: PUSH
35192: LD_INT 24
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: LIST
35206: ST_TO_ADDR
35207: GO 35210
35209: POP
// result := ( chassis in result ) ;
35210: LD_ADDR_VAR 0 3
35214: PUSH
35215: LD_VAR 0 1
35219: PUSH
35220: LD_VAR 0 3
35224: IN
35225: ST_TO_ADDR
// end ;
35226: LD_VAR 0 3
35230: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35231: LD_INT 0
35233: PPUSH
// if not chassis or not weapon then
35234: LD_VAR 0 1
35238: NOT
35239: IFTRUE 35248
35241: PUSH
35242: LD_VAR 0 2
35246: NOT
35247: OR
35248: IFFALSE 35252
// exit ;
35250: GO 36312
// case weapon of us_machine_gun :
35252: LD_VAR 0 2
35256: PUSH
35257: LD_INT 2
35259: DOUBLE
35260: EQUAL
35261: IFTRUE 35265
35263: GO 35295
35265: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35266: LD_ADDR_VAR 0 3
35270: PUSH
35271: LD_INT 1
35273: PUSH
35274: LD_INT 2
35276: PUSH
35277: LD_INT 3
35279: PUSH
35280: LD_INT 4
35282: PUSH
35283: LD_INT 5
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: ST_TO_ADDR
35293: GO 36296
35295: LD_INT 3
35297: DOUBLE
35298: EQUAL
35299: IFTRUE 35303
35301: GO 35333
35303: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35304: LD_ADDR_VAR 0 3
35308: PUSH
35309: LD_INT 1
35311: PUSH
35312: LD_INT 2
35314: PUSH
35315: LD_INT 3
35317: PUSH
35318: LD_INT 4
35320: PUSH
35321: LD_INT 5
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: ST_TO_ADDR
35331: GO 36296
35333: LD_INT 11
35335: DOUBLE
35336: EQUAL
35337: IFTRUE 35341
35339: GO 35371
35341: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35342: LD_ADDR_VAR 0 3
35346: PUSH
35347: LD_INT 1
35349: PUSH
35350: LD_INT 2
35352: PUSH
35353: LD_INT 3
35355: PUSH
35356: LD_INT 4
35358: PUSH
35359: LD_INT 5
35361: PUSH
35362: EMPTY
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: ST_TO_ADDR
35369: GO 36296
35371: LD_INT 4
35373: DOUBLE
35374: EQUAL
35375: IFTRUE 35379
35377: GO 35405
35379: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35380: LD_ADDR_VAR 0 3
35384: PUSH
35385: LD_INT 2
35387: PUSH
35388: LD_INT 3
35390: PUSH
35391: LD_INT 4
35393: PUSH
35394: LD_INT 5
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: ST_TO_ADDR
35403: GO 36296
35405: LD_INT 5
35407: DOUBLE
35408: EQUAL
35409: IFTRUE 35413
35411: GO 35439
35413: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35414: LD_ADDR_VAR 0 3
35418: PUSH
35419: LD_INT 2
35421: PUSH
35422: LD_INT 3
35424: PUSH
35425: LD_INT 4
35427: PUSH
35428: LD_INT 5
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: LIST
35435: LIST
35436: ST_TO_ADDR
35437: GO 36296
35439: LD_INT 9
35441: DOUBLE
35442: EQUAL
35443: IFTRUE 35447
35445: GO 35473
35447: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35448: LD_ADDR_VAR 0 3
35452: PUSH
35453: LD_INT 2
35455: PUSH
35456: LD_INT 3
35458: PUSH
35459: LD_INT 4
35461: PUSH
35462: LD_INT 5
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: LIST
35469: LIST
35470: ST_TO_ADDR
35471: GO 36296
35473: LD_INT 7
35475: DOUBLE
35476: EQUAL
35477: IFTRUE 35481
35479: GO 35507
35481: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35482: LD_ADDR_VAR 0 3
35486: PUSH
35487: LD_INT 2
35489: PUSH
35490: LD_INT 3
35492: PUSH
35493: LD_INT 4
35495: PUSH
35496: LD_INT 5
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: LIST
35503: LIST
35504: ST_TO_ADDR
35505: GO 36296
35507: LD_INT 12
35509: DOUBLE
35510: EQUAL
35511: IFTRUE 35515
35513: GO 35541
35515: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35516: LD_ADDR_VAR 0 3
35520: PUSH
35521: LD_INT 2
35523: PUSH
35524: LD_INT 3
35526: PUSH
35527: LD_INT 4
35529: PUSH
35530: LD_INT 5
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: LIST
35537: LIST
35538: ST_TO_ADDR
35539: GO 36296
35541: LD_INT 13
35543: DOUBLE
35544: EQUAL
35545: IFTRUE 35549
35547: GO 35575
35549: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35550: LD_ADDR_VAR 0 3
35554: PUSH
35555: LD_INT 2
35557: PUSH
35558: LD_INT 3
35560: PUSH
35561: LD_INT 4
35563: PUSH
35564: LD_INT 5
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: ST_TO_ADDR
35573: GO 36296
35575: LD_INT 14
35577: DOUBLE
35578: EQUAL
35579: IFTRUE 35583
35581: GO 35601
35583: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35584: LD_ADDR_VAR 0 3
35588: PUSH
35589: LD_INT 4
35591: PUSH
35592: LD_INT 5
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: ST_TO_ADDR
35599: GO 36296
35601: LD_INT 6
35603: DOUBLE
35604: EQUAL
35605: IFTRUE 35609
35607: GO 35627
35609: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35610: LD_ADDR_VAR 0 3
35614: PUSH
35615: LD_INT 4
35617: PUSH
35618: LD_INT 5
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: ST_TO_ADDR
35625: GO 36296
35627: LD_INT 10
35629: DOUBLE
35630: EQUAL
35631: IFTRUE 35635
35633: GO 35653
35635: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35636: LD_ADDR_VAR 0 3
35640: PUSH
35641: LD_INT 4
35643: PUSH
35644: LD_INT 5
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: ST_TO_ADDR
35651: GO 36296
35653: LD_INT 22
35655: DOUBLE
35656: EQUAL
35657: IFTRUE 35661
35659: GO 35687
35661: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35662: LD_ADDR_VAR 0 3
35666: PUSH
35667: LD_INT 11
35669: PUSH
35670: LD_INT 12
35672: PUSH
35673: LD_INT 13
35675: PUSH
35676: LD_INT 14
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: ST_TO_ADDR
35685: GO 36296
35687: LD_INT 23
35689: DOUBLE
35690: EQUAL
35691: IFTRUE 35695
35693: GO 35721
35695: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35696: LD_ADDR_VAR 0 3
35700: PUSH
35701: LD_INT 11
35703: PUSH
35704: LD_INT 12
35706: PUSH
35707: LD_INT 13
35709: PUSH
35710: LD_INT 14
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: ST_TO_ADDR
35719: GO 36296
35721: LD_INT 24
35723: DOUBLE
35724: EQUAL
35725: IFTRUE 35729
35727: GO 35755
35729: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35730: LD_ADDR_VAR 0 3
35734: PUSH
35735: LD_INT 11
35737: PUSH
35738: LD_INT 12
35740: PUSH
35741: LD_INT 13
35743: PUSH
35744: LD_INT 14
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: LIST
35751: LIST
35752: ST_TO_ADDR
35753: GO 36296
35755: LD_INT 30
35757: DOUBLE
35758: EQUAL
35759: IFTRUE 35763
35761: GO 35789
35763: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35764: LD_ADDR_VAR 0 3
35768: PUSH
35769: LD_INT 11
35771: PUSH
35772: LD_INT 12
35774: PUSH
35775: LD_INT 13
35777: PUSH
35778: LD_INT 14
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: LIST
35785: LIST
35786: ST_TO_ADDR
35787: GO 36296
35789: LD_INT 25
35791: DOUBLE
35792: EQUAL
35793: IFTRUE 35797
35795: GO 35815
35797: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35798: LD_ADDR_VAR 0 3
35802: PUSH
35803: LD_INT 13
35805: PUSH
35806: LD_INT 14
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: ST_TO_ADDR
35813: GO 36296
35815: LD_INT 27
35817: DOUBLE
35818: EQUAL
35819: IFTRUE 35823
35821: GO 35841
35823: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35824: LD_ADDR_VAR 0 3
35828: PUSH
35829: LD_INT 13
35831: PUSH
35832: LD_INT 14
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: ST_TO_ADDR
35839: GO 36296
35841: LD_INT 92
35843: DOUBLE
35844: EQUAL
35845: IFTRUE 35849
35847: GO 35875
35849: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35850: LD_ADDR_VAR 0 3
35854: PUSH
35855: LD_INT 11
35857: PUSH
35858: LD_INT 12
35860: PUSH
35861: LD_INT 13
35863: PUSH
35864: LD_INT 14
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: ST_TO_ADDR
35873: GO 36296
35875: LD_INT 28
35877: DOUBLE
35878: EQUAL
35879: IFTRUE 35883
35881: GO 35901
35883: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35884: LD_ADDR_VAR 0 3
35888: PUSH
35889: LD_INT 13
35891: PUSH
35892: LD_INT 14
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: ST_TO_ADDR
35899: GO 36296
35901: LD_INT 29
35903: DOUBLE
35904: EQUAL
35905: IFTRUE 35909
35907: GO 35927
35909: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35910: LD_ADDR_VAR 0 3
35914: PUSH
35915: LD_INT 13
35917: PUSH
35918: LD_INT 14
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: ST_TO_ADDR
35925: GO 36296
35927: LD_INT 31
35929: DOUBLE
35930: EQUAL
35931: IFTRUE 35935
35933: GO 35953
35935: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35936: LD_ADDR_VAR 0 3
35940: PUSH
35941: LD_INT 13
35943: PUSH
35944: LD_INT 14
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: ST_TO_ADDR
35951: GO 36296
35953: LD_INT 26
35955: DOUBLE
35956: EQUAL
35957: IFTRUE 35961
35959: GO 35979
35961: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35962: LD_ADDR_VAR 0 3
35966: PUSH
35967: LD_INT 13
35969: PUSH
35970: LD_INT 14
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: ST_TO_ADDR
35977: GO 36296
35979: LD_INT 42
35981: DOUBLE
35982: EQUAL
35983: IFTRUE 35987
35985: GO 36013
35987: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35988: LD_ADDR_VAR 0 3
35992: PUSH
35993: LD_INT 21
35995: PUSH
35996: LD_INT 22
35998: PUSH
35999: LD_INT 23
36001: PUSH
36002: LD_INT 24
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: LIST
36009: LIST
36010: ST_TO_ADDR
36011: GO 36296
36013: LD_INT 43
36015: DOUBLE
36016: EQUAL
36017: IFTRUE 36021
36019: GO 36047
36021: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36022: LD_ADDR_VAR 0 3
36026: PUSH
36027: LD_INT 21
36029: PUSH
36030: LD_INT 22
36032: PUSH
36033: LD_INT 23
36035: PUSH
36036: LD_INT 24
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: ST_TO_ADDR
36045: GO 36296
36047: LD_INT 44
36049: DOUBLE
36050: EQUAL
36051: IFTRUE 36055
36053: GO 36081
36055: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36056: LD_ADDR_VAR 0 3
36060: PUSH
36061: LD_INT 21
36063: PUSH
36064: LD_INT 22
36066: PUSH
36067: LD_INT 23
36069: PUSH
36070: LD_INT 24
36072: PUSH
36073: EMPTY
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: ST_TO_ADDR
36079: GO 36296
36081: LD_INT 45
36083: DOUBLE
36084: EQUAL
36085: IFTRUE 36089
36087: GO 36115
36089: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36090: LD_ADDR_VAR 0 3
36094: PUSH
36095: LD_INT 21
36097: PUSH
36098: LD_INT 22
36100: PUSH
36101: LD_INT 23
36103: PUSH
36104: LD_INT 24
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: ST_TO_ADDR
36113: GO 36296
36115: LD_INT 49
36117: DOUBLE
36118: EQUAL
36119: IFTRUE 36123
36121: GO 36149
36123: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36124: LD_ADDR_VAR 0 3
36128: PUSH
36129: LD_INT 21
36131: PUSH
36132: LD_INT 22
36134: PUSH
36135: LD_INT 23
36137: PUSH
36138: LD_INT 24
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: ST_TO_ADDR
36147: GO 36296
36149: LD_INT 51
36151: DOUBLE
36152: EQUAL
36153: IFTRUE 36157
36155: GO 36183
36157: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36158: LD_ADDR_VAR 0 3
36162: PUSH
36163: LD_INT 21
36165: PUSH
36166: LD_INT 22
36168: PUSH
36169: LD_INT 23
36171: PUSH
36172: LD_INT 24
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: ST_TO_ADDR
36181: GO 36296
36183: LD_INT 52
36185: DOUBLE
36186: EQUAL
36187: IFTRUE 36191
36189: GO 36217
36191: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36192: LD_ADDR_VAR 0 3
36196: PUSH
36197: LD_INT 21
36199: PUSH
36200: LD_INT 22
36202: PUSH
36203: LD_INT 23
36205: PUSH
36206: LD_INT 24
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: ST_TO_ADDR
36215: GO 36296
36217: LD_INT 53
36219: DOUBLE
36220: EQUAL
36221: IFTRUE 36225
36223: GO 36243
36225: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36226: LD_ADDR_VAR 0 3
36230: PUSH
36231: LD_INT 23
36233: PUSH
36234: LD_INT 24
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: ST_TO_ADDR
36241: GO 36296
36243: LD_INT 46
36245: DOUBLE
36246: EQUAL
36247: IFTRUE 36251
36249: GO 36269
36251: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36252: LD_ADDR_VAR 0 3
36256: PUSH
36257: LD_INT 23
36259: PUSH
36260: LD_INT 24
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: ST_TO_ADDR
36267: GO 36296
36269: LD_INT 47
36271: DOUBLE
36272: EQUAL
36273: IFTRUE 36277
36275: GO 36295
36277: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36278: LD_ADDR_VAR 0 3
36282: PUSH
36283: LD_INT 23
36285: PUSH
36286: LD_INT 24
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: ST_TO_ADDR
36293: GO 36296
36295: POP
// result := ( chassis in result ) ;
36296: LD_ADDR_VAR 0 3
36300: PUSH
36301: LD_VAR 0 1
36305: PUSH
36306: LD_VAR 0 3
36310: IN
36311: ST_TO_ADDR
// end ;
36312: LD_VAR 0 3
36316: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36317: LD_INT 0
36319: PPUSH
36320: PPUSH
36321: PPUSH
36322: PPUSH
36323: PPUSH
36324: PPUSH
36325: PPUSH
// result := array ;
36326: LD_ADDR_VAR 0 5
36330: PUSH
36331: LD_VAR 0 1
36335: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36336: LD_VAR 0 1
36340: NOT
36341: IFTRUE 36350
36343: PUSH
36344: LD_VAR 0 2
36348: NOT
36349: OR
36350: IFTRUE 36359
36352: PUSH
36353: LD_VAR 0 3
36357: NOT
36358: OR
36359: IFTRUE 36373
36361: PUSH
36362: LD_VAR 0 2
36366: PUSH
36367: LD_VAR 0 1
36371: GREATER
36372: OR
36373: IFTRUE 36387
36375: PUSH
36376: LD_VAR 0 3
36380: PUSH
36381: LD_VAR 0 1
36385: GREATER
36386: OR
36387: IFFALSE 36391
// exit ;
36389: GO 36687
// if direction then
36391: LD_VAR 0 4
36395: IFFALSE 36459
// begin d := 1 ;
36397: LD_ADDR_VAR 0 9
36401: PUSH
36402: LD_INT 1
36404: ST_TO_ADDR
// if i_from > i_to then
36405: LD_VAR 0 2
36409: PUSH
36410: LD_VAR 0 3
36414: GREATER
36415: IFFALSE 36441
// length := ( array - i_from ) + i_to else
36417: LD_ADDR_VAR 0 11
36421: PUSH
36422: LD_VAR 0 1
36426: PUSH
36427: LD_VAR 0 2
36431: MINUS
36432: PUSH
36433: LD_VAR 0 3
36437: PLUS
36438: ST_TO_ADDR
36439: GO 36457
// length := i_to - i_from ;
36441: LD_ADDR_VAR 0 11
36445: PUSH
36446: LD_VAR 0 3
36450: PUSH
36451: LD_VAR 0 2
36455: MINUS
36456: ST_TO_ADDR
// end else
36457: GO 36520
// begin d := - 1 ;
36459: LD_ADDR_VAR 0 9
36463: PUSH
36464: LD_INT 1
36466: NEG
36467: ST_TO_ADDR
// if i_from > i_to then
36468: LD_VAR 0 2
36472: PUSH
36473: LD_VAR 0 3
36477: GREATER
36478: IFFALSE 36498
// length := i_from - i_to else
36480: LD_ADDR_VAR 0 11
36484: PUSH
36485: LD_VAR 0 2
36489: PUSH
36490: LD_VAR 0 3
36494: MINUS
36495: ST_TO_ADDR
36496: GO 36520
// length := ( array - i_to ) + i_from ;
36498: LD_ADDR_VAR 0 11
36502: PUSH
36503: LD_VAR 0 1
36507: PUSH
36508: LD_VAR 0 3
36512: MINUS
36513: PUSH
36514: LD_VAR 0 2
36518: PLUS
36519: ST_TO_ADDR
// end ; if not length then
36520: LD_VAR 0 11
36524: NOT
36525: IFFALSE 36529
// exit ;
36527: GO 36687
// tmp := array ;
36529: LD_ADDR_VAR 0 10
36533: PUSH
36534: LD_VAR 0 1
36538: ST_TO_ADDR
// for i = 1 to length do
36539: LD_ADDR_VAR 0 6
36543: PUSH
36544: DOUBLE
36545: LD_INT 1
36547: DEC
36548: ST_TO_ADDR
36549: LD_VAR 0 11
36553: PUSH
36554: FOR_TO
36555: IFFALSE 36675
// begin for j = 1 to array do
36557: LD_ADDR_VAR 0 7
36561: PUSH
36562: DOUBLE
36563: LD_INT 1
36565: DEC
36566: ST_TO_ADDR
36567: LD_VAR 0 1
36571: PUSH
36572: FOR_TO
36573: IFFALSE 36661
// begin k := j + d ;
36575: LD_ADDR_VAR 0 8
36579: PUSH
36580: LD_VAR 0 7
36584: PUSH
36585: LD_VAR 0 9
36589: PLUS
36590: ST_TO_ADDR
// if k > array then
36591: LD_VAR 0 8
36595: PUSH
36596: LD_VAR 0 1
36600: GREATER
36601: IFFALSE 36611
// k := 1 ;
36603: LD_ADDR_VAR 0 8
36607: PUSH
36608: LD_INT 1
36610: ST_TO_ADDR
// if not k then
36611: LD_VAR 0 8
36615: NOT
36616: IFFALSE 36628
// k := array ;
36618: LD_ADDR_VAR 0 8
36622: PUSH
36623: LD_VAR 0 1
36627: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36628: LD_ADDR_VAR 0 10
36632: PUSH
36633: LD_VAR 0 10
36637: PPUSH
36638: LD_VAR 0 8
36642: PPUSH
36643: LD_VAR 0 1
36647: PUSH
36648: LD_VAR 0 7
36652: ARRAY
36653: PPUSH
36654: CALL_OW 1
36658: ST_TO_ADDR
// end ;
36659: GO 36572
36661: POP
36662: POP
// array := tmp ;
36663: LD_ADDR_VAR 0 1
36667: PUSH
36668: LD_VAR 0 10
36672: ST_TO_ADDR
// end ;
36673: GO 36554
36675: POP
36676: POP
// result := array ;
36677: LD_ADDR_VAR 0 5
36681: PUSH
36682: LD_VAR 0 1
36686: ST_TO_ADDR
// end ;
36687: LD_VAR 0 5
36691: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36692: LD_INT 0
36694: PPUSH
36695: PPUSH
// result := 0 ;
36696: LD_ADDR_VAR 0 3
36700: PUSH
36701: LD_INT 0
36703: ST_TO_ADDR
// if not array or not value in array then
36704: LD_VAR 0 1
36708: NOT
36709: IFTRUE 36724
36711: PUSH
36712: LD_VAR 0 2
36716: PUSH
36717: LD_VAR 0 1
36721: IN
36722: NOT
36723: OR
36724: IFFALSE 36728
// exit ;
36726: GO 36782
// for i = 1 to array do
36728: LD_ADDR_VAR 0 4
36732: PUSH
36733: DOUBLE
36734: LD_INT 1
36736: DEC
36737: ST_TO_ADDR
36738: LD_VAR 0 1
36742: PUSH
36743: FOR_TO
36744: IFFALSE 36780
// if value = array [ i ] then
36746: LD_VAR 0 2
36750: PUSH
36751: LD_VAR 0 1
36755: PUSH
36756: LD_VAR 0 4
36760: ARRAY
36761: EQUAL
36762: IFFALSE 36778
// begin result := i ;
36764: LD_ADDR_VAR 0 3
36768: PUSH
36769: LD_VAR 0 4
36773: ST_TO_ADDR
// exit ;
36774: POP
36775: POP
36776: GO 36782
// end ;
36778: GO 36743
36780: POP
36781: POP
// end ;
36782: LD_VAR 0 3
36786: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36787: LD_INT 0
36789: PPUSH
// vc_chassis := chassis ;
36790: LD_ADDR_OWVAR 37
36794: PUSH
36795: LD_VAR 0 1
36799: ST_TO_ADDR
// vc_engine := engine ;
36800: LD_ADDR_OWVAR 39
36804: PUSH
36805: LD_VAR 0 2
36809: ST_TO_ADDR
// vc_control := control ;
36810: LD_ADDR_OWVAR 38
36814: PUSH
36815: LD_VAR 0 3
36819: ST_TO_ADDR
// vc_weapon := weapon ;
36820: LD_ADDR_OWVAR 40
36824: PUSH
36825: LD_VAR 0 4
36829: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36830: LD_ADDR_OWVAR 41
36834: PUSH
36835: LD_VAR 0 5
36839: ST_TO_ADDR
// end ;
36840: LD_VAR 0 6
36844: RET
// export function WantPlant ( unit ) ; var task ; begin
36845: LD_INT 0
36847: PPUSH
36848: PPUSH
// result := false ;
36849: LD_ADDR_VAR 0 2
36853: PUSH
36854: LD_INT 0
36856: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36857: LD_ADDR_VAR 0 3
36861: PUSH
36862: LD_VAR 0 1
36866: PPUSH
36867: CALL_OW 437
36871: ST_TO_ADDR
// if task then
36872: LD_VAR 0 3
36876: IFFALSE 36904
// if task [ 1 ] [ 1 ] = p then
36878: LD_VAR 0 3
36882: PUSH
36883: LD_INT 1
36885: ARRAY
36886: PUSH
36887: LD_INT 1
36889: ARRAY
36890: PUSH
36891: LD_STRING p
36893: EQUAL
36894: IFFALSE 36904
// result := true ;
36896: LD_ADDR_VAR 0 2
36900: PUSH
36901: LD_INT 1
36903: ST_TO_ADDR
// end ;
36904: LD_VAR 0 2
36908: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36909: LD_INT 0
36911: PPUSH
36912: PPUSH
36913: PPUSH
36914: PPUSH
// if pos < 1 then
36915: LD_VAR 0 2
36919: PUSH
36920: LD_INT 1
36922: LESS
36923: IFFALSE 36927
// exit ;
36925: GO 37230
// if pos = 1 then
36927: LD_VAR 0 2
36931: PUSH
36932: LD_INT 1
36934: EQUAL
36935: IFFALSE 36968
// result := Replace ( arr , pos [ 1 ] , value ) else
36937: LD_ADDR_VAR 0 4
36941: PUSH
36942: LD_VAR 0 1
36946: PPUSH
36947: LD_VAR 0 2
36951: PUSH
36952: LD_INT 1
36954: ARRAY
36955: PPUSH
36956: LD_VAR 0 3
36960: PPUSH
36961: CALL_OW 1
36965: ST_TO_ADDR
36966: GO 37230
// begin tmp := arr ;
36968: LD_ADDR_VAR 0 6
36972: PUSH
36973: LD_VAR 0 1
36977: ST_TO_ADDR
// s_arr := [ tmp ] ;
36978: LD_ADDR_VAR 0 7
36982: PUSH
36983: LD_VAR 0 6
36987: PUSH
36988: EMPTY
36989: LIST
36990: ST_TO_ADDR
// for i = 1 to pos - 1 do
36991: LD_ADDR_VAR 0 5
36995: PUSH
36996: DOUBLE
36997: LD_INT 1
36999: DEC
37000: ST_TO_ADDR
37001: LD_VAR 0 2
37005: PUSH
37006: LD_INT 1
37008: MINUS
37009: PUSH
37010: FOR_TO
37011: IFFALSE 37056
// begin tmp := tmp [ pos [ i ] ] ;
37013: LD_ADDR_VAR 0 6
37017: PUSH
37018: LD_VAR 0 6
37022: PUSH
37023: LD_VAR 0 2
37027: PUSH
37028: LD_VAR 0 5
37032: ARRAY
37033: ARRAY
37034: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37035: LD_ADDR_VAR 0 7
37039: PUSH
37040: LD_VAR 0 7
37044: PUSH
37045: LD_VAR 0 6
37049: PUSH
37050: EMPTY
37051: LIST
37052: ADD
37053: ST_TO_ADDR
// end ;
37054: GO 37010
37056: POP
37057: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37058: LD_ADDR_VAR 0 6
37062: PUSH
37063: LD_VAR 0 6
37067: PPUSH
37068: LD_VAR 0 2
37072: PUSH
37073: LD_VAR 0 2
37077: ARRAY
37078: PPUSH
37079: LD_VAR 0 3
37083: PPUSH
37084: CALL_OW 1
37088: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37089: LD_ADDR_VAR 0 7
37093: PUSH
37094: LD_VAR 0 7
37098: PPUSH
37099: LD_VAR 0 7
37103: PPUSH
37104: LD_VAR 0 6
37108: PPUSH
37109: CALL_OW 1
37113: ST_TO_ADDR
// for i = s_arr downto 2 do
37114: LD_ADDR_VAR 0 5
37118: PUSH
37119: DOUBLE
37120: LD_VAR 0 7
37124: INC
37125: ST_TO_ADDR
37126: LD_INT 2
37128: PUSH
37129: FOR_DOWNTO
37130: IFFALSE 37214
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37132: LD_ADDR_VAR 0 6
37136: PUSH
37137: LD_VAR 0 7
37141: PUSH
37142: LD_VAR 0 5
37146: PUSH
37147: LD_INT 1
37149: MINUS
37150: ARRAY
37151: PPUSH
37152: LD_VAR 0 2
37156: PUSH
37157: LD_VAR 0 5
37161: PUSH
37162: LD_INT 1
37164: MINUS
37165: ARRAY
37166: PPUSH
37167: LD_VAR 0 7
37171: PUSH
37172: LD_VAR 0 5
37176: ARRAY
37177: PPUSH
37178: CALL_OW 1
37182: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37183: LD_ADDR_VAR 0 7
37187: PUSH
37188: LD_VAR 0 7
37192: PPUSH
37193: LD_VAR 0 5
37197: PUSH
37198: LD_INT 1
37200: MINUS
37201: PPUSH
37202: LD_VAR 0 6
37206: PPUSH
37207: CALL_OW 1
37211: ST_TO_ADDR
// end ;
37212: GO 37129
37214: POP
37215: POP
// result := s_arr [ 1 ] ;
37216: LD_ADDR_VAR 0 4
37220: PUSH
37221: LD_VAR 0 7
37225: PUSH
37226: LD_INT 1
37228: ARRAY
37229: ST_TO_ADDR
// end ; end ;
37230: LD_VAR 0 4
37234: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37235: LD_INT 0
37237: PPUSH
37238: PPUSH
// if not list then
37239: LD_VAR 0 1
37243: NOT
37244: IFFALSE 37248
// exit ;
37246: GO 37339
// i := list [ pos1 ] ;
37248: LD_ADDR_VAR 0 5
37252: PUSH
37253: LD_VAR 0 1
37257: PUSH
37258: LD_VAR 0 2
37262: ARRAY
37263: ST_TO_ADDR
// if not i then
37264: LD_VAR 0 5
37268: NOT
37269: IFFALSE 37273
// exit ;
37271: GO 37339
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37273: LD_ADDR_VAR 0 1
37277: PUSH
37278: LD_VAR 0 1
37282: PPUSH
37283: LD_VAR 0 2
37287: PPUSH
37288: LD_VAR 0 1
37292: PUSH
37293: LD_VAR 0 3
37297: ARRAY
37298: PPUSH
37299: CALL_OW 1
37303: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37304: LD_ADDR_VAR 0 1
37308: PUSH
37309: LD_VAR 0 1
37313: PPUSH
37314: LD_VAR 0 3
37318: PPUSH
37319: LD_VAR 0 5
37323: PPUSH
37324: CALL_OW 1
37328: ST_TO_ADDR
// result := list ;
37329: LD_ADDR_VAR 0 4
37333: PUSH
37334: LD_VAR 0 1
37338: ST_TO_ADDR
// end ;
37339: LD_VAR 0 4
37343: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37344: LD_INT 0
37346: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37347: LD_ADDR_VAR 0 5
37351: PUSH
37352: LD_VAR 0 1
37356: PPUSH
37357: CALL_OW 250
37361: PPUSH
37362: LD_VAR 0 1
37366: PPUSH
37367: CALL_OW 251
37371: PPUSH
37372: LD_VAR 0 2
37376: PPUSH
37377: LD_VAR 0 3
37381: PPUSH
37382: LD_VAR 0 4
37386: PPUSH
37387: CALL 37769 0 5
37391: ST_TO_ADDR
// end ;
37392: LD_VAR 0 5
37396: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
37397: LD_INT 0
37399: PPUSH
37400: PPUSH
37401: PPUSH
37402: PPUSH
// if not list or not unit then
37403: LD_VAR 0 2
37407: NOT
37408: IFTRUE 37417
37410: PUSH
37411: LD_VAR 0 1
37415: NOT
37416: OR
37417: IFFALSE 37421
// exit ;
37419: GO 37764
// result := [ ] ;
37421: LD_ADDR_VAR 0 5
37425: PUSH
37426: EMPTY
37427: ST_TO_ADDR
// for i in list do
37428: LD_ADDR_VAR 0 6
37432: PUSH
37433: LD_VAR 0 2
37437: PUSH
37438: FOR_IN
37439: IFFALSE 37657
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
37441: LD_ADDR_VAR 0 8
37445: PUSH
37446: LD_VAR 0 1
37450: PPUSH
37451: LD_VAR 0 6
37455: PUSH
37456: LD_INT 1
37458: ARRAY
37459: PPUSH
37460: LD_VAR 0 6
37464: PUSH
37465: LD_INT 2
37467: ARRAY
37468: PPUSH
37469: CALL_OW 297
37473: ST_TO_ADDR
// if not Count ( result ) then
37474: LD_VAR 0 5
37478: PPUSH
37479: CALL 34025 0 1
37483: NOT
37484: IFFALSE 37517
// begin result := Join ( result , [ i , tmp ] ) ;
37486: LD_ADDR_VAR 0 5
37490: PUSH
37491: LD_VAR 0 5
37495: PPUSH
37496: LD_VAR 0 6
37500: PUSH
37501: LD_VAR 0 8
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PPUSH
37510: CALL 69957 0 2
37514: ST_TO_ADDR
// continue ;
37515: GO 37438
// end ; if result [ result ] [ 2 ] <= tmp then
37517: LD_VAR 0 5
37521: PUSH
37522: LD_VAR 0 5
37526: ARRAY
37527: PUSH
37528: LD_INT 2
37530: ARRAY
37531: PUSH
37532: LD_VAR 0 8
37536: LESSEQUAL
37537: IFFALSE 37570
// result := Join ( result , [ i , tmp ] ) else
37539: LD_ADDR_VAR 0 5
37543: PUSH
37544: LD_VAR 0 5
37548: PPUSH
37549: LD_VAR 0 6
37553: PUSH
37554: LD_VAR 0 8
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PPUSH
37563: CALL 69957 0 2
37567: ST_TO_ADDR
37568: GO 37655
// begin for j := 1 to Count ( result ) do
37570: LD_ADDR_VAR 0 7
37574: PUSH
37575: DOUBLE
37576: LD_INT 1
37578: DEC
37579: ST_TO_ADDR
37580: LD_VAR 0 5
37584: PPUSH
37585: CALL 34025 0 1
37589: PUSH
37590: FOR_TO
37591: IFFALSE 37653
// begin if tmp < result [ j ] [ 2 ] then
37593: LD_VAR 0 8
37597: PUSH
37598: LD_VAR 0 5
37602: PUSH
37603: LD_VAR 0 7
37607: ARRAY
37608: PUSH
37609: LD_INT 2
37611: ARRAY
37612: LESS
37613: IFFALSE 37651
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37615: LD_ADDR_VAR 0 5
37619: PUSH
37620: LD_VAR 0 5
37624: PPUSH
37625: LD_VAR 0 7
37629: PPUSH
37630: LD_VAR 0 6
37634: PUSH
37635: LD_VAR 0 8
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PPUSH
37644: CALL_OW 2
37648: ST_TO_ADDR
// break ;
37649: GO 37653
// end ; end ;
37651: GO 37590
37653: POP
37654: POP
// end ; end ;
37655: GO 37438
37657: POP
37658: POP
// if result and not asc then
37659: LD_VAR 0 5
37663: IFFALSE 37672
37665: PUSH
37666: LD_VAR 0 3
37670: NOT
37671: AND
37672: IFFALSE 37689
// result := ReverseArray ( result ) ;
37674: LD_ADDR_VAR 0 5
37678: PUSH
37679: LD_VAR 0 5
37683: PPUSH
37684: CALL 65047 0 1
37688: ST_TO_ADDR
// tmp := [ ] ;
37689: LD_ADDR_VAR 0 8
37693: PUSH
37694: EMPTY
37695: ST_TO_ADDR
// if mode then
37696: LD_VAR 0 4
37700: IFFALSE 37764
// begin for i := 1 to result do
37702: LD_ADDR_VAR 0 6
37706: PUSH
37707: DOUBLE
37708: LD_INT 1
37710: DEC
37711: ST_TO_ADDR
37712: LD_VAR 0 5
37716: PUSH
37717: FOR_TO
37718: IFFALSE 37752
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
37720: LD_ADDR_VAR 0 8
37724: PUSH
37725: LD_VAR 0 8
37729: PPUSH
37730: LD_VAR 0 5
37734: PUSH
37735: LD_VAR 0 6
37739: ARRAY
37740: PUSH
37741: LD_INT 1
37743: ARRAY
37744: PPUSH
37745: CALL 69957 0 2
37749: ST_TO_ADDR
37750: GO 37717
37752: POP
37753: POP
// result := tmp ;
37754: LD_ADDR_VAR 0 5
37758: PUSH
37759: LD_VAR 0 8
37763: ST_TO_ADDR
// end ; end ;
37764: LD_VAR 0 5
37768: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37769: LD_INT 0
37771: PPUSH
37772: PPUSH
37773: PPUSH
37774: PPUSH
// if not list then
37775: LD_VAR 0 3
37779: NOT
37780: IFFALSE 37784
// exit ;
37782: GO 38174
// result := [ ] ;
37784: LD_ADDR_VAR 0 6
37788: PUSH
37789: EMPTY
37790: ST_TO_ADDR
// for i in list do
37791: LD_ADDR_VAR 0 7
37795: PUSH
37796: LD_VAR 0 3
37800: PUSH
37801: FOR_IN
37802: IFFALSE 38004
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37804: LD_ADDR_VAR 0 9
37808: PUSH
37809: LD_VAR 0 7
37813: PPUSH
37814: LD_VAR 0 1
37818: PPUSH
37819: LD_VAR 0 2
37823: PPUSH
37824: CALL_OW 297
37828: ST_TO_ADDR
// if not result then
37829: LD_VAR 0 6
37833: NOT
37834: IFFALSE 37860
// result := [ [ i , tmp ] ] else
37836: LD_ADDR_VAR 0 6
37840: PUSH
37841: LD_VAR 0 7
37845: PUSH
37846: LD_VAR 0 9
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: EMPTY
37856: LIST
37857: ST_TO_ADDR
37858: GO 38002
// begin if result [ result ] [ 2 ] <= tmp then
37860: LD_VAR 0 6
37864: PUSH
37865: LD_VAR 0 6
37869: ARRAY
37870: PUSH
37871: LD_INT 2
37873: ARRAY
37874: PUSH
37875: LD_VAR 0 9
37879: LESSEQUAL
37880: IFFALSE 37922
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37882: LD_ADDR_VAR 0 6
37886: PUSH
37887: LD_VAR 0 6
37891: PPUSH
37892: LD_VAR 0 6
37896: PUSH
37897: LD_INT 1
37899: PLUS
37900: PPUSH
37901: LD_VAR 0 7
37905: PUSH
37906: LD_VAR 0 9
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PPUSH
37915: CALL_OW 2
37919: ST_TO_ADDR
37920: GO 38002
// for j := 1 to result do
37922: LD_ADDR_VAR 0 8
37926: PUSH
37927: DOUBLE
37928: LD_INT 1
37930: DEC
37931: ST_TO_ADDR
37932: LD_VAR 0 6
37936: PUSH
37937: FOR_TO
37938: IFFALSE 38000
// begin if tmp < result [ j ] [ 2 ] then
37940: LD_VAR 0 9
37944: PUSH
37945: LD_VAR 0 6
37949: PUSH
37950: LD_VAR 0 8
37954: ARRAY
37955: PUSH
37956: LD_INT 2
37958: ARRAY
37959: LESS
37960: IFFALSE 37998
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37962: LD_ADDR_VAR 0 6
37966: PUSH
37967: LD_VAR 0 6
37971: PPUSH
37972: LD_VAR 0 8
37976: PPUSH
37977: LD_VAR 0 7
37981: PUSH
37982: LD_VAR 0 9
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PPUSH
37991: CALL_OW 2
37995: ST_TO_ADDR
// break ;
37996: GO 38000
// end ; end ;
37998: GO 37937
38000: POP
38001: POP
// end ; end ;
38002: GO 37801
38004: POP
38005: POP
// if result and not asc then
38006: LD_VAR 0 6
38010: IFFALSE 38019
38012: PUSH
38013: LD_VAR 0 4
38017: NOT
38018: AND
38019: IFFALSE 38094
// begin tmp := result ;
38021: LD_ADDR_VAR 0 9
38025: PUSH
38026: LD_VAR 0 6
38030: ST_TO_ADDR
// for i = tmp downto 1 do
38031: LD_ADDR_VAR 0 7
38035: PUSH
38036: DOUBLE
38037: LD_VAR 0 9
38041: INC
38042: ST_TO_ADDR
38043: LD_INT 1
38045: PUSH
38046: FOR_DOWNTO
38047: IFFALSE 38092
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38049: LD_ADDR_VAR 0 6
38053: PUSH
38054: LD_VAR 0 6
38058: PPUSH
38059: LD_VAR 0 9
38063: PUSH
38064: LD_VAR 0 7
38068: MINUS
38069: PUSH
38070: LD_INT 1
38072: PLUS
38073: PPUSH
38074: LD_VAR 0 9
38078: PUSH
38079: LD_VAR 0 7
38083: ARRAY
38084: PPUSH
38085: CALL_OW 1
38089: ST_TO_ADDR
38090: GO 38046
38092: POP
38093: POP
// end ; tmp := [ ] ;
38094: LD_ADDR_VAR 0 9
38098: PUSH
38099: EMPTY
38100: ST_TO_ADDR
// if mode then
38101: LD_VAR 0 5
38105: IFFALSE 38174
// begin for i = 1 to result do
38107: LD_ADDR_VAR 0 7
38111: PUSH
38112: DOUBLE
38113: LD_INT 1
38115: DEC
38116: ST_TO_ADDR
38117: LD_VAR 0 6
38121: PUSH
38122: FOR_TO
38123: IFFALSE 38162
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38125: LD_ADDR_VAR 0 9
38129: PUSH
38130: LD_VAR 0 9
38134: PPUSH
38135: LD_VAR 0 7
38139: PPUSH
38140: LD_VAR 0 6
38144: PUSH
38145: LD_VAR 0 7
38149: ARRAY
38150: PUSH
38151: LD_INT 1
38153: ARRAY
38154: PPUSH
38155: CALL_OW 1
38159: ST_TO_ADDR
38160: GO 38122
38162: POP
38163: POP
// result := tmp ;
38164: LD_ADDR_VAR 0 6
38168: PUSH
38169: LD_VAR 0 9
38173: ST_TO_ADDR
// end ; end ;
38174: LD_VAR 0 6
38178: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38179: LD_INT 0
38181: PPUSH
38182: PPUSH
38183: PPUSH
38184: PPUSH
38185: PPUSH
38186: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38187: LD_ADDR_VAR 0 5
38191: PUSH
38192: LD_INT 0
38194: PUSH
38195: LD_INT 0
38197: PUSH
38198: LD_INT 0
38200: PUSH
38201: EMPTY
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: ST_TO_ADDR
// if not x or not y then
38209: LD_VAR 0 2
38213: NOT
38214: IFTRUE 38223
38216: PUSH
38217: LD_VAR 0 3
38221: NOT
38222: OR
38223: IFFALSE 38227
// exit ;
38225: GO 39883
// if not range then
38227: LD_VAR 0 4
38231: NOT
38232: IFFALSE 38242
// range := 10 ;
38234: LD_ADDR_VAR 0 4
38238: PUSH
38239: LD_INT 10
38241: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38242: LD_ADDR_VAR 0 8
38246: PUSH
38247: LD_INT 81
38249: PUSH
38250: LD_VAR 0 1
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PUSH
38259: LD_INT 92
38261: PUSH
38262: LD_VAR 0 2
38266: PUSH
38267: LD_VAR 0 3
38271: PUSH
38272: LD_VAR 0 4
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: PUSH
38283: LD_INT 3
38285: PUSH
38286: LD_INT 21
38288: PUSH
38289: LD_INT 3
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: LIST
38304: PPUSH
38305: CALL_OW 69
38309: ST_TO_ADDR
// if not tmp then
38310: LD_VAR 0 8
38314: NOT
38315: IFFALSE 38319
// exit ;
38317: GO 39883
// for i in tmp do
38319: LD_ADDR_VAR 0 6
38323: PUSH
38324: LD_VAR 0 8
38328: PUSH
38329: FOR_IN
38330: IFFALSE 39858
// begin points := [ 0 , 0 , 0 ] ;
38332: LD_ADDR_VAR 0 9
38336: PUSH
38337: LD_INT 0
38339: PUSH
38340: LD_INT 0
38342: PUSH
38343: LD_INT 0
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: LIST
38350: ST_TO_ADDR
// bpoints := 1 ;
38351: LD_ADDR_VAR 0 10
38355: PUSH
38356: LD_INT 1
38358: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38359: LD_VAR 0 6
38363: PPUSH
38364: CALL_OW 247
38368: PUSH
38369: LD_INT 1
38371: DOUBLE
38372: EQUAL
38373: IFTRUE 38377
38375: GO 38959
38377: POP
// begin if GetClass ( i ) = 1 then
38378: LD_VAR 0 6
38382: PPUSH
38383: CALL_OW 257
38387: PUSH
38388: LD_INT 1
38390: EQUAL
38391: IFFALSE 38412
// points := [ 10 , 5 , 3 ] ;
38393: LD_ADDR_VAR 0 9
38397: PUSH
38398: LD_INT 10
38400: PUSH
38401: LD_INT 5
38403: PUSH
38404: LD_INT 3
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: LIST
38411: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38412: LD_VAR 0 6
38416: PPUSH
38417: CALL_OW 257
38421: PUSH
38422: LD_INT 2
38424: PUSH
38425: LD_INT 3
38427: PUSH
38428: LD_INT 4
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: LIST
38435: IN
38436: IFFALSE 38457
// points := [ 3 , 2 , 1 ] ;
38438: LD_ADDR_VAR 0 9
38442: PUSH
38443: LD_INT 3
38445: PUSH
38446: LD_INT 2
38448: PUSH
38449: LD_INT 1
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: LIST
38456: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38457: LD_VAR 0 6
38461: PPUSH
38462: CALL_OW 257
38466: PUSH
38467: LD_INT 5
38469: EQUAL
38470: IFFALSE 38491
// points := [ 130 , 5 , 2 ] ;
38472: LD_ADDR_VAR 0 9
38476: PUSH
38477: LD_INT 130
38479: PUSH
38480: LD_INT 5
38482: PUSH
38483: LD_INT 2
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: LIST
38490: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38491: LD_VAR 0 6
38495: PPUSH
38496: CALL_OW 257
38500: PUSH
38501: LD_INT 8
38503: EQUAL
38504: IFFALSE 38525
// points := [ 35 , 35 , 30 ] ;
38506: LD_ADDR_VAR 0 9
38510: PUSH
38511: LD_INT 35
38513: PUSH
38514: LD_INT 35
38516: PUSH
38517: LD_INT 30
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: LIST
38524: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38525: LD_VAR 0 6
38529: PPUSH
38530: CALL_OW 257
38534: PUSH
38535: LD_INT 9
38537: EQUAL
38538: IFFALSE 38559
// points := [ 20 , 55 , 40 ] ;
38540: LD_ADDR_VAR 0 9
38544: PUSH
38545: LD_INT 20
38547: PUSH
38548: LD_INT 55
38550: PUSH
38551: LD_INT 40
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: LIST
38558: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38559: LD_VAR 0 6
38563: PPUSH
38564: CALL_OW 257
38568: PUSH
38569: LD_INT 12
38571: PUSH
38572: LD_INT 16
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: IN
38579: IFFALSE 38600
// points := [ 5 , 3 , 2 ] ;
38581: LD_ADDR_VAR 0 9
38585: PUSH
38586: LD_INT 5
38588: PUSH
38589: LD_INT 3
38591: PUSH
38592: LD_INT 2
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: LIST
38599: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38600: LD_VAR 0 6
38604: PPUSH
38605: CALL_OW 257
38609: PUSH
38610: LD_INT 17
38612: EQUAL
38613: IFFALSE 38634
// points := [ 100 , 50 , 75 ] ;
38615: LD_ADDR_VAR 0 9
38619: PUSH
38620: LD_INT 100
38622: PUSH
38623: LD_INT 50
38625: PUSH
38626: LD_INT 75
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: LIST
38633: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38634: LD_VAR 0 6
38638: PPUSH
38639: CALL_OW 257
38643: PUSH
38644: LD_INT 15
38646: EQUAL
38647: IFFALSE 38668
// points := [ 10 , 5 , 3 ] ;
38649: LD_ADDR_VAR 0 9
38653: PUSH
38654: LD_INT 10
38656: PUSH
38657: LD_INT 5
38659: PUSH
38660: LD_INT 3
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: LIST
38667: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38668: LD_VAR 0 6
38672: PPUSH
38673: CALL_OW 257
38677: PUSH
38678: LD_INT 14
38680: EQUAL
38681: IFFALSE 38702
// points := [ 10 , 0 , 0 ] ;
38683: LD_ADDR_VAR 0 9
38687: PUSH
38688: LD_INT 10
38690: PUSH
38691: LD_INT 0
38693: PUSH
38694: LD_INT 0
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: LIST
38701: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38702: LD_VAR 0 6
38706: PPUSH
38707: CALL_OW 257
38711: PUSH
38712: LD_INT 11
38714: EQUAL
38715: IFFALSE 38736
// points := [ 30 , 10 , 5 ] ;
38717: LD_ADDR_VAR 0 9
38721: PUSH
38722: LD_INT 30
38724: PUSH
38725: LD_INT 10
38727: PUSH
38728: LD_INT 5
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: LIST
38735: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38736: LD_VAR 0 1
38740: PPUSH
38741: LD_INT 5
38743: PPUSH
38744: CALL_OW 321
38748: PUSH
38749: LD_INT 2
38751: EQUAL
38752: IFFALSE 38769
// bpoints := bpoints * 1.8 ;
38754: LD_ADDR_VAR 0 10
38758: PUSH
38759: LD_VAR 0 10
38763: PUSH
38764: LD_REAL  1.80000000000000E+0000
38767: MUL
38768: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38769: LD_VAR 0 6
38773: PPUSH
38774: CALL_OW 257
38778: PUSH
38779: LD_INT 1
38781: PUSH
38782: LD_INT 2
38784: PUSH
38785: LD_INT 3
38787: PUSH
38788: LD_INT 4
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: IN
38797: IFFALSE 38817
38799: PUSH
38800: LD_VAR 0 1
38804: PPUSH
38805: LD_INT 51
38807: PPUSH
38808: CALL_OW 321
38812: PUSH
38813: LD_INT 2
38815: EQUAL
38816: AND
38817: IFFALSE 38834
// bpoints := bpoints * 1.2 ;
38819: LD_ADDR_VAR 0 10
38823: PUSH
38824: LD_VAR 0 10
38828: PUSH
38829: LD_REAL  1.20000000000000E+0000
38832: MUL
38833: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38834: LD_VAR 0 6
38838: PPUSH
38839: CALL_OW 257
38843: PUSH
38844: LD_INT 5
38846: PUSH
38847: LD_INT 7
38849: PUSH
38850: LD_INT 9
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: LIST
38857: IN
38858: IFFALSE 38878
38860: PUSH
38861: LD_VAR 0 1
38865: PPUSH
38866: LD_INT 52
38868: PPUSH
38869: CALL_OW 321
38873: PUSH
38874: LD_INT 2
38876: EQUAL
38877: AND
38878: IFFALSE 38895
// bpoints := bpoints * 1.5 ;
38880: LD_ADDR_VAR 0 10
38884: PUSH
38885: LD_VAR 0 10
38889: PUSH
38890: LD_REAL  1.50000000000000E+0000
38893: MUL
38894: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38895: LD_VAR 0 1
38899: PPUSH
38900: LD_INT 66
38902: PPUSH
38903: CALL_OW 321
38907: PUSH
38908: LD_INT 2
38910: EQUAL
38911: IFFALSE 38928
// bpoints := bpoints * 1.1 ;
38913: LD_ADDR_VAR 0 10
38917: PUSH
38918: LD_VAR 0 10
38922: PUSH
38923: LD_REAL  1.10000000000000E+0000
38926: MUL
38927: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38928: LD_ADDR_VAR 0 10
38932: PUSH
38933: LD_VAR 0 10
38937: PUSH
38938: LD_VAR 0 6
38942: PPUSH
38943: LD_INT 1
38945: PPUSH
38946: CALL_OW 259
38950: PUSH
38951: LD_REAL  1.15000000000000E+0000
38954: MUL
38955: MUL
38956: ST_TO_ADDR
// end ; unit_vehicle :
38957: GO 39787
38959: LD_INT 2
38961: DOUBLE
38962: EQUAL
38963: IFTRUE 38967
38965: GO 39775
38967: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38968: LD_VAR 0 6
38972: PPUSH
38973: CALL_OW 264
38977: PUSH
38978: LD_INT 2
38980: PUSH
38981: LD_INT 42
38983: PUSH
38984: LD_INT 24
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: LIST
38991: IN
38992: IFFALSE 39013
// points := [ 25 , 5 , 3 ] ;
38994: LD_ADDR_VAR 0 9
38998: PUSH
38999: LD_INT 25
39001: PUSH
39002: LD_INT 5
39004: PUSH
39005: LD_INT 3
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: LIST
39012: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39013: LD_VAR 0 6
39017: PPUSH
39018: CALL_OW 264
39022: PUSH
39023: LD_INT 4
39025: PUSH
39026: LD_INT 43
39028: PUSH
39029: LD_INT 25
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: LIST
39036: IN
39037: IFFALSE 39058
// points := [ 40 , 15 , 5 ] ;
39039: LD_ADDR_VAR 0 9
39043: PUSH
39044: LD_INT 40
39046: PUSH
39047: LD_INT 15
39049: PUSH
39050: LD_INT 5
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: LIST
39057: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39058: LD_VAR 0 6
39062: PPUSH
39063: CALL_OW 264
39067: PUSH
39068: LD_INT 3
39070: PUSH
39071: LD_INT 23
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: IN
39078: IFFALSE 39099
// points := [ 7 , 25 , 8 ] ;
39080: LD_ADDR_VAR 0 9
39084: PUSH
39085: LD_INT 7
39087: PUSH
39088: LD_INT 25
39090: PUSH
39091: LD_INT 8
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: LIST
39098: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39099: LD_VAR 0 6
39103: PPUSH
39104: CALL_OW 264
39108: PUSH
39109: LD_INT 5
39111: PUSH
39112: LD_INT 27
39114: PUSH
39115: LD_INT 44
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: LIST
39122: IN
39123: IFFALSE 39144
// points := [ 14 , 50 , 16 ] ;
39125: LD_ADDR_VAR 0 9
39129: PUSH
39130: LD_INT 14
39132: PUSH
39133: LD_INT 50
39135: PUSH
39136: LD_INT 16
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: LIST
39143: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39144: LD_VAR 0 6
39148: PPUSH
39149: CALL_OW 264
39153: PUSH
39154: LD_INT 6
39156: PUSH
39157: LD_INT 46
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: IN
39164: IFFALSE 39185
// points := [ 32 , 120 , 70 ] ;
39166: LD_ADDR_VAR 0 9
39170: PUSH
39171: LD_INT 32
39173: PUSH
39174: LD_INT 120
39176: PUSH
39177: LD_INT 70
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: LIST
39184: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39185: LD_VAR 0 6
39189: PPUSH
39190: CALL_OW 264
39194: PUSH
39195: LD_INT 7
39197: PUSH
39198: LD_INT 28
39200: PUSH
39201: LD_INT 45
39203: PUSH
39204: LD_INT 92
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: IN
39213: IFFALSE 39234
// points := [ 35 , 20 , 45 ] ;
39215: LD_ADDR_VAR 0 9
39219: PUSH
39220: LD_INT 35
39222: PUSH
39223: LD_INT 20
39225: PUSH
39226: LD_INT 45
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: LIST
39233: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39234: LD_VAR 0 6
39238: PPUSH
39239: CALL_OW 264
39243: PUSH
39244: LD_INT 47
39246: PUSH
39247: EMPTY
39248: LIST
39249: IN
39250: IFFALSE 39271
// points := [ 67 , 45 , 75 ] ;
39252: LD_ADDR_VAR 0 9
39256: PUSH
39257: LD_INT 67
39259: PUSH
39260: LD_INT 45
39262: PUSH
39263: LD_INT 75
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: LIST
39270: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39271: LD_VAR 0 6
39275: PPUSH
39276: CALL_OW 264
39280: PUSH
39281: LD_INT 26
39283: PUSH
39284: EMPTY
39285: LIST
39286: IN
39287: IFFALSE 39308
// points := [ 120 , 30 , 80 ] ;
39289: LD_ADDR_VAR 0 9
39293: PUSH
39294: LD_INT 120
39296: PUSH
39297: LD_INT 30
39299: PUSH
39300: LD_INT 80
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: LIST
39307: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39308: LD_VAR 0 6
39312: PPUSH
39313: CALL_OW 264
39317: PUSH
39318: LD_INT 22
39320: PUSH
39321: EMPTY
39322: LIST
39323: IN
39324: IFFALSE 39345
// points := [ 40 , 1 , 1 ] ;
39326: LD_ADDR_VAR 0 9
39330: PUSH
39331: LD_INT 40
39333: PUSH
39334: LD_INT 1
39336: PUSH
39337: LD_INT 1
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: LIST
39344: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39345: LD_VAR 0 6
39349: PPUSH
39350: CALL_OW 264
39354: PUSH
39355: LD_INT 29
39357: PUSH
39358: EMPTY
39359: LIST
39360: IN
39361: IFFALSE 39382
// points := [ 70 , 200 , 400 ] ;
39363: LD_ADDR_VAR 0 9
39367: PUSH
39368: LD_INT 70
39370: PUSH
39371: LD_INT 200
39373: PUSH
39374: LD_INT 400
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: LIST
39381: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39382: LD_VAR 0 6
39386: PPUSH
39387: CALL_OW 264
39391: PUSH
39392: LD_INT 14
39394: PUSH
39395: LD_INT 53
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: IN
39402: IFFALSE 39423
// points := [ 40 , 10 , 20 ] ;
39404: LD_ADDR_VAR 0 9
39408: PUSH
39409: LD_INT 40
39411: PUSH
39412: LD_INT 10
39414: PUSH
39415: LD_INT 20
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: LIST
39422: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39423: LD_VAR 0 6
39427: PPUSH
39428: CALL_OW 264
39432: PUSH
39433: LD_INT 9
39435: PUSH
39436: EMPTY
39437: LIST
39438: IN
39439: IFFALSE 39460
// points := [ 5 , 70 , 20 ] ;
39441: LD_ADDR_VAR 0 9
39445: PUSH
39446: LD_INT 5
39448: PUSH
39449: LD_INT 70
39451: PUSH
39452: LD_INT 20
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: LIST
39459: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39460: LD_VAR 0 6
39464: PPUSH
39465: CALL_OW 264
39469: PUSH
39470: LD_INT 10
39472: PUSH
39473: EMPTY
39474: LIST
39475: IN
39476: IFFALSE 39497
// points := [ 35 , 110 , 70 ] ;
39478: LD_ADDR_VAR 0 9
39482: PUSH
39483: LD_INT 35
39485: PUSH
39486: LD_INT 110
39488: PUSH
39489: LD_INT 70
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: LIST
39496: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39497: LD_VAR 0 6
39501: PPUSH
39502: CALL_OW 265
39506: PUSH
39507: LD_INT 25
39509: EQUAL
39510: IFFALSE 39531
// points := [ 80 , 65 , 100 ] ;
39512: LD_ADDR_VAR 0 9
39516: PUSH
39517: LD_INT 80
39519: PUSH
39520: LD_INT 65
39522: PUSH
39523: LD_INT 100
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: LIST
39530: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39531: LD_VAR 0 6
39535: PPUSH
39536: CALL_OW 263
39540: PUSH
39541: LD_INT 1
39543: EQUAL
39544: IFFALSE 39579
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39546: LD_ADDR_VAR 0 10
39550: PUSH
39551: LD_VAR 0 10
39555: PUSH
39556: LD_VAR 0 6
39560: PPUSH
39561: CALL_OW 311
39565: PPUSH
39566: LD_INT 3
39568: PPUSH
39569: CALL_OW 259
39573: PUSH
39574: LD_INT 4
39576: MUL
39577: MUL
39578: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39579: LD_VAR 0 6
39583: PPUSH
39584: CALL_OW 263
39588: PUSH
39589: LD_INT 2
39591: EQUAL
39592: IFFALSE 39643
// begin j := IsControledBy ( i ) ;
39594: LD_ADDR_VAR 0 7
39598: PUSH
39599: LD_VAR 0 6
39603: PPUSH
39604: CALL_OW 312
39608: ST_TO_ADDR
// if j then
39609: LD_VAR 0 7
39613: IFFALSE 39643
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39615: LD_ADDR_VAR 0 10
39619: PUSH
39620: LD_VAR 0 10
39624: PUSH
39625: LD_VAR 0 7
39629: PPUSH
39630: LD_INT 3
39632: PPUSH
39633: CALL_OW 259
39637: PUSH
39638: LD_INT 3
39640: MUL
39641: MUL
39642: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39643: LD_VAR 0 6
39647: PPUSH
39648: CALL_OW 264
39652: PUSH
39653: LD_INT 5
39655: PUSH
39656: LD_INT 6
39658: PUSH
39659: LD_INT 46
39661: PUSH
39662: LD_INT 44
39664: PUSH
39665: LD_INT 47
39667: PUSH
39668: LD_INT 45
39670: PUSH
39671: LD_INT 28
39673: PUSH
39674: LD_INT 7
39676: PUSH
39677: LD_INT 27
39679: PUSH
39680: LD_INT 29
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: IN
39695: IFFALSE 39715
39697: PUSH
39698: LD_VAR 0 1
39702: PPUSH
39703: LD_INT 52
39705: PPUSH
39706: CALL_OW 321
39710: PUSH
39711: LD_INT 2
39713: EQUAL
39714: AND
39715: IFFALSE 39732
// bpoints := bpoints * 1.2 ;
39717: LD_ADDR_VAR 0 10
39721: PUSH
39722: LD_VAR 0 10
39726: PUSH
39727: LD_REAL  1.20000000000000E+0000
39730: MUL
39731: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39732: LD_VAR 0 6
39736: PPUSH
39737: CALL_OW 264
39741: PUSH
39742: LD_INT 6
39744: PUSH
39745: LD_INT 46
39747: PUSH
39748: LD_INT 47
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: LIST
39755: IN
39756: IFFALSE 39773
// bpoints := bpoints * 1.2 ;
39758: LD_ADDR_VAR 0 10
39762: PUSH
39763: LD_VAR 0 10
39767: PUSH
39768: LD_REAL  1.20000000000000E+0000
39771: MUL
39772: ST_TO_ADDR
// end ; unit_building :
39773: GO 39787
39775: LD_INT 3
39777: DOUBLE
39778: EQUAL
39779: IFTRUE 39783
39781: GO 39786
39783: POP
// ; end ;
39784: GO 39787
39786: POP
// for j = 1 to 3 do
39787: LD_ADDR_VAR 0 7
39791: PUSH
39792: DOUBLE
39793: LD_INT 1
39795: DEC
39796: ST_TO_ADDR
39797: LD_INT 3
39799: PUSH
39800: FOR_TO
39801: IFFALSE 39854
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39803: LD_ADDR_VAR 0 5
39807: PUSH
39808: LD_VAR 0 5
39812: PPUSH
39813: LD_VAR 0 7
39817: PPUSH
39818: LD_VAR 0 5
39822: PUSH
39823: LD_VAR 0 7
39827: ARRAY
39828: PUSH
39829: LD_VAR 0 9
39833: PUSH
39834: LD_VAR 0 7
39838: ARRAY
39839: PUSH
39840: LD_VAR 0 10
39844: MUL
39845: PLUS
39846: PPUSH
39847: CALL_OW 1
39851: ST_TO_ADDR
39852: GO 39800
39854: POP
39855: POP
// end ;
39856: GO 38329
39858: POP
39859: POP
// result := Replace ( result , 4 , tmp ) ;
39860: LD_ADDR_VAR 0 5
39864: PUSH
39865: LD_VAR 0 5
39869: PPUSH
39870: LD_INT 4
39872: PPUSH
39873: LD_VAR 0 8
39877: PPUSH
39878: CALL_OW 1
39882: ST_TO_ADDR
// end ;
39883: LD_VAR 0 5
39887: RET
// export function DangerAtRange ( unit , range ) ; begin
39888: LD_INT 0
39890: PPUSH
// if not unit then
39891: LD_VAR 0 1
39895: NOT
39896: IFFALSE 39900
// exit ;
39898: GO 39945
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39900: LD_ADDR_VAR 0 3
39904: PUSH
39905: LD_VAR 0 1
39909: PPUSH
39910: CALL_OW 255
39914: PPUSH
39915: LD_VAR 0 1
39919: PPUSH
39920: CALL_OW 250
39924: PPUSH
39925: LD_VAR 0 1
39929: PPUSH
39930: CALL_OW 251
39934: PPUSH
39935: LD_VAR 0 2
39939: PPUSH
39940: CALL 38179 0 4
39944: ST_TO_ADDR
// end ;
39945: LD_VAR 0 3
39949: RET
// export function DangerInArea ( side , area ) ; begin
39950: LD_INT 0
39952: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39953: LD_ADDR_VAR 0 3
39957: PUSH
39958: LD_VAR 0 2
39962: PPUSH
39963: LD_INT 81
39965: PUSH
39966: LD_VAR 0 1
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PPUSH
39975: CALL_OW 70
39979: ST_TO_ADDR
// end ;
39980: LD_VAR 0 3
39984: RET
// export function IsExtension ( b ) ; begin
39985: LD_INT 0
39987: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39988: LD_ADDR_VAR 0 2
39992: PUSH
39993: LD_VAR 0 1
39997: PUSH
39998: LD_INT 23
40000: PUSH
40001: LD_INT 20
40003: PUSH
40004: LD_INT 22
40006: PUSH
40007: LD_INT 17
40009: PUSH
40010: LD_INT 24
40012: PUSH
40013: LD_INT 21
40015: PUSH
40016: LD_INT 19
40018: PUSH
40019: LD_INT 16
40021: PUSH
40022: LD_INT 25
40024: PUSH
40025: LD_INT 18
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: IN
40040: ST_TO_ADDR
// end ;
40041: LD_VAR 0 2
40045: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40046: LD_INT 0
40048: PPUSH
40049: PPUSH
40050: PPUSH
// result := [ ] ;
40051: LD_ADDR_VAR 0 4
40055: PUSH
40056: EMPTY
40057: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40058: LD_ADDR_VAR 0 5
40062: PUSH
40063: LD_VAR 0 2
40067: PPUSH
40068: LD_INT 21
40070: PUSH
40071: LD_INT 3
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PPUSH
40078: CALL_OW 70
40082: ST_TO_ADDR
// if not tmp then
40083: LD_VAR 0 5
40087: NOT
40088: IFFALSE 40092
// exit ;
40090: GO 40156
// if checkLink then
40092: LD_VAR 0 3
40096: IFFALSE 40146
// begin for i in tmp do
40098: LD_ADDR_VAR 0 6
40102: PUSH
40103: LD_VAR 0 5
40107: PUSH
40108: FOR_IN
40109: IFFALSE 40144
// if GetBase ( i ) <> base then
40111: LD_VAR 0 6
40115: PPUSH
40116: CALL_OW 274
40120: PUSH
40121: LD_VAR 0 1
40125: NONEQUAL
40126: IFFALSE 40142
// ComLinkToBase ( base , i ) ;
40128: LD_VAR 0 1
40132: PPUSH
40133: LD_VAR 0 6
40137: PPUSH
40138: CALL_OW 169
40142: GO 40108
40144: POP
40145: POP
// end ; result := tmp ;
40146: LD_ADDR_VAR 0 4
40150: PUSH
40151: LD_VAR 0 5
40155: ST_TO_ADDR
// end ;
40156: LD_VAR 0 4
40160: RET
// export function ComComplete ( units , b ) ; var i ; begin
40161: LD_INT 0
40163: PPUSH
40164: PPUSH
// if not units then
40165: LD_VAR 0 1
40169: NOT
40170: IFFALSE 40174
// exit ;
40172: GO 40264
// for i in units do
40174: LD_ADDR_VAR 0 4
40178: PUSH
40179: LD_VAR 0 1
40183: PUSH
40184: FOR_IN
40185: IFFALSE 40262
// if BuildingStatus ( b ) = bs_build then
40187: LD_VAR 0 2
40191: PPUSH
40192: CALL_OW 461
40196: PUSH
40197: LD_INT 1
40199: EQUAL
40200: IFFALSE 40260
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40202: LD_VAR 0 4
40206: PPUSH
40207: LD_STRING h
40209: PUSH
40210: LD_VAR 0 2
40214: PPUSH
40215: CALL_OW 250
40219: PUSH
40220: LD_VAR 0 2
40224: PPUSH
40225: CALL_OW 251
40229: PUSH
40230: LD_VAR 0 2
40234: PUSH
40235: LD_INT 0
40237: PUSH
40238: LD_INT 0
40240: PUSH
40241: LD_INT 0
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: PUSH
40253: EMPTY
40254: LIST
40255: PPUSH
40256: CALL_OW 446
40260: GO 40184
40262: POP
40263: POP
// end ;
40264: LD_VAR 0 3
40268: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40269: LD_INT 0
40271: PPUSH
40272: PPUSH
40273: PPUSH
40274: PPUSH
40275: PPUSH
40276: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40277: LD_VAR 0 1
40281: NOT
40282: IFTRUE 40299
40284: PUSH
40285: LD_VAR 0 1
40289: PPUSH
40290: CALL_OW 263
40294: PUSH
40295: LD_INT 2
40297: NONEQUAL
40298: OR
40299: IFFALSE 40303
// exit ;
40301: GO 40619
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40303: LD_ADDR_VAR 0 6
40307: PUSH
40308: LD_INT 22
40310: PUSH
40311: LD_VAR 0 1
40315: PPUSH
40316: CALL_OW 255
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 2
40327: PUSH
40328: LD_INT 30
40330: PUSH
40331: LD_INT 36
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 34
40340: PUSH
40341: LD_INT 31
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: LIST
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PPUSH
40357: CALL_OW 69
40361: ST_TO_ADDR
// if not tmp then
40362: LD_VAR 0 6
40366: NOT
40367: IFFALSE 40371
// exit ;
40369: GO 40619
// result := [ ] ;
40371: LD_ADDR_VAR 0 2
40375: PUSH
40376: EMPTY
40377: ST_TO_ADDR
// for i in tmp do
40378: LD_ADDR_VAR 0 3
40382: PUSH
40383: LD_VAR 0 6
40387: PUSH
40388: FOR_IN
40389: IFFALSE 40460
// begin t := UnitsInside ( i ) ;
40391: LD_ADDR_VAR 0 4
40395: PUSH
40396: LD_VAR 0 3
40400: PPUSH
40401: CALL_OW 313
40405: ST_TO_ADDR
// if t then
40406: LD_VAR 0 4
40410: IFFALSE 40458
// for j in t do
40412: LD_ADDR_VAR 0 7
40416: PUSH
40417: LD_VAR 0 4
40421: PUSH
40422: FOR_IN
40423: IFFALSE 40456
// result := Replace ( result , result + 1 , j ) ;
40425: LD_ADDR_VAR 0 2
40429: PUSH
40430: LD_VAR 0 2
40434: PPUSH
40435: LD_VAR 0 2
40439: PUSH
40440: LD_INT 1
40442: PLUS
40443: PPUSH
40444: LD_VAR 0 7
40448: PPUSH
40449: CALL_OW 1
40453: ST_TO_ADDR
40454: GO 40422
40456: POP
40457: POP
// end ;
40458: GO 40388
40460: POP
40461: POP
// if not result then
40462: LD_VAR 0 2
40466: NOT
40467: IFFALSE 40471
// exit ;
40469: GO 40619
// mech := result [ 1 ] ;
40471: LD_ADDR_VAR 0 5
40475: PUSH
40476: LD_VAR 0 2
40480: PUSH
40481: LD_INT 1
40483: ARRAY
40484: ST_TO_ADDR
// if result > 1 then
40485: LD_VAR 0 2
40489: PUSH
40490: LD_INT 1
40492: GREATER
40493: IFFALSE 40605
// begin for i = 2 to result do
40495: LD_ADDR_VAR 0 3
40499: PUSH
40500: DOUBLE
40501: LD_INT 2
40503: DEC
40504: ST_TO_ADDR
40505: LD_VAR 0 2
40509: PUSH
40510: FOR_TO
40511: IFFALSE 40603
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40513: LD_ADDR_VAR 0 4
40517: PUSH
40518: LD_VAR 0 2
40522: PUSH
40523: LD_VAR 0 3
40527: ARRAY
40528: PPUSH
40529: LD_INT 3
40531: PPUSH
40532: CALL_OW 259
40536: PUSH
40537: LD_VAR 0 2
40541: PUSH
40542: LD_VAR 0 3
40546: ARRAY
40547: PPUSH
40548: CALL_OW 432
40552: MINUS
40553: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40554: LD_VAR 0 4
40558: PUSH
40559: LD_VAR 0 5
40563: PPUSH
40564: LD_INT 3
40566: PPUSH
40567: CALL_OW 259
40571: PUSH
40572: LD_VAR 0 5
40576: PPUSH
40577: CALL_OW 432
40581: MINUS
40582: GREATEREQUAL
40583: IFFALSE 40601
// mech := result [ i ] ;
40585: LD_ADDR_VAR 0 5
40589: PUSH
40590: LD_VAR 0 2
40594: PUSH
40595: LD_VAR 0 3
40599: ARRAY
40600: ST_TO_ADDR
// end ;
40601: GO 40510
40603: POP
40604: POP
// end ; ComLinkTo ( vehicle , mech ) ;
40605: LD_VAR 0 1
40609: PPUSH
40610: LD_VAR 0 5
40614: PPUSH
40615: CALL_OW 135
// end ;
40619: LD_VAR 0 2
40623: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40624: LD_INT 0
40626: PPUSH
40627: PPUSH
40628: PPUSH
40629: PPUSH
40630: PPUSH
40631: PPUSH
40632: PPUSH
40633: PPUSH
40634: PPUSH
40635: PPUSH
40636: PPUSH
40637: PPUSH
40638: PPUSH
// result := [ ] ;
40639: LD_ADDR_VAR 0 7
40643: PUSH
40644: EMPTY
40645: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40646: LD_VAR 0 1
40650: PPUSH
40651: CALL_OW 266
40655: PUSH
40656: LD_INT 0
40658: PUSH
40659: LD_INT 1
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: IN
40666: NOT
40667: IFFALSE 40671
// exit ;
40669: GO 42311
// if name then
40671: LD_VAR 0 3
40675: IFFALSE 40691
// SetBName ( base_dep , name ) ;
40677: LD_VAR 0 1
40681: PPUSH
40682: LD_VAR 0 3
40686: PPUSH
40687: CALL_OW 500
// base := GetBase ( base_dep ) ;
40691: LD_ADDR_VAR 0 15
40695: PUSH
40696: LD_VAR 0 1
40700: PPUSH
40701: CALL_OW 274
40705: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40706: LD_ADDR_VAR 0 16
40710: PUSH
40711: LD_VAR 0 1
40715: PPUSH
40716: CALL_OW 255
40720: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40721: LD_ADDR_VAR 0 17
40725: PUSH
40726: LD_VAR 0 1
40730: PPUSH
40731: CALL_OW 248
40735: ST_TO_ADDR
// if sources then
40736: LD_VAR 0 5
40740: IFFALSE 40787
// for i = 1 to 3 do
40742: LD_ADDR_VAR 0 8
40746: PUSH
40747: DOUBLE
40748: LD_INT 1
40750: DEC
40751: ST_TO_ADDR
40752: LD_INT 3
40754: PUSH
40755: FOR_TO
40756: IFFALSE 40785
// AddResourceType ( base , i , sources [ i ] ) ;
40758: LD_VAR 0 15
40762: PPUSH
40763: LD_VAR 0 8
40767: PPUSH
40768: LD_VAR 0 5
40772: PUSH
40773: LD_VAR 0 8
40777: ARRAY
40778: PPUSH
40779: CALL_OW 276
40783: GO 40755
40785: POP
40786: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40787: LD_ADDR_VAR 0 18
40791: PUSH
40792: LD_VAR 0 15
40796: PPUSH
40797: LD_VAR 0 2
40801: PPUSH
40802: LD_INT 1
40804: PPUSH
40805: CALL 40046 0 3
40809: ST_TO_ADDR
// InitHc ;
40810: CALL_OW 19
// InitUc ;
40814: CALL_OW 18
// uc_side := side ;
40818: LD_ADDR_OWVAR 20
40822: PUSH
40823: LD_VAR 0 16
40827: ST_TO_ADDR
// uc_nation := nation ;
40828: LD_ADDR_OWVAR 21
40832: PUSH
40833: LD_VAR 0 17
40837: ST_TO_ADDR
// if buildings then
40838: LD_VAR 0 18
40842: IFFALSE 42170
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40844: LD_ADDR_VAR 0 19
40848: PUSH
40849: LD_VAR 0 18
40853: PPUSH
40854: LD_INT 2
40856: PUSH
40857: LD_INT 30
40859: PUSH
40860: LD_INT 29
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: LD_INT 30
40869: PUSH
40870: LD_INT 30
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: LIST
40881: PPUSH
40882: CALL_OW 72
40886: ST_TO_ADDR
// if tmp then
40887: LD_VAR 0 19
40891: IFFALSE 40939
// for i in tmp do
40893: LD_ADDR_VAR 0 8
40897: PUSH
40898: LD_VAR 0 19
40902: PUSH
40903: FOR_IN
40904: IFFALSE 40937
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40906: LD_VAR 0 8
40910: PPUSH
40911: CALL_OW 250
40915: PPUSH
40916: LD_VAR 0 8
40920: PPUSH
40921: CALL_OW 251
40925: PPUSH
40926: LD_VAR 0 16
40930: PPUSH
40931: CALL_OW 441
40935: GO 40903
40937: POP
40938: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40939: LD_VAR 0 18
40943: PPUSH
40944: LD_INT 2
40946: PUSH
40947: LD_INT 30
40949: PUSH
40950: LD_INT 32
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 30
40959: PUSH
40960: LD_INT 33
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: LIST
40971: PPUSH
40972: CALL_OW 72
40976: IFFALSE 41064
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40978: LD_ADDR_VAR 0 8
40982: PUSH
40983: LD_VAR 0 18
40987: PPUSH
40988: LD_INT 2
40990: PUSH
40991: LD_INT 30
40993: PUSH
40994: LD_INT 32
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 30
41003: PUSH
41004: LD_INT 33
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: LIST
41015: PPUSH
41016: CALL_OW 72
41020: PUSH
41021: FOR_IN
41022: IFFALSE 41062
// begin if not GetBWeapon ( i ) then
41024: LD_VAR 0 8
41028: PPUSH
41029: CALL_OW 269
41033: NOT
41034: IFFALSE 41060
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41036: LD_VAR 0 8
41040: PPUSH
41041: LD_VAR 0 8
41045: PPUSH
41046: LD_VAR 0 2
41050: PPUSH
41051: CALL 42316 0 2
41055: PPUSH
41056: CALL_OW 431
// end ;
41060: GO 41021
41062: POP
41063: POP
// end ; for i = 1 to personel do
41064: LD_ADDR_VAR 0 8
41068: PUSH
41069: DOUBLE
41070: LD_INT 1
41072: DEC
41073: ST_TO_ADDR
41074: LD_VAR 0 6
41078: PUSH
41079: FOR_TO
41080: IFFALSE 42150
// begin if i > 4 then
41082: LD_VAR 0 8
41086: PUSH
41087: LD_INT 4
41089: GREATER
41090: IFFALSE 41094
// break ;
41092: GO 42150
// case i of 1 :
41094: LD_VAR 0 8
41098: PUSH
41099: LD_INT 1
41101: DOUBLE
41102: EQUAL
41103: IFTRUE 41107
41105: GO 41187
41107: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41108: LD_ADDR_VAR 0 12
41112: PUSH
41113: LD_VAR 0 18
41117: PPUSH
41118: LD_INT 22
41120: PUSH
41121: LD_VAR 0 16
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 58
41132: PUSH
41133: EMPTY
41134: LIST
41135: PUSH
41136: LD_INT 2
41138: PUSH
41139: LD_INT 30
41141: PUSH
41142: LD_INT 32
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 30
41151: PUSH
41152: LD_INT 4
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 30
41161: PUSH
41162: LD_INT 5
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: LIST
41179: PPUSH
41180: CALL_OW 72
41184: ST_TO_ADDR
41185: GO 41409
41187: LD_INT 2
41189: DOUBLE
41190: EQUAL
41191: IFTRUE 41195
41193: GO 41257
41195: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41196: LD_ADDR_VAR 0 12
41200: PUSH
41201: LD_VAR 0 18
41205: PPUSH
41206: LD_INT 22
41208: PUSH
41209: LD_VAR 0 16
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 2
41220: PUSH
41221: LD_INT 30
41223: PUSH
41224: LD_INT 0
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 30
41233: PUSH
41234: LD_INT 1
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: LIST
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PPUSH
41250: CALL_OW 72
41254: ST_TO_ADDR
41255: GO 41409
41257: LD_INT 3
41259: DOUBLE
41260: EQUAL
41261: IFTRUE 41265
41263: GO 41327
41265: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41266: LD_ADDR_VAR 0 12
41270: PUSH
41271: LD_VAR 0 18
41275: PPUSH
41276: LD_INT 22
41278: PUSH
41279: LD_VAR 0 16
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 2
41290: PUSH
41291: LD_INT 30
41293: PUSH
41294: LD_INT 2
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 30
41303: PUSH
41304: LD_INT 3
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: LIST
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PPUSH
41320: CALL_OW 72
41324: ST_TO_ADDR
41325: GO 41409
41327: LD_INT 4
41329: DOUBLE
41330: EQUAL
41331: IFTRUE 41335
41333: GO 41408
41335: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41336: LD_ADDR_VAR 0 12
41340: PUSH
41341: LD_VAR 0 18
41345: PPUSH
41346: LD_INT 22
41348: PUSH
41349: LD_VAR 0 16
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 2
41360: PUSH
41361: LD_INT 30
41363: PUSH
41364: LD_INT 6
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 30
41373: PUSH
41374: LD_INT 7
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 30
41383: PUSH
41384: LD_INT 8
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PPUSH
41401: CALL_OW 72
41405: ST_TO_ADDR
41406: GO 41409
41408: POP
// if i = 1 then
41409: LD_VAR 0 8
41413: PUSH
41414: LD_INT 1
41416: EQUAL
41417: IFFALSE 41528
// begin tmp := [ ] ;
41419: LD_ADDR_VAR 0 19
41423: PUSH
41424: EMPTY
41425: ST_TO_ADDR
// for j in f do
41426: LD_ADDR_VAR 0 9
41430: PUSH
41431: LD_VAR 0 12
41435: PUSH
41436: FOR_IN
41437: IFFALSE 41510
// if GetBType ( j ) = b_bunker then
41439: LD_VAR 0 9
41443: PPUSH
41444: CALL_OW 266
41448: PUSH
41449: LD_INT 32
41451: EQUAL
41452: IFFALSE 41479
// tmp := Insert ( tmp , 1 , j ) else
41454: LD_ADDR_VAR 0 19
41458: PUSH
41459: LD_VAR 0 19
41463: PPUSH
41464: LD_INT 1
41466: PPUSH
41467: LD_VAR 0 9
41471: PPUSH
41472: CALL_OW 2
41476: ST_TO_ADDR
41477: GO 41508
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41479: LD_ADDR_VAR 0 19
41483: PUSH
41484: LD_VAR 0 19
41488: PPUSH
41489: LD_VAR 0 19
41493: PUSH
41494: LD_INT 1
41496: PLUS
41497: PPUSH
41498: LD_VAR 0 9
41502: PPUSH
41503: CALL_OW 2
41507: ST_TO_ADDR
41508: GO 41436
41510: POP
41511: POP
// if tmp then
41512: LD_VAR 0 19
41516: IFFALSE 41528
// f := tmp ;
41518: LD_ADDR_VAR 0 12
41522: PUSH
41523: LD_VAR 0 19
41527: ST_TO_ADDR
// end ; x := personel [ i ] ;
41528: LD_ADDR_VAR 0 13
41532: PUSH
41533: LD_VAR 0 6
41537: PUSH
41538: LD_VAR 0 8
41542: ARRAY
41543: ST_TO_ADDR
// if x = - 1 then
41544: LD_VAR 0 13
41548: PUSH
41549: LD_INT 1
41551: NEG
41552: EQUAL
41553: IFFALSE 41764
// begin for j in f do
41555: LD_ADDR_VAR 0 9
41559: PUSH
41560: LD_VAR 0 12
41564: PUSH
41565: FOR_IN
41566: IFFALSE 41760
// repeat InitHc ;
41568: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41572: LD_VAR 0 9
41576: PPUSH
41577: CALL_OW 266
41581: PUSH
41582: LD_INT 5
41584: EQUAL
41585: IFFALSE 41655
// begin if UnitsInside ( j ) < 3 then
41587: LD_VAR 0 9
41591: PPUSH
41592: CALL_OW 313
41596: PUSH
41597: LD_INT 3
41599: LESS
41600: IFFALSE 41636
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41602: LD_INT 0
41604: PPUSH
41605: LD_INT 5
41607: PUSH
41608: LD_INT 8
41610: PUSH
41611: LD_INT 9
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: LIST
41618: PUSH
41619: LD_VAR 0 17
41623: ARRAY
41624: PPUSH
41625: LD_VAR 0 4
41629: PPUSH
41630: CALL_OW 380
41634: GO 41653
// PrepareHuman ( false , i , skill ) ;
41636: LD_INT 0
41638: PPUSH
41639: LD_VAR 0 8
41643: PPUSH
41644: LD_VAR 0 4
41648: PPUSH
41649: CALL_OW 380
// end else
41653: GO 41672
// PrepareHuman ( false , i , skill ) ;
41655: LD_INT 0
41657: PPUSH
41658: LD_VAR 0 8
41662: PPUSH
41663: LD_VAR 0 4
41667: PPUSH
41668: CALL_OW 380
// un := CreateHuman ;
41672: LD_ADDR_VAR 0 14
41676: PUSH
41677: CALL_OW 44
41681: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41682: LD_ADDR_VAR 0 7
41686: PUSH
41687: LD_VAR 0 7
41691: PPUSH
41692: LD_INT 1
41694: PPUSH
41695: LD_VAR 0 14
41699: PPUSH
41700: CALL_OW 2
41704: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41705: LD_VAR 0 14
41709: PPUSH
41710: LD_VAR 0 9
41714: PPUSH
41715: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41719: LD_VAR 0 9
41723: PPUSH
41724: CALL_OW 313
41728: PUSH
41729: LD_INT 6
41731: EQUAL
41732: IFTRUE 41756
41734: PUSH
41735: LD_VAR 0 9
41739: PPUSH
41740: CALL_OW 266
41744: PUSH
41745: LD_INT 32
41747: PUSH
41748: LD_INT 31
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: IN
41755: OR
41756: IFFALSE 41568
41758: GO 41565
41760: POP
41761: POP
// end else
41762: GO 42148
// for j = 1 to x do
41764: LD_ADDR_VAR 0 9
41768: PUSH
41769: DOUBLE
41770: LD_INT 1
41772: DEC
41773: ST_TO_ADDR
41774: LD_VAR 0 13
41778: PUSH
41779: FOR_TO
41780: IFFALSE 42146
// begin InitHc ;
41782: CALL_OW 19
// if not f then
41786: LD_VAR 0 12
41790: NOT
41791: IFFALSE 41880
// begin PrepareHuman ( false , i , skill ) ;
41793: LD_INT 0
41795: PPUSH
41796: LD_VAR 0 8
41800: PPUSH
41801: LD_VAR 0 4
41805: PPUSH
41806: CALL_OW 380
// un := CreateHuman ;
41810: LD_ADDR_VAR 0 14
41814: PUSH
41815: CALL_OW 44
41819: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41820: LD_ADDR_VAR 0 7
41824: PUSH
41825: LD_VAR 0 7
41829: PPUSH
41830: LD_INT 1
41832: PPUSH
41833: LD_VAR 0 14
41837: PPUSH
41838: CALL_OW 2
41842: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41843: LD_VAR 0 14
41847: PPUSH
41848: LD_VAR 0 1
41852: PPUSH
41853: CALL_OW 250
41857: PPUSH
41858: LD_VAR 0 1
41862: PPUSH
41863: CALL_OW 251
41867: PPUSH
41868: LD_INT 10
41870: PPUSH
41871: LD_INT 0
41873: PPUSH
41874: CALL_OW 50
// continue ;
41878: GO 41779
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41880: LD_VAR 0 12
41884: PUSH
41885: LD_INT 1
41887: ARRAY
41888: PPUSH
41889: CALL_OW 313
41893: IFFALSE 41921
41895: PUSH
41896: LD_VAR 0 12
41900: PUSH
41901: LD_INT 1
41903: ARRAY
41904: PPUSH
41905: CALL_OW 266
41909: PUSH
41910: LD_INT 32
41912: PUSH
41913: LD_INT 31
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: IN
41920: AND
41921: IFTRUE 41942
41923: PUSH
41924: LD_VAR 0 12
41928: PUSH
41929: LD_INT 1
41931: ARRAY
41932: PPUSH
41933: CALL_OW 313
41937: PUSH
41938: LD_INT 6
41940: EQUAL
41941: OR
41942: IFFALSE 41962
// f := Delete ( f , 1 ) ;
41944: LD_ADDR_VAR 0 12
41948: PUSH
41949: LD_VAR 0 12
41953: PPUSH
41954: LD_INT 1
41956: PPUSH
41957: CALL_OW 3
41961: ST_TO_ADDR
// if not f then
41962: LD_VAR 0 12
41966: NOT
41967: IFFALSE 41985
// begin x := x + 2 ;
41969: LD_ADDR_VAR 0 13
41973: PUSH
41974: LD_VAR 0 13
41978: PUSH
41979: LD_INT 2
41981: PLUS
41982: ST_TO_ADDR
// continue ;
41983: GO 41779
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41985: LD_VAR 0 12
41989: PUSH
41990: LD_INT 1
41992: ARRAY
41993: PPUSH
41994: CALL_OW 266
41998: PUSH
41999: LD_INT 5
42001: EQUAL
42002: IFFALSE 42076
// begin if UnitsInside ( f [ 1 ] ) < 3 then
42004: LD_VAR 0 12
42008: PUSH
42009: LD_INT 1
42011: ARRAY
42012: PPUSH
42013: CALL_OW 313
42017: PUSH
42018: LD_INT 3
42020: LESS
42021: IFFALSE 42057
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42023: LD_INT 0
42025: PPUSH
42026: LD_INT 5
42028: PUSH
42029: LD_INT 8
42031: PUSH
42032: LD_INT 9
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: LIST
42039: PUSH
42040: LD_VAR 0 17
42044: ARRAY
42045: PPUSH
42046: LD_VAR 0 4
42050: PPUSH
42051: CALL_OW 380
42055: GO 42074
// PrepareHuman ( false , i , skill ) ;
42057: LD_INT 0
42059: PPUSH
42060: LD_VAR 0 8
42064: PPUSH
42065: LD_VAR 0 4
42069: PPUSH
42070: CALL_OW 380
// end else
42074: GO 42093
// PrepareHuman ( false , i , skill ) ;
42076: LD_INT 0
42078: PPUSH
42079: LD_VAR 0 8
42083: PPUSH
42084: LD_VAR 0 4
42088: PPUSH
42089: CALL_OW 380
// un := CreateHuman ;
42093: LD_ADDR_VAR 0 14
42097: PUSH
42098: CALL_OW 44
42102: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42103: LD_ADDR_VAR 0 7
42107: PUSH
42108: LD_VAR 0 7
42112: PPUSH
42113: LD_INT 1
42115: PPUSH
42116: LD_VAR 0 14
42120: PPUSH
42121: CALL_OW 2
42125: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42126: LD_VAR 0 14
42130: PPUSH
42131: LD_VAR 0 12
42135: PUSH
42136: LD_INT 1
42138: ARRAY
42139: PPUSH
42140: CALL_OW 52
// end ;
42144: GO 41779
42146: POP
42147: POP
// end ;
42148: GO 41079
42150: POP
42151: POP
// result := result ^ buildings ;
42152: LD_ADDR_VAR 0 7
42156: PUSH
42157: LD_VAR 0 7
42161: PUSH
42162: LD_VAR 0 18
42166: ADD
42167: ST_TO_ADDR
// end else
42168: GO 42311
// begin for i = 1 to personel do
42170: LD_ADDR_VAR 0 8
42174: PUSH
42175: DOUBLE
42176: LD_INT 1
42178: DEC
42179: ST_TO_ADDR
42180: LD_VAR 0 6
42184: PUSH
42185: FOR_TO
42186: IFFALSE 42309
// begin if i > 4 then
42188: LD_VAR 0 8
42192: PUSH
42193: LD_INT 4
42195: GREATER
42196: IFFALSE 42200
// break ;
42198: GO 42309
// x := personel [ i ] ;
42200: LD_ADDR_VAR 0 13
42204: PUSH
42205: LD_VAR 0 6
42209: PUSH
42210: LD_VAR 0 8
42214: ARRAY
42215: ST_TO_ADDR
// if x = - 1 then
42216: LD_VAR 0 13
42220: PUSH
42221: LD_INT 1
42223: NEG
42224: EQUAL
42225: IFFALSE 42229
// continue ;
42227: GO 42185
// PrepareHuman ( false , i , skill ) ;
42229: LD_INT 0
42231: PPUSH
42232: LD_VAR 0 8
42236: PPUSH
42237: LD_VAR 0 4
42241: PPUSH
42242: CALL_OW 380
// un := CreateHuman ;
42246: LD_ADDR_VAR 0 14
42250: PUSH
42251: CALL_OW 44
42255: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42256: LD_VAR 0 14
42260: PPUSH
42261: LD_VAR 0 1
42265: PPUSH
42266: CALL_OW 250
42270: PPUSH
42271: LD_VAR 0 1
42275: PPUSH
42276: CALL_OW 251
42280: PPUSH
42281: LD_INT 10
42283: PPUSH
42284: LD_INT 0
42286: PPUSH
42287: CALL_OW 50
// result := result ^ un ;
42291: LD_ADDR_VAR 0 7
42295: PUSH
42296: LD_VAR 0 7
42300: PUSH
42301: LD_VAR 0 14
42305: ADD
42306: ST_TO_ADDR
// end ;
42307: GO 42185
42309: POP
42310: POP
// end ; end ;
42311: LD_VAR 0 7
42315: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42316: LD_INT 0
42318: PPUSH
42319: PPUSH
42320: PPUSH
42321: PPUSH
42322: PPUSH
42323: PPUSH
42324: PPUSH
42325: PPUSH
42326: PPUSH
42327: PPUSH
42328: PPUSH
42329: PPUSH
42330: PPUSH
42331: PPUSH
42332: PPUSH
42333: PPUSH
// result := false ;
42334: LD_ADDR_VAR 0 3
42338: PUSH
42339: LD_INT 0
42341: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42342: LD_VAR 0 1
42346: NOT
42347: IFTRUE 42372
42349: PUSH
42350: LD_VAR 0 1
42354: PPUSH
42355: CALL_OW 266
42359: PUSH
42360: LD_INT 32
42362: PUSH
42363: LD_INT 33
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: IN
42370: NOT
42371: OR
42372: IFFALSE 42376
// exit ;
42374: GO 43511
// nat := GetNation ( tower ) ;
42376: LD_ADDR_VAR 0 12
42380: PUSH
42381: LD_VAR 0 1
42385: PPUSH
42386: CALL_OW 248
42390: ST_TO_ADDR
// side := GetSide ( tower ) ;
42391: LD_ADDR_VAR 0 16
42395: PUSH
42396: LD_VAR 0 1
42400: PPUSH
42401: CALL_OW 255
42405: ST_TO_ADDR
// x := GetX ( tower ) ;
42406: LD_ADDR_VAR 0 10
42410: PUSH
42411: LD_VAR 0 1
42415: PPUSH
42416: CALL_OW 250
42420: ST_TO_ADDR
// y := GetY ( tower ) ;
42421: LD_ADDR_VAR 0 11
42425: PUSH
42426: LD_VAR 0 1
42430: PPUSH
42431: CALL_OW 251
42435: ST_TO_ADDR
// if not x or not y then
42436: LD_VAR 0 10
42440: NOT
42441: IFTRUE 42450
42443: PUSH
42444: LD_VAR 0 11
42448: NOT
42449: OR
42450: IFFALSE 42454
// exit ;
42452: GO 43511
// weapon := 0 ;
42454: LD_ADDR_VAR 0 18
42458: PUSH
42459: LD_INT 0
42461: ST_TO_ADDR
// fac_list := [ ] ;
42462: LD_ADDR_VAR 0 17
42466: PUSH
42467: EMPTY
42468: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42469: LD_ADDR_VAR 0 6
42473: PUSH
42474: LD_VAR 0 1
42478: PPUSH
42479: CALL_OW 274
42483: PPUSH
42484: LD_VAR 0 2
42488: PPUSH
42489: LD_INT 0
42491: PPUSH
42492: CALL 40046 0 3
42496: PPUSH
42497: LD_INT 30
42499: PUSH
42500: LD_INT 3
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PPUSH
42507: CALL_OW 72
42511: ST_TO_ADDR
// if not factories then
42512: LD_VAR 0 6
42516: NOT
42517: IFFALSE 42521
// exit ;
42519: GO 43511
// for i in factories do
42521: LD_ADDR_VAR 0 8
42525: PUSH
42526: LD_VAR 0 6
42530: PUSH
42531: FOR_IN
42532: IFFALSE 42557
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42534: LD_ADDR_VAR 0 17
42538: PUSH
42539: LD_VAR 0 17
42543: PUSH
42544: LD_VAR 0 8
42548: PPUSH
42549: CALL_OW 478
42553: UNION
42554: ST_TO_ADDR
42555: GO 42531
42557: POP
42558: POP
// if not fac_list then
42559: LD_VAR 0 17
42563: NOT
42564: IFFALSE 42568
// exit ;
42566: GO 43511
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42568: LD_ADDR_VAR 0 5
42572: PUSH
42573: LD_INT 4
42575: PUSH
42576: LD_INT 5
42578: PUSH
42579: LD_INT 9
42581: PUSH
42582: LD_INT 10
42584: PUSH
42585: LD_INT 6
42587: PUSH
42588: LD_INT 7
42590: PUSH
42591: LD_INT 11
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 27
42605: PUSH
42606: LD_INT 28
42608: PUSH
42609: LD_INT 26
42611: PUSH
42612: LD_INT 30
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 43
42623: PUSH
42624: LD_INT 44
42626: PUSH
42627: LD_INT 46
42629: PUSH
42630: LD_INT 45
42632: PUSH
42633: LD_INT 47
42635: PUSH
42636: LD_INT 49
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: LIST
42651: PUSH
42652: LD_VAR 0 12
42656: ARRAY
42657: ST_TO_ADDR
// list := list isect fac_list ;
42658: LD_ADDR_VAR 0 5
42662: PUSH
42663: LD_VAR 0 5
42667: PUSH
42668: LD_VAR 0 17
42672: ISECT
42673: ST_TO_ADDR
// if not list then
42674: LD_VAR 0 5
42678: NOT
42679: IFFALSE 42683
// exit ;
42681: GO 43511
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42683: LD_VAR 0 12
42687: PUSH
42688: LD_INT 3
42690: EQUAL
42691: IFFALSE 42703
42693: PUSH
42694: LD_INT 49
42696: PUSH
42697: LD_VAR 0 5
42701: IN
42702: AND
42703: IFFALSE 42723
42705: PUSH
42706: LD_INT 31
42708: PPUSH
42709: LD_VAR 0 16
42713: PPUSH
42714: CALL_OW 321
42718: PUSH
42719: LD_INT 2
42721: EQUAL
42722: AND
42723: IFFALSE 42783
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42725: LD_INT 22
42727: PUSH
42728: LD_VAR 0 16
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 35
42739: PUSH
42740: LD_INT 49
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 91
42749: PUSH
42750: LD_VAR 0 1
42754: PUSH
42755: LD_INT 10
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: LIST
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: LIST
42767: PPUSH
42768: CALL_OW 69
42772: NOT
42773: IFFALSE 42783
// weapon := ru_time_lapser ;
42775: LD_ADDR_VAR 0 18
42779: PUSH
42780: LD_INT 49
42782: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42783: LD_VAR 0 12
42787: PUSH
42788: LD_INT 1
42790: PUSH
42791: LD_INT 2
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: IN
42798: IFFALSE 42822
42800: PUSH
42801: LD_INT 11
42803: PUSH
42804: LD_VAR 0 5
42808: IN
42809: IFTRUE 42821
42811: PUSH
42812: LD_INT 30
42814: PUSH
42815: LD_VAR 0 5
42819: IN
42820: OR
42821: AND
42822: IFFALSE 42842
42824: PUSH
42825: LD_INT 6
42827: PPUSH
42828: LD_VAR 0 16
42832: PPUSH
42833: CALL_OW 321
42837: PUSH
42838: LD_INT 2
42840: EQUAL
42841: AND
42842: IFFALSE 43009
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42844: LD_INT 22
42846: PUSH
42847: LD_VAR 0 16
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 2
42858: PUSH
42859: LD_INT 35
42861: PUSH
42862: LD_INT 11
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 35
42871: PUSH
42872: LD_INT 30
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 91
42886: PUSH
42887: LD_VAR 0 1
42891: PUSH
42892: LD_INT 18
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: LIST
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: LIST
42904: PPUSH
42905: CALL_OW 69
42909: NOT
42910: IFFALSE 42986
42912: PUSH
42913: LD_INT 22
42915: PUSH
42916: LD_VAR 0 16
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 2
42927: PUSH
42928: LD_INT 30
42930: PUSH
42931: LD_INT 32
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 30
42940: PUSH
42941: LD_INT 33
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 91
42955: PUSH
42956: LD_VAR 0 1
42960: PUSH
42961: LD_INT 12
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: LIST
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: LIST
42973: PUSH
42974: EMPTY
42975: LIST
42976: PPUSH
42977: CALL_OW 69
42981: PUSH
42982: LD_INT 2
42984: GREATER
42985: AND
42986: IFFALSE 43009
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42988: LD_ADDR_VAR 0 18
42992: PUSH
42993: LD_INT 11
42995: PUSH
42996: LD_INT 30
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_VAR 0 12
43007: ARRAY
43008: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
43009: LD_VAR 0 18
43013: NOT
43014: IFFALSE 43034
43016: PUSH
43017: LD_INT 40
43019: PPUSH
43020: LD_VAR 0 16
43024: PPUSH
43025: CALL_OW 321
43029: PUSH
43030: LD_INT 2
43032: EQUAL
43033: AND
43034: IFFALSE 43070
43036: PUSH
43037: LD_INT 7
43039: PUSH
43040: LD_VAR 0 5
43044: IN
43045: IFTRUE 43057
43047: PUSH
43048: LD_INT 28
43050: PUSH
43051: LD_VAR 0 5
43055: IN
43056: OR
43057: IFTRUE 43069
43059: PUSH
43060: LD_INT 45
43062: PUSH
43063: LD_VAR 0 5
43067: IN
43068: OR
43069: AND
43070: IFFALSE 43324
// begin hex := GetHexInfo ( x , y ) ;
43072: LD_ADDR_VAR 0 4
43076: PUSH
43077: LD_VAR 0 10
43081: PPUSH
43082: LD_VAR 0 11
43086: PPUSH
43087: CALL_OW 546
43091: ST_TO_ADDR
// if hex [ 1 ] then
43092: LD_VAR 0 4
43096: PUSH
43097: LD_INT 1
43099: ARRAY
43100: IFFALSE 43104
// exit ;
43102: GO 43511
// height := hex [ 2 ] ;
43104: LD_ADDR_VAR 0 15
43108: PUSH
43109: LD_VAR 0 4
43113: PUSH
43114: LD_INT 2
43116: ARRAY
43117: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43118: LD_ADDR_VAR 0 14
43122: PUSH
43123: LD_INT 0
43125: PUSH
43126: LD_INT 2
43128: PUSH
43129: LD_INT 3
43131: PUSH
43132: LD_INT 5
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: ST_TO_ADDR
// for i in tmp do
43141: LD_ADDR_VAR 0 8
43145: PUSH
43146: LD_VAR 0 14
43150: PUSH
43151: FOR_IN
43152: IFFALSE 43322
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43154: LD_ADDR_VAR 0 9
43158: PUSH
43159: LD_VAR 0 10
43163: PPUSH
43164: LD_VAR 0 8
43168: PPUSH
43169: LD_INT 5
43171: PPUSH
43172: CALL_OW 272
43176: PUSH
43177: LD_VAR 0 11
43181: PPUSH
43182: LD_VAR 0 8
43186: PPUSH
43187: LD_INT 5
43189: PPUSH
43190: CALL_OW 273
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43199: LD_VAR 0 9
43203: PUSH
43204: LD_INT 1
43206: ARRAY
43207: PPUSH
43208: LD_VAR 0 9
43212: PUSH
43213: LD_INT 2
43215: ARRAY
43216: PPUSH
43217: CALL_OW 488
43221: IFFALSE 43320
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43223: LD_ADDR_VAR 0 4
43227: PUSH
43228: LD_VAR 0 9
43232: PUSH
43233: LD_INT 1
43235: ARRAY
43236: PPUSH
43237: LD_VAR 0 9
43241: PUSH
43242: LD_INT 2
43244: ARRAY
43245: PPUSH
43246: CALL_OW 546
43250: ST_TO_ADDR
// if hex [ 1 ] then
43251: LD_VAR 0 4
43255: PUSH
43256: LD_INT 1
43258: ARRAY
43259: IFFALSE 43263
// continue ;
43261: GO 43151
// h := hex [ 2 ] ;
43263: LD_ADDR_VAR 0 13
43267: PUSH
43268: LD_VAR 0 4
43272: PUSH
43273: LD_INT 2
43275: ARRAY
43276: ST_TO_ADDR
// if h + 7 < height then
43277: LD_VAR 0 13
43281: PUSH
43282: LD_INT 7
43284: PLUS
43285: PUSH
43286: LD_VAR 0 15
43290: LESS
43291: IFFALSE 43320
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43293: LD_ADDR_VAR 0 18
43297: PUSH
43298: LD_INT 7
43300: PUSH
43301: LD_INT 28
43303: PUSH
43304: LD_INT 45
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: LIST
43311: PUSH
43312: LD_VAR 0 12
43316: ARRAY
43317: ST_TO_ADDR
// break ;
43318: GO 43322
// end ; end ; end ;
43320: GO 43151
43322: POP
43323: POP
// end ; if not weapon then
43324: LD_VAR 0 18
43328: NOT
43329: IFFALSE 43389
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43331: LD_ADDR_VAR 0 5
43335: PUSH
43336: LD_VAR 0 5
43340: PUSH
43341: LD_INT 11
43343: PUSH
43344: LD_INT 30
43346: PUSH
43347: LD_INT 49
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: LIST
43354: DIFF
43355: ST_TO_ADDR
// if not list then
43356: LD_VAR 0 5
43360: NOT
43361: IFFALSE 43365
// exit ;
43363: GO 43511
// weapon := list [ rand ( 1 , list ) ] ;
43365: LD_ADDR_VAR 0 18
43369: PUSH
43370: LD_VAR 0 5
43374: PUSH
43375: LD_INT 1
43377: PPUSH
43378: LD_VAR 0 5
43382: PPUSH
43383: CALL_OW 12
43387: ARRAY
43388: ST_TO_ADDR
// end ; if weapon then
43389: LD_VAR 0 18
43393: IFFALSE 43511
// begin tmp := CostOfWeapon ( weapon ) ;
43395: LD_ADDR_VAR 0 14
43399: PUSH
43400: LD_VAR 0 18
43404: PPUSH
43405: CALL_OW 451
43409: ST_TO_ADDR
// j := GetBase ( tower ) ;
43410: LD_ADDR_VAR 0 9
43414: PUSH
43415: LD_VAR 0 1
43419: PPUSH
43420: CALL_OW 274
43424: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43425: LD_VAR 0 9
43429: PPUSH
43430: LD_INT 1
43432: PPUSH
43433: CALL_OW 275
43437: PUSH
43438: LD_VAR 0 14
43442: PUSH
43443: LD_INT 1
43445: ARRAY
43446: GREATEREQUAL
43447: IFFALSE 43473
43449: PUSH
43450: LD_VAR 0 9
43454: PPUSH
43455: LD_INT 2
43457: PPUSH
43458: CALL_OW 275
43462: PUSH
43463: LD_VAR 0 14
43467: PUSH
43468: LD_INT 2
43470: ARRAY
43471: GREATEREQUAL
43472: AND
43473: IFFALSE 43499
43475: PUSH
43476: LD_VAR 0 9
43480: PPUSH
43481: LD_INT 3
43483: PPUSH
43484: CALL_OW 275
43488: PUSH
43489: LD_VAR 0 14
43493: PUSH
43494: LD_INT 3
43496: ARRAY
43497: GREATEREQUAL
43498: AND
43499: IFFALSE 43511
// result := weapon ;
43501: LD_ADDR_VAR 0 3
43505: PUSH
43506: LD_VAR 0 18
43510: ST_TO_ADDR
// end ; end ;
43511: LD_VAR 0 3
43515: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43516: LD_INT 0
43518: PPUSH
43519: PPUSH
// result := true ;
43520: LD_ADDR_VAR 0 3
43524: PUSH
43525: LD_INT 1
43527: ST_TO_ADDR
// if array1 = array2 then
43528: LD_VAR 0 1
43532: PUSH
43533: LD_VAR 0 2
43537: EQUAL
43538: IFFALSE 43598
// begin for i = 1 to array1 do
43540: LD_ADDR_VAR 0 4
43544: PUSH
43545: DOUBLE
43546: LD_INT 1
43548: DEC
43549: ST_TO_ADDR
43550: LD_VAR 0 1
43554: PUSH
43555: FOR_TO
43556: IFFALSE 43594
// if array1 [ i ] <> array2 [ i ] then
43558: LD_VAR 0 1
43562: PUSH
43563: LD_VAR 0 4
43567: ARRAY
43568: PUSH
43569: LD_VAR 0 2
43573: PUSH
43574: LD_VAR 0 4
43578: ARRAY
43579: NONEQUAL
43580: IFFALSE 43592
// begin result := false ;
43582: LD_ADDR_VAR 0 3
43586: PUSH
43587: LD_INT 0
43589: ST_TO_ADDR
// break ;
43590: GO 43594
// end ;
43592: GO 43555
43594: POP
43595: POP
// end else
43596: GO 43606
// result := false ;
43598: LD_ADDR_VAR 0 3
43602: PUSH
43603: LD_INT 0
43605: ST_TO_ADDR
// end ;
43606: LD_VAR 0 3
43610: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43611: LD_INT 0
43613: PPUSH
43614: PPUSH
// if not array1 or not array2 then
43615: LD_VAR 0 1
43619: NOT
43620: IFTRUE 43629
43622: PUSH
43623: LD_VAR 0 2
43627: NOT
43628: OR
43629: IFFALSE 43633
// exit ;
43631: GO 43697
// result := true ;
43633: LD_ADDR_VAR 0 3
43637: PUSH
43638: LD_INT 1
43640: ST_TO_ADDR
// for i = 1 to array1 do
43641: LD_ADDR_VAR 0 4
43645: PUSH
43646: DOUBLE
43647: LD_INT 1
43649: DEC
43650: ST_TO_ADDR
43651: LD_VAR 0 1
43655: PUSH
43656: FOR_TO
43657: IFFALSE 43695
// if array1 [ i ] <> array2 [ i ] then
43659: LD_VAR 0 1
43663: PUSH
43664: LD_VAR 0 4
43668: ARRAY
43669: PUSH
43670: LD_VAR 0 2
43674: PUSH
43675: LD_VAR 0 4
43679: ARRAY
43680: NONEQUAL
43681: IFFALSE 43693
// begin result := false ;
43683: LD_ADDR_VAR 0 3
43687: PUSH
43688: LD_INT 0
43690: ST_TO_ADDR
// break ;
43691: GO 43695
// end ;
43693: GO 43656
43695: POP
43696: POP
// end ;
43697: LD_VAR 0 3
43701: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43702: LD_INT 0
43704: PPUSH
43705: PPUSH
43706: PPUSH
// pom := GetBase ( fac ) ;
43707: LD_ADDR_VAR 0 5
43711: PUSH
43712: LD_VAR 0 1
43716: PPUSH
43717: CALL_OW 274
43721: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43722: LD_ADDR_VAR 0 4
43726: PUSH
43727: LD_VAR 0 2
43731: PUSH
43732: LD_INT 1
43734: ARRAY
43735: PPUSH
43736: LD_VAR 0 2
43740: PUSH
43741: LD_INT 2
43743: ARRAY
43744: PPUSH
43745: LD_VAR 0 2
43749: PUSH
43750: LD_INT 3
43752: ARRAY
43753: PPUSH
43754: LD_VAR 0 2
43758: PUSH
43759: LD_INT 4
43761: ARRAY
43762: PPUSH
43763: CALL_OW 449
43767: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43768: LD_ADDR_VAR 0 3
43772: PUSH
43773: LD_VAR 0 5
43777: PPUSH
43778: LD_INT 1
43780: PPUSH
43781: CALL_OW 275
43785: PUSH
43786: LD_VAR 0 4
43790: PUSH
43791: LD_INT 1
43793: ARRAY
43794: GREATEREQUAL
43795: IFFALSE 43821
43797: PUSH
43798: LD_VAR 0 5
43802: PPUSH
43803: LD_INT 2
43805: PPUSH
43806: CALL_OW 275
43810: PUSH
43811: LD_VAR 0 4
43815: PUSH
43816: LD_INT 2
43818: ARRAY
43819: GREATEREQUAL
43820: AND
43821: IFFALSE 43847
43823: PUSH
43824: LD_VAR 0 5
43828: PPUSH
43829: LD_INT 3
43831: PPUSH
43832: CALL_OW 275
43836: PUSH
43837: LD_VAR 0 4
43841: PUSH
43842: LD_INT 3
43844: ARRAY
43845: GREATEREQUAL
43846: AND
43847: ST_TO_ADDR
// end ;
43848: LD_VAR 0 3
43852: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43853: LD_INT 0
43855: PPUSH
43856: PPUSH
43857: PPUSH
43858: PPUSH
// pom := GetBase ( building ) ;
43859: LD_ADDR_VAR 0 3
43863: PUSH
43864: LD_VAR 0 1
43868: PPUSH
43869: CALL_OW 274
43873: ST_TO_ADDR
// if not pom then
43874: LD_VAR 0 3
43878: NOT
43879: IFFALSE 43883
// exit ;
43881: GO 44057
// btype := GetBType ( building ) ;
43883: LD_ADDR_VAR 0 5
43887: PUSH
43888: LD_VAR 0 1
43892: PPUSH
43893: CALL_OW 266
43897: ST_TO_ADDR
// if btype = b_armoury then
43898: LD_VAR 0 5
43902: PUSH
43903: LD_INT 4
43905: EQUAL
43906: IFFALSE 43916
// btype := b_barracks ;
43908: LD_ADDR_VAR 0 5
43912: PUSH
43913: LD_INT 5
43915: ST_TO_ADDR
// if btype = b_depot then
43916: LD_VAR 0 5
43920: PUSH
43921: LD_INT 0
43923: EQUAL
43924: IFFALSE 43934
// btype := b_warehouse ;
43926: LD_ADDR_VAR 0 5
43930: PUSH
43931: LD_INT 1
43933: ST_TO_ADDR
// if btype = b_workshop then
43934: LD_VAR 0 5
43938: PUSH
43939: LD_INT 2
43941: EQUAL
43942: IFFALSE 43952
// btype := b_factory ;
43944: LD_ADDR_VAR 0 5
43948: PUSH
43949: LD_INT 3
43951: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43952: LD_ADDR_VAR 0 4
43956: PUSH
43957: LD_VAR 0 5
43961: PPUSH
43962: LD_VAR 0 1
43966: PPUSH
43967: CALL_OW 248
43971: PPUSH
43972: CALL_OW 450
43976: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43977: LD_ADDR_VAR 0 2
43981: PUSH
43982: LD_VAR 0 3
43986: PPUSH
43987: LD_INT 1
43989: PPUSH
43990: CALL_OW 275
43994: PUSH
43995: LD_VAR 0 4
43999: PUSH
44000: LD_INT 1
44002: ARRAY
44003: GREATEREQUAL
44004: IFFALSE 44030
44006: PUSH
44007: LD_VAR 0 3
44011: PPUSH
44012: LD_INT 2
44014: PPUSH
44015: CALL_OW 275
44019: PUSH
44020: LD_VAR 0 4
44024: PUSH
44025: LD_INT 2
44027: ARRAY
44028: GREATEREQUAL
44029: AND
44030: IFFALSE 44056
44032: PUSH
44033: LD_VAR 0 3
44037: PPUSH
44038: LD_INT 3
44040: PPUSH
44041: CALL_OW 275
44045: PUSH
44046: LD_VAR 0 4
44050: PUSH
44051: LD_INT 3
44053: ARRAY
44054: GREATEREQUAL
44055: AND
44056: ST_TO_ADDR
// end ;
44057: LD_VAR 0 2
44061: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44062: LD_INT 0
44064: PPUSH
44065: PPUSH
44066: PPUSH
// pom := GetBase ( building ) ;
44067: LD_ADDR_VAR 0 4
44071: PUSH
44072: LD_VAR 0 1
44076: PPUSH
44077: CALL_OW 274
44081: ST_TO_ADDR
// if not pom then
44082: LD_VAR 0 4
44086: NOT
44087: IFFALSE 44091
// exit ;
44089: GO 44196
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44091: LD_ADDR_VAR 0 5
44095: PUSH
44096: LD_VAR 0 2
44100: PPUSH
44101: LD_VAR 0 1
44105: PPUSH
44106: CALL_OW 248
44110: PPUSH
44111: CALL_OW 450
44115: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44116: LD_ADDR_VAR 0 3
44120: PUSH
44121: LD_VAR 0 4
44125: PPUSH
44126: LD_INT 1
44128: PPUSH
44129: CALL_OW 275
44133: PUSH
44134: LD_VAR 0 5
44138: PUSH
44139: LD_INT 1
44141: ARRAY
44142: GREATEREQUAL
44143: IFFALSE 44169
44145: PUSH
44146: LD_VAR 0 4
44150: PPUSH
44151: LD_INT 2
44153: PPUSH
44154: CALL_OW 275
44158: PUSH
44159: LD_VAR 0 5
44163: PUSH
44164: LD_INT 2
44166: ARRAY
44167: GREATEREQUAL
44168: AND
44169: IFFALSE 44195
44171: PUSH
44172: LD_VAR 0 4
44176: PPUSH
44177: LD_INT 3
44179: PPUSH
44180: CALL_OW 275
44184: PUSH
44185: LD_VAR 0 5
44189: PUSH
44190: LD_INT 3
44192: ARRAY
44193: GREATEREQUAL
44194: AND
44195: ST_TO_ADDR
// end ;
44196: LD_VAR 0 3
44200: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44201: LD_INT 0
44203: PPUSH
44204: PPUSH
44205: PPUSH
44206: PPUSH
44207: PPUSH
44208: PPUSH
44209: PPUSH
44210: PPUSH
44211: PPUSH
44212: PPUSH
44213: PPUSH
// result := false ;
44214: LD_ADDR_VAR 0 8
44218: PUSH
44219: LD_INT 0
44221: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44222: LD_VAR 0 5
44226: NOT
44227: IFTRUE 44236
44229: PUSH
44230: LD_VAR 0 1
44234: NOT
44235: OR
44236: IFTRUE 44245
44238: PUSH
44239: LD_VAR 0 2
44243: NOT
44244: OR
44245: IFTRUE 44254
44247: PUSH
44248: LD_VAR 0 3
44252: NOT
44253: OR
44254: IFFALSE 44258
// exit ;
44256: GO 45084
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44258: LD_ADDR_VAR 0 14
44262: PUSH
44263: LD_VAR 0 1
44267: PPUSH
44268: LD_VAR 0 2
44272: PPUSH
44273: LD_VAR 0 3
44277: PPUSH
44278: LD_VAR 0 4
44282: PPUSH
44283: LD_VAR 0 5
44287: PUSH
44288: LD_INT 1
44290: ARRAY
44291: PPUSH
44292: CALL_OW 248
44296: PPUSH
44297: LD_INT 0
44299: PPUSH
44300: CALL 46365 0 6
44304: ST_TO_ADDR
// if not hexes then
44305: LD_VAR 0 14
44309: NOT
44310: IFFALSE 44314
// exit ;
44312: GO 45084
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44314: LD_ADDR_VAR 0 17
44318: PUSH
44319: LD_VAR 0 5
44323: PPUSH
44324: LD_INT 22
44326: PUSH
44327: LD_VAR 0 13
44331: PPUSH
44332: CALL_OW 255
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 2
44343: PUSH
44344: LD_INT 30
44346: PUSH
44347: LD_INT 0
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 30
44356: PUSH
44357: LD_INT 1
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: LIST
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PPUSH
44373: CALL_OW 72
44377: ST_TO_ADDR
// for i = 1 to hexes do
44378: LD_ADDR_VAR 0 9
44382: PUSH
44383: DOUBLE
44384: LD_INT 1
44386: DEC
44387: ST_TO_ADDR
44388: LD_VAR 0 14
44392: PUSH
44393: FOR_TO
44394: IFFALSE 45082
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44396: LD_ADDR_VAR 0 13
44400: PUSH
44401: LD_VAR 0 14
44405: PUSH
44406: LD_VAR 0 9
44410: ARRAY
44411: PUSH
44412: LD_INT 1
44414: ARRAY
44415: PPUSH
44416: LD_VAR 0 14
44420: PUSH
44421: LD_VAR 0 9
44425: ARRAY
44426: PUSH
44427: LD_INT 2
44429: ARRAY
44430: PPUSH
44431: CALL_OW 428
44435: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44436: LD_VAR 0 14
44440: PUSH
44441: LD_VAR 0 9
44445: ARRAY
44446: PUSH
44447: LD_INT 1
44449: ARRAY
44450: PPUSH
44451: LD_VAR 0 14
44455: PUSH
44456: LD_VAR 0 9
44460: ARRAY
44461: PUSH
44462: LD_INT 2
44464: ARRAY
44465: PPUSH
44466: CALL_OW 351
44470: IFTRUE 44509
44472: PUSH
44473: LD_VAR 0 14
44477: PUSH
44478: LD_VAR 0 9
44482: ARRAY
44483: PUSH
44484: LD_INT 1
44486: ARRAY
44487: PPUSH
44488: LD_VAR 0 14
44492: PUSH
44493: LD_VAR 0 9
44497: ARRAY
44498: PUSH
44499: LD_INT 2
44501: ARRAY
44502: PPUSH
44503: CALL_OW 488
44507: NOT
44508: OR
44509: IFTRUE 44526
44511: PUSH
44512: LD_VAR 0 13
44516: PPUSH
44517: CALL_OW 247
44521: PUSH
44522: LD_INT 3
44524: EQUAL
44525: OR
44526: IFFALSE 44532
// exit ;
44528: POP
44529: POP
44530: GO 45084
// if not tmp then
44532: LD_VAR 0 13
44536: NOT
44537: IFFALSE 44541
// continue ;
44539: GO 44393
// result := true ;
44541: LD_ADDR_VAR 0 8
44545: PUSH
44546: LD_INT 1
44548: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44549: LD_VAR 0 6
44553: IFFALSE 44570
44555: PUSH
44556: LD_VAR 0 13
44560: PPUSH
44561: CALL_OW 247
44565: PUSH
44566: LD_INT 2
44568: EQUAL
44569: AND
44570: IFFALSE 44587
44572: PUSH
44573: LD_VAR 0 13
44577: PPUSH
44578: CALL_OW 263
44582: PUSH
44583: LD_INT 1
44585: EQUAL
44586: AND
44587: IFFALSE 44751
// begin if IsDrivenBy ( tmp ) then
44589: LD_VAR 0 13
44593: PPUSH
44594: CALL_OW 311
44598: IFFALSE 44602
// continue ;
44600: GO 44393
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44602: LD_VAR 0 6
44606: PPUSH
44607: LD_INT 3
44609: PUSH
44610: LD_INT 60
44612: PUSH
44613: EMPTY
44614: LIST
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 3
44622: PUSH
44623: LD_INT 55
44625: PUSH
44626: EMPTY
44627: LIST
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PPUSH
44637: CALL_OW 72
44641: IFFALSE 44749
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44643: LD_ADDR_VAR 0 18
44647: PUSH
44648: LD_VAR 0 6
44652: PPUSH
44653: LD_INT 3
44655: PUSH
44656: LD_INT 60
44658: PUSH
44659: EMPTY
44660: LIST
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 3
44668: PUSH
44669: LD_INT 55
44671: PUSH
44672: EMPTY
44673: LIST
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PPUSH
44683: CALL_OW 72
44687: PUSH
44688: LD_INT 1
44690: ARRAY
44691: ST_TO_ADDR
// if IsInUnit ( driver ) then
44692: LD_VAR 0 18
44696: PPUSH
44697: CALL_OW 310
44701: IFFALSE 44712
// ComExit ( driver ) ;
44703: LD_VAR 0 18
44707: PPUSH
44708: CALL 70355 0 1
// AddComEnterUnit ( driver , tmp ) ;
44712: LD_VAR 0 18
44716: PPUSH
44717: LD_VAR 0 13
44721: PPUSH
44722: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44726: LD_VAR 0 18
44730: PPUSH
44731: LD_VAR 0 7
44735: PPUSH
44736: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44740: LD_VAR 0 18
44744: PPUSH
44745: CALL_OW 181
// end ; continue ;
44749: GO 44393
// end ; if not cleaners or not tmp in cleaners then
44751: LD_VAR 0 6
44755: NOT
44756: IFTRUE 44771
44758: PUSH
44759: LD_VAR 0 13
44763: PUSH
44764: LD_VAR 0 6
44768: IN
44769: NOT
44770: OR
44771: IFFALSE 45080
// begin if dep then
44773: LD_VAR 0 17
44777: IFFALSE 44913
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44779: LD_ADDR_VAR 0 16
44783: PUSH
44784: LD_VAR 0 17
44788: PUSH
44789: LD_INT 1
44791: ARRAY
44792: PPUSH
44793: CALL_OW 250
44797: PPUSH
44798: LD_VAR 0 17
44802: PUSH
44803: LD_INT 1
44805: ARRAY
44806: PPUSH
44807: CALL_OW 254
44811: PPUSH
44812: LD_INT 5
44814: PPUSH
44815: CALL_OW 272
44819: PUSH
44820: LD_VAR 0 17
44824: PUSH
44825: LD_INT 1
44827: ARRAY
44828: PPUSH
44829: CALL_OW 251
44833: PPUSH
44834: LD_VAR 0 17
44838: PUSH
44839: LD_INT 1
44841: ARRAY
44842: PPUSH
44843: CALL_OW 254
44847: PPUSH
44848: LD_INT 5
44850: PPUSH
44851: CALL_OW 273
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44860: LD_VAR 0 16
44864: PUSH
44865: LD_INT 1
44867: ARRAY
44868: PPUSH
44869: LD_VAR 0 16
44873: PUSH
44874: LD_INT 2
44876: ARRAY
44877: PPUSH
44878: CALL_OW 488
44882: IFFALSE 44913
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44884: LD_VAR 0 13
44888: PPUSH
44889: LD_VAR 0 16
44893: PUSH
44894: LD_INT 1
44896: ARRAY
44897: PPUSH
44898: LD_VAR 0 16
44902: PUSH
44903: LD_INT 2
44905: ARRAY
44906: PPUSH
44907: CALL_OW 111
// continue ;
44911: GO 44393
// end ; end ; r := GetDir ( tmp ) ;
44913: LD_ADDR_VAR 0 15
44917: PUSH
44918: LD_VAR 0 13
44922: PPUSH
44923: CALL_OW 254
44927: ST_TO_ADDR
// if r = 5 then
44928: LD_VAR 0 15
44932: PUSH
44933: LD_INT 5
44935: EQUAL
44936: IFFALSE 44946
// r := 0 ;
44938: LD_ADDR_VAR 0 15
44942: PUSH
44943: LD_INT 0
44945: ST_TO_ADDR
// for j = r to 5 do
44946: LD_ADDR_VAR 0 10
44950: PUSH
44951: DOUBLE
44952: LD_VAR 0 15
44956: DEC
44957: ST_TO_ADDR
44958: LD_INT 5
44960: PUSH
44961: FOR_TO
44962: IFFALSE 45078
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44964: LD_ADDR_VAR 0 11
44968: PUSH
44969: LD_VAR 0 13
44973: PPUSH
44974: CALL_OW 250
44978: PPUSH
44979: LD_VAR 0 10
44983: PPUSH
44984: LD_INT 2
44986: PPUSH
44987: CALL_OW 272
44991: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44992: LD_ADDR_VAR 0 12
44996: PUSH
44997: LD_VAR 0 13
45001: PPUSH
45002: CALL_OW 251
45006: PPUSH
45007: LD_VAR 0 10
45011: PPUSH
45012: LD_INT 2
45014: PPUSH
45015: CALL_OW 273
45019: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
45020: LD_VAR 0 11
45024: PPUSH
45025: LD_VAR 0 12
45029: PPUSH
45030: CALL_OW 488
45034: IFFALSE 45053
45036: PUSH
45037: LD_VAR 0 11
45041: PPUSH
45042: LD_VAR 0 12
45046: PPUSH
45047: CALL_OW 428
45051: NOT
45052: AND
45053: IFFALSE 45076
// begin ComMoveXY ( tmp , _x , _y ) ;
45055: LD_VAR 0 13
45059: PPUSH
45060: LD_VAR 0 11
45064: PPUSH
45065: LD_VAR 0 12
45069: PPUSH
45070: CALL_OW 111
// break ;
45074: GO 45078
// end ; end ;
45076: GO 44961
45078: POP
45079: POP
// end ; end ;
45080: GO 44393
45082: POP
45083: POP
// end ;
45084: LD_VAR 0 8
45088: RET
// export function BuildingTechInvented ( side , btype ) ; begin
45089: LD_INT 0
45091: PPUSH
// result := true ;
45092: LD_ADDR_VAR 0 3
45096: PUSH
45097: LD_INT 1
45099: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
45100: LD_VAR 0 2
45104: PUSH
45105: LD_INT 24
45107: DOUBLE
45108: EQUAL
45109: IFTRUE 45119
45111: LD_INT 33
45113: DOUBLE
45114: EQUAL
45115: IFTRUE 45119
45117: GO 45144
45119: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45120: LD_ADDR_VAR 0 3
45124: PUSH
45125: LD_INT 32
45127: PPUSH
45128: LD_VAR 0 1
45132: PPUSH
45133: CALL_OW 321
45137: PUSH
45138: LD_INT 2
45140: EQUAL
45141: ST_TO_ADDR
45142: GO 45460
45144: LD_INT 20
45146: DOUBLE
45147: EQUAL
45148: IFTRUE 45152
45150: GO 45177
45152: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45153: LD_ADDR_VAR 0 3
45157: PUSH
45158: LD_INT 6
45160: PPUSH
45161: LD_VAR 0 1
45165: PPUSH
45166: CALL_OW 321
45170: PUSH
45171: LD_INT 2
45173: EQUAL
45174: ST_TO_ADDR
45175: GO 45460
45177: LD_INT 22
45179: DOUBLE
45180: EQUAL
45181: IFTRUE 45191
45183: LD_INT 36
45185: DOUBLE
45186: EQUAL
45187: IFTRUE 45191
45189: GO 45216
45191: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45192: LD_ADDR_VAR 0 3
45196: PUSH
45197: LD_INT 15
45199: PPUSH
45200: LD_VAR 0 1
45204: PPUSH
45205: CALL_OW 321
45209: PUSH
45210: LD_INT 2
45212: EQUAL
45213: ST_TO_ADDR
45214: GO 45460
45216: LD_INT 30
45218: DOUBLE
45219: EQUAL
45220: IFTRUE 45224
45222: GO 45249
45224: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45225: LD_ADDR_VAR 0 3
45229: PUSH
45230: LD_INT 20
45232: PPUSH
45233: LD_VAR 0 1
45237: PPUSH
45238: CALL_OW 321
45242: PUSH
45243: LD_INT 2
45245: EQUAL
45246: ST_TO_ADDR
45247: GO 45460
45249: LD_INT 28
45251: DOUBLE
45252: EQUAL
45253: IFTRUE 45263
45255: LD_INT 21
45257: DOUBLE
45258: EQUAL
45259: IFTRUE 45263
45261: GO 45288
45263: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45264: LD_ADDR_VAR 0 3
45268: PUSH
45269: LD_INT 21
45271: PPUSH
45272: LD_VAR 0 1
45276: PPUSH
45277: CALL_OW 321
45281: PUSH
45282: LD_INT 2
45284: EQUAL
45285: ST_TO_ADDR
45286: GO 45460
45288: LD_INT 16
45290: DOUBLE
45291: EQUAL
45292: IFTRUE 45296
45294: GO 45321
45296: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45297: LD_ADDR_VAR 0 3
45301: PUSH
45302: LD_INT 84
45304: PPUSH
45305: LD_VAR 0 1
45309: PPUSH
45310: CALL_OW 321
45314: PUSH
45315: LD_INT 2
45317: EQUAL
45318: ST_TO_ADDR
45319: GO 45460
45321: LD_INT 19
45323: DOUBLE
45324: EQUAL
45325: IFTRUE 45335
45327: LD_INT 23
45329: DOUBLE
45330: EQUAL
45331: IFTRUE 45335
45333: GO 45360
45335: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45336: LD_ADDR_VAR 0 3
45340: PUSH
45341: LD_INT 83
45343: PPUSH
45344: LD_VAR 0 1
45348: PPUSH
45349: CALL_OW 321
45353: PUSH
45354: LD_INT 2
45356: EQUAL
45357: ST_TO_ADDR
45358: GO 45460
45360: LD_INT 17
45362: DOUBLE
45363: EQUAL
45364: IFTRUE 45368
45366: GO 45393
45368: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45369: LD_ADDR_VAR 0 3
45373: PUSH
45374: LD_INT 39
45376: PPUSH
45377: LD_VAR 0 1
45381: PPUSH
45382: CALL_OW 321
45386: PUSH
45387: LD_INT 2
45389: EQUAL
45390: ST_TO_ADDR
45391: GO 45460
45393: LD_INT 18
45395: DOUBLE
45396: EQUAL
45397: IFTRUE 45401
45399: GO 45426
45401: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45402: LD_ADDR_VAR 0 3
45406: PUSH
45407: LD_INT 40
45409: PPUSH
45410: LD_VAR 0 1
45414: PPUSH
45415: CALL_OW 321
45419: PUSH
45420: LD_INT 2
45422: EQUAL
45423: ST_TO_ADDR
45424: GO 45460
45426: LD_INT 27
45428: DOUBLE
45429: EQUAL
45430: IFTRUE 45434
45432: GO 45459
45434: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
45435: LD_ADDR_VAR 0 3
45439: PUSH
45440: LD_INT 35
45442: PPUSH
45443: LD_VAR 0 1
45447: PPUSH
45448: CALL_OW 321
45452: PUSH
45453: LD_INT 2
45455: EQUAL
45456: ST_TO_ADDR
45457: GO 45460
45459: POP
// end ;
45460: LD_VAR 0 3
45464: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
45465: LD_INT 0
45467: PPUSH
45468: PPUSH
45469: PPUSH
45470: PPUSH
45471: PPUSH
45472: PPUSH
45473: PPUSH
45474: PPUSH
45475: PPUSH
45476: PPUSH
45477: PPUSH
// result := false ;
45478: LD_ADDR_VAR 0 6
45482: PUSH
45483: LD_INT 0
45485: ST_TO_ADDR
// if btype = b_depot then
45486: LD_VAR 0 2
45490: PUSH
45491: LD_INT 0
45493: EQUAL
45494: IFFALSE 45506
// begin result := true ;
45496: LD_ADDR_VAR 0 6
45500: PUSH
45501: LD_INT 1
45503: ST_TO_ADDR
// exit ;
45504: GO 46360
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45506: LD_VAR 0 1
45510: NOT
45511: IFTRUE 45536
45513: PUSH
45514: LD_VAR 0 1
45518: PPUSH
45519: CALL_OW 266
45523: PUSH
45524: LD_INT 0
45526: PUSH
45527: LD_INT 1
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: IN
45534: NOT
45535: OR
45536: IFTRUE 45545
45538: PUSH
45539: LD_VAR 0 2
45543: NOT
45544: OR
45545: IFTRUE 45581
45547: PUSH
45548: LD_VAR 0 5
45552: PUSH
45553: LD_INT 0
45555: PUSH
45556: LD_INT 1
45558: PUSH
45559: LD_INT 2
45561: PUSH
45562: LD_INT 3
45564: PUSH
45565: LD_INT 4
45567: PUSH
45568: LD_INT 5
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: IN
45579: NOT
45580: OR
45581: IFTRUE 45600
45583: PUSH
45584: LD_VAR 0 3
45588: PPUSH
45589: LD_VAR 0 4
45593: PPUSH
45594: CALL_OW 488
45598: NOT
45599: OR
45600: IFFALSE 45604
// exit ;
45602: GO 46360
// side := GetSide ( depot ) ;
45604: LD_ADDR_VAR 0 9
45608: PUSH
45609: LD_VAR 0 1
45613: PPUSH
45614: CALL_OW 255
45618: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
45619: LD_VAR 0 9
45623: PPUSH
45624: LD_VAR 0 2
45628: PPUSH
45629: CALL 45089 0 2
45633: NOT
45634: IFFALSE 45638
// exit ;
45636: GO 46360
// pom := GetBase ( depot ) ;
45638: LD_ADDR_VAR 0 10
45642: PUSH
45643: LD_VAR 0 1
45647: PPUSH
45648: CALL_OW 274
45652: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45653: LD_ADDR_VAR 0 11
45657: PUSH
45658: LD_VAR 0 2
45662: PPUSH
45663: LD_VAR 0 1
45667: PPUSH
45668: CALL_OW 248
45672: PPUSH
45673: CALL_OW 450
45677: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45678: LD_VAR 0 10
45682: PPUSH
45683: LD_INT 1
45685: PPUSH
45686: CALL_OW 275
45690: PUSH
45691: LD_VAR 0 11
45695: PUSH
45696: LD_INT 1
45698: ARRAY
45699: GREATEREQUAL
45700: IFFALSE 45726
45702: PUSH
45703: LD_VAR 0 10
45707: PPUSH
45708: LD_INT 2
45710: PPUSH
45711: CALL_OW 275
45715: PUSH
45716: LD_VAR 0 11
45720: PUSH
45721: LD_INT 2
45723: ARRAY
45724: GREATEREQUAL
45725: AND
45726: IFFALSE 45752
45728: PUSH
45729: LD_VAR 0 10
45733: PPUSH
45734: LD_INT 3
45736: PPUSH
45737: CALL_OW 275
45741: PUSH
45742: LD_VAR 0 11
45746: PUSH
45747: LD_INT 3
45749: ARRAY
45750: GREATEREQUAL
45751: AND
45752: NOT
45753: IFFALSE 45757
// exit ;
45755: GO 46360
// if GetBType ( depot ) = b_depot then
45757: LD_VAR 0 1
45761: PPUSH
45762: CALL_OW 266
45766: PUSH
45767: LD_INT 0
45769: EQUAL
45770: IFFALSE 45782
// dist := 28 else
45772: LD_ADDR_VAR 0 14
45776: PUSH
45777: LD_INT 28
45779: ST_TO_ADDR
45780: GO 45790
// dist := 36 ;
45782: LD_ADDR_VAR 0 14
45786: PUSH
45787: LD_INT 36
45789: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45790: LD_VAR 0 1
45794: PPUSH
45795: LD_VAR 0 3
45799: PPUSH
45800: LD_VAR 0 4
45804: PPUSH
45805: CALL_OW 297
45809: PUSH
45810: LD_VAR 0 14
45814: GREATER
45815: IFFALSE 45819
// exit ;
45817: GO 46360
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45819: LD_ADDR_VAR 0 12
45823: PUSH
45824: LD_VAR 0 2
45828: PPUSH
45829: LD_VAR 0 3
45833: PPUSH
45834: LD_VAR 0 4
45838: PPUSH
45839: LD_VAR 0 5
45843: PPUSH
45844: LD_VAR 0 1
45848: PPUSH
45849: CALL_OW 248
45853: PPUSH
45854: LD_INT 0
45856: PPUSH
45857: CALL 46365 0 6
45861: ST_TO_ADDR
// if not hexes then
45862: LD_VAR 0 12
45866: NOT
45867: IFFALSE 45871
// exit ;
45869: GO 46360
// hex := GetHexInfo ( x , y ) ;
45871: LD_ADDR_VAR 0 15
45875: PUSH
45876: LD_VAR 0 3
45880: PPUSH
45881: LD_VAR 0 4
45885: PPUSH
45886: CALL_OW 546
45890: ST_TO_ADDR
// if hex [ 1 ] then
45891: LD_VAR 0 15
45895: PUSH
45896: LD_INT 1
45898: ARRAY
45899: IFFALSE 45903
// exit ;
45901: GO 46360
// height := hex [ 2 ] ;
45903: LD_ADDR_VAR 0 13
45907: PUSH
45908: LD_VAR 0 15
45912: PUSH
45913: LD_INT 2
45915: ARRAY
45916: ST_TO_ADDR
// for i = 1 to hexes do
45917: LD_ADDR_VAR 0 7
45921: PUSH
45922: DOUBLE
45923: LD_INT 1
45925: DEC
45926: ST_TO_ADDR
45927: LD_VAR 0 12
45931: PUSH
45932: FOR_TO
45933: IFFALSE 46277
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45935: LD_VAR 0 12
45939: PUSH
45940: LD_VAR 0 7
45944: ARRAY
45945: PUSH
45946: LD_INT 1
45948: ARRAY
45949: PPUSH
45950: LD_VAR 0 12
45954: PUSH
45955: LD_VAR 0 7
45959: ARRAY
45960: PUSH
45961: LD_INT 2
45963: ARRAY
45964: PPUSH
45965: CALL_OW 488
45969: NOT
45970: IFTRUE 46012
45972: PUSH
45973: LD_VAR 0 12
45977: PUSH
45978: LD_VAR 0 7
45982: ARRAY
45983: PUSH
45984: LD_INT 1
45986: ARRAY
45987: PPUSH
45988: LD_VAR 0 12
45992: PUSH
45993: LD_VAR 0 7
45997: ARRAY
45998: PUSH
45999: LD_INT 2
46001: ARRAY
46002: PPUSH
46003: CALL_OW 428
46007: PUSH
46008: LD_INT 0
46010: GREATER
46011: OR
46012: IFTRUE 46050
46014: PUSH
46015: LD_VAR 0 12
46019: PUSH
46020: LD_VAR 0 7
46024: ARRAY
46025: PUSH
46026: LD_INT 1
46028: ARRAY
46029: PPUSH
46030: LD_VAR 0 12
46034: PUSH
46035: LD_VAR 0 7
46039: ARRAY
46040: PUSH
46041: LD_INT 2
46043: ARRAY
46044: PPUSH
46045: CALL_OW 351
46049: OR
46050: IFFALSE 46056
// exit ;
46052: POP
46053: POP
46054: GO 46360
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46056: LD_ADDR_VAR 0 8
46060: PUSH
46061: LD_VAR 0 12
46065: PUSH
46066: LD_VAR 0 7
46070: ARRAY
46071: PUSH
46072: LD_INT 1
46074: ARRAY
46075: PPUSH
46076: LD_VAR 0 12
46080: PUSH
46081: LD_VAR 0 7
46085: ARRAY
46086: PUSH
46087: LD_INT 2
46089: ARRAY
46090: PPUSH
46091: CALL_OW 546
46095: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46096: LD_VAR 0 8
46100: PUSH
46101: LD_INT 1
46103: ARRAY
46104: IFTRUE 46126
46106: PUSH
46107: LD_VAR 0 8
46111: PUSH
46112: LD_INT 2
46114: ARRAY
46115: PUSH
46116: LD_VAR 0 13
46120: PUSH
46121: LD_INT 2
46123: PLUS
46124: GREATER
46125: OR
46126: IFTRUE 46148
46128: PUSH
46129: LD_VAR 0 8
46133: PUSH
46134: LD_INT 2
46136: ARRAY
46137: PUSH
46138: LD_VAR 0 13
46142: PUSH
46143: LD_INT 2
46145: MINUS
46146: LESS
46147: OR
46148: IFTRUE 46216
46150: PUSH
46151: LD_VAR 0 8
46155: PUSH
46156: LD_INT 3
46158: ARRAY
46159: PUSH
46160: LD_INT 0
46162: PUSH
46163: LD_INT 8
46165: PUSH
46166: LD_INT 9
46168: PUSH
46169: LD_INT 10
46171: PUSH
46172: LD_INT 11
46174: PUSH
46175: LD_INT 12
46177: PUSH
46178: LD_INT 13
46180: PUSH
46181: LD_INT 16
46183: PUSH
46184: LD_INT 17
46186: PUSH
46187: LD_INT 18
46189: PUSH
46190: LD_INT 19
46192: PUSH
46193: LD_INT 20
46195: PUSH
46196: LD_INT 21
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: IN
46214: NOT
46215: OR
46216: IFTRUE 46229
46218: PUSH
46219: LD_VAR 0 8
46223: PUSH
46224: LD_INT 5
46226: ARRAY
46227: NOT
46228: OR
46229: IFTRUE 46269
46231: PUSH
46232: LD_VAR 0 8
46236: PUSH
46237: LD_INT 6
46239: ARRAY
46240: PUSH
46241: LD_INT 1
46243: PUSH
46244: LD_INT 2
46246: PUSH
46247: LD_INT 7
46249: PUSH
46250: LD_INT 9
46252: PUSH
46253: LD_INT 10
46255: PUSH
46256: LD_INT 11
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: IN
46267: NOT
46268: OR
46269: IFFALSE 46275
// exit ;
46271: POP
46272: POP
46273: GO 46360
// end ;
46275: GO 45932
46277: POP
46278: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46279: LD_VAR 0 9
46283: PPUSH
46284: LD_VAR 0 3
46288: PPUSH
46289: LD_VAR 0 4
46293: PPUSH
46294: LD_INT 20
46296: PPUSH
46297: CALL 38179 0 4
46301: PUSH
46302: LD_INT 4
46304: ARRAY
46305: IFFALSE 46309
// exit ;
46307: GO 46360
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46309: LD_VAR 0 2
46313: PUSH
46314: LD_INT 29
46316: PUSH
46317: LD_INT 30
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: IN
46324: IFFALSE 46348
46326: PUSH
46327: LD_VAR 0 3
46331: PPUSH
46332: LD_VAR 0 4
46336: PPUSH
46337: LD_VAR 0 9
46341: PPUSH
46342: CALL_OW 440
46346: NOT
46347: AND
46348: IFFALSE 46352
// exit ;
46350: GO 46360
// result := true ;
46352: LD_ADDR_VAR 0 6
46356: PUSH
46357: LD_INT 1
46359: ST_TO_ADDR
// end ;
46360: LD_VAR 0 6
46364: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46365: LD_INT 0
46367: PPUSH
46368: PPUSH
46369: PPUSH
46370: PPUSH
46371: PPUSH
46372: PPUSH
46373: PPUSH
46374: PPUSH
46375: PPUSH
46376: PPUSH
46377: PPUSH
46378: PPUSH
46379: PPUSH
46380: PPUSH
46381: PPUSH
46382: PPUSH
46383: PPUSH
46384: PPUSH
46385: PPUSH
46386: PPUSH
46387: PPUSH
46388: PPUSH
46389: PPUSH
46390: PPUSH
46391: PPUSH
46392: PPUSH
46393: PPUSH
46394: PPUSH
46395: PPUSH
46396: PPUSH
46397: PPUSH
46398: PPUSH
46399: PPUSH
46400: PPUSH
46401: PPUSH
46402: PPUSH
46403: PPUSH
46404: PPUSH
46405: PPUSH
46406: PPUSH
46407: PPUSH
46408: PPUSH
46409: PPUSH
46410: PPUSH
46411: PPUSH
46412: PPUSH
46413: PPUSH
46414: PPUSH
46415: PPUSH
46416: PPUSH
46417: PPUSH
46418: PPUSH
46419: PPUSH
46420: PPUSH
46421: PPUSH
46422: PPUSH
46423: PPUSH
46424: PPUSH
// result = [ ] ;
46425: LD_ADDR_VAR 0 7
46429: PUSH
46430: EMPTY
46431: ST_TO_ADDR
// temp_list = [ ] ;
46432: LD_ADDR_VAR 0 9
46436: PUSH
46437: EMPTY
46438: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46439: LD_VAR 0 4
46443: PUSH
46444: LD_INT 0
46446: PUSH
46447: LD_INT 1
46449: PUSH
46450: LD_INT 2
46452: PUSH
46453: LD_INT 3
46455: PUSH
46456: LD_INT 4
46458: PUSH
46459: LD_INT 5
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: IN
46470: NOT
46471: IFTRUE 46514
46473: PUSH
46474: LD_VAR 0 1
46478: PUSH
46479: LD_INT 0
46481: PUSH
46482: LD_INT 1
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: IN
46489: IFFALSE 46513
46491: PUSH
46492: LD_VAR 0 5
46496: PUSH
46497: LD_INT 1
46499: PUSH
46500: LD_INT 2
46502: PUSH
46503: LD_INT 3
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: LIST
46510: IN
46511: NOT
46512: AND
46513: OR
46514: IFFALSE 46518
// exit ;
46516: GO 64917
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46518: LD_VAR 0 1
46522: PUSH
46523: LD_INT 6
46525: PUSH
46526: LD_INT 7
46528: PUSH
46529: LD_INT 8
46531: PUSH
46532: LD_INT 13
46534: PUSH
46535: LD_INT 12
46537: PUSH
46538: LD_INT 15
46540: PUSH
46541: LD_INT 11
46543: PUSH
46544: LD_INT 14
46546: PUSH
46547: LD_INT 10
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: IN
46561: IFFALSE 46571
// btype = b_lab ;
46563: LD_ADDR_VAR 0 1
46567: PUSH
46568: LD_INT 6
46570: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46571: LD_VAR 0 6
46575: PUSH
46576: LD_INT 0
46578: PUSH
46579: LD_INT 1
46581: PUSH
46582: LD_INT 2
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: LIST
46589: IN
46590: NOT
46591: IFTRUE 46659
46593: PUSH
46594: LD_VAR 0 1
46598: PUSH
46599: LD_INT 0
46601: PUSH
46602: LD_INT 1
46604: PUSH
46605: LD_INT 2
46607: PUSH
46608: LD_INT 3
46610: PUSH
46611: LD_INT 6
46613: PUSH
46614: LD_INT 36
46616: PUSH
46617: LD_INT 4
46619: PUSH
46620: LD_INT 5
46622: PUSH
46623: LD_INT 31
46625: PUSH
46626: LD_INT 32
46628: PUSH
46629: LD_INT 33
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: IN
46645: NOT
46646: IFFALSE 46658
46648: PUSH
46649: LD_VAR 0 6
46653: PUSH
46654: LD_INT 1
46656: EQUAL
46657: AND
46658: OR
46659: IFTRUE 46691
46661: PUSH
46662: LD_VAR 0 1
46666: PUSH
46667: LD_INT 2
46669: PUSH
46670: LD_INT 3
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: IN
46677: NOT
46678: IFFALSE 46690
46680: PUSH
46681: LD_VAR 0 6
46685: PUSH
46686: LD_INT 2
46688: EQUAL
46689: AND
46690: OR
46691: IFFALSE 46701
// mode = 0 ;
46693: LD_ADDR_VAR 0 6
46697: PUSH
46698: LD_INT 0
46700: ST_TO_ADDR
// case mode of 0 :
46701: LD_VAR 0 6
46705: PUSH
46706: LD_INT 0
46708: DOUBLE
46709: EQUAL
46710: IFTRUE 46714
46712: GO 58167
46714: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46715: LD_ADDR_VAR 0 11
46719: PUSH
46720: LD_INT 0
46722: PUSH
46723: LD_INT 0
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 0
46732: PUSH
46733: LD_INT 1
46735: NEG
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 1
46743: PUSH
46744: LD_INT 0
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 1
46753: PUSH
46754: LD_INT 1
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 0
46763: PUSH
46764: LD_INT 1
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 1
46773: NEG
46774: PUSH
46775: LD_INT 0
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 1
46784: NEG
46785: PUSH
46786: LD_INT 1
46788: NEG
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 1
46796: NEG
46797: PUSH
46798: LD_INT 2
46800: NEG
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 0
46808: PUSH
46809: LD_INT 2
46811: NEG
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 1
46819: PUSH
46820: LD_INT 1
46822: NEG
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 1
46830: PUSH
46831: LD_INT 2
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 0
46840: PUSH
46841: LD_INT 2
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 1
46850: NEG
46851: PUSH
46852: LD_INT 1
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 1
46861: PUSH
46862: LD_INT 3
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 0
46871: PUSH
46872: LD_INT 3
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 1
46881: NEG
46882: PUSH
46883: LD_INT 2
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46908: LD_ADDR_VAR 0 12
46912: PUSH
46913: LD_INT 0
46915: PUSH
46916: LD_INT 0
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 0
46925: PUSH
46926: LD_INT 1
46928: NEG
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 1
46936: PUSH
46937: LD_INT 0
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 1
46946: PUSH
46947: LD_INT 1
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 0
46956: PUSH
46957: LD_INT 1
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 1
46966: NEG
46967: PUSH
46968: LD_INT 0
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 1
46977: NEG
46978: PUSH
46979: LD_INT 1
46981: NEG
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 1
46989: PUSH
46990: LD_INT 1
46992: NEG
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 2
47000: PUSH
47001: LD_INT 0
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 2
47010: PUSH
47011: LD_INT 1
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 1
47020: NEG
47021: PUSH
47022: LD_INT 1
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 2
47031: NEG
47032: PUSH
47033: LD_INT 0
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 2
47042: NEG
47043: PUSH
47044: LD_INT 1
47046: NEG
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 2
47054: NEG
47055: PUSH
47056: LD_INT 1
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 3
47065: NEG
47066: PUSH
47067: LD_INT 0
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 3
47076: NEG
47077: PUSH
47078: LD_INT 1
47080: NEG
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47104: LD_ADDR_VAR 0 13
47108: PUSH
47109: LD_INT 0
47111: PUSH
47112: LD_INT 0
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 0
47121: PUSH
47122: LD_INT 1
47124: NEG
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 1
47132: PUSH
47133: LD_INT 0
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 1
47142: PUSH
47143: LD_INT 1
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 0
47152: PUSH
47153: LD_INT 1
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 1
47162: NEG
47163: PUSH
47164: LD_INT 0
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 1
47173: NEG
47174: PUSH
47175: LD_INT 1
47177: NEG
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 1
47185: NEG
47186: PUSH
47187: LD_INT 2
47189: NEG
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 2
47197: PUSH
47198: LD_INT 1
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 2
47207: PUSH
47208: LD_INT 2
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 1
47217: PUSH
47218: LD_INT 2
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 2
47227: NEG
47228: PUSH
47229: LD_INT 1
47231: NEG
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 2
47239: NEG
47240: PUSH
47241: LD_INT 2
47243: NEG
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 2
47251: NEG
47252: PUSH
47253: LD_INT 3
47255: NEG
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 3
47263: NEG
47264: PUSH
47265: LD_INT 2
47267: NEG
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 3
47275: NEG
47276: PUSH
47277: LD_INT 3
47279: NEG
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47303: LD_ADDR_VAR 0 14
47307: PUSH
47308: LD_INT 0
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 0
47320: PUSH
47321: LD_INT 1
47323: NEG
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 1
47331: PUSH
47332: LD_INT 0
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 1
47341: PUSH
47342: LD_INT 1
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 0
47351: PUSH
47352: LD_INT 1
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 1
47361: NEG
47362: PUSH
47363: LD_INT 0
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 1
47372: NEG
47373: PUSH
47374: LD_INT 1
47376: NEG
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 1
47384: NEG
47385: PUSH
47386: LD_INT 2
47388: NEG
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 0
47396: PUSH
47397: LD_INT 2
47399: NEG
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 1
47407: PUSH
47408: LD_INT 1
47410: NEG
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 1
47418: PUSH
47419: LD_INT 2
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 0
47428: PUSH
47429: LD_INT 2
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 1
47438: NEG
47439: PUSH
47440: LD_INT 1
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 1
47449: NEG
47450: PUSH
47451: LD_INT 3
47453: NEG
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 0
47461: PUSH
47462: LD_INT 3
47464: NEG
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 1
47472: PUSH
47473: LD_INT 2
47475: NEG
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47499: LD_ADDR_VAR 0 15
47503: PUSH
47504: LD_INT 0
47506: PUSH
47507: LD_INT 0
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 0
47516: PUSH
47517: LD_INT 1
47519: NEG
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 1
47527: PUSH
47528: LD_INT 0
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 1
47537: PUSH
47538: LD_INT 1
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 0
47547: PUSH
47548: LD_INT 1
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 1
47557: NEG
47558: PUSH
47559: LD_INT 0
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 1
47568: NEG
47569: PUSH
47570: LD_INT 1
47572: NEG
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 1
47580: PUSH
47581: LD_INT 1
47583: NEG
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 2
47591: PUSH
47592: LD_INT 0
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 2
47601: PUSH
47602: LD_INT 1
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 1
47611: NEG
47612: PUSH
47613: LD_INT 1
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 2
47622: NEG
47623: PUSH
47624: LD_INT 0
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 2
47633: NEG
47634: PUSH
47635: LD_INT 1
47637: NEG
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 2
47645: PUSH
47646: LD_INT 1
47648: NEG
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 3
47656: PUSH
47657: LD_INT 0
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 3
47666: PUSH
47667: LD_INT 1
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47692: LD_ADDR_VAR 0 16
47696: PUSH
47697: LD_INT 0
47699: PUSH
47700: LD_INT 0
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 0
47709: PUSH
47710: LD_INT 1
47712: NEG
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 1
47720: PUSH
47721: LD_INT 0
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 1
47730: PUSH
47731: LD_INT 1
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 0
47740: PUSH
47741: LD_INT 1
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 1
47750: NEG
47751: PUSH
47752: LD_INT 0
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 1
47761: NEG
47762: PUSH
47763: LD_INT 1
47765: NEG
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 1
47773: NEG
47774: PUSH
47775: LD_INT 2
47777: NEG
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 2
47785: PUSH
47786: LD_INT 1
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 2
47795: PUSH
47796: LD_INT 2
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 1
47805: PUSH
47806: LD_INT 2
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 2
47815: NEG
47816: PUSH
47817: LD_INT 1
47819: NEG
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 2
47827: NEG
47828: PUSH
47829: LD_INT 2
47831: NEG
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 3
47839: PUSH
47840: LD_INT 2
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 3
47849: PUSH
47850: LD_INT 3
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 2
47859: PUSH
47860: LD_INT 3
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47885: LD_ADDR_VAR 0 17
47889: PUSH
47890: LD_INT 0
47892: PUSH
47893: LD_INT 0
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: LD_INT 1
47905: NEG
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 1
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 1
47923: PUSH
47924: LD_INT 1
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 0
47933: PUSH
47934: LD_INT 1
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 1
47943: NEG
47944: PUSH
47945: LD_INT 0
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 1
47954: NEG
47955: PUSH
47956: LD_INT 1
47958: NEG
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 1
47966: NEG
47967: PUSH
47968: LD_INT 2
47970: NEG
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 0
47978: PUSH
47979: LD_INT 2
47981: NEG
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 1
47989: PUSH
47990: LD_INT 1
47992: NEG
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 2
48000: PUSH
48001: LD_INT 0
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 2
48010: PUSH
48011: LD_INT 1
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 2
48020: PUSH
48021: LD_INT 2
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 1
48030: PUSH
48031: LD_INT 2
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 0
48040: PUSH
48041: LD_INT 2
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 1
48050: NEG
48051: PUSH
48052: LD_INT 1
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 2
48061: NEG
48062: PUSH
48063: LD_INT 0
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 2
48072: NEG
48073: PUSH
48074: LD_INT 1
48076: NEG
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 2
48084: NEG
48085: PUSH
48086: LD_INT 2
48088: NEG
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48115: LD_ADDR_VAR 0 18
48119: PUSH
48120: LD_INT 0
48122: PUSH
48123: LD_INT 0
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 0
48132: PUSH
48133: LD_INT 1
48135: NEG
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 1
48143: PUSH
48144: LD_INT 0
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 1
48153: PUSH
48154: LD_INT 1
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 0
48163: PUSH
48164: LD_INT 1
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 1
48173: NEG
48174: PUSH
48175: LD_INT 0
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 1
48184: NEG
48185: PUSH
48186: LD_INT 1
48188: NEG
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 1
48196: NEG
48197: PUSH
48198: LD_INT 2
48200: NEG
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 0
48208: PUSH
48209: LD_INT 2
48211: NEG
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 1
48219: PUSH
48220: LD_INT 1
48222: NEG
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 2
48230: PUSH
48231: LD_INT 0
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 2
48240: PUSH
48241: LD_INT 1
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 2
48250: PUSH
48251: LD_INT 2
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 1
48260: PUSH
48261: LD_INT 2
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 0
48270: PUSH
48271: LD_INT 2
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 1
48280: NEG
48281: PUSH
48282: LD_INT 1
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 2
48291: NEG
48292: PUSH
48293: LD_INT 0
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 2
48302: NEG
48303: PUSH
48304: LD_INT 1
48306: NEG
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 2
48314: NEG
48315: PUSH
48316: LD_INT 2
48318: NEG
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48345: LD_ADDR_VAR 0 19
48349: PUSH
48350: LD_INT 0
48352: PUSH
48353: LD_INT 0
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 0
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 1
48373: PUSH
48374: LD_INT 0
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 1
48383: PUSH
48384: LD_INT 1
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 0
48393: PUSH
48394: LD_INT 1
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 1
48403: NEG
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 1
48414: NEG
48415: PUSH
48416: LD_INT 1
48418: NEG
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 1
48426: NEG
48427: PUSH
48428: LD_INT 2
48430: NEG
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 0
48438: PUSH
48439: LD_INT 2
48441: NEG
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 1
48449: PUSH
48450: LD_INT 1
48452: NEG
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 2
48460: PUSH
48461: LD_INT 0
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 2
48470: PUSH
48471: LD_INT 1
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 2
48480: PUSH
48481: LD_INT 2
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 1
48490: PUSH
48491: LD_INT 2
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 0
48500: PUSH
48501: LD_INT 2
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 1
48510: NEG
48511: PUSH
48512: LD_INT 1
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 2
48521: NEG
48522: PUSH
48523: LD_INT 0
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 2
48532: NEG
48533: PUSH
48534: LD_INT 1
48536: NEG
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 2
48544: NEG
48545: PUSH
48546: LD_INT 2
48548: NEG
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48575: LD_ADDR_VAR 0 20
48579: PUSH
48580: LD_INT 0
48582: PUSH
48583: LD_INT 0
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 0
48592: PUSH
48593: LD_INT 1
48595: NEG
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 1
48603: PUSH
48604: LD_INT 0
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 1
48613: PUSH
48614: LD_INT 1
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 0
48623: PUSH
48624: LD_INT 1
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 1
48633: NEG
48634: PUSH
48635: LD_INT 0
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 1
48644: NEG
48645: PUSH
48646: LD_INT 1
48648: NEG
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 1
48656: NEG
48657: PUSH
48658: LD_INT 2
48660: NEG
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 0
48668: PUSH
48669: LD_INT 2
48671: NEG
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 1
48679: PUSH
48680: LD_INT 1
48682: NEG
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 2
48690: PUSH
48691: LD_INT 0
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 2
48700: PUSH
48701: LD_INT 1
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 2
48710: PUSH
48711: LD_INT 2
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 1
48720: PUSH
48721: LD_INT 2
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 0
48730: PUSH
48731: LD_INT 2
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 1
48740: NEG
48741: PUSH
48742: LD_INT 1
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 2
48751: NEG
48752: PUSH
48753: LD_INT 0
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 2
48762: NEG
48763: PUSH
48764: LD_INT 1
48766: NEG
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 2
48774: NEG
48775: PUSH
48776: LD_INT 2
48778: NEG
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48805: LD_ADDR_VAR 0 21
48809: PUSH
48810: LD_INT 0
48812: PUSH
48813: LD_INT 0
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 0
48822: PUSH
48823: LD_INT 1
48825: NEG
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 1
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 1
48843: PUSH
48844: LD_INT 1
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 0
48853: PUSH
48854: LD_INT 1
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 1
48863: NEG
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 1
48874: NEG
48875: PUSH
48876: LD_INT 1
48878: NEG
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 1
48886: NEG
48887: PUSH
48888: LD_INT 2
48890: NEG
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 0
48898: PUSH
48899: LD_INT 2
48901: NEG
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 1
48909: PUSH
48910: LD_INT 1
48912: NEG
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 2
48920: PUSH
48921: LD_INT 0
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 2
48930: PUSH
48931: LD_INT 1
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 2
48940: PUSH
48941: LD_INT 2
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 1
48950: PUSH
48951: LD_INT 2
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 0
48960: PUSH
48961: LD_INT 2
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 1
48970: NEG
48971: PUSH
48972: LD_INT 1
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 2
48981: NEG
48982: PUSH
48983: LD_INT 0
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 2
48992: NEG
48993: PUSH
48994: LD_INT 1
48996: NEG
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 2
49004: NEG
49005: PUSH
49006: LD_INT 2
49008: NEG
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49035: LD_ADDR_VAR 0 22
49039: PUSH
49040: LD_INT 0
49042: PUSH
49043: LD_INT 0
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 0
49052: PUSH
49053: LD_INT 1
49055: NEG
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 1
49063: PUSH
49064: LD_INT 0
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 1
49073: PUSH
49074: LD_INT 1
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 0
49083: PUSH
49084: LD_INT 1
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 1
49093: NEG
49094: PUSH
49095: LD_INT 0
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 1
49104: NEG
49105: PUSH
49106: LD_INT 1
49108: NEG
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 1
49116: NEG
49117: PUSH
49118: LD_INT 2
49120: NEG
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 0
49128: PUSH
49129: LD_INT 2
49131: NEG
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 1
49139: PUSH
49140: LD_INT 1
49142: NEG
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 2
49150: PUSH
49151: LD_INT 0
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 2
49160: PUSH
49161: LD_INT 1
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 2
49170: PUSH
49171: LD_INT 2
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 1
49180: PUSH
49181: LD_INT 2
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 0
49190: PUSH
49191: LD_INT 2
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 1
49200: NEG
49201: PUSH
49202: LD_INT 1
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 2
49211: NEG
49212: PUSH
49213: LD_INT 0
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 2
49222: NEG
49223: PUSH
49224: LD_INT 1
49226: NEG
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 2
49234: NEG
49235: PUSH
49236: LD_INT 2
49238: NEG
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49265: LD_ADDR_VAR 0 23
49269: PUSH
49270: LD_INT 0
49272: PUSH
49273: LD_INT 0
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 0
49282: PUSH
49283: LD_INT 1
49285: NEG
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 1
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 1
49303: PUSH
49304: LD_INT 1
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 0
49313: PUSH
49314: LD_INT 1
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 1
49323: NEG
49324: PUSH
49325: LD_INT 0
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 1
49334: NEG
49335: PUSH
49336: LD_INT 1
49338: NEG
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 1
49346: NEG
49347: PUSH
49348: LD_INT 2
49350: NEG
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 0
49358: PUSH
49359: LD_INT 2
49361: NEG
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 1
49369: PUSH
49370: LD_INT 1
49372: NEG
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 2
49380: PUSH
49381: LD_INT 0
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 2
49390: PUSH
49391: LD_INT 1
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 2
49400: PUSH
49401: LD_INT 2
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 1
49410: PUSH
49411: LD_INT 2
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 0
49420: PUSH
49421: LD_INT 2
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 1
49430: NEG
49431: PUSH
49432: LD_INT 1
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 2
49441: NEG
49442: PUSH
49443: LD_INT 0
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 2
49452: NEG
49453: PUSH
49454: LD_INT 1
49456: NEG
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 2
49464: NEG
49465: PUSH
49466: LD_INT 2
49468: NEG
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 2
49476: NEG
49477: PUSH
49478: LD_INT 3
49480: NEG
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 1
49488: NEG
49489: PUSH
49490: LD_INT 3
49492: NEG
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 1
49500: PUSH
49501: LD_INT 2
49503: NEG
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 2
49511: PUSH
49512: LD_INT 1
49514: NEG
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49545: LD_ADDR_VAR 0 24
49549: PUSH
49550: LD_INT 0
49552: PUSH
49553: LD_INT 0
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 0
49562: PUSH
49563: LD_INT 1
49565: NEG
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 1
49573: PUSH
49574: LD_INT 0
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 1
49583: PUSH
49584: LD_INT 1
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 0
49593: PUSH
49594: LD_INT 1
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 1
49603: NEG
49604: PUSH
49605: LD_INT 0
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 1
49614: NEG
49615: PUSH
49616: LD_INT 1
49618: NEG
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 1
49626: NEG
49627: PUSH
49628: LD_INT 2
49630: NEG
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 0
49638: PUSH
49639: LD_INT 2
49641: NEG
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 1
49649: PUSH
49650: LD_INT 1
49652: NEG
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 2
49660: PUSH
49661: LD_INT 0
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 2
49670: PUSH
49671: LD_INT 1
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 2
49680: PUSH
49681: LD_INT 2
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 1
49690: PUSH
49691: LD_INT 2
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 0
49700: PUSH
49701: LD_INT 2
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 1
49710: NEG
49711: PUSH
49712: LD_INT 1
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 2
49721: NEG
49722: PUSH
49723: LD_INT 0
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 2
49732: NEG
49733: PUSH
49734: LD_INT 1
49736: NEG
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 2
49744: NEG
49745: PUSH
49746: LD_INT 2
49748: NEG
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 1
49756: PUSH
49757: LD_INT 2
49759: NEG
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 2
49767: PUSH
49768: LD_INT 1
49770: NEG
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 3
49778: PUSH
49779: LD_INT 1
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 3
49788: PUSH
49789: LD_INT 2
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49821: LD_ADDR_VAR 0 25
49825: PUSH
49826: LD_INT 0
49828: PUSH
49829: LD_INT 0
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 0
49838: PUSH
49839: LD_INT 1
49841: NEG
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 1
49849: PUSH
49850: LD_INT 0
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 1
49859: PUSH
49860: LD_INT 1
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 0
49869: PUSH
49870: LD_INT 1
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 1
49879: NEG
49880: PUSH
49881: LD_INT 0
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 1
49890: NEG
49891: PUSH
49892: LD_INT 1
49894: NEG
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 1
49902: NEG
49903: PUSH
49904: LD_INT 2
49906: NEG
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 0
49914: PUSH
49915: LD_INT 2
49917: NEG
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 1
49925: PUSH
49926: LD_INT 1
49928: NEG
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 2
49936: PUSH
49937: LD_INT 0
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 2
49946: PUSH
49947: LD_INT 1
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 2
49956: PUSH
49957: LD_INT 2
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 1
49966: PUSH
49967: LD_INT 2
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 0
49976: PUSH
49977: LD_INT 2
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 1
49986: NEG
49987: PUSH
49988: LD_INT 1
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 2
49997: NEG
49998: PUSH
49999: LD_INT 0
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 2
50008: NEG
50009: PUSH
50010: LD_INT 1
50012: NEG
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 2
50020: NEG
50021: PUSH
50022: LD_INT 2
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 3
50032: PUSH
50033: LD_INT 1
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 3
50042: PUSH
50043: LD_INT 2
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 2
50052: PUSH
50053: LD_INT 3
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 1
50062: PUSH
50063: LD_INT 3
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50095: LD_ADDR_VAR 0 26
50099: PUSH
50100: LD_INT 0
50102: PUSH
50103: LD_INT 0
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 0
50112: PUSH
50113: LD_INT 1
50115: NEG
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 1
50123: PUSH
50124: LD_INT 0
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 1
50133: PUSH
50134: LD_INT 1
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 0
50143: PUSH
50144: LD_INT 1
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 1
50153: NEG
50154: PUSH
50155: LD_INT 0
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 1
50164: NEG
50165: PUSH
50166: LD_INT 1
50168: NEG
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 1
50176: NEG
50177: PUSH
50178: LD_INT 2
50180: NEG
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 0
50188: PUSH
50189: LD_INT 2
50191: NEG
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 1
50199: PUSH
50200: LD_INT 1
50202: NEG
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 2
50210: PUSH
50211: LD_INT 0
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 2
50220: PUSH
50221: LD_INT 1
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 2
50230: PUSH
50231: LD_INT 2
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 1
50240: PUSH
50241: LD_INT 2
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 0
50250: PUSH
50251: LD_INT 2
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 1
50260: NEG
50261: PUSH
50262: LD_INT 1
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 2
50271: NEG
50272: PUSH
50273: LD_INT 0
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 2
50282: NEG
50283: PUSH
50284: LD_INT 1
50286: NEG
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 2
50294: NEG
50295: PUSH
50296: LD_INT 2
50298: NEG
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 2
50306: PUSH
50307: LD_INT 3
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 1
50316: PUSH
50317: LD_INT 3
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 1
50326: NEG
50327: PUSH
50328: LD_INT 2
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 2
50337: NEG
50338: PUSH
50339: LD_INT 1
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50371: LD_ADDR_VAR 0 27
50375: PUSH
50376: LD_INT 0
50378: PUSH
50379: LD_INT 0
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 0
50388: PUSH
50389: LD_INT 1
50391: NEG
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 1
50399: PUSH
50400: LD_INT 0
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 1
50409: PUSH
50410: LD_INT 1
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 0
50419: PUSH
50420: LD_INT 1
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 1
50429: NEG
50430: PUSH
50431: LD_INT 0
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 1
50440: NEG
50441: PUSH
50442: LD_INT 1
50444: NEG
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 1
50452: NEG
50453: PUSH
50454: LD_INT 2
50456: NEG
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 0
50464: PUSH
50465: LD_INT 2
50467: NEG
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 1
50475: PUSH
50476: LD_INT 1
50478: NEG
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 2
50486: PUSH
50487: LD_INT 0
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 2
50496: PUSH
50497: LD_INT 1
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 2
50506: PUSH
50507: LD_INT 2
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 1
50516: PUSH
50517: LD_INT 2
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 0
50526: PUSH
50527: LD_INT 2
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 1
50536: NEG
50537: PUSH
50538: LD_INT 1
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 2
50547: NEG
50548: PUSH
50549: LD_INT 0
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 2
50558: NEG
50559: PUSH
50560: LD_INT 1
50562: NEG
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 2
50570: NEG
50571: PUSH
50572: LD_INT 2
50574: NEG
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 1
50582: NEG
50583: PUSH
50584: LD_INT 2
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 2
50593: NEG
50594: PUSH
50595: LD_INT 1
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 3
50604: NEG
50605: PUSH
50606: LD_INT 1
50608: NEG
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 3
50616: NEG
50617: PUSH
50618: LD_INT 2
50620: NEG
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50651: LD_ADDR_VAR 0 28
50655: PUSH
50656: LD_INT 0
50658: PUSH
50659: LD_INT 0
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 0
50668: PUSH
50669: LD_INT 1
50671: NEG
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 1
50679: PUSH
50680: LD_INT 0
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 1
50689: PUSH
50690: LD_INT 1
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 0
50699: PUSH
50700: LD_INT 1
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 1
50709: NEG
50710: PUSH
50711: LD_INT 0
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 1
50720: NEG
50721: PUSH
50722: LD_INT 1
50724: NEG
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 1
50732: NEG
50733: PUSH
50734: LD_INT 2
50736: NEG
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 0
50744: PUSH
50745: LD_INT 2
50747: NEG
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 1
50755: PUSH
50756: LD_INT 1
50758: NEG
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 2
50766: PUSH
50767: LD_INT 0
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 2
50776: PUSH
50777: LD_INT 1
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 2
50786: PUSH
50787: LD_INT 2
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 1
50796: PUSH
50797: LD_INT 2
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 0
50806: PUSH
50807: LD_INT 2
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 1
50816: NEG
50817: PUSH
50818: LD_INT 1
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 2
50827: NEG
50828: PUSH
50829: LD_INT 0
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 2
50838: NEG
50839: PUSH
50840: LD_INT 1
50842: NEG
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 2
50850: NEG
50851: PUSH
50852: LD_INT 2
50854: NEG
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 2
50862: NEG
50863: PUSH
50864: LD_INT 3
50866: NEG
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 1
50874: NEG
50875: PUSH
50876: LD_INT 3
50878: NEG
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 3
50886: NEG
50887: PUSH
50888: LD_INT 1
50890: NEG
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 3
50898: NEG
50899: PUSH
50900: LD_INT 2
50902: NEG
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50933: LD_ADDR_VAR 0 29
50937: PUSH
50938: LD_INT 0
50940: PUSH
50941: LD_INT 0
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 0
50950: PUSH
50951: LD_INT 1
50953: NEG
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 1
50961: PUSH
50962: LD_INT 0
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 1
50971: PUSH
50972: LD_INT 1
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 0
50981: PUSH
50982: LD_INT 1
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 1
50991: NEG
50992: PUSH
50993: LD_INT 0
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 1
51002: NEG
51003: PUSH
51004: LD_INT 1
51006: NEG
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 1
51014: NEG
51015: PUSH
51016: LD_INT 2
51018: NEG
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 0
51026: PUSH
51027: LD_INT 2
51029: NEG
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 1
51037: PUSH
51038: LD_INT 1
51040: NEG
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 2
51048: PUSH
51049: LD_INT 0
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 2
51058: PUSH
51059: LD_INT 1
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 1
51068: PUSH
51069: LD_INT 2
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 0
51078: PUSH
51079: LD_INT 2
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 1
51088: NEG
51089: PUSH
51090: LD_INT 1
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 2
51099: NEG
51100: PUSH
51101: LD_INT 1
51103: NEG
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 2
51111: NEG
51112: PUSH
51113: LD_INT 2
51115: NEG
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 2
51123: NEG
51124: PUSH
51125: LD_INT 3
51127: NEG
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 2
51135: PUSH
51136: LD_INT 1
51138: NEG
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 3
51146: PUSH
51147: LD_INT 1
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 1
51156: PUSH
51157: LD_INT 3
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 1
51166: NEG
51167: PUSH
51168: LD_INT 2
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 3
51177: NEG
51178: PUSH
51179: LD_INT 2
51181: NEG
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51212: LD_ADDR_VAR 0 30
51216: PUSH
51217: LD_INT 0
51219: PUSH
51220: LD_INT 0
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 0
51229: PUSH
51230: LD_INT 1
51232: NEG
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 1
51240: PUSH
51241: LD_INT 0
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 1
51250: PUSH
51251: LD_INT 1
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 0
51260: PUSH
51261: LD_INT 1
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 1
51270: NEG
51271: PUSH
51272: LD_INT 0
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 1
51281: NEG
51282: PUSH
51283: LD_INT 1
51285: NEG
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 1
51293: NEG
51294: PUSH
51295: LD_INT 2
51297: NEG
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 0
51305: PUSH
51306: LD_INT 2
51308: NEG
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 1
51316: PUSH
51317: LD_INT 1
51319: NEG
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 2
51327: PUSH
51328: LD_INT 0
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 2
51337: PUSH
51338: LD_INT 1
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 2
51347: PUSH
51348: LD_INT 2
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 1
51357: PUSH
51358: LD_INT 2
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 1
51367: NEG
51368: PUSH
51369: LD_INT 1
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 2
51378: NEG
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 2
51389: NEG
51390: PUSH
51391: LD_INT 1
51393: NEG
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: LD_INT 3
51405: NEG
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 1
51413: PUSH
51414: LD_INT 2
51416: NEG
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 3
51424: PUSH
51425: LD_INT 2
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 2
51434: PUSH
51435: LD_INT 3
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 2
51444: NEG
51445: PUSH
51446: LD_INT 1
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 3
51455: NEG
51456: PUSH
51457: LD_INT 1
51459: NEG
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51490: LD_ADDR_VAR 0 31
51494: PUSH
51495: LD_INT 0
51497: PUSH
51498: LD_INT 0
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 0
51507: PUSH
51508: LD_INT 1
51510: NEG
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 1
51518: PUSH
51519: LD_INT 0
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 1
51528: PUSH
51529: LD_INT 1
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 0
51538: PUSH
51539: LD_INT 1
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 1
51548: NEG
51549: PUSH
51550: LD_INT 0
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 1
51559: NEG
51560: PUSH
51561: LD_INT 1
51563: NEG
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 1
51571: NEG
51572: PUSH
51573: LD_INT 2
51575: NEG
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 1
51583: PUSH
51584: LD_INT 1
51586: NEG
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 2
51594: PUSH
51595: LD_INT 0
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 2
51604: PUSH
51605: LD_INT 1
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 2
51614: PUSH
51615: LD_INT 2
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 1
51624: PUSH
51625: LD_INT 2
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 0
51634: PUSH
51635: LD_INT 2
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 1
51644: NEG
51645: PUSH
51646: LD_INT 1
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 2
51655: NEG
51656: PUSH
51657: LD_INT 1
51659: NEG
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 2
51667: NEG
51668: PUSH
51669: LD_INT 2
51671: NEG
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 2
51679: NEG
51680: PUSH
51681: LD_INT 3
51683: NEG
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 2
51691: PUSH
51692: LD_INT 1
51694: NEG
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 3
51702: PUSH
51703: LD_INT 1
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 1
51712: PUSH
51713: LD_INT 3
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 1
51722: NEG
51723: PUSH
51724: LD_INT 2
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 3
51733: NEG
51734: PUSH
51735: LD_INT 2
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51768: LD_ADDR_VAR 0 32
51772: PUSH
51773: LD_INT 0
51775: PUSH
51776: LD_INT 0
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 0
51785: PUSH
51786: LD_INT 1
51788: NEG
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 1
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 1
51806: PUSH
51807: LD_INT 1
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 0
51816: PUSH
51817: LD_INT 1
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 1
51826: NEG
51827: PUSH
51828: LD_INT 0
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 1
51837: NEG
51838: PUSH
51839: LD_INT 1
51841: NEG
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 1
51849: NEG
51850: PUSH
51851: LD_INT 2
51853: NEG
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 0
51861: PUSH
51862: LD_INT 2
51864: NEG
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 1
51872: PUSH
51873: LD_INT 1
51875: NEG
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 2
51883: PUSH
51884: LD_INT 1
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 2
51893: PUSH
51894: LD_INT 2
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 1
51903: PUSH
51904: LD_INT 2
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 0
51913: PUSH
51914: LD_INT 2
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 1
51923: NEG
51924: PUSH
51925: LD_INT 1
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 2
51934: NEG
51935: PUSH
51936: LD_INT 0
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 2
51945: NEG
51946: PUSH
51947: LD_INT 1
51949: NEG
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 1
51957: NEG
51958: PUSH
51959: LD_INT 3
51961: NEG
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 1
51969: PUSH
51970: LD_INT 2
51972: NEG
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 3
51980: PUSH
51981: LD_INT 2
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 2
51990: PUSH
51991: LD_INT 3
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 2
52000: NEG
52001: PUSH
52002: LD_INT 1
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 3
52011: NEG
52012: PUSH
52013: LD_INT 1
52015: NEG
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52046: LD_ADDR_VAR 0 33
52050: PUSH
52051: LD_INT 0
52053: PUSH
52054: LD_INT 0
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 0
52063: PUSH
52064: LD_INT 1
52066: NEG
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 1
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 1
52084: PUSH
52085: LD_INT 1
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 0
52094: PUSH
52095: LD_INT 1
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 1
52104: NEG
52105: PUSH
52106: LD_INT 0
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 1
52115: NEG
52116: PUSH
52117: LD_INT 1
52119: NEG
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 1
52127: NEG
52128: PUSH
52129: LD_INT 2
52131: NEG
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 1
52139: PUSH
52140: LD_INT 1
52142: NEG
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 2
52150: PUSH
52151: LD_INT 0
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 2
52160: PUSH
52161: LD_INT 1
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 1
52170: PUSH
52171: LD_INT 2
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 0
52180: PUSH
52181: LD_INT 2
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 1
52190: NEG
52191: PUSH
52192: LD_INT 1
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 2
52201: NEG
52202: PUSH
52203: LD_INT 0
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 2
52212: NEG
52213: PUSH
52214: LD_INT 1
52216: NEG
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 2
52224: NEG
52225: PUSH
52226: LD_INT 2
52228: NEG
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 2
52236: NEG
52237: PUSH
52238: LD_INT 3
52240: NEG
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 2
52248: PUSH
52249: LD_INT 1
52251: NEG
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 3
52259: PUSH
52260: LD_INT 1
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 1
52269: PUSH
52270: LD_INT 3
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 1
52279: NEG
52280: PUSH
52281: LD_INT 2
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 3
52290: NEG
52291: PUSH
52292: LD_INT 2
52294: NEG
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52325: LD_ADDR_VAR 0 34
52329: PUSH
52330: LD_INT 0
52332: PUSH
52333: LD_INT 0
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 0
52342: PUSH
52343: LD_INT 1
52345: NEG
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 1
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 1
52363: PUSH
52364: LD_INT 1
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 0
52373: PUSH
52374: LD_INT 1
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 1
52383: NEG
52384: PUSH
52385: LD_INT 0
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 1
52394: NEG
52395: PUSH
52396: LD_INT 1
52398: NEG
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 1
52406: NEG
52407: PUSH
52408: LD_INT 2
52410: NEG
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 0
52418: PUSH
52419: LD_INT 2
52421: NEG
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 1
52429: PUSH
52430: LD_INT 1
52432: NEG
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 2
52440: PUSH
52441: LD_INT 1
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 2
52450: PUSH
52451: LD_INT 2
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 1
52460: PUSH
52461: LD_INT 2
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 1
52470: NEG
52471: PUSH
52472: LD_INT 1
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 2
52481: NEG
52482: PUSH
52483: LD_INT 0
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 2
52492: NEG
52493: PUSH
52494: LD_INT 1
52496: NEG
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 2
52504: NEG
52505: PUSH
52506: LD_INT 2
52508: NEG
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 1
52516: NEG
52517: PUSH
52518: LD_INT 3
52520: NEG
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 1
52528: PUSH
52529: LD_INT 2
52531: NEG
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 3
52539: PUSH
52540: LD_INT 2
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 2
52549: PUSH
52550: LD_INT 3
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 2
52559: NEG
52560: PUSH
52561: LD_INT 1
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 3
52570: NEG
52571: PUSH
52572: LD_INT 1
52574: NEG
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52605: LD_ADDR_VAR 0 35
52609: PUSH
52610: LD_INT 0
52612: PUSH
52613: LD_INT 0
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: LD_INT 1
52625: NEG
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 1
52633: PUSH
52634: LD_INT 0
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 1
52643: PUSH
52644: LD_INT 1
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 0
52653: PUSH
52654: LD_INT 1
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 1
52663: NEG
52664: PUSH
52665: LD_INT 0
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 1
52674: NEG
52675: PUSH
52676: LD_INT 1
52678: NEG
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 2
52686: PUSH
52687: LD_INT 1
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 2
52696: NEG
52697: PUSH
52698: LD_INT 1
52700: NEG
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52717: LD_ADDR_VAR 0 36
52721: PUSH
52722: LD_INT 0
52724: PUSH
52725: LD_INT 0
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 0
52734: PUSH
52735: LD_INT 1
52737: NEG
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 1
52745: PUSH
52746: LD_INT 0
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 1
52755: PUSH
52756: LD_INT 1
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 0
52765: PUSH
52766: LD_INT 1
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 1
52775: NEG
52776: PUSH
52777: LD_INT 0
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 1
52786: NEG
52787: PUSH
52788: LD_INT 1
52790: NEG
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 1
52798: NEG
52799: PUSH
52800: LD_INT 2
52802: NEG
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 1
52810: PUSH
52811: LD_INT 2
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52829: LD_ADDR_VAR 0 37
52833: PUSH
52834: LD_INT 0
52836: PUSH
52837: LD_INT 0
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 0
52846: PUSH
52847: LD_INT 1
52849: NEG
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 1
52857: PUSH
52858: LD_INT 0
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 1
52867: PUSH
52868: LD_INT 1
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 0
52877: PUSH
52878: LD_INT 1
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 1
52887: NEG
52888: PUSH
52889: LD_INT 0
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 1
52898: NEG
52899: PUSH
52900: LD_INT 1
52902: NEG
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 1
52910: PUSH
52911: LD_INT 1
52913: NEG
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 1
52921: NEG
52922: PUSH
52923: LD_INT 1
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52941: LD_ADDR_VAR 0 38
52945: PUSH
52946: LD_INT 0
52948: PUSH
52949: LD_INT 0
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 0
52958: PUSH
52959: LD_INT 1
52961: NEG
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 1
52969: PUSH
52970: LD_INT 0
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 1
52979: PUSH
52980: LD_INT 1
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 0
52989: PUSH
52990: LD_INT 1
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 1
52999: NEG
53000: PUSH
53001: LD_INT 0
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 1
53010: NEG
53011: PUSH
53012: LD_INT 1
53014: NEG
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 2
53022: PUSH
53023: LD_INT 1
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 2
53032: NEG
53033: PUSH
53034: LD_INT 1
53036: NEG
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53053: LD_ADDR_VAR 0 39
53057: PUSH
53058: LD_INT 0
53060: PUSH
53061: LD_INT 0
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 0
53070: PUSH
53071: LD_INT 1
53073: NEG
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: PUSH
53082: LD_INT 0
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: LD_INT 1
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 0
53101: PUSH
53102: LD_INT 1
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 1
53111: NEG
53112: PUSH
53113: LD_INT 0
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 1
53122: NEG
53123: PUSH
53124: LD_INT 1
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 1
53134: NEG
53135: PUSH
53136: LD_INT 2
53138: NEG
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 1
53146: PUSH
53147: LD_INT 2
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53165: LD_ADDR_VAR 0 40
53169: PUSH
53170: LD_INT 0
53172: PUSH
53173: LD_INT 0
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 0
53182: PUSH
53183: LD_INT 1
53185: NEG
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 1
53193: PUSH
53194: LD_INT 0
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 1
53203: PUSH
53204: LD_INT 1
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 0
53213: PUSH
53214: LD_INT 1
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 1
53223: NEG
53224: PUSH
53225: LD_INT 0
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 1
53234: NEG
53235: PUSH
53236: LD_INT 1
53238: NEG
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 1
53246: PUSH
53247: LD_INT 1
53249: NEG
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 1
53257: NEG
53258: PUSH
53259: LD_INT 1
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53277: LD_ADDR_VAR 0 41
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: LD_INT 0
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 0
53294: PUSH
53295: LD_INT 1
53297: NEG
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 1
53305: PUSH
53306: LD_INT 0
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 1
53315: PUSH
53316: LD_INT 1
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 0
53325: PUSH
53326: LD_INT 1
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 1
53335: NEG
53336: PUSH
53337: LD_INT 0
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 1
53346: NEG
53347: PUSH
53348: LD_INT 1
53350: NEG
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 1
53358: NEG
53359: PUSH
53360: LD_INT 2
53362: NEG
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 1
53370: PUSH
53371: LD_INT 1
53373: NEG
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 2
53381: PUSH
53382: LD_INT 0
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 2
53391: PUSH
53392: LD_INT 1
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 2
53401: PUSH
53402: LD_INT 2
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 1
53411: PUSH
53412: LD_INT 2
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 1
53421: NEG
53422: PUSH
53423: LD_INT 1
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 2
53432: NEG
53433: PUSH
53434: LD_INT 0
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 2
53443: NEG
53444: PUSH
53445: LD_INT 1
53447: NEG
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 2
53455: NEG
53456: PUSH
53457: LD_INT 2
53459: NEG
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 2
53467: NEG
53468: PUSH
53469: LD_INT 3
53471: NEG
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 2
53479: PUSH
53480: LD_INT 1
53482: NEG
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 3
53490: PUSH
53491: LD_INT 0
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 3
53500: PUSH
53501: LD_INT 1
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 3
53510: PUSH
53511: LD_INT 2
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 3
53520: PUSH
53521: LD_INT 3
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 2
53530: PUSH
53531: LD_INT 3
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 2
53540: NEG
53541: PUSH
53542: LD_INT 1
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 3
53551: NEG
53552: PUSH
53553: LD_INT 0
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 3
53562: NEG
53563: PUSH
53564: LD_INT 1
53566: NEG
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 3
53574: NEG
53575: PUSH
53576: LD_INT 2
53578: NEG
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 3
53586: NEG
53587: PUSH
53588: LD_INT 3
53590: NEG
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53627: LD_ADDR_VAR 0 42
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: LD_INT 0
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 0
53644: PUSH
53645: LD_INT 1
53647: NEG
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 1
53655: PUSH
53656: LD_INT 0
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 1
53665: PUSH
53666: LD_INT 1
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 0
53675: PUSH
53676: LD_INT 1
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 1
53685: NEG
53686: PUSH
53687: LD_INT 0
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 1
53696: NEG
53697: PUSH
53698: LD_INT 1
53700: NEG
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 1
53708: NEG
53709: PUSH
53710: LD_INT 2
53712: NEG
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 0
53720: PUSH
53721: LD_INT 2
53723: NEG
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 1
53731: PUSH
53732: LD_INT 1
53734: NEG
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 2
53742: PUSH
53743: LD_INT 1
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 2
53752: PUSH
53753: LD_INT 2
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 1
53762: PUSH
53763: LD_INT 2
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 0
53772: PUSH
53773: LD_INT 2
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 1
53782: NEG
53783: PUSH
53784: LD_INT 1
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 2
53793: NEG
53794: PUSH
53795: LD_INT 1
53797: NEG
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 2
53805: NEG
53806: PUSH
53807: LD_INT 2
53809: NEG
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 2
53817: NEG
53818: PUSH
53819: LD_INT 3
53821: NEG
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 1
53829: NEG
53830: PUSH
53831: LD_INT 3
53833: NEG
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 0
53841: PUSH
53842: LD_INT 3
53844: NEG
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 1
53852: PUSH
53853: LD_INT 2
53855: NEG
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 3
53863: PUSH
53864: LD_INT 2
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 3
53873: PUSH
53874: LD_INT 3
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 2
53883: PUSH
53884: LD_INT 3
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 1
53893: PUSH
53894: LD_INT 3
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 0
53903: PUSH
53904: LD_INT 3
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 1
53913: NEG
53914: PUSH
53915: LD_INT 2
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 3
53924: NEG
53925: PUSH
53926: LD_INT 2
53928: NEG
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 3
53936: NEG
53937: PUSH
53938: LD_INT 3
53940: NEG
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53977: LD_ADDR_VAR 0 43
53981: PUSH
53982: LD_INT 0
53984: PUSH
53985: LD_INT 0
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 0
53994: PUSH
53995: LD_INT 1
53997: NEG
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 1
54005: PUSH
54006: LD_INT 0
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 1
54015: PUSH
54016: LD_INT 1
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 0
54025: PUSH
54026: LD_INT 1
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 1
54035: NEG
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 1
54046: NEG
54047: PUSH
54048: LD_INT 1
54050: NEG
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 1
54058: NEG
54059: PUSH
54060: LD_INT 2
54062: NEG
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: LD_INT 2
54073: NEG
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 1
54081: PUSH
54082: LD_INT 1
54084: NEG
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 2
54092: PUSH
54093: LD_INT 0
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 2
54102: PUSH
54103: LD_INT 1
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 1
54112: PUSH
54113: LD_INT 2
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: LD_INT 2
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 1
54132: NEG
54133: PUSH
54134: LD_INT 1
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 2
54143: NEG
54144: PUSH
54145: LD_INT 0
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 2
54154: NEG
54155: PUSH
54156: LD_INT 1
54158: NEG
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 1
54166: NEG
54167: PUSH
54168: LD_INT 3
54170: NEG
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 0
54178: PUSH
54179: LD_INT 3
54181: NEG
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 1
54189: PUSH
54190: LD_INT 2
54192: NEG
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 2
54200: PUSH
54201: LD_INT 1
54203: NEG
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 3
54211: PUSH
54212: LD_INT 0
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 3
54221: PUSH
54222: LD_INT 1
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 1
54231: PUSH
54232: LD_INT 3
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 0
54241: PUSH
54242: LD_INT 3
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 1
54251: NEG
54252: PUSH
54253: LD_INT 2
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 2
54262: NEG
54263: PUSH
54264: LD_INT 1
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 3
54273: NEG
54274: PUSH
54275: LD_INT 0
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 3
54284: NEG
54285: PUSH
54286: LD_INT 1
54288: NEG
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54325: LD_ADDR_VAR 0 44
54329: PUSH
54330: LD_INT 0
54332: PUSH
54333: LD_INT 0
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 0
54342: PUSH
54343: LD_INT 1
54345: NEG
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 1
54353: PUSH
54354: LD_INT 0
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 1
54363: PUSH
54364: LD_INT 1
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 0
54373: PUSH
54374: LD_INT 1
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 1
54383: NEG
54384: PUSH
54385: LD_INT 0
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 1
54394: NEG
54395: PUSH
54396: LD_INT 1
54398: NEG
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 1
54406: NEG
54407: PUSH
54408: LD_INT 2
54410: NEG
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 1
54418: PUSH
54419: LD_INT 1
54421: NEG
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 2
54429: PUSH
54430: LD_INT 0
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 2
54439: PUSH
54440: LD_INT 1
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 2
54449: PUSH
54450: LD_INT 2
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 1
54459: PUSH
54460: LD_INT 2
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 1
54469: NEG
54470: PUSH
54471: LD_INT 1
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 2
54480: NEG
54481: PUSH
54482: LD_INT 0
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 2
54491: NEG
54492: PUSH
54493: LD_INT 1
54495: NEG
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 2
54503: NEG
54504: PUSH
54505: LD_INT 2
54507: NEG
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 2
54515: NEG
54516: PUSH
54517: LD_INT 3
54519: NEG
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 2
54527: PUSH
54528: LD_INT 1
54530: NEG
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 3
54538: PUSH
54539: LD_INT 0
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 3
54548: PUSH
54549: LD_INT 1
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 3
54558: PUSH
54559: LD_INT 2
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 3
54568: PUSH
54569: LD_INT 3
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 2
54578: PUSH
54579: LD_INT 3
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 2
54588: NEG
54589: PUSH
54590: LD_INT 1
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 3
54599: NEG
54600: PUSH
54601: LD_INT 0
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 3
54610: NEG
54611: PUSH
54612: LD_INT 1
54614: NEG
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 3
54622: NEG
54623: PUSH
54624: LD_INT 2
54626: NEG
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 3
54634: NEG
54635: PUSH
54636: LD_INT 3
54638: NEG
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54675: LD_ADDR_VAR 0 45
54679: PUSH
54680: LD_INT 0
54682: PUSH
54683: LD_INT 0
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: LD_INT 1
54695: NEG
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 1
54703: PUSH
54704: LD_INT 0
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 1
54713: PUSH
54714: LD_INT 1
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 0
54723: PUSH
54724: LD_INT 1
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 1
54733: NEG
54734: PUSH
54735: LD_INT 0
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 1
54744: NEG
54745: PUSH
54746: LD_INT 1
54748: NEG
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 1
54756: NEG
54757: PUSH
54758: LD_INT 2
54760: NEG
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 0
54768: PUSH
54769: LD_INT 2
54771: NEG
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 1
54779: PUSH
54780: LD_INT 1
54782: NEG
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 2
54790: PUSH
54791: LD_INT 1
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 2
54800: PUSH
54801: LD_INT 2
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 1
54810: PUSH
54811: LD_INT 2
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 0
54820: PUSH
54821: LD_INT 2
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 1
54830: NEG
54831: PUSH
54832: LD_INT 1
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 2
54841: NEG
54842: PUSH
54843: LD_INT 1
54845: NEG
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 2
54853: NEG
54854: PUSH
54855: LD_INT 2
54857: NEG
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 2
54865: NEG
54866: PUSH
54867: LD_INT 3
54869: NEG
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 1
54877: NEG
54878: PUSH
54879: LD_INT 3
54881: NEG
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 0
54889: PUSH
54890: LD_INT 3
54892: NEG
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 1
54900: PUSH
54901: LD_INT 2
54903: NEG
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 3
54911: PUSH
54912: LD_INT 2
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 3
54921: PUSH
54922: LD_INT 3
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 2
54931: PUSH
54932: LD_INT 3
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 1
54941: PUSH
54942: LD_INT 3
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 0
54951: PUSH
54952: LD_INT 3
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 1
54961: NEG
54962: PUSH
54963: LD_INT 2
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 3
54972: NEG
54973: PUSH
54974: LD_INT 2
54976: NEG
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 3
54984: NEG
54985: PUSH
54986: LD_INT 3
54988: NEG
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55025: LD_ADDR_VAR 0 46
55029: PUSH
55030: LD_INT 0
55032: PUSH
55033: LD_INT 0
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 0
55042: PUSH
55043: LD_INT 1
55045: NEG
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 1
55053: PUSH
55054: LD_INT 0
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 1
55063: PUSH
55064: LD_INT 1
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 0
55073: PUSH
55074: LD_INT 1
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 1
55083: NEG
55084: PUSH
55085: LD_INT 0
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 1
55094: NEG
55095: PUSH
55096: LD_INT 1
55098: NEG
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 1
55106: NEG
55107: PUSH
55108: LD_INT 2
55110: NEG
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 0
55118: PUSH
55119: LD_INT 2
55121: NEG
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 1
55129: PUSH
55130: LD_INT 1
55132: NEG
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 2
55140: PUSH
55141: LD_INT 0
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 2
55150: PUSH
55151: LD_INT 1
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 1
55160: PUSH
55161: LD_INT 2
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 0
55170: PUSH
55171: LD_INT 2
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 1
55180: NEG
55181: PUSH
55182: LD_INT 1
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 2
55191: NEG
55192: PUSH
55193: LD_INT 0
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 2
55202: NEG
55203: PUSH
55204: LD_INT 1
55206: NEG
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 1
55214: NEG
55215: PUSH
55216: LD_INT 3
55218: NEG
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 0
55226: PUSH
55227: LD_INT 3
55229: NEG
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 1
55237: PUSH
55238: LD_INT 2
55240: NEG
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 2
55248: PUSH
55249: LD_INT 1
55251: NEG
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 3
55259: PUSH
55260: LD_INT 0
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 3
55269: PUSH
55270: LD_INT 1
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 1
55279: PUSH
55280: LD_INT 3
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: LD_INT 3
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 1
55299: NEG
55300: PUSH
55301: LD_INT 2
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 2
55310: NEG
55311: PUSH
55312: LD_INT 1
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 3
55321: NEG
55322: PUSH
55323: LD_INT 0
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 3
55332: NEG
55333: PUSH
55334: LD_INT 1
55336: NEG
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55373: LD_ADDR_VAR 0 47
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: LD_INT 0
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 0
55390: PUSH
55391: LD_INT 1
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 1
55401: PUSH
55402: LD_INT 0
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: PUSH
55412: LD_INT 1
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 0
55421: PUSH
55422: LD_INT 1
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 1
55431: NEG
55432: PUSH
55433: LD_INT 0
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 1
55442: NEG
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 1
55454: NEG
55455: PUSH
55456: LD_INT 2
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 0
55466: PUSH
55467: LD_INT 2
55469: NEG
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 1
55477: PUSH
55478: LD_INT 1
55480: NEG
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 2
55488: NEG
55489: PUSH
55490: LD_INT 1
55492: NEG
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 2
55500: NEG
55501: PUSH
55502: LD_INT 2
55504: NEG
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55524: LD_ADDR_VAR 0 48
55528: PUSH
55529: LD_INT 0
55531: PUSH
55532: LD_INT 0
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 0
55541: PUSH
55542: LD_INT 1
55544: NEG
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 1
55552: PUSH
55553: LD_INT 0
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 1
55562: PUSH
55563: LD_INT 1
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 0
55572: PUSH
55573: LD_INT 1
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 1
55582: NEG
55583: PUSH
55584: LD_INT 0
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 1
55593: NEG
55594: PUSH
55595: LD_INT 1
55597: NEG
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 1
55605: NEG
55606: PUSH
55607: LD_INT 2
55609: NEG
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 0
55617: PUSH
55618: LD_INT 2
55620: NEG
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 1
55628: PUSH
55629: LD_INT 1
55631: NEG
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 2
55639: PUSH
55640: LD_INT 0
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 2
55649: PUSH
55650: LD_INT 1
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55671: LD_ADDR_VAR 0 49
55675: PUSH
55676: LD_INT 0
55678: PUSH
55679: LD_INT 0
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 0
55688: PUSH
55689: LD_INT 1
55691: NEG
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 1
55699: PUSH
55700: LD_INT 0
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 1
55709: PUSH
55710: LD_INT 1
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 0
55719: PUSH
55720: LD_INT 1
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 1
55729: NEG
55730: PUSH
55731: LD_INT 0
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 1
55740: NEG
55741: PUSH
55742: LD_INT 1
55744: NEG
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 1
55752: PUSH
55753: LD_INT 1
55755: NEG
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 2
55763: PUSH
55764: LD_INT 0
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 2
55773: PUSH
55774: LD_INT 1
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 2
55783: PUSH
55784: LD_INT 2
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 1
55793: PUSH
55794: LD_INT 2
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55815: LD_ADDR_VAR 0 50
55819: PUSH
55820: LD_INT 0
55822: PUSH
55823: LD_INT 0
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 0
55832: PUSH
55833: LD_INT 1
55835: NEG
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 1
55843: PUSH
55844: LD_INT 0
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 1
55853: PUSH
55854: LD_INT 1
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 0
55863: PUSH
55864: LD_INT 1
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 1
55873: NEG
55874: PUSH
55875: LD_INT 0
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 1
55884: NEG
55885: PUSH
55886: LD_INT 1
55888: NEG
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 2
55896: PUSH
55897: LD_INT 1
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 2
55906: PUSH
55907: LD_INT 2
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 1
55916: PUSH
55917: LD_INT 2
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 0
55926: PUSH
55927: LD_INT 2
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 1
55936: NEG
55937: PUSH
55938: LD_INT 1
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55959: LD_ADDR_VAR 0 51
55963: PUSH
55964: LD_INT 0
55966: PUSH
55967: LD_INT 0
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 0
55976: PUSH
55977: LD_INT 1
55979: NEG
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 1
55987: PUSH
55988: LD_INT 0
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 1
55997: PUSH
55998: LD_INT 1
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 0
56007: PUSH
56008: LD_INT 1
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 1
56017: NEG
56018: PUSH
56019: LD_INT 0
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 1
56028: NEG
56029: PUSH
56030: LD_INT 1
56032: NEG
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 1
56040: PUSH
56041: LD_INT 2
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 0
56050: PUSH
56051: LD_INT 2
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 1
56060: NEG
56061: PUSH
56062: LD_INT 1
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 2
56071: NEG
56072: PUSH
56073: LD_INT 0
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 2
56082: NEG
56083: PUSH
56084: LD_INT 1
56086: NEG
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56106: LD_ADDR_VAR 0 52
56110: PUSH
56111: LD_INT 0
56113: PUSH
56114: LD_INT 0
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 0
56123: PUSH
56124: LD_INT 1
56126: NEG
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 1
56134: PUSH
56135: LD_INT 0
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 1
56144: PUSH
56145: LD_INT 1
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 0
56154: PUSH
56155: LD_INT 1
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 1
56164: NEG
56165: PUSH
56166: LD_INT 0
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 1
56175: NEG
56176: PUSH
56177: LD_INT 1
56179: NEG
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 1
56187: NEG
56188: PUSH
56189: LD_INT 2
56191: NEG
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 1
56199: NEG
56200: PUSH
56201: LD_INT 1
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 2
56210: NEG
56211: PUSH
56212: LD_INT 0
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 2
56221: NEG
56222: PUSH
56223: LD_INT 1
56225: NEG
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 2
56233: NEG
56234: PUSH
56235: LD_INT 2
56237: NEG
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56257: LD_ADDR_VAR 0 53
56261: PUSH
56262: LD_INT 0
56264: PUSH
56265: LD_INT 0
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 0
56274: PUSH
56275: LD_INT 1
56277: NEG
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 1
56285: PUSH
56286: LD_INT 0
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 1
56295: PUSH
56296: LD_INT 1
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 0
56305: PUSH
56306: LD_INT 1
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 1
56315: NEG
56316: PUSH
56317: LD_INT 0
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 1
56326: NEG
56327: PUSH
56328: LD_INT 1
56330: NEG
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 1
56338: NEG
56339: PUSH
56340: LD_INT 2
56342: NEG
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 0
56350: PUSH
56351: LD_INT 2
56353: NEG
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 1
56361: PUSH
56362: LD_INT 1
56364: NEG
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 2
56372: PUSH
56373: LD_INT 0
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 2
56382: PUSH
56383: LD_INT 1
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 2
56392: PUSH
56393: LD_INT 2
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 1
56402: PUSH
56403: LD_INT 2
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 0
56412: PUSH
56413: LD_INT 2
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 1
56422: NEG
56423: PUSH
56424: LD_INT 1
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 2
56433: NEG
56434: PUSH
56435: LD_INT 0
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 2
56444: NEG
56445: PUSH
56446: LD_INT 1
56448: NEG
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 2
56456: NEG
56457: PUSH
56458: LD_INT 2
56460: NEG
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56487: LD_ADDR_VAR 0 54
56491: PUSH
56492: LD_INT 0
56494: PUSH
56495: LD_INT 0
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 0
56504: PUSH
56505: LD_INT 1
56507: NEG
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 1
56515: PUSH
56516: LD_INT 0
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 1
56525: PUSH
56526: LD_INT 1
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 0
56535: PUSH
56536: LD_INT 1
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 1
56545: NEG
56546: PUSH
56547: LD_INT 0
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 1
56556: NEG
56557: PUSH
56558: LD_INT 1
56560: NEG
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 1
56568: NEG
56569: PUSH
56570: LD_INT 2
56572: NEG
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 0
56580: PUSH
56581: LD_INT 2
56583: NEG
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 1
56591: PUSH
56592: LD_INT 1
56594: NEG
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 2
56602: PUSH
56603: LD_INT 0
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 2
56612: PUSH
56613: LD_INT 1
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 2
56622: PUSH
56623: LD_INT 2
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 1
56632: PUSH
56633: LD_INT 2
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 0
56642: PUSH
56643: LD_INT 2
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 1
56652: NEG
56653: PUSH
56654: LD_INT 1
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 2
56663: NEG
56664: PUSH
56665: LD_INT 0
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 2
56674: NEG
56675: PUSH
56676: LD_INT 1
56678: NEG
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 2
56686: NEG
56687: PUSH
56688: LD_INT 2
56690: NEG
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56717: LD_ADDR_VAR 0 55
56721: PUSH
56722: LD_INT 0
56724: PUSH
56725: LD_INT 0
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 0
56734: PUSH
56735: LD_INT 1
56737: NEG
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 1
56745: PUSH
56746: LD_INT 0
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 1
56755: PUSH
56756: LD_INT 1
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 0
56765: PUSH
56766: LD_INT 1
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 1
56775: NEG
56776: PUSH
56777: LD_INT 0
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 1
56786: NEG
56787: PUSH
56788: LD_INT 1
56790: NEG
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 1
56798: NEG
56799: PUSH
56800: LD_INT 2
56802: NEG
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 0
56810: PUSH
56811: LD_INT 2
56813: NEG
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 1
56821: PUSH
56822: LD_INT 1
56824: NEG
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 2
56832: PUSH
56833: LD_INT 0
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 2
56842: PUSH
56843: LD_INT 1
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 2
56852: PUSH
56853: LD_INT 2
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 1
56862: PUSH
56863: LD_INT 2
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 0
56872: PUSH
56873: LD_INT 2
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 1
56882: NEG
56883: PUSH
56884: LD_INT 1
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 2
56893: NEG
56894: PUSH
56895: LD_INT 0
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 2
56904: NEG
56905: PUSH
56906: LD_INT 1
56908: NEG
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 2
56916: NEG
56917: PUSH
56918: LD_INT 2
56920: NEG
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56947: LD_ADDR_VAR 0 56
56951: PUSH
56952: LD_INT 0
56954: PUSH
56955: LD_INT 0
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 0
56964: PUSH
56965: LD_INT 1
56967: NEG
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 1
56975: PUSH
56976: LD_INT 0
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 1
56985: PUSH
56986: LD_INT 1
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 0
56995: PUSH
56996: LD_INT 1
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 1
57005: NEG
57006: PUSH
57007: LD_INT 0
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 1
57016: NEG
57017: PUSH
57018: LD_INT 1
57020: NEG
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 1
57028: NEG
57029: PUSH
57030: LD_INT 2
57032: NEG
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 0
57040: PUSH
57041: LD_INT 2
57043: NEG
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 1
57051: PUSH
57052: LD_INT 1
57054: NEG
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 2
57062: PUSH
57063: LD_INT 0
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 2
57072: PUSH
57073: LD_INT 1
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 2
57082: PUSH
57083: LD_INT 2
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 1
57092: PUSH
57093: LD_INT 2
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 0
57102: PUSH
57103: LD_INT 2
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 1
57112: NEG
57113: PUSH
57114: LD_INT 1
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 2
57123: NEG
57124: PUSH
57125: LD_INT 0
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 2
57134: NEG
57135: PUSH
57136: LD_INT 1
57138: NEG
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 2
57146: NEG
57147: PUSH
57148: LD_INT 2
57150: NEG
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57177: LD_ADDR_VAR 0 57
57181: PUSH
57182: LD_INT 0
57184: PUSH
57185: LD_INT 0
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 0
57194: PUSH
57195: LD_INT 1
57197: NEG
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 1
57205: PUSH
57206: LD_INT 0
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 1
57215: PUSH
57216: LD_INT 1
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 0
57225: PUSH
57226: LD_INT 1
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 1
57235: NEG
57236: PUSH
57237: LD_INT 0
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 1
57246: NEG
57247: PUSH
57248: LD_INT 1
57250: NEG
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 1
57258: NEG
57259: PUSH
57260: LD_INT 2
57262: NEG
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 0
57270: PUSH
57271: LD_INT 2
57273: NEG
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 1
57281: PUSH
57282: LD_INT 1
57284: NEG
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 2
57292: PUSH
57293: LD_INT 0
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 2
57302: PUSH
57303: LD_INT 1
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 2
57312: PUSH
57313: LD_INT 2
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 1
57322: PUSH
57323: LD_INT 2
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 0
57332: PUSH
57333: LD_INT 2
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 1
57342: NEG
57343: PUSH
57344: LD_INT 1
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 2
57353: NEG
57354: PUSH
57355: LD_INT 0
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 2
57364: NEG
57365: PUSH
57366: LD_INT 1
57368: NEG
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 2
57376: NEG
57377: PUSH
57378: LD_INT 2
57380: NEG
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57407: LD_ADDR_VAR 0 58
57411: PUSH
57412: LD_INT 0
57414: PUSH
57415: LD_INT 0
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 0
57424: PUSH
57425: LD_INT 1
57427: NEG
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 1
57435: PUSH
57436: LD_INT 0
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 1
57445: PUSH
57446: LD_INT 1
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 0
57455: PUSH
57456: LD_INT 1
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 1
57465: NEG
57466: PUSH
57467: LD_INT 0
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 1
57476: NEG
57477: PUSH
57478: LD_INT 1
57480: NEG
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 1
57488: NEG
57489: PUSH
57490: LD_INT 2
57492: NEG
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 0
57500: PUSH
57501: LD_INT 2
57503: NEG
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 1
57511: PUSH
57512: LD_INT 1
57514: NEG
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 2
57522: PUSH
57523: LD_INT 0
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 2
57532: PUSH
57533: LD_INT 1
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 2
57542: PUSH
57543: LD_INT 2
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 1
57552: PUSH
57553: LD_INT 2
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 0
57562: PUSH
57563: LD_INT 2
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 1
57572: NEG
57573: PUSH
57574: LD_INT 1
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 2
57583: NEG
57584: PUSH
57585: LD_INT 0
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 2
57594: NEG
57595: PUSH
57596: LD_INT 1
57598: NEG
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 2
57606: NEG
57607: PUSH
57608: LD_INT 2
57610: NEG
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57637: LD_ADDR_VAR 0 59
57641: PUSH
57642: LD_INT 0
57644: PUSH
57645: LD_INT 0
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 0
57654: PUSH
57655: LD_INT 1
57657: NEG
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 1
57665: PUSH
57666: LD_INT 0
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 1
57675: PUSH
57676: LD_INT 1
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 0
57685: PUSH
57686: LD_INT 1
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 1
57695: NEG
57696: PUSH
57697: LD_INT 0
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 1
57706: NEG
57707: PUSH
57708: LD_INT 1
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57725: LD_ADDR_VAR 0 60
57729: PUSH
57730: LD_INT 0
57732: PUSH
57733: LD_INT 0
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 0
57742: PUSH
57743: LD_INT 1
57745: NEG
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 1
57753: PUSH
57754: LD_INT 0
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 1
57763: PUSH
57764: LD_INT 1
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 0
57773: PUSH
57774: LD_INT 1
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 1
57783: NEG
57784: PUSH
57785: LD_INT 0
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 1
57794: NEG
57795: PUSH
57796: LD_INT 1
57798: NEG
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57813: LD_ADDR_VAR 0 61
57817: PUSH
57818: LD_INT 0
57820: PUSH
57821: LD_INT 0
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 0
57830: PUSH
57831: LD_INT 1
57833: NEG
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 1
57841: PUSH
57842: LD_INT 0
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 1
57851: PUSH
57852: LD_INT 1
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 0
57861: PUSH
57862: LD_INT 1
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 1
57871: NEG
57872: PUSH
57873: LD_INT 0
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 1
57882: NEG
57883: PUSH
57884: LD_INT 1
57886: NEG
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57901: LD_ADDR_VAR 0 62
57905: PUSH
57906: LD_INT 0
57908: PUSH
57909: LD_INT 0
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 0
57918: PUSH
57919: LD_INT 1
57921: NEG
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 1
57929: PUSH
57930: LD_INT 0
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 1
57939: PUSH
57940: LD_INT 1
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 0
57949: PUSH
57950: LD_INT 1
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 1
57959: NEG
57960: PUSH
57961: LD_INT 0
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 1
57970: NEG
57971: PUSH
57972: LD_INT 1
57974: NEG
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57989: LD_ADDR_VAR 0 63
57993: PUSH
57994: LD_INT 0
57996: PUSH
57997: LD_INT 0
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 0
58006: PUSH
58007: LD_INT 1
58009: NEG
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 1
58017: PUSH
58018: LD_INT 0
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 1
58027: PUSH
58028: LD_INT 1
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 0
58037: PUSH
58038: LD_INT 1
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 1
58047: NEG
58048: PUSH
58049: LD_INT 0
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 1
58058: NEG
58059: PUSH
58060: LD_INT 1
58062: NEG
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58077: LD_ADDR_VAR 0 64
58081: PUSH
58082: LD_INT 0
58084: PUSH
58085: LD_INT 0
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 0
58094: PUSH
58095: LD_INT 1
58097: NEG
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 1
58105: PUSH
58106: LD_INT 0
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 1
58115: PUSH
58116: LD_INT 1
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 0
58125: PUSH
58126: LD_INT 1
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 1
58135: NEG
58136: PUSH
58137: LD_INT 0
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 1
58146: NEG
58147: PUSH
58148: LD_INT 1
58150: NEG
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: ST_TO_ADDR
// end ; 1 :
58165: GO 64062
58167: LD_INT 1
58169: DOUBLE
58170: EQUAL
58171: IFTRUE 58175
58173: GO 60798
58175: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58176: LD_ADDR_VAR 0 11
58180: PUSH
58181: LD_INT 1
58183: NEG
58184: PUSH
58185: LD_INT 3
58187: NEG
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 0
58195: PUSH
58196: LD_INT 3
58198: NEG
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 1
58206: PUSH
58207: LD_INT 2
58209: NEG
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: LIST
58219: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58220: LD_ADDR_VAR 0 12
58224: PUSH
58225: LD_INT 2
58227: PUSH
58228: LD_INT 1
58230: NEG
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 3
58238: PUSH
58239: LD_INT 0
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 3
58248: PUSH
58249: LD_INT 1
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: LIST
58260: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58261: LD_ADDR_VAR 0 13
58265: PUSH
58266: LD_INT 3
58268: PUSH
58269: LD_INT 2
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 3
58278: PUSH
58279: LD_INT 3
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 2
58288: PUSH
58289: LD_INT 3
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: LIST
58300: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58301: LD_ADDR_VAR 0 14
58305: PUSH
58306: LD_INT 1
58308: PUSH
58309: LD_INT 3
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 0
58318: PUSH
58319: LD_INT 3
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 1
58328: NEG
58329: PUSH
58330: LD_INT 2
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: LIST
58341: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58342: LD_ADDR_VAR 0 15
58346: PUSH
58347: LD_INT 2
58349: NEG
58350: PUSH
58351: LD_INT 1
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 3
58360: NEG
58361: PUSH
58362: LD_INT 0
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 3
58371: NEG
58372: PUSH
58373: LD_INT 1
58375: NEG
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: LIST
58385: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58386: LD_ADDR_VAR 0 16
58390: PUSH
58391: LD_INT 2
58393: NEG
58394: PUSH
58395: LD_INT 3
58397: NEG
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 3
58405: NEG
58406: PUSH
58407: LD_INT 2
58409: NEG
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 3
58417: NEG
58418: PUSH
58419: LD_INT 3
58421: NEG
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: LIST
58431: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58432: LD_ADDR_VAR 0 17
58436: PUSH
58437: LD_INT 1
58439: NEG
58440: PUSH
58441: LD_INT 3
58443: NEG
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 0
58451: PUSH
58452: LD_INT 3
58454: NEG
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 1
58462: PUSH
58463: LD_INT 2
58465: NEG
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: LIST
58475: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58476: LD_ADDR_VAR 0 18
58480: PUSH
58481: LD_INT 2
58483: PUSH
58484: LD_INT 1
58486: NEG
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 3
58494: PUSH
58495: LD_INT 0
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 3
58504: PUSH
58505: LD_INT 1
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: LIST
58516: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58517: LD_ADDR_VAR 0 19
58521: PUSH
58522: LD_INT 3
58524: PUSH
58525: LD_INT 2
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 3
58534: PUSH
58535: LD_INT 3
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 2
58544: PUSH
58545: LD_INT 3
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: LIST
58556: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58557: LD_ADDR_VAR 0 20
58561: PUSH
58562: LD_INT 1
58564: PUSH
58565: LD_INT 3
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 0
58574: PUSH
58575: LD_INT 3
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 1
58584: NEG
58585: PUSH
58586: LD_INT 2
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: LIST
58597: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58598: LD_ADDR_VAR 0 21
58602: PUSH
58603: LD_INT 2
58605: NEG
58606: PUSH
58607: LD_INT 1
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 3
58616: NEG
58617: PUSH
58618: LD_INT 0
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 3
58627: NEG
58628: PUSH
58629: LD_INT 1
58631: NEG
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: LIST
58641: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58642: LD_ADDR_VAR 0 22
58646: PUSH
58647: LD_INT 2
58649: NEG
58650: PUSH
58651: LD_INT 3
58653: NEG
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 3
58661: NEG
58662: PUSH
58663: LD_INT 2
58665: NEG
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 3
58673: NEG
58674: PUSH
58675: LD_INT 3
58677: NEG
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: LIST
58687: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58688: LD_ADDR_VAR 0 23
58692: PUSH
58693: LD_INT 0
58695: PUSH
58696: LD_INT 3
58698: NEG
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 1
58706: NEG
58707: PUSH
58708: LD_INT 4
58710: NEG
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 1
58718: PUSH
58719: LD_INT 3
58721: NEG
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: LIST
58731: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58732: LD_ADDR_VAR 0 24
58736: PUSH
58737: LD_INT 3
58739: PUSH
58740: LD_INT 0
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 3
58749: PUSH
58750: LD_INT 1
58752: NEG
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 4
58760: PUSH
58761: LD_INT 1
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: LIST
58772: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58773: LD_ADDR_VAR 0 25
58777: PUSH
58778: LD_INT 3
58780: PUSH
58781: LD_INT 3
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 4
58790: PUSH
58791: LD_INT 3
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 3
58800: PUSH
58801: LD_INT 4
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: LIST
58812: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58813: LD_ADDR_VAR 0 26
58817: PUSH
58818: LD_INT 0
58820: PUSH
58821: LD_INT 3
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 1
58830: PUSH
58831: LD_INT 4
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 1
58840: NEG
58841: PUSH
58842: LD_INT 3
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: LIST
58853: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58854: LD_ADDR_VAR 0 27
58858: PUSH
58859: LD_INT 3
58861: NEG
58862: PUSH
58863: LD_INT 0
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 3
58872: NEG
58873: PUSH
58874: LD_INT 1
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 4
58883: NEG
58884: PUSH
58885: LD_INT 1
58887: NEG
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: LIST
58897: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58898: LD_ADDR_VAR 0 28
58902: PUSH
58903: LD_INT 3
58905: NEG
58906: PUSH
58907: LD_INT 3
58909: NEG
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 3
58917: NEG
58918: PUSH
58919: LD_INT 4
58921: NEG
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 4
58929: NEG
58930: PUSH
58931: LD_INT 3
58933: NEG
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: LIST
58943: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58944: LD_ADDR_VAR 0 29
58948: PUSH
58949: LD_INT 1
58951: NEG
58952: PUSH
58953: LD_INT 3
58955: NEG
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 0
58963: PUSH
58964: LD_INT 3
58966: NEG
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 1
58974: PUSH
58975: LD_INT 2
58977: NEG
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 1
58985: NEG
58986: PUSH
58987: LD_INT 4
58989: NEG
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 0
58997: PUSH
58998: LD_INT 4
59000: NEG
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 1
59008: PUSH
59009: LD_INT 3
59011: NEG
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 1
59019: NEG
59020: PUSH
59021: LD_INT 5
59023: NEG
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 0
59031: PUSH
59032: LD_INT 5
59034: NEG
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 1
59042: PUSH
59043: LD_INT 4
59045: NEG
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 1
59053: NEG
59054: PUSH
59055: LD_INT 6
59057: NEG
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 0
59065: PUSH
59066: LD_INT 6
59068: NEG
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 1
59076: PUSH
59077: LD_INT 5
59079: NEG
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59099: LD_ADDR_VAR 0 30
59103: PUSH
59104: LD_INT 2
59106: PUSH
59107: LD_INT 1
59109: NEG
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 3
59117: PUSH
59118: LD_INT 0
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 3
59127: PUSH
59128: LD_INT 1
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 3
59137: PUSH
59138: LD_INT 1
59140: NEG
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 4
59148: PUSH
59149: LD_INT 0
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 4
59158: PUSH
59159: LD_INT 1
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 4
59168: PUSH
59169: LD_INT 1
59171: NEG
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 5
59179: PUSH
59180: LD_INT 0
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 5
59189: PUSH
59190: LD_INT 1
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 5
59199: PUSH
59200: LD_INT 1
59202: NEG
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 6
59210: PUSH
59211: LD_INT 0
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 6
59220: PUSH
59221: LD_INT 1
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59242: LD_ADDR_VAR 0 31
59246: PUSH
59247: LD_INT 3
59249: PUSH
59250: LD_INT 2
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 3
59259: PUSH
59260: LD_INT 3
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 2
59269: PUSH
59270: LD_INT 3
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 4
59279: PUSH
59280: LD_INT 3
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 4
59289: PUSH
59290: LD_INT 4
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 3
59299: PUSH
59300: LD_INT 4
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 5
59309: PUSH
59310: LD_INT 4
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 5
59319: PUSH
59320: LD_INT 5
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 4
59329: PUSH
59330: LD_INT 5
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 6
59339: PUSH
59340: LD_INT 5
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 6
59349: PUSH
59350: LD_INT 6
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 5
59359: PUSH
59360: LD_INT 6
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59381: LD_ADDR_VAR 0 32
59385: PUSH
59386: LD_INT 1
59388: PUSH
59389: LD_INT 3
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 0
59398: PUSH
59399: LD_INT 3
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 1
59408: NEG
59409: PUSH
59410: LD_INT 2
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 1
59419: PUSH
59420: LD_INT 4
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 0
59429: PUSH
59430: LD_INT 4
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 1
59439: NEG
59440: PUSH
59441: LD_INT 3
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 1
59450: PUSH
59451: LD_INT 5
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 0
59460: PUSH
59461: LD_INT 5
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 1
59470: NEG
59471: PUSH
59472: LD_INT 4
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 1
59481: PUSH
59482: LD_INT 6
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 0
59491: PUSH
59492: LD_INT 6
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 1
59501: NEG
59502: PUSH
59503: LD_INT 5
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59524: LD_ADDR_VAR 0 33
59528: PUSH
59529: LD_INT 2
59531: NEG
59532: PUSH
59533: LD_INT 1
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 3
59542: NEG
59543: PUSH
59544: LD_INT 0
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 3
59553: NEG
59554: PUSH
59555: LD_INT 1
59557: NEG
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 3
59565: NEG
59566: PUSH
59567: LD_INT 1
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 4
59576: NEG
59577: PUSH
59578: LD_INT 0
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 4
59587: NEG
59588: PUSH
59589: LD_INT 1
59591: NEG
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 4
59599: NEG
59600: PUSH
59601: LD_INT 1
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 5
59610: NEG
59611: PUSH
59612: LD_INT 0
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 5
59621: NEG
59622: PUSH
59623: LD_INT 1
59625: NEG
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 5
59633: NEG
59634: PUSH
59635: LD_INT 1
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 6
59644: NEG
59645: PUSH
59646: LD_INT 0
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 6
59655: NEG
59656: PUSH
59657: LD_INT 1
59659: NEG
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59679: LD_ADDR_VAR 0 34
59683: PUSH
59684: LD_INT 2
59686: NEG
59687: PUSH
59688: LD_INT 3
59690: NEG
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 3
59698: NEG
59699: PUSH
59700: LD_INT 2
59702: NEG
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 3
59710: NEG
59711: PUSH
59712: LD_INT 3
59714: NEG
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 3
59722: NEG
59723: PUSH
59724: LD_INT 4
59726: NEG
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 4
59734: NEG
59735: PUSH
59736: LD_INT 3
59738: NEG
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 4
59746: NEG
59747: PUSH
59748: LD_INT 4
59750: NEG
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 4
59758: NEG
59759: PUSH
59760: LD_INT 5
59762: NEG
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 5
59770: NEG
59771: PUSH
59772: LD_INT 4
59774: NEG
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 5
59782: NEG
59783: PUSH
59784: LD_INT 5
59786: NEG
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 5
59794: NEG
59795: PUSH
59796: LD_INT 6
59798: NEG
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 6
59806: NEG
59807: PUSH
59808: LD_INT 5
59810: NEG
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 6
59818: NEG
59819: PUSH
59820: LD_INT 6
59822: NEG
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59842: LD_ADDR_VAR 0 41
59846: PUSH
59847: LD_INT 0
59849: PUSH
59850: LD_INT 2
59852: NEG
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 1
59860: NEG
59861: PUSH
59862: LD_INT 3
59864: NEG
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 1
59872: PUSH
59873: LD_INT 2
59875: NEG
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: LIST
59885: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59886: LD_ADDR_VAR 0 42
59890: PUSH
59891: LD_INT 2
59893: PUSH
59894: LD_INT 0
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 2
59903: PUSH
59904: LD_INT 1
59906: NEG
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 3
59914: PUSH
59915: LD_INT 1
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: LIST
59926: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59927: LD_ADDR_VAR 0 43
59931: PUSH
59932: LD_INT 2
59934: PUSH
59935: LD_INT 2
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 3
59944: PUSH
59945: LD_INT 2
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 2
59954: PUSH
59955: LD_INT 3
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: LIST
59966: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59967: LD_ADDR_VAR 0 44
59971: PUSH
59972: LD_INT 0
59974: PUSH
59975: LD_INT 2
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 1
59984: PUSH
59985: LD_INT 3
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 1
59994: NEG
59995: PUSH
59996: LD_INT 2
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: LIST
60007: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60008: LD_ADDR_VAR 0 45
60012: PUSH
60013: LD_INT 2
60015: NEG
60016: PUSH
60017: LD_INT 0
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 2
60026: NEG
60027: PUSH
60028: LD_INT 1
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 3
60037: NEG
60038: PUSH
60039: LD_INT 1
60041: NEG
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: LIST
60051: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
60052: LD_ADDR_VAR 0 46
60056: PUSH
60057: LD_INT 2
60059: NEG
60060: PUSH
60061: LD_INT 2
60063: NEG
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 2
60071: NEG
60072: PUSH
60073: LD_INT 3
60075: NEG
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 3
60083: NEG
60084: PUSH
60085: LD_INT 2
60087: NEG
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: LIST
60097: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60098: LD_ADDR_VAR 0 47
60102: PUSH
60103: LD_INT 2
60105: NEG
60106: PUSH
60107: LD_INT 3
60109: NEG
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 1
60117: NEG
60118: PUSH
60119: LD_INT 3
60121: NEG
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60131: LD_ADDR_VAR 0 48
60135: PUSH
60136: LD_INT 1
60138: PUSH
60139: LD_INT 2
60141: NEG
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 2
60149: PUSH
60150: LD_INT 1
60152: NEG
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60162: LD_ADDR_VAR 0 49
60166: PUSH
60167: LD_INT 3
60169: PUSH
60170: LD_INT 1
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 3
60179: PUSH
60180: LD_INT 2
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60191: LD_ADDR_VAR 0 50
60195: PUSH
60196: LD_INT 2
60198: PUSH
60199: LD_INT 3
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 1
60208: PUSH
60209: LD_INT 3
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60220: LD_ADDR_VAR 0 51
60224: PUSH
60225: LD_INT 1
60227: NEG
60228: PUSH
60229: LD_INT 2
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 2
60238: NEG
60239: PUSH
60240: LD_INT 1
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60251: LD_ADDR_VAR 0 52
60255: PUSH
60256: LD_INT 3
60258: NEG
60259: PUSH
60260: LD_INT 1
60262: NEG
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 3
60270: NEG
60271: PUSH
60272: LD_INT 2
60274: NEG
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60284: LD_ADDR_VAR 0 53
60288: PUSH
60289: LD_INT 1
60291: NEG
60292: PUSH
60293: LD_INT 3
60295: NEG
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 0
60303: PUSH
60304: LD_INT 3
60306: NEG
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 1
60314: PUSH
60315: LD_INT 2
60317: NEG
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: LIST
60327: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60328: LD_ADDR_VAR 0 54
60332: PUSH
60333: LD_INT 2
60335: PUSH
60336: LD_INT 1
60338: NEG
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 3
60346: PUSH
60347: LD_INT 0
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 3
60356: PUSH
60357: LD_INT 1
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: LIST
60368: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60369: LD_ADDR_VAR 0 55
60373: PUSH
60374: LD_INT 3
60376: PUSH
60377: LD_INT 2
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 3
60386: PUSH
60387: LD_INT 3
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 2
60396: PUSH
60397: LD_INT 3
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: LIST
60408: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60409: LD_ADDR_VAR 0 56
60413: PUSH
60414: LD_INT 1
60416: PUSH
60417: LD_INT 3
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 0
60426: PUSH
60427: LD_INT 3
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 1
60436: NEG
60437: PUSH
60438: LD_INT 2
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: LIST
60449: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60450: LD_ADDR_VAR 0 57
60454: PUSH
60455: LD_INT 2
60457: NEG
60458: PUSH
60459: LD_INT 1
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 3
60468: NEG
60469: PUSH
60470: LD_INT 0
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 3
60479: NEG
60480: PUSH
60481: LD_INT 1
60483: NEG
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: LIST
60493: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60494: LD_ADDR_VAR 0 58
60498: PUSH
60499: LD_INT 2
60501: NEG
60502: PUSH
60503: LD_INT 3
60505: NEG
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 3
60513: NEG
60514: PUSH
60515: LD_INT 2
60517: NEG
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 3
60525: NEG
60526: PUSH
60527: LD_INT 3
60529: NEG
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: LIST
60539: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60540: LD_ADDR_VAR 0 59
60544: PUSH
60545: LD_INT 1
60547: NEG
60548: PUSH
60549: LD_INT 2
60551: NEG
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 0
60559: PUSH
60560: LD_INT 2
60562: NEG
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 1
60570: PUSH
60571: LD_INT 1
60573: NEG
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: LIST
60583: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60584: LD_ADDR_VAR 0 60
60588: PUSH
60589: LD_INT 1
60591: PUSH
60592: LD_INT 1
60594: NEG
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 2
60602: PUSH
60603: LD_INT 0
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 2
60612: PUSH
60613: LD_INT 1
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: LIST
60624: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60625: LD_ADDR_VAR 0 61
60629: PUSH
60630: LD_INT 2
60632: PUSH
60633: LD_INT 1
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 2
60642: PUSH
60643: LD_INT 2
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 1
60652: PUSH
60653: LD_INT 2
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: LIST
60664: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60665: LD_ADDR_VAR 0 62
60669: PUSH
60670: LD_INT 1
60672: PUSH
60673: LD_INT 2
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 0
60682: PUSH
60683: LD_INT 2
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 1
60692: NEG
60693: PUSH
60694: LD_INT 1
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: LIST
60705: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60706: LD_ADDR_VAR 0 63
60710: PUSH
60711: LD_INT 1
60713: NEG
60714: PUSH
60715: LD_INT 1
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 2
60724: NEG
60725: PUSH
60726: LD_INT 0
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 2
60735: NEG
60736: PUSH
60737: LD_INT 1
60739: NEG
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: LIST
60749: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60750: LD_ADDR_VAR 0 64
60754: PUSH
60755: LD_INT 1
60757: NEG
60758: PUSH
60759: LD_INT 2
60761: NEG
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 2
60769: NEG
60770: PUSH
60771: LD_INT 1
60773: NEG
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 2
60781: NEG
60782: PUSH
60783: LD_INT 2
60785: NEG
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: LIST
60795: ST_TO_ADDR
// end ; 2 :
60796: GO 64062
60798: LD_INT 2
60800: DOUBLE
60801: EQUAL
60802: IFTRUE 60806
60804: GO 64061
60806: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60807: LD_ADDR_VAR 0 29
60811: PUSH
60812: LD_INT 4
60814: PUSH
60815: LD_INT 0
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 4
60824: PUSH
60825: LD_INT 1
60827: NEG
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 5
60835: PUSH
60836: LD_INT 0
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 5
60845: PUSH
60846: LD_INT 1
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 4
60855: PUSH
60856: LD_INT 1
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 3
60865: PUSH
60866: LD_INT 0
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 3
60875: PUSH
60876: LD_INT 1
60878: NEG
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 3
60886: PUSH
60887: LD_INT 2
60889: NEG
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 5
60897: PUSH
60898: LD_INT 2
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 3
60907: PUSH
60908: LD_INT 3
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 3
60917: PUSH
60918: LD_INT 2
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 4
60927: PUSH
60928: LD_INT 3
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 4
60937: PUSH
60938: LD_INT 4
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 3
60947: PUSH
60948: LD_INT 4
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 2
60957: PUSH
60958: LD_INT 3
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 2
60967: PUSH
60968: LD_INT 2
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 4
60977: PUSH
60978: LD_INT 2
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 2
60987: PUSH
60988: LD_INT 4
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 0
60997: PUSH
60998: LD_INT 4
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 0
61007: PUSH
61008: LD_INT 3
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 1
61017: PUSH
61018: LD_INT 4
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 1
61027: PUSH
61028: LD_INT 5
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 0
61037: PUSH
61038: LD_INT 5
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 1
61047: NEG
61048: PUSH
61049: LD_INT 4
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 1
61058: NEG
61059: PUSH
61060: LD_INT 3
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 2
61069: PUSH
61070: LD_INT 5
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 2
61079: NEG
61080: PUSH
61081: LD_INT 3
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 3
61090: NEG
61091: PUSH
61092: LD_INT 0
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 3
61101: NEG
61102: PUSH
61103: LD_INT 1
61105: NEG
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 2
61113: NEG
61114: PUSH
61115: LD_INT 0
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 2
61124: NEG
61125: PUSH
61126: LD_INT 1
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 3
61135: NEG
61136: PUSH
61137: LD_INT 1
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 4
61146: NEG
61147: PUSH
61148: LD_INT 0
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 4
61157: NEG
61158: PUSH
61159: LD_INT 1
61161: NEG
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 4
61169: NEG
61170: PUSH
61171: LD_INT 2
61173: NEG
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 2
61181: NEG
61182: PUSH
61183: LD_INT 2
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 4
61192: NEG
61193: PUSH
61194: LD_INT 4
61196: NEG
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 4
61204: NEG
61205: PUSH
61206: LD_INT 5
61208: NEG
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 3
61216: NEG
61217: PUSH
61218: LD_INT 4
61220: NEG
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 3
61228: NEG
61229: PUSH
61230: LD_INT 3
61232: NEG
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 4
61240: NEG
61241: PUSH
61242: LD_INT 3
61244: NEG
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 5
61252: NEG
61253: PUSH
61254: LD_INT 4
61256: NEG
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 5
61264: NEG
61265: PUSH
61266: LD_INT 5
61268: NEG
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 3
61276: NEG
61277: PUSH
61278: LD_INT 5
61280: NEG
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 5
61288: NEG
61289: PUSH
61290: LD_INT 3
61292: NEG
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61345: LD_ADDR_VAR 0 30
61349: PUSH
61350: LD_INT 4
61352: PUSH
61353: LD_INT 4
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: LD_INT 4
61362: PUSH
61363: LD_INT 3
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 5
61372: PUSH
61373: LD_INT 4
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 5
61382: PUSH
61383: LD_INT 5
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 4
61392: PUSH
61393: LD_INT 5
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 3
61402: PUSH
61403: LD_INT 4
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 3
61412: PUSH
61413: LD_INT 3
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 5
61422: PUSH
61423: LD_INT 3
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 3
61432: PUSH
61433: LD_INT 5
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 0
61442: PUSH
61443: LD_INT 3
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 0
61452: PUSH
61453: LD_INT 2
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 1
61462: PUSH
61463: LD_INT 3
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 1
61472: PUSH
61473: LD_INT 4
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 0
61482: PUSH
61483: LD_INT 4
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 1
61492: NEG
61493: PUSH
61494: LD_INT 3
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 1
61503: NEG
61504: PUSH
61505: LD_INT 2
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 2
61514: PUSH
61515: LD_INT 4
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 2
61524: NEG
61525: PUSH
61526: LD_INT 2
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 4
61535: NEG
61536: PUSH
61537: LD_INT 0
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 4
61546: NEG
61547: PUSH
61548: LD_INT 1
61550: NEG
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 3
61558: NEG
61559: PUSH
61560: LD_INT 0
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 3
61569: NEG
61570: PUSH
61571: LD_INT 1
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 4
61580: NEG
61581: PUSH
61582: LD_INT 1
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 5
61591: NEG
61592: PUSH
61593: LD_INT 0
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 5
61602: NEG
61603: PUSH
61604: LD_INT 1
61606: NEG
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 5
61614: NEG
61615: PUSH
61616: LD_INT 2
61618: NEG
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 3
61626: NEG
61627: PUSH
61628: LD_INT 2
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 3
61637: NEG
61638: PUSH
61639: LD_INT 3
61641: NEG
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 3
61649: NEG
61650: PUSH
61651: LD_INT 4
61653: NEG
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 2
61661: NEG
61662: PUSH
61663: LD_INT 3
61665: NEG
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 2
61673: NEG
61674: PUSH
61675: LD_INT 2
61677: NEG
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 3
61685: NEG
61686: PUSH
61687: LD_INT 2
61689: NEG
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 4
61697: NEG
61698: PUSH
61699: LD_INT 3
61701: NEG
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 4
61709: NEG
61710: PUSH
61711: LD_INT 4
61713: NEG
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 2
61721: NEG
61722: PUSH
61723: LD_INT 4
61725: NEG
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 4
61733: NEG
61734: PUSH
61735: LD_INT 2
61737: NEG
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 0
61745: PUSH
61746: LD_INT 4
61748: NEG
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 0
61756: PUSH
61757: LD_INT 5
61759: NEG
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: LD_INT 1
61767: PUSH
61768: LD_INT 4
61770: NEG
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: LD_INT 1
61778: PUSH
61779: LD_INT 3
61781: NEG
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 0
61789: PUSH
61790: LD_INT 3
61792: NEG
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 1
61800: NEG
61801: PUSH
61802: LD_INT 4
61804: NEG
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 1
61812: NEG
61813: PUSH
61814: LD_INT 5
61816: NEG
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 2
61824: PUSH
61825: LD_INT 3
61827: NEG
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 2
61835: NEG
61836: PUSH
61837: LD_INT 5
61839: NEG
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61892: LD_ADDR_VAR 0 31
61896: PUSH
61897: LD_INT 0
61899: PUSH
61900: LD_INT 4
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 0
61909: PUSH
61910: LD_INT 3
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 1
61919: PUSH
61920: LD_INT 4
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 1
61929: PUSH
61930: LD_INT 5
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 0
61939: PUSH
61940: LD_INT 5
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 1
61949: NEG
61950: PUSH
61951: LD_INT 4
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 1
61960: NEG
61961: PUSH
61962: LD_INT 3
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 2
61971: PUSH
61972: LD_INT 5
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 2
61981: NEG
61982: PUSH
61983: LD_INT 3
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 3
61992: NEG
61993: PUSH
61994: LD_INT 0
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 3
62003: NEG
62004: PUSH
62005: LD_INT 1
62007: NEG
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 2
62015: NEG
62016: PUSH
62017: LD_INT 0
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 2
62026: NEG
62027: PUSH
62028: LD_INT 1
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 3
62037: NEG
62038: PUSH
62039: LD_INT 1
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 4
62048: NEG
62049: PUSH
62050: LD_INT 0
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 4
62059: NEG
62060: PUSH
62061: LD_INT 1
62063: NEG
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 4
62071: NEG
62072: PUSH
62073: LD_INT 2
62075: NEG
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 2
62083: NEG
62084: PUSH
62085: LD_INT 2
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 4
62094: NEG
62095: PUSH
62096: LD_INT 4
62098: NEG
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 4
62106: NEG
62107: PUSH
62108: LD_INT 5
62110: NEG
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: LD_INT 3
62118: NEG
62119: PUSH
62120: LD_INT 4
62122: NEG
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 3
62130: NEG
62131: PUSH
62132: LD_INT 3
62134: NEG
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 4
62142: NEG
62143: PUSH
62144: LD_INT 3
62146: NEG
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 5
62154: NEG
62155: PUSH
62156: LD_INT 4
62158: NEG
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 5
62166: NEG
62167: PUSH
62168: LD_INT 5
62170: NEG
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: LD_INT 3
62178: NEG
62179: PUSH
62180: LD_INT 5
62182: NEG
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 5
62190: NEG
62191: PUSH
62192: LD_INT 3
62194: NEG
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 0
62202: PUSH
62203: LD_INT 3
62205: NEG
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 0
62213: PUSH
62214: LD_INT 4
62216: NEG
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 1
62224: PUSH
62225: LD_INT 3
62227: NEG
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 1
62235: PUSH
62236: LD_INT 2
62238: NEG
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PUSH
62244: LD_INT 0
62246: PUSH
62247: LD_INT 2
62249: NEG
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: LD_INT 1
62257: NEG
62258: PUSH
62259: LD_INT 3
62261: NEG
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 1
62269: NEG
62270: PUSH
62271: LD_INT 4
62273: NEG
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 2
62281: PUSH
62282: LD_INT 2
62284: NEG
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 2
62292: NEG
62293: PUSH
62294: LD_INT 4
62296: NEG
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 4
62304: PUSH
62305: LD_INT 0
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 4
62314: PUSH
62315: LD_INT 1
62317: NEG
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 5
62325: PUSH
62326: LD_INT 0
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 5
62335: PUSH
62336: LD_INT 1
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 4
62345: PUSH
62346: LD_INT 1
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 3
62355: PUSH
62356: LD_INT 0
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: LD_INT 3
62365: PUSH
62366: LD_INT 1
62368: NEG
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: LD_INT 3
62376: PUSH
62377: LD_INT 2
62379: NEG
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 5
62387: PUSH
62388: LD_INT 2
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: LIST
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: LIST
62418: LIST
62419: LIST
62420: LIST
62421: LIST
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: LIST
62429: LIST
62430: LIST
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62442: LD_ADDR_VAR 0 32
62446: PUSH
62447: LD_INT 4
62449: NEG
62450: PUSH
62451: LD_INT 0
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 4
62460: NEG
62461: PUSH
62462: LD_INT 1
62464: NEG
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 3
62472: NEG
62473: PUSH
62474: LD_INT 0
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 3
62483: NEG
62484: PUSH
62485: LD_INT 1
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 4
62494: NEG
62495: PUSH
62496: LD_INT 1
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: LD_INT 5
62505: NEG
62506: PUSH
62507: LD_INT 0
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: LD_INT 5
62516: NEG
62517: PUSH
62518: LD_INT 1
62520: NEG
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 5
62528: NEG
62529: PUSH
62530: LD_INT 2
62532: NEG
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 3
62540: NEG
62541: PUSH
62542: LD_INT 2
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 3
62551: NEG
62552: PUSH
62553: LD_INT 3
62555: NEG
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 3
62563: NEG
62564: PUSH
62565: LD_INT 4
62567: NEG
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 2
62575: NEG
62576: PUSH
62577: LD_INT 3
62579: NEG
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: LD_INT 2
62587: NEG
62588: PUSH
62589: LD_INT 2
62591: NEG
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 3
62599: NEG
62600: PUSH
62601: LD_INT 2
62603: NEG
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: PUSH
62609: LD_INT 4
62611: NEG
62612: PUSH
62613: LD_INT 3
62615: NEG
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 4
62623: NEG
62624: PUSH
62625: LD_INT 4
62627: NEG
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: LD_INT 2
62635: NEG
62636: PUSH
62637: LD_INT 4
62639: NEG
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: PUSH
62645: LD_INT 4
62647: NEG
62648: PUSH
62649: LD_INT 2
62651: NEG
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 0
62659: PUSH
62660: LD_INT 4
62662: NEG
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 0
62670: PUSH
62671: LD_INT 5
62673: NEG
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 1
62681: PUSH
62682: LD_INT 4
62684: NEG
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: LD_INT 1
62692: PUSH
62693: LD_INT 3
62695: NEG
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PUSH
62701: LD_INT 0
62703: PUSH
62704: LD_INT 3
62706: NEG
62707: PUSH
62708: EMPTY
62709: LIST
62710: LIST
62711: PUSH
62712: LD_INT 1
62714: NEG
62715: PUSH
62716: LD_INT 4
62718: NEG
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 1
62726: NEG
62727: PUSH
62728: LD_INT 5
62730: NEG
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: LD_INT 2
62738: PUSH
62739: LD_INT 3
62741: NEG
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 2
62749: NEG
62750: PUSH
62751: LD_INT 5
62753: NEG
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 3
62761: PUSH
62762: LD_INT 0
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PUSH
62769: LD_INT 3
62771: PUSH
62772: LD_INT 1
62774: NEG
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: LD_INT 4
62782: PUSH
62783: LD_INT 0
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 4
62792: PUSH
62793: LD_INT 1
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 3
62802: PUSH
62803: LD_INT 1
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 2
62812: PUSH
62813: LD_INT 0
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: LD_INT 2
62822: PUSH
62823: LD_INT 1
62825: NEG
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: LD_INT 2
62833: PUSH
62834: LD_INT 2
62836: NEG
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 4
62844: PUSH
62845: LD_INT 2
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 4
62854: PUSH
62855: LD_INT 4
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 4
62864: PUSH
62865: LD_INT 3
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 5
62874: PUSH
62875: LD_INT 4
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 5
62884: PUSH
62885: LD_INT 5
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 4
62894: PUSH
62895: LD_INT 5
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 3
62904: PUSH
62905: LD_INT 4
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: PUSH
62912: LD_INT 3
62914: PUSH
62915: LD_INT 3
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 5
62924: PUSH
62925: LD_INT 3
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 3
62934: PUSH
62935: LD_INT 5
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: LIST
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: LIST
62974: LIST
62975: LIST
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62989: LD_ADDR_VAR 0 33
62993: PUSH
62994: LD_INT 4
62996: NEG
62997: PUSH
62998: LD_INT 4
63000: NEG
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 4
63008: NEG
63009: PUSH
63010: LD_INT 5
63012: NEG
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 3
63020: NEG
63021: PUSH
63022: LD_INT 4
63024: NEG
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 3
63032: NEG
63033: PUSH
63034: LD_INT 3
63036: NEG
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: LD_INT 4
63044: NEG
63045: PUSH
63046: LD_INT 3
63048: NEG
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 5
63056: NEG
63057: PUSH
63058: LD_INT 4
63060: NEG
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: PUSH
63066: LD_INT 5
63068: NEG
63069: PUSH
63070: LD_INT 5
63072: NEG
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 3
63080: NEG
63081: PUSH
63082: LD_INT 5
63084: NEG
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: LD_INT 5
63092: NEG
63093: PUSH
63094: LD_INT 3
63096: NEG
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: LD_INT 0
63104: PUSH
63105: LD_INT 3
63107: NEG
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 0
63115: PUSH
63116: LD_INT 4
63118: NEG
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 1
63126: PUSH
63127: LD_INT 3
63129: NEG
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 1
63137: PUSH
63138: LD_INT 2
63140: NEG
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 0
63148: PUSH
63149: LD_INT 2
63151: NEG
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 1
63159: NEG
63160: PUSH
63161: LD_INT 3
63163: NEG
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: LD_INT 1
63171: NEG
63172: PUSH
63173: LD_INT 4
63175: NEG
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 2
63183: PUSH
63184: LD_INT 2
63186: NEG
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 2
63194: NEG
63195: PUSH
63196: LD_INT 4
63198: NEG
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 4
63206: PUSH
63207: LD_INT 0
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 4
63216: PUSH
63217: LD_INT 1
63219: NEG
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 5
63227: PUSH
63228: LD_INT 0
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 5
63237: PUSH
63238: LD_INT 1
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 4
63247: PUSH
63248: LD_INT 1
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 3
63257: PUSH
63258: LD_INT 0
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: PUSH
63265: LD_INT 3
63267: PUSH
63268: LD_INT 1
63270: NEG
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: LD_INT 3
63278: PUSH
63279: LD_INT 2
63281: NEG
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: PUSH
63287: LD_INT 5
63289: PUSH
63290: LD_INT 2
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: PUSH
63297: LD_INT 3
63299: PUSH
63300: LD_INT 3
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 3
63309: PUSH
63310: LD_INT 2
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: LD_INT 4
63319: PUSH
63320: LD_INT 3
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 4
63329: PUSH
63330: LD_INT 4
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 3
63339: PUSH
63340: LD_INT 4
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: LD_INT 2
63349: PUSH
63350: LD_INT 3
63352: PUSH
63353: EMPTY
63354: LIST
63355: LIST
63356: PUSH
63357: LD_INT 2
63359: PUSH
63360: LD_INT 2
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 4
63369: PUSH
63370: LD_INT 2
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 2
63379: PUSH
63380: LD_INT 4
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 0
63389: PUSH
63390: LD_INT 4
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 0
63399: PUSH
63400: LD_INT 3
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 1
63409: PUSH
63410: LD_INT 4
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 1
63419: PUSH
63420: LD_INT 5
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 0
63429: PUSH
63430: LD_INT 5
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 1
63439: NEG
63440: PUSH
63441: LD_INT 4
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 1
63450: NEG
63451: PUSH
63452: LD_INT 3
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 2
63461: PUSH
63462: LD_INT 5
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 2
63471: NEG
63472: PUSH
63473: LD_INT 3
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63527: LD_ADDR_VAR 0 34
63531: PUSH
63532: LD_INT 0
63534: PUSH
63535: LD_INT 4
63537: NEG
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: LD_INT 0
63545: PUSH
63546: LD_INT 5
63548: NEG
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 1
63556: PUSH
63557: LD_INT 4
63559: NEG
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: PUSH
63565: LD_INT 1
63567: PUSH
63568: LD_INT 3
63570: NEG
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 0
63578: PUSH
63579: LD_INT 3
63581: NEG
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: LD_INT 1
63589: NEG
63590: PUSH
63591: LD_INT 4
63593: NEG
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 1
63601: NEG
63602: PUSH
63603: LD_INT 5
63605: NEG
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 2
63613: PUSH
63614: LD_INT 3
63616: NEG
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PUSH
63622: LD_INT 2
63624: NEG
63625: PUSH
63626: LD_INT 5
63628: NEG
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: LD_INT 3
63636: PUSH
63637: LD_INT 0
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 3
63646: PUSH
63647: LD_INT 1
63649: NEG
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 4
63657: PUSH
63658: LD_INT 0
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 4
63667: PUSH
63668: LD_INT 1
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 3
63677: PUSH
63678: LD_INT 1
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 2
63687: PUSH
63688: LD_INT 0
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PUSH
63695: LD_INT 2
63697: PUSH
63698: LD_INT 1
63700: NEG
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: PUSH
63706: LD_INT 2
63708: PUSH
63709: LD_INT 2
63711: NEG
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 4
63719: PUSH
63720: LD_INT 2
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 4
63729: PUSH
63730: LD_INT 4
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 4
63739: PUSH
63740: LD_INT 3
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 5
63749: PUSH
63750: LD_INT 4
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 5
63759: PUSH
63760: LD_INT 5
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 4
63769: PUSH
63770: LD_INT 5
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 3
63779: PUSH
63780: LD_INT 4
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 3
63789: PUSH
63790: LD_INT 3
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 5
63799: PUSH
63800: LD_INT 3
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: PUSH
63807: LD_INT 3
63809: PUSH
63810: LD_INT 5
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: LD_INT 0
63819: PUSH
63820: LD_INT 3
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PUSH
63827: LD_INT 0
63829: PUSH
63830: LD_INT 2
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 1
63839: PUSH
63840: LD_INT 3
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 1
63849: PUSH
63850: LD_INT 4
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: LD_INT 0
63859: PUSH
63860: LD_INT 4
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: LD_INT 1
63869: NEG
63870: PUSH
63871: LD_INT 3
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: LD_INT 1
63880: NEG
63881: PUSH
63882: LD_INT 2
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: PUSH
63889: LD_INT 2
63891: PUSH
63892: LD_INT 4
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: LD_INT 2
63901: NEG
63902: PUSH
63903: LD_INT 2
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 4
63912: NEG
63913: PUSH
63914: LD_INT 0
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PUSH
63921: LD_INT 4
63923: NEG
63924: PUSH
63925: LD_INT 1
63927: NEG
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: PUSH
63933: LD_INT 3
63935: NEG
63936: PUSH
63937: LD_INT 0
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: PUSH
63944: LD_INT 3
63946: NEG
63947: PUSH
63948: LD_INT 1
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 4
63957: NEG
63958: PUSH
63959: LD_INT 1
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: PUSH
63966: LD_INT 5
63968: NEG
63969: PUSH
63970: LD_INT 0
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 5
63979: NEG
63980: PUSH
63981: LD_INT 1
63983: NEG
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: LD_INT 5
63991: NEG
63992: PUSH
63993: LD_INT 2
63995: NEG
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: LD_INT 3
64003: NEG
64004: PUSH
64005: LD_INT 2
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: LIST
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: LIST
64038: LIST
64039: LIST
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: ST_TO_ADDR
// end ; end ;
64059: GO 64062
64061: POP
// case btype of b_depot , b_warehouse :
64062: LD_VAR 0 1
64066: PUSH
64067: LD_INT 0
64069: DOUBLE
64070: EQUAL
64071: IFTRUE 64081
64073: LD_INT 1
64075: DOUBLE
64076: EQUAL
64077: IFTRUE 64081
64079: GO 64282
64081: POP
// case nation of nation_american :
64082: LD_VAR 0 5
64086: PUSH
64087: LD_INT 1
64089: DOUBLE
64090: EQUAL
64091: IFTRUE 64095
64093: GO 64151
64095: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
64096: LD_ADDR_VAR 0 9
64100: PUSH
64101: LD_VAR 0 11
64105: PUSH
64106: LD_VAR 0 12
64110: PUSH
64111: LD_VAR 0 13
64115: PUSH
64116: LD_VAR 0 14
64120: PUSH
64121: LD_VAR 0 15
64125: PUSH
64126: LD_VAR 0 16
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: LIST
64135: LIST
64136: LIST
64137: LIST
64138: PUSH
64139: LD_VAR 0 4
64143: PUSH
64144: LD_INT 1
64146: PLUS
64147: ARRAY
64148: ST_TO_ADDR
64149: GO 64280
64151: LD_INT 2
64153: DOUBLE
64154: EQUAL
64155: IFTRUE 64159
64157: GO 64215
64159: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64160: LD_ADDR_VAR 0 9
64164: PUSH
64165: LD_VAR 0 17
64169: PUSH
64170: LD_VAR 0 18
64174: PUSH
64175: LD_VAR 0 19
64179: PUSH
64180: LD_VAR 0 20
64184: PUSH
64185: LD_VAR 0 21
64189: PUSH
64190: LD_VAR 0 22
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: PUSH
64203: LD_VAR 0 4
64207: PUSH
64208: LD_INT 1
64210: PLUS
64211: ARRAY
64212: ST_TO_ADDR
64213: GO 64280
64215: LD_INT 3
64217: DOUBLE
64218: EQUAL
64219: IFTRUE 64223
64221: GO 64279
64223: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64224: LD_ADDR_VAR 0 9
64228: PUSH
64229: LD_VAR 0 23
64233: PUSH
64234: LD_VAR 0 24
64238: PUSH
64239: LD_VAR 0 25
64243: PUSH
64244: LD_VAR 0 26
64248: PUSH
64249: LD_VAR 0 27
64253: PUSH
64254: LD_VAR 0 28
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: LIST
64263: LIST
64264: LIST
64265: LIST
64266: PUSH
64267: LD_VAR 0 4
64271: PUSH
64272: LD_INT 1
64274: PLUS
64275: ARRAY
64276: ST_TO_ADDR
64277: GO 64280
64279: POP
64280: GO 64835
64282: LD_INT 2
64284: DOUBLE
64285: EQUAL
64286: IFTRUE 64296
64288: LD_INT 3
64290: DOUBLE
64291: EQUAL
64292: IFTRUE 64296
64294: GO 64352
64296: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64297: LD_ADDR_VAR 0 9
64301: PUSH
64302: LD_VAR 0 29
64306: PUSH
64307: LD_VAR 0 30
64311: PUSH
64312: LD_VAR 0 31
64316: PUSH
64317: LD_VAR 0 32
64321: PUSH
64322: LD_VAR 0 33
64326: PUSH
64327: LD_VAR 0 34
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: LIST
64336: LIST
64337: LIST
64338: LIST
64339: PUSH
64340: LD_VAR 0 4
64344: PUSH
64345: LD_INT 1
64347: PLUS
64348: ARRAY
64349: ST_TO_ADDR
64350: GO 64835
64352: LD_INT 16
64354: DOUBLE
64355: EQUAL
64356: IFTRUE 64414
64358: LD_INT 17
64360: DOUBLE
64361: EQUAL
64362: IFTRUE 64414
64364: LD_INT 18
64366: DOUBLE
64367: EQUAL
64368: IFTRUE 64414
64370: LD_INT 19
64372: DOUBLE
64373: EQUAL
64374: IFTRUE 64414
64376: LD_INT 22
64378: DOUBLE
64379: EQUAL
64380: IFTRUE 64414
64382: LD_INT 20
64384: DOUBLE
64385: EQUAL
64386: IFTRUE 64414
64388: LD_INT 21
64390: DOUBLE
64391: EQUAL
64392: IFTRUE 64414
64394: LD_INT 23
64396: DOUBLE
64397: EQUAL
64398: IFTRUE 64414
64400: LD_INT 24
64402: DOUBLE
64403: EQUAL
64404: IFTRUE 64414
64406: LD_INT 25
64408: DOUBLE
64409: EQUAL
64410: IFTRUE 64414
64412: GO 64470
64414: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64415: LD_ADDR_VAR 0 9
64419: PUSH
64420: LD_VAR 0 35
64424: PUSH
64425: LD_VAR 0 36
64429: PUSH
64430: LD_VAR 0 37
64434: PUSH
64435: LD_VAR 0 38
64439: PUSH
64440: LD_VAR 0 39
64444: PUSH
64445: LD_VAR 0 40
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: PUSH
64458: LD_VAR 0 4
64462: PUSH
64463: LD_INT 1
64465: PLUS
64466: ARRAY
64467: ST_TO_ADDR
64468: GO 64835
64470: LD_INT 6
64472: DOUBLE
64473: EQUAL
64474: IFTRUE 64526
64476: LD_INT 7
64478: DOUBLE
64479: EQUAL
64480: IFTRUE 64526
64482: LD_INT 8
64484: DOUBLE
64485: EQUAL
64486: IFTRUE 64526
64488: LD_INT 13
64490: DOUBLE
64491: EQUAL
64492: IFTRUE 64526
64494: LD_INT 12
64496: DOUBLE
64497: EQUAL
64498: IFTRUE 64526
64500: LD_INT 15
64502: DOUBLE
64503: EQUAL
64504: IFTRUE 64526
64506: LD_INT 11
64508: DOUBLE
64509: EQUAL
64510: IFTRUE 64526
64512: LD_INT 14
64514: DOUBLE
64515: EQUAL
64516: IFTRUE 64526
64518: LD_INT 10
64520: DOUBLE
64521: EQUAL
64522: IFTRUE 64526
64524: GO 64582
64526: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64527: LD_ADDR_VAR 0 9
64531: PUSH
64532: LD_VAR 0 41
64536: PUSH
64537: LD_VAR 0 42
64541: PUSH
64542: LD_VAR 0 43
64546: PUSH
64547: LD_VAR 0 44
64551: PUSH
64552: LD_VAR 0 45
64556: PUSH
64557: LD_VAR 0 46
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: LIST
64566: LIST
64567: LIST
64568: LIST
64569: PUSH
64570: LD_VAR 0 4
64574: PUSH
64575: LD_INT 1
64577: PLUS
64578: ARRAY
64579: ST_TO_ADDR
64580: GO 64835
64582: LD_INT 36
64584: DOUBLE
64585: EQUAL
64586: IFTRUE 64590
64588: GO 64646
64590: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64591: LD_ADDR_VAR 0 9
64595: PUSH
64596: LD_VAR 0 47
64600: PUSH
64601: LD_VAR 0 48
64605: PUSH
64606: LD_VAR 0 49
64610: PUSH
64611: LD_VAR 0 50
64615: PUSH
64616: LD_VAR 0 51
64620: PUSH
64621: LD_VAR 0 52
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: LIST
64630: LIST
64631: LIST
64632: LIST
64633: PUSH
64634: LD_VAR 0 4
64638: PUSH
64639: LD_INT 1
64641: PLUS
64642: ARRAY
64643: ST_TO_ADDR
64644: GO 64835
64646: LD_INT 4
64648: DOUBLE
64649: EQUAL
64650: IFTRUE 64672
64652: LD_INT 5
64654: DOUBLE
64655: EQUAL
64656: IFTRUE 64672
64658: LD_INT 34
64660: DOUBLE
64661: EQUAL
64662: IFTRUE 64672
64664: LD_INT 37
64666: DOUBLE
64667: EQUAL
64668: IFTRUE 64672
64670: GO 64728
64672: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64673: LD_ADDR_VAR 0 9
64677: PUSH
64678: LD_VAR 0 53
64682: PUSH
64683: LD_VAR 0 54
64687: PUSH
64688: LD_VAR 0 55
64692: PUSH
64693: LD_VAR 0 56
64697: PUSH
64698: LD_VAR 0 57
64702: PUSH
64703: LD_VAR 0 58
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: LIST
64715: PUSH
64716: LD_VAR 0 4
64720: PUSH
64721: LD_INT 1
64723: PLUS
64724: ARRAY
64725: ST_TO_ADDR
64726: GO 64835
64728: LD_INT 31
64730: DOUBLE
64731: EQUAL
64732: IFTRUE 64778
64734: LD_INT 32
64736: DOUBLE
64737: EQUAL
64738: IFTRUE 64778
64740: LD_INT 33
64742: DOUBLE
64743: EQUAL
64744: IFTRUE 64778
64746: LD_INT 27
64748: DOUBLE
64749: EQUAL
64750: IFTRUE 64778
64752: LD_INT 26
64754: DOUBLE
64755: EQUAL
64756: IFTRUE 64778
64758: LD_INT 28
64760: DOUBLE
64761: EQUAL
64762: IFTRUE 64778
64764: LD_INT 29
64766: DOUBLE
64767: EQUAL
64768: IFTRUE 64778
64770: LD_INT 30
64772: DOUBLE
64773: EQUAL
64774: IFTRUE 64778
64776: GO 64834
64778: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64779: LD_ADDR_VAR 0 9
64783: PUSH
64784: LD_VAR 0 59
64788: PUSH
64789: LD_VAR 0 60
64793: PUSH
64794: LD_VAR 0 61
64798: PUSH
64799: LD_VAR 0 62
64803: PUSH
64804: LD_VAR 0 63
64808: PUSH
64809: LD_VAR 0 64
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: LIST
64818: LIST
64819: LIST
64820: LIST
64821: PUSH
64822: LD_VAR 0 4
64826: PUSH
64827: LD_INT 1
64829: PLUS
64830: ARRAY
64831: ST_TO_ADDR
64832: GO 64835
64834: POP
// temp_list2 = [ ] ;
64835: LD_ADDR_VAR 0 10
64839: PUSH
64840: EMPTY
64841: ST_TO_ADDR
// for i in temp_list do
64842: LD_ADDR_VAR 0 8
64846: PUSH
64847: LD_VAR 0 9
64851: PUSH
64852: FOR_IN
64853: IFFALSE 64905
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64855: LD_ADDR_VAR 0 10
64859: PUSH
64860: LD_VAR 0 10
64864: PUSH
64865: LD_VAR 0 8
64869: PUSH
64870: LD_INT 1
64872: ARRAY
64873: PUSH
64874: LD_VAR 0 2
64878: PLUS
64879: PUSH
64880: LD_VAR 0 8
64884: PUSH
64885: LD_INT 2
64887: ARRAY
64888: PUSH
64889: LD_VAR 0 3
64893: PLUS
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: EMPTY
64900: LIST
64901: ADD
64902: ST_TO_ADDR
64903: GO 64852
64905: POP
64906: POP
// result = temp_list2 ;
64907: LD_ADDR_VAR 0 7
64911: PUSH
64912: LD_VAR 0 10
64916: ST_TO_ADDR
// end ;
64917: LD_VAR 0 7
64921: RET
// export function EnemyInRange ( unit , dist ) ; begin
64922: LD_INT 0
64924: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64925: LD_ADDR_VAR 0 3
64929: PUSH
64930: LD_VAR 0 1
64934: PPUSH
64935: CALL_OW 255
64939: PPUSH
64940: LD_VAR 0 1
64944: PPUSH
64945: CALL_OW 250
64949: PPUSH
64950: LD_VAR 0 1
64954: PPUSH
64955: CALL_OW 251
64959: PPUSH
64960: LD_VAR 0 2
64964: PPUSH
64965: CALL 38179 0 4
64969: PUSH
64970: LD_INT 4
64972: ARRAY
64973: ST_TO_ADDR
// end ;
64974: LD_VAR 0 3
64978: RET
// export function PlayerSeeMe ( unit ) ; begin
64979: LD_INT 0
64981: PPUSH
// result := See ( your_side , unit ) ;
64982: LD_ADDR_VAR 0 2
64986: PUSH
64987: LD_OWVAR 2
64991: PPUSH
64992: LD_VAR 0 1
64996: PPUSH
64997: CALL_OW 292
65001: ST_TO_ADDR
// end ;
65002: LD_VAR 0 2
65006: RET
// export function ReverseDir ( unit ) ; begin
65007: LD_INT 0
65009: PPUSH
// if not unit then
65010: LD_VAR 0 1
65014: NOT
65015: IFFALSE 65019
// exit ;
65017: GO 65042
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
65019: LD_ADDR_VAR 0 2
65023: PUSH
65024: LD_VAR 0 1
65028: PPUSH
65029: CALL_OW 254
65033: PUSH
65034: LD_INT 3
65036: PLUS
65037: PUSH
65038: LD_INT 6
65040: MOD
65041: ST_TO_ADDR
// end ;
65042: LD_VAR 0 2
65046: RET
// export function ReverseArray ( array ) ; var i ; begin
65047: LD_INT 0
65049: PPUSH
65050: PPUSH
// if not array then
65051: LD_VAR 0 1
65055: NOT
65056: IFFALSE 65060
// exit ;
65058: GO 65115
// result := [ ] ;
65060: LD_ADDR_VAR 0 2
65064: PUSH
65065: EMPTY
65066: ST_TO_ADDR
// for i := array downto 1 do
65067: LD_ADDR_VAR 0 3
65071: PUSH
65072: DOUBLE
65073: LD_VAR 0 1
65077: INC
65078: ST_TO_ADDR
65079: LD_INT 1
65081: PUSH
65082: FOR_DOWNTO
65083: IFFALSE 65113
// result := Join ( result , array [ i ] ) ;
65085: LD_ADDR_VAR 0 2
65089: PUSH
65090: LD_VAR 0 2
65094: PPUSH
65095: LD_VAR 0 1
65099: PUSH
65100: LD_VAR 0 3
65104: ARRAY
65105: PPUSH
65106: CALL 69957 0 2
65110: ST_TO_ADDR
65111: GO 65082
65113: POP
65114: POP
// end ;
65115: LD_VAR 0 2
65119: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
65120: LD_INT 0
65122: PPUSH
65123: PPUSH
65124: PPUSH
65125: PPUSH
65126: PPUSH
65127: PPUSH
// if not unit or not hexes then
65128: LD_VAR 0 1
65132: NOT
65133: IFTRUE 65142
65135: PUSH
65136: LD_VAR 0 2
65140: NOT
65141: OR
65142: IFFALSE 65146
// exit ;
65144: GO 65269
// dist := 9999 ;
65146: LD_ADDR_VAR 0 5
65150: PUSH
65151: LD_INT 9999
65153: ST_TO_ADDR
// for i = 1 to hexes do
65154: LD_ADDR_VAR 0 4
65158: PUSH
65159: DOUBLE
65160: LD_INT 1
65162: DEC
65163: ST_TO_ADDR
65164: LD_VAR 0 2
65168: PUSH
65169: FOR_TO
65170: IFFALSE 65257
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65172: LD_ADDR_VAR 0 6
65176: PUSH
65177: LD_VAR 0 1
65181: PPUSH
65182: LD_VAR 0 2
65186: PUSH
65187: LD_VAR 0 4
65191: ARRAY
65192: PUSH
65193: LD_INT 1
65195: ARRAY
65196: PPUSH
65197: LD_VAR 0 2
65201: PUSH
65202: LD_VAR 0 4
65206: ARRAY
65207: PUSH
65208: LD_INT 2
65210: ARRAY
65211: PPUSH
65212: CALL_OW 297
65216: ST_TO_ADDR
// if tdist < dist then
65217: LD_VAR 0 6
65221: PUSH
65222: LD_VAR 0 5
65226: LESS
65227: IFFALSE 65255
// begin hex := hexes [ i ] ;
65229: LD_ADDR_VAR 0 8
65233: PUSH
65234: LD_VAR 0 2
65238: PUSH
65239: LD_VAR 0 4
65243: ARRAY
65244: ST_TO_ADDR
// dist := tdist ;
65245: LD_ADDR_VAR 0 5
65249: PUSH
65250: LD_VAR 0 6
65254: ST_TO_ADDR
// end ; end ;
65255: GO 65169
65257: POP
65258: POP
// result := hex ;
65259: LD_ADDR_VAR 0 3
65263: PUSH
65264: LD_VAR 0 8
65268: ST_TO_ADDR
// end ;
65269: LD_VAR 0 3
65273: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65274: LD_INT 0
65276: PPUSH
65277: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65278: LD_VAR 0 1
65282: NOT
65283: IFTRUE 65322
65285: PUSH
65286: LD_VAR 0 1
65290: PUSH
65291: LD_INT 21
65293: PUSH
65294: LD_INT 2
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: PUSH
65301: LD_INT 23
65303: PUSH
65304: LD_INT 2
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: PPUSH
65315: CALL_OW 69
65319: IN
65320: NOT
65321: OR
65322: IFFALSE 65326
// exit ;
65324: GO 65373
// for i = 1 to 3 do
65326: LD_ADDR_VAR 0 3
65330: PUSH
65331: DOUBLE
65332: LD_INT 1
65334: DEC
65335: ST_TO_ADDR
65336: LD_INT 3
65338: PUSH
65339: FOR_TO
65340: IFFALSE 65371
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65342: LD_VAR 0 1
65346: PPUSH
65347: CALL_OW 250
65351: PPUSH
65352: LD_VAR 0 1
65356: PPUSH
65357: CALL_OW 251
65361: PPUSH
65362: LD_INT 1
65364: PPUSH
65365: CALL_OW 453
65369: GO 65339
65371: POP
65372: POP
// end ;
65373: LD_VAR 0 2
65377: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65378: LD_INT 0
65380: PPUSH
65381: PPUSH
65382: PPUSH
65383: PPUSH
65384: PPUSH
65385: PPUSH
// if not unit or not enemy_unit then
65386: LD_VAR 0 1
65390: NOT
65391: IFTRUE 65400
65393: PUSH
65394: LD_VAR 0 2
65398: NOT
65399: OR
65400: IFFALSE 65404
// exit ;
65402: GO 65875
// if GetLives ( i ) < 250 then
65404: LD_VAR 0 4
65408: PPUSH
65409: CALL_OW 256
65413: PUSH
65414: LD_INT 250
65416: LESS
65417: IFFALSE 65430
// begin ComAutodestruct ( i ) ;
65419: LD_VAR 0 4
65423: PPUSH
65424: CALL 65274 0 1
// exit ;
65428: GO 65875
// end ; x := GetX ( enemy_unit ) ;
65430: LD_ADDR_VAR 0 7
65434: PUSH
65435: LD_VAR 0 2
65439: PPUSH
65440: CALL_OW 250
65444: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65445: LD_ADDR_VAR 0 8
65449: PUSH
65450: LD_VAR 0 2
65454: PPUSH
65455: CALL_OW 251
65459: ST_TO_ADDR
// if not x or not y then
65460: LD_VAR 0 7
65464: NOT
65465: IFTRUE 65474
65467: PUSH
65468: LD_VAR 0 8
65472: NOT
65473: OR
65474: IFFALSE 65478
// exit ;
65476: GO 65875
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65478: LD_ADDR_VAR 0 6
65482: PUSH
65483: LD_VAR 0 7
65487: PPUSH
65488: LD_INT 0
65490: PPUSH
65491: LD_INT 4
65493: PPUSH
65494: CALL_OW 272
65498: PUSH
65499: LD_VAR 0 8
65503: PPUSH
65504: LD_INT 0
65506: PPUSH
65507: LD_INT 4
65509: PPUSH
65510: CALL_OW 273
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: PUSH
65519: LD_VAR 0 7
65523: PPUSH
65524: LD_INT 1
65526: PPUSH
65527: LD_INT 4
65529: PPUSH
65530: CALL_OW 272
65534: PUSH
65535: LD_VAR 0 8
65539: PPUSH
65540: LD_INT 1
65542: PPUSH
65543: LD_INT 4
65545: PPUSH
65546: CALL_OW 273
65550: PUSH
65551: EMPTY
65552: LIST
65553: LIST
65554: PUSH
65555: LD_VAR 0 7
65559: PPUSH
65560: LD_INT 2
65562: PPUSH
65563: LD_INT 4
65565: PPUSH
65566: CALL_OW 272
65570: PUSH
65571: LD_VAR 0 8
65575: PPUSH
65576: LD_INT 2
65578: PPUSH
65579: LD_INT 4
65581: PPUSH
65582: CALL_OW 273
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: PUSH
65591: LD_VAR 0 7
65595: PPUSH
65596: LD_INT 3
65598: PPUSH
65599: LD_INT 4
65601: PPUSH
65602: CALL_OW 272
65606: PUSH
65607: LD_VAR 0 8
65611: PPUSH
65612: LD_INT 3
65614: PPUSH
65615: LD_INT 4
65617: PPUSH
65618: CALL_OW 273
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PUSH
65627: LD_VAR 0 7
65631: PPUSH
65632: LD_INT 4
65634: PPUSH
65635: LD_INT 4
65637: PPUSH
65638: CALL_OW 272
65642: PUSH
65643: LD_VAR 0 8
65647: PPUSH
65648: LD_INT 4
65650: PPUSH
65651: LD_INT 4
65653: PPUSH
65654: CALL_OW 273
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: PUSH
65663: LD_VAR 0 7
65667: PPUSH
65668: LD_INT 5
65670: PPUSH
65671: LD_INT 4
65673: PPUSH
65674: CALL_OW 272
65678: PUSH
65679: LD_VAR 0 8
65683: PPUSH
65684: LD_INT 5
65686: PPUSH
65687: LD_INT 4
65689: PPUSH
65690: CALL_OW 273
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: ST_TO_ADDR
// for i = tmp downto 1 do
65707: LD_ADDR_VAR 0 4
65711: PUSH
65712: DOUBLE
65713: LD_VAR 0 6
65717: INC
65718: ST_TO_ADDR
65719: LD_INT 1
65721: PUSH
65722: FOR_DOWNTO
65723: IFFALSE 65826
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65725: LD_VAR 0 6
65729: PUSH
65730: LD_VAR 0 4
65734: ARRAY
65735: PUSH
65736: LD_INT 1
65738: ARRAY
65739: PPUSH
65740: LD_VAR 0 6
65744: PUSH
65745: LD_VAR 0 4
65749: ARRAY
65750: PUSH
65751: LD_INT 2
65753: ARRAY
65754: PPUSH
65755: CALL_OW 488
65759: NOT
65760: IFTRUE 65802
65762: PUSH
65763: LD_VAR 0 6
65767: PUSH
65768: LD_VAR 0 4
65772: ARRAY
65773: PUSH
65774: LD_INT 1
65776: ARRAY
65777: PPUSH
65778: LD_VAR 0 6
65782: PUSH
65783: LD_VAR 0 4
65787: ARRAY
65788: PUSH
65789: LD_INT 2
65791: ARRAY
65792: PPUSH
65793: CALL_OW 428
65797: PUSH
65798: LD_INT 0
65800: NONEQUAL
65801: OR
65802: IFFALSE 65824
// tmp := Delete ( tmp , i ) ;
65804: LD_ADDR_VAR 0 6
65808: PUSH
65809: LD_VAR 0 6
65813: PPUSH
65814: LD_VAR 0 4
65818: PPUSH
65819: CALL_OW 3
65823: ST_TO_ADDR
65824: GO 65722
65826: POP
65827: POP
// j := GetClosestHex ( unit , tmp ) ;
65828: LD_ADDR_VAR 0 5
65832: PUSH
65833: LD_VAR 0 1
65837: PPUSH
65838: LD_VAR 0 6
65842: PPUSH
65843: CALL 65120 0 2
65847: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65848: LD_VAR 0 1
65852: PPUSH
65853: LD_VAR 0 5
65857: PUSH
65858: LD_INT 1
65860: ARRAY
65861: PPUSH
65862: LD_VAR 0 5
65866: PUSH
65867: LD_INT 2
65869: ARRAY
65870: PPUSH
65871: CALL_OW 111
// end ;
65875: LD_VAR 0 3
65879: RET
// export function PrepareApemanSoldier ( ) ; begin
65880: LD_INT 0
65882: PPUSH
// uc_nation := 0 ;
65883: LD_ADDR_OWVAR 21
65887: PUSH
65888: LD_INT 0
65890: ST_TO_ADDR
// hc_sex := sex_male ;
65891: LD_ADDR_OWVAR 27
65895: PUSH
65896: LD_INT 1
65898: ST_TO_ADDR
// hc_name :=  ;
65899: LD_ADDR_OWVAR 26
65903: PUSH
65904: LD_STRING 
65906: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
65907: LD_ADDR_OWVAR 28
65911: PUSH
65912: LD_INT 15
65914: ST_TO_ADDR
// hc_gallery :=  ;
65915: LD_ADDR_OWVAR 33
65919: PUSH
65920: LD_STRING 
65922: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65923: LD_ADDR_OWVAR 31
65927: PUSH
65928: LD_INT 0
65930: PPUSH
65931: LD_INT 3
65933: PPUSH
65934: CALL_OW 12
65938: PUSH
65939: LD_INT 0
65941: PPUSH
65942: LD_INT 3
65944: PPUSH
65945: CALL_OW 12
65949: PUSH
65950: LD_INT 0
65952: PUSH
65953: LD_INT 0
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: LIST
65960: LIST
65961: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
65962: LD_ADDR_OWVAR 29
65966: PUSH
65967: LD_INT 12
65969: PUSH
65970: LD_INT 12
65972: PUSH
65973: EMPTY
65974: LIST
65975: LIST
65976: ST_TO_ADDR
// end ;
65977: LD_VAR 0 1
65981: RET
// export function PrepareApemanEngineer ( ) ; begin
65982: LD_INT 0
65984: PPUSH
// uc_nation := 0 ;
65985: LD_ADDR_OWVAR 21
65989: PUSH
65990: LD_INT 0
65992: ST_TO_ADDR
// hc_sex := sex_male ;
65993: LD_ADDR_OWVAR 27
65997: PUSH
65998: LD_INT 1
66000: ST_TO_ADDR
// hc_name :=  ;
66001: LD_ADDR_OWVAR 26
66005: PUSH
66006: LD_STRING 
66008: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
66009: LD_ADDR_OWVAR 28
66013: PUSH
66014: LD_INT 16
66016: ST_TO_ADDR
// hc_gallery :=  ;
66017: LD_ADDR_OWVAR 33
66021: PUSH
66022: LD_STRING 
66024: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66025: LD_ADDR_OWVAR 31
66029: PUSH
66030: LD_INT 0
66032: PPUSH
66033: LD_INT 3
66035: PPUSH
66036: CALL_OW 12
66040: PUSH
66041: LD_INT 0
66043: PPUSH
66044: LD_INT 3
66046: PPUSH
66047: CALL_OW 12
66051: PUSH
66052: LD_INT 0
66054: PUSH
66055: LD_INT 0
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: LIST
66062: LIST
66063: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
66064: LD_ADDR_OWVAR 29
66068: PUSH
66069: LD_INT 12
66071: PUSH
66072: LD_INT 12
66074: PUSH
66075: EMPTY
66076: LIST
66077: LIST
66078: ST_TO_ADDR
// end ;
66079: LD_VAR 0 1
66083: RET
// export function PrepareApeman ( agressivity ) ; begin
66084: LD_INT 0
66086: PPUSH
// uc_side := 0 ;
66087: LD_ADDR_OWVAR 20
66091: PUSH
66092: LD_INT 0
66094: ST_TO_ADDR
// uc_nation := 0 ;
66095: LD_ADDR_OWVAR 21
66099: PUSH
66100: LD_INT 0
66102: ST_TO_ADDR
// hc_sex := sex_male ;
66103: LD_ADDR_OWVAR 27
66107: PUSH
66108: LD_INT 1
66110: ST_TO_ADDR
// hc_class := class_apeman ;
66111: LD_ADDR_OWVAR 28
66115: PUSH
66116: LD_INT 12
66118: ST_TO_ADDR
// hc_gallery :=  ;
66119: LD_ADDR_OWVAR 33
66123: PUSH
66124: LD_STRING 
66126: ST_TO_ADDR
// hc_name :=  ;
66127: LD_ADDR_OWVAR 26
66131: PUSH
66132: LD_STRING 
66134: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
66135: LD_ADDR_OWVAR 29
66139: PUSH
66140: LD_INT 12
66142: PUSH
66143: LD_INT 12
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: ST_TO_ADDR
// if agressivity = 0 then
66150: LD_VAR 0 1
66154: PUSH
66155: LD_INT 0
66157: EQUAL
66158: IFFALSE 66170
// hc_agressivity := 0 else
66160: LD_ADDR_OWVAR 35
66164: PUSH
66165: LD_INT 0
66167: ST_TO_ADDR
66168: GO 66191
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66170: LD_ADDR_OWVAR 35
66174: PUSH
66175: LD_VAR 0 1
66179: NEG
66180: PPUSH
66181: LD_VAR 0 1
66185: PPUSH
66186: CALL_OW 12
66190: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66191: LD_ADDR_OWVAR 31
66195: PUSH
66196: LD_INT 0
66198: PPUSH
66199: LD_INT 3
66201: PPUSH
66202: CALL_OW 12
66206: PUSH
66207: LD_INT 0
66209: PPUSH
66210: LD_INT 3
66212: PPUSH
66213: CALL_OW 12
66217: PUSH
66218: LD_INT 0
66220: PUSH
66221: LD_INT 0
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: LIST
66228: LIST
66229: ST_TO_ADDR
// end ;
66230: LD_VAR 0 2
66234: RET
// export function PrepareTiger ( agressivity ) ; begin
66235: LD_INT 0
66237: PPUSH
// uc_side := 0 ;
66238: LD_ADDR_OWVAR 20
66242: PUSH
66243: LD_INT 0
66245: ST_TO_ADDR
// uc_nation := 0 ;
66246: LD_ADDR_OWVAR 21
66250: PUSH
66251: LD_INT 0
66253: ST_TO_ADDR
// InitHc ;
66254: CALL_OW 19
// hc_class := class_tiger ;
66258: LD_ADDR_OWVAR 28
66262: PUSH
66263: LD_INT 14
66265: ST_TO_ADDR
// hc_gallery :=  ;
66266: LD_ADDR_OWVAR 33
66270: PUSH
66271: LD_STRING 
66273: ST_TO_ADDR
// hc_name :=  ;
66274: LD_ADDR_OWVAR 26
66278: PUSH
66279: LD_STRING 
66281: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66282: LD_ADDR_OWVAR 35
66286: PUSH
66287: LD_VAR 0 1
66291: NEG
66292: PPUSH
66293: LD_VAR 0 1
66297: PPUSH
66298: CALL_OW 12
66302: ST_TO_ADDR
// end ;
66303: LD_VAR 0 2
66307: RET
// export function PrepareEnchidna ( ) ; begin
66308: LD_INT 0
66310: PPUSH
// uc_side := 0 ;
66311: LD_ADDR_OWVAR 20
66315: PUSH
66316: LD_INT 0
66318: ST_TO_ADDR
// uc_nation := 0 ;
66319: LD_ADDR_OWVAR 21
66323: PUSH
66324: LD_INT 0
66326: ST_TO_ADDR
// InitHc ;
66327: CALL_OW 19
// hc_class := class_baggie ;
66331: LD_ADDR_OWVAR 28
66335: PUSH
66336: LD_INT 13
66338: ST_TO_ADDR
// hc_gallery :=  ;
66339: LD_ADDR_OWVAR 33
66343: PUSH
66344: LD_STRING 
66346: ST_TO_ADDR
// hc_name :=  ;
66347: LD_ADDR_OWVAR 26
66351: PUSH
66352: LD_STRING 
66354: ST_TO_ADDR
// end ;
66355: LD_VAR 0 1
66359: RET
// export function PrepareFrog ( ) ; begin
66360: LD_INT 0
66362: PPUSH
// uc_side := 0 ;
66363: LD_ADDR_OWVAR 20
66367: PUSH
66368: LD_INT 0
66370: ST_TO_ADDR
// uc_nation := 0 ;
66371: LD_ADDR_OWVAR 21
66375: PUSH
66376: LD_INT 0
66378: ST_TO_ADDR
// InitHc ;
66379: CALL_OW 19
// hc_class := class_frog ;
66383: LD_ADDR_OWVAR 28
66387: PUSH
66388: LD_INT 19
66390: ST_TO_ADDR
// hc_gallery :=  ;
66391: LD_ADDR_OWVAR 33
66395: PUSH
66396: LD_STRING 
66398: ST_TO_ADDR
// hc_name :=  ;
66399: LD_ADDR_OWVAR 26
66403: PUSH
66404: LD_STRING 
66406: ST_TO_ADDR
// end ;
66407: LD_VAR 0 1
66411: RET
// export function PrepareFish ( ) ; begin
66412: LD_INT 0
66414: PPUSH
// uc_side := 0 ;
66415: LD_ADDR_OWVAR 20
66419: PUSH
66420: LD_INT 0
66422: ST_TO_ADDR
// uc_nation := 0 ;
66423: LD_ADDR_OWVAR 21
66427: PUSH
66428: LD_INT 0
66430: ST_TO_ADDR
// InitHc ;
66431: CALL_OW 19
// hc_class := class_fish ;
66435: LD_ADDR_OWVAR 28
66439: PUSH
66440: LD_INT 20
66442: ST_TO_ADDR
// hc_gallery :=  ;
66443: LD_ADDR_OWVAR 33
66447: PUSH
66448: LD_STRING 
66450: ST_TO_ADDR
// hc_name :=  ;
66451: LD_ADDR_OWVAR 26
66455: PUSH
66456: LD_STRING 
66458: ST_TO_ADDR
// end ;
66459: LD_VAR 0 1
66463: RET
// export function PrepareBird ( ) ; begin
66464: LD_INT 0
66466: PPUSH
// uc_side := 0 ;
66467: LD_ADDR_OWVAR 20
66471: PUSH
66472: LD_INT 0
66474: ST_TO_ADDR
// uc_nation := 0 ;
66475: LD_ADDR_OWVAR 21
66479: PUSH
66480: LD_INT 0
66482: ST_TO_ADDR
// InitHc ;
66483: CALL_OW 19
// hc_class := class_phororhacos ;
66487: LD_ADDR_OWVAR 28
66491: PUSH
66492: LD_INT 18
66494: ST_TO_ADDR
// hc_gallery :=  ;
66495: LD_ADDR_OWVAR 33
66499: PUSH
66500: LD_STRING 
66502: ST_TO_ADDR
// hc_name :=  ;
66503: LD_ADDR_OWVAR 26
66507: PUSH
66508: LD_STRING 
66510: ST_TO_ADDR
// end ;
66511: LD_VAR 0 1
66515: RET
// export function PrepareHorse ( ) ; begin
66516: LD_INT 0
66518: PPUSH
// uc_side := 0 ;
66519: LD_ADDR_OWVAR 20
66523: PUSH
66524: LD_INT 0
66526: ST_TO_ADDR
// uc_nation := 0 ;
66527: LD_ADDR_OWVAR 21
66531: PUSH
66532: LD_INT 0
66534: ST_TO_ADDR
// InitHc ;
66535: CALL_OW 19
// hc_class := class_horse ;
66539: LD_ADDR_OWVAR 28
66543: PUSH
66544: LD_INT 21
66546: ST_TO_ADDR
// hc_gallery :=  ;
66547: LD_ADDR_OWVAR 33
66551: PUSH
66552: LD_STRING 
66554: ST_TO_ADDR
// hc_name :=  ;
66555: LD_ADDR_OWVAR 26
66559: PUSH
66560: LD_STRING 
66562: ST_TO_ADDR
// end ;
66563: LD_VAR 0 1
66567: RET
// export function PrepareMastodont ( ) ; begin
66568: LD_INT 0
66570: PPUSH
// uc_side := 0 ;
66571: LD_ADDR_OWVAR 20
66575: PUSH
66576: LD_INT 0
66578: ST_TO_ADDR
// uc_nation := 0 ;
66579: LD_ADDR_OWVAR 21
66583: PUSH
66584: LD_INT 0
66586: ST_TO_ADDR
// vc_chassis := class_mastodont ;
66587: LD_ADDR_OWVAR 37
66591: PUSH
66592: LD_INT 31
66594: ST_TO_ADDR
// vc_control := control_rider ;
66595: LD_ADDR_OWVAR 38
66599: PUSH
66600: LD_INT 4
66602: ST_TO_ADDR
// end ;
66603: LD_VAR 0 1
66607: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66608: LD_INT 0
66610: PPUSH
66611: PPUSH
66612: PPUSH
// uc_side = 0 ;
66613: LD_ADDR_OWVAR 20
66617: PUSH
66618: LD_INT 0
66620: ST_TO_ADDR
// uc_nation = 0 ;
66621: LD_ADDR_OWVAR 21
66625: PUSH
66626: LD_INT 0
66628: ST_TO_ADDR
// InitHc_All ( ) ;
66629: CALL_OW 584
// InitVc ;
66633: CALL_OW 20
// if mastodonts then
66637: LD_VAR 0 6
66641: IFFALSE 66708
// for i = 1 to mastodonts do
66643: LD_ADDR_VAR 0 11
66647: PUSH
66648: DOUBLE
66649: LD_INT 1
66651: DEC
66652: ST_TO_ADDR
66653: LD_VAR 0 6
66657: PUSH
66658: FOR_TO
66659: IFFALSE 66706
// begin vc_chassis := 31 ;
66661: LD_ADDR_OWVAR 37
66665: PUSH
66666: LD_INT 31
66668: ST_TO_ADDR
// vc_control := control_rider ;
66669: LD_ADDR_OWVAR 38
66673: PUSH
66674: LD_INT 4
66676: ST_TO_ADDR
// animal := CreateVehicle ;
66677: LD_ADDR_VAR 0 12
66681: PUSH
66682: CALL_OW 45
66686: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66687: LD_VAR 0 12
66691: PPUSH
66692: LD_VAR 0 8
66696: PPUSH
66697: LD_INT 0
66699: PPUSH
66700: CALL 68850 0 3
// end ;
66704: GO 66658
66706: POP
66707: POP
// if horses then
66708: LD_VAR 0 5
66712: IFFALSE 66779
// for i = 1 to horses do
66714: LD_ADDR_VAR 0 11
66718: PUSH
66719: DOUBLE
66720: LD_INT 1
66722: DEC
66723: ST_TO_ADDR
66724: LD_VAR 0 5
66728: PUSH
66729: FOR_TO
66730: IFFALSE 66777
// begin hc_class := 21 ;
66732: LD_ADDR_OWVAR 28
66736: PUSH
66737: LD_INT 21
66739: ST_TO_ADDR
// hc_gallery :=  ;
66740: LD_ADDR_OWVAR 33
66744: PUSH
66745: LD_STRING 
66747: ST_TO_ADDR
// animal := CreateHuman ;
66748: LD_ADDR_VAR 0 12
66752: PUSH
66753: CALL_OW 44
66757: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66758: LD_VAR 0 12
66762: PPUSH
66763: LD_VAR 0 8
66767: PPUSH
66768: LD_INT 0
66770: PPUSH
66771: CALL 68850 0 3
// end ;
66775: GO 66729
66777: POP
66778: POP
// if birds then
66779: LD_VAR 0 1
66783: IFFALSE 66850
// for i = 1 to birds do
66785: LD_ADDR_VAR 0 11
66789: PUSH
66790: DOUBLE
66791: LD_INT 1
66793: DEC
66794: ST_TO_ADDR
66795: LD_VAR 0 1
66799: PUSH
66800: FOR_TO
66801: IFFALSE 66848
// begin hc_class := 18 ;
66803: LD_ADDR_OWVAR 28
66807: PUSH
66808: LD_INT 18
66810: ST_TO_ADDR
// hc_gallery =  ;
66811: LD_ADDR_OWVAR 33
66815: PUSH
66816: LD_STRING 
66818: ST_TO_ADDR
// animal := CreateHuman ;
66819: LD_ADDR_VAR 0 12
66823: PUSH
66824: CALL_OW 44
66828: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66829: LD_VAR 0 12
66833: PPUSH
66834: LD_VAR 0 8
66838: PPUSH
66839: LD_INT 0
66841: PPUSH
66842: CALL 68850 0 3
// end ;
66846: GO 66800
66848: POP
66849: POP
// if tigers then
66850: LD_VAR 0 2
66854: IFFALSE 66938
// for i = 1 to tigers do
66856: LD_ADDR_VAR 0 11
66860: PUSH
66861: DOUBLE
66862: LD_INT 1
66864: DEC
66865: ST_TO_ADDR
66866: LD_VAR 0 2
66870: PUSH
66871: FOR_TO
66872: IFFALSE 66936
// begin hc_class = class_tiger ;
66874: LD_ADDR_OWVAR 28
66878: PUSH
66879: LD_INT 14
66881: ST_TO_ADDR
// hc_gallery =  ;
66882: LD_ADDR_OWVAR 33
66886: PUSH
66887: LD_STRING 
66889: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66890: LD_ADDR_OWVAR 35
66894: PUSH
66895: LD_INT 7
66897: NEG
66898: PPUSH
66899: LD_INT 7
66901: PPUSH
66902: CALL_OW 12
66906: ST_TO_ADDR
// animal := CreateHuman ;
66907: LD_ADDR_VAR 0 12
66911: PUSH
66912: CALL_OW 44
66916: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66917: LD_VAR 0 12
66921: PPUSH
66922: LD_VAR 0 8
66926: PPUSH
66927: LD_INT 0
66929: PPUSH
66930: CALL 68850 0 3
// end ;
66934: GO 66871
66936: POP
66937: POP
// if apemans then
66938: LD_VAR 0 3
66942: IFFALSE 67065
// for i = 1 to apemans do
66944: LD_ADDR_VAR 0 11
66948: PUSH
66949: DOUBLE
66950: LD_INT 1
66952: DEC
66953: ST_TO_ADDR
66954: LD_VAR 0 3
66958: PUSH
66959: FOR_TO
66960: IFFALSE 67063
// begin hc_class = class_apeman ;
66962: LD_ADDR_OWVAR 28
66966: PUSH
66967: LD_INT 12
66969: ST_TO_ADDR
// hc_gallery =  ;
66970: LD_ADDR_OWVAR 33
66974: PUSH
66975: LD_STRING 
66977: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66978: LD_ADDR_OWVAR 35
66982: PUSH
66983: LD_INT 2
66985: NEG
66986: PPUSH
66987: LD_INT 2
66989: PPUSH
66990: CALL_OW 12
66994: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66995: LD_ADDR_OWVAR 31
66999: PUSH
67000: LD_INT 1
67002: PPUSH
67003: LD_INT 3
67005: PPUSH
67006: CALL_OW 12
67010: PUSH
67011: LD_INT 1
67013: PPUSH
67014: LD_INT 3
67016: PPUSH
67017: CALL_OW 12
67021: PUSH
67022: LD_INT 0
67024: PUSH
67025: LD_INT 0
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: LIST
67032: LIST
67033: ST_TO_ADDR
// animal := CreateHuman ;
67034: LD_ADDR_VAR 0 12
67038: PUSH
67039: CALL_OW 44
67043: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67044: LD_VAR 0 12
67048: PPUSH
67049: LD_VAR 0 8
67053: PPUSH
67054: LD_INT 0
67056: PPUSH
67057: CALL 68850 0 3
// end ;
67061: GO 66959
67063: POP
67064: POP
// if enchidnas then
67065: LD_VAR 0 4
67069: IFFALSE 67136
// for i = 1 to enchidnas do
67071: LD_ADDR_VAR 0 11
67075: PUSH
67076: DOUBLE
67077: LD_INT 1
67079: DEC
67080: ST_TO_ADDR
67081: LD_VAR 0 4
67085: PUSH
67086: FOR_TO
67087: IFFALSE 67134
// begin hc_class = 13 ;
67089: LD_ADDR_OWVAR 28
67093: PUSH
67094: LD_INT 13
67096: ST_TO_ADDR
// hc_gallery =  ;
67097: LD_ADDR_OWVAR 33
67101: PUSH
67102: LD_STRING 
67104: ST_TO_ADDR
// animal := CreateHuman ;
67105: LD_ADDR_VAR 0 12
67109: PUSH
67110: CALL_OW 44
67114: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67115: LD_VAR 0 12
67119: PPUSH
67120: LD_VAR 0 8
67124: PPUSH
67125: LD_INT 0
67127: PPUSH
67128: CALL 68850 0 3
// end ;
67132: GO 67086
67134: POP
67135: POP
// if fishes then
67136: LD_VAR 0 7
67140: IFFALSE 67207
// for i = 1 to fishes do
67142: LD_ADDR_VAR 0 11
67146: PUSH
67147: DOUBLE
67148: LD_INT 1
67150: DEC
67151: ST_TO_ADDR
67152: LD_VAR 0 7
67156: PUSH
67157: FOR_TO
67158: IFFALSE 67205
// begin hc_class = 20 ;
67160: LD_ADDR_OWVAR 28
67164: PUSH
67165: LD_INT 20
67167: ST_TO_ADDR
// hc_gallery =  ;
67168: LD_ADDR_OWVAR 33
67172: PUSH
67173: LD_STRING 
67175: ST_TO_ADDR
// animal := CreateHuman ;
67176: LD_ADDR_VAR 0 12
67180: PUSH
67181: CALL_OW 44
67185: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
67186: LD_VAR 0 12
67190: PPUSH
67191: LD_VAR 0 9
67195: PPUSH
67196: LD_INT 0
67198: PPUSH
67199: CALL 68850 0 3
// end ;
67203: GO 67157
67205: POP
67206: POP
// end ;
67207: LD_VAR 0 10
67211: RET
// export function WantHeal ( sci , unit ) ; begin
67212: LD_INT 0
67214: PPUSH
// if GetTaskList ( sci ) > 0 then
67215: LD_VAR 0 1
67219: PPUSH
67220: CALL_OW 437
67224: PUSH
67225: LD_INT 0
67227: GREATER
67228: IFFALSE 67300
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
67230: LD_VAR 0 1
67234: PPUSH
67235: CALL_OW 437
67239: PUSH
67240: LD_INT 1
67242: ARRAY
67243: PUSH
67244: LD_INT 1
67246: ARRAY
67247: PUSH
67248: LD_STRING l
67250: EQUAL
67251: IFFALSE 67278
67253: PUSH
67254: LD_VAR 0 1
67258: PPUSH
67259: CALL_OW 437
67263: PUSH
67264: LD_INT 1
67266: ARRAY
67267: PUSH
67268: LD_INT 4
67270: ARRAY
67271: PUSH
67272: LD_VAR 0 2
67276: EQUAL
67277: AND
67278: IFFALSE 67290
// result := true else
67280: LD_ADDR_VAR 0 3
67284: PUSH
67285: LD_INT 1
67287: ST_TO_ADDR
67288: GO 67298
// result := false ;
67290: LD_ADDR_VAR 0 3
67294: PUSH
67295: LD_INT 0
67297: ST_TO_ADDR
// end else
67298: GO 67308
// result := false ;
67300: LD_ADDR_VAR 0 3
67304: PUSH
67305: LD_INT 0
67307: ST_TO_ADDR
// end ;
67308: LD_VAR 0 3
67312: RET
// export function HealTarget ( sci ) ; begin
67313: LD_INT 0
67315: PPUSH
// if not sci then
67316: LD_VAR 0 1
67320: NOT
67321: IFFALSE 67325
// exit ;
67323: GO 67390
// result := 0 ;
67325: LD_ADDR_VAR 0 2
67329: PUSH
67330: LD_INT 0
67332: ST_TO_ADDR
// if GetTaskList ( sci ) then
67333: LD_VAR 0 1
67337: PPUSH
67338: CALL_OW 437
67342: IFFALSE 67390
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67344: LD_VAR 0 1
67348: PPUSH
67349: CALL_OW 437
67353: PUSH
67354: LD_INT 1
67356: ARRAY
67357: PUSH
67358: LD_INT 1
67360: ARRAY
67361: PUSH
67362: LD_STRING l
67364: EQUAL
67365: IFFALSE 67390
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67367: LD_ADDR_VAR 0 2
67371: PUSH
67372: LD_VAR 0 1
67376: PPUSH
67377: CALL_OW 437
67381: PUSH
67382: LD_INT 1
67384: ARRAY
67385: PUSH
67386: LD_INT 4
67388: ARRAY
67389: ST_TO_ADDR
// end ;
67390: LD_VAR 0 2
67394: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67395: LD_INT 0
67397: PPUSH
67398: PPUSH
67399: PPUSH
67400: PPUSH
// if not base_units then
67401: LD_VAR 0 1
67405: NOT
67406: IFFALSE 67410
// exit ;
67408: GO 67497
// result := false ;
67410: LD_ADDR_VAR 0 2
67414: PUSH
67415: LD_INT 0
67417: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67418: LD_ADDR_VAR 0 5
67422: PUSH
67423: LD_VAR 0 1
67427: PPUSH
67428: LD_INT 21
67430: PUSH
67431: LD_INT 3
67433: PUSH
67434: EMPTY
67435: LIST
67436: LIST
67437: PPUSH
67438: CALL_OW 72
67442: ST_TO_ADDR
// if not tmp then
67443: LD_VAR 0 5
67447: NOT
67448: IFFALSE 67452
// exit ;
67450: GO 67497
// for i in tmp do
67452: LD_ADDR_VAR 0 3
67456: PUSH
67457: LD_VAR 0 5
67461: PUSH
67462: FOR_IN
67463: IFFALSE 67495
// begin result := EnemyInRange ( i , 22 ) ;
67465: LD_ADDR_VAR 0 2
67469: PUSH
67470: LD_VAR 0 3
67474: PPUSH
67475: LD_INT 22
67477: PPUSH
67478: CALL 64922 0 2
67482: ST_TO_ADDR
// if result then
67483: LD_VAR 0 2
67487: IFFALSE 67493
// exit ;
67489: POP
67490: POP
67491: GO 67497
// end ;
67493: GO 67462
67495: POP
67496: POP
// end ;
67497: LD_VAR 0 2
67501: RET
// export function FilterByTag ( units , tag ) ; begin
67502: LD_INT 0
67504: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
67505: LD_ADDR_VAR 0 3
67509: PUSH
67510: LD_VAR 0 1
67514: PPUSH
67515: LD_INT 120
67517: PUSH
67518: LD_VAR 0 2
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: PPUSH
67527: CALL_OW 72
67531: ST_TO_ADDR
// end ;
67532: LD_VAR 0 3
67536: RET
// export function IsDriver ( un ) ; begin
67537: LD_INT 0
67539: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67540: LD_ADDR_VAR 0 2
67544: PUSH
67545: LD_VAR 0 1
67549: PUSH
67550: LD_INT 55
67552: PUSH
67553: EMPTY
67554: LIST
67555: PPUSH
67556: CALL_OW 69
67560: IN
67561: ST_TO_ADDR
// end ;
67562: LD_VAR 0 2
67566: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67567: LD_INT 0
67569: PPUSH
67570: PPUSH
// list := [ ] ;
67571: LD_ADDR_VAR 0 5
67575: PUSH
67576: EMPTY
67577: ST_TO_ADDR
// case d of 0 :
67578: LD_VAR 0 3
67582: PUSH
67583: LD_INT 0
67585: DOUBLE
67586: EQUAL
67587: IFTRUE 67591
67589: GO 67724
67591: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67592: LD_ADDR_VAR 0 5
67596: PUSH
67597: LD_VAR 0 1
67601: PUSH
67602: LD_INT 4
67604: MINUS
67605: PUSH
67606: LD_VAR 0 2
67610: PUSH
67611: LD_INT 4
67613: MINUS
67614: PUSH
67615: LD_INT 2
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: LIST
67622: PUSH
67623: LD_VAR 0 1
67627: PUSH
67628: LD_INT 3
67630: MINUS
67631: PUSH
67632: LD_VAR 0 2
67636: PUSH
67637: LD_INT 1
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: LIST
67644: PUSH
67645: LD_VAR 0 1
67649: PUSH
67650: LD_INT 4
67652: PLUS
67653: PUSH
67654: LD_VAR 0 2
67658: PUSH
67659: LD_INT 4
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: LIST
67666: PUSH
67667: LD_VAR 0 1
67671: PUSH
67672: LD_INT 3
67674: PLUS
67675: PUSH
67676: LD_VAR 0 2
67680: PUSH
67681: LD_INT 3
67683: PLUS
67684: PUSH
67685: LD_INT 5
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: LIST
67692: PUSH
67693: LD_VAR 0 1
67697: PUSH
67698: LD_VAR 0 2
67702: PUSH
67703: LD_INT 4
67705: PLUS
67706: PUSH
67707: LD_INT 0
67709: PUSH
67710: EMPTY
67711: LIST
67712: LIST
67713: LIST
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: LIST
67719: LIST
67720: LIST
67721: ST_TO_ADDR
// end ; 1 :
67722: GO 68422
67724: LD_INT 1
67726: DOUBLE
67727: EQUAL
67728: IFTRUE 67732
67730: GO 67865
67732: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67733: LD_ADDR_VAR 0 5
67737: PUSH
67738: LD_VAR 0 1
67742: PUSH
67743: LD_VAR 0 2
67747: PUSH
67748: LD_INT 4
67750: MINUS
67751: PUSH
67752: LD_INT 3
67754: PUSH
67755: EMPTY
67756: LIST
67757: LIST
67758: LIST
67759: PUSH
67760: LD_VAR 0 1
67764: PUSH
67765: LD_INT 3
67767: MINUS
67768: PUSH
67769: LD_VAR 0 2
67773: PUSH
67774: LD_INT 3
67776: MINUS
67777: PUSH
67778: LD_INT 2
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: LIST
67785: PUSH
67786: LD_VAR 0 1
67790: PUSH
67791: LD_INT 4
67793: MINUS
67794: PUSH
67795: LD_VAR 0 2
67799: PUSH
67800: LD_INT 1
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: LIST
67807: PUSH
67808: LD_VAR 0 1
67812: PUSH
67813: LD_VAR 0 2
67817: PUSH
67818: LD_INT 3
67820: PLUS
67821: PUSH
67822: LD_INT 0
67824: PUSH
67825: EMPTY
67826: LIST
67827: LIST
67828: LIST
67829: PUSH
67830: LD_VAR 0 1
67834: PUSH
67835: LD_INT 4
67837: PLUS
67838: PUSH
67839: LD_VAR 0 2
67843: PUSH
67844: LD_INT 4
67846: PLUS
67847: PUSH
67848: LD_INT 5
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: LIST
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: LIST
67860: LIST
67861: LIST
67862: ST_TO_ADDR
// end ; 2 :
67863: GO 68422
67865: LD_INT 2
67867: DOUBLE
67868: EQUAL
67869: IFTRUE 67873
67871: GO 68002
67873: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67874: LD_ADDR_VAR 0 5
67878: PUSH
67879: LD_VAR 0 1
67883: PUSH
67884: LD_VAR 0 2
67888: PUSH
67889: LD_INT 3
67891: MINUS
67892: PUSH
67893: LD_INT 3
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: LIST
67900: PUSH
67901: LD_VAR 0 1
67905: PUSH
67906: LD_INT 4
67908: PLUS
67909: PUSH
67910: LD_VAR 0 2
67914: PUSH
67915: LD_INT 4
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: LIST
67922: PUSH
67923: LD_VAR 0 1
67927: PUSH
67928: LD_VAR 0 2
67932: PUSH
67933: LD_INT 4
67935: PLUS
67936: PUSH
67937: LD_INT 0
67939: PUSH
67940: EMPTY
67941: LIST
67942: LIST
67943: LIST
67944: PUSH
67945: LD_VAR 0 1
67949: PUSH
67950: LD_INT 3
67952: MINUS
67953: PUSH
67954: LD_VAR 0 2
67958: PUSH
67959: LD_INT 1
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: LIST
67966: PUSH
67967: LD_VAR 0 1
67971: PUSH
67972: LD_INT 4
67974: MINUS
67975: PUSH
67976: LD_VAR 0 2
67980: PUSH
67981: LD_INT 4
67983: MINUS
67984: PUSH
67985: LD_INT 2
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: LIST
67992: PUSH
67993: EMPTY
67994: LIST
67995: LIST
67996: LIST
67997: LIST
67998: LIST
67999: ST_TO_ADDR
// end ; 3 :
68000: GO 68422
68002: LD_INT 3
68004: DOUBLE
68005: EQUAL
68006: IFTRUE 68010
68008: GO 68143
68010: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
68011: LD_ADDR_VAR 0 5
68015: PUSH
68016: LD_VAR 0 1
68020: PUSH
68021: LD_INT 3
68023: PLUS
68024: PUSH
68025: LD_VAR 0 2
68029: PUSH
68030: LD_INT 4
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: LIST
68037: PUSH
68038: LD_VAR 0 1
68042: PUSH
68043: LD_INT 4
68045: PLUS
68046: PUSH
68047: LD_VAR 0 2
68051: PUSH
68052: LD_INT 4
68054: PLUS
68055: PUSH
68056: LD_INT 5
68058: PUSH
68059: EMPTY
68060: LIST
68061: LIST
68062: LIST
68063: PUSH
68064: LD_VAR 0 1
68068: PUSH
68069: LD_INT 4
68071: MINUS
68072: PUSH
68073: LD_VAR 0 2
68077: PUSH
68078: LD_INT 1
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: LIST
68085: PUSH
68086: LD_VAR 0 1
68090: PUSH
68091: LD_VAR 0 2
68095: PUSH
68096: LD_INT 4
68098: MINUS
68099: PUSH
68100: LD_INT 3
68102: PUSH
68103: EMPTY
68104: LIST
68105: LIST
68106: LIST
68107: PUSH
68108: LD_VAR 0 1
68112: PUSH
68113: LD_INT 3
68115: MINUS
68116: PUSH
68117: LD_VAR 0 2
68121: PUSH
68122: LD_INT 3
68124: MINUS
68125: PUSH
68126: LD_INT 2
68128: PUSH
68129: EMPTY
68130: LIST
68131: LIST
68132: LIST
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: LIST
68138: LIST
68139: LIST
68140: ST_TO_ADDR
// end ; 4 :
68141: GO 68422
68143: LD_INT 4
68145: DOUBLE
68146: EQUAL
68147: IFTRUE 68151
68149: GO 68284
68151: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
68152: LD_ADDR_VAR 0 5
68156: PUSH
68157: LD_VAR 0 1
68161: PUSH
68162: LD_VAR 0 2
68166: PUSH
68167: LD_INT 4
68169: PLUS
68170: PUSH
68171: LD_INT 0
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: LIST
68178: PUSH
68179: LD_VAR 0 1
68183: PUSH
68184: LD_INT 3
68186: PLUS
68187: PUSH
68188: LD_VAR 0 2
68192: PUSH
68193: LD_INT 3
68195: PLUS
68196: PUSH
68197: LD_INT 5
68199: PUSH
68200: EMPTY
68201: LIST
68202: LIST
68203: LIST
68204: PUSH
68205: LD_VAR 0 1
68209: PUSH
68210: LD_INT 4
68212: PLUS
68213: PUSH
68214: LD_VAR 0 2
68218: PUSH
68219: LD_INT 4
68221: PUSH
68222: EMPTY
68223: LIST
68224: LIST
68225: LIST
68226: PUSH
68227: LD_VAR 0 1
68231: PUSH
68232: LD_VAR 0 2
68236: PUSH
68237: LD_INT 3
68239: MINUS
68240: PUSH
68241: LD_INT 3
68243: PUSH
68244: EMPTY
68245: LIST
68246: LIST
68247: LIST
68248: PUSH
68249: LD_VAR 0 1
68253: PUSH
68254: LD_INT 4
68256: MINUS
68257: PUSH
68258: LD_VAR 0 2
68262: PUSH
68263: LD_INT 4
68265: MINUS
68266: PUSH
68267: LD_INT 2
68269: PUSH
68270: EMPTY
68271: LIST
68272: LIST
68273: LIST
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: LIST
68279: LIST
68280: LIST
68281: ST_TO_ADDR
// end ; 5 :
68282: GO 68422
68284: LD_INT 5
68286: DOUBLE
68287: EQUAL
68288: IFTRUE 68292
68290: GO 68421
68292: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
68293: LD_ADDR_VAR 0 5
68297: PUSH
68298: LD_VAR 0 1
68302: PUSH
68303: LD_INT 4
68305: MINUS
68306: PUSH
68307: LD_VAR 0 2
68311: PUSH
68312: LD_INT 1
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: LIST
68319: PUSH
68320: LD_VAR 0 1
68324: PUSH
68325: LD_VAR 0 2
68329: PUSH
68330: LD_INT 4
68332: MINUS
68333: PUSH
68334: LD_INT 3
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: LIST
68341: PUSH
68342: LD_VAR 0 1
68346: PUSH
68347: LD_INT 4
68349: PLUS
68350: PUSH
68351: LD_VAR 0 2
68355: PUSH
68356: LD_INT 4
68358: PLUS
68359: PUSH
68360: LD_INT 5
68362: PUSH
68363: EMPTY
68364: LIST
68365: LIST
68366: LIST
68367: PUSH
68368: LD_VAR 0 1
68372: PUSH
68373: LD_INT 3
68375: PLUS
68376: PUSH
68377: LD_VAR 0 2
68381: PUSH
68382: LD_INT 4
68384: PUSH
68385: EMPTY
68386: LIST
68387: LIST
68388: LIST
68389: PUSH
68390: LD_VAR 0 1
68394: PUSH
68395: LD_VAR 0 2
68399: PUSH
68400: LD_INT 3
68402: PLUS
68403: PUSH
68404: LD_INT 0
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: LIST
68411: PUSH
68412: EMPTY
68413: LIST
68414: LIST
68415: LIST
68416: LIST
68417: LIST
68418: ST_TO_ADDR
// end ; end ;
68419: GO 68422
68421: POP
// result := list ;
68422: LD_ADDR_VAR 0 4
68426: PUSH
68427: LD_VAR 0 5
68431: ST_TO_ADDR
// end ;
68432: LD_VAR 0 4
68436: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68437: LD_INT 0
68439: PPUSH
68440: PPUSH
68441: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68442: LD_VAR 0 1
68446: NOT
68447: IFTRUE 68475
68449: PUSH
68450: LD_VAR 0 2
68454: PUSH
68455: LD_INT 1
68457: PUSH
68458: LD_INT 2
68460: PUSH
68461: LD_INT 3
68463: PUSH
68464: LD_INT 4
68466: PUSH
68467: EMPTY
68468: LIST
68469: LIST
68470: LIST
68471: LIST
68472: IN
68473: NOT
68474: OR
68475: IFFALSE 68479
// exit ;
68477: GO 68562
// tmp := [ ] ;
68479: LD_ADDR_VAR 0 5
68483: PUSH
68484: EMPTY
68485: ST_TO_ADDR
// for i in units do
68486: LD_ADDR_VAR 0 4
68490: PUSH
68491: LD_VAR 0 1
68495: PUSH
68496: FOR_IN
68497: IFFALSE 68531
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
68499: LD_ADDR_VAR 0 5
68503: PUSH
68504: LD_VAR 0 5
68508: PPUSH
68509: LD_VAR 0 4
68513: PPUSH
68514: LD_VAR 0 2
68518: PPUSH
68519: CALL_OW 259
68523: PPUSH
68524: CALL 69957 0 2
68528: ST_TO_ADDR
68529: GO 68496
68531: POP
68532: POP
// if not tmp then
68533: LD_VAR 0 5
68537: NOT
68538: IFFALSE 68542
// exit ;
68540: GO 68562
// result := SortListByListDesc ( units , tmp ) ;
68542: LD_ADDR_VAR 0 3
68546: PUSH
68547: LD_VAR 0 1
68551: PPUSH
68552: LD_VAR 0 5
68556: PPUSH
68557: CALL_OW 77
68561: ST_TO_ADDR
// end ;
68562: LD_VAR 0 3
68566: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68567: LD_INT 0
68569: PPUSH
68570: PPUSH
68571: PPUSH
// result := false ;
68572: LD_ADDR_VAR 0 3
68576: PUSH
68577: LD_INT 0
68579: ST_TO_ADDR
// if not building then
68580: LD_VAR 0 2
68584: NOT
68585: IFFALSE 68589
// exit ;
68587: GO 68733
// x := GetX ( building ) ;
68589: LD_ADDR_VAR 0 4
68593: PUSH
68594: LD_VAR 0 2
68598: PPUSH
68599: CALL_OW 250
68603: ST_TO_ADDR
// y := GetY ( building ) ;
68604: LD_ADDR_VAR 0 5
68608: PUSH
68609: LD_VAR 0 2
68613: PPUSH
68614: CALL_OW 251
68618: ST_TO_ADDR
// if not x or not y then
68619: LD_VAR 0 4
68623: NOT
68624: IFTRUE 68633
68626: PUSH
68627: LD_VAR 0 5
68631: NOT
68632: OR
68633: IFFALSE 68637
// exit ;
68635: GO 68733
// if GetTaskList ( unit ) then
68637: LD_VAR 0 1
68641: PPUSH
68642: CALL_OW 437
68646: IFFALSE 68733
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68648: LD_STRING e
68650: PUSH
68651: LD_VAR 0 1
68655: PPUSH
68656: CALL_OW 437
68660: PUSH
68661: LD_INT 1
68663: ARRAY
68664: PUSH
68665: LD_INT 1
68667: ARRAY
68668: EQUAL
68669: IFFALSE 68696
68671: PUSH
68672: LD_VAR 0 4
68676: PUSH
68677: LD_VAR 0 1
68681: PPUSH
68682: CALL_OW 437
68686: PUSH
68687: LD_INT 1
68689: ARRAY
68690: PUSH
68691: LD_INT 2
68693: ARRAY
68694: EQUAL
68695: AND
68696: IFFALSE 68723
68698: PUSH
68699: LD_VAR 0 5
68703: PUSH
68704: LD_VAR 0 1
68708: PPUSH
68709: CALL_OW 437
68713: PUSH
68714: LD_INT 1
68716: ARRAY
68717: PUSH
68718: LD_INT 3
68720: ARRAY
68721: EQUAL
68722: AND
68723: IFFALSE 68733
// result := true end ;
68725: LD_ADDR_VAR 0 3
68729: PUSH
68730: LD_INT 1
68732: ST_TO_ADDR
// end ;
68733: LD_VAR 0 3
68737: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
68738: LD_INT 0
68740: PPUSH
// result := false ;
68741: LD_ADDR_VAR 0 4
68745: PUSH
68746: LD_INT 0
68748: ST_TO_ADDR
// if GetTaskList ( unit ) then
68749: LD_VAR 0 1
68753: PPUSH
68754: CALL_OW 437
68758: IFFALSE 68845
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68760: LD_STRING M
68762: PUSH
68763: LD_VAR 0 1
68767: PPUSH
68768: CALL_OW 437
68772: PUSH
68773: LD_INT 1
68775: ARRAY
68776: PUSH
68777: LD_INT 1
68779: ARRAY
68780: EQUAL
68781: IFFALSE 68808
68783: PUSH
68784: LD_VAR 0 2
68788: PUSH
68789: LD_VAR 0 1
68793: PPUSH
68794: CALL_OW 437
68798: PUSH
68799: LD_INT 1
68801: ARRAY
68802: PUSH
68803: LD_INT 2
68805: ARRAY
68806: EQUAL
68807: AND
68808: IFFALSE 68835
68810: PUSH
68811: LD_VAR 0 3
68815: PUSH
68816: LD_VAR 0 1
68820: PPUSH
68821: CALL_OW 437
68825: PUSH
68826: LD_INT 1
68828: ARRAY
68829: PUSH
68830: LD_INT 3
68832: ARRAY
68833: EQUAL
68834: AND
68835: IFFALSE 68845
// result := true ;
68837: LD_ADDR_VAR 0 4
68841: PUSH
68842: LD_INT 1
68844: ST_TO_ADDR
// end ; end ;
68845: LD_VAR 0 4
68849: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68850: LD_INT 0
68852: PPUSH
68853: PPUSH
68854: PPUSH
68855: PPUSH
// if not unit or not area then
68856: LD_VAR 0 1
68860: NOT
68861: IFTRUE 68870
68863: PUSH
68864: LD_VAR 0 2
68868: NOT
68869: OR
68870: IFFALSE 68874
// exit ;
68872: GO 69050
// tmp := AreaToList ( area , i ) ;
68874: LD_ADDR_VAR 0 6
68878: PUSH
68879: LD_VAR 0 2
68883: PPUSH
68884: LD_VAR 0 5
68888: PPUSH
68889: CALL_OW 517
68893: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68894: LD_ADDR_VAR 0 5
68898: PUSH
68899: DOUBLE
68900: LD_INT 1
68902: DEC
68903: ST_TO_ADDR
68904: LD_VAR 0 6
68908: PUSH
68909: LD_INT 1
68911: ARRAY
68912: PUSH
68913: FOR_TO
68914: IFFALSE 69048
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68916: LD_ADDR_VAR 0 7
68920: PUSH
68921: LD_VAR 0 6
68925: PUSH
68926: LD_INT 1
68928: ARRAY
68929: PUSH
68930: LD_VAR 0 5
68934: ARRAY
68935: PUSH
68936: LD_VAR 0 6
68940: PUSH
68941: LD_INT 2
68943: ARRAY
68944: PUSH
68945: LD_VAR 0 5
68949: ARRAY
68950: PUSH
68951: EMPTY
68952: LIST
68953: LIST
68954: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
68955: LD_INT 92
68957: PUSH
68958: LD_VAR 0 7
68962: PUSH
68963: LD_INT 1
68965: ARRAY
68966: PUSH
68967: LD_VAR 0 7
68971: PUSH
68972: LD_INT 2
68974: ARRAY
68975: PUSH
68976: LD_INT 2
68978: PUSH
68979: EMPTY
68980: LIST
68981: LIST
68982: LIST
68983: LIST
68984: PPUSH
68985: CALL_OW 69
68989: PUSH
68990: LD_INT 0
68992: EQUAL
68993: IFFALSE 69046
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68995: LD_VAR 0 1
68999: PPUSH
69000: LD_VAR 0 7
69004: PUSH
69005: LD_INT 1
69007: ARRAY
69008: PPUSH
69009: LD_VAR 0 7
69013: PUSH
69014: LD_INT 2
69016: ARRAY
69017: PPUSH
69018: LD_VAR 0 3
69022: PPUSH
69023: CALL_OW 48
// result := IsPlaced ( unit ) ;
69027: LD_ADDR_VAR 0 4
69031: PUSH
69032: LD_VAR 0 1
69036: PPUSH
69037: CALL_OW 305
69041: ST_TO_ADDR
// exit ;
69042: POP
69043: POP
69044: GO 69050
// end ; end ;
69046: GO 68913
69048: POP
69049: POP
// end ;
69050: LD_VAR 0 4
69054: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
69055: LD_INT 0
69057: PPUSH
69058: PPUSH
69059: PPUSH
// if not side or side > 8 then
69060: LD_VAR 0 1
69064: NOT
69065: IFTRUE 69077
69067: PUSH
69068: LD_VAR 0 1
69072: PUSH
69073: LD_INT 8
69075: GREATER
69076: OR
69077: IFFALSE 69081
// exit ;
69079: GO 69268
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
69081: LD_ADDR_VAR 0 4
69085: PUSH
69086: LD_INT 22
69088: PUSH
69089: LD_VAR 0 1
69093: PUSH
69094: EMPTY
69095: LIST
69096: LIST
69097: PUSH
69098: LD_INT 21
69100: PUSH
69101: LD_INT 3
69103: PUSH
69104: EMPTY
69105: LIST
69106: LIST
69107: PUSH
69108: EMPTY
69109: LIST
69110: LIST
69111: PPUSH
69112: CALL_OW 69
69116: ST_TO_ADDR
// if not tmp then
69117: LD_VAR 0 4
69121: NOT
69122: IFFALSE 69126
// exit ;
69124: GO 69268
// enable_addtolog := true ;
69126: LD_ADDR_OWVAR 81
69130: PUSH
69131: LD_INT 1
69133: ST_TO_ADDR
// AddToLog ( [ ) ;
69134: LD_STRING [
69136: PPUSH
69137: CALL_OW 561
// for i in tmp do
69141: LD_ADDR_VAR 0 3
69145: PUSH
69146: LD_VAR 0 4
69150: PUSH
69151: FOR_IN
69152: IFFALSE 69259
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
69154: LD_STRING [
69156: PUSH
69157: LD_VAR 0 3
69161: PPUSH
69162: CALL_OW 266
69166: STR
69167: PUSH
69168: LD_STRING , 
69170: STR
69171: PUSH
69172: LD_VAR 0 3
69176: PPUSH
69177: CALL_OW 250
69181: STR
69182: PUSH
69183: LD_STRING , 
69185: STR
69186: PUSH
69187: LD_VAR 0 3
69191: PPUSH
69192: CALL_OW 251
69196: STR
69197: PUSH
69198: LD_STRING , 
69200: STR
69201: PUSH
69202: LD_VAR 0 3
69206: PPUSH
69207: CALL_OW 254
69211: STR
69212: PUSH
69213: LD_STRING , 
69215: STR
69216: PUSH
69217: LD_VAR 0 3
69221: PPUSH
69222: LD_INT 1
69224: PPUSH
69225: CALL_OW 268
69229: STR
69230: PUSH
69231: LD_STRING , 
69233: STR
69234: PUSH
69235: LD_VAR 0 3
69239: PPUSH
69240: LD_INT 2
69242: PPUSH
69243: CALL_OW 268
69247: STR
69248: PUSH
69249: LD_STRING ],
69251: STR
69252: PPUSH
69253: CALL_OW 561
// end ;
69257: GO 69151
69259: POP
69260: POP
// AddToLog ( ]; ) ;
69261: LD_STRING ];
69263: PPUSH
69264: CALL_OW 561
// end ;
69268: LD_VAR 0 2
69272: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
69273: LD_INT 0
69275: PPUSH
69276: PPUSH
69277: PPUSH
69278: PPUSH
69279: PPUSH
// if not area or not rate or not max then
69280: LD_VAR 0 1
69284: NOT
69285: IFTRUE 69294
69287: PUSH
69288: LD_VAR 0 2
69292: NOT
69293: OR
69294: IFTRUE 69303
69296: PUSH
69297: LD_VAR 0 4
69301: NOT
69302: OR
69303: IFFALSE 69307
// exit ;
69305: GO 69496
// while 1 do
69307: LD_INT 1
69309: IFFALSE 69496
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
69311: LD_ADDR_VAR 0 9
69315: PUSH
69316: LD_VAR 0 1
69320: PPUSH
69321: LD_INT 1
69323: PPUSH
69324: CALL_OW 287
69328: PUSH
69329: LD_INT 10
69331: MUL
69332: ST_TO_ADDR
// r := rate / 10 ;
69333: LD_ADDR_VAR 0 7
69337: PUSH
69338: LD_VAR 0 2
69342: PUSH
69343: LD_INT 10
69345: DIVREAL
69346: ST_TO_ADDR
// time := 1 1$00 ;
69347: LD_ADDR_VAR 0 8
69351: PUSH
69352: LD_INT 2100
69354: ST_TO_ADDR
// if amount < min then
69355: LD_VAR 0 9
69359: PUSH
69360: LD_VAR 0 3
69364: LESS
69365: IFFALSE 69383
// r := r * 2 else
69367: LD_ADDR_VAR 0 7
69371: PUSH
69372: LD_VAR 0 7
69376: PUSH
69377: LD_INT 2
69379: MUL
69380: ST_TO_ADDR
69381: GO 69409
// if amount > max then
69383: LD_VAR 0 9
69387: PUSH
69388: LD_VAR 0 4
69392: GREATER
69393: IFFALSE 69409
// r := r / 2 ;
69395: LD_ADDR_VAR 0 7
69399: PUSH
69400: LD_VAR 0 7
69404: PUSH
69405: LD_INT 2
69407: DIVREAL
69408: ST_TO_ADDR
// time := time / r ;
69409: LD_ADDR_VAR 0 8
69413: PUSH
69414: LD_VAR 0 8
69418: PUSH
69419: LD_VAR 0 7
69423: DIVREAL
69424: ST_TO_ADDR
// if time < 0 then
69425: LD_VAR 0 8
69429: PUSH
69430: LD_INT 0
69432: LESS
69433: IFFALSE 69450
// time := time * - 1 ;
69435: LD_ADDR_VAR 0 8
69439: PUSH
69440: LD_VAR 0 8
69444: PUSH
69445: LD_INT 1
69447: NEG
69448: MUL
69449: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
69450: LD_VAR 0 8
69454: PUSH
69455: LD_INT 35
69457: PPUSH
69458: LD_INT 875
69460: PPUSH
69461: CALL_OW 12
69465: PLUS
69466: PPUSH
69467: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69471: LD_INT 1
69473: PPUSH
69474: LD_INT 5
69476: PPUSH
69477: CALL_OW 12
69481: PPUSH
69482: LD_VAR 0 1
69486: PPUSH
69487: LD_INT 1
69489: PPUSH
69490: CALL_OW 55
// end ;
69494: GO 69307
// end ;
69496: LD_VAR 0 5
69500: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69501: LD_INT 0
69503: PPUSH
69504: PPUSH
69505: PPUSH
69506: PPUSH
69507: PPUSH
69508: PPUSH
69509: PPUSH
69510: PPUSH
// if not turrets or not factories then
69511: LD_VAR 0 1
69515: NOT
69516: IFTRUE 69525
69518: PUSH
69519: LD_VAR 0 2
69523: NOT
69524: OR
69525: IFFALSE 69529
// exit ;
69527: GO 69836
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69529: LD_ADDR_VAR 0 10
69533: PUSH
69534: LD_INT 5
69536: PUSH
69537: LD_INT 6
69539: PUSH
69540: EMPTY
69541: LIST
69542: LIST
69543: PUSH
69544: LD_INT 2
69546: PUSH
69547: LD_INT 4
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: PUSH
69554: LD_INT 3
69556: PUSH
69557: LD_INT 5
69559: PUSH
69560: EMPTY
69561: LIST
69562: LIST
69563: PUSH
69564: EMPTY
69565: LIST
69566: LIST
69567: LIST
69568: PUSH
69569: LD_INT 24
69571: PUSH
69572: LD_INT 25
69574: PUSH
69575: EMPTY
69576: LIST
69577: LIST
69578: PUSH
69579: LD_INT 23
69581: PUSH
69582: LD_INT 27
69584: PUSH
69585: EMPTY
69586: LIST
69587: LIST
69588: PUSH
69589: EMPTY
69590: LIST
69591: LIST
69592: PUSH
69593: LD_INT 42
69595: PUSH
69596: LD_INT 43
69598: PUSH
69599: EMPTY
69600: LIST
69601: LIST
69602: PUSH
69603: LD_INT 44
69605: PUSH
69606: LD_INT 46
69608: PUSH
69609: EMPTY
69610: LIST
69611: LIST
69612: PUSH
69613: LD_INT 45
69615: PUSH
69616: LD_INT 47
69618: PUSH
69619: EMPTY
69620: LIST
69621: LIST
69622: PUSH
69623: EMPTY
69624: LIST
69625: LIST
69626: LIST
69627: PUSH
69628: EMPTY
69629: LIST
69630: LIST
69631: LIST
69632: ST_TO_ADDR
// result := [ ] ;
69633: LD_ADDR_VAR 0 3
69637: PUSH
69638: EMPTY
69639: ST_TO_ADDR
// for i in turrets do
69640: LD_ADDR_VAR 0 4
69644: PUSH
69645: LD_VAR 0 1
69649: PUSH
69650: FOR_IN
69651: IFFALSE 69834
// begin nat := GetNation ( i ) ;
69653: LD_ADDR_VAR 0 7
69657: PUSH
69658: LD_VAR 0 4
69662: PPUSH
69663: CALL_OW 248
69667: ST_TO_ADDR
// weapon := 0 ;
69668: LD_ADDR_VAR 0 8
69672: PUSH
69673: LD_INT 0
69675: ST_TO_ADDR
// if not nat then
69676: LD_VAR 0 7
69680: NOT
69681: IFFALSE 69685
// continue ;
69683: GO 69650
// for j in list [ nat ] do
69685: LD_ADDR_VAR 0 5
69689: PUSH
69690: LD_VAR 0 10
69694: PUSH
69695: LD_VAR 0 7
69699: ARRAY
69700: PUSH
69701: FOR_IN
69702: IFFALSE 69743
// if GetBWeapon ( i ) = j [ 1 ] then
69704: LD_VAR 0 4
69708: PPUSH
69709: CALL_OW 269
69713: PUSH
69714: LD_VAR 0 5
69718: PUSH
69719: LD_INT 1
69721: ARRAY
69722: EQUAL
69723: IFFALSE 69741
// begin weapon := j [ 2 ] ;
69725: LD_ADDR_VAR 0 8
69729: PUSH
69730: LD_VAR 0 5
69734: PUSH
69735: LD_INT 2
69737: ARRAY
69738: ST_TO_ADDR
// break ;
69739: GO 69743
// end ;
69741: GO 69701
69743: POP
69744: POP
// if not weapon then
69745: LD_VAR 0 8
69749: NOT
69750: IFFALSE 69754
// continue ;
69752: GO 69650
// for k in factories do
69754: LD_ADDR_VAR 0 6
69758: PUSH
69759: LD_VAR 0 2
69763: PUSH
69764: FOR_IN
69765: IFFALSE 69830
// begin weapons := AvailableWeaponList ( k ) ;
69767: LD_ADDR_VAR 0 9
69771: PUSH
69772: LD_VAR 0 6
69776: PPUSH
69777: CALL_OW 478
69781: ST_TO_ADDR
// if not weapons then
69782: LD_VAR 0 9
69786: NOT
69787: IFFALSE 69791
// continue ;
69789: GO 69764
// if weapon in weapons then
69791: LD_VAR 0 8
69795: PUSH
69796: LD_VAR 0 9
69800: IN
69801: IFFALSE 69828
// begin result := [ i , weapon ] ;
69803: LD_ADDR_VAR 0 3
69807: PUSH
69808: LD_VAR 0 4
69812: PUSH
69813: LD_VAR 0 8
69817: PUSH
69818: EMPTY
69819: LIST
69820: LIST
69821: ST_TO_ADDR
// exit ;
69822: POP
69823: POP
69824: POP
69825: POP
69826: GO 69836
// end ; end ;
69828: GO 69764
69830: POP
69831: POP
// end ;
69832: GO 69650
69834: POP
69835: POP
// end ;
69836: LD_VAR 0 3
69840: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69841: LD_INT 0
69843: PPUSH
// if not side or side > 8 then
69844: LD_VAR 0 3
69848: NOT
69849: IFTRUE 69861
69851: PUSH
69852: LD_VAR 0 3
69856: PUSH
69857: LD_INT 8
69859: GREATER
69860: OR
69861: IFFALSE 69865
// exit ;
69863: GO 69924
// if not range then
69865: LD_VAR 0 4
69869: NOT
69870: IFFALSE 69881
// range := - 12 ;
69872: LD_ADDR_VAR 0 4
69876: PUSH
69877: LD_INT 12
69879: NEG
69880: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69881: LD_VAR 0 1
69885: PPUSH
69886: LD_VAR 0 2
69890: PPUSH
69891: LD_VAR 0 3
69895: PPUSH
69896: LD_VAR 0 4
69900: PPUSH
69901: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69905: LD_VAR 0 1
69909: PPUSH
69910: LD_VAR 0 2
69914: PPUSH
69915: LD_VAR 0 3
69919: PPUSH
69920: CALL_OW 331
// end ;
69924: LD_VAR 0 5
69928: RET
// export function Video ( mode ) ; begin
69929: LD_INT 0
69931: PPUSH
// ingame_video = mode ;
69932: LD_ADDR_OWVAR 52
69936: PUSH
69937: LD_VAR 0 1
69941: ST_TO_ADDR
// interface_hidden = mode ;
69942: LD_ADDR_OWVAR 54
69946: PUSH
69947: LD_VAR 0 1
69951: ST_TO_ADDR
// end ;
69952: LD_VAR 0 2
69956: RET
// export function Join ( array , element ) ; begin
69957: LD_INT 0
69959: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69960: LD_ADDR_VAR 0 3
69964: PUSH
69965: LD_VAR 0 1
69969: PPUSH
69970: LD_VAR 0 1
69974: PUSH
69975: LD_INT 1
69977: PLUS
69978: PPUSH
69979: LD_VAR 0 2
69983: PPUSH
69984: CALL_OW 1
69988: ST_TO_ADDR
// end ;
69989: LD_VAR 0 3
69993: RET
// export function JoinUnion ( array , element ) ; begin
69994: LD_INT 0
69996: PPUSH
// result := array union element ;
69997: LD_ADDR_VAR 0 3
70001: PUSH
70002: LD_VAR 0 1
70006: PUSH
70007: LD_VAR 0 2
70011: UNION
70012: ST_TO_ADDR
// end ;
70013: LD_VAR 0 3
70017: RET
// export function GetBehemoths ( side ) ; begin
70018: LD_INT 0
70020: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
70021: LD_ADDR_VAR 0 2
70025: PUSH
70026: LD_INT 22
70028: PUSH
70029: LD_VAR 0 1
70033: PUSH
70034: EMPTY
70035: LIST
70036: LIST
70037: PUSH
70038: LD_INT 31
70040: PUSH
70041: LD_INT 25
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: PUSH
70048: EMPTY
70049: LIST
70050: LIST
70051: PPUSH
70052: CALL_OW 69
70056: ST_TO_ADDR
// end ;
70057: LD_VAR 0 2
70061: RET
// export function Shuffle ( array ) ; var i , index ; begin
70062: LD_INT 0
70064: PPUSH
70065: PPUSH
70066: PPUSH
// result := [ ] ;
70067: LD_ADDR_VAR 0 2
70071: PUSH
70072: EMPTY
70073: ST_TO_ADDR
// if not array then
70074: LD_VAR 0 1
70078: NOT
70079: IFFALSE 70083
// exit ;
70081: GO 70182
// Randomize ;
70083: CALL_OW 10
// for i = array downto 1 do
70087: LD_ADDR_VAR 0 3
70091: PUSH
70092: DOUBLE
70093: LD_VAR 0 1
70097: INC
70098: ST_TO_ADDR
70099: LD_INT 1
70101: PUSH
70102: FOR_DOWNTO
70103: IFFALSE 70180
// begin index := rand ( 1 , array ) ;
70105: LD_ADDR_VAR 0 4
70109: PUSH
70110: LD_INT 1
70112: PPUSH
70113: LD_VAR 0 1
70117: PPUSH
70118: CALL_OW 12
70122: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
70123: LD_ADDR_VAR 0 2
70127: PUSH
70128: LD_VAR 0 2
70132: PPUSH
70133: LD_VAR 0 2
70137: PUSH
70138: LD_INT 1
70140: PLUS
70141: PPUSH
70142: LD_VAR 0 1
70146: PUSH
70147: LD_VAR 0 4
70151: ARRAY
70152: PPUSH
70153: CALL_OW 2
70157: ST_TO_ADDR
// array := Delete ( array , index ) ;
70158: LD_ADDR_VAR 0 1
70162: PUSH
70163: LD_VAR 0 1
70167: PPUSH
70168: LD_VAR 0 4
70172: PPUSH
70173: CALL_OW 3
70177: ST_TO_ADDR
// end ;
70178: GO 70102
70180: POP
70181: POP
// end ;
70182: LD_VAR 0 2
70186: RET
// export function GetBaseMaterials ( base ) ; begin
70187: LD_INT 0
70189: PPUSH
// result := [ 0 , 0 , 0 ] ;
70190: LD_ADDR_VAR 0 2
70194: PUSH
70195: LD_INT 0
70197: PUSH
70198: LD_INT 0
70200: PUSH
70201: LD_INT 0
70203: PUSH
70204: EMPTY
70205: LIST
70206: LIST
70207: LIST
70208: ST_TO_ADDR
// if not base then
70209: LD_VAR 0 1
70213: NOT
70214: IFFALSE 70218
// exit ;
70216: GO 70267
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
70218: LD_ADDR_VAR 0 2
70222: PUSH
70223: LD_VAR 0 1
70227: PPUSH
70228: LD_INT 1
70230: PPUSH
70231: CALL_OW 275
70235: PUSH
70236: LD_VAR 0 1
70240: PPUSH
70241: LD_INT 2
70243: PPUSH
70244: CALL_OW 275
70248: PUSH
70249: LD_VAR 0 1
70253: PPUSH
70254: LD_INT 3
70256: PPUSH
70257: CALL_OW 275
70261: PUSH
70262: EMPTY
70263: LIST
70264: LIST
70265: LIST
70266: ST_TO_ADDR
// end ;
70267: LD_VAR 0 2
70271: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
70272: LD_INT 0
70274: PPUSH
70275: PPUSH
// result := array ;
70276: LD_ADDR_VAR 0 3
70280: PUSH
70281: LD_VAR 0 1
70285: ST_TO_ADDR
// if size >= result then
70286: LD_VAR 0 2
70290: PUSH
70291: LD_VAR 0 3
70295: GREATEREQUAL
70296: IFFALSE 70300
// exit ;
70298: GO 70350
// if size then
70300: LD_VAR 0 2
70304: IFFALSE 70350
// for i := array downto size do
70306: LD_ADDR_VAR 0 4
70310: PUSH
70311: DOUBLE
70312: LD_VAR 0 1
70316: INC
70317: ST_TO_ADDR
70318: LD_VAR 0 2
70322: PUSH
70323: FOR_DOWNTO
70324: IFFALSE 70348
// result := Delete ( result , result ) ;
70326: LD_ADDR_VAR 0 3
70330: PUSH
70331: LD_VAR 0 3
70335: PPUSH
70336: LD_VAR 0 3
70340: PPUSH
70341: CALL_OW 3
70345: ST_TO_ADDR
70346: GO 70323
70348: POP
70349: POP
// end ;
70350: LD_VAR 0 3
70354: RET
// export function ComExit ( unit ) ; var tmp ; begin
70355: LD_INT 0
70357: PPUSH
70358: PPUSH
// if not IsInUnit ( unit ) then
70359: LD_VAR 0 1
70363: PPUSH
70364: CALL_OW 310
70368: NOT
70369: IFFALSE 70373
// exit ;
70371: GO 70433
// tmp := IsInUnit ( unit ) ;
70373: LD_ADDR_VAR 0 3
70377: PUSH
70378: LD_VAR 0 1
70382: PPUSH
70383: CALL_OW 310
70387: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70388: LD_VAR 0 3
70392: PPUSH
70393: CALL_OW 247
70397: PUSH
70398: LD_INT 2
70400: EQUAL
70401: IFFALSE 70414
// ComExitVehicle ( unit ) else
70403: LD_VAR 0 1
70407: PPUSH
70408: CALL_OW 121
70412: GO 70423
// ComExitBuilding ( unit ) ;
70414: LD_VAR 0 1
70418: PPUSH
70419: CALL_OW 122
// result := tmp ;
70423: LD_ADDR_VAR 0 2
70427: PUSH
70428: LD_VAR 0 3
70432: ST_TO_ADDR
// end ;
70433: LD_VAR 0 2
70437: RET
// export function ComExitAll ( units ) ; var i ; begin
70438: LD_INT 0
70440: PPUSH
70441: PPUSH
// if not units then
70442: LD_VAR 0 1
70446: NOT
70447: IFFALSE 70451
// exit ;
70449: GO 70477
// for i in units do
70451: LD_ADDR_VAR 0 3
70455: PUSH
70456: LD_VAR 0 1
70460: PUSH
70461: FOR_IN
70462: IFFALSE 70475
// ComExit ( i ) ;
70464: LD_VAR 0 3
70468: PPUSH
70469: CALL 70355 0 1
70473: GO 70461
70475: POP
70476: POP
// end ;
70477: LD_VAR 0 2
70481: RET
// export function ResetHc ; begin
70482: LD_INT 0
70484: PPUSH
// InitHc ;
70485: CALL_OW 19
// hc_importance := 0 ;
70489: LD_ADDR_OWVAR 32
70493: PUSH
70494: LD_INT 0
70496: ST_TO_ADDR
// end ;
70497: LD_VAR 0 1
70501: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70502: LD_INT 0
70504: PPUSH
70505: PPUSH
70506: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70507: LD_ADDR_VAR 0 6
70511: PUSH
70512: LD_VAR 0 1
70516: PUSH
70517: LD_VAR 0 3
70521: PLUS
70522: PUSH
70523: LD_INT 2
70525: DIV
70526: ST_TO_ADDR
// if _x < 0 then
70527: LD_VAR 0 6
70531: PUSH
70532: LD_INT 0
70534: LESS
70535: IFFALSE 70552
// _x := _x * - 1 ;
70537: LD_ADDR_VAR 0 6
70541: PUSH
70542: LD_VAR 0 6
70546: PUSH
70547: LD_INT 1
70549: NEG
70550: MUL
70551: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70552: LD_ADDR_VAR 0 7
70556: PUSH
70557: LD_VAR 0 2
70561: PUSH
70562: LD_VAR 0 4
70566: PLUS
70567: PUSH
70568: LD_INT 2
70570: DIV
70571: ST_TO_ADDR
// if _y < 0 then
70572: LD_VAR 0 7
70576: PUSH
70577: LD_INT 0
70579: LESS
70580: IFFALSE 70597
// _y := _y * - 1 ;
70582: LD_ADDR_VAR 0 7
70586: PUSH
70587: LD_VAR 0 7
70591: PUSH
70592: LD_INT 1
70594: NEG
70595: MUL
70596: ST_TO_ADDR
// result := [ _x , _y ] ;
70597: LD_ADDR_VAR 0 5
70601: PUSH
70602: LD_VAR 0 6
70606: PUSH
70607: LD_VAR 0 7
70611: PUSH
70612: EMPTY
70613: LIST
70614: LIST
70615: ST_TO_ADDR
// end ;
70616: LD_VAR 0 5
70620: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70621: LD_INT 0
70623: PPUSH
70624: PPUSH
70625: PPUSH
70626: PPUSH
// task := GetTaskList ( unit ) ;
70627: LD_ADDR_VAR 0 7
70631: PUSH
70632: LD_VAR 0 1
70636: PPUSH
70637: CALL_OW 437
70641: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70642: LD_VAR 0 7
70646: NOT
70647: IFFALSE 70666
70649: PUSH
70650: LD_VAR 0 1
70654: PPUSH
70655: LD_VAR 0 2
70659: PPUSH
70660: CALL_OW 308
70664: NOT
70665: AND
70666: IFFALSE 70670
// exit ;
70668: GO 70788
// if IsInArea ( unit , area ) then
70670: LD_VAR 0 1
70674: PPUSH
70675: LD_VAR 0 2
70679: PPUSH
70680: CALL_OW 308
70684: IFFALSE 70702
// begin ComMoveToArea ( unit , goAway ) ;
70686: LD_VAR 0 1
70690: PPUSH
70691: LD_VAR 0 3
70695: PPUSH
70696: CALL_OW 113
// exit ;
70700: GO 70788
// end ; if task [ 1 ] [ 1 ] <> M then
70702: LD_VAR 0 7
70706: PUSH
70707: LD_INT 1
70709: ARRAY
70710: PUSH
70711: LD_INT 1
70713: ARRAY
70714: PUSH
70715: LD_STRING M
70717: NONEQUAL
70718: IFFALSE 70722
// exit ;
70720: GO 70788
// x := task [ 1 ] [ 2 ] ;
70722: LD_ADDR_VAR 0 5
70726: PUSH
70727: LD_VAR 0 7
70731: PUSH
70732: LD_INT 1
70734: ARRAY
70735: PUSH
70736: LD_INT 2
70738: ARRAY
70739: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
70740: LD_ADDR_VAR 0 6
70744: PUSH
70745: LD_VAR 0 7
70749: PUSH
70750: LD_INT 1
70752: ARRAY
70753: PUSH
70754: LD_INT 3
70756: ARRAY
70757: ST_TO_ADDR
// if InArea ( x , y , area ) then
70758: LD_VAR 0 5
70762: PPUSH
70763: LD_VAR 0 6
70767: PPUSH
70768: LD_VAR 0 2
70772: PPUSH
70773: CALL_OW 309
70777: IFFALSE 70788
// ComStop ( unit ) ;
70779: LD_VAR 0 1
70783: PPUSH
70784: CALL_OW 141
// end ;
70788: LD_VAR 0 4
70792: RET
// export function Abs ( value ) ; begin
70793: LD_INT 0
70795: PPUSH
// result := value ;
70796: LD_ADDR_VAR 0 2
70800: PUSH
70801: LD_VAR 0 1
70805: ST_TO_ADDR
// if value < 0 then
70806: LD_VAR 0 1
70810: PUSH
70811: LD_INT 0
70813: LESS
70814: IFFALSE 70831
// result := value * - 1 ;
70816: LD_ADDR_VAR 0 2
70820: PUSH
70821: LD_VAR 0 1
70825: PUSH
70826: LD_INT 1
70828: NEG
70829: MUL
70830: ST_TO_ADDR
// end ;
70831: LD_VAR 0 2
70835: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
70836: LD_INT 0
70838: PPUSH
70839: PPUSH
70840: PPUSH
70841: PPUSH
70842: PPUSH
70843: PPUSH
70844: PPUSH
70845: PPUSH
// if not unit or not building then
70846: LD_VAR 0 1
70850: NOT
70851: IFTRUE 70860
70853: PUSH
70854: LD_VAR 0 2
70858: NOT
70859: OR
70860: IFFALSE 70864
// exit ;
70862: GO 71092
// x := GetX ( building ) ;
70864: LD_ADDR_VAR 0 4
70868: PUSH
70869: LD_VAR 0 2
70873: PPUSH
70874: CALL_OW 250
70878: ST_TO_ADDR
// y := GetY ( building ) ;
70879: LD_ADDR_VAR 0 6
70883: PUSH
70884: LD_VAR 0 2
70888: PPUSH
70889: CALL_OW 251
70893: ST_TO_ADDR
// d := GetDir ( building ) ;
70894: LD_ADDR_VAR 0 8
70898: PUSH
70899: LD_VAR 0 2
70903: PPUSH
70904: CALL_OW 254
70908: ST_TO_ADDR
// r := 4 ;
70909: LD_ADDR_VAR 0 9
70913: PUSH
70914: LD_INT 4
70916: ST_TO_ADDR
// for i := 1 to 5 do
70917: LD_ADDR_VAR 0 10
70921: PUSH
70922: DOUBLE
70923: LD_INT 1
70925: DEC
70926: ST_TO_ADDR
70927: LD_INT 5
70929: PUSH
70930: FOR_TO
70931: IFFALSE 71090
// begin _x := ShiftX ( x , d , r + i ) ;
70933: LD_ADDR_VAR 0 5
70937: PUSH
70938: LD_VAR 0 4
70942: PPUSH
70943: LD_VAR 0 8
70947: PPUSH
70948: LD_VAR 0 9
70952: PUSH
70953: LD_VAR 0 10
70957: PLUS
70958: PPUSH
70959: CALL_OW 272
70963: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70964: LD_ADDR_VAR 0 7
70968: PUSH
70969: LD_VAR 0 6
70973: PPUSH
70974: LD_VAR 0 8
70978: PPUSH
70979: LD_VAR 0 9
70983: PUSH
70984: LD_VAR 0 10
70988: PLUS
70989: PPUSH
70990: CALL_OW 273
70994: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70995: LD_VAR 0 5
70999: PPUSH
71000: LD_VAR 0 7
71004: PPUSH
71005: CALL_OW 488
71009: IFFALSE 71044
71011: PUSH
71012: LD_VAR 0 5
71016: PPUSH
71017: LD_VAR 0 7
71021: PPUSH
71022: CALL_OW 428
71026: PPUSH
71027: CALL_OW 247
71031: PUSH
71032: LD_INT 3
71034: PUSH
71035: LD_INT 2
71037: PUSH
71038: EMPTY
71039: LIST
71040: LIST
71041: IN
71042: NOT
71043: AND
71044: IFFALSE 71088
// begin ComMoveXY ( unit , _x , _y ) ;
71046: LD_VAR 0 1
71050: PPUSH
71051: LD_VAR 0 5
71055: PPUSH
71056: LD_VAR 0 7
71060: PPUSH
71061: CALL_OW 111
// result := [ _x , _y ] ;
71065: LD_ADDR_VAR 0 3
71069: PUSH
71070: LD_VAR 0 5
71074: PUSH
71075: LD_VAR 0 7
71079: PUSH
71080: EMPTY
71081: LIST
71082: LIST
71083: ST_TO_ADDR
// exit ;
71084: POP
71085: POP
71086: GO 71092
// end ; end ;
71088: GO 70930
71090: POP
71091: POP
// end ;
71092: LD_VAR 0 3
71096: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
71097: LD_INT 0
71099: PPUSH
71100: PPUSH
71101: PPUSH
// result := 0 ;
71102: LD_ADDR_VAR 0 3
71106: PUSH
71107: LD_INT 0
71109: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
71110: LD_VAR 0 1
71114: PUSH
71115: LD_INT 0
71117: LESS
71118: IFTRUE 71130
71120: PUSH
71121: LD_VAR 0 1
71125: PUSH
71126: LD_INT 8
71128: GREATER
71129: OR
71130: IFTRUE 71142
71132: PUSH
71133: LD_VAR 0 2
71137: PUSH
71138: LD_INT 0
71140: LESS
71141: OR
71142: IFTRUE 71154
71144: PUSH
71145: LD_VAR 0 2
71149: PUSH
71150: LD_INT 8
71152: GREATER
71153: OR
71154: IFFALSE 71158
// exit ;
71156: GO 71233
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
71158: LD_ADDR_VAR 0 4
71162: PUSH
71163: LD_INT 22
71165: PUSH
71166: LD_VAR 0 2
71170: PUSH
71171: EMPTY
71172: LIST
71173: LIST
71174: PPUSH
71175: CALL_OW 69
71179: PUSH
71180: FOR_IN
71181: IFFALSE 71231
// begin un := UnitShoot ( i ) ;
71183: LD_ADDR_VAR 0 5
71187: PUSH
71188: LD_VAR 0 4
71192: PPUSH
71193: CALL_OW 504
71197: ST_TO_ADDR
// if GetSide ( un ) = side1 then
71198: LD_VAR 0 5
71202: PPUSH
71203: CALL_OW 255
71207: PUSH
71208: LD_VAR 0 1
71212: EQUAL
71213: IFFALSE 71229
// begin result := un ;
71215: LD_ADDR_VAR 0 3
71219: PUSH
71220: LD_VAR 0 5
71224: ST_TO_ADDR
// exit ;
71225: POP
71226: POP
71227: GO 71233
// end ; end ;
71229: GO 71180
71231: POP
71232: POP
// end ;
71233: LD_VAR 0 3
71237: RET
// export function GetCargoBay ( units ) ; begin
71238: LD_INT 0
71240: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
71241: LD_ADDR_VAR 0 2
71245: PUSH
71246: LD_VAR 0 1
71250: PPUSH
71251: LD_INT 2
71253: PUSH
71254: LD_INT 34
71256: PUSH
71257: LD_INT 12
71259: PUSH
71260: EMPTY
71261: LIST
71262: LIST
71263: PUSH
71264: LD_INT 34
71266: PUSH
71267: LD_INT 51
71269: PUSH
71270: EMPTY
71271: LIST
71272: LIST
71273: PUSH
71274: LD_INT 34
71276: PUSH
71277: LD_INT 32
71279: PUSH
71280: EMPTY
71281: LIST
71282: LIST
71283: PUSH
71284: LD_INT 34
71286: PUSH
71287: LD_INT 89
71289: PUSH
71290: EMPTY
71291: LIST
71292: LIST
71293: PUSH
71294: EMPTY
71295: LIST
71296: LIST
71297: LIST
71298: LIST
71299: LIST
71300: PPUSH
71301: CALL_OW 72
71305: ST_TO_ADDR
// end ;
71306: LD_VAR 0 2
71310: RET
// export function Negate ( value ) ; begin
71311: LD_INT 0
71313: PPUSH
// result := not value ;
71314: LD_ADDR_VAR 0 2
71318: PUSH
71319: LD_VAR 0 1
71323: NOT
71324: ST_TO_ADDR
// end ;
71325: LD_VAR 0 2
71329: RET
// export function Inc ( value ) ; begin
71330: LD_INT 0
71332: PPUSH
// result := value + 1 ;
71333: LD_ADDR_VAR 0 2
71337: PUSH
71338: LD_VAR 0 1
71342: PUSH
71343: LD_INT 1
71345: PLUS
71346: ST_TO_ADDR
// end ;
71347: LD_VAR 0 2
71351: RET
// export function Dec ( value ) ; begin
71352: LD_INT 0
71354: PPUSH
// result := value - 1 ;
71355: LD_ADDR_VAR 0 2
71359: PUSH
71360: LD_VAR 0 1
71364: PUSH
71365: LD_INT 1
71367: MINUS
71368: ST_TO_ADDR
// end ;
71369: LD_VAR 0 2
71373: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
71374: LD_INT 0
71376: PPUSH
71377: PPUSH
71378: PPUSH
71379: PPUSH
71380: PPUSH
71381: PPUSH
71382: PPUSH
71383: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
71384: LD_VAR 0 1
71388: PPUSH
71389: LD_VAR 0 2
71393: PPUSH
71394: CALL_OW 488
71398: NOT
71399: IFTRUE 71418
71401: PUSH
71402: LD_VAR 0 3
71406: PPUSH
71407: LD_VAR 0 4
71411: PPUSH
71412: CALL_OW 488
71416: NOT
71417: OR
71418: IFFALSE 71431
// begin result := - 1 ;
71420: LD_ADDR_VAR 0 5
71424: PUSH
71425: LD_INT 1
71427: NEG
71428: ST_TO_ADDR
// exit ;
71429: GO 71666
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
71431: LD_ADDR_VAR 0 12
71435: PUSH
71436: LD_VAR 0 1
71440: PPUSH
71441: LD_VAR 0 2
71445: PPUSH
71446: LD_VAR 0 3
71450: PPUSH
71451: LD_VAR 0 4
71455: PPUSH
71456: CALL 70502 0 4
71460: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
71461: LD_ADDR_VAR 0 11
71465: PUSH
71466: LD_VAR 0 1
71470: PPUSH
71471: LD_VAR 0 2
71475: PPUSH
71476: LD_VAR 0 12
71480: PUSH
71481: LD_INT 1
71483: ARRAY
71484: PPUSH
71485: LD_VAR 0 12
71489: PUSH
71490: LD_INT 2
71492: ARRAY
71493: PPUSH
71494: CALL_OW 298
71498: ST_TO_ADDR
// distance := 9999 ;
71499: LD_ADDR_VAR 0 10
71503: PUSH
71504: LD_INT 9999
71506: ST_TO_ADDR
// for i := 0 to 5 do
71507: LD_ADDR_VAR 0 6
71511: PUSH
71512: DOUBLE
71513: LD_INT 0
71515: DEC
71516: ST_TO_ADDR
71517: LD_INT 5
71519: PUSH
71520: FOR_TO
71521: IFFALSE 71664
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71523: LD_ADDR_VAR 0 7
71527: PUSH
71528: LD_VAR 0 1
71532: PPUSH
71533: LD_VAR 0 6
71537: PPUSH
71538: LD_VAR 0 11
71542: PPUSH
71543: CALL_OW 272
71547: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71548: LD_ADDR_VAR 0 8
71552: PUSH
71553: LD_VAR 0 2
71557: PPUSH
71558: LD_VAR 0 6
71562: PPUSH
71563: LD_VAR 0 11
71567: PPUSH
71568: CALL_OW 273
71572: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71573: LD_VAR 0 7
71577: PPUSH
71578: LD_VAR 0 8
71582: PPUSH
71583: CALL_OW 488
71587: NOT
71588: IFFALSE 71592
// continue ;
71590: GO 71520
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71592: LD_ADDR_VAR 0 9
71596: PUSH
71597: LD_VAR 0 12
71601: PUSH
71602: LD_INT 1
71604: ARRAY
71605: PPUSH
71606: LD_VAR 0 12
71610: PUSH
71611: LD_INT 2
71613: ARRAY
71614: PPUSH
71615: LD_VAR 0 7
71619: PPUSH
71620: LD_VAR 0 8
71624: PPUSH
71625: CALL_OW 298
71629: ST_TO_ADDR
// if tmp < distance then
71630: LD_VAR 0 9
71634: PUSH
71635: LD_VAR 0 10
71639: LESS
71640: IFFALSE 71662
// begin result := i ;
71642: LD_ADDR_VAR 0 5
71646: PUSH
71647: LD_VAR 0 6
71651: ST_TO_ADDR
// distance := tmp ;
71652: LD_ADDR_VAR 0 10
71656: PUSH
71657: LD_VAR 0 9
71661: ST_TO_ADDR
// end ; end ;
71662: GO 71520
71664: POP
71665: POP
// end ;
71666: LD_VAR 0 5
71670: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71671: LD_INT 0
71673: PPUSH
71674: PPUSH
// if not driver or not IsInUnit ( driver ) then
71675: LD_VAR 0 1
71679: NOT
71680: IFTRUE 71694
71682: PUSH
71683: LD_VAR 0 1
71687: PPUSH
71688: CALL_OW 310
71692: NOT
71693: OR
71694: IFFALSE 71698
// exit ;
71696: GO 71788
// vehicle := IsInUnit ( driver ) ;
71698: LD_ADDR_VAR 0 3
71702: PUSH
71703: LD_VAR 0 1
71707: PPUSH
71708: CALL_OW 310
71712: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71713: LD_VAR 0 1
71717: PPUSH
71718: LD_STRING \
71720: PUSH
71721: LD_INT 0
71723: PUSH
71724: LD_INT 0
71726: PUSH
71727: LD_INT 0
71729: PUSH
71730: LD_INT 0
71732: PUSH
71733: LD_INT 0
71735: PUSH
71736: LD_INT 0
71738: PUSH
71739: EMPTY
71740: LIST
71741: LIST
71742: LIST
71743: LIST
71744: LIST
71745: LIST
71746: LIST
71747: PUSH
71748: LD_STRING E
71750: PUSH
71751: LD_INT 0
71753: PUSH
71754: LD_INT 0
71756: PUSH
71757: LD_VAR 0 3
71761: PUSH
71762: LD_INT 0
71764: PUSH
71765: LD_INT 0
71767: PUSH
71768: LD_INT 0
71770: PUSH
71771: EMPTY
71772: LIST
71773: LIST
71774: LIST
71775: LIST
71776: LIST
71777: LIST
71778: LIST
71779: PUSH
71780: EMPTY
71781: LIST
71782: LIST
71783: PPUSH
71784: CALL_OW 446
// end ;
71788: LD_VAR 0 2
71792: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71793: LD_INT 0
71795: PPUSH
71796: PPUSH
// if not driver or not IsInUnit ( driver ) then
71797: LD_VAR 0 1
71801: NOT
71802: IFTRUE 71816
71804: PUSH
71805: LD_VAR 0 1
71809: PPUSH
71810: CALL_OW 310
71814: NOT
71815: OR
71816: IFFALSE 71820
// exit ;
71818: GO 71910
// vehicle := IsInUnit ( driver ) ;
71820: LD_ADDR_VAR 0 3
71824: PUSH
71825: LD_VAR 0 1
71829: PPUSH
71830: CALL_OW 310
71834: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71835: LD_VAR 0 1
71839: PPUSH
71840: LD_STRING \
71842: PUSH
71843: LD_INT 0
71845: PUSH
71846: LD_INT 0
71848: PUSH
71849: LD_INT 0
71851: PUSH
71852: LD_INT 0
71854: PUSH
71855: LD_INT 0
71857: PUSH
71858: LD_INT 0
71860: PUSH
71861: EMPTY
71862: LIST
71863: LIST
71864: LIST
71865: LIST
71866: LIST
71867: LIST
71868: LIST
71869: PUSH
71870: LD_STRING E
71872: PUSH
71873: LD_INT 0
71875: PUSH
71876: LD_INT 0
71878: PUSH
71879: LD_VAR 0 3
71883: PUSH
71884: LD_INT 0
71886: PUSH
71887: LD_INT 0
71889: PUSH
71890: LD_INT 0
71892: PUSH
71893: EMPTY
71894: LIST
71895: LIST
71896: LIST
71897: LIST
71898: LIST
71899: LIST
71900: LIST
71901: PUSH
71902: EMPTY
71903: LIST
71904: LIST
71905: PPUSH
71906: CALL_OW 447
// end ;
71910: LD_VAR 0 2
71914: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
71915: LD_INT 0
71917: PPUSH
71918: PPUSH
71919: PPUSH
// tmp := [ ] ;
71920: LD_ADDR_VAR 0 5
71924: PUSH
71925: EMPTY
71926: ST_TO_ADDR
// for i in units do
71927: LD_ADDR_VAR 0 4
71931: PUSH
71932: LD_VAR 0 1
71936: PUSH
71937: FOR_IN
71938: IFFALSE 71976
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
71940: LD_ADDR_VAR 0 5
71944: PUSH
71945: LD_VAR 0 5
71949: PPUSH
71950: LD_VAR 0 5
71954: PUSH
71955: LD_INT 1
71957: PLUS
71958: PPUSH
71959: LD_VAR 0 4
71963: PPUSH
71964: CALL_OW 256
71968: PPUSH
71969: CALL_OW 2
71973: ST_TO_ADDR
71974: GO 71937
71976: POP
71977: POP
// if not tmp then
71978: LD_VAR 0 5
71982: NOT
71983: IFFALSE 71987
// exit ;
71985: GO 72035
// if asc then
71987: LD_VAR 0 2
71991: IFFALSE 72015
// result := SortListByListAsc ( units , tmp ) else
71993: LD_ADDR_VAR 0 3
71997: PUSH
71998: LD_VAR 0 1
72002: PPUSH
72003: LD_VAR 0 5
72007: PPUSH
72008: CALL_OW 76
72012: ST_TO_ADDR
72013: GO 72035
// result := SortListByListDesc ( units , tmp ) ;
72015: LD_ADDR_VAR 0 3
72019: PUSH
72020: LD_VAR 0 1
72024: PPUSH
72025: LD_VAR 0 5
72029: PPUSH
72030: CALL_OW 77
72034: ST_TO_ADDR
// end ;
72035: LD_VAR 0 3
72039: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
72040: LD_INT 0
72042: PPUSH
72043: PPUSH
// task := GetTaskList ( mech ) ;
72044: LD_ADDR_VAR 0 4
72048: PUSH
72049: LD_VAR 0 1
72053: PPUSH
72054: CALL_OW 437
72058: ST_TO_ADDR
// if not task then
72059: LD_VAR 0 4
72063: NOT
72064: IFFALSE 72068
// exit ;
72066: GO 72112
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
72068: LD_ADDR_VAR 0 3
72072: PUSH
72073: LD_VAR 0 4
72077: PUSH
72078: LD_INT 1
72080: ARRAY
72081: PUSH
72082: LD_INT 1
72084: ARRAY
72085: PUSH
72086: LD_STRING r
72088: EQUAL
72089: IFFALSE 72111
72091: PUSH
72092: LD_VAR 0 4
72096: PUSH
72097: LD_INT 1
72099: ARRAY
72100: PUSH
72101: LD_INT 4
72103: ARRAY
72104: PUSH
72105: LD_VAR 0 2
72109: EQUAL
72110: AND
72111: ST_TO_ADDR
// end ;
72112: LD_VAR 0 3
72116: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
72117: LD_INT 0
72119: PPUSH
// SetDir ( unit , d ) ;
72120: LD_VAR 0 1
72124: PPUSH
72125: LD_VAR 0 4
72129: PPUSH
72130: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
72134: LD_ADDR_VAR 0 6
72138: PUSH
72139: LD_VAR 0 1
72143: PPUSH
72144: LD_VAR 0 2
72148: PPUSH
72149: LD_VAR 0 3
72153: PPUSH
72154: LD_VAR 0 5
72158: PPUSH
72159: CALL_OW 48
72163: ST_TO_ADDR
// end ;
72164: LD_VAR 0 6
72168: RET
// export function ToNaturalNumber ( number ) ; begin
72169: LD_INT 0
72171: PPUSH
// result := number div 1 ;
72172: LD_ADDR_VAR 0 2
72176: PUSH
72177: LD_VAR 0 1
72181: PUSH
72182: LD_INT 1
72184: DIV
72185: ST_TO_ADDR
// if number < 0 then
72186: LD_VAR 0 1
72190: PUSH
72191: LD_INT 0
72193: LESS
72194: IFFALSE 72204
// result := 0 ;
72196: LD_ADDR_VAR 0 2
72200: PUSH
72201: LD_INT 0
72203: ST_TO_ADDR
// end ;
72204: LD_VAR 0 2
72208: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
72209: LD_INT 0
72211: PPUSH
72212: PPUSH
72213: PPUSH
// if not buildings then
72214: LD_VAR 0 1
72218: NOT
72219: IFFALSE 72223
// exit ;
72221: GO 72338
// tmp := [ ] ;
72223: LD_ADDR_VAR 0 5
72227: PUSH
72228: EMPTY
72229: ST_TO_ADDR
// for b in buildings do
72230: LD_ADDR_VAR 0 4
72234: PUSH
72235: LD_VAR 0 1
72239: PUSH
72240: FOR_IN
72241: IFFALSE 72279
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
72243: LD_ADDR_VAR 0 5
72247: PUSH
72248: LD_VAR 0 5
72252: PPUSH
72253: LD_VAR 0 5
72257: PUSH
72258: LD_INT 1
72260: PLUS
72261: PPUSH
72262: LD_VAR 0 4
72266: PPUSH
72267: CALL_OW 266
72271: PPUSH
72272: CALL_OW 1
72276: ST_TO_ADDR
72277: GO 72240
72279: POP
72280: POP
// if not tmp then
72281: LD_VAR 0 5
72285: NOT
72286: IFFALSE 72290
// exit ;
72288: GO 72338
// if asc then
72290: LD_VAR 0 2
72294: IFFALSE 72318
// result := SortListByListAsc ( buildings , tmp ) else
72296: LD_ADDR_VAR 0 3
72300: PUSH
72301: LD_VAR 0 1
72305: PPUSH
72306: LD_VAR 0 5
72310: PPUSH
72311: CALL_OW 76
72315: ST_TO_ADDR
72316: GO 72338
// result := SortListByListDesc ( buildings , tmp ) ;
72318: LD_ADDR_VAR 0 3
72322: PUSH
72323: LD_VAR 0 1
72327: PPUSH
72328: LD_VAR 0 5
72332: PPUSH
72333: CALL_OW 77
72337: ST_TO_ADDR
// end ;
72338: LD_VAR 0 3
72342: RET
// export function SortByClass ( units , class ) ; var un ; begin
72343: LD_INT 0
72345: PPUSH
72346: PPUSH
// if not units or not class then
72347: LD_VAR 0 1
72351: NOT
72352: IFTRUE 72361
72354: PUSH
72355: LD_VAR 0 2
72359: NOT
72360: OR
72361: IFFALSE 72365
// exit ;
72363: GO 72460
// result := [ ] ;
72365: LD_ADDR_VAR 0 3
72369: PUSH
72370: EMPTY
72371: ST_TO_ADDR
// for un in units do
72372: LD_ADDR_VAR 0 4
72376: PUSH
72377: LD_VAR 0 1
72381: PUSH
72382: FOR_IN
72383: IFFALSE 72458
// if GetClass ( un ) = class then
72385: LD_VAR 0 4
72389: PPUSH
72390: CALL_OW 257
72394: PUSH
72395: LD_VAR 0 2
72399: EQUAL
72400: IFFALSE 72427
// result := Insert ( result , 1 , un ) else
72402: LD_ADDR_VAR 0 3
72406: PUSH
72407: LD_VAR 0 3
72411: PPUSH
72412: LD_INT 1
72414: PPUSH
72415: LD_VAR 0 4
72419: PPUSH
72420: CALL_OW 2
72424: ST_TO_ADDR
72425: GO 72456
// result := Replace ( result , result + 1 , un ) ;
72427: LD_ADDR_VAR 0 3
72431: PUSH
72432: LD_VAR 0 3
72436: PPUSH
72437: LD_VAR 0 3
72441: PUSH
72442: LD_INT 1
72444: PLUS
72445: PPUSH
72446: LD_VAR 0 4
72450: PPUSH
72451: CALL_OW 1
72455: ST_TO_ADDR
72456: GO 72382
72458: POP
72459: POP
// end ;
72460: LD_VAR 0 3
72464: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
72465: LD_INT 0
72467: PPUSH
72468: PPUSH
72469: PPUSH
72470: PPUSH
72471: PPUSH
72472: PPUSH
72473: PPUSH
// result := [ ] ;
72474: LD_ADDR_VAR 0 4
72478: PUSH
72479: EMPTY
72480: ST_TO_ADDR
// if x - r < 0 then
72481: LD_VAR 0 1
72485: PUSH
72486: LD_VAR 0 3
72490: MINUS
72491: PUSH
72492: LD_INT 0
72494: LESS
72495: IFFALSE 72507
// min_x := 0 else
72497: LD_ADDR_VAR 0 8
72501: PUSH
72502: LD_INT 0
72504: ST_TO_ADDR
72505: GO 72523
// min_x := x - r ;
72507: LD_ADDR_VAR 0 8
72511: PUSH
72512: LD_VAR 0 1
72516: PUSH
72517: LD_VAR 0 3
72521: MINUS
72522: ST_TO_ADDR
// if y - r < 0 then
72523: LD_VAR 0 2
72527: PUSH
72528: LD_VAR 0 3
72532: MINUS
72533: PUSH
72534: LD_INT 0
72536: LESS
72537: IFFALSE 72549
// min_y := 0 else
72539: LD_ADDR_VAR 0 7
72543: PUSH
72544: LD_INT 0
72546: ST_TO_ADDR
72547: GO 72565
// min_y := y - r ;
72549: LD_ADDR_VAR 0 7
72553: PUSH
72554: LD_VAR 0 2
72558: PUSH
72559: LD_VAR 0 3
72563: MINUS
72564: ST_TO_ADDR
// max_x := x + r ;
72565: LD_ADDR_VAR 0 9
72569: PUSH
72570: LD_VAR 0 1
72574: PUSH
72575: LD_VAR 0 3
72579: PLUS
72580: ST_TO_ADDR
// max_y := y + r ;
72581: LD_ADDR_VAR 0 10
72585: PUSH
72586: LD_VAR 0 2
72590: PUSH
72591: LD_VAR 0 3
72595: PLUS
72596: ST_TO_ADDR
// for _x = min_x to max_x do
72597: LD_ADDR_VAR 0 5
72601: PUSH
72602: DOUBLE
72603: LD_VAR 0 8
72607: DEC
72608: ST_TO_ADDR
72609: LD_VAR 0 9
72613: PUSH
72614: FOR_TO
72615: IFFALSE 72716
// for _y = min_y to max_y do
72617: LD_ADDR_VAR 0 6
72621: PUSH
72622: DOUBLE
72623: LD_VAR 0 7
72627: DEC
72628: ST_TO_ADDR
72629: LD_VAR 0 10
72633: PUSH
72634: FOR_TO
72635: IFFALSE 72712
// begin if not ValidHex ( _x , _y ) then
72637: LD_VAR 0 5
72641: PPUSH
72642: LD_VAR 0 6
72646: PPUSH
72647: CALL_OW 488
72651: NOT
72652: IFFALSE 72656
// continue ;
72654: GO 72634
// if GetResourceTypeXY ( _x , _y ) then
72656: LD_VAR 0 5
72660: PPUSH
72661: LD_VAR 0 6
72665: PPUSH
72666: CALL_OW 283
72670: IFFALSE 72710
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72672: LD_ADDR_VAR 0 4
72676: PUSH
72677: LD_VAR 0 4
72681: PPUSH
72682: LD_VAR 0 4
72686: PUSH
72687: LD_INT 1
72689: PLUS
72690: PPUSH
72691: LD_VAR 0 5
72695: PUSH
72696: LD_VAR 0 6
72700: PUSH
72701: EMPTY
72702: LIST
72703: LIST
72704: PPUSH
72705: CALL_OW 1
72709: ST_TO_ADDR
// end ;
72710: GO 72634
72712: POP
72713: POP
72714: GO 72614
72716: POP
72717: POP
// end ;
72718: LD_VAR 0 4
72722: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
72723: LD_INT 0
72725: PPUSH
72726: PPUSH
72727: PPUSH
72728: PPUSH
72729: PPUSH
72730: PPUSH
72731: PPUSH
72732: PPUSH
// if not units then
72733: LD_VAR 0 1
72737: NOT
72738: IFFALSE 72742
// exit ;
72740: GO 73274
// result := UnitFilter ( units , [ f_ok ] ) ;
72742: LD_ADDR_VAR 0 3
72746: PUSH
72747: LD_VAR 0 1
72751: PPUSH
72752: LD_INT 50
72754: PUSH
72755: EMPTY
72756: LIST
72757: PPUSH
72758: CALL_OW 72
72762: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72763: LD_ADDR_VAR 0 8
72767: PUSH
72768: LD_VAR 0 1
72772: PUSH
72773: LD_INT 1
72775: ARRAY
72776: PPUSH
72777: CALL_OW 255
72781: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
72782: LD_ADDR_VAR 0 10
72786: PUSH
72787: LD_INT 29
72789: PUSH
72790: LD_INT 91
72792: PUSH
72793: LD_INT 49
72795: PUSH
72796: EMPTY
72797: LIST
72798: LIST
72799: LIST
72800: ST_TO_ADDR
// if not result then
72801: LD_VAR 0 3
72805: NOT
72806: IFFALSE 72810
// exit ;
72808: GO 73274
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
72810: LD_ADDR_VAR 0 5
72814: PUSH
72815: LD_INT 81
72817: PUSH
72818: LD_VAR 0 8
72822: PUSH
72823: EMPTY
72824: LIST
72825: LIST
72826: PPUSH
72827: CALL_OW 69
72831: ST_TO_ADDR
// for i in result do
72832: LD_ADDR_VAR 0 4
72836: PUSH
72837: LD_VAR 0 3
72841: PUSH
72842: FOR_IN
72843: IFFALSE 73272
// begin tag := GetTag ( i ) + 1 ;
72845: LD_ADDR_VAR 0 9
72849: PUSH
72850: LD_VAR 0 4
72854: PPUSH
72855: CALL_OW 110
72859: PUSH
72860: LD_INT 1
72862: PLUS
72863: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
72864: LD_ADDR_VAR 0 7
72868: PUSH
72869: LD_VAR 0 4
72873: PPUSH
72874: CALL_OW 250
72878: PPUSH
72879: LD_VAR 0 4
72883: PPUSH
72884: CALL_OW 251
72888: PPUSH
72889: LD_INT 4
72891: PPUSH
72892: CALL 72465 0 3
72896: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
72897: LD_VAR 0 4
72901: PPUSH
72902: CALL_OW 247
72906: PUSH
72907: LD_INT 2
72909: EQUAL
72910: IFFALSE 72922
72912: PUSH
72913: LD_VAR 0 7
72917: PUSH
72918: LD_INT 2
72920: GREATER
72921: AND
72922: IFFALSE 72942
72924: PUSH
72925: LD_VAR 0 4
72929: PPUSH
72930: CALL_OW 264
72934: PUSH
72935: LD_VAR 0 10
72939: IN
72940: NOT
72941: AND
72942: IFFALSE 72981
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
72944: LD_VAR 0 4
72948: PPUSH
72949: LD_VAR 0 7
72953: PUSH
72954: LD_INT 1
72956: ARRAY
72957: PUSH
72958: LD_INT 1
72960: ARRAY
72961: PPUSH
72962: LD_VAR 0 7
72966: PUSH
72967: LD_INT 1
72969: ARRAY
72970: PUSH
72971: LD_INT 2
72973: ARRAY
72974: PPUSH
72975: CALL_OW 116
72979: GO 73270
// if path > tag then
72981: LD_VAR 0 2
72985: PUSH
72986: LD_VAR 0 9
72990: GREATER
72991: IFFALSE 73199
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
72993: LD_ADDR_VAR 0 6
72997: PUSH
72998: LD_VAR 0 5
73002: PPUSH
73003: LD_INT 91
73005: PUSH
73006: LD_VAR 0 4
73010: PUSH
73011: LD_INT 8
73013: PUSH
73014: EMPTY
73015: LIST
73016: LIST
73017: LIST
73018: PPUSH
73019: CALL_OW 72
73023: ST_TO_ADDR
// if nearEnemy then
73024: LD_VAR 0 6
73028: IFFALSE 73097
// begin if GetWeapon ( i ) = ru_time_lapser then
73030: LD_VAR 0 4
73034: PPUSH
73035: CALL_OW 264
73039: PUSH
73040: LD_INT 49
73042: EQUAL
73043: IFFALSE 73071
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
73045: LD_VAR 0 4
73049: PPUSH
73050: LD_VAR 0 6
73054: PPUSH
73055: LD_VAR 0 4
73059: PPUSH
73060: CALL_OW 74
73064: PPUSH
73065: CALL_OW 112
73069: GO 73095
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
73071: LD_VAR 0 4
73075: PPUSH
73076: LD_VAR 0 6
73080: PPUSH
73081: LD_VAR 0 4
73085: PPUSH
73086: CALL_OW 74
73090: PPUSH
73091: CALL 74355 0 2
// end else
73095: GO 73197
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
73097: LD_VAR 0 4
73101: PPUSH
73102: LD_VAR 0 2
73106: PUSH
73107: LD_VAR 0 9
73111: ARRAY
73112: PUSH
73113: LD_INT 1
73115: ARRAY
73116: PPUSH
73117: LD_VAR 0 2
73121: PUSH
73122: LD_VAR 0 9
73126: ARRAY
73127: PUSH
73128: LD_INT 2
73130: ARRAY
73131: PPUSH
73132: CALL_OW 297
73136: PUSH
73137: LD_INT 6
73139: GREATER
73140: IFFALSE 73183
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
73142: LD_VAR 0 4
73146: PPUSH
73147: LD_VAR 0 2
73151: PUSH
73152: LD_VAR 0 9
73156: ARRAY
73157: PUSH
73158: LD_INT 1
73160: ARRAY
73161: PPUSH
73162: LD_VAR 0 2
73166: PUSH
73167: LD_VAR 0 9
73171: ARRAY
73172: PUSH
73173: LD_INT 2
73175: ARRAY
73176: PPUSH
73177: CALL_OW 114
73181: GO 73197
// SetTag ( i , tag ) ;
73183: LD_VAR 0 4
73187: PPUSH
73188: LD_VAR 0 9
73192: PPUSH
73193: CALL_OW 109
// end else
73197: GO 73270
// if enemy then
73199: LD_VAR 0 5
73203: IFFALSE 73270
// begin if GetWeapon ( i ) = ru_time_lapser then
73205: LD_VAR 0 4
73209: PPUSH
73210: CALL_OW 264
73214: PUSH
73215: LD_INT 49
73217: EQUAL
73218: IFFALSE 73246
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
73220: LD_VAR 0 4
73224: PPUSH
73225: LD_VAR 0 5
73229: PPUSH
73230: LD_VAR 0 4
73234: PPUSH
73235: CALL_OW 74
73239: PPUSH
73240: CALL_OW 112
73244: GO 73270
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
73246: LD_VAR 0 4
73250: PPUSH
73251: LD_VAR 0 5
73255: PPUSH
73256: LD_VAR 0 4
73260: PPUSH
73261: CALL_OW 74
73265: PPUSH
73266: CALL 74355 0 2
// end ; end ;
73270: GO 72842
73272: POP
73273: POP
// end ;
73274: LD_VAR 0 3
73278: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
73279: LD_INT 0
73281: PPUSH
73282: PPUSH
73283: PPUSH
// if not unit or IsInUnit ( unit ) then
73284: LD_VAR 0 1
73288: NOT
73289: IFTRUE 73302
73291: PUSH
73292: LD_VAR 0 1
73296: PPUSH
73297: CALL_OW 310
73301: OR
73302: IFFALSE 73306
// exit ;
73304: GO 73397
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
73306: LD_ADDR_VAR 0 4
73310: PUSH
73311: LD_VAR 0 1
73315: PPUSH
73316: CALL_OW 250
73320: PPUSH
73321: LD_VAR 0 2
73325: PPUSH
73326: LD_INT 1
73328: PPUSH
73329: CALL_OW 272
73333: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
73334: LD_ADDR_VAR 0 5
73338: PUSH
73339: LD_VAR 0 1
73343: PPUSH
73344: CALL_OW 251
73348: PPUSH
73349: LD_VAR 0 2
73353: PPUSH
73354: LD_INT 1
73356: PPUSH
73357: CALL_OW 273
73361: ST_TO_ADDR
// if ValidHex ( x , y ) then
73362: LD_VAR 0 4
73366: PPUSH
73367: LD_VAR 0 5
73371: PPUSH
73372: CALL_OW 488
73376: IFFALSE 73397
// ComTurnXY ( unit , x , y ) ;
73378: LD_VAR 0 1
73382: PPUSH
73383: LD_VAR 0 4
73387: PPUSH
73388: LD_VAR 0 5
73392: PPUSH
73393: CALL_OW 118
// end ;
73397: LD_VAR 0 3
73401: RET
// export function SeeUnits ( side , units ) ; var i ; begin
73402: LD_INT 0
73404: PPUSH
73405: PPUSH
// result := false ;
73406: LD_ADDR_VAR 0 3
73410: PUSH
73411: LD_INT 0
73413: ST_TO_ADDR
// if not units then
73414: LD_VAR 0 2
73418: NOT
73419: IFFALSE 73423
// exit ;
73421: GO 73468
// for i in units do
73423: LD_ADDR_VAR 0 4
73427: PUSH
73428: LD_VAR 0 2
73432: PUSH
73433: FOR_IN
73434: IFFALSE 73466
// if See ( side , i ) then
73436: LD_VAR 0 1
73440: PPUSH
73441: LD_VAR 0 4
73445: PPUSH
73446: CALL_OW 292
73450: IFFALSE 73464
// begin result := true ;
73452: LD_ADDR_VAR 0 3
73456: PUSH
73457: LD_INT 1
73459: ST_TO_ADDR
// exit ;
73460: POP
73461: POP
73462: GO 73468
// end ;
73464: GO 73433
73466: POP
73467: POP
// end ;
73468: LD_VAR 0 3
73472: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
73473: LD_INT 0
73475: PPUSH
73476: PPUSH
73477: PPUSH
73478: PPUSH
// if not unit or not points then
73479: LD_VAR 0 1
73483: NOT
73484: IFTRUE 73493
73486: PUSH
73487: LD_VAR 0 2
73491: NOT
73492: OR
73493: IFFALSE 73497
// exit ;
73495: GO 73587
// dist := 99999 ;
73497: LD_ADDR_VAR 0 5
73501: PUSH
73502: LD_INT 99999
73504: ST_TO_ADDR
// for i in points do
73505: LD_ADDR_VAR 0 4
73509: PUSH
73510: LD_VAR 0 2
73514: PUSH
73515: FOR_IN
73516: IFFALSE 73585
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
73518: LD_ADDR_VAR 0 6
73522: PUSH
73523: LD_VAR 0 1
73527: PPUSH
73528: LD_VAR 0 4
73532: PUSH
73533: LD_INT 1
73535: ARRAY
73536: PPUSH
73537: LD_VAR 0 4
73541: PUSH
73542: LD_INT 2
73544: ARRAY
73545: PPUSH
73546: CALL_OW 297
73550: ST_TO_ADDR
// if tmpDist < dist then
73551: LD_VAR 0 6
73555: PUSH
73556: LD_VAR 0 5
73560: LESS
73561: IFFALSE 73583
// begin result := i ;
73563: LD_ADDR_VAR 0 3
73567: PUSH
73568: LD_VAR 0 4
73572: ST_TO_ADDR
// dist := tmpDist ;
73573: LD_ADDR_VAR 0 5
73577: PUSH
73578: LD_VAR 0 6
73582: ST_TO_ADDR
// end ; end ;
73583: GO 73515
73585: POP
73586: POP
// end ;
73587: LD_VAR 0 3
73591: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
73592: LD_INT 0
73594: PPUSH
// uc_side := side ;
73595: LD_ADDR_OWVAR 20
73599: PUSH
73600: LD_VAR 0 1
73604: ST_TO_ADDR
// uc_nation := 3 ;
73605: LD_ADDR_OWVAR 21
73609: PUSH
73610: LD_INT 3
73612: ST_TO_ADDR
// vc_chassis := 25 ;
73613: LD_ADDR_OWVAR 37
73617: PUSH
73618: LD_INT 25
73620: ST_TO_ADDR
// vc_engine := engine_siberite ;
73621: LD_ADDR_OWVAR 39
73625: PUSH
73626: LD_INT 3
73628: ST_TO_ADDR
// vc_control := control_computer ;
73629: LD_ADDR_OWVAR 38
73633: PUSH
73634: LD_INT 3
73636: ST_TO_ADDR
// vc_weapon := 59 ;
73637: LD_ADDR_OWVAR 40
73641: PUSH
73642: LD_INT 59
73644: ST_TO_ADDR
// result := CreateVehicle ;
73645: LD_ADDR_VAR 0 5
73649: PUSH
73650: CALL_OW 45
73654: ST_TO_ADDR
// SetDir ( result , d ) ;
73655: LD_VAR 0 5
73659: PPUSH
73660: LD_VAR 0 4
73664: PPUSH
73665: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
73669: LD_VAR 0 5
73673: PPUSH
73674: LD_VAR 0 2
73678: PPUSH
73679: LD_VAR 0 3
73683: PPUSH
73684: LD_INT 0
73686: PPUSH
73687: CALL_OW 48
// end ;
73691: LD_VAR 0 5
73695: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
73696: LD_INT 0
73698: PPUSH
73699: PPUSH
73700: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
73701: LD_ADDR_VAR 0 2
73705: PUSH
73706: LD_INT 0
73708: PUSH
73709: LD_INT 0
73711: PUSH
73712: LD_INT 0
73714: PUSH
73715: LD_INT 0
73717: PUSH
73718: EMPTY
73719: LIST
73720: LIST
73721: LIST
73722: LIST
73723: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
73724: LD_VAR 0 1
73728: NOT
73729: IFTRUE 73762
73731: PUSH
73732: LD_VAR 0 1
73736: PPUSH
73737: CALL_OW 264
73741: PUSH
73742: LD_INT 12
73744: PUSH
73745: LD_INT 51
73747: PUSH
73748: LD_INT 32
73750: PUSH
73751: LD_INT 89
73753: PUSH
73754: EMPTY
73755: LIST
73756: LIST
73757: LIST
73758: LIST
73759: IN
73760: NOT
73761: OR
73762: IFFALSE 73766
// exit ;
73764: GO 73864
// for i := 1 to 3 do
73766: LD_ADDR_VAR 0 3
73770: PUSH
73771: DOUBLE
73772: LD_INT 1
73774: DEC
73775: ST_TO_ADDR
73776: LD_INT 3
73778: PUSH
73779: FOR_TO
73780: IFFALSE 73862
// begin tmp := GetCargo ( cargo , i ) ;
73782: LD_ADDR_VAR 0 4
73786: PUSH
73787: LD_VAR 0 1
73791: PPUSH
73792: LD_VAR 0 3
73796: PPUSH
73797: CALL_OW 289
73801: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
73802: LD_ADDR_VAR 0 2
73806: PUSH
73807: LD_VAR 0 2
73811: PPUSH
73812: LD_VAR 0 3
73816: PPUSH
73817: LD_VAR 0 4
73821: PPUSH
73822: CALL_OW 1
73826: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
73827: LD_ADDR_VAR 0 2
73831: PUSH
73832: LD_VAR 0 2
73836: PPUSH
73837: LD_INT 4
73839: PPUSH
73840: LD_VAR 0 2
73844: PUSH
73845: LD_INT 4
73847: ARRAY
73848: PUSH
73849: LD_VAR 0 4
73853: PLUS
73854: PPUSH
73855: CALL_OW 1
73859: ST_TO_ADDR
// end ;
73860: GO 73779
73862: POP
73863: POP
// end ;
73864: LD_VAR 0 2
73868: RET
// export function Length ( array ) ; begin
73869: LD_INT 0
73871: PPUSH
// result := array + 0 ;
73872: LD_ADDR_VAR 0 2
73876: PUSH
73877: LD_VAR 0 1
73881: PUSH
73882: LD_INT 0
73884: PLUS
73885: ST_TO_ADDR
// end ;
73886: LD_VAR 0 2
73890: RET
// export function PrepareArray ( array ) ; begin
73891: LD_INT 0
73893: PPUSH
// result := array diff 0 ;
73894: LD_ADDR_VAR 0 2
73898: PUSH
73899: LD_VAR 0 1
73903: PUSH
73904: LD_INT 0
73906: DIFF
73907: ST_TO_ADDR
// if not result [ 1 ] then
73908: LD_VAR 0 2
73912: PUSH
73913: LD_INT 1
73915: ARRAY
73916: NOT
73917: IFFALSE 73937
// result := Delete ( result , 1 ) ;
73919: LD_ADDR_VAR 0 2
73923: PUSH
73924: LD_VAR 0 2
73928: PPUSH
73929: LD_INT 1
73931: PPUSH
73932: CALL_OW 3
73936: ST_TO_ADDR
// end ;
73937: LD_VAR 0 2
73941: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
73942: LD_INT 0
73944: PPUSH
73945: PPUSH
73946: PPUSH
73947: PPUSH
// sibRocketRange := 25 ;
73948: LD_ADDR_VAR 0 6
73952: PUSH
73953: LD_INT 25
73955: ST_TO_ADDR
// result := false ;
73956: LD_ADDR_VAR 0 4
73960: PUSH
73961: LD_INT 0
73963: ST_TO_ADDR
// for i := 0 to 5 do
73964: LD_ADDR_VAR 0 5
73968: PUSH
73969: DOUBLE
73970: LD_INT 0
73972: DEC
73973: ST_TO_ADDR
73974: LD_INT 5
73976: PUSH
73977: FOR_TO
73978: IFFALSE 74045
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
73980: LD_VAR 0 1
73984: PPUSH
73985: LD_VAR 0 5
73989: PPUSH
73990: LD_VAR 0 6
73994: PPUSH
73995: CALL_OW 272
73999: PPUSH
74000: LD_VAR 0 2
74004: PPUSH
74005: LD_VAR 0 5
74009: PPUSH
74010: LD_VAR 0 6
74014: PPUSH
74015: CALL_OW 273
74019: PPUSH
74020: LD_VAR 0 3
74024: PPUSH
74025: CALL_OW 309
74029: IFFALSE 74043
// begin result := true ;
74031: LD_ADDR_VAR 0 4
74035: PUSH
74036: LD_INT 1
74038: ST_TO_ADDR
// exit ;
74039: POP
74040: POP
74041: GO 74047
// end ;
74043: GO 73977
74045: POP
74046: POP
// end ;
74047: LD_VAR 0 4
74051: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
74052: LD_INT 0
74054: PPUSH
74055: PPUSH
74056: PPUSH
// if btype = b_depot then
74057: LD_VAR 0 2
74061: PUSH
74062: LD_INT 0
74064: EQUAL
74065: IFFALSE 74077
// begin result := true ;
74067: LD_ADDR_VAR 0 3
74071: PUSH
74072: LD_INT 1
74074: ST_TO_ADDR
// exit ;
74075: GO 74197
// end ; pom := GetBase ( depot ) ;
74077: LD_ADDR_VAR 0 4
74081: PUSH
74082: LD_VAR 0 1
74086: PPUSH
74087: CALL_OW 274
74091: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
74092: LD_ADDR_VAR 0 5
74096: PUSH
74097: LD_VAR 0 2
74101: PPUSH
74102: LD_VAR 0 1
74106: PPUSH
74107: CALL_OW 248
74111: PPUSH
74112: CALL_OW 450
74116: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
74117: LD_ADDR_VAR 0 3
74121: PUSH
74122: LD_VAR 0 4
74126: PPUSH
74127: LD_INT 1
74129: PPUSH
74130: CALL_OW 275
74134: PUSH
74135: LD_VAR 0 5
74139: PUSH
74140: LD_INT 1
74142: ARRAY
74143: GREATEREQUAL
74144: IFFALSE 74170
74146: PUSH
74147: LD_VAR 0 4
74151: PPUSH
74152: LD_INT 2
74154: PPUSH
74155: CALL_OW 275
74159: PUSH
74160: LD_VAR 0 5
74164: PUSH
74165: LD_INT 2
74167: ARRAY
74168: GREATEREQUAL
74169: AND
74170: IFFALSE 74196
74172: PUSH
74173: LD_VAR 0 4
74177: PPUSH
74178: LD_INT 3
74180: PPUSH
74181: CALL_OW 275
74185: PUSH
74186: LD_VAR 0 5
74190: PUSH
74191: LD_INT 3
74193: ARRAY
74194: GREATEREQUAL
74195: AND
74196: ST_TO_ADDR
// end ;
74197: LD_VAR 0 3
74201: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
74202: LD_INT 0
74204: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
74205: LD_VAR 0 1
74209: PPUSH
74210: LD_VAR 0 2
74214: PPUSH
74215: LD_INT 0
74217: PPUSH
74218: LD_INT 0
74220: PPUSH
74221: LD_INT 1
74223: PPUSH
74224: LD_INT 0
74226: PPUSH
74227: CALL_OW 587
// end ;
74231: LD_VAR 0 3
74235: RET
// export function CenterOnNow ( unit ) ; begin
74236: LD_INT 0
74238: PPUSH
// result := IsInUnit ( unit ) ;
74239: LD_ADDR_VAR 0 2
74243: PUSH
74244: LD_VAR 0 1
74248: PPUSH
74249: CALL_OW 310
74253: ST_TO_ADDR
// if not result then
74254: LD_VAR 0 2
74258: NOT
74259: IFFALSE 74271
// result := unit ;
74261: LD_ADDR_VAR 0 2
74265: PUSH
74266: LD_VAR 0 1
74270: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
74271: LD_VAR 0 1
74275: PPUSH
74276: CALL_OW 87
// end ;
74280: LD_VAR 0 2
74284: RET
// export function ComMoveHex ( unit , hex ) ; begin
74285: LD_INT 0
74287: PPUSH
// if not hex then
74288: LD_VAR 0 2
74292: NOT
74293: IFFALSE 74297
// exit ;
74295: GO 74350
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
74297: LD_VAR 0 2
74301: PUSH
74302: LD_INT 1
74304: ARRAY
74305: PPUSH
74306: LD_VAR 0 2
74310: PUSH
74311: LD_INT 2
74313: ARRAY
74314: PPUSH
74315: CALL_OW 428
74319: IFFALSE 74323
// exit ;
74321: GO 74350
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
74323: LD_VAR 0 1
74327: PPUSH
74328: LD_VAR 0 2
74332: PUSH
74333: LD_INT 1
74335: ARRAY
74336: PPUSH
74337: LD_VAR 0 2
74341: PUSH
74342: LD_INT 2
74344: ARRAY
74345: PPUSH
74346: CALL_OW 111
// end ;
74350: LD_VAR 0 3
74354: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
74355: LD_INT 0
74357: PPUSH
74358: PPUSH
74359: PPUSH
// if not unit or not enemy then
74360: LD_VAR 0 1
74364: NOT
74365: IFTRUE 74374
74367: PUSH
74368: LD_VAR 0 2
74372: NOT
74373: OR
74374: IFFALSE 74378
// exit ;
74376: GO 74504
// x := GetX ( enemy ) ;
74378: LD_ADDR_VAR 0 4
74382: PUSH
74383: LD_VAR 0 2
74387: PPUSH
74388: CALL_OW 250
74392: ST_TO_ADDR
// y := GetY ( enemy ) ;
74393: LD_ADDR_VAR 0 5
74397: PUSH
74398: LD_VAR 0 2
74402: PPUSH
74403: CALL_OW 251
74407: ST_TO_ADDR
// if ValidHex ( x , y ) then
74408: LD_VAR 0 4
74412: PPUSH
74413: LD_VAR 0 5
74417: PPUSH
74418: CALL_OW 488
74422: IFFALSE 74504
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
74424: LD_VAR 0 2
74428: PPUSH
74429: CALL_OW 247
74433: PUSH
74434: LD_INT 3
74436: PUSH
74437: LD_INT 2
74439: PUSH
74440: EMPTY
74441: LIST
74442: LIST
74443: IN
74444: IFTRUE 74467
74446: PUSH
74447: LD_VAR 0 1
74451: PPUSH
74452: CALL_OW 255
74456: PPUSH
74457: LD_VAR 0 2
74461: PPUSH
74462: CALL_OW 292
74466: OR
74467: IFFALSE 74485
// ComAttackUnit ( unit , enemy ) else
74469: LD_VAR 0 1
74473: PPUSH
74474: LD_VAR 0 2
74478: PPUSH
74479: CALL_OW 115
74483: GO 74504
// ComAgressiveMove ( unit , x , y ) ;
74485: LD_VAR 0 1
74489: PPUSH
74490: LD_VAR 0 4
74494: PPUSH
74495: LD_VAR 0 5
74499: PPUSH
74500: CALL_OW 114
// end ;
74504: LD_VAR 0 3
74508: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
74509: LD_INT 0
74511: PPUSH
74512: PPUSH
74513: PPUSH
// list := AreaToList ( area , 0 ) ;
74514: LD_ADDR_VAR 0 5
74518: PUSH
74519: LD_VAR 0 1
74523: PPUSH
74524: LD_INT 0
74526: PPUSH
74527: CALL_OW 517
74531: ST_TO_ADDR
// if not list then
74532: LD_VAR 0 5
74536: NOT
74537: IFFALSE 74541
// exit ;
74539: GO 74671
// if all then
74541: LD_VAR 0 2
74545: IFFALSE 74633
// begin for i := 1 to list [ 1 ] do
74547: LD_ADDR_VAR 0 4
74551: PUSH
74552: DOUBLE
74553: LD_INT 1
74555: DEC
74556: ST_TO_ADDR
74557: LD_VAR 0 5
74561: PUSH
74562: LD_INT 1
74564: ARRAY
74565: PUSH
74566: FOR_TO
74567: IFFALSE 74629
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
74569: LD_ADDR_VAR 0 3
74573: PUSH
74574: LD_VAR 0 3
74578: PPUSH
74579: LD_VAR 0 3
74583: PUSH
74584: LD_INT 1
74586: PLUS
74587: PPUSH
74588: LD_VAR 0 5
74592: PUSH
74593: LD_INT 1
74595: ARRAY
74596: PUSH
74597: LD_VAR 0 4
74601: ARRAY
74602: PUSH
74603: LD_VAR 0 5
74607: PUSH
74608: LD_INT 2
74610: ARRAY
74611: PUSH
74612: LD_VAR 0 4
74616: ARRAY
74617: PUSH
74618: EMPTY
74619: LIST
74620: LIST
74621: PPUSH
74622: CALL_OW 1
74626: ST_TO_ADDR
74627: GO 74566
74629: POP
74630: POP
// exit ;
74631: GO 74671
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
74633: LD_ADDR_VAR 0 3
74637: PUSH
74638: LD_VAR 0 5
74642: PUSH
74643: LD_INT 1
74645: ARRAY
74646: PUSH
74647: LD_INT 1
74649: ARRAY
74650: PUSH
74651: LD_VAR 0 5
74655: PUSH
74656: LD_INT 2
74658: ARRAY
74659: PUSH
74660: LD_INT 1
74662: ARRAY
74663: PUSH
74664: EMPTY
74665: LIST
74666: LIST
74667: PUSH
74668: EMPTY
74669: LIST
74670: ST_TO_ADDR
// end ;
74671: LD_VAR 0 3
74675: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
74676: LD_INT 0
74678: PPUSH
74679: PPUSH
// list := AreaToList ( area , 0 ) ;
74680: LD_ADDR_VAR 0 4
74684: PUSH
74685: LD_VAR 0 1
74689: PPUSH
74690: LD_INT 0
74692: PPUSH
74693: CALL_OW 517
74697: ST_TO_ADDR
// if not list then
74698: LD_VAR 0 4
74702: NOT
74703: IFFALSE 74707
// exit ;
74705: GO 74748
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
74707: LD_ADDR_VAR 0 3
74711: PUSH
74712: LD_VAR 0 4
74716: PUSH
74717: LD_INT 1
74719: ARRAY
74720: PUSH
74721: LD_INT 1
74723: ARRAY
74724: PUSH
74725: LD_VAR 0 4
74729: PUSH
74730: LD_INT 2
74732: ARRAY
74733: PUSH
74734: LD_INT 1
74736: ARRAY
74737: PUSH
74738: LD_VAR 0 2
74742: PUSH
74743: EMPTY
74744: LIST
74745: LIST
74746: LIST
74747: ST_TO_ADDR
// end ;
74748: LD_VAR 0 3
74752: RET
// export function First ( array ) ; begin
74753: LD_INT 0
74755: PPUSH
// if not array then
74756: LD_VAR 0 1
74760: NOT
74761: IFFALSE 74765
// exit ;
74763: GO 74779
// result := array [ 1 ] ;
74765: LD_ADDR_VAR 0 2
74769: PUSH
74770: LD_VAR 0 1
74774: PUSH
74775: LD_INT 1
74777: ARRAY
74778: ST_TO_ADDR
// end ;
74779: LD_VAR 0 2
74783: RET
// export function Last ( array ) ; begin
74784: LD_INT 0
74786: PPUSH
// if not array then
74787: LD_VAR 0 1
74791: NOT
74792: IFFALSE 74796
// exit ;
74794: GO 74812
// result := array [ array ] ;
74796: LD_ADDR_VAR 0 2
74800: PUSH
74801: LD_VAR 0 1
74805: PUSH
74806: LD_VAR 0 1
74810: ARRAY
74811: ST_TO_ADDR
// end ;
74812: LD_VAR 0 2
74816: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
74817: LD_INT 0
74819: PPUSH
74820: PPUSH
// result := [ ] ;
74821: LD_ADDR_VAR 0 5
74825: PUSH
74826: EMPTY
74827: ST_TO_ADDR
// if not array then
74828: LD_VAR 0 1
74832: NOT
74833: IFFALSE 74837
// exit ;
74835: GO 74949
// for i := 1 to array do
74837: LD_ADDR_VAR 0 6
74841: PUSH
74842: DOUBLE
74843: LD_INT 1
74845: DEC
74846: ST_TO_ADDR
74847: LD_VAR 0 1
74851: PUSH
74852: FOR_TO
74853: IFFALSE 74947
// if array [ i ] [ index ] = value then
74855: LD_VAR 0 1
74859: PUSH
74860: LD_VAR 0 6
74864: ARRAY
74865: PUSH
74866: LD_VAR 0 2
74870: ARRAY
74871: PUSH
74872: LD_VAR 0 3
74876: EQUAL
74877: IFFALSE 74945
// begin if indexColumn then
74879: LD_VAR 0 4
74883: IFFALSE 74919
// result := Join ( result , array [ i ] [ indexColumn ] ) else
74885: LD_ADDR_VAR 0 5
74889: PUSH
74890: LD_VAR 0 5
74894: PPUSH
74895: LD_VAR 0 1
74899: PUSH
74900: LD_VAR 0 6
74904: ARRAY
74905: PUSH
74906: LD_VAR 0 4
74910: ARRAY
74911: PPUSH
74912: CALL 69957 0 2
74916: ST_TO_ADDR
74917: GO 74945
// result := Join ( result , array [ i ] ) ;
74919: LD_ADDR_VAR 0 5
74923: PUSH
74924: LD_VAR 0 5
74928: PPUSH
74929: LD_VAR 0 1
74933: PUSH
74934: LD_VAR 0 6
74938: ARRAY
74939: PPUSH
74940: CALL 69957 0 2
74944: ST_TO_ADDR
// end ;
74945: GO 74852
74947: POP
74948: POP
// end ;
74949: LD_VAR 0 5
74953: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
74954: LD_INT 0
74956: PPUSH
// if not vehicles or not parkingPoint then
74957: LD_VAR 0 1
74961: NOT
74962: IFTRUE 74971
74964: PUSH
74965: LD_VAR 0 2
74969: NOT
74970: OR
74971: IFFALSE 74975
// exit ;
74973: GO 75073
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
74975: LD_ADDR_VAR 0 1
74979: PUSH
74980: LD_VAR 0 1
74984: PPUSH
74985: LD_INT 50
74987: PUSH
74988: EMPTY
74989: LIST
74990: PUSH
74991: LD_INT 3
74993: PUSH
74994: LD_INT 92
74996: PUSH
74997: LD_VAR 0 2
75001: PUSH
75002: LD_INT 1
75004: ARRAY
75005: PUSH
75006: LD_VAR 0 2
75010: PUSH
75011: LD_INT 2
75013: ARRAY
75014: PUSH
75015: LD_INT 8
75017: PUSH
75018: EMPTY
75019: LIST
75020: LIST
75021: LIST
75022: LIST
75023: PUSH
75024: EMPTY
75025: LIST
75026: LIST
75027: PUSH
75028: EMPTY
75029: LIST
75030: LIST
75031: PPUSH
75032: CALL_OW 72
75036: ST_TO_ADDR
// if not vehicles then
75037: LD_VAR 0 1
75041: NOT
75042: IFFALSE 75046
// exit ;
75044: GO 75073
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
75046: LD_VAR 0 1
75050: PPUSH
75051: LD_VAR 0 2
75055: PUSH
75056: LD_INT 1
75058: ARRAY
75059: PPUSH
75060: LD_VAR 0 2
75064: PUSH
75065: LD_INT 2
75067: ARRAY
75068: PPUSH
75069: CALL_OW 111
// end ;
75073: LD_VAR 0 3
75077: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
75078: LD_INT 0
75080: PPUSH
75081: PPUSH
75082: PPUSH
// if not side or not area then
75083: LD_VAR 0 1
75087: NOT
75088: IFTRUE 75097
75090: PUSH
75091: LD_VAR 0 2
75095: NOT
75096: OR
75097: IFFALSE 75101
// exit ;
75099: GO 75220
// tmp := AreaToList ( area , 0 ) ;
75101: LD_ADDR_VAR 0 5
75105: PUSH
75106: LD_VAR 0 2
75110: PPUSH
75111: LD_INT 0
75113: PPUSH
75114: CALL_OW 517
75118: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
75119: LD_ADDR_VAR 0 4
75123: PUSH
75124: DOUBLE
75125: LD_INT 1
75127: DEC
75128: ST_TO_ADDR
75129: LD_VAR 0 5
75133: PUSH
75134: LD_INT 1
75136: ARRAY
75137: PUSH
75138: FOR_TO
75139: IFFALSE 75218
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
75141: LD_VAR 0 5
75145: PUSH
75146: LD_INT 1
75148: ARRAY
75149: PUSH
75150: LD_VAR 0 4
75154: ARRAY
75155: PPUSH
75156: LD_VAR 0 5
75160: PUSH
75161: LD_INT 2
75163: ARRAY
75164: PUSH
75165: LD_VAR 0 4
75169: ARRAY
75170: PPUSH
75171: CALL_OW 351
75175: IFFALSE 75216
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
75177: LD_VAR 0 5
75181: PUSH
75182: LD_INT 1
75184: ARRAY
75185: PUSH
75186: LD_VAR 0 4
75190: ARRAY
75191: PPUSH
75192: LD_VAR 0 5
75196: PUSH
75197: LD_INT 2
75199: ARRAY
75200: PUSH
75201: LD_VAR 0 4
75205: ARRAY
75206: PPUSH
75207: LD_VAR 0 1
75211: PPUSH
75212: CALL_OW 244
// end ;
75216: GO 75138
75218: POP
75219: POP
// end ;
75220: LD_VAR 0 3
75224: RET
// export function UniqueArray ( array ) ; var i ; begin
75225: LD_INT 0
75227: PPUSH
75228: PPUSH
// result := [ ] ;
75229: LD_ADDR_VAR 0 2
75233: PUSH
75234: EMPTY
75235: ST_TO_ADDR
// if not array then
75236: LD_VAR 0 1
75240: NOT
75241: IFFALSE 75245
// exit ;
75243: GO 75306
// for i := 1 to array do
75245: LD_ADDR_VAR 0 3
75249: PUSH
75250: DOUBLE
75251: LD_INT 1
75253: DEC
75254: ST_TO_ADDR
75255: LD_VAR 0 1
75259: PUSH
75260: FOR_TO
75261: IFFALSE 75304
// if not array [ i ] in result then
75263: LD_VAR 0 1
75267: PUSH
75268: LD_VAR 0 3
75272: ARRAY
75273: PUSH
75274: LD_VAR 0 2
75278: IN
75279: NOT
75280: IFFALSE 75302
// result := Join ( result , i ) ;
75282: LD_ADDR_VAR 0 2
75286: PUSH
75287: LD_VAR 0 2
75291: PPUSH
75292: LD_VAR 0 3
75296: PPUSH
75297: CALL 69957 0 2
75301: ST_TO_ADDR
75302: GO 75260
75304: POP
75305: POP
// end ; end_of_file
75306: LD_VAR 0 2
75310: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
75311: LD_VAR 0 1
75315: PUSH
75316: LD_INT 200
75318: DOUBLE
75319: GREATEREQUAL
75320: IFFALSE 75328
75322: LD_INT 299
75324: DOUBLE
75325: LESSEQUAL
75326: IFTRUE 75330
75328: GO 75362
75330: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
75331: LD_VAR 0 1
75335: PPUSH
75336: LD_VAR 0 2
75340: PPUSH
75341: LD_VAR 0 3
75345: PPUSH
75346: LD_VAR 0 4
75350: PPUSH
75351: LD_VAR 0 5
75355: PPUSH
75356: CALL 26267 0 5
75360: GO 75439
75362: LD_INT 300
75364: DOUBLE
75365: GREATEREQUAL
75366: IFFALSE 75374
75368: LD_INT 399
75370: DOUBLE
75371: LESSEQUAL
75372: IFTRUE 75376
75374: GO 75438
75376: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
75377: LD_VAR 0 1
75381: PPUSH
75382: LD_VAR 0 2
75386: PPUSH
75387: LD_VAR 0 3
75391: PPUSH
75392: LD_VAR 0 4
75396: PPUSH
75397: LD_VAR 0 5
75401: PPUSH
75402: LD_VAR 0 6
75406: PPUSH
75407: LD_VAR 0 7
75411: PPUSH
75412: LD_VAR 0 8
75416: PPUSH
75417: LD_VAR 0 9
75421: PPUSH
75422: LD_VAR 0 10
75426: PPUSH
75427: LD_VAR 0 11
75431: PPUSH
75432: CALL 22151 0 11
75436: GO 75439
75438: POP
// end ;
75439: PPOPN 11
75441: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
75442: LD_VAR 0 1
75446: PPUSH
75447: LD_VAR 0 2
75451: PPUSH
75452: LD_VAR 0 3
75456: PPUSH
75457: LD_VAR 0 4
75461: PPUSH
75462: LD_VAR 0 5
75466: PPUSH
75467: CALL 25648 0 5
// end ; end_of_file
75471: PPOPN 5
75473: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
75474: LD_VAR 0 1
75478: PPUSH
75479: LD_VAR 0 2
75483: PPUSH
75484: LD_VAR 0 3
75488: PPUSH
75489: LD_VAR 0 4
75493: PPUSH
75494: LD_VAR 0 5
75498: PPUSH
75499: LD_VAR 0 6
75503: PPUSH
75504: CALL 9691 0 6
// end ;
75508: PPOPN 6
75510: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
75511: LD_INT 0
75513: PPUSH
// begin if not units then
75514: LD_VAR 0 1
75518: NOT
75519: IFFALSE 75523
// exit ;
75521: GO 75557
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
75523: LD_VAR 0 1
75527: PPUSH
75528: LD_VAR 0 2
75532: PPUSH
75533: LD_VAR 0 3
75537: PPUSH
75538: LD_VAR 0 4
75542: PPUSH
75543: LD_VAR 0 5
75547: PPUSH
75548: LD_VAR 0 6
75552: PPUSH
75553: CALL 31774 0 6
// end ;
75557: PPOPN 7
75559: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
75560: CALL 9578 0 0
// end ;
75564: PPOPN 1
75566: END
