// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// SetDifficulty ( GetMultiplayerSetting ( 0 ) ) ;
  11: LD_INT 0
  13: PPUSH
  14: CALL_OW 426
  18: PPUSH
  19: CALL 279 0 1
// InGameOn ;
  23: CALL_OW 8
// CenterNowOnXY ( 0 , 0 ) ;
  27: LD_INT 0
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: CALL_OW 86
// RandomizeAll ;
  37: CALL_OW 11
// DestroyTrash ;
  41: CALL 148 0 0
// ShowPath ;
  45: CALL 214 0 0
// RandMusic ( 1 , 3 ) ;
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 3
  54: PPUSH
  55: CALL 222 0 2
// PrepareAnimals ( [ 8 , 7 , 6 ] [ dif ] , 2 , 3 , nature ) ;
  59: LD_INT 8
  61: PUSH
  62: LD_INT 7
  64: PUSH
  65: LD_INT 6
  67: PUSH
  68: EMPTY
  69: LIST
  70: LIST
  71: LIST
  72: PUSH
  73: LD_EXP 1
  77: ARRAY
  78: PPUSH
  79: LD_INT 2
  81: PPUSH
  82: LD_INT 3
  84: PPUSH
  85: LD_INT 10
  87: PPUSH
  88: CALL 329 0 4
// PrepareRussian ;
  92: CALL 1407 0 0
// Action ;
  96: CALL 8617 0 0
// PrepareAmerican ;
 100: CALL 5237 0 0
// end ;
 104: END
// every 2 2$00 + 1 1$0 do var i , bool ;
 105: GO 107
 107: DISABLE
 108: LD_INT 0
 110: PPUSH
 111: PPUSH
// begin bool := Rand ( false , true ) ;
 112: LD_ADDR_VAR 0 2
 116: PUSH
 117: LD_INT 0
 119: PPUSH
 120: LD_INT 1
 122: PPUSH
 123: CALL_OW 12
 127: ST_TO_ADDR
// if bool then
 128: LD_VAR 0 2
 132: IFFALSE 144
// RandMusic ( 1 , 3 ) ;
 134: LD_INT 1
 136: PPUSH
 137: LD_INT 3
 139: PPUSH
 140: CALL 222 0 2
// enable ;
 144: ENABLE
// end ; end_of_file
 145: PPOPN 2
 147: END
// export function DestroyTrash ; var i ; begin
 148: LD_INT 0
 150: PPUSH
 151: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_not , [ f_lives , 5 ] ] ] ) do
 152: LD_ADDR_VAR 0 2
 156: PUSH
 157: LD_INT 22
 159: PUSH
 160: LD_INT 0
 162: PUSH
 163: EMPTY
 164: LIST
 165: LIST
 166: PUSH
 167: LD_INT 3
 169: PUSH
 170: LD_INT 24
 172: PUSH
 173: LD_INT 5
 175: PUSH
 176: EMPTY
 177: LIST
 178: LIST
 179: PUSH
 180: EMPTY
 181: LIST
 182: LIST
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 69
 192: PUSH
 193: FOR_IN
 194: IFFALSE 207
// KillUnit ( i ) ;
 196: LD_VAR 0 2
 200: PPUSH
 201: CALL_OW 66
 205: GO 193
 207: POP
 208: POP
// end ;
 209: LD_VAR 0 1
 213: RET
// export function ShowPath ; begin
 214: LD_INT 0
 216: PPUSH
// end ;
 217: LD_VAR 0 1
 221: RET
// export function RandMusic ( n1 , n2 ) ; var proc ; begin
 222: LD_INT 0
 224: PPUSH
 225: PPUSH
// proc := Rand ( 0 , 100 ) ;
 226: LD_ADDR_VAR 0 4
 230: PUSH
 231: LD_INT 0
 233: PPUSH
 234: LD_INT 100
 236: PPUSH
 237: CALL_OW 12
 241: ST_TO_ADDR
// if proc > 50 then
 242: LD_VAR 0 4
 246: PUSH
 247: LD_INT 50
 249: GREATER
 250: IFFALSE 264
// music_nat := n1 else
 252: LD_ADDR_OWVAR 71
 256: PUSH
 257: LD_VAR 0 1
 261: ST_TO_ADDR
 262: GO 274
// music_nat := n2 ;
 264: LD_ADDR_OWVAR 71
 268: PUSH
 269: LD_VAR 0 2
 273: ST_TO_ADDR
// end ;
 274: LD_VAR 0 3
 278: RET
// export dif ; export function SetDifficulty ( val ) ; begin
 279: LD_INT 0
 281: PPUSH
// if not val then
 282: LD_VAR 0 1
 286: NOT
 287: IFFALSE 297
// val := 2 ;
 289: LD_ADDR_VAR 0 1
 293: PUSH
 294: LD_INT 2
 296: ST_TO_ADDR
// dif := val ;
 297: LD_ADDR_EXP 1
 301: PUSH
 302: LD_VAR 0 1
 306: ST_TO_ADDR
// if dif < 3 then
 307: LD_EXP 1
 311: PUSH
 312: LD_INT 3
 314: LESS
 315: IFFALSE 324
// RemoveEnvironmentArea ( evnt ) ;
 317: LD_INT 9
 319: PPUSH
 320: CALL_OW 355
// end ;
 324: LD_VAR 0 2
 328: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
 333: PPUSH
 334: PPUSH
 335: PPUSH
// uc_nation = nation_nature ;
 336: LD_ADDR_OWVAR 21
 340: PUSH
 341: LD_INT 0
 343: ST_TO_ADDR
// uc_side = 0 ;
 344: LD_ADDR_OWVAR 20
 348: PUSH
 349: LD_INT 0
 351: ST_TO_ADDR
// hc_importance := 0 ;
 352: LD_ADDR_OWVAR 32
 356: PUSH
 357: LD_INT 0
 359: ST_TO_ADDR
// l = 0 ;
 360: LD_ADDR_VAR 0 6
 364: PUSH
 365: LD_INT 0
 367: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
 368: LD_ADDR_OWVAR 24
 372: PUSH
 373: LD_INT 0
 375: PPUSH
 376: LD_INT 5
 378: PPUSH
 379: CALL_OW 12
 383: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
 384: LD_ADDR_OWVAR 35
 388: PUSH
 389: LD_INT 5
 391: NEG
 392: PPUSH
 393: LD_INT 5
 395: PPUSH
 396: CALL_OW 12
 400: ST_TO_ADDR
// hc_gallery =  ;
 401: LD_ADDR_OWVAR 33
 405: PUSH
 406: LD_STRING 
 408: ST_TO_ADDR
// hc_class = class_apeman ;
 409: LD_ADDR_OWVAR 28
 413: PUSH
 414: LD_INT 12
 416: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
 417: LD_ADDR_OWVAR 29
 421: PUSH
 422: LD_INT 11
 424: PPUSH
 425: LD_INT 13
 427: PPUSH
 428: CALL_OW 12
 432: PUSH
 433: LD_INT 10
 435: PPUSH
 436: LD_INT 11
 438: PPUSH
 439: CALL_OW 12
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: ST_TO_ADDR
// hc_sex = sex_male ;
 448: LD_ADDR_OWVAR 27
 452: PUSH
 453: LD_INT 1
 455: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
 456: LD_ADDR_OWVAR 31
 460: PUSH
 461: LD_INT 0
 463: PPUSH
 464: LD_INT 2
 466: PPUSH
 467: CALL_OW 12
 471: PUSH
 472: LD_INT 0
 474: PUSH
 475: LD_INT 0
 477: PUSH
 478: LD_INT 0
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: ST_TO_ADDR
// apeman = CreateHuman ;
 487: LD_ADDR_VAR 0 7
 491: PUSH
 492: CALL_OW 44
 496: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
 497: LD_VAR 0 7
 501: PPUSH
 502: LD_VAR 0 4
 506: PPUSH
 507: LD_INT 0
 509: PPUSH
 510: CALL_OW 49
// l = l + 1 ;
 514: LD_ADDR_VAR 0 6
 518: PUSH
 519: LD_VAR 0 6
 523: PUSH
 524: LD_INT 1
 526: PLUS
 527: ST_TO_ADDR
// end until l = num1 ;
 528: LD_VAR 0 6
 532: PUSH
 533: LD_VAR 0 1
 537: EQUAL
 538: IFFALSE 368
// l = 0 ;
 540: LD_ADDR_VAR 0 6
 544: PUSH
 545: LD_INT 0
 547: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
 548: LD_ADDR_OWVAR 35
 552: PUSH
 553: LD_INT 0
 555: PPUSH
 556: LD_INT 25
 558: PPUSH
 559: CALL_OW 12
 563: ST_TO_ADDR
// hc_class = class_tiger ;
 564: LD_ADDR_OWVAR 28
 568: PUSH
 569: LD_INT 14
 571: ST_TO_ADDR
// hc_sex = sex_male ;
 572: LD_ADDR_OWVAR 27
 576: PUSH
 577: LD_INT 1
 579: ST_TO_ADDR
// hc_gallery = sandnature ;
 580: LD_ADDR_OWVAR 33
 584: PUSH
 585: LD_STRING sandnature
 587: ST_TO_ADDR
// hc_face_number = 3 ;
 588: LD_ADDR_OWVAR 34
 592: PUSH
 593: LD_INT 3
 595: ST_TO_ADDR
// tiger = CreateHuman ;
 596: LD_ADDR_VAR 0 8
 600: PUSH
 601: CALL_OW 44
 605: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
 606: LD_VAR 0 8
 610: PPUSH
 611: LD_VAR 0 4
 615: PPUSH
 616: LD_INT 0
 618: PPUSH
 619: CALL_OW 49
// l = l + 1 ;
 623: LD_ADDR_VAR 0 6
 627: PUSH
 628: LD_VAR 0 6
 632: PUSH
 633: LD_INT 1
 635: PLUS
 636: ST_TO_ADDR
// end until l = num2 ;
 637: LD_VAR 0 6
 641: PUSH
 642: LD_VAR 0 2
 646: EQUAL
 647: IFFALSE 548
// l = 0 ;
 649: LD_ADDR_VAR 0 6
 653: PUSH
 654: LD_INT 0
 656: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
 657: LD_ADDR_OWVAR 28
 661: PUSH
 662: LD_INT 18
 664: ST_TO_ADDR
// hc_gallery = sandnature ;
 665: LD_ADDR_OWVAR 33
 669: PUSH
 670: LD_STRING sandnature
 672: ST_TO_ADDR
// hc_face_number = 1 ;
 673: LD_ADDR_OWVAR 34
 677: PUSH
 678: LD_INT 1
 680: ST_TO_ADDR
// bird = CreateHuman ;
 681: LD_ADDR_VAR 0 9
 685: PUSH
 686: CALL_OW 44
 690: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
 691: LD_VAR 0 9
 695: PPUSH
 696: LD_INT 0
 698: PPUSH
 699: CALL_OW 51
// l = l + 1 ;
 703: LD_ADDR_VAR 0 6
 707: PUSH
 708: LD_VAR 0 6
 712: PUSH
 713: LD_INT 1
 715: PLUS
 716: ST_TO_ADDR
// end until l = num3 ;
 717: LD_VAR 0 6
 721: PUSH
 722: LD_VAR 0 3
 726: EQUAL
 727: IFFALSE 657
// end ;
 729: LD_VAR 0 5
 733: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
 734: LD_INT 0
 736: PPUSH
 737: PPUSH
 738: PPUSH
 739: PPUSH
 740: PPUSH
 741: PPUSH
// InitHc ;
 742: CALL_OW 19
// hc_class := clas ;
 746: LD_ADDR_OWVAR 28
 750: PUSH
 751: LD_VAR 0 1
 755: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
 756: LD_ADDR_VAR 0 4
 760: PUSH
 761: LD_VAR 0 2
 765: PUSH
 766: LD_INT 1
 768: NEG
 769: PPUSH
 770: LD_INT 1
 772: PPUSH
 773: CALL_OW 12
 777: PLUS
 778: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
 779: LD_ADDR_VAR 0 5
 783: PUSH
 784: LD_VAR 0 2
 788: PUSH
 789: LD_INT 1
 791: NEG
 792: PPUSH
 793: LD_INT 1
 795: PPUSH
 796: CALL_OW 12
 800: PLUS
 801: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
 802: LD_ADDR_VAR 0 6
 806: PUSH
 807: LD_VAR 0 2
 811: PUSH
 812: LD_INT 1
 814: NEG
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: CALL_OW 12
 823: PLUS
 824: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
 825: LD_ADDR_VAR 0 7
 829: PUSH
 830: LD_VAR 0 2
 834: PUSH
 835: LD_INT 1
 837: NEG
 838: PPUSH
 839: LD_INT 1
 841: PPUSH
 842: CALL_OW 12
 846: PLUS
 847: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
 848: LD_VAR 0 1
 852: PUSH
 853: LD_INT 1
 855: EQUAL
 856: PUSH
 857: LD_VAR 0 1
 861: PUSH
 862: LD_INT 9
 864: EQUAL
 865: OR
 866: PUSH
 867: LD_VAR 0 1
 871: PUSH
 872: LD_INT 5
 874: EQUAL
 875: OR
 876: PUSH
 877: LD_VAR 0 1
 881: PUSH
 882: LD_INT 8
 884: EQUAL
 885: OR
 886: IFFALSE 911
// bonus := [ 2 , 0 , 0 , 0 ] ;
 888: LD_ADDR_VAR 0 8
 892: PUSH
 893: LD_INT 2
 895: PUSH
 896: LD_INT 0
 898: PUSH
 899: LD_INT 0
 901: PUSH
 902: LD_INT 0
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: ST_TO_ADDR
// if clas = 2 then
 911: LD_VAR 0 1
 915: PUSH
 916: LD_INT 2
 918: EQUAL
 919: IFFALSE 944
// bonus := [ 0 , 2 , 0 , 0 ] ;
 921: LD_ADDR_VAR 0 8
 925: PUSH
 926: LD_INT 0
 928: PUSH
 929: LD_INT 2
 931: PUSH
 932: LD_INT 0
 934: PUSH
 935: LD_INT 0
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: ST_TO_ADDR
// if clas = 3 then
 944: LD_VAR 0 1
 948: PUSH
 949: LD_INT 3
 951: EQUAL
 952: IFFALSE 977
// bonus := [ 0 , 0 , 2 , 0 ] ;
 954: LD_ADDR_VAR 0 8
 958: PUSH
 959: LD_INT 0
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: LD_INT 2
 967: PUSH
 968: LD_INT 0
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: ST_TO_ADDR
// if clas = 4 then
 977: LD_VAR 0 1
 981: PUSH
 982: LD_INT 4
 984: EQUAL
 985: IFFALSE 1010
// bonus := [ 0 , 0 , 0 , 2 ] ;
 987: LD_ADDR_VAR 0 8
 991: PUSH
 992: LD_INT 0
 994: PUSH
 995: LD_INT 0
 997: PUSH
 998: LD_INT 0
1000: PUSH
1001: LD_INT 2
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
1010: LD_VAR 0 1
1014: PUSH
1015: LD_INT 4
1017: GREATER
1018: PUSH
1019: LD_VAR 0 1
1023: PUSH
1024: LD_INT 9
1026: NONEQUAL
1027: AND
1028: PUSH
1029: LD_VAR 0 1
1033: PUSH
1034: LD_INT 5
1036: NONEQUAL
1037: AND
1038: PUSH
1039: LD_VAR 0 1
1043: PUSH
1044: LD_INT 8
1046: NONEQUAL
1047: AND
1048: IFFALSE 1073
// bonus := [ 0 , 0 , 0 , 0 ] ;
1050: LD_ADDR_VAR 0 8
1054: PUSH
1055: LD_INT 0
1057: PUSH
1058: LD_INT 0
1060: PUSH
1061: LD_INT 0
1063: PUSH
1064: LD_INT 0
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
1073: LD_ADDR_OWVAR 30
1077: PUSH
1078: LD_INT 0
1080: PPUSH
1081: LD_INT 2
1083: PPUSH
1084: CALL_OW 12
1088: PUSH
1089: LD_INT 0
1091: PPUSH
1092: LD_INT 2
1094: PPUSH
1095: CALL_OW 12
1099: PUSH
1100: LD_INT 0
1102: PPUSH
1103: LD_INT 2
1105: PPUSH
1106: CALL_OW 12
1110: PUSH
1111: LD_INT 0
1113: PPUSH
1114: LD_INT 2
1116: PPUSH
1117: CALL_OW 12
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: LIST
1127: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
1128: LD_ADDR_OWVAR 31
1132: PUSH
1133: LD_VAR 0 4
1137: PUSH
1138: LD_VAR 0 8
1142: PUSH
1143: LD_INT 1
1145: ARRAY
1146: PLUS
1147: PUSH
1148: LD_VAR 0 5
1152: PUSH
1153: LD_VAR 0 8
1157: PUSH
1158: LD_INT 2
1160: ARRAY
1161: PLUS
1162: PUSH
1163: LD_VAR 0 6
1167: PUSH
1168: LD_VAR 0 8
1172: PUSH
1173: LD_INT 3
1175: ARRAY
1176: PLUS
1177: PUSH
1178: LD_VAR 0 7
1182: PUSH
1183: LD_VAR 0 8
1187: PUSH
1188: LD_INT 4
1190: ARRAY
1191: PLUS
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: ST_TO_ADDR
// if clas = 3 then
1199: LD_VAR 0 1
1203: PUSH
1204: LD_INT 3
1206: EQUAL
1207: IFFALSE 1219
// hc_sex := sex_male else
1209: LD_ADDR_OWVAR 27
1213: PUSH
1214: LD_INT 1
1216: ST_TO_ADDR
1217: GO 1235
// hc_sex := Rand ( sex_male , sex_female ) ;
1219: LD_ADDR_OWVAR 27
1223: PUSH
1224: LD_INT 1
1226: PPUSH
1227: LD_INT 2
1229: PPUSH
1230: CALL_OW 12
1234: ST_TO_ADDR
// hc_gallery :=  ;
1235: LD_ADDR_OWVAR 33
1239: PUSH
1240: LD_STRING 
1242: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 8 , 12 ) ] ;
1243: LD_ADDR_OWVAR 29
1247: PUSH
1248: LD_INT 8
1250: PPUSH
1251: LD_INT 12
1253: PPUSH
1254: CALL_OW 12
1258: PUSH
1259: LD_INT 8
1261: PPUSH
1262: LD_INT 12
1264: PPUSH
1265: CALL_OW 12
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: ST_TO_ADDR
// hc_name :=  ;
1274: LD_ADDR_OWVAR 26
1278: PUSH
1279: LD_STRING 
1281: ST_TO_ADDR
// result := CreateHuman ;
1282: LD_ADDR_VAR 0 3
1286: PUSH
1287: CALL_OW 44
1291: ST_TO_ADDR
// end ;
1292: LD_VAR 0 3
1296: RET
// export function CreateVehicleWithDriver ( chassis , engine , weapon , area , dir , lvl ) ; var veh ; begin
1297: LD_INT 0
1299: PPUSH
1300: PPUSH
// vc_chassis := chassis ;
1301: LD_ADDR_OWVAR 37
1305: PUSH
1306: LD_VAR 0 1
1310: ST_TO_ADDR
// vc_engine := engine ;
1311: LD_ADDR_OWVAR 39
1315: PUSH
1316: LD_VAR 0 2
1320: ST_TO_ADDR
// vc_weapon := weapon ;
1321: LD_ADDR_OWVAR 40
1325: PUSH
1326: LD_VAR 0 3
1330: ST_TO_ADDR
// vc_control := control_manual ;
1331: LD_ADDR_OWVAR 38
1335: PUSH
1336: LD_INT 1
1338: ST_TO_ADDR
// veh := CreateVehicle ;
1339: LD_ADDR_VAR 0 8
1343: PUSH
1344: CALL_OW 45
1348: ST_TO_ADDR
// SetDir ( veh , dir ) ;
1349: LD_VAR 0 8
1353: PPUSH
1354: LD_VAR 0 5
1358: PPUSH
1359: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
1363: LD_VAR 0 8
1367: PPUSH
1368: LD_VAR 0 4
1372: PPUSH
1373: LD_INT 0
1375: PPUSH
1376: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , lvl ) , veh ) ;
1380: LD_INT 3
1382: PPUSH
1383: LD_VAR 0 6
1387: PPUSH
1388: CALL 734 0 2
1392: PPUSH
1393: LD_VAR 0 8
1397: PPUSH
1398: CALL_OW 52
// end ; end_of_file
1402: LD_VAR 0 7
1406: RET
// export Popov , Commander , Platonov , Kapral ; export depot_rdy , dep_x , dep_y ; export function PrepareRussian ; var i , un , skill , team , p ; begin
1407: LD_INT 0
1409: PPUSH
1410: PPUSH
1411: PPUSH
1412: PPUSH
1413: PPUSH
1414: PPUSH
// depot_rdy := false ;
1415: LD_ADDR_EXP 6
1419: PUSH
1420: LD_INT 0
1422: ST_TO_ADDR
// uc_side := 6 ;
1423: LD_ADDR_OWVAR 20
1427: PUSH
1428: LD_INT 6
1430: ST_TO_ADDR
// uc_nation := 3 ;
1431: LD_ADDR_OWVAR 21
1435: PUSH
1436: LD_INT 3
1438: ST_TO_ADDR
// hc_gallery := ru ;
1439: LD_ADDR_OWVAR 33
1443: PUSH
1444: LD_STRING ru
1446: ST_TO_ADDR
// hc_face_number := 10 ;
1447: LD_ADDR_OWVAR 34
1451: PUSH
1452: LD_INT 10
1454: ST_TO_ADDR
// hc_name := Siergiej I. Popov ;
1455: LD_ADDR_OWVAR 26
1459: PUSH
1460: LD_STRING Siergiej I. Popov
1462: ST_TO_ADDR
// hc_class := 1 ;
1463: LD_ADDR_OWVAR 28
1467: PUSH
1468: LD_INT 1
1470: ST_TO_ADDR
// hc_sex := sex_male ;
1471: LD_ADDR_OWVAR 27
1475: PUSH
1476: LD_INT 1
1478: ST_TO_ADDR
// popov := CreateHuman ;
1479: LD_ADDR_EXP 2
1483: PUSH
1484: CALL_OW 44
1488: ST_TO_ADDR
// hc_gallery := general ;
1489: LD_ADDR_OWVAR 33
1493: PUSH
1494: LD_STRING general
1496: ST_TO_ADDR
// hc_face_number := 1 ;
1497: LD_ADDR_OWVAR 34
1501: PUSH
1502: LD_INT 1
1504: ST_TO_ADDR
// hc_name := Mjr. D. N. Platonow ;
1505: LD_ADDR_OWVAR 26
1509: PUSH
1510: LD_STRING Mjr. D. N. Platonow
1512: ST_TO_ADDR
// platonov := CreateHuman ;
1513: LD_ADDR_EXP 4
1517: PUSH
1518: CALL_OW 44
1522: ST_TO_ADDR
// uc_side := 3 ;
1523: LD_ADDR_OWVAR 20
1527: PUSH
1528: LD_INT 3
1530: ST_TO_ADDR
// ChangeSideFog ( 3 , 6 ) ;
1531: LD_INT 3
1533: PPUSH
1534: LD_INT 6
1536: PPUSH
1537: CALL_OW 343
// skill := [ 6 , 5 , 4 ] [ dif ] ;
1541: LD_ADDR_VAR 0 4
1545: PUSH
1546: LD_INT 6
1548: PUSH
1549: LD_INT 5
1551: PUSH
1552: LD_INT 4
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: LIST
1559: PUSH
1560: LD_EXP 1
1564: ARRAY
1565: ST_TO_ADDR
// team := [ ] ;
1566: LD_ADDR_VAR 0 5
1570: PUSH
1571: EMPTY
1572: ST_TO_ADDR
// hc_importance := 100 ;
1573: LD_ADDR_OWVAR 32
1577: PUSH
1578: LD_INT 100
1580: ST_TO_ADDR
// hc_gallery := gamma ;
1581: LD_ADDR_OWVAR 33
1585: PUSH
1586: LD_STRING gamma
1588: ST_TO_ADDR
// hc_face_number := 1 ;
1589: LD_ADDR_OWVAR 34
1593: PUSH
1594: LD_INT 1
1596: ST_TO_ADDR
// hc_class := 1 ;
1597: LD_ADDR_OWVAR 28
1601: PUSH
1602: LD_INT 1
1604: ST_TO_ADDR
// hc_skills := [ [ 8 , 7 , 6 ] [ dif ] , 5 , 3 , 0 ] ;
1605: LD_ADDR_OWVAR 31
1609: PUSH
1610: LD_INT 8
1612: PUSH
1613: LD_INT 7
1615: PUSH
1616: LD_INT 6
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: LIST
1623: PUSH
1624: LD_EXP 1
1628: ARRAY
1629: PUSH
1630: LD_INT 5
1632: PUSH
1633: LD_INT 3
1635: PUSH
1636: LD_INT 0
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: ST_TO_ADDR
// hc_sex := sex_male ;
1645: LD_ADDR_OWVAR 27
1649: PUSH
1650: LD_INT 1
1652: ST_TO_ADDR
// hc_name := Mjr. Jurij Karakanov ;
1653: LD_ADDR_OWVAR 26
1657: PUSH
1658: LD_STRING Mjr. Jurij Karakanov
1660: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1661: LD_ADDR_OWVAR 29
1665: PUSH
1666: LD_INT 10
1668: PUSH
1669: LD_INT 11
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: ST_TO_ADDR
// commander := CreateHuman ;
1676: LD_ADDR_EXP 3
1680: PUSH
1681: CALL_OW 44
1685: ST_TO_ADDR
// team := team ^ commander ;
1686: LD_ADDR_VAR 0 5
1690: PUSH
1691: LD_VAR 0 5
1695: PUSH
1696: LD_EXP 3
1700: ADD
1701: ST_TO_ADDR
// hc_importance := 0 ;
1702: LD_ADDR_OWVAR 32
1706: PUSH
1707: LD_INT 0
1709: ST_TO_ADDR
// hc_name :=  ;
1710: LD_ADDR_OWVAR 26
1714: PUSH
1715: LD_STRING 
1717: ST_TO_ADDR
// hc_gallery :=  ;
1718: LD_ADDR_OWVAR 33
1722: PUSH
1723: LD_STRING 
1725: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
1726: LD_ADDR_OWVAR 29
1730: PUSH
1731: LD_INT 12
1733: PUSH
1734: LD_INT 10
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: ST_TO_ADDR
// hc_sex := sex_male ;
1741: LD_ADDR_OWVAR 27
1745: PUSH
1746: LD_INT 1
1748: ST_TO_ADDR
// Kapral := CreateHuman ;
1749: LD_ADDR_EXP 5
1753: PUSH
1754: CALL_OW 44
1758: ST_TO_ADDR
// for i = 3 downto dif do
1759: LD_ADDR_VAR 0 2
1763: PUSH
1764: DOUBLE
1765: LD_INT 3
1767: INC
1768: ST_TO_ADDR
1769: LD_EXP 1
1773: PUSH
1774: FOR_DOWNTO
1775: IFFALSE 1881
// begin vc_chassis := ru_medium_tracked ;
1777: LD_ADDR_OWVAR 37
1781: PUSH
1782: LD_INT 22
1784: ST_TO_ADDR
// vc_engine := engine_combustion ;
1785: LD_ADDR_OWVAR 39
1789: PUSH
1790: LD_INT 1
1792: ST_TO_ADDR
// vc_control := control_manual ;
1793: LD_ADDR_OWVAR 38
1797: PUSH
1798: LD_INT 1
1800: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_gun , ru_gun ] [ i ] ;
1801: LD_ADDR_OWVAR 40
1805: PUSH
1806: LD_INT 43
1808: PUSH
1809: LD_INT 44
1811: PUSH
1812: LD_INT 44
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: LIST
1819: PUSH
1820: LD_VAR 0 2
1824: ARRAY
1825: ST_TO_ADDR
// vc_fuel_battery := Rand ( 55 , 77 ) ;
1826: LD_ADDR_OWVAR 41
1830: PUSH
1831: LD_INT 55
1833: PPUSH
1834: LD_INT 77
1836: PPUSH
1837: CALL_OW 12
1841: ST_TO_ADDR
// un := CreateVehicle ;
1842: LD_ADDR_VAR 0 3
1846: PUSH
1847: CALL_OW 45
1851: ST_TO_ADDR
// SetDir ( un , 5 ) ;
1852: LD_VAR 0 3
1856: PPUSH
1857: LD_INT 5
1859: PPUSH
1860: CALL_OW 233
// PlaceUnitArea ( un , rus_spawn , false ) ;
1864: LD_VAR 0 3
1868: PPUSH
1869: LD_INT 1
1871: PPUSH
1872: LD_INT 0
1874: PPUSH
1875: CALL_OW 49
// end ;
1879: GO 1774
1881: POP
1882: POP
// vc_weapon := ru_heavy_machine_gun ;
1883: LD_ADDR_OWVAR 40
1887: PUSH
1888: LD_INT 42
1890: ST_TO_ADDR
// vc_fuel_battery := Rand ( 55 , 77 ) ;
1891: LD_ADDR_OWVAR 41
1895: PUSH
1896: LD_INT 55
1898: PPUSH
1899: LD_INT 77
1901: PPUSH
1902: CALL_OW 12
1906: ST_TO_ADDR
// un := CreateVehicle ;
1907: LD_ADDR_VAR 0 3
1911: PUSH
1912: CALL_OW 45
1916: ST_TO_ADDR
// SetDir ( un , 5 ) ;
1917: LD_VAR 0 3
1921: PPUSH
1922: LD_INT 5
1924: PPUSH
1925: CALL_OW 233
// PlaceUnitArea ( un , rus_spawn , false ) ;
1929: LD_VAR 0 3
1933: PPUSH
1934: LD_INT 1
1936: PPUSH
1937: LD_INT 0
1939: PPUSH
1940: CALL_OW 49
// for p = 1 to 4 do
1944: LD_ADDR_VAR 0 6
1948: PUSH
1949: DOUBLE
1950: LD_INT 1
1952: DEC
1953: ST_TO_ADDR
1954: LD_INT 4
1956: PUSH
1957: FOR_TO
1958: IFFALSE 2025
// for i = 1 to [ 5 , 4 , 3 ] [ dif ] do
1960: LD_ADDR_VAR 0 2
1964: PUSH
1965: DOUBLE
1966: LD_INT 1
1968: DEC
1969: ST_TO_ADDR
1970: LD_INT 5
1972: PUSH
1973: LD_INT 4
1975: PUSH
1976: LD_INT 3
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: LIST
1983: PUSH
1984: LD_EXP 1
1988: ARRAY
1989: PUSH
1990: FOR_TO
1991: IFFALSE 2021
// team := team ^ CreateHumanWithClass ( p , skill ) ;
1993: LD_ADDR_VAR 0 5
1997: PUSH
1998: LD_VAR 0 5
2002: PUSH
2003: LD_VAR 0 6
2007: PPUSH
2008: LD_VAR 0 4
2012: PPUSH
2013: CALL 734 0 2
2017: ADD
2018: ST_TO_ADDR
2019: GO 1990
2021: POP
2022: POP
2023: GO 1957
2025: POP
2026: POP
// for i = 1 to team do
2027: LD_ADDR_VAR 0 2
2031: PUSH
2032: DOUBLE
2033: LD_INT 1
2035: DEC
2036: ST_TO_ADDR
2037: LD_VAR 0 5
2041: PUSH
2042: FOR_TO
2043: IFFALSE 2161
// if GetClass ( team [ i ] ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_empty ] ] ) then
2045: LD_VAR 0 5
2049: PUSH
2050: LD_VAR 0 2
2054: ARRAY
2055: PPUSH
2056: CALL_OW 257
2060: PUSH
2061: LD_INT 3
2063: EQUAL
2064: PUSH
2065: LD_INT 22
2067: PUSH
2068: LD_INT 3
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 58
2077: PUSH
2078: EMPTY
2079: LIST
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PPUSH
2085: CALL_OW 69
2089: AND
2090: IFFALSE 2138
// PlaceHumanInUnit ( team [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_empty ] ] ) [ 1 ] ) else
2092: LD_VAR 0 5
2096: PUSH
2097: LD_VAR 0 2
2101: ARRAY
2102: PPUSH
2103: LD_INT 22
2105: PUSH
2106: LD_INT 3
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: PUSH
2113: LD_INT 58
2115: PUSH
2116: EMPTY
2117: LIST
2118: PUSH
2119: EMPTY
2120: LIST
2121: LIST
2122: PPUSH
2123: CALL_OW 69
2127: PUSH
2128: LD_INT 1
2130: ARRAY
2131: PPUSH
2132: CALL_OW 52
2136: GO 2159
// PlaceUnitArea ( team [ i ] , rus_spawn , false ) ;
2138: LD_VAR 0 5
2142: PUSH
2143: LD_VAR 0 2
2147: ARRAY
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: LD_INT 0
2154: PPUSH
2155: CALL_OW 49
2159: GO 2042
2161: POP
2162: POP
// end ;
2163: LD_VAR 0 1
2167: RET
// every 0 0$10 trigger depot_rdy do var i , un , l , driver ;
2168: LD_EXP 6
2172: IFFALSE 2542
2174: GO 2176
2176: DISABLE
2177: LD_INT 0
2179: PPUSH
2180: PPUSH
2181: PPUSH
2182: PPUSH
// begin Wait ( 0 0$07 ) ;
2183: LD_INT 245
2185: PPUSH
2186: CALL_OW 67
// l := 0 ;
2190: LD_ADDR_VAR 0 3
2194: PUSH
2195: LD_INT 0
2197: ST_TO_ADDR
// repeat begin uc_side := 6 ;
2198: LD_ADDR_OWVAR 20
2202: PUSH
2203: LD_INT 6
2205: ST_TO_ADDR
// uc_nation := 3 ;
2206: LD_ADDR_OWVAR 21
2210: PUSH
2211: LD_INT 3
2213: ST_TO_ADDR
// CreateVehicleWithDriver ( ru_medium_tracked , engine_combustion , ru_cargo_bay , rus_cr_spawn , 5 , Rand ( 3 , 6 ) ) ;
2214: LD_INT 22
2216: PPUSH
2217: LD_INT 1
2219: PPUSH
2220: LD_INT 51
2222: PPUSH
2223: LD_INT 5
2225: PPUSH
2226: LD_INT 5
2228: PPUSH
2229: LD_INT 3
2231: PPUSH
2232: LD_INT 6
2234: PPUSH
2235: CALL_OW 12
2239: PPUSH
2240: CALL 1297 0 6
// un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
2244: LD_ADDR_VAR 0 2
2248: PUSH
2249: LD_INT 22
2251: PUSH
2252: LD_INT 6
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 34
2261: PUSH
2262: LD_INT 51
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PPUSH
2273: CALL_OW 69
2277: PUSH
2278: LD_INT 1
2280: ARRAY
2281: ST_TO_ADDR
// SetCargo ( un , mat_cans , 100 ) ;
2282: LD_VAR 0 2
2286: PPUSH
2287: LD_INT 1
2289: PPUSH
2290: LD_INT 100
2292: PPUSH
2293: CALL_OW 290
// ComMoveXY ( un , dep_x + 2 , dep_y ) ;
2297: LD_VAR 0 2
2301: PPUSH
2302: LD_EXP 7
2306: PUSH
2307: LD_INT 2
2309: PLUS
2310: PPUSH
2311: LD_EXP 8
2315: PPUSH
2316: CALL_OW 111
// AddComUnload ( un ) ;
2320: LD_VAR 0 2
2324: PPUSH
2325: CALL_OW 219
// if ( l = 0 ) then
2329: LD_VAR 0 3
2333: PUSH
2334: LD_INT 0
2336: EQUAL
2337: IFFALSE 2373
// begin Wait ( 0 0$03 ) ;
2339: LD_INT 105
2341: PPUSH
2342: CALL_OW 67
// driver := IsDrivenBy ( un ) ;
2346: LD_ADDR_VAR 0 4
2350: PUSH
2351: LD_VAR 0 2
2355: PPUSH
2356: CALL_OW 311
2360: ST_TO_ADDR
// Say ( driver , Dtran ) ;
2361: LD_VAR 0 4
2365: PPUSH
2366: LD_STRING Dtran
2368: PPUSH
2369: CALL_OW 88
// end ; if ( l = [ 7 , 6 , 5 ] [ dif ] - 1 ) then
2373: LD_VAR 0 3
2377: PUSH
2378: LD_INT 7
2380: PUSH
2381: LD_INT 6
2383: PUSH
2384: LD_INT 5
2386: PUSH
2387: EMPTY
2388: LIST
2389: LIST
2390: LIST
2391: PUSH
2392: LD_EXP 1
2396: ARRAY
2397: PUSH
2398: LD_INT 1
2400: MINUS
2401: EQUAL
2402: IFFALSE 2438
// begin Wait ( 0 0$03 ) ;
2404: LD_INT 105
2406: PPUSH
2407: CALL_OW 67
// driver := IsDrivenBy ( un ) ;
2411: LD_ADDR_VAR 0 4
2415: PUSH
2416: LD_VAR 0 2
2420: PPUSH
2421: CALL_OW 311
2425: ST_TO_ADDR
// Say ( driver , Dtrans ) ;
2426: LD_VAR 0 4
2430: PPUSH
2431: LD_STRING Dtrans
2433: PPUSH
2434: CALL_OW 88
// end ; while ( not IsInArea ( un , rus_exit ) ) do
2438: LD_VAR 0 2
2442: PPUSH
2443: LD_INT 6
2445: PPUSH
2446: CALL_OW 308
2450: NOT
2451: IFFALSE 2477
// begin Wait ( 0 0$01 ) ;
2453: LD_INT 35
2455: PPUSH
2456: CALL_OW 67
// AddComMoveXY ( un , 69 , 97 ) ;
2460: LD_VAR 0 2
2464: PPUSH
2465: LD_INT 69
2467: PPUSH
2468: LD_INT 97
2470: PPUSH
2471: CALL_OW 171
// end ;
2475: GO 2438
// RemoveUnit ( un ) ;
2477: LD_VAR 0 2
2481: PPUSH
2482: CALL_OW 64
// l = l + 1 ;
2486: LD_ADDR_VAR 0 3
2490: PUSH
2491: LD_VAR 0 3
2495: PUSH
2496: LD_INT 1
2498: PLUS
2499: ST_TO_ADDR
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
2500: LD_INT 1155
2502: PPUSH
2503: LD_INT 5355
2505: PPUSH
2506: CALL_OW 12
2510: PPUSH
2511: CALL_OW 67
// end until l = [ 7 , 6 , 5 ] [ dif ] ;
2515: LD_VAR 0 3
2519: PUSH
2520: LD_INT 7
2522: PUSH
2523: LD_INT 6
2525: PUSH
2526: LD_INT 5
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: LIST
2533: PUSH
2534: LD_EXP 1
2538: ARRAY
2539: EQUAL
2540: IFFALSE 2198
// end ; end_of_file
2542: PPOPN 4
2544: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_bazooka and event_rocket = false then
2545: LD_VAR 0 1
2549: PUSH
2550: LD_INT 44
2552: EQUAL
2553: PUSH
2554: LD_EXP 20
2558: PUSH
2559: LD_INT 0
2561: EQUAL
2562: AND
2563: IFFALSE 2709
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) > 0 then
2565: LD_INT 22
2567: PUSH
2568: LD_INT 3
2570: PUSH
2571: EMPTY
2572: LIST
2573: LIST
2574: PUSH
2575: LD_INT 25
2577: PUSH
2578: LD_INT 4
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: PPUSH
2589: CALL_OW 69
2593: PUSH
2594: LD_INT 0
2596: GREATER
2597: IFFALSE 2709
// begin event_rocket := true ;
2599: LD_ADDR_EXP 20
2603: PUSH
2604: LD_INT 1
2606: ST_TO_ADDR
// if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) > 0 then
2607: LD_INT 22
2609: PUSH
2610: LD_INT 3
2612: PUSH
2613: EMPTY
2614: LIST
2615: LIST
2616: PUSH
2617: LD_INT 25
2619: PUSH
2620: LD_INT 4
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: PUSH
2627: LD_INT 26
2629: PUSH
2630: LD_INT 1
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: LIST
2641: PUSH
2642: EMPTY
2643: LIST
2644: PPUSH
2645: CALL_OW 69
2649: PUSH
2650: LD_INT 0
2652: GREATER
2653: IFFALSE 2709
// Say ( FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) [ 1 ] , Dsci2 ) ;
2655: LD_INT 22
2657: PUSH
2658: LD_INT 3
2660: PUSH
2661: EMPTY
2662: LIST
2663: LIST
2664: PUSH
2665: LD_INT 25
2667: PUSH
2668: LD_INT 4
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: PUSH
2675: LD_INT 26
2677: PUSH
2678: LD_INT 1
2680: PUSH
2681: EMPTY
2682: LIST
2683: LIST
2684: PUSH
2685: EMPTY
2686: LIST
2687: LIST
2688: LIST
2689: PUSH
2690: EMPTY
2691: LIST
2692: PPUSH
2693: CALL_OW 69
2697: PUSH
2698: LD_INT 1
2700: ARRAY
2701: PPUSH
2702: LD_STRING Dsci2
2704: PPUSH
2705: CALL_OW 88
// end ; end ;
2709: PPOPN 2
2711: END
// on VehicleConstructed ( un , fac ) do begin if GetSide ( un ) = 3 and GetControl ( un ) = control_computer then
2712: LD_VAR 0 1
2716: PPUSH
2717: CALL_OW 255
2721: PUSH
2722: LD_INT 3
2724: EQUAL
2725: PUSH
2726: LD_VAR 0 1
2730: PPUSH
2731: CALL_OW 263
2735: PUSH
2736: LD_INT 3
2738: EQUAL
2739: AND
2740: IFFALSE 2750
// comp_tested := true ;
2742: LD_ADDR_EXP 22
2746: PUSH
2747: LD_INT 1
2749: ST_TO_ADDR
// end ;
2750: PPOPN 2
2752: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
2753: LD_VAR 0 1
2757: PUSH
2758: LD_INT 22
2760: PUSH
2761: LD_INT 1
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: PUSH
2768: LD_INT 21
2770: PUSH
2771: LD_INT 3
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: PPUSH
2782: CALL_OW 69
2786: IN
2787: IFFALSE 2865
// if attacked = false and sikorski_ar = false then
2789: LD_EXP 15
2793: PUSH
2794: LD_INT 0
2796: EQUAL
2797: PUSH
2798: LD_EXP 12
2802: PUSH
2803: LD_INT 0
2805: EQUAL
2806: AND
2807: IFFALSE 2865
// begin attacked := true ;
2809: LD_ADDR_EXP 15
2813: PUSH
2814: LD_INT 1
2816: ST_TO_ADDR
// if IsInUnit ( donald ) then
2817: LD_EXP 13
2821: PPUSH
2822: CALL_OW 310
2826: IFFALSE 2842
// SayRadio ( donald , DGammaF ) else
2828: LD_EXP 13
2832: PPUSH
2833: LD_STRING DGammaF
2835: PPUSH
2836: CALL_OW 94
2840: GO 2865
// if IsInUnit ( van ) then
2842: LD_EXP 14
2846: PPUSH
2847: CALL_OW 310
2851: IFFALSE 2865
// SayRadio ( van , DGammaM ) ;
2853: LD_EXP 14
2857: PPUSH
2858: LD_STRING DGammaM
2860: PPUSH
2861: CALL_OW 94
// end ; if un in FilterAllUnits ( [ f_control , control_remote ] ) then
2865: LD_VAR 0 1
2869: PUSH
2870: LD_INT 33
2872: PUSH
2873: LD_INT 2
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PPUSH
2880: CALL_OW 69
2884: IN
2885: IFFALSE 2896
// ComUnlink ( un ) ;
2887: LD_VAR 0 1
2891: PPUSH
2892: CALL_OW 136
// end ;
2896: PPOPN 1
2898: END
// on ApemanTamed ( ape , sci ) do begin if GetSex ( sci ) = sex_male then
2899: LD_VAR 0 2
2903: PPUSH
2904: CALL_OW 258
2908: PUSH
2909: LD_INT 1
2911: EQUAL
2912: IFFALSE 2926
// Say ( sci , Dsci3 ) ;
2914: LD_VAR 0 2
2918: PPUSH
2919: LD_STRING Dsci3
2921: PPUSH
2922: CALL_OW 88
// end ;
2926: PPOPN 2
2928: END
// on BuildingComplete ( b ) do var i ;
2929: LD_INT 0
2931: PPUSH
// begin if GetBType ( b ) = b_depot and GetSide ( b ) = 3 and depot_rdy = false then
2932: LD_VAR 0 1
2936: PPUSH
2937: CALL_OW 266
2941: PUSH
2942: LD_INT 0
2944: EQUAL
2945: PUSH
2946: LD_VAR 0 1
2950: PPUSH
2951: CALL_OW 255
2955: PUSH
2956: LD_INT 3
2958: EQUAL
2959: AND
2960: PUSH
2961: LD_EXP 6
2965: PUSH
2966: LD_INT 0
2968: EQUAL
2969: AND
2970: IFFALSE 3034
// begin SetBName ( b , kalinin ) ;
2972: LD_VAR 0 1
2976: PPUSH
2977: LD_STRING kalinin
2979: PPUSH
2980: CALL_OW 500
// dep_x := GetX ( b ) ;
2984: LD_ADDR_EXP 7
2988: PUSH
2989: LD_VAR 0 1
2993: PPUSH
2994: CALL_OW 250
2998: ST_TO_ADDR
// dep_y := GetY ( b ) ;
2999: LD_ADDR_EXP 8
3003: PUSH
3004: LD_VAR 0 1
3008: PPUSH
3009: CALL_OW 251
3013: ST_TO_ADDR
// depot_rdy := true ;
3014: LD_ADDR_EXP 6
3018: PUSH
3019: LD_INT 1
3021: ST_TO_ADDR
// SayRadio ( popov , Dpop3 ) ;
3022: LD_EXP 2
3026: PPUSH
3027: LD_STRING Dpop3
3029: PPUSH
3030: CALL_OW 94
// end ; if GetBType ( b ) = b_lab and GetSide ( b ) = 3 and event_comp = false then
3034: LD_VAR 0 1
3038: PPUSH
3039: CALL_OW 266
3043: PUSH
3044: LD_INT 6
3046: EQUAL
3047: PUSH
3048: LD_VAR 0 1
3052: PPUSH
3053: CALL_OW 255
3057: PUSH
3058: LD_INT 3
3060: EQUAL
3061: AND
3062: PUSH
3063: LD_EXP 21
3067: PUSH
3068: LD_INT 0
3070: EQUAL
3071: AND
3072: IFFALSE 3167
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) > 0 then
3074: LD_INT 22
3076: PUSH
3077: LD_INT 3
3079: PUSH
3080: EMPTY
3081: LIST
3082: LIST
3083: PUSH
3084: LD_INT 25
3086: PUSH
3087: LD_INT 4
3089: PUSH
3090: EMPTY
3091: LIST
3092: LIST
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: PPUSH
3098: CALL_OW 69
3102: PUSH
3103: LD_INT 0
3105: GREATER
3106: IFFALSE 3167
// begin event_comp := true ;
3108: LD_ADDR_EXP 21
3112: PUSH
3113: LD_INT 1
3115: ST_TO_ADDR
// Say ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , Dsci1 ) ;
3116: LD_INT 22
3118: PUSH
3119: LD_INT 3
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: LD_INT 25
3128: PUSH
3129: LD_INT 4
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: LD_INT 26
3138: PUSH
3139: LD_INT 1
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: LIST
3150: PPUSH
3151: CALL_OW 69
3155: PUSH
3156: LD_INT 1
3158: ARRAY
3159: PPUSH
3160: LD_STRING Dsci1
3162: PPUSH
3163: CALL_OW 88
// end ; if GetBType ( b ) = b_bunker and GetSide ( b ) = 1 then
3167: LD_VAR 0 1
3171: PPUSH
3172: CALL_OW 266
3176: PUSH
3177: LD_INT 32
3179: EQUAL
3180: PUSH
3181: LD_VAR 0 1
3185: PPUSH
3186: CALL_OW 255
3190: PUSH
3191: LD_INT 1
3193: EQUAL
3194: AND
3195: IFFALSE 3260
// begin RaiseSailEvent ( 6 ) ;
3197: LD_INT 6
3199: PPUSH
3200: CALL_OW 427
// AddComPlaceWeapon ( b , gamma_towers [ 4 ] ) ;
3204: LD_VAR 0 1
3208: PPUSH
3209: LD_EXP 18
3213: PUSH
3214: LD_INT 4
3216: ARRAY
3217: PPUSH
3218: CALL_OW 208
// for i = 1 to 4 do
3222: LD_ADDR_VAR 0 2
3226: PUSH
3227: DOUBLE
3228: LD_INT 1
3230: DEC
3231: ST_TO_ADDR
3232: LD_INT 4
3234: PUSH
3235: FOR_TO
3236: IFFALSE 3258
// gamma_towers := Delete ( gamma_towers , 1 ) ;
3238: LD_ADDR_EXP 18
3242: PUSH
3243: LD_EXP 18
3247: PPUSH
3248: LD_INT 1
3250: PPUSH
3251: CALL_OW 3
3255: ST_TO_ADDR
3256: GO 3235
3258: POP
3259: POP
// end ; end ;
3260: PPOPN 2
3262: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3263: LD_VAR 0 1
3267: PPUSH
3268: CALL 22249 0 1
// if un in Patrol then
3272: LD_VAR 0 1
3276: PUSH
3277: LD_EXP 17
3281: IN
3282: IFFALSE 3300
// Patrol := Patrol diff un ;
3284: LD_ADDR_EXP 17
3288: PUSH
3289: LD_EXP 17
3293: PUSH
3294: LD_VAR 0 1
3298: DIFF
3299: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
3300: LD_VAR 0 1
3304: PUSH
3305: LD_INT 22
3307: PUSH
3308: LD_INT 1
3310: PUSH
3311: EMPTY
3312: LIST
3313: LIST
3314: PUSH
3315: LD_INT 30
3317: PUSH
3318: LD_INT 32
3320: PUSH
3321: EMPTY
3322: LIST
3323: LIST
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: PPUSH
3329: CALL_OW 69
3333: IN
3334: IFFALSE 3420
// begin gamma_towers := gamma_towers ^ GetX ( un ) ;
3336: LD_ADDR_EXP 18
3340: PUSH
3341: LD_EXP 18
3345: PUSH
3346: LD_VAR 0 1
3350: PPUSH
3351: CALL_OW 250
3355: ADD
3356: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetY ( un ) ;
3357: LD_ADDR_EXP 18
3361: PUSH
3362: LD_EXP 18
3366: PUSH
3367: LD_VAR 0 1
3371: PPUSH
3372: CALL_OW 251
3376: ADD
3377: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetDir ( un ) ;
3378: LD_ADDR_EXP 18
3382: PUSH
3383: LD_EXP 18
3387: PUSH
3388: LD_VAR 0 1
3392: PPUSH
3393: CALL_OW 254
3397: ADD
3398: ST_TO_ADDR
// gamma_towers := gamma_towers ^ GetBWeapon ( un ) ;
3399: LD_ADDR_EXP 18
3403: PUSH
3404: LD_EXP 18
3408: PUSH
3409: LD_VAR 0 1
3413: PPUSH
3414: CALL_OW 269
3418: ADD
3419: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) then
3420: LD_VAR 0 1
3424: PUSH
3425: LD_INT 33
3427: PUSH
3428: LD_INT 2
3430: PUSH
3431: EMPTY
3432: LIST
3433: LIST
3434: PUSH
3435: LD_INT 3
3437: PUSH
3438: LD_INT 34
3440: PUSH
3441: LD_INT 13
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: PUSH
3448: EMPTY
3449: LIST
3450: LIST
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: PPUSH
3456: CALL_OW 69
3460: IN
3461: IFFALSE 3477
// new_veh := new_veh + 1 ;
3463: LD_ADDR_EXP 19
3467: PUSH
3468: LD_EXP 19
3472: PUSH
3473: LD_INT 1
3475: PLUS
3476: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_weapon , us_crane ] ) then
3477: LD_VAR 0 1
3481: PUSH
3482: LD_INT 34
3484: PUSH
3485: LD_INT 13
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PPUSH
3492: CALL_OW 69
3496: IN
3497: IFFALSE 3518
// AddComConstruct ( am_fac , us_medium_tracked , engine_solar , control_remote , us_crane ) ;
3499: LD_INT 26
3501: PPUSH
3502: LD_INT 3
3504: PPUSH
3505: LD_INT 2
3507: PPUSH
3508: LD_INT 2
3510: PPUSH
3511: LD_INT 13
3513: PPUSH
3514: CALL_OW 185
// if un = am_dep then
3518: LD_VAR 0 1
3522: PUSH
3523: LD_INT 25
3525: EQUAL
3526: IFFALSE 3694
// begin SayRadio ( Platonov , DPlat ) ;
3528: LD_EXP 4
3532: PPUSH
3533: LD_STRING DPlat
3535: PPUSH
3536: CALL_OW 94
// if timer <= 30 30$00 then
3540: LD_EXP 24
3544: PUSH
3545: LD_INT 63000
3547: LESSEQUAL
3548: IFFALSE 3562
// AddMedal ( gamma_med3 , 1 ) else
3550: LD_STRING gamma_med3
3552: PPUSH
3553: LD_INT 1
3555: PPUSH
3556: CALL_OW 101
3560: GO 3612
// if timer <= [ 50 50$00 , 42 42$00 , 35 35$00 ] [ dif ] then
3562: LD_EXP 24
3566: PUSH
3567: LD_INT 105000
3569: PUSH
3570: LD_INT 88200
3572: PUSH
3573: LD_INT 73500
3575: PUSH
3576: EMPTY
3577: LIST
3578: LIST
3579: LIST
3580: PUSH
3581: LD_EXP 1
3585: ARRAY
3586: LESSEQUAL
3587: IFFALSE 3601
// AddMedal ( gamma_med3 , 2 ) else
3589: LD_STRING gamma_med3
3591: PPUSH
3592: LD_INT 2
3594: PPUSH
3595: CALL_OW 101
3599: GO 3612
// AddMedal ( gamma_med3 , - 1 ) ;
3601: LD_STRING gamma_med3
3603: PPUSH
3604: LD_INT 1
3606: NEG
3607: PPUSH
3608: CALL_OW 101
// if not comp_tested then
3612: LD_EXP 22
3616: NOT
3617: IFFALSE 3632
// AddMedal ( gamma_med2 , - 1 ) else
3619: LD_STRING gamma_med2
3621: PPUSH
3622: LD_INT 1
3624: NEG
3625: PPUSH
3626: CALL_OW 101
3630: GO 3642
// AddMedal ( gamma_med2 , 1 ) ;
3632: LD_STRING gamma_med2
3634: PPUSH
3635: LD_INT 1
3637: PPUSH
3638: CALL_OW 101
// if IsDead ( sikorski ) and not sikorski_run then
3642: LD_EXP 9
3646: PPUSH
3647: CALL_OW 301
3651: PUSH
3652: LD_EXP 23
3656: NOT
3657: AND
3658: IFFALSE 3672
// AddMedal ( gamma_med1 , 1 ) else
3660: LD_STRING gamma_med1
3662: PPUSH
3663: LD_INT 1
3665: PPUSH
3666: CALL_OW 101
3670: GO 3683
// AddMedal ( gamma_med1 , - 1 ) ;
3672: LD_STRING gamma_med1
3674: PPUSH
3675: LD_INT 1
3677: NEG
3678: PPUSH
3679: CALL_OW 101
// GiveMedals ( GAMMA_MEDALS ) ;
3683: LD_STRING GAMMA_MEDALS
3685: PPUSH
3686: CALL_OW 102
// YouWin ;
3690: CALL_OW 103
// end ; if un = commander then
3694: LD_VAR 0 1
3698: PUSH
3699: LD_EXP 3
3703: EQUAL
3704: IFFALSE 3713
// YouLost ( comml ) ;
3706: LD_STRING comml
3708: PPUSH
3709: CALL_OW 104
// if un = sikorski then
3713: LD_VAR 0 1
3717: PUSH
3718: LD_EXP 9
3722: EQUAL
3723: IFFALSE 3735
// AddMedal ( gamma_med1 , 1 ) ;
3725: LD_STRING gamma_med1
3727: PPUSH
3728: LD_INT 1
3730: PPUSH
3731: CALL_OW 101
// end ;
3735: PPOPN 1
3737: END
// on SailEvent ( event ) do var i , un , filter , doc , bac , place , engs , crane , b ;
3738: LD_INT 0
3740: PPUSH
3741: PPUSH
3742: PPUSH
3743: PPUSH
3744: PPUSH
3745: PPUSH
3746: PPUSH
3747: PPUSH
3748: PPUSH
// begin if event = 1 then
3749: LD_VAR 0 1
3753: PUSH
3754: LD_INT 1
3756: EQUAL
3757: IFFALSE 4054
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3759: LD_ADDR_VAR 0 4
3763: PUSH
3764: LD_INT 22
3766: PUSH
3767: LD_INT 1
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: PUSH
3774: LD_INT 21
3776: PUSH
3777: LD_INT 3
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PUSH
3784: LD_INT 3
3786: PUSH
3787: LD_INT 24
3789: PUSH
3790: LD_INT 1000
3792: PUSH
3793: EMPTY
3794: LIST
3795: LIST
3796: PUSH
3797: EMPTY
3798: LIST
3799: LIST
3800: PUSH
3801: EMPTY
3802: LIST
3803: LIST
3804: LIST
3805: PPUSH
3806: CALL_OW 69
3810: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ] ) ;
3811: LD_ADDR_VAR 0 8
3815: PUSH
3816: LD_INT 22
3818: PUSH
3819: LD_INT 1
3821: PUSH
3822: EMPTY
3823: LIST
3824: LIST
3825: PUSH
3826: LD_INT 25
3828: PUSH
3829: LD_INT 2
3831: PUSH
3832: EMPTY
3833: LIST
3834: LIST
3835: PUSH
3836: LD_INT 24
3838: PUSH
3839: LD_INT 1000
3841: PUSH
3842: EMPTY
3843: LIST
3844: LIST
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: LIST
3850: PUSH
3851: EMPTY
3852: LIST
3853: PPUSH
3854: CALL_OW 69
3858: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) ;
3859: LD_ADDR_VAR 0 9
3863: PUSH
3864: LD_INT 22
3866: PUSH
3867: LD_INT 1
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: PUSH
3874: LD_INT 34
3876: PUSH
3877: LD_INT 13
3879: PUSH
3880: EMPTY
3881: LIST
3882: LIST
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: PPUSH
3888: CALL_OW 69
3892: ST_TO_ADDR
// if engs > 0 then
3893: LD_VAR 0 8
3897: PUSH
3898: LD_INT 0
3900: GREATER
3901: IFFALSE 4006
// for i = 1 to engs do
3903: LD_ADDR_VAR 0 2
3907: PUSH
3908: DOUBLE
3909: LD_INT 1
3911: DEC
3912: ST_TO_ADDR
3913: LD_VAR 0 8
3917: PUSH
3918: FOR_TO
3919: IFFALSE 4004
// begin if IsInUnit ( engs [ i ] ) then
3921: LD_VAR 0 8
3925: PUSH
3926: LD_VAR 0 2
3930: ARRAY
3931: PPUSH
3932: CALL_OW 310
3936: IFFALSE 3953
// ComExitBuilding ( engs [ i ] ) ;
3938: LD_VAR 0 8
3942: PUSH
3943: LD_VAR 0 2
3947: ARRAY
3948: PPUSH
3949: CALL_OW 122
// Wait ( 0 0$0.2 ) ;
3953: LD_INT 7
3955: PPUSH
3956: CALL_OW 67
// if not HasTask ( engs [ i ] ) then
3960: LD_VAR 0 8
3964: PUSH
3965: LD_VAR 0 2
3969: ARRAY
3970: PPUSH
3971: CALL_OW 314
3975: NOT
3976: IFFALSE 4002
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
3978: LD_VAR 0 8
3982: PUSH
3983: LD_VAR 0 2
3987: ARRAY
3988: PPUSH
3989: LD_VAR 0 4
3993: PUSH
3994: LD_INT 1
3996: ARRAY
3997: PPUSH
3998: CALL_OW 130
// end ;
4002: GO 3918
4004: POP
4005: POP
// if crane > 0 then
4006: LD_VAR 0 9
4010: PUSH
4011: LD_INT 0
4013: GREATER
4014: IFFALSE 4054
// if not HasTask ( crane [ 1 ] ) then
4016: LD_VAR 0 9
4020: PUSH
4021: LD_INT 1
4023: ARRAY
4024: PPUSH
4025: CALL_OW 314
4029: NOT
4030: IFFALSE 4054
// ComRepairBuilding ( crane [ 1 ] , filter [ 1 ] ) ;
4032: LD_VAR 0 9
4036: PUSH
4037: LD_INT 1
4039: ARRAY
4040: PPUSH
4041: LD_VAR 0 4
4045: PUSH
4046: LD_INT 1
4048: ARRAY
4049: PPUSH
4050: CALL_OW 130
// end ; if event = 2 then
4054: LD_VAR 0 1
4058: PUSH
4059: LD_INT 2
4061: EQUAL
4062: IFFALSE 4184
// begin engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
4064: LD_ADDR_VAR 0 8
4068: PUSH
4069: LD_INT 22
4071: PUSH
4072: LD_INT 1
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: PUSH
4079: LD_INT 25
4081: PUSH
4082: LD_INT 2
4084: PUSH
4085: EMPTY
4086: LIST
4087: LIST
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: PPUSH
4093: CALL_OW 69
4097: ST_TO_ADDR
// if engs > 0 then
4098: LD_VAR 0 8
4102: PUSH
4103: LD_INT 0
4105: GREATER
4106: IFFALSE 4184
// for i = 1 to engs do
4108: LD_ADDR_VAR 0 2
4112: PUSH
4113: DOUBLE
4114: LD_INT 1
4116: DEC
4117: ST_TO_ADDR
4118: LD_VAR 0 8
4122: PUSH
4123: FOR_TO
4124: IFFALSE 4182
// if not HasTask ( engs [ i ] ) and not IsInUnit ( engs [ i ] ) then
4126: LD_VAR 0 8
4130: PUSH
4131: LD_VAR 0 2
4135: ARRAY
4136: PPUSH
4137: CALL_OW 314
4141: NOT
4142: PUSH
4143: LD_VAR 0 8
4147: PUSH
4148: LD_VAR 0 2
4152: ARRAY
4153: PPUSH
4154: CALL_OW 310
4158: NOT
4159: AND
4160: IFFALSE 4180
// ComEnterUnit ( engs [ i ] , am_dep ) ;
4162: LD_VAR 0 8
4166: PUSH
4167: LD_VAR 0 2
4171: ARRAY
4172: PPUSH
4173: LD_INT 25
4175: PPUSH
4176: CALL_OW 120
4180: GO 4123
4182: POP
4183: POP
// end ; if event = 3 then
4184: LD_VAR 0 1
4188: PUSH
4189: LD_INT 3
4191: EQUAL
4192: IFFALSE 4556
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_class , 4 ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
4194: LD_ADDR_VAR 0 4
4198: PUSH
4199: LD_INT 22
4201: PUSH
4202: LD_INT 1
4204: PUSH
4205: EMPTY
4206: LIST
4207: LIST
4208: PUSH
4209: LD_INT 21
4211: PUSH
4212: LD_INT 1
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: PUSH
4219: LD_INT 3
4221: PUSH
4222: LD_INT 25
4224: PUSH
4225: LD_INT 4
4227: PUSH
4228: EMPTY
4229: LIST
4230: LIST
4231: PUSH
4232: EMPTY
4233: LIST
4234: LIST
4235: PUSH
4236: LD_INT 3
4238: PUSH
4239: LD_INT 24
4241: PUSH
4242: LD_INT 800
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: PUSH
4249: EMPTY
4250: LIST
4251: LIST
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: LIST
4257: LIST
4258: PUSH
4259: EMPTY
4260: LIST
4261: PPUSH
4262: CALL_OW 69
4266: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
4267: LD_ADDR_VAR 0 5
4271: PUSH
4272: LD_INT 22
4274: PUSH
4275: LD_INT 1
4277: PUSH
4278: EMPTY
4279: LIST
4280: LIST
4281: PUSH
4282: LD_INT 25
4284: PUSH
4285: LD_INT 4
4287: PUSH
4288: EMPTY
4289: LIST
4290: LIST
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: PPUSH
4296: CALL_OW 69
4300: ST_TO_ADDR
// if filter > 0 then
4301: LD_VAR 0 4
4305: PUSH
4306: LD_INT 0
4308: GREATER
4309: IFFALSE 4498
// begin for i = 1 to doc do
4311: LD_ADDR_VAR 0 2
4315: PUSH
4316: DOUBLE
4317: LD_INT 1
4319: DEC
4320: ST_TO_ADDR
4321: LD_VAR 0 5
4325: PUSH
4326: FOR_TO
4327: IFFALSE 4427
// begin if IsInUnit ( doc [ i ] ) then
4329: LD_VAR 0 5
4333: PUSH
4334: LD_VAR 0 2
4338: ARRAY
4339: PPUSH
4340: CALL_OW 310
4344: IFFALSE 4361
// ComExitBuilding ( doc [ i ] ) ;
4346: LD_VAR 0 5
4350: PUSH
4351: LD_VAR 0 2
4355: ARRAY
4356: PPUSH
4357: CALL_OW 122
// if GetDistUnits ( filter [ 1 ] , am_lab ) < 10 and not HasTask ( doc [ i ] ) then
4361: LD_VAR 0 4
4365: PUSH
4366: LD_INT 1
4368: ARRAY
4369: PPUSH
4370: LD_INT 46
4372: PPUSH
4373: CALL_OW 296
4377: PUSH
4378: LD_INT 10
4380: LESS
4381: PUSH
4382: LD_VAR 0 5
4386: PUSH
4387: LD_VAR 0 2
4391: ARRAY
4392: PPUSH
4393: CALL_OW 314
4397: NOT
4398: AND
4399: IFFALSE 4425
// ComHeal ( doc [ i ] , filter [ 1 ] ) ;
4401: LD_VAR 0 5
4405: PUSH
4406: LD_VAR 0 2
4410: ARRAY
4411: PPUSH
4412: LD_VAR 0 4
4416: PUSH
4417: LD_INT 1
4419: ARRAY
4420: PPUSH
4421: CALL_OW 128
// end ;
4425: GO 4326
4427: POP
4428: POP
// for i = 1 to filter do
4429: LD_ADDR_VAR 0 2
4433: PUSH
4434: DOUBLE
4435: LD_INT 1
4437: DEC
4438: ST_TO_ADDR
4439: LD_VAR 0 4
4443: PUSH
4444: FOR_TO
4445: IFFALSE 4494
// if GetDistUnits ( filter [ i ] , am_lab ) > 10 then
4447: LD_VAR 0 4
4451: PUSH
4452: LD_VAR 0 2
4456: ARRAY
4457: PPUSH
4458: LD_INT 46
4460: PPUSH
4461: CALL_OW 296
4465: PUSH
4466: LD_INT 10
4468: GREATER
4469: IFFALSE 4492
// ComMoveXY ( filter [ i ] , 47 , 12 ) ;
4471: LD_VAR 0 4
4475: PUSH
4476: LD_VAR 0 2
4480: ARRAY
4481: PPUSH
4482: LD_INT 47
4484: PPUSH
4485: LD_INT 12
4487: PPUSH
4488: CALL_OW 111
4492: GO 4444
4494: POP
4495: POP
// end else
4496: GO 4556
// for i = 1 to doc do
4498: LD_ADDR_VAR 0 2
4502: PUSH
4503: DOUBLE
4504: LD_INT 1
4506: DEC
4507: ST_TO_ADDR
4508: LD_VAR 0 5
4512: PUSH
4513: FOR_TO
4514: IFFALSE 4554
// if not IsInUnit ( doc [ i ] ) then
4516: LD_VAR 0 5
4520: PUSH
4521: LD_VAR 0 2
4525: ARRAY
4526: PPUSH
4527: CALL_OW 310
4531: NOT
4532: IFFALSE 4552
// ComEnterUnit ( doc [ i ] , am_lab ) ;
4534: LD_VAR 0 5
4538: PUSH
4539: LD_VAR 0 2
4543: ARRAY
4544: PPUSH
4545: LD_INT 46
4547: PPUSH
4548: CALL_OW 120
4552: GO 4513
4554: POP
4555: POP
// end ; if event = 4 then
4556: LD_VAR 0 1
4560: PUSH
4561: LD_INT 4
4563: EQUAL
4564: IFFALSE 4815
// begin bac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
4566: LD_ADDR_VAR 0 6
4570: PUSH
4571: LD_INT 22
4573: PUSH
4574: LD_INT 1
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: LD_INT 30
4583: PUSH
4584: LD_INT 5
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PPUSH
4595: CALL_OW 69
4599: ST_TO_ADDR
// for i = 1 to bac do
4600: LD_ADDR_VAR 0 2
4604: PUSH
4605: DOUBLE
4606: LD_INT 1
4608: DEC
4609: ST_TO_ADDR
4610: LD_VAR 0 6
4614: PUSH
4615: FOR_TO
4616: IFFALSE 4657
// if UnitsInside ( bac [ i ] ) < 6 then
4618: LD_VAR 0 6
4622: PUSH
4623: LD_VAR 0 2
4627: ARRAY
4628: PPUSH
4629: CALL_OW 313
4633: PUSH
4634: LD_INT 6
4636: LESS
4637: IFFALSE 4655
// place := bac [ i ] ;
4639: LD_ADDR_VAR 0 7
4643: PUSH
4644: LD_VAR 0 6
4648: PUSH
4649: LD_VAR 0 2
4653: ARRAY
4654: ST_TO_ADDR
4655: GO 4615
4657: POP
4658: POP
// if place then
4659: LD_VAR 0 7
4663: IFFALSE 4815
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] ] , [ f_lives , 1000 ] ] ] ) diff Patrol ;
4665: LD_ADDR_VAR 0 4
4669: PUSH
4670: LD_INT 22
4672: PUSH
4673: LD_INT 1
4675: PUSH
4676: EMPTY
4677: LIST
4678: LIST
4679: PUSH
4680: LD_INT 2
4682: PUSH
4683: LD_INT 25
4685: PUSH
4686: LD_INT 1
4688: PUSH
4689: EMPTY
4690: LIST
4691: LIST
4692: PUSH
4693: LD_INT 25
4695: PUSH
4696: LD_INT 5
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: LIST
4707: PUSH
4708: LD_INT 24
4710: PUSH
4711: LD_INT 1000
4713: PUSH
4714: EMPTY
4715: LIST
4716: LIST
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: LIST
4722: PUSH
4723: EMPTY
4724: LIST
4725: PPUSH
4726: CALL_OW 69
4730: PUSH
4731: LD_EXP 17
4735: DIFF
4736: ST_TO_ADDR
// for i = 1 to filter do
4737: LD_ADDR_VAR 0 2
4741: PUSH
4742: DOUBLE
4743: LD_INT 1
4745: DEC
4746: ST_TO_ADDR
4747: LD_VAR 0 4
4751: PUSH
4752: FOR_TO
4753: IFFALSE 4813
// if not IsInUnit ( filter [ i ] ) and not HasTask ( filter [ i ] ) then
4755: LD_VAR 0 4
4759: PUSH
4760: LD_VAR 0 2
4764: ARRAY
4765: PPUSH
4766: CALL_OW 310
4770: NOT
4771: PUSH
4772: LD_VAR 0 4
4776: PUSH
4777: LD_VAR 0 2
4781: ARRAY
4782: PPUSH
4783: CALL_OW 314
4787: NOT
4788: AND
4789: IFFALSE 4811
// ComEnterUnit ( filter [ i ] , place ) ;
4791: LD_VAR 0 4
4795: PUSH
4796: LD_VAR 0 2
4800: ARRAY
4801: PPUSH
4802: LD_VAR 0 7
4806: PPUSH
4807: CALL_OW 120
4811: GO 4752
4813: POP
4814: POP
// end ; end ; if event = 5 then
4815: LD_VAR 0 1
4819: PUSH
4820: LD_INT 5
4822: EQUAL
4823: IFFALSE 4977
// begin if FilterUnitsInArea ( am_sec , [ f_enemy , 1 ] ) = 0 then
4825: LD_INT 12
4827: PPUSH
4828: LD_INT 81
4830: PUSH
4831: LD_INT 1
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PPUSH
4838: CALL_OW 70
4842: PUSH
4843: LD_INT 0
4845: EQUAL
4846: IFFALSE 4977
// begin engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
4848: LD_ADDR_VAR 0 8
4852: PUSH
4853: LD_INT 22
4855: PUSH
4856: LD_INT 1
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: LD_INT 25
4865: PUSH
4866: LD_INT 2
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: PPUSH
4877: CALL_OW 69
4881: ST_TO_ADDR
// if engs > 0 then
4882: LD_VAR 0 8
4886: PUSH
4887: LD_INT 0
4889: GREATER
4890: IFFALSE 4977
// for i = 1 to engs do
4892: LD_ADDR_VAR 0 2
4896: PUSH
4897: DOUBLE
4898: LD_INT 1
4900: DEC
4901: ST_TO_ADDR
4902: LD_VAR 0 8
4906: PUSH
4907: FOR_TO
4908: IFFALSE 4975
// if not HasTask ( engs [ i ] ) then
4910: LD_VAR 0 8
4914: PUSH
4915: LD_VAR 0 2
4919: ARRAY
4920: PPUSH
4921: CALL_OW 314
4925: NOT
4926: IFFALSE 4973
// ComBuild ( engs [ i ] , b_bunker , gamma_towers [ 1 ] , gamma_towers [ 2 ] , gamma_towers [ 3 ] ) ;
4928: LD_VAR 0 8
4932: PUSH
4933: LD_VAR 0 2
4937: ARRAY
4938: PPUSH
4939: LD_INT 32
4941: PPUSH
4942: LD_EXP 18
4946: PUSH
4947: LD_INT 1
4949: ARRAY
4950: PPUSH
4951: LD_EXP 18
4955: PUSH
4956: LD_INT 2
4958: ARRAY
4959: PPUSH
4960: LD_EXP 18
4964: PUSH
4965: LD_INT 3
4967: ARRAY
4968: PPUSH
4969: CALL_OW 145
4973: GO 4907
4975: POP
4976: POP
// end ; end ; if event = 6 then
4977: LD_VAR 0 1
4981: PUSH
4982: LD_INT 6
4984: EQUAL
4985: IFFALSE 5169
// begin bac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
4987: LD_ADDR_VAR 0 6
4991: PUSH
4992: LD_INT 22
4994: PUSH
4995: LD_INT 1
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: LD_INT 30
5004: PUSH
5005: LD_INT 5
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: PPUSH
5016: CALL_OW 69
5020: ST_TO_ADDR
// if bac and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ] ) > 0 then
5021: LD_VAR 0 6
5025: PUSH
5026: LD_INT 22
5028: PUSH
5029: LD_INT 1
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: LD_INT 30
5038: PUSH
5039: LD_INT 32
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: PUSH
5046: LD_INT 58
5048: PUSH
5049: EMPTY
5050: LIST
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: LIST
5056: PUSH
5057: EMPTY
5058: LIST
5059: PPUSH
5060: CALL_OW 69
5064: PUSH
5065: LD_INT 0
5067: GREATER
5068: AND
5069: IFFALSE 5169
// begin b := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ] ) [ 1 ] ;
5071: LD_ADDR_VAR 0 10
5075: PUSH
5076: LD_INT 22
5078: PUSH
5079: LD_INT 1
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: PUSH
5086: LD_INT 30
5088: PUSH
5089: LD_INT 32
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PUSH
5096: LD_INT 58
5098: PUSH
5099: EMPTY
5100: LIST
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: LIST
5106: PUSH
5107: EMPTY
5108: LIST
5109: PPUSH
5110: CALL_OW 69
5114: PUSH
5115: LD_INT 1
5117: ARRAY
5118: ST_TO_ADDR
// un := UnitsInside ( bac [ 1 ] ) ;
5119: LD_ADDR_VAR 0 3
5123: PUSH
5124: LD_VAR 0 6
5128: PUSH
5129: LD_INT 1
5131: ARRAY
5132: PPUSH
5133: CALL_OW 313
5137: ST_TO_ADDR
// ComExitBuilding ( un [ 1 ] ) ;
5138: LD_VAR 0 3
5142: PUSH
5143: LD_INT 1
5145: ARRAY
5146: PPUSH
5147: CALL_OW 122
// AddComEnterUnit ( un [ 1 ] , b ) ;
5151: LD_VAR 0 3
5155: PUSH
5156: LD_INT 1
5158: ARRAY
5159: PPUSH
5160: LD_VAR 0 10
5164: PPUSH
5165: CALL_OW 180
// end ; end ; end ;
5169: PPOPN 10
5171: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 3 then
5172: LD_VAR 0 1
5176: PUSH
5177: LD_INT 1
5179: EQUAL
5180: PUSH
5181: LD_VAR 0 2
5185: PUSH
5186: LD_INT 3
5188: EQUAL
5189: AND
5190: IFFALSE 5200
// contact_am := true ;
5192: LD_ADDR_EXP 16
5196: PUSH
5197: LD_INT 1
5199: ST_TO_ADDR
// end ;
5200: PPOPN 2
5202: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5203: LD_VAR 0 1
5207: PPUSH
5208: LD_VAR 0 2
5212: PPUSH
5213: LD_VAR 0 3
5217: PPUSH
5218: CALL 22347 0 3
// end ;
5222: PPOPN 3
5224: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5225: LD_VAR 0 1
5229: PPUSH
5230: CALL 22355 0 1
// end ; end_of_file
5234: PPOPN 1
5236: END
// export Sikorski , Game_Started , SForce , Sikorski_Ar , Donald , Van , attacked , contact_am ; export patrol ; export gamma_towers ; export function PrepareAmerican ; var i , un , b , skill , weapons , sol , lw ; begin
5237: LD_INT 0
5239: PPUSH
5240: PPUSH
5241: PPUSH
5242: PPUSH
5243: PPUSH
5244: PPUSH
5245: PPUSH
5246: PPUSH
// skill := [ 5 , 6 , 7 ] [ dif ] ;
5247: LD_ADDR_VAR 0 5
5251: PUSH
5252: LD_INT 5
5254: PUSH
5255: LD_INT 6
5257: PUSH
5258: LD_INT 7
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: LIST
5265: PUSH
5266: LD_EXP 1
5270: ARRAY
5271: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_gatling_gun , us_gatling_gun , us_double_gun , us_double_gun , us_double_gun , us_heavy_gun ] ;
5272: LD_ADDR_VAR 0 6
5276: PUSH
5277: LD_INT 4
5279: PUSH
5280: LD_INT 4
5282: PUSH
5283: LD_INT 4
5285: PUSH
5286: LD_INT 5
5288: PUSH
5289: LD_INT 5
5291: PUSH
5292: LD_INT 5
5294: PUSH
5295: LD_INT 6
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: ST_TO_ADDR
// SForce := [ ] ;
5307: LD_ADDR_EXP 11
5311: PUSH
5312: EMPTY
5313: ST_TO_ADDR
// Sikorski_Ar := false ;
5314: LD_ADDR_EXP 12
5318: PUSH
5319: LD_INT 0
5321: ST_TO_ADDR
// attacked := false ;
5322: LD_ADDR_EXP 15
5326: PUSH
5327: LD_INT 0
5329: ST_TO_ADDR
// contact_am := false ;
5330: LD_ADDR_EXP 16
5334: PUSH
5335: LD_INT 0
5337: ST_TO_ADDR
// patrol := [ ] ;
5338: LD_ADDR_EXP 17
5342: PUSH
5343: EMPTY
5344: ST_TO_ADDR
// gamma_towers := [ ] ;
5345: LD_ADDR_EXP 18
5349: PUSH
5350: EMPTY
5351: ST_TO_ADDR
// SetBName ( am_dep , gamma ) ;
5352: LD_INT 25
5354: PPUSH
5355: LD_STRING gamma
5357: PPUSH
5358: CALL_OW 500
// uc_side := 1 ;
5362: LD_ADDR_OWVAR 20
5366: PUSH
5367: LD_INT 1
5369: ST_TO_ADDR
// uc_nation := 1 ;
5370: LD_ADDR_OWVAR 21
5374: PUSH
5375: LD_INT 1
5377: ST_TO_ADDR
// hc_importance := 0 ;
5378: LD_ADDR_OWVAR 32
5382: PUSH
5383: LD_INT 0
5385: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
5386: LD_ADDR_OWVAR 26
5390: PUSH
5391: LD_STRING Jeremy Sikorski
5393: ST_TO_ADDR
// hc_gallery := us ;
5394: LD_ADDR_OWVAR 33
5398: PUSH
5399: LD_STRING us
5401: ST_TO_ADDR
// hc_face_number := 19 ;
5402: LD_ADDR_OWVAR 34
5406: PUSH
5407: LD_INT 19
5409: ST_TO_ADDR
// hc_skills := [ Rand ( skill , skill + 2 ) , 4 , 6 , 3 ] ;
5410: LD_ADDR_OWVAR 31
5414: PUSH
5415: LD_VAR 0 5
5419: PPUSH
5420: LD_VAR 0 5
5424: PUSH
5425: LD_INT 2
5427: PLUS
5428: PPUSH
5429: CALL_OW 12
5433: PUSH
5434: LD_INT 4
5436: PUSH
5437: LD_INT 6
5439: PUSH
5440: LD_INT 3
5442: PUSH
5443: EMPTY
5444: LIST
5445: LIST
5446: LIST
5447: LIST
5448: ST_TO_ADDR
// hc_sex := sex_male ;
5449: LD_ADDR_OWVAR 27
5453: PUSH
5454: LD_INT 1
5456: ST_TO_ADDR
// hc_class := 1 ;
5457: LD_ADDR_OWVAR 28
5461: PUSH
5462: LD_INT 1
5464: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
5465: LD_ADDR_OWVAR 29
5469: PUSH
5470: LD_INT 10
5472: PUSH
5473: LD_INT 11
5475: PUSH
5476: EMPTY
5477: LIST
5478: LIST
5479: ST_TO_ADDR
// sikorski := CreateHuman ;
5480: LD_ADDR_EXP 9
5484: PUSH
5485: CALL_OW 44
5489: ST_TO_ADDR
// hc_name := Lucy Donaldson ;
5490: LD_ADDR_OWVAR 26
5494: PUSH
5495: LD_STRING Lucy Donaldson
5497: ST_TO_ADDR
// hc_gallery := us ;
5498: LD_ADDR_OWVAR 33
5502: PUSH
5503: LD_STRING us
5505: ST_TO_ADDR
// hc_face_number := 2 ;
5506: LD_ADDR_OWVAR 34
5510: PUSH
5511: LD_INT 2
5513: ST_TO_ADDR
// hc_skills := [ Rand ( skill , skill + 2 ) , 6 , 4 , 2 ] ;
5514: LD_ADDR_OWVAR 31
5518: PUSH
5519: LD_VAR 0 5
5523: PPUSH
5524: LD_VAR 0 5
5528: PUSH
5529: LD_INT 2
5531: PLUS
5532: PPUSH
5533: CALL_OW 12
5537: PUSH
5538: LD_INT 6
5540: PUSH
5541: LD_INT 4
5543: PUSH
5544: LD_INT 2
5546: PUSH
5547: EMPTY
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: ST_TO_ADDR
// hc_sex := sex_female ;
5553: LD_ADDR_OWVAR 27
5557: PUSH
5558: LD_INT 2
5560: ST_TO_ADDR
// hc_class := 1 ;
5561: LD_ADDR_OWVAR 28
5565: PUSH
5566: LD_INT 1
5568: ST_TO_ADDR
// donald := CreateHuman ;
5569: LD_ADDR_EXP 13
5573: PUSH
5574: CALL_OW 44
5578: ST_TO_ADDR
// hc_name := Peter Van Houten ;
5579: LD_ADDR_OWVAR 26
5583: PUSH
5584: LD_STRING Peter Van Houten
5586: ST_TO_ADDR
// hc_gallery := us ;
5587: LD_ADDR_OWVAR 33
5591: PUSH
5592: LD_STRING us
5594: ST_TO_ADDR
// hc_face_number := 16 ;
5595: LD_ADDR_OWVAR 34
5599: PUSH
5600: LD_INT 16
5602: ST_TO_ADDR
// hc_sex := sex_male ;
5603: LD_ADDR_OWVAR 27
5607: PUSH
5608: LD_INT 1
5610: ST_TO_ADDR
// van := CreateHuman ;
5611: LD_ADDR_EXP 14
5615: PUSH
5616: CALL_OW 44
5620: ST_TO_ADDR
// hc_importance := 0 ;
5621: LD_ADDR_OWVAR 32
5625: PUSH
5626: LD_INT 0
5628: ST_TO_ADDR
// case dif of 1 :
5629: LD_EXP 1
5633: PUSH
5634: LD_INT 1
5636: DOUBLE
5637: EQUAL
5638: IFTRUE 5642
5640: GO 5653
5642: POP
// lw = 1 ; 2 :
5643: LD_ADDR_VAR 0 8
5647: PUSH
5648: LD_INT 1
5650: ST_TO_ADDR
5651: GO 5700
5653: LD_INT 2
5655: DOUBLE
5656: EQUAL
5657: IFTRUE 5661
5659: GO 5680
5661: POP
// lw = Rand ( 1 , 2 ) ; 3 :
5662: LD_ADDR_VAR 0 8
5666: PUSH
5667: LD_INT 1
5669: PPUSH
5670: LD_INT 2
5672: PPUSH
5673: CALL_OW 12
5677: ST_TO_ADDR
5678: GO 5700
5680: LD_INT 3
5682: DOUBLE
5683: EQUAL
5684: IFTRUE 5688
5686: GO 5699
5688: POP
// lw = 2 ; end ;
5689: LD_ADDR_VAR 0 8
5693: PUSH
5694: LD_INT 2
5696: ST_TO_ADDR
5697: GO 5700
5699: POP
// case lw of 1 :
5700: LD_VAR 0 8
5704: PUSH
5705: LD_INT 1
5707: DOUBLE
5708: EQUAL
5709: IFTRUE 5713
5711: GO 5728
5713: POP
// PlaceHumanInUnit ( donald , am_dep ) ; 2 :
5714: LD_EXP 13
5718: PPUSH
5719: LD_INT 25
5721: PPUSH
5722: CALL_OW 52
5726: GO 5752
5728: LD_INT 2
5730: DOUBLE
5731: EQUAL
5732: IFTRUE 5736
5734: GO 5751
5736: POP
// PlaceHumanInUnit ( van , am_dep ) ; end ;
5737: LD_EXP 14
5741: PPUSH
5742: LD_INT 25
5744: PPUSH
5745: CALL_OW 52
5749: GO 5752
5751: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
5752: LD_ADDR_VAR 0 2
5756: PUSH
5757: LD_INT 22
5759: PUSH
5760: LD_INT 1
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PUSH
5767: LD_INT 30
5769: PUSH
5770: LD_INT 32
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: PPUSH
5781: CALL_OW 69
5785: PUSH
5786: FOR_IN
5787: IFFALSE 5841
// begin PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
5789: LD_INT 1
5791: PPUSH
5792: LD_VAR 0 5
5796: PPUSH
5797: CALL 734 0 2
5801: PPUSH
5802: LD_VAR 0 2
5806: PPUSH
5807: CALL_OW 52
// PlaceWeaponTurret ( i , weapons [ Rand ( 1 , weapons ) ] ) ;
5811: LD_VAR 0 2
5815: PPUSH
5816: LD_VAR 0 6
5820: PUSH
5821: LD_INT 1
5823: PPUSH
5824: LD_VAR 0 6
5828: PPUSH
5829: CALL_OW 12
5833: ARRAY
5834: PPUSH
5835: CALL_OW 431
// end ;
5839: GO 5786
5841: POP
5842: POP
// sol := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , class_soldier ] , [ class_sniper ] ] ] ) ;
5843: LD_ADDR_VAR 0 7
5847: PUSH
5848: LD_INT 22
5850: PUSH
5851: LD_INT 1
5853: PUSH
5854: EMPTY
5855: LIST
5856: LIST
5857: PUSH
5858: LD_INT 2
5860: PUSH
5861: LD_INT 25
5863: PUSH
5864: LD_INT 1
5866: PUSH
5867: EMPTY
5868: LIST
5869: LIST
5870: PUSH
5871: LD_INT 5
5873: PUSH
5874: EMPTY
5875: LIST
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: LIST
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: PPUSH
5886: CALL_OW 69
5890: ST_TO_ADDR
// for i = 1 to sol do
5891: LD_ADDR_VAR 0 2
5895: PUSH
5896: DOUBLE
5897: LD_INT 1
5899: DEC
5900: ST_TO_ADDR
5901: LD_VAR 0 7
5905: PUSH
5906: FOR_TO
5907: IFFALSE 5929
// SetTag ( sol [ i ] , 1 ) ;
5909: LD_VAR 0 7
5913: PUSH
5914: LD_VAR 0 2
5918: ARRAY
5919: PPUSH
5920: LD_INT 1
5922: PPUSH
5923: CALL_OW 109
5927: GO 5906
5929: POP
5930: POP
// for i = 1 to 3 do
5931: LD_ADDR_VAR 0 2
5935: PUSH
5936: DOUBLE
5937: LD_INT 1
5939: DEC
5940: ST_TO_ADDR
5941: LD_INT 3
5943: PUSH
5944: FOR_TO
5945: IFFALSE 5969
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , am_ct ) ;
5947: LD_INT 3
5949: PPUSH
5950: LD_VAR 0 5
5954: PPUSH
5955: CALL 734 0 2
5959: PPUSH
5960: LD_INT 56
5962: PPUSH
5963: CALL_OW 52
5967: GO 5944
5969: POP
5970: POP
// for i = 1 to 6 do
5971: LD_ADDR_VAR 0 2
5975: PUSH
5976: DOUBLE
5977: LD_INT 1
5979: DEC
5980: ST_TO_ADDR
5981: LD_INT 6
5983: PUSH
5984: FOR_TO
5985: IFFALSE 6009
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , am_fac ) ;
5987: LD_INT 3
5989: PPUSH
5990: LD_VAR 0 5
5994: PPUSH
5995: CALL 734 0 2
5999: PPUSH
6000: LD_INT 26
6002: PPUSH
6003: CALL_OW 52
6007: GO 5984
6009: POP
6010: POP
// for i = 1 to 5 do
6011: LD_ADDR_VAR 0 2
6015: PUSH
6016: DOUBLE
6017: LD_INT 1
6019: DEC
6020: ST_TO_ADDR
6021: LD_INT 5
6023: PUSH
6024: FOR_TO
6025: IFFALSE 6052
// PlaceUnitArea ( CreateHumanWithClass ( 2 , skill ) , am_base , false ) ;
6027: LD_INT 2
6029: PPUSH
6030: LD_VAR 0 5
6034: PPUSH
6035: CALL 734 0 2
6039: PPUSH
6040: LD_INT 7
6042: PPUSH
6043: LD_INT 0
6045: PPUSH
6046: CALL_OW 49
6050: GO 6024
6052: POP
6053: POP
// for i = 1 to 3 do
6054: LD_ADDR_VAR 0 2
6058: PUSH
6059: DOUBLE
6060: LD_INT 1
6062: DEC
6063: ST_TO_ADDR
6064: LD_INT 3
6066: PUSH
6067: FOR_TO
6068: IFFALSE 6092
// PlaceHumanInUnit ( CreateHumanWithClass ( 4 , skill ) , am_lab ) ;
6070: LD_INT 4
6072: PPUSH
6073: LD_VAR 0 5
6077: PPUSH
6078: CALL 734 0 2
6082: PPUSH
6083: LD_INT 46
6085: PPUSH
6086: CALL_OW 52
6090: GO 6067
6092: POP
6093: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) do
6094: LD_ADDR_VAR 0 2
6098: PUSH
6099: LD_INT 22
6101: PUSH
6102: LD_INT 1
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: PUSH
6109: LD_INT 30
6111: PUSH
6112: LD_INT 5
6114: PUSH
6115: EMPTY
6116: LIST
6117: LIST
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PPUSH
6123: CALL_OW 69
6127: PUSH
6128: FOR_IN
6129: IFFALSE 6243
// begin PlaceHumanInUnit ( CreateHumanWithClass ( class_sniper , skill ) , i ) ;
6131: LD_INT 5
6133: PPUSH
6134: LD_VAR 0 5
6138: PPUSH
6139: CALL 734 0 2
6143: PPUSH
6144: LD_VAR 0 2
6148: PPUSH
6149: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( class_sniper , skill ) , i ) ;
6153: LD_INT 5
6155: PPUSH
6156: LD_VAR 0 5
6160: PPUSH
6161: CALL 734 0 2
6165: PPUSH
6166: LD_VAR 0 2
6170: PPUSH
6171: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6175: LD_INT 1
6177: PPUSH
6178: LD_VAR 0 5
6182: PPUSH
6183: CALL 734 0 2
6187: PPUSH
6188: LD_VAR 0 2
6192: PPUSH
6193: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6197: LD_INT 1
6199: PPUSH
6200: LD_VAR 0 5
6204: PPUSH
6205: CALL 734 0 2
6209: PPUSH
6210: LD_VAR 0 2
6214: PPUSH
6215: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , i ) ;
6219: LD_INT 1
6221: PPUSH
6222: LD_VAR 0 5
6226: PPUSH
6227: CALL 734 0 2
6231: PPUSH
6232: LD_VAR 0 2
6236: PPUSH
6237: CALL_OW 52
// end ;
6241: GO 6128
6243: POP
6244: POP
// if dif > 1 then
6245: LD_EXP 1
6249: PUSH
6250: LD_INT 1
6252: GREATER
6253: IFFALSE 6326
// for i = 1 to ( dif - 1 ) do
6255: LD_ADDR_VAR 0 2
6259: PUSH
6260: DOUBLE
6261: LD_INT 1
6263: DEC
6264: ST_TO_ADDR
6265: LD_EXP 1
6269: PUSH
6270: LD_INT 1
6272: MINUS
6273: PUSH
6274: FOR_TO
6275: IFFALSE 6324
// begin patrol := patrol ^ CreateHumanWithClass ( 1 , skill ) ;
6277: LD_ADDR_EXP 17
6281: PUSH
6282: LD_EXP 17
6286: PUSH
6287: LD_INT 1
6289: PPUSH
6290: LD_VAR 0 5
6294: PPUSH
6295: CALL 734 0 2
6299: ADD
6300: ST_TO_ADDR
// PlaceUnitArea ( patrol [ i ] , am_west_spawn , false ) ;
6301: LD_EXP 17
6305: PUSH
6306: LD_VAR 0 2
6310: ARRAY
6311: PPUSH
6312: LD_INT 3
6314: PPUSH
6315: LD_INT 0
6317: PPUSH
6318: CALL_OW 49
// end ;
6322: GO 6274
6324: POP
6325: POP
// game_started := true ;
6326: LD_ADDR_EXP 10
6330: PUSH
6331: LD_INT 1
6333: ST_TO_ADDR
// ComConstruct ( am_fac , us_medium_tracked , engine_solar , control_remote , us_crane ) ;
6334: LD_INT 26
6336: PPUSH
6337: LD_INT 3
6339: PPUSH
6340: LD_INT 2
6342: PPUSH
6343: LD_INT 2
6345: PPUSH
6346: LD_INT 13
6348: PPUSH
6349: CALL_OW 125
// while ( contact_am = false ) do
6353: LD_EXP 16
6357: PUSH
6358: LD_INT 0
6360: EQUAL
6361: IFFALSE 6372
// begin Wait ( 0 0$01 ) ;
6363: LD_INT 35
6365: PPUSH
6366: CALL_OW 67
// end ;
6370: GO 6353
// Wait ( [ 4 4$00 , 3 3$00 , 2 2$30 ] [ dif ] ) ;
6372: LD_INT 8400
6374: PUSH
6375: LD_INT 6300
6377: PUSH
6378: LD_INT 5250
6380: PUSH
6381: EMPTY
6382: LIST
6383: LIST
6384: LIST
6385: PUSH
6386: LD_EXP 1
6390: ARRAY
6391: PPUSH
6392: CALL_OW 67
// case dif of 1 :
6396: LD_EXP 1
6400: PUSH
6401: LD_INT 1
6403: DOUBLE
6404: EQUAL
6405: IFTRUE 6409
6407: GO 6584
6409: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_machine_gun , us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 4 ) ] ) ;
6410: LD_INT 26
6412: PPUSH
6413: LD_INT 3
6415: PPUSH
6416: LD_INT 1
6418: PPUSH
6419: LD_INT 2
6421: PPUSH
6422: LD_INT 2
6424: PUSH
6425: LD_INT 4
6427: PUSH
6428: LD_INT 5
6430: PUSH
6431: LD_INT 5
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: PUSH
6440: LD_INT 1
6442: PPUSH
6443: LD_INT 4
6445: PPUSH
6446: CALL_OW 12
6450: ARRAY
6451: PPUSH
6452: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6456: LD_INT 26
6458: PPUSH
6459: LD_INT 3
6461: PPUSH
6462: LD_INT 1
6464: PPUSH
6465: LD_INT 2
6467: PPUSH
6468: LD_INT 4
6470: PUSH
6471: LD_INT 5
6473: PUSH
6474: LD_INT 5
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: LIST
6481: PUSH
6482: LD_INT 1
6484: PPUSH
6485: LD_INT 3
6487: PPUSH
6488: CALL_OW 12
6492: ARRAY
6493: PPUSH
6494: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6498: LD_INT 26
6500: PPUSH
6501: LD_INT 3
6503: PPUSH
6504: LD_INT 1
6506: PPUSH
6507: LD_INT 2
6509: PPUSH
6510: LD_INT 4
6512: PUSH
6513: LD_INT 5
6515: PUSH
6516: LD_INT 5
6518: PUSH
6519: EMPTY
6520: LIST
6521: LIST
6522: LIST
6523: PUSH
6524: LD_INT 1
6526: PPUSH
6527: LD_INT 3
6529: PPUSH
6530: CALL_OW 12
6534: ARRAY
6535: PPUSH
6536: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6540: LD_INT 26
6542: PPUSH
6543: LD_INT 3
6545: PPUSH
6546: LD_INT 1
6548: PPUSH
6549: LD_INT 2
6551: PPUSH
6552: LD_INT 4
6554: PUSH
6555: LD_INT 3
6557: PUSH
6558: LD_INT 5
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: LIST
6565: PUSH
6566: LD_INT 1
6568: PPUSH
6569: LD_INT 3
6571: PPUSH
6572: CALL_OW 12
6576: ARRAY
6577: PPUSH
6578: CALL_OW 185
// end ; 2 :
6582: GO 7111
6584: LD_INT 2
6586: DOUBLE
6587: EQUAL
6588: IFTRUE 6592
6590: GO 6805
6592: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6593: LD_INT 26
6595: PPUSH
6596: LD_INT 3
6598: PPUSH
6599: LD_INT 1
6601: PPUSH
6602: LD_INT 2
6604: PPUSH
6605: LD_INT 4
6607: PUSH
6608: LD_INT 5
6610: PUSH
6611: LD_INT 5
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: LIST
6618: PUSH
6619: LD_INT 1
6621: PPUSH
6622: LD_INT 3
6624: PPUSH
6625: CALL_OW 12
6629: ARRAY
6630: PPUSH
6631: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6635: LD_INT 26
6637: PPUSH
6638: LD_INT 3
6640: PPUSH
6641: LD_INT 1
6643: PPUSH
6644: LD_INT 2
6646: PPUSH
6647: LD_INT 4
6649: PUSH
6650: LD_INT 5
6652: PUSH
6653: LD_INT 5
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: LIST
6660: PUSH
6661: LD_INT 1
6663: PPUSH
6664: LD_INT 3
6666: PPUSH
6667: CALL_OW 12
6671: ARRAY
6672: PPUSH
6673: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6677: LD_INT 26
6679: PPUSH
6680: LD_INT 3
6682: PPUSH
6683: LD_INT 1
6685: PPUSH
6686: LD_INT 2
6688: PPUSH
6689: LD_INT 4
6691: PUSH
6692: LD_INT 3
6694: PUSH
6695: LD_INT 5
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: LIST
6702: PUSH
6703: LD_INT 1
6705: PPUSH
6706: LD_INT 3
6708: PPUSH
6709: CALL_OW 12
6713: ARRAY
6714: PPUSH
6715: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6719: LD_INT 26
6721: PPUSH
6722: LD_INT 4
6724: PPUSH
6725: LD_INT 1
6727: PPUSH
6728: LD_INT 2
6730: PPUSH
6731: LD_INT 4
6733: PUSH
6734: LD_INT 5
6736: PUSH
6737: LD_INT 6
6739: PUSH
6740: EMPTY
6741: LIST
6742: LIST
6743: LIST
6744: PUSH
6745: LD_INT 1
6747: PPUSH
6748: LD_INT 3
6750: PPUSH
6751: CALL_OW 12
6755: ARRAY
6756: PPUSH
6757: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6761: LD_INT 26
6763: PPUSH
6764: LD_INT 4
6766: PPUSH
6767: LD_INT 1
6769: PPUSH
6770: LD_INT 2
6772: PPUSH
6773: LD_INT 4
6775: PUSH
6776: LD_INT 5
6778: PUSH
6779: LD_INT 6
6781: PUSH
6782: EMPTY
6783: LIST
6784: LIST
6785: LIST
6786: PUSH
6787: LD_INT 1
6789: PPUSH
6790: LD_INT 3
6792: PPUSH
6793: CALL_OW 12
6797: ARRAY
6798: PPUSH
6799: CALL_OW 185
// end ; 3 :
6803: GO 7111
6805: LD_INT 3
6807: DOUBLE
6808: EQUAL
6809: IFTRUE 6813
6811: GO 7110
6813: POP
// begin AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6814: LD_INT 26
6816: PPUSH
6817: LD_INT 3
6819: PPUSH
6820: LD_INT 1
6822: PPUSH
6823: LD_INT 2
6825: PPUSH
6826: LD_INT 4
6828: PUSH
6829: LD_INT 5
6831: PUSH
6832: LD_INT 5
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: LIST
6839: PUSH
6840: LD_INT 1
6842: PPUSH
6843: LD_INT 3
6845: PPUSH
6846: CALL_OW 12
6850: ARRAY
6851: PPUSH
6852: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6856: LD_INT 26
6858: PPUSH
6859: LD_INT 3
6861: PPUSH
6862: LD_INT 1
6864: PPUSH
6865: LD_INT 2
6867: PPUSH
6868: LD_INT 4
6870: PUSH
6871: LD_INT 5
6873: PUSH
6874: LD_INT 5
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: LIST
6881: PUSH
6882: LD_INT 1
6884: PPUSH
6885: LD_INT 3
6887: PPUSH
6888: CALL_OW 12
6892: ARRAY
6893: PPUSH
6894: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6898: LD_INT 26
6900: PPUSH
6901: LD_INT 3
6903: PPUSH
6904: LD_INT 1
6906: PPUSH
6907: LD_INT 2
6909: PPUSH
6910: LD_INT 4
6912: PUSH
6913: LD_INT 5
6915: PUSH
6916: LD_INT 5
6918: PUSH
6919: EMPTY
6920: LIST
6921: LIST
6922: LIST
6923: PUSH
6924: LD_INT 1
6926: PPUSH
6927: LD_INT 3
6929: PPUSH
6930: CALL_OW 12
6934: ARRAY
6935: PPUSH
6936: CALL_OW 185
// AddComConstruct ( am_fac , us_medium_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
6940: LD_INT 26
6942: PPUSH
6943: LD_INT 3
6945: PPUSH
6946: LD_INT 1
6948: PPUSH
6949: LD_INT 2
6951: PPUSH
6952: LD_INT 4
6954: PUSH
6955: LD_INT 5
6957: PUSH
6958: LD_INT 5
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: LIST
6965: PUSH
6966: LD_INT 1
6968: PPUSH
6969: LD_INT 3
6971: PPUSH
6972: CALL_OW 12
6976: ARRAY
6977: PPUSH
6978: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
6982: LD_INT 26
6984: PPUSH
6985: LD_INT 4
6987: PPUSH
6988: LD_INT 1
6990: PPUSH
6991: LD_INT 2
6993: PPUSH
6994: LD_INT 4
6996: PUSH
6997: LD_INT 5
6999: PUSH
7000: LD_INT 6
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: LIST
7007: PUSH
7008: LD_INT 1
7010: PPUSH
7011: LD_INT 3
7013: PPUSH
7014: CALL_OW 12
7018: ARRAY
7019: PPUSH
7020: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7024: LD_INT 26
7026: PPUSH
7027: LD_INT 4
7029: PPUSH
7030: LD_INT 1
7032: PPUSH
7033: LD_INT 2
7035: PPUSH
7036: LD_INT 4
7038: PUSH
7039: LD_INT 5
7041: PUSH
7042: LD_INT 6
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: LIST
7049: PUSH
7050: LD_INT 1
7052: PPUSH
7053: LD_INT 3
7055: PPUSH
7056: CALL_OW 12
7060: ARRAY
7061: PPUSH
7062: CALL_OW 185
// AddComConstruct ( am_fac , us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ) ;
7066: LD_INT 26
7068: PPUSH
7069: LD_INT 4
7071: PPUSH
7072: LD_INT 1
7074: PPUSH
7075: LD_INT 2
7077: PPUSH
7078: LD_INT 4
7080: PUSH
7081: LD_INT 5
7083: PUSH
7084: LD_INT 6
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: LIST
7091: PUSH
7092: LD_INT 1
7094: PPUSH
7095: LD_INT 3
7097: PPUSH
7098: CALL_OW 12
7102: ARRAY
7103: PPUSH
7104: CALL_OW 185
// end ; end ;
7108: GO 7111
7110: POP
// end ;
7111: LD_VAR 0 1
7115: RET
// every 0 0$01 do var i , filter ;
7116: GO 7118
7118: DISABLE
7119: LD_INT 0
7121: PPUSH
7122: PPUSH
// begin enable ;
7123: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
7124: LD_INT 22
7126: PUSH
7127: LD_INT 1
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: PUSH
7134: LD_INT 25
7136: PUSH
7137: LD_INT 4
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PPUSH
7148: CALL_OW 69
7152: PUSH
7153: LD_INT 0
7155: GREATER
7156: IFFALSE 7165
// RaiseSailEvent ( 3 ) ;
7158: LD_INT 3
7160: PPUSH
7161: CALL_OW 427
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 0 then
7165: LD_INT 22
7167: PUSH
7168: LD_INT 1
7170: PUSH
7171: EMPTY
7172: LIST
7173: LIST
7174: PUSH
7175: LD_INT 21
7177: PUSH
7178: LD_INT 3
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PUSH
7185: LD_INT 3
7187: PUSH
7188: LD_INT 24
7190: PUSH
7191: LD_INT 1000
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: LIST
7206: PPUSH
7207: CALL_OW 69
7211: PUSH
7212: LD_INT 0
7214: GREATER
7215: IFFALSE 7226
// RaiseSailEvent ( 1 ) else
7217: LD_INT 1
7219: PPUSH
7220: CALL_OW 427
7224: GO 7233
// RaiseSailEvent ( 2 ) ;
7226: LD_INT 2
7228: PPUSH
7229: CALL_OW 427
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) > 0 then
7233: LD_INT 22
7235: PUSH
7236: LD_INT 1
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: LD_INT 30
7245: PUSH
7246: LD_INT 5
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PPUSH
7257: CALL_OW 69
7261: PUSH
7262: LD_INT 0
7264: GREATER
7265: IFFALSE 7274
// RaiseSailEvent ( 4 ) ;
7267: LD_INT 4
7269: PPUSH
7270: CALL_OW 427
// if gamma_towers > 0 then
7274: LD_EXP 18
7278: PUSH
7279: LD_INT 0
7281: GREATER
7282: IFFALSE 7291
// RaiseSailEvent ( 5 ) ;
7284: LD_INT 5
7286: PPUSH
7287: CALL_OW 427
// end ;
7291: PPOPN 2
7293: END
// export new_veh ; every 9 9$00 do var chassis , weapon ;
7294: GO 7296
7296: DISABLE
7297: LD_INT 0
7299: PPUSH
7300: PPUSH
// begin enable ;
7301: ENABLE
// if new_veh > 0 then
7302: LD_EXP 19
7306: PUSH
7307: LD_INT 0
7309: GREATER
7310: IFFALSE 7497
// while ( new_veh > 0 ) do
7312: LD_EXP 19
7316: PUSH
7317: LD_INT 0
7319: GREATER
7320: IFFALSE 7497
// begin Wait ( 0 0$01 ) ;
7322: LD_INT 35
7324: PPUSH
7325: CALL_OW 67
// if BuildingStatus ( am_fac ) = bs_idle then
7329: LD_INT 26
7331: PPUSH
7332: CALL_OW 461
7336: PUSH
7337: LD_INT 2
7339: EQUAL
7340: IFFALSE 7495
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ Rand ( 1 , 4 ) ] ;
7342: LD_ADDR_VAR 0 1
7346: PUSH
7347: LD_INT 2
7349: PUSH
7350: LD_INT 3
7352: PUSH
7353: LD_INT 3
7355: PUSH
7356: LD_INT 4
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: PUSH
7365: LD_INT 1
7367: PPUSH
7368: LD_INT 4
7370: PPUSH
7371: CALL_OW 12
7375: ARRAY
7376: ST_TO_ADDR
// if chassis in [ us_medium_wheeled , us_medium_tracked ] then
7377: LD_VAR 0 1
7381: PUSH
7382: LD_INT 2
7384: PUSH
7385: LD_INT 3
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: IN
7392: IFFALSE 7427
// weapon := [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ Rand ( 1 , 3 ) ] else
7394: LD_ADDR_VAR 0 2
7398: PUSH
7399: LD_INT 4
7401: PUSH
7402: LD_INT 5
7404: PUSH
7405: LD_INT 7
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 1
7415: PPUSH
7416: LD_INT 3
7418: PPUSH
7419: CALL_OW 12
7423: ARRAY
7424: ST_TO_ADDR
7425: GO 7458
// weapon := [ us_double_gun , us_rocket_launcher , us_heavy_gun ] [ Rand ( 1 , 3 ) ] ;
7427: LD_ADDR_VAR 0 2
7431: PUSH
7432: LD_INT 5
7434: PUSH
7435: LD_INT 7
7437: PUSH
7438: LD_INT 6
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: LIST
7445: PUSH
7446: LD_INT 1
7448: PPUSH
7449: LD_INT 3
7451: PPUSH
7452: CALL_OW 12
7456: ARRAY
7457: ST_TO_ADDR
// ComConstruct ( am_fac , chassis , engine_combustion , control_remote , weapon ) ;
7458: LD_INT 26
7460: PPUSH
7461: LD_VAR 0 1
7465: PPUSH
7466: LD_INT 1
7468: PPUSH
7469: LD_INT 2
7471: PPUSH
7472: LD_VAR 0 2
7476: PPUSH
7477: CALL_OW 125
// new_veh := new_veh - 1 ;
7481: LD_ADDR_EXP 19
7485: PUSH
7486: LD_EXP 19
7490: PUSH
7491: LD_INT 1
7493: MINUS
7494: ST_TO_ADDR
// end ; end ;
7495: GO 7312
// end ;
7497: PPOPN 2
7499: END
// every 0 0$01 do var v , filter , am_cmeh ;
7500: GO 7502
7502: DISABLE
7503: LD_INT 0
7505: PPUSH
7506: PPUSH
7507: PPUSH
// begin enable ;
7508: ENABLE
// am_cmeh := UnitsInside ( am_ct ) ;
7509: LD_ADDR_VAR 0 3
7513: PUSH
7514: LD_INT 56
7516: PPUSH
7517: CALL_OW 313
7521: ST_TO_ADDR
// filter = FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] ] ] ) ;
7522: LD_ADDR_VAR 0 2
7526: PUSH
7527: LD_INT 22
7529: PUSH
7530: LD_INT 1
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: PUSH
7537: LD_INT 33
7539: PUSH
7540: LD_INT 2
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: PUSH
7547: LD_INT 50
7549: PUSH
7550: EMPTY
7551: LIST
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: LIST
7557: PUSH
7558: EMPTY
7559: LIST
7560: PPUSH
7561: CALL_OW 69
7565: ST_TO_ADDR
// if filter > 0 then
7566: LD_VAR 0 2
7570: PUSH
7571: LD_INT 0
7573: GREATER
7574: IFFALSE 7642
// begin for v in filter do
7576: LD_ADDR_VAR 0 1
7580: PUSH
7581: LD_VAR 0 2
7585: PUSH
7586: FOR_IN
7587: IFFALSE 7640
// begin if not IsControledBy ( v ) and IsOk ( v ) then
7589: LD_VAR 0 1
7593: PPUSH
7594: CALL_OW 312
7598: NOT
7599: PUSH
7600: LD_VAR 0 1
7604: PPUSH
7605: CALL_OW 302
7609: AND
7610: IFFALSE 7638
// ComLinkTo ( v , am_cmeh [ Rand ( 1 , 3 ) ] ) ;
7612: LD_VAR 0 1
7616: PPUSH
7617: LD_VAR 0 3
7621: PUSH
7622: LD_INT 1
7624: PPUSH
7625: LD_INT 3
7627: PPUSH
7628: CALL_OW 12
7632: ARRAY
7633: PPUSH
7634: CALL_OW 135
// end ;
7638: GO 7586
7640: POP
7641: POP
// end ; end ;
7642: PPOPN 3
7644: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) = [ 4 , 5 , 7 ] [ dif ] and BuildingStatus ( am_fac ) = bs_idle do var i , un , enemy ;
7645: LD_INT 33
7647: PUSH
7648: LD_INT 2
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: PUSH
7655: LD_INT 3
7657: PUSH
7658: LD_INT 34
7660: PUSH
7661: LD_INT 13
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PPUSH
7676: CALL_OW 69
7680: PUSH
7681: LD_INT 4
7683: PUSH
7684: LD_INT 5
7686: PUSH
7687: LD_INT 7
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: LIST
7694: PUSH
7695: LD_EXP 1
7699: ARRAY
7700: EQUAL
7701: PUSH
7702: LD_INT 26
7704: PPUSH
7705: CALL_OW 461
7709: PUSH
7710: LD_INT 2
7712: EQUAL
7713: AND
7714: IFFALSE 7925
7716: GO 7718
7718: DISABLE
7719: LD_INT 0
7721: PPUSH
7722: PPUSH
7723: PPUSH
// begin enable ;
7724: ENABLE
// if Sikorski_Ar then
7725: LD_EXP 12
7729: IFFALSE 7806
// SForce := FilterAllUnits ( [ [ f_or , [ f_side , 4 ] , [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ] ] ) else
7731: LD_ADDR_EXP 11
7735: PUSH
7736: LD_INT 2
7738: PUSH
7739: LD_INT 22
7741: PUSH
7742: LD_INT 4
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: PUSH
7749: LD_INT 22
7751: PUSH
7752: LD_INT 1
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: PUSH
7759: LD_INT 33
7761: PUSH
7762: LD_INT 2
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: PUSH
7769: LD_INT 3
7771: PUSH
7772: LD_INT 34
7774: PUSH
7775: LD_INT 13
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: LIST
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: LIST
7795: PUSH
7796: EMPTY
7797: LIST
7798: PPUSH
7799: CALL_OW 69
7803: ST_TO_ADDR
7804: GO 7847
// SForce := FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) ;
7806: LD_ADDR_EXP 11
7810: PUSH
7811: LD_INT 33
7813: PUSH
7814: LD_INT 2
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: PUSH
7821: LD_INT 3
7823: PUSH
7824: LD_INT 34
7826: PUSH
7827: LD_INT 13
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PPUSH
7842: CALL_OW 69
7846: ST_TO_ADDR
// repeat begin for un in SForce do
7847: LD_ADDR_VAR 0 2
7851: PUSH
7852: LD_EXP 11
7856: PUSH
7857: FOR_IN
7858: IFFALSE 7913
// begin enemy := FilterAllUnits ( [ f_side , 3 ] ) ;
7860: LD_ADDR_VAR 0 3
7864: PUSH
7865: LD_INT 22
7867: PUSH
7868: LD_INT 3
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: PPUSH
7875: CALL_OW 69
7879: ST_TO_ADDR
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
7880: LD_VAR 0 2
7884: PPUSH
7885: LD_VAR 0 3
7889: PPUSH
7890: LD_VAR 0 2
7894: PPUSH
7895: CALL_OW 74
7899: PPUSH
7900: CALL_OW 115
// Wait ( 0 0$01 ) ;
7904: LD_INT 35
7906: PPUSH
7907: CALL_OW 67
// end ;
7911: GO 7857
7913: POP
7914: POP
// end until SForce = 0 ;
7915: LD_EXP 11
7919: PUSH
7920: LD_INT 0
7922: EQUAL
7923: IFFALSE 7847
// end ;
7925: PPOPN 3
7927: END
// export function NewForce ( num ) ; var i , filter , veh , tmp ; begin
7928: LD_INT 0
7930: PPUSH
7931: PPUSH
7932: PPUSH
7933: PPUSH
7934: PPUSH
// tmp := FilterUnitsInArea ( spawnArea , [ ] ) ;
7935: LD_ADDR_VAR 0 6
7939: PUSH
7940: LD_INT 14
7942: PPUSH
7943: EMPTY
7944: PPUSH
7945: CALL_OW 70
7949: ST_TO_ADDR
// if tmp then
7950: LD_VAR 0 6
7954: IFFALSE 7988
// for i in tmp do
7956: LD_ADDR_VAR 0 3
7960: PUSH
7961: LD_VAR 0 6
7965: PUSH
7966: FOR_IN
7967: IFFALSE 7986
// ComMoveXY ( i , 42 , 23 ) ;
7969: LD_VAR 0 3
7973: PPUSH
7974: LD_INT 42
7976: PPUSH
7977: LD_INT 23
7979: PPUSH
7980: CALL_OW 111
7984: GO 7966
7986: POP
7987: POP
// EraseResourceArea ( spawnArea , mat_cans ) ;
7988: LD_INT 14
7990: PPUSH
7991: LD_INT 1
7993: PPUSH
7994: CALL_OW 286
// uc_side := 4 ;
7998: LD_ADDR_OWVAR 20
8002: PUSH
8003: LD_INT 4
8005: ST_TO_ADDR
// uc_nation := 1 ;
8006: LD_ADDR_OWVAR 21
8010: PUSH
8011: LD_INT 1
8013: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
8014: LD_ADDR_OWVAR 37
8018: PUSH
8019: LD_INT 4
8021: ST_TO_ADDR
// vc_control := control_manual ;
8022: LD_ADDR_OWVAR 38
8026: PUSH
8027: LD_INT 1
8029: ST_TO_ADDR
// vc_engine := engine_combustion ;
8030: LD_ADDR_OWVAR 39
8034: PUSH
8035: LD_INT 1
8037: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ dif ] ;
8038: LD_ADDR_OWVAR 40
8042: PUSH
8043: LD_INT 4
8045: PUSH
8046: LD_INT 5
8048: PUSH
8049: LD_INT 7
8051: PUSH
8052: EMPTY
8053: LIST
8054: LIST
8055: LIST
8056: PUSH
8057: LD_EXP 1
8061: ARRAY
8062: ST_TO_ADDR
// veh := CreateVehicle ;
8063: LD_ADDR_VAR 0 5
8067: PUSH
8068: CALL_OW 45
8072: ST_TO_ADDR
// PlaceUnitArea ( veh , am_main_spawn , false ) ;
8073: LD_VAR 0 5
8077: PPUSH
8078: LD_INT 2
8080: PPUSH
8081: LD_INT 0
8083: PPUSH
8084: CALL_OW 49
// PlaceHumanInUnit ( sikorski , veh ) ;
8088: LD_EXP 9
8092: PPUSH
8093: LD_VAR 0 5
8097: PPUSH
8098: CALL_OW 52
// SetMark ( veh , 1 ) ;
8102: LD_VAR 0 5
8106: PPUSH
8107: LD_INT 1
8109: PPUSH
8110: CALL_OW 242
// while ( num > 0 ) do
8114: LD_VAR 0 1
8118: PUSH
8119: LD_INT 0
8121: GREATER
8122: IFFALSE 8289
// begin CreateVehicleWithDriver ( [ us_medium_tracked , us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ Rand ( dif , 4 ) ] , engine_combustion , [ us_gatling_gun , us_double_gun , us_double_gun , us_rocket_launcher ] [ Rand ( 1 , dif + 1 ) ] , am_sik , 2 , [ 5 , 6 , 7 ] [ dif ] ) ;
8124: LD_INT 3
8126: PUSH
8127: LD_INT 3
8129: PUSH
8130: LD_INT 3
8132: PUSH
8133: LD_INT 4
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: PUSH
8142: LD_EXP 1
8146: PPUSH
8147: LD_INT 4
8149: PPUSH
8150: CALL_OW 12
8154: ARRAY
8155: PPUSH
8156: LD_INT 1
8158: PPUSH
8159: LD_INT 4
8161: PUSH
8162: LD_INT 5
8164: PUSH
8165: LD_INT 5
8167: PUSH
8168: LD_INT 7
8170: PUSH
8171: EMPTY
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: PUSH
8177: LD_INT 1
8179: PPUSH
8180: LD_EXP 1
8184: PUSH
8185: LD_INT 1
8187: PLUS
8188: PPUSH
8189: CALL_OW 12
8193: ARRAY
8194: PPUSH
8195: LD_INT 11
8197: PPUSH
8198: LD_INT 2
8200: PPUSH
8201: LD_INT 5
8203: PUSH
8204: LD_INT 6
8206: PUSH
8207: LD_INT 7
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: LIST
8214: PUSH
8215: LD_EXP 1
8219: ARRAY
8220: PPUSH
8221: CALL 1297 0 6
// filter := FilterAllUnits ( [ f_side , 4 ] ) ;
8225: LD_ADDR_VAR 0 4
8229: PUSH
8230: LD_INT 22
8232: PUSH
8233: LD_INT 4
8235: PUSH
8236: EMPTY
8237: LIST
8238: LIST
8239: PPUSH
8240: CALL_OW 69
8244: ST_TO_ADDR
// ComMoveXY ( filter [ filter ] , 36 , 18 ) ;
8245: LD_VAR 0 4
8249: PUSH
8250: LD_VAR 0 4
8254: ARRAY
8255: PPUSH
8256: LD_INT 36
8258: PPUSH
8259: LD_INT 18
8261: PPUSH
8262: CALL_OW 111
// Wait ( 0 0$02 ) ;
8266: LD_INT 70
8268: PPUSH
8269: CALL_OW 67
// num := num - 1 ;
8273: LD_ADDR_VAR 0 1
8277: PUSH
8278: LD_VAR 0 1
8282: PUSH
8283: LD_INT 1
8285: MINUS
8286: ST_TO_ADDR
// end ;
8287: GO 8114
// end ;
8289: LD_VAR 0 2
8293: RET
// every 0 0$03 trigger patrol > 0 do var i ;
8294: LD_EXP 17
8298: PUSH
8299: LD_INT 0
8301: GREATER
8302: IFFALSE 8571
8304: GO 8306
8306: DISABLE
8307: LD_INT 0
8309: PPUSH
// begin enable ;
8310: ENABLE
// for i = 1 to patrol do
8311: LD_ADDR_VAR 0 1
8315: PUSH
8316: DOUBLE
8317: LD_INT 1
8319: DEC
8320: ST_TO_ADDR
8321: LD_EXP 17
8325: PUSH
8326: FOR_TO
8327: IFFALSE 8569
// begin if patrol [ i ] and IsLive ( patrol [ i ] ) and not HasTask ( patrol [ i ] ) then
8329: LD_EXP 17
8333: PUSH
8334: LD_VAR 0 1
8338: ARRAY
8339: PUSH
8340: LD_EXP 17
8344: PUSH
8345: LD_VAR 0 1
8349: ARRAY
8350: PPUSH
8351: CALL_OW 300
8355: AND
8356: PUSH
8357: LD_EXP 17
8361: PUSH
8362: LD_VAR 0 1
8366: ARRAY
8367: PPUSH
8368: CALL_OW 314
8372: NOT
8373: AND
8374: IFFALSE 8524
// case i of 1 :
8376: LD_VAR 0 1
8380: PUSH
8381: LD_INT 1
8383: DOUBLE
8384: EQUAL
8385: IFTRUE 8389
8387: GO 8452
8389: POP
// begin ComMoveXY ( patrol [ i ] , 53 , 91 ) ;
8390: LD_EXP 17
8394: PUSH
8395: LD_VAR 0 1
8399: ARRAY
8400: PPUSH
8401: LD_INT 53
8403: PPUSH
8404: LD_INT 91
8406: PPUSH
8407: CALL_OW 111
// AddComWait ( patrol [ i ] , 0 0$07 ) ;
8411: LD_EXP 17
8415: PUSH
8416: LD_VAR 0 1
8420: ARRAY
8421: PPUSH
8422: LD_INT 245
8424: PPUSH
8425: CALL_OW 202
// AddComMoveXY ( patrol [ i ] , 24 , 26 ) ;
8429: LD_EXP 17
8433: PUSH
8434: LD_VAR 0 1
8438: ARRAY
8439: PPUSH
8440: LD_INT 24
8442: PPUSH
8443: LD_INT 26
8445: PPUSH
8446: CALL_OW 171
// end ; 2 :
8450: GO 8524
8452: LD_INT 2
8454: DOUBLE
8455: EQUAL
8456: IFTRUE 8460
8458: GO 8523
8460: POP
// begin ComMoveXY ( patrol [ i ] , 83 , 57 ) ;
8461: LD_EXP 17
8465: PUSH
8466: LD_VAR 0 1
8470: ARRAY
8471: PPUSH
8472: LD_INT 83
8474: PPUSH
8475: LD_INT 57
8477: PPUSH
8478: CALL_OW 111
// AddComWait ( patrol [ i ] , 0 0$07 ) ;
8482: LD_EXP 17
8486: PUSH
8487: LD_VAR 0 1
8491: ARRAY
8492: PPUSH
8493: LD_INT 245
8495: PPUSH
8496: CALL_OW 202
// AddComMoveXY ( patrol [ i ] , 47 , 53 ) ;
8500: LD_EXP 17
8504: PUSH
8505: LD_VAR 0 1
8509: ARRAY
8510: PPUSH
8511: LD_INT 47
8513: PPUSH
8514: LD_INT 53
8516: PPUSH
8517: CALL_OW 171
// end ; end ;
8521: GO 8524
8523: POP
// if GetLives ( patrol [ i ] ) < 1000 then
8524: LD_EXP 17
8528: PUSH
8529: LD_VAR 0 1
8533: ARRAY
8534: PPUSH
8535: CALL_OW 256
8539: PUSH
8540: LD_INT 1000
8542: LESS
8543: IFFALSE 8567
// patrol := patrol diff patrol [ i ] ;
8545: LD_ADDR_EXP 17
8549: PUSH
8550: LD_EXP 17
8554: PUSH
8555: LD_EXP 17
8559: PUSH
8560: LD_VAR 0 1
8564: ARRAY
8565: DIFF
8566: ST_TO_ADDR
// end ;
8567: GO 8326
8569: POP
8570: POP
// end ;
8571: PPOPN 1
8573: END
// every 0 0$10 do
8574: GO 8576
8576: DISABLE
// begin Wait ( [ 20 20$00 , 18 18$00 , 16 16$00 ] [ dif ] ) ;
8577: LD_INT 42000
8579: PUSH
8580: LD_INT 37800
8582: PUSH
8583: LD_INT 33600
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: LIST
8590: PUSH
8591: LD_EXP 1
8595: ARRAY
8596: PPUSH
8597: CALL_OW 67
// if not contact_am then
8601: LD_EXP 16
8605: NOT
8606: IFFALSE 8616
// contact_am := true ;
8608: LD_ADDR_EXP 16
8612: PUSH
8613: LD_INT 1
8615: ST_TO_ADDR
// end ; end_of_file
8616: END
// export event_rocket , event_comp , comp_tested , sikorski_run ; export function Action ; begin
8617: LD_INT 0
8619: PPUSH
// comp_tested := false ;
8620: LD_ADDR_EXP 22
8624: PUSH
8625: LD_INT 0
8627: ST_TO_ADDR
// sikorski_run := false ;
8628: LD_ADDR_EXP 23
8632: PUSH
8633: LD_INT 0
8635: ST_TO_ADDR
// InGameOn ;
8636: CALL_OW 8
// CenterNowOnXY ( 5 , 4 ) ;
8640: LD_INT 5
8642: PPUSH
8643: LD_INT 4
8645: PPUSH
8646: CALL_OW 86
// wait ( 0 0$2 ) ;
8650: LD_INT 70
8652: PPUSH
8653: CALL_OW 67
// CenterOnUnits ( commander ) ;
8657: LD_EXP 3
8661: PPUSH
8662: CALL_OW 85
// wait ( 0 0$01 ) ;
8666: LD_INT 35
8668: PPUSH
8669: CALL_OW 67
// SayRadio ( popov , Dpop1 ) ;
8673: LD_EXP 2
8677: PPUSH
8678: LD_STRING Dpop1
8680: PPUSH
8681: CALL_OW 94
// Say ( commander , Dcomm1 ) ;
8685: LD_EXP 3
8689: PPUSH
8690: LD_STRING Dcomm1
8692: PPUSH
8693: CALL_OW 88
// SayRadio ( popov , Dpop2 ) ;
8697: LD_EXP 2
8701: PPUSH
8702: LD_STRING Dpop2
8704: PPUSH
8705: CALL_OW 94
// Say ( commander , Dcomm2 ) ;
8709: LD_EXP 3
8713: PPUSH
8714: LD_STRING Dcomm2
8716: PPUSH
8717: CALL_OW 88
// InGameOff ;
8721: CALL_OW 9
// ChangeMissionObjectives ( T1 ) ;
8725: LD_STRING T1
8727: PPUSH
8728: CALL_OW 337
// end ;
8732: LD_VAR 0 1
8736: RET
// every 0 0$01 trigger timer > 2 2$01 do
8737: LD_EXP 24
8741: PUSH
8742: LD_INT 4235
8744: GREATER
8745: IFFALSE 8762
8747: GO 8749
8749: DISABLE
// begin SayRadio ( kapral , DKap1 ) ;
8750: LD_EXP 5
8754: PPUSH
8755: LD_STRING DKap1
8757: PPUSH
8758: CALL_OW 94
// end ;
8762: END
// every 0 0$01 trigger timer > [ 22 22$00 , 25 25$00 , 30 30$00 ] [ dif ] do var i ;
8763: LD_EXP 24
8767: PUSH
8768: LD_INT 46200
8770: PUSH
8771: LD_INT 52500
8773: PUSH
8774: LD_INT 63000
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: LIST
8781: PUSH
8782: LD_EXP 1
8786: ARRAY
8787: GREATER
8788: IFFALSE 9155
8790: GO 8792
8792: DISABLE
8793: LD_INT 0
8795: PPUSH
// begin SayRadio ( kapral , DKap2 ) ;
8796: LD_EXP 5
8800: PPUSH
8801: LD_STRING DKap2
8803: PPUSH
8804: CALL_OW 94
// Wait ( 0 0$0.3 ) ;
8808: LD_INT 10
8810: PPUSH
8811: CALL_OW 67
// Say ( commander , Dcommk ) ;
8815: LD_EXP 3
8819: PPUSH
8820: LD_STRING Dcommk
8822: PPUSH
8823: CALL_OW 88
// Wait ( 0 0$44 ) ;
8827: LD_INT 1540
8829: PPUSH
8830: CALL_OW 67
// PlaceUnitArea ( kapral , am_west_spawn , false ) ;
8834: LD_EXP 5
8838: PPUSH
8839: LD_INT 3
8841: PPUSH
8842: LD_INT 0
8844: PPUSH
8845: CALL_OW 49
// CenterNowOnUnits ( kapral ) ;
8849: LD_EXP 5
8853: PPUSH
8854: CALL_OW 87
// Wait ( 0 0$10 ) ;
8858: LD_INT 350
8860: PPUSH
8861: CALL_OW 67
// NewForce ( [ 6 , 7 , 8 ] [ dif ] ) ;
8865: LD_INT 6
8867: PUSH
8868: LD_INT 7
8870: PUSH
8871: LD_INT 8
8873: PUSH
8874: EMPTY
8875: LIST
8876: LIST
8877: LIST
8878: PUSH
8879: LD_EXP 1
8883: ARRAY
8884: PPUSH
8885: CALL 7928 0 1
// Wait ( 2 2$00 ) ;
8889: LD_INT 4200
8891: PPUSH
8892: CALL_OW 67
// while ( FilterAllUnits ( [ [ f_control , control_remote ] , [ f_not , [ f_weapon , us_crane ] ] ] ) < 3 ) do
8896: LD_INT 33
8898: PUSH
8899: LD_INT 2
8901: PUSH
8902: EMPTY
8903: LIST
8904: LIST
8905: PUSH
8906: LD_INT 3
8908: PUSH
8909: LD_INT 34
8911: PUSH
8912: LD_INT 13
8914: PUSH
8915: EMPTY
8916: LIST
8917: LIST
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: PPUSH
8927: CALL_OW 69
8931: PUSH
8932: LD_INT 3
8934: LESS
8935: IFFALSE 8946
// Wait ( 0 0$01 ) ;
8937: LD_INT 35
8939: PPUSH
8940: CALL_OW 67
8944: GO 8896
// uc_side := 4 ;
8946: LD_ADDR_OWVAR 20
8950: PUSH
8951: LD_INT 4
8953: ST_TO_ADDR
// uc_nation := 1 ;
8954: LD_ADDR_OWVAR 21
8958: PUSH
8959: LD_INT 1
8961: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ dif ] do
8962: LD_ADDR_VAR 0 1
8966: PUSH
8967: DOUBLE
8968: LD_INT 1
8970: DEC
8971: ST_TO_ADDR
8972: LD_INT 4
8974: PUSH
8975: LD_INT 5
8977: PUSH
8978: LD_INT 6
8980: PUSH
8981: EMPTY
8982: LIST
8983: LIST
8984: LIST
8985: PUSH
8986: LD_EXP 1
8990: ARRAY
8991: PUSH
8992: FOR_TO
8993: IFFALSE 9035
// PlaceUnitArea ( CreateHumanWithClass ( 1 , [ 5 , 6 , 7 ] [ dif ] ) , am_east_spawn , false ) ;
8995: LD_INT 1
8997: PPUSH
8998: LD_INT 5
9000: PUSH
9001: LD_INT 6
9003: PUSH
9004: LD_INT 7
9006: PUSH
9007: EMPTY
9008: LIST
9009: LIST
9010: LIST
9011: PUSH
9012: LD_EXP 1
9016: ARRAY
9017: PPUSH
9018: CALL 734 0 2
9022: PPUSH
9023: LD_INT 4
9025: PPUSH
9026: LD_INT 0
9028: PPUSH
9029: CALL_OW 49
9033: GO 8992
9035: POP
9036: POP
// sikorski_ar := true ;
9037: LD_ADDR_EXP 12
9041: PUSH
9042: LD_INT 1
9044: ST_TO_ADDR
// SayRadio ( sikorski , DSik1 ) ;
9045: LD_EXP 9
9049: PPUSH
9050: LD_STRING DSik1
9052: PPUSH
9053: CALL_OW 94
// Wait ( 0 0$30 ) ;
9057: LD_INT 1050
9059: PPUSH
9060: CALL_OW 67
// uc_side := 4 ;
9064: LD_ADDR_OWVAR 20
9068: PUSH
9069: LD_INT 4
9071: ST_TO_ADDR
// uc_nation := 1 ;
9072: LD_ADDR_OWVAR 21
9076: PUSH
9077: LD_INT 1
9079: ST_TO_ADDR
// for i = 1 to [ 3 , 4 , 4 ] [ dif ] do
9080: LD_ADDR_VAR 0 1
9084: PUSH
9085: DOUBLE
9086: LD_INT 1
9088: DEC
9089: ST_TO_ADDR
9090: LD_INT 3
9092: PUSH
9093: LD_INT 4
9095: PUSH
9096: LD_INT 4
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: LIST
9103: PUSH
9104: LD_EXP 1
9108: ARRAY
9109: PUSH
9110: FOR_TO
9111: IFFALSE 9153
// PlaceUnitArea ( CreateHumanWithClass ( 1 , [ 5 , 6 , 7 ] [ dif ] ) , am_south_spawn , false ) ;
9113: LD_INT 1
9115: PPUSH
9116: LD_INT 5
9118: PUSH
9119: LD_INT 6
9121: PUSH
9122: LD_INT 7
9124: PUSH
9125: EMPTY
9126: LIST
9127: LIST
9128: LIST
9129: PUSH
9130: LD_EXP 1
9134: ARRAY
9135: PPUSH
9136: CALL 734 0 2
9140: PPUSH
9141: LD_INT 13
9143: PPUSH
9144: LD_INT 0
9146: PPUSH
9147: CALL_OW 49
9151: GO 9110
9153: POP
9154: POP
// end ;
9155: PPOPN 1
9157: END
// every 0 0$0.1 trigger GetLives ( sikorski ) < 650 do
9158: LD_EXP 9
9162: PPUSH
9163: CALL_OW 256
9167: PUSH
9168: LD_INT 650
9170: LESS
9171: IFFALSE 9253
9173: GO 9175
9175: DISABLE
// begin Say ( sikorski , DSik2 ) ;
9176: LD_EXP 9
9180: PPUSH
9181: LD_STRING DSik2
9183: PPUSH
9184: CALL_OW 88
// while ( IsLive ( sikorski ) ) do
9188: LD_EXP 9
9192: PPUSH
9193: CALL_OW 300
9197: IFFALSE 9253
// begin ComMoveToArea ( sikorski , am_main_spawn ) ;
9199: LD_EXP 9
9203: PPUSH
9204: LD_INT 2
9206: PPUSH
9207: CALL_OW 113
// Wait ( 0 0$01 ) ;
9211: LD_INT 35
9213: PPUSH
9214: CALL_OW 67
// if IsInArea ( sikorski , am_main_spawn ) then
9218: LD_EXP 9
9222: PPUSH
9223: LD_INT 2
9225: PPUSH
9226: CALL_OW 308
9230: IFFALSE 9251
// begin RemoveUnit ( sikorski ) ;
9232: LD_EXP 9
9236: PPUSH
9237: CALL_OW 64
// break ;
9241: GO 9253
// sikorski_run := true ;
9243: LD_ADDR_EXP 23
9247: PUSH
9248: LD_INT 1
9250: ST_TO_ADDR
// end ; end ;
9251: GO 9188
// end ;
9253: END
// every 0 0$0.1 trigger GetLives ( sikorski ) < 1000 do
9254: LD_EXP 9
9258: PPUSH
9259: CALL_OW 256
9263: PUSH
9264: LD_INT 1000
9266: LESS
9267: IFFALSE 9284
9269: GO 9271
9271: DISABLE
// Say ( sikorski , DSkik3 ) ; end_of_file
9272: LD_EXP 9
9276: PPUSH
9277: LD_STRING DSkik3
9279: PPUSH
9280: CALL_OW 88
9284: END
// every 1 1$45 + 0 0$15 do
9285: GO 9287
9287: DISABLE
// begin enable ;
9288: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
9289: LD_INT 1
9291: PPUSH
9292: LD_INT 5
9294: PPUSH
9295: CALL_OW 12
9299: PPUSH
9300: LD_INT 8
9302: PPUSH
9303: LD_INT 1
9305: PPUSH
9306: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$37 ) ) ;
9310: LD_INT 350
9312: PPUSH
9313: LD_INT 1295
9315: PPUSH
9316: CALL_OW 12
9320: PPUSH
9321: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
9325: LD_INT 1
9327: PPUSH
9328: LD_INT 5
9330: PPUSH
9331: CALL_OW 12
9335: PPUSH
9336: LD_INT 1
9338: PPUSH
9339: CALL_OW 57
// Wait ( Rand ( 0 0$10 , 0 0$30 ) ) ;
9343: LD_INT 350
9345: PPUSH
9346: LD_INT 1050
9348: PPUSH
9349: CALL_OW 12
9353: PPUSH
9354: CALL_OW 67
// if timer <= [ 12 12$00 , 11 11$00 , 10 10$00 ] [ dif ] then
9358: LD_EXP 24
9362: PUSH
9363: LD_INT 25200
9365: PUSH
9366: LD_INT 23100
9368: PUSH
9369: LD_INT 21000
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: LIST
9376: PUSH
9377: LD_EXP 1
9381: ARRAY
9382: LESSEQUAL
9383: IFFALSE 9406
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
9385: LD_INT 1
9387: PPUSH
9388: LD_INT 5
9390: PPUSH
9391: CALL_OW 12
9395: PPUSH
9396: LD_INT 8
9398: PPUSH
9399: LD_INT 1
9401: PPUSH
9402: CALL_OW 55
// end ;
9406: END
// export timer ; every 1 do
9407: GO 9409
9409: DISABLE
// timer := 0 0$00 ;
9410: LD_ADDR_EXP 24
9414: PUSH
9415: LD_INT 0
9417: ST_TO_ADDR
9418: END
// every 0 0$01 do
9419: GO 9421
9421: DISABLE
// begin enable ;
9422: ENABLE
// Display_Strings := [ #tick , timer ] ;
9423: LD_ADDR_OWVAR 47
9427: PUSH
9428: LD_STRING #tick
9430: PUSH
9431: LD_EXP 24
9435: PUSH
9436: EMPTY
9437: LIST
9438: LIST
9439: ST_TO_ADDR
// timer := timer + 0 0$01 ;
9440: LD_ADDR_EXP 24
9444: PUSH
9445: LD_EXP 24
9449: PUSH
9450: LD_INT 35
9452: PLUS
9453: ST_TO_ADDR
// end ; end_of_file
9454: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
9455: LD_INT 0
9457: PPUSH
// ar_crane := 88 ;
9458: LD_ADDR_EXP 31
9462: PUSH
9463: LD_INT 88
9465: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
9466: LD_ADDR_EXP 26
9470: PUSH
9471: LD_INT 89
9473: ST_TO_ADDR
// us_hack := 99 ;
9474: LD_ADDR_EXP 27
9478: PUSH
9479: LD_INT 99
9481: ST_TO_ADDR
// us_artillery := 97 ;
9482: LD_ADDR_EXP 28
9486: PUSH
9487: LD_INT 97
9489: ST_TO_ADDR
// ar_bio_bomb := 91 ;
9490: LD_ADDR_EXP 29
9494: PUSH
9495: LD_INT 91
9497: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
9498: LD_ADDR_EXP 30
9502: PUSH
9503: LD_INT 92
9505: ST_TO_ADDR
// ru_radar := 98 ;
9506: LD_ADDR_EXP 25
9510: PUSH
9511: LD_INT 98
9513: ST_TO_ADDR
// tech_Artillery := 80 ;
9514: LD_ADDR_EXP 32
9518: PUSH
9519: LD_INT 80
9521: ST_TO_ADDR
// tech_RadMat := 81 ;
9522: LD_ADDR_EXP 33
9526: PUSH
9527: LD_INT 81
9529: ST_TO_ADDR
// tech_BasicTools := 82 ;
9530: LD_ADDR_EXP 34
9534: PUSH
9535: LD_INT 82
9537: ST_TO_ADDR
// tech_Cargo := 83 ;
9538: LD_ADDR_EXP 35
9542: PUSH
9543: LD_INT 83
9545: ST_TO_ADDR
// tech_Track := 84 ;
9546: LD_ADDR_EXP 36
9550: PUSH
9551: LD_INT 84
9553: ST_TO_ADDR
// tech_Crane := 85 ;
9554: LD_ADDR_EXP 37
9558: PUSH
9559: LD_INT 85
9561: ST_TO_ADDR
// tech_Bulldozer := 86 ;
9562: LD_ADDR_EXP 38
9566: PUSH
9567: LD_INT 86
9569: ST_TO_ADDR
// tech_Hovercraft := 87 ;
9570: LD_ADDR_EXP 39
9574: PUSH
9575: LD_INT 87
9577: ST_TO_ADDR
// end ;
9578: LD_VAR 0 1
9582: RET
// every 1 do
9583: GO 9585
9585: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
9586: CALL 9455 0 0
9590: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
9591: LD_VAR 0 2
9595: PUSH
9596: LD_INT 100
9598: EQUAL
9599: IFFALSE 10548
// begin if not StreamModeActive then
9601: LD_EXP 40
9605: NOT
9606: IFFALSE 9616
// StreamModeActive := true ;
9608: LD_ADDR_EXP 40
9612: PUSH
9613: LD_INT 1
9615: ST_TO_ADDR
// if p3 = 0 then
9616: LD_VAR 0 3
9620: PUSH
9621: LD_INT 0
9623: EQUAL
9624: IFFALSE 9630
// InitStreamMode ;
9626: CALL 10781 0 0
// if p3 = 1 then
9630: LD_VAR 0 3
9634: PUSH
9635: LD_INT 1
9637: EQUAL
9638: IFFALSE 9648
// sRocket := true ;
9640: LD_ADDR_EXP 45
9644: PUSH
9645: LD_INT 1
9647: ST_TO_ADDR
// if p3 = 2 then
9648: LD_VAR 0 3
9652: PUSH
9653: LD_INT 2
9655: EQUAL
9656: IFFALSE 9666
// sSpeed := true ;
9658: LD_ADDR_EXP 44
9662: PUSH
9663: LD_INT 1
9665: ST_TO_ADDR
// if p3 = 3 then
9666: LD_VAR 0 3
9670: PUSH
9671: LD_INT 3
9673: EQUAL
9674: IFFALSE 9684
// sEngine := true ;
9676: LD_ADDR_EXP 46
9680: PUSH
9681: LD_INT 1
9683: ST_TO_ADDR
// if p3 = 4 then
9684: LD_VAR 0 3
9688: PUSH
9689: LD_INT 4
9691: EQUAL
9692: IFFALSE 9702
// sSpec := true ;
9694: LD_ADDR_EXP 43
9698: PUSH
9699: LD_INT 1
9701: ST_TO_ADDR
// if p3 = 5 then
9702: LD_VAR 0 3
9706: PUSH
9707: LD_INT 5
9709: EQUAL
9710: IFFALSE 9720
// sLevel := true ;
9712: LD_ADDR_EXP 47
9716: PUSH
9717: LD_INT 1
9719: ST_TO_ADDR
// if p3 = 6 then
9720: LD_VAR 0 3
9724: PUSH
9725: LD_INT 6
9727: EQUAL
9728: IFFALSE 9738
// sArmoury := true ;
9730: LD_ADDR_EXP 48
9734: PUSH
9735: LD_INT 1
9737: ST_TO_ADDR
// if p3 = 7 then
9738: LD_VAR 0 3
9742: PUSH
9743: LD_INT 7
9745: EQUAL
9746: IFFALSE 9756
// sRadar := true ;
9748: LD_ADDR_EXP 49
9752: PUSH
9753: LD_INT 1
9755: ST_TO_ADDR
// if p3 = 8 then
9756: LD_VAR 0 3
9760: PUSH
9761: LD_INT 8
9763: EQUAL
9764: IFFALSE 9774
// sBunker := true ;
9766: LD_ADDR_EXP 50
9770: PUSH
9771: LD_INT 1
9773: ST_TO_ADDR
// if p3 = 9 then
9774: LD_VAR 0 3
9778: PUSH
9779: LD_INT 9
9781: EQUAL
9782: IFFALSE 9792
// sHack := true ;
9784: LD_ADDR_EXP 51
9788: PUSH
9789: LD_INT 1
9791: ST_TO_ADDR
// if p3 = 10 then
9792: LD_VAR 0 3
9796: PUSH
9797: LD_INT 10
9799: EQUAL
9800: IFFALSE 9810
// sFire := true ;
9802: LD_ADDR_EXP 52
9806: PUSH
9807: LD_INT 1
9809: ST_TO_ADDR
// if p3 = 11 then
9810: LD_VAR 0 3
9814: PUSH
9815: LD_INT 11
9817: EQUAL
9818: IFFALSE 9828
// sRefresh := true ;
9820: LD_ADDR_EXP 53
9824: PUSH
9825: LD_INT 1
9827: ST_TO_ADDR
// if p3 = 12 then
9828: LD_VAR 0 3
9832: PUSH
9833: LD_INT 12
9835: EQUAL
9836: IFFALSE 9846
// sExp := true ;
9838: LD_ADDR_EXP 54
9842: PUSH
9843: LD_INT 1
9845: ST_TO_ADDR
// if p3 = 13 then
9846: LD_VAR 0 3
9850: PUSH
9851: LD_INT 13
9853: EQUAL
9854: IFFALSE 9864
// sDepot := true ;
9856: LD_ADDR_EXP 55
9860: PUSH
9861: LD_INT 1
9863: ST_TO_ADDR
// if p3 = 14 then
9864: LD_VAR 0 3
9868: PUSH
9869: LD_INT 14
9871: EQUAL
9872: IFFALSE 9882
// sFlag := true ;
9874: LD_ADDR_EXP 56
9878: PUSH
9879: LD_INT 1
9881: ST_TO_ADDR
// if p3 = 15 then
9882: LD_VAR 0 3
9886: PUSH
9887: LD_INT 15
9889: EQUAL
9890: IFFALSE 9900
// sKamikadze := true ;
9892: LD_ADDR_EXP 64
9896: PUSH
9897: LD_INT 1
9899: ST_TO_ADDR
// if p3 = 16 then
9900: LD_VAR 0 3
9904: PUSH
9905: LD_INT 16
9907: EQUAL
9908: IFFALSE 9918
// sTroll := true ;
9910: LD_ADDR_EXP 65
9914: PUSH
9915: LD_INT 1
9917: ST_TO_ADDR
// if p3 = 17 then
9918: LD_VAR 0 3
9922: PUSH
9923: LD_INT 17
9925: EQUAL
9926: IFFALSE 9936
// sSlow := true ;
9928: LD_ADDR_EXP 66
9932: PUSH
9933: LD_INT 1
9935: ST_TO_ADDR
// if p3 = 18 then
9936: LD_VAR 0 3
9940: PUSH
9941: LD_INT 18
9943: EQUAL
9944: IFFALSE 9954
// sLack := true ;
9946: LD_ADDR_EXP 67
9950: PUSH
9951: LD_INT 1
9953: ST_TO_ADDR
// if p3 = 19 then
9954: LD_VAR 0 3
9958: PUSH
9959: LD_INT 19
9961: EQUAL
9962: IFFALSE 9972
// sTank := true ;
9964: LD_ADDR_EXP 69
9968: PUSH
9969: LD_INT 1
9971: ST_TO_ADDR
// if p3 = 20 then
9972: LD_VAR 0 3
9976: PUSH
9977: LD_INT 20
9979: EQUAL
9980: IFFALSE 9990
// sRemote := true ;
9982: LD_ADDR_EXP 70
9986: PUSH
9987: LD_INT 1
9989: ST_TO_ADDR
// if p3 = 21 then
9990: LD_VAR 0 3
9994: PUSH
9995: LD_INT 21
9997: EQUAL
9998: IFFALSE 10008
// sPowell := true ;
10000: LD_ADDR_EXP 71
10004: PUSH
10005: LD_INT 1
10007: ST_TO_ADDR
// if p3 = 22 then
10008: LD_VAR 0 3
10012: PUSH
10013: LD_INT 22
10015: EQUAL
10016: IFFALSE 10026
// sTeleport := true ;
10018: LD_ADDR_EXP 74
10022: PUSH
10023: LD_INT 1
10025: ST_TO_ADDR
// if p3 = 23 then
10026: LD_VAR 0 3
10030: PUSH
10031: LD_INT 23
10033: EQUAL
10034: IFFALSE 10044
// sOilTower := true ;
10036: LD_ADDR_EXP 76
10040: PUSH
10041: LD_INT 1
10043: ST_TO_ADDR
// if p3 = 24 then
10044: LD_VAR 0 3
10048: PUSH
10049: LD_INT 24
10051: EQUAL
10052: IFFALSE 10062
// sShovel := true ;
10054: LD_ADDR_EXP 77
10058: PUSH
10059: LD_INT 1
10061: ST_TO_ADDR
// if p3 = 25 then
10062: LD_VAR 0 3
10066: PUSH
10067: LD_INT 25
10069: EQUAL
10070: IFFALSE 10080
// sSheik := true ;
10072: LD_ADDR_EXP 78
10076: PUSH
10077: LD_INT 1
10079: ST_TO_ADDR
// if p3 = 26 then
10080: LD_VAR 0 3
10084: PUSH
10085: LD_INT 26
10087: EQUAL
10088: IFFALSE 10098
// sEarthquake := true ;
10090: LD_ADDR_EXP 80
10094: PUSH
10095: LD_INT 1
10097: ST_TO_ADDR
// if p3 = 27 then
10098: LD_VAR 0 3
10102: PUSH
10103: LD_INT 27
10105: EQUAL
10106: IFFALSE 10116
// sAI := true ;
10108: LD_ADDR_EXP 81
10112: PUSH
10113: LD_INT 1
10115: ST_TO_ADDR
// if p3 = 28 then
10116: LD_VAR 0 3
10120: PUSH
10121: LD_INT 28
10123: EQUAL
10124: IFFALSE 10134
// sCargo := true ;
10126: LD_ADDR_EXP 84
10130: PUSH
10131: LD_INT 1
10133: ST_TO_ADDR
// if p3 = 29 then
10134: LD_VAR 0 3
10138: PUSH
10139: LD_INT 29
10141: EQUAL
10142: IFFALSE 10152
// sDLaser := true ;
10144: LD_ADDR_EXP 85
10148: PUSH
10149: LD_INT 1
10151: ST_TO_ADDR
// if p3 = 30 then
10152: LD_VAR 0 3
10156: PUSH
10157: LD_INT 30
10159: EQUAL
10160: IFFALSE 10170
// sExchange := true ;
10162: LD_ADDR_EXP 86
10166: PUSH
10167: LD_INT 1
10169: ST_TO_ADDR
// if p3 = 31 then
10170: LD_VAR 0 3
10174: PUSH
10175: LD_INT 31
10177: EQUAL
10178: IFFALSE 10188
// sFac := true ;
10180: LD_ADDR_EXP 87
10184: PUSH
10185: LD_INT 1
10187: ST_TO_ADDR
// if p3 = 32 then
10188: LD_VAR 0 3
10192: PUSH
10193: LD_INT 32
10195: EQUAL
10196: IFFALSE 10206
// sPower := true ;
10198: LD_ADDR_EXP 88
10202: PUSH
10203: LD_INT 1
10205: ST_TO_ADDR
// if p3 = 33 then
10206: LD_VAR 0 3
10210: PUSH
10211: LD_INT 33
10213: EQUAL
10214: IFFALSE 10224
// sRandom := true ;
10216: LD_ADDR_EXP 89
10220: PUSH
10221: LD_INT 1
10223: ST_TO_ADDR
// if p3 = 34 then
10224: LD_VAR 0 3
10228: PUSH
10229: LD_INT 34
10231: EQUAL
10232: IFFALSE 10242
// sShield := true ;
10234: LD_ADDR_EXP 90
10238: PUSH
10239: LD_INT 1
10241: ST_TO_ADDR
// if p3 = 35 then
10242: LD_VAR 0 3
10246: PUSH
10247: LD_INT 35
10249: EQUAL
10250: IFFALSE 10260
// sTime := true ;
10252: LD_ADDR_EXP 91
10256: PUSH
10257: LD_INT 1
10259: ST_TO_ADDR
// if p3 = 36 then
10260: LD_VAR 0 3
10264: PUSH
10265: LD_INT 36
10267: EQUAL
10268: IFFALSE 10278
// sTools := true ;
10270: LD_ADDR_EXP 92
10274: PUSH
10275: LD_INT 1
10277: ST_TO_ADDR
// if p3 = 101 then
10278: LD_VAR 0 3
10282: PUSH
10283: LD_INT 101
10285: EQUAL
10286: IFFALSE 10296
// sSold := true ;
10288: LD_ADDR_EXP 57
10292: PUSH
10293: LD_INT 1
10295: ST_TO_ADDR
// if p3 = 102 then
10296: LD_VAR 0 3
10300: PUSH
10301: LD_INT 102
10303: EQUAL
10304: IFFALSE 10314
// sDiff := true ;
10306: LD_ADDR_EXP 58
10310: PUSH
10311: LD_INT 1
10313: ST_TO_ADDR
// if p3 = 103 then
10314: LD_VAR 0 3
10318: PUSH
10319: LD_INT 103
10321: EQUAL
10322: IFFALSE 10332
// sFog := true ;
10324: LD_ADDR_EXP 61
10328: PUSH
10329: LD_INT 1
10331: ST_TO_ADDR
// if p3 = 104 then
10332: LD_VAR 0 3
10336: PUSH
10337: LD_INT 104
10339: EQUAL
10340: IFFALSE 10350
// sReset := true ;
10342: LD_ADDR_EXP 62
10346: PUSH
10347: LD_INT 1
10349: ST_TO_ADDR
// if p3 = 105 then
10350: LD_VAR 0 3
10354: PUSH
10355: LD_INT 105
10357: EQUAL
10358: IFFALSE 10368
// sSun := true ;
10360: LD_ADDR_EXP 63
10364: PUSH
10365: LD_INT 1
10367: ST_TO_ADDR
// if p3 = 106 then
10368: LD_VAR 0 3
10372: PUSH
10373: LD_INT 106
10375: EQUAL
10376: IFFALSE 10386
// sTiger := true ;
10378: LD_ADDR_EXP 59
10382: PUSH
10383: LD_INT 1
10385: ST_TO_ADDR
// if p3 = 107 then
10386: LD_VAR 0 3
10390: PUSH
10391: LD_INT 107
10393: EQUAL
10394: IFFALSE 10404
// sBomb := true ;
10396: LD_ADDR_EXP 60
10400: PUSH
10401: LD_INT 1
10403: ST_TO_ADDR
// if p3 = 108 then
10404: LD_VAR 0 3
10408: PUSH
10409: LD_INT 108
10411: EQUAL
10412: IFFALSE 10422
// sWound := true ;
10414: LD_ADDR_EXP 68
10418: PUSH
10419: LD_INT 1
10421: ST_TO_ADDR
// if p3 = 109 then
10422: LD_VAR 0 3
10426: PUSH
10427: LD_INT 109
10429: EQUAL
10430: IFFALSE 10440
// sBetray := true ;
10432: LD_ADDR_EXP 72
10436: PUSH
10437: LD_INT 1
10439: ST_TO_ADDR
// if p3 = 110 then
10440: LD_VAR 0 3
10444: PUSH
10445: LD_INT 110
10447: EQUAL
10448: IFFALSE 10458
// sContamin := true ;
10450: LD_ADDR_EXP 73
10454: PUSH
10455: LD_INT 1
10457: ST_TO_ADDR
// if p3 = 111 then
10458: LD_VAR 0 3
10462: PUSH
10463: LD_INT 111
10465: EQUAL
10466: IFFALSE 10476
// sOil := true ;
10468: LD_ADDR_EXP 75
10472: PUSH
10473: LD_INT 1
10475: ST_TO_ADDR
// if p3 = 112 then
10476: LD_VAR 0 3
10480: PUSH
10481: LD_INT 112
10483: EQUAL
10484: IFFALSE 10494
// sStu := true ;
10486: LD_ADDR_EXP 79
10490: PUSH
10491: LD_INT 1
10493: ST_TO_ADDR
// if p3 = 113 then
10494: LD_VAR 0 3
10498: PUSH
10499: LD_INT 113
10501: EQUAL
10502: IFFALSE 10512
// sBazooka := true ;
10504: LD_ADDR_EXP 82
10508: PUSH
10509: LD_INT 1
10511: ST_TO_ADDR
// if p3 = 114 then
10512: LD_VAR 0 3
10516: PUSH
10517: LD_INT 114
10519: EQUAL
10520: IFFALSE 10530
// sMortar := true ;
10522: LD_ADDR_EXP 83
10526: PUSH
10527: LD_INT 1
10529: ST_TO_ADDR
// if p3 = 115 then
10530: LD_VAR 0 3
10534: PUSH
10535: LD_INT 115
10537: EQUAL
10538: IFFALSE 10548
// sRanger := true ;
10540: LD_ADDR_EXP 93
10544: PUSH
10545: LD_INT 1
10547: ST_TO_ADDR
// end ; if p2 = 101 then
10548: LD_VAR 0 2
10552: PUSH
10553: LD_INT 101
10555: EQUAL
10556: IFFALSE 10759
// begin case p3 of 1 :
10558: LD_VAR 0 3
10562: PUSH
10563: LD_INT 1
10565: DOUBLE
10566: EQUAL
10567: IFTRUE 10571
10569: GO 10578
10571: POP
// hHackUnlimitedResources ; 2 :
10572: CALL 20853 0 0
10576: GO 10759
10578: LD_INT 2
10580: DOUBLE
10581: EQUAL
10582: IFTRUE 10586
10584: GO 10593
10586: POP
// hHackSetLevel10 ; 3 :
10587: CALL 20986 0 0
10591: GO 10759
10593: LD_INT 3
10595: DOUBLE
10596: EQUAL
10597: IFTRUE 10601
10599: GO 10608
10601: POP
// hHackSetLevel10YourUnits ; 4 :
10602: CALL 21071 0 0
10606: GO 10759
10608: LD_INT 4
10610: DOUBLE
10611: EQUAL
10612: IFTRUE 10616
10614: GO 10638
10616: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
10617: LD_VAR 0 4
10621: PPUSH
10622: LD_VAR 0 5
10626: PPUSH
10627: LD_VAR 0 6
10631: PPUSH
10632: CALL 21161 0 3
10636: GO 10759
10638: LD_INT 5
10640: DOUBLE
10641: EQUAL
10642: IFTRUE 10646
10644: GO 10653
10646: POP
// hHackSpawnVehicle ; 6 :
10647: CALL 21222 0 0
10651: GO 10759
10653: LD_INT 6
10655: DOUBLE
10656: EQUAL
10657: IFTRUE 10661
10659: GO 10668
10661: POP
// hHackInvincible ; 7 :
10662: CALL 21768 0 0
10666: GO 10759
10668: LD_INT 7
10670: DOUBLE
10671: EQUAL
10672: IFTRUE 10676
10674: GO 10683
10676: POP
// hHackInvisible ; 8 :
10677: CALL 21879 0 0
10681: GO 10759
10683: LD_INT 8
10685: DOUBLE
10686: EQUAL
10687: IFTRUE 10691
10689: GO 10698
10691: POP
// hHackChangeYourSide ; 9 :
10692: CALL 21936 0 0
10696: GO 10759
10698: LD_INT 9
10700: DOUBLE
10701: EQUAL
10702: IFTRUE 10706
10704: GO 10713
10706: POP
// hHackChangeUnitSide ; 10 :
10707: CALL 21978 0 0
10711: GO 10759
10713: LD_INT 10
10715: DOUBLE
10716: EQUAL
10717: IFTRUE 10721
10719: GO 10728
10721: POP
// hHackFog ; 11 :
10722: CALL 22079 0 0
10726: GO 10759
10728: LD_INT 11
10730: DOUBLE
10731: EQUAL
10732: IFTRUE 10736
10734: GO 10743
10736: POP
// hHackApeman ; 12 :
10737: CALL 22094 0 0
10741: GO 10759
10743: LD_INT 12
10745: DOUBLE
10746: EQUAL
10747: IFTRUE 10751
10749: GO 10758
10751: POP
// hHackBoom ; end ;
10752: CALL 22179 0 0
10756: GO 10759
10758: POP
// end ; end ;
10759: PPOPN 6
10761: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
10762: GO 10764
10764: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
10765: LD_STRING initStreamRollete();
10767: PPUSH
10768: CALL_OW 559
// InitStreamMode ;
10772: CALL 10781 0 0
// DefineStreamItems ( ) ;
10776: CALL 11221 0 0
// end ;
10780: END
// function InitStreamMode ; begin
10781: LD_INT 0
10783: PPUSH
// streamModeActive := false ;
10784: LD_ADDR_EXP 40
10788: PUSH
10789: LD_INT 0
10791: ST_TO_ADDR
// normalCounter := 36 ;
10792: LD_ADDR_EXP 41
10796: PUSH
10797: LD_INT 36
10799: ST_TO_ADDR
// hardcoreCounter := 16 ;
10800: LD_ADDR_EXP 42
10804: PUSH
10805: LD_INT 16
10807: ST_TO_ADDR
// sRocket := false ;
10808: LD_ADDR_EXP 45
10812: PUSH
10813: LD_INT 0
10815: ST_TO_ADDR
// sSpeed := false ;
10816: LD_ADDR_EXP 44
10820: PUSH
10821: LD_INT 0
10823: ST_TO_ADDR
// sEngine := false ;
10824: LD_ADDR_EXP 46
10828: PUSH
10829: LD_INT 0
10831: ST_TO_ADDR
// sSpec := false ;
10832: LD_ADDR_EXP 43
10836: PUSH
10837: LD_INT 0
10839: ST_TO_ADDR
// sLevel := false ;
10840: LD_ADDR_EXP 47
10844: PUSH
10845: LD_INT 0
10847: ST_TO_ADDR
// sArmoury := false ;
10848: LD_ADDR_EXP 48
10852: PUSH
10853: LD_INT 0
10855: ST_TO_ADDR
// sRadar := false ;
10856: LD_ADDR_EXP 49
10860: PUSH
10861: LD_INT 0
10863: ST_TO_ADDR
// sBunker := false ;
10864: LD_ADDR_EXP 50
10868: PUSH
10869: LD_INT 0
10871: ST_TO_ADDR
// sHack := false ;
10872: LD_ADDR_EXP 51
10876: PUSH
10877: LD_INT 0
10879: ST_TO_ADDR
// sFire := false ;
10880: LD_ADDR_EXP 52
10884: PUSH
10885: LD_INT 0
10887: ST_TO_ADDR
// sRefresh := false ;
10888: LD_ADDR_EXP 53
10892: PUSH
10893: LD_INT 0
10895: ST_TO_ADDR
// sExp := false ;
10896: LD_ADDR_EXP 54
10900: PUSH
10901: LD_INT 0
10903: ST_TO_ADDR
// sDepot := false ;
10904: LD_ADDR_EXP 55
10908: PUSH
10909: LD_INT 0
10911: ST_TO_ADDR
// sFlag := false ;
10912: LD_ADDR_EXP 56
10916: PUSH
10917: LD_INT 0
10919: ST_TO_ADDR
// sKamikadze := false ;
10920: LD_ADDR_EXP 64
10924: PUSH
10925: LD_INT 0
10927: ST_TO_ADDR
// sTroll := false ;
10928: LD_ADDR_EXP 65
10932: PUSH
10933: LD_INT 0
10935: ST_TO_ADDR
// sSlow := false ;
10936: LD_ADDR_EXP 66
10940: PUSH
10941: LD_INT 0
10943: ST_TO_ADDR
// sLack := false ;
10944: LD_ADDR_EXP 67
10948: PUSH
10949: LD_INT 0
10951: ST_TO_ADDR
// sTank := false ;
10952: LD_ADDR_EXP 69
10956: PUSH
10957: LD_INT 0
10959: ST_TO_ADDR
// sRemote := false ;
10960: LD_ADDR_EXP 70
10964: PUSH
10965: LD_INT 0
10967: ST_TO_ADDR
// sPowell := false ;
10968: LD_ADDR_EXP 71
10972: PUSH
10973: LD_INT 0
10975: ST_TO_ADDR
// sTeleport := false ;
10976: LD_ADDR_EXP 74
10980: PUSH
10981: LD_INT 0
10983: ST_TO_ADDR
// sOilTower := false ;
10984: LD_ADDR_EXP 76
10988: PUSH
10989: LD_INT 0
10991: ST_TO_ADDR
// sShovel := false ;
10992: LD_ADDR_EXP 77
10996: PUSH
10997: LD_INT 0
10999: ST_TO_ADDR
// sSheik := false ;
11000: LD_ADDR_EXP 78
11004: PUSH
11005: LD_INT 0
11007: ST_TO_ADDR
// sEarthquake := false ;
11008: LD_ADDR_EXP 80
11012: PUSH
11013: LD_INT 0
11015: ST_TO_ADDR
// sAI := false ;
11016: LD_ADDR_EXP 81
11020: PUSH
11021: LD_INT 0
11023: ST_TO_ADDR
// sCargo := false ;
11024: LD_ADDR_EXP 84
11028: PUSH
11029: LD_INT 0
11031: ST_TO_ADDR
// sDLaser := false ;
11032: LD_ADDR_EXP 85
11036: PUSH
11037: LD_INT 0
11039: ST_TO_ADDR
// sExchange := false ;
11040: LD_ADDR_EXP 86
11044: PUSH
11045: LD_INT 0
11047: ST_TO_ADDR
// sFac := false ;
11048: LD_ADDR_EXP 87
11052: PUSH
11053: LD_INT 0
11055: ST_TO_ADDR
// sPower := false ;
11056: LD_ADDR_EXP 88
11060: PUSH
11061: LD_INT 0
11063: ST_TO_ADDR
// sRandom := false ;
11064: LD_ADDR_EXP 89
11068: PUSH
11069: LD_INT 0
11071: ST_TO_ADDR
// sShield := false ;
11072: LD_ADDR_EXP 90
11076: PUSH
11077: LD_INT 0
11079: ST_TO_ADDR
// sTime := false ;
11080: LD_ADDR_EXP 91
11084: PUSH
11085: LD_INT 0
11087: ST_TO_ADDR
// sTools := false ;
11088: LD_ADDR_EXP 92
11092: PUSH
11093: LD_INT 0
11095: ST_TO_ADDR
// sSold := false ;
11096: LD_ADDR_EXP 57
11100: PUSH
11101: LD_INT 0
11103: ST_TO_ADDR
// sDiff := false ;
11104: LD_ADDR_EXP 58
11108: PUSH
11109: LD_INT 0
11111: ST_TO_ADDR
// sFog := false ;
11112: LD_ADDR_EXP 61
11116: PUSH
11117: LD_INT 0
11119: ST_TO_ADDR
// sReset := false ;
11120: LD_ADDR_EXP 62
11124: PUSH
11125: LD_INT 0
11127: ST_TO_ADDR
// sSun := false ;
11128: LD_ADDR_EXP 63
11132: PUSH
11133: LD_INT 0
11135: ST_TO_ADDR
// sTiger := false ;
11136: LD_ADDR_EXP 59
11140: PUSH
11141: LD_INT 0
11143: ST_TO_ADDR
// sBomb := false ;
11144: LD_ADDR_EXP 60
11148: PUSH
11149: LD_INT 0
11151: ST_TO_ADDR
// sWound := false ;
11152: LD_ADDR_EXP 68
11156: PUSH
11157: LD_INT 0
11159: ST_TO_ADDR
// sBetray := false ;
11160: LD_ADDR_EXP 72
11164: PUSH
11165: LD_INT 0
11167: ST_TO_ADDR
// sContamin := false ;
11168: LD_ADDR_EXP 73
11172: PUSH
11173: LD_INT 0
11175: ST_TO_ADDR
// sOil := false ;
11176: LD_ADDR_EXP 75
11180: PUSH
11181: LD_INT 0
11183: ST_TO_ADDR
// sStu := false ;
11184: LD_ADDR_EXP 79
11188: PUSH
11189: LD_INT 0
11191: ST_TO_ADDR
// sBazooka := false ;
11192: LD_ADDR_EXP 82
11196: PUSH
11197: LD_INT 0
11199: ST_TO_ADDR
// sMortar := false ;
11200: LD_ADDR_EXP 83
11204: PUSH
11205: LD_INT 0
11207: ST_TO_ADDR
// sRanger := false ;
11208: LD_ADDR_EXP 93
11212: PUSH
11213: LD_INT 0
11215: ST_TO_ADDR
// end ;
11216: LD_VAR 0 1
11220: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
11221: LD_INT 0
11223: PPUSH
11224: PPUSH
11225: PPUSH
11226: PPUSH
11227: PPUSH
// result := [ ] ;
11228: LD_ADDR_VAR 0 1
11232: PUSH
11233: EMPTY
11234: ST_TO_ADDR
// if campaign_id = 1 then
11235: LD_OWVAR 69
11239: PUSH
11240: LD_INT 1
11242: EQUAL
11243: IFFALSE 14181
// begin case mission_number of 1 :
11245: LD_OWVAR 70
11249: PUSH
11250: LD_INT 1
11252: DOUBLE
11253: EQUAL
11254: IFTRUE 11258
11256: GO 11322
11258: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
11259: LD_ADDR_VAR 0 1
11263: PUSH
11264: LD_INT 2
11266: PUSH
11267: LD_INT 4
11269: PUSH
11270: LD_INT 11
11272: PUSH
11273: LD_INT 12
11275: PUSH
11276: LD_INT 15
11278: PUSH
11279: LD_INT 16
11281: PUSH
11282: LD_INT 22
11284: PUSH
11285: LD_INT 23
11287: PUSH
11288: LD_INT 26
11290: PUSH
11291: EMPTY
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: PUSH
11302: LD_INT 101
11304: PUSH
11305: LD_INT 102
11307: PUSH
11308: LD_INT 106
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: LIST
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: ST_TO_ADDR
11320: GO 14179
11322: LD_INT 2
11324: DOUBLE
11325: EQUAL
11326: IFTRUE 11330
11328: GO 11402
11330: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
11331: LD_ADDR_VAR 0 1
11335: PUSH
11336: LD_INT 2
11338: PUSH
11339: LD_INT 4
11341: PUSH
11342: LD_INT 11
11344: PUSH
11345: LD_INT 12
11347: PUSH
11348: LD_INT 15
11350: PUSH
11351: LD_INT 16
11353: PUSH
11354: LD_INT 22
11356: PUSH
11357: LD_INT 23
11359: PUSH
11360: LD_INT 26
11362: PUSH
11363: EMPTY
11364: LIST
11365: LIST
11366: LIST
11367: LIST
11368: LIST
11369: LIST
11370: LIST
11371: LIST
11372: LIST
11373: PUSH
11374: LD_INT 101
11376: PUSH
11377: LD_INT 102
11379: PUSH
11380: LD_INT 105
11382: PUSH
11383: LD_INT 106
11385: PUSH
11386: LD_INT 108
11388: PUSH
11389: EMPTY
11390: LIST
11391: LIST
11392: LIST
11393: LIST
11394: LIST
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: ST_TO_ADDR
11400: GO 14179
11402: LD_INT 3
11404: DOUBLE
11405: EQUAL
11406: IFTRUE 11410
11408: GO 11486
11410: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
11411: LD_ADDR_VAR 0 1
11415: PUSH
11416: LD_INT 2
11418: PUSH
11419: LD_INT 4
11421: PUSH
11422: LD_INT 5
11424: PUSH
11425: LD_INT 11
11427: PUSH
11428: LD_INT 12
11430: PUSH
11431: LD_INT 15
11433: PUSH
11434: LD_INT 16
11436: PUSH
11437: LD_INT 22
11439: PUSH
11440: LD_INT 26
11442: PUSH
11443: LD_INT 36
11445: PUSH
11446: EMPTY
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: PUSH
11458: LD_INT 101
11460: PUSH
11461: LD_INT 102
11463: PUSH
11464: LD_INT 105
11466: PUSH
11467: LD_INT 106
11469: PUSH
11470: LD_INT 108
11472: PUSH
11473: EMPTY
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: ST_TO_ADDR
11484: GO 14179
11486: LD_INT 4
11488: DOUBLE
11489: EQUAL
11490: IFTRUE 11494
11492: GO 11578
11494: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
11495: LD_ADDR_VAR 0 1
11499: PUSH
11500: LD_INT 2
11502: PUSH
11503: LD_INT 4
11505: PUSH
11506: LD_INT 5
11508: PUSH
11509: LD_INT 8
11511: PUSH
11512: LD_INT 11
11514: PUSH
11515: LD_INT 12
11517: PUSH
11518: LD_INT 15
11520: PUSH
11521: LD_INT 16
11523: PUSH
11524: LD_INT 22
11526: PUSH
11527: LD_INT 23
11529: PUSH
11530: LD_INT 26
11532: PUSH
11533: LD_INT 36
11535: PUSH
11536: EMPTY
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: PUSH
11550: LD_INT 101
11552: PUSH
11553: LD_INT 102
11555: PUSH
11556: LD_INT 105
11558: PUSH
11559: LD_INT 106
11561: PUSH
11562: LD_INT 108
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: ST_TO_ADDR
11576: GO 14179
11578: LD_INT 5
11580: DOUBLE
11581: EQUAL
11582: IFTRUE 11586
11584: GO 11686
11586: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
11587: LD_ADDR_VAR 0 1
11591: PUSH
11592: LD_INT 2
11594: PUSH
11595: LD_INT 4
11597: PUSH
11598: LD_INT 5
11600: PUSH
11601: LD_INT 6
11603: PUSH
11604: LD_INT 8
11606: PUSH
11607: LD_INT 11
11609: PUSH
11610: LD_INT 12
11612: PUSH
11613: LD_INT 15
11615: PUSH
11616: LD_INT 16
11618: PUSH
11619: LD_INT 22
11621: PUSH
11622: LD_INT 23
11624: PUSH
11625: LD_INT 25
11627: PUSH
11628: LD_INT 26
11630: PUSH
11631: LD_INT 36
11633: PUSH
11634: EMPTY
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: LIST
11649: PUSH
11650: LD_INT 101
11652: PUSH
11653: LD_INT 102
11655: PUSH
11656: LD_INT 105
11658: PUSH
11659: LD_INT 106
11661: PUSH
11662: LD_INT 108
11664: PUSH
11665: LD_INT 109
11667: PUSH
11668: LD_INT 112
11670: PUSH
11671: EMPTY
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: ST_TO_ADDR
11684: GO 14179
11686: LD_INT 6
11688: DOUBLE
11689: EQUAL
11690: IFTRUE 11694
11692: GO 11814
11694: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
11695: LD_ADDR_VAR 0 1
11699: PUSH
11700: LD_INT 2
11702: PUSH
11703: LD_INT 4
11705: PUSH
11706: LD_INT 5
11708: PUSH
11709: LD_INT 6
11711: PUSH
11712: LD_INT 8
11714: PUSH
11715: LD_INT 11
11717: PUSH
11718: LD_INT 12
11720: PUSH
11721: LD_INT 15
11723: PUSH
11724: LD_INT 16
11726: PUSH
11727: LD_INT 20
11729: PUSH
11730: LD_INT 21
11732: PUSH
11733: LD_INT 22
11735: PUSH
11736: LD_INT 23
11738: PUSH
11739: LD_INT 25
11741: PUSH
11742: LD_INT 26
11744: PUSH
11745: LD_INT 30
11747: PUSH
11748: LD_INT 31
11750: PUSH
11751: LD_INT 32
11753: PUSH
11754: LD_INT 36
11756: PUSH
11757: EMPTY
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: PUSH
11778: LD_INT 101
11780: PUSH
11781: LD_INT 102
11783: PUSH
11784: LD_INT 105
11786: PUSH
11787: LD_INT 106
11789: PUSH
11790: LD_INT 108
11792: PUSH
11793: LD_INT 109
11795: PUSH
11796: LD_INT 112
11798: PUSH
11799: EMPTY
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: ST_TO_ADDR
11812: GO 14179
11814: LD_INT 7
11816: DOUBLE
11817: EQUAL
11818: IFTRUE 11822
11820: GO 11922
11822: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
11823: LD_ADDR_VAR 0 1
11827: PUSH
11828: LD_INT 2
11830: PUSH
11831: LD_INT 4
11833: PUSH
11834: LD_INT 5
11836: PUSH
11837: LD_INT 7
11839: PUSH
11840: LD_INT 11
11842: PUSH
11843: LD_INT 12
11845: PUSH
11846: LD_INT 15
11848: PUSH
11849: LD_INT 16
11851: PUSH
11852: LD_INT 20
11854: PUSH
11855: LD_INT 21
11857: PUSH
11858: LD_INT 22
11860: PUSH
11861: LD_INT 23
11863: PUSH
11864: LD_INT 25
11866: PUSH
11867: LD_INT 26
11869: PUSH
11870: EMPTY
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: PUSH
11886: LD_INT 101
11888: PUSH
11889: LD_INT 102
11891: PUSH
11892: LD_INT 103
11894: PUSH
11895: LD_INT 105
11897: PUSH
11898: LD_INT 106
11900: PUSH
11901: LD_INT 108
11903: PUSH
11904: LD_INT 112
11906: PUSH
11907: EMPTY
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: ST_TO_ADDR
11920: GO 14179
11922: LD_INT 8
11924: DOUBLE
11925: EQUAL
11926: IFTRUE 11930
11928: GO 12058
11930: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
11931: LD_ADDR_VAR 0 1
11935: PUSH
11936: LD_INT 2
11938: PUSH
11939: LD_INT 4
11941: PUSH
11942: LD_INT 5
11944: PUSH
11945: LD_INT 6
11947: PUSH
11948: LD_INT 7
11950: PUSH
11951: LD_INT 8
11953: PUSH
11954: LD_INT 11
11956: PUSH
11957: LD_INT 12
11959: PUSH
11960: LD_INT 15
11962: PUSH
11963: LD_INT 16
11965: PUSH
11966: LD_INT 20
11968: PUSH
11969: LD_INT 21
11971: PUSH
11972: LD_INT 22
11974: PUSH
11975: LD_INT 23
11977: PUSH
11978: LD_INT 25
11980: PUSH
11981: LD_INT 26
11983: PUSH
11984: LD_INT 30
11986: PUSH
11987: LD_INT 31
11989: PUSH
11990: LD_INT 32
11992: PUSH
11993: LD_INT 36
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: PUSH
12018: LD_INT 101
12020: PUSH
12021: LD_INT 102
12023: PUSH
12024: LD_INT 103
12026: PUSH
12027: LD_INT 105
12029: PUSH
12030: LD_INT 106
12032: PUSH
12033: LD_INT 108
12035: PUSH
12036: LD_INT 109
12038: PUSH
12039: LD_INT 112
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: ST_TO_ADDR
12056: GO 14179
12058: LD_INT 9
12060: DOUBLE
12061: EQUAL
12062: IFTRUE 12066
12064: GO 12202
12066: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
12067: LD_ADDR_VAR 0 1
12071: PUSH
12072: LD_INT 2
12074: PUSH
12075: LD_INT 4
12077: PUSH
12078: LD_INT 5
12080: PUSH
12081: LD_INT 6
12083: PUSH
12084: LD_INT 7
12086: PUSH
12087: LD_INT 8
12089: PUSH
12090: LD_INT 11
12092: PUSH
12093: LD_INT 12
12095: PUSH
12096: LD_INT 15
12098: PUSH
12099: LD_INT 16
12101: PUSH
12102: LD_INT 20
12104: PUSH
12105: LD_INT 21
12107: PUSH
12108: LD_INT 22
12110: PUSH
12111: LD_INT 23
12113: PUSH
12114: LD_INT 25
12116: PUSH
12117: LD_INT 26
12119: PUSH
12120: LD_INT 28
12122: PUSH
12123: LD_INT 30
12125: PUSH
12126: LD_INT 31
12128: PUSH
12129: LD_INT 32
12131: PUSH
12132: LD_INT 36
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: PUSH
12158: LD_INT 101
12160: PUSH
12161: LD_INT 102
12163: PUSH
12164: LD_INT 103
12166: PUSH
12167: LD_INT 105
12169: PUSH
12170: LD_INT 106
12172: PUSH
12173: LD_INT 108
12175: PUSH
12176: LD_INT 109
12178: PUSH
12179: LD_INT 112
12181: PUSH
12182: LD_INT 114
12184: PUSH
12185: EMPTY
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: ST_TO_ADDR
12200: GO 14179
12202: LD_INT 10
12204: DOUBLE
12205: EQUAL
12206: IFTRUE 12210
12208: GO 12394
12210: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
12211: LD_ADDR_VAR 0 1
12215: PUSH
12216: LD_INT 2
12218: PUSH
12219: LD_INT 4
12221: PUSH
12222: LD_INT 5
12224: PUSH
12225: LD_INT 6
12227: PUSH
12228: LD_INT 7
12230: PUSH
12231: LD_INT 8
12233: PUSH
12234: LD_INT 9
12236: PUSH
12237: LD_INT 10
12239: PUSH
12240: LD_INT 11
12242: PUSH
12243: LD_INT 12
12245: PUSH
12246: LD_INT 13
12248: PUSH
12249: LD_INT 14
12251: PUSH
12252: LD_INT 15
12254: PUSH
12255: LD_INT 16
12257: PUSH
12258: LD_INT 17
12260: PUSH
12261: LD_INT 18
12263: PUSH
12264: LD_INT 19
12266: PUSH
12267: LD_INT 20
12269: PUSH
12270: LD_INT 21
12272: PUSH
12273: LD_INT 22
12275: PUSH
12276: LD_INT 23
12278: PUSH
12279: LD_INT 24
12281: PUSH
12282: LD_INT 25
12284: PUSH
12285: LD_INT 26
12287: PUSH
12288: LD_INT 28
12290: PUSH
12291: LD_INT 30
12293: PUSH
12294: LD_INT 31
12296: PUSH
12297: LD_INT 32
12299: PUSH
12300: LD_INT 36
12302: PUSH
12303: EMPTY
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: PUSH
12334: LD_INT 101
12336: PUSH
12337: LD_INT 102
12339: PUSH
12340: LD_INT 103
12342: PUSH
12343: LD_INT 104
12345: PUSH
12346: LD_INT 105
12348: PUSH
12349: LD_INT 106
12351: PUSH
12352: LD_INT 107
12354: PUSH
12355: LD_INT 108
12357: PUSH
12358: LD_INT 109
12360: PUSH
12361: LD_INT 110
12363: PUSH
12364: LD_INT 111
12366: PUSH
12367: LD_INT 112
12369: PUSH
12370: LD_INT 114
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: PUSH
12388: EMPTY
12389: LIST
12390: LIST
12391: ST_TO_ADDR
12392: GO 14179
12394: LD_INT 11
12396: DOUBLE
12397: EQUAL
12398: IFTRUE 12402
12400: GO 12594
12402: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
12403: LD_ADDR_VAR 0 1
12407: PUSH
12408: LD_INT 2
12410: PUSH
12411: LD_INT 3
12413: PUSH
12414: LD_INT 4
12416: PUSH
12417: LD_INT 5
12419: PUSH
12420: LD_INT 6
12422: PUSH
12423: LD_INT 7
12425: PUSH
12426: LD_INT 8
12428: PUSH
12429: LD_INT 9
12431: PUSH
12432: LD_INT 10
12434: PUSH
12435: LD_INT 11
12437: PUSH
12438: LD_INT 12
12440: PUSH
12441: LD_INT 13
12443: PUSH
12444: LD_INT 14
12446: PUSH
12447: LD_INT 15
12449: PUSH
12450: LD_INT 16
12452: PUSH
12453: LD_INT 17
12455: PUSH
12456: LD_INT 18
12458: PUSH
12459: LD_INT 19
12461: PUSH
12462: LD_INT 20
12464: PUSH
12465: LD_INT 21
12467: PUSH
12468: LD_INT 22
12470: PUSH
12471: LD_INT 23
12473: PUSH
12474: LD_INT 24
12476: PUSH
12477: LD_INT 25
12479: PUSH
12480: LD_INT 26
12482: PUSH
12483: LD_INT 28
12485: PUSH
12486: LD_INT 30
12488: PUSH
12489: LD_INT 31
12491: PUSH
12492: LD_INT 32
12494: PUSH
12495: LD_INT 34
12497: PUSH
12498: LD_INT 36
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: PUSH
12534: LD_INT 101
12536: PUSH
12537: LD_INT 102
12539: PUSH
12540: LD_INT 103
12542: PUSH
12543: LD_INT 104
12545: PUSH
12546: LD_INT 105
12548: PUSH
12549: LD_INT 106
12551: PUSH
12552: LD_INT 107
12554: PUSH
12555: LD_INT 108
12557: PUSH
12558: LD_INT 109
12560: PUSH
12561: LD_INT 110
12563: PUSH
12564: LD_INT 111
12566: PUSH
12567: LD_INT 112
12569: PUSH
12570: LD_INT 114
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: PUSH
12588: EMPTY
12589: LIST
12590: LIST
12591: ST_TO_ADDR
12592: GO 14179
12594: LD_INT 12
12596: DOUBLE
12597: EQUAL
12598: IFTRUE 12602
12600: GO 12810
12602: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
12603: LD_ADDR_VAR 0 1
12607: PUSH
12608: LD_INT 1
12610: PUSH
12611: LD_INT 2
12613: PUSH
12614: LD_INT 3
12616: PUSH
12617: LD_INT 4
12619: PUSH
12620: LD_INT 5
12622: PUSH
12623: LD_INT 6
12625: PUSH
12626: LD_INT 7
12628: PUSH
12629: LD_INT 8
12631: PUSH
12632: LD_INT 9
12634: PUSH
12635: LD_INT 10
12637: PUSH
12638: LD_INT 11
12640: PUSH
12641: LD_INT 12
12643: PUSH
12644: LD_INT 13
12646: PUSH
12647: LD_INT 14
12649: PUSH
12650: LD_INT 15
12652: PUSH
12653: LD_INT 16
12655: PUSH
12656: LD_INT 17
12658: PUSH
12659: LD_INT 18
12661: PUSH
12662: LD_INT 19
12664: PUSH
12665: LD_INT 20
12667: PUSH
12668: LD_INT 21
12670: PUSH
12671: LD_INT 22
12673: PUSH
12674: LD_INT 23
12676: PUSH
12677: LD_INT 24
12679: PUSH
12680: LD_INT 25
12682: PUSH
12683: LD_INT 26
12685: PUSH
12686: LD_INT 27
12688: PUSH
12689: LD_INT 28
12691: PUSH
12692: LD_INT 30
12694: PUSH
12695: LD_INT 31
12697: PUSH
12698: LD_INT 32
12700: PUSH
12701: LD_INT 33
12703: PUSH
12704: LD_INT 34
12706: PUSH
12707: LD_INT 36
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: PUSH
12746: LD_INT 101
12748: PUSH
12749: LD_INT 102
12751: PUSH
12752: LD_INT 103
12754: PUSH
12755: LD_INT 104
12757: PUSH
12758: LD_INT 105
12760: PUSH
12761: LD_INT 106
12763: PUSH
12764: LD_INT 107
12766: PUSH
12767: LD_INT 108
12769: PUSH
12770: LD_INT 109
12772: PUSH
12773: LD_INT 110
12775: PUSH
12776: LD_INT 111
12778: PUSH
12779: LD_INT 112
12781: PUSH
12782: LD_INT 113
12784: PUSH
12785: LD_INT 114
12787: PUSH
12788: EMPTY
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: PUSH
12804: EMPTY
12805: LIST
12806: LIST
12807: ST_TO_ADDR
12808: GO 14179
12810: LD_INT 13
12812: DOUBLE
12813: EQUAL
12814: IFTRUE 12818
12816: GO 13014
12818: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
12819: LD_ADDR_VAR 0 1
12823: PUSH
12824: LD_INT 1
12826: PUSH
12827: LD_INT 2
12829: PUSH
12830: LD_INT 3
12832: PUSH
12833: LD_INT 4
12835: PUSH
12836: LD_INT 5
12838: PUSH
12839: LD_INT 8
12841: PUSH
12842: LD_INT 9
12844: PUSH
12845: LD_INT 10
12847: PUSH
12848: LD_INT 11
12850: PUSH
12851: LD_INT 12
12853: PUSH
12854: LD_INT 14
12856: PUSH
12857: LD_INT 15
12859: PUSH
12860: LD_INT 16
12862: PUSH
12863: LD_INT 17
12865: PUSH
12866: LD_INT 18
12868: PUSH
12869: LD_INT 19
12871: PUSH
12872: LD_INT 20
12874: PUSH
12875: LD_INT 21
12877: PUSH
12878: LD_INT 22
12880: PUSH
12881: LD_INT 23
12883: PUSH
12884: LD_INT 24
12886: PUSH
12887: LD_INT 25
12889: PUSH
12890: LD_INT 26
12892: PUSH
12893: LD_INT 27
12895: PUSH
12896: LD_INT 28
12898: PUSH
12899: LD_INT 30
12901: PUSH
12902: LD_INT 31
12904: PUSH
12905: LD_INT 32
12907: PUSH
12908: LD_INT 33
12910: PUSH
12911: LD_INT 34
12913: PUSH
12914: LD_INT 36
12916: PUSH
12917: EMPTY
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: PUSH
12950: LD_INT 101
12952: PUSH
12953: LD_INT 102
12955: PUSH
12956: LD_INT 103
12958: PUSH
12959: LD_INT 104
12961: PUSH
12962: LD_INT 105
12964: PUSH
12965: LD_INT 106
12967: PUSH
12968: LD_INT 107
12970: PUSH
12971: LD_INT 108
12973: PUSH
12974: LD_INT 109
12976: PUSH
12977: LD_INT 110
12979: PUSH
12980: LD_INT 111
12982: PUSH
12983: LD_INT 112
12985: PUSH
12986: LD_INT 113
12988: PUSH
12989: LD_INT 114
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: ST_TO_ADDR
13012: GO 14179
13014: LD_INT 14
13016: DOUBLE
13017: EQUAL
13018: IFTRUE 13022
13020: GO 13234
13022: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
13023: LD_ADDR_VAR 0 1
13027: PUSH
13028: LD_INT 1
13030: PUSH
13031: LD_INT 2
13033: PUSH
13034: LD_INT 3
13036: PUSH
13037: LD_INT 4
13039: PUSH
13040: LD_INT 5
13042: PUSH
13043: LD_INT 6
13045: PUSH
13046: LD_INT 7
13048: PUSH
13049: LD_INT 8
13051: PUSH
13052: LD_INT 9
13054: PUSH
13055: LD_INT 10
13057: PUSH
13058: LD_INT 11
13060: PUSH
13061: LD_INT 12
13063: PUSH
13064: LD_INT 13
13066: PUSH
13067: LD_INT 14
13069: PUSH
13070: LD_INT 15
13072: PUSH
13073: LD_INT 16
13075: PUSH
13076: LD_INT 17
13078: PUSH
13079: LD_INT 18
13081: PUSH
13082: LD_INT 19
13084: PUSH
13085: LD_INT 20
13087: PUSH
13088: LD_INT 21
13090: PUSH
13091: LD_INT 22
13093: PUSH
13094: LD_INT 23
13096: PUSH
13097: LD_INT 24
13099: PUSH
13100: LD_INT 25
13102: PUSH
13103: LD_INT 26
13105: PUSH
13106: LD_INT 27
13108: PUSH
13109: LD_INT 28
13111: PUSH
13112: LD_INT 29
13114: PUSH
13115: LD_INT 30
13117: PUSH
13118: LD_INT 31
13120: PUSH
13121: LD_INT 32
13123: PUSH
13124: LD_INT 33
13126: PUSH
13127: LD_INT 34
13129: PUSH
13130: LD_INT 36
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: PUSH
13170: LD_INT 101
13172: PUSH
13173: LD_INT 102
13175: PUSH
13176: LD_INT 103
13178: PUSH
13179: LD_INT 104
13181: PUSH
13182: LD_INT 105
13184: PUSH
13185: LD_INT 106
13187: PUSH
13188: LD_INT 107
13190: PUSH
13191: LD_INT 108
13193: PUSH
13194: LD_INT 109
13196: PUSH
13197: LD_INT 110
13199: PUSH
13200: LD_INT 111
13202: PUSH
13203: LD_INT 112
13205: PUSH
13206: LD_INT 113
13208: PUSH
13209: LD_INT 114
13211: PUSH
13212: EMPTY
13213: LIST
13214: LIST
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: ST_TO_ADDR
13232: GO 14179
13234: LD_INT 15
13236: DOUBLE
13237: EQUAL
13238: IFTRUE 13242
13240: GO 13454
13242: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
13243: LD_ADDR_VAR 0 1
13247: PUSH
13248: LD_INT 1
13250: PUSH
13251: LD_INT 2
13253: PUSH
13254: LD_INT 3
13256: PUSH
13257: LD_INT 4
13259: PUSH
13260: LD_INT 5
13262: PUSH
13263: LD_INT 6
13265: PUSH
13266: LD_INT 7
13268: PUSH
13269: LD_INT 8
13271: PUSH
13272: LD_INT 9
13274: PUSH
13275: LD_INT 10
13277: PUSH
13278: LD_INT 11
13280: PUSH
13281: LD_INT 12
13283: PUSH
13284: LD_INT 13
13286: PUSH
13287: LD_INT 14
13289: PUSH
13290: LD_INT 15
13292: PUSH
13293: LD_INT 16
13295: PUSH
13296: LD_INT 17
13298: PUSH
13299: LD_INT 18
13301: PUSH
13302: LD_INT 19
13304: PUSH
13305: LD_INT 20
13307: PUSH
13308: LD_INT 21
13310: PUSH
13311: LD_INT 22
13313: PUSH
13314: LD_INT 23
13316: PUSH
13317: LD_INT 24
13319: PUSH
13320: LD_INT 25
13322: PUSH
13323: LD_INT 26
13325: PUSH
13326: LD_INT 27
13328: PUSH
13329: LD_INT 28
13331: PUSH
13332: LD_INT 29
13334: PUSH
13335: LD_INT 30
13337: PUSH
13338: LD_INT 31
13340: PUSH
13341: LD_INT 32
13343: PUSH
13344: LD_INT 33
13346: PUSH
13347: LD_INT 34
13349: PUSH
13350: LD_INT 36
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: PUSH
13390: LD_INT 101
13392: PUSH
13393: LD_INT 102
13395: PUSH
13396: LD_INT 103
13398: PUSH
13399: LD_INT 104
13401: PUSH
13402: LD_INT 105
13404: PUSH
13405: LD_INT 106
13407: PUSH
13408: LD_INT 107
13410: PUSH
13411: LD_INT 108
13413: PUSH
13414: LD_INT 109
13416: PUSH
13417: LD_INT 110
13419: PUSH
13420: LD_INT 111
13422: PUSH
13423: LD_INT 112
13425: PUSH
13426: LD_INT 113
13428: PUSH
13429: LD_INT 114
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: PUSH
13448: EMPTY
13449: LIST
13450: LIST
13451: ST_TO_ADDR
13452: GO 14179
13454: LD_INT 16
13456: DOUBLE
13457: EQUAL
13458: IFTRUE 13462
13460: GO 13586
13462: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
13463: LD_ADDR_VAR 0 1
13467: PUSH
13468: LD_INT 2
13470: PUSH
13471: LD_INT 4
13473: PUSH
13474: LD_INT 5
13476: PUSH
13477: LD_INT 7
13479: PUSH
13480: LD_INT 11
13482: PUSH
13483: LD_INT 12
13485: PUSH
13486: LD_INT 15
13488: PUSH
13489: LD_INT 16
13491: PUSH
13492: LD_INT 20
13494: PUSH
13495: LD_INT 21
13497: PUSH
13498: LD_INT 22
13500: PUSH
13501: LD_INT 23
13503: PUSH
13504: LD_INT 25
13506: PUSH
13507: LD_INT 26
13509: PUSH
13510: LD_INT 30
13512: PUSH
13513: LD_INT 31
13515: PUSH
13516: LD_INT 32
13518: PUSH
13519: LD_INT 33
13521: PUSH
13522: LD_INT 34
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: PUSH
13546: LD_INT 101
13548: PUSH
13549: LD_INT 102
13551: PUSH
13552: LD_INT 103
13554: PUSH
13555: LD_INT 106
13557: PUSH
13558: LD_INT 108
13560: PUSH
13561: LD_INT 112
13563: PUSH
13564: LD_INT 113
13566: PUSH
13567: LD_INT 114
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: ST_TO_ADDR
13584: GO 14179
13586: LD_INT 17
13588: DOUBLE
13589: EQUAL
13590: IFTRUE 13594
13592: GO 13806
13594: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
13595: LD_ADDR_VAR 0 1
13599: PUSH
13600: LD_INT 1
13602: PUSH
13603: LD_INT 2
13605: PUSH
13606: LD_INT 3
13608: PUSH
13609: LD_INT 4
13611: PUSH
13612: LD_INT 5
13614: PUSH
13615: LD_INT 6
13617: PUSH
13618: LD_INT 7
13620: PUSH
13621: LD_INT 8
13623: PUSH
13624: LD_INT 9
13626: PUSH
13627: LD_INT 10
13629: PUSH
13630: LD_INT 11
13632: PUSH
13633: LD_INT 12
13635: PUSH
13636: LD_INT 13
13638: PUSH
13639: LD_INT 14
13641: PUSH
13642: LD_INT 15
13644: PUSH
13645: LD_INT 16
13647: PUSH
13648: LD_INT 17
13650: PUSH
13651: LD_INT 18
13653: PUSH
13654: LD_INT 19
13656: PUSH
13657: LD_INT 20
13659: PUSH
13660: LD_INT 21
13662: PUSH
13663: LD_INT 22
13665: PUSH
13666: LD_INT 23
13668: PUSH
13669: LD_INT 24
13671: PUSH
13672: LD_INT 25
13674: PUSH
13675: LD_INT 26
13677: PUSH
13678: LD_INT 27
13680: PUSH
13681: LD_INT 28
13683: PUSH
13684: LD_INT 29
13686: PUSH
13687: LD_INT 30
13689: PUSH
13690: LD_INT 31
13692: PUSH
13693: LD_INT 32
13695: PUSH
13696: LD_INT 33
13698: PUSH
13699: LD_INT 34
13701: PUSH
13702: LD_INT 36
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: PUSH
13742: LD_INT 101
13744: PUSH
13745: LD_INT 102
13747: PUSH
13748: LD_INT 103
13750: PUSH
13751: LD_INT 104
13753: PUSH
13754: LD_INT 105
13756: PUSH
13757: LD_INT 106
13759: PUSH
13760: LD_INT 107
13762: PUSH
13763: LD_INT 108
13765: PUSH
13766: LD_INT 109
13768: PUSH
13769: LD_INT 110
13771: PUSH
13772: LD_INT 111
13774: PUSH
13775: LD_INT 112
13777: PUSH
13778: LD_INT 113
13780: PUSH
13781: LD_INT 114
13783: PUSH
13784: EMPTY
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: ST_TO_ADDR
13804: GO 14179
13806: LD_INT 18
13808: DOUBLE
13809: EQUAL
13810: IFTRUE 13814
13812: GO 13950
13814: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
13815: LD_ADDR_VAR 0 1
13819: PUSH
13820: LD_INT 2
13822: PUSH
13823: LD_INT 4
13825: PUSH
13826: LD_INT 5
13828: PUSH
13829: LD_INT 7
13831: PUSH
13832: LD_INT 11
13834: PUSH
13835: LD_INT 12
13837: PUSH
13838: LD_INT 15
13840: PUSH
13841: LD_INT 16
13843: PUSH
13844: LD_INT 20
13846: PUSH
13847: LD_INT 21
13849: PUSH
13850: LD_INT 22
13852: PUSH
13853: LD_INT 23
13855: PUSH
13856: LD_INT 25
13858: PUSH
13859: LD_INT 26
13861: PUSH
13862: LD_INT 30
13864: PUSH
13865: LD_INT 31
13867: PUSH
13868: LD_INT 32
13870: PUSH
13871: LD_INT 33
13873: PUSH
13874: LD_INT 34
13876: PUSH
13877: LD_INT 35
13879: PUSH
13880: LD_INT 36
13882: PUSH
13883: EMPTY
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: PUSH
13906: LD_INT 101
13908: PUSH
13909: LD_INT 102
13911: PUSH
13912: LD_INT 103
13914: PUSH
13915: LD_INT 106
13917: PUSH
13918: LD_INT 108
13920: PUSH
13921: LD_INT 112
13923: PUSH
13924: LD_INT 113
13926: PUSH
13927: LD_INT 114
13929: PUSH
13930: LD_INT 115
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: LIST
13937: LIST
13938: LIST
13939: LIST
13940: LIST
13941: LIST
13942: LIST
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: ST_TO_ADDR
13948: GO 14179
13950: LD_INT 19
13952: DOUBLE
13953: EQUAL
13954: IFTRUE 13958
13956: GO 14178
13958: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
13959: LD_ADDR_VAR 0 1
13963: PUSH
13964: LD_INT 1
13966: PUSH
13967: LD_INT 2
13969: PUSH
13970: LD_INT 3
13972: PUSH
13973: LD_INT 4
13975: PUSH
13976: LD_INT 5
13978: PUSH
13979: LD_INT 6
13981: PUSH
13982: LD_INT 7
13984: PUSH
13985: LD_INT 8
13987: PUSH
13988: LD_INT 9
13990: PUSH
13991: LD_INT 10
13993: PUSH
13994: LD_INT 11
13996: PUSH
13997: LD_INT 12
13999: PUSH
14000: LD_INT 13
14002: PUSH
14003: LD_INT 14
14005: PUSH
14006: LD_INT 15
14008: PUSH
14009: LD_INT 16
14011: PUSH
14012: LD_INT 17
14014: PUSH
14015: LD_INT 18
14017: PUSH
14018: LD_INT 19
14020: PUSH
14021: LD_INT 20
14023: PUSH
14024: LD_INT 21
14026: PUSH
14027: LD_INT 22
14029: PUSH
14030: LD_INT 23
14032: PUSH
14033: LD_INT 24
14035: PUSH
14036: LD_INT 25
14038: PUSH
14039: LD_INT 26
14041: PUSH
14042: LD_INT 27
14044: PUSH
14045: LD_INT 28
14047: PUSH
14048: LD_INT 29
14050: PUSH
14051: LD_INT 30
14053: PUSH
14054: LD_INT 31
14056: PUSH
14057: LD_INT 32
14059: PUSH
14060: LD_INT 33
14062: PUSH
14063: LD_INT 34
14065: PUSH
14066: LD_INT 35
14068: PUSH
14069: LD_INT 36
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: LIST
14107: LIST
14108: LIST
14109: PUSH
14110: LD_INT 101
14112: PUSH
14113: LD_INT 102
14115: PUSH
14116: LD_INT 103
14118: PUSH
14119: LD_INT 104
14121: PUSH
14122: LD_INT 105
14124: PUSH
14125: LD_INT 106
14127: PUSH
14128: LD_INT 107
14130: PUSH
14131: LD_INT 108
14133: PUSH
14134: LD_INT 109
14136: PUSH
14137: LD_INT 110
14139: PUSH
14140: LD_INT 111
14142: PUSH
14143: LD_INT 112
14145: PUSH
14146: LD_INT 113
14148: PUSH
14149: LD_INT 114
14151: PUSH
14152: LD_INT 115
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: ST_TO_ADDR
14176: GO 14179
14178: POP
// end else
14179: GO 14398
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
14181: LD_ADDR_VAR 0 1
14185: PUSH
14186: LD_INT 1
14188: PUSH
14189: LD_INT 2
14191: PUSH
14192: LD_INT 3
14194: PUSH
14195: LD_INT 4
14197: PUSH
14198: LD_INT 5
14200: PUSH
14201: LD_INT 6
14203: PUSH
14204: LD_INT 7
14206: PUSH
14207: LD_INT 8
14209: PUSH
14210: LD_INT 9
14212: PUSH
14213: LD_INT 10
14215: PUSH
14216: LD_INT 11
14218: PUSH
14219: LD_INT 12
14221: PUSH
14222: LD_INT 13
14224: PUSH
14225: LD_INT 14
14227: PUSH
14228: LD_INT 15
14230: PUSH
14231: LD_INT 16
14233: PUSH
14234: LD_INT 17
14236: PUSH
14237: LD_INT 18
14239: PUSH
14240: LD_INT 19
14242: PUSH
14243: LD_INT 20
14245: PUSH
14246: LD_INT 21
14248: PUSH
14249: LD_INT 22
14251: PUSH
14252: LD_INT 23
14254: PUSH
14255: LD_INT 24
14257: PUSH
14258: LD_INT 25
14260: PUSH
14261: LD_INT 26
14263: PUSH
14264: LD_INT 27
14266: PUSH
14267: LD_INT 28
14269: PUSH
14270: LD_INT 29
14272: PUSH
14273: LD_INT 30
14275: PUSH
14276: LD_INT 31
14278: PUSH
14279: LD_INT 32
14281: PUSH
14282: LD_INT 33
14284: PUSH
14285: LD_INT 34
14287: PUSH
14288: LD_INT 35
14290: PUSH
14291: LD_INT 36
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: PUSH
14332: LD_INT 101
14334: PUSH
14335: LD_INT 102
14337: PUSH
14338: LD_INT 103
14340: PUSH
14341: LD_INT 104
14343: PUSH
14344: LD_INT 105
14346: PUSH
14347: LD_INT 106
14349: PUSH
14350: LD_INT 107
14352: PUSH
14353: LD_INT 108
14355: PUSH
14356: LD_INT 109
14358: PUSH
14359: LD_INT 110
14361: PUSH
14362: LD_INT 111
14364: PUSH
14365: LD_INT 112
14367: PUSH
14368: LD_INT 113
14370: PUSH
14371: LD_INT 114
14373: PUSH
14374: LD_INT 115
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: PUSH
14394: EMPTY
14395: LIST
14396: LIST
14397: ST_TO_ADDR
// if result then
14398: LD_VAR 0 1
14402: IFFALSE 14691
// begin normal :=  ;
14404: LD_ADDR_VAR 0 3
14408: PUSH
14409: LD_STRING 
14411: ST_TO_ADDR
// hardcore :=  ;
14412: LD_ADDR_VAR 0 4
14416: PUSH
14417: LD_STRING 
14419: ST_TO_ADDR
// for i = 1 to normalCounter do
14420: LD_ADDR_VAR 0 5
14424: PUSH
14425: DOUBLE
14426: LD_INT 1
14428: DEC
14429: ST_TO_ADDR
14430: LD_EXP 41
14434: PUSH
14435: FOR_TO
14436: IFFALSE 14537
// begin tmp := 0 ;
14438: LD_ADDR_VAR 0 2
14442: PUSH
14443: LD_STRING 0
14445: ST_TO_ADDR
// if result [ 1 ] then
14446: LD_VAR 0 1
14450: PUSH
14451: LD_INT 1
14453: ARRAY
14454: IFFALSE 14519
// if result [ 1 ] [ 1 ] = i then
14456: LD_VAR 0 1
14460: PUSH
14461: LD_INT 1
14463: ARRAY
14464: PUSH
14465: LD_INT 1
14467: ARRAY
14468: PUSH
14469: LD_VAR 0 5
14473: EQUAL
14474: IFFALSE 14519
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14476: LD_ADDR_VAR 0 1
14480: PUSH
14481: LD_VAR 0 1
14485: PPUSH
14486: LD_INT 1
14488: PPUSH
14489: LD_VAR 0 1
14493: PUSH
14494: LD_INT 1
14496: ARRAY
14497: PPUSH
14498: LD_INT 1
14500: PPUSH
14501: CALL_OW 3
14505: PPUSH
14506: CALL_OW 1
14510: ST_TO_ADDR
// tmp := 1 ;
14511: LD_ADDR_VAR 0 2
14515: PUSH
14516: LD_STRING 1
14518: ST_TO_ADDR
// end ; normal := normal & tmp ;
14519: LD_ADDR_VAR 0 3
14523: PUSH
14524: LD_VAR 0 3
14528: PUSH
14529: LD_VAR 0 2
14533: STR
14534: ST_TO_ADDR
// end ;
14535: GO 14435
14537: POP
14538: POP
// for i = 1 to hardcoreCounter do
14539: LD_ADDR_VAR 0 5
14543: PUSH
14544: DOUBLE
14545: LD_INT 1
14547: DEC
14548: ST_TO_ADDR
14549: LD_EXP 42
14553: PUSH
14554: FOR_TO
14555: IFFALSE 14660
// begin tmp := 0 ;
14557: LD_ADDR_VAR 0 2
14561: PUSH
14562: LD_STRING 0
14564: ST_TO_ADDR
// if result [ 2 ] then
14565: LD_VAR 0 1
14569: PUSH
14570: LD_INT 2
14572: ARRAY
14573: IFFALSE 14642
// if result [ 2 ] [ 1 ] = 100 + i then
14575: LD_VAR 0 1
14579: PUSH
14580: LD_INT 2
14582: ARRAY
14583: PUSH
14584: LD_INT 1
14586: ARRAY
14587: PUSH
14588: LD_INT 100
14590: PUSH
14591: LD_VAR 0 5
14595: PLUS
14596: EQUAL
14597: IFFALSE 14642
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14599: LD_ADDR_VAR 0 1
14603: PUSH
14604: LD_VAR 0 1
14608: PPUSH
14609: LD_INT 2
14611: PPUSH
14612: LD_VAR 0 1
14616: PUSH
14617: LD_INT 2
14619: ARRAY
14620: PPUSH
14621: LD_INT 1
14623: PPUSH
14624: CALL_OW 3
14628: PPUSH
14629: CALL_OW 1
14633: ST_TO_ADDR
// tmp := 1 ;
14634: LD_ADDR_VAR 0 2
14638: PUSH
14639: LD_STRING 1
14641: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14642: LD_ADDR_VAR 0 4
14646: PUSH
14647: LD_VAR 0 4
14651: PUSH
14652: LD_VAR 0 2
14656: STR
14657: ST_TO_ADDR
// end ;
14658: GO 14554
14660: POP
14661: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
14662: LD_STRING getStreamItemsFromMission("
14664: PUSH
14665: LD_VAR 0 3
14669: STR
14670: PUSH
14671: LD_STRING ","
14673: STR
14674: PUSH
14675: LD_VAR 0 4
14679: STR
14680: PUSH
14681: LD_STRING ")
14683: STR
14684: PPUSH
14685: CALL_OW 559
// end else
14689: GO 14698
// ToLua ( getStreamItemsFromMission("","") ) ;
14691: LD_STRING getStreamItemsFromMission("","")
14693: PPUSH
14694: CALL_OW 559
// end ;
14698: LD_VAR 0 1
14702: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14703: LD_EXP 40
14707: PUSH
14708: LD_EXP 45
14712: AND
14713: IFFALSE 14837
14715: GO 14717
14717: DISABLE
14718: LD_INT 0
14720: PPUSH
14721: PPUSH
// begin enable ;
14722: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14723: LD_ADDR_VAR 0 2
14727: PUSH
14728: LD_INT 22
14730: PUSH
14731: LD_OWVAR 2
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: PUSH
14740: LD_INT 2
14742: PUSH
14743: LD_INT 34
14745: PUSH
14746: LD_INT 7
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: PUSH
14753: LD_INT 34
14755: PUSH
14756: LD_INT 45
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: PUSH
14763: LD_INT 34
14765: PUSH
14766: LD_INT 28
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: PUSH
14773: LD_INT 34
14775: PUSH
14776: LD_INT 47
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: PUSH
14790: EMPTY
14791: LIST
14792: LIST
14793: PPUSH
14794: CALL_OW 69
14798: ST_TO_ADDR
// if not tmp then
14799: LD_VAR 0 2
14803: NOT
14804: IFFALSE 14808
// exit ;
14806: GO 14837
// for i in tmp do
14808: LD_ADDR_VAR 0 1
14812: PUSH
14813: LD_VAR 0 2
14817: PUSH
14818: FOR_IN
14819: IFFALSE 14835
// begin SetLives ( i , 0 ) ;
14821: LD_VAR 0 1
14825: PPUSH
14826: LD_INT 0
14828: PPUSH
14829: CALL_OW 234
// end ;
14833: GO 14818
14835: POP
14836: POP
// end ;
14837: PPOPN 2
14839: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14840: LD_EXP 40
14844: PUSH
14845: LD_EXP 46
14849: AND
14850: IFFALSE 14934
14852: GO 14854
14854: DISABLE
14855: LD_INT 0
14857: PPUSH
14858: PPUSH
// begin enable ;
14859: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14860: LD_ADDR_VAR 0 2
14864: PUSH
14865: LD_INT 22
14867: PUSH
14868: LD_OWVAR 2
14872: PUSH
14873: EMPTY
14874: LIST
14875: LIST
14876: PUSH
14877: LD_INT 32
14879: PUSH
14880: LD_INT 3
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: PPUSH
14891: CALL_OW 69
14895: ST_TO_ADDR
// if not tmp then
14896: LD_VAR 0 2
14900: NOT
14901: IFFALSE 14905
// exit ;
14903: GO 14934
// for i in tmp do
14905: LD_ADDR_VAR 0 1
14909: PUSH
14910: LD_VAR 0 2
14914: PUSH
14915: FOR_IN
14916: IFFALSE 14932
// begin SetLives ( i , 0 ) ;
14918: LD_VAR 0 1
14922: PPUSH
14923: LD_INT 0
14925: PPUSH
14926: CALL_OW 234
// end ;
14930: GO 14915
14932: POP
14933: POP
// end ;
14934: PPOPN 2
14936: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14937: LD_EXP 40
14941: PUSH
14942: LD_EXP 43
14946: AND
14947: IFFALSE 15040
14949: GO 14951
14951: DISABLE
14952: LD_INT 0
14954: PPUSH
// begin enable ;
14955: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14956: LD_ADDR_VAR 0 1
14960: PUSH
14961: LD_INT 22
14963: PUSH
14964: LD_OWVAR 2
14968: PUSH
14969: EMPTY
14970: LIST
14971: LIST
14972: PUSH
14973: LD_INT 2
14975: PUSH
14976: LD_INT 25
14978: PUSH
14979: LD_INT 5
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: PUSH
14986: LD_INT 25
14988: PUSH
14989: LD_INT 9
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: PUSH
14996: LD_INT 25
14998: PUSH
14999: LD_INT 8
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: PUSH
15006: EMPTY
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: PPUSH
15016: CALL_OW 69
15020: PUSH
15021: FOR_IN
15022: IFFALSE 15038
// begin SetClass ( i , 1 ) ;
15024: LD_VAR 0 1
15028: PPUSH
15029: LD_INT 1
15031: PPUSH
15032: CALL_OW 336
// end ;
15036: GO 15021
15038: POP
15039: POP
// end ;
15040: PPOPN 1
15042: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15043: LD_EXP 40
15047: PUSH
15048: LD_EXP 44
15052: AND
15053: PUSH
15054: LD_OWVAR 65
15058: PUSH
15059: LD_INT 7
15061: LESS
15062: AND
15063: IFFALSE 15077
15065: GO 15067
15067: DISABLE
// begin enable ;
15068: ENABLE
// game_speed := 7 ;
15069: LD_ADDR_OWVAR 65
15073: PUSH
15074: LD_INT 7
15076: ST_TO_ADDR
// end ;
15077: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15078: LD_EXP 40
15082: PUSH
15083: LD_EXP 47
15087: AND
15088: IFFALSE 15290
15090: GO 15092
15092: DISABLE
15093: LD_INT 0
15095: PPUSH
15096: PPUSH
15097: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15098: LD_ADDR_VAR 0 3
15102: PUSH
15103: LD_INT 81
15105: PUSH
15106: LD_OWVAR 2
15110: PUSH
15111: EMPTY
15112: LIST
15113: LIST
15114: PUSH
15115: LD_INT 21
15117: PUSH
15118: LD_INT 1
15120: PUSH
15121: EMPTY
15122: LIST
15123: LIST
15124: PUSH
15125: EMPTY
15126: LIST
15127: LIST
15128: PPUSH
15129: CALL_OW 69
15133: ST_TO_ADDR
// if not tmp then
15134: LD_VAR 0 3
15138: NOT
15139: IFFALSE 15143
// exit ;
15141: GO 15290
// if tmp > 5 then
15143: LD_VAR 0 3
15147: PUSH
15148: LD_INT 5
15150: GREATER
15151: IFFALSE 15163
// k := 5 else
15153: LD_ADDR_VAR 0 2
15157: PUSH
15158: LD_INT 5
15160: ST_TO_ADDR
15161: GO 15173
// k := tmp ;
15163: LD_ADDR_VAR 0 2
15167: PUSH
15168: LD_VAR 0 3
15172: ST_TO_ADDR
// for i := 1 to k do
15173: LD_ADDR_VAR 0 1
15177: PUSH
15178: DOUBLE
15179: LD_INT 1
15181: DEC
15182: ST_TO_ADDR
15183: LD_VAR 0 2
15187: PUSH
15188: FOR_TO
15189: IFFALSE 15288
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15191: LD_VAR 0 3
15195: PUSH
15196: LD_VAR 0 1
15200: ARRAY
15201: PPUSH
15202: LD_VAR 0 1
15206: PUSH
15207: LD_INT 4
15209: MOD
15210: PUSH
15211: LD_INT 1
15213: PLUS
15214: PPUSH
15215: CALL_OW 259
15219: PUSH
15220: LD_INT 10
15222: LESS
15223: IFFALSE 15286
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15225: LD_VAR 0 3
15229: PUSH
15230: LD_VAR 0 1
15234: ARRAY
15235: PPUSH
15236: LD_VAR 0 1
15240: PUSH
15241: LD_INT 4
15243: MOD
15244: PUSH
15245: LD_INT 1
15247: PLUS
15248: PPUSH
15249: LD_VAR 0 3
15253: PUSH
15254: LD_VAR 0 1
15258: ARRAY
15259: PPUSH
15260: LD_VAR 0 1
15264: PUSH
15265: LD_INT 4
15267: MOD
15268: PUSH
15269: LD_INT 1
15271: PLUS
15272: PPUSH
15273: CALL_OW 259
15277: PUSH
15278: LD_INT 1
15280: PLUS
15281: PPUSH
15282: CALL_OW 237
15286: GO 15188
15288: POP
15289: POP
// end ;
15290: PPOPN 3
15292: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15293: LD_EXP 40
15297: PUSH
15298: LD_EXP 48
15302: AND
15303: IFFALSE 15323
15305: GO 15307
15307: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15308: LD_INT 4
15310: PPUSH
15311: LD_OWVAR 2
15315: PPUSH
15316: LD_INT 0
15318: PPUSH
15319: CALL_OW 324
15323: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15324: LD_EXP 40
15328: PUSH
15329: LD_EXP 77
15333: AND
15334: IFFALSE 15354
15336: GO 15338
15338: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15339: LD_INT 19
15341: PPUSH
15342: LD_OWVAR 2
15346: PPUSH
15347: LD_INT 0
15349: PPUSH
15350: CALL_OW 324
15354: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15355: LD_EXP 40
15359: PUSH
15360: LD_EXP 49
15364: AND
15365: IFFALSE 15467
15367: GO 15369
15369: DISABLE
15370: LD_INT 0
15372: PPUSH
15373: PPUSH
// begin enable ;
15374: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15375: LD_ADDR_VAR 0 2
15379: PUSH
15380: LD_INT 22
15382: PUSH
15383: LD_OWVAR 2
15387: PUSH
15388: EMPTY
15389: LIST
15390: LIST
15391: PUSH
15392: LD_INT 2
15394: PUSH
15395: LD_INT 34
15397: PUSH
15398: LD_INT 11
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: PUSH
15405: LD_INT 34
15407: PUSH
15408: LD_INT 30
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: PUSH
15415: EMPTY
15416: LIST
15417: LIST
15418: LIST
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: PPUSH
15424: CALL_OW 69
15428: ST_TO_ADDR
// if not tmp then
15429: LD_VAR 0 2
15433: NOT
15434: IFFALSE 15438
// exit ;
15436: GO 15467
// for i in tmp do
15438: LD_ADDR_VAR 0 1
15442: PUSH
15443: LD_VAR 0 2
15447: PUSH
15448: FOR_IN
15449: IFFALSE 15465
// begin SetLives ( i , 0 ) ;
15451: LD_VAR 0 1
15455: PPUSH
15456: LD_INT 0
15458: PPUSH
15459: CALL_OW 234
// end ;
15463: GO 15448
15465: POP
15466: POP
// end ;
15467: PPOPN 2
15469: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15470: LD_EXP 40
15474: PUSH
15475: LD_EXP 50
15479: AND
15480: IFFALSE 15500
15482: GO 15484
15484: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15485: LD_INT 32
15487: PPUSH
15488: LD_OWVAR 2
15492: PPUSH
15493: LD_INT 0
15495: PPUSH
15496: CALL_OW 324
15500: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15501: LD_EXP 40
15505: PUSH
15506: LD_EXP 51
15510: AND
15511: IFFALSE 15692
15513: GO 15515
15515: DISABLE
15516: LD_INT 0
15518: PPUSH
15519: PPUSH
15520: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15521: LD_ADDR_VAR 0 2
15525: PUSH
15526: LD_INT 22
15528: PUSH
15529: LD_OWVAR 2
15533: PUSH
15534: EMPTY
15535: LIST
15536: LIST
15537: PUSH
15538: LD_INT 33
15540: PUSH
15541: LD_INT 3
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: PPUSH
15552: CALL_OW 69
15556: ST_TO_ADDR
// if not tmp then
15557: LD_VAR 0 2
15561: NOT
15562: IFFALSE 15566
// exit ;
15564: GO 15692
// side := 0 ;
15566: LD_ADDR_VAR 0 3
15570: PUSH
15571: LD_INT 0
15573: ST_TO_ADDR
// for i := 1 to 8 do
15574: LD_ADDR_VAR 0 1
15578: PUSH
15579: DOUBLE
15580: LD_INT 1
15582: DEC
15583: ST_TO_ADDR
15584: LD_INT 8
15586: PUSH
15587: FOR_TO
15588: IFFALSE 15636
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15590: LD_OWVAR 2
15594: PUSH
15595: LD_VAR 0 1
15599: NONEQUAL
15600: PUSH
15601: LD_OWVAR 2
15605: PPUSH
15606: LD_VAR 0 1
15610: PPUSH
15611: CALL_OW 81
15615: PUSH
15616: LD_INT 2
15618: EQUAL
15619: AND
15620: IFFALSE 15634
// begin side := i ;
15622: LD_ADDR_VAR 0 3
15626: PUSH
15627: LD_VAR 0 1
15631: ST_TO_ADDR
// break ;
15632: GO 15636
// end ;
15634: GO 15587
15636: POP
15637: POP
// if not side then
15638: LD_VAR 0 3
15642: NOT
15643: IFFALSE 15647
// exit ;
15645: GO 15692
// for i := 1 to tmp do
15647: LD_ADDR_VAR 0 1
15651: PUSH
15652: DOUBLE
15653: LD_INT 1
15655: DEC
15656: ST_TO_ADDR
15657: LD_VAR 0 2
15661: PUSH
15662: FOR_TO
15663: IFFALSE 15690
// if Prob ( 60 ) then
15665: LD_INT 60
15667: PPUSH
15668: CALL_OW 13
15672: IFFALSE 15688
// SetSide ( i , side ) ;
15674: LD_VAR 0 1
15678: PPUSH
15679: LD_VAR 0 3
15683: PPUSH
15684: CALL_OW 235
15688: GO 15662
15690: POP
15691: POP
// end ;
15692: PPOPN 3
15694: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15695: LD_EXP 40
15699: PUSH
15700: LD_EXP 53
15704: AND
15705: IFFALSE 15824
15707: GO 15709
15709: DISABLE
15710: LD_INT 0
15712: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15713: LD_ADDR_VAR 0 1
15717: PUSH
15718: LD_INT 22
15720: PUSH
15721: LD_OWVAR 2
15725: PUSH
15726: EMPTY
15727: LIST
15728: LIST
15729: PUSH
15730: LD_INT 21
15732: PUSH
15733: LD_INT 1
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: PUSH
15740: LD_INT 3
15742: PUSH
15743: LD_INT 23
15745: PUSH
15746: LD_INT 0
15748: PUSH
15749: EMPTY
15750: LIST
15751: LIST
15752: PUSH
15753: EMPTY
15754: LIST
15755: LIST
15756: PUSH
15757: EMPTY
15758: LIST
15759: LIST
15760: LIST
15761: PPUSH
15762: CALL_OW 69
15766: PUSH
15767: FOR_IN
15768: IFFALSE 15822
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15770: LD_VAR 0 1
15774: PPUSH
15775: CALL_OW 257
15779: PUSH
15780: LD_INT 1
15782: PUSH
15783: LD_INT 2
15785: PUSH
15786: LD_INT 3
15788: PUSH
15789: LD_INT 4
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: IN
15798: IFFALSE 15820
// SetClass ( un , rand ( 1 , 4 ) ) ;
15800: LD_VAR 0 1
15804: PPUSH
15805: LD_INT 1
15807: PPUSH
15808: LD_INT 4
15810: PPUSH
15811: CALL_OW 12
15815: PPUSH
15816: CALL_OW 336
15820: GO 15767
15822: POP
15823: POP
// end ;
15824: PPOPN 1
15826: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15827: LD_EXP 40
15831: PUSH
15832: LD_EXP 52
15836: AND
15837: IFFALSE 15916
15839: GO 15841
15841: DISABLE
15842: LD_INT 0
15844: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15845: LD_ADDR_VAR 0 1
15849: PUSH
15850: LD_INT 22
15852: PUSH
15853: LD_OWVAR 2
15857: PUSH
15858: EMPTY
15859: LIST
15860: LIST
15861: PUSH
15862: LD_INT 21
15864: PUSH
15865: LD_INT 3
15867: PUSH
15868: EMPTY
15869: LIST
15870: LIST
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: PPUSH
15876: CALL_OW 69
15880: ST_TO_ADDR
// if not tmp then
15881: LD_VAR 0 1
15885: NOT
15886: IFFALSE 15890
// exit ;
15888: GO 15916
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15890: LD_VAR 0 1
15894: PUSH
15895: LD_INT 1
15897: PPUSH
15898: LD_VAR 0 1
15902: PPUSH
15903: CALL_OW 12
15907: ARRAY
15908: PPUSH
15909: LD_INT 100
15911: PPUSH
15912: CALL_OW 234
// end ;
15916: PPOPN 1
15918: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15919: LD_EXP 40
15923: PUSH
15924: LD_EXP 54
15928: AND
15929: IFFALSE 16027
15931: GO 15933
15933: DISABLE
15934: LD_INT 0
15936: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15937: LD_ADDR_VAR 0 1
15941: PUSH
15942: LD_INT 22
15944: PUSH
15945: LD_OWVAR 2
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PUSH
15954: LD_INT 21
15956: PUSH
15957: LD_INT 1
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: PPUSH
15968: CALL_OW 69
15972: ST_TO_ADDR
// if not tmp then
15973: LD_VAR 0 1
15977: NOT
15978: IFFALSE 15982
// exit ;
15980: GO 16027
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15982: LD_VAR 0 1
15986: PUSH
15987: LD_INT 1
15989: PPUSH
15990: LD_VAR 0 1
15994: PPUSH
15995: CALL_OW 12
15999: ARRAY
16000: PPUSH
16001: LD_INT 1
16003: PPUSH
16004: LD_INT 4
16006: PPUSH
16007: CALL_OW 12
16011: PPUSH
16012: LD_INT 3000
16014: PPUSH
16015: LD_INT 9000
16017: PPUSH
16018: CALL_OW 12
16022: PPUSH
16023: CALL_OW 492
// end ;
16027: PPOPN 1
16029: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16030: LD_EXP 40
16034: PUSH
16035: LD_EXP 55
16039: AND
16040: IFFALSE 16060
16042: GO 16044
16044: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16045: LD_INT 1
16047: PPUSH
16048: LD_OWVAR 2
16052: PPUSH
16053: LD_INT 0
16055: PPUSH
16056: CALL_OW 324
16060: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16061: LD_EXP 40
16065: PUSH
16066: LD_EXP 56
16070: AND
16071: IFFALSE 16154
16073: GO 16075
16075: DISABLE
16076: LD_INT 0
16078: PPUSH
16079: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16080: LD_ADDR_VAR 0 2
16084: PUSH
16085: LD_INT 22
16087: PUSH
16088: LD_OWVAR 2
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: PUSH
16097: LD_INT 21
16099: PUSH
16100: LD_INT 3
16102: PUSH
16103: EMPTY
16104: LIST
16105: LIST
16106: PUSH
16107: EMPTY
16108: LIST
16109: LIST
16110: PPUSH
16111: CALL_OW 69
16115: ST_TO_ADDR
// if not tmp then
16116: LD_VAR 0 2
16120: NOT
16121: IFFALSE 16125
// exit ;
16123: GO 16154
// for i in tmp do
16125: LD_ADDR_VAR 0 1
16129: PUSH
16130: LD_VAR 0 2
16134: PUSH
16135: FOR_IN
16136: IFFALSE 16152
// SetBLevel ( i , 10 ) ;
16138: LD_VAR 0 1
16142: PPUSH
16143: LD_INT 10
16145: PPUSH
16146: CALL_OW 241
16150: GO 16135
16152: POP
16153: POP
// end ;
16154: PPOPN 2
16156: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16157: LD_EXP 40
16161: PUSH
16162: LD_EXP 57
16166: AND
16167: IFFALSE 16278
16169: GO 16171
16171: DISABLE
16172: LD_INT 0
16174: PPUSH
16175: PPUSH
16176: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16177: LD_ADDR_VAR 0 3
16181: PUSH
16182: LD_INT 22
16184: PUSH
16185: LD_OWVAR 2
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: PUSH
16194: LD_INT 25
16196: PUSH
16197: LD_INT 1
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: PPUSH
16208: CALL_OW 69
16212: ST_TO_ADDR
// if not tmp then
16213: LD_VAR 0 3
16217: NOT
16218: IFFALSE 16222
// exit ;
16220: GO 16278
// un := tmp [ rand ( 1 , tmp ) ] ;
16222: LD_ADDR_VAR 0 2
16226: PUSH
16227: LD_VAR 0 3
16231: PUSH
16232: LD_INT 1
16234: PPUSH
16235: LD_VAR 0 3
16239: PPUSH
16240: CALL_OW 12
16244: ARRAY
16245: ST_TO_ADDR
// if Crawls ( un ) then
16246: LD_VAR 0 2
16250: PPUSH
16251: CALL_OW 318
16255: IFFALSE 16266
// ComWalk ( un ) ;
16257: LD_VAR 0 2
16261: PPUSH
16262: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16266: LD_VAR 0 2
16270: PPUSH
16271: LD_INT 5
16273: PPUSH
16274: CALL_OW 336
// end ;
16278: PPOPN 3
16280: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
16281: LD_EXP 40
16285: PUSH
16286: LD_EXP 58
16290: AND
16291: PUSH
16292: LD_OWVAR 67
16296: PUSH
16297: LD_INT 3
16299: LESS
16300: AND
16301: IFFALSE 16320
16303: GO 16305
16305: DISABLE
// Difficulty := Difficulty + 1 ;
16306: LD_ADDR_OWVAR 67
16310: PUSH
16311: LD_OWVAR 67
16315: PUSH
16316: LD_INT 1
16318: PLUS
16319: ST_TO_ADDR
16320: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16321: LD_EXP 40
16325: PUSH
16326: LD_EXP 59
16330: AND
16331: IFFALSE 16434
16333: GO 16335
16335: DISABLE
16336: LD_INT 0
16338: PPUSH
// begin for i := 1 to 5 do
16339: LD_ADDR_VAR 0 1
16343: PUSH
16344: DOUBLE
16345: LD_INT 1
16347: DEC
16348: ST_TO_ADDR
16349: LD_INT 5
16351: PUSH
16352: FOR_TO
16353: IFFALSE 16432
// begin uc_nation := nation_nature ;
16355: LD_ADDR_OWVAR 21
16359: PUSH
16360: LD_INT 0
16362: ST_TO_ADDR
// uc_side := 0 ;
16363: LD_ADDR_OWVAR 20
16367: PUSH
16368: LD_INT 0
16370: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16371: LD_ADDR_OWVAR 29
16375: PUSH
16376: LD_INT 12
16378: PUSH
16379: LD_INT 12
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: ST_TO_ADDR
// hc_agressivity := 20 ;
16386: LD_ADDR_OWVAR 35
16390: PUSH
16391: LD_INT 20
16393: ST_TO_ADDR
// hc_class := class_tiger ;
16394: LD_ADDR_OWVAR 28
16398: PUSH
16399: LD_INT 14
16401: ST_TO_ADDR
// hc_gallery :=  ;
16402: LD_ADDR_OWVAR 33
16406: PUSH
16407: LD_STRING 
16409: ST_TO_ADDR
// hc_name :=  ;
16410: LD_ADDR_OWVAR 26
16414: PUSH
16415: LD_STRING 
16417: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16418: CALL_OW 44
16422: PPUSH
16423: LD_INT 0
16425: PPUSH
16426: CALL_OW 51
// end ;
16430: GO 16352
16432: POP
16433: POP
// end ;
16434: PPOPN 1
16436: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16437: LD_EXP 40
16441: PUSH
16442: LD_EXP 60
16446: AND
16447: IFFALSE 16456
16449: GO 16451
16451: DISABLE
// StreamSibBomb ;
16452: CALL 16457 0 0
16456: END
// export function StreamSibBomb ; var i , x , y ; begin
16457: LD_INT 0
16459: PPUSH
16460: PPUSH
16461: PPUSH
16462: PPUSH
// result := false ;
16463: LD_ADDR_VAR 0 1
16467: PUSH
16468: LD_INT 0
16470: ST_TO_ADDR
// for i := 1 to 16 do
16471: LD_ADDR_VAR 0 2
16475: PUSH
16476: DOUBLE
16477: LD_INT 1
16479: DEC
16480: ST_TO_ADDR
16481: LD_INT 16
16483: PUSH
16484: FOR_TO
16485: IFFALSE 16684
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16487: LD_ADDR_VAR 0 3
16491: PUSH
16492: LD_INT 10
16494: PUSH
16495: LD_INT 20
16497: PUSH
16498: LD_INT 30
16500: PUSH
16501: LD_INT 40
16503: PUSH
16504: LD_INT 50
16506: PUSH
16507: LD_INT 60
16509: PUSH
16510: LD_INT 70
16512: PUSH
16513: LD_INT 80
16515: PUSH
16516: LD_INT 90
16518: PUSH
16519: LD_INT 100
16521: PUSH
16522: LD_INT 110
16524: PUSH
16525: LD_INT 120
16527: PUSH
16528: LD_INT 130
16530: PUSH
16531: LD_INT 140
16533: PUSH
16534: LD_INT 150
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: PUSH
16554: LD_INT 1
16556: PPUSH
16557: LD_INT 15
16559: PPUSH
16560: CALL_OW 12
16564: ARRAY
16565: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16566: LD_ADDR_VAR 0 4
16570: PUSH
16571: LD_INT 10
16573: PUSH
16574: LD_INT 20
16576: PUSH
16577: LD_INT 30
16579: PUSH
16580: LD_INT 40
16582: PUSH
16583: LD_INT 50
16585: PUSH
16586: LD_INT 60
16588: PUSH
16589: LD_INT 70
16591: PUSH
16592: LD_INT 80
16594: PUSH
16595: LD_INT 90
16597: PUSH
16598: LD_INT 100
16600: PUSH
16601: LD_INT 110
16603: PUSH
16604: LD_INT 120
16606: PUSH
16607: LD_INT 130
16609: PUSH
16610: LD_INT 140
16612: PUSH
16613: LD_INT 150
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: PUSH
16633: LD_INT 1
16635: PPUSH
16636: LD_INT 15
16638: PPUSH
16639: CALL_OW 12
16643: ARRAY
16644: ST_TO_ADDR
// if ValidHex ( x , y ) then
16645: LD_VAR 0 3
16649: PPUSH
16650: LD_VAR 0 4
16654: PPUSH
16655: CALL_OW 488
16659: IFFALSE 16682
// begin result := [ x , y ] ;
16661: LD_ADDR_VAR 0 1
16665: PUSH
16666: LD_VAR 0 3
16670: PUSH
16671: LD_VAR 0 4
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: ST_TO_ADDR
// break ;
16680: GO 16684
// end ; end ;
16682: GO 16484
16684: POP
16685: POP
// if result then
16686: LD_VAR 0 1
16690: IFFALSE 16750
// begin ToLua ( playSibBomb() ) ;
16692: LD_STRING playSibBomb()
16694: PPUSH
16695: CALL_OW 559
// wait ( 0 0$14 ) ;
16699: LD_INT 490
16701: PPUSH
16702: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16706: LD_VAR 0 1
16710: PUSH
16711: LD_INT 1
16713: ARRAY
16714: PPUSH
16715: LD_VAR 0 1
16719: PUSH
16720: LD_INT 2
16722: ARRAY
16723: PPUSH
16724: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16728: LD_VAR 0 1
16732: PUSH
16733: LD_INT 1
16735: ARRAY
16736: PPUSH
16737: LD_VAR 0 1
16741: PUSH
16742: LD_INT 2
16744: ARRAY
16745: PPUSH
16746: CALL_OW 429
// end ; end ;
16750: LD_VAR 0 1
16754: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16755: LD_EXP 40
16759: PUSH
16760: LD_EXP 62
16764: AND
16765: IFFALSE 16777
16767: GO 16769
16769: DISABLE
// YouLost (  ) ;
16770: LD_STRING 
16772: PPUSH
16773: CALL_OW 104
16777: END
// every 0 0$1 trigger StreamModeActive and sFog do
16778: LD_EXP 40
16782: PUSH
16783: LD_EXP 61
16787: AND
16788: IFFALSE 16802
16790: GO 16792
16792: DISABLE
// FogOff ( your_side ) ;
16793: LD_OWVAR 2
16797: PPUSH
16798: CALL_OW 344
16802: END
// every 0 0$1 trigger StreamModeActive and sSun do
16803: LD_EXP 40
16807: PUSH
16808: LD_EXP 63
16812: AND
16813: IFFALSE 16841
16815: GO 16817
16817: DISABLE
// begin solar_recharge_percent := 0 ;
16818: LD_ADDR_OWVAR 79
16822: PUSH
16823: LD_INT 0
16825: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16826: LD_INT 10500
16828: PPUSH
16829: CALL_OW 67
// solar_recharge_percent := 100 ;
16833: LD_ADDR_OWVAR 79
16837: PUSH
16838: LD_INT 100
16840: ST_TO_ADDR
// end ;
16841: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16842: LD_EXP 40
16846: PUSH
16847: LD_EXP 64
16851: AND
16852: IFFALSE 17091
16854: GO 16856
16856: DISABLE
16857: LD_INT 0
16859: PPUSH
16860: PPUSH
16861: PPUSH
// begin tmp := [ ] ;
16862: LD_ADDR_VAR 0 3
16866: PUSH
16867: EMPTY
16868: ST_TO_ADDR
// for i := 1 to 6 do
16869: LD_ADDR_VAR 0 1
16873: PUSH
16874: DOUBLE
16875: LD_INT 1
16877: DEC
16878: ST_TO_ADDR
16879: LD_INT 6
16881: PUSH
16882: FOR_TO
16883: IFFALSE 16988
// begin uc_nation := nation_nature ;
16885: LD_ADDR_OWVAR 21
16889: PUSH
16890: LD_INT 0
16892: ST_TO_ADDR
// uc_side := 0 ;
16893: LD_ADDR_OWVAR 20
16897: PUSH
16898: LD_INT 0
16900: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16901: LD_ADDR_OWVAR 29
16905: PUSH
16906: LD_INT 12
16908: PUSH
16909: LD_INT 12
16911: PUSH
16912: EMPTY
16913: LIST
16914: LIST
16915: ST_TO_ADDR
// hc_agressivity := 20 ;
16916: LD_ADDR_OWVAR 35
16920: PUSH
16921: LD_INT 20
16923: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16924: LD_ADDR_OWVAR 28
16928: PUSH
16929: LD_INT 17
16931: ST_TO_ADDR
// hc_gallery :=  ;
16932: LD_ADDR_OWVAR 33
16936: PUSH
16937: LD_STRING 
16939: ST_TO_ADDR
// hc_name :=  ;
16940: LD_ADDR_OWVAR 26
16944: PUSH
16945: LD_STRING 
16947: ST_TO_ADDR
// un := CreateHuman ;
16948: LD_ADDR_VAR 0 2
16952: PUSH
16953: CALL_OW 44
16957: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16958: LD_VAR 0 2
16962: PPUSH
16963: LD_INT 1
16965: PPUSH
16966: CALL_OW 51
// tmp := tmp ^ un ;
16970: LD_ADDR_VAR 0 3
16974: PUSH
16975: LD_VAR 0 3
16979: PUSH
16980: LD_VAR 0 2
16984: ADD
16985: ST_TO_ADDR
// end ;
16986: GO 16882
16988: POP
16989: POP
// repeat wait ( 0 0$1 ) ;
16990: LD_INT 35
16992: PPUSH
16993: CALL_OW 67
// for un in tmp do
16997: LD_ADDR_VAR 0 2
17001: PUSH
17002: LD_VAR 0 3
17006: PUSH
17007: FOR_IN
17008: IFFALSE 17082
// begin if IsDead ( un ) then
17010: LD_VAR 0 2
17014: PPUSH
17015: CALL_OW 301
17019: IFFALSE 17039
// begin tmp := tmp diff un ;
17021: LD_ADDR_VAR 0 3
17025: PUSH
17026: LD_VAR 0 3
17030: PUSH
17031: LD_VAR 0 2
17035: DIFF
17036: ST_TO_ADDR
// continue ;
17037: GO 17007
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17039: LD_VAR 0 2
17043: PPUSH
17044: LD_INT 3
17046: PUSH
17047: LD_INT 22
17049: PUSH
17050: LD_INT 0
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: PUSH
17057: EMPTY
17058: LIST
17059: LIST
17060: PPUSH
17061: CALL_OW 69
17065: PPUSH
17066: LD_VAR 0 2
17070: PPUSH
17071: CALL_OW 74
17075: PPUSH
17076: CALL_OW 115
// end ;
17080: GO 17007
17082: POP
17083: POP
// until not tmp ;
17084: LD_VAR 0 3
17088: NOT
17089: IFFALSE 16990
// end ;
17091: PPOPN 3
17093: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17094: LD_EXP 40
17098: PUSH
17099: LD_EXP 65
17103: AND
17104: IFFALSE 17158
17106: GO 17108
17108: DISABLE
// begin ToLua ( displayTroll(); ) ;
17109: LD_STRING displayTroll();
17111: PPUSH
17112: CALL_OW 559
// wait ( 3 3$00 ) ;
17116: LD_INT 6300
17118: PPUSH
17119: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17123: LD_STRING hideTroll();
17125: PPUSH
17126: CALL_OW 559
// wait ( 1 1$00 ) ;
17130: LD_INT 2100
17132: PPUSH
17133: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17137: LD_STRING displayTroll();
17139: PPUSH
17140: CALL_OW 559
// wait ( 1 1$00 ) ;
17144: LD_INT 2100
17146: PPUSH
17147: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17151: LD_STRING hideTroll();
17153: PPUSH
17154: CALL_OW 559
// end ;
17158: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17159: LD_EXP 40
17163: PUSH
17164: LD_EXP 66
17168: AND
17169: IFFALSE 17232
17171: GO 17173
17173: DISABLE
17174: LD_INT 0
17176: PPUSH
// begin p := 0 ;
17177: LD_ADDR_VAR 0 1
17181: PUSH
17182: LD_INT 0
17184: ST_TO_ADDR
// repeat game_speed := 1 ;
17185: LD_ADDR_OWVAR 65
17189: PUSH
17190: LD_INT 1
17192: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17193: LD_INT 35
17195: PPUSH
17196: CALL_OW 67
// p := p + 1 ;
17200: LD_ADDR_VAR 0 1
17204: PUSH
17205: LD_VAR 0 1
17209: PUSH
17210: LD_INT 1
17212: PLUS
17213: ST_TO_ADDR
// until p >= 60 ;
17214: LD_VAR 0 1
17218: PUSH
17219: LD_INT 60
17221: GREATEREQUAL
17222: IFFALSE 17185
// game_speed := 4 ;
17224: LD_ADDR_OWVAR 65
17228: PUSH
17229: LD_INT 4
17231: ST_TO_ADDR
// end ;
17232: PPOPN 1
17234: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17235: LD_EXP 40
17239: PUSH
17240: LD_EXP 67
17244: AND
17245: IFFALSE 17391
17247: GO 17249
17249: DISABLE
17250: LD_INT 0
17252: PPUSH
17253: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17254: LD_ADDR_VAR 0 1
17258: PUSH
17259: LD_INT 22
17261: PUSH
17262: LD_OWVAR 2
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: PUSH
17271: LD_INT 2
17273: PUSH
17274: LD_INT 30
17276: PUSH
17277: LD_INT 0
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: PUSH
17284: LD_INT 30
17286: PUSH
17287: LD_INT 1
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: LIST
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: PPUSH
17303: CALL_OW 69
17307: ST_TO_ADDR
// if not depot then
17308: LD_VAR 0 1
17312: NOT
17313: IFFALSE 17317
// exit ;
17315: GO 17391
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17317: LD_ADDR_VAR 0 2
17321: PUSH
17322: LD_VAR 0 1
17326: PUSH
17327: LD_INT 1
17329: PPUSH
17330: LD_VAR 0 1
17334: PPUSH
17335: CALL_OW 12
17339: ARRAY
17340: PPUSH
17341: CALL_OW 274
17345: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17346: LD_VAR 0 2
17350: PPUSH
17351: LD_INT 1
17353: PPUSH
17354: LD_INT 0
17356: PPUSH
17357: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17361: LD_VAR 0 2
17365: PPUSH
17366: LD_INT 2
17368: PPUSH
17369: LD_INT 0
17371: PPUSH
17372: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17376: LD_VAR 0 2
17380: PPUSH
17381: LD_INT 3
17383: PPUSH
17384: LD_INT 0
17386: PPUSH
17387: CALL_OW 277
// end ;
17391: PPOPN 2
17393: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17394: LD_EXP 40
17398: PUSH
17399: LD_EXP 68
17403: AND
17404: IFFALSE 17501
17406: GO 17408
17408: DISABLE
17409: LD_INT 0
17411: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17412: LD_ADDR_VAR 0 1
17416: PUSH
17417: LD_INT 22
17419: PUSH
17420: LD_OWVAR 2
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: PUSH
17429: LD_INT 21
17431: PUSH
17432: LD_INT 1
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: PUSH
17439: LD_INT 3
17441: PUSH
17442: LD_INT 23
17444: PUSH
17445: LD_INT 0
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: PUSH
17456: EMPTY
17457: LIST
17458: LIST
17459: LIST
17460: PPUSH
17461: CALL_OW 69
17465: ST_TO_ADDR
// if not tmp then
17466: LD_VAR 0 1
17470: NOT
17471: IFFALSE 17475
// exit ;
17473: GO 17501
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17475: LD_VAR 0 1
17479: PUSH
17480: LD_INT 1
17482: PPUSH
17483: LD_VAR 0 1
17487: PPUSH
17488: CALL_OW 12
17492: ARRAY
17493: PPUSH
17494: LD_INT 200
17496: PPUSH
17497: CALL_OW 234
// end ;
17501: PPOPN 1
17503: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17504: LD_EXP 40
17508: PUSH
17509: LD_EXP 69
17513: AND
17514: IFFALSE 17593
17516: GO 17518
17518: DISABLE
17519: LD_INT 0
17521: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17522: LD_ADDR_VAR 0 1
17526: PUSH
17527: LD_INT 22
17529: PUSH
17530: LD_OWVAR 2
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PUSH
17539: LD_INT 21
17541: PUSH
17542: LD_INT 2
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: PPUSH
17553: CALL_OW 69
17557: ST_TO_ADDR
// if not tmp then
17558: LD_VAR 0 1
17562: NOT
17563: IFFALSE 17567
// exit ;
17565: GO 17593
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17567: LD_VAR 0 1
17571: PUSH
17572: LD_INT 1
17574: PPUSH
17575: LD_VAR 0 1
17579: PPUSH
17580: CALL_OW 12
17584: ARRAY
17585: PPUSH
17586: LD_INT 60
17588: PPUSH
17589: CALL_OW 234
// end ;
17593: PPOPN 1
17595: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17596: LD_EXP 40
17600: PUSH
17601: LD_EXP 70
17605: AND
17606: IFFALSE 17705
17608: GO 17610
17610: DISABLE
17611: LD_INT 0
17613: PPUSH
17614: PPUSH
// begin enable ;
17615: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17616: LD_ADDR_VAR 0 1
17620: PUSH
17621: LD_INT 22
17623: PUSH
17624: LD_OWVAR 2
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: PUSH
17633: LD_INT 61
17635: PUSH
17636: EMPTY
17637: LIST
17638: PUSH
17639: LD_INT 33
17641: PUSH
17642: LD_INT 2
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: LIST
17653: PPUSH
17654: CALL_OW 69
17658: ST_TO_ADDR
// if not tmp then
17659: LD_VAR 0 1
17663: NOT
17664: IFFALSE 17668
// exit ;
17666: GO 17705
// for i in tmp do
17668: LD_ADDR_VAR 0 2
17672: PUSH
17673: LD_VAR 0 1
17677: PUSH
17678: FOR_IN
17679: IFFALSE 17703
// if IsControledBy ( i ) then
17681: LD_VAR 0 2
17685: PPUSH
17686: CALL_OW 312
17690: IFFALSE 17701
// ComUnlink ( i ) ;
17692: LD_VAR 0 2
17696: PPUSH
17697: CALL_OW 136
17701: GO 17678
17703: POP
17704: POP
// end ;
17705: PPOPN 2
17707: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17708: LD_EXP 40
17712: PUSH
17713: LD_EXP 71
17717: AND
17718: IFFALSE 17858
17720: GO 17722
17722: DISABLE
17723: LD_INT 0
17725: PPUSH
17726: PPUSH
// begin ToLua ( displayPowell(); ) ;
17727: LD_STRING displayPowell();
17729: PPUSH
17730: CALL_OW 559
// uc_side := 0 ;
17734: LD_ADDR_OWVAR 20
17738: PUSH
17739: LD_INT 0
17741: ST_TO_ADDR
// uc_nation := 2 ;
17742: LD_ADDR_OWVAR 21
17746: PUSH
17747: LD_INT 2
17749: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17750: LD_ADDR_OWVAR 37
17754: PUSH
17755: LD_INT 14
17757: ST_TO_ADDR
// vc_engine := engine_siberite ;
17758: LD_ADDR_OWVAR 39
17762: PUSH
17763: LD_INT 3
17765: ST_TO_ADDR
// vc_control := control_apeman ;
17766: LD_ADDR_OWVAR 38
17770: PUSH
17771: LD_INT 5
17773: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17774: LD_ADDR_OWVAR 40
17778: PUSH
17779: LD_INT 29
17781: ST_TO_ADDR
// un := CreateVehicle ;
17782: LD_ADDR_VAR 0 2
17786: PUSH
17787: CALL_OW 45
17791: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17792: LD_VAR 0 2
17796: PPUSH
17797: LD_INT 1
17799: PPUSH
17800: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17804: LD_INT 35
17806: PPUSH
17807: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17811: LD_VAR 0 2
17815: PPUSH
17816: LD_INT 22
17818: PUSH
17819: LD_OWVAR 2
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: PPUSH
17828: CALL_OW 69
17832: PPUSH
17833: LD_VAR 0 2
17837: PPUSH
17838: CALL_OW 74
17842: PPUSH
17843: CALL_OW 115
// until IsDead ( un ) ;
17847: LD_VAR 0 2
17851: PPUSH
17852: CALL_OW 301
17856: IFFALSE 17804
// end ;
17858: PPOPN 2
17860: END
// every 0 0$1 trigger StreamModeActive and sStu do
17861: LD_EXP 40
17865: PUSH
17866: LD_EXP 79
17870: AND
17871: IFFALSE 17887
17873: GO 17875
17875: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17876: LD_STRING displayStucuk();
17878: PPUSH
17879: CALL_OW 559
// ResetFog ;
17883: CALL_OW 335
// end ;
17887: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17888: LD_EXP 40
17892: PUSH
17893: LD_EXP 72
17897: AND
17898: IFFALSE 18039
17900: GO 17902
17902: DISABLE
17903: LD_INT 0
17905: PPUSH
17906: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17907: LD_ADDR_VAR 0 2
17911: PUSH
17912: LD_INT 22
17914: PUSH
17915: LD_OWVAR 2
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: PUSH
17924: LD_INT 21
17926: PUSH
17927: LD_INT 1
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PPUSH
17938: CALL_OW 69
17942: ST_TO_ADDR
// if not tmp then
17943: LD_VAR 0 2
17947: NOT
17948: IFFALSE 17952
// exit ;
17950: GO 18039
// un := tmp [ rand ( 1 , tmp ) ] ;
17952: LD_ADDR_VAR 0 1
17956: PUSH
17957: LD_VAR 0 2
17961: PUSH
17962: LD_INT 1
17964: PPUSH
17965: LD_VAR 0 2
17969: PPUSH
17970: CALL_OW 12
17974: ARRAY
17975: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17976: LD_VAR 0 1
17980: PPUSH
17981: LD_INT 0
17983: PPUSH
17984: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17988: LD_VAR 0 1
17992: PPUSH
17993: LD_OWVAR 3
17997: PUSH
17998: LD_VAR 0 1
18002: DIFF
18003: PPUSH
18004: LD_VAR 0 1
18008: PPUSH
18009: CALL_OW 74
18013: PPUSH
18014: CALL_OW 115
// wait ( 0 0$20 ) ;
18018: LD_INT 700
18020: PPUSH
18021: CALL_OW 67
// SetSide ( un , your_side ) ;
18025: LD_VAR 0 1
18029: PPUSH
18030: LD_OWVAR 2
18034: PPUSH
18035: CALL_OW 235
// end ;
18039: PPOPN 2
18041: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18042: LD_EXP 40
18046: PUSH
18047: LD_EXP 73
18051: AND
18052: IFFALSE 18158
18054: GO 18056
18056: DISABLE
18057: LD_INT 0
18059: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18060: LD_ADDR_VAR 0 1
18064: PUSH
18065: LD_INT 22
18067: PUSH
18068: LD_OWVAR 2
18072: PUSH
18073: EMPTY
18074: LIST
18075: LIST
18076: PUSH
18077: LD_INT 2
18079: PUSH
18080: LD_INT 30
18082: PUSH
18083: LD_INT 0
18085: PUSH
18086: EMPTY
18087: LIST
18088: LIST
18089: PUSH
18090: LD_INT 30
18092: PUSH
18093: LD_INT 1
18095: PUSH
18096: EMPTY
18097: LIST
18098: LIST
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: LIST
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PPUSH
18109: CALL_OW 69
18113: ST_TO_ADDR
// if not depot then
18114: LD_VAR 0 1
18118: NOT
18119: IFFALSE 18123
// exit ;
18121: GO 18158
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18123: LD_VAR 0 1
18127: PUSH
18128: LD_INT 1
18130: ARRAY
18131: PPUSH
18132: CALL_OW 250
18136: PPUSH
18137: LD_VAR 0 1
18141: PUSH
18142: LD_INT 1
18144: ARRAY
18145: PPUSH
18146: CALL_OW 251
18150: PPUSH
18151: LD_INT 70
18153: PPUSH
18154: CALL_OW 495
// end ;
18158: PPOPN 1
18160: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18161: LD_EXP 40
18165: PUSH
18166: LD_EXP 74
18170: AND
18171: IFFALSE 18382
18173: GO 18175
18175: DISABLE
18176: LD_INT 0
18178: PPUSH
18179: PPUSH
18180: PPUSH
18181: PPUSH
18182: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18183: LD_ADDR_VAR 0 5
18187: PUSH
18188: LD_INT 22
18190: PUSH
18191: LD_OWVAR 2
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: PUSH
18200: LD_INT 21
18202: PUSH
18203: LD_INT 1
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PPUSH
18214: CALL_OW 69
18218: ST_TO_ADDR
// if not tmp then
18219: LD_VAR 0 5
18223: NOT
18224: IFFALSE 18228
// exit ;
18226: GO 18382
// for i in tmp do
18228: LD_ADDR_VAR 0 1
18232: PUSH
18233: LD_VAR 0 5
18237: PUSH
18238: FOR_IN
18239: IFFALSE 18380
// begin d := rand ( 0 , 5 ) ;
18241: LD_ADDR_VAR 0 4
18245: PUSH
18246: LD_INT 0
18248: PPUSH
18249: LD_INT 5
18251: PPUSH
18252: CALL_OW 12
18256: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18257: LD_ADDR_VAR 0 2
18261: PUSH
18262: LD_VAR 0 1
18266: PPUSH
18267: CALL_OW 250
18271: PPUSH
18272: LD_VAR 0 4
18276: PPUSH
18277: LD_INT 3
18279: PPUSH
18280: LD_INT 12
18282: PPUSH
18283: CALL_OW 12
18287: PPUSH
18288: CALL_OW 272
18292: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18293: LD_ADDR_VAR 0 3
18297: PUSH
18298: LD_VAR 0 1
18302: PPUSH
18303: CALL_OW 251
18307: PPUSH
18308: LD_VAR 0 4
18312: PPUSH
18313: LD_INT 3
18315: PPUSH
18316: LD_INT 12
18318: PPUSH
18319: CALL_OW 12
18323: PPUSH
18324: CALL_OW 273
18328: ST_TO_ADDR
// if ValidHex ( x , y ) then
18329: LD_VAR 0 2
18333: PPUSH
18334: LD_VAR 0 3
18338: PPUSH
18339: CALL_OW 488
18343: IFFALSE 18378
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18345: LD_VAR 0 1
18349: PPUSH
18350: LD_VAR 0 2
18354: PPUSH
18355: LD_VAR 0 3
18359: PPUSH
18360: LD_INT 3
18362: PPUSH
18363: LD_INT 6
18365: PPUSH
18366: CALL_OW 12
18370: PPUSH
18371: LD_INT 1
18373: PPUSH
18374: CALL_OW 483
// end ;
18378: GO 18238
18380: POP
18381: POP
// end ;
18382: PPOPN 5
18384: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18385: LD_EXP 40
18389: PUSH
18390: LD_EXP 75
18394: AND
18395: IFFALSE 18489
18397: GO 18399
18399: DISABLE
18400: LD_INT 0
18402: PPUSH
18403: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18404: LD_ADDR_VAR 0 2
18408: PUSH
18409: LD_INT 22
18411: PUSH
18412: LD_OWVAR 2
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: PUSH
18421: LD_INT 32
18423: PUSH
18424: LD_INT 1
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PUSH
18431: LD_INT 21
18433: PUSH
18434: LD_INT 2
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: LIST
18445: PPUSH
18446: CALL_OW 69
18450: ST_TO_ADDR
// if not tmp then
18451: LD_VAR 0 2
18455: NOT
18456: IFFALSE 18460
// exit ;
18458: GO 18489
// for i in tmp do
18460: LD_ADDR_VAR 0 1
18464: PUSH
18465: LD_VAR 0 2
18469: PUSH
18470: FOR_IN
18471: IFFALSE 18487
// SetFuel ( i , 0 ) ;
18473: LD_VAR 0 1
18477: PPUSH
18478: LD_INT 0
18480: PPUSH
18481: CALL_OW 240
18485: GO 18470
18487: POP
18488: POP
// end ;
18489: PPOPN 2
18491: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18492: LD_EXP 40
18496: PUSH
18497: LD_EXP 76
18501: AND
18502: IFFALSE 18568
18504: GO 18506
18506: DISABLE
18507: LD_INT 0
18509: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18510: LD_ADDR_VAR 0 1
18514: PUSH
18515: LD_INT 22
18517: PUSH
18518: LD_OWVAR 2
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: LD_INT 30
18529: PUSH
18530: LD_INT 29
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: PPUSH
18541: CALL_OW 69
18545: ST_TO_ADDR
// if not tmp then
18546: LD_VAR 0 1
18550: NOT
18551: IFFALSE 18555
// exit ;
18553: GO 18568
// DestroyUnit ( tmp [ 1 ] ) ;
18555: LD_VAR 0 1
18559: PUSH
18560: LD_INT 1
18562: ARRAY
18563: PPUSH
18564: CALL_OW 65
// end ;
18568: PPOPN 1
18570: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18571: LD_EXP 40
18575: PUSH
18576: LD_EXP 78
18580: AND
18581: IFFALSE 18710
18583: GO 18585
18585: DISABLE
18586: LD_INT 0
18588: PPUSH
// begin uc_side := 0 ;
18589: LD_ADDR_OWVAR 20
18593: PUSH
18594: LD_INT 0
18596: ST_TO_ADDR
// uc_nation := nation_arabian ;
18597: LD_ADDR_OWVAR 21
18601: PUSH
18602: LD_INT 2
18604: ST_TO_ADDR
// hc_gallery :=  ;
18605: LD_ADDR_OWVAR 33
18609: PUSH
18610: LD_STRING 
18612: ST_TO_ADDR
// hc_name :=  ;
18613: LD_ADDR_OWVAR 26
18617: PUSH
18618: LD_STRING 
18620: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18621: LD_INT 1
18623: PPUSH
18624: LD_INT 11
18626: PPUSH
18627: LD_INT 10
18629: PPUSH
18630: CALL_OW 380
// un := CreateHuman ;
18634: LD_ADDR_VAR 0 1
18638: PUSH
18639: CALL_OW 44
18643: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18644: LD_VAR 0 1
18648: PPUSH
18649: LD_INT 1
18651: PPUSH
18652: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18656: LD_INT 35
18658: PPUSH
18659: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18663: LD_VAR 0 1
18667: PPUSH
18668: LD_INT 22
18670: PUSH
18671: LD_OWVAR 2
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PPUSH
18680: CALL_OW 69
18684: PPUSH
18685: LD_VAR 0 1
18689: PPUSH
18690: CALL_OW 74
18694: PPUSH
18695: CALL_OW 115
// until IsDead ( un ) ;
18699: LD_VAR 0 1
18703: PPUSH
18704: CALL_OW 301
18708: IFFALSE 18656
// end ;
18710: PPOPN 1
18712: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18713: LD_EXP 40
18717: PUSH
18718: LD_EXP 80
18722: AND
18723: IFFALSE 18735
18725: GO 18727
18727: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18728: LD_STRING earthquake(getX(game), 0, 32)
18730: PPUSH
18731: CALL_OW 559
18735: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18736: LD_EXP 40
18740: PUSH
18741: LD_EXP 81
18745: AND
18746: IFFALSE 18837
18748: GO 18750
18750: DISABLE
18751: LD_INT 0
18753: PPUSH
// begin enable ;
18754: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18755: LD_ADDR_VAR 0 1
18759: PUSH
18760: LD_INT 22
18762: PUSH
18763: LD_OWVAR 2
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: PUSH
18772: LD_INT 21
18774: PUSH
18775: LD_INT 2
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PUSH
18782: LD_INT 33
18784: PUSH
18785: LD_INT 3
18787: PUSH
18788: EMPTY
18789: LIST
18790: LIST
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: LIST
18796: PPUSH
18797: CALL_OW 69
18801: ST_TO_ADDR
// if not tmp then
18802: LD_VAR 0 1
18806: NOT
18807: IFFALSE 18811
// exit ;
18809: GO 18837
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18811: LD_VAR 0 1
18815: PUSH
18816: LD_INT 1
18818: PPUSH
18819: LD_VAR 0 1
18823: PPUSH
18824: CALL_OW 12
18828: ARRAY
18829: PPUSH
18830: LD_INT 1
18832: PPUSH
18833: CALL_OW 234
// end ;
18837: PPOPN 1
18839: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18840: LD_EXP 40
18844: PUSH
18845: LD_EXP 82
18849: AND
18850: IFFALSE 18991
18852: GO 18854
18854: DISABLE
18855: LD_INT 0
18857: PPUSH
18858: PPUSH
18859: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18860: LD_ADDR_VAR 0 3
18864: PUSH
18865: LD_INT 22
18867: PUSH
18868: LD_OWVAR 2
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: LD_INT 25
18879: PUSH
18880: LD_INT 1
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PPUSH
18891: CALL_OW 69
18895: ST_TO_ADDR
// if not tmp then
18896: LD_VAR 0 3
18900: NOT
18901: IFFALSE 18905
// exit ;
18903: GO 18991
// un := tmp [ rand ( 1 , tmp ) ] ;
18905: LD_ADDR_VAR 0 2
18909: PUSH
18910: LD_VAR 0 3
18914: PUSH
18915: LD_INT 1
18917: PPUSH
18918: LD_VAR 0 3
18922: PPUSH
18923: CALL_OW 12
18927: ARRAY
18928: ST_TO_ADDR
// if Crawls ( un ) then
18929: LD_VAR 0 2
18933: PPUSH
18934: CALL_OW 318
18938: IFFALSE 18949
// ComWalk ( un ) ;
18940: LD_VAR 0 2
18944: PPUSH
18945: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18949: LD_VAR 0 2
18953: PPUSH
18954: LD_INT 9
18956: PPUSH
18957: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18961: LD_INT 28
18963: PPUSH
18964: LD_OWVAR 2
18968: PPUSH
18969: LD_INT 2
18971: PPUSH
18972: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18976: LD_INT 29
18978: PPUSH
18979: LD_OWVAR 2
18983: PPUSH
18984: LD_INT 2
18986: PPUSH
18987: CALL_OW 322
// end ;
18991: PPOPN 3
18993: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18994: LD_EXP 40
18998: PUSH
18999: LD_EXP 83
19003: AND
19004: IFFALSE 19115
19006: GO 19008
19008: DISABLE
19009: LD_INT 0
19011: PPUSH
19012: PPUSH
19013: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19014: LD_ADDR_VAR 0 3
19018: PUSH
19019: LD_INT 22
19021: PUSH
19022: LD_OWVAR 2
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: PUSH
19031: LD_INT 25
19033: PUSH
19034: LD_INT 1
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: PPUSH
19045: CALL_OW 69
19049: ST_TO_ADDR
// if not tmp then
19050: LD_VAR 0 3
19054: NOT
19055: IFFALSE 19059
// exit ;
19057: GO 19115
// un := tmp [ rand ( 1 , tmp ) ] ;
19059: LD_ADDR_VAR 0 2
19063: PUSH
19064: LD_VAR 0 3
19068: PUSH
19069: LD_INT 1
19071: PPUSH
19072: LD_VAR 0 3
19076: PPUSH
19077: CALL_OW 12
19081: ARRAY
19082: ST_TO_ADDR
// if Crawls ( un ) then
19083: LD_VAR 0 2
19087: PPUSH
19088: CALL_OW 318
19092: IFFALSE 19103
// ComWalk ( un ) ;
19094: LD_VAR 0 2
19098: PPUSH
19099: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19103: LD_VAR 0 2
19107: PPUSH
19108: LD_INT 8
19110: PPUSH
19111: CALL_OW 336
// end ;
19115: PPOPN 3
19117: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19118: LD_EXP 40
19122: PUSH
19123: LD_EXP 84
19127: AND
19128: IFFALSE 19272
19130: GO 19132
19132: DISABLE
19133: LD_INT 0
19135: PPUSH
19136: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19137: LD_ADDR_VAR 0 2
19141: PUSH
19142: LD_INT 22
19144: PUSH
19145: LD_OWVAR 2
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PUSH
19154: LD_INT 21
19156: PUSH
19157: LD_INT 2
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: PUSH
19164: LD_INT 2
19166: PUSH
19167: LD_INT 34
19169: PUSH
19170: LD_INT 12
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PUSH
19177: LD_INT 34
19179: PUSH
19180: LD_INT 51
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: LD_INT 34
19189: PUSH
19190: LD_INT 32
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: LIST
19207: PPUSH
19208: CALL_OW 69
19212: ST_TO_ADDR
// if not tmp then
19213: LD_VAR 0 2
19217: NOT
19218: IFFALSE 19222
// exit ;
19220: GO 19272
// for i in tmp do
19222: LD_ADDR_VAR 0 1
19226: PUSH
19227: LD_VAR 0 2
19231: PUSH
19232: FOR_IN
19233: IFFALSE 19270
// if GetCargo ( i , mat_artifact ) = 0 then
19235: LD_VAR 0 1
19239: PPUSH
19240: LD_INT 4
19242: PPUSH
19243: CALL_OW 289
19247: PUSH
19248: LD_INT 0
19250: EQUAL
19251: IFFALSE 19268
// SetCargo ( i , mat_siberit , 100 ) ;
19253: LD_VAR 0 1
19257: PPUSH
19258: LD_INT 3
19260: PPUSH
19261: LD_INT 100
19263: PPUSH
19264: CALL_OW 290
19268: GO 19232
19270: POP
19271: POP
// end ;
19272: PPOPN 2
19274: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19275: LD_EXP 40
19279: PUSH
19280: LD_EXP 85
19284: AND
19285: IFFALSE 19468
19287: GO 19289
19289: DISABLE
19290: LD_INT 0
19292: PPUSH
19293: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19294: LD_ADDR_VAR 0 2
19298: PUSH
19299: LD_INT 22
19301: PUSH
19302: LD_OWVAR 2
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: PPUSH
19311: CALL_OW 69
19315: ST_TO_ADDR
// if not tmp then
19316: LD_VAR 0 2
19320: NOT
19321: IFFALSE 19325
// exit ;
19323: GO 19468
// for i := 1 to 2 do
19325: LD_ADDR_VAR 0 1
19329: PUSH
19330: DOUBLE
19331: LD_INT 1
19333: DEC
19334: ST_TO_ADDR
19335: LD_INT 2
19337: PUSH
19338: FOR_TO
19339: IFFALSE 19466
// begin uc_side := your_side ;
19341: LD_ADDR_OWVAR 20
19345: PUSH
19346: LD_OWVAR 2
19350: ST_TO_ADDR
// uc_nation := nation_american ;
19351: LD_ADDR_OWVAR 21
19355: PUSH
19356: LD_INT 1
19358: ST_TO_ADDR
// vc_chassis := us_morphling ;
19359: LD_ADDR_OWVAR 37
19363: PUSH
19364: LD_INT 5
19366: ST_TO_ADDR
// vc_engine := engine_siberite ;
19367: LD_ADDR_OWVAR 39
19371: PUSH
19372: LD_INT 3
19374: ST_TO_ADDR
// vc_control := control_computer ;
19375: LD_ADDR_OWVAR 38
19379: PUSH
19380: LD_INT 3
19382: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19383: LD_ADDR_OWVAR 40
19387: PUSH
19388: LD_INT 10
19390: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19391: LD_VAR 0 2
19395: PUSH
19396: LD_INT 1
19398: ARRAY
19399: PPUSH
19400: CALL_OW 310
19404: NOT
19405: IFFALSE 19452
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19407: CALL_OW 45
19411: PPUSH
19412: LD_VAR 0 2
19416: PUSH
19417: LD_INT 1
19419: ARRAY
19420: PPUSH
19421: CALL_OW 250
19425: PPUSH
19426: LD_VAR 0 2
19430: PUSH
19431: LD_INT 1
19433: ARRAY
19434: PPUSH
19435: CALL_OW 251
19439: PPUSH
19440: LD_INT 12
19442: PPUSH
19443: LD_INT 1
19445: PPUSH
19446: CALL_OW 50
19450: GO 19464
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19452: CALL_OW 45
19456: PPUSH
19457: LD_INT 1
19459: PPUSH
19460: CALL_OW 51
// end ;
19464: GO 19338
19466: POP
19467: POP
// end ;
19468: PPOPN 2
19470: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19471: LD_EXP 40
19475: PUSH
19476: LD_EXP 86
19480: AND
19481: IFFALSE 19703
19483: GO 19485
19485: DISABLE
19486: LD_INT 0
19488: PPUSH
19489: PPUSH
19490: PPUSH
19491: PPUSH
19492: PPUSH
19493: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19494: LD_ADDR_VAR 0 6
19498: PUSH
19499: LD_INT 22
19501: PUSH
19502: LD_OWVAR 2
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 21
19513: PUSH
19514: LD_INT 1
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PUSH
19521: LD_INT 3
19523: PUSH
19524: LD_INT 23
19526: PUSH
19527: LD_INT 0
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: LIST
19542: PPUSH
19543: CALL_OW 69
19547: ST_TO_ADDR
// if not tmp then
19548: LD_VAR 0 6
19552: NOT
19553: IFFALSE 19557
// exit ;
19555: GO 19703
// s1 := rand ( 1 , 4 ) ;
19557: LD_ADDR_VAR 0 2
19561: PUSH
19562: LD_INT 1
19564: PPUSH
19565: LD_INT 4
19567: PPUSH
19568: CALL_OW 12
19572: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19573: LD_ADDR_VAR 0 4
19577: PUSH
19578: LD_VAR 0 6
19582: PUSH
19583: LD_INT 1
19585: ARRAY
19586: PPUSH
19587: LD_VAR 0 2
19591: PPUSH
19592: CALL_OW 259
19596: ST_TO_ADDR
// if s1 = 1 then
19597: LD_VAR 0 2
19601: PUSH
19602: LD_INT 1
19604: EQUAL
19605: IFFALSE 19625
// s2 := rand ( 2 , 4 ) else
19607: LD_ADDR_VAR 0 3
19611: PUSH
19612: LD_INT 2
19614: PPUSH
19615: LD_INT 4
19617: PPUSH
19618: CALL_OW 12
19622: ST_TO_ADDR
19623: GO 19633
// s2 := 1 ;
19625: LD_ADDR_VAR 0 3
19629: PUSH
19630: LD_INT 1
19632: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19633: LD_ADDR_VAR 0 5
19637: PUSH
19638: LD_VAR 0 6
19642: PUSH
19643: LD_INT 1
19645: ARRAY
19646: PPUSH
19647: LD_VAR 0 3
19651: PPUSH
19652: CALL_OW 259
19656: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19657: LD_VAR 0 6
19661: PUSH
19662: LD_INT 1
19664: ARRAY
19665: PPUSH
19666: LD_VAR 0 2
19670: PPUSH
19671: LD_VAR 0 5
19675: PPUSH
19676: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19680: LD_VAR 0 6
19684: PUSH
19685: LD_INT 1
19687: ARRAY
19688: PPUSH
19689: LD_VAR 0 3
19693: PPUSH
19694: LD_VAR 0 4
19698: PPUSH
19699: CALL_OW 237
// end ;
19703: PPOPN 6
19705: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19706: LD_EXP 40
19710: PUSH
19711: LD_EXP 87
19715: AND
19716: IFFALSE 19795
19718: GO 19720
19720: DISABLE
19721: LD_INT 0
19723: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19724: LD_ADDR_VAR 0 1
19728: PUSH
19729: LD_INT 22
19731: PUSH
19732: LD_OWVAR 2
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: PUSH
19741: LD_INT 30
19743: PUSH
19744: LD_INT 3
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: PPUSH
19755: CALL_OW 69
19759: ST_TO_ADDR
// if not tmp then
19760: LD_VAR 0 1
19764: NOT
19765: IFFALSE 19769
// exit ;
19767: GO 19795
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19769: LD_VAR 0 1
19773: PUSH
19774: LD_INT 1
19776: PPUSH
19777: LD_VAR 0 1
19781: PPUSH
19782: CALL_OW 12
19786: ARRAY
19787: PPUSH
19788: LD_INT 1
19790: PPUSH
19791: CALL_OW 234
// end ;
19795: PPOPN 1
19797: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19798: LD_EXP 40
19802: PUSH
19803: LD_EXP 88
19807: AND
19808: IFFALSE 19920
19810: GO 19812
19812: DISABLE
19813: LD_INT 0
19815: PPUSH
19816: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19817: LD_ADDR_VAR 0 2
19821: PUSH
19822: LD_INT 22
19824: PUSH
19825: LD_OWVAR 2
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PUSH
19834: LD_INT 2
19836: PUSH
19837: LD_INT 30
19839: PUSH
19840: LD_INT 27
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: PUSH
19847: LD_INT 30
19849: PUSH
19850: LD_INT 26
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: PUSH
19857: LD_INT 30
19859: PUSH
19860: LD_INT 28
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PUSH
19867: EMPTY
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: PPUSH
19877: CALL_OW 69
19881: ST_TO_ADDR
// if not tmp then
19882: LD_VAR 0 2
19886: NOT
19887: IFFALSE 19891
// exit ;
19889: GO 19920
// for i in tmp do
19891: LD_ADDR_VAR 0 1
19895: PUSH
19896: LD_VAR 0 2
19900: PUSH
19901: FOR_IN
19902: IFFALSE 19918
// SetLives ( i , 1 ) ;
19904: LD_VAR 0 1
19908: PPUSH
19909: LD_INT 1
19911: PPUSH
19912: CALL_OW 234
19916: GO 19901
19918: POP
19919: POP
// end ;
19920: PPOPN 2
19922: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19923: LD_EXP 40
19927: PUSH
19928: LD_EXP 89
19932: AND
19933: IFFALSE 20207
19935: GO 19937
19937: DISABLE
19938: LD_INT 0
19940: PPUSH
19941: PPUSH
19942: PPUSH
// begin i := rand ( 1 , 7 ) ;
19943: LD_ADDR_VAR 0 1
19947: PUSH
19948: LD_INT 1
19950: PPUSH
19951: LD_INT 7
19953: PPUSH
19954: CALL_OW 12
19958: ST_TO_ADDR
// case i of 1 :
19959: LD_VAR 0 1
19963: PUSH
19964: LD_INT 1
19966: DOUBLE
19967: EQUAL
19968: IFTRUE 19972
19970: GO 19982
19972: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19973: LD_STRING earthquake(getX(game), 0, 32)
19975: PPUSH
19976: CALL_OW 559
19980: GO 20207
19982: LD_INT 2
19984: DOUBLE
19985: EQUAL
19986: IFTRUE 19990
19988: GO 20004
19990: POP
// begin ToLua ( displayStucuk(); ) ;
19991: LD_STRING displayStucuk();
19993: PPUSH
19994: CALL_OW 559
// ResetFog ;
19998: CALL_OW 335
// end ; 3 :
20002: GO 20207
20004: LD_INT 3
20006: DOUBLE
20007: EQUAL
20008: IFTRUE 20012
20010: GO 20116
20012: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20013: LD_ADDR_VAR 0 2
20017: PUSH
20018: LD_INT 22
20020: PUSH
20021: LD_OWVAR 2
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: PUSH
20030: LD_INT 25
20032: PUSH
20033: LD_INT 1
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: PPUSH
20044: CALL_OW 69
20048: ST_TO_ADDR
// if not tmp then
20049: LD_VAR 0 2
20053: NOT
20054: IFFALSE 20058
// exit ;
20056: GO 20207
// un := tmp [ rand ( 1 , tmp ) ] ;
20058: LD_ADDR_VAR 0 3
20062: PUSH
20063: LD_VAR 0 2
20067: PUSH
20068: LD_INT 1
20070: PPUSH
20071: LD_VAR 0 2
20075: PPUSH
20076: CALL_OW 12
20080: ARRAY
20081: ST_TO_ADDR
// if Crawls ( un ) then
20082: LD_VAR 0 3
20086: PPUSH
20087: CALL_OW 318
20091: IFFALSE 20102
// ComWalk ( un ) ;
20093: LD_VAR 0 3
20097: PPUSH
20098: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20102: LD_VAR 0 3
20106: PPUSH
20107: LD_INT 8
20109: PPUSH
20110: CALL_OW 336
// end ; 4 :
20114: GO 20207
20116: LD_INT 4
20118: DOUBLE
20119: EQUAL
20120: IFTRUE 20124
20122: GO 20185
20124: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20125: LD_ADDR_VAR 0 2
20129: PUSH
20130: LD_INT 22
20132: PUSH
20133: LD_OWVAR 2
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: PUSH
20142: LD_INT 30
20144: PUSH
20145: LD_INT 29
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: PPUSH
20156: CALL_OW 69
20160: ST_TO_ADDR
// if not tmp then
20161: LD_VAR 0 2
20165: NOT
20166: IFFALSE 20170
// exit ;
20168: GO 20207
// DestroyUnit ( tmp [ 1 ] ) ;
20170: LD_VAR 0 2
20174: PUSH
20175: LD_INT 1
20177: ARRAY
20178: PPUSH
20179: CALL_OW 65
// end ; 5 .. 7 :
20183: GO 20207
20185: LD_INT 5
20187: DOUBLE
20188: GREATEREQUAL
20189: IFFALSE 20197
20191: LD_INT 7
20193: DOUBLE
20194: LESSEQUAL
20195: IFTRUE 20199
20197: GO 20206
20199: POP
// StreamSibBomb ; end ;
20200: CALL 16457 0 0
20204: GO 20207
20206: POP
// end ;
20207: PPOPN 3
20209: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20210: LD_EXP 40
20214: PUSH
20215: LD_EXP 90
20219: AND
20220: IFFALSE 20376
20222: GO 20224
20224: DISABLE
20225: LD_INT 0
20227: PPUSH
20228: PPUSH
20229: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20230: LD_ADDR_VAR 0 2
20234: PUSH
20235: LD_INT 81
20237: PUSH
20238: LD_OWVAR 2
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: PUSH
20247: LD_INT 2
20249: PUSH
20250: LD_INT 21
20252: PUSH
20253: LD_INT 1
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: PUSH
20260: LD_INT 21
20262: PUSH
20263: LD_INT 2
20265: PUSH
20266: EMPTY
20267: LIST
20268: LIST
20269: PUSH
20270: EMPTY
20271: LIST
20272: LIST
20273: LIST
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: PPUSH
20279: CALL_OW 69
20283: ST_TO_ADDR
// if not tmp then
20284: LD_VAR 0 2
20288: NOT
20289: IFFALSE 20293
// exit ;
20291: GO 20376
// p := 0 ;
20293: LD_ADDR_VAR 0 3
20297: PUSH
20298: LD_INT 0
20300: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20301: LD_INT 35
20303: PPUSH
20304: CALL_OW 67
// p := p + 1 ;
20308: LD_ADDR_VAR 0 3
20312: PUSH
20313: LD_VAR 0 3
20317: PUSH
20318: LD_INT 1
20320: PLUS
20321: ST_TO_ADDR
// for i in tmp do
20322: LD_ADDR_VAR 0 1
20326: PUSH
20327: LD_VAR 0 2
20331: PUSH
20332: FOR_IN
20333: IFFALSE 20364
// if GetLives ( i ) < 1000 then
20335: LD_VAR 0 1
20339: PPUSH
20340: CALL_OW 256
20344: PUSH
20345: LD_INT 1000
20347: LESS
20348: IFFALSE 20362
// SetLives ( i , 1000 ) ;
20350: LD_VAR 0 1
20354: PPUSH
20355: LD_INT 1000
20357: PPUSH
20358: CALL_OW 234
20362: GO 20332
20364: POP
20365: POP
// until p > 20 ;
20366: LD_VAR 0 3
20370: PUSH
20371: LD_INT 20
20373: GREATER
20374: IFFALSE 20301
// end ;
20376: PPOPN 3
20378: END
// every 0 0$1 trigger StreamModeActive and sTime do
20379: LD_EXP 40
20383: PUSH
20384: LD_EXP 91
20388: AND
20389: IFFALSE 20424
20391: GO 20393
20393: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20394: LD_INT 28
20396: PPUSH
20397: LD_OWVAR 2
20401: PPUSH
20402: LD_INT 2
20404: PPUSH
20405: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20409: LD_INT 30
20411: PPUSH
20412: LD_OWVAR 2
20416: PPUSH
20417: LD_INT 2
20419: PPUSH
20420: CALL_OW 322
// end ;
20424: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20425: LD_EXP 40
20429: PUSH
20430: LD_EXP 92
20434: AND
20435: IFFALSE 20556
20437: GO 20439
20439: DISABLE
20440: LD_INT 0
20442: PPUSH
20443: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20444: LD_ADDR_VAR 0 2
20448: PUSH
20449: LD_INT 22
20451: PUSH
20452: LD_OWVAR 2
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: PUSH
20461: LD_INT 21
20463: PUSH
20464: LD_INT 1
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: PUSH
20471: LD_INT 3
20473: PUSH
20474: LD_INT 23
20476: PUSH
20477: LD_INT 0
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: LIST
20492: PPUSH
20493: CALL_OW 69
20497: ST_TO_ADDR
// if not tmp then
20498: LD_VAR 0 2
20502: NOT
20503: IFFALSE 20507
// exit ;
20505: GO 20556
// for i in tmp do
20507: LD_ADDR_VAR 0 1
20511: PUSH
20512: LD_VAR 0 2
20516: PUSH
20517: FOR_IN
20518: IFFALSE 20554
// begin if Crawls ( i ) then
20520: LD_VAR 0 1
20524: PPUSH
20525: CALL_OW 318
20529: IFFALSE 20540
// ComWalk ( i ) ;
20531: LD_VAR 0 1
20535: PPUSH
20536: CALL_OW 138
// SetClass ( i , 2 ) ;
20540: LD_VAR 0 1
20544: PPUSH
20545: LD_INT 2
20547: PPUSH
20548: CALL_OW 336
// end ;
20552: GO 20517
20554: POP
20555: POP
// end ;
20556: PPOPN 2
20558: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20559: LD_EXP 40
20563: PUSH
20564: LD_EXP 93
20568: AND
20569: IFFALSE 20850
20571: GO 20573
20573: DISABLE
20574: LD_INT 0
20576: PPUSH
20577: PPUSH
20578: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20579: LD_OWVAR 2
20583: PPUSH
20584: LD_INT 9
20586: PPUSH
20587: LD_INT 1
20589: PPUSH
20590: LD_INT 1
20592: PPUSH
20593: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20597: LD_INT 9
20599: PPUSH
20600: LD_OWVAR 2
20604: PPUSH
20605: CALL_OW 343
// uc_side := 9 ;
20609: LD_ADDR_OWVAR 20
20613: PUSH
20614: LD_INT 9
20616: ST_TO_ADDR
// uc_nation := 2 ;
20617: LD_ADDR_OWVAR 21
20621: PUSH
20622: LD_INT 2
20624: ST_TO_ADDR
// hc_name := Dark Warrior ;
20625: LD_ADDR_OWVAR 26
20629: PUSH
20630: LD_STRING Dark Warrior
20632: ST_TO_ADDR
// hc_gallery :=  ;
20633: LD_ADDR_OWVAR 33
20637: PUSH
20638: LD_STRING 
20640: ST_TO_ADDR
// hc_noskilllimit := true ;
20641: LD_ADDR_OWVAR 76
20645: PUSH
20646: LD_INT 1
20648: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20649: LD_ADDR_OWVAR 31
20653: PUSH
20654: LD_INT 30
20656: PUSH
20657: LD_INT 30
20659: PUSH
20660: LD_INT 30
20662: PUSH
20663: LD_INT 30
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: ST_TO_ADDR
// un := CreateHuman ;
20672: LD_ADDR_VAR 0 3
20676: PUSH
20677: CALL_OW 44
20681: ST_TO_ADDR
// hc_noskilllimit := false ;
20682: LD_ADDR_OWVAR 76
20686: PUSH
20687: LD_INT 0
20689: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20690: LD_VAR 0 3
20694: PPUSH
20695: LD_INT 1
20697: PPUSH
20698: CALL_OW 51
// p := 0 ;
20702: LD_ADDR_VAR 0 2
20706: PUSH
20707: LD_INT 0
20709: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20710: LD_INT 35
20712: PPUSH
20713: CALL_OW 67
// p := p + 1 ;
20717: LD_ADDR_VAR 0 2
20721: PUSH
20722: LD_VAR 0 2
20726: PUSH
20727: LD_INT 1
20729: PLUS
20730: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20731: LD_VAR 0 3
20735: PPUSH
20736: CALL_OW 256
20740: PUSH
20741: LD_INT 1000
20743: LESS
20744: IFFALSE 20758
// SetLives ( un , 1000 ) ;
20746: LD_VAR 0 3
20750: PPUSH
20751: LD_INT 1000
20753: PPUSH
20754: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20758: LD_VAR 0 3
20762: PPUSH
20763: LD_INT 81
20765: PUSH
20766: LD_OWVAR 2
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: PUSH
20775: LD_INT 91
20777: PUSH
20778: LD_VAR 0 3
20782: PUSH
20783: LD_INT 30
20785: PUSH
20786: EMPTY
20787: LIST
20788: LIST
20789: LIST
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: PPUSH
20795: CALL_OW 69
20799: PPUSH
20800: LD_VAR 0 3
20804: PPUSH
20805: CALL_OW 74
20809: PPUSH
20810: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
20814: LD_VAR 0 2
20818: PUSH
20819: LD_INT 60
20821: GREATER
20822: PUSH
20823: LD_VAR 0 3
20827: PPUSH
20828: CALL_OW 301
20832: OR
20833: IFFALSE 20710
// if un then
20835: LD_VAR 0 3
20839: IFFALSE 20850
// RemoveUnit ( un ) ;
20841: LD_VAR 0 3
20845: PPUSH
20846: CALL_OW 64
// end ;
20850: PPOPN 3
20852: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20853: LD_INT 0
20855: PPUSH
20856: PPUSH
20857: PPUSH
20858: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20859: LD_ADDR_VAR 0 4
20863: PUSH
20864: LD_INT 22
20866: PUSH
20867: LD_OWVAR 2
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: PUSH
20876: LD_INT 2
20878: PUSH
20879: LD_INT 30
20881: PUSH
20882: LD_INT 0
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: PUSH
20889: LD_INT 30
20891: PUSH
20892: LD_INT 1
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: LIST
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PPUSH
20908: CALL_OW 69
20912: ST_TO_ADDR
// if not tmp then
20913: LD_VAR 0 4
20917: NOT
20918: IFFALSE 20922
// exit ;
20920: GO 20981
// for i in tmp do
20922: LD_ADDR_VAR 0 2
20926: PUSH
20927: LD_VAR 0 4
20931: PUSH
20932: FOR_IN
20933: IFFALSE 20979
// for j = 1 to 3 do
20935: LD_ADDR_VAR 0 3
20939: PUSH
20940: DOUBLE
20941: LD_INT 1
20943: DEC
20944: ST_TO_ADDR
20945: LD_INT 3
20947: PUSH
20948: FOR_TO
20949: IFFALSE 20975
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20951: LD_VAR 0 2
20955: PPUSH
20956: CALL_OW 274
20960: PPUSH
20961: LD_VAR 0 3
20965: PPUSH
20966: LD_INT 99999
20968: PPUSH
20969: CALL_OW 277
20973: GO 20948
20975: POP
20976: POP
20977: GO 20932
20979: POP
20980: POP
// end ;
20981: LD_VAR 0 1
20985: RET
// export function hHackSetLevel10 ; var i , j ; begin
20986: LD_INT 0
20988: PPUSH
20989: PPUSH
20990: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20991: LD_ADDR_VAR 0 2
20995: PUSH
20996: LD_INT 21
20998: PUSH
20999: LD_INT 1
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: PPUSH
21006: CALL_OW 69
21010: PUSH
21011: FOR_IN
21012: IFFALSE 21064
// if IsSelected ( i ) then
21014: LD_VAR 0 2
21018: PPUSH
21019: CALL_OW 306
21023: IFFALSE 21062
// begin for j := 1 to 4 do
21025: LD_ADDR_VAR 0 3
21029: PUSH
21030: DOUBLE
21031: LD_INT 1
21033: DEC
21034: ST_TO_ADDR
21035: LD_INT 4
21037: PUSH
21038: FOR_TO
21039: IFFALSE 21060
// SetSkill ( i , j , 10 ) ;
21041: LD_VAR 0 2
21045: PPUSH
21046: LD_VAR 0 3
21050: PPUSH
21051: LD_INT 10
21053: PPUSH
21054: CALL_OW 237
21058: GO 21038
21060: POP
21061: POP
// end ;
21062: GO 21011
21064: POP
21065: POP
// end ;
21066: LD_VAR 0 1
21070: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21071: LD_INT 0
21073: PPUSH
21074: PPUSH
21075: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21076: LD_ADDR_VAR 0 2
21080: PUSH
21081: LD_INT 22
21083: PUSH
21084: LD_OWVAR 2
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: PUSH
21093: LD_INT 21
21095: PUSH
21096: LD_INT 1
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: PPUSH
21107: CALL_OW 69
21111: PUSH
21112: FOR_IN
21113: IFFALSE 21154
// begin for j := 1 to 4 do
21115: LD_ADDR_VAR 0 3
21119: PUSH
21120: DOUBLE
21121: LD_INT 1
21123: DEC
21124: ST_TO_ADDR
21125: LD_INT 4
21127: PUSH
21128: FOR_TO
21129: IFFALSE 21150
// SetSkill ( i , j , 10 ) ;
21131: LD_VAR 0 2
21135: PPUSH
21136: LD_VAR 0 3
21140: PPUSH
21141: LD_INT 10
21143: PPUSH
21144: CALL_OW 237
21148: GO 21128
21150: POP
21151: POP
// end ;
21152: GO 21112
21154: POP
21155: POP
// end ;
21156: LD_VAR 0 1
21160: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
21161: LD_INT 0
21163: PPUSH
// uc_side := your_side ;
21164: LD_ADDR_OWVAR 20
21168: PUSH
21169: LD_OWVAR 2
21173: ST_TO_ADDR
// uc_nation := nation ;
21174: LD_ADDR_OWVAR 21
21178: PUSH
21179: LD_VAR 0 1
21183: ST_TO_ADDR
// InitHc ;
21184: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21188: LD_INT 0
21190: PPUSH
21191: LD_VAR 0 2
21195: PPUSH
21196: LD_VAR 0 3
21200: PPUSH
21201: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
21205: CALL_OW 44
21209: PPUSH
21210: LD_INT 1
21212: PPUSH
21213: CALL_OW 51
// end ;
21217: LD_VAR 0 4
21221: RET
// export function hHackSpawnVehicle ; begin
21222: LD_INT 0
21224: PPUSH
// uc_side := your_side ;
21225: LD_ADDR_OWVAR 20
21229: PUSH
21230: LD_OWVAR 2
21234: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
21235: LD_ADDR_OWVAR 21
21239: PUSH
21240: LD_INT 1
21242: PPUSH
21243: LD_INT 3
21245: PPUSH
21246: CALL_OW 12
21250: ST_TO_ADDR
// InitVc ;
21251: CALL_OW 20
// case uc_nation of 1 :
21255: LD_OWVAR 21
21259: PUSH
21260: LD_INT 1
21262: DOUBLE
21263: EQUAL
21264: IFTRUE 21268
21266: GO 21412
21268: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
21269: LD_ADDR_OWVAR 37
21273: PUSH
21274: LD_INT 1
21276: PUSH
21277: LD_INT 2
21279: PUSH
21280: LD_INT 3
21282: PUSH
21283: LD_INT 4
21285: PUSH
21286: LD_INT 5
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: PUSH
21296: LD_INT 1
21298: PPUSH
21299: LD_INT 5
21301: PPUSH
21302: CALL_OW 12
21306: ARRAY
21307: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
21308: LD_ADDR_OWVAR 39
21312: PUSH
21313: LD_INT 1
21315: PPUSH
21316: LD_INT 3
21318: PPUSH
21319: CALL_OW 12
21323: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
21324: LD_ADDR_OWVAR 38
21328: PUSH
21329: LD_INT 1
21331: PUSH
21332: LD_INT 2
21334: PUSH
21335: LD_INT 3
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: LIST
21342: PUSH
21343: LD_INT 1
21345: PPUSH
21346: LD_INT 3
21348: PPUSH
21349: CALL_OW 12
21353: ARRAY
21354: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
21355: LD_ADDR_OWVAR 40
21359: PUSH
21360: LD_INT 2
21362: PUSH
21363: LD_INT 4
21365: PUSH
21366: LD_INT 5
21368: PUSH
21369: LD_INT 3
21371: PUSH
21372: LD_INT 7
21374: PUSH
21375: LD_INT 8
21377: PUSH
21378: LD_INT 9
21380: PUSH
21381: LD_INT 10
21383: PUSH
21384: LD_INT 6
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: PUSH
21398: LD_INT 1
21400: PPUSH
21401: LD_INT 9
21403: PPUSH
21404: CALL_OW 12
21408: ARRAY
21409: ST_TO_ADDR
// end ; 2 :
21410: GO 21677
21412: LD_INT 2
21414: DOUBLE
21415: EQUAL
21416: IFTRUE 21420
21418: GO 21544
21420: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
21421: LD_ADDR_OWVAR 37
21425: PUSH
21426: LD_INT 11
21428: PUSH
21429: LD_INT 12
21431: PUSH
21432: LD_INT 13
21434: PUSH
21435: LD_INT 14
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: PUSH
21444: LD_INT 1
21446: PPUSH
21447: LD_INT 4
21449: PPUSH
21450: CALL_OW 12
21454: ARRAY
21455: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
21456: LD_ADDR_OWVAR 39
21460: PUSH
21461: LD_INT 1
21463: PPUSH
21464: LD_INT 3
21466: PPUSH
21467: CALL_OW 12
21471: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
21472: LD_ADDR_OWVAR 38
21476: PUSH
21477: LD_INT 1
21479: PUSH
21480: LD_INT 2
21482: PUSH
21483: LD_INT 5
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: LIST
21490: PUSH
21491: LD_INT 1
21493: PPUSH
21494: LD_INT 3
21496: PPUSH
21497: CALL_OW 12
21501: ARRAY
21502: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
21503: LD_ADDR_OWVAR 40
21507: PUSH
21508: LD_INT 24
21510: PUSH
21511: LD_INT 26
21513: PUSH
21514: LD_INT 27
21516: PUSH
21517: LD_INT 28
21519: PUSH
21520: LD_INT 29
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: PUSH
21530: LD_INT 1
21532: PPUSH
21533: LD_INT 5
21535: PPUSH
21536: CALL_OW 12
21540: ARRAY
21541: ST_TO_ADDR
// end ; 3 :
21542: GO 21677
21544: LD_INT 3
21546: DOUBLE
21547: EQUAL
21548: IFTRUE 21552
21550: GO 21676
21552: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
21553: LD_ADDR_OWVAR 37
21557: PUSH
21558: LD_INT 21
21560: PUSH
21561: LD_INT 23
21563: PUSH
21564: LD_INT 22
21566: PUSH
21567: LD_INT 24
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: PUSH
21576: LD_INT 1
21578: PPUSH
21579: LD_INT 4
21581: PPUSH
21582: CALL_OW 12
21586: ARRAY
21587: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
21588: LD_ADDR_OWVAR 39
21592: PUSH
21593: LD_INT 1
21595: PPUSH
21596: LD_INT 3
21598: PPUSH
21599: CALL_OW 12
21603: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
21604: LD_ADDR_OWVAR 38
21608: PUSH
21609: LD_INT 1
21611: PUSH
21612: LD_INT 3
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: LD_INT 1
21621: PPUSH
21622: LD_INT 2
21624: PPUSH
21625: CALL_OW 12
21629: ARRAY
21630: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
21631: LD_ADDR_OWVAR 40
21635: PUSH
21636: LD_INT 42
21638: PUSH
21639: LD_INT 43
21641: PUSH
21642: LD_INT 44
21644: PUSH
21645: LD_INT 46
21647: PUSH
21648: LD_INT 48
21650: PUSH
21651: LD_INT 47
21653: PUSH
21654: EMPTY
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: PUSH
21662: LD_INT 1
21664: PPUSH
21665: LD_INT 6
21667: PPUSH
21668: CALL_OW 12
21672: ARRAY
21673: ST_TO_ADDR
// end ; end ;
21674: GO 21677
21676: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21677: CALL_OW 45
21681: PPUSH
21682: LD_INT 1
21684: PPUSH
21685: CALL_OW 51
// end ;
21689: LD_VAR 0 1
21693: RET
// export hInvincible ; every 1 do
21694: GO 21696
21696: DISABLE
// hInvincible := [ ] ;
21697: LD_ADDR_EXP 94
21701: PUSH
21702: EMPTY
21703: ST_TO_ADDR
21704: END
// every 10 do var i ;
21705: GO 21707
21707: DISABLE
21708: LD_INT 0
21710: PPUSH
// begin enable ;
21711: ENABLE
// if not hInvincible then
21712: LD_EXP 94
21716: NOT
21717: IFFALSE 21721
// exit ;
21719: GO 21765
// for i in hInvincible do
21721: LD_ADDR_VAR 0 1
21725: PUSH
21726: LD_EXP 94
21730: PUSH
21731: FOR_IN
21732: IFFALSE 21763
// if GetLives ( i ) < 1000 then
21734: LD_VAR 0 1
21738: PPUSH
21739: CALL_OW 256
21743: PUSH
21744: LD_INT 1000
21746: LESS
21747: IFFALSE 21761
// SetLives ( i , 1000 ) ;
21749: LD_VAR 0 1
21753: PPUSH
21754: LD_INT 1000
21756: PPUSH
21757: CALL_OW 234
21761: GO 21731
21763: POP
21764: POP
// end ;
21765: PPOPN 1
21767: END
// export function hHackInvincible ; var i ; begin
21768: LD_INT 0
21770: PPUSH
21771: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21772: LD_ADDR_VAR 0 2
21776: PUSH
21777: LD_INT 2
21779: PUSH
21780: LD_INT 21
21782: PUSH
21783: LD_INT 1
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: PUSH
21790: LD_INT 21
21792: PUSH
21793: LD_INT 2
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: LIST
21804: PPUSH
21805: CALL_OW 69
21809: PUSH
21810: FOR_IN
21811: IFFALSE 21872
// if IsSelected ( i ) then
21813: LD_VAR 0 2
21817: PPUSH
21818: CALL_OW 306
21822: IFFALSE 21870
// begin if i in hInvincible then
21824: LD_VAR 0 2
21828: PUSH
21829: LD_EXP 94
21833: IN
21834: IFFALSE 21854
// hInvincible := hInvincible diff i else
21836: LD_ADDR_EXP 94
21840: PUSH
21841: LD_EXP 94
21845: PUSH
21846: LD_VAR 0 2
21850: DIFF
21851: ST_TO_ADDR
21852: GO 21870
// hInvincible := hInvincible union i ;
21854: LD_ADDR_EXP 94
21858: PUSH
21859: LD_EXP 94
21863: PUSH
21864: LD_VAR 0 2
21868: UNION
21869: ST_TO_ADDR
// end ;
21870: GO 21810
21872: POP
21873: POP
// end ;
21874: LD_VAR 0 1
21878: RET
// export function hHackInvisible ; var i , j ; begin
21879: LD_INT 0
21881: PPUSH
21882: PPUSH
21883: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21884: LD_ADDR_VAR 0 2
21888: PUSH
21889: LD_INT 21
21891: PUSH
21892: LD_INT 1
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: PPUSH
21899: CALL_OW 69
21903: PUSH
21904: FOR_IN
21905: IFFALSE 21929
// if IsSelected ( i ) then
21907: LD_VAR 0 2
21911: PPUSH
21912: CALL_OW 306
21916: IFFALSE 21927
// ComForceInvisible ( i ) ;
21918: LD_VAR 0 2
21922: PPUSH
21923: CALL_OW 496
21927: GO 21904
21929: POP
21930: POP
// end ;
21931: LD_VAR 0 1
21935: RET
// export function hHackChangeYourSide ; begin
21936: LD_INT 0
21938: PPUSH
// if your_side = 8 then
21939: LD_OWVAR 2
21943: PUSH
21944: LD_INT 8
21946: EQUAL
21947: IFFALSE 21959
// your_side := 0 else
21949: LD_ADDR_OWVAR 2
21953: PUSH
21954: LD_INT 0
21956: ST_TO_ADDR
21957: GO 21973
// your_side := your_side + 1 ;
21959: LD_ADDR_OWVAR 2
21963: PUSH
21964: LD_OWVAR 2
21968: PUSH
21969: LD_INT 1
21971: PLUS
21972: ST_TO_ADDR
// end ;
21973: LD_VAR 0 1
21977: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21978: LD_INT 0
21980: PPUSH
21981: PPUSH
21982: PPUSH
// for i in all_units do
21983: LD_ADDR_VAR 0 2
21987: PUSH
21988: LD_OWVAR 3
21992: PUSH
21993: FOR_IN
21994: IFFALSE 22072
// if IsSelected ( i ) then
21996: LD_VAR 0 2
22000: PPUSH
22001: CALL_OW 306
22005: IFFALSE 22070
// begin j := GetSide ( i ) ;
22007: LD_ADDR_VAR 0 3
22011: PUSH
22012: LD_VAR 0 2
22016: PPUSH
22017: CALL_OW 255
22021: ST_TO_ADDR
// if j = 8 then
22022: LD_VAR 0 3
22026: PUSH
22027: LD_INT 8
22029: EQUAL
22030: IFFALSE 22042
// j := 0 else
22032: LD_ADDR_VAR 0 3
22036: PUSH
22037: LD_INT 0
22039: ST_TO_ADDR
22040: GO 22056
// j := j + 1 ;
22042: LD_ADDR_VAR 0 3
22046: PUSH
22047: LD_VAR 0 3
22051: PUSH
22052: LD_INT 1
22054: PLUS
22055: ST_TO_ADDR
// SetSide ( i , j ) ;
22056: LD_VAR 0 2
22060: PPUSH
22061: LD_VAR 0 3
22065: PPUSH
22066: CALL_OW 235
// end ;
22070: GO 21993
22072: POP
22073: POP
// end ;
22074: LD_VAR 0 1
22078: RET
// export function hHackFog ; begin
22079: LD_INT 0
22081: PPUSH
// FogOff ( true ) ;
22082: LD_INT 1
22084: PPUSH
22085: CALL_OW 344
// end ;
22089: LD_VAR 0 1
22093: RET
// export function hHackApeman ; begin
22094: LD_INT 0
22096: PPUSH
// uc_side := your_side ;
22097: LD_ADDR_OWVAR 20
22101: PUSH
22102: LD_OWVAR 2
22106: ST_TO_ADDR
// uc_nation := 0 ;
22107: LD_ADDR_OWVAR 21
22111: PUSH
22112: LD_INT 0
22114: ST_TO_ADDR
// hc_name :=  ;
22115: LD_ADDR_OWVAR 26
22119: PUSH
22120: LD_STRING 
22122: ST_TO_ADDR
// hc_gallery :=  ;
22123: LD_ADDR_OWVAR 33
22127: PUSH
22128: LD_STRING 
22130: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
22131: LD_ADDR_OWVAR 31
22135: PUSH
22136: LD_INT 0
22138: PUSH
22139: LD_INT 0
22141: PUSH
22142: LD_INT 0
22144: PUSH
22145: LD_INT 0
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: ST_TO_ADDR
// hc_class := class_apeman ;
22154: LD_ADDR_OWVAR 28
22158: PUSH
22159: LD_INT 12
22161: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
22162: CALL_OW 44
22166: PPUSH
22167: LD_INT 1
22169: PPUSH
22170: CALL_OW 51
// end ;
22174: LD_VAR 0 1
22178: RET
// export function hHackBoom ; begin
22179: LD_INT 0
22181: PPUSH
// uc_side := your_side ;
22182: LD_ADDR_OWVAR 20
22186: PUSH
22187: LD_OWVAR 2
22191: ST_TO_ADDR
// uc_nation := 1 ;
22192: LD_ADDR_OWVAR 21
22196: PUSH
22197: LD_INT 1
22199: ST_TO_ADDR
// vc_chassis := us_morphling ;
22200: LD_ADDR_OWVAR 37
22204: PUSH
22205: LD_INT 5
22207: ST_TO_ADDR
// vc_engine := engine_siberite ;
22208: LD_ADDR_OWVAR 39
22212: PUSH
22213: LD_INT 3
22215: ST_TO_ADDR
// vc_control := control_computer ;
22216: LD_ADDR_OWVAR 38
22220: PUSH
22221: LD_INT 3
22223: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
22224: LD_ADDR_OWVAR 40
22228: PUSH
22229: LD_INT 8
22231: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22232: CALL_OW 45
22236: PPUSH
22237: LD_INT 1
22239: PPUSH
22240: CALL_OW 51
// end ; end_of_file
22244: LD_VAR 0 1
22248: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22249: LD_INT 0
22251: PPUSH
22252: PPUSH
22253: PPUSH
22254: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22255: LD_VAR 0 1
22259: PPUSH
22260: CALL_OW 264
22264: PUSH
22265: LD_EXP 29
22269: EQUAL
22270: IFFALSE 22342
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22272: LD_INT 68
22274: PPUSH
22275: LD_VAR 0 1
22279: PPUSH
22280: CALL_OW 255
22284: PPUSH
22285: CALL_OW 321
22289: PUSH
22290: LD_INT 2
22292: EQUAL
22293: IFFALSE 22305
// eff := 70 else
22295: LD_ADDR_VAR 0 4
22299: PUSH
22300: LD_INT 70
22302: ST_TO_ADDR
22303: GO 22313
// eff := 30 ;
22305: LD_ADDR_VAR 0 4
22309: PUSH
22310: LD_INT 30
22312: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22313: LD_VAR 0 1
22317: PPUSH
22318: CALL_OW 250
22322: PPUSH
22323: LD_VAR 0 1
22327: PPUSH
22328: CALL_OW 251
22332: PPUSH
22333: LD_VAR 0 4
22337: PPUSH
22338: CALL_OW 495
// end ; end ;
22342: LD_VAR 0 2
22346: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22347: LD_INT 0
22349: PPUSH
// end ;
22350: LD_VAR 0 4
22354: RET
// export function SOS_Command ( cmd ) ; begin
22355: LD_INT 0
22357: PPUSH
// end ;
22358: LD_VAR 0 2
22362: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22363: LD_VAR 0 1
22367: PUSH
22368: LD_INT 254
22370: EQUAL
22371: PUSH
22372: LD_VAR 0 2
22376: PPUSH
22377: CALL_OW 264
22381: PUSH
22382: LD_EXP 27
22386: EQUAL
22387: AND
22388: PUSH
22389: LD_VAR 0 3
22393: PPUSH
22394: CALL_OW 263
22398: PUSH
22399: LD_INT 3
22401: EQUAL
22402: AND
22403: IFFALSE 22419
// HackDestroyVehicle ( unit , selectedUnit ) ;
22405: LD_VAR 0 2
22409: PPUSH
22410: LD_VAR 0 3
22414: PPUSH
22415: CALL 23926 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22419: LD_VAR 0 1
22423: PUSH
22424: LD_INT 255
22426: EQUAL
22427: PUSH
22428: LD_VAR 0 2
22432: PPUSH
22433: CALL_OW 264
22437: PUSH
22438: LD_INT 14
22440: PUSH
22441: LD_INT 53
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: IN
22448: AND
22449: PUSH
22450: LD_VAR 0 4
22454: PPUSH
22455: LD_VAR 0 5
22459: PPUSH
22460: CALL_OW 488
22464: AND
22465: IFFALSE 22489
// CutTreeXYR ( unit , x , y , 12 ) ;
22467: LD_VAR 0 2
22471: PPUSH
22472: LD_VAR 0 4
22476: PPUSH
22477: LD_VAR 0 5
22481: PPUSH
22482: LD_INT 12
22484: PPUSH
22485: CALL 22492 0 4
// end ;
22489: PPOPN 5
22491: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22492: LD_INT 0
22494: PPUSH
22495: PPUSH
22496: PPUSH
22497: PPUSH
22498: PPUSH
22499: PPUSH
22500: PPUSH
22501: PPUSH
22502: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
22503: LD_VAR 0 1
22507: NOT
22508: PUSH
22509: LD_VAR 0 2
22513: PPUSH
22514: LD_VAR 0 3
22518: PPUSH
22519: CALL_OW 488
22523: NOT
22524: OR
22525: PUSH
22526: LD_VAR 0 4
22530: NOT
22531: OR
22532: IFFALSE 22536
// exit ;
22534: GO 22876
// list := [ ] ;
22536: LD_ADDR_VAR 0 13
22540: PUSH
22541: EMPTY
22542: ST_TO_ADDR
// if x - r < 0 then
22543: LD_VAR 0 2
22547: PUSH
22548: LD_VAR 0 4
22552: MINUS
22553: PUSH
22554: LD_INT 0
22556: LESS
22557: IFFALSE 22569
// min_x := 0 else
22559: LD_ADDR_VAR 0 7
22563: PUSH
22564: LD_INT 0
22566: ST_TO_ADDR
22567: GO 22585
// min_x := x - r ;
22569: LD_ADDR_VAR 0 7
22573: PUSH
22574: LD_VAR 0 2
22578: PUSH
22579: LD_VAR 0 4
22583: MINUS
22584: ST_TO_ADDR
// if y - r < 0 then
22585: LD_VAR 0 3
22589: PUSH
22590: LD_VAR 0 4
22594: MINUS
22595: PUSH
22596: LD_INT 0
22598: LESS
22599: IFFALSE 22611
// min_y := 0 else
22601: LD_ADDR_VAR 0 8
22605: PUSH
22606: LD_INT 0
22608: ST_TO_ADDR
22609: GO 22627
// min_y := y - r ;
22611: LD_ADDR_VAR 0 8
22615: PUSH
22616: LD_VAR 0 3
22620: PUSH
22621: LD_VAR 0 4
22625: MINUS
22626: ST_TO_ADDR
// max_x := x + r ;
22627: LD_ADDR_VAR 0 9
22631: PUSH
22632: LD_VAR 0 2
22636: PUSH
22637: LD_VAR 0 4
22641: PLUS
22642: ST_TO_ADDR
// max_y := y + r ;
22643: LD_ADDR_VAR 0 10
22647: PUSH
22648: LD_VAR 0 3
22652: PUSH
22653: LD_VAR 0 4
22657: PLUS
22658: ST_TO_ADDR
// for _x = min_x to max_x do
22659: LD_ADDR_VAR 0 11
22663: PUSH
22664: DOUBLE
22665: LD_VAR 0 7
22669: DEC
22670: ST_TO_ADDR
22671: LD_VAR 0 9
22675: PUSH
22676: FOR_TO
22677: IFFALSE 22794
// for _y = min_y to max_y do
22679: LD_ADDR_VAR 0 12
22683: PUSH
22684: DOUBLE
22685: LD_VAR 0 8
22689: DEC
22690: ST_TO_ADDR
22691: LD_VAR 0 10
22695: PUSH
22696: FOR_TO
22697: IFFALSE 22790
// begin if not ValidHex ( _x , _y ) then
22699: LD_VAR 0 11
22703: PPUSH
22704: LD_VAR 0 12
22708: PPUSH
22709: CALL_OW 488
22713: NOT
22714: IFFALSE 22718
// continue ;
22716: GO 22696
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22718: LD_VAR 0 11
22722: PPUSH
22723: LD_VAR 0 12
22727: PPUSH
22728: CALL_OW 351
22732: PUSH
22733: LD_VAR 0 11
22737: PPUSH
22738: LD_VAR 0 12
22742: PPUSH
22743: CALL_OW 554
22747: AND
22748: IFFALSE 22788
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22750: LD_ADDR_VAR 0 13
22754: PUSH
22755: LD_VAR 0 13
22759: PPUSH
22760: LD_VAR 0 13
22764: PUSH
22765: LD_INT 1
22767: PLUS
22768: PPUSH
22769: LD_VAR 0 11
22773: PUSH
22774: LD_VAR 0 12
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: PPUSH
22783: CALL_OW 2
22787: ST_TO_ADDR
// end ;
22788: GO 22696
22790: POP
22791: POP
22792: GO 22676
22794: POP
22795: POP
// if not list then
22796: LD_VAR 0 13
22800: NOT
22801: IFFALSE 22805
// exit ;
22803: GO 22876
// for i in list do
22805: LD_ADDR_VAR 0 6
22809: PUSH
22810: LD_VAR 0 13
22814: PUSH
22815: FOR_IN
22816: IFFALSE 22874
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22818: LD_VAR 0 1
22822: PPUSH
22823: LD_STRING M
22825: PUSH
22826: LD_VAR 0 6
22830: PUSH
22831: LD_INT 1
22833: ARRAY
22834: PUSH
22835: LD_VAR 0 6
22839: PUSH
22840: LD_INT 2
22842: ARRAY
22843: PUSH
22844: LD_INT 0
22846: PUSH
22847: LD_INT 0
22849: PUSH
22850: LD_INT 0
22852: PUSH
22853: LD_INT 0
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: PUSH
22865: EMPTY
22866: LIST
22867: PPUSH
22868: CALL_OW 447
22872: GO 22815
22874: POP
22875: POP
// end ;
22876: LD_VAR 0 5
22880: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22881: LD_EXP 95
22885: NOT
22886: IFFALSE 22936
22888: GO 22890
22890: DISABLE
// begin initHack := true ;
22891: LD_ADDR_EXP 95
22895: PUSH
22896: LD_INT 1
22898: ST_TO_ADDR
// hackTanks := [ ] ;
22899: LD_ADDR_EXP 96
22903: PUSH
22904: EMPTY
22905: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22906: LD_ADDR_EXP 97
22910: PUSH
22911: EMPTY
22912: ST_TO_ADDR
// hackLimit := 3 ;
22913: LD_ADDR_EXP 98
22917: PUSH
22918: LD_INT 3
22920: ST_TO_ADDR
// hackDist := 12 ;
22921: LD_ADDR_EXP 99
22925: PUSH
22926: LD_INT 12
22928: ST_TO_ADDR
// hackCounter := [ ] ;
22929: LD_ADDR_EXP 100
22933: PUSH
22934: EMPTY
22935: ST_TO_ADDR
// end ;
22936: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22937: LD_EXP 95
22941: PUSH
22942: LD_INT 34
22944: PUSH
22945: LD_EXP 27
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: PPUSH
22954: CALL_OW 69
22958: AND
22959: IFFALSE 23214
22961: GO 22963
22963: DISABLE
22964: LD_INT 0
22966: PPUSH
22967: PPUSH
// begin enable ;
22968: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22969: LD_ADDR_VAR 0 1
22973: PUSH
22974: LD_INT 34
22976: PUSH
22977: LD_EXP 27
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: PPUSH
22986: CALL_OW 69
22990: PUSH
22991: FOR_IN
22992: IFFALSE 23212
// begin if not i in hackTanks then
22994: LD_VAR 0 1
22998: PUSH
22999: LD_EXP 96
23003: IN
23004: NOT
23005: IFFALSE 23088
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23007: LD_ADDR_EXP 96
23011: PUSH
23012: LD_EXP 96
23016: PPUSH
23017: LD_EXP 96
23021: PUSH
23022: LD_INT 1
23024: PLUS
23025: PPUSH
23026: LD_VAR 0 1
23030: PPUSH
23031: CALL_OW 1
23035: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23036: LD_ADDR_EXP 97
23040: PUSH
23041: LD_EXP 97
23045: PPUSH
23046: LD_EXP 97
23050: PUSH
23051: LD_INT 1
23053: PLUS
23054: PPUSH
23055: EMPTY
23056: PPUSH
23057: CALL_OW 1
23061: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23062: LD_ADDR_EXP 100
23066: PUSH
23067: LD_EXP 100
23071: PPUSH
23072: LD_EXP 100
23076: PUSH
23077: LD_INT 1
23079: PLUS
23080: PPUSH
23081: EMPTY
23082: PPUSH
23083: CALL_OW 1
23087: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23088: LD_VAR 0 1
23092: PPUSH
23093: CALL_OW 302
23097: NOT
23098: IFFALSE 23111
// begin HackUnlinkAll ( i ) ;
23100: LD_VAR 0 1
23104: PPUSH
23105: CALL 23217 0 1
// continue ;
23109: GO 22991
// end ; HackCheckCapturedStatus ( i ) ;
23111: LD_VAR 0 1
23115: PPUSH
23116: CALL 23660 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23120: LD_ADDR_VAR 0 2
23124: PUSH
23125: LD_INT 81
23127: PUSH
23128: LD_VAR 0 1
23132: PPUSH
23133: CALL_OW 255
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: PUSH
23142: LD_INT 33
23144: PUSH
23145: LD_INT 3
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: PUSH
23152: LD_INT 91
23154: PUSH
23155: LD_VAR 0 1
23159: PUSH
23160: LD_EXP 99
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: LIST
23169: PUSH
23170: LD_INT 50
23172: PUSH
23173: EMPTY
23174: LIST
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: PPUSH
23182: CALL_OW 69
23186: ST_TO_ADDR
// if not tmp then
23187: LD_VAR 0 2
23191: NOT
23192: IFFALSE 23196
// continue ;
23194: GO 22991
// HackLink ( i , tmp ) ;
23196: LD_VAR 0 1
23200: PPUSH
23201: LD_VAR 0 2
23205: PPUSH
23206: CALL 23353 0 2
// end ;
23210: GO 22991
23212: POP
23213: POP
// end ;
23214: PPOPN 2
23216: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23217: LD_INT 0
23219: PPUSH
23220: PPUSH
23221: PPUSH
// if not hack in hackTanks then
23222: LD_VAR 0 1
23226: PUSH
23227: LD_EXP 96
23231: IN
23232: NOT
23233: IFFALSE 23237
// exit ;
23235: GO 23348
// index := GetElementIndex ( hackTanks , hack ) ;
23237: LD_ADDR_VAR 0 4
23241: PUSH
23242: LD_EXP 96
23246: PPUSH
23247: LD_VAR 0 1
23251: PPUSH
23252: CALL 28768 0 2
23256: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23257: LD_EXP 97
23261: PUSH
23262: LD_VAR 0 4
23266: ARRAY
23267: IFFALSE 23348
// begin for i in hackTanksCaptured [ index ] do
23269: LD_ADDR_VAR 0 3
23273: PUSH
23274: LD_EXP 97
23278: PUSH
23279: LD_VAR 0 4
23283: ARRAY
23284: PUSH
23285: FOR_IN
23286: IFFALSE 23312
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23288: LD_VAR 0 3
23292: PUSH
23293: LD_INT 1
23295: ARRAY
23296: PPUSH
23297: LD_VAR 0 3
23301: PUSH
23302: LD_INT 2
23304: ARRAY
23305: PPUSH
23306: CALL_OW 235
23310: GO 23285
23312: POP
23313: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23314: LD_ADDR_EXP 97
23318: PUSH
23319: LD_EXP 97
23323: PPUSH
23324: LD_VAR 0 4
23328: PPUSH
23329: EMPTY
23330: PPUSH
23331: CALL_OW 1
23335: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23336: LD_VAR 0 1
23340: PPUSH
23341: LD_INT 0
23343: PPUSH
23344: CALL_OW 505
// end ; end ;
23348: LD_VAR 0 2
23352: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23353: LD_INT 0
23355: PPUSH
23356: PPUSH
23357: PPUSH
// if not hack in hackTanks or not vehicles then
23358: LD_VAR 0 1
23362: PUSH
23363: LD_EXP 96
23367: IN
23368: NOT
23369: PUSH
23370: LD_VAR 0 2
23374: NOT
23375: OR
23376: IFFALSE 23380
// exit ;
23378: GO 23655
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23380: LD_ADDR_VAR 0 2
23384: PUSH
23385: LD_VAR 0 1
23389: PPUSH
23390: LD_VAR 0 2
23394: PPUSH
23395: LD_INT 1
23397: PPUSH
23398: LD_INT 1
23400: PPUSH
23401: CALL 29418 0 4
23405: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23406: LD_ADDR_VAR 0 5
23410: PUSH
23411: LD_EXP 96
23415: PPUSH
23416: LD_VAR 0 1
23420: PPUSH
23421: CALL 28768 0 2
23425: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23426: LD_EXP 97
23430: PUSH
23431: LD_VAR 0 5
23435: ARRAY
23436: PUSH
23437: LD_EXP 98
23441: LESS
23442: IFFALSE 23631
// begin for i := 1 to vehicles do
23444: LD_ADDR_VAR 0 4
23448: PUSH
23449: DOUBLE
23450: LD_INT 1
23452: DEC
23453: ST_TO_ADDR
23454: LD_VAR 0 2
23458: PUSH
23459: FOR_TO
23460: IFFALSE 23629
// begin if hackTanksCaptured [ index ] = hackLimit then
23462: LD_EXP 97
23466: PUSH
23467: LD_VAR 0 5
23471: ARRAY
23472: PUSH
23473: LD_EXP 98
23477: EQUAL
23478: IFFALSE 23482
// break ;
23480: GO 23629
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23482: LD_ADDR_EXP 100
23486: PUSH
23487: LD_EXP 100
23491: PPUSH
23492: LD_VAR 0 5
23496: PPUSH
23497: LD_EXP 100
23501: PUSH
23502: LD_VAR 0 5
23506: ARRAY
23507: PUSH
23508: LD_INT 1
23510: PLUS
23511: PPUSH
23512: CALL_OW 1
23516: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23517: LD_ADDR_EXP 97
23521: PUSH
23522: LD_EXP 97
23526: PPUSH
23527: LD_VAR 0 5
23531: PUSH
23532: LD_EXP 97
23536: PUSH
23537: LD_VAR 0 5
23541: ARRAY
23542: PUSH
23543: LD_INT 1
23545: PLUS
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: PPUSH
23551: LD_VAR 0 2
23555: PUSH
23556: LD_VAR 0 4
23560: ARRAY
23561: PUSH
23562: LD_VAR 0 2
23566: PUSH
23567: LD_VAR 0 4
23571: ARRAY
23572: PPUSH
23573: CALL_OW 255
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: PPUSH
23582: CALL 28983 0 3
23586: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23587: LD_VAR 0 2
23591: PUSH
23592: LD_VAR 0 4
23596: ARRAY
23597: PPUSH
23598: LD_VAR 0 1
23602: PPUSH
23603: CALL_OW 255
23607: PPUSH
23608: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23612: LD_VAR 0 2
23616: PUSH
23617: LD_VAR 0 4
23621: ARRAY
23622: PPUSH
23623: CALL_OW 141
// end ;
23627: GO 23459
23629: POP
23630: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23631: LD_VAR 0 1
23635: PPUSH
23636: LD_EXP 97
23640: PUSH
23641: LD_VAR 0 5
23645: ARRAY
23646: PUSH
23647: LD_INT 0
23649: PLUS
23650: PPUSH
23651: CALL_OW 505
// end ;
23655: LD_VAR 0 3
23659: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23660: LD_INT 0
23662: PPUSH
23663: PPUSH
23664: PPUSH
23665: PPUSH
// if not hack in hackTanks then
23666: LD_VAR 0 1
23670: PUSH
23671: LD_EXP 96
23675: IN
23676: NOT
23677: IFFALSE 23681
// exit ;
23679: GO 23921
// index := GetElementIndex ( hackTanks , hack ) ;
23681: LD_ADDR_VAR 0 4
23685: PUSH
23686: LD_EXP 96
23690: PPUSH
23691: LD_VAR 0 1
23695: PPUSH
23696: CALL 28768 0 2
23700: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23701: LD_ADDR_VAR 0 3
23705: PUSH
23706: DOUBLE
23707: LD_EXP 97
23711: PUSH
23712: LD_VAR 0 4
23716: ARRAY
23717: INC
23718: ST_TO_ADDR
23719: LD_INT 1
23721: PUSH
23722: FOR_DOWNTO
23723: IFFALSE 23895
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23725: LD_ADDR_VAR 0 5
23729: PUSH
23730: LD_EXP 97
23734: PUSH
23735: LD_VAR 0 4
23739: ARRAY
23740: PUSH
23741: LD_VAR 0 3
23745: ARRAY
23746: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23747: LD_VAR 0 5
23751: PUSH
23752: LD_INT 1
23754: ARRAY
23755: PPUSH
23756: CALL_OW 302
23760: NOT
23761: PUSH
23762: LD_VAR 0 5
23766: PUSH
23767: LD_INT 1
23769: ARRAY
23770: PPUSH
23771: CALL_OW 255
23775: PUSH
23776: LD_VAR 0 1
23780: PPUSH
23781: CALL_OW 255
23785: NONEQUAL
23786: OR
23787: IFFALSE 23893
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23789: LD_VAR 0 5
23793: PUSH
23794: LD_INT 1
23796: ARRAY
23797: PPUSH
23798: CALL_OW 305
23802: PUSH
23803: LD_VAR 0 5
23807: PUSH
23808: LD_INT 1
23810: ARRAY
23811: PPUSH
23812: CALL_OW 255
23816: PUSH
23817: LD_VAR 0 1
23821: PPUSH
23822: CALL_OW 255
23826: EQUAL
23827: AND
23828: IFFALSE 23852
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23830: LD_VAR 0 5
23834: PUSH
23835: LD_INT 1
23837: ARRAY
23838: PPUSH
23839: LD_VAR 0 5
23843: PUSH
23844: LD_INT 2
23846: ARRAY
23847: PPUSH
23848: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23852: LD_ADDR_EXP 97
23856: PUSH
23857: LD_EXP 97
23861: PPUSH
23862: LD_VAR 0 4
23866: PPUSH
23867: LD_EXP 97
23871: PUSH
23872: LD_VAR 0 4
23876: ARRAY
23877: PPUSH
23878: LD_VAR 0 3
23882: PPUSH
23883: CALL_OW 3
23887: PPUSH
23888: CALL_OW 1
23892: ST_TO_ADDR
// end ; end ;
23893: GO 23722
23895: POP
23896: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23897: LD_VAR 0 1
23901: PPUSH
23902: LD_EXP 97
23906: PUSH
23907: LD_VAR 0 4
23911: ARRAY
23912: PUSH
23913: LD_INT 0
23915: PLUS
23916: PPUSH
23917: CALL_OW 505
// end ;
23921: LD_VAR 0 2
23925: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23926: LD_INT 0
23928: PPUSH
23929: PPUSH
23930: PPUSH
23931: PPUSH
// if not hack in hackTanks then
23932: LD_VAR 0 1
23936: PUSH
23937: LD_EXP 96
23941: IN
23942: NOT
23943: IFFALSE 23947
// exit ;
23945: GO 24032
// index := GetElementIndex ( hackTanks , hack ) ;
23947: LD_ADDR_VAR 0 5
23951: PUSH
23952: LD_EXP 96
23956: PPUSH
23957: LD_VAR 0 1
23961: PPUSH
23962: CALL 28768 0 2
23966: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23967: LD_ADDR_VAR 0 4
23971: PUSH
23972: DOUBLE
23973: LD_INT 1
23975: DEC
23976: ST_TO_ADDR
23977: LD_EXP 97
23981: PUSH
23982: LD_VAR 0 5
23986: ARRAY
23987: PUSH
23988: FOR_TO
23989: IFFALSE 24030
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23991: LD_EXP 97
23995: PUSH
23996: LD_VAR 0 5
24000: ARRAY
24001: PUSH
24002: LD_VAR 0 4
24006: ARRAY
24007: PUSH
24008: LD_INT 1
24010: ARRAY
24011: PUSH
24012: LD_VAR 0 2
24016: EQUAL
24017: IFFALSE 24028
// KillUnit ( vehicle ) ;
24019: LD_VAR 0 2
24023: PPUSH
24024: CALL_OW 66
24028: GO 23988
24030: POP
24031: POP
// end ; end_of_file
24032: LD_VAR 0 3
24036: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24037: LD_INT 0
24039: PPUSH
24040: PPUSH
// if exist_mode then
24041: LD_VAR 0 2
24045: IFFALSE 24070
// unit := CreateCharacter ( prefix & ident ) else
24047: LD_ADDR_VAR 0 5
24051: PUSH
24052: LD_VAR 0 3
24056: PUSH
24057: LD_VAR 0 1
24061: STR
24062: PPUSH
24063: CALL_OW 34
24067: ST_TO_ADDR
24068: GO 24085
// unit := NewCharacter ( ident ) ;
24070: LD_ADDR_VAR 0 5
24074: PUSH
24075: LD_VAR 0 1
24079: PPUSH
24080: CALL_OW 25
24084: ST_TO_ADDR
// result := unit ;
24085: LD_ADDR_VAR 0 4
24089: PUSH
24090: LD_VAR 0 5
24094: ST_TO_ADDR
// end ;
24095: LD_VAR 0 4
24099: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24100: LD_INT 0
24102: PPUSH
24103: PPUSH
// if not side or not nation then
24104: LD_VAR 0 1
24108: NOT
24109: PUSH
24110: LD_VAR 0 2
24114: NOT
24115: OR
24116: IFFALSE 24120
// exit ;
24118: GO 24884
// case nation of nation_american :
24120: LD_VAR 0 2
24124: PUSH
24125: LD_INT 1
24127: DOUBLE
24128: EQUAL
24129: IFTRUE 24133
24131: GO 24347
24133: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24134: LD_ADDR_VAR 0 4
24138: PUSH
24139: LD_INT 35
24141: PUSH
24142: LD_INT 45
24144: PUSH
24145: LD_INT 46
24147: PUSH
24148: LD_INT 47
24150: PUSH
24151: LD_INT 82
24153: PUSH
24154: LD_INT 83
24156: PUSH
24157: LD_INT 84
24159: PUSH
24160: LD_INT 85
24162: PUSH
24163: LD_INT 86
24165: PUSH
24166: LD_INT 1
24168: PUSH
24169: LD_INT 2
24171: PUSH
24172: LD_INT 6
24174: PUSH
24175: LD_INT 15
24177: PUSH
24178: LD_INT 16
24180: PUSH
24181: LD_INT 7
24183: PUSH
24184: LD_INT 12
24186: PUSH
24187: LD_INT 13
24189: PUSH
24190: LD_INT 10
24192: PUSH
24193: LD_INT 14
24195: PUSH
24196: LD_INT 20
24198: PUSH
24199: LD_INT 21
24201: PUSH
24202: LD_INT 22
24204: PUSH
24205: LD_INT 25
24207: PUSH
24208: LD_INT 32
24210: PUSH
24211: LD_INT 27
24213: PUSH
24214: LD_INT 36
24216: PUSH
24217: LD_INT 69
24219: PUSH
24220: LD_INT 39
24222: PUSH
24223: LD_INT 34
24225: PUSH
24226: LD_INT 40
24228: PUSH
24229: LD_INT 48
24231: PUSH
24232: LD_INT 49
24234: PUSH
24235: LD_INT 50
24237: PUSH
24238: LD_INT 51
24240: PUSH
24241: LD_INT 52
24243: PUSH
24244: LD_INT 53
24246: PUSH
24247: LD_INT 54
24249: PUSH
24250: LD_INT 55
24252: PUSH
24253: LD_INT 56
24255: PUSH
24256: LD_INT 57
24258: PUSH
24259: LD_INT 58
24261: PUSH
24262: LD_INT 59
24264: PUSH
24265: LD_INT 60
24267: PUSH
24268: LD_INT 61
24270: PUSH
24271: LD_INT 62
24273: PUSH
24274: LD_INT 80
24276: PUSH
24277: LD_INT 82
24279: PUSH
24280: LD_INT 83
24282: PUSH
24283: LD_INT 84
24285: PUSH
24286: LD_INT 85
24288: PUSH
24289: LD_INT 86
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: ST_TO_ADDR
24345: GO 24808
24347: LD_INT 2
24349: DOUBLE
24350: EQUAL
24351: IFTRUE 24355
24353: GO 24577
24355: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
24356: LD_ADDR_VAR 0 4
24360: PUSH
24361: LD_INT 35
24363: PUSH
24364: LD_INT 45
24366: PUSH
24367: LD_INT 46
24369: PUSH
24370: LD_INT 47
24372: PUSH
24373: LD_INT 82
24375: PUSH
24376: LD_INT 83
24378: PUSH
24379: LD_INT 84
24381: PUSH
24382: LD_INT 85
24384: PUSH
24385: LD_INT 87
24387: PUSH
24388: LD_INT 70
24390: PUSH
24391: LD_INT 1
24393: PUSH
24394: LD_INT 11
24396: PUSH
24397: LD_INT 3
24399: PUSH
24400: LD_INT 4
24402: PUSH
24403: LD_INT 5
24405: PUSH
24406: LD_INT 6
24408: PUSH
24409: LD_INT 15
24411: PUSH
24412: LD_INT 18
24414: PUSH
24415: LD_INT 7
24417: PUSH
24418: LD_INT 17
24420: PUSH
24421: LD_INT 8
24423: PUSH
24424: LD_INT 20
24426: PUSH
24427: LD_INT 21
24429: PUSH
24430: LD_INT 22
24432: PUSH
24433: LD_INT 72
24435: PUSH
24436: LD_INT 26
24438: PUSH
24439: LD_INT 69
24441: PUSH
24442: LD_INT 39
24444: PUSH
24445: LD_INT 40
24447: PUSH
24448: LD_INT 41
24450: PUSH
24451: LD_INT 42
24453: PUSH
24454: LD_INT 43
24456: PUSH
24457: LD_INT 48
24459: PUSH
24460: LD_INT 49
24462: PUSH
24463: LD_INT 50
24465: PUSH
24466: LD_INT 51
24468: PUSH
24469: LD_INT 52
24471: PUSH
24472: LD_INT 53
24474: PUSH
24475: LD_INT 54
24477: PUSH
24478: LD_INT 55
24480: PUSH
24481: LD_INT 56
24483: PUSH
24484: LD_INT 60
24486: PUSH
24487: LD_INT 61
24489: PUSH
24490: LD_INT 62
24492: PUSH
24493: LD_INT 66
24495: PUSH
24496: LD_INT 67
24498: PUSH
24499: LD_INT 68
24501: PUSH
24502: LD_INT 81
24504: PUSH
24505: LD_INT 82
24507: PUSH
24508: LD_INT 83
24510: PUSH
24511: LD_INT 84
24513: PUSH
24514: LD_INT 85
24516: PUSH
24517: LD_INT 87
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: ST_TO_ADDR
24575: GO 24808
24577: LD_INT 3
24579: DOUBLE
24580: EQUAL
24581: IFTRUE 24585
24583: GO 24807
24585: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24586: LD_ADDR_VAR 0 4
24590: PUSH
24591: LD_INT 46
24593: PUSH
24594: LD_INT 47
24596: PUSH
24597: LD_INT 1
24599: PUSH
24600: LD_INT 2
24602: PUSH
24603: LD_INT 82
24605: PUSH
24606: LD_INT 83
24608: PUSH
24609: LD_INT 84
24611: PUSH
24612: LD_INT 85
24614: PUSH
24615: LD_INT 86
24617: PUSH
24618: LD_INT 11
24620: PUSH
24621: LD_INT 9
24623: PUSH
24624: LD_INT 20
24626: PUSH
24627: LD_INT 19
24629: PUSH
24630: LD_INT 21
24632: PUSH
24633: LD_INT 24
24635: PUSH
24636: LD_INT 22
24638: PUSH
24639: LD_INT 25
24641: PUSH
24642: LD_INT 28
24644: PUSH
24645: LD_INT 29
24647: PUSH
24648: LD_INT 30
24650: PUSH
24651: LD_INT 31
24653: PUSH
24654: LD_INT 37
24656: PUSH
24657: LD_INT 38
24659: PUSH
24660: LD_INT 32
24662: PUSH
24663: LD_INT 27
24665: PUSH
24666: LD_INT 33
24668: PUSH
24669: LD_INT 69
24671: PUSH
24672: LD_INT 39
24674: PUSH
24675: LD_INT 34
24677: PUSH
24678: LD_INT 40
24680: PUSH
24681: LD_INT 71
24683: PUSH
24684: LD_INT 23
24686: PUSH
24687: LD_INT 44
24689: PUSH
24690: LD_INT 48
24692: PUSH
24693: LD_INT 49
24695: PUSH
24696: LD_INT 50
24698: PUSH
24699: LD_INT 51
24701: PUSH
24702: LD_INT 52
24704: PUSH
24705: LD_INT 53
24707: PUSH
24708: LD_INT 54
24710: PUSH
24711: LD_INT 55
24713: PUSH
24714: LD_INT 56
24716: PUSH
24717: LD_INT 57
24719: PUSH
24720: LD_INT 58
24722: PUSH
24723: LD_INT 59
24725: PUSH
24726: LD_INT 63
24728: PUSH
24729: LD_INT 64
24731: PUSH
24732: LD_INT 65
24734: PUSH
24735: LD_INT 82
24737: PUSH
24738: LD_INT 83
24740: PUSH
24741: LD_INT 84
24743: PUSH
24744: LD_INT 85
24746: PUSH
24747: LD_INT 86
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: ST_TO_ADDR
24805: GO 24808
24807: POP
// if state > - 1 and state < 3 then
24808: LD_VAR 0 3
24812: PUSH
24813: LD_INT 1
24815: NEG
24816: GREATER
24817: PUSH
24818: LD_VAR 0 3
24822: PUSH
24823: LD_INT 3
24825: LESS
24826: AND
24827: IFFALSE 24884
// for i in result do
24829: LD_ADDR_VAR 0 5
24833: PUSH
24834: LD_VAR 0 4
24838: PUSH
24839: FOR_IN
24840: IFFALSE 24882
// if GetTech ( i , side ) <> state then
24842: LD_VAR 0 5
24846: PPUSH
24847: LD_VAR 0 1
24851: PPUSH
24852: CALL_OW 321
24856: PUSH
24857: LD_VAR 0 3
24861: NONEQUAL
24862: IFFALSE 24880
// result := result diff i ;
24864: LD_ADDR_VAR 0 4
24868: PUSH
24869: LD_VAR 0 4
24873: PUSH
24874: LD_VAR 0 5
24878: DIFF
24879: ST_TO_ADDR
24880: GO 24839
24882: POP
24883: POP
// end ;
24884: LD_VAR 0 4
24888: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24889: LD_INT 0
24891: PPUSH
24892: PPUSH
24893: PPUSH
// result := true ;
24894: LD_ADDR_VAR 0 3
24898: PUSH
24899: LD_INT 1
24901: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24902: LD_ADDR_VAR 0 5
24906: PUSH
24907: LD_VAR 0 2
24911: PPUSH
24912: CALL_OW 480
24916: ST_TO_ADDR
// if not tmp then
24917: LD_VAR 0 5
24921: NOT
24922: IFFALSE 24926
// exit ;
24924: GO 24975
// for i in tmp do
24926: LD_ADDR_VAR 0 4
24930: PUSH
24931: LD_VAR 0 5
24935: PUSH
24936: FOR_IN
24937: IFFALSE 24973
// if GetTech ( i , side ) <> state_researched then
24939: LD_VAR 0 4
24943: PPUSH
24944: LD_VAR 0 1
24948: PPUSH
24949: CALL_OW 321
24953: PUSH
24954: LD_INT 2
24956: NONEQUAL
24957: IFFALSE 24971
// begin result := false ;
24959: LD_ADDR_VAR 0 3
24963: PUSH
24964: LD_INT 0
24966: ST_TO_ADDR
// exit ;
24967: POP
24968: POP
24969: GO 24975
// end ;
24971: GO 24936
24973: POP
24974: POP
// end ;
24975: LD_VAR 0 3
24979: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24980: LD_INT 0
24982: PPUSH
24983: PPUSH
24984: PPUSH
24985: PPUSH
24986: PPUSH
24987: PPUSH
24988: PPUSH
24989: PPUSH
24990: PPUSH
24991: PPUSH
24992: PPUSH
24993: PPUSH
24994: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24995: LD_VAR 0 1
24999: NOT
25000: PUSH
25001: LD_VAR 0 1
25005: PPUSH
25006: CALL_OW 257
25010: PUSH
25011: LD_INT 9
25013: NONEQUAL
25014: OR
25015: IFFALSE 25019
// exit ;
25017: GO 25592
// side := GetSide ( unit ) ;
25019: LD_ADDR_VAR 0 9
25023: PUSH
25024: LD_VAR 0 1
25028: PPUSH
25029: CALL_OW 255
25033: ST_TO_ADDR
// tech_space := tech_spacanom ;
25034: LD_ADDR_VAR 0 12
25038: PUSH
25039: LD_INT 29
25041: ST_TO_ADDR
// tech_time := tech_taurad ;
25042: LD_ADDR_VAR 0 13
25046: PUSH
25047: LD_INT 28
25049: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25050: LD_ADDR_VAR 0 11
25054: PUSH
25055: LD_VAR 0 1
25059: PPUSH
25060: CALL_OW 310
25064: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25065: LD_VAR 0 11
25069: PPUSH
25070: CALL_OW 247
25074: PUSH
25075: LD_INT 2
25077: EQUAL
25078: IFFALSE 25082
// exit ;
25080: GO 25592
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25082: LD_ADDR_VAR 0 8
25086: PUSH
25087: LD_INT 81
25089: PUSH
25090: LD_VAR 0 9
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: PUSH
25099: LD_INT 3
25101: PUSH
25102: LD_INT 21
25104: PUSH
25105: LD_INT 3
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PPUSH
25120: CALL_OW 69
25124: ST_TO_ADDR
// if not tmp then
25125: LD_VAR 0 8
25129: NOT
25130: IFFALSE 25134
// exit ;
25132: GO 25592
// if in_unit then
25134: LD_VAR 0 11
25138: IFFALSE 25162
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25140: LD_ADDR_VAR 0 10
25144: PUSH
25145: LD_VAR 0 8
25149: PPUSH
25150: LD_VAR 0 11
25154: PPUSH
25155: CALL_OW 74
25159: ST_TO_ADDR
25160: GO 25182
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25162: LD_ADDR_VAR 0 10
25166: PUSH
25167: LD_VAR 0 8
25171: PPUSH
25172: LD_VAR 0 1
25176: PPUSH
25177: CALL_OW 74
25181: ST_TO_ADDR
// if not enemy then
25182: LD_VAR 0 10
25186: NOT
25187: IFFALSE 25191
// exit ;
25189: GO 25592
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25191: LD_VAR 0 11
25195: PUSH
25196: LD_VAR 0 11
25200: PPUSH
25201: LD_VAR 0 10
25205: PPUSH
25206: CALL_OW 296
25210: PUSH
25211: LD_INT 13
25213: GREATER
25214: AND
25215: PUSH
25216: LD_VAR 0 1
25220: PPUSH
25221: LD_VAR 0 10
25225: PPUSH
25226: CALL_OW 296
25230: PUSH
25231: LD_INT 12
25233: GREATER
25234: OR
25235: IFFALSE 25239
// exit ;
25237: GO 25592
// missile := [ 1 ] ;
25239: LD_ADDR_VAR 0 14
25243: PUSH
25244: LD_INT 1
25246: PUSH
25247: EMPTY
25248: LIST
25249: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25250: LD_VAR 0 9
25254: PPUSH
25255: LD_VAR 0 12
25259: PPUSH
25260: CALL_OW 325
25264: IFFALSE 25293
// missile := Insert ( missile , missile + 1 , 2 ) ;
25266: LD_ADDR_VAR 0 14
25270: PUSH
25271: LD_VAR 0 14
25275: PPUSH
25276: LD_VAR 0 14
25280: PUSH
25281: LD_INT 1
25283: PLUS
25284: PPUSH
25285: LD_INT 2
25287: PPUSH
25288: CALL_OW 2
25292: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25293: LD_VAR 0 9
25297: PPUSH
25298: LD_VAR 0 13
25302: PPUSH
25303: CALL_OW 325
25307: PUSH
25308: LD_VAR 0 10
25312: PPUSH
25313: CALL_OW 255
25317: PPUSH
25318: LD_VAR 0 13
25322: PPUSH
25323: CALL_OW 325
25327: NOT
25328: AND
25329: IFFALSE 25358
// missile := Insert ( missile , missile + 1 , 3 ) ;
25331: LD_ADDR_VAR 0 14
25335: PUSH
25336: LD_VAR 0 14
25340: PPUSH
25341: LD_VAR 0 14
25345: PUSH
25346: LD_INT 1
25348: PLUS
25349: PPUSH
25350: LD_INT 3
25352: PPUSH
25353: CALL_OW 2
25357: ST_TO_ADDR
// if missile < 2 then
25358: LD_VAR 0 14
25362: PUSH
25363: LD_INT 2
25365: LESS
25366: IFFALSE 25370
// exit ;
25368: GO 25592
// x := GetX ( enemy ) ;
25370: LD_ADDR_VAR 0 4
25374: PUSH
25375: LD_VAR 0 10
25379: PPUSH
25380: CALL_OW 250
25384: ST_TO_ADDR
// y := GetY ( enemy ) ;
25385: LD_ADDR_VAR 0 5
25389: PUSH
25390: LD_VAR 0 10
25394: PPUSH
25395: CALL_OW 251
25399: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25400: LD_ADDR_VAR 0 6
25404: PUSH
25405: LD_VAR 0 4
25409: PUSH
25410: LD_INT 1
25412: NEG
25413: PPUSH
25414: LD_INT 1
25416: PPUSH
25417: CALL_OW 12
25421: PLUS
25422: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25423: LD_ADDR_VAR 0 7
25427: PUSH
25428: LD_VAR 0 5
25432: PUSH
25433: LD_INT 1
25435: NEG
25436: PPUSH
25437: LD_INT 1
25439: PPUSH
25440: CALL_OW 12
25444: PLUS
25445: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25446: LD_VAR 0 6
25450: PPUSH
25451: LD_VAR 0 7
25455: PPUSH
25456: CALL_OW 488
25460: NOT
25461: IFFALSE 25483
// begin _x := x ;
25463: LD_ADDR_VAR 0 6
25467: PUSH
25468: LD_VAR 0 4
25472: ST_TO_ADDR
// _y := y ;
25473: LD_ADDR_VAR 0 7
25477: PUSH
25478: LD_VAR 0 5
25482: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25483: LD_ADDR_VAR 0 3
25487: PUSH
25488: LD_INT 1
25490: PPUSH
25491: LD_VAR 0 14
25495: PPUSH
25496: CALL_OW 12
25500: ST_TO_ADDR
// case i of 1 :
25501: LD_VAR 0 3
25505: PUSH
25506: LD_INT 1
25508: DOUBLE
25509: EQUAL
25510: IFTRUE 25514
25512: GO 25531
25514: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25515: LD_VAR 0 1
25519: PPUSH
25520: LD_VAR 0 10
25524: PPUSH
25525: CALL_OW 115
25529: GO 25592
25531: LD_INT 2
25533: DOUBLE
25534: EQUAL
25535: IFTRUE 25539
25537: GO 25561
25539: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25540: LD_VAR 0 1
25544: PPUSH
25545: LD_VAR 0 6
25549: PPUSH
25550: LD_VAR 0 7
25554: PPUSH
25555: CALL_OW 153
25559: GO 25592
25561: LD_INT 3
25563: DOUBLE
25564: EQUAL
25565: IFTRUE 25569
25567: GO 25591
25569: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25570: LD_VAR 0 1
25574: PPUSH
25575: LD_VAR 0 6
25579: PPUSH
25580: LD_VAR 0 7
25584: PPUSH
25585: CALL_OW 154
25589: GO 25592
25591: POP
// end ;
25592: LD_VAR 0 2
25596: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25597: LD_INT 0
25599: PPUSH
25600: PPUSH
25601: PPUSH
25602: PPUSH
25603: PPUSH
25604: PPUSH
// if not unit or not building then
25605: LD_VAR 0 1
25609: NOT
25610: PUSH
25611: LD_VAR 0 2
25615: NOT
25616: OR
25617: IFFALSE 25621
// exit ;
25619: GO 25779
// x := GetX ( building ) ;
25621: LD_ADDR_VAR 0 5
25625: PUSH
25626: LD_VAR 0 2
25630: PPUSH
25631: CALL_OW 250
25635: ST_TO_ADDR
// y := GetY ( building ) ;
25636: LD_ADDR_VAR 0 6
25640: PUSH
25641: LD_VAR 0 2
25645: PPUSH
25646: CALL_OW 251
25650: ST_TO_ADDR
// for i = 0 to 5 do
25651: LD_ADDR_VAR 0 4
25655: PUSH
25656: DOUBLE
25657: LD_INT 0
25659: DEC
25660: ST_TO_ADDR
25661: LD_INT 5
25663: PUSH
25664: FOR_TO
25665: IFFALSE 25777
// begin _x := ShiftX ( x , i , 3 ) ;
25667: LD_ADDR_VAR 0 7
25671: PUSH
25672: LD_VAR 0 5
25676: PPUSH
25677: LD_VAR 0 4
25681: PPUSH
25682: LD_INT 3
25684: PPUSH
25685: CALL_OW 272
25689: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25690: LD_ADDR_VAR 0 8
25694: PUSH
25695: LD_VAR 0 6
25699: PPUSH
25700: LD_VAR 0 4
25704: PPUSH
25705: LD_INT 3
25707: PPUSH
25708: CALL_OW 273
25712: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25713: LD_VAR 0 7
25717: PPUSH
25718: LD_VAR 0 8
25722: PPUSH
25723: CALL_OW 488
25727: NOT
25728: IFFALSE 25732
// continue ;
25730: GO 25664
// if HexInfo ( _x , _y ) = 0 then
25732: LD_VAR 0 7
25736: PPUSH
25737: LD_VAR 0 8
25741: PPUSH
25742: CALL_OW 428
25746: PUSH
25747: LD_INT 0
25749: EQUAL
25750: IFFALSE 25775
// begin ComMoveXY ( unit , _x , _y ) ;
25752: LD_VAR 0 1
25756: PPUSH
25757: LD_VAR 0 7
25761: PPUSH
25762: LD_VAR 0 8
25766: PPUSH
25767: CALL_OW 111
// exit ;
25771: POP
25772: POP
25773: GO 25779
// end ; end ;
25775: GO 25664
25777: POP
25778: POP
// end ;
25779: LD_VAR 0 3
25783: RET
// export function ScanBase ( side , base_area ) ; begin
25784: LD_INT 0
25786: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25787: LD_ADDR_VAR 0 3
25791: PUSH
25792: LD_VAR 0 2
25796: PPUSH
25797: LD_INT 81
25799: PUSH
25800: LD_VAR 0 1
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: PPUSH
25809: CALL_OW 70
25813: ST_TO_ADDR
// end ;
25814: LD_VAR 0 3
25818: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25819: LD_INT 0
25821: PPUSH
25822: PPUSH
25823: PPUSH
25824: PPUSH
// result := false ;
25825: LD_ADDR_VAR 0 2
25829: PUSH
25830: LD_INT 0
25832: ST_TO_ADDR
// side := GetSide ( unit ) ;
25833: LD_ADDR_VAR 0 3
25837: PUSH
25838: LD_VAR 0 1
25842: PPUSH
25843: CALL_OW 255
25847: ST_TO_ADDR
// nat := GetNation ( unit ) ;
25848: LD_ADDR_VAR 0 4
25852: PUSH
25853: LD_VAR 0 1
25857: PPUSH
25858: CALL_OW 248
25862: ST_TO_ADDR
// case nat of 1 :
25863: LD_VAR 0 4
25867: PUSH
25868: LD_INT 1
25870: DOUBLE
25871: EQUAL
25872: IFTRUE 25876
25874: GO 25887
25876: POP
// tech := tech_lassight ; 2 :
25877: LD_ADDR_VAR 0 5
25881: PUSH
25882: LD_INT 12
25884: ST_TO_ADDR
25885: GO 25926
25887: LD_INT 2
25889: DOUBLE
25890: EQUAL
25891: IFTRUE 25895
25893: GO 25906
25895: POP
// tech := tech_mortar ; 3 :
25896: LD_ADDR_VAR 0 5
25900: PUSH
25901: LD_INT 41
25903: ST_TO_ADDR
25904: GO 25926
25906: LD_INT 3
25908: DOUBLE
25909: EQUAL
25910: IFTRUE 25914
25912: GO 25925
25914: POP
// tech := tech_bazooka ; end ;
25915: LD_ADDR_VAR 0 5
25919: PUSH
25920: LD_INT 44
25922: ST_TO_ADDR
25923: GO 25926
25925: POP
// if Researched ( side , tech ) then
25926: LD_VAR 0 3
25930: PPUSH
25931: LD_VAR 0 5
25935: PPUSH
25936: CALL_OW 325
25940: IFFALSE 25967
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25942: LD_ADDR_VAR 0 2
25946: PUSH
25947: LD_INT 5
25949: PUSH
25950: LD_INT 8
25952: PUSH
25953: LD_INT 9
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: LIST
25960: PUSH
25961: LD_VAR 0 4
25965: ARRAY
25966: ST_TO_ADDR
// end ;
25967: LD_VAR 0 2
25971: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25972: LD_INT 0
25974: PPUSH
25975: PPUSH
25976: PPUSH
// if not mines then
25977: LD_VAR 0 2
25981: NOT
25982: IFFALSE 25986
// exit ;
25984: GO 26130
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25986: LD_ADDR_VAR 0 5
25990: PUSH
25991: LD_INT 81
25993: PUSH
25994: LD_VAR 0 1
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: PUSH
26003: LD_INT 3
26005: PUSH
26006: LD_INT 21
26008: PUSH
26009: LD_INT 3
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PPUSH
26024: CALL_OW 69
26028: ST_TO_ADDR
// for i in mines do
26029: LD_ADDR_VAR 0 4
26033: PUSH
26034: LD_VAR 0 2
26038: PUSH
26039: FOR_IN
26040: IFFALSE 26128
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26042: LD_VAR 0 4
26046: PUSH
26047: LD_INT 1
26049: ARRAY
26050: PPUSH
26051: LD_VAR 0 4
26055: PUSH
26056: LD_INT 2
26058: ARRAY
26059: PPUSH
26060: CALL_OW 458
26064: NOT
26065: IFFALSE 26069
// continue ;
26067: GO 26039
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26069: LD_VAR 0 4
26073: PUSH
26074: LD_INT 1
26076: ARRAY
26077: PPUSH
26078: LD_VAR 0 4
26082: PUSH
26083: LD_INT 2
26085: ARRAY
26086: PPUSH
26087: CALL_OW 428
26091: PUSH
26092: LD_VAR 0 5
26096: IN
26097: IFFALSE 26126
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26099: LD_VAR 0 4
26103: PUSH
26104: LD_INT 1
26106: ARRAY
26107: PPUSH
26108: LD_VAR 0 4
26112: PUSH
26113: LD_INT 2
26115: ARRAY
26116: PPUSH
26117: LD_VAR 0 1
26121: PPUSH
26122: CALL_OW 456
// end ;
26126: GO 26039
26128: POP
26129: POP
// end ;
26130: LD_VAR 0 3
26134: RET
// export function Count ( array ) ; var i ; begin
26135: LD_INT 0
26137: PPUSH
26138: PPUSH
// result := 0 ;
26139: LD_ADDR_VAR 0 2
26143: PUSH
26144: LD_INT 0
26146: ST_TO_ADDR
// for i in array do
26147: LD_ADDR_VAR 0 3
26151: PUSH
26152: LD_VAR 0 1
26156: PUSH
26157: FOR_IN
26158: IFFALSE 26182
// if i then
26160: LD_VAR 0 3
26164: IFFALSE 26180
// result := result + 1 ;
26166: LD_ADDR_VAR 0 2
26170: PUSH
26171: LD_VAR 0 2
26175: PUSH
26176: LD_INT 1
26178: PLUS
26179: ST_TO_ADDR
26180: GO 26157
26182: POP
26183: POP
// end ;
26184: LD_VAR 0 2
26188: RET
// export function IsEmpty ( building ) ; begin
26189: LD_INT 0
26191: PPUSH
// if not building then
26192: LD_VAR 0 1
26196: NOT
26197: IFFALSE 26201
// exit ;
26199: GO 26244
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26201: LD_ADDR_VAR 0 2
26205: PUSH
26206: LD_VAR 0 1
26210: PUSH
26211: LD_INT 22
26213: PUSH
26214: LD_VAR 0 1
26218: PPUSH
26219: CALL_OW 255
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PUSH
26228: LD_INT 58
26230: PUSH
26231: EMPTY
26232: LIST
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: PPUSH
26238: CALL_OW 69
26242: IN
26243: ST_TO_ADDR
// end ;
26244: LD_VAR 0 2
26248: RET
// export function IsNotFull ( building ) ; begin
26249: LD_INT 0
26251: PPUSH
// if not building then
26252: LD_VAR 0 1
26256: NOT
26257: IFFALSE 26261
// exit ;
26259: GO 26280
// result := UnitsInside ( building ) < 6 ;
26261: LD_ADDR_VAR 0 2
26265: PUSH
26266: LD_VAR 0 1
26270: PPUSH
26271: CALL_OW 313
26275: PUSH
26276: LD_INT 6
26278: LESS
26279: ST_TO_ADDR
// end ;
26280: LD_VAR 0 2
26284: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26285: LD_INT 0
26287: PPUSH
26288: PPUSH
26289: PPUSH
26290: PPUSH
// tmp := [ ] ;
26291: LD_ADDR_VAR 0 3
26295: PUSH
26296: EMPTY
26297: ST_TO_ADDR
// list := [ ] ;
26298: LD_ADDR_VAR 0 5
26302: PUSH
26303: EMPTY
26304: ST_TO_ADDR
// for i = 16 to 25 do
26305: LD_ADDR_VAR 0 4
26309: PUSH
26310: DOUBLE
26311: LD_INT 16
26313: DEC
26314: ST_TO_ADDR
26315: LD_INT 25
26317: PUSH
26318: FOR_TO
26319: IFFALSE 26392
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26321: LD_ADDR_VAR 0 3
26325: PUSH
26326: LD_VAR 0 3
26330: PUSH
26331: LD_INT 22
26333: PUSH
26334: LD_VAR 0 1
26338: PPUSH
26339: CALL_OW 255
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: LD_INT 91
26350: PUSH
26351: LD_VAR 0 1
26355: PUSH
26356: LD_INT 6
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: LIST
26363: PUSH
26364: LD_INT 30
26366: PUSH
26367: LD_VAR 0 4
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: LIST
26380: PUSH
26381: EMPTY
26382: LIST
26383: PPUSH
26384: CALL_OW 69
26388: ADD
26389: ST_TO_ADDR
26390: GO 26318
26392: POP
26393: POP
// for i = 1 to tmp do
26394: LD_ADDR_VAR 0 4
26398: PUSH
26399: DOUBLE
26400: LD_INT 1
26402: DEC
26403: ST_TO_ADDR
26404: LD_VAR 0 3
26408: PUSH
26409: FOR_TO
26410: IFFALSE 26498
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26412: LD_ADDR_VAR 0 5
26416: PUSH
26417: LD_VAR 0 5
26421: PUSH
26422: LD_VAR 0 3
26426: PUSH
26427: LD_VAR 0 4
26431: ARRAY
26432: PPUSH
26433: CALL_OW 266
26437: PUSH
26438: LD_VAR 0 3
26442: PUSH
26443: LD_VAR 0 4
26447: ARRAY
26448: PPUSH
26449: CALL_OW 250
26453: PUSH
26454: LD_VAR 0 3
26458: PUSH
26459: LD_VAR 0 4
26463: ARRAY
26464: PPUSH
26465: CALL_OW 251
26469: PUSH
26470: LD_VAR 0 3
26474: PUSH
26475: LD_VAR 0 4
26479: ARRAY
26480: PPUSH
26481: CALL_OW 254
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: PUSH
26492: EMPTY
26493: LIST
26494: ADD
26495: ST_TO_ADDR
26496: GO 26409
26498: POP
26499: POP
// result := list ;
26500: LD_ADDR_VAR 0 2
26504: PUSH
26505: LD_VAR 0 5
26509: ST_TO_ADDR
// end ;
26510: LD_VAR 0 2
26514: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26515: LD_INT 0
26517: PPUSH
26518: PPUSH
26519: PPUSH
26520: PPUSH
26521: PPUSH
26522: PPUSH
26523: PPUSH
// if not factory then
26524: LD_VAR 0 1
26528: NOT
26529: IFFALSE 26533
// exit ;
26531: GO 27126
// if control = control_apeman then
26533: LD_VAR 0 4
26537: PUSH
26538: LD_INT 5
26540: EQUAL
26541: IFFALSE 26650
// begin tmp := UnitsInside ( factory ) ;
26543: LD_ADDR_VAR 0 8
26547: PUSH
26548: LD_VAR 0 1
26552: PPUSH
26553: CALL_OW 313
26557: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26558: LD_VAR 0 8
26562: PPUSH
26563: LD_INT 25
26565: PUSH
26566: LD_INT 12
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PPUSH
26573: CALL_OW 72
26577: NOT
26578: IFFALSE 26588
// control := control_manual ;
26580: LD_ADDR_VAR 0 4
26584: PUSH
26585: LD_INT 1
26587: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26588: LD_ADDR_VAR 0 8
26592: PUSH
26593: LD_VAR 0 1
26597: PPUSH
26598: CALL 26285 0 1
26602: ST_TO_ADDR
// if tmp then
26603: LD_VAR 0 8
26607: IFFALSE 26650
// begin for i in tmp do
26609: LD_ADDR_VAR 0 7
26613: PUSH
26614: LD_VAR 0 8
26618: PUSH
26619: FOR_IN
26620: IFFALSE 26648
// if i [ 1 ] = b_ext_radio then
26622: LD_VAR 0 7
26626: PUSH
26627: LD_INT 1
26629: ARRAY
26630: PUSH
26631: LD_INT 22
26633: EQUAL
26634: IFFALSE 26646
// begin control := control_remote ;
26636: LD_ADDR_VAR 0 4
26640: PUSH
26641: LD_INT 2
26643: ST_TO_ADDR
// break ;
26644: GO 26648
// end ;
26646: GO 26619
26648: POP
26649: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26650: LD_VAR 0 1
26654: PPUSH
26655: LD_VAR 0 2
26659: PPUSH
26660: LD_VAR 0 3
26664: PPUSH
26665: LD_VAR 0 4
26669: PPUSH
26670: LD_VAR 0 5
26674: PPUSH
26675: CALL_OW 448
26679: IFFALSE 26714
// begin result := [ chassis , engine , control , weapon ] ;
26681: LD_ADDR_VAR 0 6
26685: PUSH
26686: LD_VAR 0 2
26690: PUSH
26691: LD_VAR 0 3
26695: PUSH
26696: LD_VAR 0 4
26700: PUSH
26701: LD_VAR 0 5
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: ST_TO_ADDR
// exit ;
26712: GO 27126
// end ; _chassis := AvailableChassisList ( factory ) ;
26714: LD_ADDR_VAR 0 9
26718: PUSH
26719: LD_VAR 0 1
26723: PPUSH
26724: CALL_OW 475
26728: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26729: LD_ADDR_VAR 0 11
26733: PUSH
26734: LD_VAR 0 1
26738: PPUSH
26739: CALL_OW 476
26743: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26744: LD_ADDR_VAR 0 12
26748: PUSH
26749: LD_VAR 0 1
26753: PPUSH
26754: CALL_OW 477
26758: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26759: LD_ADDR_VAR 0 10
26763: PUSH
26764: LD_VAR 0 1
26768: PPUSH
26769: CALL_OW 478
26773: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26774: LD_VAR 0 9
26778: NOT
26779: PUSH
26780: LD_VAR 0 11
26784: NOT
26785: OR
26786: PUSH
26787: LD_VAR 0 12
26791: NOT
26792: OR
26793: PUSH
26794: LD_VAR 0 10
26798: NOT
26799: OR
26800: IFFALSE 26835
// begin result := [ chassis , engine , control , weapon ] ;
26802: LD_ADDR_VAR 0 6
26806: PUSH
26807: LD_VAR 0 2
26811: PUSH
26812: LD_VAR 0 3
26816: PUSH
26817: LD_VAR 0 4
26821: PUSH
26822: LD_VAR 0 5
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: LIST
26831: LIST
26832: ST_TO_ADDR
// exit ;
26833: GO 27126
// end ; if not chassis in _chassis then
26835: LD_VAR 0 2
26839: PUSH
26840: LD_VAR 0 9
26844: IN
26845: NOT
26846: IFFALSE 26872
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
26848: LD_ADDR_VAR 0 2
26852: PUSH
26853: LD_VAR 0 9
26857: PUSH
26858: LD_INT 1
26860: PPUSH
26861: LD_VAR 0 9
26865: PPUSH
26866: CALL_OW 12
26870: ARRAY
26871: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26872: LD_VAR 0 2
26876: PPUSH
26877: LD_VAR 0 3
26881: PPUSH
26882: CALL 27131 0 2
26886: NOT
26887: IFFALSE 26946
// repeat engine := _engine [ 1 ] ;
26889: LD_ADDR_VAR 0 3
26893: PUSH
26894: LD_VAR 0 11
26898: PUSH
26899: LD_INT 1
26901: ARRAY
26902: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26903: LD_ADDR_VAR 0 11
26907: PUSH
26908: LD_VAR 0 11
26912: PPUSH
26913: LD_INT 1
26915: PPUSH
26916: CALL_OW 3
26920: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26921: LD_VAR 0 2
26925: PPUSH
26926: LD_VAR 0 3
26930: PPUSH
26931: CALL 27131 0 2
26935: PUSH
26936: LD_VAR 0 11
26940: PUSH
26941: EMPTY
26942: EQUAL
26943: OR
26944: IFFALSE 26889
// if not control in _control then
26946: LD_VAR 0 4
26950: PUSH
26951: LD_VAR 0 12
26955: IN
26956: NOT
26957: IFFALSE 26983
// control := _control [ rand ( 1 , _control ) ] ;
26959: LD_ADDR_VAR 0 4
26963: PUSH
26964: LD_VAR 0 12
26968: PUSH
26969: LD_INT 1
26971: PPUSH
26972: LD_VAR 0 12
26976: PPUSH
26977: CALL_OW 12
26981: ARRAY
26982: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26983: LD_VAR 0 2
26987: PPUSH
26988: LD_VAR 0 5
26992: PPUSH
26993: CALL 27351 0 2
26997: NOT
26998: IFFALSE 27057
// repeat weapon := _weapon [ 1 ] ;
27000: LD_ADDR_VAR 0 5
27004: PUSH
27005: LD_VAR 0 10
27009: PUSH
27010: LD_INT 1
27012: ARRAY
27013: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27014: LD_ADDR_VAR 0 10
27018: PUSH
27019: LD_VAR 0 10
27023: PPUSH
27024: LD_INT 1
27026: PPUSH
27027: CALL_OW 3
27031: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27032: LD_VAR 0 2
27036: PPUSH
27037: LD_VAR 0 5
27041: PPUSH
27042: CALL 27351 0 2
27046: PUSH
27047: LD_VAR 0 10
27051: PUSH
27052: EMPTY
27053: EQUAL
27054: OR
27055: IFFALSE 27000
// result := [ ] ;
27057: LD_ADDR_VAR 0 6
27061: PUSH
27062: EMPTY
27063: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27064: LD_VAR 0 1
27068: PPUSH
27069: LD_VAR 0 2
27073: PPUSH
27074: LD_VAR 0 3
27078: PPUSH
27079: LD_VAR 0 4
27083: PPUSH
27084: LD_VAR 0 5
27088: PPUSH
27089: CALL_OW 448
27093: IFFALSE 27126
// result := [ chassis , engine , control , weapon ] ;
27095: LD_ADDR_VAR 0 6
27099: PUSH
27100: LD_VAR 0 2
27104: PUSH
27105: LD_VAR 0 3
27109: PUSH
27110: LD_VAR 0 4
27114: PUSH
27115: LD_VAR 0 5
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: ST_TO_ADDR
// end ;
27126: LD_VAR 0 6
27130: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27131: LD_INT 0
27133: PPUSH
// if not chassis or not engine then
27134: LD_VAR 0 1
27138: NOT
27139: PUSH
27140: LD_VAR 0 2
27144: NOT
27145: OR
27146: IFFALSE 27150
// exit ;
27148: GO 27346
// case engine of engine_solar :
27150: LD_VAR 0 2
27154: PUSH
27155: LD_INT 2
27157: DOUBLE
27158: EQUAL
27159: IFTRUE 27163
27161: GO 27201
27163: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27164: LD_ADDR_VAR 0 3
27168: PUSH
27169: LD_INT 11
27171: PUSH
27172: LD_INT 12
27174: PUSH
27175: LD_INT 13
27177: PUSH
27178: LD_INT 14
27180: PUSH
27181: LD_INT 1
27183: PUSH
27184: LD_INT 2
27186: PUSH
27187: LD_INT 3
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: ST_TO_ADDR
27199: GO 27330
27201: LD_INT 1
27203: DOUBLE
27204: EQUAL
27205: IFTRUE 27209
27207: GO 27271
27209: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27210: LD_ADDR_VAR 0 3
27214: PUSH
27215: LD_INT 11
27217: PUSH
27218: LD_INT 12
27220: PUSH
27221: LD_INT 13
27223: PUSH
27224: LD_INT 14
27226: PUSH
27227: LD_INT 1
27229: PUSH
27230: LD_INT 2
27232: PUSH
27233: LD_INT 3
27235: PUSH
27236: LD_INT 4
27238: PUSH
27239: LD_INT 5
27241: PUSH
27242: LD_INT 21
27244: PUSH
27245: LD_INT 23
27247: PUSH
27248: LD_INT 22
27250: PUSH
27251: LD_INT 24
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: ST_TO_ADDR
27269: GO 27330
27271: LD_INT 3
27273: DOUBLE
27274: EQUAL
27275: IFTRUE 27279
27277: GO 27329
27279: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27280: LD_ADDR_VAR 0 3
27284: PUSH
27285: LD_INT 13
27287: PUSH
27288: LD_INT 14
27290: PUSH
27291: LD_INT 2
27293: PUSH
27294: LD_INT 3
27296: PUSH
27297: LD_INT 4
27299: PUSH
27300: LD_INT 5
27302: PUSH
27303: LD_INT 21
27305: PUSH
27306: LD_INT 22
27308: PUSH
27309: LD_INT 23
27311: PUSH
27312: LD_INT 24
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: LIST
27319: LIST
27320: LIST
27321: LIST
27322: LIST
27323: LIST
27324: LIST
27325: LIST
27326: ST_TO_ADDR
27327: GO 27330
27329: POP
// result := ( chassis in result ) ;
27330: LD_ADDR_VAR 0 3
27334: PUSH
27335: LD_VAR 0 1
27339: PUSH
27340: LD_VAR 0 3
27344: IN
27345: ST_TO_ADDR
// end ;
27346: LD_VAR 0 3
27350: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27351: LD_INT 0
27353: PPUSH
// if not chassis or not weapon then
27354: LD_VAR 0 1
27358: NOT
27359: PUSH
27360: LD_VAR 0 2
27364: NOT
27365: OR
27366: IFFALSE 27370
// exit ;
27368: GO 28396
// case weapon of us_machine_gun :
27370: LD_VAR 0 2
27374: PUSH
27375: LD_INT 2
27377: DOUBLE
27378: EQUAL
27379: IFTRUE 27383
27381: GO 27413
27383: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27384: LD_ADDR_VAR 0 3
27388: PUSH
27389: LD_INT 1
27391: PUSH
27392: LD_INT 2
27394: PUSH
27395: LD_INT 3
27397: PUSH
27398: LD_INT 4
27400: PUSH
27401: LD_INT 5
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: ST_TO_ADDR
27411: GO 28380
27413: LD_INT 3
27415: DOUBLE
27416: EQUAL
27417: IFTRUE 27421
27419: GO 27451
27421: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27422: LD_ADDR_VAR 0 3
27426: PUSH
27427: LD_INT 1
27429: PUSH
27430: LD_INT 2
27432: PUSH
27433: LD_INT 3
27435: PUSH
27436: LD_INT 4
27438: PUSH
27439: LD_INT 5
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: ST_TO_ADDR
27449: GO 28380
27451: LD_INT 11
27453: DOUBLE
27454: EQUAL
27455: IFTRUE 27459
27457: GO 27489
27459: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27460: LD_ADDR_VAR 0 3
27464: PUSH
27465: LD_INT 1
27467: PUSH
27468: LD_INT 2
27470: PUSH
27471: LD_INT 3
27473: PUSH
27474: LD_INT 4
27476: PUSH
27477: LD_INT 5
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: ST_TO_ADDR
27487: GO 28380
27489: LD_INT 4
27491: DOUBLE
27492: EQUAL
27493: IFTRUE 27497
27495: GO 27523
27497: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27498: LD_ADDR_VAR 0 3
27502: PUSH
27503: LD_INT 2
27505: PUSH
27506: LD_INT 3
27508: PUSH
27509: LD_INT 4
27511: PUSH
27512: LD_INT 5
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: ST_TO_ADDR
27521: GO 28380
27523: LD_INT 5
27525: DOUBLE
27526: EQUAL
27527: IFTRUE 27531
27529: GO 27557
27531: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27532: LD_ADDR_VAR 0 3
27536: PUSH
27537: LD_INT 2
27539: PUSH
27540: LD_INT 3
27542: PUSH
27543: LD_INT 4
27545: PUSH
27546: LD_INT 5
27548: PUSH
27549: EMPTY
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: ST_TO_ADDR
27555: GO 28380
27557: LD_INT 9
27559: DOUBLE
27560: EQUAL
27561: IFTRUE 27565
27563: GO 27591
27565: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27566: LD_ADDR_VAR 0 3
27570: PUSH
27571: LD_INT 2
27573: PUSH
27574: LD_INT 3
27576: PUSH
27577: LD_INT 4
27579: PUSH
27580: LD_INT 5
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: LIST
27587: LIST
27588: ST_TO_ADDR
27589: GO 28380
27591: LD_INT 7
27593: DOUBLE
27594: EQUAL
27595: IFTRUE 27599
27597: GO 27625
27599: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27600: LD_ADDR_VAR 0 3
27604: PUSH
27605: LD_INT 2
27607: PUSH
27608: LD_INT 3
27610: PUSH
27611: LD_INT 4
27613: PUSH
27614: LD_INT 5
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: ST_TO_ADDR
27623: GO 28380
27625: LD_INT 12
27627: DOUBLE
27628: EQUAL
27629: IFTRUE 27633
27631: GO 27659
27633: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27634: LD_ADDR_VAR 0 3
27638: PUSH
27639: LD_INT 2
27641: PUSH
27642: LD_INT 3
27644: PUSH
27645: LD_INT 4
27647: PUSH
27648: LD_INT 5
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: ST_TO_ADDR
27657: GO 28380
27659: LD_INT 13
27661: DOUBLE
27662: EQUAL
27663: IFTRUE 27667
27665: GO 27693
27667: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27668: LD_ADDR_VAR 0 3
27672: PUSH
27673: LD_INT 2
27675: PUSH
27676: LD_INT 3
27678: PUSH
27679: LD_INT 4
27681: PUSH
27682: LD_INT 5
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: ST_TO_ADDR
27691: GO 28380
27693: LD_INT 14
27695: DOUBLE
27696: EQUAL
27697: IFTRUE 27701
27699: GO 27719
27701: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27702: LD_ADDR_VAR 0 3
27706: PUSH
27707: LD_INT 4
27709: PUSH
27710: LD_INT 5
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: ST_TO_ADDR
27717: GO 28380
27719: LD_INT 6
27721: DOUBLE
27722: EQUAL
27723: IFTRUE 27727
27725: GO 27745
27727: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27728: LD_ADDR_VAR 0 3
27732: PUSH
27733: LD_INT 4
27735: PUSH
27736: LD_INT 5
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: ST_TO_ADDR
27743: GO 28380
27745: LD_INT 10
27747: DOUBLE
27748: EQUAL
27749: IFTRUE 27753
27751: GO 27771
27753: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27754: LD_ADDR_VAR 0 3
27758: PUSH
27759: LD_INT 4
27761: PUSH
27762: LD_INT 5
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: ST_TO_ADDR
27769: GO 28380
27771: LD_INT 22
27773: DOUBLE
27774: EQUAL
27775: IFTRUE 27779
27777: GO 27805
27779: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27780: LD_ADDR_VAR 0 3
27784: PUSH
27785: LD_INT 11
27787: PUSH
27788: LD_INT 12
27790: PUSH
27791: LD_INT 13
27793: PUSH
27794: LD_INT 14
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: ST_TO_ADDR
27803: GO 28380
27805: LD_INT 23
27807: DOUBLE
27808: EQUAL
27809: IFTRUE 27813
27811: GO 27839
27813: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27814: LD_ADDR_VAR 0 3
27818: PUSH
27819: LD_INT 11
27821: PUSH
27822: LD_INT 12
27824: PUSH
27825: LD_INT 13
27827: PUSH
27828: LD_INT 14
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: ST_TO_ADDR
27837: GO 28380
27839: LD_INT 24
27841: DOUBLE
27842: EQUAL
27843: IFTRUE 27847
27845: GO 27873
27847: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
27848: LD_ADDR_VAR 0 3
27852: PUSH
27853: LD_INT 11
27855: PUSH
27856: LD_INT 12
27858: PUSH
27859: LD_INT 13
27861: PUSH
27862: LD_INT 14
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: ST_TO_ADDR
27871: GO 28380
27873: LD_INT 30
27875: DOUBLE
27876: EQUAL
27877: IFTRUE 27881
27879: GO 27907
27881: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27882: LD_ADDR_VAR 0 3
27886: PUSH
27887: LD_INT 11
27889: PUSH
27890: LD_INT 12
27892: PUSH
27893: LD_INT 13
27895: PUSH
27896: LD_INT 14
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: ST_TO_ADDR
27905: GO 28380
27907: LD_INT 25
27909: DOUBLE
27910: EQUAL
27911: IFTRUE 27915
27913: GO 27933
27915: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27916: LD_ADDR_VAR 0 3
27920: PUSH
27921: LD_INT 13
27923: PUSH
27924: LD_INT 14
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: ST_TO_ADDR
27931: GO 28380
27933: LD_INT 27
27935: DOUBLE
27936: EQUAL
27937: IFTRUE 27941
27939: GO 27959
27941: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27942: LD_ADDR_VAR 0 3
27946: PUSH
27947: LD_INT 13
27949: PUSH
27950: LD_INT 14
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: ST_TO_ADDR
27957: GO 28380
27959: LD_INT 28
27961: DOUBLE
27962: EQUAL
27963: IFTRUE 27967
27965: GO 27985
27967: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27968: LD_ADDR_VAR 0 3
27972: PUSH
27973: LD_INT 13
27975: PUSH
27976: LD_INT 14
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: ST_TO_ADDR
27983: GO 28380
27985: LD_INT 29
27987: DOUBLE
27988: EQUAL
27989: IFTRUE 27993
27991: GO 28011
27993: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27994: LD_ADDR_VAR 0 3
27998: PUSH
27999: LD_INT 13
28001: PUSH
28002: LD_INT 14
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: ST_TO_ADDR
28009: GO 28380
28011: LD_INT 31
28013: DOUBLE
28014: EQUAL
28015: IFTRUE 28019
28017: GO 28037
28019: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28020: LD_ADDR_VAR 0 3
28024: PUSH
28025: LD_INT 13
28027: PUSH
28028: LD_INT 14
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: ST_TO_ADDR
28035: GO 28380
28037: LD_INT 26
28039: DOUBLE
28040: EQUAL
28041: IFTRUE 28045
28043: GO 28063
28045: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28046: LD_ADDR_VAR 0 3
28050: PUSH
28051: LD_INT 13
28053: PUSH
28054: LD_INT 14
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: ST_TO_ADDR
28061: GO 28380
28063: LD_INT 42
28065: DOUBLE
28066: EQUAL
28067: IFTRUE 28071
28069: GO 28097
28071: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28072: LD_ADDR_VAR 0 3
28076: PUSH
28077: LD_INT 21
28079: PUSH
28080: LD_INT 22
28082: PUSH
28083: LD_INT 23
28085: PUSH
28086: LD_INT 24
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: ST_TO_ADDR
28095: GO 28380
28097: LD_INT 43
28099: DOUBLE
28100: EQUAL
28101: IFTRUE 28105
28103: GO 28131
28105: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28106: LD_ADDR_VAR 0 3
28110: PUSH
28111: LD_INT 21
28113: PUSH
28114: LD_INT 22
28116: PUSH
28117: LD_INT 23
28119: PUSH
28120: LD_INT 24
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: LIST
28127: LIST
28128: ST_TO_ADDR
28129: GO 28380
28131: LD_INT 44
28133: DOUBLE
28134: EQUAL
28135: IFTRUE 28139
28137: GO 28165
28139: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28140: LD_ADDR_VAR 0 3
28144: PUSH
28145: LD_INT 21
28147: PUSH
28148: LD_INT 22
28150: PUSH
28151: LD_INT 23
28153: PUSH
28154: LD_INT 24
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: ST_TO_ADDR
28163: GO 28380
28165: LD_INT 45
28167: DOUBLE
28168: EQUAL
28169: IFTRUE 28173
28171: GO 28199
28173: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28174: LD_ADDR_VAR 0 3
28178: PUSH
28179: LD_INT 21
28181: PUSH
28182: LD_INT 22
28184: PUSH
28185: LD_INT 23
28187: PUSH
28188: LD_INT 24
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: LIST
28195: LIST
28196: ST_TO_ADDR
28197: GO 28380
28199: LD_INT 49
28201: DOUBLE
28202: EQUAL
28203: IFTRUE 28207
28205: GO 28233
28207: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28208: LD_ADDR_VAR 0 3
28212: PUSH
28213: LD_INT 21
28215: PUSH
28216: LD_INT 22
28218: PUSH
28219: LD_INT 23
28221: PUSH
28222: LD_INT 24
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: ST_TO_ADDR
28231: GO 28380
28233: LD_INT 51
28235: DOUBLE
28236: EQUAL
28237: IFTRUE 28241
28239: GO 28267
28241: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28242: LD_ADDR_VAR 0 3
28246: PUSH
28247: LD_INT 21
28249: PUSH
28250: LD_INT 22
28252: PUSH
28253: LD_INT 23
28255: PUSH
28256: LD_INT 24
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: ST_TO_ADDR
28265: GO 28380
28267: LD_INT 52
28269: DOUBLE
28270: EQUAL
28271: IFTRUE 28275
28273: GO 28301
28275: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28276: LD_ADDR_VAR 0 3
28280: PUSH
28281: LD_INT 21
28283: PUSH
28284: LD_INT 22
28286: PUSH
28287: LD_INT 23
28289: PUSH
28290: LD_INT 24
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: LIST
28297: LIST
28298: ST_TO_ADDR
28299: GO 28380
28301: LD_INT 53
28303: DOUBLE
28304: EQUAL
28305: IFTRUE 28309
28307: GO 28327
28309: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28310: LD_ADDR_VAR 0 3
28314: PUSH
28315: LD_INT 23
28317: PUSH
28318: LD_INT 24
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: ST_TO_ADDR
28325: GO 28380
28327: LD_INT 46
28329: DOUBLE
28330: EQUAL
28331: IFTRUE 28335
28333: GO 28353
28335: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28336: LD_ADDR_VAR 0 3
28340: PUSH
28341: LD_INT 23
28343: PUSH
28344: LD_INT 24
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: ST_TO_ADDR
28351: GO 28380
28353: LD_INT 47
28355: DOUBLE
28356: EQUAL
28357: IFTRUE 28361
28359: GO 28379
28361: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28362: LD_ADDR_VAR 0 3
28366: PUSH
28367: LD_INT 23
28369: PUSH
28370: LD_INT 24
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: ST_TO_ADDR
28377: GO 28380
28379: POP
// result := ( chassis in result ) ;
28380: LD_ADDR_VAR 0 3
28384: PUSH
28385: LD_VAR 0 1
28389: PUSH
28390: LD_VAR 0 3
28394: IN
28395: ST_TO_ADDR
// end ;
28396: LD_VAR 0 3
28400: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28401: LD_INT 0
28403: PPUSH
28404: PPUSH
28405: PPUSH
28406: PPUSH
28407: PPUSH
28408: PPUSH
28409: PPUSH
// result := array ;
28410: LD_ADDR_VAR 0 5
28414: PUSH
28415: LD_VAR 0 1
28419: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28420: LD_VAR 0 1
28424: NOT
28425: PUSH
28426: LD_VAR 0 2
28430: NOT
28431: OR
28432: PUSH
28433: LD_VAR 0 3
28437: NOT
28438: OR
28439: PUSH
28440: LD_VAR 0 2
28444: PUSH
28445: LD_VAR 0 1
28449: GREATER
28450: OR
28451: PUSH
28452: LD_VAR 0 3
28456: PUSH
28457: LD_VAR 0 1
28461: GREATER
28462: OR
28463: IFFALSE 28467
// exit ;
28465: GO 28763
// if direction then
28467: LD_VAR 0 4
28471: IFFALSE 28535
// begin d := 1 ;
28473: LD_ADDR_VAR 0 9
28477: PUSH
28478: LD_INT 1
28480: ST_TO_ADDR
// if i_from > i_to then
28481: LD_VAR 0 2
28485: PUSH
28486: LD_VAR 0 3
28490: GREATER
28491: IFFALSE 28517
// length := ( array - i_from ) + i_to else
28493: LD_ADDR_VAR 0 11
28497: PUSH
28498: LD_VAR 0 1
28502: PUSH
28503: LD_VAR 0 2
28507: MINUS
28508: PUSH
28509: LD_VAR 0 3
28513: PLUS
28514: ST_TO_ADDR
28515: GO 28533
// length := i_to - i_from ;
28517: LD_ADDR_VAR 0 11
28521: PUSH
28522: LD_VAR 0 3
28526: PUSH
28527: LD_VAR 0 2
28531: MINUS
28532: ST_TO_ADDR
// end else
28533: GO 28596
// begin d := - 1 ;
28535: LD_ADDR_VAR 0 9
28539: PUSH
28540: LD_INT 1
28542: NEG
28543: ST_TO_ADDR
// if i_from > i_to then
28544: LD_VAR 0 2
28548: PUSH
28549: LD_VAR 0 3
28553: GREATER
28554: IFFALSE 28574
// length := i_from - i_to else
28556: LD_ADDR_VAR 0 11
28560: PUSH
28561: LD_VAR 0 2
28565: PUSH
28566: LD_VAR 0 3
28570: MINUS
28571: ST_TO_ADDR
28572: GO 28596
// length := ( array - i_to ) + i_from ;
28574: LD_ADDR_VAR 0 11
28578: PUSH
28579: LD_VAR 0 1
28583: PUSH
28584: LD_VAR 0 3
28588: MINUS
28589: PUSH
28590: LD_VAR 0 2
28594: PLUS
28595: ST_TO_ADDR
// end ; if not length then
28596: LD_VAR 0 11
28600: NOT
28601: IFFALSE 28605
// exit ;
28603: GO 28763
// tmp := array ;
28605: LD_ADDR_VAR 0 10
28609: PUSH
28610: LD_VAR 0 1
28614: ST_TO_ADDR
// for i = 1 to length do
28615: LD_ADDR_VAR 0 6
28619: PUSH
28620: DOUBLE
28621: LD_INT 1
28623: DEC
28624: ST_TO_ADDR
28625: LD_VAR 0 11
28629: PUSH
28630: FOR_TO
28631: IFFALSE 28751
// begin for j = 1 to array do
28633: LD_ADDR_VAR 0 7
28637: PUSH
28638: DOUBLE
28639: LD_INT 1
28641: DEC
28642: ST_TO_ADDR
28643: LD_VAR 0 1
28647: PUSH
28648: FOR_TO
28649: IFFALSE 28737
// begin k := j + d ;
28651: LD_ADDR_VAR 0 8
28655: PUSH
28656: LD_VAR 0 7
28660: PUSH
28661: LD_VAR 0 9
28665: PLUS
28666: ST_TO_ADDR
// if k > array then
28667: LD_VAR 0 8
28671: PUSH
28672: LD_VAR 0 1
28676: GREATER
28677: IFFALSE 28687
// k := 1 ;
28679: LD_ADDR_VAR 0 8
28683: PUSH
28684: LD_INT 1
28686: ST_TO_ADDR
// if not k then
28687: LD_VAR 0 8
28691: NOT
28692: IFFALSE 28704
// k := array ;
28694: LD_ADDR_VAR 0 8
28698: PUSH
28699: LD_VAR 0 1
28703: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
28704: LD_ADDR_VAR 0 10
28708: PUSH
28709: LD_VAR 0 10
28713: PPUSH
28714: LD_VAR 0 8
28718: PPUSH
28719: LD_VAR 0 1
28723: PUSH
28724: LD_VAR 0 7
28728: ARRAY
28729: PPUSH
28730: CALL_OW 1
28734: ST_TO_ADDR
// end ;
28735: GO 28648
28737: POP
28738: POP
// array := tmp ;
28739: LD_ADDR_VAR 0 1
28743: PUSH
28744: LD_VAR 0 10
28748: ST_TO_ADDR
// end ;
28749: GO 28630
28751: POP
28752: POP
// result := array ;
28753: LD_ADDR_VAR 0 5
28757: PUSH
28758: LD_VAR 0 1
28762: ST_TO_ADDR
// end ;
28763: LD_VAR 0 5
28767: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28768: LD_INT 0
28770: PPUSH
28771: PPUSH
// result := 0 ;
28772: LD_ADDR_VAR 0 3
28776: PUSH
28777: LD_INT 0
28779: ST_TO_ADDR
// if not array or not value in array then
28780: LD_VAR 0 1
28784: NOT
28785: PUSH
28786: LD_VAR 0 2
28790: PUSH
28791: LD_VAR 0 1
28795: IN
28796: NOT
28797: OR
28798: IFFALSE 28802
// exit ;
28800: GO 28856
// for i = 1 to array do
28802: LD_ADDR_VAR 0 4
28806: PUSH
28807: DOUBLE
28808: LD_INT 1
28810: DEC
28811: ST_TO_ADDR
28812: LD_VAR 0 1
28816: PUSH
28817: FOR_TO
28818: IFFALSE 28854
// if value = array [ i ] then
28820: LD_VAR 0 2
28824: PUSH
28825: LD_VAR 0 1
28829: PUSH
28830: LD_VAR 0 4
28834: ARRAY
28835: EQUAL
28836: IFFALSE 28852
// begin result := i ;
28838: LD_ADDR_VAR 0 3
28842: PUSH
28843: LD_VAR 0 4
28847: ST_TO_ADDR
// exit ;
28848: POP
28849: POP
28850: GO 28856
// end ;
28852: GO 28817
28854: POP
28855: POP
// end ;
28856: LD_VAR 0 3
28860: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
28861: LD_INT 0
28863: PPUSH
// vc_chassis := chassis ;
28864: LD_ADDR_OWVAR 37
28868: PUSH
28869: LD_VAR 0 1
28873: ST_TO_ADDR
// vc_engine := engine ;
28874: LD_ADDR_OWVAR 39
28878: PUSH
28879: LD_VAR 0 2
28883: ST_TO_ADDR
// vc_control := control ;
28884: LD_ADDR_OWVAR 38
28888: PUSH
28889: LD_VAR 0 3
28893: ST_TO_ADDR
// vc_weapon := weapon ;
28894: LD_ADDR_OWVAR 40
28898: PUSH
28899: LD_VAR 0 4
28903: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28904: LD_ADDR_OWVAR 41
28908: PUSH
28909: LD_VAR 0 5
28913: ST_TO_ADDR
// end ;
28914: LD_VAR 0 6
28918: RET
// export function WantPlant ( unit ) ; var task ; begin
28919: LD_INT 0
28921: PPUSH
28922: PPUSH
// result := false ;
28923: LD_ADDR_VAR 0 2
28927: PUSH
28928: LD_INT 0
28930: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28931: LD_ADDR_VAR 0 3
28935: PUSH
28936: LD_VAR 0 1
28940: PPUSH
28941: CALL_OW 437
28945: ST_TO_ADDR
// if task then
28946: LD_VAR 0 3
28950: IFFALSE 28978
// if task [ 1 ] [ 1 ] = p then
28952: LD_VAR 0 3
28956: PUSH
28957: LD_INT 1
28959: ARRAY
28960: PUSH
28961: LD_INT 1
28963: ARRAY
28964: PUSH
28965: LD_STRING p
28967: EQUAL
28968: IFFALSE 28978
// result := true ;
28970: LD_ADDR_VAR 0 2
28974: PUSH
28975: LD_INT 1
28977: ST_TO_ADDR
// end ;
28978: LD_VAR 0 2
28982: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28983: LD_INT 0
28985: PPUSH
28986: PPUSH
28987: PPUSH
28988: PPUSH
// if pos < 1 then
28989: LD_VAR 0 2
28993: PUSH
28994: LD_INT 1
28996: LESS
28997: IFFALSE 29001
// exit ;
28999: GO 29304
// if pos = 1 then
29001: LD_VAR 0 2
29005: PUSH
29006: LD_INT 1
29008: EQUAL
29009: IFFALSE 29042
// result := Replace ( arr , pos [ 1 ] , value ) else
29011: LD_ADDR_VAR 0 4
29015: PUSH
29016: LD_VAR 0 1
29020: PPUSH
29021: LD_VAR 0 2
29025: PUSH
29026: LD_INT 1
29028: ARRAY
29029: PPUSH
29030: LD_VAR 0 3
29034: PPUSH
29035: CALL_OW 1
29039: ST_TO_ADDR
29040: GO 29304
// begin tmp := arr ;
29042: LD_ADDR_VAR 0 6
29046: PUSH
29047: LD_VAR 0 1
29051: ST_TO_ADDR
// s_arr := [ tmp ] ;
29052: LD_ADDR_VAR 0 7
29056: PUSH
29057: LD_VAR 0 6
29061: PUSH
29062: EMPTY
29063: LIST
29064: ST_TO_ADDR
// for i = 1 to pos - 1 do
29065: LD_ADDR_VAR 0 5
29069: PUSH
29070: DOUBLE
29071: LD_INT 1
29073: DEC
29074: ST_TO_ADDR
29075: LD_VAR 0 2
29079: PUSH
29080: LD_INT 1
29082: MINUS
29083: PUSH
29084: FOR_TO
29085: IFFALSE 29130
// begin tmp := tmp [ pos [ i ] ] ;
29087: LD_ADDR_VAR 0 6
29091: PUSH
29092: LD_VAR 0 6
29096: PUSH
29097: LD_VAR 0 2
29101: PUSH
29102: LD_VAR 0 5
29106: ARRAY
29107: ARRAY
29108: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29109: LD_ADDR_VAR 0 7
29113: PUSH
29114: LD_VAR 0 7
29118: PUSH
29119: LD_VAR 0 6
29123: PUSH
29124: EMPTY
29125: LIST
29126: ADD
29127: ST_TO_ADDR
// end ;
29128: GO 29084
29130: POP
29131: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29132: LD_ADDR_VAR 0 6
29136: PUSH
29137: LD_VAR 0 6
29141: PPUSH
29142: LD_VAR 0 2
29146: PUSH
29147: LD_VAR 0 2
29151: ARRAY
29152: PPUSH
29153: LD_VAR 0 3
29157: PPUSH
29158: CALL_OW 1
29162: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29163: LD_ADDR_VAR 0 7
29167: PUSH
29168: LD_VAR 0 7
29172: PPUSH
29173: LD_VAR 0 7
29177: PPUSH
29178: LD_VAR 0 6
29182: PPUSH
29183: CALL_OW 1
29187: ST_TO_ADDR
// for i = s_arr downto 2 do
29188: LD_ADDR_VAR 0 5
29192: PUSH
29193: DOUBLE
29194: LD_VAR 0 7
29198: INC
29199: ST_TO_ADDR
29200: LD_INT 2
29202: PUSH
29203: FOR_DOWNTO
29204: IFFALSE 29288
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29206: LD_ADDR_VAR 0 6
29210: PUSH
29211: LD_VAR 0 7
29215: PUSH
29216: LD_VAR 0 5
29220: PUSH
29221: LD_INT 1
29223: MINUS
29224: ARRAY
29225: PPUSH
29226: LD_VAR 0 2
29230: PUSH
29231: LD_VAR 0 5
29235: PUSH
29236: LD_INT 1
29238: MINUS
29239: ARRAY
29240: PPUSH
29241: LD_VAR 0 7
29245: PUSH
29246: LD_VAR 0 5
29250: ARRAY
29251: PPUSH
29252: CALL_OW 1
29256: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29257: LD_ADDR_VAR 0 7
29261: PUSH
29262: LD_VAR 0 7
29266: PPUSH
29267: LD_VAR 0 5
29271: PUSH
29272: LD_INT 1
29274: MINUS
29275: PPUSH
29276: LD_VAR 0 6
29280: PPUSH
29281: CALL_OW 1
29285: ST_TO_ADDR
// end ;
29286: GO 29203
29288: POP
29289: POP
// result := s_arr [ 1 ] ;
29290: LD_ADDR_VAR 0 4
29294: PUSH
29295: LD_VAR 0 7
29299: PUSH
29300: LD_INT 1
29302: ARRAY
29303: ST_TO_ADDR
// end ; end ;
29304: LD_VAR 0 4
29308: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29309: LD_INT 0
29311: PPUSH
29312: PPUSH
// if not list then
29313: LD_VAR 0 1
29317: NOT
29318: IFFALSE 29322
// exit ;
29320: GO 29413
// i := list [ pos1 ] ;
29322: LD_ADDR_VAR 0 5
29326: PUSH
29327: LD_VAR 0 1
29331: PUSH
29332: LD_VAR 0 2
29336: ARRAY
29337: ST_TO_ADDR
// if not i then
29338: LD_VAR 0 5
29342: NOT
29343: IFFALSE 29347
// exit ;
29345: GO 29413
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29347: LD_ADDR_VAR 0 1
29351: PUSH
29352: LD_VAR 0 1
29356: PPUSH
29357: LD_VAR 0 2
29361: PPUSH
29362: LD_VAR 0 1
29366: PUSH
29367: LD_VAR 0 3
29371: ARRAY
29372: PPUSH
29373: CALL_OW 1
29377: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29378: LD_ADDR_VAR 0 1
29382: PUSH
29383: LD_VAR 0 1
29387: PPUSH
29388: LD_VAR 0 3
29392: PPUSH
29393: LD_VAR 0 5
29397: PPUSH
29398: CALL_OW 1
29402: ST_TO_ADDR
// result := list ;
29403: LD_ADDR_VAR 0 4
29407: PUSH
29408: LD_VAR 0 1
29412: ST_TO_ADDR
// end ;
29413: LD_VAR 0 4
29417: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29418: LD_INT 0
29420: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29421: LD_ADDR_VAR 0 5
29425: PUSH
29426: LD_VAR 0 1
29430: PPUSH
29431: CALL_OW 250
29435: PPUSH
29436: LD_VAR 0 1
29440: PPUSH
29441: CALL_OW 251
29445: PPUSH
29446: LD_VAR 0 2
29450: PPUSH
29451: LD_VAR 0 3
29455: PPUSH
29456: LD_VAR 0 4
29460: PPUSH
29461: CALL 29471 0 5
29465: ST_TO_ADDR
// end ;
29466: LD_VAR 0 5
29470: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29471: LD_INT 0
29473: PPUSH
29474: PPUSH
29475: PPUSH
29476: PPUSH
// if not list then
29477: LD_VAR 0 3
29481: NOT
29482: IFFALSE 29486
// exit ;
29484: GO 29874
// result := [ ] ;
29486: LD_ADDR_VAR 0 6
29490: PUSH
29491: EMPTY
29492: ST_TO_ADDR
// for i in list do
29493: LD_ADDR_VAR 0 7
29497: PUSH
29498: LD_VAR 0 3
29502: PUSH
29503: FOR_IN
29504: IFFALSE 29706
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29506: LD_ADDR_VAR 0 9
29510: PUSH
29511: LD_VAR 0 7
29515: PPUSH
29516: LD_VAR 0 1
29520: PPUSH
29521: LD_VAR 0 2
29525: PPUSH
29526: CALL_OW 297
29530: ST_TO_ADDR
// if not result then
29531: LD_VAR 0 6
29535: NOT
29536: IFFALSE 29562
// result := [ [ i , tmp ] ] else
29538: LD_ADDR_VAR 0 6
29542: PUSH
29543: LD_VAR 0 7
29547: PUSH
29548: LD_VAR 0 9
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: EMPTY
29558: LIST
29559: ST_TO_ADDR
29560: GO 29704
// begin if result [ result ] [ 2 ] < tmp then
29562: LD_VAR 0 6
29566: PUSH
29567: LD_VAR 0 6
29571: ARRAY
29572: PUSH
29573: LD_INT 2
29575: ARRAY
29576: PUSH
29577: LD_VAR 0 9
29581: LESS
29582: IFFALSE 29624
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29584: LD_ADDR_VAR 0 6
29588: PUSH
29589: LD_VAR 0 6
29593: PPUSH
29594: LD_VAR 0 6
29598: PUSH
29599: LD_INT 1
29601: PLUS
29602: PPUSH
29603: LD_VAR 0 7
29607: PUSH
29608: LD_VAR 0 9
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: PPUSH
29617: CALL_OW 2
29621: ST_TO_ADDR
29622: GO 29704
// for j = 1 to result do
29624: LD_ADDR_VAR 0 8
29628: PUSH
29629: DOUBLE
29630: LD_INT 1
29632: DEC
29633: ST_TO_ADDR
29634: LD_VAR 0 6
29638: PUSH
29639: FOR_TO
29640: IFFALSE 29702
// begin if tmp < result [ j ] [ 2 ] then
29642: LD_VAR 0 9
29646: PUSH
29647: LD_VAR 0 6
29651: PUSH
29652: LD_VAR 0 8
29656: ARRAY
29657: PUSH
29658: LD_INT 2
29660: ARRAY
29661: LESS
29662: IFFALSE 29700
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29664: LD_ADDR_VAR 0 6
29668: PUSH
29669: LD_VAR 0 6
29673: PPUSH
29674: LD_VAR 0 8
29678: PPUSH
29679: LD_VAR 0 7
29683: PUSH
29684: LD_VAR 0 9
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PPUSH
29693: CALL_OW 2
29697: ST_TO_ADDR
// break ;
29698: GO 29702
// end ; end ;
29700: GO 29639
29702: POP
29703: POP
// end ; end ;
29704: GO 29503
29706: POP
29707: POP
// if result and not asc then
29708: LD_VAR 0 6
29712: PUSH
29713: LD_VAR 0 4
29717: NOT
29718: AND
29719: IFFALSE 29794
// begin tmp := result ;
29721: LD_ADDR_VAR 0 9
29725: PUSH
29726: LD_VAR 0 6
29730: ST_TO_ADDR
// for i = tmp downto 1 do
29731: LD_ADDR_VAR 0 7
29735: PUSH
29736: DOUBLE
29737: LD_VAR 0 9
29741: INC
29742: ST_TO_ADDR
29743: LD_INT 1
29745: PUSH
29746: FOR_DOWNTO
29747: IFFALSE 29792
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
29749: LD_ADDR_VAR 0 6
29753: PUSH
29754: LD_VAR 0 6
29758: PPUSH
29759: LD_VAR 0 9
29763: PUSH
29764: LD_VAR 0 7
29768: MINUS
29769: PUSH
29770: LD_INT 1
29772: PLUS
29773: PPUSH
29774: LD_VAR 0 9
29778: PUSH
29779: LD_VAR 0 7
29783: ARRAY
29784: PPUSH
29785: CALL_OW 1
29789: ST_TO_ADDR
29790: GO 29746
29792: POP
29793: POP
// end ; tmp := [ ] ;
29794: LD_ADDR_VAR 0 9
29798: PUSH
29799: EMPTY
29800: ST_TO_ADDR
// if mode then
29801: LD_VAR 0 5
29805: IFFALSE 29874
// begin for i = 1 to result do
29807: LD_ADDR_VAR 0 7
29811: PUSH
29812: DOUBLE
29813: LD_INT 1
29815: DEC
29816: ST_TO_ADDR
29817: LD_VAR 0 6
29821: PUSH
29822: FOR_TO
29823: IFFALSE 29862
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
29825: LD_ADDR_VAR 0 9
29829: PUSH
29830: LD_VAR 0 9
29834: PPUSH
29835: LD_VAR 0 7
29839: PPUSH
29840: LD_VAR 0 6
29844: PUSH
29845: LD_VAR 0 7
29849: ARRAY
29850: PUSH
29851: LD_INT 1
29853: ARRAY
29854: PPUSH
29855: CALL_OW 1
29859: ST_TO_ADDR
29860: GO 29822
29862: POP
29863: POP
// result := tmp ;
29864: LD_ADDR_VAR 0 6
29868: PUSH
29869: LD_VAR 0 9
29873: ST_TO_ADDR
// end ; end ;
29874: LD_VAR 0 6
29878: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
29879: LD_INT 0
29881: PPUSH
29882: PPUSH
29883: PPUSH
29884: PPUSH
29885: PPUSH
29886: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
29887: LD_ADDR_VAR 0 5
29891: PUSH
29892: LD_INT 0
29894: PUSH
29895: LD_INT 0
29897: PUSH
29898: LD_INT 0
29900: PUSH
29901: EMPTY
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: ST_TO_ADDR
// if not x or not y then
29909: LD_VAR 0 2
29913: NOT
29914: PUSH
29915: LD_VAR 0 3
29919: NOT
29920: OR
29921: IFFALSE 29925
// exit ;
29923: GO 31571
// if not range then
29925: LD_VAR 0 4
29929: NOT
29930: IFFALSE 29940
// range := 10 ;
29932: LD_ADDR_VAR 0 4
29936: PUSH
29937: LD_INT 10
29939: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29940: LD_ADDR_VAR 0 8
29944: PUSH
29945: LD_INT 81
29947: PUSH
29948: LD_VAR 0 1
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: LD_INT 92
29959: PUSH
29960: LD_VAR 0 2
29964: PUSH
29965: LD_VAR 0 3
29969: PUSH
29970: LD_VAR 0 4
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: PUSH
29981: LD_INT 3
29983: PUSH
29984: LD_INT 21
29986: PUSH
29987: LD_INT 3
29989: PUSH
29990: EMPTY
29991: LIST
29992: LIST
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: LIST
30002: PPUSH
30003: CALL_OW 69
30007: ST_TO_ADDR
// if not tmp then
30008: LD_VAR 0 8
30012: NOT
30013: IFFALSE 30017
// exit ;
30015: GO 31571
// for i in tmp do
30017: LD_ADDR_VAR 0 6
30021: PUSH
30022: LD_VAR 0 8
30026: PUSH
30027: FOR_IN
30028: IFFALSE 31546
// begin points := [ 0 , 0 , 0 ] ;
30030: LD_ADDR_VAR 0 9
30034: PUSH
30035: LD_INT 0
30037: PUSH
30038: LD_INT 0
30040: PUSH
30041: LD_INT 0
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: LIST
30048: ST_TO_ADDR
// bpoints := 1 ;
30049: LD_ADDR_VAR 0 10
30053: PUSH
30054: LD_INT 1
30056: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30057: LD_VAR 0 6
30061: PPUSH
30062: CALL_OW 247
30066: PUSH
30067: LD_INT 1
30069: DOUBLE
30070: EQUAL
30071: IFTRUE 30075
30073: GO 30653
30075: POP
// begin if GetClass ( i ) = 1 then
30076: LD_VAR 0 6
30080: PPUSH
30081: CALL_OW 257
30085: PUSH
30086: LD_INT 1
30088: EQUAL
30089: IFFALSE 30110
// points := [ 10 , 5 , 3 ] ;
30091: LD_ADDR_VAR 0 9
30095: PUSH
30096: LD_INT 10
30098: PUSH
30099: LD_INT 5
30101: PUSH
30102: LD_INT 3
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: LIST
30109: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30110: LD_VAR 0 6
30114: PPUSH
30115: CALL_OW 257
30119: PUSH
30120: LD_INT 2
30122: PUSH
30123: LD_INT 3
30125: PUSH
30126: LD_INT 4
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: LIST
30133: IN
30134: IFFALSE 30155
// points := [ 3 , 2 , 1 ] ;
30136: LD_ADDR_VAR 0 9
30140: PUSH
30141: LD_INT 3
30143: PUSH
30144: LD_INT 2
30146: PUSH
30147: LD_INT 1
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: LIST
30154: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30155: LD_VAR 0 6
30159: PPUSH
30160: CALL_OW 257
30164: PUSH
30165: LD_INT 5
30167: EQUAL
30168: IFFALSE 30189
// points := [ 130 , 5 , 2 ] ;
30170: LD_ADDR_VAR 0 9
30174: PUSH
30175: LD_INT 130
30177: PUSH
30178: LD_INT 5
30180: PUSH
30181: LD_INT 2
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: LIST
30188: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30189: LD_VAR 0 6
30193: PPUSH
30194: CALL_OW 257
30198: PUSH
30199: LD_INT 8
30201: EQUAL
30202: IFFALSE 30223
// points := [ 35 , 35 , 30 ] ;
30204: LD_ADDR_VAR 0 9
30208: PUSH
30209: LD_INT 35
30211: PUSH
30212: LD_INT 35
30214: PUSH
30215: LD_INT 30
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: LIST
30222: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30223: LD_VAR 0 6
30227: PPUSH
30228: CALL_OW 257
30232: PUSH
30233: LD_INT 9
30235: EQUAL
30236: IFFALSE 30257
// points := [ 20 , 55 , 40 ] ;
30238: LD_ADDR_VAR 0 9
30242: PUSH
30243: LD_INT 20
30245: PUSH
30246: LD_INT 55
30248: PUSH
30249: LD_INT 40
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: LIST
30256: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30257: LD_VAR 0 6
30261: PPUSH
30262: CALL_OW 257
30266: PUSH
30267: LD_INT 12
30269: PUSH
30270: LD_INT 16
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: IN
30277: IFFALSE 30298
// points := [ 5 , 3 , 2 ] ;
30279: LD_ADDR_VAR 0 9
30283: PUSH
30284: LD_INT 5
30286: PUSH
30287: LD_INT 3
30289: PUSH
30290: LD_INT 2
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: LIST
30297: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30298: LD_VAR 0 6
30302: PPUSH
30303: CALL_OW 257
30307: PUSH
30308: LD_INT 17
30310: EQUAL
30311: IFFALSE 30332
// points := [ 100 , 50 , 75 ] ;
30313: LD_ADDR_VAR 0 9
30317: PUSH
30318: LD_INT 100
30320: PUSH
30321: LD_INT 50
30323: PUSH
30324: LD_INT 75
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: LIST
30331: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30332: LD_VAR 0 6
30336: PPUSH
30337: CALL_OW 257
30341: PUSH
30342: LD_INT 15
30344: EQUAL
30345: IFFALSE 30366
// points := [ 10 , 5 , 3 ] ;
30347: LD_ADDR_VAR 0 9
30351: PUSH
30352: LD_INT 10
30354: PUSH
30355: LD_INT 5
30357: PUSH
30358: LD_INT 3
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: LIST
30365: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30366: LD_VAR 0 6
30370: PPUSH
30371: CALL_OW 257
30375: PUSH
30376: LD_INT 14
30378: EQUAL
30379: IFFALSE 30400
// points := [ 10 , 0 , 0 ] ;
30381: LD_ADDR_VAR 0 9
30385: PUSH
30386: LD_INT 10
30388: PUSH
30389: LD_INT 0
30391: PUSH
30392: LD_INT 0
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: LIST
30399: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30400: LD_VAR 0 6
30404: PPUSH
30405: CALL_OW 257
30409: PUSH
30410: LD_INT 11
30412: EQUAL
30413: IFFALSE 30434
// points := [ 30 , 10 , 5 ] ;
30415: LD_ADDR_VAR 0 9
30419: PUSH
30420: LD_INT 30
30422: PUSH
30423: LD_INT 10
30425: PUSH
30426: LD_INT 5
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: LIST
30433: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30434: LD_VAR 0 1
30438: PPUSH
30439: LD_INT 5
30441: PPUSH
30442: CALL_OW 321
30446: PUSH
30447: LD_INT 2
30449: EQUAL
30450: IFFALSE 30467
// bpoints := bpoints * 1.8 ;
30452: LD_ADDR_VAR 0 10
30456: PUSH
30457: LD_VAR 0 10
30461: PUSH
30462: LD_REAL  1.80000000000000E+0000
30465: MUL
30466: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30467: LD_VAR 0 6
30471: PPUSH
30472: CALL_OW 257
30476: PUSH
30477: LD_INT 1
30479: PUSH
30480: LD_INT 2
30482: PUSH
30483: LD_INT 3
30485: PUSH
30486: LD_INT 4
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: IN
30495: PUSH
30496: LD_VAR 0 1
30500: PPUSH
30501: LD_INT 51
30503: PPUSH
30504: CALL_OW 321
30508: PUSH
30509: LD_INT 2
30511: EQUAL
30512: AND
30513: IFFALSE 30530
// bpoints := bpoints * 1.2 ;
30515: LD_ADDR_VAR 0 10
30519: PUSH
30520: LD_VAR 0 10
30524: PUSH
30525: LD_REAL  1.20000000000000E+0000
30528: MUL
30529: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30530: LD_VAR 0 6
30534: PPUSH
30535: CALL_OW 257
30539: PUSH
30540: LD_INT 5
30542: PUSH
30543: LD_INT 7
30545: PUSH
30546: LD_INT 9
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: LIST
30553: IN
30554: PUSH
30555: LD_VAR 0 1
30559: PPUSH
30560: LD_INT 52
30562: PPUSH
30563: CALL_OW 321
30567: PUSH
30568: LD_INT 2
30570: EQUAL
30571: AND
30572: IFFALSE 30589
// bpoints := bpoints * 1.5 ;
30574: LD_ADDR_VAR 0 10
30578: PUSH
30579: LD_VAR 0 10
30583: PUSH
30584: LD_REAL  1.50000000000000E+0000
30587: MUL
30588: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30589: LD_VAR 0 1
30593: PPUSH
30594: LD_INT 66
30596: PPUSH
30597: CALL_OW 321
30601: PUSH
30602: LD_INT 2
30604: EQUAL
30605: IFFALSE 30622
// bpoints := bpoints * 1.1 ;
30607: LD_ADDR_VAR 0 10
30611: PUSH
30612: LD_VAR 0 10
30616: PUSH
30617: LD_REAL  1.10000000000000E+0000
30620: MUL
30621: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
30622: LD_ADDR_VAR 0 10
30626: PUSH
30627: LD_VAR 0 10
30631: PUSH
30632: LD_VAR 0 6
30636: PPUSH
30637: LD_INT 1
30639: PPUSH
30640: CALL_OW 259
30644: PUSH
30645: LD_REAL  1.15000000000000E+0000
30648: MUL
30649: MUL
30650: ST_TO_ADDR
// end ; unit_vehicle :
30651: GO 31475
30653: LD_INT 2
30655: DOUBLE
30656: EQUAL
30657: IFTRUE 30661
30659: GO 31463
30661: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
30662: LD_VAR 0 6
30666: PPUSH
30667: CALL_OW 264
30671: PUSH
30672: LD_INT 2
30674: PUSH
30675: LD_INT 42
30677: PUSH
30678: LD_INT 24
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: LIST
30685: IN
30686: IFFALSE 30707
// points := [ 25 , 5 , 3 ] ;
30688: LD_ADDR_VAR 0 9
30692: PUSH
30693: LD_INT 25
30695: PUSH
30696: LD_INT 5
30698: PUSH
30699: LD_INT 3
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: LIST
30706: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
30707: LD_VAR 0 6
30711: PPUSH
30712: CALL_OW 264
30716: PUSH
30717: LD_INT 4
30719: PUSH
30720: LD_INT 43
30722: PUSH
30723: LD_INT 25
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: LIST
30730: IN
30731: IFFALSE 30752
// points := [ 40 , 15 , 5 ] ;
30733: LD_ADDR_VAR 0 9
30737: PUSH
30738: LD_INT 40
30740: PUSH
30741: LD_INT 15
30743: PUSH
30744: LD_INT 5
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: LIST
30751: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
30752: LD_VAR 0 6
30756: PPUSH
30757: CALL_OW 264
30761: PUSH
30762: LD_INT 3
30764: PUSH
30765: LD_INT 23
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: IN
30772: IFFALSE 30793
// points := [ 7 , 25 , 8 ] ;
30774: LD_ADDR_VAR 0 9
30778: PUSH
30779: LD_INT 7
30781: PUSH
30782: LD_INT 25
30784: PUSH
30785: LD_INT 8
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: LIST
30792: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
30793: LD_VAR 0 6
30797: PPUSH
30798: CALL_OW 264
30802: PUSH
30803: LD_INT 5
30805: PUSH
30806: LD_INT 27
30808: PUSH
30809: LD_INT 44
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: LIST
30816: IN
30817: IFFALSE 30838
// points := [ 14 , 50 , 16 ] ;
30819: LD_ADDR_VAR 0 9
30823: PUSH
30824: LD_INT 14
30826: PUSH
30827: LD_INT 50
30829: PUSH
30830: LD_INT 16
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: LIST
30837: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
30838: LD_VAR 0 6
30842: PPUSH
30843: CALL_OW 264
30847: PUSH
30848: LD_INT 6
30850: PUSH
30851: LD_INT 46
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: IN
30858: IFFALSE 30879
// points := [ 32 , 120 , 70 ] ;
30860: LD_ADDR_VAR 0 9
30864: PUSH
30865: LD_INT 32
30867: PUSH
30868: LD_INT 120
30870: PUSH
30871: LD_INT 70
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: LIST
30878: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
30879: LD_VAR 0 6
30883: PPUSH
30884: CALL_OW 264
30888: PUSH
30889: LD_INT 7
30891: PUSH
30892: LD_INT 28
30894: PUSH
30895: LD_INT 45
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: LIST
30902: IN
30903: IFFALSE 30924
// points := [ 35 , 20 , 45 ] ;
30905: LD_ADDR_VAR 0 9
30909: PUSH
30910: LD_INT 35
30912: PUSH
30913: LD_INT 20
30915: PUSH
30916: LD_INT 45
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: LIST
30923: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30924: LD_VAR 0 6
30928: PPUSH
30929: CALL_OW 264
30933: PUSH
30934: LD_INT 47
30936: PUSH
30937: EMPTY
30938: LIST
30939: IN
30940: IFFALSE 30961
// points := [ 67 , 45 , 75 ] ;
30942: LD_ADDR_VAR 0 9
30946: PUSH
30947: LD_INT 67
30949: PUSH
30950: LD_INT 45
30952: PUSH
30953: LD_INT 75
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: LIST
30960: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30961: LD_VAR 0 6
30965: PPUSH
30966: CALL_OW 264
30970: PUSH
30971: LD_INT 26
30973: PUSH
30974: EMPTY
30975: LIST
30976: IN
30977: IFFALSE 30998
// points := [ 120 , 30 , 80 ] ;
30979: LD_ADDR_VAR 0 9
30983: PUSH
30984: LD_INT 120
30986: PUSH
30987: LD_INT 30
30989: PUSH
30990: LD_INT 80
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: LIST
30997: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30998: LD_VAR 0 6
31002: PPUSH
31003: CALL_OW 264
31007: PUSH
31008: LD_INT 22
31010: PUSH
31011: EMPTY
31012: LIST
31013: IN
31014: IFFALSE 31035
// points := [ 40 , 1 , 1 ] ;
31016: LD_ADDR_VAR 0 9
31020: PUSH
31021: LD_INT 40
31023: PUSH
31024: LD_INT 1
31026: PUSH
31027: LD_INT 1
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: LIST
31034: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31035: LD_VAR 0 6
31039: PPUSH
31040: CALL_OW 264
31044: PUSH
31045: LD_INT 29
31047: PUSH
31048: EMPTY
31049: LIST
31050: IN
31051: IFFALSE 31072
// points := [ 70 , 200 , 400 ] ;
31053: LD_ADDR_VAR 0 9
31057: PUSH
31058: LD_INT 70
31060: PUSH
31061: LD_INT 200
31063: PUSH
31064: LD_INT 400
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: LIST
31071: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31072: LD_VAR 0 6
31076: PPUSH
31077: CALL_OW 264
31081: PUSH
31082: LD_INT 14
31084: PUSH
31085: LD_INT 53
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: IN
31092: IFFALSE 31113
// points := [ 40 , 10 , 20 ] ;
31094: LD_ADDR_VAR 0 9
31098: PUSH
31099: LD_INT 40
31101: PUSH
31102: LD_INT 10
31104: PUSH
31105: LD_INT 20
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: LIST
31112: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31113: LD_VAR 0 6
31117: PPUSH
31118: CALL_OW 264
31122: PUSH
31123: LD_INT 9
31125: PUSH
31126: EMPTY
31127: LIST
31128: IN
31129: IFFALSE 31150
// points := [ 5 , 70 , 20 ] ;
31131: LD_ADDR_VAR 0 9
31135: PUSH
31136: LD_INT 5
31138: PUSH
31139: LD_INT 70
31141: PUSH
31142: LD_INT 20
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: LIST
31149: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31150: LD_VAR 0 6
31154: PPUSH
31155: CALL_OW 264
31159: PUSH
31160: LD_INT 10
31162: PUSH
31163: EMPTY
31164: LIST
31165: IN
31166: IFFALSE 31187
// points := [ 35 , 110 , 70 ] ;
31168: LD_ADDR_VAR 0 9
31172: PUSH
31173: LD_INT 35
31175: PUSH
31176: LD_INT 110
31178: PUSH
31179: LD_INT 70
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: LIST
31186: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31187: LD_VAR 0 6
31191: PPUSH
31192: CALL_OW 265
31196: PUSH
31197: LD_INT 25
31199: EQUAL
31200: IFFALSE 31221
// points := [ 80 , 65 , 100 ] ;
31202: LD_ADDR_VAR 0 9
31206: PUSH
31207: LD_INT 80
31209: PUSH
31210: LD_INT 65
31212: PUSH
31213: LD_INT 100
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: LIST
31220: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31221: LD_VAR 0 6
31225: PPUSH
31226: CALL_OW 263
31230: PUSH
31231: LD_INT 1
31233: EQUAL
31234: IFFALSE 31269
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31236: LD_ADDR_VAR 0 10
31240: PUSH
31241: LD_VAR 0 10
31245: PUSH
31246: LD_VAR 0 6
31250: PPUSH
31251: CALL_OW 311
31255: PPUSH
31256: LD_INT 3
31258: PPUSH
31259: CALL_OW 259
31263: PUSH
31264: LD_INT 4
31266: MUL
31267: MUL
31268: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31269: LD_VAR 0 6
31273: PPUSH
31274: CALL_OW 263
31278: PUSH
31279: LD_INT 2
31281: EQUAL
31282: IFFALSE 31333
// begin j := IsControledBy ( i ) ;
31284: LD_ADDR_VAR 0 7
31288: PUSH
31289: LD_VAR 0 6
31293: PPUSH
31294: CALL_OW 312
31298: ST_TO_ADDR
// if j then
31299: LD_VAR 0 7
31303: IFFALSE 31333
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31305: LD_ADDR_VAR 0 10
31309: PUSH
31310: LD_VAR 0 10
31314: PUSH
31315: LD_VAR 0 7
31319: PPUSH
31320: LD_INT 3
31322: PPUSH
31323: CALL_OW 259
31327: PUSH
31328: LD_INT 3
31330: MUL
31331: MUL
31332: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31333: LD_VAR 0 6
31337: PPUSH
31338: CALL_OW 264
31342: PUSH
31343: LD_INT 5
31345: PUSH
31346: LD_INT 6
31348: PUSH
31349: LD_INT 46
31351: PUSH
31352: LD_INT 44
31354: PUSH
31355: LD_INT 47
31357: PUSH
31358: LD_INT 45
31360: PUSH
31361: LD_INT 28
31363: PUSH
31364: LD_INT 7
31366: PUSH
31367: LD_INT 27
31369: PUSH
31370: LD_INT 29
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: IN
31385: PUSH
31386: LD_VAR 0 1
31390: PPUSH
31391: LD_INT 52
31393: PPUSH
31394: CALL_OW 321
31398: PUSH
31399: LD_INT 2
31401: EQUAL
31402: AND
31403: IFFALSE 31420
// bpoints := bpoints * 1.2 ;
31405: LD_ADDR_VAR 0 10
31409: PUSH
31410: LD_VAR 0 10
31414: PUSH
31415: LD_REAL  1.20000000000000E+0000
31418: MUL
31419: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31420: LD_VAR 0 6
31424: PPUSH
31425: CALL_OW 264
31429: PUSH
31430: LD_INT 6
31432: PUSH
31433: LD_INT 46
31435: PUSH
31436: LD_INT 47
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: LIST
31443: IN
31444: IFFALSE 31461
// bpoints := bpoints * 1.2 ;
31446: LD_ADDR_VAR 0 10
31450: PUSH
31451: LD_VAR 0 10
31455: PUSH
31456: LD_REAL  1.20000000000000E+0000
31459: MUL
31460: ST_TO_ADDR
// end ; unit_building :
31461: GO 31475
31463: LD_INT 3
31465: DOUBLE
31466: EQUAL
31467: IFTRUE 31471
31469: GO 31474
31471: POP
// ; end ;
31472: GO 31475
31474: POP
// for j = 1 to 3 do
31475: LD_ADDR_VAR 0 7
31479: PUSH
31480: DOUBLE
31481: LD_INT 1
31483: DEC
31484: ST_TO_ADDR
31485: LD_INT 3
31487: PUSH
31488: FOR_TO
31489: IFFALSE 31542
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31491: LD_ADDR_VAR 0 5
31495: PUSH
31496: LD_VAR 0 5
31500: PPUSH
31501: LD_VAR 0 7
31505: PPUSH
31506: LD_VAR 0 5
31510: PUSH
31511: LD_VAR 0 7
31515: ARRAY
31516: PUSH
31517: LD_VAR 0 9
31521: PUSH
31522: LD_VAR 0 7
31526: ARRAY
31527: PUSH
31528: LD_VAR 0 10
31532: MUL
31533: PLUS
31534: PPUSH
31535: CALL_OW 1
31539: ST_TO_ADDR
31540: GO 31488
31542: POP
31543: POP
// end ;
31544: GO 30027
31546: POP
31547: POP
// result := Replace ( result , 4 , tmp ) ;
31548: LD_ADDR_VAR 0 5
31552: PUSH
31553: LD_VAR 0 5
31557: PPUSH
31558: LD_INT 4
31560: PPUSH
31561: LD_VAR 0 8
31565: PPUSH
31566: CALL_OW 1
31570: ST_TO_ADDR
// end ;
31571: LD_VAR 0 5
31575: RET
// export function DangerAtRange ( unit , range ) ; begin
31576: LD_INT 0
31578: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31579: LD_ADDR_VAR 0 3
31583: PUSH
31584: LD_VAR 0 1
31588: PPUSH
31589: CALL_OW 255
31593: PPUSH
31594: LD_VAR 0 1
31598: PPUSH
31599: CALL_OW 250
31603: PPUSH
31604: LD_VAR 0 1
31608: PPUSH
31609: CALL_OW 251
31613: PPUSH
31614: LD_VAR 0 2
31618: PPUSH
31619: CALL 29879 0 4
31623: ST_TO_ADDR
// end ;
31624: LD_VAR 0 3
31628: RET
// export function DangerInArea ( side , area ) ; begin
31629: LD_INT 0
31631: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
31632: LD_ADDR_VAR 0 3
31636: PUSH
31637: LD_VAR 0 2
31641: PPUSH
31642: LD_INT 81
31644: PUSH
31645: LD_VAR 0 1
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PPUSH
31654: CALL_OW 70
31658: ST_TO_ADDR
// end ;
31659: LD_VAR 0 3
31663: RET
// export function IsExtension ( b ) ; begin
31664: LD_INT 0
31666: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
31667: LD_ADDR_VAR 0 2
31671: PUSH
31672: LD_VAR 0 1
31676: PUSH
31677: LD_INT 23
31679: PUSH
31680: LD_INT 20
31682: PUSH
31683: LD_INT 22
31685: PUSH
31686: LD_INT 17
31688: PUSH
31689: LD_INT 24
31691: PUSH
31692: LD_INT 21
31694: PUSH
31695: LD_INT 19
31697: PUSH
31698: LD_INT 16
31700: PUSH
31701: LD_INT 25
31703: PUSH
31704: LD_INT 18
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: IN
31719: ST_TO_ADDR
// end ;
31720: LD_VAR 0 2
31724: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
31725: LD_INT 0
31727: PPUSH
31728: PPUSH
31729: PPUSH
// result := [ ] ;
31730: LD_ADDR_VAR 0 3
31734: PUSH
31735: EMPTY
31736: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
31737: LD_ADDR_VAR 0 4
31741: PUSH
31742: LD_VAR 0 2
31746: PPUSH
31747: LD_INT 21
31749: PUSH
31750: LD_INT 3
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PPUSH
31757: CALL_OW 70
31761: ST_TO_ADDR
// if not tmp then
31762: LD_VAR 0 4
31766: NOT
31767: IFFALSE 31771
// exit ;
31769: GO 31829
// for i in tmp do
31771: LD_ADDR_VAR 0 5
31775: PUSH
31776: LD_VAR 0 4
31780: PUSH
31781: FOR_IN
31782: IFFALSE 31817
// if GetBase ( i ) <> base then
31784: LD_VAR 0 5
31788: PPUSH
31789: CALL_OW 274
31793: PUSH
31794: LD_VAR 0 1
31798: NONEQUAL
31799: IFFALSE 31815
// ComLinkToBase ( base , i ) ;
31801: LD_VAR 0 1
31805: PPUSH
31806: LD_VAR 0 5
31810: PPUSH
31811: CALL_OW 169
31815: GO 31781
31817: POP
31818: POP
// result := tmp ;
31819: LD_ADDR_VAR 0 3
31823: PUSH
31824: LD_VAR 0 4
31828: ST_TO_ADDR
// end ;
31829: LD_VAR 0 3
31833: RET
// export function ComComplete ( unit , b ) ; var i ; begin
31834: LD_INT 0
31836: PPUSH
31837: PPUSH
// if BuildingStatus ( b ) = bs_build then
31838: LD_VAR 0 2
31842: PPUSH
31843: CALL_OW 461
31847: PUSH
31848: LD_INT 1
31850: EQUAL
31851: IFFALSE 31911
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
31853: LD_VAR 0 1
31857: PPUSH
31858: LD_STRING h
31860: PUSH
31861: LD_VAR 0 2
31865: PPUSH
31866: CALL_OW 250
31870: PUSH
31871: LD_VAR 0 2
31875: PPUSH
31876: CALL_OW 251
31880: PUSH
31881: LD_VAR 0 2
31885: PUSH
31886: LD_INT 0
31888: PUSH
31889: LD_INT 0
31891: PUSH
31892: LD_INT 0
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: LIST
31903: PUSH
31904: EMPTY
31905: LIST
31906: PPUSH
31907: CALL_OW 446
// end ;
31911: LD_VAR 0 3
31915: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31916: LD_INT 0
31918: PPUSH
31919: PPUSH
31920: PPUSH
31921: PPUSH
31922: PPUSH
31923: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
31924: LD_VAR 0 1
31928: NOT
31929: PUSH
31930: LD_VAR 0 1
31934: PPUSH
31935: CALL_OW 263
31939: PUSH
31940: LD_INT 2
31942: EQUAL
31943: NOT
31944: OR
31945: IFFALSE 31949
// exit ;
31947: GO 32265
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31949: LD_ADDR_VAR 0 6
31953: PUSH
31954: LD_INT 22
31956: PUSH
31957: LD_VAR 0 1
31961: PPUSH
31962: CALL_OW 255
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: LD_INT 2
31973: PUSH
31974: LD_INT 30
31976: PUSH
31977: LD_INT 36
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 34
31986: PUSH
31987: LD_INT 31
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: LIST
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: PPUSH
32003: CALL_OW 69
32007: ST_TO_ADDR
// if not tmp then
32008: LD_VAR 0 6
32012: NOT
32013: IFFALSE 32017
// exit ;
32015: GO 32265
// result := [ ] ;
32017: LD_ADDR_VAR 0 2
32021: PUSH
32022: EMPTY
32023: ST_TO_ADDR
// for i in tmp do
32024: LD_ADDR_VAR 0 3
32028: PUSH
32029: LD_VAR 0 6
32033: PUSH
32034: FOR_IN
32035: IFFALSE 32106
// begin t := UnitsInside ( i ) ;
32037: LD_ADDR_VAR 0 4
32041: PUSH
32042: LD_VAR 0 3
32046: PPUSH
32047: CALL_OW 313
32051: ST_TO_ADDR
// if t then
32052: LD_VAR 0 4
32056: IFFALSE 32104
// for j in t do
32058: LD_ADDR_VAR 0 7
32062: PUSH
32063: LD_VAR 0 4
32067: PUSH
32068: FOR_IN
32069: IFFALSE 32102
// result := Insert ( result , result + 1 , j ) ;
32071: LD_ADDR_VAR 0 2
32075: PUSH
32076: LD_VAR 0 2
32080: PPUSH
32081: LD_VAR 0 2
32085: PUSH
32086: LD_INT 1
32088: PLUS
32089: PPUSH
32090: LD_VAR 0 7
32094: PPUSH
32095: CALL_OW 2
32099: ST_TO_ADDR
32100: GO 32068
32102: POP
32103: POP
// end ;
32104: GO 32034
32106: POP
32107: POP
// if not result then
32108: LD_VAR 0 2
32112: NOT
32113: IFFALSE 32117
// exit ;
32115: GO 32265
// mech := result [ 1 ] ;
32117: LD_ADDR_VAR 0 5
32121: PUSH
32122: LD_VAR 0 2
32126: PUSH
32127: LD_INT 1
32129: ARRAY
32130: ST_TO_ADDR
// if result > 1 then
32131: LD_VAR 0 2
32135: PUSH
32136: LD_INT 1
32138: GREATER
32139: IFFALSE 32251
// for i = 2 to result do
32141: LD_ADDR_VAR 0 3
32145: PUSH
32146: DOUBLE
32147: LD_INT 2
32149: DEC
32150: ST_TO_ADDR
32151: LD_VAR 0 2
32155: PUSH
32156: FOR_TO
32157: IFFALSE 32249
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32159: LD_ADDR_VAR 0 4
32163: PUSH
32164: LD_VAR 0 2
32168: PUSH
32169: LD_VAR 0 3
32173: ARRAY
32174: PPUSH
32175: LD_INT 3
32177: PPUSH
32178: CALL_OW 259
32182: PUSH
32183: LD_VAR 0 2
32187: PUSH
32188: LD_VAR 0 3
32192: ARRAY
32193: PPUSH
32194: CALL_OW 432
32198: MINUS
32199: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32200: LD_VAR 0 4
32204: PUSH
32205: LD_VAR 0 5
32209: PPUSH
32210: LD_INT 3
32212: PPUSH
32213: CALL_OW 259
32217: PUSH
32218: LD_VAR 0 5
32222: PPUSH
32223: CALL_OW 432
32227: MINUS
32228: GREATEREQUAL
32229: IFFALSE 32247
// mech := result [ i ] ;
32231: LD_ADDR_VAR 0 5
32235: PUSH
32236: LD_VAR 0 2
32240: PUSH
32241: LD_VAR 0 3
32245: ARRAY
32246: ST_TO_ADDR
// end ;
32247: GO 32156
32249: POP
32250: POP
// ComLinkTo ( vehicle , mech ) ;
32251: LD_VAR 0 1
32255: PPUSH
32256: LD_VAR 0 5
32260: PPUSH
32261: CALL_OW 135
// end ;
32265: LD_VAR 0 2
32269: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32270: LD_INT 0
32272: PPUSH
32273: PPUSH
32274: PPUSH
32275: PPUSH
32276: PPUSH
32277: PPUSH
32278: PPUSH
32279: PPUSH
32280: PPUSH
32281: PPUSH
32282: PPUSH
32283: PPUSH
32284: PPUSH
// result := [ ] ;
32285: LD_ADDR_VAR 0 7
32289: PUSH
32290: EMPTY
32291: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32292: LD_VAR 0 1
32296: PPUSH
32297: CALL_OW 266
32301: PUSH
32302: LD_INT 0
32304: PUSH
32305: LD_INT 1
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: IN
32312: NOT
32313: IFFALSE 32317
// exit ;
32315: GO 33948
// if name then
32317: LD_VAR 0 3
32321: IFFALSE 32337
// SetBName ( base_dep , name ) ;
32323: LD_VAR 0 1
32327: PPUSH
32328: LD_VAR 0 3
32332: PPUSH
32333: CALL_OW 500
// base := GetBase ( base_dep ) ;
32337: LD_ADDR_VAR 0 15
32341: PUSH
32342: LD_VAR 0 1
32346: PPUSH
32347: CALL_OW 274
32351: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32352: LD_ADDR_VAR 0 16
32356: PUSH
32357: LD_VAR 0 1
32361: PPUSH
32362: CALL_OW 255
32366: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32367: LD_ADDR_VAR 0 17
32371: PUSH
32372: LD_VAR 0 1
32376: PPUSH
32377: CALL_OW 248
32381: ST_TO_ADDR
// if sources then
32382: LD_VAR 0 5
32386: IFFALSE 32433
// for i = 1 to 3 do
32388: LD_ADDR_VAR 0 8
32392: PUSH
32393: DOUBLE
32394: LD_INT 1
32396: DEC
32397: ST_TO_ADDR
32398: LD_INT 3
32400: PUSH
32401: FOR_TO
32402: IFFALSE 32431
// AddResourceType ( base , i , sources [ i ] ) ;
32404: LD_VAR 0 15
32408: PPUSH
32409: LD_VAR 0 8
32413: PPUSH
32414: LD_VAR 0 5
32418: PUSH
32419: LD_VAR 0 8
32423: ARRAY
32424: PPUSH
32425: CALL_OW 276
32429: GO 32401
32431: POP
32432: POP
// buildings := GetBaseBuildings ( base , area ) ;
32433: LD_ADDR_VAR 0 18
32437: PUSH
32438: LD_VAR 0 15
32442: PPUSH
32443: LD_VAR 0 2
32447: PPUSH
32448: CALL 31725 0 2
32452: ST_TO_ADDR
// InitHc ;
32453: CALL_OW 19
// InitUc ;
32457: CALL_OW 18
// uc_side := side ;
32461: LD_ADDR_OWVAR 20
32465: PUSH
32466: LD_VAR 0 16
32470: ST_TO_ADDR
// uc_nation := nation ;
32471: LD_ADDR_OWVAR 21
32475: PUSH
32476: LD_VAR 0 17
32480: ST_TO_ADDR
// if buildings then
32481: LD_VAR 0 18
32485: IFFALSE 33807
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32487: LD_ADDR_VAR 0 19
32491: PUSH
32492: LD_VAR 0 18
32496: PPUSH
32497: LD_INT 2
32499: PUSH
32500: LD_INT 30
32502: PUSH
32503: LD_INT 29
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: PUSH
32510: LD_INT 30
32512: PUSH
32513: LD_INT 30
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: LIST
32524: PPUSH
32525: CALL_OW 72
32529: ST_TO_ADDR
// if tmp then
32530: LD_VAR 0 19
32534: IFFALSE 32582
// for i in tmp do
32536: LD_ADDR_VAR 0 8
32540: PUSH
32541: LD_VAR 0 19
32545: PUSH
32546: FOR_IN
32547: IFFALSE 32580
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32549: LD_VAR 0 8
32553: PPUSH
32554: CALL_OW 250
32558: PPUSH
32559: LD_VAR 0 8
32563: PPUSH
32564: CALL_OW 251
32568: PPUSH
32569: LD_VAR 0 16
32573: PPUSH
32574: CALL_OW 441
32578: GO 32546
32580: POP
32581: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
32582: LD_VAR 0 18
32586: PPUSH
32587: LD_INT 2
32589: PUSH
32590: LD_INT 30
32592: PUSH
32593: LD_INT 32
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: LD_INT 30
32602: PUSH
32603: LD_INT 33
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: LIST
32614: PPUSH
32615: CALL_OW 72
32619: IFFALSE 32707
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
32621: LD_ADDR_VAR 0 8
32625: PUSH
32626: LD_VAR 0 18
32630: PPUSH
32631: LD_INT 2
32633: PUSH
32634: LD_INT 30
32636: PUSH
32637: LD_INT 32
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 30
32646: PUSH
32647: LD_INT 33
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: LIST
32658: PPUSH
32659: CALL_OW 72
32663: PUSH
32664: FOR_IN
32665: IFFALSE 32705
// begin if not GetBWeapon ( i ) then
32667: LD_VAR 0 8
32671: PPUSH
32672: CALL_OW 269
32676: NOT
32677: IFFALSE 32703
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
32679: LD_VAR 0 8
32683: PPUSH
32684: LD_VAR 0 8
32688: PPUSH
32689: LD_VAR 0 2
32693: PPUSH
32694: CALL 33953 0 2
32698: PPUSH
32699: CALL_OW 431
// end ;
32703: GO 32664
32705: POP
32706: POP
// end ; for i = 1 to personel do
32707: LD_ADDR_VAR 0 8
32711: PUSH
32712: DOUBLE
32713: LD_INT 1
32715: DEC
32716: ST_TO_ADDR
32717: LD_VAR 0 6
32721: PUSH
32722: FOR_TO
32723: IFFALSE 33787
// begin if i > 4 then
32725: LD_VAR 0 8
32729: PUSH
32730: LD_INT 4
32732: GREATER
32733: IFFALSE 32737
// break ;
32735: GO 33787
// case i of 1 :
32737: LD_VAR 0 8
32741: PUSH
32742: LD_INT 1
32744: DOUBLE
32745: EQUAL
32746: IFTRUE 32750
32748: GO 32830
32750: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
32751: LD_ADDR_VAR 0 12
32755: PUSH
32756: LD_VAR 0 18
32760: PPUSH
32761: LD_INT 22
32763: PUSH
32764: LD_VAR 0 16
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: PUSH
32773: LD_INT 58
32775: PUSH
32776: EMPTY
32777: LIST
32778: PUSH
32779: LD_INT 2
32781: PUSH
32782: LD_INT 30
32784: PUSH
32785: LD_INT 32
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: PUSH
32792: LD_INT 30
32794: PUSH
32795: LD_INT 4
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 30
32804: PUSH
32805: LD_INT 5
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: LIST
32822: PPUSH
32823: CALL_OW 72
32827: ST_TO_ADDR
32828: GO 33052
32830: LD_INT 2
32832: DOUBLE
32833: EQUAL
32834: IFTRUE 32838
32836: GO 32900
32838: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
32839: LD_ADDR_VAR 0 12
32843: PUSH
32844: LD_VAR 0 18
32848: PPUSH
32849: LD_INT 22
32851: PUSH
32852: LD_VAR 0 16
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: LD_INT 2
32863: PUSH
32864: LD_INT 30
32866: PUSH
32867: LD_INT 0
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: PUSH
32874: LD_INT 30
32876: PUSH
32877: LD_INT 1
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: LIST
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: PPUSH
32893: CALL_OW 72
32897: ST_TO_ADDR
32898: GO 33052
32900: LD_INT 3
32902: DOUBLE
32903: EQUAL
32904: IFTRUE 32908
32906: GO 32970
32908: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32909: LD_ADDR_VAR 0 12
32913: PUSH
32914: LD_VAR 0 18
32918: PPUSH
32919: LD_INT 22
32921: PUSH
32922: LD_VAR 0 16
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PUSH
32931: LD_INT 2
32933: PUSH
32934: LD_INT 30
32936: PUSH
32937: LD_INT 2
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: LD_INT 30
32946: PUSH
32947: LD_INT 3
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: LIST
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: PPUSH
32963: CALL_OW 72
32967: ST_TO_ADDR
32968: GO 33052
32970: LD_INT 4
32972: DOUBLE
32973: EQUAL
32974: IFTRUE 32978
32976: GO 33051
32978: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32979: LD_ADDR_VAR 0 12
32983: PUSH
32984: LD_VAR 0 18
32988: PPUSH
32989: LD_INT 22
32991: PUSH
32992: LD_VAR 0 16
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 2
33003: PUSH
33004: LD_INT 30
33006: PUSH
33007: LD_INT 6
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 30
33016: PUSH
33017: LD_INT 7
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 30
33026: PUSH
33027: LD_INT 8
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PPUSH
33044: CALL_OW 72
33048: ST_TO_ADDR
33049: GO 33052
33051: POP
// if i = 1 then
33052: LD_VAR 0 8
33056: PUSH
33057: LD_INT 1
33059: EQUAL
33060: IFFALSE 33171
// begin tmp := [ ] ;
33062: LD_ADDR_VAR 0 19
33066: PUSH
33067: EMPTY
33068: ST_TO_ADDR
// for j in f do
33069: LD_ADDR_VAR 0 9
33073: PUSH
33074: LD_VAR 0 12
33078: PUSH
33079: FOR_IN
33080: IFFALSE 33153
// if GetBType ( j ) = b_bunker then
33082: LD_VAR 0 9
33086: PPUSH
33087: CALL_OW 266
33091: PUSH
33092: LD_INT 32
33094: EQUAL
33095: IFFALSE 33122
// tmp := Insert ( tmp , 1 , j ) else
33097: LD_ADDR_VAR 0 19
33101: PUSH
33102: LD_VAR 0 19
33106: PPUSH
33107: LD_INT 1
33109: PPUSH
33110: LD_VAR 0 9
33114: PPUSH
33115: CALL_OW 2
33119: ST_TO_ADDR
33120: GO 33151
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33122: LD_ADDR_VAR 0 19
33126: PUSH
33127: LD_VAR 0 19
33131: PPUSH
33132: LD_VAR 0 19
33136: PUSH
33137: LD_INT 1
33139: PLUS
33140: PPUSH
33141: LD_VAR 0 9
33145: PPUSH
33146: CALL_OW 2
33150: ST_TO_ADDR
33151: GO 33079
33153: POP
33154: POP
// if tmp then
33155: LD_VAR 0 19
33159: IFFALSE 33171
// f := tmp ;
33161: LD_ADDR_VAR 0 12
33165: PUSH
33166: LD_VAR 0 19
33170: ST_TO_ADDR
// end ; x := personel [ i ] ;
33171: LD_ADDR_VAR 0 13
33175: PUSH
33176: LD_VAR 0 6
33180: PUSH
33181: LD_VAR 0 8
33185: ARRAY
33186: ST_TO_ADDR
// if x = - 1 then
33187: LD_VAR 0 13
33191: PUSH
33192: LD_INT 1
33194: NEG
33195: EQUAL
33196: IFFALSE 33405
// begin for j in f do
33198: LD_ADDR_VAR 0 9
33202: PUSH
33203: LD_VAR 0 12
33207: PUSH
33208: FOR_IN
33209: IFFALSE 33401
// repeat InitHc ;
33211: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33215: LD_VAR 0 9
33219: PPUSH
33220: CALL_OW 266
33224: PUSH
33225: LD_INT 5
33227: EQUAL
33228: IFFALSE 33298
// begin if UnitsInside ( j ) < 3 then
33230: LD_VAR 0 9
33234: PPUSH
33235: CALL_OW 313
33239: PUSH
33240: LD_INT 3
33242: LESS
33243: IFFALSE 33279
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33245: LD_INT 0
33247: PPUSH
33248: LD_INT 5
33250: PUSH
33251: LD_INT 8
33253: PUSH
33254: LD_INT 9
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: LIST
33261: PUSH
33262: LD_VAR 0 17
33266: ARRAY
33267: PPUSH
33268: LD_VAR 0 4
33272: PPUSH
33273: CALL_OW 380
33277: GO 33296
// PrepareHuman ( false , i , skill ) ;
33279: LD_INT 0
33281: PPUSH
33282: LD_VAR 0 8
33286: PPUSH
33287: LD_VAR 0 4
33291: PPUSH
33292: CALL_OW 380
// end else
33296: GO 33315
// PrepareHuman ( false , i , skill ) ;
33298: LD_INT 0
33300: PPUSH
33301: LD_VAR 0 8
33305: PPUSH
33306: LD_VAR 0 4
33310: PPUSH
33311: CALL_OW 380
// un := CreateHuman ;
33315: LD_ADDR_VAR 0 14
33319: PUSH
33320: CALL_OW 44
33324: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33325: LD_ADDR_VAR 0 7
33329: PUSH
33330: LD_VAR 0 7
33334: PPUSH
33335: LD_INT 1
33337: PPUSH
33338: LD_VAR 0 14
33342: PPUSH
33343: CALL_OW 2
33347: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33348: LD_VAR 0 14
33352: PPUSH
33353: LD_VAR 0 9
33357: PPUSH
33358: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33362: LD_VAR 0 9
33366: PPUSH
33367: CALL_OW 313
33371: PUSH
33372: LD_INT 6
33374: EQUAL
33375: PUSH
33376: LD_VAR 0 9
33380: PPUSH
33381: CALL_OW 266
33385: PUSH
33386: LD_INT 32
33388: PUSH
33389: LD_INT 31
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: IN
33396: OR
33397: IFFALSE 33211
33399: GO 33208
33401: POP
33402: POP
// end else
33403: GO 33785
// for j = 1 to x do
33405: LD_ADDR_VAR 0 9
33409: PUSH
33410: DOUBLE
33411: LD_INT 1
33413: DEC
33414: ST_TO_ADDR
33415: LD_VAR 0 13
33419: PUSH
33420: FOR_TO
33421: IFFALSE 33783
// begin InitHc ;
33423: CALL_OW 19
// if not f then
33427: LD_VAR 0 12
33431: NOT
33432: IFFALSE 33521
// begin PrepareHuman ( false , i , skill ) ;
33434: LD_INT 0
33436: PPUSH
33437: LD_VAR 0 8
33441: PPUSH
33442: LD_VAR 0 4
33446: PPUSH
33447: CALL_OW 380
// un := CreateHuman ;
33451: LD_ADDR_VAR 0 14
33455: PUSH
33456: CALL_OW 44
33460: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33461: LD_ADDR_VAR 0 7
33465: PUSH
33466: LD_VAR 0 7
33470: PPUSH
33471: LD_INT 1
33473: PPUSH
33474: LD_VAR 0 14
33478: PPUSH
33479: CALL_OW 2
33483: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33484: LD_VAR 0 14
33488: PPUSH
33489: LD_VAR 0 1
33493: PPUSH
33494: CALL_OW 250
33498: PPUSH
33499: LD_VAR 0 1
33503: PPUSH
33504: CALL_OW 251
33508: PPUSH
33509: LD_INT 10
33511: PPUSH
33512: LD_INT 0
33514: PPUSH
33515: CALL_OW 50
// continue ;
33519: GO 33420
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33521: LD_VAR 0 12
33525: PUSH
33526: LD_INT 1
33528: ARRAY
33529: PPUSH
33530: CALL_OW 313
33534: PUSH
33535: LD_VAR 0 12
33539: PUSH
33540: LD_INT 1
33542: ARRAY
33543: PPUSH
33544: CALL_OW 266
33548: PUSH
33549: LD_INT 32
33551: PUSH
33552: LD_INT 31
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: IN
33559: AND
33560: PUSH
33561: LD_VAR 0 12
33565: PUSH
33566: LD_INT 1
33568: ARRAY
33569: PPUSH
33570: CALL_OW 313
33574: PUSH
33575: LD_INT 6
33577: EQUAL
33578: OR
33579: IFFALSE 33599
// f := Delete ( f , 1 ) ;
33581: LD_ADDR_VAR 0 12
33585: PUSH
33586: LD_VAR 0 12
33590: PPUSH
33591: LD_INT 1
33593: PPUSH
33594: CALL_OW 3
33598: ST_TO_ADDR
// if not f then
33599: LD_VAR 0 12
33603: NOT
33604: IFFALSE 33622
// begin x := x + 2 ;
33606: LD_ADDR_VAR 0 13
33610: PUSH
33611: LD_VAR 0 13
33615: PUSH
33616: LD_INT 2
33618: PLUS
33619: ST_TO_ADDR
// continue ;
33620: GO 33420
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
33622: LD_VAR 0 12
33626: PUSH
33627: LD_INT 1
33629: ARRAY
33630: PPUSH
33631: CALL_OW 266
33635: PUSH
33636: LD_INT 5
33638: EQUAL
33639: IFFALSE 33713
// begin if UnitsInside ( f [ 1 ] ) < 3 then
33641: LD_VAR 0 12
33645: PUSH
33646: LD_INT 1
33648: ARRAY
33649: PPUSH
33650: CALL_OW 313
33654: PUSH
33655: LD_INT 3
33657: LESS
33658: IFFALSE 33694
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33660: LD_INT 0
33662: PPUSH
33663: LD_INT 5
33665: PUSH
33666: LD_INT 8
33668: PUSH
33669: LD_INT 9
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: LIST
33676: PUSH
33677: LD_VAR 0 17
33681: ARRAY
33682: PPUSH
33683: LD_VAR 0 4
33687: PPUSH
33688: CALL_OW 380
33692: GO 33711
// PrepareHuman ( false , i , skill ) ;
33694: LD_INT 0
33696: PPUSH
33697: LD_VAR 0 8
33701: PPUSH
33702: LD_VAR 0 4
33706: PPUSH
33707: CALL_OW 380
// end else
33711: GO 33730
// PrepareHuman ( false , i , skill ) ;
33713: LD_INT 0
33715: PPUSH
33716: LD_VAR 0 8
33720: PPUSH
33721: LD_VAR 0 4
33725: PPUSH
33726: CALL_OW 380
// un := CreateHuman ;
33730: LD_ADDR_VAR 0 14
33734: PUSH
33735: CALL_OW 44
33739: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33740: LD_ADDR_VAR 0 7
33744: PUSH
33745: LD_VAR 0 7
33749: PPUSH
33750: LD_INT 1
33752: PPUSH
33753: LD_VAR 0 14
33757: PPUSH
33758: CALL_OW 2
33762: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
33763: LD_VAR 0 14
33767: PPUSH
33768: LD_VAR 0 12
33772: PUSH
33773: LD_INT 1
33775: ARRAY
33776: PPUSH
33777: CALL_OW 52
// end ;
33781: GO 33420
33783: POP
33784: POP
// end ;
33785: GO 32722
33787: POP
33788: POP
// result := result ^ buildings ;
33789: LD_ADDR_VAR 0 7
33793: PUSH
33794: LD_VAR 0 7
33798: PUSH
33799: LD_VAR 0 18
33803: ADD
33804: ST_TO_ADDR
// end else
33805: GO 33948
// begin for i = 1 to personel do
33807: LD_ADDR_VAR 0 8
33811: PUSH
33812: DOUBLE
33813: LD_INT 1
33815: DEC
33816: ST_TO_ADDR
33817: LD_VAR 0 6
33821: PUSH
33822: FOR_TO
33823: IFFALSE 33946
// begin if i > 4 then
33825: LD_VAR 0 8
33829: PUSH
33830: LD_INT 4
33832: GREATER
33833: IFFALSE 33837
// break ;
33835: GO 33946
// x := personel [ i ] ;
33837: LD_ADDR_VAR 0 13
33841: PUSH
33842: LD_VAR 0 6
33846: PUSH
33847: LD_VAR 0 8
33851: ARRAY
33852: ST_TO_ADDR
// if x = - 1 then
33853: LD_VAR 0 13
33857: PUSH
33858: LD_INT 1
33860: NEG
33861: EQUAL
33862: IFFALSE 33866
// continue ;
33864: GO 33822
// PrepareHuman ( false , i , skill ) ;
33866: LD_INT 0
33868: PPUSH
33869: LD_VAR 0 8
33873: PPUSH
33874: LD_VAR 0 4
33878: PPUSH
33879: CALL_OW 380
// un := CreateHuman ;
33883: LD_ADDR_VAR 0 14
33887: PUSH
33888: CALL_OW 44
33892: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33893: LD_VAR 0 14
33897: PPUSH
33898: LD_VAR 0 1
33902: PPUSH
33903: CALL_OW 250
33907: PPUSH
33908: LD_VAR 0 1
33912: PPUSH
33913: CALL_OW 251
33917: PPUSH
33918: LD_INT 10
33920: PPUSH
33921: LD_INT 0
33923: PPUSH
33924: CALL_OW 50
// result := result ^ un ;
33928: LD_ADDR_VAR 0 7
33932: PUSH
33933: LD_VAR 0 7
33937: PUSH
33938: LD_VAR 0 14
33942: ADD
33943: ST_TO_ADDR
// end ;
33944: GO 33822
33946: POP
33947: POP
// end ; end ;
33948: LD_VAR 0 7
33952: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33953: LD_INT 0
33955: PPUSH
33956: PPUSH
33957: PPUSH
33958: PPUSH
33959: PPUSH
33960: PPUSH
33961: PPUSH
33962: PPUSH
33963: PPUSH
33964: PPUSH
33965: PPUSH
33966: PPUSH
33967: PPUSH
33968: PPUSH
33969: PPUSH
33970: PPUSH
// result := false ;
33971: LD_ADDR_VAR 0 3
33975: PUSH
33976: LD_INT 0
33978: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33979: LD_VAR 0 1
33983: NOT
33984: PUSH
33985: LD_VAR 0 1
33989: PPUSH
33990: CALL_OW 266
33994: PUSH
33995: LD_INT 32
33997: PUSH
33998: LD_INT 33
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: IN
34005: NOT
34006: OR
34007: IFFALSE 34011
// exit ;
34009: GO 35147
// nat := GetNation ( tower ) ;
34011: LD_ADDR_VAR 0 12
34015: PUSH
34016: LD_VAR 0 1
34020: PPUSH
34021: CALL_OW 248
34025: ST_TO_ADDR
// side := GetSide ( tower ) ;
34026: LD_ADDR_VAR 0 16
34030: PUSH
34031: LD_VAR 0 1
34035: PPUSH
34036: CALL_OW 255
34040: ST_TO_ADDR
// x := GetX ( tower ) ;
34041: LD_ADDR_VAR 0 10
34045: PUSH
34046: LD_VAR 0 1
34050: PPUSH
34051: CALL_OW 250
34055: ST_TO_ADDR
// y := GetY ( tower ) ;
34056: LD_ADDR_VAR 0 11
34060: PUSH
34061: LD_VAR 0 1
34065: PPUSH
34066: CALL_OW 251
34070: ST_TO_ADDR
// if not x or not y then
34071: LD_VAR 0 10
34075: NOT
34076: PUSH
34077: LD_VAR 0 11
34081: NOT
34082: OR
34083: IFFALSE 34087
// exit ;
34085: GO 35147
// weapon := 0 ;
34087: LD_ADDR_VAR 0 18
34091: PUSH
34092: LD_INT 0
34094: ST_TO_ADDR
// fac_list := [ ] ;
34095: LD_ADDR_VAR 0 17
34099: PUSH
34100: EMPTY
34101: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
34102: LD_ADDR_VAR 0 6
34106: PUSH
34107: LD_VAR 0 1
34111: PPUSH
34112: CALL_OW 274
34116: PPUSH
34117: LD_VAR 0 2
34121: PPUSH
34122: CALL 31725 0 2
34126: PPUSH
34127: LD_INT 30
34129: PUSH
34130: LD_INT 3
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PPUSH
34137: CALL_OW 72
34141: ST_TO_ADDR
// if not factories then
34142: LD_VAR 0 6
34146: NOT
34147: IFFALSE 34151
// exit ;
34149: GO 35147
// for i in factories do
34151: LD_ADDR_VAR 0 8
34155: PUSH
34156: LD_VAR 0 6
34160: PUSH
34161: FOR_IN
34162: IFFALSE 34187
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34164: LD_ADDR_VAR 0 17
34168: PUSH
34169: LD_VAR 0 17
34173: PUSH
34174: LD_VAR 0 8
34178: PPUSH
34179: CALL_OW 478
34183: UNION
34184: ST_TO_ADDR
34185: GO 34161
34187: POP
34188: POP
// if not fac_list then
34189: LD_VAR 0 17
34193: NOT
34194: IFFALSE 34198
// exit ;
34196: GO 35147
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34198: LD_ADDR_VAR 0 5
34202: PUSH
34203: LD_INT 4
34205: PUSH
34206: LD_INT 5
34208: PUSH
34209: LD_INT 9
34211: PUSH
34212: LD_INT 10
34214: PUSH
34215: LD_INT 6
34217: PUSH
34218: LD_INT 7
34220: PUSH
34221: LD_INT 11
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 27
34235: PUSH
34236: LD_INT 28
34238: PUSH
34239: LD_INT 26
34241: PUSH
34242: LD_INT 30
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: PUSH
34251: LD_INT 43
34253: PUSH
34254: LD_INT 44
34256: PUSH
34257: LD_INT 46
34259: PUSH
34260: LD_INT 45
34262: PUSH
34263: LD_INT 47
34265: PUSH
34266: LD_INT 49
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: LIST
34281: PUSH
34282: LD_VAR 0 12
34286: ARRAY
34287: ST_TO_ADDR
// for i in list do
34288: LD_ADDR_VAR 0 8
34292: PUSH
34293: LD_VAR 0 5
34297: PUSH
34298: FOR_IN
34299: IFFALSE 34332
// if not i in fac_list then
34301: LD_VAR 0 8
34305: PUSH
34306: LD_VAR 0 17
34310: IN
34311: NOT
34312: IFFALSE 34330
// list := list diff i ;
34314: LD_ADDR_VAR 0 5
34318: PUSH
34319: LD_VAR 0 5
34323: PUSH
34324: LD_VAR 0 8
34328: DIFF
34329: ST_TO_ADDR
34330: GO 34298
34332: POP
34333: POP
// if not list then
34334: LD_VAR 0 5
34338: NOT
34339: IFFALSE 34343
// exit ;
34341: GO 35147
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34343: LD_VAR 0 12
34347: PUSH
34348: LD_INT 3
34350: EQUAL
34351: PUSH
34352: LD_INT 49
34354: PUSH
34355: LD_VAR 0 5
34359: IN
34360: AND
34361: PUSH
34362: LD_INT 31
34364: PPUSH
34365: LD_VAR 0 16
34369: PPUSH
34370: CALL_OW 321
34374: PUSH
34375: LD_INT 2
34377: EQUAL
34378: AND
34379: IFFALSE 34439
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34381: LD_INT 22
34383: PUSH
34384: LD_VAR 0 16
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: LD_INT 35
34395: PUSH
34396: LD_INT 49
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: LD_INT 91
34405: PUSH
34406: LD_VAR 0 1
34410: PUSH
34411: LD_INT 10
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: LIST
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: LIST
34423: PPUSH
34424: CALL_OW 69
34428: NOT
34429: IFFALSE 34439
// weapon := ru_time_lapser ;
34431: LD_ADDR_VAR 0 18
34435: PUSH
34436: LD_INT 49
34438: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34439: LD_VAR 0 12
34443: PUSH
34444: LD_INT 1
34446: PUSH
34447: LD_INT 2
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: IN
34454: PUSH
34455: LD_INT 11
34457: PUSH
34458: LD_VAR 0 5
34462: IN
34463: PUSH
34464: LD_INT 30
34466: PUSH
34467: LD_VAR 0 5
34471: IN
34472: OR
34473: AND
34474: PUSH
34475: LD_INT 6
34477: PPUSH
34478: LD_VAR 0 16
34482: PPUSH
34483: CALL_OW 321
34487: PUSH
34488: LD_INT 2
34490: EQUAL
34491: AND
34492: IFFALSE 34657
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34494: LD_INT 22
34496: PUSH
34497: LD_VAR 0 16
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 2
34508: PUSH
34509: LD_INT 35
34511: PUSH
34512: LD_INT 11
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PUSH
34519: LD_INT 35
34521: PUSH
34522: LD_INT 30
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: LIST
34533: PUSH
34534: LD_INT 91
34536: PUSH
34537: LD_VAR 0 1
34541: PUSH
34542: LD_INT 18
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: LIST
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: LIST
34554: PPUSH
34555: CALL_OW 69
34559: NOT
34560: PUSH
34561: LD_INT 22
34563: PUSH
34564: LD_VAR 0 16
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: PUSH
34573: LD_INT 2
34575: PUSH
34576: LD_INT 30
34578: PUSH
34579: LD_INT 32
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: LD_INT 30
34588: PUSH
34589: LD_INT 33
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 91
34603: PUSH
34604: LD_VAR 0 1
34608: PUSH
34609: LD_INT 12
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: LIST
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: LIST
34621: PUSH
34622: EMPTY
34623: LIST
34624: PPUSH
34625: CALL_OW 69
34629: PUSH
34630: LD_INT 2
34632: GREATER
34633: AND
34634: IFFALSE 34657
// weapon := [ us_radar , ar_radar ] [ nat ] ;
34636: LD_ADDR_VAR 0 18
34640: PUSH
34641: LD_INT 11
34643: PUSH
34644: LD_INT 30
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: PUSH
34651: LD_VAR 0 12
34655: ARRAY
34656: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
34657: LD_VAR 0 18
34661: NOT
34662: PUSH
34663: LD_INT 40
34665: PPUSH
34666: LD_VAR 0 16
34670: PPUSH
34671: CALL_OW 321
34675: PUSH
34676: LD_INT 2
34678: EQUAL
34679: AND
34680: PUSH
34681: LD_INT 7
34683: PUSH
34684: LD_VAR 0 5
34688: IN
34689: PUSH
34690: LD_INT 28
34692: PUSH
34693: LD_VAR 0 5
34697: IN
34698: OR
34699: PUSH
34700: LD_INT 45
34702: PUSH
34703: LD_VAR 0 5
34707: IN
34708: OR
34709: AND
34710: IFFALSE 34964
// begin hex := GetHexInfo ( x , y ) ;
34712: LD_ADDR_VAR 0 4
34716: PUSH
34717: LD_VAR 0 10
34721: PPUSH
34722: LD_VAR 0 11
34726: PPUSH
34727: CALL_OW 546
34731: ST_TO_ADDR
// if hex [ 1 ] then
34732: LD_VAR 0 4
34736: PUSH
34737: LD_INT 1
34739: ARRAY
34740: IFFALSE 34744
// exit ;
34742: GO 35147
// height := hex [ 2 ] ;
34744: LD_ADDR_VAR 0 15
34748: PUSH
34749: LD_VAR 0 4
34753: PUSH
34754: LD_INT 2
34756: ARRAY
34757: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
34758: LD_ADDR_VAR 0 14
34762: PUSH
34763: LD_INT 0
34765: PUSH
34766: LD_INT 2
34768: PUSH
34769: LD_INT 3
34771: PUSH
34772: LD_INT 5
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: ST_TO_ADDR
// for i in tmp do
34781: LD_ADDR_VAR 0 8
34785: PUSH
34786: LD_VAR 0 14
34790: PUSH
34791: FOR_IN
34792: IFFALSE 34962
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
34794: LD_ADDR_VAR 0 9
34798: PUSH
34799: LD_VAR 0 10
34803: PPUSH
34804: LD_VAR 0 8
34808: PPUSH
34809: LD_INT 5
34811: PPUSH
34812: CALL_OW 272
34816: PUSH
34817: LD_VAR 0 11
34821: PPUSH
34822: LD_VAR 0 8
34826: PPUSH
34827: LD_INT 5
34829: PPUSH
34830: CALL_OW 273
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34839: LD_VAR 0 9
34843: PUSH
34844: LD_INT 1
34846: ARRAY
34847: PPUSH
34848: LD_VAR 0 9
34852: PUSH
34853: LD_INT 2
34855: ARRAY
34856: PPUSH
34857: CALL_OW 488
34861: IFFALSE 34960
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
34863: LD_ADDR_VAR 0 4
34867: PUSH
34868: LD_VAR 0 9
34872: PUSH
34873: LD_INT 1
34875: ARRAY
34876: PPUSH
34877: LD_VAR 0 9
34881: PUSH
34882: LD_INT 2
34884: ARRAY
34885: PPUSH
34886: CALL_OW 546
34890: ST_TO_ADDR
// if hex [ 1 ] then
34891: LD_VAR 0 4
34895: PUSH
34896: LD_INT 1
34898: ARRAY
34899: IFFALSE 34903
// continue ;
34901: GO 34791
// h := hex [ 2 ] ;
34903: LD_ADDR_VAR 0 13
34907: PUSH
34908: LD_VAR 0 4
34912: PUSH
34913: LD_INT 2
34915: ARRAY
34916: ST_TO_ADDR
// if h + 7 < height then
34917: LD_VAR 0 13
34921: PUSH
34922: LD_INT 7
34924: PLUS
34925: PUSH
34926: LD_VAR 0 15
34930: LESS
34931: IFFALSE 34960
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34933: LD_ADDR_VAR 0 18
34937: PUSH
34938: LD_INT 7
34940: PUSH
34941: LD_INT 28
34943: PUSH
34944: LD_INT 45
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: LIST
34951: PUSH
34952: LD_VAR 0 12
34956: ARRAY
34957: ST_TO_ADDR
// break ;
34958: GO 34962
// end ; end ; end ;
34960: GO 34791
34962: POP
34963: POP
// end ; if not weapon then
34964: LD_VAR 0 18
34968: NOT
34969: IFFALSE 35029
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34971: LD_ADDR_VAR 0 5
34975: PUSH
34976: LD_VAR 0 5
34980: PUSH
34981: LD_INT 11
34983: PUSH
34984: LD_INT 30
34986: PUSH
34987: LD_INT 49
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: LIST
34994: DIFF
34995: ST_TO_ADDR
// if not list then
34996: LD_VAR 0 5
35000: NOT
35001: IFFALSE 35005
// exit ;
35003: GO 35147
// weapon := list [ rand ( 1 , list ) ] ;
35005: LD_ADDR_VAR 0 18
35009: PUSH
35010: LD_VAR 0 5
35014: PUSH
35015: LD_INT 1
35017: PPUSH
35018: LD_VAR 0 5
35022: PPUSH
35023: CALL_OW 12
35027: ARRAY
35028: ST_TO_ADDR
// end ; if weapon then
35029: LD_VAR 0 18
35033: IFFALSE 35147
// begin tmp := CostOfWeapon ( weapon ) ;
35035: LD_ADDR_VAR 0 14
35039: PUSH
35040: LD_VAR 0 18
35044: PPUSH
35045: CALL_OW 451
35049: ST_TO_ADDR
// j := GetBase ( tower ) ;
35050: LD_ADDR_VAR 0 9
35054: PUSH
35055: LD_VAR 0 1
35059: PPUSH
35060: CALL_OW 274
35064: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35065: LD_VAR 0 9
35069: PPUSH
35070: LD_INT 1
35072: PPUSH
35073: CALL_OW 275
35077: PUSH
35078: LD_VAR 0 14
35082: PUSH
35083: LD_INT 1
35085: ARRAY
35086: GREATEREQUAL
35087: PUSH
35088: LD_VAR 0 9
35092: PPUSH
35093: LD_INT 2
35095: PPUSH
35096: CALL_OW 275
35100: PUSH
35101: LD_VAR 0 14
35105: PUSH
35106: LD_INT 2
35108: ARRAY
35109: GREATEREQUAL
35110: AND
35111: PUSH
35112: LD_VAR 0 9
35116: PPUSH
35117: LD_INT 3
35119: PPUSH
35120: CALL_OW 275
35124: PUSH
35125: LD_VAR 0 14
35129: PUSH
35130: LD_INT 3
35132: ARRAY
35133: GREATEREQUAL
35134: AND
35135: IFFALSE 35147
// result := weapon ;
35137: LD_ADDR_VAR 0 3
35141: PUSH
35142: LD_VAR 0 18
35146: ST_TO_ADDR
// end ; end ;
35147: LD_VAR 0 3
35151: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35152: LD_INT 0
35154: PPUSH
35155: PPUSH
// result := true ;
35156: LD_ADDR_VAR 0 3
35160: PUSH
35161: LD_INT 1
35163: ST_TO_ADDR
// if array1 = array2 then
35164: LD_VAR 0 1
35168: PUSH
35169: LD_VAR 0 2
35173: EQUAL
35174: IFFALSE 35234
// begin for i = 1 to array1 do
35176: LD_ADDR_VAR 0 4
35180: PUSH
35181: DOUBLE
35182: LD_INT 1
35184: DEC
35185: ST_TO_ADDR
35186: LD_VAR 0 1
35190: PUSH
35191: FOR_TO
35192: IFFALSE 35230
// if array1 [ i ] <> array2 [ i ] then
35194: LD_VAR 0 1
35198: PUSH
35199: LD_VAR 0 4
35203: ARRAY
35204: PUSH
35205: LD_VAR 0 2
35209: PUSH
35210: LD_VAR 0 4
35214: ARRAY
35215: NONEQUAL
35216: IFFALSE 35228
// begin result := false ;
35218: LD_ADDR_VAR 0 3
35222: PUSH
35223: LD_INT 0
35225: ST_TO_ADDR
// break ;
35226: GO 35230
// end ;
35228: GO 35191
35230: POP
35231: POP
// end else
35232: GO 35242
// result := false ;
35234: LD_ADDR_VAR 0 3
35238: PUSH
35239: LD_INT 0
35241: ST_TO_ADDR
// end ;
35242: LD_VAR 0 3
35246: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35247: LD_INT 0
35249: PPUSH
35250: PPUSH
35251: PPUSH
// pom := GetBase ( fac ) ;
35252: LD_ADDR_VAR 0 5
35256: PUSH
35257: LD_VAR 0 1
35261: PPUSH
35262: CALL_OW 274
35266: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35267: LD_ADDR_VAR 0 4
35271: PUSH
35272: LD_VAR 0 2
35276: PUSH
35277: LD_INT 1
35279: ARRAY
35280: PPUSH
35281: LD_VAR 0 2
35285: PUSH
35286: LD_INT 2
35288: ARRAY
35289: PPUSH
35290: LD_VAR 0 2
35294: PUSH
35295: LD_INT 3
35297: ARRAY
35298: PPUSH
35299: LD_VAR 0 2
35303: PUSH
35304: LD_INT 4
35306: ARRAY
35307: PPUSH
35308: CALL_OW 449
35312: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35313: LD_ADDR_VAR 0 3
35317: PUSH
35318: LD_VAR 0 5
35322: PPUSH
35323: LD_INT 1
35325: PPUSH
35326: CALL_OW 275
35330: PUSH
35331: LD_VAR 0 4
35335: PUSH
35336: LD_INT 1
35338: ARRAY
35339: GREATEREQUAL
35340: PUSH
35341: LD_VAR 0 5
35345: PPUSH
35346: LD_INT 2
35348: PPUSH
35349: CALL_OW 275
35353: PUSH
35354: LD_VAR 0 4
35358: PUSH
35359: LD_INT 2
35361: ARRAY
35362: GREATEREQUAL
35363: AND
35364: PUSH
35365: LD_VAR 0 5
35369: PPUSH
35370: LD_INT 3
35372: PPUSH
35373: CALL_OW 275
35377: PUSH
35378: LD_VAR 0 4
35382: PUSH
35383: LD_INT 3
35385: ARRAY
35386: GREATEREQUAL
35387: AND
35388: ST_TO_ADDR
// end ;
35389: LD_VAR 0 3
35393: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35394: LD_INT 0
35396: PPUSH
35397: PPUSH
35398: PPUSH
35399: PPUSH
// pom := GetBase ( building ) ;
35400: LD_ADDR_VAR 0 3
35404: PUSH
35405: LD_VAR 0 1
35409: PPUSH
35410: CALL_OW 274
35414: ST_TO_ADDR
// if not pom then
35415: LD_VAR 0 3
35419: NOT
35420: IFFALSE 35424
// exit ;
35422: GO 35594
// btype := GetBType ( building ) ;
35424: LD_ADDR_VAR 0 5
35428: PUSH
35429: LD_VAR 0 1
35433: PPUSH
35434: CALL_OW 266
35438: ST_TO_ADDR
// if btype = b_armoury then
35439: LD_VAR 0 5
35443: PUSH
35444: LD_INT 4
35446: EQUAL
35447: IFFALSE 35457
// btype := b_barracks ;
35449: LD_ADDR_VAR 0 5
35453: PUSH
35454: LD_INT 5
35456: ST_TO_ADDR
// if btype = b_depot then
35457: LD_VAR 0 5
35461: PUSH
35462: LD_INT 0
35464: EQUAL
35465: IFFALSE 35475
// btype := b_warehouse ;
35467: LD_ADDR_VAR 0 5
35471: PUSH
35472: LD_INT 1
35474: ST_TO_ADDR
// if btype = b_workshop then
35475: LD_VAR 0 5
35479: PUSH
35480: LD_INT 2
35482: EQUAL
35483: IFFALSE 35493
// btype := b_factory ;
35485: LD_ADDR_VAR 0 5
35489: PUSH
35490: LD_INT 3
35492: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35493: LD_ADDR_VAR 0 4
35497: PUSH
35498: LD_VAR 0 5
35502: PPUSH
35503: LD_VAR 0 1
35507: PPUSH
35508: CALL_OW 248
35512: PPUSH
35513: CALL_OW 450
35517: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35518: LD_ADDR_VAR 0 2
35522: PUSH
35523: LD_VAR 0 3
35527: PPUSH
35528: LD_INT 1
35530: PPUSH
35531: CALL_OW 275
35535: PUSH
35536: LD_VAR 0 4
35540: PUSH
35541: LD_INT 1
35543: ARRAY
35544: GREATEREQUAL
35545: PUSH
35546: LD_VAR 0 3
35550: PPUSH
35551: LD_INT 2
35553: PPUSH
35554: CALL_OW 275
35558: PUSH
35559: LD_VAR 0 4
35563: PUSH
35564: LD_INT 2
35566: ARRAY
35567: GREATEREQUAL
35568: AND
35569: PUSH
35570: LD_VAR 0 3
35574: PPUSH
35575: LD_INT 3
35577: PPUSH
35578: CALL_OW 275
35582: PUSH
35583: LD_VAR 0 4
35587: PUSH
35588: LD_INT 3
35590: ARRAY
35591: GREATEREQUAL
35592: AND
35593: ST_TO_ADDR
// end ;
35594: LD_VAR 0 2
35598: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
35599: LD_INT 0
35601: PPUSH
35602: PPUSH
35603: PPUSH
// pom := GetBase ( building ) ;
35604: LD_ADDR_VAR 0 4
35608: PUSH
35609: LD_VAR 0 1
35613: PPUSH
35614: CALL_OW 274
35618: ST_TO_ADDR
// if not pom then
35619: LD_VAR 0 4
35623: NOT
35624: IFFALSE 35628
// exit ;
35626: GO 35729
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35628: LD_ADDR_VAR 0 5
35632: PUSH
35633: LD_VAR 0 2
35637: PPUSH
35638: LD_VAR 0 1
35642: PPUSH
35643: CALL_OW 248
35647: PPUSH
35648: CALL_OW 450
35652: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35653: LD_ADDR_VAR 0 3
35657: PUSH
35658: LD_VAR 0 4
35662: PPUSH
35663: LD_INT 1
35665: PPUSH
35666: CALL_OW 275
35670: PUSH
35671: LD_VAR 0 5
35675: PUSH
35676: LD_INT 1
35678: ARRAY
35679: GREATEREQUAL
35680: PUSH
35681: LD_VAR 0 4
35685: PPUSH
35686: LD_INT 2
35688: PPUSH
35689: CALL_OW 275
35693: PUSH
35694: LD_VAR 0 5
35698: PUSH
35699: LD_INT 2
35701: ARRAY
35702: GREATEREQUAL
35703: AND
35704: PUSH
35705: LD_VAR 0 4
35709: PPUSH
35710: LD_INT 3
35712: PPUSH
35713: CALL_OW 275
35717: PUSH
35718: LD_VAR 0 5
35722: PUSH
35723: LD_INT 3
35725: ARRAY
35726: GREATEREQUAL
35727: AND
35728: ST_TO_ADDR
// end ;
35729: LD_VAR 0 3
35733: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
35734: LD_INT 0
35736: PPUSH
35737: PPUSH
35738: PPUSH
35739: PPUSH
35740: PPUSH
35741: PPUSH
35742: PPUSH
35743: PPUSH
35744: PPUSH
35745: PPUSH
// result := false ;
35746: LD_ADDR_VAR 0 6
35750: PUSH
35751: LD_INT 0
35753: ST_TO_ADDR
// if not base or not btype or not x or not y then
35754: LD_VAR 0 1
35758: NOT
35759: PUSH
35760: LD_VAR 0 2
35764: NOT
35765: OR
35766: PUSH
35767: LD_VAR 0 3
35771: NOT
35772: OR
35773: PUSH
35774: LD_VAR 0 4
35778: NOT
35779: OR
35780: IFFALSE 35784
// exit ;
35782: GO 36393
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
35784: LD_ADDR_VAR 0 12
35788: PUSH
35789: LD_VAR 0 2
35793: PPUSH
35794: LD_VAR 0 3
35798: PPUSH
35799: LD_VAR 0 4
35803: PPUSH
35804: LD_VAR 0 5
35808: PPUSH
35809: LD_VAR 0 1
35813: PUSH
35814: LD_INT 1
35816: ARRAY
35817: PPUSH
35818: CALL_OW 248
35822: PPUSH
35823: LD_INT 0
35825: PPUSH
35826: CALL 37230 0 6
35830: ST_TO_ADDR
// if not hexes then
35831: LD_VAR 0 12
35835: NOT
35836: IFFALSE 35840
// exit ;
35838: GO 36393
// for i = 1 to hexes do
35840: LD_ADDR_VAR 0 7
35844: PUSH
35845: DOUBLE
35846: LD_INT 1
35848: DEC
35849: ST_TO_ADDR
35850: LD_VAR 0 12
35854: PUSH
35855: FOR_TO
35856: IFFALSE 36391
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35858: LD_ADDR_VAR 0 11
35862: PUSH
35863: LD_VAR 0 12
35867: PUSH
35868: LD_VAR 0 7
35872: ARRAY
35873: PUSH
35874: LD_INT 1
35876: ARRAY
35877: PPUSH
35878: LD_VAR 0 12
35882: PUSH
35883: LD_VAR 0 7
35887: ARRAY
35888: PUSH
35889: LD_INT 2
35891: ARRAY
35892: PPUSH
35893: CALL_OW 428
35897: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35898: LD_VAR 0 12
35902: PUSH
35903: LD_VAR 0 7
35907: ARRAY
35908: PUSH
35909: LD_INT 1
35911: ARRAY
35912: PPUSH
35913: LD_VAR 0 12
35917: PUSH
35918: LD_VAR 0 7
35922: ARRAY
35923: PUSH
35924: LD_INT 2
35926: ARRAY
35927: PPUSH
35928: CALL_OW 351
35932: PUSH
35933: LD_VAR 0 12
35937: PUSH
35938: LD_VAR 0 7
35942: ARRAY
35943: PUSH
35944: LD_INT 1
35946: ARRAY
35947: PPUSH
35948: LD_VAR 0 12
35952: PUSH
35953: LD_VAR 0 7
35957: ARRAY
35958: PUSH
35959: LD_INT 2
35961: ARRAY
35962: PPUSH
35963: CALL_OW 488
35967: NOT
35968: OR
35969: PUSH
35970: LD_VAR 0 11
35974: PPUSH
35975: CALL_OW 247
35979: PUSH
35980: LD_INT 3
35982: EQUAL
35983: OR
35984: IFFALSE 35990
// exit ;
35986: POP
35987: POP
35988: GO 36393
// if not tmp or not tmp in base then
35990: LD_VAR 0 11
35994: NOT
35995: PUSH
35996: LD_VAR 0 11
36000: PUSH
36001: LD_VAR 0 1
36005: IN
36006: NOT
36007: OR
36008: IFFALSE 36012
// continue ;
36010: GO 35855
// result := true ;
36012: LD_ADDR_VAR 0 6
36016: PUSH
36017: LD_INT 1
36019: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36020: LD_ADDR_VAR 0 15
36024: PUSH
36025: LD_VAR 0 1
36029: PPUSH
36030: LD_INT 22
36032: PUSH
36033: LD_VAR 0 11
36037: PPUSH
36038: CALL_OW 255
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: LD_INT 2
36049: PUSH
36050: LD_INT 30
36052: PUSH
36053: LD_INT 0
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 30
36062: PUSH
36063: LD_INT 1
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: LIST
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PPUSH
36079: CALL_OW 72
36083: ST_TO_ADDR
// if dep then
36084: LD_VAR 0 15
36088: IFFALSE 36224
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36090: LD_ADDR_VAR 0 14
36094: PUSH
36095: LD_VAR 0 15
36099: PUSH
36100: LD_INT 1
36102: ARRAY
36103: PPUSH
36104: CALL_OW 250
36108: PPUSH
36109: LD_VAR 0 15
36113: PUSH
36114: LD_INT 1
36116: ARRAY
36117: PPUSH
36118: CALL_OW 254
36122: PPUSH
36123: LD_INT 5
36125: PPUSH
36126: CALL_OW 272
36130: PUSH
36131: LD_VAR 0 15
36135: PUSH
36136: LD_INT 1
36138: ARRAY
36139: PPUSH
36140: CALL_OW 251
36144: PPUSH
36145: LD_VAR 0 15
36149: PUSH
36150: LD_INT 1
36152: ARRAY
36153: PPUSH
36154: CALL_OW 254
36158: PPUSH
36159: LD_INT 5
36161: PPUSH
36162: CALL_OW 273
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36171: LD_VAR 0 14
36175: PUSH
36176: LD_INT 1
36178: ARRAY
36179: PPUSH
36180: LD_VAR 0 14
36184: PUSH
36185: LD_INT 2
36187: ARRAY
36188: PPUSH
36189: CALL_OW 488
36193: IFFALSE 36224
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36195: LD_VAR 0 11
36199: PPUSH
36200: LD_VAR 0 14
36204: PUSH
36205: LD_INT 1
36207: ARRAY
36208: PPUSH
36209: LD_VAR 0 14
36213: PUSH
36214: LD_INT 2
36216: ARRAY
36217: PPUSH
36218: CALL_OW 111
// continue ;
36222: GO 35855
// end ; end ; r := GetDir ( tmp ) ;
36224: LD_ADDR_VAR 0 13
36228: PUSH
36229: LD_VAR 0 11
36233: PPUSH
36234: CALL_OW 254
36238: ST_TO_ADDR
// if r = 5 then
36239: LD_VAR 0 13
36243: PUSH
36244: LD_INT 5
36246: EQUAL
36247: IFFALSE 36257
// r := 0 ;
36249: LD_ADDR_VAR 0 13
36253: PUSH
36254: LD_INT 0
36256: ST_TO_ADDR
// for j = r to 5 do
36257: LD_ADDR_VAR 0 8
36261: PUSH
36262: DOUBLE
36263: LD_VAR 0 13
36267: DEC
36268: ST_TO_ADDR
36269: LD_INT 5
36271: PUSH
36272: FOR_TO
36273: IFFALSE 36387
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36275: LD_ADDR_VAR 0 9
36279: PUSH
36280: LD_VAR 0 11
36284: PPUSH
36285: CALL_OW 250
36289: PPUSH
36290: LD_VAR 0 8
36294: PPUSH
36295: LD_INT 2
36297: PPUSH
36298: CALL_OW 272
36302: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
36303: LD_ADDR_VAR 0 10
36307: PUSH
36308: LD_VAR 0 11
36312: PPUSH
36313: CALL_OW 251
36317: PPUSH
36318: LD_VAR 0 8
36322: PPUSH
36323: LD_INT 2
36325: PPUSH
36326: CALL_OW 273
36330: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36331: LD_VAR 0 9
36335: PPUSH
36336: LD_VAR 0 10
36340: PPUSH
36341: CALL_OW 488
36345: PUSH
36346: LD_VAR 0 9
36350: PPUSH
36351: LD_VAR 0 10
36355: PPUSH
36356: CALL_OW 428
36360: NOT
36361: AND
36362: IFFALSE 36385
// begin ComMoveXY ( tmp , _x , _y ) ;
36364: LD_VAR 0 11
36368: PPUSH
36369: LD_VAR 0 9
36373: PPUSH
36374: LD_VAR 0 10
36378: PPUSH
36379: CALL_OW 111
// break ;
36383: GO 36387
// end ; end ;
36385: GO 36272
36387: POP
36388: POP
// end ;
36389: GO 35855
36391: POP
36392: POP
// end ;
36393: LD_VAR 0 6
36397: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
36398: LD_INT 0
36400: PPUSH
36401: PPUSH
36402: PPUSH
36403: PPUSH
36404: PPUSH
36405: PPUSH
36406: PPUSH
36407: PPUSH
36408: PPUSH
36409: PPUSH
// result := false ;
36410: LD_ADDR_VAR 0 6
36414: PUSH
36415: LD_INT 0
36417: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36418: LD_VAR 0 1
36422: NOT
36423: PUSH
36424: LD_VAR 0 1
36428: PPUSH
36429: CALL_OW 266
36433: PUSH
36434: LD_INT 0
36436: PUSH
36437: LD_INT 1
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: IN
36444: NOT
36445: OR
36446: PUSH
36447: LD_VAR 0 2
36451: NOT
36452: OR
36453: PUSH
36454: LD_VAR 0 5
36458: PUSH
36459: LD_INT 0
36461: PUSH
36462: LD_INT 1
36464: PUSH
36465: LD_INT 2
36467: PUSH
36468: LD_INT 3
36470: PUSH
36471: LD_INT 4
36473: PUSH
36474: LD_INT 5
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: IN
36485: NOT
36486: OR
36487: PUSH
36488: LD_VAR 0 3
36492: PPUSH
36493: LD_VAR 0 4
36497: PPUSH
36498: CALL_OW 488
36502: NOT
36503: OR
36504: IFFALSE 36508
// exit ;
36506: GO 37225
// pom := GetBase ( depot ) ;
36508: LD_ADDR_VAR 0 10
36512: PUSH
36513: LD_VAR 0 1
36517: PPUSH
36518: CALL_OW 274
36522: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
36523: LD_ADDR_VAR 0 11
36527: PUSH
36528: LD_VAR 0 2
36532: PPUSH
36533: LD_VAR 0 1
36537: PPUSH
36538: CALL_OW 248
36542: PPUSH
36543: CALL_OW 450
36547: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
36548: LD_VAR 0 10
36552: PPUSH
36553: LD_INT 1
36555: PPUSH
36556: CALL_OW 275
36560: PUSH
36561: LD_VAR 0 11
36565: PUSH
36566: LD_INT 1
36568: ARRAY
36569: GREATEREQUAL
36570: PUSH
36571: LD_VAR 0 10
36575: PPUSH
36576: LD_INT 2
36578: PPUSH
36579: CALL_OW 275
36583: PUSH
36584: LD_VAR 0 11
36588: PUSH
36589: LD_INT 2
36591: ARRAY
36592: GREATEREQUAL
36593: AND
36594: PUSH
36595: LD_VAR 0 10
36599: PPUSH
36600: LD_INT 3
36602: PPUSH
36603: CALL_OW 275
36607: PUSH
36608: LD_VAR 0 11
36612: PUSH
36613: LD_INT 3
36615: ARRAY
36616: GREATEREQUAL
36617: AND
36618: NOT
36619: IFFALSE 36623
// exit ;
36621: GO 37225
// if GetBType ( depot ) = b_depot then
36623: LD_VAR 0 1
36627: PPUSH
36628: CALL_OW 266
36632: PUSH
36633: LD_INT 0
36635: EQUAL
36636: IFFALSE 36648
// dist := 28 else
36638: LD_ADDR_VAR 0 14
36642: PUSH
36643: LD_INT 28
36645: ST_TO_ADDR
36646: GO 36656
// dist := 36 ;
36648: LD_ADDR_VAR 0 14
36652: PUSH
36653: LD_INT 36
36655: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
36656: LD_VAR 0 1
36660: PPUSH
36661: LD_VAR 0 3
36665: PPUSH
36666: LD_VAR 0 4
36670: PPUSH
36671: CALL_OW 297
36675: PUSH
36676: LD_VAR 0 14
36680: GREATER
36681: IFFALSE 36685
// exit ;
36683: GO 37225
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
36685: LD_ADDR_VAR 0 12
36689: PUSH
36690: LD_VAR 0 2
36694: PPUSH
36695: LD_VAR 0 3
36699: PPUSH
36700: LD_VAR 0 4
36704: PPUSH
36705: LD_VAR 0 5
36709: PPUSH
36710: LD_VAR 0 1
36714: PPUSH
36715: CALL_OW 248
36719: PPUSH
36720: LD_INT 0
36722: PPUSH
36723: CALL 37230 0 6
36727: ST_TO_ADDR
// if not hexes then
36728: LD_VAR 0 12
36732: NOT
36733: IFFALSE 36737
// exit ;
36735: GO 37225
// hex := GetHexInfo ( x , y ) ;
36737: LD_ADDR_VAR 0 15
36741: PUSH
36742: LD_VAR 0 3
36746: PPUSH
36747: LD_VAR 0 4
36751: PPUSH
36752: CALL_OW 546
36756: ST_TO_ADDR
// if hex [ 1 ] then
36757: LD_VAR 0 15
36761: PUSH
36762: LD_INT 1
36764: ARRAY
36765: IFFALSE 36769
// exit ;
36767: GO 37225
// height := hex [ 2 ] ;
36769: LD_ADDR_VAR 0 13
36773: PUSH
36774: LD_VAR 0 15
36778: PUSH
36779: LD_INT 2
36781: ARRAY
36782: ST_TO_ADDR
// for i = 1 to hexes do
36783: LD_ADDR_VAR 0 7
36787: PUSH
36788: DOUBLE
36789: LD_INT 1
36791: DEC
36792: ST_TO_ADDR
36793: LD_VAR 0 12
36797: PUSH
36798: FOR_TO
36799: IFFALSE 37129
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
36801: LD_VAR 0 12
36805: PUSH
36806: LD_VAR 0 7
36810: ARRAY
36811: PUSH
36812: LD_INT 1
36814: ARRAY
36815: PPUSH
36816: LD_VAR 0 12
36820: PUSH
36821: LD_VAR 0 7
36825: ARRAY
36826: PUSH
36827: LD_INT 2
36829: ARRAY
36830: PPUSH
36831: CALL_OW 488
36835: NOT
36836: PUSH
36837: LD_VAR 0 12
36841: PUSH
36842: LD_VAR 0 7
36846: ARRAY
36847: PUSH
36848: LD_INT 1
36850: ARRAY
36851: PPUSH
36852: LD_VAR 0 12
36856: PUSH
36857: LD_VAR 0 7
36861: ARRAY
36862: PUSH
36863: LD_INT 2
36865: ARRAY
36866: PPUSH
36867: CALL_OW 428
36871: PUSH
36872: LD_INT 0
36874: GREATER
36875: OR
36876: PUSH
36877: LD_VAR 0 12
36881: PUSH
36882: LD_VAR 0 7
36886: ARRAY
36887: PUSH
36888: LD_INT 1
36890: ARRAY
36891: PPUSH
36892: LD_VAR 0 12
36896: PUSH
36897: LD_VAR 0 7
36901: ARRAY
36902: PUSH
36903: LD_INT 2
36905: ARRAY
36906: PPUSH
36907: CALL_OW 351
36911: OR
36912: IFFALSE 36918
// exit ;
36914: POP
36915: POP
36916: GO 37225
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36918: LD_ADDR_VAR 0 8
36922: PUSH
36923: LD_VAR 0 12
36927: PUSH
36928: LD_VAR 0 7
36932: ARRAY
36933: PUSH
36934: LD_INT 1
36936: ARRAY
36937: PPUSH
36938: LD_VAR 0 12
36942: PUSH
36943: LD_VAR 0 7
36947: ARRAY
36948: PUSH
36949: LD_INT 2
36951: ARRAY
36952: PPUSH
36953: CALL_OW 546
36957: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
36958: LD_VAR 0 8
36962: PUSH
36963: LD_INT 1
36965: ARRAY
36966: PUSH
36967: LD_VAR 0 8
36971: PUSH
36972: LD_INT 2
36974: ARRAY
36975: PUSH
36976: LD_VAR 0 13
36980: PUSH
36981: LD_INT 2
36983: PLUS
36984: GREATER
36985: OR
36986: PUSH
36987: LD_VAR 0 8
36991: PUSH
36992: LD_INT 2
36994: ARRAY
36995: PUSH
36996: LD_VAR 0 13
37000: PUSH
37001: LD_INT 2
37003: MINUS
37004: LESS
37005: OR
37006: PUSH
37007: LD_VAR 0 8
37011: PUSH
37012: LD_INT 3
37014: ARRAY
37015: PUSH
37016: LD_INT 0
37018: PUSH
37019: LD_INT 8
37021: PUSH
37022: LD_INT 9
37024: PUSH
37025: LD_INT 10
37027: PUSH
37028: LD_INT 11
37030: PUSH
37031: LD_INT 12
37033: PUSH
37034: LD_INT 13
37036: PUSH
37037: LD_INT 16
37039: PUSH
37040: LD_INT 17
37042: PUSH
37043: LD_INT 18
37045: PUSH
37046: LD_INT 19
37048: PUSH
37049: LD_INT 20
37051: PUSH
37052: LD_INT 21
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: IN
37070: NOT
37071: OR
37072: PUSH
37073: LD_VAR 0 8
37077: PUSH
37078: LD_INT 5
37080: ARRAY
37081: NOT
37082: OR
37083: PUSH
37084: LD_VAR 0 8
37088: PUSH
37089: LD_INT 6
37091: ARRAY
37092: PUSH
37093: LD_INT 1
37095: PUSH
37096: LD_INT 2
37098: PUSH
37099: LD_INT 7
37101: PUSH
37102: LD_INT 9
37104: PUSH
37105: LD_INT 10
37107: PUSH
37108: LD_INT 11
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: LIST
37118: IN
37119: NOT
37120: OR
37121: IFFALSE 37127
// exit ;
37123: POP
37124: POP
37125: GO 37225
// end ;
37127: GO 36798
37129: POP
37130: POP
// side := GetSide ( depot ) ;
37131: LD_ADDR_VAR 0 9
37135: PUSH
37136: LD_VAR 0 1
37140: PPUSH
37141: CALL_OW 255
37145: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
37146: LD_VAR 0 9
37150: PPUSH
37151: LD_VAR 0 3
37155: PPUSH
37156: LD_VAR 0 4
37160: PPUSH
37161: LD_INT 20
37163: PPUSH
37164: CALL 29879 0 4
37168: PUSH
37169: LD_INT 4
37171: ARRAY
37172: IFFALSE 37176
// exit ;
37174: GO 37225
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
37176: LD_VAR 0 2
37180: PUSH
37181: LD_INT 29
37183: PUSH
37184: LD_INT 30
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: IN
37191: PUSH
37192: LD_VAR 0 3
37196: PPUSH
37197: LD_VAR 0 4
37201: PPUSH
37202: LD_VAR 0 9
37206: PPUSH
37207: CALL_OW 440
37211: NOT
37212: AND
37213: IFFALSE 37217
// exit ;
37215: GO 37225
// result := true ;
37217: LD_ADDR_VAR 0 6
37221: PUSH
37222: LD_INT 1
37224: ST_TO_ADDR
// end ;
37225: LD_VAR 0 6
37229: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
37230: LD_INT 0
37232: PPUSH
37233: PPUSH
37234: PPUSH
37235: PPUSH
37236: PPUSH
37237: PPUSH
37238: PPUSH
37239: PPUSH
37240: PPUSH
37241: PPUSH
37242: PPUSH
37243: PPUSH
37244: PPUSH
37245: PPUSH
37246: PPUSH
37247: PPUSH
37248: PPUSH
37249: PPUSH
37250: PPUSH
37251: PPUSH
37252: PPUSH
37253: PPUSH
37254: PPUSH
37255: PPUSH
37256: PPUSH
37257: PPUSH
37258: PPUSH
37259: PPUSH
37260: PPUSH
37261: PPUSH
37262: PPUSH
37263: PPUSH
37264: PPUSH
37265: PPUSH
37266: PPUSH
37267: PPUSH
37268: PPUSH
37269: PPUSH
37270: PPUSH
37271: PPUSH
37272: PPUSH
37273: PPUSH
37274: PPUSH
37275: PPUSH
37276: PPUSH
37277: PPUSH
37278: PPUSH
37279: PPUSH
37280: PPUSH
37281: PPUSH
37282: PPUSH
37283: PPUSH
37284: PPUSH
37285: PPUSH
37286: PPUSH
37287: PPUSH
37288: PPUSH
37289: PPUSH
// result = [ ] ;
37290: LD_ADDR_VAR 0 7
37294: PUSH
37295: EMPTY
37296: ST_TO_ADDR
// temp_list = [ ] ;
37297: LD_ADDR_VAR 0 9
37301: PUSH
37302: EMPTY
37303: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
37304: LD_VAR 0 4
37308: PUSH
37309: LD_INT 0
37311: PUSH
37312: LD_INT 1
37314: PUSH
37315: LD_INT 2
37317: PUSH
37318: LD_INT 3
37320: PUSH
37321: LD_INT 4
37323: PUSH
37324: LD_INT 5
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: LIST
37331: LIST
37332: LIST
37333: LIST
37334: IN
37335: NOT
37336: PUSH
37337: LD_VAR 0 1
37341: PUSH
37342: LD_INT 0
37344: PUSH
37345: LD_INT 1
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: IN
37352: PUSH
37353: LD_VAR 0 5
37357: PUSH
37358: LD_INT 1
37360: PUSH
37361: LD_INT 2
37363: PUSH
37364: LD_INT 3
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: LIST
37371: IN
37372: NOT
37373: AND
37374: OR
37375: IFFALSE 37379
// exit ;
37377: GO 55770
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37379: LD_VAR 0 1
37383: PUSH
37384: LD_INT 6
37386: PUSH
37387: LD_INT 7
37389: PUSH
37390: LD_INT 8
37392: PUSH
37393: LD_INT 13
37395: PUSH
37396: LD_INT 12
37398: PUSH
37399: LD_INT 15
37401: PUSH
37402: LD_INT 11
37404: PUSH
37405: LD_INT 14
37407: PUSH
37408: LD_INT 10
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: LIST
37415: LIST
37416: LIST
37417: LIST
37418: LIST
37419: LIST
37420: LIST
37421: IN
37422: IFFALSE 37432
// btype = b_lab ;
37424: LD_ADDR_VAR 0 1
37428: PUSH
37429: LD_INT 6
37431: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37432: LD_VAR 0 6
37436: PUSH
37437: LD_INT 0
37439: PUSH
37440: LD_INT 1
37442: PUSH
37443: LD_INT 2
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: LIST
37450: IN
37451: NOT
37452: PUSH
37453: LD_VAR 0 1
37457: PUSH
37458: LD_INT 0
37460: PUSH
37461: LD_INT 1
37463: PUSH
37464: LD_INT 2
37466: PUSH
37467: LD_INT 3
37469: PUSH
37470: LD_INT 6
37472: PUSH
37473: LD_INT 36
37475: PUSH
37476: LD_INT 4
37478: PUSH
37479: LD_INT 5
37481: PUSH
37482: LD_INT 31
37484: PUSH
37485: LD_INT 32
37487: PUSH
37488: LD_INT 33
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: LIST
37503: IN
37504: NOT
37505: PUSH
37506: LD_VAR 0 6
37510: PUSH
37511: LD_INT 1
37513: EQUAL
37514: AND
37515: OR
37516: PUSH
37517: LD_VAR 0 1
37521: PUSH
37522: LD_INT 2
37524: PUSH
37525: LD_INT 3
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: IN
37532: NOT
37533: PUSH
37534: LD_VAR 0 6
37538: PUSH
37539: LD_INT 2
37541: EQUAL
37542: AND
37543: OR
37544: IFFALSE 37554
// mode = 0 ;
37546: LD_ADDR_VAR 0 6
37550: PUSH
37551: LD_INT 0
37553: ST_TO_ADDR
// case mode of 0 :
37554: LD_VAR 0 6
37558: PUSH
37559: LD_INT 0
37561: DOUBLE
37562: EQUAL
37563: IFTRUE 37567
37565: GO 49020
37567: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37568: LD_ADDR_VAR 0 11
37572: PUSH
37573: LD_INT 0
37575: PUSH
37576: LD_INT 0
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: PUSH
37583: LD_INT 0
37585: PUSH
37586: LD_INT 1
37588: NEG
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 1
37596: PUSH
37597: LD_INT 0
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 1
37606: PUSH
37607: LD_INT 1
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 0
37616: PUSH
37617: LD_INT 1
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 1
37626: NEG
37627: PUSH
37628: LD_INT 0
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: LD_INT 1
37637: NEG
37638: PUSH
37639: LD_INT 1
37641: NEG
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: LD_INT 1
37649: NEG
37650: PUSH
37651: LD_INT 2
37653: NEG
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 0
37661: PUSH
37662: LD_INT 2
37664: NEG
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: LD_INT 1
37672: PUSH
37673: LD_INT 1
37675: NEG
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: PUSH
37681: LD_INT 1
37683: PUSH
37684: LD_INT 2
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 0
37693: PUSH
37694: LD_INT 2
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 1
37703: NEG
37704: PUSH
37705: LD_INT 1
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 1
37714: PUSH
37715: LD_INT 3
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 0
37724: PUSH
37725: LD_INT 3
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 1
37734: NEG
37735: PUSH
37736: LD_INT 2
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: LIST
37747: LIST
37748: LIST
37749: LIST
37750: LIST
37751: LIST
37752: LIST
37753: LIST
37754: LIST
37755: LIST
37756: LIST
37757: LIST
37758: LIST
37759: LIST
37760: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37761: LD_ADDR_VAR 0 12
37765: PUSH
37766: LD_INT 0
37768: PUSH
37769: LD_INT 0
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 0
37778: PUSH
37779: LD_INT 1
37781: NEG
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: PUSH
37787: LD_INT 1
37789: PUSH
37790: LD_INT 0
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 1
37799: PUSH
37800: LD_INT 1
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: LD_INT 0
37809: PUSH
37810: LD_INT 1
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 1
37819: NEG
37820: PUSH
37821: LD_INT 0
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 1
37830: NEG
37831: PUSH
37832: LD_INT 1
37834: NEG
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PUSH
37840: LD_INT 1
37842: PUSH
37843: LD_INT 1
37845: NEG
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: PUSH
37851: LD_INT 2
37853: PUSH
37854: LD_INT 0
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 2
37863: PUSH
37864: LD_INT 1
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 1
37873: NEG
37874: PUSH
37875: LD_INT 1
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 2
37884: NEG
37885: PUSH
37886: LD_INT 0
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 2
37895: NEG
37896: PUSH
37897: LD_INT 1
37899: NEG
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 2
37907: NEG
37908: PUSH
37909: LD_INT 1
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: LD_INT 3
37918: NEG
37919: PUSH
37920: LD_INT 0
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 3
37929: NEG
37930: PUSH
37931: LD_INT 1
37933: NEG
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37957: LD_ADDR_VAR 0 13
37961: PUSH
37962: LD_INT 0
37964: PUSH
37965: LD_INT 0
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 0
37974: PUSH
37975: LD_INT 1
37977: NEG
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 1
37985: PUSH
37986: LD_INT 0
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 1
37995: PUSH
37996: LD_INT 1
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 0
38005: PUSH
38006: LD_INT 1
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PUSH
38013: LD_INT 1
38015: NEG
38016: PUSH
38017: LD_INT 0
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: PUSH
38024: LD_INT 1
38026: NEG
38027: PUSH
38028: LD_INT 1
38030: NEG
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: PUSH
38036: LD_INT 1
38038: NEG
38039: PUSH
38040: LD_INT 2
38042: NEG
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 2
38050: PUSH
38051: LD_INT 1
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: PUSH
38058: LD_INT 2
38060: PUSH
38061: LD_INT 2
38063: PUSH
38064: EMPTY
38065: LIST
38066: LIST
38067: PUSH
38068: LD_INT 1
38070: PUSH
38071: LD_INT 2
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: PUSH
38078: LD_INT 2
38080: NEG
38081: PUSH
38082: LD_INT 1
38084: NEG
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 2
38092: NEG
38093: PUSH
38094: LD_INT 2
38096: NEG
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_INT 2
38104: NEG
38105: PUSH
38106: LD_INT 3
38108: NEG
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: LD_INT 3
38116: NEG
38117: PUSH
38118: LD_INT 2
38120: NEG
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 3
38128: NEG
38129: PUSH
38130: LD_INT 3
38132: NEG
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38156: LD_ADDR_VAR 0 14
38160: PUSH
38161: LD_INT 0
38163: PUSH
38164: LD_INT 0
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: PUSH
38171: LD_INT 0
38173: PUSH
38174: LD_INT 1
38176: NEG
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: LD_INT 1
38184: PUSH
38185: LD_INT 0
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: PUSH
38192: LD_INT 1
38194: PUSH
38195: LD_INT 1
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: LD_INT 0
38204: PUSH
38205: LD_INT 1
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 1
38214: NEG
38215: PUSH
38216: LD_INT 0
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 1
38225: NEG
38226: PUSH
38227: LD_INT 1
38229: NEG
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 1
38237: NEG
38238: PUSH
38239: LD_INT 2
38241: NEG
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 0
38249: PUSH
38250: LD_INT 2
38252: NEG
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: LD_INT 1
38260: PUSH
38261: LD_INT 1
38263: NEG
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: LD_INT 1
38271: PUSH
38272: LD_INT 2
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: LD_INT 0
38281: PUSH
38282: LD_INT 2
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 1
38291: NEG
38292: PUSH
38293: LD_INT 1
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_INT 1
38302: NEG
38303: PUSH
38304: LD_INT 3
38306: NEG
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 0
38314: PUSH
38315: LD_INT 3
38317: NEG
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PUSH
38323: LD_INT 1
38325: PUSH
38326: LD_INT 2
38328: NEG
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: LIST
38338: LIST
38339: LIST
38340: LIST
38341: LIST
38342: LIST
38343: LIST
38344: LIST
38345: LIST
38346: LIST
38347: LIST
38348: LIST
38349: LIST
38350: LIST
38351: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38352: LD_ADDR_VAR 0 15
38356: PUSH
38357: LD_INT 0
38359: PUSH
38360: LD_INT 0
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PUSH
38367: LD_INT 0
38369: PUSH
38370: LD_INT 1
38372: NEG
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: LD_INT 1
38380: PUSH
38381: LD_INT 0
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: PUSH
38388: LD_INT 1
38390: PUSH
38391: LD_INT 1
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: PUSH
38398: LD_INT 0
38400: PUSH
38401: LD_INT 1
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: PUSH
38408: LD_INT 1
38410: NEG
38411: PUSH
38412: LD_INT 0
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PUSH
38419: LD_INT 1
38421: NEG
38422: PUSH
38423: LD_INT 1
38425: NEG
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 1
38433: PUSH
38434: LD_INT 1
38436: NEG
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 2
38444: PUSH
38445: LD_INT 0
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 2
38454: PUSH
38455: LD_INT 1
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 1
38464: NEG
38465: PUSH
38466: LD_INT 1
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 2
38475: NEG
38476: PUSH
38477: LD_INT 0
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: PUSH
38484: LD_INT 2
38486: NEG
38487: PUSH
38488: LD_INT 1
38490: NEG
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 2
38498: PUSH
38499: LD_INT 1
38501: NEG
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 3
38509: PUSH
38510: LD_INT 0
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: LD_INT 3
38519: PUSH
38520: LD_INT 1
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: LIST
38540: LIST
38541: LIST
38542: LIST
38543: LIST
38544: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38545: LD_ADDR_VAR 0 16
38549: PUSH
38550: LD_INT 0
38552: PUSH
38553: LD_INT 0
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: LD_INT 0
38562: PUSH
38563: LD_INT 1
38565: NEG
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PUSH
38571: LD_INT 1
38573: PUSH
38574: LD_INT 0
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: LD_INT 1
38583: PUSH
38584: LD_INT 1
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: LD_INT 0
38593: PUSH
38594: LD_INT 1
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 1
38603: NEG
38604: PUSH
38605: LD_INT 0
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: LD_INT 1
38614: NEG
38615: PUSH
38616: LD_INT 1
38618: NEG
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: LD_INT 1
38626: NEG
38627: PUSH
38628: LD_INT 2
38630: NEG
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: LD_INT 2
38638: PUSH
38639: LD_INT 1
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PUSH
38646: LD_INT 2
38648: PUSH
38649: LD_INT 2
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 1
38658: PUSH
38659: LD_INT 2
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 2
38668: NEG
38669: PUSH
38670: LD_INT 1
38672: NEG
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 2
38680: NEG
38681: PUSH
38682: LD_INT 2
38684: NEG
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 3
38692: PUSH
38693: LD_INT 2
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: LD_INT 3
38702: PUSH
38703: LD_INT 3
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 2
38712: PUSH
38713: LD_INT 3
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: LIST
38724: LIST
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38738: LD_ADDR_VAR 0 17
38742: PUSH
38743: LD_INT 0
38745: PUSH
38746: LD_INT 0
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 0
38755: PUSH
38756: LD_INT 1
38758: NEG
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 1
38766: PUSH
38767: LD_INT 0
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 1
38776: PUSH
38777: LD_INT 1
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 0
38786: PUSH
38787: LD_INT 1
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PUSH
38794: LD_INT 1
38796: NEG
38797: PUSH
38798: LD_INT 0
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 1
38807: NEG
38808: PUSH
38809: LD_INT 1
38811: NEG
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 1
38819: NEG
38820: PUSH
38821: LD_INT 2
38823: NEG
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: LD_INT 0
38831: PUSH
38832: LD_INT 2
38834: NEG
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 1
38842: PUSH
38843: LD_INT 1
38845: NEG
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 2
38853: PUSH
38854: LD_INT 0
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 2
38863: PUSH
38864: LD_INT 1
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 2
38873: PUSH
38874: LD_INT 2
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PUSH
38881: LD_INT 1
38883: PUSH
38884: LD_INT 2
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 0
38893: PUSH
38894: LD_INT 2
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: LD_INT 1
38903: NEG
38904: PUSH
38905: LD_INT 1
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: LD_INT 2
38914: NEG
38915: PUSH
38916: LD_INT 0
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PUSH
38923: LD_INT 2
38925: NEG
38926: PUSH
38927: LD_INT 1
38929: NEG
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 2
38937: NEG
38938: PUSH
38939: LD_INT 2
38941: NEG
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38968: LD_ADDR_VAR 0 18
38972: PUSH
38973: LD_INT 0
38975: PUSH
38976: LD_INT 0
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: LD_INT 0
38985: PUSH
38986: LD_INT 1
38988: NEG
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PUSH
38994: LD_INT 1
38996: PUSH
38997: LD_INT 0
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 1
39006: PUSH
39007: LD_INT 1
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 0
39016: PUSH
39017: LD_INT 1
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 1
39026: NEG
39027: PUSH
39028: LD_INT 0
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 1
39037: NEG
39038: PUSH
39039: LD_INT 1
39041: NEG
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 1
39049: NEG
39050: PUSH
39051: LD_INT 2
39053: NEG
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 0
39061: PUSH
39062: LD_INT 2
39064: NEG
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 1
39072: PUSH
39073: LD_INT 1
39075: NEG
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 2
39083: PUSH
39084: LD_INT 0
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 2
39093: PUSH
39094: LD_INT 1
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 2
39103: PUSH
39104: LD_INT 2
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: LD_INT 1
39113: PUSH
39114: LD_INT 2
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 0
39123: PUSH
39124: LD_INT 2
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 1
39133: NEG
39134: PUSH
39135: LD_INT 1
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 2
39144: NEG
39145: PUSH
39146: LD_INT 0
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 2
39155: NEG
39156: PUSH
39157: LD_INT 1
39159: NEG
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 2
39167: NEG
39168: PUSH
39169: LD_INT 2
39171: NEG
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39198: LD_ADDR_VAR 0 19
39202: PUSH
39203: LD_INT 0
39205: PUSH
39206: LD_INT 0
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: LD_INT 0
39215: PUSH
39216: LD_INT 1
39218: NEG
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 1
39226: PUSH
39227: LD_INT 0
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 1
39236: PUSH
39237: LD_INT 1
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 0
39246: PUSH
39247: LD_INT 1
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 1
39256: NEG
39257: PUSH
39258: LD_INT 0
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: LD_INT 1
39267: NEG
39268: PUSH
39269: LD_INT 1
39271: NEG
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: PUSH
39277: LD_INT 1
39279: NEG
39280: PUSH
39281: LD_INT 2
39283: NEG
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 0
39291: PUSH
39292: LD_INT 2
39294: NEG
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: LD_INT 1
39302: PUSH
39303: LD_INT 1
39305: NEG
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 2
39313: PUSH
39314: LD_INT 0
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: LD_INT 2
39323: PUSH
39324: LD_INT 1
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: LD_INT 2
39333: PUSH
39334: LD_INT 2
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 1
39343: PUSH
39344: LD_INT 2
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 0
39353: PUSH
39354: LD_INT 2
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 1
39363: NEG
39364: PUSH
39365: LD_INT 1
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 2
39374: NEG
39375: PUSH
39376: LD_INT 0
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 2
39385: NEG
39386: PUSH
39387: LD_INT 1
39389: NEG
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 2
39397: NEG
39398: PUSH
39399: LD_INT 2
39401: NEG
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39428: LD_ADDR_VAR 0 20
39432: PUSH
39433: LD_INT 0
39435: PUSH
39436: LD_INT 0
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: LD_INT 0
39445: PUSH
39446: LD_INT 1
39448: NEG
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 1
39456: PUSH
39457: LD_INT 0
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 1
39466: PUSH
39467: LD_INT 1
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 0
39476: PUSH
39477: LD_INT 1
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 1
39486: NEG
39487: PUSH
39488: LD_INT 0
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 1
39497: NEG
39498: PUSH
39499: LD_INT 1
39501: NEG
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 1
39509: NEG
39510: PUSH
39511: LD_INT 2
39513: NEG
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 0
39521: PUSH
39522: LD_INT 2
39524: NEG
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 1
39532: PUSH
39533: LD_INT 1
39535: NEG
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 2
39543: PUSH
39544: LD_INT 0
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: LD_INT 2
39553: PUSH
39554: LD_INT 1
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 2
39563: PUSH
39564: LD_INT 2
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: LD_INT 1
39573: PUSH
39574: LD_INT 2
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PUSH
39581: LD_INT 0
39583: PUSH
39584: LD_INT 2
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 1
39593: NEG
39594: PUSH
39595: LD_INT 1
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: LD_INT 2
39604: NEG
39605: PUSH
39606: LD_INT 0
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: LD_INT 2
39615: NEG
39616: PUSH
39617: LD_INT 1
39619: NEG
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 2
39627: NEG
39628: PUSH
39629: LD_INT 2
39631: NEG
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39658: LD_ADDR_VAR 0 21
39662: PUSH
39663: LD_INT 0
39665: PUSH
39666: LD_INT 0
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 0
39675: PUSH
39676: LD_INT 1
39678: NEG
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 1
39686: PUSH
39687: LD_INT 0
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 1
39696: PUSH
39697: LD_INT 1
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: PUSH
39704: LD_INT 0
39706: PUSH
39707: LD_INT 1
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: LD_INT 1
39716: NEG
39717: PUSH
39718: LD_INT 0
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 1
39727: NEG
39728: PUSH
39729: LD_INT 1
39731: NEG
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 1
39739: NEG
39740: PUSH
39741: LD_INT 2
39743: NEG
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 0
39751: PUSH
39752: LD_INT 2
39754: NEG
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 1
39762: PUSH
39763: LD_INT 1
39765: NEG
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 2
39773: PUSH
39774: LD_INT 0
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 2
39783: PUSH
39784: LD_INT 1
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: LD_INT 2
39793: PUSH
39794: LD_INT 2
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 1
39803: PUSH
39804: LD_INT 2
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 0
39813: PUSH
39814: LD_INT 2
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 1
39823: NEG
39824: PUSH
39825: LD_INT 1
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 2
39834: NEG
39835: PUSH
39836: LD_INT 0
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 2
39845: NEG
39846: PUSH
39847: LD_INT 1
39849: NEG
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 2
39857: NEG
39858: PUSH
39859: LD_INT 2
39861: NEG
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39888: LD_ADDR_VAR 0 22
39892: PUSH
39893: LD_INT 0
39895: PUSH
39896: LD_INT 0
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 0
39905: PUSH
39906: LD_INT 1
39908: NEG
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 1
39916: PUSH
39917: LD_INT 0
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 1
39926: PUSH
39927: LD_INT 1
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 0
39936: PUSH
39937: LD_INT 1
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 1
39946: NEG
39947: PUSH
39948: LD_INT 0
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 1
39957: NEG
39958: PUSH
39959: LD_INT 1
39961: NEG
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 1
39969: NEG
39970: PUSH
39971: LD_INT 2
39973: NEG
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 0
39981: PUSH
39982: LD_INT 2
39984: NEG
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 1
39992: PUSH
39993: LD_INT 1
39995: NEG
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: LD_INT 2
40003: PUSH
40004: LD_INT 0
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 2
40013: PUSH
40014: LD_INT 1
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 2
40023: PUSH
40024: LD_INT 2
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: LD_INT 1
40033: PUSH
40034: LD_INT 2
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 0
40043: PUSH
40044: LD_INT 2
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 1
40053: NEG
40054: PUSH
40055: LD_INT 1
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 2
40064: NEG
40065: PUSH
40066: LD_INT 0
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 2
40075: NEG
40076: PUSH
40077: LD_INT 1
40079: NEG
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 2
40087: NEG
40088: PUSH
40089: LD_INT 2
40091: NEG
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40118: LD_ADDR_VAR 0 23
40122: PUSH
40123: LD_INT 0
40125: PUSH
40126: LD_INT 0
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 0
40135: PUSH
40136: LD_INT 1
40138: NEG
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: LD_INT 1
40146: PUSH
40147: LD_INT 0
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 1
40156: PUSH
40157: LD_INT 1
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 0
40166: PUSH
40167: LD_INT 1
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 1
40176: NEG
40177: PUSH
40178: LD_INT 0
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 1
40187: NEG
40188: PUSH
40189: LD_INT 1
40191: NEG
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 1
40199: NEG
40200: PUSH
40201: LD_INT 2
40203: NEG
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 0
40211: PUSH
40212: LD_INT 2
40214: NEG
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 1
40222: PUSH
40223: LD_INT 1
40225: NEG
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 2
40233: PUSH
40234: LD_INT 0
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 2
40243: PUSH
40244: LD_INT 1
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 2
40253: PUSH
40254: LD_INT 2
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 1
40263: PUSH
40264: LD_INT 2
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 0
40273: PUSH
40274: LD_INT 2
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 1
40283: NEG
40284: PUSH
40285: LD_INT 1
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 2
40294: NEG
40295: PUSH
40296: LD_INT 0
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 2
40305: NEG
40306: PUSH
40307: LD_INT 1
40309: NEG
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 2
40317: NEG
40318: PUSH
40319: LD_INT 2
40321: NEG
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 2
40329: NEG
40330: PUSH
40331: LD_INT 3
40333: NEG
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 1
40341: NEG
40342: PUSH
40343: LD_INT 3
40345: NEG
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 1
40353: PUSH
40354: LD_INT 2
40356: NEG
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 2
40364: PUSH
40365: LD_INT 1
40367: NEG
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40398: LD_ADDR_VAR 0 24
40402: PUSH
40403: LD_INT 0
40405: PUSH
40406: LD_INT 0
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 0
40415: PUSH
40416: LD_INT 1
40418: NEG
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 1
40426: PUSH
40427: LD_INT 0
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 1
40436: PUSH
40437: LD_INT 1
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 0
40446: PUSH
40447: LD_INT 1
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 1
40456: NEG
40457: PUSH
40458: LD_INT 0
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 1
40467: NEG
40468: PUSH
40469: LD_INT 1
40471: NEG
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 1
40479: NEG
40480: PUSH
40481: LD_INT 2
40483: NEG
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 0
40491: PUSH
40492: LD_INT 2
40494: NEG
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 1
40502: PUSH
40503: LD_INT 1
40505: NEG
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 2
40513: PUSH
40514: LD_INT 0
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 2
40523: PUSH
40524: LD_INT 1
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 2
40533: PUSH
40534: LD_INT 2
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 1
40543: PUSH
40544: LD_INT 2
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 0
40553: PUSH
40554: LD_INT 2
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: LD_INT 1
40563: NEG
40564: PUSH
40565: LD_INT 1
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 2
40574: NEG
40575: PUSH
40576: LD_INT 0
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 2
40585: NEG
40586: PUSH
40587: LD_INT 1
40589: NEG
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 2
40597: NEG
40598: PUSH
40599: LD_INT 2
40601: NEG
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 1
40609: PUSH
40610: LD_INT 2
40612: NEG
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 2
40620: PUSH
40621: LD_INT 1
40623: NEG
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 3
40631: PUSH
40632: LD_INT 1
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 3
40641: PUSH
40642: LD_INT 2
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
40674: LD_ADDR_VAR 0 25
40678: PUSH
40679: LD_INT 0
40681: PUSH
40682: LD_INT 0
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 0
40691: PUSH
40692: LD_INT 1
40694: NEG
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 1
40702: PUSH
40703: LD_INT 0
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 1
40712: PUSH
40713: LD_INT 1
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 0
40722: PUSH
40723: LD_INT 1
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 1
40732: NEG
40733: PUSH
40734: LD_INT 0
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 1
40743: NEG
40744: PUSH
40745: LD_INT 1
40747: NEG
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 1
40755: NEG
40756: PUSH
40757: LD_INT 2
40759: NEG
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 0
40767: PUSH
40768: LD_INT 2
40770: NEG
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 1
40778: PUSH
40779: LD_INT 1
40781: NEG
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 2
40789: PUSH
40790: LD_INT 0
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 2
40799: PUSH
40800: LD_INT 1
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 2
40809: PUSH
40810: LD_INT 2
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 1
40819: PUSH
40820: LD_INT 2
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 0
40829: PUSH
40830: LD_INT 2
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 1
40839: NEG
40840: PUSH
40841: LD_INT 1
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: LD_INT 2
40850: NEG
40851: PUSH
40852: LD_INT 0
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: LD_INT 2
40861: NEG
40862: PUSH
40863: LD_INT 1
40865: NEG
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 2
40873: NEG
40874: PUSH
40875: LD_INT 2
40877: NEG
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 3
40885: PUSH
40886: LD_INT 1
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 3
40895: PUSH
40896: LD_INT 2
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 2
40905: PUSH
40906: LD_INT 3
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 1
40915: PUSH
40916: LD_INT 3
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40948: LD_ADDR_VAR 0 26
40952: PUSH
40953: LD_INT 0
40955: PUSH
40956: LD_INT 0
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 0
40965: PUSH
40966: LD_INT 1
40968: NEG
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 1
40976: PUSH
40977: LD_INT 0
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 1
40986: PUSH
40987: LD_INT 1
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 0
40996: PUSH
40997: LD_INT 1
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 1
41006: NEG
41007: PUSH
41008: LD_INT 0
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 1
41017: NEG
41018: PUSH
41019: LD_INT 1
41021: NEG
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 1
41029: NEG
41030: PUSH
41031: LD_INT 2
41033: NEG
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 0
41041: PUSH
41042: LD_INT 2
41044: NEG
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 1
41052: PUSH
41053: LD_INT 1
41055: NEG
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 2
41063: PUSH
41064: LD_INT 0
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 2
41073: PUSH
41074: LD_INT 1
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: LD_INT 2
41083: PUSH
41084: LD_INT 2
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 1
41093: PUSH
41094: LD_INT 2
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 0
41103: PUSH
41104: LD_INT 2
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 1
41113: NEG
41114: PUSH
41115: LD_INT 1
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 2
41124: NEG
41125: PUSH
41126: LD_INT 0
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 2
41135: NEG
41136: PUSH
41137: LD_INT 1
41139: NEG
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 2
41147: NEG
41148: PUSH
41149: LD_INT 2
41151: NEG
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 2
41159: PUSH
41160: LD_INT 3
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 1
41169: PUSH
41170: LD_INT 3
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PUSH
41177: LD_INT 1
41179: NEG
41180: PUSH
41181: LD_INT 2
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PUSH
41188: LD_INT 2
41190: NEG
41191: PUSH
41192: LD_INT 1
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41224: LD_ADDR_VAR 0 27
41228: PUSH
41229: LD_INT 0
41231: PUSH
41232: LD_INT 0
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 0
41241: PUSH
41242: LD_INT 1
41244: NEG
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 1
41252: PUSH
41253: LD_INT 0
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 1
41262: PUSH
41263: LD_INT 1
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 0
41272: PUSH
41273: LD_INT 1
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 1
41282: NEG
41283: PUSH
41284: LD_INT 0
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: LD_INT 1
41293: NEG
41294: PUSH
41295: LD_INT 1
41297: NEG
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 1
41305: NEG
41306: PUSH
41307: LD_INT 2
41309: NEG
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 0
41317: PUSH
41318: LD_INT 2
41320: NEG
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 1
41328: PUSH
41329: LD_INT 1
41331: NEG
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 2
41339: PUSH
41340: LD_INT 0
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 2
41349: PUSH
41350: LD_INT 1
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 2
41359: PUSH
41360: LD_INT 2
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 1
41369: PUSH
41370: LD_INT 2
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 0
41379: PUSH
41380: LD_INT 2
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 1
41389: NEG
41390: PUSH
41391: LD_INT 1
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 2
41400: NEG
41401: PUSH
41402: LD_INT 0
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 2
41411: NEG
41412: PUSH
41413: LD_INT 1
41415: NEG
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 2
41423: NEG
41424: PUSH
41425: LD_INT 2
41427: NEG
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: LD_INT 1
41435: NEG
41436: PUSH
41437: LD_INT 2
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: LD_INT 2
41446: NEG
41447: PUSH
41448: LD_INT 1
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: LD_INT 3
41457: NEG
41458: PUSH
41459: LD_INT 1
41461: NEG
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 3
41469: NEG
41470: PUSH
41471: LD_INT 2
41473: NEG
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41504: LD_ADDR_VAR 0 28
41508: PUSH
41509: LD_INT 0
41511: PUSH
41512: LD_INT 0
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 0
41521: PUSH
41522: LD_INT 1
41524: NEG
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 1
41532: PUSH
41533: LD_INT 0
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 1
41542: PUSH
41543: LD_INT 1
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 0
41552: PUSH
41553: LD_INT 1
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 1
41562: NEG
41563: PUSH
41564: LD_INT 0
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 1
41573: NEG
41574: PUSH
41575: LD_INT 1
41577: NEG
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 1
41585: NEG
41586: PUSH
41587: LD_INT 2
41589: NEG
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 0
41597: PUSH
41598: LD_INT 2
41600: NEG
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 1
41608: PUSH
41609: LD_INT 1
41611: NEG
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 2
41619: PUSH
41620: LD_INT 0
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 2
41629: PUSH
41630: LD_INT 1
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 2
41639: PUSH
41640: LD_INT 2
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 1
41649: PUSH
41650: LD_INT 2
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 0
41659: PUSH
41660: LD_INT 2
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 1
41669: NEG
41670: PUSH
41671: LD_INT 1
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 2
41680: NEG
41681: PUSH
41682: LD_INT 0
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 2
41691: NEG
41692: PUSH
41693: LD_INT 1
41695: NEG
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 2
41703: NEG
41704: PUSH
41705: LD_INT 2
41707: NEG
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 2
41715: NEG
41716: PUSH
41717: LD_INT 3
41719: NEG
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 1
41727: NEG
41728: PUSH
41729: LD_INT 3
41731: NEG
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: LD_INT 3
41739: NEG
41740: PUSH
41741: LD_INT 1
41743: NEG
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 3
41751: NEG
41752: PUSH
41753: LD_INT 2
41755: NEG
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41786: LD_ADDR_VAR 0 29
41790: PUSH
41791: LD_INT 0
41793: PUSH
41794: LD_INT 0
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 0
41803: PUSH
41804: LD_INT 1
41806: NEG
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 1
41814: PUSH
41815: LD_INT 0
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 1
41824: PUSH
41825: LD_INT 1
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 0
41834: PUSH
41835: LD_INT 1
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 1
41844: NEG
41845: PUSH
41846: LD_INT 0
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 1
41855: NEG
41856: PUSH
41857: LD_INT 1
41859: NEG
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 1
41867: NEG
41868: PUSH
41869: LD_INT 2
41871: NEG
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 0
41879: PUSH
41880: LD_INT 2
41882: NEG
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 1
41890: PUSH
41891: LD_INT 1
41893: NEG
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 2
41901: PUSH
41902: LD_INT 0
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 2
41911: PUSH
41912: LD_INT 1
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 1
41921: PUSH
41922: LD_INT 2
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 0
41931: PUSH
41932: LD_INT 2
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 1
41941: NEG
41942: PUSH
41943: LD_INT 1
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 2
41952: NEG
41953: PUSH
41954: LD_INT 1
41956: NEG
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 2
41964: NEG
41965: PUSH
41966: LD_INT 2
41968: NEG
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 2
41976: NEG
41977: PUSH
41978: LD_INT 3
41980: NEG
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 2
41988: PUSH
41989: LD_INT 1
41991: NEG
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 3
41999: PUSH
42000: LD_INT 1
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 1
42009: PUSH
42010: LD_INT 3
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 1
42019: NEG
42020: PUSH
42021: LD_INT 2
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 3
42030: NEG
42031: PUSH
42032: LD_INT 2
42034: NEG
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42065: LD_ADDR_VAR 0 30
42069: PUSH
42070: LD_INT 0
42072: PUSH
42073: LD_INT 0
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 0
42082: PUSH
42083: LD_INT 1
42085: NEG
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 1
42093: PUSH
42094: LD_INT 0
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 1
42103: PUSH
42104: LD_INT 1
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 0
42113: PUSH
42114: LD_INT 1
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: LD_INT 1
42123: NEG
42124: PUSH
42125: LD_INT 0
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 1
42134: NEG
42135: PUSH
42136: LD_INT 1
42138: NEG
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 1
42146: NEG
42147: PUSH
42148: LD_INT 2
42150: NEG
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 0
42158: PUSH
42159: LD_INT 2
42161: NEG
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 1
42169: PUSH
42170: LD_INT 1
42172: NEG
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 2
42180: PUSH
42181: LD_INT 0
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 2
42190: PUSH
42191: LD_INT 1
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 2
42200: PUSH
42201: LD_INT 2
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 1
42210: PUSH
42211: LD_INT 2
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 1
42220: NEG
42221: PUSH
42222: LD_INT 1
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 2
42231: NEG
42232: PUSH
42233: LD_INT 0
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 2
42242: NEG
42243: PUSH
42244: LD_INT 1
42246: NEG
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 1
42254: NEG
42255: PUSH
42256: LD_INT 3
42258: NEG
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 1
42266: PUSH
42267: LD_INT 2
42269: NEG
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 3
42277: PUSH
42278: LD_INT 2
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 2
42287: PUSH
42288: LD_INT 3
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 2
42297: NEG
42298: PUSH
42299: LD_INT 1
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 3
42308: NEG
42309: PUSH
42310: LD_INT 1
42312: NEG
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42343: LD_ADDR_VAR 0 31
42347: PUSH
42348: LD_INT 0
42350: PUSH
42351: LD_INT 0
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 0
42360: PUSH
42361: LD_INT 1
42363: NEG
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 1
42371: PUSH
42372: LD_INT 0
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 1
42381: PUSH
42382: LD_INT 1
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 0
42391: PUSH
42392: LD_INT 1
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 1
42401: NEG
42402: PUSH
42403: LD_INT 0
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 1
42412: NEG
42413: PUSH
42414: LD_INT 1
42416: NEG
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 1
42424: NEG
42425: PUSH
42426: LD_INT 2
42428: NEG
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 1
42436: PUSH
42437: LD_INT 1
42439: NEG
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 2
42447: PUSH
42448: LD_INT 0
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: LD_INT 2
42457: PUSH
42458: LD_INT 1
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 2
42467: PUSH
42468: LD_INT 2
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 1
42477: PUSH
42478: LD_INT 2
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 0
42487: PUSH
42488: LD_INT 2
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 1
42497: NEG
42498: PUSH
42499: LD_INT 1
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 2
42508: NEG
42509: PUSH
42510: LD_INT 1
42512: NEG
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 2
42520: NEG
42521: PUSH
42522: LD_INT 2
42524: NEG
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 2
42532: NEG
42533: PUSH
42534: LD_INT 3
42536: NEG
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 2
42544: PUSH
42545: LD_INT 1
42547: NEG
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 3
42555: PUSH
42556: LD_INT 1
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 1
42565: PUSH
42566: LD_INT 3
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 1
42575: NEG
42576: PUSH
42577: LD_INT 2
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 3
42586: NEG
42587: PUSH
42588: LD_INT 2
42590: NEG
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42621: LD_ADDR_VAR 0 32
42625: PUSH
42626: LD_INT 0
42628: PUSH
42629: LD_INT 0
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: LD_INT 0
42638: PUSH
42639: LD_INT 1
42641: NEG
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 1
42649: PUSH
42650: LD_INT 0
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 1
42659: PUSH
42660: LD_INT 1
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 0
42669: PUSH
42670: LD_INT 1
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 1
42679: NEG
42680: PUSH
42681: LD_INT 0
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 1
42690: NEG
42691: PUSH
42692: LD_INT 1
42694: NEG
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 1
42702: NEG
42703: PUSH
42704: LD_INT 2
42706: NEG
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 0
42714: PUSH
42715: LD_INT 2
42717: NEG
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 1
42725: PUSH
42726: LD_INT 1
42728: NEG
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 2
42736: PUSH
42737: LD_INT 1
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 2
42746: PUSH
42747: LD_INT 2
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 1
42756: PUSH
42757: LD_INT 2
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 0
42766: PUSH
42767: LD_INT 2
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 1
42776: NEG
42777: PUSH
42778: LD_INT 1
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 2
42787: NEG
42788: PUSH
42789: LD_INT 0
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 2
42798: NEG
42799: PUSH
42800: LD_INT 1
42802: NEG
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 1
42810: NEG
42811: PUSH
42812: LD_INT 3
42814: NEG
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 1
42822: PUSH
42823: LD_INT 2
42825: NEG
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 3
42833: PUSH
42834: LD_INT 2
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 2
42843: PUSH
42844: LD_INT 3
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 2
42853: NEG
42854: PUSH
42855: LD_INT 1
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PUSH
42862: LD_INT 3
42864: NEG
42865: PUSH
42866: LD_INT 1
42868: NEG
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42899: LD_ADDR_VAR 0 33
42903: PUSH
42904: LD_INT 0
42906: PUSH
42907: LD_INT 0
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 0
42916: PUSH
42917: LD_INT 1
42919: NEG
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 1
42927: PUSH
42928: LD_INT 0
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 1
42937: PUSH
42938: LD_INT 1
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 0
42947: PUSH
42948: LD_INT 1
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 1
42957: NEG
42958: PUSH
42959: LD_INT 0
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 1
42968: NEG
42969: PUSH
42970: LD_INT 1
42972: NEG
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 1
42980: NEG
42981: PUSH
42982: LD_INT 2
42984: NEG
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 1
42992: PUSH
42993: LD_INT 1
42995: NEG
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 2
43003: PUSH
43004: LD_INT 0
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 2
43013: PUSH
43014: LD_INT 1
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 1
43023: PUSH
43024: LD_INT 2
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 0
43033: PUSH
43034: LD_INT 2
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 1
43043: NEG
43044: PUSH
43045: LD_INT 1
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 2
43054: NEG
43055: PUSH
43056: LD_INT 0
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 2
43065: NEG
43066: PUSH
43067: LD_INT 1
43069: NEG
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 2
43077: NEG
43078: PUSH
43079: LD_INT 2
43081: NEG
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 2
43089: NEG
43090: PUSH
43091: LD_INT 3
43093: NEG
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 2
43101: PUSH
43102: LD_INT 1
43104: NEG
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 3
43112: PUSH
43113: LD_INT 1
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 1
43122: PUSH
43123: LD_INT 3
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 1
43132: NEG
43133: PUSH
43134: LD_INT 2
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 3
43143: NEG
43144: PUSH
43145: LD_INT 2
43147: NEG
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43178: LD_ADDR_VAR 0 34
43182: PUSH
43183: LD_INT 0
43185: PUSH
43186: LD_INT 0
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 0
43195: PUSH
43196: LD_INT 1
43198: NEG
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 1
43206: PUSH
43207: LD_INT 0
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 1
43216: PUSH
43217: LD_INT 1
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: LD_INT 0
43226: PUSH
43227: LD_INT 1
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 1
43236: NEG
43237: PUSH
43238: LD_INT 0
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 1
43247: NEG
43248: PUSH
43249: LD_INT 1
43251: NEG
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 1
43259: NEG
43260: PUSH
43261: LD_INT 2
43263: NEG
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 0
43271: PUSH
43272: LD_INT 2
43274: NEG
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 1
43282: PUSH
43283: LD_INT 1
43285: NEG
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 2
43293: PUSH
43294: LD_INT 1
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 2
43303: PUSH
43304: LD_INT 2
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 1
43313: PUSH
43314: LD_INT 2
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: LD_INT 1
43323: NEG
43324: PUSH
43325: LD_INT 1
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 2
43334: NEG
43335: PUSH
43336: LD_INT 0
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 2
43345: NEG
43346: PUSH
43347: LD_INT 1
43349: NEG
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 2
43357: NEG
43358: PUSH
43359: LD_INT 2
43361: NEG
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 1
43369: NEG
43370: PUSH
43371: LD_INT 3
43373: NEG
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 1
43381: PUSH
43382: LD_INT 2
43384: NEG
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 3
43392: PUSH
43393: LD_INT 2
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 2
43402: PUSH
43403: LD_INT 3
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 2
43412: NEG
43413: PUSH
43414: LD_INT 1
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 3
43423: NEG
43424: PUSH
43425: LD_INT 1
43427: NEG
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43458: LD_ADDR_VAR 0 35
43462: PUSH
43463: LD_INT 0
43465: PUSH
43466: LD_INT 0
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 0
43475: PUSH
43476: LD_INT 1
43478: NEG
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 1
43486: PUSH
43487: LD_INT 0
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 1
43496: PUSH
43497: LD_INT 1
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 0
43506: PUSH
43507: LD_INT 1
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 1
43516: NEG
43517: PUSH
43518: LD_INT 0
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 1
43527: NEG
43528: PUSH
43529: LD_INT 1
43531: NEG
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 2
43539: PUSH
43540: LD_INT 1
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 2
43549: NEG
43550: PUSH
43551: LD_INT 1
43553: NEG
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43570: LD_ADDR_VAR 0 36
43574: PUSH
43575: LD_INT 0
43577: PUSH
43578: LD_INT 0
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 0
43587: PUSH
43588: LD_INT 1
43590: NEG
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 1
43598: PUSH
43599: LD_INT 0
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 1
43608: PUSH
43609: LD_INT 1
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 0
43618: PUSH
43619: LD_INT 1
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 1
43628: NEG
43629: PUSH
43630: LD_INT 0
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 1
43639: NEG
43640: PUSH
43641: LD_INT 1
43643: NEG
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 1
43651: NEG
43652: PUSH
43653: LD_INT 2
43655: NEG
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 1
43663: PUSH
43664: LD_INT 2
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43682: LD_ADDR_VAR 0 37
43686: PUSH
43687: LD_INT 0
43689: PUSH
43690: LD_INT 0
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 0
43699: PUSH
43700: LD_INT 1
43702: NEG
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 1
43710: PUSH
43711: LD_INT 0
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 1
43720: PUSH
43721: LD_INT 1
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 0
43730: PUSH
43731: LD_INT 1
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 1
43740: NEG
43741: PUSH
43742: LD_INT 0
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 1
43751: NEG
43752: PUSH
43753: LD_INT 1
43755: NEG
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 1
43763: PUSH
43764: LD_INT 1
43766: NEG
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 1
43774: NEG
43775: PUSH
43776: LD_INT 1
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43794: LD_ADDR_VAR 0 38
43798: PUSH
43799: LD_INT 0
43801: PUSH
43802: LD_INT 0
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 0
43811: PUSH
43812: LD_INT 1
43814: NEG
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 1
43822: PUSH
43823: LD_INT 0
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 1
43832: PUSH
43833: LD_INT 1
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 0
43842: PUSH
43843: LD_INT 1
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 1
43852: NEG
43853: PUSH
43854: LD_INT 0
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 1
43863: NEG
43864: PUSH
43865: LD_INT 1
43867: NEG
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 2
43875: PUSH
43876: LD_INT 1
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 2
43885: NEG
43886: PUSH
43887: LD_INT 1
43889: NEG
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43906: LD_ADDR_VAR 0 39
43910: PUSH
43911: LD_INT 0
43913: PUSH
43914: LD_INT 0
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 0
43923: PUSH
43924: LD_INT 1
43926: NEG
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 1
43934: PUSH
43935: LD_INT 0
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 1
43944: PUSH
43945: LD_INT 1
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 0
43954: PUSH
43955: LD_INT 1
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 1
43964: NEG
43965: PUSH
43966: LD_INT 0
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 1
43975: NEG
43976: PUSH
43977: LD_INT 1
43979: NEG
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 1
43987: NEG
43988: PUSH
43989: LD_INT 2
43991: NEG
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 1
43999: PUSH
44000: LD_INT 2
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44018: LD_ADDR_VAR 0 40
44022: PUSH
44023: LD_INT 0
44025: PUSH
44026: LD_INT 0
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 0
44035: PUSH
44036: LD_INT 1
44038: NEG
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 1
44046: PUSH
44047: LD_INT 0
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 1
44056: PUSH
44057: LD_INT 1
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 0
44066: PUSH
44067: LD_INT 1
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 1
44076: NEG
44077: PUSH
44078: LD_INT 0
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 1
44087: NEG
44088: PUSH
44089: LD_INT 1
44091: NEG
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 1
44099: PUSH
44100: LD_INT 1
44102: NEG
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 1
44110: NEG
44111: PUSH
44112: LD_INT 1
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44130: LD_ADDR_VAR 0 41
44134: PUSH
44135: LD_INT 0
44137: PUSH
44138: LD_INT 0
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 0
44147: PUSH
44148: LD_INT 1
44150: NEG
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 1
44158: PUSH
44159: LD_INT 0
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_INT 1
44168: PUSH
44169: LD_INT 1
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 0
44178: PUSH
44179: LD_INT 1
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 1
44188: NEG
44189: PUSH
44190: LD_INT 0
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 1
44199: NEG
44200: PUSH
44201: LD_INT 1
44203: NEG
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 1
44211: NEG
44212: PUSH
44213: LD_INT 2
44215: NEG
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 1
44223: PUSH
44224: LD_INT 1
44226: NEG
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 2
44234: PUSH
44235: LD_INT 0
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 2
44244: PUSH
44245: LD_INT 1
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 2
44254: PUSH
44255: LD_INT 2
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 1
44264: PUSH
44265: LD_INT 2
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 1
44274: NEG
44275: PUSH
44276: LD_INT 1
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 2
44285: NEG
44286: PUSH
44287: LD_INT 0
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 2
44296: NEG
44297: PUSH
44298: LD_INT 1
44300: NEG
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 2
44308: NEG
44309: PUSH
44310: LD_INT 2
44312: NEG
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 2
44320: NEG
44321: PUSH
44322: LD_INT 3
44324: NEG
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 2
44332: PUSH
44333: LD_INT 1
44335: NEG
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 3
44343: PUSH
44344: LD_INT 0
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 3
44353: PUSH
44354: LD_INT 1
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 3
44363: PUSH
44364: LD_INT 2
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 3
44373: PUSH
44374: LD_INT 3
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 2
44383: PUSH
44384: LD_INT 3
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 2
44393: NEG
44394: PUSH
44395: LD_INT 1
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 3
44404: NEG
44405: PUSH
44406: LD_INT 0
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 3
44415: NEG
44416: PUSH
44417: LD_INT 1
44419: NEG
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 3
44427: NEG
44428: PUSH
44429: LD_INT 2
44431: NEG
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 3
44439: NEG
44440: PUSH
44441: LD_INT 3
44443: NEG
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44480: LD_ADDR_VAR 0 42
44484: PUSH
44485: LD_INT 0
44487: PUSH
44488: LD_INT 0
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 0
44497: PUSH
44498: LD_INT 1
44500: NEG
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 1
44508: PUSH
44509: LD_INT 0
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 1
44518: PUSH
44519: LD_INT 1
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 0
44528: PUSH
44529: LD_INT 1
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 1
44538: NEG
44539: PUSH
44540: LD_INT 0
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 1
44549: NEG
44550: PUSH
44551: LD_INT 1
44553: NEG
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 1
44561: NEG
44562: PUSH
44563: LD_INT 2
44565: NEG
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 0
44573: PUSH
44574: LD_INT 2
44576: NEG
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 1
44584: PUSH
44585: LD_INT 1
44587: NEG
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 2
44595: PUSH
44596: LD_INT 1
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 2
44605: PUSH
44606: LD_INT 2
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 1
44615: PUSH
44616: LD_INT 2
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 0
44625: PUSH
44626: LD_INT 2
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 1
44635: NEG
44636: PUSH
44637: LD_INT 1
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 2
44646: NEG
44647: PUSH
44648: LD_INT 1
44650: NEG
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 2
44658: NEG
44659: PUSH
44660: LD_INT 2
44662: NEG
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 2
44670: NEG
44671: PUSH
44672: LD_INT 3
44674: NEG
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 1
44682: NEG
44683: PUSH
44684: LD_INT 3
44686: NEG
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 0
44694: PUSH
44695: LD_INT 3
44697: NEG
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 1
44705: PUSH
44706: LD_INT 2
44708: NEG
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 3
44716: PUSH
44717: LD_INT 2
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 3
44726: PUSH
44727: LD_INT 3
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 2
44736: PUSH
44737: LD_INT 3
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 1
44746: PUSH
44747: LD_INT 3
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 0
44756: PUSH
44757: LD_INT 3
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 1
44766: NEG
44767: PUSH
44768: LD_INT 2
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 3
44777: NEG
44778: PUSH
44779: LD_INT 2
44781: NEG
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 3
44789: NEG
44790: PUSH
44791: LD_INT 3
44793: NEG
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44830: LD_ADDR_VAR 0 43
44834: PUSH
44835: LD_INT 0
44837: PUSH
44838: LD_INT 0
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 0
44847: PUSH
44848: LD_INT 1
44850: NEG
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 1
44858: PUSH
44859: LD_INT 0
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 1
44868: PUSH
44869: LD_INT 1
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 0
44878: PUSH
44879: LD_INT 1
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 1
44888: NEG
44889: PUSH
44890: LD_INT 0
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 1
44899: NEG
44900: PUSH
44901: LD_INT 1
44903: NEG
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 1
44911: NEG
44912: PUSH
44913: LD_INT 2
44915: NEG
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 0
44923: PUSH
44924: LD_INT 2
44926: NEG
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 1
44934: PUSH
44935: LD_INT 1
44937: NEG
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 2
44945: PUSH
44946: LD_INT 0
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 2
44955: PUSH
44956: LD_INT 1
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 1
44965: PUSH
44966: LD_INT 2
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 0
44975: PUSH
44976: LD_INT 2
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 1
44985: NEG
44986: PUSH
44987: LD_INT 1
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 2
44996: NEG
44997: PUSH
44998: LD_INT 0
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 2
45007: NEG
45008: PUSH
45009: LD_INT 1
45011: NEG
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 1
45019: NEG
45020: PUSH
45021: LD_INT 3
45023: NEG
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 0
45031: PUSH
45032: LD_INT 3
45034: NEG
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 1
45042: PUSH
45043: LD_INT 2
45045: NEG
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 2
45053: PUSH
45054: LD_INT 1
45056: NEG
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 3
45064: PUSH
45065: LD_INT 0
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 3
45074: PUSH
45075: LD_INT 1
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 1
45084: PUSH
45085: LD_INT 3
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 0
45094: PUSH
45095: LD_INT 3
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 1
45104: NEG
45105: PUSH
45106: LD_INT 2
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 2
45115: NEG
45116: PUSH
45117: LD_INT 1
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 3
45126: NEG
45127: PUSH
45128: LD_INT 0
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 3
45137: NEG
45138: PUSH
45139: LD_INT 1
45141: NEG
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45178: LD_ADDR_VAR 0 44
45182: PUSH
45183: LD_INT 0
45185: PUSH
45186: LD_INT 0
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 0
45195: PUSH
45196: LD_INT 1
45198: NEG
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 1
45206: PUSH
45207: LD_INT 0
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 1
45216: PUSH
45217: LD_INT 1
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 0
45226: PUSH
45227: LD_INT 1
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 1
45236: NEG
45237: PUSH
45238: LD_INT 0
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 1
45247: NEG
45248: PUSH
45249: LD_INT 1
45251: NEG
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 1
45259: NEG
45260: PUSH
45261: LD_INT 2
45263: NEG
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 1
45271: PUSH
45272: LD_INT 1
45274: NEG
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 2
45282: PUSH
45283: LD_INT 0
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 2
45292: PUSH
45293: LD_INT 1
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 2
45302: PUSH
45303: LD_INT 2
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 1
45312: PUSH
45313: LD_INT 2
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 1
45322: NEG
45323: PUSH
45324: LD_INT 1
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 2
45333: NEG
45334: PUSH
45335: LD_INT 0
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 2
45344: NEG
45345: PUSH
45346: LD_INT 1
45348: NEG
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 2
45356: NEG
45357: PUSH
45358: LD_INT 2
45360: NEG
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 2
45368: NEG
45369: PUSH
45370: LD_INT 3
45372: NEG
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 2
45380: PUSH
45381: LD_INT 1
45383: NEG
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 3
45391: PUSH
45392: LD_INT 0
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 3
45401: PUSH
45402: LD_INT 1
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 3
45411: PUSH
45412: LD_INT 2
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 3
45421: PUSH
45422: LD_INT 3
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 2
45431: PUSH
45432: LD_INT 3
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 2
45441: NEG
45442: PUSH
45443: LD_INT 1
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 3
45452: NEG
45453: PUSH
45454: LD_INT 0
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 3
45463: NEG
45464: PUSH
45465: LD_INT 1
45467: NEG
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 3
45475: NEG
45476: PUSH
45477: LD_INT 2
45479: NEG
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 3
45487: NEG
45488: PUSH
45489: LD_INT 3
45491: NEG
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45528: LD_ADDR_VAR 0 45
45532: PUSH
45533: LD_INT 0
45535: PUSH
45536: LD_INT 0
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 0
45545: PUSH
45546: LD_INT 1
45548: NEG
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 1
45556: PUSH
45557: LD_INT 0
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 1
45566: PUSH
45567: LD_INT 1
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 0
45576: PUSH
45577: LD_INT 1
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 1
45586: NEG
45587: PUSH
45588: LD_INT 0
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 1
45597: NEG
45598: PUSH
45599: LD_INT 1
45601: NEG
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 1
45609: NEG
45610: PUSH
45611: LD_INT 2
45613: NEG
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 0
45621: PUSH
45622: LD_INT 2
45624: NEG
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 1
45632: PUSH
45633: LD_INT 1
45635: NEG
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 2
45643: PUSH
45644: LD_INT 1
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 2
45653: PUSH
45654: LD_INT 2
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 1
45663: PUSH
45664: LD_INT 2
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 0
45673: PUSH
45674: LD_INT 2
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 1
45683: NEG
45684: PUSH
45685: LD_INT 1
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 2
45694: NEG
45695: PUSH
45696: LD_INT 1
45698: NEG
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 2
45706: NEG
45707: PUSH
45708: LD_INT 2
45710: NEG
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 2
45718: NEG
45719: PUSH
45720: LD_INT 3
45722: NEG
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 1
45730: NEG
45731: PUSH
45732: LD_INT 3
45734: NEG
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 0
45742: PUSH
45743: LD_INT 3
45745: NEG
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 1
45753: PUSH
45754: LD_INT 2
45756: NEG
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 3
45764: PUSH
45765: LD_INT 2
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 3
45774: PUSH
45775: LD_INT 3
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 2
45784: PUSH
45785: LD_INT 3
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 1
45794: PUSH
45795: LD_INT 3
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 0
45804: PUSH
45805: LD_INT 3
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 1
45814: NEG
45815: PUSH
45816: LD_INT 2
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 3
45825: NEG
45826: PUSH
45827: LD_INT 2
45829: NEG
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 3
45837: NEG
45838: PUSH
45839: LD_INT 3
45841: NEG
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45878: LD_ADDR_VAR 0 46
45882: PUSH
45883: LD_INT 0
45885: PUSH
45886: LD_INT 0
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 0
45895: PUSH
45896: LD_INT 1
45898: NEG
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 1
45906: PUSH
45907: LD_INT 0
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 1
45916: PUSH
45917: LD_INT 1
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 0
45926: PUSH
45927: LD_INT 1
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 1
45936: NEG
45937: PUSH
45938: LD_INT 0
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 1
45947: NEG
45948: PUSH
45949: LD_INT 1
45951: NEG
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 1
45959: NEG
45960: PUSH
45961: LD_INT 2
45963: NEG
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 0
45971: PUSH
45972: LD_INT 2
45974: NEG
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 1
45982: PUSH
45983: LD_INT 1
45985: NEG
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 2
45993: PUSH
45994: LD_INT 0
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 2
46003: PUSH
46004: LD_INT 1
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 1
46013: PUSH
46014: LD_INT 2
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 0
46023: PUSH
46024: LD_INT 2
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 1
46033: NEG
46034: PUSH
46035: LD_INT 1
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 2
46044: NEG
46045: PUSH
46046: LD_INT 0
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 2
46055: NEG
46056: PUSH
46057: LD_INT 1
46059: NEG
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 1
46067: NEG
46068: PUSH
46069: LD_INT 3
46071: NEG
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 0
46079: PUSH
46080: LD_INT 3
46082: NEG
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 1
46090: PUSH
46091: LD_INT 2
46093: NEG
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 2
46101: PUSH
46102: LD_INT 1
46104: NEG
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 3
46112: PUSH
46113: LD_INT 0
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 3
46122: PUSH
46123: LD_INT 1
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 1
46132: PUSH
46133: LD_INT 3
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 0
46142: PUSH
46143: LD_INT 3
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 1
46152: NEG
46153: PUSH
46154: LD_INT 2
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 2
46163: NEG
46164: PUSH
46165: LD_INT 1
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 3
46174: NEG
46175: PUSH
46176: LD_INT 0
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 3
46185: NEG
46186: PUSH
46187: LD_INT 1
46189: NEG
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46226: LD_ADDR_VAR 0 47
46230: PUSH
46231: LD_INT 0
46233: PUSH
46234: LD_INT 0
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 0
46243: PUSH
46244: LD_INT 1
46246: NEG
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 1
46254: PUSH
46255: LD_INT 0
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 1
46264: PUSH
46265: LD_INT 1
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 0
46274: PUSH
46275: LD_INT 1
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 1
46284: NEG
46285: PUSH
46286: LD_INT 0
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 1
46295: NEG
46296: PUSH
46297: LD_INT 1
46299: NEG
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 1
46307: NEG
46308: PUSH
46309: LD_INT 2
46311: NEG
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 0
46319: PUSH
46320: LD_INT 2
46322: NEG
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 1
46330: PUSH
46331: LD_INT 1
46333: NEG
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 2
46341: NEG
46342: PUSH
46343: LD_INT 1
46345: NEG
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 2
46353: NEG
46354: PUSH
46355: LD_INT 2
46357: NEG
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46377: LD_ADDR_VAR 0 48
46381: PUSH
46382: LD_INT 0
46384: PUSH
46385: LD_INT 0
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 0
46394: PUSH
46395: LD_INT 1
46397: NEG
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 1
46405: PUSH
46406: LD_INT 0
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 1
46415: PUSH
46416: LD_INT 1
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 0
46425: PUSH
46426: LD_INT 1
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 1
46435: NEG
46436: PUSH
46437: LD_INT 0
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 1
46446: NEG
46447: PUSH
46448: LD_INT 1
46450: NEG
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 1
46458: NEG
46459: PUSH
46460: LD_INT 2
46462: NEG
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 0
46470: PUSH
46471: LD_INT 2
46473: NEG
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 1
46481: PUSH
46482: LD_INT 1
46484: NEG
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 2
46492: PUSH
46493: LD_INT 0
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 2
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46524: LD_ADDR_VAR 0 49
46528: PUSH
46529: LD_INT 0
46531: PUSH
46532: LD_INT 0
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 0
46541: PUSH
46542: LD_INT 1
46544: NEG
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 1
46552: PUSH
46553: LD_INT 0
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 1
46562: PUSH
46563: LD_INT 1
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 0
46572: PUSH
46573: LD_INT 1
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 1
46582: NEG
46583: PUSH
46584: LD_INT 0
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 1
46593: NEG
46594: PUSH
46595: LD_INT 1
46597: NEG
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 1
46605: PUSH
46606: LD_INT 1
46608: NEG
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 2
46616: PUSH
46617: LD_INT 0
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 2
46626: PUSH
46627: LD_INT 1
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 2
46636: PUSH
46637: LD_INT 2
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 1
46646: PUSH
46647: LD_INT 2
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46668: LD_ADDR_VAR 0 50
46672: PUSH
46673: LD_INT 0
46675: PUSH
46676: LD_INT 0
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 0
46685: PUSH
46686: LD_INT 1
46688: NEG
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 1
46696: PUSH
46697: LD_INT 0
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 1
46706: PUSH
46707: LD_INT 1
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 0
46716: PUSH
46717: LD_INT 1
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 1
46726: NEG
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 1
46737: NEG
46738: PUSH
46739: LD_INT 1
46741: NEG
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 2
46749: PUSH
46750: LD_INT 1
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 2
46759: PUSH
46760: LD_INT 2
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 1
46769: PUSH
46770: LD_INT 2
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 0
46779: PUSH
46780: LD_INT 2
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 1
46789: NEG
46790: PUSH
46791: LD_INT 1
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46812: LD_ADDR_VAR 0 51
46816: PUSH
46817: LD_INT 0
46819: PUSH
46820: LD_INT 0
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 0
46829: PUSH
46830: LD_INT 1
46832: NEG
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 1
46840: PUSH
46841: LD_INT 0
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 1
46850: PUSH
46851: LD_INT 1
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 0
46860: PUSH
46861: LD_INT 1
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 1
46870: NEG
46871: PUSH
46872: LD_INT 0
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 1
46881: NEG
46882: PUSH
46883: LD_INT 1
46885: NEG
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 1
46893: PUSH
46894: LD_INT 2
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 0
46903: PUSH
46904: LD_INT 2
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 1
46913: NEG
46914: PUSH
46915: LD_INT 1
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 2
46924: NEG
46925: PUSH
46926: LD_INT 0
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 2
46935: NEG
46936: PUSH
46937: LD_INT 1
46939: NEG
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46959: LD_ADDR_VAR 0 52
46963: PUSH
46964: LD_INT 0
46966: PUSH
46967: LD_INT 0
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 0
46976: PUSH
46977: LD_INT 1
46979: NEG
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 1
46987: PUSH
46988: LD_INT 0
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 1
46997: PUSH
46998: LD_INT 1
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 0
47007: PUSH
47008: LD_INT 1
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 1
47017: NEG
47018: PUSH
47019: LD_INT 0
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 1
47028: NEG
47029: PUSH
47030: LD_INT 1
47032: NEG
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 1
47040: NEG
47041: PUSH
47042: LD_INT 2
47044: NEG
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 1
47052: NEG
47053: PUSH
47054: LD_INT 1
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 2
47063: NEG
47064: PUSH
47065: LD_INT 0
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 2
47074: NEG
47075: PUSH
47076: LD_INT 1
47078: NEG
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 2
47086: NEG
47087: PUSH
47088: LD_INT 2
47090: NEG
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47110: LD_ADDR_VAR 0 53
47114: PUSH
47115: LD_INT 0
47117: PUSH
47118: LD_INT 0
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 0
47127: PUSH
47128: LD_INT 1
47130: NEG
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 1
47138: PUSH
47139: LD_INT 0
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 1
47148: PUSH
47149: LD_INT 1
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 0
47158: PUSH
47159: LD_INT 1
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 1
47168: NEG
47169: PUSH
47170: LD_INT 0
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 1
47179: NEG
47180: PUSH
47181: LD_INT 1
47183: NEG
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 1
47191: NEG
47192: PUSH
47193: LD_INT 2
47195: NEG
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 0
47203: PUSH
47204: LD_INT 2
47206: NEG
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 1
47214: PUSH
47215: LD_INT 1
47217: NEG
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 2
47225: PUSH
47226: LD_INT 0
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 2
47235: PUSH
47236: LD_INT 1
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 2
47245: PUSH
47246: LD_INT 2
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 1
47255: PUSH
47256: LD_INT 2
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 0
47265: PUSH
47266: LD_INT 2
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 1
47275: NEG
47276: PUSH
47277: LD_INT 1
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 2
47286: NEG
47287: PUSH
47288: LD_INT 0
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 2
47297: NEG
47298: PUSH
47299: LD_INT 1
47301: NEG
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 2
47309: NEG
47310: PUSH
47311: LD_INT 2
47313: NEG
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47340: LD_ADDR_VAR 0 54
47344: PUSH
47345: LD_INT 0
47347: PUSH
47348: LD_INT 0
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 0
47357: PUSH
47358: LD_INT 1
47360: NEG
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 1
47368: PUSH
47369: LD_INT 0
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 1
47378: PUSH
47379: LD_INT 1
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 0
47388: PUSH
47389: LD_INT 1
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 1
47398: NEG
47399: PUSH
47400: LD_INT 0
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 1
47409: NEG
47410: PUSH
47411: LD_INT 1
47413: NEG
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 1
47421: NEG
47422: PUSH
47423: LD_INT 2
47425: NEG
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 0
47433: PUSH
47434: LD_INT 2
47436: NEG
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 1
47444: PUSH
47445: LD_INT 1
47447: NEG
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 2
47455: PUSH
47456: LD_INT 0
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 2
47465: PUSH
47466: LD_INT 1
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 2
47475: PUSH
47476: LD_INT 2
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 1
47485: PUSH
47486: LD_INT 2
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 0
47495: PUSH
47496: LD_INT 2
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 1
47505: NEG
47506: PUSH
47507: LD_INT 1
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 2
47516: NEG
47517: PUSH
47518: LD_INT 0
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 2
47527: NEG
47528: PUSH
47529: LD_INT 1
47531: NEG
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 2
47539: NEG
47540: PUSH
47541: LD_INT 2
47543: NEG
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47570: LD_ADDR_VAR 0 55
47574: PUSH
47575: LD_INT 0
47577: PUSH
47578: LD_INT 0
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 0
47587: PUSH
47588: LD_INT 1
47590: NEG
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 1
47598: PUSH
47599: LD_INT 0
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 1
47608: PUSH
47609: LD_INT 1
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 0
47618: PUSH
47619: LD_INT 1
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 1
47628: NEG
47629: PUSH
47630: LD_INT 0
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 1
47639: NEG
47640: PUSH
47641: LD_INT 1
47643: NEG
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 1
47651: NEG
47652: PUSH
47653: LD_INT 2
47655: NEG
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 0
47663: PUSH
47664: LD_INT 2
47666: NEG
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 1
47674: PUSH
47675: LD_INT 1
47677: NEG
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 2
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 2
47695: PUSH
47696: LD_INT 1
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 2
47705: PUSH
47706: LD_INT 2
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 1
47715: PUSH
47716: LD_INT 2
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 0
47725: PUSH
47726: LD_INT 2
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 1
47735: NEG
47736: PUSH
47737: LD_INT 1
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 2
47746: NEG
47747: PUSH
47748: LD_INT 0
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 2
47757: NEG
47758: PUSH
47759: LD_INT 1
47761: NEG
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 2
47769: NEG
47770: PUSH
47771: LD_INT 2
47773: NEG
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47800: LD_ADDR_VAR 0 56
47804: PUSH
47805: LD_INT 0
47807: PUSH
47808: LD_INT 0
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 0
47817: PUSH
47818: LD_INT 1
47820: NEG
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 1
47828: PUSH
47829: LD_INT 0
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 1
47838: PUSH
47839: LD_INT 1
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 0
47848: PUSH
47849: LD_INT 1
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 1
47858: NEG
47859: PUSH
47860: LD_INT 0
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 1
47869: NEG
47870: PUSH
47871: LD_INT 1
47873: NEG
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 1
47881: NEG
47882: PUSH
47883: LD_INT 2
47885: NEG
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 0
47893: PUSH
47894: LD_INT 2
47896: NEG
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 1
47904: PUSH
47905: LD_INT 1
47907: NEG
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 2
47915: PUSH
47916: LD_INT 0
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 2
47925: PUSH
47926: LD_INT 1
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 2
47935: PUSH
47936: LD_INT 2
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 1
47945: PUSH
47946: LD_INT 2
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 0
47955: PUSH
47956: LD_INT 2
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 1
47965: NEG
47966: PUSH
47967: LD_INT 1
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 2
47976: NEG
47977: PUSH
47978: LD_INT 0
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 2
47987: NEG
47988: PUSH
47989: LD_INT 1
47991: NEG
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 2
47999: NEG
48000: PUSH
48001: LD_INT 2
48003: NEG
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48030: LD_ADDR_VAR 0 57
48034: PUSH
48035: LD_INT 0
48037: PUSH
48038: LD_INT 0
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 0
48047: PUSH
48048: LD_INT 1
48050: NEG
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 1
48058: PUSH
48059: LD_INT 0
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 1
48068: PUSH
48069: LD_INT 1
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 0
48078: PUSH
48079: LD_INT 1
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 1
48088: NEG
48089: PUSH
48090: LD_INT 0
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 1
48099: NEG
48100: PUSH
48101: LD_INT 1
48103: NEG
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 1
48111: NEG
48112: PUSH
48113: LD_INT 2
48115: NEG
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 0
48123: PUSH
48124: LD_INT 2
48126: NEG
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 1
48134: PUSH
48135: LD_INT 1
48137: NEG
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 2
48145: PUSH
48146: LD_INT 0
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 2
48155: PUSH
48156: LD_INT 1
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 2
48165: PUSH
48166: LD_INT 2
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 1
48175: PUSH
48176: LD_INT 2
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 0
48185: PUSH
48186: LD_INT 2
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 1
48195: NEG
48196: PUSH
48197: LD_INT 1
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 2
48206: NEG
48207: PUSH
48208: LD_INT 0
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 2
48217: NEG
48218: PUSH
48219: LD_INT 1
48221: NEG
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 2
48229: NEG
48230: PUSH
48231: LD_INT 2
48233: NEG
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48260: LD_ADDR_VAR 0 58
48264: PUSH
48265: LD_INT 0
48267: PUSH
48268: LD_INT 0
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 0
48277: PUSH
48278: LD_INT 1
48280: NEG
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 1
48288: PUSH
48289: LD_INT 0
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 1
48298: PUSH
48299: LD_INT 1
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 0
48308: PUSH
48309: LD_INT 1
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 1
48318: NEG
48319: PUSH
48320: LD_INT 0
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 1
48329: NEG
48330: PUSH
48331: LD_INT 1
48333: NEG
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 1
48341: NEG
48342: PUSH
48343: LD_INT 2
48345: NEG
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 0
48353: PUSH
48354: LD_INT 2
48356: NEG
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 1
48364: PUSH
48365: LD_INT 1
48367: NEG
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 2
48375: PUSH
48376: LD_INT 0
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 2
48385: PUSH
48386: LD_INT 1
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 2
48395: PUSH
48396: LD_INT 2
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 1
48405: PUSH
48406: LD_INT 2
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: LD_INT 2
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 1
48425: NEG
48426: PUSH
48427: LD_INT 1
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 2
48436: NEG
48437: PUSH
48438: LD_INT 0
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 2
48447: NEG
48448: PUSH
48449: LD_INT 1
48451: NEG
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 2
48459: NEG
48460: PUSH
48461: LD_INT 2
48463: NEG
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48490: LD_ADDR_VAR 0 59
48494: PUSH
48495: LD_INT 0
48497: PUSH
48498: LD_INT 0
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 0
48507: PUSH
48508: LD_INT 1
48510: NEG
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 1
48518: PUSH
48519: LD_INT 0
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 1
48528: PUSH
48529: LD_INT 1
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 0
48538: PUSH
48539: LD_INT 1
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 1
48548: NEG
48549: PUSH
48550: LD_INT 0
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 1
48559: NEG
48560: PUSH
48561: LD_INT 1
48563: NEG
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48578: LD_ADDR_VAR 0 60
48582: PUSH
48583: LD_INT 0
48585: PUSH
48586: LD_INT 0
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 0
48595: PUSH
48596: LD_INT 1
48598: NEG
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 1
48606: PUSH
48607: LD_INT 0
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 1
48616: PUSH
48617: LD_INT 1
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 0
48626: PUSH
48627: LD_INT 1
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 1
48636: NEG
48637: PUSH
48638: LD_INT 0
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 1
48647: NEG
48648: PUSH
48649: LD_INT 1
48651: NEG
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48666: LD_ADDR_VAR 0 61
48670: PUSH
48671: LD_INT 0
48673: PUSH
48674: LD_INT 0
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 0
48683: PUSH
48684: LD_INT 1
48686: NEG
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 1
48694: PUSH
48695: LD_INT 0
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 1
48704: PUSH
48705: LD_INT 1
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 0
48714: PUSH
48715: LD_INT 1
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 1
48724: NEG
48725: PUSH
48726: LD_INT 0
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 1
48735: NEG
48736: PUSH
48737: LD_INT 1
48739: NEG
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48754: LD_ADDR_VAR 0 62
48758: PUSH
48759: LD_INT 0
48761: PUSH
48762: LD_INT 0
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 0
48771: PUSH
48772: LD_INT 1
48774: NEG
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 1
48782: PUSH
48783: LD_INT 0
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 1
48792: PUSH
48793: LD_INT 1
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 0
48802: PUSH
48803: LD_INT 1
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 1
48812: NEG
48813: PUSH
48814: LD_INT 0
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 1
48823: NEG
48824: PUSH
48825: LD_INT 1
48827: NEG
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48842: LD_ADDR_VAR 0 63
48846: PUSH
48847: LD_INT 0
48849: PUSH
48850: LD_INT 0
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 0
48859: PUSH
48860: LD_INT 1
48862: NEG
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 1
48870: PUSH
48871: LD_INT 0
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 1
48880: PUSH
48881: LD_INT 1
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 0
48890: PUSH
48891: LD_INT 1
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 1
48900: NEG
48901: PUSH
48902: LD_INT 0
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 1
48911: NEG
48912: PUSH
48913: LD_INT 1
48915: NEG
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48930: LD_ADDR_VAR 0 64
48934: PUSH
48935: LD_INT 0
48937: PUSH
48938: LD_INT 0
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: LD_INT 1
48950: NEG
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 1
48958: PUSH
48959: LD_INT 0
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 1
48968: PUSH
48969: LD_INT 1
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 0
48978: PUSH
48979: LD_INT 1
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 1
48988: NEG
48989: PUSH
48990: LD_INT 0
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 1
48999: NEG
49000: PUSH
49001: LD_INT 1
49003: NEG
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: ST_TO_ADDR
// end ; 1 :
49018: GO 54915
49020: LD_INT 1
49022: DOUBLE
49023: EQUAL
49024: IFTRUE 49028
49026: GO 51651
49028: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49029: LD_ADDR_VAR 0 11
49033: PUSH
49034: LD_INT 1
49036: NEG
49037: PUSH
49038: LD_INT 3
49040: NEG
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 0
49048: PUSH
49049: LD_INT 3
49051: NEG
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 1
49059: PUSH
49060: LD_INT 2
49062: NEG
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: LIST
49072: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49073: LD_ADDR_VAR 0 12
49077: PUSH
49078: LD_INT 2
49080: PUSH
49081: LD_INT 1
49083: NEG
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 3
49091: PUSH
49092: LD_INT 0
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 3
49101: PUSH
49102: LD_INT 1
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: LIST
49113: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49114: LD_ADDR_VAR 0 13
49118: PUSH
49119: LD_INT 3
49121: PUSH
49122: LD_INT 2
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 3
49131: PUSH
49132: LD_INT 3
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 2
49141: PUSH
49142: LD_INT 3
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: LIST
49153: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49154: LD_ADDR_VAR 0 14
49158: PUSH
49159: LD_INT 1
49161: PUSH
49162: LD_INT 3
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 0
49171: PUSH
49172: LD_INT 3
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 1
49181: NEG
49182: PUSH
49183: LD_INT 2
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: LIST
49194: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49195: LD_ADDR_VAR 0 15
49199: PUSH
49200: LD_INT 2
49202: NEG
49203: PUSH
49204: LD_INT 1
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 3
49213: NEG
49214: PUSH
49215: LD_INT 0
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 3
49224: NEG
49225: PUSH
49226: LD_INT 1
49228: NEG
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: LIST
49238: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49239: LD_ADDR_VAR 0 16
49243: PUSH
49244: LD_INT 2
49246: NEG
49247: PUSH
49248: LD_INT 3
49250: NEG
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 3
49258: NEG
49259: PUSH
49260: LD_INT 2
49262: NEG
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 3
49270: NEG
49271: PUSH
49272: LD_INT 3
49274: NEG
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: LIST
49284: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49285: LD_ADDR_VAR 0 17
49289: PUSH
49290: LD_INT 1
49292: NEG
49293: PUSH
49294: LD_INT 3
49296: NEG
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 0
49304: PUSH
49305: LD_INT 3
49307: NEG
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 1
49315: PUSH
49316: LD_INT 2
49318: NEG
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: LIST
49328: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49329: LD_ADDR_VAR 0 18
49333: PUSH
49334: LD_INT 2
49336: PUSH
49337: LD_INT 1
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 3
49347: PUSH
49348: LD_INT 0
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 3
49357: PUSH
49358: LD_INT 1
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: LIST
49369: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49370: LD_ADDR_VAR 0 19
49374: PUSH
49375: LD_INT 3
49377: PUSH
49378: LD_INT 2
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 3
49387: PUSH
49388: LD_INT 3
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 2
49397: PUSH
49398: LD_INT 3
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: LIST
49409: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49410: LD_ADDR_VAR 0 20
49414: PUSH
49415: LD_INT 1
49417: PUSH
49418: LD_INT 3
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 0
49427: PUSH
49428: LD_INT 3
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 1
49437: NEG
49438: PUSH
49439: LD_INT 2
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: LIST
49450: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49451: LD_ADDR_VAR 0 21
49455: PUSH
49456: LD_INT 2
49458: NEG
49459: PUSH
49460: LD_INT 1
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 3
49469: NEG
49470: PUSH
49471: LD_INT 0
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 3
49480: NEG
49481: PUSH
49482: LD_INT 1
49484: NEG
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: LIST
49494: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49495: LD_ADDR_VAR 0 22
49499: PUSH
49500: LD_INT 2
49502: NEG
49503: PUSH
49504: LD_INT 3
49506: NEG
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 3
49514: NEG
49515: PUSH
49516: LD_INT 2
49518: NEG
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 3
49526: NEG
49527: PUSH
49528: LD_INT 3
49530: NEG
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: LIST
49540: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
49541: LD_ADDR_VAR 0 23
49545: PUSH
49546: LD_INT 0
49548: PUSH
49549: LD_INT 3
49551: NEG
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 1
49559: NEG
49560: PUSH
49561: LD_INT 4
49563: NEG
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 1
49571: PUSH
49572: LD_INT 3
49574: NEG
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: LIST
49584: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
49585: LD_ADDR_VAR 0 24
49589: PUSH
49590: LD_INT 3
49592: PUSH
49593: LD_INT 0
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 3
49602: PUSH
49603: LD_INT 1
49605: NEG
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 4
49613: PUSH
49614: LD_INT 1
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: LIST
49625: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
49626: LD_ADDR_VAR 0 25
49630: PUSH
49631: LD_INT 3
49633: PUSH
49634: LD_INT 3
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 4
49643: PUSH
49644: LD_INT 3
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 3
49653: PUSH
49654: LD_INT 4
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: LIST
49665: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
49666: LD_ADDR_VAR 0 26
49670: PUSH
49671: LD_INT 0
49673: PUSH
49674: LD_INT 3
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 1
49683: PUSH
49684: LD_INT 4
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 1
49693: NEG
49694: PUSH
49695: LD_INT 3
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: LIST
49706: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
49707: LD_ADDR_VAR 0 27
49711: PUSH
49712: LD_INT 3
49714: NEG
49715: PUSH
49716: LD_INT 0
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 3
49725: NEG
49726: PUSH
49727: LD_INT 1
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 4
49736: NEG
49737: PUSH
49738: LD_INT 1
49740: NEG
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: LIST
49750: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
49751: LD_ADDR_VAR 0 28
49755: PUSH
49756: LD_INT 3
49758: NEG
49759: PUSH
49760: LD_INT 3
49762: NEG
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 3
49770: NEG
49771: PUSH
49772: LD_INT 4
49774: NEG
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 4
49782: NEG
49783: PUSH
49784: LD_INT 3
49786: NEG
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: LIST
49796: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
49797: LD_ADDR_VAR 0 29
49801: PUSH
49802: LD_INT 1
49804: NEG
49805: PUSH
49806: LD_INT 3
49808: NEG
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 0
49816: PUSH
49817: LD_INT 3
49819: NEG
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 1
49827: PUSH
49828: LD_INT 2
49830: NEG
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 1
49838: NEG
49839: PUSH
49840: LD_INT 4
49842: NEG
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 0
49850: PUSH
49851: LD_INT 4
49853: NEG
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 1
49861: PUSH
49862: LD_INT 3
49864: NEG
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 1
49872: NEG
49873: PUSH
49874: LD_INT 5
49876: NEG
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 0
49884: PUSH
49885: LD_INT 5
49887: NEG
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 1
49895: PUSH
49896: LD_INT 4
49898: NEG
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 1
49906: NEG
49907: PUSH
49908: LD_INT 6
49910: NEG
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 0
49918: PUSH
49919: LD_INT 6
49921: NEG
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 1
49929: PUSH
49930: LD_INT 5
49932: NEG
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
49952: LD_ADDR_VAR 0 30
49956: PUSH
49957: LD_INT 2
49959: PUSH
49960: LD_INT 1
49962: NEG
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 3
49970: PUSH
49971: LD_INT 0
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 3
49980: PUSH
49981: LD_INT 1
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 3
49990: PUSH
49991: LD_INT 1
49993: NEG
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 4
50001: PUSH
50002: LD_INT 0
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 4
50011: PUSH
50012: LD_INT 1
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 4
50021: PUSH
50022: LD_INT 1
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 5
50032: PUSH
50033: LD_INT 0
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 5
50042: PUSH
50043: LD_INT 1
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 5
50052: PUSH
50053: LD_INT 1
50055: NEG
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 6
50063: PUSH
50064: LD_INT 0
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 6
50073: PUSH
50074: LD_INT 1
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
50095: LD_ADDR_VAR 0 31
50099: PUSH
50100: LD_INT 3
50102: PUSH
50103: LD_INT 2
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 3
50112: PUSH
50113: LD_INT 3
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 2
50122: PUSH
50123: LD_INT 3
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 4
50132: PUSH
50133: LD_INT 3
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 4
50142: PUSH
50143: LD_INT 4
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 3
50152: PUSH
50153: LD_INT 4
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 5
50162: PUSH
50163: LD_INT 4
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 5
50172: PUSH
50173: LD_INT 5
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 4
50182: PUSH
50183: LD_INT 5
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 6
50192: PUSH
50193: LD_INT 5
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 6
50202: PUSH
50203: LD_INT 6
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 5
50212: PUSH
50213: LD_INT 6
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
50234: LD_ADDR_VAR 0 32
50238: PUSH
50239: LD_INT 1
50241: PUSH
50242: LD_INT 3
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 0
50251: PUSH
50252: LD_INT 3
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 1
50261: NEG
50262: PUSH
50263: LD_INT 2
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 1
50272: PUSH
50273: LD_INT 4
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 0
50282: PUSH
50283: LD_INT 4
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 1
50292: NEG
50293: PUSH
50294: LD_INT 3
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 1
50303: PUSH
50304: LD_INT 5
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 0
50313: PUSH
50314: LD_INT 5
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 1
50323: NEG
50324: PUSH
50325: LD_INT 4
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 1
50334: PUSH
50335: LD_INT 6
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 0
50344: PUSH
50345: LD_INT 6
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 1
50354: NEG
50355: PUSH
50356: LD_INT 5
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50377: LD_ADDR_VAR 0 33
50381: PUSH
50382: LD_INT 2
50384: NEG
50385: PUSH
50386: LD_INT 1
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 3
50395: NEG
50396: PUSH
50397: LD_INT 0
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 3
50406: NEG
50407: PUSH
50408: LD_INT 1
50410: NEG
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 3
50418: NEG
50419: PUSH
50420: LD_INT 1
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 4
50429: NEG
50430: PUSH
50431: LD_INT 0
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 4
50440: NEG
50441: PUSH
50442: LD_INT 1
50444: NEG
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 4
50452: NEG
50453: PUSH
50454: LD_INT 1
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 5
50463: NEG
50464: PUSH
50465: LD_INT 0
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 5
50474: NEG
50475: PUSH
50476: LD_INT 1
50478: NEG
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 5
50486: NEG
50487: PUSH
50488: LD_INT 1
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 6
50497: NEG
50498: PUSH
50499: LD_INT 0
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 6
50508: NEG
50509: PUSH
50510: LD_INT 1
50512: NEG
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
50532: LD_ADDR_VAR 0 34
50536: PUSH
50537: LD_INT 2
50539: NEG
50540: PUSH
50541: LD_INT 3
50543: NEG
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 3
50551: NEG
50552: PUSH
50553: LD_INT 2
50555: NEG
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 3
50563: NEG
50564: PUSH
50565: LD_INT 3
50567: NEG
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 3
50575: NEG
50576: PUSH
50577: LD_INT 4
50579: NEG
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 4
50587: NEG
50588: PUSH
50589: LD_INT 3
50591: NEG
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 4
50599: NEG
50600: PUSH
50601: LD_INT 4
50603: NEG
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 4
50611: NEG
50612: PUSH
50613: LD_INT 5
50615: NEG
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 5
50623: NEG
50624: PUSH
50625: LD_INT 4
50627: NEG
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 5
50635: NEG
50636: PUSH
50637: LD_INT 5
50639: NEG
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 5
50647: NEG
50648: PUSH
50649: LD_INT 6
50651: NEG
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 6
50659: NEG
50660: PUSH
50661: LD_INT 5
50663: NEG
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 6
50671: NEG
50672: PUSH
50673: LD_INT 6
50675: NEG
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
50695: LD_ADDR_VAR 0 41
50699: PUSH
50700: LD_INT 0
50702: PUSH
50703: LD_INT 2
50705: NEG
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 1
50713: NEG
50714: PUSH
50715: LD_INT 3
50717: NEG
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 1
50725: PUSH
50726: LD_INT 2
50728: NEG
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: LIST
50738: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
50739: LD_ADDR_VAR 0 42
50743: PUSH
50744: LD_INT 2
50746: PUSH
50747: LD_INT 0
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 2
50756: PUSH
50757: LD_INT 1
50759: NEG
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 3
50767: PUSH
50768: LD_INT 1
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: LIST
50779: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
50780: LD_ADDR_VAR 0 43
50784: PUSH
50785: LD_INT 2
50787: PUSH
50788: LD_INT 2
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 3
50797: PUSH
50798: LD_INT 2
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 2
50807: PUSH
50808: LD_INT 3
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: LIST
50819: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
50820: LD_ADDR_VAR 0 44
50824: PUSH
50825: LD_INT 0
50827: PUSH
50828: LD_INT 2
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 1
50837: PUSH
50838: LD_INT 3
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 1
50847: NEG
50848: PUSH
50849: LD_INT 2
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: LIST
50860: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50861: LD_ADDR_VAR 0 45
50865: PUSH
50866: LD_INT 2
50868: NEG
50869: PUSH
50870: LD_INT 0
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 2
50879: NEG
50880: PUSH
50881: LD_INT 1
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 3
50890: NEG
50891: PUSH
50892: LD_INT 1
50894: NEG
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: LIST
50904: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
50905: LD_ADDR_VAR 0 46
50909: PUSH
50910: LD_INT 2
50912: NEG
50913: PUSH
50914: LD_INT 2
50916: NEG
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 2
50924: NEG
50925: PUSH
50926: LD_INT 3
50928: NEG
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 3
50936: NEG
50937: PUSH
50938: LD_INT 2
50940: NEG
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: LIST
50950: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
50951: LD_ADDR_VAR 0 47
50955: PUSH
50956: LD_INT 2
50958: NEG
50959: PUSH
50960: LD_INT 3
50962: NEG
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 1
50970: NEG
50971: PUSH
50972: LD_INT 3
50974: NEG
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50984: LD_ADDR_VAR 0 48
50988: PUSH
50989: LD_INT 1
50991: PUSH
50992: LD_INT 2
50994: NEG
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 2
51002: PUSH
51003: LD_INT 1
51005: NEG
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
51015: LD_ADDR_VAR 0 49
51019: PUSH
51020: LD_INT 3
51022: PUSH
51023: LD_INT 1
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 3
51032: PUSH
51033: LD_INT 2
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
51044: LD_ADDR_VAR 0 50
51048: PUSH
51049: LD_INT 2
51051: PUSH
51052: LD_INT 3
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 1
51061: PUSH
51062: LD_INT 3
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51073: LD_ADDR_VAR 0 51
51077: PUSH
51078: LD_INT 1
51080: NEG
51081: PUSH
51082: LD_INT 2
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 2
51091: NEG
51092: PUSH
51093: LD_INT 1
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51104: LD_ADDR_VAR 0 52
51108: PUSH
51109: LD_INT 3
51111: NEG
51112: PUSH
51113: LD_INT 1
51115: NEG
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 3
51123: NEG
51124: PUSH
51125: LD_INT 2
51127: NEG
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51137: LD_ADDR_VAR 0 53
51141: PUSH
51142: LD_INT 1
51144: NEG
51145: PUSH
51146: LD_INT 3
51148: NEG
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 0
51156: PUSH
51157: LD_INT 3
51159: NEG
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 1
51167: PUSH
51168: LD_INT 2
51170: NEG
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: LIST
51180: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51181: LD_ADDR_VAR 0 54
51185: PUSH
51186: LD_INT 2
51188: PUSH
51189: LD_INT 1
51191: NEG
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 3
51199: PUSH
51200: LD_INT 0
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 3
51209: PUSH
51210: LD_INT 1
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: LIST
51221: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51222: LD_ADDR_VAR 0 55
51226: PUSH
51227: LD_INT 3
51229: PUSH
51230: LD_INT 2
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 3
51239: PUSH
51240: LD_INT 3
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 2
51249: PUSH
51250: LD_INT 3
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: LIST
51261: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51262: LD_ADDR_VAR 0 56
51266: PUSH
51267: LD_INT 1
51269: PUSH
51270: LD_INT 3
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 0
51279: PUSH
51280: LD_INT 3
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 1
51289: NEG
51290: PUSH
51291: LD_INT 2
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: LIST
51302: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51303: LD_ADDR_VAR 0 57
51307: PUSH
51308: LD_INT 2
51310: NEG
51311: PUSH
51312: LD_INT 1
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 3
51321: NEG
51322: PUSH
51323: LD_INT 0
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 3
51332: NEG
51333: PUSH
51334: LD_INT 1
51336: NEG
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: LIST
51346: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51347: LD_ADDR_VAR 0 58
51351: PUSH
51352: LD_INT 2
51354: NEG
51355: PUSH
51356: LD_INT 3
51358: NEG
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 3
51366: NEG
51367: PUSH
51368: LD_INT 2
51370: NEG
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 3
51378: NEG
51379: PUSH
51380: LD_INT 3
51382: NEG
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: LIST
51392: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51393: LD_ADDR_VAR 0 59
51397: PUSH
51398: LD_INT 1
51400: NEG
51401: PUSH
51402: LD_INT 2
51404: NEG
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 0
51412: PUSH
51413: LD_INT 2
51415: NEG
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 1
51423: PUSH
51424: LD_INT 1
51426: NEG
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: LIST
51436: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51437: LD_ADDR_VAR 0 60
51441: PUSH
51442: LD_INT 1
51444: PUSH
51445: LD_INT 1
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 2
51455: PUSH
51456: LD_INT 0
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 2
51465: PUSH
51466: LD_INT 1
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: LIST
51477: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51478: LD_ADDR_VAR 0 61
51482: PUSH
51483: LD_INT 2
51485: PUSH
51486: LD_INT 1
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 2
51495: PUSH
51496: LD_INT 2
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 1
51505: PUSH
51506: LD_INT 2
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: LIST
51517: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51518: LD_ADDR_VAR 0 62
51522: PUSH
51523: LD_INT 1
51525: PUSH
51526: LD_INT 2
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 0
51535: PUSH
51536: LD_INT 2
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 1
51545: NEG
51546: PUSH
51547: LD_INT 1
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: LIST
51558: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51559: LD_ADDR_VAR 0 63
51563: PUSH
51564: LD_INT 1
51566: NEG
51567: PUSH
51568: LD_INT 1
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 2
51577: NEG
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 2
51588: NEG
51589: PUSH
51590: LD_INT 1
51592: NEG
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: LIST
51602: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51603: LD_ADDR_VAR 0 64
51607: PUSH
51608: LD_INT 1
51610: NEG
51611: PUSH
51612: LD_INT 2
51614: NEG
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 2
51622: NEG
51623: PUSH
51624: LD_INT 1
51626: NEG
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 2
51634: NEG
51635: PUSH
51636: LD_INT 2
51638: NEG
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: LIST
51648: ST_TO_ADDR
// end ; 2 :
51649: GO 54915
51651: LD_INT 2
51653: DOUBLE
51654: EQUAL
51655: IFTRUE 51659
51657: GO 54914
51659: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
51660: LD_ADDR_VAR 0 29
51664: PUSH
51665: LD_INT 4
51667: PUSH
51668: LD_INT 0
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 4
51677: PUSH
51678: LD_INT 1
51680: NEG
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 5
51688: PUSH
51689: LD_INT 0
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 5
51698: PUSH
51699: LD_INT 1
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 4
51708: PUSH
51709: LD_INT 1
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 3
51718: PUSH
51719: LD_INT 0
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 3
51728: PUSH
51729: LD_INT 1
51731: NEG
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 3
51739: PUSH
51740: LD_INT 2
51742: NEG
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 5
51750: PUSH
51751: LD_INT 2
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 3
51760: PUSH
51761: LD_INT 3
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 3
51770: PUSH
51771: LD_INT 2
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 4
51780: PUSH
51781: LD_INT 3
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 4
51790: PUSH
51791: LD_INT 4
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 3
51800: PUSH
51801: LD_INT 4
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 2
51810: PUSH
51811: LD_INT 3
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 2
51820: PUSH
51821: LD_INT 2
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 4
51830: PUSH
51831: LD_INT 2
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 2
51840: PUSH
51841: LD_INT 4
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 0
51850: PUSH
51851: LD_INT 4
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 0
51860: PUSH
51861: LD_INT 3
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 1
51870: PUSH
51871: LD_INT 4
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 1
51880: PUSH
51881: LD_INT 5
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 0
51890: PUSH
51891: LD_INT 5
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 1
51900: NEG
51901: PUSH
51902: LD_INT 4
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 1
51911: NEG
51912: PUSH
51913: LD_INT 3
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 2
51922: PUSH
51923: LD_INT 5
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 2
51932: NEG
51933: PUSH
51934: LD_INT 3
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 3
51943: NEG
51944: PUSH
51945: LD_INT 0
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 3
51954: NEG
51955: PUSH
51956: LD_INT 1
51958: NEG
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 2
51966: NEG
51967: PUSH
51968: LD_INT 0
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 2
51977: NEG
51978: PUSH
51979: LD_INT 1
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 3
51988: NEG
51989: PUSH
51990: LD_INT 1
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 4
51999: NEG
52000: PUSH
52001: LD_INT 0
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 4
52010: NEG
52011: PUSH
52012: LD_INT 1
52014: NEG
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 4
52022: NEG
52023: PUSH
52024: LD_INT 2
52026: NEG
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 2
52034: NEG
52035: PUSH
52036: LD_INT 2
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 4
52045: NEG
52046: PUSH
52047: LD_INT 4
52049: NEG
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 4
52057: NEG
52058: PUSH
52059: LD_INT 5
52061: NEG
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 3
52069: NEG
52070: PUSH
52071: LD_INT 4
52073: NEG
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 3
52081: NEG
52082: PUSH
52083: LD_INT 3
52085: NEG
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 4
52093: NEG
52094: PUSH
52095: LD_INT 3
52097: NEG
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 5
52105: NEG
52106: PUSH
52107: LD_INT 4
52109: NEG
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 5
52117: NEG
52118: PUSH
52119: LD_INT 5
52121: NEG
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 3
52129: NEG
52130: PUSH
52131: LD_INT 5
52133: NEG
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 5
52141: NEG
52142: PUSH
52143: LD_INT 3
52145: NEG
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
52198: LD_ADDR_VAR 0 30
52202: PUSH
52203: LD_INT 4
52205: PUSH
52206: LD_INT 4
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 4
52215: PUSH
52216: LD_INT 3
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 5
52225: PUSH
52226: LD_INT 4
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 5
52235: PUSH
52236: LD_INT 5
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 4
52245: PUSH
52246: LD_INT 5
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 3
52255: PUSH
52256: LD_INT 4
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 3
52265: PUSH
52266: LD_INT 3
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 5
52275: PUSH
52276: LD_INT 3
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 3
52285: PUSH
52286: LD_INT 5
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 0
52295: PUSH
52296: LD_INT 3
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 0
52305: PUSH
52306: LD_INT 2
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 1
52315: PUSH
52316: LD_INT 3
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 1
52325: PUSH
52326: LD_INT 4
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 0
52335: PUSH
52336: LD_INT 4
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 1
52345: NEG
52346: PUSH
52347: LD_INT 3
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 1
52356: NEG
52357: PUSH
52358: LD_INT 2
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 2
52367: PUSH
52368: LD_INT 4
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 2
52377: NEG
52378: PUSH
52379: LD_INT 2
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 4
52388: NEG
52389: PUSH
52390: LD_INT 0
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 4
52399: NEG
52400: PUSH
52401: LD_INT 1
52403: NEG
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 3
52411: NEG
52412: PUSH
52413: LD_INT 0
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 3
52422: NEG
52423: PUSH
52424: LD_INT 1
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 4
52433: NEG
52434: PUSH
52435: LD_INT 1
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 5
52444: NEG
52445: PUSH
52446: LD_INT 0
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 5
52455: NEG
52456: PUSH
52457: LD_INT 1
52459: NEG
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 5
52467: NEG
52468: PUSH
52469: LD_INT 2
52471: NEG
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 3
52479: NEG
52480: PUSH
52481: LD_INT 2
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 3
52490: NEG
52491: PUSH
52492: LD_INT 3
52494: NEG
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 3
52502: NEG
52503: PUSH
52504: LD_INT 4
52506: NEG
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 2
52514: NEG
52515: PUSH
52516: LD_INT 3
52518: NEG
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 2
52526: NEG
52527: PUSH
52528: LD_INT 2
52530: NEG
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 3
52538: NEG
52539: PUSH
52540: LD_INT 2
52542: NEG
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 4
52550: NEG
52551: PUSH
52552: LD_INT 3
52554: NEG
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 4
52562: NEG
52563: PUSH
52564: LD_INT 4
52566: NEG
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 2
52574: NEG
52575: PUSH
52576: LD_INT 4
52578: NEG
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 4
52586: NEG
52587: PUSH
52588: LD_INT 2
52590: NEG
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 0
52598: PUSH
52599: LD_INT 4
52601: NEG
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 0
52609: PUSH
52610: LD_INT 5
52612: NEG
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 1
52620: PUSH
52621: LD_INT 4
52623: NEG
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 1
52631: PUSH
52632: LD_INT 3
52634: NEG
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 0
52642: PUSH
52643: LD_INT 3
52645: NEG
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 1
52653: NEG
52654: PUSH
52655: LD_INT 4
52657: NEG
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 1
52665: NEG
52666: PUSH
52667: LD_INT 5
52669: NEG
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 2
52677: PUSH
52678: LD_INT 3
52680: NEG
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 2
52688: NEG
52689: PUSH
52690: LD_INT 5
52692: NEG
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
52745: LD_ADDR_VAR 0 31
52749: PUSH
52750: LD_INT 0
52752: PUSH
52753: LD_INT 4
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 0
52762: PUSH
52763: LD_INT 3
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 1
52772: PUSH
52773: LD_INT 4
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 1
52782: PUSH
52783: LD_INT 5
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 0
52792: PUSH
52793: LD_INT 5
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 1
52802: NEG
52803: PUSH
52804: LD_INT 4
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 1
52813: NEG
52814: PUSH
52815: LD_INT 3
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 2
52824: PUSH
52825: LD_INT 5
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 2
52834: NEG
52835: PUSH
52836: LD_INT 3
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 3
52845: NEG
52846: PUSH
52847: LD_INT 0
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 3
52856: NEG
52857: PUSH
52858: LD_INT 1
52860: NEG
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 2
52868: NEG
52869: PUSH
52870: LD_INT 0
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 2
52879: NEG
52880: PUSH
52881: LD_INT 1
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 3
52890: NEG
52891: PUSH
52892: LD_INT 1
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 4
52901: NEG
52902: PUSH
52903: LD_INT 0
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 4
52912: NEG
52913: PUSH
52914: LD_INT 1
52916: NEG
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 4
52924: NEG
52925: PUSH
52926: LD_INT 2
52928: NEG
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 2
52936: NEG
52937: PUSH
52938: LD_INT 2
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 4
52947: NEG
52948: PUSH
52949: LD_INT 4
52951: NEG
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 4
52959: NEG
52960: PUSH
52961: LD_INT 5
52963: NEG
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 3
52971: NEG
52972: PUSH
52973: LD_INT 4
52975: NEG
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 3
52983: NEG
52984: PUSH
52985: LD_INT 3
52987: NEG
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 4
52995: NEG
52996: PUSH
52997: LD_INT 3
52999: NEG
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 5
53007: NEG
53008: PUSH
53009: LD_INT 4
53011: NEG
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 5
53019: NEG
53020: PUSH
53021: LD_INT 5
53023: NEG
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 3
53031: NEG
53032: PUSH
53033: LD_INT 5
53035: NEG
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 5
53043: NEG
53044: PUSH
53045: LD_INT 3
53047: NEG
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 0
53055: PUSH
53056: LD_INT 3
53058: NEG
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 0
53066: PUSH
53067: LD_INT 4
53069: NEG
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 1
53077: PUSH
53078: LD_INT 3
53080: NEG
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 1
53088: PUSH
53089: LD_INT 2
53091: NEG
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 0
53099: PUSH
53100: LD_INT 2
53102: NEG
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 1
53110: NEG
53111: PUSH
53112: LD_INT 3
53114: NEG
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 1
53122: NEG
53123: PUSH
53124: LD_INT 4
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 2
53134: PUSH
53135: LD_INT 2
53137: NEG
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 2
53145: NEG
53146: PUSH
53147: LD_INT 4
53149: NEG
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 4
53157: PUSH
53158: LD_INT 0
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 4
53167: PUSH
53168: LD_INT 1
53170: NEG
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 5
53178: PUSH
53179: LD_INT 0
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 5
53188: PUSH
53189: LD_INT 1
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: LD_INT 4
53198: PUSH
53199: LD_INT 1
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 3
53208: PUSH
53209: LD_INT 0
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 3
53218: PUSH
53219: LD_INT 1
53221: NEG
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 3
53229: PUSH
53230: LD_INT 2
53232: NEG
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 5
53240: PUSH
53241: LD_INT 2
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
53295: LD_ADDR_VAR 0 32
53299: PUSH
53300: LD_INT 4
53302: NEG
53303: PUSH
53304: LD_INT 0
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 4
53313: NEG
53314: PUSH
53315: LD_INT 1
53317: NEG
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 3
53325: NEG
53326: PUSH
53327: LD_INT 0
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 3
53336: NEG
53337: PUSH
53338: LD_INT 1
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 4
53347: NEG
53348: PUSH
53349: LD_INT 1
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 5
53358: NEG
53359: PUSH
53360: LD_INT 0
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 5
53369: NEG
53370: PUSH
53371: LD_INT 1
53373: NEG
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 5
53381: NEG
53382: PUSH
53383: LD_INT 2
53385: NEG
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 3
53393: NEG
53394: PUSH
53395: LD_INT 2
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 3
53404: NEG
53405: PUSH
53406: LD_INT 3
53408: NEG
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 3
53416: NEG
53417: PUSH
53418: LD_INT 4
53420: NEG
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 2
53428: NEG
53429: PUSH
53430: LD_INT 3
53432: NEG
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 2
53440: NEG
53441: PUSH
53442: LD_INT 2
53444: NEG
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 3
53452: NEG
53453: PUSH
53454: LD_INT 2
53456: NEG
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 4
53464: NEG
53465: PUSH
53466: LD_INT 3
53468: NEG
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 4
53476: NEG
53477: PUSH
53478: LD_INT 4
53480: NEG
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 2
53488: NEG
53489: PUSH
53490: LD_INT 4
53492: NEG
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 4
53500: NEG
53501: PUSH
53502: LD_INT 2
53504: NEG
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 0
53512: PUSH
53513: LD_INT 4
53515: NEG
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 0
53523: PUSH
53524: LD_INT 5
53526: NEG
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 1
53534: PUSH
53535: LD_INT 4
53537: NEG
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 1
53545: PUSH
53546: LD_INT 3
53548: NEG
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 0
53556: PUSH
53557: LD_INT 3
53559: NEG
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 1
53567: NEG
53568: PUSH
53569: LD_INT 4
53571: NEG
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 1
53579: NEG
53580: PUSH
53581: LD_INT 5
53583: NEG
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 2
53591: PUSH
53592: LD_INT 3
53594: NEG
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 2
53602: NEG
53603: PUSH
53604: LD_INT 5
53606: NEG
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 3
53614: PUSH
53615: LD_INT 0
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 3
53624: PUSH
53625: LD_INT 1
53627: NEG
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 4
53635: PUSH
53636: LD_INT 0
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 4
53645: PUSH
53646: LD_INT 1
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 3
53655: PUSH
53656: LD_INT 1
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 2
53665: PUSH
53666: LD_INT 0
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 2
53675: PUSH
53676: LD_INT 1
53678: NEG
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 2
53686: PUSH
53687: LD_INT 2
53689: NEG
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 4
53697: PUSH
53698: LD_INT 2
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 4
53707: PUSH
53708: LD_INT 4
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 4
53717: PUSH
53718: LD_INT 3
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 5
53727: PUSH
53728: LD_INT 4
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 5
53737: PUSH
53738: LD_INT 5
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 4
53747: PUSH
53748: LD_INT 5
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 3
53757: PUSH
53758: LD_INT 4
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 3
53767: PUSH
53768: LD_INT 3
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 5
53777: PUSH
53778: LD_INT 3
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 3
53787: PUSH
53788: LD_INT 5
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
53842: LD_ADDR_VAR 0 33
53846: PUSH
53847: LD_INT 4
53849: NEG
53850: PUSH
53851: LD_INT 4
53853: NEG
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 4
53861: NEG
53862: PUSH
53863: LD_INT 5
53865: NEG
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 3
53873: NEG
53874: PUSH
53875: LD_INT 4
53877: NEG
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 3
53885: NEG
53886: PUSH
53887: LD_INT 3
53889: NEG
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 4
53897: NEG
53898: PUSH
53899: LD_INT 3
53901: NEG
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 5
53909: NEG
53910: PUSH
53911: LD_INT 4
53913: NEG
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 5
53921: NEG
53922: PUSH
53923: LD_INT 5
53925: NEG
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 3
53933: NEG
53934: PUSH
53935: LD_INT 5
53937: NEG
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 5
53945: NEG
53946: PUSH
53947: LD_INT 3
53949: NEG
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 0
53957: PUSH
53958: LD_INT 3
53960: NEG
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 0
53968: PUSH
53969: LD_INT 4
53971: NEG
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 1
53979: PUSH
53980: LD_INT 3
53982: NEG
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 1
53990: PUSH
53991: LD_INT 2
53993: NEG
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 0
54001: PUSH
54002: LD_INT 2
54004: NEG
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 1
54012: NEG
54013: PUSH
54014: LD_INT 3
54016: NEG
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 1
54024: NEG
54025: PUSH
54026: LD_INT 4
54028: NEG
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 2
54036: PUSH
54037: LD_INT 2
54039: NEG
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 2
54047: NEG
54048: PUSH
54049: LD_INT 4
54051: NEG
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 4
54059: PUSH
54060: LD_INT 0
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 4
54069: PUSH
54070: LD_INT 1
54072: NEG
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 5
54080: PUSH
54081: LD_INT 0
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 5
54090: PUSH
54091: LD_INT 1
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 4
54100: PUSH
54101: LD_INT 1
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 3
54110: PUSH
54111: LD_INT 0
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 3
54120: PUSH
54121: LD_INT 1
54123: NEG
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 3
54131: PUSH
54132: LD_INT 2
54134: NEG
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 5
54142: PUSH
54143: LD_INT 2
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 3
54152: PUSH
54153: LD_INT 3
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 3
54162: PUSH
54163: LD_INT 2
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 4
54172: PUSH
54173: LD_INT 3
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 4
54182: PUSH
54183: LD_INT 4
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 3
54192: PUSH
54193: LD_INT 4
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 2
54202: PUSH
54203: LD_INT 3
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 2
54212: PUSH
54213: LD_INT 2
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 4
54222: PUSH
54223: LD_INT 2
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 2
54232: PUSH
54233: LD_INT 4
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 0
54242: PUSH
54243: LD_INT 4
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 0
54252: PUSH
54253: LD_INT 3
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 1
54262: PUSH
54263: LD_INT 4
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 1
54272: PUSH
54273: LD_INT 5
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 0
54282: PUSH
54283: LD_INT 5
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 1
54292: NEG
54293: PUSH
54294: LD_INT 4
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 1
54303: NEG
54304: PUSH
54305: LD_INT 3
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 2
54314: PUSH
54315: LD_INT 5
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 2
54324: NEG
54325: PUSH
54326: LD_INT 3
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54380: LD_ADDR_VAR 0 34
54384: PUSH
54385: LD_INT 0
54387: PUSH
54388: LD_INT 4
54390: NEG
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 0
54398: PUSH
54399: LD_INT 5
54401: NEG
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 1
54409: PUSH
54410: LD_INT 4
54412: NEG
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 1
54420: PUSH
54421: LD_INT 3
54423: NEG
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 0
54431: PUSH
54432: LD_INT 3
54434: NEG
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 1
54442: NEG
54443: PUSH
54444: LD_INT 4
54446: NEG
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 1
54454: NEG
54455: PUSH
54456: LD_INT 5
54458: NEG
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 2
54466: PUSH
54467: LD_INT 3
54469: NEG
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 2
54477: NEG
54478: PUSH
54479: LD_INT 5
54481: NEG
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 3
54489: PUSH
54490: LD_INT 0
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 3
54499: PUSH
54500: LD_INT 1
54502: NEG
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 4
54510: PUSH
54511: LD_INT 0
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 4
54520: PUSH
54521: LD_INT 1
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 3
54530: PUSH
54531: LD_INT 1
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 2
54540: PUSH
54541: LD_INT 0
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 2
54550: PUSH
54551: LD_INT 1
54553: NEG
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 2
54561: PUSH
54562: LD_INT 2
54564: NEG
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 4
54572: PUSH
54573: LD_INT 2
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 4
54582: PUSH
54583: LD_INT 4
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 4
54592: PUSH
54593: LD_INT 3
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 5
54602: PUSH
54603: LD_INT 4
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 5
54612: PUSH
54613: LD_INT 5
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 4
54622: PUSH
54623: LD_INT 5
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 3
54632: PUSH
54633: LD_INT 4
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 3
54642: PUSH
54643: LD_INT 3
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 5
54652: PUSH
54653: LD_INT 3
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 3
54662: PUSH
54663: LD_INT 5
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 0
54672: PUSH
54673: LD_INT 3
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 0
54682: PUSH
54683: LD_INT 2
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 1
54692: PUSH
54693: LD_INT 3
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 1
54702: PUSH
54703: LD_INT 4
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: LD_INT 4
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 1
54722: NEG
54723: PUSH
54724: LD_INT 3
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 1
54733: NEG
54734: PUSH
54735: LD_INT 2
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 2
54744: PUSH
54745: LD_INT 4
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 2
54754: NEG
54755: PUSH
54756: LD_INT 2
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 4
54765: NEG
54766: PUSH
54767: LD_INT 0
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 4
54776: NEG
54777: PUSH
54778: LD_INT 1
54780: NEG
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 3
54788: NEG
54789: PUSH
54790: LD_INT 0
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 3
54799: NEG
54800: PUSH
54801: LD_INT 1
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 4
54810: NEG
54811: PUSH
54812: LD_INT 1
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 5
54821: NEG
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 5
54832: NEG
54833: PUSH
54834: LD_INT 1
54836: NEG
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 5
54844: NEG
54845: PUSH
54846: LD_INT 2
54848: NEG
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 3
54856: NEG
54857: PUSH
54858: LD_INT 2
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: ST_TO_ADDR
// end ; end ;
54912: GO 54915
54914: POP
// case btype of b_depot , b_warehouse :
54915: LD_VAR 0 1
54919: PUSH
54920: LD_INT 0
54922: DOUBLE
54923: EQUAL
54924: IFTRUE 54934
54926: LD_INT 1
54928: DOUBLE
54929: EQUAL
54930: IFTRUE 54934
54932: GO 55135
54934: POP
// case nation of nation_american :
54935: LD_VAR 0 5
54939: PUSH
54940: LD_INT 1
54942: DOUBLE
54943: EQUAL
54944: IFTRUE 54948
54946: GO 55004
54948: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
54949: LD_ADDR_VAR 0 9
54953: PUSH
54954: LD_VAR 0 11
54958: PUSH
54959: LD_VAR 0 12
54963: PUSH
54964: LD_VAR 0 13
54968: PUSH
54969: LD_VAR 0 14
54973: PUSH
54974: LD_VAR 0 15
54978: PUSH
54979: LD_VAR 0 16
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: PUSH
54992: LD_VAR 0 4
54996: PUSH
54997: LD_INT 1
54999: PLUS
55000: ARRAY
55001: ST_TO_ADDR
55002: GO 55133
55004: LD_INT 2
55006: DOUBLE
55007: EQUAL
55008: IFTRUE 55012
55010: GO 55068
55012: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
55013: LD_ADDR_VAR 0 9
55017: PUSH
55018: LD_VAR 0 17
55022: PUSH
55023: LD_VAR 0 18
55027: PUSH
55028: LD_VAR 0 19
55032: PUSH
55033: LD_VAR 0 20
55037: PUSH
55038: LD_VAR 0 21
55042: PUSH
55043: LD_VAR 0 22
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: PUSH
55056: LD_VAR 0 4
55060: PUSH
55061: LD_INT 1
55063: PLUS
55064: ARRAY
55065: ST_TO_ADDR
55066: GO 55133
55068: LD_INT 3
55070: DOUBLE
55071: EQUAL
55072: IFTRUE 55076
55074: GO 55132
55076: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
55077: LD_ADDR_VAR 0 9
55081: PUSH
55082: LD_VAR 0 23
55086: PUSH
55087: LD_VAR 0 24
55091: PUSH
55092: LD_VAR 0 25
55096: PUSH
55097: LD_VAR 0 26
55101: PUSH
55102: LD_VAR 0 27
55106: PUSH
55107: LD_VAR 0 28
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: PUSH
55120: LD_VAR 0 4
55124: PUSH
55125: LD_INT 1
55127: PLUS
55128: ARRAY
55129: ST_TO_ADDR
55130: GO 55133
55132: POP
55133: GO 55688
55135: LD_INT 2
55137: DOUBLE
55138: EQUAL
55139: IFTRUE 55149
55141: LD_INT 3
55143: DOUBLE
55144: EQUAL
55145: IFTRUE 55149
55147: GO 55205
55149: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
55150: LD_ADDR_VAR 0 9
55154: PUSH
55155: LD_VAR 0 29
55159: PUSH
55160: LD_VAR 0 30
55164: PUSH
55165: LD_VAR 0 31
55169: PUSH
55170: LD_VAR 0 32
55174: PUSH
55175: LD_VAR 0 33
55179: PUSH
55180: LD_VAR 0 34
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: PUSH
55193: LD_VAR 0 4
55197: PUSH
55198: LD_INT 1
55200: PLUS
55201: ARRAY
55202: ST_TO_ADDR
55203: GO 55688
55205: LD_INT 16
55207: DOUBLE
55208: EQUAL
55209: IFTRUE 55267
55211: LD_INT 17
55213: DOUBLE
55214: EQUAL
55215: IFTRUE 55267
55217: LD_INT 18
55219: DOUBLE
55220: EQUAL
55221: IFTRUE 55267
55223: LD_INT 19
55225: DOUBLE
55226: EQUAL
55227: IFTRUE 55267
55229: LD_INT 22
55231: DOUBLE
55232: EQUAL
55233: IFTRUE 55267
55235: LD_INT 20
55237: DOUBLE
55238: EQUAL
55239: IFTRUE 55267
55241: LD_INT 21
55243: DOUBLE
55244: EQUAL
55245: IFTRUE 55267
55247: LD_INT 23
55249: DOUBLE
55250: EQUAL
55251: IFTRUE 55267
55253: LD_INT 24
55255: DOUBLE
55256: EQUAL
55257: IFTRUE 55267
55259: LD_INT 25
55261: DOUBLE
55262: EQUAL
55263: IFTRUE 55267
55265: GO 55323
55267: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
55268: LD_ADDR_VAR 0 9
55272: PUSH
55273: LD_VAR 0 35
55277: PUSH
55278: LD_VAR 0 36
55282: PUSH
55283: LD_VAR 0 37
55287: PUSH
55288: LD_VAR 0 38
55292: PUSH
55293: LD_VAR 0 39
55297: PUSH
55298: LD_VAR 0 40
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: PUSH
55311: LD_VAR 0 4
55315: PUSH
55316: LD_INT 1
55318: PLUS
55319: ARRAY
55320: ST_TO_ADDR
55321: GO 55688
55323: LD_INT 6
55325: DOUBLE
55326: EQUAL
55327: IFTRUE 55379
55329: LD_INT 7
55331: DOUBLE
55332: EQUAL
55333: IFTRUE 55379
55335: LD_INT 8
55337: DOUBLE
55338: EQUAL
55339: IFTRUE 55379
55341: LD_INT 13
55343: DOUBLE
55344: EQUAL
55345: IFTRUE 55379
55347: LD_INT 12
55349: DOUBLE
55350: EQUAL
55351: IFTRUE 55379
55353: LD_INT 15
55355: DOUBLE
55356: EQUAL
55357: IFTRUE 55379
55359: LD_INT 11
55361: DOUBLE
55362: EQUAL
55363: IFTRUE 55379
55365: LD_INT 14
55367: DOUBLE
55368: EQUAL
55369: IFTRUE 55379
55371: LD_INT 10
55373: DOUBLE
55374: EQUAL
55375: IFTRUE 55379
55377: GO 55435
55379: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
55380: LD_ADDR_VAR 0 9
55384: PUSH
55385: LD_VAR 0 41
55389: PUSH
55390: LD_VAR 0 42
55394: PUSH
55395: LD_VAR 0 43
55399: PUSH
55400: LD_VAR 0 44
55404: PUSH
55405: LD_VAR 0 45
55409: PUSH
55410: LD_VAR 0 46
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: PUSH
55423: LD_VAR 0 4
55427: PUSH
55428: LD_INT 1
55430: PLUS
55431: ARRAY
55432: ST_TO_ADDR
55433: GO 55688
55435: LD_INT 36
55437: DOUBLE
55438: EQUAL
55439: IFTRUE 55443
55441: GO 55499
55443: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55444: LD_ADDR_VAR 0 9
55448: PUSH
55449: LD_VAR 0 47
55453: PUSH
55454: LD_VAR 0 48
55458: PUSH
55459: LD_VAR 0 49
55463: PUSH
55464: LD_VAR 0 50
55468: PUSH
55469: LD_VAR 0 51
55473: PUSH
55474: LD_VAR 0 52
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: PUSH
55487: LD_VAR 0 4
55491: PUSH
55492: LD_INT 1
55494: PLUS
55495: ARRAY
55496: ST_TO_ADDR
55497: GO 55688
55499: LD_INT 4
55501: DOUBLE
55502: EQUAL
55503: IFTRUE 55525
55505: LD_INT 5
55507: DOUBLE
55508: EQUAL
55509: IFTRUE 55525
55511: LD_INT 34
55513: DOUBLE
55514: EQUAL
55515: IFTRUE 55525
55517: LD_INT 37
55519: DOUBLE
55520: EQUAL
55521: IFTRUE 55525
55523: GO 55581
55525: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
55526: LD_ADDR_VAR 0 9
55530: PUSH
55531: LD_VAR 0 53
55535: PUSH
55536: LD_VAR 0 54
55540: PUSH
55541: LD_VAR 0 55
55545: PUSH
55546: LD_VAR 0 56
55550: PUSH
55551: LD_VAR 0 57
55555: PUSH
55556: LD_VAR 0 58
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: PUSH
55569: LD_VAR 0 4
55573: PUSH
55574: LD_INT 1
55576: PLUS
55577: ARRAY
55578: ST_TO_ADDR
55579: GO 55688
55581: LD_INT 31
55583: DOUBLE
55584: EQUAL
55585: IFTRUE 55631
55587: LD_INT 32
55589: DOUBLE
55590: EQUAL
55591: IFTRUE 55631
55593: LD_INT 33
55595: DOUBLE
55596: EQUAL
55597: IFTRUE 55631
55599: LD_INT 27
55601: DOUBLE
55602: EQUAL
55603: IFTRUE 55631
55605: LD_INT 26
55607: DOUBLE
55608: EQUAL
55609: IFTRUE 55631
55611: LD_INT 28
55613: DOUBLE
55614: EQUAL
55615: IFTRUE 55631
55617: LD_INT 29
55619: DOUBLE
55620: EQUAL
55621: IFTRUE 55631
55623: LD_INT 30
55625: DOUBLE
55626: EQUAL
55627: IFTRUE 55631
55629: GO 55687
55631: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
55632: LD_ADDR_VAR 0 9
55636: PUSH
55637: LD_VAR 0 59
55641: PUSH
55642: LD_VAR 0 60
55646: PUSH
55647: LD_VAR 0 61
55651: PUSH
55652: LD_VAR 0 62
55656: PUSH
55657: LD_VAR 0 63
55661: PUSH
55662: LD_VAR 0 64
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: PUSH
55675: LD_VAR 0 4
55679: PUSH
55680: LD_INT 1
55682: PLUS
55683: ARRAY
55684: ST_TO_ADDR
55685: GO 55688
55687: POP
// temp_list2 = [ ] ;
55688: LD_ADDR_VAR 0 10
55692: PUSH
55693: EMPTY
55694: ST_TO_ADDR
// for i in temp_list do
55695: LD_ADDR_VAR 0 8
55699: PUSH
55700: LD_VAR 0 9
55704: PUSH
55705: FOR_IN
55706: IFFALSE 55758
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
55708: LD_ADDR_VAR 0 10
55712: PUSH
55713: LD_VAR 0 10
55717: PUSH
55718: LD_VAR 0 8
55722: PUSH
55723: LD_INT 1
55725: ARRAY
55726: PUSH
55727: LD_VAR 0 2
55731: PLUS
55732: PUSH
55733: LD_VAR 0 8
55737: PUSH
55738: LD_INT 2
55740: ARRAY
55741: PUSH
55742: LD_VAR 0 3
55746: PLUS
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: EMPTY
55753: LIST
55754: ADD
55755: ST_TO_ADDR
55756: GO 55705
55758: POP
55759: POP
// result = temp_list2 ;
55760: LD_ADDR_VAR 0 7
55764: PUSH
55765: LD_VAR 0 10
55769: ST_TO_ADDR
// end ;
55770: LD_VAR 0 7
55774: RET
// export function EnemyInRange ( unit , dist ) ; begin
55775: LD_INT 0
55777: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
55778: LD_ADDR_VAR 0 3
55782: PUSH
55783: LD_VAR 0 1
55787: PPUSH
55788: CALL_OW 255
55792: PPUSH
55793: LD_VAR 0 1
55797: PPUSH
55798: CALL_OW 250
55802: PPUSH
55803: LD_VAR 0 1
55807: PPUSH
55808: CALL_OW 251
55812: PPUSH
55813: LD_VAR 0 2
55817: PPUSH
55818: CALL 29879 0 4
55822: PUSH
55823: LD_INT 4
55825: ARRAY
55826: ST_TO_ADDR
// end ;
55827: LD_VAR 0 3
55831: RET
// export function PlayerSeeMe ( unit ) ; begin
55832: LD_INT 0
55834: PPUSH
// result := See ( your_side , unit ) ;
55835: LD_ADDR_VAR 0 2
55839: PUSH
55840: LD_OWVAR 2
55844: PPUSH
55845: LD_VAR 0 1
55849: PPUSH
55850: CALL_OW 292
55854: ST_TO_ADDR
// end ;
55855: LD_VAR 0 2
55859: RET
// export function ReverseDir ( unit ) ; begin
55860: LD_INT 0
55862: PPUSH
// if not unit then
55863: LD_VAR 0 1
55867: NOT
55868: IFFALSE 55872
// exit ;
55870: GO 55895
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
55872: LD_ADDR_VAR 0 2
55876: PUSH
55877: LD_VAR 0 1
55881: PPUSH
55882: CALL_OW 254
55886: PUSH
55887: LD_INT 3
55889: PLUS
55890: PUSH
55891: LD_INT 6
55893: MOD
55894: ST_TO_ADDR
// end ;
55895: LD_VAR 0 2
55899: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
55900: LD_INT 0
55902: PPUSH
55903: PPUSH
55904: PPUSH
55905: PPUSH
55906: PPUSH
// if not hexes then
55907: LD_VAR 0 2
55911: NOT
55912: IFFALSE 55916
// exit ;
55914: GO 56064
// dist := 9999 ;
55916: LD_ADDR_VAR 0 5
55920: PUSH
55921: LD_INT 9999
55923: ST_TO_ADDR
// for i = 1 to hexes do
55924: LD_ADDR_VAR 0 4
55928: PUSH
55929: DOUBLE
55930: LD_INT 1
55932: DEC
55933: ST_TO_ADDR
55934: LD_VAR 0 2
55938: PUSH
55939: FOR_TO
55940: IFFALSE 56052
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
55942: LD_VAR 0 1
55946: PPUSH
55947: LD_VAR 0 2
55951: PUSH
55952: LD_VAR 0 4
55956: ARRAY
55957: PUSH
55958: LD_INT 1
55960: ARRAY
55961: PPUSH
55962: LD_VAR 0 2
55966: PUSH
55967: LD_VAR 0 4
55971: ARRAY
55972: PUSH
55973: LD_INT 2
55975: ARRAY
55976: PPUSH
55977: CALL_OW 297
55981: PUSH
55982: LD_VAR 0 5
55986: LESS
55987: IFFALSE 56050
// begin hex := hexes [ i ] ;
55989: LD_ADDR_VAR 0 7
55993: PUSH
55994: LD_VAR 0 2
55998: PUSH
55999: LD_VAR 0 4
56003: ARRAY
56004: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56005: LD_ADDR_VAR 0 5
56009: PUSH
56010: LD_VAR 0 1
56014: PPUSH
56015: LD_VAR 0 2
56019: PUSH
56020: LD_VAR 0 4
56024: ARRAY
56025: PUSH
56026: LD_INT 1
56028: ARRAY
56029: PPUSH
56030: LD_VAR 0 2
56034: PUSH
56035: LD_VAR 0 4
56039: ARRAY
56040: PUSH
56041: LD_INT 2
56043: ARRAY
56044: PPUSH
56045: CALL_OW 297
56049: ST_TO_ADDR
// end ; end ;
56050: GO 55939
56052: POP
56053: POP
// result := hex ;
56054: LD_ADDR_VAR 0 3
56058: PUSH
56059: LD_VAR 0 7
56063: ST_TO_ADDR
// end ;
56064: LD_VAR 0 3
56068: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
56069: LD_INT 0
56071: PPUSH
56072: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
56073: LD_VAR 0 1
56077: NOT
56078: PUSH
56079: LD_VAR 0 1
56083: PUSH
56084: LD_INT 21
56086: PUSH
56087: LD_INT 2
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 23
56096: PUSH
56097: LD_INT 2
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PPUSH
56108: CALL_OW 69
56112: IN
56113: NOT
56114: OR
56115: IFFALSE 56119
// exit ;
56117: GO 56166
// for i = 1 to 3 do
56119: LD_ADDR_VAR 0 3
56123: PUSH
56124: DOUBLE
56125: LD_INT 1
56127: DEC
56128: ST_TO_ADDR
56129: LD_INT 3
56131: PUSH
56132: FOR_TO
56133: IFFALSE 56164
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56135: LD_VAR 0 1
56139: PPUSH
56140: CALL_OW 250
56144: PPUSH
56145: LD_VAR 0 1
56149: PPUSH
56150: CALL_OW 251
56154: PPUSH
56155: LD_INT 1
56157: PPUSH
56158: CALL_OW 453
56162: GO 56132
56164: POP
56165: POP
// end ;
56166: LD_VAR 0 2
56170: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
56171: LD_INT 0
56173: PPUSH
56174: PPUSH
56175: PPUSH
56176: PPUSH
56177: PPUSH
56178: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
56179: LD_VAR 0 1
56183: NOT
56184: PUSH
56185: LD_VAR 0 2
56189: NOT
56190: OR
56191: PUSH
56192: LD_VAR 0 1
56196: PPUSH
56197: CALL_OW 314
56201: OR
56202: IFFALSE 56206
// exit ;
56204: GO 56647
// x := GetX ( enemy_unit ) ;
56206: LD_ADDR_VAR 0 7
56210: PUSH
56211: LD_VAR 0 2
56215: PPUSH
56216: CALL_OW 250
56220: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
56221: LD_ADDR_VAR 0 8
56225: PUSH
56226: LD_VAR 0 2
56230: PPUSH
56231: CALL_OW 251
56235: ST_TO_ADDR
// if not x or not y then
56236: LD_VAR 0 7
56240: NOT
56241: PUSH
56242: LD_VAR 0 8
56246: NOT
56247: OR
56248: IFFALSE 56252
// exit ;
56250: GO 56647
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
56252: LD_ADDR_VAR 0 6
56256: PUSH
56257: LD_VAR 0 7
56261: PPUSH
56262: LD_INT 0
56264: PPUSH
56265: LD_INT 4
56267: PPUSH
56268: CALL_OW 272
56272: PUSH
56273: LD_VAR 0 8
56277: PPUSH
56278: LD_INT 0
56280: PPUSH
56281: LD_INT 4
56283: PPUSH
56284: CALL_OW 273
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_VAR 0 7
56297: PPUSH
56298: LD_INT 1
56300: PPUSH
56301: LD_INT 4
56303: PPUSH
56304: CALL_OW 272
56308: PUSH
56309: LD_VAR 0 8
56313: PPUSH
56314: LD_INT 1
56316: PPUSH
56317: LD_INT 4
56319: PPUSH
56320: CALL_OW 273
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_VAR 0 7
56333: PPUSH
56334: LD_INT 2
56336: PPUSH
56337: LD_INT 4
56339: PPUSH
56340: CALL_OW 272
56344: PUSH
56345: LD_VAR 0 8
56349: PPUSH
56350: LD_INT 2
56352: PPUSH
56353: LD_INT 4
56355: PPUSH
56356: CALL_OW 273
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_VAR 0 7
56369: PPUSH
56370: LD_INT 3
56372: PPUSH
56373: LD_INT 4
56375: PPUSH
56376: CALL_OW 272
56380: PUSH
56381: LD_VAR 0 8
56385: PPUSH
56386: LD_INT 3
56388: PPUSH
56389: LD_INT 4
56391: PPUSH
56392: CALL_OW 273
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_VAR 0 7
56405: PPUSH
56406: LD_INT 4
56408: PPUSH
56409: LD_INT 4
56411: PPUSH
56412: CALL_OW 272
56416: PUSH
56417: LD_VAR 0 8
56421: PPUSH
56422: LD_INT 4
56424: PPUSH
56425: LD_INT 4
56427: PPUSH
56428: CALL_OW 273
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_VAR 0 7
56441: PPUSH
56442: LD_INT 5
56444: PPUSH
56445: LD_INT 4
56447: PPUSH
56448: CALL_OW 272
56452: PUSH
56453: LD_VAR 0 8
56457: PPUSH
56458: LD_INT 5
56460: PPUSH
56461: LD_INT 4
56463: PPUSH
56464: CALL_OW 273
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: ST_TO_ADDR
// for i = tmp downto 1 do
56481: LD_ADDR_VAR 0 4
56485: PUSH
56486: DOUBLE
56487: LD_VAR 0 6
56491: INC
56492: ST_TO_ADDR
56493: LD_INT 1
56495: PUSH
56496: FOR_DOWNTO
56497: IFFALSE 56598
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
56499: LD_VAR 0 6
56503: PUSH
56504: LD_VAR 0 4
56508: ARRAY
56509: PUSH
56510: LD_INT 1
56512: ARRAY
56513: PPUSH
56514: LD_VAR 0 6
56518: PUSH
56519: LD_VAR 0 4
56523: ARRAY
56524: PUSH
56525: LD_INT 2
56527: ARRAY
56528: PPUSH
56529: CALL_OW 488
56533: NOT
56534: PUSH
56535: LD_VAR 0 6
56539: PUSH
56540: LD_VAR 0 4
56544: ARRAY
56545: PUSH
56546: LD_INT 1
56548: ARRAY
56549: PPUSH
56550: LD_VAR 0 6
56554: PUSH
56555: LD_VAR 0 4
56559: ARRAY
56560: PUSH
56561: LD_INT 2
56563: ARRAY
56564: PPUSH
56565: CALL_OW 428
56569: PUSH
56570: LD_INT 0
56572: NONEQUAL
56573: OR
56574: IFFALSE 56596
// tmp := Delete ( tmp , i ) ;
56576: LD_ADDR_VAR 0 6
56580: PUSH
56581: LD_VAR 0 6
56585: PPUSH
56586: LD_VAR 0 4
56590: PPUSH
56591: CALL_OW 3
56595: ST_TO_ADDR
56596: GO 56496
56598: POP
56599: POP
// j := GetClosestHex ( unit , tmp ) ;
56600: LD_ADDR_VAR 0 5
56604: PUSH
56605: LD_VAR 0 1
56609: PPUSH
56610: LD_VAR 0 6
56614: PPUSH
56615: CALL 55900 0 2
56619: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
56620: LD_VAR 0 1
56624: PPUSH
56625: LD_VAR 0 5
56629: PUSH
56630: LD_INT 1
56632: ARRAY
56633: PPUSH
56634: LD_VAR 0 5
56638: PUSH
56639: LD_INT 2
56641: ARRAY
56642: PPUSH
56643: CALL_OW 111
// end ;
56647: LD_VAR 0 3
56651: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
56652: LD_INT 0
56654: PPUSH
56655: PPUSH
56656: PPUSH
// uc_side = 0 ;
56657: LD_ADDR_OWVAR 20
56661: PUSH
56662: LD_INT 0
56664: ST_TO_ADDR
// uc_nation = 0 ;
56665: LD_ADDR_OWVAR 21
56669: PUSH
56670: LD_INT 0
56672: ST_TO_ADDR
// InitHc ;
56673: CALL_OW 19
// InitVc ;
56677: CALL_OW 20
// if mastodonts then
56681: LD_VAR 0 6
56685: IFFALSE 56752
// for i = 1 to mastodonts do
56687: LD_ADDR_VAR 0 11
56691: PUSH
56692: DOUBLE
56693: LD_INT 1
56695: DEC
56696: ST_TO_ADDR
56697: LD_VAR 0 6
56701: PUSH
56702: FOR_TO
56703: IFFALSE 56750
// begin vc_chassis := 31 ;
56705: LD_ADDR_OWVAR 37
56709: PUSH
56710: LD_INT 31
56712: ST_TO_ADDR
// vc_control := control_rider ;
56713: LD_ADDR_OWVAR 38
56717: PUSH
56718: LD_INT 4
56720: ST_TO_ADDR
// animal := CreateVehicle ;
56721: LD_ADDR_VAR 0 12
56725: PUSH
56726: CALL_OW 45
56730: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56731: LD_VAR 0 12
56735: PPUSH
56736: LD_VAR 0 8
56740: PPUSH
56741: LD_INT 0
56743: PPUSH
56744: CALL 58821 0 3
// end ;
56748: GO 56702
56750: POP
56751: POP
// if horses then
56752: LD_VAR 0 5
56756: IFFALSE 56823
// for i = 1 to horses do
56758: LD_ADDR_VAR 0 11
56762: PUSH
56763: DOUBLE
56764: LD_INT 1
56766: DEC
56767: ST_TO_ADDR
56768: LD_VAR 0 5
56772: PUSH
56773: FOR_TO
56774: IFFALSE 56821
// begin hc_class := 21 ;
56776: LD_ADDR_OWVAR 28
56780: PUSH
56781: LD_INT 21
56783: ST_TO_ADDR
// hc_gallery :=  ;
56784: LD_ADDR_OWVAR 33
56788: PUSH
56789: LD_STRING 
56791: ST_TO_ADDR
// animal := CreateHuman ;
56792: LD_ADDR_VAR 0 12
56796: PUSH
56797: CALL_OW 44
56801: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56802: LD_VAR 0 12
56806: PPUSH
56807: LD_VAR 0 8
56811: PPUSH
56812: LD_INT 0
56814: PPUSH
56815: CALL 58821 0 3
// end ;
56819: GO 56773
56821: POP
56822: POP
// if birds then
56823: LD_VAR 0 1
56827: IFFALSE 56894
// for i = 1 to birds do
56829: LD_ADDR_VAR 0 11
56833: PUSH
56834: DOUBLE
56835: LD_INT 1
56837: DEC
56838: ST_TO_ADDR
56839: LD_VAR 0 1
56843: PUSH
56844: FOR_TO
56845: IFFALSE 56892
// begin hc_class = 18 ;
56847: LD_ADDR_OWVAR 28
56851: PUSH
56852: LD_INT 18
56854: ST_TO_ADDR
// hc_gallery =  ;
56855: LD_ADDR_OWVAR 33
56859: PUSH
56860: LD_STRING 
56862: ST_TO_ADDR
// animal := CreateHuman ;
56863: LD_ADDR_VAR 0 12
56867: PUSH
56868: CALL_OW 44
56872: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56873: LD_VAR 0 12
56877: PPUSH
56878: LD_VAR 0 8
56882: PPUSH
56883: LD_INT 0
56885: PPUSH
56886: CALL 58821 0 3
// end ;
56890: GO 56844
56892: POP
56893: POP
// if tigers then
56894: LD_VAR 0 2
56898: IFFALSE 56982
// for i = 1 to tigers do
56900: LD_ADDR_VAR 0 11
56904: PUSH
56905: DOUBLE
56906: LD_INT 1
56908: DEC
56909: ST_TO_ADDR
56910: LD_VAR 0 2
56914: PUSH
56915: FOR_TO
56916: IFFALSE 56980
// begin hc_class = class_tiger ;
56918: LD_ADDR_OWVAR 28
56922: PUSH
56923: LD_INT 14
56925: ST_TO_ADDR
// hc_gallery =  ;
56926: LD_ADDR_OWVAR 33
56930: PUSH
56931: LD_STRING 
56933: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56934: LD_ADDR_OWVAR 35
56938: PUSH
56939: LD_INT 7
56941: NEG
56942: PPUSH
56943: LD_INT 7
56945: PPUSH
56946: CALL_OW 12
56950: ST_TO_ADDR
// animal := CreateHuman ;
56951: LD_ADDR_VAR 0 12
56955: PUSH
56956: CALL_OW 44
56960: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56961: LD_VAR 0 12
56965: PPUSH
56966: LD_VAR 0 8
56970: PPUSH
56971: LD_INT 0
56973: PPUSH
56974: CALL 58821 0 3
// end ;
56978: GO 56915
56980: POP
56981: POP
// if apemans then
56982: LD_VAR 0 3
56986: IFFALSE 57109
// for i = 1 to apemans do
56988: LD_ADDR_VAR 0 11
56992: PUSH
56993: DOUBLE
56994: LD_INT 1
56996: DEC
56997: ST_TO_ADDR
56998: LD_VAR 0 3
57002: PUSH
57003: FOR_TO
57004: IFFALSE 57107
// begin hc_class = class_apeman ;
57006: LD_ADDR_OWVAR 28
57010: PUSH
57011: LD_INT 12
57013: ST_TO_ADDR
// hc_gallery =  ;
57014: LD_ADDR_OWVAR 33
57018: PUSH
57019: LD_STRING 
57021: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
57022: LD_ADDR_OWVAR 35
57026: PUSH
57027: LD_INT 5
57029: NEG
57030: PPUSH
57031: LD_INT 5
57033: PPUSH
57034: CALL_OW 12
57038: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
57039: LD_ADDR_OWVAR 31
57043: PUSH
57044: LD_INT 1
57046: PPUSH
57047: LD_INT 3
57049: PPUSH
57050: CALL_OW 12
57054: PUSH
57055: LD_INT 1
57057: PPUSH
57058: LD_INT 3
57060: PPUSH
57061: CALL_OW 12
57065: PUSH
57066: LD_INT 0
57068: PUSH
57069: LD_INT 0
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: ST_TO_ADDR
// animal := CreateHuman ;
57078: LD_ADDR_VAR 0 12
57082: PUSH
57083: CALL_OW 44
57087: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57088: LD_VAR 0 12
57092: PPUSH
57093: LD_VAR 0 8
57097: PPUSH
57098: LD_INT 0
57100: PPUSH
57101: CALL 58821 0 3
// end ;
57105: GO 57003
57107: POP
57108: POP
// if enchidnas then
57109: LD_VAR 0 4
57113: IFFALSE 57180
// for i = 1 to enchidnas do
57115: LD_ADDR_VAR 0 11
57119: PUSH
57120: DOUBLE
57121: LD_INT 1
57123: DEC
57124: ST_TO_ADDR
57125: LD_VAR 0 4
57129: PUSH
57130: FOR_TO
57131: IFFALSE 57178
// begin hc_class = 13 ;
57133: LD_ADDR_OWVAR 28
57137: PUSH
57138: LD_INT 13
57140: ST_TO_ADDR
// hc_gallery =  ;
57141: LD_ADDR_OWVAR 33
57145: PUSH
57146: LD_STRING 
57148: ST_TO_ADDR
// animal := CreateHuman ;
57149: LD_ADDR_VAR 0 12
57153: PUSH
57154: CALL_OW 44
57158: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57159: LD_VAR 0 12
57163: PPUSH
57164: LD_VAR 0 8
57168: PPUSH
57169: LD_INT 0
57171: PPUSH
57172: CALL 58821 0 3
// end ;
57176: GO 57130
57178: POP
57179: POP
// if fishes then
57180: LD_VAR 0 7
57184: IFFALSE 57251
// for i = 1 to fishes do
57186: LD_ADDR_VAR 0 11
57190: PUSH
57191: DOUBLE
57192: LD_INT 1
57194: DEC
57195: ST_TO_ADDR
57196: LD_VAR 0 7
57200: PUSH
57201: FOR_TO
57202: IFFALSE 57249
// begin hc_class = 20 ;
57204: LD_ADDR_OWVAR 28
57208: PUSH
57209: LD_INT 20
57211: ST_TO_ADDR
// hc_gallery =  ;
57212: LD_ADDR_OWVAR 33
57216: PUSH
57217: LD_STRING 
57219: ST_TO_ADDR
// animal := CreateHuman ;
57220: LD_ADDR_VAR 0 12
57224: PUSH
57225: CALL_OW 44
57229: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
57230: LD_VAR 0 12
57234: PPUSH
57235: LD_VAR 0 9
57239: PPUSH
57240: LD_INT 0
57242: PPUSH
57243: CALL 58821 0 3
// end ;
57247: GO 57201
57249: POP
57250: POP
// end ;
57251: LD_VAR 0 10
57255: RET
// export function WantHeal ( sci , unit ) ; begin
57256: LD_INT 0
57258: PPUSH
// if GetTaskList ( sci ) > 0 then
57259: LD_VAR 0 1
57263: PPUSH
57264: CALL_OW 437
57268: PUSH
57269: LD_INT 0
57271: GREATER
57272: IFFALSE 57342
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
57274: LD_VAR 0 1
57278: PPUSH
57279: CALL_OW 437
57283: PUSH
57284: LD_INT 1
57286: ARRAY
57287: PUSH
57288: LD_INT 1
57290: ARRAY
57291: PUSH
57292: LD_STRING l
57294: EQUAL
57295: PUSH
57296: LD_VAR 0 1
57300: PPUSH
57301: CALL_OW 437
57305: PUSH
57306: LD_INT 1
57308: ARRAY
57309: PUSH
57310: LD_INT 4
57312: ARRAY
57313: PUSH
57314: LD_VAR 0 2
57318: EQUAL
57319: AND
57320: IFFALSE 57332
// result := true else
57322: LD_ADDR_VAR 0 3
57326: PUSH
57327: LD_INT 1
57329: ST_TO_ADDR
57330: GO 57340
// result := false ;
57332: LD_ADDR_VAR 0 3
57336: PUSH
57337: LD_INT 0
57339: ST_TO_ADDR
// end else
57340: GO 57350
// result := false ;
57342: LD_ADDR_VAR 0 3
57346: PUSH
57347: LD_INT 0
57349: ST_TO_ADDR
// end ;
57350: LD_VAR 0 3
57354: RET
// export function HealTarget ( sci ) ; begin
57355: LD_INT 0
57357: PPUSH
// if not sci then
57358: LD_VAR 0 1
57362: NOT
57363: IFFALSE 57367
// exit ;
57365: GO 57432
// result := 0 ;
57367: LD_ADDR_VAR 0 2
57371: PUSH
57372: LD_INT 0
57374: ST_TO_ADDR
// if GetTaskList ( sci ) then
57375: LD_VAR 0 1
57379: PPUSH
57380: CALL_OW 437
57384: IFFALSE 57432
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
57386: LD_VAR 0 1
57390: PPUSH
57391: CALL_OW 437
57395: PUSH
57396: LD_INT 1
57398: ARRAY
57399: PUSH
57400: LD_INT 1
57402: ARRAY
57403: PUSH
57404: LD_STRING l
57406: EQUAL
57407: IFFALSE 57432
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
57409: LD_ADDR_VAR 0 2
57413: PUSH
57414: LD_VAR 0 1
57418: PPUSH
57419: CALL_OW 437
57423: PUSH
57424: LD_INT 1
57426: ARRAY
57427: PUSH
57428: LD_INT 4
57430: ARRAY
57431: ST_TO_ADDR
// end ;
57432: LD_VAR 0 2
57436: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
57437: LD_INT 0
57439: PPUSH
57440: PPUSH
57441: PPUSH
57442: PPUSH
// if not base_units then
57443: LD_VAR 0 1
57447: NOT
57448: IFFALSE 57452
// exit ;
57450: GO 57539
// result := false ;
57452: LD_ADDR_VAR 0 2
57456: PUSH
57457: LD_INT 0
57459: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
57460: LD_ADDR_VAR 0 5
57464: PUSH
57465: LD_VAR 0 1
57469: PPUSH
57470: LD_INT 21
57472: PUSH
57473: LD_INT 3
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PPUSH
57480: CALL_OW 72
57484: ST_TO_ADDR
// if not tmp then
57485: LD_VAR 0 5
57489: NOT
57490: IFFALSE 57494
// exit ;
57492: GO 57539
// for i in tmp do
57494: LD_ADDR_VAR 0 3
57498: PUSH
57499: LD_VAR 0 5
57503: PUSH
57504: FOR_IN
57505: IFFALSE 57537
// begin result := EnemyInRange ( i , 22 ) ;
57507: LD_ADDR_VAR 0 2
57511: PUSH
57512: LD_VAR 0 3
57516: PPUSH
57517: LD_INT 22
57519: PPUSH
57520: CALL 55775 0 2
57524: ST_TO_ADDR
// if result then
57525: LD_VAR 0 2
57529: IFFALSE 57535
// exit ;
57531: POP
57532: POP
57533: GO 57539
// end ;
57535: GO 57504
57537: POP
57538: POP
// end ;
57539: LD_VAR 0 2
57543: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
57544: LD_INT 0
57546: PPUSH
57547: PPUSH
// if not units then
57548: LD_VAR 0 1
57552: NOT
57553: IFFALSE 57557
// exit ;
57555: GO 57627
// result := [ ] ;
57557: LD_ADDR_VAR 0 3
57561: PUSH
57562: EMPTY
57563: ST_TO_ADDR
// for i in units do
57564: LD_ADDR_VAR 0 4
57568: PUSH
57569: LD_VAR 0 1
57573: PUSH
57574: FOR_IN
57575: IFFALSE 57625
// if GetTag ( i ) = tag then
57577: LD_VAR 0 4
57581: PPUSH
57582: CALL_OW 110
57586: PUSH
57587: LD_VAR 0 2
57591: EQUAL
57592: IFFALSE 57623
// result := Insert ( result , result + 1 , i ) ;
57594: LD_ADDR_VAR 0 3
57598: PUSH
57599: LD_VAR 0 3
57603: PPUSH
57604: LD_VAR 0 3
57608: PUSH
57609: LD_INT 1
57611: PLUS
57612: PPUSH
57613: LD_VAR 0 4
57617: PPUSH
57618: CALL_OW 2
57622: ST_TO_ADDR
57623: GO 57574
57625: POP
57626: POP
// end ;
57627: LD_VAR 0 3
57631: RET
// export function IsDriver ( un ) ; begin
57632: LD_INT 0
57634: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
57635: LD_ADDR_VAR 0 2
57639: PUSH
57640: LD_VAR 0 1
57644: PUSH
57645: LD_INT 55
57647: PUSH
57648: EMPTY
57649: LIST
57650: PPUSH
57651: CALL_OW 69
57655: IN
57656: ST_TO_ADDR
// end ;
57657: LD_VAR 0 2
57661: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
57662: LD_INT 0
57664: PPUSH
57665: PPUSH
// list := [ ] ;
57666: LD_ADDR_VAR 0 5
57670: PUSH
57671: EMPTY
57672: ST_TO_ADDR
// case d of 0 :
57673: LD_VAR 0 3
57677: PUSH
57678: LD_INT 0
57680: DOUBLE
57681: EQUAL
57682: IFTRUE 57686
57684: GO 57819
57686: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
57687: LD_ADDR_VAR 0 5
57691: PUSH
57692: LD_VAR 0 1
57696: PUSH
57697: LD_INT 4
57699: MINUS
57700: PUSH
57701: LD_VAR 0 2
57705: PUSH
57706: LD_INT 4
57708: MINUS
57709: PUSH
57710: LD_INT 2
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: LIST
57717: PUSH
57718: LD_VAR 0 1
57722: PUSH
57723: LD_INT 3
57725: MINUS
57726: PUSH
57727: LD_VAR 0 2
57731: PUSH
57732: LD_INT 1
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: LIST
57739: PUSH
57740: LD_VAR 0 1
57744: PUSH
57745: LD_INT 4
57747: PLUS
57748: PUSH
57749: LD_VAR 0 2
57753: PUSH
57754: LD_INT 4
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: LIST
57761: PUSH
57762: LD_VAR 0 1
57766: PUSH
57767: LD_INT 3
57769: PLUS
57770: PUSH
57771: LD_VAR 0 2
57775: PUSH
57776: LD_INT 3
57778: PLUS
57779: PUSH
57780: LD_INT 5
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: LIST
57787: PUSH
57788: LD_VAR 0 1
57792: PUSH
57793: LD_VAR 0 2
57797: PUSH
57798: LD_INT 4
57800: PLUS
57801: PUSH
57802: LD_INT 0
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: LIST
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: ST_TO_ADDR
// end ; 1 :
57817: GO 58517
57819: LD_INT 1
57821: DOUBLE
57822: EQUAL
57823: IFTRUE 57827
57825: GO 57960
57827: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
57828: LD_ADDR_VAR 0 5
57832: PUSH
57833: LD_VAR 0 1
57837: PUSH
57838: LD_VAR 0 2
57842: PUSH
57843: LD_INT 4
57845: MINUS
57846: PUSH
57847: LD_INT 3
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: LIST
57854: PUSH
57855: LD_VAR 0 1
57859: PUSH
57860: LD_INT 3
57862: MINUS
57863: PUSH
57864: LD_VAR 0 2
57868: PUSH
57869: LD_INT 3
57871: MINUS
57872: PUSH
57873: LD_INT 2
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: LIST
57880: PUSH
57881: LD_VAR 0 1
57885: PUSH
57886: LD_INT 4
57888: MINUS
57889: PUSH
57890: LD_VAR 0 2
57894: PUSH
57895: LD_INT 1
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: LIST
57902: PUSH
57903: LD_VAR 0 1
57907: PUSH
57908: LD_VAR 0 2
57912: PUSH
57913: LD_INT 3
57915: PLUS
57916: PUSH
57917: LD_INT 0
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: LIST
57924: PUSH
57925: LD_VAR 0 1
57929: PUSH
57930: LD_INT 4
57932: PLUS
57933: PUSH
57934: LD_VAR 0 2
57938: PUSH
57939: LD_INT 4
57941: PLUS
57942: PUSH
57943: LD_INT 5
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: LIST
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: ST_TO_ADDR
// end ; 2 :
57958: GO 58517
57960: LD_INT 2
57962: DOUBLE
57963: EQUAL
57964: IFTRUE 57968
57966: GO 58097
57968: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57969: LD_ADDR_VAR 0 5
57973: PUSH
57974: LD_VAR 0 1
57978: PUSH
57979: LD_VAR 0 2
57983: PUSH
57984: LD_INT 3
57986: MINUS
57987: PUSH
57988: LD_INT 3
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: LIST
57995: PUSH
57996: LD_VAR 0 1
58000: PUSH
58001: LD_INT 4
58003: PLUS
58004: PUSH
58005: LD_VAR 0 2
58009: PUSH
58010: LD_INT 4
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: LIST
58017: PUSH
58018: LD_VAR 0 1
58022: PUSH
58023: LD_VAR 0 2
58027: PUSH
58028: LD_INT 4
58030: PLUS
58031: PUSH
58032: LD_INT 0
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: LIST
58039: PUSH
58040: LD_VAR 0 1
58044: PUSH
58045: LD_INT 3
58047: MINUS
58048: PUSH
58049: LD_VAR 0 2
58053: PUSH
58054: LD_INT 1
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: LIST
58061: PUSH
58062: LD_VAR 0 1
58066: PUSH
58067: LD_INT 4
58069: MINUS
58070: PUSH
58071: LD_VAR 0 2
58075: PUSH
58076: LD_INT 4
58078: MINUS
58079: PUSH
58080: LD_INT 2
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: LIST
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: ST_TO_ADDR
// end ; 3 :
58095: GO 58517
58097: LD_INT 3
58099: DOUBLE
58100: EQUAL
58101: IFTRUE 58105
58103: GO 58238
58105: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
58106: LD_ADDR_VAR 0 5
58110: PUSH
58111: LD_VAR 0 1
58115: PUSH
58116: LD_INT 3
58118: PLUS
58119: PUSH
58120: LD_VAR 0 2
58124: PUSH
58125: LD_INT 4
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: LIST
58132: PUSH
58133: LD_VAR 0 1
58137: PUSH
58138: LD_INT 4
58140: PLUS
58141: PUSH
58142: LD_VAR 0 2
58146: PUSH
58147: LD_INT 4
58149: PLUS
58150: PUSH
58151: LD_INT 5
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: LIST
58158: PUSH
58159: LD_VAR 0 1
58163: PUSH
58164: LD_INT 4
58166: MINUS
58167: PUSH
58168: LD_VAR 0 2
58172: PUSH
58173: LD_INT 1
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: LIST
58180: PUSH
58181: LD_VAR 0 1
58185: PUSH
58186: LD_VAR 0 2
58190: PUSH
58191: LD_INT 4
58193: MINUS
58194: PUSH
58195: LD_INT 3
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: LIST
58202: PUSH
58203: LD_VAR 0 1
58207: PUSH
58208: LD_INT 3
58210: MINUS
58211: PUSH
58212: LD_VAR 0 2
58216: PUSH
58217: LD_INT 3
58219: MINUS
58220: PUSH
58221: LD_INT 2
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: LIST
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: ST_TO_ADDR
// end ; 4 :
58236: GO 58517
58238: LD_INT 4
58240: DOUBLE
58241: EQUAL
58242: IFTRUE 58246
58244: GO 58379
58246: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
58247: LD_ADDR_VAR 0 5
58251: PUSH
58252: LD_VAR 0 1
58256: PUSH
58257: LD_VAR 0 2
58261: PUSH
58262: LD_INT 4
58264: PLUS
58265: PUSH
58266: LD_INT 0
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: LIST
58273: PUSH
58274: LD_VAR 0 1
58278: PUSH
58279: LD_INT 3
58281: PLUS
58282: PUSH
58283: LD_VAR 0 2
58287: PUSH
58288: LD_INT 3
58290: PLUS
58291: PUSH
58292: LD_INT 5
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: LIST
58299: PUSH
58300: LD_VAR 0 1
58304: PUSH
58305: LD_INT 4
58307: PLUS
58308: PUSH
58309: LD_VAR 0 2
58313: PUSH
58314: LD_INT 4
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: LIST
58321: PUSH
58322: LD_VAR 0 1
58326: PUSH
58327: LD_VAR 0 2
58331: PUSH
58332: LD_INT 3
58334: MINUS
58335: PUSH
58336: LD_INT 3
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: LIST
58343: PUSH
58344: LD_VAR 0 1
58348: PUSH
58349: LD_INT 4
58351: MINUS
58352: PUSH
58353: LD_VAR 0 2
58357: PUSH
58358: LD_INT 4
58360: MINUS
58361: PUSH
58362: LD_INT 2
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: LIST
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: ST_TO_ADDR
// end ; 5 :
58377: GO 58517
58379: LD_INT 5
58381: DOUBLE
58382: EQUAL
58383: IFTRUE 58387
58385: GO 58516
58387: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
58388: LD_ADDR_VAR 0 5
58392: PUSH
58393: LD_VAR 0 1
58397: PUSH
58398: LD_INT 4
58400: MINUS
58401: PUSH
58402: LD_VAR 0 2
58406: PUSH
58407: LD_INT 1
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: LIST
58414: PUSH
58415: LD_VAR 0 1
58419: PUSH
58420: LD_VAR 0 2
58424: PUSH
58425: LD_INT 4
58427: MINUS
58428: PUSH
58429: LD_INT 3
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: LIST
58436: PUSH
58437: LD_VAR 0 1
58441: PUSH
58442: LD_INT 4
58444: PLUS
58445: PUSH
58446: LD_VAR 0 2
58450: PUSH
58451: LD_INT 4
58453: PLUS
58454: PUSH
58455: LD_INT 5
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: LIST
58462: PUSH
58463: LD_VAR 0 1
58467: PUSH
58468: LD_INT 3
58470: PLUS
58471: PUSH
58472: LD_VAR 0 2
58476: PUSH
58477: LD_INT 4
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: LIST
58484: PUSH
58485: LD_VAR 0 1
58489: PUSH
58490: LD_VAR 0 2
58494: PUSH
58495: LD_INT 3
58497: PLUS
58498: PUSH
58499: LD_INT 0
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: LIST
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: ST_TO_ADDR
// end ; end ;
58514: GO 58517
58516: POP
// result := list ;
58517: LD_ADDR_VAR 0 4
58521: PUSH
58522: LD_VAR 0 5
58526: ST_TO_ADDR
// end ;
58527: LD_VAR 0 4
58531: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
58532: LD_INT 0
58534: PPUSH
58535: PPUSH
58536: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
58537: LD_VAR 0 1
58541: NOT
58542: PUSH
58543: LD_VAR 0 2
58547: PUSH
58548: LD_INT 1
58550: PUSH
58551: LD_INT 2
58553: PUSH
58554: LD_INT 3
58556: PUSH
58557: LD_INT 4
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: IN
58566: NOT
58567: OR
58568: IFFALSE 58572
// exit ;
58570: GO 58664
// tmp := [ ] ;
58572: LD_ADDR_VAR 0 5
58576: PUSH
58577: EMPTY
58578: ST_TO_ADDR
// for i in units do
58579: LD_ADDR_VAR 0 4
58583: PUSH
58584: LD_VAR 0 1
58588: PUSH
58589: FOR_IN
58590: IFFALSE 58633
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
58592: LD_ADDR_VAR 0 5
58596: PUSH
58597: LD_VAR 0 5
58601: PPUSH
58602: LD_VAR 0 5
58606: PUSH
58607: LD_INT 1
58609: PLUS
58610: PPUSH
58611: LD_VAR 0 4
58615: PPUSH
58616: LD_VAR 0 2
58620: PPUSH
58621: CALL_OW 259
58625: PPUSH
58626: CALL_OW 2
58630: ST_TO_ADDR
58631: GO 58589
58633: POP
58634: POP
// if not tmp then
58635: LD_VAR 0 5
58639: NOT
58640: IFFALSE 58644
// exit ;
58642: GO 58664
// result := SortListByListDesc ( units , tmp ) ;
58644: LD_ADDR_VAR 0 3
58648: PUSH
58649: LD_VAR 0 1
58653: PPUSH
58654: LD_VAR 0 5
58658: PPUSH
58659: CALL_OW 77
58663: ST_TO_ADDR
// end ;
58664: LD_VAR 0 3
58668: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
58669: LD_INT 0
58671: PPUSH
58672: PPUSH
58673: PPUSH
// x := GetX ( building ) ;
58674: LD_ADDR_VAR 0 4
58678: PUSH
58679: LD_VAR 0 2
58683: PPUSH
58684: CALL_OW 250
58688: ST_TO_ADDR
// y := GetY ( building ) ;
58689: LD_ADDR_VAR 0 5
58693: PUSH
58694: LD_VAR 0 2
58698: PPUSH
58699: CALL_OW 251
58703: ST_TO_ADDR
// if GetTaskList ( unit ) then
58704: LD_VAR 0 1
58708: PPUSH
58709: CALL_OW 437
58713: IFFALSE 58808
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58715: LD_STRING e
58717: PUSH
58718: LD_VAR 0 1
58722: PPUSH
58723: CALL_OW 437
58727: PUSH
58728: LD_INT 1
58730: ARRAY
58731: PUSH
58732: LD_INT 1
58734: ARRAY
58735: EQUAL
58736: PUSH
58737: LD_VAR 0 4
58741: PUSH
58742: LD_VAR 0 1
58746: PPUSH
58747: CALL_OW 437
58751: PUSH
58752: LD_INT 1
58754: ARRAY
58755: PUSH
58756: LD_INT 2
58758: ARRAY
58759: EQUAL
58760: AND
58761: PUSH
58762: LD_VAR 0 5
58766: PUSH
58767: LD_VAR 0 1
58771: PPUSH
58772: CALL_OW 437
58776: PUSH
58777: LD_INT 1
58779: ARRAY
58780: PUSH
58781: LD_INT 3
58783: ARRAY
58784: EQUAL
58785: AND
58786: IFFALSE 58798
// result := true else
58788: LD_ADDR_VAR 0 3
58792: PUSH
58793: LD_INT 1
58795: ST_TO_ADDR
58796: GO 58806
// result := false ;
58798: LD_ADDR_VAR 0 3
58802: PUSH
58803: LD_INT 0
58805: ST_TO_ADDR
// end else
58806: GO 58816
// result := false ;
58808: LD_ADDR_VAR 0 3
58812: PUSH
58813: LD_INT 0
58815: ST_TO_ADDR
// end ;
58816: LD_VAR 0 3
58820: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58821: LD_INT 0
58823: PPUSH
58824: PPUSH
58825: PPUSH
58826: PPUSH
// if not unit or not area then
58827: LD_VAR 0 1
58831: NOT
58832: PUSH
58833: LD_VAR 0 2
58837: NOT
58838: OR
58839: IFFALSE 58843
// exit ;
58841: GO 59007
// tmp := AreaToList ( area , i ) ;
58843: LD_ADDR_VAR 0 6
58847: PUSH
58848: LD_VAR 0 2
58852: PPUSH
58853: LD_VAR 0 5
58857: PPUSH
58858: CALL_OW 517
58862: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58863: LD_ADDR_VAR 0 5
58867: PUSH
58868: DOUBLE
58869: LD_INT 1
58871: DEC
58872: ST_TO_ADDR
58873: LD_VAR 0 6
58877: PUSH
58878: LD_INT 1
58880: ARRAY
58881: PUSH
58882: FOR_TO
58883: IFFALSE 59005
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58885: LD_ADDR_VAR 0 7
58889: PUSH
58890: LD_VAR 0 6
58894: PUSH
58895: LD_INT 1
58897: ARRAY
58898: PUSH
58899: LD_VAR 0 5
58903: ARRAY
58904: PUSH
58905: LD_VAR 0 6
58909: PUSH
58910: LD_INT 2
58912: ARRAY
58913: PUSH
58914: LD_VAR 0 5
58918: ARRAY
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
58924: LD_VAR 0 7
58928: PUSH
58929: LD_INT 1
58931: ARRAY
58932: PPUSH
58933: LD_VAR 0 7
58937: PUSH
58938: LD_INT 2
58940: ARRAY
58941: PPUSH
58942: CALL_OW 428
58946: PUSH
58947: LD_INT 0
58949: EQUAL
58950: IFFALSE 59003
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58952: LD_VAR 0 1
58956: PPUSH
58957: LD_VAR 0 7
58961: PUSH
58962: LD_INT 1
58964: ARRAY
58965: PPUSH
58966: LD_VAR 0 7
58970: PUSH
58971: LD_INT 2
58973: ARRAY
58974: PPUSH
58975: LD_VAR 0 3
58979: PPUSH
58980: CALL_OW 48
// result := IsPlaced ( unit ) ;
58984: LD_ADDR_VAR 0 4
58988: PUSH
58989: LD_VAR 0 1
58993: PPUSH
58994: CALL_OW 305
58998: ST_TO_ADDR
// exit ;
58999: POP
59000: POP
59001: GO 59007
// end ; end ;
59003: GO 58882
59005: POP
59006: POP
// end ;
59007: LD_VAR 0 4
59011: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
59012: LD_INT 0
59014: PPUSH
59015: PPUSH
59016: PPUSH
// if not side or side > 8 then
59017: LD_VAR 0 1
59021: NOT
59022: PUSH
59023: LD_VAR 0 1
59027: PUSH
59028: LD_INT 8
59030: GREATER
59031: OR
59032: IFFALSE 59036
// exit ;
59034: GO 59223
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
59036: LD_ADDR_VAR 0 4
59040: PUSH
59041: LD_INT 22
59043: PUSH
59044: LD_VAR 0 1
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 21
59055: PUSH
59056: LD_INT 3
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PPUSH
59067: CALL_OW 69
59071: ST_TO_ADDR
// if not tmp then
59072: LD_VAR 0 4
59076: NOT
59077: IFFALSE 59081
// exit ;
59079: GO 59223
// enable_addtolog := true ;
59081: LD_ADDR_OWVAR 81
59085: PUSH
59086: LD_INT 1
59088: ST_TO_ADDR
// AddToLog ( [ ) ;
59089: LD_STRING [
59091: PPUSH
59092: CALL_OW 561
// for i in tmp do
59096: LD_ADDR_VAR 0 3
59100: PUSH
59101: LD_VAR 0 4
59105: PUSH
59106: FOR_IN
59107: IFFALSE 59214
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
59109: LD_STRING [
59111: PUSH
59112: LD_VAR 0 3
59116: PPUSH
59117: CALL_OW 266
59121: STR
59122: PUSH
59123: LD_STRING , 
59125: STR
59126: PUSH
59127: LD_VAR 0 3
59131: PPUSH
59132: CALL_OW 250
59136: STR
59137: PUSH
59138: LD_STRING , 
59140: STR
59141: PUSH
59142: LD_VAR 0 3
59146: PPUSH
59147: CALL_OW 251
59151: STR
59152: PUSH
59153: LD_STRING , 
59155: STR
59156: PUSH
59157: LD_VAR 0 3
59161: PPUSH
59162: CALL_OW 254
59166: STR
59167: PUSH
59168: LD_STRING , 
59170: STR
59171: PUSH
59172: LD_VAR 0 3
59176: PPUSH
59177: LD_INT 1
59179: PPUSH
59180: CALL_OW 268
59184: STR
59185: PUSH
59186: LD_STRING , 
59188: STR
59189: PUSH
59190: LD_VAR 0 3
59194: PPUSH
59195: LD_INT 2
59197: PPUSH
59198: CALL_OW 268
59202: STR
59203: PUSH
59204: LD_STRING ],
59206: STR
59207: PPUSH
59208: CALL_OW 561
// end ;
59212: GO 59106
59214: POP
59215: POP
// AddToLog ( ]; ) ;
59216: LD_STRING ];
59218: PPUSH
59219: CALL_OW 561
// end ;
59223: LD_VAR 0 2
59227: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
59228: LD_INT 0
59230: PPUSH
59231: PPUSH
59232: PPUSH
59233: PPUSH
59234: PPUSH
// if not area or not rate or not max then
59235: LD_VAR 0 1
59239: NOT
59240: PUSH
59241: LD_VAR 0 2
59245: NOT
59246: OR
59247: PUSH
59248: LD_VAR 0 4
59252: NOT
59253: OR
59254: IFFALSE 59258
// exit ;
59256: GO 59450
// while 1 do
59258: LD_INT 1
59260: IFFALSE 59450
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
59262: LD_ADDR_VAR 0 9
59266: PUSH
59267: LD_VAR 0 1
59271: PPUSH
59272: LD_INT 1
59274: PPUSH
59275: CALL_OW 287
59279: PUSH
59280: LD_INT 10
59282: MUL
59283: ST_TO_ADDR
// r := rate / 10 ;
59284: LD_ADDR_VAR 0 7
59288: PUSH
59289: LD_VAR 0 2
59293: PUSH
59294: LD_INT 10
59296: DIVREAL
59297: ST_TO_ADDR
// time := 1 1$00 ;
59298: LD_ADDR_VAR 0 8
59302: PUSH
59303: LD_INT 2100
59305: ST_TO_ADDR
// if amount < min then
59306: LD_VAR 0 9
59310: PUSH
59311: LD_VAR 0 3
59315: LESS
59316: IFFALSE 59334
// r := r * 2 else
59318: LD_ADDR_VAR 0 7
59322: PUSH
59323: LD_VAR 0 7
59327: PUSH
59328: LD_INT 2
59330: MUL
59331: ST_TO_ADDR
59332: GO 59360
// if amount > max then
59334: LD_VAR 0 9
59338: PUSH
59339: LD_VAR 0 4
59343: GREATER
59344: IFFALSE 59360
// r := r / 2 ;
59346: LD_ADDR_VAR 0 7
59350: PUSH
59351: LD_VAR 0 7
59355: PUSH
59356: LD_INT 2
59358: DIVREAL
59359: ST_TO_ADDR
// time := time / r ;
59360: LD_ADDR_VAR 0 8
59364: PUSH
59365: LD_VAR 0 8
59369: PUSH
59370: LD_VAR 0 7
59374: DIVREAL
59375: ST_TO_ADDR
// if time < 0 then
59376: LD_VAR 0 8
59380: PUSH
59381: LD_INT 0
59383: LESS
59384: IFFALSE 59401
// time := time * - 1 ;
59386: LD_ADDR_VAR 0 8
59390: PUSH
59391: LD_VAR 0 8
59395: PUSH
59396: LD_INT 1
59398: NEG
59399: MUL
59400: ST_TO_ADDR
// wait ( time ) ;
59401: LD_VAR 0 8
59405: PPUSH
59406: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
59410: LD_INT 35
59412: PPUSH
59413: LD_INT 875
59415: PPUSH
59416: CALL_OW 12
59420: PPUSH
59421: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
59425: LD_INT 1
59427: PPUSH
59428: LD_INT 5
59430: PPUSH
59431: CALL_OW 12
59435: PPUSH
59436: LD_VAR 0 1
59440: PPUSH
59441: LD_INT 1
59443: PPUSH
59444: CALL_OW 55
// end ;
59448: GO 59258
// end ;
59450: LD_VAR 0 5
59454: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
59455: LD_INT 0
59457: PPUSH
59458: PPUSH
59459: PPUSH
59460: PPUSH
59461: PPUSH
59462: PPUSH
59463: PPUSH
59464: PPUSH
// if not turrets or not factories then
59465: LD_VAR 0 1
59469: NOT
59470: PUSH
59471: LD_VAR 0 2
59475: NOT
59476: OR
59477: IFFALSE 59481
// exit ;
59479: GO 59788
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
59481: LD_ADDR_VAR 0 10
59485: PUSH
59486: LD_INT 5
59488: PUSH
59489: LD_INT 6
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 2
59498: PUSH
59499: LD_INT 4
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 3
59508: PUSH
59509: LD_INT 5
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 24
59523: PUSH
59524: LD_INT 25
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 23
59533: PUSH
59534: LD_INT 27
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 42
59547: PUSH
59548: LD_INT 43
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 44
59557: PUSH
59558: LD_INT 46
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 45
59567: PUSH
59568: LD_INT 47
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: LIST
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: LIST
59584: ST_TO_ADDR
// result := [ ] ;
59585: LD_ADDR_VAR 0 3
59589: PUSH
59590: EMPTY
59591: ST_TO_ADDR
// for i in turrets do
59592: LD_ADDR_VAR 0 4
59596: PUSH
59597: LD_VAR 0 1
59601: PUSH
59602: FOR_IN
59603: IFFALSE 59786
// begin nat := GetNation ( i ) ;
59605: LD_ADDR_VAR 0 7
59609: PUSH
59610: LD_VAR 0 4
59614: PPUSH
59615: CALL_OW 248
59619: ST_TO_ADDR
// weapon := 0 ;
59620: LD_ADDR_VAR 0 8
59624: PUSH
59625: LD_INT 0
59627: ST_TO_ADDR
// if not nat then
59628: LD_VAR 0 7
59632: NOT
59633: IFFALSE 59637
// continue ;
59635: GO 59602
// for j in list [ nat ] do
59637: LD_ADDR_VAR 0 5
59641: PUSH
59642: LD_VAR 0 10
59646: PUSH
59647: LD_VAR 0 7
59651: ARRAY
59652: PUSH
59653: FOR_IN
59654: IFFALSE 59695
// if GetBWeapon ( i ) = j [ 1 ] then
59656: LD_VAR 0 4
59660: PPUSH
59661: CALL_OW 269
59665: PUSH
59666: LD_VAR 0 5
59670: PUSH
59671: LD_INT 1
59673: ARRAY
59674: EQUAL
59675: IFFALSE 59693
// begin weapon := j [ 2 ] ;
59677: LD_ADDR_VAR 0 8
59681: PUSH
59682: LD_VAR 0 5
59686: PUSH
59687: LD_INT 2
59689: ARRAY
59690: ST_TO_ADDR
// break ;
59691: GO 59695
// end ;
59693: GO 59653
59695: POP
59696: POP
// if not weapon then
59697: LD_VAR 0 8
59701: NOT
59702: IFFALSE 59706
// continue ;
59704: GO 59602
// for k in factories do
59706: LD_ADDR_VAR 0 6
59710: PUSH
59711: LD_VAR 0 2
59715: PUSH
59716: FOR_IN
59717: IFFALSE 59782
// begin weapons := AvailableWeaponList ( k ) ;
59719: LD_ADDR_VAR 0 9
59723: PUSH
59724: LD_VAR 0 6
59728: PPUSH
59729: CALL_OW 478
59733: ST_TO_ADDR
// if not weapons then
59734: LD_VAR 0 9
59738: NOT
59739: IFFALSE 59743
// continue ;
59741: GO 59716
// if weapon in weapons then
59743: LD_VAR 0 8
59747: PUSH
59748: LD_VAR 0 9
59752: IN
59753: IFFALSE 59780
// begin result := [ i , weapon ] ;
59755: LD_ADDR_VAR 0 3
59759: PUSH
59760: LD_VAR 0 4
59764: PUSH
59765: LD_VAR 0 8
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: ST_TO_ADDR
// exit ;
59774: POP
59775: POP
59776: POP
59777: POP
59778: GO 59788
// end ; end ;
59780: GO 59716
59782: POP
59783: POP
// end ;
59784: GO 59602
59786: POP
59787: POP
// end ;
59788: LD_VAR 0 3
59792: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59793: LD_INT 0
59795: PPUSH
// if not side or side > 8 then
59796: LD_VAR 0 3
59800: NOT
59801: PUSH
59802: LD_VAR 0 3
59806: PUSH
59807: LD_INT 8
59809: GREATER
59810: OR
59811: IFFALSE 59815
// exit ;
59813: GO 59874
// if not range then
59815: LD_VAR 0 4
59819: NOT
59820: IFFALSE 59831
// range := - 12 ;
59822: LD_ADDR_VAR 0 4
59826: PUSH
59827: LD_INT 12
59829: NEG
59830: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59831: LD_VAR 0 1
59835: PPUSH
59836: LD_VAR 0 2
59840: PPUSH
59841: LD_VAR 0 3
59845: PPUSH
59846: LD_VAR 0 4
59850: PPUSH
59851: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59855: LD_VAR 0 1
59859: PPUSH
59860: LD_VAR 0 2
59864: PPUSH
59865: LD_VAR 0 3
59869: PPUSH
59870: CALL_OW 331
// end ;
59874: LD_VAR 0 5
59878: RET
// export function Video ( mode ) ; begin
59879: LD_INT 0
59881: PPUSH
// ingame_video = mode ;
59882: LD_ADDR_OWVAR 52
59886: PUSH
59887: LD_VAR 0 1
59891: ST_TO_ADDR
// interface_hidden = mode ;
59892: LD_ADDR_OWVAR 54
59896: PUSH
59897: LD_VAR 0 1
59901: ST_TO_ADDR
// end ;
59902: LD_VAR 0 2
59906: RET
// export function Join ( array , element ) ; begin
59907: LD_INT 0
59909: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59910: LD_ADDR_VAR 0 3
59914: PUSH
59915: LD_VAR 0 1
59919: PPUSH
59920: LD_VAR 0 1
59924: PUSH
59925: LD_INT 1
59927: PLUS
59928: PPUSH
59929: LD_VAR 0 2
59933: PPUSH
59934: CALL_OW 1
59938: ST_TO_ADDR
// end ;
59939: LD_VAR 0 3
59943: RET
// export function JoinUnion ( array , element ) ; begin
59944: LD_INT 0
59946: PPUSH
// result := array union element ;
59947: LD_ADDR_VAR 0 3
59951: PUSH
59952: LD_VAR 0 1
59956: PUSH
59957: LD_VAR 0 2
59961: UNION
59962: ST_TO_ADDR
// end ;
59963: LD_VAR 0 3
59967: RET
// export function GetBehemoths ( side ) ; begin
59968: LD_INT 0
59970: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
59971: LD_ADDR_VAR 0 2
59975: PUSH
59976: LD_INT 22
59978: PUSH
59979: LD_VAR 0 1
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 31
59990: PUSH
59991: LD_INT 25
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PPUSH
60002: CALL_OW 69
60006: ST_TO_ADDR
// end ;
60007: LD_VAR 0 2
60011: RET
// export function Shuffle ( array ) ; var i , index ; begin
60012: LD_INT 0
60014: PPUSH
60015: PPUSH
60016: PPUSH
// result := [ ] ;
60017: LD_ADDR_VAR 0 2
60021: PUSH
60022: EMPTY
60023: ST_TO_ADDR
// if not array then
60024: LD_VAR 0 1
60028: NOT
60029: IFFALSE 60033
// exit ;
60031: GO 60132
// Randomize ;
60033: CALL_OW 10
// for i = array downto 1 do
60037: LD_ADDR_VAR 0 3
60041: PUSH
60042: DOUBLE
60043: LD_VAR 0 1
60047: INC
60048: ST_TO_ADDR
60049: LD_INT 1
60051: PUSH
60052: FOR_DOWNTO
60053: IFFALSE 60130
// begin index := rand ( 1 , array ) ;
60055: LD_ADDR_VAR 0 4
60059: PUSH
60060: LD_INT 1
60062: PPUSH
60063: LD_VAR 0 1
60067: PPUSH
60068: CALL_OW 12
60072: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
60073: LD_ADDR_VAR 0 2
60077: PUSH
60078: LD_VAR 0 2
60082: PPUSH
60083: LD_VAR 0 2
60087: PUSH
60088: LD_INT 1
60090: PLUS
60091: PPUSH
60092: LD_VAR 0 1
60096: PUSH
60097: LD_VAR 0 4
60101: ARRAY
60102: PPUSH
60103: CALL_OW 2
60107: ST_TO_ADDR
// array := Delete ( array , index ) ;
60108: LD_ADDR_VAR 0 1
60112: PUSH
60113: LD_VAR 0 1
60117: PPUSH
60118: LD_VAR 0 4
60122: PPUSH
60123: CALL_OW 3
60127: ST_TO_ADDR
// end ;
60128: GO 60052
60130: POP
60131: POP
// end ;
60132: LD_VAR 0 2
60136: RET
// export function GetBaseMaterials ( base ) ; begin
60137: LD_INT 0
60139: PPUSH
// result := [ 0 , 0 , 0 ] ;
60140: LD_ADDR_VAR 0 2
60144: PUSH
60145: LD_INT 0
60147: PUSH
60148: LD_INT 0
60150: PUSH
60151: LD_INT 0
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: LIST
60158: ST_TO_ADDR
// if not base then
60159: LD_VAR 0 1
60163: NOT
60164: IFFALSE 60168
// exit ;
60166: GO 60217
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
60168: LD_ADDR_VAR 0 2
60172: PUSH
60173: LD_VAR 0 1
60177: PPUSH
60178: LD_INT 1
60180: PPUSH
60181: CALL_OW 275
60185: PUSH
60186: LD_VAR 0 1
60190: PPUSH
60191: LD_INT 2
60193: PPUSH
60194: CALL_OW 275
60198: PUSH
60199: LD_VAR 0 1
60203: PPUSH
60204: LD_INT 3
60206: PPUSH
60207: CALL_OW 275
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: LIST
60216: ST_TO_ADDR
// end ;
60217: LD_VAR 0 2
60221: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
60222: LD_INT 0
60224: PPUSH
60225: PPUSH
// result := array ;
60226: LD_ADDR_VAR 0 3
60230: PUSH
60231: LD_VAR 0 1
60235: ST_TO_ADDR
// if size > 0 then
60236: LD_VAR 0 2
60240: PUSH
60241: LD_INT 0
60243: GREATER
60244: IFFALSE 60290
// for i := array downto size do
60246: LD_ADDR_VAR 0 4
60250: PUSH
60251: DOUBLE
60252: LD_VAR 0 1
60256: INC
60257: ST_TO_ADDR
60258: LD_VAR 0 2
60262: PUSH
60263: FOR_DOWNTO
60264: IFFALSE 60288
// result := Delete ( result , result ) ;
60266: LD_ADDR_VAR 0 3
60270: PUSH
60271: LD_VAR 0 3
60275: PPUSH
60276: LD_VAR 0 3
60280: PPUSH
60281: CALL_OW 3
60285: ST_TO_ADDR
60286: GO 60263
60288: POP
60289: POP
// end ;
60290: LD_VAR 0 3
60294: RET
// export function ComExit ( unit ) ; var tmp ; begin
60295: LD_INT 0
60297: PPUSH
60298: PPUSH
// if not IsInUnit ( unit ) then
60299: LD_VAR 0 1
60303: PPUSH
60304: CALL_OW 310
60308: NOT
60309: IFFALSE 60313
// exit ;
60311: GO 60373
// tmp := IsInUnit ( unit ) ;
60313: LD_ADDR_VAR 0 3
60317: PUSH
60318: LD_VAR 0 1
60322: PPUSH
60323: CALL_OW 310
60327: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
60328: LD_VAR 0 3
60332: PPUSH
60333: CALL_OW 247
60337: PUSH
60338: LD_INT 2
60340: EQUAL
60341: IFFALSE 60354
// ComExitVehicle ( unit ) else
60343: LD_VAR 0 1
60347: PPUSH
60348: CALL_OW 121
60352: GO 60363
// ComExitBuilding ( unit ) ;
60354: LD_VAR 0 1
60358: PPUSH
60359: CALL_OW 122
// result := tmp ;
60363: LD_ADDR_VAR 0 2
60367: PUSH
60368: LD_VAR 0 3
60372: ST_TO_ADDR
// end ;
60373: LD_VAR 0 2
60377: RET
// export function ResetHc ; begin
60378: LD_INT 0
60380: PPUSH
// InitHc ;
60381: CALL_OW 19
// hc_importance := 0 ;
60385: LD_ADDR_OWVAR 32
60389: PUSH
60390: LD_INT 0
60392: ST_TO_ADDR
// end ;
60393: LD_VAR 0 1
60397: RET
